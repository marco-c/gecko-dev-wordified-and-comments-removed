#
ifndef
MOZILLA_GFX_SHAREDSURFACESPARENT_H
#
define
MOZILLA_GFX_SHAREDSURFACESPARENT_H
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ipc
/
SharedMemory
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
layers
/
LayersSurfaces
.
h
"
#
include
"
mozilla
/
layers
/
SourceSurfaceSharedData
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
nsExpirationTracker
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
DataSourceSurface
;
}
namespace
layers
{
class
SharedSurfacesChild
;
class
SharedSurfacesMemoryReport
;
class
SharedSurfacesParent
final
{
public
:
static
void
Initialize
(
)
;
static
void
ShutdownRenderThread
(
)
;
static
void
Shutdown
(
)
;
static
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
Get
(
const
wr
:
:
ExternalImageId
&
aId
)
;
static
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
Acquire
(
const
wr
:
:
ExternalImageId
&
aId
)
;
static
bool
Release
(
const
wr
:
:
ExternalImageId
&
aId
bool
aForCreator
=
false
)
;
static
void
Add
(
const
wr
:
:
ExternalImageId
&
aId
const
SurfaceDescriptorShared
&
aDesc
base
:
:
ProcessId
aPid
)
;
static
void
Remove
(
const
wr
:
:
ExternalImageId
&
aId
)
;
static
void
DestroyProcess
(
base
:
:
ProcessId
aPid
)
;
static
void
AccumulateMemoryReport
(
base
:
:
ProcessId
aPid
SharedSurfacesMemoryReport
&
aReport
)
;
static
bool
AccumulateMemoryReport
(
SharedSurfacesMemoryReport
&
aReport
)
;
static
void
AddTracking
(
gfx
:
:
SourceSurfaceSharedDataWrapper
*
aSurface
)
;
static
void
RemoveTracking
(
gfx
:
:
SourceSurfaceSharedDataWrapper
*
aSurface
)
;
static
bool
AgeOneGeneration
(
nsTArray
<
RefPtr
<
gfx
:
:
SourceSurfaceSharedDataWrapper
>
>
&
aExpired
)
;
static
bool
AgeAndExpireOneGeneration
(
)
;
private
:
friend
class
SharedSurfacesChild
;
friend
class
gfx
:
:
SourceSurfaceSharedDataWrapper
;
SharedSurfacesParent
(
)
;
static
void
AddSameProcess
(
const
wr
:
:
ExternalImageId
&
aId
gfx
:
:
SourceSurfaceSharedData
*
aSurface
)
;
static
void
AddTrackingLocked
(
gfx
:
:
SourceSurfaceSharedDataWrapper
*
aSurface
const
StaticMutexAutoLock
&
aAutoLock
)
;
static
void
RemoveTrackingLocked
(
gfx
:
:
SourceSurfaceSharedDataWrapper
*
aSurface
const
StaticMutexAutoLock
&
aAutoLock
)
;
static
bool
AgeOneGenerationLocked
(
nsTArray
<
RefPtr
<
gfx
:
:
SourceSurfaceSharedDataWrapper
>
>
&
aExpired
const
StaticMutexAutoLock
&
aAutoLock
)
;
static
void
ExpireMap
(
nsTArray
<
RefPtr
<
gfx
:
:
SourceSurfaceSharedDataWrapper
>
>
&
aExpired
)
;
static
StaticMutex
sMutex
;
static
StaticAutoPtr
<
SharedSurfacesParent
>
sInstance
;
nsRefPtrHashtable
<
nsUint64HashKey
gfx
:
:
SourceSurfaceSharedDataWrapper
>
mSurfaces
;
class
MappingTracker
final
:
public
ExpirationTrackerImpl
<
gfx
:
:
SourceSurfaceSharedDataWrapper
4
StaticMutex
StaticMutexAutoLock
>
{
public
:
explicit
MappingTracker
(
uint32_t
aExpirationTimeoutMS
nsIEventTarget
*
aEventTarget
)
:
ExpirationTrackerImpl
<
gfx
:
:
SourceSurfaceSharedDataWrapper
4
StaticMutex
StaticMutexAutoLock
>
(
aExpirationTimeoutMS
"
SharedMappingTracker
"
aEventTarget
)
{
}
void
TakeExpired
(
nsTArray
<
RefPtr
<
gfx
:
:
SourceSurfaceSharedDataWrapper
>
>
&
aExpired
const
StaticMutexAutoLock
&
aAutoLock
)
;
protected
:
void
NotifyExpiredLocked
(
gfx
:
:
SourceSurfaceSharedDataWrapper
*
aSurface
const
StaticMutexAutoLock
&
aAutoLock
)
override
;
void
NotifyHandlerEndLocked
(
const
StaticMutexAutoLock
&
aAutoLock
)
override
{
}
void
NotifyHandlerEnd
(
)
override
;
StaticMutex
&
GetMutex
(
)
override
{
return
sMutex
;
}
nsTArray
<
RefPtr
<
gfx
:
:
SourceSurfaceSharedDataWrapper
>
>
mExpired
;
}
;
MappingTracker
mTracker
;
}
;
}
}
#
endif
