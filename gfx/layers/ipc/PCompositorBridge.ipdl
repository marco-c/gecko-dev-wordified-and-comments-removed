include
LayersSurfaces
;
include
LayersMessages
;
include
PlatformWidgetTypes
;
include
PCompositorBridgeTypes
;
include
protocol
PAPZ
;
include
protocol
PAPZCTreeManager
;
include
protocol
PBrowser
;
include
protocol
PCanvas
;
include
protocol
PCompositorManager
;
include
protocol
PCompositorWidget
;
include
protocol
PLayerTransaction
;
include
protocol
PTexture
;
include
protocol
PWebGL
;
include
protocol
PWebRenderBridge
;
include
protocol
PWebGPU
;
include
"
mozilla
/
GfxMessageUtils
.
h
"
;
include
"
mozilla
/
layers
/
LayersMessageUtils
.
h
"
;
include
"
mozilla
/
layers
/
WebRenderMessageUtils
.
h
"
;
using
struct
mozilla
:
:
null_t
from
"
mozilla
/
ipc
/
IPCCore
.
h
"
;
using
struct
mozilla
:
:
layers
:
:
LayersId
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
struct
mozilla
:
:
layers
:
:
TextureFactoryIdentifier
from
"
mozilla
/
layers
/
CompositorTypes
.
h
"
;
using
struct
mozilla
:
:
layers
:
:
ScrollableLayerGuid
from
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
;
using
mozilla
:
:
layers
:
:
ScrollableLayerGuid
:
:
ViewID
from
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
;
using
mozilla
:
:
layers
:
:
MaybeZoomConstraints
from
"
mozilla
/
layers
/
ZoomConstraints
.
h
"
;
using
mozilla
:
:
layers
:
:
WindowKind
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
LayersBackend
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
CrossProcessMutexHandle
from
"
mozilla
/
ipc
/
CrossProcessMutex
.
h
"
;
using
mozilla
:
:
ipc
:
:
SharedMemoryBasic
:
:
Handle
from
"
mozilla
/
ipc
/
SharedMemoryBasic
.
h
"
;
using
mozilla
:
:
CSSIntRegion
from
"
Units
.
h
"
;
using
mozilla
:
:
LayoutDeviceIntPoint
from
"
Units
.
h
"
;
using
mozilla
:
:
LayoutDeviceIntRegion
from
"
Units
.
h
"
;
using
mozilla
:
:
LayoutDeviceIntSize
from
"
Units
.
h
"
;
using
class
mozilla
:
:
TimeStamp
from
"
mozilla
/
TimeStamp
.
h
"
;
using
mozilla
:
:
layers
:
:
TextureFlags
from
"
mozilla
/
layers
/
CompositorTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
CompositorOptions
from
"
mozilla
/
layers
/
CompositorOptions
.
h
"
;
using
mozilla
:
:
wr
:
:
PipelineId
from
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
;
using
mozilla
:
:
wr
:
:
IdNamespace
from
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
;
using
base
:
:
ProcessId
from
"
base
/
process
.
h
"
;
using
mozilla
:
:
wr
:
:
MaybeExternalImageId
from
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
LayersObserverEpoch
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
TransactionId
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
namespace
mozilla
{
namespace
layers
{
struct
FrameStats
{
TransactionId
id
;
TimeStamp
compositeStart
;
TimeStamp
renderStart
;
TimeStamp
compositeEnd
;
int32_t
contentFrameTime
;
double
resourceUploadTime
;
double
gpuCacheUploadTime
;
TimeStamp
transactionStart
;
TimeStamp
refreshStart
;
TimeStamp
fwdTime
;
TimeStamp
sceneBuiltTime
;
uint32_t
skippedComposites
;
nsCString
url
;
}
;
sync
refcounted
protocol
PCompositorBridge
{
manager
PCompositorManager
;
manages
PAPZ
;
manages
PAPZCTreeManager
;
manages
PLayerTransaction
;
manages
PTexture
;
manages
PCompositorWidget
;
manages
PWebRenderBridge
;
manages
PWebGL
;
manages
PWebGPU
;
child
:
async
InvalidateLayers
(
LayersId
layersId
)
;
[
Priority
=
control
]
async
DidComposite
(
LayersId
id
TransactionId
[
]
transactionId
TimeStamp
compositeStart
TimeStamp
compositeEnd
)
;
async
NotifyFrameStats
(
FrameStats
[
]
aFrameStats
)
;
async
RemotePaintIsReady
(
)
;
async
ParentAsyncMessages
(
AsyncParentMessageData
[
]
aMessages
)
;
async
ObserveLayersUpdate
(
LayersId
aLayersId
LayersObserverEpoch
aEpoch
bool
aActive
)
;
async
CompositorOptionsChanged
(
LayersId
id
CompositorOptions
newOptions
)
;
async
NotifyJankedAnimations
(
LayersId
id
uint64_t
[
]
aJankedAnimations
)
;
parent
:
async
__delete__
(
)
;
async
PCompositorWidget
(
CompositorWidgetInitData
aInitData
)
;
sync
Initialize
(
LayersId
rootLayerTreeId
)
;
async
PAPZ
(
LayersId
layersId
)
;
async
PAPZCTreeManager
(
LayersId
layersId
)
;
async
PWebGPU
(
)
;
sync
WillClose
(
)
;
sync
Pause
(
)
;
sync
Resume
(
)
;
async
ResumeAsync
(
)
;
sync
NotifyChildCreated
(
LayersId
id
)
returns
(
CompositorOptions
compositorOptions
)
;
sync
MapAndNotifyChildCreated
(
LayersId
id
ProcessId
owner
)
returns
(
CompositorOptions
compositorOptions
)
;
async
AdoptChild
(
LayersId
id
)
;
sync
NotifyChildRecreated
(
LayersId
id
)
returns
(
CompositorOptions
compositorOptions
)
;
sync
MakeSnapshot
(
SurfaceDescriptor
inSnapshot
IntRect
dirtyRect
)
;
sync
FlushRendering
(
)
;
async
FlushRenderingAsync
(
)
;
sync
WaitOnTransactionProcessed
(
)
;
async
ForcePresent
(
)
;
sync
StartFrameTimeRecording
(
int32_t
bufferSize
)
returns
(
uint32_t
startIndex
)
;
sync
StopFrameTimeRecording
(
uint32_t
startIndex
)
returns
(
float
[
]
intervals
)
;
async
PLayerTransaction
(
LayersBackend
[
]
layersBackendHints
LayersId
id
)
;
async
NotifyRegionInvalidated
(
nsIntRegion
region
)
;
async
RequestNotifyAfterRemotePaint
(
)
;
async
PTexture
(
SurfaceDescriptor
aSharedData
ReadLockDescriptor
aReadLock
LayersBackend
aBackend
TextureFlags
aTextureFlags
LayersId
id
uint64_t
aSerial
MaybeExternalImageId
aExternalImageId
)
;
async
InitPCanvasParent
(
Endpoint
<
PCanvasParent
>
aEndpoint
)
;
async
ReleasePCanvasParent
(
)
;
sync
SyncWithCompositor
(
)
;
async
PWebRenderBridge
(
PipelineId
pipelineId
LayoutDeviceIntSize
aSize
WindowKind
aKind
)
;
sync
CheckContentOnlyTDR
(
uint32_t
sequenceNum
)
returns
(
bool
isContentOnlyTDR
)
;
async
BeginRecording
(
TimeStamp
aRecordingStart
)
returns
(
bool
success
)
;
async
EndRecordingToDisk
(
)
returns
(
bool
success
)
;
async
EndRecordingToMemory
(
)
returns
(
CollectedFramesParams
?
frames
)
;
async
RequestFxrOutput
(
)
;
async
PWebGL
(
)
;
child
:
async
SharedCompositorFrameMetrics
(
Handle
metrics
CrossProcessMutexHandle
mutex
LayersId
aLayersId
uint32_t
aAPZCId
)
;
async
ReleaseSharedCompositorFrameMetrics
(
ViewID
aId
uint32_t
aAPZCId
)
;
}
;
}
}
