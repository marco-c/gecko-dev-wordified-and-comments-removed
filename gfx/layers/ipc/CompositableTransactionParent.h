#
ifndef
MOZILLA_LAYERS_COMPOSITABLETRANSACTIONPARENT_H
#
define
MOZILLA_LAYERS_COMPOSITABLETRANSACTIONPARENT_H
#
include
<
vector
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
namespace
mozilla
{
namespace
layers
{
class
CompositableHost
;
typedef
std
:
:
vector
<
mozilla
:
:
layers
:
:
EditReply
>
EditReplyVector
;
class
CompositableParentManager
:
public
HostIPCAllocator
{
public
:
CompositableParentManager
(
)
{
}
void
DestroyActor
(
const
OpDestroy
&
aOp
)
;
void
UpdateFwdTransactionId
(
uint64_t
aTransactionId
)
{
MOZ_ASSERT
(
mFwdTransactionId
<
aTransactionId
)
;
mFwdTransactionId
=
aTransactionId
;
}
uint64_t
GetFwdTransactionId
(
)
{
return
mFwdTransactionId
;
}
protected
:
bool
ReceiveCompositableUpdate
(
const
CompositableOperation
&
aEdit
EditReplyVector
&
replyv
)
;
uint64_t
mFwdTransactionId
=
0
;
}
;
}
}
#
endif
