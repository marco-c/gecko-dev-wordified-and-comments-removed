#
ifndef
MOZILLA_LAYERS_COMPOSITABLETRANSACTIONPARENT_H
#
define
MOZILLA_LAYERS_COMPOSITABLETRANSACTIONPARENT_H
#
include
<
vector
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
CompositableHost
.
h
"
namespace
mozilla
{
namespace
layers
{
class
CompositableParentManager
:
public
HostIPCAllocator
{
public
:
CompositableParentManager
(
)
{
}
void
DestroyActor
(
const
OpDestroy
&
aOp
)
;
void
UpdateFwdTransactionId
(
uint64_t
aTransactionId
)
{
MOZ_ASSERT
(
mFwdTransactionId
<
aTransactionId
)
;
mFwdTransactionId
=
aTransactionId
;
}
uint64_t
GetFwdTransactionId
(
)
{
return
mFwdTransactionId
;
}
RefPtr
<
CompositableHost
>
AddCompositable
(
const
CompositableHandle
&
aHandle
const
TextureInfo
&
aInfo
bool
aUseWebRender
)
;
RefPtr
<
CompositableHost
>
FindCompositable
(
const
CompositableHandle
&
aHandle
bool
aAllowDisablingWebRender
=
false
)
;
protected
:
bool
ReceiveCompositableUpdate
(
const
CompositableOperation
&
aEdit
)
;
bool
ReceiveCompositableUpdate
(
const
CompositableOperationDetail
&
aDetail
NotNull
<
CompositableHost
*
>
aCompositable
)
;
void
ReleaseCompositable
(
const
CompositableHandle
&
aHandle
)
;
uint64_t
mFwdTransactionId
=
0
;
std
:
:
map
<
uint64_t
RefPtr
<
CompositableHost
>
>
mCompositables
;
}
;
}
}
#
endif
