#
ifndef
MOZILLA_LAYERS_COMPOSITABLEFORWARDER
#
define
MOZILLA_LAYERS_COMPOSITABLEFORWARDER
#
include
<
stdint
.
h
>
#
include
"
gfxTypes
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
layers
/
CompositableClient
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
TextureForwarder
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTHashtable
.
h
"
namespace
mozilla
{
namespace
layers
{
class
CompositableClient
;
class
ImageContainer
;
class
SurfaceDescriptor
;
class
SurfaceDescriptorTiles
;
class
ThebesBufferData
;
class
PTextureChild
;
class
CompositableForwarder
:
public
KnowsCompositor
{
public
:
virtual
void
Connect
(
CompositableClient
*
aCompositable
ImageContainer
*
aImageContainer
=
nullptr
)
=
0
;
virtual
void
UseTiledLayerBuffer
(
CompositableClient
*
aCompositable
const
SurfaceDescriptorTiles
&
aTiledDescriptor
)
=
0
;
virtual
void
UpdateTextureRegion
(
CompositableClient
*
aCompositable
const
ThebesBufferData
&
aThebesBufferData
const
nsIntRegion
&
aUpdatedRegion
)
=
0
;
virtual
void
ReleaseCompositable
(
const
CompositableHandle
&
aHandle
)
=
0
;
virtual
bool
DestroyInTransaction
(
PTextureChild
*
aTexture
)
=
0
;
virtual
void
RemoveTextureFromCompositable
(
CompositableClient
*
aCompositable
TextureClient
*
aTexture
)
=
0
;
struct
TimedTextureClient
{
TimedTextureClient
(
)
:
mTextureClient
(
nullptr
)
mFrameID
(
0
)
mProducerID
(
0
)
{
}
TextureClient
*
mTextureClient
;
TimeStamp
mTimeStamp
;
nsIntRect
mPictureRect
;
int32_t
mFrameID
;
int32_t
mProducerID
;
}
;
virtual
void
UseTextures
(
CompositableClient
*
aCompositable
const
nsTArray
<
TimedTextureClient
>
&
aTextures
)
=
0
;
virtual
void
UseComponentAlphaTextures
(
CompositableClient
*
aCompositable
TextureClient
*
aClientOnBlack
TextureClient
*
aClientOnWhite
)
=
0
;
virtual
void
UpdateFwdTransactionId
(
)
=
0
;
virtual
uint64_t
GetFwdTransactionId
(
)
=
0
;
virtual
bool
InForwarderThread
(
)
=
0
;
void
AssertInForwarderThread
(
)
{
MOZ_ASSERT
(
InForwarderThread
(
)
)
;
}
static
uint32_t
GetMaxFileDescriptorsPerMessage
(
)
;
protected
:
nsTArray
<
RefPtr
<
TextureClient
>
>
mTexturesToRemove
;
nsTArray
<
RefPtr
<
CompositableClient
>
>
mCompositableClientsToRemove
;
}
;
}
}
#
endif
