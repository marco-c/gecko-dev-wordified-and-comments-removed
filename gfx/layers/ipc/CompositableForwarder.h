#
ifndef
MOZILLA_LAYERS_COMPOSITABLEFORWARDER
#
define
MOZILLA_LAYERS_COMPOSITABLEFORWARDER
#
include
<
stdint
.
h
>
#
include
"
gfxTypes
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
layers
/
CompositableClient
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
TextureForwarder
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
namespace
mozilla
{
namespace
layers
{
class
CompositableClient
;
class
AsyncTransactionTracker
;
class
ImageContainer
;
struct
TextureFactoryIdentifier
;
class
SurfaceDescriptor
;
class
SurfaceDescriptorTiles
;
class
ThebesBufferData
;
class
PTextureChild
;
class
CompositableForwarder
:
public
TextureForwarder
{
public
:
CompositableForwarder
(
)
:
mSerial
(
+
+
sSerialCounter
)
{
}
virtual
void
Connect
(
CompositableClient
*
aCompositable
ImageContainer
*
aImageContainer
=
nullptr
)
=
0
;
virtual
void
UseTiledLayerBuffer
(
CompositableClient
*
aCompositable
const
SurfaceDescriptorTiles
&
aTiledDescriptor
)
=
0
;
virtual
void
UpdateTextureRegion
(
CompositableClient
*
aCompositable
const
ThebesBufferData
&
aThebesBufferData
const
nsIntRegion
&
aUpdatedRegion
)
=
0
;
#
ifdef
MOZ_WIDGET_GONK
virtual
void
UseOverlaySource
(
CompositableClient
*
aCompositabl
const
OverlaySource
&
aOverlay
const
gfx
:
:
IntRect
&
aPictureRect
)
=
0
;
#
endif
virtual
bool
DestroyInTransaction
(
PTextureChild
*
aTexture
bool
synchronously
)
=
0
;
virtual
bool
DestroyInTransaction
(
PCompositableChild
*
aCompositable
bool
synchronously
)
=
0
;
virtual
void
RemoveTextureFromCompositable
(
CompositableClient
*
aCompositable
TextureClient
*
aTexture
)
=
0
;
virtual
void
RemoveTextureFromCompositableAsync
(
AsyncTransactionTracker
*
aAsyncTransactionTracker
CompositableClient
*
aCompositable
TextureClient
*
aTexture
)
{
}
struct
TimedTextureClient
{
TimedTextureClient
(
)
:
mTextureClient
(
nullptr
)
mFrameID
(
0
)
mProducerID
(
0
)
mInputFrameID
(
0
)
{
}
TextureClient
*
mTextureClient
;
TimeStamp
mTimeStamp
;
nsIntRect
mPictureRect
;
int32_t
mFrameID
;
int32_t
mProducerID
;
int32_t
mInputFrameID
;
}
;
virtual
void
UseTextures
(
CompositableClient
*
aCompositable
const
nsTArray
<
TimedTextureClient
>
&
aTextures
)
=
0
;
virtual
void
UseComponentAlphaTextures
(
CompositableClient
*
aCompositable
TextureClient
*
aClientOnBlack
TextureClient
*
aClientOnWhite
)
=
0
;
virtual
void
SendPendingAsyncMessges
(
)
=
0
;
void
IdentifyTextureHost
(
const
TextureFactoryIdentifier
&
aIdentifier
)
;
int32_t
GetSerial
(
)
{
return
mSerial
;
}
SyncObject
*
GetSyncObject
(
)
{
return
mSyncObject
;
}
virtual
CompositableForwarder
*
AsCompositableForwarder
(
)
override
{
return
this
;
}
protected
:
nsTArray
<
RefPtr
<
TextureClient
>
>
mTexturesToRemove
;
nsTArray
<
RefPtr
<
CompositableClient
>
>
mCompositableClientsToRemove
;
RefPtr
<
SyncObject
>
mSyncObject
;
const
int32_t
mSerial
;
static
mozilla
:
:
Atomic
<
int32_t
>
sSerialCounter
;
}
;
}
}
#
endif
