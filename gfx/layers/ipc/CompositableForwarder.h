#
ifndef
MOZILLA_LAYERS_COMPOSITABLEFORWARDER
#
define
MOZILLA_LAYERS_COMPOSITABLEFORWARDER
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
layers
/
KnowsCompositor
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
layers
{
class
CompositableClient
;
class
CompositableHandle
;
class
ImageContainer
;
class
PTextureChild
;
class
SurfaceDescriptorTiles
;
class
TextureClient
;
struct
FwdTransactionCounter
{
explicit
FwdTransactionCounter
(
mozilla
:
:
ipc
:
:
IToplevelProtocol
*
aToplevel
)
:
mFwdTransactionType
(
aToplevel
-
>
GetProtocolId
(
)
)
{
}
mozilla
:
:
ipc
:
:
ProtocolId
mFwdTransactionType
;
uint64_t
mFwdTransactionId
=
0
;
}
;
class
CompositableForwarder
:
public
KnowsCompositor
{
public
:
CompositableForwarder
(
)
;
~
CompositableForwarder
(
)
;
virtual
void
Connect
(
CompositableClient
*
aCompositable
ImageContainer
*
aImageContainer
=
nullptr
)
=
0
;
virtual
void
ReleaseCompositable
(
const
CompositableHandle
&
aHandle
)
=
0
;
virtual
bool
DestroyInTransaction
(
PTextureChild
*
aTexture
)
=
0
;
virtual
void
RemoveTextureFromCompositable
(
CompositableClient
*
aCompositable
TextureClient
*
aTexture
)
=
0
;
struct
TimedTextureClient
{
TimedTextureClient
(
)
:
mTextureClient
(
nullptr
)
mFrameID
(
0
)
mProducerID
(
0
)
{
}
TextureClient
*
mTextureClient
;
TimeStamp
mTimeStamp
;
nsIntRect
mPictureRect
;
int32_t
mFrameID
;
int32_t
mProducerID
;
}
;
virtual
void
UseTextures
(
CompositableClient
*
aCompositable
const
nsTArray
<
TimedTextureClient
>
&
aTextures
)
=
0
;
virtual
void
UseRemoteTexture
(
CompositableClient
*
aCompositable
const
RemoteTextureId
aTextureId
const
RemoteTextureOwnerId
aOwnerId
const
gfx
:
:
IntSize
aSize
const
TextureFlags
aFlags
)
=
0
;
virtual
void
EnableRemoteTexturePushCallback
(
CompositableClient
*
aCompositable
const
RemoteTextureOwnerId
aOwnerId
const
gfx
:
:
IntSize
aSize
const
TextureFlags
aFlags
)
=
0
;
void
UpdateFwdTransactionId
(
)
{
+
+
GetFwdTransactionCounter
(
)
.
mFwdTransactionId
;
}
uint64_t
GetFwdTransactionId
(
)
{
return
GetFwdTransactionCounter
(
)
.
mFwdTransactionId
;
}
mozilla
:
:
ipc
:
:
ProtocolId
GetFwdTransactionType
(
)
{
return
GetFwdTransactionCounter
(
)
.
mFwdTransactionType
;
}
virtual
bool
InForwarderThread
(
)
=
0
;
void
AssertInForwarderThread
(
)
{
MOZ_ASSERT
(
InForwarderThread
(
)
)
;
}
protected
:
virtual
FwdTransactionCounter
&
GetFwdTransactionCounter
(
)
=
0
;
nsTArray
<
RefPtr
<
TextureClient
>
>
mTexturesToRemove
;
nsTArray
<
RefPtr
<
CompositableClient
>
>
mCompositableClientsToRemove
;
}
;
}
}
#
endif
