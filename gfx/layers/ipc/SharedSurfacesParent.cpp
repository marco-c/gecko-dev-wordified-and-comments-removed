#
include
"
SharedSurfacesParent
.
h
"
#
include
"
mozilla
/
layers
/
SourceSurfaceSharedData
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
webrender
/
RenderSharedSurfaceTextureHost
.
h
"
#
include
"
mozilla
/
webrender
/
RenderThread
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
gfx
;
StaticAutoPtr
<
SharedSurfacesParent
>
SharedSurfacesParent
:
:
sInstance
;
SharedSurfacesParent
:
:
SharedSurfacesParent
(
)
{
}
SharedSurfacesParent
:
:
~
SharedSurfacesParent
(
)
{
}
void
SharedSurfacesParent
:
:
Initialize
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
sInstance
)
{
sInstance
=
new
SharedSurfacesParent
(
)
;
}
}
void
SharedSurfacesParent
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
sInstance
=
nullptr
;
}
already_AddRefed
<
DataSourceSurface
>
SharedSurfacesParent
:
:
Get
(
const
wr
:
:
ExternalImageId
&
aId
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
!
sInstance
)
{
return
nullptr
;
}
RefPtr
<
SourceSurfaceSharedDataWrapper
>
surface
;
sInstance
-
>
mSurfaces
.
Get
(
wr
:
:
AsUint64
(
aId
)
getter_AddRefs
(
surface
)
)
;
return
surface
.
forget
(
)
;
}
void
SharedSurfacesParent
:
:
Remove
(
const
wr
:
:
ExternalImageId
&
aId
)
{
if
(
!
sInstance
)
{
return
;
}
uint64_t
id
=
wr
:
:
AsUint64
(
aId
)
;
RefPtr
<
SourceSurfaceSharedDataWrapper
>
surface
;
sInstance
-
>
mSurfaces
.
Get
(
wr
:
:
AsUint64
(
aId
)
getter_AddRefs
(
surface
)
)
;
if
(
!
surface
)
{
return
;
}
sInstance
-
>
mSurfaces
.
Remove
(
id
)
;
}
void
SharedSurfacesParent
:
:
AddSameProcess
(
const
wr
:
:
ExternalImageId
&
aId
SourceSurfaceSharedData
*
aSurface
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
SourceSurfaceSharedDataWrapper
>
surface
=
new
SourceSurfaceSharedDataWrapper
(
)
;
surface
-
>
Init
(
aSurface
)
;
uint64_t
id
=
wr
:
:
AsUint64
(
aId
)
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
layers
:
:
SharedSurfacesParent
:
:
AddSameProcess
"
[
surface
id
]
(
)
-
>
void
{
if
(
!
sInstance
)
{
return
;
}
MOZ_ASSERT
(
!
sInstance
-
>
mSurfaces
.
Contains
(
id
)
)
;
RefPtr
<
wr
:
:
RenderSharedSurfaceTextureHost
>
texture
=
new
wr
:
:
RenderSharedSurfaceTextureHost
(
surface
)
;
wr
:
:
RenderThread
:
:
Get
(
)
-
>
RegisterExternalImage
(
id
texture
.
forget
(
)
)
;
sInstance
-
>
mSurfaces
.
Put
(
id
surface
)
;
}
)
;
CompositorThreadHolder
:
:
Loop
(
)
-
>
PostTask
(
task
.
forget
(
)
)
;
}
void
SharedSurfacesParent
:
:
RemoveSameProcess
(
const
wr
:
:
ExternalImageId
&
aId
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
const
wr
:
:
ExternalImageId
id
(
aId
)
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
layers
:
:
SharedSurfacesParent
:
:
RemoveSameProcess
"
[
id
]
(
)
-
>
void
{
Remove
(
id
)
;
}
)
;
CompositorThreadHolder
:
:
Loop
(
)
-
>
PostTask
(
task
.
forget
(
)
)
;
}
void
SharedSurfacesParent
:
:
DestroyProcess
(
base
:
:
ProcessId
aPid
)
{
if
(
!
sInstance
)
{
return
;
}
for
(
auto
i
=
sInstance
-
>
mSurfaces
.
Iter
(
)
;
!
i
.
Done
(
)
;
i
.
Next
(
)
)
{
if
(
i
.
Data
(
)
-
>
GetCreatorPid
(
)
=
=
aPid
)
{
wr
:
:
RenderThread
:
:
Get
(
)
-
>
UnregisterExternalImage
(
i
.
Key
(
)
)
;
i
.
Remove
(
)
;
}
}
}
void
SharedSurfacesParent
:
:
Add
(
const
wr
:
:
ExternalImageId
&
aId
const
SurfaceDescriptorShared
&
aDesc
base
:
:
ProcessId
aPid
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
MOZ_ASSERT
(
aPid
!
=
base
:
:
GetCurrentProcId
(
)
)
;
if
(
!
sInstance
)
{
return
;
}
RefPtr
<
SourceSurfaceSharedDataWrapper
>
surface
=
new
SourceSurfaceSharedDataWrapper
(
)
;
if
(
NS_WARN_IF
(
!
surface
-
>
Init
(
aDesc
.
size
(
)
aDesc
.
stride
(
)
aDesc
.
format
(
)
aDesc
.
handle
(
)
aPid
)
)
)
{
return
;
}
uint64_t
id
=
wr
:
:
AsUint64
(
aId
)
;
MOZ_ASSERT
(
!
sInstance
-
>
mSurfaces
.
Contains
(
id
)
)
;
RefPtr
<
wr
:
:
RenderSharedSurfaceTextureHost
>
texture
=
new
wr
:
:
RenderSharedSurfaceTextureHost
(
surface
)
;
wr
:
:
RenderThread
:
:
Get
(
)
-
>
RegisterExternalImage
(
id
texture
.
forget
(
)
)
;
sInstance
-
>
mSurfaces
.
Put
(
id
surface
.
forget
(
)
)
;
}
}
}
