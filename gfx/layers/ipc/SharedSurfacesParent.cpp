#
include
"
SharedSurfacesParent
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
StaticPrefs_image
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
gfx
/
GPUProcessManager
.
h
"
#
include
"
mozilla
/
layers
/
SharedSurfacesMemoryReport
.
h
"
#
include
"
mozilla
/
layers
/
SourceSurfaceSharedData
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
webrender
/
RenderSharedSurfaceTextureHost
.
h
"
#
include
"
mozilla
/
webrender
/
RenderThread
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
gfx
;
StaticMonitor
SharedSurfacesParent
:
:
sMonitor
;
StaticAutoPtr
<
SharedSurfacesParent
>
SharedSurfacesParent
:
:
sInstance
;
static
const
TimeDuration
kGetTimeout
=
TimeDuration
:
:
FromMilliseconds
(
50
)
;
void
SharedSurfacesParent
:
:
MappingTracker
:
:
NotifyExpiredLocked
(
SourceSurfaceSharedDataWrapper
*
aSurface
const
StaticMonitorAutoLock
&
aAutoLock
)
{
RemoveObjectLocked
(
aSurface
aAutoLock
)
;
mExpired
.
AppendElement
(
aSurface
)
;
}
void
SharedSurfacesParent
:
:
MappingTracker
:
:
TakeExpired
(
nsTArray
<
RefPtr
<
gfx
:
:
SourceSurfaceSharedDataWrapper
>
>
&
aExpired
const
StaticMonitorAutoLock
&
aAutoLock
)
{
aExpired
=
std
:
:
move
(
mExpired
)
;
}
void
SharedSurfacesParent
:
:
MappingTracker
:
:
NotifyHandlerEnd
(
)
{
nsTArray
<
RefPtr
<
gfx
:
:
SourceSurfaceSharedDataWrapper
>
>
expired
;
{
StaticMonitorAutoLock
lock
(
sMonitor
)
;
TakeExpired
(
expired
lock
)
;
}
SharedSurfacesParent
:
:
ExpireMap
(
expired
)
;
}
SharedSurfacesParent
:
:
SharedSurfacesParent
(
)
:
mTracker
(
StaticPrefs
:
:
image_mem_shared_unmap_min_expiration_ms_AtStartup
(
)
mozilla
:
:
GetCurrentEventTarget
(
)
)
{
}
void
SharedSurfacesParent
:
:
Initialize
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
StaticMonitorAutoLock
lock
(
sMonitor
)
;
if
(
!
sInstance
)
{
sInstance
=
new
SharedSurfacesParent
(
)
;
}
}
void
SharedSurfacesParent
:
:
ShutdownRenderThread
(
)
{
MOZ_ASSERT
(
wr
:
:
RenderThread
:
:
IsInRenderThread
(
)
)
;
StaticMonitorAutoLock
lock
(
sMonitor
)
;
MOZ_ASSERT
(
sInstance
)
;
for
(
const
auto
&
key
:
sInstance
-
>
mSurfaces
.
Keys
(
)
)
{
wr
:
:
RenderThread
:
:
Get
(
)
-
>
UnregisterExternalImageDuringShutdown
(
wr
:
:
ToExternalImageId
(
key
)
)
;
}
}
void
SharedSurfacesParent
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
StaticMonitorAutoLock
lock
(
sMonitor
)
;
sInstance
=
nullptr
;
}
already_AddRefed
<
DataSourceSurface
>
SharedSurfacesParent
:
:
Get
(
const
wr
:
:
ExternalImageId
&
aId
)
{
StaticMonitorAutoLock
lock
(
sMonitor
)
;
if
(
!
sInstance
)
{
gfxCriticalNote
<
<
"
SSP
:
Get
"
<
<
wr
:
:
AsUint64
(
aId
)
<
<
"
shtd
"
;
return
nullptr
;
}
RefPtr
<
SourceSurfaceSharedDataWrapper
>
surface
;
while
(
!
sInstance
-
>
mSurfaces
.
Get
(
wr
:
:
AsUint64
(
aId
)
getter_AddRefs
(
surface
)
)
)
{
CVStatus
status
=
lock
.
Wait
(
kGetTimeout
)
;
if
(
status
=
=
CVStatus
:
:
Timeout
)
{
return
nullptr
;
}
}
return
surface
.
forget
(
)
;
}
already_AddRefed
<
DataSourceSurface
>
SharedSurfacesParent
:
:
Acquire
(
const
wr
:
:
ExternalImageId
&
aId
)
{
StaticMonitorAutoLock
lock
(
sMonitor
)
;
if
(
!
sInstance
)
{
gfxCriticalNote
<
<
"
SSP
:
Acq
"
<
<
wr
:
:
AsUint64
(
aId
)
<
<
"
shtd
"
;
return
nullptr
;
}
RefPtr
<
SourceSurfaceSharedDataWrapper
>
surface
;
sInstance
-
>
mSurfaces
.
Get
(
wr
:
:
AsUint64
(
aId
)
getter_AddRefs
(
surface
)
)
;
if
(
surface
)
{
DebugOnly
<
bool
>
rv
=
surface
-
>
AddConsumer
(
)
;
MOZ_ASSERT
(
!
rv
)
;
}
return
surface
.
forget
(
)
;
}
bool
SharedSurfacesParent
:
:
Release
(
const
wr
:
:
ExternalImageId
&
aId
bool
aForCreator
)
{
StaticMonitorAutoLock
lock
(
sMonitor
)
;
if
(
!
sInstance
)
{
return
false
;
}
uint64_t
id
=
wr
:
:
AsUint64
(
aId
)
;
RefPtr
<
SourceSurfaceSharedDataWrapper
>
surface
;
sInstance
-
>
mSurfaces
.
Get
(
wr
:
:
AsUint64
(
aId
)
getter_AddRefs
(
surface
)
)
;
if
(
!
surface
)
{
return
false
;
}
if
(
surface
-
>
RemoveConsumer
(
aForCreator
)
)
{
RemoveTrackingLocked
(
surface
lock
)
;
wr
:
:
RenderThread
:
:
Get
(
)
-
>
UnregisterExternalImage
(
wr
:
:
ToExternalImageId
(
id
)
)
;
sInstance
-
>
mSurfaces
.
Remove
(
id
)
;
}
return
true
;
}
void
SharedSurfacesParent
:
:
AddSameProcess
(
const
wr
:
:
ExternalImageId
&
aId
SourceSurfaceSharedData
*
aSurface
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
StaticMonitorAutoLock
lock
(
sMonitor
)
;
if
(
!
sInstance
)
{
gfxCriticalNote
<
<
"
SSP
:
Ads
"
<
<
wr
:
:
AsUint64
(
aId
)
<
<
"
shtd
"
;
return
;
}
RefPtr
<
SourceSurfaceSharedDataWrapper
>
surface
=
new
SourceSurfaceSharedDataWrapper
(
)
;
surface
-
>
Init
(
aSurface
)
;
uint64_t
id
=
wr
:
:
AsUint64
(
aId
)
;
MOZ_ASSERT
(
!
sInstance
-
>
mSurfaces
.
Contains
(
id
)
)
;
auto
texture
=
MakeRefPtr
<
wr
:
:
RenderSharedSurfaceTextureHost
>
(
surface
)
;
wr
:
:
RenderThread
:
:
Get
(
)
-
>
RegisterExternalImage
(
aId
texture
.
forget
(
)
)
;
surface
-
>
AddConsumer
(
)
;
sInstance
-
>
mSurfaces
.
InsertOrUpdate
(
id
std
:
:
move
(
surface
)
)
;
lock
.
NotifyAll
(
)
;
}
void
SharedSurfacesParent
:
:
DestroyProcess
(
base
:
:
ProcessId
aPid
)
{
StaticMonitorAutoLock
lock
(
sMonitor
)
;
if
(
!
sInstance
)
{
return
;
}
for
(
auto
i
=
sInstance
-
>
mSurfaces
.
Iter
(
)
;
!
i
.
Done
(
)
;
i
.
Next
(
)
)
{
SourceSurfaceSharedDataWrapper
*
surface
=
i
.
Data
(
)
;
if
(
surface
-
>
GetCreatorPid
(
)
=
=
aPid
&
&
surface
-
>
HasCreatorRef
(
)
&
&
surface
-
>
RemoveConsumer
(
true
)
)
{
RemoveTrackingLocked
(
surface
lock
)
;
wr
:
:
RenderThread
:
:
Get
(
)
-
>
UnregisterExternalImage
(
wr
:
:
ToExternalImageId
(
i
.
Key
(
)
)
)
;
i
.
Remove
(
)
;
}
}
}
void
SharedSurfacesParent
:
:
Add
(
const
wr
:
:
ExternalImageId
&
aId
SurfaceDescriptorShared
&
&
aDesc
base
:
:
ProcessId
aPid
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
MOZ_ASSERT
(
aPid
!
=
base
:
:
GetCurrentProcId
(
)
)
;
RefPtr
<
SourceSurfaceSharedDataWrapper
>
surface
=
new
SourceSurfaceSharedDataWrapper
(
)
;
surface
-
>
Init
(
aDesc
.
size
(
)
aDesc
.
stride
(
)
aDesc
.
format
(
)
std
:
:
move
(
aDesc
.
handle
(
)
)
aPid
)
;
StaticMonitorAutoLock
lock
(
sMonitor
)
;
if
(
!
sInstance
)
{
gfxCriticalNote
<
<
"
SSP
:
Add
"
<
<
wr
:
:
AsUint64
(
aId
)
<
<
"
shtd
"
;
return
;
}
uint64_t
id
=
wr
:
:
AsUint64
(
aId
)
;
MOZ_ASSERT
(
!
sInstance
-
>
mSurfaces
.
Contains
(
id
)
)
;
auto
texture
=
MakeRefPtr
<
wr
:
:
RenderSharedSurfaceTextureHost
>
(
surface
)
;
wr
:
:
RenderThread
:
:
Get
(
)
-
>
RegisterExternalImage
(
aId
texture
.
forget
(
)
)
;
surface
-
>
AddConsumer
(
)
;
sInstance
-
>
mSurfaces
.
InsertOrUpdate
(
id
std
:
:
move
(
surface
)
)
;
lock
.
NotifyAll
(
)
;
}
void
SharedSurfacesParent
:
:
Remove
(
const
wr
:
:
ExternalImageId
&
aId
)
{
DebugOnly
<
bool
>
rv
=
Release
(
aId
true
)
;
MOZ_ASSERT
(
rv
)
;
}
void
SharedSurfacesParent
:
:
AddTrackingLocked
(
SourceSurfaceSharedDataWrapper
*
aSurface
const
StaticMonitorAutoLock
&
aAutoLock
)
{
MOZ_ASSERT
(
!
aSurface
-
>
GetExpirationState
(
)
-
>
IsTracked
(
)
)
;
sInstance
-
>
mTracker
.
AddObjectLocked
(
aSurface
aAutoLock
)
;
}
void
SharedSurfacesParent
:
:
AddTracking
(
SourceSurfaceSharedDataWrapper
*
aSurface
)
{
StaticMonitorAutoLock
lock
(
sMonitor
)
;
if
(
!
sInstance
)
{
return
;
}
AddTrackingLocked
(
aSurface
lock
)
;
}
void
SharedSurfacesParent
:
:
RemoveTrackingLocked
(
SourceSurfaceSharedDataWrapper
*
aSurface
const
StaticMonitorAutoLock
&
aAutoLock
)
{
if
(
!
aSurface
-
>
GetExpirationState
(
)
-
>
IsTracked
(
)
)
{
return
;
}
sInstance
-
>
mTracker
.
RemoveObjectLocked
(
aSurface
aAutoLock
)
;
}
void
SharedSurfacesParent
:
:
RemoveTracking
(
SourceSurfaceSharedDataWrapper
*
aSurface
)
{
StaticMonitorAutoLock
lock
(
sMonitor
)
;
if
(
!
sInstance
)
{
return
;
}
RemoveTrackingLocked
(
aSurface
lock
)
;
}
bool
SharedSurfacesParent
:
:
AgeOneGenerationLocked
(
nsTArray
<
RefPtr
<
SourceSurfaceSharedDataWrapper
>
>
&
aExpired
const
StaticMonitorAutoLock
&
aAutoLock
)
{
if
(
sInstance
-
>
mTracker
.
IsEmptyLocked
(
aAutoLock
)
)
{
return
false
;
}
sInstance
-
>
mTracker
.
AgeOneGenerationLocked
(
aAutoLock
)
;
sInstance
-
>
mTracker
.
TakeExpired
(
aExpired
aAutoLock
)
;
return
true
;
}
bool
SharedSurfacesParent
:
:
AgeOneGeneration
(
nsTArray
<
RefPtr
<
SourceSurfaceSharedDataWrapper
>
>
&
aExpired
)
{
StaticMonitorAutoLock
lock
(
sMonitor
)
;
if
(
!
sInstance
)
{
return
false
;
}
return
AgeOneGenerationLocked
(
aExpired
lock
)
;
}
bool
SharedSurfacesParent
:
:
AgeAndExpireOneGeneration
(
)
{
nsTArray
<
RefPtr
<
SourceSurfaceSharedDataWrapper
>
>
expired
;
bool
aged
=
AgeOneGeneration
(
expired
)
;
ExpireMap
(
expired
)
;
return
aged
;
}
void
SharedSurfacesParent
:
:
ExpireMap
(
nsTArray
<
RefPtr
<
SourceSurfaceSharedDataWrapper
>
>
&
aExpired
)
{
for
(
auto
&
surface
:
aExpired
)
{
surface
-
>
ExpireMap
(
)
;
}
}
void
SharedSurfacesParent
:
:
AccumulateMemoryReport
(
base
:
:
ProcessId
aPid
SharedSurfacesMemoryReport
&
aReport
)
{
StaticMonitorAutoLock
lock
(
sMonitor
)
;
if
(
!
sInstance
)
{
return
;
}
for
(
const
auto
&
entry
:
sInstance
-
>
mSurfaces
)
{
SourceSurfaceSharedDataWrapper
*
surface
=
entry
.
GetData
(
)
;
if
(
surface
-
>
GetCreatorPid
(
)
=
=
aPid
)
{
aReport
.
mSurfaces
.
insert
(
std
:
:
make_pair
(
entry
.
GetKey
(
)
SharedSurfacesMemoryReport
:
:
SurfaceEntry
{
aPid
surface
-
>
GetSize
(
)
surface
-
>
Stride
(
)
surface
-
>
GetConsumers
(
)
surface
-
>
HasCreatorRef
(
)
}
)
)
;
}
}
}
bool
SharedSurfacesParent
:
:
AccumulateMemoryReport
(
SharedSurfacesMemoryReport
&
aReport
)
{
if
(
XRE_IsParentProcess
(
)
)
{
GPUProcessManager
*
gpm
=
GPUProcessManager
:
:
Get
(
)
;
if
(
!
gpm
|
|
gpm
-
>
GPUProcessPid
(
)
!
=
base
:
:
kInvalidProcessId
)
{
return
false
;
}
}
else
if
(
!
XRE_IsGPUProcess
(
)
)
{
return
false
;
}
StaticMonitorAutoLock
lock
(
sMonitor
)
;
if
(
!
sInstance
)
{
return
true
;
}
for
(
const
auto
&
entry
:
sInstance
-
>
mSurfaces
)
{
SourceSurfaceSharedDataWrapper
*
surface
=
entry
.
GetData
(
)
;
aReport
.
mSurfaces
.
insert
(
std
:
:
make_pair
(
entry
.
GetKey
(
)
SharedSurfacesMemoryReport
:
:
SurfaceEntry
{
surface
-
>
GetCreatorPid
(
)
surface
-
>
GetSize
(
)
surface
-
>
Stride
(
)
surface
-
>
GetConsumers
(
)
surface
-
>
HasCreatorRef
(
)
}
)
)
;
}
return
true
;
}
}
}
