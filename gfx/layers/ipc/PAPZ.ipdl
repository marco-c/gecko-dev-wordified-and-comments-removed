include
"
mozilla
/
GfxMessageUtils
.
h
"
;
include
"
mozilla
/
layers
/
LayersMessageUtils
.
h
"
;
include
protocol
PCompositorBridge
;
using
CSSRect
from
"
Units
.
h
"
;
using
struct
mozilla
:
:
layers
:
:
RepaintRequest
from
"
mozilla
/
layers
/
RepaintRequest
.
h
"
;
using
struct
mozilla
:
:
layers
:
:
ScrollableLayerGuid
from
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
;
using
mozilla
:
:
layers
:
:
ScrollableLayerGuid
:
:
ViewID
from
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
;
using
mozilla
:
:
layers
:
:
GeckoContentController_APZStateChange
from
"
mozilla
/
layers
/
GeckoContentControllerTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
ScrollDirection
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
MatrixMessage
from
"
mozilla
/
layers
/
MatrixMessage
.
h
"
;
using
mozilla
:
:
dom
:
:
TabId
from
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
;
using
mozilla
:
:
dom
:
:
ContentParentId
from
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
;
using
mozilla
:
:
layers
:
:
AsyncDragMetrics
from
"
mozilla
/
layers
/
AsyncDragMetrics
.
h
"
;
using
class
nsRegion
from
"
nsRegion
.
h
"
;
namespace
mozilla
{
namespace
layers
{
sync
protocol
PAPZ
{
manager
PCompositorBridge
;
parent
:
async
__delete__
(
)
;
child
:
async
LayerTransforms
(
MatrixMessage
[
]
aTransforms
)
;
[
Priority
=
control
]
async
RequestContentRepaint
(
RepaintRequest
request
)
;
async
UpdateOverscrollVelocity
(
ScrollableLayerGuid
aGuid
float
aX
float
aY
bool
aIsRootContent
)
;
async
UpdateOverscrollOffset
(
ScrollableLayerGuid
aGuid
float
aX
float
aY
bool
aIsRootContent
)
;
async
NotifyMozMouseScrollEvent
(
ViewID
aScrollId
nsString
aEvent
)
;
async
NotifyAPZStateChange
(
ScrollableLayerGuid
aGuid
GeckoContentController_APZStateChange
aChange
int
aArg
)
;
[
Priority
=
control
]
async
NotifyFlushComplete
(
)
;
async
NotifyAsyncScrollbarDragInitiated
(
uint64_t
aDragBlockId
ViewID
aScrollId
ScrollDirection
aDirection
)
;
async
NotifyAsyncScrollbarDragRejected
(
ViewID
aScrollId
)
;
async
NotifyAsyncAutoscrollRejected
(
ViewID
aScrollId
)
;
both
:
async
Destroy
(
)
;
}
;
}
}
