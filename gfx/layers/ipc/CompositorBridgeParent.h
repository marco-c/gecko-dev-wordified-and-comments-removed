#
ifndef
mozilla_layers_CompositorBridgeParent_h
#
define
mozilla_layers_CompositorBridgeParent_h
#
include
<
stdint
.
h
>
#
include
"
Layers
.
h
"
#
include
"
base
/
basictypes
.
h
"
#
include
"
base
/
platform_thread
.
h
"
#
include
"
base
/
thread
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
layers
/
GeckoContentController
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
layers
/
PCompositorBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
ShadowLayersManager
.
h
"
#
include
"
mozilla
/
layers
/
APZTestData
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
ThreadSafeRefcountingWithMainThreadDestruction
.
h
"
#
include
"
mozilla
/
VsyncDispatcher
.
h
"
class
CancelableTask
;
class
MessageLoop
;
class
nsIWidget
;
namespace
mozilla
{
namespace
gfx
{
class
DrawTarget
;
}
namespace
layers
{
class
APZCTreeManager
;
class
AsyncCompositionManager
;
class
Compositor
;
class
CompositorBridgeParent
;
class
LayerManagerComposite
;
class
LayerTransactionParent
;
class
PAPZParent
;
class
CrossProcessCompositorBridgeParent
;
struct
ScopedLayerTreeRegistration
{
ScopedLayerTreeRegistration
(
APZCTreeManager
*
aApzctm
uint64_t
aLayersId
Layer
*
aRoot
GeckoContentController
*
aController
)
;
~
ScopedLayerTreeRegistration
(
)
;
private
:
uint64_t
mLayersId
;
}
;
class
CompositorThreadHolder
final
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING_WITH_MAIN_THREAD_DESTRUCTION
(
CompositorThreadHolder
)
public
:
CompositorThreadHolder
(
)
;
base
:
:
Thread
*
GetCompositorThread
(
)
const
{
return
mCompositorThread
;
}
private
:
~
CompositorThreadHolder
(
)
;
base
:
:
Thread
*
const
mCompositorThread
;
static
base
:
:
Thread
*
CreateCompositorThread
(
)
;
static
void
DestroyCompositorThread
(
base
:
:
Thread
*
aCompositorThread
)
;
friend
class
CompositorBridgeParent
;
}
;
class
CompositorVsyncScheduler
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CompositorVsyncScheduler
)
public
:
explicit
CompositorVsyncScheduler
(
CompositorBridgeParent
*
aCompositorBridgeParent
nsIWidget
*
aWidget
)
;
#
ifdef
MOZ_WIDGET_GONK
#
if
ANDROID_VERSION
>
=
19
void
SetDisplay
(
bool
aDisplayEnable
)
;
#
endif
#
endif
bool
NotifyVsync
(
TimeStamp
aVsyncTimestamp
)
;
void
SetNeedsComposite
(
)
;
void
OnForceComposeToTarget
(
)
;
void
ScheduleTask
(
CancelableTask
*
int
)
;
void
ResumeComposition
(
)
;
void
ComposeToTarget
(
gfx
:
:
DrawTarget
*
aTarget
const
gfx
:
:
IntRect
*
aRect
=
nullptr
)
;
void
PostCompositeTask
(
TimeStamp
aCompositeTimestamp
)
;
void
Destroy
(
)
;
void
ScheduleComposition
(
)
;
void
CancelCurrentCompositeTask
(
)
;
bool
NeedsComposite
(
)
;
void
Composite
(
TimeStamp
aVsyncTimestamp
)
;
void
ForceComposeToTarget
(
gfx
:
:
DrawTarget
*
aTarget
const
gfx
:
:
IntRect
*
aRect
)
;
const
TimeStamp
&
GetLastComposeTime
(
)
{
return
mLastCompose
;
}
#
ifdef
COMPOSITOR_PERFORMANCE_WARNING
const
TimeStamp
&
GetExpectedComposeStartTime
(
)
{
return
mExpectedComposeStartTime
;
}
#
endif
private
:
virtual
~
CompositorVsyncScheduler
(
)
;
void
NotifyCompositeTaskExecuted
(
)
;
void
ObserveVsync
(
)
;
void
UnobserveVsync
(
)
;
void
DispatchTouchEvents
(
TimeStamp
aVsyncTimestamp
)
;
void
DispatchVREvents
(
TimeStamp
aVsyncTimestamp
)
;
void
CancelCurrentSetNeedsCompositeTask
(
)
;
#
ifdef
MOZ_WIDGET_GONK
#
if
ANDROID_VERSION
>
=
19
void
CancelSetDisplayTask
(
)
;
#
endif
#
endif
class
Observer
final
:
public
VsyncObserver
{
public
:
explicit
Observer
(
CompositorVsyncScheduler
*
aOwner
)
;
virtual
bool
NotifyVsync
(
TimeStamp
aVsyncTimestamp
)
override
;
void
Destroy
(
)
;
private
:
virtual
~
Observer
(
)
;
Mutex
mMutex
;
CompositorVsyncScheduler
*
mOwner
;
}
;
CompositorBridgeParent
*
mCompositorBridgeParent
;
TimeStamp
mLastCompose
;
#
ifdef
COMPOSITOR_PERFORMANCE_WARNING
TimeStamp
mExpectedComposeStartTime
;
#
endif
bool
mAsapScheduling
;
bool
mIsObservingVsync
;
uint32_t
mNeedsComposite
;
int32_t
mVsyncNotificationsSkipped
;
RefPtr
<
CompositorVsyncDispatcher
>
mCompositorVsyncDispatcher
;
RefPtr
<
CompositorVsyncScheduler
:
:
Observer
>
mVsyncObserver
;
mozilla
:
:
Monitor
mCurrentCompositeTaskMonitor
;
CancelableTask
*
mCurrentCompositeTask
;
mozilla
:
:
Monitor
mSetNeedsCompositeMonitor
;
CancelableTask
*
mSetNeedsCompositeTask
;
#
ifdef
MOZ_WIDGET_GONK
#
if
ANDROID_VERSION
>
=
19
bool
mDisplayEnabled
;
mozilla
:
:
Monitor
mSetDisplayMonitor
;
CancelableTask
*
mSetDisplayTask
;
#
endif
#
endif
}
;
class
CompositorUpdateObserver
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CompositorUpdateObserver
)
;
virtual
void
ObserveUpdate
(
uint64_t
aLayersId
bool
aActive
)
=
0
;
protected
:
virtual
~
CompositorUpdateObserver
(
)
{
}
}
;
class
CompositorBridgeParent
final
:
public
PCompositorBridgeParent
public
ShadowLayersManager
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING_WITH_MAIN_THREAD_DESTRUCTION
(
CompositorBridgeParent
)
friend
class
CompositorVsyncScheduler
;
public
:
explicit
CompositorBridgeParent
(
nsIWidget
*
aWidget
bool
aUseExternalSurfaceSize
=
false
int
aSurfaceWidth
=
-
1
int
aSurfaceHeight
=
-
1
)
;
virtual
bool
RecvGetFrameUniformity
(
FrameUniformityData
*
aOutData
)
override
;
virtual
bool
RecvRequestOverfill
(
)
override
;
virtual
bool
RecvWillClose
(
)
override
;
virtual
bool
RecvPause
(
)
override
;
virtual
bool
RecvResume
(
)
override
;
virtual
bool
RecvNotifyHidden
(
const
uint64_t
&
id
)
override
{
return
true
;
}
virtual
bool
RecvNotifyVisible
(
const
uint64_t
&
id
)
override
{
return
true
;
}
virtual
bool
RecvNotifyChildCreated
(
const
uint64_t
&
child
)
override
;
virtual
bool
RecvAdoptChild
(
const
uint64_t
&
child
)
override
;
virtual
bool
RecvMakeSnapshot
(
const
SurfaceDescriptor
&
aInSnapshot
const
gfx
:
:
IntRect
&
aRect
)
override
;
virtual
bool
RecvFlushRendering
(
)
override
;
virtual
bool
RecvForcePresent
(
)
override
;
virtual
bool
RecvAcknowledgeCompositorUpdate
(
const
uint64_t
&
aLayersId
)
override
{
MOZ_ASSERT_UNREACHABLE
(
"
This
message
is
only
sent
cross
-
process
"
)
;
return
true
;
}
virtual
bool
RecvGetTileSize
(
int32_t
*
aWidth
int32_t
*
aHeight
)
override
;
virtual
bool
RecvNotifyRegionInvalidated
(
const
nsIntRegion
&
aRegion
)
override
;
virtual
bool
RecvStartFrameTimeRecording
(
const
int32_t
&
aBufferSize
uint32_t
*
aOutStartIndex
)
override
;
virtual
bool
RecvStopFrameTimeRecording
(
const
uint32_t
&
aStartIndex
InfallibleTArray
<
float
>
*
intervals
)
override
;
virtual
bool
RecvRequestNotifyAfterRemotePaint
(
)
override
{
return
true
;
}
;
virtual
bool
RecvClearVisibleRegions
(
const
uint64_t
&
aLayersId
const
uint32_t
&
aPresShellId
)
override
;
void
ClearVisibleRegions
(
const
uint64_t
&
aLayersId
const
Maybe
<
uint32_t
>
&
aPresShellId
)
;
virtual
bool
RecvUpdateVisibleRegion
(
const
VisibilityCounter
&
aCounter
const
ScrollableLayerGuid
&
aGuid
const
CSSIntRegion
&
aRegion
)
override
;
void
UpdateVisibleRegion
(
const
VisibilityCounter
&
aCounter
const
ScrollableLayerGuid
&
aGuid
const
CSSIntRegion
&
aRegion
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
why
)
override
;
virtual
void
ShadowLayersUpdated
(
LayerTransactionParent
*
aLayerTree
const
uint64_t
&
aTransactionId
const
TargetConfig
&
aTargetConfig
const
InfallibleTArray
<
PluginWindowData
>
&
aPlugins
bool
aIsFirstPaint
bool
aScheduleComposite
uint32_t
aPaintSequenceNumber
bool
aIsRepeatTransaction
int32_t
aPaintSyncId
)
override
;
virtual
void
ForceComposite
(
LayerTransactionParent
*
aLayerTree
)
override
;
virtual
bool
SetTestSampleTime
(
LayerTransactionParent
*
aLayerTree
const
TimeStamp
&
aTime
)
override
;
virtual
void
LeaveTestMode
(
LayerTransactionParent
*
aLayerTree
)
override
;
virtual
void
ApplyAsyncProperties
(
LayerTransactionParent
*
aLayerTree
)
override
;
virtual
void
FlushApzRepaints
(
const
LayerTransactionParent
*
aLayerTree
)
override
;
virtual
void
GetAPZTestData
(
const
LayerTransactionParent
*
aLayerTree
APZTestData
*
aOutData
)
override
;
virtual
void
SetConfirmedTargetAPZC
(
const
LayerTransactionParent
*
aLayerTree
const
uint64_t
&
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
)
override
;
virtual
AsyncCompositionManager
*
GetCompositionManager
(
LayerTransactionParent
*
aLayerTree
)
override
{
return
mCompositionManager
;
}
bool
ResetCompositor
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
TextureFactoryIdentifier
*
aOutIdentifier
)
;
void
ForceIsFirstPaint
(
)
;
static
void
SetShadowProperties
(
Layer
*
aLayer
)
;
void
NotifyChildCreated
(
uint64_t
aChild
)
;
void
AsyncRender
(
)
;
void
ScheduleRenderOnCompositorThread
(
)
;
void
SchedulePauseOnCompositorThread
(
)
;
void
InvalidateOnCompositorThread
(
)
;
bool
ScheduleResumeOnCompositorThread
(
)
;
bool
ScheduleResumeOnCompositorThread
(
int
width
int
height
)
;
virtual
void
ScheduleComposition
(
)
;
void
NotifyShadowTreeTransaction
(
uint64_t
aId
bool
aIsFirstPaint
bool
aScheduleComposite
uint32_t
aPaintSequenceNumber
bool
aIsRepeatTransaction
)
;
void
ScheduleRotationOnCompositorThread
(
const
TargetConfig
&
aTargetConfig
bool
aIsFirstPaint
)
;
uint64_t
RootLayerTreeId
(
)
;
void
InvalidateRemoteLayers
(
)
;
static
CompositorBridgeParent
*
GetCompositor
(
uint64_t
id
)
;
static
MessageLoop
*
CompositorLoop
(
)
;
static
void
StartUp
(
)
;
static
void
ShutDown
(
)
;
static
uint64_t
AllocateLayerTreeId
(
)
;
static
void
DeallocateLayerTreeId
(
uint64_t
aId
)
;
static
void
SetControllerForLayerTree
(
uint64_t
aLayersId
GeckoContentController
*
aController
)
;
static
APZCTreeManager
*
GetAPZCTreeManager
(
uint64_t
aLayersId
)
;
static
PCompositorBridgeParent
*
Create
(
Transport
*
aTransport
ProcessId
aOtherProcess
)
;
struct
LayerTreeState
{
LayerTreeState
(
)
;
~
LayerTreeState
(
)
;
RefPtr
<
Layer
>
mRoot
;
RefPtr
<
GeckoContentController
>
mController
;
CompositorBridgeParent
*
mParent
;
LayerManagerComposite
*
mLayerManager
;
CrossProcessCompositorBridgeParent
*
mCrossProcessParent
;
TargetConfig
mTargetConfig
;
APZTestData
mApzTestData
;
LayerTransactionParent
*
mLayerTree
;
nsTArray
<
PluginWindowData
>
mPluginData
;
bool
mUpdatedPluginDataAvailable
;
RefPtr
<
CompositorUpdateObserver
>
mLayerTreeReadyObserver
;
RefPtr
<
CompositorUpdateObserver
>
mLayerTreeClearedObserver
;
uint32_t
mPendingCompositorUpdates
;
PCompositorBridgeParent
*
CrossProcessPCompositorBridge
(
)
const
;
}
;
static
LayerTreeState
*
GetIndirectShadowTree
(
uint64_t
aId
)
;
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
bool
UpdatePluginWindowState
(
uint64_t
aId
)
;
void
ScheduleShowAllPluginWindows
(
)
;
void
ScheduleHideAllPluginWindows
(
)
;
void
ShowAllPluginWindows
(
)
;
void
HideAllPluginWindows
(
)
;
#
endif
virtual
bool
RecvRemotePluginsReady
(
)
override
;
static
void
PostInsertVsyncProfilerMarker
(
mozilla
:
:
TimeStamp
aVsyncTimestamp
)
;
static
void
RequestNotifyLayerTreeReady
(
uint64_t
aLayersId
CompositorUpdateObserver
*
aObserver
)
;
static
void
RequestNotifyLayerTreeCleared
(
uint64_t
aLayersId
CompositorUpdateObserver
*
aObserver
)
;
static
void
SwapLayerTreeObservers
(
uint64_t
aLayer
uint64_t
aOtherLayer
)
;
float
ComputeRenderIntegrity
(
)
;
static
bool
IsInCompositorThread
(
)
;
nsIWidget
*
GetWidget
(
)
{
return
mWidget
;
}
void
ForceComposeToTarget
(
gfx
:
:
DrawTarget
*
aTarget
const
gfx
:
:
IntRect
*
aRect
=
nullptr
)
;
static
bool
UpdateRemoteContentController
(
uint64_t
aLayersId
dom
:
:
ContentParent
*
aContentParent
const
dom
:
:
TabId
&
aTabId
dom
:
:
TabParent
*
aBrowserParent
)
;
protected
:
virtual
~
CompositorBridgeParent
(
)
;
void
DeferredDestroy
(
)
;
virtual
PLayerTransactionParent
*
AllocPLayerTransactionParent
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
const
uint64_t
&
aId
TextureFactoryIdentifier
*
aTextureFactoryIdentifier
bool
*
aSuccess
)
override
;
virtual
bool
DeallocPLayerTransactionParent
(
PLayerTransactionParent
*
aLayers
)
override
;
virtual
void
ScheduleTask
(
CancelableTask
*
int
)
;
void
CompositeToTarget
(
gfx
:
:
DrawTarget
*
aTarget
const
gfx
:
:
IntRect
*
aRect
=
nullptr
)
;
void
SetEGLSurfaceSize
(
int
width
int
height
)
;
void
InitializeLayerManager
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
)
;
void
PauseComposition
(
)
;
void
ResumeComposition
(
)
;
void
ResumeCompositionAndResize
(
int
width
int
height
)
;
void
ForceComposition
(
)
;
void
CancelCurrentCompositeTask
(
)
;
void
Invalidate
(
)
;
RefPtr
<
Compositor
>
NewCompositor
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
)
;
void
ResetCompositorTask
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
Maybe
<
TextureFactoryIdentifier
>
*
aOutNewIdentifier
)
;
Maybe
<
TextureFactoryIdentifier
>
ResetCompositorImpl
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
)
;
static
void
AddCompositor
(
CompositorBridgeParent
*
compositor
uint64_t
*
id
)
;
static
CompositorBridgeParent
*
RemoveCompositor
(
uint64_t
id
)
;
bool
CanComposite
(
)
;
void
DidComposite
(
TimeStamp
&
aCompositeStart
TimeStamp
&
aCompositeEnd
)
;
template
<
typename
Lambda
>
inline
void
ForEachIndirectLayerTree
(
const
Lambda
&
aCallback
)
;
RefPtr
<
LayerManagerComposite
>
mLayerManager
;
RefPtr
<
Compositor
>
mCompositor
;
RefPtr
<
AsyncCompositionManager
>
mCompositionManager
;
nsIWidget
*
mWidget
;
TimeStamp
mTestTime
;
bool
mIsTesting
;
uint64_t
mPendingTransaction
;
bool
mPaused
;
bool
mUseExternalSurfaceSize
;
gfx
:
:
IntSize
mEGLSurfaceSize
;
mozilla
:
:
Monitor
mPauseCompositionMonitor
;
mozilla
:
:
Monitor
mResumeCompositionMonitor
;
mozilla
:
:
Monitor
mResetCompositorMonitor
;
uint64_t
mCompositorID
;
const
uint64_t
mRootLayerTreeID
;
bool
mOverrideComposeReadiness
;
CancelableTask
*
mForceCompositionTask
;
RefPtr
<
APZCTreeManager
>
mApzcTreeManager
;
RefPtr
<
CompositorThreadHolder
>
mCompositorThreadHolder
;
RefPtr
<
CompositorVsyncScheduler
>
mCompositorScheduler
;
RefPtr
<
CompositorBridgeParent
>
mSelfRef
;
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
uint64_t
mLastPluginUpdateLayerTreeId
;
nsIntPoint
mPluginsLayerOffset
;
nsIntRegion
mPluginsLayerVisibleRegion
;
nsTArray
<
PluginWindowData
>
mCachedPluginData
;
bool
mDeferPluginWindows
;
bool
mPluginWindowsHidden
;
#
endif
DISALLOW_EVIL_CONSTRUCTORS
(
CompositorBridgeParent
)
;
}
;
}
}
#
endif
