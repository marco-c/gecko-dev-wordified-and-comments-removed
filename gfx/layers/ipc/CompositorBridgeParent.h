#
ifndef
mozilla_layers_CompositorBridgeParent_h
#
define
mozilla_layers_CompositorBridgeParent_h
#
include
<
stdint
.
h
>
#
include
"
Layers
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
ipc
/
SharedMemory
.
h
"
#
include
"
mozilla
/
layers
/
CompositorController
.
h
"
#
include
"
mozilla
/
layers
/
CompositorVsyncSchedulerOwner
.
h
"
#
include
"
mozilla
/
layers
/
GeckoContentController
.
h
"
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
layers
/
MetricsSharingController
.
h
"
#
include
"
mozilla
/
layers
/
PCompositorBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
APZTestData
.
h
"
#
include
"
mozilla
/
widget
/
CompositorWidget
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
ThreadSafeRefcountingWithMainThreadDestruction
.
h
"
class
MessageLoop
;
class
nsIWidget
;
namespace
mozilla
{
class
CancelableRunnable
;
namespace
gfx
{
class
DrawTarget
;
class
GPUProcessManager
;
class
GPUParent
;
}
namespace
ipc
{
class
Shmem
;
}
namespace
layers
{
class
APZCTreeManager
;
class
APZCTreeManagerParent
;
class
AsyncCompositionManager
;
class
Compositor
;
class
CompositorBridgeParent
;
class
CompositorVsyncScheduler
;
class
LayerManagerComposite
;
class
LayerTransactionParent
;
class
PAPZParent
;
class
CrossProcessCompositorBridgeParent
;
class
CompositorThreadHolder
;
class
InProcessCompositorSession
;
class
WebRenderBridgeParent
;
struct
ScopedLayerTreeRegistration
{
ScopedLayerTreeRegistration
(
APZCTreeManager
*
aApzctm
uint64_t
aLayersId
Layer
*
aRoot
GeckoContentController
*
aController
)
;
~
ScopedLayerTreeRegistration
(
)
;
private
:
uint64_t
mLayersId
;
}
;
class
CompositorBridgeParentBase
:
public
PCompositorBridgeParent
public
HostIPCAllocator
public
ShmemAllocator
public
MetricsSharingController
{
public
:
virtual
void
ShadowLayersUpdated
(
LayerTransactionParent
*
aLayerTree
const
uint64_t
&
aTransactionId
const
TargetConfig
&
aTargetConfig
const
InfallibleTArray
<
PluginWindowData
>
&
aPlugins
bool
aIsFirstPaint
bool
aScheduleComposite
uint32_t
aPaintSequenceNumber
bool
aIsRepeatTransaction
int32_t
aPaintSyncId
bool
aHitTestUpdate
)
=
0
;
virtual
AsyncCompositionManager
*
GetCompositionManager
(
LayerTransactionParent
*
aLayerTree
)
{
return
nullptr
;
}
virtual
void
NotifyClearCachedResources
(
LayerTransactionParent
*
aLayerTree
)
{
}
virtual
void
ForceComposite
(
LayerTransactionParent
*
aLayerTree
)
{
}
virtual
bool
SetTestSampleTime
(
LayerTransactionParent
*
aLayerTree
const
TimeStamp
&
aTime
)
{
return
true
;
}
virtual
void
LeaveTestMode
(
LayerTransactionParent
*
aLayerTree
)
{
}
virtual
void
ApplyAsyncProperties
(
LayerTransactionParent
*
aLayerTree
)
=
0
;
virtual
void
FlushApzRepaints
(
const
LayerTransactionParent
*
aLayerTree
)
=
0
;
virtual
void
GetAPZTestData
(
const
LayerTransactionParent
*
aLayerTree
APZTestData
*
aOutData
)
{
}
virtual
void
SetConfirmedTargetAPZC
(
const
LayerTransactionParent
*
aLayerTree
const
uint64_t
&
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
)
=
0
;
virtual
void
UpdatePaintTime
(
LayerTransactionParent
*
aLayerTree
const
TimeDuration
&
aPaintTime
)
{
}
virtual
ShmemAllocator
*
AsShmemAllocator
(
)
override
{
return
this
;
}
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvSyncWithCompositor
(
)
override
{
return
IPC_OK
(
)
;
}
virtual
base
:
:
ProcessId
GetChildProcessId
(
)
override
;
virtual
void
NotifyNotUsed
(
PTextureParent
*
aTexture
uint64_t
aTransactionId
)
override
;
virtual
void
SendAsyncMessage
(
const
InfallibleTArray
<
AsyncParentMessageData
>
&
aMessage
)
override
;
virtual
bool
AllocShmem
(
size_t
aSize
mozilla
:
:
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aType
mozilla
:
:
ipc
:
:
Shmem
*
aShmem
)
override
;
virtual
bool
AllocUnsafeShmem
(
size_t
aSize
mozilla
:
:
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aType
mozilla
:
:
ipc
:
:
Shmem
*
aShmem
)
override
;
virtual
void
DeallocShmem
(
mozilla
:
:
ipc
:
:
Shmem
&
aShmem
)
override
;
NS_IMETHOD_
(
MozExternalRefCountType
)
AddRef
(
)
override
{
return
HostIPCAllocator
:
:
AddRef
(
)
;
}
NS_IMETHOD_
(
MozExternalRefCountType
)
Release
(
)
override
{
return
HostIPCAllocator
:
:
Release
(
)
;
}
base
:
:
ProcessId
RemotePid
(
)
override
;
bool
StartSharingMetrics
(
mozilla
:
:
ipc
:
:
SharedMemoryBasic
:
:
Handle
aHandle
CrossProcessMutexHandle
aMutexHandle
uint64_t
aLayersId
uint32_t
aApzcId
)
override
;
bool
StopSharingMetrics
(
FrameMetrics
:
:
ViewID
aScrollId
uint32_t
aApzcId
)
override
;
}
;
class
CompositorBridgeParent
final
:
public
CompositorBridgeParentBase
public
CompositorController
public
CompositorVsyncSchedulerOwner
{
friend
class
CompositorThreadHolder
;
friend
class
InProcessCompositorSession
;
friend
class
gfx
:
:
GPUProcessManager
;
friend
class
gfx
:
:
GPUParent
;
public
:
NS_IMETHOD_
(
MozExternalRefCountType
)
AddRef
(
)
override
{
return
CompositorBridgeParentBase
:
:
AddRef
(
)
;
}
NS_IMETHOD_
(
MozExternalRefCountType
)
Release
(
)
override
{
return
CompositorBridgeParentBase
:
:
Release
(
)
;
}
explicit
CompositorBridgeParent
(
CSSToLayoutDeviceScale
aScale
const
TimeDuration
&
aVsyncRate
bool
aUseExternalSurfaceSize
const
gfx
:
:
IntSize
&
aSurfaceSize
)
;
void
InitSameProcess
(
widget
:
:
CompositorWidget
*
aWidget
const
uint64_t
&
aLayerTreeId
bool
aUseAPZ
)
;
bool
Bind
(
Endpoint
<
PCompositorBridgeParent
>
&
&
aEndpoint
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvInitialize
(
const
uint64_t
&
aRootLayerTreeId
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvReset
(
nsTArray
<
LayersBackend
>
&
&
aBackendHints
const
uint64_t
&
aSeqNo
bool
*
aResult
TextureFactoryIdentifier
*
aOutIdentifier
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvGetFrameUniformity
(
FrameUniformityData
*
aOutData
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestOverfill
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvWillClose
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvPause
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvResume
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyChildCreated
(
const
uint64_t
&
child
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyChildRecreated
(
const
uint64_t
&
child
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvAdoptChild
(
const
uint64_t
&
child
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvMakeSnapshot
(
const
SurfaceDescriptor
&
aInSnapshot
const
gfx
:
:
IntRect
&
aRect
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvFlushRendering
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvForcePresent
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvAcknowledgeCompositorUpdate
(
const
uint64_t
&
aLayersId
)
override
{
MOZ_ASSERT_UNREACHABLE
(
"
This
message
is
only
sent
cross
-
process
"
)
;
return
IPC_OK
(
)
;
}
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyRegionInvalidated
(
const
nsIntRegion
&
aRegion
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvStartFrameTimeRecording
(
const
int32_t
&
aBufferSize
uint32_t
*
aOutStartIndex
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvStopFrameTimeRecording
(
const
uint32_t
&
aStartIndex
InfallibleTArray
<
float
>
*
intervals
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestNotifyAfterRemotePaint
(
)
override
{
return
IPC_OK
(
)
;
}
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvClearApproximatelyVisibleRegions
(
const
uint64_t
&
aLayersId
const
uint32_t
&
aPresShellId
)
override
;
void
ClearApproximatelyVisibleRegions
(
const
uint64_t
&
aLayersId
const
Maybe
<
uint32_t
>
&
aPresShellId
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyApproximatelyVisibleRegion
(
const
ScrollableLayerGuid
&
aGuid
const
CSSIntRegion
&
aRegion
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvAllPluginsCaptured
(
)
override
;
virtual
void
ActorDestroy
(
ActorDestroyReason
why
)
override
;
virtual
void
ShadowLayersUpdated
(
LayerTransactionParent
*
aLayerTree
const
uint64_t
&
aTransactionId
const
TargetConfig
&
aTargetConfig
const
InfallibleTArray
<
PluginWindowData
>
&
aPlugins
bool
aIsFirstPaint
bool
aScheduleComposite
uint32_t
aPaintSequenceNumber
bool
aIsRepeatTransaction
int32_t
aPaintSyncId
bool
aHitTestUpdate
)
override
;
virtual
void
ForceComposite
(
LayerTransactionParent
*
aLayerTree
)
override
;
virtual
bool
SetTestSampleTime
(
LayerTransactionParent
*
aLayerTree
const
TimeStamp
&
aTime
)
override
;
virtual
void
LeaveTestMode
(
LayerTransactionParent
*
aLayerTree
)
override
;
virtual
void
ApplyAsyncProperties
(
LayerTransactionParent
*
aLayerTree
)
override
;
virtual
void
FlushApzRepaints
(
const
LayerTransactionParent
*
aLayerTree
)
override
;
virtual
void
GetAPZTestData
(
const
LayerTransactionParent
*
aLayerTree
APZTestData
*
aOutData
)
override
;
virtual
void
SetConfirmedTargetAPZC
(
const
LayerTransactionParent
*
aLayerTree
const
uint64_t
&
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
)
override
;
virtual
AsyncCompositionManager
*
GetCompositionManager
(
LayerTransactionParent
*
aLayerTree
)
override
{
return
mCompositionManager
;
}
virtual
PTextureParent
*
AllocPTextureParent
(
const
SurfaceDescriptor
&
aSharedData
const
LayersBackend
&
aLayersBackend
const
TextureFlags
&
aFlags
const
uint64_t
&
aId
const
uint64_t
&
aSerial
)
override
;
virtual
bool
DeallocPTextureParent
(
PTextureParent
*
actor
)
override
;
virtual
bool
IsSameProcess
(
)
const
override
;
PCompositorWidgetParent
*
AllocPCompositorWidgetParent
(
const
CompositorWidgetInitData
&
aInitData
)
override
;
bool
DeallocPCompositorWidgetParent
(
PCompositorWidgetParent
*
aActor
)
override
;
bool
ResetCompositor
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
uint64_t
aSeqNo
TextureFactoryIdentifier
*
aOutIdentifier
)
;
void
ForceIsFirstPaint
(
)
;
static
void
SetShadowProperties
(
Layer
*
aLayer
)
;
void
NotifyChildCreated
(
uint64_t
aChild
)
;
void
AsyncRender
(
)
;
void
ScheduleRenderOnCompositorThread
(
)
override
;
void
SchedulePauseOnCompositorThread
(
)
;
void
InvalidateOnCompositorThread
(
)
;
bool
ScheduleResumeOnCompositorThread
(
)
;
bool
ScheduleResumeOnCompositorThread
(
int
width
int
height
)
;
virtual
void
ScheduleComposition
(
)
;
void
NotifyShadowTreeTransaction
(
uint64_t
aId
bool
aIsFirstPaint
bool
aScheduleComposite
uint32_t
aPaintSequenceNumber
bool
aIsRepeatTransaction
bool
aHitTestUpdate
)
;
void
UpdatePaintTime
(
LayerTransactionParent
*
aLayerTree
const
TimeDuration
&
aPaintTime
)
override
;
void
ScheduleRotationOnCompositorThread
(
const
TargetConfig
&
aTargetConfig
bool
aIsFirstPaint
)
;
uint64_t
RootLayerTreeId
(
)
;
void
InvalidateRemoteLayers
(
)
;
static
CompositorBridgeParent
*
GetCompositorBridgeParent
(
uint64_t
id
)
;
static
void
NotifyVsync
(
const
TimeStamp
&
aTimeStamp
const
uint64_t
&
aLayersId
)
;
static
void
SetControllerForLayerTree
(
uint64_t
aLayersId
GeckoContentController
*
aController
)
;
static
bool
CreateForContent
(
Endpoint
<
PCompositorBridgeParent
>
&
&
aEndpoint
)
;
struct
LayerTreeState
{
LayerTreeState
(
)
;
~
LayerTreeState
(
)
;
RefPtr
<
Layer
>
mRoot
;
RefPtr
<
GeckoContentController
>
mController
;
APZCTreeManagerParent
*
mApzcTreeManagerParent
;
CompositorBridgeParent
*
mParent
;
LayerManagerComposite
*
mLayerManager
;
RefPtr
<
WebRenderBridgeParent
>
mWRBridge
;
CrossProcessCompositorBridgeParent
*
mCrossProcessParent
;
TargetConfig
mTargetConfig
;
APZTestData
mApzTestData
;
LayerTransactionParent
*
mLayerTree
;
nsTArray
<
PluginWindowData
>
mPluginData
;
bool
mUpdatedPluginDataAvailable
;
uint32_t
mPendingCompositorUpdates
;
CompositorController
*
GetCompositorController
(
)
const
;
MetricsSharingController
*
CrossProcessSharingController
(
)
const
;
MetricsSharingController
*
InProcessSharingController
(
)
const
;
}
;
static
LayerTreeState
*
GetIndirectShadowTree
(
uint64_t
aId
)
;
static
APZCTreeManagerParent
*
GetApzcTreeManagerParentForRoot
(
uint64_t
aContentLayersId
)
;
static
GeckoContentController
*
GetGeckoContentControllerForRoot
(
uint64_t
aContentLayersId
)
;
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
bool
UpdatePluginWindowState
(
uint64_t
aId
)
;
void
ScheduleShowAllPluginWindows
(
)
override
;
void
ScheduleHideAllPluginWindows
(
)
override
;
void
ShowAllPluginWindows
(
)
;
void
HideAllPluginWindows
(
)
;
#
else
void
ScheduleShowAllPluginWindows
(
)
override
{
}
void
ScheduleHideAllPluginWindows
(
)
override
{
}
#
endif
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvRemotePluginsReady
(
)
override
;
static
void
PostInsertVsyncProfilerMarker
(
mozilla
:
:
TimeStamp
aVsyncTimestamp
)
;
widget
:
:
CompositorWidget
*
GetWidget
(
)
{
return
mWidget
;
}
void
ForceComposeToTarget
(
gfx
:
:
DrawTarget
*
aTarget
const
gfx
:
:
IntRect
*
aRect
=
nullptr
)
;
PAPZCTreeManagerParent
*
AllocPAPZCTreeManagerParent
(
const
uint64_t
&
aLayersId
)
override
;
bool
DeallocPAPZCTreeManagerParent
(
PAPZCTreeManagerParent
*
aActor
)
override
;
PAPZParent
*
AllocPAPZParent
(
const
uint64_t
&
aLayersId
)
override
;
bool
DeallocPAPZParent
(
PAPZParent
*
aActor
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAsyncPanZoomEnabled
(
const
uint64_t
&
aLayersId
bool
*
aHasAPZ
)
override
;
RefPtr
<
APZCTreeManager
>
GetAPZCTreeManager
(
)
;
bool
AsyncPanZoomEnabled
(
)
const
{
return
!
!
mApzcTreeManager
;
}
PWebRenderBridgeParent
*
AllocPWebRenderBridgeParent
(
const
uint64_t
&
aPipelineId
TextureFactoryIdentifier
*
aTextureFactoryIdentifier
)
override
;
bool
DeallocPWebRenderBridgeParent
(
PWebRenderBridgeParent
*
aActor
)
override
;
private
:
void
Initialize
(
)
;
void
StopAndClearResources
(
)
;
static
already_AddRefed
<
APZCTreeManager
>
GetAPZCTreeManager
(
uint64_t
aLayersId
)
;
static
void
DeallocateLayerTreeId
(
uint64_t
aId
)
;
protected
:
virtual
~
CompositorBridgeParent
(
)
;
void
DeferredDestroy
(
)
;
virtual
PLayerTransactionParent
*
AllocPLayerTransactionParent
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
const
uint64_t
&
aId
TextureFactoryIdentifier
*
aTextureFactoryIdentifier
bool
*
aSuccess
)
override
;
virtual
bool
DeallocPLayerTransactionParent
(
PLayerTransactionParent
*
aLayers
)
override
;
virtual
void
ScheduleTask
(
already_AddRefed
<
CancelableRunnable
>
int
)
;
void
SetEGLSurfaceSize
(
int
width
int
height
)
;
void
InitializeLayerManager
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
)
;
void
PauseComposition
(
)
;
void
ResumeComposition
(
)
;
void
ResumeCompositionAndResize
(
int
width
int
height
)
;
void
ForceComposition
(
)
;
void
CancelCurrentCompositeTask
(
)
;
void
Invalidate
(
)
;
bool
IsPendingComposite
(
)
override
;
void
FinishPendingComposite
(
)
override
;
void
CompositeToTarget
(
gfx
:
:
DrawTarget
*
aTarget
const
gfx
:
:
IntRect
*
aRect
=
nullptr
)
override
;
RefPtr
<
Compositor
>
NewCompositor
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
)
;
void
ResetCompositorTask
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
uint64_t
aSeqNo
Maybe
<
TextureFactoryIdentifier
>
*
aOutNewIdentifier
)
;
Maybe
<
TextureFactoryIdentifier
>
ResetCompositorImpl
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
)
;
static
void
AddCompositor
(
CompositorBridgeParent
*
compositor
uint64_t
*
id
)
;
static
CompositorBridgeParent
*
RemoveCompositor
(
uint64_t
id
)
;
static
void
Setup
(
)
;
static
void
Shutdown
(
)
;
static
void
FinishShutdown
(
)
;
bool
CanComposite
(
)
;
void
DidComposite
(
TimeStamp
&
aCompositeStart
TimeStamp
&
aCompositeEnd
)
;
template
<
typename
Lambda
>
inline
void
ForEachIndirectLayerTree
(
const
Lambda
&
aCallback
)
;
RefPtr
<
LayerManagerComposite
>
mLayerManager
;
RefPtr
<
Compositor
>
mCompositor
;
RefPtr
<
AsyncCompositionManager
>
mCompositionManager
;
RefPtr
<
WebRenderBridgeParent
>
mWRBridge
;
widget
:
:
CompositorWidget
*
mWidget
;
TimeStamp
mTestTime
;
CSSToLayoutDeviceScale
mScale
;
TimeDuration
mVsyncRate
;
bool
mIsTesting
;
uint64_t
mPendingTransaction
;
bool
mPaused
;
bool
mUseExternalSurfaceSize
;
gfx
:
:
IntSize
mEGLSurfaceSize
;
mozilla
:
:
Monitor
mPauseCompositionMonitor
;
mozilla
:
:
Monitor
mResumeCompositionMonitor
;
mozilla
:
:
Monitor
mResetCompositorMonitor
;
uint64_t
mCompositorID
;
uint64_t
mRootLayerTreeID
;
bool
mOverrideComposeReadiness
;
RefPtr
<
CancelableRunnable
>
mForceCompositionTask
;
RefPtr
<
APZCTreeManager
>
mApzcTreeManager
;
RefPtr
<
CompositorThreadHolder
>
mCompositorThreadHolder
;
RefPtr
<
CompositorVsyncScheduler
>
mCompositorScheduler
;
RefPtr
<
CompositorBridgeParent
>
mSelfRef
;
TimeDuration
mPaintTime
;
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
uint64_t
mLastPluginUpdateLayerTreeId
;
nsIntPoint
mPluginsLayerOffset
;
nsIntRegion
mPluginsLayerVisibleRegion
;
nsTArray
<
PluginWindowData
>
mCachedPluginData
;
TimeStamp
mWaitForPluginsUntil
;
bool
mHaveBlockedForPlugins
=
false
;
bool
mDeferPluginWindows
;
bool
mPluginWindowsHidden
;
#
endif
DISALLOW_EVIL_CONSTRUCTORS
(
CompositorBridgeParent
)
;
}
;
}
}
#
endif
