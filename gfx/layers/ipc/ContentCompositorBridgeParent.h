#
ifndef
mozilla_layers_ContentCompositorBridgeParent_h
#
define
mozilla_layers_ContentCompositorBridgeParent_h
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
:
:
layers
{
class
CompositorOptions
;
class
ContentCompositorBridgeParent
final
:
public
CompositorBridgeParentBase
{
friend
class
CompositorBridgeParent
;
public
:
explicit
ContentCompositorBridgeParent
(
CompositorManagerParent
*
aManager
)
:
CompositorBridgeParentBase
(
aManager
)
mDestroyCalled
(
false
)
{
}
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitialize
(
const
LayersId
&
aRootLayerTreeId
)
override
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvWillClose
(
)
override
{
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvPause
(
)
override
{
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestFxrOutput
(
)
override
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvResume
(
)
override
{
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvResumeAsync
(
)
override
{
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyChildCreated
(
const
LayersId
&
child
CompositorOptions
*
aOptions
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvMapAndNotifyChildCreated
(
const
LayersId
&
child
const
base
:
:
ProcessId
&
pid
CompositorOptions
*
aOptions
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyChildRecreated
(
const
LayersId
&
child
CompositorOptions
*
aOptions
)
override
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvAdoptChild
(
const
LayersId
&
child
)
override
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvFlushRendering
(
const
wr
:
:
RenderReasons
&
)
override
{
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvFlushRenderingAsync
(
const
wr
:
:
RenderReasons
&
)
override
{
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvForcePresent
(
const
wr
:
:
RenderReasons
&
)
override
{
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvWaitOnTransactionProcessed
(
)
override
{
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvStartFrameTimeRecording
(
const
int32_t
&
aBufferSize
uint32_t
*
aOutStartIndex
)
override
{
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvStopFrameTimeRecording
(
const
uint32_t
&
aStartIndex
nsTArray
<
float
>
*
intervals
)
override
{
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyMemoryPressure
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCheckContentOnlyTDR
(
const
uint32_t
&
sequenceNum
bool
*
isContentOnlyTDR
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDynamicToolbarOffsetChanged
(
const
int32_t
&
aOffset
)
override
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvBeginRecording
(
const
TimeStamp
&
aRecordingStart
BeginRecordingResolver
&
&
aResolve
)
override
{
aResolve
(
false
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvEndRecording
(
EndRecordingResolver
&
&
aResolve
)
override
{
aResolve
(
Nothing
(
)
)
;
return
IPC_OK
(
)
;
}
bool
SetTestSampleTime
(
const
LayersId
&
aId
const
TimeStamp
&
aTime
)
override
;
void
LeaveTestMode
(
const
LayersId
&
aId
)
override
;
void
SetTestAsyncScrollOffset
(
const
LayersId
&
aLayersId
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
const
CSSPoint
&
aPoint
)
override
;
void
SetTestAsyncZoom
(
const
LayersId
&
aLayersId
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
const
LayerToParentLayerScale
&
aZoom
)
override
;
void
FlushApzRepaints
(
const
LayersId
&
aLayersId
)
override
;
void
GetAPZTestData
(
const
LayersId
&
aLayersId
APZTestData
*
aOutData
)
override
;
void
GetFrameUniformity
(
const
LayersId
&
aLayersId
FrameUniformityData
*
aOutData
)
override
;
void
SetConfirmedTargetAPZC
(
const
LayersId
&
aLayersId
const
uint64_t
&
aInputBlockId
nsTArray
<
ScrollableLayerGuid
>
&
&
aTargets
)
override
;
void
EndWheelTransaction
(
const
LayersId
&
aLayersId
PWebRenderBridgeParent
:
:
EndWheelTransactionResolver
&
&
aResolve
)
override
;
void
DidCompositeLocked
(
LayersId
aId
const
VsyncId
&
aVsyncId
TimeStamp
&
aCompositeStart
TimeStamp
&
aCompositeEnd
)
;
PTextureParent
*
AllocPTextureParent
(
const
SurfaceDescriptor
&
aSharedData
ReadLockDescriptor
&
aReadLock
const
LayersBackend
&
aLayersBackend
const
TextureFlags
&
aFlags
const
LayersId
&
aId
const
uint64_t
&
aSerial
const
wr
:
:
MaybeExternalImageId
&
aExternalImageId
)
override
;
bool
DeallocPTextureParent
(
PTextureParent
*
actor
)
override
;
bool
IsSameProcess
(
)
const
override
;
already_AddRefed
<
PCompositorWidgetParent
>
AllocPCompositorWidgetParent
(
const
CompositorWidgetInitData
&
aInitData
)
override
{
return
nullptr
;
}
PAPZCTreeManagerParent
*
AllocPAPZCTreeManagerParent
(
const
LayersId
&
aLayersId
)
override
;
bool
DeallocPAPZCTreeManagerParent
(
PAPZCTreeManagerParent
*
aActor
)
override
;
PAPZParent
*
AllocPAPZParent
(
const
LayersId
&
aLayersId
)
override
;
bool
DeallocPAPZParent
(
PAPZParent
*
aActor
)
override
;
PWebRenderBridgeParent
*
AllocPWebRenderBridgeParent
(
const
wr
:
:
PipelineId
&
aPipelineId
const
LayoutDeviceIntSize
&
aSize
const
WindowKind
&
aWindowKind
)
override
;
bool
DeallocPWebRenderBridgeParent
(
PWebRenderBridgeParent
*
aActor
)
override
;
void
ObserveLayersUpdate
(
LayersId
aLayersId
bool
aActive
)
override
;
bool
IsRemote
(
)
const
override
{
return
true
;
}
private
:
virtual
~
ContentCompositorBridgeParent
(
)
;
void
DeferredDestroy
(
)
;
RefPtr
<
ContentCompositorBridgeParent
>
mSelfRef
;
bool
mDestroyCalled
;
}
;
}
#
endif
