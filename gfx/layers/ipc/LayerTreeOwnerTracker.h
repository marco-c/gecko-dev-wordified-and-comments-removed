#
ifndef
mozilla_layers_LayerTreeOwnerTracker_h
#
define
mozilla_layers_LayerTreeOwnerTracker_h
#
include
"
base
/
process
.
h
"
#
include
"
LayersTypes
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
<
functional
>
#
include
<
map
>
namespace
mozilla
{
namespace
dom
{
class
ContentParent
;
}
namespace
layers
{
class
LayerTreeOwnerTracker
final
{
public
:
static
void
Initialize
(
)
;
static
void
Shutdown
(
)
;
static
LayerTreeOwnerTracker
*
Get
(
)
;
void
Map
(
LayersId
aLayersId
base
:
:
ProcessId
aProcessId
)
;
void
Unmap
(
LayersId
aLayersId
base
:
:
ProcessId
aProcessId
)
;
bool
IsMapped
(
LayersId
aLayersId
base
:
:
ProcessId
aProcessId
)
;
void
Iterate
(
const
std
:
:
function
<
void
(
LayersId
aLayersId
base
:
:
ProcessId
aProcessId
)
>
&
aCallback
)
;
private
:
LayerTreeOwnerTracker
(
)
;
mozilla
:
:
Mutex
mLayerIdsLock
;
std
:
:
map
<
LayersId
base
:
:
ProcessId
>
mLayerIds
;
}
;
}
}
#
endif
