#
include
"
mozilla
/
layers
/
RemoteContentController
.
h
"
#
include
"
CompositorThread
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
layers
/
APZCCallbackHelper
.
h
"
#
include
"
mozilla
/
layers
/
APZCTreeManagerParent
.
h
"
#
include
"
mozilla
/
layers
/
APZThreadUtils
.
h
"
#
include
"
mozilla
/
layers
/
MatrixMessage
.
h
"
#
include
"
mozilla
/
gfx
/
GPUProcessManager
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
Units
.
h
"
#
ifdef
MOZ_WIDGET_ANDROID
#
include
"
mozilla
/
jni
/
Utils
.
h
"
#
endif
static
mozilla
:
:
LazyLogModule
sApzRemoteLog
(
"
apz
.
cc
.
remote
"
)
;
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
gfx
;
RemoteContentController
:
:
RemoteContentController
(
)
:
mCompositorThread
(
NS_GetCurrentThread
(
)
)
mCanSend
(
true
)
{
MOZ_ASSERT
(
CompositorThread
(
)
-
>
IsOnCurrentThread
(
)
)
;
}
RemoteContentController
:
:
~
RemoteContentController
(
)
=
default
;
void
RemoteContentController
:
:
NotifyLayerTransforms
(
const
nsTArray
<
MatrixMessage
>
&
aTransforms
)
{
if
(
!
mCompositorThread
-
>
IsOnCurrentThread
(
)
)
{
mCompositorThread
-
>
Dispatch
(
NewRunnableMethod
<
CopyableTArray
<
MatrixMessage
>
>
(
"
layers
:
:
RemoteContentController
:
:
NotifyLayerTransforms
"
this
&
RemoteContentController
:
:
NotifyLayerTransforms
aTransforms
)
)
;
return
;
}
if
(
mCanSend
)
{
Unused
<
<
SendLayerTransforms
(
aTransforms
)
;
}
}
void
RemoteContentController
:
:
RequestContentRepaint
(
const
RepaintRequest
&
aRequest
)
{
MOZ_ASSERT
(
IsRepaintThread
(
)
)
;
if
(
mCanSend
)
{
Unused
<
<
SendRequestContentRepaint
(
aRequest
)
;
}
}
void
RemoteContentController
:
:
HandleTapOnMainThread
(
TapType
aTapType
LayoutDevicePoint
aPoint
Modifiers
aModifiers
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
{
MOZ_LOG
(
sApzRemoteLog
LogLevel
:
:
Debug
(
"
HandleTapOnMainThread
(
%
d
)
"
(
int
)
aTapType
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
dom
:
:
BrowserParent
*
tab
=
dom
:
:
BrowserParent
:
:
GetBrowserParentFromLayersId
(
aGuid
.
mLayersId
)
;
if
(
tab
)
{
tab
-
>
SendHandleTap
(
aTapType
aPoint
aModifiers
aGuid
aInputBlockId
)
;
}
}
void
RemoteContentController
:
:
HandleTapOnCompositorThread
(
TapType
aTapType
LayoutDevicePoint
aPoint
Modifiers
aModifiers
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
{
MOZ_ASSERT
(
XRE_IsGPUProcess
(
)
)
;
MOZ_ASSERT
(
mCompositorThread
-
>
IsOnCurrentThread
(
)
)
;
APZCTreeManagerParent
*
apzctmp
=
CompositorBridgeParent
:
:
GetApzcTreeManagerParentForRoot
(
aGuid
.
mLayersId
)
;
if
(
apzctmp
)
{
Unused
<
<
apzctmp
-
>
SendHandleTap
(
aTapType
aPoint
aModifiers
aGuid
aInputBlockId
)
;
}
}
void
RemoteContentController
:
:
HandleTap
(
TapType
aTapType
const
LayoutDevicePoint
&
aPoint
Modifiers
aModifiers
const
ScrollableLayerGuid
&
aGuid
uint64_t
aInputBlockId
)
{
MOZ_LOG
(
sApzRemoteLog
LogLevel
:
:
Debug
(
"
HandleTap
(
%
d
)
"
(
int
)
aTapType
)
)
;
APZThreadUtils
:
:
AssertOnControllerThread
(
)
;
if
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_GPU
)
{
if
(
mCompositorThread
-
>
IsOnCurrentThread
(
)
)
{
HandleTapOnCompositorThread
(
aTapType
aPoint
aModifiers
aGuid
aInputBlockId
)
;
}
else
{
mCompositorThread
-
>
Dispatch
(
NewRunnableMethod
<
TapType
LayoutDevicePoint
Modifiers
ScrollableLayerGuid
uint64_t
>
(
"
layers
:
:
RemoteContentController
:
:
HandleTapOnCompositorThread
"
this
&
RemoteContentController
:
:
HandleTapOnCompositorThread
aTapType
aPoint
aModifiers
aGuid
aInputBlockId
)
)
;
}
return
;
}
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
NS_IsMainThread
(
)
)
{
HandleTapOnMainThread
(
aTapType
aPoint
aModifiers
aGuid
aInputBlockId
)
;
}
else
{
#
ifndef
MOZ_WIDGET_ANDROID
MOZ_ASSERT
(
false
)
;
#
else
mozilla
:
:
jni
:
:
DispatchToGeckoPriorityQueue
(
NewRunnableMethod
<
TapType
LayoutDevicePoint
Modifiers
ScrollableLayerGuid
uint64_t
>
(
"
layers
:
:
RemoteContentController
:
:
HandleTapOnMainThread
"
this
&
RemoteContentController
:
:
HandleTapOnMainThread
aTapType
aPoint
aModifiers
aGuid
aInputBlockId
)
)
;
#
endif
}
}
void
RemoteContentController
:
:
NotifyPinchGestureOnCompositorThread
(
PinchGestureInput
:
:
PinchGestureType
aType
const
ScrollableLayerGuid
&
aGuid
LayoutDeviceCoord
aSpanChange
Modifiers
aModifiers
)
{
MOZ_ASSERT
(
mCompositorThread
-
>
IsOnCurrentThread
(
)
)
;
APZCTreeManagerParent
*
apzctmp
=
CompositorBridgeParent
:
:
GetApzcTreeManagerParentForRoot
(
aGuid
.
mLayersId
)
;
if
(
apzctmp
)
{
Unused
<
<
apzctmp
-
>
SendNotifyPinchGesture
(
aType
aGuid
aSpanChange
aModifiers
)
;
}
}
void
RemoteContentController
:
:
NotifyPinchGesture
(
PinchGestureInput
:
:
PinchGestureType
aType
const
ScrollableLayerGuid
&
aGuid
LayoutDeviceCoord
aSpanChange
Modifiers
aModifiers
)
{
APZThreadUtils
:
:
AssertOnControllerThread
(
)
;
if
(
XRE_IsGPUProcess
(
)
)
{
if
(
mCompositorThread
-
>
IsOnCurrentThread
(
)
)
{
NotifyPinchGestureOnCompositorThread
(
aType
aGuid
aSpanChange
aModifiers
)
;
}
else
{
mCompositorThread
-
>
Dispatch
(
NewRunnableMethod
<
PinchGestureInput
:
:
PinchGestureType
ScrollableLayerGuid
LayoutDeviceCoord
Modifiers
>
(
"
layers
:
:
RemoteContentController
:
:
"
"
NotifyPinchGestureOnCompositorThread
"
this
&
RemoteContentController
:
:
NotifyPinchGestureOnCompositorThread
aType
aGuid
aSpanChange
aModifiers
)
)
;
}
return
;
}
if
(
XRE_IsParentProcess
(
)
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
GeckoContentController
>
rootController
=
CompositorBridgeParent
:
:
GetGeckoContentControllerForRoot
(
aGuid
.
mLayersId
)
;
if
(
rootController
)
{
rootController
-
>
NotifyPinchGesture
(
aType
aGuid
aSpanChange
aModifiers
)
;
}
}
}
bool
RemoteContentController
:
:
IsRepaintThread
(
)
{
return
mCompositorThread
-
>
IsOnCurrentThread
(
)
;
}
void
RemoteContentController
:
:
DispatchToRepaintThread
(
already_AddRefed
<
Runnable
>
aTask
)
{
mCompositorThread
-
>
Dispatch
(
std
:
:
move
(
aTask
)
)
;
}
void
RemoteContentController
:
:
NotifyAPZStateChange
(
const
ScrollableLayerGuid
&
aGuid
APZStateChange
aChange
int
aArg
)
{
if
(
!
mCompositorThread
-
>
IsOnCurrentThread
(
)
)
{
mCompositorThread
-
>
Dispatch
(
NewRunnableMethod
<
ScrollableLayerGuid
APZStateChange
int
>
(
"
layers
:
:
RemoteContentController
:
:
NotifyAPZStateChange
"
this
&
RemoteContentController
:
:
NotifyAPZStateChange
aGuid
aChange
aArg
)
)
;
return
;
}
if
(
mCanSend
)
{
Unused
<
<
SendNotifyAPZStateChange
(
aGuid
aChange
aArg
)
;
}
}
void
RemoteContentController
:
:
UpdateOverscrollVelocity
(
const
ScrollableLayerGuid
&
aGuid
float
aX
float
aY
bool
aIsRootContent
)
{
if
(
XRE_IsParentProcess
(
)
)
{
#
ifdef
MOZ_WIDGET_ANDROID
if
(
!
NS_IsMainThread
(
)
)
{
mozilla
:
:
jni
:
:
DispatchToGeckoPriorityQueue
(
NewRunnableMethod
<
ScrollableLayerGuid
float
float
bool
>
(
"
layers
:
:
RemoteContentController
:
:
UpdateOverscrollVelocity
"
this
&
RemoteContentController
:
:
UpdateOverscrollVelocity
aGuid
aX
aY
aIsRootContent
)
)
;
return
;
}
#
endif
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
GeckoContentController
>
rootController
=
CompositorBridgeParent
:
:
GetGeckoContentControllerForRoot
(
aGuid
.
mLayersId
)
;
if
(
rootController
)
{
rootController
-
>
UpdateOverscrollVelocity
(
aGuid
aX
aY
aIsRootContent
)
;
}
}
}
void
RemoteContentController
:
:
UpdateOverscrollOffset
(
const
ScrollableLayerGuid
&
aGuid
float
aX
float
aY
bool
aIsRootContent
)
{
if
(
XRE_IsParentProcess
(
)
)
{
#
ifdef
MOZ_WIDGET_ANDROID
if
(
!
NS_IsMainThread
(
)
)
{
mozilla
:
:
jni
:
:
DispatchToGeckoPriorityQueue
(
NewRunnableMethod
<
ScrollableLayerGuid
float
float
bool
>
(
"
layers
:
:
RemoteContentController
:
:
UpdateOverscrollOffset
"
this
&
RemoteContentController
:
:
UpdateOverscrollOffset
aGuid
aX
aY
aIsRootContent
)
)
;
return
;
}
#
endif
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
GeckoContentController
>
rootController
=
CompositorBridgeParent
:
:
GetGeckoContentControllerForRoot
(
aGuid
.
mLayersId
)
;
if
(
rootController
)
{
rootController
-
>
UpdateOverscrollOffset
(
aGuid
aX
aY
aIsRootContent
)
;
}
}
}
void
RemoteContentController
:
:
NotifyMozMouseScrollEvent
(
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
const
nsString
&
aEvent
)
{
if
(
!
mCompositorThread
-
>
IsOnCurrentThread
(
)
)
{
mCompositorThread
-
>
Dispatch
(
NewRunnableMethod
<
ScrollableLayerGuid
:
:
ViewID
nsString
>
(
"
layers
:
:
RemoteContentController
:
:
NotifyMozMouseScrollEvent
"
this
&
RemoteContentController
:
:
NotifyMozMouseScrollEvent
aScrollId
aEvent
)
)
;
return
;
}
if
(
mCanSend
)
{
Unused
<
<
SendNotifyMozMouseScrollEvent
(
aScrollId
aEvent
)
;
}
}
void
RemoteContentController
:
:
NotifyFlushComplete
(
)
{
MOZ_ASSERT
(
IsRepaintThread
(
)
)
;
if
(
mCanSend
)
{
Unused
<
<
SendNotifyFlushComplete
(
)
;
}
}
void
RemoteContentController
:
:
NotifyAsyncScrollbarDragInitiated
(
uint64_t
aDragBlockId
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
ScrollDirection
aDirection
)
{
if
(
!
mCompositorThread
-
>
IsOnCurrentThread
(
)
)
{
mCompositorThread
-
>
Dispatch
(
NewRunnableMethod
<
uint64_t
ScrollableLayerGuid
:
:
ViewID
ScrollDirection
>
(
"
layers
:
:
RemoteContentController
:
:
NotifyAsyncScrollbarDragInitiated
"
this
&
RemoteContentController
:
:
NotifyAsyncScrollbarDragInitiated
aDragBlockId
aScrollId
aDirection
)
)
;
return
;
}
if
(
mCanSend
)
{
Unused
<
<
SendNotifyAsyncScrollbarDragInitiated
(
aDragBlockId
aScrollId
aDirection
)
;
}
}
void
RemoteContentController
:
:
NotifyAsyncScrollbarDragRejected
(
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
)
{
if
(
!
mCompositorThread
-
>
IsOnCurrentThread
(
)
)
{
mCompositorThread
-
>
Dispatch
(
NewRunnableMethod
<
ScrollableLayerGuid
:
:
ViewID
>
(
"
layers
:
:
RemoteContentController
:
:
NotifyAsyncScrollbarDragRejected
"
this
&
RemoteContentController
:
:
NotifyAsyncScrollbarDragRejected
aScrollId
)
)
;
return
;
}
if
(
mCanSend
)
{
Unused
<
<
SendNotifyAsyncScrollbarDragRejected
(
aScrollId
)
;
}
}
void
RemoteContentController
:
:
NotifyAsyncAutoscrollRejected
(
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
)
{
if
(
!
mCompositorThread
-
>
IsOnCurrentThread
(
)
)
{
mCompositorThread
-
>
Dispatch
(
NewRunnableMethod
<
ScrollableLayerGuid
:
:
ViewID
>
(
"
layers
:
:
RemoteContentController
:
:
NotifyAsyncAutoscrollRejected
"
this
&
RemoteContentController
:
:
NotifyAsyncAutoscrollRejected
aScrollId
)
)
;
return
;
}
if
(
mCanSend
)
{
Unused
<
<
SendNotifyAsyncAutoscrollRejected
(
aScrollId
)
;
}
}
void
RemoteContentController
:
:
CancelAutoscroll
(
const
ScrollableLayerGuid
&
aGuid
)
{
if
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_GPU
)
{
CancelAutoscrollCrossProcess
(
aGuid
)
;
}
else
{
CancelAutoscrollInProcess
(
aGuid
)
;
}
}
void
RemoteContentController
:
:
CancelAutoscrollInProcess
(
const
ScrollableLayerGuid
&
aGuid
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
!
NS_IsMainThread
(
)
)
{
NS_DispatchToMainThread
(
NewRunnableMethod
<
ScrollableLayerGuid
>
(
"
layers
:
:
RemoteContentController
:
:
CancelAutoscrollInProcess
"
this
&
RemoteContentController
:
:
CancelAutoscrollInProcess
aGuid
)
)
;
return
;
}
APZCCallbackHelper
:
:
CancelAutoscroll
(
aGuid
.
mScrollId
)
;
}
void
RemoteContentController
:
:
CancelAutoscrollCrossProcess
(
const
ScrollableLayerGuid
&
aGuid
)
{
MOZ_ASSERT
(
XRE_IsGPUProcess
(
)
)
;
if
(
!
mCompositorThread
-
>
IsOnCurrentThread
(
)
)
{
mCompositorThread
-
>
Dispatch
(
NewRunnableMethod
<
ScrollableLayerGuid
>
(
"
layers
:
:
RemoteContentController
:
:
CancelAutoscrollCrossProcess
"
this
&
RemoteContentController
:
:
CancelAutoscrollCrossProcess
aGuid
)
)
;
return
;
}
if
(
APZCTreeManagerParent
*
parent
=
CompositorBridgeParent
:
:
GetApzcTreeManagerParentForRoot
(
aGuid
.
mLayersId
)
)
{
Unused
<
<
parent
-
>
SendCancelAutoscroll
(
aGuid
.
mScrollId
)
;
}
}
void
RemoteContentController
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mCanSend
=
false
;
}
void
RemoteContentController
:
:
Destroy
(
)
{
if
(
mCanSend
)
{
mCanSend
=
false
;
Unused
<
<
SendDestroy
(
)
;
}
}
mozilla
:
:
ipc
:
:
IPCResult
RemoteContentController
:
:
RecvDestroy
(
)
{
mCanSend
=
false
;
return
IPC_OK
(
)
;
}
bool
RemoteContentController
:
:
IsRemote
(
)
{
return
true
;
}
}
}
