#
ifndef
mozilla_layers_RemoteContentController_h
#
define
mozilla_layers_RemoteContentController_h
#
include
"
mozilla
/
layers
/
GeckoContentController
.
h
"
#
include
"
mozilla
/
layers
/
PAPZParent
.
h
"
namespace
mozilla
{
namespace
dom
{
class
TabParent
;
}
namespace
layers
{
class
RemoteContentController
:
public
GeckoContentController
public
PAPZParent
{
using
GeckoContentController
:
:
TapType
;
using
GeckoContentController
:
:
APZStateChange
;
public
:
explicit
RemoteContentController
(
uint64_t
aLayersId
)
;
virtual
~
RemoteContentController
(
)
;
virtual
void
RequestContentRepaint
(
const
FrameMetrics
&
aFrameMetrics
)
override
;
virtual
void
HandleTap
(
TapType
aTapType
const
LayoutDevicePoint
&
aPoint
Modifiers
aModifiers
const
ScrollableLayerGuid
&
aGuid
uint64_t
aInputBlockId
)
override
;
virtual
void
PostDelayedTask
(
already_AddRefed
<
Runnable
>
aTask
int
aDelayMs
)
override
;
virtual
bool
IsRepaintThread
(
)
override
;
virtual
void
DispatchToRepaintThread
(
already_AddRefed
<
Runnable
>
aTask
)
override
;
virtual
bool
GetTouchSensitiveRegion
(
CSSRect
*
aOutRegion
)
override
;
virtual
void
NotifyAPZStateChange
(
const
ScrollableLayerGuid
&
aGuid
APZStateChange
aChange
int
aArg
)
override
;
virtual
void
NotifyMozMouseScrollEvent
(
const
FrameMetrics
:
:
ViewID
&
aScrollId
const
nsString
&
aEvent
)
override
;
virtual
void
NotifyFlushComplete
(
)
override
;
virtual
bool
RecvUpdateHitRegion
(
const
nsRegion
&
aRegion
)
override
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
virtual
void
Destroy
(
)
override
;
private
:
MessageLoop
*
mCompositorThread
;
uint64_t
mLayersId
;
bool
mCanSend
;
mozilla
:
:
Mutex
mMutex
;
nsRegion
mTouchSensitiveRegion
;
}
;
}
}
#
endif
