#
ifndef
mozilla_layers_CompositorThread_h
#
define
mozilla_layers_CompositorThread_h
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsIThread
.
h
"
namespace
mozilla
:
:
baseprofiler
{
class
BaseProfilerThreadId
;
}
using
ProfilerThreadId
=
mozilla
:
:
baseprofiler
:
:
BaseProfilerThreadId
;
class
nsISerialEventTarget
;
class
nsIThread
;
namespace
mozilla
{
namespace
layers
{
class
CompositorThreadHolder
final
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING_WITH_DELETE_ON_MAIN_THREAD
(
CompositorThreadHolder
)
public
:
CompositorThreadHolder
(
)
;
nsISerialEventTarget
*
GetCompositorThread
(
)
const
{
return
mCompositorThread
;
}
static
CompositorThreadHolder
*
GetSingleton
(
)
;
static
bool
IsActive
(
)
{
return
!
!
GetSingleton
(
)
;
}
static
void
Start
(
)
;
static
void
Shutdown
(
)
;
static
bool
IsInCompositorThread
(
)
;
static
ProfilerThreadId
GetThreadId
(
)
;
private
:
~
CompositorThreadHolder
(
)
;
nsCOMPtr
<
nsIThread
>
mCompositorThread
;
static
already_AddRefed
<
nsIThread
>
CreateCompositorThread
(
)
;
friend
class
CompositorBridgeParent
;
}
;
nsISerialEventTarget
*
CompositorThread
(
)
;
}
}
#
endif
