#
include
"
mozilla
/
layers
/
APZInputBridgeChild
.
h
"
#
include
"
InputData
.
h
"
namespace
mozilla
{
namespace
layers
{
APZInputBridgeChild
:
:
APZInputBridgeChild
(
)
:
mDestroyed
(
false
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
APZInputBridgeChild
:
:
~
APZInputBridgeChild
(
)
=
default
;
void
APZInputBridgeChild
:
:
Destroy
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mDestroyed
)
{
return
;
}
Send__delete__
(
this
)
;
mDestroyed
=
true
;
}
void
APZInputBridgeChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mDestroyed
=
true
;
}
APZEventResult
APZInputBridgeChild
:
:
ReceiveInputEvent
(
InputData
&
aEvent
)
{
APZEventResult
res
;
switch
(
aEvent
.
mInputType
)
{
case
MULTITOUCH_INPUT
:
{
MultiTouchInput
&
event
=
aEvent
.
AsMultiTouchInput
(
)
;
MultiTouchInput
processedEvent
;
SendReceiveMultiTouchInputEvent
(
event
&
res
&
processedEvent
)
;
event
=
processedEvent
;
return
res
;
}
case
MOUSE_INPUT
:
{
MouseInput
&
event
=
aEvent
.
AsMouseInput
(
)
;
MouseInput
processedEvent
;
SendReceiveMouseInputEvent
(
event
&
res
&
processedEvent
)
;
event
=
processedEvent
;
return
res
;
}
case
PANGESTURE_INPUT
:
{
PanGestureInput
&
event
=
aEvent
.
AsPanGestureInput
(
)
;
PanGestureInput
processedEvent
;
SendReceivePanGestureInputEvent
(
event
&
res
&
processedEvent
)
;
event
=
processedEvent
;
return
res
;
}
case
PINCHGESTURE_INPUT
:
{
PinchGestureInput
&
event
=
aEvent
.
AsPinchGestureInput
(
)
;
PinchGestureInput
processedEvent
;
SendReceivePinchGestureInputEvent
(
event
&
res
&
processedEvent
)
;
event
=
processedEvent
;
return
res
;
}
case
TAPGESTURE_INPUT
:
{
TapGestureInput
&
event
=
aEvent
.
AsTapGestureInput
(
)
;
TapGestureInput
processedEvent
;
SendReceiveTapGestureInputEvent
(
event
&
res
&
processedEvent
)
;
event
=
processedEvent
;
return
res
;
}
case
SCROLLWHEEL_INPUT
:
{
ScrollWheelInput
&
event
=
aEvent
.
AsScrollWheelInput
(
)
;
ScrollWheelInput
processedEvent
;
SendReceiveScrollWheelInputEvent
(
event
&
res
&
processedEvent
)
;
event
=
processedEvent
;
return
res
;
}
case
KEYBOARD_INPUT
:
{
KeyboardInput
&
event
=
aEvent
.
AsKeyboardInput
(
)
;
KeyboardInput
processedEvent
;
SendReceiveKeyboardInputEvent
(
event
&
res
&
processedEvent
)
;
event
=
processedEvent
;
return
res
;
}
default
:
{
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
InputData
type
.
"
)
;
res
.
SetStatusAsConsumeNoDefault
(
)
;
return
res
;
}
}
}
void
APZInputBridgeChild
:
:
ProcessUnhandledEvent
(
LayoutDeviceIntPoint
*
aRefPoint
ScrollableLayerGuid
*
aOutTargetGuid
uint64_t
*
aOutFocusSequenceNumber
LayersId
*
aOutLayersId
)
{
SendProcessUnhandledEvent
(
*
aRefPoint
aRefPoint
aOutTargetGuid
aOutFocusSequenceNumber
aOutLayersId
)
;
}
void
APZInputBridgeChild
:
:
UpdateWheelTransaction
(
LayoutDeviceIntPoint
aRefPoint
EventMessage
aEventMessage
const
Maybe
<
ScrollableLayerGuid
>
&
aTargetGuid
)
{
SendUpdateWheelTransaction
(
aRefPoint
aEventMessage
aTargetGuid
)
;
}
}
}
