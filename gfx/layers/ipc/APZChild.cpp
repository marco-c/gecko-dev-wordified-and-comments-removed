#
include
"
mozilla
/
layers
/
APZChild
.
h
"
#
include
"
mozilla
/
dom
/
TabChild
.
h
"
#
include
"
mozilla
/
layers
/
APZCCallbackHelper
.
h
"
namespace
mozilla
{
namespace
layers
{
class
TabChildCreatedObserver
:
public
nsIObserver
{
public
:
TabChildCreatedObserver
(
APZChild
*
aAPZChild
const
dom
:
:
TabId
&
aTabId
)
:
mAPZChild
(
aAPZChild
)
mTabId
(
aTabId
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
private
:
virtual
~
TabChildCreatedObserver
(
)
{
}
APZChild
*
mAPZChild
;
dom
:
:
TabId
mTabId
;
}
;
NS_IMPL_ISUPPORTS
(
TabChildCreatedObserver
nsIObserver
)
NS_IMETHODIMP
TabChildCreatedObserver
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
MOZ_ASSERT
(
strcmp
(
aTopic
"
tab
-
child
-
created
"
)
=
=
0
)
;
nsCOMPtr
<
nsITabChild
>
tabChild
(
do_QueryInterface
(
aSubject
)
)
;
NS_ENSURE_TRUE
(
tabChild
NS_ERROR_FAILURE
)
;
dom
:
:
TabChild
*
browser
=
static_cast
<
dom
:
:
TabChild
*
>
(
tabChild
.
get
(
)
)
;
if
(
browser
-
>
GetTabId
(
)
=
=
mTabId
)
{
mAPZChild
-
>
SetBrowser
(
browser
)
;
}
return
NS_OK
;
}
APZChild
*
APZChild
:
:
Create
(
const
dom
:
:
TabId
&
aTabId
)
{
RefPtr
<
dom
:
:
TabChild
>
browser
=
dom
:
:
TabChild
:
:
FindTabChild
(
aTabId
)
;
nsAutoPtr
<
APZChild
>
apz
(
new
APZChild
)
;
if
(
browser
)
{
apz
-
>
SetBrowser
(
browser
)
;
}
else
{
RefPtr
<
TabChildCreatedObserver
>
observer
=
new
TabChildCreatedObserver
(
apz
aTabId
)
;
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
if
(
!
os
|
|
NS_FAILED
(
os
-
>
AddObserver
(
observer
"
tab
-
child
-
created
"
false
)
)
)
{
return
nullptr
;
}
apz
-
>
SetObserver
(
observer
)
;
}
return
apz
.
forget
(
)
;
}
APZChild
:
:
~
APZChild
(
)
{
if
(
mObserver
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
os
-
>
RemoveObserver
(
mObserver
"
tab
-
child
-
created
"
)
;
}
else
{
mBrowser
-
>
SetAPZChild
(
nullptr
)
;
}
}
bool
APZChild
:
:
RecvUpdateFrame
(
const
FrameMetrics
&
aFrameMetrics
)
{
return
mBrowser
-
>
UpdateFrame
(
aFrameMetrics
)
;
}
bool
APZChild
:
:
RecvRequestFlingSnap
(
const
FrameMetrics
:
:
ViewID
&
aScrollId
const
mozilla
:
:
CSSPoint
&
aDestination
)
{
APZCCallbackHelper
:
:
RequestFlingSnap
(
aScrollId
aDestination
)
;
return
true
;
}
bool
APZChild
:
:
RecvAcknowledgeScrollUpdate
(
const
ViewID
&
aScrollId
const
uint32_t
&
aScrollGeneration
)
{
APZCCallbackHelper
:
:
AcknowledgeScrollUpdate
(
aScrollId
aScrollGeneration
)
;
return
true
;
}
bool
APZChild
:
:
RecvHandleDoubleTap
(
const
CSSPoint
&
aPoint
const
Modifiers
&
aModifiers
const
ScrollableLayerGuid
&
aGuid
)
{
mBrowser
-
>
HandleDoubleTap
(
aPoint
aModifiers
aGuid
)
;
return
true
;
}
bool
APZChild
:
:
RecvHandleSingleTap
(
const
CSSPoint
&
aPoint
const
Modifiers
&
aModifiers
const
ScrollableLayerGuid
&
aGuid
const
bool
&
aCallTakeFocusForClickFromTap
)
{
mBrowser
-
>
HandleSingleTap
(
aPoint
aModifiers
aGuid
aCallTakeFocusForClickFromTap
)
;
return
true
;
}
bool
APZChild
:
:
RecvHandleLongTap
(
const
CSSPoint
&
aPoint
const
Modifiers
&
aModifiers
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
)
{
mBrowser
-
>
HandleLongTap
(
aPoint
aModifiers
aGuid
aInputBlockId
)
;
return
true
;
}
bool
APZChild
:
:
RecvNotifyAPZStateChange
(
const
ViewID
&
aViewId
const
APZStateChange
&
aChange
const
int
&
aArg
)
{
return
mBrowser
-
>
NotifyAPZStateChange
(
aViewId
aChange
aArg
)
;
}
bool
APZChild
:
:
RecvNotifyFlushComplete
(
)
{
APZCCallbackHelper
:
:
NotifyFlushComplete
(
)
;
return
true
;
}
void
APZChild
:
:
SetObserver
(
nsIObserver
*
aObserver
)
{
MOZ_ASSERT
(
!
mBrowser
)
;
mObserver
=
aObserver
;
}
void
APZChild
:
:
SetBrowser
(
dom
:
:
TabChild
*
aBrowser
)
{
MOZ_ASSERT
(
!
mBrowser
)
;
if
(
mObserver
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
os
-
>
RemoveObserver
(
mObserver
"
tab
-
child
-
created
"
)
;
mObserver
=
nullptr
;
}
mBrowser
=
aBrowser
;
mBrowser
-
>
SetAPZChild
(
this
)
;
}
}
}
