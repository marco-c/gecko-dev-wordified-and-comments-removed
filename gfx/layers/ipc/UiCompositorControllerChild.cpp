#
include
"
UiCompositorControllerChild
.
h
"
#
include
"
UiCompositorControllerParent
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
gfx
/
GPUProcessManager
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
gfx
;
static
bool
sInitialized
=
false
;
static
StaticRefPtr
<
UiCompositorControllerChild
>
sChild
;
static
StaticRefPtr
<
UiCompositorControllerParent
>
sParent
;
UiCompositorControllerChild
:
:
UiCompositorControllerChild
(
RefPtr
<
nsThread
>
aThread
const
uint64_t
&
aProcessToken
)
:
mUiThread
(
aThread
)
mProcessToken
(
aProcessToken
)
{
}
UiCompositorControllerChild
:
:
~
UiCompositorControllerChild
(
)
{
}
UiCompositorControllerChild
*
UiCompositorControllerChild
:
:
Get
(
)
{
return
sChild
;
}
bool
UiCompositorControllerChild
:
:
IsInitialized
(
)
{
return
sInitialized
;
}
void
UiCompositorControllerChild
:
:
Shutdown
(
)
{
RefPtr
<
UiCompositorControllerChild
>
child
=
sChild
;
if
(
child
)
{
child
-
>
Close
(
)
;
sInitialized
=
false
;
}
}
void
UiCompositorControllerChild
:
:
InitSameProcess
(
RefPtr
<
nsThread
>
aThread
)
{
MOZ_ASSERT
(
!
sChild
)
;
MOZ_ASSERT
(
!
sParent
)
;
MOZ_ASSERT
(
aThread
)
;
MOZ_ASSERT
(
!
sInitialized
)
;
sInitialized
=
true
;
RefPtr
<
UiCompositorControllerChild
>
child
=
new
UiCompositorControllerChild
(
aThread
0
)
;
sParent
=
new
UiCompositorControllerParent
(
)
;
aThread
-
>
Dispatch
(
NewRunnableMethod
(
child
&
UiCompositorControllerChild
:
:
OpenForSameProcess
)
nsIThread
:
:
DISPATCH_NORMAL
)
;
}
void
UiCompositorControllerChild
:
:
InitWithGPUProcess
(
RefPtr
<
nsThread
>
aThread
const
uint64_t
&
aProcessToken
Endpoint
<
PUiCompositorControllerChild
>
&
&
aEndpoint
)
{
MOZ_ASSERT
(
!
sChild
)
;
MOZ_ASSERT
(
!
sParent
)
;
MOZ_ASSERT
(
aThread
)
;
MOZ_ASSERT
(
!
sInitialized
)
;
sInitialized
=
true
;
RefPtr
<
UiCompositorControllerChild
>
child
=
new
UiCompositorControllerChild
(
aThread
aProcessToken
)
;
RefPtr
<
nsIRunnable
>
task
=
NewRunnableMethod
<
Endpoint
<
PUiCompositorControllerChild
>
&
&
>
(
child
&
UiCompositorControllerChild
:
:
OpenForGPUProcess
Move
(
aEndpoint
)
)
;
aThread
-
>
Dispatch
(
task
.
forget
(
)
nsIThread
:
:
DISPATCH_NORMAL
)
;
}
void
UiCompositorControllerChild
:
:
OpenForSameProcess
(
)
{
MOZ_ASSERT
(
sParent
)
;
MOZ_ASSERT
(
!
sChild
)
;
MOZ_ASSERT
(
IsOnUiThread
(
)
)
;
if
(
!
Open
(
sParent
-
>
GetIPCChannel
(
)
mozilla
:
:
layers
:
:
CompositorThreadHolder
:
:
Loop
(
)
mozilla
:
:
ipc
:
:
ChildSide
)
)
{
sParent
=
nullptr
;
return
;
}
AddRef
(
)
;
sChild
=
this
;
}
void
UiCompositorControllerChild
:
:
OpenForGPUProcess
(
Endpoint
<
PUiCompositorControllerChild
>
&
&
aEndpoint
)
{
MOZ_ASSERT
(
!
sChild
)
;
MOZ_ASSERT
(
IsOnUiThread
(
)
)
;
if
(
!
aEndpoint
.
Bind
(
this
)
)
{
if
(
GPUProcessManager
*
gpm
=
GPUProcessManager
:
:
Get
(
)
)
{
gpm
-
>
NotifyRemoteActorDestroyed
(
mProcessToken
)
;
}
return
;
}
AddRef
(
)
;
sChild
=
this
;
}
void
UiCompositorControllerChild
:
:
Close
(
)
{
if
(
!
IsOnUiThread
(
)
)
{
mUiThread
-
>
Dispatch
(
NewRunnableMethod
(
this
&
UiCompositorControllerChild
:
:
Close
)
nsIThread
:
:
DISPATCH_NORMAL
)
;
return
;
}
if
(
!
mProcessToken
)
{
return
;
}
mProcessToken
=
0
;
if
(
this
=
=
sChild
)
{
sChild
=
nullptr
;
}
PUiCompositorControllerChild
:
:
Close
(
)
;
}
void
UiCompositorControllerChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
if
(
mProcessToken
)
{
GPUProcessManager
:
:
Get
(
)
-
>
NotifyRemoteActorDestroyed
(
mProcessToken
)
;
mProcessToken
=
0
;
sParent
=
nullptr
;
}
}
void
UiCompositorControllerChild
:
:
DeallocPUiCompositorControllerChild
(
)
{
Release
(
)
;
sInitialized
=
false
;
}
void
UiCompositorControllerChild
:
:
ProcessingError
(
Result
aCode
const
char
*
aReason
)
{
MOZ_RELEASE_ASSERT
(
aCode
=
=
MsgDropped
"
Processing
error
in
UiCompositorControllerChild
"
)
;
}
void
UiCompositorControllerChild
:
:
HandleFatalError
(
const
char
*
aName
const
char
*
aMsg
)
const
{
dom
:
:
ContentChild
:
:
FatalErrorIfNotUsingGPUProcess
(
aName
aMsg
OtherPid
(
)
)
;
}
bool
UiCompositorControllerChild
:
:
IsOnUiThread
(
)
const
{
return
NS_GetCurrentThread
(
)
=
=
mUiThread
;
}
}
}
