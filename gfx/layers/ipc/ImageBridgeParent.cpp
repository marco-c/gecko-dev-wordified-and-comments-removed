#
include
"
ImageBridgeParent
.
h
"
#
include
<
stdint
.
h
>
#
include
"
CompositableHost
.
h
"
#
include
"
base
/
message_loop
.
h
"
#
include
"
base
/
process
.
h
"
#
include
"
base
/
task
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
Hal
.
h
"
#
include
"
mozilla
/
HalTypes
.
h
"
#
include
"
mozilla
/
ipc
/
MessageChannel
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
ipc
/
Transport
.
h
"
#
include
"
mozilla
/
media
/
MediaSystemResourceManagerParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositableTransactionParent
.
h
"
#
include
"
mozilla
/
layers
/
LayerManagerComposite
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
layers
/
PImageBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
TextureHostOGL
.
h
"
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
ipc
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
media
;
std
:
:
map
<
base
:
:
ProcessId
ImageBridgeParent
*
>
ImageBridgeParent
:
:
sImageBridges
;
StaticAutoPtr
<
mozilla
:
:
Monitor
>
sImageBridgesLock
;
CompositorThreadHolder
*
GetCompositorThreadHolder
(
)
;
void
ImageBridgeParent
:
:
Setup
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
sImageBridgesLock
)
{
sImageBridgesLock
=
new
Monitor
(
"
ImageBridges
"
)
;
mozilla
:
:
ClearOnShutdown
(
&
sImageBridgesLock
)
;
}
}
ImageBridgeParent
:
:
ImageBridgeParent
(
MessageLoop
*
aLoop
ProcessId
aChildProcessId
)
:
mMessageLoop
(
aLoop
)
mSetChildThreadPriority
(
false
)
mClosed
(
false
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
{
MonitorAutoLock
lock
(
*
sImageBridgesLock
)
;
sImageBridges
[
aChildProcessId
]
=
this
;
}
SetOtherProcessId
(
aChildProcessId
)
;
}
ImageBridgeParent
:
:
~
ImageBridgeParent
(
)
{
}
static
StaticRefPtr
<
ImageBridgeParent
>
sImageBridgeParentSingleton
;
void
ReleaseImageBridgeParentSingleton
(
)
{
sImageBridgeParentSingleton
=
nullptr
;
}
ImageBridgeParent
*
ImageBridgeParent
:
:
CreateSameProcess
(
)
{
RefPtr
<
ImageBridgeParent
>
parent
=
new
ImageBridgeParent
(
CompositorThreadHolder
:
:
Loop
(
)
base
:
:
GetCurrentProcId
(
)
)
;
parent
-
>
mSelfRef
=
parent
;
sImageBridgeParentSingleton
=
parent
;
return
parent
;
}
bool
ImageBridgeParent
:
:
CreateForGPUProcess
(
Endpoint
<
PImageBridgeParent
>
&
&
aEndpoint
)
{
MOZ_ASSERT
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_GPU
)
;
MessageLoop
*
loop
=
CompositorThreadHolder
:
:
Loop
(
)
;
RefPtr
<
ImageBridgeParent
>
parent
=
new
ImageBridgeParent
(
loop
aEndpoint
.
OtherPid
(
)
)
;
loop
-
>
PostTask
(
NewRunnableMethod
<
Endpoint
<
PImageBridgeParent
>
&
&
>
(
"
layers
:
:
ImageBridgeParent
:
:
Bind
"
parent
&
ImageBridgeParent
:
:
Bind
Move
(
aEndpoint
)
)
)
;
sImageBridgeParentSingleton
=
parent
;
return
true
;
}
void
ImageBridgeParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mClosed
=
true
;
mCompositables
.
clear
(
)
;
{
MonitorAutoLock
lock
(
*
sImageBridgesLock
)
;
sImageBridges
.
erase
(
OtherPid
(
)
)
;
}
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
layers
:
:
ImageBridgeParent
:
:
DeferredDestroy
"
this
&
ImageBridgeParent
:
:
DeferredDestroy
)
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ImageBridgeParent
:
:
RecvImageBridgeThreadId
(
const
PlatformThreadId
&
aThreadId
)
{
MOZ_ASSERT
(
!
mSetChildThreadPriority
)
;
if
(
mSetChildThreadPriority
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
mSetChildThreadPriority
=
true
;
return
IPC_OK
(
)
;
}
class
MOZ_STACK_CLASS
AutoImageBridgeParentAsyncMessageSender
{
public
:
explicit
AutoImageBridgeParentAsyncMessageSender
(
ImageBridgeParent
*
aImageBridge
InfallibleTArray
<
OpDestroy
>
*
aToDestroy
=
nullptr
)
:
mImageBridge
(
aImageBridge
)
mToDestroy
(
aToDestroy
)
{
mImageBridge
-
>
SetAboutToSendAsyncMessages
(
)
;
}
~
AutoImageBridgeParentAsyncMessageSender
(
)
{
mImageBridge
-
>
SendPendingAsyncMessages
(
)
;
if
(
mToDestroy
)
{
for
(
const
auto
&
op
:
*
mToDestroy
)
{
mImageBridge
-
>
DestroyActor
(
op
)
;
}
}
}
private
:
ImageBridgeParent
*
mImageBridge
;
InfallibleTArray
<
OpDestroy
>
*
mToDestroy
;
}
;
mozilla
:
:
ipc
:
:
IPCResult
ImageBridgeParent
:
:
RecvInitReadLocks
(
ReadLockArray
&
&
aReadLocks
)
{
if
(
!
AddReadLocks
(
Move
(
aReadLocks
)
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ImageBridgeParent
:
:
RecvUpdate
(
EditArray
&
&
aEdits
OpDestroyArray
&
&
aToDestroy
const
uint64_t
&
aFwdTransactionId
)
{
AutoImageBridgeParentAsyncMessageSender
autoAsyncMessageSender
(
this
&
aToDestroy
)
;
UpdateFwdTransactionId
(
aFwdTransactionId
)
;
AutoClearReadLocks
clearLocks
(
mReadLocks
)
;
for
(
EditArray
:
:
index_type
i
=
0
;
i
<
aEdits
.
Length
(
)
;
+
+
i
)
{
if
(
!
ReceiveCompositableUpdate
(
aEdits
[
i
]
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
}
if
(
!
IsSameProcess
(
)
)
{
LayerManagerComposite
:
:
PlatformSyncBeforeReplyUpdate
(
)
;
}
return
IPC_OK
(
)
;
}
bool
ImageBridgeParent
:
:
CreateForContent
(
Endpoint
<
PImageBridgeParent
>
&
&
aEndpoint
)
{
MessageLoop
*
loop
=
CompositorThreadHolder
:
:
Loop
(
)
;
RefPtr
<
ImageBridgeParent
>
bridge
=
new
ImageBridgeParent
(
loop
aEndpoint
.
OtherPid
(
)
)
;
loop
-
>
PostTask
(
NewRunnableMethod
<
Endpoint
<
PImageBridgeParent
>
&
&
>
(
"
layers
:
:
ImageBridgeParent
:
:
Bind
"
bridge
&
ImageBridgeParent
:
:
Bind
Move
(
aEndpoint
)
)
)
;
return
true
;
}
void
ImageBridgeParent
:
:
Bind
(
Endpoint
<
PImageBridgeParent
>
&
&
aEndpoint
)
{
if
(
!
aEndpoint
.
Bind
(
this
)
)
return
;
mSelfRef
=
this
;
}
mozilla
:
:
ipc
:
:
IPCResult
ImageBridgeParent
:
:
RecvWillClose
(
)
{
InfallibleTArray
<
PTextureParent
*
>
textures
;
ManagedPTextureParent
(
textures
)
;
for
(
unsigned
int
i
=
0
;
i
<
textures
.
Length
(
)
;
+
+
i
)
{
RefPtr
<
TextureHost
>
tex
=
TextureHost
:
:
AsTextureHost
(
textures
[
i
]
)
;
tex
-
>
DeallocateDeviceData
(
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ImageBridgeParent
:
:
RecvNewCompositable
(
const
CompositableHandle
&
aHandle
const
TextureInfo
&
aInfo
const
LayersBackend
&
aLayersBackend
)
{
bool
useWebRender
=
aLayersBackend
=
=
LayersBackend
:
:
LAYERS_WR
;
RefPtr
<
CompositableHost
>
host
=
AddCompositable
(
aHandle
aInfo
useWebRender
)
;
if
(
!
host
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
host
-
>
SetAsyncRef
(
AsyncCompositableRef
(
OtherPid
(
)
aHandle
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ImageBridgeParent
:
:
RecvReleaseCompositable
(
const
CompositableHandle
&
aHandle
)
{
ReleaseCompositable
(
aHandle
)
;
return
IPC_OK
(
)
;
}
PTextureParent
*
ImageBridgeParent
:
:
AllocPTextureParent
(
const
SurfaceDescriptor
&
aSharedData
const
LayersBackend
&
aLayersBackend
const
TextureFlags
&
aFlags
const
uint64_t
&
aSerial
const
wr
:
:
MaybeExternalImageId
&
aExternalImageId
)
{
return
TextureHost
:
:
CreateIPDLActor
(
this
aSharedData
aLayersBackend
aFlags
aSerial
aExternalImageId
)
;
}
bool
ImageBridgeParent
:
:
DeallocPTextureParent
(
PTextureParent
*
actor
)
{
return
TextureHost
:
:
DestroyIPDLActor
(
actor
)
;
}
PMediaSystemResourceManagerParent
*
ImageBridgeParent
:
:
AllocPMediaSystemResourceManagerParent
(
)
{
return
new
mozilla
:
:
media
:
:
MediaSystemResourceManagerParent
(
)
;
}
bool
ImageBridgeParent
:
:
DeallocPMediaSystemResourceManagerParent
(
PMediaSystemResourceManagerParent
*
aActor
)
{
MOZ_ASSERT
(
aActor
)
;
delete
static_cast
<
mozilla
:
:
media
:
:
MediaSystemResourceManagerParent
*
>
(
aActor
)
;
return
true
;
}
void
ImageBridgeParent
:
:
SendAsyncMessage
(
const
InfallibleTArray
<
AsyncParentMessageData
>
&
aMessage
)
{
mozilla
:
:
Unused
<
<
SendParentAsyncMessages
(
aMessage
)
;
}
class
ProcessIdComparator
{
public
:
bool
Equals
(
const
ImageCompositeNotificationInfo
&
aA
const
ImageCompositeNotificationInfo
&
aB
)
const
{
return
aA
.
mImageBridgeProcessId
=
=
aB
.
mImageBridgeProcessId
;
}
bool
LessThan
(
const
ImageCompositeNotificationInfo
&
aA
const
ImageCompositeNotificationInfo
&
aB
)
const
{
return
aA
.
mImageBridgeProcessId
<
aB
.
mImageBridgeProcessId
;
}
}
;
bool
ImageBridgeParent
:
:
NotifyImageComposites
(
nsTArray
<
ImageCompositeNotificationInfo
>
&
aNotifications
)
{
aNotifications
.
Sort
(
ProcessIdComparator
(
)
)
;
uint32_t
i
=
0
;
bool
ok
=
true
;
while
(
i
<
aNotifications
.
Length
(
)
)
{
AutoTArray
<
ImageCompositeNotification
1
>
notifications
;
notifications
.
AppendElement
(
aNotifications
[
i
]
.
mNotification
)
;
uint32_t
end
=
i
+
1
;
MOZ_ASSERT
(
aNotifications
[
i
]
.
mNotification
.
compositable
(
)
)
;
ProcessId
pid
=
aNotifications
[
i
]
.
mImageBridgeProcessId
;
while
(
end
<
aNotifications
.
Length
(
)
&
&
aNotifications
[
end
]
.
mImageBridgeProcessId
=
=
pid
)
{
notifications
.
AppendElement
(
aNotifications
[
end
]
.
mNotification
)
;
+
+
end
;
}
GetInstance
(
pid
)
-
>
SendPendingAsyncMessages
(
)
;
if
(
!
GetInstance
(
pid
)
-
>
SendDidComposite
(
notifications
)
)
{
ok
=
false
;
}
i
=
end
;
}
return
ok
;
}
void
ImageBridgeParent
:
:
DeferredDestroy
(
)
{
mCompositorThreadHolder
=
nullptr
;
mSelfRef
=
nullptr
;
}
RefPtr
<
ImageBridgeParent
>
ImageBridgeParent
:
:
GetInstance
(
ProcessId
aId
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
MonitorAutoLock
lock
(
*
sImageBridgesLock
)
;
NS_ASSERTION
(
sImageBridges
.
count
(
aId
)
=
=
1
"
ImageBridgeParent
for
the
process
"
)
;
return
sImageBridges
[
aId
]
;
}
void
ImageBridgeParent
:
:
OnChannelConnected
(
int32_t
aPid
)
{
mCompositorThreadHolder
=
GetCompositorThreadHolder
(
)
;
}
bool
ImageBridgeParent
:
:
AllocShmem
(
size_t
aSize
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aType
ipc
:
:
Shmem
*
aShmem
)
{
if
(
mClosed
)
{
return
false
;
}
return
PImageBridgeParent
:
:
AllocShmem
(
aSize
aType
aShmem
)
;
}
bool
ImageBridgeParent
:
:
AllocUnsafeShmem
(
size_t
aSize
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aType
ipc
:
:
Shmem
*
aShmem
)
{
if
(
mClosed
)
{
return
false
;
}
return
PImageBridgeParent
:
:
AllocUnsafeShmem
(
aSize
aType
aShmem
)
;
}
void
ImageBridgeParent
:
:
DeallocShmem
(
ipc
:
:
Shmem
&
aShmem
)
{
if
(
mClosed
)
{
return
;
}
PImageBridgeParent
:
:
DeallocShmem
(
aShmem
)
;
}
bool
ImageBridgeParent
:
:
IsSameProcess
(
)
const
{
return
OtherPid
(
)
=
=
base
:
:
GetCurrentProcId
(
)
;
}
void
ImageBridgeParent
:
:
NotifyNotUsed
(
PTextureParent
*
aTexture
uint64_t
aTransactionId
)
{
RefPtr
<
TextureHost
>
texture
=
TextureHost
:
:
AsTextureHost
(
aTexture
)
;
if
(
!
texture
)
{
return
;
}
if
(
!
(
texture
-
>
GetFlags
(
)
&
TextureFlags
:
:
RECYCLE
)
)
{
return
;
}
uint64_t
textureId
=
TextureHost
:
:
GetTextureSerial
(
aTexture
)
;
mPendingAsyncMessage
.
push_back
(
OpNotifyNotUsed
(
textureId
aTransactionId
)
)
;
if
(
!
IsAboutToSendAsyncMessages
(
)
)
{
SendPendingAsyncMessages
(
)
;
}
}
}
}
