#
ifndef
mozilla_layers_CompositorBridgeChild_h
#
define
mozilla_layers_CompositorBridgeChild_h
#
include
"
base
/
basictypes
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
layers
/
PCompositorBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
TextureForwarder
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
ThreadSafeRefcountingWithMainThreadDestruction
.
h
"
#
include
"
nsWeakReference
.
h
"
namespace
mozilla
{
namespace
dom
{
class
TabChild
;
}
namespace
widget
{
class
CompositorWidget
;
}
namespace
layers
{
using
mozilla
:
:
dom
:
:
TabChild
;
class
ClientLayerManager
;
class
CompositorBridgeParent
;
class
TextureClient
;
class
TextureClientPool
;
struct
FrameMetrics
;
class
CompositorBridgeChild
final
:
public
PCompositorBridgeChild
public
TextureForwarder
public
ShmemAllocator
{
typedef
InfallibleTArray
<
AsyncParentMessageData
>
AsyncParentMessageArray
;
public
:
explicit
CompositorBridgeChild
(
ClientLayerManager
*
aLayerManager
)
;
void
Destroy
(
)
;
bool
LookupCompositorFrameMetrics
(
const
FrameMetrics
:
:
ViewID
aId
FrameMetrics
&
)
;
static
bool
InitForContent
(
Endpoint
<
PCompositorBridgeChild
>
&
&
aEndpoint
)
;
static
RefPtr
<
CompositorBridgeChild
>
CreateRemote
(
const
uint64_t
&
aProcessToken
ClientLayerManager
*
aLayerManager
Endpoint
<
PCompositorBridgeChild
>
&
&
aEndpoint
)
;
CompositorBridgeParent
*
InitSameProcess
(
widget
:
:
CompositorWidget
*
aWidget
const
uint64_t
&
aLayerTreeId
CSSToLayoutDeviceScale
aScale
bool
aUseAPZ
bool
aUseExternalSurface
const
gfx
:
:
IntSize
&
aSurfaceSize
)
;
static
CompositorBridgeChild
*
Get
(
)
;
static
bool
ChildProcessHasCompositorBridge
(
)
;
void
AddOverfillObserver
(
ClientLayerManager
*
aLayerManager
)
;
virtual
bool
RecvClearCachedResources
(
const
uint64_t
&
id
)
override
;
virtual
bool
RecvDidComposite
(
const
uint64_t
&
aId
const
uint64_t
&
aTransactionId
const
TimeStamp
&
aCompositeStart
const
TimeStamp
&
aCompositeEnd
)
override
;
virtual
bool
RecvInvalidateLayers
(
const
uint64_t
&
aLayersId
)
override
;
virtual
bool
RecvCompositorUpdated
(
const
uint64_t
&
aLayersId
const
TextureFactoryIdentifier
&
aNewIdentifier
)
override
;
virtual
bool
RecvOverfill
(
const
uint32_t
&
aOverfill
)
override
;
virtual
bool
RecvUpdatePluginConfigurations
(
const
LayoutDeviceIntPoint
&
aContentOffset
const
LayoutDeviceIntRegion
&
aVisibleRegion
nsTArray
<
PluginWindowData
>
&
&
aPlugins
)
override
;
virtual
bool
RecvCaptureAllPlugins
(
const
uintptr_t
&
aParentWidget
)
override
;
virtual
bool
RecvHideAllPlugins
(
const
uintptr_t
&
aParentWidget
)
override
;
virtual
PTextureChild
*
AllocPTextureChild
(
const
SurfaceDescriptor
&
aSharedData
const
LayersBackend
&
aLayersBackend
const
TextureFlags
&
aFlags
const
uint64_t
&
aId
const
uint64_t
&
aSerial
)
override
;
virtual
bool
DeallocPTextureChild
(
PTextureChild
*
actor
)
override
;
virtual
bool
RecvParentAsyncMessages
(
InfallibleTArray
<
AsyncParentMessageData
>
&
&
aMessages
)
override
;
virtual
PTextureChild
*
CreateTexture
(
const
SurfaceDescriptor
&
aSharedData
LayersBackend
aLayersBackend
TextureFlags
aFlags
uint64_t
aSerial
)
override
;
void
RequestNotifyAfterRemotePaint
(
TabChild
*
aTabChild
)
;
void
CancelNotifyAfterRemotePaint
(
TabChild
*
aTabChild
)
;
bool
SendWillClose
(
)
;
bool
SendPause
(
)
;
bool
SendResume
(
)
;
bool
SendNotifyHidden
(
const
uint64_t
&
id
)
;
bool
SendNotifyVisible
(
const
uint64_t
&
id
)
;
bool
SendNotifyChildCreated
(
const
uint64_t
&
id
)
;
bool
SendAdoptChild
(
const
uint64_t
&
id
)
;
bool
SendMakeSnapshot
(
const
SurfaceDescriptor
&
inSnapshot
const
gfx
:
:
IntRect
&
dirtyRect
)
;
bool
SendFlushRendering
(
)
;
bool
SendGetTileSize
(
int32_t
*
tileWidth
int32_t
*
tileHeight
)
;
bool
SendStartFrameTimeRecording
(
const
int32_t
&
bufferSize
uint32_t
*
startIndex
)
;
bool
SendStopFrameTimeRecording
(
const
uint32_t
&
startIndex
nsTArray
<
float
>
*
intervals
)
;
bool
SendNotifyRegionInvalidated
(
const
nsIntRegion
&
region
)
;
bool
SendRequestNotifyAfterRemotePaint
(
)
;
bool
SendClearVisibleRegions
(
uint64_t
aLayersId
uint32_t
aPresShellId
)
;
bool
SendUpdateVisibleRegion
(
VisibilityCounter
aCounter
const
ScrollableLayerGuid
&
aGuid
const
mozilla
:
:
CSSIntRegion
&
aRegion
)
;
bool
IsSameProcess
(
)
const
override
;
virtual
bool
IPCOpen
(
)
const
override
{
return
mCanSend
;
}
static
void
ShutDown
(
)
;
void
UpdateFwdTransactionId
(
)
{
+
+
mFwdTransactionId
;
}
uint64_t
GetFwdTransactionId
(
)
{
return
mFwdTransactionId
;
}
void
HoldUntilCompositableRefReleasedIfNecessary
(
TextureClient
*
aClient
)
;
void
NotifyNotUsed
(
uint64_t
aTextureId
uint64_t
aFwdTransactionId
)
;
void
DeliverFence
(
uint64_t
aTextureId
FenceHandle
&
aReleaseFenceHandle
)
;
virtual
void
CancelWaitForRecycle
(
uint64_t
aTextureId
)
override
;
TextureClientPool
*
GetTexturePool
(
LayersBackend
aBackend
gfx
:
:
SurfaceFormat
aFormat
TextureFlags
aFlags
)
;
void
ClearTexturePool
(
)
;
void
HandleMemoryPressure
(
)
;
virtual
MessageLoop
*
GetMessageLoop
(
)
const
override
{
return
mMessageLoop
;
}
virtual
base
:
:
ProcessId
GetParentPid
(
)
const
override
{
return
OtherPid
(
)
;
}
virtual
bool
AllocUnsafeShmem
(
size_t
aSize
mozilla
:
:
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aShmType
mozilla
:
:
ipc
:
:
Shmem
*
aShmem
)
override
;
virtual
bool
AllocShmem
(
size_t
aSize
mozilla
:
:
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aShmType
mozilla
:
:
ipc
:
:
Shmem
*
aShmem
)
override
;
virtual
void
DeallocShmem
(
mozilla
:
:
ipc
:
:
Shmem
&
aShmem
)
override
;
PCompositorWidgetChild
*
AllocPCompositorWidgetChild
(
const
CompositorWidgetInitData
&
aInitData
)
override
;
bool
DeallocPCompositorWidgetChild
(
PCompositorWidgetChild
*
aActor
)
override
;
virtual
ShmemAllocator
*
AsShmemAllocator
(
)
override
{
return
this
;
}
void
ProcessingError
(
Result
aCode
const
char
*
aReason
)
override
;
private
:
virtual
~
CompositorBridgeChild
(
)
;
virtual
PLayerTransactionChild
*
AllocPLayerTransactionChild
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
const
uint64_t
&
aId
TextureFactoryIdentifier
*
aTextureFactoryIdentifier
bool
*
aSuccess
)
override
;
virtual
bool
DeallocPLayerTransactionChild
(
PLayerTransactionChild
*
aChild
)
override
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
virtual
bool
RecvSharedCompositorFrameMetrics
(
const
mozilla
:
:
ipc
:
:
SharedMemoryBasic
:
:
Handle
&
metrics
const
CrossProcessMutexHandle
&
handle
const
uint64_t
&
aLayersId
const
uint32_t
&
aAPZCId
)
override
;
virtual
bool
RecvReleaseSharedCompositorFrameMetrics
(
const
ViewID
&
aId
const
uint32_t
&
aAPZCId
)
override
;
virtual
bool
RecvRemotePaintIsReady
(
)
override
;
class
SharedFrameMetricsData
{
public
:
SharedFrameMetricsData
(
const
mozilla
:
:
ipc
:
:
SharedMemoryBasic
:
:
Handle
&
metrics
const
CrossProcessMutexHandle
&
handle
const
uint64_t
&
aLayersId
const
uint32_t
&
aAPZCId
)
;
~
SharedFrameMetricsData
(
)
;
void
CopyFrameMetrics
(
FrameMetrics
*
aFrame
)
;
FrameMetrics
:
:
ViewID
GetViewID
(
)
;
uint64_t
GetLayersId
(
)
const
;
uint32_t
GetAPZCId
(
)
;
private
:
RefPtr
<
mozilla
:
:
ipc
:
:
SharedMemoryBasic
>
mBuffer
;
CrossProcessMutex
*
mMutex
;
uint64_t
mLayersId
;
uint32_t
mAPZCId
;
}
;
RefPtr
<
ClientLayerManager
>
mLayerManager
;
RefPtr
<
CompositorBridgeParent
>
mCompositorBridgeParent
;
nsClassHashtable
<
nsUint64HashKey
SharedFrameMetricsData
>
mFrameMetricsTable
;
nsWeakPtr
mWeakTabChild
;
DISALLOW_EVIL_CONSTRUCTORS
(
CompositorBridgeChild
)
;
AutoTArray
<
ClientLayerManager
*
0
>
mOverfillObservers
;
bool
mCanSend
;
uint64_t
mFwdTransactionId
;
nsDataHashtable
<
nsUint64HashKey
RefPtr
<
TextureClient
>
>
mTexturesWaitingRecycled
;
MessageLoop
*
mMessageLoop
;
AutoTArray
<
RefPtr
<
TextureClientPool
>
2
>
mTexturePools
;
uint64_t
mProcessToken
;
}
;
}
}
#
endif
