#
ifndef
mozilla_layers_CompositorBridgeChild_h
#
define
mozilla_layers_CompositorBridgeChild_h
#
include
"
base
/
basictypes
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
layers
/
PCompositorBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
TextureForwarder
.
h
"
#
include
"
mozilla
/
layers
/
PaintThread
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
ThreadSafeRefcountingWithMainThreadDestruction
.
h
"
#
include
<
unordered_map
>
namespace
mozilla
{
namespace
dom
{
class
BrowserChild
;
}
namespace
webgpu
{
class
PWebGPUChild
;
class
WebGPUChild
;
}
namespace
widget
{
class
CompositorWidget
;
}
namespace
layers
{
using
mozilla
:
:
dom
:
:
BrowserChild
;
class
IAPZCTreeManager
;
class
APZCTreeManagerChild
;
class
CanvasChild
;
class
ClientLayerManager
;
class
CompositorBridgeParent
;
class
CompositorManagerChild
;
class
CompositorOptions
;
class
TextureClient
;
class
TextureClientPool
;
struct
FrameMetrics
;
class
CompositorBridgeChild
final
:
public
PCompositorBridgeChild
public
TextureForwarder
{
typedef
nsTArray
<
AsyncParentMessageData
>
AsyncParentMessageArray
;
friend
class
PCompositorBridgeChild
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CompositorBridgeChild
override
)
;
explicit
CompositorBridgeChild
(
CompositorManagerChild
*
aManager
)
;
void
InitForContent
(
uint32_t
aNamespace
)
;
void
InitForWidget
(
uint64_t
aProcessToken
LayerManager
*
aLayerManager
uint32_t
aNamespace
)
;
void
Destroy
(
)
;
bool
LookupCompositorFrameMetrics
(
const
ScrollableLayerGuid
:
:
ViewID
aId
FrameMetrics
&
)
;
static
CompositorBridgeChild
*
Get
(
)
;
static
bool
ChildProcessHasCompositorBridge
(
)
;
static
bool
CompositorIsInGPUProcess
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDidComposite
(
const
LayersId
&
aId
const
TransactionId
&
aTransactionId
const
TimeStamp
&
aCompositeStart
const
TimeStamp
&
aCompositeEnd
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyFrameStats
(
nsTArray
<
FrameStats
>
&
&
aFrameStats
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInvalidateLayers
(
const
LayersId
&
aLayersId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdatePluginConfigurations
(
const
LayoutDeviceIntPoint
&
aContentOffset
const
LayoutDeviceIntRegion
&
aVisibleRegion
nsTArray
<
PluginWindowData
>
&
&
aPlugins
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCaptureAllPlugins
(
const
uintptr_t
&
aParentWidget
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvHideAllPlugins
(
const
uintptr_t
&
aParentWidget
)
;
PTextureChild
*
AllocPTextureChild
(
const
SurfaceDescriptor
&
aSharedData
const
ReadLockDescriptor
&
aReadLock
const
LayersBackend
&
aLayersBackend
const
TextureFlags
&
aFlags
const
LayersId
&
aId
const
uint64_t
&
aSerial
const
wr
:
:
MaybeExternalImageId
&
aExternalImageId
)
;
bool
DeallocPTextureChild
(
PTextureChild
*
actor
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvParentAsyncMessages
(
nsTArray
<
AsyncParentMessageData
>
&
&
aMessages
)
;
PTextureChild
*
CreateTexture
(
const
SurfaceDescriptor
&
aSharedData
const
ReadLockDescriptor
&
aReadLock
LayersBackend
aLayersBackend
TextureFlags
aFlags
uint64_t
aSerial
wr
:
:
MaybeExternalImageId
&
aExternalImageId
nsIEventTarget
*
aTarget
)
override
;
already_AddRefed
<
CanvasChild
>
GetCanvasChild
(
)
final
;
void
EndCanvasTransaction
(
)
;
RefPtr
<
webgpu
:
:
WebGPUChild
>
GetWebGPUChild
(
)
;
void
RequestNotifyAfterRemotePaint
(
BrowserChild
*
aBrowserChild
)
;
void
CancelNotifyAfterRemotePaint
(
BrowserChild
*
aBrowserChild
)
;
bool
SendWillClose
(
)
;
bool
SendPause
(
)
;
bool
SendResume
(
)
;
bool
SendResumeAsync
(
)
;
bool
SendNotifyChildCreated
(
const
LayersId
&
id
CompositorOptions
*
aOptions
)
;
bool
SendAdoptChild
(
const
LayersId
&
id
)
;
bool
SendMakeSnapshot
(
const
SurfaceDescriptor
&
inSnapshot
const
gfx
:
:
IntRect
&
dirtyRect
)
;
bool
SendFlushRendering
(
)
;
bool
SendGetTileSize
(
int32_t
*
tileWidth
int32_t
*
tileHeight
)
;
bool
SendStartFrameTimeRecording
(
const
int32_t
&
bufferSize
uint32_t
*
startIndex
)
;
bool
SendStopFrameTimeRecording
(
const
uint32_t
&
startIndex
nsTArray
<
float
>
*
intervals
)
;
bool
SendNotifyRegionInvalidated
(
const
nsIntRegion
&
region
)
;
bool
SendRequestNotifyAfterRemotePaint
(
)
;
bool
SendAllPluginsCaptured
(
)
;
bool
IsSameProcess
(
)
const
override
;
bool
IPCOpen
(
)
const
override
{
return
mCanSend
;
}
static
void
ShutDown
(
)
;
void
UpdateFwdTransactionId
(
)
{
+
+
mFwdTransactionId
;
}
uint64_t
GetFwdTransactionId
(
)
{
return
mFwdTransactionId
;
}
void
HoldUntilCompositableRefReleasedIfNecessary
(
TextureClient
*
aClient
)
;
void
NotifyNotUsed
(
uint64_t
aTextureId
uint64_t
aFwdTransactionId
)
;
void
CancelWaitForNotifyNotUsed
(
uint64_t
aTextureId
)
override
;
TextureClientPool
*
GetTexturePool
(
KnowsCompositor
*
aAllocator
gfx
:
:
SurfaceFormat
aFormat
TextureFlags
aFlags
)
;
void
ClearTexturePool
(
)
;
FixedSizeSmallShmemSectionAllocator
*
GetTileLockAllocator
(
)
override
;
void
HandleMemoryPressure
(
)
;
MessageLoop
*
GetMessageLoop
(
)
const
override
{
return
mMessageLoop
;
}
base
:
:
ProcessId
GetParentPid
(
)
const
override
{
return
OtherPid
(
)
;
}
bool
AllocUnsafeShmem
(
size_t
aSize
mozilla
:
:
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aShmType
mozilla
:
:
ipc
:
:
Shmem
*
aShmem
)
override
;
bool
AllocShmem
(
size_t
aSize
mozilla
:
:
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aShmType
mozilla
:
:
ipc
:
:
Shmem
*
aShmem
)
override
;
bool
DeallocShmem
(
mozilla
:
:
ipc
:
:
Shmem
&
aShmem
)
override
;
PCompositorWidgetChild
*
AllocPCompositorWidgetChild
(
const
CompositorWidgetInitData
&
aInitData
)
;
bool
DeallocPCompositorWidgetChild
(
PCompositorWidgetChild
*
aActor
)
;
PAPZCTreeManagerChild
*
AllocPAPZCTreeManagerChild
(
const
LayersId
&
aLayersId
)
;
bool
DeallocPAPZCTreeManagerChild
(
PAPZCTreeManagerChild
*
aActor
)
;
PAPZChild
*
AllocPAPZChild
(
const
LayersId
&
aLayersId
)
;
bool
DeallocPAPZChild
(
PAPZChild
*
aActor
)
;
void
WillEndTransaction
(
)
;
PWebRenderBridgeChild
*
AllocPWebRenderBridgeChild
(
const
wr
:
:
PipelineId
&
aPipelineId
const
LayoutDeviceIntSize
&
)
;
bool
DeallocPWebRenderBridgeChild
(
PWebRenderBridgeChild
*
aActor
)
;
webgpu
:
:
PWebGPUChild
*
AllocPWebGPUChild
(
)
;
bool
DeallocPWebGPUChild
(
webgpu
:
:
PWebGPUChild
*
aActor
)
;
wr
:
:
MaybeExternalImageId
GetNextExternalImageId
(
)
override
;
wr
:
:
PipelineId
GetNextPipelineId
(
)
;
void
FlushAsyncPaints
(
)
;
void
NotifyBeginAsyncPaint
(
PaintTask
*
aTask
)
;
bool
NotifyFinishedAsyncWorkerPaint
(
PaintTask
*
aTask
)
;
bool
NotifyBeginAsyncEndLayerTransaction
(
SyncObjectClient
*
aSyncObject
)
;
void
NotifyFinishedAsyncEndLayerTransaction
(
)
;
void
PostponeMessagesIfAsyncPainting
(
)
;
private
:
virtual
~
CompositorBridgeChild
(
)
;
void
ResumeIPCAfterAsyncPaint
(
)
;
void
AfterDestroy
(
)
;
PLayerTransactionChild
*
AllocPLayerTransactionChild
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
const
LayersId
&
aId
)
;
bool
DeallocPLayerTransactionChild
(
PLayerTransactionChild
*
aChild
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSharedCompositorFrameMetrics
(
const
mozilla
:
:
ipc
:
:
SharedMemoryBasic
:
:
Handle
&
metrics
const
CrossProcessMutexHandle
&
handle
const
LayersId
&
aLayersId
const
uint32_t
&
aAPZCId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReleaseSharedCompositorFrameMetrics
(
const
ViewID
&
aId
const
uint32_t
&
aAPZCId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRemotePaintIsReady
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvObserveLayersUpdate
(
const
LayersId
&
aLayersId
const
LayersObserverEpoch
&
aEpoch
const
bool
&
aActive
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCompositorOptionsChanged
(
const
LayersId
&
aLayersId
const
CompositorOptions
&
aNewOptions
)
;
uint64_t
GetNextResourceId
(
)
;
void
ClearSharedFrameMetricsData
(
LayersId
aLayersId
)
;
class
SharedFrameMetricsData
final
{
public
:
SharedFrameMetricsData
(
const
mozilla
:
:
ipc
:
:
SharedMemoryBasic
:
:
Handle
&
metrics
const
CrossProcessMutexHandle
&
handle
const
LayersId
&
aLayersId
const
uint32_t
&
aAPZCId
)
;
~
SharedFrameMetricsData
(
)
;
void
CopyFrameMetrics
(
FrameMetrics
*
aFrame
)
;
ScrollableLayerGuid
:
:
ViewID
GetViewID
(
)
;
LayersId
GetLayersId
(
)
const
;
uint32_t
GetAPZCId
(
)
;
private
:
RefPtr
<
mozilla
:
:
ipc
:
:
SharedMemoryBasic
>
mBuffer
;
CrossProcessMutex
*
mMutex
;
LayersId
mLayersId
;
uint32_t
mAPZCId
;
}
;
RefPtr
<
CompositorManagerChild
>
mCompositorManager
;
RefPtr
<
LayerManager
>
mLayerManager
;
uint32_t
mIdNamespace
;
uint32_t
mResourceId
;
RefPtr
<
CompositorBridgeParent
>
mCompositorBridgeParent
;
nsClassHashtable
<
nsUint64HashKey
SharedFrameMetricsData
>
mFrameMetricsTable
;
nsWeakPtr
mWeakBrowserChild
;
DISALLOW_EVIL_CONSTRUCTORS
(
CompositorBridgeChild
)
;
bool
mCanSend
;
bool
mActorDestroyed
;
uint64_t
mFwdTransactionId
;
std
:
:
unordered_map
<
uint64_t
RefPtr
<
TextureClient
>
>
mTexturesWaitingNotifyNotUsed
;
MessageLoop
*
mMessageLoop
;
AutoTArray
<
RefPtr
<
TextureClientPool
>
2
>
mTexturePools
;
uint64_t
mProcessToken
;
FixedSizeSmallShmemSectionAllocator
*
mSectionAllocator
;
nsTArray
<
RefPtr
<
TextureClient
>
>
mTextureClientsForAsyncPaint
;
Monitor
mPaintLock
;
size_t
mTotalAsyncPaints
;
TimeStamp
mAsyncTransactionBegin
;
size_t
mOutstandingAsyncPaints
;
bool
mOutstandingAsyncEndTransaction
;
RefPtr
<
SyncObjectClient
>
mOutstandingAsyncSyncObject
;
bool
mIsDelayingForAsyncPaints
;
uintptr_t
mSlowFlushCount
;
uintptr_t
mTotalFlushCount
;
RefPtr
<
CanvasChild
>
mCanvasChild
;
RefPtr
<
webgpu
:
:
WebGPUChild
>
mWebGPUChild
;
}
;
}
}
#
endif
