#
ifndef
mozilla_layers_CanvasChild_h
#
define
mozilla_layers_CanvasChild_h
#
include
"
mozilla
/
gfx
/
RecordedEvent
.
h
"
#
include
"
mozilla
/
ipc
/
CrossProcessSemaphore
.
h
"
#
include
"
mozilla
/
layers
/
PCanvasChild
.
h
"
#
include
"
mozilla
/
layers
/
SourceSurfaceSharedData
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
SourceSurface
;
}
namespace
layers
{
class
CanvasDrawEventRecorder
;
class
CanvasChild
final
:
public
PCanvasChild
public
SupportsWeakPtr
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
CanvasChild
)
CanvasChild
(
)
;
static
bool
Deactivated
(
)
{
return
mDeactivated
;
}
void
ClearCachedResources
(
)
;
ipc
:
:
IPCResult
RecvNotifyDeviceChanged
(
)
;
ipc
:
:
IPCResult
RecvDeactivate
(
)
;
void
EnsureRecorder
(
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
TextureType
aTextureType
)
;
void
Destroy
(
)
;
void
OnTextureWriteLock
(
)
;
void
OnTextureForwarded
(
)
;
bool
ShouldCacheDataSurface
(
)
const
{
return
mTransactionsSinceGetDataSurface
<
kCacheDataSurfaceThreshold
;
}
bool
EnsureBeginTransaction
(
)
;
void
EndTransaction
(
)
;
bool
ShouldBeCleanedUp
(
)
const
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
CreateDrawTarget
(
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
)
;
void
RecordEvent
(
const
gfx
:
:
RecordedEvent
&
aEvent
)
;
int64_t
CreateCheckpoint
(
)
;
already_AddRefed
<
gfx
:
:
SourceSurface
>
WrapSurface
(
const
RefPtr
<
gfx
:
:
SourceSurface
>
&
aSurface
)
;
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
GetDataSurface
(
const
gfx
:
:
SourceSurface
*
aSurface
)
;
protected
:
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
final
;
private
:
DISALLOW_COPY_AND_ASSIGN
(
CanvasChild
)
;
~
CanvasChild
(
)
final
;
bool
EnsureDataSurfaceShmem
(
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
)
;
void
ReturnDataSurfaceShmem
(
already_AddRefed
<
ipc
:
:
SharedMemoryBasic
>
aDataSurfaceShmem
)
;
void
DropFreeBuffersWhenDormant
(
)
;
static
const
uint32_t
kCacheDataSurfaceThreshold
=
10
;
static
bool
mDeactivated
;
RefPtr
<
CanvasDrawEventRecorder
>
mRecorder
;
RefPtr
<
ipc
:
:
SharedMemoryBasic
>
mDataSurfaceShmem
;
int64_t
mLastWriteLockCheckpoint
=
0
;
uint32_t
mTransactionsSinceGetDataSurface
=
kCacheDataSurfaceThreshold
;
std
:
:
vector
<
RefPtr
<
gfx
:
:
SourceSurface
>
>
mLastTransactionExternalSurfaces
;
bool
mIsInTransaction
=
false
;
bool
mHasOutstandingWriteLock
=
false
;
bool
mDormant
=
false
;
}
;
}
}
#
endif
