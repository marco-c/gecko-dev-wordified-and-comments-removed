#
ifndef
mozilla_gfx_IOSurfacePort_h__
#
define
mozilla_gfx_IOSurfacePort_h__
#
include
"
chrome
/
common
/
ipc_message_utils
.
h
"
#
ifdef
XP_DARWIN
#
include
<
IOSurface
/
IOSurfaceRef
.
h
>
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
CFTypeRefPtr
.
h
"
#
endif
namespace
mozilla
:
:
layers
{
struct
IOSurfacePort
{
#
ifdef
XP_DARWIN
UniqueMachSendRight
mPort
;
CFTypeRefPtr
<
IOSurfaceRef
>
GetSurface
(
)
const
{
if
(
IOSurfaceRef
s
=
IOSurfaceLookupFromMachPort
(
mPort
.
get
(
)
)
)
{
return
CFTypeRefPtr
<
IOSurfaceRef
>
:
:
WrapUnderCreateRule
(
s
)
;
}
return
{
}
;
}
static
IOSurfacePort
FromSurface
(
const
CFTypeRefPtr
<
IOSurfaceRef
>
&
aSurface
)
{
return
{
UniqueMachSendRight
(
IOSurfaceCreateMachPort
(
aSurface
.
get
(
)
)
)
}
;
}
#
endif
}
;
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
layers
:
:
IOSurfacePort
>
{
using
paramType
=
mozilla
:
:
layers
:
:
IOSurfacePort
;
static
void
Write
(
MessageWriter
*
writer
paramType
&
&
param
)
{
#
ifdef
XP_DARWIN
WriteParam
(
writer
std
:
:
move
(
param
.
mPort
)
)
;
#
endif
}
static
bool
Read
(
MessageReader
*
reader
paramType
*
result
)
{
#
ifdef
XP_DARWIN
return
ReadParam
(
reader
&
result
-
>
mPort
)
;
#
else
return
true
;
#
endif
}
}
;
}
#
endif
