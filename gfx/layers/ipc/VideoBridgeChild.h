#
ifndef
MOZILLA_GFX_VIDEOBRIDGECHILD_H
#
define
MOZILLA_GFX_VIDEOBRIDGECHILD_H
#
include
"
mozilla
/
layers
/
PVideoBridgeChild
.
h
"
#
include
"
ISurfaceAllocator
.
h
"
#
include
"
TextureForwarder
.
h
"
namespace
mozilla
{
namespace
layers
{
class
VideoBridgeChild
final
:
public
PVideoBridgeChild
public
TextureForwarder
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VideoBridgeChild
override
)
;
static
void
Startup
(
)
;
static
void
Shutdown
(
)
;
static
VideoBridgeChild
*
GetSingleton
(
)
;
PTextureChild
*
AllocPTextureChild
(
const
SurfaceDescriptor
&
aSharedData
const
LayersBackend
&
aLayersBackend
const
TextureFlags
&
aFlags
const
uint64_t
&
aSerial
)
override
;
bool
DeallocPTextureChild
(
PTextureChild
*
actor
)
override
;
bool
AllocUnsafeShmem
(
size_t
aSize
mozilla
:
:
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aShmType
mozilla
:
:
ipc
:
:
Shmem
*
aShmem
)
override
;
bool
AllocShmem
(
size_t
aSize
mozilla
:
:
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aShmType
mozilla
:
:
ipc
:
:
Shmem
*
aShmem
)
override
;
bool
DeallocShmem
(
mozilla
:
:
ipc
:
:
Shmem
&
aShmem
)
override
;
PTextureChild
*
CreateTexture
(
const
SurfaceDescriptor
&
aSharedData
LayersBackend
aLayersBackend
TextureFlags
aFlags
uint64_t
aSerial
)
override
;
base
:
:
ProcessId
GetParentPid
(
)
const
override
{
return
OtherPid
(
)
;
}
MessageLoop
*
GetMessageLoop
(
)
const
override
{
return
mMessageLoop
;
}
void
CancelWaitForRecycle
(
uint64_t
aTextureId
)
override
{
MOZ_ASSERT
(
false
"
NO
RECYCLING
HERE
"
)
;
}
bool
IsSameProcess
(
)
const
override
;
bool
CanSend
(
)
{
return
true
;
}
private
:
VideoBridgeChild
(
)
;
~
VideoBridgeChild
(
)
;
MessageLoop
*
mMessageLoop
;
}
;
}
}
#
endif
