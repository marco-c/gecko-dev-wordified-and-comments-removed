#
ifndef
gfx_layers_ipc_VideoBridgeParent_h_
#
define
gfx_layers_ipc_VideoBridgeParent_h_
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
#
include
"
mozilla
/
layers
/
PVideoBridgeParent
.
h
"
namespace
mozilla
{
namespace
layers
{
enum
class
VideoBridgeSource
:
uint8_t
;
class
CompositorThreadHolder
;
class
VideoBridgeParent
final
:
public
PVideoBridgeParent
public
HostIPCAllocator
public
mozilla
:
:
ipc
:
:
IShmemAllocator
{
public
:
~
VideoBridgeParent
(
)
;
static
VideoBridgeParent
*
GetSingleton
(
const
Maybe
<
VideoBridgeSource
>
&
aSource
)
;
static
void
Open
(
Endpoint
<
PVideoBridgeParent
>
&
&
aEndpoint
VideoBridgeSource
aSource
)
;
static
void
Shutdown
(
)
;
static
void
UnregisterExternalImages
(
)
;
TextureHost
*
LookupTexture
(
uint64_t
aSerial
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
PTextureParent
*
AllocPTextureParent
(
const
SurfaceDescriptor
&
aSharedData
ReadLockDescriptor
&
aReadLock
const
LayersBackend
&
aLayersBackend
const
TextureFlags
&
aFlags
const
uint64_t
&
aSerial
)
;
bool
DeallocPTextureParent
(
PTextureParent
*
actor
)
;
base
:
:
ProcessId
GetChildProcessId
(
)
override
{
return
OtherPid
(
)
;
}
void
NotifyNotUsed
(
PTextureParent
*
aTexture
uint64_t
aTransactionId
)
override
;
void
SendAsyncMessage
(
const
nsTArray
<
AsyncParentMessageData
>
&
aMessage
)
override
;
IShmemAllocator
*
AsShmemAllocator
(
)
override
{
return
this
;
}
bool
IsSameProcess
(
)
const
override
;
bool
IPCOpen
(
)
const
override
{
return
!
mClosed
;
}
bool
AllocShmem
(
size_t
aSize
ipc
:
:
Shmem
*
aShmem
)
override
;
bool
AllocUnsafeShmem
(
size_t
aSize
ipc
:
:
Shmem
*
aShmem
)
override
;
bool
DeallocShmem
(
ipc
:
:
Shmem
&
aShmem
)
override
;
private
:
explicit
VideoBridgeParent
(
VideoBridgeSource
aSource
)
;
void
Bind
(
Endpoint
<
PVideoBridgeParent
>
&
&
aEndpoint
)
;
void
ActorDealloc
(
)
override
;
void
ReleaseCompositorThread
(
)
;
void
DoUnregisterExternalImages
(
)
;
RefPtr
<
VideoBridgeParent
>
mSelfRef
;
RefPtr
<
CompositorThreadHolder
>
mCompositorThreadHolder
;
std
:
:
map
<
uint64_t
PTextureParent
*
>
mTextureMap
;
bool
mClosed
;
}
;
}
}
#
endif
