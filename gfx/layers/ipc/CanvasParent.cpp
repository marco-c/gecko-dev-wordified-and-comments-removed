#
include
"
CanvasParent
.
h
"
#
include
"
base
/
thread
.
h
"
#
include
"
mozilla
/
layers
/
SourceSurfaceSharedData
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
SharedThreadPool
.
h
"
#
include
"
prsystem
.
h
"
#
if
defined
(
XP_WIN
)
#
include
"
mozilla
/
gfx
/
DeviceManagerDx
.
h
"
#
include
"
mozilla
/
layers
/
DeviceAttachmentsD3D11
.
h
"
#
endif
bool
NS_IsInCanvasThread
(
)
{
return
mozilla
:
:
layers
:
:
CanvasParent
:
:
IsInCanvasThread
(
)
;
}
namespace
mozilla
{
namespace
layers
{
static
base
:
:
Thread
*
sCanvasThread
=
nullptr
;
static
StaticRefPtr
<
nsIThreadPool
>
sCanvasWorkers
;
static
bool
sShuttingDown
=
false
;
static
MessageLoop
*
CanvasPlaybackLoop
(
)
{
if
(
!
sCanvasThread
&
&
!
sShuttingDown
)
{
MOZ_ASSERT
(
NS_IsInCompositorThread
(
)
)
;
base
:
:
Thread
*
canvasThread
=
new
base
:
:
Thread
(
"
Canvas
"
)
;
if
(
canvasThread
-
>
Start
(
)
)
{
sCanvasThread
=
canvasThread
;
}
}
return
sCanvasThread
?
sCanvasThread
-
>
message_loop
(
)
:
nullptr
;
}
already_AddRefed
<
CanvasParent
>
CanvasParent
:
:
Create
(
ipc
:
:
Endpoint
<
PCanvasParent
>
&
&
aEndpoint
)
{
MOZ_ASSERT
(
NS_IsInCompositorThread
(
)
)
;
if
(
sShuttingDown
)
{
return
nullptr
;
}
RefPtr
<
CanvasParent
>
canvasParent
=
new
CanvasParent
(
)
;
if
(
CanvasPlaybackLoop
(
)
-
>
IsAcceptingTasks
(
)
)
{
RefPtr
<
Runnable
>
runnable
=
NewRunnableMethod
<
Endpoint
<
PCanvasParent
>
&
&
>
(
"
CanvasParent
:
:
Bind
"
canvasParent
&
CanvasParent
:
:
Bind
std
:
:
move
(
aEndpoint
)
)
;
CanvasPlaybackLoop
(
)
-
>
PostTask
(
runnable
.
forget
(
)
)
;
}
return
do_AddRef
(
canvasParent
)
;
}
bool
CanvasParent
:
:
IsInCanvasThread
(
)
{
return
(
sCanvasWorkers
&
&
sCanvasWorkers
-
>
IsOnCurrentThread
(
)
)
|
|
(
sCanvasThread
&
&
sCanvasThread
-
>
thread_id
(
)
=
=
PlatformThread
:
:
CurrentId
(
)
)
;
}
static
already_AddRefed
<
nsIThreadPool
>
GetCanvasWorkers
(
)
{
if
(
!
sCanvasWorkers
&
&
!
sShuttingDown
)
{
uint32_t
threadLimit
=
std
:
:
max
(
2
PR_GetNumberOfProcessors
(
)
/
2
)
;
sCanvasWorkers
=
SharedThreadPool
:
:
Get
(
NS_LITERAL_CSTRING
(
"
CanvasWorkers
"
)
threadLimit
)
;
}
return
do_AddRef
(
sCanvasWorkers
)
;
}
void
CanvasParent
:
:
Shutdown
(
)
{
sShuttingDown
=
true
;
if
(
sCanvasThread
)
{
sCanvasThread
-
>
Stop
(
)
;
delete
sCanvasThread
;
sCanvasThread
=
nullptr
;
}
if
(
sCanvasWorkers
)
{
sCanvasWorkers
-
>
Shutdown
(
)
;
sCanvasWorkers
=
nullptr
;
}
}
CanvasParent
:
:
CanvasParent
(
)
{
}
CanvasParent
:
:
~
CanvasParent
(
)
{
}
void
CanvasParent
:
:
Bind
(
Endpoint
<
PCanvasParent
>
&
&
aEndpoint
)
{
if
(
!
aEndpoint
.
Bind
(
this
)
)
{
return
;
}
mSelfRef
=
this
;
}
mozilla
:
:
ipc
:
:
IPCResult
CanvasParent
:
:
RecvCreateTranslator
(
const
TextureType
&
aTextureType
const
ipc
:
:
SharedMemoryBasic
:
:
Handle
&
aReadHandle
const
CrossProcessSemaphoreHandle
&
aReaderSem
const
CrossProcessSemaphoreHandle
&
aWriterSem
)
{
mTranslator
=
CanvasTranslator
:
:
Create
(
aTextureType
aReadHandle
aReaderSem
aWriterSem
)
;
return
RecvResumeTranslation
(
)
;
}
ipc
:
:
IPCResult
CanvasParent
:
:
RecvResumeTranslation
(
)
{
MOZ_ASSERT
(
mTranslator
)
;
if
(
!
mTranslator
-
>
IsValid
(
)
)
{
return
IPC_FAIL
(
this
"
Canvas
Translation
failed
.
"
)
;
}
PostStartTranslationTask
(
nsIThread
:
:
DISPATCH_NORMAL
)
;
return
IPC_OK
(
)
;
}
void
CanvasParent
:
:
PostStartTranslationTask
(
uint32_t
aDispatchFlags
)
{
if
(
sShuttingDown
)
{
return
;
}
RefPtr
<
nsIThreadPool
>
canvasWorkers
=
GetCanvasWorkers
(
)
;
RefPtr
<
Runnable
>
runnable
=
NewRunnableMethod
(
"
CanvasParent
:
:
StartTranslation
"
this
&
CanvasParent
:
:
StartTranslation
)
;
canvasWorkers
-
>
Dispatch
(
runnable
.
forget
(
)
aDispatchFlags
)
;
}
void
CanvasParent
:
:
StartTranslation
(
)
{
if
(
!
mTranslator
-
>
TranslateRecording
(
)
)
{
PostStartTranslationTask
(
nsIThread
:
:
DISPATCH_AT_END
)
;
}
}
UniquePtr
<
SurfaceDescriptor
>
CanvasParent
:
:
LookupSurfaceDescriptorForClientDrawTarget
(
const
uintptr_t
aDrawTarget
)
{
return
mTranslator
-
>
WaitForSurfaceDescriptor
(
reinterpret_cast
<
void
*
>
(
aDrawTarget
)
)
;
}
void
CanvasParent
:
:
DeallocPCanvasParent
(
)
{
mSelfRef
=
nullptr
;
}
}
}
