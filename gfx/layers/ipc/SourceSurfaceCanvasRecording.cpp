#
include
"
SourceSurfaceCanvasRecording
.
h
"
#
include
"
mozilla
/
gfx
/
CanvasManagerChild
.
h
"
#
include
"
mozilla
/
layers
/
CanvasChild
.
h
"
#
include
"
mozilla
/
layers
/
CanvasDrawEventRecorder
.
h
"
#
include
"
RecordedCanvasEventImpl
.
h
"
namespace
mozilla
:
:
layers
{
SourceSurfaceCanvasRecording
:
:
SourceSurfaceCanvasRecording
(
int64_t
aTextureId
const
RefPtr
<
gfx
:
:
SourceSurface
>
&
aRecordedSuface
CanvasChild
*
aCanvasChild
const
RefPtr
<
CanvasDrawEventRecorder
>
&
aRecorder
)
:
mTextureId
(
aTextureId
)
mRecordedSurface
(
aRecordedSuface
)
mCanvasChild
(
aCanvasChild
)
mRecorder
(
aRecorder
)
{
}
SourceSurfaceCanvasRecording
:
:
~
SourceSurfaceCanvasRecording
(
)
{
if
(
!
mRecorder
)
{
return
;
}
if
(
IsOnOwningThread
(
)
)
{
DestroyOnOwningThread
(
)
;
return
;
}
ReferencePtr
surfaceAlias
=
this
;
mRecorder
-
>
AddPendingDeletion
(
[
recorder
=
std
:
:
move
(
mRecorder
)
surfaceAlias
aliasedSurface
=
std
:
:
move
(
mRecordedSurface
)
canvasChild
=
std
:
:
move
(
mCanvasChild
)
]
(
)
-
>
void
{
recorder
-
>
UntrackDestroyedRecordedSurface
(
surfaceAlias
)
;
recorder
-
>
RemoveStoredObject
(
surfaceAlias
)
;
recorder
-
>
RecordEvent
(
RecordedRemoveSurfaceAlias
(
surfaceAlias
)
)
;
}
)
;
}
void
SourceSurfaceCanvasRecording
:
:
Init
(
)
{
MOZ_ASSERT
(
mRecordedSurface
)
;
MOZ_ASSERT
(
mCanvasChild
)
;
MOZ_ASSERT
(
mRecorder
)
;
mRecorder
-
>
TrackRecordedSurface
(
this
)
;
mRecorder
-
>
AddStoredObject
(
this
)
;
mRecorder
-
>
RecordEvent
(
RecordedAddSurfaceAlias
(
this
mRecordedSurface
)
)
;
}
void
SourceSurfaceCanvasRecording
:
:
DestroyOnOwningThread
(
)
{
if
(
mRecorder
)
{
ReferencePtr
surfaceAlias
=
this
;
mRecorder
-
>
UntrackRecordedSurface
(
this
)
;
mRecorder
-
>
RemoveStoredObject
(
surfaceAlias
)
;
mRecorder
-
>
RecordEvent
(
RecordedRemoveSurfaceAlias
(
surfaceAlias
)
)
;
mRecorder
=
nullptr
;
}
mRecordedSurface
=
nullptr
;
mCanvasChild
=
nullptr
;
}
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
SourceSurfaceCanvasRecording
:
:
GetDataSurface
(
)
{
EnsureDataSurfaceOnOwningThread
(
)
;
return
do_AddRef
(
mDataSourceSurface
)
;
}
bool
SourceSurfaceCanvasRecording
:
:
IsOnOwningThread
(
)
const
{
return
mCanvasChild
-
>
IsOnOwningThread
(
)
;
}
void
SourceSurfaceCanvasRecording
:
:
EnsureDataSurfaceOnOwningThread
(
)
{
if
(
mDataSourceSurface
)
{
return
;
}
if
(
IsOnOwningThread
(
)
)
{
mDataSourceSurface
=
mCanvasChild
-
>
GetDataSurface
(
mTextureId
mRecordedSurface
mDetached
)
;
}
}
}
