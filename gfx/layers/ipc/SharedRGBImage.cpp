#
include
"
SharedRGBImage
.
h
"
#
include
"
ImageTypes
.
h
"
#
include
"
Shmem
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
layers
/
BufferTexture
.
h
"
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
#
include
"
mozilla
/
layers
/
ImageClient
.
h
"
#
include
"
mozilla
/
layers
/
LayersSurfaces
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
ImageBridgeChild
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRect
.
h
"
#
define
MAX_FRAME_SIZE
(
16
*
1024
*
1024
)
namespace
mozilla
{
namespace
layers
{
already_AddRefed
<
Image
>
CreateSharedRGBImage
(
ImageContainer
*
aImageContainer
gfx
:
:
IntSize
aSize
gfxImageFormat
aImageFormat
)
{
NS_ASSERTION
(
aImageFormat
=
=
gfx
:
:
SurfaceFormat
:
:
A8R8G8B8_UINT32
|
|
aImageFormat
=
=
gfx
:
:
SurfaceFormat
:
:
X8R8G8B8_UINT32
|
|
aImageFormat
=
=
gfx
:
:
SurfaceFormat
:
:
R5G6B5_UINT16
"
RGB
formats
supported
only
"
)
;
if
(
!
aImageContainer
)
{
NS_WARNING
(
"
No
ImageContainer
to
allocate
SharedRGBImage
"
)
;
return
nullptr
;
}
RefPtr
<
SharedRGBImage
>
rgbImage
=
aImageContainer
-
>
CreateSharedRGBImage
(
)
;
if
(
!
rgbImage
)
{
NS_WARNING
(
"
Failed
to
create
SharedRGBImage
"
)
;
return
nullptr
;
}
if
(
!
rgbImage
-
>
Allocate
(
aSize
gfx
:
:
ImageFormatToSurfaceFormat
(
aImageFormat
)
)
)
{
NS_WARNING
(
"
Failed
to
allocate
a
shared
image
"
)
;
return
nullptr
;
}
return
rgbImage
.
forget
(
)
;
}
SharedRGBImage
:
:
SharedRGBImage
(
ImageClient
*
aCompositable
)
:
Image
(
nullptr
ImageFormat
:
:
SHARED_RGB
)
mCompositable
(
aCompositable
)
{
MOZ_COUNT_CTOR
(
SharedRGBImage
)
;
}
SharedRGBImage
:
:
~
SharedRGBImage
(
)
{
MOZ_COUNT_DTOR
(
SharedRGBImage
)
;
if
(
mCompositable
-
>
GetAsyncHandle
(
)
&
&
!
InImageBridgeChildThread
(
)
)
{
ADDREF_MANUALLY
(
mTextureClient
)
;
ImageBridgeChild
:
:
DispatchReleaseTextureClient
(
mTextureClient
)
;
mTextureClient
=
nullptr
;
}
}
bool
SharedRGBImage
:
:
Allocate
(
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
)
{
mSize
=
aSize
;
mTextureClient
=
mCompositable
-
>
CreateBufferTextureClient
(
aFormat
aSize
gfx
:
:
BackendType
:
:
NONE
TextureFlags
:
:
DEFAULT
)
;
return
!
!
mTextureClient
;
}
uint8_t
*
SharedRGBImage
:
:
GetBuffer
(
)
{
MappedTextureData
mapped
;
if
(
mTextureClient
&
&
mTextureClient
-
>
BorrowMappedData
(
mapped
)
)
{
return
mapped
.
data
;
}
return
0
;
}
gfx
:
:
IntSize
SharedRGBImage
:
:
GetSize
(
)
{
return
mSize
;
}
TextureClient
*
SharedRGBImage
:
:
GetTextureClient
(
KnowsCompositor
*
aForwarder
)
{
return
mTextureClient
.
get
(
)
;
}
already_AddRefed
<
gfx
:
:
SourceSurface
>
SharedRGBImage
:
:
GetAsSourceSurface
(
)
{
return
nullptr
;
}
}
}
