#
ifndef
mozilla_layers_CompositorVsyncScheduler_h
#
define
mozilla_layers_CompositorVsyncScheduler_h
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
VsyncDispatcher
.
h
"
#
include
"
mozilla
/
widget
/
CompositorWidget
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
class
CancelableRunnable
;
class
Runnable
;
namespace
gfx
{
class
DrawTarget
;
}
namespace
layers
{
class
CompositorVsyncSchedulerOwner
;
class
CompositorVsyncScheduler
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CompositorVsyncScheduler
)
public
:
explicit
CompositorVsyncScheduler
(
CompositorVsyncSchedulerOwner
*
aVsyncSchedulerOwner
widget
:
:
CompositorWidget
*
aWidget
)
;
bool
NotifyVsync
(
TimeStamp
aVsyncTimestamp
)
;
void
Destroy
(
)
;
void
ScheduleComposition
(
)
;
void
CancelCurrentCompositeTask
(
)
;
bool
NeedsComposite
(
)
;
void
ForceComposeToTarget
(
gfx
:
:
DrawTarget
*
aTarget
const
gfx
:
:
IntRect
*
aRect
)
;
bool
FlushPendingComposite
(
)
;
const
TimeStamp
&
GetLastComposeTime
(
)
const
;
private
:
virtual
~
CompositorVsyncScheduler
(
)
;
void
ScheduleTask
(
already_AddRefed
<
CancelableRunnable
>
)
;
void
PostCompositeTask
(
TimeStamp
aCompositeTimestamp
)
;
void
PostVRTask
(
TimeStamp
aTimestamp
)
;
void
Composite
(
TimeStamp
aVsyncTimestamp
)
;
void
ObserveVsync
(
)
;
void
UnobserveVsync
(
)
;
void
DispatchVREvents
(
TimeStamp
aVsyncTimestamp
)
;
class
Observer
final
:
public
VsyncObserver
{
public
:
explicit
Observer
(
CompositorVsyncScheduler
*
aOwner
)
;
virtual
bool
NotifyVsync
(
TimeStamp
aVsyncTimestamp
)
override
;
void
Destroy
(
)
;
private
:
virtual
~
Observer
(
)
;
Mutex
mMutex
;
CompositorVsyncScheduler
*
mOwner
;
}
;
CompositorVsyncSchedulerOwner
*
mVsyncSchedulerOwner
;
TimeStamp
mLastCompose
;
bool
mAsapScheduling
;
bool
mIsObservingVsync
;
uint32_t
mNeedsComposite
;
int32_t
mVsyncNotificationsSkipped
;
widget
:
:
CompositorWidget
*
mWidget
;
RefPtr
<
CompositorVsyncScheduler
:
:
Observer
>
mVsyncObserver
;
mozilla
:
:
Monitor
mCurrentCompositeTaskMonitor
;
RefPtr
<
CancelableRunnable
>
mCurrentCompositeTask
;
mozilla
:
:
Monitor
mCurrentVRListenerTaskMonitor
;
RefPtr
<
Runnable
>
mCurrentVRListenerTask
;
}
;
}
}
#
endif
