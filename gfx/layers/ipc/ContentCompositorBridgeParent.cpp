#
include
"
mozilla
/
layers
/
ContentCompositorBridgeParent
.
h
"
#
include
<
stdint
.
h
>
#
include
"
LayerTransactionParent
.
h
"
#
include
"
apz
/
src
/
APZCTreeManager
.
h
"
#
include
"
base
/
message_loop
.
h
"
#
include
"
base
/
task
.
h
"
#
include
"
base
/
thread
.
h
"
#
include
"
gfxUtils
.
h
"
#
ifdef
XP_WIN
#
include
"
mozilla
/
gfx
/
DeviceManagerDx
.
h
"
#
endif
#
include
"
mozilla
/
ipc
/
Transport
.
h
"
#
include
"
mozilla
/
layers
/
AnimationHelper
.
h
"
#
include
"
mozilla
/
layers
/
APZCTreeManagerParent
.
h
"
#
include
"
mozilla
/
layers
/
APZUpdater
.
h
"
#
include
"
mozilla
/
layers
/
AsyncCompositionManager
.
h
"
#
include
"
mozilla
/
layers
/
CanvasParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositorOptions
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
layers
/
LayerManagerComposite
.
h
"
#
include
"
mozilla
/
layers
/
LayerTreeOwnerTracker
.
h
"
#
include
"
mozilla
/
layers
/
PLayerTransactionParent
.
h
"
#
include
"
mozilla
/
layers
/
RemoteContentController
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
AsyncImagePipelineManager
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
ifdef
MOZ_GECKO_PROFILER
#
include
"
ProfilerMarkerPayload
.
h
"
#
endif
using
namespace
std
;
namespace
mozilla
{
namespace
layers
{
typedef
map
<
LayersId
CompositorBridgeParent
:
:
LayerTreeState
>
LayerTreeMap
;
extern
LayerTreeMap
sIndirectLayerTrees
;
extern
StaticAutoPtr
<
mozilla
:
:
Monitor
>
sIndirectLayerTreesLock
;
void
UpdateIndirectTree
(
LayersId
aId
Layer
*
aRoot
const
TargetConfig
&
aTargetConfig
)
;
void
EraseLayerState
(
LayersId
aId
)
;
mozilla
:
:
ipc
:
:
IPCResult
ContentCompositorBridgeParent
:
:
RecvRequestNotifyAfterRemotePaint
(
)
{
mNotifyAfterRemotePaint
=
true
;
return
IPC_OK
(
)
;
}
void
ContentCompositorBridgeParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mCanSend
=
false
;
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
layers
:
:
ContentCompositorBridgeParent
:
:
DeferredDestroy
"
this
&
ContentCompositorBridgeParent
:
:
DeferredDestroy
)
)
;
}
PLayerTransactionParent
*
ContentCompositorBridgeParent
:
:
AllocPLayerTransactionParent
(
const
nsTArray
<
LayersBackend
>
&
const
LayersId
&
aId
)
{
MOZ_ASSERT
(
aId
.
IsValid
(
)
)
;
if
(
!
LayerTreeOwnerTracker
:
:
Get
(
)
-
>
IsMapped
(
aId
OtherPid
(
)
)
)
{
NS_ERROR
(
"
Unexpected
layers
id
in
AllocPLayerTransactionParent
;
dropping
"
"
message
.
.
.
"
)
;
return
nullptr
;
}
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
nullptr
;
LayerTreeMap
:
:
iterator
itr
=
sIndirectLayerTrees
.
find
(
aId
)
;
if
(
sIndirectLayerTrees
.
end
(
)
!
=
itr
)
{
state
=
&
itr
-
>
second
;
}
if
(
state
&
&
state
-
>
mLayerManager
)
{
state
-
>
mContentCompositorBridgeParent
=
this
;
HostLayerManager
*
lm
=
state
-
>
mLayerManager
;
CompositorAnimationStorage
*
animStorage
=
state
-
>
mParent
?
state
-
>
mParent
-
>
GetAnimationStorage
(
)
:
nullptr
;
TimeDuration
vsyncRate
=
state
-
>
mParent
?
state
-
>
mParent
-
>
GetVsyncInterval
(
)
:
TimeDuration
(
)
;
LayerTransactionParent
*
p
=
new
LayerTransactionParent
(
lm
this
animStorage
aId
vsyncRate
)
;
p
-
>
AddIPDLReference
(
)
;
sIndirectLayerTrees
[
aId
]
.
mLayerTree
=
p
;
return
p
;
}
NS_WARNING
(
"
Created
child
without
a
matching
parent
?
"
)
;
LayerTransactionParent
*
p
=
new
LayerTransactionParent
(
nullptr
this
nullptr
aId
TimeDuration
(
)
)
;
p
-
>
AddIPDLReference
(
)
;
return
p
;
}
bool
ContentCompositorBridgeParent
:
:
DeallocPLayerTransactionParent
(
PLayerTransactionParent
*
aLayers
)
{
LayerTransactionParent
*
slp
=
static_cast
<
LayerTransactionParent
*
>
(
aLayers
)
;
EraseLayerState
(
slp
-
>
GetId
(
)
)
;
static_cast
<
LayerTransactionParent
*
>
(
aLayers
)
-
>
ReleaseIPDLReference
(
)
;
return
true
;
}
PAPZCTreeManagerParent
*
ContentCompositorBridgeParent
:
:
AllocPAPZCTreeManagerParent
(
const
LayersId
&
aLayersId
)
{
if
(
!
LayerTreeOwnerTracker
:
:
Get
(
)
-
>
IsMapped
(
aLayersId
OtherPid
(
)
)
)
{
NS_ERROR
(
"
Unexpected
layers
id
in
AllocPAPZCTreeManagerParent
;
dropping
"
"
message
.
.
.
"
)
;
return
nullptr
;
}
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
CompositorBridgeParent
:
:
LayerTreeState
&
state
=
sIndirectLayerTrees
[
aLayersId
]
;
if
(
!
state
.
mParent
)
{
LayersId
dummyId
{
0
}
;
RefPtr
<
APZCTreeManager
>
temp
=
new
APZCTreeManager
(
dummyId
)
;
RefPtr
<
APZUpdater
>
tempUpdater
=
new
APZUpdater
(
temp
false
)
;
tempUpdater
-
>
ClearTree
(
dummyId
)
;
return
new
APZCTreeManagerParent
(
WRRootId
(
aLayersId
gfxUtils
:
:
GetContentRenderRoot
(
)
)
temp
tempUpdater
)
;
}
state
.
mParent
-
>
AllocateAPZCTreeManagerParent
(
lock
WRRootId
(
aLayersId
gfxUtils
:
:
GetContentRenderRoot
(
)
)
state
)
;
return
state
.
mApzcTreeManagerParent
;
}
bool
ContentCompositorBridgeParent
:
:
DeallocPAPZCTreeManagerParent
(
PAPZCTreeManagerParent
*
aActor
)
{
APZCTreeManagerParent
*
parent
=
static_cast
<
APZCTreeManagerParent
*
>
(
aActor
)
;
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
auto
iter
=
sIndirectLayerTrees
.
find
(
parent
-
>
GetLayersId
(
)
)
;
if
(
iter
!
=
sIndirectLayerTrees
.
end
(
)
)
{
CompositorBridgeParent
:
:
LayerTreeState
&
state
=
iter
-
>
second
;
MOZ_ASSERT
(
state
.
mApzcTreeManagerParent
=
=
parent
)
;
state
.
mApzcTreeManagerParent
=
nullptr
;
}
delete
parent
;
return
true
;
}
PAPZParent
*
ContentCompositorBridgeParent
:
:
AllocPAPZParent
(
const
LayersId
&
aLayersId
)
{
if
(
!
LayerTreeOwnerTracker
:
:
Get
(
)
-
>
IsMapped
(
aLayersId
OtherPid
(
)
)
)
{
NS_ERROR
(
"
Unexpected
layers
id
in
AllocPAPZParent
;
dropping
message
.
.
.
"
)
;
return
nullptr
;
}
RemoteContentController
*
controller
=
new
RemoteContentController
(
)
;
controller
-
>
AddRef
(
)
;
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
CompositorBridgeParent
:
:
LayerTreeState
&
state
=
sIndirectLayerTrees
[
aLayersId
]
;
MOZ_ASSERT
(
!
state
.
mController
)
;
state
.
mController
=
controller
;
return
controller
;
}
bool
ContentCompositorBridgeParent
:
:
DeallocPAPZParent
(
PAPZParent
*
aActor
)
{
RemoteContentController
*
controller
=
static_cast
<
RemoteContentController
*
>
(
aActor
)
;
controller
-
>
Release
(
)
;
return
true
;
}
PWebRenderBridgeParent
*
ContentCompositorBridgeParent
:
:
AllocPWebRenderBridgeParent
(
const
wr
:
:
PipelineId
&
aPipelineId
const
LayoutDeviceIntSize
&
aSize
)
{
#
ifndef
MOZ_BUILD_WEBRENDER
MOZ_RELEASE_ASSERT
(
false
)
;
#
endif
LayersId
layersId
=
wr
:
:
AsLayersId
(
aPipelineId
)
;
if
(
!
LayerTreeOwnerTracker
:
:
Get
(
)
-
>
IsMapped
(
layersId
OtherPid
(
)
)
)
{
NS_ERROR
(
"
Unexpected
layers
id
in
AllocPWebRenderBridgeParent
;
dropping
"
"
message
.
.
.
"
)
;
return
nullptr
;
}
RefPtr
<
CompositorBridgeParent
>
cbp
=
nullptr
;
RefPtr
<
WebRenderBridgeParent
>
root
=
nullptr
;
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
MOZ_ASSERT
(
sIndirectLayerTrees
.
find
(
layersId
)
!
=
sIndirectLayerTrees
.
end
(
)
)
;
MOZ_ASSERT
(
sIndirectLayerTrees
[
layersId
]
.
mWrBridge
=
=
nullptr
)
;
cbp
=
sIndirectLayerTrees
[
layersId
]
.
mParent
;
if
(
cbp
)
{
root
=
sIndirectLayerTrees
[
cbp
-
>
RootLayerTreeId
(
)
]
.
mWrBridge
;
}
}
InfallibleTArray
<
RefPtr
<
wr
:
:
WebRenderAPI
>
>
apis
;
bool
cloneSuccess
=
false
;
if
(
root
)
{
cloneSuccess
=
root
-
>
CloneWebRenderAPIs
(
apis
)
;
}
if
(
!
cloneSuccess
)
{
NS_WARNING
(
nsPrintfCString
(
"
Created
child
without
a
matching
parent
?
root
%
p
"
root
.
get
(
)
)
.
get
(
)
)
;
WebRenderBridgeParent
*
parent
=
WebRenderBridgeParent
:
:
CreateDestroyed
(
aPipelineId
)
;
parent
-
>
AddRef
(
)
;
return
parent
;
}
RefPtr
<
AsyncImagePipelineManager
>
holder
=
root
-
>
AsyncImageManager
(
)
;
RefPtr
<
CompositorAnimationStorage
>
animStorage
=
cbp
-
>
GetAnimationStorage
(
)
;
WebRenderBridgeParent
*
parent
=
new
WebRenderBridgeParent
(
this
aPipelineId
nullptr
root
-
>
CompositorScheduler
(
)
std
:
:
move
(
apis
)
std
:
:
move
(
holder
)
std
:
:
move
(
animStorage
)
cbp
-
>
GetVsyncInterval
(
)
)
;
parent
-
>
AddRef
(
)
;
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
sIndirectLayerTrees
[
layersId
]
.
mContentCompositorBridgeParent
=
this
;
sIndirectLayerTrees
[
layersId
]
.
mWrBridge
=
parent
;
}
return
parent
;
}
bool
ContentCompositorBridgeParent
:
:
DeallocPWebRenderBridgeParent
(
PWebRenderBridgeParent
*
aActor
)
{
#
ifndef
MOZ_BUILD_WEBRENDER
MOZ_RELEASE_ASSERT
(
false
)
;
#
endif
WebRenderBridgeParent
*
parent
=
static_cast
<
WebRenderBridgeParent
*
>
(
aActor
)
;
EraseLayerState
(
wr
:
:
AsLayersId
(
parent
-
>
PipelineId
(
)
)
)
;
parent
-
>
Release
(
)
;
return
true
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentCompositorBridgeParent
:
:
RecvNotifyChildCreated
(
const
LayersId
&
child
CompositorOptions
*
aOptions
)
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
for
(
LayerTreeMap
:
:
iterator
it
=
sIndirectLayerTrees
.
begin
(
)
;
it
!
=
sIndirectLayerTrees
.
end
(
)
;
it
+
+
)
{
CompositorBridgeParent
:
:
LayerTreeState
*
lts
=
&
it
-
>
second
;
if
(
lts
-
>
mParent
&
&
lts
-
>
mContentCompositorBridgeParent
=
=
this
)
{
lts
-
>
mParent
-
>
NotifyChildCreated
(
child
)
;
*
aOptions
=
lts
-
>
mParent
-
>
GetOptions
(
)
;
return
IPC_OK
(
)
;
}
}
return
IPC_FAIL_NO_REASON
(
this
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentCompositorBridgeParent
:
:
RecvMapAndNotifyChildCreated
(
const
LayersId
&
child
const
base
:
:
ProcessId
&
pid
CompositorOptions
*
aOptions
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentCompositorBridgeParent
:
:
RecvCheckContentOnlyTDR
(
const
uint32_t
&
sequenceNum
bool
*
isContentOnlyTDR
)
{
*
isContentOnlyTDR
=
false
;
#
ifdef
XP_WIN
gfx
:
:
ContentDeviceData
compositor
;
gfx
:
:
DeviceManagerDx
*
dm
=
gfx
:
:
DeviceManagerDx
:
:
Get
(
)
;
gfx
:
:
D3D11DeviceStatus
status
;
dm
-
>
ExportDeviceInfo
(
&
status
)
;
if
(
sequenceNum
=
=
status
.
sequenceNumber
(
)
&
&
!
dm
-
>
HasDeviceReset
(
)
)
{
*
isContentOnlyTDR
=
true
;
}
#
endif
return
IPC_OK
(
)
;
}
;
void
ContentCompositorBridgeParent
:
:
ShadowLayersUpdated
(
LayerTransactionParent
*
aLayerTree
const
TransactionInfo
&
aInfo
bool
aHitTestUpdate
)
{
LayersId
id
=
aLayerTree
-
>
GetId
(
)
;
MOZ_ASSERT
(
id
.
IsValid
(
)
)
;
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
id
)
;
if
(
!
state
)
{
return
;
}
MOZ_ASSERT
(
state
-
>
mParent
)
;
state
-
>
mParent
-
>
ScheduleRotationOnCompositorThread
(
aInfo
.
targetConfig
(
)
aInfo
.
isFirstPaint
(
)
)
;
Layer
*
shadowRoot
=
aLayerTree
-
>
GetRoot
(
)
;
if
(
shadowRoot
)
{
CompositorBridgeParent
:
:
SetShadowProperties
(
shadowRoot
)
;
}
UpdateIndirectTree
(
id
shadowRoot
aInfo
.
targetConfig
(
)
)
;
state
-
>
mPluginData
=
aInfo
.
plugins
(
)
;
state
-
>
mUpdatedPluginDataAvailable
=
true
;
state
-
>
mParent
-
>
NotifyShadowTreeTransaction
(
id
aInfo
.
isFirstPaint
(
)
aInfo
.
focusTarget
(
)
aInfo
.
scheduleComposite
(
)
aInfo
.
paintSequenceNumber
(
)
aInfo
.
isRepeatTransaction
(
)
aHitTestUpdate
)
;
if
(
mNotifyAfterRemotePaint
)
{
Unused
<
<
SendRemotePaintIsReady
(
)
;
mNotifyAfterRemotePaint
=
false
;
}
if
(
aLayerTree
-
>
ShouldParentObserveEpoch
(
)
)
{
Unused
<
<
state
-
>
mParent
-
>
SendObserveLayersUpdate
(
id
aLayerTree
-
>
GetChildEpoch
(
)
true
)
;
}
auto
endTime
=
TimeStamp
:
:
Now
(
)
;
#
ifdef
MOZ_GECKO_PROFILER
if
(
profiler_is_active
(
)
)
{
class
ContentBuildPayload
:
public
ProfilerMarkerPayload
{
public
:
ContentBuildPayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
)
{
}
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
override
{
StreamCommonProps
(
"
CONTENT_FULL_PAINT_TIME
"
aWriter
aProcessStartTime
aUniqueStacks
)
;
}
}
;
profiler_add_marker_for_thread
(
profiler_current_thread_id
(
)
JS
:
:
ProfilingCategoryPair
:
:
GRAPHICS
"
CONTENT_FULL_PAINT_TIME
"
MakeUnique
<
ContentBuildPayload
>
(
aInfo
.
transactionStart
(
)
endTime
)
)
;
}
#
endif
Telemetry
:
:
Accumulate
(
Telemetry
:
:
CONTENT_FULL_PAINT_TIME
static_cast
<
uint32_t
>
(
(
endTime
-
aInfo
.
transactionStart
(
)
)
.
ToMilliseconds
(
)
)
)
;
RegisterPayloads
(
aLayerTree
aInfo
.
payload
(
)
)
;
aLayerTree
-
>
SetPendingTransactionId
(
aInfo
.
id
(
)
aInfo
.
vsyncId
(
)
aInfo
.
vsyncStart
(
)
aInfo
.
refreshStart
(
)
aInfo
.
transactionStart
(
)
endTime
aInfo
.
containsSVG
(
)
aInfo
.
url
(
)
aInfo
.
fwdTime
(
)
)
;
}
void
ContentCompositorBridgeParent
:
:
DidCompositeLocked
(
LayersId
aId
const
VsyncId
&
aVsyncId
TimeStamp
&
aCompositeStart
TimeStamp
&
aCompositeEnd
)
{
sIndirectLayerTreesLock
-
>
AssertCurrentThreadOwns
(
)
;
if
(
LayerTransactionParent
*
layerTree
=
sIndirectLayerTrees
[
aId
]
.
mLayerTree
)
{
TransactionId
transactionId
=
layerTree
-
>
FlushTransactionId
(
aVsyncId
aCompositeEnd
)
;
if
(
transactionId
.
IsValid
(
)
)
{
Unused
<
<
SendDidComposite
(
aId
transactionId
aCompositeStart
aCompositeEnd
)
;
}
}
else
if
(
sIndirectLayerTrees
[
aId
]
.
mWrBridge
)
{
MOZ_ASSERT
(
false
)
;
}
}
void
ContentCompositorBridgeParent
:
:
ScheduleComposite
(
LayerTransactionParent
*
aLayerTree
)
{
LayersId
id
=
aLayerTree
-
>
GetId
(
)
;
MOZ_ASSERT
(
id
.
IsValid
(
)
)
;
CompositorBridgeParent
*
parent
;
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
parent
=
sIndirectLayerTrees
[
id
]
.
mParent
;
}
if
(
parent
)
{
parent
-
>
ScheduleComposite
(
aLayerTree
)
;
}
}
void
ContentCompositorBridgeParent
:
:
NotifyClearCachedResources
(
LayerTransactionParent
*
aLayerTree
)
{
LayersId
id
=
aLayerTree
-
>
GetId
(
)
;
MOZ_ASSERT
(
id
.
IsValid
(
)
)
;
const
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
id
)
;
if
(
state
&
&
state
-
>
mParent
)
{
Unused
<
<
state
-
>
mParent
-
>
SendObserveLayersUpdate
(
id
aLayerTree
-
>
GetChildEpoch
(
)
false
)
;
}
}
bool
ContentCompositorBridgeParent
:
:
SetTestSampleTime
(
const
LayersId
&
aId
const
TimeStamp
&
aTime
)
{
MOZ_ASSERT
(
aId
.
IsValid
(
)
)
;
const
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
aId
)
;
if
(
!
state
)
{
return
false
;
}
MOZ_ASSERT
(
state
-
>
mParent
)
;
return
state
-
>
mParent
-
>
SetTestSampleTime
(
aId
aTime
)
;
}
void
ContentCompositorBridgeParent
:
:
LeaveTestMode
(
const
LayersId
&
aId
)
{
MOZ_ASSERT
(
aId
.
IsValid
(
)
)
;
const
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
aId
)
;
if
(
!
state
)
{
return
;
}
MOZ_ASSERT
(
state
-
>
mParent
)
;
state
-
>
mParent
-
>
LeaveTestMode
(
aId
)
;
}
void
ContentCompositorBridgeParent
:
:
ApplyAsyncProperties
(
LayerTransactionParent
*
aLayerTree
TransformsToSkip
aSkip
)
{
LayersId
id
=
aLayerTree
-
>
GetId
(
)
;
MOZ_ASSERT
(
id
.
IsValid
(
)
)
;
const
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
id
)
;
if
(
!
state
)
{
return
;
}
MOZ_ASSERT
(
state
-
>
mParent
)
;
state
-
>
mParent
-
>
ApplyAsyncProperties
(
aLayerTree
aSkip
)
;
}
void
ContentCompositorBridgeParent
:
:
SetTestAsyncScrollOffset
(
const
WRRootId
&
aLayersId
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
const
CSSPoint
&
aPoint
)
{
MOZ_ASSERT
(
aLayersId
.
IsValid
(
)
)
;
const
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
aLayersId
.
mLayersId
)
;
if
(
!
state
)
{
return
;
}
MOZ_ASSERT
(
state
-
>
mParent
)
;
state
-
>
mParent
-
>
SetTestAsyncScrollOffset
(
aLayersId
aScrollId
aPoint
)
;
}
void
ContentCompositorBridgeParent
:
:
SetTestAsyncZoom
(
const
WRRootId
&
aLayersId
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
const
LayerToParentLayerScale
&
aZoom
)
{
MOZ_ASSERT
(
aLayersId
.
IsValid
(
)
)
;
const
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
aLayersId
.
mLayersId
)
;
if
(
!
state
)
{
return
;
}
MOZ_ASSERT
(
state
-
>
mParent
)
;
state
-
>
mParent
-
>
SetTestAsyncZoom
(
aLayersId
aScrollId
aZoom
)
;
}
void
ContentCompositorBridgeParent
:
:
FlushApzRepaints
(
const
WRRootId
&
aLayersId
)
{
MOZ_ASSERT
(
aLayersId
.
IsValid
(
)
)
;
const
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
aLayersId
.
mLayersId
)
;
if
(
!
state
|
|
!
state
-
>
mParent
)
{
return
;
}
state
-
>
mParent
-
>
FlushApzRepaints
(
aLayersId
)
;
}
void
ContentCompositorBridgeParent
:
:
GetAPZTestData
(
const
WRRootId
&
aLayersId
APZTestData
*
aOutData
)
{
MOZ_ASSERT
(
aLayersId
.
IsValid
(
)
)
;
const
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
aLayersId
.
mLayersId
)
;
if
(
!
state
|
|
!
state
-
>
mParent
)
{
return
;
}
state
-
>
mParent
-
>
GetAPZTestData
(
aLayersId
aOutData
)
;
}
void
ContentCompositorBridgeParent
:
:
SetConfirmedTargetAPZC
(
const
LayersId
&
aLayersId
const
uint64_t
&
aInputBlockId
const
nsTArray
<
SLGuidAndRenderRoot
>
&
aTargets
)
{
MOZ_ASSERT
(
aLayersId
.
IsValid
(
)
)
;
const
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
aLayersId
)
;
if
(
!
state
|
|
!
state
-
>
mParent
)
{
return
;
}
state
-
>
mParent
-
>
SetConfirmedTargetAPZC
(
aLayersId
aInputBlockId
aTargets
)
;
}
AsyncCompositionManager
*
ContentCompositorBridgeParent
:
:
GetCompositionManager
(
LayerTransactionParent
*
aLayerTree
)
{
LayersId
id
=
aLayerTree
-
>
GetId
(
)
;
const
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
id
)
;
if
(
!
state
)
{
return
nullptr
;
}
MOZ_ASSERT
(
state
-
>
mParent
)
;
return
state
-
>
mParent
-
>
GetCompositionManager
(
aLayerTree
)
;
}
void
ContentCompositorBridgeParent
:
:
DeferredDestroy
(
)
{
mSelfRef
=
nullptr
;
}
ContentCompositorBridgeParent
:
:
~
ContentCompositorBridgeParent
(
)
{
MOZ_ASSERT
(
XRE_GetIOMessageLoop
(
)
)
;
}
PTextureParent
*
ContentCompositorBridgeParent
:
:
AllocPTextureParent
(
const
SurfaceDescriptor
&
aSharedData
const
ReadLockDescriptor
&
aReadLock
const
LayersBackend
&
aLayersBackend
const
TextureFlags
&
aFlags
const
LayersId
&
aId
const
uint64_t
&
aSerial
const
wr
:
:
MaybeExternalImageId
&
aExternalImageId
)
{
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
nullptr
;
LayerTreeMap
:
:
iterator
itr
=
sIndirectLayerTrees
.
find
(
aId
)
;
if
(
sIndirectLayerTrees
.
end
(
)
!
=
itr
)
{
state
=
&
itr
-
>
second
;
}
TextureFlags
flags
=
aFlags
;
LayersBackend
actualBackend
=
LayersBackend
:
:
LAYERS_NONE
;
if
(
state
&
&
state
-
>
mLayerManager
)
{
actualBackend
=
state
-
>
mLayerManager
-
>
GetBackendType
(
)
;
}
if
(
!
state
)
{
flags
|
=
TextureFlags
:
:
INVALID_COMPOSITOR
;
}
else
if
(
actualBackend
!
=
LayersBackend
:
:
LAYERS_NONE
&
&
aLayersBackend
!
=
actualBackend
)
{
gfxDevCrash
(
gfx
:
:
LogReason
:
:
PAllocTextureBackendMismatch
)
<
<
"
Texture
backend
is
wrong
"
;
}
return
TextureHost
:
:
CreateIPDLActor
(
this
aSharedData
aReadLock
aLayersBackend
aFlags
aSerial
aExternalImageId
)
;
}
bool
ContentCompositorBridgeParent
:
:
DeallocPTextureParent
(
PTextureParent
*
actor
)
{
return
TextureHost
:
:
DestroyIPDLActor
(
actor
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentCompositorBridgeParent
:
:
RecvInitPCanvasParent
(
Endpoint
<
PCanvasParent
>
&
&
aEndpoint
)
{
MOZ_RELEASE_ASSERT
(
!
mCanvasParent
"
Canvas
Parent
should
only
be
created
once
per
"
"
CrossProcessCompositorBridgeParent
.
"
)
;
mCanvasParent
=
CanvasParent
:
:
Create
(
std
:
:
move
(
aEndpoint
)
)
;
return
IPC_OK
(
)
;
}
UniquePtr
<
SurfaceDescriptor
>
ContentCompositorBridgeParent
:
:
LookupSurfaceDescriptorForClientDrawTarget
(
const
uintptr_t
aDrawTarget
)
{
return
mCanvasParent
-
>
LookupSurfaceDescriptorForClientDrawTarget
(
aDrawTarget
)
;
}
bool
ContentCompositorBridgeParent
:
:
IsSameProcess
(
)
const
{
return
OtherPid
(
)
=
=
base
:
:
GetCurrentProcId
(
)
;
}
void
ContentCompositorBridgeParent
:
:
UpdatePaintTime
(
LayerTransactionParent
*
aLayerTree
const
TimeDuration
&
aPaintTime
)
{
LayersId
id
=
aLayerTree
-
>
GetId
(
)
;
MOZ_ASSERT
(
id
.
IsValid
(
)
)
;
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
id
)
;
if
(
!
state
|
|
!
state
-
>
mParent
)
{
return
;
}
state
-
>
mParent
-
>
UpdatePaintTime
(
aLayerTree
aPaintTime
)
;
}
void
ContentCompositorBridgeParent
:
:
RegisterPayloads
(
LayerTransactionParent
*
aLayerTree
const
nsTArray
<
CompositionPayload
>
&
aPayload
)
{
LayersId
id
=
aLayerTree
-
>
GetId
(
)
;
MOZ_ASSERT
(
id
.
IsValid
(
)
)
;
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
id
)
;
if
(
!
state
|
|
!
state
-
>
mParent
)
{
return
;
}
state
-
>
mParent
-
>
RegisterPayloads
(
aLayerTree
aPayload
)
;
}
void
ContentCompositorBridgeParent
:
:
ObserveLayersUpdate
(
LayersId
aLayersId
LayersObserverEpoch
aEpoch
bool
aActive
)
{
MOZ_ASSERT
(
aLayersId
.
IsValid
(
)
)
;
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
aLayersId
)
;
if
(
!
state
|
|
!
state
-
>
mParent
)
{
return
;
}
Unused
<
<
state
-
>
mParent
-
>
SendObserveLayersUpdate
(
aLayersId
aEpoch
aActive
)
;
}
}
}
