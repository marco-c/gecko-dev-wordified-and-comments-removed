#
ifndef
MOZILLA_LAYERS_LAYERTRANSACTIONPARENT_H
#
define
MOZILLA_LAYERS_LAYERTRANSACTIONPARENT_H
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
CompositableTransactionParent
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ipc
/
SharedMemory
.
h
"
#
include
"
mozilla
/
layers
/
PLayerTransactionParent
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
Shmem
;
}
namespace
layout
{
class
RenderFrameParent
;
}
namespace
layers
{
class
Layer
;
class
HostLayerManager
;
class
ShadowLayerParent
;
class
CompositableParent
;
class
CompositorBridgeParentBase
;
class
LayerTransactionParent
final
:
public
PLayerTransactionParent
public
CompositableParentManager
public
ShmemAllocator
{
typedef
mozilla
:
:
layout
:
:
RenderFrameParent
RenderFrameParent
;
typedef
InfallibleTArray
<
Edit
>
EditArray
;
typedef
InfallibleTArray
<
OpDestroy
>
OpDestroyArray
;
typedef
InfallibleTArray
<
EditReply
>
EditReplyArray
;
typedef
InfallibleTArray
<
PluginWindowData
>
PluginsArray
;
public
:
LayerTransactionParent
(
HostLayerManager
*
aManager
CompositorBridgeParentBase
*
aBridge
uint64_t
aId
)
;
protected
:
~
LayerTransactionParent
(
)
;
public
:
void
Destroy
(
)
;
HostLayerManager
*
layer_manager
(
)
const
{
return
mLayerManager
;
}
uint64_t
GetId
(
)
const
{
return
mId
;
}
Layer
*
GetRoot
(
)
const
{
return
mRoot
;
}
uint64_t
GetChildEpoch
(
)
const
{
return
mChildEpoch
;
}
bool
ShouldParentObserveEpoch
(
)
;
virtual
ShmemAllocator
*
AsShmemAllocator
(
)
override
{
return
this
;
}
virtual
bool
AllocShmem
(
size_t
aSize
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aType
ipc
:
:
Shmem
*
aShmem
)
override
;
virtual
bool
AllocUnsafeShmem
(
size_t
aSize
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aType
ipc
:
:
Shmem
*
aShmem
)
override
;
virtual
void
DeallocShmem
(
ipc
:
:
Shmem
&
aShmem
)
override
;
virtual
bool
IsSameProcess
(
)
const
override
;
const
uint64_t
&
GetPendingTransactionId
(
)
{
return
mPendingTransaction
;
}
void
SetPendingTransactionId
(
uint64_t
aId
)
{
mPendingTransaction
=
aId
;
}
virtual
void
SendAsyncMessage
(
const
InfallibleTArray
<
AsyncParentMessageData
>
&
aMessage
)
override
;
virtual
void
SendPendingAsyncMessages
(
)
override
;
virtual
void
SetAboutToSendAsyncMessages
(
)
override
;
virtual
void
NotifyNotUsed
(
PTextureParent
*
aTexture
uint64_t
aTransactionId
)
override
;
virtual
base
:
:
ProcessId
GetChildProcessId
(
)
override
{
return
OtherPid
(
)
;
}
void
AddPendingCompositorUpdate
(
)
{
mPendingCompositorUpdates
+
+
;
}
void
SetPendingCompositorUpdates
(
uint32_t
aCount
)
{
MOZ_ASSERT
(
mPendingCompositorUpdates
=
=
0
)
;
mPendingCompositorUpdates
=
aCount
;
}
void
AcknowledgeCompositorUpdate
(
)
{
MOZ_ASSERT
(
mPendingCompositorUpdates
>
0
)
;
mPendingCompositorUpdates
-
-
;
}
protected
:
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvShutdown
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvPaintTime
(
const
uint64_t
&
aTransactionId
const
TimeDuration
&
aPaintTime
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdate
(
EditArray
&
&
cset
OpDestroyArray
&
&
aToDestroy
const
uint64_t
&
aFwdTransactionId
const
uint64_t
&
aTransactionId
const
TargetConfig
&
targetConfig
PluginsArray
&
&
aPlugins
const
bool
&
isFirstPaint
const
bool
&
scheduleComposite
const
uint32_t
&
paintSequenceNumber
const
bool
&
isRepeatTransaction
const
mozilla
:
:
TimeStamp
&
aTransactionStart
const
int32_t
&
aPaintSyncId
EditReplyArray
*
reply
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateNoSwap
(
EditArray
&
&
cset
OpDestroyArray
&
&
aToDestroy
const
uint64_t
&
aFwdTransactionId
const
uint64_t
&
aTransactionId
const
TargetConfig
&
targetConfig
PluginsArray
&
&
aPlugins
const
bool
&
isFirstPaint
const
bool
&
scheduleComposite
const
uint32_t
&
paintSequenceNumber
const
bool
&
isRepeatTransaction
const
mozilla
:
:
TimeStamp
&
aTransactionStart
const
int32_t
&
aPaintSyncId
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvSetLayerObserverEpoch
(
const
uint64_t
&
aLayerObserverEpoch
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvReleaseLayer
(
const
LayerHandle
&
aHandle
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvClearCachedResources
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvForceComposite
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvSetTestSampleTime
(
const
TimeStamp
&
aTime
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvLeaveTestMode
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvGetAnimationOpacity
(
const
LayerHandle
&
aLayerHandle
float
*
aOpacity
bool
*
aHasAnimationOpacity
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvGetAnimationTransform
(
const
LayerHandle
&
aLayerHandle
MaybeTransform
*
aTransform
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvSetAsyncScrollOffset
(
const
FrameMetrics
:
:
ViewID
&
aId
const
float
&
aX
const
float
&
aY
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvSetAsyncZoom
(
const
FrameMetrics
:
:
ViewID
&
aId
const
float
&
aValue
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvFlushApzRepaints
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvGetAPZTestData
(
APZTestData
*
aOutData
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestProperty
(
const
nsString
&
aProperty
float
*
aValue
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvSetConfirmedTargetAPZC
(
const
uint64_t
&
aBlockId
nsTArray
<
ScrollableLayerGuid
>
&
&
aTargets
)
override
;
virtual
PCompositableParent
*
AllocPCompositableParent
(
const
TextureInfo
&
aInfo
)
override
;
virtual
bool
DeallocPCompositableParent
(
PCompositableParent
*
actor
)
override
;
virtual
void
ActorDestroy
(
ActorDestroyReason
why
)
override
;
template
<
typename
T
>
bool
BindLayer
(
const
RefPtr
<
Layer
>
&
aLayer
const
T
&
aCreateOp
)
{
return
BindLayerToHandle
(
aLayer
aCreateOp
.
layer
(
)
)
;
}
bool
BindLayerToHandle
(
RefPtr
<
Layer
>
aLayer
const
LayerHandle
&
aHandle
)
;
Layer
*
AsLayer
(
const
LayerHandle
&
aLayer
)
;
bool
Attach
(
Layer
*
aLayer
CompositableHost
*
aCompositable
bool
aIsAsyncVideo
)
;
void
AddIPDLReference
(
)
{
MOZ_ASSERT
(
mIPCOpen
=
=
false
)
;
mIPCOpen
=
true
;
AddRef
(
)
;
}
void
ReleaseIPDLReference
(
)
{
MOZ_ASSERT
(
mIPCOpen
=
=
true
)
;
mIPCOpen
=
false
;
Release
(
)
;
}
friend
class
CompositorBridgeParent
;
friend
class
CrossProcessCompositorBridgeParent
;
friend
class
layout
:
:
RenderFrameParent
;
private
:
RefPtr
<
HostLayerManager
>
mLayerManager
;
CompositorBridgeParentBase
*
mCompositorBridge
;
RefPtr
<
Layer
>
mRoot
;
nsDataHashtable
<
nsUint64HashKey
RefPtr
<
Layer
>
>
mLayerMap
;
uint64_t
mId
;
uint64_t
mChildEpoch
;
uint64_t
mParentEpoch
;
uint64_t
mPendingTransaction
;
uint32_t
mPendingCompositorUpdates
;
bool
mDestroyed
;
bool
mIPCOpen
;
}
;
}
}
#
endif
