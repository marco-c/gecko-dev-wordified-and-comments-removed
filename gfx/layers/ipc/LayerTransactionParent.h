#
ifndef
MOZILLA_LAYERS_LAYERTRANSACTIONPARENT_H
#
define
MOZILLA_LAYERS_LAYERTRANSACTIONPARENT_H
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
CompositableTransactionParent
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ipc
/
SharedMemory
.
h
"
#
include
"
mozilla
/
layers
/
PLayerTransactionParent
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
Shmem
;
}
namespace
layers
{
class
Layer
;
class
HostLayerManager
;
class
ShadowLayerParent
;
class
CompositableParent
;
class
CompositorAnimationStorage
;
class
CompositorBridgeParentBase
;
class
LayerTransactionParent
final
:
public
PLayerTransactionParent
public
CompositableParentManager
public
ShmemAllocator
{
typedef
InfallibleTArray
<
Edit
>
EditArray
;
typedef
InfallibleTArray
<
OpDestroy
>
OpDestroyArray
;
typedef
InfallibleTArray
<
PluginWindowData
>
PluginsArray
;
public
:
LayerTransactionParent
(
HostLayerManager
*
aManager
CompositorBridgeParentBase
*
aBridge
CompositorAnimationStorage
*
aAnimStorage
LayersId
aId
TimeDuration
aVsyncRate
)
;
protected
:
~
LayerTransactionParent
(
)
;
public
:
void
Destroy
(
)
;
void
SetLayerManager
(
HostLayerManager
*
aLayerManager
CompositorAnimationStorage
*
aAnimStorage
)
;
LayersId
GetId
(
)
const
{
return
mId
;
}
Layer
*
GetRoot
(
)
const
{
return
mRoot
;
}
LayersObserverEpoch
GetChildEpoch
(
)
const
{
return
mChildEpoch
;
}
bool
ShouldParentObserveEpoch
(
)
;
ShmemAllocator
*
AsShmemAllocator
(
)
override
{
return
this
;
}
bool
AllocShmem
(
size_t
aSize
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aType
ipc
:
:
Shmem
*
aShmem
)
override
;
bool
AllocUnsafeShmem
(
size_t
aSize
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aType
ipc
:
:
Shmem
*
aShmem
)
override
;
void
DeallocShmem
(
ipc
:
:
Shmem
&
aShmem
)
override
;
bool
IsSameProcess
(
)
const
override
;
const
TransactionId
&
GetPendingTransactionId
(
)
{
return
mPendingTransaction
;
}
void
SetPendingTransactionId
(
TransactionId
aId
const
TimeStamp
&
aRefreshStartTime
const
TimeStamp
&
aTxnStartTime
const
TimeStamp
&
aFwdTime
)
{
mPendingTransaction
=
aId
;
mRefreshStartTime
=
aRefreshStartTime
;
mTxnStartTime
=
aTxnStartTime
;
mFwdTime
=
aFwdTime
;
}
TransactionId
FlushTransactionId
(
TimeStamp
&
aCompositeEnd
)
;
void
SendAsyncMessage
(
const
InfallibleTArray
<
AsyncParentMessageData
>
&
aMessage
)
override
;
void
SendPendingAsyncMessages
(
)
override
;
void
SetAboutToSendAsyncMessages
(
)
override
;
void
NotifyNotUsed
(
PTextureParent
*
aTexture
uint64_t
aTransactionId
)
override
;
base
:
:
ProcessId
GetChildProcessId
(
)
override
{
return
OtherPid
(
)
;
}
protected
:
mozilla
:
:
ipc
:
:
IPCResult
RecvShutdown
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvShutdownSync
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPaintTime
(
const
TransactionId
&
aTransactionId
const
TimeDuration
&
aPaintTime
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdate
(
const
TransactionInfo
&
aInfo
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetLayersObserverEpoch
(
const
LayersObserverEpoch
&
aChildEpoch
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNewCompositable
(
const
CompositableHandle
&
aHandle
const
TextureInfo
&
aInfo
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReleaseLayer
(
const
LayerHandle
&
aHandle
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReleaseCompositable
(
const
CompositableHandle
&
aHandle
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvClearCachedResources
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvScheduleComposite
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetTestSampleTime
(
const
TimeStamp
&
aTime
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvLeaveTestMode
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetAnimationValue
(
const
uint64_t
&
aCompositorAnimationsId
OMTAValue
*
aValue
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetTransform
(
const
LayerHandle
&
aHandle
MaybeTransform
*
aTransform
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetAsyncScrollOffset
(
const
ScrollableLayerGuid
:
:
ViewID
&
aId
const
float
&
aX
const
float
&
aY
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetAsyncZoom
(
const
ScrollableLayerGuid
:
:
ViewID
&
aId
const
float
&
aValue
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvFlushApzRepaints
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetAPZTestData
(
APZTestData
*
aOutData
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestProperty
(
const
nsString
&
aProperty
float
*
aValue
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetConfirmedTargetAPZC
(
const
uint64_t
&
aBlockId
nsTArray
<
ScrollableLayerGuid
>
&
&
aTargets
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRecordPaintTimes
(
const
PaintTiming
&
aTiming
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetTextureFactoryIdentifier
(
TextureFactoryIdentifier
*
aIdentifier
)
override
;
bool
SetLayerAttributes
(
const
OpSetLayerAttributes
&
aOp
)
;
void
ActorDestroy
(
ActorDestroyReason
why
)
override
;
template
<
typename
T
>
bool
BindLayer
(
const
RefPtr
<
Layer
>
&
aLayer
const
T
&
aCreateOp
)
{
return
BindLayerToHandle
(
aLayer
aCreateOp
.
layer
(
)
)
;
}
bool
BindLayerToHandle
(
RefPtr
<
Layer
>
aLayer
const
LayerHandle
&
aHandle
)
;
Layer
*
AsLayer
(
const
LayerHandle
&
aLayer
)
;
bool
Attach
(
Layer
*
aLayer
CompositableHost
*
aCompositable
bool
aIsAsyncVideo
)
;
void
AddIPDLReference
(
)
{
MOZ_ASSERT
(
mIPCOpen
=
=
false
)
;
mIPCOpen
=
true
;
AddRef
(
)
;
}
void
ReleaseIPDLReference
(
)
{
MOZ_ASSERT
(
mIPCOpen
=
=
true
)
;
mIPCOpen
=
false
;
Release
(
)
;
}
friend
class
CompositorBridgeParent
;
friend
class
CrossProcessCompositorBridgeParent
;
private
:
void
UpdateHitTestingTree
(
Layer
*
aLayer
const
char
*
aWhy
)
{
mUpdateHitTestingTree
=
true
;
}
private
:
RefPtr
<
HostLayerManager
>
mLayerManager
;
CompositorBridgeParentBase
*
mCompositorBridge
;
RefPtr
<
CompositorAnimationStorage
>
mAnimStorage
;
RefPtr
<
Layer
>
mRoot
;
nsRefPtrHashtable
<
nsUint64HashKey
Layer
>
mLayerMap
;
LayersId
mId
;
LayersObserverEpoch
mChildEpoch
;
LayersObserverEpoch
mParentEpoch
;
TimeDuration
mVsyncRate
;
TransactionId
mPendingTransaction
;
TimeStamp
mRefreshStartTime
;
TimeStamp
mTxnStartTime
;
TimeStamp
mFwdTime
;
bool
mDestroyed
;
bool
mIPCOpen
;
bool
mUpdateHitTestingTree
;
}
;
}
}
#
endif
