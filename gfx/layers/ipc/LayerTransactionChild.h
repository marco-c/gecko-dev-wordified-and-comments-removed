#
ifndef
MOZILLA_LAYERS_LAYERTRANSACTIONCHILD_H
#
define
MOZILLA_LAYERS_LAYERTRANSACTIONCHILD_H
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
layers
/
PLayerTransactionChild
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
namespace
mozilla
{
namespace
layers
{
class
ShadowLayerForwarder
;
class
LayerTransactionChild
:
public
PLayerTransactionChild
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
LayerTransactionChild
)
void
Destroy
(
)
;
bool
IPCOpen
(
)
const
{
return
mozilla
:
:
ipc
:
:
IProtocol
:
:
IPCOpen
(
)
&
&
!
mDestroyed
;
}
bool
IsDestroyed
(
)
const
{
return
mDestroyed
;
}
void
SetForwarder
(
ShadowLayerForwarder
*
aForwarder
)
{
mForwarder
=
aForwarder
;
}
LayersId
GetId
(
)
const
{
return
mId
;
}
void
MarkDestroyed
(
)
{
mDestroyed
=
true
;
}
protected
:
explicit
LayerTransactionChild
(
const
LayersId
&
aId
)
:
mForwarder
(
nullptr
)
mDestroyed
(
false
)
mId
(
aId
)
{
}
~
LayerTransactionChild
(
)
{
}
void
ActorDestroy
(
ActorDestroyReason
why
)
override
;
void
AddIPDLReference
(
)
{
AddRef
(
)
;
}
void
ReleaseIPDLReference
(
)
{
Release
(
)
;
}
friend
class
CompositorBridgeChild
;
ShadowLayerForwarder
*
mForwarder
;
bool
mDestroyed
;
LayersId
mId
;
}
;
}
}
#
endif
