#
include
<
unistd
.
h
>
#
include
"
GonkNativeHandle
.
h
"
using
namespace
mozilla
:
:
layers
;
namespace
mozilla
{
namespace
layers
{
GonkNativeHandle
:
:
GonkNativeHandle
(
)
:
mNhObj
(
new
NhObj
(
)
)
{
}
GonkNativeHandle
:
:
GonkNativeHandle
(
NhObj
*
aNhObj
)
:
mNhObj
(
aNhObj
)
{
MOZ_ASSERT
(
aNhObj
)
;
}
void
GonkNativeHandle
:
:
TransferToAnother
(
GonkNativeHandle
&
aHandle
)
{
aHandle
.
mNhObj
=
this
-
>
GetAndResetNhObj
(
)
;
}
already_AddRefed
<
GonkNativeHandle
:
:
NhObj
>
GonkNativeHandle
:
:
GetAndResetNhObj
(
)
{
RefPtr
<
NhObj
>
nhObj
=
mNhObj
;
mNhObj
=
new
NhObj
(
)
;
return
nhObj
.
forget
(
)
;
}
already_AddRefed
<
GonkNativeHandle
:
:
NhObj
>
GonkNativeHandle
:
:
GetDupNhObj
(
)
{
RefPtr
<
NhObj
>
nhObj
;
if
(
IsValid
(
)
)
{
native_handle
*
nativeHandle
=
native_handle_create
(
mNhObj
-
>
mHandle
-
>
numFds
mNhObj
-
>
mHandle
-
>
numInts
)
;
for
(
int
i
=
0
;
i
<
mNhObj
-
>
mHandle
-
>
numFds
;
+
+
i
)
{
nativeHandle
-
>
data
[
i
]
=
dup
(
mNhObj
-
>
mHandle
-
>
data
[
i
]
)
;
}
memcpy
(
nativeHandle
-
>
data
+
nativeHandle
-
>
numFds
mNhObj
-
>
mHandle
-
>
data
+
mNhObj
-
>
mHandle
-
>
numFds
sizeof
(
int
)
*
mNhObj
-
>
mHandle
-
>
numInts
)
;
nhObj
=
new
GonkNativeHandle
:
:
NhObj
(
nativeHandle
)
;
}
else
{
nhObj
=
new
GonkNativeHandle
:
:
NhObj
(
)
;
}
return
nhObj
.
forget
(
)
;
}
}
}
