#
ifndef
mozilla_CompositorLRU_h
#
define
mozilla_CompositorLRU_h
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTArray
.
h
"
#
include
<
utility
>
namespace
mozilla
{
namespace
layers
{
class
PCompositorBridgeParent
;
class
CompositorLRU
final
{
typedef
std
:
:
pair
<
PCompositorBridgeParent
*
uint64_t
>
CompositorLayerPair
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CompositorLRU
)
static
void
Init
(
)
;
static
CompositorLRU
*
GetSingleton
(
)
;
void
Add
(
PCompositorBridgeParent
*
aCompositor
const
uint64_t
&
id
)
;
void
Remove
(
PCompositorBridgeParent
*
aCompositor
const
uint64_t
&
id
)
;
void
Remove
(
PCompositorBridgeParent
*
aCompositor
)
;
private
:
static
StaticRefPtr
<
CompositorLRU
>
sSingleton
;
CompositorLRU
(
)
;
~
CompositorLRU
(
)
;
uint32_t
mLRUSize
;
nsTArray
<
CompositorLayerPair
>
mLRU
;
}
;
}
}
#
endif
