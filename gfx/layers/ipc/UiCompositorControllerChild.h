#
ifndef
include_gfx_ipc_UiCompositorControllerChild_h
#
define
include_gfx_ipc_UiCompositorControllerChild_h
#
include
"
mozilla
/
layers
/
PUiCompositorControllerChild
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
#
include
"
mozilla
/
layers
/
UiCompositorControllerParent
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsThread
.
h
"
#
ifdef
MOZ_WIDGET_ANDROID
#
include
"
SurfaceTexture
.
h
"
#
include
"
mozilla
/
java
/
CompositorSurfaceManagerWrappers
.
h
"
#
endif
class
nsBaseWidget
;
namespace
mozilla
{
namespace
layers
{
class
UiCompositorControllerChild
final
:
protected
PUiCompositorControllerChild
{
friend
class
PUiCompositorControllerChild
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
UiCompositorControllerChild
final
)
static
RefPtr
<
UiCompositorControllerChild
>
CreateForSameProcess
(
const
LayersId
&
aRootLayerTreeId
nsBaseWidget
*
aWidget
)
;
static
RefPtr
<
UiCompositorControllerChild
>
CreateForGPUProcess
(
const
uint64_t
&
aProcessToken
Endpoint
<
PUiCompositorControllerChild
>
&
&
aEndpoint
nsBaseWidget
*
aWidget
)
;
bool
Pause
(
)
;
bool
Resume
(
)
;
bool
ResumeAndResize
(
const
int32_t
&
aX
const
int32_t
&
aY
const
int32_t
&
aHeight
const
int32_t
&
aWidth
)
;
bool
InvalidateAndRender
(
)
;
bool
SetMaxToolbarHeight
(
const
int32_t
&
aHeight
)
;
bool
SetFixedBottomOffset
(
int32_t
aOffset
)
;
bool
ToolbarAnimatorMessageFromUI
(
const
int32_t
&
aMessage
)
;
bool
SetDefaultClearColor
(
const
uint32_t
&
aColor
)
;
bool
RequestScreenPixels
(
)
;
bool
EnableLayerUpdateNotifications
(
const
bool
&
aEnable
)
;
void
Destroy
(
)
;
bool
DeallocPixelBuffer
(
Shmem
&
aMem
)
;
#
ifdef
MOZ_WIDGET_ANDROID
void
SetCompositorSurfaceManager
(
java
:
:
CompositorSurfaceManager
:
:
Param
aCompositorSurfaceManager
)
;
void
OnCompositorSurfaceChanged
(
int32_t
aWidgetId
java
:
:
sdk
:
:
Surface
:
:
Param
aSurface
)
;
#
endif
protected
:
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
void
ProcessingError
(
Result
aCode
const
char
*
aReason
)
override
;
void
HandleFatalError
(
const
char
*
aMsg
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvToolbarAnimatorMessageFromCompositor
(
const
int32_t
&
aMessage
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRootFrameMetrics
(
const
ScreenPoint
&
aScrollOffset
const
CSSToScreenScale
&
aZoom
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvScreenPixels
(
Shmem
&
&
aMem
const
ScreenIntSize
&
aSize
bool
aNeedsYFlip
)
;
private
:
explicit
UiCompositorControllerChild
(
const
uint64_t
&
aProcessToken
nsBaseWidget
*
aWidget
)
;
virtual
~
UiCompositorControllerChild
(
)
;
void
OpenForSameProcess
(
)
;
void
OpenForGPUProcess
(
Endpoint
<
PUiCompositorControllerChild
>
&
&
aEndpoint
)
;
void
SendCachedValues
(
)
;
bool
mIsOpen
;
uint64_t
mProcessToken
;
Maybe
<
gfx
:
:
IntRect
>
mResize
;
Maybe
<
int32_t
>
mMaxToolbarHeight
;
Maybe
<
uint32_t
>
mDefaultClearColor
;
Maybe
<
bool
>
mLayerUpdateEnabled
;
RefPtr
<
nsBaseWidget
>
mWidget
;
RefPtr
<
UiCompositorControllerParent
>
mParent
;
#
ifdef
MOZ_WIDGET_ANDROID
mozilla
:
:
java
:
:
CompositorSurfaceManager
:
:
GlobalRef
mCompositorSurfaceManager
;
#
endif
}
;
}
}
#
endif
