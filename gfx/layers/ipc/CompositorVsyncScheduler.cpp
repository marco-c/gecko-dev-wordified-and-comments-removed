#
include
"
mozilla
/
layers
/
CompositorVsyncScheduler
.
h
"
#
include
<
stdio
.
h
>
#
include
<
stdint
.
h
>
#
include
"
base
/
task
.
h
"
#
include
"
base
/
thread
.
h
"
#
include
"
gfxPlatform
.
h
"
#
ifdef
MOZ_WIDGET_GTK
#
include
"
gfxPlatformGtk
.
h
"
#
endif
#
include
"
mozilla
/
AutoRestore
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
layers
/
CompositorVsyncSchedulerOwner
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
VsyncDispatcher
.
h
"
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
#
include
"
VsyncSource
.
h
"
#
endif
#
include
"
mozilla
/
widget
/
CompositorWidget
.
h
"
#
include
"
VRManager
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
gfx
;
using
namespace
std
;
CompositorVsyncScheduler
:
:
Observer
:
:
Observer
(
CompositorVsyncScheduler
*
aOwner
)
:
mMutex
(
"
CompositorVsyncScheduler
.
Observer
.
Mutex
"
)
mOwner
(
aOwner
)
{
}
CompositorVsyncScheduler
:
:
Observer
:
:
~
Observer
(
)
{
MOZ_ASSERT
(
!
mOwner
)
;
}
bool
CompositorVsyncScheduler
:
:
Observer
:
:
NotifyVsync
(
const
VsyncEvent
&
aVsync
)
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
!
mOwner
)
{
return
false
;
}
return
mOwner
-
>
NotifyVsync
(
aVsync
)
;
}
void
CompositorVsyncScheduler
:
:
Observer
:
:
Destroy
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
mOwner
=
nullptr
;
}
CompositorVsyncScheduler
:
:
CompositorVsyncScheduler
(
CompositorVsyncSchedulerOwner
*
aVsyncSchedulerOwner
widget
:
:
CompositorWidget
*
aWidget
)
:
mVsyncSchedulerOwner
(
aVsyncSchedulerOwner
)
mLastCompose
(
TimeStamp
:
:
Now
(
)
)
mLastVsync
(
TimeStamp
:
:
Now
(
)
)
mIsObservingVsync
(
false
)
mVsyncNotificationsSkipped
(
0
)
mWidget
(
aWidget
)
mCurrentCompositeTaskMonitor
(
"
CurrentCompositeTaskMonitor
"
)
mCurrentCompositeTask
(
nullptr
)
mCurrentVRTaskMonitor
(
"
CurrentVRTaskMonitor
"
)
mCurrentVRTask
(
nullptr
)
{
mVsyncObserver
=
new
Observer
(
this
)
;
mAsapScheduling
=
StaticPrefs
:
:
LayersCompositionFrameRate
(
)
=
=
0
|
|
gfxPlatform
:
:
IsInLayoutAsapMode
(
)
|
|
recordreplay
:
:
IsRecordingOrReplaying
(
)
;
}
CompositorVsyncScheduler
:
:
~
CompositorVsyncScheduler
(
)
{
MOZ_ASSERT
(
!
mIsObservingVsync
)
;
MOZ_ASSERT
(
!
mVsyncObserver
)
;
mVsyncSchedulerOwner
=
nullptr
;
}
void
CompositorVsyncScheduler
:
:
Destroy
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
!
mVsyncObserver
)
{
return
;
}
UnobserveVsync
(
)
;
mVsyncObserver
-
>
Destroy
(
)
;
mVsyncObserver
=
nullptr
;
mCompositeRequestedAt
=
TimeStamp
(
)
;
CancelCurrentCompositeTask
(
)
;
CancelCurrentVRTask
(
)
;
}
void
CompositorVsyncScheduler
:
:
PostCompositeTask
(
VsyncId
aId
TimeStamp
aCompositeTimestamp
)
{
MonitorAutoLock
lock
(
mCurrentCompositeTaskMonitor
)
;
if
(
mCurrentCompositeTask
=
=
nullptr
&
&
CompositorThreadHolder
:
:
Loop
(
)
)
{
RefPtr
<
CancelableRunnable
>
task
=
NewCancelableRunnableMethod
<
VsyncId
TimeStamp
>
(
"
layers
:
:
CompositorVsyncScheduler
:
:
Composite
"
this
&
CompositorVsyncScheduler
:
:
Composite
aId
aCompositeTimestamp
)
;
mCurrentCompositeTask
=
task
;
ScheduleTask
(
task
.
forget
(
)
)
;
}
}
void
CompositorVsyncScheduler
:
:
PostVRTask
(
TimeStamp
aTimestamp
)
{
MonitorAutoLock
lockVR
(
mCurrentVRTaskMonitor
)
;
if
(
mCurrentVRTask
=
=
nullptr
&
&
CompositorThreadHolder
:
:
Loop
(
)
)
{
RefPtr
<
CancelableRunnable
>
task
=
NewCancelableRunnableMethod
<
TimeStamp
>
(
"
layers
:
:
CompositorVsyncScheduler
:
:
DispatchVREvents
"
this
&
CompositorVsyncScheduler
:
:
DispatchVREvents
aTimestamp
)
;
mCurrentVRTask
=
task
;
CompositorThreadHolder
:
:
Loop
(
)
-
>
PostDelayedTask
(
task
.
forget
(
)
0
)
;
}
}
void
CompositorVsyncScheduler
:
:
ScheduleComposition
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
!
mVsyncObserver
)
{
return
;
}
if
(
mAsapScheduling
)
{
PostCompositeTask
(
VsyncId
(
)
TimeStamp
:
:
Now
(
)
)
;
#
ifdef
MOZ_WIDGET_ANDROID
}
else
if
(
mIsObservingVsync
&
&
mCompositeRequestedAt
&
&
(
TimeStamp
:
:
Now
(
)
-
mCompositeRequestedAt
)
>
=
mVsyncSchedulerOwner
-
>
GetVsyncInterval
(
)
*
2
)
{
PostCompositeTask
(
VsyncId
(
)
TimeStamp
:
:
Now
(
)
)
;
#
endif
}
else
{
if
(
!
mCompositeRequestedAt
)
{
mCompositeRequestedAt
=
TimeStamp
:
:
Now
(
)
;
}
if
(
!
mIsObservingVsync
&
&
mCompositeRequestedAt
)
{
ObserveVsync
(
)
;
PostCompositeTask
(
VsyncId
(
)
TimeStamp
:
:
Now
(
)
)
;
}
}
}
bool
CompositorVsyncScheduler
:
:
NotifyVsync
(
const
VsyncEvent
&
aVsync
)
{
MOZ_ASSERT_IF
(
XRE_IsParentProcess
(
)
!
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
MOZ_ASSERT_IF
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_GPU
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
gfx
:
:
VRManager
*
vm
=
gfx
:
:
VRManager
:
:
Get
(
)
;
if
(
!
vm
-
>
IsPresenting
(
)
)
{
PostCompositeTask
(
aVsync
.
mId
aVsync
.
mTime
)
;
}
#
else
PostCompositeTask
(
aVsync
.
mId
aVsync
.
mTime
)
;
#
endif
PostVRTask
(
aVsync
.
mTime
)
;
return
true
;
}
void
CompositorVsyncScheduler
:
:
CancelCurrentVRTask
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
|
|
NS_IsMainThread
(
)
)
;
MonitorAutoLock
lock
(
mCurrentVRTaskMonitor
)
;
if
(
mCurrentVRTask
)
{
mCurrentVRTask
-
>
Cancel
(
)
;
mCurrentVRTask
=
nullptr
;
}
}
void
CompositorVsyncScheduler
:
:
CancelCurrentCompositeTask
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
|
|
NS_IsMainThread
(
)
)
;
MonitorAutoLock
lock
(
mCurrentCompositeTaskMonitor
)
;
if
(
mCurrentCompositeTask
)
{
mCurrentCompositeTask
-
>
Cancel
(
)
;
mCurrentCompositeTask
=
nullptr
;
}
}
void
CompositorVsyncScheduler
:
:
Composite
(
VsyncId
aId
TimeStamp
aVsyncTimestamp
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
MOZ_ASSERT
(
mVsyncSchedulerOwner
)
;
{
MonitorAutoLock
lock
(
mCurrentCompositeTaskMonitor
)
;
mCurrentCompositeTask
=
nullptr
;
}
mLastVsync
=
aVsyncTimestamp
;
mLastVsyncId
=
aId
;
if
(
!
mAsapScheduling
)
{
if
(
aVsyncTimestamp
<
mLastCompose
)
{
return
;
}
if
(
mVsyncSchedulerOwner
-
>
IsPendingComposite
(
)
)
{
mVsyncSchedulerOwner
-
>
FinishPendingComposite
(
)
;
return
;
}
}
if
(
mCompositeRequestedAt
|
|
mAsapScheduling
)
{
mCompositeRequestedAt
=
TimeStamp
(
)
;
mLastCompose
=
aVsyncTimestamp
;
mVsyncSchedulerOwner
-
>
CompositeToTarget
(
aId
nullptr
nullptr
)
;
mVsyncNotificationsSkipped
=
0
;
TimeDuration
compositeFrameTotal
=
TimeStamp
:
:
Now
(
)
-
aVsyncTimestamp
;
mozilla
:
:
Telemetry
:
:
Accumulate
(
mozilla
:
:
Telemetry
:
:
COMPOSITE_FRAME_ROUNDTRIP_TIME
compositeFrameTotal
.
ToMilliseconds
(
)
)
;
}
else
if
(
mVsyncNotificationsSkipped
+
+
>
StaticPrefs
:
:
CompositorUnobserveCount
(
)
)
{
UnobserveVsync
(
)
;
}
}
void
CompositorVsyncScheduler
:
:
ForceComposeToTarget
(
gfx
:
:
DrawTarget
*
aTarget
const
IntRect
*
aRect
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
mVsyncNotificationsSkipped
=
0
;
mLastCompose
=
TimeStamp
:
:
Now
(
)
;
MOZ_ASSERT
(
mVsyncSchedulerOwner
)
;
mVsyncSchedulerOwner
-
>
CompositeToTarget
(
VsyncId
(
)
aTarget
aRect
)
;
}
bool
CompositorVsyncScheduler
:
:
NeedsComposite
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
return
(
bool
)
mCompositeRequestedAt
;
}
bool
CompositorVsyncScheduler
:
:
FlushPendingComposite
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
mCompositeRequestedAt
)
{
CancelCurrentCompositeTask
(
)
;
ForceComposeToTarget
(
nullptr
nullptr
)
;
return
true
;
}
return
false
;
}
void
CompositorVsyncScheduler
:
:
ObserveVsync
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
mWidget
-
>
ObserveVsync
(
mVsyncObserver
)
;
mIsObservingVsync
=
true
;
}
void
CompositorVsyncScheduler
:
:
UnobserveVsync
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
mWidget
-
>
ObserveVsync
(
nullptr
)
;
mIsObservingVsync
=
false
;
}
void
CompositorVsyncScheduler
:
:
DispatchVREvents
(
TimeStamp
aVsyncTimestamp
)
{
{
MonitorAutoLock
lock
(
mCurrentVRTaskMonitor
)
;
mCurrentVRTask
=
nullptr
;
}
if
(
!
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
{
return
;
}
VRManager
*
vm
=
VRManager
:
:
Get
(
)
;
vm
-
>
NotifyVsync
(
aVsyncTimestamp
)
;
}
void
CompositorVsyncScheduler
:
:
ScheduleTask
(
already_AddRefed
<
CancelableRunnable
>
aTask
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
Loop
(
)
)
;
CompositorThreadHolder
:
:
Loop
(
)
-
>
PostDelayedTask
(
std
:
:
move
(
aTask
)
0
)
;
}
const
TimeStamp
&
CompositorVsyncScheduler
:
:
GetLastComposeTime
(
)
const
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
return
mLastCompose
;
}
const
TimeStamp
&
CompositorVsyncScheduler
:
:
GetLastVsyncTime
(
)
const
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
return
mLastVsync
;
}
const
VsyncId
&
CompositorVsyncScheduler
:
:
GetLastVsyncId
(
)
const
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
return
mLastVsyncId
;
}
void
CompositorVsyncScheduler
:
:
UpdateLastComposeTime
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
mLastCompose
=
TimeStamp
:
:
Now
(
)
;
}
}
}
