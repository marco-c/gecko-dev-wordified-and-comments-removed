#
include
"
SharedSurfacesChild
.
h
"
#
include
"
SharedSurfacesParent
.
h
"
#
include
"
CompositorManagerChild
.
h
"
#
include
"
mozilla
/
layers
/
SourceSurfaceSharedData
.
h
"
#
include
"
mozilla
/
SystemGroup
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
gfx
;
class
SharedSurfacesChild
:
:
SharedUserData
final
{
public
:
explicit
SharedUserData
(
const
wr
:
:
ExternalImageId
&
aId
)
:
mId
(
aId
)
mShared
(
false
)
{
}
~
SharedUserData
(
)
{
if
(
mShared
)
{
mShared
=
false
;
if
(
NS_IsMainThread
(
)
)
{
SharedSurfacesChild
:
:
Unshare
(
mId
)
;
}
else
{
wr
:
:
ExternalImageId
id
=
mId
;
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
NS_NewRunnableFunction
(
"
DestroySharedUserData
"
[
id
]
(
)
-
>
void
{
SharedSurfacesChild
:
:
Unshare
(
id
)
;
}
)
)
;
}
}
}
const
wr
:
:
ExternalImageId
&
Id
(
)
const
{
return
mId
;
}
void
SetId
(
const
wr
:
:
ExternalImageId
&
aId
)
{
mId
=
aId
;
mShared
=
false
;
}
bool
IsShared
(
)
const
{
return
mShared
;
}
void
MarkShared
(
)
{
MOZ_ASSERT
(
!
mShared
)
;
mShared
=
true
;
}
private
:
wr
:
:
ExternalImageId
mId
;
bool
mShared
:
1
;
}
;
void
SharedSurfacesChild
:
:
DestroySharedUserData
(
void
*
aClosure
)
{
MOZ_ASSERT
(
aClosure
)
;
auto
data
=
static_cast
<
SharedUserData
*
>
(
aClosure
)
;
delete
data
;
}
nsresult
SharedSurfacesChild
:
:
Share
(
SourceSurfaceSharedData
*
aSurface
wr
:
:
ExternalImageId
&
aId
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
CompositorManagerChild
*
manager
=
CompositorManagerChild
:
:
GetInstance
(
)
;
if
(
NS_WARN_IF
(
!
manager
|
|
!
manager
-
>
CanSend
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
static
UserDataKey
sSharedKey
;
SharedUserData
*
data
=
static_cast
<
SharedUserData
*
>
(
aSurface
-
>
GetUserData
(
&
sSharedKey
)
)
;
if
(
!
data
)
{
data
=
new
SharedUserData
(
manager
-
>
GetNextExternalImageId
(
)
)
;
aSurface
-
>
AddUserData
(
&
sSharedKey
data
DestroySharedUserData
)
;
}
else
if
(
!
manager
-
>
OwnsExternalImageId
(
data
-
>
Id
(
)
)
)
{
MOZ_ASSERT
(
manager
-
>
OtherPid
(
)
!
=
base
:
:
GetCurrentProcId
(
)
)
;
data
-
>
SetId
(
manager
-
>
GetNextExternalImageId
(
)
)
;
}
else
if
(
data
-
>
IsShared
(
)
)
{
aId
=
data
-
>
Id
(
)
;
return
NS_OK
;
}
SourceSurfaceSharedData
:
:
HandleLock
lock
(
aSurface
)
;
auto
pid
=
manager
-
>
OtherPid
(
)
;
if
(
pid
=
=
base
:
:
GetCurrentProcId
(
)
)
{
SharedSurfacesParent
:
:
AddSameProcess
(
data
-
>
Id
(
)
aSurface
)
;
data
-
>
MarkShared
(
)
;
aId
=
data
-
>
Id
(
)
;
return
NS_OK
;
}
ipc
:
:
SharedMemoryBasic
:
:
Handle
handle
=
ipc
:
:
SharedMemoryBasic
:
:
NULLHandle
(
)
;
nsresult
rv
=
aSurface
-
>
ShareToProcess
(
pid
handle
)
;
if
(
rv
=
=
NS_ERROR_NOT_AVAILABLE
)
{
if
(
NS_WARN_IF
(
!
aSurface
-
>
ReallocHandle
(
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
rv
=
aSurface
-
>
ShareToProcess
(
pid
handle
)
;
}
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
MOZ_ASSERT
(
rv
!
=
NS_ERROR_NOT_AVAILABLE
)
;
return
rv
;
}
SurfaceFormat
format
=
aSurface
-
>
GetFormat
(
)
;
MOZ_RELEASE_ASSERT
(
format
=
=
SurfaceFormat
:
:
B8G8R8X8
|
|
format
=
=
SurfaceFormat
:
:
B8G8R8A8
"
bad
format
"
)
;
data
-
>
MarkShared
(
)
;
aId
=
data
-
>
Id
(
)
;
manager
-
>
SendAddSharedSurface
(
aId
SurfaceDescriptorShared
(
aSurface
-
>
GetSize
(
)
aSurface
-
>
Stride
(
)
format
handle
)
)
;
return
NS_OK
;
}
nsresult
SharedSurfacesChild
:
:
Share
(
ImageContainer
*
aContainer
wr
:
:
ExternalImageId
&
aId
uint32_t
&
aGeneration
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aContainer
)
;
if
(
aContainer
-
>
IsAsync
(
)
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
AutoTArray
<
ImageContainer
:
:
OwningImage
4
>
images
;
aContainer
-
>
GetCurrentImages
(
&
images
&
aGeneration
)
;
if
(
images
.
IsEmpty
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
RefPtr
<
gfx
:
:
SourceSurface
>
surface
=
images
[
0
]
.
mImage
-
>
GetAsSourceSurface
(
)
;
if
(
!
surface
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
if
(
surface
-
>
GetType
(
)
!
=
SurfaceType
:
:
DATA_SHARED
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
auto
sharedSurface
=
static_cast
<
SourceSurfaceSharedData
*
>
(
surface
.
get
(
)
)
;
return
Share
(
sharedSurface
aId
)
;
}
void
SharedSurfacesChild
:
:
Unshare
(
const
wr
:
:
ExternalImageId
&
aId
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
CompositorManagerChild
*
manager
=
CompositorManagerChild
:
:
GetInstance
(
)
;
if
(
MOZ_UNLIKELY
(
!
manager
|
|
!
manager
-
>
CanSend
(
)
)
)
{
return
;
}
if
(
manager
-
>
OtherPid
(
)
=
=
base
:
:
GetCurrentProcId
(
)
)
{
MOZ_ASSERT
(
manager
-
>
OwnsExternalImageId
(
aId
)
)
;
SharedSurfacesParent
:
:
RemoveSameProcess
(
aId
)
;
}
else
if
(
manager
-
>
OwnsExternalImageId
(
aId
)
)
{
manager
-
>
SendRemoveSharedSurface
(
aId
)
;
}
}
}
}
