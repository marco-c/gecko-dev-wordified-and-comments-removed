#
include
"
CompositableInProcessManager
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
namespace
mozilla
:
:
layers
{
std
:
:
map
<
std
:
:
pair
<
base
:
:
ProcessId
uint64_t
>
RefPtr
<
WebRenderImageHost
>
>
CompositableInProcessManager
:
:
sCompositables
;
StaticMutex
CompositableInProcessManager
:
:
sMutex
;
uint32_t
CompositableInProcessManager
:
:
sNamespace
(
0
)
;
Atomic
<
uint32_t
>
CompositableInProcessManager
:
:
sNextResourceId
(
1
)
;
Atomic
<
uint64_t
>
CompositableInProcessManager
:
:
sNextHandle
(
1
)
;
void
CompositableInProcessManager
:
:
Initialize
(
uint32_t
aNamespace
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
sNamespace
=
aNamespace
;
}
void
CompositableInProcessManager
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
StaticMutexAutoLock
lock
(
sMutex
)
;
sCompositables
.
clear
(
)
;
}
RefPtr
<
WebRenderImageHost
>
CompositableInProcessManager
:
:
Add
(
const
CompositableHandle
&
aHandle
base
:
:
ProcessId
aForPid
const
TextureInfo
&
aTextureInfo
)
{
MOZ_RELEASE_ASSERT
(
aHandle
.
Value
(
)
)
;
StaticMutexAutoLock
lock
(
sMutex
)
;
const
auto
key
=
std
:
:
pair
(
aForPid
aHandle
.
Value
(
)
)
;
if
(
sCompositables
.
find
(
key
)
!
=
sCompositables
.
end
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Duplicate
handle
!
"
)
;
return
nullptr
;
}
auto
host
=
MakeRefPtr
<
WebRenderImageHost
>
(
aTextureInfo
)
;
sCompositables
[
key
]
=
host
;
host
-
>
SetAsyncRef
(
AsyncCompositableRef
(
aForPid
aHandle
)
)
;
return
host
;
}
RefPtr
<
WebRenderImageHost
>
CompositableInProcessManager
:
:
Find
(
const
CompositableHandle
&
aHandle
base
:
:
ProcessId
aForPid
)
{
StaticMutexAutoLock
lock
(
sMutex
)
;
const
auto
key
=
std
:
:
pair
(
aForPid
aHandle
.
Value
(
)
)
;
const
auto
i
=
sCompositables
.
find
(
key
)
;
if
(
NS_WARN_IF
(
i
=
=
sCompositables
.
end
(
)
)
)
{
return
nullptr
;
}
return
i
-
>
second
;
}
void
CompositableInProcessManager
:
:
Release
(
const
CompositableHandle
&
aHandle
base
:
:
ProcessId
aForPid
)
{
StaticMutexAutoLock
lock
(
sMutex
)
;
const
auto
key
=
std
:
:
pair
(
aForPid
aHandle
.
Value
(
)
)
;
const
auto
i
=
sCompositables
.
find
(
key
)
;
if
(
NS_WARN_IF
(
i
=
=
sCompositables
.
end
(
)
)
)
{
return
;
}
sCompositables
.
erase
(
i
)
;
}
}
