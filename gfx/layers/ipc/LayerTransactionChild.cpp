#
include
"
LayerTransactionChild
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
layers
/
CompositableChild
.
h
"
#
include
"
mozilla
/
layers
/
PCompositableChild
.
h
"
#
include
"
mozilla
/
layers
/
PLayerChild
.
h
"
#
include
"
mozilla
/
layers
/
PImageContainerChild
.
h
"
#
include
"
mozilla
/
layers
/
ShadowLayers
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
namespace
mozilla
{
namespace
layers
{
void
LayerTransactionChild
:
:
Destroy
(
)
{
if
(
!
IPCOpen
(
)
)
{
return
;
}
mDestroyed
=
true
;
SendShutdown
(
)
;
}
PLayerChild
*
LayerTransactionChild
:
:
AllocPLayerChild
(
)
{
NS_RUNTIMEABORT
(
"
not
reached
"
)
;
return
nullptr
;
}
bool
LayerTransactionChild
:
:
DeallocPLayerChild
(
PLayerChild
*
actor
)
{
delete
actor
;
return
true
;
}
PCompositableChild
*
LayerTransactionChild
:
:
AllocPCompositableChild
(
const
TextureInfo
&
aInfo
)
{
MOZ_ASSERT
(
!
mDestroyed
)
;
return
CompositableChild
:
:
CreateActor
(
)
;
}
bool
LayerTransactionChild
:
:
DeallocPCompositableChild
(
PCompositableChild
*
actor
)
{
CompositableChild
:
:
DestroyActor
(
actor
)
;
return
true
;
}
void
LayerTransactionChild
:
:
ActorDestroy
(
ActorDestroyReason
why
)
{
mDestroyed
=
true
;
#
ifdef
MOZ_B2G
if
(
why
=
=
AbnormalShutdown
)
{
NS_RUNTIMEABORT
(
"
ActorDestroy
by
IPC
channel
failure
at
LayerTransactionChild
"
)
;
}
#
endif
}
}
}
