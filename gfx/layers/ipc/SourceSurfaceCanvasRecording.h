#
ifndef
mozilla_layers_SourceSurfaceCanvasRecording_h
#
define
mozilla_layers_SourceSurfaceCanvasRecording_h
#
include
"
mozilla
/
gfx
/
2D
.
h
"
namespace
mozilla
:
:
layers
{
class
CanvasChild
;
class
CanvasDrawEventRecorder
;
class
SourceSurfaceCanvasRecording
final
:
public
gfx
:
:
SourceSurface
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
SourceSurfaceCanvasRecording
final
)
SourceSurfaceCanvasRecording
(
int64_t
aTextureId
const
RefPtr
<
gfx
:
:
SourceSurface
>
&
aRecordedSuface
CanvasChild
*
aCanvasChild
const
RefPtr
<
CanvasDrawEventRecorder
>
&
aRecorder
)
;
~
SourceSurfaceCanvasRecording
(
)
final
;
void
Init
(
)
;
void
DestroyOnOwningThread
(
)
;
gfx
:
:
SurfaceType
GetType
(
)
const
final
{
return
mRecordedSurface
-
>
GetType
(
)
;
}
gfx
:
:
IntSize
GetSize
(
)
const
final
{
return
mRecordedSurface
-
>
GetSize
(
)
;
}
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
final
{
return
mRecordedSurface
-
>
GetFormat
(
)
;
}
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
GetDataSurface
(
)
final
;
void
DrawTargetWillChange
(
)
{
mDetached
=
true
;
}
private
:
bool
IsOnOwningThread
(
)
const
;
void
EnsureDataSurfaceOnOwningThread
(
)
;
int64_t
mTextureId
;
RefPtr
<
gfx
:
:
SourceSurface
>
mRecordedSurface
;
RefPtr
<
CanvasChild
>
mCanvasChild
;
RefPtr
<
CanvasDrawEventRecorder
>
mRecorder
;
RefPtr
<
gfx
:
:
DataSourceSurface
>
mDataSourceSurface
;
bool
mDetached
=
false
;
}
;
}
#
endif
