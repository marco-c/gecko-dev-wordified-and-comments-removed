#
include
"
FenceUtils
.
h
"
using
namespace
mozilla
:
:
layers
;
namespace
IPC
{
void
ParamTraits
<
FenceHandle
>
:
:
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
FenceHandle
handle
=
aParam
;
MOZ_ASSERT
(
handle
.
IsValid
(
)
)
;
}
bool
ParamTraits
<
FenceHandle
>
:
:
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
return
true
;
}
}
namespace
mozilla
{
namespace
layers
{
FenceHandle
:
:
FenceHandle
(
)
:
mFence
(
new
FdObj
(
)
)
{
}
FenceHandle
:
:
FenceHandle
(
FdObj
*
aFdObj
)
:
mFence
(
aFdObj
)
{
MOZ_ASSERT
(
aFdObj
)
;
}
void
FenceHandle
:
:
Merge
(
const
FenceHandle
&
aFenceHandle
)
{
}
void
FenceHandle
:
:
TransferToAnotherFenceHandle
(
FenceHandle
&
aFenceHandle
)
{
aFenceHandle
.
mFence
=
this
-
>
GetAndResetFdObj
(
)
;
}
already_AddRefed
<
FenceHandle
:
:
FdObj
>
FenceHandle
:
:
GetAndResetFdObj
(
)
{
RefPtr
<
FdObj
>
fence
=
mFence
;
mFence
=
new
FdObj
(
)
;
return
fence
.
forget
(
)
;
}
already_AddRefed
<
FenceHandle
:
:
FdObj
>
FenceHandle
:
:
GetDupFdObj
(
)
{
RefPtr
<
FdObj
>
fdObj
;
if
(
IsValid
(
)
)
{
fdObj
=
new
FenceHandle
:
:
FdObj
(
dup
(
mFence
-
>
mFd
)
)
;
}
else
{
fdObj
=
new
FenceHandle
:
:
FdObj
(
)
;
}
return
fdObj
.
forget
(
)
;
}
}
}
