#
ifndef
mozilla_layers_CanvasTranslator_h
#
define
mozilla_layers_CanvasTranslator_h
#
include
<
deque
>
#
include
<
unordered_map
>
#
include
<
vector
>
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
mozilla
/
gfx
/
InlineTranslator
.
h
"
#
include
"
mozilla
/
gfx
/
RecordedEvent
.
h
"
#
include
"
CanvasChild
.
h
"
#
include
"
mozilla
/
layers
/
CanvasDrawEventRecorder
.
h
"
#
include
"
mozilla
/
layers
/
LayersSurfaces
.
h
"
#
include
"
mozilla
/
layers
/
PCanvasParent
.
h
"
#
include
"
mozilla
/
layers
/
RemoteTextureMap
.
h
"
#
include
"
mozilla
/
ipc
/
CrossProcessSemaphore
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
using
EventType
=
gfx
:
:
RecordedEvent
:
:
EventType
;
class
TaskQueue
;
namespace
gfx
{
class
DataSourceSurfaceWrapper
;
class
DrawTargetWebgl
;
class
SharedContextWebgl
;
}
namespace
layers
{
class
SharedSurfacesHolder
;
class
TextureData
;
class
TextureHost
;
class
VideoProcessorD3D11
;
class
CanvasTranslator
final
:
public
gfx
:
:
InlineTranslator
public
PCanvasParent
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CanvasTranslator
)
friend
class
PProtocolParent
;
CanvasTranslator
(
layers
:
:
SharedSurfacesHolder
*
aSharedSurfacesHolder
const
dom
:
:
ContentParentId
&
aContentId
uint32_t
aManagerId
)
;
const
dom
:
:
ContentParentId
&
GetContentId
(
)
const
{
return
mContentId
;
}
uint32_t
GetManagerId
(
)
const
{
return
mManagerId
;
}
void
DispatchToTaskQueue
(
already_AddRefed
<
nsIRunnable
>
aRunnable
)
;
bool
IsInTaskQueue
(
)
const
;
ipc
:
:
IPCResult
RecvInitTranslator
(
TextureType
aTextureType
TextureType
aWebglTextureType
gfx
:
:
BackendType
aBackendType
Handle
&
&
aReadHandle
nsTArray
<
Handle
>
&
&
aBufferHandles
uint64_t
aBufferSize
CrossProcessSemaphoreHandle
&
&
aReaderSem
CrossProcessSemaphoreHandle
&
&
aWriterSem
)
;
ipc
:
:
IPCResult
RecvRestartTranslation
(
)
;
ipc
:
:
IPCResult
RecvAddBuffer
(
Handle
&
&
aBufferHandle
uint64_t
aBufferSize
)
;
ipc
:
:
IPCResult
RecvSetDataSurfaceBuffer
(
Handle
&
&
aBufferHandle
uint64_t
aBufferSize
)
;
ipc
:
:
IPCResult
RecvClearCachedResources
(
)
;
void
ActorDestroy
(
ActorDestroyReason
why
)
final
;
void
CheckAndSignalWriter
(
)
;
bool
TranslateRecording
(
)
;
void
BeginTransaction
(
)
;
void
EndTransaction
(
)
;
void
Flush
(
)
;
void
DeviceChangeAcknowledged
(
)
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
CreateDrawTarget
(
gfx
:
:
ReferencePtr
aRefPtr
int64_t
aTextureId
RemoteTextureOwnerId
aTextureOwnerId
const
gfx
:
:
IntSize
&
aSize
gfx
:
:
SurfaceFormat
aFormat
)
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
CreateDrawTarget
(
gfx
:
:
ReferencePtr
aRefPtr
const
gfx
:
:
IntSize
&
aSize
gfx
:
:
SurfaceFormat
aFormat
)
final
;
already_AddRefed
<
gfx
:
:
GradientStops
>
GetOrCreateGradientStops
(
gfx
:
:
DrawTarget
*
aDrawTarget
gfx
:
:
GradientStop
*
aRawStops
uint32_t
aNumStops
gfx
:
:
ExtendMode
aExtendMode
)
final
;
void
CheckpointReached
(
)
;
void
PauseTranslation
(
)
;
void
RemoveTexture
(
int64_t
aTextureId
RemoteTextureTxnType
aTxnType
=
0
RemoteTextureTxnId
aTxnId
=
0
)
;
bool
LockTexture
(
int64_t
aTextureId
OpenMode
aMode
bool
aInvalidContents
=
false
)
;
bool
UnlockTexture
(
int64_t
aTextureId
)
;
bool
PresentTexture
(
int64_t
aTextureId
RemoteTextureId
aId
)
;
bool
PushRemoteTexture
(
int64_t
aTextureId
TextureData
*
aData
RemoteTextureId
aId
RemoteTextureOwnerId
aOwnerId
)
;
void
AddSourceSurface
(
gfx
:
:
ReferencePtr
aRefPtr
gfx
:
:
SourceSurface
*
aSurface
)
final
{
if
(
mMappedSurface
=
=
aRefPtr
)
{
mPreparedMap
=
nullptr
;
mMappedSurface
=
nullptr
;
}
RemoveDataSurface
(
aRefPtr
)
;
InlineTranslator
:
:
AddSourceSurface
(
aRefPtr
aSurface
)
;
}
void
RemoveSourceSurface
(
gfx
:
:
ReferencePtr
aRefPtr
)
final
{
if
(
mMappedSurface
=
=
aRefPtr
)
{
mPreparedMap
=
nullptr
;
mMappedSurface
=
nullptr
;
}
RemoveDataSurface
(
aRefPtr
)
;
InlineTranslator
:
:
RemoveSourceSurface
(
aRefPtr
)
;
}
already_AddRefed
<
gfx
:
:
SourceSurface
>
LookupExternalSurface
(
uint64_t
aKey
)
final
;
already_AddRefed
<
gfx
:
:
SourceSurface
>
LookupSourceSurfaceFromSurfaceDescriptor
(
const
SurfaceDescriptor
&
aDesc
)
final
;
gfx
:
:
DataSourceSurface
*
LookupDataSurface
(
gfx
:
:
ReferencePtr
aRefPtr
)
;
void
AddDataSurface
(
gfx
:
:
ReferencePtr
aRefPtr
RefPtr
<
gfx
:
:
DataSourceSurface
>
&
&
aSurface
)
;
void
RemoveDataSurface
(
gfx
:
:
ReferencePtr
aRefPtr
)
;
void
SetPreparedMap
(
gfx
:
:
ReferencePtr
aSurface
UniquePtr
<
gfx
:
:
DataSourceSurface
:
:
ScopedMap
>
aMap
)
;
UniquePtr
<
gfx
:
:
DataSourceSurface
:
:
ScopedMap
>
GetPreparedMap
(
gfx
:
:
ReferencePtr
aSurface
)
;
void
PrepareShmem
(
int64_t
aTextureId
)
;
void
RecycleBuffer
(
)
;
void
NextBuffer
(
)
;
void
GetDataSurface
(
uint64_t
aSurfaceRef
)
;
static
void
Shutdown
(
)
;
private
:
~
CanvasTranslator
(
)
;
class
CanvasTranslatorEvent
{
public
:
enum
class
Tag
{
TranslateRecording
AddBuffer
SetDataSurfaceBuffer
ClearCachedResources
}
;
const
Tag
mTag
;
private
:
ipc
:
:
SharedMemory
:
:
Handle
mBufferHandle
;
const
size_t
mBufferSize
;
public
:
explicit
CanvasTranslatorEvent
(
const
Tag
aTag
)
:
mTag
(
aTag
)
mBufferSize
(
0
)
{
MOZ_ASSERT
(
mTag
=
=
Tag
:
:
TranslateRecording
|
|
mTag
=
=
Tag
:
:
ClearCachedResources
)
;
}
CanvasTranslatorEvent
(
const
Tag
aTag
ipc
:
:
SharedMemory
:
:
Handle
&
&
aBufferHandle
size_t
aBufferSize
)
:
mTag
(
aTag
)
mBufferHandle
(
std
:
:
move
(
aBufferHandle
)
)
mBufferSize
(
aBufferSize
)
{
MOZ_ASSERT
(
mTag
=
=
Tag
:
:
AddBuffer
|
|
mTag
=
=
Tag
:
:
SetDataSurfaceBuffer
)
;
}
static
UniquePtr
<
CanvasTranslatorEvent
>
TranslateRecording
(
)
{
return
MakeUnique
<
CanvasTranslatorEvent
>
(
Tag
:
:
TranslateRecording
)
;
}
static
UniquePtr
<
CanvasTranslatorEvent
>
AddBuffer
(
ipc
:
:
SharedMemory
:
:
Handle
&
&
aBufferHandle
size_t
aBufferSize
)
{
return
MakeUnique
<
CanvasTranslatorEvent
>
(
Tag
:
:
AddBuffer
std
:
:
move
(
aBufferHandle
)
aBufferSize
)
;
}
static
UniquePtr
<
CanvasTranslatorEvent
>
SetDataSurfaceBuffer
(
ipc
:
:
SharedMemory
:
:
Handle
&
&
aBufferHandle
size_t
aBufferSize
)
{
return
MakeUnique
<
CanvasTranslatorEvent
>
(
Tag
:
:
SetDataSurfaceBuffer
std
:
:
move
(
aBufferHandle
)
aBufferSize
)
;
}
static
UniquePtr
<
CanvasTranslatorEvent
>
ClearCachedResources
(
)
{
return
MakeUnique
<
CanvasTranslatorEvent
>
(
Tag
:
:
ClearCachedResources
)
;
}
ipc
:
:
SharedMemory
:
:
Handle
TakeBufferHandle
(
)
{
if
(
mTag
=
=
Tag
:
:
AddBuffer
|
|
mTag
=
=
Tag
:
:
SetDataSurfaceBuffer
)
{
return
std
:
:
move
(
mBufferHandle
)
;
}
MOZ_ASSERT_UNREACHABLE
(
"
unexpected
to
be
called
"
)
;
return
mozilla
:
:
ipc
:
:
SharedMemory
:
:
NULLHandle
(
)
;
}
size_t
BufferSize
(
)
{
if
(
mTag
=
=
Tag
:
:
AddBuffer
|
|
mTag
=
=
Tag
:
:
SetDataSurfaceBuffer
)
{
return
mBufferSize
;
}
MOZ_ASSERT_UNREACHABLE
(
"
unexpected
to
be
called
"
)
;
return
0
;
}
}
;
bool
AddBuffer
(
Handle
&
&
aBufferHandle
size_t
aBufferSize
)
;
bool
SetDataSurfaceBuffer
(
Handle
&
&
aBufferHandle
size_t
aBufferSize
)
;
bool
ReadNextEvent
(
EventType
&
aEventType
)
;
bool
HasPendingEvent
(
)
;
bool
ReadPendingEvent
(
EventType
&
aEventType
)
;
bool
CheckDeactivated
(
)
;
void
Deactivate
(
)
;
bool
TryDrawTargetWebglFallback
(
int64_t
aTextureId
gfx
:
:
DrawTargetWebgl
*
aWebgl
)
;
void
ForceDrawTargetWebglFallback
(
)
;
void
BlockCanvas
(
)
;
UniquePtr
<
TextureData
>
CreateTextureData
(
const
gfx
:
:
IntSize
&
aSize
gfx
:
:
SurfaceFormat
aFormat
bool
aClear
)
;
void
EnsureRemoteTextureOwner
(
RemoteTextureOwnerId
aOwnerId
=
RemoteTextureOwnerId
(
)
)
;
UniquePtr
<
TextureData
>
CreateOrRecycleTextureData
(
const
gfx
:
:
IntSize
&
aSize
gfx
:
:
SurfaceFormat
aFormat
)
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
CreateFallbackDrawTarget
(
gfx
:
:
ReferencePtr
aRefPtr
int64_t
aTextureId
RemoteTextureOwnerId
aTextureOwnerId
const
gfx
:
:
IntSize
&
aSize
gfx
:
:
SurfaceFormat
aFormat
)
;
void
ClearTextureInfo
(
)
;
bool
HandleExtensionEvent
(
int32_t
aType
)
;
bool
CreateReferenceTexture
(
)
;
bool
CheckForFreshCanvasDevice
(
int
aLineNumber
)
;
void
NotifyDeviceChanged
(
)
;
bool
EnsureSharedContextWebgl
(
)
;
gfx
:
:
DrawTargetWebgl
*
GetDrawTargetWebgl
(
int64_t
aTextureId
bool
aCheckForFallback
=
true
)
const
;
void
NotifyRequiresRefresh
(
int64_t
aTextureId
bool
aDispatch
=
true
)
;
void
CacheSnapshotShmem
(
int64_t
aTextureId
bool
aDispatch
=
true
)
;
void
ClearCachedResources
(
)
;
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
MaybeRecycleDataSurfaceForSurfaceDescriptor
(
TextureHost
*
aTextureHost
const
SurfaceDescriptorRemoteDecoder
&
aSurfaceDescriptor
)
;
bool
UsePendingCanvasTranslatorEvents
(
)
;
void
PostCanvasTranslatorEvents
(
const
MutexAutoLock
&
aProofOfLock
)
;
void
HandleCanvasTranslatorEvents
(
)
;
const
RefPtr
<
TaskQueue
>
mTranslationTaskQueue
;
const
RefPtr
<
SharedSurfacesHolder
>
mSharedSurfacesHolder
;
#
if
defined
(
XP_WIN
)
RefPtr
<
ID3D11Device
>
mDevice
;
DataMutex
<
RefPtr
<
VideoProcessorD3D11
>
>
mVideoProcessorD3D11
;
#
endif
static
StaticRefPtr
<
gfx
:
:
SharedContextWebgl
>
sSharedContext
;
RefPtr
<
gfx
:
:
SharedContextWebgl
>
mSharedContext
;
RefPtr
<
RemoteTextureOwnerClient
>
mRemoteTextureOwner
;
size_t
mDefaultBufferSize
=
0
;
uint32_t
mMaxSpinCount
;
TimeDuration
mNextEventTimeout
;
using
State
=
CanvasDrawEventRecorder
:
:
State
;
using
Header
=
CanvasDrawEventRecorder
:
:
Header
;
RefPtr
<
ipc
:
:
SharedMemory
>
mHeaderShmem
;
Header
*
mHeader
=
nullptr
;
struct
CanvasShmem
{
RefPtr
<
ipc
:
:
SharedMemory
>
shmem
;
bool
IsValid
(
)
const
{
return
!
!
shmem
;
}
auto
Size
(
)
{
return
shmem
?
shmem
-
>
Size
(
)
:
0
;
}
gfx
:
:
MemReader
CreateMemReader
(
)
{
if
(
!
shmem
)
{
return
{
nullptr
0
}
;
}
return
{
static_cast
<
char
*
>
(
shmem
-
>
Memory
(
)
)
Size
(
)
}
;
}
}
;
std
:
:
queue
<
CanvasShmem
>
mCanvasShmems
;
CanvasShmem
mCurrentShmem
;
gfx
:
:
MemReader
mCurrentMemReader
{
0
0
}
;
RefPtr
<
ipc
:
:
SharedMemory
>
mDataSurfaceShmem
;
UniquePtr
<
CrossProcessSemaphore
>
mWriterSemaphore
;
UniquePtr
<
CrossProcessSemaphore
>
mReaderSemaphore
;
TextureType
mTextureType
=
TextureType
:
:
Unknown
;
TextureType
mWebglTextureType
=
TextureType
:
:
Unknown
;
UniquePtr
<
TextureData
>
mReferenceTextureData
;
dom
:
:
ContentParentId
mContentId
;
uint32_t
mManagerId
;
gfx
:
:
BackendType
mBackendType
=
gfx
:
:
BackendType
:
:
NONE
;
base
:
:
ProcessId
mOtherPid
=
base
:
:
kInvalidProcessId
;
struct
TextureInfo
{
gfx
:
:
ReferencePtr
mRefPtr
;
UniquePtr
<
TextureData
>
mTextureData
;
RefPtr
<
gfx
:
:
DrawTarget
>
mDrawTarget
;
RemoteTextureOwnerId
mRemoteTextureOwnerId
;
bool
mNotifiedRequiresRefresh
=
false
;
int32_t
mLocked
=
1
;
OpenMode
mTextureLockMode
=
OpenMode
:
:
OPEN_NONE
;
gfx
:
:
DrawTargetWebgl
*
GetDrawTargetWebgl
(
bool
aCheckForFallback
=
true
)
const
;
}
;
std
:
:
unordered_map
<
int64_t
TextureInfo
>
mTextureInfo
;
nsRefPtrHashtable
<
nsPtrHashKey
<
void
>
gfx
:
:
DataSourceSurface
>
mDataSurfaces
;
gfx
:
:
ReferencePtr
mMappedSurface
;
UniquePtr
<
gfx
:
:
DataSourceSurface
:
:
ScopedMap
>
mPreparedMap
;
Atomic
<
bool
>
mDeactivated
{
false
}
;
Atomic
<
bool
>
mBlocked
{
false
}
;
Atomic
<
bool
>
mIPDLClosed
{
false
}
;
bool
mIsInTransaction
=
false
;
bool
mDeviceResetInProgress
=
false
;
RefPtr
<
gfx
:
:
DataSourceSurface
>
mUsedDataSurfaceForSurfaceDescriptor
;
RefPtr
<
gfx
:
:
DataSourceSurfaceWrapper
>
mUsedWrapperForSurfaceDescriptor
;
Maybe
<
SurfaceDescriptorRemoteDecoder
>
mUsedSurfaceDescriptorForSurfaceDescriptor
;
Mutex
mCanvasTranslatorEventsLock
;
RefPtr
<
nsIRunnable
>
mCanvasTranslatorEventsRunnable
;
std
:
:
deque
<
UniquePtr
<
CanvasTranslatorEvent
>
>
mPendingCanvasTranslatorEvents
;
}
;
}
}
#
endif
