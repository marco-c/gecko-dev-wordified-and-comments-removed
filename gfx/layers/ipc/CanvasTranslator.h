#
ifndef
mozilla_layers_CanvasTranslator_h
#
define
mozilla_layers_CanvasTranslator_h
#
include
<
unordered_map
>
#
include
<
vector
>
#
include
"
mozilla
/
gfx
/
InlineTranslator
.
h
"
#
include
"
mozilla
/
gfx
/
RecordedEvent
.
h
"
#
include
"
CanvasChild
.
h
"
#
include
"
mozilla
/
layers
/
CanvasDrawEventRecorder
.
h
"
#
include
"
mozilla
/
layers
/
LayersSurfaces
.
h
"
#
include
"
mozilla
/
layers
/
PCanvasParent
.
h
"
#
include
"
mozilla
/
ipc
/
CrossProcessSemaphore
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
using
EventType
=
gfx
:
:
RecordedEvent
:
:
EventType
;
class
TaskQueue
;
namespace
layers
{
class
TextureData
;
class
CanvasTranslator
final
:
public
gfx
:
:
InlineTranslator
public
PCanvasParent
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CanvasTranslator
)
friend
class
PProtocolParent
;
CanvasTranslator
(
)
;
void
DispatchToTaskQueue
(
already_AddRefed
<
nsIRunnable
>
aRunnable
)
;
bool
IsInTaskQueue
(
)
const
;
ipc
:
:
IPCResult
RecvInitTranslator
(
const
TextureType
&
aTextureType
Handle
&
&
aReadHandle
nsTArray
<
Handle
>
&
&
aBufferHandles
uint64_t
aBufferSize
CrossProcessSemaphoreHandle
&
&
aReaderSem
CrossProcessSemaphoreHandle
&
&
aWriterSem
bool
aUseIPDLThread
)
;
ipc
:
:
IPCResult
RecvRestartTranslation
(
)
;
ipc
:
:
IPCResult
RecvAddBuffer
(
Handle
&
&
aBufferHandle
uint64_t
aBufferSize
)
;
ipc
:
:
IPCResult
RecvSetDataSurfaceBuffer
(
Handle
&
&
aBufferHandle
uint64_t
aBufferSize
)
;
void
ActorDestroy
(
ActorDestroyReason
why
)
final
;
void
CheckAndSignalWriter
(
)
;
void
TranslateRecording
(
)
;
void
BeginTransaction
(
)
;
void
EndTransaction
(
)
;
void
Flush
(
)
;
void
DeviceChangeAcknowledged
(
)
;
void
SetNextTextureId
(
int64_t
aNextTextureId
)
{
mNextTextureId
=
aNextTextureId
;
}
already_AddRefed
<
gfx
:
:
DrawTarget
>
CreateDrawTarget
(
gfx
:
:
ReferencePtr
aRefPtr
const
gfx
:
:
IntSize
&
aSize
gfx
:
:
SurfaceFormat
aFormat
)
final
;
already_AddRefed
<
gfx
:
:
GradientStops
>
GetOrCreateGradientStops
(
gfx
:
:
GradientStop
*
aRawStops
uint32_t
aNumStops
gfx
:
:
ExtendMode
aExtendMode
)
final
;
TextureData
*
LookupTextureData
(
int64_t
aTextureId
)
;
void
CheckpointReached
(
)
;
void
PauseTranslation
(
)
;
void
RemoveTexture
(
int64_t
aTextureId
)
;
void
AddSourceSurface
(
gfx
:
:
ReferencePtr
aRefPtr
gfx
:
:
SourceSurface
*
aSurface
)
final
{
if
(
mMappedSurface
=
=
aRefPtr
)
{
mPreparedMap
=
nullptr
;
mMappedSurface
=
nullptr
;
}
RemoveDataSurface
(
aRefPtr
)
;
InlineTranslator
:
:
AddSourceSurface
(
aRefPtr
aSurface
)
;
}
void
RemoveSourceSurface
(
gfx
:
:
ReferencePtr
aRefPtr
)
final
{
if
(
mMappedSurface
=
=
aRefPtr
)
{
mPreparedMap
=
nullptr
;
mMappedSurface
=
nullptr
;
}
RemoveDataSurface
(
aRefPtr
)
;
InlineTranslator
:
:
RemoveSourceSurface
(
aRefPtr
)
;
}
already_AddRefed
<
gfx
:
:
SourceSurface
>
LookupExternalSurface
(
uint64_t
aKey
)
final
;
gfx
:
:
DataSourceSurface
*
LookupDataSurface
(
gfx
:
:
ReferencePtr
aRefPtr
)
;
void
AddDataSurface
(
gfx
:
:
ReferencePtr
aRefPtr
RefPtr
<
gfx
:
:
DataSourceSurface
>
&
&
aSurface
)
;
void
RemoveDataSurface
(
gfx
:
:
ReferencePtr
aRefPtr
)
;
void
SetPreparedMap
(
gfx
:
:
ReferencePtr
aSurface
UniquePtr
<
gfx
:
:
DataSourceSurface
:
:
ScopedMap
>
aMap
)
;
UniquePtr
<
gfx
:
:
DataSourceSurface
:
:
ScopedMap
>
GetPreparedMap
(
gfx
:
:
ReferencePtr
aSurface
)
;
void
RecycleBuffer
(
)
;
void
NextBuffer
(
)
;
void
GetDataSurface
(
uint64_t
aSurfaceRef
)
;
private
:
~
CanvasTranslator
(
)
;
void
AddBuffer
(
Handle
&
&
aBufferHandle
size_t
aBufferSize
)
;
void
SetDataSurfaceBuffer
(
Handle
&
&
aBufferHandle
size_t
aBufferSize
)
;
bool
ReadNextEvent
(
EventType
&
aEventType
)
;
bool
HasPendingEvent
(
)
;
bool
ReadPendingEvent
(
EventType
&
aEventType
)
;
void
FinishShutdown
(
)
;
bool
CheckDeactivated
(
)
;
void
Deactivate
(
)
;
TextureData
*
CreateTextureData
(
TextureType
aTextureType
const
gfx
:
:
IntSize
&
aSize
gfx
:
:
SurfaceFormat
aFormat
)
;
void
AddSurfaceDescriptor
(
int64_t
aTextureId
TextureData
*
atextureData
)
;
bool
HandleExtensionEvent
(
int32_t
aType
)
;
bool
CreateReferenceTexture
(
)
;
bool
CheckForFreshCanvasDevice
(
int
aLineNumber
)
;
void
NotifyDeviceChanged
(
)
;
RefPtr
<
TaskQueue
>
mTranslationTaskQueue
;
#
if
defined
(
XP_WIN
)
RefPtr
<
ID3D11Device
>
mDevice
;
#
endif
size_t
mDefaultBufferSize
;
uint32_t
mMaxSpinCount
;
TimeDuration
mNextEventTimeout
;
using
State
=
CanvasDrawEventRecorder
:
:
State
;
using
Header
=
CanvasDrawEventRecorder
:
:
Header
;
RefPtr
<
ipc
:
:
SharedMemoryBasic
>
mHeaderShmem
;
Header
*
mHeader
=
nullptr
;
struct
CanvasShmem
{
RefPtr
<
ipc
:
:
SharedMemoryBasic
>
shmem
;
auto
Size
(
)
{
return
shmem
-
>
Size
(
)
;
}
gfx
:
:
MemReader
CreateMemReader
(
)
{
return
{
static_cast
<
char
*
>
(
shmem
-
>
memory
(
)
)
Size
(
)
}
;
}
}
;
std
:
:
queue
<
CanvasShmem
>
mCanvasShmems
;
CanvasShmem
mCurrentShmem
;
gfx
:
:
MemReader
mCurrentMemReader
{
0
0
}
;
RefPtr
<
ipc
:
:
SharedMemoryBasic
>
mDataSurfaceShmem
;
UniquePtr
<
CrossProcessSemaphore
>
mWriterSemaphore
;
UniquePtr
<
CrossProcessSemaphore
>
mReaderSemaphore
;
TextureType
mTextureType
=
TextureType
:
:
Unknown
;
UniquePtr
<
TextureData
>
mReferenceTextureData
;
gfx
:
:
BackendType
mBackendType
=
gfx
:
:
BackendType
:
:
NONE
;
typedef
std
:
:
unordered_map
<
int64_t
UniquePtr
<
TextureData
>
>
TextureMap
;
TextureMap
mTextureDatas
;
int64_t
mNextTextureId
=
-
1
;
nsRefPtrHashtable
<
nsPtrHashKey
<
void
>
gfx
:
:
DataSourceSurface
>
mDataSurfaces
;
gfx
:
:
ReferencePtr
mMappedSurface
;
UniquePtr
<
gfx
:
:
DataSourceSurface
:
:
ScopedMap
>
mPreparedMap
;
Atomic
<
bool
>
mDeactivated
{
false
}
;
bool
mIsInTransaction
=
false
;
bool
mDeviceResetInProgress
=
false
;
}
;
}
}
#
endif
