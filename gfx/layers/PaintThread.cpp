#
include
"
PaintThread
.
h
"
#
include
"
mozilla
/
gfx
/
DrawEventRecorder
.
h
"
#
include
"
mozilla
/
gfx
/
InlineTranslator
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
gfx
;
StaticAutoPtr
<
PaintThread
>
PaintThread
:
:
sSingleton
;
void
PaintThread
:
:
Release
(
)
{
}
void
PaintThread
:
:
AddRef
(
)
{
}
void
PaintThread
:
:
InitOnPaintThread
(
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
mThreadId
=
PlatformThread
:
:
CurrentId
(
)
;
}
bool
PaintThread
:
:
Init
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsresult
rv
=
NS_NewNamedThread
(
"
PaintThread
"
getter_AddRefs
(
mThread
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
nsCOMPtr
<
nsIRunnable
>
paintInitTask
=
NewRunnableMethod
(
this
&
PaintThread
:
:
InitOnPaintThread
)
;
SyncRunnable
:
:
DispatchToThread
(
PaintThread
:
:
sSingleton
-
>
mThread
paintInitTask
)
;
return
true
;
}
void
PaintThread
:
:
Start
(
)
{
PaintThread
:
:
sSingleton
=
new
PaintThread
(
)
;
if
(
!
PaintThread
:
:
sSingleton
-
>
Init
(
)
)
{
gfxCriticalNote
<
<
"
Unable
to
start
paint
thread
"
;
PaintThread
:
:
sSingleton
=
nullptr
;
}
}
PaintThread
*
PaintThread
:
:
Get
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
PaintThread
:
:
sSingleton
.
get
(
)
;
}
void
PaintThread
:
:
Shutdown
(
)
{
if
(
!
PaintThread
:
:
sSingleton
)
{
return
;
}
PaintThread
:
:
sSingleton
-
>
ShutdownImpl
(
)
;
PaintThread
:
:
sSingleton
=
nullptr
;
}
void
PaintThread
:
:
ShutdownImpl
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
PaintThread
:
:
sSingleton
-
>
mThread
-
>
AsyncShutdown
(
)
;
}
bool
PaintThread
:
:
IsOnPaintThread
(
)
{
MOZ_ASSERT
(
mThread
)
;
return
PlatformThread
:
:
CurrentId
(
)
=
=
mThreadId
;
}
void
PaintThread
:
:
PaintContents
(
DrawEventRecorderMemory
*
aRecording
DrawTarget
*
aTarget
)
{
if
(
!
IsOnPaintThread
(
)
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIRunnable
>
paintTask
=
NewRunnableMethod
<
DrawEventRecorderMemory
*
DrawTarget
*
>
(
this
&
PaintThread
:
:
PaintContents
aRecording
aTarget
)
;
SyncRunnable
:
:
DispatchToThread
(
mThread
paintTask
)
;
return
;
}
std
:
:
istream
&
stream
=
aRecording
-
>
GetInputStream
(
)
;
InlineTranslator
translator
(
aTarget
nullptr
)
;
translator
.
TranslateRecording
(
stream
)
;
}
}
}
