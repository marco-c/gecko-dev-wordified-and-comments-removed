#
include
"
PaintThread
.
h
"
#
include
"
base
/
task
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
gfx
;
StaticAutoPtr
<
PaintThread
>
PaintThread
:
:
sSingleton
;
StaticRefPtr
<
nsIThread
>
PaintThread
:
:
sThread
;
PlatformThreadId
PaintThread
:
:
sThreadId
;
void
PaintThread
:
:
Release
(
)
{
}
void
PaintThread
:
:
AddRef
(
)
{
}
void
PaintThread
:
:
InitOnPaintThread
(
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
sThreadId
=
PlatformThread
:
:
CurrentId
(
)
;
}
bool
PaintThread
:
:
Init
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
nsIThread
>
thread
;
nsresult
rv
=
NS_NewNamedThread
(
"
PaintThread
"
getter_AddRefs
(
thread
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
sThread
=
thread
;
nsCOMPtr
<
nsIRunnable
>
paintInitTask
=
NewRunnableMethod
(
"
PaintThread
:
:
InitOnPaintThread
"
this
&
PaintThread
:
:
InitOnPaintThread
)
;
SyncRunnable
:
:
DispatchToThread
(
sThread
paintInitTask
)
;
return
true
;
}
void
PaintThread
:
:
Start
(
)
{
PaintThread
:
:
sSingleton
=
new
PaintThread
(
)
;
if
(
!
PaintThread
:
:
sSingleton
-
>
Init
(
)
)
{
gfxCriticalNote
<
<
"
Unable
to
start
paint
thread
"
;
PaintThread
:
:
sSingleton
=
nullptr
;
}
}
PaintThread
*
PaintThread
:
:
Get
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
PaintThread
:
:
sSingleton
.
get
(
)
;
}
void
DestroyPaintThread
(
UniquePtr
<
PaintThread
>
&
&
pt
)
{
MOZ_ASSERT
(
PaintThread
:
:
IsOnPaintThread
(
)
)
;
pt
-
>
ShutdownOnPaintThread
(
)
;
}
void
PaintThread
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
UniquePtr
<
PaintThread
>
pt
(
sSingleton
.
forget
(
)
)
;
if
(
!
pt
)
{
return
;
}
sThread
-
>
Dispatch
(
NewRunnableFunction
(
DestroyPaintThread
Move
(
pt
)
)
)
;
sThread
-
>
Shutdown
(
)
;
sThread
=
nullptr
;
}
void
PaintThread
:
:
ShutdownOnPaintThread
(
)
{
MOZ_ASSERT
(
IsOnPaintThread
(
)
)
;
}
bool
PaintThread
:
:
IsOnPaintThread
(
)
{
return
sThreadId
=
=
PlatformThread
:
:
CurrentId
(
)
;
}
void
PaintThread
:
:
PaintContentsAsync
(
gfx
:
:
DrawTargetCapture
*
aCapture
gfx
:
:
DrawTarget
*
aTarget
)
{
MOZ_ASSERT
(
IsOnPaintThread
(
)
)
;
aTarget
-
>
DrawCapturedDT
(
aCapture
Matrix
(
)
)
;
}
void
PaintThread
:
:
PaintContents
(
DrawTargetCapture
*
aCapture
DrawTarget
*
aTarget
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
DrawTargetCapture
>
capture
(
aCapture
)
;
RefPtr
<
DrawTarget
>
target
(
aTarget
)
;
RefPtr
<
PaintThread
>
self
=
this
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
PaintThread
:
:
PaintContents
"
[
self
capture
target
]
(
)
-
>
void
{
self
-
>
PaintContentsAsync
(
capture
target
)
;
}
)
;
SyncRunnable
:
:
DispatchToThread
(
sThread
task
)
;
return
;
}
}
}
