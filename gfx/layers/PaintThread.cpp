#
include
"
PaintThread
.
h
"
#
include
"
base
/
task
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
ShadowLayers
.
h
"
#
include
"
mozilla
/
layers
/
SyncObject
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
gfx
;
StaticAutoPtr
<
PaintThread
>
PaintThread
:
:
sSingleton
;
StaticRefPtr
<
nsIThread
>
PaintThread
:
:
sThread
;
PlatformThreadId
PaintThread
:
:
sThreadId
;
struct
MOZ_STACK_CLASS
AutoCapturedPaintSetup
{
AutoCapturedPaintSetup
(
CapturedPaintState
*
aState
CompositorBridgeChild
*
aBridge
)
:
mState
(
aState
)
mTarget
(
aState
-
>
mTargetDual
)
mRestorePermitsSubpixelAA
(
mTarget
-
>
GetPermitSubpixelAA
(
)
)
mOldTransform
(
mTarget
-
>
GetTransform
(
)
)
mBridge
(
aBridge
)
{
mTarget
-
>
SetTransform
(
aState
-
>
mCapture
-
>
GetTransform
(
)
)
;
mTarget
-
>
SetPermitSubpixelAA
(
aState
-
>
mCapture
-
>
GetPermitSubpixelAA
(
)
)
;
}
~
AutoCapturedPaintSetup
(
)
{
mTarget
-
>
SetTransform
(
mOldTransform
)
;
mTarget
-
>
SetPermitSubpixelAA
(
mRestorePermitsSubpixelAA
)
;
if
(
mBridge
)
{
mBridge
-
>
NotifyFinishedAsyncPaint
(
mState
)
;
}
}
RefPtr
<
CapturedPaintState
>
mState
;
RefPtr
<
DrawTarget
>
mTarget
;
bool
mRestorePermitsSubpixelAA
;
Matrix
mOldTransform
;
RefPtr
<
CompositorBridgeChild
>
mBridge
;
}
;
PaintThread
:
:
PaintThread
(
)
:
mInAsyncPaintGroup
(
false
)
{
}
void
PaintThread
:
:
Release
(
)
{
}
void
PaintThread
:
:
AddRef
(
)
{
}
void
PaintThread
:
:
Start
(
)
{
PaintThread
:
:
sSingleton
=
new
PaintThread
(
)
;
if
(
!
PaintThread
:
:
sSingleton
-
>
Init
(
)
)
{
gfxCriticalNote
<
<
"
Unable
to
start
paint
thread
"
;
PaintThread
:
:
sSingleton
=
nullptr
;
}
}
bool
PaintThread
:
:
Init
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
nsIThread
>
thread
;
nsresult
rv
=
NS_NewNamedThread
(
"
PaintThread
"
getter_AddRefs
(
thread
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
sThread
=
thread
;
nsCOMPtr
<
nsIRunnable
>
paintInitTask
=
NewRunnableMethod
(
"
PaintThread
:
:
InitOnPaintThread
"
this
&
PaintThread
:
:
InitOnPaintThread
)
;
SyncRunnable
:
:
DispatchToThread
(
sThread
paintInitTask
)
;
return
true
;
}
void
PaintThread
:
:
InitOnPaintThread
(
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
sThreadId
=
PlatformThread
:
:
CurrentId
(
)
;
}
void
DestroyPaintThread
(
UniquePtr
<
PaintThread
>
&
&
pt
)
{
MOZ_ASSERT
(
PaintThread
:
:
IsOnPaintThread
(
)
)
;
pt
-
>
ShutdownOnPaintThread
(
)
;
}
void
PaintThread
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
UniquePtr
<
PaintThread
>
pt
(
sSingleton
.
forget
(
)
)
;
if
(
!
pt
)
{
return
;
}
sThread
-
>
Dispatch
(
NewRunnableFunction
(
DestroyPaintThread
Move
(
pt
)
)
)
;
sThread
-
>
Shutdown
(
)
;
sThread
=
nullptr
;
}
void
PaintThread
:
:
ShutdownOnPaintThread
(
)
{
MOZ_ASSERT
(
IsOnPaintThread
(
)
)
;
}
PaintThread
*
PaintThread
:
:
Get
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
PaintThread
:
:
sSingleton
.
get
(
)
;
}
bool
PaintThread
:
:
IsOnPaintThread
(
)
{
return
sThreadId
=
=
PlatformThread
:
:
CurrentId
(
)
;
}
void
PaintThread
:
:
BeginLayerTransaction
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mInAsyncPaintGroup
)
;
}
void
PaintThread
:
:
PaintContents
(
CapturedPaintState
*
aState
PrepDrawTargetForPaintingCallback
aCallback
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aState
)
;
RefPtr
<
CompositorBridgeChild
>
cbc
;
if
(
!
gfxPrefs
:
:
LayersOMTPForceSync
(
)
)
{
cbc
=
CompositorBridgeChild
:
:
Get
(
)
;
cbc
-
>
NotifyBeginAsyncPaint
(
aState
)
;
}
RefPtr
<
CapturedPaintState
>
state
(
aState
)
;
RefPtr
<
PaintThread
>
self
=
this
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
PaintThread
:
:
PaintContents
"
[
self
cbc
state
aCallback
]
(
)
-
>
void
{
self
-
>
AsyncPaintContents
(
cbc
state
aCallback
)
;
}
)
;
if
(
cbc
)
{
sThread
-
>
Dispatch
(
task
.
forget
(
)
)
;
}
else
{
SyncRunnable
:
:
DispatchToThread
(
sThread
task
)
;
}
}
void
PaintThread
:
:
AsyncPaintContents
(
CompositorBridgeChild
*
aBridge
CapturedPaintState
*
aState
PrepDrawTargetForPaintingCallback
aCallback
)
{
MOZ_ASSERT
(
IsOnPaintThread
(
)
)
;
MOZ_ASSERT
(
aState
)
;
if
(
!
mInAsyncPaintGroup
)
{
mInAsyncPaintGroup
=
true
;
PROFILER_TRACING
(
"
Paint
"
"
Rasterize
"
TRACING_INTERVAL_START
)
;
}
DrawTarget
*
target
=
aState
-
>
mTargetDual
;
DrawTargetCapture
*
capture
=
aState
-
>
mCapture
;
AutoCapturedPaintSetup
setup
(
aState
aBridge
)
;
if
(
!
aCallback
(
aState
)
)
{
return
;
}
target
-
>
DrawCapturedDT
(
capture
Matrix
(
)
)
;
if
(
!
mDrawTargetsToFlush
.
Contains
(
target
)
)
{
mDrawTargetsToFlush
.
AppendElement
(
target
)
;
}
if
(
gfxPrefs
:
:
LayersOMTPReleaseCaptureOnMainThread
(
)
)
{
NS_ReleaseOnMainThreadSystemGroup
(
"
CapturePaintState
:
:
DrawTargetCapture
"
aState
-
>
mCapture
.
forget
(
)
)
;
}
}
void
PaintThread
:
:
EndLayer
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
PaintThread
>
self
=
this
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
PaintThread
:
:
AsyncEndLayer
"
[
self
]
(
)
-
>
void
{
self
-
>
AsyncEndLayer
(
)
;
}
)
;
if
(
!
gfxPrefs
:
:
LayersOMTPForceSync
(
)
)
{
sThread
-
>
Dispatch
(
task
.
forget
(
)
)
;
}
else
{
SyncRunnable
:
:
DispatchToThread
(
sThread
task
)
;
}
}
void
PaintThread
:
:
AsyncEndLayer
(
)
{
MOZ_ASSERT
(
IsOnPaintThread
(
)
)
;
for
(
size_t
i
=
0
;
i
<
mDrawTargetsToFlush
.
Length
(
)
;
i
+
+
)
{
mDrawTargetsToFlush
[
i
]
-
>
Flush
(
)
;
}
mDrawTargetsToFlush
.
Clear
(
)
;
}
void
PaintThread
:
:
EndLayerTransaction
(
SyncObjectClient
*
aSyncObject
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
CompositorBridgeChild
>
cbc
;
if
(
!
gfxPrefs
:
:
LayersOMTPForceSync
(
)
)
{
cbc
=
CompositorBridgeChild
:
:
Get
(
)
;
cbc
-
>
NotifyBeginAsyncEndLayerTransaction
(
)
;
}
RefPtr
<
SyncObjectClient
>
syncObject
(
aSyncObject
)
;
RefPtr
<
PaintThread
>
self
=
this
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
PaintThread
:
:
AsyncEndLayerTransaction
"
[
self
cbc
syncObject
]
(
)
-
>
void
{
self
-
>
AsyncEndLayerTransaction
(
cbc
syncObject
)
;
}
)
;
if
(
cbc
)
{
sThread
-
>
Dispatch
(
task
.
forget
(
)
)
;
}
else
{
SyncRunnable
:
:
DispatchToThread
(
sThread
task
)
;
}
}
void
PaintThread
:
:
AsyncEndLayerTransaction
(
CompositorBridgeChild
*
aBridge
SyncObjectClient
*
aSyncObject
)
{
MOZ_ASSERT
(
IsOnPaintThread
(
)
)
;
MOZ_ASSERT
(
mInAsyncPaintGroup
)
;
if
(
aSyncObject
)
{
aSyncObject
-
>
Synchronize
(
)
;
}
mInAsyncPaintGroup
=
false
;
PROFILER_TRACING
(
"
Paint
"
"
Rasterize
"
TRACING_INTERVAL_END
)
;
if
(
aBridge
)
{
aBridge
-
>
NotifyFinishedAsyncEndLayerTransaction
(
)
;
}
}
}
}
