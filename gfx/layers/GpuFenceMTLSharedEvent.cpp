#
include
"
GpuFenceMTLSharedEvent
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
namespace
mozilla
{
namespace
layers
{
RefPtr
<
GpuFenceMTLSharedEvent
>
GpuFenceMTLSharedEvent
:
:
Create
(
UniquePtr
<
webgpu
:
:
ffi
:
:
WGPUMetalSharedEventHandle
>
&
&
aSharedEventHandle
const
uint64_t
aFenceValue
)
{
if
(
!
aSharedEventHandle
)
{
MOZ_ASSERT_UNREACHABLE
(
"
unexpected
to
be
called
"
)
;
return
nullptr
;
}
return
new
GpuFenceMTLSharedEvent
(
std
:
:
move
(
aSharedEventHandle
)
aFenceValue
)
;
}
GpuFenceMTLSharedEvent
:
:
GpuFenceMTLSharedEvent
(
UniquePtr
<
webgpu
:
:
ffi
:
:
WGPUMetalSharedEventHandle
>
&
&
aSharedEventHandle
const
uint64_t
aFenceValue
)
:
mSharedEventHandle
(
std
:
:
move
(
aSharedEventHandle
)
)
mFenceValue
(
aFenceValue
)
{
}
bool
GpuFenceMTLSharedEvent
:
:
HasCompleted
(
)
{
auto
value
=
wgpu_server_metal_shared_event_signaled_value
(
mSharedEventHandle
.
get
(
)
)
;
return
value
>
=
mFenceValue
;
}
}
}
