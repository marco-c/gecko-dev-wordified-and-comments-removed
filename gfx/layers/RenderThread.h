#
ifndef
MOZILLA_LAYERS_RENDERTHREAD_H
#
define
MOZILLA_LAYERS_RENDERTHREAD_H
#
include
"
base
/
basictypes
.
h
"
#
include
"
base
/
platform_thread
.
h
"
#
include
"
base
/
thread
.
h
"
#
include
"
base
/
message_loop
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
ThreadSafeRefcountingWithMainThreadDestruction
.
h
"
#
include
"
mozilla
/
gfx
/
webrender
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
namespace
layers
{
class
RendererOGL
;
class
RenderThread
;
class
RendererEvent
{
public
:
virtual
~
RendererEvent
(
)
{
}
virtual
void
Run
(
RenderThread
&
aRenderThread
wr
:
:
WindowId
aWindow
)
;
}
;
class
RenderThread
final
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING_WITH_MAIN_THREAD_DESTRUCTION
(
RenderThread
)
public
:
static
RenderThread
*
Get
(
)
;
static
void
Start
(
)
;
static
void
ShutDown
(
)
;
static
MessageLoop
*
Loop
(
)
;
static
bool
IsInRenderThread
(
)
;
void
AddRenderer
(
wr
:
:
WindowId
aWindowId
UniquePtr
<
RendererOGL
>
aRenderer
)
;
void
RemoveRenderer
(
wr
:
:
WindowId
aWindowId
)
;
void
NewFrameReady
(
wr
:
:
WindowId
aWindowId
)
;
void
NewScrollFrameReady
(
wr
:
:
WindowId
aWindowId
bool
aCompositeNeeded
)
;
void
PipelineSizeChanged
(
wr
:
:
WindowId
aWindowId
uint64_t
aPipelineId
float
aWidth
float
aHeight
)
;
void
RunEvent
(
wr
:
:
WindowId
aWindowId
UniquePtr
<
RendererEvent
>
aCallBack
)
;
private
:
RenderThread
(
base
:
:
Thread
*
aThread
)
;
~
RenderThread
(
)
;
void
UpdateAndRender
(
wr
:
:
WindowId
aWindowId
)
;
base
:
:
Thread
*
const
mThread
;
std
:
:
map
<
wr
:
:
WindowId
UniquePtr
<
RendererOGL
>
>
mRenderers
;
}
;
}
}
#
endif
