#
ifndef
GFX_GPU_VIDEO_IMAGE_H
#
define
GFX_GPU_VIDEO_IMAGE_H
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
mozilla
/
layers
/
GPUVideoTextureClient
.
h
"
#
include
"
mozilla
/
layers
/
CompositableClient
.
h
"
#
include
"
mozilla
/
layers
/
ImageBridgeChild
.
h
"
namespace
mozilla
{
namespace
dom
{
class
VideoDecoderManagerChild
;
}
namespace
layers
{
class
GPUVideoImage
final
:
public
Image
{
public
:
GPUVideoImage
(
dom
:
:
VideoDecoderManagerChild
*
aManager
const
SurfaceDescriptorGPUVideo
&
aSD
const
gfx
:
:
IntSize
&
aSize
)
:
Image
(
nullptr
ImageFormat
:
:
GPU_VIDEO
)
mSize
(
aSize
)
{
mTextureClient
=
TextureClient
:
:
CreateWithData
(
new
GPUVideoTextureData
(
aManager
aSD
aSize
)
TextureFlags
:
:
RECYCLE
ImageBridgeChild
:
:
GetSingleton
(
)
.
get
(
)
)
;
}
~
GPUVideoImage
(
)
override
{
}
gfx
:
:
IntSize
GetSize
(
)
override
{
return
mSize
;
}
virtual
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetAsSourceSurface
(
)
override
{
if
(
!
mTextureClient
)
{
return
nullptr
;
}
GPUVideoTextureData
*
data
=
mTextureClient
-
>
GetInternalData
(
)
-
>
AsGPUVideoTextureData
(
)
;
return
data
-
>
GetAsSourceSurface
(
)
;
}
virtual
TextureClient
*
GetTextureClient
(
KnowsCompositor
*
aForwarder
)
override
{
MOZ_ASSERT
(
aForwarder
=
=
ImageBridgeChild
:
:
GetSingleton
(
)
"
Must
only
use
GPUVideo
on
ImageBridge
"
)
;
return
mTextureClient
;
}
private
:
gfx
:
:
IntSize
mSize
;
RefPtr
<
TextureClient
>
mTextureClient
;
}
;
}
}
#
endif
