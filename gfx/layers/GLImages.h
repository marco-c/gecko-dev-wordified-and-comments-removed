#
ifndef
GFX_GLIMAGES_H
#
define
GFX_GLIMAGES_H
#
include
"
GLContextTypes
.
h
"
#
include
"
GLTypes
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
ImageTypes
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
namespace
mozilla
{
namespace
gl
{
class
AndroidSurfaceTexture
;
}
namespace
layers
{
class
GLImage
:
public
Image
{
public
:
explicit
GLImage
(
ImageFormat
aFormat
)
:
Image
(
nullptr
aFormat
)
{
}
virtual
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetAsSourceSurface
(
)
override
;
}
;
class
EGLImageImage
:
public
GLImage
{
public
:
EGLImageImage
(
EGLImage
aImage
EGLSync
aSync
const
gfx
:
:
IntSize
&
aSize
const
gl
:
:
OriginPos
&
aOrigin
bool
aOwns
)
;
gfx
:
:
IntSize
GetSize
(
)
override
{
return
mSize
;
}
gl
:
:
OriginPos
GetOriginPos
(
)
const
{
return
mPos
;
}
EGLImage
GetImage
(
)
const
{
return
mImage
;
}
EGLSync
GetSync
(
)
const
{
return
mSync
;
}
EGLImageImage
*
AsEGLImageImage
(
)
override
{
return
this
;
}
protected
:
virtual
~
EGLImageImage
(
)
;
private
:
EGLImage
mImage
;
EGLSync
mSync
;
gfx
:
:
IntSize
mSize
;
gl
:
:
OriginPos
mPos
;
bool
mOwns
;
}
;
#
ifdef
MOZ_WIDGET_ANDROID
class
SurfaceTextureImage
:
public
GLImage
{
public
:
SurfaceTextureImage
(
gl
:
:
AndroidSurfaceTexture
*
aSurfTex
const
gfx
:
:
IntSize
&
aSize
gl
:
:
OriginPos
aOriginPos
)
;
gfx
:
:
IntSize
GetSize
(
)
override
{
return
mSize
;
}
gl
:
:
AndroidSurfaceTexture
*
GetSurfaceTexture
(
)
const
{
return
mSurfaceTexture
;
}
gl
:
:
OriginPos
GetOriginPos
(
)
const
{
return
mOriginPos
;
}
SurfaceTextureImage
*
AsSurfaceTextureImage
(
)
override
{
return
this
;
}
private
:
gl
:
:
AndroidSurfaceTexture
*
mSurfaceTexture
;
gfx
:
:
IntSize
mSize
;
gl
:
:
OriginPos
mOriginPos
;
}
;
#
endif
}
}
#
endif
