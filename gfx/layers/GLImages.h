#
ifndef
GFX_GLIMAGES_H
#
define
GFX_GLIMAGES_H
#
include
"
GLContextTypes
.
h
"
#
include
"
GLTypes
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
ImageTypes
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
ifdef
MOZ_WIDGET_ANDROID
#
include
"
AndroidSurfaceTexture
.
h
"
#
endif
namespace
mozilla
{
namespace
layers
{
class
GLImage
:
public
Image
{
public
:
explicit
GLImage
(
ImageFormat
aFormat
)
:
Image
(
nullptr
aFormat
)
{
}
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetAsSourceSurface
(
)
override
;
nsresult
BuildSurfaceDescriptorBuffer
(
SurfaceDescriptorBuffer
&
aSdBuffer
BuildSdbFlags
aFlags
const
std
:
:
function
<
MemoryOrShmem
(
uint32_t
)
>
&
aAllocate
)
override
;
GLImage
*
AsGLImage
(
)
override
{
return
this
;
}
protected
:
nsresult
ReadIntoBuffer
(
uint8_t
*
aData
int32_t
aStride
const
gfx
:
:
IntSize
&
aSize
gfx
:
:
SurfaceFormat
aFormat
)
;
}
;
#
ifdef
MOZ_WIDGET_ANDROID
class
SurfaceTextureImage
final
:
public
GLImage
{
public
:
class
SetCurrentCallback
{
public
:
virtual
void
operator
(
)
(
void
)
=
0
;
virtual
~
SetCurrentCallback
(
)
{
}
}
;
SurfaceTextureImage
(
AndroidSurfaceTextureHandle
aHandle
const
gfx
:
:
IntSize
&
aSize
bool
aContinuous
gl
:
:
OriginPos
aOriginPos
bool
aHasAlpha
Maybe
<
gfx
:
:
Matrix4x4
>
aTransformOverride
)
;
gfx
:
:
IntSize
GetSize
(
)
const
override
{
return
mSize
;
}
AndroidSurfaceTextureHandle
GetHandle
(
)
const
{
return
mHandle
;
}
bool
GetContinuous
(
)
const
{
return
mContinuous
;
}
gl
:
:
OriginPos
GetOriginPos
(
)
const
{
return
mOriginPos
;
}
bool
GetHasAlpha
(
)
const
{
return
mHasAlpha
;
}
const
Maybe
<
gfx
:
:
Matrix4x4
>
&
GetTransformOverride
(
)
const
{
return
mTransformOverride
;
}
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetAsSourceSurface
(
)
override
{
return
nullptr
;
}
nsresult
BuildSurfaceDescriptorBuffer
(
SurfaceDescriptorBuffer
&
aSdBuffer
BuildSdbFlags
aFlags
const
std
:
:
function
<
MemoryOrShmem
(
uint32_t
)
>
&
aAllocate
)
override
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
SurfaceTextureImage
*
AsSurfaceTextureImage
(
)
override
{
return
this
;
}
Maybe
<
SurfaceDescriptor
>
GetDesc
(
)
override
;
void
RegisterSetCurrentCallback
(
UniquePtr
<
SetCurrentCallback
>
aCallback
)
{
mSetCurrentCallback
=
std
:
:
move
(
aCallback
)
;
}
void
OnSetCurrent
(
)
{
if
(
mSetCurrentCallback
)
{
(
*
mSetCurrentCallback
)
(
)
;
mSetCurrentCallback
.
reset
(
)
;
}
}
private
:
AndroidSurfaceTextureHandle
mHandle
;
gfx
:
:
IntSize
mSize
;
bool
mContinuous
;
gl
:
:
OriginPos
mOriginPos
;
const
bool
mHasAlpha
;
const
Maybe
<
gfx
:
:
Matrix4x4
>
mTransformOverride
;
UniquePtr
<
SetCurrentCallback
>
mSetCurrentCallback
;
}
;
#
endif
}
}
#
endif
