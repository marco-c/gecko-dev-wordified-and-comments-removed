#
ifndef
mozilla_gfx_layers_LayersHelpers_h
#
define
mozilla_gfx_layers_LayersHelpers_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
gfx
/
Polygon
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
layers
{
class
Layer
;
gfx
:
:
IntRect
ComputeBackdropCopyRect
(
const
gfx
:
:
Rect
&
aRect
const
gfx
:
:
IntRect
&
aClipRect
const
gfx
:
:
Matrix4x4
&
aTransform
const
gfx
:
:
IntRect
&
aRenderTargetRect
gfx
:
:
Matrix4x4
*
aOutTransform
gfx
:
:
Rect
*
aOutLayerQuad
=
nullptr
)
;
template
<
typename
T
>
static
inline
gfx
:
:
Rect
TextureRectToCoords
(
const
T
&
aRect
const
gfx
:
:
IntSize
&
aSize
)
{
return
gfx
:
:
Rect
(
float
(
aRect
.
x
)
/
aSize
.
width
float
(
aRect
.
y
)
/
aSize
.
height
float
(
aRect
.
width
)
/
aSize
.
width
float
(
aRect
.
height
)
/
aSize
.
height
)
;
}
nsTArray
<
gfx
:
:
TexturedTriangle
>
GenerateTexturedTriangles
(
const
gfx
:
:
Polygon
&
aPolygon
const
gfx
:
:
Rect
&
aRect
const
gfx
:
:
Rect
&
aTexRect
)
;
void
TransformLayerGeometry
(
Layer
*
aLayer
Maybe
<
gfx
:
:
Polygon
>
&
aGeometry
)
;
}
}
#
endif
