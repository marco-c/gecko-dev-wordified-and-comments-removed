#
ifndef
GFX_BASICPAINTEDLAYER_H
#
define
GFX_BASICPAINTEDLAYER_H
#
include
"
Layers
.
h
"
#
include
"
RotatedBuffer
.
h
"
#
include
"
BasicImplData
.
h
"
#
include
"
BasicLayers
.
h
"
#
include
"
gfxPoint
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
BasePoint
.
h
"
#
include
"
mozilla
/
layers
/
ContentClient
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRegion
.
h
"
class
gfxContext
;
namespace
mozilla
{
namespace
layers
{
class
ReadbackProcessor
;
class
BasicPaintedLayer
:
public
PaintedLayer
public
BasicImplData
{
public
:
typedef
ContentClient
:
:
PaintState
PaintState
;
typedef
ContentClient
:
:
ContentType
ContentType
;
BasicPaintedLayer
(
BasicLayerManager
*
aLayerManager
gfx
:
:
BackendType
aBackend
)
:
PaintedLayer
(
aLayerManager
static_cast
<
BasicImplData
*
>
(
this
)
)
mContentClient
(
nullptr
)
mBackend
(
aBackend
)
{
MOZ_COUNT_CTOR
(
BasicPaintedLayer
)
;
}
protected
:
MOZ_COUNTED_DTOR_OVERRIDE
(
BasicPaintedLayer
)
public
:
void
SetVisibleRegion
(
const
LayerIntRegion
&
aRegion
)
override
{
NS_ASSERTION
(
BasicManager
(
)
-
>
InConstruction
(
)
"
Can
only
set
properties
in
construction
phase
"
)
;
PaintedLayer
:
:
SetVisibleRegion
(
aRegion
)
;
}
void
InvalidateRegion
(
const
nsIntRegion
&
aRegion
)
override
{
NS_ASSERTION
(
BasicManager
(
)
-
>
InConstruction
(
)
"
Can
only
set
properties
in
construction
phase
"
)
;
mInvalidRegion
.
Add
(
aRegion
)
;
UpdateValidRegionAfterInvalidRegionChanged
(
)
;
}
void
PaintThebes
(
gfxContext
*
aContext
Layer
*
aMaskLayer
LayerManager
:
:
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
)
override
;
void
Validate
(
LayerManager
:
:
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
ReadbackProcessor
*
aReadback
)
override
;
void
ClearCachedResources
(
)
override
{
if
(
mContentClient
)
{
mContentClient
-
>
Clear
(
)
;
}
ClearValidRegion
(
)
;
}
void
ComputeEffectiveTransforms
(
const
gfx
:
:
Matrix4x4
&
aTransformToSurface
)
override
{
if
(
!
BasicManager
(
)
-
>
IsRetained
(
)
)
{
mEffectiveTransform
=
GetLocalTransform
(
)
*
aTransformToSurface
;
if
(
gfxPoint
(
0
0
)
!
=
mResidualTranslation
)
{
mResidualTranslation
=
gfxPoint
(
0
0
)
;
ClearValidRegion
(
)
;
}
ComputeEffectiveTransformForMaskLayers
(
aTransformToSurface
)
;
return
;
}
PaintedLayer
:
:
ComputeEffectiveTransforms
(
aTransformToSurface
)
;
}
BasicLayerManager
*
BasicManager
(
)
{
return
static_cast
<
BasicLayerManager
*
>
(
mManager
)
;
}
protected
:
virtual
void
PaintBuffer
(
gfxContext
*
aContext
const
nsIntRegion
&
aRegionToDraw
const
nsIntRegion
&
aExtendedRegionToDraw
const
nsIntRegion
&
aRegionToInvalidate
DrawRegionClip
aClip
LayerManager
:
:
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
)
{
if
(
!
aCallback
)
{
BasicManager
(
)
-
>
SetTransactionIncomplete
(
)
;
return
;
}
aCallback
(
this
aContext
aExtendedRegionToDraw
aExtendedRegionToDraw
aClip
aRegionToInvalidate
aCallbackData
)
;
nsIntRegion
tmp
;
tmp
.
Or
(
mVisibleRegion
.
ToUnknownRegion
(
)
aExtendedRegionToDraw
)
;
AddToValidRegion
(
tmp
)
;
}
RefPtr
<
ContentClientBasic
>
mContentClient
;
gfx
:
:
BackendType
mBackend
;
}
;
}
}
#
endif
