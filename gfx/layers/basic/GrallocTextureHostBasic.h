#
ifndef
MOZILLA_GFX_GRALLOCTEXTUREHOST_BASIC_H
#
define
MOZILLA_GFX_GRALLOCTEXTUREHOST_BASIC_H
#
include
"
mozilla
/
layers
/
BasicCompositor
.
h
"
#
include
"
mozilla
/
layers
/
ShadowLayerUtilsGralloc
.
h
"
#
include
"
mozilla
/
layers
/
TextureHostBasic
.
h
"
namespace
mozilla
{
namespace
layers
{
class
BasicCompositor
;
class
GrallocTextureHostBasic
:
public
TextureHost
{
public
:
GrallocTextureHostBasic
(
TextureFlags
aFlags
const
SurfaceDescriptorGralloc
&
aDescriptor
)
;
virtual
void
SetCompositor
(
Compositor
*
aCompositor
)
override
;
virtual
bool
Lock
(
)
override
;
virtual
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
override
;
virtual
bool
BindTextureSource
(
CompositableTextureSourceRef
&
aTexture
)
override
;
virtual
void
UnbindTextureSource
(
)
override
;
virtual
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
GetAsSurface
(
)
override
{
return
nullptr
;
}
virtual
void
WaitAcquireFenceHandleSyncComplete
(
)
override
;
virtual
gfx
:
:
IntSize
GetSize
(
)
const
override
{
return
mCropSize
;
}
virtual
void
SetCropRect
(
nsIntRect
aCropRect
)
override
;
virtual
void
DeallocateSharedData
(
)
override
;
virtual
void
ForgetSharedData
(
)
override
;
virtual
void
DeallocateDeviceData
(
)
override
;
virtual
LayerRenderState
GetRenderState
(
)
override
;
bool
IsValid
(
)
const
;
void
ClearTextureSource
(
)
;
#
ifdef
MOZ_LAYERS_HAVE_LOG
virtual
const
char
*
Name
(
)
override
{
return
"
GrallocTextureHostBasic
"
;
}
#
endif
protected
:
RefPtr
<
BasicCompositor
>
mCompositor
;
RefPtr
<
DataTextureSource
>
mTextureSource
;
SurfaceDescriptorGralloc
mGrallocHandle
;
gfx
:
:
IntSize
mSize
;
gfx
:
:
IntSize
mCropSize
;
gfx
:
:
SurfaceFormat
mFormat
;
bool
mIsOpaque
;
uint8_t
*
mMappedBuffer
;
}
;
}
}
#
endif
