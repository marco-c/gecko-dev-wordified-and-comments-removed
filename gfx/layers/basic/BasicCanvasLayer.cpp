#
include
"
BasicCanvasLayer
.
h
"
#
include
"
basic
/
BasicLayers
.
h
"
#
include
"
basic
/
BasicLayersImpl
.
h
"
#
include
"
CanvasRenderer
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
include
"
GLScreenBuffer
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
gfxUtils
.
h
"
#
include
"
mozilla
/
layers
/
PersistentBufferProvider
.
h
"
#
include
"
client
/
TextureClientSharedSurface
.
h
"
class
gfxContext
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
gl
;
namespace
mozilla
{
namespace
layers
{
void
BasicCanvasLayer
:
:
Paint
(
DrawTarget
*
aDT
const
Point
&
aDeviceOffset
Layer
*
aMaskLayer
)
{
if
(
IsHidden
(
)
)
return
;
const
auto
&
cr
=
mCanvasRenderer
;
MOZ_ASSERT
(
cr
)
;
const
auto
snapshot
=
cr
-
>
BorrowSnapshot
(
)
;
if
(
!
snapshot
)
return
;
const
auto
&
surface
=
snapshot
-
>
mSurf
;
Maybe
<
Matrix
>
oldTM
;
if
(
!
cr
-
>
YIsDown
(
)
)
{
oldTM
=
Some
(
aDT
-
>
GetTransform
(
)
)
;
aDT
-
>
SetTransform
(
Matrix
(
*
oldTM
)
.
PreTranslate
(
0
.
0f
mBounds
.
Height
(
)
)
.
PreScale
(
1
.
0f
-
1
.
0f
)
)
;
}
FillRectWithMask
(
aDT
aDeviceOffset
Rect
(
0
0
mBounds
.
Width
(
)
mBounds
.
Height
(
)
)
surface
mSamplingFilter
DrawOptions
(
GetEffectiveOpacity
(
)
GetEffectiveOperator
(
this
)
)
aMaskLayer
)
;
if
(
oldTM
)
{
aDT
-
>
SetTransform
(
*
oldTM
)
;
}
Painted
(
)
;
}
RefPtr
<
CanvasRenderer
>
BasicCanvasLayer
:
:
CreateCanvasRendererInternal
(
)
{
return
new
CanvasRenderer
(
)
;
}
already_AddRefed
<
CanvasLayer
>
BasicLayerManager
:
:
CreateCanvasLayer
(
)
{
NS_ASSERTION
(
InConstruction
(
)
"
Only
allowed
in
construction
phase
"
)
;
RefPtr
<
CanvasLayer
>
layer
=
new
BasicCanvasLayer
(
this
)
;
return
layer
.
forget
(
)
;
}
}
}
