#
ifndef
GFX_BASICLAYERSIMPL_H
#
define
GFX_BASICLAYERSIMPL_H
#
include
"
BasicImplData
.
h
"
#
include
"
BasicLayers
.
h
"
#
include
"
ReadbackLayer
.
h
"
#
include
"
gfxContext
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRegion
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
DrawTarget
;
}
namespace
layers
{
class
AutoMoz2DMaskData
;
class
Layer
;
class
AutoSetOperator
{
typedef
mozilla
:
:
gfx
:
:
CompositionOp
CompositionOp
;
public
:
AutoSetOperator
(
gfxContext
*
aContext
CompositionOp
aOperator
)
{
if
(
aOperator
!
=
CompositionOp
:
:
OP_OVER
)
{
aContext
-
>
SetOp
(
aOperator
)
;
mContext
=
aContext
;
}
}
~
AutoSetOperator
(
)
{
if
(
mContext
)
{
mContext
-
>
SetOp
(
CompositionOp
:
:
OP_OVER
)
;
}
}
private
:
RefPtr
<
gfxContext
>
mContext
;
}
;
class
BasicReadbackLayer
:
public
ReadbackLayer
public
BasicImplData
{
public
:
explicit
BasicReadbackLayer
(
BasicLayerManager
*
aLayerManager
)
:
ReadbackLayer
(
aLayerManager
static_cast
<
BasicImplData
*
>
(
this
)
)
{
MOZ_COUNT_CTOR
(
BasicReadbackLayer
)
;
}
protected
:
virtual
~
BasicReadbackLayer
(
)
{
MOZ_COUNT_DTOR
(
BasicReadbackLayer
)
;
}
public
:
virtual
void
SetVisibleRegion
(
const
LayerIntRegion
&
aRegion
)
{
NS_ASSERTION
(
BasicManager
(
)
-
>
InConstruction
(
)
"
Can
only
set
properties
in
construction
phase
"
)
;
ReadbackLayer
:
:
SetVisibleRegion
(
aRegion
)
;
}
protected
:
BasicLayerManager
*
BasicManager
(
)
{
return
static_cast
<
BasicLayerManager
*
>
(
mManager
)
;
}
}
;
bool
GetMaskData
(
Layer
*
aMaskLayer
const
gfx
:
:
Point
&
aDeviceOffset
AutoMoz2DMaskData
*
aMaskData
)
;
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetMaskForLayer
(
Layer
*
aLayer
gfx
:
:
Matrix
*
aMaskTransform
)
;
void
PaintWithMask
(
gfxContext
*
aContext
float
aOpacity
Layer
*
aMaskLayer
)
;
void
FillRectWithMask
(
gfx
:
:
DrawTarget
*
aDT
const
gfx
:
:
Rect
&
aRect
const
gfx
:
:
Color
&
aColor
const
gfx
:
:
DrawOptions
&
aOptions
gfx
:
:
SourceSurface
*
aMaskSource
=
nullptr
const
gfx
:
:
Matrix
*
aMaskTransform
=
nullptr
)
;
void
FillRectWithMask
(
gfx
:
:
DrawTarget
*
aDT
const
gfx
:
:
Rect
&
aRect
gfx
:
:
SourceSurface
*
aSurface
gfx
:
:
SamplingFilter
aSamplingFilter
const
gfx
:
:
DrawOptions
&
aOptions
gfx
:
:
ExtendMode
aExtendMode
gfx
:
:
SourceSurface
*
aMaskSource
=
nullptr
const
gfx
:
:
Matrix
*
aMaskTransform
=
nullptr
const
gfx
:
:
Matrix
*
aSurfaceTransform
=
nullptr
)
;
void
FillRectWithMask
(
gfx
:
:
DrawTarget
*
aDT
const
gfx
:
:
Point
&
aDeviceOffset
const
gfx
:
:
Rect
&
aRect
gfx
:
:
SourceSurface
*
aSurface
gfx
:
:
SamplingFilter
aSamplingFilter
const
gfx
:
:
DrawOptions
&
aOptions
Layer
*
aMaskLayer
)
;
void
FillRectWithMask
(
gfx
:
:
DrawTarget
*
aDT
const
gfx
:
:
Point
&
aDeviceOffset
const
gfx
:
:
Rect
&
aRect
const
gfx
:
:
Color
&
aColor
const
gfx
:
:
DrawOptions
&
aOptions
Layer
*
aMaskLayer
)
;
BasicImplData
*
ToData
(
Layer
*
aLayer
)
;
gfx
:
:
CompositionOp
GetEffectiveOperator
(
Layer
*
aLayer
)
;
}
}
#
endif
