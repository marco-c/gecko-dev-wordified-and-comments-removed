#
ifndef
MOZILLA_GFX_BASICCOMPOSITOR_H
#
define
MOZILLA_GFX_BASICCOMPOSITOR_H
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Triangle
.
h
"
#
include
"
mozilla
/
gfx
/
Polygon
.
h
"
#
ifdef
XP_MACOSX
class
MacIOSurface
;
#
endif
namespace
mozilla
{
namespace
layers
{
class
BasicCompositingRenderTarget
:
public
CompositingRenderTarget
{
public
:
BasicCompositingRenderTarget
(
gfx
:
:
DrawTarget
*
aDrawTarget
const
gfx
:
:
IntRect
&
aRect
const
gfx
:
:
IntPoint
&
aClipSpaceOrigin
)
:
CompositingRenderTarget
(
aRect
.
TopLeft
(
)
)
mDrawTarget
(
aDrawTarget
)
mSize
(
aRect
.
Size
(
)
)
mClipSpaceOrigin
(
aClipSpaceOrigin
)
{
}
const
char
*
Name
(
)
const
override
{
return
"
BasicCompositingRenderTarget
"
;
}
gfx
:
:
IntSize
GetSize
(
)
const
override
{
return
mSize
;
}
gfx
:
:
IntPoint
GetClipSpaceOrigin
(
)
const
{
return
mClipSpaceOrigin
;
}
void
BindRenderTarget
(
)
;
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
override
{
return
mDrawTarget
?
mDrawTarget
-
>
GetFormat
(
)
:
gfx
:
:
SurfaceFormat
(
gfx
:
:
SurfaceFormat
:
:
UNKNOWN
)
;
}
RefPtr
<
gfx
:
:
DrawTarget
>
mDrawTarget
;
gfx
:
:
IntSize
mSize
;
gfx
:
:
IntPoint
mClipSpaceOrigin
;
}
;
class
BasicCompositor
:
public
Compositor
{
public
:
BasicCompositor
(
CompositorBridgeParent
*
aParent
widget
:
:
CompositorWidget
*
aWidget
)
;
protected
:
virtual
~
BasicCompositor
(
)
;
public
:
BasicCompositor
*
AsBasicCompositor
(
)
override
{
return
this
;
}
bool
Initialize
(
nsCString
*
const
out_failureReason
)
override
;
void
Destroy
(
)
override
;
TextureFactoryIdentifier
GetTextureFactoryIdentifier
(
)
override
;
already_AddRefed
<
CompositingRenderTarget
>
CreateRenderTarget
(
const
gfx
:
:
IntRect
&
aRect
SurfaceInitMode
aInit
)
override
;
already_AddRefed
<
CompositingRenderTarget
>
CreateRenderTargetFromSource
(
const
gfx
:
:
IntRect
&
aRect
const
CompositingRenderTarget
*
aSource
const
gfx
:
:
IntPoint
&
aSourcePoint
)
override
;
virtual
already_AddRefed
<
CompositingRenderTarget
>
CreateRootRenderTarget
(
gfx
:
:
DrawTarget
*
aDrawTarget
const
gfx
:
:
IntRect
&
aDrawTargetRect
const
gfx
:
:
IntRegion
&
aClearRegion
)
;
already_AddRefed
<
DataTextureSource
>
CreateDataTextureSource
(
TextureFlags
aFlags
=
TextureFlags
:
:
NO_FLAGS
)
override
;
already_AddRefed
<
DataTextureSource
>
CreateDataTextureSourceAround
(
gfx
:
:
DataSourceSurface
*
aSurface
)
override
;
already_AddRefed
<
DataTextureSource
>
CreateDataTextureSourceAroundYCbCr
(
TextureHost
*
aTexture
)
override
;
bool
SupportsEffect
(
EffectTypes
aEffect
)
override
;
bool
SupportsLayerGeometry
(
)
const
override
;
bool
ReadbackRenderTarget
(
CompositingRenderTarget
*
aSource
AsyncReadbackBuffer
*
aDest
)
override
;
already_AddRefed
<
AsyncReadbackBuffer
>
CreateAsyncReadbackBuffer
(
const
gfx
:
:
IntSize
&
aSize
)
override
;
bool
BlitRenderTarget
(
CompositingRenderTarget
*
aSource
const
gfx
:
:
IntSize
&
aSourceSize
const
gfx
:
:
IntSize
&
aDestSize
)
override
;
void
SetRenderTarget
(
CompositingRenderTarget
*
aSource
)
override
{
mRenderTarget
=
static_cast
<
BasicCompositingRenderTarget
*
>
(
aSource
)
;
mRenderTarget
-
>
BindRenderTarget
(
)
;
}
already_AddRefed
<
CompositingRenderTarget
>
GetWindowRenderTarget
(
)
const
override
{
return
do_AddRef
(
mFullWindowRenderTarget
)
;
}
already_AddRefed
<
CompositingRenderTarget
>
GetCurrentRenderTarget
(
)
const
override
{
return
do_AddRef
(
mRenderTarget
)
;
}
void
DrawQuad
(
const
gfx
:
:
Rect
&
aRect
const
gfx
:
:
IntRect
&
aClipRect
const
EffectChain
&
aEffectChain
gfx
:
:
Float
aOpacity
const
gfx
:
:
Matrix4x4
&
aTransform
const
gfx
:
:
Rect
&
aVisibleRect
)
override
;
void
ClearRect
(
const
gfx
:
:
Rect
&
aRect
)
override
;
Maybe
<
gfx
:
:
IntRect
>
BeginFrameForWindow
(
const
nsIntRegion
&
aInvalidRegion
const
Maybe
<
gfx
:
:
IntRect
>
&
aClipRect
const
gfx
:
:
IntRect
&
aRenderBounds
const
nsIntRegion
&
aOpaqueRegion
)
override
;
Maybe
<
gfx
:
:
IntRect
>
BeginFrameForTarget
(
const
nsIntRegion
&
aInvalidRegion
const
Maybe
<
gfx
:
:
IntRect
>
&
aClipRect
const
gfx
:
:
IntRect
&
aRenderBounds
const
nsIntRegion
&
aOpaqueRegion
gfx
:
:
DrawTarget
*
aTarget
const
gfx
:
:
IntRect
&
aTargetBounds
)
override
;
void
BeginFrameForNativeLayers
(
)
override
;
Maybe
<
gfx
:
:
IntRect
>
BeginRenderingToNativeLayer
(
const
nsIntRegion
&
aInvalidRegion
const
Maybe
<
gfx
:
:
IntRect
>
&
aClipRect
const
nsIntRegion
&
aOpaqueRegion
NativeLayer
*
aNativeLayer
)
override
;
void
EndRenderingToNativeLayer
(
)
override
;
void
NormalDrawingDone
(
)
override
;
void
EndFrame
(
)
override
;
bool
SupportsPartialTextureUpdate
(
)
override
{
return
true
;
}
bool
CanUseCanvasLayerForSize
(
const
gfx
:
:
IntSize
&
aSize
)
override
{
return
true
;
}
int32_t
GetMaxTextureSize
(
)
const
override
;
void
SetDestinationSurfaceSize
(
const
gfx
:
:
IntSize
&
aSize
)
override
{
}
void
SetScreenRenderOffset
(
const
ScreenPoint
&
aOffset
)
override
{
}
void
MakeCurrent
(
MakeCurrentFlags
aFlags
=
0
)
override
{
}
#
ifdef
MOZ_DUMP_PAINTING
const
char
*
Name
(
)
const
override
{
return
"
Basic
"
;
}
#
endif
LayersBackend
GetBackendType
(
)
const
override
{
return
LayersBackend
:
:
LAYERS_BASIC
;
}
bool
IsPendingComposite
(
)
override
{
return
mIsPendingEndRemoteDrawing
;
}
void
FinishPendingComposite
(
)
override
;
private
:
template
<
typename
Geometry
>
void
DrawGeometry
(
const
Geometry
&
aGeometry
const
gfx
:
:
Rect
&
aRect
const
gfx
:
:
IntRect
&
aClipRect
const
EffectChain
&
aEffectChain
gfx
:
:
Float
aOpacity
const
gfx
:
:
Matrix4x4
&
aTransform
const
gfx
:
:
Rect
&
aVisibleRect
const
bool
aEnableAA
)
;
void
DrawPolygon
(
const
gfx
:
:
Polygon
&
aPolygon
const
gfx
:
:
Rect
&
aRect
const
gfx
:
:
IntRect
&
aClipRect
const
EffectChain
&
aEffectChain
gfx
:
:
Float
aOpacity
const
gfx
:
:
Matrix4x4
&
aTransform
const
gfx
:
:
Rect
&
aVisibleRect
)
override
;
void
TryToEndRemoteDrawing
(
)
;
void
EndRemoteDrawing
(
)
;
bool
NeedsToDeferEndRemoteDrawing
(
)
;
bool
NeedToRecreateFullWindowRenderTarget
(
)
const
;
RefPtr
<
gfx
:
:
DrawTarget
>
mFrontBuffer
;
RefPtr
<
BasicCompositingRenderTarget
>
mRenderTarget
;
RefPtr
<
NativeLayer
>
mCurrentNativeLayer
;
#
ifdef
XP_MACOSX
RefPtr
<
MacIOSurface
>
mCurrentIOSurface
;
#
endif
gfx
:
:
IntRegion
mInvalidRegion
;
uint32_t
mMaxTextureSize
;
bool
mIsPendingEndRemoteDrawing
;
bool
mShouldInvalidateWindow
=
false
;
enum
class
FrameDestination
:
uint8_t
{
NO_CURRENT_FRAME
WINDOW
TARGET
NATIVE_LAYERS
}
;
FrameDestination
mCurrentFrameDest
=
FrameDestination
:
:
NO_CURRENT_FRAME
;
RefPtr
<
BasicCompositingRenderTarget
>
mFullWindowRenderTarget
;
RefPtr
<
CompositingRenderTarget
>
mNativeLayersReferenceRT
;
}
;
BasicCompositor
*
AssertBasicCompositor
(
Compositor
*
aCompositor
)
;
}
}
#
endif
