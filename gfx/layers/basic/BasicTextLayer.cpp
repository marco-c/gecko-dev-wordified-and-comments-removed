#
include
"
BasicLayersImpl
.
h
"
#
include
"
Layers
.
h
"
#
include
"
BasicImplData
.
h
"
#
include
"
BasicLayers
.
h
"
#
include
"
gfxContext
.
h
"
#
include
"
gfxRect
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
mozilla
/
gfx
/
PathHelpers
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
using
namespace
mozilla
:
:
gfx
;
namespace
mozilla
{
namespace
layers
{
class
BasicTextLayer
:
public
TextLayer
public
BasicImplData
{
public
:
explicit
BasicTextLayer
(
BasicLayerManager
*
aLayerManager
)
:
TextLayer
(
aLayerManager
static_cast
<
BasicImplData
*
>
(
this
)
)
{
MOZ_COUNT_CTOR
(
BasicTextLayer
)
;
}
protected
:
virtual
~
BasicTextLayer
(
)
{
MOZ_COUNT_DTOR
(
BasicTextLayer
)
;
}
public
:
virtual
void
SetVisibleRegion
(
const
LayerIntRegion
&
aRegion
)
override
{
NS_ASSERTION
(
BasicManager
(
)
-
>
InConstruction
(
)
"
Can
only
set
properties
in
construction
phase
"
)
;
TextLayer
:
:
SetVisibleRegion
(
aRegion
)
;
}
virtual
void
Paint
(
DrawTarget
*
aDT
const
gfx
:
:
Point
&
aDeviceOffset
Layer
*
aMaskLayer
)
override
{
if
(
IsHidden
(
)
|
|
!
mFont
)
{
return
;
}
Rect
snapped
(
mBounds
.
x
mBounds
.
y
mBounds
.
width
mBounds
.
height
)
;
MaybeSnapToDevicePixels
(
snapped
*
aDT
true
)
;
aDT
-
>
SetPermitSubpixelAA
(
false
)
;
for
(
GlyphArray
&
g
:
mGlyphs
)
{
GlyphBuffer
buffer
=
{
g
.
glyphs
(
)
.
Elements
(
)
(
uint32_t
)
g
.
glyphs
(
)
.
Length
(
)
}
;
aDT
-
>
FillGlyphs
(
mFont
buffer
ColorPattern
(
g
.
color
(
)
.
value
(
)
)
)
;
}
}
protected
:
BasicLayerManager
*
BasicManager
(
)
{
return
static_cast
<
BasicLayerManager
*
>
(
mManager
)
;
}
}
;
already_AddRefed
<
TextLayer
>
BasicLayerManager
:
:
CreateTextLayer
(
)
{
NS_ASSERTION
(
InConstruction
(
)
"
Only
allowed
in
construction
phase
"
)
;
RefPtr
<
TextLayer
>
layer
=
new
BasicTextLayer
(
this
)
;
return
layer
.
forget
(
)
;
}
}
}
