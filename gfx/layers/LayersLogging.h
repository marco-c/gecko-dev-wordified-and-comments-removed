#
ifndef
GFX_LAYERSLOGGING_H
#
define
GFX_LAYERSLOGGING_H
#
include
"
FrameMetrics
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
TiledRegion
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
nscore
.
h
"
struct
nsRectAbsolute
;
namespace
mozilla
{
namespace
gfx
{
template
<
class
units
class
F
>
struct
RectTyped
;
}
enum
class
ImageFormat
;
namespace
layers
{
void
AppendToString
(
std
:
:
stringstream
&
aStream
mozilla
:
:
layers
:
:
TextureFlags
flags
const
char
*
pfx
=
"
"
const
char
*
sfx
=
"
"
)
;
void
AppendToString
(
std
:
:
stringstream
&
aStream
mozilla
:
:
gfx
:
:
SurfaceFormat
format
const
char
*
pfx
=
"
"
const
char
*
sfx
=
"
"
)
;
void
AppendToString
(
std
:
:
stringstream
&
aStream
gfx
:
:
SurfaceType
format
const
char
*
pfx
=
"
"
const
char
*
sfx
=
"
"
)
;
void
AppendToString
(
std
:
:
stringstream
&
aStream
ImageFormat
format
const
char
*
pfx
=
"
"
const
char
*
sfx
=
"
"
)
;
void
AppendToString
(
std
:
:
stringstream
&
aStream
const
mozilla
:
:
ScrollPositionUpdate
&
aUpdate
const
char
*
pfx
=
"
"
const
char
*
sfx
=
"
"
)
;
template
<
typename
T
>
std
:
:
string
Stringify
(
const
T
&
obj
)
{
std
:
:
stringstream
ss
;
AppendToString
(
ss
obj
)
;
return
ss
.
str
(
)
;
}
}
}
void
print_stderr
(
std
:
:
stringstream
&
aStr
)
;
void
fprint_stderr
(
FILE
*
aFile
std
:
:
stringstream
&
aStr
)
;
#
endif
