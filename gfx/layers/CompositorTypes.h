#
ifndef
MOZILLA_LAYERS_COMPOSITORTYPES_H
#
define
MOZILLA_LAYERS_COMPOSITORTYPES_H
#
include
<
iosfwd
>
#
include
<
stdint
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
"
LayersTypes
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
EnumSet
.
h
"
#
include
"
mozilla
/
TypedEnumBits
.
h
"
namespace
mozilla
{
namespace
layers
{
enum
class
TextureFlags
:
uint32_t
{
NO_FLAGS
=
0
USE_NEAREST_FILTER
=
1
<
<
0
ORIGIN_BOTTOM_LEFT
=
1
<
<
1
DISALLOW_BIGIMAGE
=
1
<
<
2
RB_SWAPPED
=
1
<
<
3
NON_PREMULTIPLIED
=
1
<
<
4
RECYCLE
=
1
<
<
5
DEALLOCATE_CLIENT
=
1
<
<
6
DEALLOCATE_SYNC
=
1
<
<
6
IMMUTABLE
=
1
<
<
9
IMMEDIATE_UPLOAD
=
1
<
<
10
COMPONENT_ALPHA
=
1
<
<
11
INVALID_COMPOSITOR
=
1
<
<
12
RGB_FROM_YCBCR
=
1
<
<
13
SNAPSHOT
=
1
<
<
14
NON_BLOCKING_READ_LOCK
=
1
<
<
15
BLOCKING_READ_LOCK
=
1
<
<
16
WAIT_HOST_USAGE_END
=
1
<
<
17
IS_OPAQUE
=
1
<
<
18
BORROWED_EXTERNAL_ID
=
1
<
<
19
REMOTE_TEXTURE
=
1
<
<
20
ALL_BITS
=
(
1
<
<
21
)
-
1
DEFAULT
=
NO_FLAGS
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
TextureFlags
)
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aStream
const
TextureFlags
&
aFlags
)
;
static
inline
bool
TextureRequiresLocking
(
TextureFlags
aFlags
)
{
return
!
(
aFlags
&
TextureFlags
:
:
IMMUTABLE
)
;
}
enum
class
DiagnosticTypes
:
uint8_t
{
NO_DIAGNOSTIC
=
0
TILE_BORDERS
=
1
<
<
0
LAYER_BORDERS
=
1
<
<
1
BIGIMAGE_BORDERS
=
1
<
<
2
FLASH_BORDERS
=
1
<
<
3
ALL_BITS
=
(
1
<
<
4
)
-
1
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
DiagnosticTypes
)
enum
class
EffectTypes
:
uint8_t
{
RGB
YCBCR
NV12
MAX
}
;
enum
class
CompositableType
:
uint8_t
{
UNKNOWN
IMAGE
COUNT
}
;
#
ifdef
XP_WIN
typedef
void
*
SyncHandle
;
#
else
typedef
uintptr_t
SyncHandle
;
#
endif
struct
TextureFactoryIdentifier
{
LayersBackend
mParentBackend
;
WebRenderBackend
mWebRenderBackend
;
WebRenderCompositor
mWebRenderCompositor
;
GeckoProcessType
mParentProcessType
;
int32_t
mMaxTextureSize
;
bool
mCompositorUseANGLE
;
bool
mCompositorUseDComp
;
bool
mUseCompositorWnd
;
bool
mSupportsTextureBlitting
;
bool
mSupportsPartialUploads
;
bool
mSupportsComponentAlpha
;
SyncHandle
mSyncHandle
;
explicit
TextureFactoryIdentifier
(
LayersBackend
aLayersBackend
=
LayersBackend
:
:
LAYERS_NONE
GeckoProcessType
aParentProcessType
=
GeckoProcessType_Default
int32_t
aMaxTextureSize
=
4096
bool
aCompositorUseANGLE
=
false
bool
aCompositorUseDComp
=
false
bool
aUseCompositorWnd
=
false
bool
aSupportsTextureBlitting
=
false
bool
aSupportsPartialUploads
=
false
bool
aSupportsComponentAlpha
=
true
SyncHandle
aSyncHandle
=
0
)
:
mParentBackend
(
aLayersBackend
)
mWebRenderBackend
(
WebRenderBackend
:
:
HARDWARE
)
mWebRenderCompositor
(
WebRenderCompositor
:
:
DRAW
)
mParentProcessType
(
aParentProcessType
)
mMaxTextureSize
(
aMaxTextureSize
)
mCompositorUseANGLE
(
aCompositorUseANGLE
)
mCompositorUseDComp
(
aCompositorUseDComp
)
mUseCompositorWnd
(
aUseCompositorWnd
)
mSupportsTextureBlitting
(
aSupportsTextureBlitting
)
mSupportsPartialUploads
(
aSupportsPartialUploads
)
mSupportsComponentAlpha
(
aSupportsComponentAlpha
)
mSyncHandle
(
aSyncHandle
)
{
}
explicit
TextureFactoryIdentifier
(
WebRenderBackend
aWebRenderBackend
WebRenderCompositor
aWebRenderCompositor
GeckoProcessType
aParentProcessType
=
GeckoProcessType_Default
int32_t
aMaxTextureSize
=
4096
bool
aCompositorUseANGLE
=
false
bool
aCompositorUseDComp
=
false
bool
aUseCompositorWnd
=
false
bool
aSupportsTextureBlitting
=
false
bool
aSupportsPartialUploads
=
false
bool
aSupportsComponentAlpha
=
true
SyncHandle
aSyncHandle
=
0
)
:
mParentBackend
(
LayersBackend
:
:
LAYERS_WR
)
mWebRenderBackend
(
aWebRenderBackend
)
mWebRenderCompositor
(
aWebRenderCompositor
)
mParentProcessType
(
aParentProcessType
)
mMaxTextureSize
(
aMaxTextureSize
)
mCompositorUseANGLE
(
aCompositorUseANGLE
)
mCompositorUseDComp
(
aCompositorUseDComp
)
mUseCompositorWnd
(
aUseCompositorWnd
)
mSupportsTextureBlitting
(
aSupportsTextureBlitting
)
mSupportsPartialUploads
(
aSupportsPartialUploads
)
mSupportsComponentAlpha
(
aSupportsComponentAlpha
)
mSyncHandle
(
aSyncHandle
)
{
}
bool
operator
=
=
(
const
TextureFactoryIdentifier
&
aOther
)
const
{
return
mParentBackend
=
=
aOther
.
mParentBackend
&
&
mWebRenderBackend
=
=
aOther
.
mWebRenderBackend
&
&
mWebRenderCompositor
=
=
aOther
.
mWebRenderCompositor
&
&
mParentProcessType
=
=
aOther
.
mParentProcessType
&
&
mMaxTextureSize
=
=
aOther
.
mMaxTextureSize
&
&
mCompositorUseANGLE
=
=
aOther
.
mCompositorUseANGLE
&
&
mCompositorUseDComp
=
=
aOther
.
mCompositorUseDComp
&
&
mUseCompositorWnd
=
=
aOther
.
mUseCompositorWnd
&
&
mSupportsTextureBlitting
=
=
aOther
.
mSupportsTextureBlitting
&
&
mSupportsPartialUploads
=
=
aOther
.
mSupportsPartialUploads
&
&
mSupportsComponentAlpha
=
=
aOther
.
mSupportsComponentAlpha
&
&
mSyncHandle
=
=
aOther
.
mSyncHandle
;
}
}
;
struct
TextureInfo
{
CompositableType
mCompositableType
;
TextureFlags
mTextureFlags
;
TextureInfo
(
)
:
mCompositableType
(
CompositableType
:
:
UNKNOWN
)
mTextureFlags
(
TextureFlags
:
:
NO_FLAGS
)
{
}
explicit
TextureInfo
(
CompositableType
aType
TextureFlags
aTextureFlags
=
TextureFlags
:
:
DEFAULT
)
:
mCompositableType
(
aType
)
mTextureFlags
(
aTextureFlags
)
{
}
bool
operator
=
=
(
const
TextureInfo
&
aOther
)
const
{
return
mCompositableType
=
=
aOther
.
mCompositableType
&
&
mTextureFlags
=
=
aOther
.
mTextureFlags
;
}
}
;
enum
class
OpenMode
:
uint8_t
{
OPEN_NONE
=
0
OPEN_READ
=
0x1
OPEN_WRITE
=
0x2
OPEN_ASYNC
=
0x04
OPEN_READ_WRITE
=
OPEN_READ
|
OPEN_WRITE
OPEN_READ_WRITE_ASYNC
=
OPEN_READ
|
OPEN_WRITE
|
OPEN_ASYNC
OPEN_READ_ASYNC
=
OPEN_READ
|
OPEN_ASYNC
OPEN_READ_ONLY
=
OPEN_READ
OPEN_WRITE_ONLY
=
OPEN_WRITE
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
OpenMode
)
enum
class
MaskType
:
uint8_t
{
MaskNone
=
0
Mask
NumMaskTypes
}
;
}
}
#
endif
