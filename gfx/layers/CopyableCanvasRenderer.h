#
ifndef
GFX_COPYABLECANVASRENDERER_H
#
define
GFX_COPYABLECANVASRENDERER_H
#
include
<
stdint
.
h
>
#
include
"
CanvasRenderer
.
h
"
#
include
"
GLContextTypes
.
h
"
#
include
"
gfxContext
.
h
"
#
include
"
gfxTypes
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
namespace
gl
{
class
SharedSurface
;
}
namespace
layers
{
class
CopyableCanvasRenderer
:
public
CanvasRenderer
{
public
:
CopyableCanvasRenderer
(
)
;
virtual
~
CopyableCanvasRenderer
(
)
;
public
:
void
Initialize
(
const
CanvasInitializeData
&
aData
)
override
;
bool
IsDataValid
(
const
CanvasInitializeData
&
aData
)
override
;
void
ClearCachedResources
(
)
override
;
void
Destroy
(
)
override
;
CopyableCanvasRenderer
*
AsCopyableCanvasRenderer
(
)
override
{
return
this
;
}
bool
NeedsYFlip
(
)
const
{
return
mOriginPos
=
=
gl
:
:
OriginPos
:
:
BottomLeft
;
}
bool
HasGLContext
(
)
const
{
return
!
!
mGLContext
;
}
bool
IsOpaque
(
)
const
{
return
mOpaque
;
}
PersistentBufferProvider
*
GetBufferProvider
(
)
{
return
mBufferProvider
;
}
already_AddRefed
<
gfx
:
:
SourceSurface
>
ReadbackSurface
(
)
;
protected
:
RefPtr
<
gl
:
:
GLContext
>
mGLContext
;
RefPtr
<
PersistentBufferProvider
>
mBufferProvider
;
UniquePtr
<
gl
:
:
SharedSurface
>
mGLFrontbuffer
;
RefPtr
<
AsyncCanvasRenderer
>
mAsyncRenderer
;
bool
mIsAlphaPremultiplied
;
gl
:
:
OriginPos
mOriginPos
;
bool
mOpaque
;
RefPtr
<
gfx
:
:
DataSourceSurface
>
mCachedTempSurface
;
gfx
:
:
DataSourceSurface
*
GetTempSurface
(
const
gfx
:
:
IntSize
&
aSize
const
gfx
:
:
SurfaceFormat
aFormat
)
;
}
;
}
}
#
endif
