#
ifndef
MOZILLA_GFX_BUFFERHOST_H
#
define
MOZILLA_GFX_BUFFERHOST_H
#
include
<
stdint
.
h
>
#
include
<
stdio
.
h
>
#
include
"
gfxRect
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
Polygon
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nscore
.
h
"
#
include
"
Units
.
h
"
namespace
mozilla
{
namespace
layers
{
class
WebRenderImageHost
;
struct
ImageCompositeNotificationInfo
{
base
:
:
ProcessId
mImageBridgeProcessId
;
ImageCompositeNotification
mNotification
;
}
;
struct
AsyncCompositableRef
{
AsyncCompositableRef
(
)
:
mProcessId
(
base
:
:
kInvalidProcessId
)
{
}
AsyncCompositableRef
(
base
:
:
ProcessId
aProcessId
const
CompositableHandle
&
aHandle
)
:
mProcessId
(
aProcessId
)
mHandle
(
aHandle
)
{
}
explicit
operator
bool
(
)
const
{
return
!
!
mHandle
;
}
base
:
:
ProcessId
mProcessId
;
CompositableHandle
mHandle
;
}
;
class
CompositableHost
{
protected
:
virtual
~
CompositableHost
(
)
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CompositableHost
)
explicit
CompositableHost
(
const
TextureInfo
&
aTextureInfo
)
;
static
already_AddRefed
<
CompositableHost
>
Create
(
const
TextureInfo
&
aTextureInfo
)
;
virtual
WebRenderImageHost
*
AsWebRenderImageHost
(
)
{
return
nullptr
;
}
virtual
void
Dump
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
=
"
"
bool
aDumpHtml
=
false
)
{
}
static
void
DumpTextureHost
(
std
:
:
stringstream
&
aStream
TextureHost
*
aTexture
)
;
struct
TimedTexture
{
CompositableTextureHostRef
mTexture
;
TimeStamp
mTimeStamp
;
gfx
:
:
IntRect
mPictureRect
;
int32_t
mFrameID
;
int32_t
mProducerID
;
}
;
virtual
void
UseTextureHost
(
const
nsTArray
<
TimedTexture
>
&
aTextures
)
;
virtual
void
UseRemoteTexture
(
const
RemoteTextureId
aTextureId
const
RemoteTextureOwnerId
aOwnerId
const
CompositableHandle
&
aHandle
const
base
:
:
ProcessId
aForPid
const
gfx
:
:
IntSize
aSize
const
TextureFlags
aFlags
)
=
0
;
virtual
void
RemoveTextureHost
(
TextureHost
*
aTexture
)
;
uint64_t
GetCompositorBridgeID
(
)
const
{
return
mCompositorBridgeID
;
}
const
AsyncCompositableRef
&
GetAsyncRef
(
)
const
{
return
mAsyncRef
;
}
void
SetAsyncRef
(
const
AsyncCompositableRef
&
aRef
)
{
mAsyncRef
=
aRef
;
}
void
SetCompositorBridgeID
(
uint64_t
aID
)
{
mCompositorBridgeID
=
aID
;
}
virtual
void
CleanupResources
(
)
{
}
virtual
void
OnReleased
(
)
{
}
virtual
uint32_t
GetDroppedFrames
(
)
{
return
0
;
}
protected
:
protected
:
TextureInfo
mTextureInfo
;
AsyncCompositableRef
mAsyncRef
;
uint64_t
mCompositorBridgeID
;
}
;
}
}
#
endif
