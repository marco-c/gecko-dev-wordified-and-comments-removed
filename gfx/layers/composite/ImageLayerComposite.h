#
ifndef
GFX_ImageLayerComposite_H
#
define
GFX_ImageLayerComposite_H
#
include
"
GLTextureImage
.
h
"
#
include
"
ImageLayers
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
layers
/
LayerManagerComposite
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nscore
.
h
"
#
include
"
CompositableHost
.
h
"
namespace
mozilla
{
namespace
layers
{
class
ImageHost
;
class
Layer
;
class
ImageLayerComposite
:
public
ImageLayer
public
LayerComposite
{
typedef
gl
:
:
TextureImage
TextureImage
;
public
:
explicit
ImageLayerComposite
(
LayerManagerComposite
*
aManager
)
;
protected
:
virtual
~
ImageLayerComposite
(
)
;
public
:
virtual
LayerRenderState
GetRenderState
(
)
override
;
virtual
void
Disconnect
(
)
override
;
virtual
bool
SetCompositableHost
(
CompositableHost
*
aHost
)
override
;
virtual
Layer
*
GetLayer
(
)
override
;
virtual
void
SetLayerManager
(
HostLayerManager
*
aManager
)
override
;
virtual
void
RenderLayer
(
const
gfx
:
:
IntRect
&
aClipRect
const
Maybe
<
gfx
:
:
Polygon
>
&
aGeometry
)
override
;
virtual
void
ComputeEffectiveTransforms
(
const
mozilla
:
:
gfx
:
:
Matrix4x4
&
aTransformToSurface
)
override
;
virtual
void
CleanupResources
(
)
override
;
CompositableHost
*
GetCompositableHost
(
)
override
;
virtual
void
GenEffectChain
(
EffectChain
&
aEffect
)
override
;
virtual
HostLayer
*
AsHostLayer
(
)
override
{
return
this
;
}
virtual
const
char
*
Name
(
)
const
override
{
return
"
ImageLayerComposite
"
;
}
virtual
bool
IsOpaque
(
)
override
;
virtual
nsIntRegion
GetFullyRenderedRegion
(
)
override
;
protected
:
virtual
void
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
override
;
private
:
gfx
:
:
SamplingFilter
GetSamplingFilter
(
)
;
private
:
RefPtr
<
ImageHost
>
mImageHost
;
}
;
}
}
#
endif
