#
ifndef
GFX_ASYNCCOMPOSITIONMANAGER_H
#
define
GFX_ASYNCCOMPOSITIONMANAGER_H
#
include
"
Units
.
h
"
#
include
"
mozilla
/
layers
/
LayerManagerComposite
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
dom
/
ScreenOrientation
.
h
"
#
include
"
mozilla
/
gfx
/
BasePoint
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
layers
/
AnimationMetricsTracker
.
h
"
#
include
"
mozilla
/
layers
/
FrameUniformityData
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
namespace
layers
{
class
AsyncPanZoomController
;
class
Layer
;
class
LayerManagerComposite
;
class
AutoResolveRefLayers
;
class
CompositorBridgeParent
;
struct
AsyncTransform
{
explicit
AsyncTransform
(
LayerToParentLayerScale
aScale
=
LayerToParentLayerScale
(
)
ParentLayerPoint
aTranslation
=
ParentLayerPoint
(
)
)
:
mScale
(
aScale
)
mTranslation
(
aTranslation
)
{
}
operator
AsyncTransformComponentMatrix
(
)
const
{
return
AsyncTransformComponentMatrix
:
:
Scaling
(
mScale
.
scale
mScale
.
scale
1
)
.
PostTranslate
(
mTranslation
.
x
mTranslation
.
y
0
)
;
}
bool
operator
=
=
(
const
AsyncTransform
&
rhs
)
const
{
return
mTranslation
=
=
rhs
.
mTranslation
&
&
mScale
=
=
rhs
.
mScale
;
}
bool
operator
!
=
(
const
AsyncTransform
&
rhs
)
const
{
return
!
(
*
this
=
=
rhs
)
;
}
LayerToParentLayerScale
mScale
;
ParentLayerPoint
mTranslation
;
}
;
class
AsyncCompositionManager
final
{
friend
class
AutoResolveRefLayers
;
~
AsyncCompositionManager
(
)
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
AsyncCompositionManager
)
explicit
AsyncCompositionManager
(
CompositorBridgeParent
*
aParent
HostLayerManager
*
aManager
)
;
void
ForceIsFirstPaint
(
)
{
mIsFirstPaint
=
true
;
}
enum
class
TransformsToSkip
:
uint8_t
{
NoneOfThem
=
0
APZ
=
1
}
;
bool
TransformShadowTree
(
TimeStamp
aCurrentFrame
TimeDuration
aVsyncRate
TransformsToSkip
aSkip
=
TransformsToSkip
:
:
NoneOfThem
)
;
void
ComputeRotation
(
)
;
void
Updated
(
bool
isFirstPaint
const
TargetConfig
&
aTargetConfig
)
{
mIsFirstPaint
|
=
isFirstPaint
;
mLayersUpdated
=
true
;
mTargetConfig
=
aTargetConfig
;
}
bool
RequiresReorientation
(
mozilla
:
:
dom
:
:
ScreenOrientationInternal
aOrientation
)
const
{
return
mTargetConfig
.
orientation
(
)
!
=
aOrientation
;
}
bool
ReadyForCompose
(
)
{
return
mReadyForCompose
;
}
bool
IsFirstPaint
(
)
{
return
mIsFirstPaint
;
}
void
GetFrameUniformity
(
FrameUniformityData
*
aFrameUniformityData
)
;
struct
ClipParts
{
Maybe
<
ParentLayerIntRect
>
mFixedClip
;
Maybe
<
ParentLayerIntRect
>
mScrolledClip
;
Maybe
<
ParentLayerIntRect
>
Intersect
(
)
const
{
return
IntersectMaybeRects
(
mFixedClip
mScrolledClip
)
;
}
}
;
typedef
std
:
:
map
<
Layer
*
ClipParts
>
ClipPartsCache
;
private
:
bool
ApplyAsyncContentTransformToTree
(
Layer
*
aLayer
bool
*
aOutFoundRoot
)
;
void
ApplyAsyncTransformToScrollbar
(
Layer
*
aLayer
)
;
void
AlignFixedAndStickyLayers
(
Layer
*
aTransformedSubtreeRoot
Layer
*
aStartTraversalAt
FrameMetrics
:
:
ViewID
aTransformScrollId
const
LayerToParentLayerMatrix4x4
&
aPreviousTransformForRoot
const
LayerToParentLayerMatrix4x4
&
aCurrentTransformForRoot
const
ScreenMargin
&
aFixedLayerMargins
ClipPartsCache
*
aClipPartsCache
)
;
void
ResolveRefLayers
(
CompositorBridgeParent
*
aCompositor
bool
*
aHasRemoteContent
bool
*
aResolvePlugins
)
;
void
DetachRefLayers
(
)
;
void
RecordShadowTransforms
(
Layer
*
aLayer
)
;
TargetConfig
mTargetConfig
;
CSSRect
mContentRect
;
RefPtr
<
HostLayerManager
>
mLayerManager
;
bool
mIsFirstPaint
;
bool
mLayersUpdated
;
bool
mReadyForCompose
;
gfx
:
:
Matrix
mWorldTransform
;
LayerTransformRecorder
mLayerTransformRecorder
;
TimeStamp
mPreviousFrameTimeStamp
;
AnimationMetricsTracker
mAnimationMetricsTracker
;
CompositorBridgeParent
*
mCompositorBridge
;
#
ifdef
MOZ_WIDGET_ANDROID
public
:
void
SetFixedLayerMargins
(
ScreenIntCoord
aTop
ScreenIntCoord
aBottom
)
;
private
:
FrameMetrics
:
:
ViewID
mRootScrollableId
;
ScreenMargin
mFixedLayerMargins
;
#
endif
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
AsyncCompositionManager
:
:
TransformsToSkip
)
class
MOZ_STACK_CLASS
AutoResolveRefLayers
{
public
:
explicit
AutoResolveRefLayers
(
AsyncCompositionManager
*
aManager
CompositorBridgeParent
*
aCompositor
=
nullptr
bool
*
aHasRemoteContent
=
nullptr
bool
*
aResolvePlugins
=
nullptr
)
:
mManager
(
aManager
)
{
if
(
mManager
)
{
mManager
-
>
ResolveRefLayers
(
aCompositor
aHasRemoteContent
aResolvePlugins
)
;
}
}
~
AutoResolveRefLayers
(
)
{
if
(
mManager
)
{
mManager
-
>
DetachRefLayers
(
)
;
}
}
private
:
AsyncCompositionManager
*
mManager
;
AutoResolveRefLayers
(
const
AutoResolveRefLayers
&
)
=
delete
;
AutoResolveRefLayers
&
operator
=
(
const
AutoResolveRefLayers
&
)
=
delete
;
}
;
}
}
#
endif
