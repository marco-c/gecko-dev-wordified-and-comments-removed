#
ifndef
GFX_ASYNCCOMPOSITIONMANAGER_H
#
define
GFX_ASYNCCOMPOSITIONMANAGER_H
#
include
"
Units
.
h
"
#
include
"
FrameMetrics
.
h
"
#
include
"
mozilla
/
layers
/
LayerManagerComposite
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
gfx
/
BasePoint
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
HalScreenConfiguration
.
h
"
#
include
"
mozilla
/
layers
/
FrameUniformityData
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
CompositorBridgeParent
.
h
"
namespace
mozilla
{
namespace
layers
{
class
Layer
;
class
LayerManagerComposite
;
class
AutoResolveRefLayers
;
class
CompositorBridgeParent
;
class
SampleTime
;
class
AsyncCompositionManager
final
{
friend
class
AutoResolveRefLayers
;
~
AsyncCompositionManager
(
)
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
AsyncCompositionManager
)
AsyncCompositionManager
(
CompositorBridgeParent
*
aParent
HostLayerManager
*
aManager
)
;
void
ForceIsFirstPaint
(
)
{
mIsFirstPaint
=
true
;
}
bool
TransformShadowTree
(
const
SampleTime
&
aCurrentFrame
TimeDuration
aVsyncRate
CompositorBridgeParentBase
:
:
TransformsToSkip
aSkip
=
CompositorBridgeParentBase
:
:
TransformsToSkip
:
:
NoneOfThem
)
;
void
ComputeRotation
(
)
;
void
Updated
(
bool
isFirstPaint
const
TargetConfig
&
aTargetConfig
)
{
mIsFirstPaint
|
=
isFirstPaint
;
mLayersUpdated
=
true
;
mTargetConfig
=
aTargetConfig
;
}
bool
RequiresReorientation
(
hal
:
:
ScreenOrientation
aOrientation
)
const
{
return
mTargetConfig
.
orientation
(
)
!
=
aOrientation
;
}
bool
ReadyForCompose
(
)
{
return
mReadyForCompose
;
}
bool
IsFirstPaint
(
)
{
return
mIsFirstPaint
;
}
void
GetFrameUniformity
(
FrameUniformityData
*
aFrameUniformityData
)
;
struct
ClipParts
{
Maybe
<
ParentLayerIntRect
>
mFixedClip
;
Maybe
<
ParentLayerIntRect
>
mScrolledClip
;
Maybe
<
ParentLayerIntRect
>
Intersect
(
)
const
{
return
IntersectMaybeRects
(
mFixedClip
mScrolledClip
)
;
}
}
;
typedef
std
:
:
map
<
Layer
*
ClipParts
>
ClipPartsCache
;
static
ScreenPoint
ComputeFixedMarginsOffset
(
const
ScreenMargin
&
aFixedMargins
SideBits
eFixedSides
const
ScreenMargin
&
aGeckoFixedLayerMargins
)
;
private
:
bool
ApplyAsyncContentTransformToTree
(
Layer
*
aLayer
bool
*
aOutFoundRoot
)
;
void
ApplyAsyncTransformToScrollbar
(
Layer
*
aLayer
)
;
void
AlignFixedAndStickyLayers
(
Layer
*
aTransformedSubtreeRoot
Layer
*
aStartTraversalAt
SideBits
aStuckSides
ScrollableLayerGuid
:
:
ViewID
aTransformScrollId
const
LayerToParentLayerMatrix4x4
&
aPreviousTransformForRoot
const
LayerToParentLayerMatrix4x4
&
aCurrentTransformForRoot
const
ScreenMargin
&
aCompositorFixedLayerMargins
ClipPartsCache
&
aClipPartsCache
const
ScreenMargin
&
aGeckoFixedLayerMargins
)
;
void
AdjustFixedOrStickyLayer
(
Layer
*
aTransformedSubtreeRoot
Layer
*
aFixedOrSticky
SideBits
aStuckSides
ScrollableLayerGuid
:
:
ViewID
aTransformScrollId
const
LayerToParentLayerMatrix4x4
&
aPreviousTransformForRoot
const
LayerToParentLayerMatrix4x4
&
aCurrentTransformForRoot
const
ScreenMargin
&
aCompositorFixedLayerMargins
ClipPartsCache
&
aClipPartsCache
const
ScreenMargin
&
aGeckoFixedLayerMargins
)
;
void
ResolveRefLayers
(
CompositorBridgeParent
*
aCompositor
bool
*
aHasRemoteContent
bool
*
aResolvePlugins
)
;
void
DetachRefLayers
(
)
;
void
RecordShadowTransforms
(
Layer
*
aLayer
)
;
bool
SampleAnimations
(
Layer
*
aLayer
TimeStamp
aCurrentFrameTime
)
;
TargetConfig
mTargetConfig
;
CSSRect
mContentRect
;
RefPtr
<
HostLayerManager
>
mLayerManager
;
bool
mIsFirstPaint
;
bool
mLayersUpdated
;
bool
mReadyForCompose
;
gfx
:
:
Matrix
mWorldTransform
;
LayerTransformRecorder
mLayerTransformRecorder
;
TimeStamp
mPreviousFrameTimeStamp
;
MOZ_NON_OWNING_REF
CompositorBridgeParent
*
mCompositorBridge
;
public
:
void
SetFixedLayerMargins
(
ScreenIntCoord
aTop
ScreenIntCoord
aBottom
)
;
ScreenMargin
GetFixedLayerMargins
(
)
const
;
private
:
ScreenMargin
mFixedLayerMargins
;
#
ifdef
MOZ_WIDGET_ANDROID
private
:
bool
FrameMetricsHaveUpdated
(
const
FrameMetrics
&
aMetrics
)
;
FrameMetrics
mLastMetrics
;
ScrollableLayerGuid
:
:
ViewID
mRootScrollableId
;
#
endif
}
;
class
MOZ_STACK_CLASS
AutoResolveRefLayers
{
public
:
explicit
AutoResolveRefLayers
(
AsyncCompositionManager
*
aManager
CompositorBridgeParent
*
aCompositor
=
nullptr
bool
*
aHasRemoteContent
=
nullptr
bool
*
aResolvePlugins
=
nullptr
)
:
mManager
(
aManager
)
{
if
(
mManager
)
{
mManager
-
>
ResolveRefLayers
(
aCompositor
aHasRemoteContent
aResolvePlugins
)
;
}
}
~
AutoResolveRefLayers
(
)
{
if
(
mManager
)
{
mManager
-
>
DetachRefLayers
(
)
;
}
}
private
:
AsyncCompositionManager
*
mManager
;
AutoResolveRefLayers
(
const
AutoResolveRefLayers
&
)
=
delete
;
AutoResolveRefLayers
&
operator
=
(
const
AutoResolveRefLayers
&
)
=
delete
;
}
;
}
}
#
endif
