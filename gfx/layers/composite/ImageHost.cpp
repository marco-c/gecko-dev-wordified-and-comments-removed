#
include
"
ImageHost
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
composite
/
CompositableHost
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
Effects
.
h
"
#
include
"
mozilla
/
layers
/
LayerManagerComposite
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsString
.
h
"
#
define
BIAS_TIME_MS
1
.
0
namespace
mozilla
{
using
namespace
gfx
;
namespace
layers
{
class
ISurfaceAllocator
;
ImageHost
:
:
ImageHost
(
const
TextureInfo
&
aTextureInfo
)
:
CompositableHost
(
aTextureInfo
)
mLastFrameID
(
-
1
)
mLastProducerID
(
-
1
)
mBias
(
BIAS_NONE
)
mLocked
(
false
)
{
}
ImageHost
:
:
~
ImageHost
(
)
{
}
void
ImageHost
:
:
UseTextureHost
(
const
nsTArray
<
TimedTexture
>
&
aTextures
)
{
MOZ_ASSERT
(
!
mLocked
)
;
CompositableHost
:
:
UseTextureHost
(
aTextures
)
;
MOZ_ASSERT
(
aTextures
.
Length
(
)
>
=
1
)
;
nsTArray
<
TimedImage
>
newImages
;
for
(
uint32_t
i
=
0
;
i
<
aTextures
.
Length
(
)
;
+
+
i
)
{
const
TimedTexture
&
t
=
aTextures
[
i
]
;
MOZ_ASSERT
(
t
.
mTexture
)
;
if
(
i
+
1
<
aTextures
.
Length
(
)
&
&
t
.
mProducerID
=
=
mLastProducerID
&
&
t
.
mFrameID
<
mLastFrameID
)
{
continue
;
}
TimedImage
&
img
=
*
newImages
.
AppendElement
(
)
;
img
.
mTextureHost
=
t
.
mTexture
;
img
.
mTimeStamp
=
t
.
mTimeStamp
;
img
.
mPictureRect
=
t
.
mPictureRect
;
img
.
mFrameID
=
t
.
mFrameID
;
img
.
mProducerID
=
t
.
mProducerID
;
img
.
mTextureHost
-
>
SetCropRect
(
img
.
mPictureRect
)
;
img
.
mTextureHost
-
>
Updated
(
)
;
}
mImages
.
SwapElements
(
newImages
)
;
newImages
.
Clear
(
)
;
if
(
mImages
.
Length
(
)
=
=
1
)
{
SetCurrentTextureHost
(
mImages
[
0
]
.
mTextureHost
)
;
}
if
(
GetCompositor
(
)
&
&
mLastFrameID
>
=
0
)
{
for
(
size_t
i
=
0
;
i
<
mImages
.
Length
(
)
;
+
+
i
)
{
bool
frameComesAfter
=
mImages
[
i
]
.
mFrameID
>
mLastFrameID
|
|
mImages
[
i
]
.
mProducerID
!
=
mLastProducerID
;
if
(
frameComesAfter
&
&
!
mImages
[
i
]
.
mTimeStamp
.
IsNull
(
)
)
{
GetCompositor
(
)
-
>
CompositeUntil
(
mImages
[
i
]
.
mTimeStamp
+
TimeDuration
:
:
FromMilliseconds
(
BIAS_TIME_MS
)
)
;
break
;
}
}
}
}
void
ImageHost
:
:
SetCurrentTextureHost
(
TextureHost
*
aTexture
)
{
if
(
aTexture
=
=
mCurrentTextureHost
.
get
(
)
)
{
return
;
}
bool
swapTextureSources
=
!
!
mCurrentTextureHost
&
&
!
!
mCurrentTextureSource
&
&
mCurrentTextureHost
-
>
HasIntermediateBuffer
(
)
;
if
(
swapTextureSources
)
{
auto
dataSource
=
mCurrentTextureSource
-
>
AsDataTextureSource
(
)
;
if
(
dataSource
)
{
dataSource
-
>
SetOwner
(
nullptr
)
;
}
RefPtr
<
TextureSource
>
tmp
=
mExtraTextureSource
;
mExtraTextureSource
=
mCurrentTextureSource
.
get
(
)
;
mCurrentTextureSource
=
tmp
;
}
else
{
mExtraTextureSource
=
nullptr
;
}
mCurrentTextureHost
=
aTexture
;
mCurrentTextureHost
-
>
PrepareTextureSource
(
mCurrentTextureSource
)
;
}
void
ImageHost
:
:
CleanupResources
(
)
{
mExtraTextureSource
=
nullptr
;
mCurrentTextureSource
=
nullptr
;
mCurrentTextureHost
=
nullptr
;
}
void
ImageHost
:
:
RemoveTextureHost
(
TextureHost
*
aTexture
)
{
MOZ_ASSERT
(
!
mLocked
)
;
CompositableHost
:
:
RemoveTextureHost
(
aTexture
)
;
for
(
int32_t
i
=
mImages
.
Length
(
)
-
1
;
i
>
=
0
;
-
-
i
)
{
if
(
mImages
[
i
]
.
mTextureHost
=
=
aTexture
)
{
aTexture
-
>
UnbindTextureSource
(
)
;
mImages
.
RemoveElementAt
(
i
)
;
}
}
}
void
ImageHost
:
:
UseOverlaySource
(
OverlaySource
aOverlay
const
gfx
:
:
IntRect
&
aPictureRect
)
{
}
static
TimeStamp
GetBiasedTime
(
const
TimeStamp
&
aInput
ImageHost
:
:
Bias
aBias
)
{
switch
(
aBias
)
{
case
ImageHost
:
:
BIAS_NEGATIVE
:
return
aInput
-
TimeDuration
:
:
FromMilliseconds
(
BIAS_TIME_MS
)
;
case
ImageHost
:
:
BIAS_POSITIVE
:
return
aInput
+
TimeDuration
:
:
FromMilliseconds
(
BIAS_TIME_MS
)
;
default
:
return
aInput
;
}
}
static
ImageHost
:
:
Bias
UpdateBias
(
const
TimeStamp
&
aCompositionTime
const
TimeStamp
&
aCompositedImageTime
const
TimeStamp
&
aNextImageTime
ImageHost
:
:
Bias
aBias
)
{
if
(
aCompositedImageTime
.
IsNull
(
)
)
{
return
ImageHost
:
:
BIAS_NONE
;
}
TimeDuration
threshold
=
TimeDuration
:
:
FromMilliseconds
(
1
.
0
)
;
if
(
aCompositionTime
-
aCompositedImageTime
<
threshold
&
&
aCompositionTime
-
aCompositedImageTime
>
-
threshold
)
{
return
ImageHost
:
:
BIAS_NEGATIVE
;
}
if
(
!
aNextImageTime
.
IsNull
(
)
&
&
aNextImageTime
-
aCompositionTime
<
threshold
&
&
aNextImageTime
-
aCompositionTime
>
-
threshold
)
{
return
ImageHost
:
:
BIAS_POSITIVE
;
}
return
ImageHost
:
:
BIAS_NONE
;
}
int
ImageHost
:
:
ChooseImageIndex
(
)
const
{
if
(
!
GetCompositor
(
)
|
|
mImages
.
IsEmpty
(
)
)
{
return
-
1
;
}
TimeStamp
now
=
GetCompositor
(
)
-
>
GetCompositionTime
(
)
;
if
(
now
.
IsNull
(
)
)
{
for
(
uint32_t
i
=
0
;
i
<
mImages
.
Length
(
)
;
+
+
i
)
{
if
(
mImages
[
i
]
.
mFrameID
=
=
mLastFrameID
&
&
mImages
[
i
]
.
mProducerID
=
=
mLastProducerID
)
{
return
i
;
}
}
return
-
1
;
}
uint32_t
result
=
0
;
while
(
result
+
1
<
mImages
.
Length
(
)
&
&
GetBiasedTime
(
mImages
[
result
+
1
]
.
mTimeStamp
mBias
)
<
=
now
)
{
+
+
result
;
}
return
result
;
}
const
ImageHost
:
:
TimedImage
*
ImageHost
:
:
ChooseImage
(
)
const
{
int
index
=
ChooseImageIndex
(
)
;
return
index
>
=
0
?
&
mImages
[
index
]
:
nullptr
;
}
ImageHost
:
:
TimedImage
*
ImageHost
:
:
ChooseImage
(
)
{
int
index
=
ChooseImageIndex
(
)
;
return
index
>
=
0
?
&
mImages
[
index
]
:
nullptr
;
}
TextureHost
*
ImageHost
:
:
GetAsTextureHost
(
IntRect
*
aPictureRect
)
{
TimedImage
*
img
=
ChooseImage
(
)
;
if
(
img
)
{
SetCurrentTextureHost
(
img
-
>
mTextureHost
)
;
}
if
(
aPictureRect
&
&
img
)
{
*
aPictureRect
=
img
-
>
mPictureRect
;
}
return
img
?
img
-
>
mTextureHost
.
get
(
)
:
nullptr
;
}
void
ImageHost
:
:
Attach
(
Layer
*
aLayer
Compositor
*
aCompositor
AttachFlags
aFlags
)
{
CompositableHost
:
:
Attach
(
aLayer
aCompositor
aFlags
)
;
for
(
auto
&
img
:
mImages
)
{
if
(
GetCompositor
(
)
)
{
img
.
mTextureHost
-
>
SetCompositor
(
GetCompositor
(
)
)
;
}
img
.
mTextureHost
-
>
Updated
(
)
;
}
}
void
ImageHost
:
:
Composite
(
LayerComposite
*
aLayer
EffectChain
&
aEffectChain
float
aOpacity
const
gfx
:
:
Matrix4x4
&
aTransform
const
gfx
:
:
SamplingFilter
aSamplingFilter
const
gfx
:
:
IntRect
&
aClipRect
const
nsIntRegion
*
aVisibleRegion
const
Maybe
<
gfx
:
:
Polygon
>
&
aGeometry
)
{
if
(
!
GetCompositor
(
)
)
{
return
;
}
int
imageIndex
=
ChooseImageIndex
(
)
;
if
(
imageIndex
<
0
)
{
return
;
}
if
(
uint32_t
(
imageIndex
)
+
1
<
mImages
.
Length
(
)
)
{
GetCompositor
(
)
-
>
CompositeUntil
(
mImages
[
imageIndex
+
1
]
.
mTimeStamp
+
TimeDuration
:
:
FromMilliseconds
(
BIAS_TIME_MS
)
)
;
}
TimedImage
*
img
=
&
mImages
[
imageIndex
]
;
img
-
>
mTextureHost
-
>
SetCompositor
(
GetCompositor
(
)
)
;
SetCurrentTextureHost
(
img
-
>
mTextureHost
)
;
{
AutoLockCompositableHost
autoLock
(
this
)
;
if
(
autoLock
.
Failed
(
)
)
{
NS_WARNING
(
"
failed
to
lock
front
buffer
"
)
;
return
;
}
if
(
!
mCurrentTextureHost
-
>
BindTextureSource
(
mCurrentTextureSource
)
)
{
return
;
}
if
(
!
mCurrentTextureSource
)
{
MOZ_ASSERT
(
false
)
;
return
;
}
bool
isAlphaPremultiplied
=
!
(
mCurrentTextureHost
-
>
GetFlags
(
)
&
TextureFlags
:
:
NON_PREMULTIPLIED
)
;
RefPtr
<
TexturedEffect
>
effect
=
CreateTexturedEffect
(
mCurrentTextureHost
mCurrentTextureSource
.
get
(
)
aSamplingFilter
isAlphaPremultiplied
GetRenderState
(
)
)
;
if
(
!
effect
)
{
return
;
}
if
(
!
GetCompositor
(
)
-
>
SupportsEffect
(
effect
-
>
mType
)
)
{
return
;
}
DiagnosticFlags
diagnosticFlags
=
DiagnosticFlags
:
:
IMAGE
;
if
(
effect
-
>
mType
=
=
EffectTypes
:
:
NV12
)
{
diagnosticFlags
|
=
DiagnosticFlags
:
:
NV12
;
}
else
if
(
effect
-
>
mType
=
=
EffectTypes
:
:
YCBCR
)
{
diagnosticFlags
|
=
DiagnosticFlags
:
:
YCBCR
;
}
if
(
mLastFrameID
!
=
img
-
>
mFrameID
|
|
mLastProducerID
!
=
img
-
>
mProducerID
)
{
if
(
mAsyncRef
)
{
ImageCompositeNotificationInfo
info
;
info
.
mImageBridgeProcessId
=
mAsyncRef
.
mProcessId
;
info
.
mNotification
=
ImageCompositeNotification
(
mAsyncRef
.
mHandle
img
-
>
mTimeStamp
GetCompositor
(
)
-
>
GetCompositionTime
(
)
img
-
>
mFrameID
img
-
>
mProducerID
)
;
static_cast
<
LayerManagerComposite
*
>
(
aLayer
-
>
GetLayerManager
(
)
)
-
>
AppendImageCompositeNotification
(
info
)
;
}
mLastFrameID
=
img
-
>
mFrameID
;
mLastProducerID
=
img
-
>
mProducerID
;
}
aEffectChain
.
mPrimaryEffect
=
effect
;
gfx
:
:
Rect
pictureRect
(
0
0
img
-
>
mPictureRect
.
width
img
-
>
mPictureRect
.
height
)
;
BigImageIterator
*
it
=
mCurrentTextureSource
-
>
AsBigImageIterator
(
)
;
if
(
it
)
{
MOZ_ASSERT
(
it
-
>
GetTileCount
(
)
=
=
1
|
|
!
mCurrentTextureSource
-
>
GetNextSibling
(
)
"
Can
'
t
handle
multi
-
plane
BigImages
"
)
;
it
-
>
BeginBigImageIteration
(
)
;
do
{
IntRect
tileRect
=
it
-
>
GetTileRect
(
)
;
gfx
:
:
Rect
rect
(
tileRect
.
x
tileRect
.
y
tileRect
.
width
tileRect
.
height
)
;
rect
=
rect
.
Intersect
(
pictureRect
)
;
effect
-
>
mTextureCoords
=
Rect
(
Float
(
rect
.
x
-
tileRect
.
x
)
/
tileRect
.
width
Float
(
rect
.
y
-
tileRect
.
y
)
/
tileRect
.
height
Float
(
rect
.
width
)
/
tileRect
.
width
Float
(
rect
.
height
)
/
tileRect
.
height
)
;
if
(
img
-
>
mTextureHost
-
>
GetFlags
(
)
&
TextureFlags
:
:
ORIGIN_BOTTOM_LEFT
)
{
effect
-
>
mTextureCoords
.
y
=
effect
-
>
mTextureCoords
.
YMost
(
)
;
effect
-
>
mTextureCoords
.
height
=
-
effect
-
>
mTextureCoords
.
height
;
}
GetCompositor
(
)
-
>
DrawGeometry
(
rect
aClipRect
aEffectChain
aOpacity
aTransform
aGeometry
)
;
GetCompositor
(
)
-
>
DrawDiagnostics
(
diagnosticFlags
|
DiagnosticFlags
:
:
BIGIMAGE
rect
aClipRect
aTransform
mFlashCounter
)
;
}
while
(
it
-
>
NextTile
(
)
)
;
it
-
>
EndBigImageIteration
(
)
;
GetCompositor
(
)
-
>
DrawDiagnostics
(
diagnosticFlags
pictureRect
aClipRect
aTransform
mFlashCounter
)
;
}
else
{
IntSize
textureSize
=
mCurrentTextureSource
-
>
GetSize
(
)
;
effect
-
>
mTextureCoords
=
Rect
(
Float
(
img
-
>
mPictureRect
.
x
)
/
textureSize
.
width
Float
(
img
-
>
mPictureRect
.
y
)
/
textureSize
.
height
Float
(
img
-
>
mPictureRect
.
width
)
/
textureSize
.
width
Float
(
img
-
>
mPictureRect
.
height
)
/
textureSize
.
height
)
;
if
(
img
-
>
mTextureHost
-
>
GetFlags
(
)
&
TextureFlags
:
:
ORIGIN_BOTTOM_LEFT
)
{
effect
-
>
mTextureCoords
.
y
=
effect
-
>
mTextureCoords
.
YMost
(
)
;
effect
-
>
mTextureCoords
.
height
=
-
effect
-
>
mTextureCoords
.
height
;
}
GetCompositor
(
)
-
>
DrawGeometry
(
pictureRect
aClipRect
aEffectChain
aOpacity
aTransform
aGeometry
)
;
GetCompositor
(
)
-
>
DrawDiagnostics
(
diagnosticFlags
pictureRect
aClipRect
aTransform
mFlashCounter
)
;
}
}
mBias
=
UpdateBias
(
GetCompositor
(
)
-
>
GetCompositionTime
(
)
mImages
[
imageIndex
]
.
mTimeStamp
uint32_t
(
imageIndex
+
1
)
<
mImages
.
Length
(
)
?
mImages
[
imageIndex
+
1
]
.
mTimeStamp
:
TimeStamp
(
)
mBias
)
;
}
void
ImageHost
:
:
BindTextureSource
(
)
{
int
imageIndex
=
ChooseImageIndex
(
)
;
if
(
imageIndex
<
0
)
{
return
;
}
if
(
uint32_t
(
imageIndex
)
+
1
<
mImages
.
Length
(
)
)
{
GetCompositor
(
)
-
>
CompositeUntil
(
mImages
[
imageIndex
+
1
]
.
mTimeStamp
+
TimeDuration
:
:
FromMilliseconds
(
BIAS_TIME_MS
)
)
;
}
TimedImage
*
img
=
&
mImages
[
imageIndex
]
;
img
-
>
mTextureHost
-
>
SetCompositor
(
GetCompositor
(
)
)
;
SetCurrentTextureHost
(
img
-
>
mTextureHost
)
;
mBias
=
UpdateBias
(
GetCompositor
(
)
-
>
GetCompositionTime
(
)
mImages
[
imageIndex
]
.
mTimeStamp
uint32_t
(
imageIndex
+
1
)
<
mImages
.
Length
(
)
?
mImages
[
imageIndex
+
1
]
.
mTimeStamp
:
TimeStamp
(
)
mBias
)
;
}
void
ImageHost
:
:
SetCompositor
(
Compositor
*
aCompositor
)
{
if
(
mCompositor
!
=
aCompositor
)
{
for
(
auto
&
img
:
mImages
)
{
img
.
mTextureHost
-
>
SetCompositor
(
aCompositor
)
;
}
}
CompositableHost
:
:
SetCompositor
(
aCompositor
)
;
}
void
ImageHost
:
:
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
{
aStream
<
<
aPrefix
;
aStream
<
<
nsPrintfCString
(
"
ImageHost
(
0x
%
p
)
"
this
)
.
get
(
)
;
nsAutoCString
pfx
(
aPrefix
)
;
pfx
+
=
"
"
;
for
(
auto
&
img
:
mImages
)
{
aStream
<
<
"
\
n
"
;
img
.
mTextureHost
-
>
PrintInfo
(
aStream
pfx
.
get
(
)
)
;
AppendToString
(
aStream
img
.
mPictureRect
"
[
picture
-
rect
=
"
"
]
"
)
;
}
}
void
ImageHost
:
:
Dump
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
bool
aDumpHtml
)
{
for
(
auto
&
img
:
mImages
)
{
aStream
<
<
aPrefix
;
aStream
<
<
(
aDumpHtml
?
"
<
ul
>
<
li
>
TextureHost
:
"
:
"
TextureHost
:
"
)
;
DumpTextureHost
(
aStream
img
.
mTextureHost
)
;
aStream
<
<
(
aDumpHtml
?
"
<
/
li
>
<
/
ul
>
"
:
"
"
)
;
}
}
LayerRenderState
ImageHost
:
:
GetRenderState
(
)
{
TimedImage
*
img
=
ChooseImage
(
)
;
if
(
img
)
{
SetCurrentTextureHost
(
img
-
>
mTextureHost
)
;
return
img
-
>
mTextureHost
-
>
GetRenderState
(
)
;
}
return
LayerRenderState
(
)
;
}
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
ImageHost
:
:
GetAsSurface
(
)
{
TimedImage
*
img
=
ChooseImage
(
)
;
if
(
img
)
{
return
img
-
>
mTextureHost
-
>
GetAsSurface
(
)
;
}
return
nullptr
;
}
bool
ImageHost
:
:
Lock
(
)
{
MOZ_ASSERT
(
!
mLocked
)
;
TimedImage
*
img
=
ChooseImage
(
)
;
if
(
!
img
)
{
return
false
;
}
SetCurrentTextureHost
(
img
-
>
mTextureHost
)
;
if
(
!
mCurrentTextureHost
-
>
Lock
(
)
)
{
return
false
;
}
mLocked
=
true
;
return
true
;
}
void
ImageHost
:
:
Unlock
(
)
{
MOZ_ASSERT
(
mLocked
)
;
if
(
mCurrentTextureHost
)
{
mCurrentTextureHost
-
>
Unlock
(
)
;
}
mLocked
=
false
;
}
IntSize
ImageHost
:
:
GetImageSize
(
)
const
{
const
TimedImage
*
img
=
ChooseImage
(
)
;
if
(
img
)
{
return
IntSize
(
img
-
>
mPictureRect
.
width
img
-
>
mPictureRect
.
height
)
;
}
return
IntSize
(
)
;
}
bool
ImageHost
:
:
IsOpaque
(
)
{
const
TimedImage
*
img
=
ChooseImage
(
)
;
if
(
!
img
)
{
return
false
;
}
if
(
img
-
>
mPictureRect
.
width
=
=
0
|
|
img
-
>
mPictureRect
.
height
=
=
0
|
|
!
img
-
>
mTextureHost
)
{
return
false
;
}
gfx
:
:
SurfaceFormat
format
=
img
-
>
mTextureHost
-
>
GetFormat
(
)
;
if
(
gfx
:
:
IsOpaque
(
format
)
)
{
return
true
;
}
return
false
;
}
already_AddRefed
<
TexturedEffect
>
ImageHost
:
:
GenEffect
(
const
gfx
:
:
SamplingFilter
aSamplingFilter
)
{
TimedImage
*
img
=
ChooseImage
(
)
;
if
(
!
img
)
{
return
nullptr
;
}
SetCurrentTextureHost
(
img
-
>
mTextureHost
)
;
if
(
!
mCurrentTextureHost
-
>
BindTextureSource
(
mCurrentTextureSource
)
)
{
return
nullptr
;
}
bool
isAlphaPremultiplied
=
true
;
if
(
mCurrentTextureHost
-
>
GetFlags
(
)
&
TextureFlags
:
:
NON_PREMULTIPLIED
)
{
isAlphaPremultiplied
=
false
;
}
return
CreateTexturedEffect
(
mCurrentTextureHost
mCurrentTextureSource
aSamplingFilter
isAlphaPremultiplied
GetRenderState
(
)
)
;
}
}
}
