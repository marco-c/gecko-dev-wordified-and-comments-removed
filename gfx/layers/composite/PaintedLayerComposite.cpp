#
include
"
PaintedLayerComposite
.
h
"
#
include
"
CompositableHost
.
h
"
#
include
"
FrameMetrics
.
h
"
#
include
"
Units
.
h
"
#
include
"
gfxEnv
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Polygon
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
ContentHost
.
h
"
#
include
"
mozilla
/
layers
/
Effects
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsMathUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
TextRenderer
.
h
"
#
include
"
GeckoProfiler
.
h
"
namespace
mozilla
{
namespace
layers
{
PaintedLayerComposite
:
:
PaintedLayerComposite
(
LayerManagerComposite
*
aManager
)
:
PaintedLayer
(
aManager
nullptr
)
LayerComposite
(
aManager
)
mBuffer
(
nullptr
)
{
MOZ_COUNT_CTOR
(
PaintedLayerComposite
)
;
mImplData
=
static_cast
<
LayerComposite
*
>
(
this
)
;
}
PaintedLayerComposite
:
:
~
PaintedLayerComposite
(
)
{
MOZ_COUNT_DTOR
(
PaintedLayerComposite
)
;
CleanupResources
(
)
;
}
bool
PaintedLayerComposite
:
:
SetCompositableHost
(
CompositableHost
*
aHost
)
{
switch
(
aHost
-
>
GetType
(
)
)
{
case
CompositableType
:
:
CONTENT_TILED
:
case
CompositableType
:
:
CONTENT_SINGLE
:
case
CompositableType
:
:
CONTENT_DOUBLE
:
mBuffer
=
static_cast
<
ContentHost
*
>
(
aHost
)
;
return
true
;
default
:
return
false
;
}
}
void
PaintedLayerComposite
:
:
Disconnect
(
)
{
Destroy
(
)
;
}
void
PaintedLayerComposite
:
:
Destroy
(
)
{
if
(
!
mDestroyed
)
{
CleanupResources
(
)
;
mDestroyed
=
true
;
}
}
Layer
*
PaintedLayerComposite
:
:
GetLayer
(
)
{
return
this
;
}
void
PaintedLayerComposite
:
:
SetLayerManager
(
HostLayerManager
*
aManager
)
{
LayerComposite
:
:
SetLayerManager
(
aManager
)
;
mManager
=
aManager
;
if
(
mBuffer
&
&
mCompositor
)
{
mBuffer
-
>
SetTextureSourceProvider
(
mCompositor
)
;
}
}
void
PaintedLayerComposite
:
:
RenderLayer
(
const
gfx
:
:
IntRect
&
aClipRect
const
Maybe
<
gfx
:
:
Polygon
>
&
aGeometry
)
{
if
(
!
mBuffer
|
|
!
mBuffer
-
>
IsAttached
(
)
)
{
return
;
}
AUTO_PROFILER_LABEL
(
"
PaintedLayerComposite
:
:
RenderLayer
"
GRAPHICS
)
;
Compositor
*
compositor
=
mCompositeManager
-
>
GetCompositor
(
)
;
MOZ_ASSERT
(
mBuffer
-
>
GetTextureSourceProvider
(
)
=
=
compositor
&
&
mBuffer
-
>
GetLayer
(
)
=
=
this
"
buffer
is
corrupted
"
)
;
const
nsIntRegion
visibleRegion
=
GetLocalVisibleRegion
(
)
.
ToUnknownRegion
(
)
;
#
ifdef
MOZ_DUMP_PAINTING
if
(
gfxEnv
:
:
DumpCompositorTextures
(
)
)
{
RefPtr
<
gfx
:
:
DataSourceSurface
>
surf
=
mBuffer
-
>
GetAsSurface
(
)
;
if
(
surf
)
{
WriteSnapshotToDumpFile
(
this
surf
)
;
}
}
#
endif
RenderWithAllMasks
(
this
compositor
aClipRect
[
&
]
(
EffectChain
&
effectChain
const
gfx
:
:
IntRect
&
clipRect
)
{
mBuffer
-
>
SetPaintWillResample
(
MayResample
(
)
)
;
mBuffer
-
>
Composite
(
compositor
this
effectChain
GetEffectiveOpacity
(
)
GetEffectiveTransform
(
)
GetSamplingFilter
(
)
clipRect
&
visibleRegion
aGeometry
)
;
}
)
;
mBuffer
-
>
BumpFlashCounter
(
)
;
compositor
-
>
MakeCurrent
(
)
;
}
CompositableHost
*
PaintedLayerComposite
:
:
GetCompositableHost
(
)
{
if
(
mBuffer
&
&
mBuffer
-
>
IsAttached
(
)
)
{
return
mBuffer
.
get
(
)
;
}
return
nullptr
;
}
void
PaintedLayerComposite
:
:
CleanupResources
(
)
{
if
(
mBuffer
)
{
mBuffer
-
>
Detach
(
this
)
;
}
mBuffer
=
nullptr
;
}
bool
PaintedLayerComposite
:
:
IsOpaque
(
)
{
if
(
!
mBuffer
|
|
!
mBuffer
-
>
IsAttached
(
)
)
{
return
false
;
}
return
PaintedLayer
:
:
IsOpaque
(
)
;
}
void
PaintedLayerComposite
:
:
GenEffectChain
(
EffectChain
&
aEffect
)
{
aEffect
.
mLayerRef
=
this
;
aEffect
.
mPrimaryEffect
=
mBuffer
-
>
GenEffect
(
GetSamplingFilter
(
)
)
;
}
void
PaintedLayerComposite
:
:
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
{
PaintedLayer
:
:
PrintInfo
(
aStream
aPrefix
)
;
if
(
mBuffer
&
&
mBuffer
-
>
IsAttached
(
)
)
{
aStream
<
<
"
\
n
"
;
nsAutoCString
pfx
(
aPrefix
)
;
pfx
+
=
"
"
;
mBuffer
-
>
PrintInfo
(
aStream
pfx
.
get
(
)
)
;
}
}
const
gfx
:
:
TiledIntRegion
&
PaintedLayerComposite
:
:
GetInvalidRegion
(
)
{
if
(
mBuffer
)
{
nsIntRegion
region
=
mInvalidRegion
.
GetRegion
(
)
;
mBuffer
-
>
AddAnimationInvalidation
(
region
)
;
}
return
mInvalidRegion
;
}
}
}
