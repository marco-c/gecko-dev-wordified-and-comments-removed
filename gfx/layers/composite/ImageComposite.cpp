#
include
"
ImageComposite
.
h
"
#
define
BIAS_TIME_MS
1
.
0
namespace
mozilla
{
using
namespace
gfx
;
namespace
layers
{
ImageComposite
:
:
ImageComposite
(
)
:
mLastFrameID
(
-
1
)
mLastProducerID
(
-
1
)
mBias
(
BIAS_NONE
)
{
}
ImageComposite
:
:
~
ImageComposite
(
)
{
}
static
TimeStamp
GetBiasedTime
(
const
TimeStamp
&
aInput
ImageComposite
:
:
Bias
aBias
)
{
switch
(
aBias
)
{
case
ImageComposite
:
:
BIAS_NEGATIVE
:
return
aInput
-
TimeDuration
:
:
FromMilliseconds
(
BIAS_TIME_MS
)
;
case
ImageComposite
:
:
BIAS_POSITIVE
:
return
aInput
+
TimeDuration
:
:
FromMilliseconds
(
BIAS_TIME_MS
)
;
default
:
return
aInput
;
}
}
ImageComposite
:
:
Bias
ImageComposite
:
:
UpdateBias
(
const
TimeStamp
&
aCompositionTime
const
TimeStamp
&
aCompositedImageTime
const
TimeStamp
&
aNextImageTime
ImageComposite
:
:
Bias
aBias
)
{
if
(
aCompositedImageTime
.
IsNull
(
)
)
{
return
ImageComposite
:
:
BIAS_NONE
;
}
TimeDuration
threshold
=
TimeDuration
:
:
FromMilliseconds
(
1
.
0
)
;
if
(
aCompositionTime
-
aCompositedImageTime
<
threshold
&
&
aCompositionTime
-
aCompositedImageTime
>
-
threshold
)
{
return
ImageComposite
:
:
BIAS_NEGATIVE
;
}
if
(
!
aNextImageTime
.
IsNull
(
)
&
&
aNextImageTime
-
aCompositionTime
<
threshold
&
&
aNextImageTime
-
aCompositionTime
>
-
threshold
)
{
return
ImageComposite
:
:
BIAS_POSITIVE
;
}
return
ImageComposite
:
:
BIAS_NONE
;
}
int
ImageComposite
:
:
ChooseImageIndex
(
)
const
{
if
(
mImages
.
IsEmpty
(
)
)
{
return
-
1
;
}
TimeStamp
now
=
GetCompositionTime
(
)
;
if
(
now
.
IsNull
(
)
)
{
for
(
uint32_t
i
=
0
;
i
<
mImages
.
Length
(
)
;
+
+
i
)
{
if
(
mImages
[
i
]
.
mFrameID
=
=
mLastFrameID
&
&
mImages
[
i
]
.
mProducerID
=
=
mLastProducerID
)
{
return
i
;
}
}
return
-
1
;
}
uint32_t
result
=
0
;
while
(
result
+
1
<
mImages
.
Length
(
)
&
&
GetBiasedTime
(
mImages
[
result
+
1
]
.
mTimeStamp
mBias
)
<
=
now
)
{
+
+
result
;
}
return
result
;
}
const
ImageComposite
:
:
TimedImage
*
ImageComposite
:
:
ChooseImage
(
)
const
{
int
index
=
ChooseImageIndex
(
)
;
return
index
>
=
0
?
&
mImages
[
index
]
:
nullptr
;
}
ImageComposite
:
:
TimedImage
*
ImageComposite
:
:
ChooseImage
(
)
{
int
index
=
ChooseImageIndex
(
)
;
return
index
>
=
0
?
&
mImages
[
index
]
:
nullptr
;
}
}
}
#
undef
BIAS_TIME_MS
