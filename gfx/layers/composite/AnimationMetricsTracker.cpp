#
include
"
mozilla
/
layers
/
AnimationMetricsTracker
.
h
"
#
include
<
algorithm
>
#
include
<
inttypes
.
h
>
#
include
"
mozilla
/
Telemetry
.
h
"
#
define
AMT_LOG
(
.
.
.
)
namespace
mozilla
{
namespace
layers
{
AnimationMetricsTracker
:
:
AnimationMetricsTracker
(
)
{
}
AnimationMetricsTracker
:
:
~
AnimationMetricsTracker
(
)
{
}
void
AnimationMetricsTracker
:
:
UpdateAnimationInProgress
(
bool
aInProgress
uint64_t
aLayerArea
)
{
MOZ_ASSERT
(
aInProgress
|
|
aLayerArea
=
=
0
)
;
if
(
mCurrentAnimationStart
&
&
!
aInProgress
)
{
AnimationEnded
(
)
;
mCurrentAnimationStart
=
TimeStamp
(
)
;
mMaxLayerAreaAnimated
=
0
;
}
else
if
(
aInProgress
)
{
if
(
!
mCurrentAnimationStart
)
{
mCurrentAnimationStart
=
TimeStamp
:
:
Now
(
)
;
mMaxLayerAreaAnimated
=
aLayerArea
;
AnimationStarted
(
)
;
}
else
{
mMaxLayerAreaAnimated
=
std
:
:
max
(
mMaxLayerAreaAnimated
aLayerArea
)
;
}
}
}
void
AnimationMetricsTracker
:
:
AnimationStarted
(
)
{
}
void
AnimationMetricsTracker
:
:
AnimationEnded
(
)
{
MOZ_ASSERT
(
mCurrentAnimationStart
)
;
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
COMPOSITOR_ANIMATION_DURATION
mCurrentAnimationStart
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
COMPOSITOR_ANIMATION_MAX_LAYER_AREA
mMaxLayerAreaAnimated
)
;
AMT_LOG
(
"
Ended
animation
;
duration
:
%
f
ms
area
:
%
"
PRIu64
"
\
n
"
(
TimeStamp
:
:
Now
(
)
-
mCurrentAnimationStart
)
.
ToMilliseconds
(
)
mMaxLayerAreaAnimated
)
;
}
}
}
