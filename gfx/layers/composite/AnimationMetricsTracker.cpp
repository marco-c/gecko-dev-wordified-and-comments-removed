#
include
"
mozilla
/
layers
/
AnimationMetricsTracker
.
h
"
#
include
<
algorithm
>
#
include
<
cmath
>
#
include
<
inttypes
.
h
>
#
define
AMT_LOG
(
.
.
.
)
namespace
mozilla
{
namespace
layers
{
AnimationMetricsTracker
:
:
AnimationMetricsTracker
(
)
:
mMaxLayerAreaAnimated
(
0
)
{
}
AnimationMetricsTracker
:
:
~
AnimationMetricsTracker
(
)
{
}
void
AnimationMetricsTracker
:
:
UpdateAnimationInProgress
(
AnimationProcessTypes
aActive
uint64_t
aLayerArea
TimeDuration
aVsyncInterval
)
{
bool
inProgress
=
(
aActive
!
=
AnimationProcessTypes
:
:
eNone
)
;
MOZ_ASSERT
(
inProgress
|
|
aLayerArea
=
=
0
)
;
if
(
mCurrentAnimationStart
&
&
!
inProgress
)
{
AnimationEnded
(
)
;
mCurrentAnimationStart
=
TimeStamp
(
)
;
mMaxLayerAreaAnimated
=
0
;
}
else
if
(
inProgress
)
{
if
(
!
mCurrentAnimationStart
)
{
mCurrentAnimationStart
=
TimeStamp
:
:
Now
(
)
;
mMaxLayerAreaAnimated
=
aLayerArea
;
AnimationStarted
(
)
;
}
else
{
mMaxLayerAreaAnimated
=
std
:
:
max
(
mMaxLayerAreaAnimated
aLayerArea
)
;
}
}
UpdateAnimationThroughput
(
"
chrome
"
(
aActive
&
AnimationProcessTypes
:
:
eChrome
)
!
=
AnimationProcessTypes
:
:
eNone
mChromeAnimation
aVsyncInterval
Telemetry
:
:
COMPOSITOR_ANIMATION_THROUGHPUT_CHROME
Telemetry
:
:
COMPOSITOR_ANIMATION_MAX_CONTIGUOUS_DROPS_CHROME
)
;
UpdateAnimationThroughput
(
"
content
"
(
aActive
&
AnimationProcessTypes
:
:
eContent
)
!
=
AnimationProcessTypes
:
:
eNone
mContentAnimation
aVsyncInterval
Telemetry
:
:
COMPOSITOR_ANIMATION_THROUGHPUT_CONTENT
Telemetry
:
:
COMPOSITOR_ANIMATION_MAX_CONTIGUOUS_DROPS_CONTENT
)
;
}
void
AnimationMetricsTracker
:
:
UpdateApzAnimationInProgress
(
bool
aInProgress
TimeDuration
aVsyncInterval
)
{
UpdateAnimationThroughput
(
"
apz
"
aInProgress
mApzAnimation
aVsyncInterval
Telemetry
:
:
COMPOSITOR_ANIMATION_THROUGHPUT_APZ
Telemetry
:
:
COMPOSITOR_ANIMATION_MAX_CONTIGUOUS_DROPS_APZ
)
;
}
void
AnimationMetricsTracker
:
:
AnimationStarted
(
)
{
}
void
AnimationMetricsTracker
:
:
AnimationEnded
(
)
{
MOZ_ASSERT
(
mCurrentAnimationStart
)
;
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
COMPOSITOR_ANIMATION_DURATION
mCurrentAnimationStart
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
COMPOSITOR_ANIMATION_MAX_LAYER_AREA
mMaxLayerAreaAnimated
)
;
AMT_LOG
(
"
Ended
animation
;
duration
:
%
f
ms
area
:
%
"
PRIu64
"
\
n
"
(
TimeStamp
:
:
Now
(
)
-
mCurrentAnimationStart
)
.
ToMilliseconds
(
)
mMaxLayerAreaAnimated
)
;
}
void
AnimationMetricsTracker
:
:
UpdateAnimationThroughput
(
const
char
*
aLabel
bool
aInProgress
AnimationData
&
aAnimation
TimeDuration
aVsyncInterval
Telemetry
:
:
HistogramID
aThroughputHistogram
Telemetry
:
:
HistogramID
aMaxDropsHistogram
)
{
if
(
aInProgress
&
&
!
aAnimation
.
mStart
)
{
aAnimation
.
mStart
=
TimeStamp
:
:
Now
(
)
;
aAnimation
.
mLastFrameTime
=
aAnimation
.
mStart
;
aAnimation
.
mLongestFrame
=
TimeDuration
(
)
;
aAnimation
.
mFrameCount
=
1
;
AMT_LOG
(
"
Compositor
animation
of
type
%
s
just
started
\
n
"
aLabel
)
;
}
else
if
(
aInProgress
&
&
aAnimation
.
mStart
)
{
aAnimation
.
mFrameCount
+
+
;
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
aAnimation
.
mLongestFrame
=
std
:
:
max
(
aAnimation
.
mLongestFrame
now
-
aAnimation
.
mLastFrameTime
)
;
aAnimation
.
mLastFrameTime
=
now
;
}
else
if
(
!
aInProgress
&
&
aAnimation
.
mStart
)
{
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
TimeDuration
animationLength
=
now
-
aAnimation
.
mStart
;
aAnimation
.
mStart
=
TimeStamp
(
)
;
if
(
aVsyncInterval
=
=
TimeDuration
:
:
Forever
(
)
)
{
AMT_LOG
(
"
Invalid
vsync
interval
:
forever
\
n
"
)
;
return
;
}
double
vsyncIntervalMs
=
aVsyncInterval
.
ToMilliseconds
(
)
;
if
(
vsyncIntervalMs
<
1
.
0f
)
{
AMT_LOG
(
"
Invalid
vsync
interval
:
%
fms
\
n
"
vsyncIntervalMs
)
;
return
;
}
uint32_t
expectedFrameCount
=
std
:
:
lround
(
animationLength
.
ToMilliseconds
(
)
/
vsyncIntervalMs
)
;
AMT_LOG
(
"
Type
%
s
ran
for
%
fms
(
interval
:
%
fms
)
%
u
frames
(
expected
:
%
u
)
\
n
"
aLabel
animationLength
.
ToMilliseconds
(
)
vsyncIntervalMs
aAnimation
.
mFrameCount
expectedFrameCount
)
;
if
(
expectedFrameCount
<
=
0
)
{
return
;
}
uint32_t
frameHitRatio
=
(
uint32_t
)
(
1000
.
0f
*
aAnimation
.
mFrameCount
/
expectedFrameCount
)
;
Telemetry
:
:
Accumulate
(
aThroughputHistogram
frameHitRatio
)
;
AMT_LOG
(
"
Reported
frameHitRatio
%
u
\
n
"
frameHitRatio
)
;
TimeDuration
longestFrame
=
std
:
:
max
(
aAnimation
.
mLongestFrame
now
-
aAnimation
.
mLastFrameTime
)
;
uint32_t
framesDropped
=
std
:
:
lround
(
longestFrame
.
ToMilliseconds
(
)
/
vsyncIntervalMs
)
-
1
;
AMT_LOG
(
"
Longest
frame
was
%
fms
(
%
d
drops
)
\
n
"
longestFrame
.
ToMilliseconds
(
)
framesDropped
)
;
Telemetry
:
:
Accumulate
(
aMaxDropsHistogram
framesDropped
)
;
}
}
}
}
