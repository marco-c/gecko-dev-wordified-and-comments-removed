#
ifndef
MOZILLA_GFX_IMAGECOMPOSITE_H
#
define
MOZILLA_GFX_IMAGECOMPOSITE_H
#
include
"
CompositableHost
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
layers
{
class
ImageComposite
{
public
:
explicit
ImageComposite
(
)
;
~
ImageComposite
(
)
;
int32_t
GetFrameID
(
)
{
const
TimedImage
*
img
=
ChooseImage
(
)
;
return
img
?
img
-
>
mFrameID
:
-
1
;
}
int32_t
GetProducerID
(
)
{
const
TimedImage
*
img
=
ChooseImage
(
)
;
return
img
?
img
-
>
mProducerID
:
-
1
;
}
int32_t
GetLastFrameID
(
)
const
{
return
mLastFrameID
;
}
int32_t
GetLastProducerID
(
)
const
{
return
mLastProducerID
;
}
enum
Bias
{
BIAS_NONE
BIAS_NEGATIVE
BIAS_POSITIVE
}
;
protected
:
static
Bias
UpdateBias
(
const
TimeStamp
&
aCompositionTime
const
TimeStamp
&
aCompositedImageTime
const
TimeStamp
&
aNextImageTime
ImageComposite
:
:
Bias
aBias
)
;
virtual
TimeStamp
GetCompositionTime
(
)
const
=
0
;
struct
TimedImage
{
CompositableTextureHostRef
mTextureHost
;
TimeStamp
mTimeStamp
;
gfx
:
:
IntRect
mPictureRect
;
int32_t
mFrameID
;
int32_t
mProducerID
;
}
;
const
TimedImage
*
ChooseImage
(
)
const
;
TimedImage
*
ChooseImage
(
)
;
int
ChooseImageIndex
(
)
const
;
nsTArray
<
TimedImage
>
mImages
;
int32_t
mLastFrameID
;
int32_t
mLastProducerID
;
Bias
mBias
;
}
;
}
}
#
endif
