#
ifndef
GFX_CanvasLayerComposite_H
#
define
GFX_CanvasLayerComposite_H
#
include
"
Layers
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
layers
/
LayerManagerComposite
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nscore
.
h
"
namespace
mozilla
{
namespace
layers
{
class
CompositableHost
;
class
ImageHost
;
class
CanvasLayerComposite
:
public
CanvasLayer
public
LayerComposite
{
public
:
explicit
CanvasLayerComposite
(
LayerManagerComposite
*
aManager
)
;
protected
:
virtual
~
CanvasLayerComposite
(
)
;
public
:
bool
SetCompositableHost
(
CompositableHost
*
aHost
)
override
;
void
Disconnect
(
)
override
{
Destroy
(
)
;
}
void
SetLayerManager
(
HostLayerManager
*
aManager
)
override
;
Layer
*
GetLayer
(
)
override
;
void
RenderLayer
(
const
gfx
:
:
IntRect
&
aClipRect
const
Maybe
<
gfx
:
:
Polygon
>
&
aGeometry
)
override
;
void
CleanupResources
(
)
override
;
void
GenEffectChain
(
EffectChain
&
aEffect
)
override
;
CompositableHost
*
GetCompositableHost
(
)
override
;
HostLayer
*
AsHostLayer
(
)
override
{
return
this
;
}
const
char
*
Name
(
)
const
override
{
return
"
CanvasLayerComposite
"
;
}
protected
:
RefPtr
<
CanvasRenderer
>
CreateCanvasRendererInternal
(
)
override
{
MOZ_CRASH
(
"
Incompatible
surface
type
"
)
;
return
nullptr
;
}
void
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
override
;
private
:
gfx
:
:
SamplingFilter
GetSamplingFilter
(
)
;
private
:
RefPtr
<
CompositableHost
>
mCompositableHost
;
}
;
}
}
#
endif
