#
include
"
GPUVideoTextureHost
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
mozilla
/
RemoteDecoderManagerParent
.
h
"
#
include
"
mozilla
/
layers
/
ImageBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
VideoBridgeParent
.
h
"
#
include
"
mozilla
/
webrender
/
RenderTextureHostWrapper
.
h
"
#
include
"
mozilla
/
webrender
/
RenderThread
.
h
"
namespace
mozilla
{
namespace
layers
{
GPUVideoTextureHost
:
:
GPUVideoTextureHost
(
TextureFlags
aFlags
const
SurfaceDescriptorGPUVideo
&
aDescriptor
)
:
TextureHost
(
aFlags
)
mDescriptor
(
aDescriptor
)
{
MOZ_COUNT_CTOR
(
GPUVideoTextureHost
)
;
}
GPUVideoTextureHost
:
:
~
GPUVideoTextureHost
(
)
{
MOZ_COUNT_DTOR
(
GPUVideoTextureHost
)
;
}
GPUVideoTextureHost
*
GPUVideoTextureHost
:
:
CreateFromDescriptor
(
TextureFlags
aFlags
const
SurfaceDescriptorGPUVideo
&
aDescriptor
)
{
return
new
GPUVideoTextureHost
(
aFlags
aDescriptor
)
;
}
TextureHost
*
GPUVideoTextureHost
:
:
EnsureWrappedTextureHost
(
)
{
if
(
mWrappedTextureHost
)
{
return
mWrappedTextureHost
;
}
const
auto
&
sd
=
static_cast
<
const
SurfaceDescriptorRemoteDecoder
&
>
(
mDescriptor
)
;
VideoBridgeParent
*
parent
=
VideoBridgeParent
:
:
GetSingleton
(
sd
.
source
(
)
)
;
if
(
!
parent
)
{
return
nullptr
;
}
mWrappedTextureHost
=
parent
-
>
LookupTexture
(
sd
.
handle
(
)
)
;
if
(
!
mWrappedTextureHost
)
{
return
nullptr
;
}
if
(
mWrappedTextureHost
-
>
AsBufferTextureHost
(
)
)
{
mWrappedTextureHost
-
>
AsBufferTextureHost
(
)
-
>
DisableExternalTextures
(
)
;
}
if
(
mExternalImageId
.
isSome
(
)
)
{
mWrappedTextureHost
-
>
EnsureRenderTexture
(
Nothing
(
)
)
;
MOZ_ASSERT
(
mWrappedTextureHost
-
>
mExternalImageId
.
isSome
(
)
)
;
auto
wrappedId
=
mWrappedTextureHost
-
>
mExternalImageId
.
ref
(
)
;
RefPtr
<
wr
:
:
RenderTextureHost
>
texture
=
new
wr
:
:
RenderTextureHostWrapper
(
wrappedId
)
;
wr
:
:
RenderThread
:
:
Get
(
)
-
>
RegisterExternalImage
(
mExternalImageId
.
ref
(
)
texture
.
forget
(
)
)
;
}
if
(
mPendingUpdatedInternal
)
{
mWrappedTextureHost
-
>
UpdatedInternal
(
mPendingIntRegion
.
ptrOr
(
nullptr
)
)
;
mPendingIntRegion
.
reset
(
)
;
mPendingUpdatedInternal
=
false
;
}
return
mWrappedTextureHost
;
}
bool
GPUVideoTextureHost
:
:
IsValid
(
)
{
return
!
!
EnsureWrappedTextureHost
(
)
;
}
gfx
:
:
YUVColorSpace
GPUVideoTextureHost
:
:
GetYUVColorSpace
(
)
const
{
MOZ_ASSERT
(
mWrappedTextureHost
"
Image
isn
'
t
valid
yet
"
)
;
if
(
!
mWrappedTextureHost
)
{
return
TextureHost
:
:
GetYUVColorSpace
(
)
;
}
return
mWrappedTextureHost
-
>
GetYUVColorSpace
(
)
;
}
gfx
:
:
ColorDepth
GPUVideoTextureHost
:
:
GetColorDepth
(
)
const
{
MOZ_ASSERT
(
mWrappedTextureHost
"
Image
isn
'
t
valid
yet
"
)
;
if
(
!
mWrappedTextureHost
)
{
return
TextureHost
:
:
GetColorDepth
(
)
;
}
return
mWrappedTextureHost
-
>
GetColorDepth
(
)
;
}
gfx
:
:
ColorRange
GPUVideoTextureHost
:
:
GetColorRange
(
)
const
{
MOZ_ASSERT
(
mWrappedTextureHost
"
Image
isn
'
t
valid
yet
"
)
;
if
(
!
mWrappedTextureHost
)
{
return
TextureHost
:
:
GetColorRange
(
)
;
}
return
mWrappedTextureHost
-
>
GetColorRange
(
)
;
}
gfx
:
:
IntSize
GPUVideoTextureHost
:
:
GetSize
(
)
const
{
MOZ_ASSERT
(
mWrappedTextureHost
"
Image
isn
'
t
valid
yet
"
)
;
if
(
!
mWrappedTextureHost
)
{
return
gfx
:
:
IntSize
(
)
;
}
return
mWrappedTextureHost
-
>
GetSize
(
)
;
}
gfx
:
:
SurfaceFormat
GPUVideoTextureHost
:
:
GetFormat
(
)
const
{
MOZ_ASSERT
(
mWrappedTextureHost
"
Image
isn
'
t
valid
yet
"
)
;
if
(
!
mWrappedTextureHost
)
{
return
gfx
:
:
SurfaceFormat
:
:
UNKNOWN
;
}
return
mWrappedTextureHost
-
>
GetFormat
(
)
;
}
bool
GPUVideoTextureHost
:
:
HasIntermediateBuffer
(
)
const
{
MOZ_ASSERT
(
mWrappedTextureHost
"
Image
isn
'
t
valid
yet
"
)
;
if
(
!
mWrappedTextureHost
)
{
return
false
;
}
return
mWrappedTextureHost
-
>
HasIntermediateBuffer
(
)
;
}
void
GPUVideoTextureHost
:
:
UpdatedInternal
(
const
nsIntRegion
*
Region
)
{
if
(
!
EnsureWrappedTextureHost
(
)
)
{
mPendingUpdatedInternal
=
true
;
if
(
Region
)
{
mPendingIntRegion
=
Some
(
*
Region
)
;
}
else
{
mPendingIntRegion
.
reset
(
)
;
}
return
;
}
EnsureWrappedTextureHost
(
)
-
>
UpdatedInternal
(
Region
)
;
}
void
GPUVideoTextureHost
:
:
CreateRenderTexture
(
const
wr
:
:
ExternalImageId
&
aExternalImageId
)
{
MOZ_ASSERT
(
mExternalImageId
.
isSome
(
)
)
;
if
(
mWrappedTextureHost
)
{
mWrappedTextureHost
-
>
EnsureRenderTexture
(
Nothing
(
)
)
;
MOZ_ASSERT
(
mWrappedTextureHost
-
>
mExternalImageId
.
isSome
(
)
)
;
auto
wrappedId
=
mWrappedTextureHost
-
>
mExternalImageId
.
ref
(
)
;
RefPtr
<
wr
:
:
RenderTextureHost
>
texture
=
new
wr
:
:
RenderTextureHostWrapper
(
wrappedId
)
;
wr
:
:
RenderThread
:
:
Get
(
)
-
>
RegisterExternalImage
(
mExternalImageId
.
ref
(
)
texture
.
forget
(
)
)
;
return
;
}
EnsureWrappedTextureHost
(
)
;
}
void
GPUVideoTextureHost
:
:
MaybeDestroyRenderTexture
(
)
{
if
(
mExternalImageId
.
isNothing
(
)
|
|
!
mWrappedTextureHost
)
{
return
;
}
TextureHost
:
:
DestroyRenderTexture
(
mExternalImageId
.
ref
(
)
)
;
}
uint32_t
GPUVideoTextureHost
:
:
NumSubTextures
(
)
{
if
(
!
EnsureWrappedTextureHost
(
)
)
{
return
0
;
}
return
EnsureWrappedTextureHost
(
)
-
>
NumSubTextures
(
)
;
}
void
GPUVideoTextureHost
:
:
PushResourceUpdates
(
wr
:
:
TransactionBuilder
&
aResources
ResourceUpdateOp
aOp
const
Range
<
wr
:
:
ImageKey
>
&
aImageKeys
const
wr
:
:
ExternalImageId
&
aExtID
)
{
MOZ_ASSERT
(
EnsureWrappedTextureHost
(
)
"
Image
isn
'
t
valid
yet
"
)
;
if
(
!
EnsureWrappedTextureHost
(
)
)
{
return
;
}
EnsureWrappedTextureHost
(
)
-
>
PushResourceUpdates
(
aResources
aOp
aImageKeys
aExtID
)
;
}
void
GPUVideoTextureHost
:
:
PushDisplayItems
(
wr
:
:
DisplayListBuilder
&
aBuilder
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
wr
:
:
ImageRendering
aFilter
const
Range
<
wr
:
:
ImageKey
>
&
aImageKeys
PushDisplayItemFlagSet
aFlags
)
{
MOZ_ASSERT
(
EnsureWrappedTextureHost
(
)
"
Image
isn
'
t
valid
yet
"
)
;
MOZ_ASSERT
(
aImageKeys
.
length
(
)
>
0
)
;
if
(
!
EnsureWrappedTextureHost
(
)
)
{
return
;
}
EnsureWrappedTextureHost
(
)
-
>
PushDisplayItems
(
aBuilder
aBounds
aClip
aFilter
aImageKeys
aFlags
)
;
}
bool
GPUVideoTextureHost
:
:
SupportsExternalCompositing
(
WebRenderBackend
aBackend
)
{
if
(
!
EnsureWrappedTextureHost
(
)
)
{
return
false
;
}
return
EnsureWrappedTextureHost
(
)
-
>
SupportsExternalCompositing
(
aBackend
)
;
}
void
GPUVideoTextureHost
:
:
UnbindTextureSource
(
)
{
if
(
EnsureWrappedTextureHost
(
)
)
{
EnsureWrappedTextureHost
(
)
-
>
UnbindTextureSource
(
)
;
}
TextureHost
:
:
UnbindTextureSource
(
)
;
}
void
GPUVideoTextureHost
:
:
NotifyNotUsed
(
)
{
if
(
EnsureWrappedTextureHost
(
)
)
{
EnsureWrappedTextureHost
(
)
-
>
NotifyNotUsed
(
)
;
}
TextureHost
:
:
NotifyNotUsed
(
)
;
}
}
}
