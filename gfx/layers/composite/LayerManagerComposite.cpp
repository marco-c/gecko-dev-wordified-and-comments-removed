#
include
"
LayerManagerComposite
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
CanvasLayerComposite
.
h
"
#
include
"
ColorLayerComposite
.
h
"
#
include
"
CompositableHost
.
h
"
#
include
"
ContainerLayerComposite
.
h
"
#
include
"
Diagnostics
.
h
"
#
include
"
FPSCounter
.
h
"
#
include
"
FrameMetrics
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
ImageLayerComposite
.
h
"
#
include
"
Layers
.
h
"
#
include
"
LayerScope
.
h
"
#
include
"
protobuf
/
LayerScopePacket
.
pb
.
h
"
#
include
"
PaintedLayerComposite
.
h
"
#
include
"
TiledContentHost
.
h
"
#
include
"
Units
.
h
"
#
include
"
UnitTransforms
.
h
"
#
include
"
apz
/
src
/
AsyncPanZoomController
.
h
"
#
include
"
gfxPrefs
.
h
"
#
ifdef
XP_MACOSX
#
include
"
gfxPlatformMac
.
h
"
#
endif
#
include
"
gfxRect
.
h
"
#
include
"
gfxUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
Effects
.
h
"
#
include
"
mozilla
/
layers
/
LayerMetricsWrapper
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
widget
/
CompositorWidget
.
h
"
#
include
"
ipc
/
CompositorBench
.
h
"
#
include
"
ipc
/
ShadowLayerUtils
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsAppRunner
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsPoint
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsRegion
.
h
"
#
if
defined
(
MOZ_WIDGET_ANDROID
)
#
include
<
android
/
log
.
h
>
#
include
<
android
/
native_window
.
h
>
#
include
"
mozilla
/
widget
/
AndroidCompositorWidget
.
h
"
#
include
"
opengl
/
CompositorOGL
.
h
"
#
include
"
GLConsts
.
h
"
#
include
"
GLContextEGL
.
h
"
#
include
"
GLContextProvider
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
widget
/
AndroidCompositorWidget
.
h
"
#
include
"
ScopedGLHelpers
.
h
"
#
endif
#
include
"
GeckoProfiler
.
h
"
#
include
"
TextRenderer
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeParent
.
h
"
#
include
"
TreeTraversal
.
h
"
#
ifdef
USE_SKIA
#
include
"
PaintCounter
.
h
"
#
endif
class
gfxContext
;
namespace
mozilla
{
namespace
layers
{
class
ImageLayer
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
gl
;
static
LayerComposite
*
ToLayerComposite
(
Layer
*
aLayer
)
{
return
static_cast
<
LayerComposite
*
>
(
aLayer
-
>
ImplData
(
)
)
;
}
static
void
ClearSubtree
(
Layer
*
aLayer
)
{
ForEachNode
<
ForwardIterator
>
(
aLayer
[
]
(
Layer
*
layer
)
{
ToLayerComposite
(
layer
)
-
>
CleanupResources
(
)
;
}
)
;
}
void
LayerManagerComposite
:
:
ClearCachedResources
(
Layer
*
aSubtree
)
{
MOZ_ASSERT
(
!
aSubtree
|
|
aSubtree
-
>
Manager
(
)
=
=
this
)
;
Layer
*
subtree
=
aSubtree
?
aSubtree
:
mRoot
.
get
(
)
;
if
(
!
subtree
)
{
return
;
}
ClearSubtree
(
subtree
)
;
}
HostLayerManager
:
:
HostLayerManager
(
)
:
mDebugOverlayWantsNextFrame
(
false
)
mWarningLevel
(
0
.
0f
)
mCompositorBridgeID
(
0
)
mWindowOverlayChanged
(
false
)
mLastPaintTime
(
TimeDuration
:
:
Forever
(
)
)
mRenderStartTime
(
TimeStamp
:
:
Now
(
)
)
{
}
HostLayerManager
:
:
~
HostLayerManager
(
)
{
}
void
HostLayerManager
:
:
RecordPaintTimes
(
const
PaintTiming
&
aTiming
)
{
mDiagnostics
-
>
RecordPaintTimes
(
aTiming
)
;
}
void
HostLayerManager
:
:
RecordUpdateTime
(
float
aValue
)
{
mDiagnostics
-
>
RecordUpdateTime
(
aValue
)
;
}
LayerManagerComposite
:
:
LayerManagerComposite
(
Compositor
*
aCompositor
)
:
mUnusedApzTransformWarning
(
false
)
mDisabledApzWarning
(
false
)
mCompositor
(
aCompositor
)
mInTransaction
(
false
)
mIsCompositorReady
(
false
)
#
if
defined
(
MOZ_WIDGET_ANDROID
)
mScreenPixelsTarget
(
nullptr
)
#
endif
{
mTextRenderer
=
new
TextRenderer
(
)
;
mDiagnostics
=
MakeUnique
<
Diagnostics
>
(
)
;
MOZ_ASSERT
(
aCompositor
)
;
#
ifdef
USE_SKIA
mPaintCounter
=
nullptr
;
#
endif
}
LayerManagerComposite
:
:
~
LayerManagerComposite
(
)
{
Destroy
(
)
;
}
void
LayerManagerComposite
:
:
Destroy
(
)
{
if
(
!
mDestroyed
)
{
mCompositor
-
>
GetWidget
(
)
-
>
CleanupWindowEffects
(
)
;
if
(
mRoot
)
{
RootLayer
(
)
-
>
Destroy
(
)
;
}
mCompositor
-
>
CancelFrame
(
)
;
mRoot
=
nullptr
;
mClonedLayerTreeProperties
=
nullptr
;
mDestroyed
=
true
;
#
ifdef
USE_SKIA
mPaintCounter
=
nullptr
;
#
endif
}
}
void
LayerManagerComposite
:
:
UpdateRenderBounds
(
const
IntRect
&
aRect
)
{
mRenderBounds
=
aRect
;
}
bool
LayerManagerComposite
:
:
AreComponentAlphaLayersEnabled
(
)
{
return
mCompositor
-
>
GetBackendType
(
)
!
=
LayersBackend
:
:
LAYERS_BASIC
&
&
mCompositor
-
>
SupportsEffect
(
EffectTypes
:
:
COMPONENT_ALPHA
)
&
&
LayerManager
:
:
AreComponentAlphaLayersEnabled
(
)
;
}
bool
LayerManagerComposite
:
:
BeginTransaction
(
)
{
mInTransaction
=
true
;
if
(
!
mCompositor
-
>
Ready
(
)
)
{
return
false
;
}
mIsCompositorReady
=
true
;
return
true
;
}
void
LayerManagerComposite
:
:
BeginTransactionWithDrawTarget
(
DrawTarget
*
aTarget
const
IntRect
&
aRect
)
{
mInTransaction
=
true
;
if
(
!
mCompositor
-
>
Ready
(
)
)
{
return
;
}
#
ifdef
MOZ_LAYERS_HAVE_LOG
MOZ_LAYERS_LOG
(
(
"
[
-
-
-
-
-
BeginTransaction
"
)
)
;
Log
(
)
;
#
endif
if
(
mDestroyed
)
{
NS_WARNING
(
"
Call
on
destroyed
layer
manager
"
)
;
return
;
}
mIsCompositorReady
=
true
;
mCompositor
-
>
SetTargetContext
(
aTarget
aRect
)
;
mTarget
=
aTarget
;
mTargetBounds
=
aRect
;
}
void
LayerManagerComposite
:
:
PostProcessLayers
(
nsIntRegion
&
aOpaqueRegion
)
{
LayerIntRegion
visible
;
LayerComposite
*
rootComposite
=
static_cast
<
LayerComposite
*
>
(
mRoot
-
>
AsHostLayer
(
)
)
;
PostProcessLayers
(
mRoot
aOpaqueRegion
visible
ViewAs
<
RenderTargetPixel
>
(
rootComposite
-
>
GetShadowClipRect
(
)
PixelCastJustification
:
:
RenderTargetIsParentLayerForRoot
)
Nothing
(
)
)
;
}
bool
ShouldProcessLayer
(
Layer
*
aLayer
)
{
if
(
!
aLayer
-
>
AsContainerLayer
(
)
)
{
return
true
;
}
return
aLayer
-
>
AsContainerLayer
(
)
-
>
UseIntermediateSurface
(
)
;
}
void
LayerManagerComposite
:
:
PostProcessLayers
(
Layer
*
aLayer
nsIntRegion
&
aOpaqueRegion
LayerIntRegion
&
aVisibleRegion
const
Maybe
<
RenderTargetIntRect
>
&
aRenderTargetClip
const
Maybe
<
ParentLayerIntRect
>
&
aClipFromAncestors
)
{
LayerComposite
*
composite
=
static_cast
<
LayerComposite
*
>
(
aLayer
-
>
AsHostLayer
(
)
)
;
Maybe
<
ParentLayerIntRect
>
layerClip
=
composite
-
>
GetShadowClipRect
(
)
;
MOZ_ASSERT
(
!
layerClip
|
|
!
aLayer
-
>
Combines3DTransformWithAncestors
(
)
"
The
layer
with
a
clip
should
not
participate
"
"
a
3D
rendering
context
"
)
;
Maybe
<
ParentLayerIntRect
>
outsideClip
=
IntersectMaybeRects
(
layerClip
aClipFromAncestors
)
;
Maybe
<
LayerIntRect
>
insideClip
;
if
(
aLayer
-
>
Extend3DContext
(
)
)
{
if
(
outsideClip
)
{
insideClip
=
Some
(
ViewAs
<
LayerPixel
>
(
*
outsideClip
PixelCastJustification
:
:
MovingDownToChildren
)
)
;
}
}
else
if
(
outsideClip
)
{
Matrix4x4
localTransform
=
aLayer
-
>
ComputeTransformToPreserve3DRoot
(
)
;
if
(
!
localTransform
.
HasPerspectiveComponent
(
)
&
&
localTransform
.
Invert
(
)
)
{
LayerRect
insideClipFloat
=
UntransformBy
(
ViewAs
<
ParentLayerToLayerMatrix4x4
>
(
localTransform
)
ParentLayerRect
(
*
outsideClip
)
LayerRect
:
:
MaxIntRect
(
)
)
.
valueOr
(
LayerRect
(
)
)
;
insideClipFloat
.
RoundOut
(
)
;
LayerIntRect
insideClipInt
;
if
(
insideClipFloat
.
ToIntRect
(
&
insideClipInt
)
)
{
insideClip
=
Some
(
insideClipInt
)
;
}
}
}
Maybe
<
ParentLayerIntRect
>
ancestorClipForChildren
;
if
(
insideClip
)
{
ancestorClipForChildren
=
Some
(
ViewAs
<
ParentLayerPixel
>
(
*
insideClip
PixelCastJustification
:
:
MovingDownToChildren
)
)
;
}
nsIntRegion
dummy
;
nsIntRegion
&
opaqueRegion
=
aOpaqueRegion
;
if
(
aLayer
-
>
Extend3DContext
(
)
|
|
aLayer
-
>
Combines3DTransformWithAncestors
(
)
)
{
opaqueRegion
=
dummy
;
}
if
(
!
ShouldProcessLayer
(
aLayer
)
)
{
MOZ_ASSERT
(
aLayer
-
>
AsContainerLayer
(
)
&
&
!
aLayer
-
>
AsContainerLayer
(
)
-
>
UseIntermediateSurface
(
)
)
;
for
(
Layer
*
child
=
aLayer
-
>
GetLastChild
(
)
;
child
;
child
=
child
-
>
GetPrevSibling
(
)
)
{
LayerComposite
*
childComposite
=
static_cast
<
LayerComposite
*
>
(
child
-
>
AsHostLayer
(
)
)
;
Maybe
<
RenderTargetIntRect
>
renderTargetClip
=
aRenderTargetClip
;
if
(
childComposite
-
>
GetShadowClipRect
(
)
)
{
RenderTargetIntRect
clip
=
TransformBy
(
ViewAs
<
ParentLayerToRenderTargetMatrix4x4
>
(
aLayer
-
>
GetEffectiveTransform
(
)
PixelCastJustification
:
:
RenderTargetIsParentLayerForRoot
)
*
childComposite
-
>
GetShadowClipRect
(
)
)
;
renderTargetClip
=
IntersectMaybeRects
(
renderTargetClip
Some
(
clip
)
)
;
}
PostProcessLayers
(
child
opaqueRegion
aVisibleRegion
renderTargetClip
ancestorClipForChildren
)
;
}
return
;
}
nsIntRegion
localOpaque
;
Matrix4x4
transform
=
aLayer
-
>
GetEffectiveTransform
(
)
;
Matrix
transform2d
;
Maybe
<
IntPoint
>
integerTranslation
;
if
(
transform
.
Is2D
(
&
transform2d
)
)
{
if
(
transform2d
.
IsIntegerTranslation
(
)
)
{
integerTranslation
=
Some
(
IntPoint
:
:
Truncate
(
transform2d
.
GetTranslation
(
)
)
)
;
localOpaque
=
opaqueRegion
;
localOpaque
.
MoveBy
(
-
*
integerTranslation
)
;
}
}
nsIntRegion
obscured
=
localOpaque
;
LayerIntRegion
descendantsVisibleRegion
;
bool
hasPreserve3DChild
=
false
;
for
(
Layer
*
child
=
aLayer
-
>
GetLastChild
(
)
;
child
;
child
=
child
-
>
GetPrevSibling
(
)
)
{
MOZ_ASSERT
(
aLayer
-
>
AsContainerLayer
(
)
-
>
UseIntermediateSurface
(
)
)
;
LayerComposite
*
childComposite
=
static_cast
<
LayerComposite
*
>
(
child
-
>
AsHostLayer
(
)
)
;
PostProcessLayers
(
child
localOpaque
descendantsVisibleRegion
ViewAs
<
RenderTargetPixel
>
(
childComposite
-
>
GetShadowClipRect
(
)
PixelCastJustification
:
:
RenderTargetIsParentLayerForRoot
)
ancestorClipForChildren
)
;
if
(
child
-
>
Extend3DContext
(
)
)
{
hasPreserve3DChild
=
true
;
}
}
LayerIntRegion
visible
=
composite
-
>
GetShadowVisibleRegion
(
)
;
if
(
aLayer
-
>
GetFirstChild
(
)
&
&
!
hasPreserve3DChild
)
{
visible
=
descendantsVisibleRegion
;
}
if
(
!
obscured
.
IsEmpty
(
)
)
{
visible
.
SubOut
(
LayerIntRegion
:
:
FromUnknownRegion
(
obscured
)
)
;
}
if
(
insideClip
)
{
visible
.
AndWith
(
*
insideClip
)
;
}
composite
-
>
SetShadowVisibleRegion
(
visible
)
;
ParentLayerIntRegion
visibleParentSpace
=
TransformBy
(
ViewAs
<
LayerToParentLayerMatrix4x4
>
(
transform
)
visible
)
;
aVisibleRegion
.
OrWith
(
ViewAs
<
LayerPixel
>
(
visibleParentSpace
PixelCastJustification
:
:
MovingDownToChildren
)
)
;
if
(
integerTranslation
&
&
!
aLayer
-
>
HasMaskLayers
(
)
&
&
aLayer
-
>
IsOpaqueForVisibility
(
)
)
{
if
(
aLayer
-
>
IsOpaque
(
)
)
{
localOpaque
.
OrWith
(
composite
-
>
GetFullyRenderedRegion
(
)
)
;
}
localOpaque
.
MoveBy
(
*
integerTranslation
)
;
if
(
aRenderTargetClip
)
{
localOpaque
.
AndWith
(
aRenderTargetClip
-
>
ToUnknownRect
(
)
)
;
}
opaqueRegion
.
OrWith
(
localOpaque
)
;
}
}
void
LayerManagerComposite
:
:
EndTransaction
(
const
TimeStamp
&
aTimeStamp
EndTransactionFlags
aFlags
)
{
NS_ASSERTION
(
mInTransaction
"
Didn
'
t
call
BeginTransaction
?
"
)
;
NS_ASSERTION
(
!
(
aFlags
&
END_NO_COMPOSITE
)
"
Shouldn
'
t
get
END_NO_COMPOSITE
here
"
)
;
mInTransaction
=
false
;
mRenderStartTime
=
TimeStamp
:
:
Now
(
)
;
if
(
!
mIsCompositorReady
)
{
return
;
}
mIsCompositorReady
=
false
;
#
ifdef
MOZ_LAYERS_HAVE_LOG
MOZ_LAYERS_LOG
(
(
"
-
-
-
-
-
(
beginning
paint
)
"
)
)
;
Log
(
)
;
#
endif
if
(
mDestroyed
)
{
NS_WARNING
(
"
Call
on
destroyed
layer
manager
"
)
;
return
;
}
SetCompositionTime
(
aTimeStamp
)
;
if
(
mRoot
&
&
!
(
aFlags
&
END_NO_IMMEDIATE_REDRAW
)
)
{
MOZ_ASSERT
(
!
aTimeStamp
.
IsNull
(
)
)
;
UpdateAndRender
(
)
;
mCompositor
-
>
FlushPendingNotifyNotUsed
(
)
;
}
mCompositor
-
>
ClearTargetContext
(
)
;
mTarget
=
nullptr
;
#
ifdef
MOZ_LAYERS_HAVE_LOG
Log
(
)
;
MOZ_LAYERS_LOG
(
(
"
]
-
-
-
-
-
EndTransaction
"
)
)
;
#
endif
}
void
LayerManagerComposite
:
:
UpdateAndRender
(
)
{
nsIntRegion
invalid
;
mRoot
-
>
ComputeEffectiveTransforms
(
gfx
:
:
Matrix4x4
(
)
)
;
nsIntRegion
opaque
;
PostProcessLayers
(
opaque
)
;
if
(
mClonedLayerTreeProperties
)
{
nsIntRegion
changed
;
if
(
!
mClonedLayerTreeProperties
-
>
ComputeDifferences
(
mRoot
changed
nullptr
)
)
{
changed
=
mTargetBounds
;
}
if
(
mTarget
)
{
mInvalidRegion
.
Or
(
mInvalidRegion
changed
)
;
}
else
{
invalid
=
Move
(
changed
)
;
}
}
if
(
mTarget
)
{
invalid
.
Or
(
invalid
mTargetBounds
)
;
}
else
{
if
(
!
mClonedLayerTreeProperties
)
{
invalid
.
Or
(
invalid
mRenderBounds
)
;
}
invalid
.
Or
(
invalid
mInvalidRegion
)
;
mInvalidRegion
.
SetEmpty
(
)
;
}
if
(
invalid
.
IsEmpty
(
)
&
&
!
mWindowOverlayChanged
)
{
mClonedLayerTreeProperties
=
LayerProperties
:
:
CloneFrom
(
GetRoot
(
)
)
;
return
;
}
InvalidateDebugOverlay
(
invalid
mRenderBounds
)
;
Render
(
invalid
opaque
)
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
RenderToPresentationSurface
(
)
;
#
endif
mWindowOverlayChanged
=
false
;
mClonedLayerTreeProperties
=
LayerProperties
:
:
CloneFrom
(
GetRoot
(
)
)
;
}
already_AddRefed
<
DrawTarget
>
LayerManagerComposite
:
:
CreateOptimalMaskDrawTarget
(
const
IntSize
&
aSize
)
{
MOZ_CRASH
(
"
Should
only
be
called
on
the
drawing
side
"
)
;
return
nullptr
;
}
LayerComposite
*
LayerManagerComposite
:
:
RootLayer
(
)
const
{
if
(
mDestroyed
)
{
NS_WARNING
(
"
Call
on
destroyed
layer
manager
"
)
;
return
nullptr
;
}
return
ToLayerComposite
(
mRoot
)
;
}
void
LayerManagerComposite
:
:
InvalidateDebugOverlay
(
nsIntRegion
&
aInvalidRegion
const
IntRect
&
aBounds
)
{
bool
drawFps
=
gfxPrefs
:
:
LayersDrawFPS
(
)
;
bool
drawFrameColorBars
=
gfxPrefs
:
:
CompositorDrawColorBars
(
)
;
if
(
drawFps
)
{
aInvalidRegion
.
Or
(
aInvalidRegion
nsIntRect
(
0
0
650
400
)
)
;
}
if
(
drawFrameColorBars
)
{
aInvalidRegion
.
Or
(
aInvalidRegion
nsIntRect
(
0
0
10
aBounds
.
Height
(
)
)
)
;
}
#
ifdef
USE_SKIA
bool
drawPaintTimes
=
gfxPrefs
:
:
AlwaysPaint
(
)
;
if
(
drawPaintTimes
)
{
aInvalidRegion
.
Or
(
aInvalidRegion
nsIntRect
(
PaintCounter
:
:
GetPaintRect
(
)
)
)
;
}
#
endif
}
#
ifdef
USE_SKIA
void
LayerManagerComposite
:
:
DrawPaintTimes
(
Compositor
*
aCompositor
)
{
if
(
!
mPaintCounter
)
{
mPaintCounter
=
new
PaintCounter
(
)
;
}
TimeDuration
compositeTime
=
TimeStamp
:
:
Now
(
)
-
mRenderStartTime
;
mPaintCounter
-
>
Draw
(
aCompositor
mLastPaintTime
compositeTime
)
;
}
#
endif
static
uint16_t
sFrameCount
=
0
;
void
LayerManagerComposite
:
:
RenderDebugOverlay
(
const
IntRect
&
aBounds
)
{
bool
drawFps
=
gfxPrefs
:
:
LayersDrawFPS
(
)
;
bool
drawFrameColorBars
=
gfxPrefs
:
:
CompositorDrawColorBars
(
)
;
if
(
mTarget
)
{
return
;
}
if
(
drawFps
)
{
float
alpha
=
1
;
#
ifdef
ANDROID
int
width
;
int
border
;
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
if
(
!
mWarnTime
.
IsNull
(
)
&
&
(
now
-
mWarnTime
)
.
ToMilliseconds
(
)
<
kVisualWarningDuration
)
{
EffectChain
effects
;
border
=
4
;
width
=
6
;
effects
.
mPrimaryEffect
=
new
EffectSolidColor
(
gfx
:
:
Color
(
0
0
0
1
)
)
;
mCompositor
-
>
DrawQuad
(
gfx
:
:
Rect
(
border
border
aBounds
.
Width
(
)
-
2
*
border
width
)
aBounds
effects
alpha
gfx
:
:
Matrix4x4
(
)
)
;
mCompositor
-
>
DrawQuad
(
gfx
:
:
Rect
(
border
aBounds
.
Height
(
)
-
border
-
width
aBounds
.
Width
(
)
-
2
*
border
width
)
aBounds
effects
alpha
gfx
:
:
Matrix4x4
(
)
)
;
mCompositor
-
>
DrawQuad
(
gfx
:
:
Rect
(
border
border
+
width
width
aBounds
.
Height
(
)
-
2
*
border
-
width
*
2
)
aBounds
effects
alpha
gfx
:
:
Matrix4x4
(
)
)
;
mCompositor
-
>
DrawQuad
(
gfx
:
:
Rect
(
aBounds
.
Width
(
)
-
border
-
width
border
+
width
width
aBounds
.
Height
(
)
-
2
*
border
-
2
*
width
)
aBounds
effects
alpha
gfx
:
:
Matrix4x4
(
)
)
;
border
=
5
;
width
=
4
;
effects
.
mPrimaryEffect
=
new
EffectSolidColor
(
gfx
:
:
Color
(
1
1
.
f
-
mWarningLevel
0
1
)
)
;
mCompositor
-
>
DrawQuad
(
gfx
:
:
Rect
(
border
border
aBounds
.
Width
(
)
-
2
*
border
width
)
aBounds
effects
alpha
gfx
:
:
Matrix4x4
(
)
)
;
mCompositor
-
>
DrawQuad
(
gfx
:
:
Rect
(
border
aBounds
.
height
-
border
-
width
aBounds
.
Width
(
)
-
2
*
border
width
)
aBounds
effects
alpha
gfx
:
:
Matrix4x4
(
)
)
;
mCompositor
-
>
DrawQuad
(
gfx
:
:
Rect
(
border
border
+
width
width
aBounds
.
Height
(
)
-
2
*
border
-
width
*
2
)
aBounds
effects
alpha
gfx
:
:
Matrix4x4
(
)
)
;
mCompositor
-
>
DrawQuad
(
gfx
:
:
Rect
(
aBounds
.
Width
(
)
-
border
-
width
border
+
width
width
aBounds
.
Height
(
)
-
2
*
border
-
2
*
width
)
aBounds
effects
alpha
gfx
:
:
Matrix4x4
(
)
)
;
SetDebugOverlayWantsNextFrame
(
true
)
;
}
#
endif
GPUStats
stats
;
stats
.
mScreenPixels
=
mRenderBounds
.
Width
(
)
*
mRenderBounds
.
Height
(
)
;
mCompositor
-
>
GetFrameStats
(
&
stats
)
;
std
:
:
string
text
=
mDiagnostics
-
>
GetFrameOverlayString
(
stats
)
;
mTextRenderer
-
>
RenderText
(
mCompositor
text
IntPoint
(
2
5
)
Matrix4x4
(
)
24
600
TextRenderer
:
:
FontType
:
:
FixedWidth
)
;
if
(
mUnusedApzTransformWarning
)
{
EffectChain
effects
;
effects
.
mPrimaryEffect
=
new
EffectSolidColor
(
gfx
:
:
Color
(
1
0
0
1
)
)
;
mCompositor
-
>
DrawQuad
(
gfx
:
:
Rect
(
aBounds
.
Width
(
)
-
20
0
20
20
)
aBounds
effects
alpha
gfx
:
:
Matrix4x4
(
)
)
;
mUnusedApzTransformWarning
=
false
;
SetDebugOverlayWantsNextFrame
(
true
)
;
}
if
(
mDisabledApzWarning
)
{
EffectChain
effects
;
effects
.
mPrimaryEffect
=
new
EffectSolidColor
(
gfx
:
:
Color
(
1
1
0
1
)
)
;
mCompositor
-
>
DrawQuad
(
gfx
:
:
Rect
(
aBounds
.
Width
(
)
-
40
0
20
20
)
aBounds
effects
alpha
gfx
:
:
Matrix4x4
(
)
)
;
mDisabledApzWarning
=
false
;
SetDebugOverlayWantsNextFrame
(
true
)
;
}
}
if
(
drawFrameColorBars
)
{
gfx
:
:
IntRect
sideRect
(
0
0
10
aBounds
.
Height
(
)
)
;
EffectChain
effects
;
effects
.
mPrimaryEffect
=
new
EffectSolidColor
(
gfxUtils
:
:
GetColorForFrameNumber
(
sFrameCount
)
)
;
mCompositor
-
>
DrawQuad
(
Rect
(
sideRect
)
sideRect
effects
1
.
0
gfx
:
:
Matrix4x4
(
)
)
;
}
if
(
drawFrameColorBars
)
{
sFrameCount
+
+
;
}
#
ifdef
USE_SKIA
bool
drawPaintTimes
=
gfxPrefs
:
:
AlwaysPaint
(
)
;
if
(
drawPaintTimes
)
{
DrawPaintTimes
(
mCompositor
)
;
}
#
endif
}
RefPtr
<
CompositingRenderTarget
>
LayerManagerComposite
:
:
PushGroupForLayerEffects
(
)
{
MOZ_ASSERT
(
gfxPrefs
:
:
LayersEffectInvert
(
)
|
|
gfxPrefs
:
:
LayersEffectGrayscale
(
)
|
|
gfxPrefs
:
:
LayersEffectContrast
(
)
!
=
0
.
0
)
;
RefPtr
<
CompositingRenderTarget
>
previousTarget
=
mCompositor
-
>
GetCurrentRenderTarget
(
)
;
IntRect
rect
(
previousTarget
-
>
GetOrigin
(
)
previousTarget
-
>
GetSize
(
)
)
;
MOZ_ASSERT
(
rect
.
x
=
=
0
&
&
rect
.
y
=
=
0
)
;
if
(
!
mTwoPassTmpTarget
|
|
mTwoPassTmpTarget
-
>
GetSize
(
)
!
=
previousTarget
-
>
GetSize
(
)
|
|
mTwoPassTmpTarget
-
>
GetOrigin
(
)
!
=
previousTarget
-
>
GetOrigin
(
)
)
{
mTwoPassTmpTarget
=
mCompositor
-
>
CreateRenderTarget
(
rect
INIT_MODE_NONE
)
;
}
MOZ_ASSERT
(
mTwoPassTmpTarget
)
;
mCompositor
-
>
SetRenderTarget
(
mTwoPassTmpTarget
)
;
return
previousTarget
;
}
void
LayerManagerComposite
:
:
PopGroupForLayerEffects
(
RefPtr
<
CompositingRenderTarget
>
aPreviousTarget
IntRect
aClipRect
bool
aGrayscaleEffect
bool
aInvertEffect
float
aContrastEffect
)
{
MOZ_ASSERT
(
mTwoPassTmpTarget
)
;
MOZ_ASSERT
(
aInvertEffect
|
|
aGrayscaleEffect
|
|
aContrastEffect
!
=
0
.
0
)
;
mCompositor
-
>
SetRenderTarget
(
aPreviousTarget
)
;
EffectChain
effectChain
(
RootLayer
(
)
)
;
Matrix5x4
effectMatrix
;
if
(
aGrayscaleEffect
)
{
Matrix5x4
grayscaleMatrix
(
0
.
2126f
0
.
2126f
0
.
2126f
0
0
.
7152f
0
.
7152f
0
.
7152f
0
0
.
0722f
0
.
0722f
0
.
0722f
0
0
0
0
1
0
0
0
0
)
;
effectMatrix
=
grayscaleMatrix
;
}
if
(
aInvertEffect
)
{
Matrix5x4
colorInvertMatrix
(
-
1
0
0
0
0
-
1
0
0
0
0
-
1
0
0
0
0
1
1
1
1
0
)
;
effectMatrix
=
effectMatrix
*
colorInvertMatrix
;
}
if
(
aContrastEffect
!
=
0
.
0
)
{
float
cP1
=
aContrastEffect
+
1
;
float
hc
=
0
.
5
*
aContrastEffect
;
Matrix5x4
contrastMatrix
(
cP1
0
0
0
0
cP1
0
0
0
0
cP1
0
0
0
0
1
-
hc
-
hc
-
hc
0
)
;
effectMatrix
=
effectMatrix
*
contrastMatrix
;
}
effectChain
.
mPrimaryEffect
=
new
EffectRenderTarget
(
mTwoPassTmpTarget
)
;
effectChain
.
mSecondaryEffects
[
EffectTypes
:
:
COLOR_MATRIX
]
=
new
EffectColorMatrix
(
effectMatrix
)
;
mCompositor
-
>
DrawQuad
(
Rect
(
Point
(
0
0
)
Size
(
mTwoPassTmpTarget
-
>
GetSize
(
)
)
)
aClipRect
effectChain
1
.
Matrix4x4
(
)
)
;
}
static
void
ClearLayerFlags
(
Layer
*
aLayer
)
{
ForEachNode
<
ForwardIterator
>
(
aLayer
[
]
(
Layer
*
layer
)
{
if
(
layer
-
>
AsHostLayer
(
)
)
{
static_cast
<
LayerComposite
*
>
(
layer
-
>
AsHostLayer
(
)
)
-
>
SetLayerComposited
(
false
)
;
}
}
)
;
}
#
if
defined
(
MOZ_WIDGET_ANDROID
)
class
ScopedCompositorRenderOffset
{
public
:
ScopedCompositorRenderOffset
(
CompositorOGL
*
aCompositor
const
ScreenPoint
&
aOffset
)
:
mCompositor
(
aCompositor
)
mOriginalOffset
(
mCompositor
-
>
GetScreenRenderOffset
(
)
)
mOriginalProjection
(
mCompositor
-
>
GetProjMatrix
(
)
)
{
ScreenPoint
offset
(
mOriginalOffset
.
x
+
aOffset
.
x
mOriginalOffset
.
y
+
aOffset
.
y
)
;
mCompositor
-
>
SetScreenRenderOffset
(
offset
)
;
gfx
:
:
Matrix4x4
mat
=
mOriginalProjection
;
mat
.
PreTranslate
(
aOffset
.
x
aOffset
.
y
0
.
0f
)
;
mCompositor
-
>
SetProjMatrix
(
mat
)
;
}
~
ScopedCompositorRenderOffset
(
)
{
mCompositor
-
>
SetScreenRenderOffset
(
mOriginalOffset
)
;
mCompositor
-
>
SetProjMatrix
(
mOriginalProjection
)
;
}
private
:
CompositorOGL
*
const
mCompositor
;
const
ScreenPoint
mOriginalOffset
;
const
gfx
:
:
Matrix4x4
mOriginalProjection
;
}
;
#
endif
void
LayerManagerComposite
:
:
Render
(
const
nsIntRegion
&
aInvalidRegion
const
nsIntRegion
&
aOpaqueRegion
)
{
AUTO_PROFILER_LABEL
(
"
LayerManagerComposite
:
:
Render
"
GRAPHICS
)
;
if
(
mDestroyed
|
|
!
mCompositor
|
|
mCompositor
-
>
IsDestroyed
(
)
)
{
NS_WARNING
(
"
Call
on
destroyed
layer
manager
"
)
;
return
;
}
ClearLayerFlags
(
mRoot
)
;
bool
invertVal
=
gfxPrefs
:
:
LayersEffectInvert
(
)
;
bool
grayscaleVal
=
gfxPrefs
:
:
LayersEffectGrayscale
(
)
;
float
contrastVal
=
gfxPrefs
:
:
LayersEffectContrast
(
)
;
bool
haveLayerEffects
=
(
invertVal
|
|
grayscaleVal
|
|
contrastVal
!
=
0
.
0
)
;
LayerScopeAutoFrame
frame
(
PR_Now
(
)
)
;
if
(
gfxPrefs
:
:
LayersDump
(
)
)
{
this
-
>
Dump
(
true
)
;
}
else
if
(
profiler_feature_active
(
ProfilerFeature
:
:
LayersDump
)
)
{
std
:
:
stringstream
ss
;
Dump
(
ss
)
;
profiler_tracing
(
"
log
"
ss
.
str
(
)
.
c_str
(
)
)
;
}
if
(
LayerScope
:
:
CheckSendable
(
)
)
{
auto
packet
=
MakeUnique
<
layerscope
:
:
Packet
>
(
)
;
layerscope
:
:
LayersPacket
*
layersPacket
=
packet
-
>
mutable_layers
(
)
;
this
-
>
Dump
(
layersPacket
)
;
LayerScope
:
:
SendLayerDump
(
Move
(
packet
)
)
;
}
mozilla
:
:
widget
:
:
WidgetRenderingContext
widgetContext
;
#
if
defined
(
XP_MACOSX
)
widgetContext
.
mLayerManager
=
this
;
#
elif
defined
(
MOZ_WIDGET_ANDROID
)
widgetContext
.
mCompositor
=
GetCompositor
(
)
;
#
endif
{
AUTO_PROFILER_LABEL
(
"
LayerManagerComposite
:
:
Render
:
Prerender
"
GRAPHICS
)
;
if
(
!
mCompositor
-
>
GetWidget
(
)
-
>
PreRender
(
&
widgetContext
)
)
{
return
;
}
}
ParentLayerIntRect
clipRect
;
IntRect
bounds
(
mRenderBounds
.
x
mRenderBounds
.
y
mRenderBounds
.
Width
(
)
mRenderBounds
.
Height
(
)
)
;
IntRect
actualBounds
;
CompositorBench
(
mCompositor
bounds
)
;
MOZ_ASSERT
(
mRoot
-
>
GetOpacity
(
)
=
=
1
)
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
LayerMetricsWrapper
wrapper
=
GetRootContentLayer
(
)
;
if
(
wrapper
)
{
mCompositor
-
>
SetClearColor
(
wrapper
.
Metadata
(
)
.
GetBackgroundColor
(
)
)
;
}
else
{
mCompositor
-
>
SetClearColorToDefault
(
)
;
}
#
endif
if
(
mRoot
-
>
GetClipRect
(
)
)
{
clipRect
=
*
mRoot
-
>
GetClipRect
(
)
;
IntRect
rect
(
clipRect
.
x
clipRect
.
y
clipRect
.
Width
(
)
clipRect
.
Height
(
)
)
;
mCompositor
-
>
BeginFrame
(
aInvalidRegion
&
rect
bounds
aOpaqueRegion
nullptr
&
actualBounds
)
;
}
else
{
gfx
:
:
IntRect
rect
;
mCompositor
-
>
BeginFrame
(
aInvalidRegion
nullptr
bounds
aOpaqueRegion
&
rect
&
actualBounds
)
;
clipRect
=
ParentLayerIntRect
(
rect
.
x
rect
.
y
rect
.
Width
(
)
rect
.
Height
(
)
)
;
}
#
if
defined
(
MOZ_WIDGET_ANDROID
)
ScreenCoord
offset
=
GetContentShiftForToolbar
(
)
;
ScopedCompositorRenderOffset
scopedOffset
(
mCompositor
-
>
AsCompositorOGL
(
)
ScreenPoint
(
0
.
0f
offset
)
)
;
#
endif
if
(
actualBounds
.
IsEmpty
(
)
)
{
mCompositor
-
>
GetWidget
(
)
-
>
PostRender
(
&
widgetContext
)
;
return
;
}
mCompositor
-
>
GetWidget
(
)
-
>
DrawWindowUnderlay
(
&
widgetContext
LayoutDeviceIntRect
:
:
FromUnknownRect
(
actualBounds
)
)
;
RefPtr
<
CompositingRenderTarget
>
previousTarget
;
if
(
haveLayerEffects
)
{
previousTarget
=
PushGroupForLayerEffects
(
)
;
}
else
{
mTwoPassTmpTarget
=
nullptr
;
}
{
Diagnostics
:
:
Record
record
(
mRenderStartTime
)
;
RootLayer
(
)
-
>
Prepare
(
ViewAs
<
RenderTargetPixel
>
(
clipRect
PixelCastJustification
:
:
RenderTargetIsParentLayerForRoot
)
)
;
if
(
record
.
Recording
(
)
)
{
mDiagnostics
-
>
RecordPrepareTime
(
record
.
Duration
(
)
)
;
}
}
{
Diagnostics
:
:
Record
record
;
RootLayer
(
)
-
>
RenderLayer
(
clipRect
.
ToUnknownRect
(
)
Nothing
(
)
)
;
if
(
record
.
Recording
(
)
)
{
mDiagnostics
-
>
RecordCompositeTime
(
record
.
Duration
(
)
)
;
}
}
RootLayer
(
)
-
>
Cleanup
(
)
;
if
(
!
mRegionToClear
.
IsEmpty
(
)
)
{
for
(
auto
iter
=
mRegionToClear
.
RectIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
const
IntRect
&
r
=
iter
.
Get
(
)
;
mCompositor
-
>
ClearRect
(
Rect
(
r
.
x
r
.
y
r
.
Width
(
)
r
.
Height
(
)
)
)
;
}
}
if
(
mTwoPassTmpTarget
)
{
MOZ_ASSERT
(
haveLayerEffects
)
;
PopGroupForLayerEffects
(
previousTarget
clipRect
.
ToUnknownRect
(
)
grayscaleVal
invertVal
contrastVal
)
;
}
mCompositor
-
>
GetWidget
(
)
-
>
DrawWindowOverlay
(
&
widgetContext
LayoutDeviceIntRect
:
:
FromUnknownRect
(
actualBounds
)
)
;
mCompositor
-
>
NormalDrawingDone
(
)
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
RenderToolbar
(
)
;
HandlePixelsTarget
(
)
;
#
endif
RenderDebugOverlay
(
actualBounds
)
;
{
AUTO_PROFILER_LABEL
(
"
LayerManagerComposite
:
:
Render
:
EndFrame
"
GRAPHICS
)
;
mCompositor
-
>
EndFrame
(
)
;
mCompositor
-
>
SetDispAcquireFence
(
mRoot
)
;
}
mCompositor
-
>
GetWidget
(
)
-
>
PostRender
(
&
widgetContext
)
;
RecordFrame
(
)
;
}
#
if
defined
(
MOZ_WIDGET_ANDROID
)
class
ScopedCompositorProjMatrix
{
public
:
ScopedCompositorProjMatrix
(
CompositorOGL
*
aCompositor
const
Matrix4x4
&
aProjMatrix
)
:
mCompositor
(
aCompositor
)
mOriginalProjMatrix
(
mCompositor
-
>
GetProjMatrix
(
)
)
{
mCompositor
-
>
SetProjMatrix
(
aProjMatrix
)
;
}
~
ScopedCompositorProjMatrix
(
)
{
mCompositor
-
>
SetProjMatrix
(
mOriginalProjMatrix
)
;
}
private
:
CompositorOGL
*
const
mCompositor
;
const
Matrix4x4
mOriginalProjMatrix
;
}
;
class
ScopedCompostitorSurfaceSize
{
public
:
ScopedCompostitorSurfaceSize
(
CompositorOGL
*
aCompositor
const
gfx
:
:
IntSize
&
aSize
)
:
mCompositor
(
aCompositor
)
mOriginalSize
(
mCompositor
-
>
GetDestinationSurfaceSize
(
)
)
{
mCompositor
-
>
SetDestinationSurfaceSize
(
aSize
)
;
}
~
ScopedCompostitorSurfaceSize
(
)
{
mCompositor
-
>
SetDestinationSurfaceSize
(
mOriginalSize
)
;
}
private
:
CompositorOGL
*
const
mCompositor
;
const
gfx
:
:
IntSize
mOriginalSize
;
}
;
class
ScopedContextSurfaceOverride
{
public
:
ScopedContextSurfaceOverride
(
GLContextEGL
*
aContext
void
*
aSurface
)
:
mContext
(
aContext
)
{
MOZ_ASSERT
(
aSurface
)
;
mContext
-
>
SetEGLSurfaceOverride
(
aSurface
)
;
mContext
-
>
MakeCurrent
(
true
)
;
}
~
ScopedContextSurfaceOverride
(
)
{
mContext
-
>
SetEGLSurfaceOverride
(
EGL_NO_SURFACE
)
;
mContext
-
>
MakeCurrent
(
true
)
;
}
private
:
GLContextEGL
*
const
mContext
;
}
;
void
LayerManagerComposite
:
:
RenderToPresentationSurface
(
)
{
widget
:
:
CompositorWidget
*
const
widget
=
mCompositor
-
>
GetWidget
(
)
;
ANativeWindow
*
window
=
widget
-
>
AsAndroid
(
)
-
>
GetPresentationANativeWindow
(
)
;
if
(
!
window
)
{
return
;
}
CompositorOGL
*
compositor
=
mCompositor
-
>
AsCompositorOGL
(
)
;
GLContext
*
gl
=
compositor
-
>
gl
(
)
;
GLContextEGL
*
egl
=
GLContextEGL
:
:
Cast
(
gl
)
;
if
(
!
egl
)
{
return
;
}
EGLSurface
surface
=
widget
-
>
AsAndroid
(
)
-
>
GetPresentationEGLSurface
(
)
;
if
(
!
surface
)
{
surface
=
egl
-
>
CreateCompatibleSurface
(
window
)
;
if
(
!
surface
)
{
return
;
}
widget
-
>
AsAndroid
(
)
-
>
SetPresentationEGLSurface
(
surface
)
;
}
const
IntSize
windowSize
(
ANativeWindow_getWidth
(
window
)
ANativeWindow_getHeight
(
window
)
)
;
if
(
(
windowSize
.
width
<
=
0
)
|
|
(
windowSize
.
height
<
=
0
)
)
{
return
;
}
ScreenRotation
rotation
=
compositor
-
>
GetScreenRotation
(
)
;
const
int
actualWidth
=
windowSize
.
width
;
const
int
actualHeight
=
windowSize
.
height
;
const
gfx
:
:
IntSize
originalSize
=
compositor
-
>
GetDestinationSurfaceSize
(
)
;
const
nsIntRect
originalRect
=
nsIntRect
(
0
0
originalSize
.
width
originalSize
.
height
)
;
int
pageWidth
=
originalSize
.
width
;
int
pageHeight
=
originalSize
.
height
;
if
(
rotation
=
=
ROTATION_90
|
|
rotation
=
=
ROTATION_270
)
{
pageWidth
=
originalSize
.
height
;
pageHeight
=
originalSize
.
width
;
}
float
scale
=
1
.
0
;
if
(
(
pageWidth
>
actualWidth
)
|
|
(
pageHeight
>
actualHeight
)
)
{
const
float
scaleWidth
=
(
float
)
actualWidth
/
(
float
)
pageWidth
;
const
float
scaleHeight
=
(
float
)
actualHeight
/
(
float
)
pageHeight
;
scale
=
scaleWidth
<
=
scaleHeight
?
scaleWidth
:
scaleHeight
;
}
const
gfx
:
:
IntSize
actualSize
(
actualWidth
actualHeight
)
;
ScopedCompostitorSurfaceSize
overrideSurfaceSize
(
compositor
actualSize
)
;
const
ScreenPoint
offset
(
(
actualWidth
-
(
int
)
(
scale
*
pageWidth
)
)
/
2
0
)
;
ScopedContextSurfaceOverride
overrideSurface
(
egl
surface
)
;
Matrix
viewMatrix
=
ComputeTransformForRotation
(
originalRect
rotation
)
;
viewMatrix
.
Invert
(
)
;
viewMatrix
.
PostScale
(
scale
scale
)
;
viewMatrix
.
PostTranslate
(
offset
.
x
offset
.
y
)
;
Matrix4x4
matrix
=
Matrix4x4
:
:
From2D
(
viewMatrix
)
;
mRoot
-
>
ComputeEffectiveTransforms
(
matrix
)
;
nsIntRegion
opaque
;
PostProcessLayers
(
opaque
)
;
nsIntRegion
invalid
;
IntRect
bounds
=
IntRect
:
:
Truncate
(
0
0
scale
*
pageWidth
actualHeight
)
;
IntRect
rect
actualBounds
;
MOZ_ASSERT
(
mRoot
-
>
GetOpacity
(
)
=
=
1
)
;
mCompositor
-
>
BeginFrame
(
invalid
nullptr
bounds
nsIntRegion
(
)
&
rect
&
actualBounds
)
;
ScopedScissorRect
scissorRect
(
egl
0
0
actualWidth
actualHeight
)
;
egl
-
>
fClearColor
(
0
.
0
0
.
0
0
.
0
0
.
0
)
;
egl
-
>
fClear
(
LOCAL_GL_COLOR_BUFFER_BIT
)
;
const
IntRect
clipRect
=
IntRect
:
:
Truncate
(
0
0
actualWidth
actualHeight
)
;
RootLayer
(
)
-
>
Prepare
(
RenderTargetIntRect
:
:
FromUnknownRect
(
clipRect
)
)
;
RootLayer
(
)
-
>
RenderLayer
(
clipRect
Nothing
(
)
)
;
mCompositor
-
>
EndFrame
(
)
;
}
ScreenCoord
LayerManagerComposite
:
:
GetContentShiftForToolbar
(
)
{
ScreenCoord
result
(
0
.
0f
)
;
if
(
mCompositor
-
>
GetTargetContext
(
)
!
=
nullptr
)
{
return
result
;
}
if
(
CompositorBridgeParent
*
bridge
=
mCompositor
-
>
GetCompositorBridgeParent
(
)
)
{
AndroidDynamicToolbarAnimator
*
animator
=
bridge
-
>
GetAPZCTreeManager
(
)
-
>
GetAndroidDynamicToolbarAnimator
(
)
;
MOZ_RELEASE_ASSERT
(
animator
)
;
result
.
value
=
(
float
)
animator
-
>
GetCurrentContentOffset
(
)
.
value
;
}
return
result
;
}
void
LayerManagerComposite
:
:
RenderToolbar
(
)
{
if
(
mCompositor
-
>
GetTargetContext
(
)
!
=
nullptr
)
{
return
;
}
if
(
CompositorBridgeParent
*
bridge
=
mCompositor
-
>
GetCompositorBridgeParent
(
)
)
{
AndroidDynamicToolbarAnimator
*
animator
=
bridge
-
>
GetAPZCTreeManager
(
)
-
>
GetAndroidDynamicToolbarAnimator
(
)
;
MOZ_RELEASE_ASSERT
(
animator
)
;
animator
-
>
UpdateToolbarSnapshotTexture
(
mCompositor
-
>
AsCompositorOGL
(
)
)
;
int32_t
toolbarHeight
=
animator
-
>
GetCurrentToolbarHeight
(
)
;
if
(
toolbarHeight
=
=
0
)
{
return
;
}
EffectChain
effects
;
effects
.
mPrimaryEffect
=
animator
-
>
GetToolbarEffect
(
)
;
if
(
effects
.
mPrimaryEffect
)
{
ScopedCompositorRenderOffset
toolbarOffset
(
mCompositor
-
>
AsCompositorOGL
(
)
ScreenPoint
(
0
.
0f
-
animator
-
>
GetCurrentContentOffset
(
)
)
)
;
mCompositor
-
>
DrawQuad
(
gfx
:
:
Rect
(
0
0
mRenderBounds
.
width
toolbarHeight
)
IntRect
(
0
0
mRenderBounds
.
width
toolbarHeight
)
effects
1
.
0
gfx
:
:
Matrix4x4
(
)
)
;
}
}
}
void
LayerManagerComposite
:
:
HandlePixelsTarget
(
)
{
if
(
!
mScreenPixelsTarget
)
{
return
;
}
int32_t
bufferWidth
=
mRenderBounds
.
width
;
int32_t
bufferHeight
=
mRenderBounds
.
height
;
ipc
:
:
Shmem
mem
;
if
(
!
mScreenPixelsTarget
-
>
AllocPixelBuffer
(
bufferWidth
*
bufferHeight
*
sizeof
(
uint32_t
)
&
mem
)
)
{
return
;
}
CompositorOGL
*
compositor
=
mCompositor
-
>
AsCompositorOGL
(
)
;
GLContext
*
gl
=
compositor
-
>
gl
(
)
;
MOZ_ASSERT
(
gl
)
;
gl
-
>
fReadPixels
(
0
0
bufferWidth
bufferHeight
LOCAL_GL_RGBA
LOCAL_GL_UNSIGNED_BYTE
mem
.
get
<
uint8_t
>
(
)
)
;
Unused
<
<
mScreenPixelsTarget
-
>
SendScreenPixels
(
mem
ScreenIntSize
(
bufferWidth
bufferHeight
)
)
;
mScreenPixelsTarget
=
nullptr
;
}
#
endif
class
TextLayerComposite
:
public
TextLayer
public
LayerComposite
{
public
:
explicit
TextLayerComposite
(
LayerManagerComposite
*
aManager
)
:
TextLayer
(
aManager
nullptr
)
LayerComposite
(
aManager
)
{
MOZ_COUNT_CTOR
(
TextLayerComposite
)
;
mImplData
=
static_cast
<
LayerComposite
*
>
(
this
)
;
}
protected
:
~
TextLayerComposite
(
)
{
MOZ_COUNT_DTOR
(
TextLayerComposite
)
;
Destroy
(
)
;
}
public
:
virtual
Layer
*
GetLayer
(
)
override
{
return
this
;
}
virtual
void
SetLayerManager
(
HostLayerManager
*
aManager
)
override
{
LayerComposite
:
:
SetLayerManager
(
aManager
)
;
mManager
=
aManager
;
}
virtual
void
Destroy
(
)
override
{
mDestroyed
=
true
;
}
virtual
void
RenderLayer
(
const
gfx
:
:
IntRect
&
aClipRect
const
Maybe
<
gfx
:
:
Polygon
>
&
aGeometry
)
override
{
}
virtual
void
CleanupResources
(
)
override
{
}
;
virtual
void
GenEffectChain
(
EffectChain
&
aEffect
)
override
{
}
CompositableHost
*
GetCompositableHost
(
)
override
{
return
nullptr
;
}
virtual
HostLayer
*
AsHostLayer
(
)
override
{
return
this
;
}
virtual
const
char
*
Name
(
)
const
override
{
return
"
TextLayerComposite
"
;
}
}
;
class
BorderLayerComposite
:
public
BorderLayer
public
LayerComposite
{
public
:
explicit
BorderLayerComposite
(
LayerManagerComposite
*
aManager
)
:
BorderLayer
(
aManager
nullptr
)
LayerComposite
(
aManager
)
{
MOZ_COUNT_CTOR
(
BorderLayerComposite
)
;
mImplData
=
static_cast
<
LayerComposite
*
>
(
this
)
;
}
protected
:
~
BorderLayerComposite
(
)
{
MOZ_COUNT_DTOR
(
BorderLayerComposite
)
;
Destroy
(
)
;
}
public
:
virtual
Layer
*
GetLayer
(
)
override
{
return
this
;
}
virtual
void
SetLayerManager
(
HostLayerManager
*
aManager
)
override
{
LayerComposite
:
:
SetLayerManager
(
aManager
)
;
mManager
=
aManager
;
}
virtual
void
Destroy
(
)
override
{
mDestroyed
=
true
;
}
virtual
void
RenderLayer
(
const
gfx
:
:
IntRect
&
aClipRect
const
Maybe
<
gfx
:
:
Polygon
>
&
aGeometry
)
override
{
}
virtual
void
CleanupResources
(
)
override
{
}
;
virtual
void
GenEffectChain
(
EffectChain
&
aEffect
)
override
{
}
CompositableHost
*
GetCompositableHost
(
)
override
{
return
nullptr
;
}
virtual
HostLayer
*
AsHostLayer
(
)
override
{
return
this
;
}
virtual
const
char
*
Name
(
)
const
override
{
return
"
BorderLayerComposite
"
;
}
}
;
already_AddRefed
<
PaintedLayer
>
LayerManagerComposite
:
:
CreatePaintedLayer
(
)
{
if
(
mDestroyed
)
{
NS_WARNING
(
"
Call
on
destroyed
layer
manager
"
)
;
return
nullptr
;
}
return
RefPtr
<
PaintedLayer
>
(
new
PaintedLayerComposite
(
this
)
)
.
forget
(
)
;
}
already_AddRefed
<
ContainerLayer
>
LayerManagerComposite
:
:
CreateContainerLayer
(
)
{
if
(
mDestroyed
)
{
NS_WARNING
(
"
Call
on
destroyed
layer
manager
"
)
;
return
nullptr
;
}
return
RefPtr
<
ContainerLayer
>
(
new
ContainerLayerComposite
(
this
)
)
.
forget
(
)
;
}
already_AddRefed
<
ImageLayer
>
LayerManagerComposite
:
:
CreateImageLayer
(
)
{
if
(
mDestroyed
)
{
NS_WARNING
(
"
Call
on
destroyed
layer
manager
"
)
;
return
nullptr
;
}
return
RefPtr
<
ImageLayer
>
(
new
ImageLayerComposite
(
this
)
)
.
forget
(
)
;
}
already_AddRefed
<
ColorLayer
>
LayerManagerComposite
:
:
CreateColorLayer
(
)
{
if
(
LayerManagerComposite
:
:
mDestroyed
)
{
NS_WARNING
(
"
Call
on
destroyed
layer
manager
"
)
;
return
nullptr
;
}
return
RefPtr
<
ColorLayer
>
(
new
ColorLayerComposite
(
this
)
)
.
forget
(
)
;
}
already_AddRefed
<
CanvasLayer
>
LayerManagerComposite
:
:
CreateCanvasLayer
(
)
{
if
(
LayerManagerComposite
:
:
mDestroyed
)
{
NS_WARNING
(
"
Call
on
destroyed
layer
manager
"
)
;
return
nullptr
;
}
return
RefPtr
<
CanvasLayer
>
(
new
CanvasLayerComposite
(
this
)
)
.
forget
(
)
;
}
already_AddRefed
<
RefLayer
>
LayerManagerComposite
:
:
CreateRefLayer
(
)
{
if
(
LayerManagerComposite
:
:
mDestroyed
)
{
NS_WARNING
(
"
Call
on
destroyed
layer
manager
"
)
;
return
nullptr
;
}
return
RefPtr
<
RefLayer
>
(
new
RefLayerComposite
(
this
)
)
.
forget
(
)
;
}
already_AddRefed
<
TextLayer
>
LayerManagerComposite
:
:
CreateTextLayer
(
)
{
if
(
LayerManagerComposite
:
:
mDestroyed
)
{
NS_WARNING
(
"
Call
on
destroyed
layer
manager
"
)
;
return
nullptr
;
}
return
RefPtr
<
TextLayer
>
(
new
TextLayerComposite
(
this
)
)
.
forget
(
)
;
}
already_AddRefed
<
BorderLayer
>
LayerManagerComposite
:
:
CreateBorderLayer
(
)
{
if
(
LayerManagerComposite
:
:
mDestroyed
)
{
NS_WARNING
(
"
Call
on
destroyed
layer
manager
"
)
;
return
nullptr
;
}
return
RefPtr
<
BorderLayer
>
(
new
BorderLayerComposite
(
this
)
)
.
forget
(
)
;
}
LayerManagerComposite
:
:
AutoAddMaskEffect
:
:
AutoAddMaskEffect
(
Layer
*
aMaskLayer
EffectChain
&
aEffects
)
:
mCompositable
(
nullptr
)
mFailed
(
false
)
{
if
(
!
aMaskLayer
)
{
return
;
}
mCompositable
=
ToLayerComposite
(
aMaskLayer
)
-
>
GetCompositableHost
(
)
;
if
(
!
mCompositable
)
{
NS_WARNING
(
"
Mask
layer
with
no
compositable
host
"
)
;
mFailed
=
true
;
return
;
}
if
(
!
mCompositable
-
>
AddMaskEffect
(
aEffects
aMaskLayer
-
>
GetEffectiveTransform
(
)
)
)
{
mCompositable
=
nullptr
;
mFailed
=
true
;
}
}
LayerManagerComposite
:
:
AutoAddMaskEffect
:
:
~
AutoAddMaskEffect
(
)
{
if
(
!
mCompositable
)
{
return
;
}
mCompositable
-
>
RemoveMaskEffect
(
)
;
}
bool
LayerManagerComposite
:
:
IsCompositingToScreen
(
)
const
{
if
(
!
mCompositor
)
{
return
true
;
}
return
!
mCompositor
-
>
GetTargetContext
(
)
;
}
LayerComposite
:
:
LayerComposite
(
LayerManagerComposite
*
aManager
)
:
HostLayer
(
aManager
)
mCompositeManager
(
aManager
)
mCompositor
(
aManager
-
>
GetCompositor
(
)
)
mDestroyed
(
false
)
mLayerComposited
(
false
)
{
}
LayerComposite
:
:
~
LayerComposite
(
)
{
}
void
LayerComposite
:
:
Destroy
(
)
{
if
(
!
mDestroyed
)
{
mDestroyed
=
true
;
CleanupResources
(
)
;
}
}
void
LayerComposite
:
:
AddBlendModeEffect
(
EffectChain
&
aEffectChain
)
{
gfx
:
:
CompositionOp
blendMode
=
GetLayer
(
)
-
>
GetEffectiveMixBlendMode
(
)
;
if
(
blendMode
=
=
gfx
:
:
CompositionOp
:
:
OP_OVER
)
{
return
;
}
aEffectChain
.
mSecondaryEffects
[
EffectTypes
:
:
BLEND_MODE
]
=
new
EffectBlendMode
(
blendMode
)
;
}
bool
LayerManagerComposite
:
:
CanUseCanvasLayerForSize
(
const
IntSize
&
aSize
)
{
return
mCompositor
-
>
CanUseCanvasLayerForSize
(
gfx
:
:
IntSize
(
aSize
.
width
aSize
.
height
)
)
;
}
void
LayerManagerComposite
:
:
NotifyShadowTreeTransaction
(
)
{
if
(
gfxPrefs
:
:
LayersDrawFPS
(
)
)
{
mDiagnostics
-
>
AddTxnFrame
(
)
;
}
}
void
LayerComposite
:
:
SetLayerManager
(
HostLayerManager
*
aManager
)
{
HostLayer
:
:
SetLayerManager
(
aManager
)
;
mCompositeManager
=
static_cast
<
LayerManagerComposite
*
>
(
aManager
)
;
mCompositor
=
mCompositeManager
-
>
GetCompositor
(
)
;
}
bool
LayerManagerComposite
:
:
AsyncPanZoomEnabled
(
)
const
{
if
(
CompositorBridgeParent
*
bridge
=
mCompositor
-
>
GetCompositorBridgeParent
(
)
)
{
return
bridge
-
>
GetOptions
(
)
.
UseAPZ
(
)
;
}
return
false
;
}
bool
LayerManagerComposite
:
:
AlwaysScheduleComposite
(
)
const
{
return
!
!
(
mCompositor
-
>
GetDiagnosticTypes
(
)
&
DiagnosticTypes
:
:
FLASH_BORDERS
)
;
}
nsIntRegion
LayerComposite
:
:
GetFullyRenderedRegion
(
)
{
if
(
TiledContentHost
*
tiled
=
GetCompositableHost
(
)
?
GetCompositableHost
(
)
-
>
AsTiledContentHost
(
)
:
nullptr
)
{
nsIntRegion
shadowVisibleRegion
=
GetShadowVisibleRegion
(
)
.
ToUnknownRegion
(
)
;
shadowVisibleRegion
.
And
(
shadowVisibleRegion
tiled
-
>
GetValidRegion
(
)
)
;
return
shadowVisibleRegion
;
}
else
{
return
GetShadowVisibleRegion
(
)
.
ToUnknownRegion
(
)
;
}
}
Matrix4x4
HostLayer
:
:
GetShadowTransform
(
)
{
Matrix4x4
transform
=
mShadowTransform
;
Layer
*
layer
=
GetLayer
(
)
;
transform
.
PostScale
(
layer
-
>
GetPostXScale
(
)
layer
-
>
GetPostYScale
(
)
1
.
0f
)
;
if
(
const
ContainerLayer
*
c
=
layer
-
>
AsContainerLayer
(
)
)
{
transform
.
PreScale
(
c
-
>
GetPreXScale
(
)
c
-
>
GetPreYScale
(
)
1
.
0f
)
;
}
return
transform
;
}
bool
LayerComposite
:
:
HasStaleCompositor
(
)
const
{
return
mCompositeManager
-
>
GetCompositor
(
)
!
=
mCompositor
;
}
#
ifndef
MOZ_HAVE_PLATFORM_SPECIFIC_LAYER_BUFFERS
bool
LayerManagerComposite
:
:
SupportsDirectTexturing
(
)
{
return
false
;
}
void
LayerManagerComposite
:
:
PlatformSyncBeforeReplyUpdate
(
)
{
}
#
endif
}
}
