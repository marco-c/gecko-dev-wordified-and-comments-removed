#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
Effects
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
gfx
/
HelpersSkia
.
h
"
#
include
"
PaintCounter
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
gfx
;
IntRect
PaintCounter
:
:
mRect
=
IntRect
(
0
175
300
60
)
;
PaintCounter
:
:
PaintCounter
(
)
{
mFormat
=
SurfaceFormat
:
:
B8G8R8A8
;
mSurface
=
Factory
:
:
CreateDataSourceSurface
(
mRect
.
Size
(
)
mFormat
)
;
mMap
.
emplace
(
mSurface
DataSourceSurface
:
:
READ_WRITE
)
;
mStride
=
mMap
-
>
GetStride
(
)
;
mCanvas
=
SkCanvas
:
:
MakeRasterDirect
(
MakeSkiaImageInfo
(
mRect
.
Size
(
)
mFormat
)
mMap
-
>
GetData
(
)
mStride
)
;
mCanvas
-
>
clear
(
SK_ColorWHITE
)
;
}
PaintCounter
:
:
~
PaintCounter
(
)
{
mSurface
=
nullptr
;
mTextureSource
=
nullptr
;
mTexturedEffect
=
nullptr
;
}
void
PaintCounter
:
:
Draw
(
Compositor
*
aCompositor
TimeDuration
aPaintTime
TimeDuration
aCompositeTime
)
{
char
buffer
[
48
]
;
SprintfLiteral
(
buffer
"
P
:
%
.
2f
C
:
%
.
2f
"
aPaintTime
.
ToMilliseconds
(
)
aCompositeTime
.
ToMilliseconds
(
)
)
;
SkPaint
paint
;
paint
.
setTextSize
(
32
)
;
paint
.
setColor
(
SkColorSetRGB
(
0
255
0
)
)
;
paint
.
setAntiAlias
(
true
)
;
mCanvas
-
>
clear
(
SK_ColorTRANSPARENT
)
;
mCanvas
-
>
drawText
(
buffer
strlen
(
buffer
)
10
30
paint
)
;
mCanvas
-
>
flush
(
)
;
if
(
!
mTextureSource
)
{
mTextureSource
=
aCompositor
-
>
CreateDataTextureSource
(
)
;
mTexturedEffect
=
CreateTexturedEffect
(
mFormat
mTextureSource
SamplingFilter
:
:
POINT
true
)
;
mTexturedEffect
-
>
mTextureCoords
=
Rect
(
0
0
1
.
0f
1
.
0f
)
;
}
mTextureSource
-
>
Update
(
mSurface
)
;
EffectChain
effectChain
;
effectChain
.
mPrimaryEffect
=
mTexturedEffect
;
gfx
:
:
Matrix4x4
identity
;
Rect
rect
(
mRect
.
X
(
)
mRect
.
Y
(
)
mRect
.
Width
(
)
mRect
.
Height
(
)
)
;
aCompositor
-
>
DrawQuad
(
rect
mRect
effectChain
1
.
0
identity
)
;
}
}
}
