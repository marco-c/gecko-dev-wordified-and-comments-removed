#
include
"
ColorLayerComposite
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
Effects
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
UnitTransforms
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
gfx
;
void
ColorLayerComposite
:
:
RenderLayer
(
const
gfx
:
:
IntRect
&
aClipRect
const
Maybe
<
gfx
:
:
Polygon
>
&
aGeometry
)
{
const
Matrix4x4
&
transform
=
GetEffectiveTransform
(
)
;
#
ifdef
MOZ_GFX_OPTIMIZE_MOBILE
LayerIntRegion
drawRegion
=
GetLocalVisibleRegion
(
)
;
#
else
LayerIntRegion
drawRegion
=
ViewAs
<
LayerPixel
>
(
GetBounds
(
)
)
;
#
endif
for
(
auto
iter
=
drawRegion
.
RectIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
const
LayerIntRect
&
rect
=
iter
.
Get
(
)
;
Rect
graphicsRect
(
rect
.
X
(
)
rect
.
Y
(
)
rect
.
Width
(
)
rect
.
Height
(
)
)
;
RenderWithAllMasks
(
this
mCompositor
aClipRect
[
&
]
(
EffectChain
&
effectChain
const
IntRect
&
clipRect
)
{
GenEffectChain
(
effectChain
)
;
mCompositor
-
>
DrawGeometry
(
graphicsRect
clipRect
effectChain
GetEffectiveOpacity
(
)
transform
aGeometry
)
;
}
)
;
}
Rect
rect
(
GetBounds
(
)
)
;
mCompositor
-
>
DrawDiagnostics
(
DiagnosticFlags
:
:
COLOR
rect
aClipRect
transform
)
;
}
void
ColorLayerComposite
:
:
GenEffectChain
(
EffectChain
&
aEffect
)
{
aEffect
.
mLayerRef
=
this
;
aEffect
.
mPrimaryEffect
=
new
EffectSolidColor
(
GetColor
(
)
)
;
}
}
}
