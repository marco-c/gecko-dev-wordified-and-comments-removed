#
ifndef
GFX_PaintedLayerComposite_H
#
define
GFX_PaintedLayerComposite_H
#
include
"
Layers
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
layers
/
LayerManagerComposite
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
nscore
.
h
"
namespace
mozilla
{
namespace
layers
{
class
CompositableHost
;
class
ContentHost
;
class
PaintedLayerComposite
:
public
PaintedLayer
public
LayerComposite
{
public
:
explicit
PaintedLayerComposite
(
LayerManagerComposite
*
aManager
)
;
protected
:
virtual
~
PaintedLayerComposite
(
)
;
public
:
virtual
void
Disconnect
(
)
override
;
virtual
LayerRenderState
GetRenderState
(
)
override
;
CompositableHost
*
GetCompositableHost
(
)
override
;
virtual
void
Destroy
(
)
override
;
virtual
Layer
*
GetLayer
(
)
override
;
virtual
void
SetLayerManager
(
HostLayerManager
*
aManager
)
override
;
virtual
void
RenderLayer
(
const
gfx
:
:
IntRect
&
aClipRect
const
Maybe
<
gfx
:
:
Polygon
>
&
aGeometry
)
override
;
virtual
void
CleanupResources
(
)
override
;
virtual
void
GenEffectChain
(
EffectChain
&
aEffect
)
override
;
virtual
bool
SetCompositableHost
(
CompositableHost
*
aHost
)
override
;
virtual
HostLayer
*
AsHostLayer
(
)
override
{
return
this
;
}
virtual
void
InvalidateRegion
(
const
nsIntRegion
&
aRegion
)
override
{
MOZ_CRASH
(
"
PaintedLayerComposites
can
'
t
fill
invalidated
regions
"
)
;
}
const
virtual
gfx
:
:
TiledIntRegion
&
GetInvalidRegion
(
)
override
;
MOZ_LAYER_DECL_NAME
(
"
PaintedLayerComposite
"
TYPE_PAINTED
)
protected
:
virtual
void
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
override
;
private
:
gfx
:
:
SamplingFilter
GetSamplingFilter
(
)
{
return
gfx
:
:
SamplingFilter
:
:
LINEAR
;
}
private
:
RefPtr
<
ContentHost
>
mBuffer
;
}
;
}
}
#
endif
