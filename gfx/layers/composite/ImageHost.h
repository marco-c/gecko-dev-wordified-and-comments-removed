#
ifndef
MOZILLA_GFX_IMAGEHOST_H
#
define
MOZILLA_GFX_IMAGEHOST_H
#
include
<
stdio
.
h
>
#
include
"
CompositableHost
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
MatrixFwd
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
LayersSurfaces
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsRegionFwd
.
h
"
#
include
"
nscore
.
h
"
namespace
mozilla
{
namespace
layers
{
class
Compositor
;
struct
EffectChain
;
class
ImageContainerParent
;
class
ImageHostOverlay
;
class
ImageHost
:
public
CompositableHost
{
public
:
explicit
ImageHost
(
const
TextureInfo
&
aTextureInfo
)
;
~
ImageHost
(
)
;
virtual
CompositableType
GetType
(
)
override
{
return
mTextureInfo
.
mCompositableType
;
}
virtual
void
Composite
(
LayerComposite
*
aLayer
EffectChain
&
aEffectChain
float
aOpacity
const
gfx
:
:
Matrix4x4
&
aTransform
const
gfx
:
:
Filter
&
aFilter
const
gfx
:
:
IntRect
&
aClipRect
const
nsIntRegion
*
aVisibleRegion
=
nullptr
)
override
;
virtual
void
UseTextureHost
(
const
nsTArray
<
TimedTexture
>
&
aTextures
)
override
;
virtual
void
RemoveTextureHost
(
TextureHost
*
aTexture
)
override
;
virtual
void
UseOverlaySource
(
OverlaySource
aOverlay
const
gfx
:
:
IntRect
&
aPictureRect
)
override
;
virtual
TextureHost
*
GetAsTextureHost
(
gfx
:
:
IntRect
*
aPictureRect
=
nullptr
)
override
;
virtual
void
Attach
(
Layer
*
aLayer
Compositor
*
aCompositor
AttachFlags
aFlags
=
NO_FLAGS
)
override
;
virtual
void
SetCompositor
(
Compositor
*
aCompositor
)
override
;
virtual
void
SetImageContainer
(
ImageContainerParent
*
aImageContainer
)
override
;
gfx
:
:
IntSize
GetImageSize
(
)
const
override
;
virtual
LayerRenderState
GetRenderState
(
)
override
;
virtual
void
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
override
;
virtual
void
Dump
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
=
"
"
bool
aDumpHtml
=
false
)
override
;
virtual
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
GetAsSurface
(
)
override
;
virtual
bool
Lock
(
)
override
;
virtual
void
Unlock
(
)
override
;
virtual
already_AddRefed
<
TexturedEffect
>
GenEffect
(
const
gfx
:
:
Filter
&
aFilter
)
override
;
void
SetCurrentTextureHost
(
TextureHost
*
aTexture
)
;
virtual
void
CleanupResources
(
)
override
;
int32_t
GetFrameID
(
)
{
const
TimedImage
*
img
=
ChooseImage
(
)
;
return
img
?
img
-
>
mFrameID
:
-
1
;
}
int32_t
GetProducerID
(
)
{
const
TimedImage
*
img
=
ChooseImage
(
)
;
return
img
?
img
-
>
mProducerID
:
-
1
;
}
int32_t
GetLastFrameID
(
)
const
{
return
mLastFrameID
;
}
int32_t
GetLastProducerID
(
)
const
{
return
mLastProducerID
;
}
virtual
int32_t
GetLastInputFrameID
(
)
const
override
{
return
mLastInputFrameID
;
}
enum
Bias
{
BIAS_NONE
BIAS_NEGATIVE
BIAS_POSITIVE
}
;
bool
IsOpaque
(
)
;
protected
:
struct
TimedImage
{
RefPtr
<
TextureHost
>
mTextureHost
;
TimeStamp
mTimeStamp
;
gfx
:
:
IntRect
mPictureRect
;
int32_t
mFrameID
;
int32_t
mProducerID
;
int32_t
mInputFrameID
;
}
;
CompositableTextureHostRef
mCurrentTextureHost
;
CompositableTextureSourceRef
mCurrentTextureSource
;
RefPtr
<
TextureSource
>
mExtraTextureSource
;
const
TimedImage
*
ChooseImage
(
)
const
;
TimedImage
*
ChooseImage
(
)
;
int
ChooseImageIndex
(
)
const
;
nsTArray
<
TimedImage
>
mImages
;
ImageContainerParent
*
mImageContainer
;
int32_t
mLastFrameID
;
int32_t
mLastProducerID
;
int32_t
mLastInputFrameID
;
Bias
mBias
;
bool
mLocked
;
RefPtr
<
ImageHostOverlay
>
mImageHostOverlay
;
}
;
class
ImageHostOverlay
{
protected
:
virtual
~
ImageHostOverlay
(
)
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
ImageHostOverlay
)
ImageHostOverlay
(
)
;
static
bool
IsValid
(
OverlaySource
aOverlay
)
;
void
SetCompositor
(
Compositor
*
aCompositor
)
;
virtual
void
Composite
(
Compositor
*
aCompositor
uint32_t
aFlashCounter
LayerComposite
*
aLayer
EffectChain
&
aEffectChain
float
aOpacity
const
gfx
:
:
Matrix4x4
&
aTransform
const
gfx
:
:
Filter
&
aFilter
const
gfx
:
:
IntRect
&
aClipRect
const
nsIntRegion
*
aVisibleRegion
)
;
virtual
LayerRenderState
GetRenderState
(
)
;
virtual
void
UseOverlaySource
(
OverlaySource
aOverlay
const
gfx
:
:
IntRect
&
aPictureRect
)
;
virtual
gfx
:
:
IntSize
GetImageSize
(
)
const
;
virtual
void
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
;
protected
:
RefPtr
<
Compositor
>
mCompositor
;
gfx
:
:
IntRect
mPictureRect
;
OverlaySource
mOverlay
;
}
;
}
}
#
endif
