#
include
"
CompositableHost
.
h
"
#
include
<
map
>
#
include
<
utility
>
#
include
"
Effects
.
h
"
#
include
"
gfxUtils
.
h
"
#
include
"
Layers
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
layers
/
LayersSurfaces
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderImageHost
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
IPDLActor
.
h
"
namespace
mozilla
{
using
namespace
gfx
;
namespace
layers
{
class
Compositor
;
CompositableHost
:
:
CompositableHost
(
const
TextureInfo
&
aTextureInfo
)
:
mTextureInfo
(
aTextureInfo
)
mCompositorBridgeID
(
0
)
mLayer
(
nullptr
)
mAttached
(
false
)
mKeepAttached
(
false
)
{
MOZ_COUNT_CTOR
(
CompositableHost
)
;
}
CompositableHost
:
:
~
CompositableHost
(
)
{
MOZ_COUNT_DTOR
(
CompositableHost
)
;
}
void
CompositableHost
:
:
UseTextureHost
(
const
nsTArray
<
TimedTexture
>
&
aTextures
)
{
if
(
mTextureSourceProvider
)
{
for
(
auto
&
texture
:
aTextures
)
{
texture
.
mTexture
-
>
SetTextureSourceProvider
(
mTextureSourceProvider
)
;
}
}
}
void
CompositableHost
:
:
UseComponentAlphaTextures
(
TextureHost
*
aTextureOnBlack
TextureHost
*
aTextureOnWhite
)
{
MOZ_ASSERT
(
aTextureOnBlack
&
&
aTextureOnWhite
)
;
if
(
mTextureSourceProvider
)
{
aTextureOnBlack
-
>
SetTextureSourceProvider
(
mTextureSourceProvider
)
;
aTextureOnWhite
-
>
SetTextureSourceProvider
(
mTextureSourceProvider
)
;
}
}
void
CompositableHost
:
:
RemoveTextureHost
(
TextureHost
*
aTexture
)
{
}
void
CompositableHost
:
:
SetTextureSourceProvider
(
TextureSourceProvider
*
aProvider
)
{
MOZ_ASSERT
(
aProvider
)
;
mTextureSourceProvider
=
aProvider
;
}
already_AddRefed
<
CompositableHost
>
CompositableHost
:
:
Create
(
const
TextureInfo
&
aTextureInfo
)
{
RefPtr
<
CompositableHost
>
result
;
switch
(
aTextureInfo
.
mCompositableType
)
{
case
CompositableType
:
:
IMAGE
:
result
=
new
WebRenderImageHost
(
aTextureInfo
)
;
break
;
default
:
NS_ERROR
(
"
Unknown
CompositableType
"
)
;
}
return
result
.
forget
(
)
;
}
void
CompositableHost
:
:
DumpTextureHost
(
std
:
:
stringstream
&
aStream
TextureHost
*
aTexture
)
{
if
(
!
aTexture
)
{
return
;
}
RefPtr
<
gfx
:
:
DataSourceSurface
>
dSurf
=
aTexture
-
>
GetAsSurface
(
)
;
if
(
!
dSurf
)
{
return
;
}
aStream
<
<
gfxUtils
:
:
GetAsDataURI
(
dSurf
)
.
get
(
)
;
}
TextureSourceProvider
*
CompositableHost
:
:
GetTextureSourceProvider
(
)
const
{
return
mTextureSourceProvider
;
}
}
}
