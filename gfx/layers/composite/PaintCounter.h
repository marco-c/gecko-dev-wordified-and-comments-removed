#
ifndef
mozilla_layers_PaintCounter_h_
#
define
mozilla_layers_PaintCounter_h_
#
include
<
memory
>
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
nsISupports
.
h
"
class
SkCanvas
;
namespace
mozilla
{
namespace
layers
{
class
Compositor
;
class
DataTextureSource
;
struct
TexturedEffect
;
class
PaintCounter
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
PaintCounter
)
PaintCounter
(
)
;
void
Draw
(
Compositor
*
aCompositor
TimeDuration
aPaintTime
TimeDuration
aCompositeTime
)
;
static
gfx
:
:
IntRect
GetPaintRect
(
)
{
return
PaintCounter
:
:
mRect
;
}
private
:
virtual
~
PaintCounter
(
)
;
gfx
:
:
SurfaceFormat
mFormat
;
std
:
:
unique_ptr
<
SkCanvas
>
mCanvas
;
gfx
:
:
IntSize
mSize
;
int
mStride
;
RefPtr
<
gfx
:
:
DataSourceSurface
>
mSurface
;
RefPtr
<
DataTextureSource
>
mTextureSource
;
RefPtr
<
TexturedEffect
>
mTexturedEffect
;
Maybe
<
gfx
:
:
DataSourceSurface
:
:
ScopedMap
>
mMap
;
static
gfx
:
:
IntRect
mRect
;
}
;
}
}
#
endif
