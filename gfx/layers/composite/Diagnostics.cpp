#
include
"
Diagnostics
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
nsPrintfCString
.
h
"
namespace
mozilla
{
namespace
layers
{
float
TimedMetric
:
:
Average
(
)
const
{
TimeStamp
latest
=
TimeStamp
:
:
Now
(
)
;
float
total
=
0
.
0f
;
size_t
count
=
0
;
for
(
auto
iter
=
mHistory
.
rbegin
(
)
;
iter
!
=
mHistory
.
rend
(
)
;
iter
+
+
)
{
if
(
(
latest
-
iter
-
>
second
)
.
ToSeconds
(
)
>
2
.
0f
)
{
break
;
}
total
+
=
iter
-
>
first
;
count
+
+
;
}
if
(
!
count
)
{
return
0
.
0f
;
}
return
total
/
float
(
count
)
;
}
Diagnostics
:
:
Diagnostics
(
)
:
mCompositeFps
(
"
Compositor
"
)
mTransactionFps
(
"
LayerTransactions
"
)
{
}
void
Diagnostics
:
:
RecordPaintTimes
(
const
PaintTiming
&
aPaintTimes
)
{
mDlbMs
.
Add
(
aPaintTimes
.
dlMs
(
)
)
;
mFlbMs
.
Add
(
aPaintTimes
.
flbMs
(
)
)
;
mRasterMs
.
Add
(
aPaintTimes
.
rasterMs
(
)
)
;
mSerializeMs
.
Add
(
aPaintTimes
.
serializeMs
(
)
)
;
mSendMs
.
Add
(
aPaintTimes
.
sendMs
(
)
)
;
}
std
:
:
string
Diagnostics
:
:
GetFrameOverlayString
(
)
{
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
unsigned
fps
=
unsigned
(
mCompositeFps
.
AddFrameAndGetFps
(
now
)
)
;
unsigned
txnFps
=
unsigned
(
mTransactionFps
.
GetFPS
(
now
)
)
;
nsPrintfCString
line1
(
"
FPS
:
%
d
(
TXN
:
%
d
)
"
fps
txnFps
)
;
nsPrintfCString
line2
(
"
CC_BUILD
:
%
0
.
1f
CC_EXEC
:
%
0
.
1f
"
mPrepareMs
.
Average
(
)
mCompositeMs
.
Average
(
)
)
;
nsPrintfCString
line3
(
"
DL
:
%
0
.
1f
FLB
:
%
0
.
1f
R
:
%
0
.
1f
CP
:
%
0
.
1f
TX
:
%
0
.
1f
UP
:
%
0
.
1f
"
mDlbMs
.
Average
(
)
mFlbMs
.
Average
(
)
mRasterMs
.
Average
(
)
mSerializeMs
.
Average
(
)
mSendMs
.
Average
(
)
mUpdateMs
.
Average
(
)
)
;
return
std
:
:
string
(
line1
.
get
(
)
)
+
"
"
+
std
:
:
string
(
line2
.
get
(
)
)
+
"
\
n
"
+
std
:
:
string
(
line3
.
get
(
)
)
;
}
}
}
