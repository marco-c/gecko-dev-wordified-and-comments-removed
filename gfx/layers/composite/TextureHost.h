#
ifndef
MOZILLA_GFX_TEXTUREHOST_H
#
define
MOZILLA_GFX_TEXTUREHOST_H
#
include
<
functional
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
gfxTypes
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
LayersSurfaces
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
nsTraceRefcnt
.
h
"
#
include
"
nscore
.
h
"
#
include
"
mozilla
/
layers
/
AtomicRefCountedWithFinalize
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
class
MacIOSurface
;
namespace
mozilla
{
namespace
ipc
{
class
Shmem
;
}
namespace
wr
{
class
DisplayListBuilder
;
class
TransactionBuilder
;
}
namespace
layers
{
class
BufferDescriptor
;
class
BufferTextureHost
;
class
Compositor
;
class
CompositableParentManager
;
class
ReadLockDescriptor
;
class
CompositorBridgeParent
;
class
SurfaceDescriptor
;
class
HostIPCAllocator
;
class
ISurfaceAllocator
;
class
MacIOSurfaceTextureHostOGL
;
class
SurfaceTextureHost
;
class
TextureHostOGL
;
class
TextureReadLock
;
class
TextureSourceOGL
;
class
TextureSourceD3D11
;
class
TextureSourceBasic
;
class
DataTextureSource
;
class
PTextureParent
;
class
TextureParent
;
class
WebRenderTextureHost
;
class
WrappingTextureSourceYCbCrBasic
;
class
BigImageIterator
{
public
:
virtual
void
BeginBigImageIteration
(
)
=
0
;
virtual
void
EndBigImageIteration
(
)
{
}
;
virtual
gfx
:
:
IntRect
GetTileRect
(
)
=
0
;
virtual
size_t
GetTileCount
(
)
=
0
;
virtual
bool
NextTile
(
)
=
0
;
}
;
class
TextureSource
:
public
RefCounted
<
TextureSource
>
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
TextureSource
)
TextureSource
(
)
;
virtual
~
TextureSource
(
)
;
virtual
const
char
*
Name
(
)
const
=
0
;
virtual
void
DeallocateDeviceData
(
)
{
}
virtual
gfx
:
:
IntSize
GetSize
(
)
const
=
0
;
virtual
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
{
return
gfx
:
:
SurfaceFormat
:
:
UNKNOWN
;
}
virtual
TextureSourceOGL
*
AsSourceOGL
(
)
{
gfxCriticalNote
<
<
"
Failed
to
cast
"
<
<
Name
(
)
<
<
"
into
a
TextureSourceOGL
"
;
return
nullptr
;
}
virtual
TextureSourceD3D11
*
AsSourceD3D11
(
)
{
return
nullptr
;
}
virtual
TextureSourceBasic
*
AsSourceBasic
(
)
{
return
nullptr
;
}
virtual
DataTextureSource
*
AsDataTextureSource
(
)
{
return
nullptr
;
}
virtual
WrappingTextureSourceYCbCrBasic
*
AsWrappingTextureSourceYCbCrBasic
(
)
{
return
nullptr
;
}
virtual
BigImageIterator
*
AsBigImageIterator
(
)
{
return
nullptr
;
}
virtual
void
SetTextureSourceProvider
(
TextureSourceProvider
*
aProvider
)
{
}
virtual
void
Unbind
(
)
{
}
void
SetNextSibling
(
TextureSource
*
aTexture
)
{
mNextSibling
=
aTexture
;
}
TextureSource
*
GetNextSibling
(
)
const
{
return
mNextSibling
;
}
TextureSource
*
GetSubSource
(
int
index
)
{
switch
(
index
)
{
case
0
:
return
this
;
case
1
:
return
GetNextSibling
(
)
;
case
2
:
return
GetNextSibling
(
)
?
GetNextSibling
(
)
-
>
GetNextSibling
(
)
:
nullptr
;
}
return
nullptr
;
}
void
AddCompositableRef
(
)
{
+
+
mCompositableCount
;
}
void
ReleaseCompositableRef
(
)
{
-
-
mCompositableCount
;
MOZ_ASSERT
(
mCompositableCount
>
=
0
)
;
}
virtual
RefPtr
<
TextureSource
>
ExtractCurrentTile
(
)
{
NS_WARNING
(
"
Implementation
does
not
expose
tile
sources
"
)
;
return
nullptr
;
}
int
NumCompositableRefs
(
)
const
{
return
mCompositableCount
;
}
virtual
bool
IsDirectMap
(
)
{
return
false
;
}
virtual
bool
Sync
(
bool
aBlocking
)
{
return
true
;
}
protected
:
RefPtr
<
TextureSource
>
mNextSibling
;
int
mCompositableCount
;
}
;
template
<
typename
T
>
class
CompositableTextureRef
{
public
:
CompositableTextureRef
(
)
{
}
explicit
CompositableTextureRef
(
const
CompositableTextureRef
&
aOther
)
{
*
this
=
aOther
;
}
explicit
CompositableTextureRef
(
T
*
aOther
)
{
*
this
=
aOther
;
}
~
CompositableTextureRef
(
)
{
if
(
mRef
)
{
mRef
-
>
ReleaseCompositableRef
(
)
;
}
}
CompositableTextureRef
&
operator
=
(
const
CompositableTextureRef
&
aOther
)
{
if
(
aOther
.
get
(
)
)
{
aOther
-
>
AddCompositableRef
(
)
;
}
if
(
mRef
)
{
mRef
-
>
ReleaseCompositableRef
(
)
;
}
mRef
=
aOther
.
get
(
)
;
return
*
this
;
}
CompositableTextureRef
&
operator
=
(
T
*
aOther
)
{
if
(
aOther
)
{
aOther
-
>
AddCompositableRef
(
)
;
}
if
(
mRef
)
{
mRef
-
>
ReleaseCompositableRef
(
)
;
}
mRef
=
aOther
;
return
*
this
;
}
T
*
get
(
)
const
{
return
mRef
;
}
operator
T
*
(
)
const
{
return
mRef
;
}
T
*
operator
-
>
(
)
const
{
return
mRef
;
}
T
&
operator
*
(
)
const
{
return
*
mRef
;
}
private
:
RefPtr
<
T
>
mRef
;
}
;
typedef
CompositableTextureRef
<
TextureSource
>
CompositableTextureSourceRef
;
typedef
CompositableTextureRef
<
TextureHost
>
CompositableTextureHostRef
;
class
DataTextureSource
:
public
TextureSource
{
public
:
DataTextureSource
(
)
:
mOwner
(
0
)
mUpdateSerial
(
0
)
{
}
const
char
*
Name
(
)
const
override
{
return
"
DataTextureSource
"
;
}
DataTextureSource
*
AsDataTextureSource
(
)
override
{
return
this
;
}
virtual
bool
Update
(
gfx
:
:
DataSourceSurface
*
aSurface
nsIntRegion
*
aDestRegion
=
nullptr
gfx
:
:
IntPoint
*
aSrcOffset
=
nullptr
)
=
0
;
uint32_t
GetUpdateSerial
(
)
const
{
return
mUpdateSerial
;
}
void
SetUpdateSerial
(
uint32_t
aValue
)
{
mUpdateSerial
=
aValue
;
}
void
DeallocateDeviceData
(
)
override
{
SetUpdateSerial
(
0
)
;
}
#
ifdef
DEBUG
virtual
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
ReadBack
(
)
{
return
nullptr
;
}
;
#
endif
void
SetOwner
(
TextureHost
*
aOwner
)
{
auto
newOwner
=
(
uintptr_t
)
aOwner
;
if
(
newOwner
!
=
mOwner
)
{
mOwner
=
newOwner
;
SetUpdateSerial
(
0
)
;
}
}
bool
IsOwnedBy
(
TextureHost
*
aOwner
)
const
{
return
mOwner
=
=
(
uintptr_t
)
aOwner
;
}
bool
HasOwner
(
)
const
{
return
!
IsOwnedBy
(
nullptr
)
;
}
private
:
uintptr_t
mOwner
;
uint32_t
mUpdateSerial
;
}
;
class
TextureHost
:
public
AtomicRefCountedWithFinalize
<
TextureHost
>
{
void
Finalize
(
)
;
friend
class
AtomicRefCountedWithFinalize
<
TextureHost
>
;
public
:
explicit
TextureHost
(
TextureFlags
aFlags
)
;
protected
:
virtual
~
TextureHost
(
)
;
public
:
static
already_AddRefed
<
TextureHost
>
Create
(
const
SurfaceDescriptor
&
aDesc
const
ReadLockDescriptor
&
aReadLock
ISurfaceAllocator
*
aDeallocator
LayersBackend
aBackend
TextureFlags
aFlags
wr
:
:
MaybeExternalImageId
&
aExternalImageId
)
;
virtual
bool
Lock
(
)
{
return
true
;
}
virtual
void
Unlock
(
)
{
}
virtual
bool
LockWithoutCompositor
(
)
{
return
true
;
}
virtual
void
UnlockWithoutCompositor
(
)
{
}
virtual
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
=
0
;
virtual
gfx
:
:
SurfaceFormat
GetReadFormat
(
)
const
{
return
GetFormat
(
)
;
}
virtual
gfx
:
:
YUVColorSpace
GetYUVColorSpace
(
)
const
{
return
gfx
:
:
YUVColorSpace
:
:
UNKNOWN
;
}
virtual
gfx
:
:
ColorDepth
GetColorDepth
(
)
const
{
return
gfx
:
:
ColorDepth
:
:
COLOR_8
;
}
virtual
gfx
:
:
ColorRange
GetColorRange
(
)
const
{
return
gfx
:
:
ColorRange
:
:
LIMITED
;
}
virtual
void
PrepareTextureSource
(
CompositableTextureSourceRef
&
aTexture
)
{
}
virtual
bool
BindTextureSource
(
CompositableTextureSourceRef
&
aTexture
)
=
0
;
virtual
bool
AcquireTextureSource
(
CompositableTextureSourceRef
&
aTexture
)
{
return
false
;
}
virtual
void
UnbindTextureSource
(
)
;
void
Updated
(
const
nsIntRegion
*
aRegion
=
nullptr
)
;
virtual
void
SetTextureSourceProvider
(
TextureSourceProvider
*
aProvider
)
{
}
virtual
void
DeallocateDeviceData
(
)
{
}
virtual
void
DeallocateSharedData
(
)
{
}
virtual
void
ForgetSharedData
(
)
{
}
virtual
gfx
:
:
IntSize
GetSize
(
)
const
=
0
;
virtual
void
SetCropRect
(
nsIntRect
aCropRect
)
{
}
virtual
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
GetAsSurface
(
)
=
0
;
void
SetFlags
(
TextureFlags
aFlags
)
{
mFlags
=
aFlags
;
}
void
AddFlag
(
TextureFlags
aFlag
)
{
mFlags
|
=
aFlag
;
}
TextureFlags
GetFlags
(
)
{
return
mFlags
;
}
static
PTextureParent
*
CreateIPDLActor
(
HostIPCAllocator
*
aAllocator
const
SurfaceDescriptor
&
aSharedData
const
ReadLockDescriptor
&
aDescriptor
LayersBackend
aLayersBackend
TextureFlags
aFlags
uint64_t
aSerial
const
wr
:
:
MaybeExternalImageId
&
aExternalImageId
)
;
static
bool
DestroyIPDLActor
(
PTextureParent
*
actor
)
;
static
bool
SendDeleteIPDLActor
(
PTextureParent
*
actor
)
;
static
void
ReceivedDestroy
(
PTextureParent
*
actor
)
;
static
TextureHost
*
AsTextureHost
(
PTextureParent
*
actor
)
;
static
uint64_t
GetTextureSerial
(
PTextureParent
*
actor
)
;
PTextureParent
*
GetIPDLActor
(
)
;
virtual
void
OnShutdown
(
)
{
}
virtual
void
ForgetBufferActor
(
)
{
}
virtual
const
char
*
Name
(
)
{
return
"
TextureHost
"
;
}
virtual
void
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
;
virtual
bool
HasIntermediateBuffer
(
)
const
{
return
false
;
}
void
AddCompositableRef
(
)
{
+
+
mCompositableCount
;
if
(
mCompositableCount
=
=
1
)
{
PrepareForUse
(
)
;
}
}
void
ReleaseCompositableRef
(
)
{
-
-
mCompositableCount
;
MOZ_ASSERT
(
mCompositableCount
>
=
0
)
;
if
(
mCompositableCount
=
=
0
)
{
UnbindTextureSource
(
)
;
NotifyNotUsed
(
)
;
}
}
int
NumCompositableRefs
(
)
const
{
return
mCompositableCount
;
}
void
SetLastFwdTransactionId
(
uint64_t
aTransactionId
)
;
void
DeserializeReadLock
(
const
ReadLockDescriptor
&
aDesc
ISurfaceAllocator
*
aAllocator
)
;
void
SetReadLocked
(
)
;
TextureReadLock
*
GetReadLock
(
)
{
return
mReadLock
;
}
virtual
BufferTextureHost
*
AsBufferTextureHost
(
)
{
return
nullptr
;
}
virtual
MacIOSurfaceTextureHostOGL
*
AsMacIOSurfaceTextureHost
(
)
{
return
nullptr
;
}
virtual
WebRenderTextureHost
*
AsWebRenderTextureHost
(
)
{
return
nullptr
;
}
virtual
SurfaceTextureHost
*
AsSurfaceTextureHost
(
)
{
return
nullptr
;
}
virtual
void
CreateRenderTexture
(
const
wr
:
:
ExternalImageId
&
aExternalImageId
)
{
MOZ_RELEASE_ASSERT
(
false
"
No
CreateRenderTexture
(
)
implementation
for
this
TextureHost
type
.
"
)
;
}
virtual
uint32_t
NumSubTextures
(
)
{
return
1
;
}
enum
ResourceUpdateOp
{
ADD_IMAGE
UPDATE_IMAGE
}
;
virtual
void
PushResourceUpdates
(
wr
:
:
TransactionBuilder
&
aResources
ResourceUpdateOp
aOp
const
Range
<
wr
:
:
ImageKey
>
&
aImageKeys
const
wr
:
:
ExternalImageId
&
aExtID
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Unimplemented
"
)
;
}
virtual
void
PushDisplayItems
(
wr
:
:
DisplayListBuilder
&
aBuilder
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
wr
:
:
ImageRendering
aFilter
const
Range
<
wr
:
:
ImageKey
>
&
aKeys
)
{
MOZ_ASSERT_UNREACHABLE
(
"
No
PushDisplayItems
(
)
implementation
for
this
TextureHost
type
.
"
)
;
}
virtual
MacIOSurface
*
GetMacIOSurface
(
)
{
return
nullptr
;
}
virtual
bool
IsDirectMap
(
)
{
return
false
;
}
virtual
bool
NeedsYFlip
(
)
const
;
protected
:
virtual
void
ReadUnlock
(
)
;
void
RecycleTexture
(
TextureFlags
aFlags
)
;
virtual
void
MaybeNotifyUnlocked
(
)
{
}
virtual
void
UpdatedInternal
(
const
nsIntRegion
*
Region
)
{
}
virtual
void
PrepareForUse
(
)
{
}
virtual
void
NotifyNotUsed
(
)
;
void
CallNotifyNotUsed
(
)
;
PTextureParent
*
mActor
;
RefPtr
<
TextureSourceProvider
>
mProvider
;
RefPtr
<
TextureReadLock
>
mReadLock
;
TextureFlags
mFlags
;
int
mCompositableCount
;
uint64_t
mFwdTransactionId
;
bool
mReadLocked
;
friend
class
Compositor
;
friend
class
TextureParent
;
friend
class
TiledLayerBufferComposite
;
friend
class
TextureSourceProvider
;
}
;
class
BufferTextureHost
:
public
TextureHost
{
public
:
BufferTextureHost
(
const
BufferDescriptor
&
aDescriptor
TextureFlags
aFlags
)
;
virtual
~
BufferTextureHost
(
)
;
virtual
uint8_t
*
GetBuffer
(
)
=
0
;
virtual
size_t
GetBufferSize
(
)
=
0
;
bool
Lock
(
)
override
;
void
Unlock
(
)
override
;
void
PrepareTextureSource
(
CompositableTextureSourceRef
&
aTexture
)
override
;
bool
BindTextureSource
(
CompositableTextureSourceRef
&
aTexture
)
override
;
bool
AcquireTextureSource
(
CompositableTextureSourceRef
&
aTexture
)
override
;
void
UnbindTextureSource
(
)
override
;
void
DeallocateDeviceData
(
)
override
;
void
SetTextureSourceProvider
(
TextureSourceProvider
*
aProvider
)
override
;
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
override
;
gfx
:
:
YUVColorSpace
GetYUVColorSpace
(
)
const
override
;
gfx
:
:
ColorDepth
GetColorDepth
(
)
const
override
;
gfx
:
:
ColorRange
GetColorRange
(
)
const
override
;
gfx
:
:
IntSize
GetSize
(
)
const
override
{
return
mSize
;
}
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
GetAsSurface
(
)
override
;
bool
HasIntermediateBuffer
(
)
const
override
{
return
mHasIntermediateBuffer
;
}
BufferTextureHost
*
AsBufferTextureHost
(
)
override
{
return
this
;
}
const
BufferDescriptor
&
GetBufferDescriptor
(
)
const
{
return
mDescriptor
;
}
void
CreateRenderTexture
(
const
wr
:
:
ExternalImageId
&
aExternalImageId
)
override
;
uint32_t
NumSubTextures
(
)
override
;
void
PushResourceUpdates
(
wr
:
:
TransactionBuilder
&
aResources
ResourceUpdateOp
aOp
const
Range
<
wr
:
:
ImageKey
>
&
aImageKeys
const
wr
:
:
ExternalImageId
&
aExtID
)
override
;
void
PushDisplayItems
(
wr
:
:
DisplayListBuilder
&
aBuilder
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
wr
:
:
ImageRendering
aFilter
const
Range
<
wr
:
:
ImageKey
>
&
aImageKeys
)
override
;
void
ReadUnlock
(
)
override
;
bool
IsDirectMap
(
)
override
{
return
mFirstSource
&
&
mFirstSource
-
>
IsDirectMap
(
)
;
}
;
bool
CanUnlock
(
)
{
return
!
mFirstSource
|
|
mFirstSource
-
>
Sync
(
false
)
;
}
protected
:
bool
Upload
(
nsIntRegion
*
aRegion
=
nullptr
)
;
bool
UploadIfNeeded
(
)
;
bool
MaybeUpload
(
nsIntRegion
*
aRegion
)
;
bool
EnsureWrappingTextureSource
(
)
;
void
UpdatedInternal
(
const
nsIntRegion
*
aRegion
=
nullptr
)
override
;
void
MaybeNotifyUnlocked
(
)
override
;
BufferDescriptor
mDescriptor
;
RefPtr
<
Compositor
>
mCompositor
;
RefPtr
<
DataTextureSource
>
mFirstSource
;
nsIntRegion
mMaybeUpdatedRegion
;
gfx
:
:
IntSize
mSize
;
gfx
:
:
SurfaceFormat
mFormat
;
uint32_t
mUpdateSerial
;
bool
mLocked
;
bool
mNeedsFullUpdate
;
bool
mHasIntermediateBuffer
;
class
DataTextureSourceYCbCrBasic
;
}
;
class
ShmemTextureHost
:
public
BufferTextureHost
{
public
:
ShmemTextureHost
(
const
mozilla
:
:
ipc
:
:
Shmem
&
aShmem
const
BufferDescriptor
&
aDesc
ISurfaceAllocator
*
aDeallocator
TextureFlags
aFlags
)
;
protected
:
~
ShmemTextureHost
(
)
;
public
:
void
DeallocateSharedData
(
)
override
;
void
ForgetSharedData
(
)
override
;
uint8_t
*
GetBuffer
(
)
override
;
size_t
GetBufferSize
(
)
override
;
const
char
*
Name
(
)
override
{
return
"
ShmemTextureHost
"
;
}
void
OnShutdown
(
)
override
;
protected
:
UniquePtr
<
mozilla
:
:
ipc
:
:
Shmem
>
mShmem
;
RefPtr
<
ISurfaceAllocator
>
mDeallocator
;
}
;
class
MemoryTextureHost
:
public
BufferTextureHost
{
public
:
MemoryTextureHost
(
uint8_t
*
aBuffer
const
BufferDescriptor
&
aDesc
TextureFlags
aFlags
)
;
protected
:
~
MemoryTextureHost
(
)
;
public
:
void
DeallocateSharedData
(
)
override
;
void
ForgetSharedData
(
)
override
;
uint8_t
*
GetBuffer
(
)
override
;
size_t
GetBufferSize
(
)
override
;
const
char
*
Name
(
)
override
{
return
"
MemoryTextureHost
"
;
}
protected
:
uint8_t
*
mBuffer
;
}
;
class
MOZ_STACK_CLASS
AutoLockTextureHost
{
public
:
explicit
AutoLockTextureHost
(
TextureHost
*
aTexture
)
:
mTexture
(
aTexture
)
{
mLocked
=
mTexture
?
mTexture
-
>
Lock
(
)
:
false
;
}
~
AutoLockTextureHost
(
)
{
if
(
mTexture
&
&
mLocked
)
{
mTexture
-
>
Unlock
(
)
;
}
}
bool
Failed
(
)
{
return
mTexture
&
&
!
mLocked
;
}
private
:
RefPtr
<
TextureHost
>
mTexture
;
bool
mLocked
;
}
;
class
MOZ_STACK_CLASS
AutoLockTextureHostWithoutCompositor
{
public
:
explicit
AutoLockTextureHostWithoutCompositor
(
TextureHost
*
aTexture
)
:
mTexture
(
aTexture
)
{
mLocked
=
mTexture
?
mTexture
-
>
LockWithoutCompositor
(
)
:
false
;
}
~
AutoLockTextureHostWithoutCompositor
(
)
{
if
(
mTexture
&
&
mLocked
)
{
mTexture
-
>
UnlockWithoutCompositor
(
)
;
}
}
bool
Failed
(
)
{
return
mTexture
&
&
!
mLocked
;
}
private
:
RefPtr
<
TextureHost
>
mTexture
;
bool
mLocked
;
}
;
class
CompositingRenderTarget
:
public
TextureSource
{
public
:
explicit
CompositingRenderTarget
(
const
gfx
:
:
IntPoint
&
aOrigin
)
:
mClearOnBind
(
false
)
mOrigin
(
aOrigin
)
mZNear
(
0
)
mZFar
(
0
)
mHasComplexProjection
(
false
)
mEnableDepthBuffer
(
false
)
{
}
virtual
~
CompositingRenderTarget
(
)
=
default
;
const
char
*
Name
(
)
const
override
{
return
"
CompositingRenderTarget
"
;
}
#
ifdef
MOZ_DUMP_PAINTING
virtual
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
Dump
(
Compositor
*
aCompositor
)
{
return
nullptr
;
}
#
endif
void
ClearOnBind
(
)
{
mClearOnBind
=
true
;
}
void
SetOrigin
(
const
gfx
:
:
IntPoint
&
aOrigin
)
{
mOrigin
=
aOrigin
;
}
const
gfx
:
:
IntPoint
&
GetOrigin
(
)
const
{
return
mOrigin
;
}
gfx
:
:
IntRect
GetRect
(
)
{
return
gfx
:
:
IntRect
(
GetOrigin
(
)
GetSize
(
)
)
;
}
bool
HasComplexProjection
(
)
const
{
return
mHasComplexProjection
;
}
void
ClearProjection
(
)
{
mHasComplexProjection
=
false
;
}
void
SetProjection
(
const
gfx
:
:
Matrix4x4
&
aNewMatrix
bool
aEnableDepthBuffer
float
aZNear
float
aZFar
)
{
mProjectionMatrix
=
aNewMatrix
;
mEnableDepthBuffer
=
aEnableDepthBuffer
;
mZNear
=
aZNear
;
mZFar
=
aZFar
;
mHasComplexProjection
=
true
;
}
void
GetProjection
(
gfx
:
:
Matrix4x4
&
aMatrix
bool
&
aEnableDepth
float
&
aZNear
float
&
aZFar
)
{
MOZ_ASSERT
(
mHasComplexProjection
)
;
aMatrix
=
mProjectionMatrix
;
aEnableDepth
=
mEnableDepthBuffer
;
aZNear
=
mZNear
;
aZFar
=
mZFar
;
}
protected
:
bool
mClearOnBind
;
private
:
gfx
:
:
IntPoint
mOrigin
;
gfx
:
:
Matrix4x4
mProjectionMatrix
;
float
mZNear
mZFar
;
bool
mHasComplexProjection
;
bool
mEnableDepthBuffer
;
}
;
already_AddRefed
<
TextureHost
>
CreateBackendIndependentTextureHost
(
const
SurfaceDescriptor
&
aDesc
ISurfaceAllocator
*
aDeallocator
LayersBackend
aBackend
TextureFlags
aFlags
)
;
}
}
#
endif
