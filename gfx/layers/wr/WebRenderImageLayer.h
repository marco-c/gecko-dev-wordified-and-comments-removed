#
ifndef
GFX_WEBRENDERIMAGELAYER_H
#
define
GFX_WEBRENDERIMAGELAYER_H
#
include
"
ImageLayers
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderLayer
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderLayerManager
.
h
"
namespace
mozilla
{
namespace
layers
{
class
ImageClient
;
class
WebRenderImageLayer
:
public
WebRenderLayer
public
ImageLayer
{
public
:
explicit
WebRenderImageLayer
(
WebRenderLayerManager
*
aLayerManager
)
;
virtual
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetAsSourceSurface
(
)
override
;
virtual
void
ClearCachedResources
(
)
override
;
virtual
bool
SupportsAsyncUpdate
(
)
override
;
protected
:
virtual
~
WebRenderImageLayer
(
)
;
public
:
Layer
*
GetLayer
(
)
override
{
return
this
;
}
void
RenderLayer
(
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
)
override
;
Maybe
<
wr
:
:
WrImageMask
>
RenderMaskLayer
(
const
StackingContextHelper
&
aSc
const
gfx
:
:
Matrix4x4
&
aTransform
wr
:
:
IpcResourceUpdateQueue
&
aResources
)
override
;
protected
:
CompositableType
GetImageClientType
(
)
;
void
ClearWrResources
(
)
;
void
AddWRVideoImage
(
size_t
aChannelNumber
)
;
Maybe
<
wr
:
:
ImageKey
>
UpdateImageKey
(
ImageClientSingle
*
aImageClient
ImageContainer
*
aContainer
Maybe
<
wr
:
:
ImageKey
>
&
aOldKey
wr
:
:
ExternalImageId
&
aExternalImageId
wr
:
:
IpcResourceUpdateQueue
&
aResources
)
;
wr
:
:
MaybeExternalImageId
mExternalImageId
;
Maybe
<
wr
:
:
ImageKey
>
mKey
;
RefPtr
<
ImageClient
>
mImageClient
;
CompositableType
mImageClientContainerType
;
Maybe
<
wr
:
:
PipelineId
>
mPipelineId
;
}
;
}
}
#
endif
