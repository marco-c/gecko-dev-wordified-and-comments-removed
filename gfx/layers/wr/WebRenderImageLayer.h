#
ifndef
GFX_WEBRENDERIMAGELAYER_H
#
define
GFX_WEBRENDERIMAGELAYER_H
#
include
"
ImageLayers
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderLayer
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderLayerManager
.
h
"
namespace
mozilla
{
namespace
layers
{
class
ImageClient
;
class
WebRenderImageLayer
:
public
WebRenderLayer
public
ImageLayer
{
public
:
explicit
WebRenderImageLayer
(
WebRenderLayerManager
*
aLayerManager
)
;
virtual
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetAsSourceSurface
(
)
override
;
virtual
void
ClearCachedResources
(
)
override
;
protected
:
virtual
~
WebRenderImageLayer
(
)
;
WebRenderLayerManager
*
Manager
(
)
{
return
static_cast
<
WebRenderLayerManager
*
>
(
mManager
)
;
}
public
:
Layer
*
GetLayer
(
)
override
{
return
this
;
}
void
RenderLayer
(
wr
:
:
DisplayListBuilder
&
aBuilder
)
override
;
Maybe
<
WrImageMask
>
RenderMaskLayer
(
const
gfx
:
:
Matrix4x4
&
aTransform
)
override
;
protected
:
CompositableType
GetImageClientType
(
)
;
class
Holder
{
public
:
explicit
Holder
(
WebRenderImageLayer
*
aLayer
)
:
mLayer
(
aLayer
)
{
}
WebRenderImageLayer
*
operator
-
>
(
)
const
{
return
mLayer
;
}
private
:
WebRenderImageLayer
*
mLayer
;
}
;
wr
:
:
MaybeExternalImageId
mExternalImageId
;
Maybe
<
wr
:
:
ImageKey
>
mKey
;
RefPtr
<
ImageClient
>
mImageClient
;
CompositableType
mImageClientTypeContainer
;
Maybe
<
wr
:
:
PipelineId
>
mPipelineId
;
MozPromiseRequestHolder
<
PipelineIdPromise
>
mPipelineIdRequest
;
}
;
}
}
#
endif
