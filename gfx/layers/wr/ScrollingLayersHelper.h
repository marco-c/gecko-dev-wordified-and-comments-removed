#
ifndef
GFX_SCROLLINGLAYERSHELPER_H
#
define
GFX_SCROLLINGLAYERSHELPER_H
#
include
"
mozilla
/
Attributes
.
h
"
class
nsDisplayItem
;
namespace
mozilla
{
struct
ActiveScrolledRoot
;
struct
DisplayItemClipChain
;
namespace
wr
{
class
DisplayListBuilder
;
}
namespace
layers
{
struct
FrameMetrics
;
class
StackingContextHelper
;
class
ScrollingLayersHelper
{
public
:
ScrollingLayersHelper
(
)
;
void
BeginBuild
(
wr
:
:
DisplayListBuilder
&
aBuilder
)
;
void
EndBuild
(
)
;
void
BeginItem
(
nsDisplayItem
*
aItem
const
StackingContextHelper
&
aStackingContext
)
;
void
EndItem
(
nsDisplayItem
*
aItem
)
;
~
ScrollingLayersHelper
(
)
;
private
:
std
:
:
pair
<
Maybe
<
FrameMetrics
:
:
ViewID
>
Maybe
<
wr
:
:
WrClipId
>
>
DefineClipChain
(
nsDisplayItem
*
aItem
const
ActiveScrolledRoot
*
aAsr
const
DisplayItemClipChain
*
aChain
int32_t
aAppUnitsPerDevPixel
const
StackingContextHelper
&
aStackingContext
)
;
std
:
:
pair
<
Maybe
<
FrameMetrics
:
:
ViewID
>
Maybe
<
wr
:
:
WrClipId
>
>
RecurseAndDefineClip
(
nsDisplayItem
*
aItem
const
ActiveScrolledRoot
*
aAsr
const
DisplayItemClipChain
*
aChain
int32_t
aAppUnitsPerDevPixel
const
StackingContextHelper
&
aSc
)
;
std
:
:
pair
<
Maybe
<
FrameMetrics
:
:
ViewID
>
Maybe
<
wr
:
:
WrClipId
>
>
RecurseAndDefineAsr
(
nsDisplayItem
*
aItem
const
ActiveScrolledRoot
*
aAsr
const
DisplayItemClipChain
*
aChain
int32_t
aAppUnitsPerDevPixel
const
StackingContextHelper
&
aSc
)
;
typedef
std
:
:
unordered_map
<
const
DisplayItemClipChain
*
wr
:
:
WrClipId
>
ClipIdMap
;
wr
:
:
DisplayListBuilder
*
mBuilder
;
ClipIdMap
mCache
;
struct
ItemClips
{
Maybe
<
FrameMetrics
:
:
ViewID
>
mScrollId
;
Maybe
<
wr
:
:
WrClipId
>
mClipId
;
Maybe
<
std
:
:
pair
<
FrameMetrics
:
:
ViewID
Maybe
<
wr
:
:
WrClipId
>
>
>
mClipAndScroll
;
void
Apply
(
wr
:
:
DisplayListBuilder
*
aBuilder
)
;
void
Unapply
(
wr
:
:
DisplayListBuilder
*
aBuilder
)
;
}
;
std
:
:
vector
<
ItemClips
>
mItemClipStack
;
}
;
}
}
#
endif
