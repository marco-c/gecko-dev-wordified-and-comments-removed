#
include
"
WebRenderTextureHost
.
h
"
#
include
"
mozilla
/
layers
/
ImageDataSerializer
.
h
"
#
include
"
mozilla
/
layers
/
LayersSurfaces
.
h
"
#
include
"
mozilla
/
webrender
/
RenderThread
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderAPI
.
h
"
#
ifdef
MOZ_WIDGET_ANDROID
#
include
"
mozilla
/
layers
/
TextureHostOGL
.
h
"
#
endif
namespace
mozilla
:
:
layers
{
WebRenderTextureHost
:
:
WebRenderTextureHost
(
const
SurfaceDescriptor
&
aDesc
TextureFlags
aFlags
TextureHost
*
aTexture
wr
:
:
ExternalImageId
&
aExternalImageId
)
:
TextureHost
(
aFlags
)
mExternalImageId
(
aExternalImageId
)
{
MOZ_ASSERT
(
!
(
aFlags
&
TextureFlags
:
:
DEALLOCATE_CLIENT
)
)
;
MOZ_COUNT_CTOR
(
WebRenderTextureHost
)
;
mWrappedTextureHost
=
aTexture
;
CreateRenderTextureHost
(
aDesc
aTexture
)
;
}
WebRenderTextureHost
:
:
~
WebRenderTextureHost
(
)
{
MOZ_COUNT_DTOR
(
WebRenderTextureHost
)
;
wr
:
:
RenderThread
:
:
Get
(
)
-
>
UnregisterExternalImage
(
wr
:
:
AsUint64
(
mExternalImageId
)
)
;
}
void
WebRenderTextureHost
:
:
CreateRenderTextureHost
(
const
layers
:
:
SurfaceDescriptor
&
aDesc
TextureHost
*
aTexture
)
{
MOZ_ASSERT
(
aTexture
)
;
aTexture
-
>
CreateRenderTexture
(
mExternalImageId
)
;
}
bool
WebRenderTextureHost
:
:
Lock
(
)
{
MOZ_ASSERT
(
!
mWrappedTextureHost
.
get
(
)
|
|
mWrappedTextureHost
-
>
AsBufferTextureHost
(
)
)
;
if
(
mWrappedTextureHost
&
&
mWrappedTextureHost
-
>
AsBufferTextureHost
(
)
)
{
return
mWrappedTextureHost
-
>
Lock
(
)
;
}
return
false
;
}
void
WebRenderTextureHost
:
:
Unlock
(
)
{
MOZ_ASSERT
(
!
mWrappedTextureHost
.
get
(
)
|
|
mWrappedTextureHost
-
>
AsBufferTextureHost
(
)
)
;
if
(
mWrappedTextureHost
&
&
mWrappedTextureHost
-
>
AsBufferTextureHost
(
)
)
{
mWrappedTextureHost
-
>
Unlock
(
)
;
}
}
void
WebRenderTextureHost
:
:
PrepareTextureSource
(
CompositableTextureSourceRef
&
aTexture
)
{
MOZ_ASSERT
(
!
mWrappedTextureHost
.
get
(
)
|
|
mWrappedTextureHost
-
>
AsBufferTextureHost
(
)
)
;
if
(
mWrappedTextureHost
&
&
mWrappedTextureHost
-
>
AsBufferTextureHost
(
)
)
{
mWrappedTextureHost
-
>
PrepareTextureSource
(
aTexture
)
;
}
}
bool
WebRenderTextureHost
:
:
BindTextureSource
(
CompositableTextureSourceRef
&
aTexture
)
{
MOZ_ASSERT
(
!
mWrappedTextureHost
.
get
(
)
|
|
mWrappedTextureHost
-
>
AsBufferTextureHost
(
)
)
;
if
(
mWrappedTextureHost
&
&
mWrappedTextureHost
-
>
AsBufferTextureHost
(
)
)
{
return
mWrappedTextureHost
-
>
BindTextureSource
(
aTexture
)
;
}
return
false
;
}
void
WebRenderTextureHost
:
:
UnbindTextureSource
(
)
{
if
(
mWrappedTextureHost
&
&
mWrappedTextureHost
-
>
AsBufferTextureHost
(
)
)
{
mWrappedTextureHost
-
>
UnbindTextureSource
(
)
;
}
TextureHost
:
:
UnbindTextureSource
(
)
;
}
void
WebRenderTextureHost
:
:
SetTextureSourceProvider
(
TextureSourceProvider
*
aProvider
)
{
MOZ_ASSERT
(
!
aProvider
|
|
aProvider
-
>
AsBasicCompositor
(
)
)
;
MOZ_ASSERT
(
!
mWrappedTextureHost
.
get
(
)
|
|
mWrappedTextureHost
-
>
AsBufferTextureHost
(
)
)
;
if
(
mWrappedTextureHost
&
&
mWrappedTextureHost
-
>
AsBufferTextureHost
(
)
)
{
mWrappedTextureHost
-
>
SetTextureSourceProvider
(
aProvider
)
;
}
}
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
WebRenderTextureHost
:
:
GetAsSurface
(
)
{
if
(
!
mWrappedTextureHost
)
{
return
nullptr
;
}
return
mWrappedTextureHost
-
>
GetAsSurface
(
)
;
}
gfx
:
:
YUVColorSpace
WebRenderTextureHost
:
:
GetYUVColorSpace
(
)
const
{
if
(
mWrappedTextureHost
)
{
return
mWrappedTextureHost
-
>
GetYUVColorSpace
(
)
;
}
return
gfx
:
:
YUVColorSpace
:
:
UNKNOWN
;
}
gfx
:
:
ColorRange
WebRenderTextureHost
:
:
GetColorRange
(
)
const
{
if
(
mWrappedTextureHost
)
{
return
mWrappedTextureHost
-
>
GetColorRange
(
)
;
}
return
TextureHost
:
:
GetColorRange
(
)
;
}
gfx
:
:
IntSize
WebRenderTextureHost
:
:
GetSize
(
)
const
{
if
(
!
mWrappedTextureHost
)
{
return
gfx
:
:
IntSize
(
)
;
}
return
mWrappedTextureHost
-
>
GetSize
(
)
;
}
gfx
:
:
SurfaceFormat
WebRenderTextureHost
:
:
GetFormat
(
)
const
{
if
(
!
mWrappedTextureHost
)
{
return
gfx
:
:
SurfaceFormat
:
:
UNKNOWN
;
}
return
mWrappedTextureHost
-
>
GetFormat
(
)
;
}
void
WebRenderTextureHost
:
:
NotifyNotUsed
(
)
{
#
ifdef
MOZ_WIDGET_ANDROID
if
(
mWrappedTextureHost
&
&
mWrappedTextureHost
-
>
AsSurfaceTextureHost
(
)
)
{
wr
:
:
RenderThread
:
:
Get
(
)
-
>
NotifyNotUsed
(
wr
:
:
AsUint64
(
mExternalImageId
)
)
;
}
#
endif
TextureHost
:
:
NotifyNotUsed
(
)
;
}
void
WebRenderTextureHost
:
:
PrepareForUse
(
)
{
#
ifdef
MOZ_WIDGET_ANDROID
if
(
mWrappedTextureHost
&
&
mWrappedTextureHost
-
>
AsSurfaceTextureHost
(
)
)
{
wr
:
:
RenderThread
:
:
Get
(
)
-
>
PrepareForUse
(
wr
:
:
AsUint64
(
mExternalImageId
)
)
;
}
#
endif
}
gfx
:
:
SurfaceFormat
WebRenderTextureHost
:
:
GetReadFormat
(
)
const
{
if
(
!
mWrappedTextureHost
)
{
return
gfx
:
:
SurfaceFormat
:
:
UNKNOWN
;
}
return
mWrappedTextureHost
-
>
GetReadFormat
(
)
;
}
int32_t
WebRenderTextureHost
:
:
GetRGBStride
(
)
{
if
(
!
mWrappedTextureHost
)
{
return
0
;
}
gfx
:
:
SurfaceFormat
format
=
GetFormat
(
)
;
if
(
GetFormat
(
)
=
=
gfx
:
:
SurfaceFormat
:
:
YUV
)
{
return
gfx
:
:
GetAlignedStride
<
16
>
(
GetSize
(
)
.
width
BytesPerPixel
(
gfx
:
:
SurfaceFormat
:
:
B8G8R8A8
)
)
;
}
return
ImageDataSerializer
:
:
ComputeRGBStride
(
format
GetSize
(
)
.
width
)
;
}
bool
WebRenderTextureHost
:
:
HasIntermediateBuffer
(
)
const
{
MOZ_ASSERT
(
mWrappedTextureHost
)
;
return
mWrappedTextureHost
-
>
HasIntermediateBuffer
(
)
;
}
uint32_t
WebRenderTextureHost
:
:
NumSubTextures
(
)
{
MOZ_ASSERT
(
mWrappedTextureHost
)
;
return
mWrappedTextureHost
-
>
NumSubTextures
(
)
;
}
void
WebRenderTextureHost
:
:
PushResourceUpdates
(
wr
:
:
TransactionBuilder
&
aResources
ResourceUpdateOp
aOp
const
Range
<
wr
:
:
ImageKey
>
&
aImageKeys
const
wr
:
:
ExternalImageId
&
aExtID
)
{
MOZ_ASSERT
(
mWrappedTextureHost
)
;
MOZ_ASSERT
(
mExternalImageId
=
=
aExtID
)
;
mWrappedTextureHost
-
>
PushResourceUpdates
(
aResources
aOp
aImageKeys
aExtID
)
;
}
void
WebRenderTextureHost
:
:
PushDisplayItems
(
wr
:
:
DisplayListBuilder
&
aBuilder
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
wr
:
:
ImageRendering
aFilter
const
Range
<
wr
:
:
ImageKey
>
&
aImageKeys
const
bool
aPreferCompositorSurface
)
{
MOZ_ASSERT
(
mWrappedTextureHost
)
;
MOZ_ASSERT
(
aImageKeys
.
length
(
)
>
0
)
;
mWrappedTextureHost
-
>
PushDisplayItems
(
aBuilder
aBounds
aClip
aFilter
aImageKeys
aPreferCompositorSurface
)
;
}
bool
WebRenderTextureHost
:
:
NeedsYFlip
(
)
const
{
bool
yFlip
=
TextureHost
:
:
NeedsYFlip
(
)
;
if
(
mWrappedTextureHost
-
>
AsSurfaceTextureHost
(
)
)
{
MOZ_ASSERT
(
yFlip
)
;
yFlip
=
false
;
}
return
yFlip
;
}
}
