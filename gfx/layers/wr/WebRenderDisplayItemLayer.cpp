#
include
"
WebRenderDisplayItemLayer
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
mozilla
/
webrender
/
webrender_ffi
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderBridgeChild
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
namespace
mozilla
{
namespace
layers
{
void
WebRenderDisplayItemLayer
:
:
RenderLayer
(
wr
:
:
DisplayListBuilder
&
aBuilder
)
{
if
(
mItem
)
{
wr
:
:
DisplayListBuilder
builder
(
WrBridge
(
)
-
>
GetPipeline
(
)
)
;
mParentCommands
.
Clear
(
)
;
mItem
-
>
CreateWebRenderCommands
(
builder
mParentCommands
this
)
;
mBuiltDisplayList
=
builder
.
Finalize
(
)
;
}
aBuilder
.
PushBuiltDisplayList
(
Move
(
mBuiltDisplayList
)
)
;
WrBridge
(
)
-
>
AddWebRenderParentCommands
(
mParentCommands
)
;
}
uint64_t
WebRenderDisplayItemLayer
:
:
SendImageContainer
(
ImageContainer
*
aContainer
)
{
if
(
mImageContainer
!
=
aContainer
)
{
AutoLockImage
autoLock
(
aContainer
)
;
Image
*
image
=
autoLock
.
GetImage
(
)
;
if
(
!
image
)
{
return
0
;
}
if
(
!
mImageClient
)
{
mImageClient
=
ImageClient
:
:
CreateImageClient
(
CompositableType
:
:
IMAGE
WrBridge
(
)
TextureFlags
:
:
DEFAULT
)
;
if
(
!
mImageClient
)
{
return
0
;
}
mImageClient
-
>
Connect
(
)
;
}
if
(
!
mExternalImageId
)
{
MOZ_ASSERT
(
mImageClient
)
;
mExternalImageId
=
WrBridge
(
)
-
>
AllocExternalImageIdForCompositable
(
mImageClient
)
;
}
MOZ_ASSERT
(
mExternalImageId
)
;
if
(
mImageClient
&
&
!
mImageClient
-
>
UpdateImage
(
aContainer
0
)
)
{
return
0
;
}
mImageContainer
=
aContainer
;
}
return
mExternalImageId
;
}
}
}
