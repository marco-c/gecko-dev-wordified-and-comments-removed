#
ifndef
mozilla_layers_WebRenderBridgeParent_h
#
define
mozilla_layers_WebRenderBridgeParent_h
#
include
<
unordered_set
>
#
include
"
CompositableHost
.
h
"
#
include
"
GLContextProvider
.
h
"
#
include
"
mozilla
/
layers
/
CompositableTransactionParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositorVsyncSchedulerOwner
.
h
"
#
include
"
mozilla
/
layers
/
PWebRenderBridgeParent
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderAPI
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
namespace
mozilla
{
namespace
gl
{
class
GLContext
;
}
namespace
widget
{
class
CompositorWidget
;
}
namespace
wr
{
class
WebRenderAPI
;
}
namespace
layers
{
class
Compositor
;
class
CompositorAnimationStorage
;
class
CompositorBridgeParentBase
;
class
CompositorVsyncScheduler
;
class
AsyncImagePipelineManager
;
class
WebRenderImageHost
;
class
WebRenderBridgeParent
final
:
public
PWebRenderBridgeParent
public
CompositorVsyncSchedulerOwner
public
CompositableParentManager
{
public
:
WebRenderBridgeParent
(
CompositorBridgeParentBase
*
aCompositorBridge
const
wr
:
:
PipelineId
&
aPipelineId
widget
:
:
CompositorWidget
*
aWidget
CompositorVsyncScheduler
*
aScheduler
RefPtr
<
wr
:
:
WebRenderAPI
>
&
&
aApi
RefPtr
<
AsyncImagePipelineManager
>
&
&
aImageMgr
RefPtr
<
CompositorAnimationStorage
>
&
&
aAnimStorage
)
;
static
WebRenderBridgeParent
*
CreateDestroyed
(
const
wr
:
:
PipelineId
&
aPipelineId
)
;
wr
:
:
PipelineId
PipelineId
(
)
{
return
mPipelineId
;
}
wr
:
:
WebRenderAPI
*
GetWebRenderAPI
(
)
{
return
mApi
;
}
wr
:
:
Epoch
WrEpoch
(
)
{
return
wr
:
:
NewEpoch
(
mWrEpoch
)
;
}
AsyncImagePipelineManager
*
AsyncImageManager
(
)
{
return
mAsyncImageManager
;
}
CompositorVsyncScheduler
*
CompositorScheduler
(
)
{
return
mCompositorScheduler
.
get
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvNewCompositable
(
const
CompositableHandle
&
aHandle
const
TextureInfo
&
aInfo
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReleaseCompositable
(
const
CompositableHandle
&
aHandle
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitReadLocks
(
ReadLockArray
&
&
aReadLocks
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCreate
(
const
gfx
:
:
IntSize
&
aSize
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvShutdown
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvShutdownSync
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDeleteCompositorAnimations
(
InfallibleTArray
<
uint64_t
>
&
&
aIds
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateResources
(
nsTArray
<
OpUpdateResource
>
&
&
aUpdates
nsTArray
<
ipc
:
:
Shmem
>
&
&
aResourceData
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetDisplayList
(
const
gfx
:
:
IntSize
&
aSize
InfallibleTArray
<
WebRenderParentCommand
>
&
&
aCommands
InfallibleTArray
<
OpDestroy
>
&
&
aToDestroy
const
uint64_t
&
aFwdTransactionId
const
uint64_t
&
aTransactionId
const
wr
:
:
LayoutSize
&
aContentSize
const
wr
:
:
ByteBuffer
&
dl
const
wr
:
:
BuiltDisplayListDescriptor
&
dlDesc
const
WebRenderScrollData
&
aScrollData
nsTArray
<
OpUpdateResource
>
&
&
aResourceUpdates
nsTArray
<
ipc
:
:
Shmem
>
&
&
aResourceData
const
wr
:
:
IdNamespace
&
aIdNamespace
const
TimeStamp
&
aTxnStartTime
const
TimeStamp
&
aFwdTime
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetDisplayListSync
(
const
gfx
:
:
IntSize
&
aSize
InfallibleTArray
<
WebRenderParentCommand
>
&
&
aCommands
InfallibleTArray
<
OpDestroy
>
&
&
aToDestroy
const
uint64_t
&
aFwdTransactionId
const
uint64_t
&
aTransactionId
const
wr
:
:
LayoutSize
&
aContentSize
const
wr
:
:
ByteBuffer
&
dl
const
wr
:
:
BuiltDisplayListDescriptor
&
dlDesc
const
WebRenderScrollData
&
aScrollData
nsTArray
<
OpUpdateResource
>
&
&
aResourceUpdates
nsTArray
<
ipc
:
:
Shmem
>
&
&
aResourceData
const
wr
:
:
IdNamespace
&
aIdNamespace
const
TimeStamp
&
aTxnStartTime
const
TimeStamp
&
aFwdTime
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvParentCommands
(
nsTArray
<
WebRenderParentCommand
>
&
&
commands
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetSnapshot
(
PTextureParent
*
aTexture
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAddPipelineIdForCompositable
(
const
wr
:
:
PipelineId
&
aPipelineIds
const
CompositableHandle
&
aHandle
const
bool
&
aAsync
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRemovePipelineIdForCompositable
(
const
wr
:
:
PipelineId
&
aPipelineId
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAddExternalImageIdForCompositable
(
const
ExternalImageId
&
aImageId
const
CompositableHandle
&
aHandle
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRemoveExternalImageId
(
const
ExternalImageId
&
aImageId
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetLayerObserverEpoch
(
const
uint64_t
&
aLayerObserverEpoch
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvClearCachedResources
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvForceComposite
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetConfirmedTargetAPZC
(
const
uint64_t
&
aBlockId
nsTArray
<
ScrollableLayerGuid
>
&
&
aTargets
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetTestSampleTime
(
const
TimeStamp
&
aTime
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvLeaveTestMode
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetAnimationOpacity
(
const
uint64_t
&
aCompositorAnimationsId
float
*
aOpacity
bool
*
aHasAnimationOpacity
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetAnimationTransform
(
const
uint64_t
&
aCompositorAnimationsId
MaybeTransform
*
aTransform
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetAsyncScrollOffset
(
const
FrameMetrics
:
:
ViewID
&
aScrollId
const
float
&
aX
const
float
&
aY
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetAsyncZoom
(
const
FrameMetrics
:
:
ViewID
&
aScrollId
const
float
&
aZoom
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvFlushApzRepaints
(
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetAPZTestData
(
APZTestData
*
data
)
override
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
void
Pause
(
)
;
bool
Resume
(
)
;
void
Destroy
(
)
;
bool
IsPendingComposite
(
)
override
{
return
false
;
}
void
FinishPendingComposite
(
)
override
{
}
void
CompositeToTarget
(
gfx
:
:
DrawTarget
*
aTarget
const
gfx
:
:
IntRect
*
aRect
=
nullptr
)
override
;
bool
IsSameProcess
(
)
const
override
;
base
:
:
ProcessId
GetChildProcessId
(
)
override
;
void
NotifyNotUsed
(
PTextureParent
*
aTexture
uint64_t
aTransactionId
)
override
;
void
SendAsyncMessage
(
const
InfallibleTArray
<
AsyncParentMessageData
>
&
aMessage
)
override
;
void
SendPendingAsyncMessages
(
)
override
;
void
SetAboutToSendAsyncMessages
(
)
override
;
void
HoldPendingTransactionId
(
uint32_t
aWrEpoch
uint64_t
aTransactionId
const
TimeStamp
&
aTxnStartTime
const
TimeStamp
&
aFwdTime
)
;
uint64_t
LastPendingTransactionId
(
)
;
uint64_t
FlushPendingTransactionIds
(
)
;
uint64_t
FlushTransactionIdsForEpoch
(
const
wr
:
:
Epoch
&
aEpoch
const
TimeStamp
&
aEndTime
)
;
TextureFactoryIdentifier
GetTextureFactoryIdentifier
(
)
;
void
ExtractImageCompositeNotifications
(
nsTArray
<
ImageCompositeNotificationInfo
>
*
aNotifications
)
;
wr
:
:
IdNamespace
GetIdNamespace
(
)
{
return
mIdNamespace
;
}
void
UpdateAPZ
(
)
;
const
WebRenderScrollData
&
GetScrollData
(
)
const
;
void
FlushRendering
(
bool
aIsSync
)
;
void
ScheduleComposition
(
)
;
void
UpdateWebRender
(
CompositorVsyncScheduler
*
aScheduler
wr
:
:
WebRenderAPI
*
aApi
AsyncImagePipelineManager
*
aImageMgr
CompositorAnimationStorage
*
aAnimStorage
)
;
private
:
void
DeallocShmems
(
nsTArray
<
ipc
:
:
Shmem
>
&
aShmems
)
;
explicit
WebRenderBridgeParent
(
const
wr
:
:
PipelineId
&
aPipelineId
)
;
virtual
~
WebRenderBridgeParent
(
)
;
bool
UpdateResources
(
const
nsTArray
<
OpUpdateResource
>
&
aResourceUpdates
const
nsTArray
<
ipc
:
:
Shmem
>
&
aResourceData
wr
:
:
ResourceUpdateQueue
&
aUpdates
)
;
uint64_t
GetLayersId
(
)
const
;
void
ProcessWebRenderParentCommands
(
const
InfallibleTArray
<
WebRenderParentCommand
>
&
aCommands
wr
:
:
ResourceUpdateQueue
&
aResources
)
;
void
ProcessWebRenderCommands
(
const
gfx
:
:
IntSize
&
aSize
InfallibleTArray
<
WebRenderParentCommand
>
&
commands
const
wr
:
:
Epoch
&
aEpoch
const
wr
:
:
LayoutSize
&
aContentSize
const
wr
:
:
ByteBuffer
&
dl
const
wr
:
:
BuiltDisplayListDescriptor
&
dlDesc
wr
:
:
ResourceUpdateQueue
&
aResourceUpdates
const
wr
:
:
IdNamespace
&
aIdNamespace
)
;
void
ClearResources
(
)
;
uint64_t
GetChildLayerObserverEpoch
(
)
const
{
return
mChildLayerObserverEpoch
;
}
bool
ShouldParentObserveEpoch
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
HandleShutdown
(
)
;
void
AdvanceAnimations
(
)
;
void
SampleAnimations
(
nsTArray
<
wr
:
:
WrOpacityProperty
>
&
aOpacityArray
nsTArray
<
wr
:
:
WrTransformProperty
>
&
aTransformArray
)
;
CompositorBridgeParent
*
GetRootCompositorBridgeParent
(
)
const
;
bool
PushAPZStateToWR
(
nsTArray
<
wr
:
:
WrTransformProperty
>
&
aTransformArray
)
;
already_AddRefed
<
AsyncPanZoomController
>
GetTargetAPZC
(
const
FrameMetrics
:
:
ViewID
&
aId
)
;
uint32_t
GetNextWrEpoch
(
)
;
private
:
struct
PendingTransactionId
{
PendingTransactionId
(
wr
:
:
Epoch
aEpoch
uint64_t
aId
const
TimeStamp
&
aTxnStartTime
const
TimeStamp
&
aFwdTime
)
:
mEpoch
(
aEpoch
)
mId
(
aId
)
mTxnStartTime
(
aTxnStartTime
)
mFwdTime
(
aFwdTime
)
{
}
wr
:
:
Epoch
mEpoch
;
uint64_t
mId
;
TimeStamp
mTxnStartTime
;
TimeStamp
mFwdTime
;
}
;
CompositorBridgeParentBase
*
MOZ_NON_OWNING_REF
mCompositorBridge
;
wr
:
:
PipelineId
mPipelineId
;
RefPtr
<
widget
:
:
CompositorWidget
>
mWidget
;
RefPtr
<
wr
:
:
WebRenderAPI
>
mApi
;
RefPtr
<
AsyncImagePipelineManager
>
mAsyncImageManager
;
RefPtr
<
CompositorVsyncScheduler
>
mCompositorScheduler
;
RefPtr
<
CompositorAnimationStorage
>
mAnimStorage
;
std
:
:
unordered_set
<
uint64_t
>
mActiveAnimations
;
nsDataHashtable
<
nsUint64HashKey
RefPtr
<
WebRenderImageHost
>
>
mAsyncCompositables
;
nsDataHashtable
<
nsUint64HashKey
RefPtr
<
WebRenderImageHost
>
>
mExternalImageIds
;
TimeStamp
mPreviousFrameTimeStamp
;
uint64_t
mChildLayerObserverEpoch
;
uint64_t
mParentLayerObserverEpoch
;
std
:
:
queue
<
PendingTransactionId
>
mPendingTransactionIds
;
uint32_t
mWrEpoch
;
wr
:
:
IdNamespace
mIdNamespace
;
bool
mPaused
;
bool
mDestroyed
;
bool
mForceRendering
;
WebRenderScrollData
mScrollData
;
}
;
}
}
#
endif
