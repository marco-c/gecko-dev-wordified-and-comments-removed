#
ifndef
MOZILLA_GFX_WEBRENDERTEXTUREHOST_H
#
define
MOZILLA_GFX_WEBRENDERTEXTUREHOST_H
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
namespace
mozilla
{
namespace
layers
{
class
SurfaceDescriptor
;
class
WebRenderTextureHost
:
public
TextureHost
{
public
:
WebRenderTextureHost
(
const
SurfaceDescriptor
&
aDesc
TextureFlags
aFlags
TextureHost
*
aTexture
const
wr
:
:
ExternalImageId
&
aExternalImageId
)
;
virtual
~
WebRenderTextureHost
(
)
;
void
DeallocateDeviceData
(
)
override
{
}
void
UnbindTextureSource
(
)
override
;
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
override
;
virtual
void
NotifyNotUsed
(
)
override
;
virtual
bool
IsValid
(
)
override
;
gfx
:
:
SurfaceFormat
GetReadFormat
(
)
const
override
;
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
GetAsSurface
(
)
override
;
gfx
:
:
ColorDepth
GetColorDepth
(
)
const
override
;
gfx
:
:
YUVColorSpace
GetYUVColorSpace
(
)
const
override
;
gfx
:
:
ColorRange
GetColorRange
(
)
const
override
;
gfx
:
:
IntSize
GetSize
(
)
const
override
;
#
ifdef
MOZ_LAYERS_HAVE_LOG
const
char
*
Name
(
)
override
{
return
"
WebRenderTextureHost
"
;
}
#
endif
WebRenderTextureHost
*
AsWebRenderTextureHost
(
)
override
{
return
this
;
}
bool
IsWrappingBufferTextureHost
(
)
override
;
virtual
void
PrepareForUse
(
)
override
;
wr
:
:
ExternalImageId
GetExternalImageKey
(
)
;
int32_t
GetRGBStride
(
)
;
bool
NeedsDeferredDeletion
(
)
const
override
;
uint32_t
NumSubTextures
(
)
override
;
void
PushResourceUpdates
(
wr
:
:
TransactionBuilder
&
aResources
ResourceUpdateOp
aOp
const
Range
<
wr
:
:
ImageKey
>
&
aImageKeys
const
wr
:
:
ExternalImageId
&
aExtID
)
override
;
void
PushDisplayItems
(
wr
:
:
DisplayListBuilder
&
aBuilder
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
wr
:
:
ImageRendering
aFilter
const
Range
<
wr
:
:
ImageKey
>
&
aImageKeys
PushDisplayItemFlagSet
aFlags
)
override
;
bool
SupportsExternalCompositing
(
WebRenderBackend
aBackend
)
override
;
bool
NeedsYFlip
(
)
const
override
;
void
SetAcquireFence
(
mozilla
:
:
ipc
:
:
FileDescriptor
&
&
aFenceFd
)
override
;
void
SetReleaseFence
(
mozilla
:
:
ipc
:
:
FileDescriptor
&
&
aFenceFd
)
override
;
mozilla
:
:
ipc
:
:
FileDescriptor
GetAndResetReleaseFence
(
)
override
;
AndroidHardwareBuffer
*
GetAndroidHardwareBuffer
(
)
const
override
;
void
MaybeNotifyForUse
(
wr
:
:
TransactionBuilder
&
aTxn
)
;
protected
:
RefPtr
<
TextureHost
>
mWrappedTextureHost
;
}
;
}
}
#
endif
