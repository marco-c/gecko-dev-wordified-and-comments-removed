#
ifndef
MOZILLA_GFX_WEBRENDERCOMPOSITABLE_HOLDER_H
#
define
MOZILLA_GFX_WEBRENDERCOMPOSITABLE_HOLDER_H
#
include
<
queue
>
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
nsClassHashtable
.
h
"
namespace
mozilla
{
namespace
wr
{
class
WebRenderAPI
;
}
namespace
layers
{
class
CompositableHost
;
class
WebRenderTextureHost
;
class
WebRenderCompositableHolder
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
WebRenderCompositableHolder
)
explicit
WebRenderCompositableHolder
(
)
;
protected
:
~
WebRenderCompositableHolder
(
)
;
public
:
void
AddPipeline
(
const
wr
:
:
PipelineId
&
aPipelineId
)
;
void
RemovePipeline
(
const
wr
:
:
PipelineId
&
aPipelineId
)
;
void
HoldExternalImage
(
const
wr
:
:
PipelineId
&
aPipelineId
const
wr
:
:
Epoch
&
aEpoch
WebRenderTextureHost
*
aTexture
)
;
void
Update
(
const
wr
:
:
PipelineId
&
aPipelineId
const
wr
:
:
Epoch
&
aEpoch
)
;
TimeStamp
GetCompositionTime
(
)
const
{
return
mCompositionTime
;
}
void
SetCompositionTime
(
TimeStamp
aTimeStamp
)
{
mCompositionTime
=
aTimeStamp
;
if
(
!
mCompositionTime
.
IsNull
(
)
&
&
!
mCompositeUntilTime
.
IsNull
(
)
&
&
mCompositionTime
>
=
mCompositeUntilTime
)
{
mCompositeUntilTime
=
TimeStamp
(
)
;
}
}
void
CompositeUntil
(
TimeStamp
aTimeStamp
)
{
if
(
mCompositeUntilTime
.
IsNull
(
)
|
|
mCompositeUntilTime
<
aTimeStamp
)
{
mCompositeUntilTime
=
aTimeStamp
;
}
}
TimeStamp
GetCompositeUntilTime
(
)
const
{
return
mCompositeUntilTime
;
}
private
:
struct
ForwardingTextureHost
{
ForwardingTextureHost
(
const
wr
:
:
Epoch
&
aEpoch
TextureHost
*
aTexture
)
:
mEpoch
(
aEpoch
)
mTexture
(
aTexture
)
{
}
wr
:
:
Epoch
mEpoch
;
CompositableTextureHostRef
mTexture
;
}
;
struct
PipelineTexturesHolder
{
std
:
:
queue
<
ForwardingTextureHost
>
mTextureHosts
;
}
;
nsClassHashtable
<
nsUint64HashKey
PipelineTexturesHolder
>
mPipelineTexturesHolders
;
TimeStamp
mCompositionTime
;
TimeStamp
mCompositeUntilTime
;
}
;
}
}
#
endif
