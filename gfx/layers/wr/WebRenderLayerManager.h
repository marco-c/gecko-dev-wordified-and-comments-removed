#
ifndef
GFX_WEBRENDERLAYERMANAGER_H
#
define
GFX_WEBRENDERLAYERMANAGER_H
#
include
"
Layers
.
h
"
#
include
"
mozilla
/
gfx
/
webrender
.
h
"
#
include
"
mozilla
/
layers
/
CompositorController
.
h
"
class
nsIWidget
;
namespace
mozilla
{
namespace
layers
{
class
CompositorBridgeChild
;
class
PCompositorBridgeChild
;
class
WebRenderBridgeChild
;
template
<
class
T
>
static
inline
WRRect
toWrRect
(
const
gfx
:
:
RectTyped
<
T
>
&
rect
)
{
WRRect
r
;
r
.
x
=
rect
.
x
;
r
.
y
=
rect
.
y
;
r
.
width
=
rect
.
width
;
r
.
height
=
rect
.
height
;
return
r
;
}
template
<
class
T
>
static
inline
WRRect
toWrRect
(
const
gfx
:
:
IntRectTyped
<
T
>
&
rect
)
{
return
toWrRect
(
IntRectToRect
(
rect
)
)
;
}
class
WebRenderLayerManager
;
class
APZCTreeManager
;
class
WebRenderLayer
{
public
:
virtual
Layer
*
GetLayer
(
)
=
0
;
virtual
void
RenderLayer
(
)
=
0
;
virtual
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetAsSourceSurface
(
)
{
return
nullptr
;
}
static
inline
WebRenderLayer
*
ToWebRenderLayer
(
Layer
*
aLayer
)
{
return
static_cast
<
WebRenderLayer
*
>
(
aLayer
-
>
ImplData
(
)
)
;
}
WebRenderLayerManager
*
WRManager
(
)
;
WebRenderBridgeChild
*
WRBridge
(
)
;
gfx
:
:
Rect
RelativeToVisible
(
gfx
:
:
Rect
aRect
)
;
gfx
:
:
Rect
RelativeToTransformedVisible
(
gfx
:
:
Rect
aRect
)
;
gfx
:
:
Rect
ParentStackingContextBounds
(
size_t
aScrollMetadataIndex
)
;
gfx
:
:
Rect
RelativeToParent
(
gfx
:
:
Rect
aRect
)
;
gfx
:
:
Rect
TransformedVisibleBoundsRelativeToParent
(
)
;
}
;
class
MOZ_RAII
WRScrollFrameStackingContextGenerator
{
public
:
explicit
WRScrollFrameStackingContextGenerator
(
WebRenderLayer
*
aLayer
)
;
~
WRScrollFrameStackingContextGenerator
(
)
;
private
:
WebRenderLayer
*
mLayer
;
}
;
class
WebRenderLayerManager
final
:
public
LayerManager
{
public
:
explicit
WebRenderLayerManager
(
nsIWidget
*
aWidget
)
;
void
Initialize
(
PCompositorBridgeChild
*
aCBChild
uint64_t
aLayersId
)
;
virtual
void
Destroy
(
)
override
;
protected
:
virtual
~
WebRenderLayerManager
(
)
;
public
:
WebRenderLayerManager
*
AsWebRenderLayerManager
(
)
override
{
return
this
;
}
CompositorBridgeChild
*
GetCompositorBridgeChild
(
)
;
virtual
int32_t
GetMaxTextureSize
(
)
const
override
;
virtual
bool
BeginTransactionWithTarget
(
gfxContext
*
aTarget
)
override
;
virtual
bool
BeginTransaction
(
)
override
;
virtual
bool
EndEmptyTransaction
(
EndTransactionFlags
aFlags
=
END_DEFAULT
)
override
;
virtual
void
EndTransaction
(
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
EndTransactionFlags
aFlags
=
END_DEFAULT
)
override
;
virtual
LayersBackend
GetBackendType
(
)
override
{
return
LayersBackend
:
:
LAYERS_WR
;
}
virtual
void
GetBackendName
(
nsAString
&
name
)
override
{
name
.
AssignLiteral
(
"
WebRender
"
)
;
}
virtual
const
char
*
Name
(
)
const
override
{
return
"
WebRender
"
;
}
virtual
void
SetRoot
(
Layer
*
aLayer
)
override
;
virtual
already_AddRefed
<
PaintedLayer
>
CreatePaintedLayer
(
)
override
;
virtual
already_AddRefed
<
ContainerLayer
>
CreateContainerLayer
(
)
override
;
virtual
already_AddRefed
<
ImageLayer
>
CreateImageLayer
(
)
override
;
virtual
already_AddRefed
<
CanvasLayer
>
CreateCanvasLayer
(
)
override
;
virtual
already_AddRefed
<
ReadbackLayer
>
CreateReadbackLayer
(
)
override
;
virtual
already_AddRefed
<
ColorLayer
>
CreateColorLayer
(
)
override
;
virtual
already_AddRefed
<
RefLayer
>
CreateRefLayer
(
)
override
;
virtual
already_AddRefed
<
TextLayer
>
CreateTextLayer
(
)
override
;
virtual
bool
NeedsWidgetInvalidation
(
)
override
{
return
true
;
}
virtual
void
SetLayerObserverEpoch
(
uint64_t
aLayerObserverEpoch
)
override
;
virtual
void
DidComposite
(
uint64_t
aTransactionId
const
mozilla
:
:
TimeStamp
&
aCompositeStart
const
mozilla
:
:
TimeStamp
&
aCompositeEnd
)
override
;
virtual
void
ClearCachedResources
(
Layer
*
aSubtree
=
nullptr
)
override
;
DrawPaintedLayerCallback
GetPaintedLayerCallback
(
)
const
{
return
mPaintedLayerCallback
;
}
void
*
GetPaintedLayerCallbackData
(
)
const
{
return
mPaintedLayerCallbackData
;
}
void
AddImageKeyForDiscard
(
WRImageKey
)
;
void
DiscardImages
(
)
;
WebRenderBridgeChild
*
WRBridge
(
)
const
{
return
mWRChild
;
}
private
:
void
MakeSnapshotIfRequired
(
LayoutDeviceIntSize
aSize
)
;
private
:
nsIWidget
*
MOZ_NON_OWNING_REF
mWidget
;
std
:
:
vector
<
WRImageKey
>
mImageKeys
;
DrawPaintedLayerCallback
mPaintedLayerCallback
;
void
*
mPaintedLayerCallbackData
;
RefPtr
<
WebRenderBridgeChild
>
mWRChild
;
RefPtr
<
gfxContext
>
mTarget
;
}
;
}
}
#
endif
