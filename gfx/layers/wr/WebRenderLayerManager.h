#
ifndef
GFX_WEBRENDERLAYERMANAGER_H
#
define
GFX_WEBRENDERLAYERMANAGER_H
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
string
>
#
include
"
Units
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
StaticPrefs_apz
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
APZTestData
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
DisplayItemCache
.
h
"
#
include
"
mozilla
/
layers
/
FocusTarget
.
h
"
#
include
"
mozilla
/
layers
/
LayerManager
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
RenderRootStateManager
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderCommandBuilder
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderScrollData
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashSet
.
h
"
class
gfxContext
;
class
nsIWidget
;
namespace
mozilla
{
class
nsDisplayList
;
class
nsDisplayListBuilder
;
struct
ActiveScrolledRoot
;
namespace
layers
{
class
CompositorBridgeChild
;
class
KnowsCompositor
;
class
Layer
;
class
PCompositorBridgeChild
;
class
WebRenderBridgeChild
;
class
WebRenderParentCommand
;
class
WebRenderLayerManager
final
:
public
LayerManager
{
typedef
nsTArray
<
RefPtr
<
Layer
>
>
LayerRefArray
;
typedef
nsTHashSet
<
RefPtr
<
WebRenderUserData
>
>
WebRenderUserDataRefTable
;
public
:
explicit
WebRenderLayerManager
(
nsIWidget
*
aWidget
)
;
bool
Initialize
(
PCompositorBridgeChild
*
aCBChild
wr
:
:
PipelineId
aLayersId
TextureFactoryIdentifier
*
aTextureFactoryIdentifier
nsCString
&
aError
)
;
void
Destroy
(
)
override
;
void
DoDestroy
(
bool
aIsSync
)
;
protected
:
virtual
~
WebRenderLayerManager
(
)
;
public
:
KnowsCompositor
*
AsKnowsCompositor
(
)
override
;
WebRenderLayerManager
*
AsWebRender
(
)
override
{
return
this
;
}
WebRenderLayerManager
*
AsWebRenderLayerManager
(
)
override
{
return
this
;
}
CompositorBridgeChild
*
GetCompositorBridgeChild
(
)
override
;
int32_t
GetMaxTextureSize
(
)
const
override
{
return
INT32_MAX
;
}
bool
BeginTransactionWithTarget
(
gfxContext
*
aTarget
const
nsCString
&
aURL
)
override
;
bool
BeginTransaction
(
const
nsCString
&
aURL
)
override
;
bool
EndEmptyTransaction
(
EndTransactionFlags
aFlags
=
END_DEFAULT
)
override
;
void
EndTransactionWithoutLayer
(
nsDisplayList
*
aDisplayList
nsDisplayListBuilder
*
aDisplayListBuilder
WrFiltersHolder
&
&
aFilters
WebRenderBackgroundData
*
aBackground
const
double
aGeckoDLBuildTime
)
;
void
EndTransaction
(
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
EndTransactionFlags
aFlags
=
END_DEFAULT
)
override
;
LayersBackend
GetBackendType
(
)
override
{
return
LayersBackend
:
:
LAYERS_WR
;
}
void
GetBackendName
(
nsAString
&
name
)
override
;
const
char
*
Name
(
)
const
override
{
return
"
WebRender
"
;
}
void
SetRoot
(
Layer
*
aLayer
)
override
;
already_AddRefed
<
PaintedLayer
>
CreatePaintedLayer
(
)
override
{
return
nullptr
;
}
already_AddRefed
<
ContainerLayer
>
CreateContainerLayer
(
)
override
{
return
nullptr
;
}
already_AddRefed
<
ImageLayer
>
CreateImageLayer
(
)
override
{
return
nullptr
;
}
already_AddRefed
<
ColorLayer
>
CreateColorLayer
(
)
override
{
return
nullptr
;
}
already_AddRefed
<
CanvasLayer
>
CreateCanvasLayer
(
)
override
{
return
nullptr
;
}
bool
NeedsWidgetInvalidation
(
)
override
{
return
false
;
}
void
SetLayersObserverEpoch
(
LayersObserverEpoch
aEpoch
)
override
;
void
DidComposite
(
TransactionId
aTransactionId
const
mozilla
:
:
TimeStamp
&
aCompositeStart
const
mozilla
:
:
TimeStamp
&
aCompositeEnd
)
override
;
void
ClearCachedResources
(
Layer
*
aSubtree
=
nullptr
)
override
;
void
UpdateTextureFactoryIdentifier
(
const
TextureFactoryIdentifier
&
aNewIdentifier
)
override
;
TextureFactoryIdentifier
GetTextureFactoryIdentifier
(
)
override
;
void
SetTransactionIdAllocator
(
TransactionIdAllocator
*
aAllocator
)
override
;
TransactionId
GetLastTransactionId
(
)
override
;
void
AddDidCompositeObserver
(
DidCompositeObserver
*
aObserver
)
override
;
void
RemoveDidCompositeObserver
(
DidCompositeObserver
*
aObserver
)
override
;
void
FlushRendering
(
)
override
;
void
WaitOnTransactionProcessed
(
)
override
;
void
SendInvalidRegion
(
const
nsIntRegion
&
aRegion
)
override
;
void
ScheduleComposite
(
)
override
;
void
SetNeedsComposite
(
bool
aNeedsComposite
)
override
{
mNeedsComposite
=
aNeedsComposite
;
}
bool
NeedsComposite
(
)
const
override
{
return
mNeedsComposite
;
}
void
SetIsFirstPaint
(
)
override
{
mIsFirstPaint
=
true
;
}
bool
GetIsFirstPaint
(
)
const
override
{
return
mIsFirstPaint
;
}
void
SetFocusTarget
(
const
FocusTarget
&
aFocusTarget
)
override
;
already_AddRefed
<
PersistentBufferProvider
>
CreatePersistentBufferProvider
(
const
gfx
:
:
IntSize
&
aSize
gfx
:
:
SurfaceFormat
aFormat
)
override
;
bool
AsyncPanZoomEnabled
(
)
const
override
;
void
DiscardImages
(
)
;
void
DiscardLocalImages
(
)
;
void
ClearAsyncAnimations
(
)
;
void
WrReleasedImages
(
const
nsTArray
<
wr
:
:
ExternalImageKeyPair
>
&
aPairs
)
;
WebRenderBridgeChild
*
WrBridge
(
)
const
{
return
mWrChild
;
}
void
LogTestDataForCurrentPaint
(
ScrollableLayerGuid
:
:
ViewID
aScrollId
const
std
:
:
string
&
aKey
const
std
:
:
string
&
aValue
)
{
MOZ_ASSERT
(
StaticPrefs
:
:
apz_test_logging_enabled
(
)
"
don
'
t
call
me
"
)
;
mApzTestData
.
LogTestDataForPaint
(
mPaintSequenceNumber
aScrollId
aKey
aValue
)
;
}
void
LogAdditionalTestData
(
const
std
:
:
string
&
aKey
const
std
:
:
string
&
aValue
)
{
MOZ_ASSERT
(
StaticPrefs
:
:
apz_test_logging_enabled
(
)
"
don
'
t
call
me
"
)
;
mApzTestData
.
RecordAdditionalData
(
aKey
aValue
)
;
}
const
APZTestData
&
GetAPZTestData
(
)
const
{
return
mApzTestData
;
}
WebRenderCommandBuilder
&
CommandBuilder
(
)
{
return
mWebRenderCommandBuilder
;
}
WebRenderUserDataRefTable
*
GetWebRenderUserDataTable
(
)
{
return
mWebRenderCommandBuilder
.
GetWebRenderUserDataTable
(
)
;
}
WebRenderScrollData
&
GetScrollData
(
)
{
return
mScrollData
;
}
void
WrUpdated
(
)
;
nsIWidget
*
GetWidget
(
)
{
return
mWidget
;
}
uint32_t
StartFrameTimeRecording
(
int32_t
aBufferSize
)
override
;
void
StopFrameTimeRecording
(
uint32_t
aStartIndex
nsTArray
<
float
>
&
aFrameIntervals
)
override
;
RenderRootStateManager
*
GetRenderRootStateManager
(
)
{
return
&
mStateManager
;
}
virtual
void
PayloadPresented
(
const
TimeStamp
&
aTimeStamp
)
override
;
void
TakeCompositionPayloads
(
nsTArray
<
CompositionPayload
>
&
aPayloads
)
;
void
GetFrameUniformity
(
FrameUniformityData
*
aOutData
)
override
;
private
:
void
MakeSnapshotIfRequired
(
LayoutDeviceIntSize
aSize
)
;
private
:
nsIWidget
*
MOZ_NON_OWNING_REF
mWidget
;
RefPtr
<
WebRenderBridgeChild
>
mWrChild
;
RefPtr
<
TransactionIdAllocator
>
mTransactionIdAllocator
;
TransactionId
mLatestTransactionId
;
nsTArray
<
DidCompositeObserver
*
>
mDidCompositeObservers
;
WebRenderScrollData
mScrollData
;
bool
mNeedsComposite
;
bool
mIsFirstPaint
;
FocusTarget
mFocusTarget
;
RefPtr
<
gfxContext
>
mTarget
;
uint32_t
mPaintSequenceNumber
;
APZTestData
mApzTestData
;
TimeStamp
mTransactionStart
;
nsCString
mURL
;
WebRenderCommandBuilder
mWebRenderCommandBuilder
;
wr
:
:
DisplayListCapacity
mLastDisplayListSize
;
RenderRootStateManager
mStateManager
;
DisplayItemCache
mDisplayItemCache
;
}
;
}
}
#
endif
