#
include
"
WebRenderPaintedLayerBlob
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
gfxUtils
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
gfx
/
DrawEventRecorder
.
h
"
#
include
"
mozilla
/
layers
/
ScrollingLayersHelper
.
h
"
#
include
"
mozilla
/
layers
/
StackingContextHelper
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
IpcResourceUpdateQueue
.
h
"
#
include
"
mozilla
/
layers
/
UpdateImageHelper
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
gfx
;
void
WebRenderPaintedLayerBlob
:
:
RenderLayer
(
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
)
{
LayerIntRegion
visibleRegion
=
GetVisibleRegion
(
)
;
LayerIntRect
bounds
=
visibleRegion
.
GetBounds
(
)
;
LayerIntSize
size
=
bounds
.
Size
(
)
;
if
(
visibleRegion
.
IsEmpty
(
)
)
{
if
(
gfxPrefs
:
:
LayersDump
(
)
)
{
printf_stderr
(
"
PaintedLayer
%
p
skipping
\
n
"
this
-
>
GetLayer
(
)
)
;
}
return
;
}
nsIntRegion
regionToPaint
;
regionToPaint
.
Sub
(
mVisibleRegion
.
ToUnknownRegion
(
)
GetValidRegion
(
)
)
;
if
(
!
regionToPaint
.
IsEmpty
(
)
&
&
!
WrManager
(
)
-
>
GetPaintedLayerCallback
(
)
)
{
WrManager
(
)
-
>
SetTransactionIncomplete
(
)
;
return
;
}
IntSize
imageSize
(
size
.
ToUnknownSize
(
)
)
;
if
(
!
regionToPaint
.
IsEmpty
(
)
&
&
WrManager
(
)
-
>
GetPaintedLayerCallback
(
)
)
{
RefPtr
<
gfx
:
:
DrawEventRecorderMemory
>
recorder
=
MakeAndAddRef
<
gfx
:
:
DrawEventRecorderMemory
>
(
)
;
RefPtr
<
gfx
:
:
DrawTarget
>
dummyDt
=
gfx
:
:
Factory
:
:
CreateDrawTarget
(
gfx
:
:
BackendType
:
:
SKIA
IntSize
(
1
1
)
gfx
:
:
SurfaceFormat
:
:
B8G8R8X8
)
;
RefPtr
<
gfx
:
:
DrawTarget
>
dt
=
gfx
:
:
Factory
:
:
CreateRecordingDrawTarget
(
recorder
dummyDt
imageSize
)
;
dt
-
>
ClearRect
(
Rect
(
0
0
imageSize
.
width
imageSize
.
height
)
)
;
dt
-
>
SetTransform
(
Matrix
(
)
.
PreTranslate
(
-
bounds
.
x
-
bounds
.
y
)
)
;
RefPtr
<
gfxContext
>
ctx
=
gfxContext
:
:
CreatePreservingTransformOrNull
(
dt
)
;
MOZ_ASSERT
(
ctx
)
;
WrManager
(
)
-
>
GetPaintedLayerCallback
(
)
(
this
ctx
visibleRegion
.
ToUnknownRegion
(
)
visibleRegion
.
ToUnknownRegion
(
)
DrawRegionClip
:
:
DRAW
nsIntRegion
(
)
WrManager
(
)
-
>
GetPaintedLayerCallbackData
(
)
)
;
if
(
gfxPrefs
:
:
WebRenderHighlightPaintedLayers
(
)
)
{
dt
-
>
SetTransform
(
Matrix
(
)
)
;
dt
-
>
FillRect
(
Rect
(
0
0
imageSize
.
width
imageSize
.
height
)
ColorPattern
(
Color
(
1
.
0
0
.
0
0
.
0
0
.
5
)
)
)
;
}
recorder
-
>
Finish
(
)
;
AddToValidRegion
(
regionToPaint
)
;
wr
:
:
ByteBuffer
bytes
(
recorder
-
>
mOutputStream
.
mLength
(
uint8_t
*
)
recorder
-
>
mOutputStream
.
mData
)
;
if
(
mImageKey
.
isSome
(
)
)
{
aResources
.
DeleteImage
(
mImageKey
.
value
(
)
)
;
}
mImageKey
=
Some
(
GenerateImageKey
(
)
)
;
wr
:
:
ImageDescriptor
descriptor
(
imageSize
0
dt
-
>
GetFormat
(
)
)
;
aResources
.
AddBlobImage
(
mImageKey
.
value
(
)
descriptor
bytes
.
AsSlice
(
)
)
;
mImageBounds
=
visibleRegion
.
GetBounds
(
)
;
}
ScrollingLayersHelper
scroller
(
this
aBuilder
aResources
aSc
)
;
StackingContextHelper
sc
(
aSc
aBuilder
this
)
;
LayerRect
rect
=
Bounds
(
)
;
DumpLayerInfo
(
"
PaintedLayer
"
rect
)
;
aBuilder
.
PushImage
(
sc
.
ToRelativeLayoutRect
(
LayerRect
(
mImageBounds
)
)
sc
.
ToRelativeLayoutRect
(
rect
)
wr
:
:
ImageRendering
:
:
Auto
mImageKey
.
value
(
)
)
;
}
}
}
