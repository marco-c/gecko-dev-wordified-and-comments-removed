#
include
"
WebRenderLayerManager
.
h
"
#
include
"
apz
/
src
/
AsyncPanZoomController
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
mozilla
/
dom
/
TabChild
.
h
"
#
include
"
mozilla
/
layers
/
APZCTreeManager
.
h
"
#
include
"
mozilla
/
layers
/
AsyncCompositionManager
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderBridgeChild
.
h
"
#
include
"
mozilla
/
widget
/
PlatformWidgetTypes
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
TreeTraversal
.
h
"
#
include
"
WebRenderBorderLayer
.
h
"
#
include
"
WebRenderCanvasLayer
.
h
"
#
include
"
WebRenderColorLayer
.
h
"
#
include
"
WebRenderContainerLayer
.
h
"
#
include
"
WebRenderImageLayer
.
h
"
#
include
"
WebRenderPaintedLayer
.
h
"
#
include
"
WebRenderTextLayer
.
h
"
namespace
mozilla
{
using
namespace
gfx
;
namespace
layers
{
WebRenderLayerManager
*
WebRenderLayer
:
:
WRManager
(
)
{
return
static_cast
<
WebRenderLayerManager
*
>
(
GetLayer
(
)
-
>
Manager
(
)
)
;
}
WebRenderBridgeChild
*
WebRenderLayer
:
:
WRBridge
(
)
{
return
WRManager
(
)
-
>
WRBridge
(
)
;
}
Rect
WebRenderLayer
:
:
RelativeToVisible
(
Rect
aRect
)
{
IntRect
bounds
=
GetLayer
(
)
-
>
GetVisibleRegion
(
)
.
GetBounds
(
)
.
ToUnknownRect
(
)
;
aRect
.
MoveBy
(
-
bounds
.
x
-
bounds
.
y
)
;
return
aRect
;
}
Rect
WebRenderLayer
:
:
RelativeToTransformedVisible
(
Rect
aRect
)
{
IntRect
bounds
=
GetLayer
(
)
-
>
GetVisibleRegion
(
)
.
GetBounds
(
)
.
ToUnknownRect
(
)
;
Rect
transformed
=
GetLayer
(
)
-
>
GetTransform
(
)
.
TransformBounds
(
IntRectToRect
(
bounds
)
)
;
aRect
.
MoveBy
(
-
transformed
.
x
-
transformed
.
y
)
;
return
aRect
;
}
Rect
WebRenderLayer
:
:
ParentStackingContextBounds
(
size_t
aScrollMetadataIndex
)
{
Layer
*
layer
=
GetLayer
(
)
;
for
(
size_t
i
=
aScrollMetadataIndex
+
1
;
i
<
layer
-
>
GetScrollMetadataCount
(
)
;
i
+
+
)
{
if
(
layer
-
>
GetFrameMetrics
(
i
)
.
IsScrollable
(
)
)
{
return
layer
-
>
GetFrameMetrics
(
i
)
.
GetCompositionBounds
(
)
.
ToUnknownRect
(
)
;
}
}
if
(
layer
-
>
GetParent
(
)
)
{
return
IntRectToRect
(
layer
-
>
GetParent
(
)
-
>
GetVisibleRegion
(
)
.
GetBounds
(
)
.
ToUnknownRect
(
)
)
;
}
return
Rect
(
)
;
}
Rect
WebRenderLayer
:
:
RelativeToParent
(
Rect
aRect
)
{
Rect
parentBounds
=
ParentStackingContextBounds
(
-
1
)
;
aRect
.
MoveBy
(
-
parentBounds
.
x
-
parentBounds
.
y
)
;
return
aRect
;
}
Rect
WebRenderLayer
:
:
TransformedVisibleBoundsRelativeToParent
(
)
{
IntRect
bounds
=
GetLayer
(
)
-
>
GetVisibleRegion
(
)
.
GetBounds
(
)
.
ToUnknownRect
(
)
;
Rect
transformed
=
GetLayer
(
)
-
>
GetTransform
(
)
.
TransformBounds
(
IntRectToRect
(
bounds
)
)
;
return
RelativeToParent
(
transformed
)
;
}
WRScrollFrameStackingContextGenerator
:
:
WRScrollFrameStackingContextGenerator
(
WebRenderLayer
*
aLayer
)
:
mLayer
(
aLayer
)
{
Matrix4x4
identity
;
Layer
*
layer
=
mLayer
-
>
GetLayer
(
)
;
for
(
size_t
i
=
layer
-
>
GetScrollMetadataCount
(
)
;
i
>
0
;
i
-
-
)
{
const
FrameMetrics
&
fm
=
layer
-
>
GetFrameMetrics
(
i
-
1
)
;
if
(
!
fm
.
IsScrollable
(
)
)
{
continue
;
}
Rect
bounds
=
fm
.
GetCompositionBounds
(
)
.
ToUnknownRect
(
)
;
Rect
overflow
=
(
fm
.
GetExpandedScrollableRect
(
)
*
fm
.
LayersPixelsPerCSSPixel
(
)
)
.
ToUnknownRect
(
)
;
Point
scrollPos
=
(
fm
.
GetScrollOffset
(
)
*
fm
.
LayersPixelsPerCSSPixel
(
)
)
.
ToUnknownPoint
(
)
;
Rect
parentBounds
=
mLayer
-
>
ParentStackingContextBounds
(
i
)
;
bounds
.
MoveBy
(
-
parentBounds
.
x
-
parentBounds
.
y
)
;
overflow
.
MoveBy
(
bounds
.
x
-
scrollPos
.
x
bounds
.
y
-
scrollPos
.
y
)
;
if
(
gfxPrefs
:
:
LayersDump
(
)
)
{
printf_stderr
(
"
Pushing
stacking
context
id
%
"
PRIu64
"
with
bounds
=
%
s
overflow
=
%
s
\
n
"
fm
.
GetScrollId
(
)
Stringify
(
bounds
)
.
c_str
(
)
Stringify
(
overflow
)
.
c_str
(
)
)
;
}
mLayer
-
>
WRBridge
(
)
-
>
AddWebRenderCommand
(
OpDPPushStackingContext
(
toWrRect
(
bounds
)
toWrRect
(
overflow
)
identity
fm
.
GetScrollId
(
)
)
)
;
}
}
WRScrollFrameStackingContextGenerator
:
:
~
WRScrollFrameStackingContextGenerator
(
)
{
Layer
*
layer
=
mLayer
-
>
GetLayer
(
)
;
for
(
size_t
i
=
0
;
i
<
layer
-
>
GetScrollMetadataCount
(
)
;
i
+
+
)
{
const
FrameMetrics
&
fm
=
layer
-
>
GetFrameMetrics
(
i
)
;
if
(
!
fm
.
IsScrollable
(
)
)
{
continue
;
}
if
(
gfxPrefs
:
:
LayersDump
(
)
)
printf_stderr
(
"
Popping
stacking
context
id
%
"
PRIu64
"
\
n
"
fm
.
GetScrollId
(
)
)
;
mLayer
-
>
WRBridge
(
)
-
>
AddWebRenderCommand
(
OpDPPopStackingContext
(
)
)
;
}
}
WebRenderLayerManager
:
:
WebRenderLayerManager
(
nsIWidget
*
aWidget
)
:
mWidget
(
aWidget
)
mLatestTransactionId
(
0
)
mTarget
(
nullptr
)
{
MOZ_COUNT_CTOR
(
WebRenderLayerManager
)
;
}
KnowsCompositor
*
WebRenderLayerManager
:
:
AsKnowsCompositor
(
)
{
return
mWRChild
;
}
void
WebRenderLayerManager
:
:
Initialize
(
PCompositorBridgeChild
*
aCBChild
uint64_t
aLayersId
TextureFactoryIdentifier
*
aTextureFactoryIdentifier
)
{
MOZ_ASSERT
(
mWRChild
=
=
nullptr
)
;
MOZ_ASSERT
(
aTextureFactoryIdentifier
)
;
TextureFactoryIdentifier
textureFactoryIdentifier
;
PWebRenderBridgeChild
*
bridge
=
aCBChild
-
>
SendPWebRenderBridgeConstructor
(
aLayersId
&
textureFactoryIdentifier
)
;
MOZ_ASSERT
(
bridge
)
;
mWRChild
=
static_cast
<
WebRenderBridgeChild
*
>
(
bridge
)
;
LayoutDeviceIntSize
size
=
mWidget
-
>
GetClientSize
(
)
;
WRBridge
(
)
-
>
SendCreate
(
size
.
width
size
.
height
)
;
WRBridge
(
)
-
>
IdentifyTextureHost
(
textureFactoryIdentifier
)
;
*
aTextureFactoryIdentifier
=
textureFactoryIdentifier
;
}
void
WebRenderLayerManager
:
:
Destroy
(
)
{
if
(
IsDestroyed
(
)
)
{
return
;
}
LayerManager
:
:
Destroy
(
)
;
DiscardImages
(
)
;
WRBridge
(
)
-
>
Destroy
(
)
;
if
(
mTransactionIdAllocator
)
{
RefPtr
<
TransactionIdAllocator
>
allocator
=
mTransactionIdAllocator
;
uint64_t
id
=
mLatestTransactionId
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
[
allocator
id
]
(
)
-
>
void
{
allocator
-
>
NotifyTransactionCompleted
(
id
)
;
}
)
;
NS_DispatchToMainThread
(
task
.
forget
(
)
)
;
}
}
WebRenderLayerManager
:
:
~
WebRenderLayerManager
(
)
{
Destroy
(
)
;
MOZ_COUNT_DTOR
(
WebRenderLayerManager
)
;
}
CompositorBridgeChild
*
WebRenderLayerManager
:
:
GetCompositorBridgeChild
(
)
{
return
mWidget
?
mWidget
-
>
GetRemoteRenderer
(
)
:
nullptr
;
}
int32_t
WebRenderLayerManager
:
:
GetMaxTextureSize
(
)
const
{
return
WRBridge
(
)
-
>
GetMaxTextureSize
(
)
;
}
bool
WebRenderLayerManager
:
:
BeginTransactionWithTarget
(
gfxContext
*
aTarget
)
{
mTarget
=
aTarget
;
return
BeginTransaction
(
)
;
}
bool
WebRenderLayerManager
:
:
BeginTransaction
(
)
{
return
true
;
}
bool
WebRenderLayerManager
:
:
EndEmptyTransaction
(
EndTransactionFlags
aFlags
)
{
return
false
;
}
void
WebRenderLayerManager
:
:
EndTransaction
(
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
EndTransactionFlags
aFlags
)
{
DiscardImages
(
)
;
mPaintedLayerCallback
=
aCallback
;
mPaintedLayerCallbackData
=
aCallbackData
;
if
(
gfxPrefs
:
:
LayersDump
(
)
)
{
this
-
>
Dump
(
)
;
}
mAnimationReadyTime
=
TimeStamp
:
:
Now
(
)
;
LayoutDeviceIntSize
size
=
mWidget
-
>
GetClientSize
(
)
;
if
(
!
WRBridge
(
)
-
>
DPBegin
(
size
.
width
size
.
height
)
)
{
return
;
}
WebRenderLayer
:
:
ToWebRenderLayer
(
mRoot
)
-
>
RenderLayer
(
)
;
bool
sync
=
mTarget
!
=
nullptr
;
mLatestTransactionId
=
mTransactionIdAllocator
-
>
GetTransactionId
(
)
;
WRBridge
(
)
-
>
DPEnd
(
sync
mLatestTransactionId
)
;
MakeSnapshotIfRequired
(
size
)
;
}
void
WebRenderLayerManager
:
:
MakeSnapshotIfRequired
(
LayoutDeviceIntSize
aSize
)
{
if
(
!
mTarget
|
|
aSize
.
IsEmpty
(
)
)
{
return
;
}
RefPtr
<
TextureClient
>
texture
=
TextureClient
:
:
CreateForRawBufferAccess
(
WRBridge
(
)
SurfaceFormat
:
:
B8G8R8A8
aSize
.
ToUnknownSize
(
)
BackendType
:
:
SKIA
TextureFlags
:
:
DEFAULT
)
;
if
(
!
texture
)
{
return
;
}
texture
-
>
InitIPDLActor
(
WRBridge
(
)
)
;
if
(
!
texture
-
>
GetIPDLActor
(
)
)
{
return
;
}
IntRect
bounds
=
ToOutsideIntRect
(
mTarget
-
>
GetClipExtents
(
)
)
;
if
(
!
WRBridge
(
)
-
>
SendDPGetSnapshot
(
texture
-
>
GetIPDLActor
(
)
)
)
{
return
;
}
TextureClientAutoLock
autoLock
(
texture
OpenMode
:
:
OPEN_READ_ONLY
)
;
if
(
!
autoLock
.
Succeeded
(
)
)
{
return
;
}
RefPtr
<
DrawTarget
>
drawTarget
=
texture
-
>
BorrowDrawTarget
(
)
;
if
(
!
drawTarget
|
|
!
drawTarget
-
>
IsValid
(
)
)
{
return
;
}
RefPtr
<
SourceSurface
>
snapshot
=
drawTarget
-
>
Snapshot
(
)
;
Rect
dst
(
bounds
.
x
bounds
.
y
bounds
.
width
bounds
.
height
)
;
Rect
src
(
0
0
bounds
.
width
bounds
.
height
)
;
SurfacePattern
pattern
(
snapshot
ExtendMode
:
:
CLAMP
Matrix
:
:
Scaling
(
1
.
0
-
1
.
0
)
.
PostTranslate
(
0
.
0
aSize
.
height
)
)
;
DrawTarget
*
dt
=
mTarget
-
>
GetDrawTarget
(
)
;
MOZ_RELEASE_ASSERT
(
dt
)
;
dt
-
>
FillRect
(
dst
pattern
)
;
mTarget
=
nullptr
;
}
void
WebRenderLayerManager
:
:
AddImageKeyForDiscard
(
WRImageKey
key
)
{
mImageKeys
.
push_back
(
key
)
;
}
void
WebRenderLayerManager
:
:
DiscardImages
(
)
{
for
(
auto
key
:
mImageKeys
)
{
WRBridge
(
)
-
>
SendDeleteImage
(
key
)
;
}
mImageKeys
.
clear
(
)
;
}
void
WebRenderLayerManager
:
:
SetLayerObserverEpoch
(
uint64_t
aLayerObserverEpoch
)
{
WRBridge
(
)
-
>
SendSetLayerObserverEpoch
(
aLayerObserverEpoch
)
;
}
void
WebRenderLayerManager
:
:
DidComposite
(
uint64_t
aTransactionId
const
mozilla
:
:
TimeStamp
&
aCompositeStart
const
mozilla
:
:
TimeStamp
&
aCompositeEnd
)
{
MOZ_ASSERT
(
mWidget
)
;
if
(
aTransactionId
)
{
nsIWidgetListener
*
listener
=
mWidget
-
>
GetWidgetListener
(
)
;
if
(
listener
)
{
listener
-
>
DidCompositeWindow
(
aTransactionId
aCompositeStart
aCompositeEnd
)
;
}
listener
=
mWidget
-
>
GetAttachedWidgetListener
(
)
;
if
(
listener
)
{
listener
-
>
DidCompositeWindow
(
aTransactionId
aCompositeStart
aCompositeEnd
)
;
}
mTransactionIdAllocator
-
>
NotifyTransactionCompleted
(
aTransactionId
)
;
}
for
(
size_t
i
=
0
;
i
<
mDidCompositeObservers
.
Length
(
)
;
i
+
+
)
{
mDidCompositeObservers
[
i
]
-
>
DidComposite
(
)
;
}
}
void
WebRenderLayerManager
:
:
ClearLayer
(
Layer
*
aLayer
)
{
aLayer
-
>
ClearCachedResources
(
)
;
for
(
Layer
*
child
=
aLayer
-
>
GetFirstChild
(
)
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
ClearLayer
(
child
)
;
}
}
void
WebRenderLayerManager
:
:
ClearCachedResources
(
Layer
*
aSubtree
)
{
WRBridge
(
)
-
>
SendClearCachedResources
(
)
;
if
(
aSubtree
)
{
ClearLayer
(
aSubtree
)
;
}
else
if
(
mRoot
)
{
ClearLayer
(
mRoot
)
;
}
}
void
WebRenderLayerManager
:
:
UpdateTextureFactoryIdentifier
(
const
TextureFactoryIdentifier
&
aNewIdentifier
)
{
WRBridge
(
)
-
>
IdentifyTextureHost
(
aNewIdentifier
)
;
}
TextureFactoryIdentifier
WebRenderLayerManager
:
:
GetTextureFactoryIdentifier
(
)
{
return
WRBridge
(
)
-
>
GetTextureFactoryIdentifier
(
)
;
}
void
WebRenderLayerManager
:
:
AddDidCompositeObserver
(
DidCompositeObserver
*
aObserver
)
{
if
(
!
mDidCompositeObservers
.
Contains
(
aObserver
)
)
{
mDidCompositeObservers
.
AppendElement
(
aObserver
)
;
}
}
void
WebRenderLayerManager
:
:
RemoveDidCompositeObserver
(
DidCompositeObserver
*
aObserver
)
{
mDidCompositeObservers
.
RemoveElement
(
aObserver
)
;
}
void
WebRenderLayerManager
:
:
SetRoot
(
Layer
*
aLayer
)
{
mRoot
=
aLayer
;
}
already_AddRefed
<
PaintedLayer
>
WebRenderLayerManager
:
:
CreatePaintedLayer
(
)
{
return
MakeAndAddRef
<
WebRenderPaintedLayer
>
(
this
)
;
}
already_AddRefed
<
ContainerLayer
>
WebRenderLayerManager
:
:
CreateContainerLayer
(
)
{
return
MakeAndAddRef
<
WebRenderContainerLayer
>
(
this
)
;
}
already_AddRefed
<
ImageLayer
>
WebRenderLayerManager
:
:
CreateImageLayer
(
)
{
return
MakeAndAddRef
<
WebRenderImageLayer
>
(
this
)
;
}
already_AddRefed
<
CanvasLayer
>
WebRenderLayerManager
:
:
CreateCanvasLayer
(
)
{
return
MakeAndAddRef
<
WebRenderCanvasLayer
>
(
this
)
;
}
already_AddRefed
<
ReadbackLayer
>
WebRenderLayerManager
:
:
CreateReadbackLayer
(
)
{
return
nullptr
;
}
already_AddRefed
<
ColorLayer
>
WebRenderLayerManager
:
:
CreateColorLayer
(
)
{
return
MakeAndAddRef
<
WebRenderColorLayer
>
(
this
)
;
}
already_AddRefed
<
RefLayer
>
WebRenderLayerManager
:
:
CreateRefLayer
(
)
{
return
MakeAndAddRef
<
WebRenderRefLayer
>
(
this
)
;
}
already_AddRefed
<
TextLayer
>
WebRenderLayerManager
:
:
CreateTextLayer
(
)
{
return
MakeAndAddRef
<
WebRenderTextLayer
>
(
this
)
;
}
already_AddRefed
<
BorderLayer
>
WebRenderLayerManager
:
:
CreateBorderLayer
(
)
{
return
MakeAndAddRef
<
WebRenderBorderLayer
>
(
this
)
;
}
}
}
