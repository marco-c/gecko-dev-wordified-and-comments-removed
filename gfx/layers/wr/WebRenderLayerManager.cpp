#
include
"
WebRenderLayerManager
.
h
"
#
include
"
BasicLayers
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
mozilla
/
gfx
/
DrawEventRecorder
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
IpcResourceUpdateQueue
.
h
"
#
include
"
mozilla
/
layers
/
ScrollingLayersHelper
.
h
"
#
include
"
mozilla
/
layers
/
StackingContextHelper
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
UpdateImageHelper
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
WebRenderCanvasRenderer
.
h
"
namespace
mozilla
{
using
namespace
gfx
;
namespace
layers
{
WebRenderLayerManager
:
:
WebRenderLayerManager
(
nsIWidget
*
aWidget
)
:
mWidget
(
aWidget
)
mLatestTransactionId
(
0
)
mLastAsr
(
nullptr
)
mNeedsComposite
(
false
)
mIsFirstPaint
(
false
)
mTarget
(
nullptr
)
mPaintSequenceNumber
(
0
)
{
MOZ_COUNT_CTOR
(
WebRenderLayerManager
)
;
}
KnowsCompositor
*
WebRenderLayerManager
:
:
AsKnowsCompositor
(
)
{
return
mWrChild
;
}
bool
WebRenderLayerManager
:
:
Initialize
(
PCompositorBridgeChild
*
aCBChild
wr
:
:
PipelineId
aLayersId
TextureFactoryIdentifier
*
aTextureFactoryIdentifier
)
{
MOZ_ASSERT
(
mWrChild
=
=
nullptr
)
;
MOZ_ASSERT
(
aTextureFactoryIdentifier
)
;
LayoutDeviceIntSize
size
=
mWidget
-
>
GetClientSize
(
)
;
TextureFactoryIdentifier
textureFactoryIdentifier
;
wr
:
:
IdNamespace
id_namespace
;
PWebRenderBridgeChild
*
bridge
=
aCBChild
-
>
SendPWebRenderBridgeConstructor
(
aLayersId
size
&
textureFactoryIdentifier
&
id_namespace
)
;
if
(
!
bridge
)
{
gfxCriticalNote
<
<
"
Failed
to
create
WebRenderBridgeChild
.
"
;
return
false
;
}
mWrChild
=
static_cast
<
WebRenderBridgeChild
*
>
(
bridge
)
;
WrBridge
(
)
-
>
SendCreate
(
size
.
ToUnknownSize
(
)
)
;
WrBridge
(
)
-
>
IdentifyTextureHost
(
textureFactoryIdentifier
)
;
WrBridge
(
)
-
>
SetNamespace
(
id_namespace
)
;
*
aTextureFactoryIdentifier
=
textureFactoryIdentifier
;
return
true
;
}
void
WebRenderLayerManager
:
:
Destroy
(
)
{
DoDestroy
(
false
)
;
}
void
WebRenderLayerManager
:
:
DoDestroy
(
bool
aIsSync
)
{
if
(
IsDestroyed
(
)
)
{
return
;
}
LayerManager
:
:
Destroy
(
)
;
if
(
WrBridge
(
)
)
{
mImageKeysToDeleteLater
.
Clear
(
)
;
mImageKeysToDelete
.
Clear
(
)
;
mDiscardedCompositorAnimationsIds
.
Clear
(
)
;
WrBridge
(
)
-
>
Destroy
(
aIsSync
)
;
}
mActiveCompositorAnimationIds
.
clear
(
)
;
mLastCanvasDatas
.
Clear
(
)
;
RemoveUnusedAndResetWebRenderUserData
(
)
;
if
(
mTransactionIdAllocator
)
{
RefPtr
<
TransactionIdAllocator
>
allocator
=
mTransactionIdAllocator
;
uint64_t
id
=
mLatestTransactionId
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
TransactionIdAllocator
:
:
NotifyTransactionCompleted
"
[
allocator
id
]
(
)
-
>
void
{
allocator
-
>
NotifyTransactionCompleted
(
id
)
;
}
)
;
NS_DispatchToMainThread
(
task
.
forget
(
)
)
;
}
mWidget
=
nullptr
;
}
WebRenderLayerManager
:
:
~
WebRenderLayerManager
(
)
{
Destroy
(
)
;
MOZ_COUNT_DTOR
(
WebRenderLayerManager
)
;
}
CompositorBridgeChild
*
WebRenderLayerManager
:
:
GetCompositorBridgeChild
(
)
{
return
WrBridge
(
)
-
>
GetCompositorBridgeChild
(
)
;
}
int32_t
WebRenderLayerManager
:
:
GetMaxTextureSize
(
)
const
{
return
WrBridge
(
)
-
>
GetMaxTextureSize
(
)
;
}
bool
WebRenderLayerManager
:
:
BeginTransactionWithTarget
(
gfxContext
*
aTarget
)
{
mTarget
=
aTarget
;
return
BeginTransaction
(
)
;
}
bool
WebRenderLayerManager
:
:
BeginTransaction
(
)
{
if
(
!
WrBridge
(
)
-
>
IPCOpen
(
)
)
{
gfxCriticalNote
<
<
"
IPC
Channel
is
already
torn
down
unexpectedly
\
n
"
;
return
false
;
}
+
+
mPaintSequenceNumber
;
if
(
gfxPrefs
:
:
APZTestLoggingEnabled
(
)
)
{
mApzTestData
.
StartNewPaint
(
mPaintSequenceNumber
)
;
}
return
true
;
}
bool
WebRenderLayerManager
:
:
EndEmptyTransaction
(
EndTransactionFlags
aFlags
)
{
WrBridge
(
)
-
>
SendSetFocusTarget
(
mFocusTarget
)
;
return
true
;
}
int32_t
PopulateScrollData
(
WebRenderScrollData
&
aTarget
Layer
*
aLayer
)
{
MOZ_ASSERT
(
aLayer
)
;
size_t
index
=
aTarget
.
AddNewLayerData
(
)
;
int32_t
descendants
=
0
;
for
(
Layer
*
child
=
aLayer
-
>
GetLastChild
(
)
;
child
;
child
=
child
-
>
GetPrevSibling
(
)
)
{
descendants
+
=
PopulateScrollData
(
aTarget
child
)
;
}
aTarget
.
GetLayerDataMutable
(
index
)
-
>
Initialize
(
aTarget
aLayer
descendants
)
;
return
descendants
+
1
;
}
void
WebRenderLayerManager
:
:
CreateWebRenderCommandsFromDisplayList
(
nsDisplayList
*
aDisplayList
nsDisplayListBuilder
*
aDisplayListBuilder
const
StackingContextHelper
&
aSc
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
)
{
bool
apzEnabled
=
AsyncPanZoomEnabled
(
)
;
EventRegions
eventRegions
;
for
(
nsDisplayItem
*
i
=
aDisplayList
-
>
GetBottom
(
)
;
i
;
i
=
i
-
>
GetAbove
(
)
)
{
nsDisplayItem
*
item
=
i
;
DisplayItemType
itemType
=
item
-
>
GetType
(
)
;
if
(
itemType
=
=
DisplayItemType
:
:
TYPE_LAYER_EVENT_REGIONS
)
{
nsDisplayLayerEventRegions
*
eventRegions
=
static_cast
<
nsDisplayLayerEventRegions
*
>
(
item
)
;
if
(
eventRegions
-
>
IsEmpty
(
)
)
{
continue
;
}
}
AutoTArray
<
nsDisplayItem
*
1
>
mergedItems
;
mergedItems
.
AppendElement
(
item
)
;
for
(
nsDisplayItem
*
peek
=
item
-
>
GetAbove
(
)
;
peek
;
peek
=
peek
-
>
GetAbove
(
)
)
{
if
(
!
item
-
>
CanMerge
(
peek
)
)
{
break
;
}
mergedItems
.
AppendElement
(
peek
)
;
i
=
peek
;
}
if
(
mergedItems
.
Length
(
)
>
1
)
{
item
=
aDisplayListBuilder
-
>
MergeItems
(
mergedItems
)
;
MOZ_ASSERT
(
item
&
&
itemType
=
=
item
-
>
GetType
(
)
)
;
}
nsDisplayList
*
childItems
=
item
-
>
GetSameCoordinateSystemChildren
(
)
;
if
(
item
-
>
ShouldFlattenAway
(
aDisplayListBuilder
)
)
{
MOZ_ASSERT
(
childItems
)
;
CreateWebRenderCommandsFromDisplayList
(
childItems
aDisplayListBuilder
aSc
aBuilder
aResources
)
;
continue
;
}
bool
forceNewLayerData
=
false
;
size_t
layerCountBeforeRecursing
=
mLayerScrollData
.
size
(
)
;
if
(
apzEnabled
)
{
forceNewLayerData
=
item
-
>
UpdateScrollData
(
nullptr
nullptr
)
;
const
ActiveScrolledRoot
*
asr
=
item
-
>
GetActiveScrolledRoot
(
)
;
if
(
asr
!
=
mLastAsr
)
{
mLastAsr
=
asr
;
forceNewLayerData
=
true
;
}
if
(
forceNewLayerData
&
&
!
eventRegions
.
IsEmpty
(
)
)
{
MOZ_ASSERT
(
!
mLayerScrollData
.
empty
(
)
)
;
mLayerScrollData
.
back
(
)
.
AddEventRegions
(
eventRegions
)
;
eventRegions
.
SetEmpty
(
)
;
}
if
(
itemType
=
=
DisplayItemType
:
:
TYPE_LAYER_EVENT_REGIONS
)
{
nsDisplayLayerEventRegions
*
regionsItem
=
static_cast
<
nsDisplayLayerEventRegions
*
>
(
item
)
;
int32_t
auPerDevPixel
=
item
-
>
Frame
(
)
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
EventRegions
regions
(
regionsItem
-
>
HitRegion
(
)
.
ScaleToOutsidePixels
(
1
.
0f
1
.
0f
auPerDevPixel
)
regionsItem
-
>
MaybeHitRegion
(
)
.
ScaleToOutsidePixels
(
1
.
0f
1
.
0f
auPerDevPixel
)
regionsItem
-
>
DispatchToContentHitRegion
(
)
.
ScaleToOutsidePixels
(
1
.
0f
1
.
0f
auPerDevPixel
)
regionsItem
-
>
NoActionRegion
(
)
.
ScaleToOutsidePixels
(
1
.
0f
1
.
0f
auPerDevPixel
)
regionsItem
-
>
HorizontalPanRegion
(
)
.
ScaleToOutsidePixels
(
1
.
0f
1
.
0f
auPerDevPixel
)
regionsItem
-
>
VerticalPanRegion
(
)
.
ScaleToOutsidePixels
(
1
.
0f
1
.
0f
auPerDevPixel
)
)
;
eventRegions
.
OrWith
(
regions
)
;
if
(
mLayerScrollData
.
empty
(
)
)
{
forceNewLayerData
=
true
;
}
}
if
(
forceNewLayerData
)
{
mAsrStack
.
push_back
(
asr
)
;
}
}
{
ScrollingLayersHelper
clip
(
item
aBuilder
aSc
mClipIdCache
AsyncPanZoomEnabled
(
)
)
;
if
(
!
item
-
>
CreateWebRenderCommands
(
aBuilder
aResources
aSc
this
aDisplayListBuilder
)
)
{
PushItemAsImage
(
item
aBuilder
aResources
aSc
aDisplayListBuilder
)
;
}
}
if
(
apzEnabled
&
&
forceNewLayerData
)
{
mAsrStack
.
pop_back
(
)
;
const
ActiveScrolledRoot
*
stopAtAsr
=
mAsrStack
.
empty
(
)
?
nullptr
:
mAsrStack
.
back
(
)
;
int32_t
descendants
=
mLayerScrollData
.
size
(
)
-
layerCountBeforeRecursing
;
mLayerScrollData
.
emplace_back
(
)
;
mLayerScrollData
.
back
(
)
.
Initialize
(
mScrollData
item
descendants
stopAtAsr
)
;
}
}
if
(
!
eventRegions
.
IsEmpty
(
)
)
{
MOZ_ASSERT
(
apzEnabled
)
;
MOZ_ASSERT
(
!
mLayerScrollData
.
empty
(
)
)
;
mLayerScrollData
.
back
(
)
.
AddEventRegions
(
eventRegions
)
;
}
}
void
WebRenderLayerManager
:
:
EndTransactionWithoutLayer
(
nsDisplayList
*
aDisplayList
nsDisplayListBuilder
*
aDisplayListBuilder
)
{
MOZ_ASSERT
(
aDisplayList
&
&
aDisplayListBuilder
)
;
WrBridge
(
)
-
>
RemoveExpiredFontKeys
(
)
;
EndTransactionInternal
(
EndTransactionFlags
:
:
END_DEFAULT
aDisplayList
aDisplayListBuilder
)
;
}
Maybe
<
wr
:
:
ImageKey
>
WebRenderLayerManager
:
:
CreateImageKey
(
nsDisplayItem
*
aItem
ImageContainer
*
aContainer
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
gfx
:
:
IntSize
&
aSize
)
{
RefPtr
<
WebRenderImageData
>
imageData
=
CreateOrRecycleWebRenderUserData
<
WebRenderImageData
>
(
aItem
)
;
MOZ_ASSERT
(
imageData
)
;
if
(
aContainer
-
>
IsAsync
(
)
)
{
bool
snap
;
nsRect
bounds
=
aItem
-
>
GetBounds
(
nullptr
&
snap
)
;
int32_t
appUnitsPerDevPixel
=
aItem
-
>
Frame
(
)
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
LayerRect
rect
=
ViewAs
<
LayerPixel
>
(
LayoutDeviceRect
:
:
FromAppUnits
(
bounds
appUnitsPerDevPixel
)
PixelCastJustification
:
:
WebRenderHasUnitResolution
)
;
LayerRect
scBounds
(
0
0
rect
.
width
rect
.
Height
(
)
)
;
MaybeIntSize
scaleToSize
;
if
(
!
aContainer
-
>
GetScaleHint
(
)
.
IsEmpty
(
)
)
{
scaleToSize
=
Some
(
aContainer
-
>
GetScaleHint
(
)
)
;
}
imageData
-
>
CreateAsyncImageWebRenderCommands
(
aBuilder
aContainer
aSc
rect
scBounds
gfx
:
:
Matrix4x4
(
)
scaleToSize
wr
:
:
ImageRendering
:
:
Auto
wr
:
:
MixBlendMode
:
:
Normal
!
aItem
-
>
BackfaceIsHidden
(
)
)
;
return
Nothing
(
)
;
}
AutoLockImage
autoLock
(
aContainer
)
;
if
(
!
autoLock
.
HasImage
(
)
)
{
return
Nothing
(
)
;
}
mozilla
:
:
layers
:
:
Image
*
image
=
autoLock
.
GetImage
(
)
;
aSize
=
image
-
>
GetSize
(
)
;
return
imageData
-
>
UpdateImageKey
(
aContainer
aResources
)
;
}
bool
WebRenderLayerManager
:
:
PushImage
(
nsDisplayItem
*
aItem
ImageContainer
*
aContainer
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
const
LayerRect
&
aRect
)
{
gfx
:
:
IntSize
size
;
Maybe
<
wr
:
:
ImageKey
>
key
=
CreateImageKey
(
aItem
aContainer
aBuilder
aResources
aSc
size
)
;
if
(
aContainer
-
>
IsAsync
(
)
)
{
MOZ_ASSERT
(
key
.
isNothing
(
)
)
;
return
true
;
}
if
(
!
key
)
{
return
false
;
}
auto
r
=
aSc
.
ToRelativeLayoutRect
(
aRect
)
;
SamplingFilter
sampleFilter
=
nsLayoutUtils
:
:
GetSamplingFilterForFrame
(
aItem
-
>
Frame
(
)
)
;
aBuilder
.
PushImage
(
r
r
!
aItem
-
>
BackfaceIsHidden
(
)
wr
:
:
ToImageRendering
(
sampleFilter
)
key
.
value
(
)
)
;
return
true
;
}
static
void
PaintItemByDrawTarget
(
nsDisplayItem
*
aItem
DrawTarget
*
aDT
const
LayerRect
&
aImageRect
const
LayerPoint
&
aOffset
nsDisplayListBuilder
*
aDisplayListBuilder
RefPtr
<
BasicLayerManager
>
&
aManager
WebRenderLayerManager
*
aWrManager
const
gfx
:
:
Size
&
aScale
)
{
MOZ_ASSERT
(
aDT
)
;
aDT
-
>
ClearRect
(
aImageRect
.
ToUnknownRect
(
)
)
;
RefPtr
<
gfxContext
>
context
=
gfxContext
:
:
CreateOrNull
(
aDT
)
;
MOZ_ASSERT
(
context
)
;
context
-
>
SetMatrix
(
context
-
>
CurrentMatrix
(
)
.
PreScale
(
aScale
.
width
aScale
.
height
)
.
PreTranslate
(
-
aOffset
.
x
-
aOffset
.
y
)
)
;
switch
(
aItem
-
>
GetType
(
)
)
{
case
DisplayItemType
:
:
TYPE_MASK
:
static_cast
<
nsDisplayMask
*
>
(
aItem
)
-
>
PaintMask
(
aDisplayListBuilder
context
)
;
break
;
case
DisplayItemType
:
:
TYPE_FILTER
:
{
if
(
aManager
=
=
nullptr
)
{
aManager
=
new
BasicLayerManager
(
BasicLayerManager
:
:
BLM_INACTIVE
)
;
}
FrameLayerBuilder
*
layerBuilder
=
new
FrameLayerBuilder
(
)
;
layerBuilder
-
>
Init
(
aDisplayListBuilder
aManager
)
;
layerBuilder
-
>
DidBeginRetainedLayerTransaction
(
aManager
)
;
aManager
-
>
BeginTransactionWithTarget
(
context
)
;
ContainerLayerParameters
param
;
RefPtr
<
Layer
>
layer
=
static_cast
<
nsDisplayFilter
*
>
(
aItem
)
-
>
BuildLayer
(
aDisplayListBuilder
aManager
param
)
;
if
(
layer
)
{
UniquePtr
<
LayerProperties
>
props
;
props
=
Move
(
LayerProperties
:
:
CloneFrom
(
aManager
-
>
GetRoot
(
)
)
)
;
aManager
-
>
SetRoot
(
layer
)
;
layerBuilder
-
>
WillEndTransaction
(
)
;
static_cast
<
nsDisplayFilter
*
>
(
aItem
)
-
>
PaintAsLayer
(
aDisplayListBuilder
context
aManager
)
;
}
if
(
aManager
-
>
InTransaction
(
)
)
{
aManager
-
>
AbortTransaction
(
)
;
}
aManager
-
>
SetTarget
(
nullptr
)
;
break
;
}
default
:
aItem
-
>
Paint
(
aDisplayListBuilder
context
)
;
break
;
}
if
(
gfxPrefs
:
:
WebRenderHighlightPaintedLayers
(
)
)
{
aDT
-
>
SetTransform
(
Matrix
(
)
)
;
aDT
-
>
FillRect
(
Rect
(
0
0
aImageRect
.
Width
(
)
aImageRect
.
Height
(
)
)
ColorPattern
(
Color
(
1
.
0
0
.
0
0
.
0
0
.
5
)
)
)
;
}
if
(
aItem
-
>
Frame
(
)
-
>
PresContext
(
)
-
>
GetPaintFlashing
(
)
)
{
aDT
-
>
SetTransform
(
Matrix
(
)
)
;
float
r
=
float
(
rand
(
)
)
/
RAND_MAX
;
float
g
=
float
(
rand
(
)
)
/
RAND_MAX
;
float
b
=
float
(
rand
(
)
)
/
RAND_MAX
;
aDT
-
>
FillRect
(
Rect
(
0
0
aImageRect
.
Width
(
)
aImageRect
.
Height
(
)
)
ColorPattern
(
Color
(
r
g
b
0
.
5
)
)
)
;
}
}
already_AddRefed
<
WebRenderFallbackData
>
WebRenderLayerManager
:
:
GenerateFallbackData
(
nsDisplayItem
*
aItem
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
nsDisplayListBuilder
*
aDisplayListBuilder
LayerRect
&
aImageRect
)
{
RefPtr
<
WebRenderFallbackData
>
fallbackData
=
CreateOrRecycleWebRenderUserData
<
WebRenderFallbackData
>
(
aItem
)
;
bool
snap
;
nsRect
itemBounds
=
aItem
-
>
GetBounds
(
aDisplayListBuilder
&
snap
)
;
nsRect
clippedBounds
=
itemBounds
;
const
DisplayItemClip
&
clip
=
aItem
-
>
GetClip
(
)
;
if
(
clip
.
HasClip
(
)
&
&
!
gfxPrefs
:
:
WebRenderBlobImages
(
)
)
{
clippedBounds
=
itemBounds
.
Intersect
(
clip
.
GetClipRect
(
)
)
;
}
nsRegion
visibleRegion
(
clippedBounds
)
;
aItem
-
>
ComputeVisibility
(
aDisplayListBuilder
&
visibleRegion
)
;
const
int32_t
appUnitsPerDevPixel
=
aItem
-
>
Frame
(
)
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
LayerRect
bounds
=
ViewAs
<
LayerPixel
>
(
LayoutDeviceRect
:
:
FromAppUnits
(
clippedBounds
appUnitsPerDevPixel
)
PixelCastJustification
:
:
WebRenderHasUnitResolution
)
;
gfx
:
:
Size
scale
=
aSc
.
GetInheritedScale
(
)
;
LayerIntSize
paintSize
=
RoundedToInt
(
LayerSize
(
bounds
.
width
*
scale
.
width
bounds
.
height
*
scale
.
height
)
)
;
if
(
paintSize
.
width
=
=
0
|
|
paintSize
.
height
=
=
0
)
{
return
nullptr
;
}
bool
needPaint
=
true
;
LayerIntPoint
offset
=
RoundedToInt
(
bounds
.
TopLeft
(
)
)
;
aImageRect
=
LayerRect
(
offset
LayerSize
(
RoundedToInt
(
bounds
.
Size
(
)
)
)
)
;
LayerRect
paintRect
=
LayerRect
(
LayerPoint
(
0
0
)
LayerSize
(
paintSize
)
)
;
nsAutoPtr
<
nsDisplayItemGeometry
>
geometry
=
fallbackData
-
>
GetGeometry
(
)
;
if
(
geometry
&
&
!
fallbackData
-
>
IsInvalid
(
)
&
&
aItem
-
>
GetType
(
)
!
=
DisplayItemType
:
:
TYPE_FILTER
)
{
nsRect
invalid
;
nsRegion
invalidRegion
;
if
(
aItem
-
>
IsInvalid
(
invalid
)
)
{
invalidRegion
.
OrWith
(
clippedBounds
)
;
}
else
{
nsPoint
shift
=
itemBounds
.
TopLeft
(
)
-
geometry
-
>
mBounds
.
TopLeft
(
)
;
geometry
-
>
MoveBy
(
shift
)
;
aItem
-
>
ComputeInvalidationRegion
(
aDisplayListBuilder
geometry
&
invalidRegion
)
;
nsRect
lastBounds
=
fallbackData
-
>
GetBounds
(
)
;
lastBounds
.
MoveBy
(
shift
)
;
if
(
!
lastBounds
.
IsEqualInterior
(
clippedBounds
)
)
{
invalidRegion
.
OrWith
(
lastBounds
)
;
invalidRegion
.
OrWith
(
clippedBounds
)
;
}
}
needPaint
=
!
invalidRegion
.
IsEmpty
(
)
;
}
if
(
needPaint
)
{
gfx
:
:
SurfaceFormat
format
=
aItem
-
>
GetType
(
)
=
=
DisplayItemType
:
:
TYPE_MASK
?
gfx
:
:
SurfaceFormat
:
:
A8
:
gfx
:
:
SurfaceFormat
:
:
B8G8R8A8
;
if
(
gfxPrefs
:
:
WebRenderBlobImages
(
)
)
{
bool
snapped
;
bool
isOpaque
=
aItem
-
>
GetOpaqueRegion
(
aDisplayListBuilder
&
snapped
)
.
Contains
(
clippedBounds
)
;
RefPtr
<
gfx
:
:
DrawEventRecorderMemory
>
recorder
=
MakeAndAddRef
<
gfx
:
:
DrawEventRecorderMemory
>
(
)
;
RefPtr
<
gfx
:
:
DrawTarget
>
dummyDt
=
gfx
:
:
Factory
:
:
CreateDrawTarget
(
gfx
:
:
BackendType
:
:
SKIA
gfx
:
:
IntSize
(
1
1
)
format
)
;
RefPtr
<
gfx
:
:
DrawTarget
>
dt
=
gfx
:
:
Factory
:
:
CreateRecordingDrawTarget
(
recorder
dummyDt
paintSize
.
ToUnknownSize
(
)
)
;
PaintItemByDrawTarget
(
aItem
dt
paintRect
offset
aDisplayListBuilder
fallbackData
-
>
mBasicLayerManager
this
scale
)
;
recorder
-
>
Finish
(
)
;
Range
<
uint8_t
>
bytes
(
(
uint8_t
*
)
recorder
-
>
mOutputStream
.
mData
recorder
-
>
mOutputStream
.
mLength
)
;
wr
:
:
ImageKey
key
=
WrBridge
(
)
-
>
GetNextImageKey
(
)
;
wr
:
:
ImageDescriptor
descriptor
(
paintSize
.
ToUnknownSize
(
)
0
dt
-
>
GetFormat
(
)
isOpaque
)
;
aResources
.
AddBlobImage
(
key
descriptor
bytes
)
;
fallbackData
-
>
SetKey
(
key
)
;
}
else
{
fallbackData
-
>
CreateImageClientIfNeeded
(
)
;
RefPtr
<
ImageClient
>
imageClient
=
fallbackData
-
>
GetImageClient
(
)
;
RefPtr
<
ImageContainer
>
imageContainer
=
LayerManager
:
:
CreateImageContainer
(
)
;
{
UpdateImageHelper
helper
(
imageContainer
imageClient
paintSize
.
ToUnknownSize
(
)
format
)
;
{
RefPtr
<
gfx
:
:
DrawTarget
>
dt
=
helper
.
GetDrawTarget
(
)
;
if
(
!
dt
)
{
return
nullptr
;
}
PaintItemByDrawTarget
(
aItem
dt
paintRect
offset
aDisplayListBuilder
fallbackData
-
>
mBasicLayerManager
this
scale
)
;
}
if
(
!
helper
.
UpdateImage
(
)
)
{
return
nullptr
;
}
}
if
(
!
fallbackData
-
>
UpdateImageKey
(
imageContainer
aResources
true
)
)
{
return
nullptr
;
}
}
geometry
=
aItem
-
>
AllocateGeometry
(
aDisplayListBuilder
)
;
fallbackData
-
>
SetInvalid
(
false
)
;
}
fallbackData
-
>
SetGeometry
(
Move
(
geometry
)
)
;
fallbackData
-
>
SetBounds
(
clippedBounds
)
;
MOZ_ASSERT
(
fallbackData
-
>
GetKey
(
)
)
;
return
fallbackData
.
forget
(
)
;
}
Maybe
<
wr
:
:
WrImageMask
>
WebRenderLayerManager
:
:
BuildWrMaskImage
(
nsDisplayItem
*
aItem
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
nsDisplayListBuilder
*
aDisplayListBuilder
const
LayerRect
&
aBounds
)
{
LayerRect
imageRect
;
RefPtr
<
WebRenderFallbackData
>
fallbackData
=
GenerateFallbackData
(
aItem
aBuilder
aResources
aSc
aDisplayListBuilder
imageRect
)
;
if
(
!
fallbackData
)
{
return
Nothing
(
)
;
}
wr
:
:
WrImageMask
imageMask
;
imageMask
.
image
=
fallbackData
-
>
GetKey
(
)
.
value
(
)
;
imageMask
.
rect
=
aSc
.
ToRelativeLayoutRect
(
aBounds
)
;
imageMask
.
repeat
=
false
;
return
Some
(
imageMask
)
;
}
bool
WebRenderLayerManager
:
:
PushItemAsImage
(
nsDisplayItem
*
aItem
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
nsDisplayListBuilder
*
aDisplayListBuilder
)
{
LayerRect
imageRect
;
RefPtr
<
WebRenderFallbackData
>
fallbackData
=
GenerateFallbackData
(
aItem
aBuilder
aResources
aSc
aDisplayListBuilder
imageRect
)
;
if
(
!
fallbackData
)
{
return
false
;
}
wr
:
:
LayoutRect
dest
=
aSc
.
ToRelativeLayoutRect
(
imageRect
)
;
SamplingFilter
sampleFilter
=
nsLayoutUtils
:
:
GetSamplingFilterForFrame
(
aItem
-
>
Frame
(
)
)
;
aBuilder
.
PushImage
(
dest
dest
!
aItem
-
>
BackfaceIsHidden
(
)
wr
:
:
ToImageRendering
(
sampleFilter
)
fallbackData
-
>
GetKey
(
)
.
value
(
)
)
;
return
true
;
}
void
WebRenderLayerManager
:
:
EndTransaction
(
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
EndTransactionFlags
aFlags
)
{
MOZ_ASSERT
(
false
)
;
}
bool
WebRenderLayerManager
:
:
EndTransactionInternal
(
EndTransactionFlags
aFlags
nsDisplayList
*
aDisplayList
nsDisplayListBuilder
*
aDisplayListBuilder
)
{
AutoProfilerTracing
tracing
(
"
Paint
"
"
RenderLayers
"
)
;
mTransactionIncomplete
=
false
;
if
(
gfxPrefs
:
:
LayersDump
(
)
)
{
this
-
>
Dump
(
)
;
}
mAnimationReadyTime
=
TimeStamp
:
:
Now
(
)
;
LayoutDeviceIntSize
size
=
mWidget
-
>
GetClientSize
(
)
;
if
(
!
WrBridge
(
)
-
>
BeginTransaction
(
size
.
ToUnknownSize
(
)
)
)
{
return
false
;
}
DiscardCompositorAnimations
(
)
;
wr
:
:
LayoutSize
contentSize
{
(
float
)
size
.
width
(
float
)
size
.
height
}
;
wr
:
:
DisplayListBuilder
builder
(
WrBridge
(
)
-
>
GetPipeline
(
)
contentSize
)
;
wr
:
:
IpcResourceUpdateQueue
resourceUpdates
(
WrBridge
(
)
-
>
GetShmemAllocator
(
)
)
;
if
(
aDisplayList
&
&
aDisplayListBuilder
)
{
StackingContextHelper
sc
;
mParentCommands
.
Clear
(
)
;
mScrollData
=
WebRenderScrollData
(
)
;
MOZ_ASSERT
(
mLayerScrollData
.
empty
(
)
)
;
mLastCanvasDatas
.
Clear
(
)
;
mLastAsr
=
nullptr
;
CreateWebRenderCommandsFromDisplayList
(
aDisplayList
aDisplayListBuilder
sc
builder
resourceUpdates
)
;
builder
.
Finalize
(
contentSize
mBuiltDisplayList
)
;
mLayerScrollData
.
emplace_back
(
)
;
mLayerScrollData
.
back
(
)
.
InitializeRoot
(
mLayerScrollData
.
size
(
)
-
1
)
;
if
(
aDisplayListBuilder
-
>
IsBuildingLayerEventRegions
(
)
)
{
nsIPresShell
*
shell
=
aDisplayListBuilder
-
>
RootReferenceFrame
(
)
-
>
PresContext
(
)
-
>
PresShell
(
)
;
if
(
nsLayoutUtils
:
:
HasDocumentLevelListenersForApzAwareEvents
(
shell
)
)
{
mLayerScrollData
.
back
(
)
.
SetEventRegionsOverride
(
EventRegionsOverride
:
:
ForceDispatchToContent
)
;
}
}
RefPtr
<
WebRenderLayerManager
>
self
(
this
)
;
auto
callback
=
[
self
]
(
FrameMetrics
:
:
ViewID
aScrollId
)
-
>
bool
{
return
self
-
>
mScrollData
.
HasMetadataFor
(
aScrollId
)
;
}
;
if
(
Maybe
<
ScrollMetadata
>
rootMetadata
=
nsLayoutUtils
:
:
GetRootMetadata
(
aDisplayListBuilder
nullptr
ContainerLayerParameters
(
)
callback
)
)
{
mLayerScrollData
.
back
(
)
.
AppendScrollMetadata
(
mScrollData
rootMetadata
.
ref
(
)
)
;
}
for
(
auto
i
=
mLayerScrollData
.
crbegin
(
)
;
i
!
=
mLayerScrollData
.
crend
(
)
;
i
+
+
)
{
mScrollData
.
AddLayerData
(
*
i
)
;
}
mLayerScrollData
.
clear
(
)
;
mClipIdCache
.
clear
(
)
;
RemoveUnusedAndResetWebRenderUserData
(
)
;
}
else
{
for
(
auto
iter
=
mLastCanvasDatas
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
RefPtr
<
WebRenderCanvasData
>
canvasData
=
iter
.
Get
(
)
-
>
GetKey
(
)
;
WebRenderCanvasRendererAsync
*
canvas
=
canvasData
-
>
GetCanvasRenderer
(
)
;
canvas
-
>
UpdateCompositableClient
(
)
;
}
}
builder
.
PushBuiltDisplayList
(
mBuiltDisplayList
)
;
WrBridge
(
)
-
>
AddWebRenderParentCommands
(
mParentCommands
)
;
mWidget
-
>
AddWindowOverlayWebRenderCommands
(
WrBridge
(
)
builder
resourceUpdates
)
;
WrBridge
(
)
-
>
ClearReadLocks
(
)
;
if
(
mTransactionIncomplete
)
{
DiscardLocalImages
(
)
;
WrBridge
(
)
-
>
ProcessWebRenderParentCommands
(
)
;
return
false
;
}
if
(
AsyncPanZoomEnabled
(
)
)
{
mScrollData
.
SetFocusTarget
(
mFocusTarget
)
;
mFocusTarget
=
FocusTarget
(
)
;
if
(
mIsFirstPaint
)
{
mScrollData
.
SetIsFirstPaint
(
)
;
mIsFirstPaint
=
false
;
}
mScrollData
.
SetPaintSequenceNumber
(
mPaintSequenceNumber
)
;
}
bool
sync
=
mTarget
!
=
nullptr
;
mLatestTransactionId
=
mTransactionIdAllocator
-
>
GetTransactionId
(
true
)
;
TimeStamp
transactionStart
=
mTransactionIdAllocator
-
>
GetTransactionStart
(
)
;
for
(
const
auto
&
key
:
mImageKeysToDelete
)
{
resourceUpdates
.
DeleteImage
(
key
)
;
}
mImageKeysToDelete
.
Clear
(
)
;
mImageKeysToDelete
.
SwapElements
(
mImageKeysToDeleteLater
)
;
if
(
!
gfxPlatform
:
:
GetPlatform
(
)
-
>
DidRenderingDeviceReset
(
)
)
{
if
(
WrBridge
(
)
-
>
GetSyncObject
(
)
&
&
WrBridge
(
)
-
>
GetSyncObject
(
)
-
>
IsSyncObjectValid
(
)
)
{
WrBridge
(
)
-
>
GetSyncObject
(
)
-
>
Synchronize
(
)
;
}
}
{
AutoProfilerTracing
tracing
(
"
Paint
"
sync
?
"
ForwardDPTransactionSync
"
:
"
ForwardDPTransaction
"
)
;
WrBridge
(
)
-
>
EndTransaction
(
builder
resourceUpdates
size
.
ToUnknownSize
(
)
sync
mLatestTransactionId
mScrollData
transactionStart
)
;
}
MakeSnapshotIfRequired
(
size
)
;
mNeedsComposite
=
false
;
ClearDisplayItemLayers
(
)
;
return
true
;
}
void
WebRenderLayerManager
:
:
SetFocusTarget
(
const
FocusTarget
&
aFocusTarget
)
{
mFocusTarget
=
aFocusTarget
;
}
bool
WebRenderLayerManager
:
:
AsyncPanZoomEnabled
(
)
const
{
return
mWidget
-
>
AsyncPanZoomEnabled
(
)
;
}
void
WebRenderLayerManager
:
:
MakeSnapshotIfRequired
(
LayoutDeviceIntSize
aSize
)
{
if
(
!
mTarget
|
|
aSize
.
IsEmpty
(
)
)
{
return
;
}
RefPtr
<
TextureClient
>
texture
=
TextureClient
:
:
CreateForRawBufferAccess
(
WrBridge
(
)
SurfaceFormat
:
:
B8G8R8A8
aSize
.
ToUnknownSize
(
)
BackendType
:
:
SKIA
TextureFlags
:
:
SNAPSHOT
)
;
if
(
!
texture
)
{
return
;
}
texture
-
>
InitIPDLActor
(
WrBridge
(
)
)
;
if
(
!
texture
-
>
GetIPDLActor
(
)
)
{
return
;
}
IntRect
bounds
=
ToOutsideIntRect
(
mTarget
-
>
GetClipExtents
(
)
)
;
if
(
!
WrBridge
(
)
-
>
SendGetSnapshot
(
texture
-
>
GetIPDLActor
(
)
)
)
{
return
;
}
TextureClientAutoLock
autoLock
(
texture
OpenMode
:
:
OPEN_READ_ONLY
)
;
if
(
!
autoLock
.
Succeeded
(
)
)
{
return
;
}
RefPtr
<
DrawTarget
>
drawTarget
=
texture
-
>
BorrowDrawTarget
(
)
;
if
(
!
drawTarget
|
|
!
drawTarget
-
>
IsValid
(
)
)
{
return
;
}
RefPtr
<
SourceSurface
>
snapshot
=
drawTarget
-
>
Snapshot
(
)
;
Rect
dst
(
bounds
.
x
bounds
.
y
bounds
.
Width
(
)
bounds
.
Height
(
)
)
;
Rect
src
(
0
0
bounds
.
Width
(
)
bounds
.
Height
(
)
)
;
SurfacePattern
pattern
(
snapshot
ExtendMode
:
:
CLAMP
Matrix
:
:
Scaling
(
1
.
0
-
1
.
0
)
.
PostTranslate
(
0
.
0
aSize
.
height
)
)
;
DrawTarget
*
dt
=
mTarget
-
>
GetDrawTarget
(
)
;
MOZ_RELEASE_ASSERT
(
dt
)
;
dt
-
>
FillRect
(
dst
pattern
)
;
mTarget
=
nullptr
;
}
void
WebRenderLayerManager
:
:
AddImageKeyForDiscard
(
wr
:
:
ImageKey
key
)
{
mImageKeysToDeleteLater
.
AppendElement
(
key
)
;
}
void
WebRenderLayerManager
:
:
DiscardImages
(
)
{
wr
:
:
IpcResourceUpdateQueue
resources
(
WrBridge
(
)
-
>
GetShmemAllocator
(
)
)
;
for
(
const
auto
&
key
:
mImageKeysToDeleteLater
)
{
resources
.
DeleteImage
(
key
)
;
}
for
(
const
auto
&
key
:
mImageKeysToDelete
)
{
resources
.
DeleteImage
(
key
)
;
}
mImageKeysToDeleteLater
.
Clear
(
)
;
mImageKeysToDelete
.
Clear
(
)
;
WrBridge
(
)
-
>
UpdateResources
(
resources
)
;
}
void
WebRenderLayerManager
:
:
AddActiveCompositorAnimationId
(
uint64_t
aId
)
{
mActiveCompositorAnimationIds
.
insert
(
aId
)
;
}
void
WebRenderLayerManager
:
:
AddCompositorAnimationsIdForDiscard
(
uint64_t
aId
)
{
if
(
mActiveCompositorAnimationIds
.
erase
(
aId
)
)
{
mDiscardedCompositorAnimationsIds
.
AppendElement
(
aId
)
;
}
}
void
WebRenderLayerManager
:
:
DiscardCompositorAnimations
(
)
{
if
(
WrBridge
(
)
-
>
IPCOpen
(
)
&
&
!
mDiscardedCompositorAnimationsIds
.
IsEmpty
(
)
)
{
WrBridge
(
)
-
>
SendDeleteCompositorAnimations
(
mDiscardedCompositorAnimationsIds
)
;
}
mDiscardedCompositorAnimationsIds
.
Clear
(
)
;
}
void
WebRenderLayerManager
:
:
DiscardLocalImages
(
)
{
mImageKeysToDeleteLater
.
Clear
(
)
;
mImageKeysToDelete
.
Clear
(
)
;
}
void
WebRenderLayerManager
:
:
SetLayerObserverEpoch
(
uint64_t
aLayerObserverEpoch
)
{
if
(
WrBridge
(
)
-
>
IPCOpen
(
)
)
{
WrBridge
(
)
-
>
SendSetLayerObserverEpoch
(
aLayerObserverEpoch
)
;
}
}
void
WebRenderLayerManager
:
:
DidComposite
(
uint64_t
aTransactionId
const
mozilla
:
:
TimeStamp
&
aCompositeStart
const
mozilla
:
:
TimeStamp
&
aCompositeEnd
)
{
MOZ_ASSERT
(
mWidget
)
;
RefPtr
<
WebRenderLayerManager
>
selfRef
=
this
;
if
(
aTransactionId
)
{
nsIWidgetListener
*
listener
=
mWidget
-
>
GetWidgetListener
(
)
;
if
(
listener
)
{
listener
-
>
DidCompositeWindow
(
aTransactionId
aCompositeStart
aCompositeEnd
)
;
}
listener
=
mWidget
-
>
GetAttachedWidgetListener
(
)
;
if
(
listener
)
{
listener
-
>
DidCompositeWindow
(
aTransactionId
aCompositeStart
aCompositeEnd
)
;
}
mTransactionIdAllocator
-
>
NotifyTransactionCompleted
(
aTransactionId
)
;
}
for
(
size_t
i
=
0
;
i
<
mDidCompositeObservers
.
Length
(
)
;
i
+
+
)
{
mDidCompositeObservers
[
i
]
-
>
DidComposite
(
)
;
}
}
void
WebRenderLayerManager
:
:
ClearLayer
(
Layer
*
aLayer
)
{
aLayer
-
>
ClearCachedResources
(
)
;
if
(
aLayer
-
>
GetMaskLayer
(
)
)
{
aLayer
-
>
GetMaskLayer
(
)
-
>
ClearCachedResources
(
)
;
}
for
(
size_t
i
=
0
;
i
<
aLayer
-
>
GetAncestorMaskLayerCount
(
)
;
i
+
+
)
{
aLayer
-
>
GetAncestorMaskLayerAt
(
i
)
-
>
ClearCachedResources
(
)
;
}
for
(
Layer
*
child
=
aLayer
-
>
GetFirstChild
(
)
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
ClearLayer
(
child
)
;
}
}
void
WebRenderLayerManager
:
:
ClearCachedResources
(
Layer
*
aSubtree
)
{
WrBridge
(
)
-
>
BeginClearCachedResources
(
)
;
DiscardImages
(
)
;
WrBridge
(
)
-
>
EndClearCachedResources
(
)
;
}
void
WebRenderLayerManager
:
:
UpdateTextureFactoryIdentifier
(
const
TextureFactoryIdentifier
&
aNewIdentifier
uint64_t
aDeviceResetSeqNo
)
{
WrBridge
(
)
-
>
IdentifyTextureHost
(
aNewIdentifier
)
;
}
TextureFactoryIdentifier
WebRenderLayerManager
:
:
GetTextureFactoryIdentifier
(
)
{
return
WrBridge
(
)
-
>
GetTextureFactoryIdentifier
(
)
;
}
void
WebRenderLayerManager
:
:
AddDidCompositeObserver
(
DidCompositeObserver
*
aObserver
)
{
if
(
!
mDidCompositeObservers
.
Contains
(
aObserver
)
)
{
mDidCompositeObservers
.
AppendElement
(
aObserver
)
;
}
}
void
WebRenderLayerManager
:
:
RemoveDidCompositeObserver
(
DidCompositeObserver
*
aObserver
)
{
mDidCompositeObservers
.
RemoveElement
(
aObserver
)
;
}
void
WebRenderLayerManager
:
:
FlushRendering
(
)
{
CompositorBridgeChild
*
cBridge
=
GetCompositorBridgeChild
(
)
;
if
(
!
cBridge
)
{
return
;
}
MOZ_ASSERT
(
mWidget
)
;
if
(
mWidget
-
>
SynchronouslyRepaintOnResize
(
)
|
|
gfxPrefs
:
:
LayersForceSynchronousResize
(
)
)
{
cBridge
-
>
SendFlushRendering
(
)
;
}
else
{
cBridge
-
>
SendFlushRenderingAsync
(
)
;
}
}
void
WebRenderLayerManager
:
:
WaitOnTransactionProcessed
(
)
{
CompositorBridgeChild
*
bridge
=
GetCompositorBridgeChild
(
)
;
if
(
bridge
)
{
bridge
-
>
SendWaitOnTransactionProcessed
(
)
;
}
}
void
WebRenderLayerManager
:
:
SendInvalidRegion
(
const
nsIntRegion
&
aRegion
)
{
}
void
WebRenderLayerManager
:
:
ScheduleComposite
(
)
{
WrBridge
(
)
-
>
SendForceComposite
(
)
;
}
void
WebRenderLayerManager
:
:
SetRoot
(
Layer
*
aLayer
)
{
MOZ_ASSERT
(
false
)
;
}
bool
WebRenderLayerManager
:
:
SetPendingScrollUpdateForNextTransaction
(
FrameMetrics
:
:
ViewID
aScrollId
const
ScrollUpdateInfo
&
aUpdateInfo
)
{
return
false
;
}
}
}
