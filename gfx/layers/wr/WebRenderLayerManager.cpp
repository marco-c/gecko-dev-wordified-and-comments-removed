#
include
"
WebRenderLayerManager
.
h
"
#
include
"
BasicLayers
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
mozilla
/
gfx
/
DrawEventRecorder
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
IpcResourceUpdateQueue
.
h
"
#
include
"
mozilla
/
layers
/
ScrollingLayersHelper
.
h
"
#
include
"
mozilla
/
layers
/
StackingContextHelper
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
UpdateImageHelper
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
WebRenderCanvasRenderer
.
h
"
namespace
mozilla
{
using
namespace
gfx
;
namespace
layers
{
WebRenderLayerManager
:
:
WebRenderLayerManager
(
nsIWidget
*
aWidget
)
:
mWidget
(
aWidget
)
mLatestTransactionId
(
0
)
mNeedsComposite
(
false
)
mIsFirstPaint
(
false
)
mTarget
(
nullptr
)
mPaintSequenceNumber
(
0
)
mWebRenderCommandBuilder
(
this
)
mLastDisplayListSize
(
0
)
{
MOZ_COUNT_CTOR
(
WebRenderLayerManager
)
;
}
KnowsCompositor
*
WebRenderLayerManager
:
:
AsKnowsCompositor
(
)
{
return
mWrChild
;
}
bool
WebRenderLayerManager
:
:
Initialize
(
PCompositorBridgeChild
*
aCBChild
wr
:
:
PipelineId
aLayersId
TextureFactoryIdentifier
*
aTextureFactoryIdentifier
)
{
MOZ_ASSERT
(
mWrChild
=
=
nullptr
)
;
MOZ_ASSERT
(
aTextureFactoryIdentifier
)
;
LayoutDeviceIntSize
size
=
mWidget
-
>
GetClientSize
(
)
;
TextureFactoryIdentifier
textureFactoryIdentifier
;
wr
:
:
IdNamespace
id_namespace
;
PWebRenderBridgeChild
*
bridge
=
aCBChild
-
>
SendPWebRenderBridgeConstructor
(
aLayersId
size
&
textureFactoryIdentifier
&
id_namespace
)
;
if
(
!
bridge
)
{
gfxCriticalNote
<
<
"
Failed
to
create
WebRenderBridgeChild
.
"
;
return
false
;
}
mWrChild
=
static_cast
<
WebRenderBridgeChild
*
>
(
bridge
)
;
WrBridge
(
)
-
>
SendCreate
(
size
.
ToUnknownSize
(
)
)
;
WrBridge
(
)
-
>
IdentifyTextureHost
(
textureFactoryIdentifier
)
;
WrBridge
(
)
-
>
SetNamespace
(
id_namespace
)
;
*
aTextureFactoryIdentifier
=
textureFactoryIdentifier
;
return
true
;
}
void
WebRenderLayerManager
:
:
Destroy
(
)
{
DoDestroy
(
false
)
;
}
void
WebRenderLayerManager
:
:
DoDestroy
(
bool
aIsSync
)
{
if
(
IsDestroyed
(
)
)
{
return
;
}
LayerManager
:
:
Destroy
(
)
;
if
(
WrBridge
(
)
)
{
mImageKeysToDeleteLater
.
Clear
(
)
;
mImageKeysToDelete
.
Clear
(
)
;
mDiscardedCompositorAnimationsIds
.
Clear
(
)
;
WrBridge
(
)
-
>
Destroy
(
aIsSync
)
;
}
mActiveCompositorAnimationIds
.
clear
(
)
;
mWebRenderCommandBuilder
.
Destroy
(
)
;
if
(
mTransactionIdAllocator
)
{
RefPtr
<
TransactionIdAllocator
>
allocator
=
mTransactionIdAllocator
;
uint64_t
id
=
mLatestTransactionId
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
TransactionIdAllocator
:
:
NotifyTransactionCompleted
"
[
allocator
id
]
(
)
-
>
void
{
allocator
-
>
NotifyTransactionCompleted
(
id
)
;
}
)
;
NS_DispatchToMainThread
(
task
.
forget
(
)
)
;
}
mWidget
=
nullptr
;
}
WebRenderLayerManager
:
:
~
WebRenderLayerManager
(
)
{
Destroy
(
)
;
MOZ_COUNT_DTOR
(
WebRenderLayerManager
)
;
}
CompositorBridgeChild
*
WebRenderLayerManager
:
:
GetCompositorBridgeChild
(
)
{
return
WrBridge
(
)
-
>
GetCompositorBridgeChild
(
)
;
}
int32_t
WebRenderLayerManager
:
:
GetMaxTextureSize
(
)
const
{
return
WrBridge
(
)
-
>
GetMaxTextureSize
(
)
;
}
bool
WebRenderLayerManager
:
:
BeginTransactionWithTarget
(
gfxContext
*
aTarget
)
{
mTarget
=
aTarget
;
return
BeginTransaction
(
)
;
}
bool
WebRenderLayerManager
:
:
BeginTransaction
(
)
{
if
(
!
WrBridge
(
)
-
>
IPCOpen
(
)
)
{
gfxCriticalNote
<
<
"
IPC
Channel
is
already
torn
down
unexpectedly
\
n
"
;
return
false
;
}
+
+
mPaintSequenceNumber
;
if
(
gfxPrefs
:
:
APZTestLoggingEnabled
(
)
)
{
mApzTestData
.
StartNewPaint
(
mPaintSequenceNumber
)
;
}
return
true
;
}
bool
WebRenderLayerManager
:
:
EndEmptyTransaction
(
EndTransactionFlags
aFlags
)
{
WrBridge
(
)
-
>
SendSetFocusTarget
(
mFocusTarget
)
;
if
(
!
(
aFlags
&
EndTransactionFlags
:
:
END_NO_COMPOSITE
)
)
{
ScheduleComposite
(
)
;
}
return
true
;
}
int32_t
PopulateScrollData
(
WebRenderScrollData
&
aTarget
Layer
*
aLayer
)
{
MOZ_ASSERT
(
aLayer
)
;
size_t
index
=
aTarget
.
AddNewLayerData
(
)
;
int32_t
descendants
=
0
;
for
(
Layer
*
child
=
aLayer
-
>
GetLastChild
(
)
;
child
;
child
=
child
-
>
GetPrevSibling
(
)
)
{
descendants
+
=
PopulateScrollData
(
aTarget
child
)
;
}
aTarget
.
GetLayerDataMutable
(
index
)
-
>
Initialize
(
aTarget
aLayer
descendants
)
;
return
descendants
+
1
;
}
void
WebRenderLayerManager
:
:
EndTransaction
(
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
EndTransactionFlags
aFlags
)
{
MOZ_ASSERT
(
false
)
;
}
void
WebRenderLayerManager
:
:
EndTransactionWithoutLayer
(
nsDisplayList
*
aDisplayList
nsDisplayListBuilder
*
aDisplayListBuilder
)
{
MOZ_ASSERT
(
aDisplayList
&
&
aDisplayListBuilder
)
;
WrBridge
(
)
-
>
RemoveExpiredFontKeys
(
)
;
AutoProfilerTracing
tracing
(
"
Paint
"
"
RenderLayers
"
)
;
mTransactionIncomplete
=
false
;
if
(
gfxPrefs
:
:
LayersDump
(
)
)
{
this
-
>
Dump
(
)
;
}
mAnimationReadyTime
=
TimeStamp
:
:
Now
(
)
;
if
(
!
WrBridge
(
)
-
>
BeginTransaction
(
)
)
{
return
;
}
DiscardCompositorAnimations
(
)
;
LayoutDeviceIntSize
size
=
mWidget
-
>
GetClientSize
(
)
;
wr
:
:
LayoutSize
contentSize
{
(
float
)
size
.
width
(
float
)
size
.
height
}
;
wr
:
:
DisplayListBuilder
builder
(
WrBridge
(
)
-
>
GetPipeline
(
)
contentSize
mLastDisplayListSize
)
;
wr
:
:
IpcResourceUpdateQueue
resourceUpdates
(
WrBridge
(
)
-
>
GetShmemAllocator
(
)
)
;
mWebRenderCommandBuilder
.
BuildWebRenderCommands
(
builder
resourceUpdates
aDisplayList
aDisplayListBuilder
mScrollData
contentSize
)
;
mWidget
-
>
AddWindowOverlayWebRenderCommands
(
WrBridge
(
)
builder
resourceUpdates
)
;
WrBridge
(
)
-
>
ClearReadLocks
(
)
;
if
(
mTransactionIncomplete
)
{
DiscardLocalImages
(
)
;
WrBridge
(
)
-
>
ProcessWebRenderParentCommands
(
)
;
return
;
}
if
(
AsyncPanZoomEnabled
(
)
)
{
mScrollData
.
SetFocusTarget
(
mFocusTarget
)
;
mFocusTarget
=
FocusTarget
(
)
;
if
(
mIsFirstPaint
)
{
mScrollData
.
SetIsFirstPaint
(
)
;
mIsFirstPaint
=
false
;
}
mScrollData
.
SetPaintSequenceNumber
(
mPaintSequenceNumber
)
;
}
bool
sync
=
mTarget
!
=
nullptr
;
mLatestTransactionId
=
mTransactionIdAllocator
-
>
GetTransactionId
(
true
)
;
TimeStamp
transactionStart
=
mTransactionIdAllocator
-
>
GetTransactionStart
(
)
;
for
(
const
auto
&
key
:
mImageKeysToDelete
)
{
resourceUpdates
.
DeleteImage
(
key
)
;
}
mImageKeysToDelete
.
Clear
(
)
;
mImageKeysToDelete
.
SwapElements
(
mImageKeysToDeleteLater
)
;
if
(
!
gfxPlatform
:
:
GetPlatform
(
)
-
>
DidRenderingDeviceReset
(
)
)
{
if
(
WrBridge
(
)
-
>
GetSyncObject
(
)
&
&
WrBridge
(
)
-
>
GetSyncObject
(
)
-
>
IsSyncObjectValid
(
)
)
{
WrBridge
(
)
-
>
GetSyncObject
(
)
-
>
Synchronize
(
)
;
}
}
wr
:
:
BuiltDisplayList
dl
;
builder
.
Finalize
(
contentSize
dl
)
;
mLastDisplayListSize
=
dl
.
dl
.
inner
.
capacity
;
{
AutoProfilerTracing
tracing
(
"
Paint
"
sync
?
"
ForwardDPTransactionSync
"
:
"
ForwardDPTransaction
"
)
;
WrBridge
(
)
-
>
EndTransaction
(
contentSize
dl
resourceUpdates
size
.
ToUnknownSize
(
)
sync
mLatestTransactionId
mScrollData
transactionStart
)
;
}
MakeSnapshotIfRequired
(
size
)
;
mNeedsComposite
=
false
;
ClearDisplayItemLayers
(
)
;
}
void
WebRenderLayerManager
:
:
SetFocusTarget
(
const
FocusTarget
&
aFocusTarget
)
{
mFocusTarget
=
aFocusTarget
;
}
bool
WebRenderLayerManager
:
:
AsyncPanZoomEnabled
(
)
const
{
return
mWidget
-
>
AsyncPanZoomEnabled
(
)
;
}
void
WebRenderLayerManager
:
:
MakeSnapshotIfRequired
(
LayoutDeviceIntSize
aSize
)
{
if
(
!
mTarget
|
|
aSize
.
IsEmpty
(
)
)
{
return
;
}
RefPtr
<
TextureClient
>
texture
=
TextureClient
:
:
CreateForRawBufferAccess
(
WrBridge
(
)
SurfaceFormat
:
:
B8G8R8A8
aSize
.
ToUnknownSize
(
)
BackendType
:
:
SKIA
TextureFlags
:
:
SNAPSHOT
)
;
if
(
!
texture
)
{
return
;
}
texture
-
>
InitIPDLActor
(
WrBridge
(
)
)
;
if
(
!
texture
-
>
GetIPDLActor
(
)
)
{
return
;
}
IntRect
bounds
=
ToOutsideIntRect
(
mTarget
-
>
GetClipExtents
(
)
)
;
if
(
!
WrBridge
(
)
-
>
SendGetSnapshot
(
texture
-
>
GetIPDLActor
(
)
)
)
{
return
;
}
TextureClientAutoLock
autoLock
(
texture
OpenMode
:
:
OPEN_READ_ONLY
)
;
if
(
!
autoLock
.
Succeeded
(
)
)
{
return
;
}
RefPtr
<
DrawTarget
>
drawTarget
=
texture
-
>
BorrowDrawTarget
(
)
;
if
(
!
drawTarget
|
|
!
drawTarget
-
>
IsValid
(
)
)
{
return
;
}
RefPtr
<
SourceSurface
>
snapshot
=
drawTarget
-
>
Snapshot
(
)
;
Rect
dst
(
bounds
.
x
bounds
.
y
bounds
.
Width
(
)
bounds
.
Height
(
)
)
;
Rect
src
(
0
0
bounds
.
Width
(
)
bounds
.
Height
(
)
)
;
SurfacePattern
pattern
(
snapshot
ExtendMode
:
:
CLAMP
Matrix
:
:
Scaling
(
1
.
0
-
1
.
0
)
.
PostTranslate
(
0
.
0
aSize
.
height
)
)
;
DrawTarget
*
dt
=
mTarget
-
>
GetDrawTarget
(
)
;
MOZ_RELEASE_ASSERT
(
dt
)
;
dt
-
>
FillRect
(
dst
pattern
)
;
mTarget
=
nullptr
;
}
void
WebRenderLayerManager
:
:
AddImageKeyForDiscard
(
wr
:
:
ImageKey
key
)
{
mImageKeysToDeleteLater
.
AppendElement
(
key
)
;
}
void
WebRenderLayerManager
:
:
DiscardImages
(
)
{
wr
:
:
IpcResourceUpdateQueue
resources
(
WrBridge
(
)
-
>
GetShmemAllocator
(
)
)
;
for
(
const
auto
&
key
:
mImageKeysToDeleteLater
)
{
resources
.
DeleteImage
(
key
)
;
}
for
(
const
auto
&
key
:
mImageKeysToDelete
)
{
resources
.
DeleteImage
(
key
)
;
}
mImageKeysToDeleteLater
.
Clear
(
)
;
mImageKeysToDelete
.
Clear
(
)
;
WrBridge
(
)
-
>
UpdateResources
(
resources
)
;
}
void
WebRenderLayerManager
:
:
AddActiveCompositorAnimationId
(
uint64_t
aId
)
{
mActiveCompositorAnimationIds
.
insert
(
aId
)
;
}
void
WebRenderLayerManager
:
:
AddCompositorAnimationsIdForDiscard
(
uint64_t
aId
)
{
if
(
mActiveCompositorAnimationIds
.
erase
(
aId
)
)
{
mDiscardedCompositorAnimationsIds
.
AppendElement
(
aId
)
;
}
}
void
WebRenderLayerManager
:
:
DiscardCompositorAnimations
(
)
{
if
(
WrBridge
(
)
-
>
IPCOpen
(
)
&
&
!
mDiscardedCompositorAnimationsIds
.
IsEmpty
(
)
)
{
WrBridge
(
)
-
>
SendDeleteCompositorAnimations
(
mDiscardedCompositorAnimationsIds
)
;
}
mDiscardedCompositorAnimationsIds
.
Clear
(
)
;
}
void
WebRenderLayerManager
:
:
DiscardLocalImages
(
)
{
mImageKeysToDeleteLater
.
Clear
(
)
;
mImageKeysToDelete
.
Clear
(
)
;
}
void
WebRenderLayerManager
:
:
SetLayerObserverEpoch
(
uint64_t
aLayerObserverEpoch
)
{
if
(
WrBridge
(
)
-
>
IPCOpen
(
)
)
{
WrBridge
(
)
-
>
SendSetLayerObserverEpoch
(
aLayerObserverEpoch
)
;
}
}
void
WebRenderLayerManager
:
:
DidComposite
(
uint64_t
aTransactionId
const
mozilla
:
:
TimeStamp
&
aCompositeStart
const
mozilla
:
:
TimeStamp
&
aCompositeEnd
)
{
MOZ_ASSERT
(
mWidget
)
;
RefPtr
<
WebRenderLayerManager
>
selfRef
=
this
;
if
(
aTransactionId
)
{
nsIWidgetListener
*
listener
=
mWidget
-
>
GetWidgetListener
(
)
;
if
(
listener
)
{
listener
-
>
DidCompositeWindow
(
aTransactionId
aCompositeStart
aCompositeEnd
)
;
}
listener
=
mWidget
-
>
GetAttachedWidgetListener
(
)
;
if
(
listener
)
{
listener
-
>
DidCompositeWindow
(
aTransactionId
aCompositeStart
aCompositeEnd
)
;
}
mTransactionIdAllocator
-
>
NotifyTransactionCompleted
(
aTransactionId
)
;
}
for
(
size_t
i
=
0
;
i
<
mDidCompositeObservers
.
Length
(
)
;
i
+
+
)
{
mDidCompositeObservers
[
i
]
-
>
DidComposite
(
)
;
}
}
void
WebRenderLayerManager
:
:
ClearLayer
(
Layer
*
aLayer
)
{
aLayer
-
>
ClearCachedResources
(
)
;
if
(
aLayer
-
>
GetMaskLayer
(
)
)
{
aLayer
-
>
GetMaskLayer
(
)
-
>
ClearCachedResources
(
)
;
}
for
(
size_t
i
=
0
;
i
<
aLayer
-
>
GetAncestorMaskLayerCount
(
)
;
i
+
+
)
{
aLayer
-
>
GetAncestorMaskLayerAt
(
i
)
-
>
ClearCachedResources
(
)
;
}
for
(
Layer
*
child
=
aLayer
-
>
GetFirstChild
(
)
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
ClearLayer
(
child
)
;
}
}
void
WebRenderLayerManager
:
:
ClearCachedResources
(
Layer
*
aSubtree
)
{
WrBridge
(
)
-
>
BeginClearCachedResources
(
)
;
DiscardImages
(
)
;
WrBridge
(
)
-
>
EndClearCachedResources
(
)
;
}
void
WebRenderLayerManager
:
:
UpdateTextureFactoryIdentifier
(
const
TextureFactoryIdentifier
&
aNewIdentifier
uint64_t
aDeviceResetSeqNo
)
{
WrBridge
(
)
-
>
IdentifyTextureHost
(
aNewIdentifier
)
;
}
TextureFactoryIdentifier
WebRenderLayerManager
:
:
GetTextureFactoryIdentifier
(
)
{
return
WrBridge
(
)
-
>
GetTextureFactoryIdentifier
(
)
;
}
void
WebRenderLayerManager
:
:
AddDidCompositeObserver
(
DidCompositeObserver
*
aObserver
)
{
if
(
!
mDidCompositeObservers
.
Contains
(
aObserver
)
)
{
mDidCompositeObservers
.
AppendElement
(
aObserver
)
;
}
}
void
WebRenderLayerManager
:
:
RemoveDidCompositeObserver
(
DidCompositeObserver
*
aObserver
)
{
mDidCompositeObservers
.
RemoveElement
(
aObserver
)
;
}
void
WebRenderLayerManager
:
:
FlushRendering
(
)
{
CompositorBridgeChild
*
cBridge
=
GetCompositorBridgeChild
(
)
;
if
(
!
cBridge
)
{
return
;
}
MOZ_ASSERT
(
mWidget
)
;
if
(
mWidget
-
>
SynchronouslyRepaintOnResize
(
)
|
|
gfxPrefs
:
:
LayersForceSynchronousResize
(
)
)
{
cBridge
-
>
SendFlushRendering
(
)
;
}
else
{
cBridge
-
>
SendFlushRenderingAsync
(
)
;
}
}
void
WebRenderLayerManager
:
:
WaitOnTransactionProcessed
(
)
{
CompositorBridgeChild
*
bridge
=
GetCompositorBridgeChild
(
)
;
if
(
bridge
)
{
bridge
-
>
SendWaitOnTransactionProcessed
(
)
;
}
}
void
WebRenderLayerManager
:
:
SendInvalidRegion
(
const
nsIntRegion
&
aRegion
)
{
}
void
WebRenderLayerManager
:
:
ScheduleComposite
(
)
{
WrBridge
(
)
-
>
SendForceComposite
(
)
;
}
void
WebRenderLayerManager
:
:
SetRoot
(
Layer
*
aLayer
)
{
MOZ_ASSERT
(
false
)
;
}
bool
WebRenderLayerManager
:
:
SetPendingScrollUpdateForNextTransaction
(
FrameMetrics
:
:
ViewID
aScrollId
const
ScrollUpdateInfo
&
aUpdateInfo
)
{
return
false
;
}
}
}
