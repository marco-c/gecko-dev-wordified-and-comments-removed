#
include
"
WebRenderLayerManager
.
h
"
#
include
"
BasicLayers
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
mozilla
/
dom
/
TabChild
.
h
"
#
include
"
mozilla
/
dom
/
TabGroup
.
h
"
#
include
"
mozilla
/
gfx
/
DrawEventRecorder
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
StackingContextHelper
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
UpdateImageHelper
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
WebRenderCanvasRenderer
.
h
"
#
ifdef
XP_WIN
#
include
"
gfxDWriteFonts
.
h
"
#
endif
namespace
mozilla
{
using
namespace
gfx
;
namespace
layers
{
WebRenderLayerManager
:
:
WebRenderLayerManager
(
nsIWidget
*
aWidget
)
:
mWidget
(
aWidget
)
mLatestTransactionId
{
0
}
mWindowOverlayChanged
(
false
)
mNeedsComposite
(
false
)
mIsFirstPaint
(
false
)
mTarget
(
nullptr
)
mPaintSequenceNumber
(
0
)
mWebRenderCommandBuilder
(
this
)
mLastDisplayListSize
(
0
)
mStateManager
(
this
)
{
MOZ_COUNT_CTOR
(
WebRenderLayerManager
)
;
}
KnowsCompositor
*
WebRenderLayerManager
:
:
AsKnowsCompositor
(
)
{
return
mWrChild
;
}
bool
WebRenderLayerManager
:
:
Initialize
(
PCompositorBridgeChild
*
aCBChild
wr
:
:
PipelineId
aLayersId
TextureFactoryIdentifier
*
aTextureFactoryIdentifier
)
{
MOZ_ASSERT
(
mWrChild
=
=
nullptr
)
;
MOZ_ASSERT
(
aTextureFactoryIdentifier
)
;
LayoutDeviceIntSize
size
=
mWidget
-
>
GetClientSize
(
)
;
PWebRenderBridgeChild
*
bridge
=
aCBChild
-
>
SendPWebRenderBridgeConstructor
(
aLayersId
size
)
;
if
(
!
bridge
)
{
gfxCriticalNote
<
<
"
Failed
to
create
WebRenderBridgeChild
.
"
;
return
false
;
}
TextureFactoryIdentifier
textureFactoryIdentifier
;
wr
:
:
MaybeIdNamespace
idNamespace
;
bridge
-
>
SendEnsureConnected
(
&
textureFactoryIdentifier
&
idNamespace
)
;
if
(
textureFactoryIdentifier
.
mParentBackend
=
=
LayersBackend
:
:
LAYERS_NONE
|
|
idNamespace
.
isNothing
(
)
)
{
gfxCriticalNote
<
<
"
Failed
to
connect
WebRenderBridgeChild
.
"
;
return
false
;
}
mWrChild
=
static_cast
<
WebRenderBridgeChild
*
>
(
bridge
)
;
WrBridge
(
)
-
>
SetWebRenderLayerManager
(
this
)
;
WrBridge
(
)
-
>
IdentifyTextureHost
(
textureFactoryIdentifier
)
;
WrBridge
(
)
-
>
SetNamespace
(
idNamespace
.
ref
(
)
)
;
*
aTextureFactoryIdentifier
=
textureFactoryIdentifier
;
return
true
;
}
void
WebRenderLayerManager
:
:
Destroy
(
)
{
DoDestroy
(
false
)
;
}
void
WebRenderLayerManager
:
:
DoDestroy
(
bool
aIsSync
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
IsDestroyed
(
)
)
{
return
;
}
LayerManager
:
:
Destroy
(
)
;
mStateManager
.
Destroy
(
)
;
if
(
WrBridge
(
)
)
{
WrBridge
(
)
-
>
Destroy
(
aIsSync
)
;
}
mWebRenderCommandBuilder
.
Destroy
(
)
;
if
(
mTransactionIdAllocator
)
{
RefPtr
<
TransactionIdAllocator
>
allocator
=
mTransactionIdAllocator
;
TransactionId
id
=
mLatestTransactionId
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
TransactionIdAllocator
:
:
NotifyTransactionCompleted
"
[
allocator
id
]
(
)
-
>
void
{
allocator
-
>
NotifyTransactionCompleted
(
id
)
;
}
)
;
NS_DispatchToMainThread
(
task
.
forget
(
)
)
;
}
mWidget
=
nullptr
;
}
WebRenderLayerManager
:
:
~
WebRenderLayerManager
(
)
{
Destroy
(
)
;
MOZ_COUNT_DTOR
(
WebRenderLayerManager
)
;
}
CompositorBridgeChild
*
WebRenderLayerManager
:
:
GetCompositorBridgeChild
(
)
{
return
WrBridge
(
)
-
>
GetCompositorBridgeChild
(
)
;
}
uint32_t
WebRenderLayerManager
:
:
StartFrameTimeRecording
(
int32_t
aBufferSize
)
{
CompositorBridgeChild
*
renderer
=
GetCompositorBridgeChild
(
)
;
if
(
renderer
)
{
uint32_t
startIndex
;
renderer
-
>
SendStartFrameTimeRecording
(
aBufferSize
&
startIndex
)
;
return
startIndex
;
}
return
-
1
;
}
void
WebRenderLayerManager
:
:
StopFrameTimeRecording
(
uint32_t
aStartIndex
nsTArray
<
float
>
&
aFrameIntervals
)
{
CompositorBridgeChild
*
renderer
=
GetCompositorBridgeChild
(
)
;
if
(
renderer
)
{
renderer
-
>
SendStopFrameTimeRecording
(
aStartIndex
&
aFrameIntervals
)
;
}
}
bool
WebRenderLayerManager
:
:
BeginTransactionWithTarget
(
gfxContext
*
aTarget
const
nsCString
&
aURL
)
{
mTarget
=
aTarget
;
return
BeginTransaction
(
aURL
)
;
}
bool
WebRenderLayerManager
:
:
BeginTransaction
(
const
nsCString
&
aURL
)
{
if
(
!
WrBridge
(
)
-
>
IPCOpen
(
)
)
{
gfxCriticalNote
<
<
"
IPC
Channel
is
already
torn
down
unexpectedly
\
n
"
;
return
false
;
}
mTransactionStart
=
TimeStamp
:
:
Now
(
)
;
mURL
=
aURL
;
+
+
mPaintSequenceNumber
;
if
(
gfxPrefs
:
:
APZTestLoggingEnabled
(
)
)
{
mApzTestData
.
StartNewPaint
(
mPaintSequenceNumber
)
;
}
return
true
;
}
bool
WebRenderLayerManager
:
:
EndEmptyTransaction
(
EndTransactionFlags
aFlags
)
{
if
(
mWindowOverlayChanged
)
{
return
false
;
}
mAnimationReadyTime
=
TimeStamp
:
:
Now
(
)
;
mLatestTransactionId
=
mTransactionIdAllocator
-
>
GetTransactionId
(
true
)
;
if
(
aFlags
&
EndTransactionFlags
:
:
END_NO_COMPOSITE
&
&
!
mWebRenderCommandBuilder
.
NeedsEmptyTransaction
(
)
&
&
mPendingScrollUpdates
.
empty
(
)
)
{
MOZ_ASSERT
(
!
mTarget
)
;
WrBridge
(
)
-
>
SendSetFocusTarget
(
mFocusTarget
)
;
mTransactionIdAllocator
-
>
RevokeTransactionId
(
mLatestTransactionId
)
;
return
true
;
}
LayoutDeviceIntSize
size
=
mWidget
-
>
GetClientSize
(
)
;
WrBridge
(
)
-
>
BeginTransaction
(
)
;
mWebRenderCommandBuilder
.
EmptyTransaction
(
)
;
TimeStamp
refreshStart
=
mTransactionIdAllocator
-
>
GetTransactionStart
(
)
;
if
(
!
refreshStart
)
{
refreshStart
=
mTransactionStart
;
}
if
(
!
gfxPlatform
:
:
GetPlatform
(
)
-
>
DidRenderingDeviceReset
(
)
)
{
if
(
WrBridge
(
)
-
>
GetSyncObject
(
)
&
&
WrBridge
(
)
-
>
GetSyncObject
(
)
-
>
IsSyncObjectValid
(
)
)
{
WrBridge
(
)
-
>
GetSyncObject
(
)
-
>
Synchronize
(
)
;
}
}
Maybe
<
wr
:
:
IpcResourceUpdateQueue
>
nothing
;
WrBridge
(
)
-
>
EndEmptyTransaction
(
mFocusTarget
mPendingScrollUpdates
mStateManager
.
mAsyncResourceUpdates
mPaintSequenceNumber
mLatestTransactionId
mTransactionIdAllocator
-
>
GetVsyncId
(
)
mTransactionIdAllocator
-
>
GetVsyncStart
(
)
refreshStart
mTransactionStart
mURL
)
;
ClearPendingScrollInfoUpdate
(
)
;
mTransactionStart
=
TimeStamp
(
)
;
MakeSnapshotIfRequired
(
size
)
;
return
true
;
}
void
WebRenderLayerManager
:
:
EndTransaction
(
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
EndTransactionFlags
aFlags
)
{
MOZ_ASSERT
(
false
)
;
}
void
WebRenderLayerManager
:
:
EndTransactionWithoutLayer
(
nsDisplayList
*
aDisplayList
nsDisplayListBuilder
*
aDisplayListBuilder
const
nsTArray
<
wr
:
:
WrFilterOp
>
&
aFilters
WebRenderBackgroundData
*
aBackground
)
{
AUTO_PROFILER_TRACING
(
"
Paint
"
"
RenderLayers
"
)
;
mAnimationReadyTime
=
TimeStamp
:
:
Now
(
)
;
WrBridge
(
)
-
>
BeginTransaction
(
)
;
LayoutDeviceIntSize
size
=
mWidget
-
>
GetClientSize
(
)
;
wr
:
:
LayoutSize
contentSize
{
(
float
)
size
.
width
(
float
)
size
.
height
}
;
wr
:
:
DisplayListBuilder
builder
(
WrBridge
(
)
-
>
GetPipeline
(
)
contentSize
mLastDisplayListSize
)
;
wr
:
:
IpcResourceUpdateQueue
resourceUpdates
(
WrBridge
(
)
)
;
wr
:
:
usize
builderDumpIndex
=
0
;
bool
containsSVGGroup
=
false
;
bool
dumpEnabled
=
mWebRenderCommandBuilder
.
ShouldDumpDisplayList
(
aDisplayListBuilder
)
;
if
(
dumpEnabled
)
{
printf_stderr
(
"
-
-
WebRender
display
list
build
-
-
\
n
"
)
;
}
if
(
aDisplayList
)
{
MOZ_ASSERT
(
aDisplayListBuilder
&
&
!
aBackground
)
;
PaintTelemetry
:
:
AutoRecord
record
(
PaintTelemetry
:
:
Metric
:
:
Layerization
)
;
mWebRenderCommandBuilder
.
BuildWebRenderCommands
(
builder
resourceUpdates
aDisplayList
aDisplayListBuilder
mScrollData
contentSize
aFilters
)
;
builderDumpIndex
=
mWebRenderCommandBuilder
.
GetBuilderDumpIndex
(
)
;
containsSVGGroup
=
mWebRenderCommandBuilder
.
GetContainsSVGGroup
(
)
;
}
else
{
MOZ_ASSERT
(
!
aDisplayListBuilder
&
&
aBackground
)
;
aBackground
-
>
AddWebRenderCommands
(
builder
)
;
if
(
dumpEnabled
)
{
printf_stderr
(
"
(
no
display
list
;
background
only
)
\
n
"
)
;
builderDumpIndex
=
builder
.
Dump
(
1
Some
(
builderDumpIndex
)
Nothing
(
)
)
;
}
}
mWidget
-
>
AddWindowOverlayWebRenderCommands
(
WrBridge
(
)
builder
resourceUpdates
)
;
mWindowOverlayChanged
=
false
;
if
(
dumpEnabled
)
{
printf_stderr
(
"
(
window
overlay
)
\
n
"
)
;
Unused
<
<
builder
.
Dump
(
1
Some
(
builderDumpIndex
)
Nothing
(
)
)
;
}
if
(
AsyncPanZoomEnabled
(
)
)
{
mScrollData
.
SetFocusTarget
(
mFocusTarget
)
;
mFocusTarget
=
FocusTarget
(
)
;
if
(
mIsFirstPaint
)
{
mScrollData
.
SetIsFirstPaint
(
)
;
mIsFirstPaint
=
false
;
}
mScrollData
.
SetPaintSequenceNumber
(
mPaintSequenceNumber
)
;
}
ClearPendingScrollInfoUpdate
(
)
;
mLatestTransactionId
=
mTransactionIdAllocator
-
>
GetTransactionId
(
true
)
;
TimeStamp
refreshStart
=
mTransactionIdAllocator
-
>
GetTransactionStart
(
)
;
if
(
!
refreshStart
)
{
refreshStart
=
mTransactionStart
;
}
if
(
mStateManager
.
mAsyncResourceUpdates
)
{
if
(
resourceUpdates
.
IsEmpty
(
)
)
{
resourceUpdates
=
std
:
:
move
(
mStateManager
.
mAsyncResourceUpdates
.
ref
(
)
)
;
}
else
{
WrBridge
(
)
-
>
UpdateResources
(
mStateManager
.
mAsyncResourceUpdates
.
ref
(
)
)
;
}
mStateManager
.
mAsyncResourceUpdates
.
reset
(
)
;
}
mStateManager
.
DiscardImagesInTransaction
(
resourceUpdates
)
;
WrBridge
(
)
-
>
RemoveExpiredFontKeys
(
resourceUpdates
)
;
if
(
!
gfxPlatform
:
:
GetPlatform
(
)
-
>
DidRenderingDeviceReset
(
)
)
{
if
(
WrBridge
(
)
-
>
GetSyncObject
(
)
&
&
WrBridge
(
)
-
>
GetSyncObject
(
)
-
>
IsSyncObjectValid
(
)
)
{
WrBridge
(
)
-
>
GetSyncObject
(
)
-
>
Synchronize
(
)
;
}
}
wr
:
:
BuiltDisplayList
dl
;
builder
.
Finalize
(
contentSize
dl
)
;
mLastDisplayListSize
=
dl
.
dl
.
inner
.
capacity
;
{
AUTO_PROFILER_TRACING
(
"
Paint
"
"
ForwardDPTransaction
"
)
;
WrBridge
(
)
-
>
EndTransaction
(
contentSize
dl
resourceUpdates
size
.
ToUnknownSize
(
)
mLatestTransactionId
mScrollData
containsSVGGroup
mTransactionIdAllocator
-
>
GetVsyncId
(
)
mTransactionIdAllocator
-
>
GetVsyncStart
(
)
refreshStart
mTransactionStart
mURL
)
;
}
mStateManager
.
DiscardCompositorAnimations
(
)
;
mTransactionStart
=
TimeStamp
(
)
;
MakeSnapshotIfRequired
(
size
)
;
mNeedsComposite
=
false
;
}
void
WebRenderLayerManager
:
:
SetFocusTarget
(
const
FocusTarget
&
aFocusTarget
)
{
mFocusTarget
=
aFocusTarget
;
}
bool
WebRenderLayerManager
:
:
AsyncPanZoomEnabled
(
)
const
{
return
mWidget
-
>
AsyncPanZoomEnabled
(
)
;
}
void
WebRenderLayerManager
:
:
MakeSnapshotIfRequired
(
LayoutDeviceIntSize
aSize
)
{
if
(
!
mTarget
|
|
aSize
.
IsEmpty
(
)
)
{
return
;
}
RefPtr
<
TextureClient
>
texture
=
TextureClient
:
:
CreateForRawBufferAccess
(
WrBridge
(
)
SurfaceFormat
:
:
B8G8R8A8
aSize
.
ToUnknownSize
(
)
BackendType
:
:
SKIA
TextureFlags
:
:
SNAPSHOT
)
;
if
(
!
texture
)
{
return
;
}
texture
-
>
InitIPDLActor
(
WrBridge
(
)
)
;
if
(
!
texture
-
>
GetIPDLActor
(
)
)
{
return
;
}
IntRect
bounds
=
ToOutsideIntRect
(
mTarget
-
>
GetClipExtents
(
)
)
;
if
(
!
WrBridge
(
)
-
>
SendGetSnapshot
(
texture
-
>
GetIPDLActor
(
)
)
)
{
return
;
}
TextureClientAutoLock
autoLock
(
texture
OpenMode
:
:
OPEN_READ_ONLY
)
;
if
(
!
autoLock
.
Succeeded
(
)
)
{
return
;
}
RefPtr
<
DrawTarget
>
drawTarget
=
texture
-
>
BorrowDrawTarget
(
)
;
if
(
!
drawTarget
|
|
!
drawTarget
-
>
IsValid
(
)
)
{
return
;
}
RefPtr
<
SourceSurface
>
snapshot
=
drawTarget
-
>
Snapshot
(
)
;
Rect
dst
(
bounds
.
X
(
)
bounds
.
Y
(
)
bounds
.
Width
(
)
bounds
.
Height
(
)
)
;
Rect
src
(
0
0
bounds
.
Width
(
)
bounds
.
Height
(
)
)
;
SurfacePattern
pattern
(
snapshot
ExtendMode
:
:
CLAMP
Matrix
:
:
Scaling
(
1
.
0
-
1
.
0
)
.
PostTranslate
(
0
.
0
aSize
.
height
)
)
;
DrawTarget
*
dt
=
mTarget
-
>
GetDrawTarget
(
)
;
MOZ_RELEASE_ASSERT
(
dt
)
;
dt
-
>
FillRect
(
dst
pattern
)
;
mTarget
=
nullptr
;
}
void
WebRenderLayerManager
:
:
DiscardImages
(
)
{
wr
:
:
IpcResourceUpdateQueue
resources
(
WrBridge
(
)
)
;
mStateManager
.
DiscardImagesInTransaction
(
resources
)
;
WrBridge
(
)
-
>
UpdateResources
(
resources
)
;
}
void
WebRenderLayerManager
:
:
DiscardLocalImages
(
)
{
mStateManager
.
DiscardLocalImages
(
)
;
}
void
WebRenderLayerManager
:
:
SetLayersObserverEpoch
(
LayersObserverEpoch
aEpoch
)
{
if
(
WrBridge
(
)
-
>
IPCOpen
(
)
)
{
WrBridge
(
)
-
>
SendSetLayersObserverEpoch
(
aEpoch
)
;
}
}
void
WebRenderLayerManager
:
:
DidComposite
(
TransactionId
aTransactionId
const
mozilla
:
:
TimeStamp
&
aCompositeStart
const
mozilla
:
:
TimeStamp
&
aCompositeEnd
)
{
MOZ_ASSERT
(
mWidget
)
;
RefPtr
<
WebRenderLayerManager
>
selfRef
=
this
;
mPayload
.
Clear
(
)
;
if
(
aTransactionId
.
IsValid
(
)
)
{
nsIWidgetListener
*
listener
=
mWidget
-
>
GetWidgetListener
(
)
;
if
(
listener
)
{
listener
-
>
DidCompositeWindow
(
aTransactionId
aCompositeStart
aCompositeEnd
)
;
}
listener
=
mWidget
-
>
GetAttachedWidgetListener
(
)
;
if
(
listener
)
{
listener
-
>
DidCompositeWindow
(
aTransactionId
aCompositeStart
aCompositeEnd
)
;
}
if
(
mTransactionIdAllocator
)
{
mTransactionIdAllocator
-
>
NotifyTransactionCompleted
(
aTransactionId
)
;
}
}
for
(
size_t
i
=
0
;
i
<
mDidCompositeObservers
.
Length
(
)
;
i
+
+
)
{
mDidCompositeObservers
[
i
]
-
>
DidComposite
(
)
;
}
}
void
WebRenderLayerManager
:
:
ClearCachedResources
(
Layer
*
aSubtree
)
{
WrBridge
(
)
-
>
BeginClearCachedResources
(
)
;
mWebRenderCommandBuilder
.
ClearCachedResources
(
)
;
DiscardImages
(
)
;
mStateManager
.
ClearCachedResources
(
)
;
WrBridge
(
)
-
>
EndClearCachedResources
(
)
;
}
void
WebRenderLayerManager
:
:
WrUpdated
(
)
{
ClearAsyncAnimations
(
)
;
mWebRenderCommandBuilder
.
ClearCachedResources
(
)
;
DiscardLocalImages
(
)
;
if
(
mWidget
)
{
if
(
dom
:
:
TabChild
*
tabChild
=
mWidget
-
>
GetOwningTabChild
(
)
)
{
tabChild
-
>
SchedulePaint
(
)
;
}
}
}
dom
:
:
TabGroup
*
WebRenderLayerManager
:
:
GetTabGroup
(
)
{
if
(
mWidget
)
{
if
(
dom
:
:
TabChild
*
tabChild
=
mWidget
-
>
GetOwningTabChild
(
)
)
{
return
tabChild
-
>
TabGroup
(
)
;
}
}
return
nullptr
;
}
void
WebRenderLayerManager
:
:
UpdateTextureFactoryIdentifier
(
const
TextureFactoryIdentifier
&
aNewIdentifier
)
{
WrBridge
(
)
-
>
IdentifyTextureHost
(
aNewIdentifier
)
;
}
TextureFactoryIdentifier
WebRenderLayerManager
:
:
GetTextureFactoryIdentifier
(
)
{
return
WrBridge
(
)
-
>
GetTextureFactoryIdentifier
(
)
;
}
void
WebRenderLayerManager
:
:
SetTransactionIdAllocator
(
TransactionIdAllocator
*
aAllocator
)
{
if
(
mTransactionIdAllocator
&
&
(
aAllocator
!
=
mTransactionIdAllocator
)
)
{
mTransactionIdAllocator
-
>
ClearPendingTransactions
(
)
;
if
(
aAllocator
)
{
aAllocator
-
>
ResetInitialTransactionId
(
mTransactionIdAllocator
-
>
LastTransactionId
(
)
)
;
}
}
mTransactionIdAllocator
=
aAllocator
;
}
TransactionId
WebRenderLayerManager
:
:
GetLastTransactionId
(
)
{
return
mLatestTransactionId
;
}
void
WebRenderLayerManager
:
:
AddDidCompositeObserver
(
DidCompositeObserver
*
aObserver
)
{
if
(
!
mDidCompositeObservers
.
Contains
(
aObserver
)
)
{
mDidCompositeObservers
.
AppendElement
(
aObserver
)
;
}
}
void
WebRenderLayerManager
:
:
RemoveDidCompositeObserver
(
DidCompositeObserver
*
aObserver
)
{
mDidCompositeObservers
.
RemoveElement
(
aObserver
)
;
}
void
WebRenderLayerManager
:
:
FlushRendering
(
)
{
CompositorBridgeChild
*
cBridge
=
GetCompositorBridgeChild
(
)
;
if
(
!
cBridge
)
{
return
;
}
MOZ_ASSERT
(
mWidget
)
;
bool
resizing
=
mWidget
&
&
mWidget
-
>
IsResizingNativeWidget
(
)
.
valueOr
(
true
)
;
if
(
WrBridge
(
)
-
>
GetCompositorUseDComp
(
)
&
&
!
resizing
)
{
cBridge
-
>
SendFlushRenderingAsync
(
)
;
}
else
if
(
mWidget
-
>
SynchronouslyRepaintOnResize
(
)
|
|
gfxPrefs
:
:
LayersForceSynchronousResize
(
)
)
{
cBridge
-
>
SendFlushRendering
(
)
;
}
else
{
cBridge
-
>
SendFlushRenderingAsync
(
)
;
}
}
void
WebRenderLayerManager
:
:
WaitOnTransactionProcessed
(
)
{
CompositorBridgeChild
*
bridge
=
GetCompositorBridgeChild
(
)
;
if
(
bridge
)
{
bridge
-
>
SendWaitOnTransactionProcessed
(
)
;
}
}
void
WebRenderLayerManager
:
:
SendInvalidRegion
(
const
nsIntRegion
&
aRegion
)
{
}
void
WebRenderLayerManager
:
:
ScheduleComposite
(
)
{
WrBridge
(
)
-
>
SendScheduleComposite
(
)
;
}
void
WebRenderLayerManager
:
:
SetRoot
(
Layer
*
aLayer
)
{
MOZ_ASSERT
(
false
)
;
}
already_AddRefed
<
PersistentBufferProvider
>
WebRenderLayerManager
:
:
CreatePersistentBufferProvider
(
const
gfx
:
:
IntSize
&
aSize
gfx
:
:
SurfaceFormat
aFormat
)
{
gfxPlatform
:
:
GetPlatform
(
)
-
>
EnsureDevicesInitialized
(
)
;
if
(
gfxPrefs
:
:
PersistentBufferProviderSharedEnabled
(
)
)
{
RefPtr
<
PersistentBufferProvider
>
provider
=
PersistentBufferProviderShared
:
:
Create
(
aSize
aFormat
AsKnowsCompositor
(
)
)
;
if
(
provider
)
{
return
provider
.
forget
(
)
;
}
}
return
LayerManager
:
:
CreatePersistentBufferProvider
(
aSize
aFormat
)
;
}
void
WebRenderLayerManager
:
:
ClearAsyncAnimations
(
)
{
mStateManager
.
ClearAsyncAnimations
(
)
;
}
void
WebRenderLayerManager
:
:
WrReleasedImages
(
const
nsTArray
<
wr
:
:
ExternalImageKeyPair
>
&
aPairs
)
{
mStateManager
.
WrReleasedImages
(
aPairs
)
;
}
}
}
