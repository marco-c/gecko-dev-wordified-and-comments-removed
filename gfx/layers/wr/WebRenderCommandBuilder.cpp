#
include
"
WebRenderCommandBuilder
.
h
"
#
include
"
BasicLayers
.
h
"
#
include
"
mozilla
/
AutoRestore
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
ClipManager
.
h
"
#
include
"
mozilla
/
layers
/
ImageClient
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderLayerManager
.
h
"
#
include
"
mozilla
/
layers
/
IpcResourceUpdateQueue
.
h
"
#
include
"
mozilla
/
layers
/
SharedSurfacesChild
.
h
"
#
include
"
mozilla
/
layers
/
SourceSurfaceSharedData
.
h
"
#
include
"
mozilla
/
layers
/
StackingContextHelper
.
h
"
#
include
"
mozilla
/
layers
/
UpdateImageHelper
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderDrawEventRecorder
.
h
"
#
include
"
UnitTransforms
.
h
"
#
include
"
gfxEnv
.
h
"
#
include
"
nsDisplayListInvalidation
.
h
"
#
include
"
WebRenderCanvasRenderer
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
LayerTreeInvalidation
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
gfx
;
static
bool
PaintByLayer
(
nsDisplayItem
*
aItem
nsDisplayListBuilder
*
aDisplayListBuilder
const
RefPtr
<
BasicLayerManager
>
&
aManager
gfxContext
*
aContext
const
gfx
:
:
Size
&
aScale
const
std
:
:
function
<
void
(
)
>
&
aPaintFunc
)
;
static
int
sIndent
;
#
include
<
stdarg
.
h
>
#
include
<
stdio
.
h
>
static
void
GP
(
const
char
*
fmt
.
.
.
)
{
va_list
args
;
va_start
(
args
fmt
)
;
#
if
0
for
(
int
i
=
0
;
i
<
sIndent
;
i
+
+
)
{
printf
(
"
"
)
;
}
vprintf
(
fmt
args
)
;
#
endif
va_end
(
args
)
;
}
struct
BlobItemData
;
static
void
DestroyBlobGroupDataProperty
(
nsTArray
<
BlobItemData
*
>
*
aArray
)
;
NS_DECLARE_FRAME_PROPERTY_WITH_DTOR
(
BlobGroupDataProperty
nsTArray
<
BlobItemData
*
>
DestroyBlobGroupDataProperty
)
;
static
void
SetBlobImageVisibleArea
(
wr
:
:
IpcResourceUpdateQueue
&
aResources
wr
:
:
ImageKey
aImageKey
const
LayoutDeviceRect
&
aImageRect
const
LayoutDeviceRect
&
aPaintRect
)
{
LayoutDeviceRect
visibleRect
=
aImageRect
.
Intersect
(
aPaintRect
)
;
Rect
visibleArea
=
Rect
(
(
visibleRect
.
x
-
aImageRect
.
x
)
/
aImageRect
.
width
(
visibleRect
.
y
-
aImageRect
.
y
)
/
aImageRect
.
height
visibleRect
.
width
/
aImageRect
.
width
visibleRect
.
height
/
aImageRect
.
height
)
;
aResources
.
SetImageVisibleArea
(
aImageKey
visibleArea
)
;
}
struct
BlobItemData
{
nsIFrame
*
mFrame
;
uint32_t
mDisplayItemKey
;
nsTArray
<
BlobItemData
*
>
*
mArray
;
IntRect
mRect
;
UniquePtr
<
nsDisplayItemGeometry
>
mGeometry
;
DisplayItemClip
mClip
;
bool
mUsed
;
struct
DIGroup
*
mGroup
;
bool
mInvalid
;
bool
mEmpty
;
Matrix
mMatrix
;
Matrix4x4Flagged
mTransform
;
float
mOpacity
;
IntRect
mImageRect
;
LayerIntPoint
mGroupOffset
;
BlobItemData
(
DIGroup
*
aGroup
nsDisplayItem
*
aItem
)
:
mGroup
(
aGroup
)
{
mInvalid
=
false
;
mEmpty
=
false
;
mDisplayItemKey
=
aItem
-
>
GetPerFrameKey
(
)
;
AddFrame
(
aItem
-
>
Frame
(
)
)
;
}
private
:
void
AddFrame
(
nsIFrame
*
aFrame
)
{
mFrame
=
aFrame
;
nsTArray
<
BlobItemData
*
>
*
array
=
aFrame
-
>
GetProperty
(
BlobGroupDataProperty
(
)
)
;
if
(
!
array
)
{
array
=
new
nsTArray
<
BlobItemData
*
>
(
)
;
aFrame
-
>
SetProperty
(
BlobGroupDataProperty
(
)
array
)
;
}
array
-
>
AppendElement
(
this
)
;
mArray
=
array
;
}
public
:
void
ClearFrame
(
)
{
MOZ_RELEASE_ASSERT
(
mFrame
)
;
mArray
-
>
RemoveElement
(
this
)
;
if
(
mArray
-
>
IsEmpty
(
)
)
{
mFrame
-
>
DeleteProperty
(
BlobGroupDataProperty
(
)
)
;
}
mFrame
=
nullptr
;
}
~
BlobItemData
(
)
{
if
(
mFrame
)
{
ClearFrame
(
)
;
}
}
}
;
static
BlobItemData
*
GetBlobItemData
(
nsDisplayItem
*
aItem
)
{
nsIFrame
*
frame
=
aItem
-
>
Frame
(
)
;
uint32_t
key
=
aItem
-
>
GetPerFrameKey
(
)
;
const
nsTArray
<
BlobItemData
*
>
*
array
=
frame
-
>
GetProperty
(
BlobGroupDataProperty
(
)
)
;
if
(
array
)
{
for
(
BlobItemData
*
item
:
*
array
)
{
if
(
item
-
>
mDisplayItemKey
=
=
key
)
{
return
item
;
}
}
}
return
nullptr
;
}
static
void
DestroyBlobGroupDataProperty
(
nsTArray
<
BlobItemData
*
>
*
aArray
)
{
for
(
BlobItemData
*
item
:
*
aArray
)
{
GP
(
"
DestroyBlobGroupDataProperty
:
%
p
-
%
d
\
n
"
item
-
>
mFrame
item
-
>
mDisplayItemKey
)
;
item
-
>
mFrame
=
nullptr
;
}
delete
aArray
;
}
static
void
TakeExternalSurfaces
(
WebRenderDrawEventRecorder
*
aRecorder
std
:
:
vector
<
RefPtr
<
SourceSurface
>
>
&
aExternalSurfaces
WebRenderLayerManager
*
aManager
wr
:
:
IpcResourceUpdateQueue
&
aResources
)
{
aRecorder
-
>
TakeExternalSurfaces
(
aExternalSurfaces
)
;
for
(
auto
&
surface
:
aExternalSurfaces
)
{
if
(
surface
-
>
GetType
(
)
!
=
SurfaceType
:
:
DATA_SHARED
)
{
MOZ_ASSERT_UNREACHABLE
(
"
External
surface
that
is
not
a
shared
surface
!
"
)
;
continue
;
}
wr
:
:
ImageKey
key
;
auto
sharedSurface
=
static_cast
<
SourceSurfaceSharedData
*
>
(
surface
.
get
(
)
)
;
SharedSurfacesChild
:
:
Share
(
sharedSurface
aManager
aResources
key
)
;
}
}
struct
DIGroup
;
struct
Grouper
{
explicit
Grouper
(
ClipManager
&
aClipManager
)
:
mClipManager
(
aClipManager
)
{
}
int32_t
mAppUnitsPerDevPixel
;
std
:
:
vector
<
nsDisplayItem
*
>
mItemStack
;
nsDisplayListBuilder
*
mDisplayListBuilder
;
ClipManager
&
mClipManager
;
Matrix
mTransform
;
void
PaintContainerItem
(
DIGroup
*
aGroup
nsDisplayItem
*
aItem
const
IntRect
&
aItemBounds
nsDisplayList
*
aChildren
gfxContext
*
aContext
WebRenderDrawEventRecorder
*
aRecorder
)
;
void
ConstructGroups
(
nsDisplayListBuilder
*
aDisplayListBuilder
WebRenderCommandBuilder
*
aCommandBuilder
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
DIGroup
*
aGroup
nsDisplayList
*
aList
const
StackingContextHelper
&
aSc
)
;
void
ConstructGroupInsideInactive
(
WebRenderCommandBuilder
*
aCommandBuilder
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
DIGroup
*
aGroup
nsDisplayList
*
aList
const
StackingContextHelper
&
aSc
)
;
~
Grouper
(
)
{
}
}
;
static
bool
IsContainerLayerItem
(
nsDisplayItem
*
aItem
)
{
switch
(
aItem
-
>
GetType
(
)
)
{
case
DisplayItemType
:
:
TYPE_WRAP_LIST
:
case
DisplayItemType
:
:
TYPE_TRANSFORM
:
case
DisplayItemType
:
:
TYPE_OPACITY
:
case
DisplayItemType
:
:
TYPE_FILTER
:
case
DisplayItemType
:
:
TYPE_BLEND_CONTAINER
:
case
DisplayItemType
:
:
TYPE_BLEND_MODE
:
case
DisplayItemType
:
:
TYPE_MASK
:
{
return
true
;
}
default
:
{
return
false
;
}
}
}
#
include
<
sstream
>
bool
UpdateContainerLayerPropertiesAndDetectChange
(
nsDisplayItem
*
aItem
BlobItemData
*
aData
nsDisplayItemGeometry
&
aGeometry
)
{
bool
changed
=
false
;
switch
(
aItem
-
>
GetType
(
)
)
{
case
DisplayItemType
:
:
TYPE_TRANSFORM
:
{
auto
transformItem
=
static_cast
<
nsDisplayTransform
*
>
(
aItem
)
;
Matrix4x4Flagged
trans
=
transformItem
-
>
GetTransform
(
)
;
changed
=
aData
-
>
mTransform
!
=
trans
;
if
(
changed
)
{
std
:
:
stringstream
ss
;
}
aData
-
>
mTransform
=
trans
;
break
;
}
case
DisplayItemType
:
:
TYPE_OPACITY
:
{
auto
opacityItem
=
static_cast
<
nsDisplayOpacity
*
>
(
aItem
)
;
float
opacity
=
opacityItem
-
>
GetOpacity
(
)
;
changed
=
aData
-
>
mOpacity
!
=
opacity
;
aData
-
>
mOpacity
=
opacity
;
GP
(
"
UpdateContainerLayerPropertiesAndDetectChange
Opacity
\
n
"
)
;
break
;
}
case
DisplayItemType
:
:
TYPE_MASK
:
case
DisplayItemType
:
:
TYPE_FILTER
:
{
aGeometry
.
mBounds
=
aGeometry
.
mBounds
.
Intersect
(
aItem
-
>
GetBuildingRect
(
)
)
;
break
;
}
default
:
break
;
}
return
changed
|
|
!
aGeometry
.
mBounds
.
IsEqualEdges
(
aData
-
>
mGeometry
-
>
mBounds
)
;
}
struct
DIGroup
{
nsTHashtable
<
nsPtrHashKey
<
BlobItemData
>
>
mDisplayItems
;
nsPoint
mAnimatedGeometryRootOrigin
;
nsPoint
mLastAnimatedGeometryRootOrigin
;
IntRect
mInvalidRect
;
nsRect
mGroupBounds
;
LayoutDeviceRect
mPaintRect
;
int32_t
mAppUnitsPerDevPixel
;
gfx
:
:
Size
mScale
;
FrameMetrics
:
:
ViewID
mScrollId
;
LayerPoint
mResidualOffset
;
LayerIntRect
mLayerBounds
;
Maybe
<
wr
:
:
ImageKey
>
mKey
;
std
:
:
vector
<
RefPtr
<
SourceSurface
>
>
mExternalSurfaces
;
DIGroup
(
)
:
mAppUnitsPerDevPixel
(
0
)
mScrollId
(
FrameMetrics
:
:
NULL_SCROLL_ID
)
{
}
void
InvalidateRect
(
const
IntRect
&
aRect
)
{
mInvalidRect
=
mInvalidRect
.
Union
(
aRect
)
;
}
IntRect
ItemBounds
(
nsDisplayItem
*
aItem
)
{
BlobItemData
*
data
=
GetBlobItemData
(
aItem
)
;
return
data
-
>
mRect
;
}
void
ClearItems
(
)
{
GP
(
"
items
:
%
d
\
n
"
mDisplayItems
.
Count
(
)
)
;
for
(
auto
iter
=
mDisplayItems
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
BlobItemData
*
data
=
iter
.
Get
(
)
-
>
GetKey
(
)
;
GP
(
"
Deleting
%
p
-
%
d
\
n
"
data
-
>
mFrame
data
-
>
mDisplayItemKey
)
;
iter
.
Remove
(
)
;
delete
data
;
}
}
static
IntRect
ToDeviceSpace
(
nsRect
aBounds
Matrix
&
aMatrix
int32_t
aAppUnitsPerDevPixel
LayerIntPoint
aOffset
)
{
return
RoundedOut
(
aMatrix
.
TransformBounds
(
ToRect
(
nsLayoutUtils
:
:
RectToGfxRect
(
aBounds
aAppUnitsPerDevPixel
)
)
)
)
-
aOffset
.
ToUnknownPoint
(
)
;
}
void
ComputeGeometryChange
(
nsDisplayItem
*
aItem
BlobItemData
*
aData
Matrix
&
aMatrix
nsDisplayListBuilder
*
aBuilder
)
{
nsRect
invalid
;
nsRegion
combined
;
const
DisplayItemClip
&
clip
=
aItem
-
>
GetClip
(
)
;
nsPoint
shift
=
mAnimatedGeometryRootOrigin
-
mLastAnimatedGeometryRootOrigin
;
if
(
shift
.
x
!
=
0
|
|
shift
.
y
!
=
0
)
GP
(
"
shift
%
d
%
d
\
n
"
shift
.
x
shift
.
y
)
;
int32_t
appUnitsPerDevPixel
=
aItem
-
>
Frame
(
)
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
MOZ_RELEASE_ASSERT
(
mAppUnitsPerDevPixel
=
=
appUnitsPerDevPixel
)
;
LayoutDeviceRect
bounds
=
LayoutDeviceRect
:
:
FromAppUnits
(
mGroupBounds
appUnitsPerDevPixel
)
;
LayoutDeviceIntPoint
offset
=
RoundedToInt
(
bounds
.
TopLeft
(
)
)
;
GP
(
"
\
n
"
)
;
GP
(
"
CGC
offset
%
d
%
d
\
n
"
offset
.
x
offset
.
y
)
;
LayerIntSize
size
=
mLayerBounds
.
Size
(
)
;
IntRect
imageRect
(
0
0
size
.
width
size
.
height
)
;
GP
(
"
imageSize
:
%
d
%
d
\
n
"
size
.
width
size
.
height
)
;
GP
(
"
pre
mInvalidRect
:
%
s
%
p
-
%
d
-
inv
:
%
d
%
d
%
d
%
d
\
n
"
aItem
-
>
Name
(
)
aItem
-
>
Frame
(
)
aItem
-
>
GetPerFrameKey
(
)
mInvalidRect
.
x
mInvalidRect
.
y
mInvalidRect
.
width
mInvalidRect
.
height
)
;
if
(
!
aData
-
>
mGeometry
)
{
UniquePtr
<
nsDisplayItemGeometry
>
geometry
(
aItem
-
>
AllocateGeometry
(
aBuilder
)
)
;
combined
=
clip
.
ApplyNonRoundedIntersection
(
geometry
-
>
ComputeInvalidationRegion
(
)
)
;
aData
-
>
mGeometry
=
std
:
:
move
(
geometry
)
;
nsRect
bounds
=
combined
.
GetBounds
(
)
;
IntRect
transformedRect
=
ToDeviceSpace
(
combined
.
GetBounds
(
)
aMatrix
appUnitsPerDevPixel
mLayerBounds
.
TopLeft
(
)
)
;
aData
-
>
mRect
=
transformedRect
.
Intersect
(
imageRect
)
;
GP
(
"
CGC
%
s
%
d
%
d
%
d
%
d
\
n
"
aItem
-
>
Name
(
)
bounds
.
x
bounds
.
y
bounds
.
width
bounds
.
height
)
;
GP
(
"
%
d
%
d
%
f
%
f
\
n
"
mLayerBounds
.
TopLeft
(
)
.
x
mLayerBounds
.
TopLeft
(
)
.
y
aMatrix
.
_11
aMatrix
.
_22
)
;
GP
(
"
mRect
%
d
%
d
%
d
%
d
\
n
"
aData
-
>
mRect
.
x
aData
-
>
mRect
.
y
aData
-
>
mRect
.
width
aData
-
>
mRect
.
height
)
;
InvalidateRect
(
aData
-
>
mRect
)
;
aData
-
>
mInvalid
=
true
;
}
else
if
(
(
aItem
-
>
IsInvalid
(
invalid
)
&
&
invalid
.
IsEmpty
(
)
)
)
{
MOZ_RELEASE_ASSERT
(
imageRect
.
IsEqualEdges
(
aData
-
>
mImageRect
)
)
;
MOZ_RELEASE_ASSERT
(
mLayerBounds
.
TopLeft
(
)
=
=
aData
-
>
mGroupOffset
)
;
UniquePtr
<
nsDisplayItemGeometry
>
geometry
(
aItem
-
>
AllocateGeometry
(
aBuilder
)
)
;
combined
=
clip
.
ApplyNonRoundedIntersection
(
geometry
-
>
ComputeInvalidationRegion
(
)
)
;
aData
-
>
mGeometry
=
std
:
:
move
(
geometry
)
;
GP
(
"
matrix
:
%
f
%
f
\
n
"
aMatrix
.
_31
aMatrix
.
_32
)
;
GP
(
"
frame
invalid
invalidate
:
%
s
\
n
"
aItem
-
>
Name
(
)
)
;
GP
(
"
old
rect
:
%
d
%
d
%
d
%
d
\
n
"
aData
-
>
mRect
.
x
aData
-
>
mRect
.
y
aData
-
>
mRect
.
width
aData
-
>
mRect
.
height
)
;
InvalidateRect
(
aData
-
>
mRect
.
Intersect
(
imageRect
)
)
;
IntRect
transformedRect
=
ToDeviceSpace
(
combined
.
GetBounds
(
)
aMatrix
appUnitsPerDevPixel
mLayerBounds
.
TopLeft
(
)
)
;
aData
-
>
mRect
=
transformedRect
.
Intersect
(
imageRect
)
;
InvalidateRect
(
aData
-
>
mRect
)
;
GP
(
"
new
rect
:
%
d
%
d
%
d
%
d
\
n
"
aData
-
>
mRect
.
x
aData
-
>
mRect
.
y
aData
-
>
mRect
.
width
aData
-
>
mRect
.
height
)
;
aData
-
>
mInvalid
=
true
;
}
else
{
MOZ_RELEASE_ASSERT
(
imageRect
.
IsEqualEdges
(
aData
-
>
mImageRect
)
)
;
MOZ_RELEASE_ASSERT
(
mLayerBounds
.
TopLeft
(
)
=
=
aData
-
>
mGroupOffset
)
;
GP
(
"
else
invalidate
:
%
s
\
n
"
aItem
-
>
Name
(
)
)
;
aData
-
>
mGeometry
-
>
MoveBy
(
shift
)
;
aItem
-
>
ComputeInvalidationRegion
(
aBuilder
aData
-
>
mGeometry
.
get
(
)
&
combined
)
;
if
(
!
combined
.
IsEmpty
(
)
)
{
InvalidateRect
(
aData
-
>
mRect
.
Intersect
(
imageRect
)
)
;
UniquePtr
<
nsDisplayItemGeometry
>
geometry
(
aItem
-
>
AllocateGeometry
(
aBuilder
)
)
;
aData
-
>
mClip
.
AddOffsetAndComputeDifference
(
shift
aData
-
>
mGeometry
-
>
ComputeInvalidationRegion
(
)
clip
geometry
?
geometry
-
>
ComputeInvalidationRegion
(
)
:
aData
-
>
mGeometry
-
>
ComputeInvalidationRegion
(
)
&
combined
)
;
IntRect
transformedRect
=
ToDeviceSpace
(
combined
.
GetBounds
(
)
aMatrix
appUnitsPerDevPixel
mLayerBounds
.
TopLeft
(
)
)
;
IntRect
invalidRect
=
transformedRect
.
Intersect
(
imageRect
)
;
GP
(
"
combined
not
empty
:
mRect
%
d
%
d
%
d
%
d
\
n
"
invalidRect
.
x
invalidRect
.
y
invalidRect
.
width
invalidRect
.
height
)
;
InvalidateRect
(
invalidRect
)
;
aData
-
>
mGeometry
=
std
:
:
move
(
geometry
)
;
combined
=
clip
.
ApplyNonRoundedIntersection
(
aData
-
>
mGeometry
-
>
ComputeInvalidationRegion
(
)
)
;
transformedRect
=
ToDeviceSpace
(
combined
.
GetBounds
(
)
aMatrix
appUnitsPerDevPixel
mLayerBounds
.
TopLeft
(
)
)
;
aData
-
>
mRect
=
transformedRect
.
Intersect
(
imageRect
)
;
aData
-
>
mInvalid
=
true
;
}
else
{
if
(
aData
-
>
mClip
!
=
clip
)
{
UniquePtr
<
nsDisplayItemGeometry
>
geometry
(
aItem
-
>
AllocateGeometry
(
aBuilder
)
)
;
if
(
!
IsContainerLayerItem
(
aItem
)
)
{
MOZ_RELEASE_ASSERT
(
geometry
-
>
mBounds
.
IsEqualEdges
(
aData
-
>
mGeometry
-
>
mBounds
)
)
;
}
else
{
aData
-
>
mGeometry
=
std
:
:
move
(
geometry
)
;
}
combined
=
clip
.
ApplyNonRoundedIntersection
(
aData
-
>
mGeometry
-
>
ComputeInvalidationRegion
(
)
)
;
IntRect
transformedRect
=
ToDeviceSpace
(
combined
.
GetBounds
(
)
aMatrix
appUnitsPerDevPixel
mLayerBounds
.
TopLeft
(
)
)
;
InvalidateRect
(
aData
-
>
mRect
.
Intersect
(
imageRect
)
)
;
aData
-
>
mRect
=
transformedRect
.
Intersect
(
imageRect
)
;
InvalidateRect
(
aData
-
>
mRect
)
;
GP
(
"
ClipChange
:
%
s
%
d
%
d
%
d
%
d
\
n
"
aItem
-
>
Name
(
)
aData
-
>
mRect
.
x
aData
-
>
mRect
.
y
aData
-
>
mRect
.
XMost
(
)
aData
-
>
mRect
.
YMost
(
)
)
;
}
else
if
(
!
aMatrix
.
ExactlyEquals
(
aData
-
>
mMatrix
)
)
{
UniquePtr
<
nsDisplayItemGeometry
>
geometry
(
aItem
-
>
AllocateGeometry
(
aBuilder
)
)
;
if
(
!
IsContainerLayerItem
(
aItem
)
)
{
MOZ_RELEASE_ASSERT
(
geometry
-
>
mBounds
.
IsEqualEdges
(
aData
-
>
mGeometry
-
>
mBounds
)
)
;
}
else
{
aData
-
>
mGeometry
=
std
:
:
move
(
geometry
)
;
}
combined
=
clip
.
ApplyNonRoundedIntersection
(
aData
-
>
mGeometry
-
>
ComputeInvalidationRegion
(
)
)
;
IntRect
transformedRect
=
ToDeviceSpace
(
combined
.
GetBounds
(
)
aMatrix
appUnitsPerDevPixel
mLayerBounds
.
TopLeft
(
)
)
;
InvalidateRect
(
aData
-
>
mRect
.
Intersect
(
imageRect
)
)
;
aData
-
>
mRect
=
transformedRect
.
Intersect
(
imageRect
)
;
InvalidateRect
(
aData
-
>
mRect
)
;
GP
(
"
TransformChange
:
%
s
%
d
%
d
%
d
%
d
\
n
"
aItem
-
>
Name
(
)
aData
-
>
mRect
.
x
aData
-
>
mRect
.
y
aData
-
>
mRect
.
XMost
(
)
aData
-
>
mRect
.
YMost
(
)
)
;
}
else
if
(
IsContainerLayerItem
(
aItem
)
)
{
UniquePtr
<
nsDisplayItemGeometry
>
geometry
(
aItem
-
>
AllocateGeometry
(
aBuilder
)
)
;
if
(
UpdateContainerLayerPropertiesAndDetectChange
(
aItem
aData
*
geometry
)
)
{
combined
=
clip
.
ApplyNonRoundedIntersection
(
geometry
-
>
ComputeInvalidationRegion
(
)
)
;
aData
-
>
mGeometry
=
std
:
:
move
(
geometry
)
;
IntRect
transformedRect
=
ToDeviceSpace
(
combined
.
GetBounds
(
)
aMatrix
appUnitsPerDevPixel
mLayerBounds
.
TopLeft
(
)
)
;
InvalidateRect
(
aData
-
>
mRect
.
Intersect
(
imageRect
)
)
;
aData
-
>
mRect
=
transformedRect
.
Intersect
(
imageRect
)
;
InvalidateRect
(
aData
-
>
mRect
)
;
GP
(
"
UpdateContainerLayerPropertiesAndDetectChange
change
\
n
"
)
;
}
else
{
combined
=
clip
.
ApplyNonRoundedIntersection
(
geometry
-
>
ComputeInvalidationRegion
(
)
)
;
IntRect
transformedRect
=
ToDeviceSpace
(
combined
.
GetBounds
(
)
aMatrix
appUnitsPerDevPixel
mLayerBounds
.
TopLeft
(
)
)
;
auto
rect
=
transformedRect
.
Intersect
(
imageRect
)
;
GP
(
"
Layer
NoChange
:
%
s
%
d
%
d
%
d
%
d
\
n
"
aItem
-
>
Name
(
)
aData
-
>
mRect
.
x
aData
-
>
mRect
.
y
aData
-
>
mRect
.
XMost
(
)
aData
-
>
mRect
.
YMost
(
)
)
;
MOZ_RELEASE_ASSERT
(
rect
.
IsEqualEdges
(
aData
-
>
mRect
)
)
;
}
}
else
{
UniquePtr
<
nsDisplayItemGeometry
>
geometry
(
aItem
-
>
AllocateGeometry
(
aBuilder
)
)
;
combined
=
clip
.
ApplyNonRoundedIntersection
(
geometry
-
>
ComputeInvalidationRegion
(
)
)
;
IntRect
transformedRect
=
ToDeviceSpace
(
combined
.
GetBounds
(
)
aMatrix
appUnitsPerDevPixel
mLayerBounds
.
TopLeft
(
)
)
;
auto
rect
=
transformedRect
.
Intersect
(
imageRect
)
;
GP
(
"
NoChange
:
%
s
%
d
%
d
%
d
%
d
\
n
"
aItem
-
>
Name
(
)
aData
-
>
mRect
.
x
aData
-
>
mRect
.
y
aData
-
>
mRect
.
XMost
(
)
aData
-
>
mRect
.
YMost
(
)
)
;
MOZ_RELEASE_ASSERT
(
rect
.
IsEqualEdges
(
aData
-
>
mRect
)
)
;
}
}
}
aData
-
>
mClip
=
clip
;
aData
-
>
mMatrix
=
aMatrix
;
aData
-
>
mGroupOffset
=
mLayerBounds
.
TopLeft
(
)
;
aData
-
>
mImageRect
=
imageRect
;
GP
(
"
post
mInvalidRect
:
%
d
%
d
%
d
%
d
\
n
"
mInvalidRect
.
x
mInvalidRect
.
y
mInvalidRect
.
width
mInvalidRect
.
height
)
;
}
void
EndGroup
(
WebRenderLayerManager
*
aWrManager
nsDisplayListBuilder
*
aDisplayListBuilder
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
Grouper
*
aGrouper
nsDisplayItem
*
aStartItem
nsDisplayItem
*
aEndItem
)
{
mLastAnimatedGeometryRootOrigin
=
mAnimatedGeometryRootOrigin
;
GP
(
"
\
n
\
n
"
)
;
GP
(
"
Begin
EndGroup
\
n
"
)
;
GP
(
"
mDisplayItems
\
n
"
)
;
for
(
auto
iter
=
mDisplayItems
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
BlobItemData
*
data
=
iter
.
Get
(
)
-
>
GetKey
(
)
;
GP
(
"
:
%
p
-
%
d
\
n
"
data
-
>
mFrame
data
-
>
mDisplayItemKey
)
;
if
(
!
data
-
>
mUsed
)
{
GP
(
"
Invalidate
unused
:
%
p
-
%
d
\
n
"
data
-
>
mFrame
data
-
>
mDisplayItemKey
)
;
InvalidateRect
(
data
-
>
mRect
)
;
iter
.
Remove
(
)
;
delete
data
;
}
else
{
data
-
>
mUsed
=
false
;
}
}
LayoutDeviceToLayerScale2D
scale
(
mScale
.
width
mScale
.
height
)
;
LayerIntRect
layerBounds
=
mLayerBounds
;
IntSize
dtSize
=
layerBounds
.
Size
(
)
.
ToUnknownSize
(
)
;
LayoutDeviceRect
bounds
=
(
LayerRect
(
layerBounds
)
-
mResidualOffset
)
/
scale
;
if
(
mInvalidRect
.
IsEmpty
(
)
)
{
GP
(
"
Not
repainting
group
because
it
'
s
empty
\
n
"
)
;
GP
(
"
End
EndGroup
\
n
"
)
;
if
(
mKey
)
{
SetBlobImageVisibleArea
(
aResources
mKey
.
value
(
)
bounds
mPaintRect
)
;
PushImage
(
aBuilder
bounds
)
;
}
return
;
}
gfx
:
:
SurfaceFormat
format
=
gfx
:
:
SurfaceFormat
:
:
B8G8R8A8
;
RefPtr
<
WebRenderDrawEventRecorder
>
recorder
=
MakeAndAddRef
<
WebRenderDrawEventRecorder
>
(
[
&
]
(
MemStream
&
aStream
std
:
:
vector
<
RefPtr
<
UnscaledFont
>
>
&
aUnscaledFonts
)
{
size_t
count
=
aUnscaledFonts
.
size
(
)
;
aStream
.
write
(
(
const
char
*
)
&
count
sizeof
(
count
)
)
;
for
(
auto
unscaled
:
aUnscaledFonts
)
{
wr
:
:
FontKey
key
=
aWrManager
-
>
WrBridge
(
)
-
>
GetFontKeyForUnscaledFont
(
unscaled
)
;
aStream
.
write
(
(
const
char
*
)
&
key
sizeof
(
key
)
)
;
}
}
)
;
RefPtr
<
gfx
:
:
DrawTarget
>
dummyDt
=
gfx
:
:
Factory
:
:
CreateDrawTarget
(
gfx
:
:
BackendType
:
:
SKIA
gfx
:
:
IntSize
(
1
1
)
format
)
;
RefPtr
<
gfx
:
:
DrawTarget
>
dt
=
gfx
:
:
Factory
:
:
CreateRecordingDrawTarget
(
recorder
dummyDt
dtSize
)
;
RefPtr
<
gfxContext
>
context
=
gfxContext
:
:
CreateOrNull
(
dt
)
;
GP
(
"
ctx
-
offset
%
f
%
f
\
n
"
bounds
.
x
bounds
.
y
)
;
context
-
>
SetMatrix
(
Matrix
:
:
Scaling
(
mScale
.
width
mScale
.
height
)
.
PreTranslate
(
-
bounds
.
x
-
bounds
.
y
)
)
;
GP
(
"
mInvalidRect
:
%
d
%
d
%
d
%
d
\
n
"
mInvalidRect
.
x
mInvalidRect
.
y
mInvalidRect
.
width
mInvalidRect
.
height
)
;
bool
empty
=
aStartItem
=
=
aEndItem
;
if
(
empty
)
{
if
(
mKey
)
{
aWrManager
-
>
AddImageKeyForDiscard
(
mKey
.
value
(
)
)
;
mKey
=
Nothing
(
)
;
}
return
;
}
PaintItemRange
(
aGrouper
aStartItem
aEndItem
context
recorder
)
;
bool
isOpaque
=
false
;
TakeExternalSurfaces
(
recorder
mExternalSurfaces
aWrManager
aResources
)
;
bool
hasItems
=
recorder
-
>
Finish
(
)
;
GP
(
"
%
d
Finish
\
n
"
hasItems
)
;
Range
<
uint8_t
>
bytes
(
(
uint8_t
*
)
recorder
-
>
mOutputStream
.
mData
recorder
-
>
mOutputStream
.
mLength
)
;
if
(
!
mKey
)
{
if
(
!
hasItems
)
return
;
wr
:
:
ImageKey
key
=
aWrManager
-
>
WrBridge
(
)
-
>
GetNextImageKey
(
)
;
GP
(
"
No
previous
key
making
new
one
%
d
\
n
"
key
.
mHandle
)
;
wr
:
:
ImageDescriptor
descriptor
(
dtSize
0
dt
-
>
GetFormat
(
)
isOpaque
)
;
MOZ_RELEASE_ASSERT
(
bytes
.
length
(
)
>
sizeof
(
size_t
)
)
;
if
(
!
aResources
.
AddBlobImage
(
key
descriptor
bytes
)
)
{
return
;
}
mKey
=
Some
(
key
)
;
}
else
{
wr
:
:
ImageDescriptor
descriptor
(
dtSize
0
dt
-
>
GetFormat
(
)
isOpaque
)
;
auto
bottomRight
=
mInvalidRect
.
BottomRight
(
)
;
GP
(
"
check
invalid
%
d
%
d
-
%
d
%
d
\
n
"
bottomRight
.
x
bottomRight
.
y
dtSize
.
width
dtSize
.
height
)
;
MOZ_RELEASE_ASSERT
(
bottomRight
.
x
<
=
dtSize
.
width
&
&
bottomRight
.
y
<
=
dtSize
.
height
)
;
GP
(
"
Update
Blob
%
d
%
d
%
d
%
d
\
n
"
mInvalidRect
.
x
mInvalidRect
.
y
mInvalidRect
.
width
mInvalidRect
.
height
)
;
if
(
!
aResources
.
UpdateBlobImage
(
mKey
.
value
(
)
descriptor
bytes
ViewAs
<
ImagePixel
>
(
mInvalidRect
)
)
)
{
return
;
}
}
mInvalidRect
.
SetEmpty
(
)
;
SetBlobImageVisibleArea
(
aResources
mKey
.
value
(
)
mPaintRect
bounds
)
;
PushImage
(
aBuilder
bounds
)
;
GP
(
"
End
EndGroup
\
n
\
n
"
)
;
}
void
PushImage
(
wr
:
:
DisplayListBuilder
&
aBuilder
const
LayoutDeviceRect
&
bounds
)
{
wr
:
:
LayoutRect
dest
=
wr
:
:
ToLayoutRect
(
bounds
)
;
GP
(
"
PushImage
:
%
f
%
f
%
f
%
f
\
n
"
dest
.
origin
.
x
dest
.
origin
.
y
dest
.
size
.
width
dest
.
size
.
height
)
;
gfx
:
:
SamplingFilter
sampleFilter
=
gfx
:
:
SamplingFilter
:
:
LINEAR
;
bool
backfaceHidden
=
false
;
auto
hitInfo
=
CompositorHitTestInfo
:
:
eVisibleToHitTest
|
CompositorHitTestInfo
:
:
eDispatchToContent
;
aBuilder
.
SetHitTestInfo
(
mScrollId
hitInfo
)
;
aBuilder
.
PushImage
(
dest
dest
!
backfaceHidden
wr
:
:
ToImageRendering
(
sampleFilter
)
mKey
.
value
(
)
)
;
aBuilder
.
ClearHitTestInfo
(
)
;
}
void
PaintItemRange
(
Grouper
*
aGrouper
nsDisplayItem
*
aStartItem
nsDisplayItem
*
aEndItem
gfxContext
*
aContext
WebRenderDrawEventRecorder
*
aRecorder
)
{
LayerIntSize
size
=
mLayerBounds
.
Size
(
)
;
for
(
nsDisplayItem
*
item
=
aStartItem
;
item
!
=
aEndItem
;
item
=
item
-
>
GetAbove
(
)
)
{
IntRect
bounds
=
ItemBounds
(
item
)
;
auto
bottomRight
=
bounds
.
BottomRight
(
)
;
GP
(
"
Trying
%
s
%
p
-
%
d
%
d
%
d
%
d
%
d
\
n
"
item
-
>
Name
(
)
item
-
>
Frame
(
)
item
-
>
GetPerFrameKey
(
)
bounds
.
x
bounds
.
y
bounds
.
XMost
(
)
bounds
.
YMost
(
)
)
;
GP
(
"
paint
check
invalid
%
d
%
d
-
%
d
%
d
\
n
"
bottomRight
.
x
bottomRight
.
y
size
.
width
size
.
height
)
;
if
(
bounds
.
IsEmpty
(
)
)
{
continue
;
}
bool
dirty
=
true
;
if
(
!
mInvalidRect
.
Contains
(
bounds
)
)
{
GP
(
"
Passing
\
n
"
)
;
dirty
=
false
;
}
if
(
mInvalidRect
.
Contains
(
bounds
)
)
{
GP
(
"
Wholely
contained
\
n
"
)
;
BlobItemData
*
data
=
GetBlobItemData
(
item
)
;
data
-
>
mInvalid
=
false
;
}
else
{
BlobItemData
*
data
=
GetBlobItemData
(
item
)
;
MOZ_RELEASE_ASSERT
(
!
data
-
>
mInvalid
)
;
}
nsDisplayList
*
children
=
item
-
>
GetChildren
(
)
;
if
(
children
)
{
GP
(
"
doing
children
in
EndGroup
\
n
"
)
;
aGrouper
-
>
PaintContainerItem
(
this
item
bounds
children
aContext
aRecorder
)
;
}
else
{
if
(
dirty
)
{
DisplayItemClip
currentClip
=
item
-
>
GetClip
(
)
;
if
(
currentClip
.
HasClip
(
)
)
{
aContext
-
>
Save
(
)
;
currentClip
.
ApplyTo
(
aContext
aGrouper
-
>
mAppUnitsPerDevPixel
)
;
}
aContext
-
>
NewPath
(
)
;
GP
(
"
painting
%
s
%
p
-
%
d
\
n
"
item
-
>
Name
(
)
item
-
>
Frame
(
)
item
-
>
GetPerFrameKey
(
)
)
;
item
-
>
Paint
(
aGrouper
-
>
mDisplayListBuilder
aContext
)
;
if
(
currentClip
.
HasClip
(
)
)
{
aContext
-
>
Restore
(
)
;
}
}
aContext
-
>
GetDrawTarget
(
)
-
>
FlushItem
(
bounds
)
;
}
}
}
~
DIGroup
(
)
{
GP
(
"
Group
destruct
\
n
"
)
;
for
(
auto
iter
=
mDisplayItems
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
BlobItemData
*
data
=
iter
.
Get
(
)
-
>
GetKey
(
)
;
GP
(
"
Deleting
%
p
-
%
d
\
n
"
data
-
>
mFrame
data
-
>
mDisplayItemKey
)
;
iter
.
Remove
(
)
;
delete
data
;
}
}
}
;
void
Grouper
:
:
PaintContainerItem
(
DIGroup
*
aGroup
nsDisplayItem
*
aItem
const
IntRect
&
aItemBounds
nsDisplayList
*
aChildren
gfxContext
*
aContext
WebRenderDrawEventRecorder
*
aRecorder
)
{
mItemStack
.
push_back
(
aItem
)
;
switch
(
aItem
-
>
GetType
(
)
)
{
case
DisplayItemType
:
:
TYPE_TRANSFORM
:
{
DisplayItemClip
currentClip
=
aItem
-
>
GetClip
(
)
;
gfx
:
:
Matrix
matrix
;
if
(
currentClip
.
HasClip
(
)
)
{
aContext
-
>
Save
(
)
;
currentClip
.
ApplyTo
(
aContext
this
-
>
mAppUnitsPerDevPixel
)
;
aContext
-
>
GetDrawTarget
(
)
-
>
FlushItem
(
aItemBounds
)
;
}
else
{
matrix
=
aContext
-
>
CurrentMatrix
(
)
;
}
auto
transformItem
=
static_cast
<
nsDisplayTransform
*
>
(
aItem
)
;
Matrix4x4Flagged
trans
=
transformItem
-
>
GetTransform
(
)
;
Matrix
trans2d
;
MOZ_RELEASE_ASSERT
(
trans
.
Is2D
(
&
trans2d
)
)
;
aContext
-
>
Multiply
(
ThebesMatrix
(
trans2d
)
)
;
aGroup
-
>
PaintItemRange
(
this
aChildren
-
>
GetBottom
(
)
nullptr
aContext
aRecorder
)
;
if
(
currentClip
.
HasClip
(
)
)
{
aContext
-
>
Restore
(
)
;
aContext
-
>
GetDrawTarget
(
)
-
>
FlushItem
(
aItemBounds
)
;
}
else
{
aContext
-
>
SetMatrix
(
matrix
)
;
}
break
;
}
case
DisplayItemType
:
:
TYPE_OPACITY
:
{
auto
opacityItem
=
static_cast
<
nsDisplayOpacity
*
>
(
aItem
)
;
float
opacity
=
opacityItem
-
>
GetOpacity
(
)
;
if
(
opacity
=
=
0
.
0f
)
{
return
;
}
aContext
-
>
GetDrawTarget
(
)
-
>
PushLayer
(
false
opacityItem
-
>
GetOpacity
(
)
nullptr
mozilla
:
:
gfx
:
:
Matrix
(
)
aItemBounds
)
;
GP
(
"
beginGroup
%
s
%
p
-
%
d
\
n
"
aItem
-
>
Name
(
)
aItem
-
>
Frame
(
)
aItem
-
>
GetPerFrameKey
(
)
)
;
aContext
-
>
GetDrawTarget
(
)
-
>
FlushItem
(
aItemBounds
)
;
aGroup
-
>
PaintItemRange
(
this
aChildren
-
>
GetBottom
(
)
nullptr
aContext
aRecorder
)
;
aContext
-
>
GetDrawTarget
(
)
-
>
PopLayer
(
)
;
GP
(
"
endGroup
%
s
%
p
-
%
d
\
n
"
aItem
-
>
Name
(
)
aItem
-
>
Frame
(
)
aItem
-
>
GetPerFrameKey
(
)
)
;
aContext
-
>
GetDrawTarget
(
)
-
>
FlushItem
(
aItemBounds
)
;
break
;
}
case
DisplayItemType
:
:
TYPE_BLEND_MODE
:
{
auto
blendItem
=
static_cast
<
nsDisplayBlendMode
*
>
(
aItem
)
;
auto
blendMode
=
blendItem
-
>
BlendMode
(
)
;
aContext
-
>
GetDrawTarget
(
)
-
>
PushLayerWithBlend
(
false
1
.
0
nullptr
mozilla
:
:
gfx
:
:
Matrix
(
)
aItemBounds
false
blendMode
)
;
GP
(
"
beginGroup
%
s
%
p
-
%
d
\
n
"
aItem
-
>
Name
(
)
aItem
-
>
Frame
(
)
aItem
-
>
GetPerFrameKey
(
)
)
;
aContext
-
>
GetDrawTarget
(
)
-
>
FlushItem
(
aItemBounds
)
;
aGroup
-
>
PaintItemRange
(
this
aChildren
-
>
GetBottom
(
)
nullptr
aContext
aRecorder
)
;
aContext
-
>
GetDrawTarget
(
)
-
>
PopLayer
(
)
;
GP
(
"
endGroup
%
s
%
p
-
%
d
\
n
"
aItem
-
>
Name
(
)
aItem
-
>
Frame
(
)
aItem
-
>
GetPerFrameKey
(
)
)
;
aContext
-
>
GetDrawTarget
(
)
-
>
FlushItem
(
aItemBounds
)
;
break
;
}
case
DisplayItemType
:
:
TYPE_MASK
:
{
GP
(
"
Paint
Mask
\
n
"
)
;
gfx
:
:
Size
scale
(
1
1
)
;
RefPtr
<
BasicLayerManager
>
blm
=
new
BasicLayerManager
(
BasicLayerManager
:
:
BLM_INACTIVE
)
;
PaintByLayer
(
aItem
mDisplayListBuilder
blm
aContext
scale
[
&
]
(
)
{
static_cast
<
nsDisplayMask
*
>
(
aItem
)
-
>
PaintAsLayer
(
mDisplayListBuilder
aContext
blm
)
;
}
)
;
aContext
-
>
GetDrawTarget
(
)
-
>
FlushItem
(
aItemBounds
)
;
break
;
}
case
DisplayItemType
:
:
TYPE_FILTER
:
{
GP
(
"
Paint
Filter
\
n
"
)
;
RefPtr
<
BasicLayerManager
>
blm
=
new
BasicLayerManager
(
BasicLayerManager
:
:
BLM_INACTIVE
)
;
gfx
:
:
Size
scale
(
1
1
)
;
PaintByLayer
(
aItem
mDisplayListBuilder
blm
aContext
scale
[
&
]
(
)
{
static_cast
<
nsDisplayFilter
*
>
(
aItem
)
-
>
PaintAsLayer
(
mDisplayListBuilder
aContext
blm
)
;
}
)
;
aContext
-
>
GetDrawTarget
(
)
-
>
FlushItem
(
aItemBounds
)
;
break
;
}
default
:
aGroup
-
>
PaintItemRange
(
this
aChildren
-
>
GetBottom
(
)
nullptr
aContext
aRecorder
)
;
break
;
}
}
class
WebRenderGroupData
:
public
WebRenderUserData
{
public
:
explicit
WebRenderGroupData
(
WebRenderLayerManager
*
aWRManager
nsDisplayItem
*
aItem
)
;
virtual
~
WebRenderGroupData
(
)
;
virtual
WebRenderGroupData
*
AsGroupData
(
)
override
{
return
this
;
}
virtual
UserDataType
GetType
(
)
override
{
return
UserDataType
:
:
eGroup
;
}
static
UserDataType
Type
(
)
{
return
UserDataType
:
:
eGroup
;
}
DIGroup
mSubGroup
;
DIGroup
mFollowingGroup
;
}
;
static
bool
IsItemProbablyActive
(
nsDisplayItem
*
aItem
nsDisplayListBuilder
*
aDisplayListBuilder
)
;
static
bool
HasActiveChildren
(
const
nsDisplayList
&
aList
nsDisplayListBuilder
*
aDisplayListBuilder
)
{
for
(
nsDisplayItem
*
i
=
aList
.
GetBottom
(
)
;
i
;
i
=
i
-
>
GetAbove
(
)
)
{
if
(
IsItemProbablyActive
(
i
aDisplayListBuilder
)
)
{
return
true
;
}
}
return
false
;
}
static
bool
IsItemProbablyActive
(
nsDisplayItem
*
aItem
nsDisplayListBuilder
*
aDisplayListBuilder
)
{
if
(
aItem
-
>
GetType
(
)
=
=
DisplayItemType
:
:
TYPE_TRANSFORM
)
{
nsDisplayTransform
*
transformItem
=
static_cast
<
nsDisplayTransform
*
>
(
aItem
)
;
const
Matrix4x4Flagged
&
t
=
transformItem
-
>
GetTransform
(
)
;
Matrix
t2d
;
bool
is2D
=
t
.
Is2D
(
&
t2d
)
;
GP
(
"
active
:
%
d
\
n
"
transformItem
-
>
MayBeAnimated
(
aDisplayListBuilder
)
)
;
return
transformItem
-
>
MayBeAnimated
(
aDisplayListBuilder
)
|
|
!
is2D
|
|
HasActiveChildren
(
*
transformItem
-
>
GetChildren
(
)
aDisplayListBuilder
)
;
}
else
if
(
aItem
-
>
GetType
(
)
=
=
DisplayItemType
:
:
TYPE_OPACITY
)
{
nsDisplayOpacity
*
opacityItem
=
static_cast
<
nsDisplayOpacity
*
>
(
aItem
)
;
bool
active
=
opacityItem
-
>
NeedsActiveLayer
(
aDisplayListBuilder
opacityItem
-
>
Frame
(
)
)
;
GP
(
"
active
:
%
d
\
n
"
active
)
;
return
active
|
|
HasActiveChildren
(
*
opacityItem
-
>
GetChildren
(
)
aDisplayListBuilder
)
;
}
else
if
(
aItem
-
>
GetType
(
)
=
=
DisplayItemType
:
:
TYPE_WRAP_LIST
&
&
aItem
-
>
GetChildren
(
)
)
{
return
HasActiveChildren
(
*
aItem
-
>
GetChildren
(
)
aDisplayListBuilder
)
;
}
return
false
;
}
static
BlobItemData
*
GetBlobItemDataForGroup
(
nsDisplayItem
*
aItem
DIGroup
*
aGroup
)
{
BlobItemData
*
data
=
GetBlobItemData
(
aItem
)
;
if
(
data
)
{
MOZ_RELEASE_ASSERT
(
data
-
>
mGroup
-
>
mDisplayItems
.
Contains
(
data
)
)
;
if
(
data
-
>
mGroup
!
=
aGroup
)
{
GP
(
"
group
don
'
t
match
%
p
%
p
\
n
"
data
-
>
mGroup
aGroup
)
;
data
-
>
ClearFrame
(
)
;
data
=
nullptr
;
}
}
if
(
!
data
)
{
GP
(
"
Allocating
blob
data
\
n
"
)
;
data
=
new
BlobItemData
(
aGroup
aItem
)
;
aGroup
-
>
mDisplayItems
.
PutEntry
(
data
)
;
}
data
-
>
mUsed
=
true
;
return
data
;
}
void
Grouper
:
:
ConstructGroups
(
nsDisplayListBuilder
*
aDisplayListBuilder
WebRenderCommandBuilder
*
aCommandBuilder
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
DIGroup
*
aGroup
nsDisplayList
*
aList
const
StackingContextHelper
&
aSc
)
{
DIGroup
*
currentGroup
=
aGroup
;
nsDisplayItem
*
item
=
aList
-
>
GetBottom
(
)
;
nsDisplayItem
*
startOfCurrentGroup
=
item
;
while
(
item
)
{
nsDisplayList
*
children
=
item
-
>
GetChildren
(
)
;
if
(
IsItemProbablyActive
(
item
mDisplayListBuilder
)
)
{
currentGroup
-
>
EndGroup
(
aCommandBuilder
-
>
mManager
aDisplayListBuilder
aBuilder
aResources
this
startOfCurrentGroup
item
)
;
mClipManager
.
BeginItem
(
item
aSc
)
;
sIndent
+
+
;
bool
createdWRCommands
=
item
-
>
CreateWebRenderCommands
(
aBuilder
aResources
aSc
aCommandBuilder
-
>
mManager
mDisplayListBuilder
)
;
sIndent
-
-
;
MOZ_RELEASE_ASSERT
(
createdWRCommands
"
active
transforms
should
always
succeed
at
creating
WebRender
commands
"
)
;
RefPtr
<
WebRenderGroupData
>
groupData
=
aCommandBuilder
-
>
CreateOrRecycleWebRenderUserData
<
WebRenderGroupData
>
(
item
)
;
if
(
!
groupData
-
>
mFollowingGroup
.
mGroupBounds
.
IsEqualEdges
(
currentGroup
-
>
mGroupBounds
)
|
|
groupData
-
>
mFollowingGroup
.
mScale
!
=
currentGroup
-
>
mScale
|
|
groupData
-
>
mFollowingGroup
.
mAppUnitsPerDevPixel
!
=
currentGroup
-
>
mAppUnitsPerDevPixel
|
|
groupData
-
>
mFollowingGroup
.
mResidualOffset
!
=
currentGroup
-
>
mResidualOffset
)
{
if
(
groupData
-
>
mFollowingGroup
.
mAppUnitsPerDevPixel
!
=
currentGroup
-
>
mAppUnitsPerDevPixel
)
{
GP
(
"
app
unit
change
following
:
%
d
%
d
\
n
"
groupData
-
>
mFollowingGroup
.
mAppUnitsPerDevPixel
currentGroup
-
>
mAppUnitsPerDevPixel
)
;
}
GP
(
"
Inner
group
size
change
\
n
"
)
;
groupData
-
>
mFollowingGroup
.
ClearItems
(
)
;
if
(
groupData
-
>
mFollowingGroup
.
mKey
)
{
MOZ_RELEASE_ASSERT
(
groupData
-
>
mFollowingGroup
.
mInvalidRect
.
IsEmpty
(
)
)
;
aCommandBuilder
-
>
mManager
-
>
AddImageKeyForDiscard
(
groupData
-
>
mFollowingGroup
.
mKey
.
value
(
)
)
;
groupData
-
>
mFollowingGroup
.
mKey
=
Nothing
(
)
;
}
}
groupData
-
>
mFollowingGroup
.
mGroupBounds
=
currentGroup
-
>
mGroupBounds
;
groupData
-
>
mFollowingGroup
.
mAppUnitsPerDevPixel
=
currentGroup
-
>
mAppUnitsPerDevPixel
;
groupData
-
>
mFollowingGroup
.
mLayerBounds
=
currentGroup
-
>
mLayerBounds
;
groupData
-
>
mFollowingGroup
.
mScale
=
currentGroup
-
>
mScale
;
groupData
-
>
mFollowingGroup
.
mResidualOffset
=
currentGroup
-
>
mResidualOffset
;
groupData
-
>
mFollowingGroup
.
mPaintRect
=
currentGroup
-
>
mPaintRect
;
currentGroup
=
&
groupData
-
>
mFollowingGroup
;
startOfCurrentGroup
=
item
-
>
GetAbove
(
)
;
}
else
{
if
(
item
-
>
GetType
(
)
=
=
DisplayItemType
:
:
TYPE_TRANSFORM
)
{
nsDisplayTransform
*
transformItem
=
static_cast
<
nsDisplayTransform
*
>
(
item
)
;
const
Matrix4x4Flagged
&
t
=
transformItem
-
>
GetTransform
(
)
;
Matrix
t2d
;
bool
is2D
=
t
.
Is2D
(
&
t2d
)
;
MOZ_RELEASE_ASSERT
(
is2D
"
Non
-
2D
transforms
should
be
treated
as
active
"
)
;
Matrix
m
=
mTransform
;
GP
(
"
t2d
:
%
f
%
f
\
n
"
t2d
.
_31
t2d
.
_32
)
;
mTransform
.
PreMultiply
(
t2d
)
;
GP
(
"
mTransform
:
%
f
%
f
\
n
"
mTransform
.
_31
mTransform
.
_32
)
;
ConstructGroupInsideInactive
(
aCommandBuilder
aBuilder
aResources
currentGroup
children
aSc
)
;
mTransform
=
m
;
}
else
if
(
children
)
{
ConstructGroupInsideInactive
(
aCommandBuilder
aBuilder
aResources
currentGroup
children
aSc
)
;
}
GP
(
"
Including
%
s
of
%
d
\
n
"
item
-
>
Name
(
)
currentGroup
-
>
mDisplayItems
.
Count
(
)
)
;
BlobItemData
*
data
=
GetBlobItemDataForGroup
(
item
currentGroup
)
;
currentGroup
-
>
ComputeGeometryChange
(
item
data
mTransform
mDisplayListBuilder
)
;
}
item
=
item
-
>
GetAbove
(
)
;
}
currentGroup
-
>
EndGroup
(
aCommandBuilder
-
>
mManager
aDisplayListBuilder
aBuilder
aResources
this
startOfCurrentGroup
nullptr
)
;
}
void
Grouper
:
:
ConstructGroupInsideInactive
(
WebRenderCommandBuilder
*
aCommandBuilder
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
DIGroup
*
aGroup
nsDisplayList
*
aList
const
StackingContextHelper
&
aSc
)
{
DIGroup
*
currentGroup
=
aGroup
;
nsDisplayItem
*
item
=
aList
-
>
GetBottom
(
)
;
while
(
item
)
{
nsDisplayList
*
children
=
item
-
>
GetChildren
(
)
;
if
(
item
-
>
GetType
(
)
=
=
DisplayItemType
:
:
TYPE_TRANSFORM
)
{
nsDisplayTransform
*
transformItem
=
static_cast
<
nsDisplayTransform
*
>
(
item
)
;
const
Matrix4x4Flagged
&
t
=
transformItem
-
>
GetTransform
(
)
;
Matrix
t2d
;
bool
is2D
=
t
.
Is2D
(
&
t2d
)
;
MOZ_RELEASE_ASSERT
(
is2D
"
Non
-
2D
transforms
should
be
treated
as
active
"
)
;
Matrix
m
=
mTransform
;
GP
(
"
t2d
:
%
f
%
f
\
n
"
t2d
.
_31
t2d
.
_32
)
;
mTransform
.
PreMultiply
(
t2d
)
;
GP
(
"
mTransform
:
%
f
%
f
\
n
"
mTransform
.
_31
mTransform
.
_32
)
;
ConstructGroupInsideInactive
(
aCommandBuilder
aBuilder
aResources
currentGroup
children
aSc
)
;
mTransform
=
m
;
}
else
if
(
children
)
{
ConstructGroupInsideInactive
(
aCommandBuilder
aBuilder
aResources
currentGroup
children
aSc
)
;
}
GP
(
"
Including
%
s
of
%
d
\
n
"
item
-
>
Name
(
)
currentGroup
-
>
mDisplayItems
.
Count
(
)
)
;
BlobItemData
*
data
=
GetBlobItemDataForGroup
(
item
currentGroup
)
;
currentGroup
-
>
ComputeGeometryChange
(
item
data
mTransform
mDisplayListBuilder
)
;
item
=
item
-
>
GetAbove
(
)
;
}
}
static
mozilla
:
:
gfx
:
:
IntRect
ScaleToOutsidePixelsOffset
(
nsRect
aRect
float
aXScale
float
aYScale
nscoord
aAppUnitsPerPixel
LayerPoint
aOffset
)
{
mozilla
:
:
gfx
:
:
IntRect
rect
;
rect
.
SetNonEmptyBox
(
NSToIntFloor
(
NSAppUnitsToFloatPixels
(
aRect
.
x
float
(
aAppUnitsPerPixel
)
)
*
aXScale
+
aOffset
.
x
)
NSToIntFloor
(
NSAppUnitsToFloatPixels
(
aRect
.
y
float
(
aAppUnitsPerPixel
)
)
*
aYScale
+
aOffset
.
y
)
NSToIntCeil
(
NSAppUnitsToFloatPixels
(
aRect
.
XMost
(
)
float
(
aAppUnitsPerPixel
)
)
*
aXScale
+
aOffset
.
x
)
NSToIntCeil
(
NSAppUnitsToFloatPixels
(
aRect
.
YMost
(
)
float
(
aAppUnitsPerPixel
)
)
*
aYScale
+
aOffset
.
y
)
)
;
return
rect
;
}
void
WebRenderCommandBuilder
:
:
DoGroupingForDisplayList
(
nsDisplayList
*
aList
nsDisplayItem
*
aWrappingItem
nsDisplayListBuilder
*
aDisplayListBuilder
const
StackingContextHelper
&
aSc
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
)
{
if
(
!
aList
-
>
GetBottom
(
)
)
{
return
;
}
mClipManager
.
BeginList
(
aSc
)
;
Grouper
g
(
mClipManager
)
;
int32_t
appUnitsPerDevPixel
=
aWrappingItem
-
>
Frame
(
)
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
GP
(
"
DoGroupingForDisplayList
\
n
"
)
;
g
.
mDisplayListBuilder
=
aDisplayListBuilder
;
RefPtr
<
WebRenderGroupData
>
groupData
=
CreateOrRecycleWebRenderUserData
<
WebRenderGroupData
>
(
aWrappingItem
)
;
bool
snapped
;
nsRect
groupBounds
=
aWrappingItem
-
>
GetBounds
(
aDisplayListBuilder
&
snapped
)
;
DIGroup
&
group
=
groupData
-
>
mSubGroup
;
auto
p
=
group
.
mGroupBounds
;
auto
q
=
groupBounds
;
gfx
:
:
Size
scale
=
aSc
.
GetInheritedScale
(
)
;
auto
trans
=
ViewAs
<
LayerPixel
>
(
aSc
.
GetSnappingSurfaceTransform
(
)
.
GetTranslation
(
)
)
;
auto
snappedTrans
=
LayerIntPoint
:
:
Floor
(
trans
)
;
LayerPoint
residualOffset
=
trans
-
snappedTrans
;
GP
(
"
Inherrited
scale
%
f
%
f
\
n
"
scale
.
width
scale
.
height
)
;
GP
(
"
Bounds
:
%
d
%
d
%
d
%
d
vs
%
d
%
d
%
d
%
d
\
n
"
p
.
x
p
.
y
p
.
width
p
.
height
q
.
x
q
.
y
q
.
width
q
.
height
)
;
if
(
!
group
.
mGroupBounds
.
IsEqualEdges
(
groupBounds
)
|
|
group
.
mAppUnitsPerDevPixel
!
=
appUnitsPerDevPixel
|
|
group
.
mScale
!
=
scale
|
|
group
.
mResidualOffset
!
=
residualOffset
)
{
if
(
group
.
mAppUnitsPerDevPixel
!
=
appUnitsPerDevPixel
)
{
GP
(
"
app
unit
%
d
%
d
\
n
"
group
.
mAppUnitsPerDevPixel
appUnitsPerDevPixel
)
;
}
auto
p
=
group
.
mGroupBounds
;
auto
q
=
groupBounds
;
GP
(
"
Bounds
change
:
%
d
%
d
%
d
%
d
vs
%
d
%
d
%
d
%
d
\
n
"
p
.
x
p
.
y
p
.
width
p
.
height
q
.
x
q
.
y
q
.
width
q
.
height
)
;
group
.
ClearItems
(
)
;
if
(
group
.
mKey
)
{
MOZ_RELEASE_ASSERT
(
group
.
mInvalidRect
.
IsEmpty
(
)
)
;
mManager
-
>
AddImageKeyForDiscard
(
group
.
mKey
.
value
(
)
)
;
group
.
mKey
=
Nothing
(
)
;
}
}
FrameMetrics
:
:
ViewID
scrollId
=
FrameMetrics
:
:
NULL_SCROLL_ID
;
if
(
const
ActiveScrolledRoot
*
asr
=
aWrappingItem
-
>
GetActiveScrolledRoot
(
)
)
{
scrollId
=
asr
-
>
GetViewId
(
)
;
}
g
.
mAppUnitsPerDevPixel
=
appUnitsPerDevPixel
;
group
.
mResidualOffset
=
residualOffset
;
group
.
mGroupBounds
=
groupBounds
;
group
.
mPaintRect
=
LayoutDeviceRect
:
:
FromAppUnits
(
aWrappingItem
-
>
GetPaintRect
(
)
appUnitsPerDevPixel
)
;
group
.
mAppUnitsPerDevPixel
=
appUnitsPerDevPixel
;
group
.
mLayerBounds
=
LayerIntRect
:
:
FromUnknownRect
(
ScaleToOutsidePixelsOffset
(
group
.
mGroupBounds
scale
.
width
scale
.
height
group
.
mAppUnitsPerDevPixel
residualOffset
)
)
;
g
.
mTransform
=
Matrix
:
:
Scaling
(
scale
.
width
scale
.
height
)
.
PostTranslate
(
residualOffset
.
x
residualOffset
.
y
)
;
group
.
mScale
=
scale
;
group
.
mScrollId
=
scrollId
;
group
.
mAnimatedGeometryRootOrigin
=
group
.
mGroupBounds
.
TopLeft
(
)
;
g
.
ConstructGroups
(
aDisplayListBuilder
this
aBuilder
aResources
&
group
aList
aSc
)
;
mClipManager
.
EndList
(
aSc
)
;
}
void
WebRenderCommandBuilder
:
:
Destroy
(
)
{
mLastCanvasDatas
.
Clear
(
)
;
ClearCachedResources
(
)
;
}
void
WebRenderCommandBuilder
:
:
EmptyTransaction
(
)
{
for
(
auto
iter
=
mLastCanvasDatas
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
RefPtr
<
WebRenderCanvasData
>
canvasData
=
iter
.
Get
(
)
-
>
GetKey
(
)
;
WebRenderCanvasRendererAsync
*
canvas
=
canvasData
-
>
GetCanvasRenderer
(
)
;
if
(
canvas
)
{
canvas
-
>
UpdateCompositableClientForEmptyTransaction
(
)
;
}
}
}
bool
WebRenderCommandBuilder
:
:
NeedsEmptyTransaction
(
)
{
return
!
mLastCanvasDatas
.
IsEmpty
(
)
;
}
void
WebRenderCommandBuilder
:
:
BuildWebRenderCommands
(
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResourceUpdates
nsDisplayList
*
aDisplayList
nsDisplayListBuilder
*
aDisplayListBuilder
WebRenderScrollData
&
aScrollData
wr
:
:
LayoutSize
&
aContentSize
const
nsTArray
<
wr
:
:
WrFilterOp
>
&
aFilters
)
{
StackingContextHelper
sc
;
aScrollData
=
WebRenderScrollData
(
mManager
)
;
MOZ_ASSERT
(
mLayerScrollData
.
empty
(
)
)
;
mLastCanvasDatas
.
Clear
(
)
;
mLastAsr
=
nullptr
;
mBuilderDumpIndex
=
0
;
MOZ_ASSERT
(
mDumpIndent
=
=
0
)
;
mClipManager
.
BeginBuild
(
mManager
aBuilder
)
;
{
StackingContextHelper
pageRootSc
(
sc
aBuilder
aFilters
)
;
if
(
ShouldDumpDisplayList
(
)
)
{
mBuilderDumpIndex
=
aBuilder
.
Dump
(
mDumpIndent
+
1
Some
(
mBuilderDumpIndex
)
Nothing
(
)
)
;
}
CreateWebRenderCommandsFromDisplayList
(
aDisplayList
nullptr
aDisplayListBuilder
pageRootSc
aBuilder
aResourceUpdates
)
;
}
mLayerScrollData
.
emplace_back
(
)
;
mLayerScrollData
.
back
(
)
.
InitializeRoot
(
mLayerScrollData
.
size
(
)
-
1
)
;
auto
callback
=
[
&
aScrollData
]
(
FrameMetrics
:
:
ViewID
aScrollId
)
-
>
bool
{
return
aScrollData
.
HasMetadataFor
(
aScrollId
)
.
isSome
(
)
;
}
;
if
(
Maybe
<
ScrollMetadata
>
rootMetadata
=
nsLayoutUtils
:
:
GetRootMetadata
(
aDisplayListBuilder
mManager
ContainerLayerParameters
(
)
callback
)
)
{
mLayerScrollData
.
back
(
)
.
AppendScrollMetadata
(
aScrollData
rootMetadata
.
ref
(
)
)
;
}
for
(
auto
i
=
mLayerScrollData
.
crbegin
(
)
;
i
!
=
mLayerScrollData
.
crend
(
)
;
i
+
+
)
{
aScrollData
.
AddLayerData
(
*
i
)
;
}
mLayerScrollData
.
clear
(
)
;
mClipManager
.
EndBuild
(
)
;
RemoveUnusedAndResetWebRenderUserData
(
)
;
}
bool
WebRenderCommandBuilder
:
:
ShouldDumpDisplayList
(
)
{
return
(
XRE_IsParentProcess
(
)
&
&
gfxPrefs
:
:
WebRenderDLDumpParent
(
)
)
|
|
(
XRE_IsContentProcess
(
)
&
&
gfxPrefs
:
:
WebRenderDLDumpContent
(
)
)
;
}
void
WebRenderCommandBuilder
:
:
CreateWebRenderCommandsFromDisplayList
(
nsDisplayList
*
aDisplayList
nsDisplayItem
*
aWrappingItem
nsDisplayListBuilder
*
aDisplayListBuilder
const
StackingContextHelper
&
aSc
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
)
{
if
(
mDoGrouping
)
{
MOZ_RELEASE_ASSERT
(
aWrappingItem
"
Only
the
root
list
should
have
a
null
wrapping
item
and
mDoGrouping
should
never
be
true
for
the
root
list
.
"
)
;
GP
(
"
actually
entering
the
grouping
code
\
n
"
)
;
DoGroupingForDisplayList
(
aDisplayList
aWrappingItem
aDisplayListBuilder
aSc
aBuilder
aResources
)
;
return
;
}
bool
dumpEnabled
=
ShouldDumpDisplayList
(
)
;
if
(
dumpEnabled
)
{
mBuilderDumpIndex
=
aBuilder
.
Dump
(
mDumpIndent
+
1
Some
(
mBuilderDumpIndex
)
Nothing
(
)
)
;
}
mDumpIndent
+
+
;
mClipManager
.
BeginList
(
aSc
)
;
bool
apzEnabled
=
mManager
-
>
AsyncPanZoomEnabled
(
)
;
FlattenedDisplayItemIterator
iter
(
aDisplayListBuilder
aDisplayList
)
;
while
(
nsDisplayItem
*
i
=
iter
.
GetNext
(
)
)
{
nsDisplayItem
*
item
=
i
;
DisplayItemType
itemType
=
item
-
>
GetType
(
)
;
AutoTArray
<
nsDisplayItem
*
1
>
mergedItems
;
mergedItems
.
AppendElement
(
item
)
;
while
(
nsDisplayItem
*
peek
=
iter
.
PeekNext
(
)
)
{
if
(
!
item
-
>
CanMerge
(
peek
)
)
{
break
;
}
mergedItems
.
AppendElement
(
peek
)
;
i
=
iter
.
GetNext
(
)
;
}
if
(
mergedItems
.
Length
(
)
>
1
)
{
item
=
aDisplayListBuilder
-
>
MergeItems
(
mergedItems
)
;
MOZ_ASSERT
(
item
&
&
itemType
=
=
item
-
>
GetType
(
)
)
;
}
bool
forceNewLayerData
=
false
;
size_t
layerCountBeforeRecursing
=
mLayerScrollData
.
size
(
)
;
if
(
apzEnabled
)
{
forceNewLayerData
=
item
-
>
UpdateScrollData
(
nullptr
nullptr
)
;
const
ActiveScrolledRoot
*
asr
=
item
-
>
GetActiveScrolledRoot
(
)
;
if
(
asr
!
=
mLastAsr
)
{
mLastAsr
=
asr
;
forceNewLayerData
=
true
;
}
if
(
forceNewLayerData
)
{
mAsrStack
.
push_back
(
asr
)
;
}
}
mClipManager
.
BeginItem
(
item
aSc
)
;
{
AutoRestore
<
bool
>
restoreDoGrouping
(
mDoGrouping
)
;
if
(
itemType
=
=
DisplayItemType
:
:
TYPE_SVG_WRAPPER
)
{
mDoGrouping
=
true
;
GP
(
"
attempting
to
enter
the
grouping
code
\
n
"
)
;
}
if
(
dumpEnabled
)
{
std
:
:
stringstream
ss
;
nsFrame
:
:
PrintDisplayItem
(
aDisplayListBuilder
item
ss
static_cast
<
uint32_t
>
(
mDumpIndent
)
)
;
printf_stderr
(
"
%
s
"
ss
.
str
(
)
.
c_str
(
)
)
;
}
item
-
>
SetPaintRect
(
item
-
>
GetBuildingRect
(
)
)
;
bool
createdWRCommands
=
item
-
>
CreateWebRenderCommands
(
aBuilder
aResources
aSc
mManager
aDisplayListBuilder
)
;
if
(
!
createdWRCommands
)
{
PushItemAsImage
(
item
aBuilder
aResources
aSc
aDisplayListBuilder
)
;
}
if
(
dumpEnabled
)
{
mBuilderDumpIndex
=
aBuilder
.
Dump
(
mDumpIndent
+
1
Some
(
mBuilderDumpIndex
)
Nothing
(
)
)
;
}
}
if
(
apzEnabled
)
{
if
(
forceNewLayerData
)
{
mAsrStack
.
pop_back
(
)
;
const
ActiveScrolledRoot
*
stopAtAsr
=
mAsrStack
.
empty
(
)
?
nullptr
:
mAsrStack
.
back
(
)
;
int32_t
descendants
=
mLayerScrollData
.
size
(
)
-
layerCountBeforeRecursing
;
Maybe
<
nsDisplayTransform
*
>
deferred
=
aSc
.
GetDeferredTransformItem
(
)
;
if
(
deferred
&
&
(
*
deferred
)
-
>
GetActiveScrolledRoot
(
)
!
=
item
-
>
GetActiveScrolledRoot
(
)
)
{
mLayerScrollData
.
emplace_back
(
)
;
mLayerScrollData
.
back
(
)
.
Initialize
(
mManager
-
>
GetScrollData
(
)
item
descendants
(
*
deferred
)
-
>
GetActiveScrolledRoot
(
)
Nothing
(
)
)
;
descendants
+
+
;
mLayerScrollData
.
emplace_back
(
)
;
mLayerScrollData
.
back
(
)
.
Initialize
(
mManager
-
>
GetScrollData
(
)
*
deferred
descendants
stopAtAsr
Some
(
(
*
deferred
)
-
>
GetTransform
(
)
.
GetMatrix
(
)
)
)
;
}
else
{
mLayerScrollData
.
emplace_back
(
)
;
mLayerScrollData
.
back
(
)
.
Initialize
(
mManager
-
>
GetScrollData
(
)
item
descendants
stopAtAsr
deferred
?
Some
(
(
*
deferred
)
-
>
GetTransform
(
)
.
GetMatrix
(
)
)
:
Nothing
(
)
)
;
}
}
}
}
mDumpIndent
-
-
;
mClipManager
.
EndList
(
aSc
)
;
}
void
WebRenderCommandBuilder
:
:
PushOverrideForASR
(
const
ActiveScrolledRoot
*
aASR
const
Maybe
<
wr
:
:
WrClipId
>
&
aClipId
)
{
mClipManager
.
PushOverrideForASR
(
aASR
aClipId
)
;
}
void
WebRenderCommandBuilder
:
:
PopOverrideForASR
(
const
ActiveScrolledRoot
*
aASR
)
{
mClipManager
.
PopOverrideForASR
(
aASR
)
;
}
Maybe
<
wr
:
:
ImageKey
>
WebRenderCommandBuilder
:
:
CreateImageKey
(
nsDisplayItem
*
aItem
ImageContainer
*
aContainer
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
gfx
:
:
IntSize
&
aSize
const
Maybe
<
LayoutDeviceRect
>
&
aAsyncImageBounds
)
{
RefPtr
<
WebRenderImageData
>
imageData
=
CreateOrRecycleWebRenderUserData
<
WebRenderImageData
>
(
aItem
)
;
MOZ_ASSERT
(
imageData
)
;
if
(
aContainer
-
>
IsAsync
(
)
)
{
MOZ_ASSERT
(
aAsyncImageBounds
)
;
LayoutDeviceRect
rect
=
aAsyncImageBounds
.
value
(
)
;
LayoutDeviceRect
scBounds
(
LayoutDevicePoint
(
0
0
)
rect
.
Size
(
)
)
;
gfx
:
:
MaybeIntSize
scaleToSize
;
if
(
!
aContainer
-
>
GetScaleHint
(
)
.
IsEmpty
(
)
)
{
scaleToSize
=
Some
(
aContainer
-
>
GetScaleHint
(
)
)
;
}
gfx
:
:
Matrix4x4
transform
=
gfx
:
:
Matrix4x4
:
:
From2D
(
aContainer
-
>
GetTransformHint
(
)
)
;
imageData
-
>
CreateAsyncImageWebRenderCommands
(
aBuilder
aContainer
aSc
rect
scBounds
transform
scaleToSize
wr
:
:
ImageRendering
:
:
Auto
wr
:
:
MixBlendMode
:
:
Normal
!
aItem
-
>
BackfaceIsHidden
(
)
)
;
return
Nothing
(
)
;
}
AutoLockImage
autoLock
(
aContainer
)
;
if
(
!
autoLock
.
HasImage
(
)
)
{
return
Nothing
(
)
;
}
mozilla
:
:
layers
:
:
Image
*
image
=
autoLock
.
GetImage
(
)
;
aSize
=
image
-
>
GetSize
(
)
;
return
imageData
-
>
UpdateImageKey
(
aContainer
aResources
)
;
}
bool
WebRenderCommandBuilder
:
:
PushImage
(
nsDisplayItem
*
aItem
ImageContainer
*
aContainer
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
const
LayoutDeviceRect
&
aRect
)
{
gfx
:
:
IntSize
size
;
Maybe
<
wr
:
:
ImageKey
>
key
=
CreateImageKey
(
aItem
aContainer
aBuilder
aResources
aSc
size
Some
(
aRect
)
)
;
if
(
aContainer
-
>
IsAsync
(
)
)
{
MOZ_ASSERT
(
key
.
isNothing
(
)
)
;
return
true
;
}
if
(
!
key
)
{
return
false
;
}
auto
r
=
wr
:
:
ToRoundedLayoutRect
(
aRect
)
;
gfx
:
:
SamplingFilter
sampleFilter
=
nsLayoutUtils
:
:
GetSamplingFilterForFrame
(
aItem
-
>
Frame
(
)
)
;
aBuilder
.
PushImage
(
r
r
!
aItem
-
>
BackfaceIsHidden
(
)
wr
:
:
ToImageRendering
(
sampleFilter
)
key
.
value
(
)
)
;
return
true
;
}
static
bool
PaintByLayer
(
nsDisplayItem
*
aItem
nsDisplayListBuilder
*
aDisplayListBuilder
const
RefPtr
<
BasicLayerManager
>
&
aManager
gfxContext
*
aContext
const
gfx
:
:
Size
&
aScale
const
std
:
:
function
<
void
(
)
>
&
aPaintFunc
)
{
UniquePtr
<
LayerProperties
>
props
;
if
(
aManager
-
>
GetRoot
(
)
)
{
props
=
LayerProperties
:
:
CloneFrom
(
aManager
-
>
GetRoot
(
)
)
;
}
FrameLayerBuilder
*
layerBuilder
=
new
FrameLayerBuilder
(
)
;
layerBuilder
-
>
Init
(
aDisplayListBuilder
aManager
nullptr
true
)
;
layerBuilder
-
>
DidBeginRetainedLayerTransaction
(
aManager
)
;
aManager
-
>
SetDefaultTarget
(
aContext
)
;
aManager
-
>
BeginTransactionWithTarget
(
aContext
)
;
bool
isInvalidated
=
false
;
ContainerLayerParameters
param
(
aScale
.
width
aScale
.
height
)
;
RefPtr
<
Layer
>
root
=
aItem
-
>
BuildLayer
(
aDisplayListBuilder
aManager
param
)
;
if
(
root
)
{
aManager
-
>
SetRoot
(
root
)
;
layerBuilder
-
>
WillEndTransaction
(
)
;
aPaintFunc
(
)
;
nsIntRegion
invalid
;
if
(
props
)
{
props
-
>
ComputeDifferences
(
root
invalid
nullptr
)
;
if
(
!
invalid
.
IsEmpty
(
)
)
{
isInvalidated
=
true
;
}
}
else
{
isInvalidated
=
true
;
}
}
#
ifdef
MOZ_DUMP_PAINTING
if
(
gfxUtils
:
:
DumpDisplayList
(
)
|
|
gfxEnv
:
:
DumpPaint
(
)
)
{
fprintf_stderr
(
gfxUtils
:
:
sDumpPaintFile
"
Basic
layer
tree
for
painting
contents
of
display
item
%
s
(
%
p
)
:
\
n
"
aItem
-
>
Name
(
)
aItem
-
>
Frame
(
)
)
;
std
:
:
stringstream
stream
;
aManager
-
>
Dump
(
stream
"
"
gfxEnv
:
:
DumpPaintToFile
(
)
)
;
fprint_stderr
(
gfxUtils
:
:
sDumpPaintFile
stream
)
;
}
#
endif
if
(
aManager
-
>
InTransaction
(
)
)
{
aManager
-
>
AbortTransaction
(
)
;
}
aManager
-
>
SetTarget
(
nullptr
)
;
aManager
-
>
SetDefaultTarget
(
nullptr
)
;
return
isInvalidated
;
}
static
bool
PaintItemByDrawTarget
(
nsDisplayItem
*
aItem
gfx
:
:
DrawTarget
*
aDT
const
LayerRect
&
aImageRect
const
LayoutDevicePoint
&
aOffset
nsDisplayListBuilder
*
aDisplayListBuilder
const
RefPtr
<
BasicLayerManager
>
&
aManager
const
gfx
:
:
Size
&
aScale
Maybe
<
gfx
:
:
Color
>
&
aHighlight
)
{
MOZ_ASSERT
(
aDT
)
;
bool
isInvalidated
=
false
;
aDT
-
>
ClearRect
(
aImageRect
.
ToUnknownRect
(
)
)
;
RefPtr
<
gfxContext
>
context
=
gfxContext
:
:
CreateOrNull
(
aDT
)
;
MOZ_ASSERT
(
context
)
;
switch
(
aItem
-
>
GetType
(
)
)
{
case
DisplayItemType
:
:
TYPE_MASK
:
context
-
>
SetMatrix
(
context
-
>
CurrentMatrix
(
)
.
PreScale
(
aScale
.
width
aScale
.
height
)
.
PreTranslate
(
-
aOffset
.
x
-
aOffset
.
y
)
)
;
static_cast
<
nsDisplayMask
*
>
(
aItem
)
-
>
PaintMask
(
aDisplayListBuilder
context
&
isInvalidated
)
;
break
;
case
DisplayItemType
:
:
TYPE_SVG_WRAPPER
:
{
context
-
>
SetMatrix
(
context
-
>
CurrentMatrix
(
)
.
PreTranslate
(
-
aOffset
.
x
-
aOffset
.
y
)
)
;
isInvalidated
=
PaintByLayer
(
aItem
aDisplayListBuilder
aManager
context
aScale
[
&
]
(
)
{
aManager
-
>
EndTransaction
(
FrameLayerBuilder
:
:
DrawPaintedLayer
aDisplayListBuilder
)
;
}
)
;
break
;
}
case
DisplayItemType
:
:
TYPE_FILTER
:
{
context
-
>
SetMatrix
(
context
-
>
CurrentMatrix
(
)
.
PreTranslate
(
-
aOffset
.
x
-
aOffset
.
y
)
)
;
isInvalidated
=
PaintByLayer
(
aItem
aDisplayListBuilder
aManager
context
aScale
[
&
]
(
)
{
static_cast
<
nsDisplayFilter
*
>
(
aItem
)
-
>
PaintAsLayer
(
aDisplayListBuilder
context
aManager
)
;
}
)
;
break
;
}
default
:
context
-
>
SetMatrix
(
context
-
>
CurrentMatrix
(
)
.
PreScale
(
aScale
.
width
aScale
.
height
)
.
PreTranslate
(
-
aOffset
.
x
-
aOffset
.
y
)
)
;
aItem
-
>
Paint
(
aDisplayListBuilder
context
)
;
isInvalidated
=
true
;
break
;
}
if
(
aItem
-
>
GetType
(
)
!
=
DisplayItemType
:
:
TYPE_MASK
)
{
if
(
aHighlight
)
{
aDT
-
>
SetTransform
(
gfx
:
:
Matrix
(
)
)
;
aDT
-
>
FillRect
(
gfx
:
:
Rect
(
0
0
aImageRect
.
Width
(
)
aImageRect
.
Height
(
)
)
gfx
:
:
ColorPattern
(
aHighlight
.
value
(
)
)
)
;
}
if
(
aItem
-
>
Frame
(
)
-
>
PresContext
(
)
-
>
GetPaintFlashing
(
)
&
&
isInvalidated
)
{
aDT
-
>
SetTransform
(
gfx
:
:
Matrix
(
)
)
;
float
r
=
float
(
rand
(
)
)
/
RAND_MAX
;
float
g
=
float
(
rand
(
)
)
/
RAND_MAX
;
float
b
=
float
(
rand
(
)
)
/
RAND_MAX
;
aDT
-
>
FillRect
(
gfx
:
:
Rect
(
0
0
aImageRect
.
Width
(
)
aImageRect
.
Height
(
)
)
gfx
:
:
ColorPattern
(
gfx
:
:
Color
(
r
g
b
0
.
5
)
)
)
;
}
}
return
isInvalidated
;
}
already_AddRefed
<
WebRenderFallbackData
>
WebRenderCommandBuilder
:
:
GenerateFallbackData
(
nsDisplayItem
*
aItem
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
nsDisplayListBuilder
*
aDisplayListBuilder
LayoutDeviceRect
&
aImageRect
)
{
bool
useBlobImage
=
gfxPrefs
:
:
WebRenderBlobImages
(
)
&
&
!
aItem
-
>
MustPaintOnContentSide
(
)
;
Maybe
<
gfx
:
:
Color
>
highlight
=
Nothing
(
)
;
if
(
gfxPrefs
:
:
WebRenderHighlightPaintedLayers
(
)
)
{
highlight
=
Some
(
useBlobImage
?
gfx
:
:
Color
(
1
.
0
0
.
0
0
.
0
0
.
5
)
:
gfx
:
:
Color
(
1
.
0
1
.
0
0
.
0
0
.
5
)
)
;
}
RefPtr
<
WebRenderFallbackData
>
fallbackData
=
CreateOrRecycleWebRenderUserData
<
WebRenderFallbackData
>
(
aItem
)
;
bool
snap
;
nsRect
itemBounds
=
aItem
-
>
GetBounds
(
aDisplayListBuilder
&
snap
)
;
nsRect
paintBounds
=
itemBounds
;
if
(
useBlobImage
|
|
aItem
-
>
MustPaintOnContentSide
(
)
)
{
paintBounds
=
itemBounds
;
}
else
{
paintBounds
=
aItem
-
>
GetClippedBounds
(
aDisplayListBuilder
)
;
}
nsRegion
visibleRegion
(
paintBounds
)
;
aItem
-
>
SetPaintRect
(
paintBounds
)
;
aItem
-
>
ComputeVisibility
(
aDisplayListBuilder
&
visibleRegion
)
;
const
int32_t
appUnitsPerDevPixel
=
aItem
-
>
Frame
(
)
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
LayoutDeviceRect
bounds
=
LayoutDeviceRect
:
:
FromAppUnits
(
paintBounds
appUnitsPerDevPixel
)
;
gfx
:
:
Size
scale
=
aSc
.
GetInheritedScale
(
)
;
gfx
:
:
Size
oldScale
=
fallbackData
-
>
GetScale
(
)
;
bool
differentScale
=
gfx
:
:
FuzzyEqual
(
scale
.
width
oldScale
.
width
1e
-
6f
)
&
&
gfx
:
:
FuzzyEqual
(
scale
.
height
oldScale
.
height
1e
-
6f
)
;
LayerIntSize
paintSize
=
RoundedToInt
(
LayerSize
(
bounds
.
Width
(
)
*
scale
.
width
bounds
.
Height
(
)
*
scale
.
height
)
)
;
if
(
paintSize
.
width
=
=
0
|
|
paintSize
.
height
=
=
0
)
{
return
nullptr
;
}
auto
scaledBounds
=
bounds
*
LayoutDeviceToLayerScale
(
1
)
;
scaledBounds
.
Scale
(
scale
.
width
scale
.
height
)
;
LayerIntSize
dtSize
=
RoundedToInt
(
scaledBounds
)
.
Size
(
)
;
if
(
dtSize
.
width
<
=
0
|
|
dtSize
.
height
<
=
0
)
{
return
nullptr
;
}
bool
needPaint
=
true
;
LayoutDeviceIntPoint
offset
=
RoundedToInt
(
bounds
.
TopLeft
(
)
)
;
aImageRect
=
LayoutDeviceRect
(
offset
LayoutDeviceSize
(
RoundedToInt
(
bounds
)
.
Size
(
)
)
)
;
LayerRect
paintRect
=
LayerRect
(
LayerPoint
(
0
0
)
LayerSize
(
paintSize
)
)
;
nsDisplayItemGeometry
*
geometry
=
fallbackData
-
>
GetGeometry
(
)
;
if
(
geometry
&
&
!
fallbackData
-
>
IsInvalid
(
)
&
&
aItem
-
>
GetType
(
)
!
=
DisplayItemType
:
:
TYPE_FILTER
&
&
aItem
-
>
GetType
(
)
!
=
DisplayItemType
:
:
TYPE_SVG_WRAPPER
&
&
differentScale
)
{
nsRect
invalid
;
nsRegion
invalidRegion
;
if
(
aItem
-
>
IsInvalid
(
invalid
)
)
{
invalidRegion
.
OrWith
(
paintBounds
)
;
}
else
{
nsPoint
shift
=
itemBounds
.
TopLeft
(
)
-
geometry
-
>
mBounds
.
TopLeft
(
)
;
geometry
-
>
MoveBy
(
shift
)
;
aItem
-
>
ComputeInvalidationRegion
(
aDisplayListBuilder
geometry
&
invalidRegion
)
;
nsRect
lastBounds
=
fallbackData
-
>
GetBounds
(
)
;
lastBounds
.
MoveBy
(
shift
)
;
if
(
!
lastBounds
.
IsEqualInterior
(
paintBounds
)
)
{
invalidRegion
.
OrWith
(
lastBounds
)
;
invalidRegion
.
OrWith
(
paintBounds
)
;
}
}
needPaint
=
!
invalidRegion
.
IsEmpty
(
)
;
}
if
(
needPaint
|
|
!
fallbackData
-
>
GetKey
(
)
)
{
nsAutoPtr
<
nsDisplayItemGeometry
>
newGeometry
;
newGeometry
=
aItem
-
>
AllocateGeometry
(
aDisplayListBuilder
)
;
fallbackData
-
>
SetGeometry
(
std
:
:
move
(
newGeometry
)
)
;
gfx
:
:
SurfaceFormat
format
=
aItem
-
>
GetType
(
)
=
=
DisplayItemType
:
:
TYPE_MASK
?
gfx
:
:
SurfaceFormat
:
:
A8
:
gfx
:
:
SurfaceFormat
:
:
B8G8R8A8
;
if
(
useBlobImage
)
{
bool
snapped
;
bool
isOpaque
=
aItem
-
>
GetOpaqueRegion
(
aDisplayListBuilder
&
snapped
)
.
Contains
(
paintBounds
)
;
RefPtr
<
WebRenderDrawEventRecorder
>
recorder
=
MakeAndAddRef
<
WebRenderDrawEventRecorder
>
(
[
&
]
(
MemStream
&
aStream
std
:
:
vector
<
RefPtr
<
UnscaledFont
>
>
&
aUnscaledFonts
)
{
size_t
count
=
aUnscaledFonts
.
size
(
)
;
aStream
.
write
(
(
const
char
*
)
&
count
sizeof
(
count
)
)
;
for
(
auto
unscaled
:
aUnscaledFonts
)
{
wr
:
:
FontKey
key
=
mManager
-
>
WrBridge
(
)
-
>
GetFontKeyForUnscaledFont
(
unscaled
)
;
aStream
.
write
(
(
const
char
*
)
&
key
sizeof
(
key
)
)
;
}
}
)
;
RefPtr
<
gfx
:
:
DrawTarget
>
dummyDt
=
gfx
:
:
Factory
:
:
CreateDrawTarget
(
gfx
:
:
BackendType
:
:
SKIA
gfx
:
:
IntSize
(
1
1
)
format
)
;
RefPtr
<
gfx
:
:
DrawTarget
>
dt
=
gfx
:
:
Factory
:
:
CreateRecordingDrawTarget
(
recorder
dummyDt
dtSize
.
ToUnknownSize
(
)
)
;
if
(
!
fallbackData
-
>
mBasicLayerManager
)
{
fallbackData
-
>
mBasicLayerManager
=
new
BasicLayerManager
(
BasicLayerManager
:
:
BLM_INACTIVE
)
;
}
bool
isInvalidated
=
PaintItemByDrawTarget
(
aItem
dt
paintRect
offset
aDisplayListBuilder
fallbackData
-
>
mBasicLayerManager
scale
highlight
)
;
recorder
-
>
FlushItem
(
IntRect
(
0
0
paintSize
.
width
paintSize
.
height
)
)
;
TakeExternalSurfaces
(
recorder
fallbackData
-
>
mExternalSurfaces
mManager
aResources
)
;
recorder
-
>
Finish
(
)
;
if
(
isInvalidated
)
{
Range
<
uint8_t
>
bytes
(
(
uint8_t
*
)
recorder
-
>
mOutputStream
.
mData
recorder
-
>
mOutputStream
.
mLength
)
;
wr
:
:
ImageKey
key
=
mManager
-
>
WrBridge
(
)
-
>
GetNextImageKey
(
)
;
wr
:
:
ImageDescriptor
descriptor
(
dtSize
.
ToUnknownSize
(
)
0
dt
-
>
GetFormat
(
)
isOpaque
)
;
if
(
!
aResources
.
AddBlobImage
(
key
descriptor
bytes
)
)
{
return
nullptr
;
}
fallbackData
-
>
SetKey
(
key
)
;
}
else
{
if
(
!
fallbackData
-
>
GetKey
(
)
.
isSome
(
)
)
{
return
nullptr
;
}
}
}
else
{
fallbackData
-
>
CreateImageClientIfNeeded
(
)
;
RefPtr
<
ImageClient
>
imageClient
=
fallbackData
-
>
GetImageClient
(
)
;
RefPtr
<
ImageContainer
>
imageContainer
=
LayerManager
:
:
CreateImageContainer
(
)
;
bool
isInvalidated
=
false
;
{
UpdateImageHelper
helper
(
imageContainer
imageClient
dtSize
.
ToUnknownSize
(
)
format
)
;
{
RefPtr
<
gfx
:
:
DrawTarget
>
dt
=
helper
.
GetDrawTarget
(
)
;
if
(
!
dt
)
{
return
nullptr
;
}
if
(
!
fallbackData
-
>
mBasicLayerManager
)
{
fallbackData
-
>
mBasicLayerManager
=
new
BasicLayerManager
(
mManager
-
>
GetWidget
(
)
)
;
}
isInvalidated
=
PaintItemByDrawTarget
(
aItem
dt
paintRect
offset
aDisplayListBuilder
fallbackData
-
>
mBasicLayerManager
scale
highlight
)
;
}
if
(
isInvalidated
)
{
if
(
!
helper
.
UpdateImage
(
)
)
{
return
nullptr
;
}
}
else
{
if
(
!
fallbackData
-
>
GetKey
(
)
.
isSome
(
)
)
{
return
nullptr
;
}
}
}
if
(
isInvalidated
&
&
!
fallbackData
-
>
UpdateImageKey
(
imageContainer
aResources
true
)
)
{
return
nullptr
;
}
}
fallbackData
-
>
SetScale
(
scale
)
;
fallbackData
-
>
SetInvalid
(
false
)
;
}
fallbackData
-
>
SetBounds
(
paintBounds
)
;
MOZ_ASSERT
(
fallbackData
-
>
GetKey
(
)
)
;
return
fallbackData
.
forget
(
)
;
}
Maybe
<
wr
:
:
WrImageMask
>
WebRenderCommandBuilder
:
:
BuildWrMaskImage
(
nsDisplayItem
*
aItem
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
nsDisplayListBuilder
*
aDisplayListBuilder
const
LayoutDeviceRect
&
aBounds
)
{
LayoutDeviceRect
imageRect
;
RefPtr
<
WebRenderFallbackData
>
fallbackData
=
GenerateFallbackData
(
aItem
aBuilder
aResources
aSc
aDisplayListBuilder
imageRect
)
;
if
(
!
fallbackData
)
{
return
Nothing
(
)
;
}
wr
:
:
WrImageMask
imageMask
;
imageMask
.
image
=
fallbackData
-
>
GetKey
(
)
.
value
(
)
;
imageMask
.
rect
=
wr
:
:
ToRoundedLayoutRect
(
aBounds
)
;
imageMask
.
repeat
=
false
;
return
Some
(
imageMask
)
;
}
bool
WebRenderCommandBuilder
:
:
PushItemAsImage
(
nsDisplayItem
*
aItem
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
nsDisplayListBuilder
*
aDisplayListBuilder
)
{
LayoutDeviceRect
imageRect
;
RefPtr
<
WebRenderFallbackData
>
fallbackData
=
GenerateFallbackData
(
aItem
aBuilder
aResources
aSc
aDisplayListBuilder
imageRect
)
;
if
(
!
fallbackData
)
{
return
false
;
}
wr
:
:
LayoutRect
dest
=
wr
:
:
ToRoundedLayoutRect
(
imageRect
)
;
gfx
:
:
SamplingFilter
sampleFilter
=
nsLayoutUtils
:
:
GetSamplingFilterForFrame
(
aItem
-
>
Frame
(
)
)
;
aBuilder
.
PushImage
(
dest
dest
!
aItem
-
>
BackfaceIsHidden
(
)
wr
:
:
ToImageRendering
(
sampleFilter
)
fallbackData
-
>
GetKey
(
)
.
value
(
)
)
;
return
true
;
}
void
WebRenderCommandBuilder
:
:
RemoveUnusedAndResetWebRenderUserData
(
)
{
for
(
auto
iter
=
mWebRenderUserDatas
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
WebRenderUserData
*
data
=
iter
.
Get
(
)
-
>
GetKey
(
)
;
if
(
!
data
-
>
IsUsed
(
)
)
{
nsIFrame
*
frame
=
data
-
>
GetFrame
(
)
;
MOZ_ASSERT
(
frame
-
>
HasProperty
(
WebRenderUserDataProperty
:
:
Key
(
)
)
)
;
WebRenderUserDataTable
*
userDataTable
=
frame
-
>
GetProperty
(
WebRenderUserDataProperty
:
:
Key
(
)
)
;
MOZ_ASSERT
(
userDataTable
-
>
Count
(
)
)
;
userDataTable
-
>
Remove
(
WebRenderUserDataKey
(
data
-
>
GetDisplayItemKey
(
)
data
-
>
GetType
(
)
)
)
;
if
(
!
userDataTable
-
>
Count
(
)
)
{
frame
-
>
RemoveProperty
(
WebRenderUserDataProperty
:
:
Key
(
)
)
;
delete
userDataTable
;
}
if
(
data
-
>
GetType
(
)
=
=
WebRenderUserData
:
:
UserDataType
:
:
eCanvas
)
{
mLastCanvasDatas
.
RemoveEntry
(
data
-
>
AsCanvasData
(
)
)
;
}
iter
.
Remove
(
)
;
continue
;
}
data
-
>
SetUsed
(
false
)
;
}
}
void
WebRenderCommandBuilder
:
:
ClearCachedResources
(
)
{
RemoveUnusedAndResetWebRenderUserData
(
)
;
MOZ_RELEASE_ASSERT
(
mWebRenderUserDatas
.
Count
(
)
=
=
0
)
;
}
WebRenderGroupData
:
:
WebRenderGroupData
(
WebRenderLayerManager
*
aWRManager
nsDisplayItem
*
aItem
)
:
WebRenderUserData
(
aWRManager
aItem
)
{
MOZ_COUNT_CTOR
(
WebRenderGroupData
)
;
}
WebRenderGroupData
:
:
~
WebRenderGroupData
(
)
{
MOZ_COUNT_DTOR
(
WebRenderGroupData
)
;
GP
(
"
Group
data
destruct
\
n
"
)
;
}
}
}
