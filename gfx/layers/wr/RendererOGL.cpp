#
include
"
RendererOGL
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
GLContextProvider
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
widget
/
CompositorWidget
.
h
"
#
include
"
base
/
task
.
h
"
namespace
mozilla
{
namespace
layers
{
UniquePtr
<
RendererOGL
>
RendererOGL
:
:
Create
(
already_AddRefed
<
RenderThread
>
aThread
already_AddRefed
<
widget
:
:
CompositorWidget
>
aWidget
WrRenderer
*
aWrRenderer
gfx
:
:
WindowId
aWindowId
CompositorBridgeParentBase
*
aBridge
)
{
RefPtr
<
widget
:
:
CompositorWidget
>
widget
=
aWidget
;
RefPtr
<
RenderThread
>
thread
=
aThread
;
MOZ_ASSERT
(
widget
)
;
MOZ_ASSERT
(
thread
)
;
MOZ_ASSERT
(
aWrRenderer
)
;
MOZ_ASSERT
(
RenderThread
:
:
IsInRenderThread
(
)
)
;
if
(
!
widget
|
|
!
thread
)
{
return
nullptr
;
}
RefPtr
<
gl
:
:
GLContext
>
gl
=
gl
:
:
GLContextProvider
:
:
CreateForCompositorWidget
(
widget
true
)
;
if
(
!
gl
)
{
return
nullptr
;
}
if
(
!
gl
-
>
MakeCurrent
(
)
)
{
return
nullptr
;
}
wr_gl_init
(
&
*
gl
)
;
return
UniquePtr
<
RendererOGL
>
(
new
RendererOGL
(
thread
.
forget
(
)
gl
.
forget
(
)
widget
.
forget
(
)
aWindowId
aWrRenderer
aBridge
)
)
;
}
RendererOGL
:
:
RendererOGL
(
already_AddRefed
<
RenderThread
>
aThread
already_AddRefed
<
gl
:
:
GLContext
>
aGL
already_AddRefed
<
widget
:
:
CompositorWidget
>
aWidget
gfx
:
:
WindowId
aWindowId
WrRenderer
*
aWrRenderer
CompositorBridgeParentBase
*
aBridge
)
:
mThread
(
aThread
)
mGL
(
aGL
)
mWidget
(
aWidget
)
mWrRenderer
(
aWrRenderer
)
mBridge
(
aBridge
)
mWindowId
(
aWindowId
)
{
MOZ_ASSERT
(
mThread
)
;
MOZ_ASSERT
(
mGL
)
;
MOZ_ASSERT
(
mWidget
)
;
MOZ_ASSERT
(
mWrRenderer
)
;
MOZ_ASSERT
(
mBridge
)
;
MOZ_COUNT_CTOR
(
RendererOGL
)
;
}
RendererOGL
:
:
~
RendererOGL
(
)
{
MOZ_COUNT_DTOR
(
RendererOGL
)
;
#
ifdef
MOZ_ENABLE_WEBRENDER
wr_renderer_delete
(
mWrRenderer
)
;
#
endif
}
void
RendererOGL
:
:
Update
(
)
{
wr_renderer_update
(
mWrRenderer
)
;
}
static
void
NotifyDidRender
(
CompositorBridgeParentBase
*
aBridge
uint64_t
aTransactionId
TimeStamp
aStart
TimeStamp
aEnd
)
{
}
bool
RendererOGL
:
:
Render
(
uint64_t
aTransactionId
)
{
TimeStamp
start
=
TimeStamp
:
:
Now
(
)
;
if
(
!
mGL
-
>
MakeCurrent
(
)
)
{
gfxCriticalNote
<
<
"
Failed
to
make
render
context
current
can
'
t
draw
.
"
;
return
false
;
}
mozilla
:
:
widget
:
:
WidgetRenderingContext
widgetContext
;
#
if
defined
(
XP_MACOSX
)
widgetContext
.
mGL
=
mGL
;
#
endif
if
(
!
mWidget
-
>
PreRender
(
&
widgetContext
)
)
{
return
false
;
}
mWidget
-
>
DrawWindowUnderlay
(
&
widgetContext
LayoutDeviceIntRect
(
)
)
;
auto
size
=
mWidget
-
>
GetClientSize
(
)
;
wr_renderer_render
(
mWrRenderer
size
.
width
size
.
height
)
;
mGL
-
>
SwapBuffers
(
)
;
mWidget
-
>
DrawWindowOverlay
(
&
widgetContext
LayoutDeviceIntRect
(
)
)
;
mWidget
-
>
PostRender
(
&
widgetContext
)
;
TimeStamp
end
=
TimeStamp
:
:
Now
(
)
;
CompositorThreadHolder
:
:
Loop
(
)
-
>
PostTask
(
NewRunnableFunction
(
&
NotifyDidRender
mBridge
aTransactionId
start
end
)
)
;
return
true
;
}
}
}
