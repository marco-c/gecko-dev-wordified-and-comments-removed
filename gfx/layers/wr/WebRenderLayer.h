#
ifndef
GFX_WEBRENDERLAYER_H
#
define
GFX_WEBRENDERLAYER_H
#
include
"
Layers
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderAPI
.
h
"
namespace
mozilla
{
namespace
wr
{
class
IpcResourceUpdateQueue
;
}
namespace
layers
{
class
ImageClientSingle
;
class
StackingContextHelper
;
class
WebRenderBridgeChild
;
class
WebRenderLayerManager
;
typedef
gfx
:
:
Matrix4x4Typed
<
LayerPixel
LayerPixel
>
BoundsTransformMatrix
;
class
WebRenderLayer
{
public
:
virtual
Layer
*
GetLayer
(
)
=
0
;
virtual
void
RenderLayer
(
wr
:
:
DisplayListBuilder
&
aBuilder
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
)
=
0
;
virtual
Maybe
<
wr
:
:
WrImageMask
>
RenderMaskLayer
(
const
StackingContextHelper
&
aSc
const
gfx
:
:
Matrix4x4
&
aTransform
wr
:
:
IpcResourceUpdateQueue
&
aResources
)
{
MOZ_ASSERT
(
false
)
;
return
Nothing
(
)
;
}
virtual
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetAsSourceSurface
(
)
{
return
nullptr
;
}
static
inline
WebRenderLayer
*
ToWebRenderLayer
(
Layer
*
aLayer
)
{
return
static_cast
<
WebRenderLayer
*
>
(
aLayer
-
>
ImplData
(
)
)
;
}
WebRenderLayerManager
*
WrManager
(
)
;
WebRenderBridgeChild
*
WrBridge
(
)
;
wr
:
:
WrImageKey
GenerateImageKey
(
)
;
LayerRect
Bounds
(
)
;
LayerRect
BoundsForStackingContext
(
)
;
Maybe
<
wr
:
:
WrImageMask
>
BuildWrMaskLayer
(
const
StackingContextHelper
&
aRelativeTo
wr
:
:
IpcResourceUpdateQueue
&
aResources
)
;
protected
:
BoundsTransformMatrix
BoundsTransform
(
)
;
void
DumpLayerInfo
(
const
char
*
aLayerType
const
LayerRect
&
aRect
)
;
}
;
}
}
#
endif
