#
ifndef
GFX_WEBRENDERSCROLLDATA_H
#
define
GFX_WEBRENDERSCROLLDATA_H
#
include
<
map
>
#
include
"
chrome
/
common
/
ipc_message_utils
.
h
"
#
include
"
FrameMetrics
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
LayersTypes
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
GfxMessageUtils
.
h
"
#
include
"
mozilla
/
layers
/
LayerAttributes
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessageUtils
.
h
"
#
include
"
mozilla
/
layers
/
FocusTarget
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
class
nsDisplayItem
;
namespace
mozilla
{
struct
ActiveScrolledRoot
;
namespace
layers
{
class
Layer
;
class
WebRenderLayerManager
;
class
WebRenderScrollData
;
class
WebRenderLayerScrollData
{
public
:
WebRenderLayerScrollData
(
)
;
~
WebRenderLayerScrollData
(
)
;
void
InitializeRoot
(
int32_t
aDescendantCount
)
;
void
Initialize
(
WebRenderScrollData
&
aOwner
nsDisplayItem
*
aItem
int32_t
aDescendantCount
const
ActiveScrolledRoot
*
aStopAtAsr
const
Maybe
<
gfx
:
:
Matrix4x4
>
&
aAncestorTransform
)
;
int32_t
GetDescendantCount
(
)
const
;
size_t
GetScrollMetadataCount
(
)
const
;
void
AppendScrollMetadata
(
WebRenderScrollData
&
aOwner
const
ScrollMetadata
&
aData
)
;
const
ScrollMetadata
&
GetScrollMetadata
(
const
WebRenderScrollData
&
aOwner
size_t
aIndex
)
const
;
gfx
:
:
Matrix4x4
GetAncestorTransform
(
)
const
{
return
mAncestorTransform
;
}
void
SetTransform
(
const
gfx
:
:
Matrix4x4
&
aTransform
)
{
mTransform
=
aTransform
;
}
gfx
:
:
Matrix4x4
GetTransform
(
)
const
{
return
mTransform
;
}
CSSTransformMatrix
GetTransformTyped
(
)
const
;
void
SetTransformIsPerspective
(
bool
aTransformIsPerspective
)
{
mTransformIsPerspective
=
aTransformIsPerspective
;
}
bool
GetTransformIsPerspective
(
)
const
{
return
mTransformIsPerspective
;
}
void
AddEventRegions
(
const
EventRegions
&
aRegions
)
{
mEventRegions
.
OrWith
(
aRegions
)
;
}
EventRegions
GetEventRegions
(
)
const
{
return
mEventRegions
;
}
void
SetEventRegionsOverride
(
const
EventRegionsOverride
&
aOverride
)
{
mEventRegionsOverride
=
aOverride
;
}
EventRegionsOverride
GetEventRegionsOverride
(
)
const
{
return
mEventRegionsOverride
;
}
const
LayerIntRegion
&
GetVisibleRegion
(
)
const
{
return
mVisibleRegion
;
}
void
SetReferentId
(
LayersId
aReferentId
)
{
mReferentId
=
Some
(
aReferentId
)
;
}
Maybe
<
LayersId
>
GetReferentId
(
)
const
{
return
mReferentId
;
}
void
SetScrollbarData
(
const
ScrollbarData
&
aData
)
{
mScrollbarData
=
aData
;
}
const
ScrollbarData
&
GetScrollbarData
(
)
const
{
return
mScrollbarData
;
}
void
SetScrollbarAnimationId
(
const
uint64_t
&
aId
)
{
mScrollbarAnimationId
=
aId
;
}
const
uint64_t
&
GetScrollbarAnimationId
(
)
const
{
return
mScrollbarAnimationId
;
}
void
SetFixedPositionScrollContainerId
(
FrameMetrics
:
:
ViewID
aId
)
{
mFixedPosScrollContainerId
=
aId
;
}
FrameMetrics
:
:
ViewID
GetFixedPositionScrollContainerId
(
)
const
{
return
mFixedPosScrollContainerId
;
}
void
Dump
(
const
WebRenderScrollData
&
aOwner
)
const
;
friend
struct
IPC
:
:
ParamTraits
<
WebRenderLayerScrollData
>
;
private
:
int32_t
mDescendantCount
;
nsTArray
<
size_t
>
mScrollIds
;
gfx
:
:
Matrix4x4
mAncestorTransform
;
gfx
:
:
Matrix4x4
mTransform
;
bool
mTransformIsPerspective
;
EventRegions
mEventRegions
;
LayerIntRegion
mVisibleRegion
;
Maybe
<
LayersId
>
mReferentId
;
EventRegionsOverride
mEventRegionsOverride
;
ScrollbarData
mScrollbarData
;
uint64_t
mScrollbarAnimationId
;
FrameMetrics
:
:
ViewID
mFixedPosScrollContainerId
;
}
;
class
WebRenderScrollData
{
public
:
WebRenderScrollData
(
)
;
explicit
WebRenderScrollData
(
WebRenderLayerManager
*
aManager
)
;
~
WebRenderScrollData
(
)
;
WebRenderLayerManager
*
GetManager
(
)
const
;
size_t
AddMetadata
(
const
ScrollMetadata
&
aMetadata
)
;
size_t
AddLayerData
(
const
WebRenderLayerScrollData
&
aData
)
;
size_t
GetLayerCount
(
)
const
;
const
WebRenderLayerScrollData
*
GetLayerData
(
size_t
aIndex
)
const
;
const
ScrollMetadata
&
GetScrollMetadata
(
size_t
aIndex
)
const
;
Maybe
<
size_t
>
HasMetadataFor
(
const
FrameMetrics
:
:
ViewID
&
aScrollId
)
const
;
const
FocusTarget
&
GetFocusTarget
(
)
const
{
return
mFocusTarget
;
}
void
SetFocusTarget
(
const
FocusTarget
&
aFocusTarget
)
;
void
SetIsFirstPaint
(
)
;
bool
IsFirstPaint
(
)
const
;
void
SetPaintSequenceNumber
(
uint32_t
aPaintSequenceNumber
)
;
uint32_t
GetPaintSequenceNumber
(
)
const
;
friend
struct
IPC
:
:
ParamTraits
<
WebRenderScrollData
>
;
void
Dump
(
)
const
;
private
:
bool
RepopulateMap
(
)
;
private
:
WebRenderLayerManager
*
MOZ_NON_OWNING_REF
mManager
;
std
:
:
map
<
FrameMetrics
:
:
ViewID
size_t
>
mScrollIdMap
;
nsTArray
<
ScrollMetadata
>
mScrollMetadatas
;
nsTArray
<
WebRenderLayerScrollData
>
mLayerScrollData
;
FocusTarget
mFocusTarget
;
bool
mIsFirstPaint
;
uint32_t
mPaintSequenceNumber
;
}
;
}
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
layers
:
:
ScrollbarData
>
:
public
PlainOldDataSerializer
<
mozilla
:
:
layers
:
:
ScrollbarData
>
{
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
layers
:
:
WebRenderLayerScrollData
>
{
typedef
mozilla
:
:
layers
:
:
WebRenderLayerScrollData
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
WriteParam
(
aMsg
aParam
.
mDescendantCount
)
;
WriteParam
(
aMsg
aParam
.
mScrollIds
)
;
WriteParam
(
aMsg
aParam
.
mAncestorTransform
)
;
WriteParam
(
aMsg
aParam
.
mTransform
)
;
WriteParam
(
aMsg
aParam
.
mTransformIsPerspective
)
;
WriteParam
(
aMsg
aParam
.
mEventRegions
)
;
WriteParam
(
aMsg
aParam
.
mVisibleRegion
)
;
WriteParam
(
aMsg
aParam
.
mReferentId
)
;
WriteParam
(
aMsg
aParam
.
mEventRegionsOverride
)
;
WriteParam
(
aMsg
aParam
.
mScrollbarData
)
;
WriteParam
(
aMsg
aParam
.
mScrollbarAnimationId
)
;
WriteParam
(
aMsg
aParam
.
mFixedPosScrollContainerId
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
return
ReadParam
(
aMsg
aIter
&
aResult
-
>
mDescendantCount
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mScrollIds
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mAncestorTransform
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mTransform
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mTransformIsPerspective
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mEventRegions
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mVisibleRegion
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mReferentId
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mEventRegionsOverride
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mScrollbarData
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mScrollbarAnimationId
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mFixedPosScrollContainerId
)
;
}
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
layers
:
:
WebRenderScrollData
>
{
typedef
mozilla
:
:
layers
:
:
WebRenderScrollData
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
WriteParam
(
aMsg
aParam
.
mScrollMetadatas
)
;
WriteParam
(
aMsg
aParam
.
mLayerScrollData
)
;
WriteParam
(
aMsg
aParam
.
mFocusTarget
)
;
WriteParam
(
aMsg
aParam
.
mIsFirstPaint
)
;
WriteParam
(
aMsg
aParam
.
mPaintSequenceNumber
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
return
ReadParam
(
aMsg
aIter
&
aResult
-
>
mScrollMetadatas
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mLayerScrollData
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mFocusTarget
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mIsFirstPaint
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mPaintSequenceNumber
)
&
&
aResult
-
>
RepopulateMap
(
)
;
}
}
;
}
#
endif
