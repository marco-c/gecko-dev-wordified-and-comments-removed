#
ifndef
GFX_WEBRENDERSCROLLDATA_H
#
define
GFX_WEBRENDERSCROLLDATA_H
#
include
<
map
>
#
include
<
iosfwd
>
#
include
"
chrome
/
common
/
ipc_message_utils
.
h
"
#
include
"
FrameMetrics
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
LayersTypes
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
GfxMessageUtils
.
h
"
#
include
"
mozilla
/
layers
/
LayerAttributes
.
h
"
#
include
"
mozilla
/
layers
/
FocusTarget
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderMessageUtils
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
mozilla
/
HashTable
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
class
nsDisplayListBuilder
;
class
nsDisplayItem
;
namespace
mozilla
{
struct
ActiveScrolledRoot
;
namespace
layers
{
class
Layer
;
class
WebRenderLayerManager
;
class
WebRenderScrollData
;
class
WebRenderLayerScrollData
final
{
public
:
WebRenderLayerScrollData
(
)
;
~
WebRenderLayerScrollData
(
)
;
void
InitializeRoot
(
int32_t
aDescendantCount
)
;
void
Initialize
(
WebRenderScrollData
&
aOwner
nsDisplayItem
*
aItem
int32_t
aDescendantCount
const
ActiveScrolledRoot
*
aStopAtAsr
const
Maybe
<
gfx
:
:
Matrix4x4
>
&
aAncestorTransform
)
;
int32_t
GetDescendantCount
(
)
const
;
size_t
GetScrollMetadataCount
(
)
const
;
void
AppendScrollMetadata
(
WebRenderScrollData
&
aOwner
const
ScrollMetadata
&
aData
)
;
const
ScrollMetadata
&
GetScrollMetadata
(
const
WebRenderScrollData
&
aOwner
size_t
aIndex
)
const
;
gfx
:
:
Matrix4x4
GetAncestorTransform
(
)
const
{
return
mAncestorTransform
;
}
void
SetTransform
(
const
gfx
:
:
Matrix4x4
&
aTransform
)
{
mTransform
=
aTransform
;
}
gfx
:
:
Matrix4x4
GetTransform
(
)
const
{
return
mTransform
;
}
CSSTransformMatrix
GetTransformTyped
(
)
const
;
void
SetTransformIsPerspective
(
bool
aTransformIsPerspective
)
{
mTransformIsPerspective
=
aTransformIsPerspective
;
}
bool
GetTransformIsPerspective
(
)
const
{
return
mTransformIsPerspective
;
}
EventRegions
GetEventRegions
(
)
const
{
return
EventRegions
(
)
;
}
void
SetEventRegionsOverride
(
const
EventRegionsOverride
&
aOverride
)
{
mEventRegionsOverride
=
aOverride
;
}
EventRegionsOverride
GetEventRegionsOverride
(
)
const
{
return
mEventRegionsOverride
;
}
void
SetVisibleRegion
(
const
LayerIntRegion
&
aRegion
)
{
mVisibleRegion
=
aRegion
;
}
const
LayerIntRegion
&
GetVisibleRegion
(
)
const
{
return
mVisibleRegion
;
}
void
SetRemoteDocumentSize
(
const
LayerIntSize
&
aRemoteDocumentSize
)
{
mRemoteDocumentSize
=
aRemoteDocumentSize
;
}
const
LayerIntSize
&
GetRemoteDocumentSize
(
)
const
{
return
mRemoteDocumentSize
;
}
void
SetReferentId
(
LayersId
aReferentId
)
{
mReferentId
=
Some
(
aReferentId
)
;
}
Maybe
<
LayersId
>
GetReferentId
(
)
const
{
return
mReferentId
;
}
void
SetScrollbarData
(
const
ScrollbarData
&
aData
)
{
mScrollbarData
=
aData
;
}
const
ScrollbarData
&
GetScrollbarData
(
)
const
{
return
mScrollbarData
;
}
void
SetScrollbarAnimationId
(
const
uint64_t
&
aId
)
{
mScrollbarAnimationId
=
Some
(
aId
)
;
}
Maybe
<
uint64_t
>
GetScrollbarAnimationId
(
)
const
{
return
mScrollbarAnimationId
;
}
void
SetFixedPositionAnimationId
(
const
uint64_t
&
aId
)
{
mFixedPositionAnimationId
=
Some
(
aId
)
;
}
Maybe
<
uint64_t
>
GetFixedPositionAnimationId
(
)
const
{
return
mFixedPositionAnimationId
;
}
void
SetFixedPositionSides
(
const
SideBits
&
aSideBits
)
{
mFixedPositionSides
=
aSideBits
;
}
SideBits
GetFixedPositionSides
(
)
const
{
return
mFixedPositionSides
;
}
void
SetFixedPositionScrollContainerId
(
ScrollableLayerGuid
:
:
ViewID
aId
)
{
mFixedPosScrollContainerId
=
aId
;
}
ScrollableLayerGuid
:
:
ViewID
GetFixedPositionScrollContainerId
(
)
const
{
return
mFixedPosScrollContainerId
;
}
void
SetStickyPositionScrollContainerId
(
ScrollableLayerGuid
:
:
ViewID
aId
)
{
mStickyPosScrollContainerId
=
aId
;
}
ScrollableLayerGuid
:
:
ViewID
GetStickyPositionScrollContainerId
(
)
const
{
return
mStickyPosScrollContainerId
;
}
void
SetStickyScrollRangeOuter
(
const
LayerRectAbsolute
&
scrollRange
)
{
mStickyScrollRangeOuter
=
scrollRange
;
}
const
LayerRectAbsolute
&
GetStickyScrollRangeOuter
(
)
const
{
return
mStickyScrollRangeOuter
;
}
void
SetStickyScrollRangeInner
(
const
LayerRectAbsolute
&
scrollRange
)
{
mStickyScrollRangeInner
=
scrollRange
;
}
const
LayerRectAbsolute
&
GetStickyScrollRangeInner
(
)
const
{
return
mStickyScrollRangeInner
;
}
void
SetStickyPositionAnimationId
(
const
uint64_t
&
aId
)
{
mStickyPositionAnimationId
=
Some
(
aId
)
;
}
Maybe
<
uint64_t
>
GetStickyPositionAnimationId
(
)
const
{
return
mStickyPositionAnimationId
;
}
void
SetZoomAnimationId
(
const
uint64_t
&
aId
)
{
mZoomAnimationId
=
Some
(
aId
)
;
}
Maybe
<
uint64_t
>
GetZoomAnimationId
(
)
const
{
return
mZoomAnimationId
;
}
void
SetAsyncZoomContainerId
(
const
ScrollableLayerGuid
:
:
ViewID
aId
)
{
mAsyncZoomContainerId
=
Some
(
aId
)
;
}
Maybe
<
ScrollableLayerGuid
:
:
ViewID
>
GetAsyncZoomContainerId
(
)
const
{
return
mAsyncZoomContainerId
;
}
void
Dump
(
std
:
:
ostream
&
aOut
const
WebRenderScrollData
&
aOwner
)
const
;
friend
struct
IPC
:
:
ParamTraits
<
WebRenderLayerScrollData
>
;
private
:
int32_t
mDescendantCount
;
CopyableTArray
<
size_t
>
mScrollIds
;
gfx
:
:
Matrix4x4
mAncestorTransform
;
gfx
:
:
Matrix4x4
mTransform
;
bool
mTransformIsPerspective
;
LayerIntRegion
mVisibleRegion
;
LayerIntSize
mRemoteDocumentSize
;
Maybe
<
LayersId
>
mReferentId
;
EventRegionsOverride
mEventRegionsOverride
;
ScrollbarData
mScrollbarData
;
Maybe
<
uint64_t
>
mScrollbarAnimationId
;
Maybe
<
uint64_t
>
mFixedPositionAnimationId
;
SideBits
mFixedPositionSides
;
ScrollableLayerGuid
:
:
ViewID
mFixedPosScrollContainerId
;
ScrollableLayerGuid
:
:
ViewID
mStickyPosScrollContainerId
;
LayerRectAbsolute
mStickyScrollRangeOuter
;
LayerRectAbsolute
mStickyScrollRangeInner
;
Maybe
<
uint64_t
>
mStickyPositionAnimationId
;
Maybe
<
uint64_t
>
mZoomAnimationId
;
Maybe
<
ScrollableLayerGuid
:
:
ViewID
>
mAsyncZoomContainerId
;
}
;
class
WebRenderScrollData
final
{
public
:
WebRenderScrollData
(
)
;
explicit
WebRenderScrollData
(
WebRenderLayerManager
*
aManager
nsDisplayListBuilder
*
aBuilder
)
;
WebRenderLayerManager
*
GetManager
(
)
const
;
nsDisplayListBuilder
*
GetBuilder
(
)
const
;
size_t
AddMetadata
(
const
ScrollMetadata
&
aMetadata
)
;
size_t
AddLayerData
(
const
WebRenderLayerScrollData
&
aData
)
;
size_t
GetLayerCount
(
)
const
;
const
WebRenderLayerScrollData
*
GetLayerData
(
size_t
aIndex
)
const
;
const
ScrollMetadata
&
GetScrollMetadata
(
size_t
aIndex
)
const
;
Maybe
<
size_t
>
HasMetadataFor
(
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
)
const
;
void
SetIsFirstPaint
(
)
;
bool
IsFirstPaint
(
)
const
;
void
SetPaintSequenceNumber
(
uint32_t
aPaintSequenceNumber
)
;
uint32_t
GetPaintSequenceNumber
(
)
const
;
void
ApplyUpdates
(
ScrollUpdatesMap
&
&
aUpdates
uint32_t
aPaintSequenceNumber
)
;
friend
struct
IPC
:
:
ParamTraits
<
WebRenderScrollData
>
;
friend
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aOut
const
WebRenderScrollData
&
aData
)
;
private
:
bool
RepopulateMap
(
)
;
void
DumpSubtree
(
std
:
:
ostream
&
aOut
size_t
aIndex
const
std
:
:
string
&
aIndent
)
const
;
private
:
WebRenderLayerManager
*
MOZ_NON_OWNING_REF
mManager
;
nsDisplayListBuilder
*
MOZ_NON_OWNING_REF
mBuilder
;
HashMap
<
ScrollableLayerGuid
:
:
ViewID
size_t
>
mScrollIdMap
;
nsTArray
<
ScrollMetadata
>
mScrollMetadatas
;
nsTArray
<
WebRenderLayerScrollData
>
mLayerScrollData
;
bool
mIsFirstPaint
;
uint32_t
mPaintSequenceNumber
;
}
;
}
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
layers
:
:
WebRenderLayerScrollData
>
{
typedef
mozilla
:
:
layers
:
:
WebRenderLayerScrollData
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
;
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
;
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
layers
:
:
WebRenderScrollData
>
{
typedef
mozilla
:
:
layers
:
:
WebRenderScrollData
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
;
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
;
}
;
}
#
endif
