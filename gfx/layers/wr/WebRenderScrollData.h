#
ifndef
GFX_WEBRENDERSCROLLDATA_H
#
define
GFX_WEBRENDERSCROLLDATA_H
#
include
<
map
>
#
include
"
chrome
/
common
/
ipc_message_utils
.
h
"
#
include
"
FrameMetrics
.
h
"
#
include
"
LayersTypes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
namespace
mozilla
{
namespace
layers
{
class
Layer
;
class
WebRenderScrollData
;
class
WebRenderLayerScrollData
{
public
:
WebRenderLayerScrollData
(
)
;
~
WebRenderLayerScrollData
(
)
;
void
Initialize
(
WebRenderScrollData
&
aOwner
Layer
*
aLayer
int32_t
aDescendantCount
)
;
int32_t
GetDescendantCount
(
)
const
;
size_t
GetScrollMetadataCount
(
)
const
;
const
ScrollMetadata
&
GetScrollMetadata
(
const
WebRenderScrollData
&
aOwner
size_t
aIndex
)
const
;
bool
IsScrollInfoLayer
(
)
const
{
return
mIsScrollInfoLayer
;
}
gfx
:
:
Matrix4x4
GetTransform
(
)
const
{
return
mTransform
;
}
bool
GetTransformIsPerspective
(
)
const
{
return
mTransformIsPerspective
;
}
EventRegions
GetEventRegions
(
)
const
{
return
mEventRegions
;
}
Maybe
<
uint64_t
>
GetReferentId
(
)
const
{
return
mReferentId
;
}
EventRegionsOverride
GetEventRegionsOverride
(
)
const
{
return
mEventRegionsOverride
;
}
ScrollDirection
GetScrollbarDirection
(
)
const
{
return
mScrollbarDirection
;
}
FrameMetrics
:
:
ViewID
GetScrollbarTargetContainerId
(
)
const
{
return
mScrollbarTargetContainerId
;
}
int32_t
GetScrollThumbLength
(
)
const
{
return
mScrollThumbLength
;
}
bool
IsScrollbarContainer
(
)
const
{
return
mIsScrollbarContainer
;
}
FrameMetrics
:
:
ViewID
GetFixedPositionScrollContainerId
(
)
const
{
return
mFixedPosScrollContainerId
;
}
friend
struct
IPC
:
:
ParamTraits
<
WebRenderLayerScrollData
>
;
private
:
int32_t
mDescendantCount
;
nsTArray
<
size_t
>
mScrollIds
;
bool
mIsScrollInfoLayer
;
gfx
:
:
Matrix4x4
mTransform
;
bool
mTransformIsPerspective
;
EventRegions
mEventRegions
;
Maybe
<
uint64_t
>
mReferentId
;
EventRegionsOverride
mEventRegionsOverride
;
ScrollDirection
mScrollbarDirection
;
FrameMetrics
:
:
ViewID
mScrollbarTargetContainerId
;
int32_t
mScrollThumbLength
;
bool
mIsScrollbarContainer
;
FrameMetrics
:
:
ViewID
mFixedPosScrollContainerId
;
}
;
class
WebRenderScrollData
{
public
:
WebRenderScrollData
(
)
;
~
WebRenderScrollData
(
)
;
size_t
AddMetadata
(
const
ScrollMetadata
&
aMetadata
)
;
size_t
AddNewLayerData
(
)
;
size_t
GetLayerCount
(
)
const
;
WebRenderLayerScrollData
*
GetLayerDataMutable
(
size_t
aIndex
)
;
const
WebRenderLayerScrollData
*
GetLayerData
(
size_t
aIndex
)
const
;
const
ScrollMetadata
&
GetScrollMetadata
(
size_t
aIndex
)
const
;
void
SetIsFirstPaint
(
)
;
bool
IsFirstPaint
(
)
const
;
friend
struct
IPC
:
:
ParamTraits
<
WebRenderScrollData
>
;
private
:
std
:
:
map
<
FrameMetrics
:
:
ViewID
size_t
>
mScrollIdMap
;
nsTArray
<
ScrollMetadata
>
mScrollMetadatas
;
nsTArray
<
WebRenderLayerScrollData
>
mLayerScrollData
;
bool
mIsFirstPaint
;
}
;
}
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
layers
:
:
WebRenderLayerScrollData
>
{
typedef
mozilla
:
:
layers
:
:
WebRenderLayerScrollData
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
WriteParam
(
aMsg
aParam
.
mDescendantCount
)
;
WriteParam
(
aMsg
aParam
.
mScrollIds
)
;
WriteParam
(
aMsg
aParam
.
mIsScrollInfoLayer
)
;
WriteParam
(
aMsg
aParam
.
mTransform
)
;
WriteParam
(
aMsg
aParam
.
mTransformIsPerspective
)
;
WriteParam
(
aMsg
aParam
.
mEventRegions
)
;
WriteParam
(
aMsg
aParam
.
mReferentId
)
;
WriteParam
(
aMsg
aParam
.
mEventRegionsOverride
)
;
WriteParam
(
aMsg
aParam
.
mScrollbarDirection
)
;
WriteParam
(
aMsg
aParam
.
mScrollbarTargetContainerId
)
;
WriteParam
(
aMsg
aParam
.
mScrollThumbLength
)
;
WriteParam
(
aMsg
aParam
.
mIsScrollbarContainer
)
;
WriteParam
(
aMsg
aParam
.
mFixedPosScrollContainerId
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
return
ReadParam
(
aMsg
aIter
&
aResult
-
>
mDescendantCount
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mScrollIds
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mIsScrollInfoLayer
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mTransform
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mTransformIsPerspective
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mEventRegions
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mReferentId
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mEventRegionsOverride
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mScrollbarDirection
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mScrollbarTargetContainerId
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mScrollThumbLength
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mIsScrollbarContainer
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mFixedPosScrollContainerId
)
;
}
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
layers
:
:
WebRenderScrollData
>
{
typedef
mozilla
:
:
layers
:
:
WebRenderScrollData
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
WriteParam
(
aMsg
aParam
.
mScrollMetadatas
)
;
WriteParam
(
aMsg
aParam
.
mLayerScrollData
)
;
WriteParam
(
aMsg
aParam
.
mIsFirstPaint
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
return
ReadParam
(
aMsg
aIter
&
aResult
-
>
mScrollMetadatas
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mLayerScrollData
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mIsFirstPaint
)
;
}
}
;
}
#
endif
