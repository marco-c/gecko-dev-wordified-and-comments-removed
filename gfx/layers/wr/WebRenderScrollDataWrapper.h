#
ifndef
GFX_WEBRENDERSCROLLDATAWRAPPER_H
#
define
GFX_WEBRENDERSCROLLDATAWRAPPER_H
#
include
"
FrameMetrics
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderScrollData
.
h
"
namespace
mozilla
{
namespace
layers
{
class
MOZ_STACK_CLASS
WebRenderScrollDataWrapper
{
public
:
explicit
WebRenderScrollDataWrapper
(
const
WebRenderScrollData
*
aData
)
:
mData
(
aData
)
{
}
explicit
operator
bool
(
)
const
{
return
false
;
}
bool
IsScrollInfoLayer
(
)
const
{
return
false
;
}
WebRenderScrollDataWrapper
GetLastChild
(
)
const
{
return
WebRenderScrollDataWrapper
(
nullptr
)
;
}
WebRenderScrollDataWrapper
GetPrevSibling
(
)
const
{
return
WebRenderScrollDataWrapper
(
nullptr
)
;
}
const
ScrollMetadata
&
Metadata
(
)
const
{
return
*
ScrollMetadata
:
:
sNullMetadata
;
}
const
FrameMetrics
&
Metrics
(
)
const
{
return
Metadata
(
)
.
GetMetrics
(
)
;
}
AsyncPanZoomController
*
GetApzc
(
)
const
{
return
nullptr
;
}
void
SetApzc
(
AsyncPanZoomController
*
aApzc
)
const
{
}
const
char
*
Name
(
)
const
{
return
nullptr
;
}
gfx
:
:
Matrix4x4
GetTransform
(
)
const
{
return
gfx
:
:
Matrix4x4
(
)
;
}
CSSTransformMatrix
GetTransformTyped
(
)
const
{
return
ViewAs
<
CSSTransformMatrix
>
(
GetTransform
(
)
)
;
}
bool
TransformIsPerspective
(
)
const
{
return
false
;
}
EventRegions
GetEventRegions
(
)
const
{
return
EventRegions
(
)
;
}
Maybe
<
uint64_t
>
GetReferentId
(
)
const
{
return
Nothing
(
)
;
}
Maybe
<
ParentLayerIntRect
>
GetClipRect
(
)
const
{
return
Nothing
(
)
;
}
EventRegionsOverride
GetEventRegionsOverride
(
)
const
{
return
EventRegionsOverride
:
:
NoOverride
;
}
ScrollDirection
GetScrollbarDirection
(
)
const
{
return
ScrollDirection
:
:
NONE
;
}
FrameMetrics
:
:
ViewID
GetScrollbarTargetContainerId
(
)
const
{
return
0
;
}
int32_t
GetScrollThumbLength
(
)
const
{
return
0
;
}
bool
IsScrollbarContainer
(
)
const
{
return
false
;
}
FrameMetrics
:
:
ViewID
GetFixedPositionScrollContainerId
(
)
const
{
return
0
;
}
const
void
*
GetLayer
(
)
const
{
return
nullptr
;
}
private
:
const
WebRenderScrollData
*
mData
;
}
;
}
}
#
endif
