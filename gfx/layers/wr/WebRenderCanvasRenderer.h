#
ifndef
GFX_WEBRENDERCANVASRENDERER_H
#
define
GFX_WEBRENDERCANVASRENDERER_H
#
include
"
mozilla
/
layers
/
RenderRootStateManager
.
h
"
#
include
"
ShareableCanvasRenderer
.
h
"
namespace
mozilla
{
namespace
layers
{
class
WebRenderCanvasRenderer
:
public
ShareableCanvasRenderer
{
public
:
explicit
WebRenderCanvasRenderer
(
RenderRootStateManager
*
aManager
)
:
mManager
(
aManager
)
{
}
CompositableForwarder
*
GetForwarder
(
)
override
;
RenderRootStateManager
*
GetRenderRootStateManager
(
)
{
return
mManager
;
}
protected
:
RefPtr
<
RenderRootStateManager
>
mManager
;
}
;
class
WebRenderCanvasRendererAsync
final
:
public
WebRenderCanvasRenderer
{
public
:
explicit
WebRenderCanvasRendererAsync
(
RenderRootStateManager
*
aManager
)
:
WebRenderCanvasRenderer
(
aManager
)
{
}
virtual
~
WebRenderCanvasRendererAsync
(
)
;
WebRenderCanvasRendererAsync
*
AsWebRenderCanvasRendererAsync
(
)
override
{
return
this
;
}
void
Initialize
(
const
CanvasRendererData
&
aData
)
override
;
bool
CreateCompositable
(
)
override
;
void
EnsurePipeline
(
)
override
;
void
ClearCachedResources
(
)
override
;
void
UpdateCompositableClientForEmptyTransaction
(
)
;
Maybe
<
wr
:
:
PipelineId
>
GetPipelineId
(
)
{
return
mPipelineId
;
}
protected
:
Maybe
<
wr
:
:
PipelineId
>
mPipelineId
;
bool
mIsAsync
=
false
;
}
;
}
}
#
endif
