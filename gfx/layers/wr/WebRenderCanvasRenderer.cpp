#
include
"
WebRenderCanvasRenderer
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
GLScreenBuffer
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeChild
.
h
"
#
include
"
SharedSurfaceGL
.
h
"
#
include
"
WebRenderBridgeChild
.
h
"
#
include
"
RenderRootStateManager
.
h
"
namespace
mozilla
{
namespace
layers
{
CompositableForwarder
*
WebRenderCanvasRenderer
:
:
GetForwarder
(
)
{
return
mManager
-
>
WrBridge
(
)
;
}
WebRenderCanvasRendererAsync
:
:
~
WebRenderCanvasRendererAsync
(
)
{
if
(
mPipelineId
.
isSome
(
)
)
{
mManager
-
>
RemovePipelineIdForCompositable
(
mPipelineId
.
ref
(
)
)
;
mPipelineId
.
reset
(
)
;
}
}
void
WebRenderCanvasRendererAsync
:
:
Initialize
(
const
CanvasRendererData
&
aData
)
{
WebRenderCanvasRenderer
:
:
Initialize
(
aData
)
;
ClearCachedResources
(
)
;
}
bool
WebRenderCanvasRendererAsync
:
:
CreateCompositable
(
)
{
if
(
!
mCanvasClient
)
{
auto
compositableFlags
=
TextureFlags
:
:
NO_FLAGS
;
if
(
!
mData
.
mIsAlphaPremult
)
{
compositableFlags
|
=
TextureFlags
:
:
NON_PREMULTIPLIED
;
}
mCanvasClient
=
new
CanvasClient
(
GetForwarder
(
)
compositableFlags
)
;
mCanvasClient
-
>
Connect
(
)
;
}
if
(
!
mPipelineId
)
{
mPipelineId
=
Some
(
mManager
-
>
WrBridge
(
)
-
>
GetCompositorBridgeChild
(
)
-
>
GetNextPipelineId
(
)
)
;
mManager
-
>
AddPipelineIdForCompositable
(
mPipelineId
.
ref
(
)
mCanvasClient
-
>
GetIPCHandle
(
)
)
;
}
return
true
;
}
void
WebRenderCanvasRendererAsync
:
:
ClearCachedResources
(
)
{
if
(
mPipelineId
.
isSome
(
)
)
{
mManager
-
>
RemovePipelineIdForCompositable
(
mPipelineId
.
ref
(
)
)
;
mPipelineId
.
reset
(
)
;
}
}
void
WebRenderCanvasRendererAsync
:
:
UpdateCompositableClientForEmptyTransaction
(
)
{
bool
wasDirty
=
IsDirty
(
)
;
UpdateCompositableClient
(
)
;
if
(
wasDirty
&
&
mPipelineId
.
isSome
(
)
)
{
mManager
-
>
AddWebRenderParentCommand
(
OpUpdatedAsyncImagePipeline
(
mPipelineId
.
ref
(
)
)
)
;
}
}
}
}
