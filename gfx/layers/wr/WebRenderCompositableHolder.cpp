#
include
"
WebRenderCompositableHolder
.
h
"
#
include
"
CompositableHost
.
h
"
namespace
mozilla
{
using
namespace
gfx
;
namespace
layers
{
WebRenderCompositableHolder
:
:
WebRenderCompositableHolder
(
)
{
MOZ_COUNT_CTOR
(
WebRenderCompositableHolder
)
;
}
WebRenderCompositableHolder
:
:
~
WebRenderCompositableHolder
(
)
{
MOZ_COUNT_DTOR
(
WebRenderCompositableHolder
)
;
Destroy
(
)
;
}
void
WebRenderCompositableHolder
:
:
Destroy
(
)
{
mCompositableHosts
.
Clear
(
)
;
}
void
WebRenderCompositableHolder
:
:
AddExternalImageId
(
uint64_t
aExternalImageId
CompositableHost
*
aHost
)
{
MOZ_ASSERT
(
!
mCompositableHosts
.
Get
(
aExternalImageId
)
)
;
mCompositableHosts
.
Put
(
aExternalImageId
aHost
)
;
}
void
WebRenderCompositableHolder
:
:
RemoveExternalImageId
(
uint64_t
aExternalImageId
)
{
MOZ_ASSERT
(
mCompositableHosts
.
Get
(
aExternalImageId
)
)
;
mCompositableHosts
.
Remove
(
aExternalImageId
)
;
}
void
WebRenderCompositableHolder
:
:
UpdateExternalImages
(
)
{
for
(
auto
iter
=
mCompositableHosts
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
RefPtr
<
CompositableHost
>
&
host
=
iter
.
Data
(
)
;
host
-
>
BindTextureSource
(
)
;
}
}
}
}
