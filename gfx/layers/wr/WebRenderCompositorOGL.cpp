#
include
"
WebRenderCompositorOGL
.
h
"
#
include
"
CompositableHost
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
GLUploadHelpers
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
layers
/
TextureHostOGL
.
h
"
namespace
mozilla
{
using
namespace
gfx
;
using
namespace
gl
;
namespace
layers
{
WebRenderCompositorOGL
:
:
WebRenderCompositorOGL
(
CompositorBridgeParent
*
aCompositorBridge
GLContext
*
aGLContext
)
:
Compositor
(
nullptr
nullptr
)
mCompositorBridge
(
aCompositorBridge
)
mGLContext
(
aGLContext
)
mDestroyed
(
false
)
{
MOZ_COUNT_CTOR
(
WebRenderCompositorOGL
)
;
}
WebRenderCompositorOGL
:
:
~
WebRenderCompositorOGL
(
)
{
MOZ_COUNT_DTOR
(
WebRenderCompositorOGL
)
;
Destroy
(
)
;
}
void
WebRenderCompositorOGL
:
:
Destroy
(
)
{
Compositor
:
:
Destroy
(
)
;
mCompositableHosts
.
Clear
(
)
;
mCompositorBridge
=
nullptr
;
if
(
!
mDestroyed
)
{
mDestroyed
=
true
;
CleanupResources
(
)
;
}
}
void
WebRenderCompositorOGL
:
:
CleanupResources
(
)
{
if
(
!
mGLContext
)
{
return
;
}
mGLContext
-
>
MarkDestroyed
(
)
;
mGLContext
=
nullptr
;
}
bool
WebRenderCompositorOGL
:
:
Initialize
(
nsCString
*
const
out_failureReason
)
{
MOZ_ASSERT
(
mGLContext
)
;
return
true
;
}
already_AddRefed
<
DataTextureSource
>
WebRenderCompositorOGL
:
:
CreateDataTextureSource
(
TextureFlags
aFlags
)
{
return
nullptr
;
}
bool
WebRenderCompositorOGL
:
:
SupportsPartialTextureUpdate
(
)
{
return
CanUploadSubTextures
(
mGLContext
)
;
}
int32_t
WebRenderCompositorOGL
:
:
GetMaxTextureSize
(
)
const
{
MOZ_ASSERT
(
mGLContext
)
;
GLint
texSize
=
0
;
mGLContext
-
>
fGetIntegerv
(
LOCAL_GL_MAX_TEXTURE_SIZE
&
texSize
)
;
MOZ_ASSERT
(
texSize
!
=
0
)
;
return
texSize
;
}
void
WebRenderCompositorOGL
:
:
MakeCurrent
(
MakeCurrentFlags
aFlags
)
{
if
(
mDestroyed
)
{
NS_WARNING
(
"
Call
on
destroyed
layer
manager
"
)
;
return
;
}
mGLContext
-
>
MakeCurrent
(
aFlags
&
ForceMakeCurrent
)
;
}
void
WebRenderCompositorOGL
:
:
AddExternalImageId
(
uint64_t
aExternalImageId
CompositableHost
*
aHost
)
{
MOZ_ASSERT
(
!
mCompositableHosts
.
Get
(
aExternalImageId
)
)
;
mCompositableHosts
.
Put
(
aExternalImageId
aHost
)
;
}
void
WebRenderCompositorOGL
:
:
RemoveExternalImageId
(
uint64_t
aExternalImageId
)
{
MOZ_ASSERT
(
mCompositableHosts
.
Get
(
aExternalImageId
)
)
;
mCompositableHosts
.
Remove
(
aExternalImageId
)
;
}
void
WebRenderCompositorOGL
:
:
UpdateExternalImages
(
)
{
for
(
auto
iter
=
mCompositableHosts
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
RefPtr
<
CompositableHost
>
&
host
=
iter
.
Data
(
)
;
host
-
>
BindTextureSource
(
)
;
}
}
void
WebRenderCompositorOGL
:
:
ScheduleComposition
(
)
{
MOZ_ASSERT
(
mCompositorBridge
)
;
mCompositorBridge
-
>
ScheduleComposition
(
)
;
}
}
}
