#
include
"
WebRenderUserData
.
h
"
#
include
"
nsDisplayListInvalidation
.
h
"
namespace
mozilla
{
namespace
layers
{
WebRenderBridgeChild
*
WebRenderUserData
:
:
WrBridge
(
)
const
{
return
mWRManager
-
>
WrBridge
(
)
;
}
WebRenderImageData
:
:
WebRenderImageData
(
WebRenderLayerManager
*
aWRManager
)
:
WebRenderUserData
(
aWRManager
)
{
}
WebRenderImageData
:
:
~
WebRenderImageData
(
)
{
if
(
mKey
)
{
mWRManager
-
>
AddImageKeyForDiscard
(
mKey
.
value
(
)
)
;
}
if
(
mExternalImageId
)
{
WrBridge
(
)
-
>
DeallocExternalImageId
(
mExternalImageId
.
ref
(
)
)
;
}
if
(
mPipelineId
)
{
WrBridge
(
)
-
>
RemovePipelineIdForAsyncCompositable
(
mPipelineId
.
ref
(
)
)
;
}
}
Maybe
<
wr
:
:
ImageKey
>
WebRenderImageData
:
:
UpdateImageKey
(
ImageContainer
*
aContainer
bool
aForceUpdate
)
{
CreateImageClientIfNeeded
(
)
;
CreateExternalImageIfNeeded
(
)
;
if
(
!
mImageClient
|
|
!
mExternalImageId
)
{
return
Nothing
(
)
;
}
MOZ_ASSERT
(
mImageClient
-
>
AsImageClientSingle
(
)
)
;
MOZ_ASSERT
(
aContainer
)
;
ImageClientSingle
*
imageClient
=
mImageClient
-
>
AsImageClientSingle
(
)
;
uint32_t
oldCounter
=
imageClient
-
>
GetLastUpdateGenerationCounter
(
)
;
bool
ret
=
imageClient
-
>
UpdateImage
(
aContainer
0
)
;
if
(
!
ret
|
|
imageClient
-
>
IsEmpty
(
)
)
{
if
(
mKey
)
{
mWRManager
-
>
AddImageKeyForDiscard
(
mKey
.
value
(
)
)
;
mKey
=
Nothing
(
)
;
}
return
Nothing
(
)
;
}
if
(
!
aForceUpdate
&
&
oldCounter
=
=
imageClient
-
>
GetLastUpdateGenerationCounter
(
)
&
&
mKey
)
{
return
mKey
;
}
if
(
mKey
)
{
mWRManager
-
>
AddImageKeyForDiscard
(
mKey
.
value
(
)
)
;
}
wr
:
:
WrImageKey
key
=
WrBridge
(
)
-
>
GetNextImageKey
(
)
;
mWRManager
-
>
WrBridge
(
)
-
>
AddWebRenderParentCommand
(
OpAddExternalImage
(
mExternalImageId
.
value
(
)
key
)
)
;
mKey
=
Some
(
key
)
;
return
mKey
;
}
already_AddRefed
<
ImageClient
>
WebRenderImageData
:
:
GetImageClient
(
)
{
RefPtr
<
ImageClient
>
imageClient
=
mImageClient
;
return
imageClient
.
forget
(
)
;
}
void
WebRenderImageData
:
:
CreateAsyncImageWebRenderCommands
(
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
ImageContainer
*
aContainer
const
StackingContextHelper
&
aSc
const
LayerRect
&
aBounds
const
LayerRect
&
aSCBounds
const
Matrix4x4
&
aSCTransform
const
MaybeIntSize
&
aScaleToSize
const
wr
:
:
ImageRendering
&
aFilter
const
wr
:
:
MixBlendMode
&
aMixBlendMode
)
{
MOZ_ASSERT
(
aContainer
-
>
IsAsync
(
)
)
;
if
(
!
mPipelineId
)
{
mPipelineId
=
Some
(
WrBridge
(
)
-
>
GetCompositorBridgeChild
(
)
-
>
GetNextPipelineId
(
)
)
;
WrBridge
(
)
-
>
AddPipelineIdForAsyncCompositable
(
mPipelineId
.
ref
(
)
aContainer
-
>
GetAsyncContainerHandle
(
)
)
;
}
MOZ_ASSERT
(
!
mImageClient
)
;
MOZ_ASSERT
(
!
mExternalImageId
)
;
wr
:
:
LayoutRect
r
=
aSc
.
ToRelativeLayoutRect
(
aBounds
)
;
aBuilder
.
PushIFrame
(
r
mPipelineId
.
ref
(
)
)
;
WrBridge
(
)
-
>
AddWebRenderParentCommand
(
OpUpdateAsyncImagePipeline
(
mPipelineId
.
value
(
)
aSCBounds
aSCTransform
aScaleToSize
aFilter
aMixBlendMode
)
)
;
}
void
WebRenderImageData
:
:
CreateImageClientIfNeeded
(
)
{
if
(
!
mImageClient
)
{
mImageClient
=
ImageClient
:
:
CreateImageClient
(
CompositableType
:
:
IMAGE
WrBridge
(
)
TextureFlags
:
:
DEFAULT
)
;
if
(
!
mImageClient
)
{
return
;
}
mImageClient
-
>
Connect
(
)
;
}
}
void
WebRenderImageData
:
:
CreateExternalImageIfNeeded
(
)
{
if
(
!
mExternalImageId
)
{
mExternalImageId
=
Some
(
WrBridge
(
)
-
>
AllocExternalImageIdForCompositable
(
mImageClient
)
)
;
}
}
WebRenderFallbackData
:
:
~
WebRenderFallbackData
(
)
{
}
WebRenderFallbackData
:
:
WebRenderFallbackData
(
WebRenderLayerManager
*
aWRManager
)
:
WebRenderImageData
(
aWRManager
)
{
}
nsAutoPtr
<
nsDisplayItemGeometry
>
WebRenderFallbackData
:
:
GetGeometry
(
)
{
return
mGeometry
;
}
void
WebRenderFallbackData
:
:
SetGeometry
(
nsAutoPtr
<
nsDisplayItemGeometry
>
aGeometry
)
{
mGeometry
=
aGeometry
;
}
WebRenderAnimationData
:
:
WebRenderAnimationData
(
WebRenderLayerManager
*
aWRManager
)
:
WebRenderUserData
(
aWRManager
)
mAnimationInfo
(
aWRManager
)
{
}
}
}
