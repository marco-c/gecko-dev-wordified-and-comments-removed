#
ifndef
GFX_RENDERROOTTYPES_H
#
define
GFX_RENDERROOTTYPES_H
#
include
"
mozilla
/
webrender
/
WebRenderAPI
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderMessages
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderScrollData
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
namespace
mozilla
{
namespace
layers
{
struct
DisplayListData
{
wr
:
:
IdNamespace
mIdNamespace
;
LayoutDeviceRect
mRect
;
nsTArray
<
WebRenderParentCommand
>
mCommands
;
wr
:
:
LayoutSize
mContentSize
;
Maybe
<
mozilla
:
:
ipc
:
:
ByteBuf
>
mDL
;
wr
:
:
BuiltDisplayListDescriptor
mDLDesc
;
nsTArray
<
wr
:
:
PipelineId
>
mRemotePipelineIds
;
nsTArray
<
OpUpdateResource
>
mResourceUpdates
;
nsTArray
<
RefCountedShmem
>
mSmallShmems
;
nsTArray
<
mozilla
:
:
ipc
:
:
Shmem
>
mLargeShmems
;
Maybe
<
WebRenderScrollData
>
mScrollData
;
}
;
struct
RenderRootUpdates
{
nsTArray
<
WebRenderParentCommand
>
mCommands
;
nsTArray
<
OpUpdateResource
>
mResourceUpdates
;
nsTArray
<
RefCountedShmem
>
mSmallShmems
;
nsTArray
<
mozilla
:
:
ipc
:
:
Shmem
>
mLargeShmems
;
ScrollUpdatesMap
mScrollUpdates
;
uint32_t
mPaintSequenceNumber
;
}
;
}
namespace
ipc
{
template
<
>
struct
IPDLParamTraits
<
mozilla
:
:
layers
:
:
DisplayListData
>
{
typedef
mozilla
:
:
layers
:
:
DisplayListData
paramType
;
static
void
Write
(
IPC
:
:
Message
*
aMsg
IProtocol
*
aActor
paramType
&
&
aParam
)
;
static
bool
Read
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
IProtocol
*
aActor
paramType
*
aResult
)
;
}
;
template
<
>
struct
IPDLParamTraits
<
mozilla
:
:
layers
:
:
RenderRootUpdates
>
{
typedef
mozilla
:
:
layers
:
:
RenderRootUpdates
paramType
;
static
void
Write
(
IPC
:
:
Message
*
aMsg
IProtocol
*
aActor
paramType
&
&
aParam
)
;
static
bool
Read
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
IProtocol
*
aActor
paramType
*
aResult
)
;
}
;
}
}
#
endif
