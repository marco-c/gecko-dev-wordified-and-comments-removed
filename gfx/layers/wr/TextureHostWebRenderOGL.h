#
ifndef
MOZILLA_GFX_TEXTUREHOSTWEBRENDEROGL_H
#
define
MOZILLA_GFX_TEXTUREHOSTWEBRENDEROGL_H
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
GLContextTypes
.
h
"
#
include
"
GLTextureImage
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
nsRegionFwd
.
h
"
namespace
mozilla
{
namespace
layers
{
class
Compositor
;
class
TextureImageTextureSourceWebRenderOGL
;
class
TextureSourceWebRenderOGL
{
public
:
TextureSourceWebRenderOGL
(
)
{
}
virtual
~
TextureSourceWebRenderOGL
(
)
{
}
virtual
gl
:
:
TextureImage
*
GetTextureImage
(
)
=
0
;
virtual
TextureImageTextureSourceWebRenderOGL
*
AsTextureImageTextureSource
(
)
{
return
nullptr
;
}
}
;
class
TextureImageTextureSourceWebRenderOGL
final
:
public
DataTextureSource
public
TextureSourceWebRenderOGL
public
BigImageIterator
{
public
:
explicit
TextureImageTextureSourceWebRenderOGL
(
WebRenderCompositorOGL
*
aCompositor
TextureFlags
aFlags
=
TextureFlags
:
:
DEFAULT
)
:
mCompositor
(
aCompositor
)
mFlags
(
aFlags
)
mIterating
(
false
)
{
}
virtual
const
char
*
Name
(
)
const
override
{
return
"
TextureImageTextureSourceWebRenderOGL
"
;
}
virtual
TextureImageTextureSourceWebRenderOGL
*
AsTextureImageTextureSource
(
)
override
{
return
this
;
}
virtual
gl
:
:
TextureImage
*
GetTextureImage
(
)
override
{
return
mTexImage
.
get
(
)
;
}
virtual
bool
Update
(
gfx
:
:
DataSourceSurface
*
aSurface
nsIntRegion
*
aDestRegion
=
nullptr
gfx
:
:
IntPoint
*
aSrcOffset
=
nullptr
)
override
;
virtual
void
DeallocateDeviceData
(
)
override
{
mTexImage
=
nullptr
;
SetUpdateSerial
(
0
)
;
}
virtual
TextureSourceWebRenderOGL
*
AsSourceWebRenderOGL
(
)
override
{
return
this
;
}
virtual
gfx
:
:
IntSize
GetSize
(
)
const
override
;
virtual
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
override
;
virtual
void
SetCompositor
(
Compositor
*
aCompositor
)
override
;
virtual
BigImageIterator
*
AsBigImageIterator
(
)
override
{
return
this
;
}
virtual
void
BeginBigImageIteration
(
)
override
{
mTexImage
-
>
BeginBigImageIteration
(
)
;
mIterating
=
true
;
}
virtual
void
EndBigImageIteration
(
)
override
{
mIterating
=
false
;
}
virtual
gfx
:
:
IntRect
GetTileRect
(
)
override
;
virtual
size_t
GetTileCount
(
)
override
{
return
mTexImage
-
>
GetTileCount
(
)
;
}
virtual
bool
NextTile
(
)
override
{
return
mTexImage
-
>
NextTile
(
)
;
}
private
:
RefPtr
<
gl
:
:
TextureImage
>
mTexImage
;
RefPtr
<
WebRenderCompositorOGL
>
mCompositor
;
TextureFlags
mFlags
;
bool
mIterating
;
}
;
}
}
#
endif
