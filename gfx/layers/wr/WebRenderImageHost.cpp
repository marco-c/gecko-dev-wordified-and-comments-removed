#
include
"
WebRenderImageHost
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
Effects
.
h
"
#
include
"
mozilla
/
layers
/
LayerManagerComposite
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
using
namespace
gfx
;
namespace
layers
{
class
ISurfaceAllocator
;
WebRenderImageHost
:
:
WebRenderImageHost
(
const
TextureInfo
&
aTextureInfo
)
:
CompositableHost
(
aTextureInfo
)
ImageComposite
(
)
{
}
WebRenderImageHost
:
:
~
WebRenderImageHost
(
)
{
}
void
WebRenderImageHost
:
:
UseTextureHost
(
const
nsTArray
<
TimedTexture
>
&
aTextures
)
{
CompositableHost
:
:
UseTextureHost
(
aTextures
)
;
MOZ_ASSERT
(
aTextures
.
Length
(
)
>
=
1
)
;
nsTArray
<
TimedImage
>
newImages
;
for
(
uint32_t
i
=
0
;
i
<
aTextures
.
Length
(
)
;
+
+
i
)
{
const
TimedTexture
&
t
=
aTextures
[
i
]
;
MOZ_ASSERT
(
t
.
mTexture
)
;
if
(
i
+
1
<
aTextures
.
Length
(
)
&
&
t
.
mProducerID
=
=
mLastProducerID
&
&
t
.
mFrameID
<
mLastFrameID
)
{
continue
;
}
TimedImage
&
img
=
*
newImages
.
AppendElement
(
)
;
img
.
mTextureHost
=
t
.
mTexture
;
img
.
mTimeStamp
=
t
.
mTimeStamp
;
img
.
mPictureRect
=
t
.
mPictureRect
;
img
.
mFrameID
=
t
.
mFrameID
;
img
.
mProducerID
=
t
.
mProducerID
;
img
.
mTextureHost
-
>
SetCropRect
(
img
.
mPictureRect
)
;
img
.
mTextureHost
-
>
Updated
(
)
;
}
mImages
.
SwapElements
(
newImages
)
;
newImages
.
Clear
(
)
;
}
void
WebRenderImageHost
:
:
UseComponentAlphaTextures
(
TextureHost
*
aTextureOnBlack
TextureHost
*
aTextureOnWhite
)
{
MOZ_ASSERT_UNREACHABLE
(
"
unexpected
to
be
called
"
)
;
}
void
WebRenderImageHost
:
:
CleanupResources
(
)
{
nsTArray
<
TimedImage
>
newImages
;
mImages
.
SwapElements
(
newImages
)
;
newImages
.
Clear
(
)
;
}
void
WebRenderImageHost
:
:
RemoveTextureHost
(
TextureHost
*
aTexture
)
{
CompositableHost
:
:
RemoveTextureHost
(
aTexture
)
;
for
(
int32_t
i
=
mImages
.
Length
(
)
-
1
;
i
>
=
0
;
-
-
i
)
{
if
(
mImages
[
i
]
.
mTextureHost
=
=
aTexture
)
{
aTexture
-
>
UnbindTextureSource
(
)
;
mImages
.
RemoveElementAt
(
i
)
;
}
}
}
TimeStamp
WebRenderImageHost
:
:
GetCompositionTime
(
)
const
{
return
TimeStamp
:
:
Now
(
)
;
}
TextureHost
*
WebRenderImageHost
:
:
GetAsTextureHost
(
IntRect
*
aPictureRect
)
{
TimedImage
*
img
=
ChooseImage
(
)
;
if
(
img
)
{
return
img
-
>
mTextureHost
;
}
return
nullptr
;
}
void
WebRenderImageHost
:
:
Attach
(
Layer
*
aLayer
Compositor
*
aCompositor
AttachFlags
aFlags
)
{
MOZ_ASSERT_UNREACHABLE
(
"
unexpected
to
be
called
"
)
;
}
void
WebRenderImageHost
:
:
Composite
(
Compositor
*
aCompositor
LayerComposite
*
aLayer
EffectChain
&
aEffectChain
float
aOpacity
const
gfx
:
:
Matrix4x4
&
aTransform
const
gfx
:
:
SamplingFilter
aSamplingFilter
const
gfx
:
:
IntRect
&
aClipRect
const
nsIntRegion
*
aVisibleRegion
const
Maybe
<
gfx
:
:
Polygon
>
&
aGeometry
)
{
MOZ_ASSERT_UNREACHABLE
(
"
unexpected
to
be
called
"
)
;
}
void
WebRenderImageHost
:
:
SetCompositor
(
Compositor
*
aCompositor
)
{
if
(
mCompositor
!
=
aCompositor
)
{
for
(
auto
&
img
:
mImages
)
{
img
.
mTextureHost
-
>
SetTextureSourceProvider
(
aCompositor
)
;
}
}
CompositableHost
:
:
SetCompositor
(
aCompositor
)
;
}
void
WebRenderImageHost
:
:
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
{
aStream
<
<
aPrefix
;
aStream
<
<
nsPrintfCString
(
"
WebRenderImageHost
(
0x
%
p
)
"
this
)
.
get
(
)
;
nsAutoCString
pfx
(
aPrefix
)
;
pfx
+
=
"
"
;
for
(
auto
&
img
:
mImages
)
{
aStream
<
<
"
\
n
"
;
img
.
mTextureHost
-
>
PrintInfo
(
aStream
pfx
.
get
(
)
)
;
AppendToString
(
aStream
img
.
mPictureRect
"
[
picture
-
rect
=
"
"
]
"
)
;
}
}
void
WebRenderImageHost
:
:
Dump
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
bool
aDumpHtml
)
{
for
(
auto
&
img
:
mImages
)
{
aStream
<
<
aPrefix
;
aStream
<
<
(
aDumpHtml
?
"
<
ul
>
<
li
>
TextureHost
:
"
:
"
TextureHost
:
"
)
;
DumpTextureHost
(
aStream
img
.
mTextureHost
)
;
aStream
<
<
(
aDumpHtml
?
"
<
/
li
>
<
/
ul
>
"
:
"
"
)
;
}
}
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
WebRenderImageHost
:
:
GetAsSurface
(
)
{
TimedImage
*
img
=
ChooseImage
(
)
;
if
(
img
)
{
return
img
-
>
mTextureHost
-
>
GetAsSurface
(
)
;
}
return
nullptr
;
}
bool
WebRenderImageHost
:
:
Lock
(
)
{
MOZ_ASSERT_UNREACHABLE
(
"
unexpected
to
be
called
"
)
;
return
false
;
}
void
WebRenderImageHost
:
:
Unlock
(
)
{
MOZ_ASSERT_UNREACHABLE
(
"
unexpected
to
be
called
"
)
;
}
IntSize
WebRenderImageHost
:
:
GetImageSize
(
)
const
{
const
TimedImage
*
img
=
ChooseImage
(
)
;
if
(
img
)
{
return
IntSize
(
img
-
>
mPictureRect
.
width
img
-
>
mPictureRect
.
height
)
;
}
return
IntSize
(
)
;
}
}
}
