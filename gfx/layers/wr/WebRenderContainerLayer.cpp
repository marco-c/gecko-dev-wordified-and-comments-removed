#
include
"
WebRenderContainerLayer
.
h
"
#
include
<
inttypes
.
h
>
#
include
"
gfxPrefs
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
mozilla
/
layers
/
ScrollingLayersHelper
.
h
"
#
include
"
mozilla
/
layers
/
StackingContextHelper
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderBridgeChild
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
UnitTransforms
.
h
"
namespace
mozilla
{
namespace
layers
{
void
WebRenderContainerLayer
:
:
UpdateTransformDataForAnimation
(
)
{
for
(
Animation
&
animation
:
mAnimationInfo
.
GetAnimations
(
)
)
{
if
(
animation
.
property
(
)
=
=
eCSSProperty_transform
)
{
TransformData
&
transformData
=
animation
.
data
(
)
.
get_TransformData
(
)
;
transformData
.
inheritedXScale
(
)
=
GetInheritedXScale
(
)
;
transformData
.
inheritedYScale
(
)
=
GetInheritedYScale
(
)
;
transformData
.
hasPerspectiveParent
(
)
=
GetParent
(
)
&
&
GetParent
(
)
-
>
GetTransformIsPerspective
(
)
;
}
}
}
void
WebRenderContainerLayer
:
:
RenderLayer
(
wr
:
:
DisplayListBuilder
&
aBuilder
const
StackingContextHelper
&
aSc
)
{
nsTArray
<
LayerPolygon
>
children
=
SortChildrenBy3DZOrder
(
SortMode
:
:
WITHOUT_GEOMETRY
)
;
gfx
:
:
Matrix4x4
transform
=
GetTransform
(
)
;
gfx
:
:
Matrix4x4
*
transformForSC
=
&
transform
;
float
opacity
=
GetLocalOpacity
(
)
;
float
*
opacityForSC
=
&
opacity
;
uint64_t
animationsId
=
0
;
if
(
!
GetAnimations
(
)
.
IsEmpty
(
)
)
{
MOZ_ASSERT
(
GetCompositorAnimationsId
(
)
)
;
OptionalOpacity
opacityForCompositor
=
void_t
(
)
;
OptionalTransform
transformForCompositor
=
void_t
(
)
;
if
(
HasOpacityAnimation
(
)
)
{
opacityForSC
=
nullptr
;
opacityForCompositor
=
opacity
;
}
if
(
HasTransformAnimation
(
)
)
{
transformForSC
=
nullptr
;
transformForCompositor
=
transform
;
UpdateTransformDataForAnimation
(
)
;
}
animationsId
=
GetCompositorAnimationsId
(
)
;
OpAddCompositorAnimations
anim
(
CompositorAnimations
(
GetAnimations
(
)
animationsId
)
transformForCompositor
opacityForCompositor
)
;
WrBridge
(
)
-
>
AddWebRenderParentCommand
(
anim
)
;
}
if
(
WrManager
(
)
-
>
AsyncPanZoomEnabled
(
)
&
&
GetScrollThumbData
(
)
.
mDirection
!
=
ScrollDirection
:
:
NONE
)
{
MOZ_ASSERT
(
transformForSC
)
;
mAnimationInfo
.
EnsureAnimationsId
(
)
;
animationsId
=
GetCompositorAnimationsId
(
)
;
transformForSC
=
nullptr
;
}
if
(
transformForSC
&
&
transform
.
IsIdentity
(
)
)
{
transformForSC
=
nullptr
;
}
nsTArray
<
wr
:
:
WrFilterOp
>
filters
;
for
(
const
CSSFilter
&
filter
:
this
-
>
GetFilterChain
(
)
)
{
filters
.
AppendElement
(
wr
:
:
ToWrFilterOp
(
filter
)
)
;
}
ScrollingLayersHelper
scroller
(
this
aBuilder
aSc
)
;
StackingContextHelper
sc
(
aSc
aBuilder
this
animationsId
opacityForSC
transformForSC
filters
)
;
LayerRect
rect
=
Bounds
(
)
;
DumpLayerInfo
(
"
ContainerLayer
"
rect
)
;
for
(
LayerPolygon
&
child
:
children
)
{
if
(
child
.
layer
-
>
IsBackfaceHidden
(
)
)
{
continue
;
}
ToWebRenderLayer
(
child
.
layer
)
-
>
RenderLayer
(
aBuilder
sc
)
;
}
}
void
WebRenderRefLayer
:
:
RenderLayer
(
wr
:
:
DisplayListBuilder
&
aBuilder
const
StackingContextHelper
&
aSc
)
{
ScrollingLayersHelper
scroller
(
this
aBuilder
aSc
)
;
ParentLayerRect
bounds
=
GetLocalTransformTyped
(
)
.
TransformBounds
(
Bounds
(
)
)
;
LayerRect
rect
=
ViewAs
<
LayerPixel
>
(
bounds
PixelCastJustification
:
:
MovingDownToChildren
)
;
DumpLayerInfo
(
"
RefLayer
"
rect
)
;
wr
:
:
LayoutRect
r
=
aSc
.
ToRelativeLayoutRect
(
rect
)
;
aBuilder
.
PushIFrame
(
r
wr
:
:
AsPipelineId
(
mId
)
)
;
}
}
}
