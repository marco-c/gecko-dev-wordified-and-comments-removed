#
include
"
WebRenderCanvasLayer
.
h
"
#
include
"
AsyncCanvasRenderer
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
gfxUtils
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
GLScreenBuffer
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
layers
/
TextureClientSharedSurface
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderBridgeChild
.
h
"
#
include
"
PersistentBufferProvider
.
h
"
#
include
"
SharedSurface
.
h
"
#
include
"
SharedSurfaceGL
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
namespace
mozilla
{
namespace
layers
{
WebRenderCanvasLayer
:
:
~
WebRenderCanvasLayer
(
)
{
MOZ_COUNT_DTOR
(
WebRenderCanvasLayer
)
;
if
(
mExternalImageId
)
{
WrBridge
(
)
-
>
DeallocExternalImageId
(
mExternalImageId
)
;
}
}
void
WebRenderCanvasLayer
:
:
Initialize
(
const
Data
&
aData
)
{
ShareableCanvasLayer
:
:
Initialize
(
aData
)
;
if
(
!
mGLContext
|
|
mGLFrontbuffer
)
return
;
gl
:
:
GLScreenBuffer
*
screen
=
mGLContext
-
>
Screen
(
)
;
auto
factory
=
MakeUnique
<
gl
:
:
SurfaceFactory_Basic
>
(
mGLContext
screen
-
>
mCaps
mFlags
)
;
screen
-
>
Morph
(
Move
(
factory
)
)
;
}
void
WebRenderCanvasLayer
:
:
RenderLayer
(
wr
:
:
DisplayListBuilder
&
aBuilder
)
{
UpdateCompositableClient
(
)
;
if
(
!
mExternalImageId
)
{
mExternalImageId
=
WrBridge
(
)
-
>
AllocExternalImageIdForCompositable
(
mCanvasClient
)
;
}
MOZ_ASSERT
(
mExternalImageId
)
;
gfx
:
:
Matrix4x4
transform
=
GetTransform
(
)
;
const
bool
needsYFlip
=
(
mOriginPos
=
=
gl
:
:
OriginPos
:
:
BottomLeft
)
;
if
(
needsYFlip
)
{
transform
.
PreTranslate
(
0
mBounds
.
height
0
)
.
PreScale
(
1
-
1
1
)
;
}
gfx
:
:
Rect
rect
(
0
0
mBounds
.
width
mBounds
.
height
)
;
rect
=
RelativeToVisible
(
rect
)
;
gfx
:
:
Rect
clip
=
GetWrClipRect
(
rect
)
;
gfx
:
:
Rect
relBounds
=
GetWrRelBounds
(
)
;
gfx
:
:
Rect
overflow
(
0
0
relBounds
.
width
relBounds
.
height
)
;
Maybe
<
WrImageMask
>
mask
=
buildMaskLayer
(
)
;
WrClipRegion
clipRegion
=
aBuilder
.
BuildClipRegion
(
wr
:
:
ToWrRect
(
clip
)
)
;
wr
:
:
ImageRendering
filter
=
wr
:
:
ToImageRendering
(
mSamplingFilter
)
;
WrMixBlendMode
mixBlendMode
=
wr
:
:
ToWrMixBlendMode
(
GetMixBlendMode
(
)
)
;
DumpLayerInfo
(
"
CanvasLayer
"
rect
)
;
if
(
gfxPrefs
:
:
LayersDump
(
)
)
{
printf_stderr
(
"
CanvasLayer
%
p
texture
-
filter
=
%
s
\
n
"
this
-
>
GetLayer
(
)
Stringify
(
filter
)
.
c_str
(
)
)
;
}
WrImageKey
key
;
key
.
mNamespace
=
WrBridge
(
)
-
>
GetNamespace
(
)
;
key
.
mHandle
=
WrBridge
(
)
-
>
GetNextResourceId
(
)
;
WrBridge
(
)
-
>
AddWebRenderParentCommand
(
OpAddExternalImage
(
mExternalImageId
key
)
)
;
aBuilder
.
PushStackingContext
(
wr
:
:
ToWrRect
(
relBounds
)
wr
:
:
ToWrRect
(
overflow
)
mask
.
ptrOr
(
nullptr
)
1
.
0f
transform
mixBlendMode
)
;
aBuilder
.
PushImage
(
wr
:
:
ToWrRect
(
rect
)
clipRegion
filter
key
)
;
aBuilder
.
PopStackingContext
(
)
;
}
void
WebRenderCanvasLayer
:
:
AttachCompositable
(
)
{
mCanvasClient
-
>
Connect
(
)
;
}
}
}
