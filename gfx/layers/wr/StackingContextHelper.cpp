#
include
"
mozilla
/
layers
/
StackingContextHelper
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderLayer
.
h
"
#
include
"
UnitTransforms
.
h
"
namespace
mozilla
{
namespace
layers
{
StackingContextHelper
:
:
StackingContextHelper
(
)
:
mBuilder
(
nullptr
)
{
}
StackingContextHelper
:
:
StackingContextHelper
(
wr
:
:
DisplayListBuilder
&
aBuilder
WebRenderLayer
*
aLayer
const
Maybe
<
gfx
:
:
Matrix4x4
>
&
aTransform
)
:
mBuilder
(
&
aBuilder
)
{
LayerRect
scBounds
=
aLayer
-
>
RelativeToParent
(
aLayer
-
>
BoundsForStackingContext
(
)
)
;
Layer
*
layer
=
aLayer
-
>
GetLayer
(
)
;
gfx
:
:
Matrix4x4
transform
=
aTransform
.
valueOr
(
layer
-
>
GetTransform
(
)
)
;
mBuilder
-
>
PushStackingContext
(
wr
:
:
ToWrRect
(
scBounds
)
1
.
0f
transform
wr
:
:
ToWrMixBlendMode
(
layer
-
>
GetMixBlendMode
(
)
)
)
;
mOrigin
=
aLayer
-
>
Bounds
(
)
.
TopLeft
(
)
;
}
StackingContextHelper
:
:
StackingContextHelper
(
wr
:
:
DisplayListBuilder
&
aBuilder
WebRenderLayer
*
aLayer
uint64_t
aAnimationsId
float
*
aOpacityPtr
gfx
:
:
Matrix4x4
*
aTransformPtr
)
:
mBuilder
(
&
aBuilder
)
{
LayerRect
scBounds
=
aLayer
-
>
RelativeToParent
(
aLayer
-
>
BoundsForStackingContext
(
)
)
;
mBuilder
-
>
PushStackingContext
(
wr
:
:
ToWrRect
(
scBounds
)
aAnimationsId
aOpacityPtr
aTransformPtr
wr
:
:
ToWrMixBlendMode
(
aLayer
-
>
GetLayer
(
)
-
>
GetMixBlendMode
(
)
)
)
;
mOrigin
=
aLayer
-
>
Bounds
(
)
.
TopLeft
(
)
;
}
StackingContextHelper
:
:
~
StackingContextHelper
(
)
{
if
(
mBuilder
)
{
mBuilder
-
>
PopStackingContext
(
)
;
}
}
WrRect
StackingContextHelper
:
:
ToRelativeWrRect
(
const
LayerRect
&
aRect
)
const
{
return
wr
:
:
ToWrRect
(
aRect
-
mOrigin
)
;
}
WrRect
StackingContextHelper
:
:
ToRelativeWrRect
(
const
LayoutDeviceRect
&
aRect
)
const
{
return
wr
:
:
ToWrRect
(
ViewAs
<
LayerPixel
>
(
aRect
PixelCastJustification
:
:
WebRenderHasUnitResolution
)
-
mOrigin
)
;
}
WrPoint
StackingContextHelper
:
:
ToRelativeWrPoint
(
const
LayerPoint
&
aPoint
)
const
{
return
wr
:
:
ToWrPoint
(
aPoint
-
mOrigin
)
;
}
WrRect
StackingContextHelper
:
:
ToRelativeWrRectRounded
(
const
LayoutDeviceRect
&
aRect
)
const
{
return
wr
:
:
ToWrRect
(
RoundedToInt
(
ViewAs
<
LayerPixel
>
(
aRect
PixelCastJustification
:
:
WebRenderHasUnitResolution
)
-
mOrigin
)
)
;
}
}
}
