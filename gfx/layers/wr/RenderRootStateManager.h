#
ifndef
GFX_RENDERROOTSTATEMANAGER_H
#
define
GFX_RENDERROOTSTATEMANAGER_H
#
include
"
mozilla
/
webrender
/
WebRenderAPI
.
h
"
#
include
"
mozilla
/
layers
/
IpcResourceUpdateQueue
.
h
"
#
include
"
mozilla
/
layers
/
SharedSurfacesChild
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderCommandBuilder
.
h
"
#
include
"
nsTHashSet
.
h
"
namespace
mozilla
{
namespace
layers
{
class
RenderRootStateManager
{
typedef
nsTHashSet
<
RefPtr
<
WebRenderUserData
>
>
WebRenderUserDataRefTable
;
public
:
void
AddRef
(
)
;
void
Release
(
)
;
RenderRootStateManager
(
)
:
mLayerManager
(
nullptr
)
mDestroyed
(
false
)
{
}
void
Destroy
(
)
;
bool
IsDestroyed
(
)
{
return
mDestroyed
;
}
wr
:
:
IpcResourceUpdateQueue
&
AsyncResourceUpdates
(
)
;
WebRenderBridgeChild
*
WrBridge
(
)
const
;
WebRenderCommandBuilder
&
CommandBuilder
(
)
;
WebRenderUserDataRefTable
*
GetWebRenderUserDataTable
(
)
;
WebRenderLayerManager
*
LayerManager
(
)
{
return
mLayerManager
;
}
void
AddImageKeyForDiscard
(
wr
:
:
ImageKey
key
)
;
void
AddBlobImageKeyForDiscard
(
wr
:
:
BlobImageKey
key
)
;
void
DiscardImagesInTransaction
(
wr
:
:
IpcResourceUpdateQueue
&
aResources
)
;
void
DiscardLocalImages
(
)
;
void
ClearCachedResources
(
)
;
void
AddActiveCompositorAnimationId
(
uint64_t
aId
)
;
void
AddCompositorAnimationsIdForDiscard
(
uint64_t
aId
)
;
void
DiscardCompositorAnimations
(
)
;
void
RegisterAsyncAnimation
(
const
wr
:
:
ImageKey
&
aKey
SharedSurfacesAnimation
*
aAnimation
)
;
void
DeregisterAsyncAnimation
(
const
wr
:
:
ImageKey
&
aKey
)
;
void
ClearAsyncAnimations
(
)
;
void
WrReleasedImages
(
const
nsTArray
<
wr
:
:
ExternalImageKeyPair
>
&
aPairs
)
;
void
AddWebRenderParentCommand
(
const
WebRenderParentCommand
&
aCmd
)
;
void
UpdateResources
(
wr
:
:
IpcResourceUpdateQueue
&
aResources
)
;
void
AddPipelineIdForCompositable
(
const
wr
:
:
PipelineId
&
aPipelineId
const
CompositableHandle
&
aHandle
CompositableHandleOwner
aOwner
)
;
void
RemovePipelineIdForCompositable
(
const
wr
:
:
PipelineId
&
aPipelineId
)
;
void
ReleaseTextureOfImage
(
const
wr
:
:
ImageKey
&
aKey
)
;
Maybe
<
wr
:
:
FontInstanceKey
>
GetFontKeyForScaledFont
(
gfx
:
:
ScaledFont
*
aScaledFont
wr
:
:
IpcResourceUpdateQueue
&
aResources
)
;
Maybe
<
wr
:
:
FontKey
>
GetFontKeyForUnscaledFont
(
gfx
:
:
UnscaledFont
*
aUnscaledFont
wr
:
:
IpcResourceUpdateQueue
&
aResources
)
;
void
FlushAsyncResourceUpdates
(
)
;
private
:
WebRenderLayerManager
*
mLayerManager
;
Maybe
<
wr
:
:
IpcResourceUpdateQueue
>
mAsyncResourceUpdates
;
nsTArray
<
wr
:
:
ImageKey
>
mImageKeysToDelete
;
nsTArray
<
wr
:
:
BlobImageKey
>
mBlobImageKeysToDelete
;
std
:
:
unordered_map
<
uint64_t
RefPtr
<
SharedSurfacesAnimation
>
>
mAsyncAnimations
;
std
:
:
unordered_set
<
uint64_t
>
mActiveCompositorAnimationIds
;
nsTArray
<
uint64_t
>
mDiscardedCompositorAnimationsIds
;
bool
mDestroyed
;
friend
class
WebRenderLayerManager
;
}
;
}
}
#
endif
