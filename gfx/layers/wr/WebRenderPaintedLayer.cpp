#
include
"
WebRenderPaintedLayer
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderBridgeChild
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
gfxUtils
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
gfx
;
void
WebRenderPaintedLayer
:
:
PaintThebes
(
)
{
PROFILER_LABEL
(
"
WebRenderPaintedLayer
"
"
PaintThebes
"
js
:
:
ProfileEntry
:
:
Category
:
:
GRAPHICS
)
;
uint32_t
flags
=
RotatedContentBuffer
:
:
PAINT_CAN_DRAW_ROTATED
;
PaintState
state
=
mContentClient
-
>
BeginPaintBuffer
(
this
flags
)
;
mValidRegion
.
Sub
(
mValidRegion
state
.
mRegionToInvalidate
)
;
if
(
!
state
.
mRegionToDraw
.
IsEmpty
(
)
&
&
!
Manager
(
)
-
>
GetPaintedLayerCallback
(
)
)
{
return
;
}
state
.
mRegionToInvalidate
.
And
(
state
.
mRegionToInvalidate
GetLocalVisibleRegion
(
)
.
ToUnknownRegion
(
)
)
;
bool
didUpdate
=
false
;
RotatedContentBuffer
:
:
DrawIterator
iter
;
while
(
DrawTarget
*
target
=
mContentClient
-
>
BorrowDrawTargetForPainting
(
state
&
iter
)
)
{
if
(
!
target
|
|
!
target
-
>
IsValid
(
)
)
{
if
(
target
)
{
mContentClient
-
>
ReturnDrawTargetToBuffer
(
target
)
;
}
continue
;
}
SetAntialiasingFlags
(
this
target
)
;
RefPtr
<
gfxContext
>
ctx
=
gfxContext
:
:
CreatePreservingTransformOrNull
(
target
)
;
MOZ_ASSERT
(
ctx
)
;
Manager
(
)
-
>
GetPaintedLayerCallback
(
)
(
this
ctx
iter
.
mDrawRegion
iter
.
mDrawRegion
state
.
mClip
state
.
mRegionToInvalidate
Manager
(
)
-
>
GetPaintedLayerCallbackData
(
)
)
;
ctx
=
nullptr
;
mContentClient
-
>
ReturnDrawTargetToBuffer
(
target
)
;
didUpdate
=
true
;
}
if
(
didUpdate
)
{
Mutated
(
)
;
ContentClientRemote
*
contentClientRemote
=
static_cast
<
ContentClientRemote
*
>
(
mContentClient
.
get
(
)
)
;
MOZ_ASSERT
(
contentClientRemote
-
>
GetIPDLActor
(
)
)
;
Manager
(
)
-
>
Hold
(
this
)
;
contentClientRemote
-
>
Updated
(
state
.
mRegionToDraw
mVisibleRegion
.
ToUnknownRegion
(
)
state
.
mDidSelfCopy
)
;
}
}
void
WebRenderPaintedLayer
:
:
RenderLayerWithReadback
(
ReadbackProcessor
*
aReadback
)
{
if
(
!
mContentClient
)
{
mContentClient
=
ContentClient
:
:
CreateContentClient
(
Manager
(
)
-
>
WRBridge
(
)
)
;
if
(
!
mContentClient
)
{
return
;
}
mContentClient
-
>
Connect
(
)
;
MOZ_ASSERT
(
mContentClient
-
>
GetForwarder
(
)
)
;
}
nsTArray
<
ReadbackProcessor
:
:
Update
>
readbackUpdates
;
nsIntRegion
readbackRegion
;
if
(
aReadback
&
&
UsedForReadback
(
)
)
{
aReadback
-
>
GetPaintedLayerUpdates
(
this
&
readbackUpdates
)
;
}
IntPoint
origin
(
mVisibleRegion
.
GetBounds
(
)
.
x
mVisibleRegion
.
GetBounds
(
)
.
y
)
;
mContentClient
-
>
BeginPaint
(
)
;
PaintThebes
(
)
;
mContentClient
-
>
EndPaint
(
&
readbackUpdates
)
;
}
void
WebRenderPaintedLayer
:
:
RenderLayer
(
)
{
RenderLayerWithReadback
(
nullptr
)
;
if
(
!
mExternalImageId
)
{
mExternalImageId
=
WRBridge
(
)
-
>
AllocExternalImageIdForCompositable
(
mContentClient
)
;
MOZ_ASSERT
(
mExternalImageId
)
;
}
LayerIntRegion
visibleRegion
=
GetVisibleRegion
(
)
;
LayerIntRect
bounds
=
visibleRegion
.
GetBounds
(
)
;
LayerIntSize
size
=
bounds
.
Size
(
)
;
if
(
size
.
IsEmpty
(
)
)
{
return
;
}
WRScrollFrameStackingContextGenerator
scrollFrames
(
this
)
;
Rect
rect
=
RelativeToVisible
(
IntRectToRect
(
bounds
.
ToUnknownRect
(
)
)
)
;
Rect
clip
;
if
(
GetClipRect
(
)
.
isSome
(
)
)
{
clip
=
RelativeToTransformedVisible
(
IntRectToRect
(
GetClipRect
(
)
.
ref
(
)
.
ToUnknownRect
(
)
)
)
;
}
else
{
clip
=
rect
;
}
Maybe
<
WrImageMask
>
mask
=
buildMaskLayer
(
)
;
if
(
gfxPrefs
:
:
LayersDump
(
)
)
printf_stderr
(
"
PaintedLayer
%
p
using
rect
:
%
s
clip
:
%
s
\
n
"
this
Stringify
(
rect
)
.
c_str
(
)
Stringify
(
clip
)
.
c_str
(
)
)
;
Rect
relBounds
=
TransformedVisibleBoundsRelativeToParent
(
)
;
Rect
overflow
(
0
0
relBounds
.
width
relBounds
.
height
)
;
Matrix4x4
transform
;
WRBridge
(
)
-
>
AddWebRenderCommand
(
OpDPPushStackingContext
(
wr
:
:
ToWrRect
(
relBounds
)
wr
:
:
ToWrRect
(
overflow
)
mask
transform
FrameMetrics
:
:
NULL_SCROLL_ID
)
)
;
ContentClientRemoteBuffer
*
contentClientRemote
=
static_cast
<
ContentClientRemoteBuffer
*
>
(
mContentClient
.
get
(
)
)
;
visibleRegion
.
MoveBy
(
-
contentClientRemote
-
>
BufferRect
(
)
.
x
-
contentClientRemote
-
>
BufferRect
(
)
.
y
)
;
WRBridge
(
)
-
>
AddWebRenderCommand
(
OpDPPushExternalImageId
(
visibleRegion
wr
:
:
ToWrRect
(
rect
)
wr
:
:
ToWrRect
(
clip
)
Nothing
(
)
WrTextureFilter
:
:
Linear
mExternalImageId
)
)
;
if
(
gfxPrefs
:
:
LayersDump
(
)
)
printf_stderr
(
"
PaintedLayer
%
p
using
%
s
as
bounds
/
overflow
%
s
for
transform
\
n
"
this
Stringify
(
relBounds
)
.
c_str
(
)
Stringify
(
transform
)
.
c_str
(
)
)
;
WRBridge
(
)
-
>
AddWebRenderCommand
(
OpDPPopStackingContext
(
)
)
;
}
}
}
