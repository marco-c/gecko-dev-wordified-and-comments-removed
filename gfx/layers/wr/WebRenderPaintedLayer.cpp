#
include
"
WebRenderPaintedLayer
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
TextureClientRecycleAllocator
.
h
"
#
include
"
mozilla
/
layers
/
TextureWrapperImage
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
gfxUtils
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
gfx
;
void
WebRenderPaintedLayer
:
:
PaintThebes
(
nsTArray
<
ReadbackProcessor
:
:
Update
>
*
aReadbackUpdates
)
{
PROFILER_LABEL
(
"
WebRenderPaintedLayer
"
"
PaintThebes
"
js
:
:
ProfileEntry
:
:
Category
:
:
GRAPHICS
)
;
mContentClient
-
>
BeginPaint
(
)
;
uint32_t
flags
=
RotatedContentBuffer
:
:
PAINT_CAN_DRAW_ROTATED
;
PaintState
state
=
mContentClient
-
>
BeginPaintBuffer
(
this
flags
)
;
mValidRegion
.
Sub
(
mValidRegion
state
.
mRegionToInvalidate
)
;
if
(
!
state
.
mRegionToDraw
.
IsEmpty
(
)
&
&
!
Manager
(
)
-
>
GetPaintedLayerCallback
(
)
)
{
return
;
}
state
.
mRegionToInvalidate
.
And
(
state
.
mRegionToInvalidate
GetLocalVisibleRegion
(
)
.
ToUnknownRegion
(
)
)
;
bool
didUpdate
=
false
;
RotatedContentBuffer
:
:
DrawIterator
iter
;
while
(
DrawTarget
*
target
=
mContentClient
-
>
BorrowDrawTargetForPainting
(
state
&
iter
)
)
{
if
(
!
target
|
|
!
target
-
>
IsValid
(
)
)
{
if
(
target
)
{
mContentClient
-
>
ReturnDrawTargetToBuffer
(
target
)
;
}
continue
;
}
SetAntialiasingFlags
(
this
target
)
;
RefPtr
<
gfxContext
>
ctx
=
gfxContext
:
:
CreatePreservingTransformOrNull
(
target
)
;
MOZ_ASSERT
(
ctx
)
;
Manager
(
)
-
>
GetPaintedLayerCallback
(
)
(
this
ctx
iter
.
mDrawRegion
iter
.
mDrawRegion
state
.
mClip
state
.
mRegionToInvalidate
Manager
(
)
-
>
GetPaintedLayerCallbackData
(
)
)
;
ctx
=
nullptr
;
mContentClient
-
>
ReturnDrawTargetToBuffer
(
target
)
;
didUpdate
=
true
;
}
mContentClient
-
>
EndPaint
(
aReadbackUpdates
)
;
if
(
didUpdate
)
{
Mutated
(
)
;
ContentClientRemote
*
contentClientRemote
=
static_cast
<
ContentClientRemote
*
>
(
mContentClient
.
get
(
)
)
;
Manager
(
)
-
>
Hold
(
this
)
;
contentClientRemote
-
>
Updated
(
state
.
mRegionToDraw
mVisibleRegion
.
ToUnknownRegion
(
)
state
.
mDidSelfCopy
)
;
}
}
void
WebRenderPaintedLayer
:
:
RenderLayerWithReadback
(
ReadbackProcessor
*
aReadback
)
{
if
(
!
mContentClient
)
{
mContentClient
=
ContentClient
:
:
CreateContentClient
(
Manager
(
)
-
>
WrBridge
(
)
)
;
if
(
!
mContentClient
)
{
return
;
}
mContentClient
-
>
Connect
(
)
;
MOZ_ASSERT
(
mContentClient
-
>
GetForwarder
(
)
)
;
}
nsTArray
<
ReadbackProcessor
:
:
Update
>
readbackUpdates
;
nsIntRegion
readbackRegion
;
if
(
aReadback
&
&
UsedForReadback
(
)
)
{
aReadback
-
>
GetPaintedLayerUpdates
(
this
&
readbackUpdates
)
;
}
PaintThebes
(
&
readbackUpdates
)
;
}
void
WebRenderPaintedLayer
:
:
RenderLayer
(
wr
:
:
DisplayListBuilder
&
aBuilder
)
{
if
(
!
mImageContainer
)
{
mImageContainer
=
LayerManager
:
:
CreateImageContainer
(
)
;
}
if
(
!
mImageClient
)
{
mImageClient
=
ImageClient
:
:
CreateImageClient
(
CompositableType
:
:
IMAGE
WrBridge
(
)
TextureFlags
:
:
DEFAULT
)
;
if
(
!
mImageClient
)
{
return
;
}
mImageClient
-
>
Connect
(
)
;
}
if
(
!
mExternalImageId
)
{
mExternalImageId
=
WrBridge
(
)
-
>
AllocExternalImageIdForCompositable
(
mImageClient
)
;
MOZ_ASSERT
(
mExternalImageId
)
;
}
LayerIntRegion
visibleRegion
=
GetVisibleRegion
(
)
;
LayerIntRect
bounds
=
visibleRegion
.
GetBounds
(
)
;
LayerIntSize
size
=
bounds
.
Size
(
)
;
if
(
size
.
IsEmpty
(
)
)
{
if
(
gfxPrefs
:
:
LayersDump
(
)
)
{
printf_stderr
(
"
PaintedLayer
%
p
skipping
\
n
"
this
-
>
GetLayer
(
)
)
;
}
return
;
}
IntSize
imageSize
(
size
.
width
size
.
height
)
;
RefPtr
<
TextureClient
>
texture
=
mImageClient
-
>
GetTextureClientRecycler
(
)
-
>
CreateOrRecycle
(
SurfaceFormat
:
:
B8G8R8A8
imageSize
BackendSelector
:
:
Content
TextureFlags
:
:
DEFAULT
)
;
if
(
!
texture
)
{
return
;
}
{
TextureClientAutoLock
autoLock
(
texture
OpenMode
:
:
OPEN_WRITE_ONLY
)
;
if
(
!
autoLock
.
Succeeded
(
)
)
{
return
;
}
RefPtr
<
DrawTarget
>
target
=
texture
-
>
BorrowDrawTarget
(
)
;
if
(
!
target
)
{
return
;
}
target
-
>
ClearRect
(
Rect
(
0
0
imageSize
.
width
imageSize
.
height
)
)
;
target
-
>
SetTransform
(
Matrix
(
)
.
PreTranslate
(
-
bounds
.
x
-
bounds
.
y
)
)
;
RefPtr
<
gfxContext
>
ctx
=
gfxContext
:
:
CreatePreservingTransformOrNull
(
target
)
;
MOZ_ASSERT
(
ctx
)
;
Manager
(
)
-
>
GetPaintedLayerCallback
(
)
(
this
ctx
visibleRegion
.
ToUnknownRegion
(
)
visibleRegion
.
ToUnknownRegion
(
)
DrawRegionClip
:
:
DRAW
nsIntRegion
(
)
Manager
(
)
-
>
GetPaintedLayerCallbackData
(
)
)
;
}
RefPtr
<
TextureWrapperImage
>
image
=
new
TextureWrapperImage
(
texture
IntRect
(
IntPoint
(
0
0
)
imageSize
)
)
;
mImageContainer
-
>
SetCurrentImageInTransaction
(
image
)
;
if
(
!
mImageClient
-
>
UpdateImage
(
mImageContainer
0
)
)
{
return
;
}
gfx
:
:
Matrix4x4
transform
=
GetTransform
(
)
;
gfx
:
:
Rect
relBounds
=
GetWrRelBounds
(
)
;
gfx
:
:
Rect
overflow
(
0
0
relBounds
.
width
relBounds
.
height
)
;
gfx
:
:
Rect
rect
(
0
0
size
.
width
size
.
height
)
;
gfx
:
:
Rect
clipRect
=
GetWrClipRect
(
rect
)
;
Maybe
<
WrImageMask
>
mask
=
BuildWrMaskLayer
(
)
;
WrClipRegion
clip
=
aBuilder
.
BuildClipRegion
(
wr
:
:
ToWrRect
(
clipRect
)
)
;
wr
:
:
MixBlendMode
mixBlendMode
=
wr
:
:
ToWrMixBlendMode
(
GetMixBlendMode
(
)
)
;
DumpLayerInfo
(
"
PaintedLayer
"
rect
)
;
WrImageKey
key
;
key
.
mNamespace
=
WrBridge
(
)
-
>
GetNamespace
(
)
;
key
.
mHandle
=
WrBridge
(
)
-
>
GetNextResourceId
(
)
;
WrBridge
(
)
-
>
AddWebRenderParentCommand
(
OpAddExternalImage
(
mExternalImageId
key
)
)
;
aBuilder
.
PushStackingContext
(
wr
:
:
ToWrRect
(
relBounds
)
wr
:
:
ToWrRect
(
overflow
)
mask
.
ptrOr
(
nullptr
)
1
.
0f
transform
mixBlendMode
)
;
aBuilder
.
PushImage
(
wr
:
:
ToWrRect
(
rect
)
clip
wr
:
:
ImageRendering
:
:
Auto
key
)
;
aBuilder
.
PopStackingContext
(
)
;
}
}
}
