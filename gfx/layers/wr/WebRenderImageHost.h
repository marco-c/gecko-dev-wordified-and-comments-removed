#
ifndef
MOZILLA_GFX_WEBRENDERIMAGEHOST_H
#
define
MOZILLA_GFX_WEBRENDERIMAGEHOST_H
#
include
"
CompositableHost
.
h
"
#
include
"
mozilla
/
layers
/
ImageComposite
.
h
"
namespace
mozilla
{
namespace
layers
{
class
WebRenderImageHost
:
public
CompositableHost
public
ImageComposite
{
public
:
explicit
WebRenderImageHost
(
const
TextureInfo
&
aTextureInfo
)
;
~
WebRenderImageHost
(
)
;
virtual
CompositableType
GetType
(
)
override
{
return
mTextureInfo
.
mCompositableType
;
}
virtual
void
Composite
(
LayerComposite
*
aLayer
EffectChain
&
aEffectChain
float
aOpacity
const
gfx
:
:
Matrix4x4
&
aTransform
const
gfx
:
:
SamplingFilter
aSamplingFilter
const
gfx
:
:
IntRect
&
aClipRect
const
nsIntRegion
*
aVisibleRegion
=
nullptr
const
Maybe
<
gfx
:
:
Polygon
>
&
aGeometry
=
Nothing
(
)
)
override
;
virtual
void
UseTextureHost
(
const
nsTArray
<
TimedTexture
>
&
aTextures
)
override
;
virtual
void
UseComponentAlphaTextures
(
TextureHost
*
aTextureOnBlack
TextureHost
*
aTextureOnWhite
)
override
;
virtual
void
RemoveTextureHost
(
TextureHost
*
aTexture
)
override
;
virtual
TextureHost
*
GetAsTextureHost
(
gfx
:
:
IntRect
*
aPictureRect
=
nullptr
)
override
;
virtual
void
Attach
(
Layer
*
aLayer
Compositor
*
aCompositor
AttachFlags
aFlags
=
NO_FLAGS
)
override
;
virtual
void
SetCompositor
(
Compositor
*
aCompositor
)
override
;
gfx
:
:
IntSize
GetImageSize
(
)
const
override
;
virtual
void
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
override
;
virtual
void
Dump
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
=
"
"
bool
aDumpHtml
=
false
)
override
;
virtual
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
GetAsSurface
(
)
override
;
virtual
bool
Lock
(
)
override
;
virtual
void
Unlock
(
)
override
;
virtual
void
CleanupResources
(
)
override
;
protected
:
virtual
TimeStamp
GetCompositionTime
(
)
const
override
;
}
;
}
}
#
endif
