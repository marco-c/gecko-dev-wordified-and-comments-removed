#
ifndef
mozilla_layers_WebRenderCompositionRecorder_h
#
define
mozilla_layers_WebRenderCompositionRecorder_h
#
include
"
CompositionRecorder
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
webrender
/
webrender_ffi
.
h
"
#
include
<
unordered_map
>
namespace
mozilla
{
namespace
wr
{
class
WebRenderPipelineInfo
;
}
namespace
layers
{
class
WebRenderCompositionRecorder
final
:
public
CompositionRecorder
{
public
:
explicit
WebRenderCompositionRecorder
(
TimeStamp
aRecordingStart
wr
:
:
PipelineId
aRootPipelineId
)
:
CompositionRecorder
(
aRecordingStart
)
mMutex
(
"
CompositionRecorder
"
)
mFinishedRecording
(
false
)
mRootPipelineId
(
aRootPipelineId
)
{
}
WebRenderCompositionRecorder
(
)
=
delete
;
WebRenderCompositionRecorder
(
WebRenderCompositionRecorder
&
)
=
delete
;
WebRenderCompositionRecorder
(
WebRenderCompositionRecorder
&
&
)
=
delete
;
WebRenderCompositionRecorder
&
operator
=
(
WebRenderCompositionRecorder
&
)
=
delete
;
WebRenderCompositionRecorder
&
operator
=
(
WebRenderCompositionRecorder
&
&
)
=
delete
;
void
RecordFrame
(
RecordedFrame
*
aFrame
)
override
;
void
WriteCollectedFrames
(
)
override
;
bool
MaybeRecordFrame
(
wr
:
:
Renderer
*
aRenderer
wr
:
:
WebRenderPipelineInfo
*
aFrameEpochs
)
;
protected
:
~
WebRenderCompositionRecorder
(
)
=
default
;
bool
DidPaintContent
(
wr
:
:
WebRenderPipelineInfo
*
aFrameEpochs
)
;
private
:
Mutex
mMutex
;
bool
mFinishedRecording
;
wr
:
:
PipelineId
mRootPipelineId
;
std
:
:
unordered_map
<
uint64_t
wr
:
:
Epoch
>
mContentPipelines
;
}
;
}
}
#
endif
