#
ifndef
MOZILLA_GFX_AsyncImagePipelineOp_H
#
define
MOZILLA_GFX_AsyncImagePipelineOp_H
#
include
<
queue
>
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
webrender
/
webrender_ffi
.
h
"
#
include
"
Units
.
h
"
namespace
mozilla
{
namespace
wr
{
struct
Transaction
;
}
namespace
layers
{
class
AsyncImagePipelineManager
;
class
TextureHost
;
class
AsyncImagePipelineOp
{
public
:
enum
class
Tag
{
ApplyAsyncImageForPipeline
}
;
const
Tag
mTag
;
AsyncImagePipelineManager
*
const
mAsyncImageManager
;
const
wr
:
:
PipelineId
mPipelineId
;
const
CompositableTextureHostRef
mTextureHost
;
private
:
AsyncImagePipelineOp
(
const
Tag
aTag
AsyncImagePipelineManager
*
aAsyncImageManager
const
wr
:
:
PipelineId
&
aPipelineId
TextureHost
*
aTextureHost
)
:
mTag
(
aTag
)
mAsyncImageManager
(
aAsyncImageManager
)
mPipelineId
(
aPipelineId
)
mTextureHost
(
aTextureHost
)
{
MOZ_ASSERT
(
mTag
=
=
Tag
:
:
ApplyAsyncImageForPipeline
)
;
}
public
:
static
AsyncImagePipelineOp
ApplyAsyncImageForPipeline
(
AsyncImagePipelineManager
*
aAsyncImageManager
const
wr
:
:
PipelineId
&
aPipelineId
TextureHost
*
aTextureHost
)
{
return
AsyncImagePipelineOp
(
Tag
:
:
ApplyAsyncImageForPipeline
aAsyncImageManager
aPipelineId
aTextureHost
)
;
}
}
;
struct
AsyncImagePipelineOps
{
explicit
AsyncImagePipelineOps
(
wr
:
:
Transaction
*
aTransaction
)
:
mTransaction
(
aTransaction
)
{
}
void
HandleOps
(
wr
:
:
TransactionBuilder
&
aTxn
)
;
wr
:
:
Transaction
*
const
mTransaction
;
std
:
:
queue
<
AsyncImagePipelineOp
>
mList
;
}
;
}
}
#
endif
