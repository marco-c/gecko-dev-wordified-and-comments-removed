#
ifndef
GFX_ANIMATIONINFO_H
#
define
GFX_ANIMATIONINFO_H
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCSSPropertyIDSet
.
h
"
#
include
"
nsDisplayItemTypes
.
h
"
#
include
"
mozilla
/
Array
.
h
"
struct
RawServoAnimationValue
;
class
nsIContent
;
class
nsIFrame
;
namespace
mozilla
{
namespace
layers
{
class
Animation
;
class
CompositorAnimations
;
class
Layer
;
class
LayerManager
;
struct
AnimData
;
class
AnimationInfo
final
{
typedef
InfallibleTArray
<
Animation
>
AnimationArray
;
public
:
AnimationInfo
(
)
;
~
AnimationInfo
(
)
;
void
EnsureAnimationsId
(
)
;
Animation
*
AddAnimation
(
)
;
Animation
*
AddAnimationForNextTransaction
(
)
;
void
SetAnimationGeneration
(
uint64_t
aCount
)
{
mAnimationGeneration
=
Some
(
aCount
)
;
}
Maybe
<
uint64_t
>
GetAnimationGeneration
(
)
const
{
return
mAnimationGeneration
;
}
void
ClearAnimations
(
)
;
void
ClearAnimationsForNextTransaction
(
)
;
void
SetCompositorAnimations
(
const
CompositorAnimations
&
aCompositorAnimations
)
;
bool
StartPendingAnimations
(
const
TimeStamp
&
aReadyTime
)
;
void
TransferMutatedFlagToLayer
(
Layer
*
aLayer
)
;
uint64_t
GetCompositorAnimationsId
(
)
{
return
mCompositorAnimationsId
;
}
RawServoAnimationValue
*
GetBaseAnimationStyle
(
)
const
{
return
mBaseAnimationStyle
;
}
InfallibleTArray
<
AnimData
>
&
GetAnimationData
(
)
{
return
mAnimationData
;
}
AnimationArray
&
GetAnimations
(
)
{
return
mAnimations
;
}
bool
ApplyPendingUpdatesForThisTransaction
(
)
;
bool
HasTransformAnimation
(
)
const
;
static
Maybe
<
uint64_t
>
GetGenerationFromFrame
(
nsIFrame
*
aFrame
DisplayItemType
aDisplayItemKey
)
;
using
CompositorAnimatableDisplayItemTypes
=
Array
<
DisplayItemType
nsCSSPropertyIDSet
:
:
CompositorAnimatableCount
(
)
>
;
using
AnimationGenerationCallback
=
std
:
:
function
<
bool
(
const
Maybe
<
uint64_t
>
&
aGeneration
DisplayItemType
aDisplayItemType
)
>
;
static
void
EnumerateGenerationOnFrame
(
const
nsIFrame
*
aFrame
const
nsIContent
*
aContent
const
CompositorAnimatableDisplayItemTypes
&
aDisplayItemTypes
const
AnimationGenerationCallback
&
aCallback
)
;
protected
:
AnimationArray
mAnimations
;
uint64_t
mCompositorAnimationsId
;
nsAutoPtr
<
AnimationArray
>
mPendingAnimations
;
InfallibleTArray
<
AnimData
>
mAnimationData
;
Maybe
<
uint64_t
>
mAnimationGeneration
;
RefPtr
<
RawServoAnimationValue
>
mBaseAnimationStyle
;
bool
mMutated
;
}
;
}
}
#
endif
