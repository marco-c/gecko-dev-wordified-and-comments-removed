#
ifndef
GFX_LAYERS_H
#
define
GFX_LAYERS_H
#
include
<
cstdint
>
#
include
<
cstring
>
#
include
<
iosfwd
>
#
include
<
new
>
#
include
<
unordered_set
>
#
include
<
utility
>
#
include
"
FrameMetrics
.
h
"
#
include
"
Units
.
h
"
#
include
"
gfxPoint
.
h
"
#
include
"
gfxRect
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Poison
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
gfx
/
BasePoint
.
h
"
#
include
"
mozilla
/
gfx
/
BaseSize
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Polygon
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
gfx
/
UserData
.
h
"
#
include
"
mozilla
/
layers
/
AnimationInfo
.
h
"
#
include
"
mozilla
/
layers
/
LayerAttributes
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
#
include
"
mozilla
/
layers
/
BSPTree
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsPoint
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
nsStringFlags
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
nsDebug
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
DataSourceSurface
;
class
DrawTarget
;
class
Path
;
}
namespace
layers
{
class
Animation
;
class
AsyncPanZoomController
;
class
CompositorAnimations
;
class
SpecificLayerAttributes
;
class
Compositor
;
class
TransformData
;
struct
PropertyAnimationGroup
;
class
Layer
{
public
:
enum
{
CONTENT_OPAQUE
=
0x01
CONTENT_COMPONENT_ALPHA
=
0x02
CONTENT_EXTEND_3D_CONTEXT
=
0x08
CONTENT_DISABLE_SUBPIXEL_AA
=
0x20
CONTENT_DISABLE_FLATTENING
=
0x40
CONTENT_BACKFACE_HIDDEN
=
0x80
CONTENT_SNAP_TO_GRID
=
0x100
}
;
}
;
void
SetAntialiasingFlags
(
Layer
*
aLayer
gfx
:
:
DrawTarget
*
aTarget
)
;
#
ifdef
MOZ_DUMP_PAINTING
void
WriteSnapshotToDumpFile
(
Layer
*
aLayer
gfx
:
:
DataSourceSurface
*
aSurf
)
;
void
WriteSnapshotToDumpFile
(
Compositor
*
aCompositor
gfx
:
:
DrawTarget
*
aTarget
)
;
#
endif
gfx
:
:
IntRect
ToOutsideIntRect
(
const
gfxRect
&
aRect
)
;
void
RecordCompositionPayloadsPresented
(
const
TimeStamp
&
aCompositionEndTime
const
nsTArray
<
CompositionPayload
>
&
aPayloads
)
;
}
}
#
endif
