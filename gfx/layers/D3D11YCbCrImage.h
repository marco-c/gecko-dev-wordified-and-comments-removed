#
ifndef
GFX_D3D11_YCBCR_IMAGE_H
#
define
GFX_D3D11_YCBCR_IMAGE_H
#
include
"
d3d11
.
h
"
#
include
"
mozilla
/
layers
/
TextureClientRecycleAllocator
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
ImageContainer
.
h
"
namespace
mozilla
{
namespace
layers
{
class
ImageContainer
;
class
DXGIYCbCrTextureClient
;
class
D3D11YCbCrRecycleAllocator
:
public
TextureClientRecycleAllocator
{
public
:
explicit
D3D11YCbCrRecycleAllocator
(
KnowsCompositor
*
aAllocator
ID3D11Device
*
aDevice
)
:
TextureClientRecycleAllocator
(
aAllocator
)
mDevice
(
aDevice
)
{
}
ID3D11Device
*
GetDevice
(
)
{
return
mDevice
;
}
KnowsCompositor
*
GetAllocator
(
)
{
return
mSurfaceAllocator
;
}
void
SetSizes
(
const
gfx
:
:
IntSize
&
aYSize
const
gfx
:
:
IntSize
&
aCbCrSize
)
;
protected
:
already_AddRefed
<
TextureClient
>
Allocate
(
gfx
:
:
SurfaceFormat
aFormat
gfx
:
:
IntSize
aSize
BackendSelector
aSelector
TextureFlags
aTextureFlags
TextureAllocationFlags
aAllocFlags
)
override
;
RefPtr
<
ID3D11Device
>
mDevice
;
Maybe
<
gfx
:
:
IntSize
>
mYSize
;
Maybe
<
gfx
:
:
IntSize
>
mCbCrSize
;
}
;
class
D3D11YCbCrImage
:
public
Image
{
public
:
D3D11YCbCrImage
(
)
;
virtual
~
D3D11YCbCrImage
(
)
;
bool
SetData
(
KnowsCompositor
*
aAllocator
ImageContainer
*
aContainer
const
PlanarYCbCrData
&
aData
)
;
gfx
:
:
IntSize
GetSize
(
)
override
;
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetAsSourceSurface
(
)
override
;
TextureClient
*
GetTextureClient
(
KnowsCompositor
*
aForwarder
)
override
;
gfx
:
:
IntRect
GetPictureRect
(
)
override
{
return
mPictureRect
;
}
private
:
gfx
:
:
IntSize
mYSize
;
gfx
:
:
IntSize
mCbCrSize
;
gfx
:
:
IntRect
mPictureRect
;
YUVColorSpace
mColorSpace
;
RefPtr
<
TextureClient
>
mTextureClient
;
}
;
}
}
#
endif
