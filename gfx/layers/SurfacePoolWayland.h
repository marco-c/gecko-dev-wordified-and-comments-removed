#
ifndef
mozilla_layers_SurfacePoolWayland_h
#
define
mozilla_layers_SurfacePoolWayland_h
#
include
<
wayland
-
egl
.
h
>
#
include
"
mozilla
/
layers
/
SurfacePool
.
h
"
#
include
"
mozilla
/
widget
/
nsWaylandDisplay
.
h
"
#
include
"
mozilla
/
widget
/
WaylandShmBuffer
.
h
"
namespace
mozilla
:
:
layers
{
using
gfx
:
:
DrawTarget
;
using
gfx
:
:
IntRegion
;
using
gfx
:
:
IntSize
;
using
gl
:
:
GLContext
;
using
widget
:
:
nsWaylandDisplay
;
using
widget
:
:
WaylandShmBuffer
;
class
NativeSurfaceWayland
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
NativeSurfaceWayland
)
;
static
RefPtr
<
NativeSurfaceWayland
>
Create
(
const
IntSize
&
aSize
GLContext
*
aGL
)
;
virtual
Maybe
<
GLuint
>
GetAsFramebuffer
(
)
{
return
Nothing
(
)
;
}
;
virtual
RefPtr
<
DrawTarget
>
GetAsDrawTarget
(
)
{
return
nullptr
;
}
;
virtual
void
Commit
(
const
IntRegion
&
aInvalidRegion
)
=
0
;
virtual
void
NotifySurfaceReady
(
)
{
}
;
virtual
void
DestroyGLResources
(
)
{
}
;
struct
wl_surface
*
mWlSurface
=
nullptr
;
struct
wl_subsurface
*
mWlSubsurface
=
nullptr
;
struct
wp_viewport
*
mViewport
=
nullptr
;
protected
:
explicit
NativeSurfaceWayland
(
const
RefPtr
<
nsWaylandDisplay
>
&
aWaylandDisplay
)
;
virtual
~
NativeSurfaceWayland
(
)
;
RefPtr
<
nsWaylandDisplay
>
mWaylandDisplay
;
}
;
class
NativeSurfaceWaylandEGL
final
:
public
NativeSurfaceWayland
{
public
:
Maybe
<
GLuint
>
GetAsFramebuffer
(
)
override
;
void
Commit
(
const
IntRegion
&
aInvalidRegion
)
override
;
void
NotifySurfaceReady
(
)
override
;
void
DestroyGLResources
(
)
override
;
private
:
friend
RefPtr
<
NativeSurfaceWayland
>
NativeSurfaceWayland
:
:
Create
(
const
IntSize
&
aSize
GLContext
*
aGL
)
;
NativeSurfaceWaylandEGL
(
const
RefPtr
<
nsWaylandDisplay
>
&
aWaylandDisplay
GLContext
*
aGL
)
;
~
NativeSurfaceWaylandEGL
(
)
;
GLContext
*
mGL
=
nullptr
;
struct
wl_egl_window
*
mEGLWindow
=
nullptr
;
EGLSurface
mEGLSurface
=
nullptr
;
}
;
class
NativeSurfaceWaylandSHM
final
:
public
NativeSurfaceWayland
{
public
:
RefPtr
<
DrawTarget
>
GetAsDrawTarget
(
)
override
;
void
Commit
(
const
IntRegion
&
aInvalidRegion
)
override
;
static
void
BufferReleaseCallbackHandler
(
void
*
aData
wl_buffer
*
aBuffer
)
;
private
:
friend
RefPtr
<
NativeSurfaceWayland
>
NativeSurfaceWayland
:
:
Create
(
const
IntSize
&
aSize
GLContext
*
aGL
)
;
NativeSurfaceWaylandSHM
(
const
RefPtr
<
nsWaylandDisplay
>
&
aWaylandDisplay
const
IntSize
&
aSize
)
;
RefPtr
<
WaylandShmBuffer
>
ObtainBufferFromPool
(
)
;
void
ReturnBufferToPool
(
const
RefPtr
<
WaylandShmBuffer
>
&
aBuffer
)
;
void
EnforcePoolSizeLimit
(
)
;
void
BufferReleaseCallbackHandler
(
wl_buffer
*
aBuffer
)
;
IntSize
mSize
;
nsTArray
<
RefPtr
<
WaylandShmBuffer
>
>
mInUseBuffers
;
nsTArray
<
RefPtr
<
WaylandShmBuffer
>
>
mAvailableBuffers
;
RefPtr
<
WaylandShmBuffer
>
mCurrentBuffer
;
}
;
class
SurfacePoolWayland
final
:
public
SurfacePool
{
public
:
RefPtr
<
SurfacePoolHandle
>
GetHandleForGL
(
GLContext
*
aGL
)
override
;
void
DestroyGLResourcesForContext
(
GLContext
*
aGL
)
override
;
private
:
friend
class
SurfacePoolHandleWayland
;
friend
RefPtr
<
SurfacePool
>
SurfacePool
:
:
Create
(
size_t
aPoolSizeLimit
)
;
explicit
SurfacePoolWayland
(
size_t
aPoolSizeLimit
)
;
RefPtr
<
NativeSurfaceWayland
>
ObtainSurfaceFromPool
(
const
IntSize
&
aSize
GLContext
*
aGL
)
;
void
ReturnSurfaceToPool
(
const
RefPtr
<
NativeSurfaceWayland
>
&
aSurface
)
;
void
EnforcePoolSizeLimit
(
)
;
struct
SurfacePoolEntry
{
IntSize
mSize
;
RefPtr
<
NativeSurfaceWayland
>
mNativeSurface
;
GLContext
*
mGLContext
;
bool
mRecycle
;
}
;
bool
CanRecycleSurfaceForRequest
(
const
SurfacePoolEntry
&
aEntry
const
IntSize
&
aSize
GLContext
*
aGL
)
;
std
:
:
unordered_map
<
NativeSurfaceWayland
*
SurfacePoolEntry
>
mInUseEntries
;
nsTArray
<
SurfacePoolEntry
>
mAvailableEntries
;
size_t
mPoolSizeLimit
;
}
;
class
SurfacePoolHandleWayland
final
:
public
SurfacePoolHandle
{
public
:
SurfacePoolHandleWayland
*
AsSurfacePoolHandleWayland
(
)
override
{
return
this
;
}
RefPtr
<
NativeSurfaceWayland
>
ObtainSurfaceFromPool
(
const
IntSize
&
aSize
)
;
void
ReturnSurfaceToPool
(
const
RefPtr
<
NativeSurfaceWayland
>
&
aSurface
)
;
const
auto
&
gl
(
)
{
return
mGL
;
}
RefPtr
<
SurfacePool
>
Pool
(
)
override
{
return
mPool
;
}
void
OnBeginFrame
(
)
override
;
void
OnEndFrame
(
)
override
;
private
:
friend
class
SurfacePoolWayland
;
SurfacePoolHandleWayland
(
RefPtr
<
SurfacePoolWayland
>
aPool
GLContext
*
aGL
)
;
const
RefPtr
<
SurfacePoolWayland
>
mPool
;
const
RefPtr
<
GLContext
>
mGL
;
}
;
}
#
endif
