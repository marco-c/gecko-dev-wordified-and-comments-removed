#
ifndef
mozilla_layers_SurfacePool_h
#
define
mozilla_layers_SurfacePool_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
ThreadSafeWeakPtr
.
h
"
#
include
"
GLTypes
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRegion
.
h
"
namespace
mozilla
{
namespace
gl
{
class
GLContext
;
}
namespace
layers
{
class
SurfacePoolHandle
;
class
SurfacePool
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
SurfacePool
)
;
#
if
defined
(
XP_MACOSX
)
|
|
defined
(
MOZ_WAYLAND
)
static
RefPtr
<
SurfacePool
>
Create
(
size_t
aPoolSizeLimit
)
;
#
endif
virtual
RefPtr
<
SurfacePoolHandle
>
GetHandleForGL
(
gl
:
:
GLContext
*
aGL
)
=
0
;
virtual
void
DestroyGLResourcesForContext
(
gl
:
:
GLContext
*
aGL
)
=
0
;
protected
:
virtual
~
SurfacePool
(
)
=
default
;
}
;
class
SurfacePoolHandleCA
;
class
SurfacePoolHandleWayland
;
class
SurfacePoolHandle
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
SurfacePoolHandle
)
;
virtual
SurfacePoolHandleCA
*
AsSurfacePoolHandleCA
(
)
{
return
nullptr
;
}
virtual
SurfacePoolHandleWayland
*
AsSurfacePoolHandleWayland
(
)
{
return
nullptr
;
}
virtual
RefPtr
<
SurfacePool
>
Pool
(
)
=
0
;
virtual
void
OnBeginFrame
(
)
=
0
;
virtual
void
OnEndFrame
(
)
=
0
;
protected
:
virtual
~
SurfacePoolHandle
(
)
=
default
;
}
;
}
}
#
endif
