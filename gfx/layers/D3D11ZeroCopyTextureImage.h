#
ifndef
GFX_D311_TEXTURE_IMF_SAMPLE_IMAGE_H
#
define
GFX_D311_TEXTURE_IMF_SAMPLE_IMAGE_H
#
include
"
ImageContainer
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
TextureD3D11
.
h
"
#
include
"
mozilla
/
ThreadSafeWeakPtr
.
h
"
struct
ID3D11Texture2D
;
struct
IMFSample
;
namespace
mozilla
{
namespace
gl
{
class
GLBlitHelper
;
}
namespace
layers
{
class
ZeroCopyUsageInfo
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ZeroCopyUsageInfo
)
ZeroCopyUsageInfo
(
)
=
default
;
bool
SupportsZeroCopyNV12Texture
(
)
{
return
mSupportsZeroCopyNV12Texture
;
}
void
DisableZeroCopyNV12Texture
(
)
{
mSupportsZeroCopyNV12Texture
=
false
;
}
protected
:
~
ZeroCopyUsageInfo
(
)
=
default
;
Atomic
<
bool
>
mSupportsZeroCopyNV12Texture
{
true
}
;
}
;
class
D3D11ZeroCopyTextureImage
:
public
Image
{
public
:
D3D11ZeroCopyTextureImage
(
ID3D11Texture2D
*
aTexture
uint32_t
aArrayIndex
const
gfx
:
:
IntSize
&
aSize
const
gfx
:
:
IntRect
&
aRect
gfx
:
:
ColorSpace2
aColorSpace
gfx
:
:
ColorRange
aColorRange
)
;
virtual
~
D3D11ZeroCopyTextureImage
(
)
=
default
;
void
AllocateTextureClient
(
KnowsCompositor
*
aKnowsCompositor
RefPtr
<
ZeroCopyUsageInfo
>
aUsageInfo
)
;
gfx
:
:
IntSize
GetSize
(
)
const
override
;
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetAsSourceSurface
(
)
override
;
nsresult
BuildSurfaceDescriptorBuffer
(
SurfaceDescriptorBuffer
&
aSdBuffer
BuildSdbFlags
aFlags
const
std
:
:
function
<
MemoryOrShmem
(
uint32_t
)
>
&
aAllocate
)
override
;
TextureClient
*
GetTextureClient
(
KnowsCompositor
*
aKnowsCompositor
)
override
;
gfx
:
:
IntRect
GetPictureRect
(
)
const
override
{
return
mPictureRect
;
}
ID3D11Texture2D
*
GetTexture
(
)
const
;
gfx
:
:
ColorRange
GetColorRange
(
)
const
{
return
mColorRange
;
}
protected
:
friend
class
gl
:
:
GLBlitHelper
;
D3D11TextureData
*
GetData
(
)
const
{
if
(
!
mTextureClient
)
{
return
nullptr
;
}
return
mTextureClient
-
>
GetInternalData
(
)
-
>
AsD3D11TextureData
(
)
;
}
RefPtr
<
ID3D11Texture2D
>
mTexture
;
RefPtr
<
TextureClient
>
mTextureClient
;
public
:
const
uint32_t
mArrayIndex
;
const
gfx
:
:
IntSize
mSize
;
const
gfx
:
:
IntRect
mPictureRect
;
const
gfx
:
:
ColorSpace2
mColorSpace
;
const
gfx
:
:
ColorRange
mColorRange
;
}
;
class
IMFSampleWrapper
:
public
SupportsThreadSafeWeakPtr
<
IMFSampleWrapper
>
{
public
:
MOZ_DECLARE_REFCOUNTED_TYPENAME
(
IMFSampleWrapper
)
static
RefPtr
<
IMFSampleWrapper
>
Create
(
IMFSample
*
aVideoSample
)
;
virtual
~
IMFSampleWrapper
(
)
;
void
ClearVideoSample
(
)
;
protected
:
explicit
IMFSampleWrapper
(
IMFSample
*
aVideoSample
)
;
RefPtr
<
IMFSample
>
mVideoSample
;
}
;
class
D3D11TextureIMFSampleImage
final
:
public
D3D11ZeroCopyTextureImage
{
public
:
D3D11TextureIMFSampleImage
(
IMFSample
*
aVideoSample
ID3D11Texture2D
*
aTexture
uint32_t
aArrayIndex
const
gfx
:
:
IntSize
&
aSize
const
gfx
:
:
IntRect
&
aRect
gfx
:
:
ColorSpace2
aColorSpace
gfx
:
:
ColorRange
aColorRange
)
;
virtual
~
D3D11TextureIMFSampleImage
(
)
=
default
;
RefPtr
<
IMFSampleWrapper
>
GetIMFSampleWrapper
(
)
;
private
:
RefPtr
<
IMFSampleWrapper
>
mVideoSample
;
}
;
}
}
#
endif
