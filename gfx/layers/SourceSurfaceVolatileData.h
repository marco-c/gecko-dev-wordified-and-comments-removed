#
ifndef
MOZILLA_GFX_SOURCESURFACEVOLATILEDATA_H_
#
define
MOZILLA_GFX_SOURCESURFACEVOLATILEDATA_H_
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
VolatileBuffer
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
SourceSurfaceVolatileData
:
public
DataSourceSurface
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
SourceSurfaceVolatileData
override
)
SourceSurfaceVolatileData
(
)
:
mMutex
(
"
SourceSurfaceVolatileData
"
)
mStride
(
0
)
mMapCount
(
0
)
mFormat
(
SurfaceFormat
:
:
UNKNOWN
)
{
}
bool
Init
(
const
IntSize
&
aSize
int32_t
aStride
SurfaceFormat
aFormat
)
;
uint8_t
*
GetData
(
)
override
{
return
mVBufPtr
;
}
int32_t
Stride
(
)
override
{
return
mStride
;
}
SurfaceType
GetType
(
)
const
override
{
return
SurfaceType
:
:
DATA
;
}
IntSize
GetSize
(
)
const
override
{
return
mSize
;
}
SurfaceFormat
GetFormat
(
)
const
override
{
return
mFormat
;
}
void
GuaranteePersistance
(
)
override
;
void
AddSizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
size_t
&
aHeapSizeOut
size_t
&
aNonHeapSizeOut
)
const
override
;
bool
OnHeap
(
)
const
override
{
return
mVBuf
-
>
OnHeap
(
)
;
}
bool
Map
(
MapType
MappedSurface
*
aMappedSurface
)
override
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
mMapCount
=
=
0
)
{
mVBufPtr
=
mVBuf
;
}
if
(
mVBufPtr
.
WasBufferPurged
(
)
)
{
return
false
;
}
aMappedSurface
-
>
mData
=
mVBufPtr
;
aMappedSurface
-
>
mStride
=
mStride
;
+
+
mMapCount
;
return
true
;
}
void
Unmap
(
)
override
{
MutexAutoLock
lock
(
mMutex
)
;
MOZ_ASSERT
(
mMapCount
>
0
)
;
if
(
-
-
mMapCount
=
=
0
)
{
mVBufPtr
=
nullptr
;
}
}
private
:
~
SourceSurfaceVolatileData
(
)
override
{
MOZ_ASSERT
(
mMapCount
=
=
0
)
;
}
Mutex
mMutex
;
int32_t
mStride
;
int32_t
mMapCount
;
IntSize
mSize
;
RefPtr
<
VolatileBuffer
>
mVBuf
;
VolatileBufferPtr
<
uint8_t
>
mVBufPtr
;
SurfaceFormat
mFormat
;
}
;
}
}
#
endif
