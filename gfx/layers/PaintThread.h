#
ifndef
MOZILLA_LAYERS_PAINTTHREAD_H
#
define
MOZILLA_LAYERS_PAINTTHREAD_H
#
include
"
base
/
platform_thread
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
DrawTarget
;
class
DrawTargetCapture
;
}
;
namespace
layers
{
class
CapturedPaintState
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CapturedPaintState
)
public
:
CapturedPaintState
(
nsIntRegion
&
aRegionToDraw
gfx
:
:
DrawTarget
*
aTarget
gfx
:
:
DrawTarget
*
aTargetOnWhite
const
gfx
:
:
Matrix
&
aTargetTransform
SurfaceMode
aSurfaceMode
gfxContentType
aContentType
)
:
mRegionToDraw
(
aRegionToDraw
)
mTarget
(
aTarget
)
mTargetOnWhite
(
aTargetOnWhite
)
mTargetTransform
(
aTargetTransform
)
mSurfaceMode
(
aSurfaceMode
)
mContentType
(
aContentType
)
{
}
nsIntRegion
mRegionToDraw
;
RefPtr
<
TextureClient
>
mTextureClient
;
RefPtr
<
TextureClient
>
mTextureClientOnWhite
;
RefPtr
<
gfx
:
:
DrawTargetCapture
>
mCapture
;
RefPtr
<
gfx
:
:
DrawTarget
>
mTarget
;
RefPtr
<
gfx
:
:
DrawTarget
>
mTargetOnWhite
;
gfx
:
:
Matrix
mTargetTransform
;
SurfaceMode
mSurfaceMode
;
gfxContentType
mContentType
;
protected
:
virtual
~
CapturedPaintState
(
)
{
}
}
;
typedef
bool
(
*
PrepDrawTargetForPaintingCallback
)
(
CapturedPaintState
*
aPaintState
)
;
class
CompositorBridgeChild
;
class
PaintThread
final
{
friend
void
DestroyPaintThread
(
UniquePtr
<
PaintThread
>
&
&
aPaintThread
)
;
public
:
static
void
Start
(
)
;
static
void
Shutdown
(
)
;
static
PaintThread
*
Get
(
)
;
void
PaintContents
(
CapturedPaintState
*
aState
PrepDrawTargetForPaintingCallback
aCallback
)
;
void
EndLayer
(
)
;
void
EndLayerTransaction
(
SyncObjectClient
*
aSyncObject
)
;
void
Release
(
)
;
void
AddRef
(
)
;
static
bool
IsOnPaintThread
(
)
;
private
:
bool
Init
(
)
;
void
ShutdownOnPaintThread
(
)
;
void
InitOnPaintThread
(
)
;
void
AsyncPaintContents
(
CompositorBridgeChild
*
aBridge
CapturedPaintState
*
aState
PrepDrawTargetForPaintingCallback
aCallback
)
;
void
AsyncEndLayer
(
)
;
void
AsyncEndLayerTransaction
(
CompositorBridgeChild
*
aBridge
SyncObjectClient
*
aSyncObject
)
;
static
StaticAutoPtr
<
PaintThread
>
sSingleton
;
static
StaticRefPtr
<
nsIThread
>
sThread
;
static
PlatformThreadId
sThreadId
;
nsTArray
<
RefPtr
<
gfx
:
:
DrawTarget
>
>
mDrawTargetsToFlush
;
}
;
}
}
#
endif
