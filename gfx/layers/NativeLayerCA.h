#
ifndef
mozilla_layers_NativeLayerCA_h
#
define
mozilla_layers_NativeLayerCA_h
#
include
<
IOSurface
/
IOSurface
.
h
>
#
include
<
deque
>
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
layers
/
NativeLayer
.
h
"
#
include
"
CFTypeRefPtr
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
ifdef
__OBJC__
class
CALayer
;
#
else
typedef
void
CALayer
;
#
endif
namespace
mozilla
{
namespace
layers
{
class
IOSurfaceRegistry
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
IOSurfaceRegistry
)
virtual
void
RegisterSurface
(
CFTypeRefPtr
<
IOSurfaceRef
>
aSurface
)
=
0
;
virtual
void
UnregisterSurface
(
CFTypeRefPtr
<
IOSurfaceRef
>
aSurface
)
=
0
;
protected
:
virtual
~
IOSurfaceRegistry
(
)
{
}
}
;
class
NativeLayerRootCA
:
public
NativeLayerRoot
{
public
:
static
already_AddRefed
<
NativeLayerRootCA
>
CreateForCALayer
(
CALayer
*
aLayer
)
;
void
ApplyChanges
(
)
;
void
SetBackingScale
(
float
aBackingScale
)
;
already_AddRefed
<
NativeLayer
>
CreateLayer
(
)
override
;
void
AppendLayer
(
NativeLayer
*
aLayer
)
override
;
void
RemoveLayer
(
NativeLayer
*
aLayer
)
override
;
protected
:
explicit
NativeLayerRootCA
(
CALayer
*
aLayer
)
;
~
NativeLayerRootCA
(
)
override
;
Mutex
mMutex
;
nsTArray
<
RefPtr
<
NativeLayerCA
>
>
mSublayers
;
CALayer
*
mRootCALayer
=
nullptr
;
float
mBackingScale
=
1
.
0f
;
bool
mMutated
=
false
;
}
;
class
NativeLayerCA
:
public
NativeLayer
{
public
:
virtual
NativeLayerCA
*
AsNativeLayerCA
(
)
override
{
return
this
;
}
void
SetRect
(
const
gfx
:
:
IntRect
&
aRect
)
override
;
gfx
:
:
IntRect
GetRect
(
)
override
;
gfx
:
:
IntRegion
CurrentSurfaceInvalidRegion
(
)
;
void
InvalidateRegionThroughoutSwapchain
(
const
gfx
:
:
IntRegion
&
aRegion
)
;
CFTypeRefPtr
<
IOSurfaceRef
>
NextSurface
(
)
;
void
NotifySurfaceReady
(
)
;
void
SetSurfaceRegistry
(
RefPtr
<
IOSurfaceRegistry
>
aSurfaceRegistry
)
;
RefPtr
<
IOSurfaceRegistry
>
GetSurfaceRegistry
(
)
;
void
SetSurfaceIsFlipped
(
bool
aIsFlipped
)
;
bool
SurfaceIsFlipped
(
)
;
void
SetOpaqueRegion
(
const
gfx
:
:
IntRegion
&
aRegion
)
override
;
gfx
:
:
IntRegion
OpaqueRegion
(
)
override
;
protected
:
friend
class
NativeLayerRootCA
;
NativeLayerCA
(
)
;
~
NativeLayerCA
(
)
override
;
CALayer
*
UnderlyingCALayer
(
)
{
return
mWrappingCALayer
;
}
void
ApplyChanges
(
)
;
void
SetBackingScale
(
float
aBackingScale
)
;
struct
SurfaceWithInvalidRegion
{
CFTypeRefPtr
<
IOSurfaceRef
>
mSurface
;
gfx
:
:
IntRegion
mInvalidRegion
;
gfx
:
:
IntSize
mSize
;
}
;
std
:
:
vector
<
SurfaceWithInvalidRegion
>
RemoveExcessUnusedSurfaces
(
const
MutexAutoLock
&
)
;
void
PlaceContentLayers
(
const
MutexAutoLock
&
const
gfx
:
:
IntRegion
&
aRegion
bool
aOpaque
std
:
:
deque
<
CALayer
*
>
*
aLayersToRecycle
)
;
Mutex
mMutex
;
RefPtr
<
IOSurfaceRegistry
>
mSurfaceRegistry
;
Maybe
<
SurfaceWithInvalidRegion
>
mInProgressSurface
;
Maybe
<
SurfaceWithInvalidRegion
>
mReadySurface
;
std
:
:
deque
<
SurfaceWithInvalidRegion
>
mSurfaces
;
gfx
:
:
IntPoint
mPosition
;
gfx
:
:
IntSize
mSize
;
gfx
:
:
IntRegion
mOpaqueRegion
;
CALayer
*
mWrappingCALayer
=
nullptr
;
std
:
:
deque
<
CALayer
*
>
mContentCALayers
;
float
mBackingScale
=
1
.
0f
;
bool
mSurfaceIsFlipped
=
false
;
bool
mMutatedPosition
=
false
;
bool
mMutatedGeometry
=
false
;
}
;
}
}
#
endif
