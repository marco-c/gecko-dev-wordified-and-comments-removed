#
ifndef
mozilla_layers_NativeLayerCA_h
#
define
mozilla_layers_NativeLayerCA_h
#
include
<
IOSurface
/
IOSurfaceRef
.
h
>
#
include
<
deque
>
#
include
<
unordered_map
>
#
include
<
ostream
>
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
gfx
/
MacIOSurface
.
h
"
#
include
"
mozilla
/
layers
/
NativeLayer
.
h
"
#
include
"
mozilla
/
layers
/
NativeLayerMacSurfaceHandler
.
h
"
#
include
"
mozilla
/
webrender
/
RenderMacIOSurfaceTextureHost
.
h
"
#
include
"
CFTypeRefPtr
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
ifdef
__OBJC__
class
CALayer
;
#
else
typedef
void
CALayer
;
#
endif
namespace
mozilla
{
namespace
gl
{
class
GLContextCGL
;
class
MozFramebuffer
;
}
namespace
wr
{
class
RenderMacIOSurfaceTextureHost
;
}
namespace
layers
{
#
ifdef
XP_MACOSX
class
NativeLayerRootSnapshotterCA
;
#
endif
enum
class
VideoLowPowerType
{
NotVideo
LowPower
FailMultipleVideo
FailWindowed
FailOverlaid
FailBacking
FailMacOSVersion
FailPref
FailSurface
FailEnqueue
}
;
class
NativeLayerRootCA
:
public
NativeLayerRoot
{
public
:
static
already_AddRefed
<
NativeLayerRootCA
>
CreateForCALayer
(
CALayer
*
aLayer
)
;
virtual
NativeLayerRootCA
*
AsNativeLayerRootCA
(
)
override
{
return
this
;
}
bool
CommitToScreen
(
)
override
;
void
CommitOffscreen
(
)
;
#
ifdef
XP_MACOSX
void
OnNativeLayerRootSnapshotterDestroyed
(
NativeLayerRootSnapshotterCA
*
aNativeLayerRootSnapshotter
)
;
#
endif
void
SuspendOffMainThreadCommits
(
)
;
bool
UnsuspendOffMainThreadCommits
(
)
;
bool
AreOffMainThreadCommitsSuspended
(
)
;
void
DumpLayerTreeToFile
(
const
char
*
aPath
const
MutexAutoLock
&
aProofOfLock
)
;
enum
class
WhichRepresentation
:
uint8_t
{
ONSCREEN
OFFSCREEN
}
;
already_AddRefed
<
NativeLayer
>
CreateLayer
(
const
gfx
:
:
IntSize
&
aSize
bool
aIsOpaque
SurfacePoolHandle
*
aSurfacePoolHandle
)
override
;
void
AppendLayer
(
NativeLayer
*
aLayer
)
override
;
void
RemoveLayer
(
NativeLayer
*
aLayer
)
override
;
void
SetLayers
(
const
nsTArray
<
RefPtr
<
NativeLayer
>
>
&
aLayers
)
override
;
UniquePtr
<
NativeLayerRootSnapshotter
>
CreateSnapshotter
(
)
override
;
void
SetBackingScale
(
float
aBackingScale
)
;
float
BackingScale
(
)
;
already_AddRefed
<
NativeLayer
>
CreateLayerForExternalTexture
(
bool
aIsOpaque
)
override
;
already_AddRefed
<
NativeLayer
>
CreateLayerForColor
(
gfx
:
:
DeviceColor
aColor
)
override
;
void
SetWindowIsFullscreen
(
bool
aFullscreen
)
;
VideoLowPowerType
CheckVideoLowPower
(
const
MutexAutoLock
&
aProofOfLock
)
;
protected
:
explicit
NativeLayerRootCA
(
CALayer
*
aLayer
)
;
~
NativeLayerRootCA
(
)
override
;
struct
Representation
{
explicit
Representation
(
CALayer
*
aRootCALayer
)
;
~
Representation
(
)
;
void
Commit
(
WhichRepresentation
aRepresentation
const
nsTArray
<
RefPtr
<
NativeLayerCA
>
>
&
aSublayers
bool
aWindowIsFullscreen
)
;
CALayer
*
mRootCALayer
=
nullptr
;
bool
mMutatedLayerStructure
=
false
;
}
;
template
<
typename
F
>
void
ForAllRepresentations
(
F
aFn
)
;
Mutex
mMutex
MOZ_UNANNOTATED
;
Representation
mOnscreenRepresentation
;
Representation
mOffscreenRepresentation
;
#
ifdef
XP_MACOSX
NativeLayerRootSnapshotterCA
*
mWeakSnapshotter
=
nullptr
;
#
endif
nsTArray
<
RefPtr
<
NativeLayerCA
>
>
mSublayers
;
float
mBackingScale
=
1
.
0f
;
bool
mMutated
=
false
;
bool
mOffMainThreadCommitsSuspended
=
false
;
bool
mCommitPending
=
false
;
bool
mWindowIsFullscreen
=
false
;
unsigned
int
mTelemetryCommitCount
=
0
;
}
;
class
RenderSourceNLRS
;
#
ifdef
XP_MACOSX
class
NativeLayerRootSnapshotterCA
final
:
public
NativeLayerRootSnapshotter
{
public
:
static
UniquePtr
<
NativeLayerRootSnapshotterCA
>
Create
(
NativeLayerRootCA
*
aLayerRoot
CALayer
*
aRootCALayer
)
;
virtual
~
NativeLayerRootSnapshotterCA
(
)
;
bool
ReadbackPixels
(
const
gfx
:
:
IntSize
&
aReadbackSize
gfx
:
:
SurfaceFormat
aReadbackFormat
const
Range
<
uint8_t
>
&
aReadbackBuffer
)
override
;
already_AddRefed
<
profiler_screenshots
:
:
RenderSource
>
GetWindowContents
(
const
gfx
:
:
IntSize
&
aWindowSize
)
override
;
already_AddRefed
<
profiler_screenshots
:
:
DownscaleTarget
>
CreateDownscaleTarget
(
const
gfx
:
:
IntSize
&
aSize
)
override
;
already_AddRefed
<
profiler_screenshots
:
:
AsyncReadbackBuffer
>
CreateAsyncReadbackBuffer
(
const
gfx
:
:
IntSize
&
aSize
)
override
;
protected
:
NativeLayerRootSnapshotterCA
(
NativeLayerRootCA
*
aLayerRoot
RefPtr
<
gl
:
:
GLContext
>
&
&
aGL
CALayer
*
aRootCALayer
)
;
void
UpdateSnapshot
(
const
gfx
:
:
IntSize
&
aSize
)
;
RefPtr
<
NativeLayerRootCA
>
mLayerRoot
;
RefPtr
<
gl
:
:
GLContext
>
mGL
;
RefPtr
<
RenderSourceNLRS
>
mSnapshot
;
CARenderer
*
mRenderer
=
nullptr
;
}
;
#
endif
class
NativeLayerCA
:
public
NativeLayer
{
public
:
virtual
NativeLayerCA
*
AsNativeLayerCA
(
)
override
{
return
this
;
}
gfx
:
:
IntSize
GetSize
(
)
override
;
void
SetPosition
(
const
gfx
:
:
IntPoint
&
aPosition
)
override
;
gfx
:
:
IntPoint
GetPosition
(
)
override
;
void
SetTransform
(
const
gfx
:
:
Matrix4x4
&
aTransform
)
override
;
gfx
:
:
Matrix4x4
GetTransform
(
)
override
;
gfx
:
:
IntRect
GetRect
(
)
override
;
void
SetSamplingFilter
(
gfx
:
:
SamplingFilter
aSamplingFilter
)
override
;
RefPtr
<
gfx
:
:
DrawTarget
>
NextSurfaceAsDrawTarget
(
const
gfx
:
:
IntRect
&
aDisplayRect
const
gfx
:
:
IntRegion
&
aUpdateRegion
gfx
:
:
BackendType
aBackendType
)
override
;
Maybe
<
GLuint
>
NextSurfaceAsFramebuffer
(
const
gfx
:
:
IntRect
&
aDisplayRect
const
gfx
:
:
IntRegion
&
aUpdateRegion
bool
aNeedsDepth
)
override
;
void
NotifySurfaceReady
(
)
override
;
void
DiscardBackbuffers
(
)
override
;
bool
IsOpaque
(
)
override
;
void
SetClipRect
(
const
Maybe
<
gfx
:
:
IntRect
>
&
aClipRect
)
override
;
Maybe
<
gfx
:
:
IntRect
>
ClipRect
(
)
override
;
void
SetRoundedClipRect
(
const
Maybe
<
gfx
:
:
RoundedRect
>
&
aClip
)
override
;
Maybe
<
gfx
:
:
RoundedRect
>
RoundedClipRect
(
)
override
;
gfx
:
:
IntRect
CurrentSurfaceDisplayRect
(
)
override
;
void
SetSurfaceIsFlipped
(
bool
aIsFlipped
)
override
;
bool
SurfaceIsFlipped
(
)
override
;
void
DumpLayer
(
std
:
:
ostream
&
aOutputStream
)
;
void
AttachExternalImage
(
wr
:
:
RenderTextureHost
*
aExternalImage
)
override
;
GpuFence
*
GetGpuFence
(
)
override
;
void
SetRootWindowIsFullscreen
(
bool
aFullscreen
)
;
protected
:
friend
class
NativeLayerRootCA
;
NativeLayerCA
(
const
gfx
:
:
IntSize
&
aSize
bool
aIsOpaque
SurfacePoolHandleCA
*
aSurfacePoolHandle
)
;
explicit
NativeLayerCA
(
bool
aIsOpaque
)
;
explicit
NativeLayerCA
(
gfx
:
:
DeviceColor
aColor
)
;
~
NativeLayerCA
(
)
override
;
bool
NextSurface
(
const
MutexAutoLock
&
aProofOfLock
)
;
typedef
NativeLayerRootCA
:
:
WhichRepresentation
WhichRepresentation
;
CALayer
*
UnderlyingCALayer
(
WhichRepresentation
aRepresentation
)
;
enum
class
UpdateType
{
None
OnlyVideo
All
}
;
UpdateType
HasUpdate
(
WhichRepresentation
aRepresentation
)
;
bool
WillUpdateAffectLayers
(
WhichRepresentation
aRepresentation
)
;
bool
ApplyChanges
(
WhichRepresentation
aRepresentation
UpdateType
aUpdate
)
;
void
SetBackingScale
(
float
aBackingScale
)
;
void
InvalidateRegionThroughoutSwapchain
(
const
MutexAutoLock
&
aProofOfLock
const
gfx
:
:
IntRegion
&
aRegion
)
;
template
<
typename
F
>
void
HandlePartialUpdate
(
const
MutexAutoLock
&
aProofOfLock
const
gfx
:
:
IntRect
&
aDisplayRect
const
gfx
:
:
IntRegion
&
aUpdateRegion
F
&
&
aCopyFn
)
;
bool
IsVideo
(
const
MutexAutoLock
&
aProofOfLock
)
;
bool
ShouldSpecializeVideo
(
const
MutexAutoLock
&
aProofOfLock
)
;
bool
HasExtent
(
)
const
{
return
mHasExtent
;
}
void
SetHasExtent
(
bool
aHasExtent
)
{
mHasExtent
=
aHasExtent
;
}
static
Maybe
<
CGRect
>
CalculateClipGeometry
(
const
gfx
:
:
IntSize
&
aSize
const
gfx
:
:
IntPoint
&
aPosition
const
gfx
:
:
Matrix4x4
&
aTransform
const
gfx
:
:
IntRect
&
aDisplayRect
const
Maybe
<
gfx
:
:
IntRect
>
&
aClipRect
float
aBackingScale
)
;
struct
Representation
{
Representation
(
)
;
~
Representation
(
)
;
CALayer
*
UnderlyingCALayer
(
)
{
return
mWrappingCALayer
;
}
bool
EnqueueSurface
(
IOSurfaceRef
aSurfaceRef
)
;
bool
ApplyChanges
(
UpdateType
aUpdate
const
gfx
:
:
IntSize
&
aSize
bool
aIsOpaque
const
gfx
:
:
IntPoint
&
aPosition
const
gfx
:
:
Matrix4x4
&
aTransform
const
gfx
:
:
IntRect
&
aDisplayRect
const
Maybe
<
gfx
:
:
IntRect
>
&
aClipRect
const
Maybe
<
gfx
:
:
RoundedRect
>
&
aRoundedClip
float
aBackingScale
bool
aSurfaceIsFlipped
gfx
:
:
SamplingFilter
aSamplingFilter
bool
aSpecializeVideo
CFTypeRefPtr
<
IOSurfaceRef
>
aFrontSurface
CFTypeRefPtr
<
CGColorRef
>
aColor
bool
aIsDRM
bool
aIsVideo
)
;
UpdateType
HasUpdate
(
bool
aIsVideo
)
;
CALayer
*
mWrappingCALayer
=
nullptr
;
CALayer
*
mRoundedClipCALayer
=
nullptr
;
CALayer
*
mContentCALayer
=
nullptr
;
CALayer
*
mOpaquenessTintLayer
=
nullptr
;
#
ifdef
NIGHTLY_BUILD
bool
mLogNextVideoSurface
=
false
;
#
endif
bool
mMutatedPosition
:
1
;
bool
mMutatedTransform
:
1
;
bool
mMutatedDisplayRect
:
1
;
bool
mMutatedClipRect
:
1
;
bool
mMutatedRoundedClipRect
:
1
;
bool
mMutatedBackingScale
:
1
;
bool
mMutatedSize
:
1
;
bool
mMutatedSurfaceIsFlipped
:
1
;
bool
mMutatedFrontSurface
:
1
;
bool
mMutatedSamplingFilter
:
1
;
bool
mMutatedSpecializeVideo
:
1
;
bool
mMutatedIsDRM
:
1
;
}
;
Representation
&
GetRepresentation
(
WhichRepresentation
aRepresentation
)
;
template
<
typename
F
>
void
ForAllRepresentations
(
F
aFn
)
;
Mutex
mMutex
MOZ_UNANNOTATED
;
Maybe
<
NativeLayerMacSurfaceHandler
>
mSurfaceHandler
;
RefPtr
<
wr
:
:
RenderMacIOSurfaceTextureHost
>
mTextureHost
;
bool
mTextureHostIsVideo
=
false
;
Representation
mOnscreenRepresentation
;
Representation
mOffscreenRepresentation
;
gfx
:
:
IntPoint
mPosition
;
gfx
:
:
Matrix4x4
mTransform
;
gfx
:
:
IntRect
mDisplayRect
;
gfx
:
:
IntSize
mSize
;
Maybe
<
gfx
:
:
IntRect
>
mClipRect
;
Maybe
<
gfx
:
:
RoundedRect
>
mRoundedClipRect
;
gfx
:
:
SamplingFilter
mSamplingFilter
=
gfx
:
:
SamplingFilter
:
:
POINT
;
float
mBackingScale
=
1
.
0f
;
bool
mSurfaceIsFlipped
=
false
;
CFTypeRefPtr
<
CGColorRef
>
mColor
;
const
bool
mIsOpaque
=
false
;
bool
mRootWindowIsFullscreen
=
false
;
bool
mSpecializeVideo
=
false
;
bool
mHasExtent
=
false
;
bool
mIsDRM
=
false
;
#
ifdef
NIGHTLY_BUILD
bool
mHasEverAttachExternalImage
=
false
;
bool
mHasEverNotifySurfaceReady
=
false
;
#
endif
}
;
}
}
#
endif
