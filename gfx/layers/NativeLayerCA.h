#
ifndef
mozilla_layers_NativeLayerCA_h
#
define
mozilla_layers_NativeLayerCA_h
#
include
<
IOSurface
/
IOSurface
.
h
>
#
include
<
deque
>
#
include
<
unordered_map
>
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
gfx
/
MacIOSurface
.
h
"
#
include
"
mozilla
/
layers
/
NativeLayer
.
h
"
#
include
"
CFTypeRefPtr
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
ifdef
__OBJC__
class
CALayer
;
#
else
typedef
void
CALayer
;
#
endif
namespace
mozilla
{
namespace
gl
{
class
GLContextCGL
;
class
MozFramebuffer
;
}
namespace
layers
{
class
SurfacePoolHandleCA
;
class
NativeLayerRootCA
:
public
NativeLayerRoot
{
public
:
static
already_AddRefed
<
NativeLayerRootCA
>
CreateForCALayer
(
CALayer
*
aLayer
)
;
bool
CommitToScreen
(
)
override
;
void
SuspendOffMainThreadCommits
(
)
;
bool
UnsuspendOffMainThreadCommits
(
)
;
bool
AreOffMainThreadCommitsSuspended
(
)
;
already_AddRefed
<
NativeLayer
>
CreateLayer
(
const
gfx
:
:
IntSize
&
aSize
bool
aIsOpaque
SurfacePoolHandle
*
aSurfacePoolHandle
)
override
;
void
AppendLayer
(
NativeLayer
*
aLayer
)
override
;
void
RemoveLayer
(
NativeLayer
*
aLayer
)
override
;
void
SetLayers
(
const
nsTArray
<
RefPtr
<
NativeLayer
>
>
&
aLayers
)
override
;
void
SetBackingScale
(
float
aBackingScale
)
;
float
BackingScale
(
)
;
protected
:
explicit
NativeLayerRootCA
(
CALayer
*
aLayer
)
;
~
NativeLayerRootCA
(
)
override
;
Mutex
mMutex
;
nsTArray
<
RefPtr
<
NativeLayerCA
>
>
mSublayers
;
CALayer
*
mRootCALayer
=
nullptr
;
float
mBackingScale
=
1
.
0f
;
bool
mMutated
=
false
;
bool
mOffMainThreadCommitsSuspended
=
false
;
bool
mCommitPending
=
false
;
}
;
class
NativeLayerCA
:
public
NativeLayer
{
public
:
virtual
NativeLayerCA
*
AsNativeLayerCA
(
)
override
{
return
this
;
}
gfx
:
:
IntSize
GetSize
(
)
override
;
void
SetPosition
(
const
gfx
:
:
IntPoint
&
aPosition
)
override
;
gfx
:
:
IntPoint
GetPosition
(
)
override
;
gfx
:
:
IntRect
GetRect
(
)
override
;
RefPtr
<
gfx
:
:
DrawTarget
>
NextSurfaceAsDrawTarget
(
const
gfx
:
:
IntRegion
&
aUpdateRegion
gfx
:
:
BackendType
aBackendType
)
override
;
Maybe
<
GLuint
>
NextSurfaceAsFramebuffer
(
const
gfx
:
:
IntRegion
&
aUpdateRegion
bool
aNeedsDepth
)
override
;
void
NotifySurfaceReady
(
)
override
;
void
DiscardBackbuffers
(
)
override
;
bool
IsOpaque
(
)
override
;
void
SetClipRect
(
const
Maybe
<
gfx
:
:
IntRect
>
&
aClipRect
)
override
;
Maybe
<
gfx
:
:
IntRect
>
ClipRect
(
)
override
;
void
SetSurfaceIsFlipped
(
bool
aIsFlipped
)
override
;
bool
SurfaceIsFlipped
(
)
override
;
protected
:
friend
class
NativeLayerRootCA
;
NativeLayerCA
(
const
gfx
:
:
IntSize
&
aSize
bool
aIsOpaque
SurfacePoolHandleCA
*
aSurfacePoolHandle
)
;
~
NativeLayerCA
(
)
override
;
bool
NextSurface
(
const
MutexAutoLock
&
)
;
CALayer
*
UnderlyingCALayer
(
)
;
void
ApplyChanges
(
)
;
void
SetBackingScale
(
float
aBackingScale
)
;
void
InvalidateRegionThroughoutSwapchain
(
const
MutexAutoLock
&
const
gfx
:
:
IntRegion
&
aRegion
)
;
GLuint
GetOrCreateFramebufferForSurface
(
const
MutexAutoLock
&
CFTypeRefPtr
<
IOSurfaceRef
>
aSurface
bool
aNeedsDepth
)
;
template
<
typename
F
>
void
HandlePartialUpdate
(
const
MutexAutoLock
&
const
gfx
:
:
IntRegion
&
aUpdateRegion
F
&
&
aCopyFn
)
;
struct
SurfaceWithInvalidRegion
{
CFTypeRefPtr
<
IOSurfaceRef
>
mSurface
;
gfx
:
:
IntRegion
mInvalidRegion
;
}
;
struct
SurfaceWithInvalidRegionAndCheckCount
{
SurfaceWithInvalidRegion
mEntry
;
uint32_t
mCheckCount
;
}
;
Maybe
<
SurfaceWithInvalidRegion
>
GetUnusedSurfaceAndCleanUp
(
const
MutexAutoLock
&
)
;
struct
Representation
{
~
Representation
(
)
;
CALayer
*
UnderlyingCALayer
(
)
{
return
mWrappingCALayer
;
}
void
ApplyChanges
(
const
gfx
:
:
IntSize
&
aSize
bool
aIsOpaque
const
gfx
:
:
IntPoint
&
aPosition
const
Maybe
<
gfx
:
:
IntRect
>
&
aClipRect
float
aBackingScale
bool
aSurfaceIsFlipped
CFTypeRefPtr
<
IOSurfaceRef
>
aFrontSurface
)
;
CALayer
*
mWrappingCALayer
=
nullptr
;
CALayer
*
mContentCALayer
=
nullptr
;
CALayer
*
mOpaquenessTintLayer
=
nullptr
;
bool
mMutatedPosition
=
true
;
bool
mMutatedClipRect
=
true
;
bool
mMutatedBackingScale
=
true
;
bool
mMutatedSurfaceIsFlipped
=
true
;
bool
mMutatedFrontSurface
=
true
;
}
;
Mutex
mMutex
;
Maybe
<
SurfaceWithInvalidRegion
>
mInProgressSurface
;
Maybe
<
SurfaceWithInvalidRegion
>
mFrontSurface
;
std
:
:
vector
<
SurfaceWithInvalidRegionAndCheckCount
>
mSurfaces
;
RefPtr
<
MacIOSurface
>
mInProgressLockedIOSurface
;
RefPtr
<
SurfacePoolHandleCA
>
mSurfacePoolHandle
;
Representation
mRepresentation
;
gfx
:
:
IntPoint
mPosition
;
const
gfx
:
:
IntSize
mSize
;
Maybe
<
gfx
:
:
IntRect
>
mClipRect
;
float
mBackingScale
=
1
.
0f
;
bool
mSurfaceIsFlipped
=
false
;
const
bool
mIsOpaque
=
false
;
}
;
}
}
#
endif
