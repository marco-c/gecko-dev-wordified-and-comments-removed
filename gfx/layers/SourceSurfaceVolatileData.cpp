#
include
"
SourceSurfaceVolatileData
.
h
"
#
include
"
gfxAlphaRecovery
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Types
.
h
"
namespace
mozilla
{
namespace
gfx
{
bool
SourceSurfaceVolatileData
:
:
Init
(
const
IntSize
&
aSize
int32_t
aStride
SurfaceFormat
aFormat
)
{
mSize
=
aSize
;
mStride
=
aStride
;
mFormat
=
aFormat
;
size_t
alignment
=
size_t
(
1
)
<
<
gfxAlphaRecovery
:
:
GoodAlignmentLog2
(
)
;
mVBuf
=
new
VolatileBuffer
(
)
;
if
(
MOZ_UNLIKELY
(
!
mVBuf
-
>
Init
(
aStride
*
aSize
.
height
alignment
)
)
)
{
mVBuf
=
nullptr
;
return
false
;
}
return
true
;
}
void
SourceSurfaceVolatileData
:
:
GuaranteePersistance
(
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Should
use
SourceSurfaceRawData
wrapper
!
"
)
;
}
void
SourceSurfaceVolatileData
:
:
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
SizeOfInfo
&
aInfo
)
const
{
aInfo
.
AddType
(
SurfaceType
:
:
DATA
)
;
if
(
mVBuf
)
{
aInfo
.
mHeapBytes
=
mVBuf
-
>
HeapSizeOfExcludingThis
(
aMallocSizeOf
)
;
aInfo
.
mNonHeapBytes
=
mVBuf
-
>
NonHeapSizeOfExcludingThis
(
)
;
#
ifdef
ANDROID
if
(
!
mVBuf
-
>
OnHeap
(
)
)
{
aInfo
.
mExternalHandles
=
1
;
}
#
endif
}
}
}
}
