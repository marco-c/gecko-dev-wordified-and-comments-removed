#
include
"
CompositorTypes
.
h
"
#
include
<
ostream
>
namespace
mozilla
{
namespace
layers
{
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aStream
const
TextureFlags
&
aFlags
)
{
if
(
aFlags
=
=
TextureFlags
:
:
NO_FLAGS
)
{
aStream
<
<
"
NoFlags
"
;
}
else
{
#
define
AppendFlag
(
test
)
\
{
\
if
(
!
!
(
aFlags
&
(
test
)
)
)
{
\
if
(
previous
)
{
\
aStream
<
<
"
|
"
;
\
}
\
aStream
<
<
#
test
;
\
previous
=
true
;
\
}
\
}
bool
previous
=
false
;
AppendFlag
(
TextureFlags
:
:
USE_NEAREST_FILTER
)
;
AppendFlag
(
TextureFlags
:
:
ORIGIN_BOTTOM_LEFT
)
;
AppendFlag
(
TextureFlags
:
:
DISALLOW_BIGIMAGE
)
;
AppendFlag
(
TextureFlags
:
:
RB_SWAPPED
)
;
AppendFlag
(
TextureFlags
:
:
NON_PREMULTIPLIED
)
;
AppendFlag
(
TextureFlags
:
:
RECYCLE
)
;
AppendFlag
(
TextureFlags
:
:
DEALLOCATE_CLIENT
)
;
AppendFlag
(
TextureFlags
:
:
DEALLOCATE_SYNC
)
;
AppendFlag
(
TextureFlags
:
:
DEALLOCATE_MAIN_THREAD
)
;
AppendFlag
(
TextureFlags
:
:
IMMUTABLE
)
;
AppendFlag
(
TextureFlags
:
:
IMMEDIATE_UPLOAD
)
;
AppendFlag
(
TextureFlags
:
:
COMPONENT_ALPHA
)
;
AppendFlag
(
TextureFlags
:
:
INVALID_COMPOSITOR
)
;
AppendFlag
(
TextureFlags
:
:
RGB_FROM_YCBCR
)
;
AppendFlag
(
TextureFlags
:
:
SNAPSHOT
)
;
AppendFlag
(
TextureFlags
:
:
NON_BLOCKING_READ_LOCK
)
;
AppendFlag
(
TextureFlags
:
:
BLOCKING_READ_LOCK
)
;
AppendFlag
(
TextureFlags
:
:
WAIT_HOST_USAGE_END
)
;
AppendFlag
(
TextureFlags
:
:
IS_OPAQUE
)
;
#
undef
AppendFlag
}
return
aStream
;
}
}
}
