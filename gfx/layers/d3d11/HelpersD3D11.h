#
ifndef
mozilla_gfx_layers_d3d11_HelpersD3D11_h
#
define
mozilla_gfx_layers_d3d11_HelpersD3D11_h
#
include
<
d3d11
.
h
>
#
include
<
array
>
#
include
"
mozilla
/
TimeStamp
.
h
"
namespace
mozilla
{
namespace
layers
{
template
<
typename
T
>
static
inline
bool
WaitForGPUQuery
(
ID3D11Device
*
aDevice
ID3D11DeviceContext
*
aContext
ID3D11Query
*
aQuery
T
*
aOut
)
{
TimeStamp
start
=
TimeStamp
:
:
Now
(
)
;
while
(
aContext
-
>
GetData
(
aQuery
aOut
sizeof
(
*
aOut
)
0
)
!
=
S_OK
)
{
if
(
aDevice
-
>
GetDeviceRemovedReason
(
)
!
=
S_OK
)
{
return
false
;
}
if
(
TimeStamp
:
:
Now
(
)
-
start
>
TimeDuration
:
:
FromSeconds
(
2
)
)
{
return
false
;
}
Sleep
(
0
)
;
}
return
true
;
}
static
inline
bool
WaitForFrameGPUQuery
(
ID3D11Device
*
aDevice
ID3D11DeviceContext
*
aContext
ID3D11Query
*
aQuery
BOOL
*
aOut
)
{
TimeStamp
start
=
TimeStamp
:
:
Now
(
)
;
bool
success
=
true
;
while
(
aContext
-
>
GetData
(
aQuery
aOut
sizeof
(
*
aOut
)
0
)
!
=
S_OK
)
{
HRESULT
hr
=
aDevice
-
>
GetDeviceRemovedReason
(
)
;
if
(
hr
!
=
S_OK
)
{
gfxCriticalNoteOnce
<
<
"
WaitForFrameGPUQuery
device
removed
:
"
<
<
gfx
:
:
hexa
(
hr
)
;
return
false
;
}
if
(
TimeStamp
:
:
Now
(
)
-
start
>
TimeDuration
:
:
FromSeconds
(
2
)
)
{
success
=
false
;
break
;
}
Sleep
(
0
)
;
}
return
success
;
}
inline
void
ClearResource
(
ID3D11Device
*
const
device
ID3D11Resource
*
const
res
const
std
:
:
array
<
float
4
>
&
vals
)
{
RefPtr
<
ID3D11RenderTargetView
>
rtv
;
(
void
)
device
-
>
CreateRenderTargetView
(
res
nullptr
getter_AddRefs
(
rtv
)
)
;
RefPtr
<
ID3D11DeviceContext
>
context
;
device
-
>
GetImmediateContext
(
getter_AddRefs
(
context
)
)
;
context
-
>
ClearRenderTargetView
(
rtv
vals
.
data
(
)
)
;
}
}
}
#
endif
