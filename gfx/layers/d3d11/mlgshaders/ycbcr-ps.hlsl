#
include
"
common
-
ps
.
hlsl
"
#
include
"
textured
-
common
.
hlsl
"
Texture2D
tY
:
register
(
ps
t0
)
;
Texture2D
tCb
:
register
(
ps
t1
)
;
Texture2D
tCr
:
register
(
ps
t2
)
;
cbuffer
YCbCrBuffer
:
register
(
b1
)
{
row_major
float3x3
YuvColorMatrix
;
}
;
cbuffer
vCoefficientBuffer
:
register
(
b2
)
{
float
vCoefficient
;
}
float4
CalculateYCbCrColor
(
float3
rgb
)
{
return
float4
(
mul
(
YuvColorMatrix
float3
(
rgb
.
r
-
0
.
06275
rgb
.
g
-
0
.
50196
rgb
.
b
-
0
.
50196
)
)
1
.
0
)
;
}
float4
CalculateIMC4Color
(
const
float2
aTexCoords
)
{
float3
yuv
=
float3
(
tY
.
Sample
(
sSampler
aTexCoords
)
.
r
tCb
.
Sample
(
sSampler
aTexCoords
)
.
r
tCr
.
Sample
(
sSampler
aTexCoords
)
.
r
)
;
return
CalculateYCbCrColor
(
yuv
*
vCoefficient
)
;
}
float4
CalculateNV12Color
(
const
float2
aTexCoords
)
{
float
y
=
tY
.
Sample
(
sSampler
aTexCoords
)
.
r
;
float2
cbcr
=
tCb
.
Sample
(
sSampler
aTexCoords
)
.
rg
;
return
CalculateYCbCrColor
(
float3
(
y
cbcr
)
*
vCoefficient
)
;
}
float4
TexturedQuadIMC4
(
const
VS_SAMPLEOUTPUT_CLIPPED
aInput
)
:
SV_Target
{
return
CalculateIMC4Color
(
aInput
.
vTexCoords
)
*
sOpacity
;
}
float4
TexturedQuadNV12
(
const
VS_SAMPLEOUTPUT_CLIPPED
aInput
)
:
SV_Target
{
return
CalculateNV12Color
(
aInput
.
vTexCoords
)
*
sOpacity
;
}
float4
TexturedVertexIMC4
(
const
VS_SAMPLEOUTPUT
aInput
)
:
SV_Target
{
if
(
!
RectContainsPoint
(
aInput
.
vClipRect
aInput
.
vPosition
.
xy
)
)
{
return
float4
(
0
0
0
0
)
;
}
float
alpha
=
ReadMask
(
aInput
.
vMaskCoords
)
;
return
CalculateIMC4Color
(
aInput
.
vTexCoords
)
*
alpha
;
}
float4
TexturedVertexNV12
(
const
VS_SAMPLEOUTPUT
aInput
)
:
SV_Target
{
if
(
!
RectContainsPoint
(
aInput
.
vClipRect
aInput
.
vPosition
.
xy
)
)
{
return
float4
(
0
0
0
0
)
;
}
float
alpha
=
ReadMask
(
aInput
.
vMaskCoords
)
;
return
CalculateNV12Color
(
aInput
.
vTexCoords
)
*
alpha
;
}
float4
TexturedQuadIdentityIMC4
(
const
VS_SAMPLEOUTPUT_CLIPPED
aInput
)
:
SV_Target
{
float3
rgb
=
float3
(
tCr
.
Sample
(
sSampler
aInput
.
vTexCoords
)
.
r
tY
.
Sample
(
sSampler
aInput
.
vTexCoords
)
.
r
tCb
.
Sample
(
sSampler
aInput
.
vTexCoords
)
.
r
)
;
return
float4
(
rgb
*
vCoefficient
1
.
0
)
*
sOpacity
;
}
float4
TexturedVertexIdentityIMC4
(
const
VS_SAMPLEOUTPUT
aInput
)
:
SV_Target
{
if
(
!
RectContainsPoint
(
aInput
.
vClipRect
aInput
.
vPosition
.
xy
)
)
{
return
float4
(
0
0
0
0
)
;
}
float
alpha
=
ReadMask
(
aInput
.
vMaskCoords
)
;
float3
rgb
=
float3
(
tCr
.
Sample
(
sSampler
aInput
.
vTexCoords
)
.
r
tY
.
Sample
(
sSampler
aInput
.
vTexCoords
)
.
r
tCb
.
Sample
(
sSampler
aInput
.
vTexCoords
)
.
r
)
;
return
float4
(
rgb
*
vCoefficient
1
.
0
)
*
alpha
;
}
