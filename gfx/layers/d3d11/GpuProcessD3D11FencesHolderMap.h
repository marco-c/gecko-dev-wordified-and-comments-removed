#
ifndef
MOZILLA_GFX_GpuProcessD3D11FencesHolderMap_H
#
define
MOZILLA_GFX_GpuProcessD3D11FencesHolderMap_H
#
include
<
d3d11
.
h
>
#
include
<
vector
>
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
namespace
mozilla
{
namespace
layers
{
class
FenceD3D11
;
class
GpuProcessD3D11FencesHolderMap
{
public
:
static
void
Init
(
)
;
static
void
Shutdown
(
)
;
static
GpuProcessD3D11FencesHolderMap
*
Get
(
)
{
return
sInstance
;
}
GpuProcessD3D11FencesHolderMap
(
)
;
~
GpuProcessD3D11FencesHolderMap
(
)
;
void
Register
(
GpuProcessFencesHolderId
aHolderId
)
;
void
Unregister
(
GpuProcessFencesHolderId
aHolderId
)
;
void
SetWriteFence
(
GpuProcessFencesHolderId
aHolderId
RefPtr
<
FenceD3D11
>
aWriteFence
)
;
void
SetReadFence
(
GpuProcessFencesHolderId
aHolderId
RefPtr
<
FenceD3D11
>
aReadFence
)
;
bool
WaitWriteFence
(
GpuProcessFencesHolderId
aHolderId
ID3D11Device
*
aDevice
)
;
bool
WaitAllFencesAndForget
(
GpuProcessFencesHolderId
aHolderId
ID3D11Device
*
aDevice
)
;
private
:
struct
FencesHolder
{
FencesHolder
(
)
=
default
;
RefPtr
<
FenceD3D11
>
mWriteFence
;
std
:
:
vector
<
RefPtr
<
FenceD3D11
>
>
mReadFences
;
}
;
mutable
Monitor
mMonitor
MOZ_UNANNOTATED
;
std
:
:
unordered_map
<
GpuProcessFencesHolderId
UniquePtr
<
FencesHolder
>
GpuProcessFencesHolderId
:
:
HashFn
>
mFencesHolderById
;
static
StaticAutoPtr
<
GpuProcessD3D11FencesHolderMap
>
sInstance
;
}
;
}
}
#
endif
