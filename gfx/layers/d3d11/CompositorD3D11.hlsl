#
include
"
BlendShaderConstants
.
h
"
typedef
float4
rect
;
float4x4
mLayerTransform
:
register
(
vs
c0
)
;
float4x4
mProjection
:
register
(
vs
c4
)
;
float4
vRenderTargetOffset
:
register
(
vs
c8
)
;
rect
vTextureCoords
:
register
(
vs
c9
)
;
rect
vLayerQuad
:
register
(
vs
c10
)
;
float4
vRoundedClipRect
:
register
(
vs
c11
)
;
float4
fLayerColor
:
register
(
ps
c0
)
;
float
fLayerOpacity
:
register
(
ps
c1
)
;
float
fCoefficient
:
register
(
ps
c3
)
;
float4
vRoundedClipRadii
:
register
(
ps
c4
)
;
row_major
float3x3
mYuvColorMatrix
:
register
(
ps
c5
)
;
sampler
sSampler
:
register
(
ps
s0
)
;
Texture2D
tRGB
:
register
(
ps
t0
)
;
Texture2D
tY
:
register
(
ps
t1
)
;
Texture2D
tCb
:
register
(
ps
t2
)
;
Texture2D
tCr
:
register
(
ps
t3
)
;
struct
VS_INPUT
{
float2
vPosition
:
POSITION
;
}
;
struct
VS_TEX_INPUT
{
float2
vPosition
:
POSITION
;
float2
vTexCoords
:
TEXCOORD0
;
}
;
struct
VS_OUTPUT
{
float4
vPosition
:
SV_Position
;
float2
vTexCoords
:
TEXCOORD0
;
}
;
struct
VS_CLIP_OUTPUT
{
float4
vPosition
:
SV_Position
;
float2
vTexCoords
:
TEXCOORD0
;
float2
vRoundedClipSize
:
TEXCOORD1
;
float2
vRoundedClipPos
:
TEXCOORD2
;
}
;
struct
PS_OUTPUT
{
float4
vSrc
;
float4
vAlpha
;
}
;
float2
TexCoords
(
const
float2
aPosition
)
{
float2
result
;
const
float2
size
=
vTextureCoords
.
zw
;
result
.
x
=
vTextureCoords
.
x
+
aPosition
.
x
*
size
.
x
;
result
.
y
=
vTextureCoords
.
y
+
aPosition
.
y
*
size
.
y
;
return
result
;
}
SamplerState
LayerTextureSamplerLinear
{
Filter
=
MIN_MAG_MIP_LINEAR
;
AddressU
=
Clamp
;
AddressV
=
Clamp
;
}
;
float4
TransformedPosition
(
float2
aInPosition
)
{
float4
position
=
float4
(
0
0
0
1
)
;
float2
size
=
vLayerQuad
.
zw
;
position
.
x
=
vLayerQuad
.
x
+
aInPosition
.
x
*
size
.
x
;
position
.
y
=
vLayerQuad
.
y
+
aInPosition
.
y
*
size
.
y
;
position
=
mul
(
mLayerTransform
position
)
;
return
position
;
}
float4
VertexPosition
(
float4
aTransformedPosition
)
{
float4
result
;
result
.
w
=
aTransformedPosition
.
w
;
result
.
xyz
=
aTransformedPosition
.
xyz
/
aTransformedPosition
.
w
;
result
-
=
vRenderTargetOffset
;
result
.
xyz
*
=
result
.
w
;
result
=
mul
(
mProjection
result
)
;
return
result
;
}
VS_OUTPUT
LayerQuadVS
(
const
VS_INPUT
aVertex
)
{
VS_OUTPUT
outp
;
float4
position
=
TransformedPosition
(
aVertex
.
vPosition
)
;
outp
.
vPosition
=
VertexPosition
(
position
)
;
outp
.
vTexCoords
=
TexCoords
(
aVertex
.
vPosition
.
xy
)
;
return
outp
;
}
VS_CLIP_OUTPUT
LayerQuadClipVS
(
const
VS_INPUT
aVertex
)
{
VS_CLIP_OUTPUT
outp
;
float4
position
=
TransformedPosition
(
aVertex
.
vPosition
)
;
outp
.
vPosition
=
VertexPosition
(
position
)
;
outp
.
vTexCoords
=
TexCoords
(
aVertex
.
vPosition
.
xy
)
;
float2
halfSize
=
0
.
5
*
vRoundedClipRect
.
zw
;
outp
.
vRoundedClipPos
=
vRoundedClipRect
.
xy
+
halfSize
-
position
.
xy
;
outp
.
vRoundedClipSize
=
halfSize
;
return
outp
;
}
float4
CalculateYCbCrColor
(
const
float2
aTexCoords
)
{
float3
yuv
=
float3
(
tY
.
Sample
(
sSampler
aTexCoords
)
.
r
tCb
.
Sample
(
sSampler
aTexCoords
)
.
r
tCr
.
Sample
(
sSampler
aTexCoords
)
.
r
)
;
yuv
=
yuv
*
fCoefficient
-
float3
(
0
.
06275
0
.
50196
0
.
50196
)
;
return
float4
(
mul
(
mYuvColorMatrix
yuv
)
1
.
0
)
;
}
float4
CalculateNV12Color
(
const
float2
aTexCoords
)
{
float3
yuv
=
float3
(
tY
.
Sample
(
sSampler
aTexCoords
)
.
r
tCb
.
Sample
(
sSampler
aTexCoords
)
.
r
tCb
.
Sample
(
sSampler
aTexCoords
)
.
g
)
;
yuv
=
yuv
*
fCoefficient
-
float3
(
0
.
06275
0
.
50196
0
.
50196
)
;
return
float4
(
mul
(
mYuvColorMatrix
yuv
)
1
.
0
)
;
}
float
SignedDistRoundBox
(
float2
pos
float2
half_box_size
float4
radii
)
{
radii
.
xy
=
(
pos
.
x
>
0
.
0
)
?
radii
.
xy
:
radii
.
zw
;
radii
.
x
=
(
pos
.
y
>
0
.
0
)
?
radii
.
x
:
radii
.
y
;
float2
q
=
abs
(
pos
)
-
half_box_size
+
radii
.
x
;
return
min
(
max
(
q
.
x
q
.
y
)
0
.
0
)
+
length
(
max
(
q
0
.
0
)
)
-
radii
.
x
;
}
float
CalculateClip
(
const
float2
aPosition
const
float2
aHalfBoxSize
)
{
float
d
=
SignedDistRoundBox
(
aPosition
aHalfBoxSize
vRoundedClipRadii
)
;
return
1
.
0
-
clamp
(
d
0
.
0
1
.
0
)
;
}
float4
SolidColorShader
(
const
VS_OUTPUT
aVertex
)
:
SV_Target
{
return
fLayerColor
;
}
float4
RGBAShader
(
const
VS_OUTPUT
aVertex
)
:
SV_Target
{
return
tRGB
.
Sample
(
sSampler
aVertex
.
vTexCoords
)
*
fLayerOpacity
;
}
float4
RGBAClipShader
(
const
VS_CLIP_OUTPUT
aVertex
)
:
SV_Target
{
return
tRGB
.
Sample
(
sSampler
aVertex
.
vTexCoords
)
*
fLayerOpacity
*
CalculateClip
(
aVertex
.
vRoundedClipPos
aVertex
.
vRoundedClipSize
)
;
}
float4
RGBShader
(
const
VS_OUTPUT
aVertex
)
:
SV_Target
{
float4
result
;
result
=
tRGB
.
Sample
(
sSampler
aVertex
.
vTexCoords
)
*
fLayerOpacity
;
result
.
a
=
fLayerOpacity
;
return
result
;
}
float4
RGBClipShader
(
const
VS_CLIP_OUTPUT
aVertex
)
:
SV_Target
{
float4
result
;
float
a
=
fLayerOpacity
*
CalculateClip
(
aVertex
.
vRoundedClipPos
aVertex
.
vRoundedClipSize
)
;
result
=
tRGB
.
Sample
(
sSampler
aVertex
.
vTexCoords
)
*
a
;
result
.
a
=
a
;
return
result
;
}
float4
YCbCrShader
(
const
VS_OUTPUT
aVertex
)
:
SV_Target
{
return
CalculateYCbCrColor
(
aVertex
.
vTexCoords
)
*
fLayerOpacity
;
}
float4
YCbCrClipShader
(
const
VS_CLIP_OUTPUT
aVertex
)
:
SV_Target
{
return
CalculateYCbCrColor
(
aVertex
.
vTexCoords
)
*
fLayerOpacity
*
CalculateClip
(
aVertex
.
vRoundedClipPos
aVertex
.
vRoundedClipSize
)
;
}
float4
NV12Shader
(
const
VS_OUTPUT
aVertex
)
:
SV_Target
{
return
CalculateNV12Color
(
aVertex
.
vTexCoords
)
*
fLayerOpacity
;
}
float4
NV12ClipShader
(
const
VS_CLIP_OUTPUT
aVertex
)
:
SV_Target
{
return
CalculateNV12Color
(
aVertex
.
vTexCoords
)
*
fLayerOpacity
*
CalculateClip
(
aVertex
.
vRoundedClipPos
aVertex
.
vRoundedClipSize
)
;
}
