#
ifndef
MOZILLA_LAYERS_IPDLACTOR_H
#
define
MOZILLA_LAYERS_IPDLACTOR_H
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
layers
/
CompositableForwarder
.
h
"
#
include
"
mozilla
/
unused
.
h
"
namespace
mozilla
{
namespace
layers
{
template
<
typename
Protocol
>
class
ChildActor
:
public
Protocol
{
public
:
ChildActor
(
)
:
mReleased
(
false
)
mSentDestroy
(
false
)
mIPCOpen
(
true
)
{
}
~
ChildActor
(
)
{
MOZ_ASSERT
(
mReleased
)
;
}
bool
CanSend
(
)
const
{
return
!
mSentDestroy
&
&
mIPCOpen
;
}
bool
IPCOpen
(
)
const
{
return
mIPCOpen
;
}
bool
Released
(
)
const
{
return
mReleased
;
}
static
bool
DestroyFallback
(
Protocol
*
aActor
)
{
return
aActor
-
>
SendDestroySync
(
)
;
}
typedef
ipc
:
:
IProtocolManager
<
ipc
:
:
IProtocol
>
:
:
ActorDestroyReason
Why
;
virtual
void
ActorDestroy
(
Why
)
override
{
mIPCOpen
=
false
;
}
void
ForceActorShutdown
(
)
{
if
(
mIPCOpen
&
&
!
mSentDestroy
)
{
this
-
>
SendDestroy
(
)
;
mSentDestroy
=
true
;
}
}
void
ReleaseActor
(
CompositableForwarder
*
aFwd
=
nullptr
)
{
if
(
!
IPCOpen
(
)
)
{
mReleased
=
true
;
delete
this
;
return
;
}
Destroy
(
aFwd
false
)
;
}
void
ReleaseActorSynchronously
(
CompositableForwarder
*
aFwd
=
nullptr
)
{
if
(
!
IPCOpen
(
)
)
{
mReleased
=
true
;
delete
this
;
return
;
}
Destroy
(
aFwd
true
)
;
}
protected
:
void
Destroy
(
CompositableForwarder
*
aFwd
=
nullptr
bool
synchronously
=
false
)
{
MOZ_ASSERT
(
mIPCOpen
)
;
MOZ_ASSERT
(
!
mReleased
)
;
if
(
mReleased
)
{
return
;
}
mReleased
=
true
;
if
(
!
aFwd
|
|
!
aFwd
-
>
DestroyInTransaction
(
this
synchronously
)
)
{
if
(
synchronously
)
{
MOZ_PERFORMANCE_WARNING
(
"
gfx
"
"
IPDL
actor
requires
synchronous
deallocation
"
)
;
this
-
>
SendDestroySync
(
)
;
}
else
{
this
-
>
SendDestroy
(
)
;
}
}
mSentDestroy
=
true
;
}
private
:
bool
mReleased
;
bool
mSentDestroy
;
bool
mIPCOpen
;
}
;
template
<
typename
Protocol
>
class
ParentActor
:
public
Protocol
{
public
:
ParentActor
(
)
:
mReleased
(
false
)
{
}
~
ParentActor
(
)
{
MOZ_ASSERT
(
mReleased
)
;
}
bool
CanSend
(
)
const
{
return
!
mReleased
;
}
virtual
void
Destroy
(
)
{
}
virtual
bool
RecvDestroy
(
)
override
{
if
(
!
mReleased
)
{
Destroy
(
)
;
mReleased
=
true
;
}
Unused
<
<
Protocol
:
:
Send__delete__
(
this
)
;
return
true
;
}
virtual
bool
RecvDestroySync
(
)
override
{
if
(
!
mReleased
)
{
Destroy
(
)
;
mReleased
=
true
;
}
return
true
;
}
typedef
ipc
:
:
IProtocolManager
<
ipc
:
:
IProtocol
>
:
:
ActorDestroyReason
Why
;
virtual
void
ActorDestroy
(
Why
)
override
{
if
(
!
mReleased
)
{
Destroy
(
)
;
mReleased
=
true
;
}
}
private
:
bool
mReleased
;
}
;
}
}
#
endif
