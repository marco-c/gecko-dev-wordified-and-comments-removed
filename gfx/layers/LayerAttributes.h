#
ifndef
mozilla_gfx_layers_LayerAttributes_h
#
define
mozilla_gfx_layers_LayerAttributes_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
namespace
IPC
{
template
<
typename
T
>
struct
ParamTraits
;
}
namespace
mozilla
{
namespace
layers
{
enum
class
ScrollbarLayerType
:
uint8_t
{
None
Thumb
Container
}
;
struct
ScrollbarData
{
ScrollbarData
(
)
=
default
;
ScrollbarData
(
ScrollDirection
aDirection
ScrollbarLayerType
aScrollbarLayerType
float
aThumbRatio
CSSCoord
aThumbStart
CSSCoord
aThumbLength
bool
aThumbIsAsyncDraggable
CSSCoord
aScrollTrackStart
CSSCoord
aScrollTrackLength
)
:
mDirection
(
Some
(
aDirection
)
)
mScrollbarLayerType
(
aScrollbarLayerType
)
mThumbRatio
(
aThumbRatio
)
mThumbStart
(
aThumbStart
)
mThumbLength
(
aThumbLength
)
mThumbIsAsyncDraggable
(
aThumbIsAsyncDraggable
)
mScrollTrackStart
(
aScrollTrackStart
)
mScrollTrackLength
(
aScrollTrackLength
)
{
}
Maybe
<
ScrollDirection
>
mDirection
;
ScrollbarLayerType
mScrollbarLayerType
=
ScrollbarLayerType
:
:
None
;
float
mThumbRatio
=
0
.
0f
;
CSSCoord
mThumbStart
;
CSSCoord
mThumbLength
;
bool
mThumbIsAsyncDraggable
=
false
;
CSSCoord
mScrollTrackStart
;
CSSCoord
mScrollTrackLength
;
uint64_t
mTargetViewId
=
FrameMetrics
:
:
NULL_SCROLL_ID
;
bool
operator
=
=
(
const
ScrollbarData
&
aOther
)
const
{
return
mDirection
=
=
aOther
.
mDirection
&
&
mScrollbarLayerType
=
=
aOther
.
mScrollbarLayerType
&
&
mThumbRatio
=
=
aOther
.
mThumbRatio
&
&
mThumbStart
=
=
aOther
.
mThumbStart
&
&
mThumbLength
=
=
aOther
.
mThumbLength
&
&
mThumbIsAsyncDraggable
=
=
aOther
.
mThumbIsAsyncDraggable
&
&
mScrollTrackStart
=
=
aOther
.
mScrollTrackStart
&
&
mScrollTrackLength
=
=
aOther
.
mScrollTrackLength
&
&
mTargetViewId
=
=
aOther
.
mTargetViewId
;
}
bool
operator
!
=
(
const
ScrollbarData
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
}
;
class
SimpleLayerAttributes
final
{
friend
struct
IPC
:
:
ParamTraits
<
mozilla
:
:
layers
:
:
SimpleLayerAttributes
>
;
public
:
SimpleLayerAttributes
(
)
:
mTransformIsPerspective
(
false
)
mPostXScale
(
1
.
0f
)
mPostYScale
(
1
.
0f
)
mContentFlags
(
0
)
mOpacity
(
1
.
0f
)
mIsFixedPosition
(
false
)
mMixBlendMode
(
gfx
:
:
CompositionOp
:
:
OP_OVER
)
mForceIsolatedGroup
(
false
)
{
}
bool
SetPostScale
(
float
aXScale
float
aYScale
)
{
if
(
mPostXScale
=
=
aXScale
&
&
mPostYScale
=
=
aYScale
)
{
return
false
;
}
mPostXScale
=
aXScale
;
mPostYScale
=
aYScale
;
return
true
;
}
bool
SetContentFlags
(
uint32_t
aFlags
)
{
if
(
aFlags
=
=
mContentFlags
)
{
return
false
;
}
mContentFlags
=
aFlags
;
return
true
;
}
bool
SetOpacity
(
float
aOpacity
)
{
if
(
aOpacity
=
=
mOpacity
)
{
return
false
;
}
mOpacity
=
aOpacity
;
return
true
;
}
bool
SetIsFixedPosition
(
bool
aFixedPosition
)
{
if
(
mIsFixedPosition
=
=
aFixedPosition
)
{
return
false
;
}
mIsFixedPosition
=
aFixedPosition
;
return
true
;
}
bool
SetScrollbarData
(
const
ScrollbarData
&
aScrollbarData
)
{
if
(
mScrollbarData
=
=
aScrollbarData
)
{
return
false
;
}
mScrollbarData
=
aScrollbarData
;
return
true
;
}
bool
SetScrollbarContainer
(
FrameMetrics
:
:
ViewID
aTargetViewId
ScrollDirection
aDirection
)
{
if
(
mScrollbarData
.
mScrollbarLayerType
=
=
ScrollbarLayerType
:
:
Container
&
&
mScrollbarData
.
mDirection
&
&
*
mScrollbarData
.
mDirection
=
=
aDirection
&
&
mScrollbarData
.
mTargetViewId
=
=
aTargetViewId
)
{
return
false
;
}
mScrollbarData
.
mDirection
=
Some
(
aDirection
)
;
mScrollbarData
.
mTargetViewId
=
aTargetViewId
;
mScrollbarData
.
mScrollbarLayerType
=
ScrollbarLayerType
:
:
Container
;
return
true
;
}
bool
SetMixBlendMode
(
gfx
:
:
CompositionOp
aMixBlendMode
)
{
if
(
mMixBlendMode
=
=
aMixBlendMode
)
{
return
false
;
}
mMixBlendMode
=
aMixBlendMode
;
return
true
;
}
bool
SetForceIsolatedGroup
(
bool
aForceIsolatedGroup
)
{
if
(
mForceIsolatedGroup
=
=
aForceIsolatedGroup
)
{
return
false
;
}
mForceIsolatedGroup
=
aForceIsolatedGroup
;
return
true
;
}
bool
SetTransform
(
const
gfx
:
:
Matrix4x4
&
aMatrix
)
{
if
(
mTransform
=
=
aMatrix
)
{
return
false
;
}
mTransform
=
aMatrix
;
return
true
;
}
bool
SetTransformIsPerspective
(
bool
aIsPerspective
)
{
if
(
mTransformIsPerspective
=
=
aIsPerspective
)
{
return
false
;
}
mTransformIsPerspective
=
aIsPerspective
;
return
true
;
}
bool
SetScrolledClip
(
const
Maybe
<
LayerClip
>
&
aScrolledClip
)
{
if
(
mScrolledClip
=
=
aScrolledClip
)
{
return
false
;
}
mScrolledClip
=
aScrolledClip
;
return
true
;
}
bool
SetFixedPositionData
(
FrameMetrics
:
:
ViewID
aTargetViewId
const
LayerPoint
&
aAnchor
int32_t
aSides
)
{
if
(
mFixedPositionData
&
&
mFixedPositionData
-
>
mScrollId
=
=
aTargetViewId
&
&
mFixedPositionData
-
>
mAnchor
=
=
aAnchor
&
&
mFixedPositionData
-
>
mSides
=
=
aSides
)
{
return
false
;
}
if
(
!
mFixedPositionData
)
{
mFixedPositionData
.
emplace
(
)
;
}
mFixedPositionData
-
>
mScrollId
=
aTargetViewId
;
mFixedPositionData
-
>
mAnchor
=
aAnchor
;
mFixedPositionData
-
>
mSides
=
aSides
;
return
true
;
}
bool
SetStickyPositionData
(
FrameMetrics
:
:
ViewID
aScrollId
LayerRectAbsolute
aOuter
LayerRectAbsolute
aInner
)
{
if
(
mStickyPositionData
&
&
mStickyPositionData
-
>
mOuter
.
IsEqualEdges
(
aOuter
)
&
&
mStickyPositionData
-
>
mInner
.
IsEqualEdges
(
aInner
)
)
{
return
false
;
}
if
(
!
mStickyPositionData
)
{
mStickyPositionData
.
emplace
(
)
;
}
mStickyPositionData
-
>
mScrollId
=
aScrollId
;
mStickyPositionData
-
>
mOuter
=
aOuter
;
mStickyPositionData
-
>
mInner
=
aInner
;
return
true
;
}
bool
HitTestingInfoIsEqual
(
const
SimpleLayerAttributes
&
aOther
)
const
{
if
(
mScrollbarData
!
=
aOther
.
mScrollbarData
)
{
return
false
;
}
if
(
GetFixedPositionScrollContainerId
(
)
!
=
aOther
.
GetFixedPositionScrollContainerId
(
)
)
{
return
false
;
}
if
(
mTransform
!
=
aOther
.
mTransform
)
{
return
false
;
}
return
true
;
}
float
GetPostXScale
(
)
const
{
return
mPostXScale
;
}
float
GetPostYScale
(
)
const
{
return
mPostYScale
;
}
uint32_t
GetContentFlags
(
)
const
{
return
mContentFlags
;
}
float
GetOpacity
(
)
const
{
return
mOpacity
;
}
bool
IsFixedPosition
(
)
const
{
return
mIsFixedPosition
;
}
FrameMetrics
:
:
ViewID
GetScrollbarTargetViewId
(
)
const
{
return
mScrollbarData
.
mTargetViewId
;
}
const
ScrollbarData
&
GetScrollbarData
(
)
const
{
return
mScrollbarData
;
}
Maybe
<
ScrollDirection
>
GetScrollbarContainerDirection
(
)
const
{
return
(
mScrollbarData
.
mScrollbarLayerType
=
=
ScrollbarLayerType
:
:
Container
)
?
mScrollbarData
.
mDirection
:
Nothing
(
)
;
}
gfx
:
:
CompositionOp
GetMixBlendMode
(
)
const
{
return
mMixBlendMode
;
}
bool
GetForceIsolatedGroup
(
)
const
{
return
mForceIsolatedGroup
;
}
const
gfx
:
:
Matrix4x4
&
GetTransform
(
)
const
{
return
mTransform
;
}
bool
GetTransformIsPerspective
(
)
const
{
return
mTransformIsPerspective
;
}
const
Maybe
<
LayerClip
>
&
GetScrolledClip
(
)
const
{
return
mScrolledClip
;
}
FrameMetrics
:
:
ViewID
GetFixedPositionScrollContainerId
(
)
const
{
return
mFixedPositionData
?
mFixedPositionData
-
>
mScrollId
:
FrameMetrics
:
:
NULL_SCROLL_ID
;
}
LayerPoint
GetFixedPositionAnchor
(
)
const
{
return
mFixedPositionData
?
mFixedPositionData
-
>
mAnchor
:
LayerPoint
(
)
;
}
int32_t
GetFixedPositionSides
(
)
const
{
return
mFixedPositionData
?
mFixedPositionData
-
>
mSides
:
eSideBitsNone
;
}
bool
IsStickyPosition
(
)
const
{
return
!
!
mStickyPositionData
;
}
FrameMetrics
:
:
ViewID
GetStickyScrollContainerId
(
)
const
{
return
mStickyPositionData
-
>
mScrollId
;
}
const
LayerRectAbsolute
&
GetStickyScrollRangeOuter
(
)
const
{
return
mStickyPositionData
-
>
mOuter
;
}
const
LayerRectAbsolute
&
GetStickyScrollRangeInner
(
)
const
{
return
mStickyPositionData
-
>
mInner
;
}
bool
operator
=
=
(
const
SimpleLayerAttributes
&
aOther
)
const
{
return
mTransform
=
=
aOther
.
mTransform
&
&
mTransformIsPerspective
=
=
aOther
.
mTransformIsPerspective
&
&
mScrolledClip
=
=
aOther
.
mScrolledClip
&
&
mPostXScale
=
=
aOther
.
mPostXScale
&
&
mPostYScale
=
=
aOther
.
mPostYScale
&
&
mContentFlags
=
=
aOther
.
mContentFlags
&
&
mOpacity
=
=
aOther
.
mOpacity
&
&
mIsFixedPosition
=
=
aOther
.
mIsFixedPosition
&
&
mScrollbarData
=
=
aOther
.
mScrollbarData
&
&
mMixBlendMode
=
=
aOther
.
mMixBlendMode
&
&
mForceIsolatedGroup
=
=
aOther
.
mForceIsolatedGroup
;
}
private
:
gfx
:
:
Matrix4x4
mTransform
;
bool
mTransformIsPerspective
;
Maybe
<
LayerClip
>
mScrolledClip
;
float
mPostXScale
;
float
mPostYScale
;
uint32_t
mContentFlags
;
float
mOpacity
;
bool
mIsFixedPosition
;
ScrollbarData
mScrollbarData
;
gfx
:
:
CompositionOp
mMixBlendMode
;
bool
mForceIsolatedGroup
;
struct
FixedPositionData
{
FrameMetrics
:
:
ViewID
mScrollId
;
LayerPoint
mAnchor
;
int32_t
mSides
;
}
;
Maybe
<
FixedPositionData
>
mFixedPositionData
;
struct
StickyPositionData
{
FrameMetrics
:
:
ViewID
mScrollId
;
LayerRectAbsolute
mOuter
;
LayerRectAbsolute
mInner
;
}
;
Maybe
<
StickyPositionData
>
mStickyPositionData
;
}
;
}
}
#
endif
