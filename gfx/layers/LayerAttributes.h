#
ifndef
mozilla_gfx_layers_LayerAttributes_h
#
define
mozilla_gfx_layers_LayerAttributes_h
#
include
"
FrameMetrics
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
namespace
IPC
{
template
<
typename
T
>
struct
ParamTraits
;
}
namespace
mozilla
{
namespace
layers
{
MOZ_DEFINE_ENUM_CLASS_WITH_BASE
(
ScrollbarLayerType
uint8_t
(
None
Thumb
Container
)
)
;
struct
ScrollbarData
{
private
:
ScrollbarData
(
ScrollDirection
aDirection
float
aThumbRatio
CSSCoord
aThumbStart
CSSCoord
aThumbLength
bool
aThumbIsAsyncDraggable
CSSCoord
aScrollTrackStart
CSSCoord
aScrollTrackLength
uint64_t
aTargetViewId
)
:
mDirection
(
Some
(
aDirection
)
)
mScrollbarLayerType
(
ScrollbarLayerType
:
:
Thumb
)
mThumbRatio
(
aThumbRatio
)
mThumbStart
(
aThumbStart
)
mThumbLength
(
aThumbLength
)
mThumbIsAsyncDraggable
(
aThumbIsAsyncDraggable
)
mScrollTrackStart
(
aScrollTrackStart
)
mScrollTrackLength
(
aScrollTrackLength
)
mTargetViewId
(
aTargetViewId
)
{
}
ScrollbarData
(
const
Maybe
<
ScrollDirection
>
&
aDirection
uint64_t
aTargetViewId
)
:
mDirection
(
aDirection
)
mScrollbarLayerType
(
ScrollbarLayerType
:
:
Container
)
mTargetViewId
(
aTargetViewId
)
{
}
public
:
ScrollbarData
(
)
=
default
;
static
ScrollbarData
CreateForThumb
(
ScrollDirection
aDirection
float
aThumbRatio
CSSCoord
aThumbStart
CSSCoord
aThumbLength
bool
aThumbIsAsyncDraggable
CSSCoord
aScrollTrackStart
CSSCoord
aScrollTrackLength
uint64_t
aTargetViewId
)
{
return
ScrollbarData
(
aDirection
aThumbRatio
aThumbStart
aThumbLength
aThumbIsAsyncDraggable
aScrollTrackStart
aScrollTrackLength
aTargetViewId
)
;
}
static
ScrollbarData
CreateForScrollbarContainer
(
const
Maybe
<
ScrollDirection
>
&
aDirection
uint64_t
aTargetViewId
)
{
return
ScrollbarData
(
aDirection
aTargetViewId
)
;
}
Maybe
<
ScrollDirection
>
mDirection
;
ScrollbarLayerType
mScrollbarLayerType
=
ScrollbarLayerType
:
:
None
;
float
mThumbRatio
=
0
.
0f
;
CSSCoord
mThumbStart
;
CSSCoord
mThumbLength
;
bool
mThumbIsAsyncDraggable
=
false
;
CSSCoord
mScrollTrackStart
;
CSSCoord
mScrollTrackLength
;
uint64_t
mTargetViewId
=
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
;
bool
operator
=
=
(
const
ScrollbarData
&
aOther
)
const
{
return
mDirection
=
=
aOther
.
mDirection
&
&
mScrollbarLayerType
=
=
aOther
.
mScrollbarLayerType
&
&
mThumbRatio
=
=
aOther
.
mThumbRatio
&
&
mThumbStart
=
=
aOther
.
mThumbStart
&
&
mThumbLength
=
=
aOther
.
mThumbLength
&
&
mThumbIsAsyncDraggable
=
=
aOther
.
mThumbIsAsyncDraggable
&
&
mScrollTrackStart
=
=
aOther
.
mScrollTrackStart
&
&
mScrollTrackLength
=
=
aOther
.
mScrollTrackLength
&
&
mTargetViewId
=
=
aOther
.
mTargetViewId
;
}
bool
operator
!
=
(
const
ScrollbarData
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
bool
IsThumb
(
)
const
{
return
mScrollbarLayerType
=
=
ScrollbarLayerType
:
:
Thumb
;
}
}
;
}
}
#
endif
