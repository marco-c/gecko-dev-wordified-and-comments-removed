#
include
"
SampleTime
.
h
"
namespace
mozilla
{
namespace
layers
{
SampleTime
:
:
SampleTime
(
)
:
mType
(
eNull
)
{
}
SampleTime
SampleTime
:
:
FromVsync
(
const
TimeStamp
&
aTime
)
{
MOZ_ASSERT
(
!
aTime
.
IsNull
(
)
)
;
return
SampleTime
(
eVsync
aTime
)
;
}
SampleTime
SampleTime
:
:
FromNow
(
)
{
return
SampleTime
(
eNow
TimeStamp
:
:
Now
(
)
)
;
}
SampleTime
SampleTime
:
:
FromTest
(
const
TimeStamp
&
aTime
)
{
MOZ_ASSERT
(
!
aTime
.
IsNull
(
)
)
;
return
SampleTime
(
eTest
aTime
)
;
}
bool
SampleTime
:
:
IsNull
(
)
const
{
return
mType
=
=
eNull
;
}
SampleTime
:
:
TimeType
SampleTime
:
:
Type
(
)
const
{
return
mType
;
}
const
TimeStamp
&
SampleTime
:
:
Time
(
)
const
{
return
mTime
;
}
bool
SampleTime
:
:
operator
=
=
(
const
SampleTime
&
aOther
)
const
{
return
mTime
=
=
aOther
.
mTime
;
}
bool
SampleTime
:
:
operator
!
=
(
const
SampleTime
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
bool
SampleTime
:
:
operator
<
(
const
SampleTime
&
aOther
)
const
{
return
mTime
<
aOther
.
mTime
;
}
bool
SampleTime
:
:
operator
<
=
(
const
SampleTime
&
aOther
)
const
{
return
mTime
<
=
aOther
.
mTime
;
}
bool
SampleTime
:
:
operator
>
(
const
SampleTime
&
aOther
)
const
{
return
mTime
>
aOther
.
mTime
;
}
bool
SampleTime
:
:
operator
>
=
(
const
SampleTime
&
aOther
)
const
{
return
mTime
>
=
aOther
.
mTime
;
}
SampleTime
SampleTime
:
:
operator
+
(
const
TimeDuration
&
aDuration
)
const
{
return
SampleTime
(
mType
mTime
+
aDuration
)
;
}
SampleTime
SampleTime
:
:
operator
-
(
const
TimeDuration
&
aDuration
)
const
{
return
SampleTime
(
mType
mTime
-
aDuration
)
;
}
TimeDuration
SampleTime
:
:
operator
-
(
const
SampleTime
&
aOther
)
const
{
return
mTime
-
aOther
.
mTime
;
}
SampleTime
:
:
SampleTime
(
TimeType
aType
const
TimeStamp
&
aTime
)
:
mType
(
aType
)
mTime
(
aTime
)
{
}
}
}
