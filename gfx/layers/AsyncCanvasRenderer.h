#
ifndef
MOZILLA_LAYERS_ASYNCCANVASRENDERER_H_
#
define
MOZILLA_LAYERS_ASYNCCANVASRENDERER_H_
#
include
"
LayersTypes
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsCOMPtr
.
h
"
class
nsICanvasRenderingContextInternal
;
class
nsIInputStream
;
class
nsISerialEventTarget
;
namespace
mozilla
{
namespace
gfx
{
class
DataSourceSurface
;
}
namespace
gl
{
class
GLContext
;
}
namespace
dom
{
class
HTMLCanvasElement
;
}
namespace
layers
{
class
CanvasClient
;
class
TextureClient
;
class
AsyncCanvasRenderer
final
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
AsyncCanvasRenderer
)
public
:
AsyncCanvasRenderer
(
)
;
void
NotifyElementAboutAttributesChanged
(
)
;
void
NotifyElementAboutInvalidation
(
)
;
void
SetCanvasClient
(
CanvasClient
*
aClient
)
;
void
SetWidth
(
uint32_t
aWidth
)
{
mWidth
=
aWidth
;
}
void
SetHeight
(
uint32_t
aHeight
)
{
mHeight
=
aHeight
;
}
void
SetIsAlphaPremultiplied
(
bool
aIsAlphaPremultiplied
)
{
mIsAlphaPremultiplied
=
aIsAlphaPremultiplied
;
}
void
SetActiveEventTarget
(
)
;
void
ResetActiveEventTarget
(
)
;
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
GetSurface
(
)
;
void
CopyFromTextureClient
(
TextureClient
*
aClient
)
;
nsresult
GetInputStream
(
const
char
*
aMimeType
const
char16_t
*
aEncoderOptions
nsIInputStream
*
*
aStream
)
;
gfx
:
:
IntSize
GetSize
(
)
const
{
return
gfx
:
:
IntSize
(
mWidth
mHeight
)
;
}
CompositableHandle
GetCanvasClientAsyncHandle
(
)
const
{
return
mCanvasClientAsyncHandle
;
}
CanvasClient
*
GetCanvasClient
(
)
const
{
return
mCanvasClient
;
}
already_AddRefed
<
nsISerialEventTarget
>
GetActiveEventTarget
(
)
;
dom
:
:
HTMLCanvasElement
*
mHTMLCanvasElement
;
nsICanvasRenderingContextInternal
*
mContext
;
RefPtr
<
gl
:
:
GLContext
>
mGLContext
;
private
:
virtual
~
AsyncCanvasRenderer
(
)
;
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
UpdateTarget
(
)
;
bool
mIsAlphaPremultiplied
;
uint32_t
mWidth
;
uint32_t
mHeight
;
CompositableHandle
mCanvasClientAsyncHandle
;
CanvasClient
*
mCanvasClient
;
RefPtr
<
gfx
:
:
DataSourceSurface
>
mSurfaceForBasic
;
Mutex
mMutex
;
nsCOMPtr
<
nsISerialEventTarget
>
mActiveEventTarget
;
}
;
}
}
#
endif
