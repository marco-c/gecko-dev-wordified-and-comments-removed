#
include
"
LayersHelpers
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
gfx
;
gfx
:
:
IntRect
ComputeBackdropCopyRect
(
const
gfx
:
:
Rect
&
aRect
const
gfx
:
:
IntRect
&
aClipRect
const
gfx
:
:
Matrix4x4
&
aTransform
const
gfx
:
:
IntRect
&
aRenderTargetRect
gfx
:
:
Matrix4x4
*
aOutTransform
gfx
:
:
Rect
*
aOutLayerQuad
)
{
IntPoint
rtOffset
=
aRenderTargetRect
.
TopLeft
(
)
;
IntSize
rtSize
=
aRenderTargetRect
.
Size
(
)
;
gfx
:
:
IntRect
renderBounds
(
0
0
rtSize
.
width
rtSize
.
height
)
;
renderBounds
.
IntersectRect
(
renderBounds
aClipRect
)
;
renderBounds
.
MoveBy
(
rtOffset
)
;
RectDouble
dest
=
aTransform
.
TransformAndClipBounds
(
RectDouble
(
aRect
.
X
(
)
aRect
.
Y
(
)
aRect
.
Width
(
)
aRect
.
Height
(
)
)
RectDouble
(
renderBounds
.
X
(
)
renderBounds
.
Y
(
)
renderBounds
.
Width
(
)
renderBounds
.
Height
(
)
)
)
;
dest
-
=
rtOffset
;
dest
.
IntersectRect
(
dest
RectDouble
(
0
0
rtSize
.
width
rtSize
.
height
)
)
;
if
(
aOutLayerQuad
)
{
*
aOutLayerQuad
=
Rect
(
dest
.
X
(
)
dest
.
Y
(
)
dest
.
Width
(
)
dest
.
Height
(
)
)
;
}
IntRect
result
;
dest
.
RoundOut
(
)
;
dest
.
ToIntRect
(
&
result
)
;
Matrix4x4
transform
;
transform
.
PostScale
(
rtSize
.
width
rtSize
.
height
1
.
0
)
;
transform
.
PostTranslate
(
-
result
.
X
(
)
-
result
.
Y
(
)
0
.
0
)
;
transform
.
PostScale
(
1
/
float
(
result
.
Width
(
)
)
1
/
float
(
result
.
Height
(
)
)
1
.
0
)
;
*
aOutTransform
=
transform
;
return
result
;
}
}
}
