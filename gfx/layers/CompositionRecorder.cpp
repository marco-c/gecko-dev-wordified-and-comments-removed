#
include
"
CompositionRecorder
.
h
"
#
include
"
gfxUtils
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
<
ctime
>
#
include
<
iomanip
>
#
include
"
stdio
.
h
"
#
ifdef
XP_WIN
#
include
"
direct
.
h
"
#
else
#
include
<
sys
/
types
.
h
>
#
include
"
sys
/
stat
.
h
"
#
endif
using
namespace
mozilla
:
:
gfx
;
namespace
mozilla
{
namespace
layers
{
CompositionRecorder
:
:
CompositionRecorder
(
TimeStamp
aRecordingStart
)
:
mRecordingStart
(
aRecordingStart
)
{
}
void
CompositionRecorder
:
:
RecordFrame
(
RecordedFrame
*
aFrame
)
{
mCollectedFrames
.
AppendElement
(
aFrame
)
;
}
void
CompositionRecorder
:
:
WriteCollectedFrames
(
)
{
std
:
:
stringstream
str
;
nsCString
recordingStartTime
;
TimeDuration
delta
=
TimeStamp
:
:
NowUnfuzzed
(
)
-
mRecordingStart
;
recordingStartTime
.
AppendFloat
(
static_cast
<
double
>
(
PR_Now
(
)
/
1000
.
0
-
delta
.
ToMilliseconds
(
)
)
)
;
str
<
<
gfxVars
:
:
LayersWindowRecordingPath
(
)
<
<
"
windowrecording
-
"
<
<
recordingStartTime
;
#
ifdef
XP_WIN
_mkdir
(
str
.
str
(
)
.
c_str
(
)
)
;
#
else
mkdir
(
str
.
str
(
)
.
c_str
(
)
0777
)
;
#
endif
uint32_t
i
=
1
;
for
(
RefPtr
<
RecordedFrame
>
&
frame
:
mCollectedFrames
)
{
RefPtr
<
DataSourceSurface
>
surf
=
frame
-
>
GetSourceSurface
(
)
;
std
:
:
stringstream
filename
;
filename
<
<
str
.
str
(
)
<
<
"
/
frame
-
"
<
<
i
<
<
"
-
"
<
<
uint32_t
(
(
frame
-
>
GetTimeStamp
(
)
-
mRecordingStart
)
.
ToMilliseconds
(
)
)
<
<
"
.
png
"
;
gfxUtils
:
:
WriteAsPNG
(
surf
filename
.
str
(
)
.
c_str
(
)
)
;
i
+
+
;
}
mCollectedFrames
.
Clear
(
)
;
}
void
CompositionRecorder
:
:
ClearCollectedFrames
(
)
{
mCollectedFrames
.
Clear
(
)
;
}
}
}
