#
ifndef
mozilla_layers_NativeLayer_h
#
define
mozilla_layers_NativeLayer_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
GLTypes
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRegion
.
h
"
namespace
mozilla
{
namespace
gl
{
class
GLContext
;
}
namespace
layers
{
class
NativeLayer
;
class
NativeLayerCA
;
class
NativeLayerRootSnapshotter
;
class
SurfacePoolHandle
;
class
NativeLayerRoot
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
NativeLayerRoot
)
virtual
already_AddRefed
<
NativeLayer
>
CreateLayer
(
const
gfx
:
:
IntSize
&
aSize
bool
aIsOpaque
SurfacePoolHandle
*
aSurfacePoolHandle
)
=
0
;
virtual
void
AppendLayer
(
NativeLayer
*
aLayer
)
=
0
;
virtual
void
RemoveLayer
(
NativeLayer
*
aLayer
)
=
0
;
virtual
void
SetLayers
(
const
nsTArray
<
RefPtr
<
NativeLayer
>
>
&
aLayers
)
=
0
;
virtual
bool
CommitToScreen
(
)
=
0
;
virtual
UniquePtr
<
NativeLayerRootSnapshotter
>
CreateSnapshotter
(
)
{
return
nullptr
;
}
protected
:
virtual
~
NativeLayerRoot
(
)
=
default
;
}
;
class
NativeLayerRootSnapshotter
{
public
:
virtual
~
NativeLayerRootSnapshotter
(
)
=
default
;
virtual
bool
ReadbackPixels
(
const
gfx
:
:
IntSize
&
aReadbackSize
gfx
:
:
SurfaceFormat
aReadbackFormat
const
Range
<
uint8_t
>
&
aReadbackBuffer
)
=
0
;
}
;
class
NativeLayer
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
NativeLayer
)
virtual
NativeLayerCA
*
AsNativeLayerCA
(
)
{
return
nullptr
;
}
virtual
gfx
:
:
IntSize
GetSize
(
)
=
0
;
virtual
bool
IsOpaque
(
)
=
0
;
virtual
void
SetPosition
(
const
gfx
:
:
IntPoint
&
aPosition
)
=
0
;
virtual
gfx
:
:
IntPoint
GetPosition
(
)
=
0
;
virtual
gfx
:
:
IntRect
GetRect
(
)
=
0
;
virtual
void
SetValidRect
(
const
gfx
:
:
IntRect
&
aValidRect
)
=
0
;
virtual
gfx
:
:
IntRect
GetValidRect
(
)
=
0
;
virtual
void
SetClipRect
(
const
Maybe
<
gfx
:
:
IntRect
>
&
aClipRect
)
=
0
;
virtual
Maybe
<
gfx
:
:
IntRect
>
ClipRect
(
)
=
0
;
virtual
void
SetSurfaceIsFlipped
(
bool
aIsFlipped
)
=
0
;
virtual
bool
SurfaceIsFlipped
(
)
=
0
;
virtual
RefPtr
<
gfx
:
:
DrawTarget
>
NextSurfaceAsDrawTarget
(
const
gfx
:
:
IntRegion
&
aUpdateRegion
gfx
:
:
BackendType
aBackendType
)
=
0
;
virtual
Maybe
<
GLuint
>
NextSurfaceAsFramebuffer
(
const
gfx
:
:
IntRegion
&
aUpdateRegion
bool
aNeedsDepth
)
=
0
;
virtual
void
NotifySurfaceReady
(
)
=
0
;
virtual
void
DiscardBackbuffers
(
)
=
0
;
protected
:
virtual
~
NativeLayer
(
)
=
default
;
}
;
}
}
#
endif
