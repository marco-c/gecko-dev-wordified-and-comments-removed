#
include
"
ImageDataSerializer
.
h
"
#
include
<
string
.
h
>
#
include
"
gfx2DGlue
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
gfx
/
Tools
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
yuv_convert
.
h
"
namespace
mozilla
{
namespace
layers
{
namespace
ImageDataSerializer
{
using
namespace
gfx
;
#
define
MOZ_ALIGN_WORD
(
x
)
(
(
(
x
)
+
3
)
&
~
3
)
int32_t
ComputeRGBStride
(
SurfaceFormat
aFormat
int32_t
aWidth
)
{
CheckedInt
<
int32_t
>
size
=
BytesPerPixel
(
aFormat
)
;
size
*
=
aWidth
;
if
(
!
size
.
isValid
(
)
|
|
size
.
value
(
)
<
=
0
)
{
gfxDebug
(
)
<
<
"
ComputeStride
overflow
"
<
<
aWidth
;
return
0
;
}
return
GetAlignedStride
<
4
>
(
size
.
value
(
)
)
;
}
int32_t
GetRGBStride
(
const
RGBDescriptor
&
aDescriptor
)
{
return
ComputeRGBStride
(
aDescriptor
.
format
(
)
aDescriptor
.
size
(
)
.
width
)
;
}
uint32_t
ComputeRGBBufferSize
(
IntSize
aSize
SurfaceFormat
aFormat
)
{
MOZ_ASSERT
(
aSize
.
height
>
=
0
&
&
aSize
.
width
>
=
0
)
;
if
(
!
gfx
:
:
Factory
:
:
AllowedSurfaceSize
(
aSize
)
)
{
return
0
;
}
int32_t
bufsize
=
GetAlignedStride
<
16
>
(
ComputeRGBStride
(
aFormat
aSize
.
width
)
*
aSize
.
height
)
;
if
(
bufsize
<
0
)
{
return
0
;
}
return
bufsize
;
}
uint32_t
ComputeYCbCrBufferSize
(
const
gfx
:
:
IntSize
&
aYSize
int32_t
aYStride
const
gfx
:
:
IntSize
&
aCbCrSize
int32_t
aCbCrStride
)
{
MOZ_ASSERT
(
aYSize
.
height
>
=
0
&
&
aYSize
.
width
>
=
0
)
;
if
(
aYSize
.
height
<
0
|
|
aYSize
.
width
<
0
|
|
aCbCrSize
.
height
<
0
|
|
aCbCrSize
.
width
<
0
|
|
aYSize
.
width
>
aYStride
|
|
aCbCrSize
.
width
>
aCbCrStride
|
|
aCbCrStride
>
aYStride
|
|
aCbCrSize
.
height
>
aYSize
.
height
|
|
!
gfx
:
:
Factory
:
:
AllowedSurfaceSize
(
IntSize
(
aYStride
aYSize
.
height
)
)
)
{
return
0
;
}
return
MOZ_ALIGN_WORD
(
aYSize
.
height
*
aYStride
)
+
2
*
MOZ_ALIGN_WORD
(
aCbCrSize
.
height
*
aCbCrStride
)
;
}
uint32_t
ComputeYCbCrBufferSize
(
const
gfx
:
:
IntSize
&
aYSize
const
gfx
:
:
IntSize
&
aCbCrSize
)
{
return
ComputeYCbCrBufferSize
(
aYSize
aYSize
.
width
aCbCrSize
aCbCrSize
.
width
)
;
}
uint32_t
ComputeYCbCrBufferSize
(
uint32_t
aBufferSize
)
{
return
MOZ_ALIGN_WORD
(
aBufferSize
)
;
}
void
ComputeYCbCrOffsets
(
int32_t
yStride
int32_t
yHeight
int32_t
cbCrStride
int32_t
cbCrHeight
uint32_t
&
outYOffset
uint32_t
&
outCbOffset
uint32_t
&
outCrOffset
)
{
outYOffset
=
0
;
outCbOffset
=
outYOffset
+
MOZ_ALIGN_WORD
(
yStride
*
yHeight
)
;
outCrOffset
=
outCbOffset
+
MOZ_ALIGN_WORD
(
cbCrStride
*
cbCrHeight
)
;
}
gfx
:
:
SurfaceFormat
FormatFromBufferDescriptor
(
const
BufferDescriptor
&
aDescriptor
)
{
switch
(
aDescriptor
.
type
(
)
)
{
case
BufferDescriptor
:
:
TRGBDescriptor
:
return
aDescriptor
.
get_RGBDescriptor
(
)
.
format
(
)
;
case
BufferDescriptor
:
:
TYCbCrDescriptor
:
return
gfx
:
:
SurfaceFormat
:
:
YUV
;
default
:
MOZ_CRASH
(
)
;
}
}
gfx
:
:
IntSize
SizeFromBufferDescriptor
(
const
BufferDescriptor
&
aDescriptor
)
{
switch
(
aDescriptor
.
type
(
)
)
{
case
BufferDescriptor
:
:
TRGBDescriptor
:
return
aDescriptor
.
get_RGBDescriptor
(
)
.
size
(
)
;
case
BufferDescriptor
:
:
TYCbCrDescriptor
:
return
aDescriptor
.
get_YCbCrDescriptor
(
)
.
ySize
(
)
;
default
:
MOZ_CRASH
(
)
;
}
}
uint8_t
*
GetYChannel
(
uint8_t
*
aBuffer
const
YCbCrDescriptor
&
aDescriptor
)
{
return
aBuffer
+
aDescriptor
.
yOffset
(
)
;
}
uint8_t
*
GetCbChannel
(
uint8_t
*
aBuffer
const
YCbCrDescriptor
&
aDescriptor
)
{
return
aBuffer
+
aDescriptor
.
cbOffset
(
)
;
}
uint8_t
*
GetCrChannel
(
uint8_t
*
aBuffer
const
YCbCrDescriptor
&
aDescriptor
)
{
return
aBuffer
+
aDescriptor
.
crOffset
(
)
;
}
already_AddRefed
<
DataSourceSurface
>
DataSourceSurfaceFromYCbCrDescriptor
(
uint8_t
*
aBuffer
const
YCbCrDescriptor
&
aDescriptor
)
{
gfx
:
:
IntSize
ySize
=
aDescriptor
.
ySize
(
)
;
gfx
:
:
IntSize
cbCrSize
=
aDescriptor
.
cbCrSize
(
)
;
int32_t
yStride
=
ySize
.
width
;
int32_t
cbCrStride
=
cbCrSize
.
width
;
RefPtr
<
DataSourceSurface
>
result
=
Factory
:
:
CreateDataSourceSurface
(
ySize
gfx
:
:
SurfaceFormat
:
:
B8G8R8X8
)
;
if
(
NS_WARN_IF
(
!
result
)
)
{
return
nullptr
;
}
DataSourceSurface
:
:
MappedSurface
map
;
if
(
NS_WARN_IF
(
!
result
-
>
Map
(
DataSourceSurface
:
:
MapType
:
:
WRITE
&
map
)
)
)
{
return
nullptr
;
}
gfx
:
:
YUVType
type
=
TypeFromSize
(
ySize
.
width
ySize
.
height
cbCrSize
.
width
cbCrSize
.
height
)
;
gfx
:
:
ConvertYCbCrToRGB32
(
GetYChannel
(
aBuffer
aDescriptor
)
GetCbChannel
(
aBuffer
aDescriptor
)
GetCrChannel
(
aBuffer
aDescriptor
)
map
.
mData
0
0
ySize
.
width
ySize
.
height
yStride
cbCrStride
map
.
mStride
type
)
;
result
-
>
Unmap
(
)
;
return
result
.
forget
(
)
;
}
}
}
}
