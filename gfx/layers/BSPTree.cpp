#
include
"
BSPTree
.
h
"
#
include
"
mozilla
/
gfx
/
Polygon
.
h
"
namespace
mozilla
{
namespace
layers
{
LayerPolygon
PopFront
(
std
:
:
deque
<
LayerPolygon
>
&
aLayers
)
{
LayerPolygon
layer
=
std
:
:
move
(
aLayers
.
front
(
)
)
;
aLayers
.
pop_front
(
)
;
return
layer
;
}
namespace
{
nsTArray
<
float
>
CalculateDotProduct
(
const
gfx
:
:
Polygon3D
&
aFirst
const
gfx
:
:
Polygon3D
&
aSecond
size_t
&
aPos
size_t
&
aNeg
)
{
const
float
epsilon
=
0
.
05f
;
const
gfx
:
:
Point3D
&
normal
=
aFirst
.
GetNormal
(
)
;
const
gfx
:
:
Point3D
&
planePoint
=
aFirst
[
0
]
;
nsTArray
<
float
>
dotProducts
;
for
(
const
gfx
:
:
Point3D
&
point
:
aSecond
.
GetPoints
(
)
)
{
float
dot
=
(
point
-
planePoint
)
.
DotProduct
(
normal
)
;
if
(
dot
>
epsilon
)
{
aPos
+
+
;
}
else
if
(
dot
<
-
epsilon
)
{
aNeg
+
+
;
}
else
{
dot
=
0
.
0f
;
}
dotProducts
.
AppendElement
(
dot
)
;
}
return
dotProducts
;
}
int
Sign
(
float
aValue
)
{
if
(
aValue
>
0
)
return
1
;
if
(
aValue
<
0
)
return
-
1
;
return
0
;
}
void
SplitPolygon
(
const
gfx
:
:
Polygon3D
&
aSplittingPlane
const
gfx
:
:
Polygon3D
&
aPolygon
const
nsTArray
<
float
>
&
dots
gfx
:
:
Polygon3D
&
back
gfx
:
:
Polygon3D
&
front
)
{
const
gfx
:
:
Point3D
&
normal
=
aSplittingPlane
.
GetNormal
(
)
;
const
size_t
pointCount
=
aPolygon
.
GetPoints
(
)
.
Length
(
)
;
nsTArray
<
gfx
:
:
Point3D
>
backPoints
frontPoints
;
for
(
size_t
i
=
0
;
i
<
pointCount
;
+
+
i
)
{
size_t
j
=
(
i
+
1
)
%
pointCount
;
const
gfx
:
:
Point3D
&
a
=
aPolygon
[
i
]
;
const
gfx
:
:
Point3D
&
b
=
aPolygon
[
j
]
;
const
float
dotA
=
dots
[
i
]
;
const
float
dotB
=
dots
[
j
]
;
if
(
dotA
>
=
0
)
{
frontPoints
.
AppendElement
(
a
)
;
}
if
(
dotA
<
=
0
)
{
backPoints
.
AppendElement
(
a
)
;
}
if
(
Sign
(
dotA
)
!
=
Sign
(
dotB
)
)
{
const
gfx
:
:
Point3D
ab
=
b
-
a
;
const
float
dotAB
=
ab
.
DotProduct
(
normal
)
;
const
float
t
=
-
dotA
/
dotAB
;
const
gfx
:
:
Point3D
p
=
a
+
(
ab
*
t
)
;
backPoints
.
AppendElement
(
p
)
;
frontPoints
.
AppendElement
(
p
)
;
}
}
back
=
gfx
:
:
Polygon3D
(
std
:
:
move
(
backPoints
)
aPolygon
.
GetNormal
(
)
)
;
front
=
gfx
:
:
Polygon3D
(
std
:
:
move
(
frontPoints
)
aPolygon
.
GetNormal
(
)
)
;
}
}
void
BSPTree
:
:
BuildDrawOrder
(
const
UniquePtr
<
BSPTreeNode
>
&
aNode
nsTArray
<
LayerPolygon
>
&
aLayers
)
const
{
const
gfx
:
:
Point3D
&
normal
=
aNode
-
>
First
(
)
.
GetNormal
(
)
;
UniquePtr
<
BSPTreeNode
>
*
front
=
&
aNode
-
>
front
;
UniquePtr
<
BSPTreeNode
>
*
back
=
&
aNode
-
>
back
;
const
bool
reverseOrder
=
normal
.
z
>
0
.
0f
;
if
(
reverseOrder
)
{
std
:
:
swap
(
front
back
)
;
}
if
(
*
front
)
{
BuildDrawOrder
(
*
front
aLayers
)
;
}
for
(
LayerPolygon
&
layer
:
aNode
-
>
layers
)
{
aLayers
.
AppendElement
(
std
:
:
move
(
layer
)
)
;
}
if
(
*
back
)
{
BuildDrawOrder
(
*
back
aLayers
)
;
}
}
void
BSPTree
:
:
BuildTree
(
UniquePtr
<
BSPTreeNode
>
&
aRoot
std
:
:
deque
<
LayerPolygon
>
&
aLayers
)
{
if
(
aLayers
.
empty
(
)
)
{
return
;
}
const
gfx
:
:
Polygon3D
&
splittingPlane
=
aRoot
-
>
First
(
)
;
std
:
:
deque
<
LayerPolygon
>
backLayers
frontLayers
;
for
(
LayerPolygon
&
layerPolygon
:
aLayers
)
{
size_t
pos
=
0
neg
=
0
;
nsTArray
<
float
>
dots
=
CalculateDotProduct
(
splittingPlane
*
layerPolygon
.
geometry
pos
neg
)
;
if
(
pos
=
=
0
&
&
neg
>
0
)
{
backLayers
.
push_back
(
std
:
:
move
(
layerPolygon
)
)
;
}
else
if
(
pos
>
0
&
&
neg
=
=
0
)
{
frontLayers
.
push_back
(
std
:
:
move
(
layerPolygon
)
)
;
}
else
if
(
pos
=
=
0
&
&
neg
=
=
0
)
{
aRoot
-
>
layers
.
push_back
(
std
:
:
move
(
layerPolygon
)
)
;
}
else
if
(
pos
>
0
&
&
neg
>
0
)
{
gfx
:
:
Polygon3D
back
front
;
SplitPolygon
(
splittingPlane
*
layerPolygon
.
geometry
dots
back
front
)
;
backLayers
.
push_back
(
LayerPolygon
(
std
:
:
move
(
back
)
layerPolygon
.
layer
)
)
;
frontLayers
.
push_back
(
LayerPolygon
(
std
:
:
move
(
front
)
layerPolygon
.
layer
)
)
;
}
}
if
(
!
backLayers
.
empty
(
)
)
{
aRoot
-
>
back
.
reset
(
new
BSPTreeNode
(
PopFront
(
backLayers
)
)
)
;
BuildTree
(
aRoot
-
>
back
backLayers
)
;
}
if
(
!
frontLayers
.
empty
(
)
)
{
aRoot
-
>
front
.
reset
(
new
BSPTreeNode
(
PopFront
(
frontLayers
)
)
)
;
BuildTree
(
aRoot
-
>
front
frontLayers
)
;
}
}
}
}
