#
ifndef
MOZILLA_GFX_TEXTURECLIENTPOOL_H
#
define
MOZILLA_GFX_TEXTURECLIENTPOOL_H
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
TextureClient
.
h
"
#
include
"
nsITimer
.
h
"
#
include
<
stack
>
#
include
<
list
>
namespace
mozilla
{
namespace
layers
{
class
ISurfaceAllocator
;
class
TextureForwarder
;
class
TextureReadLock
;
class
TextureClientAllocator
{
protected
:
virtual
~
TextureClientAllocator
(
)
{
}
public
:
NS_INLINE_DECL_REFCOUNTING
(
TextureClientAllocator
)
virtual
already_AddRefed
<
TextureClient
>
GetTextureClient
(
)
=
0
;
virtual
void
ReturnTextureClientDeferred
(
TextureClient
*
aClient
)
=
0
;
virtual
void
ReportClientLost
(
)
=
0
;
}
;
class
TextureClientPool
final
:
public
TextureClientAllocator
{
~
TextureClientPool
(
)
;
public
:
TextureClientPool
(
LayersBackend
aBackend
gfx
:
:
SurfaceFormat
aFormat
gfx
:
:
IntSize
aSize
TextureFlags
aFlags
uint32_t
aMaxTextureClients
uint32_t
aShrinkTimeoutMsec
TextureForwarder
*
aAllocator
)
;
already_AddRefed
<
TextureClient
>
GetTextureClient
(
)
override
;
void
ReturnTextureClient
(
TextureClient
*
aClient
)
;
void
ReturnTextureClientDeferred
(
TextureClient
*
aClient
)
override
;
void
ShrinkToMaximumSize
(
)
;
void
ShrinkToMinimumSize
(
)
;
void
ReturnDeferredClients
(
)
;
virtual
void
ReportClientLost
(
)
override
;
void
Clear
(
)
;
LayersBackend
GetBackend
(
)
const
{
return
mBackend
;
}
gfx
:
:
SurfaceFormat
GetFormat
(
)
{
return
mFormat
;
}
TextureFlags
GetFlags
(
)
const
{
return
mFlags
;
}
void
Destroy
(
)
;
private
:
void
ReturnUnlockedClients
(
)
;
static
const
uint32_t
sMinCacheSize
=
0
;
LayersBackend
mBackend
;
gfx
:
:
SurfaceFormat
mFormat
;
gfx
:
:
IntSize
mSize
;
const
TextureFlags
mFlags
;
uint32_t
mMaxTextureClients
;
uint32_t
mShrinkTimeoutMsec
;
uint32_t
mOutstandingClients
;
std
:
:
stack
<
RefPtr
<
TextureClient
>
>
mTextureClients
;
std
:
:
list
<
RefPtr
<
TextureClient
>
>
mTextureClientsDeferred
;
RefPtr
<
nsITimer
>
mTimer
;
TextureForwarder
*
mSurfaceAllocator
;
}
;
}
}
#
endif
