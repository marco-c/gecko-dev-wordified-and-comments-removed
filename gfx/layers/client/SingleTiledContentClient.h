#
ifndef
MOZILLA_GFX_SINGLETILEDCONTENTCLIENT_H
#
define
MOZILLA_GFX_SINGLETILEDCONTENTCLIENT_H
#
include
"
TiledContentClient
.
h
"
namespace
mozilla
{
namespace
layers
{
class
ClientTiledPaintedLayer
;
class
ClientLayerManager
;
class
ClientSingleTiledLayerBuffer
:
public
ClientTiledLayerBuffer
public
TextureClientAllocator
{
virtual
~
ClientSingleTiledLayerBuffer
(
)
{
}
public
:
ClientSingleTiledLayerBuffer
(
ClientTiledPaintedLayer
*
aPaintedLayer
CompositableClient
*
aCompositableClient
ClientLayerManager
*
aManager
)
;
already_AddRefed
<
TextureClient
>
GetTextureClient
(
)
override
;
void
ReturnTextureClientDeferred
(
TextureClient
*
aClient
)
override
{
}
void
ReportClientLost
(
)
override
{
}
void
PaintThebes
(
const
nsIntRegion
&
aNewValidRegion
const
nsIntRegion
&
aPaintRegion
const
nsIntRegion
&
aDirtyRegion
LayerManager
:
:
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
)
override
;
bool
SupportsProgressiveUpdate
(
)
override
{
return
false
;
}
bool
ProgressiveUpdate
(
nsIntRegion
&
aValidRegion
nsIntRegion
&
aInvalidRegion
const
nsIntRegion
&
aOldValidRegion
BasicTiledLayerPaintData
*
aPaintData
LayerManager
:
:
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
)
override
{
MOZ_ASSERT
(
false
"
ProgressiveUpdate
not
supported
!
"
)
;
return
false
;
}
void
ResetPaintedAndValidState
(
)
override
{
mPaintedRegion
.
SetEmpty
(
)
;
mValidRegion
.
SetEmpty
(
)
;
mTile
.
DiscardBuffers
(
)
;
}
const
nsIntRegion
&
GetValidRegion
(
)
override
{
return
mValidRegion
;
}
bool
IsLowPrecision
(
)
const
override
{
return
false
;
}
void
ReadLock
(
)
;
void
ReleaseTiles
(
)
;
void
DiscardBuffers
(
)
;
SurfaceDescriptorTiles
GetSurfaceDescriptorTiles
(
)
;
void
ClearPaintedRegion
(
)
{
mPaintedRegion
.
SetEmpty
(
)
;
}
private
:
TileClient
mTile
;
ClientLayerManager
*
mManager
;
nsIntRegion
mPaintedRegion
;
nsIntRegion
mValidRegion
;
gfx
:
:
IntPoint
mTilingOrigin
;
gfx
:
:
IntSize
mSize
;
gfxImageFormat
mFormat
;
}
;
class
SingleTiledContentClient
:
public
TiledContentClient
{
public
:
SingleTiledContentClient
(
ClientTiledPaintedLayer
*
aPaintedLayer
ClientLayerManager
*
aManager
)
;
protected
:
~
SingleTiledContentClient
(
)
{
MOZ_COUNT_DTOR
(
SingleTiledContentClient
)
;
mDestroyed
=
true
;
mTiledBuffer
-
>
ReleaseTiles
(
)
;
}
public
:
virtual
void
ClearCachedResources
(
)
override
;
virtual
void
UpdatedBuffer
(
TiledBufferType
aType
)
override
;
virtual
ClientTiledLayerBuffer
*
GetTiledBuffer
(
)
override
{
return
mTiledBuffer
;
}
virtual
ClientTiledLayerBuffer
*
GetLowPrecisionTiledBuffer
(
)
override
{
return
nullptr
;
}
private
:
nsRefPtr
<
ClientSingleTiledLayerBuffer
>
mTiledBuffer
;
}
;
}
}
#
endif
