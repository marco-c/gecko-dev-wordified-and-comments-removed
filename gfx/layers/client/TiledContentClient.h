#
ifndef
MOZILLA_GFX_TILEDCONTENTCLIENT_H
#
define
MOZILLA_GFX_TILEDCONTENTCLIENT_H
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
algorithm
>
#
include
<
limits
>
#
include
"
Layers
.
h
"
#
include
"
TiledLayerBuffer
.
h
"
#
include
"
Units
.
h
"
#
include
"
gfxTypes
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
#
include
"
mozilla
/
ipc
/
SharedMemory
.
h
"
#
include
"
mozilla
/
layers
/
AsyncCompositionManager
.
h
"
#
include
"
mozilla
/
layers
/
CompositableClient
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
TextureClientPool
.
h
"
#
include
"
ClientLayerManager
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsPoint
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsExpirationTracker
.
h
"
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
namespace
mozilla
{
namespace
layers
{
class
ClientTiledPaintedLayer
;
class
ClientLayerManager
;
struct
TileClient
{
TileClient
(
)
;
~
TileClient
(
)
;
TileClient
(
const
TileClient
&
o
)
;
TileClient
&
operator
=
(
const
TileClient
&
o
)
;
bool
operator
=
=
(
const
TileClient
&
o
)
const
{
return
mFrontBuffer
=
=
o
.
mFrontBuffer
;
}
bool
operator
!
=
(
const
TileClient
&
o
)
const
{
return
mFrontBuffer
!
=
o
.
mFrontBuffer
;
}
void
SetTextureAllocator
(
TextureClientAllocator
*
aAllocator
)
{
mAllocator
=
aAllocator
;
}
bool
IsPlaceholderTile
(
)
const
{
return
mBackBuffer
=
=
nullptr
&
&
mFrontBuffer
=
=
nullptr
;
}
void
DiscardBuffers
(
)
{
DiscardFrontBuffer
(
)
;
DiscardBackBuffer
(
)
;
}
nsExpirationState
*
GetExpirationState
(
)
{
return
&
mExpirationState
;
}
TileDescriptor
GetTileDescriptor
(
)
;
void
Dump
(
std
:
:
stringstream
&
aStream
)
;
void
Flip
(
)
;
void
DumpTexture
(
std
:
:
stringstream
&
aStream
TextureDumpMode
aCompress
)
{
CompositableClient
:
:
DumpTextureClient
(
aStream
mFrontBuffer
aCompress
)
;
}
TextureClient
*
GetBackBuffer
(
CompositableClient
&
const
nsIntRegion
&
aDirtyRegion
gfxContentType
aContent
SurfaceMode
aMode
nsIntRegion
&
aAddPaintedRegion
RefPtr
<
TextureClient
>
*
aTextureClientOnWhite
)
;
void
DiscardFrontBuffer
(
)
;
void
DiscardBackBuffer
(
)
;
class
PrivateProtector
{
public
:
void
Set
(
TileClient
*
container
RefPtr
<
TextureClient
>
)
;
void
Set
(
TileClient
*
container
TextureClient
*
)
;
operator
TextureClient
*
(
)
const
{
return
mBuffer
;
}
RefPtr
<
TextureClient
>
operator
-
>
(
)
{
return
mBuffer
;
}
private
:
PrivateProtector
&
operator
=
(
const
PrivateProtector
&
)
;
RefPtr
<
TextureClient
>
mBuffer
;
}
mBackBuffer
;
RefPtr
<
TextureClient
>
mBackBufferOnWhite
;
RefPtr
<
TextureClient
>
mFrontBuffer
;
RefPtr
<
TextureClient
>
mFrontBufferOnWhite
;
RefPtr
<
TextureClientAllocator
>
mAllocator
;
gfx
:
:
IntRect
mUpdateRect
;
bool
mWasPlaceholder
;
#
ifdef
GFX_TILEDLAYER_DEBUG_OVERLAY
TimeStamp
mLastUpdate
;
#
endif
nsIntRegion
mInvalidFront
;
nsIntRegion
mInvalidBack
;
nsExpirationState
mExpirationState
;
private
:
void
ValidateBackBufferFromFront
(
const
nsIntRegion
&
aDirtyRegion
nsIntRegion
&
aAddPaintedRegion
)
;
}
;
struct
BasicTiledLayerPaintData
{
ParentLayerPoint
mScrollOffset
;
ParentLayerPoint
mLastScrollOffset
;
LayerToParentLayerMatrix4x4
mTransformToCompBounds
;
Maybe
<
LayerIntRect
>
mCriticalDisplayPort
;
CSSToParentLayerScale2D
mResolution
;
LayerRect
mCompositionBounds
;
uint16_t
mLowPrecisionPaintCount
;
bool
mFirstPaint
:
1
;
bool
mPaintFinished
:
1
;
bool
mHasTransformAnimation
:
1
;
void
ResetPaintData
(
)
;
}
;
class
SharedFrameMetricsHelper
{
public
:
SharedFrameMetricsHelper
(
)
;
~
SharedFrameMetricsHelper
(
)
;
bool
UpdateFromCompositorFrameMetrics
(
const
LayerMetricsWrapper
&
aLayer
bool
aHasPendingNewThebesContent
bool
aLowPrecision
AsyncTransform
&
aViewTransform
)
;
bool
AboutToCheckerboard
(
const
FrameMetrics
&
aContentMetrics
const
FrameMetrics
&
aCompositorMetrics
)
;
private
:
bool
mLastProgressiveUpdateWasLowPrecision
;
bool
mProgressiveUpdateWasInDanger
;
}
;
class
ClientTiledLayerBuffer
{
public
:
ClientTiledLayerBuffer
(
ClientTiledPaintedLayer
&
aPaintedLayer
CompositableClient
&
aCompositableClient
)
:
mPaintedLayer
(
aPaintedLayer
)
mCompositableClient
(
aCompositableClient
)
mLastPaintContentType
(
gfxContentType
:
:
COLOR
)
mLastPaintSurfaceMode
(
SurfaceMode
:
:
SURFACE_OPAQUE
)
mWasLastPaintProgressive
(
false
)
{
}
virtual
void
PaintThebes
(
const
nsIntRegion
&
aNewValidRegion
const
nsIntRegion
&
aPaintRegion
const
nsIntRegion
&
aDirtyRegion
LayerManager
:
:
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
bool
aIsProgressive
=
false
)
=
0
;
virtual
bool
SupportsProgressiveUpdate
(
)
=
0
;
virtual
bool
ProgressiveUpdate
(
nsIntRegion
&
aValidRegion
const
nsIntRegion
&
aInvalidRegion
const
nsIntRegion
&
aOldValidRegion
BasicTiledLayerPaintData
*
aPaintData
LayerManager
:
:
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
)
=
0
;
virtual
void
ResetPaintedAndValidState
(
)
=
0
;
virtual
const
nsIntRegion
&
GetValidRegion
(
)
=
0
;
virtual
bool
IsLowPrecision
(
)
const
=
0
;
virtual
void
Dump
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
bool
aDumpHtml
TextureDumpMode
aCompress
)
{
}
const
CSSToParentLayerScale2D
&
GetFrameResolution
(
)
{
return
mFrameResolution
;
}
void
SetFrameResolution
(
const
CSSToParentLayerScale2D
&
aResolution
)
{
mFrameResolution
=
aResolution
;
}
bool
HasFormatChanged
(
)
const
;
protected
:
void
UnlockTile
(
TileClient
&
aTile
)
;
gfxContentType
GetContentType
(
SurfaceMode
*
aMode
=
nullptr
)
const
;
ClientTiledPaintedLayer
&
mPaintedLayer
;
CompositableClient
&
mCompositableClient
;
gfxContentType
mLastPaintContentType
;
SurfaceMode
mLastPaintSurfaceMode
;
CSSToParentLayerScale2D
mFrameResolution
;
bool
mWasLastPaintProgressive
;
}
;
class
ClientMultiTiledLayerBuffer
:
public
TiledLayerBuffer
<
ClientMultiTiledLayerBuffer
TileClient
>
public
ClientTiledLayerBuffer
{
friend
class
TiledLayerBuffer
<
ClientMultiTiledLayerBuffer
TileClient
>
;
public
:
ClientMultiTiledLayerBuffer
(
ClientTiledPaintedLayer
&
aPaintedLayer
CompositableClient
&
aCompositableClient
ClientLayerManager
*
aManager
SharedFrameMetricsHelper
*
aHelper
)
;
void
PaintThebes
(
const
nsIntRegion
&
aNewValidRegion
const
nsIntRegion
&
aPaintRegion
const
nsIntRegion
&
aDirtyRegion
LayerManager
:
:
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
bool
aIsProgressive
=
false
)
override
;
virtual
bool
SupportsProgressiveUpdate
(
)
override
{
return
true
;
}
bool
ProgressiveUpdate
(
nsIntRegion
&
aValidRegion
const
nsIntRegion
&
aInvalidRegion
const
nsIntRegion
&
aOldValidRegion
BasicTiledLayerPaintData
*
aPaintData
LayerManager
:
:
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
)
override
;
void
ResetPaintedAndValidState
(
)
override
{
mPaintedRegion
.
SetEmpty
(
)
;
mValidRegion
.
SetEmpty
(
)
;
mTiles
.
mSize
.
width
=
0
;
mTiles
.
mSize
.
height
=
0
;
DiscardBuffers
(
)
;
mRetainedTiles
.
Clear
(
)
;
}
const
nsIntRegion
&
GetValidRegion
(
)
override
{
return
TiledLayerBuffer
:
:
GetValidRegion
(
)
;
}
bool
IsLowPrecision
(
)
const
override
{
return
TiledLayerBuffer
:
:
IsLowPrecision
(
)
;
}
void
Dump
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
bool
aDumpHtml
TextureDumpMode
aCompress
)
override
{
TiledLayerBuffer
:
:
Dump
(
aStream
aPrefix
aDumpHtml
aCompress
)
;
}
void
ReadLock
(
)
;
void
Release
(
)
;
void
DiscardBuffers
(
)
;
SurfaceDescriptorTiles
GetSurfaceDescriptorTiles
(
)
;
void
SetResolution
(
float
aResolution
)
{
if
(
mResolution
=
=
aResolution
)
{
return
;
}
Update
(
nsIntRegion
(
)
nsIntRegion
(
)
nsIntRegion
(
)
)
;
mResolution
=
aResolution
;
}
protected
:
bool
ValidateTile
(
TileClient
&
aTile
const
nsIntPoint
&
aTileRect
const
nsIntRegion
&
dirtyRect
)
;
void
Update
(
const
nsIntRegion
&
aNewValidRegion
const
nsIntRegion
&
aPaintRegion
const
nsIntRegion
&
aDirtyRegion
)
;
TileClient
GetPlaceholderTile
(
)
const
{
return
TileClient
(
)
;
}
private
:
RefPtr
<
ClientLayerManager
>
mManager
;
LayerManager
:
:
DrawPaintedLayerCallback
mCallback
;
void
*
mCallbackData
;
nsIntRegion
mNewValidRegion
;
SharedFrameMetricsHelper
*
mSharedFrameMetricsHelper
;
std
:
:
vector
<
gfx
:
:
Tile
>
mMoz2DTiles
;
gfx
:
:
IntPoint
mTilingOrigin
;
bool
ComputeProgressiveUpdateRegion
(
const
nsIntRegion
&
aInvalidRegion
const
nsIntRegion
&
aOldValidRegion
nsIntRegion
&
aRegionToPaint
BasicTiledLayerPaintData
*
aPaintData
bool
aIsRepeated
)
;
}
;
class
TiledContentClient
:
public
CompositableClient
{
public
:
TiledContentClient
(
ClientLayerManager
*
aManager
const
char
*
aName
=
"
"
)
:
CompositableClient
(
aManager
-
>
AsShadowForwarder
(
)
)
mName
(
aName
)
{
}
protected
:
~
TiledContentClient
(
)
{
}
public
:
virtual
void
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
;
virtual
void
Dump
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
=
"
"
bool
aDumpHtml
=
false
TextureDumpMode
aCompress
=
TextureDumpMode
:
:
Compress
)
override
;
virtual
TextureInfo
GetTextureInfo
(
)
const
override
{
return
TextureInfo
(
CompositableType
:
:
CONTENT_TILED
)
;
}
virtual
ClientTiledLayerBuffer
*
GetTiledBuffer
(
)
=
0
;
virtual
ClientTiledLayerBuffer
*
GetLowPrecisionTiledBuffer
(
)
=
0
;
enum
TiledBufferType
{
TILED_BUFFER
LOW_PRECISION_TILED_BUFFER
}
;
virtual
void
UpdatedBuffer
(
TiledBufferType
aType
)
=
0
;
private
:
const
char
*
mName
;
}
;
class
MultiTiledContentClient
:
public
TiledContentClient
{
public
:
MultiTiledContentClient
(
ClientTiledPaintedLayer
&
aPaintedLayer
ClientLayerManager
*
aManager
)
;
protected
:
~
MultiTiledContentClient
(
)
{
MOZ_COUNT_DTOR
(
MultiTiledContentClient
)
;
mTiledBuffer
.
DiscardBuffers
(
)
;
mLowPrecisionTiledBuffer
.
DiscardBuffers
(
)
;
}
public
:
void
ClearCachedResources
(
)
override
;
void
UpdatedBuffer
(
TiledBufferType
aType
)
override
;
ClientTiledLayerBuffer
*
GetTiledBuffer
(
)
override
{
return
&
mTiledBuffer
;
}
ClientTiledLayerBuffer
*
GetLowPrecisionTiledBuffer
(
)
override
{
if
(
mHasLowPrecision
)
{
return
&
mLowPrecisionTiledBuffer
;
}
return
nullptr
;
}
private
:
SharedFrameMetricsHelper
mSharedFrameMetricsHelper
;
ClientMultiTiledLayerBuffer
mTiledBuffer
;
ClientMultiTiledLayerBuffer
mLowPrecisionTiledBuffer
;
bool
mHasLowPrecision
;
}
;
}
}
#
endif
