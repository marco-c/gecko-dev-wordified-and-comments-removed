#
include
"
TextureRecorded
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
RecordedCanvasEventImpl
.
h
"
namespace
mozilla
{
namespace
layers
{
static
int64_t
sNextRecordedTextureId
=
0
;
RecordedTextureData
:
:
RecordedTextureData
(
already_AddRefed
<
CanvasChild
>
aCanvasChild
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
TextureType
aTextureType
)
:
mCanvasChild
(
aCanvasChild
)
mSize
(
aSize
)
mFormat
(
aFormat
)
{
mCanvasChild
-
>
EnsureRecorder
(
aTextureType
)
;
}
RecordedTextureData
:
:
~
RecordedTextureData
(
)
{
mCanvasChild
-
>
RecordEvent
(
RecordedTextureDestruction
(
mTextureId
)
)
;
}
void
RecordedTextureData
:
:
FillInfo
(
TextureData
:
:
Info
&
aInfo
)
const
{
aInfo
.
size
=
mSize
;
aInfo
.
format
=
mFormat
;
aInfo
.
supportsMoz2D
=
true
;
aInfo
.
hasIntermediateBuffer
=
false
;
aInfo
.
hasSynchronization
=
true
;
}
bool
RecordedTextureData
:
:
Lock
(
OpenMode
aMode
)
{
mCanvasChild
-
>
EnsureBeginTransaction
(
)
;
if
(
!
mDT
)
{
mTextureId
=
sNextRecordedTextureId
+
+
;
mCanvasChild
-
>
RecordEvent
(
RecordedNextTextureId
(
mTextureId
)
)
;
mDT
=
mCanvasChild
-
>
CreateDrawTarget
(
mSize
mFormat
)
;
mCanvasChild
-
>
OnTextureWriteLock
(
)
;
return
true
;
}
mCanvasChild
-
>
RecordEvent
(
RecordedTextureLock
(
mTextureId
aMode
)
)
;
if
(
aMode
&
OpenMode
:
:
OPEN_WRITE
)
{
mCanvasChild
-
>
OnTextureWriteLock
(
)
;
mSnapshot
=
nullptr
;
}
return
true
;
}
void
RecordedTextureData
:
:
Unlock
(
)
{
mCanvasChild
-
>
RecordEvent
(
RecordedTextureUnlock
(
mTextureId
)
)
;
}
already_AddRefed
<
gfx
:
:
DrawTarget
>
RecordedTextureData
:
:
BorrowDrawTarget
(
)
{
return
do_AddRef
(
mDT
)
;
}
already_AddRefed
<
gfx
:
:
SourceSurface
>
RecordedTextureData
:
:
BorrowSnapshot
(
)
{
MOZ_ASSERT
(
mDT
)
;
mSnapshot
=
mDT
-
>
Snapshot
(
)
;
return
mCanvasChild
-
>
WrapSurface
(
mSnapshot
)
;
}
void
RecordedTextureData
:
:
Deallocate
(
LayersIPCChannel
*
aAllocator
)
{
}
bool
RecordedTextureData
:
:
Serialize
(
SurfaceDescriptor
&
aDescriptor
)
{
aDescriptor
=
SurfaceDescriptorRecorded
(
mTextureId
)
;
return
true
;
}
void
RecordedTextureData
:
:
OnForwardedToHost
(
)
{
mCanvasChild
-
>
OnTextureForwarded
(
)
;
if
(
mSnapshot
&
&
mCanvasChild
-
>
ShouldCacheDataSurface
(
)
)
{
mCanvasChild
-
>
RecordEvent
(
RecordedCacheDataSurface
(
mSnapshot
.
get
(
)
)
)
;
}
}
TextureFlags
RecordedTextureData
:
:
GetTextureFlags
(
)
const
{
TextureFlags
flags
=
TextureFlags
:
:
NO_FLAGS
;
if
(
gfx
:
:
gfxVars
:
:
UseWebRender
(
)
)
{
flags
|
=
TextureFlags
:
:
WAIT_HOST_USAGE_END
;
}
return
flags
;
}
}
}
