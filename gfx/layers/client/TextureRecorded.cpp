#
include
"
TextureRecorded
.
h
"
#
include
"
mozilla
/
layers
/
CompositableForwarder
.
h
"
#
include
"
RecordedCanvasEventImpl
.
h
"
namespace
mozilla
{
namespace
layers
{
static
int64_t
sNextRecordedTextureId
=
0
;
RecordedTextureData
:
:
RecordedTextureData
(
already_AddRefed
<
CanvasChild
>
aCanvasChild
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
TextureType
aTextureType
)
:
mCanvasChild
(
aCanvasChild
)
mSize
(
aSize
)
mFormat
(
aFormat
)
{
mCanvasChild
-
>
EnsureRecorder
(
aSize
aFormat
aTextureType
)
;
}
RecordedTextureData
:
:
~
RecordedTextureData
(
)
{
mDT
=
nullptr
;
mCanvasChild
-
>
CleanupTexture
(
mTextureId
)
;
mCanvasChild
-
>
RecordEvent
(
RecordedTextureDestruction
(
mTextureId
mLastTxnType
mLastTxnId
)
)
;
}
void
RecordedTextureData
:
:
FillInfo
(
TextureData
:
:
Info
&
aInfo
)
const
{
aInfo
.
size
=
mSize
;
aInfo
.
format
=
mFormat
;
aInfo
.
supportsMoz2D
=
true
;
aInfo
.
hasSynchronization
=
true
;
}
void
RecordedTextureData
:
:
SetRemoteTextureOwnerId
(
RemoteTextureOwnerId
aRemoteTextureOwnerId
)
{
mRemoteTextureOwnerId
=
aRemoteTextureOwnerId
;
}
void
RecordedTextureData
:
:
InvalidateContents
(
)
{
mInvalidContents
=
true
;
}
bool
RecordedTextureData
:
:
Lock
(
OpenMode
aMode
)
{
if
(
!
mCanvasChild
-
>
EnsureBeginTransaction
(
)
)
{
return
false
;
}
if
(
!
mRemoteTextureOwnerId
.
IsValid
(
)
)
{
MOZ_ASSERT
(
false
)
;
return
false
;
}
if
(
aMode
&
OpenMode
:
:
OPEN_WRITE
)
{
mUsedRemoteTexture
=
false
;
}
bool
wasInvalidContents
=
mInvalidContents
;
mInvalidContents
=
false
;
if
(
!
mDT
)
{
mTextureId
=
sNextRecordedTextureId
+
+
;
mDT
=
mCanvasChild
-
>
CreateDrawTarget
(
mTextureId
mRemoteTextureOwnerId
mSize
mFormat
)
;
if
(
!
mDT
)
{
return
false
;
}
mLockedMode
=
aMode
;
return
true
;
}
mCanvasChild
-
>
RecordEvent
(
RecordedTextureLock
(
mTextureId
aMode
wasInvalidContents
)
)
;
mLockedMode
=
aMode
;
return
true
;
}
void
RecordedTextureData
:
:
Unlock
(
)
{
if
(
(
mLockedMode
=
=
OpenMode
:
:
OPEN_READ_WRITE
)
&
&
mCanvasChild
-
>
ShouldCacheDataSurface
(
)
)
{
mSnapshot
=
mDT
-
>
Snapshot
(
)
;
mDT
-
>
DetachAllSnapshots
(
)
;
mCanvasChild
-
>
RecordEvent
(
RecordedCacheDataSurface
(
mSnapshot
.
get
(
)
)
)
;
}
mCanvasChild
-
>
RecordEvent
(
RecordedTextureUnlock
(
mTextureId
)
)
;
mLockedMode
=
OpenMode
:
:
OPEN_NONE
;
}
already_AddRefed
<
gfx
:
:
DrawTarget
>
RecordedTextureData
:
:
BorrowDrawTarget
(
)
{
mSnapshot
=
nullptr
;
if
(
RefPtr
<
gfx
:
:
SourceSurface
>
wrapper
=
do_AddRef
(
mSnapshotWrapper
)
)
{
mCanvasChild
-
>
DetachSurface
(
wrapper
)
;
mSnapshotWrapper
=
nullptr
;
}
return
do_AddRef
(
mDT
)
;
}
void
RecordedTextureData
:
:
EndDraw
(
)
{
MOZ_ASSERT
(
mDT
-
>
hasOneRef
(
)
)
;
MOZ_ASSERT
(
mLockedMode
=
=
OpenMode
:
:
OPEN_READ_WRITE
)
;
if
(
mCanvasChild
-
>
ShouldCacheDataSurface
(
)
)
{
mSnapshot
=
mDT
-
>
Snapshot
(
)
;
mCanvasChild
-
>
RecordEvent
(
RecordedCacheDataSurface
(
mSnapshot
.
get
(
)
)
)
;
}
}
already_AddRefed
<
gfx
:
:
SourceSurface
>
RecordedTextureData
:
:
BorrowSnapshot
(
)
{
if
(
RefPtr
<
gfx
:
:
SourceSurface
>
wrapper
=
do_AddRef
(
mSnapshotWrapper
)
)
{
return
wrapper
.
forget
(
)
;
}
if
(
!
mDT
)
{
return
nullptr
;
}
RefPtr
<
gfx
:
:
SourceSurface
>
wrapper
=
mCanvasChild
-
>
WrapSurface
(
mSnapshot
?
mSnapshot
:
mDT
-
>
Snapshot
(
)
mTextureId
)
;
mSnapshotWrapper
=
wrapper
;
return
wrapper
.
forget
(
)
;
}
void
RecordedTextureData
:
:
ReturnSnapshot
(
already_AddRefed
<
gfx
:
:
SourceSurface
>
aSnapshot
)
{
RefPtr
<
gfx
:
:
SourceSurface
>
snapshot
=
aSnapshot
;
if
(
RefPtr
<
gfx
:
:
SourceSurface
>
wrapper
=
do_AddRef
(
mSnapshotWrapper
)
)
{
mCanvasChild
-
>
DetachSurface
(
wrapper
)
;
}
}
void
RecordedTextureData
:
:
Deallocate
(
LayersIPCChannel
*
aAllocator
)
{
}
bool
RecordedTextureData
:
:
Serialize
(
SurfaceDescriptor
&
aDescriptor
)
{
if
(
!
mRemoteTextureOwnerId
.
IsValid
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Missing
remote
texture
owner
id
!
"
)
;
return
false
;
}
if
(
!
mUsedRemoteTexture
)
{
mLastRemoteTextureId
=
RemoteTextureId
:
:
GetNext
(
)
;
mCanvasChild
-
>
RecordEvent
(
RecordedPresentTexture
(
mTextureId
mLastRemoteTextureId
)
)
;
mUsedRemoteTexture
=
true
;
}
else
if
(
!
mLastRemoteTextureId
.
IsValid
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Missing
remote
texture
id
!
"
)
;
return
false
;
}
aDescriptor
=
SurfaceDescriptorRemoteTexture
(
mLastRemoteTextureId
mRemoteTextureOwnerId
)
;
return
true
;
}
void
RecordedTextureData
:
:
UseCompositableForwarder
(
CompositableForwarder
*
aForwarder
)
{
mLastTxnType
=
(
RemoteTextureTxnType
)
aForwarder
-
>
GetFwdTransactionType
(
)
;
mLastTxnId
=
(
RemoteTextureTxnId
)
aForwarder
-
>
GetFwdTransactionId
(
)
;
}
void
RecordedTextureData
:
:
OnForwardedToHost
(
)
{
MOZ_CRASH
(
"
OnForwardedToHost
not
supported
!
"
)
;
}
TextureFlags
RecordedTextureData
:
:
GetTextureFlags
(
)
const
{
return
TextureFlags
:
:
WAIT_HOST_USAGE_END
;
}
bool
RecordedTextureData
:
:
RequiresRefresh
(
)
const
{
return
mCanvasChild
-
>
RequiresRefresh
(
mTextureId
)
;
}
}
}
