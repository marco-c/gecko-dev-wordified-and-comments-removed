#
ifndef
mozilla_gfx_layers_client_CompositableChild_h
#
define
mozilla_gfx_layers_client_CompositableChild_h
#
include
<
stdint
.
h
>
#
include
"
IPDLActor
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
layers
/
PCompositableChild
.
h
"
namespace
mozilla
{
namespace
layers
{
class
CompositableClient
;
class
AsyncCompositableChild
;
class
CompositableChild
:
public
PCompositableChild
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CompositableChild
)
static
PCompositableChild
*
CreateActor
(
)
;
static
void
DestroyActor
(
PCompositableChild
*
aChild
)
;
void
Init
(
CompositableClient
*
aCompositable
uint64_t
aAsyncID
)
;
virtual
void
RevokeCompositableClient
(
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
)
override
;
virtual
RefPtr
<
CompositableClient
>
GetCompositableClient
(
)
;
virtual
AsyncCompositableChild
*
AsAsyncCompositableChild
(
)
{
return
nullptr
;
}
uint64_t
GetAsyncID
(
)
const
{
return
mAsyncID
;
}
bool
IsConnected
(
)
const
;
bool
CanSend
(
)
const
{
return
mCanSend
;
}
protected
:
CompositableChild
(
)
;
virtual
~
CompositableChild
(
)
;
protected
:
CompositableClient
*
mCompositableClient
;
uint64_t
mAsyncID
;
bool
mCanSend
;
}
;
class
AsyncCompositableChild
final
:
public
CompositableChild
{
public
:
static
PCompositableChild
*
CreateActor
(
)
;
void
RevokeCompositableClient
(
)
override
;
RefPtr
<
CompositableClient
>
GetCompositableClient
(
)
override
;
void
ActorDestroy
(
ActorDestroyReason
)
override
;
AsyncCompositableChild
*
AsAsyncCompositableChild
(
)
override
{
return
this
;
}
protected
:
AsyncCompositableChild
(
)
;
~
AsyncCompositableChild
(
)
override
;
private
:
Mutex
mLock
;
}
;
}
}
#
endif
