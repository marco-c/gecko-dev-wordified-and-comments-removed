#
include
"
TextureClientSharedSurface
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
SharedSurface
.
h
"
using
namespace
mozilla
:
:
gl
;
namespace
mozilla
{
namespace
layers
{
SharedSurfaceTextureData
:
:
SharedSurfaceTextureData
(
UniquePtr
<
gl
:
:
SharedSurface
>
surf
)
:
mSurf
(
Move
(
surf
)
)
{
}
SharedSurfaceTextureData
:
:
~
SharedSurfaceTextureData
(
)
{
}
void
SharedSurfaceTextureData
:
:
Deallocate
(
LayersIPCChannel
*
)
{
}
void
SharedSurfaceTextureData
:
:
FillInfo
(
TextureData
:
:
Info
&
aInfo
)
const
{
aInfo
.
size
=
mSurf
-
>
mSize
;
aInfo
.
format
=
gfx
:
:
SurfaceFormat
:
:
UNKNOWN
;
aInfo
.
hasIntermediateBuffer
=
false
;
aInfo
.
hasSynchronization
=
false
;
aInfo
.
supportsMoz2D
=
false
;
aInfo
.
canExposeMappedData
=
false
;
}
bool
SharedSurfaceTextureData
:
:
Serialize
(
SurfaceDescriptor
&
aOutDescriptor
)
{
return
mSurf
-
>
ToSurfaceDescriptor
(
&
aOutDescriptor
)
;
}
SharedSurfaceTextureClient
:
:
SharedSurfaceTextureClient
(
SharedSurfaceTextureData
*
aData
TextureFlags
aFlags
LayersIPCChannel
*
aAllocator
)
:
TextureClient
(
aData
aFlags
aAllocator
)
{
mWorkaroundAnnoyingSharedSurfaceLifetimeIssues
=
true
;
}
already_AddRefed
<
SharedSurfaceTextureClient
>
SharedSurfaceTextureClient
:
:
Create
(
UniquePtr
<
gl
:
:
SharedSurface
>
surf
gl
:
:
SurfaceFactory
*
factory
LayersIPCChannel
*
aAllocator
TextureFlags
aFlags
)
{
if
(
!
surf
)
{
return
nullptr
;
}
TextureFlags
flags
=
aFlags
|
TextureFlags
:
:
RECYCLE
|
surf
-
>
GetTextureFlags
(
)
;
SharedSurfaceTextureData
*
data
=
new
SharedSurfaceTextureData
(
Move
(
surf
)
)
;
return
MakeAndAddRef
<
SharedSurfaceTextureClient
>
(
data
flags
aAllocator
)
;
}
SharedSurfaceTextureClient
:
:
~
SharedSurfaceTextureClient
(
)
{
TextureData
*
data
=
mData
;
mData
=
nullptr
;
Destroy
(
)
;
if
(
data
)
{
delete
data
;
}
}
}
}
