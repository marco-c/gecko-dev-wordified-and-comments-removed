#
include
"
TextureClientSharedSurface
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
SharedSurface
.
h
"
#
ifdef
MOZ_WIDGET_ANDROID
#
include
"
mozilla
/
layers
/
AndroidHardwareBuffer
.
h
"
#
endif
using
namespace
mozilla
:
:
gl
;
namespace
mozilla
{
namespace
layers
{
already_AddRefed
<
TextureClient
>
SharedSurfaceTextureData
:
:
CreateTextureClient
(
const
layers
:
:
SurfaceDescriptor
&
aDesc
const
gfx
:
:
SurfaceFormat
aFormat
gfx
:
:
IntSize
aSize
TextureFlags
aFlags
LayersIPCChannel
*
aAllocator
)
{
auto
data
=
MakeUnique
<
SharedSurfaceTextureData
>
(
aDesc
aFormat
aSize
)
;
return
TextureClient
:
:
CreateWithData
(
data
.
release
(
)
aFlags
aAllocator
)
;
}
SharedSurfaceTextureData
:
:
SharedSurfaceTextureData
(
const
SurfaceDescriptor
&
desc
const
gfx
:
:
SurfaceFormat
format
const
gfx
:
:
IntSize
size
)
:
mDesc
(
desc
)
mFormat
(
format
)
mSize
(
size
)
{
}
SharedSurfaceTextureData
:
:
~
SharedSurfaceTextureData
(
)
=
default
;
void
SharedSurfaceTextureData
:
:
Deallocate
(
LayersIPCChannel
*
)
{
}
void
SharedSurfaceTextureData
:
:
FillInfo
(
TextureData
:
:
Info
&
aInfo
)
const
{
aInfo
.
size
=
mSize
;
aInfo
.
format
=
mFormat
;
aInfo
.
hasSynchronization
=
false
;
aInfo
.
supportsMoz2D
=
false
;
aInfo
.
canExposeMappedData
=
false
;
}
bool
SharedSurfaceTextureData
:
:
Serialize
(
SurfaceDescriptor
&
aOutDescriptor
)
{
if
(
mDesc
.
type
(
)
!
=
SurfaceDescriptor
:
:
TSurfaceDescriptorAndroidHardwareBuffer
)
{
aOutDescriptor
=
mDesc
;
return
true
;
}
#
ifdef
MOZ_WIDGET_ANDROID
const
SurfaceDescriptorAndroidHardwareBuffer
&
desc
=
mDesc
.
get_SurfaceDescriptorAndroidHardwareBuffer
(
)
;
RefPtr
<
AndroidHardwareBuffer
>
buffer
=
AndroidHardwareBufferManager
:
:
Get
(
)
-
>
GetBuffer
(
desc
.
bufferId
(
)
)
;
if
(
!
buffer
)
{
return
false
;
}
int
fd
[
2
]
=
{
}
;
if
(
socketpair
(
AF_UNIX
SOCK_SEQPACKET
0
fd
)
!
=
0
)
{
return
false
;
}
UniqueFileHandle
readerFd
(
fd
[
0
]
)
;
UniqueFileHandle
writerFd
(
fd
[
1
]
)
;
int
ret
=
buffer
-
>
SendHandleToUnixSocket
(
writerFd
.
get
(
)
)
;
if
(
ret
<
0
)
{
return
false
;
}
aOutDescriptor
=
layers
:
:
SurfaceDescriptorAndroidHardwareBuffer
(
ipc
:
:
FileDescriptor
(
std
:
:
move
(
readerFd
)
)
buffer
-
>
mId
buffer
-
>
mSize
buffer
-
>
mFormat
)
;
return
true
;
#
else
MOZ_ASSERT_UNREACHABLE
(
"
unexpected
to
be
called
"
)
;
return
false
;
#
endif
}
TextureFlags
SharedSurfaceTextureData
:
:
GetTextureFlags
(
)
const
{
TextureFlags
flags
=
TextureFlags
:
:
NO_FLAGS
;
#
ifdef
MOZ_WIDGET_ANDROID
if
(
mDesc
.
type
(
)
=
=
SurfaceDescriptor
:
:
TSurfaceDescriptorAndroidHardwareBuffer
)
{
flags
|
=
TextureFlags
:
:
WAIT_HOST_USAGE_END
;
}
#
endif
return
flags
;
}
Maybe
<
uint64_t
>
SharedSurfaceTextureData
:
:
GetBufferId
(
)
const
{
#
ifdef
MOZ_WIDGET_ANDROID
if
(
mDesc
.
type
(
)
=
=
SurfaceDescriptor
:
:
TSurfaceDescriptorAndroidHardwareBuffer
)
{
const
SurfaceDescriptorAndroidHardwareBuffer
&
desc
=
mDesc
.
get_SurfaceDescriptorAndroidHardwareBuffer
(
)
;
return
Some
(
desc
.
bufferId
(
)
)
;
}
#
endif
return
Nothing
(
)
;
}
mozilla
:
:
ipc
:
:
FileDescriptor
SharedSurfaceTextureData
:
:
GetAcquireFence
(
)
{
#
ifdef
MOZ_WIDGET_ANDROID
if
(
mDesc
.
type
(
)
=
=
SurfaceDescriptor
:
:
TSurfaceDescriptorAndroidHardwareBuffer
)
{
const
SurfaceDescriptorAndroidHardwareBuffer
&
desc
=
mDesc
.
get_SurfaceDescriptorAndroidHardwareBuffer
(
)
;
RefPtr
<
AndroidHardwareBuffer
>
buffer
=
AndroidHardwareBufferManager
:
:
Get
(
)
-
>
GetBuffer
(
desc
.
bufferId
(
)
)
;
if
(
!
buffer
)
{
return
ipc
:
:
FileDescriptor
(
)
;
}
return
buffer
-
>
GetAcquireFence
(
)
;
}
#
endif
return
ipc
:
:
FileDescriptor
(
)
;
}
}
}
