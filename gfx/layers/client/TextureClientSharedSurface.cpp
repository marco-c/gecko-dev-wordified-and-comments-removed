#
include
"
TextureClientSharedSurface
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
SharedSurface
.
h
"
using
namespace
mozilla
:
:
gl
;
namespace
mozilla
{
namespace
layers
{
SharedSurfaceTextureData
:
:
SharedSurfaceTextureData
(
const
SurfaceDescriptor
&
desc
const
gfx
:
:
SurfaceFormat
format
const
gfx
:
:
IntSize
size
)
:
mDesc
(
desc
)
mFormat
(
format
)
mSize
(
size
)
{
}
SharedSurfaceTextureData
:
:
~
SharedSurfaceTextureData
(
)
=
default
;
void
SharedSurfaceTextureData
:
:
Deallocate
(
LayersIPCChannel
*
)
{
}
void
SharedSurfaceTextureData
:
:
FillInfo
(
TextureData
:
:
Info
&
aInfo
)
const
{
aInfo
.
size
=
mSize
;
aInfo
.
format
=
mFormat
;
aInfo
.
hasIntermediateBuffer
=
false
;
aInfo
.
hasSynchronization
=
false
;
aInfo
.
supportsMoz2D
=
false
;
aInfo
.
canExposeMappedData
=
false
;
}
bool
SharedSurfaceTextureData
:
:
Serialize
(
SurfaceDescriptor
&
aOutDescriptor
)
{
aOutDescriptor
=
mDesc
;
return
true
;
}
TextureFlags
SharedSurfaceTextureData
:
:
GetTextureFlags
(
)
const
{
TextureFlags
flags
=
TextureFlags
:
:
NO_FLAGS
;
#
ifdef
MOZ_WIDGET_ANDROID
if
(
mDesc
.
type
(
)
=
=
SurfaceDescriptor
:
:
TSurfaceDescriptorAndroidHardwareBuffer
)
{
flags
|
=
TextureFlags
:
:
WAIT_HOST_USAGE_END
;
}
#
endif
return
flags
;
}
Maybe
<
uint64_t
>
SharedSurfaceTextureData
:
:
GetBufferId
(
)
const
{
#
ifdef
MOZ_WIDGET_ANDROID
if
(
mDesc
.
type
(
)
=
=
SurfaceDescriptor
:
:
TSurfaceDescriptorAndroidHardwareBuffer
)
{
const
SurfaceDescriptorAndroidHardwareBuffer
&
desc
=
mDesc
.
get_SurfaceDescriptorAndroidHardwareBuffer
(
)
;
return
Some
(
desc
.
bufferId
(
)
)
;
}
#
endif
return
Nothing
(
)
;
}
mozilla
:
:
ipc
:
:
FileDescriptor
SharedSurfaceTextureData
:
:
GetAcquireFence
(
)
{
#
ifdef
MOZ_WIDGET_ANDROID
if
(
mDesc
.
type
(
)
=
=
SurfaceDescriptor
:
:
TSurfaceDescriptorAndroidHardwareBuffer
)
{
const
SurfaceDescriptorAndroidHardwareBuffer
&
desc
=
mDesc
.
get_SurfaceDescriptorAndroidHardwareBuffer
(
)
;
RefPtr
<
AndroidHardwareBuffer
>
buffer
=
AndroidHardwareBufferManager
:
:
Get
(
)
-
>
GetBuffer
(
desc
.
bufferId
(
)
)
;
if
(
!
buffer
)
{
return
ipc
:
:
FileDescriptor
(
)
;
}
return
buffer
-
>
GetAcquireFence
(
)
;
}
#
endif
return
ipc
:
:
FileDescriptor
(
)
;
}
}
}
