#
ifndef
GFX_CLIENTPAINTEDLAYER_H
#
define
GFX_CLIENTPAINTEDLAYER_H
#
include
"
ClientLayerManager
.
h
"
#
include
"
Layers
.
h
"
#
include
"
RotatedBuffer
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
layers
/
ContentClient
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
mozilla
/
layers
/
PLayerTransaction
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
DrawEventRecorderMemory
;
class
DrawTargetCapture
;
}
;
namespace
layers
{
class
CompositableClient
;
class
ShadowableLayer
;
class
SpecificLayerAttributes
;
class
ClientPaintedLayer
:
public
PaintedLayer
public
ClientLayer
{
public
:
typedef
ContentClient
:
:
PaintState
PaintState
;
typedef
ContentClient
:
:
ContentType
ContentType
;
explicit
ClientPaintedLayer
(
ClientLayerManager
*
aLayerManager
LayerManager
:
:
PaintedLayerCreationHint
aCreationHint
=
LayerManager
:
:
NONE
)
:
PaintedLayer
(
aLayerManager
static_cast
<
ClientLayer
*
>
(
this
)
aCreationHint
)
mContentClient
(
nullptr
)
{
MOZ_COUNT_CTOR
(
ClientPaintedLayer
)
;
}
protected
:
virtual
~
ClientPaintedLayer
(
)
{
if
(
mContentClient
)
{
mContentClient
-
>
OnDetach
(
)
;
mContentClient
=
nullptr
;
}
MOZ_COUNT_DTOR
(
ClientPaintedLayer
)
;
}
public
:
void
SetVisibleRegion
(
const
LayerIntRegion
&
aRegion
)
override
{
NS_ASSERTION
(
ClientManager
(
)
-
>
InConstruction
(
)
"
Can
only
set
properties
in
construction
phase
"
)
;
PaintedLayer
:
:
SetVisibleRegion
(
aRegion
)
;
}
void
InvalidateRegion
(
const
nsIntRegion
&
aRegion
)
override
{
NS_ASSERTION
(
ClientManager
(
)
-
>
InConstruction
(
)
"
Can
only
set
properties
in
construction
phase
"
)
;
mInvalidRegion
.
Add
(
aRegion
)
;
UpdateValidRegionAfterInvalidRegionChanged
(
)
;
}
void
RenderLayer
(
)
override
{
RenderLayerWithReadback
(
nullptr
)
;
}
void
RenderLayerWithReadback
(
ReadbackProcessor
*
aReadback
)
override
;
void
ClearCachedResources
(
)
override
{
if
(
mContentClient
)
{
mContentClient
-
>
Clear
(
)
;
}
ClearValidRegion
(
)
;
DestroyBackBuffer
(
)
;
}
void
HandleMemoryPressure
(
)
override
{
if
(
mContentClient
)
{
mContentClient
-
>
HandleMemoryPressure
(
)
;
}
}
void
FillSpecificAttributes
(
SpecificLayerAttributes
&
aAttrs
)
override
{
aAttrs
=
PaintedLayerAttributes
(
GetValidRegion
(
)
)
;
}
ClientLayerManager
*
ClientManager
(
)
{
return
static_cast
<
ClientLayerManager
*
>
(
mManager
)
;
}
Layer
*
AsLayer
(
)
override
{
return
this
;
}
ShadowableLayer
*
AsShadowableLayer
(
)
override
{
return
this
;
}
CompositableClient
*
GetCompositableClient
(
)
override
{
return
mContentClient
;
}
void
Disconnect
(
)
override
{
mContentClient
=
nullptr
;
}
protected
:
void
RecordThebes
(
)
;
bool
HasMaskLayers
(
)
;
bool
EnsureContentClient
(
)
;
uint32_t
GetPaintFlags
(
ReadbackProcessor
*
aReadback
)
;
void
UpdateContentClient
(
PaintState
&
aState
)
;
bool
UpdatePaintRegion
(
PaintState
&
aState
)
;
void
FinishPaintState
(
PaintState
&
aState
)
;
void
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
override
;
void
DestroyBackBuffer
(
)
{
mContentClient
=
nullptr
;
}
RefPtr
<
ContentClient
>
mContentClient
;
}
;
}
}
#
endif
