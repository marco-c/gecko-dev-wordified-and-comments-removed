#
include
"
ClientLayerManager
.
h
"
#
include
"
Layers
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRegion
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
gfx
;
class
ClientTextLayer
:
public
TextLayer
public
ClientLayer
{
public
:
explicit
ClientTextLayer
(
ClientLayerManager
*
aLayerManager
)
:
TextLayer
(
aLayerManager
static_cast
<
ClientLayer
*
>
(
this
)
)
mSwapped
(
false
)
{
MOZ_COUNT_CTOR
(
ClientTextLayer
)
;
}
protected
:
virtual
~
ClientTextLayer
(
)
{
MOZ_COUNT_DTOR
(
ClientTextLayer
)
;
}
public
:
virtual
void
SetVisibleRegion
(
const
LayerIntRegion
&
aRegion
)
{
NS_ASSERTION
(
ClientManager
(
)
-
>
InConstruction
(
)
"
Can
only
set
properties
in
construction
phase
"
)
;
TextLayer
:
:
SetVisibleRegion
(
aRegion
)
;
}
virtual
void
RenderLayer
(
)
{
RenderMaskLayers
(
this
)
;
}
virtual
void
FillSpecificAttributes
(
SpecificLayerAttributes
&
aAttrs
)
{
NS_ASSERTION
(
!
mSwapped
"
Trying
to
access
glyph
array
after
it
'
s
been
swapped
!
"
)
;
aAttrs
=
TextLayerAttributes
(
GetBounds
(
)
nsTArray
<
GlyphArray
>
(
)
uintptr_t
(
mFont
.
get
(
)
)
)
;
aAttrs
.
get_TextLayerAttributes
(
)
.
glyphs
(
)
.
SwapElements
(
mGlyphs
)
;
mSwapped
=
true
;
}
virtual
void
SetGlyphs
(
nsTArray
<
GlyphArray
>
&
&
aGlyphs
)
{
TextLayer
:
:
SetGlyphs
(
Move
(
aGlyphs
)
)
;
mSwapped
=
false
;
}
virtual
Layer
*
AsLayer
(
)
{
return
this
;
}
virtual
ShadowableLayer
*
AsShadowableLayer
(
)
{
return
this
;
}
protected
:
ClientLayerManager
*
ClientManager
(
)
{
return
static_cast
<
ClientLayerManager
*
>
(
mManager
)
;
}
bool
mSwapped
;
}
;
already_AddRefed
<
TextLayer
>
ClientLayerManager
:
:
CreateTextLayer
(
)
{
NS_ASSERTION
(
InConstruction
(
)
"
Only
allowed
in
construction
phase
"
)
;
RefPtr
<
ClientTextLayer
>
layer
=
new
ClientTextLayer
(
this
)
;
CREATE_SHADOW
(
Text
)
;
return
layer
.
forget
(
)
;
}
}
}
