#
include
"
ClientPaintedLayer
.
h
"
#
include
"
ClientTiledPaintedLayer
.
h
"
#
include
<
stdint
.
h
>
#
include
"
GeckoProfiler
.
h
"
#
include
"
client
/
ClientLayerManager
.
h
"
#
include
"
gfxContext
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
include
"
gfxEnv
.
h
"
#
include
"
gfxRect
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
DrawEventRecorder
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
PaintThread
.
h
"
#
include
"
ReadbackProcessor
.
h
"
#
include
"
RotatedBuffer
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
gfx
;
bool
ClientPaintedLayer
:
:
EnsureContentClient
(
)
{
if
(
!
mContentClient
)
{
mContentClient
=
ContentClient
:
:
CreateContentClient
(
ClientManager
(
)
-
>
AsShadowForwarder
(
)
)
;
if
(
!
mContentClient
)
{
return
false
;
}
mContentClient
-
>
Connect
(
)
;
ClientManager
(
)
-
>
AsShadowForwarder
(
)
-
>
Attach
(
mContentClient
this
)
;
MOZ_ASSERT
(
mContentClient
-
>
GetForwarder
(
)
)
;
}
return
true
;
}
void
ClientPaintedLayer
:
:
UpdateContentClient
(
PaintState
&
aState
)
{
Mutated
(
)
;
AddToValidRegion
(
aState
.
mRegionToDraw
)
;
ContentClientRemoteBuffer
*
contentClientRemote
=
static_cast
<
ContentClientRemoteBuffer
*
>
(
mContentClient
.
get
(
)
)
;
MOZ_ASSERT
(
contentClientRemote
-
>
GetIPCHandle
(
)
)
;
ClientManager
(
)
-
>
Hold
(
this
)
;
contentClientRemote
-
>
Updated
(
aState
.
mRegionToDraw
mVisibleRegion
.
ToUnknownRegion
(
)
)
;
}
bool
ClientPaintedLayer
:
:
UpdatePaintRegion
(
PaintState
&
aState
)
{
SubtractFromValidRegion
(
aState
.
mRegionToInvalidate
)
;
if
(
!
aState
.
mRegionToDraw
.
IsEmpty
(
)
&
&
!
ClientManager
(
)
-
>
GetPaintedLayerCallback
(
)
)
{
ClientManager
(
)
-
>
SetTransactionIncomplete
(
)
;
return
false
;
}
aState
.
mRegionToInvalidate
.
And
(
aState
.
mRegionToInvalidate
GetLocalVisibleRegion
(
)
.
ToUnknownRegion
(
)
)
;
return
true
;
}
void
ClientPaintedLayer
:
:
FinishPaintState
(
PaintState
&
aState
)
{
if
(
aState
.
mAsyncTask
&
&
!
aState
.
mAsyncTask
-
>
mCapture
-
>
IsEmpty
(
)
)
{
ClientManager
(
)
-
>
SetQueuedAsyncPaints
(
)
;
PaintThread
:
:
Get
(
)
-
>
QueuePaintTask
(
aState
.
mAsyncTask
)
;
}
}
uint32_t
ClientPaintedLayer
:
:
GetPaintFlags
(
ReadbackProcessor
*
aReadback
)
{
uint32_t
flags
=
ContentClient
:
:
PAINT_CAN_DRAW_ROTATED
;
#
ifndef
MOZ_IGNORE_PAINT_WILL_RESAMPLE
if
(
ClientManager
(
)
-
>
CompositorMightResample
(
)
)
{
flags
|
=
ContentClient
:
:
PAINT_WILL_RESAMPLE
;
}
if
(
!
(
flags
&
ContentClient
:
:
PAINT_WILL_RESAMPLE
)
)
{
if
(
MayResample
(
)
)
{
flags
|
=
ContentClient
:
:
PAINT_WILL_RESAMPLE
;
}
}
#
endif
if
(
(
!
aReadback
|
|
!
UsedForReadback
(
)
)
&
&
PaintThread
:
:
Get
(
)
)
{
flags
|
=
ContentClient
:
:
PAINT_ASYNC
;
}
return
flags
;
}
void
ClientPaintedLayer
:
:
RenderLayerWithReadback
(
ReadbackProcessor
*
aReadback
)
{
AUTO_PROFILER_LABEL
(
"
ClientPaintedLayer
:
:
RenderLayerWithReadback
"
GRAPHICS
)
;
NS_ASSERTION
(
ClientManager
(
)
-
>
InDrawing
(
)
"
Can
only
draw
in
drawing
phase
"
)
;
RenderMaskLayers
(
this
)
;
if
(
!
EnsureContentClient
(
)
)
{
return
;
}
nsTArray
<
ReadbackProcessor
:
:
Update
>
readbackUpdates
;
nsIntRegion
readbackRegion
;
if
(
aReadback
&
&
UsedForReadback
(
)
)
{
aReadback
-
>
GetPaintedLayerUpdates
(
this
&
readbackUpdates
)
;
}
uint32_t
flags
=
GetPaintFlags
(
aReadback
)
;
PaintState
state
=
mContentClient
-
>
BeginPaint
(
this
flags
)
;
if
(
!
UpdatePaintRegion
(
state
)
)
{
mContentClient
-
>
EndPaint
(
state
nullptr
)
;
FinishPaintState
(
state
)
;
return
;
}
bool
didUpdate
=
false
;
RotatedBuffer
:
:
DrawIterator
iter
;
while
(
DrawTarget
*
target
=
mContentClient
-
>
BorrowDrawTargetForPainting
(
state
&
iter
)
)
{
SetAntialiasingFlags
(
this
target
)
;
RefPtr
<
gfxContext
>
ctx
=
gfxContext
:
:
CreatePreservingTransformOrNull
(
target
)
;
MOZ_ASSERT
(
ctx
)
;
if
(
!
gfxEnv
:
:
SkipRasterization
(
)
)
{
ClientManager
(
)
-
>
GetPaintedLayerCallback
(
)
(
this
ctx
iter
.
mDrawRegion
iter
.
mDrawRegion
state
.
mClip
state
.
mRegionToInvalidate
ClientManager
(
)
-
>
GetPaintedLayerCallbackData
(
)
)
;
}
ctx
=
nullptr
;
mContentClient
-
>
ReturnDrawTarget
(
target
)
;
didUpdate
=
true
;
}
mContentClient
-
>
EndPaint
(
state
&
readbackUpdates
)
;
FinishPaintState
(
state
)
;
if
(
didUpdate
)
{
UpdateContentClient
(
state
)
;
}
}
already_AddRefed
<
PaintedLayer
>
ClientLayerManager
:
:
CreatePaintedLayer
(
)
{
return
CreatePaintedLayerWithHint
(
NONE
)
;
}
already_AddRefed
<
PaintedLayer
>
ClientLayerManager
:
:
CreatePaintedLayerWithHint
(
PaintedLayerCreationHint
aHint
)
{
NS_ASSERTION
(
InConstruction
(
)
"
Only
allowed
in
construction
phase
"
)
;
if
(
gfxPlatform
:
:
GetPlatform
(
)
-
>
UsesTiling
(
)
)
{
RefPtr
<
ClientTiledPaintedLayer
>
layer
=
new
ClientTiledPaintedLayer
(
this
aHint
)
;
CREATE_SHADOW
(
Painted
)
;
return
layer
.
forget
(
)
;
}
else
{
RefPtr
<
ClientPaintedLayer
>
layer
=
new
ClientPaintedLayer
(
this
aHint
)
;
CREATE_SHADOW
(
Painted
)
;
return
layer
.
forget
(
)
;
}
}
void
ClientPaintedLayer
:
:
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
{
PaintedLayer
:
:
PrintInfo
(
aStream
aPrefix
)
;
if
(
mContentClient
)
{
aStream
<
<
"
\
n
"
;
nsAutoCString
pfx
(
aPrefix
)
;
pfx
+
=
"
"
;
mContentClient
-
>
PrintInfo
(
aStream
pfx
.
get
(
)
)
;
}
}
}
}
