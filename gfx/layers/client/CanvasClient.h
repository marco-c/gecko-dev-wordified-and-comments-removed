#
ifndef
MOZILLA_GFX_CANVASCLIENT_H
#
define
MOZILLA_GFX_CANVASCLIENT_H
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
layers
/
CompositableClient
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
LayersSurfaces
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
PersistentBufferProvider
.
h
"
#
include
"
mozilla
/
MaybeOneOf
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
namespace
mozilla
{
namespace
layers
{
class
CompositableForwarder
;
class
CanvasClient
final
:
public
CompositableClient
{
int32_t
mFrameID
=
0
;
RefPtr
<
TextureClient
>
mFrontBuffer
;
public
:
CanvasClient
(
CompositableForwarder
*
aFwd
const
TextureFlags
flags
)
:
CompositableClient
(
aFwd
flags
)
{
}
virtual
~
CanvasClient
(
)
=
default
;
void
Clear
(
)
{
mFrontBuffer
=
nullptr
;
}
bool
AddTextureClient
(
TextureClient
*
aTexture
)
override
{
+
+
mFrameID
;
return
CompositableClient
:
:
AddTextureClient
(
aTexture
)
;
}
TextureInfo
GetTextureInfo
(
)
const
override
{
return
TextureInfo
(
CompositableType
:
:
IMAGE
ImageUsageType
:
:
Canvas
mTextureFlags
)
;
}
void
OnDetach
(
)
override
{
Clear
(
)
;
}
RefPtr
<
TextureClient
>
CreateTextureClientForCanvas
(
gfx
:
:
SurfaceFormat
gfx
:
:
IntSize
TextureFlags
)
;
void
UseTexture
(
TextureClient
*
)
;
}
;
}
}
#
endif
