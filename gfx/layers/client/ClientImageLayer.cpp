#
include
"
ClientLayerManager
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
ImageLayers
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
ImageClient
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRegion
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
gfx
;
class
ClientImageLayer
:
public
ImageLayer
public
ClientLayer
{
public
:
explicit
ClientImageLayer
(
ClientLayerManager
*
aLayerManager
)
:
ImageLayer
(
aLayerManager
static_cast
<
ClientLayer
*
>
(
this
)
)
mImageClientTypeContainer
(
CompositableType
:
:
UNKNOWN
)
{
MOZ_COUNT_CTOR
(
ClientImageLayer
)
;
}
protected
:
virtual
~
ClientImageLayer
(
)
{
DestroyBackBuffer
(
)
;
MOZ_COUNT_DTOR
(
ClientImageLayer
)
;
}
void
SetContainer
(
ImageContainer
*
aContainer
)
override
{
ImageLayer
:
:
SetContainer
(
aContainer
)
;
mImageClientTypeContainer
=
CompositableType
:
:
UNKNOWN
;
}
void
SetVisibleRegion
(
const
LayerIntRegion
&
aRegion
)
override
{
NS_ASSERTION
(
ClientManager
(
)
-
>
InConstruction
(
)
"
Can
only
set
properties
in
construction
phase
"
)
;
ImageLayer
:
:
SetVisibleRegion
(
aRegion
)
;
}
void
RenderLayer
(
)
override
;
void
ClearCachedResources
(
)
override
{
DestroyBackBuffer
(
)
;
}
bool
SupportsAsyncUpdate
(
)
override
{
if
(
GetImageClientType
(
)
=
=
CompositableType
:
:
IMAGE_BRIDGE
)
{
return
true
;
}
return
false
;
}
void
HandleMemoryPressure
(
)
override
{
if
(
mImageClient
)
{
mImageClient
-
>
HandleMemoryPressure
(
)
;
}
}
void
FillSpecificAttributes
(
SpecificLayerAttributes
&
aAttrs
)
override
{
aAttrs
=
ImageLayerAttributes
(
mSamplingFilter
mScaleToSize
mScaleMode
)
;
}
Layer
*
AsLayer
(
)
override
{
return
this
;
}
ShadowableLayer
*
AsShadowableLayer
(
)
override
{
return
this
;
}
void
Disconnect
(
)
override
{
DestroyBackBuffer
(
)
;
}
void
DestroyBackBuffer
(
)
{
if
(
mImageClient
)
{
mImageClient
-
>
SetLayer
(
nullptr
)
;
mImageClient
-
>
OnDetach
(
)
;
mImageClient
=
nullptr
;
}
}
CompositableClient
*
GetCompositableClient
(
)
override
{
return
mImageClient
;
}
protected
:
ClientLayerManager
*
ClientManager
(
)
{
return
static_cast
<
ClientLayerManager
*
>
(
mManager
)
;
}
CompositableType
GetImageClientType
(
)
{
if
(
mImageClientTypeContainer
!
=
CompositableType
:
:
UNKNOWN
)
{
return
mImageClientTypeContainer
;
}
if
(
mContainer
-
>
IsAsync
(
)
)
{
mImageClientTypeContainer
=
CompositableType
:
:
IMAGE_BRIDGE
;
return
mImageClientTypeContainer
;
}
AutoLockImage
autoLock
(
mContainer
)
;
mImageClientTypeContainer
=
autoLock
.
HasImage
(
)
?
CompositableType
:
:
IMAGE
:
CompositableType
:
:
UNKNOWN
;
return
mImageClientTypeContainer
;
}
RefPtr
<
ImageClient
>
mImageClient
;
CompositableType
mImageClientTypeContainer
;
}
;
void
ClientImageLayer
:
:
RenderLayer
(
)
{
RenderMaskLayers
(
this
)
;
if
(
!
mContainer
)
{
return
;
}
if
(
!
mImageClient
|
|
!
mImageClient
-
>
UpdateImage
(
mContainer
GetContentFlags
(
)
)
)
{
CompositableType
type
=
GetImageClientType
(
)
;
if
(
type
=
=
CompositableType
:
:
UNKNOWN
)
{
return
;
}
TextureFlags
flags
=
TextureFlags
:
:
DEFAULT
;
mImageClient
=
ImageClient
:
:
CreateImageClient
(
type
ClientManager
(
)
-
>
AsShadowForwarder
(
)
flags
)
;
if
(
!
mImageClient
)
{
return
;
}
mImageClient
-
>
SetLayer
(
this
)
;
if
(
HasShadow
(
)
&
&
!
mContainer
-
>
IsAsync
(
)
)
{
mImageClient
-
>
Connect
(
)
;
ClientManager
(
)
-
>
AsShadowForwarder
(
)
-
>
Attach
(
mImageClient
this
)
;
}
if
(
!
mImageClient
-
>
UpdateImage
(
mContainer
GetContentFlags
(
)
)
)
{
return
;
}
}
ClientManager
(
)
-
>
Hold
(
this
)
;
}
already_AddRefed
<
ImageLayer
>
ClientLayerManager
:
:
CreateImageLayer
(
)
{
NS_ASSERTION
(
InConstruction
(
)
"
Only
allowed
in
construction
phase
"
)
;
RefPtr
<
ClientImageLayer
>
layer
=
new
ClientImageLayer
(
this
)
;
CREATE_SHADOW
(
Image
)
;
return
layer
.
forget
(
)
;
}
}
}
