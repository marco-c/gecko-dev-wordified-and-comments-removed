#
include
"
ClientTiledPaintedLayer
.
h
"
#
include
"
FrameMetrics
.
h
"
#
include
"
Units
.
h
"
#
include
"
UnitTransforms
.
h
"
#
include
"
ClientLayerManager
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
gfxRect
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
StaticPrefs_layers
.
h
"
#
include
"
mozilla
/
StaticPrefs_layout
.
h
"
#
include
"
mozilla
/
gfx
/
BaseSize
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
LayerMetricsWrapper
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
layers
/
PaintThread
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
mozilla
/
layers
/
MultiTiledContentClient
.
h
"
#
include
"
mozilla
/
layers
/
SingleTiledContentClient
.
h
"
namespace
mozilla
{
namespace
layers
{
using
gfx
:
:
IntRect
;
using
gfx
:
:
IntSize
;
using
gfx
:
:
Rect
;
ClientTiledPaintedLayer
:
:
ClientTiledPaintedLayer
(
ClientLayerManager
*
const
aManager
ClientLayerManager
:
:
PaintedLayerCreationHint
aCreationHint
)
:
PaintedLayer
(
aManager
static_cast
<
ClientLayer
*
>
(
this
)
aCreationHint
)
mContentClient
(
)
mHaveSingleTiledContentClient
(
false
)
{
MOZ_COUNT_CTOR
(
ClientTiledPaintedLayer
)
;
mPaintData
.
mLastScrollOffset
=
ParentLayerPoint
(
0
0
)
;
mPaintData
.
mFirstPaint
=
true
;
}
ClientTiledPaintedLayer
:
:
~
ClientTiledPaintedLayer
(
)
{
MOZ_COUNT_DTOR
(
ClientTiledPaintedLayer
)
;
}
void
ClientTiledPaintedLayer
:
:
ClearCachedResources
(
)
{
if
(
mContentClient
)
{
mContentClient
-
>
ClearCachedResources
(
)
;
}
ClearValidRegion
(
)
;
mContentClient
=
nullptr
;
}
void
ClientTiledPaintedLayer
:
:
FillSpecificAttributes
(
SpecificLayerAttributes
&
aAttrs
)
{
aAttrs
=
PaintedLayerAttributes
(
GetValidRegion
(
)
)
;
}
static
Maybe
<
LayerRect
>
ApplyParentLayerToLayerTransform
(
const
ParentLayerToLayerMatrix4x4
&
aTransform
const
ParentLayerRect
&
aParentLayerRect
const
LayerRect
&
aClip
)
{
return
UntransformBy
(
aTransform
aParentLayerRect
aClip
)
;
}
static
LayerToParentLayerMatrix4x4
GetTransformToAncestorsParentLayer
(
Layer
*
aStart
const
LayerMetricsWrapper
&
aAncestor
)
{
LayerMetricsWrapper
root3dAncestor
=
aAncestor
;
while
(
root3dAncestor
.
Combines3DTransformWithAncestors
(
)
)
{
root3dAncestor
=
root3dAncestor
.
GetParent
(
)
;
}
gfx
:
:
Matrix4x4
transform
;
const
LayerMetricsWrapper
&
ancestorParent
=
root3dAncestor
.
GetParent
(
)
;
for
(
LayerMetricsWrapper
iter
(
aStart
LayerMetricsWrapper
:
:
StartAt
:
:
BOTTOM
)
;
ancestorParent
?
iter
!
=
ancestorParent
:
iter
.
IsValid
(
)
;
iter
=
iter
.
GetParent
(
)
)
{
transform
=
transform
*
iter
.
GetTransform
(
)
;
}
return
ViewAs
<
LayerToParentLayerMatrix4x4
>
(
transform
)
;
}
void
ClientTiledPaintedLayer
:
:
GetAncestorLayers
(
LayerMetricsWrapper
*
aOutScrollAncestor
LayerMetricsWrapper
*
aOutDisplayPortAncestor
bool
*
aOutHasTransformAnimation
)
{
LayerMetricsWrapper
scrollAncestor
;
LayerMetricsWrapper
displayPortAncestor
;
bool
hasTransformAnimation
=
false
;
for
(
LayerMetricsWrapper
ancestor
(
this
LayerMetricsWrapper
:
:
StartAt
:
:
BOTTOM
)
;
ancestor
;
ancestor
=
ancestor
.
GetParent
(
)
)
{
hasTransformAnimation
|
=
ancestor
.
HasTransformAnimation
(
)
;
const
FrameMetrics
&
metrics
=
ancestor
.
Metrics
(
)
;
if
(
!
scrollAncestor
&
&
metrics
.
GetScrollId
(
)
!
=
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
)
{
scrollAncestor
=
ancestor
;
}
if
(
!
metrics
.
GetDisplayPort
(
)
.
IsEmpty
(
)
)
{
displayPortAncestor
=
ancestor
;
break
;
}
}
if
(
aOutScrollAncestor
)
{
*
aOutScrollAncestor
=
scrollAncestor
;
}
if
(
aOutDisplayPortAncestor
)
{
*
aOutDisplayPortAncestor
=
displayPortAncestor
;
}
if
(
aOutHasTransformAnimation
)
{
*
aOutHasTransformAnimation
=
hasTransformAnimation
;
}
}
void
ClientTiledPaintedLayer
:
:
BeginPaint
(
)
{
mPaintData
.
ResetPaintData
(
)
;
if
(
!
GetBaseTransform
(
)
.
Is2D
(
)
)
{
return
;
}
LayerMetricsWrapper
scrollAncestor
;
LayerMetricsWrapper
displayPortAncestor
;
bool
hasTransformAnimation
;
GetAncestorLayers
(
&
scrollAncestor
&
displayPortAncestor
&
hasTransformAnimation
)
;
if
(
!
displayPortAncestor
|
|
!
scrollAncestor
)
{
#
if
defined
(
MOZ_WIDGET_ANDROID
)
NS_WARNING
(
"
Tiled
PaintedLayer
with
no
scrollable
container
ancestor
"
)
;
#
endif
return
;
}
TILING_LOG
(
"
TILING
%
p
:
Found
scrollAncestor
%
p
displayPortAncestor
%
p
transform
"
"
%
d
\
n
"
this
scrollAncestor
.
GetLayer
(
)
displayPortAncestor
.
GetLayer
(
)
hasTransformAnimation
)
;
const
FrameMetrics
&
scrollMetrics
=
scrollAncestor
.
Metrics
(
)
;
const
FrameMetrics
&
displayportMetrics
=
displayPortAncestor
.
Metrics
(
)
;
ParentLayerToLayerMatrix4x4
transformDisplayPortToLayer
=
GetTransformToAncestorsParentLayer
(
this
displayPortAncestor
)
.
Inverse
(
)
;
LayerRect
layerBounds
(
GetVisibleRegion
(
)
.
GetBounds
(
)
)
;
mPaintData
.
mHasTransformAnimation
=
hasTransformAnimation
;
if
(
!
mPaintData
.
mHasTransformAnimation
&
&
mContentClient
-
>
GetLowPrecisionTiledBuffer
(
)
)
{
ParentLayerRect
criticalDisplayPort
=
(
displayportMetrics
.
GetCriticalDisplayPort
(
)
*
displayportMetrics
.
GetZoom
(
)
)
+
displayportMetrics
.
GetCompositionBounds
(
)
.
TopLeft
(
)
;
Maybe
<
LayerRect
>
criticalDisplayPortTransformed
=
ApplyParentLayerToLayerTransform
(
transformDisplayPortToLayer
criticalDisplayPort
layerBounds
)
;
if
(
criticalDisplayPortTransformed
)
{
mPaintData
.
mCriticalDisplayPort
=
Some
(
RoundedToInt
(
*
criticalDisplayPortTransformed
)
)
;
}
else
{
mPaintData
.
mCriticalDisplayPort
=
Some
(
LayerIntRect
(
0
0
0
0
)
)
;
}
}
TILING_LOG
(
"
TILING
%
p
:
Critical
displayport
%
s
\
n
"
this
mPaintData
.
mCriticalDisplayPort
?
Stringify
(
*
mPaintData
.
mCriticalDisplayPort
)
.
c_str
(
)
:
"
not
set
"
)
;
mPaintData
.
mResolution
=
displayportMetrics
.
GetZoom
(
)
;
TILING_LOG
(
"
TILING
%
p
:
Resolution
%
s
\
n
"
this
Stringify
(
mPaintData
.
mResolution
)
.
c_str
(
)
)
;
mPaintData
.
mTransformToCompBounds
=
GetTransformToAncestorsParentLayer
(
this
scrollAncestor
)
;
ParentLayerToLayerMatrix4x4
transformToBounds
=
mPaintData
.
mTransformToCompBounds
.
Inverse
(
)
;
Maybe
<
LayerRect
>
compositionBoundsTransformed
=
ApplyParentLayerToLayerTransform
(
transformToBounds
scrollMetrics
.
GetCompositionBounds
(
)
layerBounds
)
;
if
(
compositionBoundsTransformed
)
{
mPaintData
.
mCompositionBounds
=
*
compositionBoundsTransformed
;
}
else
{
mPaintData
.
mCompositionBounds
.
SetEmpty
(
)
;
}
TILING_LOG
(
"
TILING
%
p
:
Composition
bounds
%
s
\
n
"
this
Stringify
(
mPaintData
.
mCompositionBounds
)
.
c_str
(
)
)
;
mPaintData
.
mScrollOffset
=
displayportMetrics
.
GetLayoutScrollOffset
(
)
*
displayportMetrics
.
GetZoom
(
)
;
TILING_LOG
(
"
TILING
%
p
:
Scroll
offset
%
s
\
n
"
this
Stringify
(
mPaintData
.
mScrollOffset
)
.
c_str
(
)
)
;
}
bool
ClientTiledPaintedLayer
:
:
IsScrollingOnCompositor
(
const
FrameMetrics
&
aParentMetrics
)
{
CompositorBridgeChild
*
compositor
=
nullptr
;
if
(
Manager
(
)
&
&
Manager
(
)
-
>
AsClientLayerManager
(
)
)
{
compositor
=
Manager
(
)
-
>
AsClientLayerManager
(
)
-
>
GetCompositorBridgeChild
(
)
;
}
if
(
!
compositor
)
{
return
false
;
}
FrameMetrics
compositorMetrics
;
if
(
!
compositor
-
>
LookupCompositorFrameMetrics
(
aParentMetrics
.
GetScrollId
(
)
compositorMetrics
)
)
{
return
false
;
}
float
COORDINATE_EPSILON
=
1
.
f
;
return
!
FuzzyEqualsAdditive
(
compositorMetrics
.
GetVisualScrollOffset
(
)
.
x
aParentMetrics
.
GetVisualScrollOffset
(
)
.
x
COORDINATE_EPSILON
)
|
|
!
FuzzyEqualsAdditive
(
compositorMetrics
.
GetVisualScrollOffset
(
)
.
y
aParentMetrics
.
GetVisualScrollOffset
(
)
.
y
COORDINATE_EPSILON
)
;
}
bool
ClientTiledPaintedLayer
:
:
UseProgressiveDraw
(
)
{
if
(
!
StaticPrefs
:
:
layers_progressive_paint
(
)
)
{
return
false
;
}
if
(
!
mContentClient
-
>
GetTiledBuffer
(
)
-
>
SupportsProgressiveUpdate
(
)
)
{
return
false
;
}
if
(
ClientManager
(
)
-
>
HasShadowTarget
(
)
)
{
return
false
;
}
if
(
GetIsFixedPosition
(
)
|
|
GetParent
(
)
-
>
GetIsFixedPosition
(
)
)
{
return
false
;
}
if
(
mPaintData
.
mHasTransformAnimation
)
{
return
false
;
}
if
(
ClientManager
(
)
-
>
AsyncPanZoomEnabled
(
)
)
{
LayerMetricsWrapper
scrollAncestor
;
GetAncestorLayers
(
&
scrollAncestor
nullptr
nullptr
)
;
MOZ_ASSERT
(
scrollAncestor
)
;
if
(
!
scrollAncestor
)
{
return
false
;
}
const
FrameMetrics
&
parentMetrics
=
scrollAncestor
.
Metrics
(
)
;
if
(
!
IsScrollingOnCompositor
(
parentMetrics
)
)
{
return
false
;
}
}
return
true
;
}
bool
ClientTiledPaintedLayer
:
:
RenderHighPrecision
(
const
nsIntRegion
&
aInvalidRegion
const
nsIntRegion
&
aVisibleRegion
LayerManager
:
:
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
)
{
if
(
mPaintData
.
mLowPrecisionPaintCount
!
=
0
)
{
return
false
;
}
if
(
!
aInvalidRegion
.
IsEmpty
(
)
&
&
UseProgressiveDraw
(
)
&
&
mContentClient
-
>
GetTiledBuffer
(
)
-
>
GetFrameResolution
(
)
=
=
mPaintData
.
mResolution
)
{
nsIntRegion
oldValidRegion
=
mContentClient
-
>
GetTiledBuffer
(
)
-
>
GetValidRegion
(
)
;
oldValidRegion
.
And
(
oldValidRegion
aVisibleRegion
)
;
if
(
mPaintData
.
mCriticalDisplayPort
)
{
oldValidRegion
.
And
(
oldValidRegion
mPaintData
.
mCriticalDisplayPort
-
>
ToUnknownRect
(
)
)
;
}
TILING_LOG
(
"
TILING
%
p
:
Progressive
update
with
old
valid
region
%
s
\
n
"
this
Stringify
(
oldValidRegion
)
.
c_str
(
)
)
;
nsIntRegion
drawnRegion
;
bool
updatedBuffer
=
mContentClient
-
>
GetTiledBuffer
(
)
-
>
ProgressiveUpdate
(
GetValidRegion
(
)
aInvalidRegion
oldValidRegion
drawnRegion
&
mPaintData
aCallback
aCallbackData
)
;
AddToValidRegion
(
drawnRegion
)
;
return
updatedBuffer
;
}
nsIntRegion
validRegion
=
aVisibleRegion
;
if
(
mPaintData
.
mCriticalDisplayPort
)
{
validRegion
.
AndWith
(
mPaintData
.
mCriticalDisplayPort
-
>
ToUnknownRect
(
)
)
;
}
SetValidRegion
(
validRegion
)
;
TILING_LOG
(
"
TILING
%
p
:
Non
-
progressive
paint
invalid
region
%
s
\
n
"
this
Stringify
(
aInvalidRegion
)
.
c_str
(
)
)
;
TILING_LOG
(
"
TILING
%
p
:
Non
-
progressive
paint
new
valid
region
%
s
\
n
"
this
Stringify
(
GetValidRegion
(
)
)
.
c_str
(
)
)
;
TilePaintFlags
flags
=
PaintThread
:
:
Get
(
)
?
TilePaintFlags
:
:
Async
:
TilePaintFlags
:
:
None
;
mContentClient
-
>
GetTiledBuffer
(
)
-
>
SetFrameResolution
(
mPaintData
.
mResolution
)
;
mContentClient
-
>
GetTiledBuffer
(
)
-
>
PaintThebes
(
GetValidRegion
(
)
aInvalidRegion
aInvalidRegion
aCallback
aCallbackData
flags
)
;
mPaintData
.
mPaintFinished
=
true
;
return
true
;
}
bool
ClientTiledPaintedLayer
:
:
RenderLowPrecision
(
const
nsIntRegion
&
aInvalidRegion
const
nsIntRegion
&
aVisibleRegion
LayerManager
:
:
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
)
{
nsIntRegion
invalidRegion
=
aInvalidRegion
;
if
(
!
mPaintData
.
mCriticalDisplayPort
|
|
!
nsIntRegion
(
mPaintData
.
mCriticalDisplayPort
-
>
ToUnknownRect
(
)
)
.
Contains
(
aVisibleRegion
)
)
{
nsIntRegion
oldValidRegion
=
mContentClient
-
>
GetLowPrecisionTiledBuffer
(
)
-
>
GetValidRegion
(
)
;
oldValidRegion
.
And
(
oldValidRegion
aVisibleRegion
)
;
bool
updatedBuffer
=
false
;
if
(
mContentClient
-
>
GetLowPrecisionTiledBuffer
(
)
-
>
GetFrameResolution
(
)
!
=
mPaintData
.
mResolution
|
|
mContentClient
-
>
GetLowPrecisionTiledBuffer
(
)
-
>
HasFormatChanged
(
)
)
{
if
(
!
mLowPrecisionValidRegion
.
IsEmpty
(
)
)
{
updatedBuffer
=
true
;
}
oldValidRegion
.
SetEmpty
(
)
;
mLowPrecisionValidRegion
.
SetEmpty
(
)
;
mContentClient
-
>
GetLowPrecisionTiledBuffer
(
)
-
>
ResetPaintedAndValidState
(
)
;
mContentClient
-
>
GetLowPrecisionTiledBuffer
(
)
-
>
SetFrameResolution
(
mPaintData
.
mResolution
)
;
invalidRegion
=
aVisibleRegion
;
}
if
(
mPaintData
.
mLowPrecisionPaintCount
=
=
1
)
{
mLowPrecisionValidRegion
.
And
(
mLowPrecisionValidRegion
aVisibleRegion
)
;
}
mPaintData
.
mLowPrecisionPaintCount
+
+
;
invalidRegion
.
SubOut
(
GetValidRegion
(
)
)
;
TILING_LOG
(
"
TILING
%
p
:
Progressive
paint
:
low
-
precision
invalid
region
is
%
s
\
n
"
this
Stringify
(
invalidRegion
)
.
c_str
(
)
)
;
TILING_LOG
(
"
TILING
%
p
:
Progressive
paint
:
low
-
precision
old
valid
region
is
%
s
\
n
"
this
Stringify
(
oldValidRegion
)
.
c_str
(
)
)
;
if
(
!
invalidRegion
.
IsEmpty
(
)
)
{
nsIntRegion
drawnRegion
;
updatedBuffer
=
mContentClient
-
>
GetLowPrecisionTiledBuffer
(
)
-
>
ProgressiveUpdate
(
mLowPrecisionValidRegion
invalidRegion
oldValidRegion
drawnRegion
&
mPaintData
aCallback
aCallbackData
)
;
mLowPrecisionValidRegion
.
OrWith
(
drawnRegion
)
;
}
TILING_LOG
(
"
TILING
%
p
:
Progressive
paint
:
low
-
precision
new
valid
region
is
%
s
\
n
"
this
Stringify
(
mLowPrecisionValidRegion
)
.
c_str
(
)
)
;
return
updatedBuffer
;
}
if
(
!
mLowPrecisionValidRegion
.
IsEmpty
(
)
)
{
TILING_LOG
(
"
TILING
%
p
:
Clearing
low
-
precision
buffer
\
n
"
this
)
;
mLowPrecisionValidRegion
.
SetEmpty
(
)
;
mContentClient
-
>
GetLowPrecisionTiledBuffer
(
)
-
>
ResetPaintedAndValidState
(
)
;
return
true
;
}
return
false
;
}
void
ClientTiledPaintedLayer
:
:
EndPaint
(
)
{
mPaintData
.
mLastScrollOffset
=
mPaintData
.
mScrollOffset
;
mPaintData
.
mPaintFinished
=
true
;
mPaintData
.
mFirstPaint
=
false
;
TILING_LOG
(
"
TILING
%
p
:
Paint
finished
\
n
"
this
)
;
}
void
ClientTiledPaintedLayer
:
:
RenderLayer
(
)
{
if
(
!
ClientManager
(
)
-
>
IsRepeatTransaction
(
)
)
{
RenderMaskLayers
(
this
)
;
}
LayerManager
:
:
DrawPaintedLayerCallback
callback
=
ClientManager
(
)
-
>
GetPaintedLayerCallback
(
)
;
void
*
data
=
ClientManager
(
)
-
>
GetPaintedLayerCallbackData
(
)
;
IntSize
layerSize
=
mVisibleRegion
.
GetBounds
(
)
.
ToUnknownRect
(
)
.
Size
(
)
;
IntSize
tileSize
=
gfx
:
:
gfxVars
:
:
TileSize
(
)
;
bool
isHalfTileWidthOrHeight
=
layerSize
.
width
<
=
tileSize
.
width
/
2
|
|
layerSize
.
height
<
=
tileSize
.
height
/
2
;
bool
wantSingleTiledContentClient
=
(
mCreationHint
=
=
LayerManager
:
:
NONE
|
|
layerSize
<
=
tileSize
|
|
isHalfTileWidthOrHeight
)
&
&
SingleTiledContentClient
:
:
ClientSupportsLayerSize
(
layerSize
ClientManager
(
)
)
&
&
StaticPrefs
:
:
layers_single_tile_enabled
(
)
;
if
(
mContentClient
&
&
mHaveSingleTiledContentClient
&
&
!
wantSingleTiledContentClient
)
{
mContentClient
=
nullptr
;
ClearValidRegion
(
)
;
}
if
(
!
mContentClient
)
{
if
(
wantSingleTiledContentClient
)
{
mContentClient
=
new
SingleTiledContentClient
(
*
this
ClientManager
(
)
)
;
mHaveSingleTiledContentClient
=
true
;
}
else
{
mContentClient
=
new
MultiTiledContentClient
(
*
this
ClientManager
(
)
)
;
mHaveSingleTiledContentClient
=
false
;
}
mContentClient
-
>
Connect
(
)
;
ClientManager
(
)
-
>
AsShadowForwarder
(
)
-
>
Attach
(
mContentClient
this
)
;
MOZ_ASSERT
(
mContentClient
-
>
GetForwarder
(
)
)
;
}
if
(
mContentClient
-
>
GetTiledBuffer
(
)
-
>
HasFormatChanged
(
)
)
{
ClearValidRegion
(
)
;
mContentClient
-
>
GetTiledBuffer
(
)
-
>
ResetPaintedAndValidState
(
)
;
}
TILING_LOG
(
"
TILING
%
p
:
Initial
visible
region
%
s
\
n
"
this
Stringify
(
mVisibleRegion
)
.
c_str
(
)
)
;
TILING_LOG
(
"
TILING
%
p
:
Initial
valid
region
%
s
\
n
"
this
Stringify
(
GetValidRegion
(
)
)
.
c_str
(
)
)
;
TILING_LOG
(
"
TILING
%
p
:
Initial
low
-
precision
valid
region
%
s
\
n
"
this
Stringify
(
mLowPrecisionValidRegion
)
.
c_str
(
)
)
;
nsIntRegion
neededRegion
=
mVisibleRegion
.
ToUnknownRegion
(
)
;
#
ifndef
MOZ_IGNORE_PAINT_WILL_RESAMPLE
if
(
MayResample
(
)
)
{
IntRect
bounds
=
neededRegion
.
GetBounds
(
)
;
IntRect
wholeTiles
=
bounds
;
wholeTiles
.
InflateToMultiple
(
gfx
:
:
gfxVars
:
:
TileSize
(
)
)
;
IntRect
padded
=
bounds
;
padded
.
Inflate
(
1
)
;
padded
.
IntersectRect
(
padded
wholeTiles
)
;
neededRegion
=
padded
;
}
#
endif
nsIntRegion
invalidRegion
;
invalidRegion
.
Sub
(
neededRegion
GetValidRegion
(
)
)
;
if
(
invalidRegion
.
IsEmpty
(
)
)
{
EndPaint
(
)
;
return
;
}
if
(
!
callback
)
{
ClientManager
(
)
-
>
SetTransactionIncomplete
(
)
;
return
;
}
if
(
!
ClientManager
(
)
-
>
IsRepeatTransaction
(
)
)
{
BeginPaint
(
)
;
if
(
mPaintData
.
mPaintFinished
)
{
return
;
}
nsIntRegion
validRegion
;
validRegion
.
And
(
GetValidRegion
(
)
neededRegion
)
;
if
(
mPaintData
.
mCriticalDisplayPort
)
{
validRegion
.
AndWith
(
mPaintData
.
mCriticalDisplayPort
-
>
ToUnknownRect
(
)
)
;
invalidRegion
.
And
(
invalidRegion
mPaintData
.
mCriticalDisplayPort
-
>
ToUnknownRect
(
)
)
;
}
SetValidRegion
(
validRegion
)
;
TILING_LOG
(
"
TILING
%
p
:
First
-
transaction
valid
region
%
s
\
n
"
this
Stringify
(
validRegion
)
.
c_str
(
)
)
;
TILING_LOG
(
"
TILING
%
p
:
First
-
transaction
invalid
region
%
s
\
n
"
this
Stringify
(
invalidRegion
)
.
c_str
(
)
)
;
}
else
{
if
(
mPaintData
.
mCriticalDisplayPort
)
{
invalidRegion
.
And
(
invalidRegion
mPaintData
.
mCriticalDisplayPort
-
>
ToUnknownRect
(
)
)
;
}
TILING_LOG
(
"
TILING
%
p
:
Repeat
-
transaction
invalid
region
%
s
\
n
"
this
Stringify
(
invalidRegion
)
.
c_str
(
)
)
;
}
nsIntRegion
lowPrecisionInvalidRegion
;
if
(
mContentClient
-
>
GetLowPrecisionTiledBuffer
(
)
)
{
lowPrecisionInvalidRegion
.
Sub
(
neededRegion
mLowPrecisionValidRegion
)
;
lowPrecisionInvalidRegion
.
Sub
(
lowPrecisionInvalidRegion
GetValidRegion
(
)
)
;
}
TILING_LOG
(
"
TILING
%
p
:
Low
-
precision
invalid
region
%
s
\
n
"
this
Stringify
(
lowPrecisionInvalidRegion
)
.
c_str
(
)
)
;
bool
updatedHighPrecision
=
RenderHighPrecision
(
invalidRegion
neededRegion
callback
data
)
;
if
(
updatedHighPrecision
)
{
ClientManager
(
)
-
>
Hold
(
this
)
;
mContentClient
-
>
UpdatedBuffer
(
TiledContentClient
:
:
TILED_BUFFER
)
;
if
(
!
mPaintData
.
mPaintFinished
)
{
ClientManager
(
)
-
>
SetRepeatTransaction
(
)
;
return
;
}
}
if
(
lowPrecisionInvalidRegion
.
IsEmpty
(
)
)
{
EndPaint
(
)
;
return
;
}
if
(
updatedHighPrecision
)
{
TILING_LOG
(
"
TILING
%
p
:
Scheduling
repeat
transaction
for
low
-
precision
painting
\
n
"
this
)
;
ClientManager
(
)
-
>
SetRepeatTransaction
(
)
;
mPaintData
.
mLowPrecisionPaintCount
=
1
;
mPaintData
.
mPaintFinished
=
false
;
return
;
}
bool
updatedLowPrecision
=
RenderLowPrecision
(
lowPrecisionInvalidRegion
neededRegion
callback
data
)
;
if
(
updatedLowPrecision
)
{
ClientManager
(
)
-
>
Hold
(
this
)
;
mContentClient
-
>
UpdatedBuffer
(
TiledContentClient
:
:
LOW_PRECISION_TILED_BUFFER
)
;
if
(
!
mPaintData
.
mPaintFinished
)
{
ClientManager
(
)
-
>
SetRepeatTransaction
(
)
;
return
;
}
}
EndPaint
(
)
;
}
bool
ClientTiledPaintedLayer
:
:
IsOptimizedFor
(
LayerManager
:
:
PaintedLayerCreationHint
aHint
)
{
return
aHint
=
=
GetCreationHint
(
)
;
}
void
ClientTiledPaintedLayer
:
:
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
{
PaintedLayer
:
:
PrintInfo
(
aStream
aPrefix
)
;
if
(
mContentClient
)
{
aStream
<
<
"
\
n
"
;
nsAutoCString
pfx
(
aPrefix
)
;
pfx
+
=
"
"
;
mContentClient
-
>
PrintInfo
(
aStream
pfx
.
get
(
)
)
;
}
}
}
}
