#
include
"
CompositableChild
.
h
"
#
include
"
CompositableClient
.
h
"
namespace
mozilla
{
namespace
layers
{
PCompositableChild
*
CompositableChild
:
:
CreateActor
(
)
{
CompositableChild
*
child
=
new
CompositableChild
(
)
;
child
-
>
AddRef
(
)
;
return
child
;
}
void
CompositableChild
:
:
DestroyActor
(
PCompositableChild
*
aChild
)
{
static_cast
<
CompositableChild
*
>
(
aChild
)
-
>
Release
(
)
;
}
CompositableChild
:
:
CompositableChild
(
)
:
mCompositableClient
(
nullptr
)
mAsyncID
(
0
)
mCanSend
(
true
)
{
}
CompositableChild
:
:
~
CompositableChild
(
)
{
}
bool
CompositableChild
:
:
IsConnected
(
)
const
{
return
mCompositableClient
&
&
mCanSend
;
}
void
CompositableChild
:
:
Init
(
CompositableClient
*
aCompositable
uint64_t
aAsyncID
)
{
mCompositableClient
=
aCompositable
;
mAsyncID
=
aAsyncID
;
}
void
CompositableChild
:
:
RevokeCompositableClient
(
)
{
mCompositableClient
=
nullptr
;
}
RefPtr
<
CompositableClient
>
CompositableChild
:
:
GetCompositableClient
(
)
{
return
mCompositableClient
;
}
void
CompositableChild
:
:
ActorDestroy
(
ActorDestroyReason
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mCanSend
=
false
;
if
(
mCompositableClient
)
{
mCompositableClient
-
>
mCompositableChild
=
nullptr
;
mCompositableClient
=
nullptr
;
}
}
PCompositableChild
*
AsyncCompositableChild
:
:
CreateActor
(
)
{
AsyncCompositableChild
*
child
=
new
AsyncCompositableChild
(
)
;
child
-
>
AddRef
(
)
;
return
child
;
}
AsyncCompositableChild
:
:
AsyncCompositableChild
(
)
:
mLock
(
"
AsyncCompositableChild
.
mLock
"
)
{
}
AsyncCompositableChild
:
:
~
AsyncCompositableChild
(
)
{
}
void
AsyncCompositableChild
:
:
ActorDestroy
(
ActorDestroyReason
)
{
mCanSend
=
false
;
RevokeCompositableClient
(
)
;
}
void
AsyncCompositableChild
:
:
RevokeCompositableClient
(
)
{
MutexAutoLock
lock
(
mLock
)
;
mCompositableClient
=
nullptr
;
}
RefPtr
<
CompositableClient
>
AsyncCompositableChild
:
:
GetCompositableClient
(
)
{
MutexAutoLock
lock
(
mLock
)
;
return
CompositableChild
:
:
GetCompositableClient
(
)
;
}
}
}
