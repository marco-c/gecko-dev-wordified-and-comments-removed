#
include
"
ClientCanvasRenderer
.
h
"
#
include
"
ClientCanvasLayer
.
h
"
namespace
mozilla
{
namespace
layers
{
CompositableForwarder
*
ClientCanvasRenderer
:
:
GetForwarder
(
)
{
return
mLayer
-
>
Manager
(
)
-
>
AsShadowForwarder
(
)
;
}
bool
ClientCanvasRenderer
:
:
CreateCompositable
(
)
{
if
(
!
mCanvasClient
)
{
TextureFlags
flags
=
TextureFlags
:
:
DEFAULT
;
if
(
mOriginPos
=
=
gl
:
:
OriginPos
:
:
BottomLeft
)
{
flags
|
=
TextureFlags
:
:
ORIGIN_BOTTOM_LEFT
;
}
if
(
!
mIsAlphaPremultiplied
)
{
flags
|
=
TextureFlags
:
:
NON_PREMULTIPLIED
;
}
mCanvasClient
=
CanvasClient
:
:
CreateCanvasClient
(
GetCanvasClientType
(
)
GetForwarder
(
)
flags
)
;
if
(
!
mCanvasClient
)
{
return
false
;
}
if
(
mLayer
-
>
HasShadow
(
)
)
{
if
(
mAsyncRenderer
)
{
static_cast
<
CanvasClientBridge
*
>
(
mCanvasClient
.
get
(
)
)
-
>
SetLayer
(
mLayer
)
;
}
else
{
mCanvasClient
-
>
Connect
(
)
;
GetForwarder
(
)
-
>
AsLayerForwarder
(
)
-
>
Attach
(
mCanvasClient
mLayer
)
;
}
}
}
return
true
;
}
}
}
