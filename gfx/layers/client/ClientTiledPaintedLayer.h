#
ifndef
GFX_CLIENTTILEDPAINTEDLAYER_H
#
define
GFX_CLIENTTILEDPAINTEDLAYER_H
#
include
"
ClientLayerManager
.
h
"
#
include
"
Layers
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
layers
/
TiledContentClient
.
h
"
#
include
"
nsRegion
.
h
"
namespace
mozilla
{
namespace
layers
{
class
ShadowableLayer
;
class
SpecificLayerAttributes
;
class
ClientTiledPaintedLayer
:
public
PaintedLayer
public
ClientLayer
{
typedef
PaintedLayer
Base
;
public
:
explicit
ClientTiledPaintedLayer
(
ClientLayerManager
*
const
aManager
ClientLayerManager
:
:
PaintedLayerCreationHint
aCreationHint
=
LayerManager
:
:
NONE
)
;
protected
:
virtual
~
ClientTiledPaintedLayer
(
)
;
void
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
override
;
public
:
const
char
*
Name
(
)
const
override
{
return
"
TiledPaintedLayer
"
;
}
Layer
*
AsLayer
(
)
override
{
return
this
;
}
void
InvalidateRegion
(
const
nsIntRegion
&
aRegion
)
override
{
mInvalidRegion
.
Add
(
aRegion
)
;
UpdateValidRegionAfterInvalidRegionChanged
(
)
;
if
(
!
mLowPrecisionValidRegion
.
IsEmpty
(
)
)
{
mLowPrecisionValidRegion
.
SubOut
(
mInvalidRegion
.
GetRegion
(
)
)
;
}
}
void
FillSpecificAttributes
(
SpecificLayerAttributes
&
aAttrs
)
override
;
ShadowableLayer
*
AsShadowableLayer
(
)
override
{
return
this
;
}
void
RenderLayer
(
)
override
;
void
ClearCachedResources
(
)
override
;
void
HandleMemoryPressure
(
)
override
{
if
(
mContentClient
)
{
mContentClient
-
>
HandleMemoryPressure
(
)
;
}
}
void
GetAncestorLayers
(
LayerMetricsWrapper
*
aOutScrollAncestor
LayerMetricsWrapper
*
aOutDisplayPortAncestor
bool
*
aOutHasTransformAnimation
)
;
bool
IsOptimizedFor
(
LayerManager
:
:
PaintedLayerCreationHint
aCreationHint
)
override
;
private
:
ClientLayerManager
*
ClientManager
(
)
{
return
static_cast
<
ClientLayerManager
*
>
(
mManager
)
;
}
void
BeginPaint
(
)
;
bool
IsScrollingOnCompositor
(
const
FrameMetrics
&
aParentMetrics
)
;
bool
UseProgressiveDraw
(
)
;
bool
RenderHighPrecision
(
const
nsIntRegion
&
aInvalidRegion
const
nsIntRegion
&
aVisibleRegion
LayerManager
:
:
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
)
;
bool
RenderLowPrecision
(
const
nsIntRegion
&
aInvalidRegion
const
nsIntRegion
&
aVisibleRegion
LayerManager
:
:
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
)
;
void
EndPaint
(
)
;
RefPtr
<
TiledContentClient
>
mContentClient
;
bool
mHaveSingleTiledContentClient
;
nsIntRegion
mLowPrecisionValidRegion
;
BasicTiledLayerPaintData
mPaintData
;
}
;
}
}
#
endif
