#
ifndef
GFX_CLIENTCANVASLAYER_H
#
define
GFX_CLIENTCANVASLAYER_H
#
include
"
ClientCanvasRenderer
.
h
"
#
include
"
ClientLayerManager
.
h
"
#
include
"
Layers
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
layers
/
CanvasClient
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
namespace
layers
{
class
CompositableClient
;
class
ShadowableLayer
;
class
ClientCanvasLayer
:
public
CanvasLayer
public
ClientLayer
{
public
:
explicit
ClientCanvasLayer
(
ClientLayerManager
*
aLayerManager
)
:
CanvasLayer
(
aLayerManager
static_cast
<
ClientLayer
*
>
(
this
)
)
{
MOZ_COUNT_CTOR
(
ClientCanvasLayer
)
;
}
RefPtr
<
CanvasRenderer
>
CreateCanvasRendererInternal
(
)
override
;
protected
:
virtual
~
ClientCanvasLayer
(
)
;
public
:
void
SetVisibleRegion
(
const
LayerIntRegion
&
aRegion
)
override
{
NS_ASSERTION
(
ClientManager
(
)
-
>
InConstruction
(
)
"
Can
only
set
properties
in
construction
phase
"
)
;
CanvasLayer
:
:
SetVisibleRegion
(
aRegion
)
;
}
void
RenderLayer
(
)
override
;
void
ClearCachedResources
(
)
override
{
mCanvasRenderer
-
>
ClearCachedResources
(
)
;
}
void
HandleMemoryPressure
(
)
override
{
mCanvasRenderer
-
>
ClearCachedResources
(
)
;
}
void
FillSpecificAttributes
(
SpecificLayerAttributes
&
aAttrs
)
override
{
aAttrs
=
CanvasLayerAttributes
(
mSamplingFilter
mBounds
)
;
}
Layer
*
AsLayer
(
)
override
{
return
this
;
}
ShadowableLayer
*
AsShadowableLayer
(
)
override
{
return
this
;
}
void
Disconnect
(
)
override
{
mCanvasRenderer
-
>
DisconnectClient
(
)
;
}
CompositableClient
*
GetCompositableClient
(
)
override
{
ClientCanvasRenderer
*
canvasRenderer
=
mCanvasRenderer
-
>
AsClientCanvasRenderer
(
)
;
MOZ_ASSERT
(
canvasRenderer
)
;
return
canvasRenderer
-
>
GetCanvasClient
(
)
;
}
protected
:
ClientLayerManager
*
ClientManager
(
)
{
return
static_cast
<
ClientLayerManager
*
>
(
mManager
)
;
}
}
;
}
}
#
endif
