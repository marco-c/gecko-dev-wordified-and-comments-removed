#
ifndef
MOZILLA_GFX_TEXTURECLIENT_RECYCLE_ALLOCATOR_H
#
define
MOZILLA_GFX_TEXTURECLIENT_RECYCLE_ALLOCATOR_H
#
include
<
map
>
#
include
<
stack
>
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
TextureClient
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
namespace
mozilla
{
namespace
layers
{
class
ISurfaceAllocator
;
class
TextureClientHolder
;
class
TextureClientRecycleAllocator
{
protected
:
virtual
~
TextureClientRecycleAllocator
(
)
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
TextureClientRecycleAllocator
)
explicit
TextureClientRecycleAllocator
(
CompositableForwarder
*
aAllocator
)
;
void
SetMaxPoolSize
(
uint32_t
aMax
)
;
already_AddRefed
<
TextureClient
>
CreateOrRecycle
(
gfx
:
:
SurfaceFormat
aFormat
gfx
:
:
IntSize
aSize
BackendSelector
aSelector
TextureFlags
aTextureFlags
TextureAllocationFlags
flags
=
ALLOC_DEFAULT
)
;
protected
:
virtual
already_AddRefed
<
TextureClient
>
Allocate
(
gfx
:
:
SurfaceFormat
aFormat
gfx
:
:
IntSize
aSize
BackendSelector
aSelector
TextureFlags
aTextureFlags
TextureAllocationFlags
aAllocFlags
)
;
RefPtr
<
CompositableForwarder
>
mSurfaceAllocator
;
private
:
friend
class
TextureClient
;
void
RecycleTextureClient
(
TextureClient
*
aClient
)
;
static
const
uint32_t
kMaxPooledSized
=
2
;
uint32_t
mMaxPooledSize
;
std
:
:
map
<
TextureClient
*
RefPtr
<
TextureClientHolder
>
>
mInUseClients
;
std
:
:
stack
<
RefPtr
<
TextureClientHolder
>
>
mPooledClients
;
Mutex
mLock
;
}
;
}
}
#
endif
