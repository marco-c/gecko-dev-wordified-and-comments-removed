#
ifndef
MOZILLA_GFX_BUFFERCLIENT_H
#
define
MOZILLA_GFX_BUFFERCLIENT_H
#
include
<
stdint
.
h
>
#
include
<
vector
>
#
include
<
map
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
namespace
layers
{
class
CompositableClient
;
class
ImageBridgeChild
;
class
ImageContainer
;
class
CompositableForwarder
;
class
CompositableChild
;
class
PCompositableChild
;
class
TextureClientRecycleAllocator
;
class
CompositableClient
{
protected
:
virtual
~
CompositableClient
(
)
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CompositableClient
)
explicit
CompositableClient
(
CompositableForwarder
*
aForwarder
TextureFlags
aFlags
=
TextureFlags
:
:
NO_FLAGS
)
;
virtual
void
Dump
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
=
"
"
bool
aDumpHtml
=
false
TextureDumpMode
aCompress
=
TextureDumpMode
:
:
Compress
)
{
}
;
virtual
TextureInfo
GetTextureInfo
(
)
const
=
0
;
LayersBackend
GetCompositorBackendType
(
)
const
;
already_AddRefed
<
TextureClient
>
CreateBufferTextureClient
(
gfx
:
:
SurfaceFormat
aFormat
gfx
:
:
IntSize
aSize
gfx
:
:
BackendType
aMoz2dBackend
=
gfx
:
:
BackendType
:
:
NONE
TextureFlags
aFlags
=
TextureFlags
:
:
DEFAULT
)
;
already_AddRefed
<
TextureClient
>
CreateTextureClientForDrawing
(
gfx
:
:
SurfaceFormat
aFormat
gfx
:
:
IntSize
aSize
BackendSelector
aSelector
TextureFlags
aTextureFlags
TextureAllocationFlags
aAllocFlags
=
ALLOC_DEFAULT
)
;
already_AddRefed
<
TextureClient
>
CreateTextureClientFromSurface
(
gfx
:
:
SourceSurface
*
aSurface
BackendSelector
aSelector
TextureFlags
aTextureFlags
TextureAllocationFlags
aAllocFlags
=
ALLOC_DEFAULT
)
;
virtual
bool
Connect
(
ImageContainer
*
aImageContainer
=
nullptr
)
;
void
Destroy
(
)
;
bool
IsConnected
(
)
const
;
PCompositableChild
*
GetIPDLActor
(
)
const
;
CompositableForwarder
*
GetForwarder
(
)
const
{
return
mForwarder
;
}
CompositableHandle
GetAsyncHandle
(
)
const
;
virtual
bool
AddTextureClient
(
TextureClient
*
aClient
)
;
virtual
void
OnDetach
(
)
{
}
virtual
void
ClearCachedResources
(
)
;
virtual
void
HandleMemoryPressure
(
)
;
virtual
void
RemoveTexture
(
TextureClient
*
aTexture
)
;
static
RefPtr
<
CompositableClient
>
FromIPDLActor
(
PCompositableChild
*
aActor
)
;
void
InitIPDLActor
(
PCompositableChild
*
aActor
const
CompositableHandle
&
aHandle
)
;
TextureFlags
GetTextureFlags
(
)
const
{
return
mTextureFlags
;
}
TextureClientRecycleAllocator
*
GetTextureClientRecycler
(
)
;
bool
HasTextureClientRecycler
(
)
{
return
!
!
mTextureClientRecycler
;
}
static
void
DumpTextureClient
(
std
:
:
stringstream
&
aStream
TextureClient
*
aTexture
TextureDumpMode
aCompress
)
;
protected
:
RefPtr
<
CompositableChild
>
mCompositableChild
;
RefPtr
<
CompositableForwarder
>
mForwarder
;
TextureFlags
mTextureFlags
;
RefPtr
<
TextureClientRecycleAllocator
>
mTextureClientRecycler
;
CompositableHandle
mAsyncHandle
;
friend
class
CompositableChild
;
}
;
struct
AutoRemoveTexture
{
explicit
AutoRemoveTexture
(
CompositableClient
*
aCompositable
TextureClient
*
aTexture
=
nullptr
)
:
mTexture
(
aTexture
)
mCompositable
(
aCompositable
)
{
}
~
AutoRemoveTexture
(
)
;
RefPtr
<
TextureClient
>
mTexture
;
private
:
CompositableClient
*
mCompositable
;
}
;
}
}
#
endif
