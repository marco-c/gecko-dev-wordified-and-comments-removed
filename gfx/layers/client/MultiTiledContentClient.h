#
ifndef
MOZILLA_GFX_MULTITILEDCONTENTCLIENT_H
#
define
MOZILLA_GFX_MULTITILEDCONTENTCLIENT_H
#
include
"
ClientLayerManager
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
layers
/
CompositableClient
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
layers
/
TiledContentClient
.
h
"
#
include
"
TiledLayerBuffer
.
h
"
namespace
mozilla
{
namespace
layers
{
class
ClientLayerManager
;
class
ClientMultiTiledLayerBuffer
:
public
TiledLayerBuffer
<
ClientMultiTiledLayerBuffer
TileClient
>
public
ClientTiledLayerBuffer
{
friend
class
TiledLayerBuffer
<
ClientMultiTiledLayerBuffer
TileClient
>
;
public
:
ClientMultiTiledLayerBuffer
(
ClientTiledPaintedLayer
&
aPaintedLayer
CompositableClient
&
aCompositableClient
ClientLayerManager
*
aManager
SharedFrameMetricsHelper
*
aHelper
)
;
void
PaintThebes
(
const
nsIntRegion
&
aNewValidRegion
const
nsIntRegion
&
aPaintRegion
const
nsIntRegion
&
aDirtyRegion
LayerManager
:
:
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
TilePaintFlags
aFlags
=
TilePaintFlags
:
:
None
)
override
;
virtual
bool
SupportsProgressiveUpdate
(
)
override
{
return
true
;
}
bool
ProgressiveUpdate
(
const
nsIntRegion
&
aValidRegion
const
nsIntRegion
&
aInvalidRegion
const
nsIntRegion
&
aOldValidRegion
nsIntRegion
&
aOutDrawnRegion
BasicTiledLayerPaintData
*
aPaintData
LayerManager
:
:
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
)
override
;
void
ResetPaintedAndValidState
(
)
override
{
mValidRegion
.
SetEmpty
(
)
;
mTiles
.
mSize
.
width
=
0
;
mTiles
.
mSize
.
height
=
0
;
DiscardBuffers
(
)
;
mRetainedTiles
.
Clear
(
)
;
}
const
nsIntRegion
&
GetValidRegion
(
)
override
{
return
TiledLayerBuffer
:
:
GetValidRegion
(
)
;
}
bool
IsLowPrecision
(
)
const
override
{
return
TiledLayerBuffer
:
:
IsLowPrecision
(
)
;
}
void
Dump
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
bool
aDumpHtml
TextureDumpMode
aCompress
)
override
{
TiledLayerBuffer
:
:
Dump
(
aStream
aPrefix
aDumpHtml
aCompress
)
;
}
void
ReadLock
(
)
;
void
Release
(
)
;
void
DiscardBuffers
(
)
;
SurfaceDescriptorTiles
GetSurfaceDescriptorTiles
(
)
;
void
SetResolution
(
float
aResolution
)
{
if
(
mResolution
=
=
aResolution
)
{
return
;
}
Update
(
nsIntRegion
(
)
nsIntRegion
(
)
nsIntRegion
(
)
TilePaintFlags
:
:
None
)
;
mResolution
=
aResolution
;
}
protected
:
bool
ValidateTile
(
TileClient
&
aTile
const
nsIntPoint
&
aTileRect
nsIntRegion
&
aDirtyRegion
TilePaintFlags
aFlags
)
;
void
Update
(
const
nsIntRegion
&
aNewValidRegion
const
nsIntRegion
&
aPaintRegion
const
nsIntRegion
&
aDirtyRegion
TilePaintFlags
aFlags
)
;
TileClient
GetPlaceholderTile
(
)
const
{
return
TileClient
(
)
;
}
private
:
RefPtr
<
ClientLayerManager
>
mManager
;
LayerManager
:
:
DrawPaintedLayerCallback
mCallback
;
void
*
mCallbackData
;
nsIntRegion
mNewValidRegion
;
SharedFrameMetricsHelper
*
mSharedFrameMetricsHelper
;
std
:
:
vector
<
gfx
:
:
Tile
>
mPaintTiles
;
std
:
:
vector
<
RefPtr
<
CapturedTiledPaintState
>
>
mPaintStates
;
gfx
:
:
IntPoint
mTilingOrigin
;
bool
ComputeProgressiveUpdateRegion
(
const
nsIntRegion
&
aInvalidRegion
const
nsIntRegion
&
aOldValidRegion
nsIntRegion
&
aRegionToPaint
BasicTiledLayerPaintData
*
aPaintData
bool
aIsRepeated
)
;
}
;
class
MultiTiledContentClient
:
public
TiledContentClient
{
public
:
MultiTiledContentClient
(
ClientTiledPaintedLayer
&
aPaintedLayer
ClientLayerManager
*
aManager
)
;
protected
:
~
MultiTiledContentClient
(
)
{
MOZ_COUNT_DTOR
(
MultiTiledContentClient
)
;
mTiledBuffer
.
DiscardBuffers
(
)
;
mLowPrecisionTiledBuffer
.
DiscardBuffers
(
)
;
}
public
:
void
ClearCachedResources
(
)
override
;
void
UpdatedBuffer
(
TiledBufferType
aType
)
override
;
ClientTiledLayerBuffer
*
GetTiledBuffer
(
)
override
{
return
&
mTiledBuffer
;
}
ClientTiledLayerBuffer
*
GetLowPrecisionTiledBuffer
(
)
override
{
if
(
mHasLowPrecision
)
{
return
&
mLowPrecisionTiledBuffer
;
}
return
nullptr
;
}
private
:
SharedFrameMetricsHelper
mSharedFrameMetricsHelper
;
ClientMultiTiledLayerBuffer
mTiledBuffer
;
ClientMultiTiledLayerBuffer
mLowPrecisionTiledBuffer
;
bool
mHasLowPrecision
;
}
;
}
}
#
endif
