#
ifndef
mozilla_layers_CompositorAnimationStorage_h
#
define
mozilla_layers_CompositorAnimationStorage_h
#
include
"
mozilla
/
layers
/
AnimationStorageData
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
X11UndefineNone
.
h
"
#
include
<
unordered_map
>
#
include
<
unordered_set
>
namespace
mozilla
{
namespace
layers
{
class
Animation
;
class
Layers
;
class
CompositorBridgeParent
;
typedef
nsTArray
<
layers
:
:
Animation
>
AnimationArray
;
struct
AnimationTransform
{
gfx
:
:
Matrix4x4
mTransformInDevSpace
;
gfx
:
:
Matrix4x4
mFrameTransform
;
TransformData
mData
;
}
;
struct
AnimatedValue
final
{
typedef
Variant
<
AnimationTransform
float
nscolor
>
AnimatedValueType
;
const
AnimatedValueType
&
Value
(
)
const
{
return
mValue
;
}
const
AnimationTransform
&
Transform
(
)
const
{
return
mValue
.
as
<
AnimationTransform
>
(
)
;
}
const
float
&
Opacity
(
)
const
{
return
mValue
.
as
<
float
>
(
)
;
}
const
nscolor
&
Color
(
)
const
{
return
mValue
.
as
<
nscolor
>
(
)
;
}
template
<
typename
T
>
bool
Is
(
)
const
{
return
mValue
.
is
<
T
>
(
)
;
}
AnimatedValue
(
gfx
:
:
Matrix4x4
&
&
aTransformInDevSpace
gfx
:
:
Matrix4x4
&
&
aFrameTransform
const
TransformData
&
aData
)
:
mValue
(
AsVariant
(
AnimationTransform
{
std
:
:
move
(
aTransformInDevSpace
)
std
:
:
move
(
aFrameTransform
)
aData
}
)
)
{
}
explicit
AnimatedValue
(
const
float
&
aValue
)
:
mValue
(
AsVariant
(
aValue
)
)
{
}
explicit
AnimatedValue
(
nscolor
aValue
)
:
mValue
(
AsVariant
(
aValue
)
)
{
}
void
SetTransform
(
gfx
:
:
Matrix4x4
&
&
aTransformInDevSpace
gfx
:
:
Matrix4x4
&
&
aFrameTransform
const
TransformData
&
aData
)
{
MOZ_ASSERT
(
mValue
.
is
<
AnimationTransform
>
(
)
)
;
AnimationTransform
&
previous
=
mValue
.
as
<
AnimationTransform
>
(
)
;
previous
.
mTransformInDevSpace
=
std
:
:
move
(
aTransformInDevSpace
)
;
previous
.
mFrameTransform
=
std
:
:
move
(
aFrameTransform
)
;
if
(
previous
.
mData
!
=
aData
)
{
previous
.
mData
=
aData
;
}
}
void
SetOpacity
(
float
aOpacity
)
{
MOZ_ASSERT
(
mValue
.
is
<
float
>
(
)
)
;
mValue
.
as
<
float
>
(
)
=
aOpacity
;
}
void
SetColor
(
nscolor
aColor
)
{
MOZ_ASSERT
(
mValue
.
is
<
nscolor
>
(
)
)
;
mValue
.
as
<
nscolor
>
(
)
=
aColor
;
}
private
:
AnimatedValueType
mValue
;
}
;
struct
WrAnimations
{
nsTArray
<
wr
:
:
WrOpacityProperty
>
mOpacityArrays
;
nsTArray
<
wr
:
:
WrTransformProperty
>
mTransformArrays
;
nsTArray
<
wr
:
:
WrColorProperty
>
mColorArrays
;
}
;
class
CompositorAnimationStorage
final
{
typedef
nsClassHashtable
<
nsUint64HashKey
AnimatedValue
>
AnimatedValueTable
;
typedef
std
:
:
unordered_map
<
uint64_t
std
:
:
unique_ptr
<
AnimationStorageData
>
>
AnimationsTable
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CompositorAnimationStorage
)
public
:
CompositorAnimationStorage
(
)
:
mLock
(
"
CompositorAnimationStorage
:
:
mLock
"
)
{
}
OMTAValue
GetOMTAValue
(
const
uint64_t
&
aId
)
const
;
WrAnimations
CollectWebRenderAnimations
(
)
const
;
void
SetAnimations
(
uint64_t
aId
const
LayersId
&
aLayersId
const
AnimationArray
&
aAnimations
)
;
bool
SampleAnimations
(
TimeStamp
aPreviousFrameTime
TimeStamp
aCurrentFrameTime
)
;
bool
SampleAnimations
(
Layer
*
aRoot
CompositorBridgeParent
*
aCompositorBridge
TimeStamp
aPreviousFrameTime
TimeStamp
aCurrentFrameTime
)
;
bool
HasAnimations
(
)
const
;
void
ClearById
(
const
uint64_t
&
aId
)
;
private
:
~
CompositorAnimationStorage
(
)
{
}
;
AnimatedValue
*
GetAnimatedValue
(
const
uint64_t
&
aId
)
const
;
void
SetAnimatedValue
(
uint64_t
aId
AnimatedValue
*
aPreviousValue
gfx
:
:
Matrix4x4
&
&
aTransformInDevSpace
gfx
:
:
Matrix4x4
&
&
aFrameTransform
const
TransformData
&
aData
)
;
void
SetAnimatedValue
(
uint64_t
aId
AnimatedValue
*
aPreviousValue
float
aOpacity
)
;
void
SetAnimatedValue
(
uint64_t
aId
AnimatedValue
*
aPreviousValue
nscolor
aColor
)
;
bool
ApplyAnimatedValue
(
CompositorBridgeParent
*
aCompositorBridge
Layer
*
aLayer
nsCSSPropertyID
aProperty
AnimatedValue
*
aPreviousValue
const
nsTArray
<
RefPtr
<
RawServoAnimationValue
>
>
&
aValues
)
;
void
Clear
(
)
;
private
:
AnimatedValueTable
mAnimatedValues
;
AnimationsTable
mAnimations
;
std
:
:
unordered_set
<
uint64_t
>
mNewAnimations
;
mutable
Mutex
mLock
;
}
;
}
}
#
endif
