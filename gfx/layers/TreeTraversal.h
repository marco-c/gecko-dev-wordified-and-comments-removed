#
ifndef
mozilla_layers_TreeTraversal_h
#
define
mozilla_layers_TreeTraversal_h
namespace
mozilla
{
namespace
layers
{
#
include
<
queue
>
#
include
<
stack
>
template
<
typename
Node
typename
Condition
>
const
Node
*
BreadthFirstSearch
(
const
Node
*
aRoot
const
Condition
&
aCondition
)
{
if
(
!
aRoot
)
{
return
nullptr
;
}
std
:
:
queue
<
const
Node
*
>
queue
;
queue
.
push
(
aRoot
)
;
while
(
!
queue
.
empty
(
)
)
{
const
Node
*
node
=
queue
.
front
(
)
;
queue
.
pop
(
)
;
if
(
aCondition
(
node
)
)
{
return
node
;
}
for
(
const
Node
*
child
=
node
-
>
GetLastChild
(
)
;
child
;
child
=
child
-
>
GetPrevSibling
(
)
)
{
queue
.
push
(
child
)
;
}
}
return
nullptr
;
}
template
<
typename
Node
typename
Condition
>
const
Node
*
DepthFirstSearch
(
const
Node
*
aRoot
const
Condition
&
aCondition
)
{
if
(
!
aRoot
)
{
return
nullptr
;
}
std
:
:
stack
<
const
Node
*
>
stack
;
stack
.
push
(
aRoot
)
;
while
(
!
stack
.
empty
(
)
)
{
const
Node
*
node
=
stack
.
top
(
)
;
stack
.
pop
(
)
;
if
(
aCondition
(
node
)
)
{
return
node
;
}
for
(
const
Node
*
child
=
node
-
>
GetLastChild
(
)
;
child
;
child
=
child
-
>
GetPrevSibling
(
)
)
{
stack
.
push
(
child
)
;
}
}
return
nullptr
;
}
}
}
#
endif
