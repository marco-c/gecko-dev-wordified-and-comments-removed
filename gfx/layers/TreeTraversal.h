#
ifndef
mozilla_layers_TreeTraversal_h
#
define
mozilla_layers_TreeTraversal_h
#
include
<
queue
>
#
include
<
type_traits
>
namespace
mozilla
{
namespace
layers
{
enum
class
TraversalFlag
{
Skip
Continue
Abort
}
;
class
ForwardIterator
{
public
:
template
<
typename
Node
>
static
Node
*
FirstChild
(
Node
*
n
)
{
return
n
-
>
GetFirstChild
(
)
;
}
template
<
typename
Node
>
static
Node
*
NextSibling
(
Node
*
n
)
{
return
n
-
>
GetNextSibling
(
)
;
}
template
<
typename
Node
>
static
Node
FirstChild
(
Node
n
)
{
return
n
.
GetFirstChild
(
)
;
}
template
<
typename
Node
>
static
Node
NextSibling
(
Node
n
)
{
return
n
.
GetNextSibling
(
)
;
}
}
;
class
ReverseIterator
{
public
:
template
<
typename
Node
>
static
Node
*
FirstChild
(
Node
*
n
)
{
return
n
-
>
GetLastChild
(
)
;
}
template
<
typename
Node
>
static
Node
*
NextSibling
(
Node
*
n
)
{
return
n
-
>
GetPrevSibling
(
)
;
}
template
<
typename
Node
>
static
Node
FirstChild
(
Node
n
)
{
return
n
.
GetLastChild
(
)
;
}
template
<
typename
Node
>
static
Node
NextSibling
(
Node
n
)
{
return
n
.
GetPrevSibling
(
)
;
}
}
;
template
<
typename
Iterator
typename
Node
typename
PreAction
typename
PostAction
>
static
auto
ForEachNode
(
Node
aRoot
const
PreAction
&
aPreAction
const
PostAction
&
aPostAction
)
-
>
std
:
:
enable_if_t
<
IsSame
<
decltype
(
aPreAction
(
aRoot
)
)
TraversalFlag
>
:
:
value
&
&
IsSame
<
decltype
(
aPostAction
(
aRoot
)
)
TraversalFlag
>
:
:
value
bool
>
{
if
(
!
aRoot
)
{
return
false
;
}
TraversalFlag
result
=
aPreAction
(
aRoot
)
;
if
(
result
=
=
TraversalFlag
:
:
Abort
)
{
return
true
;
}
if
(
result
=
=
TraversalFlag
:
:
Continue
)
{
for
(
Node
child
=
Iterator
:
:
FirstChild
(
aRoot
)
;
child
;
child
=
Iterator
:
:
NextSibling
(
child
)
)
{
bool
abort
=
ForEachNode
<
Iterator
>
(
child
aPreAction
aPostAction
)
;
if
(
abort
)
{
return
true
;
}
}
result
=
aPostAction
(
aRoot
)
;
if
(
result
=
=
TraversalFlag
:
:
Abort
)
{
return
true
;
}
}
return
false
;
}
template
<
typename
Iterator
typename
Node
typename
PreAction
typename
PostAction
>
static
auto
ForEachNode
(
Node
aRoot
const
PreAction
&
aPreAction
const
PostAction
&
aPostAction
)
-
>
std
:
:
enable_if_t
<
IsSame
<
decltype
(
aPreAction
(
aRoot
)
)
void
>
:
:
value
&
&
IsSame
<
decltype
(
aPostAction
(
aRoot
)
)
void
>
:
:
value
void
>
{
if
(
!
aRoot
)
{
return
;
}
aPreAction
(
aRoot
)
;
for
(
Node
child
=
Iterator
:
:
FirstChild
(
aRoot
)
;
child
;
child
=
Iterator
:
:
NextSibling
(
child
)
)
{
ForEachNode
<
Iterator
>
(
child
aPreAction
aPostAction
)
;
}
aPostAction
(
aRoot
)
;
}
template
<
typename
Iterator
typename
Node
typename
PreAction
>
auto
ForEachNode
(
Node
aRoot
const
PreAction
&
aPreAction
)
-
>
std
:
:
enable_if_t
<
IsSame
<
decltype
(
aPreAction
(
aRoot
)
)
TraversalFlag
>
:
:
value
bool
>
{
return
ForEachNode
<
Iterator
>
(
aRoot
aPreAction
[
]
(
Node
aNode
)
{
return
TraversalFlag
:
:
Continue
;
}
)
;
}
template
<
typename
Iterator
typename
Node
typename
PreAction
>
auto
ForEachNode
(
Node
aRoot
const
PreAction
&
aPreAction
)
-
>
std
:
:
enable_if_t
<
IsSame
<
decltype
(
aPreAction
(
aRoot
)
)
void
>
:
:
value
void
>
{
ForEachNode
<
Iterator
>
(
aRoot
aPreAction
[
]
(
Node
aNode
)
{
}
)
;
}
template
<
typename
Iterator
typename
Node
typename
PostAction
>
auto
ForEachNodePostOrder
(
Node
aRoot
const
PostAction
&
aPostAction
)
-
>
std
:
:
enable_if_t
<
IsSame
<
decltype
(
aPostAction
(
aRoot
)
)
TraversalFlag
>
:
:
value
bool
>
{
return
ForEachNode
<
Iterator
>
(
aRoot
[
]
(
Node
aNode
)
{
return
TraversalFlag
:
:
Continue
;
}
aPostAction
)
;
}
template
<
typename
Iterator
typename
Node
typename
PostAction
>
auto
ForEachNodePostOrder
(
Node
aRoot
const
PostAction
&
aPostAction
)
-
>
std
:
:
enable_if_t
<
IsSame
<
decltype
(
aPostAction
(
aRoot
)
)
void
>
:
:
value
void
>
{
ForEachNode
<
Iterator
>
(
aRoot
[
]
(
Node
aNode
)
{
}
aPostAction
)
;
}
template
<
typename
Iterator
typename
Node
typename
Condition
>
Node
BreadthFirstSearch
(
Node
aRoot
const
Condition
&
aCondition
)
{
if
(
!
aRoot
)
{
return
Node
(
)
;
}
std
:
:
queue
<
Node
>
queue
;
queue
.
push
(
aRoot
)
;
while
(
!
queue
.
empty
(
)
)
{
Node
node
=
queue
.
front
(
)
;
queue
.
pop
(
)
;
if
(
aCondition
(
node
)
)
{
return
node
;
}
for
(
Node
child
=
Iterator
:
:
FirstChild
(
node
)
;
child
;
child
=
Iterator
:
:
NextSibling
(
child
)
)
{
queue
.
push
(
child
)
;
}
}
return
Node
(
)
;
}
template
<
typename
Iterator
typename
Node
typename
Condition
>
Node
DepthFirstSearch
(
Node
aRoot
const
Condition
&
aCondition
)
{
Node
result
=
Node
(
)
;
ForEachNode
<
Iterator
>
(
aRoot
[
&
aCondition
&
result
]
(
Node
aNode
)
{
if
(
aCondition
(
aNode
)
)
{
result
=
aNode
;
return
TraversalFlag
:
:
Abort
;
}
return
TraversalFlag
:
:
Continue
;
}
)
;
return
result
;
}
template
<
typename
Iterator
typename
Node
typename
Condition
>
Node
DepthFirstSearchPostOrder
(
Node
aRoot
const
Condition
&
aCondition
)
{
Node
result
=
Node
(
)
;
ForEachNodePostOrder
<
Iterator
>
(
aRoot
[
&
aCondition
&
result
]
(
Node
aNode
)
{
if
(
aCondition
(
aNode
)
)
{
result
=
aNode
;
return
TraversalFlag
:
:
Abort
;
}
return
TraversalFlag
:
:
Continue
;
}
)
;
return
result
;
}
}
}
#
endif
