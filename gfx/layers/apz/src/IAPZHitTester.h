#
ifndef
mozilla_layers_IAPZHitTester_h
#
define
mozilla_layers_IAPZHitTester_h
#
include
"
HitTestingTreeNode
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
CompositorHitTestInfo
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
namespace
mozilla
{
namespace
layers
{
class
AsyncPanZoomController
;
class
APZCTreeManager
;
class
IAPZHitTester
{
public
:
virtual
~
IAPZHitTester
(
)
=
default
;
void
Initialize
(
APZCTreeManager
*
aTreeManager
)
{
mTreeManager
=
aTreeManager
;
}
struct
HitTestResult
{
RefPtr
<
AsyncPanZoomController
>
mTargetApzc
;
gfx
:
:
CompositorHitTestInfo
mHitResult
;
LayersId
mLayersId
;
HitTestingTreeNodeAutoLock
mScrollbarNode
;
SideBits
mFixedPosSides
=
SideBits
:
:
eNone
;
bool
mHitOverscrollGutter
=
false
;
HitTestResult
(
)
=
default
;
HitTestResult
(
HitTestResult
&
&
)
=
default
;
HitTestResult
&
operator
=
(
HitTestResult
&
&
)
=
default
;
HitTestResult
CopyWithoutScrollbarNode
(
)
const
;
}
;
virtual
HitTestResult
GetAPZCAtPoint
(
const
ScreenPoint
&
aHitTestPoint
const
RecursiveMutexAutoLock
&
aProofOfTreeLock
)
=
0
;
protected
:
APZCTreeManager
*
mTreeManager
=
nullptr
;
LayersId
GetRootLayersId
(
)
const
;
HitTestingTreeNode
*
GetRootNode
(
)
const
;
HitTestingTreeNode
*
FindRootNodeForLayersId
(
LayersId
aLayersId
)
const
;
AsyncPanZoomController
*
FindRootApzcForLayersId
(
LayersId
aLayersId
)
const
;
already_AddRefed
<
HitTestingTreeNode
>
GetTargetNode
(
const
ScrollableLayerGuid
&
aGuid
ScrollableLayerGuid
:
:
Comparator
aComparator
)
;
void
InitializeHitTestingTreeNodeAutoLock
(
HitTestingTreeNodeAutoLock
&
aAutoLock
const
RecursiveMutexAutoLock
&
aProofOfTreeLock
RefPtr
<
HitTestingTreeNode
>
&
aNode
)
;
AsyncPanZoomController
*
GetTargetApzcForNode
(
const
HitTestingTreeNode
*
aNode
)
;
bool
IsFixedToRootContent
(
const
HitTestingTreeNode
*
aNode
)
;
LayerToParentLayerMatrix4x4
ComputeTransformForNode
(
const
HitTestingTreeNode
*
aNode
const
AsyncPanZoomController
*
*
aOutSourceOfOverscrollTransform
)
const
;
}
;
}
}
#
endif
