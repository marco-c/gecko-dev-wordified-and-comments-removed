#
include
"
mozilla
/
layers
/
Keyboard
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
namespace
mozilla
{
namespace
layers
{
nsIScrollableFrame
:
:
ScrollUnit
KeyboardScrollAction
:
:
GetScrollUnit
(
KeyboardScrollAction
:
:
KeyboardScrollActionType
aDeltaType
)
{
switch
(
aDeltaType
)
{
case
KeyboardScrollAction
:
:
eScrollCharacter
:
return
nsIScrollableFrame
:
:
LINES
;
case
KeyboardScrollAction
:
:
eScrollLine
:
return
nsIScrollableFrame
:
:
LINES
;
case
KeyboardScrollAction
:
:
eScrollPage
:
return
nsIScrollableFrame
:
:
PAGES
;
case
KeyboardScrollAction
:
:
eScrollComplete
:
return
nsIScrollableFrame
:
:
WHOLE
;
case
KeyboardScrollAction
:
:
eSentinel
:
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
KeyboardScrollActionType
.
"
)
;
return
nsIScrollableFrame
:
:
WHOLE
;
}
}
KeyboardScrollAction
:
:
KeyboardScrollAction
(
)
:
mType
(
KeyboardScrollAction
:
:
eScrollCharacter
)
mForward
(
false
)
{
}
KeyboardScrollAction
:
:
KeyboardScrollAction
(
KeyboardScrollActionType
aType
bool
aForward
)
:
mType
(
aType
)
mForward
(
aForward
)
{
}
KeyboardShortcut
:
:
KeyboardShortcut
(
)
{
}
KeyboardShortcut
:
:
KeyboardShortcut
(
KeyboardInput
:
:
KeyboardEventType
aEventType
uint32_t
aKeyCode
uint32_t
aCharCode
Modifiers
aModifiers
Modifiers
aModifiersMask
const
KeyboardScrollAction
&
aAction
)
:
mAction
(
aAction
)
mKeyCode
(
aKeyCode
)
mCharCode
(
aCharCode
)
mModifiers
(
aModifiers
)
mModifiersMask
(
aModifiersMask
)
mEventType
(
aEventType
)
mDispatchToContent
(
false
)
{
}
KeyboardShortcut
:
:
KeyboardShortcut
(
KeyboardInput
:
:
KeyboardEventType
aEventType
uint32_t
aKeyCode
uint32_t
aCharCode
Modifiers
aModifiers
Modifiers
aModifiersMask
)
:
mKeyCode
(
aKeyCode
)
mCharCode
(
aCharCode
)
mModifiers
(
aModifiers
)
mModifiersMask
(
aModifiersMask
)
mEventType
(
aEventType
)
mDispatchToContent
(
true
)
{
}
bool
KeyboardShortcut
:
:
Matches
(
const
KeyboardInput
&
aInput
const
IgnoreModifierState
&
aIgnore
uint32_t
aOverrideCharCode
)
const
{
return
mEventType
=
=
aInput
.
mType
&
&
MatchesKey
(
aInput
aOverrideCharCode
)
&
&
MatchesModifiers
(
aInput
aIgnore
)
;
}
bool
KeyboardShortcut
:
:
MatchesKey
(
const
KeyboardInput
&
aInput
uint32_t
aOverrideCharCode
)
const
{
if
(
!
mCharCode
)
{
return
mKeyCode
=
=
aInput
.
mKeyCode
;
}
uint32_t
charCode
;
if
(
aOverrideCharCode
)
{
charCode
=
aOverrideCharCode
;
}
else
{
charCode
=
aInput
.
mCharCode
;
}
if
(
IS_IN_BMP
(
charCode
)
)
{
charCode
=
ToLowerCase
(
static_cast
<
char16_t
>
(
charCode
)
)
;
}
return
mCharCode
=
=
charCode
;
}
bool
KeyboardShortcut
:
:
MatchesModifiers
(
const
KeyboardInput
&
aInput
const
IgnoreModifierState
&
aIgnore
)
const
{
Modifiers
modifiersMask
=
mModifiersMask
;
if
(
aIgnore
.
mOS
)
{
modifiersMask
&
=
~
MODIFIER_OS
;
}
if
(
aIgnore
.
mShift
)
{
modifiersMask
&
=
~
MODIFIER_SHIFT
;
}
return
(
aInput
.
modifiers
&
modifiersMask
)
=
=
mModifiers
;
}
}
}
