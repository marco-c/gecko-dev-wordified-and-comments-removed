#
include
"
AutoscrollAnimation
.
h
"
#
include
<
cmath
>
#
include
"
AsyncPanZoomController
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
layers
/
ScrollInputMethods
.
h
"
namespace
mozilla
{
namespace
layers
{
static
float
Accelerate
(
ScreenCoord
curr
ScreenCoord
start
)
{
static
const
int
speed
=
12
;
float
val
=
(
curr
-
start
)
/
speed
;
if
(
val
>
1
)
{
return
val
*
sqrtf
(
val
)
-
1
;
}
if
(
val
<
-
1
)
{
return
val
*
sqrtf
(
-
val
)
+
1
;
}
return
0
;
}
AutoscrollAnimation
:
:
AutoscrollAnimation
(
AsyncPanZoomController
&
aApzc
const
ScreenPoint
&
aAnchorLocation
)
:
mApzc
(
aApzc
)
mAnchorLocation
(
aAnchorLocation
)
{
}
bool
AutoscrollAnimation
:
:
DoSample
(
FrameMetrics
&
aFrameMetrics
const
TimeDuration
&
aDelta
)
{
APZCTreeManager
*
treeManager
=
mApzc
.
GetApzcTreeManager
(
)
;
if
(
!
treeManager
)
{
return
false
;
}
Telemetry
:
:
Accumulate
(
Telemetry
:
:
SCROLL_INPUT_METHODS
(
uint32_t
)
ScrollInputMethod
:
:
ApzAutoscrolling
)
;
ScreenPoint
mouseLocation
=
treeManager
-
>
GetCurrentMousePosition
(
)
;
static
const
TimeDuration
maxTimeDelta
=
TimeDuration
:
:
FromMilliseconds
(
100
)
;
TimeDuration
timeDelta
=
TimeDuration
:
:
Min
(
aDelta
maxTimeDelta
)
;
float
timeCompensation
=
timeDelta
.
ToMilliseconds
(
)
/
20
;
CSSPoint
scrollDelta
{
Accelerate
(
mouseLocation
.
x
mAnchorLocation
.
x
)
*
timeCompensation
Accelerate
(
mouseLocation
.
y
mAnchorLocation
.
y
)
*
timeCompensation
}
;
mApzc
.
ScrollByAndClamp
(
scrollDelta
)
;
return
true
;
}
void
AutoscrollAnimation
:
:
Cancel
(
CancelAnimationFlags
aFlags
)
{
if
(
aFlags
&
TriggeredExternally
)
{
return
;
}
if
(
RefPtr
<
GeckoContentController
>
controller
=
mApzc
.
GetGeckoContentController
(
)
)
{
controller
-
>
CancelAutoscroll
(
mApzc
.
GetGuid
(
)
)
;
}
}
}
}
