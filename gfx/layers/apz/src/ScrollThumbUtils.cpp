#
include
"
ScrollThumbUtils
.
h
"
#
include
"
AsyncPanZoomController
.
h
"
#
include
"
FrameMetrics
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
namespace
mozilla
{
namespace
layers
{
namespace
apz
{
LayerToParentLayerMatrix4x4
ComputeTransformForScrollThumb
(
const
LayerToParentLayerMatrix4x4
&
aCurrentTransform
const
gfx
:
:
Matrix4x4
&
aScrollableContentTransform
AsyncPanZoomController
*
aApzc
const
FrameMetrics
&
aMetrics
const
ScrollbarData
&
aScrollbarData
bool
aScrollbarIsDescendant
AsyncTransformComponentMatrix
*
aOutClipTransform
)
{
if
(
aMetrics
.
IsScrollInfoLayer
(
)
)
{
return
LayerToParentLayerMatrix4x4
{
}
;
}
MOZ_RELEASE_ASSERT
(
aApzc
)
;
AsyncTransformComponentMatrix
asyncTransform
=
aApzc
-
>
GetCurrentAsyncTransform
(
AsyncPanZoomController
:
:
eForCompositing
)
;
AsyncTransformComponentMatrix
scrollbarTransform
;
if
(
*
aScrollbarData
.
mDirection
=
=
ScrollDirection
:
:
eVertical
)
{
ParentLayerCoord
asyncScrollY
=
asyncTransform
.
_42
;
const
float
asyncZoomY
=
asyncTransform
.
_22
;
const
float
yScale
=
1
.
f
/
asyncZoomY
;
const
CSSToParentLayerScale
effectiveZoom
(
aMetrics
.
GetZoom
(
)
.
yScale
*
asyncZoomY
)
;
if
(
gfxPlatform
:
:
UseDesktopZoomingScrollbars
(
)
)
{
asyncScrollY
-
=
(
(
aMetrics
.
GetLayoutScrollOffset
(
)
-
aMetrics
.
GetVisualScrollOffset
(
)
)
*
effectiveZoom
)
.
y
;
}
const
float
ratio
=
aScrollbarData
.
mThumbRatio
/
(
aMetrics
.
GetPresShellResolution
(
)
*
asyncZoomY
)
;
ParentLayerCoord
yTranslation
=
-
asyncScrollY
*
ratio
;
const
CSSCoord
thumbOrigin
=
(
aMetrics
.
GetVisualScrollOffset
(
)
.
y
*
ratio
)
;
const
CSSCoord
thumbOriginScaled
=
thumbOrigin
*
yScale
;
const
CSSCoord
thumbOriginDelta
=
thumbOriginScaled
-
thumbOrigin
;
const
ParentLayerCoord
thumbOriginDeltaPL
=
thumbOriginDelta
*
effectiveZoom
;
yTranslation
-
=
thumbOriginDeltaPL
;
scrollbarTransform
.
PostScale
(
1
.
f
yScale
1
.
f
)
;
scrollbarTransform
.
PostTranslate
(
0
yTranslation
0
)
;
}
if
(
*
aScrollbarData
.
mDirection
=
=
ScrollDirection
:
:
eHorizontal
)
{
ParentLayerCoord
asyncScrollX
=
asyncTransform
.
_41
;
const
float
asyncZoomX
=
asyncTransform
.
_11
;
const
float
xScale
=
1
.
f
/
asyncZoomX
;
const
CSSToParentLayerScale
effectiveZoom
(
aMetrics
.
GetZoom
(
)
.
xScale
*
asyncZoomX
)
;
if
(
gfxPlatform
:
:
UseDesktopZoomingScrollbars
(
)
)
{
asyncScrollX
-
=
(
(
aMetrics
.
GetLayoutScrollOffset
(
)
-
aMetrics
.
GetVisualScrollOffset
(
)
)
*
effectiveZoom
)
.
x
;
}
const
float
ratio
=
aScrollbarData
.
mThumbRatio
/
(
aMetrics
.
GetPresShellResolution
(
)
*
asyncZoomX
)
;
ParentLayerCoord
xTranslation
=
-
asyncScrollX
*
ratio
;
const
CSSCoord
thumbOrigin
=
(
aMetrics
.
GetVisualScrollOffset
(
)
.
x
*
ratio
)
;
const
CSSCoord
thumbOriginScaled
=
thumbOrigin
*
xScale
;
const
CSSCoord
thumbOriginDelta
=
thumbOriginScaled
-
thumbOrigin
;
const
ParentLayerCoord
thumbOriginDeltaPL
=
thumbOriginDelta
*
effectiveZoom
;
xTranslation
-
=
thumbOriginDeltaPL
;
scrollbarTransform
.
PostScale
(
xScale
1
.
f
1
.
f
)
;
scrollbarTransform
.
PostTranslate
(
xTranslation
0
0
)
;
}
LayerToParentLayerMatrix4x4
transform
=
aCurrentTransform
*
scrollbarTransform
;
AsyncTransformComponentMatrix
compensation
;
if
(
aScrollbarIsDescendant
)
{
AsyncTransformComponentMatrix
overscroll
=
aApzc
-
>
GetOverscrollTransform
(
AsyncPanZoomController
:
:
eForCompositing
)
;
gfx
:
:
Matrix4x4
asyncUntransform
=
(
asyncTransform
*
overscroll
)
.
Inverse
(
)
.
ToUnknownMatrix
(
)
;
const
gfx
:
:
Matrix4x4
&
contentTransform
=
aScrollableContentTransform
;
gfx
:
:
Matrix4x4
contentUntransform
=
contentTransform
.
Inverse
(
)
;
compensation
*
=
ViewAs
<
AsyncTransformComponentMatrix
>
(
contentTransform
*
asyncUntransform
*
contentUntransform
)
;
if
(
aOutClipTransform
)
{
*
aOutClipTransform
=
compensation
;
}
}
transform
=
transform
*
compensation
;
return
transform
;
}
}
}
}
