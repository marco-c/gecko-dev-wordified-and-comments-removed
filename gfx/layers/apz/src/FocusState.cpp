#
include
"
mozilla
/
layers
/
FocusState
.
h
"
#
define
FS_LOG
(
.
.
.
)
namespace
mozilla
{
namespace
layers
{
FocusState
:
:
FocusState
(
)
:
mLastAPZProcessedEvent
(
1
)
mLastContentProcessedEvent
(
0
)
mFocusHasKeyEventListeners
(
false
)
mFocusLayersId
(
0
)
mFocusHorizontalTarget
(
FrameMetrics
:
:
NULL_SCROLL_ID
)
mFocusVerticalTarget
(
FrameMetrics
:
:
NULL_SCROLL_ID
)
{
}
bool
FocusState
:
:
IsCurrent
(
)
const
{
FS_LOG
(
"
Checking
IsCurrent
(
)
with
cseq
=
%
"
PRIu64
"
aseq
=
%
"
PRIu64
"
\
n
"
mLastContentProcessedEvent
mLastAPZProcessedEvent
)
;
MOZ_ASSERT
(
mLastContentProcessedEvent
<
=
mLastAPZProcessedEvent
)
;
return
mLastContentProcessedEvent
=
=
mLastAPZProcessedEvent
;
}
void
FocusState
:
:
ReceiveFocusChangingEvent
(
)
{
mLastAPZProcessedEvent
+
=
1
;
}
void
FocusState
:
:
Update
(
uint64_t
aRootLayerTreeId
uint64_t
aOriginatingLayersId
const
FocusTarget
&
aState
)
{
FS_LOG
(
"
Update
with
rlt
=
%
"
PRIu64
"
olt
=
%
"
PRIu64
"
ft
=
(
%
d
%
"
PRIu64
"
)
\
n
"
aRootLayerTreeId
aOriginatingLayersId
(
int
)
aState
.
mType
aState
.
mSequenceNumber
)
;
mFocusTree
[
aOriginatingLayersId
]
=
aState
;
mFocusHasKeyEventListeners
=
false
;
mFocusLayersId
=
aRootLayerTreeId
;
mFocusHorizontalTarget
=
FrameMetrics
:
:
NULL_SCROLL_ID
;
mFocusVerticalTarget
=
FrameMetrics
:
:
NULL_SCROLL_ID
;
while
(
true
)
{
auto
currentNode
=
mFocusTree
.
find
(
mFocusLayersId
)
;
if
(
currentNode
=
=
mFocusTree
.
end
(
)
)
{
FS_LOG
(
"
Setting
target
to
nil
(
cannot
find
lt
=
%
"
PRIu64
"
)
\
n
"
mFocusLayersId
)
;
return
;
}
const
FocusTarget
&
target
=
currentNode
-
>
second
;
mFocusHasKeyEventListeners
|
=
target
.
mFocusHasKeyEventListeners
;
switch
(
target
.
mType
)
{
case
FocusTarget
:
:
eRefLayer
:
{
MOZ_ASSERT
(
mFocusLayersId
!
=
target
.
mData
.
mRefLayerId
)
;
if
(
mFocusLayersId
=
=
target
.
mData
.
mRefLayerId
)
{
FS_LOG
(
"
Setting
target
to
nil
(
bailing
out
of
infinite
loop
lt
=
%
"
PRIu64
"
)
\
n
"
mFocusLayersId
)
;
return
;
}
FS_LOG
(
"
Looking
for
target
in
lt
=
%
"
PRIu64
"
\
n
"
target
.
mData
.
mRefLayerId
)
;
mFocusLayersId
=
target
.
mData
.
mRefLayerId
;
break
;
}
case
FocusTarget
:
:
eScrollLayer
:
{
FS_LOG
(
"
Setting
target
to
h
=
%
"
PRIu64
"
v
=
%
"
PRIu64
"
and
seq
=
%
"
PRIu64
"
\
n
"
target
.
mData
.
mScrollTargets
.
mHorizontal
target
.
mData
.
mScrollTargets
.
mVertical
target
.
mSequenceNumber
)
;
mFocusHorizontalTarget
=
target
.
mData
.
mScrollTargets
.
mHorizontal
;
mFocusVerticalTarget
=
target
.
mData
.
mScrollTargets
.
mVertical
;
mLastContentProcessedEvent
=
target
.
mSequenceNumber
;
return
;
}
case
FocusTarget
:
:
eNone
:
{
FS_LOG
(
"
Setting
target
to
nil
(
reached
a
nil
target
)
\
n
"
)
;
mLastContentProcessedEvent
=
target
.
mSequenceNumber
;
return
;
}
case
FocusTarget
:
:
eSentinel
:
{
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
FocusTargetType
"
)
;
}
}
}
}
std
:
:
unordered_set
<
uint64_t
>
FocusState
:
:
GetFocusTargetLayerIds
(
)
const
{
std
:
:
unordered_set
<
uint64_t
>
layersIds
;
layersIds
.
reserve
(
mFocusTree
.
size
(
)
)
;
for
(
const
auto
&
focusNode
:
mFocusTree
)
{
layersIds
.
insert
(
focusNode
.
first
)
;
}
return
layersIds
;
}
void
FocusState
:
:
RemoveFocusTarget
(
uint64_t
aLayersId
)
{
mFocusTree
.
erase
(
aLayersId
)
;
}
Maybe
<
ScrollableLayerGuid
>
FocusState
:
:
GetHorizontalTarget
(
)
const
{
if
(
!
IsCurrent
(
)
|
|
mFocusHasKeyEventListeners
|
|
mFocusHorizontalTarget
=
=
FrameMetrics
:
:
NULL_SCROLL_ID
)
{
return
Nothing
(
)
;
}
return
Some
(
ScrollableLayerGuid
(
mFocusLayersId
0
mFocusHorizontalTarget
)
)
;
}
Maybe
<
ScrollableLayerGuid
>
FocusState
:
:
GetVerticalTarget
(
)
const
{
if
(
!
IsCurrent
(
)
|
|
mFocusHasKeyEventListeners
|
|
mFocusVerticalTarget
=
=
FrameMetrics
:
:
NULL_SCROLL_ID
)
{
return
Nothing
(
)
;
}
return
Some
(
ScrollableLayerGuid
(
mFocusLayersId
0
mFocusVerticalTarget
)
)
;
}
}
}
