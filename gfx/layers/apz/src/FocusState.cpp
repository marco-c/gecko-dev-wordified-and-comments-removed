#
include
"
FocusState
.
h
"
#
define
FS_LOG
(
.
.
.
)
namespace
mozilla
{
namespace
layers
{
FocusState
:
:
FocusState
(
)
:
mLastAPZProcessedEvent
(
1
)
mLastContentProcessedEvent
(
0
)
mFocusHasKeyEventListeners
(
false
)
mFocusLayersId
(
0
)
mFocusHorizontalTarget
(
FrameMetrics
:
:
NULL_SCROLL_ID
)
mFocusVerticalTarget
(
FrameMetrics
:
:
NULL_SCROLL_ID
)
{
}
bool
FocusState
:
:
IsCurrent
(
)
const
{
FS_LOG
(
"
Checking
IsCurrent
(
)
with
cseq
=
%
"
PRIu64
"
aseq
=
%
"
PRIu64
"
\
n
"
mLastContentProcessedEvent
mLastAPZProcessedEvent
)
;
MOZ_ASSERT
(
mLastContentProcessedEvent
<
=
mLastAPZProcessedEvent
)
;
return
mLastContentProcessedEvent
=
=
mLastAPZProcessedEvent
;
}
void
FocusState
:
:
ReceiveFocusChangingEvent
(
)
{
mLastAPZProcessedEvent
+
=
1
;
}
void
FocusState
:
:
Update
(
uint64_t
aRootLayerTreeId
uint64_t
aOriginatingLayersId
const
FocusTarget
&
aState
)
{
FS_LOG
(
"
Update
with
rlt
=
%
"
PRIu64
"
olt
=
%
"
PRIu64
"
ft
=
(
%
s
%
"
PRIu64
"
)
\
n
"
aRootLayerTreeId
aOriginatingLayersId
aState
.
Type
(
)
aState
.
mSequenceNumber
)
;
mFocusTree
[
aOriginatingLayersId
]
=
aState
;
mFocusHasKeyEventListeners
=
false
;
mFocusLayersId
=
aRootLayerTreeId
;
mFocusHorizontalTarget
=
FrameMetrics
:
:
NULL_SCROLL_ID
;
mFocusVerticalTarget
=
FrameMetrics
:
:
NULL_SCROLL_ID
;
while
(
true
)
{
auto
currentNode
=
mFocusTree
.
find
(
mFocusLayersId
)
;
if
(
currentNode
=
=
mFocusTree
.
end
(
)
)
{
FS_LOG
(
"
Setting
target
to
nil
(
cannot
find
lt
=
%
"
PRIu64
"
)
\
n
"
mFocusLayersId
)
;
return
;
}
const
FocusTarget
&
target
=
currentNode
-
>
second
;
mFocusHasKeyEventListeners
|
=
target
.
mFocusHasKeyEventListeners
;
struct
FocusTargetDataMatcher
{
FocusState
&
mFocusState
;
const
uint64_t
mSequenceNumber
;
bool
match
(
const
FocusTarget
:
:
NoFocusTarget
&
aNoFocusTarget
)
{
FS_LOG
(
"
Setting
target
to
nil
(
reached
a
nil
target
)
\
n
"
)
;
mFocusState
.
mLastContentProcessedEvent
=
mSequenceNumber
;
return
true
;
}
bool
match
(
const
FocusTarget
:
:
RefLayerId
aRefLayerId
)
{
MOZ_ASSERT
(
mFocusState
.
mFocusLayersId
!
=
aRefLayerId
)
;
if
(
mFocusState
.
mFocusLayersId
=
=
aRefLayerId
)
{
FS_LOG
(
"
Setting
target
to
nil
(
bailing
out
of
infinite
loop
lt
=
%
"
PRIu64
"
)
\
n
"
mFocusState
.
mFocusLayersId
)
;
return
true
;
}
FS_LOG
(
"
Looking
for
target
in
lt
=
%
"
PRIu64
"
\
n
"
aRefLayerId
)
;
mFocusState
.
mFocusLayersId
=
aRefLayerId
;
return
false
;
}
bool
match
(
const
FocusTarget
:
:
ScrollTargets
&
aScrollTargets
)
{
FS_LOG
(
"
Setting
target
to
h
=
%
"
PRIu64
"
v
=
%
"
PRIu64
"
and
seq
=
%
"
PRIu64
"
\
n
"
aScrollTargets
.
mHorizontal
aScrollTargets
.
mVertical
mSequenceNumber
)
;
mFocusState
.
mFocusHorizontalTarget
=
aScrollTargets
.
mHorizontal
;
mFocusState
.
mFocusVerticalTarget
=
aScrollTargets
.
mVertical
;
mFocusState
.
mLastContentProcessedEvent
=
mSequenceNumber
;
if
(
mFocusState
.
mLastAPZProcessedEvent
=
=
1
&
&
mFocusState
.
mLastContentProcessedEvent
>
mFocusState
.
mLastAPZProcessedEvent
)
{
mFocusState
.
mLastAPZProcessedEvent
=
mFocusState
.
mLastContentProcessedEvent
;
}
return
true
;
}
}
;
if
(
target
.
mData
.
match
(
FocusTargetDataMatcher
{
*
this
target
.
mSequenceNumber
}
)
)
{
return
;
}
}
}
void
FocusState
:
:
RemoveFocusTarget
(
uint64_t
aLayersId
)
{
mFocusTree
.
erase
(
aLayersId
)
;
}
Maybe
<
ScrollableLayerGuid
>
FocusState
:
:
GetHorizontalTarget
(
)
const
{
if
(
!
IsCurrent
(
)
|
|
mFocusHasKeyEventListeners
|
|
mFocusHorizontalTarget
=
=
FrameMetrics
:
:
NULL_SCROLL_ID
)
{
return
Nothing
(
)
;
}
return
Some
(
ScrollableLayerGuid
(
mFocusLayersId
0
mFocusHorizontalTarget
)
)
;
}
Maybe
<
ScrollableLayerGuid
>
FocusState
:
:
GetVerticalTarget
(
)
const
{
if
(
!
IsCurrent
(
)
|
|
mFocusHasKeyEventListeners
|
|
mFocusVerticalTarget
=
=
FrameMetrics
:
:
NULL_SCROLL_ID
)
{
return
Nothing
(
)
;
}
return
Some
(
ScrollableLayerGuid
(
mFocusLayersId
0
mFocusVerticalTarget
)
)
;
}
}
}
