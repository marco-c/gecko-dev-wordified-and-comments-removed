#
ifndef
mozilla_layers_Overscroll_h
#
define
mozilla_layers_Overscroll_h
#
include
"
AsyncPanZoomAnimation
.
h
"
#
include
"
AsyncPanZoomController
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
layers
{
class
OverscrollAnimation
:
public
AsyncPanZoomAnimation
{
public
:
explicit
OverscrollAnimation
(
AsyncPanZoomController
&
aApzc
const
ParentLayerPoint
&
aVelocity
)
:
mApzc
(
aApzc
)
{
mApzc
.
mX
.
StartOverscrollAnimation
(
aVelocity
.
x
)
;
mApzc
.
mY
.
StartOverscrollAnimation
(
aVelocity
.
y
)
;
}
~
OverscrollAnimation
(
)
{
mApzc
.
mX
.
EndOverscrollAnimation
(
)
;
mApzc
.
mY
.
EndOverscrollAnimation
(
)
;
}
virtual
bool
DoSample
(
FrameMetrics
&
aFrameMetrics
const
TimeDuration
&
aDelta
)
override
{
bool
continueX
=
mApzc
.
mX
.
SampleOverscrollAnimation
(
aDelta
)
;
bool
continueY
=
mApzc
.
mY
.
SampleOverscrollAnimation
(
aDelta
)
;
if
(
!
continueX
&
&
!
continueY
)
{
mDeferredTasks
.
AppendElement
(
NewRunnableMethod
(
"
layers
:
:
AsyncPanZoomController
:
:
ScrollSnap
"
&
mApzc
&
AsyncPanZoomController
:
:
ScrollSnap
)
)
;
return
false
;
}
return
true
;
}
virtual
bool
WantsRepaints
(
)
override
{
return
false
;
}
private
:
AsyncPanZoomController
&
mApzc
;
}
;
class
OverscrollEffectBase
{
public
:
virtual
~
OverscrollEffectBase
(
)
=
default
;
virtual
void
ConsumeOverscroll
(
ParentLayerPoint
&
aOverscroll
bool
aShouldOverscrollX
bool
aShouldOverscrollY
)
=
0
;
virtual
void
HandleFlingOverscroll
(
const
ParentLayerPoint
&
aVelocity
)
=
0
;
}
;
class
GenericOverscrollEffect
:
public
OverscrollEffectBase
{
public
:
explicit
GenericOverscrollEffect
(
AsyncPanZoomController
&
aApzc
)
:
mApzc
(
aApzc
)
{
}
void
ConsumeOverscroll
(
ParentLayerPoint
&
aOverscroll
bool
aShouldOverscrollX
bool
aShouldOverscrollY
)
override
{
if
(
aShouldOverscrollX
)
{
mApzc
.
mX
.
OverscrollBy
(
aOverscroll
.
x
)
;
aOverscroll
.
x
=
0
;
}
if
(
aShouldOverscrollY
)
{
mApzc
.
mY
.
OverscrollBy
(
aOverscroll
.
y
)
;
aOverscroll
.
y
=
0
;
}
if
(
aShouldOverscrollX
|
|
aShouldOverscrollY
)
{
mApzc
.
ScheduleComposite
(
)
;
}
}
void
HandleFlingOverscroll
(
const
ParentLayerPoint
&
aVelocity
)
override
{
mApzc
.
StartOverscrollAnimation
(
aVelocity
)
;
}
private
:
AsyncPanZoomController
&
mApzc
;
}
;
class
WidgetOverscrollEffect
:
public
OverscrollEffectBase
{
public
:
explicit
WidgetOverscrollEffect
(
AsyncPanZoomController
&
aApzc
)
:
mApzc
(
aApzc
)
{
}
void
ConsumeOverscroll
(
ParentLayerPoint
&
aOverscroll
bool
aShouldOverscrollX
bool
aShouldOverscrollY
)
override
{
RefPtr
<
GeckoContentController
>
controller
=
mApzc
.
GetGeckoContentController
(
)
;
if
(
controller
&
&
(
aShouldOverscrollX
|
|
aShouldOverscrollY
)
)
{
controller
-
>
UpdateOverscrollOffset
(
aOverscroll
.
x
aOverscroll
.
y
mApzc
.
IsRootContent
(
)
)
;
aOverscroll
=
ParentLayerPoint
(
)
;
}
}
void
HandleFlingOverscroll
(
const
ParentLayerPoint
&
aVelocity
)
override
{
RefPtr
<
GeckoContentController
>
controller
=
mApzc
.
GetGeckoContentController
(
)
;
if
(
controller
)
{
controller
-
>
UpdateOverscrollVelocity
(
aVelocity
.
x
aVelocity
.
y
mApzc
.
IsRootContent
(
)
)
;
}
}
private
:
AsyncPanZoomController
&
mApzc
;
}
;
}
}
#
endif
