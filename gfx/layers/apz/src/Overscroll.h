#
ifndef
mozilla_layers_Overscroll_h
#
define
mozilla_layers_Overscroll_h
#
include
"
AsyncPanZoomAnimation
.
h
"
#
include
"
AsyncPanZoomController
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
layers
{
class
OverscrollAnimation
:
public
AsyncPanZoomAnimation
{
public
:
OverscrollAnimation
(
AsyncPanZoomController
&
aApzc
const
ParentLayerPoint
&
aVelocity
SideBits
aOverscrollSideBits
)
:
mApzc
(
aApzc
)
{
if
(
(
aOverscrollSideBits
&
SideBits
:
:
eLeftRight
)
!
=
SideBits
:
:
eNone
)
{
mApzc
.
mX
.
StartOverscrollAnimation
(
aVelocity
.
x
)
;
}
if
(
(
aOverscrollSideBits
&
SideBits
:
:
eTopBottom
)
!
=
SideBits
:
:
eNone
)
{
mApzc
.
mY
.
StartOverscrollAnimation
(
aVelocity
.
y
)
;
}
}
virtual
~
OverscrollAnimation
(
)
{
mApzc
.
mX
.
EndOverscrollAnimation
(
)
;
mApzc
.
mY
.
EndOverscrollAnimation
(
)
;
}
virtual
bool
DoSample
(
FrameMetrics
&
aFrameMetrics
const
TimeDuration
&
aDelta
)
override
{
bool
continueX
=
mApzc
.
mX
.
IsOverscrollAnimationAlive
(
)
&
&
mApzc
.
mX
.
SampleOverscrollAnimation
(
aDelta
)
;
bool
continueY
=
mApzc
.
mY
.
IsOverscrollAnimationAlive
(
)
&
&
mApzc
.
mY
.
SampleOverscrollAnimation
(
aDelta
)
;
if
(
!
continueX
&
&
!
continueY
)
{
mDeferredTasks
.
AppendElement
(
NewRunnableMethod
(
"
layers
:
:
AsyncPanZoomController
:
:
ScrollSnap
"
&
mApzc
&
AsyncPanZoomController
:
:
ScrollSnap
)
)
;
return
false
;
}
return
true
;
}
virtual
bool
WantsRepaints
(
)
override
{
return
false
;
}
void
HandlePanMomentum
(
const
ParentLayerPoint
&
aDisplacement
)
{
float
xOverscroll
=
mApzc
.
mX
.
GetOverscroll
(
)
;
if
(
(
xOverscroll
>
0
&
&
aDisplacement
.
x
>
0
)
|
|
(
xOverscroll
<
0
&
&
aDisplacement
.
x
<
0
)
)
{
if
(
!
mApzc
.
mX
.
IsOverscrollAnimationRunning
(
)
)
{
mApzc
.
mX
.
StartOverscrollAnimation
(
mApzc
.
mX
.
GetVelocity
(
)
)
;
}
}
else
if
(
(
xOverscroll
>
0
&
&
aDisplacement
.
x
<
0
)
|
|
(
xOverscroll
<
0
&
&
aDisplacement
.
x
>
0
)
)
{
mApzc
.
mX
.
EndOverscrollAnimation
(
)
;
}
float
yOverscroll
=
mApzc
.
mY
.
GetOverscroll
(
)
;
if
(
(
yOverscroll
>
0
&
&
aDisplacement
.
y
>
0
)
|
|
(
yOverscroll
<
0
&
&
aDisplacement
.
y
<
0
)
)
{
if
(
!
mApzc
.
mY
.
IsOverscrollAnimationRunning
(
)
)
{
mApzc
.
mY
.
StartOverscrollAnimation
(
mApzc
.
mY
.
GetVelocity
(
)
)
;
}
}
else
if
(
(
yOverscroll
>
0
&
&
aDisplacement
.
y
<
0
)
|
|
(
yOverscroll
<
0
&
&
aDisplacement
.
y
>
0
)
)
{
mApzc
.
mY
.
EndOverscrollAnimation
(
)
;
}
}
ScrollDirections
GetDirections
(
)
const
{
ScrollDirections
directions
;
if
(
mApzc
.
mX
.
IsOverscrollAnimationRunning
(
)
)
{
directions
+
=
ScrollDirection
:
:
eHorizontal
;
}
if
(
mApzc
.
mY
.
IsOverscrollAnimationRunning
(
)
)
{
directions
+
=
ScrollDirection
:
:
eVertical
;
}
return
directions
;
}
;
OverscrollAnimation
*
AsOverscrollAnimation
(
)
override
{
return
this
;
}
bool
IsManagingXAxis
(
)
const
{
return
mApzc
.
mX
.
IsOverscrollAnimationRunning
(
)
;
}
bool
IsManagingYAxis
(
)
const
{
return
mApzc
.
mY
.
IsOverscrollAnimationRunning
(
)
;
}
private
:
AsyncPanZoomController
&
mApzc
;
}
;
class
OverscrollEffectBase
{
public
:
virtual
~
OverscrollEffectBase
(
)
=
default
;
virtual
void
ConsumeOverscroll
(
ParentLayerPoint
&
aOverscroll
ScrollDirections
aOverscrolableDirections
)
=
0
;
virtual
void
HandleFlingOverscroll
(
const
ParentLayerPoint
&
aVelocity
SideBits
aOverscrollSideBits
)
=
0
;
}
;
class
GenericOverscrollEffect
:
public
OverscrollEffectBase
{
public
:
explicit
GenericOverscrollEffect
(
AsyncPanZoomController
&
aApzc
)
:
mApzc
(
aApzc
)
{
}
void
ConsumeOverscroll
(
ParentLayerPoint
&
aOverscroll
ScrollDirections
aOverscrolableDirections
)
override
{
if
(
mApzc
.
mScrollMetadata
.
PrefersReducedMotion
(
)
)
{
return
;
}
if
(
aOverscrolableDirections
.
contains
(
ScrollDirection
:
:
eHorizontal
)
)
{
mApzc
.
mX
.
OverscrollBy
(
aOverscroll
.
x
)
;
aOverscroll
.
x
=
0
;
}
if
(
aOverscrolableDirections
.
contains
(
ScrollDirection
:
:
eVertical
)
)
{
mApzc
.
mY
.
OverscrollBy
(
aOverscroll
.
y
)
;
aOverscroll
.
y
=
0
;
}
if
(
!
aOverscrolableDirections
.
isEmpty
(
)
)
{
mApzc
.
ScheduleComposite
(
)
;
}
}
void
HandleFlingOverscroll
(
const
ParentLayerPoint
&
aVelocity
SideBits
aOverscrollSideBits
)
override
{
if
(
mApzc
.
mScrollMetadata
.
PrefersReducedMotion
(
)
)
{
return
;
}
mApzc
.
StartOverscrollAnimation
(
aVelocity
aOverscrollSideBits
)
;
}
private
:
AsyncPanZoomController
&
mApzc
;
}
;
class
WidgetOverscrollEffect
:
public
OverscrollEffectBase
{
public
:
explicit
WidgetOverscrollEffect
(
AsyncPanZoomController
&
aApzc
)
:
mApzc
(
aApzc
)
{
}
void
ConsumeOverscroll
(
ParentLayerPoint
&
aOverscroll
ScrollDirections
aOverscrolableDirections
)
override
{
RefPtr
<
GeckoContentController
>
controller
=
mApzc
.
GetGeckoContentController
(
)
;
if
(
controller
&
&
!
aOverscrolableDirections
.
isEmpty
(
)
)
{
controller
-
>
UpdateOverscrollOffset
(
mApzc
.
GetGuid
(
)
aOverscroll
.
x
aOverscroll
.
y
mApzc
.
IsRootContent
(
)
)
;
aOverscroll
=
ParentLayerPoint
(
)
;
}
}
void
HandleFlingOverscroll
(
const
ParentLayerPoint
&
aVelocity
SideBits
aOverscrollSideBits
)
override
{
RefPtr
<
GeckoContentController
>
controller
=
mApzc
.
GetGeckoContentController
(
)
;
if
(
controller
)
{
controller
-
>
UpdateOverscrollVelocity
(
mApzc
.
GetGuid
(
)
aVelocity
.
x
aVelocity
.
y
mApzc
.
IsRootContent
(
)
)
;
}
}
private
:
AsyncPanZoomController
&
mApzc
;
}
;
}
}
#
endif
