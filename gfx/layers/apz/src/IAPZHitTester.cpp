#
include
"
IAPZHitTester
.
h
"
#
include
"
APZCTreeManager
.
h
"
#
include
"
AsyncPanZoomController
.
h
"
namespace
mozilla
{
namespace
layers
{
IAPZHitTester
:
:
HitTestResult
IAPZHitTester
:
:
HitTestResult
:
:
CopyWithoutScrollbarNode
(
)
const
{
HitTestResult
result
;
result
.
mTargetApzc
=
mTargetApzc
;
result
.
mHitResult
=
mHitResult
;
result
.
mLayersId
=
mLayersId
;
result
.
mFixedPosSides
=
mFixedPosSides
;
result
.
mHitOverscrollGutter
=
mHitOverscrollGutter
;
return
result
;
}
LayersId
IAPZHitTester
:
:
GetRootLayersId
(
)
const
{
return
mTreeManager
-
>
mRootLayersId
;
}
HitTestingTreeNode
*
IAPZHitTester
:
:
GetRootNode
(
)
const
{
mTreeManager
-
>
mTreeLock
.
AssertCurrentThreadIn
(
)
;
return
mTreeManager
-
>
mRootNode
;
}
HitTestingTreeNode
*
IAPZHitTester
:
:
FindRootNodeForLayersId
(
LayersId
aLayersId
)
const
{
return
mTreeManager
-
>
FindRootNodeForLayersId
(
aLayersId
)
;
}
AsyncPanZoomController
*
IAPZHitTester
:
:
FindRootApzcForLayersId
(
LayersId
aLayersId
)
const
{
HitTestingTreeNode
*
resultNode
=
FindRootNodeForLayersId
(
aLayersId
)
;
return
resultNode
?
resultNode
-
>
GetApzc
(
)
:
nullptr
;
}
already_AddRefed
<
HitTestingTreeNode
>
IAPZHitTester
:
:
GetTargetNode
(
const
ScrollableLayerGuid
&
aGuid
ScrollableLayerGuid
:
:
Comparator
aComparator
)
{
RecursiveMutexAutoLock
lock
(
mTreeManager
-
>
mTreeLock
)
;
return
mTreeManager
-
>
GetTargetNode
(
aGuid
aComparator
)
;
}
void
IAPZHitTester
:
:
InitializeHitTestingTreeNodeAutoLock
(
HitTestingTreeNodeAutoLock
&
aAutoLock
const
RecursiveMutexAutoLock
&
aProofOfTreeLock
RefPtr
<
HitTestingTreeNode
>
&
aNode
)
{
aAutoLock
.
Initialize
(
aProofOfTreeLock
aNode
.
forget
(
)
mTreeManager
-
>
mTreeLock
)
;
}
}
}
