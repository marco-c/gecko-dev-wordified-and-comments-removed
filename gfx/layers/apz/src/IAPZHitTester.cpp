#
include
"
IAPZHitTester
.
h
"
#
include
"
APZCTreeManager
.
h
"
#
include
"
AsyncPanZoomController
.
h
"
namespace
mozilla
{
namespace
layers
{
IAPZHitTester
:
:
HitTestResult
IAPZHitTester
:
:
CloneHitTestResult
(
RecursiveMutexAutoLock
&
aProofOfTreeLock
const
IAPZHitTester
:
:
HitTestResult
&
aHitTestResult
)
const
{
HitTestResult
result
;
result
.
mTargetApzc
=
aHitTestResult
.
mTargetApzc
;
result
.
mHitResult
=
aHitTestResult
.
mHitResult
;
result
.
mLayersId
=
aHitTestResult
.
mLayersId
;
result
.
mFixedPosSides
=
aHitTestResult
.
mFixedPosSides
;
result
.
mHitOverscrollGutter
=
aHitTestResult
.
mHitOverscrollGutter
;
RefPtr
<
HitTestingTreeNode
>
scrollbarNode
=
aHitTestResult
.
mScrollbarNode
.
Get
(
aProofOfTreeLock
)
;
RefPtr
<
HitTestingTreeNode
>
node
=
aHitTestResult
.
mNode
.
Get
(
aProofOfTreeLock
)
;
if
(
aHitTestResult
.
mScrollbarNode
)
{
InitializeHitTestingTreeNodeAutoLock
(
result
.
mScrollbarNode
aProofOfTreeLock
scrollbarNode
)
;
}
if
(
aHitTestResult
.
mNode
)
{
InitializeHitTestingTreeNodeAutoLock
(
result
.
mNode
aProofOfTreeLock
node
)
;
}
return
result
;
}
LayersId
IAPZHitTester
:
:
GetRootLayersId
(
)
const
{
return
mTreeManager
-
>
mRootLayersId
;
}
HitTestingTreeNode
*
IAPZHitTester
:
:
GetRootNode
(
)
const
{
mTreeManager
-
>
mTreeLock
.
AssertCurrentThreadIn
(
)
;
return
mTreeManager
-
>
mRootNode
;
}
HitTestingTreeNode
*
IAPZHitTester
:
:
FindRootNodeForLayersId
(
LayersId
aLayersId
)
const
{
return
mTreeManager
-
>
FindRootNodeForLayersId
(
aLayersId
)
;
}
AsyncPanZoomController
*
IAPZHitTester
:
:
FindRootApzcForLayersId
(
LayersId
aLayersId
)
const
{
HitTestingTreeNode
*
resultNode
=
FindRootNodeForLayersId
(
aLayersId
)
;
return
resultNode
?
resultNode
-
>
GetApzc
(
)
:
nullptr
;
}
already_AddRefed
<
HitTestingTreeNode
>
IAPZHitTester
:
:
GetTargetNode
(
const
ScrollableLayerGuid
&
aGuid
ScrollableLayerGuid
:
:
Comparator
aComparator
)
{
RecursiveMutexAutoLock
lock
(
mTreeManager
-
>
mTreeLock
)
;
return
mTreeManager
-
>
GetTargetNode
(
aGuid
aComparator
)
;
}
void
IAPZHitTester
:
:
InitializeHitTestingTreeNodeAutoLock
(
HitTestingTreeNodeAutoLock
&
aAutoLock
const
RecursiveMutexAutoLock
&
aProofOfTreeLock
RefPtr
<
HitTestingTreeNode
>
&
aNode
)
const
{
aAutoLock
.
Initialize
(
aProofOfTreeLock
aNode
.
forget
(
)
mTreeManager
-
>
mTreeLock
)
;
}
}
}
