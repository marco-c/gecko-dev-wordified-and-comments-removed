#
include
"
mozilla
/
layers
/
FocusTarget
.
h
"
#
include
"
mozilla
/
dom
/
EventTarget
.
h
"
#
include
"
mozilla
/
dom
/
TabParent
.
h
"
#
include
"
mozilla
/
EventDispatcher
.
h
"
#
include
"
mozilla
/
layout
/
RenderFrameParent
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
define
ENABLE_FT_LOGGING
0
#
if
ENABLE_FT_LOGGING
#
define
FT_LOG
(
FMT
.
.
.
)
printf_stderr
(
"
FT
(
%
s
)
:
"
FMT
\
XRE_IsParentProcess
(
)
?
"
chrome
"
:
"
content
"
\
__VA_ARGS__
)
#
else
#
define
FT_LOG
(
.
.
.
)
#
endif
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
layout
;
namespace
mozilla
{
namespace
layers
{
static
already_AddRefed
<
nsIPresShell
>
GetRetargetEventPresShell
(
nsIPresShell
*
aRootPresShell
)
{
MOZ_ASSERT
(
aRootPresShell
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
aRootPresShell
-
>
GetFocusedDOMWindowInOurWindow
(
)
;
if
(
!
window
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIDocument
>
retargetEventDoc
=
window
-
>
GetExtantDoc
(
)
;
if
(
!
retargetEventDoc
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIPresShell
>
presShell
=
retargetEventDoc
-
>
GetShell
(
)
;
return
presShell
.
forget
(
)
;
}
static
bool
HasListenersForKeyEvents
(
nsIContent
*
aContent
)
{
if
(
!
aContent
)
{
return
false
;
}
WidgetEvent
event
(
true
eVoidEvent
)
;
nsTArray
<
EventTarget
*
>
targets
;
nsresult
rv
=
EventDispatcher
:
:
Dispatch
(
aContent
nullptr
&
event
nullptr
nullptr
nullptr
&
targets
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
for
(
size_t
i
=
0
;
i
<
targets
.
Length
(
)
;
i
+
+
)
{
if
(
targets
[
i
]
-
>
HasUntrustedOrNonSystemGroupKeyEventListeners
(
)
)
{
return
true
;
}
}
return
false
;
}
static
bool
IsEditableNode
(
nsINode
*
aNode
)
{
return
aNode
&
&
aNode
-
>
IsEditable
(
)
;
}
FocusTarget
:
:
FocusTarget
(
)
:
mSequenceNumber
(
0
)
mFocusHasKeyEventListeners
(
false
)
mType
(
FocusTarget
:
:
eNone
)
{
}
FocusTarget
:
:
FocusTarget
(
nsIPresShell
*
aRootPresShell
uint64_t
aFocusSequenceNumber
)
:
mSequenceNumber
(
aFocusSequenceNumber
)
mFocusHasKeyEventListeners
(
false
)
{
MOZ_ASSERT
(
aRootPresShell
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIPresShell
>
presShell
=
GetRetargetEventPresShell
(
aRootPresShell
)
;
nsCOMPtr
<
nsIDocument
>
document
=
presShell
-
>
GetDocument
(
)
;
if
(
!
presShell
|
|
!
document
)
{
FT_LOG
(
"
Creating
nil
target
with
seq
=
%
"
PRIu64
"
(
can
'
t
find
retargeted
presshell
)
\
n
"
aFocusSequenceNumber
)
;
mType
=
FocusTarget
:
:
eNone
;
return
;
}
nsCOMPtr
<
nsIContent
>
focusedContent
=
presShell
-
>
GetFocusedContentInOurWindow
(
)
;
mFocusHasKeyEventListeners
=
HasListenersForKeyEvents
(
focusedContent
?
focusedContent
.
get
(
)
:
document
-
>
GetUnfocusedKeyEventTarget
(
)
)
;
if
(
IsEditableNode
(
focusedContent
)
|
|
IsEditableNode
(
document
)
)
{
FT_LOG
(
"
Creating
nil
target
with
seq
=
%
"
PRIu64
"
kl
=
%
d
(
disabling
for
editable
node
)
\
n
"
aFocusSequenceNumber
static_cast
<
int
>
(
mFocusHasKeyEventListeners
)
)
;
mType
=
FocusTarget
:
:
eNone
;
return
;
}
if
(
TabParent
*
browserParent
=
TabParent
:
:
GetFrom
(
focusedContent
)
)
{
RenderFrameParent
*
rfp
=
browserParent
-
>
GetRenderFrame
(
)
;
if
(
rfp
)
{
FT_LOG
(
"
Creating
reflayer
target
with
seq
=
%
"
PRIu64
"
kl
=
%
d
lt
=
%
"
PRIu64
"
\
n
"
aFocusSequenceNumber
mFocusHasKeyEventListeners
rfp
-
>
GetLayersId
(
)
)
;
mType
=
FocusTarget
:
:
eRefLayer
;
mData
.
mRefLayerId
=
rfp
-
>
GetLayersId
(
)
;
return
;
}
FT_LOG
(
"
Creating
nil
target
with
seq
=
%
"
PRIu64
"
kl
=
%
d
(
remote
browser
missing
layers
id
)
\
n
"
aFocusSequenceNumber
mFocusHasKeyEventListeners
)
;
mType
=
FocusTarget
:
:
eNone
;
return
;
}
if
(
focusedContent
)
{
FT_LOG
(
"
Creating
nil
target
with
seq
=
%
"
PRIu64
"
kl
=
%
d
(
disabling
for
focusing
an
element
)
\
n
"
mFocusHasKeyEventListeners
aFocusSequenceNumber
)
;
mType
=
FocusTarget
:
:
eNone
;
return
;
}
nsCOMPtr
<
nsIContent
>
selectedContent
=
presShell
-
>
GetSelectedContentForScrolling
(
)
;
nsIScrollableFrame
*
horizontal
=
presShell
-
>
GetScrollableFrameToScrollForContent
(
selectedContent
.
get
(
)
nsIPresShell
:
:
eHorizontal
)
;
nsIScrollableFrame
*
vertical
=
presShell
-
>
GetScrollableFrameToScrollForContent
(
selectedContent
.
get
(
)
nsIPresShell
:
:
eVertical
)
;
mType
=
FocusTarget
:
:
eScrollLayer
;
mData
.
mScrollTargets
.
mHorizontal
=
nsLayoutUtils
:
:
FindIDForScrollableFrame
(
horizontal
)
;
mData
.
mScrollTargets
.
mVertical
=
nsLayoutUtils
:
:
FindIDForScrollableFrame
(
vertical
)
;
FT_LOG
(
"
Creating
scroll
target
with
seq
=
%
"
PRIu64
"
kl
=
%
d
h
=
%
"
PRIu64
"
v
=
%
"
PRIu64
"
\
n
"
aFocusSequenceNumber
mFocusHasKeyEventListeners
mData
.
mScrollTargets
.
mHorizontal
mData
.
mScrollTargets
.
mVertical
)
;
}
bool
FocusTarget
:
:
operator
=
=
(
const
FocusTarget
&
aRhs
)
const
{
if
(
mSequenceNumber
!
=
aRhs
.
mSequenceNumber
|
|
mFocusHasKeyEventListeners
!
=
aRhs
.
mFocusHasKeyEventListeners
|
|
mType
!
=
aRhs
.
mType
)
{
return
false
;
}
if
(
mType
=
=
FocusTarget
:
:
eRefLayer
)
{
return
mData
.
mRefLayerId
=
=
aRhs
.
mData
.
mRefLayerId
;
}
else
if
(
mType
=
=
FocusTarget
:
:
eScrollLayer
)
{
return
mData
.
mScrollTargets
.
mHorizontal
=
=
aRhs
.
mData
.
mScrollTargets
.
mHorizontal
&
&
mData
.
mScrollTargets
.
mVertical
=
=
aRhs
.
mData
.
mScrollTargets
.
mVertical
;
}
return
true
;
}
}
}
