#
ifndef
mozilla_layers_FocusState_h
#
define
mozilla_layers_FocusState_h
#
include
<
unordered_map
>
#
include
<
unordered_set
>
#
include
"
mozilla
/
layers
/
FocusTarget
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
namespace
mozilla
{
namespace
layers
{
class
FocusState
final
{
public
:
FocusState
(
)
;
uint64_t
LastAPZProcessedEvent
(
)
const
;
void
ReceiveFocusChangingEvent
(
)
;
void
Update
(
LayersId
aRootLayerTreeId
LayersId
aOriginatingLayersId
const
FocusTarget
&
aTarget
)
;
void
RemoveFocusTarget
(
LayersId
aLayersId
)
;
Maybe
<
ScrollableLayerGuid
>
GetHorizontalTarget
(
)
const
;
Maybe
<
ScrollableLayerGuid
>
GetVerticalTarget
(
)
const
;
bool
CanIgnoreKeyboardShortcutMisses
(
)
const
;
private
:
bool
IsCurrent
(
const
MutexAutoLock
&
aLock
)
const
;
private
:
mutable
Mutex
mMutex
;
std
:
:
unordered_map
<
LayersId
FocusTarget
LayersId
:
:
HashFn
>
mFocusTree
;
uint64_t
mLastAPZProcessedEvent
;
uint64_t
mLastContentProcessedEvent
;
bool
mFocusHasKeyEventListeners
;
bool
mReceivedUpdate
;
LayersId
mFocusLayersId
;
ScrollableLayerGuid
:
:
ViewID
mFocusHorizontalTarget
;
ScrollableLayerGuid
:
:
ViewID
mFocusVerticalTarget
;
}
;
}
}
#
endif
