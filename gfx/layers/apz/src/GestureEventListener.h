#
ifndef
mozilla_layers_GestureEventListener_h
#
define
mozilla_layers_GestureEventListener_h
#
include
"
InputData
.
h
"
#
include
"
Units
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
CancelableRunnable
;
namespace
layers
{
class
AsyncPanZoomController
;
class
GestureEventListener
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
GestureEventListener
)
explicit
GestureEventListener
(
AsyncPanZoomController
*
aAsyncPanZoomController
)
;
nsEventStatus
HandleInputEvent
(
const
MultiTouchInput
&
aEvent
)
;
int32_t
GetLastTouchIdentifier
(
)
const
;
static
void
SetLongTapEnabled
(
bool
aLongTapEnabled
)
;
private
:
~
GestureEventListener
(
)
;
enum
GestureState
{
GESTURE_NONE
GESTURE_FIRST_SINGLE_TOUCH_DOWN
GESTURE_FIRST_SINGLE_TOUCH_MAX_TAP_DOWN
GESTURE_FIRST_SINGLE_TOUCH_UP
GESTURE_SECOND_SINGLE_TOUCH_DOWN
GESTURE_LONG_TOUCH_DOWN
GESTURE_MULTI_TOUCH_DOWN
GESTURE_PINCH
GESTURE_ONE_TOUCH_PINCH
}
;
nsEventStatus
HandleInputTouchSingleStart
(
)
;
nsEventStatus
HandleInputTouchMultiStart
(
)
;
nsEventStatus
HandleInputTouchEnd
(
)
;
nsEventStatus
HandleInputTouchMove
(
)
;
nsEventStatus
HandleInputTouchCancel
(
)
;
void
HandleInputTimeoutLongTap
(
)
;
void
HandleInputTimeoutMaxTap
(
bool
aDuringFastFling
)
;
void
EnterFirstSingleTouchDown
(
)
;
void
TriggerSingleTapConfirmedEvent
(
)
;
bool
MoveDistanceExceeds
(
ScreenCoord
aThreshold
)
const
;
bool
MoveDistanceIsLarge
(
)
const
;
bool
SecondTapIsFar
(
)
const
;
ScreenCoord
GetYSpanFromGestureStartPoint
(
)
;
void
SetState
(
GestureState
aState
)
;
RefPtr
<
AsyncPanZoomController
>
mAsyncPanZoomController
;
nsTArray
<
SingleTouchData
>
mTouches
;
GestureState
mState
;
ScreenCoord
mSpanChange
;
ScreenCoord
mPreviousSpan
;
ScreenCoord
mFocusChange
;
ScreenPoint
mPreviousFocus
;
MultiTouchInput
mLastTouchInput
;
MultiTouchInput
mLastTapInput
;
ScreenPoint
mOneTouchPinchStartPosition
;
ScreenPoint
mTouchStartPosition
;
ExternalPoint
mTouchStartOffset
;
RefPtr
<
CancelableRunnable
>
mLongTapTimeoutTask
;
void
CancelLongTapTimeoutTask
(
)
;
void
CreateLongTapTimeoutTask
(
)
;
RefPtr
<
CancelableRunnable
>
mMaxTapTimeoutTask
;
void
CancelMaxTapTimeoutTask
(
)
;
void
CreateMaxTapTimeoutTask
(
)
;
Maybe
<
bool
>
mSingleTapSent
;
}
;
}
}
#
endif
