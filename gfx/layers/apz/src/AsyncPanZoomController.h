#
ifndef
mozilla_layers_AsyncPanZoomController_h
#
define
mozilla_layers_AsyncPanZoomController_h
#
include
"
CrossProcessMutex
.
h
"
#
include
"
mozilla
/
layers
/
GeckoContentController
.
h
"
#
include
"
mozilla
/
layers
/
APZCTreeManager
.
h
"
#
include
"
mozilla
/
layers
/
AsyncPanZoomAnimation
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
InputData
.
h
"
#
include
"
Axis
.
h
"
#
include
"
InputQueue
.
h
"
#
include
"
APZUtils
.
h
"
#
include
"
Layers
.
h
"
#
include
"
LayersTypes
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
PotentialCheckerboardDurationTracker
.
h
"
#
if
defined
(
MOZ_ANDROID_APZ
)
#
include
"
OverScroller
.
h
"
#
endif
#
include
"
base
/
message_loop
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
SharedMemoryBasic
;
}
namespace
layers
{
class
AsyncDragMetrics
;
struct
ScrollableLayerGuid
;
class
CompositorBridgeParent
;
class
GestureEventListener
;
class
PCompositorBridgeParent
;
struct
AsyncTransform
;
class
AsyncPanZoomAnimation
;
#
if
defined
(
MOZ_ANDROID_APZ
)
class
FlingOverScrollerAnimation
;
#
else
class
FlingAnimation
;
#
endif
class
InputBlockState
;
class
TouchBlockState
;
class
PanGestureBlockState
;
class
OverscrollHandoffChain
;
class
StateChangeNotificationBlocker
;
class
CheckerboardEvent
;
class
OverscrollEffectBase
;
class
WidgetOverscrollEffect
;
class
GenericOverscrollEffect
;
class
AsyncPanZoomController
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
AsyncPanZoomController
)
typedef
mozilla
:
:
MonitorAutoLock
MonitorAutoLock
;
typedef
mozilla
:
:
gfx
:
:
Matrix4x4
Matrix4x4
;
public
:
enum
GestureBehavior
{
DEFAULT_GESTURES
USE_GESTURE_DETECTOR
}
;
static
ScreenCoord
GetTouchStartTolerance
(
)
;
AsyncPanZoomController
(
uint64_t
aLayersId
APZCTreeManager
*
aTreeManager
const
RefPtr
<
InputQueue
>
&
aInputQueue
GeckoContentController
*
aController
GestureBehavior
aGestures
=
DEFAULT_GESTURES
)
;
static
void
InitializeGlobalState
(
)
;
void
ZoomToRect
(
CSSRect
aRect
const
uint32_t
aFlags
)
;
void
UpdateZoomConstraints
(
const
ZoomConstraints
&
aConstraints
)
;
ZoomConstraints
GetZoomConstraints
(
)
const
;
void
PostDelayedTask
(
already_AddRefed
<
Runnable
>
aTask
int
aDelayMs
)
;
bool
AdvanceAnimations
(
const
TimeStamp
&
aSampleTime
)
;
bool
UpdateAnimation
(
const
TimeStamp
&
aSampleTime
nsTArray
<
RefPtr
<
Runnable
>
>
*
aOutDeferredTasks
)
;
void
NotifyLayersUpdated
(
const
ScrollMetadata
&
aScrollMetadata
bool
aIsFirstPaint
bool
aThisLayerTreeUpdated
)
;
void
SetCompositorBridgeParent
(
CompositorBridgeParent
*
aCompositorBridgeParent
)
;
void
ShareFrameMetricsAcrossProcesses
(
)
;
void
Destroy
(
)
;
bool
IsDestroyed
(
)
const
;
Matrix4x4
GetTransformToLastDispatchedPaint
(
)
const
;
uint32_t
GetCheckerboardMagnitude
(
)
const
;
void
ReportCheckerboard
(
const
TimeStamp
&
aSampleTime
)
;
bool
IsCurrentlyCheckerboarding
(
)
const
;
static
const
ScreenMargin
CalculatePendingDisplayPort
(
const
FrameMetrics
&
aFrameMetrics
const
ParentLayerPoint
&
aVelocity
)
;
nsEventStatus
HandleDragEvent
(
const
MouseInput
&
aEvent
const
AsyncDragMetrics
&
aDragMetrics
)
;
nsEventStatus
HandleInputEvent
(
const
InputData
&
aEvent
const
ScreenToParentLayerMatrix4x4
&
aTransformToApzc
)
;
nsEventStatus
HandleGestureEvent
(
const
InputData
&
aEvent
)
;
void
HandleTouchVelocity
(
uint32_t
aTimesampMs
float
aSpeedY
)
;
void
GetGuid
(
ScrollableLayerGuid
*
aGuidOut
)
const
;
ScrollableLayerGuid
GetGuid
(
)
const
;
bool
Matches
(
const
ScrollableLayerGuid
&
aGuid
)
;
bool
HasTreeManager
(
const
APZCTreeManager
*
aTreeManager
)
const
;
void
StartAnimation
(
AsyncPanZoomAnimation
*
aAnimation
)
;
void
CancelAnimation
(
CancelAnimationFlags
aFlags
=
Default
)
;
void
AdjustScrollForSurfaceShift
(
const
ScreenPoint
&
aShift
)
;
void
ClearOverscroll
(
)
;
bool
HasScrollgrab
(
)
const
{
return
mScrollMetadata
.
GetHasScrollgrab
(
)
;
}
bool
IsPannable
(
)
const
;
bool
IsFlingingFast
(
)
const
;
int32_t
GetLastTouchIdentifier
(
)
const
;
ScreenToParentLayerMatrix4x4
GetTransformToThis
(
)
const
;
ScreenPoint
ToScreenCoordinates
(
const
ParentLayerPoint
&
aVector
const
ParentLayerPoint
&
aAnchor
)
const
;
ParentLayerPoint
ToParentLayerCoordinates
(
const
ScreenPoint
&
aVector
const
ScreenPoint
&
aAnchor
)
const
;
bool
CanScroll
(
const
InputData
&
aEvent
)
const
;
bool
CanScrollWithWheel
(
const
ParentLayerPoint
&
aDelta
)
const
;
bool
CanScroll
(
Layer
:
:
ScrollDirection
aDirection
)
const
;
void
NotifyMozMouseScrollEvent
(
const
nsString
&
aString
)
const
;
protected
:
virtual
~
AsyncPanZoomController
(
)
;
TimeStamp
GetFrameTime
(
)
const
;
nsEventStatus
OnTouchStart
(
const
MultiTouchInput
&
aEvent
)
;
nsEventStatus
OnTouchMove
(
const
MultiTouchInput
&
aEvent
)
;
nsEventStatus
OnTouchEnd
(
const
MultiTouchInput
&
aEvent
)
;
nsEventStatus
OnTouchCancel
(
const
MultiTouchInput
&
aEvent
)
;
nsEventStatus
OnScaleBegin
(
const
PinchGestureInput
&
aEvent
)
;
nsEventStatus
OnScale
(
const
PinchGestureInput
&
aEvent
)
;
nsEventStatus
OnScaleEnd
(
const
PinchGestureInput
&
aEvent
)
;
nsEventStatus
OnPanMayBegin
(
const
PanGestureInput
&
aEvent
)
;
nsEventStatus
OnPanCancelled
(
const
PanGestureInput
&
aEvent
)
;
nsEventStatus
OnPanBegin
(
const
PanGestureInput
&
aEvent
)
;
nsEventStatus
OnPan
(
const
PanGestureInput
&
aEvent
bool
aFingersOnTouchpad
)
;
nsEventStatus
OnPanEnd
(
const
PanGestureInput
&
aEvent
)
;
nsEventStatus
OnPanMomentumStart
(
const
PanGestureInput
&
aEvent
)
;
nsEventStatus
OnPanMomentumEnd
(
const
PanGestureInput
&
aEvent
)
;
nsEventStatus
OnScrollWheel
(
const
ScrollWheelInput
&
aEvent
)
;
ParentLayerPoint
GetScrollWheelDelta
(
const
ScrollWheelInput
&
aEvent
)
const
;
nsEventStatus
OnLongPress
(
const
TapGestureInput
&
aEvent
)
;
nsEventStatus
OnLongPressUp
(
const
TapGestureInput
&
aEvent
)
;
nsEventStatus
OnSingleTapUp
(
const
TapGestureInput
&
aEvent
)
;
nsEventStatus
OnSingleTapConfirmed
(
const
TapGestureInput
&
aEvent
)
;
nsEventStatus
OnDoubleTap
(
const
TapGestureInput
&
aEvent
)
;
nsEventStatus
OnCancelTap
(
const
TapGestureInput
&
aEvent
)
;
void
ScrollBy
(
const
CSSPoint
&
aOffset
)
;
void
ScaleWithFocus
(
float
aScale
const
CSSPoint
&
aFocus
)
;
void
ScheduleComposite
(
)
;
void
ScheduleCompositeAndMaybeRepaint
(
)
;
ScreenCoord
PanDistance
(
)
const
;
ParentLayerPoint
PanStart
(
)
const
;
const
ParentLayerPoint
GetVelocityVector
(
)
const
;
void
SetVelocityVector
(
const
ParentLayerPoint
&
aVelocityVector
)
;
ParentLayerPoint
GetFirstTouchPoint
(
const
MultiTouchInput
&
aEvent
)
;
void
HandlePanningWithTouchAction
(
double
angle
)
;
void
HandlePanning
(
double
angle
)
;
void
HandlePanningUpdate
(
const
ScreenPoint
&
aDelta
)
;
nsEventStatus
StartPanning
(
const
MultiTouchInput
&
aStartPoint
)
;
void
UpdateWithTouchAtDevicePoint
(
const
MultiTouchInput
&
aEvent
)
;
void
TrackTouch
(
const
MultiTouchInput
&
aEvent
)
;
void
RequestContentRepaint
(
)
;
void
RequestContentRepaint
(
const
FrameMetrics
&
aFrameMetrics
const
ParentLayerPoint
&
aVelocity
)
;
const
FrameMetrics
&
GetFrameMetrics
(
)
const
;
APZCTreeManager
*
GetApzcTreeManager
(
)
const
;
bool
ConvertToGecko
(
const
ScreenIntPoint
&
aPoint
CSSPoint
*
aOut
)
;
enum
AxisLockMode
{
FREE
STANDARD
STICKY
}
;
static
AxisLockMode
GetAxisLockMode
(
)
;
nsEventStatus
GenerateSingleTap
(
const
ScreenIntPoint
&
aPoint
mozilla
:
:
Modifiers
aModifiers
)
;
void
OnTouchEndOrCancel
(
)
;
uint64_t
mLayersId
;
RefPtr
<
CompositorBridgeParent
>
mCompositorBridgeParent
;
RefPtr
<
GeckoContentController
>
mGeckoContentController
;
RefPtr
<
GestureEventListener
>
mGestureEventListener
;
mutable
Monitor
mRefPtrMonitor
;
Atomic
<
APZCTreeManager
*
>
mTreeManager
;
already_AddRefed
<
GeckoContentController
>
GetGeckoContentController
(
)
const
;
already_AddRefed
<
GestureEventListener
>
GetGestureEventListener
(
)
const
;
bool
mSharingFrameMetricsAcrossProcesses
;
PCompositorBridgeParent
*
GetSharedFrameMetricsCompositor
(
)
;
protected
:
ScrollMetadata
mScrollMetadata
;
FrameMetrics
&
mFrameMetrics
;
mutable
ReentrantMonitor
mMonitor
;
private
:
ScrollMetadata
mLastContentPaintMetadata
;
FrameMetrics
&
mLastContentPaintMetrics
;
FrameMetrics
mLastPaintRequestMetrics
;
FrameMetrics
mExpectedGeckoMetrics
;
AxisX
mX
;
AxisY
mY
;
bool
mPanDirRestricted
;
ZoomConstraints
mZoomConstraints
;
TimeStamp
mLastSampleTime
;
TimeStamp
mLastCheckerboardReport
;
ParentLayerPoint
mLastZoomFocus
;
RefPtr
<
AsyncPanZoomAnimation
>
mAnimation
;
UniquePtr
<
OverscrollEffectBase
>
mOverscrollEffect
;
friend
class
Axis
;
public
:
enum
AsyncMode
{
NORMAL
RESPECT_FORCE_DISABLE
}
;
ParentLayerPoint
GetCurrentAsyncScrollOffset
(
AsyncMode
aMode
)
const
;
AsyncTransformComponentMatrix
GetOverscrollTransform
(
AsyncMode
aMode
)
const
;
AsyncTransform
GetCurrentAsyncTransform
(
AsyncMode
aMode
)
const
;
AsyncTransformComponentMatrix
GetCurrentAsyncTransformWithOverscroll
(
AsyncMode
aMode
)
const
;
protected
:
enum
PanZoomState
{
NOTHING
FLING
TOUCHING
PANNING
PANNING_LOCKED_X
PANNING_LOCKED_Y
PAN_MOMENTUM
PINCHING
ANIMATING_ZOOM
OVERSCROLL_ANIMATION
SMOOTH_SCROLL
WHEEL_SCROLL
}
;
PanZoomState
mState
;
private
:
friend
class
StateChangeNotificationBlocker
;
int
mNotificationBlockers
;
void
SetState
(
PanZoomState
aState
)
;
void
DispatchStateChangeNotification
(
PanZoomState
aOldState
PanZoomState
aNewState
)
;
static
bool
IsTransformingState
(
PanZoomState
aState
)
;
public
:
void
FlushRepaintForNewInputBlock
(
)
;
bool
ArePointerEventsConsumable
(
TouchBlockState
*
aBlock
uint32_t
aTouchPoints
)
;
void
ResetTouchInputState
(
)
;
const
RefPtr
<
InputQueue
>
&
GetInputQueue
(
)
const
;
private
:
void
CancelAnimationAndGestureState
(
)
;
RefPtr
<
InputQueue
>
mInputQueue
;
CancelableBlockState
*
CurrentInputBlock
(
)
const
;
TouchBlockState
*
CurrentTouchBlock
(
)
const
;
bool
HasReadyTouchBlock
(
)
const
;
PanGestureBlockState
*
CurrentPanGestureBlock
(
)
const
;
private
:
public
:
bool
AttemptFling
(
FlingHandoffState
&
aHandoffState
)
;
private
:
#
if
defined
(
MOZ_ANDROID_APZ
)
friend
class
FlingOverScrollerAnimation
;
#
else
friend
class
FlingAnimation
;
#
endif
friend
class
OverscrollAnimation
;
friend
class
SmoothScrollAnimation
;
friend
class
WheelScrollAnimation
;
friend
class
GenericOverscrollEffect
;
friend
class
WidgetOverscrollEffect
;
ParentLayerPoint
mLastFlingVelocity
;
TimeStamp
mLastFlingTime
;
void
HandleFlingOverscroll
(
const
ParentLayerPoint
&
aVelocity
const
RefPtr
<
const
OverscrollHandoffChain
>
&
aOverscrollHandoffChain
const
RefPtr
<
const
AsyncPanZoomController
>
&
aScrolledApzc
)
;
void
HandleSmoothScrollOverscroll
(
const
ParentLayerPoint
&
aVelocity
)
;
void
AcceptFling
(
FlingHandoffState
&
aHandoffState
)
;
void
StartOverscrollAnimation
(
const
ParentLayerPoint
&
aVelocity
)
;
void
SmoothScrollTo
(
const
CSSPoint
&
aDestination
)
;
bool
AllowScrollHandoffInCurrentBlock
(
)
const
;
public
:
void
SetParent
(
AsyncPanZoomController
*
aParent
)
{
mParent
=
aParent
;
}
AsyncPanZoomController
*
GetParent
(
)
const
{
return
mParent
;
}
bool
HasNoParentWithSameLayersId
(
)
const
{
return
!
mParent
|
|
(
mParent
-
>
mLayersId
!
=
mLayersId
)
;
}
bool
IsRootForLayersId
(
)
const
{
ReentrantMonitorAutoEnter
lock
(
mMonitor
)
;
return
mScrollMetadata
.
IsLayersIdRoot
(
)
;
}
bool
IsRootContent
(
)
const
{
ReentrantMonitorAutoEnter
lock
(
mMonitor
)
;
return
mFrameMetrics
.
IsRootContent
(
)
;
}
private
:
RefPtr
<
AsyncPanZoomController
>
mParent
;
public
:
FrameMetrics
:
:
ViewID
GetScrollHandoffParentId
(
)
const
{
return
mScrollMetadata
.
GetScrollParentId
(
)
;
}
bool
AttemptScroll
(
ParentLayerPoint
&
aStartPoint
ParentLayerPoint
&
aEndPoint
OverscrollHandoffState
&
aOverscrollHandoffState
)
;
void
FlushRepaintForOverscrollHandoff
(
)
;
bool
SnapBackIfOverscrolled
(
)
;
RefPtr
<
const
OverscrollHandoffChain
>
BuildOverscrollHandoffChain
(
)
;
private
:
void
CallDispatchScroll
(
ParentLayerPoint
&
aStartPoint
ParentLayerPoint
&
aEndPoint
OverscrollHandoffState
&
aOverscrollHandoffState
)
;
void
OverscrollForPanning
(
ParentLayerPoint
&
aOverscroll
const
ScreenPoint
&
aPanDistance
)
;
void
OverscrollBy
(
ParentLayerPoint
&
aOverscroll
)
;
public
:
void
SetAncestorTransform
(
const
Matrix4x4
&
aTransformToLayer
)
{
mAncestorTransform
=
aTransformToLayer
;
}
Matrix4x4
GetAncestorTransform
(
)
const
{
return
mAncestorTransform
;
}
bool
Contains
(
const
ScreenIntPoint
&
aPoint
)
const
;
bool
IsOverscrolled
(
)
const
{
return
mX
.
IsOverscrolled
(
)
|
|
mY
.
IsOverscrolled
(
)
;
}
bool
IsInPanningState
(
)
const
;
private
:
Matrix4x4
mAncestorTransform
;
private
:
const
uint32_t
mAPZCId
;
RefPtr
<
ipc
:
:
SharedMemoryBasic
>
mSharedFrameMetricsBuffer
;
CrossProcessMutex
*
mSharedLock
;
void
UpdateSharedCompositorFrameMetrics
(
)
;
void
ShareCompositorFrameMetrics
(
)
;
public
:
void
SetTestAsyncScrollOffset
(
const
CSSPoint
&
aPoint
)
{
mTestAsyncScrollOffset
=
aPoint
;
}
void
SetTestAsyncZoom
(
const
LayerToParentLayerScale
&
aZoom
)
{
mTestAsyncZoom
=
aZoom
;
}
void
MarkAsyncTransformAppliedToContent
(
)
{
mAsyncTransformAppliedToContent
=
true
;
}
bool
GetAsyncTransformAppliedToContent
(
)
const
{
return
mAsyncTransformAppliedToContent
;
}
uint64_t
GetLayersId
(
)
const
{
return
mLayersId
;
}
private
:
CSSPoint
mTestAsyncScrollOffset
;
LayerToParentLayerScale
mTestAsyncZoom
;
bool
mAsyncTransformAppliedToContent
;
private
:
Mutex
mCheckerboardEventLock
;
UniquePtr
<
CheckerboardEvent
>
mCheckerboardEvent
;
PotentialCheckerboardDurationTracker
mPotentialCheckerboardTracker
;
bool
MaybeAdjustDeltaForScrollSnapping
(
const
ScrollWheelInput
&
aEvent
ParentLayerPoint
&
aDelta
CSSPoint
&
aStartPosition
)
;
void
ScrollSnap
(
)
;
void
ScrollSnapToDestination
(
)
;
void
ScrollSnapNear
(
const
CSSPoint
&
aDestination
)
;
Maybe
<
CSSPoint
>
FindSnapPointNear
(
const
CSSPoint
&
aDestination
nsIScrollableFrame
:
:
ScrollUnit
aUnit
)
;
#
if
defined
(
MOZ_ANDROID_APZ
)
widget
:
:
sdk
:
:
OverScroller
:
:
GlobalRef
mOverScroller
;
#
endif
}
;
}
}
#
endif
