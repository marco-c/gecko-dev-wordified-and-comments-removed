#
include
"
mozilla
/
layers
/
APZPublicUtils
.
h
"
#
include
"
AsyncPanZoomController
.
h
"
#
include
"
mozilla
/
HelperMacros
.
h
"
#
include
"
mozilla
/
StaticPrefs_general
.
h
"
namespace
mozilla
{
namespace
layers
{
namespace
apz
{
void
InitializeGlobalState
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
AsyncPanZoomController
:
:
InitializeGlobalState
(
)
;
}
const
ScreenMargin
CalculatePendingDisplayPort
(
const
FrameMetrics
&
aFrameMetrics
const
ParentLayerPoint
&
aVelocity
)
{
return
AsyncPanZoomController
:
:
CalculatePendingDisplayPort
(
aFrameMetrics
aVelocity
)
;
}
gfx
:
:
IntSize
GetDisplayportAlignmentMultiplier
(
const
ScreenSize
&
aBaseSize
)
{
return
AsyncPanZoomController
:
:
GetDisplayportAlignmentMultiplier
(
aBaseSize
)
;
}
static
int32_t
GetNormalizedAppVersion
(
)
{
static
int32_t
sAppVersion
=
0
;
if
(
sAppVersion
=
=
0
)
{
const
char
*
kVersion
=
MOZ_STRINGIFY
(
MOZ_APP_VERSION
)
;
long
version
=
strtol
(
kVersion
nullptr
10
)
;
if
(
version
<
81
|
|
version
>
86
)
{
version
=
86
;
}
sAppVersion
=
static_cast
<
int32_t
>
(
version
)
;
}
return
sAppVersion
;
}
std
:
:
pair
<
int32_t
int32_t
>
GetMouseWheelAnimationDurations
(
)
{
int32_t
minMS
=
StaticPrefs
:
:
general_smoothScroll_mouseWheel_durationMinMS
(
)
;
int32_t
maxMS
=
StaticPrefs
:
:
general_smoothScroll_mouseWheel_durationMaxMS
(
)
;
const
int32_t
oldMin
=
200
;
const
int32_t
oldMax
=
400
;
int32_t
migration
=
StaticPrefs
:
:
general_smoothScroll_mouseWheel_migrationPercent
(
)
;
int32_t
version
=
GetNormalizedAppVersion
(
)
;
int32_t
minMigrationPercentage
=
std
:
:
max
(
0
(
version
-
82
)
*
25
)
;
MOZ_ASSERT
(
minMigrationPercentage
>
=
0
&
&
minMigrationPercentage
<
=
100
)
;
migration
=
clamped
(
migration
minMigrationPercentage
100
)
;
minMS
=
(
(
oldMin
*
(
100
-
migration
)
)
+
(
minMS
*
migration
)
)
/
100
;
maxMS
=
(
(
oldMax
*
(
100
-
migration
)
)
+
(
maxMS
*
migration
)
)
/
100
;
return
std
:
:
make_pair
(
minMS
maxMS
)
;
}
ScrollAnimationBezierPhysicsSettings
ComputeBezierAnimationSettingsForOrigin
(
ScrollOrigin
aOrigin
)
{
int32_t
minMS
=
0
;
int32_t
maxMS
=
0
;
bool
isOriginSmoothnessEnabled
=
false
;
#
define
READ_DURATIONS
(
prefbase
)
\
isOriginSmoothnessEnabled
=
StaticPrefs
:
:
general_smoothScroll
(
)
&
&
\
StaticPrefs
:
:
general_smoothScroll_
#
#
prefbase
(
)
;
\
if
(
isOriginSmoothnessEnabled
)
{
\
minMS
=
StaticPrefs
:
:
general_smoothScroll_
#
#
prefbase
#
#
_durationMinMS
(
)
;
\
maxMS
=
StaticPrefs
:
:
general_smoothScroll_
#
#
prefbase
#
#
_durationMaxMS
(
)
;
\
}
switch
(
aOrigin
)
{
case
ScrollOrigin
:
:
Pixels
:
READ_DURATIONS
(
pixels
)
break
;
case
ScrollOrigin
:
:
Lines
:
READ_DURATIONS
(
lines
)
break
;
case
ScrollOrigin
:
:
Pages
:
READ_DURATIONS
(
pages
)
break
;
case
ScrollOrigin
:
:
MouseWheel
:
READ_DURATIONS
(
mouseWheel
)
break
;
case
ScrollOrigin
:
:
Scrollbars
:
READ_DURATIONS
(
scrollbars
)
break
;
default
:
READ_DURATIONS
(
other
)
break
;
}
#
undef
READ_DURATIONS
if
(
aOrigin
=
=
ScrollOrigin
:
:
MouseWheel
&
&
isOriginSmoothnessEnabled
)
{
std
:
:
tie
(
minMS
maxMS
)
=
GetMouseWheelAnimationDurations
(
)
;
}
if
(
isOriginSmoothnessEnabled
)
{
static
const
int32_t
kSmoothScrollMaxAllowedAnimationDurationMS
=
10000
;
maxMS
=
clamped
(
maxMS
0
kSmoothScrollMaxAllowedAnimationDurationMS
)
;
minMS
=
clamped
(
minMS
0
maxMS
)
;
}
double
intervalRatio
=
(
(
double
)
StaticPrefs
:
:
general_smoothScroll_durationToIntervalRatio
(
)
)
/
100
.
0
;
intervalRatio
=
std
:
:
max
(
1
.
0
intervalRatio
)
;
return
ScrollAnimationBezierPhysicsSettings
{
minMS
maxMS
intervalRatio
}
;
}
}
}
}
