#
include
"
AndroidAPZ
.
h
"
#
include
"
AsyncPanZoomController
.
h
"
#
include
"
GeneratedJNIWrappers
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
OverscrollHandoffState
.
h
"
#
include
"
OverScroller
.
h
"
#
define
ANDROID_APZ_LOG
(
.
.
.
)
namespace
mozilla
{
namespace
layers
{
static
const
float
BOUNDS_EPSILON
=
5
.
0f
;
static
const
int32_t
MAX_OVERSCROLL_COUNT
=
30
;
AndroidSpecificState
:
:
AndroidSpecificState
(
)
{
widget
:
:
sdk
:
:
OverScroller
:
:
LocalRef
scroller
;
if
(
widget
:
:
sdk
:
:
OverScroller
:
:
New
(
widget
:
:
GeckoAppShell
:
:
GetApplicationContext
(
)
&
scroller
)
!
=
NS_OK
)
{
ANDROID_APZ_LOG
(
"
%
p
Failed
to
create
Android
OverScroller
\
n
"
this
)
;
return
;
}
mOverScroller
=
scroller
;
}
AndroidFlingAnimation
:
:
AndroidFlingAnimation
(
AsyncPanZoomController
&
aApzc
PlatformSpecificStateBase
*
aPlatformSpecificState
const
RefPtr
<
const
OverscrollHandoffChain
>
&
aOverscrollHandoffChain
bool
aFlingIsHandoff
const
RefPtr
<
const
AsyncPanZoomController
>
&
aScrolledApzc
)
:
mApzc
(
aApzc
)
mOverscrollHandoffChain
(
aOverscrollHandoffChain
)
mScrolledApzc
(
aScrolledApzc
)
mSentBounceX
(
false
)
mSentBounceY
(
false
)
mOverScrollCount
(
0
)
{
MOZ_ASSERT
(
mOverscrollHandoffChain
)
;
MOZ_ASSERT
(
aPlatformSpecificState
-
>
AsAndroidSpecificState
(
)
)
;
mOverScroller
=
aPlatformSpecificState
-
>
AsAndroidSpecificState
(
)
-
>
mOverScroller
;
MOZ_ASSERT
(
mOverScroller
)
;
if
(
!
mOverscrollHandoffChain
-
>
CanScrollInDirection
(
&
mApzc
Layer
:
:
HORIZONTAL
)
)
{
ReentrantMonitorAutoEnter
lock
(
mApzc
.
mMonitor
)
;
mApzc
.
mX
.
SetVelocity
(
0
)
;
}
if
(
!
mOverscrollHandoffChain
-
>
CanScrollInDirection
(
&
mApzc
Layer
:
:
VERTICAL
)
)
{
ReentrantMonitorAutoEnter
lock
(
mApzc
.
mMonitor
)
;
mApzc
.
mY
.
SetVelocity
(
0
)
;
}
ParentLayerPoint
velocity
=
mApzc
.
GetVelocityVector
(
)
;
float
length
=
velocity
.
Length
(
)
;
if
(
length
>
0
.
0f
)
{
mFlingDirection
=
velocity
/
length
;
}
mStartOffset
.
x
=
mPreviousOffset
.
x
=
mApzc
.
mX
.
GetOrigin
(
)
.
value
;
mStartOffset
.
y
=
mPreviousOffset
.
y
=
mApzc
.
mY
.
GetOrigin
(
)
.
value
;
mOverScroller
-
>
Fling
(
(
int32_t
)
mStartOffset
.
x
(
int32_t
)
mStartOffset
.
y
(
int32_t
)
(
velocity
.
x
*
1000
.
0f
)
(
int32_t
)
(
velocity
.
y
*
1000
.
0f
)
(
int32_t
)
mApzc
.
mX
.
GetPageStart
(
)
.
value
(
int32_t
)
(
mApzc
.
mX
.
GetPageEnd
(
)
-
mApzc
.
mX
.
GetCompositionLength
(
)
)
.
value
(
int32_t
)
mApzc
.
mY
.
GetPageStart
(
)
.
value
(
int32_t
)
(
mApzc
.
mY
.
GetPageEnd
(
)
-
mApzc
.
mY
.
GetCompositionLength
(
)
)
.
value
0
0
)
;
}
bool
AndroidFlingAnimation
:
:
DoSample
(
FrameMetrics
&
aFrameMetrics
const
TimeDuration
&
aDelta
)
{
bool
shouldContinueFling
=
true
;
mOverScroller
-
>
ComputeScrollOffset
(
&
shouldContinueFling
)
;
float
speed
=
0
.
0f
;
mOverScroller
-
>
GetCurrVelocity
(
&
speed
)
;
speed
=
speed
*
0
.
001f
;
if
(
!
shouldContinueFling
|
|
(
speed
<
gfxPrefs
:
:
APZFlingStoppedThreshold
(
)
)
)
{
if
(
shouldContinueFling
)
{
mOverScroller
-
>
AbortAnimation
(
)
;
}
mApzc
.
mX
.
SetVelocity
(
0
)
;
mApzc
.
mY
.
SetVelocity
(
0
)
;
return
false
;
}
int32_t
currentX
=
0
;
int32_t
currentY
=
0
;
mOverScroller
-
>
GetCurrX
(
&
currentX
)
;
mOverScroller
-
>
GetCurrY
(
&
currentY
)
;
ParentLayerPoint
offset
(
(
float
)
currentX
(
float
)
currentY
)
;
ParentLayerPoint
velocity
=
mFlingDirection
*
speed
;
bool
hitBoundX
=
CheckBounds
(
mApzc
.
mX
offset
.
x
&
(
offset
.
x
)
)
;
bool
hitBoundY
=
CheckBounds
(
mApzc
.
mY
offset
.
y
&
(
offset
.
y
)
)
;
if
(
IsZero
(
mPreviousOffset
-
offset
)
)
{
mOverScrollCount
+
+
;
}
else
{
mOverScrollCount
=
0
;
}
if
(
mOverScrollCount
>
MAX_OVERSCROLL_COUNT
)
{
velocity
.
x
=
velocity
.
y
=
0
.
0f
;
mOverScroller
-
>
AbortAnimation
(
)
;
}
mPreviousOffset
=
offset
;
mApzc
.
SetVelocityVector
(
velocity
)
;
aFrameMetrics
.
SetScrollOffset
(
offset
/
aFrameMetrics
.
GetZoom
(
)
)
;
if
(
hitBoundX
|
|
hitBoundY
)
{
ParentLayerPoint
bounceVelocity
=
mFlingDirection
*
speed
;
if
(
!
mSentBounceX
&
&
hitBoundX
&
&
fabsf
(
offset
.
x
-
mStartOffset
.
x
)
>
BOUNDS_EPSILON
)
{
mSentBounceX
=
true
;
}
else
{
bounceVelocity
.
x
=
0
.
0f
;
}
if
(
!
mSentBounceY
&
&
hitBoundY
&
&
fabsf
(
offset
.
y
-
mStartOffset
.
y
)
>
BOUNDS_EPSILON
)
{
mSentBounceY
=
true
;
}
else
{
bounceVelocity
.
y
=
0
.
0f
;
}
if
(
!
IsZero
(
bounceVelocity
)
)
{
mDeferredTasks
.
AppendElement
(
NewRunnableMethod
<
ParentLayerPoint
RefPtr
<
const
OverscrollHandoffChain
>
RefPtr
<
const
AsyncPanZoomController
>
>
(
&
mApzc
&
AsyncPanZoomController
:
:
HandleFlingOverscroll
bounceVelocity
mOverscrollHandoffChain
mScrolledApzc
)
)
;
}
}
return
true
;
}
bool
AndroidFlingAnimation
:
:
CheckBounds
(
Axis
&
aAxis
float
aValue
float
*
aClamped
)
{
bool
result
=
false
;
if
(
(
aValue
-
BOUNDS_EPSILON
)
<
=
aAxis
.
GetPageStart
(
)
.
value
)
{
result
=
true
;
if
(
aClamped
)
{
*
aClamped
=
aAxis
.
GetPageStart
(
)
.
value
;
}
}
else
if
(
(
aValue
+
BOUNDS_EPSILON
)
>
=
(
aAxis
.
GetPageEnd
(
)
-
aAxis
.
GetCompositionLength
(
)
)
.
value
)
{
result
=
true
;
if
(
aClamped
)
{
*
aClamped
=
(
aAxis
.
GetPageEnd
(
)
-
aAxis
.
GetCompositionLength
(
)
)
.
value
;
}
}
return
result
;
}
}
}
