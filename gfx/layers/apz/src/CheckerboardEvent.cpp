#
include
"
CheckerboardEvent
.
h
"
#
include
<
algorithm
>
namespace
mozilla
{
namespace
layers
{
#
define
LOG_LENGTH_LIMIT
(
50
*
1024
)
const
char
*
CheckerboardEvent
:
:
sDescriptions
[
]
=
{
"
page
"
"
painted
critical
displayport
"
"
painted
displayport
"
"
requested
displayport
"
"
viewport
"
}
;
const
char
*
CheckerboardEvent
:
:
sColors
[
]
=
{
"
brown
"
"
darkgreen
"
"
lightgreen
"
"
yellow
"
"
red
"
}
;
CheckerboardEvent
:
:
CheckerboardEvent
(
)
:
mOriginTime
(
TimeStamp
:
:
Now
(
)
)
mCheckerboardingActive
(
false
)
mLastSampleTime
(
mOriginTime
)
mFrameCount
(
0
)
mTotalPixelMs
(
0
)
mPeakPixels
(
0
)
mRendertraceLock
(
"
Rendertrace
"
)
{
}
uint64_t
CheckerboardEvent
:
:
GetSeverity
(
)
{
return
mTotalPixelMs
;
}
std
:
:
string
CheckerboardEvent
:
:
GetLog
(
)
{
MonitorAutoLock
lock
(
mRendertraceLock
)
;
return
mRendertraceInfo
.
str
(
)
;
}
void
CheckerboardEvent
:
:
UpdateRendertraceProperty
(
RendertraceProperty
aProperty
const
CSSRect
&
aRect
const
std
:
:
string
&
aExtraInfo
)
{
MonitorAutoLock
lock
(
mRendertraceLock
)
;
if
(
!
mCheckerboardingActive
)
{
mBufferedProperties
[
aProperty
]
.
Update
(
aProperty
aRect
aExtraInfo
lock
)
;
}
else
{
LogInfo
(
aProperty
TimeStamp
:
:
Now
(
)
aRect
aExtraInfo
lock
)
;
}
}
void
CheckerboardEvent
:
:
LogInfo
(
RendertraceProperty
aProperty
const
TimeStamp
&
aTimestamp
const
CSSRect
&
aRect
const
std
:
:
string
&
aExtraInfo
const
MonitorAutoLock
&
aProofOfLock
)
{
if
(
mRendertraceInfo
.
tellp
(
)
>
=
LOG_LENGTH_LIMIT
)
{
return
;
}
mRendertraceInfo
<
<
"
RENDERTRACE
"
<
<
(
aTimestamp
-
mOriginTime
)
.
ToMilliseconds
(
)
<
<
"
rect
"
<
<
sColors
[
aProperty
]
<
<
"
"
<
<
aRect
.
x
<
<
"
"
<
<
aRect
.
y
<
<
"
"
<
<
aRect
.
width
<
<
"
"
<
<
aRect
.
height
<
<
"
"
<
<
"
/
/
"
<
<
sDescriptions
[
aProperty
]
<
<
aExtraInfo
<
<
std
:
:
endl
;
}
bool
CheckerboardEvent
:
:
RecordFrameInfo
(
const
TimeStamp
&
aSampleTime
uint32_t
aCssPixelsCheckerboarded
)
{
bool
eventEnding
=
false
;
if
(
aCssPixelsCheckerboarded
>
0
)
{
if
(
!
mCheckerboardingActive
)
{
StartEvent
(
)
;
}
MOZ_ASSERT
(
mCheckerboardingActive
)
;
MOZ_ASSERT
(
aSampleTime
>
=
mLastSampleTime
)
;
mTotalPixelMs
+
=
(
uint64_t
)
(
(
aSampleTime
-
mLastSampleTime
)
.
ToMilliseconds
(
)
*
aCssPixelsCheckerboarded
)
;
if
(
aCssPixelsCheckerboarded
>
mPeakPixels
)
{
mPeakPixels
=
aCssPixelsCheckerboarded
;
}
mFrameCount
+
+
;
}
else
{
if
(
mCheckerboardingActive
)
{
StopEvent
(
)
;
eventEnding
=
true
;
}
MOZ_ASSERT
(
!
mCheckerboardingActive
)
;
}
mLastSampleTime
=
aSampleTime
;
return
eventEnding
;
}
void
CheckerboardEvent
:
:
StartEvent
(
)
{
MOZ_ASSERT
(
!
mCheckerboardingActive
)
;
mCheckerboardingActive
=
true
;
mStartTime
=
TimeStamp
:
:
Now
(
)
;
MonitorAutoLock
lock
(
mRendertraceLock
)
;
std
:
:
vector
<
PropertyValue
>
history
;
for
(
int
i
=
0
;
i
<
MAX_RendertraceProperty
;
i
+
+
)
{
mBufferedProperties
[
i
]
.
Flush
(
history
lock
)
;
}
std
:
:
sort
(
history
.
begin
(
)
history
.
end
(
)
)
;
for
(
const
PropertyValue
&
p
:
history
)
{
LogInfo
(
p
.
mProperty
p
.
mTimeStamp
p
.
mRect
p
.
mExtraInfo
lock
)
;
}
mRendertraceInfo
<
<
"
-
-
checkerboarding
starts
below
-
-
"
<
<
std
:
:
endl
;
}
void
CheckerboardEvent
:
:
StopEvent
(
)
{
mCheckerboardingActive
=
false
;
mEndTime
=
TimeStamp
:
:
Now
(
)
;
MonitorAutoLock
lock
(
mRendertraceLock
)
;
if
(
mRendertraceInfo
.
tellp
(
)
>
=
LOG_LENGTH_LIMIT
)
{
mRendertraceInfo
<
<
"
[
logging
aborted
due
to
length
limitations
]
\
n
"
;
}
mRendertraceInfo
<
<
"
Checkerboarded
for
"
<
<
mFrameCount
<
<
"
frames
(
"
<
<
(
mEndTime
-
mStartTime
)
.
ToMilliseconds
(
)
<
<
"
ms
)
"
<
<
mPeakPixels
<
<
"
peak
"
<
<
GetSeverity
(
)
<
<
"
severity
.
"
<
<
std
:
:
endl
;
}
bool
CheckerboardEvent
:
:
PropertyValue
:
:
operator
<
(
const
PropertyValue
&
aOther
)
const
{
if
(
mTimeStamp
<
aOther
.
mTimeStamp
)
{
return
true
;
}
else
if
(
mTimeStamp
>
aOther
.
mTimeStamp
)
{
return
false
;
}
return
mProperty
<
aOther
.
mProperty
;
}
CheckerboardEvent
:
:
PropertyBuffer
:
:
PropertyBuffer
(
)
:
mIndex
(
0
)
{
}
void
CheckerboardEvent
:
:
PropertyBuffer
:
:
Update
(
RendertraceProperty
aProperty
const
CSSRect
&
aRect
const
std
:
:
string
&
aExtraInfo
const
MonitorAutoLock
&
aProofOfLock
)
{
mValues
[
mIndex
]
=
{
aProperty
TimeStamp
:
:
Now
(
)
aRect
aExtraInfo
}
;
mIndex
=
(
mIndex
+
1
)
%
BUFFER_SIZE
;
}
void
CheckerboardEvent
:
:
PropertyBuffer
:
:
Flush
(
std
:
:
vector
<
PropertyValue
>
&
aOut
const
MonitorAutoLock
&
aProofOfLock
)
{
for
(
uint32_t
i
=
0
;
i
<
BUFFER_SIZE
;
i
+
+
)
{
uint32_t
ix
=
(
mIndex
+
i
)
%
BUFFER_SIZE
;
if
(
!
mValues
[
ix
]
.
mTimeStamp
.
IsNull
(
)
)
{
aOut
.
push_back
(
mValues
[
ix
]
)
;
mValues
[
ix
]
.
mTimeStamp
=
TimeStamp
(
)
;
}
}
}
}
}
