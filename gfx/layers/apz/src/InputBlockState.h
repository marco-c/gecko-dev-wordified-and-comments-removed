#
ifndef
mozilla_layers_InputBlockState_h
#
define
mozilla_layers_InputBlockState_h
#
include
"
InputData
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
layers
/
AsyncDragMetrics
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
layers
{
class
AsyncPanZoomController
;
class
OverscrollHandoffChain
;
class
CancelableBlockState
;
class
TouchBlockState
;
class
WheelBlockState
;
class
DragBlockState
;
class
PanGestureBlockState
;
class
InputBlockState
{
public
:
static
const
uint64_t
NO_BLOCK_ID
=
0
;
explicit
InputBlockState
(
const
RefPtr
<
AsyncPanZoomController
>
&
aTargetApzc
bool
aTargetConfirmed
)
;
virtual
~
InputBlockState
(
)
{
}
virtual
bool
SetConfirmedTargetApzc
(
const
RefPtr
<
AsyncPanZoomController
>
&
aTargetApzc
)
;
const
RefPtr
<
AsyncPanZoomController
>
&
GetTargetApzc
(
)
const
;
const
RefPtr
<
const
OverscrollHandoffChain
>
&
GetOverscrollHandoffChain
(
)
const
;
uint64_t
GetBlockId
(
)
const
;
bool
IsTargetConfirmed
(
)
const
;
protected
:
virtual
void
UpdateTargetApzc
(
const
RefPtr
<
AsyncPanZoomController
>
&
aTargetApzc
)
;
private
:
RefPtr
<
AsyncPanZoomController
>
mTargetApzc
;
bool
mTargetConfirmed
;
const
uint64_t
mBlockId
;
protected
:
RefPtr
<
const
OverscrollHandoffChain
>
mOverscrollHandoffChain
;
gfx
:
:
Matrix4x4
mTransformToApzc
;
}
;
class
CancelableBlockState
:
public
InputBlockState
{
public
:
CancelableBlockState
(
const
RefPtr
<
AsyncPanZoomController
>
&
aTargetApzc
bool
aTargetConfirmed
)
;
virtual
TouchBlockState
*
AsTouchBlock
(
)
{
return
nullptr
;
}
virtual
WheelBlockState
*
AsWheelBlock
(
)
{
return
nullptr
;
}
virtual
DragBlockState
*
AsDragBlock
(
)
{
return
nullptr
;
}
virtual
PanGestureBlockState
*
AsPanGestureBlock
(
)
{
return
nullptr
;
}
virtual
bool
SetContentResponse
(
bool
aPreventDefault
)
;
bool
TimeoutContentResponse
(
)
;
bool
IsContentResponseTimerExpired
(
)
const
;
bool
IsDefaultPrevented
(
)
const
;
void
DispatchImmediate
(
const
InputData
&
aEvent
)
const
;
virtual
void
DispatchEvent
(
const
InputData
&
aEvent
)
const
;
virtual
bool
IsReadyForHandling
(
)
const
;
virtual
bool
HasEvents
(
)
const
=
0
;
virtual
void
DropEvents
(
)
=
0
;
virtual
void
HandleEvents
(
)
=
0
;
virtual
bool
MustStayActive
(
)
=
0
;
virtual
const
char
*
Type
(
)
=
0
;
private
:
bool
mPreventDefault
;
bool
mContentResponded
;
bool
mContentResponseTimerExpired
;
}
;
class
WheelBlockState
:
public
CancelableBlockState
{
public
:
WheelBlockState
(
const
RefPtr
<
AsyncPanZoomController
>
&
aTargetApzc
bool
aTargetConfirmed
const
ScrollWheelInput
&
aEvent
)
;
bool
SetContentResponse
(
bool
aPreventDefault
)
override
;
bool
IsReadyForHandling
(
)
const
override
;
bool
HasEvents
(
)
const
override
;
void
DropEvents
(
)
override
;
void
HandleEvents
(
)
override
;
bool
MustStayActive
(
)
override
;
const
char
*
Type
(
)
override
;
bool
SetConfirmedTargetApzc
(
const
RefPtr
<
AsyncPanZoomController
>
&
aTargetApzc
)
override
;
void
AddEvent
(
const
ScrollWheelInput
&
aEvent
)
;
WheelBlockState
*
AsWheelBlock
(
)
override
{
return
this
;
}
bool
ShouldAcceptNewEvent
(
)
const
;
bool
MaybeTimeout
(
const
ScrollWheelInput
&
aEvent
)
;
void
OnMouseMove
(
const
ScreenIntPoint
&
aPoint
)
;
bool
InTransaction
(
)
const
;
void
EndTransaction
(
)
;
bool
AllowScrollHandoff
(
)
const
;
bool
MaybeTimeout
(
const
TimeStamp
&
aTimeStamp
)
;
void
Update
(
const
ScrollWheelInput
&
aEvent
)
;
protected
:
void
UpdateTargetApzc
(
const
RefPtr
<
AsyncPanZoomController
>
&
aTargetApzc
)
override
;
private
:
nsTArray
<
ScrollWheelInput
>
mEvents
;
TimeStamp
mLastEventTime
;
TimeStamp
mLastMouseMove
;
bool
mTransactionEnded
;
}
;
class
DragBlockState
:
public
CancelableBlockState
{
public
:
DragBlockState
(
const
RefPtr
<
AsyncPanZoomController
>
&
aTargetApzc
bool
aTargetConfirmed
const
MouseInput
&
aEvent
)
;
bool
HasEvents
(
)
const
override
;
void
DropEvents
(
)
override
;
void
HandleEvents
(
)
override
;
bool
MustStayActive
(
)
override
;
const
char
*
Type
(
)
override
;
bool
HasReceivedMouseUp
(
)
;
void
MarkMouseUpReceived
(
)
;
void
AddEvent
(
const
MouseInput
&
aEvent
)
;
DragBlockState
*
AsDragBlock
(
)
override
{
return
this
;
}
void
SetDragMetrics
(
const
AsyncDragMetrics
&
aDragMetrics
)
;
void
DispatchEvent
(
const
InputData
&
aEvent
)
const
override
;
private
:
nsTArray
<
MouseInput
>
mEvents
;
AsyncDragMetrics
mDragMetrics
;
bool
mReceivedMouseUp
;
}
;
class
PanGestureBlockState
:
public
CancelableBlockState
{
public
:
PanGestureBlockState
(
const
RefPtr
<
AsyncPanZoomController
>
&
aTargetApzc
bool
aTargetConfirmed
const
PanGestureInput
&
aEvent
)
;
bool
SetContentResponse
(
bool
aPreventDefault
)
override
;
bool
IsReadyForHandling
(
)
const
override
;
bool
HasEvents
(
)
const
override
;
void
DropEvents
(
)
override
;
void
HandleEvents
(
)
override
;
bool
MustStayActive
(
)
override
;
const
char
*
Type
(
)
override
;
bool
SetConfirmedTargetApzc
(
const
RefPtr
<
AsyncPanZoomController
>
&
aTargetApzc
)
override
;
void
AddEvent
(
const
PanGestureInput
&
aEvent
)
;
PanGestureBlockState
*
AsPanGestureBlock
(
)
override
{
return
this
;
}
bool
AllowScrollHandoff
(
)
const
;
bool
WasInterrupted
(
)
const
{
return
mInterrupted
;
}
void
SetNeedsToWaitForContentResponse
(
bool
aWaitForContentResponse
)
;
private
:
nsTArray
<
PanGestureInput
>
mEvents
;
bool
mInterrupted
;
bool
mWaitingForContentResponse
;
}
;
class
TouchBlockState
:
public
CancelableBlockState
{
public
:
explicit
TouchBlockState
(
const
RefPtr
<
AsyncPanZoomController
>
&
aTargetApzc
bool
aTargetConfirmed
TouchCounter
&
aTouchCounter
)
;
TouchBlockState
*
AsTouchBlock
(
)
override
{
return
this
;
}
bool
SetAllowedTouchBehaviors
(
const
nsTArray
<
TouchBehaviorFlags
>
&
aBehaviors
)
;
bool
GetAllowedTouchBehaviors
(
nsTArray
<
TouchBehaviorFlags
>
&
aOutBehaviors
)
const
;
void
CopyPropertiesFrom
(
const
TouchBlockState
&
aOther
)
;
bool
IsReadyForHandling
(
)
const
override
;
void
SetDuringFastFling
(
)
;
bool
IsDuringFastFling
(
)
const
;
bool
SetSingleTapOccurred
(
)
;
bool
SingleTapOccurred
(
)
const
;
void
AddEvent
(
const
MultiTouchInput
&
aEvent
)
;
bool
TouchActionAllowsPinchZoom
(
)
const
;
bool
TouchActionAllowsDoubleTapZoom
(
)
const
;
bool
TouchActionAllowsPanningX
(
)
const
;
bool
TouchActionAllowsPanningY
(
)
const
;
bool
TouchActionAllowsPanningXY
(
)
const
;
bool
UpdateSlopState
(
const
MultiTouchInput
&
aInput
bool
aApzcCanConsumeEvents
)
;
bool
HasEvents
(
)
const
override
;
void
DropEvents
(
)
override
;
void
HandleEvents
(
)
override
;
void
DispatchEvent
(
const
InputData
&
aEvent
)
const
override
;
bool
MustStayActive
(
)
override
;
const
char
*
Type
(
)
override
;
private
:
nsTArray
<
TouchBehaviorFlags
>
mAllowedTouchBehaviors
;
bool
mAllowedTouchBehaviorSet
;
bool
mDuringFastFling
;
bool
mSingleTapOccurred
;
bool
mInSlop
;
ScreenIntPoint
mSlopOrigin
;
nsTArray
<
MultiTouchInput
>
mEvents
;
TouchCounter
&
mTouchCounter
;
}
;
}
}
#
endif
