#
include
<
stack
>
#
include
"
APZCTreeManager
.
h
"
#
include
"
AsyncPanZoomController
.
h
"
#
include
"
Compositor
.
h
"
#
include
"
DragTracker
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
HitTestingTreeNode
.
h
"
#
include
"
InputBlockState
.
h
"
#
include
"
InputData
.
h
"
#
include
"
Layers
.
h
"
#
include
"
mozilla
/
dom
/
Touch
.
h
"
#
include
"
mozilla
/
gfx
/
GPUParent
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
layers
/
APZThreadUtils
.
h
"
#
include
"
mozilla
/
layers
/
AsyncCompositionManager
.
h
"
#
include
"
mozilla
/
layers
/
AsyncDragMetrics
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
LayerMetricsWrapper
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderScrollDataWrapper
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
TouchEvents
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
EventStateManager
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderAPI
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsPoint
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
OverscrollHandoffState
.
h
"
#
include
"
TreeTraversal
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
Units
.
h
"
#
include
"
GestureEventListener
.
h
"
#
include
"
UnitTransforms
.
h
"
#
define
ENABLE_APZCTM_LOGGING
0
#
if
ENABLE_APZCTM_LOGGING
#
define
APZCTM_LOG
(
.
.
.
)
printf_stderr
(
"
APZCTM
:
"
__VA_ARGS__
)
#
else
#
define
APZCTM_LOG
(
.
.
.
)
#
endif
namespace
mozilla
{
namespace
layers
{
typedef
mozilla
:
:
gfx
:
:
Point
Point
;
typedef
mozilla
:
:
gfx
:
:
Point4D
Point4D
;
typedef
mozilla
:
:
gfx
:
:
Matrix4x4
Matrix4x4
;
typedef
CompositorBridgeParent
:
:
LayerTreeState
LayerTreeState
;
float
APZCTreeManager
:
:
sDPI
=
160
.
0
;
struct
APZCTreeManager
:
:
TreeBuildingState
{
TreeBuildingState
(
const
LayerTreeState
*
const
aLayerTreeState
bool
aIsFirstPaint
uint64_t
aOriginatingLayersId
APZTestData
*
aTestData
uint32_t
aPaintSequence
)
:
mLayerTreeState
(
aLayerTreeState
)
mIsFirstPaint
(
aIsFirstPaint
)
mOriginatingLayersId
(
aOriginatingLayersId
)
mPaintLogger
(
aTestData
aPaintSequence
)
{
}
const
LayerTreeState
*
const
mLayerTreeState
;
const
bool
mIsFirstPaint
;
const
uint64_t
mOriginatingLayersId
;
const
APZPaintLogHelper
mPaintLogger
;
nsTArray
<
RefPtr
<
HitTestingTreeNode
>
>
mNodesToDestroy
;
std
:
:
unordered_map
<
ScrollableLayerGuid
AsyncPanZoomController
*
ScrollableLayerGuidHash
>
mApzcMap
;
}
;
class
APZCTreeManager
:
:
CheckerboardFlushObserver
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
explicit
CheckerboardFlushObserver
(
APZCTreeManager
*
aTreeManager
)
:
mTreeManager
(
aTreeManager
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIObserverService
>
obsSvc
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
MOZ_ASSERT
(
obsSvc
)
;
if
(
obsSvc
)
{
obsSvc
-
>
AddObserver
(
this
"
APZ
:
FlushActiveCheckerboard
"
false
)
;
}
}
void
Unregister
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIObserverService
>
obsSvc
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obsSvc
)
{
obsSvc
-
>
RemoveObserver
(
this
"
APZ
:
FlushActiveCheckerboard
"
)
;
}
mTreeManager
=
nullptr
;
}
protected
:
virtual
~
CheckerboardFlushObserver
(
)
{
}
private
:
RefPtr
<
APZCTreeManager
>
mTreeManager
;
}
;
NS_IMPL_ISUPPORTS
(
APZCTreeManager
:
:
CheckerboardFlushObserver
nsIObserver
)
NS_IMETHODIMP
APZCTreeManager
:
:
CheckerboardFlushObserver
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mTreeManager
.
get
(
)
)
;
MutexAutoLock
lock
(
mTreeManager
-
>
mTreeLock
)
;
if
(
mTreeManager
-
>
mRootNode
)
{
ForEachNode
<
ReverseIterator
>
(
mTreeManager
-
>
mRootNode
.
get
(
)
[
]
(
HitTestingTreeNode
*
aNode
)
{
if
(
aNode
-
>
IsPrimaryHolder
(
)
)
{
MOZ_ASSERT
(
aNode
-
>
GetApzc
(
)
)
;
aNode
-
>
GetApzc
(
)
-
>
FlushActiveCheckerboardReport
(
)
;
}
}
)
;
}
if
(
XRE_IsGPUProcess
(
)
)
{
if
(
gfx
:
:
GPUParent
*
gpu
=
gfx
:
:
GPUParent
:
:
GetSingleton
(
)
)
{
nsCString
topic
(
"
APZ
:
FlushActiveCheckerboard
:
Done
"
)
;
Unused
<
<
gpu
-
>
SendNotifyUiObservers
(
topic
)
;
}
}
else
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
nsCOMPtr
<
nsIObserverService
>
obsSvc
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obsSvc
)
{
obsSvc
-
>
NotifyObservers
(
nullptr
"
APZ
:
FlushActiveCheckerboard
:
Done
"
nullptr
)
;
}
}
return
NS_OK
;
}
const
ScreenMargin
APZCTreeManager
:
:
CalculatePendingDisplayPort
(
const
FrameMetrics
&
aFrameMetrics
const
ParentLayerPoint
&
aVelocity
)
{
return
AsyncPanZoomController
:
:
CalculatePendingDisplayPort
(
aFrameMetrics
aVelocity
)
;
}
APZCTreeManager
:
:
APZCTreeManager
(
)
:
mInputQueue
(
new
InputQueue
(
)
)
mTreeLock
(
"
APZCTreeLock
"
)
mHitResultForInputBlock
(
HitNothing
)
mRetainedTouchIdentifier
(
-
1
)
mApzcTreeLog
(
"
apzctree
"
)
{
RefPtr
<
APZCTreeManager
>
self
(
this
)
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
layers
:
:
APZCTreeManager
:
:
APZCTreeManager
"
[
self
]
{
self
-
>
mFlushObserver
=
new
CheckerboardFlushObserver
(
self
)
;
}
)
)
;
AsyncPanZoomController
:
:
InitializeGlobalState
(
)
;
mApzcTreeLog
.
ConditionOnPrefFunction
(
gfxPrefs
:
:
APZPrintTree
)
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
mToolbarAnimator
=
new
AndroidDynamicToolbarAnimator
(
)
;
#
endif
}
APZCTreeManager
:
:
~
APZCTreeManager
(
)
{
}
void
APZCTreeManager
:
:
InitializeGlobalState
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
AsyncPanZoomController
:
:
InitializeGlobalState
(
)
;
}
AsyncPanZoomController
*
APZCTreeManager
:
:
NewAPZCInstance
(
uint64_t
aLayersId
GeckoContentController
*
aController
)
{
return
new
AsyncPanZoomController
(
aLayersId
this
mInputQueue
aController
AsyncPanZoomController
:
:
USE_GESTURE_DETECTOR
)
;
}
TimeStamp
APZCTreeManager
:
:
GetFrameTime
(
)
{
return
TimeStamp
:
:
Now
(
)
;
}
void
APZCTreeManager
:
:
SetAllowedTouchBehavior
(
uint64_t
aInputBlockId
const
nsTArray
<
TouchBehaviorFlags
>
&
aValues
)
{
mInputQueue
-
>
SetAllowedTouchBehavior
(
aInputBlockId
aValues
)
;
}
template
<
class
ScrollNode
>
void
APZCTreeManager
:
:
UpdateHitTestingTreeImpl
(
uint64_t
aRootLayerTreeId
const
ScrollNode
&
aRoot
bool
aIsFirstPaint
uint64_t
aOriginatingLayersId
uint32_t
aPaintSequenceNumber
)
{
APZThreadUtils
:
:
AssertOnCompositorThread
(
)
;
MutexAutoLock
lock
(
mTreeLock
)
;
APZTestData
*
testData
=
nullptr
;
if
(
gfxPrefs
:
:
APZTestLoggingEnabled
(
)
)
{
if
(
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
aOriginatingLayersId
)
)
{
testData
=
&
state
-
>
mApzTestData
;
testData
-
>
StartNewPaint
(
aPaintSequenceNumber
)
;
}
}
const
LayerTreeState
*
treeState
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
aRootLayerTreeId
)
;
MOZ_ASSERT
(
treeState
)
;
TreeBuildingState
state
(
treeState
aIsFirstPaint
aOriginatingLayersId
testData
aPaintSequenceNumber
)
;
ForEachNode
<
ReverseIterator
>
(
mRootNode
.
get
(
)
[
&
state
]
(
HitTestingTreeNode
*
aNode
)
{
state
.
mNodesToDestroy
.
AppendElement
(
aNode
)
;
}
)
;
mRootNode
=
nullptr
;
if
(
aRoot
)
{
std
:
:
stack
<
gfx
:
:
TreeAutoIndent
>
indents
;
std
:
:
stack
<
gfx
:
:
Matrix4x4
>
ancestorTransforms
;
HitTestingTreeNode
*
parent
=
nullptr
;
HitTestingTreeNode
*
next
=
nullptr
;
uint64_t
layersId
=
aRootLayerTreeId
;
ancestorTransforms
.
push
(
Matrix4x4
(
)
)
;
mApzcTreeLog
<
<
"
[
start
]
\
n
"
;
mTreeLock
.
AssertCurrentThreadOwns
(
)
;
ForEachNode
<
ReverseIterator
>
(
aRoot
[
&
]
(
ScrollNode
aLayerMetrics
)
{
mApzcTreeLog
<
<
aLayerMetrics
.
Name
(
)
<
<
'
\
t
'
;
HitTestingTreeNode
*
node
=
PrepareNodeForLayer
(
aLayerMetrics
aLayerMetrics
.
Metrics
(
)
layersId
ancestorTransforms
.
top
(
)
parent
next
state
)
;
MOZ_ASSERT
(
node
)
;
AsyncPanZoomController
*
apzc
=
node
-
>
GetApzc
(
)
;
aLayerMetrics
.
SetApzc
(
apzc
)
;
mApzcTreeLog
<
<
'
\
n
'
;
Matrix4x4
currentTransform
=
aLayerMetrics
.
TransformIsPerspective
(
)
?
Matrix4x4
(
)
:
aLayerMetrics
.
GetTransform
(
)
;
if
(
!
apzc
)
{
currentTransform
=
currentTransform
*
ancestorTransforms
.
top
(
)
;
}
ancestorTransforms
.
push
(
currentTransform
)
;
MOZ_ASSERT
(
!
node
-
>
GetFirstChild
(
)
)
;
parent
=
node
;
next
=
nullptr
;
layersId
=
aLayerMetrics
.
GetReferentId
(
)
.
valueOr
(
layersId
)
;
indents
.
push
(
gfx
:
:
TreeAutoIndent
(
mApzcTreeLog
)
)
;
}
[
&
]
(
ScrollNode
aLayerMetrics
)
{
next
=
parent
;
parent
=
parent
-
>
GetParent
(
)
;
layersId
=
next
-
>
GetLayersId
(
)
;
ancestorTransforms
.
pop
(
)
;
indents
.
pop
(
)
;
}
)
;
mApzcTreeLog
<
<
"
[
end
]
\
n
"
;
}
MOZ_ASSERT
(
!
(
mRootNode
&
&
mRootNode
-
>
GetPrevSibling
(
)
)
)
;
for
(
size_t
i
=
0
;
i
<
state
.
mNodesToDestroy
.
Length
(
)
;
i
+
+
)
{
APZCTM_LOG
(
"
Destroying
node
at
%
p
with
APZC
%
p
\
n
"
state
.
mNodesToDestroy
[
i
]
.
get
(
)
state
.
mNodesToDestroy
[
i
]
-
>
GetApzc
(
)
)
;
state
.
mNodesToDestroy
[
i
]
-
>
Destroy
(
)
;
}
#
if
ENABLE_APZCTM_LOGGING
printf_stderr
(
"
APZCTreeManager
(
%
p
)
\
n
"
this
)
;
mRootNode
-
>
Dump
(
"
"
)
;
#
endif
}
void
APZCTreeManager
:
:
UpdateHitTestingTree
(
uint64_t
aRootLayerTreeId
Layer
*
aRoot
bool
aIsFirstPaint
uint64_t
aOriginatingLayersId
uint32_t
aPaintSequenceNumber
)
{
LayerMetricsWrapper
root
(
aRoot
)
;
UpdateHitTestingTreeImpl
(
aRootLayerTreeId
root
aIsFirstPaint
aOriginatingLayersId
aPaintSequenceNumber
)
;
}
void
APZCTreeManager
:
:
UpdateHitTestingTree
(
uint64_t
aRootLayerTreeId
const
WebRenderScrollData
&
aScrollData
bool
aIsFirstPaint
uint64_t
aOriginatingLayersId
uint32_t
aPaintSequenceNumber
)
{
WebRenderScrollDataWrapper
wrapper
(
&
aScrollData
)
;
UpdateHitTestingTreeImpl
(
aRootLayerTreeId
wrapper
aIsFirstPaint
aOriginatingLayersId
aPaintSequenceNumber
)
;
}
bool
APZCTreeManager
:
:
PushStateToWR
(
wr
:
:
WebRenderAPI
*
aWrApi
const
TimeStamp
&
aSampleTime
nsTArray
<
WrTransformProperty
>
&
aTransformArray
)
{
APZThreadUtils
:
:
AssertOnCompositorThread
(
)
;
MOZ_ASSERT
(
aWrApi
)
;
MutexAutoLock
lock
(
mTreeLock
)
;
std
:
:
unordered_map
<
ScrollableLayerGuid
HitTestingTreeNode
*
ScrollableLayerGuidHash
>
httnMap
;
bool
activeAnimations
=
false
;
uint64_t
lastLayersId
=
-
1
;
WrPipelineId
lastPipelineId
;
ForEachNode
<
ReverseIterator
>
(
mRootNode
.
get
(
)
[
&
]
(
HitTestingTreeNode
*
aNode
)
{
if
(
!
aNode
-
>
IsPrimaryHolder
(
)
)
{
return
;
}
AsyncPanZoomController
*
apzc
=
aNode
-
>
GetApzc
(
)
;
MOZ_ASSERT
(
apzc
)
;
if
(
aNode
-
>
GetLayersId
(
)
!
=
lastLayersId
)
{
const
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
aNode
-
>
GetLayersId
(
)
)
;
if
(
!
(
state
&
&
state
-
>
mWrBridge
)
)
{
return
;
}
lastPipelineId
=
state
-
>
mWrBridge
-
>
PipelineId
(
)
;
lastLayersId
=
aNode
-
>
GetLayersId
(
)
;
}
ScrollableLayerGuid
guid
(
lastLayersId
0
apzc
-
>
GetGuid
(
)
.
mScrollId
)
;
httnMap
.
emplace
(
guid
aNode
)
;
ParentLayerPoint
layerTranslation
=
apzc
-
>
GetCurrentAsyncTransform
(
AsyncPanZoomController
:
:
RESPECT_FORCE_DISABLE
)
.
mTranslation
;
ParentLayerPoint
asyncScrollDelta
=
-
layerTranslation
;
aWrApi
-
>
UpdateScrollPosition
(
lastPipelineId
apzc
-
>
GetGuid
(
)
.
mScrollId
wr
:
:
ToWrPoint
(
asyncScrollDelta
)
)
;
apzc
-
>
ReportCheckerboard
(
aSampleTime
)
;
activeAnimations
|
=
apzc
-
>
AdvanceAnimations
(
aSampleTime
)
;
}
)
;
ForEachNode
<
ReverseIterator
>
(
mRootNode
.
get
(
)
[
&
]
(
HitTestingTreeNode
*
aNode
)
{
if
(
!
aNode
-
>
IsScrollThumbNode
(
)
)
{
return
;
}
ScrollableLayerGuid
guid
(
aNode
-
>
GetLayersId
(
)
0
aNode
-
>
GetScrollTargetId
(
)
)
;
auto
it
=
httnMap
.
find
(
guid
)
;
if
(
it
=
=
httnMap
.
end
(
)
)
{
return
;
}
HitTestingTreeNode
*
scrollTargetNode
=
it
-
>
second
;
AsyncPanZoomController
*
scrollTargetApzc
=
scrollTargetNode
-
>
GetApzc
(
)
;
MOZ_ASSERT
(
scrollTargetApzc
)
;
LayerToParentLayerMatrix4x4
transform
=
scrollTargetApzc
-
>
CallWithLastContentPaintMetrics
(
[
&
]
(
const
FrameMetrics
&
aMetrics
)
{
return
AsyncCompositionManager
:
:
ComputeTransformForScrollThumb
(
aNode
-
>
GetTransform
(
)
*
AsyncTransformMatrix
(
)
scrollTargetNode
-
>
GetTransform
(
)
.
ToUnknownMatrix
(
)
scrollTargetApzc
aMetrics
aNode
-
>
GetScrollThumbData
(
)
scrollTargetNode
-
>
IsAncestorOf
(
aNode
)
nullptr
)
;
}
)
;
aTransformArray
.
AppendElement
(
wr
:
:
ToWrTransformProperty
(
aNode
-
>
GetScrollbarAnimationId
(
)
transform
)
)
;
}
)
;
return
activeAnimations
;
}
template
<
class
ScrollNode
>
static
ParentLayerIntRegion
ComputeClipRegion
(
GeckoContentController
*
aController
const
ScrollNode
&
aLayer
)
{
ParentLayerIntRegion
clipRegion
;
if
(
aLayer
.
GetClipRect
(
)
)
{
clipRegion
=
*
aLayer
.
GetClipRect
(
)
;
}
else
{
clipRegion
=
RoundedToInt
(
aLayer
.
Metrics
(
)
.
GetCompositionBounds
(
)
)
;
}
return
clipRegion
;
}
template
<
class
ScrollNode
>
void
APZCTreeManager
:
:
PrintAPZCInfo
(
const
ScrollNode
&
aLayer
const
AsyncPanZoomController
*
apzc
)
{
const
FrameMetrics
&
metrics
=
aLayer
.
Metrics
(
)
;
mApzcTreeLog
<
<
"
APZC
"
<
<
apzc
-
>
GetGuid
(
)
<
<
"
\
tcb
=
"
<
<
metrics
.
GetCompositionBounds
(
)
<
<
"
\
tsr
=
"
<
<
metrics
.
GetScrollableRect
(
)
<
<
(
aLayer
.
IsScrollInfoLayer
(
)
?
"
\
tscrollinfo
"
:
"
"
)
<
<
(
apzc
-
>
HasScrollgrab
(
)
?
"
\
tscrollgrab
"
:
"
"
)
<
<
"
\
t
"
<
<
aLayer
.
Metadata
(
)
.
GetContentDescription
(
)
.
get
(
)
;
}
void
APZCTreeManager
:
:
AttachNodeToTree
(
HitTestingTreeNode
*
aNode
HitTestingTreeNode
*
aParent
HitTestingTreeNode
*
aNextSibling
)
{
if
(
aNextSibling
)
{
aNextSibling
-
>
SetPrevSibling
(
aNode
)
;
}
else
if
(
aParent
)
{
aParent
-
>
SetLastChild
(
aNode
)
;
}
else
{
MOZ_ASSERT
(
!
mRootNode
)
;
mRootNode
=
aNode
;
aNode
-
>
MakeRoot
(
)
;
}
}
template
<
class
ScrollNode
>
static
EventRegions
GetEventRegions
(
const
ScrollNode
&
aLayer
)
{
if
(
aLayer
.
IsScrollInfoLayer
(
)
)
{
ParentLayerIntRect
compositionBounds
(
RoundedToInt
(
aLayer
.
Metrics
(
)
.
GetCompositionBounds
(
)
)
)
;
nsIntRegion
hitRegion
(
compositionBounds
.
ToUnknownRect
(
)
)
;
EventRegions
eventRegions
(
hitRegion
)
;
eventRegions
.
mDispatchToContentHitRegion
=
eventRegions
.
mHitRegion
;
return
eventRegions
;
}
return
aLayer
.
GetEventRegions
(
)
;
}
already_AddRefed
<
HitTestingTreeNode
>
APZCTreeManager
:
:
RecycleOrCreateNode
(
TreeBuildingState
&
aState
AsyncPanZoomController
*
aApzc
uint64_t
aLayersId
)
{
for
(
size_t
i
=
0
;
i
<
aState
.
mNodesToDestroy
.
Length
(
)
;
i
+
+
)
{
RefPtr
<
HitTestingTreeNode
>
node
=
aState
.
mNodesToDestroy
[
i
]
;
if
(
!
node
-
>
IsPrimaryHolder
(
)
)
{
aState
.
mNodesToDestroy
.
RemoveElement
(
node
)
;
node
-
>
RecycleWith
(
aApzc
aLayersId
)
;
return
node
.
forget
(
)
;
}
}
RefPtr
<
HitTestingTreeNode
>
node
=
new
HitTestingTreeNode
(
aApzc
false
aLayersId
)
;
return
node
.
forget
(
)
;
}
template
<
class
ScrollNode
>
static
EventRegionsOverride
GetEventRegionsOverride
(
HitTestingTreeNode
*
aParent
const
ScrollNode
&
aLayer
)
{
EventRegionsOverride
result
=
aLayer
.
GetEventRegionsOverride
(
)
;
if
(
aParent
)
{
result
|
=
aParent
-
>
GetEventRegionsOverride
(
)
;
}
return
result
;
}
void
APZCTreeManager
:
:
StartScrollbarDrag
(
const
ScrollableLayerGuid
&
aGuid
const
AsyncDragMetrics
&
aDragMetrics
)
{
RefPtr
<
AsyncPanZoomController
>
apzc
=
GetTargetAPZC
(
aGuid
)
;
if
(
!
apzc
)
{
NotifyScrollbarDragRejected
(
aGuid
)
;
return
;
}
uint64_t
inputBlockId
=
aDragMetrics
.
mDragStartSequenceNumber
;
mInputQueue
-
>
ConfirmDragBlock
(
inputBlockId
apzc
aDragMetrics
)
;
}
void
APZCTreeManager
:
:
NotifyScrollbarDragRejected
(
const
ScrollableLayerGuid
&
aGuid
)
const
{
const
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
aGuid
.
mLayersId
)
;
MOZ_ASSERT
(
state
&
&
state
-
>
mController
)
;
state
-
>
mController
-
>
NotifyAsyncScrollbarDragRejected
(
aGuid
.
mScrollId
)
;
}
template
<
class
ScrollNode
>
HitTestingTreeNode
*
APZCTreeManager
:
:
PrepareNodeForLayer
(
const
ScrollNode
&
aLayer
const
FrameMetrics
&
aMetrics
uint64_t
aLayersId
const
gfx
:
:
Matrix4x4
&
aAncestorTransform
HitTestingTreeNode
*
aParent
HitTestingTreeNode
*
aNextSibling
TreeBuildingState
&
aState
)
{
mTreeLock
.
AssertCurrentThreadOwns
(
)
;
bool
needsApzc
=
true
;
if
(
!
aMetrics
.
IsScrollable
(
)
)
{
needsApzc
=
false
;
}
const
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
aLayersId
)
;
if
(
!
(
state
&
&
state
-
>
mController
.
get
(
)
)
)
{
needsApzc
=
false
;
}
RefPtr
<
HitTestingTreeNode
>
node
=
nullptr
;
if
(
!
needsApzc
)
{
node
=
RecycleOrCreateNode
(
aState
nullptr
aLayersId
)
;
AttachNodeToTree
(
node
aParent
aNextSibling
)
;
node
-
>
SetHitTestData
(
GetEventRegions
(
aLayer
)
aLayer
.
GetVisibleRegion
(
)
aLayer
.
GetTransformTyped
(
)
aLayer
.
GetClipRect
(
)
?
Some
(
ParentLayerIntRegion
(
*
aLayer
.
GetClipRect
(
)
)
)
:
Nothing
(
)
GetEventRegionsOverride
(
aParent
aLayer
)
)
;
node
-
>
SetScrollbarData
(
aLayer
.
GetScrollbarTargetContainerId
(
)
aLayer
.
GetScrollbarAnimationId
(
)
aLayer
.
GetScrollThumbData
(
)
aLayer
.
IsScrollbarContainer
(
)
)
;
node
-
>
SetFixedPosData
(
aLayer
.
GetFixedPositionScrollContainerId
(
)
)
;
return
node
;
}
AsyncPanZoomController
*
apzc
=
nullptr
;
ScrollableLayerGuid
guid
(
aLayersId
aMetrics
)
;
auto
insertResult
=
aState
.
mApzcMap
.
insert
(
std
:
:
make_pair
(
guid
static_cast
<
AsyncPanZoomController
*
>
(
nullptr
)
)
)
;
if
(
!
insertResult
.
second
)
{
apzc
=
insertResult
.
first
-
>
second
;
PrintAPZCInfo
(
aLayer
apzc
)
;
}
APZCTM_LOG
(
"
Found
APZC
%
p
for
layer
%
p
with
identifiers
%
"
PRId64
"
%
"
PRId64
"
\
n
"
apzc
aLayer
.
GetLayer
(
)
guid
.
mLayersId
guid
.
mScrollId
)
;
if
(
apzc
=
=
nullptr
)
{
apzc
=
aLayer
.
GetApzc
(
)
;
if
(
apzc
&
&
(
!
apzc
-
>
Matches
(
guid
)
|
|
!
apzc
-
>
HasTreeManager
(
this
)
)
)
{
apzc
=
nullptr
;
}
for
(
size_t
i
=
0
;
i
<
aState
.
mNodesToDestroy
.
Length
(
)
;
i
+
+
)
{
RefPtr
<
HitTestingTreeNode
>
n
=
aState
.
mNodesToDestroy
[
i
]
;
if
(
n
-
>
IsPrimaryHolder
(
)
&
&
n
-
>
GetApzc
(
)
&
&
n
-
>
GetApzc
(
)
-
>
Matches
(
guid
)
)
{
node
=
n
;
if
(
apzc
!
=
nullptr
)
{
MOZ_ASSERT
(
apzc
=
=
node
-
>
GetApzc
(
)
)
;
}
apzc
=
node
-
>
GetApzc
(
)
;
break
;
}
}
bool
newApzc
=
(
apzc
=
=
nullptr
|
|
apzc
-
>
IsDestroyed
(
)
)
;
if
(
newApzc
)
{
MOZ_ASSERT
(
aState
.
mLayerTreeState
)
;
apzc
=
NewAPZCInstance
(
aLayersId
state
-
>
mController
)
;
apzc
-
>
SetCompositorController
(
aState
.
mLayerTreeState
-
>
GetCompositorController
(
)
)
;
if
(
state
-
>
mCrossProcessParent
)
{
apzc
-
>
SetMetricsSharingController
(
state
-
>
CrossProcessSharingController
(
)
)
;
}
else
{
apzc
-
>
SetMetricsSharingController
(
aState
.
mLayerTreeState
-
>
InProcessSharingController
(
)
)
;
}
MOZ_ASSERT
(
node
=
=
nullptr
)
;
node
=
new
HitTestingTreeNode
(
apzc
true
aLayersId
)
;
}
else
{
aState
.
mNodesToDestroy
.
RemoveElement
(
node
)
;
node
-
>
SetPrevSibling
(
nullptr
)
;
node
-
>
SetLastChild
(
nullptr
)
;
}
APZCTM_LOG
(
"
Using
APZC
%
p
for
layer
%
p
with
identifiers
%
"
PRId64
"
%
"
PRId64
"
\
n
"
apzc
aLayer
.
GetLayer
(
)
aLayersId
aMetrics
.
GetScrollId
(
)
)
;
apzc
-
>
NotifyLayersUpdated
(
aLayer
.
Metadata
(
)
aState
.
mIsFirstPaint
aLayersId
=
=
aState
.
mOriginatingLayersId
)
;
MOZ_ASSERT
(
node
-
>
IsPrimaryHolder
(
)
&
&
node
-
>
GetApzc
(
)
&
&
node
-
>
GetApzc
(
)
-
>
Matches
(
guid
)
)
;
ParentLayerIntRegion
clipRegion
=
ComputeClipRegion
(
state
-
>
mController
aLayer
)
;
node
-
>
SetHitTestData
(
GetEventRegions
(
aLayer
)
aLayer
.
GetVisibleRegion
(
)
aLayer
.
GetTransformTyped
(
)
Some
(
clipRegion
)
GetEventRegionsOverride
(
aParent
aLayer
)
)
;
apzc
-
>
SetAncestorTransform
(
aAncestorTransform
)
;
PrintAPZCInfo
(
aLayer
apzc
)
;
AttachNodeToTree
(
node
aParent
aNextSibling
)
;
if
(
aLayersId
=
=
aState
.
mOriginatingLayersId
)
{
if
(
apzc
-
>
HasNoParentWithSameLayersId
(
)
)
{
aState
.
mPaintLogger
.
LogTestData
(
aMetrics
.
GetScrollId
(
)
"
hasNoParentWithSameLayersId
"
true
)
;
}
else
{
MOZ_ASSERT
(
apzc
-
>
GetParent
(
)
)
;
aState
.
mPaintLogger
.
LogTestData
(
aMetrics
.
GetScrollId
(
)
"
parentScrollId
"
apzc
-
>
GetParent
(
)
-
>
GetGuid
(
)
.
mScrollId
)
;
}
if
(
aMetrics
.
IsRootContent
(
)
)
{
aState
.
mPaintLogger
.
LogTestData
(
aMetrics
.
GetScrollId
(
)
"
isRootContent
"
true
)
;
}
aState
.
mPaintLogger
.
LogTestData
(
aMetrics
.
GetScrollId
(
)
"
asyncScrollOffset
"
apzc
-
>
GetCurrentAsyncScrollOffset
(
AsyncPanZoomController
:
:
NORMAL
)
)
;
}
if
(
newApzc
)
{
auto
it
=
mZoomConstraints
.
find
(
guid
)
;
if
(
it
!
=
mZoomConstraints
.
end
(
)
)
{
apzc
-
>
UpdateZoomConstraints
(
it
-
>
second
)
;
}
else
if
(
!
apzc
-
>
HasNoParentWithSameLayersId
(
)
)
{
apzc
-
>
UpdateZoomConstraints
(
apzc
-
>
GetParent
(
)
-
>
GetZoomConstraints
(
)
)
;
}
}
insertResult
.
first
-
>
second
=
apzc
;
}
else
{
node
=
RecycleOrCreateNode
(
aState
apzc
aLayersId
)
;
AttachNodeToTree
(
node
aParent
aNextSibling
)
;
MOZ_ASSERT
(
aAncestorTransform
.
FuzzyEqualsMultiplicative
(
apzc
-
>
GetAncestorTransform
(
)
)
)
;
ParentLayerIntRegion
clipRegion
=
ComputeClipRegion
(
state
-
>
mController
aLayer
)
;
node
-
>
SetHitTestData
(
GetEventRegions
(
aLayer
)
aLayer
.
GetVisibleRegion
(
)
aLayer
.
GetTransformTyped
(
)
Some
(
clipRegion
)
GetEventRegionsOverride
(
aParent
aLayer
)
)
;
}
node
-
>
SetScrollbarData
(
aLayer
.
GetScrollbarTargetContainerId
(
)
aLayer
.
GetScrollbarAnimationId
(
)
aLayer
.
GetScrollThumbData
(
)
aLayer
.
IsScrollbarContainer
(
)
)
;
node
-
>
SetFixedPosData
(
aLayer
.
GetFixedPositionScrollContainerId
(
)
)
;
return
node
;
}
template
<
typename
PanGestureOrScrollWheelInput
>
static
bool
WillHandleInput
(
const
PanGestureOrScrollWheelInput
&
aPanInput
)
{
if
(
!
NS_IsMainThread
(
)
)
{
return
true
;
}
WidgetWheelEvent
wheelEvent
=
aPanInput
.
ToWidgetWheelEvent
(
nullptr
)
;
return
IAPZCTreeManager
:
:
WillHandleWheelEvent
(
&
wheelEvent
)
;
}
void
APZCTreeManager
:
:
FlushApzRepaints
(
uint64_t
aLayersId
)
{
APZCTM_LOG
(
"
Flushing
repaints
for
layers
id
%
"
PRIu64
aLayersId
)
;
const
LayerTreeState
*
state
=
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
aLayersId
)
;
MOZ_ASSERT
(
state
&
&
state
-
>
mController
)
;
state
-
>
mController
-
>
DispatchToRepaintThread
(
NewRunnableMethod
(
"
layers
:
:
GeckoContentController
:
:
NotifyFlushComplete
"
state
-
>
mController
&
GeckoContentController
:
:
NotifyFlushComplete
)
)
;
}
nsEventStatus
APZCTreeManager
:
:
ReceiveInputEvent
(
InputData
&
aEvent
ScrollableLayerGuid
*
aOutTargetGuid
uint64_t
*
aOutInputBlockId
)
{
APZThreadUtils
:
:
AssertOnControllerThread
(
)
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
MOZ_ASSERT
(
mToolbarAnimator
)
;
ScreenPoint
scrollOffset
;
{
MutexAutoLock
lock
(
mTreeLock
)
;
RefPtr
<
AsyncPanZoomController
>
apzc
=
FindRootContentOrRootApzc
(
)
;
if
(
apzc
)
{
scrollOffset
=
ViewAs
<
ScreenPixel
>
(
apzc
-
>
GetCurrentAsyncScrollOffset
(
AsyncPanZoomController
:
:
NORMAL
)
PixelCastJustification
:
:
ScreenIsParentLayerForRoot
)
;
}
}
nsEventStatus
isConsumed
=
mToolbarAnimator
-
>
ReceiveInputEvent
(
aEvent
scrollOffset
)
;
if
(
isConsumed
=
=
nsEventStatus_eConsumeNoDefault
)
{
APZCTM_LOG
(
"
Dynamic
toolbar
consumed
event
"
)
;
return
isConsumed
;
}
#
endif
if
(
aOutInputBlockId
)
{
*
aOutInputBlockId
=
InputBlockState
:
:
NO_BLOCK_ID
;
}
nsEventStatus
result
=
nsEventStatus_eIgnore
;
HitTestResult
hitResult
=
HitNothing
;
switch
(
aEvent
.
mInputType
)
{
case
MULTITOUCH_INPUT
:
{
MultiTouchInput
&
touchInput
=
aEvent
.
AsMultiTouchInput
(
)
;
result
=
ProcessTouchInput
(
touchInput
aOutTargetGuid
aOutInputBlockId
)
;
break
;
}
case
MOUSE_INPUT
:
{
MouseInput
&
mouseInput
=
aEvent
.
AsMouseInput
(
)
;
mouseInput
.
mHandledByAPZ
=
true
;
bool
startsDrag
=
DragTracker
:
:
StartsDrag
(
mouseInput
)
;
if
(
startsDrag
)
{
FlushRepaintsToClearScreenToGeckoTransform
(
)
;
}
HitTestingTreeNode
*
hitScrollbarNode
=
nullptr
;
RefPtr
<
AsyncPanZoomController
>
apzc
=
GetTargetAPZC
(
mouseInput
.
mOrigin
&
hitResult
&
hitScrollbarNode
)
;
bool
hitScrollbar
=
hitScrollbarNode
;
{
MutexAutoLock
lock
(
mTreeLock
)
;
if
(
!
apzc
&
&
mRootNode
)
{
apzc
=
mRootNode
-
>
GetApzc
(
)
;
}
}
if
(
apzc
)
{
bool
targetConfirmed
=
(
hitResult
!
=
HitNothing
&
&
hitResult
!
=
HitDispatchToContentRegion
)
;
bool
apzDragEnabled
=
gfxPrefs
:
:
APZDragEnabled
(
)
;
if
(
apzDragEnabled
&
&
hitScrollbar
)
{
targetConfirmed
=
false
;
}
result
=
mInputQueue
-
>
ReceiveInputEvent
(
apzc
targetConfirmed
mouseInput
aOutInputBlockId
)
;
if
(
apzDragEnabled
&
&
startsDrag
&
&
hitScrollbarNode
&
&
hitScrollbarNode
-
>
IsScrollThumbNode
(
)
&
&
hitScrollbarNode
-
>
GetScrollThumbData
(
)
.
mIsAsyncDraggable
&
&
mInputQueue
-
>
GetCurrentDragBlock
(
)
)
{
DragBlockState
*
dragBlock
=
mInputQueue
-
>
GetCurrentDragBlock
(
)
;
const
ScrollThumbData
&
thumbData
=
hitScrollbarNode
-
>
GetScrollThumbData
(
)
;
dragBlock
-
>
SetInitialThumbPos
(
thumbData
.
mThumbStart
)
;
if
(
gfxPrefs
:
:
APZDragInitiationEnabled
(
)
&
&
hitScrollbarNode
-
>
GetScrollTargetId
(
)
=
=
apzc
-
>
GetGuid
(
)
.
mScrollId
&
&
!
apzc
-
>
IsScrollInfoLayer
(
)
)
{
uint64_t
dragBlockId
=
dragBlock
-
>
GetBlockId
(
)
;
mouseInput
.
TransformToLocal
(
apzc
-
>
GetTransformToThis
(
)
)
;
CSSCoord
dragStart
=
apzc
-
>
ConvertScrollbarPoint
(
mouseInput
.
mLocalOrigin
thumbData
)
;
LayerToParentLayerMatrix4x4
thumbTransform
;
{
MutexAutoLock
lock
(
mTreeLock
)
;
thumbTransform
=
ComputeTransformForNode
(
hitScrollbarNode
)
;
}
CSSCoord
thumbStart
=
thumbData
.
mThumbStart
+
(
(
thumbData
.
mDirection
=
=
ScrollDirection
:
:
HORIZONTAL
)
?
thumbTransform
.
_41
:
thumbTransform
.
_42
)
;
dragStart
-
=
thumbStart
;
dragBlock
-
>
SetContentResponse
(
false
)
;
mInputQueue
-
>
ConfirmDragBlock
(
dragBlockId
apzc
AsyncDragMetrics
(
apzc
-
>
GetGuid
(
)
.
mScrollId
apzc
-
>
GetGuid
(
)
.
mPresShellId
dragBlockId
dragStart
thumbData
.
mDirection
)
)
;
}
}
if
(
result
=
=
nsEventStatus_eConsumeDoDefault
)
{
hitScrollbar
=
mInputQueue
-
>
IsDragOnScrollbar
(
hitScrollbar
)
;
}
apzc
-
>
GetGuid
(
aOutTargetGuid
)
;
if
(
!
hitScrollbar
)
{
ScreenToParentLayerMatrix4x4
transformToApzc
=
GetScreenToApzcTransform
(
apzc
)
;
ParentLayerToScreenMatrix4x4
transformToGecko
=
GetApzcToGeckoTransform
(
apzc
)
;
ScreenToScreenMatrix4x4
outTransform
=
transformToApzc
*
transformToGecko
;
Maybe
<
ScreenPoint
>
untransformedRefPoint
=
UntransformBy
(
outTransform
mouseInput
.
mOrigin
)
;
if
(
untransformedRefPoint
)
{
mouseInput
.
mOrigin
=
*
untransformedRefPoint
;
}
}
else
{
aOutTargetGuid
-
>
mScrollId
=
FrameMetrics
:
:
NULL_SCROLL_ID
;
}
}
break
;
}
case
SCROLLWHEEL_INPUT
:
{
FlushRepaintsToClearScreenToGeckoTransform
(
)
;
ScrollWheelInput
&
wheelInput
=
aEvent
.
AsScrollWheelInput
(
)
;
wheelInput
.
mHandledByAPZ
=
WillHandleInput
(
wheelInput
)
;
if
(
!
wheelInput
.
mHandledByAPZ
)
{
return
result
;
}
RefPtr
<
AsyncPanZoomController
>
apzc
=
GetTargetAPZC
(
wheelInput
.
mOrigin
&
hitResult
)
;
if
(
apzc
)
{
MOZ_ASSERT
(
hitResult
!
=
HitNothing
)
;
ScreenToScreenMatrix4x4
transformToGecko
=
GetScreenToApzcTransform
(
apzc
)
*
GetApzcToGeckoTransform
(
apzc
)
;
Maybe
<
ScreenPoint
>
untransformedOrigin
=
UntransformBy
(
transformToGecko
wheelInput
.
mOrigin
)
;
if
(
!
untransformedOrigin
)
{
return
result
;
}
result
=
mInputQueue
-
>
ReceiveInputEvent
(
apzc
hitResult
!
=
HitDispatchToContentRegion
wheelInput
aOutInputBlockId
)
;
apzc
-
>
GetGuid
(
aOutTargetGuid
)
;
wheelInput
.
mOrigin
=
*
untransformedOrigin
;
}
break
;
}
case
PANGESTURE_INPUT
:
{
FlushRepaintsToClearScreenToGeckoTransform
(
)
;
PanGestureInput
&
panInput
=
aEvent
.
AsPanGestureInput
(
)
;
panInput
.
mHandledByAPZ
=
WillHandleInput
(
panInput
)
;
if
(
!
panInput
.
mHandledByAPZ
)
{
return
result
;
}
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
WidgetWheelEvent
wheelEvent
=
panInput
.
ToWidgetWheelEvent
(
nullptr
)
;
EventStateManager
:
:
GetUserPrefsForWheelEvent
(
&
wheelEvent
&
panInput
.
mUserDeltaMultiplierX
&
panInput
.
mUserDeltaMultiplierY
)
;
RefPtr
<
AsyncPanZoomController
>
apzc
=
GetTargetAPZC
(
panInput
.
mPanStartPoint
&
hitResult
)
;
if
(
apzc
)
{
MOZ_ASSERT
(
hitResult
!
=
HitNothing
)
;
ScreenToScreenMatrix4x4
transformToGecko
=
GetScreenToApzcTransform
(
apzc
)
*
GetApzcToGeckoTransform
(
apzc
)
;
Maybe
<
ScreenPoint
>
untransformedStartPoint
=
UntransformBy
(
transformToGecko
panInput
.
mPanStartPoint
)
;
Maybe
<
ScreenPoint
>
untransformedDisplacement
=
UntransformVector
(
transformToGecko
panInput
.
mPanDisplacement
panInput
.
mPanStartPoint
)
;
if
(
!
untransformedStartPoint
|
|
!
untransformedDisplacement
)
{
return
result
;
}
result
=
mInputQueue
-
>
ReceiveInputEvent
(
apzc
hitResult
!
=
HitDispatchToContentRegion
panInput
aOutInputBlockId
)
;
apzc
-
>
GetGuid
(
aOutTargetGuid
)
;
panInput
.
mPanStartPoint
=
*
untransformedStartPoint
;
panInput
.
mPanDisplacement
=
*
untransformedDisplacement
;
}
break
;
}
case
PINCHGESTURE_INPUT
:
{
PinchGestureInput
&
pinchInput
=
aEvent
.
AsPinchGestureInput
(
)
;
RefPtr
<
AsyncPanZoomController
>
apzc
=
GetTargetAPZC
(
pinchInput
.
mFocusPoint
&
hitResult
)
;
if
(
apzc
)
{
MOZ_ASSERT
(
hitResult
!
=
HitNothing
)
;
ScreenToScreenMatrix4x4
outTransform
=
GetScreenToApzcTransform
(
apzc
)
*
GetApzcToGeckoTransform
(
apzc
)
;
Maybe
<
ScreenPoint
>
untransformedFocusPoint
=
UntransformBy
(
outTransform
pinchInput
.
mFocusPoint
)
;
if
(
!
untransformedFocusPoint
)
{
return
result
;
}
result
=
mInputQueue
-
>
ReceiveInputEvent
(
apzc
hitResult
!
=
HitDispatchToContentRegion
pinchInput
aOutInputBlockId
)
;
apzc
-
>
GetGuid
(
aOutTargetGuid
)
;
pinchInput
.
mFocusPoint
=
*
untransformedFocusPoint
;
}
break
;
}
case
TAPGESTURE_INPUT
:
{
TapGestureInput
&
tapInput
=
aEvent
.
AsTapGestureInput
(
)
;
RefPtr
<
AsyncPanZoomController
>
apzc
=
GetTargetAPZC
(
tapInput
.
mPoint
&
hitResult
)
;
if
(
apzc
)
{
MOZ_ASSERT
(
hitResult
!
=
HitNothing
)
;
ScreenToScreenMatrix4x4
outTransform
=
GetScreenToApzcTransform
(
apzc
)
*
GetApzcToGeckoTransform
(
apzc
)
;
Maybe
<
ScreenIntPoint
>
untransformedPoint
=
UntransformBy
(
outTransform
tapInput
.
mPoint
)
;
if
(
!
untransformedPoint
)
{
return
result
;
}
result
=
mInputQueue
-
>
ReceiveInputEvent
(
apzc
hitResult
!
=
HitDispatchToContentRegion
tapInput
aOutInputBlockId
)
;
apzc
-
>
GetGuid
(
aOutTargetGuid
)
;
tapInput
.
mPoint
=
*
untransformedPoint
;
}
break
;
}
case
SENTINEL_INPUT
:
{
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
InputType
.
"
)
;
break
;
}
}
return
result
;
}
static
TouchBehaviorFlags
ConvertToTouchBehavior
(
HitTestResult
result
)
{
switch
(
result
)
{
case
HitNothing
:
return
AllowedTouchBehavior
:
:
NONE
;
case
HitLayer
:
return
AllowedTouchBehavior
:
:
VERTICAL_PAN
|
AllowedTouchBehavior
:
:
HORIZONTAL_PAN
|
AllowedTouchBehavior
:
:
PINCH_ZOOM
|
AllowedTouchBehavior
:
:
DOUBLE_TAP_ZOOM
;
case
HitLayerTouchActionNone
:
return
AllowedTouchBehavior
:
:
NONE
;
case
HitLayerTouchActionPanX
:
return
AllowedTouchBehavior
:
:
HORIZONTAL_PAN
;
case
HitLayerTouchActionPanY
:
return
AllowedTouchBehavior
:
:
VERTICAL_PAN
;
case
HitLayerTouchActionPanXY
:
return
AllowedTouchBehavior
:
:
HORIZONTAL_PAN
|
AllowedTouchBehavior
:
:
VERTICAL_PAN
;
case
HitDispatchToContentRegion
:
return
AllowedTouchBehavior
:
:
UNKNOWN
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
value
"
)
;
return
AllowedTouchBehavior
:
:
UNKNOWN
;
}
already_AddRefed
<
AsyncPanZoomController
>
APZCTreeManager
:
:
GetTouchInputBlockAPZC
(
const
MultiTouchInput
&
aEvent
nsTArray
<
TouchBehaviorFlags
>
*
aOutTouchBehaviors
HitTestResult
*
aOutHitResult
)
{
RefPtr
<
AsyncPanZoomController
>
apzc
;
if
(
aEvent
.
mTouches
.
Length
(
)
=
=
0
)
{
return
apzc
.
forget
(
)
;
}
FlushRepaintsToClearScreenToGeckoTransform
(
)
;
HitTestResult
hitResult
;
apzc
=
GetTargetAPZC
(
aEvent
.
mTouches
[
0
]
.
mScreenPoint
&
hitResult
)
;
if
(
aOutTouchBehaviors
)
{
aOutTouchBehaviors
-
>
AppendElement
(
ConvertToTouchBehavior
(
hitResult
)
)
;
}
for
(
size_t
i
=
1
;
i
<
aEvent
.
mTouches
.
Length
(
)
;
i
+
+
)
{
RefPtr
<
AsyncPanZoomController
>
apzc2
=
GetTargetAPZC
(
aEvent
.
mTouches
[
i
]
.
mScreenPoint
&
hitResult
)
;
if
(
aOutTouchBehaviors
)
{
aOutTouchBehaviors
-
>
AppendElement
(
ConvertToTouchBehavior
(
hitResult
)
)
;
}
apzc
=
GetMultitouchTarget
(
apzc
apzc2
)
;
APZCTM_LOG
(
"
Using
APZC
%
p
as
the
root
APZC
for
multi
-
touch
\
n
"
apzc
.
get
(
)
)
;
}
if
(
aOutHitResult
)
{
*
aOutHitResult
=
hitResult
;
}
return
apzc
.
forget
(
)
;
}
nsEventStatus
APZCTreeManager
:
:
ProcessTouchInput
(
MultiTouchInput
&
aInput
ScrollableLayerGuid
*
aOutTargetGuid
uint64_t
*
aOutInputBlockId
)
{
aInput
.
mHandledByAPZ
=
true
;
nsTArray
<
TouchBehaviorFlags
>
touchBehaviors
;
if
(
aInput
.
mType
=
=
MultiTouchInput
:
:
MULTITOUCH_START
)
{
if
(
mApzcForInputBlock
&
&
mApzcForInputBlock
-
>
IsInPanningState
(
)
&
&
BuildOverscrollHandoffChain
(
mApzcForInputBlock
)
-
>
HasOverscrolledApzc
(
)
)
{
if
(
mRetainedTouchIdentifier
=
=
-
1
)
{
mRetainedTouchIdentifier
=
mApzcForInputBlock
-
>
GetLastTouchIdentifier
(
)
;
}
return
nsEventStatus_eConsumeNoDefault
;
}
mHitResultForInputBlock
=
HitNothing
;
mApzcForInputBlock
=
GetTouchInputBlockAPZC
(
aInput
&
touchBehaviors
&
mHitResultForInputBlock
)
;
MOZ_ASSERT
(
touchBehaviors
.
Length
(
)
=
=
aInput
.
mTouches
.
Length
(
)
)
;
for
(
size_t
i
=
0
;
i
<
touchBehaviors
.
Length
(
)
;
i
+
+
)
{
APZCTM_LOG
(
"
Touch
point
has
allowed
behaviours
0x
%
02x
\
n
"
touchBehaviors
[
i
]
)
;
if
(
touchBehaviors
[
i
]
=
=
AllowedTouchBehavior
:
:
UNKNOWN
)
{
touchBehaviors
.
Clear
(
)
;
break
;
}
}
}
else
if
(
mApzcForInputBlock
)
{
APZCTM_LOG
(
"
Re
-
using
APZC
%
p
as
continuation
of
event
block
\
n
"
mApzcForInputBlock
.
get
(
)
)
;
}
if
(
aInput
.
mType
=
=
MultiTouchInput
:
:
MULTITOUCH_CANCEL
)
{
mRetainedTouchIdentifier
=
-
1
;
}
if
(
mRetainedTouchIdentifier
!
=
-
1
)
{
for
(
size_t
j
=
0
;
j
<
aInput
.
mTouches
.
Length
(
)
;
+
+
j
)
{
if
(
aInput
.
mTouches
[
j
]
.
mIdentifier
!
=
mRetainedTouchIdentifier
)
{
aInput
.
mTouches
.
RemoveElementAt
(
j
)
;
if
(
!
touchBehaviors
.
IsEmpty
(
)
)
{
MOZ_ASSERT
(
touchBehaviors
.
Length
(
)
>
j
)
;
touchBehaviors
.
RemoveElementAt
(
j
)
;
}
-
-
j
;
}
}
if
(
aInput
.
mTouches
.
IsEmpty
(
)
)
{
return
nsEventStatus_eConsumeNoDefault
;
}
}
nsEventStatus
result
=
nsEventStatus_eIgnore
;
if
(
mApzcForInputBlock
)
{
MOZ_ASSERT
(
mHitResultForInputBlock
!
=
HitNothing
)
;
mApzcForInputBlock
-
>
GetGuid
(
aOutTargetGuid
)
;
uint64_t
inputBlockId
=
0
;
result
=
mInputQueue
-
>
ReceiveInputEvent
(
mApzcForInputBlock
mHitResultForInputBlock
!
=
HitDispatchToContentRegion
aInput
&
inputBlockId
)
;
if
(
aOutInputBlockId
)
{
*
aOutInputBlockId
=
inputBlockId
;
}
if
(
!
touchBehaviors
.
IsEmpty
(
)
)
{
mInputQueue
-
>
SetAllowedTouchBehavior
(
inputBlockId
touchBehaviors
)
;
}
ScreenToParentLayerMatrix4x4
transformToApzc
=
GetScreenToApzcTransform
(
mApzcForInputBlock
)
;
ParentLayerToScreenMatrix4x4
transformToGecko
=
GetApzcToGeckoTransform
(
mApzcForInputBlock
)
;
ScreenToScreenMatrix4x4
outTransform
=
transformToApzc
*
transformToGecko
;
for
(
size_t
i
=
0
;
i
<
aInput
.
mTouches
.
Length
(
)
;
i
+
+
)
{
SingleTouchData
&
touchData
=
aInput
.
mTouches
[
i
]
;
Maybe
<
ScreenIntPoint
>
untransformedScreenPoint
=
UntransformBy
(
outTransform
touchData
.
mScreenPoint
)
;
if
(
!
untransformedScreenPoint
)
{
return
nsEventStatus_eIgnore
;
}
touchData
.
mScreenPoint
=
*
untransformedScreenPoint
;
}
}
mTouchCounter
.
Update
(
aInput
)
;
if
(
mTouchCounter
.
GetActiveTouchCount
(
)
=
=
0
)
{
mApzcForInputBlock
=
nullptr
;
mHitResultForInputBlock
=
HitNothing
;
mRetainedTouchIdentifier
=
-
1
;
}
return
result
;
}
void
APZCTreeManager
:
:
UpdateWheelTransaction
(
LayoutDeviceIntPoint
aRefPoint
EventMessage
aEventMessage
)
{
WheelBlockState
*
txn
=
mInputQueue
-
>
GetActiveWheelTransaction
(
)
;
if
(
!
txn
)
{
return
;
}
if
(
txn
-
>
MaybeTimeout
(
TimeStamp
:
:
Now
(
)
)
)
{
return
;
}
switch
(
aEventMessage
)
{
case
eMouseMove
:
case
eDragOver
:
{
ScreenIntPoint
point
=
ViewAs
<
ScreenPixel
>
(
aRefPoint
PixelCastJustification
:
:
LayoutDeviceIsScreenForUntransformedEvent
)
;
txn
-
>
OnMouseMove
(
point
)
;
return
;
}
case
eKeyPress
:
case
eKeyUp
:
case
eKeyDown
:
case
eMouseUp
:
case
eMouseDown
:
case
eMouseDoubleClick
:
case
eMouseAuxClick
:
case
eMouseClick
:
case
eContextMenu
:
case
eDrop
:
txn
-
>
EndTransaction
(
)
;
return
;
default
:
break
;
}
}
void
APZCTreeManager
:
:
TransformEventRefPoint
(
LayoutDeviceIntPoint
*
aRefPoint
ScrollableLayerGuid
*
aOutTargetGuid
)
{
HitTestResult
hitResult
=
HitNothing
;
PixelCastJustification
LDIsScreen
=
PixelCastJustification
:
:
LayoutDeviceIsScreenForUntransformedEvent
;
ScreenIntPoint
refPointAsScreen
=
ViewAs
<
ScreenPixel
>
(
*
aRefPoint
LDIsScreen
)
;
RefPtr
<
AsyncPanZoomController
>
apzc
=
GetTargetAPZC
(
refPointAsScreen
&
hitResult
)
;
if
(
apzc
)
{
MOZ_ASSERT
(
hitResult
!
=
HitNothing
)
;
apzc
-
>
GetGuid
(
aOutTargetGuid
)
;
ScreenToParentLayerMatrix4x4
transformToApzc
=
GetScreenToApzcTransform
(
apzc
)
;
ParentLayerToScreenMatrix4x4
transformToGecko
=
GetApzcToGeckoTransform
(
apzc
)
;
ScreenToScreenMatrix4x4
outTransform
=
transformToApzc
*
transformToGecko
;
Maybe
<
ScreenIntPoint
>
untransformedRefPoint
=
UntransformBy
(
outTransform
refPointAsScreen
)
;
if
(
untransformedRefPoint
)
{
*
aRefPoint
=
ViewAs
<
LayoutDevicePixel
>
(
*
untransformedRefPoint
LDIsScreen
)
;
}
}
}
void
APZCTreeManager
:
:
ProcessTouchVelocity
(
uint32_t
aTimestampMs
float
aSpeedY
)
{
if
(
mApzcForInputBlock
)
{
mApzcForInputBlock
-
>
HandleTouchVelocity
(
aTimestampMs
aSpeedY
)
;
}
}
void
APZCTreeManager
:
:
ZoomToRect
(
const
ScrollableLayerGuid
&
aGuid
const
CSSRect
&
aRect
const
uint32_t
aFlags
)
{
RefPtr
<
AsyncPanZoomController
>
apzc
=
GetTargetAPZC
(
aGuid
)
;
if
(
apzc
)
{
apzc
-
>
ZoomToRect
(
aRect
aFlags
)
;
}
}
void
APZCTreeManager
:
:
ContentReceivedInputBlock
(
uint64_t
aInputBlockId
bool
aPreventDefault
)
{
APZThreadUtils
:
:
AssertOnControllerThread
(
)
;
mInputQueue
-
>
ContentReceivedInputBlock
(
aInputBlockId
aPreventDefault
)
;
}
void
APZCTreeManager
:
:
SetTargetAPZC
(
uint64_t
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
)
{
APZThreadUtils
:
:
AssertOnControllerThread
(
)
;
RefPtr
<
AsyncPanZoomController
>
target
=
nullptr
;
if
(
aTargets
.
Length
(
)
>
0
)
{
target
=
GetTargetAPZC
(
aTargets
[
0
]
)
;
}
for
(
size_t
i
=
1
;
i
<
aTargets
.
Length
(
)
;
i
+
+
)
{
RefPtr
<
AsyncPanZoomController
>
apzc
=
GetTargetAPZC
(
aTargets
[
i
]
)
;
target
=
GetMultitouchTarget
(
target
apzc
)
;
}
mInputQueue
-
>
SetConfirmedTargetApzc
(
aInputBlockId
target
)
;
}
void
APZCTreeManager
:
:
SetTargetAPZC
(
uint64_t
aInputBlockId
const
ScrollableLayerGuid
&
aTarget
)
{
APZThreadUtils
:
:
AssertOnControllerThread
(
)
;
RefPtr
<
AsyncPanZoomController
>
apzc
=
GetTargetAPZC
(
aTarget
)
;
mInputQueue
-
>
SetConfirmedTargetApzc
(
aInputBlockId
apzc
)
;
}
void
APZCTreeManager
:
:
UpdateZoomConstraints
(
const
ScrollableLayerGuid
&
aGuid
const
Maybe
<
ZoomConstraints
>
&
aConstraints
)
{
MutexAutoLock
lock
(
mTreeLock
)
;
RefPtr
<
HitTestingTreeNode
>
node
=
GetTargetNode
(
aGuid
nullptr
)
;
MOZ_ASSERT
(
!
node
|
|
node
-
>
GetApzc
(
)
)
;
if
(
aConstraints
)
{
APZCTM_LOG
(
"
Recording
constraints
%
s
for
guid
%
s
\
n
"
Stringify
(
aConstraints
.
value
(
)
)
.
c_str
(
)
Stringify
(
aGuid
)
.
c_str
(
)
)
;
mZoomConstraints
[
aGuid
]
=
aConstraints
.
ref
(
)
;
}
else
{
APZCTM_LOG
(
"
Removing
constraints
for
guid
%
s
\
n
"
Stringify
(
aGuid
)
.
c_str
(
)
)
;
mZoomConstraints
.
erase
(
aGuid
)
;
}
if
(
node
&
&
aConstraints
)
{
ForEachNode
<
ReverseIterator
>
(
node
.
get
(
)
[
&
aConstraints
&
node
this
]
(
HitTestingTreeNode
*
aNode
)
{
if
(
aNode
!
=
node
)
{
if
(
AsyncPanZoomController
*
childApzc
=
aNode
-
>
GetApzc
(
)
)
{
if
(
childApzc
-
>
HasNoParentWithSameLayersId
(
)
|
|
this
-
>
mZoomConstraints
.
find
(
childApzc
-
>
GetGuid
(
)
)
!
=
this
-
>
mZoomConstraints
.
end
(
)
)
{
return
TraversalFlag
:
:
Skip
;
}
}
}
if
(
aNode
-
>
IsPrimaryHolder
(
)
)
{
MOZ_ASSERT
(
aNode
-
>
GetApzc
(
)
)
;
aNode
-
>
GetApzc
(
)
-
>
UpdateZoomConstraints
(
aConstraints
.
ref
(
)
)
;
}
return
TraversalFlag
:
:
Continue
;
}
)
;
}
}
void
APZCTreeManager
:
:
FlushRepaintsToClearScreenToGeckoTransform
(
)
{
MutexAutoLock
lock
(
mTreeLock
)
;
mTreeLock
.
AssertCurrentThreadOwns
(
)
;
ForEachNode
<
ReverseIterator
>
(
mRootNode
.
get
(
)
[
]
(
HitTestingTreeNode
*
aNode
)
{
if
(
aNode
-
>
IsPrimaryHolder
(
)
)
{
MOZ_ASSERT
(
aNode
-
>
GetApzc
(
)
)
;
aNode
-
>
GetApzc
(
)
-
>
FlushRepaintForNewInputBlock
(
)
;
}
}
)
;
}
void
APZCTreeManager
:
:
CancelAnimation
(
const
ScrollableLayerGuid
&
aGuid
)
{
RefPtr
<
AsyncPanZoomController
>
apzc
=
GetTargetAPZC
(
aGuid
)
;
if
(
apzc
)
{
apzc
-
>
CancelAnimation
(
)
;
}
}
void
APZCTreeManager
:
:
AdjustScrollForSurfaceShift
(
const
ScreenPoint
&
aShift
)
{
MutexAutoLock
lock
(
mTreeLock
)
;
RefPtr
<
AsyncPanZoomController
>
apzc
=
FindRootContentOrRootApzc
(
)
;
if
(
apzc
)
{
apzc
-
>
AdjustScrollForSurfaceShift
(
aShift
)
;
}
}
void
APZCTreeManager
:
:
ClearTree
(
)
{
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableMethod
(
"
layers
:
:
InputQueue
:
:
Clear
"
mInputQueue
&
InputQueue
:
:
Clear
)
)
;
MutexAutoLock
lock
(
mTreeLock
)
;
nsTArray
<
RefPtr
<
HitTestingTreeNode
>
>
nodesToDestroy
;
ForEachNode
<
ReverseIterator
>
(
mRootNode
.
get
(
)
[
&
nodesToDestroy
]
(
HitTestingTreeNode
*
aNode
)
{
nodesToDestroy
.
AppendElement
(
aNode
)
;
}
)
;
for
(
size_t
i
=
0
;
i
<
nodesToDestroy
.
Length
(
)
;
i
+
+
)
{
nodesToDestroy
[
i
]
-
>
Destroy
(
)
;
}
mRootNode
=
nullptr
;
RefPtr
<
APZCTreeManager
>
self
(
this
)
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
layers
:
:
APZCTreeManager
:
:
ClearTree
"
[
self
]
{
self
-
>
mFlushObserver
-
>
Unregister
(
)
;
self
-
>
mFlushObserver
=
nullptr
;
}
)
)
;
}
RefPtr
<
HitTestingTreeNode
>
APZCTreeManager
:
:
GetRootNode
(
)
const
{
MutexAutoLock
lock
(
mTreeLock
)
;
return
mRootNode
;
}
static
bool
TransformDisplacement
(
APZCTreeManager
*
aTreeManager
AsyncPanZoomController
*
aSource
AsyncPanZoomController
*
aTarget
ParentLayerPoint
&
aStartPoint
ParentLayerPoint
&
aEndPoint
)
{
if
(
aSource
=
=
aTarget
)
{
return
true
;
}
ParentLayerToScreenMatrix4x4
untransformToApzc
=
aTreeManager
-
>
GetScreenToApzcTransform
(
aSource
)
.
Inverse
(
)
;
ScreenPoint
screenStart
=
TransformBy
(
untransformToApzc
aStartPoint
)
;
ScreenPoint
screenEnd
=
TransformBy
(
untransformToApzc
aEndPoint
)
;
ScreenToParentLayerMatrix4x4
transformToApzc
=
aTreeManager
-
>
GetScreenToApzcTransform
(
aTarget
)
;
Maybe
<
ParentLayerPoint
>
startPoint
=
UntransformBy
(
transformToApzc
screenStart
)
;
Maybe
<
ParentLayerPoint
>
endPoint
=
UntransformBy
(
transformToApzc
screenEnd
)
;
if
(
!
startPoint
|
|
!
endPoint
)
{
return
false
;
}
aEndPoint
=
*
endPoint
;
aStartPoint
=
*
startPoint
;
return
true
;
}
void
APZCTreeManager
:
:
DispatchScroll
(
AsyncPanZoomController
*
aPrev
ParentLayerPoint
&
aStartPoint
ParentLayerPoint
&
aEndPoint
OverscrollHandoffState
&
aOverscrollHandoffState
)
{
const
OverscrollHandoffChain
&
overscrollHandoffChain
=
aOverscrollHandoffState
.
mChain
;
uint32_t
overscrollHandoffChainIndex
=
aOverscrollHandoffState
.
mChainIndex
;
RefPtr
<
AsyncPanZoomController
>
next
;
if
(
overscrollHandoffChainIndex
>
=
overscrollHandoffChain
.
Length
(
)
)
{
return
;
}
next
=
overscrollHandoffChain
.
GetApzcAtIndex
(
overscrollHandoffChainIndex
)
;
if
(
next
=
=
nullptr
|
|
next
-
>
IsDestroyed
(
)
)
{
return
;
}
if
(
!
TransformDisplacement
(
this
aPrev
next
aStartPoint
aEndPoint
)
)
{
return
;
}
if
(
!
next
-
>
AttemptScroll
(
aStartPoint
aEndPoint
aOverscrollHandoffState
)
)
{
if
(
!
TransformDisplacement
(
this
next
aPrev
aStartPoint
aEndPoint
)
)
{
NS_WARNING
(
"
Failed
to
untransform
scroll
points
during
dispatch
"
)
;
}
}
}
void
APZCTreeManager
:
:
DispatchFling
(
AsyncPanZoomController
*
aPrev
FlingHandoffState
&
aHandoffState
)
{
if
(
aHandoffState
.
mIsHandoff
&
&
!
gfxPrefs
:
:
APZAllowImmediateHandoff
(
)
&
&
aHandoffState
.
mScrolledApzc
=
=
aPrev
)
{
return
;
}
const
OverscrollHandoffChain
*
chain
=
aHandoffState
.
mChain
;
RefPtr
<
AsyncPanZoomController
>
current
;
uint32_t
overscrollHandoffChainLength
=
chain
-
>
Length
(
)
;
uint32_t
startIndex
;
ParentLayerPoint
finalResidualVelocity
=
aHandoffState
.
mVelocity
;
ParentLayerPoint
startPoint
;
ParentLayerPoint
endPoint
;
if
(
aHandoffState
.
mIsHandoff
)
{
startIndex
=
chain
-
>
IndexOf
(
aPrev
)
+
1
;
if
(
startIndex
>
=
overscrollHandoffChainLength
)
{
return
;
}
}
else
{
startIndex
=
0
;
}
for
(
;
startIndex
<
overscrollHandoffChainLength
;
startIndex
+
+
)
{
current
=
chain
-
>
GetApzcAtIndex
(
startIndex
)
;
if
(
current
=
=
nullptr
|
|
current
-
>
IsDestroyed
(
)
)
{
return
;
}
endPoint
=
startPoint
+
aHandoffState
.
mVelocity
;
if
(
startIndex
>
0
)
{
if
(
!
TransformDisplacement
(
this
chain
-
>
GetApzcAtIndex
(
startIndex
-
1
)
current
startPoint
endPoint
)
)
{
return
;
}
}
ParentLayerPoint
transformedVelocity
=
endPoint
-
startPoint
;
aHandoffState
.
mVelocity
=
transformedVelocity
;
if
(
current
-
>
AttemptFling
(
aHandoffState
)
)
{
ParentLayerPoint
residualVelocity
=
aHandoffState
.
mVelocity
;
if
(
IsZero
(
residualVelocity
)
)
{
finalResidualVelocity
=
ParentLayerPoint
(
)
;
break
;
}
if
(
!
FuzzyEqualsAdditive
(
transformedVelocity
.
x
residualVelocity
.
x
COORDINATE_EPSILON
)
)
{
finalResidualVelocity
.
x
*
=
(
residualVelocity
.
x
/
transformedVelocity
.
x
)
;
}
if
(
!
FuzzyEqualsAdditive
(
transformedVelocity
.
y
residualVelocity
.
y
COORDINATE_EPSILON
)
)
{
finalResidualVelocity
.
y
*
=
(
residualVelocity
.
y
/
transformedVelocity
.
y
)
;
}
}
}
aHandoffState
.
mVelocity
=
finalResidualVelocity
;
}
bool
APZCTreeManager
:
:
HitTestAPZC
(
const
ScreenIntPoint
&
aPoint
)
{
RefPtr
<
AsyncPanZoomController
>
target
=
GetTargetAPZC
(
aPoint
nullptr
)
;
return
target
!
=
nullptr
;
}
already_AddRefed
<
AsyncPanZoomController
>
APZCTreeManager
:
:
GetTargetAPZC
(
const
ScrollableLayerGuid
&
aGuid
)
{
MutexAutoLock
lock
(
mTreeLock
)
;
RefPtr
<
HitTestingTreeNode
>
node
=
GetTargetNode
(
aGuid
nullptr
)
;
MOZ_ASSERT
(
!
node
|
|
node
-
>
GetApzc
(
)
)
;
RefPtr
<
AsyncPanZoomController
>
apzc
=
node
?
node
-
>
GetApzc
(
)
:
nullptr
;
return
apzc
.
forget
(
)
;
}
static
bool
GuidComparatorIgnoringPresShell
(
const
ScrollableLayerGuid
&
aOne
const
ScrollableLayerGuid
&
aTwo
)
{
return
aOne
.
mLayersId
=
=
aTwo
.
mLayersId
&
&
aOne
.
mScrollId
=
=
aTwo
.
mScrollId
;
}
already_AddRefed
<
AsyncPanZoomController
>
APZCTreeManager
:
:
GetTargetAPZC
(
const
uint64_t
&
aLayersId
const
FrameMetrics
:
:
ViewID
&
aScrollId
)
{
MutexAutoLock
lock
(
mTreeLock
)
;
ScrollableLayerGuid
guid
(
aLayersId
0
aScrollId
)
;
RefPtr
<
HitTestingTreeNode
>
node
=
GetTargetNode
(
guid
&
GuidComparatorIgnoringPresShell
)
;
MOZ_ASSERT
(
!
node
|
|
node
-
>
GetApzc
(
)
)
;
RefPtr
<
AsyncPanZoomController
>
apzc
=
node
?
node
-
>
GetApzc
(
)
:
nullptr
;
return
apzc
.
forget
(
)
;
}
already_AddRefed
<
HitTestingTreeNode
>
APZCTreeManager
:
:
GetTargetNode
(
const
ScrollableLayerGuid
&
aGuid
GuidComparator
aComparator
)
const
{
mTreeLock
.
AssertCurrentThreadOwns
(
)
;
RefPtr
<
HitTestingTreeNode
>
target
=
DepthFirstSearchPostOrder
<
ReverseIterator
>
(
mRootNode
.
get
(
)
[
&
aGuid
&
aComparator
]
(
HitTestingTreeNode
*
node
)
{
bool
matches
=
false
;
if
(
node
-
>
GetApzc
(
)
)
{
if
(
aComparator
)
{
matches
=
aComparator
(
aGuid
node
-
>
GetApzc
(
)
-
>
GetGuid
(
)
)
;
}
else
{
matches
=
node
-
>
GetApzc
(
)
-
>
Matches
(
aGuid
)
;
}
}
return
matches
;
}
)
;
return
target
.
forget
(
)
;
}
already_AddRefed
<
AsyncPanZoomController
>
APZCTreeManager
:
:
GetTargetAPZC
(
const
ScreenPoint
&
aPoint
HitTestResult
*
aOutHitResult
HitTestingTreeNode
*
*
aOutHitScrollbar
)
{
MutexAutoLock
lock
(
mTreeLock
)
;
HitTestResult
hitResult
=
HitNothing
;
ParentLayerPoint
point
=
ViewAs
<
ParentLayerPixel
>
(
aPoint
PixelCastJustification
:
:
ScreenIsParentLayerForRoot
)
;
RefPtr
<
AsyncPanZoomController
>
target
=
GetAPZCAtPoint
(
mRootNode
point
&
hitResult
aOutHitScrollbar
)
;
if
(
aOutHitResult
)
{
*
aOutHitResult
=
hitResult
;
}
return
target
.
forget
(
)
;
}
RefPtr
<
const
OverscrollHandoffChain
>
APZCTreeManager
:
:
BuildOverscrollHandoffChain
(
const
RefPtr
<
AsyncPanZoomController
>
&
aInitialTarget
)
{
MutexAutoLock
lock
(
mTreeLock
)
;
OverscrollHandoffChain
*
result
=
new
OverscrollHandoffChain
;
AsyncPanZoomController
*
apzc
=
aInitialTarget
;
while
(
apzc
!
=
nullptr
)
{
result
-
>
Add
(
apzc
)
;
if
(
apzc
-
>
GetScrollHandoffParentId
(
)
=
=
FrameMetrics
:
:
NULL_SCROLL_ID
)
{
if
(
!
apzc
-
>
IsRootForLayersId
(
)
)
{
NS_WARNING
(
"
Found
a
non
-
root
APZ
with
no
handoff
parent
"
)
;
}
apzc
=
apzc
-
>
GetParent
(
)
;
continue
;
}
MOZ_ASSERT
(
apzc
-
>
GetScrollHandoffParentId
(
)
!
=
apzc
-
>
GetGuid
(
)
.
mScrollId
)
;
AsyncPanZoomController
*
scrollParent
=
nullptr
;
AsyncPanZoomController
*
parent
=
apzc
;
while
(
!
parent
-
>
HasNoParentWithSameLayersId
(
)
)
{
parent
=
parent
-
>
GetParent
(
)
;
if
(
parent
-
>
GetGuid
(
)
.
mScrollId
=
=
apzc
-
>
GetScrollHandoffParentId
(
)
)
{
scrollParent
=
parent
;
break
;
}
}
if
(
!
scrollParent
)
{
ScrollableLayerGuid
guid
(
parent
-
>
GetGuid
(
)
.
mLayersId
0
apzc
-
>
GetScrollHandoffParentId
(
)
)
;
RefPtr
<
HitTestingTreeNode
>
node
=
GetTargetNode
(
guid
&
GuidComparatorIgnoringPresShell
)
;
MOZ_ASSERT
(
!
node
|
|
node
-
>
GetApzc
(
)
)
;
scrollParent
=
node
?
node
-
>
GetApzc
(
)
:
nullptr
;
}
apzc
=
scrollParent
;
}
result
-
>
SortByScrollPriority
(
)
;
for
(
uint32_t
i
=
0
;
i
<
result
-
>
Length
(
)
;
+
+
i
)
{
APZCTM_LOG
(
"
OverscrollHandoffChain
[
%
d
]
=
%
p
\
n
"
i
result
-
>
GetApzcAtIndex
(
i
)
.
get
(
)
)
;
}
return
result
;
}
void
APZCTreeManager
:
:
SetLongTapEnabled
(
bool
aLongTapEnabled
)
{
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableFunction
(
GestureEventListener
:
:
SetLongTapEnabled
aLongTapEnabled
)
)
;
}
RefPtr
<
HitTestingTreeNode
>
APZCTreeManager
:
:
FindScrollThumbNode
(
const
AsyncDragMetrics
&
aDragMetrics
)
{
MutexAutoLock
lock
(
mTreeLock
)
;
return
DepthFirstSearch
<
ReverseIterator
>
(
mRootNode
.
get
(
)
[
&
aDragMetrics
]
(
HitTestingTreeNode
*
aNode
)
{
return
aNode
-
>
MatchesScrollDragMetrics
(
aDragMetrics
)
;
}
)
;
}
AsyncPanZoomController
*
APZCTreeManager
:
:
GetTargetApzcForNode
(
HitTestingTreeNode
*
aNode
)
{
for
(
const
HitTestingTreeNode
*
n
=
aNode
;
n
&
&
n
-
>
GetLayersId
(
)
=
=
aNode
-
>
GetLayersId
(
)
;
n
=
n
-
>
GetParent
(
)
)
{
if
(
n
-
>
GetApzc
(
)
)
{
APZCTM_LOG
(
"
Found
target
%
p
using
ancestor
lookup
\
n
"
n
-
>
GetApzc
(
)
)
;
return
n
-
>
GetApzc
(
)
;
}
if
(
n
-
>
GetFixedPosTarget
(
)
!
=
FrameMetrics
:
:
NULL_SCROLL_ID
)
{
ScrollableLayerGuid
guid
(
n
-
>
GetLayersId
(
)
0
n
-
>
GetFixedPosTarget
(
)
)
;
RefPtr
<
HitTestingTreeNode
>
fpNode
=
GetTargetNode
(
guid
&
GuidComparatorIgnoringPresShell
)
;
APZCTM_LOG
(
"
Found
target
node
%
p
using
fixed
-
pos
lookup
on
%
"
PRIu64
"
\
n
"
fpNode
.
get
(
)
n
-
>
GetFixedPosTarget
(
)
)
;
return
fpNode
?
fpNode
-
>
GetApzc
(
)
:
nullptr
;
}
}
return
nullptr
;
}
AsyncPanZoomController
*
APZCTreeManager
:
:
GetAPZCAtPoint
(
HitTestingTreeNode
*
aNode
const
ParentLayerPoint
&
aHitTestPoint
HitTestResult
*
aOutHitResult
HitTestingTreeNode
*
*
aOutScrollbarNode
)
{
mTreeLock
.
AssertCurrentThreadOwns
(
)
;
HitTestingTreeNode
*
resultNode
;
HitTestingTreeNode
*
root
=
aNode
;
std
:
:
stack
<
LayerPoint
>
hitTestPoints
;
hitTestPoints
.
push
(
ViewAs
<
LayerPixel
>
(
aHitTestPoint
PixelCastJustification
:
:
MovingDownToChildren
)
)
;
ForEachNode
<
ReverseIterator
>
(
root
[
&
hitTestPoints
this
]
(
HitTestingTreeNode
*
aNode
)
{
ParentLayerPoint
hitTestPointForParent
=
ViewAs
<
ParentLayerPixel
>
(
hitTestPoints
.
top
(
)
PixelCastJustification
:
:
MovingDownToChildren
)
;
if
(
aNode
-
>
IsOutsideClip
(
hitTestPointForParent
)
)
{
APZCTM_LOG
(
"
Point
%
f
%
f
outside
clip
for
node
%
p
\
n
"
hitTestPoints
.
top
(
)
.
x
hitTestPoints
.
top
(
)
.
y
aNode
)
;
return
TraversalFlag
:
:
Skip
;
}
Maybe
<
LayerPoint
>
hitTestPoint
=
aNode
-
>
Untransform
(
hitTestPointForParent
ComputeTransformForNode
(
aNode
)
)
;
APZCTM_LOG
(
"
Transformed
ParentLayer
point
%
s
to
layer
%
s
\
n
"
Stringify
(
hitTestPointForParent
)
.
c_str
(
)
hitTestPoint
?
Stringify
(
hitTestPoint
.
ref
(
)
)
.
c_str
(
)
:
"
nil
"
)
;
if
(
!
hitTestPoint
)
{
return
TraversalFlag
:
:
Skip
;
}
hitTestPoints
.
push
(
hitTestPoint
.
ref
(
)
)
;
return
TraversalFlag
:
:
Continue
;
}
[
&
resultNode
&
hitTestPoints
&
aOutHitResult
]
(
HitTestingTreeNode
*
aNode
)
{
HitTestResult
hitResult
=
aNode
-
>
HitTest
(
hitTestPoints
.
top
(
)
)
;
hitTestPoints
.
pop
(
)
;
APZCTM_LOG
(
"
Testing
Layer
point
%
s
against
node
%
p
\
n
"
Stringify
(
hitTestPoints
.
top
(
)
)
.
c_str
(
)
aNode
)
;
if
(
hitResult
!
=
HitTestResult
:
:
HitNothing
)
{
resultNode
=
aNode
;
*
aOutHitResult
=
hitResult
;
return
TraversalFlag
:
:
Abort
;
}
return
TraversalFlag
:
:
Continue
;
}
)
;
if
(
*
aOutHitResult
!
=
HitNothing
)
{
MOZ_ASSERT
(
resultNode
)
;
for
(
HitTestingTreeNode
*
n
=
resultNode
;
n
;
n
=
n
-
>
GetParent
(
)
)
{
if
(
n
-
>
IsScrollbarNode
(
)
)
{
if
(
aOutScrollbarNode
)
{
*
aOutScrollbarNode
=
n
;
}
ScrollableLayerGuid
guid
(
n
-
>
GetLayersId
(
)
0
n
-
>
GetScrollTargetId
(
)
)
;
if
(
RefPtr
<
HitTestingTreeNode
>
scrollTarget
=
GetTargetNode
(
guid
&
GuidComparatorIgnoringPresShell
)
)
{
MOZ_ASSERT
(
scrollTarget
-
>
GetApzc
(
)
)
;
return
scrollTarget
-
>
GetApzc
(
)
;
}
}
}
AsyncPanZoomController
*
result
=
GetTargetApzcForNode
(
resultNode
)
;
if
(
!
result
)
{
result
=
FindRootApzcForLayersId
(
resultNode
-
>
GetLayersId
(
)
)
;
MOZ_ASSERT
(
result
)
;
APZCTM_LOG
(
"
Found
target
%
p
using
root
lookup
\
n
"
result
)
;
}
APZCTM_LOG
(
"
Successfully
matched
APZC
%
p
via
node
%
p
(
hit
result
%
d
)
\
n
"
result
resultNode
*
aOutHitResult
)
;
return
result
;
}
return
nullptr
;
}
AsyncPanZoomController
*
APZCTreeManager
:
:
FindRootApzcForLayersId
(
uint64_t
aLayersId
)
const
{
mTreeLock
.
AssertCurrentThreadOwns
(
)
;
HitTestingTreeNode
*
resultNode
=
BreadthFirstSearch
<
ReverseIterator
>
(
mRootNode
.
get
(
)
[
aLayersId
]
(
HitTestingTreeNode
*
aNode
)
{
AsyncPanZoomController
*
apzc
=
aNode
-
>
GetApzc
(
)
;
return
apzc
&
&
apzc
-
>
GetLayersId
(
)
=
=
aLayersId
&
&
apzc
-
>
IsRootForLayersId
(
)
;
}
)
;
return
resultNode
?
resultNode
-
>
GetApzc
(
)
:
nullptr
;
}
AsyncPanZoomController
*
APZCTreeManager
:
:
FindRootContentApzcForLayersId
(
uint64_t
aLayersId
)
const
{
mTreeLock
.
AssertCurrentThreadOwns
(
)
;
HitTestingTreeNode
*
resultNode
=
BreadthFirstSearch
<
ReverseIterator
>
(
mRootNode
.
get
(
)
[
aLayersId
]
(
HitTestingTreeNode
*
aNode
)
{
AsyncPanZoomController
*
apzc
=
aNode
-
>
GetApzc
(
)
;
return
apzc
&
&
apzc
-
>
GetLayersId
(
)
=
=
aLayersId
&
&
apzc
-
>
IsRootContent
(
)
;
}
)
;
return
resultNode
?
resultNode
-
>
GetApzc
(
)
:
nullptr
;
}
AsyncPanZoomController
*
APZCTreeManager
:
:
FindRootContentOrRootApzc
(
)
const
{
mTreeLock
.
AssertCurrentThreadOwns
(
)
;
HitTestingTreeNode
*
resultNode
=
BreadthFirstSearch
<
ReverseIterator
>
(
mRootNode
.
get
(
)
[
]
(
HitTestingTreeNode
*
aNode
)
{
AsyncPanZoomController
*
apzc
=
aNode
-
>
GetApzc
(
)
;
return
apzc
&
&
apzc
-
>
IsRootContent
(
)
;
}
)
;
if
(
resultNode
)
{
return
resultNode
-
>
GetApzc
(
)
;
}
resultNode
=
BreadthFirstSearch
<
ReverseIterator
>
(
mRootNode
.
get
(
)
[
]
(
HitTestingTreeNode
*
aNode
)
{
AsyncPanZoomController
*
apzc
=
aNode
-
>
GetApzc
(
)
;
return
(
apzc
!
=
nullptr
)
;
}
)
;
return
resultNode
?
resultNode
-
>
GetApzc
(
)
:
nullptr
;
}
ScreenToParentLayerMatrix4x4
APZCTreeManager
:
:
GetScreenToApzcTransform
(
const
AsyncPanZoomController
*
aApzc
)
const
{
Matrix4x4
result
;
MutexAutoLock
lock
(
mTreeLock
)
;
Matrix4x4
ancestorUntransform
=
aApzc
-
>
GetAncestorTransform
(
)
.
Inverse
(
)
;
result
=
ancestorUntransform
;
for
(
AsyncPanZoomController
*
parent
=
aApzc
-
>
GetParent
(
)
;
parent
;
parent
=
parent
-
>
GetParent
(
)
)
{
ancestorUntransform
=
parent
-
>
GetAncestorTransform
(
)
.
Inverse
(
)
;
Matrix4x4
asyncUntransform
=
parent
-
>
GetCurrentAsyncTransformWithOverscroll
(
AsyncPanZoomController
:
:
NORMAL
)
.
Inverse
(
)
.
ToUnknownMatrix
(
)
;
Matrix4x4
untransformSinceLastApzc
=
ancestorUntransform
*
asyncUntransform
;
result
=
untransformSinceLastApzc
*
result
;
}
return
ViewAs
<
ScreenToParentLayerMatrix4x4
>
(
result
)
;
}
ParentLayerToScreenMatrix4x4
APZCTreeManager
:
:
GetApzcToGeckoTransform
(
const
AsyncPanZoomController
*
aApzc
)
const
{
Matrix4x4
result
;
MutexAutoLock
lock
(
mTreeLock
)
;
Matrix4x4
asyncUntransform
=
aApzc
-
>
GetCurrentAsyncTransformWithOverscroll
(
AsyncPanZoomController
:
:
NORMAL
)
.
Inverse
(
)
.
ToUnknownMatrix
(
)
;
result
=
asyncUntransform
*
aApzc
-
>
GetTransformToLastDispatchedPaint
(
)
*
aApzc
-
>
GetAncestorTransform
(
)
;
for
(
AsyncPanZoomController
*
parent
=
aApzc
-
>
GetParent
(
)
;
parent
;
parent
=
parent
-
>
GetParent
(
)
)
{
result
=
result
*
parent
-
>
GetTransformToLastDispatchedPaint
(
)
*
parent
-
>
GetAncestorTransform
(
)
;
}
return
ViewAs
<
ParentLayerToScreenMatrix4x4
>
(
result
)
;
}
already_AddRefed
<
AsyncPanZoomController
>
APZCTreeManager
:
:
GetMultitouchTarget
(
AsyncPanZoomController
*
aApzc1
AsyncPanZoomController
*
aApzc2
)
const
{
MutexAutoLock
lock
(
mTreeLock
)
;
RefPtr
<
AsyncPanZoomController
>
apzc
;
if
(
aApzc1
&
&
aApzc2
&
&
aApzc1
-
>
GetLayersId
(
)
=
=
aApzc2
-
>
GetLayersId
(
)
)
{
apzc
=
FindRootContentApzcForLayersId
(
aApzc1
-
>
GetLayersId
(
)
)
;
}
else
{
apzc
=
CommonAncestor
(
aApzc1
aApzc2
)
;
if
(
apzc
)
{
apzc
=
FindRootContentApzcForLayersId
(
apzc
-
>
GetLayersId
(
)
)
;
}
}
return
apzc
.
forget
(
)
;
}
already_AddRefed
<
AsyncPanZoomController
>
APZCTreeManager
:
:
CommonAncestor
(
AsyncPanZoomController
*
aApzc1
AsyncPanZoomController
*
aApzc2
)
const
{
mTreeLock
.
AssertCurrentThreadOwns
(
)
;
RefPtr
<
AsyncPanZoomController
>
ancestor
;
int
depth1
=
0
depth2
=
0
;
for
(
AsyncPanZoomController
*
parent
=
aApzc1
;
parent
;
parent
=
parent
-
>
GetParent
(
)
)
{
depth1
+
+
;
}
for
(
AsyncPanZoomController
*
parent
=
aApzc2
;
parent
;
parent
=
parent
-
>
GetParent
(
)
)
{
depth2
+
+
;
}
int
minDepth
=
depth1
<
depth2
?
depth1
:
depth2
;
while
(
depth1
>
minDepth
)
{
depth1
-
-
;
aApzc1
=
aApzc1
-
>
GetParent
(
)
;
}
while
(
depth2
>
minDepth
)
{
depth2
-
-
;
aApzc2
=
aApzc2
-
>
GetParent
(
)
;
}
while
(
true
)
{
if
(
aApzc1
=
=
aApzc2
)
{
ancestor
=
aApzc1
;
break
;
}
if
(
depth1
<
=
0
)
{
break
;
}
aApzc1
=
aApzc1
-
>
GetParent
(
)
;
aApzc2
=
aApzc2
-
>
GetParent
(
)
;
}
return
ancestor
.
forget
(
)
;
}
LayerToParentLayerMatrix4x4
APZCTreeManager
:
:
ComputeTransformForNode
(
const
HitTestingTreeNode
*
aNode
)
const
{
if
(
AsyncPanZoomController
*
apzc
=
aNode
-
>
GetApzc
(
)
)
{
return
aNode
-
>
GetTransform
(
)
*
CompleteAsyncTransform
(
apzc
-
>
GetCurrentAsyncTransformWithOverscroll
(
AsyncPanZoomController
:
:
NORMAL
)
)
;
}
else
if
(
aNode
-
>
IsScrollThumbNode
(
)
)
{
ScrollableLayerGuid
guid
{
aNode
-
>
GetLayersId
(
)
0
aNode
-
>
GetScrollTargetId
(
)
}
;
if
(
RefPtr
<
HitTestingTreeNode
>
scrollTargetNode
=
GetTargetNode
(
guid
&
GuidComparatorIgnoringPresShell
)
)
{
AsyncPanZoomController
*
scrollTargetApzc
=
scrollTargetNode
-
>
GetApzc
(
)
;
MOZ_ASSERT
(
scrollTargetApzc
)
;
return
scrollTargetApzc
-
>
CallWithLastContentPaintMetrics
(
[
&
]
(
const
FrameMetrics
&
aMetrics
)
{
return
AsyncCompositionManager
:
:
ComputeTransformForScrollThumb
(
aNode
-
>
GetTransform
(
)
*
AsyncTransformMatrix
(
)
scrollTargetNode
-
>
GetTransform
(
)
.
ToUnknownMatrix
(
)
scrollTargetApzc
aMetrics
aNode
-
>
GetScrollThumbData
(
)
scrollTargetNode
-
>
IsAncestorOf
(
aNode
)
nullptr
)
;
}
)
;
}
}
return
aNode
-
>
GetTransform
(
)
*
AsyncTransformMatrix
(
)
;
}
#
if
defined
(
MOZ_WIDGET_ANDROID
)
void
APZCTreeManager
:
:
InitializeDynamicToolbarAnimator
(
const
int64_t
&
aRootLayerTreeId
)
{
MOZ_ASSERT
(
mToolbarAnimator
)
;
mToolbarAnimator
-
>
Initialize
(
aRootLayerTreeId
)
;
}
AndroidDynamicToolbarAnimator
*
APZCTreeManager
:
:
GetAndroidDynamicToolbarAnimator
(
)
{
return
mToolbarAnimator
;
}
#
endif
}
}
