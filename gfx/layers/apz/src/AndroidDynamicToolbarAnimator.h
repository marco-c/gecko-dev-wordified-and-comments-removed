#
ifndef
mozilla_layers_AndroidDynamicToolbarAnimator_h_
#
define
mozilla_layers_AndroidDynamicToolbarAnimator_h_
#
include
"
InputData
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
#
include
"
mozilla
/
layers
/
Effects
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsISupports
.
h
"
namespace
mozilla
{
namespace
layers
{
struct
FrameMetrics
;
class
APZCTreeManager
;
class
CompositorOGL
;
class
AndroidDynamicToolbarAnimator
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
AndroidDynamicToolbarAnimator
)
;
explicit
AndroidDynamicToolbarAnimator
(
APZCTreeManager
*
aApz
)
;
void
Initialize
(
LayersId
aRootLayerTreeId
)
;
void
ClearTreeManager
(
)
;
nsEventStatus
ReceiveInputEvent
(
InputData
&
aEvent
const
ScreenPoint
&
aScrollOffset
)
;
void
SetMaxToolbarHeight
(
ScreenIntCoord
aHeight
)
;
void
SetPinned
(
bool
aPinned
int32_t
aReason
)
;
ScreenIntCoord
GetMaxToolbarHeight
(
)
const
;
ScreenIntCoord
GetCurrentToolbarHeight
(
)
const
;
ScreenIntCoord
GetCurrentContentOffset
(
)
const
;
ScreenIntCoord
GetCurrentSurfaceHeight
(
)
const
;
ScreenIntCoord
GetCompositionHeight
(
)
const
;
void
SetScrollingRootContent
(
)
;
void
ToolbarAnimatorMessageFromUI
(
int32_t
aMessage
)
;
bool
UpdateAnimation
(
const
TimeStamp
&
aCurrentFrame
)
;
void
FirstPaint
(
)
;
void
UpdateRootFrameMetrics
(
const
FrameMetrics
&
aMetrics
)
;
void
MaybeUpdateCompositionSizeAndRootFrameMetrics
(
const
FrameMetrics
&
aMetrics
)
;
void
EnableLayersUpdateNotifications
(
bool
aEnable
)
;
void
NotifyLayersUpdated
(
)
;
void
AdoptToolbarPixels
(
mozilla
:
:
ipc
:
:
Shmem
&
&
aMem
const
ScreenIntSize
&
aSize
)
;
void
UpdateToolbarSnapshotTexture
(
CompositorOGL
*
gl
)
;
Effect
*
GetToolbarEffect
(
)
;
void
Shutdown
(
)
;
protected
:
enum
StaticToolbarState
{
eToolbarVisible
eToolbarUpdated
eToolbarUnlocked
eToolbarAnimating
}
;
enum
ControllerThreadState
{
eNothingPending
eShowPending
eUnlockPending
eAnimationStartPending
eAnimationStopPending
}
;
enum
AnimationStyle
{
eImmediate
eAnimate
}
;
~
AndroidDynamicToolbarAnimator
(
)
{
}
nsEventStatus
ProcessTouchDelta
(
StaticToolbarState
aCurrentToolbarState
ScreenIntCoord
aDelta
uint32_t
aTimeStamp
)
;
void
HandleTouchEnd
(
StaticToolbarState
aCurrentToolbarState
ScreenIntCoord
aCurrentTouch
)
;
void
PostMessage
(
int32_t
aMessage
)
;
void
UpdateCompositorToolbarHeight
(
ScreenIntCoord
aHeight
)
;
void
UpdateControllerToolbarHeight
(
ScreenIntCoord
aHeight
ScreenIntCoord
aMaxHeight
=
-
1
)
;
void
UpdateControllerSurfaceHeight
(
ScreenIntCoord
aHeight
)
;
void
UpdateControllerCompositionHeight
(
ScreenIntCoord
aHeight
)
;
void
UpdateFixedLayerMargins
(
)
;
void
NotifyControllerPendingAnimation
(
int32_t
aDirection
AnimationStyle
aStyle
)
;
void
StartCompositorAnimation
(
int32_t
aDirection
AnimationStyle
aStyle
ScreenIntCoord
aHeight
bool
aWaitForPageResize
)
;
void
NotifyControllerAnimationStarted
(
)
;
void
StopCompositorAnimation
(
)
;
void
NotifyControllerAnimationStopped
(
ScreenIntCoord
aHeight
)
;
void
RequestComposite
(
)
;
void
PostToolbarReady
(
)
;
void
UpdateFrameMetrics
(
ScreenPoint
aScrollOffset
CSSToScreenScale
aScale
CSSRect
aCssPageRect
)
;
bool
PageTooSmallEnsureToolbarVisible
(
)
;
void
ShowToolbarIfNotVisible
(
StaticToolbarState
aCurrentToolbarState
)
;
void
TranslateTouchEvent
(
MultiTouchInput
&
aTouchEvent
)
;
ScreenIntCoord
GetFixedLayerMarginsBottom
(
)
;
void
NotifyControllerSnapshotFailed
(
)
;
void
CheckForResetOnNextMove
(
ScreenIntCoord
aCurrentTouch
)
;
bool
ScrollOffsetNearBottom
(
)
const
;
bool
ToolbarInTransition
(
)
;
void
QueueMessage
(
int32_t
aMessage
)
;
LayersId
mRootLayerTreeId
;
MOZ_NON_OWNING_REF
APZCTreeManager
*
mApz
;
Atomic
<
StaticToolbarState
>
mToolbarState
;
Atomic
<
uint32_t
>
mPinnedFlags
;
bool
mControllerScrollingRootContent
;
bool
mControllerDragThresholdReached
;
bool
mControllerCancelTouchTracking
;
bool
mControllerDragChangedDirection
;
bool
mControllerResetOnNextMove
;
ScreenIntCoord
mControllerStartTouch
;
ScreenIntCoord
mControllerPreviousTouch
;
ScreenIntCoord
mControllerTotalDistance
;
ScreenIntCoord
mControllerMaxToolbarHeight
;
ScreenIntCoord
mControllerToolbarHeight
;
ScreenIntCoord
mControllerSurfaceHeight
;
ScreenIntCoord
mControllerCompositionHeight
;
ScreenCoord
mControllerRootScrollY
;
int32_t
mControllerLastDragDirection
;
int32_t
mControllerTouchCount
;
uint32_t
mControllerLastEventTimeStamp
;
ControllerThreadState
mControllerState
;
struct
FrameMetricsState
{
ScreenPoint
mScrollOffset
;
CSSToScreenScale
mScale
;
CSSRect
mCssPageRect
;
ScreenRect
mPageRect
;
bool
Update
(
const
ScreenPoint
&
aScrollOffset
const
CSSToScreenScale
&
aScale
const
CSSRect
&
aCssPageRect
)
;
}
;
FrameMetricsState
mControllerFrameMetrics
;
class
QueuedMessage
:
public
LinkedListElement
<
QueuedMessage
>
{
public
:
explicit
QueuedMessage
(
int32_t
aMessage
)
:
mMessage
(
aMessage
)
{
}
int32_t
mMessage
;
private
:
QueuedMessage
(
)
=
delete
;
QueuedMessage
(
const
QueuedMessage
&
)
=
delete
;
QueuedMessage
&
operator
=
(
const
QueuedMessage
&
)
=
delete
;
}
;
bool
mCompositorShutdown
;
bool
mCompositorAnimationDeferred
;
bool
mCompositorLayersUpdateEnabled
;
bool
mCompositorAnimationStarted
;
bool
mCompositorReceivedFirstPaint
;
bool
mCompositorWaitForPageResize
;
bool
mCompositorToolbarShowRequested
;
bool
mCompositorSendResponseForSnapshotUpdate
;
AnimationStyle
mCompositorAnimationStyle
;
ScreenIntCoord
mCompositorMaxToolbarHeight
;
ScreenIntCoord
mCompositorToolbarHeight
;
ScreenIntCoord
mCompositorSurfaceHeight
;
ScreenIntSize
mCompositorCompositionSize
;
int32_t
mCompositorAnimationDirection
;
ScreenIntCoord
mCompositorAnimationStartHeight
;
ScreenIntSize
mCompositorToolbarPixelsSize
;
Maybe
<
mozilla
:
:
ipc
:
:
Shmem
>
mCompositorToolbarPixels
;
RefPtr
<
DataTextureSource
>
mCompositorToolbarTexture
;
RefPtr
<
EffectRGB
>
mCompositorToolbarEffect
;
TimeStamp
mCompositorAnimationStartTimeStamp
;
AutoCleanLinkedList
<
QueuedMessage
>
mCompositorQueuedMessages
;
}
;
}
}
#
endif
