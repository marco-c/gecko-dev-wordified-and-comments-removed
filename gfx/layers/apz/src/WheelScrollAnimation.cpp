#
include
"
WheelScrollAnimation
.
h
"
#
include
"
AsyncPanZoomController
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
nsPoint
.
h
"
namespace
mozilla
{
namespace
layers
{
WheelScrollAnimation
:
:
WheelScrollAnimation
(
AsyncPanZoomController
&
aApzc
const
nsPoint
&
aInitialPosition
ScrollWheelInput
:
:
ScrollDeltaType
aDeltaType
)
:
AsyncScrollBase
(
aInitialPosition
)
mApzc
(
aApzc
)
mFinalDestination
(
aInitialPosition
)
mDeltaType
(
aDeltaType
)
{
}
void
WheelScrollAnimation
:
:
Update
(
TimeStamp
aTime
nsPoint
aDelta
const
nsSize
&
aCurrentVelocity
)
{
InitPreferences
(
aTime
)
;
mFinalDestination
+
=
aDelta
;
CSSPoint
clamped
=
CSSPoint
:
:
FromAppUnits
(
mFinalDestination
)
;
clamped
.
x
=
mApzc
.
mX
.
ClampOriginToScrollableRect
(
clamped
.
x
)
;
clamped
.
y
=
mApzc
.
mY
.
ClampOriginToScrollableRect
(
clamped
.
y
)
;
mFinalDestination
=
CSSPoint
:
:
ToAppUnits
(
clamped
)
;
AsyncScrollBase
:
:
Update
(
aTime
mFinalDestination
aCurrentVelocity
)
;
}
bool
WheelScrollAnimation
:
:
DoSample
(
FrameMetrics
&
aFrameMetrics
const
TimeDuration
&
aDelta
)
{
TimeStamp
now
=
mApzc
.
GetFrameTime
(
)
;
CSSToParentLayerScale2D
zoom
=
aFrameMetrics
.
GetZoom
(
)
;
bool
finished
=
IsFinished
(
now
)
;
nsPoint
sampledDest
=
finished
?
mDestination
:
PositionAt
(
now
)
;
ParentLayerPoint
displacement
=
(
CSSPoint
:
:
FromAppUnits
(
sampledDest
)
-
aFrameMetrics
.
GetScrollOffset
(
)
)
*
zoom
;
if
(
!
IsZero
(
displacement
)
)
{
float
xVelocity
=
displacement
.
x
/
aDelta
.
ToMilliseconds
(
)
;
float
yVelocity
=
displacement
.
y
/
aDelta
.
ToMilliseconds
(
)
;
mApzc
.
mX
.
SetVelocity
(
xVelocity
)
;
mApzc
.
mY
.
SetVelocity
(
yVelocity
)
;
}
ParentLayerPoint
adjustedOffset
overscroll
;
mApzc
.
mX
.
AdjustDisplacement
(
displacement
.
x
adjustedOffset
.
x
overscroll
.
x
)
;
mApzc
.
mY
.
AdjustDisplacement
(
displacement
.
y
adjustedOffset
.
y
overscroll
.
y
!
mApzc
.
mScrollMetadata
.
AllowVerticalScrollWithWheel
(
)
)
;
if
(
!
IsZero
(
displacement
)
&
&
IsZero
(
adjustedOffset
)
)
{
return
false
;
}
aFrameMetrics
.
ScrollBy
(
adjustedOffset
/
zoom
)
;
return
!
finished
;
}
void
WheelScrollAnimation
:
:
InitPreferences
(
TimeStamp
aTime
)
{
if
(
!
mIsFirstIteration
)
{
return
;
}
switch
(
mDeltaType
)
{
case
ScrollWheelInput
:
:
SCROLLDELTA_PAGE
:
mOriginMaxMS
=
clamped
(
gfxPrefs
:
:
PageSmoothScrollMaxDurationMs
(
)
0
10000
)
;
mOriginMinMS
=
clamped
(
gfxPrefs
:
:
PageSmoothScrollMinDurationMs
(
)
0
mOriginMaxMS
)
;
break
;
case
ScrollWheelInput
:
:
SCROLLDELTA_PIXEL
:
mOriginMaxMS
=
clamped
(
gfxPrefs
:
:
PixelSmoothScrollMaxDurationMs
(
)
0
10000
)
;
mOriginMinMS
=
clamped
(
gfxPrefs
:
:
PixelSmoothScrollMinDurationMs
(
)
0
mOriginMaxMS
)
;
break
;
case
ScrollWheelInput
:
:
SCROLLDELTA_LINE
:
default
:
mOriginMaxMS
=
clamped
(
gfxPrefs
:
:
WheelSmoothScrollMaxDurationMs
(
)
0
10000
)
;
mOriginMinMS
=
clamped
(
gfxPrefs
:
:
WheelSmoothScrollMinDurationMs
(
)
0
mOriginMaxMS
)
;
break
;
}
mIntervalRatio
=
(
(
double
)
gfxPrefs
:
:
SmoothScrollDurationToIntervalRatio
(
)
)
/
100
.
0
;
mIntervalRatio
=
std
:
:
max
(
1
.
0
mIntervalRatio
)
;
InitializeHistory
(
aTime
)
;
}
}
}
