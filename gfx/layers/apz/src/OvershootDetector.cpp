#
include
"
OvershootDetector
.
h
"
#
include
"
InputData
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
namespace
mozilla
{
namespace
layers
{
MOZ_RUNINIT
const
TimeDuration
kOvershootInterval
=
TimeDuration
:
:
FromMilliseconds
(
500
)
;
static
Maybe
<
Side
>
GetScrollDirection
(
const
ScrollWheelInput
&
aInput
)
{
if
(
aInput
.
mDeltaY
>
0
)
{
return
Some
(
Side
:
:
eSideBottom
)
;
}
if
(
aInput
.
mDeltaY
<
0
)
{
return
Some
(
Side
:
:
eSideTop
)
;
}
if
(
aInput
.
mDeltaX
>
0
)
{
return
Some
(
Side
:
:
eSideRight
)
;
}
if
(
aInput
.
mDeltaX
<
0
)
{
return
Some
(
Side
:
:
eSideLeft
)
;
}
return
Nothing
(
)
;
}
void
OvershootDetector
:
:
Update
(
const
ScrollWheelInput
&
aInput
)
{
TimeStamp
inputTime
=
aInput
.
mTimeStamp
;
Maybe
<
Side
>
inputDirection
=
GetScrollDirection
(
aInput
)
;
if
(
mLastTimeStamp
&
&
(
inputTime
-
mLastTimeStamp
)
<
kOvershootInterval
&
&
mLastDirection
&
&
inputDirection
)
{
bool
reversed
=
false
;
switch
(
*
mLastDirection
)
{
case
Side
:
:
eSideBottom
:
reversed
=
(
*
inputDirection
=
=
Side
:
:
eSideTop
)
;
break
;
case
Side
:
:
eSideTop
:
reversed
=
(
*
inputDirection
=
=
Side
:
:
eSideBottom
)
;
break
;
case
Side
:
:
eSideRight
:
reversed
=
(
*
inputDirection
=
=
Side
:
:
eSideLeft
)
;
break
;
case
Side
:
:
eSideLeft
:
reversed
=
(
*
inputDirection
=
=
Side
:
:
eSideRight
)
;
break
;
}
if
(
reversed
)
{
Telemetry
:
:
ScalarAdd
(
Telemetry
:
:
ScalarID
:
:
APZ_SCROLLWHEEL_OVERSHOOT
1
)
;
}
}
mLastTimeStamp
=
inputTime
;
mLastDirection
=
inputDirection
;
}
}
}
