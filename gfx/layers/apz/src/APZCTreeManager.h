#
ifndef
mozilla_layers_APZCTreeManager_h
#
define
mozilla_layers_APZCTreeManager_h
#
include
<
unordered_map
>
#
include
"
FocusState
.
h
"
#
include
"
gfxPoint
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
gfx
/
CompositorHitTestInfo
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
layers
/
APZInputBridge
.
h
"
#
include
"
mozilla
/
layers
/
APZTestData
.
h
"
#
include
"
mozilla
/
layers
/
IAPZCTreeManager
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
KeyboardMap
.
h
"
#
include
"
mozilla
/
RecursiveMutex
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
TouchCounter
.
h
"
#
if
defined
(
MOZ_WIDGET_ANDROID
)
#
include
"
mozilla
/
layers
/
AndroidDynamicToolbarAnimator
.
h
"
#
endif
namespace
mozilla
{
class
MultiTouchInput
;
namespace
wr
{
class
TransactionBuilder
;
class
WebRenderAPI
;
struct
WrTransformProperty
;
}
namespace
layers
{
class
Layer
;
class
AsyncPanZoomController
;
class
APZCTreeManagerParent
;
class
APZSampler
;
class
APZUpdater
;
class
CompositorBridgeParent
;
class
OverscrollHandoffChain
;
struct
OverscrollHandoffState
;
class
FocusTarget
;
struct
FlingHandoffState
;
struct
ScrollableLayerGuidHash
;
class
LayerMetricsWrapper
;
class
InputQueue
;
class
GeckoContentController
;
class
HitTestingTreeNode
;
class
WebRenderScrollData
;
struct
AncestorTransform
;
struct
ScrollThumbData
;
class
APZCTreeManager
:
public
IAPZCTreeManager
public
APZInputBridge
{
typedef
mozilla
:
:
layers
:
:
AllowedTouchBehavior
AllowedTouchBehavior
;
typedef
mozilla
:
:
layers
:
:
AsyncDragMetrics
AsyncDragMetrics
;
struct
TreeBuildingState
;
public
:
explicit
APZCTreeManager
(
LayersId
aRootLayersId
)
;
void
SetSampler
(
APZSampler
*
aSampler
)
;
void
SetUpdater
(
APZUpdater
*
aUpdater
)
;
void
NotifyLayerTreeAdopted
(
LayersId
aLayersId
const
RefPtr
<
APZCTreeManager
>
&
aOldTreeManager
)
;
void
NotifyLayerTreeRemoved
(
LayersId
aLayersId
)
;
void
UpdateFocusState
(
LayersId
aRootLayerTreeId
LayersId
aOriginatingLayersId
const
FocusTarget
&
aFocusTarget
)
;
void
UpdateHitTestingTree
(
LayersId
aRootLayerTreeId
Layer
*
aRoot
bool
aIsFirstPaint
LayersId
aOriginatingLayersId
uint32_t
aPaintSequenceNumber
)
;
void
UpdateHitTestingTree
(
LayersId
aRootLayerTreeId
const
WebRenderScrollData
&
aScrollData
bool
aIsFirstPaint
LayersId
aOriginatingLayersId
uint32_t
aPaintSequenceNumber
)
;
bool
PushStateToWR
(
wr
:
:
TransactionBuilder
&
aTxn
const
TimeStamp
&
aSampleTime
nsTArray
<
wr
:
:
WrTransformProperty
>
&
aTransformArray
)
;
void
FlushApzRepaints
(
LayersId
aLayersId
)
;
nsEventStatus
ReceiveInputEvent
(
InputData
&
aEvent
ScrollableLayerGuid
*
aOutTargetGuid
uint64_t
*
aOutInputBlockId
)
override
;
void
SetKeyboardMap
(
const
KeyboardMap
&
aKeyboardMap
)
override
;
void
ZoomToRect
(
const
ScrollableLayerGuid
&
aGuid
const
CSSRect
&
aRect
const
uint32_t
aFlags
=
DEFAULT_BEHAVIOR
)
override
;
void
ContentReceivedInputBlock
(
uint64_t
aInputBlockId
bool
aPreventDefault
)
override
;
void
SetTargetAPZC
(
uint64_t
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
)
override
;
void
SetTargetAPZC
(
uint64_t
aInputBlockId
const
ScrollableLayerGuid
&
aTarget
)
;
void
UpdateZoomConstraints
(
const
ScrollableLayerGuid
&
aGuid
const
Maybe
<
ZoomConstraints
>
&
aConstraints
)
override
;
void
CancelAnimation
(
const
ScrollableLayerGuid
&
aGuid
)
;
void
AdjustScrollForSurfaceShift
(
const
ScreenPoint
&
aShift
)
;
void
ClearTree
(
)
;
bool
HitTestAPZC
(
const
ScreenIntPoint
&
aPoint
)
;
void
SetDPI
(
float
aDpiValue
)
override
;
float
GetDPI
(
)
const
;
RefPtr
<
HitTestingTreeNode
>
FindScrollThumbNode
(
const
AsyncDragMetrics
&
aDragMetrics
)
;
void
SetAllowedTouchBehavior
(
uint64_t
aInputBlockId
const
nsTArray
<
TouchBehaviorFlags
>
&
aValues
)
override
;
void
DispatchScroll
(
AsyncPanZoomController
*
aApzc
ParentLayerPoint
&
aStartPoint
ParentLayerPoint
&
aEndPoint
OverscrollHandoffState
&
aOverscrollHandoffState
)
;
ParentLayerPoint
DispatchFling
(
AsyncPanZoomController
*
aApzc
const
FlingHandoffState
&
aHandoffState
)
;
void
StartScrollbarDrag
(
const
ScrollableLayerGuid
&
aGuid
const
AsyncDragMetrics
&
aDragMetrics
)
override
;
bool
StartAutoscroll
(
const
ScrollableLayerGuid
&
aGuid
const
ScreenPoint
&
aAnchorLocation
)
override
;
void
StopAutoscroll
(
const
ScrollableLayerGuid
&
aGuid
)
override
;
RefPtr
<
const
OverscrollHandoffChain
>
BuildOverscrollHandoffChain
(
const
RefPtr
<
AsyncPanZoomController
>
&
aInitialTarget
)
;
void
SetLongTapEnabled
(
bool
aTapGestureEnabled
)
override
;
APZInputBridge
*
InputBridge
(
)
override
{
return
this
;
}
void
ProcessUnhandledEvent
(
LayoutDeviceIntPoint
*
aRefPoint
ScrollableLayerGuid
*
aOutTargetGuid
uint64_t
*
aOutFocusSequenceNumber
)
override
;
void
UpdateWheelTransaction
(
LayoutDeviceIntPoint
aRefPoint
EventMessage
aEventMessage
)
override
;
bool
GetAPZTestData
(
LayersId
aLayersId
APZTestData
*
aOutData
)
;
static
LayerToParentLayerMatrix4x4
ComputeTransformForScrollThumb
(
const
LayerToParentLayerMatrix4x4
&
aCurrentTransform
const
gfx
:
:
Matrix4x4
&
aScrollableContentTransform
AsyncPanZoomController
*
aApzc
const
FrameMetrics
&
aMetrics
const
ScrollThumbData
&
aThumbData
bool
aScrollbarIsDescendant
AsyncTransformComponentMatrix
*
aOutClipTransform
)
;
void
AssertOnSamplerThread
(
)
;
void
AssertOnUpdaterThread
(
)
;
protected
:
virtual
~
APZCTreeManager
(
)
;
APZSampler
*
GetSampler
(
)
const
;
APZUpdater
*
GetUpdater
(
)
const
;
virtual
AsyncPanZoomController
*
NewAPZCInstance
(
LayersId
aLayersId
GeckoContentController
*
aController
)
;
public
:
virtual
TimeStamp
GetFrameTime
(
)
;
public
:
RefPtr
<
HitTestingTreeNode
>
GetRootNode
(
)
const
;
already_AddRefed
<
AsyncPanZoomController
>
GetTargetAPZC
(
const
ScreenPoint
&
aPoint
gfx
:
:
CompositorHitTestInfo
*
aOutHitResult
RefPtr
<
HitTestingTreeNode
>
*
aOutScrollbarNode
=
nullptr
)
;
already_AddRefed
<
AsyncPanZoomController
>
GetTargetAPZC
(
const
LayersId
&
aLayersId
const
FrameMetrics
:
:
ViewID
&
aScrollId
)
;
ScreenToParentLayerMatrix4x4
GetScreenToApzcTransform
(
const
AsyncPanZoomController
*
aApzc
)
const
;
ParentLayerToScreenMatrix4x4
GetApzcToGeckoTransform
(
const
AsyncPanZoomController
*
aApzc
)
const
;
ScreenPoint
GetCurrentMousePosition
(
)
const
;
void
ProcessTouchVelocity
(
uint32_t
aTimestampMs
float
aSpeedY
)
;
private
:
typedef
bool
(
*
GuidComparator
)
(
const
ScrollableLayerGuid
&
const
ScrollableLayerGuid
&
)
;
template
<
class
ScrollNode
>
void
UpdateHitTestingTreeImpl
(
LayersId
aRootLayerTreeId
const
ScrollNode
&
aRoot
bool
aIsFirstPaint
LayersId
aOriginatingLayersId
uint32_t
aPaintSequenceNumber
)
;
void
AttachNodeToTree
(
HitTestingTreeNode
*
aNode
HitTestingTreeNode
*
aParent
HitTestingTreeNode
*
aNextSibling
)
;
already_AddRefed
<
AsyncPanZoomController
>
GetTargetAPZC
(
const
ScrollableLayerGuid
&
aGuid
)
;
already_AddRefed
<
HitTestingTreeNode
>
GetTargetNode
(
const
ScrollableLayerGuid
&
aGuid
GuidComparator
aComparator
)
const
;
HitTestingTreeNode
*
FindTargetNode
(
HitTestingTreeNode
*
aNode
const
ScrollableLayerGuid
&
aGuid
GuidComparator
aComparator
)
;
AsyncPanZoomController
*
GetTargetApzcForNode
(
HitTestingTreeNode
*
aNode
)
;
AsyncPanZoomController
*
GetAPZCAtPoint
(
HitTestingTreeNode
*
aNode
const
ScreenPoint
&
aHitTestPoint
gfx
:
:
CompositorHitTestInfo
*
aOutHitResult
HitTestingTreeNode
*
*
aOutScrollbarNode
)
;
already_AddRefed
<
AsyncPanZoomController
>
GetAPZCAtPointWR
(
const
ScreenPoint
&
aHitTestPoint
gfx
:
:
CompositorHitTestInfo
*
aOutHitResult
HitTestingTreeNode
*
*
aOutScrollbarNode
)
;
AsyncPanZoomController
*
FindRootApzcForLayersId
(
LayersId
aLayersId
)
const
;
AsyncPanZoomController
*
FindRootContentApzcForLayersId
(
LayersId
aLayersId
)
const
;
AsyncPanZoomController
*
FindRootContentOrRootApzc
(
)
const
;
already_AddRefed
<
AsyncPanZoomController
>
GetMultitouchTarget
(
AsyncPanZoomController
*
aApzc1
AsyncPanZoomController
*
aApzc2
)
const
;
already_AddRefed
<
AsyncPanZoomController
>
CommonAncestor
(
AsyncPanZoomController
*
aApzc1
AsyncPanZoomController
*
aApzc2
)
const
;
already_AddRefed
<
AsyncPanZoomController
>
GetTouchInputBlockAPZC
(
const
MultiTouchInput
&
aEvent
nsTArray
<
TouchBehaviorFlags
>
*
aOutTouchBehaviors
gfx
:
:
CompositorHitTestInfo
*
aOutHitResult
RefPtr
<
HitTestingTreeNode
>
*
aOutHitScrollbarNode
)
;
nsEventStatus
ProcessTouchInput
(
MultiTouchInput
&
aInput
ScrollableLayerGuid
*
aOutTargetGuid
uint64_t
*
aOutInputBlockId
)
;
void
SetupScrollbarDrag
(
MouseInput
&
aMouseInput
const
HitTestingTreeNode
*
aScrollThumbNode
AsyncPanZoomController
*
aApzc
)
;
nsEventStatus
ProcessTouchInputForScrollbarDrag
(
MultiTouchInput
&
aInput
const
HitTestingTreeNode
*
aScrollThumbNode
ScrollableLayerGuid
*
aOutTargetGuid
uint64_t
*
aOutInputBlockId
)
;
void
FlushRepaintsToClearScreenToGeckoTransform
(
)
;
already_AddRefed
<
HitTestingTreeNode
>
RecycleOrCreateNode
(
TreeBuildingState
&
aState
AsyncPanZoomController
*
aApzc
LayersId
aLayersId
)
;
template
<
class
ScrollNode
>
HitTestingTreeNode
*
PrepareNodeForLayer
(
const
ScrollNode
&
aLayer
const
FrameMetrics
&
aMetrics
LayersId
aLayersId
const
AncestorTransform
&
aAncestorTransform
HitTestingTreeNode
*
aParent
HitTestingTreeNode
*
aNextSibling
TreeBuildingState
&
aState
)
;
template
<
class
ScrollNode
>
void
PrintAPZCInfo
(
const
ScrollNode
&
aLayer
const
AsyncPanZoomController
*
apzc
)
;
void
NotifyScrollbarDragRejected
(
const
ScrollableLayerGuid
&
aGuid
)
const
;
void
NotifyAutoscrollRejected
(
const
ScrollableLayerGuid
&
aGuid
)
const
;
LayerToParentLayerMatrix4x4
ComputeTransformForNode
(
const
HitTestingTreeNode
*
aNode
)
const
;
already_AddRefed
<
wr
:
:
WebRenderAPI
>
GetWebRenderAPI
(
)
const
;
already_AddRefed
<
GeckoContentController
>
GetContentController
(
LayersId
aLayersId
)
const
;
protected
:
RefPtr
<
InputQueue
>
mInputQueue
;
private
:
LayersId
mRootLayersId
;
APZSampler
*
MOZ_NON_OWNING_REF
mSampler
;
APZUpdater
*
MOZ_NON_OWNING_REF
mUpdater
;
mutable
mozilla
:
:
RecursiveMutex
mTreeLock
;
RefPtr
<
HitTestingTreeNode
>
mRootNode
;
std
:
:
unordered_map
<
ScrollableLayerGuid
ZoomConstraints
ScrollableLayerGuidHash
>
mZoomConstraints
;
KeyboardMap
mKeyboardMap
;
FocusState
mFocusState
;
RefPtr
<
AsyncPanZoomController
>
mApzcForInputBlock
;
gfx
:
:
CompositorHitTestInfo
mHitResultForInputBlock
;
int32_t
mRetainedTouchIdentifier
;
bool
mInScrollbarTouchDrag
;
TouchCounter
mTouchCounter
;
ScreenPoint
mCurrentMousePosition
;
gfx
:
:
TreeLog
mApzcTreeLog
;
class
CheckerboardFlushObserver
;
friend
class
CheckerboardFlushObserver
;
RefPtr
<
CheckerboardFlushObserver
>
mFlushObserver
;
std
:
:
unordered_map
<
LayersId
UniquePtr
<
APZTestData
>
LayersId
:
:
HashFn
LayersId
:
:
EqualFn
>
mTestData
;
mutable
mozilla
:
:
Mutex
mTestDataLock
;
float
mDPI
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
public
:
AndroidDynamicToolbarAnimator
*
GetAndroidDynamicToolbarAnimator
(
)
;
private
:
RefPtr
<
AndroidDynamicToolbarAnimator
>
mToolbarAnimator
;
#
endif
}
;
}
}
#
endif
