#
ifndef
mozilla_layers_APZCTreeManager_h
#
define
mozilla_layers_APZCTreeManager_h
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
"
FrameMetrics
.
h
"
#
include
"
gfxPoint
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
layers
/
APZUtils
.
h
"
#
include
"
mozilla
/
layers
/
TouchCounter
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
#
include
"
Units
.
h
"
namespace
mozilla
{
class
InputData
;
class
MultiTouchInput
;
namespace
layers
{
enum
AllowedTouchBehavior
{
NONE
=
0
VERTICAL_PAN
=
1
<
<
0
HORIZONTAL_PAN
=
1
<
<
1
PINCH_ZOOM
=
1
<
<
2
DOUBLE_TAP_ZOOM
=
1
<
<
3
UNKNOWN
=
1
<
<
4
}
;
enum
ZoomToRectBehavior
:
uint32_t
{
DEFAULT_BEHAVIOR
=
0
DISABLE_ZOOM_OUT
=
1
<
<
0
PAN_INTO_VIEW_ONLY
=
1
<
<
1
}
;
class
Layer
;
class
AsyncDragMetrics
;
class
AsyncPanZoomController
;
class
CompositorParent
;
class
OverscrollHandoffChain
;
struct
OverscrollHandoffState
;
struct
FlingHandoffState
;
class
LayerMetricsWrapper
;
class
InputQueue
;
class
GeckoContentController
;
class
HitTestingTreeNode
;
class
APZCTreeManager
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
APZCTreeManager
)
typedef
mozilla
:
:
layers
:
:
AllowedTouchBehavior
AllowedTouchBehavior
;
typedef
mozilla
:
:
layers
:
:
AsyncDragMetrics
AsyncDragMetrics
;
struct
TreeBuildingState
;
public
:
APZCTreeManager
(
)
;
void
UpdateHitTestingTree
(
CompositorParent
*
aCompositor
Layer
*
aRoot
bool
aIsFirstPaint
uint64_t
aOriginatingLayersId
uint32_t
aPaintSequenceNumber
)
;
void
FlushApzRepaints
(
uint64_t
aLayersId
)
;
nsEventStatus
ReceiveInputEvent
(
InputData
&
aEvent
ScrollableLayerGuid
*
aOutTargetGuid
uint64_t
*
aOutInputBlockId
)
;
nsEventStatus
ReceiveInputEvent
(
WidgetInputEvent
&
aEvent
ScrollableLayerGuid
*
aOutTargetGuid
uint64_t
*
aOutInputBlockId
)
;
void
ZoomToRect
(
const
ScrollableLayerGuid
&
aGuid
const
CSSRect
&
aRect
const
uint32_t
aFlags
=
DEFAULT_BEHAVIOR
)
;
void
ContentReceivedInputBlock
(
uint64_t
aInputBlockId
bool
aPreventDefault
)
;
void
SetTargetAPZC
(
uint64_t
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
)
;
void
SetTargetAPZC
(
uint64_t
aInputBlockId
const
ScrollableLayerGuid
&
aTarget
)
;
void
UpdateZoomConstraints
(
const
ScrollableLayerGuid
&
aGuid
const
Maybe
<
ZoomConstraints
>
&
aConstraints
)
;
void
CancelAnimation
(
const
ScrollableLayerGuid
&
aGuid
)
;
void
ClearTree
(
)
;
bool
HitTestAPZC
(
const
ScreenIntPoint
&
aPoint
)
;
static
const
ScreenMargin
CalculatePendingDisplayPort
(
const
FrameMetrics
&
aFrameMetrics
const
ParentLayerPoint
&
aVelocity
)
;
static
void
SetDPI
(
float
aDpiValue
)
{
sDPI
=
aDpiValue
;
}
static
float
GetDPI
(
)
{
return
sDPI
;
}
RefPtr
<
HitTestingTreeNode
>
FindScrollNode
(
const
AsyncDragMetrics
&
aDragMetrics
)
;
void
SetAllowedTouchBehavior
(
uint64_t
aInputBlockId
const
nsTArray
<
TouchBehaviorFlags
>
&
aValues
)
;
void
DispatchScroll
(
AsyncPanZoomController
*
aApzc
ParentLayerPoint
&
aStartPoint
ParentLayerPoint
&
aEndPoint
OverscrollHandoffState
&
aOverscrollHandoffState
)
;
void
DispatchFling
(
AsyncPanZoomController
*
aApzc
FlingHandoffState
&
aHandoffState
)
;
void
StartScrollbarDrag
(
const
ScrollableLayerGuid
&
aGuid
const
AsyncDragMetrics
&
aDragMetrics
)
;
RefPtr
<
const
OverscrollHandoffChain
>
BuildOverscrollHandoffChain
(
const
RefPtr
<
AsyncPanZoomController
>
&
aInitialTarget
)
;
static
void
SetLongTapEnabled
(
bool
aTapGestureEnabled
)
;
protected
:
virtual
~
APZCTreeManager
(
)
;
virtual
AsyncPanZoomController
*
NewAPZCInstance
(
uint64_t
aLayersId
GeckoContentController
*
aController
)
;
public
:
virtual
TimeStamp
GetFrameTime
(
)
;
public
:
RefPtr
<
HitTestingTreeNode
>
GetRootNode
(
)
const
;
already_AddRefed
<
AsyncPanZoomController
>
GetTargetAPZC
(
const
ScreenPoint
&
aPoint
HitTestResult
*
aOutHitResult
)
;
ScreenToParentLayerMatrix4x4
GetScreenToApzcTransform
(
const
AsyncPanZoomController
*
aApzc
)
const
;
ParentLayerToScreenMatrix4x4
GetApzcToGeckoTransform
(
const
AsyncPanZoomController
*
aApzc
)
const
;
private
:
typedef
bool
(
*
GuidComparator
)
(
const
ScrollableLayerGuid
&
const
ScrollableLayerGuid
&
)
;
void
AttachNodeToTree
(
HitTestingTreeNode
*
aNode
HitTestingTreeNode
*
aParent
HitTestingTreeNode
*
aNextSibling
)
;
already_AddRefed
<
AsyncPanZoomController
>
GetTargetAPZC
(
const
ScrollableLayerGuid
&
aGuid
)
;
already_AddRefed
<
HitTestingTreeNode
>
GetTargetNode
(
const
ScrollableLayerGuid
&
aGuid
GuidComparator
aComparator
)
;
HitTestingTreeNode
*
FindTargetNode
(
HitTestingTreeNode
*
aNode
const
ScrollableLayerGuid
&
aGuid
GuidComparator
aComparator
)
;
AsyncPanZoomController
*
GetAPZCAtPoint
(
HitTestingTreeNode
*
aNode
const
ParentLayerPoint
&
aHitTestPoint
HitTestResult
*
aOutHitResult
)
;
AsyncPanZoomController
*
FindRootApzcForLayersId
(
uint64_t
aLayersId
)
const
;
AsyncPanZoomController
*
FindRootContentApzcForLayersId
(
uint64_t
aLayersId
)
const
;
already_AddRefed
<
AsyncPanZoomController
>
GetMultitouchTarget
(
AsyncPanZoomController
*
aApzc1
AsyncPanZoomController
*
aApzc2
)
const
;
already_AddRefed
<
AsyncPanZoomController
>
CommonAncestor
(
AsyncPanZoomController
*
aApzc1
AsyncPanZoomController
*
aApzc2
)
const
;
already_AddRefed
<
AsyncPanZoomController
>
GetTouchInputBlockAPZC
(
const
MultiTouchInput
&
aEvent
HitTestResult
*
aOutHitResult
)
;
nsEventStatus
ProcessTouchInput
(
MultiTouchInput
&
aInput
ScrollableLayerGuid
*
aOutTargetGuid
uint64_t
*
aOutInputBlockId
)
;
nsEventStatus
ProcessWheelEvent
(
WidgetWheelEvent
&
aEvent
ScrollableLayerGuid
*
aOutTargetGuid
uint64_t
*
aOutInputBlockId
)
;
nsEventStatus
ProcessEvent
(
WidgetInputEvent
&
inputEvent
ScrollableLayerGuid
*
aOutTargetGuid
uint64_t
*
aOutInputBlockId
)
;
nsEventStatus
ProcessMouseEvent
(
WidgetMouseEventBase
&
aInput
ScrollableLayerGuid
*
aOutTargetGuid
uint64_t
*
aOutInputBlockId
)
;
void
UpdateWheelTransaction
(
WidgetInputEvent
&
aEvent
)
;
void
FlushRepaintsToClearScreenToGeckoTransform
(
)
;
already_AddRefed
<
HitTestingTreeNode
>
RecycleOrCreateNode
(
TreeBuildingState
&
aState
AsyncPanZoomController
*
aApzc
uint64_t
aLayersId
)
;
HitTestingTreeNode
*
PrepareNodeForLayer
(
const
LayerMetricsWrapper
&
aLayer
const
FrameMetrics
&
aMetrics
uint64_t
aLayersId
const
gfx
:
:
Matrix4x4
&
aAncestorTransform
HitTestingTreeNode
*
aParent
HitTestingTreeNode
*
aNextSibling
TreeBuildingState
&
aState
)
;
HitTestingTreeNode
*
UpdateHitTestingTree
(
TreeBuildingState
&
aState
const
LayerMetricsWrapper
&
aLayer
uint64_t
aLayersId
const
gfx
:
:
Matrix4x4
&
aAncestorTransform
HitTestingTreeNode
*
aParent
HitTestingTreeNode
*
aNextSibling
)
;
void
PrintAPZCInfo
(
const
LayerMetricsWrapper
&
aLayer
const
AsyncPanZoomController
*
apzc
)
;
protected
:
RefPtr
<
InputQueue
>
mInputQueue
;
private
:
mutable
mozilla
:
:
Monitor
mTreeLock
;
RefPtr
<
HitTestingTreeNode
>
mRootNode
;
std
:
:
map
<
ScrollableLayerGuid
ZoomConstraints
>
mZoomConstraints
;
RefPtr
<
AsyncPanZoomController
>
mApzcForInputBlock
;
HitTestResult
mHitResultForInputBlock
;
int32_t
mRetainedTouchIdentifier
;
TouchCounter
mTouchCounter
;
gfx
:
:
TreeLog
mApzcTreeLog
;
static
float
sDPI
;
}
;
}
}
#
endif
