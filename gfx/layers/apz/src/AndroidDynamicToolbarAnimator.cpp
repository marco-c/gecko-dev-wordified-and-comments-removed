#
include
"
mozilla
/
layers
/
AndroidDynamicToolbarAnimator
.
h
"
#
include
<
cmath
>
#
include
"
FrameMetrics
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
APZThreadUtils
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositorOGL
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
layers
/
UiCompositorControllerMessageTypes
.
h
"
#
include
"
mozilla
/
layers
/
UiCompositorControllerParent
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
namespace
{
static
const
float
ANIMATION_DURATION
=
0
.
15f
;
static
const
int32_t
MOVE_TOOLBAR_DOWN
=
1
;
static
const
int32_t
MOVE_TOOLBAR_UP
=
-
1
;
static
const
float
SHRINK_FACTOR
=
0
.
95f
;
}
namespace
mozilla
{
namespace
layers
{
AndroidDynamicToolbarAnimator
:
:
AndroidDynamicToolbarAnimator
(
)
:
mRootLayerTreeId
(
0
)
mToolbarState
(
eToolbarVisible
)
mPinnedFlags
(
0
)
mControllerScrollingRootContent
(
false
)
mControllerDragThresholdReached
(
false
)
mControllerCancelTouchTracking
(
false
)
mControllerDragChangedDirection
(
false
)
mControllerResetOnNextMove
(
false
)
mControllerStartTouch
(
0
)
mControllerPreviousTouch
(
0
)
mControllerTotalDistance
(
0
)
mControllerMaxToolbarHeight
(
0
)
mControllerToolbarHeight
(
0
)
mControllerSurfaceHeight
(
0
)
mControllerCompositionHeight
(
0
)
mControllerLastDragDirection
(
0
)
mControllerTouchCount
(
0
)
mControllerLastEventTimeStamp
(
0
)
mControllerState
(
eNothingPending
)
mCompositorShutdown
(
false
)
mCompositorAnimationDeferred
(
false
)
mCompositorLayersUpdateEnabled
(
false
)
mCompositorAnimationStyle
(
eAnimate
)
mCompositorMaxToolbarHeight
(
0
)
mCompositorToolbarHeight
(
0
)
mCompositorSurfaceHeight
(
0
)
mCompositorAnimationDirection
(
0
)
mCompositorAnimationStartHeight
(
0
)
{
}
void
AndroidDynamicToolbarAnimator
:
:
Initialize
(
uint64_t
aRootLayerTreeId
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
mRootLayerTreeId
=
aRootLayerTreeId
;
RefPtr
<
UiCompositorControllerParent
>
uiController
=
UiCompositorControllerParent
:
:
GetFromRootLayerTreeId
(
mRootLayerTreeId
)
;
MOZ_ASSERT
(
uiController
)
;
uiController
-
>
RegisterAndroidDynamicToolbarAnimator
(
this
)
;
for
(
QueuedMessage
*
message
=
mCompositorQueuedMessages
.
getFirst
(
)
;
message
!
=
nullptr
;
message
=
message
-
>
getNext
(
)
)
{
uiController
-
>
ToolbarAnimatorMessageFromCompositor
(
message
-
>
mMessage
)
;
}
mCompositorQueuedMessages
.
clear
(
)
;
}
static
bool
GetTouchY
(
MultiTouchInput
&
multiTouch
ScreenIntCoord
*
value
)
{
MOZ_ASSERT
(
value
)
;
if
(
multiTouch
.
mTouches
.
Length
(
)
=
=
1
)
{
*
value
=
multiTouch
.
mTouches
[
0
]
.
mScreenPoint
.
y
;
return
true
;
}
return
false
;
}
nsEventStatus
AndroidDynamicToolbarAnimator
:
:
ReceiveInputEvent
(
InputData
&
aEvent
)
{
MOZ_ASSERT
(
APZThreadUtils
:
:
IsControllerThread
(
)
)
;
if
(
aEvent
.
mInputType
!
=
MULTITOUCH_INPUT
)
{
return
nsEventStatus_eIgnore
;
}
MultiTouchInput
&
multiTouch
=
aEvent
.
AsMultiTouchInput
(
)
;
ScreenIntCoord
currentTouch
=
0
;
switch
(
multiTouch
.
mType
)
{
case
MultiTouchInput
:
:
MULTITOUCH_START
:
mControllerTouchCount
=
multiTouch
.
mTouches
.
Length
(
)
;
break
;
case
MultiTouchInput
:
:
MULTITOUCH_END
:
case
MultiTouchInput
:
:
MULTITOUCH_CANCEL
:
mControllerTouchCount
-
=
multiTouch
.
mTouches
.
Length
(
)
;
break
;
default
:
break
;
}
if
(
mControllerTouchCount
>
1
)
{
mControllerResetOnNextMove
=
true
;
}
if
(
mPinnedFlags
|
|
!
GetTouchY
(
multiTouch
&
currentTouch
)
)
{
TranslateTouchEvent
(
multiTouch
)
;
return
nsEventStatus_eIgnore
;
}
nsEventStatus
status
=
nsEventStatus_eIgnore
;
const
StaticToolbarState
currentToolbarState
=
mToolbarState
;
switch
(
multiTouch
.
mType
)
{
case
MultiTouchInput
:
:
MULTITOUCH_START
:
mControllerCancelTouchTracking
=
false
;
mControllerStartTouch
=
mControllerPreviousTouch
=
currentTouch
;
if
(
currentToolbarState
=
=
eToolbarAnimating
)
{
StopCompositorAnimation
(
)
;
}
break
;
case
MultiTouchInput
:
:
MULTITOUCH_MOVE
:
{
CheckForResetOnNextMove
(
currentTouch
)
;
if
(
(
mControllerState
!
=
eAnimationStartPending
)
&
&
(
mControllerState
!
=
eAnimationStopPending
)
&
&
(
currentToolbarState
!
=
eToolbarAnimating
)
&
&
!
mControllerCancelTouchTracking
)
{
ScreenIntCoord
delta
=
currentTouch
-
mControllerPreviousTouch
;
mControllerPreviousTouch
=
currentTouch
;
mControllerTotalDistance
+
=
delta
;
if
(
delta
!
=
0
)
{
ScreenIntCoord
direction
=
(
delta
>
0
?
MOVE_TOOLBAR_DOWN
:
MOVE_TOOLBAR_UP
)
;
if
(
mControllerLastDragDirection
&
&
(
direction
!
=
mControllerLastDragDirection
)
)
{
mControllerDragChangedDirection
=
true
;
}
mControllerLastDragDirection
=
direction
;
}
if
(
IsEnoughPageToHideToolbar
(
delta
)
)
{
const
uint32_t
dragThreshold
=
Abs
(
std
:
:
lround
(
0
.
01f
*
gfxPrefs
:
:
ToolbarScrollThreshold
(
)
*
mControllerCompositionHeight
)
)
;
if
(
(
Abs
(
mControllerTotalDistance
.
value
)
>
dragThreshold
)
&
&
(
delta
!
=
0
)
)
{
mControllerDragThresholdReached
=
true
;
status
=
ProcessTouchDelta
(
currentToolbarState
delta
multiTouch
.
mTime
)
;
}
}
mControllerLastEventTimeStamp
=
multiTouch
.
mTime
;
}
break
;
}
case
MultiTouchInput
:
:
MULTITOUCH_END
:
case
MultiTouchInput
:
:
MULTITOUCH_CANCEL
:
if
(
mControllerTouchCount
=
=
0
)
{
HandleTouchEnd
(
currentToolbarState
currentTouch
)
;
}
break
;
default
:
break
;
}
TranslateTouchEvent
(
multiTouch
)
;
return
status
;
}
void
AndroidDynamicToolbarAnimator
:
:
SetMaxToolbarHeight
(
ScreenIntCoord
aHeight
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
UpdateControllerToolbarHeight
(
aHeight
aHeight
)
;
mCompositorMaxToolbarHeight
=
aHeight
;
UpdateCompositorToolbarHeight
(
aHeight
)
;
}
void
AndroidDynamicToolbarAnimator
:
:
SetPinned
(
bool
aPinned
int32_t
aReason
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
MOZ_ASSERT
(
aReason
<
32
)
;
uint32_t
bit
=
0x01
<
<
aReason
;
uint32_t
current
=
mPinnedFlags
;
if
(
aPinned
)
{
mPinnedFlags
=
current
|
bit
;
}
else
{
mPinnedFlags
=
current
&
(
~
bit
)
;
}
}
ScreenIntCoord
AndroidDynamicToolbarAnimator
:
:
GetMaxToolbarHeight
(
)
const
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
return
mCompositorMaxToolbarHeight
;
}
ScreenIntCoord
AndroidDynamicToolbarAnimator
:
:
GetCurrentToolbarHeight
(
)
const
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
return
mCompositorToolbarHeight
;
}
ScreenIntCoord
AndroidDynamicToolbarAnimator
:
:
GetCurrentSurfaceHeight
(
)
const
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
return
mCompositorSurfaceHeight
;
}
ScreenIntCoord
AndroidDynamicToolbarAnimator
:
:
GetCompositionHeight
(
)
const
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
return
mCompositorCompositionSize
.
height
;
}
bool
AndroidDynamicToolbarAnimator
:
:
SetCompositionSize
(
ScreenIntSize
aSize
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
mCompositorCompositionSize
=
=
aSize
)
{
return
false
;
}
ScreenIntCoord
prevHeight
=
mCompositorCompositionSize
.
height
;
mCompositorCompositionSize
=
aSize
;
if
(
prevHeight
!
=
aSize
.
height
)
{
UpdateControllerCompositionHeight
(
aSize
.
height
)
;
UpdateFixedLayerMargins
(
)
;
}
return
true
;
}
void
AndroidDynamicToolbarAnimator
:
:
SetScrollingRootContent
(
)
{
MOZ_ASSERT
(
APZThreadUtils
:
:
IsControllerThread
(
)
)
;
mControllerScrollingRootContent
=
true
;
}
void
AndroidDynamicToolbarAnimator
:
:
ToolbarAnimatorMessageFromUI
(
int32_t
aMessage
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
switch
(
aMessage
)
{
case
STATIC_TOOLBAR_NEEDS_UPDATE
:
break
;
case
STATIC_TOOLBAR_READY
:
break
;
case
TOOLBAR_HIDDEN
:
if
(
mToolbarState
!
=
eToolbarAnimating
)
{
mToolbarState
=
eToolbarUnlocked
;
if
(
mCompositorAnimationDeferred
)
{
StartCompositorAnimation
(
mCompositorAnimationDirection
mCompositorAnimationStyle
mCompositorToolbarHeight
)
;
}
}
else
{
mCompositorAnimationDeferred
=
false
;
}
break
;
case
TOOLBAR_VISIBLE
:
mToolbarState
=
eToolbarVisible
;
break
;
case
TOOLBAR_SHOW
:
break
;
case
FIRST_PAINT
:
break
;
case
REQUEST_SHOW_TOOLBAR_IMMEDIATELY
:
NotifyControllerPendingAnimation
(
MOVE_TOOLBAR_DOWN
eImmediate
)
;
break
;
case
REQUEST_SHOW_TOOLBAR_ANIMATED
:
NotifyControllerPendingAnimation
(
MOVE_TOOLBAR_DOWN
eAnimate
)
;
break
;
case
REQUEST_HIDE_TOOLBAR_IMMEDIATELY
:
NotifyControllerPendingAnimation
(
MOVE_TOOLBAR_UP
eImmediate
)
;
break
;
case
REQUEST_HIDE_TOOLBAR_ANIMATED
:
NotifyControllerPendingAnimation
(
MOVE_TOOLBAR_UP
eAnimate
)
;
break
;
case
TOOLBAR_SNAPSHOT_FAILED
:
mToolbarState
=
eToolbarVisible
;
NotifyControllerSnapshotFailed
(
)
;
break
;
default
:
break
;
}
}
bool
AndroidDynamicToolbarAnimator
:
:
UpdateAnimation
(
const
TimeStamp
&
aCurrentFrame
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
(
mToolbarState
!
=
eToolbarAnimating
)
|
|
mCompositorShutdown
)
{
return
false
;
}
bool
continueAnimating
=
true
;
if
(
mCompositorAnimationStyle
=
=
eImmediate
)
{
if
(
mCompositorAnimationDirection
=
=
MOVE_TOOLBAR_DOWN
)
{
mCompositorToolbarHeight
=
mCompositorMaxToolbarHeight
;
}
else
if
(
mCompositorAnimationDirection
=
=
MOVE_TOOLBAR_UP
)
{
mCompositorToolbarHeight
=
0
;
}
}
else
if
(
mCompositorAnimationStyle
=
=
eAnimate
)
{
const
float
rate
=
(
(
float
)
mCompositorMaxToolbarHeight
)
/
ANIMATION_DURATION
;
float
deltaTime
=
(
aCurrentFrame
-
mCompositorAnimationStartTimeStamp
)
.
ToSeconds
(
)
;
if
(
deltaTime
<
0
.
0f
)
{
deltaTime
=
0
.
0f
;
}
mCompositorToolbarHeight
=
mCompositorAnimationStartHeight
+
(
(
int32_t
)
(
rate
*
deltaTime
)
*
mCompositorAnimationDirection
)
;
}
if
(
(
mCompositorAnimationDirection
=
=
MOVE_TOOLBAR_DOWN
)
&
&
(
mCompositorToolbarHeight
>
=
mCompositorMaxToolbarHeight
)
)
{
continueAnimating
=
false
;
mToolbarState
=
eToolbarVisible
;
PostMessage
(
TOOLBAR_SHOW
)
;
mCompositorToolbarHeight
=
mCompositorMaxToolbarHeight
;
}
else
if
(
(
mCompositorAnimationDirection
=
=
MOVE_TOOLBAR_UP
)
&
&
(
mCompositorToolbarHeight
<
=
0
)
)
{
continueAnimating
=
false
;
mToolbarState
=
eToolbarUnlocked
;
mCompositorToolbarHeight
=
0
;
}
CompositorBridgeParent
*
parent
=
CompositorBridgeParent
:
:
GetCompositorBridgeParentFromLayersId
(
mRootLayerTreeId
)
;
if
(
parent
)
{
AsyncCompositionManager
*
manager
=
parent
-
>
GetCompositionManager
(
nullptr
)
;
if
(
manager
)
{
manager
-
>
SetFixedLayerMarginsBottom
(
GetFixedLayerMarginsBottom
(
)
)
;
}
}
if
(
!
continueAnimating
)
{
NotifyControllerAnimationStopped
(
mCompositorToolbarHeight
)
;
}
else
{
UpdateControllerToolbarHeight
(
mCompositorToolbarHeight
)
;
}
return
continueAnimating
;
}
void
AndroidDynamicToolbarAnimator
:
:
FirstPaint
(
)
{
PostMessage
(
FIRST_PAINT
)
;
}
void
AndroidDynamicToolbarAnimator
:
:
UpdateRootFrameMetrics
(
const
FrameMetrics
&
aMetrics
)
{
CSSToScreenScale
scale
=
ViewTargetAs
<
ScreenPixel
>
(
aMetrics
.
GetZoom
(
)
.
ToScaleFactor
(
)
PixelCastJustification
:
:
ScreenIsParentLayerForRoot
)
;
ScreenPoint
scrollOffset
=
aMetrics
.
GetScrollOffset
(
)
*
scale
;
CSSRect
cssPageRect
=
aMetrics
.
GetScrollableRect
(
)
;
UpdateFrameMetrics
(
scrollOffset
scale
cssPageRect
)
;
}
void
AndroidDynamicToolbarAnimator
:
:
EnableLayersUpdateNotifications
(
bool
aEnable
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
mCompositorLayersUpdateEnabled
=
aEnable
;
}
void
AndroidDynamicToolbarAnimator
:
:
NotifyLayersUpdated
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
mCompositorLayersUpdateEnabled
)
{
PostMessage
(
LAYERS_UPDATED
)
;
}
}
void
AndroidDynamicToolbarAnimator
:
:
AdoptToolbarPixels
(
mozilla
:
:
ipc
:
:
Shmem
&
&
aMem
const
ScreenIntSize
&
aSize
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
mCompositorToolbarPixels
=
Some
(
Move
(
aMem
)
)
;
mCompositorToolbarPixelsSize
=
aSize
;
}
Effect
*
AndroidDynamicToolbarAnimator
:
:
GetToolbarEffect
(
CompositorOGL
*
gl
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
mCompositorShutdown
)
{
return
nullptr
;
}
if
(
mCompositorToolbarPixels
)
{
RefPtr
<
DataSourceSurface
>
surface
=
Factory
:
:
CreateWrappingDataSourceSurface
(
mCompositorToolbarPixels
.
ref
(
)
.
get
<
uint8_t
>
(
)
mCompositorToolbarPixelsSize
.
width
*
4
IntSize
(
mCompositorToolbarPixelsSize
.
width
mCompositorToolbarPixelsSize
.
height
)
gfx
:
:
SurfaceFormat
:
:
B8G8R8A8
)
;
if
(
!
mCompositorToolbarTexture
)
{
mCompositorToolbarTexture
=
gl
-
>
CreateDataTextureSource
(
)
;
mCompositorToolbarEffect
=
nullptr
;
}
if
(
!
mCompositorToolbarTexture
-
>
Update
(
surface
)
)
{
mCompositorToolbarTexture
=
nullptr
;
}
RefPtr
<
UiCompositorControllerParent
>
uiController
=
UiCompositorControllerParent
:
:
GetFromRootLayerTreeId
(
mRootLayerTreeId
)
;
uiController
-
>
DeallocShmem
(
mCompositorToolbarPixels
.
ref
(
)
)
;
mCompositorToolbarPixels
.
reset
(
)
;
if
(
mCompositorToolbarTexture
)
{
CompositorThreadHolder
:
:
Loop
(
)
-
>
PostTask
(
NewRunnableMethod
(
this
&
AndroidDynamicToolbarAnimator
:
:
PostToolbarReady
)
)
;
}
}
if
(
mCompositorToolbarTexture
)
{
if
(
!
mCompositorToolbarEffect
)
{
mCompositorToolbarEffect
=
new
EffectRGB
(
mCompositorToolbarTexture
true
SamplingFilter
:
:
LINEAR
)
;
}
float
ratioVisible
=
(
float
)
mCompositorToolbarHeight
/
(
float
)
mCompositorMaxToolbarHeight
;
mCompositorToolbarEffect
-
>
mTextureCoords
.
y
=
1
.
0f
-
ratioVisible
;
mCompositorToolbarEffect
-
>
mTextureCoords
.
height
=
ratioVisible
;
}
return
mCompositorToolbarEffect
.
get
(
)
;
}
void
AndroidDynamicToolbarAnimator
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
mCompositorShutdown
=
true
;
mCompositorToolbarEffect
=
nullptr
;
mCompositorToolbarTexture
=
nullptr
;
mCompositorQueuedMessages
.
clear
(
)
;
if
(
mCompositorToolbarPixels
)
{
RefPtr
<
UiCompositorControllerParent
>
uiController
=
UiCompositorControllerParent
:
:
GetFromRootLayerTreeId
(
mRootLayerTreeId
)
;
uiController
-
>
DeallocShmem
(
mCompositorToolbarPixels
.
ref
(
)
)
;
mCompositorToolbarPixels
.
reset
(
)
;
}
}
nsEventStatus
AndroidDynamicToolbarAnimator
:
:
ProcessTouchDelta
(
StaticToolbarState
aCurrentToolbarState
ScreenIntCoord
aDelta
uint32_t
aTimeStamp
)
{
MOZ_ASSERT
(
APZThreadUtils
:
:
IsControllerThread
(
)
)
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
const
bool
tryingToHideToolbar
=
aDelta
<
0
;
if
(
tryingToHideToolbar
&
&
!
mControllerScrollingRootContent
)
{
return
status
;
}
if
(
aCurrentToolbarState
=
=
eToolbarVisible
)
{
if
(
tryingToHideToolbar
&
&
(
mControllerState
!
=
eUnlockPending
)
)
{
PostMessage
(
STATIC_TOOLBAR_NEEDS_UPDATE
)
;
mControllerState
=
eUnlockPending
;
}
return
status
;
}
if
(
aCurrentToolbarState
!
=
eToolbarUnlocked
)
{
return
status
;
}
if
(
(
mControllerState
!
=
eUnlockPending
)
&
&
(
mControllerState
!
=
eNothingPending
)
)
{
return
status
;
}
mControllerState
=
eNothingPending
;
if
(
(
tryingToHideToolbar
&
&
(
mControllerToolbarHeight
>
0
)
)
|
|
(
!
tryingToHideToolbar
&
&
(
mControllerToolbarHeight
<
mControllerMaxToolbarHeight
)
)
)
{
ScreenIntCoord
deltaRemainder
=
0
;
mControllerToolbarHeight
+
=
aDelta
;
if
(
tryingToHideToolbar
&
&
(
mControllerToolbarHeight
<
=
0
)
)
{
deltaRemainder
=
mControllerToolbarHeight
;
mControllerToolbarHeight
=
0
;
}
else
if
(
!
tryingToHideToolbar
&
&
(
mControllerToolbarHeight
>
=
mControllerMaxToolbarHeight
)
)
{
deltaRemainder
=
mControllerToolbarHeight
-
mControllerMaxToolbarHeight
;
mControllerToolbarHeight
=
mControllerMaxToolbarHeight
;
PostMessage
(
TOOLBAR_SHOW
)
;
mControllerState
=
eShowPending
;
}
UpdateCompositorToolbarHeight
(
mControllerToolbarHeight
)
;
RequestComposite
(
)
;
if
(
deltaRemainder
=
=
0
)
{
status
=
nsEventStatus_eConsumeNoDefault
;
}
uint32_t
timeDelta
=
aTimeStamp
-
mControllerLastEventTimeStamp
;
if
(
mControllerLastEventTimeStamp
&
&
timeDelta
&
&
aDelta
)
{
float
speed
=
-
(
float
)
aDelta
/
(
float
)
timeDelta
;
CompositorBridgeParent
*
parent
=
CompositorBridgeParent
:
:
GetCompositorBridgeParentFromLayersId
(
mRootLayerTreeId
)
;
if
(
parent
)
{
parent
-
>
GetAPZCTreeManager
(
)
-
>
ProcessTouchVelocity
(
aTimeStamp
speed
)
;
}
}
}
return
status
;
}
void
AndroidDynamicToolbarAnimator
:
:
HandleTouchEnd
(
StaticToolbarState
aCurrentToolbarState
ScreenIntCoord
aCurrentTouch
)
{
MOZ_ASSERT
(
APZThreadUtils
:
:
IsControllerThread
(
)
)
;
CheckForResetOnNextMove
(
aCurrentTouch
)
;
int32_t
direction
=
mControllerLastDragDirection
;
mControllerLastDragDirection
=
0
;
bool
isRoot
=
mControllerScrollingRootContent
;
mControllerScrollingRootContent
=
false
;
bool
dragChangedDirection
=
mControllerDragChangedDirection
;
mControllerDragChangedDirection
=
false
;
if
(
dragChangedDirection
&
&
(
mControllerToolbarHeight
!
=
mControllerMaxToolbarHeight
)
&
&
(
mControllerToolbarHeight
!
=
0
)
)
{
direction
=
(
(
float
)
mControllerToolbarHeight
/
(
float
)
mControllerMaxToolbarHeight
)
<
0
.
5f
?
MOVE_TOOLBAR_UP
:
MOVE_TOOLBAR_DOWN
;
}
if
(
!
direction
)
{
if
(
mControllerToolbarHeight
=
=
mControllerMaxToolbarHeight
)
{
direction
=
MOVE_TOOLBAR_DOWN
;
}
else
if
(
mControllerToolbarHeight
=
=
0
)
{
direction
=
MOVE_TOOLBAR_UP
;
}
else
{
direction
=
(
(
aCurrentTouch
-
mControllerStartTouch
)
>
0
?
MOVE_TOOLBAR_DOWN
:
MOVE_TOOLBAR_UP
)
;
}
if
(
!
direction
)
{
direction
=
MOVE_TOOLBAR_DOWN
;
}
}
mControllerStartTouch
=
0
;
mControllerPreviousTouch
=
0
;
mControllerTotalDistance
=
0
;
mControllerDragThresholdReached
=
false
;
mControllerLastEventTimeStamp
=
0
;
bool
cancelTouchTracking
=
mControllerCancelTouchTracking
;
mControllerCancelTouchTracking
=
false
;
if
(
aCurrentToolbarState
=
=
eToolbarAnimating
)
{
return
;
}
if
(
cancelTouchTracking
)
{
return
;
}
if
(
(
(
direction
=
=
MOVE_TOOLBAR_DOWN
)
&
&
(
mControllerToolbarHeight
=
=
mControllerMaxToolbarHeight
)
)
|
|
(
(
direction
=
=
MOVE_TOOLBAR_UP
)
&
&
(
mControllerToolbarHeight
=
=
0
)
)
)
{
ShowToolbarIfNotVisible
(
aCurrentToolbarState
)
;
return
;
}
if
(
!
isRoot
&
&
(
(
direction
=
=
MOVE_TOOLBAR_UP
)
&
&
(
mControllerToolbarHeight
=
=
mControllerMaxToolbarHeight
)
)
)
{
ShowToolbarIfNotVisible
(
aCurrentToolbarState
)
;
return
;
}
if
(
!
IsEnoughPageToHideToolbar
(
direction
)
)
{
if
(
mControllerToolbarHeight
=
=
mControllerMaxToolbarHeight
)
{
ShowToolbarIfNotVisible
(
aCurrentToolbarState
)
;
return
;
}
else
if
(
mControllerToolbarHeight
!
=
0
)
{
direction
=
MOVE_TOOLBAR_DOWN
;
}
}
StartCompositorAnimation
(
direction
eAnimate
mControllerToolbarHeight
)
;
}
void
AndroidDynamicToolbarAnimator
:
:
PostMessage
(
int32_t
aMessage
)
{
if
(
mRootLayerTreeId
=
=
0
)
{
QueueMessage
(
aMessage
)
;
return
;
}
RefPtr
<
UiCompositorControllerParent
>
uiController
=
UiCompositorControllerParent
:
:
GetFromRootLayerTreeId
(
mRootLayerTreeId
)
;
if
(
!
uiController
)
{
return
;
}
uiController
-
>
ToolbarAnimatorMessageFromCompositor
(
aMessage
)
;
}
void
AndroidDynamicToolbarAnimator
:
:
UpdateCompositorToolbarHeight
(
ScreenIntCoord
aHeight
)
{
if
(
!
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
{
CompositorThreadHolder
:
:
Loop
(
)
-
>
PostTask
(
NewRunnableMethod
<
ScreenIntCoord
>
(
this
&
AndroidDynamicToolbarAnimator
:
:
UpdateCompositorToolbarHeight
aHeight
)
)
;
return
;
}
mCompositorToolbarHeight
=
aHeight
;
UpdateFixedLayerMargins
(
)
;
}
void
AndroidDynamicToolbarAnimator
:
:
UpdateControllerToolbarHeight
(
ScreenIntCoord
aHeight
ScreenIntCoord
aMaxHeight
)
{
if
(
!
APZThreadUtils
:
:
IsControllerThread
(
)
)
{
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableMethod
<
ScreenIntCoord
ScreenIntCoord
>
(
this
&
AndroidDynamicToolbarAnimator
:
:
UpdateControllerToolbarHeight
aHeight
aMaxHeight
)
)
;
return
;
}
mControllerToolbarHeight
=
aHeight
;
if
(
aMaxHeight
>
=
0
)
{
mControllerMaxToolbarHeight
=
aMaxHeight
;
}
}
void
AndroidDynamicToolbarAnimator
:
:
UpdateControllerSurfaceHeight
(
ScreenIntCoord
aHeight
)
{
if
(
!
APZThreadUtils
:
:
IsControllerThread
(
)
)
{
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableMethod
<
ScreenIntCoord
>
(
this
&
AndroidDynamicToolbarAnimator
:
:
UpdateControllerSurfaceHeight
aHeight
)
)
;
return
;
}
mControllerSurfaceHeight
=
aHeight
;
}
void
AndroidDynamicToolbarAnimator
:
:
UpdateControllerCompositionHeight
(
ScreenIntCoord
aHeight
)
{
if
(
!
APZThreadUtils
:
:
IsControllerThread
(
)
)
{
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableMethod
<
ScreenIntCoord
>
(
this
&
AndroidDynamicToolbarAnimator
:
:
UpdateControllerCompositionHeight
aHeight
)
)
;
return
;
}
mControllerCompositionHeight
=
aHeight
;
}
void
AndroidDynamicToolbarAnimator
:
:
UpdateFixedLayerMargins
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
mCompositorShutdown
)
{
return
;
}
CompositorBridgeParent
*
parent
=
CompositorBridgeParent
:
:
GetCompositorBridgeParentFromLayersId
(
mRootLayerTreeId
)
;
if
(
parent
)
{
ScreenIntCoord
surfaceHeight
=
parent
-
>
GetEGLSurfaceSize
(
)
.
height
;
if
(
surfaceHeight
!
=
mCompositorSurfaceHeight
)
{
mCompositorSurfaceHeight
=
surfaceHeight
;
UpdateControllerSurfaceHeight
(
mCompositorSurfaceHeight
)
;
}
AsyncCompositionManager
*
manager
=
parent
-
>
GetCompositionManager
(
nullptr
)
;
if
(
manager
)
{
manager
-
>
SetFixedLayerMarginsBottom
(
GetFixedLayerMarginsBottom
(
)
)
;
}
}
}
void
AndroidDynamicToolbarAnimator
:
:
NotifyControllerPendingAnimation
(
int32_t
aDirection
AnimationStyle
aAnimationStyle
)
{
if
(
!
APZThreadUtils
:
:
IsControllerThread
(
)
)
{
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableMethod
<
int32_t
AnimationStyle
>
(
this
&
AndroidDynamicToolbarAnimator
:
:
NotifyControllerPendingAnimation
aDirection
aAnimationStyle
)
)
;
return
;
}
mControllerCancelTouchTracking
=
true
;
if
(
(
(
mControllerToolbarHeight
=
=
mControllerMaxToolbarHeight
)
&
&
(
aDirection
=
=
MOVE_TOOLBAR_DOWN
)
)
|
|
(
(
mControllerToolbarHeight
=
=
0
)
&
&
(
aDirection
=
=
MOVE_TOOLBAR_UP
)
)
)
{
if
(
(
aDirection
=
=
MOVE_TOOLBAR_DOWN
)
&
&
(
mToolbarState
=
=
eToolbarUnlocked
)
)
{
PostMessage
(
TOOLBAR_SHOW
)
;
}
return
;
}
StartCompositorAnimation
(
aDirection
aAnimationStyle
mControllerToolbarHeight
)
;
MOZ_ASSERT
(
mControllerState
=
=
eAnimationStartPending
)
;
}
void
AndroidDynamicToolbarAnimator
:
:
StartCompositorAnimation
(
int32_t
aDirection
AnimationStyle
aAnimationStyle
ScreenIntCoord
aHeight
)
{
if
(
!
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
{
mControllerState
=
eAnimationStartPending
;
CompositorThreadHolder
:
:
Loop
(
)
-
>
PostTask
(
NewRunnableMethod
<
int32_t
AnimationStyle
ScreenIntCoord
>
(
this
&
AndroidDynamicToolbarAnimator
:
:
StartCompositorAnimation
aDirection
aAnimationStyle
aHeight
)
)
;
return
;
}
MOZ_ASSERT
(
aDirection
=
=
MOVE_TOOLBAR_UP
|
|
aDirection
=
=
MOVE_TOOLBAR_DOWN
)
;
const
StaticToolbarState
currentToolbarState
=
mToolbarState
;
mCompositorAnimationDirection
=
aDirection
;
mCompositorAnimationStartHeight
=
mCompositorToolbarHeight
=
aHeight
;
mCompositorAnimationStyle
=
aAnimationStyle
;
if
(
currentToolbarState
!
=
eToolbarUnlocked
)
{
mCompositorAnimationDeferred
=
true
;
PostMessage
(
STATIC_TOOLBAR_NEEDS_UPDATE
)
;
}
else
{
mCompositorAnimationDeferred
=
false
;
mToolbarState
=
eToolbarAnimating
;
NotifyControllerAnimationStarted
(
)
;
CompositorBridgeParent
*
parent
=
CompositorBridgeParent
:
:
GetCompositorBridgeParentFromLayersId
(
mRootLayerTreeId
)
;
if
(
parent
)
{
mCompositorAnimationStartTimeStamp
=
parent
-
>
GetAPZCTreeManager
(
)
-
>
GetFrameTime
(
)
;
}
RequestComposite
(
)
;
}
}
void
AndroidDynamicToolbarAnimator
:
:
NotifyControllerAnimationStarted
(
)
{
if
(
!
APZThreadUtils
:
:
IsControllerThread
(
)
)
{
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableMethod
(
this
&
AndroidDynamicToolbarAnimator
:
:
NotifyControllerAnimationStarted
)
)
;
return
;
}
if
(
mControllerState
=
=
eAnimationStartPending
)
{
mControllerState
=
eNothingPending
;
}
}
void
AndroidDynamicToolbarAnimator
:
:
StopCompositorAnimation
(
)
{
if
(
!
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
{
mControllerState
=
eAnimationStopPending
;
CompositorThreadHolder
:
:
Loop
(
)
-
>
PostTask
(
NewRunnableMethod
(
this
&
AndroidDynamicToolbarAnimator
:
:
StopCompositorAnimation
)
)
;
return
;
}
if
(
mToolbarState
=
=
eToolbarAnimating
)
{
mToolbarState
=
eToolbarUnlocked
;
}
NotifyControllerAnimationStopped
(
mCompositorToolbarHeight
)
;
}
void
AndroidDynamicToolbarAnimator
:
:
NotifyControllerAnimationStopped
(
ScreenIntCoord
aHeight
)
{
if
(
!
APZThreadUtils
:
:
IsControllerThread
(
)
)
{
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableMethod
<
ScreenIntCoord
>
(
this
&
AndroidDynamicToolbarAnimator
:
:
NotifyControllerAnimationStopped
aHeight
)
)
;
return
;
}
if
(
mControllerState
=
=
eAnimationStopPending
)
{
mControllerState
=
eNothingPending
;
}
mControllerToolbarHeight
=
aHeight
;
}
void
AndroidDynamicToolbarAnimator
:
:
RequestComposite
(
)
{
if
(
!
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
{
CompositorThreadHolder
:
:
Loop
(
)
-
>
PostTask
(
NewRunnableMethod
(
this
&
AndroidDynamicToolbarAnimator
:
:
RequestComposite
)
)
;
return
;
}
if
(
mCompositorShutdown
)
{
return
;
}
CompositorBridgeParent
*
parent
=
CompositorBridgeParent
:
:
GetCompositorBridgeParentFromLayersId
(
mRootLayerTreeId
)
;
if
(
parent
)
{
AsyncCompositionManager
*
manager
=
parent
-
>
GetCompositionManager
(
nullptr
)
;
if
(
manager
)
{
manager
-
>
SetFixedLayerMarginsBottom
(
GetFixedLayerMarginsBottom
(
)
)
;
parent
-
>
Invalidate
(
)
;
parent
-
>
ScheduleComposition
(
)
;
}
}
}
void
AndroidDynamicToolbarAnimator
:
:
PostToolbarReady
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
RequestComposite
(
)
;
PostMessage
(
STATIC_TOOLBAR_READY
)
;
if
(
mToolbarState
!
=
eToolbarAnimating
)
{
mToolbarState
=
eToolbarUpdated
;
}
else
{
mCompositorAnimationDeferred
=
false
;
}
}
void
AndroidDynamicToolbarAnimator
:
:
UpdateFrameMetrics
(
ScreenPoint
aScrollOffset
CSSToScreenScale
aScale
CSSRect
aCssPageRect
)
{
if
(
!
APZThreadUtils
:
:
IsControllerThread
(
)
)
{
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableMethod
<
ScreenPoint
CSSToScreenScale
CSSRect
>
(
this
&
AndroidDynamicToolbarAnimator
:
:
UpdateFrameMetrics
aScrollOffset
aScale
aCssPageRect
)
)
;
return
;
}
if
(
mControllerFrameMetrics
.
Update
(
aScrollOffset
aScale
aCssPageRect
)
)
{
RefPtr
<
UiCompositorControllerParent
>
uiController
=
UiCompositorControllerParent
:
:
GetFromRootLayerTreeId
(
mRootLayerTreeId
)
;
MOZ_ASSERT
(
uiController
)
;
CompositorThreadHolder
:
:
Loop
(
)
-
>
PostTask
(
NewRunnableMethod
<
ScreenPoint
CSSToScreenScale
CSSRect
>
(
uiController
&
UiCompositorControllerParent
:
:
SendRootFrameMetrics
aScrollOffset
aScale
aCssPageRect
)
)
;
}
}
bool
AndroidDynamicToolbarAnimator
:
:
IsEnoughPageToHideToolbar
(
ScreenIntCoord
delta
)
{
MOZ_ASSERT
(
APZThreadUtils
:
:
IsControllerThread
(
)
)
;
if
(
delta
>
=
0
)
{
return
true
;
}
if
(
(
(
float
)
mControllerSurfaceHeight
>
=
(
mControllerFrameMetrics
.
mPageRect
.
YMost
(
)
*
SHRINK_FACTOR
)
)
|
|
(
(
float
)
mControllerSurfaceHeight
>
=
(
(
mControllerFrameMetrics
.
mPageRect
.
YMost
(
)
-
mControllerFrameMetrics
.
mScrollOffset
.
y
)
*
SHRINK_FACTOR
)
)
)
{
return
false
;
}
return
true
;
}
void
AndroidDynamicToolbarAnimator
:
:
ShowToolbarIfNotVisible
(
StaticToolbarState
aCurrentToolbarState
)
{
MOZ_ASSERT
(
APZThreadUtils
:
:
IsControllerThread
(
)
)
;
if
(
(
mControllerToolbarHeight
=
=
mControllerMaxToolbarHeight
)
&
&
(
aCurrentToolbarState
!
=
eToolbarVisible
)
&
&
(
mControllerState
!
=
eShowPending
)
)
{
PostMessage
(
TOOLBAR_SHOW
)
;
}
}
bool
AndroidDynamicToolbarAnimator
:
:
FrameMetricsState
:
:
Update
(
const
ScreenPoint
&
aScrollOffset
const
CSSToScreenScale
&
aScale
const
CSSRect
&
aCssPageRect
)
{
if
(
!
FuzzyEqualsMultiplicative
(
aScrollOffset
.
x
mScrollOffset
.
x
)
|
|
!
FuzzyEqualsMultiplicative
(
aScrollOffset
.
y
mScrollOffset
.
y
)
|
|
!
FuzzyEqualsMultiplicative
(
aScale
.
scale
mScale
.
scale
)
|
|
!
FuzzyEqualsMultiplicative
(
aCssPageRect
.
width
mCssPageRect
.
width
)
|
|
!
FuzzyEqualsMultiplicative
(
aCssPageRect
.
height
mCssPageRect
.
height
)
|
|
!
FuzzyEqualsMultiplicative
(
aCssPageRect
.
x
mCssPageRect
.
x
)
|
|
!
FuzzyEqualsMultiplicative
(
aCssPageRect
.
y
mCssPageRect
.
y
)
)
{
mScrollOffset
=
aScrollOffset
;
mScale
=
aScale
;
mCssPageRect
=
aCssPageRect
;
mPageRect
=
mCssPageRect
*
mScale
;
return
true
;
}
return
false
;
}
void
AndroidDynamicToolbarAnimator
:
:
TranslateTouchEvent
(
MultiTouchInput
&
aTouchEvent
)
{
MOZ_ASSERT
(
APZThreadUtils
:
:
IsControllerThread
(
)
)
;
if
(
mControllerToolbarHeight
>
0
)
{
aTouchEvent
.
Translate
(
ScreenPoint
(
0
.
0f
-
(
float
)
mControllerToolbarHeight
)
)
;
}
}
ScreenIntCoord
AndroidDynamicToolbarAnimator
:
:
GetFixedLayerMarginsBottom
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
return
mCompositorToolbarHeight
-
(
mCompositorSurfaceHeight
-
mCompositorCompositionSize
.
height
)
;
}
void
AndroidDynamicToolbarAnimator
:
:
NotifyControllerSnapshotFailed
(
)
{
if
(
!
APZThreadUtils
:
:
IsControllerThread
(
)
)
{
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableMethod
(
this
&
AndroidDynamicToolbarAnimator
:
:
NotifyControllerSnapshotFailed
)
)
;
return
;
}
mControllerToolbarHeight
=
0
;
mControllerState
=
eNothingPending
;
UpdateCompositorToolbarHeight
(
mControllerToolbarHeight
)
;
}
void
AndroidDynamicToolbarAnimator
:
:
CheckForResetOnNextMove
(
ScreenIntCoord
aCurrentTouch
)
{
MOZ_ASSERT
(
APZThreadUtils
:
:
IsControllerThread
(
)
)
;
if
(
mControllerResetOnNextMove
)
{
mControllerTotalDistance
=
0
;
mControllerLastDragDirection
=
0
;
mControllerStartTouch
=
mControllerPreviousTouch
=
aCurrentTouch
;
mControllerDragThresholdReached
=
false
;
mControllerResetOnNextMove
=
false
;
}
}
void
AndroidDynamicToolbarAnimator
:
:
QueueMessage
(
int32_t
aMessage
)
{
if
(
!
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
{
CompositorThreadHolder
:
:
Loop
(
)
-
>
PostTask
(
NewRunnableMethod
<
int32_t
>
(
this
&
AndroidDynamicToolbarAnimator
:
:
QueueMessage
aMessage
)
)
;
return
;
}
if
(
mRootLayerTreeId
!
=
0
)
{
PostMessage
(
aMessage
)
;
return
;
}
mCompositorQueuedMessages
.
insertBack
(
new
QueuedMessage
(
aMessage
)
)
;
}
}
}
