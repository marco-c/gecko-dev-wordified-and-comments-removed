#
include
"
HitTestingTreeNode
.
h
"
#
include
"
AsyncPanZoomController
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
layers
/
APZThreadUtils
.
h
"
#
include
"
mozilla
/
layers
/
APZUtils
.
h
"
#
include
"
mozilla
/
layers
/
AsyncCompositionManager
.
h
"
#
include
"
mozilla
/
layers
/
AsyncDragMetrics
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
UnitTransforms
.
h
"
namespace
mozilla
{
namespace
layers
{
HitTestingTreeNode
:
:
HitTestingTreeNode
(
AsyncPanZoomController
*
aApzc
bool
aIsPrimaryHolder
uint64_t
aLayersId
)
:
mApzc
(
aApzc
)
mIsPrimaryApzcHolder
(
aIsPrimaryHolder
)
mLayersId
(
aLayersId
)
mScrollViewId
(
FrameMetrics
:
:
NULL_SCROLL_ID
)
mIsScrollbarContainer
(
false
)
mFixedPosTarget
(
FrameMetrics
:
:
NULL_SCROLL_ID
)
mOverride
(
EventRegionsOverride
:
:
NoOverride
)
{
if
(
mIsPrimaryApzcHolder
)
{
MOZ_ASSERT
(
mApzc
)
;
}
MOZ_ASSERT
(
!
mApzc
|
|
mApzc
-
>
GetLayersId
(
)
=
=
mLayersId
)
;
}
void
HitTestingTreeNode
:
:
RecycleWith
(
AsyncPanZoomController
*
aApzc
uint64_t
aLayersId
)
{
MOZ_ASSERT
(
!
mIsPrimaryApzcHolder
)
;
Destroy
(
)
;
mApzc
=
aApzc
;
mLayersId
=
aLayersId
;
MOZ_ASSERT
(
!
mApzc
|
|
mApzc
-
>
GetLayersId
(
)
=
=
mLayersId
)
;
}
HitTestingTreeNode
:
:
~
HitTestingTreeNode
(
)
{
}
void
HitTestingTreeNode
:
:
Destroy
(
)
{
APZThreadUtils
:
:
AssertOnCompositorThread
(
)
;
mPrevSibling
=
nullptr
;
mLastChild
=
nullptr
;
mParent
=
nullptr
;
if
(
mApzc
)
{
if
(
mIsPrimaryApzcHolder
)
{
mApzc
-
>
Destroy
(
)
;
}
mApzc
=
nullptr
;
}
mLayersId
=
0
;
}
void
HitTestingTreeNode
:
:
SetLastChild
(
HitTestingTreeNode
*
aChild
)
{
mLastChild
=
aChild
;
if
(
aChild
)
{
aChild
-
>
mParent
=
this
;
if
(
aChild
-
>
GetApzc
(
)
)
{
AsyncPanZoomController
*
parent
=
GetNearestContainingApzc
(
)
;
MOZ_ASSERT
(
aChild
-
>
GetApzc
(
)
!
=
parent
)
;
aChild
-
>
SetApzcParent
(
parent
)
;
}
}
}
void
HitTestingTreeNode
:
:
SetScrollbarData
(
FrameMetrics
:
:
ViewID
aScrollViewId
const
ScrollThumbData
&
aThumbData
bool
aIsScrollContainer
)
{
mScrollViewId
=
aScrollViewId
;
mScrollThumbData
=
aThumbData
;
mIsScrollbarContainer
=
aIsScrollContainer
;
}
bool
HitTestingTreeNode
:
:
MatchesScrollDragMetrics
(
const
AsyncDragMetrics
&
aDragMetrics
)
const
{
return
(
(
mScrollThumbData
.
mDirection
=
=
ScrollDirection
:
:
HORIZONTAL
&
&
aDragMetrics
.
mDirection
=
=
AsyncDragMetrics
:
:
HORIZONTAL
)
|
|
(
mScrollThumbData
.
mDirection
=
=
ScrollDirection
:
:
VERTICAL
&
&
aDragMetrics
.
mDirection
=
=
AsyncDragMetrics
:
:
VERTICAL
)
)
&
&
mScrollViewId
=
=
aDragMetrics
.
mViewId
;
}
bool
HitTestingTreeNode
:
:
IsScrollbarNode
(
)
const
{
return
mIsScrollbarContainer
|
|
(
mScrollThumbData
.
mDirection
!
=
ScrollDirection
:
:
NONE
)
;
}
FrameMetrics
:
:
ViewID
HitTestingTreeNode
:
:
GetScrollTargetId
(
)
const
{
return
mScrollViewId
;
}
void
HitTestingTreeNode
:
:
SetFixedPosData
(
FrameMetrics
:
:
ViewID
aFixedPosTarget
)
{
mFixedPosTarget
=
aFixedPosTarget
;
}
FrameMetrics
:
:
ViewID
HitTestingTreeNode
:
:
GetFixedPosTarget
(
)
const
{
return
mFixedPosTarget
;
}
void
HitTestingTreeNode
:
:
SetPrevSibling
(
HitTestingTreeNode
*
aSibling
)
{
mPrevSibling
=
aSibling
;
if
(
aSibling
)
{
aSibling
-
>
mParent
=
mParent
;
if
(
aSibling
-
>
GetApzc
(
)
)
{
AsyncPanZoomController
*
parent
=
mParent
?
mParent
-
>
GetNearestContainingApzc
(
)
:
nullptr
;
aSibling
-
>
SetApzcParent
(
parent
)
;
}
}
}
void
HitTestingTreeNode
:
:
MakeRoot
(
)
{
mParent
=
nullptr
;
if
(
GetApzc
(
)
)
{
SetApzcParent
(
nullptr
)
;
}
}
HitTestingTreeNode
*
HitTestingTreeNode
:
:
GetFirstChild
(
)
const
{
HitTestingTreeNode
*
child
=
GetLastChild
(
)
;
while
(
child
&
&
child
-
>
GetPrevSibling
(
)
)
{
child
=
child
-
>
GetPrevSibling
(
)
;
}
return
child
;
}
HitTestingTreeNode
*
HitTestingTreeNode
:
:
GetLastChild
(
)
const
{
return
mLastChild
;
}
HitTestingTreeNode
*
HitTestingTreeNode
:
:
GetPrevSibling
(
)
const
{
return
mPrevSibling
;
}
HitTestingTreeNode
*
HitTestingTreeNode
:
:
GetParent
(
)
const
{
return
mParent
;
}
AsyncPanZoomController
*
HitTestingTreeNode
:
:
GetApzc
(
)
const
{
return
mApzc
;
}
AsyncPanZoomController
*
HitTestingTreeNode
:
:
GetNearestContainingApzc
(
)
const
{
for
(
const
HitTestingTreeNode
*
n
=
this
;
n
;
n
=
n
-
>
GetParent
(
)
)
{
if
(
n
-
>
GetApzc
(
)
)
{
return
n
-
>
GetApzc
(
)
;
}
}
return
nullptr
;
}
bool
HitTestingTreeNode
:
:
IsPrimaryHolder
(
)
const
{
return
mIsPrimaryApzcHolder
;
}
uint64_t
HitTestingTreeNode
:
:
GetLayersId
(
)
const
{
return
mLayersId
;
}
void
HitTestingTreeNode
:
:
SetHitTestData
(
const
EventRegions
&
aRegions
const
CSSTransformMatrix
&
aTransform
const
Maybe
<
ParentLayerIntRegion
>
&
aClipRegion
const
EventRegionsOverride
&
aOverride
)
{
mEventRegions
=
aRegions
;
mTransform
=
aTransform
;
mClipRegion
=
aClipRegion
;
mOverride
=
aOverride
;
}
bool
HitTestingTreeNode
:
:
IsOutsideClip
(
const
ParentLayerPoint
&
aPoint
)
const
{
return
(
mClipRegion
.
isSome
(
)
&
&
!
mClipRegion
-
>
Contains
(
aPoint
.
x
aPoint
.
y
)
)
;
}
Maybe
<
LayerPoint
>
HitTestingTreeNode
:
:
Untransform
(
const
ParentLayerPoint
&
aPoint
)
const
{
LayerToParentLayerMatrix4x4
transform
=
mTransform
*
CompleteAsyncTransform
(
mApzc
?
mApzc
-
>
GetCurrentAsyncTransformWithOverscroll
(
AsyncPanZoomController
:
:
NORMAL
)
:
AsyncTransformComponentMatrix
(
)
)
;
Maybe
<
ParentLayerToLayerMatrix4x4
>
inverse
=
transform
.
MaybeInverse
(
)
;
if
(
inverse
)
{
return
UntransformBy
(
inverse
.
ref
(
)
aPoint
)
;
}
return
Nothing
(
)
;
}
HitTestResult
HitTestingTreeNode
:
:
HitTest
(
const
ParentLayerPoint
&
aPoint
)
const
{
MOZ_ASSERT
(
!
IsOutsideClip
(
aPoint
)
)
;
if
(
mOverride
&
EventRegionsOverride
:
:
ForceEmptyHitRegion
)
{
return
HitTestResult
:
:
HitNothing
;
}
Maybe
<
LayerPoint
>
pointInLayerPixels
=
Untransform
(
aPoint
)
;
if
(
!
pointInLayerPixels
)
{
return
HitTestResult
:
:
HitNothing
;
}
auto
point
=
LayerIntPoint
:
:
Round
(
pointInLayerPixels
.
ref
(
)
)
;
if
(
!
mEventRegions
.
mHitRegion
.
Contains
(
point
.
x
point
.
y
)
)
{
return
HitTestResult
:
:
HitNothing
;
}
if
(
(
mOverride
&
EventRegionsOverride
:
:
ForceDispatchToContent
)
|
|
mEventRegions
.
mDispatchToContentHitRegion
.
Contains
(
point
.
x
point
.
y
)
)
{
return
HitTestResult
:
:
HitDispatchToContentRegion
;
}
if
(
gfxPrefs
:
:
TouchActionEnabled
(
)
)
{
if
(
mEventRegions
.
mNoActionRegion
.
Contains
(
point
.
x
point
.
y
)
)
{
return
HitTestResult
:
:
HitLayerTouchActionNone
;
}
bool
panX
=
mEventRegions
.
mHorizontalPanRegion
.
Contains
(
point
.
x
point
.
y
)
;
bool
panY
=
mEventRegions
.
mVerticalPanRegion
.
Contains
(
point
.
x
point
.
y
)
;
if
(
panX
&
&
panY
)
{
return
HitTestResult
:
:
HitLayerTouchActionPanXY
;
}
else
if
(
panX
)
{
return
HitTestResult
:
:
HitLayerTouchActionPanX
;
}
else
if
(
panY
)
{
return
HitTestResult
:
:
HitLayerTouchActionPanY
;
}
}
return
HitTestResult
:
:
HitLayer
;
}
EventRegionsOverride
HitTestingTreeNode
:
:
GetEventRegionsOverride
(
)
const
{
return
mOverride
;
}
void
HitTestingTreeNode
:
:
Dump
(
const
char
*
aPrefix
)
const
{
if
(
mPrevSibling
)
{
mPrevSibling
-
>
Dump
(
aPrefix
)
;
}
printf_stderr
(
"
%
sHitTestingTreeNode
(
%
p
)
APZC
(
%
p
)
g
=
(
%
s
)
%
s
%
s
%
sr
=
(
%
s
)
t
=
(
%
s
)
c
=
(
%
s
)
\
n
"
aPrefix
this
mApzc
.
get
(
)
mApzc
?
Stringify
(
mApzc
-
>
GetGuid
(
)
)
.
c_str
(
)
:
nsPrintfCString
(
"
l
=
%
"
PRIu64
mLayersId
)
.
get
(
)
(
mOverride
&
EventRegionsOverride
:
:
ForceDispatchToContent
)
?
"
fdtc
"
:
"
"
(
mOverride
&
EventRegionsOverride
:
:
ForceEmptyHitRegion
)
?
"
fehr
"
:
"
"
(
mFixedPosTarget
!
=
FrameMetrics
:
:
NULL_SCROLL_ID
)
?
nsPrintfCString
(
"
fixed
=
%
"
PRIu64
"
"
mFixedPosTarget
)
.
get
(
)
:
"
"
Stringify
(
mEventRegions
)
.
c_str
(
)
Stringify
(
mTransform
)
.
c_str
(
)
mClipRegion
?
Stringify
(
mClipRegion
.
ref
(
)
)
.
c_str
(
)
:
"
none
"
)
;
if
(
mLastChild
)
{
mLastChild
-
>
Dump
(
nsPrintfCString
(
"
%
s
"
aPrefix
)
.
get
(
)
)
;
}
}
void
HitTestingTreeNode
:
:
SetApzcParent
(
AsyncPanZoomController
*
aParent
)
{
MOZ_ASSERT
(
GetApzc
(
)
!
=
nullptr
)
;
if
(
IsPrimaryHolder
(
)
)
{
GetApzc
(
)
-
>
SetParent
(
aParent
)
;
}
else
{
MOZ_ASSERT
(
GetApzc
(
)
-
>
GetParent
(
)
=
=
aParent
)
;
}
}
}
}
