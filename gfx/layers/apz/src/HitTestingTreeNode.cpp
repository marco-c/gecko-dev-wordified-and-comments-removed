#
include
"
HitTestingTreeNode
.
h
"
#
include
"
AsyncPanZoomController
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
layers
/
APZUtils
.
h
"
#
include
"
mozilla
/
layers
/
AsyncCompositionManager
.
h
"
#
include
"
mozilla
/
layers
/
AsyncDragMetrics
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
UnitTransforms
.
h
"
namespace
mozilla
{
namespace
layers
{
using
gfx
:
:
CompositorHitTestInfo
;
HitTestingTreeNode
:
:
HitTestingTreeNode
(
AsyncPanZoomController
*
aApzc
bool
aIsPrimaryHolder
LayersId
aLayersId
)
:
mApzc
(
aApzc
)
mIsPrimaryApzcHolder
(
aIsPrimaryHolder
)
mLayersId
(
aLayersId
)
mScrollbarAnimationId
(
0
)
mFixedPosTarget
(
FrameMetrics
:
:
NULL_SCROLL_ID
)
mIsBackfaceHidden
(
false
)
mOverride
(
EventRegionsOverride
:
:
NoOverride
)
{
if
(
mIsPrimaryApzcHolder
)
{
MOZ_ASSERT
(
mApzc
)
;
}
MOZ_ASSERT
(
!
mApzc
|
|
mApzc
-
>
GetLayersId
(
)
=
=
mLayersId
)
;
}
void
HitTestingTreeNode
:
:
RecycleWith
(
AsyncPanZoomController
*
aApzc
LayersId
aLayersId
)
{
MOZ_ASSERT
(
!
mIsPrimaryApzcHolder
)
;
Destroy
(
)
;
mApzc
=
aApzc
;
mLayersId
=
aLayersId
;
MOZ_ASSERT
(
!
mApzc
|
|
mApzc
-
>
GetLayersId
(
)
=
=
mLayersId
)
;
}
HitTestingTreeNode
:
:
~
HitTestingTreeNode
(
)
=
default
;
void
HitTestingTreeNode
:
:
Destroy
(
)
{
mPrevSibling
=
nullptr
;
mLastChild
=
nullptr
;
mParent
=
nullptr
;
if
(
mApzc
)
{
if
(
mIsPrimaryApzcHolder
)
{
mApzc
-
>
Destroy
(
)
;
}
mApzc
=
nullptr
;
}
mLayersId
=
LayersId
{
0
}
;
}
void
HitTestingTreeNode
:
:
SetLastChild
(
HitTestingTreeNode
*
aChild
)
{
mLastChild
=
aChild
;
if
(
aChild
)
{
aChild
-
>
mParent
=
this
;
if
(
aChild
-
>
GetApzc
(
)
)
{
AsyncPanZoomController
*
parent
=
GetNearestContainingApzc
(
)
;
MOZ_ASSERT
(
aChild
-
>
GetApzc
(
)
!
=
parent
)
;
aChild
-
>
SetApzcParent
(
parent
)
;
}
}
}
void
HitTestingTreeNode
:
:
SetScrollbarData
(
const
uint64_t
&
aScrollbarAnimationId
const
ScrollbarData
&
aScrollbarData
)
{
mScrollbarAnimationId
=
aScrollbarAnimationId
;
mScrollbarData
=
aScrollbarData
;
}
bool
HitTestingTreeNode
:
:
MatchesScrollDragMetrics
(
const
AsyncDragMetrics
&
aDragMetrics
)
const
{
return
IsScrollThumbNode
(
)
&
&
mScrollbarData
.
mDirection
=
=
aDragMetrics
.
mDirection
&
&
mScrollbarData
.
mTargetViewId
=
=
aDragMetrics
.
mViewId
;
}
bool
HitTestingTreeNode
:
:
IsScrollThumbNode
(
)
const
{
return
mScrollbarData
.
mScrollbarLayerType
=
=
layers
:
:
ScrollbarLayerType
:
:
Thumb
;
}
bool
HitTestingTreeNode
:
:
IsScrollbarNode
(
)
const
{
return
mScrollbarData
.
mScrollbarLayerType
!
=
layers
:
:
ScrollbarLayerType
:
:
None
;
}
ScrollDirection
HitTestingTreeNode
:
:
GetScrollbarDirection
(
)
const
{
MOZ_ASSERT
(
IsScrollbarNode
(
)
)
;
MOZ_ASSERT
(
mScrollbarData
.
mDirection
.
isSome
(
)
)
;
return
*
mScrollbarData
.
mDirection
;
}
FrameMetrics
:
:
ViewID
HitTestingTreeNode
:
:
GetScrollTargetId
(
)
const
{
return
mScrollbarData
.
mTargetViewId
;
}
const
uint64_t
&
HitTestingTreeNode
:
:
GetScrollbarAnimationId
(
)
const
{
return
mScrollbarAnimationId
;
}
const
ScrollbarData
&
HitTestingTreeNode
:
:
GetScrollbarData
(
)
const
{
return
mScrollbarData
;
}
void
HitTestingTreeNode
:
:
SetFixedPosData
(
FrameMetrics
:
:
ViewID
aFixedPosTarget
)
{
mFixedPosTarget
=
aFixedPosTarget
;
}
FrameMetrics
:
:
ViewID
HitTestingTreeNode
:
:
GetFixedPosTarget
(
)
const
{
return
mFixedPosTarget
;
}
void
HitTestingTreeNode
:
:
SetPrevSibling
(
HitTestingTreeNode
*
aSibling
)
{
mPrevSibling
=
aSibling
;
if
(
aSibling
)
{
aSibling
-
>
mParent
=
mParent
;
if
(
aSibling
-
>
GetApzc
(
)
)
{
AsyncPanZoomController
*
parent
=
mParent
?
mParent
-
>
GetNearestContainingApzc
(
)
:
nullptr
;
aSibling
-
>
SetApzcParent
(
parent
)
;
}
}
}
void
HitTestingTreeNode
:
:
MakeRoot
(
)
{
mParent
=
nullptr
;
if
(
GetApzc
(
)
)
{
SetApzcParent
(
nullptr
)
;
}
}
HitTestingTreeNode
*
HitTestingTreeNode
:
:
GetFirstChild
(
)
const
{
HitTestingTreeNode
*
child
=
GetLastChild
(
)
;
while
(
child
&
&
child
-
>
GetPrevSibling
(
)
)
{
child
=
child
-
>
GetPrevSibling
(
)
;
}
return
child
;
}
HitTestingTreeNode
*
HitTestingTreeNode
:
:
GetLastChild
(
)
const
{
return
mLastChild
;
}
HitTestingTreeNode
*
HitTestingTreeNode
:
:
GetPrevSibling
(
)
const
{
return
mPrevSibling
;
}
HitTestingTreeNode
*
HitTestingTreeNode
:
:
GetParent
(
)
const
{
return
mParent
;
}
bool
HitTestingTreeNode
:
:
IsAncestorOf
(
const
HitTestingTreeNode
*
aOther
)
const
{
for
(
const
HitTestingTreeNode
*
cur
=
aOther
;
cur
;
cur
=
cur
-
>
GetParent
(
)
)
{
if
(
cur
=
=
this
)
{
return
true
;
}
}
return
false
;
}
AsyncPanZoomController
*
HitTestingTreeNode
:
:
GetApzc
(
)
const
{
return
mApzc
;
}
AsyncPanZoomController
*
HitTestingTreeNode
:
:
GetNearestContainingApzc
(
)
const
{
for
(
const
HitTestingTreeNode
*
n
=
this
;
n
;
n
=
n
-
>
GetParent
(
)
)
{
if
(
n
-
>
GetApzc
(
)
)
{
return
n
-
>
GetApzc
(
)
;
}
}
return
nullptr
;
}
bool
HitTestingTreeNode
:
:
IsPrimaryHolder
(
)
const
{
return
mIsPrimaryApzcHolder
;
}
LayersId
HitTestingTreeNode
:
:
GetLayersId
(
)
const
{
return
mLayersId
;
}
void
HitTestingTreeNode
:
:
SetHitTestData
(
const
EventRegions
&
aRegions
const
LayerIntRegion
&
aVisibleRegion
const
CSSTransformMatrix
&
aTransform
const
Maybe
<
ParentLayerIntRegion
>
&
aClipRegion
const
EventRegionsOverride
&
aOverride
bool
aIsBackfaceHidden
)
{
mEventRegions
=
aRegions
;
mVisibleRegion
=
aVisibleRegion
;
mTransform
=
aTransform
;
mClipRegion
=
aClipRegion
;
mOverride
=
aOverride
;
mIsBackfaceHidden
=
aIsBackfaceHidden
;
}
bool
HitTestingTreeNode
:
:
IsOutsideClip
(
const
ParentLayerPoint
&
aPoint
)
const
{
return
(
mClipRegion
.
isSome
(
)
&
&
!
mClipRegion
-
>
Contains
(
aPoint
.
x
aPoint
.
y
)
)
;
}
Maybe
<
LayerPoint
>
HitTestingTreeNode
:
:
Untransform
(
const
ParentLayerPoint
&
aPoint
const
LayerToParentLayerMatrix4x4
&
aTransform
)
const
{
Maybe
<
ParentLayerToLayerMatrix4x4
>
inverse
=
aTransform
.
MaybeInverse
(
)
;
if
(
inverse
)
{
return
UntransformBy
(
inverse
.
ref
(
)
aPoint
)
;
}
return
Nothing
(
)
;
}
CompositorHitTestInfo
HitTestingTreeNode
:
:
HitTest
(
const
LayerPoint
&
aPoint
)
const
{
CompositorHitTestInfo
result
=
CompositorHitTestInfo
:
:
eInvisibleToHitTest
;
if
(
mOverride
&
EventRegionsOverride
:
:
ForceEmptyHitRegion
)
{
return
result
;
}
auto
point
=
LayerIntPoint
:
:
Round
(
aPoint
)
;
if
(
mIsBackfaceHidden
)
{
return
result
;
}
if
(
!
mEventRegions
.
mHitRegion
.
Contains
(
point
.
x
point
.
y
)
)
{
return
result
;
}
result
|
=
CompositorHitTestInfo
:
:
eVisibleToHitTest
;
if
(
(
mOverride
&
EventRegionsOverride
:
:
ForceDispatchToContent
)
|
|
mEventRegions
.
mDispatchToContentHitRegion
.
Contains
(
point
.
x
point
.
y
)
)
{
result
|
=
CompositorHitTestInfo
:
:
eDispatchToContent
;
if
(
mEventRegions
.
mDTCRequiresTargetConfirmation
)
{
result
|
=
CompositorHitTestInfo
:
:
eRequiresTargetConfirmation
;
}
}
else
if
(
gfxPrefs
:
:
TouchActionEnabled
(
)
)
{
if
(
mEventRegions
.
mNoActionRegion
.
Contains
(
point
.
x
point
.
y
)
)
{
result
|
=
CompositorHitTestInfo
:
:
eTouchActionMask
;
}
else
{
bool
panX
=
mEventRegions
.
mHorizontalPanRegion
.
Contains
(
point
.
x
point
.
y
)
;
bool
panY
=
mEventRegions
.
mVerticalPanRegion
.
Contains
(
point
.
x
point
.
y
)
;
if
(
panX
&
&
panY
)
{
result
|
=
CompositorHitTestInfo
:
:
eTouchActionDoubleTapZoomDisabled
|
CompositorHitTestInfo
:
:
eTouchActionPinchZoomDisabled
;
}
else
if
(
panX
)
{
result
|
=
CompositorHitTestInfo
:
:
eTouchActionPanYDisabled
|
CompositorHitTestInfo
:
:
eTouchActionPinchZoomDisabled
|
CompositorHitTestInfo
:
:
eTouchActionDoubleTapZoomDisabled
;
}
else
if
(
panY
)
{
result
|
=
CompositorHitTestInfo
:
:
eTouchActionPanXDisabled
|
CompositorHitTestInfo
:
:
eTouchActionPinchZoomDisabled
|
CompositorHitTestInfo
:
:
eTouchActionDoubleTapZoomDisabled
;
}
}
}
return
result
;
}
EventRegionsOverride
HitTestingTreeNode
:
:
GetEventRegionsOverride
(
)
const
{
return
mOverride
;
}
const
CSSTransformMatrix
&
HitTestingTreeNode
:
:
GetTransform
(
)
const
{
return
mTransform
;
}
const
LayerIntRegion
&
HitTestingTreeNode
:
:
GetVisibleRegion
(
)
const
{
return
mVisibleRegion
;
}
void
HitTestingTreeNode
:
:
Dump
(
const
char
*
aPrefix
)
const
{
if
(
mPrevSibling
)
{
mPrevSibling
-
>
Dump
(
aPrefix
)
;
}
printf_stderr
(
"
%
sHitTestingTreeNode
(
%
p
)
APZC
(
%
p
)
g
=
(
%
s
)
%
s
%
s
%
sr
=
(
%
s
)
t
=
(
%
s
)
c
=
(
%
s
)
%
s
%
s
\
n
"
aPrefix
this
mApzc
.
get
(
)
mApzc
?
Stringify
(
mApzc
-
>
GetGuid
(
)
)
.
c_str
(
)
:
nsPrintfCString
(
"
l
=
0x
%
"
PRIx64
uint64_t
(
mLayersId
)
)
.
get
(
)
(
mOverride
&
EventRegionsOverride
:
:
ForceDispatchToContent
)
?
"
fdtc
"
:
"
"
(
mOverride
&
EventRegionsOverride
:
:
ForceEmptyHitRegion
)
?
"
fehr
"
:
"
"
(
mFixedPosTarget
!
=
FrameMetrics
:
:
NULL_SCROLL_ID
)
?
nsPrintfCString
(
"
fixed
=
%
"
PRIu64
"
"
mFixedPosTarget
)
.
get
(
)
:
"
"
Stringify
(
mEventRegions
)
.
c_str
(
)
Stringify
(
mTransform
)
.
c_str
(
)
mClipRegion
?
Stringify
(
mClipRegion
.
ref
(
)
)
.
c_str
(
)
:
"
none
"
mScrollbarData
.
mDirection
.
isSome
(
)
?
"
scrollbar
"
:
"
"
IsScrollThumbNode
(
)
?
"
scrollthumb
"
:
"
"
)
;
if
(
mLastChild
)
{
mLastChild
-
>
Dump
(
nsPrintfCString
(
"
%
s
"
aPrefix
)
.
get
(
)
)
;
}
}
void
HitTestingTreeNode
:
:
SetApzcParent
(
AsyncPanZoomController
*
aParent
)
{
MOZ_ASSERT
(
GetApzc
(
)
!
=
nullptr
)
;
if
(
IsPrimaryHolder
(
)
)
{
GetApzc
(
)
-
>
SetParent
(
aParent
)
;
}
else
{
MOZ_ASSERT
(
GetApzc
(
)
-
>
GetParent
(
)
=
=
aParent
)
;
}
}
}
}
