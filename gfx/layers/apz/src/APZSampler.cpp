#
include
"
mozilla
/
layers
/
APZSampler
.
h
"
#
include
"
APZCTreeManager
.
h
"
#
include
"
AsyncPanZoomController
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
layers
/
APZThreadUtils
.
h
"
#
include
"
mozilla
/
layers
/
APZUtils
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
layers
/
LayerMetricsWrapper
.
h
"
#
include
"
mozilla
/
layers
/
SynchronousTask
.
h
"
#
include
"
TreeTraversal
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderAPI
.
h
"
namespace
mozilla
{
namespace
layers
{
StaticMutex
APZSampler
:
:
sWindowIdLock
;
StaticAutoPtr
<
std
:
:
unordered_map
<
uint64_t
RefPtr
<
APZSampler
>
>
>
APZSampler
:
:
sWindowIdMap
;
APZSampler
:
:
APZSampler
(
const
RefPtr
<
APZCTreeManager
>
&
aApz
bool
aIsUsingWebRender
)
:
mApz
(
aApz
)
mIsUsingWebRender
(
aIsUsingWebRender
)
mThreadIdLock
(
"
APZSampler
:
:
mThreadIdLock
"
)
mSampleTimeLock
(
"
APZSampler
:
:
mSampleTimeLock
"
)
{
MOZ_ASSERT
(
aApz
)
;
mApz
-
>
SetSampler
(
this
)
;
}
APZSampler
:
:
~
APZSampler
(
)
{
mApz
-
>
SetSampler
(
nullptr
)
;
}
void
APZSampler
:
:
Destroy
(
)
{
StaticMutexAutoLock
lock
(
sWindowIdLock
)
;
if
(
mWindowId
)
{
MOZ_ASSERT
(
sWindowIdMap
)
;
sWindowIdMap
-
>
erase
(
wr
:
:
AsUint64
(
*
mWindowId
)
)
;
}
}
void
APZSampler
:
:
SetWebRenderWindowId
(
const
wr
:
:
WindowId
&
aWindowId
)
{
StaticMutexAutoLock
lock
(
sWindowIdLock
)
;
MOZ_ASSERT
(
!
mWindowId
)
;
mWindowId
=
Some
(
aWindowId
)
;
if
(
!
sWindowIdMap
)
{
sWindowIdMap
=
new
std
:
:
unordered_map
<
uint64_t
RefPtr
<
APZSampler
>
>
(
)
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
APZSampler
:
:
ClearOnShutdown
"
[
]
{
ClearOnShutdown
(
&
sWindowIdMap
)
;
}
)
)
;
}
(
*
sWindowIdMap
)
[
wr
:
:
AsUint64
(
aWindowId
)
]
=
this
;
}
void
APZSampler
:
:
SetSamplerThread
(
const
wr
:
:
WrWindowId
&
aWindowId
)
{
if
(
RefPtr
<
APZSampler
>
sampler
=
GetSampler
(
aWindowId
)
)
{
MutexAutoLock
lock
(
sampler
-
>
mThreadIdLock
)
;
sampler
-
>
mSamplerThreadId
=
Some
(
PlatformThread
:
:
CurrentId
(
)
)
;
}
}
void
APZSampler
:
:
SampleForWebRender
(
const
wr
:
:
WrWindowId
&
aWindowId
const
uint64_t
*
aGeneratedFrameId
wr
:
:
Transaction
*
aTransaction
)
{
if
(
RefPtr
<
APZSampler
>
sampler
=
GetSampler
(
aWindowId
)
)
{
wr
:
:
TransactionWrapper
txn
(
aTransaction
)
;
Maybe
<
VsyncId
>
vsyncId
=
aGeneratedFrameId
?
Some
(
VsyncId
{
*
aGeneratedFrameId
}
)
:
Nothing
(
)
;
sampler
-
>
SampleForWebRender
(
vsyncId
txn
)
;
}
}
void
APZSampler
:
:
SetSampleTime
(
const
SampleTime
&
aSampleTime
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
MutexAutoLock
lock
(
mSampleTimeLock
)
;
mSampleTime
=
aSampleTime
;
}
void
APZSampler
:
:
SampleForWebRender
(
const
Maybe
<
VsyncId
>
&
aVsyncId
wr
:
:
TransactionWrapper
&
aTxn
)
{
AssertOnSamplerThread
(
)
;
SampleTime
sampleTime
;
{
MutexAutoLock
lock
(
mSampleTimeLock
)
;
SampleTime
now
=
SampleTime
:
:
FromNow
(
)
;
sampleTime
=
(
mSampleTime
.
IsNull
(
)
|
|
(
mSampleTime
.
Type
(
)
!
=
SampleTime
:
:
eTest
&
&
mSampleTime
<
now
)
)
?
now
:
mSampleTime
;
}
mApz
-
>
SampleForWebRender
(
aVsyncId
aTxn
sampleTime
)
;
}
bool
APZSampler
:
:
AdvanceAnimations
(
const
SampleTime
&
aSampleTime
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
AssertOnSamplerThread
(
)
;
return
mApz
-
>
AdvanceAnimations
(
aSampleTime
)
;
}
LayerToParentLayerMatrix4x4
APZSampler
:
:
ComputeTransformForScrollThumb
(
const
LayerToParentLayerMatrix4x4
&
aCurrentTransform
const
LayerMetricsWrapper
&
aContent
const
ScrollbarData
&
aThumbData
bool
aScrollbarIsDescendant
AsyncTransformComponentMatrix
*
aOutClipTransform
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
AssertOnSamplerThread
(
)
;
return
mApz
-
>
ComputeTransformForScrollThumb
(
aCurrentTransform
aContent
.
GetTransform
(
)
aContent
.
GetApzc
(
)
aContent
.
Metrics
(
)
aThumbData
aScrollbarIsDescendant
aOutClipTransform
)
;
}
CSSRect
APZSampler
:
:
GetCurrentAsyncLayoutViewport
(
const
LayerMetricsWrapper
&
aLayer
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
AssertOnSamplerThread
(
)
;
MOZ_ASSERT
(
aLayer
.
GetApzc
(
)
)
;
return
aLayer
.
GetApzc
(
)
-
>
GetCurrentAsyncLayoutViewport
(
AsyncPanZoomController
:
:
eForCompositing
)
;
}
ParentLayerPoint
APZSampler
:
:
GetCurrentAsyncScrollOffset
(
const
LayerMetricsWrapper
&
aLayer
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
AssertOnSamplerThread
(
)
;
MOZ_ASSERT
(
aLayer
.
GetApzc
(
)
)
;
return
aLayer
.
GetApzc
(
)
-
>
GetCurrentAsyncScrollOffset
(
AsyncPanZoomController
:
:
eForCompositing
)
;
}
AsyncTransform
APZSampler
:
:
GetCurrentAsyncTransform
(
const
LayerMetricsWrapper
&
aLayer
AsyncTransformComponents
aComponents
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
AssertOnSamplerThread
(
)
;
MOZ_ASSERT
(
aLayer
.
GetApzc
(
)
)
;
return
aLayer
.
GetApzc
(
)
-
>
GetCurrentAsyncTransform
(
AsyncPanZoomController
:
:
eForCompositing
aComponents
)
;
}
AsyncTransform
APZSampler
:
:
GetCurrentAsyncTransform
(
const
LayersId
&
aLayersId
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
AsyncTransformComponents
aComponents
)
const
{
MOZ_ASSERT
(
!
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
AssertOnSamplerThread
(
)
;
RefPtr
<
AsyncPanZoomController
>
apzc
=
mApz
-
>
GetTargetAPZC
(
aLayersId
aScrollId
)
;
if
(
!
apzc
)
{
return
AsyncTransform
{
}
;
}
return
apzc
-
>
GetCurrentAsyncTransform
(
AsyncPanZoomController
:
:
eForCompositing
aComponents
)
;
}
Maybe
<
CompositionPayload
>
APZSampler
:
:
NotifyScrollSampling
(
const
LayerMetricsWrapper
&
aLayer
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
AssertOnSamplerThread
(
)
;
MOZ_ASSERT
(
aLayer
.
GetApzc
(
)
)
;
return
aLayer
.
GetApzc
(
)
-
>
NotifyScrollSampling
(
)
;
}
AsyncTransformComponentMatrix
APZSampler
:
:
GetOverscrollTransform
(
const
LayerMetricsWrapper
&
aLayer
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
AssertOnSamplerThread
(
)
;
MOZ_ASSERT
(
aLayer
.
GetApzc
(
)
)
;
return
aLayer
.
GetApzc
(
)
-
>
GetOverscrollTransform
(
AsyncPanZoomController
:
:
eForCompositing
)
;
}
AsyncTransformComponentMatrix
APZSampler
:
:
GetCurrentAsyncTransformWithOverscroll
(
const
LayerMetricsWrapper
&
aLayer
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
AssertOnSamplerThread
(
)
;
MOZ_ASSERT
(
aLayer
.
GetApzc
(
)
)
;
return
aLayer
.
GetApzc
(
)
-
>
GetCurrentAsyncTransformWithOverscroll
(
AsyncPanZoomController
:
:
eForCompositing
)
;
}
void
APZSampler
:
:
MarkAsyncTransformAppliedToContent
(
const
LayerMetricsWrapper
&
aLayer
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
AssertOnSamplerThread
(
)
;
MOZ_ASSERT
(
aLayer
.
GetApzc
(
)
)
;
aLayer
.
GetApzc
(
)
-
>
MarkAsyncTransformAppliedToContent
(
)
;
}
bool
APZSampler
:
:
HasUnusedAsyncTransform
(
const
LayerMetricsWrapper
&
aLayer
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
AssertOnSamplerThread
(
)
;
AsyncPanZoomController
*
apzc
=
aLayer
.
GetApzc
(
)
;
return
apzc
&
&
!
apzc
-
>
GetAsyncTransformAppliedToContent
(
)
&
&
!
AsyncTransformComponentMatrix
(
apzc
-
>
GetCurrentAsyncTransform
(
AsyncPanZoomController
:
:
eForCompositing
)
)
.
IsIdentity
(
)
;
}
ScrollableLayerGuid
APZSampler
:
:
GetGuid
(
const
LayerMetricsWrapper
&
aLayer
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
AssertOnSamplerThread
(
)
;
MOZ_ASSERT
(
aLayer
.
GetApzc
(
)
)
;
return
aLayer
.
GetApzc
(
)
-
>
GetGuid
(
)
;
}
GeckoViewMetrics
APZSampler
:
:
GetGeckoViewMetrics
(
const
LayerMetricsWrapper
&
aLayer
)
const
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
AssertOnSamplerThread
(
)
;
MOZ_ASSERT
(
aLayer
.
GetApzc
(
)
)
;
return
aLayer
.
GetApzc
(
)
-
>
GetGeckoViewMetrics
(
)
;
}
ScreenMargin
APZSampler
:
:
GetGeckoFixedLayerMargins
(
)
const
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
AssertOnSamplerThread
(
)
;
return
mApz
-
>
GetGeckoFixedLayerMargins
(
)
;
}
ParentLayerRect
APZSampler
:
:
GetCompositionBounds
(
const
LayersId
&
aLayersId
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
)
const
{
AssertOnSamplerThread
(
)
;
RefPtr
<
AsyncPanZoomController
>
apzc
=
mApz
-
>
GetTargetAPZC
(
aLayersId
aScrollId
)
;
if
(
!
apzc
)
{
return
ParentLayerRect
(
)
;
}
return
apzc
-
>
GetCompositionBounds
(
)
;
}
void
APZSampler
:
:
AssertOnSamplerThread
(
)
const
{
if
(
APZThreadUtils
:
:
GetThreadAssertionsEnabled
(
)
)
{
MOZ_ASSERT
(
IsSamplerThread
(
)
)
;
}
}
bool
APZSampler
:
:
IsSamplerThread
(
)
const
{
if
(
mIsUsingWebRender
)
{
MutexAutoLock
lock
(
mThreadIdLock
)
;
return
mSamplerThreadId
&
&
PlatformThread
:
:
CurrentId
(
)
=
=
*
mSamplerThreadId
;
}
return
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
;
}
already_AddRefed
<
APZSampler
>
APZSampler
:
:
GetSampler
(
const
wr
:
:
WrWindowId
&
aWindowId
)
{
RefPtr
<
APZSampler
>
sampler
;
StaticMutexAutoLock
lock
(
sWindowIdLock
)
;
if
(
sWindowIdMap
)
{
auto
it
=
sWindowIdMap
-
>
find
(
wr
:
:
AsUint64
(
aWindowId
)
)
;
if
(
it
!
=
sWindowIdMap
-
>
end
(
)
)
{
sampler
=
it
-
>
second
;
}
}
return
sampler
.
forget
(
)
;
}
}
}
void
apz_register_sampler
(
mozilla
:
:
wr
:
:
WrWindowId
aWindowId
)
{
mozilla
:
:
layers
:
:
APZSampler
:
:
SetSamplerThread
(
aWindowId
)
;
}
void
apz_sample_transforms
(
mozilla
:
:
wr
:
:
WrWindowId
aWindowId
const
uint64_t
*
aGeneratedFrameId
mozilla
:
:
wr
:
:
Transaction
*
aTransaction
)
{
mozilla
:
:
layers
:
:
APZSampler
:
:
SampleForWebRender
(
aWindowId
aGeneratedFrameId
aTransaction
)
;
}
void
apz_deregister_sampler
(
mozilla
:
:
wr
:
:
WrWindowId
aWindowId
)
{
}
