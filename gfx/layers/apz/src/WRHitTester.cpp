#
include
"
WRHitTester
.
h
"
#
include
"
AsyncPanZoomController
.
h
"
#
include
"
APZCTreeManager
.
h
"
#
include
"
TreeTraversal
.
h
"
#
include
"
mozilla
/
gfx
/
CompositorHitTestInfo
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderAPI
.
h
"
#
define
APZCTM_LOG
(
.
.
.
)
\
MOZ_LOG
(
APZCTreeManager
:
:
sLog
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
namespace
mozilla
{
namespace
layers
{
using
mozilla
:
:
gfx
:
:
CompositorHitTestFlags
;
using
mozilla
:
:
gfx
:
:
CompositorHitTestInvisibleToHit
;
IAPZHitTester
:
:
HitTestResult
WRHitTester
:
:
GetAPZCAtPoint
(
const
ScreenPoint
&
aHitTestPoint
const
RecursiveMutexAutoLock
&
aProofOfTreeLock
)
{
HitTestResult
hit
;
RefPtr
<
wr
:
:
WebRenderAPI
>
wr
=
mTreeManager
-
>
GetWebRenderAPI
(
)
;
if
(
!
wr
)
{
hit
.
mTargetApzc
=
FindRootApzcForLayersId
(
GetRootLayersId
(
)
)
;
hit
.
mHitResult
=
CompositorHitTestFlags
:
:
eVisibleToHitTest
;
return
hit
;
}
APZCTM_LOG
(
"
Hit
-
testing
point
%
s
with
WR
\
n
"
ToString
(
aHitTestPoint
)
.
c_str
(
)
)
;
std
:
:
vector
<
wr
:
:
WrHitResult
>
results
=
wr
-
>
HitTest
(
wr
:
:
ToWorldPoint
(
aHitTestPoint
)
)
;
Maybe
<
wr
:
:
WrHitResult
>
chosenResult
;
for
(
const
wr
:
:
WrHitResult
&
result
:
results
)
{
ScrollableLayerGuid
guid
{
result
.
mLayersId
0
result
.
mScrollId
}
;
APZCTM_LOG
(
"
Examining
result
with
guid
%
s
hit
info
0x
%
x
.
.
.
"
ToString
(
guid
)
.
c_str
(
)
result
.
mHitInfo
.
serialize
(
)
)
;
if
(
result
.
mHitInfo
=
=
CompositorHitTestInvisibleToHit
)
{
APZCTM_LOG
(
"
skipping
due
to
invisibility
.
\
n
"
)
;
continue
;
}
RefPtr
<
HitTestingTreeNode
>
node
=
GetTargetNode
(
guid
&
ScrollableLayerGuid
:
:
EqualsIgnoringPresShell
)
;
if
(
!
node
)
{
APZCTM_LOG
(
"
no
corresponding
node
found
falling
back
to
root
.
\
n
"
)
;
MOZ_ASSERT
(
result
.
mScrollId
=
=
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
)
;
node
=
FindRootNodeForLayersId
(
result
.
mLayersId
)
;
if
(
!
node
)
{
MOZ_ASSERT
(
false
)
;
chosenResult
=
Some
(
result
)
;
break
;
}
}
MOZ_ASSERT
(
node
-
>
GetApzc
(
)
)
;
EventRegionsOverride
flags
=
node
-
>
GetEventRegionsOverride
(
)
;
if
(
flags
&
EventRegionsOverride
:
:
ForceEmptyHitRegion
)
{
APZCTM_LOG
(
"
skipping
due
to
FEHR
subtree
.
\
n
"
)
;
continue
;
}
APZCTM_LOG
(
"
selecting
as
chosen
result
.
\
n
"
)
;
chosenResult
=
Some
(
result
)
;
hit
.
mTargetApzc
=
node
-
>
GetApzc
(
)
;
if
(
flags
&
EventRegionsOverride
:
:
ForceDispatchToContent
)
{
chosenResult
-
>
mHitInfo
+
=
CompositorHitTestFlags
:
:
eApzAwareListeners
;
}
break
;
}
if
(
!
chosenResult
)
{
return
hit
;
}
MOZ_ASSERT
(
hit
.
mTargetApzc
)
;
hit
.
mLayersId
=
chosenResult
-
>
mLayersId
;
ScrollableLayerGuid
:
:
ViewID
scrollId
=
chosenResult
-
>
mScrollId
;
gfx
:
:
CompositorHitTestInfo
hitInfo
=
chosenResult
-
>
mHitInfo
;
SideBits
sideBits
=
chosenResult
-
>
mSideBits
;
APZCTM_LOG
(
"
Successfully
matched
APZC
%
p
(
hit
result
0x
%
x
)
\
n
"
hit
.
mTargetApzc
.
get
(
)
hitInfo
.
serialize
(
)
)
;
const
bool
isScrollbar
=
hitInfo
.
contains
(
gfx
:
:
CompositorHitTestFlags
:
:
eScrollbar
)
;
const
bool
isScrollbarThumb
=
hitInfo
.
contains
(
gfx
:
:
CompositorHitTestFlags
:
:
eScrollbarThumb
)
;
const
ScrollDirection
direction
=
hitInfo
.
contains
(
gfx
:
:
CompositorHitTestFlags
:
:
eScrollbarVertical
)
?
ScrollDirection
:
:
eVertical
:
ScrollDirection
:
:
eHorizontal
;
HitTestingTreeNode
*
scrollbarNode
=
nullptr
;
if
(
isScrollbar
|
|
isScrollbarThumb
)
{
scrollbarNode
=
BreadthFirstSearch
<
ReverseIterator
>
(
GetRootNode
(
)
[
&
]
(
HitTestingTreeNode
*
aNode
)
{
return
(
aNode
-
>
GetLayersId
(
)
=
=
hit
.
mLayersId
)
&
&
(
aNode
-
>
IsScrollbarNode
(
)
=
=
isScrollbar
)
&
&
(
aNode
-
>
IsScrollThumbNode
(
)
=
=
isScrollbarThumb
)
&
&
(
aNode
-
>
GetScrollbarDirection
(
)
=
=
direction
)
&
&
(
aNode
-
>
GetScrollTargetId
(
)
=
=
scrollId
)
;
}
)
;
}
hit
.
mHitResult
=
hitInfo
;
if
(
scrollbarNode
)
{
RefPtr
<
HitTestingTreeNode
>
scrollbarRef
=
scrollbarNode
;
InitializeHitTestingTreeNodeAutoLock
(
hit
.
mScrollbarNode
aProofOfTreeLock
scrollbarRef
)
;
}
hit
.
mFixedPosSides
=
sideBits
;
hit
.
mHitOverscrollGutter
=
hit
.
mTargetApzc
&
&
hit
.
mTargetApzc
-
>
IsInOverscrollGutter
(
aHitTestPoint
)
;
return
hit
;
}
}
}
