#
include
"
mozilla
/
layers
/
APZInputBridge
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
InputData
.
h
"
#
include
"
mozilla
/
dom
/
WheelEventBinding
.
h
"
#
include
"
mozilla
/
EventStateManager
.
h
"
#
include
"
mozilla
/
layers
/
APZThreadUtils
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
#
include
"
mozilla
/
TouchEvents
.
h
"
#
include
"
mozilla
/
WheelHandlingHelper
.
h
"
namespace
mozilla
{
namespace
layers
{
static
bool
WillHandleMouseEvent
(
const
WidgetMouseEventBase
&
aEvent
)
{
return
aEvent
.
mMessage
=
=
eMouseMove
|
|
aEvent
.
mMessage
=
=
eMouseDown
|
|
aEvent
.
mMessage
=
=
eMouseUp
|
|
aEvent
.
mMessage
=
=
eDragEnd
|
|
(
gfxPrefs
:
:
TestEventsAsyncEnabled
(
)
&
&
aEvent
.
mMessage
=
=
eMouseHitTest
)
;
}
bool
APZInputBridge
:
:
WillHandleWheelEvent
(
WidgetWheelEvent
*
aEvent
)
{
return
EventStateManager
:
:
WheelEventIsScrollAction
(
aEvent
)
&
&
(
aEvent
-
>
mDeltaMode
=
=
dom
:
:
WheelEventBinding
:
:
DOM_DELTA_LINE
|
|
aEvent
-
>
mDeltaMode
=
=
dom
:
:
WheelEventBinding
:
:
DOM_DELTA_PIXEL
|
|
aEvent
-
>
mDeltaMode
=
=
dom
:
:
WheelEventBinding
:
:
DOM_DELTA_PAGE
)
;
}
nsEventStatus
APZInputBridge
:
:
ReceiveInputEvent
(
WidgetInputEvent
&
aEvent
ScrollableLayerGuid
*
aOutTargetGuid
uint64_t
*
aOutInputBlockId
)
{
APZThreadUtils
:
:
AssertOnControllerThread
(
)
;
if
(
aOutInputBlockId
)
{
*
aOutInputBlockId
=
0
;
}
switch
(
aEvent
.
mClass
)
{
case
eMouseEventClass
:
case
eDragEventClass
:
{
WidgetMouseEvent
&
mouseEvent
=
*
aEvent
.
AsMouseEvent
(
)
;
if
(
mouseEvent
.
IsReal
(
)
)
{
UpdateWheelTransaction
(
mouseEvent
.
mRefPoint
mouseEvent
.
mMessage
)
;
}
if
(
WillHandleMouseEvent
(
mouseEvent
)
)
{
MouseInput
input
(
mouseEvent
)
;
input
.
mOrigin
=
ScreenPoint
(
mouseEvent
.
mRefPoint
.
x
mouseEvent
.
mRefPoint
.
y
)
;
nsEventStatus
status
=
ReceiveInputEvent
(
input
aOutTargetGuid
aOutInputBlockId
)
;
mouseEvent
.
mRefPoint
.
x
=
input
.
mOrigin
.
x
;
mouseEvent
.
mRefPoint
.
y
=
input
.
mOrigin
.
y
;
mouseEvent
.
mFlags
.
mHandledByAPZ
=
input
.
mHandledByAPZ
;
mouseEvent
.
mFocusSequenceNumber
=
input
.
mFocusSequenceNumber
;
return
status
;
}
ProcessUnhandledEvent
(
&
mouseEvent
.
mRefPoint
aOutTargetGuid
&
aEvent
.
mFocusSequenceNumber
)
;
return
nsEventStatus_eIgnore
;
}
case
eTouchEventClass
:
{
WidgetTouchEvent
&
touchEvent
=
*
aEvent
.
AsTouchEvent
(
)
;
MultiTouchInput
touchInput
(
touchEvent
)
;
nsEventStatus
result
=
ReceiveInputEvent
(
touchInput
aOutTargetGuid
aOutInputBlockId
)
;
touchEvent
.
mTouches
.
Clear
(
)
;
touchEvent
.
mTouches
.
SetCapacity
(
touchInput
.
mTouches
.
Length
(
)
)
;
for
(
size_t
i
=
0
;
i
<
touchInput
.
mTouches
.
Length
(
)
;
i
+
+
)
{
*
touchEvent
.
mTouches
.
AppendElement
(
)
=
touchInput
.
mTouches
[
i
]
.
ToNewDOMTouch
(
)
;
}
touchEvent
.
mFlags
.
mHandledByAPZ
=
touchInput
.
mHandledByAPZ
;
touchEvent
.
mFocusSequenceNumber
=
touchInput
.
mFocusSequenceNumber
;
return
result
;
}
case
eWheelEventClass
:
{
WidgetWheelEvent
&
wheelEvent
=
*
aEvent
.
AsWheelEvent
(
)
;
if
(
WillHandleWheelEvent
(
&
wheelEvent
)
)
{
ScrollWheelInput
:
:
ScrollMode
scrollMode
=
ScrollWheelInput
:
:
SCROLLMODE_INSTANT
;
if
(
gfxPrefs
:
:
SmoothScrollEnabled
(
)
&
&
(
(
wheelEvent
.
mDeltaMode
=
=
dom
:
:
WheelEventBinding
:
:
DOM_DELTA_LINE
&
&
gfxPrefs
:
:
WheelSmoothScrollEnabled
(
)
)
|
|
(
wheelEvent
.
mDeltaMode
=
=
dom
:
:
WheelEventBinding
:
:
DOM_DELTA_PAGE
&
&
gfxPrefs
:
:
PageSmoothScrollEnabled
(
)
)
)
)
{
scrollMode
=
ScrollWheelInput
:
:
SCROLLMODE_SMOOTH
;
}
WheelDeltaAdjustmentStrategy
strategy
=
EventStateManager
:
:
GetWheelDeltaAdjustmentStrategy
(
wheelEvent
)
;
WheelDeltaHorizontalizer
horizontalizer
(
wheelEvent
)
;
if
(
WheelDeltaAdjustmentStrategy
:
:
eHorizontalize
=
=
strategy
)
{
horizontalizer
.
Horizontalize
(
)
;
}
if
(
wheelEvent
.
mDeltaX
|
|
wheelEvent
.
mDeltaY
)
{
ScreenPoint
origin
(
wheelEvent
.
mRefPoint
.
x
wheelEvent
.
mRefPoint
.
y
)
;
ScrollWheelInput
input
(
wheelEvent
.
mTime
wheelEvent
.
mTimeStamp
wheelEvent
.
mModifiers
scrollMode
ScrollWheelInput
:
:
DeltaTypeForDeltaMode
(
wheelEvent
.
mDeltaMode
)
origin
wheelEvent
.
mDeltaX
wheelEvent
.
mDeltaY
wheelEvent
.
mAllowToOverrideSystemScrollSpeed
strategy
)
;
EventStateManager
:
:
GetUserPrefsForWheelEvent
(
&
wheelEvent
&
input
.
mUserDeltaMultiplierX
&
input
.
mUserDeltaMultiplierY
)
;
nsEventStatus
status
=
ReceiveInputEvent
(
input
aOutTargetGuid
aOutInputBlockId
)
;
wheelEvent
.
mRefPoint
.
x
=
input
.
mOrigin
.
x
;
wheelEvent
.
mRefPoint
.
y
=
input
.
mOrigin
.
y
;
wheelEvent
.
mFlags
.
mHandledByAPZ
=
input
.
mHandledByAPZ
;
wheelEvent
.
mFocusSequenceNumber
=
input
.
mFocusSequenceNumber
;
return
status
;
}
}
UpdateWheelTransaction
(
aEvent
.
mRefPoint
aEvent
.
mMessage
)
;
ProcessUnhandledEvent
(
&
aEvent
.
mRefPoint
aOutTargetGuid
&
aEvent
.
mFocusSequenceNumber
)
;
return
nsEventStatus_eIgnore
;
}
case
eKeyboardEventClass
:
{
WidgetKeyboardEvent
&
keyboardEvent
=
*
aEvent
.
AsKeyboardEvent
(
)
;
KeyboardInput
input
(
keyboardEvent
)
;
nsEventStatus
status
=
ReceiveInputEvent
(
input
aOutTargetGuid
aOutInputBlockId
)
;
keyboardEvent
.
mFlags
.
mHandledByAPZ
=
input
.
mHandledByAPZ
;
keyboardEvent
.
mFocusSequenceNumber
=
input
.
mFocusSequenceNumber
;
return
status
;
}
default
:
{
UpdateWheelTransaction
(
aEvent
.
mRefPoint
aEvent
.
mMessage
)
;
ProcessUnhandledEvent
(
&
aEvent
.
mRefPoint
aOutTargetGuid
&
aEvent
.
mFocusSequenceNumber
)
;
return
nsEventStatus_eIgnore
;
}
}
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
WidgetInputEvent
type
.
"
)
;
return
nsEventStatus_eConsumeNoDefault
;
}
}
}
