#
ifndef
mozilla_layers_ActiveElementManager_h
#
define
mozilla_layers_ActiveElementManager_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
mozilla
/
EnumSet
.
h
"
namespace
mozilla
{
class
CancelableRunnable
;
namespace
dom
{
class
Element
;
class
EventTarget
;
}
namespace
layers
{
class
DelayedClearElementActivation
;
namespace
apz
{
enum
class
SingleTapState
:
uint8_t
;
}
class
ActiveElementManager
final
{
~
ActiveElementManager
(
)
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
ActiveElementManager
)
ActiveElementManager
(
)
;
void
SetTargetElement
(
dom
:
:
EventTarget
*
aTarget
)
;
void
HandleTouchStart
(
bool
aCanBePan
)
;
void
ClearActivation
(
)
;
bool
HandleTouchEndEvent
(
apz
:
:
SingleTapState
aState
)
;
bool
HandleTouchEnd
(
apz
:
:
SingleTapState
aState
)
;
void
ProcessSingleTap
(
)
;
void
Destroy
(
)
;
private
:
RefPtr
<
dom
:
:
Element
>
mTarget
;
bool
mCanBePan
;
bool
mCanBePanSet
;
bool
mSingleTapBeforeActivation
;
enum
class
TouchEndState
:
uint8_t
{
GotTouchEndNotification
GotTouchEndEvent
}
;
using
TouchEndStates
=
EnumSet
<
TouchEndState
>
;
TouchEndStates
mTouchEndState
;
apz
:
:
SingleTapState
mSingleTapState
;
RefPtr
<
CancelableRunnable
>
mSetActiveTask
;
RefPtr
<
DelayedClearElementActivation
>
mDelayedClearElementActivation
;
void
TriggerElementActivation
(
)
;
void
SetActive
(
dom
:
:
Element
*
aTarget
)
;
void
ResetActive
(
)
;
void
ResetTouchBlockState
(
)
;
void
SetActiveTask
(
const
nsCOMPtr
<
dom
:
:
Element
>
&
aTarget
)
;
void
CancelTask
(
)
;
bool
MaybeChangeActiveState
(
apz
:
:
SingleTapState
aState
)
;
}
;
}
}
#
endif
