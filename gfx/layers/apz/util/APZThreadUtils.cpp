#
include
"
mozilla
/
layers
/
APZThreadUtils
.
h
"
namespace
mozilla
{
namespace
layers
{
static
bool
sThreadAssertionsEnabled
=
true
;
static
nsISerialEventTarget
*
sControllerThread
;
void
APZThreadUtils
:
:
SetThreadAssertionsEnabled
(
bool
aEnabled
)
{
sThreadAssertionsEnabled
=
aEnabled
;
}
bool
APZThreadUtils
:
:
GetThreadAssertionsEnabled
(
)
{
return
sThreadAssertionsEnabled
;
}
void
APZThreadUtils
:
:
SetControllerThread
(
nsISerialEventTarget
*
aThread
)
{
MOZ_ASSERT
(
!
sControllerThread
|
|
!
aThread
|
|
sControllerThread
=
=
aThread
)
;
sControllerThread
=
aThread
;
}
void
APZThreadUtils
:
:
AssertOnControllerThread
(
)
{
if
(
!
GetThreadAssertionsEnabled
(
)
)
{
return
;
}
MOZ_ASSERT
(
sControllerThread
-
>
IsOnCurrentThread
(
)
)
;
}
void
APZThreadUtils
:
:
RunOnControllerThread
(
RefPtr
<
Runnable
>
&
&
aTask
)
{
RefPtr
<
Runnable
>
task
=
std
:
:
move
(
aTask
)
;
if
(
!
sControllerThread
)
{
NS_WARNING
(
"
Dropping
task
posted
to
controller
thread
"
)
;
return
;
}
if
(
sControllerThread
-
>
IsOnCurrentThread
(
)
)
{
task
-
>
Run
(
)
;
}
else
{
sControllerThread
-
>
Dispatch
(
task
.
forget
(
)
)
;
}
}
bool
APZThreadUtils
:
:
IsControllerThread
(
)
{
return
sControllerThread
=
=
NS_GetCurrentThread
(
)
;
}
void
APZThreadUtils
:
:
DelayedDispatch
(
already_AddRefed
<
Runnable
>
aRunnable
int
aDelayMs
)
{
MOZ_ASSERT
(
sControllerThread
&
&
sControllerThread
-
>
IsOnCurrentThread
(
)
)
;
MOZ_ASSERT
(
!
XRE_IsContentProcess
(
)
"
ContentProcessController
should
only
be
used
remotely
.
"
)
;
if
(
aDelayMs
)
{
sControllerThread
-
>
DelayedDispatch
(
std
:
:
move
(
aRunnable
)
aDelayMs
)
;
}
else
{
sControllerThread
-
>
Dispatch
(
std
:
:
move
(
aRunnable
)
)
;
}
}
NS_IMPL_ISUPPORTS
(
GenericNamedTimerCallbackBase
nsITimerCallback
nsINamed
)
}
}
