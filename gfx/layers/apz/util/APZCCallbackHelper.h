#
ifndef
mozilla_layers_APZCCallbackHelper_h
#
define
mozilla_layers_APZCCallbackHelper_h
#
include
"
InputData
.
h
"
#
include
"
LayersTypes
.
h
"
#
include
"
Units
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
layers
/
APZUtils
.
h
"
#
include
"
mozilla
/
layers
/
MatrixMessage
.
h
"
#
include
"
mozilla
/
layers
/
RepaintRequest
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
<
functional
>
class
nsIContent
;
class
nsIScrollableFrame
;
class
nsIWidget
;
template
<
class
T
>
struct
already_AddRefed
;
template
<
class
T
>
class
nsCOMPtr
;
namespace
mozilla
{
class
PresShell
;
namespace
layers
{
typedef
std
:
:
function
<
void
(
uint64_t
const
nsTArray
<
TouchBehaviorFlags
>
&
)
>
SetAllowedTouchBehaviorCallback
;
class
DisplayportSetListener
:
public
nsAPostRefreshObserver
{
public
:
DisplayportSetListener
(
nsIWidget
*
aWidget
PresShell
*
aPresShell
const
uint64_t
&
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
)
;
virtual
~
DisplayportSetListener
(
)
;
bool
Register
(
)
;
void
DidRefresh
(
)
override
;
private
:
RefPtr
<
nsIWidget
>
mWidget
;
RefPtr
<
PresShell
>
mPresShell
;
uint64_t
mInputBlockId
;
nsTArray
<
ScrollableLayerGuid
>
mTargets
;
}
;
class
APZCCallbackHelper
{
typedef
mozilla
:
:
layers
:
:
ScrollableLayerGuid
ScrollableLayerGuid
;
public
:
static
void
NotifyLayerTransforms
(
const
nsTArray
<
MatrixMessage
>
&
aTransforms
)
;
static
void
UpdateRootFrame
(
const
RepaintRequest
&
aRequest
)
;
static
void
UpdateSubFrame
(
const
RepaintRequest
&
aRequest
)
;
static
bool
GetOrCreateScrollIdentifiers
(
nsIContent
*
aContent
uint32_t
*
aPresShellIdOut
ScrollableLayerGuid
:
:
ViewID
*
aViewIdOut
)
;
static
void
InitializeRootDisplayport
(
PresShell
*
aPresShell
)
;
static
nsPresContext
*
GetPresContextForContent
(
nsIContent
*
aContent
)
;
static
PresShell
*
GetRootContentDocumentPresShellForContent
(
nsIContent
*
aContent
)
;
static
CSSToCSSMatrix4x4
GetCallbackTransform
(
ScrollableLayerGuid
:
:
ViewID
aScrollId
)
;
static
nsEventStatus
DispatchWidgetEvent
(
WidgetGUIEvent
&
aEvent
)
;
static
nsEventStatus
DispatchSynthesizedMouseEvent
(
EventMessage
aMsg
uint64_t
aTime
const
LayoutDevicePoint
&
aRefPoint
Modifiers
aModifiers
int32_t
aClickCount
nsIWidget
*
aWidget
)
;
MOZ_CAN_RUN_SCRIPT
static
bool
DispatchMouseEvent
(
PresShell
*
aPresShell
const
nsString
&
aType
const
CSSPoint
&
aPoint
int32_t
aButton
int32_t
aClickCount
int32_t
aModifiers
bool
aIgnoreRootScrollFrame
unsigned
short
aInputSourceArg
uint32_t
aPointerId
)
;
static
void
FireSingleTapEvent
(
const
LayoutDevicePoint
&
aPoint
Modifiers
aModifiers
int32_t
aClickCount
nsIWidget
*
aWidget
)
;
static
UniquePtr
<
DisplayportSetListener
>
SendSetTargetAPZCNotification
(
nsIWidget
*
aWidget
mozilla
:
:
dom
:
:
Document
*
aDocument
const
WidgetGUIEvent
&
aEvent
const
LayersId
&
aLayersId
uint64_t
aInputBlockId
)
;
static
void
SendSetAllowedTouchBehaviorNotification
(
nsIWidget
*
aWidget
mozilla
:
:
dom
:
:
Document
*
aDocument
const
WidgetTouchEvent
&
aEvent
uint64_t
aInputBlockId
const
SetAllowedTouchBehaviorCallback
&
aCallback
)
;
static
void
NotifyMozMouseScrollEvent
(
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
const
nsString
&
aEvent
)
;
static
void
NotifyFlushComplete
(
PresShell
*
aPresShell
)
;
static
void
NotifyAsyncScrollbarDragInitiated
(
uint64_t
aDragBlockId
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
ScrollDirection
aDirection
)
;
static
void
NotifyAsyncScrollbarDragRejected
(
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
)
;
static
void
NotifyAsyncAutoscrollRejected
(
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
)
;
static
void
CancelAutoscroll
(
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
)
;
static
ScreenMargin
AdjustDisplayPortForScrollDelta
(
const
RepaintRequest
&
aRequest
const
CSSPoint
&
aActualScrollOffset
)
;
static
bool
IsScrollInProgress
(
nsIScrollableFrame
*
aFrame
)
;
static
void
NotifyPinchGesture
(
PinchGestureInput
:
:
PinchGestureType
aType
LayoutDeviceCoord
aSpanChange
Modifiers
aModifiers
nsIWidget
*
aWidget
)
;
private
:
static
uint64_t
sLastTargetAPZCNotificationInputBlock
;
}
;
}
}
#
endif
