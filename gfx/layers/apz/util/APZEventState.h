#
ifndef
mozilla_layers_APZEventState_h
#
define
mozilla_layers_APZEventState_h
#
include
<
stdint
.
h
>
#
include
"
Units
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
layers
/
GeckoContentControllerTypes
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
#
include
"
mozilla
/
layers
/
TouchCounter
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
StaticPrefs_ui
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
<
functional
>
#
include
<
unordered_map
>
template
<
class
>
class
nsCOMPtr
;
class
nsIContent
;
class
nsIWidget
;
namespace
mozilla
{
class
PresShell
;
enum
class
PreventDefaultResult
:
uint8_t
;
namespace
layers
{
class
ActiveElementManager
;
typedef
std
:
:
function
<
void
(
uint64_t
bool
)
>
ContentReceivedInputBlockCallback
;
struct
SingleTapTargetInfo
{
nsWeakPtr
mWidget
;
LayoutDevicePoint
mPoint
;
Modifiers
mModifiers
;
int32_t
mClickCount
;
RefPtr
<
nsIContent
>
mTouchRollup
;
explicit
SingleTapTargetInfo
(
nsWeakPtr
aWidget
LayoutDevicePoint
aPoint
Modifiers
aModifiers
int32_t
aClickCount
RefPtr
<
nsIContent
>
aTouchRollup
)
:
mWidget
(
std
:
:
move
(
aWidget
)
)
mPoint
(
aPoint
)
mModifiers
(
aModifiers
)
mClickCount
(
aClickCount
)
mTouchRollup
(
std
:
:
move
(
aTouchRollup
)
)
{
}
SingleTapTargetInfo
(
SingleTapTargetInfo
&
&
)
=
default
;
SingleTapTargetInfo
&
operator
=
(
SingleTapTargetInfo
&
&
)
=
default
;
}
;
class
DelayedFireSingleTapEvent
final
:
public
nsITimerCallback
public
nsINamed
{
private
:
explicit
DelayedFireSingleTapEvent
(
Maybe
<
SingleTapTargetInfo
>
&
&
aTargetInfo
const
nsCOMPtr
<
nsITimer
>
&
aTimer
)
:
mTargetInfo
(
std
:
:
move
(
aTargetInfo
)
)
mTimer
(
aTimer
)
{
}
public
:
NS_DECL_ISUPPORTS
static
RefPtr
<
DelayedFireSingleTapEvent
>
Create
(
Maybe
<
SingleTapTargetInfo
>
&
&
aTargetInfo
)
;
NS_IMETHOD
Notify
(
nsITimer
*
)
override
;
NS_IMETHOD
GetName
(
nsACString
&
aName
)
override
;
void
PopulateTargetInfo
(
SingleTapTargetInfo
&
&
aTargetInfo
)
;
void
FireSingleTapEvent
(
)
;
void
ClearTimer
(
)
{
mTimer
=
nullptr
;
}
private
:
~
DelayedFireSingleTapEvent
(
)
=
default
;
Maybe
<
SingleTapTargetInfo
>
mTargetInfo
;
nsCOMPtr
<
nsITimer
>
mTimer
;
}
;
class
APZEventState
final
{
typedef
GeckoContentController_APZStateChange
APZStateChange
;
typedef
ScrollableLayerGuid
:
:
ViewID
ViewID
;
public
:
APZEventState
(
nsIWidget
*
aWidget
ContentReceivedInputBlockCallback
&
&
aCallback
)
;
NS_INLINE_DECL_REFCOUNTING
(
APZEventState
)
;
void
ProcessSingleTap
(
const
CSSPoint
&
aPoint
const
CSSToLayoutDeviceScale
&
aScale
Modifiers
aModifiers
int32_t
aClickCount
uint64_t
aInputBlockId
)
;
MOZ_CAN_RUN_SCRIPT
void
ProcessLongTap
(
PresShell
*
aPresShell
const
CSSPoint
&
aPoint
const
CSSToLayoutDeviceScale
&
aScale
Modifiers
aModifiers
uint64_t
aInputBlockId
)
;
MOZ_CAN_RUN_SCRIPT
void
ProcessLongTapUp
(
PresShell
*
aPresShell
const
CSSPoint
&
aPoint
const
CSSToLayoutDeviceScale
&
aScale
Modifiers
aModifiers
)
;
void
ProcessTouchEvent
(
const
WidgetTouchEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
uint64_t
aInputBlockId
nsEventStatus
aApzResponse
nsEventStatus
aContentResponse
nsTArray
<
TouchBehaviorFlags
>
&
&
aAllowedTouchBehaviors
)
;
void
ProcessWheelEvent
(
const
WidgetWheelEvent
&
aEvent
uint64_t
aInputBlockId
)
;
void
ProcessMouseEvent
(
const
WidgetMouseEvent
&
aEvent
uint64_t
aInputBlockId
)
;
void
ProcessAPZStateChange
(
ViewID
aViewId
APZStateChange
aChange
int
aArg
Maybe
<
uint64_t
>
aInputBlockId
)
;
private
:
~
APZEventState
(
)
;
bool
SendPendingTouchPreventedResponse
(
bool
aPreventDefault
)
;
MOZ_CAN_RUN_SCRIPT
PreventDefaultResult
FireContextmenuEvents
(
PresShell
*
aPresShell
const
CSSPoint
&
aPoint
const
CSSToLayoutDeviceScale
&
aScale
Modifiers
aModifiers
const
nsCOMPtr
<
nsIWidget
>
&
aWidget
)
;
already_AddRefed
<
nsIWidget
>
GetWidget
(
)
const
;
already_AddRefed
<
nsIContent
>
GetTouchRollup
(
)
const
;
bool
MainThreadAgreesEventsAreConsumableByAPZ
(
)
const
;
private
:
nsWeakPtr
mWidget
;
RefPtr
<
ActiveElementManager
>
mActiveElementManager
;
ContentReceivedInputBlockCallback
mContentReceivedInputBlockCallback
;
TouchCounter
mTouchCounter
;
bool
mPendingTouchPreventedResponse
;
ScrollableLayerGuid
mPendingTouchPreventedGuid
;
uint64_t
mPendingTouchPreventedBlockId
;
bool
mEndTouchIsClick
;
bool
mFirstTouchCancelled
;
bool
mTouchEndCancelled
;
std
:
:
unordered_map
<
uint64_t
RefPtr
<
DelayedFireSingleTapEvent
>
>
mSingleTapsPendingTargetInfo
;
int32_t
mLastTouchIdentifier
;
nsTArray
<
TouchBehaviorFlags
>
mTouchBlockAllowedBehaviors
;
nsWeakPtr
mTouchRollup
;
}
;
}
}
#
endif
