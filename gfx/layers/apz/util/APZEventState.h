#
ifndef
mozilla_layers_APZEventState_h
#
define
mozilla_layers_APZEventState_h
#
include
<
stdint
.
h
>
#
include
"
ActiveElementManager
.
h
"
#
include
"
Units
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
layers
/
GeckoContentControllerTypes
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
#
include
"
mozilla
/
layers
/
TouchCounter
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
StaticPrefs_ui
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
<
functional
>
#
include
<
unordered_map
>
template
<
class
>
class
nsCOMPtr
;
class
nsIContent
;
class
nsIWidget
;
namespace
mozilla
{
class
PresShell
;
enum
class
PreventDefaultResult
:
uint8_t
;
namespace
layers
{
class
ActiveElementManager
;
namespace
apz
{
enum
class
PrecedingPointerDown
:
bool
{
NotConsumed
ConsumedByContent
}
;
enum
class
SingleTapState
:
uint8_t
;
}
typedef
std
:
:
function
<
void
(
uint64_t
bool
)
>
ContentReceivedInputBlockCallback
;
class
APZEventState
final
{
typedef
GeckoContentController_APZStateChange
APZStateChange
;
typedef
ScrollableLayerGuid
:
:
ViewID
ViewID
;
public
:
using
PrecedingPointerDown
=
apz
:
:
PrecedingPointerDown
;
APZEventState
(
nsIWidget
*
aWidget
ContentReceivedInputBlockCallback
&
&
aCallback
)
;
NS_INLINE_DECL_REFCOUNTING
(
APZEventState
)
;
MOZ_CAN_RUN_SCRIPT
void
ProcessSingleTap
(
const
CSSPoint
&
aPoint
const
CSSToLayoutDeviceScale
&
aScale
Modifiers
aModifiers
int32_t
aClickCount
uint64_t
aInputBlockId
)
;
MOZ_CAN_RUN_SCRIPT
void
ProcessLongTap
(
PresShell
*
aPresShell
const
CSSPoint
&
aPoint
const
CSSToLayoutDeviceScale
&
aScale
Modifiers
aModifiers
uint64_t
aInputBlockId
)
;
MOZ_CAN_RUN_SCRIPT
void
ProcessLongTapUp
(
PresShell
*
aPresShell
const
CSSPoint
&
aPoint
const
CSSToLayoutDeviceScale
&
aScale
Modifiers
aModifiers
)
;
void
ProcessTouchEvent
(
const
WidgetTouchEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
uint64_t
aInputBlockId
nsEventStatus
aApzResponse
nsEventStatus
aContentResponse
nsTArray
<
TouchBehaviorFlags
>
&
&
aAllowedTouchBehaviors
)
;
void
ProcessWheelEvent
(
const
WidgetWheelEvent
&
aEvent
uint64_t
aInputBlockId
)
;
void
ProcessMouseEvent
(
const
WidgetMouseEvent
&
aEvent
uint64_t
aInputBlockId
)
;
void
ProcessAPZStateChange
(
ViewID
aViewId
APZStateChange
aChange
int
aArg
Maybe
<
uint64_t
>
aInputBlockId
)
;
void
Destroy
(
)
;
private
:
~
APZEventState
(
)
;
void
SendPendingTouchPreventedResponse
(
bool
aPreventDefault
)
;
MOZ_CAN_RUN_SCRIPT
PreventDefaultResult
FireContextmenuEvents
(
PresShell
*
aPresShell
const
CSSPoint
&
aPoint
const
CSSToLayoutDeviceScale
&
aScale
Modifiers
aModifiers
const
nsCOMPtr
<
nsIWidget
>
&
aWidget
)
;
already_AddRefed
<
nsIWidget
>
GetWidget
(
)
const
;
already_AddRefed
<
nsIContent
>
GetTouchRollup
(
)
const
;
bool
MainThreadAgreesEventsAreConsumableByAPZ
(
)
const
;
private
:
nsWeakPtr
mWidget
;
RefPtr
<
ActiveElementManager
>
mActiveElementManager
;
ContentReceivedInputBlockCallback
mContentReceivedInputBlockCallback
;
TouchCounter
mTouchCounter
;
ScrollableLayerGuid
mPendingTouchPreventedGuid
;
uint64_t
mPendingTouchPreventedBlockId
;
apz
:
:
SingleTapState
mEndTouchState
;
PrecedingPointerDown
mPrecedingPointerDownState
=
PrecedingPointerDown
:
:
NotConsumed
;
bool
mPendingTouchPreventedResponse
=
false
;
bool
mFirstTouchCancelled
=
false
;
bool
mTouchEndCancelled
=
false
;
bool
mReceivedNonTouchStart
=
false
;
bool
mTouchStartPrevented
=
false
;
int32_t
mLastTouchIdentifier
;
nsTArray
<
TouchBehaviorFlags
>
mTouchBlockAllowedBehaviors
;
nsWeakPtr
mTouchRollup
;
}
;
}
}
#
endif
