#
ifndef
mozilla_layers_ContentProcessController_h
#
define
mozilla_layers_ContentProcessController_h
#
include
"
mozilla
/
layers
/
GeckoContentController
.
h
"
class
nsIObserver
;
namespace
mozilla
{
namespace
dom
{
class
TabChild
;
}
namespace
layers
{
class
APZChild
;
class
ContentProcessController
final
:
public
GeckoContentController
{
public
:
explicit
ContentProcessController
(
const
RefPtr
<
dom
:
:
TabChild
>
&
aBrowser
)
;
void
RequestContentRepaint
(
const
FrameMetrics
&
frame
)
override
;
void
HandleTap
(
TapType
aType
const
LayoutDevicePoint
&
aPoint
Modifiers
aModifiers
const
ScrollableLayerGuid
&
aGuid
uint64_t
aInputBlockId
)
override
;
void
NotifyPinchGesture
(
PinchGestureInput
:
:
PinchGestureType
aType
const
ScrollableLayerGuid
&
aGuid
LayoutDeviceCoord
aSpanChange
Modifiers
aModifiers
)
override
;
void
NotifyAPZStateChange
(
const
ScrollableLayerGuid
&
aGuid
APZStateChange
aChange
int
aArg
)
override
;
void
NotifyMozMouseScrollEvent
(
const
FrameMetrics
:
:
ViewID
&
aScrollId
const
nsString
&
aEvent
)
override
;
void
NotifyFlushComplete
(
)
override
;
void
NotifyAsyncScrollbarDragRejected
(
const
FrameMetrics
:
:
ViewID
&
aScrollId
)
override
;
void
NotifyAutoscrollHandledByAPZ
(
const
FrameMetrics
:
:
ViewID
&
aScrollId
)
override
;
void
CancelAutoscroll
(
const
ScrollableLayerGuid
&
aGuid
)
override
;
void
PostDelayedTask
(
already_AddRefed
<
Runnable
>
aRunnable
int
aDelayMs
)
override
;
bool
IsRepaintThread
(
)
override
;
void
DispatchToRepaintThread
(
already_AddRefed
<
Runnable
>
aTask
)
override
;
private
:
RefPtr
<
dom
:
:
TabChild
>
mBrowser
;
}
;
}
}
#
endif
