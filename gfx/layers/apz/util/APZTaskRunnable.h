#
ifndef
mozilla_layers_RepaintRequestRunnable_h
#
define
mozilla_layers_RepaintRequestRunnable_h
#
include
<
unordered_map
>
#
include
"
mozilla
/
layers
/
GeckoContentController
.
h
"
#
include
"
mozilla
/
layers
/
RepaintRequest
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
layers
{
class
GeckoContentController
;
class
APZTaskRunnable
final
:
public
Runnable
{
public
:
explicit
APZTaskRunnable
(
GeckoContentController
*
aController
)
:
Runnable
(
"
RepaintRequestRunnable
"
)
mController
(
aController
)
mRegisteredPresShellId
(
0
)
mNeedsFlushCompleteNotification
(
false
)
{
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_DECL_NSIRUNNABLE
void
QueueRequest
(
const
RepaintRequest
&
aRequest
)
;
void
QueueFlushCompleteNotification
(
)
;
void
Revoke
(
)
{
mController
=
nullptr
;
mRegisteredPresShellId
=
0
;
}
private
:
void
EnsureRegisterAsEarlyRunner
(
)
;
bool
IsRegistereddWithCurrentPresShell
(
)
const
;
bool
IsTestControllingRefreshesEnabled
(
)
const
;
GeckoContentController
*
mController
;
using
RepaintRequests
=
std
:
:
unordered_map
<
ScrollableLayerGuid
:
:
ViewID
RepaintRequest
>
;
RepaintRequests
mPendingRepaintRequests
;
uint32_t
mRegisteredPresShellId
;
bool
mNeedsFlushCompleteNotification
;
}
;
}
}
#
endif
