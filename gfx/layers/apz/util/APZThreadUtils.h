#
ifndef
mozilla_layers_APZThreadUtils_h
#
define
mozilla_layers_APZThreadUtils_h
#
include
"
base
/
message_loop
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsITimer
.
h
"
class
Task
;
namespace
mozilla
{
namespace
layers
{
class
APZThreadUtils
{
public
:
static
void
SetThreadAssertionsEnabled
(
bool
aEnabled
)
;
static
bool
GetThreadAssertionsEnabled
(
)
;
static
void
SetControllerThread
(
MessageLoop
*
aLoop
)
;
static
void
AssertOnControllerThread
(
)
;
static
void
AssertOnCompositorThread
(
)
;
static
void
RunOnControllerThread
(
Task
*
aTask
)
;
static
void
RunDelayedTaskOnCurrentThread
(
Task
*
aTask
const
TimeDuration
&
aDelay
)
;
static
bool
IsControllerThread
(
)
;
}
;
class
GenericTimerCallbackBase
:
public
nsITimerCallback
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
protected
:
virtual
~
GenericTimerCallbackBase
(
)
{
}
}
;
template
<
typename
Function
>
class
GenericTimerCallback
final
:
public
GenericTimerCallbackBase
{
public
:
explicit
GenericTimerCallback
(
const
Function
&
aFunction
)
:
mFunction
(
aFunction
)
{
}
NS_IMETHODIMP
Notify
(
nsITimer
*
)
override
{
mFunction
(
)
;
return
NS_OK
;
}
private
:
Function
mFunction
;
}
;
template
<
typename
Function
>
GenericTimerCallback
<
Function
>
*
NewTimerCallback
(
const
Function
&
aFunction
)
{
return
new
GenericTimerCallback
<
Function
>
(
aFunction
)
;
}
}
}
#
endif
