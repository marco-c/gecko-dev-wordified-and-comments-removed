#
ifndef
mozilla_layers_APZThreadUtils_h
#
define
mozilla_layers_APZThreadUtils_h
#
include
"
base
/
message_loop
.
h
"
#
include
"
nsINamed
.
h
"
#
include
"
nsITimer
.
h
"
namespace
mozilla
{
class
Runnable
;
namespace
layers
{
class
APZThreadUtils
{
public
:
static
void
SetThreadAssertionsEnabled
(
bool
aEnabled
)
;
static
bool
GetThreadAssertionsEnabled
(
)
;
static
void
SetControllerThread
(
MessageLoop
*
aLoop
)
;
static
void
AssertOnControllerThread
(
)
;
static
void
RunOnControllerThread
(
RefPtr
<
Runnable
>
&
&
aTask
)
;
static
bool
IsControllerThread
(
)
;
}
;
class
GenericNamedTimerCallbackBase
:
public
nsITimerCallback
public
nsINamed
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
protected
:
virtual
~
GenericNamedTimerCallbackBase
(
)
=
default
;
}
;
template
<
typename
Function
>
class
GenericNamedTimerCallback
final
:
public
GenericNamedTimerCallbackBase
{
public
:
GenericNamedTimerCallback
(
const
Function
&
aFunction
const
char
*
aName
)
:
mFunction
(
aFunction
)
mName
(
aName
)
{
}
NS_IMETHOD
Notify
(
nsITimer
*
)
override
{
mFunction
(
)
;
return
NS_OK
;
}
NS_IMETHOD
GetName
(
nsACString
&
aName
)
override
{
aName
=
mName
;
return
NS_OK
;
}
private
:
Function
mFunction
;
nsCString
mName
;
}
;
template
<
typename
Function
>
GenericNamedTimerCallback
<
Function
>
*
NewNamedTimerCallback
(
const
Function
&
aFunction
const
char
*
aName
)
{
return
new
GenericNamedTimerCallback
<
Function
>
(
aFunction
aName
)
;
}
}
}
#
endif
