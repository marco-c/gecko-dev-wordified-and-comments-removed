#
include
"
TouchActionHelper
.
h
"
#
include
"
mozilla
/
layers
/
IAPZCTreeManager
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
nsLayoutUtils
.
h
"
namespace
mozilla
{
namespace
layers
{
static
void
UpdateAllowedBehavior
(
StyleTouchAction
aTouchActionValue
bool
aConsiderPanning
TouchBehaviorFlags
&
aOutBehavior
)
{
if
(
aTouchActionValue
!
=
StyleTouchAction_AUTO
)
{
aOutBehavior
&
=
~
AllowedTouchBehavior
:
:
DOUBLE_TAP_ZOOM
;
if
(
aTouchActionValue
!
=
StyleTouchAction_MANIPULATION
)
{
aOutBehavior
&
=
~
AllowedTouchBehavior
:
:
PINCH_ZOOM
;
}
}
if
(
aConsiderPanning
)
{
if
(
aTouchActionValue
=
=
StyleTouchAction_NONE
)
{
aOutBehavior
&
=
~
AllowedTouchBehavior
:
:
VERTICAL_PAN
;
aOutBehavior
&
=
~
AllowedTouchBehavior
:
:
HORIZONTAL_PAN
;
}
if
(
(
aTouchActionValue
&
StyleTouchAction_PAN_X
)
&
&
!
(
aTouchActionValue
&
StyleTouchAction_PAN_Y
)
)
{
aOutBehavior
&
=
~
AllowedTouchBehavior
:
:
VERTICAL_PAN
;
}
else
if
(
(
aTouchActionValue
&
StyleTouchAction_PAN_Y
)
&
&
!
(
aTouchActionValue
&
StyleTouchAction_PAN_X
)
)
{
aOutBehavior
&
=
~
AllowedTouchBehavior
:
:
HORIZONTAL_PAN
;
}
}
}
TouchBehaviorFlags
TouchActionHelper
:
:
GetAllowedTouchBehavior
(
nsIWidget
*
aWidget
nsIFrame
*
aRootFrame
const
LayoutDeviceIntPoint
&
aPoint
)
{
TouchBehaviorFlags
behavior
=
AllowedTouchBehavior
:
:
VERTICAL_PAN
|
AllowedTouchBehavior
:
:
HORIZONTAL_PAN
|
AllowedTouchBehavior
:
:
PINCH_ZOOM
|
AllowedTouchBehavior
:
:
DOUBLE_TAP_ZOOM
;
nsPoint
relativePoint
=
nsLayoutUtils
:
:
GetEventCoordinatesRelativeTo
(
aWidget
aPoint
aRootFrame
)
;
nsIFrame
*
target
=
nsLayoutUtils
:
:
GetFrameForPoint
(
aRootFrame
relativePoint
nsLayoutUtils
:
:
FrameForPointOption
:
:
IgnoreRootScrollFrame
)
;
if
(
!
target
)
{
return
behavior
;
}
nsIScrollableFrame
*
nearestScrollableParent
=
nsLayoutUtils
:
:
GetNearestScrollableFrame
(
target
0
)
;
nsIFrame
*
nearestScrollableFrame
=
do_QueryFrame
(
nearestScrollableParent
)
;
bool
considerPanning
=
true
;
for
(
nsIFrame
*
frame
=
target
;
frame
&
&
frame
-
>
GetContent
(
)
&
&
behavior
;
frame
=
frame
-
>
GetInFlowParent
(
)
)
{
UpdateAllowedBehavior
(
nsLayoutUtils
:
:
GetTouchActionFromFrame
(
frame
)
considerPanning
behavior
)
;
if
(
frame
=
=
nearestScrollableFrame
)
{
considerPanning
=
false
;
}
}
return
behavior
;
}
}
}
