#
include
"
APZCCallbackHelper
.
h
"
#
include
"
ContentHelper
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
TabParent
.
h
"
#
include
"
mozilla
/
IntegerPrintfMacros
.
h
"
#
include
"
mozilla
/
layers
/
LayerTransactionChild
.
h
"
#
include
"
mozilla
/
layers
/
ShadowLayers
.
h
"
#
include
"
mozilla
/
TouchEvents
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIDOMWindow
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsView
.
h
"
#
include
"
Layers
.
h
"
#
define
APZCCH_LOG
(
.
.
.
)
namespace
mozilla
{
namespace
layers
{
using
dom
:
:
TabParent
;
uint64_t
APZCCallbackHelper
:
:
sLastTargetAPZCNotificationInputBlock
=
uint64_t
(
-
1
)
;
static
void
AdjustDisplayPortForScrollDelta
(
mozilla
:
:
layers
:
:
FrameMetrics
&
aFrameMetrics
const
CSSPoint
&
aActualScrollOffset
)
{
ScreenPoint
shift
=
(
aFrameMetrics
.
GetScrollOffset
(
)
-
aActualScrollOffset
)
*
aFrameMetrics
.
DisplayportPixelsPerCSSPixel
(
)
;
ScreenMargin
margins
=
aFrameMetrics
.
GetDisplayPortMargins
(
)
;
margins
.
left
-
=
shift
.
x
;
margins
.
right
+
=
shift
.
x
;
margins
.
top
-
=
shift
.
y
;
margins
.
bottom
+
=
shift
.
y
;
aFrameMetrics
.
SetDisplayPortMargins
(
margins
)
;
}
static
void
RecenterDisplayPort
(
mozilla
:
:
layers
:
:
FrameMetrics
&
aFrameMetrics
)
{
ScreenMargin
margins
=
aFrameMetrics
.
GetDisplayPortMargins
(
)
;
margins
.
right
=
margins
.
left
=
margins
.
LeftRight
(
)
/
2
;
margins
.
top
=
margins
.
bottom
=
margins
.
TopBottom
(
)
/
2
;
aFrameMetrics
.
SetDisplayPortMargins
(
margins
)
;
}
static
CSSPoint
ScrollFrameTo
(
nsIScrollableFrame
*
aFrame
const
CSSPoint
&
aPoint
bool
&
aSuccessOut
)
{
aSuccessOut
=
false
;
if
(
!
aFrame
)
{
return
aPoint
;
}
CSSPoint
targetScrollPosition
=
aPoint
;
CSSPoint
geckoScrollPosition
=
CSSPoint
:
:
FromAppUnits
(
aFrame
-
>
GetScrollPosition
(
)
)
;
if
(
aFrame
-
>
GetScrollbarStyles
(
)
.
mVertical
=
=
NS_STYLE_OVERFLOW_HIDDEN
)
{
targetScrollPosition
.
y
=
geckoScrollPosition
.
y
;
}
if
(
aFrame
-
>
GetScrollbarStyles
(
)
.
mHorizontal
=
=
NS_STYLE_OVERFLOW_HIDDEN
)
{
targetScrollPosition
.
x
=
geckoScrollPosition
.
x
;
}
bool
scrollInProgress
=
aFrame
-
>
IsProcessingAsyncScroll
(
)
|
|
(
aFrame
-
>
LastScrollOrigin
(
)
&
&
aFrame
-
>
LastScrollOrigin
(
)
!
=
nsGkAtoms
:
:
apz
)
|
|
aFrame
-
>
LastSmoothScrollOrigin
(
)
;
if
(
!
scrollInProgress
)
{
aFrame
-
>
ScrollToCSSPixelsApproximate
(
targetScrollPosition
nsGkAtoms
:
:
apz
)
;
geckoScrollPosition
=
CSSPoint
:
:
FromAppUnits
(
aFrame
-
>
GetScrollPosition
(
)
)
;
aSuccessOut
=
true
;
}
return
geckoScrollPosition
;
}
static
void
ScrollFrame
(
nsIContent
*
aContent
FrameMetrics
&
aMetrics
)
{
nsIScrollableFrame
*
sf
=
nsLayoutUtils
:
:
FindScrollableFrameFor
(
aMetrics
.
GetScrollId
(
)
)
;
bool
scrollUpdated
=
false
;
CSSPoint
apzScrollOffset
=
aMetrics
.
GetScrollOffset
(
)
;
CSSPoint
actualScrollOffset
=
ScrollFrameTo
(
sf
apzScrollOffset
scrollUpdated
)
;
if
(
scrollUpdated
)
{
AdjustDisplayPortForScrollDelta
(
aMetrics
actualScrollOffset
)
;
}
else
{
RecenterDisplayPort
(
aMetrics
)
;
}
aMetrics
.
SetScrollOffset
(
actualScrollOffset
)
;
if
(
aContent
)
{
CSSPoint
scrollDelta
=
apzScrollOffset
-
actualScrollOffset
;
aContent
-
>
SetProperty
(
nsGkAtoms
:
:
apzCallbackTransform
new
CSSPoint
(
scrollDelta
)
nsINode
:
:
DeleteProperty
<
CSSPoint
>
)
;
}
}
static
void
SetDisplayPortMargins
(
nsIPresShell
*
aPresShell
nsIContent
*
aContent
const
FrameMetrics
&
aMetrics
)
{
if
(
!
aContent
)
{
return
;
}
bool
hadDisplayPort
=
nsLayoutUtils
:
:
GetDisplayPort
(
aContent
)
;
ScreenMargin
margins
=
aMetrics
.
GetDisplayPortMargins
(
)
;
nsLayoutUtils
:
:
SetDisplayPortMargins
(
aContent
aPresShell
margins
0
)
;
if
(
!
hadDisplayPort
)
{
nsLayoutUtils
:
:
SetZeroMarginDisplayPortOnAsyncScrollableAncestors
(
aContent
-
>
GetPrimaryFrame
(
)
nsLayoutUtils
:
:
RepaintMode
:
:
Repaint
)
;
}
CSSRect
baseCSS
=
aMetrics
.
CalculateCompositedRectInCssPixels
(
)
;
nsRect
base
(
0
0
baseCSS
.
width
*
nsPresContext
:
:
AppUnitsPerCSSPixel
(
)
baseCSS
.
height
*
nsPresContext
:
:
AppUnitsPerCSSPixel
(
)
)
;
nsLayoutUtils
:
:
SetDisplayPortBaseIfNotSet
(
aContent
base
)
;
}
static
already_AddRefed
<
nsIPresShell
>
GetPresShell
(
const
nsIContent
*
aContent
)
{
nsCOMPtr
<
nsIPresShell
>
result
;
if
(
nsIDocument
*
doc
=
aContent
-
>
GetComposedDoc
(
)
)
{
result
=
doc
-
>
GetShell
(
)
;
}
return
result
.
forget
(
)
;
}
void
APZCCallbackHelper
:
:
UpdateRootFrame
(
FrameMetrics
&
aMetrics
)
{
if
(
aMetrics
.
GetScrollId
(
)
=
=
FrameMetrics
:
:
NULL_SCROLL_ID
)
{
return
;
}
nsIContent
*
content
=
nsLayoutUtils
:
:
FindContentFor
(
aMetrics
.
GetScrollId
(
)
)
;
if
(
!
content
)
{
return
;
}
nsCOMPtr
<
nsIPresShell
>
shell
=
GetPresShell
(
content
)
;
if
(
!
shell
|
|
aMetrics
.
GetPresShellId
(
)
!
=
shell
-
>
GetPresShellId
(
)
)
{
return
;
}
MOZ_ASSERT
(
aMetrics
.
GetUseDisplayPortMargins
(
)
)
;
if
(
gfxPrefs
:
:
APZAllowZooming
(
)
)
{
float
presShellResolution
=
shell
-
>
GetResolution
(
)
;
if
(
presShellResolution
!
=
aMetrics
.
GetPresShellResolution
(
)
)
{
return
;
}
presShellResolution
=
aMetrics
.
GetPresShellResolution
(
)
*
aMetrics
.
GetAsyncZoom
(
)
.
scale
;
shell
-
>
SetResolutionAndScaleTo
(
presShellResolution
)
;
}
ScrollFrame
(
content
aMetrics
)
;
MOZ_ASSERT
(
nsLayoutUtils
:
:
GetDisplayPort
(
content
)
)
;
SetDisplayPortMargins
(
shell
content
aMetrics
)
;
}
void
APZCCallbackHelper
:
:
UpdateSubFrame
(
FrameMetrics
&
aMetrics
)
{
if
(
aMetrics
.
GetScrollId
(
)
=
=
FrameMetrics
:
:
NULL_SCROLL_ID
)
{
return
;
}
nsIContent
*
content
=
nsLayoutUtils
:
:
FindContentFor
(
aMetrics
.
GetScrollId
(
)
)
;
if
(
!
content
)
{
return
;
}
MOZ_ASSERT
(
aMetrics
.
GetUseDisplayPortMargins
(
)
)
;
ScrollFrame
(
content
aMetrics
)
;
if
(
nsCOMPtr
<
nsIPresShell
>
shell
=
GetPresShell
(
content
)
)
{
SetDisplayPortMargins
(
shell
content
aMetrics
)
;
}
}
bool
APZCCallbackHelper
:
:
GetOrCreateScrollIdentifiers
(
nsIContent
*
aContent
uint32_t
*
aPresShellIdOut
FrameMetrics
:
:
ViewID
*
aViewIdOut
)
{
if
(
!
aContent
)
{
return
false
;
}
*
aViewIdOut
=
nsLayoutUtils
:
:
FindOrCreateIDFor
(
aContent
)
;
if
(
nsCOMPtr
<
nsIPresShell
>
shell
=
GetPresShell
(
aContent
)
)
{
*
aPresShellIdOut
=
shell
-
>
GetPresShellId
(
)
;
return
true
;
}
return
false
;
}
void
APZCCallbackHelper
:
:
InitializeRootDisplayport
(
nsIPresShell
*
aPresShell
)
{
if
(
!
aPresShell
)
{
return
;
}
MOZ_ASSERT
(
aPresShell
-
>
GetDocument
(
)
)
;
nsIContent
*
content
=
aPresShell
-
>
GetDocument
(
)
-
>
GetDocumentElement
(
)
;
if
(
!
content
)
{
return
;
}
uint32_t
presShellId
;
FrameMetrics
:
:
ViewID
viewId
;
if
(
APZCCallbackHelper
:
:
GetOrCreateScrollIdentifiers
(
content
&
presShellId
&
viewId
)
)
{
nsLayoutUtils
:
:
SetDisplayPortMargins
(
content
aPresShell
ScreenMargin
(
)
0
nsLayoutUtils
:
:
RepaintMode
:
:
DoNotRepaint
)
;
nsLayoutUtils
:
:
SetZeroMarginDisplayPortOnAsyncScrollableAncestors
(
content
-
>
GetPrimaryFrame
(
)
nsLayoutUtils
:
:
RepaintMode
:
:
DoNotRepaint
)
;
}
}
class
FlingSnapEvent
:
public
nsRunnable
{
typedef
mozilla
:
:
layers
:
:
FrameMetrics
:
:
ViewID
ViewID
;
public
:
FlingSnapEvent
(
const
ViewID
&
aScrollId
const
mozilla
:
:
CSSPoint
&
aDestination
)
:
mScrollId
(
aScrollId
)
mDestination
(
aDestination
)
{
}
NS_IMETHOD
Run
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsIScrollableFrame
*
sf
=
nsLayoutUtils
:
:
FindScrollableFrameFor
(
mScrollId
)
;
if
(
sf
)
{
sf
-
>
FlingSnap
(
mDestination
)
;
}
return
NS_OK
;
}
protected
:
ViewID
mScrollId
;
mozilla
:
:
CSSPoint
mDestination
;
}
;
void
APZCCallbackHelper
:
:
RequestFlingSnap
(
const
FrameMetrics
:
:
ViewID
&
aScrollId
const
mozilla
:
:
CSSPoint
&
aDestination
)
{
nsCOMPtr
<
nsIRunnable
>
r1
=
new
FlingSnapEvent
(
aScrollId
aDestination
)
;
if
(
!
NS_IsMainThread
(
)
)
{
NS_DispatchToMainThread
(
r1
)
;
}
else
{
r1
-
>
Run
(
)
;
}
}
class
AcknowledgeScrollUpdateEvent
:
public
nsRunnable
{
typedef
mozilla
:
:
layers
:
:
FrameMetrics
:
:
ViewID
ViewID
;
public
:
AcknowledgeScrollUpdateEvent
(
const
ViewID
&
aScrollId
const
uint32_t
&
aScrollGeneration
)
:
mScrollId
(
aScrollId
)
mScrollGeneration
(
aScrollGeneration
)
{
}
NS_IMETHOD
Run
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsIScrollableFrame
*
sf
=
nsLayoutUtils
:
:
FindScrollableFrameFor
(
mScrollId
)
;
if
(
sf
)
{
sf
-
>
ResetScrollInfoIfGeneration
(
mScrollGeneration
)
;
}
nsCOMPtr
<
nsIContent
>
content
=
nsLayoutUtils
:
:
FindContentFor
(
mScrollId
)
;
if
(
content
)
{
content
-
>
SetProperty
(
nsGkAtoms
:
:
apzCallbackTransform
new
CSSPoint
(
)
nsINode
:
:
DeleteProperty
<
CSSPoint
>
)
;
}
return
NS_OK
;
}
protected
:
ViewID
mScrollId
;
uint32_t
mScrollGeneration
;
}
;
void
APZCCallbackHelper
:
:
AcknowledgeScrollUpdate
(
const
FrameMetrics
:
:
ViewID
&
aScrollId
const
uint32_t
&
aScrollGeneration
)
{
nsCOMPtr
<
nsIRunnable
>
r1
=
new
AcknowledgeScrollUpdateEvent
(
aScrollId
aScrollGeneration
)
;
if
(
!
NS_IsMainThread
(
)
)
{
NS_DispatchToMainThread
(
r1
)
;
}
else
{
r1
-
>
Run
(
)
;
}
}
nsIPresShell
*
APZCCallbackHelper
:
:
GetRootContentDocumentPresShellForContent
(
nsIContent
*
aContent
)
{
nsIDocument
*
doc
=
aContent
-
>
GetComposedDoc
(
)
;
if
(
!
doc
)
{
return
nullptr
;
}
nsIPresShell
*
shell
=
doc
-
>
GetShell
(
)
;
if
(
!
shell
)
{
return
nullptr
;
}
nsPresContext
*
context
=
shell
-
>
GetPresContext
(
)
;
if
(
!
context
)
{
return
nullptr
;
}
context
=
context
-
>
GetToplevelContentDocumentPresContext
(
)
;
if
(
!
context
)
{
return
nullptr
;
}
return
context
-
>
PresShell
(
)
;
}
CSSPoint
APZCCallbackHelper
:
:
ApplyCallbackTransform
(
const
CSSPoint
&
aInput
const
ScrollableLayerGuid
&
aGuid
)
{
CSSPoint
input
=
aInput
;
if
(
aGuid
.
mScrollId
=
=
FrameMetrics
:
:
NULL_SCROLL_ID
)
{
return
input
;
}
nsCOMPtr
<
nsIContent
>
content
=
nsLayoutUtils
:
:
FindContentFor
(
aGuid
.
mScrollId
)
;
if
(
!
content
)
{
return
input
;
}
#
if
!
defined
(
MOZ_SINGLE_PROCESS_APZ
)
if
(
nsIPresShell
*
shell
=
GetRootContentDocumentPresShellForContent
(
content
)
)
{
input
=
input
/
shell
-
>
GetResolution
(
)
;
}
#
endif
void
*
property
=
content
-
>
GetProperty
(
nsGkAtoms
:
:
apzCallbackTransform
)
;
if
(
property
)
{
CSSPoint
delta
=
(
*
static_cast
<
CSSPoint
*
>
(
property
)
)
;
#
if
defined
(
MOZ_SINGLE_PROCESS_APZ
)
float
resolution
=
1
.
0f
;
if
(
nsIPresShell
*
shell
=
GetRootContentDocumentPresShellForContent
(
content
)
)
{
resolution
=
shell
-
>
GetResolution
(
)
;
}
delta
.
x
=
delta
.
x
*
resolution
;
delta
.
y
=
delta
.
y
*
resolution
;
#
endif
input
+
=
delta
;
}
return
input
;
}
LayoutDeviceIntPoint
APZCCallbackHelper
:
:
ApplyCallbackTransform
(
const
LayoutDeviceIntPoint
&
aPoint
const
ScrollableLayerGuid
&
aGuid
const
CSSToLayoutDeviceScale
&
aScale
)
{
LayoutDevicePoint
point
=
LayoutDevicePoint
(
aPoint
.
x
aPoint
.
y
)
;
point
=
ApplyCallbackTransform
(
point
/
aScale
aGuid
)
*
aScale
;
return
gfx
:
:
RoundedToInt
(
point
)
;
}
void
APZCCallbackHelper
:
:
ApplyCallbackTransform
(
WidgetTouchEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
CSSToLayoutDeviceScale
&
aScale
)
{
for
(
size_t
i
=
0
;
i
<
aEvent
.
touches
.
Length
(
)
;
i
+
+
)
{
aEvent
.
touches
[
i
]
-
>
mRefPoint
=
ApplyCallbackTransform
(
aEvent
.
touches
[
i
]
-
>
mRefPoint
aGuid
aScale
)
;
}
}
nsEventStatus
APZCCallbackHelper
:
:
DispatchWidgetEvent
(
WidgetGUIEvent
&
aEvent
)
{
nsEventStatus
status
=
nsEventStatus_eConsumeNoDefault
;
if
(
aEvent
.
widget
)
{
aEvent
.
widget
-
>
DispatchEvent
(
&
aEvent
status
)
;
}
return
status
;
}
nsEventStatus
APZCCallbackHelper
:
:
DispatchSynthesizedMouseEvent
(
EventMessage
aMsg
uint64_t
aTime
const
LayoutDevicePoint
&
aRefPoint
Modifiers
aModifiers
nsIWidget
*
aWidget
)
{
MOZ_ASSERT
(
aMsg
=
=
eMouseMove
|
|
aMsg
=
=
eMouseDown
|
|
aMsg
=
=
eMouseUp
|
|
aMsg
=
=
eMouseLongTap
)
;
WidgetMouseEvent
event
(
true
aMsg
nullptr
WidgetMouseEvent
:
:
eReal
WidgetMouseEvent
:
:
eNormal
)
;
event
.
refPoint
=
LayoutDeviceIntPoint
(
aRefPoint
.
x
aRefPoint
.
y
)
;
event
.
time
=
aTime
;
event
.
button
=
WidgetMouseEvent
:
:
eLeftButton
;
event
.
inputSource
=
nsIDOMMouseEvent
:
:
MOZ_SOURCE_TOUCH
;
event
.
ignoreRootScrollFrame
=
true
;
if
(
aMsg
!
=
eMouseMove
)
{
event
.
clickCount
=
1
;
}
event
.
modifiers
=
aModifiers
;
event
.
widget
=
aWidget
;
return
DispatchWidgetEvent
(
event
)
;
}
bool
APZCCallbackHelper
:
:
DispatchMouseEvent
(
const
nsCOMPtr
<
nsIPresShell
>
&
aPresShell
const
nsString
&
aType
const
CSSPoint
&
aPoint
int32_t
aButton
int32_t
aClickCount
int32_t
aModifiers
bool
aIgnoreRootScrollFrame
unsigned
short
aInputSourceArg
)
{
NS_ENSURE_TRUE
(
aPresShell
true
)
;
bool
defaultPrevented
=
false
;
nsContentUtils
:
:
SendMouseEvent
(
aPresShell
aType
aPoint
.
x
aPoint
.
y
aButton
aClickCount
aModifiers
aIgnoreRootScrollFrame
0
aInputSourceArg
false
&
defaultPrevented
false
)
;
return
defaultPrevented
;
}
void
APZCCallbackHelper
:
:
FireSingleTapEvent
(
const
LayoutDevicePoint
&
aPoint
Modifiers
aModifiers
nsIWidget
*
aWidget
)
{
if
(
aWidget
-
>
Destroyed
(
)
)
{
return
;
}
APZCCH_LOG
(
"
Dispatching
single
-
tap
component
events
to
%
s
\
n
"
Stringify
(
aPoint
)
.
c_str
(
)
)
;
int
time
=
0
;
DispatchSynthesizedMouseEvent
(
eMouseMove
time
aPoint
aModifiers
aWidget
)
;
DispatchSynthesizedMouseEvent
(
eMouseDown
time
aPoint
aModifiers
aWidget
)
;
DispatchSynthesizedMouseEvent
(
eMouseUp
time
aPoint
aModifiers
aWidget
)
;
}
static
dom
:
:
Element
*
GetDisplayportElementFor
(
nsIScrollableFrame
*
aScrollableFrame
)
{
if
(
!
aScrollableFrame
)
{
return
nullptr
;
}
nsIFrame
*
scrolledFrame
=
aScrollableFrame
-
>
GetScrolledFrame
(
)
;
if
(
!
scrolledFrame
)
{
return
nullptr
;
}
nsIContent
*
content
=
scrolledFrame
-
>
GetContent
(
)
;
MOZ_ASSERT
(
content
-
>
IsElement
(
)
)
;
return
content
-
>
AsElement
(
)
;
}
static
dom
:
:
Element
*
GetRootDocumentElementFor
(
nsIWidget
*
aWidget
)
{
if
(
nsView
*
view
=
nsView
:
:
GetViewFor
(
aWidget
)
)
{
if
(
nsIPresShell
*
shell
=
view
-
>
GetPresShell
(
)
)
{
MOZ_ASSERT
(
shell
-
>
GetDocument
(
)
)
;
return
shell
-
>
GetDocument
(
)
-
>
GetDocumentElement
(
)
;
}
}
return
nullptr
;
}
static
bool
PrepareForSetTargetAPZCNotification
(
nsIWidget
*
aWidget
const
ScrollableLayerGuid
&
aGuid
nsIFrame
*
aRootFrame
const
LayoutDeviceIntPoint
&
aRefPoint
nsTArray
<
ScrollableLayerGuid
>
*
aTargets
)
{
ScrollableLayerGuid
guid
(
aGuid
.
mLayersId
0
FrameMetrics
:
:
NULL_SCROLL_ID
)
;
nsPoint
point
=
nsLayoutUtils
:
:
GetEventCoordinatesRelativeTo
(
aWidget
aRefPoint
aRootFrame
)
;
nsIFrame
*
target
=
nsLayoutUtils
:
:
GetFrameForPoint
(
aRootFrame
point
nsLayoutUtils
:
:
IGNORE_ROOT_SCROLL_FRAME
)
;
nsIScrollableFrame
*
scrollAncestor
=
target
?
nsLayoutUtils
:
:
GetAsyncScrollableAncestorFrame
(
target
)
:
aRootFrame
-
>
PresContext
(
)
-
>
PresShell
(
)
-
>
GetRootScrollFrameAsScrollable
(
)
;
nsCOMPtr
<
dom
:
:
Element
>
dpElement
=
scrollAncestor
?
GetDisplayportElementFor
(
scrollAncestor
)
:
GetRootDocumentElementFor
(
aWidget
)
;
nsAutoString
dpElementDesc
;
if
(
dpElement
)
{
dpElement
-
>
Describe
(
dpElementDesc
)
;
}
APZCCH_LOG
(
"
For
event
at
%
s
found
scrollable
element
%
p
(
%
s
)
\
n
"
Stringify
(
aRefPoint
)
.
c_str
(
)
dpElement
.
get
(
)
NS_LossyConvertUTF16toASCII
(
dpElementDesc
)
.
get
(
)
)
;
bool
guidIsValid
=
APZCCallbackHelper
:
:
GetOrCreateScrollIdentifiers
(
dpElement
&
(
guid
.
mPresShellId
)
&
(
guid
.
mScrollId
)
)
;
aTargets
-
>
AppendElement
(
guid
)
;
if
(
!
guidIsValid
|
|
nsLayoutUtils
:
:
GetDisplayPort
(
dpElement
nullptr
)
)
{
return
false
;
}
if
(
!
scrollAncestor
)
{
MOZ_ASSERT
(
false
)
;
APZCCH_LOG
(
"
Widget
%
p
'
s
document
element
%
p
didn
'
t
have
a
displayport
\
n
"
aWidget
dpElement
.
get
(
)
)
;
APZCCallbackHelper
:
:
InitializeRootDisplayport
(
aRootFrame
-
>
PresContext
(
)
-
>
PresShell
(
)
)
;
return
false
;
}
APZCCH_LOG
(
"
%
p
didn
'
t
have
a
displayport
so
setting
one
.
.
.
\
n
"
dpElement
.
get
(
)
)
;
bool
activated
=
nsLayoutUtils
:
:
CalculateAndSetDisplayPortMargins
(
scrollAncestor
nsLayoutUtils
:
:
RepaintMode
:
:
Repaint
)
;
if
(
!
activated
)
{
return
false
;
}
nsIFrame
*
frame
=
do_QueryFrame
(
scrollAncestor
)
;
nsLayoutUtils
:
:
SetZeroMarginDisplayPortOnAsyncScrollableAncestors
(
frame
nsLayoutUtils
:
:
RepaintMode
:
:
Repaint
)
;
return
true
;
}
static
void
SendLayersDependentApzcTargetConfirmation
(
nsIPresShell
*
aShell
uint64_t
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
)
{
LayerManager
*
lm
=
aShell
-
>
GetLayerManager
(
)
;
if
(
!
lm
)
{
return
;
}
LayerTransactionChild
*
shadow
=
lm
-
>
AsShadowForwarder
(
)
-
>
GetShadowManager
(
)
;
if
(
!
shadow
)
{
return
;
}
shadow
-
>
SendSetConfirmedTargetAPZC
(
aInputBlockId
aTargets
)
;
}
class
DisplayportSetListener
:
public
nsAPostRefreshObserver
{
public
:
DisplayportSetListener
(
nsIPresShell
*
aPresShell
const
uint64_t
&
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
)
:
mPresShell
(
aPresShell
)
mInputBlockId
(
aInputBlockId
)
mTargets
(
aTargets
)
{
}
virtual
~
DisplayportSetListener
(
)
{
}
void
DidRefresh
(
)
override
{
if
(
!
mPresShell
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Post
-
refresh
observer
fired
again
after
failed
attempt
at
unregistering
it
"
)
;
return
;
}
APZCCH_LOG
(
"
Got
refresh
sending
target
APZCs
for
input
block
%
"
PRIu64
"
\
n
"
mInputBlockId
)
;
SendLayersDependentApzcTargetConfirmation
(
mPresShell
mInputBlockId
mTargets
)
;
if
(
!
mPresShell
-
>
RemovePostRefreshObserver
(
this
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Unable
to
unregister
post
-
refresh
observer
!
Leaking
it
instead
of
leaving
garbage
registered
"
)
;
mPresShell
=
nullptr
;
return
;
}
delete
this
;
}
private
:
RefPtr
<
nsIPresShell
>
mPresShell
;
uint64_t
mInputBlockId
;
nsTArray
<
ScrollableLayerGuid
>
mTargets
;
}
;
static
void
SendSetTargetAPZCNotificationHelper
(
nsIWidget
*
aWidget
nsIPresShell
*
aShell
const
uint64_t
&
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
bool
aWaitForRefresh
)
{
bool
waitForRefresh
=
aWaitForRefresh
;
if
(
waitForRefresh
)
{
APZCCH_LOG
(
"
At
least
one
target
got
a
new
displayport
need
to
wait
for
refresh
\
n
"
)
;
waitForRefresh
=
aShell
-
>
AddPostRefreshObserver
(
new
DisplayportSetListener
(
aShell
aInputBlockId
aTargets
)
)
;
}
if
(
!
waitForRefresh
)
{
APZCCH_LOG
(
"
Sending
target
APZCs
for
input
block
%
"
PRIu64
"
\
n
"
aInputBlockId
)
;
aWidget
-
>
SetConfirmedTargetAPZC
(
aInputBlockId
aTargets
)
;
}
else
{
APZCCH_LOG
(
"
Successfully
registered
post
-
refresh
observer
\
n
"
)
;
}
}
void
APZCCallbackHelper
:
:
SendSetTargetAPZCNotification
(
nsIWidget
*
aWidget
nsIDocument
*
aDocument
const
WidgetGUIEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
uint64_t
aInputBlockId
)
{
if
(
!
aWidget
|
|
!
aDocument
)
{
return
;
}
if
(
aInputBlockId
=
=
sLastTargetAPZCNotificationInputBlock
)
{
APZCCH_LOG
(
"
Not
resending
target
APZC
confirmation
for
input
block
%
"
PRIu64
"
\
n
"
aInputBlockId
)
;
return
;
}
sLastTargetAPZCNotificationInputBlock
=
aInputBlockId
;
if
(
nsIPresShell
*
shell
=
aDocument
-
>
GetShell
(
)
)
{
if
(
nsIFrame
*
rootFrame
=
shell
-
>
GetRootFrame
(
)
)
{
bool
waitForRefresh
=
false
;
nsTArray
<
ScrollableLayerGuid
>
targets
;
if
(
const
WidgetTouchEvent
*
touchEvent
=
aEvent
.
AsTouchEvent
(
)
)
{
for
(
size_t
i
=
0
;
i
<
touchEvent
-
>
touches
.
Length
(
)
;
i
+
+
)
{
waitForRefresh
|
=
PrepareForSetTargetAPZCNotification
(
aWidget
aGuid
rootFrame
touchEvent
-
>
touches
[
i
]
-
>
mRefPoint
&
targets
)
;
}
}
else
if
(
const
WidgetWheelEvent
*
wheelEvent
=
aEvent
.
AsWheelEvent
(
)
)
{
waitForRefresh
=
PrepareForSetTargetAPZCNotification
(
aWidget
aGuid
rootFrame
wheelEvent
-
>
refPoint
&
targets
)
;
}
if
(
!
targets
.
IsEmpty
(
)
)
{
SendSetTargetAPZCNotificationHelper
(
aWidget
shell
aInputBlockId
targets
waitForRefresh
)
;
}
}
}
}
void
APZCCallbackHelper
:
:
SendSetAllowedTouchBehaviorNotification
(
nsIWidget
*
aWidget
const
WidgetTouchEvent
&
aEvent
uint64_t
aInputBlockId
const
SetAllowedTouchBehaviorCallback
&
aCallback
)
{
nsTArray
<
TouchBehaviorFlags
>
flags
;
for
(
uint32_t
i
=
0
;
i
<
aEvent
.
touches
.
Length
(
)
;
i
+
+
)
{
flags
.
AppendElement
(
widget
:
:
ContentHelper
:
:
GetAllowedTouchBehavior
(
aWidget
aEvent
.
touches
[
i
]
-
>
mRefPoint
)
)
;
}
aCallback
(
aInputBlockId
flags
)
;
}
void
APZCCallbackHelper
:
:
NotifyMozMouseScrollEvent
(
const
FrameMetrics
:
:
ViewID
&
aScrollId
const
nsString
&
aEvent
)
{
nsCOMPtr
<
nsIContent
>
targetContent
=
nsLayoutUtils
:
:
FindContentFor
(
aScrollId
)
;
if
(
!
targetContent
)
{
return
;
}
nsCOMPtr
<
nsIDocument
>
ownerDoc
=
targetContent
-
>
OwnerDoc
(
)
;
if
(
!
ownerDoc
)
{
return
;
}
nsContentUtils
:
:
DispatchTrustedEvent
(
ownerDoc
targetContent
aEvent
true
true
)
;
}
void
APZCCallbackHelper
:
:
NotifyFlushComplete
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
MOZ_ASSERT
(
observerService
)
;
observerService
-
>
NotifyObservers
(
nullptr
"
apz
-
repaints
-
flushed
"
nullptr
)
;
}
static
int32_t
sActiveSuppressDisplayport
=
0
;
void
APZCCallbackHelper
:
:
SuppressDisplayport
(
const
bool
&
aEnabled
)
{
if
(
aEnabled
)
{
sActiveSuppressDisplayport
+
+
;
}
else
{
sActiveSuppressDisplayport
-
-
;
}
MOZ_ASSERT
(
sActiveSuppressDisplayport
>
=
0
)
;
}
bool
APZCCallbackHelper
:
:
IsDisplayportSuppressed
(
)
{
return
sActiveSuppressDisplayport
>
0
;
}
}
}
