#
include
"
APZCCallbackHelper
.
h
"
#
include
"
TouchActionHelper
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
MouseEventBinding
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
IntegerPrintfMacros
.
h
"
#
include
"
mozilla
/
layers
/
LayerTransactionChild
.
h
"
#
include
"
mozilla
/
layers
/
ShadowLayers
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderLayerManager
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderBridgeChild
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
TouchEvents
.
h
"
#
include
"
mozilla
/
ViewportUtils
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIDOMWindowUtils
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsView
.
h
"
#
include
"
Layers
.
h
"
static
mozilla
:
:
LazyLogModule
sApzHlpLog
(
"
apz
.
helper
"
)
;
#
define
APZCCH_LOG
(
.
.
.
)
MOZ_LOG
(
sApzHlpLog
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
namespace
mozilla
{
namespace
layers
{
using
dom
:
:
BrowserParent
;
uint64_t
APZCCallbackHelper
:
:
sLastTargetAPZCNotificationInputBlock
=
uint64_t
(
-
1
)
;
ScreenMargin
APZCCallbackHelper
:
:
AdjustDisplayPortForScrollDelta
(
const
RepaintRequest
&
aRequest
const
CSSPoint
&
aActualScrollOffset
)
{
ScreenPoint
shift
=
(
aRequest
.
GetScrollOffset
(
)
-
aActualScrollOffset
)
*
aRequest
.
DisplayportPixelsPerCSSPixel
(
)
;
ScreenMargin
margins
=
aRequest
.
GetDisplayPortMargins
(
)
;
margins
.
left
-
=
shift
.
x
;
margins
.
right
+
=
shift
.
x
;
margins
.
top
-
=
shift
.
y
;
margins
.
bottom
+
=
shift
.
y
;
return
margins
;
}
static
ScreenMargin
RecenterDisplayPort
(
const
ScreenMargin
&
aDisplayPort
)
{
ScreenMargin
margins
=
aDisplayPort
;
margins
.
right
=
margins
.
left
=
margins
.
LeftRight
(
)
/
2
;
margins
.
top
=
margins
.
bottom
=
margins
.
TopBottom
(
)
/
2
;
return
margins
;
}
static
PresShell
*
GetPresShell
(
const
nsIContent
*
aContent
)
{
if
(
dom
:
:
Document
*
doc
=
aContent
-
>
GetComposedDoc
(
)
)
{
return
doc
-
>
GetPresShell
(
)
;
}
return
nullptr
;
}
static
CSSPoint
ScrollFrameTo
(
nsIScrollableFrame
*
aFrame
const
RepaintRequest
&
aRequest
bool
&
aSuccessOut
)
{
aSuccessOut
=
false
;
CSSPoint
targetScrollPosition
=
aRequest
.
IsRootContent
(
)
?
aRequest
.
GetLayoutViewport
(
)
.
TopLeft
(
)
:
aRequest
.
GetScrollOffset
(
)
;
if
(
!
aFrame
)
{
return
targetScrollPosition
;
}
CSSPoint
geckoScrollPosition
=
CSSPoint
:
:
FromAppUnits
(
aFrame
-
>
GetScrollPosition
(
)
)
;
if
(
!
aRequest
.
GetScrollOffsetUpdated
(
)
)
{
return
geckoScrollPosition
;
}
if
(
aFrame
-
>
GetScrollStyles
(
)
.
mVertical
=
=
StyleOverflow
:
:
Hidden
&
&
targetScrollPosition
.
y
!
=
geckoScrollPosition
.
y
)
{
NS_WARNING
(
nsPrintfCString
(
"
APZCCH
:
targetScrollPosition
.
y
(
%
f
)
!
=
geckoScrollPosition
.
y
(
%
f
)
"
targetScrollPosition
.
y
geckoScrollPosition
.
y
)
.
get
(
)
)
;
}
if
(
aFrame
-
>
GetScrollStyles
(
)
.
mHorizontal
=
=
StyleOverflow
:
:
Hidden
&
&
targetScrollPosition
.
x
!
=
geckoScrollPosition
.
x
)
{
NS_WARNING
(
nsPrintfCString
(
"
APZCCH
:
targetScrollPosition
.
x
(
%
f
)
!
=
geckoScrollPosition
.
x
(
%
f
)
"
targetScrollPosition
.
x
geckoScrollPosition
.
x
)
.
get
(
)
)
;
}
bool
scrollInProgress
=
APZCCallbackHelper
:
:
IsScrollInProgress
(
aFrame
)
;
if
(
!
scrollInProgress
)
{
aFrame
-
>
ScrollToCSSPixelsApproximate
(
targetScrollPosition
nsGkAtoms
:
:
apz
)
;
geckoScrollPosition
=
CSSPoint
:
:
FromAppUnits
(
aFrame
-
>
GetScrollPosition
(
)
)
;
aSuccessOut
=
true
;
}
return
geckoScrollPosition
;
}
static
ScreenMargin
ScrollFrame
(
nsIContent
*
aContent
const
RepaintRequest
&
aRequest
)
{
nsIScrollableFrame
*
sf
=
nsLayoutUtils
:
:
FindScrollableFrameFor
(
aRequest
.
GetScrollId
(
)
)
;
if
(
sf
)
{
sf
-
>
ResetScrollInfoIfGeneration
(
aRequest
.
GetScrollGeneration
(
)
)
;
sf
-
>
SetScrollableByAPZ
(
!
aRequest
.
IsScrollInfoLayer
(
)
)
;
if
(
sf
-
>
IsRootScrollFrameOfDocument
(
)
)
{
if
(
!
APZCCallbackHelper
:
:
IsScrollInProgress
(
sf
)
)
{
if
(
RefPtr
<
PresShell
>
presShell
=
GetPresShell
(
aContent
)
)
{
if
(
presShell
-
>
SetVisualViewportOffset
(
CSSPoint
:
:
ToAppUnits
(
aRequest
.
GetScrollOffset
(
)
)
presShell
-
>
GetLayoutViewportOffset
(
)
)
)
{
sf
-
>
MarkEverScrolled
(
)
;
}
}
}
}
}
bool
scrollUpdated
=
false
;
ScreenMargin
displayPortMargins
=
aRequest
.
GetDisplayPortMargins
(
)
;
CSSPoint
apzScrollOffset
=
aRequest
.
GetScrollOffset
(
)
;
CSSPoint
actualScrollOffset
=
ScrollFrameTo
(
sf
aRequest
scrollUpdated
)
;
if
(
scrollUpdated
)
{
if
(
aRequest
.
IsScrollInfoLayer
(
)
)
{
if
(
nsIFrame
*
frame
=
aContent
-
>
GetPrimaryFrame
(
)
)
{
frame
-
>
SchedulePaint
(
)
;
}
}
else
{
displayPortMargins
=
APZCCallbackHelper
:
:
AdjustDisplayPortForScrollDelta
(
aRequest
actualScrollOffset
)
;
}
}
else
if
(
aRequest
.
IsRootContent
(
)
&
&
aRequest
.
GetScrollOffset
(
)
!
=
aRequest
.
GetLayoutViewport
(
)
.
TopLeft
(
)
)
{
displayPortMargins
=
APZCCallbackHelper
:
:
AdjustDisplayPortForScrollDelta
(
aRequest
actualScrollOffset
)
;
}
else
{
displayPortMargins
=
RecenterDisplayPort
(
aRequest
.
GetDisplayPortMargins
(
)
)
;
}
bool
mainThreadScrollChanged
=
sf
&
&
sf
-
>
CurrentScrollGeneration
(
)
!
=
aRequest
.
GetScrollGeneration
(
)
&
&
nsLayoutUtils
:
:
CanScrollOriginClobberApz
(
sf
-
>
LastScrollOrigin
(
)
)
;
if
(
aContent
&
&
!
mainThreadScrollChanged
)
{
CSSPoint
scrollDelta
=
apzScrollOffset
-
actualScrollOffset
;
aContent
-
>
SetProperty
(
nsGkAtoms
:
:
apzCallbackTransform
new
CSSPoint
(
scrollDelta
)
nsINode
:
:
DeleteProperty
<
CSSPoint
>
)
;
}
return
displayPortMargins
;
}
static
void
SetDisplayPortMargins
(
PresShell
*
aPresShell
nsIContent
*
aContent
ScreenMargin
aDisplayPortMargins
CSSSize
aDisplayPortBase
)
{
if
(
!
aContent
)
{
return
;
}
bool
hadDisplayPort
=
nsLayoutUtils
:
:
HasDisplayPort
(
aContent
)
;
nsLayoutUtils
:
:
SetDisplayPortMargins
(
aContent
aPresShell
aDisplayPortMargins
0
)
;
if
(
!
hadDisplayPort
)
{
nsLayoutUtils
:
:
SetZeroMarginDisplayPortOnAsyncScrollableAncestors
(
aContent
-
>
GetPrimaryFrame
(
)
)
;
}
nsRect
base
(
0
0
aDisplayPortBase
.
width
*
AppUnitsPerCSSPixel
(
)
aDisplayPortBase
.
height
*
AppUnitsPerCSSPixel
(
)
)
;
nsLayoutUtils
:
:
SetDisplayPortBaseIfNotSet
(
aContent
base
)
;
}
static
void
SetPaintRequestTime
(
nsIContent
*
aContent
const
TimeStamp
&
aPaintRequestTime
)
{
aContent
-
>
SetProperty
(
nsGkAtoms
:
:
paintRequestTime
new
TimeStamp
(
aPaintRequestTime
)
nsINode
:
:
DeleteProperty
<
TimeStamp
>
)
;
}
void
APZCCallbackHelper
:
:
NotifyLayerTransforms
(
const
nsTArray
<
MatrixMessage
>
&
aTransforms
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
for
(
const
MatrixMessage
&
msg
:
aTransforms
)
{
BrowserParent
*
parent
=
BrowserParent
:
:
GetBrowserParentFromLayersId
(
msg
.
GetLayersId
(
)
)
;
if
(
parent
)
{
parent
-
>
SetChildToParentConversionMatrix
(
ViewAs
<
LayoutDeviceToLayoutDeviceMatrix4x4
>
(
msg
.
GetMatrix
(
)
PixelCastJustification
:
:
ContentProcessIsLayerInUiProcess
)
msg
.
GetTopLevelViewportVisibleRectInBrowserCoords
(
)
)
;
}
}
}
void
APZCCallbackHelper
:
:
UpdateRootFrame
(
const
RepaintRequest
&
aRequest
)
{
if
(
aRequest
.
GetScrollId
(
)
=
=
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
)
{
return
;
}
nsIContent
*
content
=
nsLayoutUtils
:
:
FindContentFor
(
aRequest
.
GetScrollId
(
)
)
;
if
(
!
content
)
{
return
;
}
RefPtr
<
PresShell
>
presShell
=
GetPresShell
(
content
)
;
if
(
!
presShell
|
|
aRequest
.
GetPresShellId
(
)
!
=
presShell
-
>
GetPresShellId
(
)
)
{
return
;
}
if
(
nsLayoutUtils
:
:
AllowZoomingForDocument
(
presShell
-
>
GetDocument
(
)
)
&
&
aRequest
.
GetScrollOffsetUpdated
(
)
)
{
float
presShellResolution
=
presShell
-
>
GetResolution
(
)
;
if
(
!
FuzzyEqualsMultiplicative
(
presShellResolution
aRequest
.
GetPresShellResolution
(
)
)
)
{
return
;
}
presShellResolution
=
aRequest
.
GetPresShellResolution
(
)
*
aRequest
.
GetAsyncZoom
(
)
.
scale
;
presShell
-
>
SetResolutionAndScaleTo
(
presShellResolution
ResolutionChangeOrigin
:
:
Apz
)
;
}
ScreenMargin
displayPortMargins
=
ScrollFrame
(
content
aRequest
)
;
SetDisplayPortMargins
(
presShell
content
displayPortMargins
aRequest
.
CalculateCompositedSizeInCssPixels
(
)
)
;
SetPaintRequestTime
(
content
aRequest
.
GetPaintRequestTime
(
)
)
;
}
void
APZCCallbackHelper
:
:
UpdateSubFrame
(
const
RepaintRequest
&
aRequest
)
{
if
(
aRequest
.
GetScrollId
(
)
=
=
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
)
{
return
;
}
nsIContent
*
content
=
nsLayoutUtils
:
:
FindContentFor
(
aRequest
.
GetScrollId
(
)
)
;
if
(
!
content
)
{
return
;
}
ScreenMargin
displayPortMargins
=
ScrollFrame
(
content
aRequest
)
;
if
(
RefPtr
<
PresShell
>
presShell
=
GetPresShell
(
content
)
)
{
SetDisplayPortMargins
(
presShell
content
displayPortMargins
aRequest
.
CalculateCompositedSizeInCssPixels
(
)
)
;
}
SetPaintRequestTime
(
content
aRequest
.
GetPaintRequestTime
(
)
)
;
}
bool
APZCCallbackHelper
:
:
GetOrCreateScrollIdentifiers
(
nsIContent
*
aContent
uint32_t
*
aPresShellIdOut
ScrollableLayerGuid
:
:
ViewID
*
aViewIdOut
)
{
if
(
!
aContent
)
{
return
false
;
}
*
aViewIdOut
=
nsLayoutUtils
:
:
FindOrCreateIDFor
(
aContent
)
;
if
(
PresShell
*
presShell
=
GetPresShell
(
aContent
)
)
{
*
aPresShellIdOut
=
presShell
-
>
GetPresShellId
(
)
;
return
true
;
}
return
false
;
}
void
APZCCallbackHelper
:
:
InitializeRootDisplayport
(
PresShell
*
aPresShell
)
{
if
(
!
aPresShell
)
{
return
;
}
MOZ_ASSERT
(
aPresShell
-
>
GetDocument
(
)
)
;
nsIContent
*
content
=
aPresShell
-
>
GetDocument
(
)
-
>
GetDocumentElement
(
)
;
if
(
!
content
)
{
return
;
}
uint32_t
presShellId
;
ScrollableLayerGuid
:
:
ViewID
viewId
;
if
(
APZCCallbackHelper
:
:
GetOrCreateScrollIdentifiers
(
content
&
presShellId
&
viewId
)
)
{
nsPresContext
*
pc
=
aPresShell
-
>
GetPresContext
(
)
;
MOZ_ASSERT
(
!
pc
|
|
pc
-
>
IsRootContentDocumentCrossProcess
(
)
|
|
!
pc
-
>
GetParentPresContext
(
)
)
;
nsIFrame
*
frame
=
aPresShell
-
>
GetRootScrollFrame
(
)
;
if
(
!
frame
)
{
frame
=
aPresShell
-
>
GetRootFrame
(
)
;
}
nsRect
baseRect
;
if
(
frame
)
{
baseRect
=
nsRect
(
nsPoint
(
0
0
)
nsLayoutUtils
:
:
CalculateCompositionSizeForFrame
(
frame
)
)
;
}
else
if
(
pc
)
{
baseRect
=
nsRect
(
nsPoint
(
0
0
)
pc
-
>
GetVisibleArea
(
)
.
Size
(
)
)
;
}
nsLayoutUtils
:
:
SetDisplayPortBaseIfNotSet
(
content
baseRect
)
;
nsLayoutUtils
:
:
SetDisplayPortMargins
(
content
aPresShell
ScreenMargin
(
)
0
)
;
nsLayoutUtils
:
:
SetZeroMarginDisplayPortOnAsyncScrollableAncestors
(
content
-
>
GetPrimaryFrame
(
)
)
;
}
}
nsPresContext
*
APZCCallbackHelper
:
:
GetPresContextForContent
(
nsIContent
*
aContent
)
{
dom
:
:
Document
*
doc
=
aContent
-
>
GetComposedDoc
(
)
;
if
(
!
doc
)
{
return
nullptr
;
}
PresShell
*
presShell
=
doc
-
>
GetPresShell
(
)
;
if
(
!
presShell
)
{
return
nullptr
;
}
return
presShell
-
>
GetPresContext
(
)
;
}
PresShell
*
APZCCallbackHelper
:
:
GetRootContentDocumentPresShellForContent
(
nsIContent
*
aContent
)
{
nsPresContext
*
context
=
GetPresContextForContent
(
aContent
)
;
if
(
!
context
)
{
return
nullptr
;
}
context
=
context
-
>
GetToplevelContentDocumentPresContext
(
)
;
if
(
!
context
)
{
return
nullptr
;
}
return
context
-
>
PresShell
(
)
;
}
nsEventStatus
APZCCallbackHelper
:
:
DispatchWidgetEvent
(
WidgetGUIEvent
&
aEvent
)
{
nsEventStatus
status
=
nsEventStatus_eConsumeNoDefault
;
if
(
aEvent
.
mWidget
)
{
aEvent
.
mWidget
-
>
DispatchEvent
(
&
aEvent
status
)
;
}
return
status
;
}
nsEventStatus
APZCCallbackHelper
:
:
DispatchSynthesizedMouseEvent
(
EventMessage
aMsg
uint64_t
aTime
const
LayoutDevicePoint
&
aRefPoint
Modifiers
aModifiers
int32_t
aClickCount
nsIWidget
*
aWidget
)
{
MOZ_ASSERT
(
aMsg
=
=
eMouseMove
|
|
aMsg
=
=
eMouseDown
|
|
aMsg
=
=
eMouseUp
|
|
aMsg
=
=
eMouseLongTap
)
;
WidgetMouseEvent
event
(
true
aMsg
aWidget
WidgetMouseEvent
:
:
eReal
WidgetMouseEvent
:
:
eNormal
)
;
event
.
mRefPoint
=
LayoutDeviceIntPoint
:
:
Truncate
(
aRefPoint
.
x
aRefPoint
.
y
)
;
event
.
mTime
=
aTime
;
event
.
mButton
=
MouseButton
:
:
eLeft
;
event
.
mInputSource
=
dom
:
:
MouseEvent_Binding
:
:
MOZ_SOURCE_TOUCH
;
if
(
aMsg
=
=
eMouseLongTap
)
{
event
.
mFlags
.
mOnlyChromeDispatch
=
true
;
}
if
(
aMsg
!
=
eMouseMove
)
{
event
.
mClickCount
=
aClickCount
;
}
event
.
mModifiers
=
aModifiers
;
event
.
convertToPointer
=
false
;
return
DispatchWidgetEvent
(
event
)
;
}
bool
APZCCallbackHelper
:
:
DispatchMouseEvent
(
PresShell
*
aPresShell
const
nsString
&
aType
const
CSSPoint
&
aPoint
int32_t
aButton
int32_t
aClickCount
int32_t
aModifiers
bool
aIgnoreRootScrollFrame
unsigned
short
aInputSourceArg
uint32_t
aPointerId
)
{
NS_ENSURE_TRUE
(
aPresShell
true
)
;
bool
defaultPrevented
=
false
;
nsContentUtils
:
:
SendMouseEvent
(
aPresShell
aType
aPoint
.
x
aPoint
.
y
aButton
nsIDOMWindowUtils
:
:
MOUSE_BUTTONS_NOT_SPECIFIED
aClickCount
aModifiers
aIgnoreRootScrollFrame
0
aInputSourceArg
aPointerId
false
&
defaultPrevented
false
false
)
;
return
defaultPrevented
;
}
void
APZCCallbackHelper
:
:
FireSingleTapEvent
(
const
LayoutDevicePoint
&
aPoint
Modifiers
aModifiers
int32_t
aClickCount
nsIWidget
*
aWidget
)
{
if
(
aWidget
-
>
Destroyed
(
)
)
{
return
;
}
APZCCH_LOG
(
"
Dispatching
single
-
tap
component
events
to
%
s
\
n
"
Stringify
(
aPoint
)
.
c_str
(
)
)
;
int
time
=
0
;
DispatchSynthesizedMouseEvent
(
eMouseMove
time
aPoint
aModifiers
aClickCount
aWidget
)
;
DispatchSynthesizedMouseEvent
(
eMouseDown
time
aPoint
aModifiers
aClickCount
aWidget
)
;
DispatchSynthesizedMouseEvent
(
eMouseUp
time
aPoint
aModifiers
aClickCount
aWidget
)
;
}
static
dom
:
:
Element
*
GetDisplayportElementFor
(
nsIScrollableFrame
*
aScrollableFrame
)
{
if
(
!
aScrollableFrame
)
{
return
nullptr
;
}
nsIFrame
*
scrolledFrame
=
aScrollableFrame
-
>
GetScrolledFrame
(
)
;
if
(
!
scrolledFrame
)
{
return
nullptr
;
}
nsIContent
*
content
=
scrolledFrame
-
>
GetContent
(
)
;
MOZ_ASSERT
(
content
-
>
IsElement
(
)
)
;
return
content
-
>
AsElement
(
)
;
}
static
dom
:
:
Element
*
GetRootDocumentElementFor
(
nsIWidget
*
aWidget
)
{
if
(
nsView
*
view
=
nsView
:
:
GetViewFor
(
aWidget
)
)
{
if
(
PresShell
*
presShell
=
view
-
>
GetPresShell
(
)
)
{
MOZ_ASSERT
(
presShell
-
>
GetDocument
(
)
)
;
return
presShell
-
>
GetDocument
(
)
-
>
GetDocumentElement
(
)
;
}
}
return
nullptr
;
}
namespace
{
using
FrameForPointOption
=
nsLayoutUtils
:
:
FrameForPointOption
;
static
bool
PrepareForSetTargetAPZCNotification
(
nsIWidget
*
aWidget
const
LayersId
&
aLayersId
nsIFrame
*
aRootFrame
const
LayoutDeviceIntPoint
&
aRefPoint
nsTArray
<
ScrollableLayerGuid
>
*
aTargets
)
{
ScrollableLayerGuid
guid
(
aLayersId
0
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
)
;
nsPoint
point
=
nsLayoutUtils
:
:
GetEventCoordinatesRelativeTo
(
aWidget
aRefPoint
aRootFrame
)
;
nsIFrame
*
target
=
nsLayoutUtils
:
:
GetFrameForPoint
(
aRootFrame
point
)
;
nsIScrollableFrame
*
scrollAncestor
=
target
?
nsLayoutUtils
:
:
GetAsyncScrollableAncestorFrame
(
target
)
:
aRootFrame
-
>
PresShell
(
)
-
>
GetRootScrollFrameAsScrollable
(
)
;
nsCOMPtr
<
dom
:
:
Element
>
dpElement
=
scrollAncestor
?
GetDisplayportElementFor
(
scrollAncestor
)
:
GetRootDocumentElementFor
(
aWidget
)
;
if
(
MOZ_LOG_TEST
(
sApzHlpLog
LogLevel
:
:
Debug
)
)
{
nsAutoString
dpElementDesc
;
if
(
dpElement
)
{
dpElement
-
>
Describe
(
dpElementDesc
)
;
}
APZCCH_LOG
(
"
For
event
at
%
s
found
scrollable
element
%
p
(
%
s
)
\
n
"
Stringify
(
aRefPoint
)
.
c_str
(
)
dpElement
.
get
(
)
NS_LossyConvertUTF16toASCII
(
dpElementDesc
)
.
get
(
)
)
;
}
bool
guidIsValid
=
APZCCallbackHelper
:
:
GetOrCreateScrollIdentifiers
(
dpElement
&
(
guid
.
mPresShellId
)
&
(
guid
.
mScrollId
)
)
;
aTargets
-
>
AppendElement
(
guid
)
;
if
(
!
guidIsValid
)
{
return
false
;
}
if
(
nsLayoutUtils
:
:
HasDisplayPort
(
dpElement
)
)
{
return
!
nsLayoutUtils
:
:
HasPaintedDisplayPort
(
dpElement
)
;
}
if
(
!
scrollAncestor
)
{
APZCCH_LOG
(
"
Widget
%
p
'
s
document
element
%
p
didn
'
t
have
a
displayport
\
n
"
aWidget
dpElement
.
get
(
)
)
;
APZCCallbackHelper
:
:
InitializeRootDisplayport
(
aRootFrame
-
>
PresShell
(
)
)
;
return
false
;
}
APZCCH_LOG
(
"
%
p
didn
'
t
have
a
displayport
so
setting
one
.
.
.
\
n
"
dpElement
.
get
(
)
)
;
bool
activated
=
nsLayoutUtils
:
:
CalculateAndSetDisplayPortMargins
(
scrollAncestor
nsLayoutUtils
:
:
RepaintMode
:
:
Repaint
)
;
if
(
!
activated
)
{
return
false
;
}
nsIFrame
*
frame
=
do_QueryFrame
(
scrollAncestor
)
;
nsLayoutUtils
:
:
SetZeroMarginDisplayPortOnAsyncScrollableAncestors
(
frame
)
;
return
true
;
}
static
void
SendLayersDependentApzcTargetConfirmation
(
PresShell
*
aPresShell
uint64_t
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
)
{
LayerManager
*
lm
=
aPresShell
-
>
GetLayerManager
(
)
;
if
(
!
lm
)
{
return
;
}
if
(
WebRenderLayerManager
*
wrlm
=
lm
-
>
AsWebRenderLayerManager
(
)
)
{
if
(
WebRenderBridgeChild
*
wrbc
=
wrlm
-
>
WrBridge
(
)
)
{
wrbc
-
>
SendSetConfirmedTargetAPZC
(
aInputBlockId
aTargets
)
;
}
return
;
}
ShadowLayerForwarder
*
lf
=
lm
-
>
AsShadowForwarder
(
)
;
if
(
!
lf
)
{
return
;
}
LayerTransactionChild
*
shadow
=
lf
-
>
GetShadowManager
(
)
;
if
(
!
shadow
)
{
return
;
}
shadow
-
>
SendSetConfirmedTargetAPZC
(
aInputBlockId
aTargets
)
;
}
}
DisplayportSetListener
:
:
DisplayportSetListener
(
nsIWidget
*
aWidget
PresShell
*
aPresShell
const
uint64_t
&
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
)
:
mWidget
(
aWidget
)
mPresShell
(
aPresShell
)
mInputBlockId
(
aInputBlockId
)
mTargets
(
aTargets
.
Clone
(
)
)
{
}
DisplayportSetListener
:
:
~
DisplayportSetListener
(
)
=
default
;
bool
DisplayportSetListener
:
:
Register
(
)
{
if
(
mPresShell
-
>
AddPostRefreshObserver
(
this
)
)
{
APZCCH_LOG
(
"
Successfully
registered
post
-
refresh
observer
\
n
"
)
;
return
true
;
}
APZCCH_LOG
(
"
Sending
target
APZCs
for
input
block
%
"
PRIu64
"
\
n
"
mInputBlockId
)
;
mWidget
-
>
SetConfirmedTargetAPZC
(
mInputBlockId
mTargets
)
;
return
false
;
}
void
DisplayportSetListener
:
:
DidRefresh
(
)
{
if
(
!
mPresShell
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Post
-
refresh
observer
fired
again
after
failed
attempt
at
"
"
unregistering
it
"
)
;
return
;
}
APZCCH_LOG
(
"
Got
refresh
sending
target
APZCs
for
input
block
%
"
PRIu64
"
\
n
"
mInputBlockId
)
;
SendLayersDependentApzcTargetConfirmation
(
mPresShell
mInputBlockId
std
:
:
move
(
mTargets
)
)
;
if
(
!
mPresShell
-
>
RemovePostRefreshObserver
(
this
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Unable
to
unregister
post
-
refresh
observer
!
Leaking
it
instead
of
"
"
leaving
garbage
registered
"
)
;
mPresShell
=
nullptr
;
return
;
}
delete
this
;
}
UniquePtr
<
DisplayportSetListener
>
APZCCallbackHelper
:
:
SendSetTargetAPZCNotification
(
nsIWidget
*
aWidget
dom
:
:
Document
*
aDocument
const
WidgetGUIEvent
&
aEvent
const
LayersId
&
aLayersId
uint64_t
aInputBlockId
)
{
if
(
!
aWidget
|
|
!
aDocument
)
{
return
nullptr
;
}
if
(
aInputBlockId
=
=
sLastTargetAPZCNotificationInputBlock
)
{
APZCCH_LOG
(
"
Not
resending
target
APZC
confirmation
for
input
block
%
"
PRIu64
"
\
n
"
aInputBlockId
)
;
return
nullptr
;
}
sLastTargetAPZCNotificationInputBlock
=
aInputBlockId
;
if
(
PresShell
*
presShell
=
aDocument
-
>
GetPresShell
(
)
)
{
if
(
nsIFrame
*
rootFrame
=
presShell
-
>
GetRootFrame
(
)
)
{
bool
waitForRefresh
=
false
;
nsTArray
<
ScrollableLayerGuid
>
targets
;
if
(
const
WidgetTouchEvent
*
touchEvent
=
aEvent
.
AsTouchEvent
(
)
)
{
for
(
size_t
i
=
0
;
i
<
touchEvent
-
>
mTouches
.
Length
(
)
;
i
+
+
)
{
waitForRefresh
|
=
PrepareForSetTargetAPZCNotification
(
aWidget
aLayersId
rootFrame
touchEvent
-
>
mTouches
[
i
]
-
>
mRefPoint
&
targets
)
;
}
}
else
if
(
const
WidgetWheelEvent
*
wheelEvent
=
aEvent
.
AsWheelEvent
(
)
)
{
waitForRefresh
=
PrepareForSetTargetAPZCNotification
(
aWidget
aLayersId
rootFrame
wheelEvent
-
>
mRefPoint
&
targets
)
;
}
else
if
(
const
WidgetMouseEvent
*
mouseEvent
=
aEvent
.
AsMouseEvent
(
)
)
{
waitForRefresh
=
PrepareForSetTargetAPZCNotification
(
aWidget
aLayersId
rootFrame
mouseEvent
-
>
mRefPoint
&
targets
)
;
}
if
(
!
targets
.
IsEmpty
(
)
)
{
if
(
waitForRefresh
)
{
APZCCH_LOG
(
"
At
least
one
target
got
a
new
displayport
need
to
wait
for
"
"
refresh
\
n
"
)
;
return
MakeUnique
<
DisplayportSetListener
>
(
aWidget
presShell
aInputBlockId
std
:
:
move
(
targets
)
)
;
}
APZCCH_LOG
(
"
Sending
target
APZCs
for
input
block
%
"
PRIu64
"
\
n
"
aInputBlockId
)
;
aWidget
-
>
SetConfirmedTargetAPZC
(
aInputBlockId
targets
)
;
}
}
}
return
nullptr
;
}
void
APZCCallbackHelper
:
:
SendSetAllowedTouchBehaviorNotification
(
nsIWidget
*
aWidget
dom
:
:
Document
*
aDocument
const
WidgetTouchEvent
&
aEvent
uint64_t
aInputBlockId
const
SetAllowedTouchBehaviorCallback
&
aCallback
)
{
if
(
!
aWidget
|
|
!
aDocument
)
{
return
;
}
if
(
PresShell
*
presShell
=
aDocument
-
>
GetPresShell
(
)
)
{
if
(
nsIFrame
*
rootFrame
=
presShell
-
>
GetRootFrame
(
)
)
{
nsTArray
<
TouchBehaviorFlags
>
flags
;
for
(
uint32_t
i
=
0
;
i
<
aEvent
.
mTouches
.
Length
(
)
;
i
+
+
)
{
flags
.
AppendElement
(
TouchActionHelper
:
:
GetAllowedTouchBehavior
(
aWidget
rootFrame
aEvent
.
mTouches
[
i
]
-
>
mRefPoint
)
)
;
}
aCallback
(
aInputBlockId
std
:
:
move
(
flags
)
)
;
}
}
}
void
APZCCallbackHelper
:
:
NotifyMozMouseScrollEvent
(
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
const
nsString
&
aEvent
)
{
nsCOMPtr
<
nsIContent
>
targetContent
=
nsLayoutUtils
:
:
FindContentFor
(
aScrollId
)
;
if
(
!
targetContent
)
{
return
;
}
RefPtr
<
dom
:
:
Document
>
ownerDoc
=
targetContent
-
>
OwnerDoc
(
)
;
if
(
!
ownerDoc
)
{
return
;
}
nsContentUtils
:
:
DispatchTrustedEvent
(
ownerDoc
targetContent
aEvent
CanBubble
:
:
eYes
Cancelable
:
:
eYes
)
;
}
void
APZCCallbackHelper
:
:
NotifyFlushComplete
(
PresShell
*
aPresShell
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
aPresShell
&
&
aPresShell
-
>
GetRootFrame
(
)
)
{
aPresShell
-
>
GetRootFrame
(
)
-
>
SchedulePaint
(
nsIFrame
:
:
PAINT_DEFAULT
false
)
;
}
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
MOZ_ASSERT
(
observerService
)
;
observerService
-
>
NotifyObservers
(
nullptr
"
apz
-
repaints
-
flushed
"
nullptr
)
;
}
bool
APZCCallbackHelper
:
:
IsScrollInProgress
(
nsIScrollableFrame
*
aFrame
)
{
return
aFrame
-
>
IsProcessingAsyncScroll
(
)
|
|
nsLayoutUtils
:
:
CanScrollOriginClobberApz
(
aFrame
-
>
LastScrollOrigin
(
)
)
|
|
aFrame
-
>
LastSmoothScrollOrigin
(
)
;
}
void
APZCCallbackHelper
:
:
NotifyAsyncScrollbarDragInitiated
(
uint64_t
aDragBlockId
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
ScrollDirection
aDirection
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
nsIScrollableFrame
*
scrollFrame
=
nsLayoutUtils
:
:
FindScrollableFrameFor
(
aScrollId
)
)
{
scrollFrame
-
>
AsyncScrollbarDragInitiated
(
aDragBlockId
aDirection
)
;
}
}
void
APZCCallbackHelper
:
:
NotifyAsyncScrollbarDragRejected
(
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
nsIScrollableFrame
*
scrollFrame
=
nsLayoutUtils
:
:
FindScrollableFrameFor
(
aScrollId
)
)
{
scrollFrame
-
>
AsyncScrollbarDragRejected
(
)
;
}
}
void
APZCCallbackHelper
:
:
NotifyAsyncAutoscrollRejected
(
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
MOZ_ASSERT
(
observerService
)
;
nsAutoString
data
;
data
.
AppendInt
(
aScrollId
)
;
observerService
-
>
NotifyObservers
(
nullptr
"
autoscroll
-
rejected
-
by
-
apz
"
data
.
get
(
)
)
;
}
void
APZCCallbackHelper
:
:
CancelAutoscroll
(
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
MOZ_ASSERT
(
observerService
)
;
nsAutoString
data
;
data
.
AppendInt
(
aScrollId
)
;
observerService
-
>
NotifyObservers
(
nullptr
"
apz
:
cancel
-
autoscroll
"
data
.
get
(
)
)
;
}
void
APZCCallbackHelper
:
:
NotifyPinchGesture
(
PinchGestureInput
:
:
PinchGestureType
aType
LayoutDeviceCoord
aSpanChange
Modifiers
aModifiers
nsIWidget
*
aWidget
)
{
EventMessage
msg
;
switch
(
aType
)
{
case
PinchGestureInput
:
:
PINCHGESTURE_START
:
msg
=
eMagnifyGestureStart
;
break
;
case
PinchGestureInput
:
:
PINCHGESTURE_SCALE
:
msg
=
eMagnifyGestureUpdate
;
break
;
case
PinchGestureInput
:
:
PINCHGESTURE_END
:
msg
=
eMagnifyGesture
;
break
;
}
WidgetSimpleGestureEvent
event
(
true
msg
aWidget
)
;
event
.
mDelta
=
aSpanChange
;
event
.
mModifiers
=
aModifiers
;
DispatchWidgetEvent
(
event
)
;
}
}
}
