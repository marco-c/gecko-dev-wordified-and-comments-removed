#
include
"
TouchCounter
.
h
"
#
include
"
InputData
.
h
"
#
include
"
mozilla
/
TouchEvents
.
h
"
namespace
mozilla
{
namespace
layers
{
TouchCounter
:
:
TouchCounter
(
)
:
mActiveTouchCount
(
0
)
{
}
void
TouchCounter
:
:
Update
(
const
MultiTouchInput
&
aInput
)
{
switch
(
aInput
.
mType
)
{
case
MultiTouchInput
:
:
MULTITOUCH_START
:
mActiveTouchCount
=
aInput
.
mTouches
.
Length
(
)
;
break
;
case
MultiTouchInput
:
:
MULTITOUCH_END
:
if
(
mActiveTouchCount
>
=
aInput
.
mTouches
.
Length
(
)
)
{
mActiveTouchCount
-
=
aInput
.
mTouches
.
Length
(
)
;
}
else
{
NS_WARNING
(
"
Got
an
unexpected
touchend
"
)
;
mActiveTouchCount
=
0
;
}
break
;
case
MultiTouchInput
:
:
MULTITOUCH_CANCEL
:
mActiveTouchCount
=
0
;
break
;
case
MultiTouchInput
:
:
MULTITOUCH_MOVE
:
break
;
}
}
void
TouchCounter
:
:
Update
(
const
WidgetTouchEvent
&
aEvent
)
{
switch
(
aEvent
.
mMessage
)
{
case
eTouchStart
:
mActiveTouchCount
=
aEvent
.
mTouches
.
Length
(
)
;
break
;
case
eTouchEnd
:
{
uint32_t
liftedTouches
=
0
;
for
(
const
auto
&
touch
:
aEvent
.
mTouches
)
{
if
(
touch
-
>
mChanged
)
{
liftedTouches
+
+
;
}
}
if
(
mActiveTouchCount
>
=
liftedTouches
)
{
mActiveTouchCount
-
=
liftedTouches
;
}
else
{
NS_WARNING
(
"
Got
an
unexpected
touchend
"
)
;
mActiveTouchCount
=
0
;
}
break
;
}
case
eTouchCancel
:
mActiveTouchCount
=
0
;
break
;
default
:
break
;
}
}
uint32_t
TouchCounter
:
:
GetActiveTouchCount
(
)
const
{
return
mActiveTouchCount
;
}
}
}
