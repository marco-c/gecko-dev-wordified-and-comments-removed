#
ifndef
mozilla_layers_APZInputBridge_h
#
define
mozilla_layers_APZInputBridge_h
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
layers
/
APZPublicUtils
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
#
include
"
Units
.
h
"
namespace
mozilla
{
class
InputData
;
namespace
layers
{
class
APZInputBridgeParent
;
class
AsyncPanZoomController
;
class
InputBlockState
;
struct
ScrollableLayerGuid
;
struct
TargetConfirmationFlags
;
enum
class
APZHandledPlace
:
uint8_t
{
Unhandled
=
0
HandledByRoot
=
1
HandledByContent
=
2
Invalid
=
3
Last
=
Invalid
}
;
struct
APZHandledResult
{
APZHandledPlace
mPlace
=
APZHandledPlace
:
:
Invalid
;
SideBits
mScrollableDirections
=
SideBits
:
:
eNone
;
ScrollDirections
mOverscrollDirections
=
ScrollDirections
(
)
;
APZHandledResult
(
)
=
default
;
APZHandledResult
(
APZHandledPlace
aPlace
const
AsyncPanZoomController
*
aTarget
)
;
APZHandledResult
(
APZHandledPlace
aPlace
SideBits
aScrollableDirections
ScrollDirections
aOverscrollDirections
)
:
mPlace
(
aPlace
)
mScrollableDirections
(
aScrollableDirections
)
mOverscrollDirections
(
aOverscrollDirections
)
{
}
bool
IsHandledByContent
(
)
const
{
return
mPlace
=
=
APZHandledPlace
:
:
HandledByContent
;
}
bool
IsHandledByRoot
(
)
const
{
return
mPlace
=
=
APZHandledPlace
:
:
HandledByRoot
;
}
bool
operator
=
=
(
const
APZHandledResult
&
aOther
)
const
{
return
mPlace
=
=
aOther
.
mPlace
&
&
mScrollableDirections
=
=
aOther
.
mScrollableDirections
&
&
mOverscrollDirections
=
=
aOther
.
mOverscrollDirections
;
}
}
;
struct
APZEventResult
{
APZEventResult
(
)
;
APZEventResult
(
const
RefPtr
<
AsyncPanZoomController
>
&
aInitialTarget
TargetConfirmationFlags
aFlags
)
;
void
SetStatusAsConsumeNoDefault
(
)
{
mStatus
=
nsEventStatus_eConsumeNoDefault
;
}
void
SetStatusAsIgnore
(
)
{
mStatus
=
nsEventStatus_eIgnore
;
}
void
SetStatusAsConsumeDoDefault
(
const
RefPtr
<
AsyncPanZoomController
>
&
aTarget
)
;
void
SetStatusAsConsumeDoDefault
(
const
InputBlockState
&
aBlock
)
;
void
SetStatusAsConsumeDoDefaultWithTargetConfirmationFlags
(
const
InputBlockState
&
aBlock
TargetConfirmationFlags
aFlags
)
;
void
UpdateStatus
(
nsEventStatus
aStatus
)
{
mStatus
=
aStatus
;
}
nsEventStatus
GetStatus
(
)
const
{
return
mStatus
;
}
;
void
UpdateHandledResult
(
const
Maybe
<
APZHandledResult
>
&
aHandledResult
)
{
mHandledResult
=
aHandledResult
;
}
const
Maybe
<
APZHandledResult
>
&
GetHandledResult
(
)
const
{
return
mHandledResult
;
}
private
:
nsEventStatus
mStatus
;
Maybe
<
APZHandledResult
>
mHandledResult
;
public
:
ScrollableLayerGuid
mTargetGuid
;
uint64_t
mInputBlockId
;
}
;
class
APZInputBridge
{
public
:
virtual
APZEventResult
ReceiveInputEvent
(
InputData
&
aEvent
)
=
0
;
APZEventResult
ReceiveInputEvent
(
WidgetInputEvent
&
aEvent
)
;
static
Maybe
<
APZWheelAction
>
ActionForWheelEvent
(
WidgetWheelEvent
*
aEvent
)
;
protected
:
friend
class
APZInputBridgeParent
;
virtual
void
ProcessUnhandledEvent
(
LayoutDeviceIntPoint
*
aRefPoint
ScrollableLayerGuid
*
aOutTargetGuid
uint64_t
*
aOutFocusSequenceNumber
LayersId
*
aOutLayersId
)
=
0
;
virtual
void
UpdateWheelTransaction
(
LayoutDeviceIntPoint
aRefPoint
EventMessage
aEventMessage
)
=
0
;
virtual
~
APZInputBridge
(
)
=
default
;
}
;
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aOut
const
APZHandledResult
&
aHandledResult
)
;
}
}
#
endif
