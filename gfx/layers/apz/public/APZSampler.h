#
ifndef
mozilla_layers_APZSampler_h
#
define
mozilla_layers_APZSampler_h
#
include
"
mozilla
/
layers
/
AsyncCompositionManager
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
Units
.
h
"
namespace
mozilla
{
class
TimeStamp
;
namespace
wr
{
class
TransactionBuilder
;
struct
WrTransformProperty
;
}
namespace
layers
{
class
APZCTreeManager
;
class
LayerMetricsWrapper
;
struct
ScrollThumbData
;
class
APZSampler
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
APZSampler
)
public
:
explicit
APZSampler
(
const
RefPtr
<
APZCTreeManager
>
&
aApz
)
;
bool
PushStateToWR
(
wr
:
:
TransactionBuilder
&
aTxn
const
TimeStamp
&
aSampleTime
nsTArray
<
wr
:
:
WrTransformProperty
>
&
aTransformArray
)
;
bool
SampleAnimations
(
const
LayerMetricsWrapper
&
aLayer
const
TimeStamp
&
aSampleTime
)
;
LayerToParentLayerMatrix4x4
ComputeTransformForScrollThumb
(
const
LayerToParentLayerMatrix4x4
&
aCurrentTransform
const
LayerMetricsWrapper
&
aContent
const
ScrollThumbData
&
aThumbData
bool
aScrollbarIsDescendant
AsyncTransformComponentMatrix
*
aOutClipTransform
)
;
ParentLayerPoint
GetCurrentAsyncScrollOffset
(
const
LayerMetricsWrapper
&
aLayer
)
;
AsyncTransform
GetCurrentAsyncTransform
(
const
LayerMetricsWrapper
&
aLayer
)
;
AsyncTransformComponentMatrix
GetOverscrollTransform
(
const
LayerMetricsWrapper
&
aLayer
)
;
AsyncTransformComponentMatrix
GetCurrentAsyncTransformWithOverscroll
(
const
LayerMetricsWrapper
&
aLayer
)
;
void
MarkAsyncTransformAppliedToContent
(
const
LayerMetricsWrapper
&
aLayer
)
;
bool
HasUnusedAsyncTransform
(
const
LayerMetricsWrapper
&
aLayer
)
;
void
AssertOnSamplerThread
(
)
;
bool
IsSamplerThread
(
)
;
protected
:
virtual
~
APZSampler
(
)
;
private
:
RefPtr
<
APZCTreeManager
>
mApz
;
}
;
}
}
#
endif
