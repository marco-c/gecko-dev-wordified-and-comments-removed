#
ifndef
mozilla_layers_GeckoContentController_h
#
define
mozilla_layers_GeckoContentController_h
#
include
"
FrameMetrics
.
h
"
#
include
"
Units
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
ThreadSafeRefcountingWithMainThreadDestruction
.
h
"
namespace
mozilla
{
class
Runnable
;
namespace
layers
{
class
GeckoContentController
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING_WITH_MAIN_THREAD_DESTRUCTION
(
GeckoContentController
)
virtual
void
RequestContentRepaint
(
const
FrameMetrics
&
aFrameMetrics
)
=
0
;
enum
class
TapType
{
eSingleTap
eDoubleTap
eLongTap
eSentinel
}
;
virtual
void
HandleTap
(
TapType
aType
const
CSSPoint
&
aPoint
Modifiers
aModifiers
const
ScrollableLayerGuid
&
aGuid
uint64_t
aInputBlockId
)
=
0
;
virtual
void
PostDelayedTask
(
already_AddRefed
<
Runnable
>
aRunnable
int
aDelayMs
)
=
0
;
virtual
bool
GetTouchSensitiveRegion
(
CSSRect
*
aOutRegion
)
{
return
false
;
}
enum
class
APZStateChange
{
eTransformBegin
eTransformEnd
eStartTouch
eStartPanning
eEndTouch
eSentinel
}
;
virtual
void
NotifyAPZStateChange
(
const
ScrollableLayerGuid
&
aGuid
APZStateChange
aChange
int
aArg
=
0
)
{
}
virtual
void
NotifyMozMouseScrollEvent
(
const
FrameMetrics
:
:
ViewID
&
aScrollId
const
nsString
&
aEvent
)
{
}
virtual
void
NotifyFlushComplete
(
)
=
0
;
virtual
void
UpdateOverscrollVelocity
(
const
float
aX
const
float
aY
)
{
}
virtual
void
UpdateOverscrollOffset
(
const
float
aX
const
float
aY
)
{
}
virtual
void
SetScrollingRootContent
(
const
bool
isRootContent
)
{
}
GeckoContentController
(
)
{
}
virtual
void
ChildAdopted
(
)
{
}
virtual
void
Destroy
(
)
{
}
protected
:
virtual
~
GeckoContentController
(
)
{
}
}
;
}
}
#
endif
