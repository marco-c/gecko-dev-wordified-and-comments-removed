#
ifndef
mozilla_layers_GeckoContentController_h
#
define
mozilla_layers_GeckoContentController_h
#
include
"
InputData
.
h
"
#
include
"
Units
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
DefineEnum
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
layers
/
RepaintRequest
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
class
Runnable
;
namespace
layers
{
class
GeckoContentController
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
GeckoContentController
)
virtual
void
RequestContentRepaint
(
const
RepaintRequest
&
aRequest
)
=
0
;
MOZ_DEFINE_ENUM_CLASS_AT_CLASS_SCOPE
(
TapType
(
eSingleTap
eDoubleTap
eSecondTap
eLongTap
eLongTapUp
)
)
;
virtual
void
HandleTap
(
TapType
aType
const
LayoutDevicePoint
&
aPoint
Modifiers
aModifiers
const
ScrollableLayerGuid
&
aGuid
uint64_t
aInputBlockId
)
=
0
;
virtual
void
NotifyPinchGesture
(
PinchGestureInput
:
:
PinchGestureType
aType
const
ScrollableLayerGuid
&
aGuid
LayoutDeviceCoord
aSpanChange
Modifiers
aModifiers
)
=
0
;
virtual
void
PostDelayedTask
(
already_AddRefed
<
Runnable
>
aRunnable
int
aDelayMs
)
=
0
;
virtual
bool
IsRepaintThread
(
)
=
0
;
virtual
void
DispatchToRepaintThread
(
already_AddRefed
<
Runnable
>
aTask
)
=
0
;
MOZ_DEFINE_ENUM_CLASS_AT_CLASS_SCOPE
(
APZStateChange
(
eTransformBegin
eTransformEnd
eStartTouch
eStartPanning
eEndTouch
)
)
;
virtual
void
NotifyAPZStateChange
(
const
ScrollableLayerGuid
&
aGuid
APZStateChange
aChange
int
aArg
=
0
)
{
}
virtual
void
NotifyMozMouseScrollEvent
(
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
const
nsString
&
aEvent
)
{
}
virtual
void
NotifyFlushComplete
(
)
=
0
;
virtual
void
NotifyAsyncScrollbarDragRejected
(
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
)
=
0
;
virtual
void
NotifyAsyncAutoscrollRejected
(
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
)
=
0
;
virtual
void
CancelAutoscroll
(
const
ScrollableLayerGuid
&
aGuid
)
=
0
;
virtual
void
UpdateOverscrollVelocity
(
float
aX
float
aY
bool
aIsRootContent
)
{
}
virtual
void
UpdateOverscrollOffset
(
float
aX
float
aY
bool
aIsRootContent
)
{
}
GeckoContentController
(
)
{
}
virtual
void
Destroy
(
)
{
}
protected
:
virtual
~
GeckoContentController
(
)
{
}
}
;
}
}
#
endif
