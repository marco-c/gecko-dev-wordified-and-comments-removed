#
ifndef
mozilla_layers_APZUpdater_h
#
define
mozilla_layers_APZUpdater_h
#
include
<
unordered_map
>
#
include
"
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
APZTestData
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
Units
.
h
"
namespace
mozilla
{
namespace
wr
{
struct
WrWindowId
;
}
namespace
layers
{
class
APZCTreeManager
;
class
FocusTarget
;
class
Layer
;
class
WebRenderScrollData
;
class
APZUpdater
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
APZUpdater
)
public
:
explicit
APZUpdater
(
const
RefPtr
<
APZCTreeManager
>
&
aApz
)
;
bool
HasTreeManager
(
const
RefPtr
<
APZCTreeManager
>
&
aApz
)
;
void
SetWebRenderWindowId
(
const
wr
:
:
WindowId
&
aWindowId
)
;
void
ClearTree
(
)
;
void
UpdateFocusState
(
LayersId
aRootLayerTreeId
LayersId
aOriginatingLayersId
const
FocusTarget
&
aFocusTarget
)
;
void
UpdateHitTestingTree
(
LayersId
aRootLayerTreeId
Layer
*
aRoot
bool
aIsFirstPaint
LayersId
aOriginatingLayersId
uint32_t
aPaintSequenceNumber
)
;
void
UpdateHitTestingTree
(
LayersId
aRootLayerTreeId
const
WebRenderScrollData
&
aScrollData
bool
aIsFirstPaint
LayersId
aOriginatingLayersId
uint32_t
aPaintSequenceNumber
)
;
void
NotifyLayerTreeAdopted
(
LayersId
aLayersId
const
RefPtr
<
APZUpdater
>
&
aOldUpdater
)
;
void
NotifyLayerTreeRemoved
(
LayersId
aLayersId
)
;
bool
GetAPZTestData
(
LayersId
aLayersId
APZTestData
*
aOutData
)
;
void
SetTestAsyncScrollOffset
(
LayersId
aLayersId
const
FrameMetrics
:
:
ViewID
&
aScrollId
const
CSSPoint
&
aOffset
)
;
void
SetTestAsyncZoom
(
LayersId
aLayersId
const
FrameMetrics
:
:
ViewID
&
aScrollId
const
LayerToParentLayerScale
&
aZoom
)
;
void
AssertOnUpdaterThread
(
)
;
void
RunOnUpdaterThread
(
already_AddRefed
<
Runnable
>
aTask
)
;
bool
IsUpdaterThread
(
)
;
void
RunOnControllerThread
(
already_AddRefed
<
Runnable
>
aTask
)
;
protected
:
virtual
~
APZUpdater
(
)
;
private
:
RefPtr
<
APZCTreeManager
>
mApz
;
static
StaticMutex
sWindowIdLock
;
static
std
:
:
unordered_map
<
uint64_t
APZUpdater
*
>
sWindowIdMap
;
Maybe
<
wr
:
:
WrWindowId
>
mWindowId
;
}
;
}
}
#
endif
