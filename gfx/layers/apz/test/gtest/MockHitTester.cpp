#
include
"
MockHitTester
.
h
"
#
include
"
TreeTraversal
.
h
"
#
include
"
apz
/
src
/
APZCTreeManager
.
h
"
#
include
"
apz
/
src
/
AsyncPanZoomController
.
h
"
#
include
"
mozilla
/
gfx
/
CompositorHitTestInfo
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
namespace
mozilla
:
:
layers
{
IAPZHitTester
:
:
HitTestResult
MockHitTester
:
:
GetAPZCAtPoint
(
const
ScreenPoint
&
aHitTestPoint
const
RecursiveMutexAutoLock
&
aProofOfTreeLock
)
{
MOZ_ASSERT
(
!
mQueuedResults
.
empty
(
)
)
;
HitTestResult
result
=
std
:
:
move
(
mQueuedResults
.
front
(
)
)
;
mQueuedResults
.
pop
(
)
;
return
result
;
}
void
MockHitTester
:
:
QueueHitResult
(
ScrollableLayerGuid
aGuid
gfx
:
:
CompositorHitTestInfo
aHitInfo
)
{
RefPtr
<
HitTestingTreeNode
>
node
=
GetTargetNode
(
aGuid
ScrollableLayerGuid
:
:
EqualsIgnoringPresShell
)
;
MOZ_ASSERT
(
node
)
;
AsyncPanZoomController
*
apzc
=
node
-
>
GetApzc
(
)
;
MOZ_ASSERT
(
apzc
)
;
HitTestResult
result
;
result
.
mTargetApzc
=
apzc
;
result
.
mHitResult
=
aHitInfo
;
result
.
mLayersId
=
aGuid
.
mLayersId
;
mQueuedResults
.
push
(
std
:
:
move
(
result
)
)
;
}
void
MockHitTester
:
:
QueueScrollbarThumbHitResult
(
ScrollableLayerGuid
:
:
ViewID
aScrollId
ScrollDirection
aDirection
)
{
RecursiveMutexAutoLock
lock
(
GetTreeLock
(
)
)
;
LayersId
layersId
=
GetRootLayersId
(
)
;
RefPtr
<
HitTestingTreeNode
>
scrollableNode
=
GetTargetNode
(
ScrollableLayerGuid
(
layersId
0
aScrollId
)
ScrollableLayerGuid
:
:
EqualsIgnoringPresShell
)
;
MOZ_ASSERT
(
scrollableNode
)
;
AsyncPanZoomController
*
apzc
=
scrollableNode
-
>
GetApzc
(
)
;
MOZ_ASSERT
(
apzc
)
;
RefPtr
<
HitTestingTreeNode
>
scrollThumbNode
=
BreadthFirstSearch
<
ReverseIterator
>
(
GetRootNode
(
)
[
&
]
(
HitTestingTreeNode
*
aNode
)
{
return
aNode
-
>
GetLayersId
(
)
=
=
layersId
&
&
aNode
-
>
IsScrollThumbNode
(
)
&
&
aNode
-
>
GetScrollbarDirection
(
)
=
=
aDirection
&
&
aNode
-
>
GetScrollTargetId
(
)
=
=
aScrollId
;
}
)
;
MOZ_ASSERT
(
scrollThumbNode
)
;
HitTestResult
result
;
result
.
mTargetApzc
=
apzc
;
result
.
mHitResult
=
{
gfx
:
:
CompositorHitTestFlags
:
:
eVisibleToHitTest
gfx
:
:
CompositorHitTestFlags
:
:
eScrollbarThumb
}
;
if
(
aDirection
=
=
ScrollDirection
:
:
eVertical
)
{
result
.
mHitResult
+
=
gfx
:
:
CompositorHitTestFlags
:
:
eScrollbarVertical
;
}
InitializeHitTestingTreeNodeAutoLock
(
result
.
mScrollbarNode
lock
scrollThumbNode
)
;
mQueuedResults
.
push
(
std
:
:
move
(
result
)
)
;
}
}
