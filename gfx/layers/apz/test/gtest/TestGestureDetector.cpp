#
include
"
APZCBasicTester
.
h
"
#
include
"
APZTestCommon
.
h
"
class
APZCGestureDetectorTester
:
public
APZCBasicTester
{
public
:
APZCGestureDetectorTester
(
)
:
APZCBasicTester
(
AsyncPanZoomController
:
:
USE_GESTURE_DETECTOR
)
{
}
protected
:
FrameMetrics
GetPinchableFrameMetrics
(
)
{
FrameMetrics
fm
;
fm
.
SetCompositionBounds
(
ParentLayerRect
(
200
200
100
200
)
)
;
fm
.
SetScrollableRect
(
CSSRect
(
0
0
980
1000
)
)
;
fm
.
SetScrollOffset
(
CSSPoint
(
300
300
)
)
;
fm
.
SetZoom
(
CSSToParentLayerScale2D
(
2
.
0
2
.
0
)
)
;
fm
.
SetIsRootContent
(
true
)
;
return
fm
;
}
}
;
TEST_F
(
APZCGestureDetectorTester
Pan_After_Pinch
)
{
SCOPED_GFX_PREF
(
TouchActionEnabled
bool
false
)
;
FrameMetrics
originalMetrics
=
GetPinchableFrameMetrics
(
)
;
apzc
-
>
SetFrameMetrics
(
originalMetrics
)
;
MakeApzcZoomable
(
)
;
float
zoomAmount
=
1
.
25
;
float
pinchLength
=
100
.
0
;
float
pinchLengthScaled
=
pinchLength
*
zoomAmount
;
int
focusX
=
250
;
int
focusY
=
300
;
int
panDistance
=
20
;
int
firstFingerId
=
0
;
int
secondFingerId
=
firstFingerId
+
1
;
MultiTouchInput
mti
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_START
0
TimeStamp
(
)
0
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
firstFingerId
focusX
focusY
)
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
secondFingerId
focusX
focusY
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
mti
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_MOVE
0
TimeStamp
(
)
0
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
firstFingerId
focusX
-
pinchLength
focusY
)
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
secondFingerId
focusX
+
pinchLength
focusY
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
mti
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_MOVE
0
TimeStamp
(
)
0
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
firstFingerId
focusX
-
pinchLengthScaled
focusY
)
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
secondFingerId
focusX
+
pinchLengthScaled
focusY
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
FrameMetrics
zoomedMetrics
=
apzc
-
>
GetFrameMetrics
(
)
;
float
newZoom
=
zoomedMetrics
.
GetZoom
(
)
.
ToScaleFactor
(
)
.
scale
;
EXPECT_EQ
(
originalMetrics
.
GetZoom
(
)
.
ToScaleFactor
(
)
.
scale
*
zoomAmount
newZoom
)
;
mti
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_END
0
TimeStamp
(
)
0
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
secondFingerId
focusX
+
pinchLengthScaled
focusY
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
focusY
+
=
40
;
mti
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_MOVE
0
TimeStamp
(
)
0
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
firstFingerId
focusX
-
pinchLengthScaled
focusY
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
focusY
+
=
panDistance
;
mti
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_MOVE
0
TimeStamp
(
)
0
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
firstFingerId
focusX
-
pinchLengthScaled
focusY
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
mti
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_END
0
TimeStamp
(
)
0
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
firstFingerId
focusX
-
pinchLengthScaled
focusY
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
FrameMetrics
finalMetrics
=
apzc
-
>
GetFrameMetrics
(
)
;
EXPECT_EQ
(
zoomedMetrics
.
GetScrollOffset
(
)
.
y
-
(
panDistance
/
newZoom
)
finalMetrics
.
GetScrollOffset
(
)
.
y
)
;
apzc
-
>
AdvanceAnimationsUntilEnd
(
)
;
while
(
mcc
-
>
RunThroughDelayedTasks
(
)
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
TEST_F
(
APZCGestureDetectorTester
Pan_With_Tap
)
{
SCOPED_GFX_PREF
(
TouchActionEnabled
bool
false
)
;
FrameMetrics
originalMetrics
=
GetPinchableFrameMetrics
(
)
;
apzc
-
>
SetFrameMetrics
(
originalMetrics
)
;
MakeApzcZoomable
(
)
;
int
touchX
=
250
;
int
touchY
=
300
;
int
panDistance
=
20
;
int
firstFingerId
=
0
;
int
secondFingerId
=
firstFingerId
+
1
;
MultiTouchInput
mti
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_START
0
TimeStamp
(
)
0
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
firstFingerId
touchX
touchY
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
touchY
+
=
40
;
mti
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_MOVE
0
TimeStamp
(
)
0
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
firstFingerId
touchX
touchY
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
touchY
+
=
panDistance
;
mti
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_MOVE
0
TimeStamp
(
)
0
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
firstFingerId
touchX
touchY
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
mti
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_START
0
TimeStamp
(
)
0
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
firstFingerId
touchX
touchY
)
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
secondFingerId
touchX
+
10
touchY
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
mti
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_END
0
TimeStamp
(
)
0
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
secondFingerId
touchX
+
10
touchY
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
touchY
+
=
40
;
mti
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_MOVE
0
TimeStamp
(
)
0
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
firstFingerId
touchX
touchY
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
touchY
+
=
panDistance
;
mti
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_MOVE
0
TimeStamp
(
)
0
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
firstFingerId
touchX
touchY
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
mti
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_END
0
TimeStamp
(
)
0
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
firstFingerId
touchX
touchY
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
FrameMetrics
finalMetrics
=
apzc
-
>
GetFrameMetrics
(
)
;
float
zoom
=
finalMetrics
.
GetZoom
(
)
.
ToScaleFactor
(
)
.
scale
;
EXPECT_EQ
(
originalMetrics
.
GetScrollOffset
(
)
.
y
-
(
panDistance
*
2
/
zoom
)
finalMetrics
.
GetScrollOffset
(
)
.
y
)
;
apzc
-
>
AdvanceAnimationsUntilEnd
(
)
;
while
(
mcc
-
>
RunThroughDelayedTasks
(
)
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
class
APZCFlingStopTester
:
public
APZCGestureDetectorTester
{
protected
:
void
DoFlingStopTest
(
bool
aSlow
)
{
int
touchStart
=
50
;
int
touchEnd
=
10
;
Pan
(
apzc
touchStart
touchEnd
)
;
int
timeDelta
=
aSlow
?
2000
:
10
;
int
tapCallsExpected
=
aSlow
?
2
:
1
;
ParentLayerPoint
pointOut
;
AsyncTransform
viewTransformOut
;
apzc
-
>
SampleContentTransformForFrame
(
&
viewTransformOut
pointOut
TimeDuration
:
:
FromMilliseconds
(
timeDelta
)
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
_
0
apzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
tapCallsExpected
)
;
Tap
(
apzc
ScreenIntPoint
(
10
10
)
0
)
;
while
(
mcc
-
>
RunThroughDelayedTasks
(
)
)
;
Tap
(
apzc
ScreenIntPoint
(
100
100
)
0
)
;
while
(
mcc
-
>
RunThroughDelayedTasks
(
)
)
;
ParentLayerPoint
finalPointOut
;
apzc
-
>
SampleContentTransformForFrame
(
&
viewTransformOut
finalPointOut
)
;
EXPECT_EQ
(
pointOut
.
x
finalPointOut
.
x
)
;
EXPECT_EQ
(
pointOut
.
y
finalPointOut
.
y
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
void
DoFlingStopWithSlowListener
(
bool
aPreventDefault
)
{
MakeApzcWaitForMainThread
(
)
;
int
touchStart
=
50
;
int
touchEnd
=
10
;
uint64_t
blockId
=
0
;
Pan
(
apzc
touchStart
touchEnd
false
nullptr
nullptr
&
blockId
)
;
apzc
-
>
ConfirmTarget
(
blockId
)
;
apzc
-
>
ContentReceivedInputBlock
(
blockId
false
)
;
ParentLayerPoint
point
finalPoint
;
AsyncTransform
viewTransform
;
apzc
-
>
SampleContentTransformForFrame
(
&
viewTransform
point
TimeDuration
:
:
FromMilliseconds
(
10
)
)
;
apzc
-
>
SampleContentTransformForFrame
(
&
viewTransform
finalPoint
TimeDuration
:
:
FromMilliseconds
(
10
)
)
;
EXPECT_GT
(
finalPoint
.
y
point
.
y
)
;
TouchDown
(
apzc
ScreenIntPoint
(
10
10
)
mcc
-
>
Time
(
)
&
blockId
)
;
apzc
-
>
SampleContentTransformForFrame
(
&
viewTransform
point
TimeDuration
:
:
FromMilliseconds
(
10
)
)
;
EXPECT_EQ
(
finalPoint
.
x
point
.
x
)
;
EXPECT_EQ
(
finalPoint
.
y
point
.
y
)
;
apzc
-
>
ContentReceivedInputBlock
(
blockId
aPreventDefault
)
;
apzc
-
>
SampleContentTransformForFrame
(
&
viewTransform
point
TimeDuration
:
:
FromMilliseconds
(
70
)
)
;
EXPECT_EQ
(
finalPoint
.
x
point
.
x
)
;
EXPECT_EQ
(
finalPoint
.
y
point
.
y
)
;
TouchUp
(
apzc
ScreenIntPoint
(
10
10
)
mcc
-
>
Time
(
)
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
}
;
TEST_F
(
APZCFlingStopTester
FlingStop
)
{
SCOPED_GFX_PREF
(
APZFlingMinVelocityThreshold
float
0
.
0f
)
;
DoFlingStopTest
(
false
)
;
}
TEST_F
(
APZCFlingStopTester
FlingStopTap
)
{
SCOPED_GFX_PREF
(
APZFlingMinVelocityThreshold
float
0
.
0f
)
;
DoFlingStopTest
(
true
)
;
}
TEST_F
(
APZCFlingStopTester
FlingStopSlowListener
)
{
SCOPED_GFX_PREF
(
APZFlingMinVelocityThreshold
float
0
.
0f
)
;
DoFlingStopWithSlowListener
(
false
)
;
}
TEST_F
(
APZCFlingStopTester
FlingStopPreventDefault
)
{
SCOPED_GFX_PREF
(
APZFlingMinVelocityThreshold
float
0
.
0f
)
;
DoFlingStopWithSlowListener
(
true
)
;
}
TEST_F
(
APZCGestureDetectorTester
ShortPress
)
{
MakeApzcUnzoomable
(
)
;
MockFunction
<
void
(
std
:
:
string
checkPointName
)
>
check
;
{
InSequence
s
;
EXPECT_CALL
(
check
Call
(
"
pre
-
tap
"
)
)
;
EXPECT_CALL
(
check
Call
(
"
post
-
tap
"
)
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
LayoutDevicePoint
(
10
10
)
0
apzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
}
check
.
Call
(
"
pre
-
tap
"
)
;
TapAndCheckStatus
(
apzc
ScreenIntPoint
(
10
10
)
TimeDuration
:
:
FromMilliseconds
(
100
)
)
;
check
.
Call
(
"
post
-
tap
"
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
TEST_F
(
APZCGestureDetectorTester
MediumPress
)
{
MakeApzcUnzoomable
(
)
;
MockFunction
<
void
(
std
:
:
string
checkPointName
)
>
check
;
{
InSequence
s
;
EXPECT_CALL
(
check
Call
(
"
pre
-
tap
"
)
)
;
EXPECT_CALL
(
check
Call
(
"
post
-
tap
"
)
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
LayoutDevicePoint
(
10
10
)
0
apzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
}
check
.
Call
(
"
pre
-
tap
"
)
;
TapAndCheckStatus
(
apzc
ScreenIntPoint
(
10
10
)
TimeDuration
:
:
FromMilliseconds
(
400
)
)
;
check
.
Call
(
"
post
-
tap
"
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
class
APZCLongPressTester
:
public
APZCGestureDetectorTester
{
protected
:
void
DoLongPressTest
(
uint32_t
aBehavior
)
{
MakeApzcUnzoomable
(
)
;
uint64_t
blockId
=
0
;
nsEventStatus
status
=
TouchDown
(
apzc
ScreenIntPoint
(
10
10
)
mcc
-
>
Time
(
)
&
blockId
)
;
EXPECT_EQ
(
nsEventStatus_eConsumeDoDefault
status
)
;
if
(
gfxPrefs
:
:
TouchActionEnabled
(
)
&
&
status
!
=
nsEventStatus_eConsumeNoDefault
)
{
nsTArray
<
uint32_t
>
allowedTouchBehaviors
;
allowedTouchBehaviors
.
AppendElement
(
aBehavior
)
;
apzc
-
>
SetAllowedTouchBehavior
(
blockId
allowedTouchBehaviors
)
;
}
apzc
-
>
ContentReceivedInputBlock
(
blockId
false
)
;
MockFunction
<
void
(
std
:
:
string
checkPointName
)
>
check
;
{
InSequence
s
;
EXPECT_CALL
(
check
Call
(
"
preHandleLongTap
"
)
)
;
blockId
+
+
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eLongTap
LayoutDevicePoint
(
10
10
)
0
apzc
-
>
GetGuid
(
)
blockId
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
postHandleLongTap
"
)
)
;
EXPECT_CALL
(
check
Call
(
"
preHandleLongTapUp
"
)
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eLongTapUp
LayoutDevicePoint
(
10
10
)
0
apzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
postHandleLongTapUp
"
)
)
;
}
check
.
Call
(
"
preHandleLongTap
"
)
;
mcc
-
>
RunThroughDelayedTasks
(
)
;
check
.
Call
(
"
postHandleLongTap
"
)
;
apzc
-
>
ContentReceivedInputBlock
(
blockId
false
)
;
mcc
-
>
AdvanceByMillis
(
1000
)
;
check
.
Call
(
"
preHandleLongTapUp
"
)
;
status
=
TouchUp
(
apzc
ScreenIntPoint
(
10
10
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
RunThroughDelayedTasks
(
)
;
EXPECT_EQ
(
nsEventStatus_eConsumeDoDefault
status
)
;
check
.
Call
(
"
postHandleLongTapUp
"
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
void
DoLongPressPreventDefaultTest
(
uint32_t
aBehavior
)
{
MakeApzcUnzoomable
(
)
;
EXPECT_CALL
(
*
mcc
RequestContentRepaint
(
_
)
)
.
Times
(
0
)
;
int
touchX
=
10
touchStartY
=
10
touchEndY
=
50
;
uint64_t
blockId
=
0
;
nsEventStatus
status
=
TouchDown
(
apzc
ScreenIntPoint
(
touchX
touchStartY
)
mcc
-
>
Time
(
)
&
blockId
)
;
EXPECT_EQ
(
nsEventStatus_eConsumeDoDefault
status
)
;
if
(
gfxPrefs
:
:
TouchActionEnabled
(
)
&
&
status
!
=
nsEventStatus_eConsumeNoDefault
)
{
nsTArray
<
uint32_t
>
allowedTouchBehaviors
;
allowedTouchBehaviors
.
AppendElement
(
aBehavior
)
;
apzc
-
>
SetAllowedTouchBehavior
(
blockId
allowedTouchBehaviors
)
;
}
apzc
-
>
ContentReceivedInputBlock
(
blockId
false
)
;
MockFunction
<
void
(
std
:
:
string
checkPointName
)
>
check
;
{
InSequence
s
;
EXPECT_CALL
(
check
Call
(
"
preHandleLongTap
"
)
)
;
blockId
+
+
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eLongTap
LayoutDevicePoint
(
touchX
touchStartY
)
0
apzc
-
>
GetGuid
(
)
blockId
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
postHandleLongTap
"
)
)
;
}
check
.
Call
(
"
preHandleLongTap
"
)
;
mcc
-
>
RunThroughDelayedTasks
(
)
;
check
.
Call
(
"
postHandleLongTap
"
)
;
apzc
-
>
ContentReceivedInputBlock
(
blockId
true
)
;
mcc
-
>
AdvanceByMillis
(
1000
)
;
MultiTouchInput
mti
=
CreateMultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_MOVE
mcc
-
>
Time
(
)
)
;
mti
.
mTouches
.
AppendElement
(
SingleTouchData
(
0
ParentLayerPoint
(
touchX
touchEndY
)
ScreenSize
(
0
0
)
0
0
)
)
;
status
=
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
EXPECT_EQ
(
nsEventStatus_eConsumeDoDefault
status
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
LayoutDevicePoint
(
touchX
touchEndY
)
0
apzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
0
)
;
status
=
TouchUp
(
apzc
ScreenIntPoint
(
touchX
touchEndY
)
mcc
-
>
Time
(
)
)
;
EXPECT_EQ
(
nsEventStatus_eConsumeDoDefault
status
)
;
ParentLayerPoint
pointOut
;
AsyncTransform
viewTransformOut
;
apzc
-
>
SampleContentTransformForFrame
(
&
viewTransformOut
pointOut
)
;
EXPECT_EQ
(
ParentLayerPoint
(
)
pointOut
)
;
EXPECT_EQ
(
AsyncTransform
(
)
viewTransformOut
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
}
;
TEST_F
(
APZCLongPressTester
LongPress
)
{
SCOPED_GFX_PREF
(
TouchActionEnabled
bool
false
)
;
DoLongPressTest
(
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
NONE
)
;
}
TEST_F
(
APZCLongPressTester
LongPressWithTouchAction
)
{
SCOPED_GFX_PREF
(
TouchActionEnabled
bool
true
)
;
DoLongPressTest
(
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
HORIZONTAL_PAN
|
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
VERTICAL_PAN
|
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
PINCH_ZOOM
)
;
}
TEST_F
(
APZCLongPressTester
LongPressPreventDefault
)
{
SCOPED_GFX_PREF
(
TouchActionEnabled
bool
false
)
;
DoLongPressPreventDefaultTest
(
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
NONE
)
;
}
TEST_F
(
APZCLongPressTester
LongPressPreventDefaultWithTouchAction
)
{
SCOPED_GFX_PREF
(
TouchActionEnabled
bool
true
)
;
DoLongPressPreventDefaultTest
(
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
HORIZONTAL_PAN
|
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
VERTICAL_PAN
|
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
PINCH_ZOOM
)
;
}
TEST_F
(
APZCGestureDetectorTester
DoubleTap
)
{
MakeApzcWaitForMainThread
(
)
;
MakeApzcZoomable
(
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
LayoutDevicePoint
(
10
10
)
0
apzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
0
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eDoubleTap
LayoutDevicePoint
(
10
10
)
0
apzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
uint64_t
blockIds
[
2
]
;
DoubleTapAndCheckStatus
(
apzc
ScreenIntPoint
(
10
10
)
&
blockIds
)
;
apzc
-
>
ContentReceivedInputBlock
(
blockIds
[
0
]
false
)
;
apzc
-
>
ContentReceivedInputBlock
(
blockIds
[
1
]
false
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
TEST_F
(
APZCGestureDetectorTester
DoubleTapNotZoomable
)
{
MakeApzcWaitForMainThread
(
)
;
MakeApzcUnzoomable
(
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
LayoutDevicePoint
(
10
10
)
0
apzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
2
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eDoubleTap
LayoutDevicePoint
(
10
10
)
0
apzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
0
)
;
uint64_t
blockIds
[
2
]
;
DoubleTapAndCheckStatus
(
apzc
ScreenIntPoint
(
10
10
)
&
blockIds
)
;
apzc
-
>
ContentReceivedInputBlock
(
blockIds
[
0
]
false
)
;
apzc
-
>
ContentReceivedInputBlock
(
blockIds
[
1
]
false
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
TEST_F
(
APZCGestureDetectorTester
DoubleTapPreventDefaultFirstOnly
)
{
MakeApzcWaitForMainThread
(
)
;
MakeApzcZoomable
(
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
LayoutDevicePoint
(
10
10
)
0
apzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eDoubleTap
LayoutDevicePoint
(
10
10
)
0
apzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
0
)
;
uint64_t
blockIds
[
2
]
;
DoubleTapAndCheckStatus
(
apzc
ScreenIntPoint
(
10
10
)
&
blockIds
)
;
apzc
-
>
ContentReceivedInputBlock
(
blockIds
[
0
]
true
)
;
apzc
-
>
ContentReceivedInputBlock
(
blockIds
[
1
]
false
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
TEST_F
(
APZCGestureDetectorTester
DoubleTapPreventDefaultBoth
)
{
MakeApzcWaitForMainThread
(
)
;
MakeApzcZoomable
(
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
LayoutDevicePoint
(
10
10
)
0
apzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
0
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eDoubleTap
LayoutDevicePoint
(
10
10
)
0
apzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
0
)
;
uint64_t
blockIds
[
2
]
;
DoubleTapAndCheckStatus
(
apzc
ScreenIntPoint
(
10
10
)
&
blockIds
)
;
apzc
-
>
ContentReceivedInputBlock
(
blockIds
[
0
]
true
)
;
apzc
-
>
ContentReceivedInputBlock
(
blockIds
[
1
]
true
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
TEST_F
(
APZCGestureDetectorTester
TapFollowedByPinch
)
{
MakeApzcZoomable
(
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
LayoutDevicePoint
(
10
10
)
0
apzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
Tap
(
apzc
ScreenIntPoint
(
10
10
)
TimeDuration
:
:
FromMilliseconds
(
100
)
)
;
int
inputId
=
0
;
MultiTouchInput
mti
;
mti
=
CreateMultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_START
mcc
-
>
Time
(
)
)
;
mti
.
mTouches
.
AppendElement
(
SingleTouchData
(
inputId
ParentLayerPoint
(
20
20
)
ScreenSize
(
0
0
)
0
0
)
)
;
mti
.
mTouches
.
AppendElement
(
SingleTouchData
(
inputId
+
1
ParentLayerPoint
(
10
10
)
ScreenSize
(
0
0
)
0
0
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
mti
=
CreateMultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_END
mcc
-
>
Time
(
)
)
;
mti
.
mTouches
.
AppendElement
(
SingleTouchData
(
inputId
ParentLayerPoint
(
20
20
)
ScreenSize
(
0
0
)
0
0
)
)
;
mti
.
mTouches
.
AppendElement
(
SingleTouchData
(
inputId
+
1
ParentLayerPoint
(
10
10
)
ScreenSize
(
0
0
)
0
0
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
TEST_F
(
APZCGestureDetectorTester
TapFollowedByMultipleTouches
)
{
MakeApzcZoomable
(
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
LayoutDevicePoint
(
10
10
)
0
apzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
Tap
(
apzc
ScreenIntPoint
(
10
10
)
TimeDuration
:
:
FromMilliseconds
(
100
)
)
;
int
inputId
=
0
;
MultiTouchInput
mti
;
mti
=
CreateMultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_START
mcc
-
>
Time
(
)
)
;
mti
.
mTouches
.
AppendElement
(
SingleTouchData
(
inputId
ParentLayerPoint
(
20
20
)
ScreenSize
(
0
0
)
0
0
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
mti
=
CreateMultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_START
mcc
-
>
Time
(
)
)
;
mti
.
mTouches
.
AppendElement
(
SingleTouchData
(
inputId
ParentLayerPoint
(
20
20
)
ScreenSize
(
0
0
)
0
0
)
)
;
mti
.
mTouches
.
AppendElement
(
SingleTouchData
(
inputId
+
1
ParentLayerPoint
(
10
10
)
ScreenSize
(
0
0
)
0
0
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
mti
=
CreateMultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_END
mcc
-
>
Time
(
)
)
;
mti
.
mTouches
.
AppendElement
(
SingleTouchData
(
inputId
ParentLayerPoint
(
20
20
)
ScreenSize
(
0
0
)
0
0
)
)
;
mti
.
mTouches
.
AppendElement
(
SingleTouchData
(
inputId
+
1
ParentLayerPoint
(
10
10
)
ScreenSize
(
0
0
)
0
0
)
)
;
apzc
-
>
ReceiveInputEvent
(
mti
nullptr
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
TEST_F
(
APZCGestureDetectorTester
LongPressInterruptedByWheel
)
{
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eLongTap
_
_
_
_
)
)
.
Times
(
0
)
;
uint64_t
touchBlockId
=
0
;
uint64_t
wheelBlockId
=
0
;
nsEventStatus
status
=
TouchDown
(
apzc
ScreenIntPoint
(
10
10
)
mcc
-
>
Time
(
)
&
touchBlockId
)
;
if
(
gfxPrefs
:
:
TouchActionEnabled
(
)
&
&
status
!
=
nsEventStatus_eConsumeNoDefault
)
{
SetDefaultAllowedTouchBehavior
(
apzc
touchBlockId
)
;
}
mcc
-
>
AdvanceByMillis
(
10
)
;
Wheel
(
apzc
ScreenIntPoint
(
10
10
)
ScreenPoint
(
0
-
10
)
mcc
-
>
Time
(
)
&
wheelBlockId
)
;
EXPECT_NE
(
touchBlockId
wheelBlockId
)
;
mcc
-
>
AdvanceByMillis
(
1000
)
;
}
TEST_F
(
APZCGestureDetectorTester
TapTimeoutInterruptedByWheel
)
{
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
LayoutDevicePoint
(
10
10
)
0
apzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
MakeApzcZoomable
(
)
;
uint64_t
touchBlockId
=
0
;
uint64_t
wheelBlockId
=
0
;
Tap
(
apzc
ScreenIntPoint
(
10
10
)
TimeDuration
:
:
FromMilliseconds
(
100
)
nullptr
&
touchBlockId
)
;
mcc
-
>
AdvanceByMillis
(
10
)
;
Wheel
(
apzc
ScreenIntPoint
(
10
10
)
ScreenPoint
(
0
-
10
)
mcc
-
>
Time
(
)
&
wheelBlockId
)
;
EXPECT_NE
(
touchBlockId
wheelBlockId
)
;
while
(
mcc
-
>
RunThroughDelayedTasks
(
)
)
;
}
