#
include
"
APZCTreeManagerTester
.
h
"
#
include
"
APZTestCommon
.
h
"
#
include
"
InputUtils
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
class
APZEventRegionsTester
:
public
APZCTreeManagerTester
{
protected
:
UniquePtr
<
ScopedLayerTreeRegistration
>
registration
;
TestAsyncPanZoomController
*
rootApzc
;
void
CreateEventRegionsLayerTree1
(
)
{
const
char
*
layerTreeSyntax
=
"
c
(
tt
)
"
;
nsIntRegion
layerVisibleRegions
[
]
=
{
nsIntRegion
(
IntRect
(
0
0
200
200
)
)
nsIntRegion
(
IntRect
(
0
0
100
200
)
)
nsIntRegion
(
IntRect
(
0
100
200
100
)
)
}
;
root
=
CreateLayerTree
(
layerTreeSyntax
layerVisibleRegions
nullptr
lm
layers
)
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
SetScrollableFrameMetrics
(
layers
[
1
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
SetScrollableFrameMetrics
(
layers
[
2
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
2
)
;
SetScrollHandoff
(
layers
[
1
]
root
)
;
SetScrollHandoff
(
layers
[
2
]
root
)
;
EventRegions
regions
(
nsIntRegion
(
IntRect
(
0
0
200
200
)
)
)
;
root
-
>
SetEventRegions
(
regions
)
;
regions
.
mDispatchToContentHitRegion
=
nsIntRegion
(
IntRect
(
0
100
100
100
)
)
;
regions
.
mHitRegion
=
nsIntRegion
(
IntRect
(
0
0
100
200
)
)
;
layers
[
1
]
-
>
SetEventRegions
(
regions
)
;
regions
.
mHitRegion
=
nsIntRegion
(
IntRect
(
0
100
200
100
)
)
;
layers
[
2
]
-
>
SetEventRegions
(
regions
)
;
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
manager
LayersId
{
0
}
root
mcc
)
;
UpdateHitTestingTree
(
)
;
rootApzc
=
ApzcOf
(
root
)
;
}
void
CreateEventRegionsLayerTree2
(
)
{
const
char
*
layerTreeSyntax
=
"
c
(
t
)
"
;
nsIntRegion
layerVisibleRegions
[
]
=
{
nsIntRegion
(
IntRect
(
0
0
100
500
)
)
nsIntRegion
(
IntRect
(
0
150
100
100
)
)
}
;
root
=
CreateLayerTree
(
layerTreeSyntax
layerVisibleRegions
nullptr
lm
layers
)
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
EventRegions
regions
(
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
)
;
root
-
>
SetEventRegions
(
regions
)
;
regions
.
mHitRegion
=
nsIntRegion
(
IntRect
(
0
150
100
100
)
)
;
layers
[
1
]
-
>
SetEventRegions
(
regions
)
;
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
manager
LayersId
{
0
}
root
mcc
)
;
UpdateHitTestingTree
(
)
;
rootApzc
=
ApzcOf
(
root
)
;
}
void
CreateObscuringLayerTree
(
)
{
const
char
*
layerTreeSyntax
=
"
c
(
c
(
t
)
t
)
"
;
nsIntRegion
layerVisibleRegions
[
]
=
{
nsIntRegion
(
IntRect
(
0
0
200
200
)
)
nsIntRegion
(
IntRect
(
0
0
200
200
)
)
nsIntRegion
(
IntRect
(
0
100
200
50
)
)
nsIntRegion
(
IntRect
(
0
100
200
100
)
)
}
;
root
=
CreateLayerTree
(
layerTreeSyntax
layerVisibleRegions
nullptr
lm
layers
)
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
CSSRect
(
0
0
200
200
)
)
;
SetScrollableFrameMetrics
(
layers
[
1
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
CSSRect
(
0
0
200
300
)
)
;
SetScrollableFrameMetrics
(
layers
[
2
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
2
CSSRect
(
0
0
200
100
)
)
;
SetScrollHandoff
(
layers
[
2
]
layers
[
1
]
)
;
SetScrollHandoff
(
layers
[
1
]
root
)
;
EventRegions
regions
(
nsIntRegion
(
IntRect
(
0
0
200
200
)
)
)
;
root
-
>
SetEventRegions
(
regions
)
;
regions
.
mHitRegion
=
nsIntRegion
(
IntRect
(
0
0
200
300
)
)
;
layers
[
1
]
-
>
SetEventRegions
(
regions
)
;
regions
.
mHitRegion
=
nsIntRegion
(
IntRect
(
0
100
200
100
)
)
;
layers
[
2
]
-
>
SetEventRegions
(
regions
)
;
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
manager
LayersId
{
0
}
root
mcc
)
;
UpdateHitTestingTree
(
)
;
rootApzc
=
ApzcOf
(
root
)
;
}
void
CreateBug1119497LayerTree
(
)
{
const
char
*
layerTreeSyntax
=
"
c
(
tt
)
"
;
nsIntRegion
layerVisibleRegions
[
]
=
{
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
}
;
root
=
CreateLayerTree
(
layerTreeSyntax
layerVisibleRegions
nullptr
lm
layers
)
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
SetScrollableFrameMetrics
(
layers
[
1
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
manager
LayersId
{
0
}
root
mcc
)
;
UpdateHitTestingTree
(
)
;
}
void
CreateBug1117712LayerTree
(
)
{
const
char
*
layerTreeSyntax
=
"
c
(
c
(
t
)
t
)
"
;
nsIntRegion
layerVisibleRegions
[
]
=
{
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
nsIntRegion
(
IntRect
(
0
0
0
0
)
)
nsIntRegion
(
IntRect
(
0
0
10
10
)
)
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
}
;
Matrix4x4
layerTransforms
[
]
=
{
Matrix4x4
(
)
Matrix4x4
:
:
Translation
(
50
0
0
)
Matrix4x4
(
)
Matrix4x4
(
)
}
;
root
=
CreateLayerTree
(
layerTreeSyntax
layerVisibleRegions
layerTransforms
lm
layers
)
;
SetScrollableFrameMetrics
(
layers
[
2
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
CSSRect
(
0
0
10
10
)
)
;
SetScrollableFrameMetrics
(
layers
[
3
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
CSSRect
(
0
0
100
100
)
)
;
SetScrollHandoff
(
layers
[
3
]
layers
[
2
]
)
;
EventRegions
regions
(
nsIntRegion
(
IntRect
(
0
0
10
10
)
)
)
;
layers
[
2
]
-
>
SetEventRegions
(
regions
)
;
regions
.
mHitRegion
=
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
;
regions
.
mDispatchToContentHitRegion
=
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
;
layers
[
3
]
-
>
SetEventRegions
(
regions
)
;
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
manager
LayersId
{
0
}
root
mcc
)
;
UpdateHitTestingTree
(
)
;
}
}
;
TEST_F
(
APZEventRegionsTester
HitRegionImmediateResponse
)
{
SCOPED_GFX_VAR
(
UseWebRender
bool
false
)
;
CreateEventRegionsLayerTree1
(
)
;
TestAsyncPanZoomController
*
root
=
ApzcOf
(
layers
[
0
]
)
;
TestAsyncPanZoomController
*
left
=
ApzcOf
(
layers
[
1
]
)
;
TestAsyncPanZoomController
*
bottom
=
ApzcOf
(
layers
[
2
]
)
;
MockFunction
<
void
(
std
:
:
string
checkPointName
)
>
check
;
{
InSequence
s
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
_
_
left
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
Tapped
on
left
"
)
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
_
_
bottom
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
Tapped
on
bottom
"
)
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
_
_
root
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
Tapped
on
root
"
)
)
;
EXPECT_CALL
(
check
Call
(
"
Tap
pending
on
d
-
t
-
c
region
"
)
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
_
_
bottom
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
Tapped
on
bottom
again
"
)
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
_
_
left
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
Tapped
on
left
this
time
"
)
)
;
}
TimeDuration
tapDuration
=
TimeDuration
:
:
FromMilliseconds
(
100
)
;
Tap
(
manager
ScreenIntPoint
(
10
10
)
tapDuration
)
;
mcc
-
>
RunThroughDelayedTasks
(
)
;
check
.
Call
(
"
Tapped
on
left
"
)
;
Tap
(
manager
ScreenIntPoint
(
110
110
)
tapDuration
)
;
mcc
-
>
RunThroughDelayedTasks
(
)
;
check
.
Call
(
"
Tapped
on
bottom
"
)
;
Tap
(
manager
ScreenIntPoint
(
110
10
)
tapDuration
)
;
mcc
-
>
RunThroughDelayedTasks
(
)
;
check
.
Call
(
"
Tapped
on
root
"
)
;
Tap
(
manager
ScreenIntPoint
(
10
110
)
tapDuration
)
;
mcc
-
>
RunThroughDelayedTasks
(
)
;
check
.
Call
(
"
Tap
pending
on
d
-
t
-
c
region
"
)
;
mcc
-
>
RunThroughDelayedTasks
(
)
;
check
.
Call
(
"
Tapped
on
bottom
again
"
)
;
uint64_t
inputBlockId
=
0
;
Tap
(
manager
ScreenIntPoint
(
10
110
)
tapDuration
nullptr
&
inputBlockId
)
;
nsTArray
<
ScrollableLayerGuid
>
targets
;
targets
.
AppendElement
(
left
-
>
GetGuid
(
)
)
;
manager
-
>
SetTargetAPZC
(
inputBlockId
targets
)
;
while
(
mcc
-
>
RunThroughDelayedTasks
(
)
)
;
check
.
Call
(
"
Tapped
on
left
this
time
"
)
;
}
TEST_F
(
APZEventRegionsTester
HitRegionAccumulatesChildren
)
{
CreateEventRegionsLayerTree2
(
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
_
_
rootApzc
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
Tap
(
manager
ScreenIntPoint
(
10
160
)
TimeDuration
:
:
FromMilliseconds
(
100
)
)
;
}
TEST_F
(
APZEventRegionsTester
Obscuration
)
{
SCOPED_GFX_VAR
(
UseWebRender
bool
false
)
;
CreateObscuringLayerTree
(
)
;
ScopedLayerTreeRegistration
registration
(
manager
LayersId
{
0
}
root
mcc
)
;
UpdateHitTestingTree
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
parent
=
ApzcOf
(
layers
[
1
]
)
;
TestAsyncPanZoomController
*
child
=
ApzcOf
(
layers
[
2
]
)
;
Pan
(
parent
75
25
PanOptions
:
:
NoFling
)
;
APZCTreeManager
:
:
HitTestResult
hit
=
manager
-
>
GetTargetAPZC
(
ScreenPoint
(
50
75
)
)
;
EXPECT_EQ
(
child
hit
.
mTargetApzc
.
get
(
)
)
;
EXPECT_EQ
(
hit
.
mHitResult
CompositorHitTestFlags
:
:
eVisibleToHitTest
)
;
}
TEST_F
(
APZEventRegionsTester
Bug1119497
)
{
CreateBug1119497LayerTree
(
)
;
APZCTreeManager
:
:
HitTestResult
hit
=
manager
-
>
GetTargetAPZC
(
ScreenPoint
(
50
50
)
)
;
EXPECT_EQ
(
ApzcOf
(
layers
[
0
]
)
hit
.
mTargetApzc
.
get
(
)
)
;
EXPECT_EQ
(
hit
.
mHitResult
CompositorHitTestFlags
:
:
eVisibleToHitTest
)
;
}
TEST_F
(
APZEventRegionsTester
Bug1117712
)
{
CreateBug1117712LayerTree
(
)
;
TestAsyncPanZoomController
*
apzc2
=
ApzcOf
(
layers
[
2
]
)
;
uint64_t
inputBlockId
=
0
;
Tap
(
manager
ScreenIntPoint
(
55
5
)
TimeDuration
:
:
FromMilliseconds
(
100
)
nullptr
&
inputBlockId
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
LayoutDevicePoint
(
55
5
)
0
apzc2
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
nsTArray
<
ScrollableLayerGuid
>
targets
;
targets
.
AppendElement
(
apzc2
-
>
GetGuid
(
)
)
;
manager
-
>
SetTargetAPZC
(
inputBlockId
targets
)
;
}
TEST_F
(
APZEventRegionsTester
HandledByRootApzcFlag
)
{
const
char
*
layerTreeSyntax
=
"
c
"
;
nsIntRegion
layerVisibleRegions
[
]
=
{
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
}
;
root
=
CreateLayerTree
(
layerTreeSyntax
layerVisibleRegions
nullptr
lm
layers
)
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
ModifyFrameMetrics
(
root
[
]
(
FrameMetrics
&
metrics
)
{
metrics
.
SetIsRootContent
(
true
)
;
}
)
;
EventRegions
regions
(
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
)
;
regions
.
mDispatchToContentHitRegion
=
nsIntRegion
(
IntRect
(
0
50
100
50
)
)
;
root
-
>
SetEventRegions
(
regions
)
;
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
manager
LayersId
{
0
}
root
mcc
)
;
UpdateHitTestingTree
(
)
;
APZEventResult
result
=
TouchDown
(
manager
ScreenIntPoint
(
50
25
)
mcc
-
>
Time
(
)
)
;
TouchUp
(
manager
ScreenIntPoint
(
50
25
)
mcc
-
>
Time
(
)
)
;
EXPECT_EQ
(
result
.
mHandledByRootApzc
Some
(
true
)
)
;
result
=
TouchDown
(
manager
ScreenIntPoint
(
50
75
)
mcc
-
>
Time
(
)
)
;
TouchUp
(
manager
ScreenIntPoint
(
50
75
)
mcc
-
>
Time
(
)
)
;
EXPECT_EQ
(
result
.
mHandledByRootApzc
Nothing
(
)
)
;
Maybe
<
bool
>
delayedAnswer
;
manager
-
>
AddInputBlockCallback
(
result
.
mInputBlockId
[
&
]
(
uint64_t
id
bool
answer
)
{
EXPECT_EQ
(
id
result
.
mInputBlockId
)
;
delayedAnswer
=
Some
(
answer
)
;
}
)
;
manager
-
>
SetAllowedTouchBehavior
(
result
.
mInputBlockId
{
AllowedTouchBehavior
:
:
VERTICAL_PAN
}
)
;
manager
-
>
SetTargetAPZC
(
result
.
mInputBlockId
{
result
.
mTargetGuid
}
)
;
manager
-
>
ContentReceivedInputBlock
(
result
.
mInputBlockId
false
)
;
EXPECT_EQ
(
delayedAnswer
Some
(
true
)
)
;
result
=
TouchDown
(
manager
ScreenIntPoint
(
50
75
)
mcc
-
>
Time
(
)
)
;
TouchUp
(
manager
ScreenIntPoint
(
50
75
)
mcc
-
>
Time
(
)
)
;
EXPECT_EQ
(
result
.
mHandledByRootApzc
Nothing
(
)
)
;
manager
-
>
AddInputBlockCallback
(
result
.
mInputBlockId
[
&
]
(
uint64_t
id
bool
answer
)
{
EXPECT_EQ
(
id
result
.
mInputBlockId
)
;
delayedAnswer
=
Some
(
answer
)
;
}
)
;
manager
-
>
SetAllowedTouchBehavior
(
result
.
mInputBlockId
{
AllowedTouchBehavior
:
:
VERTICAL_PAN
}
)
;
manager
-
>
SetTargetAPZC
(
result
.
mInputBlockId
{
result
.
mTargetGuid
}
)
;
manager
-
>
ContentReceivedInputBlock
(
result
.
mInputBlockId
true
)
;
EXPECT_EQ
(
delayedAnswer
Some
(
false
)
)
;
}
