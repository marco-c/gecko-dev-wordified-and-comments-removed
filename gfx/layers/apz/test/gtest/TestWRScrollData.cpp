#
include
"
TestWRScrollData
.
h
"
#
include
"
APZTestAccess
.
h
"
#
include
"
InternalHitTester
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
FrameMetrics
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
mozilla
/
layers
/
APZUpdater
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderScrollDataWrapper
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
apz
/
src
/
APZCTreeManager
.
h
"
using
mozilla
:
:
MakeUnique
;
using
mozilla
:
:
layers
:
:
APZCTreeManager
;
using
mozilla
:
:
layers
:
:
APZUpdater
;
using
mozilla
:
:
layers
:
:
InternalHitTester
;
using
mozilla
:
:
layers
:
:
LayersId
;
using
mozilla
:
:
layers
:
:
ScrollableLayerGuid
;
using
mozilla
:
:
layers
:
:
ScrollMetadata
;
using
mozilla
:
:
layers
:
:
TestWRScrollData
;
using
mozilla
:
:
layers
:
:
WebRenderLayerScrollData
;
using
mozilla
:
:
layers
:
:
WebRenderScrollDataWrapper
;
TestWRScrollData
TestWRScrollData
:
:
Create
(
const
char
*
aTreeShape
const
APZUpdater
&
aUpdater
const
nsIntRegion
*
aVisibleRegions
const
gfx
:
:
Matrix4x4
*
aTransforms
)
{
TestWRScrollData
result
;
const
size_t
len
=
strlen
(
aTreeShape
)
;
size_t
currentLayerIndex
=
0
;
struct
LayerEntry
{
size_t
mLayerIndex
;
int32_t
mDescendantCount
=
0
;
}
;
std
:
:
stack
<
LayerEntry
>
pendingLayers
;
std
:
:
vector
<
WebRenderLayerScrollData
>
finishedLayers
;
size_t
depth
=
1
;
auto
finishLayer
=
[
&
]
{
MOZ_ASSERT
(
!
pendingLayers
.
empty
(
)
)
;
LayerEntry
entry
=
pendingLayers
.
top
(
)
;
WebRenderLayerScrollData
layer
;
APZTestAccess
:
:
InitializeForTest
(
layer
entry
.
mDescendantCount
)
;
if
(
aVisibleRegions
)
{
layer
.
SetVisibleRegion
(
LayerIntRegion
:
:
FromUnknownRegion
(
aVisibleRegions
[
entry
.
mLayerIndex
]
)
)
;
APZTestAccess
:
:
SetEventRegions
(
layer
EventRegions
(
aVisibleRegions
[
entry
.
mLayerIndex
]
)
)
;
}
if
(
aTransforms
)
{
layer
.
SetTransform
(
aTransforms
[
entry
.
mLayerIndex
]
)
;
}
finishedLayers
.
push_back
(
std
:
:
move
(
layer
)
)
;
result
.
mIndexMap
.
emplace
(
entry
.
mLayerIndex
finishedLayers
.
size
(
)
-
1
)
;
pendingLayers
.
pop
(
)
;
if
(
!
pendingLayers
.
empty
(
)
)
{
pendingLayers
.
top
(
)
.
mDescendantCount
+
=
(
entry
.
mDescendantCount
+
1
)
;
}
}
;
for
(
size_t
i
=
0
;
i
<
len
;
+
+
i
)
{
if
(
aTreeShape
[
i
]
=
=
'
(
'
)
{
+
+
depth
;
}
else
if
(
aTreeShape
[
i
]
=
=
'
)
'
)
{
if
(
pendingLayers
.
size
(
)
<
=
1
)
{
printf
(
"
Invalid
tree
shape
:
too
many
'
)
'
\
n
"
)
;
MOZ_CRASH
(
)
;
}
finishLayer
(
)
;
-
-
depth
;
}
else
{
if
(
aTreeShape
[
i
]
!
=
'
x
'
)
{
printf
(
"
The
only
allowed
character
to
represent
a
layer
is
'
x
'
\
n
"
)
;
MOZ_CRASH
(
)
;
}
if
(
depth
=
=
pendingLayers
.
size
(
)
)
{
if
(
depth
<
=
1
)
{
printf
(
"
The
tree
is
only
allowed
to
have
one
root
\
n
"
)
;
MOZ_CRASH
(
)
;
}
finishLayer
(
)
;
}
MOZ_ASSERT
(
depth
=
=
pendingLayers
.
size
(
)
+
1
)
;
pendingLayers
.
push
(
{
currentLayerIndex
}
)
;
+
+
currentLayerIndex
;
}
}
if
(
pendingLayers
.
size
(
)
!
=
1
)
{
printf
(
"
Invalid
tree
shape
:
'
(
'
and
'
)
'
not
balanced
\
n
"
)
;
MOZ_CRASH
(
)
;
}
finishLayer
(
)
;
for
(
auto
it
=
finishedLayers
.
rbegin
(
)
;
it
!
=
finishedLayers
.
rend
(
)
;
+
+
it
)
{
result
.
AddLayerData
(
std
:
:
move
(
*
it
)
)
;
}
for
(
auto
&
[
layerIndex
storedIndex
]
:
result
.
mIndexMap
)
{
(
void
)
layerIndex
;
storedIndex
=
result
.
GetLayerCount
(
)
-
storedIndex
-
1
;
}
return
result
;
}
const
WebRenderLayerScrollData
*
TestWRScrollData
:
:
operator
[
]
(
size_t
aLayerIndex
)
const
{
auto
it
=
mIndexMap
.
find
(
aLayerIndex
)
;
if
(
it
=
=
mIndexMap
.
end
(
)
)
{
return
nullptr
;
}
return
GetLayerData
(
it
-
>
second
)
;
}
WebRenderLayerScrollData
*
TestWRScrollData
:
:
operator
[
]
(
size_t
aLayerIndex
)
{
auto
it
=
mIndexMap
.
find
(
aLayerIndex
)
;
if
(
it
=
=
mIndexMap
.
end
(
)
)
{
return
nullptr
;
}
return
GetLayerData
(
it
-
>
second
)
;
}
void
TestWRScrollData
:
:
SetScrollMetadata
(
size_t
aLayerIndex
const
nsTArray
<
ScrollMetadata
>
&
aMetadata
)
{
WebRenderLayerScrollData
*
layer
=
operator
[
]
(
aLayerIndex
)
;
MOZ_ASSERT
(
layer
)
;
for
(
const
ScrollMetadata
&
metadata
:
aMetadata
)
{
layer
-
>
AppendScrollMetadata
(
*
this
metadata
)
;
}
}
class
WebRenderScrollDataWrapperTester
:
public
:
:
testing
:
:
Test
{
protected
:
virtual
void
SetUp
(
)
{
gfxPlatform
:
:
GetPlatform
(
)
;
mManager
=
new
APZCTreeManager
(
LayersId
{
0
}
MakeUnique
<
InternalHitTester
>
(
)
)
;
mUpdater
=
new
APZUpdater
(
mManager
false
)
;
}
RefPtr
<
APZCTreeManager
>
mManager
;
RefPtr
<
APZUpdater
>
mUpdater
;
}
;
TEST_F
(
WebRenderScrollDataWrapperTester
SimpleTree
)
{
auto
layers
=
TestWRScrollData
:
:
Create
(
"
x
(
x
(
x
(
xx
)
x
(
x
)
)
)
"
*
mUpdater
)
;
WebRenderScrollDataWrapper
w0
(
*
mUpdater
&
layers
)
;
ASSERT_EQ
(
layers
[
0
]
w0
.
GetLayer
(
)
)
;
WebRenderScrollDataWrapper
w1
=
w0
.
GetLastChild
(
)
;
ASSERT_EQ
(
layers
[
1
]
w1
.
GetLayer
(
)
)
;
ASSERT_FALSE
(
w1
.
GetPrevSibling
(
)
.
IsValid
(
)
)
;
WebRenderScrollDataWrapper
w5
=
w1
.
GetLastChild
(
)
;
ASSERT_EQ
(
layers
[
5
]
w5
.
GetLayer
(
)
)
;
WebRenderScrollDataWrapper
w6
=
w5
.
GetLastChild
(
)
;
ASSERT_EQ
(
layers
[
6
]
w6
.
GetLayer
(
)
)
;
ASSERT_FALSE
(
w6
.
GetLastChild
(
)
.
IsValid
(
)
)
;
WebRenderScrollDataWrapper
w2
=
w5
.
GetPrevSibling
(
)
;
ASSERT_EQ
(
layers
[
2
]
w2
.
GetLayer
(
)
)
;
ASSERT_FALSE
(
w2
.
GetPrevSibling
(
)
.
IsValid
(
)
)
;
WebRenderScrollDataWrapper
w4
=
w2
.
GetLastChild
(
)
;
ASSERT_EQ
(
layers
[
4
]
w4
.
GetLayer
(
)
)
;
ASSERT_FALSE
(
w4
.
GetLastChild
(
)
.
IsValid
(
)
)
;
WebRenderScrollDataWrapper
w3
=
w4
.
GetPrevSibling
(
)
;
ASSERT_EQ
(
layers
[
3
]
w3
.
GetLayer
(
)
)
;
ASSERT_FALSE
(
w3
.
GetLastChild
(
)
.
IsValid
(
)
)
;
ASSERT_FALSE
(
w3
.
GetPrevSibling
(
)
.
IsValid
(
)
)
;
}
static
ScrollMetadata
MakeMetadata
(
ScrollableLayerGuid
:
:
ViewID
aId
)
{
ScrollMetadata
metadata
;
metadata
.
GetMetrics
(
)
.
SetScrollId
(
aId
)
;
return
metadata
;
}
TEST_F
(
WebRenderScrollDataWrapperTester
MultiFramemetricsTree
)
{
auto
layers
=
TestWRScrollData
:
:
Create
(
"
x
(
x
(
x
(
xx
)
x
(
x
)
)
)
"
*
mUpdater
)
;
nsTArray
<
ScrollMetadata
>
metadata
;
metadata
.
InsertElementAt
(
0
MakeMetadata
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
0
)
)
;
metadata
.
InsertElementAt
(
0
MakeMetadata
(
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
)
)
;
metadata
.
InsertElementAt
(
0
MakeMetadata
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
)
;
metadata
.
InsertElementAt
(
0
MakeMetadata
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
2
)
)
;
metadata
.
InsertElementAt
(
0
MakeMetadata
(
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
)
)
;
metadata
.
InsertElementAt
(
0
MakeMetadata
(
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
)
)
;
layers
.
SetScrollMetadata
(
0
metadata
)
;
metadata
.
Clear
(
)
;
metadata
.
InsertElementAt
(
0
MakeMetadata
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
3
)
)
;
layers
.
SetScrollMetadata
(
1
metadata
)
;
metadata
.
Clear
(
)
;
metadata
.
InsertElementAt
(
0
MakeMetadata
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
4
)
)
;
layers
.
SetScrollMetadata
(
2
metadata
)
;
metadata
.
Clear
(
)
;
metadata
.
InsertElementAt
(
0
MakeMetadata
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
5
)
)
;
layers
.
SetScrollMetadata
(
4
metadata
)
;
metadata
.
Clear
(
)
;
metadata
.
InsertElementAt
(
0
MakeMetadata
(
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
)
)
;
metadata
.
InsertElementAt
(
0
MakeMetadata
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
6
)
)
;
layers
.
SetScrollMetadata
(
5
metadata
)
;
WebRenderScrollDataWrapper
wrapper
(
*
mUpdater
&
layers
)
;
nsTArray
<
WebRenderLayerScrollData
*
>
expectedLayers
;
expectedLayers
.
AppendElement
(
layers
[
0
]
)
;
expectedLayers
.
AppendElement
(
layers
[
0
]
)
;
expectedLayers
.
AppendElement
(
layers
[
0
]
)
;
expectedLayers
.
AppendElement
(
layers
[
0
]
)
;
expectedLayers
.
AppendElement
(
layers
[
0
]
)
;
expectedLayers
.
AppendElement
(
layers
[
0
]
)
;
expectedLayers
.
AppendElement
(
layers
[
1
]
)
;
expectedLayers
.
AppendElement
(
layers
[
5
]
)
;
expectedLayers
.
AppendElement
(
layers
[
5
]
)
;
expectedLayers
.
AppendElement
(
layers
[
6
]
)
;
nsTArray
<
ScrollableLayerGuid
:
:
ViewID
>
expectedIds
;
expectedIds
.
AppendElement
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
0
)
;
expectedIds
.
AppendElement
(
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
)
;
expectedIds
.
AppendElement
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
expectedIds
.
AppendElement
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
2
)
;
expectedIds
.
AppendElement
(
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
)
;
expectedIds
.
AppendElement
(
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
)
;
expectedIds
.
AppendElement
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
3
)
;
expectedIds
.
AppendElement
(
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
)
;
expectedIds
.
AppendElement
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
6
)
;
expectedIds
.
AppendElement
(
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
)
;
for
(
int
i
=
0
;
i
<
10
;
i
+
+
)
{
ASSERT_EQ
(
expectedLayers
[
i
]
wrapper
.
GetLayer
(
)
)
;
ASSERT_EQ
(
expectedIds
[
i
]
wrapper
.
Metrics
(
)
.
GetScrollId
(
)
)
;
wrapper
=
wrapper
.
GetLastChild
(
)
;
}
ASSERT_FALSE
(
wrapper
.
IsValid
(
)
)
;
}
