#
ifndef
mozilla_layers_InputUtils_h
#
define
mozilla_layers_InputUtils_h
#
include
"
APZTestCommon
.
h
"
template
<
class
InputReceiver
>
void
SetDefaultAllowedTouchBehavior
(
const
RefPtr
<
InputReceiver
>
&
aTarget
uint64_t
aInputBlockId
int
touchPoints
=
1
)
{
nsTArray
<
uint32_t
>
defaultBehaviors
;
for
(
int
i
=
0
;
i
<
touchPoints
;
i
+
+
)
{
defaultBehaviors
.
AppendElement
(
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
HORIZONTAL_PAN
|
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
VERTICAL_PAN
|
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
PINCH_ZOOM
|
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
DOUBLE_TAP_ZOOM
)
;
}
aTarget
-
>
SetAllowedTouchBehavior
(
aInputBlockId
defaultBehaviors
)
;
}
inline
MultiTouchInput
CreateMultiTouchInput
(
MultiTouchInput
:
:
MultiTouchType
aType
TimeStamp
aTime
)
{
return
MultiTouchInput
(
aType
MillisecondsSinceStartup
(
aTime
)
aTime
0
)
;
}
template
<
class
InputReceiver
>
APZEventResult
TouchDown
(
const
RefPtr
<
InputReceiver
>
&
aTarget
const
ScreenIntPoint
&
aPoint
TimeStamp
aTime
)
{
MultiTouchInput
mti
=
CreateMultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_START
aTime
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
0
aPoint
)
)
;
return
aTarget
-
>
ReceiveInputEvent
(
mti
)
;
}
template
<
class
InputReceiver
>
APZEventResult
TouchMove
(
const
RefPtr
<
InputReceiver
>
&
aTarget
const
ScreenIntPoint
&
aPoint
TimeStamp
aTime
)
{
MultiTouchInput
mti
=
CreateMultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_MOVE
aTime
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
0
aPoint
)
)
;
return
aTarget
-
>
ReceiveInputEvent
(
mti
)
;
}
template
<
class
InputReceiver
>
APZEventResult
TouchUp
(
const
RefPtr
<
InputReceiver
>
&
aTarget
const
ScreenIntPoint
&
aPoint
TimeStamp
aTime
)
{
MultiTouchInput
mti
=
CreateMultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_END
aTime
)
;
mti
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
0
aPoint
)
)
;
return
aTarget
-
>
ReceiveInputEvent
(
mti
)
;
}
template
<
class
InputReceiver
>
APZEventResult
Wheel
(
const
RefPtr
<
InputReceiver
>
&
aTarget
const
ScreenIntPoint
&
aPoint
const
ScreenPoint
&
aDelta
TimeStamp
aTime
)
{
ScrollWheelInput
input
(
MillisecondsSinceStartup
(
aTime
)
aTime
0
ScrollWheelInput
:
:
SCROLLMODE_INSTANT
ScrollWheelInput
:
:
SCROLLDELTA_PIXEL
aPoint
aDelta
.
x
aDelta
.
y
false
WheelDeltaAdjustmentStrategy
:
:
eNone
)
;
return
aTarget
-
>
ReceiveInputEvent
(
input
)
;
}
template
<
class
InputReceiver
>
APZEventResult
SmoothWheel
(
const
RefPtr
<
InputReceiver
>
&
aTarget
const
ScreenIntPoint
&
aPoint
const
ScreenPoint
&
aDelta
TimeStamp
aTime
)
{
ScrollWheelInput
input
(
MillisecondsSinceStartup
(
aTime
)
aTime
0
ScrollWheelInput
:
:
SCROLLMODE_SMOOTH
ScrollWheelInput
:
:
SCROLLDELTA_LINE
aPoint
aDelta
.
x
aDelta
.
y
false
WheelDeltaAdjustmentStrategy
:
:
eNone
)
;
return
aTarget
-
>
ReceiveInputEvent
(
input
)
;
}
template
<
class
InputReceiver
>
APZEventResult
MouseDown
(
const
RefPtr
<
InputReceiver
>
&
aTarget
const
ScreenIntPoint
&
aPoint
TimeStamp
aTime
)
{
MouseInput
input
(
MouseInput
:
:
MOUSE_DOWN
MouseInput
:
:
ButtonType
:
:
PRIMARY_BUTTON
0
0
aPoint
MillisecondsSinceStartup
(
aTime
)
aTime
0
)
;
return
aTarget
-
>
ReceiveInputEvent
(
input
)
;
}
template
<
class
InputReceiver
>
APZEventResult
MouseMove
(
const
RefPtr
<
InputReceiver
>
&
aTarget
const
ScreenIntPoint
&
aPoint
TimeStamp
aTime
)
{
MouseInput
input
(
MouseInput
:
:
MOUSE_MOVE
MouseInput
:
:
ButtonType
:
:
PRIMARY_BUTTON
0
0
aPoint
MillisecondsSinceStartup
(
aTime
)
aTime
0
)
;
return
aTarget
-
>
ReceiveInputEvent
(
input
)
;
}
template
<
class
InputReceiver
>
APZEventResult
MouseUp
(
const
RefPtr
<
InputReceiver
>
&
aTarget
const
ScreenIntPoint
&
aPoint
TimeStamp
aTime
)
{
MouseInput
input
(
MouseInput
:
:
MOUSE_UP
MouseInput
:
:
ButtonType
:
:
PRIMARY_BUTTON
0
0
aPoint
MillisecondsSinceStartup
(
aTime
)
aTime
0
)
;
return
aTarget
-
>
ReceiveInputEvent
(
input
)
;
}
template
<
class
InputReceiver
>
APZEventResult
PanGesture
(
PanGestureInput
:
:
PanGestureType
aType
const
RefPtr
<
InputReceiver
>
&
aTarget
const
ScreenIntPoint
&
aPoint
const
ScreenPoint
&
aDelta
TimeStamp
aTime
Modifiers
aModifiers
=
MODIFIER_NONE
bool
aSimulateMomentum
=
false
)
{
PanGestureInput
input
(
aType
MillisecondsSinceStartup
(
aTime
)
aTime
aPoint
aDelta
aModifiers
)
;
input
.
mSimulateMomentum
=
aSimulateMomentum
;
if
constexpr
(
std
:
:
is_same_v
<
InputReceiver
TestAsyncPanZoomController
>
)
{
input
.
mHandledByAPZ
=
true
;
}
return
aTarget
-
>
ReceiveInputEvent
(
input
)
;
}
template
<
class
InputReceiver
>
APZEventResult
PanGestureWithModifiers
(
PanGestureInput
:
:
PanGestureType
aType
Modifiers
aModifiers
const
RefPtr
<
InputReceiver
>
&
aTarget
const
ScreenIntPoint
&
aPoint
const
ScreenPoint
&
aDelta
TimeStamp
aTime
)
{
return
PanGesture
(
aType
aTarget
aPoint
aDelta
aTime
aModifiers
)
;
}
#
endif
