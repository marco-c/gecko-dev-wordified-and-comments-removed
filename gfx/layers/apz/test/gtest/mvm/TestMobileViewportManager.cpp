#
include
"
gtest
/
gtest
.
h
"
#
include
"
gmock
/
gmock
.
h
"
#
include
<
functional
>
#
include
"
MobileViewportManager
.
h
"
#
include
"
mozilla
/
MVMContext
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
using
namespace
mozilla
;
class
MockMVMContext
:
public
MVMContext
{
using
AutoSizeFlag
=
nsViewportInfo
:
:
AutoSizeFlag
;
using
AutoScaleFlag
=
nsViewportInfo
:
:
AutoScaleFlag
;
using
ZoomFlag
=
nsViewportInfo
:
:
ZoomFlag
;
using
LayoutFunction
=
std
:
:
function
<
CSSSize
(
CSSSize
aICBSize
)
>
;
public
:
MOCK_METHOD3
(
AddEventListener
void
(
const
nsAString
&
aType
nsIDOMEventListener
*
aListener
bool
aUseCapture
)
)
;
MOCK_METHOD3
(
RemoveEventListener
void
(
const
nsAString
&
aType
nsIDOMEventListener
*
aListener
bool
aUseCapture
)
)
;
MOCK_METHOD3
(
AddObserver
void
(
nsIObserver
*
aObserver
const
char
*
aTopic
bool
aOwnsWeak
)
)
;
MOCK_METHOD2
(
RemoveObserver
void
(
nsIObserver
*
aObserver
const
char
*
aTopic
)
)
;
MOCK_METHOD0
(
Destroy
void
(
)
)
;
MOCK_METHOD1
(
SetVisualViewportSize
void
(
const
CSSSize
&
aSize
)
)
;
MOCK_METHOD0
(
UpdateDisplayPortMargins
void
(
)
)
;
void
SetMVM
(
MobileViewportManager
*
aMVM
)
{
mMVM
=
aMVM
;
}
nsViewportInfo
GetViewportInfo
(
const
ScreenIntSize
&
aDisplaySize
)
const
{
CSSSize
viewportSize
=
mDisplaySize
/
mDeviceScale
;
if
(
mAutoSizeFlag
=
=
AutoSizeFlag
:
:
FixedSize
)
{
viewportSize
=
CSSSize
(
mFixedViewportWidth
mFixedViewportWidth
*
(
float
(
mDisplaySize
.
height
)
/
mDisplaySize
.
width
)
)
;
}
return
nsViewportInfo
(
mDefaultScale
mMinScale
mMaxScale
viewportSize
mAutoSizeFlag
mAutoScaleFlag
mZoomFlag
)
;
}
CSSToLayoutDeviceScale
CSSToDevPixelScale
(
)
const
{
return
mDeviceScale
;
}
float
GetResolution
(
)
const
{
return
mResolution
;
}
bool
SubjectMatchesDocument
(
nsISupports
*
aSubject
)
const
{
return
true
;
}
Maybe
<
CSSRect
>
CalculateScrollableRectForRSF
(
)
const
{
return
Some
(
CSSRect
(
CSSPoint
(
)
mContentSize
)
)
;
}
bool
IsResolutionUpdatedByApz
(
)
const
{
return
false
;
}
LayoutDeviceMargin
ScrollbarAreaToExcludeFromCompositionBounds
(
)
const
{
return
LayoutDeviceMargin
(
)
;
}
Maybe
<
LayoutDeviceIntSize
>
GetContentViewerSize
(
)
const
{
return
Some
(
mDisplaySize
)
;
}
bool
AllowZoomingForDocument
(
)
const
{
return
true
;
}
void
SetResolutionAndScaleTo
(
float
aResolution
ResolutionChangeOrigin
aOrigin
)
{
mResolution
=
aResolution
;
mMVM
-
>
ResolutionUpdated
(
aOrigin
)
;
}
void
Reflow
(
const
CSSSize
&
aNewSize
const
CSSSize
&
aOldSize
ResizeEventFlag
aResizeEventFlag
)
{
mICBSize
=
aNewSize
;
mContentSize
=
mLayoutFunction
(
mICBSize
)
;
}
void
SetMinScale
(
CSSToScreenScale
aMinScale
)
{
mMinScale
=
aMinScale
;
}
void
SetMaxScale
(
CSSToScreenScale
aMaxScale
)
{
mMaxScale
=
aMaxScale
;
}
void
SetInitialScale
(
CSSToScreenScale
aInitialScale
)
{
mDefaultScale
=
aInitialScale
;
mAutoScaleFlag
=
AutoScaleFlag
:
:
FixedScale
;
}
void
SetFixedViewportWidth
(
CSSCoord
aWidth
)
{
mFixedViewportWidth
=
aWidth
;
mAutoSizeFlag
=
AutoSizeFlag
:
:
FixedSize
;
}
void
SetDisplaySize
(
const
LayoutDeviceIntSize
&
aNewDisplaySize
)
{
mDisplaySize
=
aNewDisplaySize
;
}
void
SetLayoutFunction
(
const
LayoutFunction
&
aLayoutFunction
)
{
mLayoutFunction
=
aLayoutFunction
;
}
CSSSize
GetICBSize
(
)
const
{
return
mICBSize
;
}
CSSSize
GetContentSize
(
)
const
{
return
mContentSize
;
}
private
:
LayoutDeviceIntSize
mDisplaySize
{
300
600
}
;
CSSToScreenScale
mDefaultScale
{
1
.
0f
}
;
CSSToScreenScale
mMinScale
{
0
.
25f
}
;
CSSToScreenScale
mMaxScale
{
10
.
0f
}
;
CSSToLayoutDeviceScale
mDeviceScale
{
1
.
0f
}
;
CSSCoord
mFixedViewportWidth
;
AutoSizeFlag
mAutoSizeFlag
=
AutoSizeFlag
:
:
AutoSize
;
AutoScaleFlag
mAutoScaleFlag
=
AutoScaleFlag
:
:
AutoScale
;
ZoomFlag
mZoomFlag
=
ZoomFlag
:
:
AllowZoom
;
LayoutFunction
mLayoutFunction
=
[
]
(
CSSSize
aICBSize
)
{
return
aICBSize
;
}
;
float
mResolution
=
1
.
0f
;
CSSSize
mICBSize
;
CSSSize
mContentSize
;
MobileViewportManager
*
mMVM
=
nullptr
;
}
;
class
MVMTester
:
public
:
:
testing
:
:
Test
{
public
:
MVMTester
(
)
:
mMVMContext
(
new
MockMVMContext
(
)
)
mMVM
(
new
MobileViewportManager
(
mMVMContext
)
)
{
mMVMContext
-
>
SetMVM
(
mMVM
.
get
(
)
)
;
}
void
Resize
(
const
LayoutDeviceIntSize
&
aNewDisplaySize
)
{
mMVMContext
-
>
SetDisplaySize
(
aNewDisplaySize
)
;
mMVM
-
>
RequestReflow
(
false
)
;
}
protected
:
RefPtr
<
MockMVMContext
>
mMVMContext
;
RefPtr
<
MobileViewportManager
>
mMVM
;
}
;
TEST_F
(
MVMTester
ZoomBoundsRespectedAfterRotation_Bug1536755
)
{
mMVMContext
-
>
SetDisplaySize
(
LayoutDeviceIntSize
(
600
300
)
)
;
mMVMContext
-
>
SetInitialScale
(
CSSToScreenScale
(
1
.
0f
)
)
;
mMVMContext
-
>
SetMinScale
(
CSSToScreenScale
(
1
.
0f
)
)
;
mMVMContext
-
>
SetMaxScale
(
CSSToScreenScale
(
1
.
0f
)
)
;
mMVMContext
-
>
SetLayoutFunction
(
[
]
(
CSSSize
aICBSize
)
{
return
CSSSize
(
aICBSize
.
width
aICBSize
.
width
*
2
)
;
}
)
;
mMVM
-
>
SetInitialViewport
(
)
;
EXPECT_EQ
(
CSSSize
(
600
300
)
mMVMContext
-
>
GetICBSize
(
)
)
;
EXPECT_EQ
(
CSSSize
(
600
1200
)
mMVMContext
-
>
GetContentSize
(
)
)
;
EXPECT_EQ
(
1
.
0f
mMVMContext
-
>
GetResolution
(
)
)
;
Resize
(
LayoutDeviceIntSize
(
300
600
)
)
;
EXPECT_EQ
(
CSSSize
(
300
600
)
mMVMContext
-
>
GetICBSize
(
)
)
;
EXPECT_EQ
(
CSSSize
(
300
600
)
mMVMContext
-
>
GetContentSize
(
)
)
;
EXPECT_EQ
(
1
.
0f
mMVMContext
-
>
GetResolution
(
)
)
;
}
TEST_F
(
MVMTester
LandscapeToPortraitRotation_Bug1523844
)
{
mMVMContext
-
>
SetDisplaySize
(
LayoutDeviceIntSize
(
300
600
)
)
;
mMVMContext
-
>
SetLayoutFunction
(
[
]
(
CSSSize
aICBSize
)
{
return
CSSSize
(
600
1200
)
;
}
)
;
mMVM
-
>
HandleDOMMetaAdded
(
)
;
mMVM
-
>
SetInitialViewport
(
)
;
EXPECT_EQ
(
CSSSize
(
300
600
)
mMVMContext
-
>
GetICBSize
(
)
)
;
EXPECT_EQ
(
CSSSize
(
600
1200
)
mMVMContext
-
>
GetContentSize
(
)
)
;
EXPECT_EQ
(
0
.
5f
mMVMContext
-
>
GetResolution
(
)
)
;
Resize
(
LayoutDeviceIntSize
(
600
300
)
)
;
EXPECT_EQ
(
CSSSize
(
600
300
)
mMVMContext
-
>
GetICBSize
(
)
)
;
EXPECT_EQ
(
CSSSize
(
600
1200
)
mMVMContext
-
>
GetContentSize
(
)
)
;
EXPECT_EQ
(
1
.
0f
mMVMContext
-
>
GetResolution
(
)
)
;
Resize
(
LayoutDeviceIntSize
(
300
600
)
)
;
EXPECT_EQ
(
CSSSize
(
300
600
)
mMVMContext
-
>
GetICBSize
(
)
)
;
EXPECT_EQ
(
CSSSize
(
600
1200
)
mMVMContext
-
>
GetContentSize
(
)
)
;
EXPECT_EQ
(
0
.
5f
mMVMContext
-
>
GetResolution
(
)
)
;
}
