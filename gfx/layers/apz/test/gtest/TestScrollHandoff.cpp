#
include
"
APZCTreeManagerTester
.
h
"
#
include
"
APZTestCommon
.
h
"
#
include
"
InputUtils
.
h
"
class
APZScrollHandoffTester
:
public
APZCTreeManagerTester
{
protected
:
UniquePtr
<
ScopedLayerTreeRegistration
>
registration
;
TestAsyncPanZoomController
*
rootApzc
;
void
CreateScrollHandoffLayerTree1
(
)
{
const
char
*
treeShape
=
"
x
(
x
)
"
;
LayerIntRect
layerVisibleRect
[
]
=
{
LayerIntRect
(
0
0
100
100
)
LayerIntRect
(
0
50
100
50
)
}
;
CreateScrollData
(
treeShape
layerVisibleRect
)
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
CSSRect
(
0
0
200
200
)
)
;
SetScrollableFrameMetrics
(
layers
[
1
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
CSSRect
(
0
0
100
100
)
)
;
SetScrollHandoff
(
layers
[
1
]
root
)
;
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
rootApzc
=
ApzcOf
(
root
)
;
rootApzc
-
>
GetFrameMetrics
(
)
.
SetIsRootContent
(
true
)
;
}
void
CreateScrollHandoffLayerTree2
(
)
{
const
char
*
treeShape
=
"
x
(
x
(
x
)
)
"
;
LayerIntRect
layerVisibleRect
[
]
=
{
LayerIntRect
(
0
0
100
100
)
LayerIntRect
(
0
0
100
100
)
LayerIntRect
(
0
50
100
50
)
}
;
CreateScrollData
(
treeShape
layerVisibleRect
)
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
CSSRect
(
0
0
200
200
)
)
;
SetScrollableFrameMetrics
(
layers
[
1
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
2
CSSRect
(
-
100
-
100
200
200
)
)
;
SetScrollableFrameMetrics
(
layers
[
2
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
CSSRect
(
0
0
100
100
)
)
;
SetScrollHandoff
(
layers
[
1
]
root
)
;
SetScrollHandoff
(
layers
[
2
]
layers
[
1
]
)
;
MOZ_ASSERT
(
registration
)
;
UpdateHitTestingTree
(
)
;
rootApzc
=
ApzcOf
(
root
)
;
}
void
CreateScrollHandoffLayerTree3
(
)
{
const
char
*
treeShape
=
"
x
(
x
(
x
)
x
(
x
)
)
"
;
LayerIntRect
layerVisibleRect
[
]
=
{
LayerIntRect
(
0
0
100
100
)
LayerIntRect
(
0
0
100
50
)
LayerIntRect
(
0
0
100
50
)
LayerIntRect
(
0
50
100
50
)
LayerIntRect
(
0
50
100
50
)
}
;
CreateScrollData
(
treeShape
layerVisibleRect
)
;
SetScrollableFrameMetrics
(
layers
[
0
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
CSSRect
(
0
0
100
100
)
)
;
SetScrollableFrameMetrics
(
layers
[
1
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
CSSRect
(
0
0
100
100
)
)
;
SetScrollableFrameMetrics
(
layers
[
2
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
2
CSSRect
(
0
0
100
100
)
)
;
SetScrollableFrameMetrics
(
layers
[
3
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
3
CSSRect
(
0
50
100
100
)
)
;
SetScrollableFrameMetrics
(
layers
[
4
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
4
CSSRect
(
0
50
100
100
)
)
;
SetScrollHandoff
(
layers
[
1
]
layers
[
0
]
)
;
SetScrollHandoff
(
layers
[
3
]
layers
[
0
]
)
;
SetScrollHandoff
(
layers
[
2
]
layers
[
1
]
)
;
SetScrollHandoff
(
layers
[
4
]
layers
[
3
]
)
;
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
}
void
CreateScrollHandoffLayerTree4
(
)
{
const
char
*
treeShape
=
"
x
(
x
)
"
;
LayerIntRect
layerVisibleRect
[
]
=
{
LayerIntRect
(
0
0
100
100
)
LayerIntRect
(
0
0
100
100
)
}
;
CreateScrollData
(
treeShape
layerVisibleRect
)
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
CSSRect
(
0
0
200
100
)
)
;
SetScrollableFrameMetrics
(
layers
[
1
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
CSSRect
(
0
0
100
200
)
)
;
SetScrollHandoff
(
layers
[
1
]
root
)
;
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
rootApzc
=
ApzcOf
(
root
)
;
}
void
CreateScrollHandoffLayerTree5
(
)
{
const
char
*
treeShape
=
"
x
(
x
)
"
;
LayerIntRect
layerVisibleRect
[
]
=
{
LayerIntRect
(
0
0
100
100
)
LayerIntRect
(
0
50
100
50
)
}
;
CreateScrollData
(
treeShape
layerVisibleRect
)
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
CSSRect
(
0
0
100
100
)
)
;
SetScrollableFrameMetrics
(
layers
[
1
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
CSSRect
(
0
0
100
200
)
)
;
SetScrollHandoff
(
layers
[
1
]
root
)
;
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
rootApzc
=
ApzcOf
(
root
)
;
}
void
CreateScrollHandoffLayerTree6
(
)
{
const
char
*
treeShape
=
"
x
(
x
)
"
;
LayerIntRect
layerVisibleRect
[
]
=
{
LayerIntRect
(
0
0
100
100
)
LayerIntRect
(
0
0
100
1000
)
}
;
CreateScrollData
(
treeShape
layerVisibleRect
)
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
CSSRect
(
0
0
100
1000
)
)
;
SetScrollableFrameMetrics
(
layers
[
1
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
CSSRect
(
0
0
200
1000
)
)
;
SetScrollHandoff
(
layers
[
1
]
root
)
;
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
rootApzc
=
ApzcOf
(
root
)
;
}
void
TestCrossApzcAxisLock
(
)
{
SCOPED_GFX_PREF_INT
(
"
apz
.
axis_lock
.
mode
"
1
)
;
CreateScrollHandoffLayerTree1
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
childApzc
=
ApzcOf
(
layers
[
1
]
)
;
Pan
(
childApzc
ScreenIntPoint
(
10
60
)
ScreenIntPoint
(
15
90
)
PanOptions
:
:
KeepFingerDown
|
PanOptions
:
:
ExactCoordinates
)
;
childApzc
-
>
AssertAxisLocked
(
ScrollDirection
:
:
eVertical
)
;
childApzc
-
>
AssertStateIsPanningLockedY
(
)
;
}
}
;
class
APZScrollHandoffTesterMock
:
public
APZScrollHandoffTester
{
public
:
APZScrollHandoffTesterMock
(
)
{
CreateMockHitTester
(
)
;
}
}
;
class
APZCNestedFlingScrollHandoffTester
:
public
APZCTreeManagerTester
{
protected
:
void
SetUp
(
)
{
APZCTreeManagerTester
:
:
SetUp
(
)
;
const
char
*
treeShape
=
"
x
(
x
)
"
;
LayerIntRect
layerVisibleRect
[
]
=
{
LayerIntRect
(
0
0
800
1000
)
LayerIntRect
(
0
0
100
100
)
}
;
CreateScrollData
(
treeShape
layerVisibleRect
)
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
CSSRect
(
0
0
800
50000
)
)
;
SetScrollableFrameMetrics
(
layers
[
1
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
CSSRect
(
0
0
800
100
)
)
;
SetScrollHandoff
(
layers
[
1
]
root
)
;
ModifyFrameMetrics
(
root
[
]
(
ScrollMetadata
&
aSm
FrameMetrics
&
aMetrics
)
{
aMetrics
.
SetVisualScrollUpdateType
(
FrameMetrics
:
:
ScrollOffsetUpdateType
:
:
eMainThread
)
;
aMetrics
.
SetVisualDestination
(
CSSPoint
(
0
25000
)
)
;
}
)
;
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
subframeApzc
=
ApzcOf
(
layers
[
1
]
)
;
}
void
ExecuteDirectionChangingPanGesture
(
const
ScreenIntPoint
&
aStartPoint
std
:
:
initializer_list
<
int32_t
>
aXDeltas
std
:
:
initializer_list
<
int32_t
>
aYDeltas
)
{
APZEventResult
result
=
TouchDown
(
subframeApzc
aStartPoint
mcc
-
>
Time
(
)
)
;
if
(
result
.
GetStatus
(
)
!
=
nsEventStatus_eConsumeNoDefault
)
{
SetDefaultAllowedTouchBehavior
(
subframeApzc
result
.
mInputBlockId
)
;
}
const
TimeDuration
kTouchTimeDelta100Hz
=
TimeDuration
:
:
FromMilliseconds
(
10
)
;
ScreenIntPoint
currentLocation
=
aStartPoint
;
for
(
int32_t
delta
:
aXDeltas
)
{
mcc
-
>
AdvanceBy
(
kTouchTimeDelta100Hz
)
;
if
(
delta
!
=
0
)
{
currentLocation
.
x
+
=
delta
;
Unused
<
<
TouchMove
(
subframeApzc
currentLocation
mcc
-
>
Time
(
)
)
;
}
}
ExecuteWait
(
TimeDuration
:
:
FromMilliseconds
(
255
)
)
;
for
(
int32_t
delta
:
aYDeltas
)
{
mcc
-
>
AdvanceBy
(
kTouchTimeDelta100Hz
)
;
if
(
delta
!
=
0
)
{
currentLocation
.
y
+
=
delta
;
Unused
<
<
TouchMove
(
subframeApzc
currentLocation
mcc
-
>
Time
(
)
)
;
}
}
Unused
<
<
TouchUp
(
subframeApzc
currentLocation
mcc
-
>
Time
(
)
)
;
}
void
ExecuteWait
(
const
TimeDuration
&
aDuration
)
{
TimeDuration
remaining
=
aDuration
;
const
TimeDuration
TIME_BETWEEN_FRAMES
=
TimeDuration
:
:
FromSeconds
(
1
)
/
int64_t
(
60
)
;
while
(
remaining
.
ToMilliseconds
(
)
>
0
)
{
mcc
-
>
AdvanceBy
(
TIME_BETWEEN_FRAMES
)
;
subframeApzc
-
>
AdvanceAnimations
(
mcc
-
>
GetSampleTime
(
)
)
;
remaining
-
=
TIME_BETWEEN_FRAMES
;
}
}
RefPtr
<
TestAsyncPanZoomController
>
subframeApzc
;
UniquePtr
<
ScopedLayerTreeRegistration
>
registration
;
}
;
#
ifndef
MOZ_WIDGET_ANDROID
TEST_F
(
APZScrollHandoffTester
DeferredInputEventProcessing
)
{
SCOPED_GFX_PREF_BOOL
(
"
apz
.
allow_immediate_handoff
"
true
)
;
CreateScrollHandoffLayerTree1
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
childApzc
=
ApzcOf
(
layers
[
1
]
)
;
childApzc
-
>
SetWaitForMainThread
(
)
;
uint64_t
blockId
=
0
;
Pan
(
childApzc
90
30
PanOptions
:
:
NoFling
nullptr
nullptr
&
blockId
)
;
childApzc
-
>
ContentReceivedInputBlock
(
blockId
false
)
;
childApzc
-
>
ConfirmTarget
(
blockId
)
;
EXPECT_EQ
(
50
childApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
)
;
EXPECT_EQ
(
10
rootApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
)
;
}
#
endif
#
ifndef
MOZ_WIDGET_ANDROID
TEST_F
(
APZScrollHandoffTester
LayerStructureChangesWhileEventsArePending
)
{
SCOPED_GFX_PREF_BOOL
(
"
apz
.
allow_immediate_handoff
"
true
)
;
CreateScrollHandoffLayerTree1
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
childApzc
=
ApzcOf
(
layers
[
1
]
)
;
childApzc
-
>
SetWaitForMainThread
(
)
;
uint64_t
blockId
=
0
;
Pan
(
childApzc
90
30
PanOptions
:
:
NoFling
nullptr
nullptr
&
blockId
)
;
CreateScrollHandoffLayerTree2
(
)
;
WebRenderLayerScrollData
*
middle
=
layers
[
1
]
;
childApzc
-
>
SetWaitForMainThread
(
)
;
TestAsyncPanZoomController
*
middleApzc
=
ApzcOf
(
middle
)
;
uint64_t
secondBlockId
=
0
;
Pan
(
childApzc
30
90
PanOptions
:
:
NoFling
nullptr
nullptr
&
secondBlockId
)
;
childApzc
-
>
ContentReceivedInputBlock
(
blockId
false
)
;
childApzc
-
>
ConfirmTarget
(
blockId
)
;
EXPECT_EQ
(
50
childApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
)
;
EXPECT_EQ
(
10
rootApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
)
;
EXPECT_EQ
(
0
middleApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
)
;
childApzc
-
>
ContentReceivedInputBlock
(
secondBlockId
false
)
;
childApzc
-
>
ConfirmTarget
(
secondBlockId
)
;
EXPECT_EQ
(
0
childApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
)
;
EXPECT_EQ
(
10
rootApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
)
;
EXPECT_EQ
(
-
10
middleApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
)
;
}
#
endif
#
ifndef
MOZ_WIDGET_ANDROID
TEST_F
(
APZScrollHandoffTesterMock
StuckInOverscroll_Bug1073250
)
{
SCOPED_GFX_PREF_BOOL
(
"
apz
.
overscroll
.
enabled
"
true
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_min_velocity_threshold
"
0
.
0f
)
;
CreateScrollHandoffLayerTree1
(
)
;
TestAsyncPanZoomController
*
child
=
ApzcOf
(
layers
[
1
]
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
Pan
(
manager
10
40
PanOptions
:
:
KeepFingerDown
)
;
EXPECT_FALSE
(
child
-
>
IsOverscrolled
(
)
)
;
EXPECT_TRUE
(
rootApzc
-
>
IsOverscrolled
(
)
)
;
MultiTouchInput
secondFingerDown
=
CreateMultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_START
mcc
-
>
Time
(
)
)
;
secondFingerDown
.
mTouches
.
AppendElement
(
SingleTouchData
(
0
ScreenIntPoint
(
10
40
)
ScreenSize
(
0
0
)
0
0
)
)
;
secondFingerDown
.
mTouches
.
AppendElement
(
SingleTouchData
(
1
ScreenIntPoint
(
30
20
)
ScreenSize
(
0
0
)
0
0
)
)
;
manager
-
>
ReceiveInputEvent
(
secondFingerDown
)
;
MultiTouchInput
fingersUp
=
secondFingerDown
;
fingersUp
.
mType
=
MultiTouchInput
:
:
MULTITOUCH_END
;
manager
-
>
ReceiveInputEvent
(
fingersUp
)
;
child
-
>
AdvanceAnimationsUntilEnd
(
)
;
rootApzc
-
>
AdvanceAnimationsUntilEnd
(
)
;
EXPECT_FALSE
(
child
-
>
IsOverscrolled
(
)
)
;
EXPECT_FALSE
(
rootApzc
-
>
IsOverscrolled
(
)
)
;
}
#
endif
#
ifndef
MOZ_WIDGET_ANDROID
TEST_F
(
APZScrollHandoffTesterMock
StuckInOverscroll_Bug1231228
)
{
SCOPED_GFX_PREF_BOOL
(
"
apz
.
overscroll
.
enabled
"
true
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_min_velocity_threshold
"
0
.
0f
)
;
CreateScrollHandoffLayerTree1
(
)
;
TestAsyncPanZoomController
*
child
=
ApzcOf
(
layers
[
1
]
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
Pan
(
manager
60
90
PanOptions
:
:
KeepFingerDown
)
;
EXPECT_FALSE
(
child
-
>
IsOverscrolled
(
)
)
;
EXPECT_TRUE
(
rootApzc
-
>
IsOverscrolled
(
)
)
;
MultiTouchInput
secondFingerDown
=
CreateMultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_START
mcc
-
>
Time
(
)
)
;
secondFingerDown
.
mTouches
.
AppendElement
(
SingleTouchData
(
0
ScreenIntPoint
(
10
40
)
ScreenSize
(
0
0
)
0
0
)
)
;
secondFingerDown
.
mTouches
.
AppendElement
(
SingleTouchData
(
1
ScreenIntPoint
(
30
20
)
ScreenSize
(
0
0
)
0
0
)
)
;
manager
-
>
ReceiveInputEvent
(
secondFingerDown
)
;
MultiTouchInput
fingersUp
=
secondFingerDown
;
fingersUp
.
mType
=
MultiTouchInput
:
:
MULTITOUCH_END
;
manager
-
>
ReceiveInputEvent
(
fingersUp
)
;
child
-
>
AdvanceAnimationsUntilEnd
(
)
;
rootApzc
-
>
AdvanceAnimationsUntilEnd
(
)
;
EXPECT_FALSE
(
child
-
>
IsOverscrolled
(
)
)
;
EXPECT_FALSE
(
rootApzc
-
>
IsOverscrolled
(
)
)
;
}
#
endif
#
ifndef
MOZ_WIDGET_ANDROID
TEST_F
(
APZScrollHandoffTester
StuckInOverscroll_Bug1240202a
)
{
SCOPED_GFX_PREF_BOOL
(
"
apz
.
overscroll
.
enabled
"
true
)
;
CreateScrollHandoffLayerTree1
(
)
;
TestAsyncPanZoomController
*
child
=
ApzcOf
(
layers
[
1
]
)
;
Pan
(
manager
60
90
PanOptions
:
:
KeepFingerDown
)
;
EXPECT_FALSE
(
child
-
>
IsOverscrolled
(
)
)
;
EXPECT_TRUE
(
rootApzc
-
>
IsOverscrolled
(
)
)
;
TouchUp
(
manager
ScreenIntPoint
(
10
90
)
mcc
-
>
Time
(
)
)
;
TouchDown
(
manager
ScreenIntPoint
(
10
90
)
mcc
-
>
Time
(
)
)
;
TouchUp
(
manager
ScreenIntPoint
(
10
90
)
mcc
-
>
Time
(
)
)
;
child
-
>
AdvanceAnimationsUntilEnd
(
)
;
rootApzc
-
>
AdvanceAnimationsUntilEnd
(
)
;
EXPECT_FALSE
(
child
-
>
IsOverscrolled
(
)
)
;
EXPECT_FALSE
(
rootApzc
-
>
IsOverscrolled
(
)
)
;
}
#
endif
#
ifndef
MOZ_WIDGET_ANDROID
TEST_F
(
APZScrollHandoffTesterMock
StuckInOverscroll_Bug1240202b
)
{
SCOPED_GFX_PREF_BOOL
(
"
apz
.
overscroll
.
enabled
"
true
)
;
CreateScrollHandoffLayerTree1
(
)
;
TestAsyncPanZoomController
*
child
=
ApzcOf
(
layers
[
1
]
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
Pan
(
manager
60
90
PanOptions
:
:
KeepFingerDown
)
;
EXPECT_FALSE
(
child
-
>
IsOverscrolled
(
)
)
;
EXPECT_TRUE
(
rootApzc
-
>
IsOverscrolled
(
)
)
;
TouchUp
(
manager
ScreenIntPoint
(
10
90
)
mcc
-
>
Time
(
)
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
TouchDown
(
manager
ScreenIntPoint
(
10
90
)
mcc
-
>
Time
(
)
)
;
MultiTouchInput
secondFingerDown
(
MultiTouchInput
:
:
MULTITOUCH_START
0
mcc
-
>
Time
(
)
0
)
;
secondFingerDown
.
mTouches
.
AppendElement
(
SingleTouchData
(
0
ScreenIntPoint
(
10
90
)
ScreenSize
(
0
0
)
0
0
)
)
;
secondFingerDown
.
mTouches
.
AppendElement
(
SingleTouchData
(
1
ScreenIntPoint
(
10
80
)
ScreenSize
(
0
0
)
0
0
)
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
manager
-
>
ReceiveInputEvent
(
secondFingerDown
)
;
MultiTouchInput
fingersUp
=
secondFingerDown
;
fingersUp
.
mType
=
MultiTouchInput
:
:
MULTITOUCH_END
;
manager
-
>
ReceiveInputEvent
(
fingersUp
)
;
child
-
>
AdvanceAnimationsUntilEnd
(
)
;
rootApzc
-
>
AdvanceAnimationsUntilEnd
(
)
;
EXPECT_FALSE
(
child
-
>
IsOverscrolled
(
)
)
;
EXPECT_FALSE
(
rootApzc
-
>
IsOverscrolled
(
)
)
;
}
#
endif
#
ifndef
MOZ_WIDGET_ANDROID
TEST_F
(
APZScrollHandoffTester
OpposingConstrainedAxes_Bug1201098
)
{
SCOPED_GFX_PREF_BOOL
(
"
apz
.
overscroll
.
enabled
"
true
)
;
CreateScrollHandoffLayerTree4
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
childApzc
=
ApzcOf
(
layers
[
1
]
)
;
Pan
(
childApzc
50
60
)
;
EXPECT_TRUE
(
childApzc
-
>
IsOverscrolled
(
)
)
;
EXPECT_FALSE
(
rootApzc
-
>
IsOverscrolled
(
)
)
;
}
#
endif
TEST_F
(
APZScrollHandoffTesterMock
DiagonalFlingNoHandoff
)
{
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_min_velocity_threshold
"
0
.
0f
)
;
CreateScrollHandoffLayerTree1
(
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
Pan
(
manager
ScreenIntPoint
(
90
90
)
ScreenIntPoint
(
55
55
)
)
;
RefPtr
<
TestAsyncPanZoomController
>
parent
=
ApzcOf
(
layers
[
0
]
)
;
RefPtr
<
TestAsyncPanZoomController
>
child
=
ApzcOf
(
layers
[
1
]
)
;
mcc
-
>
AdvanceByMillis
(
10
)
;
child
-
>
AdvanceAnimations
(
mcc
-
>
GetSampleTime
(
)
)
;
child
-
>
AssertStateIsFling
(
)
;
parent
-
>
AssertStateIsReset
(
)
;
}
TEST_F
(
APZScrollHandoffTester
SimultaneousFlings
)
{
SCOPED_GFX_PREF_BOOL
(
"
apz
.
allow_immediate_handoff
"
true
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_min_velocity_threshold
"
0
.
0f
)
;
CreateScrollHandoffLayerTree3
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
parent1
=
ApzcOf
(
layers
[
1
]
)
;
RefPtr
<
TestAsyncPanZoomController
>
child1
=
ApzcOf
(
layers
[
2
]
)
;
RefPtr
<
TestAsyncPanZoomController
>
parent2
=
ApzcOf
(
layers
[
3
]
)
;
RefPtr
<
TestAsyncPanZoomController
>
child2
=
ApzcOf
(
layers
[
4
]
)
;
Pan
(
child2
45
5
)
;
Pan
(
child1
95
55
)
;
child1
-
>
AssertStateIsFling
(
)
;
child2
-
>
AssertStateIsFling
(
)
;
child1
-
>
AdvanceAnimationsUntilEnd
(
)
;
child2
-
>
AdvanceAnimationsUntilEnd
(
)
;
child1
-
>
AssertStateIsReset
(
)
;
parent1
-
>
AssertStateIsFling
(
)
;
child2
-
>
AssertStateIsReset
(
)
;
parent2
-
>
AssertStateIsFling
(
)
;
}
TEST_F
(
APZScrollHandoffTester
ImmediateHandoffDisallowed_Pan
)
{
SCOPED_GFX_PREF_BOOL
(
"
apz
.
allow_immediate_handoff
"
false
)
;
CreateScrollHandoffLayerTree1
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
parentApzc
=
ApzcOf
(
layers
[
0
]
)
;
RefPtr
<
TestAsyncPanZoomController
>
childApzc
=
ApzcOf
(
layers
[
1
]
)
;
Pan
(
childApzc
60
5
)
;
EXPECT_EQ
(
50
childApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
)
;
EXPECT_EQ
(
0
parentApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
)
;
Pan
(
childApzc
60
50
)
;
EXPECT_EQ
(
10
parentApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
)
;
}
TEST_F
(
APZScrollHandoffTester
ImmediateHandoffDisallowed_Fling
)
{
SCOPED_GFX_PREF_BOOL
(
"
apz
.
allow_immediate_handoff
"
false
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_min_velocity_threshold
"
0
.
0f
)
;
CreateScrollHandoffLayerTree1
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
parentApzc
=
ApzcOf
(
layers
[
0
]
)
;
RefPtr
<
TestAsyncPanZoomController
>
childApzc
=
ApzcOf
(
layers
[
1
]
)
;
Pan
(
childApzc
60
2
)
;
childApzc
-
>
AdvanceAnimationsUntilEnd
(
)
;
parentApzc
-
>
AdvanceAnimationsUntilEnd
(
)
;
ASSERT_NEAR
(
50
childApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
COORDINATE_EPSILON
)
;
EXPECT_EQ
(
0
parentApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
)
;
Pan
(
childApzc
60
40
)
;
childApzc
-
>
AdvanceAnimationsUntilEnd
(
)
;
parentApzc
-
>
AdvanceAnimationsUntilEnd
(
)
;
EXPECT_GT
(
parentApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
10
)
;
}
TEST_F
(
APZScrollHandoffTester
CrossApzcAxisLock_TouchAction
)
{
TestCrossApzcAxisLock
(
)
;
}
TEST_F
(
APZScrollHandoffTesterMock
WheelHandoffAfterDirectionReversal
)
{
SCOPED_GFX_PREF_INT
(
"
mousewheel
.
transaction
.
timeout
"
1500
)
;
CreateScrollHandoffLayerTree1
(
)
;
rootApzc
=
ApzcOf
(
layers
[
0
]
)
;
RefPtr
<
TestAsyncPanZoomController
>
childApzc
=
ApzcOf
(
layers
[
1
]
)
;
FrameMetrics
&
rootMetrics
=
rootApzc
-
>
GetFrameMetrics
(
)
;
FrameMetrics
&
childMetrics
=
childApzc
-
>
GetFrameMetrics
(
)
;
CSSRect
childScrollRange
=
childMetrics
.
CalculateScrollRange
(
)
;
EXPECT_EQ
(
0
rootMetrics
.
GetVisualScrollOffset
(
)
.
y
)
;
EXPECT_EQ
(
0
childMetrics
.
GetVisualScrollOffset
(
)
.
y
)
;
ScreenIntPoint
cursorLocation
(
10
60
)
;
ScreenPoint
upwardDelta
(
0
-
10
)
;
ScreenPoint
downwardDelta
(
0
10
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
Wheel
(
manager
cursorLocation
upwardDelta
mcc
-
>
Time
(
)
)
;
EXPECT_EQ
(
0
rootMetrics
.
GetVisualScrollOffset
(
)
.
y
)
;
EXPECT_EQ
(
0
childMetrics
.
GetVisualScrollOffset
(
)
.
y
)
;
for
(
size_t
i
=
0
;
i
<
6
;
+
+
i
)
{
mcc
-
>
AdvanceByMillis
(
100
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
Wheel
(
manager
cursorLocation
downwardDelta
mcc
-
>
Time
(
)
)
;
}
EXPECT_EQ
(
0
rootMetrics
.
GetVisualScrollOffset
(
)
.
y
)
;
EXPECT_EQ
(
childScrollRange
.
YMost
(
)
childMetrics
.
GetVisualScrollOffset
(
)
.
y
)
;
for
(
size_t
i
=
0
;
i
<
16
;
+
+
i
)
{
mcc
-
>
AdvanceByMillis
(
100
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
Wheel
(
manager
cursorLocation
downwardDelta
mcc
-
>
Time
(
)
)
;
}
EXPECT_EQ
(
childScrollRange
.
YMost
(
)
childMetrics
.
GetVisualScrollOffset
(
)
.
y
)
;
EXPECT_GT
(
rootMetrics
.
GetVisualScrollOffset
(
)
.
y
0
)
;
}
TEST_F
(
APZScrollHandoffTesterMock
WheelHandoffNonscrollable
)
{
CreateScrollHandoffLayerTree5
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
childApzc
=
ApzcOf
(
layers
[
1
]
)
;
FrameMetrics
&
childMetrics
=
childApzc
-
>
GetFrameMetrics
(
)
;
EXPECT_EQ
(
0
childMetrics
.
GetVisualScrollOffset
(
)
.
y
)
;
ScreenPoint
downwardDelta
(
0
10
)
;
ScreenIntPoint
nonscrollableLocation
(
40
10
)
;
ScreenIntPoint
scrollableLocation
(
40
60
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
Wheel
(
manager
nonscrollableLocation
downwardDelta
mcc
-
>
Time
(
)
)
;
EXPECT_EQ
(
0
childMetrics
.
GetVisualScrollOffset
(
)
.
y
)
;
mcc
-
>
AdvanceByMillis
(
100
)
;
MouseInput
mouseInput
(
MouseInput
:
:
MOUSE_MOVE
MouseInput
:
:
ButtonType
:
:
PRIMARY_BUTTON
0
0
scrollableLocation
mcc
-
>
Time
(
)
0
)
;
WidgetMouseEvent
mouseEvent
=
mouseInput
.
ToWidgetEvent
<
WidgetMouseEvent
>
(
nullptr
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
(
(
APZInputBridge
*
)
manager
.
get
(
)
)
-
>
ReceiveInputEvent
(
mouseEvent
)
;
mcc
-
>
AdvanceByMillis
(
100
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
Wheel
(
manager
scrollableLocation
downwardDelta
mcc
-
>
Time
(
)
)
;
EXPECT_GT
(
childMetrics
.
GetVisualScrollOffset
(
)
.
y
0
)
;
}
TEST_F
(
APZScrollHandoffTesterMock
ChildCloseToEndOfScrollRange
)
{
SCOPED_GFX_PREF_BOOL
(
"
apz
.
overscroll
.
enabled
"
true
)
;
CreateScrollHandoffLayerTree1
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
childApzc
=
ApzcOf
(
layers
[
1
]
)
;
FrameMetrics
&
rootMetrics
=
rootApzc
-
>
GetFrameMetrics
(
)
;
FrameMetrics
&
childMetrics
=
childApzc
-
>
GetFrameMetrics
(
)
;
rootMetrics
.
SetZoom
(
CSSToParentLayerScale
(
3
.
0
)
)
;
rootMetrics
.
SetCompositionBounds
(
ParentLayerRect
(
0
0
300
300
)
)
;
childMetrics
.
SetZoom
(
CSSToParentLayerScale
(
3
.
0
)
)
;
childMetrics
.
SetCompositionBounds
(
ParentLayerRect
(
0
150
300
150
)
)
;
childMetrics
.
SetVisualScrollOffset
(
CSSPoint
(
0
49
.
99
)
)
;
EXPECT_FALSE
(
childApzc
-
>
IsOverscrolled
(
)
)
;
CSSPoint
childBefore
=
childApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
;
CSSPoint
parentBefore
=
rootApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_START
childApzc
ScreenIntPoint
(
10
20
)
ScreenPoint
(
0
40
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
childApzc
-
>
AdvanceAnimations
(
mcc
-
>
GetSampleTime
(
)
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_END
childApzc
ScreenIntPoint
(
10
21
)
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
)
;
CSSPoint
childAfter
=
childApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
;
CSSPoint
parentAfter
=
rootApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
;
bool
childScrolled
=
(
childBefore
!
=
childAfter
)
;
bool
parentScrolled
=
(
parentBefore
!
=
parentAfter
)
;
EXPECT_TRUE
(
childScrolled
|
|
parentScrolled
)
;
}
TEST_F
(
APZScrollHandoffTesterMock
ScrollJump_Bug1812227
)
{
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
touch_start_tolerance
"
10
/
manager
-
>
GetDPI
(
)
)
;
CreateScrollHandoffLayerTree6
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
childApzc
=
ApzcOf
(
layers
[
1
]
)
;
std
:
:
vector
<
CSSCoord
>
rootYScrollPositions
;
auto
SampleScrollPosition
=
[
&
]
(
)
{
rootYScrollPositions
.
push_back
(
rootApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
)
;
}
;
auto
DoLightUpwardFlick
=
[
&
]
(
bool
aSimulatePaint
=
false
)
{
mcc
-
>
AdvanceByMillis
(
16
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
TouchDown
(
manager
{
30
30
}
mcc
-
>
Time
(
)
)
;
SampleScrollPosition
(
)
;
if
(
aSimulatePaint
)
{
ModifyFrameMetrics
(
root
[
&
]
(
ScrollMetadata
&
FrameMetrics
&
aMetrics
)
{
aMetrics
=
rootApzc
-
>
GetFrameMetrics
(
)
;
}
)
;
ModifyFrameMetrics
(
layers
[
1
]
[
&
]
(
ScrollMetadata
&
FrameMetrics
&
aMetrics
)
{
aMetrics
=
childApzc
-
>
GetFrameMetrics
(
)
;
}
)
;
UpdateHitTestingTree
(
)
;
}
mcc
-
>
AdvanceByMillis
(
16
)
;
TouchMove
(
manager
{
30
10
}
mcc
-
>
Time
(
)
)
;
SampleScrollPosition
(
)
;
mcc
-
>
AdvanceByMillis
(
16
)
;
TouchUp
(
manager
{
30
10
}
mcc
-
>
Time
(
)
)
;
SampleScrollPosition
(
)
;
rootApzc
-
>
AssertStateIsFling
(
)
;
}
;
DoLightUpwardFlick
(
)
;
while
(
SampleAnimationsOnce
(
)
&
&
rootYScrollPositions
.
back
(
)
<
100
)
{
SampleScrollPosition
(
)
;
}
DoLightUpwardFlick
(
true
)
;
while
(
SampleAnimationsOnce
(
)
)
{
SampleScrollPosition
(
)
;
}
for
(
size_t
i
=
0
;
i
<
(
rootYScrollPositions
.
size
(
)
-
1
)
;
+
+
i
)
{
CSSCoord
before
=
rootYScrollPositions
[
i
]
;
CSSCoord
after
=
rootYScrollPositions
[
i
+
1
]
;
EXPECT_LE
(
before
after
)
;
}
}
TEST_F
(
APZCNestedFlingScrollHandoffTester
FlingInOppositeDirection
)
{
RefPtr
<
TestAsyncPanZoomController
>
rootApzc
=
ApzcOf
(
root
)
;
ParentLayerPoint
startRootOffset
=
rootApzc
-
>
GetCurrentAsyncScrollOffset
(
AsyncTransformConsumer
:
:
eForEventHandling
)
;
ExecuteDirectionChangingPanGesture
(
ScreenIntPoint
{
569
710
}
{
-
11
-
2
-
107
-
18
-
148
-
57
-
133
-
159
-
21
}
{
11
2
42
107
148
}
)
;
ExecuteWait
(
TimeDuration
:
:
FromMilliseconds
(
154
)
)
;
auto
vel
=
subframeApzc
-
>
GetVelocityVector
(
)
;
ParentLayerPoint
endRootOffset
=
rootApzc
-
>
GetCurrentAsyncScrollOffset
(
AsyncTransformConsumer
:
:
eForEventHandling
)
;
EXPECT_EQ
(
vel
.
y
0
.
0
)
;
rootApzc
-
>
AssertStateIsReset
(
)
;
subframeApzc
-
>
AssertStateIsReset
(
)
;
EXPECT_EQ
(
startRootOffset
.
y
endRootOffset
.
y
)
;
}
