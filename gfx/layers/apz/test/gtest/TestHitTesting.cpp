#
include
"
APZCTreeManagerTester
.
h
"
#
include
"
APZTestCommon
.
h
"
#
include
"
InputUtils
.
h
"
class
APZHitTestingTester
:
public
APZCTreeManagerTester
{
protected
:
ScreenToParentLayerMatrix4x4
transformToApzc
;
ParentLayerToScreenMatrix4x4
transformToGecko
;
already_AddRefed
<
AsyncPanZoomController
>
GetTargetAPZC
(
const
ScreenPoint
&
aPoint
)
{
RefPtr
<
AsyncPanZoomController
>
hit
=
manager
-
>
GetTargetAPZC
(
aPoint
)
.
mTargetApzc
;
if
(
hit
)
{
transformToApzc
=
manager
-
>
GetScreenToApzcTransform
(
hit
.
get
(
)
)
;
transformToGecko
=
manager
-
>
GetApzcToGeckoTransform
(
hit
.
get
(
)
)
;
}
return
hit
.
forget
(
)
;
}
protected
:
void
DisableApzOn
(
WebRenderLayerScrollData
*
aLayer
)
{
ModifyFrameMetrics
(
aLayer
[
]
(
ScrollMetadata
&
aSm
FrameMetrics
&
)
{
aSm
.
SetForceDisableApz
(
true
)
;
}
)
;
}
void
CreateComplexMultiLayerTree
(
)
{
const
char
*
treeShape
=
"
x
(
xx
(
x
)
xx
(
x
(
x
)
xx
)
)
"
;
nsIntRegion
layerVisibleRegion
[
]
=
{
nsIntRegion
(
IntRect
(
0
0
300
400
)
)
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
nsIntRegion
(
IntRect
(
50
50
200
300
)
)
nsIntRegion
(
IntRect
(
50
50
200
300
)
)
nsIntRegion
(
IntRect
(
0
200
100
100
)
)
nsIntRegion
(
IntRect
(
200
0
100
400
)
)
nsIntRegion
(
IntRect
(
200
0
100
200
)
)
nsIntRegion
(
IntRect
(
200
0
100
200
)
)
nsIntRegion
(
IntRect
(
200
200
100
100
)
)
nsIntRegion
(
IntRect
(
200
300
100
100
)
)
}
;
CreateScrollData
(
treeShape
layerVisibleRegion
)
;
SetScrollableFrameMetrics
(
layers
[
1
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
SetScrollableFrameMetrics
(
layers
[
2
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
SetScrollableFrameMetrics
(
layers
[
4
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
SetScrollableFrameMetrics
(
layers
[
6
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
SetScrollableFrameMetrics
(
layers
[
7
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
2
)
;
SetScrollableFrameMetrics
(
layers
[
8
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
SetScrollableFrameMetrics
(
layers
[
9
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
3
)
;
}
void
CreateBug1148350LayerTree
(
)
{
const
char
*
treeShape
=
"
x
(
x
)
"
;
nsIntRegion
layerVisibleRegion
[
]
=
{
nsIntRegion
(
IntRect
(
0
0
200
200
)
)
nsIntRegion
(
IntRect
(
0
0
200
200
)
)
}
;
CreateScrollData
(
treeShape
layerVisibleRegion
)
;
SetScrollableFrameMetrics
(
layers
[
1
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
}
}
;
TEST_F
(
APZHitTestingTester
ComplexMultiLayerTree
)
{
CreateComplexMultiLayerTree
(
)
;
ScopedLayerTreeRegistration
registration
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
TestAsyncPanZoomController
*
nullAPZC
=
nullptr
;
EXPECT_FALSE
(
HasScrollableFrameMetrics
(
layers
[
0
]
)
)
;
EXPECT_NE
(
nullAPZC
ApzcOf
(
layers
[
1
]
)
)
;
EXPECT_NE
(
nullAPZC
ApzcOf
(
layers
[
2
]
)
)
;
EXPECT_FALSE
(
HasScrollableFrameMetrics
(
layers
[
3
]
)
)
;
EXPECT_NE
(
nullAPZC
ApzcOf
(
layers
[
4
]
)
)
;
EXPECT_FALSE
(
HasScrollableFrameMetrics
(
layers
[
5
]
)
)
;
EXPECT_NE
(
nullAPZC
ApzcOf
(
layers
[
6
]
)
)
;
EXPECT_NE
(
nullAPZC
ApzcOf
(
layers
[
7
]
)
)
;
EXPECT_NE
(
nullAPZC
ApzcOf
(
layers
[
8
]
)
)
;
EXPECT_NE
(
nullAPZC
ApzcOf
(
layers
[
9
]
)
)
;
EXPECT_EQ
(
ApzcOf
(
layers
[
1
]
)
ApzcOf
(
layers
[
2
]
)
)
;
EXPECT_EQ
(
ApzcOf
(
layers
[
4
]
)
ApzcOf
(
layers
[
6
]
)
)
;
EXPECT_EQ
(
ApzcOf
(
layers
[
8
]
)
ApzcOf
(
layers
[
6
]
)
)
;
EXPECT_NE
(
ApzcOf
(
layers
[
1
]
)
ApzcOf
(
layers
[
4
]
)
)
;
EXPECT_NE
(
ApzcOf
(
layers
[
1
]
)
ApzcOf
(
layers
[
7
]
)
)
;
EXPECT_NE
(
ApzcOf
(
layers
[
1
]
)
ApzcOf
(
layers
[
9
]
)
)
;
EXPECT_NE
(
ApzcOf
(
layers
[
4
]
)
ApzcOf
(
layers
[
7
]
)
)
;
EXPECT_NE
(
ApzcOf
(
layers
[
4
]
)
ApzcOf
(
layers
[
9
]
)
)
;
EXPECT_NE
(
ApzcOf
(
layers
[
7
]
)
ApzcOf
(
layers
[
9
]
)
)
;
TestAsyncPanZoomController
*
layers1_2
=
ApzcOf
(
layers
[
1
]
)
;
TestAsyncPanZoomController
*
layers4_6_8
=
ApzcOf
(
layers
[
4
]
)
;
TestAsyncPanZoomController
*
layer7
=
ApzcOf
(
layers
[
7
]
)
;
TestAsyncPanZoomController
*
layer9
=
ApzcOf
(
layers
[
9
]
)
;
EXPECT_EQ
(
nullptr
layers1_2
-
>
GetParent
(
)
)
;
EXPECT_EQ
(
nullptr
layers4_6_8
-
>
GetParent
(
)
)
;
EXPECT_EQ
(
layers4_6_8
layer7
-
>
GetParent
(
)
)
;
EXPECT_EQ
(
nullptr
layer9
-
>
GetParent
(
)
)
;
RefPtr
<
HitTestingTreeNode
>
root
=
manager
-
>
GetRootNode
(
)
;
RefPtr
<
HitTestingTreeNode
>
node5
=
root
-
>
GetLastChild
(
)
;
RefPtr
<
HitTestingTreeNode
>
node4
=
node5
-
>
GetPrevSibling
(
)
;
RefPtr
<
HitTestingTreeNode
>
node2
=
node4
-
>
GetPrevSibling
(
)
;
RefPtr
<
HitTestingTreeNode
>
node1
=
node2
-
>
GetPrevSibling
(
)
;
RefPtr
<
HitTestingTreeNode
>
node3
=
node2
-
>
GetLastChild
(
)
;
RefPtr
<
HitTestingTreeNode
>
node9
=
node5
-
>
GetLastChild
(
)
;
RefPtr
<
HitTestingTreeNode
>
node8
=
node9
-
>
GetPrevSibling
(
)
;
RefPtr
<
HitTestingTreeNode
>
node6
=
node8
-
>
GetPrevSibling
(
)
;
RefPtr
<
HitTestingTreeNode
>
node7
=
node6
-
>
GetLastChild
(
)
;
EXPECT_EQ
(
nullptr
node1
-
>
GetPrevSibling
(
)
)
;
EXPECT_EQ
(
nullptr
node3
-
>
GetPrevSibling
(
)
)
;
EXPECT_EQ
(
nullptr
node6
-
>
GetPrevSibling
(
)
)
;
EXPECT_EQ
(
nullptr
node7
-
>
GetPrevSibling
(
)
)
;
EXPECT_EQ
(
nullptr
node1
-
>
GetLastChild
(
)
)
;
EXPECT_EQ
(
nullptr
node3
-
>
GetLastChild
(
)
)
;
EXPECT_EQ
(
nullptr
node4
-
>
GetLastChild
(
)
)
;
EXPECT_EQ
(
nullptr
node7
-
>
GetLastChild
(
)
)
;
EXPECT_EQ
(
nullptr
node8
-
>
GetLastChild
(
)
)
;
EXPECT_EQ
(
nullptr
node9
-
>
GetLastChild
(
)
)
;
}
TEST_F
(
APZHitTestingTester
TestRepaintFlushOnNewInputBlock
)
{
CreateSimpleScrollingLayer
(
)
;
ScopedLayerTreeRegistration
registration
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
apzcroot
=
ApzcOf
(
root
)
;
MockFunction
<
void
(
std
:
:
string
checkPointName
)
>
check
;
{
InSequence
s
;
EXPECT_CALL
(
*
mcc
RequestContentRepaint
(
_
)
)
.
Times
(
AtLeast
(
1
)
)
;
EXPECT_CALL
(
check
Call
(
"
post
-
first
-
touch
-
start
"
)
)
;
EXPECT_CALL
(
*
mcc
RequestContentRepaint
(
_
)
)
.
Times
(
AtLeast
(
1
)
)
;
EXPECT_CALL
(
check
Call
(
"
post
-
second
-
fling
"
)
)
;
EXPECT_CALL
(
*
mcc
RequestContentRepaint
(
_
)
)
.
Times
(
AtLeast
(
1
)
)
;
EXPECT_CALL
(
check
Call
(
"
post
-
second
-
touch
-
start
"
)
)
;
}
Pan
(
apzcroot
100
50
PanOptions
:
:
NoFling
)
;
ScreenIntPoint
touchPoint
(
50
50
)
;
MultiTouchInput
mti
=
CreateMultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_START
mcc
-
>
Time
(
)
)
;
mti
.
mTouches
.
AppendElement
(
SingleTouchData
(
0
touchPoint
ScreenSize
(
0
0
)
0
0
)
)
;
EXPECT_EQ
(
nsEventStatus_eConsumeDoDefault
manager
-
>
ReceiveInputEvent
(
mti
)
.
GetStatus
(
)
)
;
EXPECT_EQ
(
touchPoint
mti
.
mTouches
[
0
]
.
mScreenPoint
)
;
check
.
Call
(
"
post
-
first
-
touch
-
start
"
)
;
mti
.
mType
=
MultiTouchInput
:
:
MULTITOUCH_END
;
manager
-
>
ReceiveInputEvent
(
mti
)
;
mcc
-
>
AdvanceByMillis
(
1000
)
;
Pan
(
apzcroot
100
50
PanOptions
:
:
NoFling
)
;
check
.
Call
(
"
post
-
second
-
fling
"
)
;
Pan
(
apzcroot
100
50
PanOptions
:
:
NoFling
)
;
mti
.
mType
=
MultiTouchInput
:
:
MULTITOUCH_START
;
EXPECT_EQ
(
nsEventStatus_eConsumeDoDefault
manager
-
>
ReceiveInputEvent
(
mti
)
.
GetStatus
(
)
)
;
EXPECT_EQ
(
touchPoint
mti
.
mTouches
[
0
]
.
mScreenPoint
)
;
check
.
Call
(
"
post
-
second
-
touch
-
start
"
)
;
mti
.
mType
=
MultiTouchInput
:
:
MULTITOUCH_END
;
EXPECT_EQ
(
nsEventStatus_eConsumeDoDefault
manager
-
>
ReceiveInputEvent
(
mti
)
.
GetStatus
(
)
)
;
EXPECT_EQ
(
touchPoint
mti
.
mTouches
[
0
]
.
mScreenPoint
)
;
}
TEST_F
(
APZHitTestingTester
TestRepaintFlushOnWheelEvents
)
{
CreateSimpleScrollingLayer
(
)
;
ScopedLayerTreeRegistration
registration
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
TestAsyncPanZoomController
*
apzcroot
=
ApzcOf
(
root
)
;
EXPECT_CALL
(
*
mcc
RequestContentRepaint
(
_
)
)
.
Times
(
AtLeast
(
3
)
)
;
ScreenPoint
origin
(
100
50
)
;
for
(
int
i
=
0
;
i
<
3
;
i
+
+
)
{
ScrollWheelInput
swi
(
MillisecondsSinceStartup
(
mcc
-
>
Time
(
)
)
mcc
-
>
Time
(
)
0
ScrollWheelInput
:
:
SCROLLMODE_INSTANT
ScrollWheelInput
:
:
SCROLLDELTA_PIXEL
origin
0
10
false
WheelDeltaAdjustmentStrategy
:
:
eNone
)
;
EXPECT_EQ
(
nsEventStatus_eConsumeDoDefault
manager
-
>
ReceiveInputEvent
(
swi
)
.
GetStatus
(
)
)
;
EXPECT_EQ
(
origin
swi
.
mOrigin
)
;
AsyncTransform
viewTransform
;
ParentLayerPoint
point
;
apzcroot
-
>
SampleContentTransformForFrame
(
&
viewTransform
point
)
;
EXPECT_EQ
(
0
point
.
x
)
;
EXPECT_EQ
(
(
i
+
1
)
*
10
point
.
y
)
;
EXPECT_EQ
(
0
viewTransform
.
mTranslation
.
x
)
;
EXPECT_EQ
(
(
i
+
1
)
*
-
10
viewTransform
.
mTranslation
.
y
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
}
}
TEST_F
(
APZHitTestingTester
TestForceDisableApz
)
{
CreateSimpleScrollingLayer
(
)
;
ScopedLayerTreeRegistration
registration
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
DisableApzOn
(
root
)
;
TestAsyncPanZoomController
*
apzcroot
=
ApzcOf
(
root
)
;
ScreenPoint
origin
(
100
50
)
;
ScrollWheelInput
swi
(
MillisecondsSinceStartup
(
mcc
-
>
Time
(
)
)
mcc
-
>
Time
(
)
0
ScrollWheelInput
:
:
SCROLLMODE_INSTANT
ScrollWheelInput
:
:
SCROLLDELTA_PIXEL
origin
0
10
false
WheelDeltaAdjustmentStrategy
:
:
eNone
)
;
EXPECT_EQ
(
nsEventStatus_eConsumeDoDefault
manager
-
>
ReceiveInputEvent
(
swi
)
.
GetStatus
(
)
)
;
EXPECT_EQ
(
origin
swi
.
mOrigin
)
;
AsyncTransform
viewTransform
;
ParentLayerPoint
point
;
apzcroot
-
>
SampleContentTransformForFrame
(
&
viewTransform
point
)
;
EXPECT_EQ
(
0
point
.
x
)
;
EXPECT_EQ
(
10
point
.
y
)
;
EXPECT_EQ
(
0
viewTransform
.
mTranslation
.
x
)
;
EXPECT_EQ
(
-
10
viewTransform
.
mTranslation
.
y
)
;
viewTransform
=
apzcroot
-
>
GetCurrentAsyncTransform
(
AsyncPanZoomController
:
:
eForCompositing
)
;
point
=
apzcroot
-
>
GetCurrentAsyncScrollOffset
(
AsyncPanZoomController
:
:
eForCompositing
)
;
EXPECT_EQ
(
0
point
.
x
)
;
EXPECT_EQ
(
0
point
.
y
)
;
EXPECT_EQ
(
0
viewTransform
.
mTranslation
.
x
)
;
EXPECT_EQ
(
0
viewTransform
.
mTranslation
.
y
)
;
mcc
-
>
AdvanceByMillis
(
10
)
;
swi
=
ScrollWheelInput
(
MillisecondsSinceStartup
(
mcc
-
>
Time
(
)
)
mcc
-
>
Time
(
)
0
ScrollWheelInput
:
:
SCROLLMODE_INSTANT
ScrollWheelInput
:
:
SCROLLDELTA_PIXEL
origin
0
0
false
WheelDeltaAdjustmentStrategy
:
:
eNone
)
;
EXPECT_EQ
(
nsEventStatus_eConsumeDoDefault
manager
-
>
ReceiveInputEvent
(
swi
)
.
GetStatus
(
)
)
;
EXPECT_EQ
(
origin
swi
.
mOrigin
)
;
}
TEST_F
(
APZHitTestingTester
Bug1148350
)
{
CreateBug1148350LayerTree
(
)
;
ScopedLayerTreeRegistration
registration
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
MockFunction
<
void
(
std
:
:
string
checkPointName
)
>
check
;
{
InSequence
s
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
LayoutDevicePoint
(
100
100
)
0
ApzcOf
(
layers
[
1
]
)
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
Tapped
without
transform
"
)
)
;
EXPECT_CALL
(
*
mcc
HandleTap
(
TapType
:
:
eSingleTap
LayoutDevicePoint
(
100
100
)
0
ApzcOf
(
layers
[
1
]
)
-
>
GetGuid
(
)
_
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
Tapped
with
interleaved
transform
"
)
)
;
}
Tap
(
manager
ScreenIntPoint
(
100
100
)
TimeDuration
:
:
FromMilliseconds
(
100
)
)
;
mcc
-
>
RunThroughDelayedTasks
(
)
;
check
.
Call
(
"
Tapped
without
transform
"
)
;
uint64_t
blockId
=
TouchDown
(
manager
ScreenIntPoint
(
100
100
)
mcc
-
>
Time
(
)
)
.
mInputBlockId
;
SetDefaultAllowedTouchBehavior
(
manager
blockId
)
;
mcc
-
>
AdvanceByMillis
(
100
)
;
layers
[
0
]
-
>
SetVisibleRegion
(
LayerIntRegion
(
LayerIntRect
(
0
50
200
150
)
)
)
;
layers
[
0
]
-
>
SetTransform
(
Matrix4x4
:
:
Translation
(
0
50
0
)
)
;
UpdateHitTestingTree
(
)
;
TouchUp
(
manager
ScreenIntPoint
(
100
100
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
RunThroughDelayedTasks
(
)
;
check
.
Call
(
"
Tapped
with
interleaved
transform
"
)
;
}
