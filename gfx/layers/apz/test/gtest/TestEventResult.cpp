#
include
"
APZCTreeManagerTester
.
h
"
#
include
"
APZTestCommon
.
h
"
#
include
"
InputUtils
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
<
tuple
>
class
APZEventResultTester
:
public
APZCTreeManagerTester
{
protected
:
UniquePtr
<
ScopedLayerTreeRegistration
>
registration
;
void
UpdateOverscrollBehavior
(
OverscrollBehavior
aX
OverscrollBehavior
aY
)
{
ModifyFrameMetrics
(
scrollData
[
0
]
[
aX
aY
]
(
ScrollMetadata
&
sm
FrameMetrics
&
_
)
{
OverscrollBehaviorInfo
overscroll
;
overscroll
.
mBehaviorX
=
aX
;
overscroll
.
mBehaviorY
=
aY
;
sm
.
SetOverscrollBehavior
(
overscroll
)
;
}
)
;
UpdateHitTestingTree
(
)
;
}
void
SetScrollOffsetOnMainThread
(
const
CSSPoint
&
aPoint
)
{
RefPtr
<
TestAsyncPanZoomController
>
apzc
=
ApzcOf
(
scrollData
[
0
]
)
;
ScrollMetadata
metadata
=
apzc
-
>
GetScrollMetadata
(
)
;
metadata
.
GetMetrics
(
)
.
SetLayoutScrollOffset
(
aPoint
)
;
nsTArray
<
ScrollPositionUpdate
>
scrollUpdates
;
scrollUpdates
.
AppendElement
(
ScrollPositionUpdate
:
:
NewScroll
(
ScrollOrigin
:
:
Other
CSSPoint
:
:
ToAppUnits
(
aPoint
)
)
)
;
metadata
.
SetScrollUpdates
(
scrollUpdates
)
;
metadata
.
GetMetrics
(
)
.
SetScrollGeneration
(
scrollUpdates
.
LastElement
(
)
.
GetGeneration
(
)
)
;
apzc
-
>
NotifyLayersUpdated
(
metadata
false
true
)
;
}
void
CreateScrollableRootLayer
(
)
{
const
char
*
treeShape
=
"
x
"
;
nsIntRegion
layerVisibleRegions
[
]
=
{
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
}
;
CreateScrollData
(
treeShape
layerVisibleRegions
)
;
WebRenderLayerScrollData
*
root
=
scrollData
[
0
]
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
CSSRect
(
0
0
200
200
)
)
;
ModifyFrameMetrics
(
root
[
]
(
ScrollMetadata
&
sm
FrameMetrics
&
metrics
)
{
metrics
.
SetIsRootContent
(
true
)
;
}
)
;
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
}
enum
class
PreventDefaultFlag
{
No
Yes
}
;
std
:
:
tuple
<
APZEventResult
APZHandledResult
>
TapDispatchToContent
(
const
ScreenIntPoint
&
aPoint
PreventDefaultFlag
aPreventDefaultFlag
)
{
APZEventResult
result
=
Tap
(
manager
aPoint
TimeDuration
:
:
FromMilliseconds
(
100
)
)
;
APZHandledResult
delayedAnswer
{
APZHandledPlace
:
:
Invalid
SideBits
:
:
eNone
ScrollDirections
(
)
}
;
manager
-
>
AddInputBlockCallback
(
result
.
mInputBlockId
[
&
]
(
uint64_t
id
const
APZHandledResult
&
answer
)
{
EXPECT_EQ
(
id
result
.
mInputBlockId
)
;
delayedAnswer
=
answer
;
}
)
;
manager
-
>
SetAllowedTouchBehavior
(
result
.
mInputBlockId
{
AllowedTouchBehavior
:
:
VERTICAL_PAN
}
)
;
manager
-
>
SetTargetAPZC
(
result
.
mInputBlockId
{
result
.
mTargetGuid
}
)
;
manager
-
>
ContentReceivedInputBlock
(
result
.
mInputBlockId
aPreventDefaultFlag
=
=
PreventDefaultFlag
:
:
Yes
)
;
return
{
result
delayedAnswer
}
;
}
void
OverscrollDirectionsWithEventHandlerTest
(
PreventDefaultFlag
aPreventDefaultFlag
)
{
EventRegions
regions
(
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
)
;
regions
.
mDispatchToContentHitRegion
=
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
;
APZTestAccess
:
:
SetEventRegions
(
*
scrollData
[
0
]
regions
)
;
UpdateHitTestingTree
(
)
;
APZHandledPlace
expectedPlace
=
aPreventDefaultFlag
=
=
PreventDefaultFlag
:
:
No
?
APZHandledPlace
:
:
HandledByRoot
:
APZHandledPlace
:
:
HandledByContent
;
{
auto
[
result
delayedHandledResult
]
=
TapDispatchToContent
(
ScreenIntPoint
(
50
50
)
aPreventDefaultFlag
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
Nothing
(
)
)
;
EXPECT_EQ
(
delayedHandledResult
(
APZHandledResult
{
expectedPlace
SideBits
:
:
eBottom
|
SideBits
:
:
eRight
EitherScrollDirection
}
)
)
;
}
UpdateOverscrollBehavior
(
OverscrollBehavior
:
:
Contain
OverscrollBehavior
:
:
Contain
)
;
{
auto
[
result
delayedHandledResult
]
=
TapDispatchToContent
(
ScreenIntPoint
(
50
50
)
aPreventDefaultFlag
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
Nothing
(
)
)
;
EXPECT_EQ
(
delayedHandledResult
(
APZHandledResult
{
expectedPlace
SideBits
:
:
eBottom
|
SideBits
:
:
eRight
ScrollDirections
(
)
}
)
)
;
}
UpdateOverscrollBehavior
(
OverscrollBehavior
:
:
None
OverscrollBehavior
:
:
None
)
;
{
auto
[
result
delayedHandledResult
]
=
TapDispatchToContent
(
ScreenIntPoint
(
50
50
)
aPreventDefaultFlag
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
Nothing
(
)
)
;
EXPECT_EQ
(
delayedHandledResult
(
APZHandledResult
{
expectedPlace
SideBits
:
:
eBottom
|
SideBits
:
:
eRight
ScrollDirections
(
)
}
)
)
;
}
UpdateOverscrollBehavior
(
OverscrollBehavior
:
:
Auto
OverscrollBehavior
:
:
None
)
;
{
auto
[
result
delayedHandledResult
]
=
TapDispatchToContent
(
ScreenIntPoint
(
50
50
)
aPreventDefaultFlag
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
Nothing
(
)
)
;
EXPECT_EQ
(
delayedHandledResult
(
APZHandledResult
{
expectedPlace
SideBits
:
:
eBottom
|
SideBits
:
:
eRight
HorizontalScrollDirection
}
)
)
;
}
UpdateOverscrollBehavior
(
OverscrollBehavior
:
:
None
OverscrollBehavior
:
:
Auto
)
;
{
auto
[
result
delayedHandledResult
]
=
TapDispatchToContent
(
ScreenIntPoint
(
50
50
)
aPreventDefaultFlag
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
Nothing
(
)
)
;
EXPECT_EQ
(
delayedHandledResult
(
APZHandledResult
{
expectedPlace
SideBits
:
:
eBottom
|
SideBits
:
:
eRight
VerticalScrollDirection
}
)
)
;
}
}
void
ScrollableDirectionsWithEventHandlerTest
(
PreventDefaultFlag
aPreventDefaultFlag
)
{
EventRegions
regions
(
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
)
;
regions
.
mDispatchToContentHitRegion
=
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
;
APZTestAccess
:
:
SetEventRegions
(
*
scrollData
[
0
]
regions
)
;
UpdateHitTestingTree
(
)
;
APZHandledPlace
expectedPlace
=
aPreventDefaultFlag
=
=
PreventDefaultFlag
:
:
No
?
APZHandledPlace
:
:
HandledByRoot
:
APZHandledPlace
:
:
HandledByContent
;
{
auto
[
result
delayedHandledResult
]
=
TapDispatchToContent
(
ScreenIntPoint
(
50
50
)
aPreventDefaultFlag
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
Nothing
(
)
)
;
EXPECT_EQ
(
delayedHandledResult
(
APZHandledResult
{
expectedPlace
SideBits
:
:
eBottom
|
SideBits
:
:
eRight
EitherScrollDirection
}
)
)
;
}
SetScrollOffsetOnMainThread
(
CSSPoint
(
0
10
)
)
;
{
auto
[
result
delayedHandledResult
]
=
TapDispatchToContent
(
ScreenIntPoint
(
50
50
)
aPreventDefaultFlag
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
Nothing
(
)
)
;
EXPECT_EQ
(
delayedHandledResult
(
APZHandledResult
{
expectedPlace
SideBits
:
:
eTop
|
SideBits
:
:
eBottom
|
SideBits
:
:
eRight
EitherScrollDirection
}
)
)
;
}
SetScrollOffsetOnMainThread
(
CSSPoint
(
0
100
)
)
;
{
auto
[
result
delayedHandledResult
]
=
TapDispatchToContent
(
ScreenIntPoint
(
50
50
)
aPreventDefaultFlag
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
Nothing
(
)
)
;
EXPECT_EQ
(
delayedHandledResult
(
APZHandledResult
{
expectedPlace
SideBits
:
:
eRight
|
SideBits
:
:
eTop
EitherScrollDirection
}
)
)
;
}
SetScrollOffsetOnMainThread
(
CSSPoint
(
10
100
)
)
;
{
auto
[
result
delayedHandledResult
]
=
TapDispatchToContent
(
ScreenIntPoint
(
50
50
)
aPreventDefaultFlag
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
Nothing
(
)
)
;
EXPECT_EQ
(
delayedHandledResult
(
APZHandledResult
{
expectedPlace
SideBits
:
:
eLeft
|
SideBits
:
:
eRight
|
SideBits
:
:
eTop
EitherScrollDirection
}
)
)
;
}
SetScrollOffsetOnMainThread
(
CSSPoint
(
100
100
)
)
;
{
auto
[
result
delayedHandledResult
]
=
TapDispatchToContent
(
ScreenIntPoint
(
50
50
)
aPreventDefaultFlag
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
Nothing
(
)
)
;
EXPECT_EQ
(
delayedHandledResult
(
APZHandledResult
{
expectedPlace
SideBits
:
:
eTop
|
SideBits
:
:
eLeft
EitherScrollDirection
}
)
)
;
}
}
}
;
TEST_F
(
APZEventResultTester
OverscrollDirections
)
{
CreateScrollableRootLayer
(
)
;
TimeDuration
tapDuration
=
TimeDuration
:
:
FromMilliseconds
(
100
)
;
APZEventResult
result
=
Tap
(
manager
ScreenIntPoint
(
50
50
)
tapDuration
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
-
>
mOverscrollDirections
EitherScrollDirection
)
;
UpdateOverscrollBehavior
(
OverscrollBehavior
:
:
Contain
OverscrollBehavior
:
:
Contain
)
;
result
=
Tap
(
manager
ScreenIntPoint
(
50
50
)
tapDuration
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
-
>
mOverscrollDirections
ScrollDirections
(
)
)
;
UpdateOverscrollBehavior
(
OverscrollBehavior
:
:
None
OverscrollBehavior
:
:
None
)
;
result
=
Tap
(
manager
ScreenIntPoint
(
50
50
)
tapDuration
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
-
>
mOverscrollDirections
ScrollDirections
(
)
)
;
UpdateOverscrollBehavior
(
OverscrollBehavior
:
:
Auto
OverscrollBehavior
:
:
None
)
;
result
=
Tap
(
manager
ScreenIntPoint
(
50
50
)
tapDuration
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
-
>
mOverscrollDirections
HorizontalScrollDirection
)
;
UpdateOverscrollBehavior
(
OverscrollBehavior
:
:
None
OverscrollBehavior
:
:
Auto
)
;
result
=
Tap
(
manager
ScreenIntPoint
(
50
50
)
tapDuration
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
-
>
mOverscrollDirections
VerticalScrollDirection
)
;
}
TEST_F
(
APZEventResultTester
ScrollableDirections
)
{
CreateScrollableRootLayer
(
)
;
TimeDuration
tapDuration
=
TimeDuration
:
:
FromMilliseconds
(
100
)
;
APZEventResult
result
=
Tap
(
manager
ScreenIntPoint
(
50
50
)
tapDuration
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
-
>
mScrollableDirections
SideBits
:
:
eBottom
|
SideBits
:
:
eRight
)
;
SetScrollOffsetOnMainThread
(
CSSPoint
(
0
10
)
)
;
result
=
Tap
(
manager
ScreenIntPoint
(
50
50
)
tapDuration
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
-
>
mScrollableDirections
SideBits
:
:
eTop
|
SideBits
:
:
eBottom
|
SideBits
:
:
eRight
)
;
SetScrollOffsetOnMainThread
(
CSSPoint
(
0
100
)
)
;
result
=
Tap
(
manager
ScreenIntPoint
(
50
50
)
tapDuration
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
-
>
mScrollableDirections
SideBits
:
:
eRight
|
SideBits
:
:
eTop
)
;
SetScrollOffsetOnMainThread
(
CSSPoint
(
10
100
)
)
;
result
=
Tap
(
manager
ScreenIntPoint
(
50
50
)
tapDuration
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
-
>
mScrollableDirections
SideBits
:
:
eLeft
|
SideBits
:
:
eRight
|
SideBits
:
:
eTop
)
;
SetScrollOffsetOnMainThread
(
CSSPoint
(
100
100
)
)
;
result
=
Tap
(
manager
ScreenIntPoint
(
50
50
)
tapDuration
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
-
>
mScrollableDirections
SideBits
:
:
eLeft
|
SideBits
:
:
eTop
)
;
}
class
APZEventResultTesterLayersOnly
:
public
APZEventResultTester
{
public
:
APZEventResultTesterLayersOnly
(
)
{
mLayersOnly
=
true
;
}
}
;
TEST_F
(
APZEventResultTesterLayersOnly
OverscrollDirectionsWithEventHandler
)
{
CreateScrollableRootLayer
(
)
;
OverscrollDirectionsWithEventHandlerTest
(
PreventDefaultFlag
:
:
No
)
;
}
TEST_F
(
APZEventResultTesterLayersOnly
OverscrollDirectionsWithPreventDefaultEventHandler
)
{
CreateScrollableRootLayer
(
)
;
OverscrollDirectionsWithEventHandlerTest
(
PreventDefaultFlag
:
:
Yes
)
;
}
TEST_F
(
APZEventResultTesterLayersOnly
ScrollableDirectionsWithEventHandler
)
{
CreateScrollableRootLayer
(
)
;
ScrollableDirectionsWithEventHandlerTest
(
PreventDefaultFlag
:
:
No
)
;
}
TEST_F
(
APZEventResultTesterLayersOnly
ScrollableDirectionsWithPreventDefaultEventHandler
)
{
CreateScrollableRootLayer
(
)
;
ScrollableDirectionsWithEventHandlerTest
(
PreventDefaultFlag
:
:
Yes
)
;
}
TEST_F
(
APZEventResultTesterLayersOnly
HandledByRootApzcFlag
)
{
const
char
*
treeShape
=
"
x
"
;
nsIntRegion
layerVisibleRegions
[
]
=
{
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
}
;
CreateScrollData
(
treeShape
layerVisibleRegions
)
;
WebRenderLayerScrollData
*
root
=
scrollData
[
0
]
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
CSSRect
(
0
0
100
200
)
)
;
ModifyFrameMetrics
(
root
[
]
(
ScrollMetadata
&
sm
FrameMetrics
&
metrics
)
{
metrics
.
SetIsRootContent
(
true
)
;
}
)
;
EventRegions
regions
(
nsIntRegion
(
IntRect
(
0
0
100
100
)
)
)
;
regions
.
mDispatchToContentHitRegion
=
nsIntRegion
(
IntRect
(
0
50
100
50
)
)
;
APZTestAccess
:
:
SetEventRegions
(
*
root
regions
)
;
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
APZEventResult
result
=
TouchDown
(
manager
ScreenIntPoint
(
50
25
)
mcc
-
>
Time
(
)
)
;
TouchUp
(
manager
ScreenIntPoint
(
50
25
)
mcc
-
>
Time
(
)
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
Some
(
APZHandledResult
{
APZHandledPlace
:
:
HandledByRoot
SideBits
:
:
eBottom
EitherScrollDirection
}
)
)
;
result
=
TouchDown
(
manager
ScreenIntPoint
(
50
75
)
mcc
-
>
Time
(
)
)
;
TouchUp
(
manager
ScreenIntPoint
(
50
75
)
mcc
-
>
Time
(
)
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
Nothing
(
)
)
;
APZHandledResult
delayedAnswer
{
APZHandledPlace
:
:
Invalid
SideBits
:
:
eNone
ScrollDirections
(
)
}
;
manager
-
>
AddInputBlockCallback
(
result
.
mInputBlockId
[
&
]
(
uint64_t
id
const
APZHandledResult
&
answer
)
{
EXPECT_EQ
(
id
result
.
mInputBlockId
)
;
delayedAnswer
=
answer
;
}
)
;
manager
-
>
SetAllowedTouchBehavior
(
result
.
mInputBlockId
{
AllowedTouchBehavior
:
:
VERTICAL_PAN
}
)
;
manager
-
>
SetTargetAPZC
(
result
.
mInputBlockId
{
result
.
mTargetGuid
}
)
;
manager
-
>
ContentReceivedInputBlock
(
result
.
mInputBlockId
false
)
;
EXPECT_EQ
(
delayedAnswer
(
APZHandledResult
{
APZHandledPlace
:
:
HandledByRoot
SideBits
:
:
eBottom
EitherScrollDirection
}
)
)
;
result
=
TouchDown
(
manager
ScreenIntPoint
(
50
75
)
mcc
-
>
Time
(
)
)
;
TouchUp
(
manager
ScreenIntPoint
(
50
75
)
mcc
-
>
Time
(
)
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
Nothing
(
)
)
;
manager
-
>
AddInputBlockCallback
(
result
.
mInputBlockId
[
&
]
(
uint64_t
id
const
APZHandledResult
&
answer
)
{
EXPECT_EQ
(
id
result
.
mInputBlockId
)
;
delayedAnswer
=
answer
;
}
)
;
manager
-
>
SetAllowedTouchBehavior
(
result
.
mInputBlockId
{
AllowedTouchBehavior
:
:
VERTICAL_PAN
}
)
;
manager
-
>
SetTargetAPZC
(
result
.
mInputBlockId
{
result
.
mTargetGuid
}
)
;
manager
-
>
ContentReceivedInputBlock
(
result
.
mInputBlockId
true
)
;
EXPECT_EQ
(
delayedAnswer
(
APZHandledResult
{
APZHandledPlace
:
:
HandledByContent
SideBits
:
:
eBottom
EitherScrollDirection
}
)
)
;
ModifyFrameMetrics
(
root
[
]
(
ScrollMetadata
&
sm
FrameMetrics
&
metrics
)
{
metrics
.
SetScrollableRect
(
CSSRect
(
0
0
100
100
)
)
;
}
)
;
UpdateHitTestingTree
(
)
;
result
=
TouchDown
(
manager
ScreenIntPoint
(
50
75
)
mcc
-
>
Time
(
)
)
;
TouchUp
(
manager
ScreenIntPoint
(
50
75
)
mcc
-
>
Time
(
)
)
;
EXPECT_EQ
(
result
.
GetHandledResult
(
)
Nothing
(
)
)
;
manager
-
>
AddInputBlockCallback
(
result
.
mInputBlockId
[
&
]
(
uint64_t
id
const
APZHandledResult
&
answer
)
{
EXPECT_EQ
(
id
result
.
mInputBlockId
)
;
delayedAnswer
=
answer
;
}
)
;
manager
-
>
SetAllowedTouchBehavior
(
result
.
mInputBlockId
{
AllowedTouchBehavior
:
:
VERTICAL_PAN
}
)
;
manager
-
>
SetTargetAPZC
(
result
.
mInputBlockId
{
result
.
mTargetGuid
}
)
;
manager
-
>
ContentReceivedInputBlock
(
result
.
mInputBlockId
false
)
;
EXPECT_EQ
(
delayedAnswer
(
APZHandledResult
{
APZHandledPlace
:
:
Unhandled
SideBits
:
:
eNone
ScrollDirections
(
)
}
)
)
;
}
