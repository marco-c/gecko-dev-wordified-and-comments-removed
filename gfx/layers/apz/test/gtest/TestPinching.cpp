#
include
"
APZCBasicTester
.
h
"
#
include
"
APZTestCommon
.
h
"
#
include
"
InputUtils
.
h
"
#
include
"
mozilla
/
StaticPrefs_apz
.
h
"
class
APZCPinchTester
:
public
APZCBasicTester
{
public
:
explicit
APZCPinchTester
(
AsyncPanZoomController
:
:
GestureBehavior
aGestureBehavior
=
AsyncPanZoomController
:
:
DEFAULT_GESTURES
)
:
APZCBasicTester
(
aGestureBehavior
)
{
}
protected
:
FrameMetrics
GetPinchableFrameMetrics
(
)
{
FrameMetrics
fm
;
fm
.
SetCompositionBounds
(
ParentLayerRect
(
0
0
100
200
)
)
;
fm
.
SetScrollableRect
(
CSSRect
(
0
0
980
1000
)
)
;
fm
.
SetScrollOffset
(
CSSPoint
(
300
300
)
)
;
fm
.
SetLayoutViewport
(
CSSRect
(
300
300
100
200
)
)
;
fm
.
SetZoom
(
CSSToParentLayerScale2D
(
2
.
0
2
.
0
)
)
;
fm
.
SetIsRootContent
(
true
)
;
return
fm
;
}
void
DoPinchTest
(
bool
aShouldTriggerPinch
nsTArray
<
uint32_t
>
*
aAllowedTouchBehaviors
=
nullptr
)
{
apzc
-
>
SetFrameMetrics
(
GetPinchableFrameMetrics
(
)
)
;
MakeApzcZoomable
(
)
;
if
(
aShouldTriggerPinch
)
{
EXPECT_CALL
(
*
mcc
RequestContentRepaint
(
_
)
)
.
Times
(
2
)
;
}
else
{
EXPECT_CALL
(
*
mcc
RequestContentRepaint
(
_
)
)
.
Times
(
0
)
;
}
int
touchInputId
=
0
;
if
(
mGestureBehavior
=
=
AsyncPanZoomController
:
:
USE_GESTURE_DETECTOR
)
{
PinchWithTouchInputAndCheckStatus
(
apzc
ScreenIntPoint
(
250
300
)
1
.
25
touchInputId
aShouldTriggerPinch
aAllowedTouchBehaviors
)
;
}
else
{
PinchWithPinchInputAndCheckStatus
(
apzc
ScreenIntPoint
(
250
300
)
1
.
25
aShouldTriggerPinch
)
;
}
apzc
-
>
AssertStateIsReset
(
)
;
FrameMetrics
fm
=
apzc
-
>
GetFrameMetrics
(
)
;
if
(
aShouldTriggerPinch
)
{
EXPECT_EQ
(
2
.
5f
fm
.
GetZoom
(
)
.
ToScaleFactor
(
)
.
scale
)
;
EXPECT_EQ
(
325
fm
.
GetScrollOffset
(
)
.
x
)
;
EXPECT_EQ
(
330
fm
.
GetScrollOffset
(
)
.
y
)
;
}
else
{
EXPECT_EQ
(
2
.
0f
fm
.
GetZoom
(
)
.
ToScaleFactor
(
)
.
scale
)
;
EXPECT_EQ
(
300
fm
.
GetScrollOffset
(
)
.
x
)
;
EXPECT_EQ
(
300
fm
.
GetScrollOffset
(
)
.
y
)
;
}
fm
.
SetZoom
(
CSSToParentLayerScale2D
(
2
.
0
2
.
0
)
)
;
fm
.
SetScrollOffset
(
CSSPoint
(
930
5
)
)
;
apzc
-
>
SetFrameMetrics
(
fm
)
;
if
(
mGestureBehavior
=
=
AsyncPanZoomController
:
:
USE_GESTURE_DETECTOR
)
{
PinchWithTouchInputAndCheckStatus
(
apzc
ScreenIntPoint
(
250
300
)
0
.
5
touchInputId
aShouldTriggerPinch
aAllowedTouchBehaviors
)
;
}
else
{
PinchWithPinchInputAndCheckStatus
(
apzc
ScreenIntPoint
(
250
300
)
0
.
5
aShouldTriggerPinch
)
;
}
apzc
-
>
AssertStateIsReset
(
)
;
fm
=
apzc
-
>
GetFrameMetrics
(
)
;
if
(
aShouldTriggerPinch
)
{
EXPECT_EQ
(
1
.
0f
fm
.
GetZoom
(
)
.
ToScaleFactor
(
)
.
scale
)
;
EXPECT_EQ
(
805
fm
.
GetScrollOffset
(
)
.
x
)
;
EXPECT_EQ
(
0
fm
.
GetScrollOffset
(
)
.
y
)
;
}
else
{
EXPECT_EQ
(
2
.
0f
fm
.
GetZoom
(
)
.
ToScaleFactor
(
)
.
scale
)
;
EXPECT_EQ
(
930
fm
.
GetScrollOffset
(
)
.
x
)
;
EXPECT_EQ
(
5
fm
.
GetScrollOffset
(
)
.
y
)
;
}
}
}
;
class
APZCPinchGestureDetectorTester
:
public
APZCPinchTester
{
public
:
APZCPinchGestureDetectorTester
(
)
:
APZCPinchTester
(
AsyncPanZoomController
:
:
USE_GESTURE_DETECTOR
)
{
}
void
DoPinchWithPreventDefaultTest
(
)
{
FrameMetrics
originalMetrics
=
GetPinchableFrameMetrics
(
)
;
apzc
-
>
SetFrameMetrics
(
originalMetrics
)
;
MakeApzcWaitForMainThread
(
)
;
MakeApzcZoomable
(
)
;
int
touchInputId
=
0
;
uint64_t
blockId
=
0
;
PinchWithTouchInput
(
apzc
ScreenIntPoint
(
250
300
)
1
.
25
touchInputId
nullptr
nullptr
&
blockId
)
;
apzc
-
>
ContentReceivedInputBlock
(
blockId
true
)
;
FrameMetrics
fm
=
apzc
-
>
GetFrameMetrics
(
)
;
EXPECT_EQ
(
originalMetrics
.
GetZoom
(
)
fm
.
GetZoom
(
)
)
;
EXPECT_EQ
(
originalMetrics
.
GetScrollOffset
(
)
.
x
fm
.
GetScrollOffset
(
)
.
x
)
;
EXPECT_EQ
(
originalMetrics
.
GetScrollOffset
(
)
.
y
fm
.
GetScrollOffset
(
)
.
y
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
}
;
class
APZCPinchLockingTester
:
public
APZCPinchTester
{
private
:
static
const
int
mDPI
=
160
;
ScreenIntPoint
mFocus
;
float
mSpan
;
public
:
APZCPinchLockingTester
(
)
:
APZCPinchTester
(
AsyncPanZoomController
:
:
USE_GESTURE_DETECTOR
)
mFocus
(
ScreenIntPoint
(
200
300
)
)
mSpan
(
10
.
0
)
{
}
virtual
void
SetUp
(
)
{
APZCPinchTester
:
:
SetUp
(
)
;
tm
-
>
SetDPI
(
mDPI
)
;
apzc
-
>
SetFrameMetrics
(
GetPinchableFrameMetrics
(
)
)
;
MakeApzcZoomable
(
)
;
apzc
-
>
ReceiveInputEvent
(
CreatePinchGestureInput
(
PinchGestureInput
:
:
PINCHGESTURE_START
mFocus
mSpan
mSpan
mcc
-
>
Time
(
)
)
nullptr
)
;
mcc
-
>
AdvanceBy
(
TimeDuration
:
:
FromMilliseconds
(
51
)
)
;
}
void
twoFingerPan
(
)
{
ScreenCoord
panDistance
=
StaticPrefs
:
:
apz_pinch_lock_scroll_lock_threshold
(
)
*
1
.
2
*
tm
-
>
GetDPI
(
)
;
mFocus
=
ScreenIntPoint
(
(
int
)
(
mFocus
.
x
+
panDistance
)
(
int
)
(
mFocus
.
y
)
)
;
apzc
-
>
ReceiveInputEvent
(
CreatePinchGestureInput
(
PinchGestureInput
:
:
PINCHGESTURE_SCALE
mFocus
mSpan
mSpan
mcc
-
>
Time
(
)
)
nullptr
)
;
mcc
-
>
AdvanceBy
(
TimeDuration
:
:
FromMilliseconds
(
51
)
)
;
}
void
twoFingerZoom
(
)
{
float
pinchDistance
=
StaticPrefs
:
:
apz_pinch_lock_span_breakout_threshold
(
)
*
1
.
2
*
tm
-
>
GetDPI
(
)
;
float
newSpan
=
mSpan
+
pinchDistance
;
apzc
-
>
ReceiveInputEvent
(
CreatePinchGestureInput
(
PinchGestureInput
:
:
PINCHGESTURE_SCALE
mFocus
newSpan
mSpan
mcc
-
>
Time
(
)
)
nullptr
)
;
mcc
-
>
AdvanceBy
(
TimeDuration
:
:
FromMilliseconds
(
51
)
)
;
mSpan
=
newSpan
;
}
bool
isPinchLockActive
(
)
{
FrameMetrics
originalMetrics
=
apzc
-
>
GetFrameMetrics
(
)
;
float
pinchDistance
=
StaticPrefs
:
:
apz_pinch_lock_span_breakout_threshold
(
)
*
0
.
8
*
tm
-
>
GetDPI
(
)
;
apzc
-
>
ReceiveInputEvent
(
CreatePinchGestureInput
(
PinchGestureInput
:
:
PINCHGESTURE_SCALE
mFocus
mSpan
+
pinchDistance
mSpan
mcc
-
>
Time
(
)
)
nullptr
)
;
FrameMetrics
result
=
apzc
-
>
GetFrameMetrics
(
)
;
bool
lockActive
=
originalMetrics
.
GetZoom
(
)
=
=
result
.
GetZoom
(
)
&
&
originalMetrics
.
GetScrollOffset
(
)
.
x
=
=
result
.
GetScrollOffset
(
)
.
x
&
&
originalMetrics
.
GetScrollOffset
(
)
.
y
=
=
result
.
GetScrollOffset
(
)
.
y
;
apzc
-
>
SetFrameMetrics
(
originalMetrics
)
;
return
lockActive
;
}
}
;
TEST_F
(
APZCPinchTester
Pinch_DefaultGestures_NoTouchAction
)
{
SCOPED_GFX_PREF_BOOL
(
"
layout
.
css
.
touch_action
.
enabled
"
false
)
;
DoPinchTest
(
true
)
;
}
TEST_F
(
APZCPinchGestureDetectorTester
Pinch_UseGestureDetector_NoTouchAction
)
{
SCOPED_GFX_PREF_BOOL
(
"
layout
.
css
.
touch_action
.
enabled
"
false
)
;
DoPinchTest
(
true
)
;
}
TEST_F
(
APZCPinchGestureDetectorTester
Pinch_UseGestureDetector_TouchActionNone
)
{
SCOPED_GFX_PREF_BOOL
(
"
layout
.
css
.
touch_action
.
enabled
"
true
)
;
nsTArray
<
uint32_t
>
behaviors
=
{
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
NONE
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
NONE
}
;
DoPinchTest
(
false
&
behaviors
)
;
}
TEST_F
(
APZCPinchGestureDetectorTester
Pinch_UseGestureDetector_TouchActionZoom
)
{
SCOPED_GFX_PREF_BOOL
(
"
layout
.
css
.
touch_action
.
enabled
"
true
)
;
nsTArray
<
uint32_t
>
behaviors
;
behaviors
.
AppendElement
(
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
PINCH_ZOOM
)
;
behaviors
.
AppendElement
(
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
PINCH_ZOOM
)
;
DoPinchTest
(
true
&
behaviors
)
;
}
TEST_F
(
APZCPinchGestureDetectorTester
Pinch_UseGestureDetector_TouchActionNotAllowZoom
)
{
SCOPED_GFX_PREF_BOOL
(
"
layout
.
css
.
touch_action
.
enabled
"
true
)
;
nsTArray
<
uint32_t
>
behaviors
;
behaviors
.
AppendElement
(
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
NONE
)
;
behaviors
.
AppendElement
(
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
PINCH_ZOOM
)
;
DoPinchTest
(
false
&
behaviors
)
;
}
TEST_F
(
APZCPinchGestureDetectorTester
Pinch_UseGestureDetector_TouchActionNone_NoAPZZoom
)
{
SCOPED_GFX_PREF_BOOL
(
"
layout
.
css
.
touch_action
.
enabled
"
true
)
;
SCOPED_GFX_PREF_BOOL
(
"
apz
.
allow_zooming
"
false
)
;
EXPECT_CALL
(
*
mcc
NotifyPinchGesture
(
_
_
_
_
_
)
)
.
Times
(
0
)
;
nsTArray
<
uint32_t
>
behaviors
=
{
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
NONE
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
NONE
}
;
DoPinchTest
(
false
&
behaviors
)
;
}
TEST_F
(
APZCPinchGestureDetectorTester
Pinch_PreventDefault
)
{
DoPinchWithPreventDefaultTest
(
)
;
}
TEST_F
(
APZCPinchGestureDetectorTester
Pinch_PreventDefault_NoAPZZoom
)
{
SCOPED_GFX_PREF_BOOL
(
"
apz
.
allow_zooming
"
false
)
;
EXPECT_CALL
(
*
mcc
NotifyPinchGesture
(
_
_
_
_
_
)
)
.
Times
(
0
)
;
DoPinchWithPreventDefaultTest
(
)
;
}
#
ifndef
MOZ_WIDGET_ANDROID
TEST_F
(
APZCPinchGestureDetectorTester
Panning_TwoFingerFling_ZoomDisabled
)
{
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_min_velocity_threshold
"
0
.
0f
)
;
apzc
-
>
SetFrameMetrics
(
GetPinchableFrameMetrics
(
)
)
;
MakeApzcUnzoomable
(
)
;
int
touchInputId
=
0
;
uint64_t
blockId
=
0
;
PinchWithTouchInput
(
apzc
ScreenIntPoint
(
100
200
)
ScreenIntPoint
(
100
100
)
1
touchInputId
nullptr
nullptr
&
blockId
)
;
apzc
-
>
AssertStateIsFling
(
)
;
}
#
endif
TEST_F
(
APZCPinchGestureDetectorTester
Panning_TwoFingerFling_ZoomEnabled
)
{
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_min_velocity_threshold
"
0
.
0f
)
;
apzc
-
>
SetFrameMetrics
(
GetPinchableFrameMetrics
(
)
)
;
MakeApzcZoomable
(
)
;
int
touchInputId
=
0
;
uint64_t
blockId
=
0
;
PinchWithTouchInput
(
apzc
ScreenIntPoint
(
100
200
)
ScreenIntPoint
(
100
100
)
1
touchInputId
nullptr
nullptr
&
blockId
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
TEST_F
(
APZCPinchGestureDetectorTester
Panning_TwoThenOneFingerFling_ZoomEnabled
)
{
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_min_velocity_threshold
"
0
.
0f
)
;
apzc
-
>
SetFrameMetrics
(
GetPinchableFrameMetrics
(
)
)
;
MakeApzcZoomable
(
)
;
int
touchInputId
=
0
;
uint64_t
blockId
=
0
;
PinchWithTouchInput
(
apzc
ScreenIntPoint
(
100
200
)
ScreenIntPoint
(
100
100
)
1
touchInputId
nullptr
nullptr
&
blockId
PinchOptions
:
:
LiftFinger2
)
;
mcc
-
>
AdvanceBy
(
TimeDuration
:
:
FromMilliseconds
(
50
)
)
;
TouchUp
(
apzc
ScreenIntPoint
(
100
100
)
mcc
-
>
Time
(
)
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
TEST_F
(
APZCPinchTester
Panning_TwoFinger_ZoomDisabled
)
{
apzc
-
>
SetFrameMetrics
(
GetPinchableFrameMetrics
(
)
)
;
MakeApzcUnzoomable
(
)
;
nsEventStatus
statuses
[
3
]
;
PinchWithPinchInput
(
apzc
ScreenIntPoint
(
250
350
)
ScreenIntPoint
(
200
300
)
10
&
statuses
)
;
FrameMetrics
fm
=
apzc
-
>
GetFrameMetrics
(
)
;
EXPECT_EQ
(
325
fm
.
GetScrollOffset
(
)
.
x
)
;
EXPECT_EQ
(
325
fm
.
GetScrollOffset
(
)
.
y
)
;
EXPECT_EQ
(
2
.
0
fm
.
GetZoom
(
)
.
ToScaleFactor
(
)
.
scale
)
;
}
TEST_F
(
APZCPinchTester
Panning_Beyond_LayoutViewport
)
{
apzc
-
>
SetFrameMetrics
(
GetPinchableFrameMetrics
(
)
)
;
MakeApzcZoomable
(
)
;
Pan
(
apzc
350
300
PanOptions
:
:
NoFling
)
;
FrameMetrics
fm
=
apzc
-
>
GetFrameMetrics
(
)
;
EXPECT_EQ
(
300
fm
.
GetScrollOffset
(
)
.
x
)
;
EXPECT_EQ
(
325
fm
.
GetScrollOffset
(
)
.
y
)
;
EXPECT_EQ
(
300
fm
.
GetLayoutViewport
(
)
.
X
(
)
)
;
EXPECT_EQ
(
300
fm
.
GetLayoutViewport
(
)
.
Y
(
)
)
;
Pan
(
apzc
525
325
PanOptions
:
:
NoFling
)
;
fm
=
apzc
-
>
GetFrameMetrics
(
)
;
EXPECT_EQ
(
300
fm
.
GetScrollOffset
(
)
.
x
)
;
EXPECT_EQ
(
425
fm
.
GetScrollOffset
(
)
.
y
)
;
EXPECT_EQ
(
300
fm
.
GetLayoutViewport
(
)
.
X
(
)
)
;
EXPECT_EQ
(
325
fm
.
GetLayoutViewport
(
)
.
Y
(
)
)
;
Pan
(
apzc
425
775
PanOptions
:
:
NoFling
)
;
fm
=
apzc
-
>
GetFrameMetrics
(
)
;
EXPECT_EQ
(
300
fm
.
GetScrollOffset
(
)
.
x
)
;
EXPECT_EQ
(
250
fm
.
GetScrollOffset
(
)
.
y
)
;
EXPECT_EQ
(
300
fm
.
GetLayoutViewport
(
)
.
X
(
)
)
;
EXPECT_EQ
(
250
fm
.
GetLayoutViewport
(
)
.
Y
(
)
)
;
Pan
(
apzc
ScreenIntPoint
(
150
10
)
ScreenIntPoint
(
350
10
)
PanOptions
:
:
NoFling
)
;
fm
=
apzc
-
>
GetFrameMetrics
(
)
;
EXPECT_EQ
(
200
fm
.
GetScrollOffset
(
)
.
x
)
;
EXPECT_EQ
(
250
fm
.
GetScrollOffset
(
)
.
y
)
;
EXPECT_EQ
(
200
fm
.
GetLayoutViewport
(
)
.
X
(
)
)
;
EXPECT_EQ
(
250
fm
.
GetLayoutViewport
(
)
.
Y
(
)
)
;
Pan
(
apzc
ScreenIntPoint
(
350
10
)
ScreenIntPoint
(
150
10
)
PanOptions
:
:
NoFling
)
;
fm
=
apzc
-
>
GetFrameMetrics
(
)
;
EXPECT_EQ
(
300
fm
.
GetScrollOffset
(
)
.
x
)
;
EXPECT_EQ
(
250
fm
.
GetScrollOffset
(
)
.
y
)
;
EXPECT_EQ
(
250
fm
.
GetLayoutViewport
(
)
.
X
(
)
)
;
EXPECT_EQ
(
250
fm
.
GetLayoutViewport
(
)
.
Y
(
)
)
;
Pan
(
apzc
ScreenIntPoint
(
350
200
)
ScreenIntPoint
(
150
400
)
PanOptions
:
:
NoFling
)
;
fm
=
apzc
-
>
GetFrameMetrics
(
)
;
EXPECT_EQ
(
400
fm
.
GetScrollOffset
(
)
.
x
)
;
EXPECT_EQ
(
150
fm
.
GetScrollOffset
(
)
.
y
)
;
EXPECT_EQ
(
350
fm
.
GetLayoutViewport
(
)
.
X
(
)
)
;
EXPECT_EQ
(
150
fm
.
GetLayoutViewport
(
)
.
Y
(
)
)
;
}
TEST_F
(
APZCPinchGestureDetectorTester
Pinch_APZZoom_Disabled
)
{
SCOPED_GFX_PREF_BOOL
(
"
apz
.
allow_zooming
"
false
)
;
FrameMetrics
originalMetrics
=
GetPinchableFrameMetrics
(
)
;
apzc
-
>
SetFrameMetrics
(
originalMetrics
)
;
MakeApzcUnzoomable
(
)
;
EXPECT_CALL
(
*
mcc
NotifyPinchGesture
(
PinchGestureInput
:
:
PINCHGESTURE_START
apzc
-
>
GetGuid
(
)
_
LayoutDeviceCoord
(
0
)
_
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
*
mcc
NotifyPinchGesture
(
PinchGestureInput
:
:
PINCHGESTURE_SCALE
apzc
-
>
GetGuid
(
)
_
_
_
)
)
.
Times
(
AtLeast
(
1
)
)
;
EXPECT_CALL
(
*
mcc
NotifyPinchGesture
(
PinchGestureInput
:
:
PINCHGESTURE_END
apzc
-
>
GetGuid
(
)
_
LayoutDeviceCoord
(
0
)
_
)
)
.
Times
(
1
)
;
int
touchInputId
=
0
;
uint64_t
blockId
=
0
;
PinchWithTouchInput
(
apzc
ScreenIntPoint
(
250
300
)
1
.
25
touchInputId
nullptr
nullptr
&
blockId
)
;
FrameMetrics
fm
=
apzc
-
>
GetFrameMetrics
(
)
;
EXPECT_EQ
(
originalMetrics
.
GetZoom
(
)
fm
.
GetZoom
(
)
)
;
EXPECT_EQ
(
originalMetrics
.
GetScrollOffset
(
)
.
x
fm
.
GetScrollOffset
(
)
.
x
)
;
EXPECT_EQ
(
originalMetrics
.
GetScrollOffset
(
)
.
y
fm
.
GetScrollOffset
(
)
.
y
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
TEST_F
(
APZCPinchGestureDetectorTester
Pinch_NoSpan
)
{
SCOPED_GFX_PREF_BOOL
(
"
apz
.
allow_zooming
"
false
)
;
SCOPED_GFX_PREF_BOOL
(
"
layout
.
css
.
touch_action
.
enabled
"
false
)
;
FrameMetrics
originalMetrics
=
GetPinchableFrameMetrics
(
)
;
apzc
-
>
SetFrameMetrics
(
originalMetrics
)
;
MakeApzcUnzoomable
(
)
;
EXPECT_CALL
(
*
mcc
NotifyPinchGesture
(
PinchGestureInput
:
:
PINCHGESTURE_START
apzc
-
>
GetGuid
(
)
_
LayoutDeviceCoord
(
0
)
_
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
*
mcc
NotifyPinchGesture
(
PinchGestureInput
:
:
PINCHGESTURE_SCALE
apzc
-
>
GetGuid
(
)
_
_
_
)
)
.
Times
(
AtLeast
(
1
)
)
;
EXPECT_CALL
(
*
mcc
NotifyPinchGesture
(
PinchGestureInput
:
:
PINCHGESTURE_END
apzc
-
>
GetGuid
(
)
_
LayoutDeviceCoord
(
0
)
_
)
)
.
Times
(
1
)
;
int
inputId
=
0
;
ScreenIntPoint
focus
(
250
300
)
;
const
TimeDuration
TIME_BETWEEN_TOUCH_EVENT
=
TimeDuration
:
:
FromMilliseconds
(
50
)
;
MultiTouchInput
mtiStart
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_START
0
mcc
-
>
Time
(
)
0
)
;
mtiStart
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
inputId
focus
)
)
;
mtiStart
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
inputId
+
1
focus
)
)
;
apzc
-
>
ReceiveInputEvent
(
mtiStart
nullptr
)
;
mcc
-
>
AdvanceBy
(
TIME_BETWEEN_TOUCH_EVENT
)
;
focus
.
y
-
=
35
+
1
;
MultiTouchInput
mtiMove1
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_MOVE
0
mcc
-
>
Time
(
)
0
)
;
mtiMove1
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
inputId
focus
)
)
;
mtiMove1
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
inputId
+
1
focus
)
)
;
apzc
-
>
ReceiveInputEvent
(
mtiMove1
nullptr
)
;
mcc
-
>
AdvanceBy
(
TIME_BETWEEN_TOUCH_EVENT
)
;
focus
.
y
-
=
100
;
MultiTouchInput
mtiMove2
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_MOVE
0
mcc
-
>
Time
(
)
0
)
;
mtiMove2
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
inputId
focus
)
)
;
mtiMove2
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
inputId
+
1
focus
)
)
;
apzc
-
>
ReceiveInputEvent
(
mtiMove2
nullptr
)
;
mcc
-
>
AdvanceBy
(
TIME_BETWEEN_TOUCH_EVENT
)
;
MultiTouchInput
mtiEnd
=
MultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_END
0
mcc
-
>
Time
(
)
0
)
;
mtiEnd
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
inputId
focus
)
)
;
mtiEnd
.
mTouches
.
AppendElement
(
CreateSingleTouchData
(
inputId
+
1
focus
)
)
;
apzc
-
>
ReceiveInputEvent
(
mtiEnd
nullptr
)
;
FrameMetrics
fm
=
apzc
-
>
GetFrameMetrics
(
)
;
EXPECT_EQ
(
originalMetrics
.
GetZoom
(
)
fm
.
GetZoom
(
)
)
;
EXPECT_EQ
(
originalMetrics
.
GetScrollOffset
(
)
.
x
fm
.
GetScrollOffset
(
)
.
x
)
;
EXPECT_EQ
(
originalMetrics
.
GetScrollOffset
(
)
.
y
+
50
fm
.
GetScrollOffset
(
)
.
y
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
TEST_F
(
APZCPinchTester
Pinch_TwoFinger_APZZoom_Disabled_Bug1354185
)
{
SCOPED_GFX_PREF_BOOL
(
"
apz
.
allow_zooming
"
false
)
;
apzc
-
>
SetFrameMetrics
(
GetPinchableFrameMetrics
(
)
)
;
MakeApzcUnzoomable
(
)
;
EXPECT_CALL
(
*
mcc
RequestContentRepaint
(
_
)
)
.
Times
(
1
)
;
ScreenIntPoint
aFocus
(
250
350
)
;
ScreenIntPoint
aSecondFocus
(
200
300
)
;
float
aScale
=
10
;
apzc
-
>
ReceiveInputEvent
(
CreatePinchGestureInput
(
PinchGestureInput
:
:
PINCHGESTURE_START
aFocus
10
.
0
10
.
0
mcc
-
>
Time
(
)
)
nullptr
)
;
apzc
-
>
ReceiveInputEvent
(
CreatePinchGestureInput
(
PinchGestureInput
:
:
PINCHGESTURE_SCALE
aSecondFocus
10
.
0
*
aScale
10
.
0
mcc
-
>
Time
(
)
)
nullptr
)
;
}
TEST_F
(
APZCPinchLockingTester
Pinch_Locking_Free
)
{
SCOPED_GFX_PREF_INT
(
"
apz
.
pinch_lock
.
mode
"
0
)
;
twoFingerPan
(
)
;
EXPECT_FALSE
(
isPinchLockActive
(
)
)
;
}
TEST_F
(
APZCPinchLockingTester
Pinch_Locking_Normal_Lock
)
{
SCOPED_GFX_PREF_INT
(
"
apz
.
pinch_lock
.
mode
"
1
)
;
twoFingerPan
(
)
;
EXPECT_TRUE
(
isPinchLockActive
(
)
)
;
}
TEST_F
(
APZCPinchLockingTester
Pinch_Locking_Normal_Lock_Break
)
{
SCOPED_GFX_PREF_INT
(
"
apz
.
pinch_lock
.
mode
"
1
)
;
twoFingerPan
(
)
;
twoFingerZoom
(
)
;
EXPECT_TRUE
(
isPinchLockActive
(
)
)
;
}
TEST_F
(
APZCPinchLockingTester
Pinch_Locking_Sticky_Lock
)
{
SCOPED_GFX_PREF_INT
(
"
apz
.
pinch_lock
.
mode
"
2
)
;
twoFingerPan
(
)
;
EXPECT_TRUE
(
isPinchLockActive
(
)
)
;
}
TEST_F
(
APZCPinchLockingTester
Pinch_Locking_Sticky_Lock_Break
)
{
SCOPED_GFX_PREF_INT
(
"
apz
.
pinch_lock
.
mode
"
2
)
;
twoFingerPan
(
)
;
twoFingerZoom
(
)
;
EXPECT_FALSE
(
isPinchLockActive
(
)
)
;
}
TEST_F
(
APZCPinchLockingTester
Pinch_Locking_Sticky_Lock_Break_Lock
)
{
SCOPED_GFX_PREF_INT
(
"
apz
.
pinch_lock
.
mode
"
2
)
;
twoFingerPan
(
)
;
twoFingerZoom
(
)
;
twoFingerPan
(
)
;
EXPECT_TRUE
(
isPinchLockActive
(
)
)
;
}
