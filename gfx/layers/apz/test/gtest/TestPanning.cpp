#
include
"
APZCBasicTester
.
h
"
#
include
"
APZCTreeManagerTester
.
h
"
#
include
"
APZTestCommon
.
h
"
#
include
"
FrameMetrics
.
h
"
#
include
"
InputUtils
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
ScrollSnapInfo
.
h
"
#
include
"
mozilla
/
ServoComputedData
.
h
"
#
include
"
mozilla
/
gfx
/
CompositorHitTestInfo
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
class
APZCPanningTester
:
public
APZCBasicTester
{
protected
:
void
DoPanTest
(
bool
aShouldTriggerScroll
bool
aShouldBeConsumed
uint32_t
aBehavior
)
{
if
(
aShouldTriggerScroll
)
{
EXPECT_CALL
(
*
mcc
RequestContentRepaint
(
_
)
)
.
Times
(
6
)
;
}
else
{
EXPECT_CALL
(
*
mcc
RequestContentRepaint
(
_
)
)
.
Times
(
0
)
;
}
int
touchStart
=
50
;
int
touchEnd
=
10
;
ParentLayerPoint
pointOut
;
AsyncTransform
viewTransformOut
;
nsTArray
<
uint32_t
>
allowedTouchBehaviors
;
allowedTouchBehaviors
.
AppendElement
(
aBehavior
)
;
PanAndCheckStatus
(
apzc
touchStart
touchEnd
aShouldBeConsumed
&
allowedTouchBehaviors
)
;
apzc
-
>
SampleContentTransformForFrame
(
&
viewTransformOut
pointOut
)
;
if
(
aShouldTriggerScroll
)
{
EXPECT_EQ
(
ParentLayerPoint
(
0
-
(
touchEnd
-
touchStart
)
)
pointOut
)
;
EXPECT_NE
(
AsyncTransform
(
)
viewTransformOut
)
;
}
else
{
EXPECT_EQ
(
ParentLayerPoint
(
)
pointOut
)
;
EXPECT_EQ
(
AsyncTransform
(
)
viewTransformOut
)
;
}
apzc
-
>
CancelAnimation
(
)
;
PanAndCheckStatus
(
apzc
touchEnd
touchStart
aShouldBeConsumed
&
allowedTouchBehaviors
)
;
apzc
-
>
SampleContentTransformForFrame
(
&
viewTransformOut
pointOut
)
;
EXPECT_EQ
(
ParentLayerPoint
(
)
pointOut
)
;
EXPECT_EQ
(
AsyncTransform
(
)
viewTransformOut
)
;
}
void
DoPanWithPreventDefaultTest
(
)
{
MakeApzcWaitForMainThread
(
)
;
int
touchStart
=
50
;
int
touchEnd
=
10
;
ParentLayerPoint
pointOut
;
AsyncTransform
viewTransformOut
;
uint64_t
blockId
=
0
;
nsTArray
<
uint32_t
>
allowedTouchBehaviors
;
allowedTouchBehaviors
.
AppendElement
(
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
VERTICAL_PAN
)
;
PanAndCheckStatus
(
apzc
touchStart
touchEnd
true
&
allowedTouchBehaviors
&
blockId
)
;
apzc
-
>
ContentReceivedInputBlock
(
blockId
true
)
;
apzc
-
>
SampleContentTransformForFrame
(
&
viewTransformOut
pointOut
)
;
EXPECT_EQ
(
ParentLayerPoint
(
)
pointOut
)
;
EXPECT_EQ
(
AsyncTransform
(
)
viewTransformOut
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
void
PanWithFling
(
)
{
PanGesture
(
PanGestureInput
:
:
PANGESTURE_START
apzc
ScreenIntPoint
(
50
80
)
ScreenPoint
(
0
2
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
apzc
-
>
AdvanceAnimations
(
mcc
-
>
GetSampleTime
(
)
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_PAN
apzc
ScreenIntPoint
(
50
80
)
ScreenPoint
(
0
10
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
apzc
-
>
AdvanceAnimations
(
mcc
-
>
GetSampleTime
(
)
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_PAN
apzc
ScreenIntPoint
(
50
80
)
ScreenPoint
(
0
10
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
apzc
-
>
AdvanceAnimations
(
mcc
-
>
GetSampleTime
(
)
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_END
apzc
ScreenIntPoint
(
50
80
)
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
MODIFIER_NONE
true
)
;
}
}
;
TEST_F
(
APZCPanningTester
PanWithTouchActionAuto
)
{
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
velocity_bias
"
0
.
0
)
;
DoPanTest
(
true
true
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
HORIZONTAL_PAN
|
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
VERTICAL_PAN
)
;
}
TEST_F
(
APZCPanningTester
PanWithTouchActionNone
)
{
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
velocity_bias
"
0
.
0
)
;
DoPanTest
(
false
false
0
)
;
}
TEST_F
(
APZCPanningTester
PanWithTouchActionPanX
)
{
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
velocity_bias
"
0
.
0
)
;
DoPanTest
(
false
false
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
HORIZONTAL_PAN
)
;
}
TEST_F
(
APZCPanningTester
PanWithTouchActionPanY
)
{
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
velocity_bias
"
0
.
0
)
;
DoPanTest
(
true
true
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
VERTICAL_PAN
)
;
}
TEST_F
(
APZCPanningTester
PanWithPreventDefault
)
{
DoPanWithPreventDefaultTest
(
)
;
}
TEST_F
(
APZCPanningTester
PanWithHistoricalTouchData
)
{
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_min_velocity_threshold
"
0
.
0
)
;
APZEventResult
result
=
TouchDown
(
apzc
ScreenIntPoint
(
0
50
)
mcc
-
>
Time
(
)
)
;
if
(
result
.
GetStatus
(
)
!
=
nsEventStatus_eConsumeNoDefault
)
{
SetDefaultAllowedTouchBehavior
(
apzc
result
.
mInputBlockId
)
;
}
mcc
-
>
AdvanceByMillis
(
50
)
;
result
=
TouchMove
(
apzc
ScreenIntPoint
(
0
45
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
10
)
;
result
=
TouchMove
(
apzc
ScreenIntPoint
(
0
40
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
10
)
;
result
=
TouchMove
(
apzc
ScreenIntPoint
(
0
30
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
10
)
;
result
=
TouchMove
(
apzc
ScreenIntPoint
(
0
20
)
mcc
-
>
Time
(
)
)
;
result
=
TouchUp
(
apzc
ScreenIntPoint
(
0
20
)
mcc
-
>
Time
(
)
)
;
auto
velocityFromFullDataAsSeparateEvents
=
apzc
-
>
GetVelocityVector
(
)
;
apzc
-
>
CancelAnimation
(
)
;
mcc
-
>
AdvanceByMillis
(
100
)
;
result
=
TouchDown
(
apzc
ScreenIntPoint
(
0
50
)
mcc
-
>
Time
(
)
)
;
if
(
result
.
GetStatus
(
)
!
=
nsEventStatus_eConsumeNoDefault
)
{
SetDefaultAllowedTouchBehavior
(
apzc
result
.
mInputBlockId
)
;
}
mcc
-
>
AdvanceByMillis
(
50
)
;
result
=
TouchMove
(
apzc
ScreenIntPoint
(
0
45
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
30
)
;
result
=
TouchMove
(
apzc
ScreenIntPoint
(
0
20
)
mcc
-
>
Time
(
)
)
;
result
=
TouchUp
(
apzc
ScreenIntPoint
(
0
20
)
mcc
-
>
Time
(
)
)
;
auto
velocityFromPartialData
=
apzc
-
>
GetVelocityVector
(
)
;
apzc
-
>
CancelAnimation
(
)
;
mcc
-
>
AdvanceByMillis
(
100
)
;
result
=
TouchDown
(
apzc
ScreenIntPoint
(
0
50
)
mcc
-
>
Time
(
)
)
;
if
(
result
.
GetStatus
(
)
!
=
nsEventStatus_eConsumeNoDefault
)
{
SetDefaultAllowedTouchBehavior
(
apzc
result
.
mInputBlockId
)
;
}
mcc
-
>
AdvanceByMillis
(
50
)
;
result
=
TouchMove
(
apzc
ScreenIntPoint
(
0
45
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
30
)
;
MultiTouchInput
mti
=
CreateMultiTouchInput
(
MultiTouchInput
:
:
MULTITOUCH_MOVE
mcc
-
>
Time
(
)
)
;
auto
singleTouchData
=
CreateSingleTouchData
(
0
ScreenIntPoint
(
0
20
)
)
;
singleTouchData
.
mHistoricalData
.
AppendElement
(
SingleTouchData
:
:
HistoricalTouchData
{
mcc
-
>
Time
(
)
-
TimeDuration
:
:
FromMilliseconds
(
20
)
ScreenIntPoint
(
0
40
)
{
}
{
}
0
.
0f
0
.
0f
}
)
;
singleTouchData
.
mHistoricalData
.
AppendElement
(
SingleTouchData
:
:
HistoricalTouchData
{
mcc
-
>
Time
(
)
-
TimeDuration
:
:
FromMilliseconds
(
10
)
ScreenIntPoint
(
0
30
)
{
}
{
}
0
.
0f
0
.
0f
}
)
;
mti
.
mTouches
.
AppendElement
(
singleTouchData
)
;
result
=
apzc
-
>
ReceiveInputEvent
(
mti
)
;
result
=
TouchUp
(
apzc
ScreenIntPoint
(
0
20
)
mcc
-
>
Time
(
)
)
;
auto
velocityFromFullDataViaHistory
=
apzc
-
>
GetVelocityVector
(
)
;
apzc
-
>
CancelAnimation
(
)
;
EXPECT_EQ
(
velocityFromFullDataAsSeparateEvents
velocityFromFullDataViaHistory
)
;
EXPECT_NE
(
velocityFromPartialData
velocityFromFullDataViaHistory
)
;
}
TEST_F
(
APZCPanningTester
DuplicatePanEndEvents_Bug1833950
)
{
PanWithFling
(
)
;
SampleAnimationOnce
(
)
;
apzc
-
>
AssertStateIsFling
(
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_END
apzc
ScreenIntPoint
(
50
80
)
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
MODIFIER_NONE
true
)
;
}
class
APZCPanningTesterMock
:
public
APZCTreeManagerTester
{
public
:
APZCPanningTesterMock
(
)
{
CreateMockHitTester
(
)
;
}
}
;
TEST_F
(
APZCPanningTester
HoldGesture_HoldAndRelease
)
{
PanWithFling
(
)
;
SampleAnimationOnce
(
)
;
apzc
-
>
AssertStateIsFling
(
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_MAYSTART
apzc
ScreenIntPoint
(
50
80
)
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
)
;
apzc
-
>
AssertStateIsReset
(
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
apzc
-
>
AdvanceAnimations
(
mcc
-
>
GetSampleTime
(
)
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_CANCELLED
apzc
ScreenIntPoint
(
50
80
)
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
TEST_F
(
APZCPanningTester
HoldGesture_HoldAndScroll
)
{
PanWithFling
(
)
;
SampleAnimationOnce
(
)
;
apzc
-
>
AssertStateIsFling
(
)
;
float
scrollYBefore
=
apzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
;
EXPECT_GT
(
scrollYBefore
0
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_MAYSTART
apzc
ScreenIntPoint
(
50
80
)
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
)
;
apzc
-
>
AssertStateIsReset
(
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
apzc
-
>
AdvanceAnimations
(
mcc
-
>
GetSampleTime
(
)
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_START
apzc
ScreenIntPoint
(
50
80
)
ScreenPoint
(
0
2
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
apzc
-
>
AdvanceAnimations
(
mcc
-
>
GetSampleTime
(
)
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_PAN
apzc
ScreenIntPoint
(
50
80
)
ScreenPoint
(
0
10
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
apzc
-
>
AdvanceAnimations
(
mcc
-
>
GetSampleTime
(
)
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_END
apzc
ScreenIntPoint
(
50
80
)
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
MODIFIER_NONE
true
)
;
float
scrollYAfter
=
apzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
;
EXPECT_GT
(
scrollYAfter
scrollYBefore
)
;
}
TEST_F
(
APZCPanningTesterMock
HoldGesture_ActiveWheelListener
)
{
SCOPED_GFX_PREF_INT
(
"
apz
.
content_response_timeout
"
100
)
;
CreateSimpleScrollingLayer
(
)
;
ScopedLayerTreeRegistration
registration
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
apzc
=
ApzcOf
(
root
)
;
ScrollableLayerGuid
:
:
ViewID
scrollId
=
ScrollableLayerGuid
:
:
START_SCROLL_ID
;
ScreenIntPoint
panPoint
(
50
80
)
;
gfx
:
:
CompositorHitTestInfo
dispatchToContent
{
CompositorHitTestFlags
:
:
eVisibleToHitTest
CompositorHitTestFlags
:
:
eApzAwareListeners
}
;
QueueMockHitResult
(
scrollId
dispatchToContent
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_MAYSTART
manager
panPoint
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
)
;
#
ifdef
MOZ_WIDGET_GTK
mcc
-
>
AdvanceByMillis
(
5
)
;
QueueMockHitResult
(
scrollId
dispatchToContent
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_CANCELLED
manager
panPoint
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
)
;
#
endif
mcc
-
>
AdvanceByMillis
(
5
)
;
QueueMockHitResult
(
scrollId
dispatchToContent
)
;
auto
startResult
=
PanGesture
(
PanGestureInput
:
:
PANGESTURE_START
manager
panPoint
ScreenPoint
(
0
10
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
QueueMockHitResult
(
scrollId
dispatchToContent
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_PAN
manager
panPoint
ScreenPoint
(
0
10
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
QueueMockHitResult
(
scrollId
dispatchToContent
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_PAN
manager
panPoint
ScreenPoint
(
0
10
)
mcc
-
>
Time
(
)
)
;
manager
-
>
SetTargetAPZC
(
startResult
.
mInputBlockId
{
startResult
.
mTargetGuid
}
)
;
manager
-
>
ContentReceivedInputBlock
(
startResult
.
mInputBlockId
false
)
;
EXPECT_GT
(
apzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
0
)
;
QueueMockHitResult
(
scrollId
dispatchToContent
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_END
manager
panPoint
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
TEST_F
(
APZCPanningTesterMock
HoldGesture_PreventDefaultAfterLongHold
)
{
SCOPED_GFX_PREF_INT
(
"
apz
.
content_response_timeout
"
20
)
;
CreateSimpleScrollingLayer
(
)
;
ScopedLayerTreeRegistration
registration
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
apzc
=
ApzcOf
(
root
)
;
ScrollableLayerGuid
:
:
ViewID
scrollId
=
ScrollableLayerGuid
:
:
START_SCROLL_ID
;
ScreenIntPoint
panPoint
(
50
80
)
;
gfx
:
:
CompositorHitTestInfo
dispatchToContent
{
CompositorHitTestFlags
:
:
eVisibleToHitTest
CompositorHitTestFlags
:
:
eApzAwareListeners
}
;
QueueMockHitResult
(
scrollId
dispatchToContent
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_MAYSTART
manager
panPoint
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
30
)
;
#
ifdef
MOZ_WIDGET_GTK
QueueMockHitResult
(
scrollId
dispatchToContent
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_CANCELLED
manager
panPoint
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
)
;
#
endif
mcc
-
>
AdvanceByMillis
(
5
)
;
QueueMockHitResult
(
scrollId
dispatchToContent
)
;
auto
startResult
=
PanGesture
(
PanGestureInput
:
:
PANGESTURE_START
manager
panPoint
ScreenPoint
(
0
10
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
QueueMockHitResult
(
scrollId
dispatchToContent
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_PAN
manager
panPoint
ScreenPoint
(
0
10
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
QueueMockHitResult
(
scrollId
dispatchToContent
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_PAN
manager
panPoint
ScreenPoint
(
0
10
)
mcc
-
>
Time
(
)
)
;
manager
-
>
SetTargetAPZC
(
startResult
.
mInputBlockId
{
startResult
.
mTargetGuid
}
)
;
manager
-
>
ContentReceivedInputBlock
(
startResult
.
mInputBlockId
true
)
;
EXPECT_EQ
(
apzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
0
)
;
QueueMockHitResult
(
scrollId
dispatchToContent
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_END
manager
panPoint
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
TEST_F
(
APZCPanningTesterMock
HoldGesture_SubframeTargeting
)
{
const
char
*
treeShape
=
"
x
(
x
)
"
;
LayerIntRect
layerVisibleRect
[
]
=
{
LayerIntRect
(
0
0
100
100
)
LayerIntRect
(
0
0
100
100
)
}
;
CreateScrollData
(
treeShape
layerVisibleRect
)
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
CSSRect
(
0
0
100
100
)
)
;
SetScrollableFrameMetrics
(
layers
[
1
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
CSSRect
(
0
0
100
200
)
)
;
SetScrollHandoff
(
layers
[
1
]
root
)
;
ScopedLayerTreeRegistration
registration
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
auto
*
rootApzc
=
ApzcOf
(
root
)
;
auto
*
subframeApzc
=
ApzcOf
(
layers
[
1
]
)
;
rootApzc
-
>
GetFrameMetrics
(
)
.
SetIsRootContent
(
true
)
;
subframeApzc
-
>
GetScrollMetadata
(
)
.
SetOverscrollBehavior
(
OverscrollBehaviorInfo
:
:
FromStyleConstants
(
StyleOverscrollBehavior
:
:
None
StyleOverscrollBehavior
:
:
None
)
)
;
ScrollableLayerGuid
:
:
ViewID
subframeScrollId
=
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
;
ScreenIntPoint
panPoint
(
50
50
)
;
QueueMockHitResult
(
subframeScrollId
CompositorHitTestFlags
:
:
eVisibleToHitTest
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_MAYSTART
manager
panPoint
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
)
;
#
ifdef
MOZ_WIDGET_GTK
mcc
-
>
AdvanceByMillis
(
5
)
;
QueueMockHitResult
(
subframeScrollId
CompositorHitTestFlags
:
:
eVisibleToHitTest
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_CANCELLED
manager
panPoint
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
)
;
#
endif
mcc
-
>
AdvanceByMillis
(
5
)
;
QueueMockHitResult
(
subframeScrollId
CompositorHitTestFlags
:
:
eVisibleToHitTest
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_START
manager
panPoint
ScreenPoint
(
0
10
)
mcc
-
>
Time
(
)
)
;
EXPECT_GT
(
subframeApzc
-
>
GetFrameMetrics
(
)
.
GetVisualScrollOffset
(
)
.
y
0
)
;
QueueMockHitResult
(
subframeScrollId
CompositorHitTestFlags
:
:
eVisibleToHitTest
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_END
manager
panPoint
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
)
;
}
TEST_F
(
APZCPanningTester
HoldGesture_DuringAutoscrollAnimation
)
{
tm
-
>
SetCurrentMousePosition
(
ScreenPoint
(
5
5
)
)
;
apzc
-
>
StartAutoscroll
(
ScreenPoint
(
5
5
)
)
;
apzc
-
>
AssertStateIsAutoscroll
(
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_MAYSTART
apzc
ScreenIntPoint
(
50
80
)
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
)
;
apzc
-
>
AssertStateIsAutoscroll
(
)
;
}
