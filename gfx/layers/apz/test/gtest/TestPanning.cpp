#
include
"
APZCBasicTester
.
h
"
#
include
"
APZTestCommon
.
h
"
#
include
"
InputUtils
.
h
"
class
APZCPanningTester
:
public
APZCBasicTester
{
protected
:
void
DoPanTest
(
bool
aShouldTriggerScroll
bool
aShouldBeConsumed
uint32_t
aBehavior
)
{
if
(
aShouldTriggerScroll
)
{
EXPECT_CALL
(
*
mcc
RequestContentRepaint
(
_
)
)
.
Times
(
6
)
;
}
else
{
EXPECT_CALL
(
*
mcc
RequestContentRepaint
(
_
)
)
.
Times
(
0
)
;
}
int
touchStart
=
50
;
int
touchEnd
=
10
;
ParentLayerPoint
pointOut
;
AsyncTransform
viewTransformOut
;
nsTArray
<
uint32_t
>
allowedTouchBehaviors
;
allowedTouchBehaviors
.
AppendElement
(
aBehavior
)
;
PanAndCheckStatus
(
apzc
touchStart
touchEnd
aShouldBeConsumed
&
allowedTouchBehaviors
)
;
apzc
-
>
SampleContentTransformForFrame
(
&
viewTransformOut
pointOut
)
;
if
(
aShouldTriggerScroll
)
{
EXPECT_EQ
(
ParentLayerPoint
(
0
-
(
touchEnd
-
touchStart
)
)
pointOut
)
;
EXPECT_NE
(
AsyncTransform
(
)
viewTransformOut
)
;
}
else
{
EXPECT_EQ
(
ParentLayerPoint
(
)
pointOut
)
;
EXPECT_EQ
(
AsyncTransform
(
)
viewTransformOut
)
;
}
apzc
-
>
CancelAnimation
(
)
;
PanAndCheckStatus
(
apzc
touchEnd
touchStart
aShouldBeConsumed
&
allowedTouchBehaviors
)
;
apzc
-
>
SampleContentTransformForFrame
(
&
viewTransformOut
pointOut
)
;
EXPECT_EQ
(
ParentLayerPoint
(
)
pointOut
)
;
EXPECT_EQ
(
AsyncTransform
(
)
viewTransformOut
)
;
}
void
DoPanWithPreventDefaultTest
(
)
{
MakeApzcWaitForMainThread
(
)
;
int
touchStart
=
50
;
int
touchEnd
=
10
;
ParentLayerPoint
pointOut
;
AsyncTransform
viewTransformOut
;
uint64_t
blockId
=
0
;
nsTArray
<
uint32_t
>
allowedTouchBehaviors
;
allowedTouchBehaviors
.
AppendElement
(
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
VERTICAL_PAN
)
;
PanAndCheckStatus
(
apzc
touchStart
touchEnd
true
&
allowedTouchBehaviors
&
blockId
)
;
apzc
-
>
ContentReceivedInputBlock
(
blockId
true
)
;
apzc
-
>
SampleContentTransformForFrame
(
&
viewTransformOut
pointOut
)
;
EXPECT_EQ
(
ParentLayerPoint
(
)
pointOut
)
;
EXPECT_EQ
(
AsyncTransform
(
)
viewTransformOut
)
;
apzc
-
>
AssertStateIsReset
(
)
;
}
}
;
TEST_F
(
APZCPanningTester
Pan
)
{
SCOPED_GFX_PREF_BOOL
(
"
layout
.
css
.
touch_action
.
enabled
"
false
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
velocity_bias
"
0
.
0
)
;
DoPanTest
(
true
true
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
NONE
)
;
}
TEST_F
(
APZCPanningTester
PanWithTouchActionAuto
)
{
SCOPED_GFX_PREF_BOOL
(
"
layout
.
css
.
touch_action
.
enabled
"
true
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
velocity_bias
"
0
.
0
)
;
DoPanTest
(
true
true
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
HORIZONTAL_PAN
|
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
VERTICAL_PAN
)
;
}
TEST_F
(
APZCPanningTester
PanWithTouchActionNone
)
{
SCOPED_GFX_PREF_BOOL
(
"
layout
.
css
.
touch_action
.
enabled
"
true
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
velocity_bias
"
0
.
0
)
;
DoPanTest
(
false
false
0
)
;
}
TEST_F
(
APZCPanningTester
PanWithTouchActionPanX
)
{
SCOPED_GFX_PREF_BOOL
(
"
layout
.
css
.
touch_action
.
enabled
"
true
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
velocity_bias
"
0
.
0
)
;
DoPanTest
(
false
false
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
HORIZONTAL_PAN
)
;
}
TEST_F
(
APZCPanningTester
PanWithTouchActionPanY
)
{
SCOPED_GFX_PREF_BOOL
(
"
layout
.
css
.
touch_action
.
enabled
"
true
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
velocity_bias
"
0
.
0
)
;
DoPanTest
(
true
true
mozilla
:
:
layers
:
:
AllowedTouchBehavior
:
:
VERTICAL_PAN
)
;
}
TEST_F
(
APZCPanningTester
PanWithPreventDefaultAndTouchAction
)
{
SCOPED_GFX_PREF_BOOL
(
"
layout
.
css
.
touch_action
.
enabled
"
true
)
;
DoPanWithPreventDefaultTest
(
)
;
}
TEST_F
(
APZCPanningTester
PanWithPreventDefault
)
{
SCOPED_GFX_PREF_BOOL
(
"
layout
.
css
.
touch_action
.
enabled
"
false
)
;
DoPanWithPreventDefaultTest
(
)
;
}
