#
include
"
APZCTreeManagerTester
.
h
"
#
include
"
APZTestCommon
.
h
"
#
include
"
InputUtils
.
h
"
#
include
"
mozilla
/
StaticPrefs_layout
.
h
"
#
include
"
mozilla
/
StaticPrefs_mousewheel
.
h
"
class
APZCSnappingTesterMock
:
public
APZCTreeManagerTester
{
public
:
APZCSnappingTesterMock
(
)
{
CreateMockHitTester
(
)
;
}
}
;
TEST_F
(
APZCSnappingTesterMock
Bug1265510
)
{
SCOPED_GFX_PREF_BOOL
(
"
general
.
smoothScroll
"
true
)
;
const
char
*
treeShape
=
"
x
(
x
)
"
;
LayerIntRegion
layerVisibleRegion
[
]
=
{
LayerIntRect
(
0
0
100
100
)
LayerIntRect
(
0
100
100
100
)
}
;
CreateScrollData
(
treeShape
layerVisibleRegion
)
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
CSSRect
(
0
0
100
200
)
)
;
SetScrollableFrameMetrics
(
layers
[
1
]
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
CSSRect
(
0
0
100
200
)
)
;
SetScrollHandoff
(
layers
[
1
]
root
)
;
ScrollSnapInfo
snap
;
snap
.
mScrollSnapStrictnessY
=
StyleScrollSnapStrictness
:
:
Mandatory
;
snap
.
mSnapportSize
=
CSSSize
:
:
ToAppUnits
(
layerVisibleRegion
[
0
]
.
GetBounds
(
)
.
Size
(
)
*
LayerToCSSScale
(
1
.
0
)
)
;
snap
.
mSnapTargets
.
AppendElement
(
ScrollSnapInfo
:
:
SnapTarget
(
Nothing
(
)
Some
(
0
*
AppUnitsPerCSSPixel
(
)
)
CSSRect
:
:
ToAppUnits
(
CSSRect
(
0
0
10
10
)
)
StyleScrollSnapStop
:
:
Normal
ScrollSnapTargetId
{
1
}
)
)
;
snap
.
mSnapTargets
.
AppendElement
(
ScrollSnapInfo
:
:
SnapTarget
(
Nothing
(
)
Some
(
100
*
AppUnitsPerCSSPixel
(
)
)
CSSRect
:
:
ToAppUnits
(
CSSRect
(
0
100
10
10
)
)
StyleScrollSnapStop
:
:
Normal
ScrollSnapTargetId
{
2
}
)
)
;
ModifyFrameMetrics
(
root
[
&
]
(
ScrollMetadata
&
aSm
FrameMetrics
&
)
{
aSm
.
SetSnapInfo
(
ScrollSnapInfo
(
snap
)
)
;
}
)
;
UniquePtr
<
ScopedLayerTreeRegistration
>
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
TestAsyncPanZoomController
*
outer
=
ApzcOf
(
layers
[
0
]
)
;
TestAsyncPanZoomController
*
inner
=
ApzcOf
(
layers
[
1
]
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
SmoothWheel
(
manager
ScreenIntPoint
(
50
80
)
ScreenPoint
(
0
6
)
mcc
-
>
Time
(
)
)
;
while
(
outer
-
>
GetCurrentAsyncScrollOffset
(
AsyncPanZoomController
:
:
AsyncTransformConsumer
:
:
eForEventHandling
)
.
y
<
70
)
{
mcc
-
>
AdvanceByMillis
(
5
)
;
outer
-
>
AdvanceAnimations
(
mcc
-
>
GetSampleTime
(
)
)
;
}
mcc
-
>
AdvanceBy
(
TimeDuration
:
:
FromMilliseconds
(
StaticPrefs
:
:
mousewheel_transaction_timeout
(
)
+
100
)
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
+
1
)
;
SmoothWheel
(
manager
ScreenIntPoint
(
50
80
)
ScreenPoint
(
0
6
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
inner
-
>
AdvanceAnimationsUntilEnd
(
)
;
EXPECT_LT
(
0
.
0f
inner
-
>
GetCurrentAsyncScrollOffset
(
AsyncPanZoomController
:
:
AsyncTransformConsumer
:
:
eForEventHandling
)
.
y
)
;
outer
-
>
AdvanceAnimationsUntilEnd
(
)
;
EXPECT_EQ
(
100
.
0f
outer
-
>
GetCurrentAsyncScrollOffset
(
AsyncPanZoomController
:
:
AsyncTransformConsumer
:
:
eForEventHandling
)
.
y
)
;
}
TEST_F
(
APZCSnappingTesterMock
Snap_After_Pinch
)
{
const
char
*
treeShape
=
"
x
"
;
LayerIntRegion
layerVisibleRegion
[
]
=
{
LayerIntRect
(
0
0
100
100
)
}
;
CreateScrollData
(
treeShape
layerVisibleRegion
)
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
CSSRect
(
0
0
100
200
)
)
;
ScrollSnapInfo
snap
;
snap
.
mScrollSnapStrictnessY
=
StyleScrollSnapStrictness
:
:
Mandatory
;
snap
.
mSnapportSize
=
CSSSize
:
:
ToAppUnits
(
layerVisibleRegion
[
0
]
.
GetBounds
(
)
.
Size
(
)
*
LayerToCSSScale
(
1
.
0
)
)
;
snap
.
mSnapTargets
.
AppendElement
(
ScrollSnapInfo
:
:
SnapTarget
(
Nothing
(
)
Some
(
0
*
AppUnitsPerCSSPixel
(
)
)
CSSRect
:
:
ToAppUnits
(
CSSRect
(
0
0
10
10
)
)
StyleScrollSnapStop
:
:
Normal
ScrollSnapTargetId
{
1
}
)
)
;
snap
.
mSnapTargets
.
AppendElement
(
ScrollSnapInfo
:
:
SnapTarget
(
Nothing
(
)
Some
(
100
*
AppUnitsPerCSSPixel
(
)
)
CSSRect
:
:
ToAppUnits
(
CSSRect
(
0
100
10
10
)
)
StyleScrollSnapStop
:
:
Normal
ScrollSnapTargetId
{
2
}
)
)
;
ModifyFrameMetrics
(
root
[
&
]
(
ScrollMetadata
&
aSm
FrameMetrics
&
aMetrics
)
{
aSm
.
SetSnapInfo
(
ScrollSnapInfo
(
snap
)
)
;
aMetrics
.
SetIsRootContent
(
true
)
;
}
)
;
UniquePtr
<
ScopedLayerTreeRegistration
>
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
apzc
=
ApzcOf
(
root
)
;
apzc
-
>
UpdateZoomConstraints
(
ZoomConstraints
(
true
true
CSSToParentLayerScale
(
0
.
25f
)
CSSToParentLayerScale
(
4
.
0f
)
)
)
;
PinchWithPinchInput
(
apzc
ScreenIntPoint
(
50
50
)
ScreenIntPoint
(
50
50
)
1
.
2f
)
;
apzc
-
>
AssertStateIsSmoothMsdScroll
(
)
;
}
#
ifndef
MOZ_WIDGET_ANDROID
TEST_F
(
APZCSnappingTesterMock
SnapOnPanEndWithZeroVelocity
)
{
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_friction
"
0
.
002
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_stopped_threshold
"
0
.
01
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_curve_function_x1
"
0
.
0
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_curve_function_x2
"
1
.
0
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_curve_function_y1
"
0
.
0
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_curve_function_y2
"
1
.
0
)
;
SCOPED_GFX_PREF_INT
(
"
apz
.
velocity_relevance_time_ms
"
100
)
;
const
char
*
treeShape
=
"
x
"
;
LayerIntRegion
layerVisibleRegion
[
]
=
{
LayerIntRect
(
0
0
100
100
)
}
;
CreateScrollData
(
treeShape
layerVisibleRegion
)
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
CSSRect
(
0
0
100
400
)
)
;
ScrollSnapInfo
snap
;
snap
.
mScrollSnapStrictnessY
=
StyleScrollSnapStrictness
:
:
Mandatory
;
snap
.
mSnapportSize
=
CSSSize
:
:
ToAppUnits
(
layerVisibleRegion
[
0
]
.
GetBounds
(
)
.
Size
(
)
*
LayerToCSSScale
(
1
.
0
)
)
;
snap
.
mSnapTargets
.
AppendElement
(
ScrollSnapInfo
:
:
SnapTarget
(
Nothing
(
)
Some
(
30
*
AppUnitsPerCSSPixel
(
)
)
CSSRect
:
:
ToAppUnits
(
CSSRect
(
0
30
10
10
)
)
StyleScrollSnapStop
:
:
Normal
ScrollSnapTargetId
{
1
}
)
)
;
snap
.
mSnapTargets
.
AppendElement
(
ScrollSnapInfo
:
:
SnapTarget
(
Nothing
(
)
Some
(
100
*
AppUnitsPerCSSPixel
(
)
)
CSSRect
:
:
ToAppUnits
(
CSSRect
(
0
100
10
10
)
)
StyleScrollSnapStop
:
:
Normal
ScrollSnapTargetId
{
2
}
)
)
;
ModifyFrameMetrics
(
root
[
&
]
(
ScrollMetadata
&
aSm
FrameMetrics
&
aMetrics
)
{
aSm
.
SetSnapInfo
(
ScrollSnapInfo
(
snap
)
)
;
}
)
;
UniquePtr
<
ScopedLayerTreeRegistration
>
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
apzc
=
ApzcOf
(
root
)
;
const
ScreenIntPoint
position
=
ScreenIntPoint
(
50
30
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_START
manager
position
ScreenPoint
(
0
10
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
apzc
-
>
AdvanceAnimations
(
mcc
-
>
GetSampleTime
(
)
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_PAN
manager
position
ScreenPoint
(
0
40
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
apzc
-
>
AdvanceAnimations
(
mcc
-
>
GetSampleTime
(
)
)
;
EXPECT_EQ
(
apzc
-
>
GetVelocityVector
(
)
.
y
0
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_END
manager
position
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
)
;
apzc
-
>
AssertStateIsSmoothMsdScroll
(
)
;
apzc
-
>
AdvanceAnimationsUntilEnd
(
)
;
EXPECT_EQ
(
apzc
-
>
GetCurrentAsyncScrollOffset
(
AsyncPanZoomController
:
:
eForEventHandling
)
.
y
30
)
;
}
TEST_F
(
APZCSnappingTesterMock
SnapOnPanEndWithPositiveVelocity
)
{
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_friction
"
0
.
002
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_stopped_threshold
"
0
.
01
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_curve_function_x1
"
0
.
0
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_curve_function_x2
"
1
.
0
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_curve_function_y1
"
0
.
0
)
;
SCOPED_GFX_PREF_FLOAT
(
"
apz
.
fling_curve_function_y2
"
1
.
0
)
;
SCOPED_GFX_PREF_INT
(
"
apz
.
velocity_relevance_time_ms
"
100
)
;
const
char
*
treeShape
=
"
x
"
;
LayerIntRegion
layerVisibleRegion
[
]
=
{
LayerIntRect
(
0
0
100
100
)
}
;
CreateScrollData
(
treeShape
layerVisibleRegion
)
;
SetScrollableFrameMetrics
(
root
ScrollableLayerGuid
:
:
START_SCROLL_ID
CSSRect
(
0
0
100
400
)
)
;
ScrollSnapInfo
snap
;
snap
.
mScrollSnapStrictnessY
=
StyleScrollSnapStrictness
:
:
Mandatory
;
snap
.
mSnapportSize
=
CSSSize
:
:
ToAppUnits
(
layerVisibleRegion
[
0
]
.
GetBounds
(
)
.
Size
(
)
*
LayerToCSSScale
(
1
.
0
)
)
;
snap
.
mSnapTargets
.
AppendElement
(
ScrollSnapInfo
:
:
SnapTarget
(
Nothing
(
)
Some
(
30
*
AppUnitsPerCSSPixel
(
)
)
CSSRect
:
:
ToAppUnits
(
CSSRect
(
0
30
10
10
)
)
StyleScrollSnapStop
:
:
Normal
ScrollSnapTargetId
{
1
}
)
)
;
snap
.
mSnapTargets
.
AppendElement
(
ScrollSnapInfo
:
:
SnapTarget
(
Nothing
(
)
Some
(
100
*
AppUnitsPerCSSPixel
(
)
)
CSSRect
:
:
ToAppUnits
(
CSSRect
(
0
100
10
10
)
)
StyleScrollSnapStop
:
:
Normal
ScrollSnapTargetId
{
2
}
)
)
;
ModifyFrameMetrics
(
root
[
&
]
(
ScrollMetadata
&
aSm
FrameMetrics
&
aMetrics
)
{
aSm
.
SetSnapInfo
(
ScrollSnapInfo
(
snap
)
)
;
}
)
;
UniquePtr
<
ScopedLayerTreeRegistration
>
registration
=
MakeUnique
<
ScopedLayerTreeRegistration
>
(
LayersId
{
0
}
mcc
)
;
UpdateHitTestingTree
(
)
;
RefPtr
<
TestAsyncPanZoomController
>
apzc
=
ApzcOf
(
root
)
;
const
ScreenIntPoint
position
=
ScreenIntPoint
(
50
30
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_START
manager
position
ScreenPoint
(
0
10
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
apzc
-
>
AdvanceAnimations
(
mcc
-
>
GetSampleTime
(
)
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_PAN
manager
position
ScreenPoint
(
0
35
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
apzc
-
>
AdvanceAnimations
(
mcc
-
>
GetSampleTime
(
)
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_PAN
manager
position
ScreenPoint
(
0
20
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
apzc
-
>
AdvanceAnimations
(
mcc
-
>
GetSampleTime
(
)
)
;
EXPECT_GT
(
apzc
-
>
GetVelocityVector
(
)
.
y
0
)
;
QueueMockHitResult
(
ScrollableLayerGuid
:
:
START_SCROLL_ID
)
;
PanGesture
(
PanGestureInput
:
:
PANGESTURE_END
manager
position
ScreenPoint
(
0
0
)
mcc
-
>
Time
(
)
)
;
mcc
-
>
AdvanceByMillis
(
5
)
;
apzc
-
>
AssertStateIsSmoothMsdScroll
(
)
;
apzc
-
>
AdvanceAnimationsUntilEnd
(
)
;
EXPECT_EQ
(
apzc
-
>
GetCurrentAsyncScrollOffset
(
AsyncPanZoomController
:
:
eForEventHandling
)
.
y
100
)
;
}
#
endif
