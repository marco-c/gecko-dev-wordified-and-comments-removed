var
EXPORTED_SYMBOLS
=
[
"
FissionTestHelperChild
"
]
;
class
FissionTestHelperChild
extends
JSWindowActorChild
{
constructor
(
)
{
super
(
)
;
this
.
_msgCounter
=
0
;
this
.
_oopifResponsePromiseResolvers
=
[
]
;
}
cw
(
)
{
return
this
.
contentWindow
.
wrappedJSObject
;
}
initialize
(
)
{
let
cw
=
this
.
cw
(
)
;
Cu
.
exportFunction
(
(
cond
msg
)
=
>
this
.
sendAsyncMessage
(
"
ok
"
{
cond
msg
}
)
cw
{
defineAs
:
"
ok
"
}
)
;
Cu
.
exportFunction
(
(
a
b
msg
)
=
>
this
.
sendAsyncMessage
(
"
is
"
{
a
b
msg
}
)
cw
{
defineAs
:
"
is
"
}
)
;
let
FissionTestHelper
=
Cu
.
createObjectIn
(
cw
{
defineAs
:
"
FissionTestHelper
"
}
)
;
FissionTestHelper
.
startTestPromise
=
new
cw
.
Promise
(
Cu
.
exportFunction
(
resolve
=
>
{
this
.
_startTestPromiseResolver
=
resolve
;
}
cw
)
)
;
Cu
.
exportFunction
(
this
.
subtestDone
.
bind
(
this
)
FissionTestHelper
{
defineAs
:
"
subtestDone
"
}
)
;
Cu
.
exportFunction
(
this
.
sendToOopif
.
bind
(
this
)
FissionTestHelper
{
defineAs
:
"
sendToOopif
"
}
)
;
Cu
.
exportFunction
(
this
.
fireEventInEmbedder
.
bind
(
this
)
FissionTestHelper
{
defineAs
:
"
fireEventInEmbedder
"
}
)
;
}
subtestDone
(
)
{
let
cw
=
this
.
cw
(
)
;
if
(
cw
.
ApzCleanup
)
{
cw
.
ApzCleanup
.
execute
(
)
;
}
this
.
sendAsyncMessage
(
"
Test
:
Complete
"
{
}
)
;
}
sendToOopif
(
iframeElement
stringToEval
)
{
let
browsingContextId
=
iframeElement
.
browsingContext
.
id
;
let
msgId
=
+
+
this
.
_msgCounter
;
let
cw
=
this
.
cw
(
)
;
let
responsePromise
=
new
cw
.
Promise
(
Cu
.
exportFunction
(
resolve
=
>
{
this
.
_oopifResponsePromiseResolvers
[
msgId
]
=
resolve
;
}
cw
)
)
;
this
.
sendAsyncMessage
(
"
EmbedderToOopif
"
{
browsingContextId
msgId
stringToEval
}
)
;
return
responsePromise
;
}
fireEventInEmbedder
(
eventType
data
)
{
this
.
sendAsyncMessage
(
"
OopifToEmbedder
"
{
eventType
data
}
)
;
}
handleEvent
(
evt
)
{
switch
(
evt
.
type
)
{
case
"
DOMWindowCreated
"
:
this
.
contentWindow
.
addEventListener
(
"
FissionTestHelper
:
Init
"
this
{
wantUntrusted
:
true
}
)
;
break
;
case
"
FissionTestHelper
:
Init
"
:
this
.
initialize
(
)
;
break
;
}
}
receiveMessage
(
msg
)
{
switch
(
msg
.
name
)
{
case
"
Test
:
Start
"
:
this
.
_startTestPromiseResolver
(
)
;
delete
this
.
_startTestPromiseResolver
;
break
;
case
"
FromEmbedder
"
:
let
evalResult
=
this
.
contentWindow
.
eval
(
msg
.
data
.
stringToEval
)
;
this
.
sendAsyncMessage
(
"
OopifToEmbedder
"
{
msgId
:
msg
.
data
.
msgId
evalResult
}
)
;
break
;
case
"
FromOopif
"
:
if
(
typeof
msg
.
data
.
msgId
=
=
"
number
"
)
{
if
(
!
(
msg
.
data
.
msgId
in
this
.
_oopifResponsePromiseResolvers
)
)
{
dump
(
"
Error
:
FromOopif
got
a
message
with
unknown
numeric
msgId
in
"
+
this
.
contentWindow
.
location
.
href
+
"
\
n
"
)
;
}
this
.
_oopifResponsePromiseResolvers
[
msg
.
data
.
msgId
]
(
msg
.
data
.
evalResult
)
;
delete
this
.
_oopifResponsePromiseResolvers
[
msg
.
data
.
msgId
]
;
}
else
if
(
typeof
msg
.
data
.
eventType
=
=
"
string
"
)
{
let
cw
=
this
.
cw
(
)
;
let
event
=
new
cw
.
Event
(
msg
.
data
.
eventType
)
;
event
.
data
=
Cu
.
cloneInto
(
msg
.
data
.
data
cw
)
;
this
.
contentWindow
.
dispatchEvent
(
event
)
;
}
else
{
dump
(
"
Warning
:
Unrecognized
FromOopif
message
received
in
"
+
this
.
contentWindow
.
location
.
href
+
"
\
n
"
)
;
}
break
;
}
}
}
