function
getPlatform
(
)
{
if
(
navigator
.
platform
.
indexOf
(
"
Win
"
)
=
=
0
)
{
return
"
windows
"
;
}
if
(
navigator
.
platform
.
indexOf
(
"
Mac
"
)
=
=
0
)
{
return
"
mac
"
;
}
if
(
navigator
.
appVersion
.
includes
(
"
Android
"
)
)
{
return
"
android
"
}
if
(
navigator
.
platform
.
indexOf
(
"
Linux
"
)
=
=
0
)
{
return
"
linux
"
;
}
return
"
unknown
"
;
}
function
nativeVerticalWheelEventMsg
(
)
{
switch
(
getPlatform
(
)
)
{
case
"
windows
"
:
return
0x020A
;
case
"
mac
"
:
return
0
;
case
"
linux
"
:
return
4
;
}
throw
"
Native
wheel
events
not
supported
on
platform
"
+
getPlatform
(
)
;
}
function
nativeHorizontalWheelEventMsg
(
)
{
switch
(
getPlatform
(
)
)
{
case
"
windows
"
:
return
0x020E
;
case
"
mac
"
:
return
0
;
case
"
linux
"
:
return
4
;
}
throw
"
Native
wheel
events
not
supported
on
platform
"
+
getPlatform
(
)
;
}
function
nativeScrollUnits
(
aElement
aDimen
)
{
switch
(
getPlatform
(
)
)
{
case
"
linux
"
:
{
var
targetWindow
=
aElement
.
ownerDocument
.
defaultView
;
var
lineHeight
=
targetWindow
.
getComputedStyle
(
aElement
)
[
"
font
-
size
"
]
;
return
aDimen
/
(
parseInt
(
lineHeight
)
*
3
)
;
}
}
return
aDimen
;
}
function
nativeMouseDownEventMsg
(
)
{
switch
(
getPlatform
(
)
)
{
case
"
windows
"
:
return
2
;
case
"
mac
"
:
return
1
;
case
"
linux
"
:
return
4
;
case
"
android
"
:
return
5
;
}
throw
"
Native
mouse
-
down
events
not
supported
on
platform
"
+
getPlatform
(
)
;
}
function
nativeMouseMoveEventMsg
(
)
{
switch
(
getPlatform
(
)
)
{
case
"
windows
"
:
return
1
;
case
"
mac
"
:
return
5
;
case
"
linux
"
:
return
3
;
case
"
android
"
:
return
7
;
}
throw
"
Native
mouse
-
move
events
not
supported
on
platform
"
+
getPlatform
(
)
;
}
function
nativeMouseUpEventMsg
(
)
{
switch
(
getPlatform
(
)
)
{
case
"
windows
"
:
return
4
;
case
"
mac
"
:
return
2
;
case
"
linux
"
:
return
7
;
case
"
android
"
:
return
6
;
}
throw
"
Native
mouse
-
up
events
not
supported
on
platform
"
+
getPlatform
(
)
;
}
function
coordinatesRelativeToScreen
(
aX
aY
aElement
)
{
var
targetWindow
=
aElement
.
ownerDocument
.
defaultView
;
var
scale
=
targetWindow
.
devicePixelRatio
;
var
rect
=
aElement
.
getBoundingClientRect
(
)
;
return
{
x
:
(
targetWindow
.
mozInnerScreenX
+
rect
.
left
+
aX
)
*
scale
y
:
(
targetWindow
.
mozInnerScreenY
+
rect
.
top
+
aY
)
*
scale
}
;
}
function
rectRelativeToScreen
(
aElement
)
{
var
targetWindow
=
aElement
.
ownerDocument
.
defaultView
;
var
scale
=
targetWindow
.
devicePixelRatio
;
var
rect
=
aElement
.
getBoundingClientRect
(
)
;
return
{
x
:
(
targetWindow
.
mozInnerScreenX
+
rect
.
left
)
*
scale
y
:
(
targetWindow
.
mozInnerScreenY
+
rect
.
top
)
*
scale
w
:
(
rect
.
width
*
scale
)
h
:
(
rect
.
height
*
scale
)
}
;
}
function
synthesizeNativeWheel
(
aElement
aX
aY
aDeltaX
aDeltaY
aObserver
)
{
var
pt
=
coordinatesRelativeToScreen
(
aX
aY
aElement
)
;
if
(
aDeltaX
&
&
aDeltaY
)
{
throw
"
Simultaneous
wheeling
of
horizontal
and
vertical
is
not
supported
on
all
platforms
.
"
;
}
aDeltaX
=
nativeScrollUnits
(
aElement
aDeltaX
)
;
aDeltaY
=
nativeScrollUnits
(
aElement
aDeltaY
)
;
var
msg
=
aDeltaX
?
nativeHorizontalWheelEventMsg
(
)
:
nativeVerticalWheelEventMsg
(
)
;
var
utils
=
SpecialPowers
.
getDOMWindowUtils
(
aElement
.
ownerDocument
.
defaultView
)
;
utils
.
sendNativeMouseScrollEvent
(
pt
.
x
pt
.
y
msg
aDeltaX
aDeltaY
0
0
0
aElement
aObserver
)
;
return
true
;
}
function
synthesizeNativeWheelAndWaitForObserver
(
aElement
aX
aY
aDeltaX
aDeltaY
aCallback
)
{
var
observer
=
{
observe
:
function
(
aSubject
aTopic
aData
)
{
if
(
aCallback
&
&
aTopic
=
=
"
mousescrollevent
"
)
{
setTimeout
(
aCallback
0
)
;
}
}
}
;
return
synthesizeNativeWheel
(
aElement
aX
aY
aDeltaX
aDeltaY
observer
)
;
}
function
synthesizeNativeWheelAndWaitForWheelEvent
(
aElement
aX
aY
aDeltaX
aDeltaY
aCallback
)
{
var
targetWindow
=
aElement
.
ownerDocument
.
defaultView
;
targetWindow
.
addEventListener
(
"
wheel
"
function
(
e
)
{
setTimeout
(
aCallback
0
)
;
}
{
once
:
true
}
)
;
return
synthesizeNativeWheel
(
aElement
aX
aY
aDeltaX
aDeltaY
)
;
}
function
synthesizeNativeWheelAndWaitForScrollEvent
(
aElement
aX
aY
aDeltaX
aDeltaY
aCallback
)
{
var
targetWindow
=
aElement
.
ownerDocument
.
defaultView
;
targetWindow
.
addEventListener
(
"
scroll
"
function
(
)
{
setTimeout
(
aCallback
0
)
;
}
{
capture
:
true
once
:
true
}
)
;
return
synthesizeNativeWheel
(
aElement
aX
aY
aDeltaX
aDeltaY
)
;
}
function
synthesizeNativeMouseMove
(
aElement
aX
aY
)
{
var
pt
=
coordinatesRelativeToScreen
(
aX
aY
aElement
)
;
var
utils
=
SpecialPowers
.
getDOMWindowUtils
(
aElement
.
ownerDocument
.
defaultView
)
;
utils
.
sendNativeMouseEvent
(
pt
.
x
pt
.
y
nativeMouseMoveEventMsg
(
)
0
aElement
)
;
return
true
;
}
function
synthesizeNativeMouseMoveAndWaitForMoveEvent
(
aElement
aX
aY
aCallback
)
{
var
targetWindow
=
aElement
.
ownerDocument
.
defaultView
;
targetWindow
.
addEventListener
(
"
mousemove
"
function
(
e
)
{
setTimeout
(
aCallback
0
)
;
}
{
once
:
true
}
)
;
return
synthesizeNativeMouseMove
(
aElement
aX
aY
)
;
}
function
synthesizeNativeTouch
(
aElement
aX
aY
aType
aObserver
=
null
aTouchId
=
0
)
{
var
pt
=
coordinatesRelativeToScreen
(
aX
aY
aElement
)
;
var
utils
=
SpecialPowers
.
getDOMWindowUtils
(
aElement
.
ownerDocument
.
defaultView
)
;
utils
.
sendNativeTouchPoint
(
aTouchId
aType
pt
.
x
pt
.
y
1
90
aObserver
)
;
return
true
;
}
function
*
synthesizeNativeTouchSequences
(
aElement
aPositions
aObserver
=
null
aTouchIds
=
[
0
]
)
{
var
lastNonNullValue
=
-
1
;
var
yields
=
0
;
for
(
var
i
=
0
;
i
<
aPositions
.
length
;
i
+
+
)
{
if
(
aPositions
[
i
]
=
=
null
)
{
yields
+
+
;
continue
;
}
if
(
aPositions
[
i
]
.
length
!
=
aTouchIds
.
length
)
{
throw
"
aPositions
[
"
+
i
+
"
]
did
not
have
the
expected
number
of
positions
;
expected
"
+
aTouchIds
.
length
+
"
touch
points
but
found
"
+
aPositions
[
i
]
.
length
;
}
for
(
var
j
=
0
;
j
<
aTouchIds
.
length
;
j
+
+
)
{
if
(
aPositions
[
i
]
[
j
]
!
=
null
)
{
lastNonNullValue
=
(
(
i
-
yields
)
*
aTouchIds
.
length
)
+
j
;
}
}
}
if
(
lastNonNullValue
<
0
)
{
throw
"
All
values
in
positions
array
were
null
!
"
;
}
var
allNullRow
=
new
Array
(
aTouchIds
.
length
)
;
allNullRow
.
fill
(
null
)
;
aPositions
.
push
(
allNullRow
)
;
var
lastSynthesizeCall
=
lastNonNullValue
+
aTouchIds
.
length
;
var
currentPositions
=
new
Array
(
aTouchIds
.
length
)
;
currentPositions
.
fill
(
null
)
;
yields
=
0
;
for
(
var
i
=
0
;
i
<
aPositions
.
length
;
i
+
+
)
{
if
(
aPositions
[
i
]
=
=
null
)
{
yields
+
+
;
yield
i
;
continue
;
}
for
(
var
j
=
0
;
j
<
aTouchIds
.
length
;
j
+
+
)
{
if
(
aPositions
[
i
]
[
j
]
=
=
null
)
{
if
(
currentPositions
[
j
]
=
=
null
)
{
}
else
{
var
thisIndex
=
(
(
i
-
yields
)
*
aTouchIds
.
length
)
+
j
;
var
observer
=
(
lastSynthesizeCall
=
=
thisIndex
)
?
aObserver
:
null
;
synthesizeNativeTouch
(
aElement
currentPositions
[
j
]
.
x
currentPositions
[
j
]
.
y
SpecialPowers
.
DOMWindowUtils
.
TOUCH_REMOVE
observer
aTouchIds
[
j
]
)
;
currentPositions
[
j
]
=
null
;
}
}
else
{
synthesizeNativeTouch
(
aElement
aPositions
[
i
]
[
j
]
.
x
aPositions
[
i
]
[
j
]
.
y
SpecialPowers
.
DOMWindowUtils
.
TOUCH_CONTACT
null
aTouchIds
[
j
]
)
;
currentPositions
[
j
]
=
aPositions
[
i
]
[
j
]
;
}
}
}
return
true
;
}
function
synthesizeNativeTouchDrag
(
aElement
aX
aY
aDeltaX
aDeltaY
aObserver
=
null
aTouchId
=
0
)
{
var
steps
=
Math
.
max
(
Math
.
abs
(
aDeltaX
)
Math
.
abs
(
aDeltaY
)
)
;
var
positions
=
new
Array
(
)
;
positions
.
push
(
[
{
x
:
aX
y
:
aY
}
]
)
;
for
(
var
i
=
1
;
i
<
steps
;
i
+
+
)
{
var
dx
=
i
*
(
aDeltaX
/
steps
)
;
var
dy
=
i
*
(
aDeltaY
/
steps
)
;
var
pos
=
{
x
:
aX
+
dx
y
:
aY
+
dy
}
;
positions
.
push
(
[
pos
]
)
;
}
positions
.
push
(
[
{
x
:
aX
+
aDeltaX
y
:
aY
+
aDeltaY
}
]
)
;
var
continuation
=
synthesizeNativeTouchSequences
(
aElement
positions
aObserver
[
aTouchId
]
)
;
var
yielded
=
continuation
.
next
(
)
;
while
(
!
yielded
.
done
)
{
yielded
=
continuation
.
next
(
)
;
}
return
yielded
.
value
;
}
function
synthesizeNativeTap
(
aElement
aX
aY
aObserver
=
null
)
{
var
pt
=
coordinatesRelativeToScreen
(
aX
aY
aElement
)
;
var
utils
=
SpecialPowers
.
getDOMWindowUtils
(
aElement
.
ownerDocument
.
defaultView
)
;
utils
.
sendNativeTouchTap
(
pt
.
x
pt
.
y
false
aObserver
)
;
return
true
;
}
function
synthesizeNativeMouseEvent
(
aElement
aX
aY
aType
aObserver
=
null
)
{
var
pt
=
coordinatesRelativeToScreen
(
aX
aY
aElement
)
;
var
utils
=
SpecialPowers
.
getDOMWindowUtils
(
aElement
.
ownerDocument
.
defaultView
)
;
utils
.
sendNativeMouseEvent
(
pt
.
x
pt
.
y
aType
0
aElement
aObserver
)
;
return
true
;
}
function
synthesizeNativeClick
(
aElement
aX
aY
aObserver
=
null
)
{
var
pt
=
coordinatesRelativeToScreen
(
aX
aY
aElement
)
;
var
utils
=
SpecialPowers
.
getDOMWindowUtils
(
aElement
.
ownerDocument
.
defaultView
)
;
utils
.
sendNativeMouseEvent
(
pt
.
x
pt
.
y
nativeMouseDownEventMsg
(
)
0
aElement
function
(
)
{
utils
.
sendNativeMouseEvent
(
pt
.
x
pt
.
y
nativeMouseUpEventMsg
(
)
0
aElement
aObserver
)
;
}
)
;
return
true
;
}
function
moveMouseAndScrollWheelOver
(
element
dx
dy
testDriver
waitForScroll
=
true
)
{
return
synthesizeNativeMouseMoveAndWaitForMoveEvent
(
element
dx
dy
function
(
)
{
if
(
waitForScroll
)
{
synthesizeNativeWheelAndWaitForScrollEvent
(
element
dx
dy
0
-
10
testDriver
)
;
}
else
{
synthesizeNativeWheelAndWaitForWheelEvent
(
element
dx
dy
0
-
10
testDriver
)
;
}
}
)
;
}
function
*
dragVerticalScrollbar
(
element
testDriver
distance
=
20
increment
=
5
)
{
var
boundingClientRect
=
element
.
getBoundingClientRect
(
)
;
var
verticalScrollbarWidth
=
boundingClientRect
.
width
-
element
.
clientWidth
;
if
(
verticalScrollbarWidth
=
=
0
)
{
return
false
;
}
var
upArrowHeight
=
verticalScrollbarWidth
;
var
mouseX
=
element
.
clientWidth
+
(
verticalScrollbarWidth
/
2
)
;
var
mouseY
=
upArrowHeight
+
5
;
dump
(
"
Starting
drag
at
"
+
mouseX
+
"
"
+
mouseY
+
"
from
top
-
left
of
#
"
+
element
.
id
+
"
\
n
"
)
;
yield
synthesizeNativeMouseEvent
(
element
mouseX
mouseY
nativeMouseMoveEventMsg
(
)
testDriver
)
;
yield
synthesizeNativeMouseEvent
(
element
mouseX
mouseY
nativeMouseDownEventMsg
(
)
testDriver
)
;
for
(
var
y
=
increment
;
y
<
distance
;
y
+
=
increment
)
{
yield
synthesizeNativeMouseEvent
(
element
mouseX
mouseY
+
y
nativeMouseMoveEventMsg
(
)
testDriver
)
;
}
yield
synthesizeNativeMouseEvent
(
element
mouseX
mouseY
+
distance
nativeMouseMoveEventMsg
(
)
testDriver
)
;
yield
synthesizeNativeMouseEvent
(
element
mouseX
mouseY
+
distance
nativeMouseUpEventMsg
(
)
testDriver
)
;
return
true
;
}
