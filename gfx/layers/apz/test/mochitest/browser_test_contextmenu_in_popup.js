"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
paint_listener
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
new
URL
(
"
apz_test_utils
.
js
"
gTestPath
)
.
href
this
)
;
Services
.
scriptloader
.
loadSubScript
(
new
URL
(
"
apz_test_native_event_utils
.
js
"
gTestPath
)
.
href
this
)
;
Services
.
scriptloader
.
loadSubScript
(
new
URL
(
"
helper_browser_test_utils
.
js
"
gTestPath
)
.
href
this
)
;
add_task
(
(
)
=
>
{
registerCleanupFunction
(
(
)
=
>
{
delete
window
.
waitForAllPaintsFlushed
;
delete
window
.
waitForAllPaints
;
delete
window
.
promiseAllPaintsDone
;
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
apz
.
popups
.
enabled
"
true
]
[
"
apz
.
popups_without_remote
.
enabled
"
true
]
[
"
apz
.
max_tap_time
"
10000
]
[
"
ui
.
click_hold_context_menus
.
delay
"
0
]
]
}
)
;
const
navBar
=
document
.
getElementById
(
"
nav
-
bar
"
)
;
const
anchor
=
document
.
createXULElement
(
"
toolbarbutton
"
)
;
anchor
.
classList
.
add
(
"
toolbarbutton
-
1
"
"
chromeclass
-
toolbar
-
additional
"
)
;
navBar
.
appendChild
(
anchor
)
;
const
panel
=
document
.
createXULElement
(
"
panel
"
)
;
panel
.
setAttribute
(
"
noautohide
"
true
)
;
navBar
.
appendChild
(
panel
)
;
const
container
=
document
.
createElement
(
"
div
"
)
;
container
.
style
=
"
width
:
100px
;
height
:
100px
;
"
;
panel
.
appendChild
(
container
)
;
const
contextmenuPromise
=
new
Promise
(
resolve
=
>
{
window
.
addEventListener
(
"
contextmenu
"
e
=
>
{
e
.
preventDefault
(
)
;
resolve
(
e
)
;
}
)
;
}
)
;
registerCleanupFunction
(
(
)
=
>
{
panel
.
remove
(
)
;
anchor
.
remove
(
)
;
}
)
;
const
popupshownPromise
=
promiseOneEvent
(
panel
"
popupshown
"
)
;
panel
.
openPopup
(
anchor
)
;
await
popupshownPromise
;
const
panelRect
=
panel
.
getBoundingClientRect
(
)
;
await
promiseApzFlushedRepaints
(
panel
)
;
await
synthesizeNativeTouch
(
panel
10
10
SpecialPowers
.
DOMWindowUtils
.
TOUCH_CONTACT
)
;
const
isWindows
=
getPlatform
(
)
=
=
"
windows
"
;
let
contextmenuEvent
;
if
(
isWindows
)
{
await
promiseFrame
(
)
;
await
synthesizeNativeTouch
(
panel
10
10
SpecialPowers
.
DOMWindowUtils
.
TOUCH_REMOVE
)
;
contextmenuEvent
=
await
contextmenuPromise
;
}
else
{
contextmenuEvent
=
await
contextmenuPromise
;
await
synthesizeNativeTouch
(
panel
10
10
SpecialPowers
.
DOMWindowUtils
.
TOUCH_REMOVE
)
;
}
ok
(
contextmenuEvent
.
clientX
>
=
panelRect
.
x
{
contextmenuEvent
.
clientX
}
>
=
{
panelRect
.
x
}
)
;
ok
(
contextmenuEvent
.
clientX
<
=
panelRect
.
x
+
panelRect
.
width
{
contextmenuEvent
.
clientX
}
<
=
{
panelRect
.
x
}
+
{
panelRect
.
width
}
)
;
ok
(
contextmenuEvent
.
clientY
>
=
panelRect
.
y
{
contextmenuEvent
.
clientY
}
>
=
{
panelRect
.
y
}
)
;
ok
(
contextmenuEvent
.
clientY
<
=
panelRect
.
y
+
panelRect
.
height
{
contextmenuEvent
.
clientY
}
<
=
{
panelRect
.
y
}
+
{
panelRect
.
height
}
)
;
await
hideSelectPopup
(
)
;
}
)
;
