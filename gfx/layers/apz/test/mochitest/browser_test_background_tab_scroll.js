add_task
(
async
function
test_main
(
)
{
let
url
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
helper_background_tab_scroll
.
html
#
scrolltarget
"
;
let
backgroundTab
=
BrowserTestUtils
.
addTab
(
gBrowser
url
)
;
let
browser
=
backgroundTab
.
linkedBrowser
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
url
)
;
dump
(
"
Done
loading
background
tab
\
n
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
backgroundTab
)
;
dump
(
"
Switched
background
tab
to
foreground
\
n
"
)
;
let
scrollPos
=
await
ContentTask
.
spawn
(
browser
null
function
(
)
{
return
content
.
window
.
scrollY
;
}
)
;
is
(
scrollPos
5000
"
Expected
background
tab
to
be
at
scroll
pos
5000
"
)
;
let
contentScrollFunction
=
async
function
(
)
{
return
new
Promise
(
resolve
=
>
{
content
.
window
.
wrappedJSObject
.
synthesizeNativeWheelAndWaitForWheelEvent
(
content
.
window
100
100
0
200
(
)
=
>
{
let
utils
=
content
.
window
.
SpecialPowers
.
getDOMWindowUtils
(
content
.
window
)
;
for
(
var
i
=
0
;
i
<
10
;
i
+
+
)
{
utils
.
advanceTimeAndRefresh
(
16
)
;
}
utils
.
restoreNormalRefresh
(
)
;
content
.
window
.
wrappedJSObject
.
flushApzRepaints
(
(
)
=
>
{
resolve
(
content
.
window
.
scrollY
)
;
}
content
.
window
)
;
}
)
;
}
)
;
}
;
scrollPos
=
await
ContentTask
.
spawn
(
browser
null
contentScrollFunction
)
;
ok
(
scrollPos
<
5000
Expected
background
tab
to
have
scrolled
up
is
at
{
scrollPos
}
)
;
let
tabClosed
=
BrowserTestUtils
.
waitForTabClosing
(
backgroundTab
)
;
BrowserTestUtils
.
removeTab
(
backgroundTab
)
;
await
tabClosed
;
}
)
;
