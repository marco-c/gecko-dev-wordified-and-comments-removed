function
fission_subtest_init
(
)
{
SimpleTest
.
waitForExplicitFinish
(
)
;
window
.
dispatchEvent
(
new
Event
(
"
FissionTestHelper
:
Init
"
)
)
;
}
function
loadOOPIFrame
(
iframeElementId
iframePage
)
{
return
async
function
(
)
{
if
(
window
.
location
.
href
.
startsWith
(
"
https
:
/
/
example
.
com
/
"
)
)
{
dump
(
WARNING
:
Calling
loadOOPIFrame
from
{
window
.
location
.
href
}
so
the
iframe
may
not
be
OOP
\
n
)
;
ok
(
false
"
Current
origin
is
not
example
.
com
:
443
"
)
;
}
let
url
=
"
https
:
/
/
example
.
com
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
"
+
iframePage
;
let
loadPromise
=
promiseOneEvent
(
window
"
OOPIF
:
Load
"
function
(
e
)
{
return
typeof
e
.
data
.
content
=
=
"
string
"
&
&
e
.
data
.
content
=
=
url
;
}
)
;
let
elem
=
document
.
getElementById
(
iframeElementId
)
;
elem
.
src
=
url
;
await
loadPromise
;
}
;
}
async
function
fissionHitTest
(
point
iframeElement
)
{
let
get_iframe_compositor_test_data
=
function
(
)
{
let
utils
=
SpecialPowers
.
getDOMWindowUtils
(
window
)
;
return
JSON
.
stringify
(
utils
.
getCompositorAPZTestData
(
)
)
;
}
;
let
utils
=
SpecialPowers
.
getDOMWindowUtils
(
window
)
;
let
oldParentTestData
=
utils
.
getCompositorAPZTestData
(
)
;
let
oldIframeTestData
=
JSON
.
parse
(
await
FissionTestHelper
.
sendToOopif
(
iframeElement
(
{
get_iframe_compositor_test_data
}
)
(
)
)
)
;
dump
(
Hit
-
testing
point
(
{
point
.
x
}
{
point
.
y
}
)
in
fission
context
\
n
)
;
utils
.
sendMouseEvent
(
"
MozMouseHittest
"
point
.
x
point
.
y
0
0
0
true
0
0
true
true
)
;
let
newParentTestData
=
utils
.
getCompositorAPZTestData
(
)
;
let
newIframeTestData
=
JSON
.
parse
(
await
FissionTestHelper
.
sendToOopif
(
iframeElement
(
{
get_iframe_compositor_test_data
}
)
(
)
)
)
;
let
hitResultCount
=
function
(
testData
)
{
return
Object
.
keys
(
testData
.
hitResults
)
.
length
;
}
;
let
hitIframe
=
hitResultCount
(
newIframeTestData
)
>
hitResultCount
(
oldIframeTestData
)
;
let
hitParent
=
hitResultCount
(
newParentTestData
)
>
hitResultCount
(
oldParentTestData
)
;
let
lastHitResult
=
function
(
testData
)
{
let
lastHit
=
testData
.
hitResults
[
Object
.
keys
(
testData
.
hitResults
)
.
length
-
1
]
;
return
{
hitInfo
:
lastHit
.
hitResult
scrollId
:
lastHit
.
scrollId
layersId
:
lastHit
.
layersId
}
;
}
;
if
(
hitIframe
&
&
hitParent
)
{
throw
new
Error
(
"
Both
iframe
and
parent
got
hit
-
results
that
is
unexpected
!
"
)
;
}
else
if
(
hitIframe
)
{
return
lastHitResult
(
newIframeTestData
)
;
}
else
if
(
hitParent
)
{
return
lastHitResult
(
newParentTestData
)
;
}
else
{
throw
new
Error
(
"
Neither
iframe
nor
parent
got
the
hit
-
result
that
is
unexpected
!
"
)
;
}
}
async
function
hitTestOOPIF
(
point
iframeElement
)
{
let
getIframeCompositorTestData
=
async
iframe
=
>
{
let
data
=
await
SpecialPowers
.
spawn
(
iframe
[
]
(
)
=
>
{
let
utils
=
SpecialPowers
.
getDOMWindowUtils
(
content
.
window
)
;
return
JSON
.
stringify
(
utils
.
getCompositorAPZTestData
(
)
)
;
}
)
;
return
JSON
.
parse
(
data
)
;
}
;
let
utils
=
SpecialPowers
.
getDOMWindowUtils
(
window
)
;
let
oldParentTestData
=
utils
.
getCompositorAPZTestData
(
)
;
let
oldIframeTestData
=
await
getIframeCompositorTestData
(
iframeElement
)
;
dump
(
Hit
-
testing
point
(
{
point
.
x
}
{
point
.
y
}
)
in
fission
context
\
n
)
;
utils
.
sendMouseEvent
(
"
MozMouseHittest
"
point
.
x
point
.
y
0
0
0
true
0
0
true
true
)
;
let
newParentTestData
=
utils
.
getCompositorAPZTestData
(
)
;
let
newIframeTestData
=
await
getIframeCompositorTestData
(
iframeElement
)
;
let
hitResultCount
=
testData
=
>
{
return
Object
.
keys
(
testData
.
hitResults
)
.
length
;
}
;
let
hitIframe
=
hitResultCount
(
newIframeTestData
)
>
hitResultCount
(
oldIframeTestData
)
;
let
hitParent
=
hitResultCount
(
newParentTestData
)
>
hitResultCount
(
oldParentTestData
)
;
let
lastHitResult
=
testData
=
>
{
let
lastHit
=
testData
.
hitResults
[
Object
.
keys
(
testData
.
hitResults
)
.
length
-
1
]
;
return
{
hitInfo
:
lastHit
.
hitResult
scrollId
:
lastHit
.
scrollId
layersId
:
lastHit
.
layersId
}
;
}
;
if
(
hitIframe
&
&
hitParent
)
{
throw
new
Error
(
"
Both
iframe
and
parent
got
hit
-
results
that
is
unexpected
!
"
)
;
}
else
if
(
hitIframe
)
{
return
lastHitResult
(
newIframeTestData
)
;
}
else
if
(
hitParent
)
{
return
lastHitResult
(
newParentTestData
)
;
}
else
{
throw
new
Error
(
"
Neither
iframe
nor
parent
got
the
hit
-
result
that
is
unexpected
!
"
)
;
}
}
