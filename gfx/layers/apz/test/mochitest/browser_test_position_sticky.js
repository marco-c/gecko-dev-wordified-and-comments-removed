"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_utils
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_native_event_utils
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
WindowSnapshot
.
js
"
this
)
;
function
usesFailurePatterns
(
)
{
return
false
;
}
async
function
convertDataURLtoCanvas
(
aDataURL
aWidth
aHeight
)
{
const
canvas
=
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
canvas
"
)
;
canvas
.
width
=
aWidth
;
canvas
.
height
=
aHeight
;
const
image
=
new
Image
(
)
;
const
ctx
=
canvas
.
getContext
(
"
2d
"
)
;
const
loadPromise
=
new
Promise
(
resolve
=
>
image
.
addEventListener
(
"
load
"
resolve
)
)
;
image
.
src
=
aDataURL
;
await
loadPromise
;
ctx
.
drawImage
(
image
0
0
)
;
return
canvas
;
}
add_task
(
async
(
)
=
>
{
function
httpURL
(
filename
)
{
let
chromeURL
=
getRootDirectory
(
gTestPath
)
+
filename
;
return
chromeURL
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
mochi
.
test
:
8888
/
"
)
;
}
const
url
=
httpURL
(
"
helper_position_sticky_flicker
.
html
"
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
const
{
rect
scrollbarWidth
}
=
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
const
sticky
=
content
.
document
.
getElementById
(
"
sticky
"
)
;
let
stickyRect
=
sticky
.
getBoundingClientRect
(
)
;
stickyRect
.
x
+
=
content
.
window
.
mozInnerScreenX
;
stickyRect
.
y
+
=
content
.
window
.
mozInnerScreenY
;
for
(
let
i
=
1
;
i
<
=
120000
;
i
+
+
)
{
const
div
=
content
.
document
.
createElement
(
"
div
"
)
;
div
.
innerText
=
{
i
}
;
content
.
document
.
body
.
appendChild
(
div
)
;
}
await
content
.
wrappedJSObject
.
promiseApzFlushedRepaints
(
)
;
await
content
.
wrappedJSObject
.
waitUntilApzStable
(
)
;
let
w
=
{
}
h
=
{
}
;
SpecialPowers
.
DOMWindowUtils
.
getScrollbarSizes
(
content
.
document
.
documentElement
w
h
)
;
stickyRect
.
width
-
=
w
.
value
;
return
{
rect
:
stickyRect
scrollbarWidth
:
w
.
value
}
;
}
)
;
const
referenceDataURL
=
await
getSnapshot
(
rect
)
;
const
referenceCanvas
=
await
convertDataURLtoCanvas
(
referenceDataURL
rect
.
width
rect
.
height
)
;
let
mouseX
=
window
.
innerWidth
-
scrollbarWidth
/
2
;
let
mouseY
=
tab
.
linkedBrowser
.
getBoundingClientRect
(
)
.
y
+
5
;
const
dragFinisher
=
await
promiseNativeMouseDrag
(
window
mouseX
mouseY
0
window
.
innerHeight
100
)
;
if
(
AppConstants
.
DEBUG
)
{
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
content
.
wrappedJSObject
.
promiseFrame
(
content
.
window
)
;
await
content
.
wrappedJSObject
.
promiseFrame
(
content
.
window
)
;
}
)
;
}
const
snapshotDataURL
=
await
getSnapshot
(
rect
)
;
const
snapshotCanvas
=
await
convertDataURLtoCanvas
(
snapshotDataURL
rect
.
width
rect
.
height
)
;
await
dragFinisher
(
)
;
assertSnapshots
(
snapshotCanvas
referenceCanvas
true
null
"
test
case
"
"
reference
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
