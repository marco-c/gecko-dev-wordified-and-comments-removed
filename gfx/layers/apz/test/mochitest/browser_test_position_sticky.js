"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_utils
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_native_event_utils
.
js
"
this
)
;
add_task
(
async
(
)
=
>
{
function
httpURL
(
filename
)
{
let
chromeURL
=
getRootDirectory
(
gTestPath
)
+
filename
;
return
chromeURL
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
mochi
.
test
:
8888
/
"
)
;
}
const
url
=
httpURL
(
"
helper_position_sticky_flicker
.
html
"
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
const
{
rect
scrollbarWidth
}
=
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
const
sticky
=
content
.
document
.
getElementById
(
"
sticky
"
)
;
let
stickyRect
=
sticky
.
getBoundingClientRect
(
)
;
stickyRect
.
x
+
=
content
.
window
.
mozInnerScreenX
;
stickyRect
.
y
+
=
content
.
window
.
mozInnerScreenY
;
for
(
let
i
=
1
;
i
<
=
120000
;
i
+
+
)
{
const
div
=
content
.
document
.
createElement
(
"
div
"
)
;
div
.
innerText
=
{
i
}
;
content
.
document
.
body
.
appendChild
(
div
)
;
}
await
content
.
wrappedJSObject
.
promiseApzFlushedRepaints
(
)
;
await
content
.
wrappedJSObject
.
waitUntilApzStable
(
)
;
let
w
=
{
}
h
=
{
}
;
SpecialPowers
.
DOMWindowUtils
.
getScrollbarSizes
(
content
.
document
.
documentElement
w
h
)
;
stickyRect
.
width
-
=
w
.
value
;
return
{
rect
:
stickyRect
scrollbarWidth
:
w
.
value
}
;
}
)
;
const
reference
=
await
getSnapshot
(
rect
)
;
let
mouseX
=
window
.
innerWidth
-
scrollbarWidth
/
2
;
let
mouseY
=
tab
.
linkedBrowser
.
getBoundingClientRect
(
)
.
y
+
5
;
const
dragFinisher
=
await
promiseNativeMouseDrag
(
window
mouseX
mouseY
0
window
.
innerHeight
100
)
;
if
(
AppConstants
.
DEBUG
)
{
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
content
.
wrappedJSObject
.
promiseFrame
(
content
.
window
)
;
await
content
.
wrappedJSObject
.
promiseFrame
(
content
.
window
)
;
}
)
;
}
const
snapshot
=
await
getSnapshot
(
rect
)
;
await
dragFinisher
(
)
;
is
(
snapshot
reference
"
The
position
:
sticky
element
should
stay
at
the
"
+
"
same
place
after
scrolling
on
heavy
load
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
