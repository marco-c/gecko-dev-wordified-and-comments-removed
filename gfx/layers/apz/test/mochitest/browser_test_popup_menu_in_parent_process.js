"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
paint_listener
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
new
URL
(
"
apz_test_utils
.
js
"
gTestPath
)
.
href
this
)
;
Services
.
scriptloader
.
loadSubScript
(
new
URL
(
"
apz_test_native_event_utils
.
js
"
gTestPath
)
.
href
this
)
;
Services
.
scriptloader
.
loadSubScript
(
new
URL
(
"
helper_browser_test_utils
.
js
"
gTestPath
)
.
href
this
)
;
add_task
(
(
)
=
>
{
registerCleanupFunction
(
(
)
=
>
{
delete
window
.
waitForAllPaintsFlushed
;
delete
window
.
waitForAllPaints
;
delete
window
.
promiseAllPaintsDone
;
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
apz
.
popups
.
enabled
"
true
]
[
"
apz
.
popups_without_remote
.
enabled
"
true
]
]
}
)
;
}
)
;
async
function
runTest
(
aTestFile
)
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
getRootDirectory
(
gTestPath
)
+
aTestFile
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
Assert
.
ok
(
SpecialPowers
.
isMainProcess
(
)
)
;
}
)
;
await
promiseApzFlushedRepaints
(
)
;
await
waitUntilApzStable
(
)
;
const
selectChangePromise
=
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
return
new
Promise
(
resolve
=
>
{
content
.
document
.
querySelector
(
"
select
"
)
.
addEventListener
(
"
change
"
(
)
=
>
resolve
(
)
)
;
}
)
;
}
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
return
new
Promise
(
resolve
=
>
resolve
(
)
)
;
}
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
const
select
=
content
.
document
.
querySelector
(
"
select
"
)
;
const
focusPromise
=
new
Promise
(
resolve
=
>
{
select
.
addEventListener
(
"
focus
"
resolve
{
once
:
true
}
)
;
}
)
;
select
.
focus
(
)
;
await
focusPromise
;
}
)
;
const
selectPopup
=
await
openSelectPopup
(
)
;
const
popupRect
=
selectPopup
.
getBoundingClientRect
(
)
;
await
synthesizeNativeMouseEventWithAPZ
(
{
type
:
"
click
"
target
:
selectPopup
offsetX
:
popupRect
.
width
/
2
offsetY
:
popupRect
.
height
/
2
}
)
;
await
selectChangePromise
;
ok
(
true
"
clicking
on
poped
up
element
works
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
add_task
(
async
(
)
=
>
{
await
runTest
(
"
helper_popup_menu_in_parent_process
-
1
.
html
"
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
runTest
(
"
helper_popup_menu_in_parent_process
-
2
.
html
"
)
;
}
)
;
