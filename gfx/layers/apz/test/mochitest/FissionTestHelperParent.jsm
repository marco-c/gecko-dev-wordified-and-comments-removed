var
EXPORTED_SYMBOLS
=
[
"
FissionTestHelperParent
"
]
;
class
FissionTestHelperParent
extends
JSWindowActorParent
{
constructor
(
)
{
super
(
)
;
this
.
_testCompletePromise
=
new
Promise
(
(
resolve
)
=
>
{
this
.
_testCompletePromiseResolver
=
resolve
;
}
)
;
}
embedderWindow
(
)
{
let
embedder
=
this
.
manager
.
browsingContext
.
embedderWindowGlobal
;
if
(
!
embedder
)
{
dump
(
"
ERROR
:
no
embedder
found
in
FissionTestHelperParent
\
n
"
)
;
}
return
embedder
;
}
docURI
(
)
{
return
this
.
manager
.
documentURI
.
spec
;
}
getTestCompletePromise
(
)
{
return
this
.
_testCompletePromise
;
}
startTest
(
)
{
this
.
sendAsyncMessage
(
"
Test
:
Start
"
{
}
)
;
}
receiveMessage
(
msg
)
{
switch
(
msg
.
name
)
{
case
"
ok
"
:
FissionTestHelperParent
.
SimpleTest
.
ok
(
msg
.
data
.
cond
this
.
docURI
(
)
+
"
|
"
+
msg
.
data
.
msg
)
;
break
;
case
"
is
"
:
FissionTestHelperParent
.
SimpleTest
.
is
(
msg
.
data
.
a
msg
.
data
.
b
this
.
docURI
(
)
+
"
|
"
+
msg
.
data
.
msg
)
;
break
;
case
"
Test
:
Complete
"
:
this
.
_testCompletePromiseResolver
(
)
;
break
;
case
"
EmbedderToOopif
"
:
let
oopifBrowsingContext
=
BrowsingContext
.
get
(
msg
.
data
.
browsingContextId
)
;
if
(
oopifBrowsingContext
=
=
null
)
{
FissionTestHelperParent
.
SimpleTest
.
ok
(
false
"
EmbedderToOopif
couldn
'
t
find
oopif
"
)
;
break
;
}
let
oopifActor
=
oopifBrowsingContext
.
currentWindowGlobal
.
getActor
(
"
FissionTestHelper
"
)
;
if
(
!
oopifActor
)
{
FissionTestHelperParent
.
SimpleTest
.
ok
(
false
"
EmbedderToOopif
couldn
'
t
find
oopif
actor
"
)
;
break
;
}
oopifActor
.
sendAsyncMessage
(
"
FromEmbedder
"
msg
.
data
)
;
break
;
case
"
OopifToEmbedder
"
:
let
embedderActor
=
this
.
embedderWindow
(
)
.
getActor
(
"
FissionTestHelper
"
)
;
if
(
!
embedderActor
)
{
FissionTestHelperParent
.
SimpleTest
.
ok
(
false
"
OopifToEmbedder
couldn
'
t
find
embedder
"
)
;
break
;
}
embedderActor
.
sendAsyncMessage
(
"
FromOopif
"
msg
.
data
)
;
break
;
}
}
}
