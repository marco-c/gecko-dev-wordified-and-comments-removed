"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
paint_listener
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
new
URL
(
"
apz_test_utils
.
js
"
gTestPath
)
.
href
this
)
;
Services
.
scriptloader
.
loadSubScript
(
new
URL
(
"
apz_test_native_event_utils
.
js
"
gTestPath
)
.
href
this
)
;
Services
.
scriptloader
.
loadSubScript
(
new
URL
(
"
helper_browser_test_utils
.
js
"
gTestPath
)
.
href
this
)
;
const
{
UrlbarTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
UrlbarTestUtils
.
sys
.
mjs
"
)
;
add_task
(
(
)
=
>
{
registerCleanupFunction
(
(
)
=
>
{
delete
window
.
waitForAllPaintsFlushed
;
delete
window
.
waitForAllPaints
;
delete
window
.
promiseAllPaintsDone
;
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
apz
.
popups
.
enabled
"
true
]
[
"
apz
.
popups_without_remote
.
enabled
"
true
]
[
"
test
.
events
.
async
.
enabled
"
true
]
]
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
getRootDirectory
(
gTestPath
)
+
"
helper_popup_menu_in_parent_process
-
2
.
html
"
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
Assert
.
ok
(
SpecialPowers
.
isMainProcess
(
)
)
;
}
)
;
await
promiseApzFlushedRepaints
(
)
;
await
waitUntilApzStable
(
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
const
select
=
content
.
document
.
querySelector
(
"
select
"
)
;
const
focusPromise
=
new
Promise
(
resolve
=
>
{
select
.
addEventListener
(
"
focus
"
resolve
{
once
:
true
}
)
;
}
)
;
select
.
focus
(
)
;
await
focusPromise
;
}
)
;
const
selectPopup
=
await
openSelectPopup
(
)
;
await
promiseApzFlushedRepaints
(
selectPopup
)
;
const
utils
=
SpecialPowers
.
DOMWindowUtils
;
for
(
let
x
=
0
;
x
<
20
;
x
+
+
)
{
await
new
Promise
(
resolve
=
>
{
utils
.
sendNativeMouseEvent
(
10
+
x
10
utils
.
NATIVE_MOUSE_MESSAGE_MOVE
0
0
selectPopup
resolve
)
;
}
)
;
}
info
(
"
pressing
a
key
"
)
;
EventUtils
.
synthesizeKey
(
"
Key_Escape
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
