add_task
(
async
function
test_main
(
)
{
function
httpURL
(
filename
)
{
let
chromeURL
=
getRootDirectory
(
gTestPath
)
+
filename
;
return
chromeURL
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
mochi
.
test
:
8888
/
"
)
;
}
var
utils
=
SpecialPowers
.
getDOMWindowUtils
(
window
)
;
var
isWebRender
=
utils
.
layerManagerType
=
=
"
WebRender
"
;
var
subtests
=
[
{
url
:
httpURL
(
"
helper_fission_basic
.
html
"
)
}
{
url
:
httpURL
(
"
helper_fission_transforms
.
html
"
)
}
{
url
:
httpURL
(
"
helper_fission_scroll_oopif
.
html
"
)
}
]
;
if
(
isWebRender
)
{
subtests
=
subtests
.
concat
(
[
]
)
;
}
let
fissionWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
fission
:
true
}
)
;
const
{
FissionTestHelperParent
}
=
ChromeUtils
.
import
(
getRootDirectory
(
gTestPath
)
+
"
FissionTestHelperParent
.
jsm
"
)
;
FissionTestHelperParent
.
SimpleTest
=
SimpleTest
;
ChromeUtils
.
registerWindowActor
(
"
FissionTestHelper
"
{
parent
:
{
moduleURI
:
getRootDirectory
(
gTestPath
)
+
"
FissionTestHelperParent
.
jsm
"
}
child
:
{
moduleURI
:
getRootDirectory
(
gTestPath
)
+
"
FissionTestHelperChild
.
jsm
"
events
:
{
DOMWindowCreated
:
{
}
}
}
allFrames
:
true
}
)
;
try
{
for
(
var
subtest
of
subtests
)
{
dump
(
Starting
test
{
subtest
.
url
}
\
n
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
:
fissionWindow
.
gBrowser
url
:
subtest
.
url
}
async
browser
=
>
{
let
tabActor
=
browser
.
browsingContext
.
currentWindowGlobal
.
getActor
(
"
FissionTestHelper
"
)
;
let
donePromise
=
tabActor
.
getTestCompletePromise
(
)
;
tabActor
.
startTest
(
)
;
await
donePromise
;
}
)
;
dump
(
Finished
test
{
subtest
.
url
}
\
n
)
;
}
}
finally
{
delete
FissionTestHelperParent
.
SimpleTest
;
ChromeUtils
.
unregisterWindowActor
(
"
FissionTestHelper
"
)
;
await
BrowserTestUtils
.
closeWindow
(
fissionWindow
)
;
}
}
)
;
