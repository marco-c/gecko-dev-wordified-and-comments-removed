function
convertEntries
(
entries
)
{
var
result
=
{
}
;
for
(
var
i
=
0
;
i
<
entries
.
length
;
+
+
i
)
{
result
[
entries
[
i
]
.
key
]
=
entries
[
i
]
.
value
;
}
return
result
;
}
function
convertScrollFrameData
(
scrollFrames
)
{
var
result
=
{
}
;
for
(
var
i
=
0
;
i
<
scrollFrames
.
length
;
+
+
i
)
{
result
[
scrollFrames
[
i
]
.
scrollId
]
=
convertEntries
(
scrollFrames
[
i
]
.
entries
)
;
}
return
result
;
}
function
convertBuckets
(
buckets
)
{
var
result
=
{
}
;
for
(
var
i
=
0
;
i
<
buckets
.
length
;
+
+
i
)
{
result
[
buckets
[
i
]
.
sequenceNumber
]
=
convertScrollFrameData
(
buckets
[
i
]
.
scrollFrames
)
;
}
return
result
;
}
function
convertTestData
(
testData
)
{
var
result
=
{
}
;
result
.
paints
=
convertBuckets
(
testData
.
paints
)
;
result
.
repaintRequests
=
convertBuckets
(
testData
.
repaintRequests
)
;
return
result
;
}
function
buildApzcTree
(
paint
)
{
var
root
=
{
scrollId
:
-
1
children
:
[
]
}
;
for
(
var
scrollId
in
paint
)
{
paint
[
scrollId
]
.
children
=
[
]
;
paint
[
scrollId
]
.
scrollId
=
scrollId
;
}
for
(
var
scrollId
in
paint
)
{
var
parentNode
=
null
;
if
(
"
hasNoParentWithSameLayersId
"
in
paint
[
scrollId
]
)
{
parentNode
=
root
;
}
else
if
(
"
parentScrollId
"
in
paint
[
scrollId
]
)
{
parentNode
=
paint
[
paint
[
scrollId
]
.
parentScrollId
]
;
}
parentNode
.
children
.
push
(
paint
[
scrollId
]
)
;
}
return
root
;
}
function
findRcdNode
(
apzcTree
)
{
if
(
!
!
apzcTree
.
isRootContent
)
{
return
apzcTree
;
}
for
(
var
i
=
0
;
i
<
apzcTree
.
children
.
length
;
i
+
+
)
{
var
rcd
=
findRcdNode
(
apzcTree
.
children
[
i
]
)
;
if
(
rcd
!
=
null
)
{
return
rcd
;
}
}
return
null
;
}
function
flushApzRepaints
(
aCallback
aWindow
=
window
)
{
if
(
!
aCallback
)
{
throw
"
A
callback
must
be
provided
!
"
;
}
var
repaintDone
=
function
(
)
{
SpecialPowers
.
Services
.
obs
.
removeObserver
(
repaintDone
"
apz
-
repaints
-
flushed
"
false
)
;
setTimeout
(
aCallback
0
)
;
}
;
SpecialPowers
.
Services
.
obs
.
addObserver
(
repaintDone
"
apz
-
repaints
-
flushed
"
false
)
;
if
(
SpecialPowers
.
getDOMWindowUtils
(
aWindow
)
.
flushApzRepaints
(
)
)
{
dump
(
"
Flushed
APZ
repaints
waiting
for
callback
.
.
.
\
n
"
)
;
}
else
{
dump
(
"
Flushing
APZ
repaints
was
a
no
-
op
triggering
callback
directly
.
.
.
\
n
"
)
;
repaintDone
(
)
;
}
}
function
waitForApzFlushedRepaints
(
aCallback
)
{
waitForAllPaints
(
function
(
)
{
flushApzRepaints
(
function
(
)
{
waitForAllPaints
(
aCallback
)
;
}
)
;
}
)
;
}
function
runSubtestsSeriallyInFreshWindows
(
aSubtests
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
var
testIndex
=
-
1
;
var
w
=
null
;
function
advanceSubtestExecution
(
)
{
var
test
=
aSubtests
[
testIndex
]
;
if
(
w
)
{
if
(
typeof
test
.
dp_suppression
!
=
'
undefined
'
)
{
SpecialPowers
.
getDOMWindowUtils
(
window
)
.
respectDisplayPortSuppression
(
!
test
.
dp_suppression
)
;
}
if
(
test
.
prefs
)
{
SpecialPowers
.
popPrefEnv
(
function
(
)
{
w
.
close
(
)
;
w
=
null
;
advanceSubtestExecution
(
)
;
}
)
;
return
;
}
w
.
close
(
)
;
}
testIndex
+
+
;
if
(
testIndex
>
=
aSubtests
.
length
)
{
resolve
(
)
;
return
;
}
test
=
aSubtests
[
testIndex
]
;
if
(
typeof
test
.
dp_suppression
!
=
'
undefined
'
)
{
SpecialPowers
.
getDOMWindowUtils
(
window
)
.
respectDisplayPortSuppression
(
test
.
dp_suppression
)
;
}
function
spawnTest
(
aFile
)
{
w
=
window
.
open
(
'
'
"
_blank
"
)
;
w
.
subtestDone
=
advanceSubtestExecution
;
w
.
SimpleTest
=
SimpleTest
;
w
.
is
=
function
(
a
b
msg
)
{
return
is
(
a
b
aFile
+
"
|
"
+
msg
)
;
}
;
w
.
ok
=
function
(
cond
name
diag
)
{
return
ok
(
cond
aFile
+
"
|
"
+
name
diag
)
;
}
;
w
.
location
=
location
.
href
.
substring
(
0
location
.
href
.
lastIndexOf
(
'
/
'
)
+
1
)
+
aFile
;
return
w
;
}
if
(
test
.
prefs
)
{
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
test
.
prefs
}
function
(
)
{
w
=
spawnTest
(
test
.
file
)
;
}
)
;
}
else
{
w
=
spawnTest
(
test
.
file
)
;
}
}
advanceSubtestExecution
(
)
;
}
)
;
}
