"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
paint_listener
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
new
URL
(
"
apz_test_utils
.
js
"
gTestPath
)
.
href
this
)
;
Services
.
scriptloader
.
loadSubScript
(
new
URL
(
"
apz_test_native_event_utils
.
js
"
gTestPath
)
.
href
this
)
;
add_task
(
(
)
=
>
{
registerCleanupFunction
(
(
)
=
>
{
delete
window
.
waitForAllPaintsFlushed
;
delete
window
.
waitForAllPaints
;
delete
window
.
promiseAllPaintsDone
;
delete
window
.
hitTestConfig
;
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
apz
.
popups
.
enabled
"
true
]
[
"
apz
.
popups_without_remote
.
enabled
"
true
]
[
"
test
.
events
.
async
.
enabled
"
true
]
[
"
apz
.
test
.
logging_enabled
"
true
]
]
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
const
dialogWindow
=
window
.
openDialog
(
getRootDirectory
(
gTestPath
)
+
"
helper_popup_menu_in_parent_process
-
1
.
html
"
null
"
dialog
=
no
innerWidth
=
200
innerHeight
=
200
"
)
;
await
Promise
.
all
(
[
BrowserTestUtils
.
waitForEvent
(
dialogWindow
"
load
"
)
BrowserTestUtils
.
waitForEvent
(
dialogWindow
"
focus
"
)
BrowserTestUtils
.
waitForEvent
(
dialogWindow
"
activate
"
)
]
)
;
await
promiseOnlyApzControllerFlushed
(
dialogWindow
)
;
const
popupset
=
dialogWindow
.
document
.
createXULElement
(
"
popupset
"
)
;
dialogWindow
.
document
.
documentElement
.
appendChild
(
popupset
)
;
const
popup
=
dialogWindow
.
document
.
createXULElement
(
"
menupopup
"
)
;
popup
.
style
.
position
=
"
fixed
"
;
popup
.
setAttribute
(
"
id
"
"
bug1943597
"
)
;
popupset
.
appendChild
(
popup
)
;
const
menuitem
=
dialogWindow
.
document
.
createXULElement
(
"
menuitem
"
)
;
menuitem
.
setAttribute
(
"
label
"
"
item
"
)
;
menuitem
.
style
=
"
width
:
100px
;
height
:
100px
;
"
;
popup
.
appendChild
(
menuitem
)
;
const
popupshownPromise
=
new
Promise
(
resolve
=
>
{
popup
.
addEventListener
(
"
popupshown
"
resolve
(
)
)
;
}
)
;
popup
.
openPopupAtScreen
(
dialogWindow
.
mozInnerScreenX
dialogWindow
.
mozInnerScreenY
true
)
;
await
popupshownPromise
;
await
ensureApzReadyForPopup
(
popup
dialogWindow
)
;
await
promiseApzFlushedRepaints
(
popup
)
;
checkHitResult
(
hitTest
(
{
x
:
50
y
:
50
}
popup
)
APZHitResultFlags
.
VISIBLE
|
APZHitResultFlags
.
APZ_AWARE_LISTENERS
SpecialPowers
.
DOMWindowUtils
.
getViewId
(
popup
)
SpecialPowers
.
DOMWindowUtils
.
getLayersId
(
popup
)
"
position
:
fixed
popup
"
)
;
const
popuphiddenPromise
=
new
Promise
(
resolve
=
>
{
popup
.
addEventListener
(
"
popuphidden
"
resolve
(
)
)
;
}
)
;
popup
.
hidePopup
(
)
;
await
popuphiddenPromise
;
await
BrowserTestUtils
.
closeWindow
(
dialogWindow
)
;
}
)
;
