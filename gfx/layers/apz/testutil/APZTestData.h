#
ifndef
mozilla_layers_APZTestData_h
#
define
mozilla_layers_APZTestData_h
#
include
<
map
>
#
include
"
nsDebug
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
GfxMessageUtils
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
#
include
"
mozilla
/
ToString
.
h
"
#
include
"
mozilla
/
gfx
/
CompositorHitTestInfo
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
namespace
mozilla
{
namespace
layers
{
typedef
uint32_t
SequenceNumber
;
class
APZTestData
{
typedef
ScrollableLayerGuid
:
:
ViewID
ViewID
;
friend
struct
IPC
:
:
ParamTraits
<
APZTestData
>
;
friend
struct
APZTestDataToJSConverter
;
public
:
void
StartNewPaint
(
SequenceNumber
aSequenceNumber
)
{
MOZ_ASSERT
(
mPaints
.
find
(
aSequenceNumber
)
=
=
mPaints
.
end
(
)
)
;
mPaints
.
insert
(
DataStore
:
:
value_type
(
aSequenceNumber
Bucket
(
)
)
)
;
}
void
LogTestDataForPaint
(
SequenceNumber
aSequenceNumber
ViewID
aScrollId
const
std
:
:
string
&
aKey
const
std
:
:
string
&
aValue
)
{
LogTestDataImpl
(
mPaints
aSequenceNumber
aScrollId
aKey
aValue
)
;
}
void
StartNewRepaintRequest
(
SequenceNumber
aSequenceNumber
)
{
typedef
std
:
:
pair
<
DataStore
:
:
iterator
bool
>
InsertResultT
;
DebugOnly
<
InsertResultT
>
insertResult
=
mRepaintRequests
.
insert
(
DataStore
:
:
value_type
(
aSequenceNumber
Bucket
(
)
)
)
;
MOZ_ASSERT
(
(
(
InsertResultT
&
)
insertResult
)
.
second
"
Already
have
a
repaint
request
with
this
sequence
number
"
)
;
}
void
LogTestDataForRepaintRequest
(
SequenceNumber
aSequenceNumber
ViewID
aScrollId
const
std
:
:
string
&
aKey
const
std
:
:
string
&
aValue
)
{
LogTestDataImpl
(
mRepaintRequests
aSequenceNumber
aScrollId
aKey
aValue
)
;
}
void
RecordHitResult
(
const
ScreenPoint
&
aPoint
const
mozilla
:
:
gfx
:
:
CompositorHitTestInfo
&
aResult
const
ViewID
&
aScrollId
)
{
mHitResults
.
AppendElement
(
HitResult
{
aPoint
aResult
aScrollId
}
)
;
}
void
RecordAdditionalData
(
const
std
:
:
string
&
aKey
const
std
:
:
string
&
aValue
)
{
mAdditionalData
[
aKey
]
=
aValue
;
}
bool
ToJS
(
JS
:
:
MutableHandleValue
aOutValue
JSContext
*
aContext
)
const
;
typedef
std
:
:
map
<
std
:
:
string
std
:
:
string
>
ScrollFrameDataBase
;
struct
ScrollFrameData
:
ScrollFrameDataBase
{
}
;
typedef
std
:
:
map
<
ViewID
ScrollFrameData
>
BucketBase
;
struct
Bucket
:
BucketBase
{
}
;
typedef
std
:
:
map
<
SequenceNumber
Bucket
>
DataStoreBase
;
struct
DataStore
:
DataStoreBase
{
}
;
struct
HitResult
{
ScreenPoint
point
;
mozilla
:
:
gfx
:
:
CompositorHitTestInfo
result
;
ViewID
scrollId
;
}
;
private
:
DataStore
mPaints
;
DataStore
mRepaintRequests
;
nsTArray
<
HitResult
>
mHitResults
;
std
:
:
map
<
std
:
:
string
std
:
:
string
>
mAdditionalData
;
void
LogTestDataImpl
(
DataStore
&
aDataStore
SequenceNumber
aSequenceNumber
ViewID
aScrollId
const
std
:
:
string
&
aKey
const
std
:
:
string
&
aValue
)
{
auto
bucketIterator
=
aDataStore
.
find
(
aSequenceNumber
)
;
if
(
bucketIterator
=
=
aDataStore
.
end
(
)
)
{
MOZ_ASSERT
(
false
"
LogTestDataImpl
called
with
nonexistent
sequence
number
"
)
;
return
;
}
Bucket
&
bucket
=
bucketIterator
-
>
second
;
ScrollFrameData
&
scrollFrameData
=
bucket
[
aScrollId
]
;
MOZ_ASSERT
(
scrollFrameData
.
find
(
aKey
)
=
=
scrollFrameData
.
end
(
)
|
|
scrollFrameData
[
aKey
]
=
=
aValue
)
;
scrollFrameData
.
insert
(
ScrollFrameData
:
:
value_type
(
aKey
aValue
)
)
;
}
}
;
class
APZPaintLogHelper
{
public
:
APZPaintLogHelper
(
APZTestData
*
aTestData
SequenceNumber
aPaintSequenceNumber
)
:
mTestData
(
aTestData
)
mPaintSequenceNumber
(
aPaintSequenceNumber
)
{
MOZ_ASSERT
(
!
aTestData
|
|
StaticPrefs
:
:
APZTestLoggingEnabled
(
)
"
don
'
t
call
me
"
)
;
}
template
<
typename
Value
>
void
LogTestData
(
ScrollableLayerGuid
:
:
ViewID
aScrollId
const
std
:
:
string
&
aKey
const
Value
&
aValue
)
const
{
if
(
mTestData
)
{
LogTestData
(
aScrollId
aKey
ToString
(
aValue
)
)
;
}
}
void
LogTestData
(
ScrollableLayerGuid
:
:
ViewID
aScrollId
const
std
:
:
string
&
aKey
const
std
:
:
string
&
aValue
)
const
{
if
(
mTestData
)
{
mTestData
-
>
LogTestDataForPaint
(
mPaintSequenceNumber
aScrollId
aKey
aValue
)
;
}
}
private
:
APZTestData
*
mTestData
;
SequenceNumber
mPaintSequenceNumber
;
}
;
}
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
layers
:
:
APZTestData
>
{
typedef
mozilla
:
:
layers
:
:
APZTestData
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
WriteParam
(
aMsg
aParam
.
mPaints
)
;
WriteParam
(
aMsg
aParam
.
mRepaintRequests
)
;
WriteParam
(
aMsg
aParam
.
mHitResults
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
return
(
ReadParam
(
aMsg
aIter
&
aResult
-
>
mPaints
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mRepaintRequests
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
mHitResults
)
)
;
}
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
layers
:
:
APZTestData
:
:
ScrollFrameData
>
:
ParamTraits
<
mozilla
:
:
layers
:
:
APZTestData
:
:
ScrollFrameDataBase
>
{
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
layers
:
:
APZTestData
:
:
Bucket
>
:
ParamTraits
<
mozilla
:
:
layers
:
:
APZTestData
:
:
BucketBase
>
{
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
layers
:
:
APZTestData
:
:
DataStore
>
:
ParamTraits
<
mozilla
:
:
layers
:
:
APZTestData
:
:
DataStoreBase
>
{
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
layers
:
:
APZTestData
:
:
HitResult
>
{
typedef
mozilla
:
:
layers
:
:
APZTestData
:
:
HitResult
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
WriteParam
(
aMsg
aParam
.
point
)
;
WriteParam
(
aMsg
aParam
.
result
)
;
WriteParam
(
aMsg
aParam
.
scrollId
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
return
(
ReadParam
(
aMsg
aIter
&
aResult
-
>
point
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
result
)
&
&
ReadParam
(
aMsg
aIter
&
aResult
-
>
scrollId
)
)
;
}
}
;
}
#
endif
