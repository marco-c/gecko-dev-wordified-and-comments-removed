#
ifndef
mozilla_layers_ProfilerScreenshots_h
#
define
mozilla_layers_ProfilerScreenshots_h
#
include
<
functional
>
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
class
nsIThread
;
namespace
mozilla
{
namespace
gfx
{
class
DataSourceSurface
;
}
namespace
layers
{
class
ProfilerScreenshots
final
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ProfilerScreenshots
)
public
:
ProfilerScreenshots
(
)
;
static
bool
IsEnabled
(
)
;
static
gfx
:
:
IntSize
ScreenshotSize
(
)
{
return
gfx
:
:
IntSize
(
350
350
)
;
}
void
SubmitScreenshot
(
uintptr_t
aWindowIdentifier
const
gfx
:
:
IntSize
&
aOriginalSize
const
gfx
:
:
IntSize
&
aScaledSize
const
TimeStamp
&
aTimeStamp
const
std
:
:
function
<
bool
(
gfx
:
:
DataSourceSurface
*
)
>
&
aPopulateSurface
)
;
private
:
~
ProfilerScreenshots
(
)
;
already_AddRefed
<
DataSourceSurface
>
TakeNextSurface
(
)
;
void
ReturnSurface
(
DataSourceSurface
*
aSurface
)
;
nsCOMPtr
<
nsIThread
>
mThread
;
nsTArray
<
RefPtr
<
DataSourceSurface
>
>
mAvailableSurfaces
;
Mutex
mMutex
;
uint32_t
mLiveSurfaceCount
;
}
;
}
}
#
endif
