#
include
"
MemoryPressureObserver
.
h
"
namespace
mozilla
{
namespace
layers
{
MemoryPressureObserver
:
:
MemoryPressureObserver
(
MemoryPressureListener
*
aListener
)
:
mListener
(
aListener
)
{
}
MemoryPressureObserver
:
:
~
MemoryPressureObserver
(
)
{
MOZ_ASSERT
(
!
mListener
)
;
}
already_AddRefed
<
MemoryPressureObserver
>
MemoryPressureObserver
:
:
Create
(
MemoryPressureListener
*
aListener
)
{
nsCOMPtr
<
nsIObserverService
>
service
=
services
:
:
GetObserverService
(
)
;
if
(
!
service
)
{
return
nullptr
;
}
RefPtr
<
MemoryPressureObserver
>
observer
=
new
MemoryPressureObserver
(
aListener
)
;
bool
useWeakRef
=
false
;
service
-
>
AddObserver
(
observer
"
memory
-
pressure
"
useWeakRef
)
;
return
observer
.
forget
(
)
;
}
void
MemoryPressureObserver
:
:
Unregister
(
)
{
if
(
!
mListener
)
{
return
;
}
nsCOMPtr
<
nsIObserverService
>
service
=
services
:
:
GetObserverService
(
)
;
if
(
service
)
{
service
-
>
RemoveObserver
(
this
"
memory
-
pressure
"
)
;
}
mListener
=
nullptr
;
}
NS_IMETHODIMP
MemoryPressureObserver
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
mListener
&
&
strcmp
(
aTopic
"
memory
-
pressure
"
)
)
{
MemoryPressureReason
reason
=
MemoryPressureReason
:
:
LOW_MEMORY
;
auto
reason_string
=
nsDependentString
(
aData
)
;
if
(
StringBeginsWith
(
reason_string
NS_LITERAL_STRING
(
"
low
-
memory
-
ongoing
"
)
)
)
{
reason
=
MemoryPressureReason
:
:
LOW_MEMORY_ONGOING
;
}
else
if
(
StringBeginsWith
(
reason_string
NS_LITERAL_STRING
(
"
heap
-
minimize
"
)
)
)
{
reason
=
MemoryPressureReason
:
:
HEAP_MINIMIZE
;
}
mListener
-
>
OnMemoryPressure
(
reason
)
;
}
return
NS_OK
;
}
NS_IMPL_ISUPPORTS
(
MemoryPressureObserver
nsIObserver
)
}
}
