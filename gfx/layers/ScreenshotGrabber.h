#
ifndef
mozilla_layers_ScreenshotGrabber_h
#
define
mozilla_layers_ScreenshotGrabber_h
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
namespace
layers
{
namespace
profiler_screenshots
{
class
Window
;
class
RenderSource
;
class
DownscaleTarget
;
class
AsyncReadbackBuffer
;
class
ScreenshotGrabberImpl
;
}
class
ScreenshotGrabber
final
{
public
:
ScreenshotGrabber
(
)
;
~
ScreenshotGrabber
(
)
;
void
MaybeGrabScreenshot
(
profiler_screenshots
:
:
Window
&
aWindow
)
;
void
MaybeProcessQueue
(
)
;
void
NotifyEmptyFrame
(
)
;
void
Destroy
(
)
;
private
:
UniquePtr
<
profiler_screenshots
:
:
ScreenshotGrabberImpl
>
mImpl
;
}
;
namespace
profiler_screenshots
{
class
Window
{
public
:
virtual
already_AddRefed
<
RenderSource
>
GetWindowContents
(
)
=
0
;
virtual
already_AddRefed
<
DownscaleTarget
>
CreateDownscaleTarget
(
const
gfx
:
:
IntSize
&
aSize
)
=
0
;
virtual
already_AddRefed
<
AsyncReadbackBuffer
>
CreateAsyncReadbackBuffer
(
const
gfx
:
:
IntSize
&
aSize
)
=
0
;
protected
:
virtual
~
Window
(
)
{
}
}
;
class
RenderSource
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
RenderSource
)
const
auto
&
Size
(
)
const
{
return
mSize
;
}
protected
:
explicit
RenderSource
(
const
gfx
:
:
IntSize
&
aSize
)
:
mSize
(
aSize
)
{
}
virtual
~
RenderSource
(
)
{
}
const
gfx
:
:
IntSize
mSize
;
}
;
class
DownscaleTarget
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
DownscaleTarget
)
virtual
already_AddRefed
<
RenderSource
>
AsRenderSource
(
)
=
0
;
const
auto
&
Size
(
)
const
{
return
mSize
;
}
virtual
bool
DownscaleFrom
(
RenderSource
*
aSource
const
gfx
:
:
IntRect
&
aSourceRect
const
gfx
:
:
IntRect
&
aDestRect
)
=
0
;
protected
:
explicit
DownscaleTarget
(
const
gfx
:
:
IntSize
&
aSize
)
:
mSize
(
aSize
)
{
}
virtual
~
DownscaleTarget
(
)
{
}
const
gfx
:
:
IntSize
mSize
;
}
;
class
AsyncReadbackBuffer
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
mozilla
:
:
layers
:
:
profiler_screenshots
:
:
AsyncReadbackBuffer
)
const
auto
&
Size
(
)
const
{
return
mSize
;
}
virtual
void
CopyFrom
(
RenderSource
*
aSource
)
=
0
;
virtual
bool
MapAndCopyInto
(
gfx
:
:
DataSourceSurface
*
aSurface
const
gfx
:
:
IntSize
&
aReadSize
)
=
0
;
protected
:
explicit
AsyncReadbackBuffer
(
const
gfx
:
:
IntSize
&
aSize
)
:
mSize
(
aSize
)
{
}
virtual
~
AsyncReadbackBuffer
(
)
{
}
const
gfx
:
:
IntSize
mSize
;
}
;
}
}
}
#
endif
