#
ifndef
MOZILLA_LAYERS_EFFECTS_H
#
define
MOZILLA_LAYERS_EFFECTS_H
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nscore
.
h
"
namespace
mozilla
{
namespace
layers
{
struct
TexturedEffect
;
struct
Effect
{
NS_INLINE_DECL_REFCOUNTING
(
Effect
)
explicit
Effect
(
EffectTypes
aType
)
:
mType
(
aType
)
{
}
EffectTypes
mType
;
virtual
TexturedEffect
*
AsTexturedEffect
(
)
{
return
nullptr
;
}
virtual
void
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
=
0
;
protected
:
virtual
~
Effect
(
)
=
default
;
}
;
struct
TexturedEffect
:
public
Effect
{
TexturedEffect
(
EffectTypes
aType
TextureSource
*
aTexture
bool
aPremultiplied
gfx
:
:
SamplingFilter
aSamplingFilter
)
:
Effect
(
aType
)
mTextureCoords
(
0
0
1
.
0f
1
.
0f
)
mTexture
(
aTexture
)
mPremultiplied
(
aPremultiplied
)
mPremultipliedCopy
(
false
)
mSamplingFilter
(
aSamplingFilter
)
{
}
TexturedEffect
*
AsTexturedEffect
(
)
override
{
return
this
;
}
virtual
const
char
*
Name
(
)
=
0
;
void
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
override
;
gfx
:
:
Rect
mTextureCoords
;
TextureSource
*
mTexture
;
bool
mPremultiplied
;
bool
mPremultipliedCopy
;
gfx
:
:
SamplingFilter
mSamplingFilter
;
}
;
struct
EffectRGB
:
public
TexturedEffect
{
EffectRGB
(
TextureSource
*
aTexture
bool
aPremultiplied
gfx
:
:
SamplingFilter
aSamplingFilter
bool
aFlipped
=
false
)
:
TexturedEffect
(
EffectTypes
:
:
RGB
aTexture
aPremultiplied
aSamplingFilter
)
{
}
const
char
*
Name
(
)
override
{
return
"
EffectRGB
"
;
}
}
;
struct
EffectYCbCr
:
public
TexturedEffect
{
EffectYCbCr
(
TextureSource
*
aSource
gfx
:
:
YUVColorSpace
aYUVColorSpace
gfx
:
:
ColorRange
aColorRange
gfx
:
:
ColorDepth
aColorDepth
gfx
:
:
SamplingFilter
aSamplingFilter
)
:
TexturedEffect
(
EffectTypes
:
:
YCBCR
aSource
false
aSamplingFilter
)
mYUVColorSpace
(
aYUVColorSpace
)
mColorRange
(
aColorRange
)
mColorDepth
(
aColorDepth
)
{
}
const
char
*
Name
(
)
override
{
return
"
EffectYCbCr
"
;
}
gfx
:
:
YUVColorSpace
mYUVColorSpace
;
gfx
:
:
ColorRange
mColorRange
;
gfx
:
:
ColorDepth
mColorDepth
;
}
;
struct
EffectNV12
:
public
EffectYCbCr
{
EffectNV12
(
TextureSource
*
aSource
gfx
:
:
YUVColorSpace
aYUVColorSpace
gfx
:
:
ColorRange
aColorRange
gfx
:
:
ColorDepth
aColorDepth
gfx
:
:
SamplingFilter
aSamplingFilter
)
:
EffectYCbCr
(
aSource
aYUVColorSpace
aColorRange
aColorDepth
aSamplingFilter
)
{
mType
=
EffectTypes
:
:
NV12
;
}
const
char
*
Name
(
)
override
{
return
"
EffectNV12
"
;
}
}
;
struct
EffectRoundedClip
:
public
Effect
{
explicit
EffectRoundedClip
(
const
gfx
:
:
Rect
&
aRect
const
gfx
:
:
RectCornerRadii
&
aRadii
)
:
Effect
(
EffectTypes
:
:
ROUNDED_CLIP
)
mRect
(
aRect
)
mRadii
(
aRadii
)
{
}
virtual
const
char
*
Name
(
)
{
return
"
EffectRoundedClip
"
;
}
void
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
override
;
gfx
:
:
Rect
mRect
;
gfx
:
:
RectCornerRadii
mRadii
;
}
;
struct
EffectChain
{
RefPtr
<
Effect
>
mPrimaryEffect
;
RefPtr
<
EffectRoundedClip
>
mRoundedClipEffect
;
}
;
inline
already_AddRefed
<
TexturedEffect
>
CreateTexturedEffect
(
gfx
:
:
SurfaceFormat
aFormat
TextureSource
*
aSource
const
gfx
:
:
SamplingFilter
aSamplingFilter
bool
isAlphaPremultiplied
)
{
MOZ_ASSERT
(
aSource
)
;
RefPtr
<
TexturedEffect
>
result
;
switch
(
aFormat
)
{
case
gfx
:
:
SurfaceFormat
:
:
B8G8R8A8
:
case
gfx
:
:
SurfaceFormat
:
:
B8G8R8X8
:
case
gfx
:
:
SurfaceFormat
:
:
R8G8B8X8
:
case
gfx
:
:
SurfaceFormat
:
:
R5G6B5_UINT16
:
case
gfx
:
:
SurfaceFormat
:
:
R8G8B8A8
:
result
=
new
EffectRGB
(
aSource
isAlphaPremultiplied
aSamplingFilter
)
;
break
;
case
gfx
:
:
SurfaceFormat
:
:
YUV420
:
case
gfx
:
:
SurfaceFormat
:
:
NV12
:
case
gfx
:
:
SurfaceFormat
:
:
P010
:
case
gfx
:
:
SurfaceFormat
:
:
P016
:
MOZ_ASSERT_UNREACHABLE
(
"
gfx
:
:
SurfaceFormat
:
:
YUV420
/
NV12
/
P010
/
P016
is
invalid
"
)
;
break
;
default
:
NS_WARNING
(
"
unhandled
program
type
"
)
;
break
;
}
return
result
.
forget
(
)
;
}
inline
already_AddRefed
<
TexturedEffect
>
CreateTexturedEffect
(
TextureHost
*
aHost
TextureSource
*
aSource
const
gfx
:
:
SamplingFilter
aSamplingFilter
bool
isAlphaPremultiplied
)
{
MOZ_ASSERT
(
aHost
)
;
MOZ_ASSERT
(
aSource
)
;
RefPtr
<
TexturedEffect
>
result
;
switch
(
aHost
-
>
GetReadFormat
(
)
)
{
case
gfx
:
:
SurfaceFormat
:
:
YUV420
:
result
=
new
EffectYCbCr
(
aSource
aHost
-
>
GetYUVColorSpace
(
)
aHost
-
>
GetColorRange
(
)
aHost
-
>
GetColorDepth
(
)
aSamplingFilter
)
;
break
;
case
gfx
:
:
SurfaceFormat
:
:
NV12
:
case
gfx
:
:
SurfaceFormat
:
:
P010
:
case
gfx
:
:
SurfaceFormat
:
:
P016
:
result
=
new
EffectNV12
(
aSource
aHost
-
>
GetYUVColorSpace
(
)
aHost
-
>
GetColorRange
(
)
aHost
-
>
GetColorDepth
(
)
aSamplingFilter
)
;
break
;
default
:
result
=
CreateTexturedEffect
(
aHost
-
>
GetReadFormat
(
)
aSource
aSamplingFilter
isAlphaPremultiplied
)
;
break
;
}
return
result
.
forget
(
)
;
}
inline
already_AddRefed
<
TexturedEffect
>
CreateTexturedEffect
(
TextureSource
*
aTexture
const
gfx
:
:
SamplingFilter
aSamplingFilter
)
{
return
CreateTexturedEffect
(
aTexture
-
>
GetFormat
(
)
aTexture
aSamplingFilter
true
)
;
}
}
}
#
endif
