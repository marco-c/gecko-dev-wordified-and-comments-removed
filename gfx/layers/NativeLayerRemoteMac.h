#
ifndef
mozilla_layers_NativeLayerRemoteMac_h
#
define
mozilla_layers_NativeLayerRemoteMac_h
#
include
<
IOSurface
/
IOSurfaceRef
.
h
>
#
include
"
mozilla
/
layers
/
NativeLayer
.
h
"
#
include
"
mozilla
/
layers
/
NativeLayerCommandQueue
.
h
"
#
include
"
mozilla
/
layers
/
NativeLayerMacSurfaceHandler
.
h
"
#
include
"
mozilla
/
layers
/
NativeLayerRootRemoteMacChild
.
h
"
#
include
"
nsRegion
.
h
"
namespace
mozilla
{
namespace
layers
{
class
SurfacePoolHandleCA
;
class
NativeLayerRemoteMac
final
:
public
NativeLayer
{
friend
class
NativeLayerRootRemoteMacChild
;
public
:
NativeLayerRemoteMac
*
AsNativeLayerRemoteMac
(
)
override
{
return
this
;
}
gfx
:
:
IntSize
GetSize
(
)
override
;
void
SetPosition
(
const
gfx
:
:
IntPoint
&
aPosition
)
override
;
gfx
:
:
IntPoint
GetPosition
(
)
override
;
void
SetTransform
(
const
gfx
:
:
Matrix4x4
&
aTransform
)
override
;
gfx
:
:
Matrix4x4
GetTransform
(
)
override
;
gfx
:
:
IntRect
GetRect
(
)
override
;
void
SetSamplingFilter
(
gfx
:
:
SamplingFilter
aSamplingFilter
)
override
;
RefPtr
<
gfx
:
:
DrawTarget
>
NextSurfaceAsDrawTarget
(
const
gfx
:
:
IntRect
&
aDisplayRect
const
gfx
:
:
IntRegion
&
aUpdateRegion
gfx
:
:
BackendType
aBackendType
)
override
;
Maybe
<
GLuint
>
NextSurfaceAsFramebuffer
(
const
gfx
:
:
IntRect
&
aDisplayRect
const
gfx
:
:
IntRegion
&
aUpdateRegion
bool
aNeedsDepth
)
override
;
void
NotifySurfaceReady
(
)
override
;
void
DiscardBackbuffers
(
)
override
;
bool
IsOpaque
(
)
override
;
void
SetClipRect
(
const
Maybe
<
gfx
:
:
IntRect
>
&
aClipRect
)
override
;
Maybe
<
gfx
:
:
IntRect
>
ClipRect
(
)
override
;
void
SetRoundedClipRect
(
const
Maybe
<
gfx
:
:
RoundedRect
>
&
aRoundedClipRect
)
override
;
Maybe
<
gfx
:
:
RoundedRect
>
RoundedClipRect
(
)
override
;
gfx
:
:
IntRect
CurrentSurfaceDisplayRect
(
)
override
;
void
SetSurfaceIsFlipped
(
bool
aIsFlipped
)
override
;
bool
SurfaceIsFlipped
(
)
override
;
void
AttachExternalImage
(
wr
:
:
RenderTextureHost
*
aExternalImage
)
override
;
GpuFence
*
GetGpuFence
(
)
override
;
Maybe
<
SurfaceWithInvalidRegion
>
FrontSurface
(
)
;
NativeLayerRemoteMac
(
const
gfx
:
:
IntSize
&
aSize
bool
aIsOpaque
SurfacePoolHandleCA
*
aSurfacePoolHandle
)
;
explicit
NativeLayerRemoteMac
(
bool
aIsOpaque
)
;
explicit
NativeLayerRemoteMac
(
gfx
:
:
DeviceColor
aColor
)
;
~
NativeLayerRemoteMac
(
)
override
;
void
FlushDirtyLayerInfoToCommandQueue
(
)
;
protected
:
Maybe
<
NativeLayerMacSurfaceHandler
>
mSurfaceHandler
;
RefPtr
<
NativeLayerCommandQueue
>
mCommandQueue
;
gfx
:
:
IntPoint
mPosition
;
gfx
:
:
Matrix4x4
mTransform
;
gfx
:
:
IntRect
mDisplayRect
;
gfx
:
:
IntSize
mSize
;
Maybe
<
gfx
:
:
IntRect
>
mClipRect
;
Maybe
<
gfx
:
:
RoundedRect
>
mRoundedClipRect
;
gfx
:
:
SamplingFilter
mSamplingFilter
=
gfx
:
:
SamplingFilter
:
:
POINT
;
float
mBackingScale
=
1
.
0f
;
bool
mSurfaceIsFlipped
=
false
;
gfx
:
:
DeviceColor
mColor
;
const
bool
mIsOpaque
=
false
;
bool
mDirty
=
false
;
}
;
}
}
#
endif
