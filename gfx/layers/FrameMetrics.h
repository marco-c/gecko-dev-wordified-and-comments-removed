#
ifndef
GFX_FRAMEMETRICS_H
#
define
GFX_FRAMEMETRICS_H
#
include
<
stdint
.
h
>
#
include
"
Units
.
h
"
#
include
"
mozilla
/
DefineEnum
.
h
"
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
gfx
/
BasePoint
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
gfx
/
ScaleFactor
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
#
include
"
mozilla
/
ScrollPositionUpdate
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsString
.
h
"
#
include
"
PLDHashTable
.
h
"
struct
nsStyleDisplay
;
namespace
mozilla
{
enum
class
StyleScrollSnapStrictness
:
uint8_t
;
enum
class
StyleOverscrollBehavior
:
uint8_t
;
class
WritingMode
;
}
namespace
IPC
{
template
<
typename
T
>
struct
ParamTraits
;
}
namespace
mozilla
{
namespace
layers
{
struct
FrameMetrics
{
friend
struct
IPC
:
:
ParamTraits
<
mozilla
:
:
layers
:
:
FrameMetrics
>
;
typedef
ScrollableLayerGuid
:
:
ViewID
ViewID
;
public
:
MOZ_DEFINE_ENUM_WITH_BASE_AT_CLASS_SCOPE
(
ScrollOffsetUpdateType
uint8_t
(
eNone
eMainThread
ePending
eRestore
)
)
;
FrameMetrics
(
)
:
mScrollId
(
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
)
mPresShellResolution
(
1
)
mCompositionBounds
(
0
0
0
0
)
mDisplayPort
(
0
0
0
0
)
mCriticalDisplayPort
(
0
0
0
0
)
mScrollableRect
(
0
0
0
0
)
mCumulativeResolution
(
)
mDevPixelsPerCSSPixel
(
1
)
mScrollOffset
(
0
0
)
mBaseScrollOffset
(
0
0
)
mZoom
(
)
mScrollGeneration
(
0
)
mSmoothScrollOffset
(
0
0
)
mRootCompositionSize
(
0
0
)
mDisplayPortMargins
(
0
0
0
0
)
mPresShellId
(
-
1
)
mLayoutViewport
(
0
0
0
0
)
mExtraResolution
(
)
mPaintRequestTime
(
)
mScrollUpdateType
(
eNone
)
mVisualDestination
(
0
0
)
mVisualScrollUpdateType
(
eNone
)
mIsRootContent
(
false
)
mIsRelative
(
false
)
mDoSmoothScroll
(
false
)
mIsScrollInfoLayer
(
false
)
{
}
bool
operator
=
=
(
const
FrameMetrics
&
aOther
)
const
{
return
mScrollId
=
=
aOther
.
mScrollId
&
&
mPresShellResolution
=
=
aOther
.
mPresShellResolution
&
&
mCompositionBounds
.
IsEqualEdges
(
aOther
.
mCompositionBounds
)
&
&
mDisplayPort
.
IsEqualEdges
(
aOther
.
mDisplayPort
)
&
&
mCriticalDisplayPort
.
IsEqualEdges
(
aOther
.
mCriticalDisplayPort
)
&
&
mScrollableRect
.
IsEqualEdges
(
aOther
.
mScrollableRect
)
&
&
mCumulativeResolution
=
=
aOther
.
mCumulativeResolution
&
&
mDevPixelsPerCSSPixel
=
=
aOther
.
mDevPixelsPerCSSPixel
&
&
mScrollOffset
=
=
aOther
.
mScrollOffset
&
&
mBaseScrollOffset
=
=
aOther
.
mBaseScrollOffset
&
&
mScrollGeneration
=
=
aOther
.
mScrollGeneration
&
&
mSmoothScrollOffset
=
=
aOther
.
mSmoothScrollOffset
&
&
mRootCompositionSize
=
=
aOther
.
mRootCompositionSize
&
&
mDisplayPortMargins
=
=
aOther
.
mDisplayPortMargins
&
&
mPresShellId
=
=
aOther
.
mPresShellId
&
&
mLayoutViewport
.
IsEqualEdges
(
aOther
.
mLayoutViewport
)
&
&
mExtraResolution
=
=
aOther
.
mExtraResolution
&
&
mPaintRequestTime
=
=
aOther
.
mPaintRequestTime
&
&
mScrollUpdateType
=
=
aOther
.
mScrollUpdateType
&
&
mVisualDestination
=
=
aOther
.
mVisualDestination
&
&
mVisualScrollUpdateType
=
=
aOther
.
mVisualScrollUpdateType
&
&
mIsRootContent
=
=
aOther
.
mIsRootContent
&
&
mIsRelative
=
=
aOther
.
mIsRelative
&
&
mDoSmoothScroll
=
=
aOther
.
mDoSmoothScroll
&
&
mIsScrollInfoLayer
=
=
aOther
.
mIsScrollInfoLayer
&
&
mFixedLayerMargins
=
=
aOther
.
mFixedLayerMargins
&
&
mPureRelativeOffset
=
=
aOther
.
mPureRelativeOffset
;
}
bool
operator
!
=
(
const
FrameMetrics
&
aOther
)
const
{
return
!
operator
=
=
(
aOther
)
;
}
bool
IsScrollable
(
)
const
{
return
mScrollId
!
=
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
;
}
CSSToScreenScale2D
DisplayportPixelsPerCSSPixel
(
)
const
{
return
mZoom
*
ParentLayerToLayerScale
(
1
.
0f
)
/
mExtraResolution
;
}
CSSToLayerScale2D
LayersPixelsPerCSSPixel
(
)
const
{
return
mDevPixelsPerCSSPixel
*
mCumulativeResolution
;
}
LayerToParentLayerScale
GetAsyncZoom
(
)
const
{
return
(
mZoom
/
LayersPixelsPerCSSPixel
(
)
)
.
ToScaleFactor
(
)
;
}
CSSRect
GetExpandedScrollableRect
(
)
const
{
CSSRect
scrollableRect
=
mScrollableRect
;
CSSSize
compSize
=
CalculateCompositedSizeInCssPixels
(
)
;
if
(
scrollableRect
.
Width
(
)
<
compSize
.
width
)
{
scrollableRect
.
SetRectX
(
std
:
:
max
(
0
.
f
scrollableRect
.
X
(
)
-
(
compSize
.
width
-
scrollableRect
.
Width
(
)
)
)
compSize
.
width
)
;
}
if
(
scrollableRect
.
Height
(
)
<
compSize
.
height
)
{
scrollableRect
.
SetRectY
(
std
:
:
max
(
0
.
f
scrollableRect
.
Y
(
)
-
(
compSize
.
height
-
scrollableRect
.
Height
(
)
)
)
compSize
.
height
)
;
}
return
scrollableRect
;
}
CSSSize
CalculateCompositedSizeInCssPixels
(
)
const
{
if
(
GetZoom
(
)
=
=
CSSToParentLayerScale2D
(
0
0
)
)
{
return
CSSSize
(
)
;
}
return
mCompositionBounds
.
Size
(
)
/
GetZoom
(
)
;
}
CSSRect
CalculateCompositionBoundsInCssPixelsOfSurroundingContent
(
)
const
{
if
(
GetZoom
(
)
=
=
CSSToParentLayerScale2D
(
0
0
)
)
{
return
CSSRect
(
)
;
}
return
mCompositionBounds
/
GetZoom
(
)
*
CSSToCSSScale
{
mPresShellResolution
}
;
}
CSSSize
CalculateBoundedCompositedSizeInCssPixels
(
)
const
{
CSSSize
size
=
CalculateCompositedSizeInCssPixels
(
)
;
size
.
width
=
std
:
:
min
(
size
.
width
mRootCompositionSize
.
width
)
;
size
.
height
=
std
:
:
min
(
size
.
height
mRootCompositionSize
.
height
)
;
return
size
;
}
CSSRect
CalculateScrollRange
(
)
const
{
CSSSize
scrollPortSize
=
CalculateCompositedSizeInCssPixels
(
)
;
CSSRect
scrollRange
=
mScrollableRect
;
scrollRange
.
SetWidth
(
std
:
:
max
(
scrollRange
.
Width
(
)
-
scrollPortSize
.
width
0
.
0f
)
)
;
scrollRange
.
SetHeight
(
std
:
:
max
(
scrollRange
.
Height
(
)
-
scrollPortSize
.
height
0
.
0f
)
)
;
return
scrollRange
;
}
void
ScrollBy
(
const
CSSPoint
&
aPoint
)
{
SetVisualScrollOffset
(
GetVisualScrollOffset
(
)
+
aPoint
)
;
}
void
ZoomBy
(
float
aScale
)
{
ZoomBy
(
gfxSize
(
aScale
aScale
)
)
;
}
void
ZoomBy
(
const
gfxSize
&
aScale
)
{
mZoom
.
xScale
*
=
aScale
.
width
;
mZoom
.
yScale
*
=
aScale
.
height
;
}
bool
HasPendingScroll
(
const
FrameMetrics
&
aContentFrameMetrics
)
const
{
return
GetVisualScrollOffset
(
)
!
=
aContentFrameMetrics
.
GetVisualScrollOffset
(
)
;
}
void
ApplyScrollUpdateFrom
(
const
ScrollPositionUpdate
&
aUpdate
)
;
CSSPoint
ApplyRelativeScrollUpdateFrom
(
const
ScrollPositionUpdate
&
aUpdate
)
;
void
UpdatePendingScrollInfo
(
const
ScrollPositionUpdate
&
aInfo
)
{
SetLayoutScrollOffset
(
aInfo
.
GetDestination
(
)
)
;
mScrollGeneration
=
aInfo
.
GetGeneration
(
)
;
mScrollUpdateType
=
ePending
;
mIsRelative
=
aInfo
.
GetType
(
)
=
=
ScrollUpdateType
:
:
Relative
;
if
(
mIsRelative
)
{
mBaseScrollOffset
=
aInfo
.
GetSource
(
)
;
}
}
public
:
void
SetPresShellResolution
(
float
aPresShellResolution
)
{
mPresShellResolution
=
aPresShellResolution
;
}
float
GetPresShellResolution
(
)
const
{
return
mPresShellResolution
;
}
void
SetCompositionBounds
(
const
ParentLayerRect
&
aCompositionBounds
)
{
mCompositionBounds
=
aCompositionBounds
;
}
const
ParentLayerRect
&
GetCompositionBounds
(
)
const
{
return
mCompositionBounds
;
}
void
SetDisplayPort
(
const
CSSRect
&
aDisplayPort
)
{
mDisplayPort
=
aDisplayPort
;
}
const
CSSRect
&
GetDisplayPort
(
)
const
{
return
mDisplayPort
;
}
void
SetCriticalDisplayPort
(
const
CSSRect
&
aCriticalDisplayPort
)
{
mCriticalDisplayPort
=
aCriticalDisplayPort
;
}
const
CSSRect
&
GetCriticalDisplayPort
(
)
const
{
return
mCriticalDisplayPort
;
}
void
SetCumulativeResolution
(
const
LayoutDeviceToLayerScale2D
&
aCumulativeResolution
)
{
mCumulativeResolution
=
aCumulativeResolution
;
}
const
LayoutDeviceToLayerScale2D
&
GetCumulativeResolution
(
)
const
{
return
mCumulativeResolution
;
}
void
SetDevPixelsPerCSSPixel
(
const
CSSToLayoutDeviceScale
&
aDevPixelsPerCSSPixel
)
{
mDevPixelsPerCSSPixel
=
aDevPixelsPerCSSPixel
;
}
const
CSSToLayoutDeviceScale
&
GetDevPixelsPerCSSPixel
(
)
const
{
return
mDevPixelsPerCSSPixel
;
}
void
SetIsRootContent
(
bool
aIsRootContent
)
{
mIsRootContent
=
aIsRootContent
;
}
bool
IsRootContent
(
)
const
{
return
mIsRootContent
;
}
void
SetBaseScrollOffset
(
const
CSSPoint
&
aScrollOffset
)
{
mBaseScrollOffset
=
aScrollOffset
;
}
void
ClampAndSetVisualScrollOffset
(
const
CSSPoint
&
aScrollOffset
)
{
SetVisualScrollOffset
(
CalculateScrollRange
(
)
.
ClampPoint
(
aScrollOffset
)
)
;
}
const
CSSPoint
&
GetBaseScrollOffset
(
)
const
{
return
mBaseScrollOffset
;
}
CSSPoint
GetLayoutScrollOffset
(
)
const
{
return
mLayoutViewport
.
TopLeft
(
)
;
}
void
SetLayoutScrollOffset
(
const
CSSPoint
&
aLayoutScrollOffset
)
{
mLayoutViewport
.
MoveTo
(
aLayoutScrollOffset
)
;
}
const
CSSPoint
&
GetVisualScrollOffset
(
)
const
{
return
mScrollOffset
;
}
void
SetVisualScrollOffset
(
const
CSSPoint
&
aVisualScrollOffset
)
{
mScrollOffset
=
aVisualScrollOffset
;
}
void
SetSmoothScrollOffset
(
const
CSSPoint
&
aSmoothScrollDestination
)
{
mSmoothScrollOffset
=
aSmoothScrollDestination
;
}
void
ClampAndSetSmoothScrollOffset
(
const
CSSPoint
&
aSmoothScrollOffset
)
{
SetSmoothScrollOffset
(
CalculateScrollRange
(
)
.
ClampPoint
(
aSmoothScrollOffset
)
)
;
}
const
CSSPoint
&
GetSmoothScrollOffset
(
)
const
{
return
mSmoothScrollOffset
;
}
void
SetZoom
(
const
CSSToParentLayerScale2D
&
aZoom
)
{
mZoom
=
aZoom
;
}
const
CSSToParentLayerScale2D
&
GetZoom
(
)
const
{
return
mZoom
;
}
void
SetScrollGeneration
(
uint32_t
aScrollGeneration
)
{
mScrollGeneration
=
aScrollGeneration
;
}
void
SetScrollOffsetUpdateType
(
ScrollOffsetUpdateType
aScrollUpdateType
)
{
mScrollUpdateType
=
aScrollUpdateType
;
}
void
SetSmoothScrollOffsetUpdated
(
int32_t
aScrollGeneration
)
{
mDoSmoothScroll
=
true
;
mScrollGeneration
=
aScrollGeneration
;
}
ScrollOffsetUpdateType
GetScrollUpdateType
(
)
const
{
return
mScrollUpdateType
;
}
bool
GetScrollOffsetUpdated
(
)
const
{
return
mScrollUpdateType
!
=
eNone
;
}
void
SetIsRelative
(
bool
aIsRelative
)
{
mIsRelative
=
aIsRelative
;
}
bool
IsRelative
(
)
const
{
return
mIsRelative
;
}
bool
IsPureRelative
(
)
const
{
return
mPureRelativeOffset
.
isSome
(
)
;
}
bool
GetDoSmoothScroll
(
)
const
{
return
mDoSmoothScroll
;
}
uint32_t
GetScrollGeneration
(
)
const
{
return
mScrollGeneration
;
}
ViewID
GetScrollId
(
)
const
{
return
mScrollId
;
}
void
SetScrollId
(
ViewID
scrollId
)
{
mScrollId
=
scrollId
;
}
void
SetRootCompositionSize
(
const
CSSSize
&
aRootCompositionSize
)
{
mRootCompositionSize
=
aRootCompositionSize
;
}
const
CSSSize
&
GetRootCompositionSize
(
)
const
{
return
mRootCompositionSize
;
}
void
SetDisplayPortMargins
(
const
ScreenMargin
&
aDisplayPortMargins
)
{
mDisplayPortMargins
=
aDisplayPortMargins
;
}
const
ScreenMargin
&
GetDisplayPortMargins
(
)
const
{
return
mDisplayPortMargins
;
}
uint32_t
GetPresShellId
(
)
const
{
return
mPresShellId
;
}
void
SetPresShellId
(
uint32_t
aPresShellId
)
{
mPresShellId
=
aPresShellId
;
}
void
SetLayoutViewport
(
const
CSSRect
&
aLayoutViewport
)
{
mLayoutViewport
=
aLayoutViewport
;
}
const
CSSRect
&
GetLayoutViewport
(
)
const
{
return
mLayoutViewport
;
}
CSSRect
GetVisualViewport
(
)
const
{
return
CSSRect
(
GetVisualScrollOffset
(
)
CalculateCompositedSizeInCssPixels
(
)
)
;
}
void
SetExtraResolution
(
const
ScreenToLayerScale2D
&
aExtraResolution
)
{
mExtraResolution
=
aExtraResolution
;
}
const
ScreenToLayerScale2D
&
GetExtraResolution
(
)
const
{
return
mExtraResolution
;
}
const
CSSRect
&
GetScrollableRect
(
)
const
{
return
mScrollableRect
;
}
void
SetScrollableRect
(
const
CSSRect
&
aScrollableRect
)
{
mScrollableRect
=
aScrollableRect
;
}
bool
IsHorizontalContentRightToLeft
(
)
const
{
return
mScrollableRect
.
x
<
0
;
}
void
SetPaintRequestTime
(
const
TimeStamp
&
aTime
)
{
mPaintRequestTime
=
aTime
;
}
const
TimeStamp
&
GetPaintRequestTime
(
)
const
{
return
mPaintRequestTime
;
}
void
SetIsScrollInfoLayer
(
bool
aIsScrollInfoLayer
)
{
mIsScrollInfoLayer
=
aIsScrollInfoLayer
;
}
bool
IsScrollInfoLayer
(
)
const
{
return
mIsScrollInfoLayer
;
}
void
SetVisualDestination
(
const
CSSPoint
&
aVisualDestination
)
{
mVisualDestination
=
aVisualDestination
;
}
const
CSSPoint
&
GetVisualDestination
(
)
const
{
return
mVisualDestination
;
}
void
SetVisualScrollUpdateType
(
ScrollOffsetUpdateType
aUpdateType
)
{
mVisualScrollUpdateType
=
aUpdateType
;
}
ScrollOffsetUpdateType
GetVisualScrollUpdateType
(
)
const
{
return
mVisualScrollUpdateType
;
}
void
RecalculateLayoutViewportOffset
(
)
;
void
SetFixedLayerMargins
(
const
ScreenMargin
&
aFixedLayerMargins
)
{
mFixedLayerMargins
=
aFixedLayerMargins
;
}
const
ScreenMargin
&
GetFixedLayerMargins
(
)
const
{
return
mFixedLayerMargins
;
}
void
SetPureRelativeOffset
(
const
Maybe
<
CSSPoint
>
&
aPureRelativeOffset
)
{
mPureRelativeOffset
=
aPureRelativeOffset
;
}
static
void
KeepLayoutViewportEnclosingVisualViewport
(
const
CSSRect
&
aVisualViewport
const
CSSRect
&
aScrollableRect
CSSRect
&
aLayoutViewport
)
;
private
:
ViewID
mScrollId
;
float
mPresShellResolution
;
ParentLayerRect
mCompositionBounds
;
CSSRect
mDisplayPort
;
CSSRect
mCriticalDisplayPort
;
CSSRect
mScrollableRect
;
LayoutDeviceToLayerScale2D
mCumulativeResolution
;
CSSToLayoutDeviceScale
mDevPixelsPerCSSPixel
;
CSSPoint
mScrollOffset
;
CSSPoint
mBaseScrollOffset
;
CSSToParentLayerScale2D
mZoom
;
uint32_t
mScrollGeneration
;
CSSPoint
mSmoothScrollOffset
;
CSSSize
mRootCompositionSize
;
ScreenMargin
mDisplayPortMargins
;
uint32_t
mPresShellId
;
CSSRect
mLayoutViewport
;
ScreenToLayerScale2D
mExtraResolution
;
TimeStamp
mPaintRequestTime
;
ScrollOffsetUpdateType
mScrollUpdateType
;
CSSPoint
mVisualDestination
;
ScrollOffsetUpdateType
mVisualScrollUpdateType
;
ScreenMargin
mFixedLayerMargins
;
Maybe
<
CSSPoint
>
mPureRelativeOffset
;
bool
mIsRootContent
:
1
;
bool
mIsRelative
:
1
;
bool
mDoSmoothScroll
:
1
;
bool
mIsScrollInfoLayer
:
1
;
void
SetDoSmoothScroll
(
bool
aValue
)
{
mDoSmoothScroll
=
aValue
;
}
}
;
struct
ScrollSnapInfo
{
ScrollSnapInfo
(
)
;
bool
operator
=
=
(
const
ScrollSnapInfo
&
aOther
)
const
{
return
mScrollSnapStrictnessX
=
=
aOther
.
mScrollSnapStrictnessX
&
&
mScrollSnapStrictnessY
=
=
aOther
.
mScrollSnapStrictnessY
&
&
mSnapPositionX
=
=
aOther
.
mSnapPositionX
&
&
mSnapPositionY
=
=
aOther
.
mSnapPositionY
&
&
mXRangeWiderThanSnapport
=
=
aOther
.
mXRangeWiderThanSnapport
&
&
mYRangeWiderThanSnapport
=
=
aOther
.
mYRangeWiderThanSnapport
&
&
mSnapportSize
=
=
aOther
.
mSnapportSize
;
}
bool
HasScrollSnapping
(
)
const
;
bool
HasSnapPositions
(
)
const
;
void
InitializeScrollSnapStrictness
(
WritingMode
aWritingMode
const
nsStyleDisplay
*
aDisplay
)
;
StyleScrollSnapStrictness
mScrollSnapStrictnessX
;
StyleScrollSnapStrictness
mScrollSnapStrictnessY
;
CopyableTArray
<
nscoord
>
mSnapPositionX
;
CopyableTArray
<
nscoord
>
mSnapPositionY
;
struct
ScrollSnapRange
{
ScrollSnapRange
(
)
=
default
;
ScrollSnapRange
(
nscoord
aStart
nscoord
aEnd
)
:
mStart
(
aStart
)
mEnd
(
aEnd
)
{
}
nscoord
mStart
;
nscoord
mEnd
;
bool
operator
=
=
(
const
ScrollSnapRange
&
aOther
)
const
{
return
mStart
=
=
aOther
.
mStart
&
&
mEnd
=
=
aOther
.
mEnd
;
}
bool
IsValid
(
nscoord
aPoint
nscoord
aSnapportSize
)
const
{
MOZ_ASSERT
(
mEnd
-
mStart
>
aSnapportSize
)
;
return
mStart
<
=
aPoint
&
&
aPoint
<
=
mEnd
-
aSnapportSize
;
}
}
;
CopyableTArray
<
ScrollSnapRange
>
mXRangeWiderThanSnapport
;
CopyableTArray
<
ScrollSnapRange
>
mYRangeWiderThanSnapport
;
nsSize
mSnapportSize
;
}
;
MOZ_DEFINE_ENUM_CLASS_WITH_BASE
(
OverscrollBehavior
uint8_t
(
Auto
Contain
None
)
)
;
struct
OverscrollBehaviorInfo
{
OverscrollBehaviorInfo
(
)
:
mBehaviorX
(
OverscrollBehavior
:
:
Auto
)
mBehaviorY
(
OverscrollBehavior
:
:
Auto
)
{
}
static
OverscrollBehaviorInfo
FromStyleConstants
(
StyleOverscrollBehavior
aBehaviorX
StyleOverscrollBehavior
aBehaviorY
)
;
bool
operator
=
=
(
const
OverscrollBehaviorInfo
&
aOther
)
const
{
return
mBehaviorX
=
=
aOther
.
mBehaviorX
&
&
mBehaviorY
=
=
aOther
.
mBehaviorY
;
}
OverscrollBehavior
mBehaviorX
;
OverscrollBehavior
mBehaviorY
;
}
;
struct
LayerClip
{
friend
struct
IPC
:
:
ParamTraits
<
mozilla
:
:
layers
:
:
LayerClip
>
;
public
:
LayerClip
(
)
:
mClipRect
(
)
mMaskLayerIndex
(
)
{
}
explicit
LayerClip
(
const
ParentLayerIntRect
&
aClipRect
)
:
mClipRect
(
aClipRect
)
mMaskLayerIndex
(
)
{
}
bool
operator
=
=
(
const
LayerClip
&
aOther
)
const
{
return
mClipRect
=
=
aOther
.
mClipRect
&
&
mMaskLayerIndex
=
=
aOther
.
mMaskLayerIndex
;
}
void
SetClipRect
(
const
ParentLayerIntRect
&
aClipRect
)
{
mClipRect
=
aClipRect
;
}
const
ParentLayerIntRect
&
GetClipRect
(
)
const
{
return
mClipRect
;
}
void
SetMaskLayerIndex
(
const
Maybe
<
size_t
>
&
aIndex
)
{
mMaskLayerIndex
=
aIndex
;
}
const
Maybe
<
size_t
>
&
GetMaskLayerIndex
(
)
const
{
return
mMaskLayerIndex
;
}
private
:
ParentLayerIntRect
mClipRect
;
Maybe
<
size_t
>
mMaskLayerIndex
;
}
;
typedef
Maybe
<
LayerClip
>
MaybeLayerClip
;
struct
ScrollMetadata
{
friend
struct
IPC
:
:
ParamTraits
<
mozilla
:
:
layers
:
:
ScrollMetadata
>
;
typedef
ScrollableLayerGuid
:
:
ViewID
ViewID
;
public
:
static
StaticAutoPtr
<
const
ScrollMetadata
>
sNullMetadata
;
ScrollMetadata
(
)
:
mMetrics
(
)
mSnapInfo
(
)
mScrollParentId
(
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
)
mBackgroundColor
(
)
mContentDescription
(
)
mLineScrollAmount
(
0
0
)
mPageScrollAmount
(
0
0
)
mScrollClip
(
)
mHasScrollgrab
(
false
)
mIsLayersIdRoot
(
false
)
mIsAutoDirRootContentRTL
(
false
)
mForceDisableApz
(
false
)
mResolutionUpdated
(
false
)
mIsRDMTouchSimulationActive
(
false
)
mOverscrollBehavior
(
)
{
}
bool
operator
=
=
(
const
ScrollMetadata
&
aOther
)
const
{
return
mMetrics
=
=
aOther
.
mMetrics
&
&
mSnapInfo
=
=
aOther
.
mSnapInfo
&
&
mScrollParentId
=
=
aOther
.
mScrollParentId
&
&
mBackgroundColor
=
=
aOther
.
mBackgroundColor
&
&
mLineScrollAmount
=
=
aOther
.
mLineScrollAmount
&
&
mPageScrollAmount
=
=
aOther
.
mPageScrollAmount
&
&
mScrollClip
=
=
aOther
.
mScrollClip
&
&
mHasScrollgrab
=
=
aOther
.
mHasScrollgrab
&
&
mIsLayersIdRoot
=
=
aOther
.
mIsLayersIdRoot
&
&
mIsAutoDirRootContentRTL
=
=
aOther
.
mIsAutoDirRootContentRTL
&
&
mForceDisableApz
=
=
aOther
.
mForceDisableApz
&
&
mResolutionUpdated
=
=
aOther
.
mResolutionUpdated
&
&
mIsRDMTouchSimulationActive
=
=
aOther
.
mIsRDMTouchSimulationActive
&
&
mDisregardedDirection
=
=
aOther
.
mDisregardedDirection
&
&
mOverscrollBehavior
=
=
aOther
.
mOverscrollBehavior
&
&
mScrollUpdates
=
=
aOther
.
mScrollUpdates
;
}
bool
operator
!
=
(
const
ScrollMetadata
&
aOther
)
const
{
return
!
operator
=
=
(
aOther
)
;
}
bool
IsDefault
(
)
const
{
ScrollMetadata
def
;
def
.
mMetrics
.
SetPresShellId
(
mMetrics
.
GetPresShellId
(
)
)
;
return
(
def
=
=
*
this
)
;
}
FrameMetrics
&
GetMetrics
(
)
{
return
mMetrics
;
}
const
FrameMetrics
&
GetMetrics
(
)
const
{
return
mMetrics
;
}
void
SetSnapInfo
(
ScrollSnapInfo
&
&
aSnapInfo
)
{
mSnapInfo
=
std
:
:
move
(
aSnapInfo
)
;
}
const
ScrollSnapInfo
&
GetSnapInfo
(
)
const
{
return
mSnapInfo
;
}
ViewID
GetScrollParentId
(
)
const
{
return
mScrollParentId
;
}
void
SetScrollParentId
(
ViewID
aParentId
)
{
mScrollParentId
=
aParentId
;
}
const
gfx
:
:
DeviceColor
&
GetBackgroundColor
(
)
const
{
return
mBackgroundColor
;
}
void
SetBackgroundColor
(
const
gfx
:
:
sRGBColor
&
aBackgroundColor
)
;
const
nsCString
&
GetContentDescription
(
)
const
{
return
mContentDescription
;
}
void
SetContentDescription
(
const
nsCString
&
aContentDescription
)
{
mContentDescription
=
aContentDescription
;
}
const
LayoutDeviceIntSize
&
GetLineScrollAmount
(
)
const
{
return
mLineScrollAmount
;
}
void
SetLineScrollAmount
(
const
LayoutDeviceIntSize
&
size
)
{
mLineScrollAmount
=
size
;
}
const
LayoutDeviceIntSize
&
GetPageScrollAmount
(
)
const
{
return
mPageScrollAmount
;
}
void
SetPageScrollAmount
(
const
LayoutDeviceIntSize
&
size
)
{
mPageScrollAmount
=
size
;
}
void
SetScrollClip
(
const
Maybe
<
LayerClip
>
&
aScrollClip
)
{
mScrollClip
=
aScrollClip
;
}
const
Maybe
<
LayerClip
>
&
GetScrollClip
(
)
const
{
return
mScrollClip
;
}
bool
HasScrollClip
(
)
const
{
return
mScrollClip
.
isSome
(
)
;
}
const
LayerClip
&
ScrollClip
(
)
const
{
return
mScrollClip
.
ref
(
)
;
}
LayerClip
&
ScrollClip
(
)
{
return
mScrollClip
.
ref
(
)
;
}
bool
HasMaskLayer
(
)
const
{
return
HasScrollClip
(
)
&
&
ScrollClip
(
)
.
GetMaskLayerIndex
(
)
;
}
Maybe
<
ParentLayerIntRect
>
GetClipRect
(
)
const
{
return
mScrollClip
.
isSome
(
)
?
Some
(
mScrollClip
-
>
GetClipRect
(
)
)
:
Nothing
(
)
;
}
void
SetHasScrollgrab
(
bool
aHasScrollgrab
)
{
mHasScrollgrab
=
aHasScrollgrab
;
}
bool
GetHasScrollgrab
(
)
const
{
return
mHasScrollgrab
;
}
void
SetIsLayersIdRoot
(
bool
aValue
)
{
mIsLayersIdRoot
=
aValue
;
}
bool
IsLayersIdRoot
(
)
const
{
return
mIsLayersIdRoot
;
}
void
SetIsAutoDirRootContentRTL
(
bool
aValue
)
{
mIsAutoDirRootContentRTL
=
aValue
;
}
bool
IsAutoDirRootContentRTL
(
)
const
{
return
mIsAutoDirRootContentRTL
;
}
void
SetForceDisableApz
(
bool
aForceDisable
)
{
mForceDisableApz
=
aForceDisable
;
}
bool
IsApzForceDisabled
(
)
const
{
return
mForceDisableApz
;
}
void
SetResolutionUpdated
(
bool
aUpdated
)
{
mResolutionUpdated
=
aUpdated
;
}
bool
IsResolutionUpdated
(
)
const
{
return
mResolutionUpdated
;
}
void
SetIsRDMTouchSimulationActive
(
bool
aValue
)
{
mIsRDMTouchSimulationActive
=
aValue
;
}
bool
GetIsRDMTouchSimulationActive
(
)
const
{
return
mIsRDMTouchSimulationActive
;
}
Maybe
<
ScrollDirection
>
GetDisregardedDirection
(
)
const
{
return
mDisregardedDirection
;
}
void
SetDisregardedDirection
(
const
Maybe
<
ScrollDirection
>
&
aValue
)
{
mDisregardedDirection
=
aValue
;
}
void
SetOverscrollBehavior
(
const
OverscrollBehaviorInfo
&
aOverscrollBehavior
)
{
mOverscrollBehavior
=
aOverscrollBehavior
;
}
const
OverscrollBehaviorInfo
&
GetOverscrollBehavior
(
)
const
{
return
mOverscrollBehavior
;
}
void
SetScrollUpdates
(
const
nsTArray
<
ScrollPositionUpdate
>
&
aUpdates
)
{
mScrollUpdates
=
aUpdates
;
}
const
nsTArray
<
ScrollPositionUpdate
>
&
GetScrollUpdates
(
)
const
{
return
mScrollUpdates
;
}
void
UpdatePendingScrollInfo
(
const
ScrollPositionUpdate
&
aInfo
)
{
mMetrics
.
UpdatePendingScrollInfo
(
aInfo
)
;
mScrollUpdates
.
Clear
(
)
;
mScrollUpdates
.
AppendElement
(
aInfo
)
;
}
private
:
FrameMetrics
mMetrics
;
ScrollSnapInfo
mSnapInfo
;
ViewID
mScrollParentId
;
gfx
:
:
DeviceColor
mBackgroundColor
;
nsCString
mContentDescription
;
LayoutDeviceIntSize
mLineScrollAmount
;
LayoutDeviceIntSize
mPageScrollAmount
;
Maybe
<
LayerClip
>
mScrollClip
;
bool
mHasScrollgrab
:
1
;
bool
mIsLayersIdRoot
:
1
;
bool
mIsAutoDirRootContentRTL
:
1
;
bool
mForceDisableApz
:
1
;
bool
mResolutionUpdated
:
1
;
bool
mIsRDMTouchSimulationActive
:
1
;
Maybe
<
ScrollDirection
>
mDisregardedDirection
;
OverscrollBehaviorInfo
mOverscrollBehavior
;
CopyableTArray
<
ScrollPositionUpdate
>
mScrollUpdates
;
}
;
typedef
nsDataHashtable
<
ScrollableLayerGuid
:
:
ViewIDHashKey
ScrollPositionUpdate
>
ScrollUpdatesMap
;
}
}
#
endif
