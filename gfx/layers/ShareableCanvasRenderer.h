#
ifndef
GFX_SHAREABLECANVASRENDERER_H
#
define
GFX_SHAREABLECANVASRENDERER_H
#
include
"
CompositorTypes
.
h
"
#
include
"
CanvasRenderer
.
h
"
#
include
"
mozilla
/
layers
/
CanvasClient
.
h
"
namespace
mozilla
{
namespace
gl
{
class
SurfaceFactory
;
}
namespace
gfx
{
class
DrawTarget
;
}
namespace
layers
{
class
ShareableCanvasRenderer
:
public
CanvasRenderer
{
friend
class
CanvasClient2D
;
friend
class
CanvasClientSharedSurface
;
protected
:
RefPtr
<
CanvasClient
>
mCanvasClient
;
private
:
layers
:
:
SurfaceDescriptor
mFrontBufferDesc
;
RefPtr
<
TextureClient
>
mFrontBufferFromDesc
;
public
:
ShareableCanvasRenderer
(
)
;
virtual
~
ShareableCanvasRenderer
(
)
;
public
:
void
Initialize
(
const
CanvasRendererData
&
)
override
;
virtual
CompositableForwarder
*
GetForwarder
(
)
=
0
;
virtual
bool
CreateCompositable
(
)
=
0
;
virtual
void
EnsurePipeline
(
bool
aIsAsync
)
=
0
;
void
ClearCachedResources
(
)
override
;
void
DisconnectClient
(
)
override
;
void
UpdateCompositableClient
(
)
;
CanvasClient
*
GetCanvasClient
(
)
{
return
mCanvasClient
;
}
private
:
RefPtr
<
TextureClient
>
GetFrontBufferFromDesc
(
const
layers
:
:
SurfaceDescriptor
&
TextureFlags
)
;
}
;
}
}
#
endif
