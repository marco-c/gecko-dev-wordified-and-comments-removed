#
ifndef
GFX_SHAREABLECANVASRENDERER_H
#
define
GFX_SHAREABLECANVASRENDERER_H
#
include
"
CompositorTypes
.
h
"
#
include
"
CopyableCanvasRenderer
.
h
"
#
include
"
mozilla
/
layers
/
CanvasClient
.
h
"
namespace
mozilla
{
namespace
gl
{
class
SurfaceFactory
;
}
namespace
gfx
{
class
DrawTarget
;
}
namespace
layers
{
class
ShareableCanvasRenderer
:
public
CopyableCanvasRenderer
{
typedef
CanvasClient
:
:
CanvasClientType
CanvasClientType
;
public
:
ShareableCanvasRenderer
(
)
;
virtual
~
ShareableCanvasRenderer
(
)
;
public
:
void
Initialize
(
const
CanvasInitializeData
&
aData
)
override
;
virtual
CompositableForwarder
*
GetForwarder
(
)
=
0
;
virtual
bool
CreateCompositable
(
)
=
0
;
void
ClearCachedResources
(
)
override
;
void
Destroy
(
)
override
;
void
UpdateCompositableClient
(
)
;
const
TextureFlags
&
Flags
(
)
const
{
return
mFlags
;
}
CanvasClient
*
GetCanvasClient
(
)
{
return
mCanvasClient
;
}
protected
:
bool
UpdateTarget
(
gfx
:
:
DrawTarget
*
aDestTarget
)
;
CanvasClientType
GetCanvasClientType
(
)
;
RefPtr
<
CanvasClient
>
mCanvasClient
;
UniquePtr
<
gl
:
:
SurfaceFactory
>
mFactory
;
TextureFlags
mFlags
;
friend
class
CanvasClient2D
;
friend
class
CanvasClientSharedSurface
;
}
;
}
}
#
endif
