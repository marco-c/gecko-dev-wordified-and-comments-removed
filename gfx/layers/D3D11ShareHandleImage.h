#
ifndef
GFX_D311_SHARE_HANDLE_IMAGE_H
#
define
GFX_D311_SHARE_HANDLE_IMAGE_H
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
d3d11
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
TextureD3D11
.
h
"
namespace
mozilla
{
namespace
layers
{
class
D3D11ShareHandleImage
:
public
Image
{
public
:
struct
Data
{
Data
(
ID3D11Device
*
aDevice
const
gfx
:
:
IntSize
&
aSize
const
gfx
:
:
IntRect
&
aRegion
)
:
mDevice
(
aDevice
)
mSize
(
aSize
)
mRegion
(
aRegion
)
{
}
RefPtr
<
ID3D11Device
>
mDevice
;
gfx
:
:
IntSize
mSize
;
gfx
:
:
IntRect
mRegion
;
}
;
D3D11ShareHandleImage
(
)
:
Image
(
NULL
ImageFormat
:
:
D3D11_SHARE_HANDLE_TEXTURE
)
mSize
(
0
0
)
{
}
virtual
~
D3D11ShareHandleImage
(
)
{
}
HRESULT
SetData
(
const
Data
&
aData
)
;
gfx
:
:
IntSize
GetSize
(
)
override
;
virtual
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetAsSourceSurface
(
)
override
;
virtual
TextureClient
*
GetTextureClient
(
CompositableClient
*
aClient
)
override
;
ID3D11Texture2D
*
GetTexture
(
)
const
;
virtual
gfx
:
:
IntRect
GetPictureRect
(
)
override
{
return
mPictureRect
;
}
private
:
gfx
:
:
IntSize
mSize
;
gfx
:
:
IntRect
mPictureRect
;
RefPtr
<
TextureClientD3D11
>
mTextureClient
;
}
;
}
}
#
endif
