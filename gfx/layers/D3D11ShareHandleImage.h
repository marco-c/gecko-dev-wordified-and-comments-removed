#
ifndef
GFX_D311_SHARE_HANDLE_IMAGE_H
#
define
GFX_D311_SHARE_HANDLE_IMAGE_H
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
d3d11
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
TextureD3D11
.
h
"
#
include
"
mozilla
/
layers
/
TextureClientRecycleAllocator
.
h
"
namespace
mozilla
{
namespace
layers
{
class
D3D11RecycleAllocator
:
public
TextureClientRecycleAllocator
{
public
:
explicit
D3D11RecycleAllocator
(
TextureForwarder
*
aAllocator
ID3D11Device
*
aDevice
)
:
TextureClientRecycleAllocator
(
aAllocator
)
mDevice
(
aDevice
)
{
}
already_AddRefed
<
TextureClient
>
CreateOrRecycleClient
(
gfx
:
:
SurfaceFormat
aFormat
const
gfx
:
:
IntSize
&
aSize
)
;
protected
:
virtual
already_AddRefed
<
TextureClient
>
Allocate
(
gfx
:
:
SurfaceFormat
aFormat
gfx
:
:
IntSize
aSize
BackendSelector
aSelector
TextureFlags
aTextureFlags
TextureAllocationFlags
aAllocFlags
)
override
;
RefPtr
<
ID3D11Device
>
mDevice
;
}
;
class
D3D11ShareHandleImage
final
:
public
Image
{
public
:
D3D11ShareHandleImage
(
const
gfx
:
:
IntSize
&
aSize
const
gfx
:
:
IntRect
&
aRect
)
;
~
D3D11ShareHandleImage
(
)
override
{
}
bool
AllocateTexture
(
D3D11RecycleAllocator
*
aAllocator
)
;
gfx
:
:
IntSize
GetSize
(
)
override
;
virtual
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetAsSourceSurface
(
)
override
;
virtual
TextureClient
*
GetTextureClient
(
CompositableClient
*
aClient
)
override
;
virtual
gfx
:
:
IntRect
GetPictureRect
(
)
override
{
return
mPictureRect
;
}
ID3D11Texture2D
*
GetTexture
(
)
const
;
private
:
gfx
:
:
IntSize
mSize
;
gfx
:
:
IntRect
mPictureRect
;
RefPtr
<
TextureClient
>
mTextureClient
;
}
;
}
}
#
endif
