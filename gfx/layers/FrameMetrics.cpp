#
include
"
FrameMetrics
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
mozilla
/
WritingModes
.
h
"
namespace
mozilla
{
namespace
layers
{
const
ScrollableLayerGuid
:
:
ViewID
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
=
0
;
void
FrameMetrics
:
:
RecalculateLayoutViewportOffset
(
)
{
if
(
!
mIsRootContent
)
{
return
;
}
KeepLayoutViewportEnclosingVisualViewport
(
GetVisualViewport
(
)
mScrollableRect
mLayoutViewport
)
;
}
void
FrameMetrics
:
:
KeepLayoutViewportEnclosingVisualViewport
(
const
CSSRect
&
aVisualViewport
const
CSSRect
&
aScrollableRect
CSSRect
&
aLayoutViewport
)
{
if
(
aLayoutViewport
.
Contains
(
aVisualViewport
)
|
|
aVisualViewport
.
Contains
(
aLayoutViewport
)
)
{
return
;
}
if
(
(
aLayoutViewport
.
Width
(
)
<
aVisualViewport
.
Width
(
)
&
&
!
FuzzyEqualsMultiplicative
(
aLayoutViewport
.
Width
(
)
aVisualViewport
.
Width
(
)
)
)
|
|
(
aLayoutViewport
.
Height
(
)
<
aVisualViewport
.
Height
(
)
&
&
!
FuzzyEqualsMultiplicative
(
aLayoutViewport
.
Height
(
)
aVisualViewport
.
Height
(
)
)
)
)
{
if
(
aLayoutViewport
.
X
(
)
<
aVisualViewport
.
X
(
)
)
{
aLayoutViewport
.
MoveToX
(
aVisualViewport
.
X
(
)
)
;
}
else
if
(
aVisualViewport
.
XMost
(
)
<
aLayoutViewport
.
XMost
(
)
)
{
aLayoutViewport
.
MoveByX
(
aVisualViewport
.
XMost
(
)
-
aLayoutViewport
.
XMost
(
)
)
;
}
if
(
aLayoutViewport
.
Y
(
)
<
aVisualViewport
.
Y
(
)
)
{
aLayoutViewport
.
MoveToY
(
aVisualViewport
.
Y
(
)
)
;
}
else
if
(
aVisualViewport
.
YMost
(
)
<
aLayoutViewport
.
YMost
(
)
)
{
aLayoutViewport
.
MoveByY
(
aVisualViewport
.
YMost
(
)
-
aLayoutViewport
.
YMost
(
)
)
;
}
}
else
{
if
(
aVisualViewport
.
X
(
)
<
aLayoutViewport
.
X
(
)
)
{
aLayoutViewport
.
MoveToX
(
aVisualViewport
.
X
(
)
)
;
}
else
if
(
aLayoutViewport
.
XMost
(
)
<
aVisualViewport
.
XMost
(
)
)
{
aLayoutViewport
.
MoveByX
(
aVisualViewport
.
XMost
(
)
-
aLayoutViewport
.
XMost
(
)
)
;
}
if
(
aVisualViewport
.
Y
(
)
<
aLayoutViewport
.
Y
(
)
)
{
aLayoutViewport
.
MoveToY
(
aVisualViewport
.
Y
(
)
)
;
}
else
if
(
aLayoutViewport
.
YMost
(
)
<
aVisualViewport
.
YMost
(
)
)
{
aLayoutViewport
.
MoveByY
(
aVisualViewport
.
YMost
(
)
-
aLayoutViewport
.
YMost
(
)
)
;
}
}
aLayoutViewport
=
aLayoutViewport
.
MoveInsideAndClamp
(
aScrollableRect
)
;
}
void
ScrollMetadata
:
:
SetUsesContainerScrolling
(
bool
aValue
)
{
mUsesContainerScrolling
=
aValue
;
}
void
ScrollSnapInfo
:
:
InitializeScrollSnapType
(
WritingMode
aWritingMode
const
nsStyleDisplay
*
aDisplay
)
{
if
(
aDisplay
-
>
mScrollSnapType
.
strictness
=
=
StyleScrollSnapStrictness
:
:
None
)
{
return
;
}
mScrollSnapTypeX
=
StyleScrollSnapStrictness
:
:
None
;
mScrollSnapTypeY
=
StyleScrollSnapStrictness
:
:
None
;
switch
(
aDisplay
-
>
mScrollSnapType
.
axis
)
{
case
StyleScrollSnapAxis
:
:
X
:
mScrollSnapTypeX
=
aDisplay
-
>
mScrollSnapType
.
strictness
;
break
;
case
StyleScrollSnapAxis
:
:
Y
:
mScrollSnapTypeY
=
aDisplay
-
>
mScrollSnapType
.
strictness
;
break
;
case
StyleScrollSnapAxis
:
:
Block
:
if
(
aWritingMode
.
IsVertical
(
)
)
{
mScrollSnapTypeX
=
aDisplay
-
>
mScrollSnapType
.
strictness
;
}
else
{
mScrollSnapTypeY
=
aDisplay
-
>
mScrollSnapType
.
strictness
;
}
break
;
case
StyleScrollSnapAxis
:
:
Inline
:
if
(
aWritingMode
.
IsVertical
(
)
)
{
mScrollSnapTypeY
=
aDisplay
-
>
mScrollSnapType
.
strictness
;
}
else
{
mScrollSnapTypeX
=
aDisplay
-
>
mScrollSnapType
.
strictness
;
}
break
;
case
StyleScrollSnapAxis
:
:
Both
:
mScrollSnapTypeX
=
aDisplay
-
>
mScrollSnapType
.
strictness
;
mScrollSnapTypeY
=
aDisplay
-
>
mScrollSnapType
.
strictness
;
break
;
}
}
static
OverscrollBehavior
ToOverscrollBehavior
(
StyleOverscrollBehavior
aBehavior
)
{
switch
(
aBehavior
)
{
case
StyleOverscrollBehavior
:
:
Auto
:
return
OverscrollBehavior
:
:
Auto
;
case
StyleOverscrollBehavior
:
:
Contain
:
return
OverscrollBehavior
:
:
Contain
;
case
StyleOverscrollBehavior
:
:
None
:
return
OverscrollBehavior
:
:
None
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
overscroll
behavior
"
)
;
return
OverscrollBehavior
:
:
Auto
;
}
OverscrollBehaviorInfo
OverscrollBehaviorInfo
:
:
FromStyleConstants
(
StyleOverscrollBehavior
aBehaviorX
StyleOverscrollBehavior
aBehaviorY
)
{
OverscrollBehaviorInfo
result
;
result
.
mBehaviorX
=
ToOverscrollBehavior
(
aBehaviorX
)
;
result
.
mBehaviorY
=
ToOverscrollBehavior
(
aBehaviorY
)
;
return
result
;
}
StaticAutoPtr
<
const
ScrollMetadata
>
ScrollMetadata
:
:
sNullMetadata
;
}
}
