#
ifndef
GFX_LAYER_DCOMP_SURFACE_IMAGE_H
#
define
GFX_LAYER_DCOMP_SURFACE_IMAGE_H
#
include
"
ImageContainer
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
namespace
mozilla
:
:
layers
{
already_AddRefed
<
TextureHost
>
CreateTextureHostDcompSurface
(
const
SurfaceDescriptor
&
aDesc
ISurfaceAllocator
*
aDeallocator
LayersBackend
aBackend
TextureFlags
aFlags
)
;
class
DcompSurfaceTexture
final
:
public
TextureData
{
public
:
static
already_AddRefed
<
TextureClient
>
CreateTextureClient
(
HANDLE
aHandle
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
KnowsCompositor
*
aKnowsCompositor
)
;
~
DcompSurfaceTexture
(
)
;
bool
Serialize
(
SurfaceDescriptor
&
aOutDescriptor
)
override
;
void
GetSubDescriptor
(
RemoteDecoderVideoSubDescriptor
*
aOutDesc
)
override
;
void
FillInfo
(
TextureData
:
:
Info
&
aInfo
)
const
{
aInfo
.
size
=
mSize
;
aInfo
.
supportsMoz2D
=
false
;
aInfo
.
canExposeMappedData
=
false
;
aInfo
.
hasSynchronization
=
false
;
}
bool
Lock
(
OpenMode
)
override
{
return
true
;
}
void
Unlock
(
)
override
{
}
void
Deallocate
(
LayersIPCChannel
*
aAllocator
)
override
{
}
private
:
DcompSurfaceTexture
(
HANDLE
aHandle
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
)
:
mHandle
(
aHandle
)
mSize
(
aSize
)
mFormat
(
aFormat
)
{
}
const
HANDLE
mHandle
;
const
gfx
:
:
IntSize
mSize
;
const
gfx
:
:
SurfaceFormat
mFormat
;
}
;
class
DcompSurfaceImage
:
public
Image
{
public
:
DcompSurfaceImage
(
HANDLE
aHandle
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
KnowsCompositor
*
aKnowsCompositor
)
;
virtual
~
DcompSurfaceImage
(
)
=
default
;
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetAsSourceSurface
(
)
override
{
return
nullptr
;
}
gfx
:
:
IntSize
GetSize
(
)
const
{
return
mTextureClient
-
>
GetSize
(
)
;
}
;
TextureClient
*
GetTextureClient
(
KnowsCompositor
*
aKnowsCompositor
)
override
;
private
:
RefPtr
<
TextureClient
>
mTextureClient
;
}
;
class
DcompSurfaceHandleHost
:
public
TextureHost
{
public
:
DcompSurfaceHandleHost
(
TextureFlags
aFlags
const
SurfaceDescriptorDcompSurface
&
aDescriptor
)
;
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
override
{
return
mFormat
;
}
gfx
:
:
IntSize
GetSize
(
)
const
override
{
return
mSize
;
}
const
char
*
Name
(
)
override
{
return
"
DcompSurfaceHandleHost
"
;
}
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
GetAsSurface
(
)
override
{
return
nullptr
;
}
void
CreateRenderTexture
(
const
wr
:
:
ExternalImageId
&
aExternalImageId
)
override
;
void
PushResourceUpdates
(
wr
:
:
TransactionBuilder
&
aResources
ResourceUpdateOp
aOp
const
Range
<
wr
:
:
ImageKey
>
&
aImageKeys
const
wr
:
:
ExternalImageId
&
aExternalImageId
)
override
;
void
PushDisplayItems
(
wr
:
:
DisplayListBuilder
&
aBuilder
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
wr
:
:
ImageRendering
aFilter
const
Range
<
wr
:
:
ImageKey
>
&
aImageKeys
PushDisplayItemFlagSet
aFlags
)
override
;
bool
SupportsExternalCompositing
(
WebRenderBackend
aBackend
)
override
{
return
true
;
}
protected
:
~
DcompSurfaceHandleHost
(
)
;
const
mozilla
:
:
UniqueFileHandle
mHandle
;
const
gfx
:
:
IntSize
mSize
;
const
gfx
:
:
SurfaceFormat
mFormat
;
}
;
}
#
endif
