#
include
"
gfxConfig
.
h
"
namespace
mozilla
{
namespace
gfx
{
static
gfxConfig
sConfig
;
void
gfxConfig
:
:
AssertStatusInitialized
(
Feature
aFeature
)
{
sConfig
.
GetState
(
aFeature
)
.
AssertInitialized
(
)
;
}
bool
gfxConfig
:
:
IsEnabled
(
Feature
aFeature
)
{
AssertStatusInitialized
(
aFeature
)
;
FeatureStatus
status
=
GetValue
(
aFeature
)
;
return
status
=
=
FeatureStatus
:
:
Available
|
|
status
=
=
FeatureStatus
:
:
ForceEnabled
;
}
bool
gfxConfig
:
:
IsDisabledByDefault
(
Feature
aFeature
)
{
AssertStatusInitialized
(
aFeature
)
;
const
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
return
state
.
DisabledByDefault
(
)
;
}
bool
gfxConfig
:
:
IsForcedOnByUser
(
Feature
aFeature
)
{
AssertStatusInitialized
(
aFeature
)
;
const
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
return
state
.
IsForcedOnByUser
(
)
;
}
FeatureStatus
gfxConfig
:
:
GetValue
(
Feature
aFeature
)
{
AssertStatusInitialized
(
aFeature
)
;
const
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
return
state
.
GetValue
(
)
;
}
bool
gfxConfig
:
:
SetDefault
(
Feature
aFeature
bool
aEnable
FeatureStatus
aDisableStatus
const
char
*
aDisableMessage
)
{
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
if
(
!
aEnable
)
{
state
.
DisableByDefault
(
aDisableStatus
aDisableMessage
)
;
return
false
;
}
state
.
EnableByDefault
(
)
;
return
true
;
}
bool
gfxConfig
:
:
InitOrUpdate
(
Feature
aFeature
bool
aEnable
FeatureStatus
aDisableStatus
const
char
*
aDisableMessage
)
{
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
if
(
!
state
.
IsInitialized
(
)
)
{
return
SetDefault
(
aFeature
aEnable
aDisableStatus
aDisableMessage
)
;
}
return
MaybeSetFailed
(
aFeature
aEnable
aDisableStatus
aDisableMessage
)
;
}
void
gfxConfig
:
:
SetFailed
(
Feature
aFeature
FeatureStatus
aStatus
const
char
*
aMessage
)
{
AssertStatusInitialized
(
aFeature
)
;
MOZ_ASSERT
(
IsFeatureStatusFailure
(
aStatus
)
)
;
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
state
.
SetRuntime
(
aStatus
aMessage
)
;
}
void
gfxConfig
:
:
Disable
(
Feature
aFeature
FeatureStatus
aStatus
const
char
*
aMessage
)
{
AssertStatusInitialized
(
aFeature
)
;
MOZ_ASSERT
(
IsFeatureStatusFailure
(
aStatus
)
)
;
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
state
.
SetEnvironment
(
aStatus
aMessage
)
;
}
void
gfxConfig
:
:
UserEnable
(
Feature
aFeature
const
char
*
aMessage
)
{
AssertStatusInitialized
(
aFeature
)
;
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
state
.
SetUser
(
FeatureStatus
:
:
Available
aMessage
)
;
}
void
gfxConfig
:
:
UserForceEnable
(
Feature
aFeature
const
char
*
aMessage
)
{
AssertStatusInitialized
(
aFeature
)
;
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
state
.
SetUser
(
FeatureStatus
:
:
ForceEnabled
aMessage
)
;
}
void
gfxConfig
:
:
UserDisable
(
Feature
aFeature
const
char
*
aMessage
)
{
AssertStatusInitialized
(
aFeature
)
;
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
state
.
SetUser
(
FeatureStatus
:
:
Disabled
aMessage
)
;
}
bool
gfxConfig
:
:
UseFallback
(
Fallback
aFallback
)
{
return
sConfig
.
UseFallbackImpl
(
aFallback
)
;
}
void
gfxConfig
:
:
EnableFallback
(
Fallback
aFallback
const
char
*
aMessage
)
{
sConfig
.
EnableFallbackImpl
(
aFallback
)
;
}
bool
gfxConfig
:
:
UseFallbackImpl
(
Fallback
aFallback
)
const
{
return
!
!
(
mFallbackBits
&
(
uint64_t
(
1
)
<
<
uint64_t
(
aFallback
)
)
)
;
}
void
gfxConfig
:
:
EnableFallbackImpl
(
Fallback
aFallback
)
{
mFallbackBits
|
=
(
uint64_t
(
1
)
<
<
uint64_t
(
aFallback
)
)
;
}
}
}
