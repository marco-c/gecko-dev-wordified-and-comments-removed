#
include
"
gfxConfig
.
h
"
namespace
mozilla
{
namespace
gfx
{
static
gfxConfig
sConfig
;
FeatureState
&
gfxConfig
:
:
GetFeature
(
Feature
aFeature
)
{
return
sConfig
.
GetState
(
aFeature
)
;
}
bool
gfxConfig
:
:
IsEnabled
(
Feature
aFeature
)
{
const
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
return
state
.
IsEnabled
(
)
;
}
bool
gfxConfig
:
:
IsDisabledByDefault
(
Feature
aFeature
)
{
const
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
return
state
.
DisabledByDefault
(
)
;
}
bool
gfxConfig
:
:
IsForcedOnByUser
(
Feature
aFeature
)
{
const
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
return
state
.
IsForcedOnByUser
(
)
;
}
FeatureStatus
gfxConfig
:
:
GetValue
(
Feature
aFeature
)
{
const
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
return
state
.
GetValue
(
)
;
}
bool
gfxConfig
:
:
SetDefault
(
Feature
aFeature
bool
aEnable
FeatureStatus
aDisableStatus
const
char
*
aDisableMessage
)
{
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
return
state
.
SetDefault
(
aEnable
aDisableStatus
aDisableMessage
)
;
}
void
gfxConfig
:
:
DisableByDefault
(
Feature
aFeature
FeatureStatus
aDisableStatus
const
char
*
aDisableMessage
)
{
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
state
.
DisableByDefault
(
aDisableStatus
aDisableMessage
)
;
}
void
gfxConfig
:
:
EnableByDefault
(
Feature
aFeature
)
{
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
state
.
EnableByDefault
(
)
;
}
bool
gfxConfig
:
:
InitOrUpdate
(
Feature
aFeature
bool
aEnable
FeatureStatus
aDisableStatus
const
char
*
aDisableMessage
)
{
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
return
state
.
InitOrUpdate
(
aEnable
aDisableStatus
aDisableMessage
)
;
}
void
gfxConfig
:
:
SetFailed
(
Feature
aFeature
FeatureStatus
aStatus
const
char
*
aMessage
)
{
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
state
.
SetFailed
(
aStatus
aMessage
)
;
}
void
gfxConfig
:
:
Disable
(
Feature
aFeature
FeatureStatus
aStatus
const
char
*
aMessage
)
{
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
state
.
Disable
(
aStatus
aMessage
)
;
}
void
gfxConfig
:
:
UserEnable
(
Feature
aFeature
const
char
*
aMessage
)
{
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
state
.
UserEnable
(
aMessage
)
;
}
void
gfxConfig
:
:
UserForceEnable
(
Feature
aFeature
const
char
*
aMessage
)
{
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
state
.
UserForceEnable
(
aMessage
)
;
}
void
gfxConfig
:
:
UserDisable
(
Feature
aFeature
const
char
*
aMessage
)
{
FeatureState
&
state
=
sConfig
.
GetState
(
aFeature
)
;
state
.
UserDisable
(
aMessage
)
;
}
bool
gfxConfig
:
:
UseFallback
(
Fallback
aFallback
)
{
return
sConfig
.
UseFallbackImpl
(
aFallback
)
;
}
void
gfxConfig
:
:
EnableFallback
(
Fallback
aFallback
const
char
*
aMessage
)
{
sConfig
.
EnableFallbackImpl
(
aFallback
)
;
}
bool
gfxConfig
:
:
UseFallbackImpl
(
Fallback
aFallback
)
const
{
return
!
!
(
mFallbackBits
&
(
uint64_t
(
1
)
<
<
uint64_t
(
aFallback
)
)
)
;
}
void
gfxConfig
:
:
EnableFallbackImpl
(
Fallback
aFallback
)
{
mFallbackBits
|
=
(
uint64_t
(
1
)
<
<
uint64_t
(
aFallback
)
)
;
}
}
}
