#
ifndef
mozilla_gfx_config_gfxConfigManager_h
#
define
mozilla_gfx_config_gfxConfigManager_h
#
include
"
gfxFeature
.
h
"
#
include
"
gfxTypes
.
h
"
#
include
"
nsCOMPtr
.
h
"
class
nsIGfxInfo
;
namespace
mozilla
{
namespace
gfx
{
class
gfxConfigManager
{
public
:
gfxConfigManager
(
)
:
mFeatureWr
(
nullptr
)
mFeatureWrQualified
(
nullptr
)
mFeatureWrCompositor
(
nullptr
)
mFeatureWrAngle
(
nullptr
)
mFeatureWrDComp
(
nullptr
)
mFeatureWrPartial
(
nullptr
)
mFeatureWrOptimizedShaders
(
nullptr
)
mFeatureWrSoftware
(
nullptr
)
mFeatureHwCompositing
(
nullptr
)
mFeatureD3D11HwAngle
(
nullptr
)
mFeatureGPUProcess
(
nullptr
)
mWrForceEnabled
(
false
)
mWrForceDisabled
(
false
)
mWrSoftwareForceEnabled
(
false
)
mWrCompositorForceEnabled
(
false
)
mWrForceAngle
(
false
)
mWrForceAngleNoGPUProcess
(
false
)
mWrDCompWinEnabled
(
false
)
mWrCompositorDCompRequired
(
false
)
mWrPartialPresent
(
false
)
mWrOptimizedShaders
(
false
)
mGPUProcessAllowSoftware
(
false
)
mXRenderEnabled
(
false
)
mWrEnvForceEnabled
(
false
)
mWrEnvForceDisabled
(
false
)
mScaledResolution
(
false
)
mDisableHwCompositingNoWr
(
false
)
mIsNightly
(
false
)
mSafeMode
(
false
)
mIsWin10OrLater
(
false
)
{
}
void
Init
(
)
;
void
ConfigureWebRender
(
)
;
void
ConfigureFromBlocklist
(
long
aFeature
FeatureState
*
aFeatureState
)
;
protected
:
void
EmplaceUserPref
(
const
char
*
aPrefName
Maybe
<
bool
>
&
aValue
)
;
void
ConfigureWebRenderQualified
(
)
;
void
ConfigureWebRenderSoftware
(
)
;
nsCOMPtr
<
nsIGfxInfo
>
mGfxInfo
;
FeatureState
*
mFeatureWr
;
FeatureState
*
mFeatureWrQualified
;
FeatureState
*
mFeatureWrCompositor
;
FeatureState
*
mFeatureWrAngle
;
FeatureState
*
mFeatureWrDComp
;
FeatureState
*
mFeatureWrPartial
;
FeatureState
*
mFeatureWrOptimizedShaders
;
FeatureState
*
mFeatureWrSoftware
;
FeatureState
*
mFeatureHwCompositing
;
FeatureState
*
mFeatureD3D11HwAngle
;
FeatureState
*
mFeatureGPUProcess
;
Maybe
<
bool
>
mWrCompositorEnabled
;
bool
mWrForceEnabled
;
bool
mWrForceDisabled
;
bool
mWrSoftwareForceEnabled
;
bool
mWrCompositorForceEnabled
;
bool
mWrForceAngle
;
bool
mWrForceAngleNoGPUProcess
;
bool
mWrDCompWinEnabled
;
bool
mWrCompositorDCompRequired
;
bool
mWrPartialPresent
;
bool
mWrOptimizedShaders
;
bool
mGPUProcessAllowSoftware
;
bool
mXRenderEnabled
;
bool
mWrEnvForceEnabled
;
bool
mWrEnvForceDisabled
;
HwStretchingSupport
mHwStretchingSupport
;
bool
mScaledResolution
;
bool
mDisableHwCompositingNoWr
;
bool
mIsNightly
;
bool
mSafeMode
;
bool
mIsWin10OrLater
;
}
;
}
}
#
endif
