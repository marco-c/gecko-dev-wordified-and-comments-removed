#
include
"
WebRenderRollout
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsXULAppAPI
.
h
"
namespace
mozilla
{
namespace
gfx
{
static
const
char
*
const
WR_ROLLOUT_PREF
=
"
gfx
.
webrender
.
all
.
qualified
"
;
static
const
bool
WR_ROLLOUT_PREF_DEFAULTVALUE
=
true
;
static
const
char
*
const
WR_ROLLOUT_DEFAULT_PREF
=
"
gfx
.
webrender
.
all
.
qualified
.
default
"
;
static
const
bool
WR_ROLLOUT_DEFAULT_PREF_DEFAULTVALUE
=
false
;
static
const
char
*
const
WR_ROLLOUT_PREF_OVERRIDE
=
"
gfx
.
webrender
.
all
.
qualified
.
gfxPref
-
default
-
override
"
;
static
const
char
*
const
WR_ROLLOUT_HW_QUALIFIED_OVERRIDE
=
"
gfx
.
webrender
.
all
.
qualified
.
hardware
-
override
"
;
static
const
char
*
const
PROFILE_BEFORE_CHANGE_TOPIC
=
"
profile
-
before
-
change
"
;
class
WrRolloutPrefShutdownSaver
final
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_IMETHOD
Observe
(
nsISupports
*
const
char
*
aTopic
const
char16_t
*
)
override
{
if
(
strcmp
(
PROFILE_BEFORE_CHANGE_TOPIC
aTopic
)
!
=
0
)
{
return
NS_OK
;
}
SaveRolloutPref
(
)
;
RefPtr
<
WrRolloutPrefShutdownSaver
>
kungFuDeathGrip
(
this
)
;
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
NS_WARN_IF
(
!
observerService
)
)
{
return
NS_ERROR_FAILURE
;
}
observerService
-
>
RemoveObserver
(
this
PROFILE_BEFORE_CHANGE_TOPIC
)
;
return
NS_OK
;
}
static
void
AddShutdownObserver
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
NS_WARN_IF
(
!
observerService
)
)
{
return
;
}
RefPtr
<
WrRolloutPrefShutdownSaver
>
wrRolloutSaver
=
new
WrRolloutPrefShutdownSaver
(
)
;
observerService
-
>
AddObserver
(
wrRolloutSaver
PROFILE_BEFORE_CHANGE_TOPIC
false
)
;
}
private
:
virtual
~
WrRolloutPrefShutdownSaver
(
)
=
default
;
void
SaveRolloutPref
(
)
{
if
(
Preferences
:
:
HasUserValue
(
WR_ROLLOUT_PREF
)
|
|
Preferences
:
:
GetType
(
WR_ROLLOUT_PREF
)
=
=
nsIPrefBranch
:
:
PREF_INVALID
)
{
return
;
}
bool
defaultValue
=
Preferences
:
:
GetBool
(
WR_ROLLOUT_PREF
false
PrefValueKind
:
:
Default
)
;
Preferences
:
:
SetBool
(
WR_ROLLOUT_DEFAULT_PREF
defaultValue
)
;
}
}
;
NS_IMPL_ISUPPORTS
(
WrRolloutPrefShutdownSaver
nsIObserver
)
void
WebRenderRollout
:
:
Init
(
)
{
WrRolloutPrefShutdownSaver
:
:
AddShutdownObserver
(
)
;
}
Maybe
<
bool
>
WebRenderRollout
:
:
CalculateQualifiedOverride
(
)
{
if
(
!
Preferences
:
:
HasUserValue
(
WR_ROLLOUT_HW_QUALIFIED_OVERRIDE
)
)
{
return
Nothing
(
)
;
}
return
Some
(
Preferences
:
:
GetBool
(
WR_ROLLOUT_HW_QUALIFIED_OVERRIDE
false
)
)
;
}
bool
WebRenderRollout
:
:
CalculateQualified
(
)
{
auto
clearPrefOnExit
=
MakeScopeExit
(
[
]
(
)
{
Preferences
:
:
ClearUser
(
WR_ROLLOUT_DEFAULT_PREF
)
;
}
)
;
if
(
!
Preferences
:
:
HasUserValue
(
WR_ROLLOUT_PREF
)
&
&
Preferences
:
:
HasUserValue
(
WR_ROLLOUT_DEFAULT_PREF
)
)
{
return
Preferences
:
:
GetBool
(
WR_ROLLOUT_DEFAULT_PREF
WR_ROLLOUT_DEFAULT_PREF_DEFAULTVALUE
)
;
}
if
(
Preferences
:
:
HasUserValue
(
WR_ROLLOUT_PREF_OVERRIDE
)
)
{
return
Preferences
:
:
GetBool
(
WR_ROLLOUT_PREF_OVERRIDE
)
;
}
return
Preferences
:
:
GetBool
(
WR_ROLLOUT_PREF
WR_ROLLOUT_PREF_DEFAULTVALUE
)
;
}
}
}
