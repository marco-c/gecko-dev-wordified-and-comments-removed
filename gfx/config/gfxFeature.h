#
ifndef
mozilla_gfx_config_gfxFeature_h
#
define
mozilla_gfx_config_gfxFeature_h
#
include
<
stdint
.
h
>
#
include
"
gfxTelemetry
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
namespace
mozilla
{
namespace
gfx
{
#
define
GFX_FEATURE_MAP
(
_
)
\
_
(
HW_COMPOSITING
Feature
"
Compositing
"
)
\
/
*
Add
new
entries
above
this
comment
*
/
enum
class
Feature
:
uint32_t
{
#
define
MAKE_ENUM
(
name
type
desc
)
name
GFX_FEATURE_MAP
(
MAKE_ENUM
)
#
undef
MAKE_ENUM
NumValues
}
;
class
FeatureState
{
public
:
FeatureStatus
GetValue
(
)
const
;
void
EnableByDefault
(
)
;
void
DisableByDefault
(
FeatureStatus
aStatus
const
char
*
aMessage
)
;
void
SetUser
(
FeatureStatus
aStatus
const
char
*
aMessage
)
;
void
SetRuntime
(
FeatureStatus
aStatus
const
char
*
aMessage
)
;
bool
IsForcedOnByUser
(
)
const
;
bool
DisabledByDefault
(
)
const
;
bool
IsInitialized
(
)
const
{
return
mDefault
.
mStatus
!
=
FeatureStatus
:
:
Unused
;
}
void
AssertInitialized
(
)
const
{
MOZ_ASSERT
(
IsInitialized
(
)
)
;
}
private
:
struct
Instance
{
char
mMessage
[
64
]
;
FeatureStatus
mStatus
;
void
Set
(
FeatureStatus
aStatus
const
char
*
aMessage
=
nullptr
)
;
}
;
Instance
mDefault
;
Instance
mUser
;
Instance
mRuntime
;
}
;
}
}
#
endif
