#
include
"
gfxVars
.
h
"
#
include
"
gfxVarReceiver
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
namespace
mozilla
{
namespace
gfx
{
StaticAutoPtr
<
gfxVars
>
gfxVars
:
:
sInstance
;
StaticAutoPtr
<
nsTArray
<
gfxVars
:
:
VarBase
*
>
>
gfxVars
:
:
sVarList
;
StaticAutoPtr
<
nsTArray
<
GfxVarUpdate
>
>
gGfxVarInitUpdates
;
void
gfxVars
:
:
SetValuesForInitialize
(
const
nsTArray
<
GfxVarUpdate
>
&
aInitUpdates
)
{
MOZ_RELEASE_ASSERT
(
!
gGfxVarInitUpdates
)
;
if
(
sInstance
)
{
for
(
const
auto
&
varUpdate
:
aInitUpdates
)
{
ApplyUpdate
(
varUpdate
)
;
}
}
else
{
gGfxVarInitUpdates
=
new
nsTArray
<
GfxVarUpdate
>
(
aInitUpdates
.
Clone
(
)
)
;
}
}
void
gfxVars
:
:
Initialize
(
)
{
if
(
sInstance
)
{
MOZ_RELEASE_ASSERT
(
!
gGfxVarInitUpdates
"
Initial
updates
should
not
be
present
after
any
gfxVars
operation
"
)
;
return
;
}
sVarList
=
new
nsTArray
<
gfxVars
:
:
VarBase
*
>
(
)
;
sInstance
=
new
gfxVars
;
if
(
XRE_IsContentProcess
(
)
)
{
MOZ_ASSERT
(
gGfxVarInitUpdates
"
Initial
updates
should
be
provided
in
content
process
"
)
;
if
(
!
gGfxVarInitUpdates
)
{
nsTArray
<
GfxVarUpdate
>
initUpdates
;
dom
:
:
ContentChild
:
:
GetSingleton
(
)
-
>
SendGetGfxVars
(
&
initUpdates
)
;
gGfxVarInitUpdates
=
new
nsTArray
<
GfxVarUpdate
>
(
std
:
:
move
(
initUpdates
)
)
;
}
for
(
const
auto
&
varUpdate
:
*
gGfxVarInitUpdates
)
{
ApplyUpdate
(
varUpdate
)
;
}
gGfxVarInitUpdates
=
nullptr
;
}
}
gfxVars
:
:
gfxVars
(
)
=
default
;
void
gfxVars
:
:
Shutdown
(
)
{
sInstance
=
nullptr
;
sVarList
=
nullptr
;
gGfxVarInitUpdates
=
nullptr
;
}
void
gfxVars
:
:
ApplyUpdate
(
const
GfxVarUpdate
&
aUpdate
)
{
MOZ_ASSERT
(
!
XRE_IsParentProcess
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
sVarList
|
|
gGfxVarInitUpdates
)
;
if
(
sVarList
)
{
sVarList
-
>
ElementAt
(
aUpdate
.
index
(
)
)
-
>
SetValue
(
aUpdate
.
value
(
)
)
;
}
else
if
(
gGfxVarInitUpdates
)
{
gGfxVarInitUpdates
-
>
AppendElement
(
aUpdate
)
;
}
}
void
gfxVars
:
:
AddReceiver
(
gfxVarReceiver
*
aReceiver
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
sInstance
-
>
mReceivers
.
Contains
(
aReceiver
)
)
{
sInstance
-
>
mReceivers
.
AppendElement
(
aReceiver
)
;
}
}
void
gfxVars
:
:
RemoveReceiver
(
gfxVarReceiver
*
aReceiver
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sInstance
)
{
sInstance
-
>
mReceivers
.
RemoveElement
(
aReceiver
)
;
}
}
nsTArray
<
GfxVarUpdate
>
gfxVars
:
:
FetchNonDefaultVars
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
sVarList
)
;
nsTArray
<
GfxVarUpdate
>
updates
;
for
(
size_t
i
=
0
;
i
<
sVarList
-
>
Length
(
)
;
i
+
+
)
{
VarBase
*
var
=
sVarList
-
>
ElementAt
(
i
)
;
if
(
var
-
>
HasDefaultValue
(
)
)
{
continue
;
}
GfxVarValue
value
;
var
-
>
GetValue
(
&
value
)
;
updates
.
AppendElement
(
GfxVarUpdate
(
i
value
)
)
;
}
return
updates
;
}
gfxVars
:
:
VarBase
:
:
VarBase
(
)
{
mIndex
=
gfxVars
:
:
sVarList
-
>
Length
(
)
;
gfxVars
:
:
sVarList
-
>
AppendElement
(
this
)
;
}
void
gfxVars
:
:
NotifyReceivers
(
VarBase
*
aVar
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
GfxVarValue
value
;
aVar
-
>
GetValue
(
&
value
)
;
GfxVarUpdate
update
(
aVar
-
>
Index
(
)
value
)
;
for
(
auto
&
receiver
:
mReceivers
)
{
receiver
-
>
OnVarChanged
(
update
)
;
}
}
}
}
