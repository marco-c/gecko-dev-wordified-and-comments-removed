#
include
"
SkConvolver
.
h
"
#
include
<
immintrin
.
h
>
namespace
skia
{
void
convolve_vertically_avx2
(
const
SkConvolutionFilter1D
:
:
ConvolutionFixed
*
filter
int
filterLen
unsigned
char
*
const
*
srcRows
int
width
unsigned
char
*
out
bool
hasAlpha
)
{
auto
*
dst
=
(
int
*
)
out
;
for
(
int
x
=
0
;
x
<
width
;
x
+
=
8
)
{
auto
accum04
=
_mm256_setzero_si256
(
)
accum15
=
_mm256_setzero_si256
(
)
accum26
=
_mm256_setzero_si256
(
)
accum37
=
_mm256_setzero_si256
(
)
;
auto
convolve_16_pixels
=
[
&
]
(
__m256i
interlaced_coeffs
__m256i
pixels_01234567
__m256i
pixels_89ABCDEF
)
{
auto
_08194C5D
=
_mm256_unpacklo_epi8
(
pixels_01234567
pixels_89ABCDEF
)
_2A3B6E7F
=
_mm256_unpackhi_epi8
(
pixels_01234567
pixels_89ABCDEF
)
;
auto
_084C
=
_mm256_unpacklo_epi8
(
_08194C5D
_mm256_setzero_si256
(
)
)
_195D
=
_mm256_unpackhi_epi8
(
_08194C5D
_mm256_setzero_si256
(
)
)
_2A6E
=
_mm256_unpacklo_epi8
(
_2A3B6E7F
_mm256_setzero_si256
(
)
)
_3B7F
=
_mm256_unpackhi_epi8
(
_2A3B6E7F
_mm256_setzero_si256
(
)
)
;
accum04
=
_mm256_add_epi32
(
accum04
_mm256_madd_epi16
(
_084C
interlaced_coeffs
)
)
;
accum15
=
_mm256_add_epi32
(
accum15
_mm256_madd_epi16
(
_195D
interlaced_coeffs
)
)
;
accum26
=
_mm256_add_epi32
(
accum26
_mm256_madd_epi16
(
_2A6E
interlaced_coeffs
)
)
;
accum37
=
_mm256_add_epi32
(
accum37
_mm256_madd_epi16
(
_3B7F
interlaced_coeffs
)
)
;
}
;
int
i
=
0
;
for
(
;
i
<
filterLen
/
2
*
2
;
i
+
=
2
)
{
convolve_16_pixels
(
_mm256_set1_epi32
(
*
(
const
int32_t
*
)
(
filter
+
i
)
)
_mm256_loadu_si256
(
(
const
__m256i
*
)
(
srcRows
[
i
+
0
]
+
x
*
4
)
)
_mm256_loadu_si256
(
(
const
__m256i
*
)
(
srcRows
[
i
+
1
]
+
x
*
4
)
)
)
;
}
if
(
i
<
filterLen
)
{
convolve_16_pixels
(
_mm256_set1_epi32
(
*
(
const
int16_t
*
)
(
filter
+
i
)
)
_mm256_loadu_si256
(
(
const
__m256i
*
)
(
srcRows
[
i
]
+
x
*
4
)
)
_mm256_setzero_si256
(
)
)
;
}
accum04
=
_mm256_srai_epi32
(
accum04
14
)
;
accum15
=
_mm256_srai_epi32
(
accum15
14
)
;
accum26
=
_mm256_srai_epi32
(
accum26
14
)
;
accum37
=
_mm256_srai_epi32
(
accum37
14
)
;
auto
pixels
=
_mm256_packus_epi16
(
_mm256_packs_epi32
(
accum04
accum15
)
_mm256_packs_epi32
(
accum26
accum37
)
)
;
if
(
hasAlpha
)
{
__m256i
max_rg
=
_mm256_max_epu8
(
pixels
_mm256_srli_epi32
(
pixels
8
)
)
max_rgb
=
_mm256_max_epu8
(
max_rg
_mm256_srli_epi32
(
pixels
16
)
)
;
pixels
=
_mm256_max_epu8
(
pixels
_mm256_slli_epi32
(
max_rgb
24
)
)
;
}
else
{
pixels
=
_mm256_or_si256
(
pixels
_mm256_set1_epi32
(
0xff000000
)
)
;
}
if
(
x
+
8
<
=
width
)
{
_mm256_storeu_si256
(
(
__m256i
*
)
dst
pixels
)
;
dst
+
=
8
;
continue
;
}
for
(
int
i
=
x
;
i
<
width
;
i
+
+
)
{
*
dst
+
+
=
_mm_cvtsi128_si32
(
_mm256_castsi256_si128
(
pixels
)
)
;
pixels
=
_mm256_permutevar8x32_epi32
(
pixels
_mm256_setr_epi32
(
1
2
3
4
5
6
7
0
)
)
;
}
}
}
}
