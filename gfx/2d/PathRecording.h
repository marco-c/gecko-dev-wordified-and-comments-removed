#
ifndef
MOZILLA_GFX_PATHRECORDING_H_
#
define
MOZILLA_GFX_PATHRECORDING_H_
#
include
"
2D
.
h
"
#
include
<
vector
>
#
include
<
ostream
>
#
include
"
PathHelpers
.
h
"
namespace
mozilla
{
namespace
gfx
{
struct
PathOp
{
enum
OpType
{
OP_MOVETO
=
0
OP_LINETO
OP_BEZIERTO
OP_QUADRATICBEZIERTO
OP_CLOSE
}
;
OpType
mType
;
Point
mP1
;
Point
mP2
;
Point
mP3
;
}
;
const
int32_t
sPointCount
[
]
=
{
1
1
3
2
0
0
}
;
class
PathRecording
;
class
DrawEventRecorderPrivate
;
class
PathBuilderRecording
:
public
PathBuilder
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
PathBuilderRecording
override
)
PathBuilderRecording
(
PathBuilder
*
aBuilder
FillRule
aFillRule
)
:
mPathBuilder
(
aBuilder
)
mFillRule
(
aFillRule
)
{
}
virtual
void
MoveTo
(
const
Point
&
aPoint
)
override
;
virtual
void
LineTo
(
const
Point
&
aPoint
)
override
;
virtual
void
BezierTo
(
const
Point
&
aCP1
const
Point
&
aCP2
const
Point
&
aCP3
)
override
;
virtual
void
QuadraticBezierTo
(
const
Point
&
aCP1
const
Point
&
aCP2
)
override
;
virtual
void
Close
(
)
override
;
virtual
void
Arc
(
const
Point
&
aOrigin
float
aRadius
float
aStartAngle
float
aEndAngle
bool
aAntiClockwise
)
override
{
ArcToBezier
(
this
aOrigin
Size
(
aRadius
aRadius
)
aStartAngle
aEndAngle
aAntiClockwise
)
;
}
virtual
Point
CurrentPoint
(
)
const
override
;
virtual
already_AddRefed
<
Path
>
Finish
(
)
override
;
virtual
BackendType
GetBackendType
(
)
const
override
{
return
BackendType
:
:
RECORDING
;
}
private
:
friend
class
PathRecording
;
RefPtr
<
PathBuilder
>
mPathBuilder
;
FillRule
mFillRule
;
std
:
:
vector
<
PathOp
>
mPathOps
;
}
;
class
PathRecording
:
public
Path
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
PathRecording
override
)
PathRecording
(
Path
*
aPath
const
std
:
:
vector
<
PathOp
>
aOps
FillRule
aFillRule
)
:
mPath
(
aPath
)
mPathOps
(
aOps
)
mFillRule
(
aFillRule
)
{
}
~
PathRecording
(
)
;
virtual
BackendType
GetBackendType
(
)
const
override
{
return
BackendType
:
:
RECORDING
;
}
virtual
already_AddRefed
<
PathBuilder
>
CopyToBuilder
(
FillRule
aFillRule
)
const
override
;
virtual
already_AddRefed
<
PathBuilder
>
TransformedCopyToBuilder
(
const
Matrix
&
aTransform
FillRule
aFillRule
)
const
override
;
virtual
bool
ContainsPoint
(
const
Point
&
aPoint
const
Matrix
&
aTransform
)
const
override
{
return
mPath
-
>
ContainsPoint
(
aPoint
aTransform
)
;
}
virtual
bool
StrokeContainsPoint
(
const
StrokeOptions
&
aStrokeOptions
const
Point
&
aPoint
const
Matrix
&
aTransform
)
const
override
{
return
mPath
-
>
StrokeContainsPoint
(
aStrokeOptions
aPoint
aTransform
)
;
}
virtual
Rect
GetBounds
(
const
Matrix
&
aTransform
=
Matrix
(
)
)
const
override
{
return
mPath
-
>
GetBounds
(
aTransform
)
;
}
virtual
Rect
GetStrokedBounds
(
const
StrokeOptions
&
aStrokeOptions
const
Matrix
&
aTransform
=
Matrix
(
)
)
const
override
{
return
mPath
-
>
GetStrokedBounds
(
aStrokeOptions
aTransform
)
;
}
virtual
void
StreamToSink
(
PathSink
*
aSink
)
const
override
{
mPath
-
>
StreamToSink
(
aSink
)
;
}
virtual
FillRule
GetFillRule
(
)
const
override
{
return
mFillRule
;
}
void
StorePath
(
std
:
:
ostream
&
aStream
)
const
;
static
void
ReadPathToBuilder
(
std
:
:
istream
&
aStream
PathBuilder
*
aBuilder
)
;
private
:
friend
class
DrawTargetWrapAndRecord
;
friend
class
DrawTargetRecording
;
friend
class
RecordedPathCreation
;
RefPtr
<
Path
>
mPath
;
std
:
:
vector
<
PathOp
>
mPathOps
;
FillRule
mFillRule
;
std
:
:
vector
<
RefPtr
<
DrawEventRecorderPrivate
>
>
mStoredRecorders
;
}
;
}
}
#
endif
