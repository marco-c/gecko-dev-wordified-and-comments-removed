#
include
"
NativeFontResourceFontconfig
.
h
"
#
include
"
ScaledFontFontconfig
.
h
"
#
include
"
UnscaledFontFreeType
.
h
"
#
include
"
Logging
.
h
"
namespace
mozilla
{
namespace
gfx
{
NativeFontResourceFontconfig
:
:
NativeFontResourceFontconfig
(
UniquePtr
<
uint8_t
[
]
>
&
&
aFontData
FT_Face
aFace
)
:
mFontData
(
Move
(
aFontData
)
)
mFace
(
aFace
)
{
}
NativeFontResourceFontconfig
:
:
~
NativeFontResourceFontconfig
(
)
{
if
(
mFace
)
{
Factory
:
:
ReleaseFTFace
(
mFace
)
;
mFace
=
nullptr
;
}
}
already_AddRefed
<
NativeFontResourceFontconfig
>
NativeFontResourceFontconfig
:
:
Create
(
uint8_t
*
aFontData
uint32_t
aDataLength
FT_Library
aFTLibrary
)
{
if
(
!
aFontData
|
|
!
aDataLength
)
{
return
nullptr
;
}
UniquePtr
<
uint8_t
[
]
>
fontData
(
new
(
fallible
)
uint8_t
[
aDataLength
]
)
;
if
(
!
fontData
)
{
return
nullptr
;
}
memcpy
(
fontData
.
get
(
)
aFontData
aDataLength
)
;
FT_Face
face
=
Factory
:
:
NewFTFaceFromData
(
aFTLibrary
fontData
.
get
(
)
aDataLength
0
)
;
if
(
!
face
)
{
return
nullptr
;
}
if
(
FT_Select_Charmap
(
face
FT_ENCODING_UNICODE
)
!
=
FT_Err_Ok
)
{
Factory
:
:
ReleaseFTFace
(
face
)
;
return
nullptr
;
}
RefPtr
<
NativeFontResourceFontconfig
>
resource
=
new
NativeFontResourceFontconfig
(
Move
(
fontData
)
face
)
;
return
resource
.
forget
(
)
;
}
already_AddRefed
<
UnscaledFont
>
NativeFontResourceFontconfig
:
:
CreateUnscaledFont
(
uint32_t
aIndex
const
uint8_t
*
aInstanceData
uint32_t
aInstanceDataLength
)
{
RefPtr
<
UnscaledFont
>
unscaledFont
=
new
UnscaledFontFontconfig
(
mFace
this
)
;
return
unscaledFont
.
forget
(
)
;
}
}
}
