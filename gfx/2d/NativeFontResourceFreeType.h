#
ifndef
mozilla_gfx_NativeFontResourceFreeType_h
#
define
mozilla_gfx_NativeFontResourceFreeType_h
#
include
"
2D
.
h
"
#
include
<
cairo
-
ft
.
h
>
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
NativeFontResourceFreeType
:
public
NativeFontResource
public
SharedFTFaceRefCountedData
<
NativeFontResourceFreeType
>
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
NativeFontResourceFreeType
override
)
#
ifdef
MOZ_WIDGET_ANDROID
static
already_AddRefed
<
NativeFontResourceFreeType
>
Create
(
uint8_t
*
aFontData
uint32_t
aDataLength
FT_Library
aFTLibrary
=
nullptr
)
;
already_AddRefed
<
UnscaledFont
>
CreateUnscaledFont
(
uint32_t
aIndex
const
uint8_t
*
aInstanceData
uint32_t
aInstanceDataLength
)
override
;
#
endif
~
NativeFontResourceFreeType
(
)
;
already_AddRefed
<
SharedFTFace
>
CloneFace
(
int
aFaceIndex
=
0
)
override
;
protected
:
NativeFontResourceFreeType
(
UniquePtr
<
uint8_t
[
]
>
&
&
aFontData
uint32_t
aDataLength
FT_Library
aFTLibrary
=
nullptr
)
;
template
<
class
T
>
static
already_AddRefed
<
T
>
CreateInternal
(
uint8_t
*
aFontData
uint32_t
aDataLength
FT_Library
aFTLibrary
)
;
UniquePtr
<
uint8_t
[
]
>
mFontData
;
uint32_t
mDataLength
;
FT_Library
mFTLibrary
;
}
;
#
ifdef
MOZ_WIDGET_GTK
class
NativeFontResourceFontconfig
final
:
public
NativeFontResourceFreeType
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
NativeFontResourceFontconfig
override
)
static
already_AddRefed
<
NativeFontResourceFontconfig
>
Create
(
uint8_t
*
aFontData
uint32_t
aDataLength
FT_Library
aFTLibrary
=
nullptr
)
;
already_AddRefed
<
UnscaledFont
>
CreateUnscaledFont
(
uint32_t
aIndex
const
uint8_t
*
aInstanceData
uint32_t
aInstanceDataLength
)
final
;
private
:
friend
class
NativeFontResourceFreeType
;
NativeFontResourceFontconfig
(
UniquePtr
<
uint8_t
[
]
>
&
&
aFontData
uint32_t
aDataLength
FT_Library
aFTLibrary
=
nullptr
)
;
}
;
#
endif
}
}
#
endif
