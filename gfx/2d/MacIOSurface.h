#
ifndef
MacIOSurface_h__
#
define
MacIOSurface_h__
#
ifdef
XP_DARWIN
#
include
<
CoreVideo
/
CoreVideo
.
h
>
#
include
<
IOSurface
/
IOSurface
.
h
>
#
include
<
QuartzCore
/
QuartzCore
.
h
>
#
include
<
dlfcn
.
h
>
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
CFTypeRefPtr
.
h
"
namespace
mozilla
{
namespace
gl
{
class
GLContext
;
}
}
struct
_CGLContextObject
;
typedef
_CGLContextObject
*
CGLContextObj
;
typedef
uint32_t
IOSurfaceID
;
#
ifdef
XP_IOS
typedef
kern_return_t
IOReturn
;
typedef
int
CGLError
;
#
endif
#
ifdef
XP_MACOSX
#
import
<
OpenGL
/
OpenGL
.
h
>
#
else
#
import
<
OpenGLES
/
ES2
/
gl
.
h
>
#
endif
#
include
"
2D
.
h
"
#
include
"
mozilla
/
RefCounted
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
class
MacIOSurface
final
:
public
mozilla
:
:
external
:
:
AtomicRefCounted
<
MacIOSurface
>
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
MacIOSurface
)
typedef
mozilla
:
:
gfx
:
:
SourceSurface
SourceSurface
;
static
already_AddRefed
<
MacIOSurface
>
CreateIOSurface
(
int
aWidth
int
aHeight
double
aContentsScaleFactor
=
1
.
0
bool
aHasAlpha
=
true
)
;
static
void
ReleaseIOSurface
(
MacIOSurface
*
aIOSurface
)
;
static
already_AddRefed
<
MacIOSurface
>
LookupSurface
(
IOSurfaceID
aSurfaceID
double
aContentsScaleFactor
=
1
.
0
bool
aHasAlpha
=
true
mozilla
:
:
gfx
:
:
YUVColorSpace
aColorSpace
=
mozilla
:
:
gfx
:
:
YUVColorSpace
:
:
UNKNOWN
)
;
explicit
MacIOSurface
(
CFTypeRefPtr
<
IOSurfaceRef
>
aIOSurfaceRef
double
aContentsScaleFactor
=
1
.
0
bool
aHasAlpha
=
true
mozilla
:
:
gfx
:
:
YUVColorSpace
aColorSpace
=
mozilla
:
:
gfx
:
:
YUVColorSpace
:
:
UNKNOWN
)
;
~
MacIOSurface
(
)
;
IOSurfaceID
GetIOSurfaceID
(
)
const
;
void
*
GetBaseAddress
(
)
const
;
void
*
GetBaseAddressOfPlane
(
size_t
planeIndex
)
const
;
size_t
GetPlaneCount
(
)
const
;
OSType
GetPixelFormat
(
)
const
;
size_t
GetWidth
(
size_t
plane
=
0
)
const
;
size_t
GetHeight
(
size_t
plane
=
0
)
const
;
double
GetContentsScaleFactor
(
)
const
{
return
mContentsScaleFactor
;
}
size_t
GetDevicePixelWidth
(
size_t
plane
=
0
)
const
;
size_t
GetDevicePixelHeight
(
size_t
plane
=
0
)
const
;
size_t
GetBytesPerRow
(
size_t
plane
=
0
)
const
;
void
Lock
(
bool
aReadOnly
=
true
)
;
void
Unlock
(
bool
aReadOnly
=
true
)
;
void
IncrementUseCount
(
)
;
void
DecrementUseCount
(
)
;
bool
HasAlpha
(
)
const
{
return
mHasAlpha
;
}
mozilla
:
:
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
;
mozilla
:
:
gfx
:
:
SurfaceFormat
GetReadFormat
(
)
const
;
void
SetYUVColorSpace
(
mozilla
:
:
gfx
:
:
YUVColorSpace
aColorSpace
)
{
mColorSpace
=
aColorSpace
;
}
mozilla
:
:
gfx
:
:
YUVColorSpace
GetYUVColorSpace
(
)
const
{
return
mColorSpace
;
}
bool
IsFullRange
(
)
const
{
return
GetPixelFormat
(
)
=
=
kCVPixelFormatType_420YpCbCr8BiPlanarFullRange
;
}
CGLError
CGLTexImageIOSurface2D
(
mozilla
:
:
gl
:
:
GLContext
*
aGL
CGLContextObj
ctxt
size_t
plane
mozilla
:
:
gfx
:
:
SurfaceFormat
*
aOutReadFormat
=
nullptr
)
;
CGLError
CGLTexImageIOSurface2D
(
CGLContextObj
ctxt
GLenum
target
GLenum
internalFormat
GLsizei
width
GLsizei
height
GLenum
format
GLenum
type
GLuint
plane
)
const
;
already_AddRefed
<
SourceSurface
>
GetAsSurface
(
)
;
static
size_t
GetMaxWidth
(
)
;
static
size_t
GetMaxHeight
(
)
;
CFTypeRefPtr
<
IOSurfaceRef
>
GetIOSurfaceRef
(
)
{
return
mIOSurfaceRef
;
}
private
:
CFTypeRefPtr
<
IOSurfaceRef
>
mIOSurfaceRef
;
double
mContentsScaleFactor
;
bool
mHasAlpha
;
mozilla
:
:
gfx
:
:
YUVColorSpace
mColorSpace
=
mozilla
:
:
gfx
:
:
YUVColorSpace
:
:
UNKNOWN
;
}
;
#
endif
#
endif
