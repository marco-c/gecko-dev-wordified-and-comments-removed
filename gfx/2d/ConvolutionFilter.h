#
ifndef
MOZILLA_GFX_CONVOLUTION_FILTER_H_
#
define
MOZILLA_GFX_CONVOLUTION_FILTER_H_
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
Types
.
h
"
namespace
skia
{
class
SkConvolutionFilter1D
;
}
namespace
mozilla
{
namespace
gfx
{
class
ConvolutionFilter
final
{
public
:
ConvolutionFilter
(
)
;
~
ConvolutionFilter
(
)
;
int32_t
MaxFilter
(
)
const
;
int32_t
NumValues
(
)
const
;
bool
GetFilterOffsetAndLength
(
int32_t
aRowIndex
int32_t
*
aResultOffset
int32_t
*
aResultLength
)
;
void
ConvolveHorizontally
(
const
uint8_t
*
aSrc
uint8_t
*
aDst
SurfaceFormat
aFormat
)
;
void
ConvolveVertically
(
uint8_t
*
const
*
aSrc
uint8_t
*
aDst
int32_t
aRowIndex
int32_t
aRowSize
SurfaceFormat
aFormat
)
;
enum
class
ResizeMethod
{
BOX
LANCZOS3
}
;
bool
ComputeResizeFilter
(
ResizeMethod
aResizeMethod
int32_t
aSrcSize
int32_t
aDstSize
)
;
static
inline
size_t
PadBytesForSIMD
(
size_t
aBytes
)
{
return
(
aBytes
+
31
)
&
~
31
;
}
const
skia
:
:
SkConvolutionFilter1D
&
GetSkiaFilter
(
)
const
{
return
*
mFilter
.
get
(
)
;
}
private
:
UniquePtr
<
skia
:
:
SkConvolutionFilter1D
>
mFilter
;
}
;
}
}
#
endif
