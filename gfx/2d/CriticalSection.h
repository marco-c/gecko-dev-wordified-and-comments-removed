#
ifndef
MOZILLA_GFX_CRITICALSECTION_H_
#
define
MOZILLA_GFX_CRITICALSECTION_H_
#
ifdef
WIN32
#
include
<
windows
.
h
>
#
else
#
include
<
pthread
.
h
>
#
include
"
mozilla
/
DebugOnly
.
h
"
#
endif
namespace
mozilla
{
namespace
gfx
{
#
ifdef
WIN32
class
CriticalSection
{
public
:
CriticalSection
(
)
{
:
:
InitializeCriticalSection
(
&
mCriticalSection
)
;
}
~
CriticalSection
(
)
{
:
:
DeleteCriticalSection
(
&
mCriticalSection
)
;
}
void
Enter
(
)
{
:
:
EnterCriticalSection
(
&
mCriticalSection
)
;
}
void
Leave
(
)
{
:
:
LeaveCriticalSection
(
&
mCriticalSection
)
;
}
protected
:
CRITICAL_SECTION
mCriticalSection
;
}
;
#
else
class
PosixCondvar
;
class
CriticalSection
{
public
:
CriticalSection
(
)
{
DebugOnly
<
int
>
err
=
pthread_mutex_init
(
&
mMutex
nullptr
)
;
MOZ_ASSERT
(
!
err
)
;
}
~
CriticalSection
(
)
{
DebugOnly
<
int
>
err
=
pthread_mutex_destroy
(
&
mMutex
)
;
MOZ_ASSERT
(
!
err
)
;
}
void
Enter
(
)
{
DebugOnly
<
int
>
err
=
pthread_mutex_lock
(
&
mMutex
)
;
MOZ_ASSERT
(
!
err
)
;
}
void
Leave
(
)
{
DebugOnly
<
int
>
err
=
pthread_mutex_unlock
(
&
mMutex
)
;
MOZ_ASSERT
(
!
err
)
;
}
protected
:
pthread_mutex_t
mMutex
;
friend
class
PosixCondVar
;
}
;
#
endif
struct
CriticalSectionAutoEnter
final
{
explicit
CriticalSectionAutoEnter
(
CriticalSection
*
aSection
)
:
mSection
(
aSection
)
{
mSection
-
>
Enter
(
)
;
}
~
CriticalSectionAutoEnter
(
)
{
mSection
-
>
Leave
(
)
;
}
protected
:
CriticalSection
*
mSection
;
}
;
}
}
#
endif
