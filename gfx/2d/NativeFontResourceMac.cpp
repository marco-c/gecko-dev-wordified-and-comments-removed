#
include
<
unordered_set
>
#
include
"
NativeFontResourceMac
.
h
"
#
include
"
UnscaledFontMac
.
h
"
#
include
"
Types
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
ifdef
MOZ_WIDGET_UIKIT
#
include
<
CoreFoundation
/
CoreFoundation
.
h
>
#
endif
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsCocoaFeatures
.
h
"
namespace
mozilla
{
namespace
gfx
{
#
define
FONT_NAME_MAX
32
static
StaticDataMutex
<
std
:
:
unordered_map
<
void
*
nsAutoCStringN
<
FONT_NAME_MAX
>
>
>
sWeakFontDataMap
(
"
WeakFonts
"
)
;
void
FontDataDeallocate
(
void
*
void
*
info
)
{
auto
fontMap
=
sWeakFontDataMap
.
Lock
(
)
;
fontMap
-
>
erase
(
info
)
;
free
(
info
)
;
}
class
NativeFontResourceMacReporter
final
:
public
nsIMemoryReporter
{
~
NativeFontResourceMacReporter
(
)
=
default
;
MOZ_DEFINE_MALLOC_SIZE_OF
(
MallocSizeOf
)
public
:
NS_DECL_ISUPPORTS
NS_IMETHOD
CollectReports
(
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aData
bool
aAnonymize
)
override
{
MOZ_COLLECT_REPORT
(
"
explicit
/
gfx
/
native
-
font
-
resource
-
mac
"
KIND_HEAP
UNITS_BYTES
SizeOfData
(
MallocSizeOf
)
"
Total
memory
used
by
native
font
API
resource
data
.
"
)
;
return
NS_OK
;
}
static
size_t
SizeOfData
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
{
auto
fontMap
=
sWeakFontDataMap
.
Lock
(
)
;
size_t
total
=
0
;
for
(
auto
&
i
:
*
fontMap
)
{
total
+
=
aMallocSizeOf
(
i
.
first
)
+
FONT_NAME_MAX
;
}
return
total
;
}
}
;
NS_IMPL_ISUPPORTS
(
NativeFontResourceMacReporter
nsIMemoryReporter
)
void
NativeFontResourceMac
:
:
RegisterMemoryReporter
(
)
{
RegisterStrongMemoryReporter
(
new
NativeFontResourceMacReporter
)
;
}
already_AddRefed
<
NativeFontResourceMac
>
NativeFontResourceMac
:
:
Create
(
uint8_t
*
aFontData
uint32_t
aDataLength
)
{
uint8_t
*
fontData
=
(
uint8_t
*
)
malloc
(
aDataLength
)
;
memcpy
(
fontData
aFontData
aDataLength
)
;
CFAllocatorContext
context
=
{
0
fontData
nullptr
nullptr
nullptr
nullptr
nullptr
FontDataDeallocate
nullptr
}
;
CFAllocatorRef
allocator
=
CFAllocatorCreate
(
kCFAllocatorDefault
&
context
)
;
CFDataRef
data
=
CFDataCreateWithBytesNoCopy
(
kCFAllocatorDefault
fontData
aDataLength
allocator
)
;
CTFontDescriptorRef
ctFontDesc
=
CTFontManagerCreateFontDescriptorFromData
(
data
)
;
CTFontRef
ctFont
=
CTFontCreateWithFontDescriptor
(
ctFontDesc
0
NULL
)
;
CGFontRef
fontRef
=
CTFontCopyGraphicsFont
(
ctFont
NULL
)
;
CFRelease
(
ctFont
)
;
if
(
!
fontRef
)
{
CFRelease
(
data
)
;
CFRelease
(
ctFontDesc
)
;
return
nullptr
;
}
nsAutoCStringN
<
FONT_NAME_MAX
>
fontName
;
CFStringRef
psname
=
CGFontCopyPostScriptName
(
fontRef
)
;
if
(
psname
)
{
const
char
*
cstr
=
CFStringGetCStringPtr
(
psname
kCFStringEncodingUTF8
)
;
if
(
cstr
)
{
fontName
.
Assign
(
cstr
)
;
}
else
{
char
buf
[
FONT_NAME_MAX
]
;
if
(
CFStringGetCString
(
psname
buf
FONT_NAME_MAX
kCFStringEncodingUTF8
)
)
{
fontName
.
Assign
(
buf
)
;
}
}
CFRelease
(
psname
)
;
}
{
auto
fontMap
=
sWeakFontDataMap
.
Lock
(
)
;
void
*
key
=
(
void
*
)
fontData
;
fontMap
-
>
insert
(
{
key
fontName
}
)
;
}
CFRelease
(
data
)
;
RefPtr
<
NativeFontResourceMac
>
fontResource
=
new
NativeFontResourceMac
(
ctFontDesc
fontRef
aDataLength
)
;
return
fontResource
.
forget
(
)
;
}
already_AddRefed
<
UnscaledFont
>
NativeFontResourceMac
:
:
CreateUnscaledFont
(
uint32_t
aIndex
const
uint8_t
*
aInstanceData
uint32_t
aInstanceDataLength
)
{
RefPtr
<
UnscaledFont
>
unscaledFont
=
new
UnscaledFontMac
(
mFontDescRef
mFontRef
true
)
;
return
unscaledFont
.
forget
(
)
;
}
}
}
