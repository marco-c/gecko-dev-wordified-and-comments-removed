#
include
"
NativeFontResourceMac
.
h
"
#
include
"
Types
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
ifdef
MOZ_WIDGET_UIKIT
#
include
<
CoreFoundation
/
CoreFoundation
.
h
>
#
endif
#
include
"
nsCocoaFeatures
.
h
"
template
<
class
T
>
class
AutoRelease
{
public
:
explicit
AutoRelease
(
T
aObject
)
:
mObject
(
aObject
)
{
}
~
AutoRelease
(
)
{
if
(
mObject
)
{
CFRelease
(
mObject
)
;
}
}
operator
T
(
)
{
return
mObject
;
}
T
forget
(
)
{
T
obj
=
mObject
;
mObject
=
nullptr
;
return
obj
;
}
private
:
T
mObject
;
}
;
static
CFDictionaryRef
CreateVariationDictionaryOrNull
(
CGFontRef
aCGFont
uint32_t
aVariationCount
const
mozilla
:
:
gfx
:
:
ScaledFont
:
:
VariationSetting
*
aVariations
)
{
if
(
!
nsCocoaFeatures
:
:
OnSierraOrLater
(
)
)
{
return
nullptr
;
}
AutoRelease
<
CTFontRef
>
ctFont
(
CTFontCreateWithGraphicsFont
(
aCGFont
0
nullptr
nullptr
)
)
;
AutoRelease
<
CFArrayRef
>
axes
(
CTFontCopyVariationAxes
(
ctFont
)
)
;
if
(
!
axes
)
{
return
nullptr
;
}
CFIndex
axisCount
=
CFArrayGetCount
(
axes
)
;
AutoRelease
<
CFMutableDictionaryRef
>
dict
(
CFDictionaryCreateMutable
(
kCFAllocatorDefault
axisCount
&
kCFTypeDictionaryKeyCallBacks
&
kCFTypeDictionaryValueCallBacks
)
)
;
bool
allDefaultValues
=
true
;
for
(
CFIndex
i
=
0
;
i
<
axisCount
;
+
+
i
)
{
CFTypeRef
axisInfo
=
CFArrayGetValueAtIndex
(
axes
i
)
;
if
(
CFDictionaryGetTypeID
(
)
!
=
CFGetTypeID
(
axisInfo
)
)
{
return
nullptr
;
}
CFDictionaryRef
axis
=
static_cast
<
CFDictionaryRef
>
(
axisInfo
)
;
CFTypeRef
axisTag
=
CFDictionaryGetValue
(
axis
kCTFontVariationAxisIdentifierKey
)
;
if
(
!
axisTag
|
|
CFGetTypeID
(
axisTag
)
!
=
CFNumberGetTypeID
(
)
)
{
return
nullptr
;
}
int64_t
tagLong
;
if
(
!
CFNumberGetValue
(
static_cast
<
CFNumberRef
>
(
axisTag
)
kCFNumberSInt64Type
&
tagLong
)
)
{
return
nullptr
;
}
CFTypeRef
axisName
=
CFDictionaryGetValue
(
axis
kCTFontVariationAxisNameKey
)
;
if
(
!
axisName
|
|
CFGetTypeID
(
axisName
)
!
=
CFStringGetTypeID
(
)
)
{
return
nullptr
;
}
CFTypeRef
min
=
CFDictionaryGetValue
(
axis
kCTFontVariationAxisMinimumValueKey
)
;
CFTypeRef
max
=
CFDictionaryGetValue
(
axis
kCTFontVariationAxisMaximumValueKey
)
;
CFTypeRef
def
=
CFDictionaryGetValue
(
axis
kCTFontVariationAxisDefaultValueKey
)
;
if
(
!
min
|
|
CFGetTypeID
(
min
)
!
=
CFNumberGetTypeID
(
)
|
|
!
max
|
|
CFGetTypeID
(
max
)
!
=
CFNumberGetTypeID
(
)
|
|
!
def
|
|
CFGetTypeID
(
def
)
!
=
CFNumberGetTypeID
(
)
)
{
return
nullptr
;
}
double
minDouble
;
double
maxDouble
;
double
defDouble
;
if
(
!
CFNumberGetValue
(
static_cast
<
CFNumberRef
>
(
min
)
kCFNumberDoubleType
&
minDouble
)
|
|
!
CFNumberGetValue
(
static_cast
<
CFNumberRef
>
(
max
)
kCFNumberDoubleType
&
maxDouble
)
|
|
!
CFNumberGetValue
(
static_cast
<
CFNumberRef
>
(
def
)
kCFNumberDoubleType
&
defDouble
)
)
{
return
nullptr
;
}
double
value
=
defDouble
;
for
(
uint32_t
j
=
0
;
j
<
aVariationCount
;
+
+
j
)
{
if
(
aVariations
[
j
]
.
mTag
=
=
tagLong
)
{
value
=
std
:
:
min
(
std
:
:
max
<
double
>
(
aVariations
[
j
]
.
mValue
minDouble
)
maxDouble
)
;
if
(
value
!
=
defDouble
)
{
allDefaultValues
=
false
;
}
break
;
}
}
AutoRelease
<
CFNumberRef
>
valueNumber
(
CFNumberCreate
(
kCFAllocatorDefault
kCFNumberDoubleType
&
value
)
)
;
CFDictionaryAddValue
(
dict
axisName
valueNumber
)
;
}
if
(
allDefaultValues
)
{
return
nullptr
;
}
return
dict
.
forget
(
)
;
}
namespace
mozilla
{
namespace
gfx
{
already_AddRefed
<
NativeFontResourceMac
>
NativeFontResourceMac
:
:
Create
(
uint8_t
*
aFontData
uint32_t
aDataLength
uint32_t
aVariationCount
const
ScaledFont
:
:
VariationSetting
*
aVariations
)
{
CFDataRef
data
=
CFDataCreate
(
kCFAllocatorDefault
aFontData
aDataLength
)
;
if
(
!
data
)
{
return
nullptr
;
}
CGDataProviderRef
provider
=
CGDataProviderCreateWithCFData
(
data
)
;
CFRelease
(
data
)
;
CGFontRef
fontRef
=
CGFontCreateWithDataProvider
(
provider
)
;
CGDataProviderRelease
(
provider
)
;
if
(
!
fontRef
)
{
return
nullptr
;
}
if
(
aVariationCount
>
0
)
{
MOZ_ASSERT
(
aVariations
)
;
AutoRelease
<
CFDictionaryRef
>
varDict
(
CreateVariationDictionaryOrNull
(
fontRef
aVariationCount
aVariations
)
)
;
if
(
varDict
)
{
CGFontRef
varFont
=
CGFontCreateCopyWithVariations
(
fontRef
varDict
)
;
if
(
varFont
)
{
CFRelease
(
fontRef
)
;
fontRef
=
varFont
;
}
}
}
RefPtr
<
NativeFontResourceMac
>
fontResource
=
new
NativeFontResourceMac
(
fontRef
)
;
return
fontResource
.
forget
(
)
;
}
already_AddRefed
<
ScaledFont
>
NativeFontResourceMac
:
:
CreateScaledFont
(
uint32_t
aIndex
Float
aGlyphSize
const
uint8_t
*
aInstanceData
uint32_t
aInstanceDataLength
)
{
RefPtr
<
ScaledFontBase
>
scaledFont
=
new
ScaledFontMac
(
mFontRef
aGlyphSize
)
;
if
(
!
scaledFont
-
>
PopulateCairoScaledFont
(
)
)
{
gfxWarning
(
)
<
<
"
Unable
to
create
cairo
scaled
Mac
font
.
"
;
return
nullptr
;
}
return
scaledFont
.
forget
(
)
;
}
}
}
