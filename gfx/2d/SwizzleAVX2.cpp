#
include
"
Swizzle
.
h
"
#
include
<
immintrin
.
h
>
#
include
<
tmmintrin
.
h
>
namespace
mozilla
{
namespace
gfx
{
template
<
bool
aSwapRB
>
void
UnpackRowRGB24_SSSE3
(
const
uint8_t
*
uint8_t
*
int32_t
)
;
template
<
bool
aSwapRB
>
void
UnpackRowRGB24_AVX2
(
const
uint8_t
*
aSrc
uint8_t
*
aDst
int32_t
aLength
)
{
if
(
aLength
<
9
)
{
UnpackRowRGB24_SSSE3
<
aSwapRB
>
(
aSrc
aDst
aLength
)
;
return
;
}
int32_t
alignedRow
=
(
aLength
-
1
)
&
~
7
;
int32_t
remainder
=
aLength
-
alignedRow
;
const
uint8_t
*
src
=
aSrc
+
alignedRow
*
3
;
uint8_t
*
dst
=
aDst
+
alignedRow
*
4
;
UnpackRowRGB24_SSSE3
<
aSwapRB
>
(
src
dst
remainder
)
;
const
__m256i
discardMask
=
_mm256_set_epi32
(
7
5
4
3
6
2
1
0
)
;
const
__m256i
colorMask
=
aSwapRB
?
_mm256_set_epi8
(
15
9
10
11
14
6
7
8
13
3
4
5
12
0
1
2
15
9
10
11
14
6
7
8
13
3
4
5
12
0
1
2
)
:
_mm256_set_epi8
(
15
11
10
9
14
8
7
6
13
5
4
3
12
2
1
0
15
11
10
9
14
8
7
6
13
5
4
3
12
2
1
0
)
;
const
__m256i
alphaMask
=
_mm256_set1_epi32
(
0xFF000000
)
;
src
-
=
8
*
3
;
dst
-
=
8
*
4
;
while
(
src
>
=
aSrc
)
{
__m256i
px
=
_mm256_loadu_si256
(
reinterpret_cast
<
const
__m256i
*
>
(
src
)
)
;
px
=
_mm256_permutevar8x32_epi32
(
px
discardMask
)
;
px
=
_mm256_shuffle_epi8
(
px
colorMask
)
;
px
=
_mm256_or_si256
(
px
alphaMask
)
;
_mm256_storeu_si256
(
reinterpret_cast
<
__m256i
*
>
(
dst
)
px
)
;
src
-
=
8
*
3
;
dst
-
=
8
*
4
;
}
}
template
void
UnpackRowRGB24_AVX2
<
false
>
(
const
uint8_t
*
uint8_t
*
int32_t
)
;
template
void
UnpackRowRGB24_AVX2
<
true
>
(
const
uint8_t
*
uint8_t
*
int32_t
)
;
}
}
