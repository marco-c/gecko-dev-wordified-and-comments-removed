#
include
"
Preferences
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
namespace
mozilla
{
namespace
gfx
{
static
PreferenceAccess
*
sAccess
=
nullptr
;
struct
Int32Pref
{
const
char
*
name
;
int32_t
*
varPtr
;
}
;
static
Vector
<
Int32Pref
>
&
Int32Prefs
(
)
{
static
Vector
<
Int32Pref
>
*
sInt32Prefs
=
new
Vector
<
Int32Pref
>
(
)
;
return
*
sInt32Prefs
;
}
int32_t
PreferenceAccess
:
:
RegisterLivePref
(
const
char
*
aName
int32_t
*
aVar
int32_t
aDefault
)
{
if
(
!
Int32Prefs
(
)
.
append
(
Int32Pref
{
aName
aVar
}
)
)
{
MOZ_CRASH
(
"
GFX
:
RegisterLivePref
failure
"
)
;
}
return
aDefault
;
}
void
PreferenceAccess
:
:
SetAccess
(
PreferenceAccess
*
aAccess
)
{
sAccess
=
aAccess
;
if
(
!
sAccess
)
{
return
;
}
#
if
defined
(
DEBUG
)
static
uint32_t
sProvideAccessCount
;
MOZ_ASSERT
(
!
sProvideAccessCount
+
+
"
ProvideAccess
must
only
be
called
with
non
-
nullptr
once
.
"
)
;
#
endif
for
(
Int32Pref
pref
:
Int32Prefs
(
)
)
{
sAccess
-
>
LivePref
(
pref
.
name
pref
.
varPtr
*
pref
.
varPtr
)
;
}
Int32Prefs
(
)
.
clearAndFree
(
)
;
}
}
}
