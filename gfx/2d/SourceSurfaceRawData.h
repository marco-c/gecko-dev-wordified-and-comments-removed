#
ifndef
MOZILLA_GFX_SOURCESURFACERAWDATA_H_
#
define
MOZILLA_GFX_SOURCESURFACERAWDATA_H_
#
include
"
2D
.
h
"
#
include
"
Tools
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
SourceSurfaceRawData
:
public
DataSourceSurface
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
DataSourceSurfaceRawData
override
)
SourceSurfaceRawData
(
)
:
mRawData
(
0
)
mStride
(
0
)
mFormat
(
SurfaceFormat
:
:
UNKNOWN
)
mMapCount
(
0
)
mOwnData
(
false
)
mDeallocator
(
nullptr
)
mClosure
(
nullptr
)
{
}
virtual
~
SourceSurfaceRawData
(
)
{
if
(
mDeallocator
)
{
mDeallocator
(
mClosure
)
;
}
else
if
(
mOwnData
)
{
delete
[
]
mRawData
;
}
MOZ_ASSERT
(
mMapCount
=
=
0
)
;
}
virtual
uint8_t
*
GetData
(
)
override
{
return
mRawData
;
}
virtual
int32_t
Stride
(
)
override
{
return
mStride
;
}
virtual
SurfaceType
GetType
(
)
const
override
{
return
SurfaceType
:
:
DATA
;
}
virtual
IntSize
GetSize
(
)
const
override
{
return
mSize
;
}
virtual
SurfaceFormat
GetFormat
(
)
const
override
{
return
mFormat
;
}
virtual
void
GuaranteePersistance
(
)
override
;
virtual
bool
Map
(
MapType
MappedSurface
*
aMappedSurface
)
override
{
aMappedSurface
-
>
mData
=
GetData
(
)
;
aMappedSurface
-
>
mStride
=
Stride
(
)
;
bool
success
=
!
!
aMappedSurface
-
>
mData
;
if
(
success
)
{
mMapCount
+
+
;
}
return
success
;
}
virtual
void
Unmap
(
)
override
{
mMapCount
-
-
;
MOZ_ASSERT
(
mMapCount
>
=
0
)
;
}
private
:
friend
class
Factory
;
void
InitWrappingData
(
unsigned
char
*
aData
const
IntSize
&
aSize
int32_t
aStride
SurfaceFormat
aFormat
Factory
:
:
SourceSurfaceDeallocator
aDeallocator
void
*
aClosure
)
;
uint8_t
*
mRawData
;
int32_t
mStride
;
SurfaceFormat
mFormat
;
IntSize
mSize
;
Atomic
<
int32_t
>
mMapCount
;
bool
mOwnData
;
Factory
:
:
SourceSurfaceDeallocator
mDeallocator
;
void
*
mClosure
;
}
;
class
SourceSurfaceAlignedRawData
:
public
DataSourceSurface
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
DataSourceSurfaceAlignedRawData
override
)
SourceSurfaceAlignedRawData
(
)
:
mStride
(
0
)
mFormat
(
SurfaceFormat
:
:
UNKNOWN
)
mMapCount
(
0
)
{
}
~
SourceSurfaceAlignedRawData
(
)
{
MOZ_ASSERT
(
mMapCount
=
=
0
)
;
}
bool
Init
(
const
IntSize
&
aSize
SurfaceFormat
aFormat
bool
aClearMem
uint8_t
aClearValue
int32_t
aStride
=
0
)
;
virtual
uint8_t
*
GetData
(
)
override
{
return
mArray
;
}
virtual
int32_t
Stride
(
)
override
{
return
mStride
;
}
virtual
SurfaceType
GetType
(
)
const
override
{
return
SurfaceType
:
:
DATA
;
}
virtual
IntSize
GetSize
(
)
const
override
{
return
mSize
;
}
virtual
SurfaceFormat
GetFormat
(
)
const
override
{
return
mFormat
;
}
void
AddSizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
size_t
&
aHeapSizeOut
size_t
&
aNonHeapSizeOut
size_t
&
aExtHandlesOut
uint64_t
&
aExtIdOut
)
const
override
;
virtual
bool
Map
(
MapType
MappedSurface
*
aMappedSurface
)
override
{
aMappedSurface
-
>
mData
=
GetData
(
)
;
aMappedSurface
-
>
mStride
=
Stride
(
)
;
bool
success
=
!
!
aMappedSurface
-
>
mData
;
if
(
success
)
{
mMapCount
+
+
;
}
return
success
;
}
virtual
void
Unmap
(
)
override
{
mMapCount
-
-
;
MOZ_ASSERT
(
mMapCount
>
=
0
)
;
}
private
:
friend
class
Factory
;
AlignedArray
<
uint8_t
>
mArray
;
int32_t
mStride
;
SurfaceFormat
mFormat
;
IntSize
mSize
;
Atomic
<
int32_t
>
mMapCount
;
}
;
}
}
#
endif
