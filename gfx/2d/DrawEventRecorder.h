#
ifndef
MOZILLA_GFX_DRAWEVENTRECORDER_H_
#
define
MOZILLA_GFX_DRAWEVENTRECORDER_H_
#
include
"
2D
.
h
"
#
include
"
RecordedEvent
.
h
"
#
include
"
RecordingTypes
.
h
"
#
include
<
ostream
>
#
include
<
fstream
>
#
include
<
unordered_set
>
#
include
<
unordered_map
>
namespace
mozilla
{
namespace
gfx
{
class
PathRecording
;
class
DrawEventRecorderPrivate
:
public
DrawEventRecorder
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
DrawEventRecorderPrivate
)
DrawEventRecorderPrivate
(
)
;
virtual
~
DrawEventRecorderPrivate
(
)
{
}
virtual
void
Finish
(
)
{
for
(
auto
font
=
mStoredFonts
.
begin
(
)
;
font
!
=
mStoredFonts
.
end
(
)
;
)
{
auto
oldFont
=
font
+
+
;
(
*
oldFont
)
-
>
RemoveUserData
(
reinterpret_cast
<
UserDataKey
*
>
(
this
)
)
;
}
for
(
auto
surface
=
mStoredSurfaces
.
begin
(
)
;
surface
!
=
mStoredSurfaces
.
end
(
)
;
)
{
auto
oldSurface
=
surface
+
+
;
(
*
oldSurface
)
-
>
RemoveUserData
(
reinterpret_cast
<
UserDataKey
*
>
(
this
)
)
;
}
}
template
<
class
S
>
void
WriteHeader
(
S
&
aStream
)
{
WriteElement
(
aStream
kMagicInt
)
;
WriteElement
(
aStream
kMajorRevision
)
;
WriteElement
(
aStream
kMinorRevision
)
;
}
virtual
void
RecordEvent
(
const
RecordedEvent
&
aEvent
)
=
0
;
void
WritePath
(
const
PathRecording
*
aPath
)
;
void
AddStoredObject
(
const
ReferencePtr
aObject
)
{
mStoredObjects
.
insert
(
aObject
)
;
}
void
RemoveStoredObject
(
const
ReferencePtr
aObject
)
{
mStoredObjects
.
erase
(
aObject
)
;
}
void
AddScaledFont
(
ScaledFont
*
aFont
)
{
mStoredFonts
.
insert
(
aFont
)
;
}
void
RemoveScaledFont
(
ScaledFont
*
aFont
)
{
mStoredFonts
.
erase
(
aFont
)
;
}
void
AddSourceSurface
(
SourceSurface
*
aSurface
)
{
mStoredSurfaces
.
insert
(
aSurface
)
;
}
void
RemoveSourceSurface
(
SourceSurface
*
aSurface
)
{
mStoredSurfaces
.
erase
(
aSurface
)
;
}
bool
HasStoredObject
(
const
ReferencePtr
aObject
)
{
return
mStoredObjects
.
find
(
aObject
)
!
=
mStoredObjects
.
end
(
)
;
}
void
AddStoredFontData
(
const
uint64_t
aFontDataKey
)
{
mStoredFontData
.
insert
(
aFontDataKey
)
;
}
bool
HasStoredFontData
(
const
uint64_t
aFontDataKey
)
{
return
mStoredFontData
.
find
(
aFontDataKey
)
!
=
mStoredFontData
.
end
(
)
;
}
size_t
GetUnscaledFontIndex
(
UnscaledFont
*
aFont
)
{
auto
i
=
mUnscaledFontMap
.
find
(
aFont
)
;
size_t
index
;
if
(
i
=
=
mUnscaledFontMap
.
end
(
)
)
{
mUnscaledFonts
.
push_back
(
aFont
)
;
index
=
mUnscaledFonts
.
size
(
)
-
1
;
mUnscaledFontMap
.
insert
(
{
{
aFont
index
}
}
)
;
}
else
{
index
=
i
-
>
second
;
}
return
index
;
}
bool
WantsExternalFonts
(
)
{
return
mExternalFonts
;
}
protected
:
virtual
void
Flush
(
)
=
0
;
std
:
:
unordered_set
<
const
void
*
>
mStoredObjects
;
std
:
:
unordered_set
<
uint64_t
>
mStoredFontData
;
std
:
:
unordered_set
<
ScaledFont
*
>
mStoredFonts
;
std
:
:
unordered_set
<
SourceSurface
*
>
mStoredSurfaces
;
std
:
:
vector
<
RefPtr
<
UnscaledFont
>
>
mUnscaledFonts
;
std
:
:
unordered_map
<
UnscaledFont
*
size_t
>
mUnscaledFontMap
;
bool
mExternalFonts
;
}
;
class
DrawEventRecorderFile
:
public
DrawEventRecorderPrivate
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
DrawEventRecorderFile
override
)
explicit
DrawEventRecorderFile
(
const
char
*
aFilename
)
;
~
DrawEventRecorderFile
(
)
;
void
RecordEvent
(
const
RecordedEvent
&
aEvent
)
override
;
bool
IsOpen
(
)
;
void
OpenNew
(
const
char
*
aFilename
)
;
void
Close
(
)
;
private
:
void
Flush
(
)
override
;
std
:
:
ofstream
mOutputStream
;
}
;
class
DrawEventRecorderMemory
final
:
public
DrawEventRecorderPrivate
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
DrawEventRecorderMemory
override
)
DrawEventRecorderMemory
(
)
;
void
RecordEvent
(
const
RecordedEvent
&
aEvent
)
override
;
size_t
RecordingSize
(
)
;
void
WipeRecording
(
)
;
MemStream
mOutputStream
;
private
:
~
DrawEventRecorderMemory
(
)
{
}
;
void
Flush
(
)
override
;
}
;
}
}
#
endif
