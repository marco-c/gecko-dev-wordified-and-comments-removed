#
ifndef
MOZILLA_GFX_DRAWEVENTRECORDER_H_
#
define
MOZILLA_GFX_DRAWEVENTRECORDER_H_
#
include
"
2D
.
h
"
#
include
"
RecordedEvent
.
h
"
#
include
"
RecordingTypes
.
h
"
#
include
<
unordered_set
>
#
include
<
unordered_map
>
#
include
<
functional
>
#
include
<
vector
>
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
nsTHashSet
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
PathRecording
;
class
DrawEventRecorderPrivate
:
public
DrawEventRecorder
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
DrawEventRecorderPrivate
override
)
DrawEventRecorderPrivate
(
)
;
virtual
~
DrawEventRecorderPrivate
(
)
=
default
;
bool
Finish
(
)
override
{
ClearResources
(
)
;
return
true
;
}
virtual
void
FlushItem
(
IntRect
)
{
}
void
DetachResources
(
)
{
for
(
auto
font
=
mStoredFonts
.
begin
(
)
;
font
!
=
mStoredFonts
.
end
(
)
;
)
{
auto
oldFont
=
font
+
+
;
(
*
oldFont
)
-
>
RemoveUserData
(
reinterpret_cast
<
UserDataKey
*
>
(
this
)
)
;
}
for
(
auto
surface
=
mStoredSurfaces
.
begin
(
)
;
surface
!
=
mStoredSurfaces
.
end
(
)
;
)
{
auto
oldSurface
=
surface
+
+
;
(
*
oldSurface
)
-
>
RemoveUserData
(
reinterpret_cast
<
UserDataKey
*
>
(
this
)
)
;
}
mStoredFonts
.
clear
(
)
;
mStoredSurfaces
.
clear
(
)
;
}
void
ClearResources
(
)
{
mStoredObjects
.
clear
(
)
;
mStoredFontData
.
clear
(
)
;
mScaledFonts
.
clear
(
)
;
}
template
<
class
S
>
void
WriteHeader
(
S
&
aStream
)
{
WriteElement
(
aStream
kMagicInt
)
;
WriteElement
(
aStream
kMajorRevision
)
;
WriteElement
(
aStream
kMinorRevision
)
;
}
virtual
void
RecordEvent
(
const
RecordedEvent
&
aEvent
)
=
0
;
void
AddStoredObject
(
const
ReferencePtr
aObject
)
{
PendingDeletionsVector
pendingDeletions
;
{
auto
lockedPendingDeletions
=
mPendingDeleltions
.
Lock
(
)
;
pendingDeletions
.
swap
(
*
lockedPendingDeletions
)
;
}
for
(
const
auto
&
pendingDeletion
:
pendingDeletions
)
{
pendingDeletion
(
)
;
}
mStoredObjects
.
insert
(
aObject
)
;
}
void
AddPendingDeletion
(
std
:
:
function
<
void
(
)
>
&
&
aPendingDeletion
)
{
auto
lockedPendingDeletions
=
mPendingDeleltions
.
Lock
(
)
;
lockedPendingDeletions
-
>
emplace_back
(
std
:
:
move
(
aPendingDeletion
)
)
;
}
void
RemoveStoredObject
(
const
ReferencePtr
aObject
)
{
mStoredObjects
.
erase
(
aObject
)
;
}
int32_t
IncrementUnscaledFontRefCount
(
const
ReferencePtr
aUnscaledFont
)
{
int32_t
&
count
=
mUnscaledFontRefs
[
aUnscaledFont
]
;
return
count
+
+
;
}
void
DecrementUnscaledFontRefCount
(
const
ReferencePtr
aUnscaledFont
)
;
void
AddScaledFont
(
ScaledFont
*
aFont
)
{
if
(
mStoredFonts
.
insert
(
aFont
)
.
second
&
&
WantsExternalFonts
(
)
)
{
mScaledFonts
.
push_back
(
aFont
)
;
}
}
void
RemoveScaledFont
(
ScaledFont
*
aFont
)
{
mStoredFonts
.
erase
(
aFont
)
;
}
void
AddSourceSurface
(
SourceSurface
*
aSurface
)
{
mStoredSurfaces
.
insert
(
aSurface
)
;
}
void
RemoveSourceSurface
(
SourceSurface
*
aSurface
)
{
mStoredSurfaces
.
erase
(
aSurface
)
;
}
bool
HasStoredObject
(
const
ReferencePtr
aObject
)
{
return
mStoredObjects
.
find
(
aObject
)
!
=
mStoredObjects
.
end
(
)
;
}
void
AddStoredFontData
(
const
uint64_t
aFontDataKey
)
{
mStoredFontData
.
insert
(
aFontDataKey
)
;
}
bool
HasStoredFontData
(
const
uint64_t
aFontDataKey
)
{
return
mStoredFontData
.
find
(
aFontDataKey
)
!
=
mStoredFontData
.
end
(
)
;
}
bool
WantsExternalFonts
(
)
const
{
return
mExternalFonts
;
}
void
TakeExternalSurfaces
(
std
:
:
vector
<
RefPtr
<
SourceSurface
>
>
&
aSurfaces
)
{
aSurfaces
=
std
:
:
move
(
mExternalSurfaces
)
;
}
virtual
void
StoreSourceSurfaceRecording
(
SourceSurface
*
aSurface
const
char
*
aReason
)
;
void
RecordSourceSurfaceDestruction
(
void
*
aSurface
)
;
virtual
void
AddDependentSurface
(
uint64_t
aDependencyId
)
{
MOZ_CRASH
(
"
GFX
:
AddDependentSurface
"
)
;
}
protected
:
void
StoreExternalSurfaceRecording
(
SourceSurface
*
aSurface
uint64_t
aKey
)
;
virtual
void
Flush
(
)
=
0
;
std
:
:
unordered_set
<
const
void
*
>
mStoredObjects
;
using
PendingDeletionsVector
=
std
:
:
vector
<
std
:
:
function
<
void
(
)
>
>
;
DataMutex
<
PendingDeletionsVector
>
mPendingDeleltions
{
"
DrawEventRecorderPrivate
:
:
mPendingDeleltions
"
}
;
std
:
:
unordered_map
<
const
void
*
int32_t
>
mUnscaledFontRefs
;
std
:
:
unordered_set
<
uint64_t
>
mStoredFontData
;
std
:
:
unordered_set
<
ScaledFont
*
>
mStoredFonts
;
std
:
:
vector
<
RefPtr
<
ScaledFont
>
>
mScaledFonts
;
std
:
:
unordered_set
<
SourceSurface
*
>
mStoredSurfaces
;
std
:
:
vector
<
RefPtr
<
SourceSurface
>
>
mExternalSurfaces
;
bool
mExternalFonts
;
}
;
typedef
std
:
:
function
<
void
(
MemStream
&
aStream
std
:
:
vector
<
RefPtr
<
ScaledFont
>
>
&
aScaledFonts
)
>
SerializeResourcesFn
;
class
DrawEventRecorderMemory
:
public
DrawEventRecorderPrivate
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
DrawEventRecorderMemory
override
)
DrawEventRecorderMemory
(
)
;
explicit
DrawEventRecorderMemory
(
const
SerializeResourcesFn
&
aSerialize
)
;
void
RecordEvent
(
const
RecordedEvent
&
aEvent
)
override
;
void
AddDependentSurface
(
uint64_t
aDependencyId
)
override
;
nsTHashSet
<
uint64_t
>
&
&
TakeDependentSurfaces
(
)
;
size_t
RecordingSize
(
)
;
void
WipeRecording
(
)
;
bool
Finish
(
)
override
;
void
FlushItem
(
IntRect
)
override
;
MemStream
mOutputStream
;
MemStream
mIndex
;
protected
:
virtual
~
DrawEventRecorderMemory
(
)
=
default
;
private
:
SerializeResourcesFn
mSerializeCallback
;
nsTHashSet
<
uint64_t
>
mDependentSurfaces
;
void
Flush
(
)
override
;
}
;
}
}
#
endif
