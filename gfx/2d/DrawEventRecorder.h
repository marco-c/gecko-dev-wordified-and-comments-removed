#
ifndef
MOZILLA_GFX_DRAWEVENTRECORDER_H_
#
define
MOZILLA_GFX_DRAWEVENTRECORDER_H_
#
include
"
2D
.
h
"
#
include
"
RecordedEvent
.
h
"
#
include
<
ostream
>
#
include
<
fstream
>
#
if
defined
(
_MSC_VER
)
#
include
<
unordered_set
>
#
else
#
include
<
set
>
#
endif
namespace
mozilla
{
namespace
gfx
{
class
PathRecording
;
class
DrawEventRecorderPrivate
:
public
DrawEventRecorder
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
DrawEventRecorderPrivate
)
explicit
DrawEventRecorderPrivate
(
std
:
:
ostream
*
aStream
)
;
virtual
~
DrawEventRecorderPrivate
(
)
{
}
void
WriteHeader
(
)
;
void
RecordEvent
(
const
RecordedEvent
&
aEvent
)
;
void
WritePath
(
const
PathRecording
*
aPath
)
;
void
AddStoredObject
(
const
ReferencePtr
aObject
)
{
mStoredObjects
.
insert
(
aObject
)
;
}
void
RemoveStoredObject
(
const
ReferencePtr
aObject
)
{
mStoredObjects
.
erase
(
aObject
)
;
}
bool
HasStoredObject
(
const
ReferencePtr
aObject
)
{
return
mStoredObjects
.
find
(
aObject
)
!
=
mStoredObjects
.
end
(
)
;
}
protected
:
std
:
:
ostream
*
mOutputStream
;
virtual
void
Flush
(
)
=
0
;
#
if
defined
(
_MSC_VER
)
typedef
std
:
:
unordered_set
<
const
void
*
>
ObjectSet
;
#
else
typedef
std
:
:
set
<
const
void
*
>
ObjectSet
;
#
endif
ObjectSet
mStoredObjects
;
}
;
class
DrawEventRecorderFile
:
public
DrawEventRecorderPrivate
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
DrawEventRecorderFile
)
explicit
DrawEventRecorderFile
(
const
char
*
aFilename
)
;
~
DrawEventRecorderFile
(
)
;
private
:
virtual
void
Flush
(
)
;
std
:
:
ofstream
mOutputFile
;
}
;
class
DrawEventRecorderMemory
final
:
public
DrawEventRecorderPrivate
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
DrawEventRecorderMemory
)
DrawEventRecorderMemory
(
)
;
size_t
RecordingSize
(
)
;
bool
CopyRecording
(
char
*
aBuffer
size_t
aBufferLen
)
;
void
WipeRecording
(
)
;
private
:
~
DrawEventRecorderMemory
(
)
{
}
;
void
Flush
(
)
final
;
std
:
:
stringstream
mMemoryStream
;
}
;
}
}
#
endif
