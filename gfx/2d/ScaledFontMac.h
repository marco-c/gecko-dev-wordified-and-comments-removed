#
ifndef
MOZILLA_GFX_SCALEDFONTMAC_H_
#
define
MOZILLA_GFX_SCALEDFONTMAC_H_
#
ifdef
MOZ_WIDGET_COCOA
#
include
<
ApplicationServices
/
ApplicationServices
.
h
>
#
else
#
include
<
CoreGraphics
/
CoreGraphics
.
h
>
#
include
<
CoreText
/
CoreText
.
h
>
#
endif
#
include
"
2D
.
h
"
#
include
"
ScaledFontBase
.
h
"
namespace
mozilla
{
namespace
gfx
{
CTFontRef
CreateCTFontFromCGFontWithVariations
(
CGFontRef
aCGFont
CGFloat
aSize
bool
aInstalledFont
CTFontDescriptorRef
aFontDesc
=
nullptr
)
;
class
UnscaledFontMac
;
class
ScaledFontMac
:
public
ScaledFontBase
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
ScaledFontMac
override
)
ScaledFontMac
(
CGFontRef
aFont
const
RefPtr
<
UnscaledFont
>
&
aUnscaledFont
Float
aSize
bool
aOwnsFont
=
false
bool
aUseFontSmoothing
=
true
bool
aApplySyntheticBold
=
false
bool
aHasColorGlyphs
=
false
)
;
ScaledFontMac
(
CTFontRef
aFont
const
RefPtr
<
UnscaledFont
>
&
aUnscaledFont
bool
aUseFontSmoothing
=
true
bool
aApplySyntheticBold
=
false
bool
aHasColorGlyphs
=
false
)
;
~
ScaledFontMac
(
)
;
FontType
GetType
(
)
const
override
{
return
FontType
:
:
MAC
;
}
SkTypeface
*
CreateSkTypeface
(
)
override
;
void
SetupSkFontDrawOptions
(
SkFont
&
aFont
)
override
;
already_AddRefed
<
Path
>
GetPathForGlyphs
(
const
GlyphBuffer
&
aBuffer
const
DrawTarget
*
aTarget
)
override
;
bool
GetFontInstanceData
(
FontInstanceDataOutput
aCb
void
*
aBaton
)
override
;
bool
GetWRFontInstanceOptions
(
Maybe
<
wr
:
:
FontInstanceOptions
>
*
aOutOptions
Maybe
<
wr
:
:
FontInstancePlatformOptions
>
*
aOutPlatformOptions
std
:
:
vector
<
FontVariation
>
*
aOutVariations
)
override
;
bool
CanSerialize
(
)
override
{
return
true
;
}
bool
MayUseBitmaps
(
)
override
{
return
mHasColorGlyphs
;
}
bool
UseSubpixelPosition
(
)
const
override
{
return
true
;
}
cairo_font_face_t
*
CreateCairoFontFace
(
cairo_font_options_t
*
aFontOptions
)
override
;
private
:
friend
class
DrawTargetSkia
;
friend
class
UnscaledFontMac
;
CGFontRef
mFont
;
CTFontRef
mCTFont
;
bool
mUseFontSmoothing
;
bool
mApplySyntheticBold
;
bool
mHasColorGlyphs
;
struct
InstanceData
{
explicit
InstanceData
(
ScaledFontMac
*
aScaledFont
)
:
mUseFontSmoothing
(
aScaledFont
-
>
mUseFontSmoothing
)
mApplySyntheticBold
(
aScaledFont
-
>
mApplySyntheticBold
)
mHasColorGlyphs
(
aScaledFont
-
>
mHasColorGlyphs
)
{
}
InstanceData
(
const
wr
:
:
FontInstanceOptions
*
aOptions
const
wr
:
:
FontInstancePlatformOptions
*
aPlatformOptions
)
;
bool
mUseFontSmoothing
;
bool
mApplySyntheticBold
;
bool
mHasColorGlyphs
;
}
;
}
;
}
}
#
endif
