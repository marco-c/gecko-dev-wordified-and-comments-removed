#
ifndef
MOZILLA_GFX_SCALEDFONTMAC_H_
#
define
MOZILLA_GFX_SCALEDFONTMAC_H_
#
ifdef
MOZ_WIDGET_COCOA
#
include
<
ApplicationServices
/
ApplicationServices
.
h
>
#
else
#
include
<
CoreGraphics
/
CoreGraphics
.
h
>
#
include
<
CoreText
/
CoreText
.
h
>
#
endif
#
include
"
2D
.
h
"
#
include
"
ScaledFontBase
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
GlyphRenderingOptionsCG
:
public
GlyphRenderingOptions
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
GlyphRenderingOptionsCG
override
)
explicit
GlyphRenderingOptionsCG
(
const
Color
&
aFontSmoothingBackgroundColor
)
:
mFontSmoothingBackgroundColor
(
aFontSmoothingBackgroundColor
)
{
}
const
Color
&
FontSmoothingBackgroundColor
(
)
const
{
return
mFontSmoothingBackgroundColor
;
}
virtual
FontType
GetType
(
)
const
override
{
return
FontType
:
:
MAC
;
}
private
:
Color
mFontSmoothingBackgroundColor
;
}
;
class
ScaledFontMac
:
public
ScaledFontBase
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
ScaledFontMac
)
ScaledFontMac
(
CGFontRef
aFont
Float
aSize
)
;
virtual
~
ScaledFontMac
(
)
;
virtual
FontType
GetType
(
)
const
{
return
FontType
:
:
MAC
;
}
#
ifdef
USE_SKIA
virtual
SkTypeface
*
GetSkTypeface
(
)
;
#
endif
virtual
already_AddRefed
<
Path
>
GetPathForGlyphs
(
const
GlyphBuffer
&
aBuffer
const
DrawTarget
*
aTarget
)
;
virtual
bool
GetFontFileData
(
FontFileDataOutput
aDataCallback
void
*
aBaton
)
;
#
ifdef
USE_CAIRO_SCALED_FONT
cairo_font_face_t
*
GetCairoFontFace
(
)
;
#
endif
private
:
friend
class
DrawTargetSkia
;
CGFontRef
mFont
;
CTFontRef
mCTFont
;
typedef
void
(
CTFontDrawGlyphsFuncT
)
(
CTFontRef
const
CGGlyph
[
]
const
CGPoint
[
]
size_t
CGContextRef
)
;
static
bool
sSymbolLookupDone
;
public
:
static
CTFontDrawGlyphsFuncT
*
CTFontDrawGlyphsPtr
;
}
;
}
}
#
endif
