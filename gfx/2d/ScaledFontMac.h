#
ifndef
MOZILLA_GFX_SCALEDFONTMAC_H_
#
define
MOZILLA_GFX_SCALEDFONTMAC_H_
#
ifdef
MOZ_WIDGET_COCOA
#
include
<
ApplicationServices
/
ApplicationServices
.
h
>
#
else
#
include
<
CoreGraphics
/
CoreGraphics
.
h
>
#
include
<
CoreText
/
CoreText
.
h
>
#
endif
#
include
"
2D
.
h
"
#
include
"
ScaledFontBase
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
ScaledFontMac
:
public
ScaledFontBase
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
ScaledFontMac
override
)
ScaledFontMac
(
CGFontRef
aFont
const
RefPtr
<
UnscaledFont
>
&
aUnscaledFont
Float
aSize
const
Color
&
aFontSmoothingBackgroundColor
=
Color
(
)
bool
aUseFontSmoothing
=
true
bool
aOwnsFont
=
false
)
;
~
ScaledFontMac
(
)
;
FontType
GetType
(
)
const
override
{
return
FontType
:
:
MAC
;
}
#
ifdef
USE_SKIA
SkTypeface
*
GetSkTypeface
(
)
override
;
#
endif
already_AddRefed
<
Path
>
GetPathForGlyphs
(
const
GlyphBuffer
&
aBuffer
const
DrawTarget
*
aTarget
)
override
;
bool
GetFontInstanceData
(
FontInstanceDataOutput
aCb
void
*
aBaton
)
override
;
bool
GetWRFontInstanceOptions
(
Maybe
<
wr
:
:
FontInstanceOptions
>
*
aOutOptions
Maybe
<
wr
:
:
FontInstancePlatformOptions
>
*
aOutPlatformOptions
std
:
:
vector
<
FontVariation
>
*
aOutVariations
)
override
;
bool
CanSerialize
(
)
override
{
return
true
;
}
Color
FontSmoothingBackgroundColor
(
)
{
return
mFontSmoothingBackgroundColor
;
}
#
ifdef
USE_CAIRO_SCALED_FONT
cairo_font_face_t
*
GetCairoFontFace
(
)
override
;
#
endif
private
:
friend
class
DrawTargetSkia
;
CGFontRef
mFont
;
CTFontRef
mCTFont
;
Color
mFontSmoothingBackgroundColor
;
bool
mUseFontSmoothing
;
typedef
void
(
CTFontDrawGlyphsFuncT
)
(
CTFontRef
const
CGGlyph
[
]
const
CGPoint
[
]
size_t
CGContextRef
)
;
static
bool
sSymbolLookupDone
;
public
:
static
CTFontDrawGlyphsFuncT
*
CTFontDrawGlyphsPtr
;
}
;
}
}
#
endif
