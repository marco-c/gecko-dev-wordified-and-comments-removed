#
ifndef
MOZILLA_GFX_SCALEDFONTCAIRO_H_
#
define
MOZILLA_GFX_SCALEDFONTCAIRO_H_
#
include
"
ScaledFontBase
.
h
"
#
include
<
cairo
-
ft
.
h
>
namespace
mozilla
{
namespace
gfx
{
class
ScaledFontFreeType
:
public
ScaledFontBase
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
ScaledFontFreeType
override
)
ScaledFontFreeType
(
cairo_scaled_font_t
*
aScaledFont
RefPtr
<
SharedFTFace
>
&
&
aFace
const
RefPtr
<
UnscaledFont
>
&
aUnscaledFont
Float
aSize
)
;
FontType
GetType
(
)
const
override
{
return
FontType
:
:
FREETYPE
;
}
#
ifdef
USE_SKIA
SkTypeface
*
CreateSkTypeface
(
)
override
;
void
SetupSkFontDrawOptions
(
SkFont
&
aFont
)
override
;
#
endif
AntialiasMode
GetDefaultAAMode
(
)
override
{
return
AntialiasMode
:
:
GRAY
;
}
bool
CanSerialize
(
)
override
{
return
true
;
}
bool
GetFontInstanceData
(
FontInstanceDataOutput
aCb
void
*
aBaton
)
override
;
bool
GetWRFontInstanceOptions
(
Maybe
<
wr
:
:
FontInstanceOptions
>
*
aOutOptions
Maybe
<
wr
:
:
FontInstancePlatformOptions
>
*
aOutPlatformOptions
std
:
:
vector
<
FontVariation
>
*
aOutVariations
)
override
;
bool
HasVariationSettings
(
)
override
;
private
:
RefPtr
<
SharedFTFace
>
mFace
;
}
;
}
}
#
endif
