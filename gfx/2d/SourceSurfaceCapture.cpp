#
include
"
SourceSurfaceCapture
.
h
"
#
include
"
DrawCommand
.
h
"
#
include
"
DrawTargetCapture
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
namespace
mozilla
{
namespace
gfx
{
SourceSurfaceCapture
:
:
SourceSurfaceCapture
(
DrawTargetCaptureImpl
*
aOwner
)
:
mOwner
(
aOwner
)
mHasCommandList
(
false
)
mLock
(
"
SourceSurfaceCapture
.
mLock
"
)
{
mSize
=
mOwner
-
>
GetSize
(
)
;
mFormat
=
mOwner
-
>
GetFormat
(
)
;
mRefDT
=
mOwner
-
>
mRefDT
;
mStride
=
mOwner
-
>
mStride
;
mSurfaceAllocationSize
=
mOwner
-
>
mSurfaceAllocationSize
;
}
SourceSurfaceCapture
:
:
~
SourceSurfaceCapture
(
)
{
}
bool
SourceSurfaceCapture
:
:
IsValid
(
)
const
{
MutexAutoLock
lock
(
mLock
)
;
return
(
mOwner
|
|
mHasCommandList
)
|
|
mResolved
;
}
RefPtr
<
SourceSurface
>
SourceSurfaceCapture
:
:
Resolve
(
BackendType
aBackendType
)
{
MutexAutoLock
lock
(
mLock
)
;
if
(
!
mOwner
&
&
!
mHasCommandList
)
{
return
mResolved
;
}
BackendType
backendType
=
aBackendType
;
if
(
backendType
=
=
BackendType
:
:
NONE
)
{
backendType
=
mRefDT
-
>
GetBackendType
(
)
;
}
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
|
|
!
mOwner
)
;
if
(
!
mResolved
)
{
mResolved
=
ResolveImpl
(
backendType
)
;
}
return
mResolved
;
}
RefPtr
<
SourceSurface
>
SourceSurfaceCapture
:
:
ResolveImpl
(
BackendType
aBackendType
)
{
RefPtr
<
DrawTarget
>
dt
;
if
(
!
mSurfaceAllocationSize
)
{
if
(
aBackendType
=
=
mRefDT
-
>
GetBackendType
(
)
)
{
dt
=
mRefDT
-
>
CreateSimilarDrawTarget
(
mSize
mFormat
)
;
}
else
{
dt
=
Factory
:
:
CreateDrawTarget
(
aBackendType
mSize
mFormat
)
;
}
}
else
{
uint8_t
*
data
=
static_cast
<
uint8_t
*
>
(
calloc
(
1
mSurfaceAllocationSize
)
)
;
if
(
!
data
)
{
return
nullptr
;
}
BackendType
type
=
Factory
:
:
DoesBackendSupportDataDrawtarget
(
aBackendType
)
?
aBackendType
:
BackendType
:
:
SKIA
;
dt
=
Factory
:
:
CreateDrawTargetForData
(
type
data
mSize
mStride
mFormat
)
;
if
(
!
dt
)
{
free
(
data
)
;
return
nullptr
;
}
dt
-
>
AddUserData
(
reinterpret_cast
<
UserDataKey
*
>
(
dt
.
get
(
)
)
data
free
)
;
}
if
(
!
dt
)
{
return
nullptr
;
}
CaptureCommandList
&
commands
=
mHasCommandList
?
mCommands
:
mOwner
-
>
mCommands
;
for
(
CaptureCommandList
:
:
iterator
iter
(
commands
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
DrawingCommand
*
cmd
=
iter
.
Get
(
)
;
cmd
-
>
ExecuteOnDT
(
dt
nullptr
)
;
}
return
dt
-
>
Snapshot
(
)
;
}
already_AddRefed
<
DataSourceSurface
>
SourceSurfaceCapture
:
:
GetDataSurface
(
)
{
RefPtr
<
SourceSurface
>
surface
=
Resolve
(
)
;
if
(
!
surface
)
{
return
nullptr
;
}
return
surface
-
>
GetDataSurface
(
)
;
}
void
SourceSurfaceCapture
:
:
DrawTargetWillDestroy
(
)
{
MutexAutoLock
lock
(
mLock
)
;
mCommands
=
Move
(
mOwner
-
>
mCommands
)
;
mHasCommandList
=
true
;
mOwner
=
nullptr
;
}
void
SourceSurfaceCapture
:
:
DrawTargetWillChange
(
)
{
MutexAutoLock
lock
(
mLock
)
;
for
(
CaptureCommandList
:
:
iterator
iter
(
mOwner
-
>
mCommands
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
DrawingCommand
*
cmd
=
iter
.
Get
(
)
;
cmd
-
>
CloneInto
(
&
mCommands
)
;
}
mHasCommandList
=
true
;
mOwner
=
nullptr
;
}
}
}
