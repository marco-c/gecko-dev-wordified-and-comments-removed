#
ifndef
_MOZILLA_GFX_OP_SOURCESURFACE_CAIRO_H
#
define
_MOZILLA_GFX_OP_SOURCESURFACE_CAIRO_H
#
include
"
2D
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
DrawTargetCairo
;
class
SourceSurfaceCairo
:
public
SourceSurface
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
SourceSurfaceCairo
override
)
SourceSurfaceCairo
(
cairo_surface_t
*
aSurface
const
IntSize
&
aSize
const
SurfaceFormat
&
aFormat
DrawTargetCairo
*
aDrawTarget
=
nullptr
)
;
virtual
~
SourceSurfaceCairo
(
)
;
virtual
SurfaceType
GetType
(
)
const
override
{
return
SurfaceType
:
:
CAIRO
;
}
virtual
IntSize
GetSize
(
)
const
override
;
virtual
SurfaceFormat
GetFormat
(
)
const
override
;
virtual
already_AddRefed
<
DataSourceSurface
>
GetDataSurface
(
)
override
;
cairo_surface_t
*
GetSurface
(
)
const
;
private
:
friend
class
DrawTargetCairo
;
void
DrawTargetWillChange
(
)
;
private
:
IntSize
mSize
;
SurfaceFormat
mFormat
;
cairo_surface_t
*
mSurface
;
DrawTargetCairo
*
mDrawTarget
;
}
;
class
DataSourceSurfaceCairo
:
public
DataSourceSurface
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
DataSourceSurfaceCairo
override
)
explicit
DataSourceSurfaceCairo
(
cairo_surface_t
*
imageSurf
)
;
virtual
~
DataSourceSurfaceCairo
(
)
;
virtual
unsigned
char
*
GetData
(
)
override
;
virtual
int32_t
Stride
(
)
override
;
virtual
SurfaceType
GetType
(
)
const
override
{
return
SurfaceType
:
:
CAIRO_IMAGE
;
}
virtual
IntSize
GetSize
(
)
const
override
;
virtual
SurfaceFormat
GetFormat
(
)
const
override
;
cairo_surface_t
*
GetSurface
(
)
const
;
private
:
cairo_surface_t
*
mImageSurface
;
}
;
}
}
#
endif
