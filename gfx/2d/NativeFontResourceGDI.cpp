#
include
"
NativeFontResourceGDI
.
h
"
#
include
"
Logging
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
ScaledFontWin
.
h
"
namespace
mozilla
{
namespace
gfx
{
already_AddRefed
<
NativeFontResourceGDI
>
NativeFontResourceGDI
:
:
Create
(
uint8_t
*
aFontData
uint32_t
aDataLength
bool
aNeedsCairo
)
{
DWORD
numberOfFontsAdded
;
HANDLE
fontResourceHandle
=
:
:
AddFontMemResourceEx
(
aFontData
aDataLength
0
&
numberOfFontsAdded
)
;
if
(
!
fontResourceHandle
)
{
gfxWarning
(
)
<
<
"
Failed
to
add
memory
font
resource
.
"
;
return
nullptr
;
}
RefPtr
<
NativeFontResourceGDI
>
fontResouce
=
new
NativeFontResourceGDI
(
fontResourceHandle
aNeedsCairo
)
;
return
fontResouce
.
forget
(
)
;
}
NativeFontResourceGDI
:
:
~
NativeFontResourceGDI
(
)
{
:
:
RemoveFontMemResourceEx
(
mFontResourceHandle
)
;
}
already_AddRefed
<
ScaledFont
>
NativeFontResourceGDI
:
:
CreateScaledFont
(
uint32_t
aIndex
Float
aGlyphSize
const
uint8_t
*
aInstanceData
uint32_t
aInstanceDataLength
)
{
if
(
aInstanceDataLength
<
sizeof
(
LOGFONT
)
)
{
gfxWarning
(
)
<
<
"
GDI
scaled
font
instance
data
is
truncated
.
"
;
return
nullptr
;
}
const
LOGFONT
*
logFont
=
reinterpret_cast
<
const
LOGFONT
*
>
(
aInstanceData
)
;
RefPtr
<
ScaledFontBase
>
scaledFont
=
new
ScaledFontWin
(
logFont
nullptr
aGlyphSize
)
;
if
(
mNeedsCairo
&
&
!
scaledFont
-
>
PopulateCairoScaledFont
(
)
)
{
gfxWarning
(
)
<
<
"
Unable
to
create
cairo
scaled
font
GDI
font
.
"
;
return
nullptr
;
}
return
scaledFont
.
forget
(
)
;
}
}
}
