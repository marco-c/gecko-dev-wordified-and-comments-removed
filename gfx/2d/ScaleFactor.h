#
ifndef
MOZILLA_GFX_SCALEFACTOR_H_
#
define
MOZILLA_GFX_SCALEFACTOR_H_
#
include
<
ostream
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
gfxPoint
.
h
"
namespace
mozilla
{
namespace
gfx
{
template
<
class
Src
class
Dst
>
struct
ScaleFactor
{
float
scale
;
constexpr
ScaleFactor
(
)
:
scale
(
1
.
0
)
{
}
constexpr
ScaleFactor
(
const
ScaleFactor
<
Src
Dst
>
&
aCopy
)
:
scale
(
aCopy
.
scale
)
{
}
explicit
constexpr
ScaleFactor
(
float
aScale
)
:
scale
(
aScale
)
{
}
ScaleFactor
<
Dst
Src
>
Inverse
(
)
{
return
ScaleFactor
<
Dst
Src
>
(
1
/
scale
)
;
}
ScaleFactor
<
Src
Dst
>
&
operator
=
(
const
ScaleFactor
<
Src
Dst
>
&
)
=
default
;
bool
operator
=
=
(
const
ScaleFactor
<
Src
Dst
>
&
aOther
)
const
{
return
scale
=
=
aOther
.
scale
;
}
bool
operator
!
=
(
const
ScaleFactor
<
Src
Dst
>
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
bool
operator
<
(
const
ScaleFactor
<
Src
Dst
>
&
aOther
)
const
{
return
scale
<
aOther
.
scale
;
}
bool
operator
<
=
(
const
ScaleFactor
<
Src
Dst
>
&
aOther
)
const
{
return
scale
<
=
aOther
.
scale
;
}
bool
operator
>
(
const
ScaleFactor
<
Src
Dst
>
&
aOther
)
const
{
return
scale
>
aOther
.
scale
;
}
bool
operator
>
=
(
const
ScaleFactor
<
Src
Dst
>
&
aOther
)
const
{
return
scale
>
=
aOther
.
scale
;
}
template
<
class
Other
>
ScaleFactor
<
Other
Dst
>
operator
/
(
const
ScaleFactor
<
Src
Other
>
&
aOther
)
const
{
return
ScaleFactor
<
Other
Dst
>
(
scale
/
aOther
.
scale
)
;
}
template
<
class
Other
>
ScaleFactor
<
Src
Other
>
operator
/
(
const
ScaleFactor
<
Other
Dst
>
&
aOther
)
const
{
return
ScaleFactor
<
Src
Other
>
(
scale
/
aOther
.
scale
)
;
}
template
<
class
Other
>
ScaleFactor
<
Src
Other
>
operator
*
(
const
ScaleFactor
<
Dst
Other
>
&
aOther
)
const
{
return
ScaleFactor
<
Src
Other
>
(
scale
*
aOther
.
scale
)
;
}
template
<
class
Other
>
ScaleFactor
<
Other
Dst
>
operator
*
(
const
ScaleFactor
<
Other
Src
>
&
aOther
)
const
{
return
ScaleFactor
<
Other
Dst
>
(
scale
*
aOther
.
scale
)
;
}
friend
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aStream
const
ScaleFactor
<
Src
Dst
>
&
aSF
)
{
return
aStream
<
<
aSF
.
scale
;
}
}
;
}
}
#
endif
