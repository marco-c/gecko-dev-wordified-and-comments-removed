#
ifndef
MOZILLA_GFX_UNSCALEDFONTMAC_H_
#
define
MOZILLA_GFX_UNSCALEDFONTMAC_H_
#
ifdef
MOZ_WIDGET_COCOA
#
include
<
ApplicationServices
/
ApplicationServices
.
h
>
#
else
#
include
<
CoreGraphics
/
CoreGraphics
.
h
>
#
include
<
CoreText
/
CoreText
.
h
>
#
endif
#
include
"
2D
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
UnscaledFontMac
final
:
public
UnscaledFont
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
UnscaledFontMac
override
)
explicit
UnscaledFontMac
(
CGFontRef
aFont
bool
aIsDataFont
=
false
)
:
mFont
(
aFont
)
mIsDataFont
(
aIsDataFont
)
{
CFRetain
(
mFont
)
;
}
explicit
UnscaledFontMac
(
CTFontDescriptorRef
aFontDesc
CGFontRef
aFont
bool
aIsDataFont
=
false
)
:
mFontDesc
(
aFontDesc
)
mFont
(
aFont
)
mIsDataFont
(
aIsDataFont
)
{
CFRetain
(
mFontDesc
)
;
CFRetain
(
mFont
)
;
}
virtual
~
UnscaledFontMac
(
)
{
if
(
mCTAxesCache
)
{
CFRelease
(
mCTAxesCache
)
;
}
if
(
mCGAxesCache
)
{
CFRelease
(
mCGAxesCache
)
;
}
if
(
mFontDesc
)
{
CFRelease
(
mFontDesc
)
;
}
if
(
mFont
)
{
CFRelease
(
mFont
)
;
}
}
FontType
GetType
(
)
const
override
{
return
FontType
:
:
MAC
;
}
CGFontRef
GetFont
(
)
const
{
return
mFont
;
}
bool
GetFontFileData
(
FontFileDataOutput
aDataCallback
void
*
aBaton
)
override
;
already_AddRefed
<
ScaledFont
>
CreateScaledFont
(
Float
aGlyphSize
const
uint8_t
*
aInstanceData
uint32_t
aInstanceDataLength
const
FontVariation
*
aVariations
uint32_t
aNumVariations
)
override
;
already_AddRefed
<
ScaledFont
>
CreateScaledFontFromWRFont
(
Float
aGlyphSize
const
wr
:
:
FontInstanceOptions
*
aOptions
const
wr
:
:
FontInstancePlatformOptions
*
aPlatformOptions
const
FontVariation
*
aVariations
uint32_t
aNumVariations
)
override
;
static
CGFontRef
CreateCGFontWithVariations
(
CGFontRef
aFont
CFArrayRef
&
aCGAxesCache
CFArrayRef
&
aCTAxesCache
uint32_t
aVariationCount
const
FontVariation
*
aVariations
)
;
bool
GetFontDescriptor
(
FontDescriptorOutput
aCb
void
*
aBaton
)
override
;
CFArrayRef
&
CGAxesCache
(
)
{
return
mCGAxesCache
;
}
CFArrayRef
&
CTAxesCache
(
)
{
return
mCTAxesCache
;
}
static
already_AddRefed
<
UnscaledFont
>
CreateFromFontDescriptor
(
const
uint8_t
*
aData
uint32_t
aDataLength
uint32_t
aIndex
)
;
private
:
CTFontDescriptorRef
mFontDesc
=
nullptr
;
CGFontRef
mFont
=
nullptr
;
CFArrayRef
mCGAxesCache
=
nullptr
;
CFArrayRef
mCTAxesCache
=
nullptr
;
bool
mIsDataFont
;
}
;
}
}
#
endif
