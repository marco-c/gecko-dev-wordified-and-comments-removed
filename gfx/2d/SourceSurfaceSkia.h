#
ifndef
MOZILLA_GFX_SOURCESURFACESKIA_H_
#
define
MOZILLA_GFX_SOURCESURFACESKIA_H_
#
include
"
2D
.
h
"
#
include
<
vector
>
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
skia
/
include
/
core
/
SkRefCnt
.
h
"
class
SkImage
;
class
SkSurface
;
namespace
mozilla
{
namespace
gfx
{
class
DrawTargetSkia
;
class
SnapshotLock
;
class
SourceSurfaceSkia
:
public
DataSourceSurface
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
DataSourceSurfaceSkia
override
)
SourceSurfaceSkia
(
)
;
virtual
~
SourceSurfaceSkia
(
)
;
SurfaceType
GetType
(
)
const
override
{
return
SurfaceType
:
:
SKIA
;
}
IntSize
GetSize
(
)
const
override
;
SurfaceFormat
GetFormat
(
)
const
override
;
void
GiveSurface
(
SkSurface
*
aSurface
)
;
sk_sp
<
SkImage
>
GetImage
(
Maybe
<
MutexAutoLock
>
*
aLock
)
;
bool
InitFromData
(
unsigned
char
*
aData
const
IntSize
&
aSize
int32_t
aStride
SurfaceFormat
aFormat
)
;
bool
InitFromImage
(
const
sk_sp
<
SkImage
>
&
aImage
SurfaceFormat
aFormat
=
SurfaceFormat
:
:
UNKNOWN
DrawTargetSkia
*
aOwner
=
nullptr
)
;
uint8_t
*
GetData
(
)
override
;
bool
Map
(
MapType
MappedSurface
*
aMappedSurface
)
override
;
void
Unmap
(
)
override
;
int32_t
Stride
(
)
override
{
return
mStride
;
}
private
:
friend
class
DrawTargetSkia
;
void
DrawTargetWillChange
(
)
;
sk_sp
<
SkImage
>
mImage
;
sk_sp
<
SkSurface
>
mSurface
;
SurfaceFormat
mFormat
;
IntSize
mSize
;
int32_t
mStride
;
Atomic
<
DrawTargetSkia
*
>
mDrawTarget
;
Mutex
mChangeMutex
;
bool
mIsMapped
;
}
;
}
}
#
endif
