#
ifndef
MOZILLA_GFX_PATHCAPTURE_H_
#
define
MOZILLA_GFX_PATHCAPTURE_H_
#
include
"
2D
.
h
"
#
include
<
vector
>
#
include
<
ostream
>
#
include
"
PathHelpers
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
PathCapture
;
class
PathBuilderCapture
:
public
PathBuilder
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
PathBuilderCapture
override
)
PathBuilderCapture
(
FillRule
aFillRule
DrawTarget
*
aDT
)
:
mFillRule
(
aFillRule
)
mDT
(
aDT
)
{
}
virtual
void
MoveTo
(
const
Point
&
aPoint
)
override
;
virtual
void
LineTo
(
const
Point
&
aPoint
)
override
;
virtual
void
BezierTo
(
const
Point
&
aCP1
const
Point
&
aCP2
const
Point
&
aCP3
)
override
;
virtual
void
QuadraticBezierTo
(
const
Point
&
aCP1
const
Point
&
aCP2
)
override
;
virtual
void
Arc
(
const
Point
&
aOrigin
float
aRadius
float
aStartAngle
float
aEndAngle
bool
aAntiClockwise
)
override
;
virtual
void
Close
(
)
override
;
virtual
already_AddRefed
<
Path
>
Finish
(
)
override
;
virtual
BackendType
GetBackendType
(
)
const
override
{
return
BackendType
:
:
CAPTURE
;
}
private
:
friend
class
PathCapture
;
FillRule
mFillRule
;
std
:
:
vector
<
PathOp
>
mPathOps
;
RefPtr
<
DrawTarget
>
mDT
;
}
;
class
PathCapture
:
public
Path
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
PathCapture
override
)
PathCapture
(
const
std
:
:
vector
<
PathOp
>
aOps
FillRule
aFillRule
DrawTarget
*
aDT
const
Point
&
aCurrentPoint
const
Point
&
aBeginPoint
)
:
mPathOps
(
aOps
)
mFillRule
(
aFillRule
)
mDT
(
aDT
)
mCurrentPoint
(
aCurrentPoint
)
mBeginPoint
(
aBeginPoint
)
{
}
virtual
BackendType
GetBackendType
(
)
const
override
{
return
BackendType
:
:
CAPTURE
;
}
virtual
already_AddRefed
<
PathBuilder
>
CopyToBuilder
(
FillRule
aFillRule
)
const
override
;
virtual
already_AddRefed
<
PathBuilder
>
TransformedCopyToBuilder
(
const
Matrix
&
aTransform
FillRule
aFillRule
)
const
override
;
virtual
bool
ContainsPoint
(
const
Point
&
aPoint
const
Matrix
&
aTransform
)
const
override
;
virtual
bool
StrokeContainsPoint
(
const
StrokeOptions
&
aStrokeOptions
const
Point
&
aPoint
const
Matrix
&
aTransform
)
const
override
;
virtual
Rect
GetBounds
(
const
Matrix
&
aTransform
=
Matrix
(
)
)
const
override
;
virtual
Rect
GetStrokedBounds
(
const
StrokeOptions
&
aStrokeOptions
const
Matrix
&
aTransform
=
Matrix
(
)
)
const
override
;
virtual
void
StreamToSink
(
PathSink
*
aSink
)
const
override
;
virtual
FillRule
GetFillRule
(
)
const
override
{
return
mFillRule
;
}
Path
*
GetRealizedPath
(
)
const
;
private
:
bool
EnsureRealizedPath
(
)
const
;
mutable
RefPtr
<
Path
>
mRealizedPath
;
std
:
:
vector
<
PathOp
>
mPathOps
;
FillRule
mFillRule
;
RefPtr
<
DrawTarget
>
mDT
;
Point
mCurrentPoint
;
Point
mBeginPoint
;
}
;
}
}
#
endif
