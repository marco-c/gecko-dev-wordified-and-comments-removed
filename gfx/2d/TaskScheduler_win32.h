#
ifdef
WIN32
#
ifndef
MOZILLA_GFX_TASKSCHEDULER_WIN32_H_
#
define
MOZILLA_GFX_TASKSCHEDULER_WIN32_H_
#
define
NOT_IMPLEMENTED
MOZ_CRASH
(
"
Not
implemented
"
)
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
CriticalSection
.
h
"
#
include
<
windows
.
h
>
#
include
<
list
>
namespace
mozilla
{
namespace
gfx
{
class
WorkerThread
;
class
Task
;
class
MultiThreadedTaskQueue
{
public
:
enum
AccessType
{
BLOCKING
NON_BLOCKING
}
;
MultiThreadedTaskQueue
(
)
:
mThreadsCount
(
0
)
mShuttingDown
(
false
)
{
mAvailableEvent
=
:
:
CreateEvent
(
nullptr
TRUE
FALSE
nullptr
)
;
mShutdownEvent
=
:
:
CreateEvent
(
nullptr
TRUE
FALSE
nullptr
)
;
}
~
MultiThreadedTaskQueue
(
)
{
:
:
CloseHandle
(
mAvailableEvent
)
;
:
:
CloseHandle
(
mShutdownEvent
)
;
}
bool
WaitForTask
(
Task
*
&
aOutTask
)
{
return
PopTask
(
aOutTask
BLOCKING
)
;
}
bool
PopTask
(
Task
*
&
aOutTask
AccessType
aAccess
)
;
void
SubmitTask
(
Task
*
aTask
)
;
void
ShutDown
(
)
;
size_t
NumTasks
(
)
;
bool
IsEmpty
(
)
;
void
RegisterThread
(
)
;
void
UnregisterThread
(
)
;
protected
:
std
:
:
list
<
Task
*
>
mTasks
;
CriticalSection
mSection
;
HANDLE
mAvailableEvent
;
HANDLE
mShutdownEvent
;
int32_t
mThreadsCount
;
bool
mShuttingDown
;
friend
class
WorkerThread
;
}
;
class
EventObject
:
public
external
:
:
AtomicRefCounted
<
EventObject
>
{
public
:
MOZ_DECLARE_REFCOUNTED_TYPENAME
(
EventObject
)
EventObject
(
)
{
mEvent
=
:
:
CreateEvent
(
nullptr
TRUE
FALSE
nullptr
)
;
}
~
EventObject
(
)
{
:
:
CloseHandle
(
mEvent
)
;
}
void
Wait
(
)
{
:
:
WaitForSingleObject
(
mEvent
INFINITE
)
;
}
bool
Peak
(
)
{
return
:
:
WaitForSingleObject
(
mEvent
0
)
=
=
WAIT_OBJECT_0
;
}
void
Set
(
)
{
:
:
SetEvent
(
mEvent
)
;
}
protected
:
HANDLE
mEvent
;
}
;
}
}
#
endif
#
endif
