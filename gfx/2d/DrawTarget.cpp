#
include
"
2D
.
h
"
#
include
"
Logging
.
h
"
#
include
"
PathHelpers
.
h
"
#
include
"
DrawTargetCapture
.
h
"
namespace
mozilla
{
namespace
gfx
{
already_AddRefed
<
DrawTargetCapture
>
DrawTarget
:
:
CreateCaptureDT
(
const
IntSize
&
aSize
)
{
RefPtr
<
DrawTargetCaptureImpl
>
dt
=
new
DrawTargetCaptureImpl
(
)
;
if
(
!
dt
-
>
Init
(
aSize
this
)
)
{
gfxWarning
(
)
<
<
"
Failed
to
initialize
Capture
DrawTarget
!
"
;
return
nullptr
;
}
return
dt
.
forget
(
)
;
}
void
DrawTarget
:
:
DrawCapturedDT
(
DrawTargetCapture
*
aCaptureDT
const
Matrix
&
aTransform
)
{
if
(
aTransform
.
HasNonIntegerTranslation
(
)
)
{
gfxWarning
(
)
<
<
"
Non
integer
translations
are
not
supported
for
DrawCaptureDT
at
this
time
!
"
;
return
;
}
static_cast
<
DrawTargetCaptureImpl
*
>
(
aCaptureDT
)
-
>
ReplayToDrawTarget
(
this
aTransform
)
;
}
void
DrawTarget
:
:
PushDeviceSpaceClipRects
(
const
IntRect
*
aRects
uint32_t
aCount
)
{
Matrix
oldTransform
=
GetTransform
(
)
;
SetTransform
(
Matrix
(
)
)
;
RefPtr
<
PathBuilder
>
pathBuilder
=
CreatePathBuilder
(
)
;
for
(
uint32_t
i
=
0
;
i
<
aCount
;
i
+
+
)
{
AppendRectToPath
(
pathBuilder
Rect
(
aRects
[
i
]
)
)
;
}
RefPtr
<
Path
>
path
=
pathBuilder
-
>
Finish
(
)
;
PushClip
(
path
)
;
SetTransform
(
oldTransform
)
;
}
}
}
