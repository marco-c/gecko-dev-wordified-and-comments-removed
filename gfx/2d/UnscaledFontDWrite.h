#
ifndef
MOZILLA_GFX_UNSCALEDFONTDWRITE_H_
#
define
MOZILLA_GFX_UNSCALEDFONTDWRITE_H_
#
include
<
dwrite
.
h
>
#
include
"
2D
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
ScaledFontDWrite
;
class
UnscaledFontDWrite
final
:
public
UnscaledFont
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
UnscaledFontDWrite
override
)
UnscaledFontDWrite
(
const
RefPtr
<
IDWriteFontFace
>
&
aFontFace
const
RefPtr
<
IDWriteFont
>
&
aFont
)
:
mFontFace
(
aFontFace
)
mFont
(
aFont
)
{
}
FontType
GetType
(
)
const
override
{
return
FontType
:
:
DWRITE
;
}
const
RefPtr
<
IDWriteFontFace
>
&
GetFontFace
(
)
const
{
return
mFontFace
;
}
const
RefPtr
<
IDWriteFont
>
&
GetFont
(
)
const
{
return
mFont
;
}
bool
GetFontFileData
(
FontFileDataOutput
aDataCallback
void
*
aBaton
)
override
;
already_AddRefed
<
ScaledFont
>
CreateScaledFont
(
Float
aGlyphSize
const
uint8_t
*
aInstanceData
uint32_t
aInstanceDataLength
const
FontVariation
*
aVariations
uint32_t
aNumVariations
)
override
;
already_AddRefed
<
ScaledFont
>
CreateScaledFontFromWRFont
(
Float
aGlyphSize
const
wr
:
:
FontInstanceOptions
*
aOptions
const
wr
:
:
FontInstancePlatformOptions
*
aPlatformOptions
const
FontVariation
*
aVariations
uint32_t
aNumVariations
)
override
;
bool
GetWRFontDescriptor
(
WRFontDescriptorOutput
aCb
void
*
aBaton
)
override
;
private
:
bool
InitBold
(
)
;
RefPtr
<
IDWriteFontFace
>
mFontFace
;
RefPtr
<
IDWriteFontFace
>
mFontFaceBold
;
RefPtr
<
IDWriteFont
>
mFont
;
}
;
}
}
#
endif
