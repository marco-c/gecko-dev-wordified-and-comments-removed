#
ifndef
MOZILLA_GFX_DATASOURCESURFACEWRAPPER_H_
#
define
MOZILLA_GFX_DATASOURCESURFACEWRAPPER_H_
#
include
"
2D
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
DataSourceSurfaceWrapper
final
:
public
DataSourceSurface
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
DataSourceSurfaceWrapper
override
)
explicit
DataSourceSurfaceWrapper
(
DataSourceSurface
*
aSurface
)
:
mSurface
(
aSurface
)
{
}
bool
Equals
(
SourceSurface
*
aOther
bool
aSymmetric
=
true
)
override
{
return
DataSourceSurface
:
:
Equals
(
aOther
aSymmetric
)
|
|
mSurface
-
>
Equals
(
aOther
aSymmetric
)
;
}
virtual
SurfaceType
GetType
(
)
const
override
{
return
SurfaceType
:
:
DATA
;
}
virtual
uint8_t
*
GetData
(
)
override
{
return
mSurface
-
>
GetData
(
)
;
}
virtual
int32_t
Stride
(
)
override
{
return
mSurface
-
>
Stride
(
)
;
}
virtual
IntSize
GetSize
(
)
const
override
{
return
mSurface
-
>
GetSize
(
)
;
}
virtual
SurfaceFormat
GetFormat
(
)
const
override
{
return
mSurface
-
>
GetFormat
(
)
;
}
virtual
bool
IsValid
(
)
const
override
{
return
mSurface
-
>
IsValid
(
)
;
}
bool
Map
(
MapType
aType
MappedSurface
*
aMappedSurface
)
override
{
return
mSurface
-
>
Map
(
aType
aMappedSurface
)
;
}
void
Unmap
(
)
override
{
mSurface
-
>
Unmap
(
)
;
}
private
:
RefPtr
<
DataSourceSurface
>
mSurface
;
}
;
}
}
#
endif
