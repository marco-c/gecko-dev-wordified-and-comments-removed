#
include
"
DrawEventRecorder
.
h
"
#
include
"
PathRecording
.
h
"
#
include
"
RecordingTypes
.
h
"
#
include
"
RecordedEventImpl
.
h
"
namespace
mozilla
{
namespace
gfx
{
using
namespace
std
;
DrawEventRecorderPrivate
:
:
DrawEventRecorderPrivate
(
)
:
mExternalFonts
(
false
)
{
}
void
DrawEventRecorderPrivate
:
:
StoreExternalSurfaceRecording
(
SourceSurface
*
aSurface
uint64_t
aKey
)
{
RecordEvent
(
RecordedExternalSurfaceCreation
(
aSurface
aKey
)
)
;
mExternalSurfaces
.
push_back
(
aSurface
)
;
}
void
DrawEventRecorderPrivate
:
:
StoreSourceSurfaceRecording
(
SourceSurface
*
aSurface
const
char
*
aReason
)
{
RefPtr
<
DataSourceSurface
>
dataSurf
=
aSurface
-
>
GetDataSurface
(
)
;
if
(
dataSurf
)
{
DataSourceSurface
:
:
ScopedMap
map
(
dataSurf
DataSourceSurface
:
:
READ
)
;
RecordEvent
(
RecordedSourceSurfaceCreation
(
aSurface
map
.
GetData
(
)
map
.
GetStride
(
)
dataSurf
-
>
GetSize
(
)
dataSurf
-
>
GetFormat
(
)
)
)
;
return
;
}
gfxWarning
(
)
<
<
"
Recording
failed
to
record
SourceSurface
for
"
<
<
aReason
;
int32_t
stride
=
aSurface
-
>
GetSize
(
)
.
width
*
BytesPerPixel
(
aSurface
-
>
GetFormat
(
)
)
;
UniquePtr
<
uint8_t
[
]
>
sourceData
(
new
uint8_t
[
stride
*
aSurface
-
>
GetSize
(
)
.
height
]
(
)
)
;
RecordEvent
(
RecordedSourceSurfaceCreation
(
aSurface
sourceData
.
get
(
)
stride
aSurface
-
>
GetSize
(
)
aSurface
-
>
GetFormat
(
)
)
)
;
}
void
DrawEventRecorderFile
:
:
RecordEvent
(
const
RecordedEvent
&
aEvent
)
{
WriteElement
(
mOutputStream
aEvent
.
mType
)
;
aEvent
.
RecordToStream
(
mOutputStream
)
;
Flush
(
)
;
}
void
DrawEventRecorderMemory
:
:
RecordEvent
(
const
RecordedEvent
&
aEvent
)
{
WriteElement
(
mOutputStream
aEvent
.
mType
)
;
aEvent
.
RecordToStream
(
mOutputStream
)
;
}
DrawEventRecorderFile
:
:
DrawEventRecorderFile
(
const
char_type
*
aFilename
)
:
mOutputStream
(
aFilename
ofstream
:
:
binary
)
{
WriteHeader
(
mOutputStream
)
;
}
DrawEventRecorderFile
:
:
~
DrawEventRecorderFile
(
)
{
mOutputStream
.
close
(
)
;
}
void
DrawEventRecorderFile
:
:
Flush
(
)
{
mOutputStream
.
flush
(
)
;
}
bool
DrawEventRecorderFile
:
:
IsOpen
(
)
{
return
mOutputStream
.
is_open
(
)
;
}
void
DrawEventRecorderFile
:
:
OpenNew
(
const
char_type
*
aFilename
)
{
MOZ_ASSERT
(
!
mOutputStream
.
is_open
(
)
)
;
mOutputStream
.
open
(
aFilename
ofstream
:
:
binary
)
;
WriteHeader
(
mOutputStream
)
;
}
void
DrawEventRecorderFile
:
:
Close
(
)
{
MOZ_ASSERT
(
mOutputStream
.
is_open
(
)
)
;
mOutputStream
.
close
(
)
;
}
DrawEventRecorderMemory
:
:
DrawEventRecorderMemory
(
)
{
WriteHeader
(
mOutputStream
)
;
}
DrawEventRecorderMemory
:
:
DrawEventRecorderMemory
(
const
SerializeResourcesFn
&
aFn
)
:
mSerializeCallback
(
aFn
)
{
mExternalFonts
=
!
!
mSerializeCallback
;
WriteHeader
(
mOutputStream
)
;
}
void
DrawEventRecorderMemory
:
:
Flush
(
)
{
}
void
DrawEventRecorderMemory
:
:
FlushItem
(
IntRect
aRect
)
{
MOZ_RELEASE_ASSERT
(
!
aRect
.
IsEmpty
(
)
)
;
DetachResources
(
)
;
WriteElement
(
mIndex
mOutputStream
.
mLength
)
;
mSerializeCallback
(
mOutputStream
mScaledFonts
)
;
WriteElement
(
mIndex
mOutputStream
.
mLength
)
;
WriteElement
(
mIndex
aRect
.
x
)
;
WriteElement
(
mIndex
aRect
.
y
)
;
WriteElement
(
mIndex
aRect
.
XMost
(
)
)
;
WriteElement
(
mIndex
aRect
.
YMost
(
)
)
;
ClearResources
(
)
;
WriteHeader
(
mOutputStream
)
;
}
bool
DrawEventRecorderMemory
:
:
Finish
(
)
{
size_t
indexOffset
=
mOutputStream
.
mLength
;
mOutputStream
.
write
(
mIndex
.
mData
mIndex
.
mLength
)
;
bool
hasItems
=
mIndex
.
mLength
!
=
0
;
mIndex
=
MemStream
(
)
;
WriteElement
(
mOutputStream
indexOffset
)
;
ClearResources
(
)
;
return
hasItems
;
}
size_t
DrawEventRecorderMemory
:
:
RecordingSize
(
)
{
return
mOutputStream
.
mLength
;
}
void
DrawEventRecorderMemory
:
:
WipeRecording
(
)
{
mOutputStream
=
MemStream
(
)
;
mIndex
=
MemStream
(
)
;
WriteHeader
(
mOutputStream
)
;
}
}
}
