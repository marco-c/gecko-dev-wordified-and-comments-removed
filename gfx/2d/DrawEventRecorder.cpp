#
include
"
DrawEventRecorder
.
h
"
#
include
"
PathRecording
.
h
"
#
include
"
RecordingTypes
.
h
"
namespace
mozilla
{
namespace
gfx
{
using
namespace
std
;
DrawEventRecorderPrivate
:
:
DrawEventRecorderPrivate
(
)
:
mExternalFonts
(
false
)
{
}
void
DrawEventRecorderFile
:
:
RecordEvent
(
const
RecordedEvent
&
aEvent
)
{
WriteElement
(
mOutputStream
aEvent
.
mType
)
;
aEvent
.
RecordToStream
(
mOutputStream
)
;
Flush
(
)
;
}
void
DrawEventRecorderMemory
:
:
RecordEvent
(
const
RecordedEvent
&
aEvent
)
{
WriteElement
(
mOutputStream
aEvent
.
mType
)
;
aEvent
.
RecordToStream
(
mOutputStream
)
;
}
DrawEventRecorderFile
:
:
DrawEventRecorderFile
(
const
char_type
*
aFilename
)
:
mOutputStream
(
aFilename
ofstream
:
:
binary
)
{
WriteHeader
(
mOutputStream
)
;
}
DrawEventRecorderFile
:
:
~
DrawEventRecorderFile
(
)
{
mOutputStream
.
close
(
)
;
}
void
DrawEventRecorderFile
:
:
Flush
(
)
{
mOutputStream
.
flush
(
)
;
}
bool
DrawEventRecorderFile
:
:
IsOpen
(
)
{
return
mOutputStream
.
is_open
(
)
;
}
void
DrawEventRecorderFile
:
:
OpenNew
(
const
char_type
*
aFilename
)
{
MOZ_ASSERT
(
!
mOutputStream
.
is_open
(
)
)
;
mOutputStream
.
open
(
aFilename
ofstream
:
:
binary
)
;
WriteHeader
(
mOutputStream
)
;
}
void
DrawEventRecorderFile
:
:
Close
(
)
{
MOZ_ASSERT
(
mOutputStream
.
is_open
(
)
)
;
mOutputStream
.
close
(
)
;
}
DrawEventRecorderMemory
:
:
DrawEventRecorderMemory
(
)
{
WriteHeader
(
mOutputStream
)
;
}
DrawEventRecorderMemory
:
:
DrawEventRecorderMemory
(
const
SerializeResourcesFn
&
aFn
)
:
mSerializeCallback
(
aFn
)
{
mExternalFonts
=
true
;
WriteHeader
(
mOutputStream
)
;
}
void
DrawEventRecorderMemory
:
:
Flush
(
)
{
}
void
DrawEventRecorderMemory
:
:
FlushItem
(
IntRect
aRect
)
{
MOZ_RELEASE_ASSERT
(
!
aRect
.
IsEmpty
(
)
)
;
DetachResources
(
)
;
WriteElement
(
mIndex
mOutputStream
.
mLength
)
;
mSerializeCallback
(
mOutputStream
mUnscaledFonts
)
;
WriteElement
(
mIndex
mOutputStream
.
mLength
)
;
WriteElement
(
mIndex
aRect
.
x
)
;
WriteElement
(
mIndex
aRect
.
y
)
;
WriteElement
(
mIndex
aRect
.
XMost
(
)
)
;
WriteElement
(
mIndex
aRect
.
YMost
(
)
)
;
ClearResources
(
)
;
WriteHeader
(
mOutputStream
)
;
}
bool
DrawEventRecorderMemory
:
:
Finish
(
)
{
size_t
indexOffset
=
mOutputStream
.
mLength
;
mOutputStream
.
write
(
mIndex
.
mData
mIndex
.
mLength
)
;
bool
hasItems
=
mIndex
.
mLength
!
=
0
;
mIndex
=
MemStream
(
)
;
WriteElement
(
mOutputStream
indexOffset
)
;
ClearResources
(
)
;
return
hasItems
;
}
size_t
DrawEventRecorderMemory
:
:
RecordingSize
(
)
{
return
mOutputStream
.
mLength
;
}
void
DrawEventRecorderMemory
:
:
WipeRecording
(
)
{
mOutputStream
=
MemStream
(
)
;
mIndex
=
MemStream
(
)
;
WriteHeader
(
mOutputStream
)
;
}
}
}
