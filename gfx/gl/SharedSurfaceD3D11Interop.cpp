#
include
"
SharedSurfaceD3D11Interop
.
h
"
#
include
<
d3d11
.
h
>
#
include
"
gfxPrefs
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
WGLLibrary
.
h
"
#
include
"
nsPrintfCString
.
h
"
namespace
mozilla
{
namespace
gl
{
class
DXGLDevice
:
public
RefCounted
<
DXGLDevice
>
{
public
:
MOZ_DECLARE_REFCOUNTED_TYPENAME
(
DXGLDevice
)
WGLLibrary
*
const
mWGL
;
const
RefPtr
<
ID3D11Device
>
mD3D
;
const
HANDLE
mDXGLDeviceHandle
;
static
already_AddRefed
<
DXGLDevice
>
Open
(
WGLLibrary
*
wgl
)
{
MOZ_ASSERT
(
wgl
-
>
HasDXInterop2
(
)
)
;
gfxWindowsPlatform
*
plat
=
gfxWindowsPlatform
:
:
GetPlatform
(
)
;
RefPtr
<
ID3D11Device
>
d3d
=
plat
-
>
GetD3D11ContentDevice
(
)
;
if
(
!
d3d
)
{
NS_WARNING
(
"
Failed
to
create
D3D11
device
.
"
)
;
return
nullptr
;
}
HANDLE
dxglDeviceHandle
=
wgl
-
>
fDXOpenDevice
(
d3d
)
;
if
(
!
dxglDeviceHandle
)
{
NS_WARNING
(
"
Failed
to
open
D3D
device
for
use
by
WGL
.
"
)
;
return
nullptr
;
}
return
MakeAndAddRef
<
DXGLDevice
>
(
wgl
d3d
dxglDeviceHandle
)
;
}
DXGLDevice
(
WGLLibrary
*
wgl
const
RefPtr
<
ID3D11Device
>
&
d3d
HANDLE
dxglDeviceHandle
)
:
mWGL
(
wgl
)
mD3D
(
d3d
)
mDXGLDeviceHandle
(
dxglDeviceHandle
)
{
}
~
DXGLDevice
(
)
{
if
(
!
mWGL
-
>
fDXCloseDevice
(
mDXGLDeviceHandle
)
)
{
uint32_t
error
=
GetLastError
(
)
;
const
nsPrintfCString
errorMessage
(
"
wglDXCloseDevice
(
0x
%
x
)
failed
:
"
"
GetLastError
(
)
:
0x
%
x
\
n
"
mDXGLDeviceHandle
error
)
;
gfxCriticalError
(
)
<
<
errorMessage
.
BeginReading
(
)
;
MOZ_CRASH
(
"
GFX
:
Problem
closing
DXGL
device
"
)
;
}
}
HANDLE
RegisterObject
(
void
*
dxObject
GLuint
name
GLenum
type
GLenum
access
)
const
{
HANDLE
ret
=
mWGL
-
>
fDXRegisterObject
(
mDXGLDeviceHandle
dxObject
name
type
access
)
;
if
(
!
ret
)
{
uint32_t
error
=
GetLastError
(
)
;
const
nsPrintfCString
errorMessage
(
"
wglDXRegisterObject
(
0x
%
x
0x
%
x
%
u
0x
%
x
0x
%
x
)
failed
:
"
"
GetLastError
(
)
:
0x
%
x
\
n
"
mDXGLDeviceHandle
dxObject
name
type
access
error
)
;
gfxCriticalError
(
)
<
<
errorMessage
.
BeginReading
(
)
;
MOZ_CRASH
(
"
GFX
:
Problem
registering
DXGL
device
"
)
;
}
return
ret
;
}
bool
UnregisterObject
(
HANDLE
hObject
)
const
{
bool
ret
=
mWGL
-
>
fDXUnregisterObject
(
mDXGLDeviceHandle
hObject
)
;
if
(
!
ret
)
{
uint32_t
error
=
GetLastError
(
)
;
const
nsPrintfCString
errorMessage
(
"
wglDXUnregisterObject
(
0x
%
x
0x
%
x
)
failed
:
"
"
GetLastError
(
)
:
0x
%
x
\
n
"
mDXGLDeviceHandle
hObject
error
)
;
gfxCriticalError
(
)
<
<
errorMessage
.
BeginReading
(
)
;
MOZ_CRASH
(
"
GFX
:
Problem
unregistering
DXGL
device
"
)
;
}
return
ret
;
}
bool
LockObject
(
HANDLE
hObject
)
const
{
bool
ret
=
mWGL
-
>
fDXLockObjects
(
mDXGLDeviceHandle
1
&
hObject
)
;
if
(
!
ret
)
{
uint32_t
error
=
GetLastError
(
)
;
const
nsPrintfCString
errorMessage
(
"
wglDXLockObjects
(
0x
%
x
1
{
0x
%
x
}
)
"
"
failed
:
GetLastError
(
)
:
0x
%
x
\
n
"
mDXGLDeviceHandle
hObject
error
)
;
gfxCriticalError
(
)
<
<
errorMessage
.
BeginReading
(
)
;
MOZ_CRASH
(
"
GFX
:
Problem
locking
DXGL
device
"
)
;
}
return
ret
;
}
bool
UnlockObject
(
HANDLE
hObject
)
const
{
bool
ret
=
mWGL
-
>
fDXUnlockObjects
(
mDXGLDeviceHandle
1
&
hObject
)
;
if
(
!
ret
)
{
uint32_t
error
=
GetLastError
(
)
;
const
nsPrintfCString
errorMessage
(
"
wglDXUnlockObjects
(
0x
%
x
1
{
0x
%
x
}
)
"
"
failed
:
GetLastError
(
)
:
0x
%
x
\
n
"
mDXGLDeviceHandle
hObject
error
)
;
gfxCriticalError
(
)
<
<
errorMessage
.
BeginReading
(
)
;
MOZ_CRASH
(
"
GFX
:
Problem
unlocking
DXGL
device
"
)
;
}
return
ret
;
}
}
;
UniquePtr
<
SharedSurface_D3D11Interop
>
SharedSurface_D3D11Interop
:
:
Create
(
const
RefPtr
<
DXGLDevice
>
&
dxgl
GLContext
*
gl
const
gfx
:
:
IntSize
&
size
bool
hasAlpha
)
{
auto
&
d3d
=
*
dxgl
-
>
mD3D
;
DXGI_FORMAT
format
=
hasAlpha
?
DXGI_FORMAT_B8G8R8A8_UNORM
:
DXGI_FORMAT_B8G8R8X8_UNORM
;
CD3D11_TEXTURE2D_DESC
desc
(
format
size
.
width
size
.
height
1
1
)
;
desc
.
MiscFlags
=
D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX
;
RefPtr
<
ID3D11Texture2D
>
textureD3D
;
HRESULT
hr
=
d3d
.
CreateTexture2D
(
&
desc
nullptr
getter_AddRefs
(
textureD3D
)
)
;
if
(
FAILED
(
hr
)
)
{
NS_WARNING
(
"
Failed
to
create
texture
for
CanvasLayer
!
"
)
;
return
nullptr
;
}
RefPtr
<
IDXGIResource
>
textureDXGI
;
hr
=
textureD3D
-
>
QueryInterface
(
__uuidof
(
IDXGIResource
)
getter_AddRefs
(
textureDXGI
)
)
;
if
(
FAILED
(
hr
)
)
{
NS_WARNING
(
"
Failed
to
open
texture
for
sharing
!
"
)
;
return
nullptr
;
}
RefPtr
<
IDXGIKeyedMutex
>
keyedMutex
;
hr
=
textureD3D
-
>
QueryInterface
(
(
IDXGIKeyedMutex
*
*
)
getter_AddRefs
(
keyedMutex
)
)
;
if
(
FAILED
(
hr
)
)
{
NS_WARNING
(
"
Failed
to
obtained
keyed
mutex
from
texture
!
"
)
;
return
nullptr
;
}
HANDLE
sharedHandle
;
textureDXGI
-
>
GetSharedHandle
(
&
sharedHandle
)
;
GLuint
renderbufferGL
=
0
;
gl
-
>
MakeCurrent
(
)
;
gl
-
>
fGenRenderbuffers
(
1
&
renderbufferGL
)
;
HANDLE
objectWGL
=
dxgl
-
>
RegisterObject
(
textureD3D
renderbufferGL
LOCAL_GL_RENDERBUFFER
LOCAL_WGL_ACCESS_WRITE_DISCARD_NV
)
;
if
(
!
objectWGL
)
{
NS_WARNING
(
"
Failed
to
register
D3D
object
with
WGL
.
"
)
;
return
nullptr
;
}
typedef
SharedSurface_D3D11Interop
ptrT
;
UniquePtr
<
ptrT
>
ret
(
new
ptrT
(
gl
size
hasAlpha
renderbufferGL
dxgl
objectWGL
textureD3D
sharedHandle
keyedMutex
)
)
;
return
Move
(
ret
)
;
}
SharedSurface_D3D11Interop
:
:
SharedSurface_D3D11Interop
(
GLContext
*
gl
const
gfx
:
:
IntSize
&
size
bool
hasAlpha
GLuint
renderbufferGL
const
RefPtr
<
DXGLDevice
>
&
dxgl
HANDLE
objectWGL
const
RefPtr
<
ID3D11Texture2D
>
&
textureD3D
HANDLE
sharedHandle
const
RefPtr
<
IDXGIKeyedMutex
>
&
keyedMutex
)
:
SharedSurface
(
SharedSurfaceType
:
:
DXGLInterop2
AttachmentType
:
:
GLRenderbuffer
gl
size
hasAlpha
true
)
mProdRB
(
renderbufferGL
)
mDXGL
(
dxgl
)
mObjectWGL
(
objectWGL
)
mTextureD3D
(
textureD3D
)
mNeedsFinish
(
gfxPrefs
:
:
WebGLDXGLNeedsFinish
(
)
)
mSharedHandle
(
sharedHandle
)
mKeyedMutex
(
keyedMutex
)
mLockedForGL
(
false
)
{
}
SharedSurface_D3D11Interop
:
:
~
SharedSurface_D3D11Interop
(
)
{
MOZ_ASSERT
(
!
mLockedForGL
)
;
if
(
!
mDXGL
-
>
UnregisterObject
(
mObjectWGL
)
)
{
NS_WARNING
(
"
Failed
to
release
a
DXGL
object
possibly
leaking
it
.
"
)
;
}
if
(
!
mGL
-
>
MakeCurrent
(
)
)
return
;
mGL
-
>
fDeleteRenderbuffers
(
1
&
mProdRB
)
;
}
void
SharedSurface_D3D11Interop
:
:
ProducerAcquireImpl
(
)
{
MOZ_ASSERT
(
!
mLockedForGL
)
;
if
(
mKeyedMutex
)
{
const
uint64_t
keyValue
=
0
;
const
DWORD
timeoutMs
=
10000
;
HRESULT
hr
=
mKeyedMutex
-
>
AcquireSync
(
keyValue
timeoutMs
)
;
if
(
hr
=
=
WAIT_TIMEOUT
)
{
MOZ_CRASH
(
"
GFX
:
d3d11Interop
timeout
"
)
;
}
}
MOZ_ALWAYS_TRUE
(
mDXGL
-
>
LockObject
(
mObjectWGL
)
)
;
mLockedForGL
=
true
;
}
void
SharedSurface_D3D11Interop
:
:
ProducerReleaseImpl
(
)
{
MOZ_ASSERT
(
mLockedForGL
)
;
mGL
-
>
fFlush
(
)
;
MOZ_ALWAYS_TRUE
(
mDXGL
-
>
UnlockObject
(
mObjectWGL
)
)
;
mLockedForGL
=
false
;
if
(
mKeyedMutex
)
{
mKeyedMutex
-
>
ReleaseSync
(
0
)
;
}
if
(
mNeedsFinish
)
{
mGL
-
>
fFinish
(
)
;
}
}
bool
SharedSurface_D3D11Interop
:
:
ToSurfaceDescriptor
(
layers
:
:
SurfaceDescriptor
*
const
out_descriptor
)
{
gfx
:
:
SurfaceFormat
format
=
mHasAlpha
?
gfx
:
:
SurfaceFormat
:
:
B8G8R8A8
:
gfx
:
:
SurfaceFormat
:
:
B8G8R8X8
;
*
out_descriptor
=
layers
:
:
SurfaceDescriptorD3D10
(
WindowsHandle
(
mSharedHandle
)
format
mSize
)
;
return
true
;
}
UniquePtr
<
SurfaceFactory_D3D11Interop
>
SurfaceFactory_D3D11Interop
:
:
Create
(
GLContext
*
gl
const
SurfaceCaps
&
caps
const
RefPtr
<
layers
:
:
ClientIPCAllocator
>
&
allocator
const
layers
:
:
TextureFlags
&
flags
)
{
WGLLibrary
*
wgl
=
&
sWGLLib
;
if
(
!
wgl
|
|
!
wgl
-
>
HasDXInterop2
(
)
)
return
nullptr
;
RefPtr
<
DXGLDevice
>
dxgl
=
DXGLDevice
:
:
Open
(
wgl
)
;
if
(
!
dxgl
)
{
NS_WARNING
(
"
Failed
to
open
D3D
device
for
use
by
WGL
.
"
)
;
return
nullptr
;
}
typedef
SurfaceFactory_D3D11Interop
ptrT
;
UniquePtr
<
ptrT
>
ret
(
new
ptrT
(
gl
caps
allocator
flags
dxgl
)
)
;
return
Move
(
ret
)
;
}
SurfaceFactory_D3D11Interop
:
:
SurfaceFactory_D3D11Interop
(
GLContext
*
gl
const
SurfaceCaps
&
caps
const
RefPtr
<
layers
:
:
ClientIPCAllocator
>
&
allocator
const
layers
:
:
TextureFlags
&
flags
const
RefPtr
<
DXGLDevice
>
&
dxgl
)
:
SurfaceFactory
(
SharedSurfaceType
:
:
DXGLInterop2
gl
caps
allocator
flags
)
mDXGL
(
dxgl
)
{
}
SurfaceFactory_D3D11Interop
:
:
~
SurfaceFactory_D3D11Interop
(
)
{
}
}
}
