#
ifndef
GLREADTEXIMAGEHELPER_H_
#
define
GLREADTEXIMAGEHELPER_H_
#
include
"
GLContextTypes
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsSize
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
MatrixFwd
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
DataSourceSurface
;
}
namespace
gl
{
bool
GetActualReadFormats
(
GLContext
*
gl
GLenum
destFormat
GLenum
destType
GLenum
*
out_readFormat
GLenum
*
out_readType
)
;
void
ReadPixelsIntoBuffer
(
GLContext
*
gl
uint8_t
*
aData
int32_t
aStride
const
gfx
:
:
IntSize
&
aSize
gfx
:
:
SurfaceFormat
aFormat
)
;
void
ReadPixelsIntoDataSurface
(
GLContext
*
aGL
gfx
:
:
DataSourceSurface
*
aSurface
)
;
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
ReadBackSurface
(
GLContext
*
gl
GLuint
aTexture
bool
aYInvert
gfx
:
:
SurfaceFormat
aFormat
)
;
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
YInvertImageSurface
(
gfx
:
:
DataSourceSurface
*
aSurf
uint32_t
aStride
)
;
void
SwapRAndBComponents
(
gfx
:
:
DataSourceSurface
*
surf
)
;
class
GLReadTexImageHelper
final
{
GLContext
*
mGL
;
GLuint
mPrograms
[
4
]
;
GLuint
TextureImageProgramFor
(
GLenum
aTextureTarget
int
aShader
)
;
bool
DidGLErrorOccur
(
const
char
*
str
)
;
public
:
explicit
GLReadTexImageHelper
(
GLContext
*
gl
)
;
~
GLReadTexImageHelper
(
)
;
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
ReadTexImage
(
GLuint
aTextureId
GLenum
aTextureTarget
const
gfx
:
:
IntSize
&
aSize
const
gfx
:
:
Matrix4x4
&
aTexMatrix
int
aShaderProgram
bool
aYInvert
=
false
)
;
bool
ReadTexImage
(
gfx
:
:
DataSourceSurface
*
aDest
GLuint
aTextureId
GLenum
aTextureTarget
const
gfx
:
:
IntSize
&
aSize
const
gfx
:
:
Matrix4x4
&
aTexMatrix
int
aShaderProgram
bool
aYInvert
=
false
)
;
}
;
}
}
#
endif
