#
ifndef
GLCONTEXTEAGL_H_
#
define
GLCONTEXTEAGL_H_
#
include
"
GLContext
.
h
"
#
include
<
CoreGraphics
/
CoreGraphics
.
h
>
#
include
<
OpenGLES
/
EAGL
.
h
>
namespace
mozilla
{
namespace
gl
{
class
GLContextEAGL
:
public
GLContext
{
friend
class
GLContextProviderEAGL
;
EAGLContext
*
const
mContext
;
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
GLContextEAGL
override
)
GLContextEAGL
(
const
SurfaceCaps
&
caps
EAGLContext
*
context
GLContext
*
sharedContext
bool
isOffscreen
ContextProfile
profile
)
;
~
GLContextEAGL
(
)
;
virtual
GLContextType
GetContextType
(
)
const
override
{
return
GLContextType
:
:
EAGL
;
}
static
GLContextEAGL
*
Cast
(
GLContext
*
gl
)
{
MOZ_ASSERT
(
gl
-
>
GetContextType
(
)
=
=
GLContextType
:
:
EAGL
)
;
return
static_cast
<
GLContextEAGL
*
>
(
gl
)
;
}
bool
Init
(
)
override
;
bool
AttachToWindow
(
nsIWidget
*
aWidget
)
;
EAGLContext
*
GetEAGLContext
(
)
const
{
return
mContext
;
}
virtual
bool
MakeCurrentImpl
(
bool
aForce
)
override
;
virtual
bool
IsCurrent
(
)
override
;
virtual
bool
SetupLookupFunction
(
)
override
;
virtual
bool
IsDoubleBuffered
(
)
const
override
;
virtual
bool
SupportsRobustness
(
)
const
override
;
virtual
bool
SwapBuffers
(
)
override
;
virtual
GLuint
GetDefaultFramebuffer
(
)
override
{
return
mBackbufferFB
;
}
virtual
bool
RenewSurface
(
nsIWidget
*
aWidget
)
override
{
return
RecreateRB
(
)
;
}
private
:
GLuint
mBackbufferRB
;
GLuint
mBackbufferFB
;
void
*
mLayer
;
bool
RecreateRB
(
)
;
}
;
}
}
#
endif
