#
ifndef
SHARED_SURFACE_D3D11_INTEROP_H_
#
define
SHARED_SURFACE_D3D11_INTEROP_H_
#
include
<
windows
.
h
>
#
include
"
SharedSurface
.
h
"
namespace
mozilla
{
namespace
gl
{
class
DXInterop2Device
;
class
GLContext
;
class
WGLLibrary
;
class
SharedSurface_D3D11Interop
final
:
public
SharedSurface
{
public
:
struct
Data
final
{
const
RefPtr
<
DXInterop2Device
>
interop
;
HANDLE
lockHandle
;
RefPtr
<
ID3D11Texture2D
>
texD3D
;
HANDLE
dxgiHandle
;
UniquePtr
<
Renderbuffer
>
interopRb
;
UniquePtr
<
MozFramebuffer
>
interopFbIfNeedsIndirect
;
}
;
const
Data
mData
;
const
bool
mNeedsFinish
;
private
:
bool
mLockedForGL
=
false
;
public
:
static
UniquePtr
<
SharedSurface_D3D11Interop
>
Create
(
const
SharedSurfaceDesc
&
DXInterop2Device
*
)
;
private
:
SharedSurface_D3D11Interop
(
const
SharedSurfaceDesc
&
UniquePtr
<
MozFramebuffer
>
&
&
fbForDrawing
Data
&
&
)
;
public
:
virtual
~
SharedSurface_D3D11Interop
(
)
;
void
LockProdImpl
(
)
override
{
}
void
UnlockProdImpl
(
)
override
{
}
void
ProducerAcquireImpl
(
)
override
;
void
ProducerReleaseImpl
(
)
override
;
Maybe
<
layers
:
:
SurfaceDescriptor
>
ToSurfaceDescriptor
(
)
override
;
}
;
class
SurfaceFactory_D3D11Interop
:
public
SurfaceFactory
{
public
:
const
RefPtr
<
DXInterop2Device
>
mInterop
;
static
UniquePtr
<
SurfaceFactory_D3D11Interop
>
Create
(
GLContext
&
gl
)
;
protected
:
SurfaceFactory_D3D11Interop
(
const
PartialSharedSurfaceDesc
&
DXInterop2Device
*
interop
)
;
public
:
virtual
~
SurfaceFactory_D3D11Interop
(
)
;
protected
:
UniquePtr
<
SharedSurface
>
CreateSharedImpl
(
const
SharedSurfaceDesc
&
desc
)
override
{
return
SharedSurface_D3D11Interop
:
:
Create
(
desc
mInterop
)
;
}
}
;
}
}
#
endif
