#
ifndef
SCREEN_BUFFER_H_
#
define
SCREEN_BUFFER_H_
#
include
"
GLTypes
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
functional
>
#
include
<
queue
>
#
include
<
memory
>
namespace
mozilla
{
namespace
gl
{
class
SharedSurface
;
class
SurfaceFactory
;
class
SwapChain
;
class
SwapChainPresenter
final
{
friend
class
SwapChain
;
SwapChain
*
mSwapChain
;
std
:
:
shared_ptr
<
SharedSurface
>
mBackBuffer
;
public
:
explicit
SwapChainPresenter
(
SwapChain
&
swapChain
)
;
~
SwapChainPresenter
(
)
;
const
auto
&
BackBuffer
(
)
const
{
return
mBackBuffer
;
}
std
:
:
shared_ptr
<
SharedSurface
>
SwapBackBuffer
(
std
:
:
shared_ptr
<
SharedSurface
>
bool
&
aSuccess
)
;
GLuint
Fb
(
)
const
;
}
;
class
SwapChain
final
{
friend
class
SwapChainPresenter
;
public
:
UniquePtr
<
SurfaceFactory
>
mFactory
;
private
:
std
:
:
queue
<
std
:
:
shared_ptr
<
SharedSurface
>
>
mPool
;
std
:
:
shared_ptr
<
SharedSurface
>
mFrontBuffer
;
std
:
:
function
<
void
(
)
>
mDestroyedCallback
;
public
:
std
:
:
shared_ptr
<
SharedSurface
>
mPrevFrontBuffer
;
private
:
SwapChainPresenter
*
mPresenter
=
nullptr
;
public
:
SwapChain
(
)
;
virtual
~
SwapChain
(
)
;
void
ClearPool
(
)
;
void
StoreRecycledSurface
(
const
std
:
:
shared_ptr
<
SharedSurface
>
&
surf
)
;
const
auto
&
FrontBuffer
(
)
const
{
return
mFrontBuffer
;
}
UniquePtr
<
SwapChainPresenter
>
Acquire
(
const
gfx
:
:
IntSize
&
gfx
:
:
ColorSpace2
)
;
void
SetDestroyedCallback
(
std
:
:
function
<
void
(
)
>
&
&
aDestroyedCallback
)
{
MOZ_ASSERT
(
!
mDestroyedCallback
)
;
mDestroyedCallback
=
std
:
:
move
(
aDestroyedCallback
)
;
mPool
=
{
}
;
}
}
;
}
}
#
endif
