#
ifdef
MOZ_WIDGET_GTK
#
include
<
gdk
/
gdk
.
h
>
#
include
<
gdk
/
gdkx
.
h
>
#
endif
#
include
"
GLContextProvider
.
h
"
namespace
mozilla
{
namespace
gl
{
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
widget
;
static
class
GLContextProviderGLX
sGLContextProviderGLX
;
static
class
GLContextProviderEGL
sGLContextProviderEGL
;
already_AddRefed
<
GLContext
>
GLContextProviderWayland
:
:
CreateWrappingExisting
(
void
*
aContext
void
*
aSurface
)
{
if
(
GDK_IS_X11_DISPLAY
(
gdk_display_get_default
(
)
)
)
{
return
sGLContextProviderGLX
.
CreateWrappingExisting
(
aContext
aSurface
)
;
}
else
{
return
sGLContextProviderEGL
.
CreateWrappingExisting
(
aContext
aSurface
)
;
}
}
already_AddRefed
<
GLContext
>
GLContextProviderWayland
:
:
CreateForCompositorWidget
(
CompositorWidget
*
aCompositorWidget
bool
aWebRender
bool
aForceAccelerated
)
{
if
(
GDK_IS_X11_DISPLAY
(
gdk_display_get_default
(
)
)
)
{
return
sGLContextProviderGLX
.
CreateForCompositorWidget
(
aCompositorWidget
aWebRender
aForceAccelerated
)
;
}
else
{
return
sGLContextProviderEGL
.
CreateForCompositorWidget
(
aCompositorWidget
aWebRender
aForceAccelerated
)
;
}
}
already_AddRefed
<
GLContext
>
GLContextProviderWayland
:
:
CreateHeadless
(
CreateContextFlags
flags
nsACString
*
const
out_failureId
)
{
if
(
GDK_IS_X11_DISPLAY
(
gdk_display_get_default
(
)
)
)
{
return
sGLContextProviderGLX
.
CreateHeadless
(
flags
out_failureId
)
;
}
else
{
return
sGLContextProviderEGL
.
CreateHeadless
(
flags
out_failureId
)
;
}
}
already_AddRefed
<
GLContext
>
GLContextProviderWayland
:
:
CreateOffscreen
(
const
IntSize
&
size
const
SurfaceCaps
&
minCaps
CreateContextFlags
flags
nsACString
*
const
out_failureId
)
{
if
(
GDK_IS_X11_DISPLAY
(
gdk_display_get_default
(
)
)
)
{
return
sGLContextProviderGLX
.
CreateOffscreen
(
size
minCaps
flags
out_failureId
)
;
}
else
{
return
sGLContextProviderEGL
.
CreateOffscreen
(
size
minCaps
flags
out_failureId
)
;
}
}
GLContext
*
GLContextProviderWayland
:
:
GetGlobalContext
(
)
{
if
(
GDK_IS_X11_DISPLAY
(
gdk_display_get_default
(
)
)
)
{
return
sGLContextProviderGLX
.
GetGlobalContext
(
)
;
}
else
{
return
sGLContextProviderEGL
.
GetGlobalContext
(
)
;
}
}
void
GLContextProviderWayland
:
:
Shutdown
(
)
{
if
(
GDK_IS_X11_DISPLAY
(
gdk_display_get_default
(
)
)
)
{
sGLContextProviderGLX
.
Shutdown
(
)
;
}
else
{
sGLContextProviderEGL
.
Shutdown
(
)
;
}
}
}
}
