#
ifndef
GLCONTEXTGLX_H_
#
define
GLCONTEXTGLX_H_
#
include
"
GLContext
.
h
"
#
include
"
GLXLibrary
.
h
"
#
include
"
mozilla
/
X11Util
.
h
"
namespace
mozilla
{
namespace
gl
{
class
GLContextGLX
:
public
GLContext
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
GLContextGLX
override
)
static
already_AddRefed
<
GLContextGLX
>
CreateGLContext
(
const
GLContextDesc
&
std
:
:
shared_ptr
<
gfx
:
:
XlibDisplay
>
display
GLXDrawable
drawable
GLXFBConfig
cfg
Drawable
ownedPixmap
=
X11None
)
;
static
bool
FindVisual
(
Display
*
display
int
screen
int
*
const
out_visualId
)
;
static
bool
FindFBConfigForWindow
(
Display
*
display
int
screen
Window
window
GLXFBConfig
*
const
out_config
int
*
const
out_visid
bool
aWebRender
)
;
virtual
~
GLContextGLX
(
)
;
GLContextType
GetContextType
(
)
const
override
{
return
GLContextType
:
:
GLX
;
}
static
GLContextGLX
*
Cast
(
GLContext
*
gl
)
{
MOZ_ASSERT
(
gl
-
>
GetContextType
(
)
=
=
GLContextType
:
:
GLX
)
;
return
static_cast
<
GLContextGLX
*
>
(
gl
)
;
}
bool
Init
(
)
override
;
bool
MakeCurrentImpl
(
)
const
override
;
bool
IsCurrentImpl
(
)
const
override
;
Maybe
<
SymbolLoader
>
GetSymbolLoader
(
)
const
override
;
bool
IsDoubleBuffered
(
)
const
override
;
bool
SwapBuffers
(
)
override
;
GLint
GetBufferAge
(
)
const
override
;
void
GetWSIInfo
(
nsCString
*
const
out
)
const
override
;
bool
OverrideDrawable
(
GLXDrawable
drawable
)
;
bool
RestoreDrawable
(
)
;
private
:
friend
class
GLContextProviderGLX
;
GLContextGLX
(
const
GLContextDesc
&
std
:
:
shared_ptr
<
gfx
:
:
XlibDisplay
>
aDisplay
GLXDrawable
aDrawable
GLXContext
aContext
bool
aDoubleBuffered
Drawable
aOwnedPixmap
=
X11None
)
;
const
GLXContext
mContext
;
const
std
:
:
shared_ptr
<
gfx
:
:
XlibDisplay
>
mDisplay
;
const
GLXDrawable
mDrawable
;
const
Drawable
mOwnedPixmap
;
const
bool
mDoubleBuffered
;
GLXLibrary
*
const
mGLX
;
const
bool
mOwnsContext
=
true
;
}
;
}
}
#
endif
