gl_provider
=
"
Null
"
if
CONFIG
[
"
MOZ_WIDGET_TOOLKIT
"
]
=
=
"
windows
"
:
gl_provider
=
"
WGL
"
elif
CONFIG
[
"
MOZ_WIDGET_TOOLKIT
"
]
=
=
"
cocoa
"
:
gl_provider
=
"
CGL
"
elif
CONFIG
[
"
MOZ_WIDGET_TOOLKIT
"
]
=
=
"
uikit
"
:
gl_provider
=
"
EAGL
"
elif
CONFIG
[
"
MOZ_WIDGET_TOOLKIT
"
]
=
=
"
gtk
"
:
gl_provider
=
"
Linux
"
elif
CONFIG
[
"
MOZ_WIDGET_TOOLKIT
"
]
=
=
"
android
"
:
gl_provider
=
"
EGL
"
if
CONFIG
[
"
MOZ_GL_PROVIDER
"
]
:
gl_provider
=
CONFIG
[
"
MOZ_GL_PROVIDER
"
]
EXPORTS
+
=
[
"
AndroidSurfaceTexture
.
h
"
"
AutoMappable
.
h
"
"
Colorspaces
.
h
"
"
ForceDiscreteGPUHelperCGL
.
h
"
"
GfxTexturesReporter
.
h
"
"
GLBlitHelper
.
h
"
"
GLConsts
.
h
"
"
GLContext
.
h
"
"
GLContextEGL
.
h
"
"
GLContextProvider
.
h
"
"
GLContextProviderImpl
.
h
"
"
GLContextSymbols
.
h
"
"
GLContextTypes
.
h
"
"
GLDefs
.
h
"
"
GLLibraryEGL
.
h
"
"
GLLibraryLoader
.
h
"
"
GLReadTexImageHelper
.
h
"
"
GLScreenBuffer
.
h
"
"
GLTextureImage
.
h
"
"
GLTypes
.
h
"
"
GLUploadHelpers
.
h
"
"
GLVendor
.
h
"
"
HeapCopyOfStackArray
.
h
"
"
MozFramebuffer
.
h
"
"
ScopedGLHelpers
.
h
"
"
SharedSurface
.
h
"
"
SharedSurfaceEGL
.
h
"
"
SharedSurfaceGL
.
h
"
"
SurfaceTypes
.
h
"
]
if
CONFIG
[
"
MOZ_WIDGET_TOOLKIT
"
]
=
=
"
windows
"
:
EXPORTS
+
=
[
"
GLContextWGL
.
h
"
"
SharedSurfaceANGLE
.
h
"
"
SharedSurfaceD3D11Interop
.
h
"
"
WGLLibrary
.
h
"
]
UNIFIED_SOURCES
+
=
[
"
GLBlitHelperD3D
.
cpp
"
"
GLContextProviderWGL
.
cpp
"
"
SharedSurfaceANGLE
.
cpp
"
"
SharedSurfaceD3D11Interop
.
cpp
"
]
if
CONFIG
[
"
MOZ_WIDGET_TOOLKIT
"
]
=
=
"
android
"
:
EXPORTS
+
=
[
"
AndroidNativeWindow
.
h
"
"
SharedSurfaceAndroidHardwareBuffer
.
h
"
]
UNIFIED_SOURCES
+
=
[
"
SharedSurfaceAndroidHardwareBuffer
.
cpp
"
]
if
gl_provider
=
=
"
CGL
"
:
SOURCES
+
=
[
"
GLContextProviderCGL
.
mm
"
]
EXPORTS
+
=
[
"
GLContextCGL
.
h
"
"
SharedSurfaceIO
.
h
"
]
SOURCES
+
=
[
"
SharedSurfaceIO
.
cpp
"
]
OS_LIBS
+
=
[
"
-
framework
IOSurface
"
]
elif
gl_provider
=
=
"
EAGL
"
:
SOURCES
+
=
[
"
GLContextProviderEAGL
.
mm
"
]
EXPORTS
+
=
[
"
GLContextEAGL
.
h
"
]
elif
gl_provider
=
=
"
Linux
"
:
SOURCES
+
=
[
"
GLContextProviderLinux
.
cpp
"
]
EXPORTS
+
=
[
"
GLContextGLX
.
h
"
"
GLXLibrary
.
h
"
]
if
CONFIG
[
"
MOZ_X11
"
]
:
SOURCES
+
=
[
"
GLContextProviderGLX
.
cpp
"
]
if
CONFIG
[
"
MOZ_WAYLAND
"
]
:
SOURCES
+
=
[
"
SharedSurfaceDMABUF
.
cpp
"
]
UNIFIED_SOURCES
+
=
[
"
AndroidSurfaceTexture
.
cpp
"
"
Colorspaces
.
cpp
"
"
GfxTexturesReporter
.
cpp
"
"
GLBlitHelper
.
cpp
"
"
GLContext
.
cpp
"
"
GLContextFeatures
.
cpp
"
"
GLContextProviderEGL
.
cpp
"
"
GLDebugUtils
.
cpp
"
"
GLLibraryEGL
.
cpp
"
"
GLLibraryLoader
.
cpp
"
"
GLReadTexImageHelper
.
cpp
"
"
GLTextureImage
.
cpp
"
"
GLUploadHelpers
.
cpp
"
"
MozFramebuffer
.
cpp
"
"
ScopedGLHelpers
.
cpp
"
"
SharedSurface
.
cpp
"
"
SharedSurfaceEGL
.
cpp
"
"
SharedSurfaceGL
.
cpp
"
]
SOURCES
+
=
[
"
GLScreenBuffer
.
cpp
"
]
TEST_DIRS
+
=
[
"
gtest
"
]
include
(
"
/
ipc
/
chromium
/
chromium
-
config
.
mozbuild
"
)
FINAL_LIBRARY
=
"
xul
"
if
CONFIG
[
"
MOZ_D3DCOMPILER_VISTA_DLL
"
]
:
DEFINES
[
"
MOZ_D3DCOMPILER_VISTA_DLL
"
]
=
CONFIG
[
"
MOZ_D3DCOMPILER_VISTA_DLL
"
]
if
CONFIG
[
"
MOZ_WIDGET_TOOLKIT
"
]
=
=
"
gtk
"
:
CXXFLAGS
+
=
CONFIG
[
"
MOZ_GTK3_CFLAGS
"
]
CFLAGS
+
=
CONFIG
[
"
MOZ_GTK3_CFLAGS
"
]
CXXFLAGS
+
=
[
"
-
Werror
=
switch
"
]
if
CONFIG
[
"
MOZ_WAYLAND
"
]
:
CXXFLAGS
+
=
CONFIG
[
"
MOZ_WAYLAND_CFLAGS
"
]
CFLAGS
+
=
CONFIG
[
"
MOZ_WAYLAND_CFLAGS
"
]
LOCAL_INCLUDES
+
=
CONFIG
[
"
SKIA_INCLUDES
"
]
LOCAL_INCLUDES
+
=
[
"
/
gfx
/
cairo
/
cairo
/
src
"
]
