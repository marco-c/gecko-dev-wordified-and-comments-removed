#
ifndef
HEAPCOPYOFSTACKARRAY_H_
#
define
HEAPCOPYOFSTACKARRAY_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
string
.
h
>
namespace
mozilla
{
template
<
typename
ElemType
>
class
HeapCopyOfStackArray
{
public
:
template
<
size_t
N
>
MOZ_IMPLICIT
HeapCopyOfStackArray
(
const
ElemType
(
&
array
)
[
N
]
)
:
mArrayLength
(
N
)
mArrayData
(
MakeUnique
<
ElemType
[
]
>
(
N
)
)
{
memcpy
(
mArrayData
.
get
(
)
&
array
[
0
]
N
*
sizeof
(
ElemType
)
)
;
}
ElemType
*
Data
(
)
const
{
return
mArrayData
.
get
(
)
;
}
size_t
ArrayLength
(
)
const
{
return
mArrayLength
;
}
size_t
ByteLength
(
)
const
{
return
mArrayLength
*
sizeof
(
ElemType
)
;
}
private
:
HeapCopyOfStackArray
(
)
=
delete
;
HeapCopyOfStackArray
(
const
HeapCopyOfStackArray
&
)
=
delete
;
const
size_t
mArrayLength
;
UniquePtr
<
ElemType
[
]
>
const
mArrayData
;
}
;
}
#
endif
