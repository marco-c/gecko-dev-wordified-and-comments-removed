#
include
"
prenv
.
h
"
#
include
"
GLContextProvider
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
namespace
mozilla
:
:
gl
{
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
widget
;
static
class
GLContextProviderGLX
sGLContextProviderGLX
;
static
class
GLContextProviderEGL
sGLContextProviderEGL
;
already_AddRefed
<
GLContext
>
GLContextProviderLinux
:
:
CreateForCompositorWidget
(
CompositorWidget
*
aCompositorWidget
bool
aHardwareWebRender
bool
aForceAccelerated
)
{
if
(
gfxVars
:
:
UseEGL
(
)
)
{
return
sGLContextProviderEGL
.
CreateForCompositorWidget
(
aCompositorWidget
aHardwareWebRender
aForceAccelerated
)
;
}
else
{
return
sGLContextProviderGLX
.
CreateForCompositorWidget
(
aCompositorWidget
aHardwareWebRender
aForceAccelerated
)
;
}
}
already_AddRefed
<
GLContext
>
GLContextProviderLinux
:
:
CreateHeadless
(
const
GLContextCreateDesc
&
desc
nsACString
*
const
out_failureId
)
{
if
(
gfxVars
:
:
UseEGL
(
)
)
{
return
sGLContextProviderEGL
.
CreateHeadless
(
desc
out_failureId
)
;
}
else
{
return
sGLContextProviderGLX
.
CreateHeadless
(
desc
out_failureId
)
;
}
}
GLContext
*
GLContextProviderLinux
:
:
GetGlobalContext
(
)
{
if
(
gfxVars
:
:
UseEGL
(
)
)
{
return
sGLContextProviderEGL
.
GetGlobalContext
(
)
;
}
else
{
return
sGLContextProviderGLX
.
GetGlobalContext
(
)
;
}
}
void
GLContextProviderLinux
:
:
Shutdown
(
)
{
if
(
gfxVars
:
:
UseEGL
(
)
)
{
sGLContextProviderEGL
.
Shutdown
(
)
;
}
else
{
sGLContextProviderGLX
.
Shutdown
(
)
;
}
}
}
