#
ifndef
SHARED_SURFACE_DMABUF_H_
#
define
SHARED_SURFACE_DMABUF_H_
#
include
"
SharedSurface
.
h
"
#
include
"
mozilla
/
widget
/
WaylandDMABufSurface
.
h
"
namespace
mozilla
{
namespace
gl
{
class
GLContext
;
class
GLLibraryEGL
;
class
SharedSurface_DMABUF
final
:
public
SharedSurface
{
public
:
static
UniquePtr
<
SharedSurface_DMABUF
>
Create
(
GLContext
*
prodGL
const
GLFormats
&
formats
const
gfx
:
:
IntSize
&
size
bool
hasAlpha
)
;
static
SharedSurface_DMABUF
*
Cast
(
SharedSurface
*
surf
)
{
MOZ_ASSERT
(
surf
-
>
mType
=
=
SharedSurfaceType
:
:
EGLSurfaceDMABUF
)
;
return
(
SharedSurface_DMABUF
*
)
surf
;
}
protected
:
RefPtr
<
WaylandDMABufSurface
>
mSurface
;
SharedSurface_DMABUF
(
GLContext
*
gl
const
gfx
:
:
IntSize
&
size
bool
hasAlpha
RefPtr
<
WaylandDMABufSurface
>
aSurface
)
;
void
UpdateProdTexture
(
const
MutexAutoLock
&
curAutoLock
)
;
public
:
virtual
~
SharedSurface_DMABUF
(
)
;
virtual
void
LockProdImpl
(
)
override
{
}
virtual
void
UnlockProdImpl
(
)
override
{
}
virtual
void
ProducerAcquireImpl
(
)
override
{
}
virtual
void
ProducerReleaseImpl
(
)
override
;
virtual
void
ProducerReadAcquireImpl
(
)
override
{
}
virtual
void
ProducerReadReleaseImpl
(
)
override
{
}
virtual
GLuint
ProdTexture
(
)
override
{
return
mSurface
-
>
GetTexture
(
)
;
}
virtual
bool
ToSurfaceDescriptor
(
layers
:
:
SurfaceDescriptor
*
const
out_descriptor
)
override
;
}
;
class
SurfaceFactory_DMABUF
:
public
SurfaceFactory
{
public
:
SurfaceFactory_DMABUF
(
GLContext
*
prodGL
const
SurfaceCaps
&
caps
const
RefPtr
<
layers
:
:
LayersIPCChannel
>
&
allocator
const
layers
:
:
TextureFlags
&
flags
)
:
SurfaceFactory
(
SharedSurfaceType
:
:
EGLSurfaceDMABUF
prodGL
caps
allocator
flags
)
{
}
;
public
:
virtual
UniquePtr
<
SharedSurface
>
CreateShared
(
const
gfx
:
:
IntSize
&
size
)
override
{
bool
hasAlpha
=
mReadCaps
.
alpha
;
return
SharedSurface_DMABUF
:
:
Create
(
mGL
mFormats
size
hasAlpha
)
;
}
}
;
}
}
#
endif
