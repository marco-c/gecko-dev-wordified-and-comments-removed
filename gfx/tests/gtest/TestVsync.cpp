#
include
"
gmock
/
gmock
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
mozilla
/
nsRefPtr
.
h
"
#
include
"
SoftwareVsyncSource
.
h
"
#
include
"
VsyncSource
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
VsyncDispatcher
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
layers
;
using
:
:
testing
:
:
_
;
const
int
kVsyncTimeoutMS
=
50
;
class
TestVsyncObserver
:
public
VsyncObserver
{
public
:
TestVsyncObserver
(
)
:
mDidGetVsyncNotification
(
false
)
mVsyncMonitor
(
"
VsyncMonitor
"
)
{
}
virtual
bool
NotifyVsync
(
TimeStamp
aVsyncTimeStamp
)
override
{
MonitorAutoLock
lock
(
mVsyncMonitor
)
;
mDidGetVsyncNotification
=
true
;
mVsyncMonitor
.
Notify
(
)
;
return
true
;
}
void
WaitForVsyncNotification
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
DidGetVsyncNotification
(
)
)
{
return
;
}
{
MonitorAutoLock
lock
(
mVsyncMonitor
)
;
PRIntervalTime
timeout
=
PR_MillisecondsToInterval
(
kVsyncTimeoutMS
)
;
lock
.
Wait
(
timeout
)
;
}
}
bool
DidGetVsyncNotification
(
)
{
MonitorAutoLock
lock
(
mVsyncMonitor
)
;
return
mDidGetVsyncNotification
;
}
void
ResetVsyncNotification
(
)
{
MonitorAutoLock
lock
(
mVsyncMonitor
)
;
mDidGetVsyncNotification
=
false
;
}
private
:
bool
mDidGetVsyncNotification
;
private
:
Monitor
mVsyncMonitor
;
}
;
class
VsyncTester
:
public
:
:
testing
:
:
Test
{
protected
:
explicit
VsyncTester
(
)
{
gfxPlatform
:
:
GetPlatform
(
)
;
gfxPrefs
:
:
GetSingleton
(
)
;
mVsyncSource
=
gfxPlatform
:
:
GetPlatform
(
)
-
>
GetHardwareVsync
(
)
;
MOZ_RELEASE_ASSERT
(
mVsyncSource
)
;
}
virtual
~
VsyncTester
(
)
{
mVsyncSource
=
nullptr
;
}
nsRefPtr
<
VsyncSource
>
mVsyncSource
;
}
;
static
void
FlushMainThreadLoop
(
)
{
nsCOMPtr
<
nsIThread
>
mainThread
;
nsresult
rv
=
NS_GetMainThread
(
getter_AddRefs
(
mainThread
)
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
NS_OK
;
bool
processed
=
true
;
while
(
processed
&
&
NS_SUCCEEDED
(
rv
)
)
{
rv
=
mainThread
-
>
ProcessNextEvent
(
false
&
processed
)
;
}
}
TEST_F
(
VsyncTester
EnableVsync
)
{
VsyncSource
:
:
Display
&
globalDisplay
=
mVsyncSource
-
>
GetGlobalDisplay
(
)
;
globalDisplay
.
DisableVsync
(
)
;
ASSERT_FALSE
(
globalDisplay
.
IsVsyncEnabled
(
)
)
;
globalDisplay
.
EnableVsync
(
)
;
ASSERT_TRUE
(
globalDisplay
.
IsVsyncEnabled
(
)
)
;
globalDisplay
.
DisableVsync
(
)
;
ASSERT_FALSE
(
globalDisplay
.
IsVsyncEnabled
(
)
)
;
}
TEST_F
(
VsyncTester
CompositorGetVsyncNotifications
)
{
CompositorVsyncDispatcher
:
:
SetThreadAssertionsEnabled
(
false
)
;
VsyncSource
:
:
Display
&
globalDisplay
=
mVsyncSource
-
>
GetGlobalDisplay
(
)
;
globalDisplay
.
DisableVsync
(
)
;
ASSERT_FALSE
(
globalDisplay
.
IsVsyncEnabled
(
)
)
;
nsRefPtr
<
CompositorVsyncDispatcher
>
vsyncDispatcher
=
new
CompositorVsyncDispatcher
(
)
;
nsRefPtr
<
TestVsyncObserver
>
testVsyncObserver
=
new
TestVsyncObserver
(
)
;
vsyncDispatcher
-
>
SetCompositorVsyncObserver
(
testVsyncObserver
)
;
FlushMainThreadLoop
(
)
;
ASSERT_TRUE
(
globalDisplay
.
IsVsyncEnabled
(
)
)
;
testVsyncObserver
-
>
WaitForVsyncNotification
(
)
;
ASSERT_TRUE
(
testVsyncObserver
-
>
DidGetVsyncNotification
(
)
)
;
vsyncDispatcher
=
nullptr
;
testVsyncObserver
=
nullptr
;
}
TEST_F
(
VsyncTester
ParentRefreshDriverGetVsyncNotifications
)
{
if
(
!
gfxPrefs
:
:
VsyncAlignedRefreshDriver
(
)
)
{
return
;
}
VsyncSource
:
:
Display
&
globalDisplay
=
mVsyncSource
-
>
GetGlobalDisplay
(
)
;
globalDisplay
.
DisableVsync
(
)
;
ASSERT_FALSE
(
globalDisplay
.
IsVsyncEnabled
(
)
)
;
nsRefPtr
<
RefreshTimerVsyncDispatcher
>
vsyncDispatcher
=
globalDisplay
.
GetRefreshTimerVsyncDispatcher
(
)
;
ASSERT_TRUE
(
vsyncDispatcher
!
=
nullptr
)
;
nsRefPtr
<
TestVsyncObserver
>
testVsyncObserver
=
new
TestVsyncObserver
(
)
;
vsyncDispatcher
-
>
SetParentRefreshTimer
(
testVsyncObserver
)
;
ASSERT_TRUE
(
globalDisplay
.
IsVsyncEnabled
(
)
)
;
testVsyncObserver
-
>
WaitForVsyncNotification
(
)
;
ASSERT_TRUE
(
testVsyncObserver
-
>
DidGetVsyncNotification
(
)
)
;
vsyncDispatcher
-
>
SetParentRefreshTimer
(
nullptr
)
;
testVsyncObserver
-
>
ResetVsyncNotification
(
)
;
testVsyncObserver
-
>
WaitForVsyncNotification
(
)
;
ASSERT_FALSE
(
testVsyncObserver
-
>
DidGetVsyncNotification
(
)
)
;
vsyncDispatcher
=
nullptr
;
testVsyncObserver
=
nullptr
;
}
TEST_F
(
VsyncTester
ChildRefreshDriverGetVsyncNotifications
)
{
if
(
!
gfxPrefs
:
:
VsyncAlignedRefreshDriver
(
)
)
{
return
;
}
VsyncSource
:
:
Display
&
globalDisplay
=
mVsyncSource
-
>
GetGlobalDisplay
(
)
;
globalDisplay
.
DisableVsync
(
)
;
ASSERT_FALSE
(
globalDisplay
.
IsVsyncEnabled
(
)
)
;
nsRefPtr
<
RefreshTimerVsyncDispatcher
>
vsyncDispatcher
=
globalDisplay
.
GetRefreshTimerVsyncDispatcher
(
)
;
ASSERT_TRUE
(
vsyncDispatcher
!
=
nullptr
)
;
nsRefPtr
<
TestVsyncObserver
>
testVsyncObserver
=
new
TestVsyncObserver
(
)
;
vsyncDispatcher
-
>
AddChildRefreshTimer
(
testVsyncObserver
)
;
ASSERT_TRUE
(
globalDisplay
.
IsVsyncEnabled
(
)
)
;
testVsyncObserver
-
>
WaitForVsyncNotification
(
)
;
ASSERT_TRUE
(
testVsyncObserver
-
>
DidGetVsyncNotification
(
)
)
;
vsyncDispatcher
-
>
RemoveChildRefreshTimer
(
testVsyncObserver
)
;
testVsyncObserver
-
>
ResetVsyncNotification
(
)
;
testVsyncObserver
-
>
WaitForVsyncNotification
(
)
;
ASSERT_FALSE
(
testVsyncObserver
-
>
DidGetVsyncNotification
(
)
)
;
vsyncDispatcher
=
nullptr
;
testVsyncObserver
=
nullptr
;
}
