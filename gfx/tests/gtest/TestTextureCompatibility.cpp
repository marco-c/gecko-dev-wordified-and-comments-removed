#
include
"
gfxConfig
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
gtest
/
MozGTestBench
.
h
"
#
include
"
MockWidget
.
h
"
#
include
"
mozilla
/
layers
/
BasicCompositor
.
h
"
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
TextureHelper
.
h
"
using
mozilla
:
:
gfx
:
:
Feature
;
using
mozilla
:
:
gfx
:
:
gfxConfig
;
using
mozilla
:
:
layers
:
:
BasicCompositor
;
using
mozilla
:
:
layers
:
:
Compositor
;
using
mozilla
:
:
layers
:
:
CompositorOptions
;
using
mozilla
:
:
layers
:
:
LayersBackend
;
using
mozilla
:
:
layers
:
:
TextureClient
;
using
mozilla
:
:
layers
:
:
TextureHost
;
using
mozilla
:
:
widget
:
:
CompositorWidget
;
using
mozilla
:
:
widget
:
:
InProcessCompositorWidget
;
void
CreateTextureWithBackend
(
LayersBackend
&
aLayersBackend
nsTArray
<
RefPtr
<
TextureClient
>
>
&
aTextureClients
nsTArray
<
RefPtr
<
TextureHost
>
>
&
aTextureHosts
)
{
aTextureClients
.
AppendElement
(
CreateTextureClientWithBackend
(
aLayersBackend
)
)
;
aTextureClients
.
AppendElement
(
CreateYCbCrTextureClientWithBackend
(
aLayersBackend
)
)
;
for
(
uint32_t
i
=
0
;
i
<
aTextureClients
.
Length
(
)
;
i
+
+
)
{
aTextureHosts
.
AppendElement
(
TestCreateTextureHost
(
aTextureClients
[
i
]
aLayersBackend
)
)
;
}
}
static
void
GetPlatformBackends
(
nsTArray
<
LayersBackend
>
&
aBackends
)
{
gfxPlatform
:
:
GetPlatform
(
)
-
>
GetCompositorBackends
(
gfxConfig
:
:
IsEnabled
(
Feature
:
:
HW_COMPOSITING
)
aBackends
)
;
if
(
aBackends
.
IsEmpty
(
)
)
{
aBackends
.
AppendElement
(
LayersBackend
:
:
LAYERS_BASIC
)
;
}
}
already_AddRefed
<
Compositor
>
CreateBasicCompositor
(
)
{
RefPtr
<
Compositor
>
compositor
;
if
(
gfxPlatform
:
:
GetPlatform
(
)
)
{
RefPtr
<
MockWidget
>
widget
=
new
MockWidget
(
256
256
)
;
CompositorOptions
options
;
RefPtr
<
CompositorWidget
>
proxy
=
new
InProcessCompositorWidget
(
options
widget
)
;
compositor
=
new
BasicCompositor
(
nullptr
proxy
)
;
}
return
compositor
.
forget
(
)
;
}
void
CheckCompatibilityWithBasicCompositor
(
LayersBackend
aBackends
nsTArray
<
RefPtr
<
TextureHost
>
>
&
aTextures
)
{
RefPtr
<
Compositor
>
compositor
=
CreateBasicCompositor
(
)
;
for
(
uint32_t
i
=
0
;
i
<
aTextures
.
Length
(
)
;
i
+
+
)
{
if
(
!
aTextures
[
i
]
)
{
continue
;
}
aTextures
[
i
]
-
>
SetCompositor
(
compositor
)
;
bool
lockResult
=
aTextures
[
i
]
-
>
Lock
(
)
;
if
(
aBackends
!
=
LayersBackend
:
:
LAYERS_BASIC
)
{
EXPECT_FALSE
(
lockResult
)
;
}
else
{
EXPECT_TRUE
(
lockResult
)
;
}
if
(
lockResult
)
{
aTextures
[
i
]
-
>
Unlock
(
)
;
}
}
}
TEST
(
Gfx
TestTextureCompatibility
)
{
nsTArray
<
LayersBackend
>
backendHints
;
GetPlatformBackends
(
backendHints
)
;
for
(
uint32_t
i
=
0
;
i
<
backendHints
.
Length
(
)
;
i
+
+
)
{
nsTArray
<
RefPtr
<
TextureClient
>
>
textureClients
;
nsTArray
<
RefPtr
<
TextureHost
>
>
textureHosts
;
CreateTextureWithBackend
(
backendHints
[
i
]
textureClients
textureHosts
)
;
CheckCompatibilityWithBasicCompositor
(
backendHints
[
i
]
textureHosts
)
;
}
}
