#
include
"
gfxConfig
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
MockWidget
.
h
"
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
TestLayers
.
h
"
#
include
"
TextureHelper
.
h
"
using
mozilla
:
:
gfx
:
:
Feature
;
using
mozilla
:
:
gfx
:
:
gfxConfig
;
using
mozilla
:
:
layers
:
:
Compositor
;
using
mozilla
:
:
layers
:
:
CompositorOptions
;
using
mozilla
:
:
layers
:
:
ISurfaceAllocator
;
using
mozilla
:
:
layers
:
:
LayersBackend
;
using
mozilla
:
:
layers
:
:
TestSurfaceAllocator
;
using
mozilla
:
:
layers
:
:
TextureClient
;
using
mozilla
:
:
layers
:
:
TextureHost
;
using
mozilla
:
:
widget
:
:
CompositorWidget
;
using
mozilla
:
:
widget
:
:
InProcessCompositorWidget
;
static
void
CreateTextureWithBackend
(
LayersBackend
&
aLayersBackend
ISurfaceAllocator
*
aDeallocator
nsTArray
<
RefPtr
<
TextureClient
>
>
&
aTextureClients
nsTArray
<
RefPtr
<
TextureHost
>
>
&
aTextureHosts
)
{
aTextureClients
.
AppendElement
(
CreateTextureClientWithBackend
(
aLayersBackend
)
)
;
aTextureClients
.
AppendElement
(
CreateYCbCrTextureClientWithBackend
(
aLayersBackend
)
)
;
for
(
uint32_t
i
=
0
;
i
<
aTextureClients
.
Length
(
)
;
i
+
+
)
{
aTextureHosts
.
AppendElement
(
CreateTextureHostWithBackend
(
aTextureClients
[
i
]
aDeallocator
aLayersBackend
)
)
;
}
}
static
void
GetPlatformBackends
(
nsTArray
<
LayersBackend
>
&
aBackends
)
{
gfxPlatform
*
platform
=
gfxPlatform
:
:
GetPlatform
(
)
;
MOZ_ASSERT
(
platform
)
;
platform
-
>
GetCompositorBackends
(
gfxConfig
:
:
IsEnabled
(
Feature
:
:
HW_COMPOSITING
)
aBackends
)
;
}
TEST
(
Gfx
TestTextureCompatibility
)
{
nsTArray
<
LayersBackend
>
backendHints
;
RefPtr
<
TestSurfaceAllocator
>
deallocator
=
new
TestSurfaceAllocator
(
)
;
GetPlatformBackends
(
backendHints
)
;
for
(
uint32_t
i
=
0
;
i
<
backendHints
.
Length
(
)
;
i
+
+
)
{
nsTArray
<
RefPtr
<
TextureClient
>
>
textureClients
;
nsTArray
<
RefPtr
<
TextureHost
>
>
textureHosts
;
CreateTextureWithBackend
(
backendHints
[
i
]
deallocator
textureClients
textureHosts
)
;
}
}
