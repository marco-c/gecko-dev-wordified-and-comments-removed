#
include
"
BSPTree
.
h
"
#
include
"
Polygon
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
<
deque
>
using
mozilla
:
:
layers
:
:
BSPTree
;
using
mozilla
:
:
layers
:
:
LayerPolygon
;
using
mozilla
:
:
gfx
:
:
Point3D
;
using
mozilla
:
:
gfx
:
:
Polygon3D
;
namespace
{
static
bool
FuzzyEquals
(
const
Point3D
&
lhs
const
Point3D
&
rhs
)
{
const
float
epsilon
=
0
.
001f
;
const
Point3D
d
=
lhs
-
rhs
;
return
std
:
:
abs
(
d
.
x
)
<
epsilon
&
&
std
:
:
abs
(
d
.
y
)
<
epsilon
&
&
std
:
:
abs
(
d
.
z
)
<
epsilon
;
}
static
bool
operator
=
=
(
const
Polygon3D
&
lhs
const
Polygon3D
&
rhs
)
{
const
nsTArray
<
Point3D
>
&
left
=
lhs
.
GetPoints
(
)
;
const
nsTArray
<
Point3D
>
&
right
=
rhs
.
GetPoints
(
)
;
if
(
left
.
Length
(
)
!
=
right
.
Length
(
)
)
{
return
false
;
}
const
size_t
pointCount
=
left
.
Length
(
)
;
int
start
=
-
1
;
for
(
size_t
i
=
0
;
i
<
pointCount
;
+
+
i
)
{
if
(
FuzzyEquals
(
left
[
0
]
right
[
i
]
)
)
{
start
=
i
;
break
;
}
}
if
(
start
=
=
-
1
)
{
return
false
;
}
for
(
size_t
i
=
0
;
i
<
pointCount
;
+
+
i
)
{
size_t
j
=
(
start
+
i
)
%
pointCount
;
if
(
!
FuzzyEquals
(
left
[
i
]
right
[
j
]
)
)
{
return
false
;
}
}
return
true
;
}
static
void
RunTest
(
std
:
:
deque
<
Polygon3D
>
aPolygons
std
:
:
deque
<
Polygon3D
>
aExpected
)
{
std
:
:
deque
<
LayerPolygon
>
layers
;
for
(
Polygon3D
&
polygon
:
aPolygons
)
{
layers
.
push_back
(
LayerPolygon
(
std
:
:
move
(
polygon
)
nullptr
)
)
;
}
const
BSPTree
tree
(
layers
)
;
const
nsTArray
<
LayerPolygon
>
order
=
tree
.
GetDrawOrder
(
)
;
EXPECT_EQ
(
aExpected
.
size
(
)
order
.
Length
(
)
)
;
for
(
size_t
i
=
0
;
i
<
order
.
Length
(
)
;
+
+
i
)
{
EXPECT_TRUE
(
aExpected
[
i
]
=
=
*
order
[
i
]
.
geometry
)
;
}
}
}
TEST
(
BSPTree
TestSanity
)
{
EXPECT_TRUE
(
FuzzyEquals
(
Point3D
(
0
.
0f
0
.
0f
0
.
0f
)
Point3D
(
0
.
0f
0
.
0f
0
.
0f
)
)
)
;
EXPECT_TRUE
(
FuzzyEquals
(
Point3D
(
0
.
0f
0
.
0f
0
.
0f
)
Point3D
(
0
.
00001f
0
.
00001f
0
.
00001f
)
)
)
;
EXPECT_TRUE
(
FuzzyEquals
(
Point3D
(
0
.
00001f
0
.
00001f
0
.
00001f
)
Point3D
(
0
.
0f
0
.
0f
0
.
0f
)
)
)
;
EXPECT_FALSE
(
FuzzyEquals
(
Point3D
(
0
.
0f
0
.
0f
0
.
0f
)
Point3D
(
0
.
01f
0
.
01f
0
.
01f
)
)
)
;
EXPECT_FALSE
(
FuzzyEquals
(
Point3D
(
0
.
01f
0
.
01f
0
.
01f
)
Point3D
(
0
.
0f
0
.
0f
0
.
0f
)
)
)
;
Polygon3D
p1
{
Point3D
(
0
.
0f
0
.
0f
1
.
0f
)
Point3D
(
1
.
0f
0
.
0f
1
.
0f
)
Point3D
(
1
.
0f
1
.
0f
1
.
0f
)
Point3D
(
0
.
0f
1
.
0f
1
.
0f
)
}
;
Polygon3D
shifted
{
Point3D
(
0
.
0f
1
.
0f
1
.
0f
)
Point3D
(
0
.
0f
0
.
0f
1
.
0f
)
Point3D
(
1
.
0f
0
.
0f
1
.
0f
)
Point3D
(
1
.
0f
1
.
0f
1
.
0f
)
}
;
Polygon3D
p2
{
Point3D
(
0
.
00001f
0
.
00001f
1
.
00001f
)
Point3D
(
1
.
00001f
0
.
00001f
1
.
00001f
)
Point3D
(
1
.
00001f
1
.
00001f
1
.
00001f
)
Point3D
(
0
.
00001f
1
.
00001f
1
.
00001f
)
}
;
Polygon3D
p3
{
Point3D
(
0
.
01f
0
.
01f
1
.
01f
)
Point3D
(
1
.
01f
0
.
01f
1
.
01f
)
Point3D
(
1
.
01f
1
.
01f
1
.
01f
)
Point3D
(
0
.
01f
1
.
01f
1
.
01f
)
}
;
EXPECT_TRUE
(
p1
=
=
p1
)
;
EXPECT_TRUE
(
p2
=
=
p2
)
;
EXPECT_TRUE
(
p3
=
=
p3
)
;
EXPECT_TRUE
(
shifted
=
=
shifted
)
;
EXPECT_TRUE
(
p1
=
=
p2
)
;
EXPECT_TRUE
(
p1
=
=
shifted
)
;
EXPECT_FALSE
(
p1
=
=
p3
)
;
EXPECT_FALSE
(
p2
=
=
p3
)
;
EXPECT_FALSE
(
shifted
=
=
p3
)
;
:
:
RunTest
(
{
p1
}
{
p1
}
)
;
:
:
RunTest
(
{
p2
}
{
p2
}
)
;
:
:
RunTest
(
{
p1
}
{
p2
}
)
;
:
:
RunTest
(
{
p1
}
{
shifted
}
)
;
}
TEST
(
BSPTree
SameNode
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
0
.
0f
0
.
0f
0
.
0f
)
Point3D
(
1
.
0f
0
.
0f
0
.
0f
)
Point3D
(
1
.
0f
1
.
0f
0
.
0f
)
Point3D
(
0
.
0f
1
.
0f
0
.
0f
)
}
Polygon3D
{
Point3D
(
0
.
0f
0
.
0f
0
.
0f
)
Point3D
(
1
.
0f
0
.
0f
0
.
0f
)
Point3D
(
1
.
0f
1
.
0f
0
.
0f
)
Point3D
(
0
.
0f
1
.
0f
0
.
0f
)
}
}
;
:
:
RunTest
(
polygons
polygons
)
;
}
TEST
(
BSPTree
OneChild
)
{
const
Polygon3D
p1
{
Point3D
(
0
.
0f
0
.
0f
0
.
0f
)
Point3D
(
1
.
0f
0
.
0f
0
.
0f
)
Point3D
(
1
.
0f
1
.
0f
0
.
0f
)
Point3D
(
0
.
0f
1
.
0f
0
.
0f
)
}
;
const
Polygon3D
p2
{
Point3D
(
0
.
0f
0
.
0f
1
.
0f
)
Point3D
(
1
.
0f
0
.
0f
1
.
0f
)
Point3D
(
1
.
0f
1
.
0f
1
.
0f
)
Point3D
(
0
.
0f
1
.
0f
1
.
0f
)
}
;
:
:
RunTest
(
{
p1
p2
}
{
p1
p2
}
)
;
:
:
RunTest
(
{
p2
p1
}
{
p1
p2
}
)
;
}
TEST
(
BSPTree
SplitSimple1
)
{
Polygon3D
p1
{
Point3D
(
0
.
0f
0
.
0f
1
.
0f
)
Point3D
(
1
.
0f
0
.
0f
1
.
0f
)
Point3D
(
1
.
0f
1
.
0f
1
.
0f
)
Point3D
(
0
.
0f
1
.
0f
1
.
0f
)
}
;
Polygon3D
p2
{
Point3D
(
0
.
0f
0
.
0f
2
.
0f
)
Point3D
(
1
.
0f
0
.
0f
2
.
0f
)
Point3D
(
1
.
0f
1
.
0f
0
.
0f
)
Point3D
(
0
.
0f
1
.
0f
0
.
0f
)
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
0
.
0f
1
.
0f
0
.
0f
)
Point3D
(
0
.
0f
0
.
5f
1
.
0f
)
Point3D
(
1
.
0f
0
.
5f
1
.
0f
)
Point3D
(
1
.
0f
1
.
0f
0
.
0f
)
}
p1
Polygon3D
{
Point3D
(
0
.
0f
0
.
0f
2
.
0f
)
Point3D
(
1
.
0f
0
.
0f
2
.
0f
)
Point3D
(
1
.
0f
0
.
5f
1
.
0f
)
Point3D
(
0
.
0f
0
.
5f
1
.
0f
)
}
}
;
:
:
RunTest
(
{
p1
p2
}
expected
)
;
}
TEST
(
BSPTree
SplitSimple2
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
5
.
00000f
-
5
.
00000f
0
.
00000f
)
Point3D
(
-
5
.
00000f
5
.
00000f
0
.
00000f
)
Point3D
(
5
.
00000f
5
.
00000f
0
.
00000f
)
Point3D
(
5
.
00000f
-
5
.
00000f
0
.
00000f
)
}
Polygon3D
{
Point3D
(
0
.
00000f
-
5
.
00000f
-
5
.
00000f
)
Point3D
(
0
.
00000f
5
.
00000f
-
5
.
00000f
)
Point3D
(
0
.
00000f
5
.
00000f
5
.
00000f
)
Point3D
(
0
.
00000f
-
5
.
00000f
5
.
00000f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
0
.
00000f
-
5
.
00000f
0
.
00000f
)
Point3D
(
0
.
00000f
-
5
.
00000f
-
5
.
00000f
)
Point3D
(
0
.
00000f
5
.
00000f
-
5
.
00000f
)
Point3D
(
0
.
00000f
5
.
00000f
0
.
00000f
)
}
Polygon3D
{
Point3D
(
-
5
.
00000f
-
5
.
00000f
0
.
00000f
)
Point3D
(
-
5
.
00000f
5
.
00000f
0
.
00000f
)
Point3D
(
5
.
00000f
5
.
00000f
0
.
00000f
)
Point3D
(
5
.
00000f
-
5
.
00000f
0
.
00000f
)
}
Polygon3D
{
Point3D
(
0
.
00000f
5
.
00000f
0
.
00000f
)
Point3D
(
0
.
00000f
5
.
00000f
5
.
00000f
)
Point3D
(
0
.
00000f
-
5
.
00000f
5
.
00000f
)
Point3D
(
0
.
00000f
-
5
.
00000f
0
.
00000f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
NoSplit1
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
0
.
00000f
10
.
00000f
0
.
00000f
)
Point3D
(
0
.
00000f
0
.
00000f
0
.
00000f
)
Point3D
(
10
.
00000f
0
.
00000f
0
.
00000f
)
Point3D
(
10
.
00000f
10
.
00000f
0
.
00000f
)
}
Polygon3D
{
Point3D
(
0
.
00000f
10
.
00000f
-
5
.
00000f
)
Point3D
(
0
.
00000f
0
.
00000f
-
5
.
00000f
)
Point3D
(
10
.
00000f
0
.
00000f
-
5
.
00000f
)
Point3D
(
10
.
00000f
10
.
00000f
-
5
.
00000f
)
}
Polygon3D
{
Point3D
(
0
.
00000f
10
.
00000f
5
.
00000f
)
Point3D
(
0
.
00000f
0
.
00000f
5
.
00000f
)
Point3D
(
10
.
00000f
0
.
00000f
5
.
00000f
)
Point3D
(
10
.
00000f
10
.
00000f
5
.
00000f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
0
.
00000f
10
.
00000f
-
5
.
00000f
)
Point3D
(
0
.
00000f
0
.
00000f
-
5
.
00000f
)
Point3D
(
10
.
00000f
0
.
00000f
-
5
.
00000f
)
Point3D
(
10
.
00000f
10
.
00000f
-
5
.
00000f
)
}
Polygon3D
{
Point3D
(
0
.
00000f
10
.
00000f
0
.
00000f
)
Point3D
(
0
.
00000f
0
.
00000f
0
.
00000f
)
Point3D
(
10
.
00000f
0
.
00000f
0
.
00000f
)
Point3D
(
10
.
00000f
10
.
00000f
0
.
00000f
)
}
Polygon3D
{
Point3D
(
0
.
00000f
10
.
00000f
5
.
00000f
)
Point3D
(
0
.
00000f
0
.
00000f
5
.
00000f
)
Point3D
(
10
.
00000f
0
.
00000f
5
.
00000f
)
Point3D
(
10
.
00000f
10
.
00000f
5
.
00000f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
NoSplit2
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
5
.
00000f
-
5
.
00000f
0
.
00000f
)
Point3D
(
-
5
.
00000f
5
.
00000f
0
.
00000f
)
Point3D
(
5
.
00000f
5
.
00000f
0
.
00000f
)
Point3D
(
5
.
00000f
-
5
.
00000f
0
.
00000f
)
}
Polygon3D
{
Point3D
(
0
.
00000f
5
.
00000f
-
15
.
00000f
)
Point3D
(
0
.
00000f
-
5
.
00000f
-
15
.
00000f
)
Point3D
(
0
.
00000f
-
5
.
00000f
-
10
.
00000f
)
Point3D
(
0
.
00000f
5
.
00000f
-
10
.
00000f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
0
.
00000f
5
.
00000f
-
15
.
00000f
)
Point3D
(
0
.
00000f
-
5
.
00000f
-
15
.
00000f
)
Point3D
(
0
.
00000f
-
5
.
00000f
-
10
.
00000f
)
Point3D
(
0
.
00000f
5
.
00000f
-
10
.
00000f
)
}
Polygon3D
{
Point3D
(
-
5
.
00000f
-
5
.
00000f
0
.
00000f
)
Point3D
(
-
5
.
00000f
5
.
00000f
0
.
00000f
)
Point3D
(
5
.
00000f
5
.
00000f
0
.
00000f
)
Point3D
(
5
.
00000f
-
5
.
00000f
0
.
00000f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate0degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
2
.
00000f
2
.
00000f
)
Point3D
(
-
0
.
00000f
-
2
.
00000f
2
.
00000f
)
Point3D
(
0
.
00010f
-
2
.
00000f
-
2
.
00000f
)
Point3D
(
0
.
00010f
2
.
00000f
-
2
.
00000f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
0
.
00000f
2
.
00000f
)
Point3D
(
2
.
00000f
-
0
.
00000f
-
2
.
00000f
)
Point3D
(
-
2
.
00000f
0
.
00000f
-
2
.
00000f
)
Point3D
(
-
2
.
00000f
0
.
00010f
2
.
00000f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
2
.
00000f
0
.
00000f
2
.
00000f
)
Point3D
(
2
.
00000f
-
0
.
00000f
-
2
.
00000f
)
Point3D
(
-
2
.
00000f
0
.
00000f
-
2
.
00000f
)
Point3D
(
-
2
.
00000f
0
.
00010f
2
.
00000f
)
}
Polygon3D
{
Point3D
(
-
0
.
00000f
2
.
00000f
2
.
00000f
)
Point3D
(
-
0
.
00000f
-
2
.
00000f
2
.
00000f
)
Point3D
(
0
.
00010f
-
2
.
00000f
-
2
.
00000f
)
Point3D
(
0
.
00010f
2
.
00000f
-
2
.
00000f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate20degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
1
.
19540f
2
.
56350f
)
Point3D
(
-
0
.
00000f
-
2
.
56340f
1
.
19540f
)
Point3D
(
0
.
00010f
-
1
.
19530f
-
2
.
56340f
)
Point3D
(
0
.
00010f
2
.
56350f
-
1
.
19530f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
-
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
-
2
.
00000f
-
0
.
68400f
1
.
87940f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
-
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
-
2
.
00000f
-
0
.
68400f
1
.
87940f
)
}
Polygon3D
{
Point3D
(
-
0
.
00000f
1
.
19540f
2
.
56350f
)
Point3D
(
-
0
.
00000f
-
2
.
56340f
1
.
19540f
)
Point3D
(
0
.
00010f
-
1
.
19530f
-
2
.
56340f
)
Point3D
(
0
.
00010f
2
.
56350f
-
1
.
19530f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate40degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
-
0
.
73200f
2
.
73210f
)
Point3D
(
-
0
.
00000f
-
2
.
73200f
-
0
.
73200f
)
Point3D
(
0
.
00010f
0
.
73210f
-
2
.
73200f
)
Point3D
(
0
.
00010f
2
.
73210f
0
.
73210f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
-
1
.
73200f
1
.
00000f
)
Point3D
(
2
.
00000f
1
.
73210f
-
0
.
99990f
)
Point3D
(
-
2
.
00000f
1
.
73210f
-
0
.
99990f
)
Point3D
(
-
2
.
00000f
-
1
.
73200f
1
.
00000f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
2
.
00000f
-
1
.
73200f
1
.
00000f
)
Point3D
(
2
.
00000f
1
.
73210f
-
0
.
99990f
)
Point3D
(
-
2
.
00000f
1
.
73210f
-
0
.
99990f
)
Point3D
(
-
2
.
00000f
-
1
.
73200f
1
.
00000f
)
}
Polygon3D
{
Point3D
(
-
0
.
00000f
-
0
.
73200f
2
.
73210f
)
Point3D
(
-
0
.
00000f
-
2
.
73200f
-
0
.
73200f
)
Point3D
(
0
.
00010f
0
.
73210f
-
2
.
73200f
)
Point3D
(
0
.
00010f
2
.
73210f
0
.
73210f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate60degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
-
2
.
73200f
0
.
73210f
)
Point3D
(
-
0
.
00000f
-
0
.
73200f
-
2
.
73200f
)
Point3D
(
0
.
00010f
2
.
73210f
-
0
.
73200f
)
Point3D
(
0
.
00010f
0
.
73210f
2
.
73210f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
-
1
.
73200f
-
1
.
00000f
)
Point3D
(
2
.
00000f
1
.
73210f
1
.
00010f
)
Point3D
(
-
2
.
00000f
1
.
73210f
1
.
00010f
)
Point3D
(
-
2
.
00000f
-
1
.
73200f
-
1
.
00000f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
-
2
.
00000f
1
.
26793f
0
.
73210f
)
Point3D
(
-
2
.
00000f
-
1
.
73200f
-
1
.
00000f
)
Point3D
(
2
.
00000f
-
1
.
73200f
-
1
.
00000f
)
Point3D
(
2
.
00000f
1
.
26793f
0
.
73210f
)
}
Polygon3D
{
Point3D
(
-
0
.
00000f
-
2
.
73200f
0
.
73210f
)
Point3D
(
-
0
.
00000f
-
0
.
73200f
-
2
.
73200f
)
Point3D
(
0
.
00010f
2
.
73210f
-
0
.
73200f
)
Point3D
(
0
.
00010f
0
.
73210f
2
.
73210f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
1
.
26793f
0
.
73210f
)
Point3D
(
2
.
00000f
1
.
73210f
1
.
00010f
)
Point3D
(
-
2
.
00000f
1
.
73210f
1
.
00010f
)
Point3D
(
-
2
.
00000f
1
.
26793f
0
.
73210f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate80degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
-
1
.
19530f
-
2
.
56340f
)
Point3D
(
-
0
.
00000f
2
.
56350f
-
1
.
19530f
)
Point3D
(
0
.
00010f
1
.
19540f
2
.
56350f
)
Point3D
(
0
.
00010f
-
2
.
56340f
1
.
19540f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
-
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
-
2
.
00000f
0
.
68410f
-
1
.
87930f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
-
0
.
00000f
-
1
.
19530f
-
2
.
56340f
)
Point3D
(
-
0
.
00000f
2
.
56350f
-
1
.
19530f
)
Point3D
(
0
.
00010f
1
.
19540f
2
.
56350f
)
Point3D
(
0
.
00010f
-
2
.
56340f
1
.
19540f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
-
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
-
2
.
00000f
0
.
68410f
-
1
.
87930f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate100degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
2
.
73210f
-
0
.
73200f
)
Point3D
(
-
0
.
00000f
0
.
73210f
2
.
73210f
)
Point3D
(
0
.
00010f
-
2
.
73200f
0
.
73210f
)
Point3D
(
0
.
00010f
-
0
.
73200f
-
2
.
73200f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
1
.
73210f
1
.
00010f
)
Point3D
(
2
.
00000f
-
1
.
73200f
-
1
.
00000f
)
Point3D
(
-
2
.
00000f
-
1
.
73200f
-
1
.
00000f
)
Point3D
(
-
2
.
00000f
1
.
73210f
1
.
00010f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
2
.
00000f
-
1
.
26783f
-
0
.
73200f
)
Point3D
(
2
.
00000f
-
1
.
73200f
-
1
.
00000f
)
Point3D
(
-
2
.
00000f
-
1
.
73200f
-
1
.
00000f
)
Point3D
(
-
2
.
00000f
-
1
.
26783f
-
0
.
73200f
)
}
Polygon3D
{
Point3D
(
-
0
.
00000f
2
.
73210f
-
0
.
73200f
)
Point3D
(
-
0
.
00000f
0
.
73210f
2
.
73210f
)
Point3D
(
0
.
00010f
-
2
.
73200f
0
.
73210f
)
Point3D
(
0
.
00010f
-
0
.
73200f
-
2
.
73200f
)
}
Polygon3D
{
Point3D
(
-
2
.
00000f
-
1
.
26783f
-
0
.
73200f
)
Point3D
(
-
2
.
00000f
1
.
73210f
1
.
00010f
)
Point3D
(
2
.
00000f
1
.
73210f
1
.
00010f
)
Point3D
(
2
.
00000f
-
1
.
26783f
-
0
.
73200f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate120degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
-
0
.
73200f
2
.
73210f
)
Point3D
(
-
0
.
00000f
-
2
.
73200f
-
0
.
73200f
)
Point3D
(
0
.
00010f
0
.
73210f
-
2
.
73200f
)
Point3D
(
0
.
00010f
2
.
73210f
0
.
73210f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
-
1
.
73200f
1
.
00000f
)
Point3D
(
2
.
00000f
1
.
73210f
-
0
.
99990f
)
Point3D
(
-
2
.
00000f
1
.
73210f
-
0
.
99990f
)
Point3D
(
-
2
.
00000f
-
1
.
73200f
1
.
00000f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
2
.
00000f
-
1
.
73200f
1
.
00000f
)
Point3D
(
2
.
00000f
1
.
73210f
-
0
.
99990f
)
Point3D
(
-
2
.
00000f
1
.
73210f
-
0
.
99990f
)
Point3D
(
-
2
.
00000f
-
1
.
73200f
1
.
00000f
)
}
Polygon3D
{
Point3D
(
-
0
.
00000f
-
0
.
73200f
2
.
73210f
)
Point3D
(
-
0
.
00000f
-
2
.
73200f
-
0
.
73200f
)
Point3D
(
0
.
00010f
0
.
73210f
-
2
.
73200f
)
Point3D
(
0
.
00010f
2
.
73210f
0
.
73210f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate140degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
-
1
.
19530f
-
2
.
56340f
)
Point3D
(
-
0
.
00000f
2
.
56350f
-
1
.
19530f
)
Point3D
(
0
.
00010f
1
.
19540f
2
.
56350f
)
Point3D
(
0
.
00010f
-
2
.
56340f
1
.
19540f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
-
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
-
2
.
00000f
0
.
68410f
-
1
.
87930f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
-
0
.
00000f
-
1
.
19530f
-
2
.
56340f
)
Point3D
(
-
0
.
00000f
2
.
56350f
-
1
.
19530f
)
Point3D
(
0
.
00010f
1
.
19540f
2
.
56350f
)
Point3D
(
0
.
00010f
-
2
.
56340f
1
.
19540f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
-
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
-
2
.
00000f
0
.
68410f
-
1
.
87930f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate160degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
2
.
00000f
2
.
00000f
)
Point3D
(
-
0
.
00000f
-
2
.
00000f
2
.
00000f
)
Point3D
(
0
.
00010f
-
2
.
00000f
-
2
.
00000f
)
Point3D
(
0
.
00010f
2
.
00000f
-
2
.
00000f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
-
0
.
00000f
2
.
00000f
)
Point3D
(
2
.
00000f
0
.
00010f
-
2
.
00000f
)
Point3D
(
-
2
.
00000f
0
.
00010f
-
2
.
00000f
)
Point3D
(
-
2
.
00000f
-
0
.
00000f
2
.
00000f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
2
.
00000f
-
0
.
00000f
2
.
00000f
)
Point3D
(
2
.
00000f
0
.
00010f
-
2
.
00000f
)
Point3D
(
-
2
.
00000f
0
.
00010f
-
2
.
00000f
)
Point3D
(
-
2
.
00000f
-
0
.
00000f
2
.
00000f
)
}
Polygon3D
{
Point3D
(
-
0
.
00000f
2
.
00000f
2
.
00000f
)
Point3D
(
-
0
.
00000f
-
2
.
00000f
2
.
00000f
)
Point3D
(
0
.
00010f
-
2
.
00000f
-
2
.
00000f
)
Point3D
(
0
.
00010f
2
.
00000f
-
2
.
00000f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate180degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
-
2
.
00000f
-
2
.
00000f
)
Point3D
(
-
0
.
00000f
2
.
00000f
-
2
.
00000f
)
Point3D
(
0
.
00010f
2
.
00000f
2
.
00000f
)
Point3D
(
0
.
00010f
-
2
.
00000f
2
.
00000f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
0
.
00010f
-
2
.
00000f
)
Point3D
(
2
.
00000f
-
0
.
00000f
2
.
00000f
)
Point3D
(
-
2
.
00000f
-
0
.
00000f
2
.
00000f
)
Point3D
(
-
2
.
00000f
0
.
00010f
-
2
.
00000f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
-
0
.
00000f
-
2
.
00000f
-
2
.
00000f
)
Point3D
(
-
0
.
00000f
2
.
00000f
-
2
.
00000f
)
Point3D
(
0
.
00010f
2
.
00000f
2
.
00000f
)
Point3D
(
0
.
00010f
-
2
.
00000f
2
.
00000f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
0
.
00010f
-
2
.
00000f
)
Point3D
(
2
.
00000f
-
0
.
00000f
2
.
00000f
)
Point3D
(
-
2
.
00000f
-
0
.
00000f
2
.
00000f
)
Point3D
(
-
2
.
00000f
0
.
00010f
-
2
.
00000f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate200degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
1
.
19540f
2
.
56350f
)
Point3D
(
-
0
.
00000f
-
2
.
56340f
1
.
19540f
)
Point3D
(
0
.
00010f
-
1
.
19530f
-
2
.
56340f
)
Point3D
(
0
.
00010f
2
.
56350f
-
1
.
19530f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
-
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
-
2
.
00000f
-
0
.
68400f
1
.
87940f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
-
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
-
2
.
00000f
-
0
.
68400f
1
.
87940f
)
}
Polygon3D
{
Point3D
(
-
0
.
00000f
1
.
19540f
2
.
56350f
)
Point3D
(
-
0
.
00000f
-
2
.
56340f
1
.
19540f
)
Point3D
(
0
.
00010f
-
1
.
19530f
-
2
.
56340f
)
Point3D
(
0
.
00010f
2
.
56350f
-
1
.
19530f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate220degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
0
.
73210f
-
2
.
73200f
)
Point3D
(
-
0
.
00000f
2
.
73210f
0
.
73210f
)
Point3D
(
0
.
00010f
-
0
.
73200f
2
.
73210f
)
Point3D
(
0
.
00010f
-
2
.
73200f
-
0
.
73200f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
1
.
73210f
-
0
.
99990f
)
Point3D
(
2
.
00000f
-
1
.
73200f
1
.
00000f
)
Point3D
(
-
2
.
00000f
-
1
.
73200f
1
.
00000f
)
Point3D
(
-
2
.
00000f
1
.
73210f
-
0
.
99990f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
-
0
.
00000f
0
.
73210f
-
2
.
73200f
)
Point3D
(
-
0
.
00000f
2
.
73210f
0
.
73210f
)
Point3D
(
0
.
00010f
-
0
.
73200f
2
.
73210f
)
Point3D
(
0
.
00010f
-
2
.
73200f
-
0
.
73200f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
1
.
73210f
-
0
.
99990f
)
Point3D
(
2
.
00000f
-
1
.
73200f
1
.
00000f
)
Point3D
(
-
2
.
00000f
-
1
.
73200f
1
.
00000f
)
Point3D
(
-
2
.
00000f
1
.
73210f
-
0
.
99990f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate240degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
-
2
.
73200f
0
.
73210f
)
Point3D
(
-
0
.
00000f
-
0
.
73200f
-
2
.
73200f
)
Point3D
(
0
.
00010f
2
.
73210f
-
0
.
73200f
)
Point3D
(
0
.
00010f
0
.
73210f
2
.
73210f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
-
1
.
73200f
-
1
.
00000f
)
Point3D
(
2
.
00000f
1
.
73210f
1
.
00010f
)
Point3D
(
-
2
.
00000f
1
.
73210f
1
.
00010f
)
Point3D
(
-
2
.
00000f
-
1
.
73200f
-
1
.
00000f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
-
2
.
00000f
1
.
26793f
0
.
73210f
)
Point3D
(
-
2
.
00000f
-
1
.
73200f
-
1
.
00000f
)
Point3D
(
2
.
00000f
-
1
.
73200f
-
1
.
00000f
)
Point3D
(
2
.
00000f
1
.
26793f
0
.
73210f
)
}
Polygon3D
{
Point3D
(
-
0
.
00000f
-
2
.
73200f
0
.
73210f
)
Point3D
(
-
0
.
00000f
-
0
.
73200f
-
2
.
73200f
)
Point3D
(
0
.
00010f
2
.
73210f
-
0
.
73200f
)
Point3D
(
0
.
00010f
0
.
73210f
2
.
73210f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
1
.
26793f
0
.
73210f
)
Point3D
(
2
.
00000f
1
.
73210f
1
.
00010f
)
Point3D
(
-
2
.
00000f
1
.
73210f
1
.
00010f
)
Point3D
(
-
2
.
00000f
1
.
26793f
0
.
73210f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate260degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
1
.
19540f
2
.
56350f
)
Point3D
(
-
0
.
00000f
-
2
.
56340f
1
.
19540f
)
Point3D
(
0
.
00010f
-
1
.
19530f
-
2
.
56340f
)
Point3D
(
0
.
00010f
2
.
56350f
-
1
.
19530f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
-
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
-
2
.
00000f
-
0
.
68400f
1
.
87940f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
-
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
-
2
.
00000f
-
0
.
68400f
1
.
87940f
)
}
Polygon3D
{
Point3D
(
-
0
.
00000f
1
.
19540f
2
.
56350f
)
Point3D
(
-
0
.
00000f
-
2
.
56340f
1
.
19540f
)
Point3D
(
0
.
00010f
-
1
.
19530f
-
2
.
56340f
)
Point3D
(
0
.
00010f
2
.
56350f
-
1
.
19530f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate280degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
2
.
73210f
-
0
.
73200f
)
Point3D
(
-
0
.
00000f
0
.
73210f
2
.
73210f
)
Point3D
(
0
.
00010f
-
2
.
73200f
0
.
73210f
)
Point3D
(
0
.
00010f
-
0
.
73200f
-
2
.
73200f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
1
.
73210f
1
.
00010f
)
Point3D
(
2
.
00000f
-
1
.
73200f
-
1
.
00000f
)
Point3D
(
-
2
.
00000f
-
1
.
73200f
-
1
.
00000f
)
Point3D
(
-
2
.
00000f
1
.
73210f
1
.
00010f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
2
.
00000f
-
1
.
26783f
-
0
.
73200f
)
Point3D
(
2
.
00000f
-
1
.
73200f
-
1
.
00000f
)
Point3D
(
-
2
.
00000f
-
1
.
73200f
-
1
.
00000f
)
Point3D
(
-
2
.
00000f
-
1
.
26783f
-
0
.
73200f
)
}
Polygon3D
{
Point3D
(
-
0
.
00000f
2
.
73210f
-
0
.
73200f
)
Point3D
(
-
0
.
00000f
0
.
73210f
2
.
73210f
)
Point3D
(
0
.
00010f
-
2
.
73200f
0
.
73210f
)
Point3D
(
0
.
00010f
-
0
.
73200f
-
2
.
73200f
)
}
Polygon3D
{
Point3D
(
-
2
.
00000f
-
1
.
26783f
-
0
.
73200f
)
Point3D
(
-
2
.
00000f
1
.
73210f
1
.
00010f
)
Point3D
(
2
.
00000f
1
.
73210f
1
.
00010f
)
Point3D
(
2
.
00000f
-
1
.
26783f
-
0
.
73200f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate300degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
0
.
73210f
-
2
.
73200f
)
Point3D
(
-
0
.
00000f
2
.
73210f
0
.
73210f
)
Point3D
(
0
.
00010f
-
0
.
73200f
2
.
73210f
)
Point3D
(
0
.
00010f
-
2
.
73200f
-
0
.
73200f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
1
.
73210f
-
0
.
99990f
)
Point3D
(
2
.
00000f
-
1
.
73200f
1
.
00000f
)
Point3D
(
-
2
.
00000f
-
1
.
73200f
1
.
00000f
)
Point3D
(
-
2
.
00000f
1
.
73210f
-
0
.
99990f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
-
0
.
00000f
0
.
73210f
-
2
.
73200f
)
Point3D
(
-
0
.
00000f
2
.
73210f
0
.
73210f
)
Point3D
(
0
.
00010f
-
0
.
73200f
2
.
73210f
)
Point3D
(
0
.
00010f
-
2
.
73200f
-
0
.
73200f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
1
.
73210f
-
0
.
99990f
)
Point3D
(
2
.
00000f
-
1
.
73200f
1
.
00000f
)
Point3D
(
-
2
.
00000f
-
1
.
73200f
1
.
00000f
)
Point3D
(
-
2
.
00000f
1
.
73210f
-
0
.
99990f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate320degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
-
1
.
19530f
-
2
.
56340f
)
Point3D
(
-
0
.
00000f
2
.
56350f
-
1
.
19530f
)
Point3D
(
0
.
00010f
1
.
19540f
2
.
56350f
)
Point3D
(
0
.
00010f
-
2
.
56340f
1
.
19540f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
-
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
-
2
.
00000f
0
.
68410f
-
1
.
87930f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
-
0
.
00000f
-
1
.
19530f
-
2
.
56340f
)
Point3D
(
-
0
.
00000f
2
.
56350f
-
1
.
19530f
)
Point3D
(
0
.
00010f
1
.
19540f
2
.
56350f
)
Point3D
(
0
.
00010f
-
2
.
56340f
1
.
19540f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
0
.
68410f
-
1
.
87930f
)
Point3D
(
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
-
2
.
00000f
-
0
.
68400f
1
.
87940f
)
Point3D
(
-
2
.
00000f
0
.
68410f
-
1
.
87930f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate340degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
-
2
.
00000f
-
2
.
00000f
)
Point3D
(
-
0
.
00000f
2
.
00000f
-
2
.
00000f
)
Point3D
(
0
.
00010f
2
.
00000f
2
.
00000f
)
Point3D
(
0
.
00010f
-
2
.
00000f
2
.
00000f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
0
.
00010f
-
2
.
00000f
)
Point3D
(
2
.
00000f
-
0
.
00000f
2
.
00000f
)
Point3D
(
-
2
.
00000f
-
0
.
00000f
2
.
00000f
)
Point3D
(
-
2
.
00000f
0
.
00010f
-
2
.
00000f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
-
0
.
00000f
-
2
.
00000f
-
2
.
00000f
)
Point3D
(
-
0
.
00000f
2
.
00000f
-
2
.
00000f
)
Point3D
(
0
.
00010f
2
.
00000f
2
.
00000f
)
Point3D
(
0
.
00010f
-
2
.
00000f
2
.
00000f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
0
.
00010f
-
2
.
00000f
)
Point3D
(
2
.
00000f
-
0
.
00000f
2
.
00000f
)
Point3D
(
-
2
.
00000f
-
0
.
00000f
2
.
00000f
)
Point3D
(
-
2
.
00000f
0
.
00010f
-
2
.
00000f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
TEST
(
BSPTree
TwoPlaneIntersectRotate360degrees
)
{
const
std
:
:
deque
<
Polygon3D
>
polygons
{
Polygon3D
{
Point3D
(
-
0
.
00000f
-
2
.
00000f
-
2
.
00000f
)
Point3D
(
-
0
.
00000f
2
.
00000f
-
2
.
00000f
)
Point3D
(
0
.
00010f
2
.
00000f
2
.
00000f
)
Point3D
(
0
.
00010f
-
2
.
00000f
2
.
00000f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
0
.
00010f
-
2
.
00000f
)
Point3D
(
2
.
00000f
-
0
.
00000f
2
.
00000f
)
Point3D
(
-
2
.
00000f
-
0
.
00000f
2
.
00000f
)
Point3D
(
-
2
.
00000f
0
.
00010f
-
2
.
00000f
)
}
}
;
const
std
:
:
deque
<
Polygon3D
>
expected
{
Polygon3D
{
Point3D
(
-
0
.
00000f
-
2
.
00000f
-
2
.
00000f
)
Point3D
(
-
0
.
00000f
2
.
00000f
-
2
.
00000f
)
Point3D
(
0
.
00010f
2
.
00000f
2
.
00000f
)
Point3D
(
0
.
00010f
-
2
.
00000f
2
.
00000f
)
}
Polygon3D
{
Point3D
(
2
.
00000f
0
.
00010f
-
2
.
00000f
)
Point3D
(
2
.
00000f
-
0
.
00000f
2
.
00000f
)
Point3D
(
-
2
.
00000f
-
0
.
00000f
2
.
00000f
)
Point3D
(
-
2
.
00000f
0
.
00010f
-
2
.
00000f
)
}
}
;
:
:
RunTest
(
polygons
expected
)
;
}
