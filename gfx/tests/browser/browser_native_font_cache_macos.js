"
use
strict
"
;
add_task
(
async
(
)
=
>
{
const
CROSS_ORIGIN_DOMAIN
=
"
https
:
/
/
example
.
com
"
;
const
TARGET_URL
=
{
CROSS_ORIGIN_DOMAIN
}
/
browser
/
gfx
/
tests
/
browser
/
file_native_font_cache_macos
.
html
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TARGET_URL
}
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
const
TARGET_WIDTH
=
200
;
const
TARGET_HEIGHT
=
100
;
const
rect
=
new
content
.
window
.
DOMRect
(
0
0
TARGET_WIDTH
TARGET_HEIGHT
)
;
await
SpecialPowers
.
snapshotContext
(
content
.
window
rect
"
white
"
)
;
}
)
;
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
memory
"
}
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
let
measureButton
=
content
.
document
.
getElementById
(
"
measureButton
"
)
;
measureButton
.
click
(
)
;
}
)
;
let
copiedText
=
await
new
Promise
(
resolve
=
>
{
const
REPORT_TIMEOUT_MS
=
15
*
1e3
;
const
EXPECTED_START_WITH
=
"
Main
Process
"
;
let
mostRecentTextOnClipboard
=
"
"
;
SimpleTest
.
waitForClipboard
(
textOnClipboard
=
>
{
mostRecentTextOnClipboard
=
textOnClipboard
;
const
gotExpected
=
textOnClipboard
.
startsWith
(
EXPECTED_START_WITH
)
;
if
(
!
gotExpected
)
{
EventUtils
.
synthesizeKey
(
"
A
"
{
accelKey
:
true
}
)
;
EventUtils
.
synthesizeKey
(
"
C
"
{
accelKey
:
true
}
)
;
}
return
gotExpected
;
}
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
A
"
{
accelKey
:
true
}
)
;
EventUtils
.
synthesizeKey
(
"
C
"
{
accelKey
:
true
}
)
;
}
(
)
=
>
{
resolve
(
mostRecentTextOnClipboard
)
;
}
(
)
=
>
{
info
(
Didn
'
t
find
expected
text
within
{
REPORT_TIMEOUT_MS
}
ms
.
)
;
dump
(
"
*
*
*
*
*
*
*
ACTUAL
*
*
*
*
*
*
*
\
n
"
)
;
dump
(
"
<
<
<
"
+
mostRecentTextOnClipboard
+
"
>
>
>
\
n
"
)
;
dump
(
"
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
\
n
"
)
;
resolve
(
"
"
)
;
}
"
text
/
plain
"
REPORT_TIMEOUT_MS
)
;
}
)
;
isnot
(
copiedText
"
"
"
Got
some
text
from
clipboard
.
"
)
;
const
MB_EXCLUSIVE_MAX
=
20
;
const
nfrm_line
=
/
^
.
*
?
(
\
d
+
)
\
.
\
d
+
MB
.
*
-
-
native
-
font
-
resource
-
mac
/
m
;
const
nfrm_match
=
nfrm_line
.
exec
(
copiedText
)
;
if
(
nfrm_match
)
{
const
nfrm_mb
=
nfrm_match
[
1
]
;
ok
(
nfrm_mb
<
MB_EXCLUSIVE_MAX
native
-
font
-
resource
-
mac
{
nfrm_mb
}
MB
should
be
less
than
{
MB_EXCLUSIVE_MAX
}
MB
.
)
;
}
else
{
const
om_line
=
/
^
Other
Measurements
/
m
;
const
om_match
=
om_line
.
exec
(
copiedText
)
;
const
gfx_line
=
/
^
.
*
?
(
\
d
+
)
\
.
\
d
+
MB
.
*
-
-
gfx
/
m
;
const
gfx_match
=
gfx_line
.
exec
(
copiedText
)
;
if
(
gfx_match
&
&
gfx_match
.
index
<
om_match
.
index
)
{
const
gfx_mb
=
gfx_match
[
1
]
;
ok
(
gfx_mb
<
MB_EXCLUSIVE_MAX
Explicit
Allocations
gfx
{
gfx_mb
}
MB
should
be
less
than
{
MB_EXCLUSIVE_MAX
}
MB
.
)
;
}
else
{
ok
(
true
"
Explicit
Allocations
gfx
is
not
listed
.
"
)
;
}
}
}
)
;
}
)
;
