"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
tests
/
dom
/
animation
/
test
/
testcommon
.
js
"
this
)
;
add_task
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
layout
.
animation
.
prerender
.
partial
"
true
]
[
"
layout
.
animation
.
prerender
.
viewport
-
ratio
-
limit
"
1
.
125
]
]
}
)
;
let
navBar
=
document
.
getElementById
(
"
nav
-
bar
"
)
;
const
anchor
=
document
.
createXULElement
(
"
toolbarbutton
"
)
;
anchor
.
classList
.
add
(
"
toolbarbutton
-
1
"
"
chromeclass
-
toolbar
-
additional
"
)
;
navBar
.
appendChild
(
anchor
)
;
const
panel
=
document
.
createXULElement
(
"
panel
"
)
;
panel
.
setAttribute
(
"
noautohide
"
true
)
;
navBar
.
appendChild
(
panel
)
;
const
container
=
document
.
createElement
(
"
div
"
)
;
container
.
style
=
"
width
:
100px
;
height
:
100px
;
overflow
:
scroll
;
"
;
const
target
=
document
.
createElement
(
"
div
"
)
;
target
.
style
=
"
width
:
100px
;
height
:
800px
;
"
;
container
.
appendChild
(
target
)
;
panel
.
appendChild
(
container
)
;
registerCleanupFunction
(
(
)
=
>
{
panel
.
remove
(
)
;
anchor
.
remove
(
)
;
}
)
;
panel
.
openPopup
(
anchor
)
;
target
.
style
.
transition
=
"
transform
100s
step
-
start
1s
"
;
getComputedStyle
(
target
)
;
const
startTransition
=
new
Promise
(
resolve
=
>
{
target
.
addEventListener
(
"
transitionstart
"
resolve
)
;
}
)
;
target
.
style
.
transform
=
"
translateY
(
-
130px
)
"
;
const
transition
=
target
.
getAnimations
(
)
[
0
]
;
await
startTransition
;
Assert
.
ok
(
transition
.
isRunningOnCompositor
"
The
transition
should
be
running
on
the
compositor
thread
"
)
;
const
markers
=
await
observeStylingInTargetWindow
(
panel
.
ownerGlobal
5
)
;
Assert
.
greaterOrEqual
(
markers
.
length
1
)
;
Assert
.
lessOrEqual
(
markers
.
length
2
)
;
}
)
;
