#
-
*
-
coding
:
utf
-
8
-
*
-
from
__future__
import
absolute_import
print_function
import
platform
from
unittest
import
skipIf
from
marionette_driver
.
by
import
By
from
marionette_harness
.
marionette_test
import
MarionetteTestCase
gfx_rollout_override
=
"
gfx
.
webrender
.
all
.
qualified
.
gfxPref
-
default
-
override
"
hw_qualified_override
=
"
gfx
.
webrender
.
all
.
qualified
.
hardware
-
override
"
rollout_pref
=
"
gfx
.
webrender
.
all
.
qualified
"
class
WrPrefRolloutWorkAroundTestCase
(
MarionetteTestCase
)
:
    
"
"
"
Test
cases
for
WebRender
gradual
pref
rollout
work
around
.
    
Normandy
sets
default
prefs
when
rolling
out
a
pref
change
but
    
gfx
starts
up
before
Normandy
can
set
the
pref
'
s
default
value
    
so
we
save
the
default
value
on
shutdown
and
check
it
on
startup
.
    
This
test
verifies
that
we
save
and
load
the
default
value
    
and
that
the
right
compositor
is
enabled
due
to
the
rollout
.
    
"
"
"
    
def
test_wr_rollout_workaround_on_non_qualifying_hw
(
self
)
:
        
self
.
marionette
.
set_pref
(
pref
=
gfx_rollout_override
value
=
False
)
        
self
.
marionette
.
set_pref
(
pref
=
hw_qualified_override
value
=
False
)
        
self
.
marionette
.
set_pref
(
pref
=
"
layers
.
acceleration
.
force
-
enabled
"
value
=
True
)
        
self
.
marionette
.
restart
(
clean
=
False
in_app
=
True
)
        
status
compositor
=
self
.
wr_status
(
)
        
print
(
"
self
.
wr_status
(
)
=
{
}
{
}
"
.
format
(
status
compositor
)
)
        
self
.
assertEqual
(
            
status
            
"
disabled
:
FEATURE_FAILURE_NOT_QUALIFIED
"
            
"
Should
start
out
as
WR
disabled
not
qualified
"
        
)
        
self
.
assertTrue
(
            
compositor
!
=
"
webrender
"
            
"
Before
WR
rollout
on
non
-
qualifying
HW
should
not
be
using
WR
.
"
        
)
        
self
.
marionette
.
set_pref
(
pref
=
rollout_pref
value
=
True
default_branch
=
True
)
        
self
.
marionette
.
restart
(
clean
=
False
in_app
=
True
)
        
status
compositor
=
self
.
wr_status
(
)
        
print
(
"
self
.
wr_status
(
)
=
{
}
{
}
"
.
format
(
status
compositor
)
)
        
self
.
assertEqual
(
            
status
            
"
disabled
:
FEATURE_FAILURE_NOT_QUALIFIED
"
            
"
WR
rolled
out
on
non
-
qualifying
hardware
should
not
use
WR
.
"
        
)
        
self
.
assertTrue
(
            
compositor
!
=
"
webrender
"
            
"
WR
rolled
out
on
non
-
qualifying
HW
should
not
be
used
.
"
        
)
        
self
.
marionette
.
set_pref
(
pref
=
rollout_pref
value
=
False
default_branch
=
True
)
        
self
.
marionette
.
restart
(
clean
=
False
in_app
=
True
)
        
status
compositor
=
self
.
wr_status
(
)
        
print
(
"
self
.
wr_status
(
)
=
{
}
{
}
"
.
format
(
status
compositor
)
)
        
self
.
assertEqual
(
            
status
            
"
disabled
:
FEATURE_FAILURE_NOT_QUALIFIED
"
            
"
WR
rollback
of
rollout
should
revert
to
disabled
on
non
-
qualifying
hardware
.
"
        
)
        
self
.
assertTrue
(
            
compositor
!
=
"
webrender
"
            
"
After
roll
back
on
non
-
qualifying
HW
WR
should
not
be
used
.
"
        
)
    
skipIf
(
        
platform
.
machine
(
)
=
=
"
ARM64
"
and
platform
.
system
(
)
=
=
"
Windows
"
        
"
Bug
1536369
-
Crashes
on
Windows
10
aarch64
"
    
)
    
def
test_wr_rollout_workaround_on_qualifying_hw
(
self
)
:
        
self
.
marionette
.
set_pref
(
pref
=
gfx_rollout_override
value
=
False
)
        
self
.
marionette
.
set_pref
(
pref
=
hw_qualified_override
value
=
True
)
        
self
.
marionette
.
set_pref
(
pref
=
"
layers
.
acceleration
.
force
-
enabled
"
value
=
True
)
        
self
.
marionette
.
restart
(
clean
=
False
in_app
=
True
)
        
status
compositor
=
self
.
wr_status
(
)
        
print
(
"
self
.
wr_status
(
)
=
{
}
{
}
"
.
format
(
status
compositor
)
)
        
self
.
assertEqual
(
            
status
            
"
disabled
:
FEATURE_FAILURE_IN_EXPERIMENT
"
            
"
Should
start
out
as
WR
disabled
in
experiment
"
        
)
        
self
.
assertTrue
(
            
compositor
!
=
"
webrender
"
            
"
Before
WR
rollout
on
qualifying
HW
should
not
be
using
WR
.
"
        
)
        
self
.
marionette
.
set_pref
(
pref
=
rollout_pref
value
=
True
default_branch
=
True
)
        
self
.
marionette
.
restart
(
clean
=
False
in_app
=
True
)
        
status
compositor
=
self
.
wr_status
(
)
        
print
(
"
self
.
wr_status
(
)
=
{
}
{
}
"
.
format
(
status
compositor
)
)
        
self
.
assertEqual
(
            
status
            
"
available
"
            
"
WR
rolled
out
on
qualifying
hardware
should
report
be
available
#
1
.
"
        
)
        
self
.
assertEqual
(
            
compositor
            
"
webrender
"
            
"
After
rollout
on
qualifying
HW
WR
should
be
used
.
"
        
)
        
self
.
marionette
.
set_pref
(
pref
=
rollout_pref
value
=
False
default_branch
=
True
)
        
self
.
marionette
.
restart
(
clean
=
False
in_app
=
True
)
        
status
compositor
=
self
.
wr_status
(
)
        
print
(
"
self
.
wr_status
(
)
=
{
}
{
}
"
.
format
(
status
compositor
)
)
        
self
.
assertEqual
(
            
status
            
"
disabled
:
FEATURE_FAILURE_IN_EXPERIMENT
"
            
"
WR
rollback
of
rollout
should
revert
to
disabled
on
qualifying
hardware
.
"
        
)
        
self
.
assertTrue
(
            
compositor
!
=
"
webrender
"
            
"
After
roll
back
on
qualifying
HW
WR
should
not
be
used
.
"
        
)
    
def
wr_status
(
self
)
:
        
self
.
marionette
.
set_context
(
self
.
marionette
.
CONTEXT_CHROME
)
        
result
=
self
.
marionette
.
execute_script
(
            
"
"
"
            
try
{
                
const
gfxInfo
=
Components
.
classes
[
'
mozilla
.
org
/
gfx
/
info
;
1
'
]
.
getService
(
Ci
.
nsIGfxInfo
)
;
                
return
{
features
:
gfxInfo
.
getFeatures
(
)
log
:
gfxInfo
.
getFeatureLog
(
)
}
;
            
}
catch
(
e
)
{
                
return
{
}
            
}
        
"
"
"
        
)
        
return
(
            
result
[
"
features
"
]
[
"
webrender
"
]
[
"
status
"
]
            
result
[
"
features
"
]
[
"
compositor
"
]
        
)
