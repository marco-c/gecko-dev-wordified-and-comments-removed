#
ifndef
GFX_PREFS_H
#
define
GFX_PREFS_H
#
include
<
cmath
>
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
gfx
/
LoggingConstants
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsString
.
h
"
#
define
DECL_GFX_PREF
(
Update
Prefname
Name
Type
Default
)
\
public
:
\
static
Type
Name
(
)
{
\
MOZ_ASSERT
(
SingletonExists
(
)
)
;
\
return
GetSingleton
(
)
.
mPref
#
#
Name
.
mValue
;
\
}
\
static
void
Set
#
#
Name
(
Type
aVal
)
{
\
MOZ_ASSERT
(
SingletonExists
(
)
)
;
\
GetSingleton
(
)
.
mPref
#
#
Name
.
Set
(
UpdatePolicy
:
:
Update
\
Get
#
#
Name
#
#
PrefName
(
)
aVal
)
;
\
}
\
static
const
char
*
Get
#
#
Name
#
#
PrefName
(
)
{
return
Prefname
;
}
\
static
Type
Get
#
#
Name
#
#
PrefDefault
(
)
{
return
Default
;
}
\
static
void
Set
#
#
Name
#
#
ChangeCallback
(
Pref
:
:
ChangeCallback
aCallback
)
{
\
MOZ_ASSERT
(
SingletonExists
(
)
)
;
\
GetSingleton
(
)
.
mPref
#
#
Name
.
SetChangeCallback
(
aCallback
)
;
\
}
\
\
private
:
\
PrefTemplate
<
UpdatePolicy
:
:
Update
Type
Get
#
#
Name
#
#
PrefDefault
\
Get
#
#
Name
#
#
PrefName
>
\
mPref
#
#
Name
#
define
DECL_OVERRIDE_PREF
(
Update
Prefname
Name
BaseValue
)
\
public
:
\
static
bool
Name
(
)
{
\
MOZ_ASSERT
(
SingletonExists
(
)
)
;
\
int32_t
val
=
GetSingleton
(
)
.
mPref
#
#
Name
.
mValue
;
\
return
val
=
=
2
?
!
!
(
BaseValue
)
:
!
!
val
;
\
}
\
static
void
Set
#
#
Name
(
bool
aVal
)
{
\
MOZ_ASSERT
(
SingletonExists
(
)
)
;
\
GetSingleton
(
)
.
mPref
#
#
Name
.
Set
(
UpdatePolicy
:
:
Update
\
Get
#
#
Name
#
#
PrefName
(
)
aVal
?
1
:
0
)
;
\
}
\
static
const
char
*
Get
#
#
Name
#
#
PrefName
(
)
{
return
Prefname
;
}
\
static
int32_t
Get
#
#
Name
#
#
PrefDefault
(
)
{
return
2
;
}
\
static
void
Set
#
#
Name
#
#
ChangeCallback
(
Pref
:
:
ChangeCallback
aCallback
)
{
\
MOZ_ASSERT
(
SingletonExists
(
)
)
;
\
GetSingleton
(
)
.
mPref
#
#
Name
.
SetChangeCallback
(
aCallback
)
;
\
}
\
\
private
:
\
PrefTemplate
<
UpdatePolicy
:
:
Update
int32_t
Get
#
#
Name
#
#
PrefDefault
\
Get
#
#
Name
#
#
PrefName
>
\
mPref
#
#
Name
namespace
mozilla
{
namespace
gfx
{
class
GfxPrefValue
;
}
}
class
gfxPrefs
;
class
gfxPrefs
final
{
typedef
mozilla
:
:
gfx
:
:
GfxPrefValue
GfxPrefValue
;
typedef
mozilla
:
:
Atomic
<
bool
mozilla
:
:
Relaxed
>
AtomicBool
;
typedef
mozilla
:
:
Atomic
<
int32_t
mozilla
:
:
Relaxed
>
AtomicInt32
;
typedef
mozilla
:
:
Atomic
<
uint32_t
mozilla
:
:
Relaxed
>
AtomicUint32
;
private
:
enum
class
UpdatePolicy
{
Skip
Once
Live
}
;
public
:
class
Pref
{
public
:
Pref
(
)
:
mChangeCallback
(
nullptr
)
{
mIndex
=
sGfxPrefList
-
>
Length
(
)
;
sGfxPrefList
-
>
AppendElement
(
this
)
;
}
size_t
Index
(
)
const
{
return
mIndex
;
}
void
OnChange
(
)
;
typedef
void
(
*
ChangeCallback
)
(
const
GfxPrefValue
&
)
;
void
SetChangeCallback
(
ChangeCallback
aCallback
)
;
virtual
const
char
*
Name
(
)
const
=
0
;
virtual
bool
HasDefaultValue
(
)
const
=
0
;
virtual
void
GetLiveValue
(
GfxPrefValue
*
aOutValue
)
const
=
0
;
virtual
void
GetCachedValue
(
GfxPrefValue
*
aOutValue
)
const
=
0
;
virtual
void
SetCachedValue
(
const
GfxPrefValue
&
aOutValue
)
=
0
;
protected
:
void
FireChangeCallback
(
)
;
private
:
size_t
mIndex
;
ChangeCallback
mChangeCallback
;
}
;
static
const
nsTArray
<
Pref
*
>
&
all
(
)
{
return
*
sGfxPrefList
;
}
private
:
template
<
class
T
>
class
TypedPref
:
public
Pref
{
public
:
explicit
TypedPref
(
T
aValue
)
:
mValue
(
aValue
)
{
}
void
GetCachedValue
(
GfxPrefValue
*
aOutValue
)
const
override
{
CopyPrefValue
(
&
mValue
aOutValue
)
;
}
void
SetCachedValue
(
const
GfxPrefValue
&
aOutValue
)
override
{
T
newValue
;
CopyPrefValue
(
&
aOutValue
&
newValue
)
;
if
(
mValue
!
=
newValue
)
{
mValue
=
newValue
;
FireChangeCallback
(
)
;
}
}
protected
:
T
GetLiveValueByName
(
const
char
*
aPrefName
)
const
{
if
(
IsPrefsServiceAvailable
(
)
)
{
return
PrefGet
(
aPrefName
mValue
)
;
}
return
mValue
;
}
public
:
T
mValue
;
}
;
template
<
UpdatePolicy
Update
class
T
T
Default
(
void
)
const
char
*
Prefname
(
void
)
>
class
PrefTemplate
final
:
public
TypedPref
<
T
>
{
typedef
TypedPref
<
T
>
BaseClass
;
public
:
PrefTemplate
(
)
:
BaseClass
(
Default
(
)
)
{
if
(
IsPrefsServiceAvailable
(
)
)
{
Register
(
Update
Prefname
(
)
)
;
}
if
(
IsParentProcess
(
)
&
&
Update
=
=
UpdatePolicy
:
:
Live
)
{
WatchChanges
(
Prefname
(
)
this
)
;
}
}
~
PrefTemplate
(
)
{
if
(
IsParentProcess
(
)
&
&
Update
=
=
UpdatePolicy
:
:
Live
)
{
UnwatchChanges
(
Prefname
(
)
this
)
;
}
}
void
Register
(
UpdatePolicy
aUpdate
const
char
*
aPreference
)
{
AssertMainThread
(
)
;
switch
(
aUpdate
)
{
case
UpdatePolicy
:
:
Skip
:
break
;
case
UpdatePolicy
:
:
Once
:
this
-
>
mValue
=
PrefGet
(
aPreference
this
-
>
mValue
)
;
break
;
case
UpdatePolicy
:
:
Live
:
{
nsCString
pref
;
pref
.
AssignLiteral
(
aPreference
strlen
(
aPreference
)
)
;
PrefAddVarCache
(
&
this
-
>
mValue
pref
this
-
>
mValue
)
;
}
break
;
default
:
MOZ_CRASH
(
"
Incomplete
switch
"
)
;
}
}
void
Set
(
UpdatePolicy
aUpdate
const
char
*
aPref
T
aValue
)
{
AssertMainThread
(
)
;
PrefSet
(
aPref
aValue
)
;
switch
(
aUpdate
)
{
case
UpdatePolicy
:
:
Skip
:
case
UpdatePolicy
:
:
Live
:
break
;
case
UpdatePolicy
:
:
Once
:
this
-
>
mValue
=
PrefGet
(
aPref
this
-
>
mValue
)
;
break
;
default
:
MOZ_CRASH
(
"
Incomplete
switch
"
)
;
}
}
const
char
*
Name
(
)
const
override
{
return
Prefname
(
)
;
}
void
GetLiveValue
(
GfxPrefValue
*
aOutValue
)
const
override
{
T
value
=
GetLiveValue
(
)
;
CopyPrefValue
(
&
value
aOutValue
)
;
}
T
GetLiveValue
(
)
const
{
return
BaseClass
:
:
GetLiveValueByName
(
Prefname
(
)
)
;
}
bool
HasDefaultValue
(
)
const
override
{
return
this
-
>
mValue
=
=
Default
(
)
;
}
}
;
public
:
static
gfxPrefs
&
GetSingleton
(
)
{
return
sInstance
?
*
sInstance
:
CreateAndInitializeSingleton
(
)
;
}
static
void
DestroySingleton
(
)
;
static
bool
SingletonExists
(
)
;
private
:
static
gfxPrefs
&
CreateAndInitializeSingleton
(
)
;
static
gfxPrefs
*
sInstance
;
static
bool
sInstanceHasBeenDestroyed
;
static
nsTArray
<
Pref
*
>
*
sGfxPrefList
;
private
:
void
Init
(
)
;
static
bool
IsPrefsServiceAvailable
(
)
;
static
bool
IsParentProcess
(
)
;
static
void
PrefAddVarCache
(
bool
*
const
nsACString
&
bool
)
;
static
void
PrefAddVarCache
(
int32_t
*
const
nsACString
&
int32_t
)
;
static
void
PrefAddVarCache
(
uint32_t
*
const
nsACString
&
uint32_t
)
;
static
void
PrefAddVarCache
(
float
*
const
nsACString
&
float
)
;
static
void
PrefAddVarCache
(
std
:
:
string
*
const
nsCString
&
std
:
:
string
)
;
static
void
PrefAddVarCache
(
AtomicBool
*
const
nsACString
&
bool
)
;
static
void
PrefAddVarCache
(
AtomicInt32
*
const
nsACString
&
int32_t
)
;
static
void
PrefAddVarCache
(
AtomicUint32
*
const
nsACString
&
uint32_t
)
;
static
bool
PrefGet
(
const
char
*
bool
)
;
static
int32_t
PrefGet
(
const
char
*
int32_t
)
;
static
uint32_t
PrefGet
(
const
char
*
uint32_t
)
;
static
float
PrefGet
(
const
char
*
float
)
;
static
std
:
:
string
PrefGet
(
const
char
*
std
:
:
string
)
;
static
void
PrefSet
(
const
char
*
aPref
bool
aValue
)
;
static
void
PrefSet
(
const
char
*
aPref
int32_t
aValue
)
;
static
void
PrefSet
(
const
char
*
aPref
uint32_t
aValue
)
;
static
void
PrefSet
(
const
char
*
aPref
float
aValue
)
;
static
void
PrefSet
(
const
char
*
aPref
std
:
:
string
aValue
)
;
static
void
WatchChanges
(
const
char
*
aPrefname
Pref
*
aPref
)
;
static
void
UnwatchChanges
(
const
char
*
aPrefname
Pref
*
aPref
)
;
static
void
CopyPrefValue
(
const
bool
*
aValue
GfxPrefValue
*
aOutValue
)
;
static
void
CopyPrefValue
(
const
int32_t
*
aValue
GfxPrefValue
*
aOutValue
)
;
static
void
CopyPrefValue
(
const
uint32_t
*
aValue
GfxPrefValue
*
aOutValue
)
;
static
void
CopyPrefValue
(
const
float
*
aValue
GfxPrefValue
*
aOutValue
)
;
static
void
CopyPrefValue
(
const
std
:
:
string
*
aValue
GfxPrefValue
*
aOutValue
)
;
static
void
CopyPrefValue
(
const
GfxPrefValue
*
aValue
bool
*
aOutValue
)
;
static
void
CopyPrefValue
(
const
GfxPrefValue
*
aValue
int32_t
*
aOutValue
)
;
static
void
CopyPrefValue
(
const
GfxPrefValue
*
aValue
uint32_t
*
aOutValue
)
;
static
void
CopyPrefValue
(
const
GfxPrefValue
*
aValue
float
*
aOutValue
)
;
static
void
CopyPrefValue
(
const
GfxPrefValue
*
aValue
std
:
:
string
*
aOutValue
)
;
static
void
AssertMainThread
(
)
;
static
bool
OverrideBase_WebRender
(
)
;
gfxPrefs
(
)
;
~
gfxPrefs
(
)
;
gfxPrefs
(
const
gfxPrefs
&
)
=
delete
;
gfxPrefs
&
operator
=
(
const
gfxPrefs
&
)
=
delete
;
}
;
#
undef
DECL_GFX_PREF
/
*
Don
'
t
need
it
outside
of
this
file
*
/
#
endif
