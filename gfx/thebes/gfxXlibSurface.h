#
ifndef
GFX_XLIBSURFACE_H
#
define
GFX_XLIBSURFACE_H
#
include
"
gfxASurface
.
h
"
#
include
<
X11
/
extensions
/
Xrender
.
h
>
#
include
<
X11
/
Xlib
.
h
>
#
include
"
X11UndefineNone
.
h
"
#
include
"
GLXLibrary
.
h
"
#
include
"
mozilla
/
gfx
/
XlibDisplay
.
h
"
#
include
"
nsSize
.
h
"
#
define
XLIB_IMAGE_SIDE_SIZE_LIMIT
0x7fff
class
gfxXlibSurface
final
:
public
gfxASurface
{
public
:
gfxXlibSurface
(
Display
*
dpy
Drawable
drawable
Visual
*
visual
)
;
gfxXlibSurface
(
Display
*
dpy
Drawable
drawable
Visual
*
visual
const
mozilla
:
:
gfx
:
:
IntSize
&
size
)
;
gfxXlibSurface
(
const
std
:
:
shared_ptr
<
mozilla
:
:
gfx
:
:
XlibDisplay
>
&
dpy
Drawable
drawable
Visual
*
visual
const
mozilla
:
:
gfx
:
:
IntSize
&
size
)
;
gfxXlibSurface
(
:
:
Screen
*
screen
Drawable
drawable
XRenderPictFormat
*
format
const
mozilla
:
:
gfx
:
:
IntSize
&
size
)
;
explicit
gfxXlibSurface
(
cairo_surface_t
*
csurf
)
;
static
already_AddRefed
<
gfxXlibSurface
>
Create
(
:
:
Screen
*
screen
Visual
*
visual
const
mozilla
:
:
gfx
:
:
IntSize
&
size
Drawable
relatedDrawable
=
X11None
)
;
static
already_AddRefed
<
gfxXlibSurface
>
Create
(
const
std
:
:
shared_ptr
<
mozilla
:
:
gfx
:
:
XlibDisplay
>
&
display
:
:
Screen
*
screen
Visual
*
visual
const
mozilla
:
:
gfx
:
:
IntSize
&
size
Drawable
relatedDrawable
=
X11None
)
;
static
cairo_surface_t
*
CreateCairoSurface
(
:
:
Screen
*
screen
Visual
*
visual
const
mozilla
:
:
gfx
:
:
IntSize
&
size
Drawable
relatedDrawable
=
X11None
)
;
static
already_AddRefed
<
gfxXlibSurface
>
Create
(
:
:
Screen
*
screen
XRenderPictFormat
*
format
const
mozilla
:
:
gfx
:
:
IntSize
&
size
Drawable
relatedDrawable
=
X11None
)
;
virtual
~
gfxXlibSurface
(
)
;
already_AddRefed
<
gfxASurface
>
CreateSimilarSurface
(
gfxContentType
aType
const
mozilla
:
:
gfx
:
:
IntSize
&
aSize
)
override
;
void
Finish
(
)
override
;
const
mozilla
:
:
gfx
:
:
IntSize
GetSize
(
)
const
override
;
Display
*
XDisplay
(
)
{
return
*
mDisplay
;
}
:
:
Screen
*
XScreen
(
)
;
Drawable
XDrawable
(
)
{
return
mDrawable
;
}
XRenderPictFormat
*
XRenderFormat
(
)
;
static
int
DepthOfVisual
(
const
:
:
Screen
*
screen
const
Visual
*
visual
)
;
static
Visual
*
FindVisual
(
:
:
Screen
*
screen
gfxImageFormat
format
)
;
static
XRenderPictFormat
*
FindRenderFormat
(
Display
*
dpy
gfxImageFormat
format
)
;
static
bool
GetColormapAndVisual
(
cairo_surface_t
*
aXlibSurface
Colormap
*
colormap
Visual
*
*
visual
)
;
void
TakePixmap
(
)
;
Drawable
ReleasePixmap
(
)
;
bool
GetColormapAndVisual
(
Colormap
*
colormap
Visual
*
*
visual
)
;
GLXPixmap
GetGLXPixmap
(
)
;
void
BindGLXPixmap
(
GLXPixmap
aPixmap
)
;
bool
IsPadSlow
(
)
{
return
VendorRelease
(
mDisplay
-
>
get
(
)
)
>
=
60700000
|
|
VendorRelease
(
mDisplay
-
>
get
(
)
)
<
10699000
;
}
protected
:
bool
mPixmapTaken
;
std
:
:
shared_ptr
<
mozilla
:
:
gfx
:
:
XlibDisplay
>
mDisplay
;
Drawable
mDrawable
;
const
mozilla
:
:
gfx
:
:
IntSize
DoSizeQuery
(
)
;
GLXPixmap
mGLXPixmap
;
}
;
#
endif
