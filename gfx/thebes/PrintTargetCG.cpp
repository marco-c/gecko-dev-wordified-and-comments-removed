#
include
"
PrintTargetCG
.
h
"
#
include
"
cairo
.
h
"
#
include
"
cairo
-
quartz
.
h
"
#
include
"
mozilla
/
gfx
/
HelpersCairo
.
h
"
namespace
mozilla
{
namespace
gfx
{
PrintTargetCG
:
:
PrintTargetCG
(
cairo_surface_t
*
aCairoSurface
const
IntSize
&
aSize
)
:
PrintTarget
(
aCairoSurface
aSize
)
{
}
already_AddRefed
<
PrintTargetCG
>
PrintTargetCG
:
:
CreateOrNull
(
const
IntSize
&
aSize
gfxImageFormat
aFormat
)
{
if
(
!
Factory
:
:
CheckSurfaceSize
(
aSize
)
)
{
return
nullptr
;
}
unsigned
int
width
=
static_cast
<
unsigned
int
>
(
aSize
.
width
)
;
unsigned
int
height
=
static_cast
<
unsigned
int
>
(
aSize
.
height
)
;
cairo_format_t
cformat
=
GfxFormatToCairoFormat
(
aFormat
)
;
cairo_surface_t
*
surface
=
cairo_quartz_surface_create
(
cformat
width
height
)
;
if
(
cairo_surface_status
(
surface
)
)
{
return
nullptr
;
}
RefPtr
<
PrintTargetCG
>
target
=
new
PrintTargetCG
(
surface
aSize
)
;
return
target
.
forget
(
)
;
}
already_AddRefed
<
PrintTargetCG
>
PrintTargetCG
:
:
CreateOrNull
(
CGContextRef
aContext
const
IntSize
&
aSize
)
{
if
(
!
Factory
:
:
CheckSurfaceSize
(
aSize
)
)
{
return
nullptr
;
}
unsigned
int
width
=
static_cast
<
unsigned
int
>
(
aSize
.
width
)
;
unsigned
int
height
=
static_cast
<
unsigned
int
>
(
aSize
.
height
)
;
cairo_surface_t
*
surface
=
cairo_quartz_surface_create_for_cg_context
(
aContext
width
height
)
;
if
(
cairo_surface_status
(
surface
)
)
{
return
nullptr
;
}
RefPtr
<
PrintTargetCG
>
target
=
new
PrintTargetCG
(
surface
aSize
)
;
return
target
.
forget
(
)
;
}
}
}
