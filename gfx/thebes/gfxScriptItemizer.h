#
ifndef
GFX_SCRIPTITEMIZER_H
#
define
GFX_SCRIPTITEMIZER_H
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
intl
/
UnicodeScriptCodes
.
h
"
#
define
PAREN_STACK_DEPTH
32
class
gfxScriptItemizer
{
public
:
using
Script
=
mozilla
:
:
intl
:
:
Script
;
gfxScriptItemizer
(
)
=
default
;
gfxScriptItemizer
(
const
gfxScriptItemizer
&
aOther
)
=
delete
;
gfxScriptItemizer
(
gfxScriptItemizer
&
&
aOther
)
=
delete
;
void
SetText
(
const
char16_t
*
aText
uint32_t
aLength
)
{
textPtr
.
_2b
=
aText
;
textLength
=
aLength
;
textIs8bit
=
false
;
}
void
SetText
(
const
unsigned
char
*
aText
uint32_t
aLength
)
{
textPtr
.
_1b
=
aText
;
textLength
=
aLength
;
textIs8bit
=
true
;
}
struct
Run
{
uint32_t
mOffset
=
0
;
uint32_t
mLength
=
0
;
Script
mScript
=
Script
:
:
COMMON
;
MOZ_IMPLICIT
operator
bool
(
)
const
{
return
mLength
>
0
;
}
}
;
Run
Next
(
)
;
protected
:
void
push
(
uint32_t
endPairChar
Script
newScriptCode
)
;
void
pop
(
)
;
void
fixup
(
Script
newScriptCode
)
;
struct
ParenStackEntry
{
uint32_t
endPairChar
;
Script
scriptCode
;
}
;
union
{
const
char16_t
*
_2b
;
const
unsigned
char
*
_1b
;
}
textPtr
;
uint32_t
textLength
;
bool
textIs8bit
;
uint32_t
scriptStart
=
0
;
uint32_t
scriptLimit
=
0
;
Script
scriptCode
=
Script
:
:
INVALID
;
struct
ParenStackEntry
parenStack
[
PAREN_STACK_DEPTH
]
;
uint32_t
parenSP
=
-
1
;
uint32_t
pushCount
=
0
;
uint32_t
fixupCount
=
0
;
}
;
#
endif
