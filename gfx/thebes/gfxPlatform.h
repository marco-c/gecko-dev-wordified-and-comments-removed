#
ifndef
GFX_PLATFORM_H
#
define
GFX_PLATFORM_H
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsUnicodeScriptCodes
.
h
"
#
include
"
gfxTypes
.
h
"
#
include
"
gfxFontFamilyList
.
h
"
#
include
"
gfxBlur
.
h
"
#
include
"
gfxSkipChars
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
qcms
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
GfxInfoCollector
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
class
gfxASurface
;
class
gfxFont
;
class
gfxFontGroup
;
struct
gfxFontStyle
;
class
gfxUserFontSet
;
class
gfxFontEntry
;
class
gfxPlatformFontList
;
class
gfxTextRun
;
class
nsIURI
;
class
nsIAtom
;
class
nsIObserver
;
class
SRGBOverrideObserver
;
class
gfxTextPerfMetrics
;
typedef
struct
FT_LibraryRec_
*
FT_Library
;
namespace
mozilla
{
namespace
gl
{
class
SkiaGLGlue
;
}
namespace
gfx
{
class
DrawTarget
;
class
SourceSurface
;
class
DataSourceSurface
;
class
ScaledFont
;
class
DrawEventRecorder
;
class
VsyncSource
;
class
ContentDeviceData
;
class
GPUDeviceData
;
class
FeatureState
;
inline
uint32_t
BackendTypeBit
(
BackendType
b
)
{
return
1
<
<
uint8_t
(
b
)
;
}
}
namespace
dom
{
class
FontFamilyListEntry
;
}
}
#
define
MOZ_PERFORMANCE_WARNING
(
module
.
.
.
)
\
do
{
\
if
(
gfxPlatform
:
:
PerfWarnings
(
)
)
{
\
printf_stderr
(
"
[
"
module
"
]
"
__VA_ARGS__
)
;
\
}
\
}
while
(
0
)
enum
eCMSMode
{
eCMSMode_Off
=
0
eCMSMode_All
=
1
eCMSMode_TaggedOnly
=
2
eCMSMode_AllCount
=
3
}
;
enum
eGfxLog
{
eGfxLog_fontlist
=
0
eGfxLog_fontinit
=
1
eGfxLog_textrun
=
2
eGfxLog_textrunui
=
3
eGfxLog_cmapdata
=
4
eGfxLog_textperf
=
5
}
;
const
uint32_t
kMaxLenPrefLangList
=
32
;
#
define
UNINITIALIZED_VALUE
(
-
1
)
inline
const
char
*
GetBackendName
(
mozilla
:
:
gfx
:
:
BackendType
aBackend
)
{
switch
(
aBackend
)
{
case
mozilla
:
:
gfx
:
:
BackendType
:
:
DIRECT2D
:
return
"
direct2d
"
;
case
mozilla
:
:
gfx
:
:
BackendType
:
:
CAIRO
:
return
"
cairo
"
;
case
mozilla
:
:
gfx
:
:
BackendType
:
:
SKIA
:
return
"
skia
"
;
case
mozilla
:
:
gfx
:
:
BackendType
:
:
RECORDING
:
return
"
recording
"
;
case
mozilla
:
:
gfx
:
:
BackendType
:
:
DIRECT2D1_1
:
return
"
direct2d
1
.
1
"
;
case
mozilla
:
:
gfx
:
:
BackendType
:
:
WEBRENDER_TEXT
:
return
"
webrender
text
"
;
case
mozilla
:
:
gfx
:
:
BackendType
:
:
NONE
:
return
"
none
"
;
case
mozilla
:
:
gfx
:
:
BackendType
:
:
BACKEND_LAST
:
return
"
invalid
"
;
}
MOZ_CRASH
(
"
Incomplete
switch
"
)
;
}
enum
class
DeviceResetReason
{
OK
=
0
HUNG
REMOVED
RESET
DRIVER_ERROR
INVALID_CALL
OUT_OF_MEMORY
FORCED_RESET
UNKNOWN
D3D9_RESET
}
;
enum
class
ForcedDeviceResetReason
{
OPENSHAREDHANDLE
=
0
COMPOSITOR_UPDATED
}
;
class
gfxPlatform
{
friend
class
SRGBOverrideObserver
;
public
:
typedef
mozilla
:
:
gfx
:
:
Color
Color
;
typedef
mozilla
:
:
gfx
:
:
DataSourceSurface
DataSourceSurface
;
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
typedef
mozilla
:
:
gfx
:
:
IntSize
IntSize
;
typedef
mozilla
:
:
gfx
:
:
SourceSurface
SourceSurface
;
typedef
mozilla
:
:
unicode
:
:
Script
Script
;
static
gfxPlatform
*
GetPlatform
(
)
;
static
bool
Initialized
(
)
;
static
void
Shutdown
(
)
;
static
void
InitChild
(
const
mozilla
:
:
gfx
:
:
ContentDeviceData
&
aData
)
;
static
void
InitLayersIPC
(
)
;
static
void
ShutdownLayersIPC
(
)
;
static
void
InitNullMetadata
(
)
;
static
int32_t
MaxTextureSize
(
)
;
static
int32_t
MaxAllocSize
(
)
;
static
void
InitMoz2DLogging
(
)
;
static
bool
IsHeadless
(
)
;
virtual
already_AddRefed
<
gfxASurface
>
CreateOffscreenSurface
(
const
IntSize
&
aSize
gfxImageFormat
aFormat
)
=
0
;
static
already_AddRefed
<
DrawTarget
>
CreateDrawTargetForSurface
(
gfxASurface
*
aSurface
const
mozilla
:
:
gfx
:
:
IntSize
&
aSize
)
;
static
already_AddRefed
<
SourceSurface
>
GetSourceSurfaceForSurface
(
RefPtr
<
mozilla
:
:
gfx
:
:
DrawTarget
>
aTarget
gfxASurface
*
aSurface
bool
aIsPlugin
=
false
)
;
static
void
ClearSourceSurfaceForSurface
(
gfxASurface
*
aSurface
)
;
static
already_AddRefed
<
DataSourceSurface
>
GetWrappedDataSourceSurface
(
gfxASurface
*
aSurface
)
;
already_AddRefed
<
DrawTarget
>
CreateOffscreenContentDrawTarget
(
const
mozilla
:
:
gfx
:
:
IntSize
&
aSize
mozilla
:
:
gfx
:
:
SurfaceFormat
aFormat
bool
aFallback
=
false
)
;
already_AddRefed
<
DrawTarget
>
CreateOffscreenCanvasDrawTarget
(
const
mozilla
:
:
gfx
:
:
IntSize
&
aSize
mozilla
:
:
gfx
:
:
SurfaceFormat
aFormat
)
;
already_AddRefed
<
DrawTarget
>
CreateSimilarSoftwareDrawTarget
(
DrawTarget
*
aDT
const
IntSize
&
aSize
mozilla
:
:
gfx
:
:
SurfaceFormat
aFormat
)
;
static
already_AddRefed
<
DrawTarget
>
CreateDrawTargetForData
(
unsigned
char
*
aData
const
mozilla
:
:
gfx
:
:
IntSize
&
aSize
int32_t
aStride
mozilla
:
:
gfx
:
:
SurfaceFormat
aFormat
bool
aUninitialized
=
false
)
;
virtual
bool
CanRenderContentToDataSurface
(
)
const
{
return
false
;
}
bool
SupportsAzureContentForDrawTarget
(
mozilla
:
:
gfx
:
:
DrawTarget
*
aTarget
)
;
bool
SupportsAzureContentForType
(
mozilla
:
:
gfx
:
:
BackendType
aType
)
{
return
BackendTypeBit
(
aType
)
&
mContentBackendBitmask
;
}
bool
AllowOpenGLCanvas
(
)
;
virtual
void
InitializeSkiaCacheLimits
(
)
;
static
bool
AsyncPanZoomEnabled
(
)
;
virtual
void
GetAzureBackendInfo
(
mozilla
:
:
widget
:
:
InfoObject
&
aObj
)
;
void
GetApzSupportInfo
(
mozilla
:
:
widget
:
:
InfoObject
&
aObj
)
;
void
GetTilesSupportInfo
(
mozilla
:
:
widget
:
:
InfoObject
&
aObj
)
;
mozilla
:
:
gfx
:
:
BackendType
GetDefaultContentBackend
(
)
{
return
mContentBackend
;
}
mozilla
:
:
gfx
:
:
BackendType
GetSoftwareBackend
(
)
{
return
mSoftwareBackend
;
}
virtual
mozilla
:
:
gfx
:
:
BackendType
GetContentBackendFor
(
mozilla
:
:
layers
:
:
LayersBackend
aLayers
)
{
return
mContentBackend
;
}
mozilla
:
:
gfx
:
:
BackendType
GetPreferredCanvasBackend
(
)
{
return
mPreferredCanvasBackend
;
}
mozilla
:
:
gfx
:
:
BackendType
GetFallbackCanvasBackend
(
)
{
return
mFallbackCanvasBackend
;
}
virtual
void
SetupClusterBoundaries
(
gfxTextRun
*
aTextRun
const
char16_t
*
aString
)
;
virtual
nsresult
GetFontList
(
nsIAtom
*
aLangGroup
const
nsACString
&
aGenericFamily
nsTArray
<
nsString
>
&
aListOfFonts
)
;
virtual
void
GetSystemFontFamilyList
(
InfallibleTArray
<
mozilla
:
:
dom
:
:
FontFamilyListEntry
>
*
aFontFamilies
)
{
}
virtual
nsresult
UpdateFontList
(
)
;
virtual
gfxPlatformFontList
*
CreatePlatformFontList
(
)
{
NS_NOTREACHED
(
"
oops
this
platform
doesn
'
t
have
a
gfxPlatformFontList
implementation
"
)
;
return
nullptr
;
}
virtual
nsresult
GetStandardFamilyName
(
const
nsAString
&
aFontName
nsAString
&
aFamilyName
)
;
nsString
GetDefaultFontName
(
const
nsACString
&
aLangGroup
const
nsACString
&
aGenericFamily
)
;
virtual
gfxFontGroup
*
CreateFontGroup
(
const
mozilla
:
:
FontFamilyList
&
aFontFamilyList
const
gfxFontStyle
*
aStyle
gfxTextPerfMetrics
*
aTextPerf
gfxUserFontSet
*
aUserFontSet
gfxFloat
aDevToCssSize
)
=
0
;
virtual
gfxFontEntry
*
LookupLocalFont
(
const
nsAString
&
aFontName
uint16_t
aWeight
int16_t
aStretch
uint8_t
aStyle
)
;
virtual
gfxFontEntry
*
MakePlatformFont
(
const
nsAString
&
aFontName
uint16_t
aWeight
int16_t
aStretch
uint8_t
aStyle
const
uint8_t
*
aFontData
uint32_t
aLength
)
;
bool
DownloadableFontsEnabled
(
)
;
virtual
bool
FontHintingEnabled
(
)
{
return
true
;
}
virtual
bool
RequiresLinearZoom
(
)
{
return
false
;
}
virtual
bool
RespectsFontStyleSmoothing
(
)
const
{
return
false
;
}
bool
UseCmapsDuringSystemFallback
(
)
;
bool
OpenTypeSVGEnabled
(
)
;
uint32_t
WordCacheCharLimit
(
)
;
uint32_t
WordCacheMaxEntries
(
)
;
bool
UseGraphiteShaping
(
)
;
virtual
bool
IsFontFormatSupported
(
uint32_t
aFormatFlags
)
;
virtual
bool
DidRenderingDeviceReset
(
DeviceResetReason
*
aResetReason
=
nullptr
)
{
return
false
;
}
virtual
void
GetCommonFallbackFonts
(
uint32_t
uint32_t
Script
nsTArray
<
const
char
*
>
&
)
{
}
static
bool
InSafeMode
(
)
;
static
bool
OffMainThreadCompositingEnabled
(
)
;
void
UpdateCanUseHardwareVideoDecoding
(
)
;
void
GetCompositorBackends
(
bool
useAcceleration
nsTArray
<
mozilla
:
:
layers
:
:
LayersBackend
>
&
aBackends
)
;
static
bool
BufferRotationEnabled
(
)
;
static
void
DisableBufferRotation
(
)
;
static
eCMSMode
GetCMSMode
(
)
;
static
int
GetRenderingIntent
(
)
;
static
void
TransformPixel
(
const
Color
&
in
Color
&
out
qcms_transform
*
transform
)
;
static
qcms_profile
*
GetCMSOutputProfile
(
)
;
static
qcms_profile
*
GetCMSsRGBProfile
(
)
;
static
qcms_transform
*
GetCMSRGBTransform
(
)
;
static
qcms_transform
*
GetCMSInverseRGBTransform
(
)
;
static
qcms_transform
*
GetCMSRGBATransform
(
)
;
virtual
void
FontsPrefsChanged
(
const
char
*
aPref
)
;
int32_t
GetBidiNumeralOption
(
)
;
static
void
ForceGlobalReflow
(
)
;
static
void
FlushFontAndWordCaches
(
)
;
gfxASurface
*
ScreenReferenceSurface
(
)
{
return
mScreenReferenceSurface
;
}
RefPtr
<
mozilla
:
:
gfx
:
:
DrawTarget
>
ScreenReferenceDrawTarget
(
)
;
virtual
mozilla
:
:
gfx
:
:
SurfaceFormat
Optimal2DFormatForContent
(
gfxContentType
aContent
)
;
virtual
gfxImageFormat
OptimalFormatForContent
(
gfxContentType
aContent
)
;
virtual
gfxImageFormat
GetOffscreenFormat
(
)
{
return
mozilla
:
:
gfx
:
:
SurfaceFormat
:
:
X8R8G8B8_UINT32
;
}
static
mozilla
:
:
LogModule
*
GetLog
(
eGfxLog
aWhichLog
)
;
int
GetScreenDepth
(
)
const
{
return
mScreenDepth
;
}
mozilla
:
:
gfx
:
:
IntSize
GetScreenSize
(
)
const
{
return
mScreenSize
;
}
mozilla
:
:
layers
:
:
DiagnosticTypes
GetLayerDiagnosticTypes
(
)
;
mozilla
:
:
gl
:
:
SkiaGLGlue
*
GetSkiaGLGlue
(
)
;
void
PurgeSkiaGPUCache
(
)
;
static
void
PurgeSkiaFontCache
(
)
;
static
bool
UsesOffMainThreadCompositing
(
)
;
bool
HasEnoughTotalSystemMemoryForSkiaGL
(
)
;
virtual
mozilla
:
:
gfx
:
:
VsyncSource
*
GetHardwareVsync
(
)
{
MOZ_ASSERT
(
mVsyncSource
!
=
nullptr
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
return
mVsyncSource
;
}
static
bool
IsInLayoutAsapMode
(
)
;
static
int
GetSoftwareVsyncRate
(
)
;
static
bool
ForceSoftwareVsync
(
)
;
static
int
GetDefaultFrameRate
(
)
;
virtual
bool
SupportsApzWheelInput
(
)
const
{
return
false
;
}
bool
SupportsApzTouchInput
(
)
const
;
bool
SupportsApzDragInput
(
)
const
;
bool
SupportsApzKeyboardInput
(
)
const
;
bool
SupportsApzAutoscrolling
(
)
const
;
virtual
void
FlushContentDrawing
(
)
{
}
virtual
void
SchedulePaintIfDeviceReset
(
)
{
}
already_AddRefed
<
DrawTarget
>
CreateDrawTargetForBackend
(
mozilla
:
:
gfx
:
:
BackendType
aBackend
const
mozilla
:
:
gfx
:
:
IntSize
&
aSize
mozilla
:
:
gfx
:
:
SurfaceFormat
aFormat
)
;
static
bool
PerfWarnings
(
)
;
static
void
NotifyGPUProcessDisabled
(
)
;
void
NotifyCompositorCreated
(
mozilla
:
:
layers
:
:
LayersBackend
aBackend
)
;
mozilla
:
:
layers
:
:
LayersBackend
GetCompositorBackend
(
)
const
{
return
mCompositorBackend
;
}
virtual
void
CompositorUpdated
(
)
{
}
virtual
bool
SupportsPluginDirectBitmapDrawing
(
)
{
return
false
;
}
virtual
bool
RequiresAcceleratedGLContextForCompositorOGL
(
)
const
{
return
false
;
}
static
bool
IsGfxInfoStatusOkay
(
int32_t
aFeature
nsCString
*
aOutMessage
nsCString
&
aFailureId
)
;
const
gfxSkipChars
&
EmptySkipChars
(
)
const
{
return
kEmptySkipChars
;
}
virtual
void
BuildContentDeviceData
(
mozilla
:
:
gfx
:
:
ContentDeviceData
*
aOut
)
;
virtual
void
ImportGPUDeviceData
(
const
mozilla
:
:
gfx
:
:
GPUDeviceData
&
aData
)
;
virtual
FT_Library
GetFTLibrary
(
)
{
return
nullptr
;
}
protected
:
gfxPlatform
(
)
;
virtual
~
gfxPlatform
(
)
;
virtual
void
InitAcceleration
(
)
;
virtual
void
WillShutdown
(
)
;
virtual
already_AddRefed
<
mozilla
:
:
gfx
:
:
VsyncSource
>
CreateHardwareVsyncSource
(
)
;
virtual
bool
AccelerateLayersByDefault
(
)
;
virtual
void
GetAcceleratedCompositorBackends
(
nsTArray
<
mozilla
:
:
layers
:
:
LayersBackend
>
&
aBackends
)
;
void
InitBackendPrefs
(
uint32_t
aCanvasBitmask
mozilla
:
:
gfx
:
:
BackendType
aCanvasDefault
uint32_t
aContentBitmask
mozilla
:
:
gfx
:
:
BackendType
aContentDefault
)
;
void
FetchAndImportContentDeviceData
(
)
;
virtual
void
ImportContentDeviceData
(
const
mozilla
:
:
gfx
:
:
ContentDeviceData
&
aData
)
;
void
BumpDeviceCounter
(
)
;
static
mozilla
:
:
gfx
:
:
BackendType
GetCanvasBackendPref
(
uint32_t
aBackendBitmask
)
;
static
mozilla
:
:
gfx
:
:
BackendType
GetContentBackendPref
(
uint32_t
&
aBackendBitmask
)
;
static
mozilla
:
:
gfx
:
:
BackendType
GetBackendPref
(
const
char
*
aBackendPrefName
uint32_t
&
aBackendBitmask
)
;
static
mozilla
:
:
gfx
:
:
BackendType
BackendTypeForName
(
const
nsCString
&
aName
)
;
virtual
bool
CanUseHardwareVideoDecoding
(
)
;
int8_t
mAllowDownloadableFonts
;
int8_t
mGraphiteShapingEnabled
;
int8_t
mOpenTypeSVGEnabled
;
int8_t
mBidiNumeralOption
;
int8_t
mFallbackUsesCmaps
;
int32_t
mWordCacheCharLimit
;
int32_t
mWordCacheMaxEntries
;
uint64_t
mTotalSystemMemory
;
RefPtr
<
mozilla
:
:
gfx
:
:
VsyncSource
>
mVsyncSource
;
RefPtr
<
mozilla
:
:
gfx
:
:
DrawTarget
>
mScreenReferenceDrawTarget
;
private
:
static
void
Init
(
)
;
static
void
InitOpenGLConfig
(
)
;
static
void
CreateCMSOutputProfile
(
)
;
static
void
GetCMSOutputProfileData
(
void
*
&
mem
size_t
&
size
)
;
friend
void
RecordingPrefChanged
(
const
char
*
aPrefName
void
*
aClosure
)
;
virtual
void
GetPlatformCMSOutputProfile
(
void
*
&
mem
size_t
&
size
)
;
void
ComputeTileSize
(
)
;
void
PopulateScreenInfo
(
)
;
void
InitCompositorAccelerationPrefs
(
)
;
void
InitGPUProcessPrefs
(
)
;
void
InitWebRenderConfig
(
)
;
void
InitOMTPConfig
(
)
;
static
bool
IsDXInterop2Blocked
(
)
;
RefPtr
<
gfxASurface
>
mScreenReferenceSurface
;
nsCOMPtr
<
nsIObserver
>
mSRGBOverrideObserver
;
nsCOMPtr
<
nsIObserver
>
mFontPrefsObserver
;
nsCOMPtr
<
nsIObserver
>
mMemoryPressureObserver
;
mozilla
:
:
gfx
:
:
BackendType
mPreferredCanvasBackend
;
mozilla
:
:
gfx
:
:
BackendType
mFallbackCanvasBackend
;
mozilla
:
:
gfx
:
:
BackendType
mContentBackend
;
mozilla
:
:
gfx
:
:
BackendType
mSoftwareBackend
;
uint32_t
mContentBackendBitmask
;
mozilla
:
:
widget
:
:
GfxInfoCollector
<
gfxPlatform
>
mAzureCanvasBackendCollector
;
mozilla
:
:
widget
:
:
GfxInfoCollector
<
gfxPlatform
>
mApzSupportCollector
;
mozilla
:
:
widget
:
:
GfxInfoCollector
<
gfxPlatform
>
mTilesInfoCollector
;
RefPtr
<
mozilla
:
:
gfx
:
:
DrawEventRecorder
>
mRecorder
;
RefPtr
<
mozilla
:
:
gl
:
:
SkiaGLGlue
>
mSkiaGlue
;
mozilla
:
:
layers
:
:
LayersBackend
mCompositorBackend
;
int32_t
mScreenDepth
;
mozilla
:
:
gfx
:
:
IntSize
mScreenSize
;
const
gfxSkipChars
kEmptySkipChars
;
}
;
#
endif
