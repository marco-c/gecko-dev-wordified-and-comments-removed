#
ifndef
GFX_GRAPHITESHAPER_H
#
define
GFX_GRAPHITESHAPER_H
#
include
"
gfxFont
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
nsTHashSet
.
h
"
#
include
"
ThebesRLBoxTypes
.
h
"
struct
gr_face
;
struct
gr_font
;
struct
gr_segment
;
class
gfxGraphiteShaper
:
public
gfxFontShaper
{
public
:
explicit
gfxGraphiteShaper
(
gfxFont
*
aFont
)
;
virtual
~
gfxGraphiteShaper
(
)
;
bool
ShapeText
(
DrawTarget
*
aDrawTarget
const
char16_t
*
aText
uint32_t
aOffset
uint32_t
aLength
Script
aScript
nsAtom
*
aLanguage
bool
aVertical
RoundingFlags
aRounding
gfxShapedText
*
aShapedText
)
override
;
static
void
Shutdown
(
)
;
protected
:
nsresult
SetGlyphsFromSegment
(
gfxShapedText
*
aShapedText
uint32_t
aOffset
uint32_t
aLength
const
char16_t
*
aText
tainted_opaque_gr
<
char16_t
*
>
t_aText
tainted_opaque_gr
<
gr_segment
*
>
aSegment
RoundingFlags
aRounding
)
;
friend
class
gfxFontEntryCallbacks
;
static
tainted_opaque_gr
<
float
>
GrGetAdvance
(
rlbox_sandbox_gr
&
sandbox
tainted_opaque_gr
<
const
void
*
>
appFontHandle
tainted_opaque_gr
<
uint16_t
>
glyphid
)
;
tainted_opaque_gr
<
gr_face
*
>
mGrFace
;
tainted_opaque_gr
<
gr_font
*
>
mGrFont
;
rlbox_sandbox_gr
*
mSandbox
;
sandbox_callback_gr
<
float
(
*
)
(
const
void
*
uint16_t
)
>
*
mCallback
;
struct
CallbackData
{
gfxFont
*
MOZ_NON_OWNING_REF
mFont
;
}
;
CallbackData
mCallbackData
;
static
thread_local
CallbackData
*
tl_GrGetAdvanceData
;
bool
mFallbackToSmallCaps
;
static
uint32_t
GetGraphiteTagForLang
(
const
nsCString
&
aLang
)
;
static
nsTHashSet
<
uint32_t
>
*
sLanguageTags
;
}
;
#
endif
