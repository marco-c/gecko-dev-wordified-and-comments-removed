#
include
"
PrintTarget
.
h
"
#
include
"
cairo
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
namespace
mozilla
{
namespace
gfx
{
PrintTarget
:
:
PrintTarget
(
cairo_surface_t
*
aCairoSurface
const
IntSize
&
aSize
)
:
mCairoSurface
(
aCairoSurface
)
mSize
(
aSize
)
mIsFinished
(
false
)
{
#
if
0
MOZ_ASSERT
(
aCairoSurface
&
&
!
cairo_surface_status
(
aCairoSurface
)
"
CreateOrNull
factory
methods
should
not
call
us
without
a
"
"
valid
cairo_surface_t
*
"
)
;
#
endif
#
ifdef
MOZ_TREE_CAIRO
if
(
mCairoSurface
&
&
cairo_surface_get_content
(
mCairoSurface
)
!
=
CAIRO_CONTENT_COLOR
)
{
cairo_surface_set_subpixel_antialiasing
(
mCairoSurface
CAIRO_SUBPIXEL_ANTIALIASING_DISABLED
)
;
}
#
endif
}
PrintTarget
:
:
~
PrintTarget
(
)
{
cairo_surface_destroy
(
mCairoSurface
)
;
mCairoSurface
=
nullptr
;
}
already_AddRefed
<
DrawTarget
>
PrintTarget
:
:
MakeDrawTarget
(
const
IntSize
&
aSize
DrawEventRecorder
*
aRecorder
)
{
MOZ_ASSERT
(
mCairoSurface
"
We
shouldn
'
t
have
been
constructed
without
a
cairo
surface
"
)
;
MOZ_ASSERT
(
!
aRecorder
"
aRecorder
should
only
be
passed
to
an
instance
of
"
"
PrintTargetRecording
"
)
;
if
(
cairo_surface_status
(
mCairoSurface
)
)
{
return
nullptr
;
}
RefPtr
<
DrawTarget
>
dt
=
Factory
:
:
CreateDrawTargetForCairoSurface
(
mCairoSurface
aSize
)
;
if
(
!
dt
|
|
!
dt
-
>
IsValid
(
)
)
{
return
nullptr
;
}
return
dt
.
forget
(
)
;
}
void
PrintTarget
:
:
Finish
(
)
{
if
(
mIsFinished
)
{
return
;
}
mIsFinished
=
true
;
cairo_surface_finish
(
mCairoSurface
)
;
}
}
}
