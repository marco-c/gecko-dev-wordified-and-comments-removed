#
ifndef
GFX_WINDOWSDWRITEFONTS_H
#
define
GFX_WINDOWSDWRITEFONTS_H
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
dwrite_1
.
h
>
#
include
"
gfxFont
.
h
"
#
include
"
gfxUserFontSet
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
gfx
/
UnscaledFontDWrite
.
h
"
struct
_cairo_font_face
;
typedef
_cairo_font_face
cairo_font_face_t
;
class
gfxDWriteFont
:
public
gfxFont
{
public
:
gfxDWriteFont
(
const
RefPtr
<
mozilla
:
:
gfx
:
:
UnscaledFontDWrite
>
&
aUnscaledFont
gfxFontEntry
*
aFontEntry
const
gfxFontStyle
*
aFontStyle
RefPtr
<
IDWriteFontFace
>
aFontFace
=
nullptr
AntialiasOption
=
kAntialiasDefault
)
;
~
gfxDWriteFont
(
)
;
static
void
UpdateSystemTextQuality
(
)
;
static
void
SystemTextQualityChanged
(
)
;
mozilla
:
:
UniquePtr
<
gfxFont
>
CopyWithAntialiasOption
(
AntialiasOption
anAAOption
)
override
;
uint32_t
GetSpaceGlyph
(
)
override
;
bool
AllowSubpixelAA
(
)
override
{
return
mAllowManualShowGlyphs
;
}
bool
IsValid
(
)
const
;
IDWriteFontFace
*
GetFontFace
(
)
;
RunMetrics
Measure
(
const
gfxTextRun
*
aTextRun
uint32_t
aStart
uint32_t
aEnd
BoundingBoxType
aBoundingBoxType
DrawTarget
*
aDrawTargetForTightBoundingBox
Spacing
*
aSpacing
mozilla
:
:
gfx
:
:
ShapedTextFlags
aOrientation
)
override
;
bool
ProvidesGlyphWidths
(
)
const
override
;
int32_t
GetGlyphWidth
(
uint16_t
aGID
)
override
;
void
AddSizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
FontCacheSizes
*
aSizes
)
const
override
;
void
AddSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
FontCacheSizes
*
aSizes
)
const
override
;
FontType
GetType
(
)
const
override
{
return
FONT_TYPE_DWRITE
;
}
already_AddRefed
<
mozilla
:
:
gfx
:
:
ScaledFont
>
GetScaledFont
(
mozilla
:
:
gfx
:
:
DrawTarget
*
aTarget
)
override
;
bool
ShouldRoundXOffset
(
cairo_t
*
aCairo
)
const
override
;
protected
:
cairo_scaled_font_t
*
InitCairoScaledFont
(
)
;
const
Metrics
&
GetHorizontalMetrics
(
)
override
;
bool
GetFakeMetricsForArialBlack
(
DWRITE_FONT_METRICS
*
aFontMetrics
)
;
void
ComputeMetrics
(
AntialiasOption
anAAOption
)
;
bool
HasBitmapStrikeForSize
(
uint32_t
aSize
)
;
cairo_font_face_t
*
CairoFontFace
(
)
;
gfxFloat
MeasureGlyphWidth
(
uint16_t
aGlyph
)
;
DWRITE_MEASURING_MODE
GetMeasuringMode
(
)
const
;
bool
GetForceGDIClassic
(
)
const
;
RefPtr
<
IDWriteFontFace
>
mFontFace
;
RefPtr
<
IDWriteFontFace1
>
mFontFace1
;
cairo_font_face_t
*
mCairoFontFace
;
Metrics
*
mMetrics
;
mozilla
:
:
UniquePtr
<
nsDataHashtable
<
nsUint32HashKey
int32_t
>
>
mGlyphWidths
;
uint32_t
mSpaceGlyph
;
bool
mUseSubpixelPositions
;
bool
mAllowManualShowGlyphs
;
bool
mAzureScaledFontUsedClearType
;
bool
UsingClearType
(
)
{
return
mozilla
:
:
gfx
:
:
gfxVars
:
:
SystemTextQuality
(
)
=
=
CLEARTYPE_QUALITY
;
}
}
;
#
endif
