#
ifndef
GFX_FT2FONTBASE_H
#
define
GFX_FT2FONTBASE_H
#
include
"
cairo
.
h
"
#
include
"
gfxContext
.
h
"
#
include
"
gfxFont
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
UnscaledFontFreeType
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
class
gfxFT2FontBase
:
public
gfxFont
{
public
:
gfxFT2FontBase
(
const
RefPtr
<
mozilla
:
:
gfx
:
:
UnscaledFontFreeType
>
&
aUnscaledFont
cairo_scaled_font_t
*
aScaledFont
gfxFontEntry
*
aFontEntry
const
gfxFontStyle
*
aFontStyle
)
;
virtual
~
gfxFT2FontBase
(
)
;
uint32_t
GetGlyph
(
uint32_t
aCharCode
)
;
void
GetGlyphExtents
(
uint32_t
aGlyph
cairo_text_extents_t
*
aExtents
)
;
uint32_t
GetSpaceGlyph
(
)
override
;
bool
ProvidesGetGlyph
(
)
const
override
{
return
true
;
}
virtual
uint32_t
GetGlyph
(
uint32_t
unicode
uint32_t
variation_selector
)
override
;
bool
ProvidesGlyphWidths
(
)
const
override
{
return
true
;
}
int32_t
GetGlyphWidth
(
uint16_t
aGID
)
override
;
bool
SetupCairoFont
(
DrawTarget
*
aDrawTarget
)
override
;
FontType
GetType
(
)
const
override
{
return
FONT_TYPE_FT2
;
}
static
void
SetupVarCoords
(
FT_MM_Var
*
aMMVar
const
nsTArray
<
gfxFontVariation
>
&
aVariations
nsTArray
<
FT_Fixed
>
*
aCoords
)
;
private
:
uint32_t
GetCharExtents
(
char
aChar
cairo_text_extents_t
*
aExtents
)
;
uint32_t
GetCharWidth
(
char
aChar
gfxFloat
*
aWidth
)
;
bool
GetFTGlyphAdvance
(
uint16_t
aGID
int32_t
*
aWidth
)
;
void
InitMetrics
(
)
;
protected
:
const
Metrics
&
GetHorizontalMetrics
(
)
override
;
uint32_t
mSpaceGlyph
;
Metrics
mMetrics
;
bool
mEmbolden
;
nsTArray
<
FT_Fixed
>
mCoords
;
mozilla
:
:
UniquePtr
<
nsDataHashtable
<
nsUint32HashKey
int32_t
>
>
mGlyphWidths
;
}
;
#
endif
