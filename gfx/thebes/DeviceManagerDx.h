#
ifndef
mozilla_gfx_thebes_DeviceManagerDx_h
#
define
mozilla_gfx_thebes_DeviceManagerDx_h
#
include
"
gfxPlatform
.
h
"
#
include
"
gfxTelemetry
.
h
"
#
include
"
gfxTypes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
gfx
/
GraphicsMessages
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
<
windows
.
h
>
#
include
<
objbase
.
h
>
#
include
<
d3d11
.
h
>
#
include
<
dxgi
.
h
>
#
include
<
dxgi1_6
.
h
>
#
include
<
d3dcommon
.
h
>
#
if
!
defined
(
D3D_FEATURE_LEVEL_11_1
)
#
define
D3D_FEATURE_LEVEL_11_1
static_cast
<
D3D_FEATURE_LEVEL
>
(
0xb100
)
#
define
D3D_FL9_1_REQ_TEXTURE2D_U_OR_V_DIMENSION
2048
#
define
D3D_FL9_3_REQ_TEXTURE2D_U_OR_V_DIMENSION
4096
#
endif
struct
ID3D11Device
;
struct
IDCompositionDevice2
;
struct
IDirectDraw7
;
namespace
mozilla
{
class
ScopedGfxFeatureReporter
;
namespace
layers
{
class
DeviceAttachmentsD3D11
;
}
namespace
gfx
{
class
FeatureState
;
class
DeviceManagerDx
final
{
public
:
static
void
Init
(
)
;
static
void
Shutdown
(
)
;
DeviceManagerDx
(
)
;
static
DeviceManagerDx
*
Get
(
)
{
return
sInstance
;
}
RefPtr
<
ID3D11Device
>
GetCompositorDevice
(
)
;
RefPtr
<
ID3D11Device
>
GetContentDevice
(
)
;
RefPtr
<
ID3D11Device
>
GetCanvasDevice
(
)
;
RefPtr
<
ID3D11Device
>
GetImageDevice
(
)
;
RefPtr
<
IDCompositionDevice2
>
GetDirectCompositionDevice
(
)
;
RefPtr
<
ID3D11Device
>
GetVRDevice
(
)
;
RefPtr
<
ID3D11Device
>
CreateDecoderDevice
(
)
;
IDirectDraw7
*
GetDirectDraw
(
)
;
unsigned
GetCompositorFeatureLevel
(
)
const
;
bool
TextureSharingWorks
(
)
;
bool
IsWARP
(
)
;
bool
CanUseNV12
(
)
;
bool
CanUseP010
(
)
;
bool
CanUseP016
(
)
;
bool
CanUseDComp
(
)
;
bool
CanInitializeKeyedMutexTextures
(
)
;
bool
HasCrashyInitData
(
)
;
nsTArray
<
DXGI_OUTPUT_DESC1
>
EnumerateOutputs
(
)
;
bool
GetOutputFromMonitor
(
HMONITOR
monitor
RefPtr
<
IDXGIOutput
>
*
aOutOutput
)
;
void
CheckHardwareStretchingSupport
(
HwStretchingSupport
&
aRv
)
;
bool
CreateCompositorDevices
(
)
;
void
CreateContentDevices
(
)
;
void
CreateDirectCompositionDevice
(
)
;
bool
CreateCanvasDevice
(
)
;
static
HANDLE
CreateDCompSurfaceHandle
(
)
;
void
GetCompositorDevices
(
RefPtr
<
ID3D11Device
>
*
aOutDevice
RefPtr
<
layers
:
:
DeviceAttachmentsD3D11
>
*
aOutAttachments
)
;
void
ImportDeviceInfo
(
const
D3D11DeviceStatus
&
aDeviceStatus
)
;
void
ExportDeviceInfo
(
D3D11DeviceStatus
*
aOut
)
;
void
ResetDevices
(
)
;
void
InitializeDirectDraw
(
)
;
bool
MaybeResetAndReacquireDevices
(
)
;
bool
CheckRemotePresentSupport
(
)
;
bool
HasDeviceReset
(
DeviceResetReason
*
aOutReason
=
nullptr
)
;
void
ForceDeviceReset
(
ForcedDeviceResetReason
aReason
)
;
private
:
static
void
PreloadAttachmentsOnCompositorThread
(
)
;
IDXGIAdapter1
*
GetDXGIAdapter
(
)
;
void
DisableD3D11AfterCrash
(
)
;
void
CreateCompositorDevice
(
mozilla
:
:
gfx
:
:
FeatureState
&
d3d11
)
;
bool
CreateCompositorDeviceHelper
(
mozilla
:
:
gfx
:
:
FeatureState
&
aD3d11
IDXGIAdapter1
*
aAdapter
bool
aAttemptVideoSupport
RefPtr
<
ID3D11Device
>
&
aOutDevice
)
;
void
CreateWARPCompositorDevice
(
)
;
bool
CreateVRDevice
(
)
;
mozilla
:
:
gfx
:
:
FeatureStatus
CreateContentDevice
(
)
;
bool
CreateDevice
(
IDXGIAdapter
*
aAdapter
D3D_DRIVER_TYPE
aDriverType
UINT
aFlags
HRESULT
&
aResOut
RefPtr
<
ID3D11Device
>
&
aOutDevice
)
;
bool
ContentAdapterIsParentAdapter
(
ID3D11Device
*
device
)
;
bool
LoadD3D11
(
)
;
bool
LoadDcomp
(
)
;
void
ReleaseD3D11
(
)
;
bool
GetAnyDeviceRemovedReason
(
DeviceResetReason
*
aOutReason
)
;
private
:
static
StaticAutoPtr
<
DeviceManagerDx
>
sInstance
;
nsModuleHandle
mD3D11Module
;
nsModuleHandle
mDcompModule
;
mozilla
:
:
Mutex
mDeviceLock
;
nsTArray
<
D3D_FEATURE_LEVEL
>
mFeatureLevels
;
RefPtr
<
IDXGIAdapter1
>
mAdapter
;
RefPtr
<
ID3D11Device
>
mCompositorDevice
;
RefPtr
<
ID3D11Device
>
mContentDevice
;
RefPtr
<
ID3D11Device
>
mCanvasDevice
;
RefPtr
<
ID3D11Device
>
mImageDevice
;
RefPtr
<
ID3D11Device
>
mVRDevice
;
RefPtr
<
ID3D11Device
>
mDecoderDevice
;
RefPtr
<
IDCompositionDevice2
>
mDirectCompositionDevice
;
RefPtr
<
layers
:
:
DeviceAttachmentsD3D11
>
mCompositorAttachments
;
bool
mCompositorDeviceSupportsVideo
;
Maybe
<
D3D11DeviceStatus
>
mDeviceStatus
;
nsModuleHandle
mDirectDrawDLL
;
RefPtr
<
IDirectDraw7
>
mDirectDraw
;
Maybe
<
DeviceResetReason
>
mDeviceResetReason
;
}
;
}
}
#
endif
