#
ifndef
GFX_PATTERN_H
#
define
GFX_PATTERN_H
#
include
"
gfxTypes
.
h
"
#
include
"
gfxMatrix
.
h
"
#
include
"
mozilla
/
Alignment
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
PatternHelpers
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsTArray
.
h
"
typedef
struct
_cairo_pattern
cairo_pattern_t
;
class
gfxPattern
final
{
NS_INLINE_DECL_REFCOUNTING
(
gfxPattern
)
public
:
explicit
gfxPattern
(
const
mozilla
:
:
gfx
:
:
Color
&
aColor
)
;
gfxPattern
(
gfxFloat
x0
gfxFloat
y0
gfxFloat
x1
gfxFloat
y1
)
;
gfxPattern
(
gfxFloat
cx0
gfxFloat
cy0
gfxFloat
radius0
gfxFloat
cx1
gfxFloat
cy1
gfxFloat
radius1
)
;
gfxPattern
(
mozilla
:
:
gfx
:
:
SourceSurface
*
aSurface
const
mozilla
:
:
gfx
:
:
Matrix
&
aPatternToUserSpace
)
;
void
AddColorStop
(
gfxFloat
offset
const
mozilla
:
:
gfx
:
:
Color
&
c
)
;
void
SetColorStops
(
mozilla
:
:
gfx
:
:
GradientStops
*
aStops
)
;
void
CacheColorStops
(
const
mozilla
:
:
gfx
:
:
DrawTarget
*
aDT
)
;
void
SetMatrix
(
const
gfxMatrix
&
matrix
)
;
gfxMatrix
GetMatrix
(
)
const
;
gfxMatrix
GetInverseMatrix
(
)
const
;
mozilla
:
:
gfx
:
:
Pattern
*
GetPattern
(
const
mozilla
:
:
gfx
:
:
DrawTarget
*
aTarget
mozilla
:
:
gfx
:
:
Matrix
*
aOriginalUserToDevice
=
nullptr
)
;
bool
IsOpaque
(
)
;
void
SetExtend
(
mozilla
:
:
gfx
:
:
ExtendMode
aExtend
)
;
int
CairoStatus
(
)
;
void
SetFilter
(
mozilla
:
:
gfx
:
:
Filter
filter
)
;
mozilla
:
:
gfx
:
:
Filter
Filter
(
)
const
;
bool
GetSolidColor
(
mozilla
:
:
gfx
:
:
Color
&
aColorOut
)
;
private
:
~
gfxPattern
(
)
{
}
mozilla
:
:
gfx
:
:
GeneralPattern
mGfxPattern
;
RefPtr
<
mozilla
:
:
gfx
:
:
SourceSurface
>
mSourceSurface
;
mozilla
:
:
gfx
:
:
Matrix
mPatternToUserSpace
;
RefPtr
<
mozilla
:
:
gfx
:
:
GradientStops
>
mStops
;
nsTArray
<
mozilla
:
:
gfx
:
:
GradientStop
>
mStopsList
;
mozilla
:
:
gfx
:
:
ExtendMode
mExtend
;
}
;
#
endif
