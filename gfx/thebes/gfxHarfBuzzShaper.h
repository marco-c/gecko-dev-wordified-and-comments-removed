#
ifndef
GFX_HARFBUZZSHAPER_H
#
define
GFX_HARFBUZZSHAPER_H
#
include
"
gfxFont
.
h
"
#
include
"
harfbuzz
/
hb
.
h
"
#
include
"
nsUnicodeProperties
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
class
gfxHarfBuzzShaper
:
public
gfxFontShaper
{
public
:
explicit
gfxHarfBuzzShaper
(
gfxFont
*
aFont
)
;
virtual
~
gfxHarfBuzzShaper
(
)
;
struct
FontCallbackData
{
gfxHarfBuzzShaper
*
mShaper
;
}
;
bool
Initialize
(
)
;
bool
IsInitialized
(
)
const
{
return
mHBFont
!
=
nullptr
;
}
bool
ShapeText
(
DrawTarget
*
aDrawTarget
const
char16_t
*
aText
uint32_t
aOffset
uint32_t
aLength
Script
aScript
nsAtom
*
aLanguage
bool
aVertical
RoundingFlags
aRounding
gfxShapedText
*
aShapedText
)
override
;
hb_blob_t
*
GetFontTable
(
hb_tag_t
aTag
)
const
;
hb_codepoint_t
GetNominalGlyph
(
hb_codepoint_t
unicode
)
const
;
hb_codepoint_t
GetVariationGlyph
(
hb_codepoint_t
unicode
hb_codepoint_t
variation_selector
)
const
;
hb_position_t
GetGlyphHAdvance
(
hb_codepoint_t
glyph
)
const
;
hb_position_t
GetGlyphVAdvance
(
hb_codepoint_t
glyph
)
;
void
GetGlyphVOrigin
(
hb_codepoint_t
aGlyph
hb_position_t
*
aX
hb_position_t
*
aY
)
const
;
static
hb_position_t
HBGetGlyphHAdvance
(
hb_font_t
*
font
void
*
font_data
hb_codepoint_t
glyph
void
*
user_data
)
;
static
hb_position_t
HBGetGlyphVAdvance
(
hb_font_t
*
font
void
*
font_data
hb_codepoint_t
glyph
void
*
user_data
)
;
static
hb_bool_t
HBGetGlyphVOrigin
(
hb_font_t
*
font
void
*
font_data
hb_codepoint_t
glyph
hb_position_t
*
x
hb_position_t
*
y
void
*
user_data
)
;
hb_position_t
GetHKerning
(
uint16_t
aFirstGlyph
uint16_t
aSecondGlyph
)
const
;
hb_bool_t
GetGlyphExtents
(
hb_codepoint_t
aGlyph
hb_glyph_extents_t
*
aExtents
)
const
;
bool
UseVerticalPresentationForms
(
)
const
{
return
mUseVerticalPresentationForms
;
}
static
hb_script_t
GetHBScriptUsedForShaping
(
Script
aScript
)
{
hb_script_t
hbScript
;
if
(
aScript
<
=
Script
:
:
INHERITED
)
{
hbScript
=
HB_SCRIPT_LATIN
;
}
else
{
hbScript
=
hb_script_t
(
mozilla
:
:
unicode
:
:
GetScriptTagForCode
(
aScript
)
)
;
}
return
hbScript
;
}
static
hb_codepoint_t
GetVerticalPresentationForm
(
hb_codepoint_t
aUnicode
)
;
static
hb_font_t
*
CreateHBFont
(
gfxFont
*
aFont
hb_font_funcs_t
*
aFontFuncs
=
nullptr
FontCallbackData
*
aCallbackData
=
nullptr
)
;
protected
:
nsresult
SetGlyphsFromRun
(
gfxShapedText
*
aShapedText
uint32_t
aOffset
uint32_t
aLength
const
char16_t
*
aText
bool
aVertical
RoundingFlags
aRounding
)
;
nscoord
GetGlyphPositions
(
gfxContext
*
aContext
nsTArray
<
nsPoint
>
&
aPositions
uint32_t
aAppUnitsPerDevUnit
)
;
void
InitializeVertical
(
)
;
bool
LoadHmtxTable
(
)
;
struct
Glyf
{
mozilla
:
:
AutoSwap_PRInt16
numberOfContours
;
mozilla
:
:
AutoSwap_PRInt16
xMin
;
mozilla
:
:
AutoSwap_PRInt16
yMin
;
mozilla
:
:
AutoSwap_PRInt16
xMax
;
mozilla
:
:
AutoSwap_PRInt16
yMax
;
}
;
const
Glyf
*
FindGlyf
(
hb_codepoint_t
aGlyph
bool
*
aEmptyGlyf
)
const
;
hb_font_t
*
mHBFont
;
hb_buffer_t
*
mBuffer
;
FontCallbackData
mCallbackData
;
mutable
hb_blob_t
*
mKernTable
;
mutable
hb_blob_t
*
mHmtxTable
;
mutable
hb_blob_t
*
mVmtxTable
;
mutable
hb_blob_t
*
mVORGTable
;
mutable
hb_blob_t
*
mLocaTable
;
mutable
hb_blob_t
*
mGlyfTable
;
mutable
hb_blob_t
*
mCmapTable
;
mutable
int32_t
mCmapFormat
;
mutable
uint32_t
mSubtableOffset
;
mutable
uint32_t
mUVSTableOffset
;
mutable
int32_t
mNumLongHMetrics
;
mutable
int32_t
mNumLongVMetrics
;
mutable
gfxFloat
mDefaultVOrg
;
bool
mUseFontGetGlyph
;
bool
mIsSymbolFont
;
bool
mUseFontGlyphWidths
;
bool
mInitialized
;
bool
mVerticalInitialized
;
bool
mUseVerticalPresentationForms
;
mutable
bool
mLoadedLocaGlyf
;
mutable
bool
mLocaLongOffsets
;
}
;
#
endif
