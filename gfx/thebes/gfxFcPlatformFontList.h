#
ifndef
GFXFCPLATFORMFONTLIST_H_
#
define
GFXFCPLATFORMFONTLIST_H_
#
include
"
gfxFont
.
h
"
#
include
"
gfxFontEntry
.
h
"
#
include
"
gfxFT2FontBase
.
h
"
#
include
"
gfxPlatformFontList
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
<
fontconfig
/
fontconfig
.
h
>
#
include
"
ft2build
.
h
"
#
include
FT_FREETYPE_H
#
include
FT_TRUETYPE_TABLES_H
#
include
<
cairo
.
h
>
#
include
<
cairo
-
ft
.
h
>
#
include
"
gfxFontconfigUtils
.
h
"
template
<
>
class
nsAutoRefTraits
<
FcObjectSet
>
:
public
nsPointerRefTraits
<
FcObjectSet
>
{
public
:
static
void
Release
(
FcObjectSet
*
ptr
)
{
FcObjectSetDestroy
(
ptr
)
;
}
}
;
template
<
>
class
nsAutoRefTraits
<
FcConfig
>
:
public
nsPointerRefTraits
<
FcConfig
>
{
public
:
static
void
Release
(
FcConfig
*
ptr
)
{
FcConfigDestroy
(
ptr
)
;
}
static
void
AddRef
(
FcConfig
*
ptr
)
{
FcConfigReference
(
ptr
)
;
}
}
;
class
FTUserFontData
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
FTUserFontData
)
explicit
FTUserFontData
(
FT_Face
aFace
const
uint8_t
*
aData
)
:
mFace
(
aFace
)
mFontData
(
aData
)
{
}
const
uint8_t
*
FontData
(
)
const
{
return
mFontData
;
}
private
:
~
FTUserFontData
(
)
{
mozilla
:
:
gfx
:
:
Factory
:
:
ReleaseFTFace
(
mFace
)
;
if
(
mFontData
)
{
NS_Free
(
(
void
*
)
mFontData
)
;
}
}
FT_Face
mFace
;
const
uint8_t
*
mFontData
;
}
;
class
gfxFontconfigFontEntry
:
public
gfxFontEntry
{
public
:
explicit
gfxFontconfigFontEntry
(
const
nsAString
&
aFaceName
FcPattern
*
aFontPattern
bool
aIgnoreFcCharmap
)
;
explicit
gfxFontconfigFontEntry
(
const
nsAString
&
aFaceName
uint16_t
aWeight
int16_t
aStretch
uint8_t
aStyle
const
uint8_t
*
aData
FT_Face
aFace
)
;
explicit
gfxFontconfigFontEntry
(
const
nsAString
&
aFaceName
FcPattern
*
aFontPattern
uint16_t
aWeight
int16_t
aStretch
uint8_t
aStyle
)
;
FcPattern
*
GetPattern
(
)
{
return
mFontPattern
;
}
bool
SupportsLangGroup
(
nsIAtom
*
aLangGroup
)
const
override
;
nsresult
ReadCMAP
(
FontInfoData
*
aFontInfoData
=
nullptr
)
override
;
bool
TestCharacterMap
(
uint32_t
aCh
)
override
;
hb_blob_t
*
GetFontTable
(
uint32_t
aTableTag
)
override
;
void
ForgetHBFace
(
)
override
;
void
ReleaseGrFace
(
gr_face
*
aFace
)
override
;
double
GetAspect
(
)
;
protected
:
virtual
~
gfxFontconfigFontEntry
(
)
;
gfxFont
*
CreateFontInstance
(
const
gfxFontStyle
*
aFontStyle
bool
aNeedsBold
)
override
;
cairo_scaled_font_t
*
CreateScaledFont
(
FcPattern
*
aRenderPattern
gfxFloat
aAdjustedSize
const
gfxFontStyle
*
aStyle
bool
aNeedsBold
)
;
virtual
nsresult
CopyFontTable
(
uint32_t
aTableTag
nsTArray
<
uint8_t
>
&
aBuffer
)
override
;
void
MaybeReleaseFTFace
(
)
;
nsCountedRef
<
FcPattern
>
mFontPattern
;
RefPtr
<
FTUserFontData
>
mUserFontData
;
FT_Face
mFTFace
;
bool
mFTFaceInitialized
;
bool
mIgnoreFcCharmap
;
double
mAspect
;
const
uint8_t
*
mFontData
;
class
UnscaledFontCache
{
public
:
already_AddRefed
<
mozilla
:
:
gfx
:
:
UnscaledFontFontconfig
>
Lookup
(
const
char
*
aFile
uint32_t
aIndex
)
;
void
Add
(
const
RefPtr
<
mozilla
:
:
gfx
:
:
UnscaledFontFontconfig
>
&
aUnscaledFont
)
{
mUnscaledFonts
[
kNumEntries
-
1
]
=
aUnscaledFont
;
MoveToFront
(
kNumEntries
-
1
)
;
}
private
:
void
MoveToFront
(
size_t
aIndex
)
;
static
const
size_t
kNumEntries
=
3
;
mozilla
:
:
WeakPtr
<
mozilla
:
:
gfx
:
:
UnscaledFont
>
mUnscaledFonts
[
kNumEntries
]
;
}
;
UnscaledFontCache
mUnscaledFontCache
;
}
;
class
gfxFontconfigFontFamily
:
public
gfxFontFamily
{
public
:
explicit
gfxFontconfigFontFamily
(
const
nsAString
&
aName
)
:
gfxFontFamily
(
aName
)
mContainsAppFonts
(
false
)
mHasNonScalableFaces
(
false
)
mForceScalable
(
false
)
{
}
void
FindStyleVariations
(
FontInfoData
*
aFontInfoData
=
nullptr
)
override
;
void
AddFontPattern
(
FcPattern
*
aFontPattern
)
;
void
SetFamilyContainsAppFonts
(
bool
aContainsAppFonts
)
{
mContainsAppFonts
=
aContainsAppFonts
;
}
void
FindAllFontsForStyle
(
const
gfxFontStyle
&
aFontStyle
nsTArray
<
gfxFontEntry
*
>
&
aFontEntryList
bool
&
aNeedsSyntheticBold
)
override
;
protected
:
virtual
~
gfxFontconfigFontFamily
(
)
;
nsTArray
<
nsCountedRef
<
FcPattern
>
>
mFontPatterns
;
bool
mContainsAppFonts
;
bool
mHasNonScalableFaces
;
bool
mForceScalable
;
}
;
class
gfxFontconfigFont
:
public
gfxFontconfigFontBase
{
public
:
gfxFontconfigFont
(
const
RefPtr
<
mozilla
:
:
gfx
:
:
UnscaledFontFontconfig
>
&
aUnscaledFont
cairo_scaled_font_t
*
aScaledFont
FcPattern
*
aPattern
gfxFloat
aAdjustedSize
gfxFontEntry
*
aFontEntry
const
gfxFontStyle
*
aFontStyle
bool
aNeedsBold
)
;
protected
:
virtual
~
gfxFontconfigFont
(
)
;
}
;
class
nsILanguageAtomService
;
class
gfxFcPlatformFontList
:
public
gfxPlatformFontList
{
public
:
gfxFcPlatformFontList
(
)
;
static
gfxFcPlatformFontList
*
PlatformFontList
(
)
{
return
static_cast
<
gfxFcPlatformFontList
*
>
(
sPlatformFontList
)
;
}
virtual
nsresult
InitFontListForPlatform
(
)
override
;
void
GetFontList
(
nsIAtom
*
aLangGroup
const
nsACString
&
aGenericFamily
nsTArray
<
nsString
>
&
aListOfFonts
)
override
;
gfxFontEntry
*
LookupLocalFont
(
const
nsAString
&
aFontName
uint16_t
aWeight
int16_t
aStretch
uint8_t
aStyle
)
override
;
gfxFontEntry
*
MakePlatformFont
(
const
nsAString
&
aFontName
uint16_t
aWeight
int16_t
aStretch
uint8_t
aStyle
const
uint8_t
*
aFontData
uint32_t
aLength
)
override
;
bool
FindAndAddFamilies
(
const
nsAString
&
aFamily
nsTArray
<
gfxFontFamily
*
>
*
aOutput
gfxFontStyle
*
aStyle
=
nullptr
gfxFloat
aDevToCssSize
=
1
.
0
)
override
;
bool
GetStandardFamilyName
(
const
nsAString
&
aFontName
nsAString
&
aFamilyName
)
override
;
FcConfig
*
GetLastConfig
(
)
const
{
return
mLastConfig
;
}
void
AddGenericFonts
(
mozilla
:
:
FontFamilyType
aGenericType
nsIAtom
*
aLanguage
nsTArray
<
gfxFontFamily
*
>
&
aFamilyList
)
override
;
void
ClearLangGroupPrefFonts
(
)
override
;
void
ClearGenericMappings
(
)
{
mGenericMappings
.
Clear
(
)
;
}
static
FT_Library
GetFTLibrary
(
)
;
protected
:
virtual
~
gfxFcPlatformFontList
(
)
;
void
AddFontSetFamilies
(
FcFontSet
*
aFontSet
bool
aAppFonts
)
;
PrefFontList
*
FindGenericFamilies
(
const
nsAString
&
aGeneric
nsIAtom
*
aLanguage
)
;
bool
PrefFontListsUseOnlyGenerics
(
)
;
static
void
CheckFontUpdates
(
nsITimer
*
aTimer
void
*
aThis
)
;
virtual
gfxFontFamily
*
GetDefaultFontForPlatform
(
const
gfxFontStyle
*
aStyle
)
override
;
#
ifdef
MOZ_BUNDLED_FONTS
void
ActivateBundledFonts
(
)
;
nsCString
mBundledFontsPath
;
bool
mBundledFontsInitialized
;
#
endif
nsBaseHashtable
<
nsStringHashKey
nsCountedRef
<
FcPattern
>
FcPattern
*
>
mLocalNames
;
nsClassHashtable
<
nsCStringHashKey
PrefFontList
>
mGenericMappings
;
nsDataHashtable
<
nsCStringHashKey
nsTArray
<
gfxFontFamily
*
>
>
mFcSubstituteCache
;
nsCOMPtr
<
nsITimer
>
mCheckFontUpdatesTimer
;
nsCountedRef
<
FcConfig
>
mLastConfig
;
bool
mAlwaysUseFontconfigGenerics
;
static
FT_Library
sCairoFTLibrary
;
}
;
#
endif
