#
ifndef
GFXFCPLATFORMFONTLIST_H_
#
define
GFXFCPLATFORMFONTLIST_H_
#
include
"
gfxFT2FontBase
.
h
"
#
include
"
gfxPlatformFontList
.
h
"
#
include
"
mozilla
/
FontPropertyTypes
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsAutoRef
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
<
fontconfig
/
fontconfig
.
h
>
#
include
"
ft2build
.
h
"
#
include
FT_FREETYPE_H
#
include
FT_TRUETYPE_TABLES_H
#
include
FT_MULTIPLE_MASTERS_H
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
XP_LINUX
)
#
include
"
mozilla
/
SandboxBroker
.
h
"
#
endif
namespace
mozilla
{
namespace
dom
{
class
SystemFontListEntry
;
}
;
}
;
template
<
>
class
nsAutoRefTraits
<
FcPattern
>
:
public
nsPointerRefTraits
<
FcPattern
>
{
public
:
static
void
Release
(
FcPattern
*
ptr
)
{
FcPatternDestroy
(
ptr
)
;
}
static
void
AddRef
(
FcPattern
*
ptr
)
{
FcPatternReference
(
ptr
)
;
}
}
;
template
<
>
class
nsAutoRefTraits
<
FcConfig
>
:
public
nsPointerRefTraits
<
FcConfig
>
{
public
:
static
void
Release
(
FcConfig
*
ptr
)
{
FcConfigDestroy
(
ptr
)
;
}
static
void
AddRef
(
FcConfig
*
ptr
)
{
FcConfigReference
(
ptr
)
;
}
}
;
class
gfxFontconfigFontEntry
final
:
public
gfxFT2FontEntryBase
{
friend
class
gfxFcPlatformFontList
;
public
:
explicit
gfxFontconfigFontEntry
(
const
nsACString
&
aFaceName
FcPattern
*
aFontPattern
bool
aIgnoreFcCharmap
)
;
explicit
gfxFontconfigFontEntry
(
const
nsACString
&
aFaceName
WeightRange
aWeight
StretchRange
aStretch
SlantStyleRange
aStyle
RefPtr
<
mozilla
:
:
gfx
:
:
SharedFTFace
>
&
&
aFace
)
;
explicit
gfxFontconfigFontEntry
(
const
nsACString
&
aFaceName
FcPattern
*
aFontPattern
WeightRange
aWeight
StretchRange
aStretch
SlantStyleRange
aStyle
)
;
gfxFontEntry
*
Clone
(
)
const
override
;
FcPattern
*
GetPattern
(
)
{
return
mFontPattern
;
}
nsresult
ReadCMAP
(
FontInfoData
*
aFontInfoData
=
nullptr
)
override
;
bool
TestCharacterMap
(
uint32_t
aCh
)
override
;
const
RefPtr
<
mozilla
:
:
gfx
:
:
SharedFTFace
>
&
GetFTFace
(
)
;
FTUserFontData
*
GetUserFontData
(
)
;
FT_MM_Var
*
GetMMVar
(
)
override
;
bool
HasVariations
(
)
override
;
void
GetVariationAxes
(
nsTArray
<
gfxFontVariationAxis
>
&
aAxes
)
override
;
void
GetVariationInstances
(
nsTArray
<
gfxFontVariationInstance
>
&
aInstances
)
override
;
hb_blob_t
*
GetFontTable
(
uint32_t
aTableTag
)
override
;
double
GetAspect
(
)
;
protected
:
virtual
~
gfxFontconfigFontEntry
(
)
;
gfxFont
*
CreateFontInstance
(
const
gfxFontStyle
*
aFontStyle
)
override
;
virtual
nsresult
CopyFontTable
(
uint32_t
aTableTag
nsTArray
<
uint8_t
>
&
aBuffer
)
override
;
nsCountedRef
<
FcPattern
>
mFontPattern
;
RefPtr
<
mozilla
:
:
gfx
:
:
SharedFTFace
>
mFTFace
;
bool
mFTFaceInitialized
;
bool
mIgnoreFcCharmap
;
bool
mHasVariations
;
bool
mHasVariationsInitialized
;
double
mAspect
;
class
UnscaledFontCache
{
public
:
already_AddRefed
<
mozilla
:
:
gfx
:
:
UnscaledFontFontconfig
>
Lookup
(
const
std
:
:
string
&
aFile
uint32_t
aIndex
)
;
void
Add
(
const
RefPtr
<
mozilla
:
:
gfx
:
:
UnscaledFontFontconfig
>
&
aUnscaledFont
)
{
mUnscaledFonts
[
kNumEntries
-
1
]
=
aUnscaledFont
;
MoveToFront
(
kNumEntries
-
1
)
;
}
private
:
void
MoveToFront
(
size_t
aIndex
)
;
static
const
size_t
kNumEntries
=
3
;
mozilla
:
:
ThreadSafeWeakPtr
<
mozilla
:
:
gfx
:
:
UnscaledFontFontconfig
>
mUnscaledFonts
[
kNumEntries
]
;
}
;
UnscaledFontCache
mUnscaledFontCache
;
FT_MM_Var
*
mMMVar
=
nullptr
;
bool
mMMVarInitialized
=
false
;
}
;
class
gfxFontconfigFontFamily
final
:
public
gfxFontFamily
{
public
:
gfxFontconfigFontFamily
(
const
nsACString
&
aName
FontVisibility
aVisibility
)
:
gfxFontFamily
(
aName
aVisibility
)
mContainsAppFonts
(
false
)
mHasNonScalableFaces
(
false
)
mForceScalable
(
false
)
{
}
template
<
typename
Func
>
void
AddFacesToFontList
(
Func
aAddPatternFunc
)
;
void
FindStyleVariations
(
FontInfoData
*
aFontInfoData
=
nullptr
)
override
;
void
AddFontPattern
(
FcPattern
*
aFontPattern
)
;
void
SetFamilyContainsAppFonts
(
bool
aContainsAppFonts
)
{
mContainsAppFonts
=
aContainsAppFonts
;
}
void
FindAllFontsForStyle
(
const
gfxFontStyle
&
aFontStyle
nsTArray
<
gfxFontEntry
*
>
&
aFontEntryList
bool
aIgnoreSizeTolerance
)
override
;
bool
FilterForFontList
(
nsAtom
*
aLangGroup
const
nsACString
&
aGeneric
)
const
final
{
return
SupportsLangGroup
(
aLangGroup
)
;
}
protected
:
virtual
~
gfxFontconfigFontFamily
(
)
;
bool
SupportsLangGroup
(
nsAtom
*
aLangGroup
)
const
;
nsTArray
<
nsCountedRef
<
FcPattern
>
>
mFontPatterns
;
bool
mContainsAppFonts
;
bool
mHasNonScalableFaces
;
bool
mForceScalable
;
}
;
class
gfxFontconfigFont
final
:
public
gfxFT2FontBase
{
public
:
gfxFontconfigFont
(
const
RefPtr
<
mozilla
:
:
gfx
:
:
UnscaledFontFontconfig
>
&
aUnscaledFont
RefPtr
<
mozilla
:
:
gfx
:
:
SharedFTFace
>
&
&
aFTFace
FcPattern
*
aPattern
gfxFloat
aAdjustedSize
gfxFontEntry
*
aFontEntry
const
gfxFontStyle
*
aFontStyle
int
aLoadFlags
bool
aEmbolden
)
;
FontType
GetType
(
)
const
override
{
return
FONT_TYPE_FONTCONFIG
;
}
FcPattern
*
GetPattern
(
)
const
{
return
mPattern
;
}
already_AddRefed
<
mozilla
:
:
gfx
:
:
ScaledFont
>
GetScaledFont
(
DrawTarget
*
aTarget
)
override
;
bool
ShouldHintMetrics
(
)
const
override
;
private
:
virtual
~
gfxFontconfigFont
(
)
;
nsCountedRef
<
FcPattern
>
mPattern
;
}
;
class
gfxFcPlatformFontList
final
:
public
gfxPlatformFontList
{
using
FontPatternListEntry
=
mozilla
:
:
dom
:
:
SystemFontListEntry
;
public
:
gfxFcPlatformFontList
(
)
;
static
gfxFcPlatformFontList
*
PlatformFontList
(
)
{
return
static_cast
<
gfxFcPlatformFontList
*
>
(
sPlatformFontList
)
;
}
nsresult
InitFontListForPlatform
(
)
override
;
void
InitSharedFontListForPlatform
(
)
override
;
void
GetFontList
(
nsAtom
*
aLangGroup
const
nsACString
&
aGenericFamily
nsTArray
<
nsString
>
&
aListOfFonts
)
override
;
void
ReadSystemFontList
(
nsTArray
<
FontPatternListEntry
>
*
retValue
)
;
gfxFontEntry
*
CreateFontEntry
(
mozilla
:
:
fontlist
:
:
Face
*
aFace
const
mozilla
:
:
fontlist
:
:
Family
*
aFamily
)
override
;
gfxFontEntry
*
LookupLocalFont
(
const
nsACString
&
aFontName
WeightRange
aWeightForEntry
StretchRange
aStretchForEntry
SlantStyleRange
aStyleForEntry
)
override
;
gfxFontEntry
*
MakePlatformFont
(
const
nsACString
&
aFontName
WeightRange
aWeightForEntry
StretchRange
aStretchForEntry
SlantStyleRange
aStyleForEntry
const
uint8_t
*
aFontData
uint32_t
aLength
)
override
;
bool
FindAndAddFamilies
(
mozilla
:
:
StyleGenericFontFamily
aGeneric
const
nsACString
&
aFamily
nsTArray
<
FamilyAndGeneric
>
*
aOutput
FindFamiliesFlags
aFlags
gfxFontStyle
*
aStyle
=
nullptr
gfxFloat
aDevToCssSize
=
1
.
0
)
override
;
bool
GetStandardFamilyName
(
const
nsCString
&
aFontName
nsACString
&
aFamilyName
)
override
;
FcConfig
*
GetLastConfig
(
)
const
{
return
mLastConfig
;
}
void
AddGenericFonts
(
mozilla
:
:
StyleGenericFontFamily
nsAtom
*
aLanguage
nsTArray
<
FamilyAndGeneric
>
&
aFamilyList
)
override
;
void
ClearLangGroupPrefFonts
(
)
override
;
void
ClearGenericMappings
(
)
{
mGenericMappings
.
Clear
(
)
;
}
void
GetSampleLangForGroup
(
nsAtom
*
aLanguage
nsACString
&
aLangStr
bool
aForFontEnumerationThread
=
false
)
;
protected
:
virtual
~
gfxFcPlatformFontList
(
)
;
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
XP_LINUX
)
typedef
mozilla
:
:
SandboxBroker
:
:
Policy
SandboxPolicy
;
#
else
struct
SandboxPolicy
{
}
;
#
endif
void
AddFontSetFamilies
(
FcFontSet
*
aFontSet
const
SandboxPolicy
*
aPolicy
bool
aAppFonts
)
;
void
AddPatternToFontList
(
FcPattern
*
aFont
FcChar8
*
&
aLastFamilyName
nsACString
&
aFamilyName
RefPtr
<
gfxFontconfigFontFamily
>
&
aFontFamily
bool
aAppFonts
)
;
PrefFontList
*
FindGenericFamilies
(
const
nsCString
&
aGeneric
nsAtom
*
aLanguage
)
;
bool
PrefFontListsUseOnlyGenerics
(
)
;
static
void
CheckFontUpdates
(
nsITimer
*
aTimer
void
*
aThis
)
;
FontFamily
GetDefaultFontForPlatform
(
const
gfxFontStyle
*
aStyle
)
override
;
enum
class
DistroID
:
int8_t
{
Unknown
=
0
Ubuntu
=
1
Fedora
=
2
}
;
DistroID
GetDistroID
(
)
const
;
FontVisibility
GetVisibilityForFamily
(
const
nsACString
&
aName
)
const
;
gfxFontFamily
*
CreateFontFamily
(
const
nsACString
&
aName
FontVisibility
aVisibility
)
const
override
;
bool
TryLangForGroup
(
const
nsACString
&
aOSLang
nsAtom
*
aLangGroup
nsACString
&
aLang
bool
aForFontEnumerationThread
)
;
#
ifdef
MOZ_BUNDLED_FONTS
void
ActivateBundledFonts
(
)
;
nsCString
mBundledFontsPath
;
bool
mBundledFontsInitialized
;
#
endif
nsBaseHashtable
<
nsCStringHashKey
nsCountedRef
<
FcPattern
>
FcPattern
*
>
mLocalNames
;
nsClassHashtable
<
nsCStringHashKey
PrefFontList
>
mGenericMappings
;
nsDataHashtable
<
nsCStringHashKey
CopyableTArray
<
FamilyAndGeneric
>
>
mFcSubstituteCache
;
nsCOMPtr
<
nsITimer
>
mCheckFontUpdatesTimer
;
nsCountedRef
<
FcConfig
>
mLastConfig
;
bool
mAlwaysUseFontconfigGenerics
;
static
FT_Library
sFTLibrary
;
}
;
#
endif
