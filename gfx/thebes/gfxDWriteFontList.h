#
ifndef
GFX_DWRITEFONTLIST_H
#
define
GFX_DWRITEFONTLIST_H
#
include
"
mozilla
/
FontPropertyTypes
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
gfxDWriteCommon
.
h
"
#
include
"
dwrite_3
.
h
"
#
if
!
defined
(
__MINGW32__
)
&
&
WINVER
<
0x0A00
#
include
"
mozilla
/
gfx
/
dw
-
extra
.
h
"
#
endif
#
include
"
gfxFont
.
h
"
#
include
"
gfxUserFontSet
.
h
"
#
include
"
cairo
-
win32
.
h
"
#
include
"
gfxPlatformFontList
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
<
algorithm
>
#
include
"
mozilla
/
gfx
/
UnscaledFontDWrite
.
h
"
class
gfxDWriteFontEntry
;
class
gfxDWriteFontFamily
:
public
gfxFontFamily
{
public
:
typedef
mozilla
:
:
FontStretch
FontStretch
;
typedef
mozilla
:
:
FontSlantStyle
FontSlantStyle
;
typedef
mozilla
:
:
FontWeight
FontWeight
;
gfxDWriteFontFamily
(
const
nsAString
&
aName
IDWriteFontFamily
*
aFamily
bool
aIsSystemFontFamily
=
false
)
:
gfxFontFamily
(
aName
)
mDWFamily
(
aFamily
)
mIsSystemFontFamily
(
aIsSystemFontFamily
)
mForceGDIClassic
(
false
)
{
}
virtual
~
gfxDWriteFontFamily
(
)
;
void
FindStyleVariations
(
FontInfoData
*
aFontInfoData
=
nullptr
)
final
;
void
LocalizedName
(
nsAString
&
aLocalizedName
)
final
;
void
ReadFaceNames
(
gfxPlatformFontList
*
aPlatformFontList
bool
aNeedFullnamePostscriptNames
FontInfoData
*
aFontInfoData
=
nullptr
)
final
;
void
SetForceGDIClassic
(
bool
aForce
)
{
mForceGDIClassic
=
aForce
;
}
void
AddSizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
FontListSizes
*
aSizes
)
const
final
;
void
AddSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
FontListSizes
*
aSizes
)
const
final
;
bool
FilterForFontList
(
nsAtom
*
aLangGroup
const
nsACString
&
aGeneric
)
const
final
{
return
!
IsSymbolFontFamily
(
)
;
}
protected
:
bool
IsSymbolFontFamily
(
)
const
;
RefPtr
<
IDWriteFontFamily
>
mDWFamily
;
bool
mIsSystemFontFamily
;
bool
mForceGDIClassic
;
}
;
class
gfxDWriteFontEntry
:
public
gfxFontEntry
{
public
:
gfxDWriteFontEntry
(
const
nsAString
&
aFaceName
IDWriteFont
*
aFont
bool
aIsSystemFont
=
false
)
:
gfxFontEntry
(
aFaceName
)
mFont
(
aFont
)
mFontFile
(
nullptr
)
mIsSystemFont
(
aIsSystemFont
)
mForceGDIClassic
(
false
)
mHasVariations
(
false
)
mHasVariationsInitialized
(
false
)
{
DWRITE_FONT_STYLE
dwriteStyle
=
aFont
-
>
GetStyle
(
)
;
FontSlantStyle
style
=
(
dwriteStyle
=
=
DWRITE_FONT_STYLE_ITALIC
?
FontSlantStyle
:
:
Italic
(
)
:
(
dwriteStyle
=
=
DWRITE_FONT_STYLE_OBLIQUE
?
FontSlantStyle
:
:
Oblique
(
)
:
FontSlantStyle
:
:
Normal
(
)
)
)
;
mStyleRange
=
SlantStyleRange
(
style
)
;
mStretchRange
=
StretchRange
(
FontStretchFromDWriteStretch
(
aFont
-
>
GetStretch
(
)
)
)
;
int
weight
=
NS_ROUNDUP
(
aFont
-
>
GetWeight
(
)
-
50
100
)
;
weight
=
mozilla
:
:
Clamp
(
weight
100
900
)
;
mWeightRange
=
WeightRange
(
FontWeight
(
weight
)
)
;
mIsCJK
=
UNINITIALIZED_VALUE
;
}
gfxDWriteFontEntry
(
const
nsAString
&
aFaceName
IDWriteFont
*
aFont
WeightRange
aWeight
StretchRange
aStretch
SlantStyleRange
aStyle
)
:
gfxFontEntry
(
aFaceName
)
mFont
(
aFont
)
mFontFile
(
nullptr
)
mIsSystemFont
(
false
)
mForceGDIClassic
(
false
)
mHasVariations
(
false
)
mHasVariationsInitialized
(
false
)
{
mWeightRange
=
aWeight
;
mStretchRange
=
aStretch
;
mStyleRange
=
aStyle
;
mIsLocalUserFont
=
true
;
mIsCJK
=
UNINITIALIZED_VALUE
;
}
gfxDWriteFontEntry
(
const
nsAString
&
aFaceName
IDWriteFontFile
*
aFontFile
IDWriteFontFileStream
*
aFontFileStream
WeightRange
aWeight
StretchRange
aStretch
SlantStyleRange
aStyle
)
:
gfxFontEntry
(
aFaceName
)
mFont
(
nullptr
)
mFontFile
(
aFontFile
)
mFontFileStream
(
aFontFileStream
)
mIsSystemFont
(
false
)
mForceGDIClassic
(
false
)
mHasVariations
(
false
)
mHasVariationsInitialized
(
false
)
{
mWeightRange
=
aWeight
;
mStretchRange
=
aStretch
;
mStyleRange
=
aStyle
;
mIsDataUserFont
=
true
;
mIsCJK
=
UNINITIALIZED_VALUE
;
}
gfxFontEntry
*
Clone
(
)
const
override
;
virtual
~
gfxDWriteFontEntry
(
)
;
virtual
hb_blob_t
*
GetFontTable
(
uint32_t
aTableTag
)
override
;
nsresult
ReadCMAP
(
FontInfoData
*
aFontInfoData
=
nullptr
)
;
bool
IsCJKFont
(
)
;
bool
HasVariations
(
)
override
;
void
GetVariationAxes
(
nsTArray
<
gfxFontVariationAxis
>
&
aAxes
)
override
;
void
GetVariationInstances
(
nsTArray
<
gfxFontVariationInstance
>
&
aInstances
)
override
;
void
SetForceGDIClassic
(
bool
aForce
)
{
mForceGDIClassic
=
aForce
;
}
bool
GetForceGDIClassic
(
)
{
return
mForceGDIClassic
;
}
virtual
void
AddSizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
FontListSizes
*
aSizes
)
const
;
virtual
void
AddSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
FontListSizes
*
aSizes
)
const
;
protected
:
friend
class
gfxDWriteFont
;
friend
class
gfxDWriteFontList
;
virtual
nsresult
CopyFontTable
(
uint32_t
aTableTag
nsTArray
<
uint8_t
>
&
aBuffer
)
override
;
virtual
gfxFont
*
CreateFontInstance
(
const
gfxFontStyle
*
aFontStyle
)
;
nsresult
CreateFontFace
(
IDWriteFontFace
*
*
aFontFace
const
gfxFontStyle
*
aFontStyle
=
nullptr
DWRITE_FONT_SIMULATIONS
aSimulations
=
DWRITE_FONT_SIMULATIONS_NONE
)
;
static
bool
InitLogFont
(
IDWriteFont
*
aFont
LOGFONTW
*
aLogFont
)
;
RefPtr
<
IDWriteFont
>
mFont
;
RefPtr
<
IDWriteFontFile
>
mFontFile
;
RefPtr
<
IDWriteFontFileStream
>
mFontFileStream
;
RefPtr
<
IDWriteFontFace
>
mFontFace
;
RefPtr
<
IDWriteFontFace5
>
mFontFace5
;
DWRITE_FONT_FACE_TYPE
mFaceType
;
int8_t
mIsCJK
;
bool
mIsSystemFont
;
bool
mForceGDIClassic
;
bool
mHasVariations
;
bool
mHasVariationsInitialized
;
mozilla
:
:
ThreadSafeWeakPtr
<
mozilla
:
:
gfx
:
:
UnscaledFontDWrite
>
mUnscaledFont
;
mozilla
:
:
ThreadSafeWeakPtr
<
mozilla
:
:
gfx
:
:
UnscaledFontDWrite
>
mUnscaledFontBold
;
}
;
class
DWriteFontFallbackRenderer
final
:
public
IDWriteTextRenderer
{
public
:
explicit
DWriteFontFallbackRenderer
(
IDWriteFactory
*
aFactory
)
:
mRefCount
(
0
)
{
HRESULT
hr
=
S_OK
;
hr
=
aFactory
-
>
GetSystemFontCollection
(
getter_AddRefs
(
mSystemFonts
)
)
;
NS_ASSERTION
(
SUCCEEDED
(
hr
)
"
GetSystemFontCollection
failed
!
"
)
;
}
~
DWriteFontFallbackRenderer
(
)
{
}
IFACEMETHOD
(
DrawGlyphRun
)
(
void
*
clientDrawingContext
FLOAT
baselineOriginX
FLOAT
baselineOriginY
DWRITE_MEASURING_MODE
measuringMode
DWRITE_GLYPH_RUN
const
*
glyphRun
DWRITE_GLYPH_RUN_DESCRIPTION
const
*
glyphRunDescription
IUnknown
*
clientDrawingEffect
)
;
IFACEMETHOD
(
DrawUnderline
)
(
void
*
clientDrawingContext
FLOAT
baselineOriginX
FLOAT
baselineOriginY
DWRITE_UNDERLINE
const
*
underline
IUnknown
*
clientDrawingEffect
)
{
return
E_NOTIMPL
;
}
IFACEMETHOD
(
DrawStrikethrough
)
(
void
*
clientDrawingContext
FLOAT
baselineOriginX
FLOAT
baselineOriginY
DWRITE_STRIKETHROUGH
const
*
strikethrough
IUnknown
*
clientDrawingEffect
)
{
return
E_NOTIMPL
;
}
IFACEMETHOD
(
DrawInlineObject
)
(
void
*
clientDrawingContext
FLOAT
originX
FLOAT
originY
IDWriteInlineObject
*
inlineObject
BOOL
isSideways
BOOL
isRightToLeft
IUnknown
*
clientDrawingEffect
)
{
return
E_NOTIMPL
;
}
IFACEMETHOD
(
IsPixelSnappingDisabled
)
(
void
*
clientDrawingContext
BOOL
*
isDisabled
)
{
*
isDisabled
=
FALSE
;
return
S_OK
;
}
IFACEMETHOD
(
GetCurrentTransform
)
(
void
*
clientDrawingContext
DWRITE_MATRIX
*
transform
)
{
const
DWRITE_MATRIX
ident
=
{
1
.
0
0
.
0
0
.
0
1
.
0
0
.
0
0
.
0
}
;
*
transform
=
ident
;
return
S_OK
;
}
IFACEMETHOD
(
GetPixelsPerDip
)
(
void
*
clientDrawingContext
FLOAT
*
pixelsPerDip
)
{
*
pixelsPerDip
=
1
.
0f
;
return
S_OK
;
}
IFACEMETHOD_
(
unsigned
long
AddRef
)
(
)
{
return
InterlockedIncrement
(
&
mRefCount
)
;
}
IFACEMETHOD_
(
unsigned
long
Release
)
(
)
{
unsigned
long
newCount
=
InterlockedDecrement
(
&
mRefCount
)
;
if
(
newCount
=
=
0
)
{
delete
this
;
return
0
;
}
return
newCount
;
}
IFACEMETHOD
(
QueryInterface
)
(
IID
const
&
riid
void
*
*
ppvObject
)
{
if
(
__uuidof
(
IDWriteTextRenderer
)
=
=
riid
)
{
*
ppvObject
=
this
;
}
else
if
(
__uuidof
(
IDWritePixelSnapping
)
=
=
riid
)
{
*
ppvObject
=
this
;
}
else
if
(
__uuidof
(
IUnknown
)
=
=
riid
)
{
*
ppvObject
=
this
;
}
else
{
*
ppvObject
=
nullptr
;
return
E_FAIL
;
}
this
-
>
AddRef
(
)
;
return
S_OK
;
}
const
nsString
&
FallbackFamilyName
(
)
{
return
mFamilyName
;
}
protected
:
long
mRefCount
;
RefPtr
<
IDWriteFontCollection
>
mSystemFonts
;
nsString
mFamilyName
;
}
;
class
gfxDWriteFontList
:
public
gfxPlatformFontList
{
public
:
gfxDWriteFontList
(
)
;
static
gfxDWriteFontList
*
PlatformFontList
(
)
{
return
static_cast
<
gfxDWriteFontList
*
>
(
sPlatformFontList
)
;
}
virtual
nsresult
InitFontListForPlatform
(
)
override
;
gfxFontFamily
*
CreateFontFamily
(
const
nsAString
&
aName
)
const
override
;
virtual
gfxFontEntry
*
LookupLocalFont
(
const
nsAString
&
aFontName
WeightRange
aWeightForEntry
StretchRange
aStretchForEntry
SlantStyleRange
aStyleForEntry
)
;
virtual
gfxFontEntry
*
MakePlatformFont
(
const
nsAString
&
aFontName
WeightRange
aWeightForEntry
StretchRange
aStretchForEntry
SlantStyleRange
aStyleForEntry
const
uint8_t
*
aFontData
uint32_t
aLength
)
;
bool
GetStandardFamilyName
(
const
nsAString
&
aFontName
nsAString
&
aFamilyName
)
;
IDWriteGdiInterop
*
GetGDIInterop
(
)
{
return
mGDIInterop
;
}
bool
UseGDIFontTableAccess
(
)
{
return
mGDIFontTableAccess
;
}
bool
FindAndAddFamilies
(
const
nsAString
&
aFamily
nsTArray
<
gfxFontFamily
*
>
*
aOutput
FindFamiliesFlags
aFlags
gfxFontStyle
*
aStyle
=
nullptr
gfxFloat
aDevToCssSize
=
1
.
0
)
override
;
gfxFloat
GetForceGDIClassicMaxFontSize
(
)
{
return
mForceGDIClassicMaxFontSize
;
}
virtual
void
AddSizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
FontListSizes
*
aSizes
)
const
;
virtual
void
AddSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
FontListSizes
*
aSizes
)
const
;
protected
:
virtual
gfxFontFamily
*
GetDefaultFontForPlatform
(
const
gfxFontStyle
*
aStyle
)
override
;
gfxFontEntry
*
PlatformGlobalFontFallback
(
const
uint32_t
aCh
Script
aRunScript
const
gfxFontStyle
*
aMatchStyle
gfxFontFamily
*
*
aMatchedFamily
)
override
;
private
:
friend
class
gfxDWriteFontFamily
;
nsresult
GetFontSubstitutes
(
)
;
void
GetDirectWriteSubstitutes
(
)
;
virtual
bool
UsesSystemFallback
(
)
{
return
true
;
}
void
GetFontsFromCollection
(
IDWriteFontCollection
*
aCollection
)
;
#
ifdef
MOZ_BUNDLED_FONTS
already_AddRefed
<
IDWriteFontCollection
>
CreateBundledFontsCollection
(
IDWriteFactory
*
aFactory
)
;
#
endif
nsTArray
<
nsString
>
mNonExistingFonts
;
FontFamilyTable
mFontSubstitutes
;
virtual
already_AddRefed
<
FontInfoData
>
CreateFontInfoData
(
)
;
gfxFloat
mForceGDIClassicMaxFontSize
;
bool
mGDIFontTableAccess
;
RefPtr
<
IDWriteGdiInterop
>
mGDIInterop
;
RefPtr
<
DWriteFontFallbackRenderer
>
mFallbackRenderer
;
RefPtr
<
IDWriteTextFormat
>
mFallbackFormat
;
RefPtr
<
IDWriteFontCollection
>
mSystemFonts
;
#
ifdef
MOZ_BUNDLED_FONTS
RefPtr
<
IDWriteFontCollection
>
mBundledFonts
;
#
endif
}
;
#
endif
