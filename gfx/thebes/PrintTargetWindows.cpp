#
include
"
PrintTargetWindows
.
h
"
#
include
"
cairo
-
win32
.
h
"
#
include
"
mozilla
/
gfx
/
HelpersCairo
.
h
"
#
include
"
mozilla
/
StaticPrefs_browser
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsIContentAnalysis
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
namespace
gfx
{
PrintTargetWindows
:
:
PrintTargetWindows
(
cairo_surface_t
*
aCairoSurface
const
IntSize
&
aSize
HDC
aDC
)
:
PrintTarget
(
aCairoSurface
aSize
)
mDC
(
aDC
)
{
}
already_AddRefed
<
PrintTargetWindows
>
PrintTargetWindows
:
:
CreateOrNull
(
HDC
aDC
)
{
int32_t
heightDPI
=
:
:
GetDeviceCaps
(
aDC
LOGPIXELSY
)
;
float
width
=
(
:
:
GetDeviceCaps
(
aDC
PHYSICALWIDTH
)
*
POINTS_PER_INCH_FLOAT
)
/
heightDPI
;
float
height
=
(
:
:
GetDeviceCaps
(
aDC
PHYSICALHEIGHT
)
*
POINTS_PER_INCH_FLOAT
)
/
heightDPI
;
IntSize
size
=
IntSize
:
:
Truncate
(
width
height
)
;
if
(
!
Factory
:
:
CheckSurfaceSize
(
size
)
)
{
return
nullptr
;
}
cairo_surface_t
*
surface
=
cairo_win32_printing_surface_create
(
aDC
)
;
if
(
cairo_surface_status
(
surface
)
)
{
return
nullptr
;
}
RefPtr
<
PrintTargetWindows
>
target
=
new
PrintTargetWindows
(
surface
size
aDC
)
;
return
target
.
forget
(
)
;
}
nsresult
PrintTargetWindows
:
:
BeginPrinting
(
const
nsAString
&
aTitle
const
nsAString
&
aPrintToFileName
int32_t
aStartPage
int32_t
aEndPage
)
{
const
uint32_t
DOC_TITLE_LENGTH
=
MAX_PATH
-
1
;
DOCINFOW
docinfo
;
nsString
titleStr
(
aTitle
)
;
if
(
titleStr
.
Length
(
)
>
DOC_TITLE_LENGTH
)
{
titleStr
.
SetLength
(
DOC_TITLE_LENGTH
-
3
)
;
titleStr
.
AppendLiteral
(
"
.
.
.
"
)
;
}
nsString
docName
(
aPrintToFileName
)
;
docinfo
.
cbSize
=
sizeof
(
docinfo
)
;
docinfo
.
lpszDocName
=
titleStr
.
Length
(
)
>
0
?
titleStr
.
get
(
)
:
L
"
Mozilla
Document
"
;
docinfo
.
lpszOutput
=
docName
.
Length
(
)
>
0
?
docName
.
get
(
)
:
nullptr
;
docinfo
.
lpszDatatype
=
nullptr
;
docinfo
.
fwType
=
0
;
bool
lockSfw
=
StaticPrefs
:
:
browser_contentanalysis_windows_lock_foreground_window_on_print
(
)
&
&
nsIContentAnalysis
:
:
MightBeActive
(
)
;
if
(
lockSfw
)
{
:
:
LockSetForegroundWindow
(
LSFW_LOCK
)
;
}
int
result
=
:
:
StartDocW
(
mDC
&
docinfo
)
;
if
(
lockSfw
)
{
:
:
LockSetForegroundWindow
(
LSFW_UNLOCK
)
;
}
if
(
result
<
=
0
)
{
if
(
:
:
GetLastError
(
)
=
=
ERROR_CANCELLED
)
{
return
NS_ERROR_ABORT
;
}
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
nsresult
PrintTargetWindows
:
:
EndPrinting
(
)
{
int
result
=
:
:
EndDoc
(
mDC
)
;
return
(
result
<
=
0
)
?
NS_ERROR_FAILURE
:
NS_OK
;
}
nsresult
PrintTargetWindows
:
:
AbortPrinting
(
)
{
PrintTarget
:
:
AbortPrinting
(
)
;
int
result
=
:
:
AbortDoc
(
mDC
)
;
return
(
result
<
=
0
)
?
NS_ERROR_FAILURE
:
NS_OK
;
}
nsresult
PrintTargetWindows
:
:
BeginPage
(
const
IntSize
&
aSizeInPoints
)
{
MOZ_ALWAYS_SUCCEEDS
(
PrintTarget
:
:
BeginPage
(
aSizeInPoints
)
)
;
int
result
=
:
:
StartPage
(
mDC
)
;
return
(
result
<
=
0
)
?
NS_ERROR_FAILURE
:
NS_OK
;
}
nsresult
PrintTargetWindows
:
:
EndPage
(
)
{
cairo_surface_show_page
(
mCairoSurface
)
;
bool
cairoFailure
=
cairo_surface_status
(
mCairoSurface
)
;
MOZ_ALWAYS_SUCCEEDS
(
PrintTarget
:
:
EndPage
(
)
)
;
int
result
=
:
:
EndPage
(
mDC
)
;
return
(
result
<
=
0
|
|
cairoFailure
)
?
NS_ERROR_FAILURE
:
NS_OK
;
}
}
}
