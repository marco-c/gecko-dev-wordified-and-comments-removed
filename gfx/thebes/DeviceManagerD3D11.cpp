#
include
"
DeviceManagerD3D11
.
h
"
#
include
"
gfxWindowsPlatform
.
h
"
#
include
<
d3d11
.
h
>
namespace
mozilla
{
namespace
gfx
{
StaticAutoPtr
<
DeviceManagerD3D11
>
DeviceManagerD3D11
:
:
sInstance
;
void
DeviceManagerD3D11
:
:
Init
(
)
{
sInstance
=
new
DeviceManagerD3D11
(
)
;
}
void
DeviceManagerD3D11
:
:
Shutdown
(
)
{
sInstance
=
nullptr
;
}
RefPtr
<
ID3D11Device
>
DeviceManagerD3D11
:
:
GetCompositorDevice
(
)
{
RefPtr
<
ID3D11Device
>
device
;
if
(
!
gfxWindowsPlatform
:
:
GetPlatform
(
)
-
>
GetD3D11Device
(
&
device
)
)
return
nullptr
;
return
device
;
}
RefPtr
<
ID3D11Device
>
DeviceManagerD3D11
:
:
GetImageBridgeDevice
(
)
{
RefPtr
<
ID3D11Device
>
device
;
if
(
!
gfxWindowsPlatform
:
:
GetPlatform
(
)
-
>
GetD3D11ImageBridgeDevice
(
&
device
)
)
{
return
nullptr
;
}
return
device
;
}
RefPtr
<
ID3D11Device
>
DeviceManagerD3D11
:
:
GetContentDevice
(
)
{
return
gfxWindowsPlatform
:
:
GetPlatform
(
)
-
>
GetD3D11ContentDevice
(
)
;
}
RefPtr
<
ID3D11Device
>
DeviceManagerD3D11
:
:
GetDeviceForCurrentThread
(
)
{
RefPtr
<
ID3D11Device
>
device
;
if
(
!
gfxWindowsPlatform
:
:
GetPlatform
(
)
-
>
GetD3D11DeviceForCurrentThread
(
&
device
)
)
{
return
nullptr
;
}
return
device
;
}
RefPtr
<
ID3D11Device
>
DeviceManagerD3D11
:
:
CreateDecoderDevice
(
)
{
return
gfxWindowsPlatform
:
:
GetPlatform
(
)
-
>
CreateD3D11DecoderDevice
(
)
;
}
unsigned
DeviceManagerD3D11
:
:
GetD3D11Version
(
)
const
{
return
gfxWindowsPlatform
:
:
GetPlatform
(
)
-
>
GetD3D11Version
(
)
;
}
bool
DeviceManagerD3D11
:
:
TextureSharingWorks
(
)
const
{
return
gfxWindowsPlatform
:
:
GetPlatform
(
)
-
>
CompositorD3D11TextureSharingWorks
(
)
;
}
bool
DeviceManagerD3D11
:
:
IsWARP
(
)
const
{
return
gfxWindowsPlatform
:
:
GetPlatform
(
)
-
>
IsWARP
(
)
;
}
}
}
