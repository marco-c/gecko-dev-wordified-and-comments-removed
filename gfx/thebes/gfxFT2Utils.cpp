#
include
"
gfxFT2FontBase
.
h
"
#
include
"
gfxFT2Utils
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
ifdef
HAVE_FONTCONFIG_FCFREETYPE_H
#
include
<
fontconfig
/
fcfreetype
.
h
>
#
endif
#
include
"
prlink
.
h
"
uint32_t
gfxFT2LockedFace
:
:
GetGlyph
(
uint32_t
aCharCode
)
{
if
(
MOZ_UNLIKELY
(
!
mFace
)
)
return
0
;
#
ifdef
HAVE_FONTCONFIG_FCFREETYPE_H
if
(
!
mFace
-
>
charmap
|
|
mFace
-
>
charmap
-
>
encoding
!
=
FT_ENCODING_UNICODE
)
{
FT_Select_Charmap
(
mFace
FT_ENCODING_UNICODE
)
;
}
return
FcFreeTypeCharIndex
(
mFace
aCharCode
)
;
#
else
return
FT_Get_Char_Index
(
mFace
aCharCode
)
;
#
endif
}
typedef
FT_UInt
(
*
GetCharVariantFunction
)
(
FT_Face
face
FT_ULong
charcode
FT_ULong
variantSelector
)
;
uint32_t
gfxFT2LockedFace
:
:
GetUVSGlyph
(
uint32_t
aCharCode
uint32_t
aVariantSelector
)
{
NS_PRECONDITION
(
aVariantSelector
"
aVariantSelector
should
not
be
NULL
"
)
;
if
(
MOZ_UNLIKELY
(
!
mFace
)
)
return
0
;
static
CharVariantFunction
sGetCharVariantPtr
=
FindCharVariantFunction
(
)
;
if
(
!
sGetCharVariantPtr
)
return
0
;
#
ifdef
HAVE_FONTCONFIG_FCFREETYPE_H
if
(
!
mFace
-
>
charmap
|
|
mFace
-
>
charmap
-
>
encoding
!
=
FT_ENCODING_UNICODE
)
{
FT_Select_Charmap
(
mFace
FT_ENCODING_UNICODE
)
;
}
#
endif
return
(
*
sGetCharVariantPtr
)
(
mFace
aCharCode
aVariantSelector
)
;
}
gfxFT2LockedFace
:
:
CharVariantFunction
gfxFT2LockedFace
:
:
FindCharVariantFunction
(
)
{
PRLibrary
*
lib
=
nullptr
;
CharVariantFunction
function
=
reinterpret_cast
<
CharVariantFunction
>
(
PR_FindFunctionSymbolAndLibrary
(
"
FT_Face_GetCharVariantIndex
"
&
lib
)
)
;
if
(
!
lib
)
{
return
nullptr
;
}
FT_Int
major
;
FT_Int
minor
;
FT_Int
patch
;
FT_Library_Version
(
mFace
-
>
glyph
-
>
library
&
major
&
minor
&
patch
)
;
if
(
major
=
=
2
&
&
minor
=
=
4
&
&
patch
<
4
&
&
PR_FindFunctionSymbol
(
lib
"
FT_Alloc
"
)
)
{
function
=
nullptr
;
}
PR_UnloadLibrary
(
lib
)
;
return
function
;
}
