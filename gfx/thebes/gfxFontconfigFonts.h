#
ifndef
GFX_FONTCONFIG_FONTS_H
#
define
GFX_FONTCONFIG_FONTS_H
#
include
"
cairo
.
h
"
#
include
"
gfxTypes
.
h
"
#
include
"
gfxTextRun
.
h
"
#
include
"
nsAutoRef
.
h
"
#
include
"
nsTArray
.
h
"
#
include
<
pango
/
pango
.
h
>
class
gfxFcFontSet
;
class
gfxFcFont
;
typedef
struct
_FcPattern
FcPattern
;
typedef
struct
FT_FaceRec_
*
FT_Face
;
typedef
struct
FT_LibraryRec_
*
FT_Library
;
class
gfxPangoFontGroup
:
public
gfxFontGroup
{
public
:
gfxPangoFontGroup
(
const
mozilla
:
:
FontFamilyList
&
aFontFamilyList
const
gfxFontStyle
*
aStyle
gfxUserFontSet
*
aUserFontSet
gfxFloat
aDevToCssSize
)
;
virtual
~
gfxPangoFontGroup
(
)
;
virtual
gfxFontGroup
*
Copy
(
const
gfxFontStyle
*
aStyle
)
;
virtual
gfxFont
*
GetFirstValidFont
(
uint32_t
aCh
=
0x20
)
;
virtual
void
UpdateUserFonts
(
)
;
virtual
already_AddRefed
<
gfxFont
>
FindFontForChar
(
uint32_t
aCh
uint32_t
aPrevCh
uint32_t
aNextCh
Script
aRunScript
gfxFont
*
aPrevMatchedFont
uint8_t
*
aMatchType
)
;
static
void
Shutdown
(
)
;
static
gfxFontEntry
*
NewFontEntry
(
const
nsAString
&
aFontName
uint16_t
aWeight
int16_t
aStretch
uint8_t
aStyle
)
;
static
gfxFontEntry
*
NewFontEntry
(
const
nsAString
&
aFontName
uint16_t
aWeight
int16_t
aStretch
uint8_t
aStyle
const
uint8_t
*
aFontData
uint32_t
aLength
)
;
private
:
virtual
gfxFont
*
GetFontAt
(
int32_t
i
uint32_t
aCh
=
0x20
)
;
gfxFcFontSet
*
GetFontSet
(
PangoLanguage
*
aLang
=
nullptr
)
;
class
FontSetByLangEntry
{
public
:
FontSetByLangEntry
(
PangoLanguage
*
aLang
gfxFcFontSet
*
aFontSet
)
;
PangoLanguage
*
mLang
;
RefPtr
<
gfxFcFontSet
>
mFontSet
;
}
;
AutoTArray
<
FontSetByLangEntry
1
>
mFontSets
;
gfxFloat
mSizeAdjustFactor
;
PangoLanguage
*
mPangoLanguage
;
already_AddRefed
<
gfxFcFontSet
>
MakeFontSet
(
PangoLanguage
*
aLang
gfxFloat
aSizeAdjustFactor
nsAutoRef
<
FcPattern
>
*
aMatchPattern
=
nullptr
)
;
gfxFcFontSet
*
GetBaseFontSet
(
)
;
gfxFcFont
*
GetBaseFont
(
)
;
gfxFloat
GetSizeAdjustFactor
(
)
{
if
(
mFontSets
.
Length
(
)
=
=
0
)
GetBaseFontSet
(
)
;
return
mSizeAdjustFactor
;
}
void
EnumerateFontListPFG
(
nsIAtom
*
aLanguage
void
*
aClosure
)
;
void
FindGenericFontsPFG
(
mozilla
:
:
FontFamilyType
aGenericType
nsIAtom
*
aLanguage
void
*
aClosure
)
;
void
FindPlatformFontPFG
(
const
nsAString
&
aName
bool
aUseFontSet
void
*
aClosure
)
;
static
void
ResolveGenericFontNamesPFG
(
mozilla
:
:
FontFamilyType
aGenericType
nsIAtom
*
aLanguage
nsTArray
<
nsString
>
&
aGenericFamilies
)
;
friend
class
gfxSystemFcFontEntry
;
static
FT_Library
GetFTLibrary
(
)
;
}
;
#
endif
