#
ifndef
GFX_GDIFONT_H
#
define
GFX_GDIFONT_H
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
gfxFont
.
h
"
#
include
"
gfxGDIFontList
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
usp10
.
h
"
class
gfxGDIFont
final
:
public
gfxFont
{
public
:
gfxGDIFont
(
GDIFontEntry
*
aFontEntry
const
gfxFontStyle
*
aFontStyle
AntialiasOption
anAAOption
=
kAntialiasDefault
)
;
HFONT
GetHFONT
(
)
const
{
return
mFont
;
}
already_AddRefed
<
mozilla
:
:
gfx
:
:
ScaledFont
>
GetScaledFont
(
const
TextRunDrawParams
&
aRunParams
)
override
;
RunMetrics
Measure
(
const
gfxTextRun
*
aTextRun
uint32_t
aStart
uint32_t
aEnd
BoundingBoxType
aBoundingBoxType
DrawTarget
*
aDrawTargetForTightBoundingBox
Spacing
*
aSpacing
mozilla
:
:
gfx
:
:
ShapedTextFlags
aOrientation
)
override
;
gfxFont
*
CopyWithAntialiasOption
(
AntialiasOption
anAAOption
)
const
override
;
bool
ProvidesGetGlyph
(
)
const
override
{
return
!
mFontEntry
-
>
HasCmapTable
(
)
;
}
uint32_t
GetGlyph
(
uint32_t
aUnicode
uint32_t
aVarSelector
)
override
;
bool
ProvidesGlyphWidths
(
)
const
override
{
return
true
;
}
int32_t
GetGlyphWidth
(
uint16_t
aGID
)
override
;
bool
GetGlyphBounds
(
uint16_t
aGID
gfxRect
*
aBounds
bool
aTight
)
const
override
;
void
AddSizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
FontCacheSizes
*
aSizes
)
const
;
void
AddSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
FontCacheSizes
*
aSizes
)
const
;
FontType
GetType
(
)
const
override
{
return
FONT_TYPE_GDI
;
}
protected
:
~
gfxGDIFont
(
)
override
;
const
Metrics
&
GetHorizontalMetrics
(
)
const
override
{
return
*
mMetrics
;
}
bool
ShapeText
(
DrawTarget
*
aDrawTarget
const
char16_t
*
aText
uint32_t
aOffset
uint32_t
aLength
Script
aScript
nsAtom
*
aLanguage
bool
aVertical
RoundingFlags
aRounding
gfxShapedText
*
aShapedText
)
override
;
void
Initialize
(
)
;
void
FillLogFont
(
LOGFONTW
&
aLogFont
gfxFloat
aSize
)
;
HFONT
mFont
;
Metrics
*
mMetrics
;
bool
mIsBitmap
;
bool
mNeedsSyntheticBold
;
mozilla
:
:
UniquePtr
<
nsTHashMap
<
nsUint32HashKey
uint32_t
>
>
mGlyphIDs
;
SCRIPT_CACHE
mScriptCache
;
mozilla
:
:
UniquePtr
<
nsTHashMap
<
nsUint32HashKey
int32_t
>
>
mGlyphWidths
;
}
;
#
endif
