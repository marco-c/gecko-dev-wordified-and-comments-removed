#
ifndef
MOZILLA_GFX_PRINTTARGETSKPDF_H
#
define
MOZILLA_GFX_PRINTTARGETSKPDF_H
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
PrintTarget
.
h
"
#
include
"
SkCanvas
.
h
"
#
include
"
SkDocument
.
h
"
#
include
"
SkStream
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
PrintTargetSkPDF
final
:
public
PrintTarget
{
public
:
static
already_AddRefed
<
PrintTargetSkPDF
>
CreateOrNull
(
UniquePtr
<
SkWStream
>
aStream
const
IntSize
&
aSizeInPoints
)
;
virtual
nsresult
BeginPrinting
(
const
nsAString
&
aTitle
const
nsAString
&
aPrintToFileName
int32_t
aStartPage
int32_t
aEndPage
)
override
;
virtual
nsresult
EndPrinting
(
)
override
;
virtual
void
Finish
(
)
override
;
virtual
nsresult
BeginPage
(
)
override
;
virtual
nsresult
EndPage
(
)
override
;
virtual
already_AddRefed
<
DrawTarget
>
MakeDrawTarget
(
const
IntSize
&
aSize
DrawEventRecorder
*
aRecorder
=
nullptr
)
final
;
virtual
already_AddRefed
<
DrawTarget
>
GetReferenceDrawTarget
(
DrawEventRecorder
*
aRecorder
)
override
final
;
private
:
PrintTargetSkPDF
(
const
IntSize
&
aSize
UniquePtr
<
SkWStream
>
aStream
)
;
virtual
~
PrintTargetSkPDF
(
)
;
sk_sp
<
SkDocument
>
mPDFDoc
;
UniquePtr
<
SkWStream
>
mOStream
;
sk_sp
<
SkCanvas
>
mPageCanvas
;
RefPtr
<
DrawTarget
>
mPageDT
;
sk_sp
<
SkDocument
>
mRefPDFDoc
;
sk_sp
<
SkCanvas
>
mRefCanvas
;
SkDynamicMemoryWStream
mRefOStream
;
}
;
}
}
#
endif
