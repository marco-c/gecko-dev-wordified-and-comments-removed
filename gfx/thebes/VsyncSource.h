#
ifndef
GFX_VSYNCSOURCE_H
#
define
GFX_VSYNCSOURCE_H
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
namespace
mozilla
{
class
RefreshTimerVsyncDispatcher
;
class
CompositorVsyncDispatcher
;
class
VsyncIdType
{
}
;
typedef
layers
:
:
BaseTransactionId
<
VsyncIdType
>
VsyncId
;
namespace
layout
{
class
PVsyncChild
;
}
namespace
gfx
{
class
PVsyncBridgeParent
;
class
VsyncSource
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VsyncSource
)
typedef
mozilla
:
:
RefreshTimerVsyncDispatcher
RefreshTimerVsyncDispatcher
;
typedef
mozilla
:
:
CompositorVsyncDispatcher
CompositorVsyncDispatcher
;
public
:
class
Display
{
public
:
Display
(
)
;
virtual
~
Display
(
)
;
virtual
void
NotifyVsync
(
TimeStamp
aVsyncTimestamp
)
;
RefPtr
<
RefreshTimerVsyncDispatcher
>
GetRefreshTimerVsyncDispatcher
(
)
;
void
AddCompositorVsyncDispatcher
(
CompositorVsyncDispatcher
*
aCompositorVsyncDispatcher
)
;
void
RemoveCompositorVsyncDispatcher
(
CompositorVsyncDispatcher
*
aCompositorVsyncDispatcher
)
;
void
MoveListenersToNewSource
(
VsyncSource
:
:
Display
&
aNewDisplay
)
;
void
NotifyRefreshTimerVsyncStatus
(
bool
aEnable
)
;
virtual
TimeDuration
GetVsyncRate
(
)
;
virtual
void
EnableVsync
(
)
=
0
;
virtual
void
DisableVsync
(
)
=
0
;
virtual
bool
IsVsyncEnabled
(
)
=
0
;
virtual
void
Shutdown
(
)
=
0
;
private
:
void
UpdateVsyncStatus
(
)
;
Mutex
mDispatcherLock
;
bool
mRefreshTimerNeedsVsync
;
nsTArray
<
RefPtr
<
CompositorVsyncDispatcher
>
>
mCompositorVsyncDispatchers
;
RefPtr
<
RefreshTimerVsyncDispatcher
>
mRefreshTimerVsyncDispatcher
;
VsyncId
mVsyncId
;
}
;
void
AddCompositorVsyncDispatcher
(
CompositorVsyncDispatcher
*
aCompositorVsyncDispatcher
)
;
void
RemoveCompositorVsyncDispatcher
(
CompositorVsyncDispatcher
*
aCompositorVsyncDispatcher
)
;
void
MoveListenersToNewSource
(
VsyncSource
*
aNewSource
)
;
RefPtr
<
RefreshTimerVsyncDispatcher
>
GetRefreshTimerVsyncDispatcher
(
)
;
virtual
Display
&
GetGlobalDisplay
(
)
=
0
;
void
Shutdown
(
)
;
protected
:
virtual
~
VsyncSource
(
)
=
default
;
}
;
}
namespace
recordreplay
{
namespace
child
{
void
NotifyVsyncObserver
(
)
;
}
}
struct
VsyncEvent
{
VsyncId
mId
;
TimeStamp
mTime
;
private
:
VsyncEvent
(
const
VsyncId
&
aId
const
TimeStamp
&
aTime
)
:
mId
(
aId
)
mTime
(
aTime
)
{
}
VsyncEvent
(
)
{
}
friend
class
gfx
:
:
VsyncSource
:
:
Display
;
friend
class
gfx
:
:
PVsyncBridgeParent
;
friend
class
layout
:
:
PVsyncChild
;
friend
void
recordreplay
:
:
child
:
:
NotifyVsyncObserver
(
)
;
}
;
}
#
endif
