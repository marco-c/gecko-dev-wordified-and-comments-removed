#
ifndef
GFX_PLATFORM_GTK_H
#
define
GFX_PLATFORM_GTK_H
#
include
"
gfxPlatform
.
h
"
#
include
"
nsAutoRef
.
h
"
#
include
"
nsTArray
.
h
"
#
if
(
MOZ_WIDGET_GTK
=
=
2
)
extern
"
C
"
{
typedef
struct
_GdkDrawable
GdkDrawable
;
}
#
endif
class
gfxFontconfigUtils
;
class
gfxPlatformGtk
:
public
gfxPlatform
{
public
:
gfxPlatformGtk
(
)
;
virtual
~
gfxPlatformGtk
(
)
;
static
gfxPlatformGtk
*
GetPlatform
(
)
{
return
(
gfxPlatformGtk
*
)
gfxPlatform
:
:
GetPlatform
(
)
;
}
virtual
already_AddRefed
<
gfxASurface
>
CreateOffscreenSurface
(
const
IntSize
&
aSize
gfxImageFormat
aFormat
)
override
;
virtual
already_AddRefed
<
mozilla
:
:
gfx
:
:
ScaledFont
>
GetScaledFontForFont
(
mozilla
:
:
gfx
:
:
DrawTarget
*
aTarget
gfxFont
*
aFont
)
override
;
virtual
nsresult
GetFontList
(
nsIAtom
*
aLangGroup
const
nsACString
&
aGenericFamily
nsTArray
<
nsString
>
&
aListOfFonts
)
override
;
virtual
nsresult
UpdateFontList
(
)
override
;
virtual
void
GetCommonFallbackFonts
(
uint32_t
aCh
uint32_t
aNextCh
Script
aRunScript
nsTArray
<
const
char
*
>
&
aFontList
)
override
;
virtual
gfxPlatformFontList
*
CreatePlatformFontList
(
)
override
;
virtual
nsresult
GetStandardFamilyName
(
const
nsAString
&
aFontName
nsAString
&
aFamilyName
)
override
;
gfxFontGroup
*
CreateFontGroup
(
const
mozilla
:
:
FontFamilyList
&
aFontFamilyList
const
gfxFontStyle
*
aStyle
gfxTextPerfMetrics
*
aTextPerf
gfxUserFontSet
*
aUserFontSet
gfxFloat
aDevToCssSize
)
override
;
virtual
gfxFontEntry
*
LookupLocalFont
(
const
nsAString
&
aFontName
uint16_t
aWeight
int16_t
aStretch
uint8_t
aStyle
)
override
;
virtual
gfxFontEntry
*
MakePlatformFont
(
const
nsAString
&
aFontName
uint16_t
aWeight
int16_t
aStretch
uint8_t
aStyle
const
uint8_t
*
aFontData
uint32_t
aLength
)
override
;
virtual
bool
IsFontFormatSupported
(
nsIURI
*
aFontURI
uint32_t
aFormatFlags
)
override
;
virtual
void
FlushContentDrawing
(
)
override
;
#
if
(
MOZ_WIDGET_GTK
=
=
2
)
static
void
SetGdkDrawable
(
cairo_surface_t
*
target
GdkDrawable
*
drawable
)
;
static
GdkDrawable
*
GetGdkDrawable
(
cairo_surface_t
*
target
)
;
#
endif
static
int32_t
GetDPI
(
)
;
static
double
GetDPIScale
(
)
;
bool
UseXRender
(
)
{
#
if
defined
(
MOZ_X11
)
return
sUseXRender
;
#
else
return
false
;
#
endif
}
#
ifdef
MOZ_X11
virtual
void
GetAzureBackendInfo
(
mozilla
:
:
widget
:
:
InfoObject
&
aObj
)
override
{
gfxPlatform
:
:
GetAzureBackendInfo
(
aObj
)
;
aObj
.
DefineProperty
(
"
CairoUseXRender
"
UseXRender
(
)
)
;
}
#
endif
static
bool
UseFcFontList
(
)
{
return
sUseFcFontList
;
}
bool
UseImageOffscreenSurfaces
(
)
;
virtual
gfxImageFormat
GetOffscreenFormat
(
)
override
;
bool
SupportsApzWheelInput
(
)
const
override
{
return
true
;
}
void
FontsPrefsChanged
(
const
char
*
aPref
)
override
;
uint32_t
MaxGenericSubstitions
(
)
;
bool
SupportsPluginDirectBitmapDrawing
(
)
override
{
return
true
;
}
#
ifdef
GL_PROVIDER_GLX
already_AddRefed
<
mozilla
:
:
gfx
:
:
VsyncSource
>
CreateHardwareVsyncSource
(
)
override
;
#
endif
protected
:
static
gfxFontconfigUtils
*
sFontconfigUtils
;
int8_t
mMaxGenericSubstitutions
;
private
:
virtual
void
GetPlatformCMSOutputProfile
(
void
*
&
mem
size_t
&
size
)
override
;
#
ifdef
MOZ_X11
static
bool
sUseXRender
;
#
endif
static
bool
sUseFcFontList
;
}
;
#
endif
