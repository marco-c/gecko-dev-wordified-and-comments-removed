#
include
"
gfxQuartzNativeDrawing
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
mozilla
/
gfx
/
Helpers
.
h
"
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
;
gfxQuartzNativeDrawing
:
:
gfxQuartzNativeDrawing
(
DrawTarget
&
aDrawTarget
const
Rect
&
nativeRect
)
:
mDrawTarget
(
&
aDrawTarget
)
mNativeRect
(
nativeRect
)
mCGContext
(
nullptr
)
{
}
CGContextRef
gfxQuartzNativeDrawing
:
:
BeginNativeDrawing
(
)
{
NS_ASSERTION
(
!
mCGContext
"
BeginNativeDrawing
called
when
drawing
already
in
progress
"
)
;
DrawTarget
*
dt
=
mDrawTarget
;
if
(
dt
-
>
IsTiledDrawTarget
(
)
|
|
dt
-
>
GetBackendType
(
)
!
=
BackendType
:
:
SKIA
|
|
dt
-
>
IsRecording
(
)
)
{
Matrix
transform
=
dt
-
>
GetTransform
(
)
;
mNativeRect
=
transform
.
TransformBounds
(
mNativeRect
)
;
mNativeRect
.
RoundOut
(
)
;
if
(
mNativeRect
.
IsEmpty
(
)
)
{
return
nullptr
;
}
mTempDrawTarget
=
Factory
:
:
CreateDrawTarget
(
BackendType
:
:
SKIA
IntSize
:
:
Truncate
(
mNativeRect
.
width
mNativeRect
.
height
)
SurfaceFormat
:
:
B8G8R8A8
)
;
if
(
!
mTempDrawTarget
)
{
return
nullptr
;
}
transform
.
PostTranslate
(
-
mNativeRect
.
x
-
mNativeRect
.
y
)
;
mTempDrawTarget
-
>
SetTransform
(
transform
)
;
dt
=
mTempDrawTarget
;
}
else
{
Matrix
transform
=
dt
-
>
GetTransform
(
)
;
Rect
deviceRect
=
transform
.
TransformBounds
(
mNativeRect
)
;
deviceRect
.
RoundOut
(
)
;
mNativeRect
=
transform
.
Inverse
(
)
.
TransformBounds
(
deviceRect
)
;
mDrawTarget
-
>
PushClipRect
(
mNativeRect
)
;
}
MOZ_ASSERT
(
dt
-
>
GetBackendType
(
)
=
=
BackendType
:
:
SKIA
)
;
mCGContext
=
mBorrowedContext
.
Init
(
dt
)
;
if
(
NS_WARN_IF
(
!
mCGContext
)
)
{
if
(
!
mTempDrawTarget
)
{
mDrawTarget
-
>
PopClip
(
)
;
}
return
nullptr
;
}
return
mCGContext
;
}
void
gfxQuartzNativeDrawing
:
:
EndNativeDrawing
(
)
{
NS_ASSERTION
(
mCGContext
"
EndNativeDrawing
called
without
BeginNativeDrawing
"
)
;
mBorrowedContext
.
Finish
(
)
;
if
(
mTempDrawTarget
)
{
RefPtr
<
SourceSurface
>
source
=
mTempDrawTarget
-
>
Snapshot
(
)
;
AutoRestoreTransform
autoRestore
(
mDrawTarget
)
;
mDrawTarget
-
>
SetTransform
(
Matrix
(
)
)
;
mDrawTarget
-
>
DrawSurface
(
source
mNativeRect
Rect
(
0
0
mNativeRect
.
width
mNativeRect
.
height
)
)
;
}
else
{
mDrawTarget
-
>
PopClip
(
)
;
}
}
