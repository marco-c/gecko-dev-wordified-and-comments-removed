#
include
"
gfxPlatformMac
.
h
"
#
include
"
gfxQuartzSurface
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
gfxMacPlatformFontList
.
h
"
#
include
"
gfxMacFont
.
h
"
#
include
"
gfxCoreTextShaper
.
h
"
#
include
"
gfxTextRun
.
h
"
#
include
"
gfxUserFontSet
.
h
"
#
include
"
gfxConfig
.
h
"
#
include
"
AppleUtils
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
VsyncDispatcher
.
h
"
#
include
"
nsCocoaFeatures
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsUnicodeProperties
.
h
"
#
include
"
qcms
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
<
dlfcn
.
h
>
#
include
<
CoreVideo
/
CoreVideo
.
h
>
#
include
"
mozilla
/
layers
/
CompositorBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
SurfacePool
.
h
"
#
include
"
VsyncSource
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
unicode
;
using
mozilla
:
:
dom
:
:
SystemFontList
;
enum
{
kAutoActivationDisabled
=
1
}
;
typedef
uint32_t
AutoActivationSetting
;
static
void
DisableFontActivation
(
)
{
CFBundleRef
mainBundle
=
:
:
CFBundleGetMainBundle
(
)
;
CFStringRef
mainBundleID
=
nullptr
;
if
(
mainBundle
)
{
mainBundleID
=
:
:
CFBundleGetIdentifier
(
mainBundle
)
;
}
if
(
!
mainBundleID
)
{
NS_WARNING
(
"
missing
bundle
ID
packaging
set
up
incorrectly
"
)
;
return
;
}
void
(
*
CTFontManagerSetAutoActivationSettingPtr
)
(
CFStringRef
AutoActivationSetting
)
;
CTFontManagerSetAutoActivationSettingPtr
=
(
void
(
*
)
(
CFStringRef
AutoActivationSetting
)
)
dlsym
(
RTLD_DEFAULT
"
CTFontManagerSetAutoActivationSetting
"
)
;
if
(
CTFontManagerSetAutoActivationSettingPtr
)
{
CTFontManagerSetAutoActivationSettingPtr
(
mainBundleID
kAutoActivationDisabled
)
;
}
}
static
void
ActivateFontsFromDir
(
const
nsACString
&
aDir
)
{
AutoCFRelease
<
CFURLRef
>
directory
=
CFURLCreateFromFileSystemRepresentation
(
kCFAllocatorDefault
(
const
UInt8
*
)
nsPromiseFlatCString
(
aDir
)
.
get
(
)
aDir
.
Length
(
)
true
)
;
if
(
!
directory
)
{
return
;
}
AutoCFRelease
<
CFURLEnumeratorRef
>
enumerator
=
CFURLEnumeratorCreateForDirectoryURL
(
kCFAllocatorDefault
directory
kCFURLEnumeratorDefaultBehavior
nullptr
)
;
if
(
!
enumerator
)
{
return
;
}
AutoCFRelease
<
CFMutableArrayRef
>
urls
=
:
:
CFArrayCreateMutable
(
kCFAllocatorDefault
0
&
kCFTypeArrayCallBacks
)
;
if
(
!
urls
)
{
return
;
}
CFURLRef
url
;
CFURLEnumeratorResult
result
;
do
{
result
=
CFURLEnumeratorGetNextURL
(
enumerator
&
url
nullptr
)
;
if
(
result
=
=
kCFURLEnumeratorSuccess
)
{
CFArrayAppendValue
(
urls
url
)
;
}
}
while
(
result
!
=
kCFURLEnumeratorEnd
)
;
CTFontManagerRegisterFontsForURLs
(
urls
kCTFontManagerScopeProcess
nullptr
)
;
}
#
ifdef
MOZ_BUNDLED_FONTS
static
void
ActivateBundledFonts
(
)
{
nsCOMPtr
<
nsIFile
>
localDir
;
if
(
NS_FAILED
(
NS_GetSpecialDirectory
(
NS_GRE_DIR
getter_AddRefs
(
localDir
)
)
)
)
{
return
;
}
if
(
NS_FAILED
(
localDir
-
>
Append
(
u
"
fonts
"
_ns
)
)
)
{
return
;
}
nsAutoCString
path
;
if
(
NS_FAILED
(
localDir
-
>
GetNativePath
(
path
)
)
)
{
return
;
}
ActivateFontsFromDir
(
path
)
;
}
#
endif
#
if
__MAC_OS_X_VERSION_MAX_ALLOWED
<
101500
static
const
nsLiteralCString
kLangFontsDirs
[
]
=
{
"
/
Library
/
Application
Support
/
Apple
/
Fonts
/
Language
Support
"
_ns
}
;
#
else
static
const
nsLiteralCString
kLangFontsDirs
[
]
=
{
"
/
Library
/
Application
Support
/
Apple
/
Fonts
/
Language
Support
"
_ns
"
/
System
/
Library
/
Fonts
/
Supplemental
"
_ns
}
;
#
endif
static
void
FontRegistrationCallback
(
void
*
aUnused
)
{
AUTO_PROFILER_REGISTER_THREAD
(
"
RegisterFonts
"
)
;
PR_SetCurrentThreadName
(
"
RegisterFonts
"
)
;
for
(
const
auto
&
dir
:
kLangFontsDirs
)
{
ActivateFontsFromDir
(
dir
)
;
}
}
PRThread
*
gfxPlatformMac
:
:
sFontRegistrationThread
=
nullptr
;
void
gfxPlatformMac
:
:
RegisterSupplementalFonts
(
)
{
if
(
XRE_IsParentProcess
(
)
|
|
!
nsCocoaFeatures
:
:
OnCatalinaOrLater
(
)
)
{
sFontRegistrationThread
=
PR_CreateThread
(
PR_USER_THREAD
FontRegistrationCallback
nullptr
PR_PRIORITY_NORMAL
PR_GLOBAL_THREAD
PR_JOINABLE_THREAD
0
)
;
}
}
void
gfxPlatformMac
:
:
WaitForFontRegistration
(
)
{
if
(
sFontRegistrationThread
)
{
PR_JoinThread
(
sFontRegistrationThread
)
;
sFontRegistrationThread
=
nullptr
;
#
ifdef
MOZ_BUNDLED_FONTS
if
(
StaticPrefs
:
:
gfx_bundled_fonts_activate_AtStartup
(
)
!
=
0
)
{
TimeStamp
start
=
TimeStamp
:
:
Now
(
)
;
ActivateBundledFonts
(
)
;
TimeStamp
end
=
TimeStamp
:
:
Now
(
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
FONTLIST_BUNDLEDFONTS_ACTIVATE
(
end
-
start
)
.
ToMilliseconds
(
)
)
;
}
#
endif
}
}
gfxPlatformMac
:
:
gfxPlatformMac
(
)
{
DisableFontActivation
(
)
;
mFontAntiAliasingThreshold
=
ReadAntiAliasingThreshold
(
)
;
InitBackendPrefs
(
GetBackendPrefs
(
)
)
;
if
(
nsCocoaFeatures
:
:
OnHighSierraOrLater
(
)
)
{
mHasNativeColrFontSupport
=
true
;
}
}
gfxPlatformMac
:
:
~
gfxPlatformMac
(
)
{
gfxCoreTextShaper
:
:
Shutdown
(
)
;
}
BackendPrefsData
gfxPlatformMac
:
:
GetBackendPrefs
(
)
const
{
BackendPrefsData
data
;
data
.
mCanvasBitmask
=
BackendTypeBit
(
BackendType
:
:
SKIA
)
;
data
.
mContentBitmask
=
BackendTypeBit
(
BackendType
:
:
SKIA
)
;
data
.
mCanvasDefault
=
BackendType
:
:
SKIA
;
data
.
mContentDefault
=
BackendType
:
:
SKIA
;
return
data
;
}
bool
gfxPlatformMac
:
:
UsesTiling
(
)
const
{
return
true
;
}
bool
gfxPlatformMac
:
:
ContentUsesTiling
(
)
const
{
return
UsesTiling
(
)
;
}
gfxPlatformFontList
*
gfxPlatformMac
:
:
CreatePlatformFontList
(
)
{
gfxPlatformFontList
*
list
=
new
gfxMacPlatformFontList
(
)
;
if
(
NS_SUCCEEDED
(
list
-
>
InitFontList
(
)
)
)
{
return
list
;
}
gfxPlatformFontList
:
:
Shutdown
(
)
;
return
nullptr
;
}
void
gfxPlatformMac
:
:
ReadSystemFontList
(
SystemFontList
*
aFontList
)
{
gfxMacPlatformFontList
:
:
PlatformFontList
(
)
-
>
ReadSystemFontList
(
aFontList
)
;
}
already_AddRefed
<
gfxASurface
>
gfxPlatformMac
:
:
CreateOffscreenSurface
(
const
IntSize
&
aSize
gfxImageFormat
aFormat
)
{
if
(
!
Factory
:
:
AllowedSurfaceSize
(
aSize
)
)
{
return
nullptr
;
}
RefPtr
<
gfxASurface
>
newSurface
=
new
gfxQuartzSurface
(
aSize
aFormat
)
;
return
newSurface
.
forget
(
)
;
}
bool
gfxPlatformMac
:
:
IsFontFormatSupported
(
uint32_t
aFormatFlags
)
{
if
(
gfxPlatform
:
:
IsFontFormatSupported
(
aFormatFlags
)
)
{
return
true
;
}
if
(
aFormatFlags
&
gfxUserFontSet
:
:
FLAG_FORMAT_TRUETYPE_AAT
)
{
return
true
;
}
return
false
;
}
void
gfxPlatformMac
:
:
GetCommonFallbackFonts
(
uint32_t
aCh
Script
aRunScript
eFontPresentation
aPresentation
nsTArray
<
const
char
*
>
&
aFontList
)
{
if
(
PrefersColor
(
aPresentation
)
)
{
aFontList
.
AppendElement
(
"
Apple
Color
Emoji
"
)
;
}
switch
(
aRunScript
)
{
case
Script
:
:
INVALID
:
case
Script
:
:
NUM_SCRIPT_CODES
:
MOZ_ASSERT_UNREACHABLE
(
"
bad
script
code
"
)
;
break
;
case
Script
:
:
COMMON
:
case
Script
:
:
INHERITED
:
case
Script
:
:
LATIN
:
case
Script
:
:
CYRILLIC
:
case
Script
:
:
GREEK
:
aFontList
.
AppendElement
(
"
Lucida
Grande
"
)
;
break
;
case
Script
:
:
MATHEMATICAL_NOTATION
:
case
Script
:
:
SYMBOLS
:
case
Script
:
:
SYMBOLS_EMOJI
:
break
;
case
Script
:
:
BOPOMOFO
:
case
Script
:
:
HAN_WITH_BOPOMOFO
:
case
Script
:
:
SIMPLIFIED_HAN
:
case
Script
:
:
HAN
:
aFontList
.
AppendElement
(
"
Songti
SC
"
)
;
if
(
aCh
>
0x10000
)
{
aFontList
.
AppendElement
(
"
SimSun
-
ExtB
"
)
;
}
break
;
case
Script
:
:
TRADITIONAL_HAN
:
aFontList
.
AppendElement
(
"
Songti
TC
"
)
;
if
(
aCh
>
0x10000
)
{
aFontList
.
AppendElement
(
"
MingLiU
-
ExtB
"
)
;
}
break
;
case
Script
:
:
HIRAGANA
:
case
Script
:
:
KATAKANA
:
case
Script
:
:
KATAKANA_OR_HIRAGANA
:
case
Script
:
:
JAPANESE
:
aFontList
.
AppendElement
(
"
Hiragino
Sans
"
)
;
aFontList
.
AppendElement
(
"
Hiragino
Kaku
Gothic
ProN
"
)
;
break
;
case
Script
:
:
JAMO
:
case
Script
:
:
KOREAN
:
case
Script
:
:
HANGUL
:
aFontList
.
AppendElement
(
"
Nanum
Gothic
"
)
;
aFontList
.
AppendElement
(
"
Apple
SD
Gothic
Neo
"
)
;
break
;
case
Script
:
:
ARABIC
:
aFontList
.
AppendElement
(
"
Geeza
Pro
"
)
;
break
;
case
Script
:
:
ARMENIAN
:
aFontList
.
AppendElement
(
"
Mshtakan
"
)
;
break
;
case
Script
:
:
BENGALI
:
aFontList
.
AppendElement
(
"
Bangla
Sangam
MN
"
)
;
break
;
case
Script
:
:
CHEROKEE
:
aFontList
.
AppendElement
(
"
Plantagenet
Cherokee
"
)
;
break
;
case
Script
:
:
COPTIC
:
aFontList
.
AppendElement
(
"
Noto
Sans
Coptic
"
)
;
break
;
case
Script
:
:
DESERET
:
aFontList
.
AppendElement
(
"
Baskerville
"
)
;
break
;
case
Script
:
:
DEVANAGARI
:
aFontList
.
AppendElement
(
"
Devanagari
Sangam
MN
"
)
;
break
;
case
Script
:
:
ETHIOPIC
:
aFontList
.
AppendElement
(
"
Kefa
"
)
;
break
;
case
Script
:
:
GEORGIAN
:
aFontList
.
AppendElement
(
"
Helvetica
"
)
;
break
;
case
Script
:
:
GOTHIC
:
aFontList
.
AppendElement
(
"
Noto
Sans
Gothic
"
)
;
break
;
case
Script
:
:
GUJARATI
:
aFontList
.
AppendElement
(
"
Gujarati
Sangam
MN
"
)
;
break
;
case
Script
:
:
GURMUKHI
:
aFontList
.
AppendElement
(
"
Gurmukhi
MN
"
)
;
break
;
case
Script
:
:
HEBREW
:
aFontList
.
AppendElement
(
"
Lucida
Grande
"
)
;
break
;
case
Script
:
:
KANNADA
:
aFontList
.
AppendElement
(
"
Kannada
MN
"
)
;
break
;
case
Script
:
:
KHMER
:
aFontList
.
AppendElement
(
"
Khmer
MN
"
)
;
break
;
case
Script
:
:
LAO
:
aFontList
.
AppendElement
(
"
Lao
MN
"
)
;
break
;
case
Script
:
:
MALAYALAM
:
aFontList
.
AppendElement
(
"
Malayalam
Sangam
MN
"
)
;
break
;
case
Script
:
:
MONGOLIAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Mongolian
"
)
;
break
;
case
Script
:
:
MYANMAR
:
aFontList
.
AppendElement
(
"
Myanmar
MN
"
)
;
break
;
case
Script
:
:
OGHAM
:
aFontList
.
AppendElement
(
"
Noto
Sans
Ogham
"
)
;
break
;
case
Script
:
:
OLD_ITALIC
:
aFontList
.
AppendElement
(
"
Noto
Sans
Old
Italic
"
)
;
break
;
case
Script
:
:
ORIYA
:
aFontList
.
AppendElement
(
"
Oriya
Sangam
MN
"
)
;
break
;
case
Script
:
:
RUNIC
:
aFontList
.
AppendElement
(
"
Noto
Sans
Runic
"
)
;
break
;
case
Script
:
:
SINHALA
:
aFontList
.
AppendElement
(
"
Sinhala
Sangam
MN
"
)
;
break
;
case
Script
:
:
SYRIAC
:
aFontList
.
AppendElement
(
"
Noto
Sans
Syriac
"
)
;
break
;
case
Script
:
:
TAMIL
:
aFontList
.
AppendElement
(
"
Tamil
MN
"
)
;
break
;
case
Script
:
:
TELUGU
:
aFontList
.
AppendElement
(
"
Telugu
MN
"
)
;
break
;
case
Script
:
:
THAANA
:
aFontList
.
AppendElement
(
"
Noto
Sans
Thaana
"
)
;
break
;
case
Script
:
:
THAI
:
aFontList
.
AppendElement
(
"
Thonburi
"
)
;
break
;
case
Script
:
:
TIBETAN
:
aFontList
.
AppendElement
(
"
Kailasa
"
)
;
break
;
case
Script
:
:
CANADIAN_ABORIGINAL
:
aFontList
.
AppendElement
(
"
Euphemia
UCAS
"
)
;
break
;
case
Script
:
:
YI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Yi
"
)
;
aFontList
.
AppendElement
(
"
STHeiti
"
)
;
break
;
case
Script
:
:
TAGALOG
:
aFontList
.
AppendElement
(
"
Noto
Sans
Tagalog
"
)
;
break
;
case
Script
:
:
HANUNOO
:
aFontList
.
AppendElement
(
"
Noto
Sans
Hanunoo
"
)
;
break
;
case
Script
:
:
BUHID
:
aFontList
.
AppendElement
(
"
Noto
Sans
Buhid
"
)
;
break
;
case
Script
:
:
TAGBANWA
:
aFontList
.
AppendElement
(
"
Noto
Sans
Tagbanwa
"
)
;
break
;
case
Script
:
:
BRAILLE
:
aFontList
.
AppendElement
(
"
Apple
Braille
"
)
;
break
;
case
Script
:
:
CYPRIOT
:
aFontList
.
AppendElement
(
"
Noto
Sans
Cypriot
"
)
;
break
;
case
Script
:
:
LIMBU
:
aFontList
.
AppendElement
(
"
Noto
Sans
Limbu
"
)
;
break
;
case
Script
:
:
LINEAR_B
:
aFontList
.
AppendElement
(
"
Noto
Sans
Linear
B
"
)
;
break
;
case
Script
:
:
OSMANYA
:
aFontList
.
AppendElement
(
"
Noto
Sans
Osmanya
"
)
;
break
;
case
Script
:
:
SHAVIAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Shavian
"
)
;
break
;
case
Script
:
:
TAI_LE
:
aFontList
.
AppendElement
(
"
Noto
Sans
Tai
Le
"
)
;
break
;
case
Script
:
:
UGARITIC
:
aFontList
.
AppendElement
(
"
Noto
Sans
Ugaritic
"
)
;
break
;
case
Script
:
:
BUGINESE
:
aFontList
.
AppendElement
(
"
Noto
Sans
Buginese
"
)
;
break
;
case
Script
:
:
GLAGOLITIC
:
aFontList
.
AppendElement
(
"
Noto
Sans
Glagolitic
"
)
;
break
;
case
Script
:
:
KHAROSHTHI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Kharoshthi
"
)
;
break
;
case
Script
:
:
SYLOTI_NAGRI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Syloti
Nagri
"
)
;
break
;
case
Script
:
:
NEW_TAI_LUE
:
aFontList
.
AppendElement
(
"
Noto
Sans
New
Tai
Lue
"
)
;
break
;
case
Script
:
:
TIFINAGH
:
aFontList
.
AppendElement
(
"
Noto
Sans
Tifinagh
"
)
;
break
;
case
Script
:
:
OLD_PERSIAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Old
Persian
"
)
;
break
;
case
Script
:
:
BALINESE
:
aFontList
.
AppendElement
(
"
Noto
Sans
Balinese
"
)
;
break
;
case
Script
:
:
BATAK
:
aFontList
.
AppendElement
(
"
Noto
Sans
Batak
"
)
;
break
;
case
Script
:
:
BRAHMI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Brahmi
"
)
;
break
;
case
Script
:
:
CHAM
:
aFontList
.
AppendElement
(
"
Noto
Sans
Cham
"
)
;
break
;
case
Script
:
:
EGYPTIAN_HIEROGLYPHS
:
aFontList
.
AppendElement
(
"
Noto
Sans
Egyptian
Hieroglyphs
"
)
;
break
;
case
Script
:
:
PAHAWH_HMONG
:
aFontList
.
AppendElement
(
"
Noto
Sans
Pahawh
Hmong
"
)
;
break
;
case
Script
:
:
OLD_HUNGARIAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Old
Hungarian
"
)
;
break
;
case
Script
:
:
JAVANESE
:
aFontList
.
AppendElement
(
"
Noto
Sans
Javanese
"
)
;
break
;
case
Script
:
:
KAYAH_LI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Kayah
Li
"
)
;
break
;
case
Script
:
:
LEPCHA
:
aFontList
.
AppendElement
(
"
Noto
Sans
Lepcha
"
)
;
break
;
case
Script
:
:
LINEAR_A
:
aFontList
.
AppendElement
(
"
Noto
Sans
Linear
A
"
)
;
break
;
case
Script
:
:
MANDAIC
:
aFontList
.
AppendElement
(
"
Noto
Sans
Mandaic
"
)
;
break
;
case
Script
:
:
NKO
:
aFontList
.
AppendElement
(
"
Noto
Sans
NKo
"
)
;
break
;
case
Script
:
:
OLD_TURKIC
:
aFontList
.
AppendElement
(
"
Noto
Sans
Old
Turkic
"
)
;
break
;
case
Script
:
:
OLD_PERMIC
:
aFontList
.
AppendElement
(
"
Noto
Sans
Old
Permic
"
)
;
break
;
case
Script
:
:
PHAGS_PA
:
aFontList
.
AppendElement
(
"
Noto
Sans
PhagsPa
"
)
;
break
;
case
Script
:
:
PHOENICIAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Phoenician
"
)
;
break
;
case
Script
:
:
MIAO
:
aFontList
.
AppendElement
(
"
Noto
Sans
Miao
"
)
;
break
;
case
Script
:
:
VAI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Vai
"
)
;
break
;
case
Script
:
:
CUNEIFORM
:
aFontList
.
AppendElement
(
"
Noto
Sans
Cuneiform
"
)
;
break
;
case
Script
:
:
CARIAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Carian
"
)
;
break
;
case
Script
:
:
TAI_THAM
:
aFontList
.
AppendElement
(
"
Noto
Sans
Tai
Tham
"
)
;
break
;
case
Script
:
:
LYCIAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Lycian
"
)
;
break
;
case
Script
:
:
LYDIAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Lydian
"
)
;
break
;
case
Script
:
:
OL_CHIKI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Ol
Chiki
"
)
;
break
;
case
Script
:
:
REJANG
:
aFontList
.
AppendElement
(
"
Noto
Sans
Rejang
"
)
;
break
;
case
Script
:
:
SAURASHTRA
:
aFontList
.
AppendElement
(
"
Noto
Sans
Saurashtra
"
)
;
break
;
case
Script
:
:
SUNDANESE
:
aFontList
.
AppendElement
(
"
Noto
Sans
Sundanese
"
)
;
break
;
case
Script
:
:
MEETEI_MAYEK
:
aFontList
.
AppendElement
(
"
Noto
Sans
Meetei
Mayek
"
)
;
break
;
case
Script
:
:
IMPERIAL_ARAMAIC
:
aFontList
.
AppendElement
(
"
Noto
Sans
Imperial
Aramaic
"
)
;
break
;
case
Script
:
:
AVESTAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Avestan
"
)
;
break
;
case
Script
:
:
CHAKMA
:
aFontList
.
AppendElement
(
"
Noto
Sans
Chakma
"
)
;
break
;
case
Script
:
:
KAITHI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Kaithi
"
)
;
break
;
case
Script
:
:
MANICHAEAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Manichaean
"
)
;
break
;
case
Script
:
:
INSCRIPTIONAL_PAHLAVI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Inscriptional
Pahlavi
"
)
;
break
;
case
Script
:
:
PSALTER_PAHLAVI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Psalter
Pahlavi
"
)
;
break
;
case
Script
:
:
INSCRIPTIONAL_PARTHIAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Inscriptional
Parthian
"
)
;
break
;
case
Script
:
:
SAMARITAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Samaritan
"
)
;
break
;
case
Script
:
:
TAI_VIET
:
aFontList
.
AppendElement
(
"
Noto
Sans
Tai
Viet
"
)
;
break
;
case
Script
:
:
BAMUM
:
aFontList
.
AppendElement
(
"
Noto
Sans
Bamum
"
)
;
break
;
case
Script
:
:
LISU
:
aFontList
.
AppendElement
(
"
Noto
Sans
Lisu
"
)
;
break
;
case
Script
:
:
OLD_SOUTH_ARABIAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Old
South
Arabian
"
)
;
break
;
case
Script
:
:
BASSA_VAH
:
aFontList
.
AppendElement
(
"
Noto
Sans
Bassa
Vah
"
)
;
break
;
case
Script
:
:
DUPLOYAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Duployan
"
)
;
break
;
case
Script
:
:
ELBASAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Elbasan
"
)
;
break
;
case
Script
:
:
GRANTHA
:
aFontList
.
AppendElement
(
"
Noto
Sans
Grantha
"
)
;
break
;
case
Script
:
:
MENDE_KIKAKUI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Mende
Kikakui
"
)
;
break
;
case
Script
:
:
MEROITIC_CURSIVE
:
case
Script
:
:
MEROITIC_HIEROGLYPHS
:
aFontList
.
AppendElement
(
"
Noto
Sans
Meroitic
"
)
;
break
;
case
Script
:
:
OLD_NORTH_ARABIAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Old
North
Arabian
"
)
;
break
;
case
Script
:
:
NABATAEAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Nabataean
"
)
;
break
;
case
Script
:
:
PALMYRENE
:
aFontList
.
AppendElement
(
"
Noto
Sans
Palmyrene
"
)
;
break
;
case
Script
:
:
KHUDAWADI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Khudawadi
"
)
;
break
;
case
Script
:
:
WARANG_CITI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Warang
Citi
"
)
;
break
;
case
Script
:
:
MRO
:
aFontList
.
AppendElement
(
"
Noto
Sans
Mro
"
)
;
break
;
case
Script
:
:
SHARADA
:
aFontList
.
AppendElement
(
"
Noto
Sans
Sharada
"
)
;
break
;
case
Script
:
:
SORA_SOMPENG
:
aFontList
.
AppendElement
(
"
Noto
Sans
Sora
Sompeng
"
)
;
break
;
case
Script
:
:
TAKRI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Takri
"
)
;
break
;
case
Script
:
:
KHOJKI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Khojki
"
)
;
break
;
case
Script
:
:
TIRHUTA
:
aFontList
.
AppendElement
(
"
Noto
Sans
Tirhuta
"
)
;
break
;
case
Script
:
:
CAUCASIAN_ALBANIAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Caucasian
Albanian
"
)
;
break
;
case
Script
:
:
MAHAJANI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Mahajani
"
)
;
break
;
case
Script
:
:
AHOM
:
aFontList
.
AppendElement
(
"
Noto
Serif
Ahom
"
)
;
break
;
case
Script
:
:
HATRAN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Hatran
"
)
;
break
;
case
Script
:
:
MODI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Modi
"
)
;
break
;
case
Script
:
:
MULTANI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Multani
"
)
;
break
;
case
Script
:
:
PAU_CIN_HAU
:
aFontList
.
AppendElement
(
"
Noto
Sans
Pau
Cin
Hau
"
)
;
break
;
case
Script
:
:
SIDDHAM
:
aFontList
.
AppendElement
(
"
Noto
Sans
Siddham
"
)
;
break
;
case
Script
:
:
ADLAM
:
aFontList
.
AppendElement
(
"
Noto
Sans
Adlam
"
)
;
break
;
case
Script
:
:
BHAIKSUKI
:
aFontList
.
AppendElement
(
"
Noto
Sans
Bhaiksuki
"
)
;
break
;
case
Script
:
:
MARCHEN
:
aFontList
.
AppendElement
(
"
Noto
Sans
Marchen
"
)
;
break
;
case
Script
:
:
NEWA
:
aFontList
.
AppendElement
(
"
Noto
Sans
Newa
"
)
;
break
;
case
Script
:
:
OSAGE
:
aFontList
.
AppendElement
(
"
Noto
Sans
Osage
"
)
;
break
;
case
Script
:
:
HANIFI_ROHINGYA
:
aFontList
.
AppendElement
(
"
Noto
Sans
Hanifi
Rohingya
"
)
;
break
;
case
Script
:
:
WANCHO
:
aFontList
.
AppendElement
(
"
Noto
Sans
Wancho
"
)
;
break
;
case
Script
:
:
OLD_CHURCH_SLAVONIC_CYRILLIC
:
case
Script
:
:
DEMOTIC_EGYPTIAN
:
case
Script
:
:
HIERATIC_EGYPTIAN
:
case
Script
:
:
BLISSYMBOLS
:
case
Script
:
:
CIRTH
:
case
Script
:
:
KHUTSURI
:
case
Script
:
:
HARAPPAN_INDUS
:
case
Script
:
:
LATIN_FRAKTUR
:
case
Script
:
:
LATIN_GAELIC
:
case
Script
:
:
MAYAN_HIEROGLYPHS
:
case
Script
:
:
RONGORONGO
:
case
Script
:
:
SARATI
:
case
Script
:
:
ESTRANGELO_SYRIAC
:
case
Script
:
:
WESTERN_SYRIAC
:
case
Script
:
:
EASTERN_SYRIAC
:
case
Script
:
:
TENGWAR
:
case
Script
:
:
VISIBLE_SPEECH
:
case
Script
:
:
UNWRITTEN_LANGUAGES
:
case
Script
:
:
UNKNOWN
:
case
Script
:
:
SIGNWRITING
:
case
Script
:
:
MOON
:
case
Script
:
:
BOOK_PAHLAVI
:
case
Script
:
:
NAKHI_GEBA
:
case
Script
:
:
KPELLE
:
case
Script
:
:
LOMA
:
case
Script
:
:
AFAKA
:
case
Script
:
:
JURCHEN
:
case
Script
:
:
NUSHU
:
case
Script
:
:
TANGUT
:
case
Script
:
:
WOLEAI
:
case
Script
:
:
ANATOLIAN_HIEROGLYPHS
:
case
Script
:
:
MASARAM_GONDI
:
case
Script
:
:
SOYOMBO
:
case
Script
:
:
ZANABAZAR_SQUARE
:
case
Script
:
:
DOGRA
:
case
Script
:
:
GUNJALA_GONDI
:
case
Script
:
:
MAKASAR
:
case
Script
:
:
MEDEFAIDRIN
:
case
Script
:
:
SOGDIAN
:
case
Script
:
:
OLD_SOGDIAN
:
case
Script
:
:
ELYMAIC
:
case
Script
:
:
NYIAKENG_PUACHUE_HMONG
:
case
Script
:
:
NANDINAGARI
:
case
Script
:
:
CHORASMIAN
:
case
Script
:
:
DIVES_AKURU
:
case
Script
:
:
KHITAN_SMALL_SCRIPT
:
case
Script
:
:
YEZIDI
:
break
;
}
const
uint32_t
b
=
aCh
>
>
8
;
if
(
aRunScript
=
=
Script
:
:
COMMON
|
|
(
b
>
=
0x20
&
&
b
<
=
0x2b
)
|
|
b
=
=
0x2e
|
|
GetGenCategory
(
aCh
)
=
=
nsUGenCategory
:
:
kSymbol
|
|
GetGenCategory
(
aCh
)
=
=
nsUGenCategory
:
:
kPunctuation
)
{
if
(
b
=
=
0x27
)
{
aFontList
.
AppendElement
(
"
Zapf
Dingbats
"
)
;
}
aFontList
.
AppendElement
(
"
Geneva
"
)
;
aFontList
.
AppendElement
(
"
STIXGeneral
"
)
;
aFontList
.
AppendElement
(
"
Apple
Symbols
"
)
;
aFontList
.
AppendElement
(
"
Hiragino
Sans
"
)
;
aFontList
.
AppendElement
(
"
Hiragino
Kaku
Gothic
ProN
"
)
;
}
aFontList
.
AppendElement
(
"
Arial
Unicode
MS
"
)
;
}
void
gfxPlatformMac
:
:
LookupSystemFont
(
mozilla
:
:
LookAndFeel
:
:
FontID
aSystemFontID
nsACString
&
aSystemFontName
gfxFontStyle
&
aFontStyle
)
{
gfxMacPlatformFontList
*
pfl
=
gfxMacPlatformFontList
:
:
PlatformFontList
(
)
;
return
pfl
-
>
LookupSystemFont
(
aSystemFontID
aSystemFontName
aFontStyle
)
;
}
uint32_t
gfxPlatformMac
:
:
ReadAntiAliasingThreshold
(
)
{
uint32_t
threshold
=
0
;
bool
useAntiAliasingThreshold
=
Preferences
:
:
GetBool
(
"
gfx
.
use_text_smoothing_setting
"
false
)
;
if
(
!
useAntiAliasingThreshold
)
return
threshold
;
CFNumberRef
prefValue
=
(
CFNumberRef
)
CFPreferencesCopyAppValue
(
CFSTR
(
"
AppleAntiAliasingThreshold
"
)
kCFPreferencesCurrentApplication
)
;
if
(
prefValue
)
{
if
(
!
CFNumberGetValue
(
prefValue
kCFNumberIntType
&
threshold
)
)
{
threshold
=
0
;
}
CFRelease
(
prefValue
)
;
}
return
threshold
;
}
bool
gfxPlatformMac
:
:
AccelerateLayersByDefault
(
)
{
return
true
;
}
static
CVReturn
VsyncCallback
(
CVDisplayLinkRef
aDisplayLink
const
CVTimeStamp
*
aNow
const
CVTimeStamp
*
aOutputTime
CVOptionFlags
aFlagsIn
CVOptionFlags
*
aFlagsOut
void
*
aDisplayLinkContext
)
;
class
OSXVsyncSource
final
:
public
VsyncSource
{
public
:
OSXVsyncSource
(
)
:
mGlobalDisplay
(
new
OSXDisplay
(
)
)
{
}
Display
&
GetGlobalDisplay
(
)
override
{
return
*
mGlobalDisplay
;
}
class
OSXDisplay
final
:
public
VsyncSource
:
:
Display
{
public
:
OSXDisplay
(
)
:
mDisplayLink
(
nullptr
"
OSXVsyncSource
:
:
OSXDisplay
:
:
mDisplayLink
"
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mTimer
=
NS_NewTimer
(
)
;
CGDisplayRegisterReconfigurationCallback
(
DisplayReconfigurationCallback
this
)
;
}
virtual
~
OSXDisplay
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
CGDisplayRemoveReconfigurationCallback
(
DisplayReconfigurationCallback
this
)
;
}
static
void
RetryEnableVsync
(
nsITimer
*
aTimer
void
*
aOsxDisplay
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
OSXDisplay
*
osxDisplay
=
static_cast
<
OSXDisplay
*
>
(
aOsxDisplay
)
;
MOZ_ASSERT
(
osxDisplay
)
;
osxDisplay
-
>
EnableVsync
(
)
;
}
void
EnableVsync
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
IsVsyncEnabled
(
)
)
{
return
;
}
auto
displayLink
=
mDisplayLink
.
Lock
(
)
;
CVReturn
retval
=
CVDisplayLinkCreateWithActiveCGDisplays
(
&
*
displayLink
)
;
if
(
(
retval
=
=
kCVReturnSuccess
)
&
&
(
CVDisplayLinkGetCurrentCGDisplay
(
*
displayLink
)
=
=
0
)
)
{
retval
=
kCVReturnInvalidDisplay
;
}
if
(
retval
!
=
kCVReturnSuccess
)
{
NS_WARNING
(
"
Could
not
create
a
display
link
with
all
active
displays
.
"
"
Retrying
"
)
;
CVDisplayLinkRelease
(
*
displayLink
)
;
*
displayLink
=
nullptr
;
uint32_t
delay
=
100
;
mTimer
-
>
InitWithNamedFuncCallback
(
RetryEnableVsync
this
delay
nsITimer
:
:
TYPE_ONE_SHOT
"
RetryEnableVsync
"
)
;
return
;
}
if
(
CVDisplayLinkSetOutputCallback
(
*
displayLink
&
VsyncCallback
this
)
!
=
kCVReturnSuccess
)
{
NS_WARNING
(
"
Could
not
set
displaylink
output
callback
"
)
;
CVDisplayLinkRelease
(
*
displayLink
)
;
*
displayLink
=
nullptr
;
return
;
}
mPreviousTimestamp
=
TimeStamp
:
:
Now
(
)
;
if
(
CVDisplayLinkStart
(
*
displayLink
)
!
=
kCVReturnSuccess
)
{
NS_WARNING
(
"
Could
not
activate
the
display
link
"
)
;
CVDisplayLinkRelease
(
*
displayLink
)
;
*
displayLink
=
nullptr
;
}
CVTime
vsyncRate
=
CVDisplayLinkGetNominalOutputVideoRefreshPeriod
(
*
displayLink
)
;
if
(
vsyncRate
.
flags
&
kCVTimeIsIndefinite
)
{
NS_WARNING
(
"
Could
not
get
vsync
rate
setting
to
60
.
"
)
;
mVsyncRate
=
TimeDuration
:
:
FromMilliseconds
(
1000
.
0
/
60
.
0
)
;
}
else
{
int64_t
timeValue
=
vsyncRate
.
timeValue
;
int64_t
timeScale
=
vsyncRate
.
timeScale
;
const
int
milliseconds
=
1000
;
float
rateInMs
=
(
(
double
)
timeValue
/
(
double
)
timeScale
)
*
milliseconds
;
mVsyncRate
=
TimeDuration
:
:
FromMilliseconds
(
rateInMs
)
;
}
}
void
DisableVsync
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
IsVsyncEnabled
(
)
)
{
return
;
}
auto
displayLink
=
mDisplayLink
.
Lock
(
)
;
if
(
*
displayLink
)
{
CVDisplayLinkRelease
(
*
displayLink
)
;
*
displayLink
=
nullptr
;
}
}
bool
IsVsyncEnabled
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
auto
displayLink
=
mDisplayLink
.
Lock
(
)
;
return
*
displayLink
!
=
nullptr
;
}
TimeDuration
GetVsyncRate
(
)
override
{
return
mVsyncRate
;
}
void
Shutdown
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mTimer
-
>
Cancel
(
)
;
mTimer
=
nullptr
;
DisableVsync
(
)
;
}
TimeStamp
mPreviousTimestamp
;
private
:
static
void
DisplayReconfigurationCallback
(
CGDirectDisplayID
aDisplay
CGDisplayChangeSummaryFlags
aFlags
void
*
aUserInfo
)
{
static_cast
<
OSXDisplay
*
>
(
aUserInfo
)
-
>
OnDisplayReconfiguration
(
aDisplay
aFlags
)
;
}
void
OnDisplayReconfiguration
(
CGDirectDisplayID
aDisplay
CGDisplayChangeSummaryFlags
aFlags
)
{
if
(
aFlags
&
kCGDisplayBeginConfigurationFlag
)
{
return
;
}
if
(
!
NS_IsMainThread
(
)
)
{
return
;
}
bool
didReconfigureCurrentDisplayLinkDisplay
=
false
;
{
auto
displayLink
=
mDisplayLink
.
Lock
(
)
;
didReconfigureCurrentDisplayLinkDisplay
=
*
displayLink
&
&
CVDisplayLinkGetCurrentCGDisplay
(
*
displayLink
)
=
=
aDisplay
;
}
if
(
didReconfigureCurrentDisplayLinkDisplay
)
{
DisableVsync
(
)
;
EnableVsync
(
)
;
}
}
DataMutex
<
CVDisplayLinkRef
>
mDisplayLink
;
RefPtr
<
nsITimer
>
mTimer
;
TimeDuration
mVsyncRate
;
}
;
private
:
virtual
~
OSXVsyncSource
(
)
=
default
;
RefPtr
<
OSXDisplay
>
mGlobalDisplay
;
}
;
static
CVReturn
VsyncCallback
(
CVDisplayLinkRef
aDisplayLink
const
CVTimeStamp
*
aNow
const
CVTimeStamp
*
aOutputTime
CVOptionFlags
aFlagsIn
CVOptionFlags
*
aFlagsOut
void
*
aDisplayLinkContext
)
{
OSXVsyncSource
:
:
OSXDisplay
*
display
=
(
OSXVsyncSource
:
:
OSXDisplay
*
)
aDisplayLinkContext
;
mozilla
:
:
TimeStamp
outputTime
=
mozilla
:
:
TimeStamp
:
:
FromSystemTime
(
aOutputTime
-
>
hostTime
)
;
mozilla
:
:
TimeStamp
nextVsync
=
outputTime
;
mozilla
:
:
TimeStamp
previousVsync
=
display
-
>
mPreviousTimestamp
;
mozilla
:
:
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
if
(
nextVsync
<
=
previousVsync
)
{
nextVsync
=
now
;
previousVsync
=
now
;
}
else
if
(
now
<
previousVsync
)
{
previousVsync
=
now
;
}
display
-
>
mPreviousTimestamp
=
nextVsync
;
display
-
>
NotifyVsync
(
previousVsync
outputTime
)
;
return
kCVReturnSuccess
;
}
already_AddRefed
<
mozilla
:
:
gfx
:
:
VsyncSource
>
gfxPlatformMac
:
:
CreateHardwareVsyncSource
(
)
{
RefPtr
<
VsyncSource
>
osxVsyncSource
=
new
OSXVsyncSource
(
)
;
VsyncSource
:
:
Display
&
primaryDisplay
=
osxVsyncSource
-
>
GetGlobalDisplay
(
)
;
primaryDisplay
.
EnableVsync
(
)
;
if
(
!
primaryDisplay
.
IsVsyncEnabled
(
)
)
{
NS_WARNING
(
"
OS
X
Vsync
source
not
enabled
.
Falling
back
to
software
vsync
.
"
)
;
return
gfxPlatform
:
:
CreateHardwareVsyncSource
(
)
;
}
primaryDisplay
.
DisableVsync
(
)
;
return
osxVsyncSource
.
forget
(
)
;
}
nsTArray
<
uint8_t
>
gfxPlatformMac
:
:
GetPlatformCMSOutputProfileData
(
)
{
nsTArray
<
uint8_t
>
prefProfileData
=
GetPrefCMSOutputProfileData
(
)
;
if
(
!
prefProfileData
.
IsEmpty
(
)
)
{
return
prefProfileData
;
}
CGColorSpaceRef
cspace
=
:
:
CGDisplayCopyColorSpace
(
:
:
CGMainDisplayID
(
)
)
;
if
(
!
cspace
)
{
cspace
=
:
:
CGColorSpaceCreateDeviceRGB
(
)
;
}
if
(
!
cspace
)
{
return
nsTArray
<
uint8_t
>
(
)
;
}
CFDataRef
iccp
=
:
:
CGColorSpaceCopyICCProfile
(
cspace
)
;
:
:
CFRelease
(
cspace
)
;
if
(
!
iccp
)
{
return
nsTArray
<
uint8_t
>
(
)
;
}
size_t
size
=
static_cast
<
size_t
>
(
:
:
CFDataGetLength
(
iccp
)
)
;
nsTArray
<
uint8_t
>
result
;
if
(
size
>
0
)
{
result
.
AppendElements
(
:
:
CFDataGetBytePtr
(
iccp
)
size
)
;
}
:
:
CFRelease
(
iccp
)
;
return
result
;
}
bool
gfxPlatformMac
:
:
CheckVariationFontSupport
(
)
{
return
nsCocoaFeatures
:
:
OnHighSierraOrLater
(
)
;
}
void
gfxPlatformMac
:
:
InitPlatformGPUProcessPrefs
(
)
{
FeatureState
&
gpuProc
=
gfxConfig
:
:
GetFeature
(
Feature
:
:
GPU_PROCESS
)
;
gpuProc
.
ForceDisable
(
FeatureStatus
:
:
Blocked
"
GPU
process
does
not
work
on
Mac
"
"
FEATURE_FAILURE_MAC_GPU_PROC
"
_ns
)
;
}
