#
ifndef
_GFXWINDOWSNATIVEDRAWING_H_
#
define
_GFXWINDOWSNATIVEDRAWING_H_
#
include
<
windows
.
h
>
#
include
"
gfxContext
.
h
"
#
include
"
gfxWindowsSurface
.
h
"
class
gfxWindowsNativeDrawing
{
public
:
enum
{
CAN_DRAW_TO_COLOR_ALPHA
=
1
<
<
0
CANNOT_DRAW_TO_COLOR_ALPHA
=
0
<
<
0
CAN_AXIS_ALIGNED_SCALE
=
1
<
<
1
CANNOT_AXIS_ALIGNED_SCALE
=
0
<
<
1
CAN_COMPLEX_TRANSFORM
=
1
<
<
2
CANNOT_COMPLEX_TRANSFORM
=
0
<
<
2
}
;
gfxWindowsNativeDrawing
(
gfxContext
*
ctx
const
gfxRect
&
nativeRect
uint32_t
nativeDrawFlags
=
CANNOT_DRAW_TO_COLOR_ALPHA
|
CANNOT_AXIS_ALIGNED_SCALE
|
CANNOT_COMPLEX_TRANSFORM
)
;
HDC
BeginNativeDrawing
(
)
;
void
TransformToNativeRect
(
const
gfxRect
&
r
RECT
&
rout
)
;
void
EndNativeDrawing
(
)
;
bool
ShouldRenderAgain
(
)
;
void
PaintToContext
(
)
;
private
:
RefPtr
<
gfxContext
>
mContext
;
gfxRect
mNativeRect
;
uint32_t
mNativeDrawFlags
;
uint8_t
mRenderState
;
mozilla
:
:
gfx
:
:
Point
mDeviceOffset
;
RefPtr
<
gfxPattern
>
mBlackPattern
mWhitePattern
;
enum
TransformType
{
TRANSLATION_ONLY
AXIS_ALIGNED_SCALE
COMPLEX
}
;
TransformType
mTransformType
;
gfxPoint
mTranslation
;
mozilla
:
:
gfx
:
:
MatrixScalesDouble
mScale
;
XFORM
mWorldTransform
;
RefPtr
<
gfxWindowsSurface
>
mWinSurface
mBlackSurface
mWhiteSurface
;
HDC
mDC
;
XFORM
mOldWorldTransform
;
POINT
mOrigViewportOrigin
;
mozilla
:
:
gfx
:
:
IntSize
mTempSurfaceSize
;
}
;
#
endif
