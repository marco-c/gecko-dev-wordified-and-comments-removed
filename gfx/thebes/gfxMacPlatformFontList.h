#
ifndef
gfxMacPlatformFontList_H_
#
define
gfxMacPlatformFontList_H_
#
include
<
CoreFoundation
/
CoreFoundation
.
h
>
#
include
"
mozilla
/
FontPropertyTypes
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
gfxPlatformFontList
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
gfxPlatformMac
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
gfx
/
UnscaledFontMac
.
h
"
class
gfxMacPlatformFontList
;
class
MacOSFontEntry
:
public
gfxFontEntry
{
public
:
friend
class
gfxMacPlatformFontList
;
MacOSFontEntry
(
const
nsAString
&
aPostscriptName
WeightRange
aWeight
bool
aIsStandardFace
=
false
double
aSizeHint
=
0
.
0
)
;
MacOSFontEntry
(
const
nsAString
&
aPostscriptName
CGFontRef
aFontRef
WeightRange
aWeight
StretchRange
aStretch
SlantStyleRange
aStyle
bool
aIsDataUserFont
bool
aIsLocal
)
;
virtual
~
MacOSFontEntry
(
)
{
if
(
mTrakTable
)
{
hb_blob_destroy
(
mTrakTable
)
;
}
:
:
CGFontRelease
(
mFontRef
)
;
}
gfxFontEntry
*
Clone
(
)
const
override
;
CGFontRef
GetFontRef
(
)
;
hb_blob_t
*
GetFontTable
(
uint32_t
aTag
)
override
;
void
AddSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
FontListSizes
*
aSizes
)
const
override
;
nsresult
ReadCMAP
(
FontInfoData
*
aFontInfoData
=
nullptr
)
override
;
bool
RequiresAATLayout
(
)
const
{
return
mRequiresAAT
;
}
bool
HasVariations
(
)
override
;
void
GetVariationAxes
(
nsTArray
<
gfxFontVariationAxis
>
&
aVariationAxes
)
override
;
void
GetVariationInstances
(
nsTArray
<
gfxFontVariationInstance
>
&
aInstances
)
override
;
bool
IsCFF
(
)
;
bool
HasTrackingTable
(
)
;
bool
SupportsOpenTypeFeature
(
Script
aScript
uint32_t
aFeatureTag
)
override
;
float
TrackingForCSSPx
(
float
aPointSize
)
const
;
protected
:
gfxFont
*
CreateFontInstance
(
const
gfxFontStyle
*
aFontStyle
bool
aNeedsBold
)
override
;
bool
HasFontTable
(
uint32_t
aTableTag
)
override
;
bool
ParseTrakTable
(
)
;
static
void
DestroyBlobFunc
(
void
*
aUserData
)
;
CGFontRef
mFontRef
;
double
mSizeHint
;
bool
mFontRefInitialized
;
bool
mRequiresAAT
;
bool
mIsCFF
;
bool
mIsCFFInitialized
;
bool
mHasVariations
;
bool
mHasVariationsInitialized
;
bool
mHasAATSmallCaps
;
bool
mHasAATSmallCapsInitialized
;
bool
mCheckedForTracking
;
nsTHashtable
<
nsUint32HashKey
>
mAvailableTables
;
mozilla
:
:
ThreadSafeWeakPtr
<
mozilla
:
:
gfx
:
:
UnscaledFontMac
>
mUnscaledFont
;
hb_blob_t
*
mTrakTable
;
const
mozilla
:
:
AutoSwap_PRInt16
*
mTrakValues
;
const
mozilla
:
:
AutoSwap_PRInt32
*
mTrakSizeTable
;
uint16_t
mNumTrakSizes
;
}
;
class
gfxMacPlatformFontList
:
public
gfxPlatformFontList
{
public
:
static
gfxMacPlatformFontList
*
PlatformFontList
(
)
{
return
static_cast
<
gfxMacPlatformFontList
*
>
(
sPlatformFontList
)
;
}
gfxFontFamily
*
CreateFontFamily
(
const
nsAString
&
aName
)
const
override
;
static
int32_t
AppleWeightToCSSWeight
(
int32_t
aAppleWeight
)
;
bool
GetStandardFamilyName
(
const
nsAString
&
aFontName
nsAString
&
aFamilyName
)
override
;
gfxFontEntry
*
LookupLocalFont
(
const
nsAString
&
aFontName
WeightRange
aWeightForEntry
StretchRange
aStretchForEntry
SlantStyleRange
aStyleForEntry
)
override
;
gfxFontEntry
*
MakePlatformFont
(
const
nsAString
&
aFontName
WeightRange
aWeightForEntry
StretchRange
aStretchForEntry
SlantStyleRange
aStyleForEntry
const
uint8_t
*
aFontData
uint32_t
aLength
)
override
;
bool
FindAndAddFamilies
(
const
nsAString
&
aFamily
nsTArray
<
gfxFontFamily
*
>
*
aOutput
FindFamiliesFlags
aFlags
gfxFontStyle
*
aStyle
=
nullptr
gfxFloat
aDevToCssSize
=
1
.
0
)
override
;
void
LookupSystemFont
(
mozilla
:
:
LookAndFeel
:
:
FontID
aSystemFontID
nsAString
&
aSystemFontName
gfxFontStyle
&
aFontStyle
float
aDevPixPerCSSPixel
)
;
enum
FontFamilyEntryType
{
kStandardFontFamily
=
0
kHiddenSystemFontFamily
=
1
kTextSizeSystemFontFamily
=
2
kDisplaySizeSystemFontFamily
=
3
}
;
void
ReadSystemFontList
(
InfallibleTArray
<
mozilla
:
:
dom
:
:
SystemFontListEntry
>
*
aList
)
;
protected
:
gfxFontFamily
*
GetDefaultFontForPlatform
(
const
gfxFontStyle
*
aStyle
)
override
;
private
:
friend
class
gfxPlatformMac
;
gfxMacPlatformFontList
(
)
;
virtual
~
gfxMacPlatformFontList
(
)
;
nsresult
InitFontListForPlatform
(
)
override
;
void
InitSingleFaceList
(
)
;
void
InitSystemFontNames
(
)
;
gfxFontFamily
*
FindSystemFontFamily
(
const
nsAString
&
aFamily
)
;
static
void
RegisteredFontsChangedNotificationCallback
(
CFNotificationCenterRef
center
void
*
observer
CFStringRef
name
const
void
*
object
CFDictionaryRef
userInfo
)
;
gfxFontEntry
*
PlatformGlobalFontFallback
(
const
uint32_t
aCh
Script
aRunScript
const
gfxFontStyle
*
aMatchStyle
gfxFontFamily
*
*
aMatchedFamily
)
override
;
bool
UsesSystemFallback
(
)
override
{
return
true
;
}
already_AddRefed
<
FontInfoData
>
CreateFontInfoData
(
)
override
;
void
AddFamily
(
CFStringRef
aFamily
)
;
void
AddFamily
(
const
nsAString
&
aFamilyName
bool
aSystemFont
)
;
void
ActivateFontsFromDir
(
nsIFile
*
aDir
)
;
#
ifdef
MOZ_BUNDLED_FONTS
void
ActivateBundledFonts
(
)
;
#
endif
enum
{
kATSGenerationInitial
=
-
1
}
;
CTFontRef
mDefaultFont
;
FontFamilyTable
mSystemFontFamilies
;
bool
mUseSizeSensitiveSystemFont
;
nsString
mSystemTextFontFamilyName
;
nsString
mSystemDisplayFontFamilyName
;
}
;
#
endif
