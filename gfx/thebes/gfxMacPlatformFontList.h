#
ifndef
gfxMacPlatformFontList_H_
#
define
gfxMacPlatformFontList_H_
#
include
<
CoreFoundation
/
CoreFoundation
.
h
>
#
include
"
mozilla
/
FontPropertyTypes
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
gfxPlatformFontList
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
gfxPlatformMac
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
gfx
/
UnscaledFontMac
.
h
"
class
gfxMacPlatformFontList
;
class
MacOSFontEntry
final
:
public
gfxFontEntry
{
public
:
friend
class
gfxMacPlatformFontList
;
friend
class
gfxMacFont
;
MacOSFontEntry
(
const
nsACString
&
aPostscriptName
WeightRange
aWeight
bool
aIsStandardFace
=
false
double
aSizeHint
=
0
.
0
)
;
MacOSFontEntry
(
const
nsACString
&
aPostscriptName
CGFontRef
aFontRef
WeightRange
aWeight
StretchRange
aStretch
SlantStyleRange
aStyle
bool
aIsDataUserFont
bool
aIsLocal
)
;
virtual
~
MacOSFontEntry
(
)
{
:
:
CGFontRelease
(
mFontRef
)
;
}
gfxFontEntry
*
Clone
(
)
const
override
;
CGFontRef
GetFontRef
(
)
;
CGFontRef
CreateOrCopyFontRef
(
)
;
hb_blob_t
*
GetFontTable
(
uint32_t
aTag
)
override
;
void
AddSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
FontListSizes
*
aSizes
)
const
override
;
nsresult
ReadCMAP
(
FontInfoData
*
aFontInfoData
=
nullptr
)
override
;
bool
RequiresAATLayout
(
)
const
{
return
mRequiresAAT
;
}
bool
HasVariations
(
)
override
;
void
GetVariationAxes
(
nsTArray
<
gfxFontVariationAxis
>
&
aVariationAxes
)
override
;
void
GetVariationInstances
(
nsTArray
<
gfxFontVariationInstance
>
&
aInstances
)
override
;
bool
IsCFF
(
)
;
bool
SupportsOpenTypeFeature
(
Script
aScript
uint32_t
aFeatureTag
)
override
;
protected
:
gfxFont
*
CreateFontInstance
(
const
gfxFontStyle
*
aFontStyle
)
override
;
bool
HasFontTable
(
uint32_t
aTableTag
)
override
;
static
void
DestroyBlobFunc
(
void
*
aUserData
)
;
CGFontRef
mFontRef
;
double
mSizeHint
;
bool
mFontRefInitialized
;
bool
mRequiresAAT
;
bool
mIsCFF
;
bool
mIsCFFInitialized
;
bool
mHasVariations
;
bool
mHasVariationsInitialized
;
bool
mHasAATSmallCaps
;
bool
mHasAATSmallCapsInitialized
;
gfxFontVariationAxis
mOpszAxis
;
float
mAdjustedDefaultOpsz
;
nsTHashtable
<
nsUint32HashKey
>
mAvailableTables
;
mozilla
:
:
ThreadSafeWeakPtr
<
mozilla
:
:
gfx
:
:
UnscaledFontMac
>
mUnscaledFont
;
}
;
class
gfxMacPlatformFontList
final
:
public
gfxPlatformFontList
{
using
FontFamilyListEntry
=
mozilla
:
:
dom
:
:
SystemFontListEntry
;
public
:
static
gfxMacPlatformFontList
*
PlatformFontList
(
)
{
return
static_cast
<
gfxMacPlatformFontList
*
>
(
gfxPlatformFontList
:
:
PlatformFontList
(
)
)
;
}
gfxFontFamily
*
CreateFontFamily
(
const
nsACString
&
aName
FontVisibility
aVisibility
)
const
override
;
static
int32_t
AppleWeightToCSSWeight
(
int32_t
aAppleWeight
)
;
gfxFontEntry
*
LookupLocalFont
(
const
nsACString
&
aFontName
WeightRange
aWeightForEntry
StretchRange
aStretchForEntry
SlantStyleRange
aStyleForEntry
)
override
;
gfxFontEntry
*
MakePlatformFont
(
const
nsACString
&
aFontName
WeightRange
aWeightForEntry
StretchRange
aStretchForEntry
SlantStyleRange
aStyleForEntry
const
uint8_t
*
aFontData
uint32_t
aLength
)
override
;
bool
FindAndAddFamilies
(
mozilla
:
:
StyleGenericFontFamily
aGeneric
const
nsACString
&
aFamily
nsTArray
<
FamilyAndGeneric
>
*
aOutput
FindFamiliesFlags
aFlags
gfxFontStyle
*
aStyle
=
nullptr
nsAtom
*
aLanguage
=
nullptr
gfxFloat
aDevToCssSize
=
1
.
0
)
override
;
void
LookupSystemFont
(
mozilla
:
:
LookAndFeel
:
:
FontID
aSystemFontID
nsACString
&
aSystemFontName
gfxFontStyle
&
aFontStyle
)
;
enum
FontFamilyEntryType
{
kStandardFontFamily
=
0
kTextSizeSystemFontFamily
=
1
kDisplaySizeSystemFontFamily
=
2
}
;
void
ReadSystemFontList
(
mozilla
:
:
dom
:
:
SystemFontList
*
)
;
protected
:
FontFamily
GetDefaultFontForPlatform
(
const
gfxFontStyle
*
aStyle
nsAtom
*
aLanguage
=
nullptr
)
override
;
private
:
friend
class
gfxPlatformMac
;
gfxMacPlatformFontList
(
)
;
virtual
~
gfxMacPlatformFontList
(
)
;
nsresult
InitFontListForPlatform
(
)
override
;
void
InitSharedFontListForPlatform
(
)
override
;
void
PreloadNamesList
(
)
;
void
InitSingleFaceList
(
)
;
void
InitAliasesForSingleFaceList
(
)
;
void
InitSystemFontNames
(
)
;
gfxFontFamily
*
FindSystemFontFamily
(
const
nsACString
&
aFamily
)
;
FontVisibility
GetVisibilityForFamily
(
const
nsACString
&
aName
)
const
;
static
void
RegisteredFontsChangedNotificationCallback
(
CFNotificationCenterRef
center
void
*
observer
CFStringRef
name
const
void
*
object
CFDictionaryRef
userInfo
)
;
gfxFontEntry
*
PlatformGlobalFontFallback
(
const
uint32_t
aCh
Script
aRunScript
const
gfxFontStyle
*
aMatchStyle
FontFamily
&
aMatchedFamily
)
override
;
bool
UsesSystemFallback
(
)
override
{
return
true
;
}
already_AddRefed
<
FontInfoData
>
CreateFontInfoData
(
)
override
;
void
AddFamily
(
CFStringRef
aFamily
)
;
void
AddFamily
(
const
nsACString
&
aFamilyName
FontVisibility
aVisibility
)
;
gfxFontEntry
*
CreateFontEntry
(
mozilla
:
:
fontlist
:
:
Face
*
aFace
const
mozilla
:
:
fontlist
:
:
Family
*
aFamily
)
override
;
void
GetFacesInitDataForFamily
(
const
mozilla
:
:
fontlist
:
:
Family
*
aFamily
nsTArray
<
mozilla
:
:
fontlist
:
:
Face
:
:
InitData
>
&
aFaces
bool
aLoadCmaps
)
const
override
;
void
ReadFaceNamesForFamily
(
mozilla
:
:
fontlist
:
:
Family
*
aFamily
bool
aNeedFullnamePostscriptNames
)
override
;
enum
{
kATSGenerationInitial
=
-
1
}
;
CTFontRef
mDefaultFont
;
bool
mUseSizeSensitiveSystemFont
;
nsCString
mSystemTextFontFamilyName
;
nsCString
mSystemDisplayFontFamilyName
;
nsTArray
<
nsCString
>
mSingleFaceFonts
;
nsTArray
<
nsCString
>
mPreloadFonts
;
}
;
#
endif
