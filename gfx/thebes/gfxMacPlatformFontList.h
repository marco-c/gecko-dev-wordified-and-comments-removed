#
ifndef
gfxMacPlatformFontList_H_
#
define
gfxMacPlatformFontList_H_
#
include
<
CoreFoundation
/
CoreFoundation
.
h
>
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
gfxPlatformFontList
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
gfxPlatformMac
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
class
gfxMacPlatformFontList
;
class
MacOSFontEntry
:
public
gfxFontEntry
{
public
:
friend
class
gfxMacPlatformFontList
;
MacOSFontEntry
(
const
nsAString
&
aPostscriptName
int32_t
aWeight
bool
aIsStandardFace
=
false
)
;
MacOSFontEntry
(
const
nsAString
&
aPostscriptName
CGFontRef
aFontRef
uint16_t
aWeight
uint16_t
aStretch
uint8_t
aStyle
bool
aIsDataUserFont
bool
aIsLocal
)
;
virtual
~
MacOSFontEntry
(
)
{
:
:
CGFontRelease
(
mFontRef
)
;
}
virtual
CGFontRef
GetFontRef
(
)
;
virtual
hb_blob_t
*
GetFontTable
(
uint32_t
aTag
)
override
;
virtual
void
AddSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
FontListSizes
*
aSizes
)
const
override
;
nsresult
ReadCMAP
(
FontInfoData
*
aFontInfoData
=
nullptr
)
override
;
bool
RequiresAATLayout
(
)
const
{
return
mRequiresAAT
;
}
bool
IsCFF
(
)
;
protected
:
virtual
gfxFont
*
CreateFontInstance
(
const
gfxFontStyle
*
aFontStyle
bool
aNeedsBold
)
override
;
virtual
bool
HasFontTable
(
uint32_t
aTableTag
)
override
;
static
void
DestroyBlobFunc
(
void
*
aUserData
)
;
CGFontRef
mFontRef
;
bool
mFontRefInitialized
;
bool
mRequiresAAT
;
bool
mIsCFF
;
bool
mIsCFFInitialized
;
nsTHashtable
<
nsUint32HashKey
>
mAvailableTables
;
}
;
class
gfxMacPlatformFontList
:
public
gfxPlatformFontList
{
public
:
static
gfxMacPlatformFontList
*
PlatformFontList
(
)
{
return
static_cast
<
gfxMacPlatformFontList
*
>
(
sPlatformFontList
)
;
}
static
int32_t
AppleWeightToCSSWeight
(
int32_t
aAppleWeight
)
;
gfxFontFamily
*
GetDefaultFont
(
const
gfxFontStyle
*
aStyle
)
override
;
bool
GetStandardFamilyName
(
const
nsAString
&
aFontName
nsAString
&
aFamilyName
)
override
;
gfxFontEntry
*
LookupLocalFont
(
const
nsAString
&
aFontName
uint16_t
aWeight
int16_t
aStretch
uint8_t
aStyle
)
override
;
gfxFontEntry
*
MakePlatformFont
(
const
nsAString
&
aFontName
uint16_t
aWeight
int16_t
aStretch
uint8_t
aStyle
const
uint8_t
*
aFontData
uint32_t
aLength
)
override
;
gfxFontFamily
*
FindFamily
(
const
nsAString
&
aFamily
gfxFontStyle
*
aStyle
=
nullptr
)
override
;
void
LookupSystemFont
(
mozilla
:
:
LookAndFeel
:
:
FontID
aSystemFontID
nsAString
&
aSystemFontName
gfxFontStyle
&
aFontStyle
float
aDevPixPerCSSPixel
)
;
private
:
friend
class
gfxPlatformMac
;
gfxMacPlatformFontList
(
)
;
virtual
~
gfxMacPlatformFontList
(
)
;
nsresult
InitFontList
(
)
override
;
void
InitSingleFaceList
(
)
;
void
InitSystemFonts
(
)
;
gfxFontFamily
*
FindSystemFontFamily
(
const
nsAString
&
aFamily
)
;
static
void
RegisteredFontsChangedNotificationCallback
(
CFNotificationCenterRef
center
void
*
observer
CFStringRef
name
const
void
*
object
CFDictionaryRef
userInfo
)
;
gfxFontEntry
*
GlobalFontFallback
(
const
uint32_t
aCh
int32_t
aRunScript
const
gfxFontStyle
*
aMatchStyle
uint32_t
&
aCmapCount
gfxFontFamily
*
*
aMatchedFamily
)
override
;
bool
UsesSystemFallback
(
)
override
{
return
true
;
}
already_AddRefed
<
FontInfoData
>
CreateFontInfoData
(
)
override
;
void
AddFamily
(
CFStringRef
aFamily
)
;
#
ifdef
MOZ_BUNDLED_FONTS
void
ActivateBundledFonts
(
)
;
#
endif
enum
{
kATSGenerationInitial
=
-
1
}
;
CTFontRef
mDefaultFont
;
FontFamilyTable
mSystemFontFamilies
;
bool
mUseSizeSensitiveSystemFont
;
RefPtr
<
gfxFontFamily
>
mSystemTextFontFamily
;
RefPtr
<
gfxFontFamily
>
mSystemDisplayFontFamily
;
}
;
#
endif
