#
ifndef
GFX_PLATFORM_MAC_H
#
define
GFX_PLATFORM_MAC_H
#
include
"
nsTArrayForwardDeclare
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
DrawTarget
;
class
VsyncSource
;
}
}
class
gfxPlatformMac
:
public
gfxPlatform
{
public
:
gfxPlatformMac
(
)
;
virtual
~
gfxPlatformMac
(
)
;
static
gfxPlatformMac
*
GetPlatform
(
)
{
return
(
gfxPlatformMac
*
)
gfxPlatform
:
:
GetPlatform
(
)
;
}
bool
UsesTiling
(
)
const
override
;
bool
ContentUsesTiling
(
)
const
override
;
already_AddRefed
<
gfxASurface
>
CreateOffscreenSurface
(
const
IntSize
&
aSize
gfxImageFormat
aFormat
)
override
;
gfxPlatformFontList
*
CreatePlatformFontList
(
)
override
;
void
ReadSystemFontList
(
nsTArray
<
mozilla
:
:
dom
:
:
SystemFontListEntry
>
*
aFontList
)
override
;
bool
IsFontFormatSupported
(
uint32_t
aFormatFlags
)
override
;
void
GetCommonFallbackFonts
(
uint32_t
aCh
Script
aRunScript
eFontPresentation
aPresentation
nsTArray
<
const
char
*
>
&
aFontList
)
override
;
static
void
LookupSystemFont
(
mozilla
:
:
LookAndFeel
:
:
FontID
aSystemFontID
nsACString
&
aSystemFontName
gfxFontStyle
&
aFontStyle
)
;
bool
SupportsApzWheelInput
(
)
const
override
{
return
true
;
}
bool
RespectsFontStyleSmoothing
(
)
const
override
{
return
true
;
}
bool
RequiresAcceleratedGLContextForCompositorOGL
(
)
const
override
{
return
true
;
}
already_AddRefed
<
mozilla
:
:
gfx
:
:
VsyncSource
>
CreateHardwareVsyncSource
(
)
override
;
uint32_t
GetAntiAliasingThreshold
(
)
{
return
mFontAntiAliasingThreshold
;
}
protected
:
bool
AccelerateLayersByDefault
(
)
override
;
BackendPrefsData
GetBackendPrefs
(
)
const
override
;
bool
CheckVariationFontSupport
(
)
override
;
void
InitPlatformGPUProcessPrefs
(
)
override
;
private
:
nsTArray
<
uint8_t
>
GetPlatformCMSOutputProfileData
(
)
override
;
static
uint32_t
ReadAntiAliasingThreshold
(
)
;
uint32_t
mFontAntiAliasingThreshold
;
}
;
#
endif
