#
ifndef
GFX_FT2FONTLIST_H
#
define
GFX_FT2FONTLIST_H
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
gfxPlatformFontList
.
h
"
#
include
"
mozilla
/
gfx
/
UnscaledFontFreeType
.
h
"
namespace
mozilla
{
namespace
dom
{
class
FontListEntry
;
}
;
}
;
using
mozilla
:
:
dom
:
:
FontListEntry
;
class
FontNameCache
;
typedef
struct
FT_FaceRec_
*
FT_Face
;
class
nsZipArchive
;
class
FT2FontEntry
:
public
gfxFontEntry
{
public
:
explicit
FT2FontEntry
(
const
nsAString
&
aFaceName
)
:
gfxFontEntry
(
aFaceName
)
mFTFace
(
nullptr
)
mFontFace
(
nullptr
)
mFTFontIndex
(
0
)
{
}
~
FT2FontEntry
(
)
;
gfxFontEntry
*
Clone
(
)
const
override
;
const
nsString
&
GetName
(
)
const
{
return
Name
(
)
;
}
static
FT2FontEntry
*
CreateFontEntry
(
const
nsAString
&
aFontName
WeightRange
aWeight
StretchRange
aStretch
SlantStyleRange
aStyle
const
uint8_t
*
aFontData
uint32_t
aLength
)
;
static
FT2FontEntry
*
CreateFontEntry
(
const
FontListEntry
&
aFLE
)
;
static
FT2FontEntry
*
CreateFontEntry
(
FT_Face
aFace
const
char
*
aFilename
uint8_t
aIndex
const
nsAString
&
aName
const
uint8_t
*
aFontData
=
nullptr
uint32_t
aLength
=
0
)
;
virtual
gfxFont
*
CreateFontInstance
(
const
gfxFontStyle
*
aFontStyle
bool
aNeedsBold
)
override
;
cairo_font_face_t
*
CairoFontFace
(
const
gfxFontStyle
*
aStyle
=
nullptr
)
;
cairo_scaled_font_t
*
CreateScaledFont
(
const
gfxFontStyle
*
aStyle
)
;
nsresult
ReadCMAP
(
FontInfoData
*
aFontInfoData
=
nullptr
)
override
;
virtual
hb_blob_t
*
GetFontTable
(
uint32_t
aTableTag
)
override
;
virtual
nsresult
CopyFontTable
(
uint32_t
aTableTag
nsTArray
<
uint8_t
>
&
aBuffer
)
override
;
bool
HasVariations
(
)
override
;
void
GetVariationAxes
(
nsTArray
<
gfxFontVariationAxis
>
&
aVariationAxes
)
override
;
void
GetVariationInstances
(
nsTArray
<
gfxFontVariationInstance
>
&
aInstances
)
override
;
void
CheckForBrokenFont
(
gfxFontFamily
*
aFamily
)
;
virtual
void
AddSizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
FontListSizes
*
aSizes
)
const
override
;
virtual
void
AddSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
FontListSizes
*
aSizes
)
const
override
;
FT_Face
mFTFace
;
cairo_font_face_t
*
mFontFace
;
nsCString
mFilename
;
uint8_t
mFTFontIndex
;
mozilla
:
:
ThreadSafeWeakPtr
<
mozilla
:
:
gfx
:
:
UnscaledFontFreeType
>
mUnscaledFont
;
bool
mHasVariations
=
false
;
bool
mHasVariationsInitialized
=
false
;
}
;
class
FT2FontFamily
:
public
gfxFontFamily
{
public
:
explicit
FT2FontFamily
(
const
nsAString
&
aName
)
:
gfxFontFamily
(
aName
)
{
}
void
AddFacesToFontList
(
InfallibleTArray
<
FontListEntry
>
*
aFontList
)
;
}
;
class
gfxFT2FontList
:
public
gfxPlatformFontList
{
public
:
gfxFT2FontList
(
)
;
virtual
~
gfxFT2FontList
(
)
;
virtual
gfxFontEntry
*
LookupLocalFont
(
const
nsAString
&
aFontName
WeightRange
aWeightForEntry
StretchRange
aStretchForEntry
SlantStyleRange
aStyleForEntry
)
override
;
virtual
gfxFontEntry
*
MakePlatformFont
(
const
nsAString
&
aFontName
WeightRange
aWeightForEntry
StretchRange
aStretchForEntry
SlantStyleRange
aStyleForEntry
const
uint8_t
*
aFontData
uint32_t
aLength
)
override
;
void
GetSystemFontList
(
InfallibleTArray
<
FontListEntry
>
*
retValue
)
;
static
gfxFT2FontList
*
PlatformFontList
(
)
{
return
static_cast
<
gfxFT2FontList
*
>
(
gfxPlatformFontList
:
:
PlatformFontList
(
)
)
;
}
virtual
void
GetFontFamilyList
(
nsTArray
<
RefPtr
<
gfxFontFamily
>
>
&
aFamilyArray
)
override
;
gfxFontFamily
*
CreateFontFamily
(
const
nsAString
&
aName
)
const
override
;
void
WillShutdown
(
)
;
protected
:
typedef
enum
{
kUnknown
kStandard
}
StandardFile
;
virtual
nsresult
InitFontListForPlatform
(
)
override
;
void
AppendFaceFromFontListEntry
(
const
FontListEntry
&
aFLE
StandardFile
aStdFile
)
;
void
AppendFacesFromFontFile
(
const
nsCString
&
aFileName
FontNameCache
*
aCache
StandardFile
aStdFile
)
;
void
AppendFacesFromOmnijarEntry
(
nsZipArchive
*
aReader
const
nsCString
&
aEntryName
FontNameCache
*
aCache
bool
aJarChanged
)
;
void
AppendFacesFromCachedFaceList
(
const
nsCString
&
aFileName
const
nsCString
&
aFaceList
StandardFile
aStdFile
=
kStandard
)
;
void
AddFaceToList
(
const
nsCString
&
aEntryName
uint32_t
aIndex
StandardFile
aStdFile
FT_Face
aFace
nsCString
&
aFaceList
)
;
void
FindFonts
(
)
;
void
FindFontsInOmnijar
(
FontNameCache
*
aCache
)
;
void
FindFontsInDir
(
const
nsCString
&
aDir
FontNameCache
*
aFNC
)
;
virtual
gfxFontFamily
*
GetDefaultFontForPlatform
(
const
gfxFontStyle
*
aStyle
)
override
;
nsTHashtable
<
nsStringHashKey
>
mSkipSpaceLookupCheckFamilies
;
private
:
mozilla
:
:
UniquePtr
<
FontNameCache
>
mFontNameCache
;
int64_t
mJarModifiedTime
;
nsCOMPtr
<
nsIObserver
>
mObserver
;
}
;
#
endif
