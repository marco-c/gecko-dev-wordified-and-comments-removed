#
include
"
SoftwareVsyncSource
.
h
"
#
include
"
base
/
task
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
nsThreadUtils
.
h
"
SoftwareVsyncSource
:
:
SoftwareVsyncSource
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mGlobalDisplay
=
new
SoftwareDisplay
(
)
;
}
SoftwareVsyncSource
:
:
~
SoftwareVsyncSource
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mGlobalDisplay
-
>
Shutdown
(
)
;
mGlobalDisplay
=
nullptr
;
}
SoftwareDisplay
:
:
SoftwareDisplay
(
)
:
mVsyncEnabled
(
false
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
const
double
rate
=
1000
.
0
/
(
double
)
gfxPlatform
:
:
GetSoftwareVsyncRate
(
)
;
mVsyncRate
=
mozilla
:
:
TimeDuration
:
:
FromMilliseconds
(
rate
)
;
mVsyncThread
=
new
base
:
:
Thread
(
"
SoftwareVsyncThread
"
)
;
MOZ_RELEASE_ASSERT
(
mVsyncThread
-
>
Start
(
)
"
Could
not
start
software
vsync
thread
"
)
;
}
SoftwareDisplay
:
:
~
SoftwareDisplay
(
)
{
}
void
SoftwareDisplay
:
:
EnableVsync
(
)
{
MOZ_ASSERT
(
mVsyncThread
-
>
IsRunning
(
)
)
;
if
(
NS_IsMainThread
(
)
)
{
if
(
mVsyncEnabled
)
{
return
;
}
mVsyncEnabled
=
true
;
RefPtr
<
mozilla
:
:
Runnable
>
runnable
=
NS_NewRunnableMethod
(
this
&
SoftwareDisplay
:
:
EnableVsync
)
;
mVsyncThread
-
>
message_loop
(
)
-
>
PostTask
(
runnable
.
forget
(
)
)
;
return
;
}
MOZ_ASSERT
(
IsInSoftwareVsyncThread
(
)
)
;
NotifyVsync
(
mozilla
:
:
TimeStamp
:
:
Now
(
)
)
;
}
void
SoftwareDisplay
:
:
DisableVsync
(
)
{
MOZ_ASSERT
(
mVsyncThread
-
>
IsRunning
(
)
)
;
if
(
NS_IsMainThread
(
)
)
{
if
(
!
mVsyncEnabled
)
{
return
;
}
mVsyncEnabled
=
false
;
RefPtr
<
mozilla
:
:
Runnable
>
runnable
=
NS_NewRunnableMethod
(
this
&
SoftwareDisplay
:
:
DisableVsync
)
;
mVsyncThread
-
>
message_loop
(
)
-
>
PostTask
(
runnable
.
forget
(
)
)
;
return
;
}
MOZ_ASSERT
(
IsInSoftwareVsyncThread
(
)
)
;
if
(
mCurrentVsyncTask
)
{
mCurrentVsyncTask
-
>
Cancel
(
)
;
mCurrentVsyncTask
=
nullptr
;
}
}
bool
SoftwareDisplay
:
:
IsVsyncEnabled
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mVsyncEnabled
;
}
bool
SoftwareDisplay
:
:
IsInSoftwareVsyncThread
(
)
{
return
mVsyncThread
-
>
thread_id
(
)
=
=
PlatformThread
:
:
CurrentId
(
)
;
}
void
SoftwareDisplay
:
:
NotifyVsync
(
mozilla
:
:
TimeStamp
aVsyncTimestamp
)
{
MOZ_ASSERT
(
IsInSoftwareVsyncThread
(
)
)
;
mozilla
:
:
TimeStamp
displayVsyncTime
=
aVsyncTimestamp
;
mozilla
:
:
TimeStamp
now
=
mozilla
:
:
TimeStamp
:
:
Now
(
)
;
if
(
aVsyncTimestamp
>
now
)
{
displayVsyncTime
=
now
;
}
Display
:
:
NotifyVsync
(
displayVsyncTime
)
;
ScheduleNextVsync
(
aVsyncTimestamp
)
;
}
mozilla
:
:
TimeDuration
SoftwareDisplay
:
:
GetVsyncRate
(
)
{
return
mVsyncRate
;
}
void
SoftwareDisplay
:
:
ScheduleNextVsync
(
mozilla
:
:
TimeStamp
aVsyncTimestamp
)
{
MOZ_ASSERT
(
IsInSoftwareVsyncThread
(
)
)
;
mozilla
:
:
TimeStamp
nextVsync
=
aVsyncTimestamp
+
mVsyncRate
;
mozilla
:
:
TimeDuration
delay
=
nextVsync
-
mozilla
:
:
TimeStamp
:
:
Now
(
)
;
if
(
delay
.
ToMilliseconds
(
)
<
0
)
{
delay
=
mozilla
:
:
TimeDuration
:
:
FromMilliseconds
(
0
)
;
nextVsync
=
mozilla
:
:
TimeStamp
:
:
Now
(
)
;
}
mCurrentVsyncTask
=
NS_NewCancelableRunnableMethodWithArgs
<
mozilla
:
:
TimeStamp
>
(
this
&
SoftwareDisplay
:
:
NotifyVsync
nextVsync
)
;
RefPtr
<
mozilla
:
:
Runnable
>
addrefedTask
=
mCurrentVsyncTask
;
mVsyncThread
-
>
message_loop
(
)
-
>
PostDelayedTask
(
addrefedTask
.
forget
(
)
delay
.
ToMilliseconds
(
)
)
;
}
void
SoftwareDisplay
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
DisableVsync
(
)
;
mVsyncThread
-
>
Stop
(
)
;
delete
mVsyncThread
;
}
