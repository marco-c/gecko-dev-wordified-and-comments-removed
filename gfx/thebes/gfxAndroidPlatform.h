#
ifndef
GFX_PLATFORM_ANDROID_H
#
define
GFX_PLATFORM_ANDROID_H
#
include
"
gfxPlatform
.
h
"
#
include
"
gfxUserFontSet
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
dom
{
class
FontListEntry
;
}
;
}
;
using
mozilla
:
:
dom
:
:
FontListEntry
;
class
gfxAndroidPlatform
:
public
gfxPlatform
{
public
:
gfxAndroidPlatform
(
)
;
virtual
~
gfxAndroidPlatform
(
)
;
static
gfxAndroidPlatform
*
GetPlatform
(
)
{
return
(
gfxAndroidPlatform
*
)
gfxPlatform
:
:
GetPlatform
(
)
;
}
already_AddRefed
<
gfxASurface
>
CreateOffscreenSurface
(
const
IntSize
&
aSize
gfxImageFormat
aFormat
)
override
;
gfxImageFormat
GetOffscreenFormat
(
)
override
{
return
mOffscreenFormat
;
}
void
GetSystemFontList
(
nsTArray
<
FontListEntry
>
*
retValue
)
;
gfxPlatformFontList
*
CreatePlatformFontList
(
)
override
;
void
GetCommonFallbackFonts
(
uint32_t
aCh
uint32_t
aNextCh
Script
aRunScript
nsTArray
<
const
char
*
>
&
aFontList
)
override
;
gfxFontGroup
*
CreateFontGroup
(
const
mozilla
:
:
FontFamilyList
&
aFontFamilyList
const
gfxFontStyle
*
aStyle
gfxTextPerfMetrics
*
aTextPerf
gfxUserFontSet
*
aUserFontSet
gfxFloat
aDevToCssSize
)
override
;
bool
FontHintingEnabled
(
)
override
;
bool
RequiresLinearZoom
(
)
override
;
already_AddRefed
<
mozilla
:
:
gfx
:
:
VsyncSource
>
CreateHardwareVsyncSource
(
)
override
;
protected
:
bool
AccelerateLayersByDefault
(
)
override
{
return
true
;
}
bool
CheckVariationFontSupport
(
)
override
{
return
true
;
}
private
:
gfxImageFormat
mOffscreenFormat
;
}
;
#
endif
