#
include
"
PrintTargetRecording
.
h
"
#
include
"
cairo
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
namespace
mozilla
{
namespace
gfx
{
PrintTargetRecording
:
:
PrintTargetRecording
(
cairo_surface_t
*
aCairoSurface
const
IntSize
&
aSize
)
:
PrintTarget
(
aCairoSurface
aSize
)
{
}
already_AddRefed
<
PrintTargetRecording
>
PrintTargetRecording
:
:
CreateOrNull
(
const
IntSize
&
aSize
)
{
if
(
!
Factory
:
:
CheckSurfaceSize
(
aSize
)
)
{
return
nullptr
;
}
cairo_surface_t
*
surface
=
cairo_recording_surface_create
(
CAIRO_CONTENT_COLOR_ALPHA
nullptr
)
;
if
(
cairo_surface_status
(
surface
)
)
{
return
nullptr
;
}
RefPtr
<
PrintTargetRecording
>
target
=
new
PrintTargetRecording
(
surface
aSize
)
;
return
target
.
forget
(
)
;
}
already_AddRefed
<
DrawTarget
>
PrintTargetRecording
:
:
MakeDrawTarget
(
const
IntSize
&
aSize
DrawEventRecorder
*
aRecorder
)
{
MOZ_ASSERT
(
aRecorder
"
A
DrawEventRecorder
is
required
"
)
;
if
(
!
aRecorder
)
{
return
nullptr
;
}
RefPtr
<
DrawTarget
>
dt
=
PrintTarget
:
:
MakeDrawTarget
(
aSize
nullptr
)
;
if
(
dt
)
{
dt
=
CreateRecordingDrawTarget
(
aRecorder
dt
)
;
if
(
!
dt
|
|
!
dt
-
>
IsValid
(
)
)
{
return
nullptr
;
}
}
return
dt
.
forget
(
)
;
}
already_AddRefed
<
DrawTarget
>
PrintTargetRecording
:
:
CreateRecordingDrawTarget
(
DrawEventRecorder
*
aRecorder
DrawTarget
*
aDrawTarget
)
{
MOZ_ASSERT
(
aRecorder
)
;
MOZ_ASSERT
(
aDrawTarget
)
;
RefPtr
<
DrawTarget
>
dt
;
if
(
aRecorder
)
{
dt
=
gfx
:
:
Factory
:
:
CreateRecordingDrawTarget
(
aRecorder
aDrawTarget
)
;
}
if
(
!
dt
|
|
!
dt
-
>
IsValid
(
)
)
{
gfxCriticalNote
<
<
"
Failed
to
create
a
recording
DrawTarget
for
PrintTarget
"
;
return
nullptr
;
}
return
dt
.
forget
(
)
;
}
}
}
