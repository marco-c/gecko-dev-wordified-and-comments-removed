#
ifndef
GFX_TYPES_H
#
define
GFX_TYPES_H
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
TypedEnumBits
.
h
"
#
include
"
nsStyleConsts
.
h
"
typedef
struct
_cairo_surface
cairo_surface_t
;
typedef
struct
_cairo_user_data_key
cairo_user_data_key_t
;
typedef
void
(
*
thebes_destroy_func_t
)
(
void
*
data
)
;
typedef
double
gfxFloat
;
enum
class
gfxBreakPriority
{
eNoBreak
=
0
eWordWrapBreak
eNormalBreak
}
;
enum
class
gfxSurfaceType
{
Image
PDF
PS
Xlib
Xcb
Glitz
Quartz
Win32
BeOS
DirectFB
SVG
OS2
Win32Printing
QuartzImage
Script
QPainter
Recording
VG
GL
DRM
Tee
XML
Skia
Subsurface
Max
}
;
enum
class
gfxContentType
{
COLOR
=
0x1000
ALPHA
=
0x2000
COLOR_ALPHA
=
0x3000
SENTINEL
=
0xffff
}
;
enum
class
gfxAlphaType
{
Opaque
Premult
NonPremult
}
;
struct
FontMatchType
{
enum
class
Kind
:
uint8_t
{
kFontGroup
=
1
kPrefsFallback
=
1
<
<
1
kSystemFallback
=
1
<
<
2
}
;
inline
FontMatchType
&
operator
|
=
(
const
FontMatchType
&
aOther
)
;
bool
operator
=
=
(
const
FontMatchType
&
aOther
)
const
{
return
kind
=
=
aOther
.
kind
&
&
generic
=
=
aOther
.
generic
;
}
bool
operator
!
=
(
const
FontMatchType
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
MOZ_IMPLICIT
FontMatchType
(
)
=
default
;
MOZ_IMPLICIT
FontMatchType
(
Kind
aKind
)
:
kind
(
aKind
)
{
}
FontMatchType
(
Kind
aKind
mozilla
:
:
StyleGenericFontFamily
aGeneric
)
:
kind
(
aKind
)
generic
(
aGeneric
)
{
}
Kind
kind
=
static_cast
<
Kind
>
(
0
)
;
mozilla
:
:
StyleGenericFontFamily
generic
=
mozilla
:
:
StyleGenericFontFamily
:
:
None
;
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
FontMatchType
:
:
Kind
)
FontMatchType
&
FontMatchType
:
:
operator
|
=
(
const
FontMatchType
&
aOther
)
{
kind
|
=
aOther
.
kind
;
if
(
generic
!
=
aOther
.
generic
)
{
generic
=
mozilla
:
:
StyleGenericFontFamily
:
:
None
;
}
return
*
this
;
}
#
endif
