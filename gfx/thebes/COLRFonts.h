#
ifndef
COLR_FONTS_H
#
define
COLR_FONTS_H
#
include
"
mozilla
/
gfx
/
2D
.
h
"
struct
hb_blob_t
;
struct
hb_face_t
;
struct
hb_font_t
;
namespace
mozilla
{
namespace
layout
{
class
TextDrawTarget
;
}
namespace
gfx
{
class
COLRFonts
{
public
:
static
bool
ValidateColorGlyphs
(
hb_blob_t
*
aCOLR
hb_blob_t
*
aCPAL
)
;
struct
GlyphLayers
;
static
const
GlyphLayers
*
GetGlyphLayers
(
hb_blob_t
*
aCOLR
uint32_t
aGlyphId
)
;
static
bool
PaintGlyphLayers
(
hb_blob_t
*
aCOLR
hb_face_t
*
aFace
const
GlyphLayers
*
aLayers
DrawTarget
*
aDrawTarget
layout
:
:
TextDrawTarget
*
aTextDrawer
ScaledFont
*
aScaledFont
DrawOptions
aDrawOptions
const
sRGBColor
&
aCurrentColor
const
Point
&
aPoint
)
;
struct
GlyphPaintGraph
;
static
const
GlyphPaintGraph
*
GetGlyphPaintGraph
(
hb_blob_t
*
aCOLR
uint32_t
aGlyphId
)
;
static
bool
PaintGlyphGraph
(
hb_blob_t
*
aCOLR
hb_font_t
*
aFont
const
GlyphPaintGraph
*
aPaintGraph
DrawTarget
*
aDrawTarget
layout
:
:
TextDrawTarget
*
aTextDrawer
ScaledFont
*
aScaledFont
DrawOptions
aDrawOptions
const
sRGBColor
&
aCurrentColor
const
Point
&
aPoint
uint32_t
aGlyphId
float
aFontUnitsToPixels
)
;
static
Rect
GetColorGlyphBounds
(
hb_blob_t
*
aCOLR
hb_font_t
*
aFont
uint32_t
aGlyphId
DrawTarget
*
aDrawTarget
ScaledFont
*
aScaledFont
float
aFontUnitsToPixels
)
;
static
uint16_t
GetColrTableVersion
(
hb_blob_t
*
aCOLR
)
;
}
;
}
}
#
endif
