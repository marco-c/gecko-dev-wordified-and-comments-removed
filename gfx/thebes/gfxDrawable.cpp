#
include
"
gfxDrawable
.
h
"
#
include
"
gfxASurface
.
h
"
#
include
"
gfxContext
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
ifdef
MOZ_X11
#
include
"
cairo
.
h
"
#
include
"
gfxXlibSurface
.
h
"
#
endif
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
gfxSurfaceDrawable
:
:
gfxSurfaceDrawable
(
SourceSurface
*
aSurface
const
IntSize
aSize
const
gfxMatrix
aTransform
)
:
gfxDrawable
(
aSize
)
mSourceSurface
(
aSurface
)
mTransform
(
aTransform
)
{
if
(
!
mSourceSurface
)
{
gfxWarning
(
)
<
<
"
Creating
gfxSurfaceDrawable
with
null
SourceSurface
"
;
}
}
bool
gfxSurfaceDrawable
:
:
DrawWithSamplingRect
(
DrawTarget
*
aDrawTarget
CompositionOp
aOp
AntialiasMode
aAntialiasMode
const
gfxRect
&
aFillRect
const
gfxRect
&
aSamplingRect
ExtendMode
aExtendMode
const
Filter
&
aFilter
gfxFloat
aOpacity
)
{
if
(
!
mSourceSurface
)
{
return
true
;
}
gfxRect
samplingRect
=
aSamplingRect
;
samplingRect
.
RoundOut
(
)
;
IntRect
intRect
(
samplingRect
.
x
samplingRect
.
y
samplingRect
.
width
samplingRect
.
height
)
;
IntSize
size
=
mSourceSurface
-
>
GetSize
(
)
;
if
(
!
IntRect
(
0
0
size
.
width
size
.
height
)
.
Contains
(
intRect
)
)
{
return
false
;
}
DrawInternal
(
aDrawTarget
aOp
aAntialiasMode
aFillRect
intRect
ExtendMode
:
:
CLAMP
aFilter
aOpacity
gfxMatrix
(
)
)
;
return
true
;
}
bool
gfxSurfaceDrawable
:
:
Draw
(
gfxContext
*
aContext
const
gfxRect
&
aFillRect
ExtendMode
aExtendMode
const
Filter
&
aFilter
gfxFloat
aOpacity
const
gfxMatrix
&
aTransform
)
{
if
(
!
mSourceSurface
)
{
return
true
;
}
DrawInternal
(
aContext
-
>
GetDrawTarget
(
)
aContext
-
>
CurrentOp
(
)
aContext
-
>
CurrentAntialiasMode
(
)
aFillRect
IntRect
(
)
aExtendMode
aFilter
aOpacity
aTransform
)
;
return
true
;
}
void
gfxSurfaceDrawable
:
:
DrawInternal
(
DrawTarget
*
aDrawTarget
CompositionOp
aOp
AntialiasMode
aAntialiasMode
const
gfxRect
&
aFillRect
const
IntRect
&
aSamplingRect
ExtendMode
aExtendMode
const
Filter
&
aFilter
gfxFloat
aOpacity
const
gfxMatrix
&
aTransform
)
{
Matrix
patternTransform
=
ToMatrix
(
aTransform
*
mTransform
)
;
patternTransform
.
Invert
(
)
;
SurfacePattern
pattern
(
mSourceSurface
aExtendMode
patternTransform
aFilter
aSamplingRect
)
;
Rect
fillRect
=
ToRect
(
aFillRect
)
;
if
(
aOp
=
=
CompositionOp
:
:
OP_SOURCE
&
&
aOpacity
=
=
1
.
0
)
{
aDrawTarget
-
>
ClearRect
(
fillRect
)
;
aDrawTarget
-
>
FillRect
(
fillRect
pattern
)
;
}
else
{
aDrawTarget
-
>
FillRect
(
fillRect
pattern
DrawOptions
(
aOpacity
aOp
aAntialiasMode
)
)
;
}
}
gfxCallbackDrawable
:
:
gfxCallbackDrawable
(
gfxDrawingCallback
*
aCallback
const
IntSize
aSize
)
:
gfxDrawable
(
aSize
)
mCallback
(
aCallback
)
{
}
already_AddRefed
<
gfxSurfaceDrawable
>
gfxCallbackDrawable
:
:
MakeSurfaceDrawable
(
const
Filter
aFilter
)
{
SurfaceFormat
format
=
gfxPlatform
:
:
GetPlatform
(
)
-
>
Optimal2DFormatForContent
(
gfxContentType
:
:
COLOR_ALPHA
)
;
RefPtr
<
DrawTarget
>
dt
=
gfxPlatform
:
:
GetPlatform
(
)
-
>
CreateOffscreenContentDrawTarget
(
mSize
format
)
;
if
(
!
dt
|
|
!
dt
-
>
IsValid
(
)
)
return
nullptr
;
RefPtr
<
gfxContext
>
ctx
=
gfxContext
:
:
ForDrawTarget
(
dt
)
;
MOZ_ASSERT
(
ctx
)
;
Draw
(
ctx
gfxRect
(
0
0
mSize
.
width
mSize
.
height
)
ExtendMode
:
:
CLAMP
aFilter
)
;
RefPtr
<
SourceSurface
>
surface
=
dt
-
>
Snapshot
(
)
;
if
(
surface
)
{
RefPtr
<
gfxSurfaceDrawable
>
drawable
=
new
gfxSurfaceDrawable
(
surface
mSize
)
;
return
drawable
.
forget
(
)
;
}
return
nullptr
;
}
static
bool
IsRepeatingExtendMode
(
ExtendMode
aExtendMode
)
{
switch
(
aExtendMode
)
{
case
ExtendMode
:
:
REPEAT
:
case
ExtendMode
:
:
REPEAT_X
:
case
ExtendMode
:
:
REPEAT_Y
:
return
true
;
default
:
return
false
;
}
}
bool
gfxCallbackDrawable
:
:
Draw
(
gfxContext
*
aContext
const
gfxRect
&
aFillRect
ExtendMode
aExtendMode
const
Filter
&
aFilter
gfxFloat
aOpacity
const
gfxMatrix
&
aTransform
)
{
if
(
(
IsRepeatingExtendMode
(
aExtendMode
)
|
|
aOpacity
!
=
1
.
0
)
&
&
!
mSurfaceDrawable
)
{
mSurfaceDrawable
=
MakeSurfaceDrawable
(
aFilter
)
;
}
if
(
mSurfaceDrawable
)
return
mSurfaceDrawable
-
>
Draw
(
aContext
aFillRect
aExtendMode
aFilter
aOpacity
aTransform
)
;
if
(
mCallback
)
return
(
*
mCallback
)
(
aContext
aFillRect
aFilter
aTransform
)
;
return
false
;
}
gfxPatternDrawable
:
:
gfxPatternDrawable
(
gfxPattern
*
aPattern
const
IntSize
aSize
)
:
gfxDrawable
(
aSize
)
mPattern
(
aPattern
)
{
}
gfxPatternDrawable
:
:
~
gfxPatternDrawable
(
)
{
}
class
DrawingCallbackFromDrawable
:
public
gfxDrawingCallback
{
public
:
explicit
DrawingCallbackFromDrawable
(
gfxDrawable
*
aDrawable
)
:
mDrawable
(
aDrawable
)
{
NS_ASSERTION
(
aDrawable
"
aDrawable
is
null
!
"
)
;
}
virtual
~
DrawingCallbackFromDrawable
(
)
{
}
virtual
bool
operator
(
)
(
gfxContext
*
aContext
const
gfxRect
&
aFillRect
const
Filter
&
aFilter
const
gfxMatrix
&
aTransform
=
gfxMatrix
(
)
)
{
return
mDrawable
-
>
Draw
(
aContext
aFillRect
ExtendMode
:
:
CLAMP
aFilter
1
.
0
aTransform
)
;
}
private
:
RefPtr
<
gfxDrawable
>
mDrawable
;
}
;
already_AddRefed
<
gfxCallbackDrawable
>
gfxPatternDrawable
:
:
MakeCallbackDrawable
(
)
{
RefPtr
<
gfxDrawingCallback
>
callback
=
new
DrawingCallbackFromDrawable
(
this
)
;
RefPtr
<
gfxCallbackDrawable
>
callbackDrawable
=
new
gfxCallbackDrawable
(
callback
mSize
)
;
return
callbackDrawable
.
forget
(
)
;
}
bool
gfxPatternDrawable
:
:
Draw
(
gfxContext
*
aContext
const
gfxRect
&
aFillRect
ExtendMode
aExtendMode
const
Filter
&
aFilter
gfxFloat
aOpacity
const
gfxMatrix
&
aTransform
)
{
DrawTarget
&
aDrawTarget
=
*
aContext
-
>
GetDrawTarget
(
)
;
if
(
!
mPattern
)
return
false
;
if
(
IsRepeatingExtendMode
(
aExtendMode
)
)
{
RefPtr
<
gfxCallbackDrawable
>
callbackDrawable
=
MakeCallbackDrawable
(
)
;
return
callbackDrawable
-
>
Draw
(
aContext
aFillRect
aExtendMode
aFilter
aOpacity
aTransform
)
;
}
gfxMatrix
oldMatrix
=
mPattern
-
>
GetMatrix
(
)
;
mPattern
-
>
SetMatrix
(
aTransform
*
oldMatrix
)
;
DrawOptions
drawOptions
(
aOpacity
)
;
aDrawTarget
.
FillRect
(
ToRect
(
aFillRect
)
*
mPattern
-
>
GetPattern
(
&
aDrawTarget
)
drawOptions
)
;
mPattern
-
>
SetMatrix
(
oldMatrix
)
;
return
true
;
}
