#
include
"
gfxFontSrcURI
.
h
"
#
include
"
nsIProtocolHandler
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsSimpleURI
.
h
"
#
include
"
nsURIHashKey
.
h
"
static
bool
HasFlag
(
nsIURI
*
aURI
uint32_t
aFlag
)
{
nsresult
rv
;
bool
value
=
false
;
rv
=
NS_URIChainHasFlags
(
aURI
aFlag
&
value
)
;
return
NS_SUCCEEDED
(
rv
)
&
&
value
;
}
gfxFontSrcURI
:
:
gfxFontSrcURI
(
nsIURI
*
aURI
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aURI
)
;
mURI
=
aURI
;
nsCString
scheme
;
mURI
-
>
GetScheme
(
scheme
)
;
if
(
scheme
.
EqualsLiteral
(
"
data
"
)
)
{
RefPtr
<
mozilla
:
:
net
:
:
nsSimpleURI
>
simpleURI
=
mozilla
:
:
net
:
:
nsSimpleURI
:
:
From
(
aURI
)
;
mSimpleURI
=
simpleURI
;
NS_ASSERTION
(
mSimpleURI
"
Why
aren
'
t
our
data
:
URLs
backed
by
nsSimpleURI
?
"
)
;
}
else
{
mSimpleURI
=
nullptr
;
}
if
(
!
mSimpleURI
)
{
mURI
-
>
GetSpec
(
mSpec
)
;
}
mHash
=
nsURIHashKey
:
:
HashKey
(
mURI
)
;
mInheritsSecurityContext
=
HasFlag
(
aURI
nsIProtocolHandler
:
:
URI_INHERITS_SECURITY_CONTEXT
)
;
mSyncLoadIsOK
=
HasFlag
(
aURI
nsIProtocolHandler
:
:
URI_SYNC_LOAD_IS_OK
)
;
}
gfxFontSrcURI
:
:
~
gfxFontSrcURI
(
)
{
NS_ReleaseOnMainThread
(
"
gfxFontSrcURI
:
:
mURI
"
mURI
.
forget
(
)
)
;
}
bool
gfxFontSrcURI
:
:
Equals
(
gfxFontSrcURI
*
aOther
)
{
if
(
mSimpleURI
)
{
if
(
aOther
-
>
mSimpleURI
)
{
return
mSimpleURI
-
>
Equals
(
aOther
-
>
mSimpleURI
)
;
}
{
nsCString
thisScheme
;
mSimpleURI
-
>
GetScheme
(
thisScheme
)
;
nsCString
otherScheme
;
if
(
!
StringBeginsWith
(
aOther
-
>
mSpec
thisScheme
nsDefaultCStringComparator
(
)
)
)
{
return
false
;
}
}
nsCString
thisSpec
;
mSimpleURI
-
>
GetSpec
(
thisSpec
)
;
return
thisSpec
=
=
aOther
-
>
mSpec
;
}
if
(
aOther
-
>
mSimpleURI
)
{
return
aOther
-
>
Equals
(
this
)
;
}
return
mSpec
=
=
aOther
-
>
mSpec
;
}
nsresult
gfxFontSrcURI
:
:
GetSpec
(
nsACString
&
aResult
)
{
if
(
mSimpleURI
)
{
return
mSimpleURI
-
>
GetSpec
(
aResult
)
;
}
aResult
=
mSpec
;
return
NS_OK
;
}
nsCString
gfxFontSrcURI
:
:
GetSpecOrDefault
(
)
{
if
(
mSimpleURI
)
{
return
mSimpleURI
-
>
GetSpecOrDefault
(
)
;
}
return
mSpec
;
}
