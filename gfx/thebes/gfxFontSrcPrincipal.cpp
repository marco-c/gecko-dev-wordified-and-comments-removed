#
include
"
gfxFontSrcPrincipal
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsURIHashKey
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
HashFunctions
.
h
"
using
mozilla
:
:
BasePrincipal
;
gfxFontSrcPrincipal
:
:
gfxFontSrcPrincipal
(
nsIPrincipal
*
aNodePrincipal
nsIPrincipal
*
aStoragePrincipal
)
:
mNodePrincipal
(
aNodePrincipal
)
mStoragePrincipal
(
mozilla
:
:
StaticPrefs
:
:
privacy_partition_network_state
(
)
?
aStoragePrincipal
:
aNodePrincipal
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aNodePrincipal
)
;
MOZ_ASSERT
(
aStoragePrincipal
)
;
nsAutoCString
suffix
;
mStoragePrincipal
-
>
GetOriginSuffix
(
suffix
)
;
mHash
=
mozilla
:
:
AddToHash
(
mStoragePrincipal
-
>
GetHashValue
(
)
mozilla
:
:
HashString
(
suffix
)
)
;
}
gfxFontSrcPrincipal
:
:
~
gfxFontSrcPrincipal
(
)
{
NS_ReleaseOnMainThread
(
"
gfxFontSrcPrincipal
:
:
mNodePrincipal
"
mNodePrincipal
.
forget
(
)
)
;
NS_ReleaseOnMainThread
(
"
gfxFontSrcPrincipal
:
:
mStoragePrincipal
"
mStoragePrincipal
.
forget
(
)
)
;
}
bool
gfxFontSrcPrincipal
:
:
Equals
(
gfxFontSrcPrincipal
*
aOther
)
{
return
BasePrincipal
:
:
Cast
(
mStoragePrincipal
)
-
>
FastEquals
(
BasePrincipal
:
:
Cast
(
aOther
-
>
mStoragePrincipal
)
)
;
}
