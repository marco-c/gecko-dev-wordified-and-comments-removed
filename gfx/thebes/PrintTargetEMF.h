#
ifndef
MOZILLA_GFX_PRINTTARGETEMF_H
#
define
MOZILLA_GFX_PRINTTARGETEMF_H
#
include
"
PrintTargetSkPDF
.
h
"
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
#
include
<
windows
.
h
>
namespace
mozilla
{
namespace
widget
{
class
PDFiumProcessParent
;
}
}
namespace
mozilla
{
namespace
gfx
{
class
PrintTargetEMF
final
:
public
mozilla
:
:
gfx
:
:
PrintTarget
{
public
:
typedef
gfx
:
:
IntSize
IntSize
;
typedef
mozilla
:
:
widget
:
:
PDFiumProcessParent
PDFiumProcessParent
;
static
already_AddRefed
<
PrintTargetEMF
>
CreateOrNull
(
HDC
aDC
const
IntSize
&
aSizeInPoints
)
;
nsresult
BeginPrinting
(
const
nsAString
&
aTitle
const
nsAString
&
aPrintToFileName
int32_t
aStartPage
int32_t
aEndPage
)
final
;
nsresult
EndPrinting
(
)
final
;
nsresult
AbortPrinting
(
)
final
;
nsresult
BeginPage
(
)
final
;
nsresult
EndPage
(
)
final
;
already_AddRefed
<
DrawTarget
>
MakeDrawTarget
(
const
IntSize
&
aSize
DrawEventRecorder
*
aRecorder
=
nullptr
)
final
;
already_AddRefed
<
DrawTarget
>
GetReferenceDrawTarget
(
DrawEventRecorder
*
aRecorder
)
final
;
void
ConvertToEMFDone
(
const
nsresult
&
aResult
mozilla
:
:
ipc
:
:
Shmem
&
&
aEMF
)
;
bool
IsSyncPagePrinting
(
)
const
final
{
return
false
;
}
private
:
PrintTargetEMF
(
HDC
aDC
const
IntSize
&
aSize
)
;
~
PrintTargetEMF
(
)
override
;
nsString
mTitle
;
RefPtr
<
PrintTargetSkPDF
>
mTargetForCurrentPage
;
nsCOMPtr
<
nsIFile
>
mPDFFileForOnePage
;
RefPtr
<
PrintTargetSkPDF
>
mRefTarget
;
PDFiumProcessParent
*
mPDFiumProcess
;
HDC
mPrinterDC
;
}
;
}
}
#
endif
