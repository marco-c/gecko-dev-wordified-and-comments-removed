#
ifndef
ROUNDED_RECT_H
#
define
ROUNDED_RECT_H
#
include
"
gfxRect
.
h
"
#
include
"
gfxTypes
.
h
"
#
include
"
mozilla
/
gfx
/
PathHelpers
.
h
"
namespace
mozilla
{
struct
RoundedRect
{
typedef
mozilla
:
:
gfx
:
:
RectCornerRadii
RectCornerRadii
;
RoundedRect
(
const
gfxRect
&
aRect
const
RectCornerRadii
&
aCorners
)
:
rect
(
aRect
)
corners
(
aCorners
)
{
}
void
Deflate
(
gfxFloat
aTopWidth
gfxFloat
aBottomWidth
gfxFloat
aLeftWidth
gfxFloat
aRightWidth
)
{
rect
.
SetRect
(
rect
.
X
(
)
+
aLeftWidth
rect
.
Y
(
)
+
aTopWidth
std
:
:
max
(
0
.
rect
.
Width
(
)
-
aLeftWidth
-
aRightWidth
)
std
:
:
max
(
0
.
rect
.
Height
(
)
-
aTopWidth
-
aBottomWidth
)
)
;
corners
.
radii
[
mozilla
:
:
eCornerTopLeft
]
.
width
=
std
:
:
max
(
0
.
corners
.
radii
[
mozilla
:
:
eCornerTopLeft
]
.
width
-
aLeftWidth
)
;
corners
.
radii
[
mozilla
:
:
eCornerTopLeft
]
.
height
=
std
:
:
max
(
0
.
corners
.
radii
[
mozilla
:
:
eCornerTopLeft
]
.
height
-
aTopWidth
)
;
corners
.
radii
[
mozilla
:
:
eCornerTopRight
]
.
width
=
std
:
:
max
(
0
.
corners
.
radii
[
mozilla
:
:
eCornerTopRight
]
.
width
-
aRightWidth
)
;
corners
.
radii
[
mozilla
:
:
eCornerTopRight
]
.
height
=
std
:
:
max
(
0
.
corners
.
radii
[
mozilla
:
:
eCornerTopRight
]
.
height
-
aTopWidth
)
;
corners
.
radii
[
mozilla
:
:
eCornerBottomLeft
]
.
width
=
std
:
:
max
(
0
.
corners
.
radii
[
mozilla
:
:
eCornerBottomLeft
]
.
width
-
aLeftWidth
)
;
corners
.
radii
[
mozilla
:
:
eCornerBottomLeft
]
.
height
=
std
:
:
max
(
0
.
corners
.
radii
[
mozilla
:
:
eCornerBottomLeft
]
.
height
-
aBottomWidth
)
;
corners
.
radii
[
mozilla
:
:
eCornerBottomRight
]
.
width
=
std
:
:
max
(
0
.
corners
.
radii
[
mozilla
:
:
eCornerBottomRight
]
.
width
-
aRightWidth
)
;
corners
.
radii
[
mozilla
:
:
eCornerBottomRight
]
.
height
=
std
:
:
max
(
0
.
corners
.
radii
[
mozilla
:
:
eCornerBottomRight
]
.
height
-
aBottomWidth
)
;
}
gfxRect
rect
;
RectCornerRadii
corners
;
}
;
}
#
endif
