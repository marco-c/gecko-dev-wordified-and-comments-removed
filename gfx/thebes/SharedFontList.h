#
ifndef
SharedFontList_h
#
define
SharedFontList_h
#
include
"
gfxFontEntry
.
h
"
#
include
<
atomic
>
class
gfxCharacterMap
;
struct
gfxFontStyle
;
struct
GlobalFontMatch
;
namespace
mozilla
{
namespace
fontlist
{
class
FontList
;
struct
Pointer
{
private
:
friend
class
FontList
;
static
const
uint32_t
kIndexBits
=
12u
;
static
const
uint32_t
kBlockShift
=
20u
;
static_assert
(
kIndexBits
+
kBlockShift
=
=
32u
"
bad
Pointer
bit
count
"
)
;
static
const
uint32_t
kNullValue
=
0xffffffffu
;
static
const
uint32_t
kOffsetMask
=
(
1u
<
<
kBlockShift
)
-
1
;
public
:
static
Pointer
Null
(
)
{
return
Pointer
(
)
;
}
Pointer
(
)
:
mBlockAndOffset
(
kNullValue
)
{
}
Pointer
(
uint32_t
aBlock
uint32_t
aOffset
)
:
mBlockAndOffset
(
(
aBlock
<
<
kBlockShift
)
|
aOffset
)
{
MOZ_ASSERT
(
aBlock
<
(
1u
<
<
kIndexBits
)
&
&
aOffset
<
(
1u
<
<
kBlockShift
)
)
;
}
Pointer
(
const
Pointer
&
aOther
)
{
mBlockAndOffset
.
store
(
aOther
.
mBlockAndOffset
)
;
}
Pointer
(
Pointer
&
&
aOther
)
{
mBlockAndOffset
.
store
(
aOther
.
mBlockAndOffset
)
;
}
bool
IsNull
(
)
const
{
return
mBlockAndOffset
=
=
kNullValue
;
}
uint32_t
Block
(
)
const
{
return
mBlockAndOffset
>
>
kBlockShift
;
}
uint32_t
Offset
(
)
const
{
return
mBlockAndOffset
&
kOffsetMask
;
}
void
*
ToPtr
(
FontList
*
aFontList
)
const
;
Pointer
&
operator
=
(
const
Pointer
&
aOther
)
{
mBlockAndOffset
.
store
(
aOther
.
mBlockAndOffset
)
;
return
*
this
;
}
Pointer
&
operator
=
(
Pointer
&
&
aOther
)
{
mBlockAndOffset
.
store
(
aOther
.
mBlockAndOffset
)
;
return
*
this
;
}
std
:
:
atomic
<
uint32_t
>
mBlockAndOffset
;
}
;
struct
String
{
String
(
)
:
mPointer
(
Pointer
:
:
Null
(
)
)
mLength
(
0
)
{
}
String
(
FontList
*
aList
const
nsACString
&
aString
)
:
mPointer
(
Pointer
:
:
Null
(
)
)
{
Assign
(
aString
aList
)
;
}
const
nsCString
AsString
(
FontList
*
aList
)
const
{
MOZ_ASSERT
(
!
mPointer
.
IsNull
(
)
)
;
return
nsCString
(
static_cast
<
const
char
*
>
(
mPointer
.
ToPtr
(
aList
)
)
mLength
)
;
}
void
Assign
(
const
nsACString
&
aString
FontList
*
aList
)
;
const
char
*
BeginReading
(
FontList
*
aList
)
const
{
MOZ_ASSERT
(
!
mPointer
.
IsNull
(
)
)
;
return
static_cast
<
const
char
*
>
(
mPointer
.
ToPtr
(
aList
)
)
;
}
uint32_t
Length
(
)
const
{
return
mLength
;
}
bool
IsNull
(
)
const
{
return
mPointer
.
IsNull
(
)
;
}
private
:
Pointer
mPointer
;
uint32_t
mLength
;
}
;
struct
Face
{
struct
InitData
{
nsCString
mDescriptor
;
uint16_t
mIndex
;
bool
mFixedPitch
;
mozilla
:
:
WeightRange
mWeight
;
mozilla
:
:
StretchRange
mStretch
;
mozilla
:
:
SlantStyleRange
mStyle
;
}
;
Face
(
FontList
*
aList
const
InitData
&
aData
)
:
mDescriptor
(
aList
aData
.
mDescriptor
)
mIndex
(
aData
.
mIndex
)
mFixedPitch
(
aData
.
mFixedPitch
)
mWeight
(
aData
.
mWeight
)
mStretch
(
aData
.
mStretch
)
mStyle
(
aData
.
mStyle
)
mCharacterMap
(
Pointer
:
:
Null
(
)
)
{
}
bool
HasValidDescriptor
(
)
const
{
return
!
mDescriptor
.
IsNull
(
)
&
&
mIndex
!
=
uint16_t
(
-
1
)
;
}
void
SetCharacterMap
(
FontList
*
aList
gfxCharacterMap
*
aCharMap
)
;
String
mDescriptor
;
uint16_t
mIndex
;
bool
mFixedPitch
;
mozilla
:
:
WeightRange
mWeight
;
mozilla
:
:
StretchRange
mStretch
;
mozilla
:
:
SlantStyleRange
mStyle
;
Pointer
mCharacterMap
;
}
;
struct
Family
{
struct
InitData
{
InitData
(
const
nsACString
&
aKey
const
nsACString
&
aName
uint32_t
aIndex
=
0
FontVisibility
aVisibility
=
FontVisibility
:
:
Unknown
bool
aBundled
=
false
bool
aBadUnderline
=
false
bool
aForceClassic
=
false
)
:
mKey
(
aKey
)
mName
(
aName
)
mIndex
(
aIndex
)
mVisibility
(
aVisibility
)
mBundled
(
aBundled
)
mBadUnderline
(
aBadUnderline
)
mForceClassic
(
aForceClassic
)
{
}
bool
operator
<
(
const
InitData
&
aRHS
)
const
{
return
mKey
<
aRHS
.
mKey
;
}
bool
operator
=
=
(
const
InitData
&
aRHS
)
const
{
return
mKey
=
=
aRHS
.
mKey
&
&
mName
=
=
aRHS
.
mName
&
&
mVisibility
=
=
aRHS
.
mVisibility
&
&
mBundled
=
=
aRHS
.
mBundled
&
&
mBadUnderline
=
=
aRHS
.
mBadUnderline
;
}
const
nsCString
mKey
;
const
nsCString
mName
;
uint32_t
mIndex
;
FontVisibility
mVisibility
;
bool
mBundled
;
bool
mBadUnderline
;
bool
mForceClassic
;
}
;
enum
{
kRegularFaceIndex
=
0
kBoldFaceIndex
=
1
kItalicFaceIndex
=
2
kBoldItalicFaceIndex
=
3
kBoldMask
=
0x01
kItalicMask
=
0x02
}
;
Family
(
FontList
*
aList
const
InitData
&
aData
)
;
void
AddFaces
(
FontList
*
aList
const
nsTArray
<
Face
:
:
InitData
>
&
aFaces
)
;
void
SetFacePtrs
(
FontList
*
aList
nsTArray
<
Pointer
>
&
aFaces
)
;
const
String
&
Key
(
)
const
{
return
mKey
;
}
const
String
&
DisplayName
(
)
const
{
return
mName
;
}
uint32_t
Index
(
)
const
{
return
mIndex
&
0x7fffffffu
;
}
bool
IsBundled
(
)
const
{
return
mIndex
&
0x80000000u
;
}
uint32_t
NumFaces
(
)
const
{
MOZ_ASSERT
(
IsInitialized
(
)
)
;
return
mFaceCount
;
}
Pointer
*
Faces
(
FontList
*
aList
)
const
{
MOZ_ASSERT
(
IsInitialized
(
)
)
;
return
static_cast
<
Pointer
*
>
(
mFaces
.
ToPtr
(
aList
)
)
;
}
FontVisibility
Visibility
(
)
const
{
return
mVisibility
;
}
bool
IsHidden
(
)
const
{
return
Visibility
(
)
=
=
FontVisibility
:
:
Hidden
;
}
bool
IsBadUnderlineFamily
(
)
const
{
return
mIsBadUnderlineFamily
;
}
bool
IsForceClassic
(
)
const
{
return
mIsForceClassic
;
}
bool
IsInitialized
(
)
const
{
return
!
mFaces
.
IsNull
(
)
;
}
void
FindAllFacesForStyle
(
FontList
*
aList
const
gfxFontStyle
&
aStyle
nsTArray
<
Face
*
>
&
aFaceList
bool
aIgnoreSizeTolerance
=
false
)
const
;
Face
*
FindFaceForStyle
(
FontList
*
aList
const
gfxFontStyle
&
aStyle
bool
aIgnoreSizeTolerance
=
false
)
const
;
void
SearchAllFontsForChar
(
FontList
*
aList
GlobalFontMatch
*
aMatchData
)
;
void
SetupFamilyCharMap
(
FontList
*
aList
)
;
private
:
std
:
:
atomic
<
uint32_t
>
mFaceCount
;
String
mKey
;
String
mName
;
Pointer
mCharacterMap
;
Pointer
mFaces
;
uint32_t
mIndex
;
FontVisibility
mVisibility
;
bool
mIsBadUnderlineFamily
;
bool
mIsForceClassic
;
bool
mIsSimple
;
}
;
struct
LocalFaceRec
{
struct
InitData
{
nsCString
mFamilyName
;
nsCString
mFaceDescriptor
;
uint32_t
mFaceIndex
=
uint32_t
(
-
1
)
;
InitData
(
const
nsACString
&
aFamily
const
nsACString
&
aFace
)
:
mFamilyName
(
aFamily
)
mFaceDescriptor
(
aFace
)
{
}
InitData
(
const
nsACString
&
aFamily
uint32_t
aFaceIndex
)
:
mFamilyName
(
aFamily
)
mFaceIndex
(
aFaceIndex
)
{
}
InitData
(
)
=
default
;
}
;
String
mKey
;
uint32_t
mFamilyIndex
;
uint32_t
mFaceIndex
;
}
;
}
}
#
include
"
ipc
/
IPCMessageUtils
.
h
"
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
fontlist
:
:
Pointer
>
{
typedef
mozilla
:
:
fontlist
:
:
Pointer
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
uint32_t
v
=
aParam
.
mBlockAndOffset
;
WriteParam
(
aMsg
v
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
uint32_t
v
;
if
(
ReadParam
(
aMsg
aIter
&
v
)
)
{
aResult
-
>
mBlockAndOffset
.
store
(
v
)
;
return
true
;
}
return
false
;
}
}
;
}
#
undef
ERROR
/
/
This
is
defined
via
Windows
.
h
but
conflicts
with
some
bindings
#
endif
