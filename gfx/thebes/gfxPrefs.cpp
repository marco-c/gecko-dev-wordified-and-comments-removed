#
include
"
gfxPrefs
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
gfx
/
Preferences
.
h
"
#
include
"
nsXULAppAPI
.
h
"
using
namespace
mozilla
;
gfxPrefs
*
gfxPrefs
:
:
sInstance
=
nullptr
;
bool
gfxPrefs
:
:
sInstanceHasBeenDestroyed
=
false
;
class
PreferenceAccessImpl
:
public
mozilla
:
:
gfx
:
:
PreferenceAccess
{
public
:
virtual
~
PreferenceAccessImpl
(
)
;
virtual
void
LivePref
(
const
char
*
aName
int32_t
*
aVar
int32_t
aDefault
)
override
;
}
;
PreferenceAccessImpl
:
:
~
PreferenceAccessImpl
(
)
{
}
void
PreferenceAccessImpl
:
:
LivePref
(
const
char
*
aName
int32_t
*
aVar
int32_t
aDefault
)
{
Preferences
:
:
AddIntVarCache
(
aVar
aName
aDefault
)
;
}
void
gfxPrefs
:
:
DestroySingleton
(
)
{
if
(
sInstance
)
{
delete
sInstance
;
sInstance
=
nullptr
;
sInstanceHasBeenDestroyed
=
true
;
}
MOZ_ASSERT
(
!
SingletonExists
(
)
)
;
}
bool
gfxPrefs
:
:
SingletonExists
(
)
{
return
sInstance
!
=
nullptr
;
}
gfxPrefs
:
:
gfxPrefs
(
)
{
MOZ_ASSERT_IF
(
XRE_IsContentProcess
(
)
|
|
XRE_IsParentProcess
(
)
|
|
XRE_GetProcessType
(
)
=
=
GeckoProcessType_Plugin
Preferences
:
:
IsServiceAvailable
(
)
)
;
gfxPrefs
:
:
AssertMainThread
(
)
;
mMoz2DPrefAccess
=
new
PreferenceAccessImpl
;
mozilla
:
:
gfx
:
:
PreferenceAccess
:
:
SetAccess
(
mMoz2DPrefAccess
)
;
}
gfxPrefs
:
:
~
gfxPrefs
(
)
{
gfxPrefs
:
:
AssertMainThread
(
)
;
mozilla
:
:
gfx
:
:
PreferenceAccess
:
:
SetAccess
(
nullptr
)
;
delete
mMoz2DPrefAccess
;
mMoz2DPrefAccess
=
nullptr
;
}
void
gfxPrefs
:
:
AssertMainThread
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
this
code
must
be
run
on
the
main
thread
"
)
;
}
void
gfxPrefs
:
:
Pref
:
:
OnChange
(
)
{
if
(
mChangeCallback
)
{
mChangeCallback
(
)
;
}
}
void
gfxPrefs
:
:
Pref
:
:
SetChangeCallback
(
ChangeCallback
aCallback
)
{
mChangeCallback
=
aCallback
;
if
(
!
IsParentProcess
(
)
&
&
IsPrefsServiceAvailable
(
)
)
{
if
(
aCallback
)
{
WatchChanges
(
Name
(
)
this
)
;
}
else
{
UnwatchChanges
(
Name
(
)
this
)
;
}
}
OnChange
(
)
;
}
bool
gfxPrefs
:
:
IsPrefsServiceAvailable
(
)
{
return
Preferences
:
:
IsServiceAvailable
(
)
;
}
bool
gfxPrefs
:
:
IsParentProcess
(
)
{
return
XRE_IsParentProcess
(
)
;
}
void
gfxPrefs
:
:
PrefAddVarCache
(
bool
*
aVariable
const
char
*
aPref
bool
aDefault
)
{
MOZ_ASSERT
(
IsPrefsServiceAvailable
(
)
)
;
Preferences
:
:
AddBoolVarCache
(
aVariable
aPref
aDefault
)
;
}
void
gfxPrefs
:
:
PrefAddVarCache
(
int32_t
*
aVariable
const
char
*
aPref
int32_t
aDefault
)
{
MOZ_ASSERT
(
IsPrefsServiceAvailable
(
)
)
;
Preferences
:
:
AddIntVarCache
(
aVariable
aPref
aDefault
)
;
}
void
gfxPrefs
:
:
PrefAddVarCache
(
uint32_t
*
aVariable
const
char
*
aPref
uint32_t
aDefault
)
{
MOZ_ASSERT
(
IsPrefsServiceAvailable
(
)
)
;
Preferences
:
:
AddUintVarCache
(
aVariable
aPref
aDefault
)
;
}
void
gfxPrefs
:
:
PrefAddVarCache
(
float
*
aVariable
const
char
*
aPref
float
aDefault
)
{
MOZ_ASSERT
(
IsPrefsServiceAvailable
(
)
)
;
Preferences
:
:
AddFloatVarCache
(
aVariable
aPref
aDefault
)
;
}
bool
gfxPrefs
:
:
PrefGet
(
const
char
*
aPref
bool
aDefault
)
{
MOZ_ASSERT
(
IsPrefsServiceAvailable
(
)
)
;
return
Preferences
:
:
GetBool
(
aPref
aDefault
)
;
}
int32_t
gfxPrefs
:
:
PrefGet
(
const
char
*
aPref
int32_t
aDefault
)
{
MOZ_ASSERT
(
IsPrefsServiceAvailable
(
)
)
;
return
Preferences
:
:
GetInt
(
aPref
aDefault
)
;
}
uint32_t
gfxPrefs
:
:
PrefGet
(
const
char
*
aPref
uint32_t
aDefault
)
{
MOZ_ASSERT
(
IsPrefsServiceAvailable
(
)
)
;
return
Preferences
:
:
GetUint
(
aPref
aDefault
)
;
}
float
gfxPrefs
:
:
PrefGet
(
const
char
*
aPref
float
aDefault
)
{
MOZ_ASSERT
(
IsPrefsServiceAvailable
(
)
)
;
return
Preferences
:
:
GetFloat
(
aPref
aDefault
)
;
}
void
gfxPrefs
:
:
PrefSet
(
const
char
*
aPref
bool
aValue
)
{
MOZ_ASSERT
(
IsPrefsServiceAvailable
(
)
)
;
Preferences
:
:
SetBool
(
aPref
aValue
)
;
}
void
gfxPrefs
:
:
PrefSet
(
const
char
*
aPref
int32_t
aValue
)
{
MOZ_ASSERT
(
IsPrefsServiceAvailable
(
)
)
;
Preferences
:
:
SetInt
(
aPref
aValue
)
;
}
void
gfxPrefs
:
:
PrefSet
(
const
char
*
aPref
uint32_t
aValue
)
{
MOZ_ASSERT
(
IsPrefsServiceAvailable
(
)
)
;
Preferences
:
:
SetUint
(
aPref
aValue
)
;
}
void
gfxPrefs
:
:
PrefSet
(
const
char
*
aPref
float
aValue
)
{
MOZ_ASSERT
(
IsPrefsServiceAvailable
(
)
)
;
Preferences
:
:
SetFloat
(
aPref
aValue
)
;
}
static
void
OnGfxPrefChanged
(
const
char
*
aPrefname
void
*
aClosure
)
{
reinterpret_cast
<
gfxPrefs
:
:
Pref
*
>
(
aClosure
)
-
>
OnChange
(
)
;
}
void
gfxPrefs
:
:
WatchChanges
(
const
char
*
aPrefname
Pref
*
aPref
)
{
MOZ_ASSERT
(
IsPrefsServiceAvailable
(
)
)
;
Preferences
:
:
RegisterCallback
(
OnGfxPrefChanged
aPrefname
aPref
Preferences
:
:
ExactMatch
)
;
}
void
gfxPrefs
:
:
UnwatchChanges
(
const
char
*
aPrefname
Pref
*
aPref
)
{
if
(
IsPrefsServiceAvailable
(
)
)
{
Preferences
:
:
UnregisterCallback
(
OnGfxPrefChanged
aPrefname
aPref
Preferences
:
:
ExactMatch
)
;
}
}
