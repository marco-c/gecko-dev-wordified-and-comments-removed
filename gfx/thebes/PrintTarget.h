#
ifndef
MOZILLA_GFX_PRINTTARGET_H
#
define
MOZILLA_GFX_PRINTTARGET_H
#
include
<
functional
>
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsStringFwd
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
DrawEventRecorder
;
class
PrintTarget
{
public
:
typedef
std
:
:
function
<
void
(
nsresult
)
>
PageDoneCallback
;
NS_INLINE_DECL_REFCOUNTING
(
PrintTarget
)
;
virtual
nsresult
BeginPrinting
(
const
nsAString
&
aTitle
const
nsAString
&
aPrintToFileName
int32_t
aStartPage
int32_t
aEndPage
)
{
return
NS_OK
;
}
virtual
nsresult
EndPrinting
(
)
{
return
NS_OK
;
}
virtual
nsresult
AbortPrinting
(
)
{
#
ifdef
DEBUG
mHasActivePage
=
false
;
#
endif
return
NS_OK
;
}
virtual
nsresult
BeginPage
(
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
!
mHasActivePage
"
Missing
EndPage
(
)
call
"
)
;
mHasActivePage
=
true
;
#
endif
return
NS_OK
;
}
virtual
nsresult
EndPage
(
)
{
#
ifdef
DEBUG
mHasActivePage
=
false
;
#
endif
return
NS_OK
;
}
virtual
void
Finish
(
)
;
virtual
bool
RotateNeededForLandscape
(
)
const
{
return
false
;
}
const
IntSize
&
GetSize
(
)
const
{
return
mSize
;
}
virtual
already_AddRefed
<
DrawTarget
>
MakeDrawTarget
(
const
IntSize
&
aSize
DrawEventRecorder
*
aRecorder
=
nullptr
)
;
virtual
already_AddRefed
<
DrawTarget
>
GetReferenceDrawTarget
(
DrawEventRecorder
*
aRecorder
)
;
virtual
bool
IsSyncPagePrinting
(
)
const
{
return
true
;
}
void
RegisterPageDoneCallback
(
PageDoneCallback
&
&
aCallback
)
;
void
UnregisterPageDoneCallback
(
)
;
static
void
AdjustPrintJobNameForIPP
(
const
nsAString
&
aJobName
nsCString
&
aAdjustedJobName
)
;
static
void
AdjustPrintJobNameForIPP
(
const
nsAString
&
aJobName
nsString
&
aAdjustedJobName
)
;
protected
:
explicit
PrintTarget
(
cairo_surface_t
*
aCairoSurface
const
IntSize
&
aSize
)
;
virtual
~
PrintTarget
(
)
;
static
already_AddRefed
<
DrawTarget
>
CreateWrapAndRecordDrawTarget
(
DrawEventRecorder
*
aRecorder
DrawTarget
*
aDrawTarget
)
;
cairo_surface_t
*
mCairoSurface
;
RefPtr
<
DrawTarget
>
mRefDT
;
RefPtr
<
DrawTarget
>
mRecordingRefDT
;
IntSize
mSize
;
bool
mIsFinished
;
#
ifdef
DEBUG
bool
mHasActivePage
;
DrawEventRecorder
*
mRecorder
;
#
endif
PageDoneCallback
mPageDoneCallback
;
}
;
}
}
#
endif
