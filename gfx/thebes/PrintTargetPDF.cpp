#
include
"
PrintTargetPDF
.
h
"
#
include
"
cairo
.
h
"
#
include
"
cairo
-
pdf
.
h
"
#
include
"
mozilla
/
AppShutdown
.
h
"
#
include
"
mozilla
/
StaticPrefs_layout
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
:
:
gfx
{
static
cairo_status_t
write_func
(
void
*
closure
const
unsigned
char
*
data
unsigned
int
length
)
{
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdownConfirmed
)
)
{
return
CAIRO_STATUS_SUCCESS
;
}
nsCOMPtr
<
nsIOutputStream
>
out
=
reinterpret_cast
<
nsIOutputStream
*
>
(
closure
)
;
do
{
uint32_t
wrote
=
0
;
if
(
NS_FAILED
(
out
-
>
Write
(
(
const
char
*
)
data
length
&
wrote
)
)
)
{
break
;
}
data
+
=
wrote
;
length
-
=
wrote
;
}
while
(
length
>
0
)
;
NS_ASSERTION
(
length
=
=
0
"
not
everything
was
written
to
the
file
"
)
;
return
CAIRO_STATUS_SUCCESS
;
}
PrintTargetPDF
:
:
PrintTargetPDF
(
cairo_surface_t
*
aCairoSurface
const
IntSize
&
aSize
nsIOutputStream
*
aStream
)
:
PrintTarget
(
aCairoSurface
aSize
)
mStream
(
aStream
)
{
}
PrintTargetPDF
:
:
~
PrintTargetPDF
(
)
{
Finish
(
)
;
}
already_AddRefed
<
PrintTargetPDF
>
PrintTargetPDF
:
:
CreateOrNull
(
nsIOutputStream
*
aStream
const
IntSize
&
aSizeInPoints
)
{
if
(
NS_WARN_IF
(
!
aStream
)
)
{
return
nullptr
;
}
cairo_surface_t
*
surface
=
cairo_pdf_surface_create_for_stream
(
write_func
(
void
*
)
aStream
aSizeInPoints
.
width
aSizeInPoints
.
height
)
;
if
(
cairo_surface_status
(
surface
)
)
{
return
nullptr
;
}
nsAutoString
creatorName
;
if
(
NS_SUCCEEDED
(
nsContentUtils
:
:
GetLocalizedString
(
nsContentUtils
:
:
eBRAND_PROPERTIES
"
brandFullName
"
creatorName
)
)
&
&
!
creatorName
.
IsEmpty
(
)
)
{
creatorName
.
Append
(
u
"
"
MOZILLA_VERSION
)
;
cairo_pdf_surface_set_metadata
(
surface
CAIRO_PDF_METADATA_CREATOR
NS_ConvertUTF16toUTF8
(
creatorName
)
.
get
(
)
)
;
}
RefPtr
<
PrintTargetPDF
>
target
=
new
PrintTargetPDF
(
surface
aSizeInPoints
aStream
)
;
return
target
.
forget
(
)
;
}
nsresult
PrintTargetPDF
:
:
BeginPage
(
const
IntSize
&
aSizeInPoints
)
{
if
(
StaticPrefs
:
:
layout_css_page_orientation_enabled
(
)
)
{
cairo_pdf_surface_set_size
(
mCairoSurface
aSizeInPoints
.
width
aSizeInPoints
.
height
)
;
if
(
cairo_surface_status
(
mCairoSurface
)
)
{
return
NS_ERROR_FAILURE
;
}
}
return
PrintTarget
:
:
BeginPage
(
aSizeInPoints
)
;
}
nsresult
PrintTargetPDF
:
:
EndPage
(
)
{
cairo_surface_show_page
(
mCairoSurface
)
;
return
PrintTarget
:
:
EndPage
(
)
;
}
void
PrintTargetPDF
:
:
Finish
(
)
{
if
(
mIsFinished
|
|
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdownConfirmed
)
)
{
return
;
}
PrintTarget
:
:
Finish
(
)
;
mStream
-
>
Close
(
)
;
}
}
