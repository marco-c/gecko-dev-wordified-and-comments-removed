#
include
"
PrintTargetPS
.
h
"
#
include
"
cairo
.
h
"
#
include
"
cairo
-
ps
.
h
"
namespace
mozilla
:
:
gfx
{
static
cairo_status_t
write_func
(
void
*
closure
const
unsigned
char
*
data
unsigned
int
length
)
{
nsCOMPtr
<
nsIOutputStream
>
out
=
reinterpret_cast
<
nsIOutputStream
*
>
(
closure
)
;
do
{
uint32_t
wrote
=
0
;
if
(
NS_FAILED
(
out
-
>
Write
(
(
const
char
*
)
data
length
&
wrote
)
)
)
{
break
;
}
data
+
=
wrote
;
length
-
=
wrote
;
}
while
(
length
>
0
)
;
NS_ASSERTION
(
length
=
=
0
"
not
everything
was
written
to
the
file
"
)
;
return
CAIRO_STATUS_SUCCESS
;
}
PrintTargetPS
:
:
PrintTargetPS
(
cairo_surface_t
*
aCairoSurface
const
IntSize
&
aSize
nsIOutputStream
*
aStream
PageOrientation
aOrientation
)
:
PrintTarget
(
aCairoSurface
aSize
)
mStream
(
aStream
)
mOrientation
(
aOrientation
)
{
}
PrintTargetPS
:
:
~
PrintTargetPS
(
)
{
Finish
(
)
;
}
already_AddRefed
<
PrintTargetPS
>
PrintTargetPS
:
:
CreateOrNull
(
nsIOutputStream
*
aStream
IntSize
aSizeInPoints
PageOrientation
aOrientation
)
{
if
(
aOrientation
=
=
LANDSCAPE
)
{
Swap
(
aSizeInPoints
.
width
aSizeInPoints
.
height
)
;
}
cairo_surface_t
*
surface
=
cairo_ps_surface_create_for_stream
(
write_func
(
void
*
)
aStream
aSizeInPoints
.
width
aSizeInPoints
.
height
)
;
if
(
cairo_surface_status
(
surface
)
)
{
return
nullptr
;
}
cairo_ps_surface_restrict_to_level
(
surface
CAIRO_PS_LEVEL_2
)
;
RefPtr
<
PrintTargetPS
>
target
=
new
PrintTargetPS
(
surface
aSizeInPoints
aStream
aOrientation
)
;
return
target
.
forget
(
)
;
}
nsresult
PrintTargetPS
:
:
BeginPrinting
(
const
nsAString
&
aTitle
const
nsAString
&
aPrintToFileName
int32_t
aStartPage
int32_t
aEndPage
)
{
if
(
mOrientation
=
=
PORTRAIT
)
{
cairo_ps_surface_dsc_comment
(
mCairoSurface
"
%
%
Orientation
:
Portrait
"
)
;
}
else
{
cairo_ps_surface_dsc_comment
(
mCairoSurface
"
%
%
Orientation
:
Landscape
"
)
;
}
return
NS_OK
;
}
nsresult
PrintTargetPS
:
:
EndPage
(
)
{
cairo_surface_show_page
(
mCairoSurface
)
;
return
NS_OK
;
}
void
PrintTargetPS
:
:
Finish
(
)
{
if
(
mIsFinished
)
{
return
;
}
PrintTarget
:
:
Finish
(
)
;
mStream
-
>
Close
(
)
;
}
}
