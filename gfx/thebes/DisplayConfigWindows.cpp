#
include
<
iostream
>
#
include
<
windows
.
h
>
#
include
<
wingdi
.
h
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
DisplayConfigWindows
.
h
"
namespace
mozilla
{
namespace
gfx
{
using
namespace
std
;
struct
DisplayConfig
{
vector
<
DISPLAYCONFIG_PATH_INFO
>
mPaths
;
vector
<
DISPLAYCONFIG_MODE_INFO
>
mModes
;
}
;
optional
<
DisplayConfig
>
GetDisplayConfig
(
)
{
LONG
result
;
UINT32
numPaths
;
UINT32
numModes
;
vector
<
DISPLAYCONFIG_PATH_INFO
>
paths
;
vector
<
DISPLAYCONFIG_MODE_INFO
>
modes
;
do
{
result
=
GetDisplayConfigBufferSizes
(
QDC_ONLY_ACTIVE_PATHS
&
numPaths
&
numModes
)
;
if
(
result
!
=
ERROR_SUCCESS
)
{
return
{
}
;
}
paths
.
resize
(
numPaths
)
;
modes
.
resize
(
numModes
)
;
result
=
QueryDisplayConfig
(
QDC_ONLY_ACTIVE_PATHS
&
numPaths
paths
.
data
(
)
&
numModes
modes
.
data
(
)
NULL
)
;
}
while
(
result
=
=
ERROR_INSUFFICIENT_BUFFER
)
;
if
(
result
!
=
ERROR_SUCCESS
)
return
{
}
;
modes
.
resize
(
numModes
)
;
paths
.
resize
(
numPaths
)
;
return
DisplayConfig
{
paths
modes
}
;
}
bool
HasScaledResolution
(
)
{
auto
config
=
GetDisplayConfig
(
)
;
if
(
config
)
{
for
(
auto
&
path
:
config
-
>
mPaths
)
{
auto
&
modes
=
config
-
>
mModes
;
int
targetModeIndex
=
path
.
targetInfo
.
modeInfoIdx
;
int
sourceModeIndex
=
path
.
sourceInfo
.
modeInfoIdx
;
if
(
(
modes
[
targetModeIndex
]
.
targetMode
.
targetVideoSignalInfo
.
activeSize
.
cx
!
=
modes
[
sourceModeIndex
]
.
sourceMode
.
width
)
|
|
(
modes
[
targetModeIndex
]
.
targetMode
.
targetVideoSignalInfo
.
activeSize
.
cy
!
=
modes
[
sourceModeIndex
]
.
sourceMode
.
height
)
)
{
return
true
;
}
}
}
return
false
;
}
void
GetScaledResolutions
(
ScaledResolutionSet
&
aRv
)
{
auto
config
=
GetDisplayConfig
(
)
;
if
(
config
)
{
for
(
auto
&
path
:
config
-
>
mPaths
)
{
auto
&
modes
=
config
-
>
mModes
;
int
targetModeIndex
=
path
.
targetInfo
.
modeInfoIdx
;
int
sourceModeIndex
=
path
.
sourceInfo
.
modeInfoIdx
;
IntSize
src
(
modes
[
sourceModeIndex
]
.
sourceMode
.
width
modes
[
sourceModeIndex
]
.
sourceMode
.
height
)
;
IntSize
dst
(
modes
[
targetModeIndex
]
.
targetMode
.
targetVideoSignalInfo
.
activeSize
.
cx
modes
[
targetModeIndex
]
.
targetMode
.
targetVideoSignalInfo
.
activeSize
.
cy
)
;
if
(
src
!
=
dst
)
{
aRv
.
AppendElement
(
std
:
:
pair
<
IntSize
IntSize
>
{
src
dst
}
)
;
}
}
}
}
}
}
