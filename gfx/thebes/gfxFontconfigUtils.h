#
ifndef
GFX_FONTCONFIG_UTILS_H
#
define
GFX_FONTCONFIG_UTILS_H
#
include
"
gfxPlatform
.
h
"
#
include
"
nsAutoRef
.
h
"
#
include
"
gfxFT2FontBase
.
h
"
#
include
<
fontconfig
/
fontconfig
.
h
>
template
<
>
class
nsAutoRefTraits
<
FcPattern
>
:
public
nsPointerRefTraits
<
FcPattern
>
{
public
:
static
void
Release
(
FcPattern
*
ptr
)
{
FcPatternDestroy
(
ptr
)
;
}
static
void
AddRef
(
FcPattern
*
ptr
)
{
FcPatternReference
(
ptr
)
;
}
}
;
template
<
>
class
nsAutoRefTraits
<
FcFontSet
>
:
public
nsPointerRefTraits
<
FcFontSet
>
{
public
:
static
void
Release
(
FcFontSet
*
ptr
)
{
FcFontSetDestroy
(
ptr
)
;
}
}
;
template
<
>
class
nsAutoRefTraits
<
FcCharSet
>
:
public
nsPointerRefTraits
<
FcCharSet
>
{
public
:
static
void
Release
(
FcCharSet
*
ptr
)
{
FcCharSetDestroy
(
ptr
)
;
}
}
;
class
gfxFontconfigFontBase
:
public
gfxFT2FontBase
{
public
:
gfxFontconfigFontBase
(
cairo_scaled_font_t
*
aScaledFont
FcPattern
*
aPattern
gfxFontEntry
*
aFontEntry
const
gfxFontStyle
*
aFontStyle
)
:
gfxFT2FontBase
(
aScaledFont
aFontEntry
aFontStyle
)
mPattern
(
aPattern
)
{
}
virtual
FontType
GetType
(
)
const
override
{
return
FONT_TYPE_FONTCONFIG
;
}
virtual
FcPattern
*
GetPattern
(
)
const
{
return
mPattern
;
}
private
:
nsCountedRef
<
FcPattern
>
mPattern
;
}
;
#
endif
