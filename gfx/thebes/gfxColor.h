#
ifndef
GFX_COLOR_H
#
define
GFX_COLOR_H
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
define
GFX_DIVIDE_BY_255
(
v
)
\
(
(
(
(
(
unsigned
)
(
v
)
)
<
<
8
)
+
(
(
unsigned
)
(
v
)
)
+
255
)
>
>
16
)
uint8_t
MOZ_ALWAYS_INLINE
gfxPreMultiply
(
uint8_t
c
uint8_t
a
)
{
return
GFX_DIVIDE_BY_255
(
(
c
)
*
(
a
)
)
;
}
uint32_t
MOZ_ALWAYS_INLINE
gfxPackedPixelNoPreMultiply
(
uint8_t
a
uint8_t
r
uint8_t
g
uint8_t
b
)
{
return
(
(
(
a
)
<
<
mozilla
:
:
gfx
:
:
SurfaceFormatBit
:
:
OS_A
)
|
(
(
r
)
<
<
mozilla
:
:
gfx
:
:
SurfaceFormatBit
:
:
OS_R
)
|
(
(
g
)
<
<
mozilla
:
:
gfx
:
:
SurfaceFormatBit
:
:
OS_G
)
|
(
(
b
)
<
<
mozilla
:
:
gfx
:
:
SurfaceFormatBit
:
:
OS_B
)
)
;
}
uint32_t
MOZ_ALWAYS_INLINE
gfxPackedPixel
(
uint8_t
a
uint8_t
r
uint8_t
g
uint8_t
b
)
{
if
(
a
=
=
0x00
)
return
0x00000000
;
else
if
(
a
=
=
0xFF
)
{
return
gfxPackedPixelNoPreMultiply
(
a
r
g
b
)
;
}
else
{
return
(
(
a
)
<
<
mozilla
:
:
gfx
:
:
SurfaceFormatBit
:
:
OS_A
)
|
(
gfxPreMultiply
(
r
a
)
<
<
mozilla
:
:
gfx
:
:
SurfaceFormatBit
:
:
OS_R
)
|
(
gfxPreMultiply
(
g
a
)
<
<
mozilla
:
:
gfx
:
:
SurfaceFormatBit
:
:
OS_G
)
|
(
gfxPreMultiply
(
b
a
)
<
<
mozilla
:
:
gfx
:
:
SurfaceFormatBit
:
:
OS_B
)
;
}
}
#
endif
