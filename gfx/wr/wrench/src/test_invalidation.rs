use
crate
:
:
NotifierEvent
;
use
crate
:
:
WindowWrapper
;
use
std
:
:
path
:
:
PathBuf
;
use
std
:
:
sync
:
:
mpsc
:
:
Receiver
;
use
crate
:
:
wrench
:
:
{
Wrench
WrenchThing
}
;
use
crate
:
:
yaml_frame_reader
:
:
YamlFrameReader
;
use
webrender
:
:
{
PictureCacheDebugInfo
TileDebugInfo
}
;
use
webrender
:
:
api
:
:
units
:
:
*
;
pub
struct
TestHarness
<
'
a
>
{
wrench
:
&
'
a
mut
Wrench
window
:
&
'
a
mut
WindowWrapper
rx
:
Receiver
<
NotifierEvent
>
}
struct
RenderResult
{
pc_debug
:
PictureCacheDebugInfo
composite_needed
:
bool
}
fn
pr
(
x
:
f32
y
:
f32
w
:
f32
h
:
f32
)
-
>
PictureRect
{
PictureRect
:
:
from_origin_and_size
(
PicturePoint
:
:
new
(
x
y
)
PictureSize
:
:
new
(
w
h
)
)
}
impl
<
'
a
>
TestHarness
<
'
a
>
{
pub
fn
new
(
wrench
:
&
'
a
mut
Wrench
window
:
&
'
a
mut
WindowWrapper
rx
:
Receiver
<
NotifierEvent
>
)
-
>
Self
{
TestHarness
{
wrench
window
rx
}
}
pub
fn
run
(
mut
self
)
{
self
.
test_basic
(
)
;
self
.
test_composite_nop
(
)
;
}
fn
test_basic
(
&
mut
self
)
{
let
results
=
self
.
render_yaml
(
"
basic
"
)
;
let
tile_info
=
results
.
pc_debug
.
slice
(
0
)
.
tile
(
0
0
)
.
as_dirty
(
)
;
assert_eq
!
(
tile_info
.
local_valid_rect
pr
(
100
.
0
100
.
0
500
.
0
100
.
0
)
)
;
assert_eq
!
(
tile_info
.
local_dirty_rect
pr
(
100
.
0
100
.
0
500
.
0
100
.
0
)
)
;
let
results
=
self
.
render_yaml
(
"
basic
"
)
;
assert_eq
!
(
*
results
.
pc_debug
.
slice
(
0
)
.
tile
(
0
0
)
TileDebugInfo
:
:
Valid
)
;
}
fn
test_composite_nop
(
&
mut
self
)
{
let
results
=
self
.
render_yaml
(
"
composite_nop_1
"
)
;
let
tile_info
=
results
.
pc_debug
.
slice
(
0
)
.
tile
(
0
0
)
.
as_dirty
(
)
;
assert_eq
!
(
tile_info
.
local_valid_rect
pr
(
100
.
0
100
.
0
100
.
0
100
.
0
)
)
;
assert_eq
!
(
tile_info
.
local_dirty_rect
pr
(
100
.
0
100
.
0
100
.
0
100
.
0
)
)
;
let
results
=
self
.
render_yaml
(
"
composite_nop_2
"
)
;
let
tile_info
=
results
.
pc_debug
.
slice
(
0
)
.
tile
(
0
0
)
.
as_dirty
(
)
;
assert_eq
!
(
tile_info
.
local_valid_rect
pr
(
100
.
0
120
.
0
100
.
0
100
.
0
)
)
;
assert_eq
!
(
tile_info
.
local_dirty_rect
pr
(
100
.
0
120
.
0
100
.
0
100
.
0
)
)
;
assert
!
(
results
.
composite_needed
)
;
}
fn
render_yaml
(
&
mut
self
filename
:
&
str
)
-
>
RenderResult
{
let
path
=
format
!
(
"
invalidation
/
{
}
.
yaml
"
filename
)
;
let
mut
reader
=
YamlFrameReader
:
:
new
(
&
PathBuf
:
:
from
(
path
)
)
;
reader
.
do_frame
(
self
.
wrench
)
;
let
composite_needed
=
match
self
.
rx
.
recv
(
)
.
unwrap
(
)
{
NotifierEvent
:
:
WakeUp
{
composite_needed
}
=
>
composite_needed
NotifierEvent
:
:
ShutDown
=
>
unreachable
!
(
)
}
;
let
results
=
self
.
wrench
.
render
(
)
;
self
.
window
.
swap_buffers
(
)
;
RenderResult
{
pc_debug
:
results
.
picture_cache_debug
composite_needed
}
}
}
