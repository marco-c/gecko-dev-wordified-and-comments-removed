use
crate
:
:
NotifierEvent
;
use
crate
:
:
WindowWrapper
;
use
std
:
:
path
:
:
PathBuf
;
use
std
:
:
sync
:
:
mpsc
:
:
Receiver
;
use
crate
:
:
wrench
:
:
{
Wrench
WrenchThing
}
;
use
crate
:
:
yaml_frame_reader
:
:
YamlFrameReader
;
use
webrender
:
:
{
PictureCacheDebugInfo
TileDebugInfo
}
;
use
webrender
:
:
api
:
:
units
:
:
*
;
pub
struct
TestHarness
<
'
a
>
{
wrench
:
&
'
a
mut
Wrench
window
:
&
'
a
mut
WindowWrapper
rx
:
Receiver
<
NotifierEvent
>
}
fn
pr
(
x
:
f32
y
:
f32
w
:
f32
h
:
f32
)
-
>
PictureRect
{
PictureRect
:
:
new
(
PicturePoint
:
:
new
(
x
y
)
PictureSize
:
:
new
(
w
h
)
)
}
impl
<
'
a
>
TestHarness
<
'
a
>
{
pub
fn
new
(
wrench
:
&
'
a
mut
Wrench
window
:
&
'
a
mut
WindowWrapper
rx
:
Receiver
<
NotifierEvent
>
)
-
>
Self
{
TestHarness
{
wrench
window
rx
}
}
pub
fn
run
(
mut
self
)
{
self
.
test_basic
(
)
;
}
fn
test_basic
(
&
mut
self
)
{
let
results
=
self
.
render_yaml
(
"
basic
"
)
;
let
tile_info
=
results
.
slice
(
0
)
.
tile
(
0
0
)
.
as_dirty
(
)
;
assert_eq
!
(
tile_info
.
local_valid_rect
pr
(
100
.
0
100
.
0
500
.
0
100
.
0
)
)
;
assert_eq
!
(
tile_info
.
local_dirty_rect
pr
(
100
.
0
100
.
0
500
.
0
100
.
0
)
)
;
let
results
=
self
.
render_yaml
(
"
basic
"
)
;
assert_eq
!
(
*
results
.
slice
(
0
)
.
tile
(
0
0
)
TileDebugInfo
:
:
Valid
)
;
}
fn
render_yaml
(
&
mut
self
filename
:
&
str
)
-
>
PictureCacheDebugInfo
{
let
path
=
format
!
(
"
invalidation
/
{
}
.
yaml
"
filename
)
;
let
mut
reader
=
YamlFrameReader
:
:
new
(
&
PathBuf
:
:
from
(
path
)
)
;
reader
.
do_frame
(
self
.
wrench
)
;
self
.
rx
.
recv
(
)
.
unwrap
(
)
;
let
results
=
self
.
wrench
.
render
(
)
;
self
.
window
.
swap_buffers
(
)
;
results
.
picture_cache_debug
}
}
