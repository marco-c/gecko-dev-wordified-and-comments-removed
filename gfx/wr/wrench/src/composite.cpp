#
ifdef
_WIN32
#
include
<
d3d11
.
h
>
#
include
<
wrl
/
client
.
h
>
#
include
<
dcomp
.
h
>
#
include
<
assert
.
h
>
#
include
<
dxgi
.
h
>
#
include
<
stdio
.
h
>
using
namespace
Microsoft
:
:
WRL
;
class
Layer
{
public
:
Layer
(
int
width
int
height
const
ComPtr
<
IDXGIFactory2
>
&
dxgiFactory
const
ComPtr
<
ID3D11Device
>
&
d3dDevice
const
ComPtr
<
IDCompositionDesktopDevice
>
&
dCompDevice
)
{
HRESULT
hr
;
DXGI_SWAP_CHAIN_DESC1
desc
{
}
;
desc
.
Width
=
width
;
desc
.
Height
=
height
;
desc
.
Format
=
DXGI_FORMAT_B8G8R8A8_UNORM
;
desc
.
SampleDesc
.
Count
=
1
;
desc
.
SampleDesc
.
Quality
=
0
;
desc
.
BufferUsage
=
DXGI_USAGE_RENDER_TARGET_OUTPUT
;
desc
.
BufferCount
=
2
;
desc
.
Scaling
=
DXGI_SCALING_STRETCH
;
desc
.
SwapEffect
=
DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL
;
desc
.
AlphaMode
=
DXGI_ALPHA_MODE_IGNORE
;
desc
.
Flags
=
0
;
desc
.
AlphaMode
=
DXGI_ALPHA_MODE_PREMULTIPLIED
;
hr
=
dxgiFactory
-
>
CreateSwapChainForComposition
(
d3dDevice
.
Get
(
)
&
desc
nullptr
mSwapChain
.
GetAddressOf
(
)
)
;
assert
(
SUCCEEDED
(
hr
)
)
;
hr
=
dCompDevice
-
>
CreateVisual
(
mVisual
.
GetAddressOf
(
)
)
;
assert
(
SUCCEEDED
(
hr
)
)
;
mVisual
-
>
SetContent
(
mSwapChain
.
Get
(
)
)
;
hr
=
mSwapChain
-
>
GetBuffer
(
0
__uuidof
(
ID3D11Texture2D
)
(
void
*
*
)
mBackBuffer
.
GetAddressOf
(
)
)
;
assert
(
SUCCEEDED
(
hr
)
)
;
}
ComPtr
<
IDXGISwapChain1
>
mSwapChain
;
ComPtr
<
IDCompositionVisual2
>
mVisual
;
ComPtr
<
ID3D11Texture2D
>
mBackBuffer
;
}
;
class
Compositor
{
public
:
Compositor
(
ID3D11Device
*
aDevice
HWND
hWnd
)
:
pD3DDevice
(
aDevice
)
{
HRESULT
hr
;
hr
=
pD3DDevice
.
As
(
&
pDXGIDevice
)
;
assert
(
SUCCEEDED
(
hr
)
)
;
hr
=
DCompositionCreateDevice2
(
pDXGIDevice
.
Get
(
)
__uuidof
(
IDCompositionDesktopDevice
)
(
void
*
*
)
pDCompDevice
.
GetAddressOf
(
)
)
;
assert
(
SUCCEEDED
(
hr
)
)
;
hr
=
pDCompDevice
-
>
CreateTargetForHwnd
(
hWnd
TRUE
pCompositionTarget
.
GetAddressOf
(
)
)
;
assert
(
SUCCEEDED
(
hr
)
)
;
hr
=
pDCompDevice
-
>
CreateVisual
(
pRootVisual
.
GetAddressOf
(
)
)
;
assert
(
SUCCEEDED
(
hr
)
)
;
hr
=
pCompositionTarget
-
>
SetRoot
(
pRootVisual
.
Get
(
)
)
;
assert
(
SUCCEEDED
(
hr
)
)
;
pRootVisual
-
>
SetBitmapInterpolationMode
(
DCOMPOSITION_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR
)
;
hr
=
pDCompDevice
.
As
(
&
pDCompDebug
)
;
assert
(
SUCCEEDED
(
hr
)
)
;
pDCompDebug
-
>
EnableDebugCounters
(
)
;
hr
=
pDXGIDevice
-
>
GetAdapter
(
&
pDXGIAdapter
)
;
assert
(
SUCCEEDED
(
hr
)
)
;
hr
=
pDXGIAdapter
-
>
GetParent
(
__uuidof
(
IDXGIFactory2
)
(
void
*
*
)
pIDXGIFactory
.
GetAddressOf
(
)
)
;
assert
(
SUCCEEDED
(
hr
)
)
;
}
~
Compositor
(
)
{
}
Layer
*
create_layer
(
int
width
int
height
)
{
Layer
*
layer
=
new
Layer
(
width
height
pIDXGIFactory
pD3DDevice
pDCompDevice
)
;
HRESULT
hr
=
pRootVisual
-
>
AddVisual
(
layer
-
>
mVisual
.
Get
(
)
FALSE
nullptr
)
;
assert
(
SUCCEEDED
(
hr
)
)
;
return
layer
;
}
void
end_frame
(
)
{
pDCompDevice
-
>
Commit
(
)
;
}
private
:
ComPtr
<
ID3D11Device
>
pD3DDevice
;
ComPtr
<
IDXGIDevice
>
pDXGIDevice
;
ComPtr
<
IDCompositionDesktopDevice
>
pDCompDevice
;
ComPtr
<
IDCompositionTarget
>
pCompositionTarget
;
ComPtr
<
IDCompositionVisual2
>
pRootVisual
;
ComPtr
<
IDCompositionDeviceDebug
>
pDCompDebug
;
ComPtr
<
IDXGIAdapter
>
pDXGIAdapter
;
ComPtr
<
IDXGIFactory2
>
pIDXGIFactory
;
}
;
extern
"
C
"
{
Compositor
*
wrc_new
(
void
*
d3d11_device
void
*
hwnd
)
{
return
new
Compositor
(
static_cast
<
ID3D11Device
*
>
(
d3d11_device
)
static_cast
<
HWND
>
(
hwnd
)
)
;
}
void
wrc_delete
(
Compositor
*
compositor
)
{
delete
compositor
;
}
Layer
*
wrc_create_layer
(
Compositor
*
compositor
int
width
int
height
)
{
return
compositor
-
>
create_layer
(
width
height
)
;
}
void
*
wrc_get_layer_backbuffer
(
Layer
*
layer
)
{
void
*
p
=
layer
-
>
mBackBuffer
.
Get
(
)
;
return
p
;
}
void
wrc_present_layer
(
Layer
*
layer
)
{
layer
-
>
mSwapChain
-
>
Present
(
0
0
)
;
}
void
wrc_end_frame
(
Compositor
*
compositor
)
{
compositor
-
>
end_frame
(
)
;
}
}
#
endif
