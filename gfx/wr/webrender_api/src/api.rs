#
!
[
deny
(
missing_docs
)
]
extern
crate
serde_bytes
;
use
peek_poke
:
:
PeekPoke
;
use
std
:
:
cell
:
:
Cell
;
use
std
:
:
fmt
;
use
std
:
:
marker
:
:
PhantomData
;
use
std
:
:
os
:
:
raw
:
:
c_void
;
use
std
:
:
path
:
:
PathBuf
;
use
std
:
:
sync
:
:
Arc
;
use
std
:
:
u32
;
use
std
:
:
sync
:
:
mpsc
:
:
{
Sender
Receiver
channel
}
;
use
time
:
:
precise_time_ns
;
use
crate
:
:
{
display_item
as
di
font
}
;
use
crate
:
:
color
:
:
{
ColorU
ColorF
}
;
use
crate
:
:
display_list
:
:
BuiltDisplayList
;
use
crate
:
:
font
:
:
SharedFontInstanceMap
;
use
crate
:
:
image
:
:
{
BlobImageData
BlobImageKey
ImageData
ImageDescriptor
ImageKey
}
;
use
crate
:
:
image
:
:
{
BlobImageParams
BlobImageRequest
BlobImageResult
AsyncBlobImageRasterizer
BlobImageHandler
}
;
use
crate
:
:
image
:
:
DEFAULT_TILE_SIZE
;
use
crate
:
:
resources
:
:
ApiResources
;
use
crate
:
:
units
:
:
*
;
pub
type
TileSize
=
u16
;
pub
type
DocumentLayer
=
i8
;
#
[
derive
(
Copy
Clone
Deserialize
Serialize
)
]
pub
struct
QualitySettings
{
pub
force_subpixel_aa_where_possible
:
bool
}
impl
Default
for
QualitySettings
{
fn
default
(
)
-
>
Self
{
QualitySettings
{
force_subpixel_aa_where_possible
:
false
}
}
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
enum
ResourceUpdate
{
AddImage
(
AddImage
)
UpdateImage
(
UpdateImage
)
DeleteImage
(
ImageKey
)
AddBlobImage
(
AddBlobImage
)
UpdateBlobImage
(
UpdateBlobImage
)
DeleteBlobImage
(
BlobImageKey
)
SetBlobImageVisibleArea
(
BlobImageKey
DeviceIntRect
)
AddFont
(
AddFont
)
DeleteFont
(
font
:
:
FontKey
)
AddFontInstance
(
AddFontInstance
)
DeleteFontInstance
(
font
:
:
FontInstanceKey
)
}
impl
fmt
:
:
Debug
for
ResourceUpdate
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
match
self
{
ResourceUpdate
:
:
AddImage
(
ref
i
)
=
>
f
.
write_fmt
(
format_args
!
(
"
ResourceUpdate
:
:
AddImage
size
(
{
:
?
}
)
"
&
i
.
descriptor
.
size
)
)
ResourceUpdate
:
:
UpdateImage
(
ref
i
)
=
>
f
.
write_fmt
(
format_args
!
(
"
ResourceUpdate
:
:
UpdateImage
size
(
{
:
?
}
)
"
&
i
.
descriptor
.
size
)
)
ResourceUpdate
:
:
AddBlobImage
(
ref
i
)
=
>
f
.
write_fmt
(
format_args
!
(
"
ResourceUFpdate
:
:
AddBlobImage
size
(
{
:
?
}
)
"
&
i
.
descriptor
.
size
)
)
ResourceUpdate
:
:
UpdateBlobImage
(
i
)
=
>
f
.
write_fmt
(
format_args
!
(
"
ResourceUpdate
:
:
UpdateBlobImage
size
(
{
:
?
}
)
"
&
i
.
descriptor
.
size
)
)
ResourceUpdate
:
:
DeleteImage
(
.
.
)
=
>
f
.
write_str
(
"
ResourceUpdate
:
:
DeleteImage
"
)
ResourceUpdate
:
:
DeleteBlobImage
(
.
.
)
=
>
f
.
write_str
(
"
ResourceUpdate
:
:
DeleteBlobImage
"
)
ResourceUpdate
:
:
SetBlobImageVisibleArea
(
.
.
)
=
>
f
.
write_str
(
"
ResourceUpdate
:
:
SetBlobImageVisibleArea
"
)
ResourceUpdate
:
:
AddFont
(
.
.
)
=
>
f
.
write_str
(
"
ResourceUpdate
:
:
AddFont
"
)
ResourceUpdate
:
:
DeleteFont
(
.
.
)
=
>
f
.
write_str
(
"
ResourceUpdate
:
:
DeleteFont
"
)
ResourceUpdate
:
:
AddFontInstance
(
.
.
)
=
>
f
.
write_str
(
"
ResourceUpdate
:
:
AddFontInstance
"
)
ResourceUpdate
:
:
DeleteFontInstance
(
.
.
)
=
>
f
.
write_str
(
"
ResourceUpdate
:
:
DeleteFontInstance
"
)
}
}
}
pub
struct
Transaction
{
scene_ops
:
Vec
<
SceneMsg
>
frame_ops
:
Vec
<
FrameMsg
>
notifications
:
Vec
<
NotificationRequest
>
pub
resource_updates
:
Vec
<
ResourceUpdate
>
use_scene_builder_thread
:
bool
generate_frame
:
bool
pub
invalidate_rendered_frame
:
bool
low_priority
:
bool
}
impl
Transaction
{
pub
fn
new
(
)
-
>
Self
{
Transaction
{
scene_ops
:
Vec
:
:
new
(
)
frame_ops
:
Vec
:
:
new
(
)
resource_updates
:
Vec
:
:
new
(
)
notifications
:
Vec
:
:
new
(
)
use_scene_builder_thread
:
true
generate_frame
:
false
invalidate_rendered_frame
:
false
low_priority
:
false
}
}
pub
fn
skip_scene_builder
(
&
mut
self
)
{
self
.
use_scene_builder_thread
=
false
;
}
pub
fn
use_scene_builder_thread
(
&
mut
self
)
{
self
.
use_scene_builder_thread
=
true
;
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
!
self
.
generate_frame
&
&
!
self
.
invalidate_rendered_frame
&
&
self
.
scene_ops
.
is_empty
(
)
&
&
self
.
frame_ops
.
is_empty
(
)
&
&
self
.
resource_updates
.
is_empty
(
)
&
&
self
.
notifications
.
is_empty
(
)
}
pub
fn
update_epoch
(
&
mut
self
pipeline_id
:
PipelineId
epoch
:
Epoch
)
{
self
.
scene_ops
.
push
(
SceneMsg
:
:
UpdateEpoch
(
pipeline_id
epoch
)
)
;
self
.
frame_ops
.
push
(
FrameMsg
:
:
UpdateEpoch
(
pipeline_id
epoch
)
)
;
}
pub
fn
set_root_pipeline
(
&
mut
self
pipeline_id
:
PipelineId
)
{
self
.
scene_ops
.
push
(
SceneMsg
:
:
SetRootPipeline
(
pipeline_id
)
)
;
}
pub
fn
remove_pipeline
(
&
mut
self
pipeline_id
:
PipelineId
)
{
self
.
scene_ops
.
push
(
SceneMsg
:
:
RemovePipeline
(
pipeline_id
)
)
;
}
pub
fn
set_display_list
(
&
mut
self
epoch
:
Epoch
background
:
Option
<
ColorF
>
viewport_size
:
LayoutSize
(
pipeline_id
content_size
mut
display_list
)
:
(
PipelineId
LayoutSize
BuiltDisplayList
)
preserve_frame_state
:
bool
)
{
display_list
.
set_send_time_ns
(
precise_time_ns
(
)
)
;
self
.
scene_ops
.
push
(
SceneMsg
:
:
SetDisplayList
{
display_list
epoch
pipeline_id
background
viewport_size
content_size
preserve_frame_state
}
)
;
}
pub
fn
update_resources
(
&
mut
self
mut
resources
:
Vec
<
ResourceUpdate
>
)
{
self
.
resource_updates
.
append
(
&
mut
resources
)
;
}
pub
fn
notify
(
&
mut
self
event
:
NotificationRequest
)
{
self
.
notifications
.
push
(
event
)
;
}
pub
fn
set_document_view
(
&
mut
self
device_rect
:
DeviceIntRect
device_pixel_ratio
:
f32
)
{
assert
!
(
device_pixel_ratio
>
0
.
0
)
;
window_size_sanity_check
(
device_rect
.
size
)
;
self
.
scene_ops
.
push
(
SceneMsg
:
:
SetDocumentView
{
device_rect
device_pixel_ratio
}
)
;
}
pub
fn
enable_frame_output
(
&
mut
self
pipeline_id
:
PipelineId
enable
:
bool
)
{
self
.
scene_ops
.
push
(
SceneMsg
:
:
EnableFrameOutput
(
pipeline_id
enable
)
)
;
}
pub
fn
scroll
(
&
mut
self
scroll_location
:
ScrollLocation
cursor
:
WorldPoint
)
{
self
.
frame_ops
.
push
(
FrameMsg
:
:
Scroll
(
scroll_location
cursor
)
)
;
}
pub
fn
scroll_node_with_id
(
&
mut
self
origin
:
LayoutPoint
id
:
di
:
:
ExternalScrollId
clamp
:
ScrollClamping
)
{
self
.
frame_ops
.
push
(
FrameMsg
:
:
ScrollNodeWithId
(
origin
id
clamp
)
)
;
}
pub
fn
set_quality_settings
(
&
mut
self
settings
:
QualitySettings
)
{
self
.
scene_ops
.
push
(
SceneMsg
:
:
SetQualitySettings
{
settings
}
)
;
}
pub
fn
set_page_zoom
(
&
mut
self
page_zoom
:
ZoomFactor
)
{
self
.
scene_ops
.
push
(
SceneMsg
:
:
SetPageZoom
(
page_zoom
)
)
;
}
pub
fn
set_pinch_zoom
(
&
mut
self
pinch_zoom
:
ZoomFactor
)
{
self
.
frame_ops
.
push
(
FrameMsg
:
:
SetPinchZoom
(
pinch_zoom
)
)
;
}
pub
fn
set_is_transform_async_zooming
(
&
mut
self
is_zooming
:
bool
animation_id
:
PropertyBindingId
)
{
self
.
frame_ops
.
push
(
FrameMsg
:
:
SetIsTransformAsyncZooming
(
is_zooming
animation_id
)
)
;
}
pub
fn
set_pan
(
&
mut
self
pan
:
DeviceIntPoint
)
{
self
.
frame_ops
.
push
(
FrameMsg
:
:
SetPan
(
pan
)
)
;
}
pub
fn
generate_frame
(
&
mut
self
)
{
self
.
generate_frame
=
true
;
}
pub
fn
invalidate_rendered_frame
(
&
mut
self
)
{
self
.
invalidate_rendered_frame
=
true
;
}
pub
fn
update_dynamic_properties
(
&
mut
self
properties
:
DynamicProperties
)
{
self
.
frame_ops
.
push
(
FrameMsg
:
:
UpdateDynamicProperties
(
properties
)
)
;
}
pub
fn
append_dynamic_transform_properties
(
&
mut
self
transforms
:
Vec
<
PropertyValue
<
LayoutTransform
>
>
)
{
self
.
frame_ops
.
push
(
FrameMsg
:
:
AppendDynamicTransformProperties
(
transforms
)
)
;
}
pub
fn
get_frame_ops
(
self
)
-
>
Vec
<
FrameMsg
>
{
self
.
frame_ops
}
fn
finalize
(
self
document_id
:
DocumentId
)
-
>
Box
<
TransactionMsg
>
{
Box
:
:
new
(
TransactionMsg
{
document_id
scene_ops
:
self
.
scene_ops
frame_ops
:
self
.
frame_ops
resource_updates
:
self
.
resource_updates
notifications
:
self
.
notifications
use_scene_builder_thread
:
self
.
use_scene_builder_thread
generate_frame
:
self
.
generate_frame
invalidate_rendered_frame
:
self
.
invalidate_rendered_frame
low_priority
:
self
.
low_priority
blob_rasterizer
:
None
blob_requests
:
Vec
:
:
new
(
)
rasterized_blobs
:
Vec
:
:
new
(
)
}
)
}
pub
fn
add_image
(
&
mut
self
key
:
ImageKey
descriptor
:
ImageDescriptor
data
:
ImageData
tiling
:
Option
<
TileSize
>
)
{
self
.
resource_updates
.
push
(
ResourceUpdate
:
:
AddImage
(
AddImage
{
key
descriptor
data
tiling
}
)
)
;
}
pub
fn
update_image
(
&
mut
self
key
:
ImageKey
descriptor
:
ImageDescriptor
data
:
ImageData
dirty_rect
:
&
ImageDirtyRect
)
{
self
.
resource_updates
.
push
(
ResourceUpdate
:
:
UpdateImage
(
UpdateImage
{
key
descriptor
data
dirty_rect
:
*
dirty_rect
}
)
)
;
}
pub
fn
delete_image
(
&
mut
self
key
:
ImageKey
)
{
self
.
resource_updates
.
push
(
ResourceUpdate
:
:
DeleteImage
(
key
)
)
;
}
pub
fn
add_blob_image
(
&
mut
self
key
:
BlobImageKey
descriptor
:
ImageDescriptor
data
:
Arc
<
BlobImageData
>
visible_rect
:
DeviceIntRect
tile_size
:
Option
<
TileSize
>
)
{
self
.
resource_updates
.
push
(
ResourceUpdate
:
:
AddBlobImage
(
AddBlobImage
{
key
descriptor
data
visible_rect
tile_size
:
tile_size
.
unwrap_or
(
DEFAULT_TILE_SIZE
)
}
)
)
;
}
pub
fn
update_blob_image
(
&
mut
self
key
:
BlobImageKey
descriptor
:
ImageDescriptor
data
:
Arc
<
BlobImageData
>
visible_rect
:
DeviceIntRect
dirty_rect
:
&
BlobDirtyRect
)
{
self
.
resource_updates
.
push
(
ResourceUpdate
:
:
UpdateBlobImage
(
UpdateBlobImage
{
key
descriptor
data
visible_rect
dirty_rect
:
*
dirty_rect
}
)
)
;
}
pub
fn
delete_blob_image
(
&
mut
self
key
:
BlobImageKey
)
{
self
.
resource_updates
.
push
(
ResourceUpdate
:
:
DeleteBlobImage
(
key
)
)
;
}
pub
fn
set_blob_image_visible_area
(
&
mut
self
key
:
BlobImageKey
area
:
DeviceIntRect
)
{
self
.
resource_updates
.
push
(
ResourceUpdate
:
:
SetBlobImageVisibleArea
(
key
area
)
)
}
pub
fn
add_raw_font
(
&
mut
self
key
:
font
:
:
FontKey
bytes
:
Vec
<
u8
>
index
:
u32
)
{
self
.
resource_updates
.
push
(
ResourceUpdate
:
:
AddFont
(
AddFont
:
:
Raw
(
key
Arc
:
:
new
(
bytes
)
index
)
)
)
;
}
pub
fn
add_native_font
(
&
mut
self
key
:
font
:
:
FontKey
native_handle
:
font
:
:
NativeFontHandle
)
{
self
.
resource_updates
.
push
(
ResourceUpdate
:
:
AddFont
(
AddFont
:
:
Native
(
key
native_handle
)
)
)
;
}
pub
fn
delete_font
(
&
mut
self
key
:
font
:
:
FontKey
)
{
self
.
resource_updates
.
push
(
ResourceUpdate
:
:
DeleteFont
(
key
)
)
;
}
pub
fn
add_font_instance
(
&
mut
self
key
:
font
:
:
FontInstanceKey
font_key
:
font
:
:
FontKey
glyph_size
:
f32
options
:
Option
<
font
:
:
FontInstanceOptions
>
platform_options
:
Option
<
font
:
:
FontInstancePlatformOptions
>
variations
:
Vec
<
font
:
:
FontVariation
>
)
{
self
.
resource_updates
.
push
(
ResourceUpdate
:
:
AddFontInstance
(
AddFontInstance
{
key
font_key
glyph_size
options
platform_options
variations
}
)
)
;
}
pub
fn
delete_font_instance
(
&
mut
self
key
:
font
:
:
FontInstanceKey
)
{
self
.
resource_updates
.
push
(
ResourceUpdate
:
:
DeleteFontInstance
(
key
)
)
;
}
pub
fn
set_low_priority
(
&
mut
self
low_priority
:
bool
)
{
self
.
low_priority
=
low_priority
;
}
pub
fn
is_low_priority
(
&
self
)
-
>
bool
{
self
.
low_priority
}
}
pub
struct
DocumentTransaction
{
pub
document_id
:
DocumentId
pub
transaction
:
Transaction
}
pub
struct
TransactionMsg
{
pub
document_id
:
DocumentId
pub
scene_ops
:
Vec
<
SceneMsg
>
pub
frame_ops
:
Vec
<
FrameMsg
>
pub
resource_updates
:
Vec
<
ResourceUpdate
>
pub
generate_frame
:
bool
pub
invalidate_rendered_frame
:
bool
pub
use_scene_builder_thread
:
bool
pub
low_priority
:
bool
pub
notifications
:
Vec
<
NotificationRequest
>
pub
blob_rasterizer
:
Option
<
Box
<
dyn
AsyncBlobImageRasterizer
>
>
pub
blob_requests
:
Vec
<
BlobImageParams
>
pub
rasterized_blobs
:
Vec
<
(
BlobImageRequest
BlobImageResult
)
>
}
impl
fmt
:
:
Debug
for
TransactionMsg
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
writeln
!
(
f
"
threaded
=
{
}
genframe
=
{
}
invalidate
=
{
}
low_priority
=
{
}
"
self
.
use_scene_builder_thread
self
.
generate_frame
self
.
invalidate_rendered_frame
self
.
low_priority
)
.
unwrap
(
)
;
for
scene_op
in
&
self
.
scene_ops
{
writeln
!
(
f
"
\
t
\
t
{
:
?
}
"
scene_op
)
.
unwrap
(
)
;
}
for
frame_op
in
&
self
.
frame_ops
{
writeln
!
(
f
"
\
t
\
t
{
:
?
}
"
frame_op
)
.
unwrap
(
)
;
}
for
resource_update
in
&
self
.
resource_updates
{
writeln
!
(
f
"
\
t
\
t
{
:
?
}
"
resource_update
)
.
unwrap
(
)
;
}
Ok
(
(
)
)
}
}
impl
TransactionMsg
{
pub
fn
is_empty
(
&
self
)
-
>
bool
{
!
self
.
generate_frame
&
&
!
self
.
invalidate_rendered_frame
&
&
self
.
scene_ops
.
is_empty
(
)
&
&
self
.
frame_ops
.
is_empty
(
)
&
&
self
.
resource_updates
.
is_empty
(
)
&
&
self
.
notifications
.
is_empty
(
)
}
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
AddImage
{
pub
key
:
ImageKey
pub
descriptor
:
ImageDescriptor
pub
data
:
ImageData
pub
tiling
:
Option
<
TileSize
>
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
UpdateImage
{
pub
key
:
ImageKey
pub
descriptor
:
ImageDescriptor
pub
data
:
ImageData
pub
dirty_rect
:
ImageDirtyRect
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
AddBlobImage
{
pub
key
:
BlobImageKey
pub
descriptor
:
ImageDescriptor
pub
data
:
Arc
<
BlobImageData
>
pub
visible_rect
:
DeviceIntRect
pub
tile_size
:
TileSize
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
UpdateBlobImage
{
pub
key
:
BlobImageKey
pub
descriptor
:
ImageDescriptor
pub
data
:
Arc
<
BlobImageData
>
pub
visible_rect
:
DeviceIntRect
pub
dirty_rect
:
BlobDirtyRect
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
enum
AddFont
{
Raw
(
font
:
:
FontKey
Arc
<
Vec
<
u8
>
>
u32
)
Native
(
font
:
:
FontKey
font
:
:
NativeFontHandle
)
}
#
[
derive
(
Clone
Debug
Deserialize
PartialEq
Serialize
)
]
pub
struct
HitTestItem
{
pub
pipeline
:
PipelineId
pub
tag
:
di
:
:
ItemTag
pub
point_in_viewport
:
LayoutPoint
pub
point_relative_to_item
:
LayoutPoint
}
#
[
derive
(
Clone
Debug
Default
Deserialize
Serialize
)
]
pub
struct
HitTestResult
{
pub
items
:
Vec
<
HitTestItem
>
}
bitflags
!
{
#
[
derive
(
Deserialize
MallocSizeOf
Serialize
)
]
/
/
/
pub
struct
HitTestFlags
:
u8
{
/
/
/
const
FIND_ALL
=
0b00000001
;
/
/
/
const
POINT_RELATIVE_TO_PIPELINE_VIEWPORT
=
0b00000010
;
}
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
AddFontInstance
{
pub
key
:
font
:
:
FontInstanceKey
pub
font_key
:
font
:
:
FontKey
pub
glyph_size
:
f32
pub
options
:
Option
<
font
:
:
FontInstanceOptions
>
pub
platform_options
:
Option
<
font
:
:
FontInstancePlatformOptions
>
pub
variations
:
Vec
<
font
:
:
FontVariation
>
}
pub
enum
SceneMsg
{
UpdateEpoch
(
PipelineId
Epoch
)
SetPageZoom
(
ZoomFactor
)
SetRootPipeline
(
PipelineId
)
RemovePipeline
(
PipelineId
)
EnableFrameOutput
(
PipelineId
bool
)
SetDisplayList
{
display_list
:
BuiltDisplayList
epoch
:
Epoch
pipeline_id
:
PipelineId
background
:
Option
<
ColorF
>
viewport_size
:
LayoutSize
content_size
:
LayoutSize
preserve_frame_state
:
bool
}
SetDocumentView
{
device_rect
:
DeviceIntRect
device_pixel_ratio
:
f32
}
SetQualitySettings
{
settings
:
QualitySettings
}
}
pub
enum
FrameMsg
{
UpdateEpoch
(
PipelineId
Epoch
)
HitTest
(
Option
<
PipelineId
>
WorldPoint
HitTestFlags
Sender
<
HitTestResult
>
)
RequestHitTester
(
Sender
<
Arc
<
dyn
ApiHitTester
>
>
)
SetPan
(
DeviceIntPoint
)
Scroll
(
ScrollLocation
WorldPoint
)
ScrollNodeWithId
(
LayoutPoint
di
:
:
ExternalScrollId
ScrollClamping
)
GetScrollNodeState
(
Sender
<
Vec
<
ScrollNodeState
>
>
)
UpdateDynamicProperties
(
DynamicProperties
)
AppendDynamicTransformProperties
(
Vec
<
PropertyValue
<
LayoutTransform
>
>
)
SetPinchZoom
(
ZoomFactor
)
SetIsTransformAsyncZooming
(
bool
PropertyBindingId
)
}
impl
fmt
:
:
Debug
for
SceneMsg
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
match
*
self
{
SceneMsg
:
:
UpdateEpoch
(
.
.
)
=
>
"
SceneMsg
:
:
UpdateEpoch
"
SceneMsg
:
:
SetDisplayList
{
.
.
}
=
>
"
SceneMsg
:
:
SetDisplayList
"
SceneMsg
:
:
SetPageZoom
(
.
.
)
=
>
"
SceneMsg
:
:
SetPageZoom
"
SceneMsg
:
:
RemovePipeline
(
.
.
)
=
>
"
SceneMsg
:
:
RemovePipeline
"
SceneMsg
:
:
EnableFrameOutput
(
.
.
)
=
>
"
SceneMsg
:
:
EnableFrameOutput
"
SceneMsg
:
:
SetDocumentView
{
.
.
}
=
>
"
SceneMsg
:
:
SetDocumentView
"
SceneMsg
:
:
SetRootPipeline
(
.
.
)
=
>
"
SceneMsg
:
:
SetRootPipeline
"
SceneMsg
:
:
SetQualitySettings
{
.
.
}
=
>
"
SceneMsg
:
:
SetQualitySettings
"
}
)
}
}
impl
fmt
:
:
Debug
for
FrameMsg
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
match
*
self
{
FrameMsg
:
:
UpdateEpoch
(
.
.
)
=
>
"
FrameMsg
:
:
UpdateEpoch
"
FrameMsg
:
:
HitTest
(
.
.
)
=
>
"
FrameMsg
:
:
HitTest
"
FrameMsg
:
:
RequestHitTester
(
.
.
)
=
>
"
FrameMsg
:
:
RequestHitTester
"
FrameMsg
:
:
SetPan
(
.
.
)
=
>
"
FrameMsg
:
:
SetPan
"
FrameMsg
:
:
Scroll
(
.
.
)
=
>
"
FrameMsg
:
:
Scroll
"
FrameMsg
:
:
ScrollNodeWithId
(
.
.
)
=
>
"
FrameMsg
:
:
ScrollNodeWithId
"
FrameMsg
:
:
GetScrollNodeState
(
.
.
)
=
>
"
FrameMsg
:
:
GetScrollNodeState
"
FrameMsg
:
:
UpdateDynamicProperties
(
.
.
)
=
>
"
FrameMsg
:
:
UpdateDynamicProperties
"
FrameMsg
:
:
AppendDynamicTransformProperties
(
.
.
)
=
>
"
FrameMsg
:
:
AppendDynamicTransformProperties
"
FrameMsg
:
:
SetPinchZoom
(
.
.
)
=
>
"
FrameMsg
:
:
SetPinchZoom
"
FrameMsg
:
:
SetIsTransformAsyncZooming
(
.
.
)
=
>
"
FrameMsg
:
:
SetIsTransformAsyncZooming
"
}
)
}
}
bitflags
!
{
/
/
/
Bit
flags
for
WR
stages
to
store
in
a
capture
.
/
/
Note
:
capturing
FRAME
without
SCENE
is
not
currently
supported
.
pub
struct
CaptureBits
:
u8
{
/
/
/
const
SCENE
=
0x1
;
/
/
/
const
FRAME
=
0x2
;
/
/
/
const
TILE_CACHE
=
0x4
;
/
/
/
const
EXTERNAL_RESOURCES
=
0x8
;
}
}
bitflags
!
{
/
/
/
Mask
for
clearing
caches
in
debug
commands
.
pub
struct
ClearCache
:
u8
{
/
/
/
const
IMAGES
=
0b1
;
/
/
/
const
GLYPHS
=
0b01
;
/
/
/
const
GLYPH_DIMENSIONS
=
0b001
;
/
/
/
const
RENDER_TASKS
=
0b0001
;
/
/
/
const
TEXTURE_CACHE
=
0b00001
;
}
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
CapturedDocument
{
pub
document_id
:
DocumentId
pub
root_pipeline_id
:
Option
<
PipelineId
>
}
#
[
derive
(
Clone
)
]
pub
enum
DebugCommand
{
SetFlags
(
DebugFlags
)
EnableDualSourceBlending
(
bool
)
FetchDocuments
FetchPasses
FetchClipScrollTree
FetchRenderTasks
FetchScreenshot
SaveCapture
(
PathBuf
CaptureBits
)
LoadCapture
(
PathBuf
Option
<
(
u32
u32
)
>
Sender
<
CapturedDocument
>
)
StartCaptureSequence
(
PathBuf
CaptureBits
)
StopCaptureSequence
ClearCaches
(
ClearCache
)
EnableNativeCompositor
(
bool
)
EnableMultithreading
(
bool
)
SetBatchingLookback
(
u32
)
InvalidateGpuCache
SimulateLongSceneBuild
(
u32
)
SimulateLongLowPrioritySceneBuild
(
u32
)
SetPictureTileSize
(
Option
<
DeviceIntSize
>
)
}
pub
enum
ApiMsg
{
GetGlyphDimensions
(
font
:
:
GlyphDimensionRequest
)
GetGlyphIndices
(
font
:
:
GlyphIndexRequest
)
CloneApi
(
Sender
<
IdNamespace
>
)
CloneApiByClient
(
IdNamespace
)
AddDocument
(
DocumentId
DeviceIntSize
DocumentLayer
)
UpdateDocuments
(
Vec
<
Box
<
TransactionMsg
>
>
)
DeleteDocument
(
DocumentId
)
ExternalEvent
(
ExternalEvent
)
ClearNamespace
(
IdNamespace
)
MemoryPressure
ReportMemory
(
Sender
<
Box
<
MemoryReport
>
>
)
DebugCommand
(
DebugCommand
)
WakeUp
WakeSceneBuilder
FlushSceneBuilder
(
Sender
<
(
)
>
)
ShutDown
(
Option
<
Sender
<
(
)
>
>
)
}
impl
fmt
:
:
Debug
for
ApiMsg
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
match
*
self
{
ApiMsg
:
:
GetGlyphDimensions
(
.
.
)
=
>
"
ApiMsg
:
:
GetGlyphDimensions
"
ApiMsg
:
:
GetGlyphIndices
(
.
.
)
=
>
"
ApiMsg
:
:
GetGlyphIndices
"
ApiMsg
:
:
CloneApi
(
.
.
)
=
>
"
ApiMsg
:
:
CloneApi
"
ApiMsg
:
:
CloneApiByClient
(
.
.
)
=
>
"
ApiMsg
:
:
CloneApiByClient
"
ApiMsg
:
:
AddDocument
(
.
.
)
=
>
"
ApiMsg
:
:
AddDocument
"
ApiMsg
:
:
UpdateDocuments
(
.
.
)
=
>
"
ApiMsg
:
:
UpdateDocuments
"
ApiMsg
:
:
DeleteDocument
(
.
.
)
=
>
"
ApiMsg
:
:
DeleteDocument
"
ApiMsg
:
:
ExternalEvent
(
.
.
)
=
>
"
ApiMsg
:
:
ExternalEvent
"
ApiMsg
:
:
ClearNamespace
(
.
.
)
=
>
"
ApiMsg
:
:
ClearNamespace
"
ApiMsg
:
:
MemoryPressure
=
>
"
ApiMsg
:
:
MemoryPressure
"
ApiMsg
:
:
ReportMemory
(
.
.
)
=
>
"
ApiMsg
:
:
ReportMemory
"
ApiMsg
:
:
DebugCommand
(
.
.
)
=
>
"
ApiMsg
:
:
DebugCommand
"
ApiMsg
:
:
ShutDown
(
.
.
)
=
>
"
ApiMsg
:
:
ShutDown
"
ApiMsg
:
:
WakeUp
=
>
"
ApiMsg
:
:
WakeUp
"
ApiMsg
:
:
WakeSceneBuilder
=
>
"
ApiMsg
:
:
WakeSceneBuilder
"
ApiMsg
:
:
FlushSceneBuilder
(
.
.
)
=
>
"
ApiMsg
:
:
FlushSceneBuilder
"
}
)
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Deserialize
Eq
Hash
Ord
PartialEq
PartialOrd
Serialize
)
]
pub
struct
Epoch
(
pub
u32
)
;
impl
Epoch
{
pub
fn
invalid
(
)
-
>
Epoch
{
Epoch
(
u32
:
:
MAX
)
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Default
Eq
MallocSizeOf
PartialEq
Hash
Ord
PartialOrd
PeekPoke
)
]
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
IdNamespace
(
pub
u32
)
;
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Deserialize
Eq
Hash
MallocSizeOf
PartialEq
Serialize
PeekPoke
)
]
pub
struct
DocumentId
{
pub
namespace_id
:
IdNamespace
pub
id
:
u32
}
impl
DocumentId
{
pub
fn
new
(
namespace_id
:
IdNamespace
id
:
u32
)
-
>
Self
{
DocumentId
{
namespace_id
id
}
}
pub
const
INVALID
:
DocumentId
=
DocumentId
{
namespace_id
:
IdNamespace
(
0
)
id
:
0
}
;
}
pub
type
PipelineSourceId
=
u32
;
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Deserialize
Eq
Hash
MallocSizeOf
PartialEq
Serialize
PeekPoke
)
]
pub
struct
PipelineId
(
pub
PipelineSourceId
pub
u32
)
;
impl
Default
for
PipelineId
{
fn
default
(
)
-
>
Self
{
PipelineId
:
:
dummy
(
)
}
}
impl
PipelineId
{
pub
fn
dummy
(
)
-
>
Self
{
PipelineId
(
0
0
)
}
}
#
[
derive
(
Copy
Clone
Debug
MallocSizeOf
Serialize
Deserialize
)
]
pub
enum
ClipIntern
{
}
#
[
derive
(
Copy
Clone
Debug
MallocSizeOf
Serialize
Deserialize
)
]
pub
enum
FilterDataIntern
{
}
#
[
derive
(
Debug
Clone
Eq
MallocSizeOf
PartialEq
Hash
Serialize
Deserialize
)
]
pub
enum
PrimitiveKeyKind
{
Clear
Rectangle
{
color
:
PropertyBinding
<
ColorU
>
}
}
#
[
macro_export
]
macro_rules
!
enumerate_interners
{
(
macro_name
:
ident
)
=
>
{
macro_name
!
{
clip
:
ClipIntern
prim
:
PrimitiveKeyKind
normal_border
:
NormalBorderPrim
image_border
:
ImageBorder
image
:
Image
yuv_image
:
YuvImage
line_decoration
:
LineDecoration
linear_grad
:
LinearGradient
radial_grad
:
RadialGradient
conic_grad
:
ConicGradient
picture
:
Picture
text_run
:
TextRun
filter_data
:
FilterDataIntern
backdrop
:
Backdrop
}
}
}
macro_rules
!
declare_interning_memory_report
{
(
(
name
:
ident
:
ty
:
ident
)
+
)
=
>
{
/
/
/
#
[
repr
(
C
)
]
#
[
derive
(
AddAssign
Clone
Debug
Default
)
]
pub
struct
InternerSubReport
{
(
/
/
/
pub
name
:
usize
)
+
}
}
}
enumerate_interners
!
(
declare_interning_memory_report
)
;
/
/
/
cbindgen
:
derive
-
eq
=
false
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Debug
Default
)
]
pub
struct
InterningMemoryReport
{
pub
interners
:
InternerSubReport
pub
data_stores
:
InternerSubReport
}
impl
:
:
std
:
:
ops
:
:
AddAssign
for
InterningMemoryReport
{
fn
add_assign
(
&
mut
self
other
:
InterningMemoryReport
)
{
self
.
interners
+
=
other
.
interners
;
self
.
data_stores
+
=
other
.
data_stores
;
}
}
/
/
/
cbindgen
:
derive
-
eq
=
false
#
[
repr
(
C
)
]
#
[
allow
(
missing_docs
)
]
#
[
derive
(
AddAssign
Clone
Debug
Default
)
]
pub
struct
MemoryReport
{
pub
clip_stores
:
usize
pub
gpu_cache_metadata
:
usize
pub
gpu_cache_cpu_mirror
:
usize
pub
render_tasks
:
usize
pub
hit_testers
:
usize
pub
fonts
:
usize
pub
images
:
usize
pub
rasterized_blobs
:
usize
pub
shader_cache
:
usize
pub
interning
:
InterningMemoryReport
pub
display_list
:
usize
pub
gpu_cache_textures
:
usize
pub
vertex_data_textures
:
usize
pub
render_target_textures
:
usize
pub
texture_cache_textures
:
usize
pub
depth_target_textures
:
usize
pub
swap_chain
:
usize
}
pub
type
VoidPtrToSizeFn
=
unsafe
extern
"
C
"
fn
(
ptr
:
*
const
c_void
)
-
>
usize
;
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Deserialize
Serialize
)
]
struct
ResourceId
(
pub
u32
)
;
#
[
repr
(
C
)
]
#
[
derive
(
Clone
)
]
pub
struct
ExternalEvent
{
raw
:
usize
}
unsafe
impl
Send
for
ExternalEvent
{
}
impl
ExternalEvent
{
pub
fn
from_raw
(
raw
:
usize
)
-
>
Self
{
ExternalEvent
{
raw
}
}
pub
fn
unwrap
(
self
)
-
>
usize
{
self
.
raw
}
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
enum
ScrollClamping
{
ToContentBounds
NoClamping
}
pub
struct
RenderApiSender
{
api_sender
:
Sender
<
ApiMsg
>
blob_image_handler
:
Option
<
Box
<
dyn
BlobImageHandler
>
>
shared_font_instances
:
SharedFontInstanceMap
}
impl
RenderApiSender
{
pub
fn
new
(
api_sender
:
Sender
<
ApiMsg
>
blob_image_handler
:
Option
<
Box
<
dyn
BlobImageHandler
>
>
shared_font_instances
:
SharedFontInstanceMap
)
-
>
Self
{
RenderApiSender
{
api_sender
blob_image_handler
shared_font_instances
}
}
pub
fn
create_api
(
&
self
)
-
>
RenderApi
{
let
(
sync_tx
sync_rx
)
=
channel
(
)
;
let
msg
=
ApiMsg
:
:
CloneApi
(
sync_tx
)
;
self
.
api_sender
.
send
(
msg
)
.
expect
(
"
Failed
to
send
CloneApi
message
"
)
;
let
namespace_id
=
match
sync_rx
.
recv
(
)
{
Ok
(
id
)
=
>
id
Err
(
e
)
=
>
{
let
webrender_is_alive
=
self
.
api_sender
.
send
(
ApiMsg
:
:
WakeUp
)
;
if
webrender_is_alive
.
is_err
(
)
{
panic
!
(
"
WebRender
was
shut
down
before
processing
CloneApi
:
{
}
"
e
)
;
}
else
{
panic
!
(
"
CloneApi
message
response
was
dropped
while
WebRender
was
still
alive
:
{
}
"
e
)
;
}
}
}
;
RenderApi
{
api_sender
:
self
.
api_sender
.
clone
(
)
namespace_id
next_id
:
Cell
:
:
new
(
ResourceId
(
0
)
)
resources
:
ApiResources
:
:
new
(
self
.
blob_image_handler
.
as_ref
(
)
.
map
(
|
handler
|
handler
.
create_similar
(
)
)
self
.
shared_font_instances
.
clone
(
)
)
}
}
pub
fn
create_api_by_client
(
&
self
namespace_id
:
IdNamespace
)
-
>
RenderApi
{
let
msg
=
ApiMsg
:
:
CloneApiByClient
(
namespace_id
)
;
self
.
api_sender
.
send
(
msg
)
.
expect
(
"
Failed
to
send
CloneApiByClient
message
"
)
;
RenderApi
{
api_sender
:
self
.
api_sender
.
clone
(
)
namespace_id
next_id
:
Cell
:
:
new
(
ResourceId
(
0
)
)
resources
:
ApiResources
:
:
new
(
self
.
blob_image_handler
.
as_ref
(
)
.
map
(
|
handler
|
handler
.
create_similar
(
)
)
self
.
shared_font_instances
.
clone
(
)
)
}
}
}
bitflags
!
{
/
/
/
Flags
to
enable
/
disable
various
builtin
debugging
tools
.
#
[
repr
(
C
)
]
#
[
derive
(
Default
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
DebugFlags
:
u32
{
/
/
/
Display
the
frame
profiler
on
screen
.
const
PROFILER_DBG
=
1
<
<
0
;
/
/
/
Display
intermediate
render
targets
on
screen
.
const
RENDER_TARGET_DBG
=
1
<
<
1
;
/
/
/
Display
all
texture
cache
pages
on
screen
.
const
TEXTURE_CACHE_DBG
=
1
<
<
2
;
/
/
/
Display
GPU
timing
results
.
const
GPU_TIME_QUERIES
=
1
<
<
3
;
/
/
/
Query
the
number
of
pixels
that
pass
the
depth
test
divided
and
show
it
/
/
/
in
the
profiler
as
a
percentage
of
the
number
of
pixels
in
the
screen
/
/
/
(
window
width
times
height
)
.
const
GPU_SAMPLE_QUERIES
=
1
<
<
4
;
/
/
/
Render
each
quad
with
their
own
draw
call
.
/
/
/
/
/
/
Terrible
for
performance
but
can
help
with
understanding
the
drawing
/
/
/
order
when
inspecting
renderdoc
or
apitrace
recordings
.
const
DISABLE_BATCHING
=
1
<
<
5
;
/
/
/
Display
the
pipeline
epochs
.
const
EPOCHS
=
1
<
<
6
;
/
/
/
Reduce
the
amount
of
information
displayed
by
the
profiler
so
that
/
/
/
it
occupies
less
screen
real
-
estate
.
const
COMPACT_PROFILER
=
1
<
<
7
;
/
/
/
Print
driver
messages
to
stdout
.
const
ECHO_DRIVER_MESSAGES
=
1
<
<
8
;
/
/
/
Show
an
indicator
that
moves
every
time
a
frame
is
rendered
.
const
NEW_FRAME_INDICATOR
=
1
<
<
9
;
/
/
/
Show
an
indicator
that
moves
every
time
a
scene
is
built
.
const
NEW_SCENE_INDICATOR
=
1
<
<
10
;
/
/
/
Show
an
overlay
displaying
overdraw
amount
.
const
SHOW_OVERDRAW
=
1
<
<
11
;
/
/
/
Display
the
contents
of
GPU
cache
.
const
GPU_CACHE_DBG
=
1
<
<
12
;
/
/
/
Show
a
red
bar
that
moves
each
time
a
slow
frame
is
detected
.
const
SLOW_FRAME_INDICATOR
=
1
<
<
13
;
/
/
/
Clear
evicted
parts
of
the
texture
cache
for
debugging
purposes
.
const
TEXTURE_CACHE_DBG_CLEAR_EVICTED
=
1
<
<
14
;
/
/
/
Show
picture
caching
debug
overlay
const
PICTURE_CACHING_DBG
=
1
<
<
15
;
/
/
/
Highlight
all
primitives
with
colors
based
on
kind
.
const
PRIMITIVE_DBG
=
1
<
<
16
;
/
/
/
Draw
a
zoom
widget
showing
part
of
the
framebuffer
zoomed
in
.
const
ZOOM_DBG
=
1
<
<
17
;
/
/
/
Scale
the
debug
renderer
down
for
a
smaller
screen
.
This
will
disrupt
/
/
/
any
mapping
between
debug
display
items
and
page
content
so
shouldn
'
t
/
/
/
be
used
with
overlays
like
the
picture
caching
or
primitive
display
.
const
SMALL_SCREEN
=
1
<
<
18
;
/
/
/
Disable
various
bits
of
the
WebRender
pipeline
to
help
narrow
/
/
/
down
where
slowness
might
be
coming
from
.
const
DISABLE_OPAQUE_PASS
=
1
<
<
19
;
/
/
/
const
DISABLE_ALPHA_PASS
=
1
<
<
20
;
/
/
/
const
DISABLE_CLIP_MASKS
=
1
<
<
21
;
/
/
/
const
DISABLE_TEXT_PRIMS
=
1
<
<
22
;
/
/
/
const
DISABLE_GRADIENT_PRIMS
=
1
<
<
23
;
/
/
/
const
OBSCURE_IMAGES
=
1
<
<
24
;
/
/
/
Taint
the
transparent
area
of
the
glyphs
with
a
random
opacity
to
easily
/
/
/
see
when
glyphs
are
re
-
rasterized
.
const
GLYPH_FLASHING
=
1
<
<
25
;
/
/
/
The
profiler
only
displays
information
that
is
out
of
the
ordinary
.
const
SMART_PROFILER
=
1
<
<
26
;
/
/
/
Dynamically
control
whether
picture
caching
is
enabled
.
const
DISABLE_PICTURE_CACHING
=
1
<
<
27
;
/
/
/
If
set
dump
picture
cache
invalidation
debug
to
console
.
const
INVALIDATION_DBG
=
1
<
<
28
;
/
/
/
Log
tile
cache
to
memory
for
later
saving
as
part
of
wr
-
capture
const
TILE_CACHE_LOGGING_DBG
=
1
<
<
29
;
/
/
/
For
debugging
force
-
disable
automatic
scaling
of
establishes_raster_root
/
/
/
pictures
that
are
too
large
(
ie
go
back
to
old
behavior
that
prevents
those
/
/
/
large
pictures
from
establishing
a
raster
root
)
.
const
DISABLE_RASTER_ROOT_SCALING
=
1
<
<
30
;
}
}
pub
struct
RenderApi
{
api_sender
:
Sender
<
ApiMsg
>
namespace_id
:
IdNamespace
next_id
:
Cell
<
ResourceId
>
resources
:
ApiResources
}
impl
RenderApi
{
pub
fn
get_namespace_id
(
&
self
)
-
>
IdNamespace
{
self
.
namespace_id
}
pub
fn
create_sender
(
&
self
)
-
>
RenderApiSender
{
RenderApiSender
:
:
new
(
self
.
api_sender
.
clone
(
)
self
.
resources
.
blob_image_handler
.
as_ref
(
)
.
map
(
|
handler
|
handler
.
create_similar
(
)
)
self
.
resources
.
get_shared_font_instances
(
)
)
}
pub
fn
add_document
(
&
self
initial_size
:
DeviceIntSize
layer
:
DocumentLayer
)
-
>
DocumentId
{
let
new_id
=
self
.
next_unique_id
(
)
;
self
.
add_document_with_id
(
initial_size
layer
new_id
)
}
pub
fn
add_document_with_id
(
&
self
initial_size
:
DeviceIntSize
layer
:
DocumentLayer
id
:
u32
)
-
>
DocumentId
{
window_size_sanity_check
(
initial_size
)
;
let
document_id
=
DocumentId
:
:
new
(
self
.
namespace_id
id
)
;
let
msg
=
ApiMsg
:
:
AddDocument
(
document_id
initial_size
layer
)
;
self
.
api_sender
.
send
(
msg
)
.
unwrap
(
)
;
document_id
}
pub
fn
delete_document
(
&
self
document_id
:
DocumentId
)
{
let
msg
=
ApiMsg
:
:
DeleteDocument
(
document_id
)
;
self
.
api_sender
.
send
(
msg
)
.
unwrap
(
)
;
}
pub
fn
generate_font_key
(
&
self
)
-
>
font
:
:
FontKey
{
let
new_id
=
self
.
next_unique_id
(
)
;
font
:
:
FontKey
:
:
new
(
self
.
namespace_id
new_id
)
}
pub
fn
generate_font_instance_key
(
&
self
)
-
>
font
:
:
FontInstanceKey
{
let
new_id
=
self
.
next_unique_id
(
)
;
font
:
:
FontInstanceKey
:
:
new
(
self
.
namespace_id
new_id
)
}
pub
fn
get_glyph_dimensions
(
&
self
key
:
font
:
:
FontInstanceKey
glyph_indices
:
Vec
<
font
:
:
GlyphIndex
>
)
-
>
Vec
<
Option
<
font
:
:
GlyphDimensions
>
>
{
let
(
sender
rx
)
=
channel
(
)
;
let
msg
=
ApiMsg
:
:
GetGlyphDimensions
(
font
:
:
GlyphDimensionRequest
{
key
glyph_indices
sender
}
)
;
self
.
api_sender
.
send
(
msg
)
.
unwrap
(
)
;
rx
.
recv
(
)
.
unwrap
(
)
}
pub
fn
get_glyph_indices
(
&
self
key
:
font
:
:
FontKey
text
:
&
str
)
-
>
Vec
<
Option
<
u32
>
>
{
let
(
sender
rx
)
=
channel
(
)
;
let
msg
=
ApiMsg
:
:
GetGlyphIndices
(
font
:
:
GlyphIndexRequest
{
key
text
:
text
.
to_string
(
)
sender
}
)
;
self
.
api_sender
.
send
(
msg
)
.
unwrap
(
)
;
rx
.
recv
(
)
.
unwrap
(
)
}
pub
fn
generate_image_key
(
&
self
)
-
>
ImageKey
{
let
new_id
=
self
.
next_unique_id
(
)
;
ImageKey
:
:
new
(
self
.
namespace_id
new_id
)
}
pub
fn
generate_blob_image_key
(
&
self
)
-
>
BlobImageKey
{
BlobImageKey
(
self
.
generate_image_key
(
)
)
}
pub
fn
send_external_event
(
&
self
evt
:
ExternalEvent
)
{
let
msg
=
ApiMsg
:
:
ExternalEvent
(
evt
)
;
self
.
api_sender
.
send
(
msg
)
.
unwrap
(
)
;
}
pub
fn
notify_memory_pressure
(
&
self
)
{
self
.
api_sender
.
send
(
ApiMsg
:
:
MemoryPressure
)
.
unwrap
(
)
;
}
pub
fn
report_memory
(
&
self
)
-
>
MemoryReport
{
let
(
tx
rx
)
=
channel
(
)
;
self
.
api_sender
.
send
(
ApiMsg
:
:
ReportMemory
(
tx
)
)
.
unwrap
(
)
;
*
rx
.
recv
(
)
.
unwrap
(
)
}
pub
fn
set_debug_flags
(
&
self
flags
:
DebugFlags
)
{
let
cmd
=
DebugCommand
:
:
SetFlags
(
flags
)
;
self
.
api_sender
.
send
(
ApiMsg
:
:
DebugCommand
(
cmd
)
)
.
unwrap
(
)
;
}
pub
fn
shut_down
(
&
self
synchronously
:
bool
)
{
if
synchronously
{
let
(
tx
rx
)
=
channel
(
)
;
self
.
api_sender
.
send
(
ApiMsg
:
:
ShutDown
(
Some
(
tx
)
)
)
.
unwrap
(
)
;
rx
.
recv
(
)
.
unwrap
(
)
;
}
else
{
self
.
api_sender
.
send
(
ApiMsg
:
:
ShutDown
(
None
)
)
.
unwrap
(
)
;
}
}
pub
fn
generate_property_binding_key
<
T
:
Copy
>
(
&
self
)
-
>
PropertyBindingKey
<
T
>
{
let
new_id
=
self
.
next_unique_id
(
)
;
PropertyBindingKey
{
id
:
PropertyBindingId
{
namespace
:
self
.
namespace_id
uid
:
new_id
}
_phantom
:
PhantomData
}
}
#
[
inline
]
fn
next_unique_id
(
&
self
)
-
>
u32
{
let
ResourceId
(
id
)
=
self
.
next_id
.
get
(
)
;
self
.
next_id
.
set
(
ResourceId
(
id
+
1
)
)
;
id
}
#
[
doc
(
hidden
)
]
pub
fn
send_message
(
&
self
msg
:
ApiMsg
)
{
self
.
api_sender
.
send
(
msg
)
.
unwrap
(
)
;
}
fn
frame_message
(
&
self
msg
:
FrameMsg
document_id
:
DocumentId
)
-
>
Box
<
TransactionMsg
>
{
Box
:
:
new
(
TransactionMsg
{
document_id
scene_ops
:
Vec
:
:
new
(
)
frame_ops
:
vec
!
[
msg
]
resource_updates
:
Vec
:
:
new
(
)
notifications
:
Vec
:
:
new
(
)
generate_frame
:
false
invalidate_rendered_frame
:
false
use_scene_builder_thread
:
false
low_priority
:
false
blob_rasterizer
:
None
blob_requests
:
Vec
:
:
new
(
)
rasterized_blobs
:
Vec
:
:
new
(
)
}
)
}
fn
scene_message
(
&
self
msg
:
SceneMsg
document_id
:
DocumentId
)
-
>
Box
<
TransactionMsg
>
{
Box
:
:
new
(
TransactionMsg
{
document_id
scene_ops
:
vec
!
[
msg
]
frame_ops
:
Vec
:
:
new
(
)
resource_updates
:
Vec
:
:
new
(
)
notifications
:
Vec
:
:
new
(
)
generate_frame
:
false
invalidate_rendered_frame
:
false
use_scene_builder_thread
:
false
low_priority
:
false
blob_rasterizer
:
None
blob_requests
:
Vec
:
:
new
(
)
rasterized_blobs
:
Vec
:
:
new
(
)
}
)
}
fn
send_scene_msg
(
&
self
document_id
:
DocumentId
msg
:
SceneMsg
)
{
self
.
api_sender
.
send
(
ApiMsg
:
:
UpdateDocuments
(
vec
!
[
self
.
scene_message
(
msg
document_id
)
]
)
)
.
unwrap
(
)
}
fn
send_frame_msg
(
&
self
document_id
:
DocumentId
msg
:
FrameMsg
)
{
self
.
api_sender
.
send
(
ApiMsg
:
:
UpdateDocuments
(
vec
!
[
self
.
frame_message
(
msg
document_id
)
]
)
)
.
unwrap
(
)
}
pub
fn
send_transaction
(
&
mut
self
document_id
:
DocumentId
transaction
:
Transaction
)
{
let
mut
transaction
=
transaction
.
finalize
(
document_id
)
;
self
.
resources
.
update
(
&
mut
transaction
)
;
self
.
api_sender
.
send
(
ApiMsg
:
:
UpdateDocuments
(
vec
!
[
transaction
]
)
)
.
unwrap
(
)
;
}
pub
fn
send_transactions
(
&
mut
self
document_ids
:
Vec
<
DocumentId
>
mut
transactions
:
Vec
<
Transaction
>
)
{
debug_assert
!
(
document_ids
.
len
(
)
=
=
transactions
.
len
(
)
)
;
let
msgs
=
transactions
.
drain
(
.
.
)
.
zip
(
document_ids
)
.
map
(
|
(
txn
id
)
|
{
let
mut
txn
=
txn
.
finalize
(
id
)
;
self
.
resources
.
update
(
&
mut
txn
)
;
txn
}
)
.
collect
(
)
;
self
.
api_sender
.
send
(
ApiMsg
:
:
UpdateDocuments
(
msgs
)
)
.
unwrap
(
)
;
}
pub
fn
hit_test
(
&
self
document_id
:
DocumentId
pipeline_id
:
Option
<
PipelineId
>
point
:
WorldPoint
flags
:
HitTestFlags
)
-
>
HitTestResult
{
let
(
tx
rx
)
=
channel
(
)
;
self
.
send_frame_msg
(
document_id
FrameMsg
:
:
HitTest
(
pipeline_id
point
flags
tx
)
)
;
rx
.
recv
(
)
.
unwrap
(
)
}
pub
fn
request_hit_tester
(
&
self
document_id
:
DocumentId
)
-
>
HitTesterRequest
{
let
(
tx
rx
)
=
channel
(
)
;
self
.
send_frame_msg
(
document_id
FrameMsg
:
:
RequestHitTester
(
tx
)
)
;
HitTesterRequest
{
rx
}
}
pub
fn
set_document_view
(
&
self
document_id
:
DocumentId
device_rect
:
DeviceIntRect
device_pixel_ratio
:
f32
)
{
assert
!
(
device_pixel_ratio
>
0
.
0
)
;
window_size_sanity_check
(
device_rect
.
size
)
;
self
.
send_scene_msg
(
document_id
SceneMsg
:
:
SetDocumentView
{
device_rect
device_pixel_ratio
}
)
;
}
pub
fn
enable_frame_output
(
&
self
document_id
:
DocumentId
pipeline_id
:
PipelineId
enable
:
bool
)
{
self
.
send_scene_msg
(
document_id
SceneMsg
:
:
EnableFrameOutput
(
pipeline_id
enable
)
)
;
}
pub
fn
get_scroll_node_state
(
&
self
document_id
:
DocumentId
)
-
>
Vec
<
ScrollNodeState
>
{
let
(
tx
rx
)
=
channel
(
)
;
self
.
send_frame_msg
(
document_id
FrameMsg
:
:
GetScrollNodeState
(
tx
)
)
;
rx
.
recv
(
)
.
unwrap
(
)
}
#
[
doc
(
hidden
)
]
pub
fn
wake_scene_builder
(
&
self
)
{
self
.
send_message
(
ApiMsg
:
:
WakeSceneBuilder
)
;
}
pub
fn
flush_scene_builder
(
&
self
)
{
let
(
tx
rx
)
=
channel
(
)
;
self
.
send_message
(
ApiMsg
:
:
FlushSceneBuilder
(
tx
)
)
;
rx
.
recv
(
)
.
unwrap
(
)
;
}
pub
fn
save_capture
(
&
self
path
:
PathBuf
bits
:
CaptureBits
)
{
let
msg
=
ApiMsg
:
:
DebugCommand
(
DebugCommand
:
:
SaveCapture
(
path
bits
)
)
;
self
.
send_message
(
msg
)
;
}
pub
fn
load_capture
(
&
self
path
:
PathBuf
ids
:
Option
<
(
u32
u32
)
>
)
-
>
Vec
<
CapturedDocument
>
{
self
.
flush_scene_builder
(
)
;
let
(
tx
rx
)
=
channel
(
)
;
let
msg
=
ApiMsg
:
:
DebugCommand
(
DebugCommand
:
:
LoadCapture
(
path
ids
tx
)
)
;
self
.
send_message
(
msg
)
;
let
mut
documents
=
Vec
:
:
new
(
)
;
while
let
Ok
(
captured_doc
)
=
rx
.
recv
(
)
{
documents
.
push
(
captured_doc
)
;
}
documents
}
pub
fn
start_capture_sequence
(
&
self
path
:
PathBuf
bits
:
CaptureBits
)
{
let
msg
=
ApiMsg
:
:
DebugCommand
(
DebugCommand
:
:
StartCaptureSequence
(
path
bits
)
)
;
self
.
send_message
(
msg
)
;
}
pub
fn
stop_capture_sequence
(
&
self
)
{
let
msg
=
ApiMsg
:
:
DebugCommand
(
DebugCommand
:
:
StopCaptureSequence
)
;
self
.
send_message
(
msg
)
;
}
pub
fn
send_debug_cmd
(
&
mut
self
cmd
:
DebugCommand
)
{
if
let
DebugCommand
:
:
EnableMultithreading
(
enable
)
=
cmd
{
self
.
resources
.
enable_multithreading
(
enable
)
;
}
let
msg
=
ApiMsg
:
:
DebugCommand
(
cmd
)
;
self
.
send_message
(
msg
)
;
}
}
impl
Drop
for
RenderApi
{
fn
drop
(
&
mut
self
)
{
let
msg
=
ApiMsg
:
:
ClearNamespace
(
self
.
namespace_id
)
;
let
_
=
self
.
api_sender
.
send
(
msg
)
;
}
}
pub
struct
HitTesterRequest
{
rx
:
Receiver
<
Arc
<
dyn
ApiHitTester
>
>
}
impl
HitTesterRequest
{
pub
fn
resolve
(
self
)
-
>
Arc
<
dyn
ApiHitTester
>
{
self
.
rx
.
recv
(
)
.
unwrap
(
)
}
}
#
[
derive
(
Clone
)
]
pub
struct
ScrollNodeState
{
pub
id
:
di
:
:
ExternalScrollId
pub
scroll_offset
:
LayoutVector2D
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
enum
ScrollLocation
{
Delta
(
LayoutVector2D
)
Start
End
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
struct
ZoomFactor
(
f32
)
;
impl
ZoomFactor
{
pub
fn
new
(
scale
:
f32
)
-
>
Self
{
ZoomFactor
(
scale
)
}
pub
fn
get
(
self
)
-
>
f32
{
self
.
0
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Default
Deserialize
MallocSizeOf
PartialEq
Serialize
Eq
Hash
PeekPoke
)
]
pub
struct
PropertyBindingId
{
namespace
:
IdNamespace
uid
:
u32
}
impl
PropertyBindingId
{
pub
fn
new
(
value
:
u64
)
-
>
Self
{
PropertyBindingId
{
namespace
:
IdNamespace
(
(
value
>
>
32
)
as
u32
)
uid
:
value
as
u32
}
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Default
Deserialize
Eq
Hash
MallocSizeOf
PartialEq
Serialize
PeekPoke
)
]
pub
struct
PropertyBindingKey
<
T
>
{
pub
id
:
PropertyBindingId
_phantom
:
PhantomData
<
T
>
}
impl
<
T
:
Copy
>
PropertyBindingKey
<
T
>
{
pub
fn
with
(
self
value
:
T
)
-
>
PropertyValue
<
T
>
{
PropertyValue
{
key
:
self
value
}
}
}
impl
<
T
>
PropertyBindingKey
<
T
>
{
pub
fn
new
(
value
:
u64
)
-
>
Self
{
PropertyBindingKey
{
id
:
PropertyBindingId
:
:
new
(
value
)
_phantom
:
PhantomData
}
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Deserialize
Eq
Hash
MallocSizeOf
PartialEq
Serialize
PeekPoke
)
]
pub
enum
PropertyBinding
<
T
>
{
Value
(
T
)
Binding
(
PropertyBindingKey
<
T
>
T
)
}
impl
<
T
:
Default
>
Default
for
PropertyBinding
<
T
>
{
fn
default
(
)
-
>
Self
{
PropertyBinding
:
:
Value
(
Default
:
:
default
(
)
)
}
}
impl
<
T
>
From
<
T
>
for
PropertyBinding
<
T
>
{
fn
from
(
value
:
T
)
-
>
PropertyBinding
<
T
>
{
PropertyBinding
:
:
Value
(
value
)
}
}
impl
From
<
PropertyBindingKey
<
ColorF
>
>
for
PropertyBindingKey
<
ColorU
>
{
fn
from
(
key
:
PropertyBindingKey
<
ColorF
>
)
-
>
PropertyBindingKey
<
ColorU
>
{
PropertyBindingKey
{
id
:
key
.
id
.
clone
(
)
_phantom
:
PhantomData
}
}
}
impl
From
<
PropertyBindingKey
<
ColorU
>
>
for
PropertyBindingKey
<
ColorF
>
{
fn
from
(
key
:
PropertyBindingKey
<
ColorU
>
)
-
>
PropertyBindingKey
<
ColorF
>
{
PropertyBindingKey
{
id
:
key
.
id
.
clone
(
)
_phantom
:
PhantomData
}
}
}
impl
From
<
PropertyBinding
<
ColorF
>
>
for
PropertyBinding
<
ColorU
>
{
fn
from
(
value
:
PropertyBinding
<
ColorF
>
)
-
>
PropertyBinding
<
ColorU
>
{
match
value
{
PropertyBinding
:
:
Value
(
value
)
=
>
PropertyBinding
:
:
Value
(
value
.
into
(
)
)
PropertyBinding
:
:
Binding
(
k
v
)
=
>
{
PropertyBinding
:
:
Binding
(
k
.
into
(
)
v
.
into
(
)
)
}
}
}
}
impl
From
<
PropertyBinding
<
ColorU
>
>
for
PropertyBinding
<
ColorF
>
{
fn
from
(
value
:
PropertyBinding
<
ColorU
>
)
-
>
PropertyBinding
<
ColorF
>
{
match
value
{
PropertyBinding
:
:
Value
(
value
)
=
>
PropertyBinding
:
:
Value
(
value
.
into
(
)
)
PropertyBinding
:
:
Binding
(
k
v
)
=
>
{
PropertyBinding
:
:
Binding
(
k
.
into
(
)
v
.
into
(
)
)
}
}
}
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
Serialize
PartialEq
)
]
pub
struct
PropertyValue
<
T
>
{
pub
key
:
PropertyBindingKey
<
T
>
pub
value
:
T
}
#
[
derive
(
Clone
Deserialize
Serialize
Debug
PartialEq
Default
)
]
pub
struct
DynamicProperties
{
pub
transforms
:
Vec
<
PropertyValue
<
LayoutTransform
>
>
pub
floats
:
Vec
<
PropertyValue
<
f32
>
>
pub
colors
:
Vec
<
PropertyValue
<
ColorF
>
>
}
pub
trait
RenderNotifier
:
Send
{
fn
clone
(
&
self
)
-
>
Box
<
dyn
RenderNotifier
>
;
fn
wake_up
(
&
self
)
;
fn
new_frame_ready
(
&
self
_
:
DocumentId
scrolled
:
bool
composite_needed
:
bool
render_time_ns
:
Option
<
u64
>
)
;
fn
external_event
(
&
self
_evt
:
ExternalEvent
)
{
unimplemented
!
(
)
}
fn
shut_down
(
&
self
)
{
}
}
#
[
repr
(
u32
)
]
#
[
derive
(
Copy
Clone
Debug
PartialEq
Eq
)
]
pub
enum
Checkpoint
{
SceneBuilt
FrameBuilt
FrameTexturesUpdated
FrameRendered
TransactionDropped
}
pub
trait
NotificationHandler
:
Send
+
Sync
{
fn
notify
(
&
self
when
:
Checkpoint
)
;
}
pub
struct
NotificationRequest
{
handler
:
Option
<
Box
<
dyn
NotificationHandler
>
>
when
:
Checkpoint
}
impl
NotificationRequest
{
pub
fn
new
(
when
:
Checkpoint
handler
:
Box
<
dyn
NotificationHandler
>
)
-
>
Self
{
NotificationRequest
{
handler
:
Some
(
handler
)
when
}
}
pub
fn
when
(
&
self
)
-
>
Checkpoint
{
self
.
when
}
pub
fn
notify
(
mut
self
)
{
if
let
Some
(
handler
)
=
self
.
handler
.
take
(
)
{
handler
.
notify
(
self
.
when
)
;
}
}
}
pub
trait
ApiHitTester
:
Send
+
Sync
{
fn
hit_test
(
&
self
pipeline_id
:
Option
<
PipelineId
>
point
:
WorldPoint
flags
:
HitTestFlags
)
-
>
HitTestResult
;
}
impl
Drop
for
NotificationRequest
{
fn
drop
(
&
mut
self
)
{
if
let
Some
(
ref
mut
handler
)
=
self
.
handler
{
handler
.
notify
(
Checkpoint
:
:
TransactionDropped
)
;
}
}
}
impl
Clone
for
NotificationRequest
{
fn
clone
(
&
self
)
-
>
Self
{
NotificationRequest
{
when
:
self
.
when
handler
:
None
}
}
}
bitflags
!
{
/
/
/
Each
bit
of
the
edge
AA
mask
is
:
/
/
/
0
when
the
edge
of
the
primitive
needs
to
be
considered
for
AA
/
/
/
1
when
the
edge
of
the
segment
needs
to
be
considered
for
AA
/
/
/
/
/
/
*
Note
*
:
the
bit
values
have
to
match
the
shader
logic
in
/
/
/
write_transform_vertex
(
)
function
.
#
[
cfg_attr
(
feature
=
"
serialize
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
deserialize
"
derive
(
Deserialize
)
)
]
#
[
derive
(
MallocSizeOf
)
]
pub
struct
EdgeAaSegmentMask
:
u8
{
/
/
/
const
LEFT
=
0x1
;
/
/
/
const
TOP
=
0x2
;
/
/
/
const
RIGHT
=
0x4
;
/
/
/
const
BOTTOM
=
0x8
;
}
}
fn
window_size_sanity_check
(
size
:
DeviceIntSize
)
{
const
MAX_SIZE
:
i32
=
16000
;
if
size
.
width
>
MAX_SIZE
|
|
size
.
height
>
MAX_SIZE
{
panic
!
(
"
Attempting
to
create
a
{
}
x
{
}
window
/
document
"
size
.
width
size
.
height
)
;
}
}
