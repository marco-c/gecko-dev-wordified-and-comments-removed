#
!
[
cfg_attr
(
feature
=
"
nightly
"
feature
(
nonzero
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
clippy
:
:
float_cmp
clippy
:
:
too_many_arguments
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
clippy
:
:
unreadable_literal
clippy
:
:
new_without_default
)
)
]
pub
extern
crate
crossbeam_channel
;
pub
extern
crate
euclid
;
extern
crate
app_units
;
#
[
macro_use
]
extern
crate
bitflags
;
extern
crate
byteorder
;
#
[
cfg
(
feature
=
"
nightly
"
)
]
extern
crate
core
;
#
[
cfg
(
target_os
=
"
macos
"
)
]
extern
crate
core_foundation
;
#
[
cfg
(
target_os
=
"
macos
"
)
]
extern
crate
core_graphics
;
extern
crate
derive_more
;
#
[
macro_use
]
extern
crate
malloc_size_of_derive
;
extern
crate
serde
;
#
[
macro_use
]
extern
crate
serde_derive
;
extern
crate
time
;
extern
crate
malloc_size_of
;
extern
crate
peek_poke
;
pub
mod
channel
;
mod
color
;
mod
display_item
;
mod
display_item_cache
;
mod
display_list
;
mod
font
;
mod
gradient_builder
;
mod
image
;
pub
mod
units
;
pub
use
crate
:
:
color
:
:
*
;
pub
use
crate
:
:
display_item
:
:
*
;
pub
use
crate
:
:
display_item_cache
:
:
DisplayItemCache
;
pub
use
crate
:
:
display_list
:
:
*
;
pub
use
crate
:
:
font
:
:
*
;
pub
use
crate
:
:
gradient_builder
:
:
*
;
pub
use
crate
:
:
image
:
:
*
;
use
crate
:
:
units
:
:
*
;
use
crate
:
:
channel
:
:
Receiver
;
use
std
:
:
marker
:
:
PhantomData
;
use
std
:
:
sync
:
:
Arc
;
use
std
:
:
os
:
:
raw
:
:
c_void
;
use
peek_poke
:
:
PeekPoke
;
pub
type
TileSize
=
u16
;
pub
type
DocumentLayer
=
i8
;
#
[
derive
(
Copy
Clone
Deserialize
Serialize
)
]
pub
struct
QualitySettings
{
pub
force_subpixel_aa_where_possible
:
bool
}
impl
Default
for
QualitySettings
{
fn
default
(
)
-
>
Self
{
QualitySettings
{
force_subpixel_aa_where_possible
:
false
}
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Deserialize
Eq
Hash
Ord
PartialEq
PartialOrd
Serialize
)
]
pub
struct
Epoch
(
pub
u32
)
;
impl
Epoch
{
pub
fn
invalid
(
)
-
>
Epoch
{
Epoch
(
u32
:
:
MAX
)
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Default
Eq
MallocSizeOf
PartialEq
Hash
Ord
PartialOrd
PeekPoke
)
]
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
IdNamespace
(
pub
u32
)
;
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Deserialize
Eq
Hash
MallocSizeOf
PartialEq
Serialize
PeekPoke
)
]
pub
struct
DocumentId
{
pub
namespace_id
:
IdNamespace
pub
id
:
u32
}
impl
DocumentId
{
pub
fn
new
(
namespace_id
:
IdNamespace
id
:
u32
)
-
>
Self
{
DocumentId
{
namespace_id
id
}
}
pub
const
INVALID
:
DocumentId
=
DocumentId
{
namespace_id
:
IdNamespace
(
0
)
id
:
0
}
;
}
pub
type
PipelineSourceId
=
u32
;
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Deserialize
Eq
Hash
MallocSizeOf
PartialEq
Serialize
PeekPoke
)
]
pub
struct
PipelineId
(
pub
PipelineSourceId
pub
u32
)
;
impl
Default
for
PipelineId
{
fn
default
(
)
-
>
Self
{
PipelineId
:
:
dummy
(
)
}
}
impl
PipelineId
{
pub
fn
dummy
(
)
-
>
Self
{
PipelineId
(
0
0
)
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
)
]
pub
struct
ExternalEvent
{
raw
:
usize
}
unsafe
impl
Send
for
ExternalEvent
{
}
impl
ExternalEvent
{
pub
fn
from_raw
(
raw
:
usize
)
-
>
Self
{
ExternalEvent
{
raw
}
}
pub
fn
unwrap
(
self
)
-
>
usize
{
self
.
raw
}
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
enum
ScrollClamping
{
ToContentBounds
NoClamping
}
pub
trait
RenderNotifier
:
Send
{
fn
clone
(
&
self
)
-
>
Box
<
dyn
RenderNotifier
>
;
fn
wake_up
(
&
self
)
;
fn
new_frame_ready
(
&
self
_
:
DocumentId
scrolled
:
bool
composite_needed
:
bool
render_time_ns
:
Option
<
u64
>
)
;
fn
external_event
(
&
self
_evt
:
ExternalEvent
)
{
unimplemented
!
(
)
}
fn
shut_down
(
&
self
)
{
}
}
#
[
repr
(
u32
)
]
#
[
derive
(
Copy
Clone
Debug
PartialEq
Eq
)
]
pub
enum
Checkpoint
{
SceneBuilt
FrameBuilt
FrameTexturesUpdated
FrameRendered
TransactionDropped
}
pub
trait
NotificationHandler
:
Send
+
Sync
{
fn
notify
(
&
self
when
:
Checkpoint
)
;
}
pub
struct
NotificationRequest
{
handler
:
Option
<
Box
<
dyn
NotificationHandler
>
>
when
:
Checkpoint
}
impl
NotificationRequest
{
pub
fn
new
(
when
:
Checkpoint
handler
:
Box
<
dyn
NotificationHandler
>
)
-
>
Self
{
NotificationRequest
{
handler
:
Some
(
handler
)
when
}
}
pub
fn
when
(
&
self
)
-
>
Checkpoint
{
self
.
when
}
pub
fn
notify
(
mut
self
)
{
if
let
Some
(
handler
)
=
self
.
handler
.
take
(
)
{
handler
.
notify
(
self
.
when
)
;
}
}
}
pub
trait
ApiHitTester
:
Send
+
Sync
{
fn
hit_test
(
&
self
pipeline_id
:
Option
<
PipelineId
>
point
:
WorldPoint
)
-
>
HitTestResult
;
}
pub
struct
HitTesterRequest
{
#
[
doc
(
hidden
)
]
pub
rx
:
Receiver
<
Arc
<
dyn
ApiHitTester
>
>
}
impl
HitTesterRequest
{
pub
fn
resolve
(
self
)
-
>
Arc
<
dyn
ApiHitTester
>
{
self
.
rx
.
recv
(
)
.
unwrap
(
)
}
}
#
[
derive
(
Clone
Debug
Deserialize
PartialEq
Serialize
)
]
pub
struct
HitTestItem
{
pub
pipeline
:
PipelineId
pub
tag
:
ItemTag
pub
point_in_viewport
:
LayoutPoint
pub
point_relative_to_item
:
LayoutPoint
}
#
[
derive
(
Clone
Debug
Default
Deserialize
Serialize
)
]
pub
struct
HitTestResult
{
pub
items
:
Vec
<
HitTestItem
>
}
impl
Drop
for
NotificationRequest
{
fn
drop
(
&
mut
self
)
{
if
let
Some
(
ref
mut
handler
)
=
self
.
handler
{
handler
.
notify
(
Checkpoint
:
:
TransactionDropped
)
;
}
}
}
impl
Clone
for
NotificationRequest
{
fn
clone
(
&
self
)
-
>
Self
{
NotificationRequest
{
when
:
self
.
when
handler
:
None
}
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Default
Deserialize
MallocSizeOf
PartialEq
Serialize
Eq
Hash
PeekPoke
)
]
pub
struct
PropertyBindingId
{
pub
namespace
:
IdNamespace
pub
uid
:
u32
}
impl
PropertyBindingId
{
pub
fn
new
(
value
:
u64
)
-
>
Self
{
PropertyBindingId
{
namespace
:
IdNamespace
(
(
value
>
>
32
)
as
u32
)
uid
:
value
as
u32
}
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Default
Deserialize
Eq
Hash
MallocSizeOf
PartialEq
Serialize
PeekPoke
)
]
pub
struct
PropertyBindingKey
<
T
>
{
pub
id
:
PropertyBindingId
#
[
doc
(
hidden
)
]
pub
_phantom
:
PhantomData
<
T
>
}
impl
<
T
:
Copy
>
PropertyBindingKey
<
T
>
{
pub
fn
with
(
self
value
:
T
)
-
>
PropertyValue
<
T
>
{
PropertyValue
{
key
:
self
value
}
}
}
impl
<
T
>
PropertyBindingKey
<
T
>
{
pub
fn
new
(
value
:
u64
)
-
>
Self
{
PropertyBindingKey
{
id
:
PropertyBindingId
:
:
new
(
value
)
_phantom
:
PhantomData
}
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Deserialize
Eq
Hash
MallocSizeOf
PartialEq
Serialize
PeekPoke
)
]
pub
enum
PropertyBinding
<
T
>
{
Value
(
T
)
Binding
(
PropertyBindingKey
<
T
>
T
)
}
impl
<
T
:
Default
>
Default
for
PropertyBinding
<
T
>
{
fn
default
(
)
-
>
Self
{
PropertyBinding
:
:
Value
(
Default
:
:
default
(
)
)
}
}
impl
<
T
>
From
<
T
>
for
PropertyBinding
<
T
>
{
fn
from
(
value
:
T
)
-
>
PropertyBinding
<
T
>
{
PropertyBinding
:
:
Value
(
value
)
}
}
impl
From
<
PropertyBindingKey
<
ColorF
>
>
for
PropertyBindingKey
<
ColorU
>
{
fn
from
(
key
:
PropertyBindingKey
<
ColorF
>
)
-
>
PropertyBindingKey
<
ColorU
>
{
PropertyBindingKey
{
id
:
key
.
id
.
clone
(
)
_phantom
:
PhantomData
}
}
}
impl
From
<
PropertyBindingKey
<
ColorU
>
>
for
PropertyBindingKey
<
ColorF
>
{
fn
from
(
key
:
PropertyBindingKey
<
ColorU
>
)
-
>
PropertyBindingKey
<
ColorF
>
{
PropertyBindingKey
{
id
:
key
.
id
.
clone
(
)
_phantom
:
PhantomData
}
}
}
impl
From
<
PropertyBinding
<
ColorF
>
>
for
PropertyBinding
<
ColorU
>
{
fn
from
(
value
:
PropertyBinding
<
ColorF
>
)
-
>
PropertyBinding
<
ColorU
>
{
match
value
{
PropertyBinding
:
:
Value
(
value
)
=
>
PropertyBinding
:
:
Value
(
value
.
into
(
)
)
PropertyBinding
:
:
Binding
(
k
v
)
=
>
{
PropertyBinding
:
:
Binding
(
k
.
into
(
)
v
.
into
(
)
)
}
}
}
}
impl
From
<
PropertyBinding
<
ColorU
>
>
for
PropertyBinding
<
ColorF
>
{
fn
from
(
value
:
PropertyBinding
<
ColorU
>
)
-
>
PropertyBinding
<
ColorF
>
{
match
value
{
PropertyBinding
:
:
Value
(
value
)
=
>
PropertyBinding
:
:
Value
(
value
.
into
(
)
)
PropertyBinding
:
:
Binding
(
k
v
)
=
>
{
PropertyBinding
:
:
Binding
(
k
.
into
(
)
v
.
into
(
)
)
}
}
}
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
Serialize
PartialEq
)
]
pub
struct
PropertyValue
<
T
>
{
pub
key
:
PropertyBindingKey
<
T
>
pub
value
:
T
}
#
[
derive
(
Clone
Deserialize
Serialize
Debug
PartialEq
Default
)
]
pub
struct
DynamicProperties
{
pub
transforms
:
Vec
<
PropertyValue
<
LayoutTransform
>
>
pub
floats
:
Vec
<
PropertyValue
<
f32
>
>
pub
colors
:
Vec
<
PropertyValue
<
ColorF
>
>
}
pub
type
VoidPtrToSizeFn
=
unsafe
extern
"
C
"
fn
(
ptr
:
*
const
c_void
)
-
>
usize
;
bitflags
!
{
/
/
/
Flags
to
enable
/
disable
various
builtin
debugging
tools
.
#
[
repr
(
C
)
]
#
[
derive
(
Default
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
DebugFlags
:
u32
{
/
/
/
Display
the
frame
profiler
on
screen
.
const
PROFILER_DBG
=
1
<
<
0
;
/
/
/
Display
intermediate
render
targets
on
screen
.
const
RENDER_TARGET_DBG
=
1
<
<
1
;
/
/
/
Display
all
texture
cache
pages
on
screen
.
const
TEXTURE_CACHE_DBG
=
1
<
<
2
;
/
/
/
Display
GPU
timing
results
.
const
GPU_TIME_QUERIES
=
1
<
<
3
;
/
/
/
Query
the
number
of
pixels
that
pass
the
depth
test
divided
and
show
it
/
/
/
in
the
profiler
as
a
percentage
of
the
number
of
pixels
in
the
screen
/
/
/
(
window
width
times
height
)
.
const
GPU_SAMPLE_QUERIES
=
1
<
<
4
;
/
/
/
Render
each
quad
with
their
own
draw
call
.
/
/
/
/
/
/
Terrible
for
performance
but
can
help
with
understanding
the
drawing
/
/
/
order
when
inspecting
renderdoc
or
apitrace
recordings
.
const
DISABLE_BATCHING
=
1
<
<
5
;
/
/
/
Display
the
pipeline
epochs
.
const
EPOCHS
=
1
<
<
6
;
/
/
/
Reduce
the
amount
of
information
displayed
by
the
profiler
so
that
/
/
/
it
occupies
less
screen
real
-
estate
.
const
COMPACT_PROFILER
=
1
<
<
7
;
/
/
/
Print
driver
messages
to
stdout
.
const
ECHO_DRIVER_MESSAGES
=
1
<
<
8
;
/
/
/
Show
an
indicator
that
moves
every
time
a
frame
is
rendered
.
const
NEW_FRAME_INDICATOR
=
1
<
<
9
;
/
/
/
Show
an
indicator
that
moves
every
time
a
scene
is
built
.
const
NEW_SCENE_INDICATOR
=
1
<
<
10
;
/
/
/
Show
an
overlay
displaying
overdraw
amount
.
const
SHOW_OVERDRAW
=
1
<
<
11
;
/
/
/
Display
the
contents
of
GPU
cache
.
const
GPU_CACHE_DBG
=
1
<
<
12
;
/
/
/
Show
a
red
bar
that
moves
each
time
a
slow
frame
is
detected
.
const
SLOW_FRAME_INDICATOR
=
1
<
<
13
;
/
/
/
Clear
evicted
parts
of
the
texture
cache
for
debugging
purposes
.
const
TEXTURE_CACHE_DBG_CLEAR_EVICTED
=
1
<
<
14
;
/
/
/
Show
picture
caching
debug
overlay
const
PICTURE_CACHING_DBG
=
1
<
<
15
;
/
/
/
Highlight
all
primitives
with
colors
based
on
kind
.
const
PRIMITIVE_DBG
=
1
<
<
16
;
/
/
/
Draw
a
zoom
widget
showing
part
of
the
framebuffer
zoomed
in
.
const
ZOOM_DBG
=
1
<
<
17
;
/
/
/
Scale
the
debug
renderer
down
for
a
smaller
screen
.
This
will
disrupt
/
/
/
any
mapping
between
debug
display
items
and
page
content
so
shouldn
'
t
/
/
/
be
used
with
overlays
like
the
picture
caching
or
primitive
display
.
const
SMALL_SCREEN
=
1
<
<
18
;
/
/
/
Disable
various
bits
of
the
WebRender
pipeline
to
help
narrow
/
/
/
down
where
slowness
might
be
coming
from
.
const
DISABLE_OPAQUE_PASS
=
1
<
<
19
;
/
/
/
const
DISABLE_ALPHA_PASS
=
1
<
<
20
;
/
/
/
const
DISABLE_CLIP_MASKS
=
1
<
<
21
;
/
/
/
const
DISABLE_TEXT_PRIMS
=
1
<
<
22
;
/
/
/
const
DISABLE_GRADIENT_PRIMS
=
1
<
<
23
;
/
/
/
const
OBSCURE_IMAGES
=
1
<
<
24
;
/
/
/
Taint
the
transparent
area
of
the
glyphs
with
a
random
opacity
to
easily
/
/
/
see
when
glyphs
are
re
-
rasterized
.
const
GLYPH_FLASHING
=
1
<
<
25
;
/
/
/
The
profiler
only
displays
information
that
is
out
of
the
ordinary
.
const
SMART_PROFILER
=
1
<
<
26
;
/
/
/
Dynamically
control
whether
picture
caching
is
enabled
.
const
DISABLE_PICTURE_CACHING
=
1
<
<
27
;
/
/
/
If
set
dump
picture
cache
invalidation
debug
to
console
.
const
INVALIDATION_DBG
=
1
<
<
28
;
/
/
/
Log
tile
cache
to
memory
for
later
saving
as
part
of
wr
-
capture
const
TILE_CACHE_LOGGING_DBG
=
1
<
<
29
;
/
/
/
Collect
and
dump
profiler
statistics
to
captures
.
const
PROFILER_CAPTURE
=
(
1
as
u32
)
<
<
31
;
/
/
need
"
as
u32
"
until
we
have
cbindgen
#
556
}
}
#
[
derive
(
Debug
Clone
Eq
MallocSizeOf
PartialEq
Hash
Serialize
Deserialize
)
]
pub
enum
PrimitiveKeyKind
{
Clear
Rectangle
{
color
:
PropertyBinding
<
ColorU
>
}
}
#
[
derive
(
Clone
)
]
pub
struct
ScrollNodeState
{
pub
id
:
ExternalScrollId
pub
scroll_offset
:
LayoutVector2D
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
enum
ScrollLocation
{
Delta
(
LayoutVector2D
)
Start
End
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
struct
ZoomFactor
(
f32
)
;
impl
ZoomFactor
{
pub
fn
new
(
scale
:
f32
)
-
>
Self
{
ZoomFactor
(
scale
)
}
pub
fn
get
(
self
)
-
>
f32
{
self
.
0
}
}
