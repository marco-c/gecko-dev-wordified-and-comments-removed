mod
cli
;
mod
command
;
mod
debug_commands
;
mod
gui
;
mod
net
;
use
argh
:
:
FromArgs
;
use
std
:
:
str
;
#
[
derive
(
Debug
Copy
Clone
)
]
enum
Mode
{
Repl
Gui
}
impl
str
:
:
FromStr
for
Mode
{
type
Err
=
&
'
static
str
;
fn
from_str
(
s
:
&
str
)
-
>
Result
<
Mode
&
'
static
str
>
{
match
s
{
"
repl
"
=
>
Ok
(
Mode
:
:
Repl
)
"
gui
"
=
>
Ok
(
Mode
:
:
Gui
)
_
=
>
Err
(
"
Invalid
mode
"
)
}
}
}
#
[
derive
(
FromArgs
Debug
)
]
struct
Args
{
#
[
argh
(
positional
)
]
#
[
argh
(
default
=
"
Mode
:
:
Repl
"
)
]
mode
:
Mode
#
[
argh
(
option
short
=
'
h
'
)
]
#
[
argh
(
default
=
"
\
"
localhost
:
3583
\
"
.
into
(
)
"
)
]
host
:
String
}
fn
main
(
)
{
let
args
:
Args
=
argh
:
:
from_env
(
)
;
let
mut
cmd_list
=
command
:
:
CommandList
:
:
new
(
)
;
debug_commands
:
:
register
(
&
mut
cmd_list
)
;
match
args
.
mode
{
Mode
:
:
Repl
=
>
{
let
cli
=
cli
:
:
Cli
:
:
new
(
&
args
.
host
cmd_list
)
;
cli
.
run
(
)
;
}
Mode
:
:
Gui
=
>
{
let
gui
=
gui
:
:
Gui
:
:
new
(
&
args
.
host
cmd_list
)
;
gui
.
run
(
)
;
}
}
}
