use
api
:
:
{
AlphaType
BorderDetails
BorderDisplayItem
BuiltDisplayListIter
PrimitiveFlags
}
;
use
api
:
:
{
ClipId
ColorF
CommonItemProperties
ComplexClipRegion
ComponentTransferFuncType
RasterSpace
}
;
use
api
:
:
{
DisplayItem
DisplayItemRef
ExtendMode
ExternalScrollId
FilterData
SharedFontInstanceMap
}
;
use
api
:
:
{
FilterOp
FilterPrimitive
FontInstanceKey
FontSize
GlyphInstance
GlyphOptions
GradientStop
}
;
use
api
:
:
{
IframeDisplayItem
ImageKey
ImageRendering
ItemRange
ColorDepth
QualitySettings
}
;
use
api
:
:
{
LineOrientation
LineStyle
NinePatchBorderSource
PipelineId
MixBlendMode
StackingContextFlags
}
;
use
api
:
:
{
PropertyBinding
ReferenceFrameKind
ScrollFrameDisplayItem
ScrollSensitivity
}
;
use
api
:
:
{
Shadow
SpaceAndClipInfo
SpatialId
StickyFrameDisplayItem
ImageMask
ItemTag
}
;
use
api
:
:
{
ClipMode
PrimitiveKeyKind
TransformStyle
YuvColorSpace
ColorRange
YuvData
TempFilterData
}
;
use
api
:
:
{
ReferenceTransformBinding
Rotation
}
;
use
api
:
:
image_tiling
:
:
simplify_repeated_primitive
;
use
api
:
:
units
:
:
*
;
use
crate
:
:
clip
:
:
{
ClipChainId
ClipRegion
ClipItemKey
ClipStore
ClipItemKeyKind
}
;
use
crate
:
:
clip
:
:
{
ClipInternData
ClipNodeKind
ClipInstance
}
;
use
crate
:
:
spatial_tree
:
:
{
ROOT_SPATIAL_NODE_INDEX
SpatialTree
SpatialNodeIndex
}
;
use
crate
:
:
frame_builder
:
:
{
ChasePrimitive
FrameBuilderConfig
}
;
use
crate
:
:
glyph_rasterizer
:
:
FontInstance
;
use
crate
:
:
hit_test
:
:
{
HitTestingItem
HitTestingScene
}
;
use
crate
:
:
intern
:
:
Interner
;
use
crate
:
:
internal_types
:
:
{
FastHashMap
LayoutPrimitiveInfo
Filter
}
;
use
crate
:
:
picture
:
:
{
Picture3DContext
PictureCompositeMode
PicturePrimitive
PictureOptions
}
;
use
crate
:
:
picture
:
:
{
BlitReason
OrderedPictureChild
PrimitiveList
}
;
use
crate
:
:
prim_store
:
:
{
PrimitiveInstance
register_prim_chase_id
}
;
use
crate
:
:
prim_store
:
:
{
PrimitiveInstanceKind
NinePatchDescriptor
PrimitiveStore
}
;
use
crate
:
:
prim_store
:
:
{
InternablePrimitive
SegmentInstanceIndex
PictureIndex
}
;
use
crate
:
:
prim_store
:
:
backdrop
:
:
Backdrop
;
use
crate
:
:
prim_store
:
:
borders
:
:
{
ImageBorder
NormalBorderPrim
}
;
use
crate
:
:
prim_store
:
:
gradient
:
:
{
GradientStopKey
LinearGradient
RadialGradient
RadialGradientParams
ConicGradient
ConicGradientParams
}
;
use
crate
:
:
prim_store
:
:
image
:
:
{
Image
YuvImage
}
;
use
crate
:
:
prim_store
:
:
line_dec
:
:
{
LineDecoration
LineDecorationCacheKey
get_line_decoration_size
}
;
use
crate
:
:
prim_store
:
:
picture
:
:
{
Picture
PictureCompositeKey
PictureKey
}
;
use
crate
:
:
prim_store
:
:
text_run
:
:
TextRun
;
use
crate
:
:
render_backend
:
:
SceneView
;
use
crate
:
:
resource_cache
:
:
ImageRequest
;
use
crate
:
:
scene
:
:
{
Scene
ScenePipeline
BuiltScene
SceneStats
StackingContextHelpers
}
;
use
crate
:
:
scene_builder_thread
:
:
Interners
;
use
crate
:
:
space
:
:
SpaceSnapper
;
use
crate
:
:
spatial_node
:
:
{
StickyFrameInfo
ScrollFrameKind
}
;
use
crate
:
:
tile_cache
:
:
TileCacheBuilder
;
use
euclid
:
:
approxeq
:
:
ApproxEq
;
use
std
:
:
{
f32
mem
usize
ops
}
;
use
std
:
:
collections
:
:
vec_deque
:
:
VecDeque
;
use
std
:
:
sync
:
:
Arc
;
use
crate
:
:
util
:
:
{
MaxRect
VecHelper
}
;
use
crate
:
:
filterdata
:
:
{
SFilterDataComponent
SFilterData
SFilterDataKey
}
;
use
smallvec
:
:
SmallVec
;
struct
ReferenceFrameState
{
offsets
:
Vec
<
LayoutVector2D
>
}
struct
ReferenceFrameMapper
{
frames
:
Vec
<
ReferenceFrameState
>
}
impl
ReferenceFrameMapper
{
fn
new
(
)
-
>
Self
{
ReferenceFrameMapper
{
frames
:
vec
!
[
ReferenceFrameState
{
offsets
:
vec
!
[
LayoutVector2D
:
:
zero
(
)
]
}
]
}
}
fn
push_scope
(
&
mut
self
)
{
self
.
frames
.
push
(
ReferenceFrameState
{
offsets
:
vec
!
[
LayoutVector2D
:
:
zero
(
)
]
}
)
;
}
fn
pop_scope
(
&
mut
self
)
{
self
.
frames
.
pop
(
)
.
unwrap
(
)
;
}
fn
push_offset
(
&
mut
self
offset
:
LayoutVector2D
)
{
let
frame
=
self
.
frames
.
last_mut
(
)
.
unwrap
(
)
;
let
current_offset
=
*
frame
.
offsets
.
last
(
)
.
unwrap
(
)
;
frame
.
offsets
.
push
(
current_offset
+
offset
)
;
}
fn
pop_offset
(
&
mut
self
)
{
let
frame
=
self
.
frames
.
last_mut
(
)
.
unwrap
(
)
;
frame
.
offsets
.
pop
(
)
.
unwrap
(
)
;
}
fn
current_offset
(
&
self
)
-
>
LayoutVector2D
{
*
self
.
frames
.
last
(
)
.
unwrap
(
)
.
offsets
.
last
(
)
.
unwrap
(
)
}
}
pub
struct
ScrollOffsetMapper
{
pub
current_spatial_node
:
SpatialNodeIndex
pub
current_offset
:
LayoutVector2D
}
impl
ScrollOffsetMapper
{
fn
new
(
)
-
>
Self
{
ScrollOffsetMapper
{
current_spatial_node
:
SpatialNodeIndex
:
:
INVALID
current_offset
:
LayoutVector2D
:
:
zero
(
)
}
}
fn
external_scroll_offset
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
spatial_tree
:
&
SpatialTree
)
-
>
LayoutVector2D
{
if
spatial_node_index
!
=
self
.
current_spatial_node
{
self
.
current_spatial_node
=
spatial_node_index
;
self
.
current_offset
=
spatial_tree
.
external_scroll_offset
(
spatial_node_index
)
;
}
self
.
current_offset
}
}
#
[
derive
(
Default
)
]
pub
struct
NodeIdToIndexMapper
{
spatial_node_map
:
FastHashMap
<
SpatialId
SpatialNodeIndex
>
}
impl
NodeIdToIndexMapper
{
fn
add_spatial_node
(
&
mut
self
id
:
SpatialId
index
:
SpatialNodeIndex
)
{
let
_old_value
=
self
.
spatial_node_map
.
insert
(
id
index
)
;
debug_assert
!
(
_old_value
.
is_none
(
)
)
;
}
fn
get_spatial_node_index
(
&
self
id
:
SpatialId
)
-
>
SpatialNodeIndex
{
self
.
spatial_node_map
[
&
id
]
}
}
#
[
derive
(
Debug
Clone
Default
)
]
pub
struct
CompositeOps
{
pub
filters
:
Vec
<
Filter
>
pub
filter_datas
:
Vec
<
FilterData
>
pub
filter_primitives
:
Vec
<
FilterPrimitive
>
pub
mix_blend_mode
:
Option
<
MixBlendMode
>
}
impl
CompositeOps
{
pub
fn
new
(
filters
:
Vec
<
Filter
>
filter_datas
:
Vec
<
FilterData
>
filter_primitives
:
Vec
<
FilterPrimitive
>
mix_blend_mode
:
Option
<
MixBlendMode
>
)
-
>
Self
{
CompositeOps
{
filters
filter_datas
filter_primitives
mix_blend_mode
}
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
filters
.
is_empty
(
)
&
&
self
.
filter_primitives
.
is_empty
(
)
&
&
self
.
mix_blend_mode
.
is_none
(
)
}
}
bitflags
!
{
/
/
/
Slice
flags
pub
struct
SliceFlags
:
u8
{
/
/
/
Slice
created
by
a
prim
that
has
PrimitiveFlags
:
:
IS_SCROLLBAR_CONTAINER
const
IS_SCROLLBAR
=
1
;
}
}
pub
struct
SceneBuilder
<
'
a
>
{
scene
:
&
'
a
Scene
font_instances
:
SharedFontInstanceMap
id_to_index_mapper
:
NodeIdToIndexMapper
sc_stack
:
Vec
<
FlattenedStackingContext
>
containing_block_stack
:
Vec
<
SpatialNodeIndex
>
pending_shadow_items
:
VecDeque
<
ShadowItem
>
pub
spatial_tree
:
SpatialTree
pub
prim_store
:
PrimitiveStore
pub
hit_testing_scene
:
HitTestingScene
pub
clip_store
:
ClipStore
pub
config
:
FrameBuilderConfig
interners
:
&
'
a
mut
Interners
rf_mapper
:
ReferenceFrameMapper
external_scroll_mapper
:
ScrollOffsetMapper
iframe_size
:
Vec
<
LayoutSize
>
quality_settings
:
QualitySettings
tile_cache_builder
:
TileCacheBuilder
snap_to_device
:
SpaceSnapper
}
impl
<
'
a
>
SceneBuilder
<
'
a
>
{
pub
fn
build
(
scene
:
&
Scene
font_instances
:
SharedFontInstanceMap
view
:
&
SceneView
frame_builder_config
:
&
FrameBuilderConfig
interners
:
&
mut
Interners
stats
:
&
SceneStats
)
-
>
BuiltScene
{
profile_scope
!
(
"
build_scene
"
)
;
let
root_pipeline_id
=
scene
.
root_pipeline_id
.
unwrap
(
)
;
let
root_pipeline
=
scene
.
pipelines
.
get
(
&
root_pipeline_id
)
.
unwrap
(
)
;
let
background_color
=
root_pipeline
.
background_color
.
and_then
(
|
color
|
if
color
.
a
>
0
.
0
{
Some
(
color
)
}
else
{
None
}
)
;
let
device_pixel_scale
=
view
.
accumulated_scale_factor_for_snapping
(
)
;
let
spatial_tree
=
SpatialTree
:
:
new
(
)
;
let
snap_to_device
=
SpaceSnapper
:
:
new
(
ROOT_SPATIAL_NODE_INDEX
device_pixel_scale
)
;
let
mut
builder
=
SceneBuilder
{
scene
spatial_tree
font_instances
config
:
*
frame_builder_config
id_to_index_mapper
:
NodeIdToIndexMapper
:
:
default
(
)
hit_testing_scene
:
HitTestingScene
:
:
new
(
&
stats
.
hit_test_stats
)
pending_shadow_items
:
VecDeque
:
:
new
(
)
sc_stack
:
Vec
:
:
new
(
)
containing_block_stack
:
Vec
:
:
new
(
)
prim_store
:
PrimitiveStore
:
:
new
(
&
stats
.
prim_store_stats
)
clip_store
:
ClipStore
:
:
new
(
)
interners
rf_mapper
:
ReferenceFrameMapper
:
:
new
(
)
external_scroll_mapper
:
ScrollOffsetMapper
:
:
new
(
)
iframe_size
:
Vec
:
:
new
(
)
quality_settings
:
view
.
quality_settings
tile_cache_builder
:
TileCacheBuilder
:
:
new
(
)
snap_to_device
}
;
builder
.
build_all
(
&
root_pipeline
)
;
let
(
tile_cache_config
prim_list
)
=
builder
.
tile_cache_builder
.
build
(
&
builder
.
config
&
mut
builder
.
interners
&
mut
builder
.
clip_store
&
mut
builder
.
prim_store
)
;
let
root_pic_index
=
PictureIndex
(
builder
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
None
Picture3DContext
:
:
Out
true
PrimitiveFlags
:
:
IS_BACKFACE_VISIBLE
RasterSpace
:
:
Screen
prim_list
ROOT_SPATIAL_NODE_INDEX
PictureOptions
:
:
default
(
)
)
)
)
;
BuiltScene
{
has_root_pipeline
:
scene
.
has_root_pipeline
(
)
pipeline_epochs
:
scene
.
pipeline_epochs
.
clone
(
)
output_rect
:
view
.
device_rect
.
size
.
into
(
)
background_color
hit_testing_scene
:
Arc
:
:
new
(
builder
.
hit_testing_scene
)
spatial_tree
:
builder
.
spatial_tree
prim_store
:
builder
.
prim_store
clip_store
:
builder
.
clip_store
root_pic_index
config
:
builder
.
config
tile_cache_config
}
}
fn
current_offset
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
)
-
>
LayoutVector2D
{
let
rf_offset
=
self
.
rf_mapper
.
current_offset
(
)
;
let
scroll_offset
=
self
.
external_scroll_mapper
.
external_scroll_offset
(
spatial_node_index
&
self
.
spatial_tree
)
;
rf_offset
+
scroll_offset
}
fn
build_all
(
&
mut
self
root_pipeline
:
&
ScenePipeline
)
{
enum
ContextKind
<
'
a
>
{
Root
StackingContext
{
sc_info
:
StackingContextInfo
}
ReferenceFrame
Iframe
{
parent_traversal
:
BuiltDisplayListIter
<
'
a
>
}
}
struct
BuildContext
<
'
a
>
{
pipeline_id
:
PipelineId
kind
:
ContextKind
<
'
a
>
}
let
root_clip_id
=
ClipId
:
:
root
(
root_pipeline
.
pipeline_id
)
;
self
.
clip_store
.
register_clip_template
(
root_clip_id
root_clip_id
&
[
]
)
;
self
.
clip_store
.
push_clip_root
(
Some
(
root_clip_id
)
false
)
;
self
.
push_root
(
root_pipeline
.
pipeline_id
&
root_pipeline
.
viewport_size
)
;
let
mut
stack
=
vec
!
[
BuildContext
{
pipeline_id
:
root_pipeline
.
pipeline_id
kind
:
ContextKind
:
:
Root
}
]
;
let
mut
traversal
=
root_pipeline
.
display_list
.
iter
(
)
;
'
outer
:
while
let
Some
(
bc
)
=
stack
.
pop
(
)
{
loop
{
let
item
=
match
traversal
.
next
(
)
{
Some
(
item
)
=
>
item
None
=
>
break
}
;
match
item
.
item
(
)
{
DisplayItem
:
:
PushStackingContext
(
ref
info
)
=
>
{
profile_scope
!
(
"
build_stacking_context
"
)
;
let
spatial_node_index
=
self
.
get_space
(
info
.
spatial_id
)
;
let
mut
subtraversal
=
item
.
sub_iter
(
)
;
if
subtraversal
.
current_stacking_context_empty
(
)
{
subtraversal
.
skip_current_stacking_context
(
)
;
traversal
=
subtraversal
;
continue
;
}
let
composition_operations
=
CompositeOps
:
:
new
(
filter_ops_for_compositing
(
item
.
filters
(
)
)
filter_datas_for_compositing
(
item
.
filter_datas
(
)
)
filter_primitives_for_compositing
(
item
.
filter_primitives
(
)
)
info
.
stacking_context
.
mix_blend_mode_for_compositing
(
)
)
;
let
sc_info
=
self
.
push_stacking_context
(
composition_operations
info
.
stacking_context
.
transform_style
info
.
prim_flags
spatial_node_index
info
.
stacking_context
.
clip_id
info
.
stacking_context
.
raster_space
info
.
stacking_context
.
flags
)
;
self
.
rf_mapper
.
push_offset
(
info
.
origin
.
to_vector
(
)
)
;
let
new_context
=
BuildContext
{
pipeline_id
:
bc
.
pipeline_id
kind
:
ContextKind
:
:
StackingContext
{
sc_info
}
}
;
stack
.
push
(
bc
)
;
stack
.
push
(
new_context
)
;
subtraversal
.
merge_debug_stats_from
(
&
mut
traversal
)
;
traversal
=
subtraversal
;
continue
'
outer
;
}
DisplayItem
:
:
PushReferenceFrame
(
ref
info
)
=
>
{
profile_scope
!
(
"
build_reference_frame
"
)
;
let
parent_space
=
self
.
get_space
(
info
.
parent_spatial_id
)
;
let
mut
subtraversal
=
item
.
sub_iter
(
)
;
let
current_offset
=
self
.
current_offset
(
parent_space
)
;
let
transform
=
match
info
.
reference_frame
.
transform
{
ReferenceTransformBinding
:
:
Static
{
binding
}
=
>
binding
ReferenceTransformBinding
:
:
Computed
{
scale_from
vertical_flip
rotation
}
=
>
{
let
content_size
=
&
self
.
iframe_size
.
last
(
)
.
unwrap
(
)
;
let
mut
transform
=
if
let
Some
(
scale_from
)
=
scale_from
{
match
rotation
{
Rotation
:
:
Degree0
|
Rotation
:
:
Degree180
=
>
{
LayoutTransform
:
:
scale
(
content_size
.
width
/
scale_from
.
width
content_size
.
height
/
scale_from
.
height
1
.
0
)
}
Rotation
:
:
Degree90
|
Rotation
:
:
Degree270
=
>
{
LayoutTransform
:
:
scale
(
content_size
.
height
/
scale_from
.
width
content_size
.
width
/
scale_from
.
height
1
.
0
)
}
}
}
else
{
LayoutTransform
:
:
identity
(
)
}
;
if
vertical_flip
{
let
content_size
=
&
self
.
iframe_size
.
last
(
)
.
unwrap
(
)
;
transform
=
transform
.
then_translate
(
LayoutVector3D
:
:
new
(
0
.
0
content_size
.
height
0
.
0
)
)
.
pre_scale
(
1
.
0
-
1
.
0
1
.
0
)
;
}
let
rotate
=
rotation
.
to_matrix
(
*
*
content_size
)
;
let
transform
=
transform
.
then
(
&
rotate
)
;
PropertyBinding
:
:
Value
(
transform
)
}
}
;
self
.
push_reference_frame
(
info
.
reference_frame
.
id
Some
(
parent_space
)
bc
.
pipeline_id
info
.
reference_frame
.
transform_style
transform
info
.
reference_frame
.
kind
current_offset
+
info
.
origin
.
to_vector
(
)
)
;
self
.
rf_mapper
.
push_scope
(
)
;
let
new_context
=
BuildContext
{
pipeline_id
:
bc
.
pipeline_id
kind
:
ContextKind
:
:
ReferenceFrame
}
;
stack
.
push
(
bc
)
;
stack
.
push
(
new_context
)
;
subtraversal
.
merge_debug_stats_from
(
&
mut
traversal
)
;
traversal
=
subtraversal
;
continue
'
outer
;
}
DisplayItem
:
:
PopReferenceFrame
|
DisplayItem
:
:
PopStackingContext
=
>
break
DisplayItem
:
:
Iframe
(
ref
info
)
=
>
{
profile_scope
!
(
"
iframe
"
)
;
let
space
=
self
.
get_space
(
info
.
space_and_clip
.
spatial_id
)
;
let
(
size
subtraversal
)
=
match
self
.
push_iframe
(
info
space
)
{
Some
(
pair
)
=
>
pair
None
=
>
continue
}
;
if
self
.
iframe_size
.
is_empty
(
)
{
self
.
tile_cache_builder
.
add_tile_cache_barrier
(
)
;
}
self
.
rf_mapper
.
push_scope
(
)
;
self
.
iframe_size
.
push
(
size
)
;
let
new_context
=
BuildContext
{
pipeline_id
:
info
.
pipeline_id
kind
:
ContextKind
:
:
Iframe
{
parent_traversal
:
mem
:
:
replace
(
&
mut
traversal
subtraversal
)
}
}
;
stack
.
push
(
bc
)
;
stack
.
push
(
new_context
)
;
continue
'
outer
;
}
_
=
>
{
self
.
build_item
(
item
bc
.
pipeline_id
)
;
}
}
;
}
match
bc
.
kind
{
ContextKind
:
:
Root
=
>
{
}
ContextKind
:
:
StackingContext
{
sc_info
}
=
>
{
self
.
rf_mapper
.
pop_offset
(
)
;
self
.
pop_stacking_context
(
sc_info
)
;
}
ContextKind
:
:
ReferenceFrame
=
>
{
self
.
rf_mapper
.
pop_scope
(
)
;
}
ContextKind
:
:
Iframe
{
parent_traversal
}
=
>
{
self
.
iframe_size
.
pop
(
)
;
self
.
rf_mapper
.
pop_scope
(
)
;
self
.
clip_store
.
pop_clip_root
(
)
;
if
self
.
iframe_size
.
is_empty
(
)
{
self
.
tile_cache_builder
.
add_tile_cache_barrier
(
)
;
}
traversal
=
parent_traversal
;
}
}
if
cfg
!
(
feature
=
"
display_list_stats
"
)
{
let
stats
=
traversal
.
debug_stats
(
)
;
let
total_bytes
:
usize
=
stats
.
iter
(
)
.
map
(
|
(
_
stats
)
|
stats
.
num_bytes
)
.
sum
(
)
;
println
!
(
"
item
total
count
total
bytes
%
of
DL
bytes
bytes
per
item
"
)
;
for
(
label
stats
)
in
stats
{
println
!
(
"
{
}
{
}
{
}
kb
{
}
%
{
}
"
label
stats
.
total_count
stats
.
num_bytes
/
1000
(
(
stats
.
num_bytes
as
f32
/
total_bytes
.
max
(
1
)
as
f32
)
*
100
.
0
)
as
usize
stats
.
num_bytes
/
stats
.
total_count
.
max
(
1
)
)
;
}
println
!
(
)
;
}
}
self
.
clip_store
.
pop_clip_root
(
)
;
debug_assert
!
(
self
.
sc_stack
.
is_empty
(
)
)
;
}
fn
build_sticky_frame
(
&
mut
self
info
:
&
StickyFrameDisplayItem
parent_node_index
:
SpatialNodeIndex
)
{
let
current_offset
=
self
.
current_offset
(
parent_node_index
)
;
let
frame_rect
=
info
.
bounds
.
translate
(
current_offset
)
;
let
sticky_frame_info
=
StickyFrameInfo
:
:
new
(
frame_rect
info
.
margins
info
.
vertical_offset_bounds
info
.
horizontal_offset_bounds
info
.
previously_applied_offset
)
;
let
index
=
self
.
spatial_tree
.
add_sticky_frame
(
parent_node_index
sticky_frame_info
info
.
id
.
pipeline_id
(
)
)
;
self
.
id_to_index_mapper
.
add_spatial_node
(
info
.
id
index
)
;
}
fn
build_scroll_frame
(
&
mut
self
info
:
&
ScrollFrameDisplayItem
parent_node_index
:
SpatialNodeIndex
pipeline_id
:
PipelineId
)
{
let
current_offset
=
self
.
current_offset
(
parent_node_index
)
;
let
clip_region
=
ClipRegion
:
:
create_for_clip_node_with_local_clip
(
&
info
.
clip_rect
&
current_offset
)
;
let
frame_rect
=
clip_region
.
main
;
let
content_size
=
info
.
content_rect
.
size
;
self
.
add_clip_node
(
info
.
clip_id
&
info
.
parent_space_and_clip
clip_region
)
;
self
.
add_scroll_frame
(
info
.
scroll_frame_id
parent_node_index
info
.
external_id
pipeline_id
&
frame_rect
&
content_size
info
.
scroll_sensitivity
ScrollFrameKind
:
:
Explicit
info
.
external_scroll_offset
)
;
}
fn
push_iframe
(
&
mut
self
info
:
&
IframeDisplayItem
spatial_node_index
:
SpatialNodeIndex
)
-
>
Option
<
(
LayoutSize
BuiltDisplayListIter
<
'
a
>
)
>
{
let
iframe_pipeline_id
=
info
.
pipeline_id
;
let
pipeline
=
match
self
.
scene
.
pipelines
.
get
(
&
iframe_pipeline_id
)
{
Some
(
pipeline
)
=
>
pipeline
None
=
>
{
debug_assert
!
(
info
.
ignore_missing_pipeline
)
;
return
None
}
}
;
let
current_offset
=
self
.
current_offset
(
spatial_node_index
)
;
self
.
add_clip_node
(
ClipId
:
:
root
(
iframe_pipeline_id
)
&
info
.
space_and_clip
ClipRegion
:
:
create_for_clip_node_with_local_clip
(
&
info
.
clip_rect
&
current_offset
)
)
;
self
.
clip_store
.
push_clip_root
(
Some
(
ClipId
:
:
root
(
iframe_pipeline_id
)
)
true
)
;
let
bounds
=
self
.
snap_rect
(
&
info
.
bounds
.
translate
(
current_offset
)
spatial_node_index
)
;
let
spatial_node_index
=
self
.
push_reference_frame
(
SpatialId
:
:
root_reference_frame
(
iframe_pipeline_id
)
Some
(
spatial_node_index
)
iframe_pipeline_id
TransformStyle
:
:
Flat
PropertyBinding
:
:
Value
(
LayoutTransform
:
:
identity
(
)
)
ReferenceFrameKind
:
:
Transform
bounds
.
origin
.
to_vector
(
)
)
;
let
iframe_rect
=
LayoutRect
:
:
new
(
LayoutPoint
:
:
zero
(
)
bounds
.
size
)
;
self
.
add_scroll_frame
(
SpatialId
:
:
root_scroll_node
(
iframe_pipeline_id
)
spatial_node_index
Some
(
ExternalScrollId
(
0
iframe_pipeline_id
)
)
iframe_pipeline_id
&
iframe_rect
&
bounds
.
size
ScrollSensitivity
:
:
ScriptAndInputEvents
ScrollFrameKind
:
:
PipelineRoot
LayoutVector2D
:
:
zero
(
)
)
;
Some
(
(
bounds
.
size
pipeline
.
display_list
.
iter
(
)
)
)
}
fn
get_space
(
&
self
spatial_id
:
SpatialId
)
-
>
SpatialNodeIndex
{
self
.
id_to_index_mapper
.
get_spatial_node_index
(
spatial_id
)
}
fn
get_clip_chain
(
&
mut
self
clip_id
:
ClipId
)
-
>
ClipChainId
{
self
.
clip_store
.
get_or_build_clip_chain_id
(
clip_id
)
}
fn
process_common_properties
(
&
mut
self
common
:
&
CommonItemProperties
bounds
:
Option
<
&
LayoutRect
>
)
-
>
(
LayoutPrimitiveInfo
LayoutRect
SpatialNodeIndex
ClipChainId
)
{
let
spatial_node_index
=
self
.
get_space
(
common
.
spatial_id
)
;
let
clip_chain_id
=
self
.
get_clip_chain
(
common
.
clip_id
)
;
let
current_offset
=
self
.
current_offset
(
spatial_node_index
)
;
let
unsnapped_clip_rect
=
common
.
clip_rect
.
translate
(
current_offset
)
;
let
clip_rect
=
self
.
snap_rect
(
&
unsnapped_clip_rect
spatial_node_index
)
;
let
unsnapped_rect
=
bounds
.
map
(
|
bounds
|
{
bounds
.
translate
(
current_offset
)
}
)
;
let
rect
=
unsnapped_rect
.
map_or
(
clip_rect
|
bounds
|
{
self
.
snap_rect
(
&
bounds
spatial_node_index
)
}
)
;
let
layout
=
LayoutPrimitiveInfo
{
rect
clip_rect
flags
:
common
.
flags
}
;
(
layout
unsnapped_rect
.
unwrap_or
(
unsnapped_clip_rect
)
spatial_node_index
clip_chain_id
)
}
fn
process_common_properties_with_bounds
(
&
mut
self
common
:
&
CommonItemProperties
bounds
:
&
LayoutRect
)
-
>
(
LayoutPrimitiveInfo
LayoutRect
SpatialNodeIndex
ClipChainId
)
{
self
.
process_common_properties
(
common
Some
(
bounds
)
)
}
pub
fn
snap_rect
(
&
mut
self
rect
:
&
LayoutRect
target_spatial_node
:
SpatialNodeIndex
)
-
>
LayoutRect
{
self
.
snap_to_device
.
set_target_spatial_node
(
target_spatial_node
&
self
.
spatial_tree
)
;
self
.
snap_to_device
.
snap_rect
(
rect
)
}
fn
build_item
<
'
b
>
(
&
'
b
mut
self
item
:
DisplayItemRef
pipeline_id
:
PipelineId
)
{
match
*
item
.
item
(
)
{
DisplayItem
:
:
Image
(
ref
info
)
=
>
{
profile_scope
!
(
"
image
"
)
;
let
(
layout
_
spatial_node_index
clip_chain_id
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
bounds
)
;
self
.
add_image
(
spatial_node_index
clip_chain_id
&
layout
layout
.
rect
.
size
LayoutSize
:
:
zero
(
)
info
.
image_key
info
.
image_rendering
info
.
alpha_type
info
.
color
)
;
}
DisplayItem
:
:
RepeatingImage
(
ref
info
)
=
>
{
profile_scope
!
(
"
repeating_image
"
)
;
let
(
layout
unsnapped_rect
spatial_node_index
clip_chain_id
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
bounds
)
;
let
stretch_size
=
process_repeat_size
(
&
layout
.
rect
&
unsnapped_rect
info
.
stretch_size
)
;
self
.
add_image
(
spatial_node_index
clip_chain_id
&
layout
stretch_size
info
.
tile_spacing
info
.
image_key
info
.
image_rendering
info
.
alpha_type
info
.
color
)
;
}
DisplayItem
:
:
YuvImage
(
ref
info
)
=
>
{
profile_scope
!
(
"
yuv_image
"
)
;
let
(
layout
_
spatial_node_index
clip_chain_id
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
bounds
)
;
self
.
add_yuv_image
(
spatial_node_index
clip_chain_id
&
layout
info
.
yuv_data
info
.
color_depth
info
.
color_space
info
.
color_range
info
.
image_rendering
)
;
}
DisplayItem
:
:
Text
(
ref
info
)
=
>
{
profile_scope
!
(
"
text
"
)
;
let
(
layout
_
spatial_node_index
clip_chain_id
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
bounds
)
;
self
.
add_text
(
spatial_node_index
clip_chain_id
&
layout
&
info
.
font_key
&
info
.
color
item
.
glyphs
(
)
info
.
glyph_options
)
;
}
DisplayItem
:
:
Rectangle
(
ref
info
)
=
>
{
profile_scope
!
(
"
rect
"
)
;
let
(
layout
_
spatial_node_index
clip_chain_id
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
bounds
)
;
self
.
add_primitive
(
spatial_node_index
clip_chain_id
&
layout
Vec
:
:
new
(
)
PrimitiveKeyKind
:
:
Rectangle
{
color
:
info
.
color
.
into
(
)
}
)
;
}
DisplayItem
:
:
HitTest
(
ref
info
)
=
>
{
profile_scope
!
(
"
hit_test
"
)
;
let
(
layout
_
spatial_node_index
clip_chain_id
)
=
self
.
process_common_properties
(
&
info
.
common
None
)
;
self
.
add_primitive_to_hit_testing_list
(
&
layout
spatial_node_index
clip_chain_id
info
.
tag
)
;
}
DisplayItem
:
:
ClearRectangle
(
ref
info
)
=
>
{
profile_scope
!
(
"
clear
"
)
;
let
(
layout
_
spatial_node_index
clip_chain_id
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
bounds
)
;
self
.
add_clear_rectangle
(
spatial_node_index
clip_chain_id
&
layout
)
;
}
DisplayItem
:
:
Line
(
ref
info
)
=
>
{
profile_scope
!
(
"
line
"
)
;
let
(
layout
_
spatial_node_index
clip_chain_id
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
area
)
;
self
.
add_line
(
spatial_node_index
clip_chain_id
&
layout
info
.
wavy_line_thickness
info
.
orientation
info
.
color
info
.
style
)
;
}
DisplayItem
:
:
Gradient
(
ref
info
)
=
>
{
profile_scope
!
(
"
gradient
"
)
;
let
(
layout
unsnapped_rect
spatial_node_index
clip_chain_id
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
bounds
)
;
let
tile_size
=
process_repeat_size
(
&
layout
.
rect
&
unsnapped_rect
info
.
tile_size
)
;
if
let
Some
(
prim_key_kind
)
=
self
.
create_linear_gradient_prim
(
&
layout
info
.
gradient
.
start_point
info
.
gradient
.
end_point
item
.
gradient_stops
(
)
info
.
gradient
.
extend_mode
tile_size
info
.
tile_spacing
None
)
{
self
.
add_nonshadowable_primitive
(
spatial_node_index
clip_chain_id
&
layout
Vec
:
:
new
(
)
prim_key_kind
)
;
}
}
DisplayItem
:
:
RadialGradient
(
ref
info
)
=
>
{
profile_scope
!
(
"
radial
"
)
;
let
(
layout
unsnapped_rect
spatial_node_index
clip_chain_id
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
bounds
)
;
let
tile_size
=
process_repeat_size
(
&
layout
.
rect
&
unsnapped_rect
info
.
tile_size
)
;
let
prim_key_kind
=
self
.
create_radial_gradient_prim
(
&
layout
info
.
gradient
.
center
info
.
gradient
.
start_offset
*
info
.
gradient
.
radius
.
width
info
.
gradient
.
end_offset
*
info
.
gradient
.
radius
.
width
info
.
gradient
.
radius
.
width
/
info
.
gradient
.
radius
.
height
item
.
gradient_stops
(
)
info
.
gradient
.
extend_mode
tile_size
info
.
tile_spacing
None
)
;
self
.
add_nonshadowable_primitive
(
spatial_node_index
clip_chain_id
&
layout
Vec
:
:
new
(
)
prim_key_kind
)
;
}
DisplayItem
:
:
ConicGradient
(
ref
info
)
=
>
{
profile_scope
!
(
"
conic
"
)
;
let
(
layout
unsnapped_rect
spatial_node_index
clip_chain_id
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
bounds
)
;
let
tile_size
=
process_repeat_size
(
&
layout
.
rect
&
unsnapped_rect
info
.
tile_size
)
;
let
prim_key_kind
=
self
.
create_conic_gradient_prim
(
&
layout
info
.
gradient
.
center
info
.
gradient
.
angle
info
.
gradient
.
start_offset
info
.
gradient
.
end_offset
item
.
gradient_stops
(
)
info
.
gradient
.
extend_mode
tile_size
info
.
tile_spacing
None
)
;
self
.
add_nonshadowable_primitive
(
spatial_node_index
clip_chain_id
&
layout
Vec
:
:
new
(
)
prim_key_kind
)
;
}
DisplayItem
:
:
BoxShadow
(
ref
info
)
=
>
{
profile_scope
!
(
"
box_shadow
"
)
;
let
(
layout
_
spatial_node_index
clip_chain_id
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
box_bounds
)
;
self
.
add_box_shadow
(
spatial_node_index
clip_chain_id
&
layout
&
info
.
offset
info
.
color
info
.
blur_radius
info
.
spread_radius
info
.
border_radius
info
.
clip_mode
)
;
}
DisplayItem
:
:
Border
(
ref
info
)
=
>
{
profile_scope
!
(
"
border
"
)
;
let
(
layout
_
spatial_node_index
clip_chain_id
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
bounds
)
;
self
.
add_border
(
spatial_node_index
clip_chain_id
&
layout
info
item
.
gradient_stops
(
)
)
;
}
DisplayItem
:
:
ImageMaskClip
(
ref
info
)
=
>
{
profile_scope
!
(
"
image_clip
"
)
;
let
parent_space
=
self
.
get_space
(
info
.
parent_space_and_clip
.
spatial_id
)
;
let
current_offset
=
self
.
current_offset
(
parent_space
)
;
let
image_mask
=
ImageMask
{
rect
:
info
.
image_mask
.
rect
.
translate
(
current_offset
)
.
.
info
.
image_mask
}
;
self
.
add_image_mask_clip_node
(
info
.
id
&
info
.
parent_space_and_clip
&
image_mask
)
;
}
DisplayItem
:
:
RoundedRectClip
(
ref
info
)
=
>
{
profile_scope
!
(
"
rounded_clip
"
)
;
let
parent_space
=
self
.
get_space
(
info
.
parent_space_and_clip
.
spatial_id
)
;
let
current_offset
=
self
.
current_offset
(
parent_space
)
;
self
.
add_rounded_rect_clip_node
(
info
.
id
&
info
.
parent_space_and_clip
&
info
.
clip
current_offset
)
;
}
DisplayItem
:
:
RectClip
(
ref
info
)
=
>
{
profile_scope
!
(
"
rect_clip
"
)
;
let
parent_space
=
self
.
get_space
(
info
.
parent_space_and_clip
.
spatial_id
)
;
let
current_offset
=
self
.
current_offset
(
parent_space
)
;
let
clip_rect
=
info
.
clip_rect
.
translate
(
current_offset
)
;
self
.
add_rect_clip_node
(
info
.
id
&
info
.
parent_space_and_clip
&
clip_rect
)
;
}
DisplayItem
:
:
Clip
(
ref
info
)
=
>
{
profile_scope
!
(
"
clip
"
)
;
let
parent_space
=
self
.
get_space
(
info
.
parent_space_and_clip
.
spatial_id
)
;
let
current_offset
=
self
.
current_offset
(
parent_space
)
;
let
clip_region
=
ClipRegion
:
:
create_for_clip_node
(
info
.
clip_rect
item
.
complex_clip
(
)
.
iter
(
)
&
current_offset
)
;
self
.
add_clip_node
(
info
.
id
&
info
.
parent_space_and_clip
clip_region
)
;
}
DisplayItem
:
:
ClipChain
(
ref
info
)
=
>
{
profile_scope
!
(
"
clip_chain
"
)
;
let
parent
=
info
.
parent
.
map_or
(
ClipId
:
:
root
(
pipeline_id
)
|
id
|
ClipId
:
:
ClipChain
(
id
)
)
;
let
mut
instances
:
SmallVec
<
[
ClipInstance
;
4
]
>
=
SmallVec
:
:
new
(
)
;
for
clip_item
in
item
.
clip_chain_items
(
)
{
let
template
=
self
.
clip_store
.
get_template
(
clip_item
)
;
instances
.
extend_from_slice
(
&
template
.
instances
)
;
}
self
.
clip_store
.
register_clip_template
(
ClipId
:
:
ClipChain
(
info
.
id
)
parent
&
instances
)
;
}
DisplayItem
:
:
ScrollFrame
(
ref
info
)
=
>
{
profile_scope
!
(
"
scrollframe
"
)
;
let
parent_space
=
self
.
get_space
(
info
.
parent_space_and_clip
.
spatial_id
)
;
self
.
build_scroll_frame
(
info
parent_space
pipeline_id
)
;
}
DisplayItem
:
:
StickyFrame
(
ref
info
)
=
>
{
profile_scope
!
(
"
stickyframe
"
)
;
let
parent_space
=
self
.
get_space
(
info
.
parent_spatial_id
)
;
self
.
build_sticky_frame
(
info
parent_space
)
;
}
DisplayItem
:
:
BackdropFilter
(
ref
info
)
=
>
{
profile_scope
!
(
"
backdrop
"
)
;
let
(
layout
_
spatial_node_index
clip_chain_id
)
=
self
.
process_common_properties
(
&
info
.
common
None
)
;
let
filters
=
filter_ops_for_compositing
(
item
.
filters
(
)
)
;
let
filter_datas
=
filter_datas_for_compositing
(
item
.
filter_datas
(
)
)
;
let
filter_primitives
=
filter_primitives_for_compositing
(
item
.
filter_primitives
(
)
)
;
self
.
add_backdrop_filter
(
spatial_node_index
clip_chain_id
&
layout
filters
filter_datas
filter_primitives
)
;
}
DisplayItem
:
:
SetGradientStops
|
DisplayItem
:
:
SetFilterOps
|
DisplayItem
:
:
SetFilterData
|
DisplayItem
:
:
SetFilterPrimitives
=
>
{
}
DisplayItem
:
:
PushStackingContext
(
.
.
)
|
DisplayItem
:
:
PushReferenceFrame
(
.
.
)
|
DisplayItem
:
:
PopReferenceFrame
|
DisplayItem
:
:
PopStackingContext
|
DisplayItem
:
:
Iframe
(
_
)
=
>
{
unreachable
!
(
"
Handled
in
build_all
"
)
}
DisplayItem
:
:
ReuseItems
(
key
)
|
DisplayItem
:
:
RetainedItems
(
key
)
=
>
{
unreachable
!
(
"
Iterator
logic
error
:
{
:
?
}
"
key
)
;
}
DisplayItem
:
:
PushShadow
(
info
)
=
>
{
profile_scope
!
(
"
push_shadow
"
)
;
let
spatial_node_index
=
self
.
get_space
(
info
.
space_and_clip
.
spatial_id
)
;
let
clip_chain_id
=
self
.
get_clip_chain
(
info
.
space_and_clip
.
clip_id
)
;
self
.
push_shadow
(
info
.
shadow
spatial_node_index
clip_chain_id
info
.
should_inflate
)
;
}
DisplayItem
:
:
PopAllShadows
=
>
{
profile_scope
!
(
"
pop_all_shadows
"
)
;
self
.
pop_all_shadows
(
)
;
}
}
}
fn
build_clip_chain
(
&
mut
self
clip_items
:
Vec
<
ClipItemKey
>
spatial_node_index
:
SpatialNodeIndex
parent_clip_chain_id
:
ClipChainId
)
-
>
ClipChainId
{
if
clip_items
.
is_empty
(
)
{
parent_clip_chain_id
}
else
{
let
mut
clip_chain_id
=
parent_clip_chain_id
;
for
item
in
clip_items
{
let
handle
=
self
.
interners
.
clip
.
intern
(
&
item
|
|
{
ClipInternData
{
clip_node_kind
:
item
.
kind
.
node_kind
(
)
}
}
)
;
clip_chain_id
=
self
.
clip_store
.
add_clip_chain_node
(
handle
spatial_node_index
clip_chain_id
)
;
}
clip_chain_id
}
}
fn
create_primitive
<
P
>
(
&
mut
self
info
:
&
LayoutPrimitiveInfo
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
prim
:
P
)
-
>
PrimitiveInstance
where
P
:
InternablePrimitive
Interners
:
AsMut
<
Interner
<
P
>
>
{
let
prim_key
=
prim
.
into_key
(
info
)
;
let
current_offset
=
self
.
current_offset
(
spatial_node_index
)
;
let
interner
=
self
.
interners
.
as_mut
(
)
;
let
prim_data_handle
=
interner
.
intern
(
&
prim_key
|
|
(
)
)
;
let
instance_kind
=
P
:
:
make_instance_kind
(
prim_key
prim_data_handle
&
mut
self
.
prim_store
current_offset
)
;
PrimitiveInstance
:
:
new
(
info
.
clip_rect
instance_kind
clip_chain_id
)
}
pub
fn
add_primitive_to_hit_testing_list
(
&
mut
self
info
:
&
LayoutPrimitiveInfo
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
tag
:
ItemTag
)
{
let
start
=
self
.
hit_testing_scene
.
next_clip_chain_index
(
)
;
self
.
hit_testing_scene
.
add_clip_chain
(
clip_chain_id
)
;
for
sc
in
&
self
.
sc_stack
{
self
.
hit_testing_scene
.
add_clip_chain
(
sc
.
clip_chain_id
)
;
}
let
clip_chain_range
=
ops
:
:
Range
{
start
end
:
self
.
hit_testing_scene
.
next_clip_chain_index
(
)
}
;
let
new_item
=
HitTestingItem
:
:
new
(
tag
info
spatial_node_index
clip_chain_range
)
;
self
.
hit_testing_scene
.
add_item
(
new_item
)
;
}
pub
fn
add_primitive_to_draw_list
(
&
mut
self
prim_instance
:
PrimitiveInstance
prim_rect
:
LayoutRect
spatial_node_index
:
SpatialNodeIndex
flags
:
PrimitiveFlags
)
{
if
prim_instance
.
is_chased
(
)
{
println
!
(
"
\
tadded
to
stacking
context
at
{
}
"
self
.
sc_stack
.
len
(
)
)
;
}
match
self
.
sc_stack
.
last_mut
(
)
{
Some
(
stacking_context
)
=
>
{
stacking_context
.
prim_list
.
add_prim
(
prim_instance
prim_rect
spatial_node_index
flags
)
;
}
None
=
>
{
self
.
tile_cache_builder
.
add_prim
(
prim_instance
prim_rect
spatial_node_index
flags
&
self
.
spatial_tree
&
self
.
clip_store
self
.
interners
&
self
.
config
&
self
.
quality_settings
)
;
}
}
}
fn
add_nonshadowable_primitive
<
P
>
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
info
:
&
LayoutPrimitiveInfo
clip_items
:
Vec
<
ClipItemKey
>
prim
:
P
)
where
P
:
InternablePrimitive
+
IsVisible
Interners
:
AsMut
<
Interner
<
P
>
>
{
if
prim
.
is_visible
(
)
{
let
clip_chain_id
=
self
.
build_clip_chain
(
clip_items
spatial_node_index
clip_chain_id
)
;
self
.
add_prim_to_draw_list
(
info
spatial_node_index
clip_chain_id
prim
)
;
}
}
pub
fn
add_primitive
<
P
>
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
info
:
&
LayoutPrimitiveInfo
clip_items
:
Vec
<
ClipItemKey
>
prim
:
P
)
where
P
:
InternablePrimitive
+
IsVisible
Interners
:
AsMut
<
Interner
<
P
>
>
ShadowItem
:
From
<
PendingPrimitive
<
P
>
>
{
if
self
.
pending_shadow_items
.
is_empty
(
)
{
self
.
add_nonshadowable_primitive
(
spatial_node_index
clip_chain_id
info
clip_items
prim
)
;
}
else
{
debug_assert
!
(
clip_items
.
is_empty
(
)
"
No
per
-
prim
clips
expected
for
shadowed
primitives
"
)
;
self
.
pending_shadow_items
.
push_back
(
PendingPrimitive
{
spatial_node_index
clip_chain_id
info
:
*
info
prim
}
.
into
(
)
)
;
}
}
fn
add_prim_to_draw_list
<
P
>
(
&
mut
self
info
:
&
LayoutPrimitiveInfo
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
prim
:
P
)
where
P
:
InternablePrimitive
Interners
:
AsMut
<
Interner
<
P
>
>
{
let
prim_instance
=
self
.
create_primitive
(
info
spatial_node_index
clip_chain_id
prim
)
;
self
.
register_chase_primitive_by_rect
(
&
info
.
rect
&
prim_instance
)
;
self
.
add_primitive_to_draw_list
(
prim_instance
info
.
rect
spatial_node_index
info
.
flags
)
;
}
fn
push_stacking_context
(
&
mut
self
composite_ops
:
CompositeOps
transform_style
:
TransformStyle
prim_flags
:
PrimitiveFlags
spatial_node_index
:
SpatialNodeIndex
clip_id
:
Option
<
ClipId
>
requested_raster_space
:
RasterSpace
flags
:
StackingContextFlags
)
-
>
StackingContextInfo
{
profile_scope
!
(
"
push_stacking_context
"
)
;
let
clip_chain_id
=
match
clip_id
{
Some
(
clip_id
)
=
>
self
.
clip_store
.
get_or_build_clip_chain_id
(
clip_id
)
None
=
>
ClipChainId
:
:
NONE
}
;
let
(
parent_is_3d
extra_3d_instance
)
=
match
self
.
sc_stack
.
last_mut
(
)
{
Some
(
ref
mut
sc
)
if
sc
.
is_3d
(
)
=
>
{
let
flat_items_context_3d
=
match
sc
.
context_3d
{
Picture3DContext
:
:
In
{
ancestor_index
.
.
}
=
>
Picture3DContext
:
:
In
{
root_data
:
None
ancestor_index
}
Picture3DContext
:
:
Out
=
>
panic
!
(
"
Unexpected
out
of
3D
context
"
)
}
;
let
extra_instance
=
sc
.
cut_item_sequence
(
&
mut
self
.
prim_store
&
mut
self
.
interners
Some
(
PictureCompositeMode
:
:
Blit
(
BlitReason
:
:
PRESERVE3D
)
)
flat_items_context_3d
)
;
let
extra_instance
=
extra_instance
.
map
(
|
(
_
instance
)
|
{
ExtendedPrimitiveInstance
{
instance
spatial_node_index
:
sc
.
spatial_node_index
flags
:
sc
.
prim_flags
}
}
)
;
(
true
extra_instance
)
}
_
=
>
(
false
None
)
}
;
if
let
Some
(
instance
)
=
extra_3d_instance
{
self
.
add_primitive_instance_to_3d_root
(
instance
)
;
}
let
participating_in_3d_context
=
composite_ops
.
is_empty
(
)
&
&
(
parent_is_3d
|
|
transform_style
=
=
TransformStyle
:
:
Preserve3D
)
;
let
context_3d
=
if
participating_in_3d_context
{
let
ancestor_index
=
self
.
containing_block_stack
.
last
(
)
.
cloned
(
)
.
unwrap_or
(
ROOT_SPATIAL_NODE_INDEX
)
;
Picture3DContext
:
:
In
{
root_data
:
if
parent_is_3d
{
None
}
else
{
Some
(
Vec
:
:
new
(
)
)
}
ancestor_index
}
}
else
{
Picture3DContext
:
:
Out
}
;
let
mut
blit_reason
=
BlitReason
:
:
empty
(
)
;
let
mut
current_clip_chain_id
=
clip_chain_id
;
if
flags
.
contains
(
StackingContextFlags
:
:
IS_BLEND_CONTAINER
)
{
blit_reason
|
=
BlitReason
:
:
ISOLATE
;
}
while
current_clip_chain_id
!
=
ClipChainId
:
:
NONE
{
let
clip_chain_node
=
&
self
.
clip_store
.
clip_chain_nodes
[
current_clip_chain_id
.
0
as
usize
]
;
let
clip_node_data
=
&
self
.
interners
.
clip
[
clip_chain_node
.
handle
]
;
if
let
ClipNodeKind
:
:
Complex
=
clip_node_data
.
clip_node_kind
{
blit_reason
=
BlitReason
:
:
CLIP
;
break
;
}
current_clip_chain_id
=
clip_chain_node
.
parent_clip_chain_id
;
}
let
is_redundant
=
FlattenedStackingContext
:
:
is_redundant
(
flags
&
context_3d
&
composite_ops
prim_flags
blit_reason
requested_raster_space
self
.
sc_stack
.
last
(
)
)
;
let
mut
sc_info
=
StackingContextInfo
{
pop_clip_root
:
false
pop_stacking_context
:
false
pop_containing_block
:
false
}
;
if
!
participating_in_3d_context
{
sc_info
.
pop_containing_block
=
true
;
self
.
containing_block_stack
.
push
(
spatial_node_index
)
;
}
if
let
Some
(
clip_id
)
=
clip_id
{
sc_info
.
pop_clip_root
=
true
;
if
is_redundant
{
self
.
clip_store
.
push_clip_root
(
Some
(
clip_id
)
true
)
;
}
else
{
self
.
clip_store
.
push_clip_root
(
None
false
)
;
}
}
if
!
is_redundant
{
sc_info
.
pop_stacking_context
=
true
;
self
.
sc_stack
.
push
(
FlattenedStackingContext
{
prim_list
:
PrimitiveList
:
:
empty
(
)
prim_flags
requested_raster_space
spatial_node_index
clip_chain_id
composite_ops
blit_reason
transform_style
context_3d
is_redundant
is_backdrop_root
:
flags
.
contains
(
StackingContextFlags
:
:
IS_BACKDROP_ROOT
)
}
)
;
}
sc_info
}
fn
pop_stacking_context
(
&
mut
self
info
:
StackingContextInfo
)
{
profile_scope
!
(
"
pop_stacking_context
"
)
;
if
info
.
pop_containing_block
{
self
.
containing_block_stack
.
pop
(
)
.
unwrap
(
)
;
}
if
info
.
pop_clip_root
{
self
.
clip_store
.
pop_clip_root
(
)
;
}
if
!
info
.
pop_stacking_context
{
return
;
}
let
stacking_context
=
self
.
sc_stack
.
pop
(
)
.
unwrap
(
)
;
let
parent_is_empty
=
match
self
.
sc_stack
.
last
(
)
{
Some
(
parent_sc
)
=
>
{
assert
!
(
!
stacking_context
.
is_redundant
)
;
parent_sc
.
prim_list
.
is_empty
(
)
}
None
=
>
true
}
;
let
(
leaf_context_3d
leaf_composite_mode
)
=
match
stacking_context
.
context_3d
{
Picture3DContext
:
:
In
{
ancestor_index
.
.
}
=
>
(
Picture3DContext
:
:
In
{
root_data
:
None
ancestor_index
}
Some
(
PictureCompositeMode
:
:
Blit
(
BlitReason
:
:
PRESERVE3D
|
stacking_context
.
blit_reason
)
)
)
Picture3DContext
:
:
Out
=
>
(
Picture3DContext
:
:
Out
if
stacking_context
.
blit_reason
.
is_empty
(
)
{
None
}
else
{
Some
(
PictureCompositeMode
:
:
Blit
(
stacking_context
.
blit_reason
)
)
}
)
}
;
let
leaf_pic_index
=
PictureIndex
(
self
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
leaf_composite_mode
.
clone
(
)
leaf_context_3d
true
stacking_context
.
prim_flags
stacking_context
.
requested_raster_space
stacking_context
.
prim_list
stacking_context
.
spatial_node_index
PictureOptions
:
:
default
(
)
)
)
)
;
let
mut
current_pic_index
=
leaf_pic_index
;
let
mut
cur_instance
=
create_prim_instance
(
leaf_pic_index
leaf_composite_mode
.
into
(
)
ClipChainId
:
:
NONE
&
mut
self
.
interners
)
;
if
cur_instance
.
is_chased
(
)
{
println
!
(
"
\
tis
a
leaf
primitive
for
a
stacking
context
"
)
;
}
if
let
Picture3DContext
:
:
In
{
root_data
:
Some
(
mut
prims
)
ancestor_index
}
=
stacking_context
.
context_3d
{
prims
.
push
(
ExtendedPrimitiveInstance
{
instance
:
cur_instance
spatial_node_index
:
stacking_context
.
spatial_node_index
flags
:
stacking_context
.
prim_flags
}
)
;
let
mut
prim_list
=
PrimitiveList
:
:
empty
(
)
;
for
ext_prim
in
prims
.
drain
(
.
.
)
{
prim_list
.
add_prim
(
ext_prim
.
instance
LayoutRect
:
:
zero
(
)
ext_prim
.
spatial_node_index
ext_prim
.
flags
)
;
}
current_pic_index
=
PictureIndex
(
self
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
None
Picture3DContext
:
:
In
{
root_data
:
Some
(
Vec
:
:
new
(
)
)
ancestor_index
}
true
stacking_context
.
prim_flags
stacking_context
.
requested_raster_space
prim_list
stacking_context
.
spatial_node_index
PictureOptions
:
:
default
(
)
)
)
)
;
cur_instance
=
create_prim_instance
(
current_pic_index
PictureCompositeKey
:
:
Identity
ClipChainId
:
:
NONE
&
mut
self
.
interners
)
;
}
let
(
filtered_pic_index
filtered_instance
)
=
self
.
wrap_prim_with_filters
(
cur_instance
current_pic_index
stacking_context
.
composite_ops
.
filters
stacking_context
.
composite_ops
.
filter_primitives
stacking_context
.
composite_ops
.
filter_datas
stacking_context
.
prim_flags
stacking_context
.
requested_raster_space
stacking_context
.
spatial_node_index
true
)
;
let
has_filters
=
current_pic_index
!
=
filtered_pic_index
;
cur_instance
=
filtered_instance
;
if
let
(
Some
(
mix_blend_mode
)
false
)
=
(
stacking_context
.
composite_ops
.
mix_blend_mode
parent_is_empty
)
{
let
parent_is_isolated
=
match
self
.
sc_stack
.
last
(
)
{
Some
(
parent_sc
)
=
>
parent_sc
.
blit_reason
.
contains
(
BlitReason
:
:
ISOLATE
)
None
=
>
false
}
;
if
parent_is_isolated
{
let
composite_mode
=
Some
(
PictureCompositeMode
:
:
MixBlend
(
mix_blend_mode
)
)
;
let
mut
prim_list
=
PrimitiveList
:
:
empty
(
)
;
prim_list
.
add_prim
(
cur_instance
LayoutRect
:
:
zero
(
)
stacking_context
.
spatial_node_index
stacking_context
.
prim_flags
)
;
let
blend_pic_index
=
PictureIndex
(
self
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
composite_mode
.
clone
(
)
Picture3DContext
:
:
Out
true
stacking_context
.
prim_flags
stacking_context
.
requested_raster_space
prim_list
stacking_context
.
spatial_node_index
PictureOptions
:
:
default
(
)
)
)
)
;
cur_instance
=
create_prim_instance
(
blend_pic_index
composite_mode
.
into
(
)
ClipChainId
:
:
NONE
&
mut
self
.
interners
)
;
if
cur_instance
.
is_chased
(
)
{
println
!
(
"
\
tis
a
mix
-
blend
picture
for
a
stacking
context
with
{
:
?
}
"
mix_blend_mode
)
;
}
}
else
{
warn
!
(
"
found
a
mix
-
blend
-
mode
outside
a
blend
container
ignoring
"
)
;
}
}
cur_instance
.
clip_set
.
clip_chain_id
=
stacking_context
.
clip_chain_id
;
let
trailing_children_instance
=
match
self
.
sc_stack
.
last_mut
(
)
{
Some
(
ref
parent_sc
)
if
!
has_filters
&
&
parent_sc
.
is_3d
(
)
=
>
{
Some
(
cur_instance
)
}
Some
(
ref
mut
parent_sc
)
=
>
{
parent_sc
.
prim_list
.
add_prim
(
cur_instance
LayoutRect
:
:
zero
(
)
stacking_context
.
spatial_node_index
stacking_context
.
prim_flags
)
;
None
}
None
=
>
{
self
.
add_primitive_to_draw_list
(
cur_instance
LayoutRect
:
:
zero
(
)
stacking_context
.
spatial_node_index
stacking_context
.
prim_flags
)
;
None
}
}
;
if
let
Some
(
instance
)
=
trailing_children_instance
{
self
.
add_primitive_instance_to_3d_root
(
ExtendedPrimitiveInstance
{
instance
spatial_node_index
:
stacking_context
.
spatial_node_index
flags
:
stacking_context
.
prim_flags
}
)
;
}
assert
!
(
self
.
pending_shadow_items
.
is_empty
(
)
"
Found
unpopped
shadows
when
popping
stacking
context
!
"
)
;
}
pub
fn
push_reference_frame
(
&
mut
self
reference_frame_id
:
SpatialId
parent_index
:
Option
<
SpatialNodeIndex
>
pipeline_id
:
PipelineId
transform_style
:
TransformStyle
source_transform
:
PropertyBinding
<
LayoutTransform
>
kind
:
ReferenceFrameKind
origin_in_parent_reference_frame
:
LayoutVector2D
)
-
>
SpatialNodeIndex
{
let
index
=
self
.
spatial_tree
.
add_reference_frame
(
parent_index
transform_style
source_transform
kind
origin_in_parent_reference_frame
pipeline_id
)
;
self
.
id_to_index_mapper
.
add_spatial_node
(
reference_frame_id
index
)
;
index
}
pub
fn
push_root
(
&
mut
self
pipeline_id
:
PipelineId
viewport_size
:
&
LayoutSize
)
{
if
let
ChasePrimitive
:
:
Id
(
id
)
=
self
.
config
.
chase_primitive
{
println
!
(
"
Chasing
{
:
?
}
by
index
"
id
)
;
register_prim_chase_id
(
id
)
;
}
let
spatial_node_index
=
self
.
push_reference_frame
(
SpatialId
:
:
root_reference_frame
(
pipeline_id
)
None
pipeline_id
TransformStyle
:
:
Flat
PropertyBinding
:
:
Value
(
LayoutTransform
:
:
identity
(
)
)
ReferenceFrameKind
:
:
Transform
LayoutVector2D
:
:
zero
(
)
)
;
let
viewport_rect
=
self
.
snap_rect
(
&
LayoutRect
:
:
new
(
LayoutPoint
:
:
zero
(
)
*
viewport_size
)
spatial_node_index
)
;
self
.
add_scroll_frame
(
SpatialId
:
:
root_scroll_node
(
pipeline_id
)
spatial_node_index
Some
(
ExternalScrollId
(
0
pipeline_id
)
)
pipeline_id
&
viewport_rect
&
viewport_rect
.
size
ScrollSensitivity
:
:
ScriptAndInputEvents
ScrollFrameKind
:
:
PipelineRoot
LayoutVector2D
:
:
zero
(
)
)
;
}
fn
add_image_mask_clip_node
(
&
mut
self
new_node_id
:
ClipId
space_and_clip
:
&
SpaceAndClipInfo
image_mask
:
&
ImageMask
)
{
let
spatial_node_index
=
self
.
id_to_index_mapper
.
get_spatial_node_index
(
space_and_clip
.
spatial_id
)
;
let
snapped_mask_rect
=
self
.
snap_rect
(
&
image_mask
.
rect
spatial_node_index
)
;
let
item
=
ClipItemKey
{
kind
:
ClipItemKeyKind
:
:
image_mask
(
image_mask
snapped_mask_rect
)
}
;
let
handle
=
self
.
interners
.
clip
.
intern
(
&
item
|
|
{
ClipInternData
{
clip_node_kind
:
ClipNodeKind
:
:
Complex
}
}
)
;
let
instance
=
ClipInstance
:
:
new
(
handle
spatial_node_index
)
;
self
.
clip_store
.
register_clip_template
(
new_node_id
space_and_clip
.
clip_id
&
[
instance
]
)
;
}
pub
fn
add_rect_clip_node
(
&
mut
self
new_node_id
:
ClipId
space_and_clip
:
&
SpaceAndClipInfo
clip_rect
:
&
LayoutRect
)
{
let
spatial_node_index
=
self
.
id_to_index_mapper
.
get_spatial_node_index
(
space_and_clip
.
spatial_id
)
;
let
snapped_clip_rect
=
self
.
snap_rect
(
clip_rect
spatial_node_index
)
;
let
item
=
ClipItemKey
{
kind
:
ClipItemKeyKind
:
:
rectangle
(
snapped_clip_rect
ClipMode
:
:
Clip
)
}
;
let
handle
=
self
.
interners
.
clip
.
intern
(
&
item
|
|
{
ClipInternData
{
clip_node_kind
:
ClipNodeKind
:
:
Rectangle
}
}
)
;
let
instance
=
ClipInstance
:
:
new
(
handle
spatial_node_index
)
;
self
.
clip_store
.
register_clip_template
(
new_node_id
space_and_clip
.
clip_id
&
[
instance
]
)
;
}
pub
fn
add_rounded_rect_clip_node
(
&
mut
self
new_node_id
:
ClipId
space_and_clip
:
&
SpaceAndClipInfo
clip
:
&
ComplexClipRegion
current_offset
:
LayoutVector2D
)
{
let
spatial_node_index
=
self
.
id_to_index_mapper
.
get_spatial_node_index
(
space_and_clip
.
spatial_id
)
;
let
snapped_region_rect
=
self
.
snap_rect
(
&
clip
.
rect
.
translate
(
current_offset
)
spatial_node_index
)
;
let
item
=
ClipItemKey
{
kind
:
ClipItemKeyKind
:
:
rounded_rect
(
snapped_region_rect
clip
.
radii
clip
.
mode
)
}
;
let
handle
=
self
.
interners
.
clip
.
intern
(
&
item
|
|
{
ClipInternData
{
clip_node_kind
:
ClipNodeKind
:
:
Complex
}
}
)
;
let
instance
=
ClipInstance
:
:
new
(
handle
spatial_node_index
)
;
self
.
clip_store
.
register_clip_template
(
new_node_id
space_and_clip
.
clip_id
&
[
instance
]
)
;
}
pub
fn
add_clip_node
<
I
>
(
&
mut
self
new_node_id
:
ClipId
space_and_clip
:
&
SpaceAndClipInfo
clip_region
:
ClipRegion
<
I
>
)
where
I
:
IntoIterator
<
Item
=
ComplexClipRegion
>
{
let
spatial_node_index
=
self
.
id_to_index_mapper
.
get_spatial_node_index
(
space_and_clip
.
spatial_id
)
;
let
snapped_clip_rect
=
self
.
snap_rect
(
&
clip_region
.
main
spatial_node_index
)
;
let
mut
instances
:
SmallVec
<
[
ClipInstance
;
4
]
>
=
SmallVec
:
:
new
(
)
;
let
item
=
ClipItemKey
{
kind
:
ClipItemKeyKind
:
:
rectangle
(
snapped_clip_rect
ClipMode
:
:
Clip
)
}
;
let
handle
=
self
.
interners
.
clip
.
intern
(
&
item
|
|
{
ClipInternData
{
clip_node_kind
:
ClipNodeKind
:
:
Rectangle
}
}
)
;
instances
.
push
(
ClipInstance
:
:
new
(
handle
spatial_node_index
)
)
;
for
region
in
clip_region
.
complex_clips
{
let
snapped_region_rect
=
self
.
snap_rect
(
&
region
.
rect
spatial_node_index
)
;
let
item
=
ClipItemKey
{
kind
:
ClipItemKeyKind
:
:
rounded_rect
(
snapped_region_rect
region
.
radii
region
.
mode
)
}
;
let
handle
=
self
.
interners
.
clip
.
intern
(
&
item
|
|
{
ClipInternData
{
clip_node_kind
:
ClipNodeKind
:
:
Complex
}
}
)
;
instances
.
push
(
ClipInstance
:
:
new
(
handle
spatial_node_index
)
)
;
}
self
.
clip_store
.
register_clip_template
(
new_node_id
space_and_clip
.
clip_id
&
instances
)
;
}
pub
fn
add_scroll_frame
(
&
mut
self
new_node_id
:
SpatialId
parent_node_index
:
SpatialNodeIndex
external_id
:
Option
<
ExternalScrollId
>
pipeline_id
:
PipelineId
frame_rect
:
&
LayoutRect
content_size
:
&
LayoutSize
scroll_sensitivity
:
ScrollSensitivity
frame_kind
:
ScrollFrameKind
external_scroll_offset
:
LayoutVector2D
)
-
>
SpatialNodeIndex
{
let
node_index
=
self
.
spatial_tree
.
add_scroll_frame
(
parent_node_index
external_id
pipeline_id
frame_rect
content_size
scroll_sensitivity
frame_kind
external_scroll_offset
)
;
self
.
id_to_index_mapper
.
add_spatial_node
(
new_node_id
node_index
)
;
node_index
}
pub
fn
push_shadow
(
&
mut
self
shadow
:
Shadow
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
should_inflate
:
bool
)
{
self
.
pending_shadow_items
.
push_back
(
ShadowItem
:
:
Shadow
(
PendingShadow
{
shadow
spatial_node_index
clip_chain_id
should_inflate
}
)
)
;
}
pub
fn
pop_all_shadows
(
&
mut
self
)
{
assert
!
(
!
self
.
pending_shadow_items
.
is_empty
(
)
"
popped
shadows
but
none
were
present
"
)
;
let
mut
items
=
mem
:
:
replace
(
&
mut
self
.
pending_shadow_items
VecDeque
:
:
new
(
)
)
;
while
let
Some
(
item
)
=
items
.
pop_front
(
)
{
match
item
{
ShadowItem
:
:
Shadow
(
pending_shadow
)
=
>
{
let
std_deviation
=
pending_shadow
.
shadow
.
blur_radius
*
0
.
5
;
let
is_passthrough
=
pending_shadow
.
shadow
.
blur_radius
=
=
0
.
0
;
let
raster_space
=
if
is_passthrough
{
self
.
sc_stack
.
last
(
)
.
map_or
(
RasterSpace
:
:
Screen
|
sc
|
sc
.
requested_raster_space
)
}
else
{
RasterSpace
:
:
Local
(
1
.
0
)
}
;
let
mut
prim_list
=
PrimitiveList
:
:
empty
(
)
;
for
item
in
&
items
{
match
item
{
ShadowItem
:
:
Image
(
ref
pending_image
)
=
>
{
self
.
add_shadow_prim
(
&
pending_shadow
pending_image
&
mut
prim_list
)
}
ShadowItem
:
:
LineDecoration
(
ref
pending_line_dec
)
=
>
{
self
.
add_shadow_prim
(
&
pending_shadow
pending_line_dec
&
mut
prim_list
)
}
ShadowItem
:
:
NormalBorder
(
ref
pending_border
)
=
>
{
self
.
add_shadow_prim
(
&
pending_shadow
pending_border
&
mut
prim_list
)
}
ShadowItem
:
:
Primitive
(
ref
pending_primitive
)
=
>
{
self
.
add_shadow_prim
(
&
pending_shadow
pending_primitive
&
mut
prim_list
)
}
ShadowItem
:
:
TextRun
(
ref
pending_text_run
)
=
>
{
self
.
add_shadow_prim
(
&
pending_shadow
pending_text_run
&
mut
prim_list
)
}
_
=
>
{
}
}
}
if
!
prim_list
.
is_empty
(
)
{
let
blur_filter
=
Filter
:
:
Blur
(
std_deviation
std_deviation
)
;
let
composite_mode
=
if
blur_filter
.
is_noop
(
)
{
None
}
else
{
Some
(
PictureCompositeMode
:
:
Filter
(
blur_filter
)
)
}
;
let
composite_mode_key
=
composite_mode
.
clone
(
)
.
into
(
)
;
let
options
=
PictureOptions
{
inflate_if_required
:
pending_shadow
.
should_inflate
}
;
let
shadow_pic_index
=
PictureIndex
(
self
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
composite_mode
Picture3DContext
:
:
Out
is_passthrough
PrimitiveFlags
:
:
IS_BACKFACE_VISIBLE
raster_space
prim_list
pending_shadow
.
spatial_node_index
options
)
)
)
;
let
shadow_pic_key
=
PictureKey
:
:
new
(
Picture
{
composite_mode_key
}
)
;
let
shadow_prim_data_handle
=
self
.
interners
.
picture
.
intern
(
&
shadow_pic_key
|
|
(
)
)
;
let
shadow_prim_instance
=
PrimitiveInstance
:
:
new
(
LayoutRect
:
:
max_rect
(
)
PrimitiveInstanceKind
:
:
Picture
{
data_handle
:
shadow_prim_data_handle
pic_index
:
shadow_pic_index
segment_instance_index
:
SegmentInstanceIndex
:
:
INVALID
}
pending_shadow
.
clip_chain_id
)
;
self
.
add_primitive_to_draw_list
(
shadow_prim_instance
LayoutRect
:
:
zero
(
)
pending_shadow
.
spatial_node_index
PrimitiveFlags
:
:
IS_BACKFACE_VISIBLE
)
;
}
}
ShadowItem
:
:
Image
(
pending_image
)
=
>
{
self
.
add_shadow_prim_to_draw_list
(
pending_image
)
}
ShadowItem
:
:
LineDecoration
(
pending_line_dec
)
=
>
{
self
.
add_shadow_prim_to_draw_list
(
pending_line_dec
)
}
ShadowItem
:
:
NormalBorder
(
pending_border
)
=
>
{
self
.
add_shadow_prim_to_draw_list
(
pending_border
)
}
ShadowItem
:
:
Primitive
(
pending_primitive
)
=
>
{
self
.
add_shadow_prim_to_draw_list
(
pending_primitive
)
}
ShadowItem
:
:
TextRun
(
pending_text_run
)
=
>
{
self
.
add_shadow_prim_to_draw_list
(
pending_text_run
)
}
}
}
debug_assert
!
(
items
.
is_empty
(
)
)
;
self
.
pending_shadow_items
=
items
;
}
fn
add_shadow_prim
<
P
>
(
&
mut
self
pending_shadow
:
&
PendingShadow
pending_primitive
:
&
PendingPrimitive
<
P
>
prim_list
:
&
mut
PrimitiveList
)
where
P
:
InternablePrimitive
+
CreateShadow
Interners
:
AsMut
<
Interner
<
P
>
>
{
let
mut
info
=
pending_primitive
.
info
.
clone
(
)
;
info
.
rect
=
self
.
snap_rect
(
&
info
.
rect
.
translate
(
pending_shadow
.
shadow
.
offset
)
pending_primitive
.
spatial_node_index
)
;
info
.
clip_rect
=
self
.
snap_rect
(
&
info
.
clip_rect
.
translate
(
pending_shadow
.
shadow
.
offset
)
pending_primitive
.
spatial_node_index
)
;
let
shadow_prim_instance
=
self
.
create_primitive
(
&
info
pending_primitive
.
spatial_node_index
pending_primitive
.
clip_chain_id
pending_primitive
.
prim
.
create_shadow
(
&
pending_shadow
.
shadow
)
)
;
prim_list
.
add_prim
(
shadow_prim_instance
info
.
rect
pending_primitive
.
spatial_node_index
info
.
flags
)
;
}
fn
add_shadow_prim_to_draw_list
<
P
>
(
&
mut
self
pending_primitive
:
PendingPrimitive
<
P
>
)
where
P
:
InternablePrimitive
+
IsVisible
Interners
:
AsMut
<
Interner
<
P
>
>
{
if
pending_primitive
.
prim
.
is_visible
(
)
{
self
.
add_prim_to_draw_list
(
&
pending_primitive
.
info
pending_primitive
.
spatial_node_index
pending_primitive
.
clip_chain_id
pending_primitive
.
prim
)
;
}
}
#
[
cfg
(
debug_assertions
)
]
fn
register_chase_primitive_by_rect
(
&
mut
self
rect
:
&
LayoutRect
prim_instance
:
&
PrimitiveInstance
)
{
if
ChasePrimitive
:
:
LocalRect
(
*
rect
)
=
=
self
.
config
.
chase_primitive
{
println
!
(
"
Chasing
{
:
?
}
by
local
rect
"
prim_instance
.
id
)
;
register_prim_chase_id
(
prim_instance
.
id
)
;
}
}
#
[
cfg
(
not
(
debug_assertions
)
)
]
fn
register_chase_primitive_by_rect
(
&
mut
self
_rect
:
&
LayoutRect
_prim_instance
:
&
PrimitiveInstance
)
{
}
pub
fn
add_clear_rectangle
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
info
:
&
LayoutPrimitiveInfo
)
{
self
.
add_primitive
(
spatial_node_index
clip_chain_id
info
Vec
:
:
new
(
)
PrimitiveKeyKind
:
:
Clear
)
;
}
pub
fn
add_line
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
info
:
&
LayoutPrimitiveInfo
wavy_line_thickness
:
f32
orientation
:
LineOrientation
color
:
ColorF
style
:
LineStyle
)
{
let
mut
info
=
info
.
clone
(
)
;
let
size
=
get_line_decoration_size
(
&
info
.
rect
.
size
orientation
style
wavy_line_thickness
)
;
let
cache_key
=
size
.
map
(
|
size
|
{
if
style
=
=
LineStyle
:
:
Dotted
{
let
clip_size
=
match
orientation
{
LineOrientation
:
:
Horizontal
=
>
{
LayoutSize
:
:
new
(
size
.
width
*
(
info
.
rect
.
size
.
width
/
size
.
width
)
.
floor
(
)
info
.
rect
.
size
.
height
)
}
LineOrientation
:
:
Vertical
=
>
{
LayoutSize
:
:
new
(
info
.
rect
.
size
.
width
size
.
height
*
(
info
.
rect
.
size
.
height
/
size
.
height
)
.
floor
(
)
)
}
}
;
let
clip_rect
=
LayoutRect
:
:
new
(
info
.
rect
.
origin
clip_size
)
;
info
.
clip_rect
=
clip_rect
.
intersection
(
&
info
.
clip_rect
)
.
unwrap_or_else
(
LayoutRect
:
:
zero
)
;
}
LineDecorationCacheKey
{
style
orientation
wavy_line_thickness
:
Au
:
:
from_f32_px
(
wavy_line_thickness
)
size
:
size
.
to_au
(
)
}
}
)
;
self
.
add_primitive
(
spatial_node_index
clip_chain_id
&
info
Vec
:
:
new
(
)
LineDecoration
{
cache_key
color
:
color
.
into
(
)
}
)
;
}
pub
fn
add_border
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
info
:
&
LayoutPrimitiveInfo
border_item
:
&
BorderDisplayItem
gradient_stops
:
ItemRange
<
GradientStop
>
)
{
match
border_item
.
details
{
BorderDetails
:
:
NinePatch
(
ref
border
)
=
>
{
let
nine_patch
=
NinePatchDescriptor
{
width
:
border
.
width
height
:
border
.
height
slice
:
border
.
slice
fill
:
border
.
fill
repeat_horizontal
:
border
.
repeat_horizontal
repeat_vertical
:
border
.
repeat_vertical
outset
:
border
.
outset
.
into
(
)
widths
:
border_item
.
widths
.
into
(
)
}
;
match
border
.
source
{
NinePatchBorderSource
:
:
Image
(
image_key
)
=
>
{
let
prim
=
ImageBorder
{
request
:
ImageRequest
{
key
:
image_key
rendering
:
ImageRendering
:
:
Auto
tile
:
None
}
nine_patch
}
;
self
.
add_nonshadowable_primitive
(
spatial_node_index
clip_chain_id
info
Vec
:
:
new
(
)
prim
)
;
}
NinePatchBorderSource
:
:
Gradient
(
gradient
)
=
>
{
let
prim
=
match
self
.
create_linear_gradient_prim
(
&
info
gradient
.
start_point
gradient
.
end_point
gradient_stops
gradient
.
extend_mode
LayoutSize
:
:
new
(
border
.
height
as
f32
border
.
width
as
f32
)
LayoutSize
:
:
zero
(
)
Some
(
Box
:
:
new
(
nine_patch
)
)
)
{
Some
(
prim
)
=
>
prim
None
=
>
return
}
;
self
.
add_nonshadowable_primitive
(
spatial_node_index
clip_chain_id
info
Vec
:
:
new
(
)
prim
)
;
}
NinePatchBorderSource
:
:
RadialGradient
(
gradient
)
=
>
{
let
prim
=
self
.
create_radial_gradient_prim
(
&
info
gradient
.
center
gradient
.
start_offset
*
gradient
.
radius
.
width
gradient
.
end_offset
*
gradient
.
radius
.
width
gradient
.
radius
.
width
/
gradient
.
radius
.
height
gradient_stops
gradient
.
extend_mode
LayoutSize
:
:
new
(
border
.
height
as
f32
border
.
width
as
f32
)
LayoutSize
:
:
zero
(
)
Some
(
Box
:
:
new
(
nine_patch
)
)
)
;
self
.
add_nonshadowable_primitive
(
spatial_node_index
clip_chain_id
info
Vec
:
:
new
(
)
prim
)
;
}
NinePatchBorderSource
:
:
ConicGradient
(
gradient
)
=
>
{
let
prim
=
self
.
create_conic_gradient_prim
(
&
info
gradient
.
center
gradient
.
angle
gradient
.
start_offset
gradient
.
end_offset
gradient_stops
gradient
.
extend_mode
LayoutSize
:
:
new
(
border
.
height
as
f32
border
.
width
as
f32
)
LayoutSize
:
:
zero
(
)
Some
(
Box
:
:
new
(
nine_patch
)
)
)
;
self
.
add_nonshadowable_primitive
(
spatial_node_index
clip_chain_id
info
Vec
:
:
new
(
)
prim
)
;
}
}
;
}
BorderDetails
:
:
Normal
(
ref
border
)
=
>
{
self
.
add_normal_border
(
info
border
border_item
.
widths
spatial_node_index
clip_chain_id
)
;
}
}
}
pub
fn
create_linear_gradient_prim
(
&
mut
self
info
:
&
LayoutPrimitiveInfo
start_point
:
LayoutPoint
end_point
:
LayoutPoint
stops
:
ItemRange
<
GradientStop
>
extend_mode
:
ExtendMode
stretch_size
:
LayoutSize
mut
tile_spacing
:
LayoutSize
nine_patch
:
Option
<
Box
<
NinePatchDescriptor
>
>
)
-
>
Option
<
LinearGradient
>
{
let
mut
prim_rect
=
info
.
rect
;
simplify_repeated_primitive
(
&
stretch_size
&
mut
tile_spacing
&
mut
prim_rect
)
;
let
mut
max_alpha
:
f32
=
0
.
0
;
let
stops
=
stops
.
iter
(
)
.
map
(
|
stop
|
{
max_alpha
=
max_alpha
.
max
(
stop
.
color
.
a
)
;
GradientStopKey
{
offset
:
stop
.
offset
color
:
stop
.
color
.
into
(
)
}
}
)
.
collect
(
)
;
if
max_alpha
<
=
0
.
0
{
return
None
;
}
let
reverse_stops
=
start_point
.
x
>
end_point
.
x
|
|
(
start_point
.
x
=
=
end_point
.
x
&
&
start_point
.
y
>
end_point
.
y
)
;
let
(
sp
ep
)
=
if
reverse_stops
{
(
end_point
start_point
)
}
else
{
(
start_point
end_point
)
}
;
Some
(
LinearGradient
{
extend_mode
start_point
:
sp
.
into
(
)
end_point
:
ep
.
into
(
)
stretch_size
:
stretch_size
.
into
(
)
tile_spacing
:
tile_spacing
.
into
(
)
stops
reverse_stops
nine_patch
}
)
}
pub
fn
create_radial_gradient_prim
(
&
mut
self
info
:
&
LayoutPrimitiveInfo
center
:
LayoutPoint
start_radius
:
f32
end_radius
:
f32
ratio_xy
:
f32
stops
:
ItemRange
<
GradientStop
>
extend_mode
:
ExtendMode
stretch_size
:
LayoutSize
mut
tile_spacing
:
LayoutSize
nine_patch
:
Option
<
Box
<
NinePatchDescriptor
>
>
)
-
>
RadialGradient
{
let
mut
prim_rect
=
info
.
rect
;
simplify_repeated_primitive
(
&
stretch_size
&
mut
tile_spacing
&
mut
prim_rect
)
;
let
params
=
RadialGradientParams
{
start_radius
end_radius
ratio_xy
}
;
let
stops
=
stops
.
iter
(
)
.
map
(
|
stop
|
{
GradientStopKey
{
offset
:
stop
.
offset
color
:
stop
.
color
.
into
(
)
}
}
)
.
collect
(
)
;
RadialGradient
{
extend_mode
center
:
center
.
into
(
)
params
stretch_size
:
stretch_size
.
into
(
)
tile_spacing
:
tile_spacing
.
into
(
)
nine_patch
stops
}
}
pub
fn
create_conic_gradient_prim
(
&
mut
self
info
:
&
LayoutPrimitiveInfo
center
:
LayoutPoint
angle
:
f32
start_offset
:
f32
end_offset
:
f32
stops
:
ItemRange
<
GradientStop
>
extend_mode
:
ExtendMode
stretch_size
:
LayoutSize
mut
tile_spacing
:
LayoutSize
nine_patch
:
Option
<
Box
<
NinePatchDescriptor
>
>
)
-
>
ConicGradient
{
let
mut
prim_rect
=
info
.
rect
;
simplify_repeated_primitive
(
&
stretch_size
&
mut
tile_spacing
&
mut
prim_rect
)
;
let
stops
=
stops
.
iter
(
)
.
map
(
|
stop
|
{
GradientStopKey
{
offset
:
stop
.
offset
color
:
stop
.
color
.
into
(
)
}
}
)
.
collect
(
)
;
ConicGradient
{
extend_mode
center
:
center
.
into
(
)
params
:
ConicGradientParams
{
angle
start_offset
end_offset
}
stretch_size
:
stretch_size
.
into
(
)
tile_spacing
:
tile_spacing
.
into
(
)
nine_patch
stops
}
}
pub
fn
add_text
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
prim_info
:
&
LayoutPrimitiveInfo
font_instance_key
:
&
FontInstanceKey
text_color
:
&
ColorF
glyph_range
:
ItemRange
<
GlyphInstance
>
glyph_options
:
Option
<
GlyphOptions
>
)
{
let
offset
=
self
.
current_offset
(
spatial_node_index
)
;
let
text_run
=
{
let
instance_map
=
self
.
font_instances
.
lock
(
)
.
unwrap
(
)
;
let
font_instance
=
match
instance_map
.
get
(
font_instance_key
)
{
Some
(
instance
)
=
>
instance
None
=
>
{
warn
!
(
"
Unknown
font
instance
key
"
)
;
debug
!
(
"
key
=
{
:
?
}
"
font_instance_key
)
;
return
;
}
}
;
if
font_instance
.
size
<
=
FontSize
:
:
zero
(
)
{
return
;
}
let
mut
render_mode
=
self
.
config
.
default_font_render_mode
.
limit_by
(
font_instance
.
render_mode
)
;
let
mut
flags
=
font_instance
.
flags
;
if
let
Some
(
options
)
=
glyph_options
{
render_mode
=
render_mode
.
limit_by
(
options
.
render_mode
)
;
flags
|
=
options
.
flags
;
}
let
font
=
FontInstance
:
:
new
(
Arc
:
:
clone
(
font_instance
)
(
*
text_color
)
.
into
(
)
render_mode
flags
)
;
let
prim_offset
=
prim_info
.
rect
.
origin
.
to_vector
(
)
-
offset
;
let
glyphs
=
glyph_range
.
iter
(
)
.
map
(
|
glyph
|
{
GlyphInstance
{
index
:
glyph
.
index
point
:
glyph
.
point
-
prim_offset
}
}
)
.
collect
(
)
;
TextRun
{
glyphs
:
Arc
:
:
new
(
glyphs
)
font
shadow
:
false
}
}
;
self
.
add_primitive
(
spatial_node_index
clip_chain_id
prim_info
Vec
:
:
new
(
)
text_run
)
;
}
pub
fn
add_image
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
info
:
&
LayoutPrimitiveInfo
stretch_size
:
LayoutSize
mut
tile_spacing
:
LayoutSize
image_key
:
ImageKey
image_rendering
:
ImageRendering
alpha_type
:
AlphaType
color
:
ColorF
)
{
let
mut
prim_rect
=
info
.
rect
;
simplify_repeated_primitive
(
&
stretch_size
&
mut
tile_spacing
&
mut
prim_rect
)
;
let
info
=
LayoutPrimitiveInfo
{
rect
:
prim_rect
.
.
*
info
}
;
self
.
add_primitive
(
spatial_node_index
clip_chain_id
&
info
Vec
:
:
new
(
)
Image
{
key
:
image_key
tile_spacing
:
tile_spacing
.
into
(
)
stretch_size
:
stretch_size
.
into
(
)
color
:
color
.
into
(
)
image_rendering
alpha_type
}
)
;
}
pub
fn
add_yuv_image
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
info
:
&
LayoutPrimitiveInfo
yuv_data
:
YuvData
color_depth
:
ColorDepth
color_space
:
YuvColorSpace
color_range
:
ColorRange
image_rendering
:
ImageRendering
)
{
let
format
=
yuv_data
.
get_format
(
)
;
let
yuv_key
=
match
yuv_data
{
YuvData
:
:
NV12
(
plane_0
plane_1
)
=
>
[
plane_0
plane_1
ImageKey
:
:
DUMMY
]
YuvData
:
:
PlanarYCbCr
(
plane_0
plane_1
plane_2
)
=
>
[
plane_0
plane_1
plane_2
]
YuvData
:
:
InterleavedYCbCr
(
plane_0
)
=
>
[
plane_0
ImageKey
:
:
DUMMY
ImageKey
:
:
DUMMY
]
}
;
self
.
add_nonshadowable_primitive
(
spatial_node_index
clip_chain_id
info
Vec
:
:
new
(
)
YuvImage
{
color_depth
yuv_key
format
color_space
color_range
image_rendering
}
)
;
}
fn
add_primitive_instance_to_3d_root
(
&
mut
self
prim
:
ExtendedPrimitiveInstance
)
{
for
sc
in
self
.
sc_stack
.
iter_mut
(
)
.
rev
(
)
{
match
sc
.
context_3d
{
Picture3DContext
:
:
In
{
root_data
:
Some
(
ref
mut
prims
)
.
.
}
=
>
{
prims
.
push
(
prim
)
;
break
;
}
Picture3DContext
:
:
In
{
.
.
}
=
>
{
}
Picture3DContext
:
:
Out
=
>
panic
!
(
"
Unable
to
find
3D
root
"
)
}
}
}
pub
fn
add_backdrop_filter
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
info
:
&
LayoutPrimitiveInfo
filters
:
Vec
<
Filter
>
filter_datas
:
Vec
<
FilterData
>
filter_primitives
:
Vec
<
FilterPrimitive
>
)
{
let
mut
backdrop_pic_index
=
match
self
.
cut_backdrop_picture
(
)
{
None
=
>
return
Some
(
backdrop_pic_index
)
=
>
backdrop_pic_index
}
;
let
backdrop_spatial_node_index
=
self
.
prim_store
.
pictures
[
backdrop_pic_index
.
0
]
.
spatial_node_index
;
let
requested_raster_space
=
self
.
sc_stack
.
last
(
)
.
expect
(
"
no
active
stacking
context
"
)
.
requested_raster_space
;
let
mut
instance
=
self
.
create_primitive
(
info
backdrop_spatial_node_index
clip_chain_id
Backdrop
{
pic_index
:
backdrop_pic_index
spatial_node_index
border_rect
:
info
.
rect
.
into
(
)
}
)
;
for
stacking_context
in
self
.
sc_stack
.
iter
(
)
.
rev
(
)
.
take_while
(
|
sc
|
!
sc
.
is_backdrop_root
)
{
let
clip_chain_id
=
stacking_context
.
clip_chain_id
;
let
prim_flags
=
stacking_context
.
prim_flags
;
let
composite_mode
=
None
;
let
mut
prim_list
=
PrimitiveList
:
:
empty
(
)
;
prim_list
.
add_prim
(
instance
LayoutRect
:
:
zero
(
)
backdrop_spatial_node_index
prim_flags
)
;
backdrop_pic_index
=
PictureIndex
(
self
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
composite_mode
.
clone
(
)
Picture3DContext
:
:
Out
true
prim_flags
requested_raster_space
prim_list
backdrop_spatial_node_index
PictureOptions
{
inflate_if_required
:
false
}
)
)
)
;
instance
=
create_prim_instance
(
backdrop_pic_index
composite_mode
.
into
(
)
clip_chain_id
&
mut
self
.
interners
)
;
}
let
(
mut
filtered_pic_index
mut
filtered_instance
)
=
self
.
wrap_prim_with_filters
(
instance
backdrop_pic_index
filters
filter_primitives
filter_datas
info
.
flags
requested_raster_space
backdrop_spatial_node_index
false
)
;
let
backdrop_root_pos
=
self
.
sc_stack
.
iter
(
)
.
rposition
(
|
sc
|
sc
.
is_backdrop_root
)
.
expect
(
"
no
backdrop
root
?
"
)
;
for
i
in
(
(
backdrop_root_pos
+
1
)
.
.
self
.
sc_stack
.
len
(
)
)
.
rev
(
)
{
let
stacking_context
=
&
self
.
sc_stack
[
i
]
;
let
filters
=
stacking_context
.
composite_ops
.
filters
.
clone
(
)
;
let
filter_primitives
=
stacking_context
.
composite_ops
.
filter_primitives
.
clone
(
)
;
let
filter_datas
=
stacking_context
.
composite_ops
.
filter_datas
.
clone
(
)
;
let
(
pic_index
instance
)
=
self
.
wrap_prim_with_filters
(
filtered_instance
filtered_pic_index
filters
filter_primitives
filter_datas
info
.
flags
requested_raster_space
backdrop_spatial_node_index
false
)
;
filtered_instance
=
instance
;
filtered_pic_index
=
pic_index
;
}
filtered_instance
.
clip_set
.
clip_chain_id
=
clip_chain_id
;
self
.
sc_stack
.
iter_mut
(
)
.
rev
(
)
.
find
(
|
sc
|
sc
.
is_backdrop_root
)
.
unwrap
(
)
.
prim_list
.
add_prim
(
filtered_instance
LayoutRect
:
:
zero
(
)
backdrop_spatial_node_index
info
.
flags
)
;
}
pub
fn
cut_backdrop_picture
(
&
mut
self
)
-
>
Option
<
PictureIndex
>
{
let
mut
flattened_items
=
None
;
let
mut
backdrop_root
=
None
;
let
mut
spatial_node_index
=
SpatialNodeIndex
:
:
INVALID
;
let
mut
prim_flags
=
PrimitiveFlags
:
:
default
(
)
;
for
sc
in
self
.
sc_stack
.
iter_mut
(
)
.
rev
(
)
{
if
let
Some
(
(
_
flattened_instance
)
)
=
flattened_items
.
take
(
)
{
sc
.
prim_list
.
add_prim
(
flattened_instance
LayoutRect
:
:
zero
(
)
spatial_node_index
prim_flags
)
;
}
flattened_items
=
sc
.
cut_item_sequence
(
&
mut
self
.
prim_store
&
mut
self
.
interners
None
Picture3DContext
:
:
Out
)
;
spatial_node_index
=
sc
.
spatial_node_index
;
prim_flags
=
sc
.
prim_flags
;
if
sc
.
is_backdrop_root
{
backdrop_root
=
Some
(
sc
)
;
break
;
}
}
let
(
pic_index
instance
)
=
flattened_items
?
;
self
.
prim_store
.
pictures
[
pic_index
.
0
]
.
requested_composite_mode
=
Some
(
PictureCompositeMode
:
:
Blit
(
BlitReason
:
:
BACKDROP
)
)
;
backdrop_root
.
expect
(
"
no
backdrop
root
found
"
)
.
prim_list
.
add_prim
(
instance
LayoutRect
:
:
zero
(
)
spatial_node_index
prim_flags
)
;
Some
(
pic_index
)
}
fn
wrap_prim_with_filters
(
&
mut
self
mut
cur_instance
:
PrimitiveInstance
mut
current_pic_index
:
PictureIndex
mut
filter_ops
:
Vec
<
Filter
>
mut
filter_primitives
:
Vec
<
FilterPrimitive
>
filter_datas
:
Vec
<
FilterData
>
flags
:
PrimitiveFlags
requested_raster_space
:
RasterSpace
spatial_node_index
:
SpatialNodeIndex
inflate_if_required
:
bool
)
-
>
(
PictureIndex
PrimitiveInstance
)
{
assert
!
(
filter_ops
.
is_empty
(
)
|
|
filter_primitives
.
is_empty
(
)
"
Filter
ops
and
filter
primitives
are
not
allowed
on
the
same
stacking
context
.
"
)
;
let
mut
current_filter_data_index
=
0
;
for
filter
in
&
mut
filter_ops
{
let
composite_mode
=
match
filter
{
Filter
:
:
ComponentTransfer
=
>
{
let
filter_data
=
&
filter_datas
[
current_filter_data_index
]
;
let
filter_data
=
filter_data
.
sanitize
(
)
;
current_filter_data_index
=
current_filter_data_index
+
1
;
if
filter_data
.
is_identity
(
)
{
continue
}
else
{
let
filter_data_key
=
SFilterDataKey
{
data
:
SFilterData
{
r_func
:
SFilterDataComponent
:
:
from_functype_values
(
filter_data
.
func_r_type
&
filter_data
.
r_values
)
g_func
:
SFilterDataComponent
:
:
from_functype_values
(
filter_data
.
func_g_type
&
filter_data
.
g_values
)
b_func
:
SFilterDataComponent
:
:
from_functype_values
(
filter_data
.
func_b_type
&
filter_data
.
b_values
)
a_func
:
SFilterDataComponent
:
:
from_functype_values
(
filter_data
.
func_a_type
&
filter_data
.
a_values
)
}
}
;
let
handle
=
self
.
interners
.
filter_data
.
intern
(
&
filter_data_key
|
|
(
)
)
;
Some
(
PictureCompositeMode
:
:
ComponentTransferFilter
(
handle
)
)
}
}
_
=
>
{
if
filter
.
is_noop
(
)
{
None
}
else
{
Some
(
PictureCompositeMode
:
:
Filter
(
filter
.
clone
(
)
)
)
}
}
}
;
let
mut
prim_list
=
PrimitiveList
:
:
empty
(
)
;
prim_list
.
add_prim
(
cur_instance
LayoutRect
:
:
zero
(
)
spatial_node_index
flags
)
;
let
filter_pic_index
=
PictureIndex
(
self
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
composite_mode
.
clone
(
)
Picture3DContext
:
:
Out
true
flags
requested_raster_space
prim_list
spatial_node_index
PictureOptions
{
inflate_if_required
}
)
)
)
;
current_pic_index
=
filter_pic_index
;
cur_instance
=
create_prim_instance
(
current_pic_index
composite_mode
.
into
(
)
ClipChainId
:
:
NONE
&
mut
self
.
interners
)
;
if
cur_instance
.
is_chased
(
)
{
println
!
(
"
\
tis
a
composite
picture
for
a
stacking
context
with
{
:
?
}
"
filter
)
;
}
}
if
!
filter_primitives
.
is_empty
(
)
{
let
filter_datas
=
filter_datas
.
iter
(
)
.
map
(
|
filter_data
|
filter_data
.
sanitize
(
)
)
.
map
(
|
filter_data
|
{
SFilterData
{
r_func
:
SFilterDataComponent
:
:
from_functype_values
(
filter_data
.
func_r_type
&
filter_data
.
r_values
)
g_func
:
SFilterDataComponent
:
:
from_functype_values
(
filter_data
.
func_g_type
&
filter_data
.
g_values
)
b_func
:
SFilterDataComponent
:
:
from_functype_values
(
filter_data
.
func_b_type
&
filter_data
.
b_values
)
a_func
:
SFilterDataComponent
:
:
from_functype_values
(
filter_data
.
func_a_type
&
filter_data
.
a_values
)
}
}
)
.
collect
(
)
;
for
primitive
in
&
mut
filter_primitives
{
primitive
.
sanitize
(
)
;
}
let
composite_mode
=
PictureCompositeMode
:
:
SvgFilter
(
filter_primitives
filter_datas
)
;
let
mut
prim_list
=
PrimitiveList
:
:
empty
(
)
;
prim_list
.
add_prim
(
cur_instance
LayoutRect
:
:
zero
(
)
spatial_node_index
flags
)
;
let
filter_pic_index
=
PictureIndex
(
self
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
Some
(
composite_mode
.
clone
(
)
)
Picture3DContext
:
:
Out
true
flags
requested_raster_space
prim_list
spatial_node_index
PictureOptions
{
inflate_if_required
}
)
)
)
;
current_pic_index
=
filter_pic_index
;
cur_instance
=
create_prim_instance
(
current_pic_index
Some
(
composite_mode
)
.
into
(
)
ClipChainId
:
:
NONE
&
mut
self
.
interners
)
;
if
cur_instance
.
is_chased
(
)
{
println
!
(
"
\
tis
a
composite
picture
for
a
stacking
context
with
an
SVG
filter
"
)
;
}
}
(
current_pic_index
cur_instance
)
}
}
pub
trait
CreateShadow
{
fn
create_shadow
(
&
self
shadow
:
&
Shadow
)
-
>
Self
;
}
pub
trait
IsVisible
{
fn
is_visible
(
&
self
)
-
>
bool
;
}
struct
ExtendedPrimitiveInstance
{
instance
:
PrimitiveInstance
spatial_node_index
:
SpatialNodeIndex
flags
:
PrimitiveFlags
}
struct
StackingContextInfo
{
pop_clip_root
:
bool
pop_containing_block
:
bool
pop_stacking_context
:
bool
}
struct
FlattenedStackingContext
{
prim_list
:
PrimitiveList
prim_flags
:
PrimitiveFlags
requested_raster_space
:
RasterSpace
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
composite_ops
:
CompositeOps
blit_reason
:
BlitReason
transform_style
:
TransformStyle
context_3d
:
Picture3DContext
<
ExtendedPrimitiveInstance
>
is_backdrop_root
:
bool
is_redundant
:
bool
}
impl
FlattenedStackingContext
{
pub
fn
is_3d
(
&
self
)
-
>
bool
{
self
.
transform_style
=
=
TransformStyle
:
:
Preserve3D
&
&
self
.
composite_ops
.
is_empty
(
)
}
pub
fn
is_redundant
(
sc_flags
:
StackingContextFlags
context_3d
:
&
Picture3DContext
<
ExtendedPrimitiveInstance
>
composite_ops
:
&
CompositeOps
prim_flags
:
PrimitiveFlags
blit_reason
:
BlitReason
requested_raster_space
:
RasterSpace
parent
:
Option
<
&
FlattenedStackingContext
>
)
-
>
bool
{
if
sc_flags
.
intersects
(
StackingContextFlags
:
:
IS_BACKDROP_ROOT
|
StackingContextFlags
:
:
IS_BLEND_CONTAINER
)
{
return
false
;
}
if
let
Picture3DContext
:
:
In
{
.
.
}
=
context_3d
{
return
false
;
}
if
!
composite_ops
.
filters
.
is_empty
(
)
{
return
false
;
}
if
!
composite_ops
.
filter_primitives
.
is_empty
(
)
{
return
false
;
}
if
composite_ops
.
mix_blend_mode
.
is_some
(
)
{
if
let
Some
(
parent
)
=
parent
{
if
!
parent
.
prim_list
.
is_empty
(
)
{
return
false
;
}
}
}
if
!
prim_flags
.
contains
(
PrimitiveFlags
:
:
IS_BACKFACE_VISIBLE
)
{
return
false
;
}
match
parent
{
Some
(
parent
)
=
>
{
if
requested_raster_space
!
=
parent
.
requested_raster_space
{
return
false
;
}
}
None
=
>
{
if
requested_raster_space
!
=
RasterSpace
:
:
Screen
{
return
false
;
}
}
}
if
!
blit_reason
.
is_empty
(
)
{
return
false
;
}
if
prim_flags
.
contains
(
PrimitiveFlags
:
:
IS_SCROLLBAR_CONTAINER
)
{
return
false
;
}
true
}
pub
fn
cut_item_sequence
(
&
mut
self
prim_store
:
&
mut
PrimitiveStore
interners
:
&
mut
Interners
composite_mode
:
Option
<
PictureCompositeMode
>
flat_items_context_3d
:
Picture3DContext
<
OrderedPictureChild
>
)
-
>
Option
<
(
PictureIndex
PrimitiveInstance
)
>
{
if
self
.
prim_list
.
is_empty
(
)
{
return
None
}
let
pic_index
=
PictureIndex
(
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
composite_mode
.
clone
(
)
flat_items_context_3d
true
self
.
prim_flags
self
.
requested_raster_space
mem
:
:
replace
(
&
mut
self
.
prim_list
PrimitiveList
:
:
empty
(
)
)
self
.
spatial_node_index
PictureOptions
:
:
default
(
)
)
)
)
;
let
prim_instance
=
create_prim_instance
(
pic_index
composite_mode
.
into
(
)
self
.
clip_chain_id
interners
)
;
Some
(
(
pic_index
prim_instance
)
)
}
}
pub
struct
PendingPrimitive
<
T
>
{
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
info
:
LayoutPrimitiveInfo
prim
:
T
}
pub
struct
PendingShadow
{
shadow
:
Shadow
should_inflate
:
bool
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
}
pub
enum
ShadowItem
{
Shadow
(
PendingShadow
)
Image
(
PendingPrimitive
<
Image
>
)
LineDecoration
(
PendingPrimitive
<
LineDecoration
>
)
NormalBorder
(
PendingPrimitive
<
NormalBorderPrim
>
)
Primitive
(
PendingPrimitive
<
PrimitiveKeyKind
>
)
TextRun
(
PendingPrimitive
<
TextRun
>
)
}
impl
From
<
PendingPrimitive
<
Image
>
>
for
ShadowItem
{
fn
from
(
image
:
PendingPrimitive
<
Image
>
)
-
>
Self
{
ShadowItem
:
:
Image
(
image
)
}
}
impl
From
<
PendingPrimitive
<
LineDecoration
>
>
for
ShadowItem
{
fn
from
(
line_dec
:
PendingPrimitive
<
LineDecoration
>
)
-
>
Self
{
ShadowItem
:
:
LineDecoration
(
line_dec
)
}
}
impl
From
<
PendingPrimitive
<
NormalBorderPrim
>
>
for
ShadowItem
{
fn
from
(
border
:
PendingPrimitive
<
NormalBorderPrim
>
)
-
>
Self
{
ShadowItem
:
:
NormalBorder
(
border
)
}
}
impl
From
<
PendingPrimitive
<
PrimitiveKeyKind
>
>
for
ShadowItem
{
fn
from
(
container
:
PendingPrimitive
<
PrimitiveKeyKind
>
)
-
>
Self
{
ShadowItem
:
:
Primitive
(
container
)
}
}
impl
From
<
PendingPrimitive
<
TextRun
>
>
for
ShadowItem
{
fn
from
(
text_run
:
PendingPrimitive
<
TextRun
>
)
-
>
Self
{
ShadowItem
:
:
TextRun
(
text_run
)
}
}
fn
create_prim_instance
(
pic_index
:
PictureIndex
composite_mode_key
:
PictureCompositeKey
clip_chain_id
:
ClipChainId
interners
:
&
mut
Interners
)
-
>
PrimitiveInstance
{
let
pic_key
=
PictureKey
:
:
new
(
Picture
{
composite_mode_key
}
)
;
let
data_handle
=
interners
.
picture
.
intern
(
&
pic_key
|
|
(
)
)
;
PrimitiveInstance
:
:
new
(
LayoutRect
:
:
max_rect
(
)
PrimitiveInstanceKind
:
:
Picture
{
data_handle
pic_index
segment_instance_index
:
SegmentInstanceIndex
:
:
INVALID
}
clip_chain_id
)
}
fn
filter_ops_for_compositing
(
input_filters
:
ItemRange
<
FilterOp
>
)
-
>
Vec
<
Filter
>
{
input_filters
.
iter
(
)
.
map
(
|
filter
|
filter
.
into
(
)
)
.
collect
(
)
}
fn
filter_datas_for_compositing
(
input_filter_datas
:
&
[
TempFilterData
]
)
-
>
Vec
<
FilterData
>
{
let
mut
filter_datas
=
vec
!
[
]
;
for
temp_filter_data
in
input_filter_datas
{
let
func_types
:
Vec
<
ComponentTransferFuncType
>
=
temp_filter_data
.
func_types
.
iter
(
)
.
collect
(
)
;
debug_assert
!
(
func_types
.
len
(
)
=
=
4
)
;
filter_datas
.
push
(
FilterData
{
func_r_type
:
func_types
[
0
]
r_values
:
temp_filter_data
.
r_values
.
iter
(
)
.
collect
(
)
func_g_type
:
func_types
[
1
]
g_values
:
temp_filter_data
.
g_values
.
iter
(
)
.
collect
(
)
func_b_type
:
func_types
[
2
]
b_values
:
temp_filter_data
.
b_values
.
iter
(
)
.
collect
(
)
func_a_type
:
func_types
[
3
]
a_values
:
temp_filter_data
.
a_values
.
iter
(
)
.
collect
(
)
}
)
;
}
filter_datas
}
fn
filter_primitives_for_compositing
(
input_filter_primitives
:
ItemRange
<
FilterPrimitive
>
)
-
>
Vec
<
FilterPrimitive
>
{
input_filter_primitives
.
iter
(
)
.
map
(
|
primitive
|
primitive
)
.
collect
(
)
}
fn
process_repeat_size
(
snapped_rect
:
&
LayoutRect
unsnapped_rect
:
&
LayoutRect
repeat_size
:
LayoutSize
)
-
>
LayoutSize
{
const
EPSILON
:
f32
=
0
.
001
;
LayoutSize
:
:
new
(
if
repeat_size
.
width
.
approx_eq_eps
(
&
unsnapped_rect
.
size
.
width
&
EPSILON
)
{
snapped_rect
.
size
.
width
}
else
{
repeat_size
.
width
}
if
repeat_size
.
height
.
approx_eq_eps
(
&
unsnapped_rect
.
size
.
height
&
EPSILON
)
{
snapped_rect
.
size
.
height
}
else
{
repeat_size
.
height
}
)
}
