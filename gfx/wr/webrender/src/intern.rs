use
internal_types
:
:
FastHashMap
;
use
std
:
:
fmt
:
:
Debug
;
use
std
:
:
hash
:
:
Hash
;
use
std
:
:
marker
:
:
PhantomData
;
use
std
:
:
{
mem
ops
u64
}
;
use
util
:
:
VecHelper
;
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
struct
Epoch
(
u64
)
;
impl
Epoch
{
pub
const
INVALID
:
Self
=
Epoch
(
u64
:
:
MAX
)
;
}
pub
struct
UpdateList
<
S
>
{
epoch
:
Epoch
updates
:
Vec
<
Update
>
data
:
Vec
<
S
>
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
#
[
derive
(
Debug
Copy
Clone
Eq
Hash
PartialEq
)
]
pub
struct
ItemUid
<
T
>
{
uid
:
usize
_marker
:
PhantomData
<
T
>
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
#
[
derive
(
Debug
Copy
Clone
)
]
pub
struct
Handle
<
T
>
{
index
:
u32
epoch
:
Epoch
uid
:
ItemUid
<
T
>
_marker
:
PhantomData
<
T
>
}
impl
<
T
>
Handle
<
T
>
where
T
:
Copy
{
pub
fn
uid
(
&
self
)
-
>
ItemUid
<
T
>
{
self
.
uid
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
enum
UpdateKind
{
Insert
Remove
UpdateEpoch
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
Update
{
index
:
usize
kind
:
UpdateKind
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
struct
Item
<
T
>
{
epoch
:
Epoch
data
:
T
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
DataStore
<
S
T
M
>
{
items
:
Vec
<
Item
<
T
>
>
_source
:
PhantomData
<
S
>
_marker
:
PhantomData
<
M
>
}
impl
<
S
T
M
>
DataStore
<
S
T
M
>
where
S
:
Debug
T
:
From
<
S
>
M
:
Debug
{
pub
fn
new
(
)
-
>
Self
{
DataStore
{
items
:
Vec
:
:
new
(
)
_source
:
PhantomData
_marker
:
PhantomData
}
}
pub
fn
apply_updates
(
&
mut
self
update_list
:
UpdateList
<
S
>
)
{
let
mut
data_iter
=
update_list
.
data
.
into_iter
(
)
;
for
update
in
update_list
.
updates
{
match
update
.
kind
{
UpdateKind
:
:
Insert
=
>
{
self
.
items
.
entry
(
update
.
index
)
.
set
(
Item
{
data
:
T
:
:
from
(
data_iter
.
next
(
)
.
unwrap
(
)
)
epoch
:
update_list
.
epoch
}
)
;
}
UpdateKind
:
:
Remove
=
>
{
self
.
items
[
update
.
index
]
.
epoch
=
Epoch
:
:
INVALID
;
}
UpdateKind
:
:
UpdateEpoch
=
>
{
self
.
items
[
update
.
index
]
.
epoch
=
update_list
.
epoch
;
}
}
}
debug_assert
!
(
data_iter
.
next
(
)
.
is_none
(
)
)
;
}
}
impl
<
S
T
M
>
ops
:
:
Index
<
Handle
<
M
>
>
for
DataStore
<
S
T
M
>
{
type
Output
=
T
;
fn
index
(
&
self
handle
:
Handle
<
M
>
)
-
>
&
T
{
let
item
=
&
self
.
items
[
handle
.
index
as
usize
]
;
assert_eq
!
(
item
.
epoch
handle
.
epoch
)
;
&
item
.
data
}
}
impl
<
S
T
M
>
ops
:
:
IndexMut
<
Handle
<
M
>
>
for
DataStore
<
S
T
M
>
{
fn
index_mut
(
&
mut
self
handle
:
Handle
<
M
>
)
-
>
&
mut
T
{
let
item
=
&
mut
self
.
items
[
handle
.
index
as
usize
]
;
assert_eq
!
(
item
.
epoch
handle
.
epoch
)
;
&
mut
item
.
data
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
Interner
<
S
:
Eq
+
Hash
+
Clone
+
Debug
D
M
>
{
map
:
FastHashMap
<
S
Handle
<
M
>
>
free_list
:
Vec
<
usize
>
updates
:
Vec
<
Update
>
update_data
:
Vec
<
S
>
current_epoch
:
Epoch
next_uid
:
usize
local_data
:
Vec
<
Item
<
D
>
>
}
impl
<
S
D
M
>
Interner
<
S
D
M
>
where
S
:
Eq
+
Hash
+
Clone
+
Debug
M
:
Copy
+
Debug
{
pub
fn
new
(
)
-
>
Self
{
Interner
{
map
:
FastHashMap
:
:
default
(
)
free_list
:
Vec
:
:
new
(
)
updates
:
Vec
:
:
new
(
)
update_data
:
Vec
:
:
new
(
)
current_epoch
:
Epoch
(
1
)
next_uid
:
0
local_data
:
Vec
:
:
new
(
)
}
}
pub
fn
intern
<
F
>
(
&
mut
self
data
:
&
S
f
:
F
)
-
>
Handle
<
M
>
where
F
:
FnOnce
(
)
-
>
D
{
if
let
Some
(
handle
)
=
self
.
map
.
get_mut
(
data
)
{
if
handle
.
epoch
!
=
self
.
current_epoch
{
self
.
updates
.
push
(
Update
{
index
:
handle
.
index
as
usize
kind
:
UpdateKind
:
:
UpdateEpoch
}
)
;
self
.
local_data
[
handle
.
index
as
usize
]
.
epoch
=
self
.
current_epoch
;
}
handle
.
epoch
=
self
.
current_epoch
;
return
*
handle
;
}
let
index
=
match
self
.
free_list
.
pop
(
)
{
Some
(
index
)
=
>
index
None
=
>
self
.
local_data
.
len
(
)
}
;
self
.
updates
.
push
(
Update
{
index
kind
:
UpdateKind
:
:
Insert
}
)
;
self
.
update_data
.
alloc
(
)
.
init
(
data
.
clone
(
)
)
;
let
handle
=
Handle
{
index
:
index
as
u32
epoch
:
self
.
current_epoch
uid
:
ItemUid
{
uid
:
self
.
next_uid
_marker
:
PhantomData
}
_marker
:
PhantomData
}
;
self
.
map
.
insert
(
data
.
clone
(
)
handle
)
;
self
.
next_uid
+
=
1
;
self
.
local_data
.
entry
(
index
)
.
set
(
Item
{
epoch
:
self
.
current_epoch
data
:
f
(
)
}
)
;
handle
}
pub
fn
end_frame_and_get_pending_updates
(
&
mut
self
)
-
>
UpdateList
<
S
>
{
let
mut
updates
=
mem
:
:
replace
(
&
mut
self
.
updates
Vec
:
:
new
(
)
)
;
let
data
=
mem
:
:
replace
(
&
mut
self
.
update_data
Vec
:
:
new
(
)
)
;
let
free_list
=
&
mut
self
.
free_list
;
let
current_epoch
=
self
.
current_epoch
.
0
;
self
.
map
.
retain
(
|
_
handle
|
{
if
handle
.
epoch
.
0
+
10
<
current_epoch
{
free_list
.
push
(
handle
.
index
as
usize
)
;
updates
.
push
(
Update
{
index
:
handle
.
index
as
usize
kind
:
UpdateKind
:
:
Remove
}
)
;
return
false
;
}
true
}
)
;
let
updates
=
UpdateList
{
updates
data
epoch
:
self
.
current_epoch
}
;
self
.
current_epoch
=
Epoch
(
self
.
current_epoch
.
0
+
1
)
;
updates
}
}
impl
<
S
D
M
>
ops
:
:
Index
<
Handle
<
M
>
>
for
Interner
<
S
D
M
>
where
S
:
Eq
+
Clone
+
Hash
+
Debug
M
:
Copy
+
Debug
{
type
Output
=
D
;
fn
index
(
&
self
handle
:
Handle
<
M
>
)
-
>
&
D
{
let
item
=
&
self
.
local_data
[
handle
.
index
as
usize
]
;
assert_eq
!
(
item
.
epoch
handle
.
epoch
)
;
&
item
.
data
}
}
