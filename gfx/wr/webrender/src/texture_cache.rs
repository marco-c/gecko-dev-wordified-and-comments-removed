use
api
:
:
{
DirtyRect
DocumentId
ExternalImageType
ImageFormat
}
;
use
api
:
:
{
DebugFlags
ImageDescriptor
}
;
use
api
:
:
units
:
:
*
;
#
[
cfg
(
test
)
]
use
api
:
:
IdNamespace
;
use
crate
:
:
device
:
:
{
TextureFilter
total_gpu_bytes_allocated
}
;
use
crate
:
:
freelist
:
:
{
FreeList
FreeListHandle
UpsertResult
WeakFreeListHandle
}
;
use
crate
:
:
gpu_cache
:
:
{
GpuCache
GpuCacheHandle
}
;
use
crate
:
:
gpu_types
:
:
{
ImageSource
UvRectKind
}
;
use
crate
:
:
internal_types
:
:
{
CacheTextureId
FastHashMap
LayerIndex
TextureUpdateList
TextureUpdateSource
}
;
use
crate
:
:
internal_types
:
:
{
TextureSource
TextureCacheAllocInfo
TextureCacheUpdate
}
;
use
crate
:
:
profiler
:
:
{
ResourceProfileCounter
TextureCacheProfileCounters
}
;
use
crate
:
:
render_backend
:
:
{
FrameId
FrameStamp
}
;
use
crate
:
:
resource_cache
:
:
{
CacheItem
CachedImageData
}
;
use
std
:
:
cell
:
:
Cell
;
use
std
:
:
cmp
;
use
std
:
:
mem
;
use
std
:
:
time
:
:
{
Duration
SystemTime
}
;
use
std
:
:
rc
:
:
Rc
;
pub
const
TEXTURE_REGION_DIMENSIONS
:
i32
=
512
;
const
PICTURE_TEXTURE_ADD_SLICES
:
usize
=
4
;
const
PICTURE_TILE_FORMAT
:
ImageFormat
=
ImageFormat
:
:
BGRA8
;
const
TEXTURE_REGION_PIXELS
:
usize
=
(
TEXTURE_REGION_DIMENSIONS
as
usize
)
*
(
TEXTURE_REGION_DIMENSIONS
as
usize
)
;
const
RECLAIM_THRESHOLD_BYTES
:
usize
=
5
*
1024
*
1024
;
#
[
derive
(
Debug
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
enum
EntryDetails
{
Standalone
Picture
{
layer_index
:
usize
}
Cache
{
origin
:
DeviceIntPoint
layer_index
:
usize
}
}
impl
EntryDetails
{
fn
describe
(
&
self
)
-
>
(
LayerIndex
DeviceIntPoint
)
{
match
*
self
{
EntryDetails
:
:
Standalone
=
>
(
0
DeviceIntPoint
:
:
zero
(
)
)
EntryDetails
:
:
Picture
{
layer_index
}
=
>
(
layer_index
DeviceIntPoint
:
:
zero
(
)
)
EntryDetails
:
:
Cache
{
origin
layer_index
}
=
>
(
layer_index
origin
)
}
}
}
impl
EntryDetails
{
fn
kind
(
&
self
)
-
>
EntryKind
{
match
*
self
{
EntryDetails
:
:
Standalone
=
>
EntryKind
:
:
Standalone
EntryDetails
:
:
Picture
{
.
.
}
=
>
EntryKind
:
:
Picture
EntryDetails
:
:
Cache
{
.
.
}
=
>
EntryKind
:
:
Shared
}
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
enum
EntryKind
{
Standalone
Picture
Shared
}
#
[
derive
(
Debug
)
]
pub
enum
CacheEntryMarker
{
}
#
[
derive
(
Debug
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
struct
CacheEntry
{
size
:
DeviceIntSize
details
:
EntryDetails
user_data
:
[
f32
;
3
]
last_access
:
FrameStamp
uv_rect_handle
:
GpuCacheHandle
format
:
ImageFormat
filter
:
TextureFilter
texture_id
:
CacheTextureId
eviction_notice
:
Option
<
EvictionNotice
>
uv_rect_kind
:
UvRectKind
eviction
:
Eviction
}
impl
CacheEntry
{
fn
new_standalone
(
texture_id
:
CacheTextureId
last_access
:
FrameStamp
params
:
&
CacheAllocParams
)
-
>
Self
{
CacheEntry
{
size
:
params
.
descriptor
.
size
user_data
:
params
.
user_data
last_access
details
:
EntryDetails
:
:
Standalone
texture_id
format
:
params
.
descriptor
.
format
filter
:
params
.
filter
uv_rect_handle
:
GpuCacheHandle
:
:
new
(
)
eviction_notice
:
None
uv_rect_kind
:
params
.
uv_rect_kind
eviction
:
Eviction
:
:
Auto
}
}
fn
update_gpu_cache
(
&
mut
self
gpu_cache
:
&
mut
GpuCache
)
{
if
let
Some
(
mut
request
)
=
gpu_cache
.
request
(
&
mut
self
.
uv_rect_handle
)
{
let
(
layer_index
origin
)
=
self
.
details
.
describe
(
)
;
let
image_source
=
ImageSource
{
p0
:
origin
.
to_f32
(
)
p1
:
(
origin
+
self
.
size
)
.
to_f32
(
)
texture_layer
:
layer_index
as
f32
user_data
:
self
.
user_data
uv_rect_kind
:
self
.
uv_rect_kind
}
;
image_source
.
write_gpu_blocks
(
&
mut
request
)
;
}
}
fn
evict
(
&
self
)
{
if
let
Some
(
eviction_notice
)
=
self
.
eviction_notice
.
as_ref
(
)
{
eviction_notice
.
notify
(
)
;
}
}
}
pub
type
TextureCacheHandle
=
WeakFreeListHandle
<
CacheEntryMarker
>
;
#
[
derive
(
Copy
Clone
Debug
PartialEq
Eq
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
enum
Eviction
{
Auto
Manual
Eager
}
#
[
derive
(
Clone
Debug
Default
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
EvictionNotice
{
evicted
:
Rc
<
Cell
<
bool
>
>
}
impl
EvictionNotice
{
fn
notify
(
&
self
)
{
self
.
evicted
.
set
(
true
)
;
}
pub
fn
check
(
&
self
)
-
>
bool
{
if
self
.
evicted
.
get
(
)
{
self
.
evicted
.
set
(
false
)
;
true
}
else
{
false
}
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
struct
SharedTextures
{
array_rgba8_nearest
:
TextureArray
array_a8_linear
:
TextureArray
array_a16_linear
:
TextureArray
array_rgba8_linear
:
TextureArray
}
impl
SharedTextures
{
fn
new
(
)
-
>
Self
{
Self
{
array_a8_linear
:
TextureArray
:
:
new
(
ImageFormat
:
:
R8
TextureFilter
:
:
Linear
)
array_a16_linear
:
TextureArray
:
:
new
(
ImageFormat
:
:
R16
TextureFilter
:
:
Linear
)
array_rgba8_linear
:
TextureArray
:
:
new
(
ImageFormat
:
:
BGRA8
TextureFilter
:
:
Linear
)
array_rgba8_nearest
:
TextureArray
:
:
new
(
ImageFormat
:
:
BGRA8
TextureFilter
:
:
Nearest
)
}
}
fn
size_in_bytes
(
&
self
)
-
>
usize
{
self
.
array_a8_linear
.
size_in_bytes
(
)
+
self
.
array_a16_linear
.
size_in_bytes
(
)
+
self
.
array_rgba8_linear
.
size_in_bytes
(
)
+
self
.
array_rgba8_nearest
.
size_in_bytes
(
)
}
fn
empty_region_bytes
(
&
self
)
-
>
usize
{
self
.
array_a8_linear
.
empty_region_bytes
(
)
+
self
.
array_a16_linear
.
empty_region_bytes
(
)
+
self
.
array_rgba8_linear
.
empty_region_bytes
(
)
+
self
.
array_rgba8_nearest
.
empty_region_bytes
(
)
}
fn
clear
(
&
mut
self
updates
:
&
mut
TextureUpdateList
)
{
self
.
array_a8_linear
.
clear
(
updates
)
;
self
.
array_a16_linear
.
clear
(
updates
)
;
self
.
array_rgba8_linear
.
clear
(
updates
)
;
self
.
array_rgba8_nearest
.
clear
(
updates
)
;
}
fn
select
(
&
mut
self
format
:
ImageFormat
filter
:
TextureFilter
)
-
>
&
mut
TextureArray
{
match
(
format
filter
)
{
(
ImageFormat
:
:
R8
TextureFilter
:
:
Linear
)
=
>
&
mut
self
.
array_a8_linear
(
ImageFormat
:
:
R16
TextureFilter
:
:
Linear
)
=
>
&
mut
self
.
array_a16_linear
(
ImageFormat
:
:
BGRA8
TextureFilter
:
:
Linear
)
=
>
&
mut
self
.
array_rgba8_linear
(
ImageFormat
:
:
BGRA8
TextureFilter
:
:
Nearest
)
=
>
&
mut
self
.
array_rgba8_nearest
(
_
_
)
=
>
unreachable
!
(
)
}
}
}
#
[
derive
(
Default
Debug
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
struct
EntryHandles
{
standalone
:
Vec
<
FreeListHandle
<
CacheEntryMarker
>
>
picture
:
Vec
<
FreeListHandle
<
CacheEntryMarker
>
>
shared
:
Vec
<
FreeListHandle
<
CacheEntryMarker
>
>
}
impl
EntryHandles
{
fn
select
(
&
mut
self
kind
:
EntryKind
)
-
>
&
mut
Vec
<
FreeListHandle
<
CacheEntryMarker
>
>
{
match
kind
{
EntryKind
:
:
Standalone
=
>
&
mut
self
.
standalone
EntryKind
:
:
Picture
=
>
&
mut
self
.
picture
EntryKind
:
:
Shared
=
>
&
mut
self
.
shared
}
}
}
struct
CacheAllocParams
{
descriptor
:
ImageDescriptor
filter
:
TextureFilter
user_data
:
[
f32
;
3
]
uv_rect_kind
:
UvRectKind
}
#
[
derive
(
Clone
Copy
)
]
struct
EvictionThreshold
{
id
:
FrameId
time
:
SystemTime
}
impl
EvictionThreshold
{
fn
should_evict
(
&
self
last_access
:
FrameStamp
)
-
>
bool
{
last_access
.
frame_id
(
)
<
self
.
id
&
&
last_access
.
time
(
)
<
self
.
time
}
}
struct
EvictionThresholdBuilder
{
now
:
FrameStamp
max_frames
:
Option
<
usize
>
max_time_ms
:
Option
<
usize
>
scale_by_pressure
:
bool
}
impl
EvictionThresholdBuilder
{
fn
new
(
now
:
FrameStamp
)
-
>
Self
{
Self
{
now
max_frames
:
None
max_time_ms
:
None
scale_by_pressure
:
false
}
}
fn
max_frames
(
mut
self
frames
:
usize
)
-
>
Self
{
self
.
max_frames
=
Some
(
frames
)
;
self
}
fn
max_time_s
(
mut
self
seconds
:
usize
)
-
>
Self
{
self
.
max_time_ms
=
Some
(
seconds
*
1000
)
;
self
}
fn
scale_by_pressure
(
mut
self
)
-
>
Self
{
self
.
scale_by_pressure
=
true
;
self
}
fn
build
(
self
)
-
>
EvictionThreshold
{
const
MAX_MEMORY_PRESSURE_BYTES
:
f64
=
(
500
*
1024
*
1024
)
as
f64
;
let
pressure_factor
=
if
self
.
scale_by_pressure
{
let
bytes_allocated
=
total_gpu_bytes_allocated
(
)
as
f64
;
1
.
0
-
(
bytes_allocated
/
MAX_MEMORY_PRESSURE_BYTES
)
.
min
(
1
.
0
)
}
else
{
1
.
0
}
;
let
max_frames
=
self
.
max_frames
.
map
(
|
f
|
(
f
as
f64
*
pressure_factor
)
as
usize
)
.
unwrap_or
(
0
)
.
min
(
self
.
now
.
frame_id
(
)
.
as_usize
(
)
-
1
)
;
let
max_time_ms
=
self
.
max_time_ms
.
map
(
|
f
|
(
f
as
f64
*
pressure_factor
)
as
usize
)
.
unwrap_or
(
0
)
as
u64
;
EvictionThreshold
{
id
:
self
.
now
.
frame_id
(
)
-
max_frames
time
:
self
.
now
.
time
(
)
-
Duration
:
:
from_millis
(
max_time_ms
)
}
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
PerDocumentData
{
last_shared_cache_expiration
:
FrameStamp
handles
:
EntryHandles
}
impl
PerDocumentData
{
pub
fn
new
(
)
-
>
Self
{
PerDocumentData
{
last_shared_cache_expiration
:
FrameStamp
:
:
INVALID
handles
:
EntryHandles
:
:
default
(
)
}
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
TextureCache
{
shared_textures
:
SharedTextures
picture_texture
:
Option
<
WholeTextureArray
>
max_texture_size
:
i32
max_texture_layers
:
usize
debug_flags
:
DebugFlags
next_id
:
CacheTextureId
#
[
cfg_attr
(
all
(
feature
=
"
serde
"
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
serde
(
skip
)
)
]
pending_updates
:
TextureUpdateList
now
:
FrameStamp
reached_reclaim_threshold
:
Option
<
SystemTime
>
entries
:
FreeList
<
CacheEntry
CacheEntryMarker
>
per_doc_data
:
FastHashMap
<
DocumentId
PerDocumentData
>
doc_data
:
PerDocumentData
require_frame_build
:
bool
}
impl
TextureCache
{
pub
fn
new
(
max_texture_size
:
i32
mut
max_texture_layers
:
usize
picture_tile_size
:
Option
<
DeviceIntSize
>
initial_size
:
DeviceIntSize
)
-
>
Self
{
if
cfg
!
(
target_os
=
"
macos
"
)
{
max_texture_layers
=
max_texture_layers
.
min
(
32
)
;
}
let
mut
pending_updates
=
TextureUpdateList
:
:
new
(
)
;
let
picture_texture
=
if
let
Some
(
tile_size
)
=
picture_tile_size
{
let
picture_texture
=
WholeTextureArray
{
size
:
tile_size
filter
:
TextureFilter
:
:
Linear
format
:
PICTURE_TILE_FORMAT
texture_id
:
CacheTextureId
(
1
)
slices
:
{
let
num_x
=
(
initial_size
.
width
+
tile_size
.
width
-
1
)
/
tile_size
.
width
;
let
num_y
=
(
initial_size
.
height
+
tile_size
.
height
-
1
)
/
tile_size
.
height
;
let
count
=
(
num_x
*
num_y
)
.
max
(
1
)
as
usize
;
info
!
(
"
Initializing
picture
texture
with
{
}
x
{
}
slices
"
num_x
num_y
)
;
vec
!
[
WholeTextureSlice
{
uv_rect_handle
:
None
}
;
count
]
}
}
;
pending_updates
.
push_alloc
(
picture_texture
.
texture_id
picture_texture
.
to_info
(
)
)
;
Some
(
picture_texture
)
}
else
{
None
}
;
TextureCache
{
shared_textures
:
SharedTextures
:
:
new
(
)
picture_texture
reached_reclaim_threshold
:
None
entries
:
FreeList
:
:
new
(
)
max_texture_size
max_texture_layers
debug_flags
:
DebugFlags
:
:
empty
(
)
next_id
:
CacheTextureId
(
2
)
pending_updates
now
:
FrameStamp
:
:
INVALID
per_doc_data
:
FastHashMap
:
:
default
(
)
doc_data
:
PerDocumentData
:
:
new
(
)
require_frame_build
:
false
}
}
#
[
cfg
(
test
)
]
pub
fn
new_for_testing
(
max_texture_size
:
i32
max_texture_layers
:
usize
)
-
>
Self
{
let
mut
cache
=
Self
:
:
new
(
max_texture_size
max_texture_layers
None
DeviceIntSize
:
:
zero
(
)
)
;
let
mut
now
=
FrameStamp
:
:
first
(
DocumentId
:
:
new
(
IdNamespace
(
1
)
1
)
)
;
now
.
advance
(
)
;
cache
.
begin_frame
(
now
)
;
cache
}
pub
fn
set_debug_flags
(
&
mut
self
flags
:
DebugFlags
)
{
self
.
debug_flags
=
flags
;
}
fn
clear_kind
(
&
mut
self
kind
:
EntryKind
)
{
let
mut
per_doc_data
=
mem
:
:
replace
(
&
mut
self
.
per_doc_data
FastHashMap
:
:
default
(
)
)
;
for
(
&
_
doc_data
)
in
per_doc_data
.
iter_mut
(
)
{
let
entry_handles
=
mem
:
:
replace
(
doc_data
.
handles
.
select
(
kind
)
Vec
:
:
new
(
)
)
;
for
handle
in
entry_handles
{
let
entry
=
self
.
entries
.
free
(
handle
)
;
entry
.
evict
(
)
;
self
.
free
(
&
entry
)
;
}
}
self
.
pending_updates
.
note_clear
(
)
;
self
.
per_doc_data
=
per_doc_data
;
self
.
require_frame_build
=
true
;
}
fn
clear_standalone
(
&
mut
self
)
{
debug_assert
!
(
!
self
.
now
.
is_valid
(
)
)
;
self
.
clear_kind
(
EntryKind
:
:
Standalone
)
;
}
fn
clear_picture
(
&
mut
self
)
{
self
.
clear_kind
(
EntryKind
:
:
Picture
)
;
if
let
Some
(
ref
mut
picture_texture
)
=
self
.
picture_texture
{
if
let
Some
(
texture_id
)
=
picture_texture
.
reset
(
PICTURE_TEXTURE_ADD_SLICES
)
{
self
.
pending_updates
.
push_reset
(
texture_id
picture_texture
.
to_info
(
)
)
;
}
}
}
fn
clear_shared
(
&
mut
self
)
{
self
.
unset_doc_data
(
)
;
self
.
clear_kind
(
EntryKind
:
:
Shared
)
;
self
.
shared_textures
.
clear
(
&
mut
self
.
pending_updates
)
;
self
.
set_doc_data
(
)
;
}
pub
fn
clear_all
(
&
mut
self
)
{
self
.
clear_standalone
(
)
;
self
.
clear_picture
(
)
;
self
.
clear_shared
(
)
;
}
fn
set_doc_data
(
&
mut
self
)
{
let
document_id
=
self
.
now
.
document_id
(
)
;
self
.
doc_data
=
self
.
per_doc_data
.
remove
(
&
document_id
)
.
unwrap_or_else
(
|
|
PerDocumentData
:
:
new
(
)
)
;
}
fn
unset_doc_data
(
&
mut
self
)
{
self
.
per_doc_data
.
insert
(
self
.
now
.
document_id
(
)
mem
:
:
replace
(
&
mut
self
.
doc_data
PerDocumentData
:
:
new
(
)
)
)
;
}
pub
fn
prepare_for_frames
(
&
mut
self
time
:
SystemTime
)
{
self
.
maybe_reclaim_shared_memory
(
time
)
;
}
pub
fn
bookkeep_after_frames
(
&
mut
self
)
{
self
.
require_frame_build
=
false
;
}
pub
fn
requires_frame_build
(
&
self
)
-
>
bool
{
self
.
require_frame_build
}
pub
fn
begin_frame
(
&
mut
self
stamp
:
FrameStamp
)
{
debug_assert
!
(
!
self
.
now
.
is_valid
(
)
)
;
self
.
now
=
stamp
;
self
.
set_doc_data
(
)
;
self
.
maybe_do_periodic_gc
(
)
;
}
fn
maybe_reclaim_shared_memory
(
&
mut
self
time
:
SystemTime
)
{
debug_assert
!
(
!
self
.
now
.
is_valid
(
)
)
;
if
self
.
shared_textures
.
empty_region_bytes
(
)
>
=
RECLAIM_THRESHOLD_BYTES
{
self
.
reached_reclaim_threshold
.
get_or_insert
(
time
)
;
}
else
{
self
.
reached_reclaim_threshold
=
None
;
}
if
let
Some
(
t
)
=
self
.
reached_reclaim_threshold
{
let
dur
=
time
.
duration_since
(
t
)
.
unwrap_or
(
Duration
:
:
default
(
)
)
;
if
dur
>
=
Duration
:
:
from_secs
(
5
)
{
self
.
clear_shared
(
)
;
self
.
reached_reclaim_threshold
=
None
;
}
}
}
fn
maybe_do_periodic_gc
(
&
mut
self
)
{
debug_assert
!
(
self
.
now
.
is_valid
(
)
)
;
let
time_since_last_gc
=
self
.
now
.
time
(
)
.
duration_since
(
self
.
doc_data
.
last_shared_cache_expiration
.
time
(
)
)
.
unwrap_or
(
Duration
:
:
default
(
)
)
;
let
do_periodic_gc
=
time_since_last_gc
>
=
Duration
:
:
from_secs
(
5
)
&
&
self
.
shared_textures
.
size_in_bytes
(
)
>
=
RECLAIM_THRESHOLD_BYTES
*
2
;
if
do_periodic_gc
{
let
threshold
=
EvictionThresholdBuilder
:
:
new
(
self
.
now
)
.
max_frames
(
1
)
.
max_time_s
(
10
)
.
build
(
)
;
self
.
maybe_expire_old_shared_entries
(
threshold
)
;
}
}
pub
fn
end_frame
(
&
mut
self
texture_cache_profile
:
&
mut
TextureCacheProfileCounters
)
{
debug_assert
!
(
self
.
now
.
is_valid
(
)
)
;
let
threshold
=
self
.
default_eviction
(
)
;
self
.
expire_old_entries
(
EntryKind
:
:
Standalone
threshold
)
;
self
.
expire_old_entries
(
EntryKind
:
:
Picture
threshold
)
;
self
.
shared_textures
.
array_a8_linear
.
update_profile
(
&
mut
texture_cache_profile
.
pages_a8_linear
)
;
self
.
shared_textures
.
array_a16_linear
.
update_profile
(
&
mut
texture_cache_profile
.
pages_a16_linear
)
;
self
.
shared_textures
.
array_rgba8_linear
.
update_profile
(
&
mut
texture_cache_profile
.
pages_rgba8_linear
)
;
self
.
shared_textures
.
array_rgba8_nearest
.
update_profile
(
&
mut
texture_cache_profile
.
pages_rgba8_nearest
)
;
if
let
Some
(
ref
picture_texture
)
=
self
.
picture_texture
{
picture_texture
.
update_profile
(
&
mut
texture_cache_profile
.
pages_picture
)
;
}
self
.
unset_doc_data
(
)
;
self
.
now
=
FrameStamp
:
:
INVALID
;
}
pub
fn
request
(
&
mut
self
handle
:
&
TextureCacheHandle
gpu_cache
:
&
mut
GpuCache
)
-
>
bool
{
match
self
.
entries
.
get_opt_mut
(
handle
)
{
Some
(
entry
)
=
>
{
entry
.
last_access
=
self
.
now
;
entry
.
update_gpu_cache
(
gpu_cache
)
;
false
}
None
=
>
true
}
}
pub
fn
needs_upload
(
&
self
handle
:
&
TextureCacheHandle
)
-
>
bool
{
self
.
entries
.
get_opt
(
handle
)
.
is_none
(
)
}
pub
fn
max_texture_size
(
&
self
)
-
>
i32
{
self
.
max_texture_size
}
#
[
cfg
(
feature
=
"
replay
"
)
]
pub
fn
max_texture_layers
(
&
self
)
-
>
usize
{
self
.
max_texture_layers
}
#
[
cfg
(
feature
=
"
replay
"
)
]
pub
fn
picture_tile_size
(
&
self
)
-
>
Option
<
DeviceIntSize
>
{
self
.
picture_texture
.
as_ref
(
)
.
map
(
|
pt
|
pt
.
size
)
}
pub
fn
pending_updates
(
&
mut
self
)
-
>
TextureUpdateList
{
mem
:
:
replace
(
&
mut
self
.
pending_updates
TextureUpdateList
:
:
new
(
)
)
}
pub
fn
update
(
&
mut
self
handle
:
&
mut
TextureCacheHandle
descriptor
:
ImageDescriptor
filter
:
TextureFilter
data
:
Option
<
CachedImageData
>
user_data
:
[
f32
;
3
]
mut
dirty_rect
:
ImageDirtyRect
gpu_cache
:
&
mut
GpuCache
eviction_notice
:
Option
<
&
EvictionNotice
>
uv_rect_kind
:
UvRectKind
eviction
:
Eviction
)
{
debug_assert
!
(
self
.
now
.
is_valid
(
)
)
;
let
realloc
=
match
self
.
entries
.
get_opt
(
handle
)
{
Some
(
entry
)
=
>
{
entry
.
size
!
=
descriptor
.
size
|
|
entry
.
format
!
=
descriptor
.
format
}
None
=
>
{
true
}
}
;
if
realloc
{
let
params
=
CacheAllocParams
{
descriptor
filter
user_data
uv_rect_kind
}
;
self
.
allocate
(
&
params
handle
)
;
dirty_rect
=
DirtyRect
:
:
All
;
}
let
entry
=
self
.
entries
.
get_opt_mut
(
handle
)
.
expect
(
"
BUG
:
handle
must
be
valid
now
"
)
;
entry
.
eviction_notice
=
eviction_notice
.
cloned
(
)
;
entry
.
uv_rect_kind
=
uv_rect_kind
;
gpu_cache
.
invalidate
(
&
entry
.
uv_rect_handle
)
;
entry
.
update_gpu_cache
(
gpu_cache
)
;
entry
.
eviction
=
eviction
;
if
let
Some
(
data
)
=
data
{
let
(
layer_index
origin
)
=
entry
.
details
.
describe
(
)
;
let
op
=
TextureCacheUpdate
:
:
new_update
(
data
&
descriptor
origin
entry
.
size
entry
.
texture_id
layer_index
as
i32
&
dirty_rect
)
;
self
.
pending_updates
.
push_update
(
op
)
;
}
}
pub
fn
is_allocated
(
&
self
handle
:
&
TextureCacheHandle
)
-
>
bool
{
self
.
entries
.
get_opt
(
handle
)
.
is_some
(
)
}
pub
fn
get
(
&
self
handle
:
&
TextureCacheHandle
)
-
>
CacheItem
{
let
(
texture_id
layer_index
uv_rect
uv_rect_handle
)
=
self
.
get_cache_location
(
handle
)
;
CacheItem
{
uv_rect_handle
texture_id
:
TextureSource
:
:
TextureCache
(
texture_id
)
uv_rect
texture_layer
:
layer_index
as
i32
}
}
pub
fn
get_cache_location
(
&
self
handle
:
&
TextureCacheHandle
)
-
>
(
CacheTextureId
LayerIndex
DeviceIntRect
GpuCacheHandle
)
{
let
entry
=
self
.
entries
.
get_opt
(
handle
)
.
expect
(
"
BUG
:
was
dropped
from
cache
or
not
updated
!
"
)
;
debug_assert_eq
!
(
entry
.
last_access
self
.
now
)
;
let
(
layer_index
origin
)
=
entry
.
details
.
describe
(
)
;
(
entry
.
texture_id
layer_index
as
usize
DeviceIntRect
:
:
new
(
origin
entry
.
size
)
entry
.
uv_rect_handle
)
}
pub
fn
mark_unused
(
&
mut
self
handle
:
&
TextureCacheHandle
)
{
if
let
Some
(
entry
)
=
self
.
entries
.
get_opt_mut
(
handle
)
{
entry
.
last_access
=
FrameStamp
:
:
INVALID
;
entry
.
eviction
=
Eviction
:
:
Auto
;
}
}
fn
default_eviction
(
&
self
)
-
>
EvictionThreshold
{
EvictionThresholdBuilder
:
:
new
(
self
.
now
)
.
max_frames
(
200
)
.
max_time_s
(
3
)
.
scale_by_pressure
(
)
.
build
(
)
}
fn
expire_old_entries
(
&
mut
self
kind
:
EntryKind
threshold
:
EvictionThreshold
)
{
debug_assert
!
(
self
.
now
.
is_valid
(
)
)
;
for
i
in
(
0
.
.
self
.
doc_data
.
handles
.
select
(
kind
)
.
len
(
)
)
.
rev
(
)
{
let
evict
=
{
let
entry
=
self
.
entries
.
get
(
&
self
.
doc_data
.
handles
.
select
(
kind
)
[
i
]
)
;
match
entry
.
eviction
{
Eviction
:
:
Manual
=
>
false
Eviction
:
:
Auto
=
>
threshold
.
should_evict
(
entry
.
last_access
)
Eviction
:
:
Eager
=
>
{
let
mut
entry_frame_id
=
entry
.
last_access
.
frame_id
(
)
;
entry_frame_id
.
advance
(
)
;
entry_frame_id
<
self
.
now
.
frame_id
(
)
}
}
}
;
if
evict
{
let
handle
=
self
.
doc_data
.
handles
.
select
(
kind
)
.
swap_remove
(
i
)
;
let
entry
=
self
.
entries
.
free
(
handle
)
;
entry
.
evict
(
)
;
self
.
free
(
&
entry
)
;
}
}
}
fn
maybe_expire_old_shared_entries
(
&
mut
self
threshold
:
EvictionThreshold
)
-
>
bool
{
debug_assert
!
(
self
.
now
.
is_valid
(
)
)
;
let
old_len
=
self
.
doc_data
.
handles
.
shared
.
len
(
)
;
if
self
.
doc_data
.
last_shared_cache_expiration
.
frame_id
(
)
<
self
.
now
.
frame_id
(
)
{
self
.
expire_old_entries
(
EntryKind
:
:
Shared
threshold
)
;
self
.
doc_data
.
last_shared_cache_expiration
=
self
.
now
;
}
self
.
doc_data
.
handles
.
shared
.
len
(
)
!
=
old_len
}
fn
free
(
&
mut
self
entry
:
&
CacheEntry
)
{
match
entry
.
details
{
EntryDetails
:
:
Picture
{
layer_index
}
=
>
{
let
picture_texture
=
self
.
picture_texture
.
as_mut
(
)
.
expect
(
"
Picture
caching
is
expecte
to
be
ON
"
)
;
picture_texture
.
slices
[
layer_index
]
.
uv_rect_handle
=
None
;
if
self
.
debug_flags
.
contains
(
DebugFlags
:
:
TEXTURE_CACHE_DBG
|
DebugFlags
:
:
TEXTURE_CACHE_DBG_CLEAR_EVICTED
)
{
self
.
pending_updates
.
push_debug_clear
(
entry
.
texture_id
DeviceIntPoint
:
:
zero
(
)
picture_texture
.
size
.
width
picture_texture
.
size
.
height
layer_index
)
;
}
}
EntryDetails
:
:
Standalone
=
>
{
self
.
pending_updates
.
push_free
(
entry
.
texture_id
)
;
}
EntryDetails
:
:
Cache
{
origin
layer_index
}
=
>
{
let
texture_array
=
self
.
shared_textures
.
select
(
entry
.
format
entry
.
filter
)
;
let
region
=
&
mut
texture_array
.
regions
[
layer_index
]
;
if
self
.
debug_flags
.
contains
(
DebugFlags
:
:
TEXTURE_CACHE_DBG
|
DebugFlags
:
:
TEXTURE_CACHE_DBG_CLEAR_EVICTED
)
{
self
.
pending_updates
.
push_debug_clear
(
entry
.
texture_id
origin
region
.
slab_size
.
width
region
.
slab_size
.
height
layer_index
)
;
}
region
.
free
(
origin
&
mut
texture_array
.
empty_regions
)
;
}
}
}
fn
allocate_from_shared_cache
(
&
mut
self
params
:
&
CacheAllocParams
)
-
>
Option
<
CacheEntry
>
{
let
texture_array
=
self
.
shared_textures
.
select
(
params
.
descriptor
.
format
params
.
filter
)
;
if
texture_array
.
texture_id
.
is_none
(
)
{
assert
!
(
texture_array
.
regions
.
is_empty
(
)
)
;
let
texture_id
=
self
.
next_id
;
self
.
next_id
.
0
+
=
1
;
let
info
=
TextureCacheAllocInfo
{
width
:
TEXTURE_REGION_DIMENSIONS
height
:
TEXTURE_REGION_DIMENSIONS
format
:
params
.
descriptor
.
format
filter
:
texture_array
.
filter
layer_count
:
1
is_shared_cache
:
true
}
;
self
.
pending_updates
.
push_alloc
(
texture_id
info
)
;
texture_array
.
texture_id
=
Some
(
texture_id
)
;
texture_array
.
push_region
(
)
;
}
texture_array
.
alloc
(
params
self
.
now
)
}
pub
fn
is_allowed_in_shared_cache
(
&
self
filter
:
TextureFilter
descriptor
:
&
ImageDescriptor
)
-
>
bool
{
let
mut
allowed_in_shared_cache
=
true
;
if
descriptor
.
format
=
=
ImageFormat
:
:
RGBA8
{
allowed_in_shared_cache
=
false
;
}
if
filter
=
=
TextureFilter
:
:
Nearest
&
&
descriptor
.
format
!
=
ImageFormat
:
:
BGRA8
{
allowed_in_shared_cache
=
false
;
}
if
descriptor
.
size
.
width
>
TEXTURE_REGION_DIMENSIONS
|
|
descriptor
.
size
.
height
>
TEXTURE_REGION_DIMENSIONS
{
allowed_in_shared_cache
=
false
;
}
allowed_in_shared_cache
}
fn
allocate_standalone_entry
(
&
mut
self
params
:
&
CacheAllocParams
)
-
>
CacheEntry
{
let
texture_id
=
self
.
next_id
;
self
.
next_id
.
0
+
=
1
;
let
info
=
TextureCacheAllocInfo
{
width
:
params
.
descriptor
.
size
.
width
height
:
params
.
descriptor
.
size
.
height
format
:
params
.
descriptor
.
format
filter
:
params
.
filter
layer_count
:
1
is_shared_cache
:
false
}
;
self
.
pending_updates
.
push_alloc
(
texture_id
info
)
;
CacheEntry
:
:
new_standalone
(
texture_id
self
.
now
params
)
}
fn
allocate_cache_entry
(
&
mut
self
params
:
&
CacheAllocParams
)
-
>
CacheEntry
{
assert
!
(
params
.
descriptor
.
size
.
width
>
0
&
&
params
.
descriptor
.
size
.
height
>
0
)
;
if
!
self
.
is_allowed_in_shared_cache
(
params
.
filter
&
params
.
descriptor
)
{
return
self
.
allocate_standalone_entry
(
params
)
;
}
if
let
Some
(
entry
)
=
self
.
allocate_from_shared_cache
(
params
)
{
return
entry
;
}
let
num_regions
=
self
.
shared_textures
.
select
(
params
.
descriptor
.
format
params
.
filter
)
.
regions
.
len
(
)
;
let
threshold
=
if
num_regions
=
=
self
.
max_texture_layers
{
EvictionThresholdBuilder
:
:
new
(
self
.
now
)
.
max_frames
(
1
)
.
build
(
)
}
else
{
self
.
default_eviction
(
)
}
;
if
self
.
maybe_expire_old_shared_entries
(
threshold
)
{
if
let
Some
(
entry
)
=
self
.
allocate_from_shared_cache
(
params
)
{
return
entry
;
}
}
let
added_layer
=
{
let
texture_array
=
self
.
shared_textures
.
select
(
params
.
descriptor
.
format
params
.
filter
)
;
if
num_regions
<
self
.
max_texture_layers
as
usize
{
let
info
=
TextureCacheAllocInfo
{
width
:
TEXTURE_REGION_DIMENSIONS
height
:
TEXTURE_REGION_DIMENSIONS
format
:
params
.
descriptor
.
format
filter
:
texture_array
.
filter
layer_count
:
(
num_regions
+
1
)
as
i32
is_shared_cache
:
true
}
;
self
.
pending_updates
.
push_realloc
(
texture_array
.
texture_id
.
unwrap
(
)
info
)
;
texture_array
.
push_region
(
)
;
true
}
else
{
false
}
}
;
if
added_layer
{
self
.
allocate_from_shared_cache
(
params
)
.
expect
(
"
Allocation
should
succeed
after
adding
a
fresh
layer
"
)
}
else
{
self
.
allocate_standalone_entry
(
params
)
}
}
fn
upsert_entry
(
&
mut
self
cache_entry
:
CacheEntry
handle
:
&
mut
TextureCacheHandle
)
{
let
new_kind
=
cache_entry
.
details
.
kind
(
)
;
match
self
.
entries
.
upsert
(
handle
cache_entry
)
{
UpsertResult
:
:
Updated
(
old_entry
)
=
>
{
if
new_kind
!
=
old_entry
.
details
.
kind
(
)
{
let
(
from
to
)
=
match
new_kind
{
EntryKind
:
:
Standalone
=
>
(
&
mut
self
.
doc_data
.
handles
.
shared
&
mut
self
.
doc_data
.
handles
.
standalone
)
EntryKind
:
:
Picture
=
>
unreachable
!
(
)
EntryKind
:
:
Shared
=
>
(
&
mut
self
.
doc_data
.
handles
.
standalone
&
mut
self
.
doc_data
.
handles
.
shared
)
}
;
let
idx
=
from
.
iter
(
)
.
position
(
|
h
|
h
.
weak
(
)
=
=
*
handle
)
.
unwrap
(
)
;
to
.
push
(
from
.
remove
(
idx
)
)
;
}
self
.
free
(
&
old_entry
)
;
}
UpsertResult
:
:
Inserted
(
new_handle
)
=
>
{
*
handle
=
new_handle
.
weak
(
)
;
self
.
doc_data
.
handles
.
select
(
new_kind
)
.
push
(
new_handle
)
;
}
}
}
fn
allocate
(
&
mut
self
params
:
&
CacheAllocParams
handle
:
&
mut
TextureCacheHandle
)
{
debug_assert
!
(
self
.
now
.
is_valid
(
)
)
;
let
new_cache_entry
=
self
.
allocate_cache_entry
(
params
)
;
self
.
upsert_entry
(
new_cache_entry
handle
)
}
pub
fn
update_picture_cache
(
&
mut
self
handle
:
&
mut
TextureCacheHandle
gpu_cache
:
&
mut
GpuCache
)
{
debug_assert
!
(
self
.
now
.
is_valid
(
)
)
;
if
self
.
entries
.
get_opt
(
handle
)
.
is_none
(
)
{
let
cache_entry
=
{
let
picture_texture
=
self
.
picture_texture
.
as_mut
(
)
.
expect
(
"
Picture
caching
is
expecte
to
be
ON
"
)
;
let
layer_index
=
match
picture_texture
.
find_free
(
)
{
Some
(
index
)
=
>
index
None
=
>
{
let
index
=
picture_texture
.
grow
(
PICTURE_TEXTURE_ADD_SLICES
)
;
let
info
=
picture_texture
.
to_info
(
)
;
self
.
pending_updates
.
push_realloc
(
picture_texture
.
texture_id
info
)
;
index
}
}
;
picture_texture
.
occupy
(
layer_index
self
.
now
)
}
;
self
.
upsert_entry
(
cache_entry
handle
)
}
self
.
entries
.
get_opt_mut
(
handle
)
.
expect
(
"
BUG
:
handle
must
be
valid
now
"
)
.
update_gpu_cache
(
gpu_cache
)
;
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
#
[
derive
(
Copy
Clone
PartialEq
)
]
struct
SlabSize
{
width
:
i32
height
:
i32
}
impl
SlabSize
{
fn
new
(
size
:
DeviceIntSize
)
-
>
Self
{
let
x_size
=
quantize_dimension
(
size
.
width
)
;
let
y_size
=
quantize_dimension
(
size
.
height
)
;
assert
!
(
x_size
>
0
&
&
x_size
<
=
TEXTURE_REGION_DIMENSIONS
)
;
assert
!
(
y_size
>
0
&
&
y_size
<
=
TEXTURE_REGION_DIMENSIONS
)
;
let
(
width
height
)
=
match
(
x_size
y_size
)
{
(
512
256
)
=
>
(
512
256
)
(
512
128
)
=
>
(
512
128
)
(
512
64
)
=
>
(
512
64
)
(
256
512
)
=
>
(
256
512
)
(
128
512
)
=
>
(
128
512
)
(
64
512
)
=
>
(
64
512
)
(
x_size
y_size
)
=
>
{
let
square_size
=
cmp
:
:
max
(
x_size
y_size
)
;
(
square_size
square_size
)
}
}
;
SlabSize
{
width
height
}
}
fn
invalid
(
)
-
>
SlabSize
{
SlabSize
{
width
:
0
height
:
0
}
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
struct
TextureLocation
(
u8
u8
)
;
impl
TextureLocation
{
fn
new
(
x
:
i32
y
:
i32
)
-
>
Self
{
debug_assert
!
(
x
>
=
0
&
&
y
>
=
0
&
&
x
<
0x100
&
&
y
<
0x100
)
;
TextureLocation
(
x
as
u8
y
as
u8
)
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
struct
TextureRegion
{
layer_index
:
usize
slab_size
:
SlabSize
free_slots
:
Vec
<
TextureLocation
>
total_slot_count
:
usize
}
impl
TextureRegion
{
fn
new
(
layer_index
:
usize
)
-
>
Self
{
TextureRegion
{
layer_index
slab_size
:
SlabSize
:
:
invalid
(
)
free_slots
:
Vec
:
:
new
(
)
total_slot_count
:
0
}
}
fn
init
(
&
mut
self
slab_size
:
SlabSize
empty_regions
:
&
mut
usize
)
{
debug_assert
!
(
self
.
slab_size
=
=
SlabSize
:
:
invalid
(
)
)
;
debug_assert
!
(
self
.
free_slots
.
is_empty
(
)
)
;
self
.
slab_size
=
slab_size
;
let
slots_per_x_axis
=
TEXTURE_REGION_DIMENSIONS
/
self
.
slab_size
.
width
;
let
slots_per_y_axis
=
TEXTURE_REGION_DIMENSIONS
/
self
.
slab_size
.
height
;
for
y
in
0
.
.
slots_per_y_axis
{
for
x
in
0
.
.
slots_per_x_axis
{
self
.
free_slots
.
push
(
TextureLocation
:
:
new
(
x
y
)
)
;
}
}
self
.
total_slot_count
=
self
.
free_slots
.
len
(
)
;
*
empty_regions
-
=
1
;
}
fn
deinit
(
&
mut
self
empty_regions
:
&
mut
usize
)
{
self
.
slab_size
=
SlabSize
:
:
invalid
(
)
;
self
.
free_slots
.
clear
(
)
;
self
.
total_slot_count
=
0
;
*
empty_regions
+
=
1
;
}
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
slab_size
=
=
SlabSize
:
:
invalid
(
)
}
fn
alloc
(
&
mut
self
)
-
>
Option
<
DeviceIntPoint
>
{
debug_assert
!
(
self
.
slab_size
!
=
SlabSize
:
:
invalid
(
)
)
;
self
.
free_slots
.
pop
(
)
.
map
(
|
location
|
{
DeviceIntPoint
:
:
new
(
self
.
slab_size
.
width
*
location
.
0
as
i32
self
.
slab_size
.
height
*
location
.
1
as
i32
)
}
)
}
fn
free
(
&
mut
self
point
:
DeviceIntPoint
empty_regions
:
&
mut
usize
)
{
let
x
=
point
.
x
/
self
.
slab_size
.
width
;
let
y
=
point
.
y
/
self
.
slab_size
.
height
;
self
.
free_slots
.
push
(
TextureLocation
:
:
new
(
x
y
)
)
;
if
self
.
free_slots
.
len
(
)
=
=
self
.
total_slot_count
{
self
.
deinit
(
empty_regions
)
;
}
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
struct
TextureArray
{
filter
:
TextureFilter
format
:
ImageFormat
regions
:
Vec
<
TextureRegion
>
empty_regions
:
usize
texture_id
:
Option
<
CacheTextureId
>
}
impl
TextureArray
{
fn
new
(
format
:
ImageFormat
filter
:
TextureFilter
)
-
>
Self
{
TextureArray
{
format
filter
regions
:
Vec
:
:
new
(
)
empty_regions
:
0
texture_id
:
None
}
}
fn
size_in_bytes
(
&
self
)
-
>
usize
{
let
bpp
=
self
.
format
.
bytes_per_pixel
(
)
as
usize
;
self
.
regions
.
len
(
)
*
TEXTURE_REGION_PIXELS
*
bpp
}
fn
empty_region_bytes
(
&
self
)
-
>
usize
{
let
bpp
=
self
.
format
.
bytes_per_pixel
(
)
as
usize
;
self
.
empty_regions
*
TEXTURE_REGION_PIXELS
*
bpp
}
fn
clear
(
&
mut
self
updates
:
&
mut
TextureUpdateList
)
{
self
.
regions
.
clear
(
)
;
self
.
empty_regions
=
0
;
if
let
Some
(
id
)
=
self
.
texture_id
.
take
(
)
{
updates
.
push_free
(
id
)
;
}
}
fn
update_profile
(
&
self
counter
:
&
mut
ResourceProfileCounter
)
{
counter
.
set
(
self
.
regions
.
len
(
)
self
.
size_in_bytes
(
)
)
;
}
fn
push_region
(
&
mut
self
)
{
let
index
=
self
.
regions
.
len
(
)
;
self
.
regions
.
push
(
TextureRegion
:
:
new
(
index
)
)
;
self
.
empty_regions
+
=
1
;
assert
!
(
self
.
empty_regions
<
=
self
.
regions
.
len
(
)
)
;
}
fn
alloc
(
&
mut
self
params
:
&
CacheAllocParams
now
:
FrameStamp
)
-
>
Option
<
CacheEntry
>
{
let
slab_size
=
SlabSize
:
:
new
(
params
.
descriptor
.
size
)
;
let
mut
empty_region_index
=
None
;
let
mut
entry_details
=
None
;
for
(
i
region
)
in
self
.
regions
.
iter_mut
(
)
.
enumerate
(
)
{
if
region
.
is_empty
(
)
{
empty_region_index
=
Some
(
i
)
;
}
else
if
region
.
slab_size
=
=
slab_size
{
if
let
Some
(
location
)
=
region
.
alloc
(
)
{
entry_details
=
Some
(
EntryDetails
:
:
Cache
{
layer_index
:
region
.
layer_index
origin
:
location
}
)
;
break
;
}
}
}
if
entry_details
.
is_none
(
)
{
if
let
Some
(
empty_region_index
)
=
empty_region_index
{
let
region
=
&
mut
self
.
regions
[
empty_region_index
]
;
region
.
init
(
slab_size
&
mut
self
.
empty_regions
)
;
entry_details
=
region
.
alloc
(
)
.
map
(
|
location
|
{
EntryDetails
:
:
Cache
{
layer_index
:
region
.
layer_index
origin
:
location
}
}
)
;
}
}
entry_details
.
map
(
|
details
|
{
CacheEntry
{
size
:
params
.
descriptor
.
size
user_data
:
params
.
user_data
last_access
:
now
details
uv_rect_handle
:
GpuCacheHandle
:
:
new
(
)
format
:
self
.
format
filter
:
self
.
filter
texture_id
:
self
.
texture_id
.
unwrap
(
)
eviction_notice
:
None
uv_rect_kind
:
params
.
uv_rect_kind
eviction
:
Eviction
:
:
Auto
}
}
)
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
#
[
derive
(
Clone
Copy
Debug
)
]
struct
WholeTextureSlice
{
uv_rect_handle
:
Option
<
GpuCacheHandle
>
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
struct
WholeTextureArray
{
size
:
DeviceIntSize
filter
:
TextureFilter
format
:
ImageFormat
texture_id
:
CacheTextureId
slices
:
Vec
<
WholeTextureSlice
>
}
impl
WholeTextureArray
{
fn
to_info
(
&
self
)
-
>
TextureCacheAllocInfo
{
TextureCacheAllocInfo
{
width
:
self
.
size
.
width
height
:
self
.
size
.
height
format
:
self
.
format
filter
:
self
.
filter
layer_count
:
self
.
slices
.
len
(
)
as
i32
is_shared_cache
:
true
}
}
fn
size_in_bytes
(
&
self
)
-
>
usize
{
let
bpp
=
self
.
format
.
bytes_per_pixel
(
)
as
usize
;
self
.
slices
.
len
(
)
*
(
self
.
size
.
width
*
self
.
size
.
height
)
as
usize
*
bpp
}
fn
update_profile
(
&
self
counter
:
&
mut
ResourceProfileCounter
)
{
counter
.
set
(
self
.
slices
.
len
(
)
self
.
size_in_bytes
(
)
)
;
}
fn
find_free
(
&
self
)
-
>
Option
<
LayerIndex
>
{
self
.
slices
.
iter
(
)
.
position
(
|
slice
|
slice
.
uv_rect_handle
.
is_none
(
)
)
}
fn
grow
(
&
mut
self
count
:
usize
)
-
>
LayerIndex
{
let
index
=
self
.
slices
.
len
(
)
;
for
_
in
0
.
.
count
{
self
.
slices
.
push
(
WholeTextureSlice
{
uv_rect_handle
:
None
}
)
;
}
index
}
fn
cache_entry_impl
(
&
self
layer_index
:
usize
now
:
FrameStamp
uv_rect_handle
:
GpuCacheHandle
texture_id
:
CacheTextureId
)
-
>
CacheEntry
{
CacheEntry
{
size
:
self
.
size
user_data
:
[
0
.
0
;
3
]
last_access
:
now
details
:
EntryDetails
:
:
Picture
{
layer_index
}
uv_rect_handle
format
:
self
.
format
filter
:
self
.
filter
texture_id
eviction_notice
:
None
uv_rect_kind
:
UvRectKind
:
:
Rect
eviction
:
Eviction
:
:
Eager
}
}
fn
occupy
(
&
mut
self
layer_index
:
usize
now
:
FrameStamp
)
-
>
CacheEntry
{
let
uv_rect_handle
=
GpuCacheHandle
:
:
new
(
)
;
assert
!
(
self
.
slices
[
layer_index
]
.
uv_rect_handle
.
is_none
(
)
)
;
self
.
slices
[
layer_index
]
.
uv_rect_handle
=
Some
(
uv_rect_handle
)
;
self
.
cache_entry_impl
(
layer_index
now
uv_rect_handle
self
.
texture_id
)
}
fn
reset
(
&
mut
self
num_slices
:
usize
)
-
>
Option
<
CacheTextureId
>
{
if
self
.
slices
.
len
(
)
<
=
num_slices
{
None
}
else
{
self
.
slices
.
truncate
(
num_slices
)
;
Some
(
self
.
texture_id
)
}
}
}
impl
TextureCacheUpdate
{
fn
new_update
(
data
:
CachedImageData
descriptor
:
&
ImageDescriptor
origin
:
DeviceIntPoint
size
:
DeviceIntSize
texture_id
:
CacheTextureId
layer_index
:
i32
dirty_rect
:
&
ImageDirtyRect
)
-
>
TextureCacheUpdate
{
let
source
=
match
data
{
CachedImageData
:
:
Blob
=
>
{
panic
!
(
"
The
vector
image
should
have
been
rasterized
.
"
)
;
}
CachedImageData
:
:
External
(
ext_image
)
=
>
match
ext_image
.
image_type
{
ExternalImageType
:
:
TextureHandle
(
_
)
=
>
{
panic
!
(
"
External
texture
handle
should
not
go
through
texture_cache
.
"
)
;
}
ExternalImageType
:
:
Buffer
=
>
TextureUpdateSource
:
:
External
{
id
:
ext_image
.
id
channel_index
:
ext_image
.
channel_index
}
}
CachedImageData
:
:
Raw
(
bytes
)
=
>
{
let
finish
=
descriptor
.
offset
+
descriptor
.
size
.
width
*
descriptor
.
format
.
bytes_per_pixel
(
)
+
(
descriptor
.
size
.
height
-
1
)
*
descriptor
.
compute_stride
(
)
;
assert
!
(
bytes
.
len
(
)
>
=
finish
as
usize
)
;
TextureUpdateSource
:
:
Bytes
{
data
:
bytes
}
}
}
;
let
update_op
=
match
*
dirty_rect
{
DirtyRect
:
:
Partial
(
dirty
)
=
>
{
let
stride
=
descriptor
.
compute_stride
(
)
;
let
offset
=
descriptor
.
offset
+
dirty
.
origin
.
y
*
stride
+
dirty
.
origin
.
x
*
descriptor
.
format
.
bytes_per_pixel
(
)
;
TextureCacheUpdate
{
id
:
texture_id
rect
:
DeviceIntRect
:
:
new
(
DeviceIntPoint
:
:
new
(
origin
.
x
+
dirty
.
origin
.
x
origin
.
y
+
dirty
.
origin
.
y
)
DeviceIntSize
:
:
new
(
dirty
.
size
.
width
.
min
(
size
.
width
-
dirty
.
origin
.
x
)
dirty
.
size
.
height
.
min
(
size
.
height
-
dirty
.
origin
.
y
)
)
)
source
stride
:
Some
(
stride
)
offset
layer_index
}
}
DirtyRect
:
:
All
=
>
{
TextureCacheUpdate
{
id
:
texture_id
rect
:
DeviceIntRect
:
:
new
(
origin
size
)
source
stride
:
descriptor
.
stride
offset
:
descriptor
.
offset
layer_index
}
}
}
;
update_op
}
}
fn
quantize_dimension
(
size
:
i32
)
-
>
i32
{
match
size
{
0
=
>
unreachable
!
(
)
1
.
.
=
16
=
>
16
17
.
.
=
32
=
>
32
33
.
.
=
64
=
>
64
65
.
.
=
128
=
>
128
129
.
.
=
256
=
>
256
257
.
.
=
512
=
>
512
_
=
>
panic
!
(
"
Invalid
dimensions
for
cache
!
"
)
}
}
