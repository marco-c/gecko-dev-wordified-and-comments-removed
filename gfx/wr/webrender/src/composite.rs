use
api
:
:
ColorF
;
use
api
:
:
units
:
:
{
DeviceRect
DeviceIntSize
DeviceIntRect
DeviceIntPoint
}
;
use
crate
:
:
gpu_types
:
:
{
ZBufferId
ZBufferIdGenerator
}
;
use
crate
:
:
picture
:
:
{
ResolvedSurfaceTexture
SurfaceTextureDescriptor
}
;
#
[
derive
(
Debug
Clone
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
enum
NativeSurfaceOperationDetails
{
CreateSurface
{
size
:
DeviceIntSize
is_opaque
:
bool
}
DestroySurface
}
#
[
derive
(
Debug
Clone
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
NativeSurfaceOperation
{
pub
id
:
NativeSurfaceId
pub
details
:
NativeSurfaceOperationDetails
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
enum
CompositeTileSurface
{
Texture
{
surface
:
ResolvedSurfaceTexture
}
Color
{
color
:
ColorF
}
Clear
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
CompositeTile
{
pub
surface
:
CompositeTileSurface
pub
rect
:
DeviceRect
pub
clip_rect
:
DeviceRect
pub
dirty_rect
:
DeviceRect
pub
z_id
:
ZBufferId
}
pub
enum
CompositorConfig
{
Draw
{
max_partial_present_rects
:
usize
}
Native
{
max_update_rects
:
usize
compositor
:
Box
<
dyn
Compositor
>
}
}
impl
Default
for
CompositorConfig
{
fn
default
(
)
-
>
Self
{
CompositorConfig
:
:
Draw
{
max_partial_present_rects
:
0
}
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
pub
enum
CompositorKind
{
Draw
{
max_partial_present_rects
:
usize
}
Native
{
max_update_rects
:
usize
}
}
impl
Default
for
CompositorKind
{
fn
default
(
)
-
>
Self
{
CompositorKind
:
:
Draw
{
max_partial_present_rects
:
0
}
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
CompositeState
{
pub
opaque_tiles
:
Vec
<
CompositeTile
>
pub
alpha_tiles
:
Vec
<
CompositeTile
>
pub
clear_tiles
:
Vec
<
CompositeTile
>
pub
z_generator
:
ZBufferIdGenerator
pub
dirty_rects_are_valid
:
bool
pub
native_surface_updates
:
Vec
<
NativeSurfaceOperation
>
pub
compositor_kind
:
CompositorKind
pub
picture_caching_is_enabled
:
bool
}
impl
CompositeState
{
pub
fn
new
(
compositor_kind
:
CompositorKind
mut
picture_caching_is_enabled
:
bool
)
-
>
Self
{
if
let
CompositorKind
:
:
Native
{
.
.
}
=
compositor_kind
{
if
!
picture_caching_is_enabled
{
warn
!
(
"
Picture
caching
cannot
be
disabled
in
native
compositor
config
"
)
;
}
picture_caching_is_enabled
=
true
;
}
CompositeState
{
opaque_tiles
:
Vec
:
:
new
(
)
alpha_tiles
:
Vec
:
:
new
(
)
clear_tiles
:
Vec
:
:
new
(
)
z_generator
:
ZBufferIdGenerator
:
:
new
(
0
)
dirty_rects_are_valid
:
true
native_surface_updates
:
Vec
:
:
new
(
)
compositor_kind
picture_caching_is_enabled
}
}
pub
fn
create_surface
(
&
mut
self
id
:
NativeSurfaceId
size
:
DeviceIntSize
is_opaque
:
bool
)
-
>
SurfaceTextureDescriptor
{
self
.
native_surface_updates
.
push
(
NativeSurfaceOperation
{
id
details
:
NativeSurfaceOperationDetails
:
:
CreateSurface
{
size
is_opaque
}
}
)
;
SurfaceTextureDescriptor
:
:
NativeSurface
{
id
size
}
}
pub
fn
destroy_surface
(
&
mut
self
id
:
NativeSurfaceId
)
{
self
.
native_surface_updates
.
push
(
NativeSurfaceOperation
{
id
details
:
NativeSurfaceOperationDetails
:
:
DestroySurface
}
)
;
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Debug
Copy
Clone
Hash
Eq
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
NativeSurfaceId
(
pub
u64
)
;
#
[
repr
(
C
)
]
#
[
derive
(
Copy
Clone
)
]
pub
struct
NativeSurfaceInfo
{
pub
origin
:
DeviceIntPoint
pub
fbo_id
:
u32
}
pub
trait
Compositor
{
fn
create_surface
(
&
mut
self
id
:
NativeSurfaceId
size
:
DeviceIntSize
is_opaque
:
bool
)
;
fn
destroy_surface
(
&
mut
self
id
:
NativeSurfaceId
)
;
fn
bind
(
&
mut
self
id
:
NativeSurfaceId
dirty_rect
:
DeviceIntRect
)
-
>
NativeSurfaceInfo
;
fn
unbind
(
&
mut
self
)
;
fn
begin_frame
(
&
mut
self
)
;
fn
add_surface
(
&
mut
self
id
:
NativeSurfaceId
position
:
DeviceIntPoint
clip_rect
:
DeviceIntRect
)
;
fn
end_frame
(
&
mut
self
)
;
}
