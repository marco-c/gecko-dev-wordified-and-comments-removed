use
api
:
:
{
ExternalScrollId
PipelineId
PropertyBinding
PropertyBindingId
ReferenceFrameKind
ScrollClamping
ScrollLocation
}
;
use
api
:
:
{
TransformStyle
ScrollSensitivity
StickyOffsetBounds
SpatialTreeItemKey
}
;
use
api
:
:
units
:
:
*
;
use
crate
:
:
spatial_tree
:
:
{
CoordinateSystem
SpatialNodeIndex
TransformUpdateState
}
;
use
crate
:
:
spatial_tree
:
:
{
CoordinateSystemId
StaticCoordinateSystemId
}
;
use
euclid
:
:
{
Vector2D
SideOffsets2D
}
;
use
crate
:
:
scene
:
:
SceneProperties
;
use
crate
:
:
util
:
:
{
LayoutFastTransform
MatrixHelpers
ScaleOffset
TransformedRectKind
PointHelpers
}
;
#
[
derive
(
Copy
Clone
Eq
PartialEq
Hash
Debug
)
]
pub
enum
SpatialNodeUidKind
{
Root
InternalScrollFrame
{
pipeline_id
:
PipelineId
}
InternalReferenceFrame
{
pipeline_id
:
PipelineId
}
External
{
key
:
SpatialTreeItemKey
}
}
#
[
derive
(
Copy
Clone
Eq
PartialEq
Hash
Debug
)
]
pub
struct
SpatialNodeUid
{
pub
kind
:
SpatialNodeUidKind
}
impl
SpatialNodeUid
{
pub
fn
root
(
)
-
>
Self
{
SpatialNodeUid
{
kind
:
SpatialNodeUidKind
:
:
Root
}
}
pub
fn
root_scroll_frame
(
pipeline_id
:
PipelineId
)
-
>
Self
{
SpatialNodeUid
{
kind
:
SpatialNodeUidKind
:
:
InternalScrollFrame
{
pipeline_id
}
}
}
pub
fn
root_reference_frame
(
pipeline_id
:
PipelineId
)
-
>
Self
{
SpatialNodeUid
{
kind
:
SpatialNodeUidKind
:
:
InternalReferenceFrame
{
pipeline_id
}
}
}
pub
fn
external
(
key
:
SpatialTreeItemKey
)
-
>
Self
{
SpatialNodeUid
{
kind
:
SpatialNodeUidKind
:
:
External
{
key
}
}
}
}
pub
enum
SpatialNodeType
{
StickyFrame
(
StickyFrameInfo
)
ScrollFrame
(
ScrollFrameInfo
)
ReferenceFrame
(
ReferenceFrameInfo
)
}
pub
struct
SpatialNode
{
pub
viewport_transform
:
ScaleOffset
pub
content_transform
:
ScaleOffset
pub
snapping_transform
:
Option
<
ScaleOffset
>
pub
coordinate_system_id
:
CoordinateSystemId
pub
static_coordinate_system_id
:
StaticCoordinateSystemId
pub
transform_kind
:
TransformedRectKind
pub
pipeline_id
:
PipelineId
pub
parent
:
Option
<
SpatialNodeIndex
>
pub
children
:
Vec
<
SpatialNodeIndex
>
pub
node_type
:
SpatialNodeType
pub
invertible
:
bool
pub
is_async_zooming
:
bool
pub
is_ancestor_or_self_zooming
:
bool
}
fn
snap_offset
<
OffsetUnits
ScaleUnits
>
(
offset
:
Vector2D
<
f32
OffsetUnits
>
scale
:
Vector2D
<
f32
ScaleUnits
>
)
-
>
Vector2D
<
f32
OffsetUnits
>
{
let
world_offset
=
WorldPoint
:
:
new
(
offset
.
x
*
scale
.
x
offset
.
y
*
scale
.
y
)
;
let
snapped_world_offset
=
world_offset
.
snap
(
)
;
Vector2D
:
:
new
(
if
scale
.
x
!
=
0
.
0
{
snapped_world_offset
.
x
/
scale
.
x
}
else
{
offset
.
x
}
if
scale
.
y
!
=
0
.
0
{
snapped_world_offset
.
y
/
scale
.
y
}
else
{
offset
.
y
}
)
}
impl
SpatialNode
{
pub
fn
new
(
pipeline_id
:
PipelineId
parent_index
:
Option
<
SpatialNodeIndex
>
node_type
:
SpatialNodeType
static_coordinate_system_id
:
StaticCoordinateSystemId
)
-
>
Self
{
SpatialNode
{
viewport_transform
:
ScaleOffset
:
:
identity
(
)
content_transform
:
ScaleOffset
:
:
identity
(
)
snapping_transform
:
None
coordinate_system_id
:
CoordinateSystemId
(
0
)
static_coordinate_system_id
transform_kind
:
TransformedRectKind
:
:
AxisAligned
parent
:
parent_index
children
:
Vec
:
:
new
(
)
pipeline_id
node_type
invertible
:
true
is_async_zooming
:
false
is_ancestor_or_self_zooming
:
false
}
}
pub
fn
new_scroll_frame
(
pipeline_id
:
PipelineId
parent_index
:
SpatialNodeIndex
external_id
:
ExternalScrollId
frame_rect
:
&
LayoutRect
content_size
:
&
LayoutSize
scroll_sensitivity
:
ScrollSensitivity
frame_kind
:
ScrollFrameKind
external_scroll_offset
:
LayoutVector2D
static_coordinate_system_id
:
StaticCoordinateSystemId
)
-
>
Self
{
let
node_type
=
SpatialNodeType
:
:
ScrollFrame
(
ScrollFrameInfo
:
:
new
(
*
frame_rect
scroll_sensitivity
LayoutSize
:
:
new
(
(
content_size
.
width
-
frame_rect
.
width
(
)
)
.
max
(
0
.
0
)
(
content_size
.
height
-
frame_rect
.
height
(
)
)
.
max
(
0
.
0
)
)
external_id
frame_kind
external_scroll_offset
)
)
;
Self
:
:
new
(
pipeline_id
Some
(
parent_index
)
node_type
static_coordinate_system_id
)
}
pub
fn
new_reference_frame
(
parent_index
:
Option
<
SpatialNodeIndex
>
transform_style
:
TransformStyle
source_transform
:
PropertyBinding
<
LayoutTransform
>
kind
:
ReferenceFrameKind
origin_in_parent_reference_frame
:
LayoutVector2D
pipeline_id
:
PipelineId
static_coordinate_system_id
:
StaticCoordinateSystemId
)
-
>
Self
{
let
info
=
ReferenceFrameInfo
{
transform_style
source_transform
kind
origin_in_parent_reference_frame
invertible
:
true
}
;
Self
:
:
new
(
pipeline_id
parent_index
SpatialNodeType
:
:
ReferenceFrame
(
info
)
static_coordinate_system_id
)
}
pub
fn
new_sticky_frame
(
parent_index
:
SpatialNodeIndex
sticky_frame_info
:
StickyFrameInfo
pipeline_id
:
PipelineId
static_coordinate_system_id
:
StaticCoordinateSystemId
)
-
>
Self
{
Self
:
:
new
(
pipeline_id
Some
(
parent_index
)
SpatialNodeType
:
:
StickyFrame
(
sticky_frame_info
)
static_coordinate_system_id
)
}
pub
fn
add_child
(
&
mut
self
child
:
SpatialNodeIndex
)
{
self
.
children
.
push
(
child
)
;
}
pub
fn
apply_old_scrolling_state
(
&
mut
self
old_scroll_info
:
&
ScrollFrameInfo
)
{
match
self
.
node_type
{
SpatialNodeType
:
:
ScrollFrame
(
ref
mut
scrolling
)
=
>
{
*
scrolling
=
scrolling
.
combine_with_old_scroll_info
(
old_scroll_info
)
;
}
_
if
old_scroll_info
.
offset
!
=
LayoutVector2D
:
:
zero
(
)
=
>
{
warn
!
(
"
Tried
to
scroll
a
non
-
scroll
node
.
"
)
}
_
=
>
{
}
}
}
pub
fn
set_scroll_origin
(
&
mut
self
origin
:
&
LayoutPoint
clamp
:
ScrollClamping
)
-
>
bool
{
let
scrolling
=
match
self
.
node_type
{
SpatialNodeType
:
:
ScrollFrame
(
ref
mut
scrolling
)
=
>
scrolling
_
=
>
{
warn
!
(
"
Tried
to
scroll
a
non
-
scroll
node
.
"
)
;
return
false
;
}
}
;
let
normalized_offset
=
match
clamp
{
ScrollClamping
:
:
ToContentBounds
=
>
{
let
scrollable_size
=
scrolling
.
scrollable_size
;
let
scrollable_width
=
scrollable_size
.
width
;
let
scrollable_height
=
scrollable_size
.
height
;
if
scrollable_height
<
=
0
.
&
&
scrollable_width
<
=
0
.
{
return
false
;
}
let
origin
=
LayoutPoint
:
:
new
(
origin
.
x
.
max
(
0
.
0
)
origin
.
y
.
max
(
0
.
0
)
)
;
LayoutVector2D
:
:
new
(
(
-
origin
.
x
)
.
max
(
-
scrollable_width
)
.
min
(
0
.
0
)
(
-
origin
.
y
)
.
max
(
-
scrollable_height
)
.
min
(
0
.
0
)
)
}
ScrollClamping
:
:
NoClamping
=
>
LayoutPoint
:
:
zero
(
)
-
*
origin
}
;
let
new_offset
=
normalized_offset
-
scrolling
.
external_scroll_offset
;
if
new_offset
=
=
scrolling
.
offset
{
return
false
;
}
scrolling
.
offset
=
new_offset
;
true
}
pub
fn
mark_uninvertible
(
&
mut
self
state
:
&
TransformUpdateState
)
{
self
.
invertible
=
false
;
self
.
viewport_transform
=
ScaleOffset
:
:
identity
(
)
;
self
.
content_transform
=
ScaleOffset
:
:
identity
(
)
;
self
.
coordinate_system_id
=
state
.
current_coordinate_system_id
;
}
pub
fn
update
(
&
mut
self
state_stack
:
&
[
TransformUpdateState
]
coord_systems
:
&
mut
Vec
<
CoordinateSystem
>
scene_properties
:
&
SceneProperties
)
{
let
state
=
state_stack
.
last
(
)
.
unwrap
(
)
;
if
!
state
.
invertible
{
self
.
mark_uninvertible
(
state
)
;
return
;
}
self
.
update_transform
(
state_stack
coord_systems
scene_properties
)
;
self
.
transform_kind
=
if
self
.
coordinate_system_id
.
0
=
=
0
{
TransformedRectKind
:
:
AxisAligned
}
else
{
TransformedRectKind
:
:
Complex
}
;
self
.
is_ancestor_or_self_zooming
=
self
.
is_async_zooming
|
state
.
is_ancestor_or_self_zooming
;
match
self
.
node_type
{
SpatialNodeType
:
:
ReferenceFrame
(
info
)
if
!
info
.
invertible
=
>
{
self
.
mark_uninvertible
(
state
)
;
}
_
=
>
self
.
invertible
=
true
}
}
pub
fn
update_transform
(
&
mut
self
state_stack
:
&
[
TransformUpdateState
]
coord_systems
:
&
mut
Vec
<
CoordinateSystem
>
scene_properties
:
&
SceneProperties
)
{
let
state
=
state_stack
.
last
(
)
.
unwrap
(
)
;
match
self
.
node_type
{
SpatialNodeType
:
:
ReferenceFrame
(
ref
mut
info
)
=
>
{
let
mut
cs_scale_offset
=
ScaleOffset
:
:
identity
(
)
;
let
mut
coordinate_system_id
=
state
.
current_coordinate_system_id
;
if
info
.
invertible
{
let
source_transform
=
{
let
source_transform
=
scene_properties
.
resolve_layout_transform
(
&
info
.
source_transform
)
;
if
let
ReferenceFrameKind
:
:
Transform
{
is_2d_scale_translation
:
true
.
.
}
=
info
.
kind
{
assert
!
(
source_transform
.
is_2d_scale_translation
(
)
"
Reference
frame
was
marked
as
only
having
2d
scale
or
translation
"
)
;
}
LayoutFastTransform
:
:
from
(
source_transform
)
}
;
let
source_transform
=
match
info
.
kind
{
ReferenceFrameKind
:
:
Perspective
{
scrolling_relative_to
:
Some
(
external_id
)
}
=
>
{
let
mut
scroll_offset
=
LayoutVector2D
:
:
zero
(
)
;
for
parent_state
in
state_stack
.
iter
(
)
.
rev
(
)
{
if
let
Some
(
parent_external_id
)
=
parent_state
.
external_id
{
if
parent_external_id
=
=
external_id
{
break
;
}
}
scroll_offset
+
=
parent_state
.
scroll_offset
;
}
source_transform
.
pre_translate
(
scroll_offset
)
.
then_translate
(
-
scroll_offset
)
}
ReferenceFrameKind
:
:
Perspective
{
scrolling_relative_to
:
None
}
|
ReferenceFrameKind
:
:
Transform
{
.
.
}
=
>
source_transform
}
;
let
resolved_transform
=
LayoutFastTransform
:
:
with_vector
(
info
.
origin_in_parent_reference_frame
)
.
pre_transform
(
&
source_transform
)
;
let
relative_transform
=
resolved_transform
.
then_translate
(
snap_offset
(
state
.
parent_accumulated_scroll_offset
state
.
coordinate_system_relative_scale_offset
.
scale
)
)
.
to_transform
(
)
.
with_destination
:
:
<
LayoutPixel
>
(
)
;
let
mut
reset_cs_id
=
match
info
.
transform_style
{
TransformStyle
:
:
Preserve3D
=
>
!
state
.
preserves_3d
TransformStyle
:
:
Flat
=
>
state
.
preserves_3d
}
;
if
!
reset_cs_id
{
match
ScaleOffset
:
:
from_transform
(
&
relative_transform
)
{
Some
(
ref
scale_offset
)
=
>
{
let
mut
maybe_snapped
=
scale_offset
.
clone
(
)
;
if
let
ReferenceFrameKind
:
:
Transform
{
should_snap
:
true
.
.
}
=
info
.
kind
{
maybe_snapped
.
offset
=
snap_offset
(
scale_offset
.
offset
state
.
coordinate_system_relative_scale_offset
.
scale
)
;
}
cs_scale_offset
=
state
.
coordinate_system_relative_scale_offset
.
accumulate
(
&
maybe_snapped
)
;
}
None
=
>
reset_cs_id
=
true
}
}
if
reset_cs_id
{
let
transform
=
relative_transform
.
then
(
&
state
.
coordinate_system_relative_scale_offset
.
to_transform
(
)
)
;
let
coord_system
=
{
let
parent_system
=
&
coord_systems
[
state
.
current_coordinate_system_id
.
0
as
usize
]
;
let
mut
cur_transform
=
transform
;
if
parent_system
.
should_flatten
{
cur_transform
.
flatten_z_output
(
)
;
}
let
world_transform
=
cur_transform
.
then
(
&
parent_system
.
world_transform
)
;
let
determinant
=
world_transform
.
determinant
(
)
;
info
.
invertible
=
determinant
!
=
0
.
0
&
&
!
determinant
.
is_nan
(
)
;
CoordinateSystem
{
transform
world_transform
should_flatten
:
match
(
info
.
transform_style
info
.
kind
)
{
(
TransformStyle
:
:
Flat
ReferenceFrameKind
:
:
Transform
{
.
.
}
)
=
>
true
(
_
_
)
=
>
false
}
parent
:
Some
(
state
.
current_coordinate_system_id
)
}
}
;
coordinate_system_id
=
CoordinateSystemId
(
coord_systems
.
len
(
)
as
u32
)
;
coord_systems
.
push
(
coord_system
)
;
}
}
self
.
coordinate_system_id
=
coordinate_system_id
;
self
.
viewport_transform
=
cs_scale_offset
;
self
.
content_transform
=
cs_scale_offset
;
self
.
invertible
=
info
.
invertible
;
}
_
=
>
{
let
sticky_offset
=
self
.
calculate_sticky_offset
(
&
state
.
nearest_scrolling_ancestor_offset
&
state
.
nearest_scrolling_ancestor_viewport
)
;
let
accumulated_offset
=
state
.
parent_accumulated_scroll_offset
+
sticky_offset
;
self
.
viewport_transform
=
state
.
coordinate_system_relative_scale_offset
.
offset
(
snap_offset
(
accumulated_offset
state
.
coordinate_system_relative_scale_offset
.
scale
)
.
to_untyped
(
)
)
;
let
added_offset
=
accumulated_offset
+
self
.
scroll_offset
(
)
;
self
.
content_transform
=
state
.
coordinate_system_relative_scale_offset
.
offset
(
snap_offset
(
added_offset
state
.
coordinate_system_relative_scale_offset
.
scale
)
.
to_untyped
(
)
)
;
if
let
SpatialNodeType
:
:
StickyFrame
(
ref
mut
info
)
=
self
.
node_type
{
info
.
current_offset
=
sticky_offset
;
}
self
.
coordinate_system_id
=
state
.
current_coordinate_system_id
;
}
}
}
fn
calculate_sticky_offset
(
&
self
viewport_scroll_offset
:
&
LayoutVector2D
viewport_rect
:
&
LayoutRect
)
-
>
LayoutVector2D
{
let
info
=
match
self
.
node_type
{
SpatialNodeType
:
:
StickyFrame
(
ref
info
)
=
>
info
_
=
>
return
LayoutVector2D
:
:
zero
(
)
}
;
if
info
.
margins
.
top
.
is_none
(
)
&
&
info
.
margins
.
bottom
.
is_none
(
)
&
&
info
.
margins
.
left
.
is_none
(
)
&
&
info
.
margins
.
right
.
is_none
(
)
{
return
LayoutVector2D
:
:
zero
(
)
;
}
let
mut
sticky_rect
=
info
.
frame_rect
.
translate
(
*
viewport_scroll_offset
)
;
let
mut
sticky_offset
=
LayoutVector2D
:
:
zero
(
)
;
if
let
Some
(
margin
)
=
info
.
margins
.
top
{
let
top_viewport_edge
=
viewport_rect
.
min
.
y
+
margin
;
if
sticky_rect
.
min
.
y
<
top_viewport_edge
{
sticky_offset
.
y
=
top_viewport_edge
-
sticky_rect
.
min
.
y
;
}
else
if
info
.
previously_applied_offset
.
y
>
0
.
0
&
&
sticky_rect
.
min
.
y
>
top_viewport_edge
{
sticky_offset
.
y
=
top_viewport_edge
-
sticky_rect
.
min
.
y
;
sticky_offset
.
y
=
sticky_offset
.
y
.
max
(
-
info
.
previously_applied_offset
.
y
)
;
}
}
if
sticky_offset
.
y
+
info
.
previously_applied_offset
.
y
<
=
0
.
0
{
if
let
Some
(
margin
)
=
info
.
margins
.
bottom
{
sticky_rect
.
min
.
y
+
=
sticky_offset
.
y
;
sticky_rect
.
max
.
y
+
=
sticky_offset
.
y
;
let
bottom_viewport_edge
=
viewport_rect
.
max
.
y
-
margin
;
if
sticky_rect
.
max
.
y
>
bottom_viewport_edge
{
sticky_offset
.
y
+
=
bottom_viewport_edge
-
sticky_rect
.
max
.
y
;
}
else
if
info
.
previously_applied_offset
.
y
<
0
.
0
&
&
sticky_rect
.
max
.
y
<
bottom_viewport_edge
{
sticky_offset
.
y
+
=
bottom_viewport_edge
-
sticky_rect
.
max
.
y
;
sticky_offset
.
y
=
sticky_offset
.
y
.
min
(
-
info
.
previously_applied_offset
.
y
)
;
}
}
}
if
let
Some
(
margin
)
=
info
.
margins
.
left
{
let
left_viewport_edge
=
viewport_rect
.
min
.
x
+
margin
;
if
sticky_rect
.
min
.
x
<
left_viewport_edge
{
sticky_offset
.
x
=
left_viewport_edge
-
sticky_rect
.
min
.
x
;
}
else
if
info
.
previously_applied_offset
.
x
>
0
.
0
&
&
sticky_rect
.
min
.
x
>
left_viewport_edge
{
sticky_offset
.
x
=
left_viewport_edge
-
sticky_rect
.
min
.
x
;
sticky_offset
.
x
=
sticky_offset
.
x
.
max
(
-
info
.
previously_applied_offset
.
x
)
;
}
}
if
sticky_offset
.
x
+
info
.
previously_applied_offset
.
x
<
=
0
.
0
{
if
let
Some
(
margin
)
=
info
.
margins
.
right
{
sticky_rect
.
min
.
x
+
=
sticky_offset
.
x
;
sticky_rect
.
max
.
x
+
=
sticky_offset
.
x
;
let
right_viewport_edge
=
viewport_rect
.
max
.
x
-
margin
;
if
sticky_rect
.
max
.
x
>
right_viewport_edge
{
sticky_offset
.
x
+
=
right_viewport_edge
-
sticky_rect
.
max
.
x
;
}
else
if
info
.
previously_applied_offset
.
x
<
0
.
0
&
&
sticky_rect
.
max
.
x
<
right_viewport_edge
{
sticky_offset
.
x
+
=
right_viewport_edge
-
sticky_rect
.
max
.
x
;
sticky_offset
.
x
=
sticky_offset
.
x
.
min
(
-
info
.
previously_applied_offset
.
x
)
;
}
}
}
let
clamp_adjusted
=
|
value
:
f32
adjust
:
f32
bounds
:
&
StickyOffsetBounds
|
{
(
value
+
adjust
)
.
max
(
bounds
.
min
)
.
min
(
bounds
.
max
)
-
adjust
}
;
sticky_offset
.
y
=
clamp_adjusted
(
sticky_offset
.
y
info
.
previously_applied_offset
.
y
&
info
.
vertical_offset_bounds
)
;
sticky_offset
.
x
=
clamp_adjusted
(
sticky_offset
.
x
info
.
previously_applied_offset
.
x
&
info
.
horizontal_offset_bounds
)
;
sticky_offset
}
pub
fn
prepare_state_for_children
(
&
self
state
:
&
mut
TransformUpdateState
)
{
state
.
current_coordinate_system_id
=
self
.
coordinate_system_id
;
state
.
is_ancestor_or_self_zooming
=
self
.
is_async_zooming
;
state
.
invertible
&
=
self
.
invertible
;
match
self
.
node_type
{
SpatialNodeType
:
:
StickyFrame
(
ref
info
)
=
>
{
state
.
parent_accumulated_scroll_offset
+
=
info
.
current_offset
;
state
.
nearest_scrolling_ancestor_offset
+
=
info
.
current_offset
;
state
.
preserves_3d
=
false
;
state
.
external_id
=
None
;
state
.
scroll_offset
=
info
.
current_offset
;
}
SpatialNodeType
:
:
ScrollFrame
(
ref
scrolling
)
=
>
{
state
.
parent_accumulated_scroll_offset
+
=
scrolling
.
offset
;
state
.
nearest_scrolling_ancestor_offset
=
scrolling
.
offset
;
state
.
nearest_scrolling_ancestor_viewport
=
scrolling
.
viewport_rect
;
state
.
preserves_3d
=
false
;
state
.
external_id
=
Some
(
scrolling
.
external_id
)
;
state
.
scroll_offset
=
scrolling
.
offset
+
scrolling
.
external_scroll_offset
;
}
SpatialNodeType
:
:
ReferenceFrame
(
ref
info
)
=
>
{
state
.
external_id
=
None
;
state
.
scroll_offset
=
LayoutVector2D
:
:
zero
(
)
;
state
.
preserves_3d
=
info
.
transform_style
=
=
TransformStyle
:
:
Preserve3D
;
state
.
parent_accumulated_scroll_offset
=
LayoutVector2D
:
:
zero
(
)
;
state
.
coordinate_system_relative_scale_offset
=
self
.
content_transform
;
let
translation
=
-
info
.
origin_in_parent_reference_frame
;
state
.
nearest_scrolling_ancestor_viewport
=
state
.
nearest_scrolling_ancestor_viewport
.
translate
(
translation
)
;
}
}
}
pub
fn
scroll
(
&
mut
self
scroll_location
:
ScrollLocation
)
-
>
bool
{
let
scrolling
=
match
self
.
node_type
{
SpatialNodeType
:
:
ScrollFrame
(
ref
mut
scrolling
)
=
>
scrolling
_
=
>
return
false
}
;
let
delta
=
match
scroll_location
{
ScrollLocation
:
:
Delta
(
delta
)
=
>
delta
ScrollLocation
:
:
Start
=
>
{
if
scrolling
.
offset
.
y
.
round
(
)
>
=
0
.
0
{
return
false
;
}
scrolling
.
offset
.
y
=
0
.
0
;
return
true
;
}
ScrollLocation
:
:
End
=
>
{
let
end_pos
=
-
scrolling
.
scrollable_size
.
height
;
if
scrolling
.
offset
.
y
.
round
(
)
<
=
end_pos
{
return
false
;
}
scrolling
.
offset
.
y
=
end_pos
;
return
true
;
}
}
;
let
scrollable_width
=
scrolling
.
scrollable_size
.
width
;
let
scrollable_height
=
scrolling
.
scrollable_size
.
height
;
let
original_layer_scroll_offset
=
scrolling
.
offset
;
if
scrollable_width
>
0
.
{
scrolling
.
offset
.
x
=
(
scrolling
.
offset
.
x
+
delta
.
x
)
.
min
(
0
.
0
)
.
max
(
-
scrollable_width
)
;
}
if
scrollable_height
>
0
.
{
scrolling
.
offset
.
y
=
(
scrolling
.
offset
.
y
+
delta
.
y
)
.
min
(
0
.
0
)
.
max
(
-
scrollable_height
)
;
}
scrolling
.
offset
!
=
original_layer_scroll_offset
}
pub
fn
scroll_offset
(
&
self
)
-
>
LayoutVector2D
{
match
self
.
node_type
{
SpatialNodeType
:
:
ScrollFrame
(
ref
scrolling
)
=
>
scrolling
.
offset
_
=
>
LayoutVector2D
:
:
zero
(
)
}
}
pub
fn
matches_external_id
(
&
self
external_id
:
ExternalScrollId
)
-
>
bool
{
match
self
.
node_type
{
SpatialNodeType
:
:
ScrollFrame
(
info
)
if
info
.
external_id
=
=
external_id
=
>
true
_
=
>
false
}
}
pub
fn
update_snapping
(
&
mut
self
parent
:
Option
<
&
SpatialNode
>
)
{
self
.
snapping_transform
=
None
;
let
parent_scale_offset
=
match
parent
{
Some
(
parent
)
=
>
{
match
parent
.
snapping_transform
{
Some
(
scale_offset
)
=
>
scale_offset
None
=
>
return
}
}
_
=
>
ScaleOffset
:
:
identity
(
)
}
;
let
scale_offset
=
match
self
.
node_type
{
SpatialNodeType
:
:
ReferenceFrame
(
ref
info
)
=
>
{
match
info
.
source_transform
{
PropertyBinding
:
:
Value
(
ref
value
)
=
>
{
match
ScaleOffset
:
:
from_transform
(
value
)
{
Some
(
scale_offset
)
=
>
{
let
origin_offset
=
info
.
origin_in_parent_reference_frame
;
ScaleOffset
:
:
from_offset
(
origin_offset
.
to_untyped
(
)
)
.
accumulate
(
&
scale_offset
)
}
None
=
>
return
}
}
PropertyBinding
:
:
Binding
(
.
.
)
=
>
{
let
origin_offset
=
info
.
origin_in_parent_reference_frame
;
ScaleOffset
:
:
from_offset
(
origin_offset
.
to_untyped
(
)
)
}
}
}
_
=
>
ScaleOffset
:
:
identity
(
)
}
;
self
.
snapping_transform
=
Some
(
parent_scale_offset
.
accumulate
(
&
scale_offset
)
)
;
}
pub
fn
is_transform_bound_to_property
(
&
self
id
:
PropertyBindingId
)
-
>
bool
{
if
let
SpatialNodeType
:
:
ReferenceFrame
(
ref
info
)
=
self
.
node_type
{
if
let
PropertyBinding
:
:
Binding
(
key
_
)
=
info
.
source_transform
{
id
=
=
key
.
id
}
else
{
false
}
}
else
{
false
}
}
}
#
[
derive
(
Copy
Clone
Debug
)
]
pub
enum
ScrollFrameKind
{
PipelineRoot
{
is_root_pipeline
:
bool
}
Explicit
}
#
[
derive
(
Copy
Clone
Debug
)
]
pub
struct
ScrollFrameInfo
{
pub
viewport_rect
:
LayoutRect
pub
scroll_sensitivity
:
ScrollSensitivity
pub
scrollable_size
:
LayoutSize
pub
external_id
:
ExternalScrollId
pub
frame_kind
:
ScrollFrameKind
pub
external_scroll_offset
:
LayoutVector2D
pub
offset
:
LayoutVector2D
}
impl
ScrollFrameInfo
{
pub
fn
new
(
viewport_rect
:
LayoutRect
scroll_sensitivity
:
ScrollSensitivity
scrollable_size
:
LayoutSize
external_id
:
ExternalScrollId
frame_kind
:
ScrollFrameKind
external_scroll_offset
:
LayoutVector2D
)
-
>
ScrollFrameInfo
{
ScrollFrameInfo
{
viewport_rect
offset
:
-
external_scroll_offset
scroll_sensitivity
scrollable_size
external_id
frame_kind
external_scroll_offset
}
}
pub
fn
sensitive_to_input_events
(
&
self
)
-
>
bool
{
match
self
.
scroll_sensitivity
{
ScrollSensitivity
:
:
ScriptAndInputEvents
=
>
true
ScrollSensitivity
:
:
Script
=
>
false
}
}
pub
fn
combine_with_old_scroll_info
(
self
old_scroll_info
:
&
ScrollFrameInfo
)
-
>
ScrollFrameInfo
{
ScrollFrameInfo
{
viewport_rect
:
self
.
viewport_rect
offset
:
old_scroll_info
.
offset
scroll_sensitivity
:
self
.
scroll_sensitivity
scrollable_size
:
self
.
scrollable_size
external_id
:
self
.
external_id
frame_kind
:
self
.
frame_kind
external_scroll_offset
:
self
.
external_scroll_offset
}
}
}
#
[
derive
(
Copy
Clone
Debug
)
]
pub
struct
ReferenceFrameInfo
{
pub
source_transform
:
PropertyBinding
<
LayoutTransform
>
pub
transform_style
:
TransformStyle
pub
kind
:
ReferenceFrameKind
pub
origin_in_parent_reference_frame
:
LayoutVector2D
pub
invertible
:
bool
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
StickyFrameInfo
{
pub
frame_rect
:
LayoutRect
pub
margins
:
SideOffsets2D
<
Option
<
f32
>
LayoutPixel
>
pub
vertical_offset_bounds
:
StickyOffsetBounds
pub
horizontal_offset_bounds
:
StickyOffsetBounds
pub
previously_applied_offset
:
LayoutVector2D
pub
current_offset
:
LayoutVector2D
}
impl
StickyFrameInfo
{
pub
fn
new
(
frame_rect
:
LayoutRect
margins
:
SideOffsets2D
<
Option
<
f32
>
LayoutPixel
>
vertical_offset_bounds
:
StickyOffsetBounds
horizontal_offset_bounds
:
StickyOffsetBounds
previously_applied_offset
:
LayoutVector2D
)
-
>
StickyFrameInfo
{
StickyFrameInfo
{
frame_rect
margins
vertical_offset_bounds
horizontal_offset_bounds
previously_applied_offset
current_offset
:
LayoutVector2D
:
:
zero
(
)
}
}
}
#
[
test
]
fn
test_cst_perspective_relative_scroll
(
)
{
use
crate
:
:
spatial_tree
:
:
SpatialTree
;
use
euclid
:
:
Angle
;
let
mut
cst
=
SpatialTree
:
:
new
(
)
;
let
pipeline_id
=
PipelineId
:
:
dummy
(
)
;
let
ext_scroll_id
=
ExternalScrollId
(
1
pipeline_id
)
;
let
transform
=
LayoutTransform
:
:
rotation
(
0
.
0
0
.
0
1
.
0
Angle
:
:
degrees
(
45
.
0
)
)
;
let
root
=
cst
.
add_reference_frame
(
cst
.
root_reference_frame_index
(
)
TransformStyle
:
:
Flat
PropertyBinding
:
:
Value
(
LayoutTransform
:
:
identity
(
)
)
ReferenceFrameKind
:
:
Transform
{
is_2d_scale_translation
:
false
should_snap
:
false
}
LayoutVector2D
:
:
zero
(
)
pipeline_id
SpatialNodeUid
:
:
external
(
SpatialTreeItemKey
:
:
new
(
0
0
)
)
)
;
let
scroll_frame_1
=
cst
.
add_scroll_frame
(
root
ext_scroll_id
pipeline_id
&
LayoutRect
:
:
from_size
(
LayoutSize
:
:
new
(
100
.
0
100
.
0
)
)
&
LayoutSize
:
:
new
(
100
.
0
500
.
0
)
ScrollSensitivity
:
:
Script
ScrollFrameKind
:
:
Explicit
LayoutVector2D
:
:
zero
(
)
SpatialNodeUid
:
:
external
(
SpatialTreeItemKey
:
:
new
(
0
1
)
)
)
;
let
scroll_frame_2
=
cst
.
add_scroll_frame
(
scroll_frame_1
ExternalScrollId
(
2
pipeline_id
)
pipeline_id
&
LayoutRect
:
:
from_size
(
LayoutSize
:
:
new
(
100
.
0
100
.
0
)
)
&
LayoutSize
:
:
new
(
100
.
0
500
.
0
)
ScrollSensitivity
:
:
Script
ScrollFrameKind
:
:
Explicit
LayoutVector2D
:
:
new
(
0
.
0
50
.
0
)
SpatialNodeUid
:
:
external
(
SpatialTreeItemKey
:
:
new
(
0
3
)
)
)
;
let
ref_frame
=
cst
.
add_reference_frame
(
scroll_frame_2
TransformStyle
:
:
Preserve3D
PropertyBinding
:
:
Value
(
transform
)
ReferenceFrameKind
:
:
Perspective
{
scrolling_relative_to
:
Some
(
ext_scroll_id
)
}
LayoutVector2D
:
:
zero
(
)
pipeline_id
SpatialNodeUid
:
:
external
(
SpatialTreeItemKey
:
:
new
(
0
4
)
)
)
;
cst
.
update_tree
(
&
SceneProperties
:
:
new
(
)
)
;
let
world_transform
=
cst
.
get_world_transform
(
ref_frame
)
.
into_transform
(
)
.
cast_unit
(
)
;
let
ref_transform
=
transform
.
then_translate
(
LayoutVector3D
:
:
new
(
0
.
0
-
50
.
0
0
.
0
)
)
;
assert
!
(
world_transform
.
approx_eq
(
&
ref_transform
)
)
;
}
