use
std
:
:
{
cmp
u32
usize
}
;
use
api
:
:
{
PremultipliedColorF
PropertyBinding
GradientStop
ExtendMode
}
;
use
api
:
:
{
BoxShadowClipMode
LineOrientation
BorderStyle
ClipMode
}
;
use
api
:
:
image_tiling
:
:
{
self
Repetition
}
;
use
api
:
:
units
:
:
*
;
use
euclid
:
:
Scale
;
use
euclid
:
:
approxeq
:
:
ApproxEq
;
use
smallvec
:
:
SmallVec
;
use
crate
:
:
border
:
:
{
get_max_scale_for_border
build_border_instances
}
;
use
crate
:
:
clip
:
:
{
ClipStore
}
;
use
crate
:
:
spatial_tree
:
:
{
ROOT_SPATIAL_NODE_INDEX
SpatialNodeIndex
}
;
use
crate
:
:
clip
:
:
{
ClipDataStore
ClipNodeFlags
ClipChainInstance
ClipItemKind
}
;
use
crate
:
:
frame_builder
:
:
{
FrameBuildingContext
FrameBuildingState
PictureContext
PictureState
}
;
use
crate
:
:
gpu_cache
:
:
{
GpuCacheHandle
GpuDataRequest
}
;
use
crate
:
:
gpu_types
:
:
{
BrushFlags
}
;
use
crate
:
:
internal_types
:
:
PlaneSplitAnchor
;
use
crate
:
:
picture
:
:
{
PicturePrimitive
TileCacheLogger
}
;
use
crate
:
:
picture
:
:
{
PrimitiveList
SurfaceIndex
}
;
use
crate
:
:
prim_store
:
:
gradient
:
:
{
GRADIENT_FP_STOPS
GradientCacheKey
GradientStopKey
}
;
use
crate
:
:
prim_store
:
:
gradient
:
:
LinearGradientPrimitive
;
use
crate
:
:
prim_store
:
:
line_dec
:
:
MAX_LINE_DECORATION_RESOLUTION
;
use
crate
:
:
prim_store
:
:
*
;
use
crate
:
:
render_backend
:
:
DataStores
;
use
crate
:
:
render_task_cache
:
:
{
RenderTaskCacheKeyKind
RenderTaskCacheEntryHandle
RenderTaskCacheKey
to_cache_size
}
;
use
crate
:
:
render_task
:
:
RenderTask
;
use
crate
:
:
segment
:
:
SegmentBuilder
;
use
crate
:
:
texture_cache
:
:
TEXTURE_REGION_DIMENSIONS
;
use
crate
:
:
util
:
:
{
clamp_to_scale_factor
pack_as_float
raster_rect_to_device_pixels
}
;
use
crate
:
:
visibility
:
:
{
PrimitiveVisibility
PrimitiveVisibilityIndex
compute_conservative_visible_rect
}
;
const
MAX_MASK_SIZE
:
f32
=
4096
.
0
;
const
MIN_BRUSH_SPLIT_AREA
:
f32
=
128
.
0
*
128
.
0
;
pub
fn
prepare_primitives
(
store
:
&
mut
PrimitiveStore
prim_list
:
&
mut
PrimitiveList
pic_context
:
&
PictureContext
pic_state
:
&
mut
PictureState
frame_context
:
&
FrameBuildingContext
frame_state
:
&
mut
FrameBuildingState
data_stores
:
&
mut
DataStores
scratch
:
&
mut
PrimitiveScratchBuffer
tile_cache_log
:
&
mut
TileCacheLogger
)
{
profile_scope
!
(
"
prepare_primitives
"
)
;
for
(
cluster_index
cluster
)
in
prim_list
.
clusters
.
iter_mut
(
)
.
enumerate
(
)
{
profile_scope
!
(
"
cluster
"
)
;
pic_state
.
map_local_to_pic
.
set_target_spatial_node
(
cluster
.
spatial_node_index
frame_context
.
spatial_tree
)
;
for
(
idx
prim_instance
)
in
(
&
mut
prim_list
.
prim_instances
[
cluster
.
prim_range
(
)
]
)
.
iter_mut
(
)
.
enumerate
(
)
{
let
prim_instance_index
=
cluster
.
prim_range
.
start
+
idx
;
if
prim_instance
.
visibility_info
=
=
PrimitiveVisibilityIndex
:
:
INVALID
{
continue
;
}
{
let
visibility_info
=
&
mut
scratch
.
prim_info
[
prim_instance
.
visibility_info
.
0
as
usize
]
;
let
dirty_region
=
frame_state
.
current_dirty_region
(
)
;
for
dirty_region
in
&
dirty_region
.
dirty_rects
{
if
visibility_info
.
clipped_world_rect
.
intersects
(
&
dirty_region
.
world_rect
)
{
visibility_info
.
visibility_mask
.
include
(
dirty_region
.
visibility_mask
)
;
}
}
if
visibility_info
.
visibility_mask
.
is_empty
(
)
{
prim_instance
.
visibility_info
=
PrimitiveVisibilityIndex
:
:
INVALID
;
continue
;
}
}
let
plane_split_anchor
=
PlaneSplitAnchor
:
:
new
(
cluster_index
prim_instance_index
)
;
if
prepare_prim_for_render
(
store
prim_instance
cluster
.
spatial_node_index
pic_context
pic_state
frame_context
frame_state
plane_split_anchor
data_stores
scratch
tile_cache_log
)
{
frame_state
.
profile_counters
.
visible_primitives
.
inc
(
)
;
}
}
}
}
fn
prepare_prim_for_render
(
store
:
&
mut
PrimitiveStore
prim_instance
:
&
mut
PrimitiveInstance
prim_spatial_node_index
:
SpatialNodeIndex
pic_context
:
&
PictureContext
pic_state
:
&
mut
PictureState
frame_context
:
&
FrameBuildingContext
frame_state
:
&
mut
FrameBuildingState
plane_split_anchor
:
PlaneSplitAnchor
data_stores
:
&
mut
DataStores
scratch
:
&
mut
PrimitiveScratchBuffer
tile_cache_log
:
&
mut
TileCacheLogger
)
-
>
bool
{
profile_scope
!
(
"
prepare_prim_for_render
"
)
;
let
pic_info
=
{
match
prim_instance
.
kind
{
PrimitiveInstanceKind
:
:
Picture
{
pic_index
.
.
}
=
>
{
let
pic
=
&
mut
store
.
pictures
[
pic_index
.
0
]
;
let
clipped_prim_bounding_rect
=
scratch
.
prim_info
[
prim_instance
.
visibility_info
.
0
as
usize
]
.
clipped_world_rect
;
match
pic
.
take_context
(
pic_index
clipped_prim_bounding_rect
pic_context
.
surface_spatial_node_index
pic_context
.
raster_spatial_node_index
pic_context
.
surface_index
&
pic_context
.
subpixel_mode
frame_state
frame_context
scratch
tile_cache_log
)
{
Some
(
info
)
=
>
Some
(
info
)
None
=
>
{
if
prim_instance
.
is_chased
(
)
{
println
!
(
"
\
tculled
for
carrying
an
invisible
composite
filter
"
)
;
}
prim_instance
.
visibility_info
=
PrimitiveVisibilityIndex
:
:
INVALID
;
return
false
;
}
}
}
PrimitiveInstanceKind
:
:
TextRun
{
.
.
}
|
PrimitiveInstanceKind
:
:
Rectangle
{
.
.
}
|
PrimitiveInstanceKind
:
:
LineDecoration
{
.
.
}
|
PrimitiveInstanceKind
:
:
NormalBorder
{
.
.
}
|
PrimitiveInstanceKind
:
:
ImageBorder
{
.
.
}
|
PrimitiveInstanceKind
:
:
YuvImage
{
.
.
}
|
PrimitiveInstanceKind
:
:
Image
{
.
.
}
|
PrimitiveInstanceKind
:
:
LinearGradient
{
.
.
}
|
PrimitiveInstanceKind
:
:
RadialGradient
{
.
.
}
|
PrimitiveInstanceKind
:
:
ConicGradient
{
.
.
}
|
PrimitiveInstanceKind
:
:
Clear
{
.
.
}
|
PrimitiveInstanceKind
:
:
Backdrop
{
.
.
}
=
>
{
None
}
}
}
;
let
is_passthrough
=
match
pic_info
{
Some
(
(
pic_context_for_children
mut
pic_state_for_children
mut
prim_list
)
)
=
>
{
let
is_passthrough
=
pic_context_for_children
.
is_passthrough
;
prepare_primitives
(
store
&
mut
prim_list
&
pic_context_for_children
&
mut
pic_state_for_children
frame_context
frame_state
data_stores
scratch
tile_cache_log
)
;
store
.
pictures
[
pic_context_for_children
.
pic_index
.
0
]
.
restore_context
(
pic_context
.
surface_index
prim_list
pic_context_for_children
pic_state_for_children
frame_state
)
;
is_passthrough
}
None
=
>
{
false
}
}
;
let
prim_rect
=
data_stores
.
get_local_prim_rect
(
prim_instance
store
)
;
if
!
is_passthrough
{
update_clip_task
(
prim_instance
&
prim_rect
.
origin
prim_spatial_node_index
pic_context
.
raster_spatial_node_index
pic_context
pic_state
frame_context
frame_state
store
data_stores
scratch
)
;
if
prim_instance
.
is_chased
(
)
{
println
!
(
"
\
tconsidered
visible
and
ready
with
local
pos
{
:
?
}
"
prim_rect
.
origin
)
;
}
}
#
[
cfg
(
debug_assertions
)
]
{
prim_instance
.
prepared_frame_id
=
frame_state
.
render_tasks
.
frame_id
(
)
;
}
prepare_interned_prim_for_render
(
store
prim_instance
prim_spatial_node_index
plane_split_anchor
pic_context
pic_state
frame_context
frame_state
data_stores
scratch
)
;
true
}
fn
prepare_interned_prim_for_render
(
store
:
&
mut
PrimitiveStore
prim_instance
:
&
mut
PrimitiveInstance
prim_spatial_node_index
:
SpatialNodeIndex
plane_split_anchor
:
PlaneSplitAnchor
pic_context
:
&
PictureContext
pic_state
:
&
mut
PictureState
frame_context
:
&
FrameBuildingContext
frame_state
:
&
mut
FrameBuildingState
data_stores
:
&
mut
DataStores
scratch
:
&
mut
PrimitiveScratchBuffer
)
{
let
is_chased
=
prim_instance
.
is_chased
(
)
;
let
device_pixel_scale
=
frame_state
.
surfaces
[
pic_context
.
surface_index
.
0
]
.
device_pixel_scale
;
match
&
mut
prim_instance
.
kind
{
PrimitiveInstanceKind
:
:
LineDecoration
{
data_handle
ref
mut
cache_handle
.
.
}
=
>
{
profile_scope
!
(
"
LineDecoration
"
)
;
let
prim_data
=
&
mut
data_stores
.
line_decoration
[
*
data_handle
]
;
let
common_data
=
&
mut
prim_data
.
common
;
let
line_dec_data
=
&
mut
prim_data
.
kind
;
line_dec_data
.
update
(
common_data
frame_state
)
;
if
is_chased
{
println
!
(
"
\
tline
decoration
key
=
{
:
?
}
"
line_dec_data
.
cache_key
)
;
}
if
let
Some
(
cache_key
)
=
line_dec_data
.
cache_key
.
as_ref
(
)
{
let
scale_factor
=
Scale
:
:
new
(
1
.
0
)
*
device_pixel_scale
;
let
mut
task_size
=
(
LayoutSize
:
:
from_au
(
cache_key
.
size
)
*
scale_factor
)
.
ceil
(
)
.
to_i32
(
)
;
if
task_size
.
width
>
MAX_LINE_DECORATION_RESOLUTION
as
i32
|
|
task_size
.
height
>
MAX_LINE_DECORATION_RESOLUTION
as
i32
{
let
max_extent
=
cmp
:
:
max
(
task_size
.
width
task_size
.
height
)
;
let
task_scale_factor
=
Scale
:
:
new
(
MAX_LINE_DECORATION_RESOLUTION
as
f32
/
max_extent
as
f32
)
;
task_size
=
(
LayoutSize
:
:
from_au
(
cache_key
.
size
)
*
scale_factor
*
task_scale_factor
)
.
ceil
(
)
.
to_i32
(
)
;
}
*
cache_handle
=
Some
(
frame_state
.
resource_cache
.
request_render_task
(
RenderTaskCacheKey
{
size
:
task_size
kind
:
RenderTaskCacheKeyKind
:
:
LineDecoration
(
cache_key
.
clone
(
)
)
}
frame_state
.
gpu_cache
frame_state
.
render_tasks
None
false
|
render_tasks
|
{
render_tasks
.
add
(
)
.
init
(
RenderTask
:
:
new_line_decoration
(
task_size
cache_key
.
style
cache_key
.
orientation
cache_key
.
wavy_line_thickness
.
to_f32_px
(
)
LayoutSize
:
:
from_au
(
cache_key
.
size
)
)
)
}
)
)
;
}
}
PrimitiveInstanceKind
:
:
TextRun
{
run_index
data_handle
.
.
}
=
>
{
profile_scope
!
(
"
TextRun
"
)
;
let
prim_data
=
&
mut
data_stores
.
text_run
[
*
data_handle
]
;
let
run
=
&
mut
store
.
text_runs
[
*
run_index
]
;
prim_data
.
common
.
may_need_repetition
=
false
;
let
transform
=
frame_context
.
spatial_tree
.
get_relative_transform
(
prim_spatial_node_index
pic_context
.
raster_spatial_node_index
)
.
into_fast_transform
(
)
;
let
prim_offset
=
prim_data
.
common
.
prim_rect
.
origin
.
to_vector
(
)
-
run
.
reference_frame_relative_offset
;
let
pic
=
&
store
.
pictures
[
pic_context
.
pic_index
.
0
]
;
let
raster_space
=
pic
.
get_raster_space
(
frame_context
.
spatial_tree
)
;
let
surface
=
&
frame_state
.
surfaces
[
pic_context
.
surface_index
.
0
]
;
let
prim_info
=
&
scratch
.
prim_info
[
prim_instance
.
visibility_info
.
0
as
usize
]
;
let
root_scaling_factor
=
match
pic
.
raster_config
{
Some
(
ref
raster_config
)
=
>
raster_config
.
root_scaling_factor
None
=
>
1
.
0
}
;
run
.
request_resources
(
prim_offset
prim_info
.
clip_chain
.
pic_clip_rect
&
prim_data
.
font
&
prim_data
.
glyphs
&
transform
.
to_transform
(
)
.
with_destination
:
:
<
_
>
(
)
surface
prim_spatial_node_index
raster_space
root_scaling_factor
&
pic_context
.
subpixel_mode
frame_state
.
resource_cache
frame_state
.
gpu_cache
frame_state
.
render_tasks
frame_context
.
spatial_tree
scratch
)
;
prim_data
.
update
(
frame_state
)
;
}
PrimitiveInstanceKind
:
:
Clear
{
data_handle
.
.
}
=
>
{
profile_scope
!
(
"
Clear
"
)
;
let
prim_data
=
&
mut
data_stores
.
prim
[
*
data_handle
]
;
prim_data
.
common
.
may_need_repetition
=
false
;
prim_data
.
update
(
frame_state
frame_context
.
scene_properties
)
;
}
PrimitiveInstanceKind
:
:
NormalBorder
{
data_handle
ref
mut
cache_handles
.
.
}
=
>
{
profile_scope
!
(
"
NormalBorder
"
)
;
let
prim_data
=
&
mut
data_stores
.
normal_border
[
*
data_handle
]
;
let
common_data
=
&
mut
prim_data
.
common
;
let
border_data
=
&
mut
prim_data
.
kind
;
common_data
.
may_need_repetition
=
matches
!
(
border_data
.
border
.
top
.
style
BorderStyle
:
:
Dotted
|
BorderStyle
:
:
Dashed
)
|
|
matches
!
(
border_data
.
border
.
right
.
style
BorderStyle
:
:
Dotted
|
BorderStyle
:
:
Dashed
)
|
|
matches
!
(
border_data
.
border
.
bottom
.
style
BorderStyle
:
:
Dotted
|
BorderStyle
:
:
Dashed
)
|
|
matches
!
(
border_data
.
border
.
left
.
style
BorderStyle
:
:
Dotted
|
BorderStyle
:
:
Dashed
)
;
border_data
.
update
(
common_data
frame_state
)
;
let
scale
=
frame_context
.
spatial_tree
.
get_world_transform
(
prim_spatial_node_index
)
.
scale_factors
(
)
;
let
scale_width
=
clamp_to_scale_factor
(
scale
.
0
false
)
;
let
scale_height
=
clamp_to_scale_factor
(
scale
.
1
false
)
;
let
world_scale
=
LayoutToWorldScale
:
:
new
(
scale_width
.
max
(
scale_height
)
)
;
let
mut
scale
=
world_scale
*
device_pixel_scale
;
let
max_scale
=
get_max_scale_for_border
(
border_data
)
;
scale
.
0
=
scale
.
0
.
min
(
max_scale
.
0
)
;
let
mut
handles
:
SmallVec
<
[
RenderTaskCacheEntryHandle
;
8
]
>
=
SmallVec
:
:
new
(
)
;
for
segment
in
&
border_data
.
border_segments
{
let
cache_size
=
to_cache_size
(
segment
.
local_task_size
&
mut
scale
)
;
let
cache_key
=
RenderTaskCacheKey
{
kind
:
RenderTaskCacheKeyKind
:
:
BorderSegment
(
segment
.
cache_key
.
clone
(
)
)
size
:
cache_size
}
;
handles
.
push
(
frame_state
.
resource_cache
.
request_render_task
(
cache_key
frame_state
.
gpu_cache
frame_state
.
render_tasks
None
false
|
render_tasks
|
{
render_tasks
.
add
(
)
.
init
(
RenderTask
:
:
new_border_segment
(
cache_size
build_border_instances
(
&
segment
.
cache_key
cache_size
&
border_data
.
border
scale
)
)
)
}
)
)
;
}
*
cache_handles
=
scratch
.
border_cache_handles
.
extend
(
handles
)
;
}
PrimitiveInstanceKind
:
:
ImageBorder
{
data_handle
.
.
}
=
>
{
profile_scope
!
(
"
ImageBorder
"
)
;
let
prim_data
=
&
mut
data_stores
.
image_border
[
*
data_handle
]
;
prim_data
.
kind
.
update
(
&
mut
prim_data
.
common
frame_state
)
;
}
PrimitiveInstanceKind
:
:
Rectangle
{
data_handle
segment_instance_index
color_binding_index
.
.
}
=
>
{
profile_scope
!
(
"
Rectangle
"
)
;
let
prim_data
=
&
mut
data_stores
.
prim
[
*
data_handle
]
;
prim_data
.
common
.
may_need_repetition
=
false
;
if
*
color_binding_index
!
=
ColorBindingIndex
:
:
INVALID
{
match
store
.
color_bindings
[
*
color_binding_index
]
{
PropertyBinding
:
:
Binding
(
.
.
)
=
>
{
let
gpu_cache_handle
=
if
*
segment_instance_index
=
=
SegmentInstanceIndex
:
:
INVALID
{
None
}
else
if
*
segment_instance_index
=
=
SegmentInstanceIndex
:
:
UNUSED
{
Some
(
&
prim_data
.
common
.
gpu_cache_handle
)
}
else
{
Some
(
&
scratch
.
segment_instances
[
*
segment_instance_index
]
.
gpu_cache_handle
)
}
;
if
let
Some
(
gpu_cache_handle
)
=
gpu_cache_handle
{
frame_state
.
gpu_cache
.
invalidate
(
gpu_cache_handle
)
;
}
}
PropertyBinding
:
:
Value
(
.
.
)
=
>
{
}
}
}
prim_data
.
update
(
frame_state
frame_context
.
scene_properties
)
;
write_segment
(
*
segment_instance_index
frame_state
&
mut
scratch
.
segments
&
mut
scratch
.
segment_instances
|
request
|
{
prim_data
.
kind
.
write_prim_gpu_blocks
(
request
frame_context
.
scene_properties
)
;
}
)
;
}
PrimitiveInstanceKind
:
:
YuvImage
{
data_handle
segment_instance_index
.
.
}
=
>
{
profile_scope
!
(
"
YuvImage
"
)
;
let
prim_data
=
&
mut
data_stores
.
yuv_image
[
*
data_handle
]
;
let
common_data
=
&
mut
prim_data
.
common
;
let
yuv_image_data
=
&
mut
prim_data
.
kind
;
common_data
.
may_need_repetition
=
false
;
yuv_image_data
.
update
(
common_data
frame_state
)
;
write_segment
(
*
segment_instance_index
frame_state
&
mut
scratch
.
segments
&
mut
scratch
.
segment_instances
|
request
|
{
yuv_image_data
.
write_prim_gpu_blocks
(
request
)
;
}
)
;
}
PrimitiveInstanceKind
:
:
Image
{
data_handle
image_instance_index
.
.
}
=
>
{
profile_scope
!
(
"
Image
"
)
;
let
prim_data
=
&
mut
data_stores
.
image
[
*
data_handle
]
;
let
common_data
=
&
mut
prim_data
.
common
;
let
image_data
=
&
mut
prim_data
.
kind
;
if
image_data
.
stretch_size
.
width
>
=
common_data
.
prim_rect
.
size
.
width
&
&
image_data
.
stretch_size
.
height
>
=
common_data
.
prim_rect
.
size
.
height
{
common_data
.
may_need_repetition
=
false
;
}
image_data
.
update
(
common_data
frame_state
)
;
let
image_instance
=
&
mut
store
.
images
[
*
image_instance_index
]
;
write_segment
(
image_instance
.
segment_instance_index
frame_state
&
mut
scratch
.
segments
&
mut
scratch
.
segment_instances
|
request
|
{
image_data
.
write_prim_gpu_blocks
(
request
)
;
}
)
;
}
PrimitiveInstanceKind
:
:
LinearGradient
{
data_handle
gradient_index
.
.
}
=
>
{
profile_scope
!
(
"
LinearGradient
"
)
;
let
prim_data
=
&
mut
data_stores
.
linear_grad
[
*
data_handle
]
;
let
gradient
=
&
mut
store
.
linear_gradients
[
*
gradient_index
]
;
prim_data
.
update
(
frame_state
)
;
if
prim_data
.
stretch_size
.
width
>
=
prim_data
.
common
.
prim_rect
.
size
.
width
&
&
prim_data
.
stretch_size
.
height
>
=
prim_data
.
common
.
prim_rect
.
size
.
height
{
prim_data
.
common
.
may_need_repetition
=
false
;
}
if
prim_data
.
supports_caching
{
let
gradient_size
=
(
prim_data
.
end_point
-
prim_data
.
start_point
)
.
to_size
(
)
;
let
(
size
orientation
prim_start_offset
prim_end_offset
)
=
if
prim_data
.
start_point
.
x
.
approx_eq
(
&
prim_data
.
end_point
.
x
)
{
let
prim_start_offset
=
-
prim_data
.
start_point
.
y
/
gradient_size
.
height
;
let
prim_end_offset
=
(
prim_data
.
common
.
prim_rect
.
size
.
height
-
prim_data
.
start_point
.
y
)
/
gradient_size
.
height
;
let
size
=
DeviceIntSize
:
:
new
(
16
TEXTURE_REGION_DIMENSIONS
)
;
(
size
LineOrientation
:
:
Vertical
prim_start_offset
prim_end_offset
)
}
else
{
let
prim_start_offset
=
-
prim_data
.
start_point
.
x
/
gradient_size
.
width
;
let
prim_end_offset
=
(
prim_data
.
common
.
prim_rect
.
size
.
width
-
prim_data
.
start_point
.
x
)
/
gradient_size
.
width
;
let
size
=
DeviceIntSize
:
:
new
(
TEXTURE_REGION_DIMENSIONS
16
)
;
(
size
LineOrientation
:
:
Horizontal
prim_start_offset
prim_end_offset
)
}
;
let
mut
stops
=
vec
!
[
GradientStopKey
:
:
empty
(
)
;
prim_data
.
stops
.
len
(
)
]
;
if
prim_data
.
reverse_stops
{
for
(
src
dest
)
in
prim_data
.
stops
.
iter
(
)
.
rev
(
)
.
zip
(
stops
.
iter_mut
(
)
)
{
let
stop
=
GradientStop
{
offset
:
1
.
0
-
src
.
offset
color
:
src
.
color
}
;
*
dest
=
stop
.
into
(
)
;
}
}
else
{
for
(
src
dest
)
in
prim_data
.
stops
.
iter
(
)
.
zip
(
stops
.
iter_mut
(
)
)
{
*
dest
=
(
*
src
)
.
into
(
)
;
}
}
gradient
.
cache_segments
.
clear
(
)
;
fn
emit_segments
(
start_offset
:
f32
end_offset
:
f32
gradient_offset_base
:
f32
prim_start_offset
:
f32
prim_end_offset
:
f32
prim_origin_in
:
LayoutPoint
prim_size_in
:
LayoutSize
task_size
:
DeviceIntSize
is_opaque
:
bool
stops
:
&
[
GradientStopKey
]
orientation
:
LineOrientation
frame_state
:
&
mut
FrameBuildingState
gradient
:
&
mut
LinearGradientPrimitive
)
{
let
mut
first_stop
=
0
;
while
first_stop
<
stops
.
len
(
)
-
1
{
if
stops
[
first_stop
]
.
offset
>
end_offset
{
return
;
}
let
mut
last_stop
=
first_stop
;
let
mut
hard_stop
=
false
;
while
last_stop
<
stops
.
len
(
)
-
1
&
&
last_stop
-
first_stop
+
1
<
GRADIENT_FP_STOPS
{
if
stops
[
last_stop
+
1
]
.
offset
=
=
stops
[
last_stop
]
.
offset
{
hard_stop
=
true
;
break
;
}
last_stop
=
last_stop
+
1
;
}
let
num_stops
=
last_stop
-
first_stop
+
1
;
if
num_stops
=
=
0
{
first_stop
=
last_stop
+
1
;
continue
;
}
if
stops
[
last_stop
]
.
offset
<
start_offset
{
first_stop
=
if
hard_stop
{
last_stop
+
1
}
else
{
last_stop
}
;
continue
;
}
let
segment_start_point
=
start_offset
.
max
(
stops
[
first_stop
]
.
offset
)
;
let
segment_end_point
=
end_offset
.
min
(
stops
[
last_stop
]
.
offset
)
;
let
mut
segment_stops
=
[
GradientStopKey
:
:
empty
(
)
;
GRADIENT_FP_STOPS
]
;
for
i
in
0
.
.
num_stops
{
segment_stops
[
i
]
=
stops
[
first_stop
+
i
]
;
}
let
cache_key
=
GradientCacheKey
{
orientation
start_stop_point
:
VectorKey
{
x
:
segment_start_point
y
:
segment_end_point
}
stops
:
segment_stops
}
;
let
mut
prim_origin
=
prim_origin_in
;
let
mut
prim_size
=
prim_size_in
;
let
inv_length
=
1
.
0
/
(
prim_end_offset
-
prim_start_offset
)
;
if
orientation
=
=
LineOrientation
:
:
Horizontal
{
prim_origin
.
x
+
=
(
segment_start_point
+
gradient_offset_base
-
prim_start_offset
)
*
inv_length
*
prim_size
.
width
;
prim_size
.
width
*
=
(
segment_end_point
-
segment_start_point
)
*
inv_length
;
}
else
{
prim_origin
.
y
+
=
(
segment_start_point
+
gradient_offset_base
-
prim_start_offset
)
*
inv_length
*
prim_size
.
height
;
prim_size
.
height
*
=
(
segment_end_point
-
segment_start_point
)
*
inv_length
;
}
if
prim_size
.
area
(
)
>
0
.
0
{
let
local_rect
=
LayoutRect
:
:
new
(
prim_origin
prim_size
)
;
gradient
.
cache_segments
.
push
(
CachedGradientSegment
{
handle
:
frame_state
.
resource_cache
.
request_render_task
(
RenderTaskCacheKey
{
size
:
task_size
kind
:
RenderTaskCacheKeyKind
:
:
Gradient
(
cache_key
)
}
frame_state
.
gpu_cache
frame_state
.
render_tasks
None
is_opaque
|
render_tasks
|
{
render_tasks
.
add
(
)
.
init
(
RenderTask
:
:
new_gradient
(
task_size
segment_stops
orientation
segment_start_point
segment_end_point
)
)
}
)
local_rect
:
local_rect
}
)
;
}
first_stop
=
if
hard_stop
{
last_stop
+
1
}
else
{
last_stop
}
;
}
}
if
prim_data
.
extend_mode
=
=
ExtendMode
:
:
Clamp
|
|
(
prim_start_offset
>
=
0
.
0
&
&
prim_end_offset
<
=
1
.
0
)
{
if
prim_start_offset
<
0
.
0
{
stops
.
insert
(
0
GradientStopKey
{
offset
:
prim_start_offset
color
:
stops
[
0
]
.
color
}
)
;
}
if
prim_end_offset
>
1
.
0
{
stops
.
push
(
GradientStopKey
{
offset
:
prim_end_offset
color
:
stops
[
stops
.
len
(
)
-
1
]
.
color
}
)
;
}
emit_segments
(
prim_start_offset
prim_end_offset
0
.
0
prim_start_offset
prim_end_offset
prim_data
.
common
.
prim_rect
.
origin
prim_data
.
common
.
prim_rect
.
size
size
prim_data
.
stops_opacity
.
is_opaque
&
stops
orientation
frame_state
gradient
)
;
}
else
{
let
mut
segment_start_point
=
prim_start_offset
;
while
segment_start_point
<
prim_end_offset
{
let
gradient_offset_base
=
segment_start_point
.
floor
(
)
;
let
repeat_start
=
segment_start_point
-
gradient_offset_base
;
let
repeat_end
=
(
gradient_offset_base
+
1
.
0
)
.
min
(
prim_end_offset
)
-
gradient_offset_base
;
emit_segments
(
repeat_start
repeat_end
gradient_offset_base
prim_start_offset
prim_end_offset
prim_data
.
common
.
prim_rect
.
origin
prim_data
.
common
.
prim_rect
.
size
size
prim_data
.
stops_opacity
.
is_opaque
&
stops
orientation
frame_state
gradient
)
;
segment_start_point
=
repeat_end
+
gradient_offset_base
;
}
}
}
if
prim_data
.
tile_spacing
!
=
LayoutSize
:
:
zero
(
)
{
prim_data
.
common
.
may_need_repetition
=
false
;
let
prim_info
=
&
scratch
.
prim_info
[
prim_instance
.
visibility_info
.
0
as
usize
]
;
let
map_local_to_world
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
prim_spatial_node_index
frame_context
.
global_screen_world_rect
frame_context
.
spatial_tree
)
;
gradient
.
visible_tiles_range
=
decompose_repeated_primitive
(
&
prim_info
.
combined_local_clip_rect
&
prim_data
.
common
.
prim_rect
prim_info
.
clipped_world_rect
&
prim_data
.
stretch_size
&
prim_data
.
tile_spacing
frame_state
&
mut
scratch
.
gradient_tiles
&
map_local_to_world
&
mut
|
_
mut
request
|
{
request
.
push
(
[
prim_data
.
start_point
.
x
prim_data
.
start_point
.
y
prim_data
.
end_point
.
x
prim_data
.
end_point
.
y
]
)
;
request
.
push
(
[
pack_as_float
(
prim_data
.
extend_mode
as
u32
)
prim_data
.
stretch_size
.
width
prim_data
.
stretch_size
.
height
0
.
0
]
)
;
}
)
;
if
gradient
.
visible_tiles_range
.
is_empty
(
)
{
prim_instance
.
visibility_info
=
PrimitiveVisibilityIndex
:
:
INVALID
;
}
}
}
PrimitiveInstanceKind
:
:
RadialGradient
{
data_handle
ref
mut
visible_tiles_range
.
.
}
=
>
{
profile_scope
!
(
"
RadialGradient
"
)
;
let
prim_data
=
&
mut
data_stores
.
radial_grad
[
*
data_handle
]
;
if
prim_data
.
stretch_size
.
width
>
=
prim_data
.
common
.
prim_rect
.
size
.
width
&
&
prim_data
.
stretch_size
.
height
>
=
prim_data
.
common
.
prim_rect
.
size
.
height
{
prim_data
.
common
.
may_need_repetition
=
false
;
}
prim_data
.
update
(
frame_state
)
;
if
prim_data
.
tile_spacing
!
=
LayoutSize
:
:
zero
(
)
{
let
prim_info
=
&
scratch
.
prim_info
[
prim_instance
.
visibility_info
.
0
as
usize
]
;
let
map_local_to_world
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
prim_spatial_node_index
frame_context
.
global_screen_world_rect
frame_context
.
spatial_tree
)
;
prim_data
.
common
.
may_need_repetition
=
false
;
*
visible_tiles_range
=
decompose_repeated_primitive
(
&
prim_info
.
combined_local_clip_rect
&
prim_data
.
common
.
prim_rect
prim_info
.
clipped_world_rect
&
prim_data
.
stretch_size
&
prim_data
.
tile_spacing
frame_state
&
mut
scratch
.
gradient_tiles
&
map_local_to_world
&
mut
|
_
mut
request
|
{
request
.
push
(
[
prim_data
.
center
.
x
prim_data
.
center
.
y
prim_data
.
params
.
start_radius
prim_data
.
params
.
end_radius
]
)
;
request
.
push
(
[
prim_data
.
params
.
ratio_xy
pack_as_float
(
prim_data
.
extend_mode
as
u32
)
prim_data
.
stretch_size
.
width
prim_data
.
stretch_size
.
height
]
)
;
}
)
;
if
visible_tiles_range
.
is_empty
(
)
{
prim_instance
.
visibility_info
=
PrimitiveVisibilityIndex
:
:
INVALID
;
}
}
}
PrimitiveInstanceKind
:
:
ConicGradient
{
data_handle
ref
mut
visible_tiles_range
.
.
}
=
>
{
profile_scope
!
(
"
ConicGradient
"
)
;
let
prim_data
=
&
mut
data_stores
.
conic_grad
[
*
data_handle
]
;
if
prim_data
.
stretch_size
.
width
>
=
prim_data
.
common
.
prim_rect
.
size
.
width
&
&
prim_data
.
stretch_size
.
height
>
=
prim_data
.
common
.
prim_rect
.
size
.
height
{
prim_data
.
common
.
may_need_repetition
=
false
;
}
prim_data
.
update
(
frame_state
)
;
if
prim_data
.
tile_spacing
!
=
LayoutSize
:
:
zero
(
)
{
let
prim_info
=
&
scratch
.
prim_info
[
prim_instance
.
visibility_info
.
0
as
usize
]
;
let
map_local_to_world
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
prim_spatial_node_index
frame_context
.
global_screen_world_rect
frame_context
.
spatial_tree
)
;
prim_data
.
common
.
may_need_repetition
=
false
;
*
visible_tiles_range
=
decompose_repeated_primitive
(
&
prim_info
.
combined_local_clip_rect
&
prim_data
.
common
.
prim_rect
prim_info
.
clipped_world_rect
&
prim_data
.
stretch_size
&
prim_data
.
tile_spacing
frame_state
&
mut
scratch
.
gradient_tiles
&
map_local_to_world
&
mut
|
_
mut
request
|
{
request
.
push
(
[
prim_data
.
center
.
x
prim_data
.
center
.
y
prim_data
.
params
.
start_offset
prim_data
.
params
.
end_offset
]
)
;
request
.
push
(
[
prim_data
.
params
.
angle
pack_as_float
(
prim_data
.
extend_mode
as
u32
)
prim_data
.
stretch_size
.
width
prim_data
.
stretch_size
.
height
]
)
;
}
)
;
if
visible_tiles_range
.
is_empty
(
)
{
prim_instance
.
visibility_info
=
PrimitiveVisibilityIndex
:
:
INVALID
;
}
}
}
PrimitiveInstanceKind
:
:
Picture
{
pic_index
segment_instance_index
.
.
}
=
>
{
profile_scope
!
(
"
Picture
"
)
;
let
pic
=
&
mut
store
.
pictures
[
pic_index
.
0
]
;
let
prim_info
=
&
scratch
.
prim_info
[
prim_instance
.
visibility_info
.
0
as
usize
]
;
if
pic
.
prepare_for_render
(
frame_context
frame_state
data_stores
)
{
if
let
Some
(
ref
mut
splitter
)
=
pic_state
.
plane_splitter
{
PicturePrimitive
:
:
add_split_plane
(
splitter
frame_context
.
spatial_tree
prim_spatial_node_index
pic
.
precise_local_rect
&
prim_info
.
combined_local_clip_rect
frame_state
.
current_dirty_region
(
)
.
combined
plane_split_anchor
)
;
}
if
pic
.
can_use_segments
(
)
{
write_segment
(
*
segment_instance_index
frame_state
&
mut
scratch
.
segments
&
mut
scratch
.
segment_instances
|
request
|
{
request
.
push
(
PremultipliedColorF
:
:
WHITE
)
;
request
.
push
(
PremultipliedColorF
:
:
WHITE
)
;
request
.
push
(
[
-
1
.
0
0
.
0
0
.
0
0
.
0
]
)
;
}
)
;
}
}
else
{
prim_instance
.
visibility_info
=
PrimitiveVisibilityIndex
:
:
INVALID
;
}
}
PrimitiveInstanceKind
:
:
Backdrop
{
data_handle
}
=
>
{
profile_scope
!
(
"
Backdrop
"
)
;
let
backdrop_pic_index
=
data_stores
.
backdrop
[
*
data_handle
]
.
kind
.
pic_index
;
let
backdrop_surface_index
=
store
.
pictures
[
backdrop_pic_index
.
0
]
.
raster_config
.
as_ref
(
)
.
unwrap
(
)
.
surface_index
;
if
let
Some
(
backdrop_tasks
)
=
frame_state
.
surfaces
[
backdrop_surface_index
.
0
]
.
render_tasks
{
let
picture_task_id
=
frame_state
.
surfaces
[
pic_context
.
surface_index
.
0
]
.
render_tasks
.
as_ref
(
)
.
unwrap
(
)
.
port
;
frame_state
.
render_tasks
.
add_dependency
(
picture_task_id
backdrop_tasks
.
root
)
;
}
else
{
if
prim_instance
.
is_chased
(
)
{
println
!
(
"
\
tBackdrop
primitive
culled
because
backdrop
task
was
not
assigned
render
tasks
"
)
;
}
prim_instance
.
visibility_info
=
PrimitiveVisibilityIndex
:
:
INVALID
;
}
}
}
;
}
fn
write_segment
<
F
>
(
segment_instance_index
:
SegmentInstanceIndex
frame_state
:
&
mut
FrameBuildingState
segments
:
&
mut
SegmentStorage
segment_instances
:
&
mut
SegmentInstanceStorage
f
:
F
)
where
F
:
Fn
(
&
mut
GpuDataRequest
)
{
debug_assert_ne
!
(
segment_instance_index
SegmentInstanceIndex
:
:
INVALID
)
;
if
segment_instance_index
!
=
SegmentInstanceIndex
:
:
UNUSED
{
let
segment_instance
=
&
mut
segment_instances
[
segment_instance_index
]
;
if
let
Some
(
mut
request
)
=
frame_state
.
gpu_cache
.
request
(
&
mut
segment_instance
.
gpu_cache_handle
)
{
let
segments
=
&
segments
[
segment_instance
.
segments_range
]
;
f
(
&
mut
request
)
;
for
segment
in
segments
{
request
.
write_segment
(
segment
.
local_rect
[
0
.
0
;
4
]
)
;
}
}
}
}
fn
decompose_repeated_primitive
(
combined_local_clip_rect
:
&
LayoutRect
prim_local_rect
:
&
LayoutRect
prim_world_rect
:
WorldRect
stretch_size
:
&
LayoutSize
tile_spacing
:
&
LayoutSize
frame_state
:
&
mut
FrameBuildingState
gradient_tiles
:
&
mut
GradientTileStorage
map_local_to_world
:
&
SpaceMapper
<
LayoutPixel
WorldPixel
>
callback
:
&
mut
dyn
FnMut
(
&
LayoutRect
GpuDataRequest
)
)
-
>
GradientTileRange
{
let
mut
visible_tiles
=
Vec
:
:
new
(
)
;
let
tight_clip_rect
=
combined_local_clip_rect
.
intersection
(
prim_local_rect
)
.
unwrap
(
)
;
let
visible_rect
=
compute_conservative_visible_rect
(
&
tight_clip_rect
prim_world_rect
map_local_to_world
)
;
let
stride
=
*
stretch_size
+
*
tile_spacing
;
let
repetitions
=
image_tiling
:
:
repetitions
(
prim_local_rect
&
visible_rect
stride
)
;
for
Repetition
{
origin
.
.
}
in
repetitions
{
let
mut
handle
=
GpuCacheHandle
:
:
new
(
)
;
let
rect
=
LayoutRect
{
origin
size
:
*
stretch_size
}
;
if
let
Some
(
request
)
=
frame_state
.
gpu_cache
.
request
(
&
mut
handle
)
{
callback
(
&
rect
request
)
;
}
visible_tiles
.
push
(
VisibleGradientTile
{
local_rect
:
rect
local_clip_rect
:
tight_clip_rect
handle
}
)
;
}
if
visible_tiles
.
is_empty
(
)
{
GradientTileRange
:
:
empty
(
)
}
else
{
gradient_tiles
.
extend
(
visible_tiles
)
}
}
fn
update_clip_task_for_brush
(
instance
:
&
PrimitiveInstance
prim_origin
:
&
LayoutPoint
prim_info
:
&
mut
PrimitiveVisibility
prim_spatial_node_index
:
SpatialNodeIndex
root_spatial_node_index
:
SpatialNodeIndex
pic_context
:
&
PictureContext
pic_state
:
&
mut
PictureState
frame_context
:
&
FrameBuildingContext
frame_state
:
&
mut
FrameBuildingState
prim_store
:
&
PrimitiveStore
data_stores
:
&
mut
DataStores
segments_store
:
&
mut
SegmentStorage
segment_instances_store
:
&
mut
SegmentInstanceStorage
clip_mask_instances
:
&
mut
Vec
<
ClipMaskKind
>
unclipped
:
&
DeviceRect
device_pixel_scale
:
DevicePixelScale
)
-
>
bool
{
let
segments
=
match
instance
.
kind
{
PrimitiveInstanceKind
:
:
TextRun
{
.
.
}
|
PrimitiveInstanceKind
:
:
Clear
{
.
.
}
|
PrimitiveInstanceKind
:
:
LineDecoration
{
.
.
}
|
PrimitiveInstanceKind
:
:
Backdrop
{
.
.
}
=
>
{
return
false
;
}
PrimitiveInstanceKind
:
:
Image
{
image_instance_index
.
.
}
=
>
{
let
segment_instance_index
=
prim_store
.
images
[
image_instance_index
]
.
segment_instance_index
;
if
segment_instance_index
=
=
SegmentInstanceIndex
:
:
UNUSED
{
return
false
;
}
let
segment_instance
=
&
segment_instances_store
[
segment_instance_index
]
;
&
segments_store
[
segment_instance
.
segments_range
]
}
PrimitiveInstanceKind
:
:
Picture
{
segment_instance_index
.
.
}
=
>
{
if
segment_instance_index
=
=
SegmentInstanceIndex
:
:
UNUSED
|
|
segment_instance_index
=
=
SegmentInstanceIndex
:
:
INVALID
{
return
false
;
}
let
segment_instance
=
&
segment_instances_store
[
segment_instance_index
]
;
&
segments_store
[
segment_instance
.
segments_range
]
}
PrimitiveInstanceKind
:
:
YuvImage
{
segment_instance_index
.
.
}
|
PrimitiveInstanceKind
:
:
Rectangle
{
segment_instance_index
.
.
}
=
>
{
debug_assert
!
(
segment_instance_index
!
=
SegmentInstanceIndex
:
:
INVALID
)
;
if
segment_instance_index
=
=
SegmentInstanceIndex
:
:
UNUSED
{
return
false
;
}
let
segment_instance
=
&
segment_instances_store
[
segment_instance_index
]
;
&
segments_store
[
segment_instance
.
segments_range
]
}
PrimitiveInstanceKind
:
:
ImageBorder
{
data_handle
.
.
}
=
>
{
let
border_data
=
&
data_stores
.
image_border
[
data_handle
]
.
kind
;
border_data
.
brush_segments
.
as_slice
(
)
}
PrimitiveInstanceKind
:
:
NormalBorder
{
data_handle
.
.
}
=
>
{
let
border_data
=
&
data_stores
.
normal_border
[
data_handle
]
.
kind
;
border_data
.
brush_segments
.
as_slice
(
)
}
PrimitiveInstanceKind
:
:
LinearGradient
{
data_handle
.
.
}
=
>
{
let
prim_data
=
&
data_stores
.
linear_grad
[
data_handle
]
;
if
prim_data
.
brush_segments
.
is_empty
(
)
{
return
false
;
}
prim_data
.
brush_segments
.
as_slice
(
)
}
PrimitiveInstanceKind
:
:
RadialGradient
{
data_handle
.
.
}
=
>
{
let
prim_data
=
&
data_stores
.
radial_grad
[
data_handle
]
;
if
prim_data
.
brush_segments
.
is_empty
(
)
{
return
false
;
}
prim_data
.
brush_segments
.
as_slice
(
)
}
PrimitiveInstanceKind
:
:
ConicGradient
{
data_handle
.
.
}
=
>
{
let
prim_data
=
&
data_stores
.
conic_grad
[
data_handle
]
;
if
prim_data
.
brush_segments
.
is_empty
(
)
{
return
false
;
}
prim_data
.
brush_segments
.
as_slice
(
)
}
}
;
if
segments
.
is_empty
(
)
{
return
true
;
}
prim_info
.
clip_task_index
=
ClipTaskIndex
(
clip_mask_instances
.
len
(
)
as
_
)
;
if
segments
.
len
(
)
=
=
1
{
let
clip_mask_kind
=
update_brush_segment_clip_task
(
&
segments
[
0
]
Some
(
&
prim_info
.
clip_chain
)
prim_info
.
clipped_world_rect
root_spatial_node_index
pic_context
.
surface_index
pic_state
frame_context
frame_state
&
mut
data_stores
.
clip
unclipped
device_pixel_scale
)
;
clip_mask_instances
.
push
(
clip_mask_kind
)
;
}
else
{
let
dirty_world_rect
=
frame_state
.
current_dirty_region
(
)
.
combined
;
for
segment
in
segments
{
frame_state
.
clip_store
.
set_active_clips_from_clip_chain
(
&
prim_info
.
clip_chain
prim_spatial_node_index
&
frame_context
.
spatial_tree
)
;
let
segment_clip_chain
=
frame_state
.
clip_store
.
build_clip_chain_instance
(
segment
.
local_rect
.
translate
(
prim_origin
.
to_vector
(
)
)
&
pic_state
.
map_local_to_pic
&
pic_state
.
map_pic_to_world
&
frame_context
.
spatial_tree
frame_state
.
gpu_cache
frame_state
.
resource_cache
device_pixel_scale
&
dirty_world_rect
&
mut
data_stores
.
clip
false
instance
.
is_chased
(
)
)
;
let
clip_mask_kind
=
update_brush_segment_clip_task
(
&
segment
segment_clip_chain
.
as_ref
(
)
prim_info
.
clipped_world_rect
root_spatial_node_index
pic_context
.
surface_index
pic_state
frame_context
frame_state
&
mut
data_stores
.
clip
unclipped
device_pixel_scale
)
;
clip_mask_instances
.
push
(
clip_mask_kind
)
;
}
}
true
}
pub
fn
update_clip_task
(
instance
:
&
mut
PrimitiveInstance
prim_origin
:
&
LayoutPoint
prim_spatial_node_index
:
SpatialNodeIndex
root_spatial_node_index
:
SpatialNodeIndex
pic_context
:
&
PictureContext
pic_state
:
&
mut
PictureState
frame_context
:
&
FrameBuildingContext
frame_state
:
&
mut
FrameBuildingState
prim_store
:
&
mut
PrimitiveStore
data_stores
:
&
mut
DataStores
scratch
:
&
mut
PrimitiveScratchBuffer
)
{
let
prim_info
=
&
mut
scratch
.
prim_info
[
instance
.
visibility_info
.
0
as
usize
]
;
let
device_pixel_scale
=
frame_state
.
surfaces
[
pic_context
.
surface_index
.
0
]
.
device_pixel_scale
;
if
instance
.
is_chased
(
)
{
println
!
(
"
\
tupdating
clip
task
with
pic
rect
{
:
?
}
"
prim_info
.
clip_chain
.
pic_clip_rect
)
;
}
let
unclipped
=
match
get_unclipped_device_rect
(
prim_info
.
clip_chain
.
pic_clip_rect
&
pic_state
.
map_pic_to_raster
device_pixel_scale
)
{
Some
(
rect
)
=
>
rect
None
=
>
return
}
;
build_segments_if_needed
(
instance
&
prim_info
frame_state
prim_store
data_stores
&
mut
scratch
.
segments
&
mut
scratch
.
segment_instances
)
;
if
update_clip_task_for_brush
(
instance
prim_origin
prim_info
prim_spatial_node_index
root_spatial_node_index
pic_context
pic_state
frame_context
frame_state
prim_store
data_stores
&
mut
scratch
.
segments
&
mut
scratch
.
segment_instances
&
mut
scratch
.
clip_mask_instances
&
unclipped
device_pixel_scale
)
{
if
instance
.
is_chased
(
)
{
println
!
(
"
\
tsegment
tasks
have
been
created
for
clipping
"
)
;
}
return
;
}
if
prim_info
.
clip_chain
.
needs_mask
{
if
let
Some
(
device_rect
)
=
get_clipped_device_rect
(
&
unclipped
&
pic_state
.
map_raster_to_world
prim_info
.
clipped_world_rect
device_pixel_scale
)
{
let
(
device_rect
device_pixel_scale
)
=
adjust_mask_scale_for_max_size
(
device_rect
device_pixel_scale
)
;
let
clip_task_id
=
RenderTask
:
:
new_mask
(
device_rect
prim_info
.
clip_chain
.
clips_range
root_spatial_node_index
frame_state
.
clip_store
frame_state
.
gpu_cache
frame_state
.
resource_cache
frame_state
.
render_tasks
&
mut
data_stores
.
clip
device_pixel_scale
frame_context
.
fb_config
)
;
if
instance
.
is_chased
(
)
{
println
!
(
"
\
tcreated
task
{
:
?
}
with
device
rect
{
:
?
}
"
clip_task_id
device_rect
)
;
}
let
clip_task_index
=
ClipTaskIndex
(
scratch
.
clip_mask_instances
.
len
(
)
as
_
)
;
scratch
.
clip_mask_instances
.
push
(
ClipMaskKind
:
:
Mask
(
clip_task_id
)
)
;
prim_info
.
clip_task_index
=
clip_task_index
;
frame_state
.
render_tasks
.
add_dependency
(
frame_state
.
surfaces
[
pic_context
.
surface_index
.
0
]
.
render_tasks
.
unwrap
(
)
.
port
clip_task_id
)
;
}
}
}
pub
fn
update_brush_segment_clip_task
(
segment
:
&
BrushSegment
clip_chain
:
Option
<
&
ClipChainInstance
>
prim_bounding_rect
:
WorldRect
root_spatial_node_index
:
SpatialNodeIndex
surface_index
:
SurfaceIndex
pic_state
:
&
mut
PictureState
frame_context
:
&
FrameBuildingContext
frame_state
:
&
mut
FrameBuildingState
clip_data_store
:
&
mut
ClipDataStore
unclipped
:
&
DeviceRect
device_pixel_scale
:
DevicePixelScale
)
-
>
ClipMaskKind
{
match
clip_chain
{
Some
(
clip_chain
)
=
>
{
if
!
clip_chain
.
needs_mask
|
|
(
!
segment
.
may_need_clip_mask
&
&
!
clip_chain
.
has_non_local_clips
)
{
return
ClipMaskKind
:
:
None
;
}
let
segment_world_rect
=
match
pic_state
.
map_pic_to_world
.
map
(
&
clip_chain
.
pic_clip_rect
)
{
Some
(
rect
)
=
>
rect
None
=
>
return
ClipMaskKind
:
:
Clipped
}
;
let
segment_world_rect
=
match
segment_world_rect
.
intersection
(
&
prim_bounding_rect
)
{
Some
(
rect
)
=
>
rect
None
=
>
return
ClipMaskKind
:
:
Clipped
}
;
let
device_rect
=
match
get_clipped_device_rect
(
unclipped
&
pic_state
.
map_raster_to_world
segment_world_rect
device_pixel_scale
)
{
Some
(
info
)
=
>
info
None
=
>
{
return
ClipMaskKind
:
:
Clipped
;
}
}
;
let
(
device_rect
device_pixel_scale
)
=
adjust_mask_scale_for_max_size
(
device_rect
device_pixel_scale
)
;
let
clip_task_id
=
RenderTask
:
:
new_mask
(
device_rect
clip_chain
.
clips_range
root_spatial_node_index
frame_state
.
clip_store
frame_state
.
gpu_cache
frame_state
.
resource_cache
frame_state
.
render_tasks
clip_data_store
device_pixel_scale
frame_context
.
fb_config
)
;
let
port
=
frame_state
.
surfaces
[
surface_index
.
0
]
.
render_tasks
.
unwrap_or_else
(
|
|
panic
!
(
"
bug
:
no
task
for
surface
{
:
?
}
"
surface_index
)
)
.
port
;
frame_state
.
render_tasks
.
add_dependency
(
port
clip_task_id
)
;
ClipMaskKind
:
:
Mask
(
clip_task_id
)
}
None
=
>
{
ClipMaskKind
:
:
Clipped
}
}
}
fn
write_brush_segment_description
(
prim_local_rect
:
LayoutRect
prim_local_clip_rect
:
LayoutRect
clip_chain
:
&
ClipChainInstance
segment_builder
:
&
mut
SegmentBuilder
clip_store
:
&
ClipStore
data_stores
:
&
DataStores
)
-
>
bool
{
if
prim_local_rect
.
size
.
area
(
)
<
MIN_BRUSH_SPLIT_AREA
{
return
false
;
}
segment_builder
.
initialize
(
prim_local_rect
None
prim_local_clip_rect
)
;
for
i
in
0
.
.
clip_chain
.
clips_range
.
count
{
let
clip_instance
=
clip_store
.
get_instance_from_range
(
&
clip_chain
.
clips_range
i
)
;
let
clip_node
=
&
data_stores
.
clip
[
clip_instance
.
handle
]
;
if
!
clip_instance
.
flags
.
contains
(
ClipNodeFlags
:
:
SAME_SPATIAL_NODE
)
{
continue
;
}
let
(
local_clip_rect
radius
mode
)
=
match
clip_node
.
item
.
kind
{
ClipItemKind
:
:
RoundedRectangle
{
rect
radius
mode
}
=
>
{
(
rect
Some
(
radius
)
mode
)
}
ClipItemKind
:
:
Rectangle
{
rect
mode
}
=
>
{
(
rect
None
mode
)
}
ClipItemKind
:
:
BoxShadow
{
ref
source
}
=
>
{
let
inner_clip_mode
=
match
source
.
clip_mode
{
BoxShadowClipMode
:
:
Outset
=
>
None
BoxShadowClipMode
:
:
Inset
=
>
Some
(
ClipMode
:
:
ClipOut
)
}
;
segment_builder
.
push_mask_region
(
source
.
prim_shadow_rect
source
.
prim_shadow_rect
.
inflate
(
-
0
.
5
*
source
.
original_alloc_size
.
width
-
0
.
5
*
source
.
original_alloc_size
.
height
)
inner_clip_mode
)
;
continue
;
}
ClipItemKind
:
:
Image
{
.
.
}
=
>
{
return
false
;
}
}
;
segment_builder
.
push_clip_rect
(
local_clip_rect
radius
mode
)
;
}
true
}
fn
build_segments_if_needed
(
instance
:
&
mut
PrimitiveInstance
prim_info
:
&
PrimitiveVisibility
frame_state
:
&
mut
FrameBuildingState
prim_store
:
&
mut
PrimitiveStore
data_stores
:
&
DataStores
segments_store
:
&
mut
SegmentStorage
segment_instances_store
:
&
mut
SegmentInstanceStorage
)
{
let
prim_clip_chain
=
&
prim_info
.
clip_chain
;
let
prim_local_rect
=
data_stores
.
get_local_prim_rect
(
instance
prim_store
)
;
let
segment_instance_index
=
match
instance
.
kind
{
PrimitiveInstanceKind
:
:
Rectangle
{
ref
mut
segment_instance_index
.
.
}
|
PrimitiveInstanceKind
:
:
YuvImage
{
ref
mut
segment_instance_index
.
.
}
=
>
{
segment_instance_index
}
PrimitiveInstanceKind
:
:
Image
{
data_handle
image_instance_index
.
.
}
=
>
{
let
image_data
=
&
data_stores
.
image
[
data_handle
]
.
kind
;
let
image_instance
=
&
mut
prim_store
.
images
[
image_instance_index
]
;
if
frame_state
.
resource_cache
.
get_image_properties
(
image_data
.
key
)
.
and_then
(
|
properties
|
properties
.
tiling
)
.
is_some
(
)
{
image_instance
.
segment_instance_index
=
SegmentInstanceIndex
:
:
UNUSED
;
return
;
}
&
mut
image_instance
.
segment_instance_index
}
PrimitiveInstanceKind
:
:
Picture
{
ref
mut
segment_instance_index
pic_index
.
.
}
=
>
{
let
pic
=
&
mut
prim_store
.
pictures
[
pic_index
.
0
]
;
if
pic
.
can_use_segments
(
)
{
if
!
pic
.
segments_are_valid
{
*
segment_instance_index
=
SegmentInstanceIndex
:
:
INVALID
;
pic
.
segments_are_valid
=
true
;
}
segment_instance_index
}
else
{
return
;
}
}
PrimitiveInstanceKind
:
:
TextRun
{
.
.
}
|
PrimitiveInstanceKind
:
:
NormalBorder
{
.
.
}
|
PrimitiveInstanceKind
:
:
ImageBorder
{
.
.
}
|
PrimitiveInstanceKind
:
:
Clear
{
.
.
}
|
PrimitiveInstanceKind
:
:
LinearGradient
{
.
.
}
|
PrimitiveInstanceKind
:
:
RadialGradient
{
.
.
}
|
PrimitiveInstanceKind
:
:
ConicGradient
{
.
.
}
|
PrimitiveInstanceKind
:
:
LineDecoration
{
.
.
}
|
PrimitiveInstanceKind
:
:
Backdrop
{
.
.
}
=
>
{
return
;
}
}
;
if
*
segment_instance_index
=
=
SegmentInstanceIndex
:
:
INVALID
{
let
mut
segments
:
SmallVec
<
[
BrushSegment
;
8
]
>
=
SmallVec
:
:
new
(
)
;
if
write_brush_segment_description
(
prim_local_rect
instance
.
local_clip_rect
prim_clip_chain
&
mut
frame_state
.
segment_builder
frame_state
.
clip_store
data_stores
)
{
frame_state
.
segment_builder
.
build
(
|
segment
|
{
segments
.
push
(
BrushSegment
:
:
new
(
segment
.
rect
.
translate
(
-
prim_local_rect
.
origin
.
to_vector
(
)
)
segment
.
has_mask
segment
.
edge_flags
[
0
.
0
;
4
]
BrushFlags
:
:
PERSPECTIVE_INTERPOLATION
)
)
;
}
)
;
}
if
segments
.
len
(
)
<
=
1
{
*
segment_instance_index
=
SegmentInstanceIndex
:
:
UNUSED
;
}
else
{
let
segments_range
=
segments_store
.
extend
(
segments
)
;
let
instance
=
SegmentedInstance
{
segments_range
gpu_cache_handle
:
GpuCacheHandle
:
:
new
(
)
}
;
*
segment_instance_index
=
segment_instances_store
.
push
(
instance
)
;
}
;
}
}
fn
get_unclipped_device_rect
(
prim_rect
:
PictureRect
map_to_raster
:
&
SpaceMapper
<
PicturePixel
RasterPixel
>
device_pixel_scale
:
DevicePixelScale
)
-
>
Option
<
DeviceRect
>
{
let
raster_rect
=
map_to_raster
.
map
(
&
prim_rect
)
?
;
let
world_rect
=
raster_rect
*
Scale
:
:
new
(
1
.
0
)
;
Some
(
world_rect
*
device_pixel_scale
)
}
fn
get_clipped_device_rect
(
unclipped
:
&
DeviceRect
map_to_world
:
&
SpaceMapper
<
RasterPixel
WorldPixel
>
prim_bounding_rect
:
WorldRect
device_pixel_scale
:
DevicePixelScale
)
-
>
Option
<
DeviceRect
>
{
let
unclipped_raster_rect
=
{
let
world_rect
=
*
unclipped
*
Scale
:
:
new
(
1
.
0
)
;
let
raster_rect
=
world_rect
*
device_pixel_scale
.
inv
(
)
;
raster_rect
.
cast_unit
(
)
}
;
let
unclipped_world_rect
=
map_to_world
.
map
(
&
unclipped_raster_rect
)
?
;
let
clipped_world_rect
=
unclipped_world_rect
.
intersection
(
&
prim_bounding_rect
)
?
;
let
clipped_raster_rect
=
map_to_world
.
unmap
(
&
clipped_world_rect
)
?
;
let
clipped_raster_rect
=
clipped_raster_rect
.
intersection
(
&
unclipped_raster_rect
)
?
;
if
clipped_raster_rect
.
is_empty
(
)
{
return
None
;
}
let
clipped
=
raster_rect_to_device_pixels
(
clipped_raster_rect
device_pixel_scale
)
;
Some
(
clipped
)
}
fn
adjust_mask_scale_for_max_size
(
device_rect
:
DeviceRect
device_pixel_scale
:
DevicePixelScale
)
-
>
(
DeviceRect
DevicePixelScale
)
{
if
device_rect
.
width
(
)
>
MAX_MASK_SIZE
|
|
device_rect
.
height
(
)
>
MAX_MASK_SIZE
{
let
scale
=
(
MAX_MASK_SIZE
-
1
.
0
)
/
f32
:
:
max
(
device_rect
.
width
(
)
device_rect
.
height
(
)
)
;
let
new_device_pixel_scale
=
device_pixel_scale
*
Scale
:
:
new
(
scale
)
;
let
new_device_rect
=
(
device_rect
.
to_f32
(
)
*
Scale
:
:
new
(
scale
)
)
.
round_out
(
)
;
(
new_device_rect
new_device_pixel_scale
)
}
else
{
(
device_rect
device_pixel_scale
)
}
}
