macro_rules
!
matches
{
(
expression
:
expr
(
pattern
:
tt
)
+
)
=
>
{
match
expression
{
(
pattern
)
+
=
>
true
_
=
>
false
}
}
}
#
[
macro_use
]
extern
crate
bitflags
;
#
[
macro_use
]
extern
crate
cfg_if
;
#
[
macro_use
]
extern
crate
cstr
;
#
[
macro_use
]
extern
crate
lazy_static
;
#
[
macro_use
]
extern
crate
log
;
#
[
macro_use
]
extern
crate
malloc_size_of_derive
;
#
[
cfg
(
any
(
feature
=
"
serde
"
)
)
]
#
[
macro_use
]
extern
crate
serde
;
#
[
macro_use
]
extern
crate
thread_profiler
;
extern
crate
malloc_size_of
;
extern
crate
svg_fmt
;
#
[
macro_use
]
mod
profiler
;
mod
batch
;
mod
border
;
mod
box_shadow
;
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
mod
capture
;
mod
clip
;
mod
clip_scroll_tree
;
mod
debug_colors
;
mod
debug_font_data
;
mod
debug_render
;
#
[
cfg
(
feature
=
"
debugger
"
)
]
mod
debug_server
;
mod
device
;
mod
ellipse
;
mod
filterdata
;
mod
frame_builder
;
mod
freelist
;
#
[
cfg
(
any
(
target_os
=
"
macos
"
target_os
=
"
windows
"
)
)
]
mod
gamma_lut
;
mod
glyph_cache
;
mod
glyph_rasterizer
;
mod
gpu_cache
;
mod
gpu_types
;
mod
hit_test
;
mod
image
;
mod
intern
;
mod
internal_types
;
mod
picture
;
mod
prim_store
;
mod
print_tree
;
mod
record
;
mod
render_backend
;
mod
render_target
;
mod
render_task_graph
;
mod
render_task_cache
;
mod
render_task
;
mod
renderer
;
mod
resource_cache
;
mod
scene
;
mod
scene_builder_thread
;
mod
scene_building
;
mod
screen_capture
;
mod
segment
;
mod
shade
;
mod
spatial_node
;
mod
storage
;
mod
texture_allocator
;
mod
texture_cache
;
mod
util
;
mod
shader_source
{
include
!
(
concat
!
(
env
!
(
"
OUT_DIR
"
)
"
/
shaders
.
rs
"
)
)
;
}
pub
use
crate
:
:
record
:
:
{
ApiRecordingReceiver
BinaryRecorder
WEBRENDER_RECORDING_HEADER
}
;
mod
platform
{
#
[
cfg
(
target_os
=
"
macos
"
)
]
pub
use
crate
:
:
platform
:
:
macos
:
:
font
;
#
[
cfg
(
any
(
target_os
=
"
android
"
all
(
unix
not
(
target_os
=
"
macos
"
)
)
)
)
]
pub
use
crate
:
:
platform
:
:
unix
:
:
font
;
#
[
cfg
(
target_os
=
"
windows
"
)
]
pub
use
crate
:
:
platform
:
:
windows
:
:
font
;
#
[
cfg
(
target_os
=
"
macos
"
)
]
pub
mod
macos
{
pub
mod
font
;
}
#
[
cfg
(
any
(
target_os
=
"
android
"
all
(
unix
not
(
target_os
=
"
macos
"
)
)
)
)
]
pub
mod
unix
{
pub
mod
font
;
}
#
[
cfg
(
target_os
=
"
windows
"
)
]
pub
mod
windows
{
pub
mod
font
;
}
}
#
[
cfg
(
target_os
=
"
macos
"
)
]
extern
crate
core_foundation
;
#
[
cfg
(
target_os
=
"
macos
"
)
]
extern
crate
core_graphics
;
#
[
cfg
(
target_os
=
"
macos
"
)
]
extern
crate
core_text
;
#
[
cfg
(
all
(
unix
not
(
target_os
=
"
macos
"
)
)
)
]
extern
crate
freetype
;
#
[
cfg
(
all
(
unix
not
(
target_os
=
"
macos
"
)
)
)
]
extern
crate
libc
;
#
[
cfg
(
target_os
=
"
windows
"
)
]
extern
crate
dwrote
;
extern
crate
bincode
;
extern
crate
byteorder
;
pub
extern
crate
euclid
;
extern
crate
fxhash
;
extern
crate
gleam
;
extern
crate
num_traits
;
extern
crate
plane_split
;
extern
crate
rayon
;
#
[
cfg
(
feature
=
"
ron
"
)
]
extern
crate
ron
;
#
[
cfg
(
feature
=
"
debugger
"
)
]
extern
crate
serde_json
;
extern
crate
sha2
;
#
[
macro_use
]
extern
crate
smallvec
;
extern
crate
time
;
#
[
cfg
(
feature
=
"
debugger
"
)
]
extern
crate
ws
;
#
[
cfg
(
feature
=
"
debugger
"
)
]
extern
crate
image_loader
;
#
[
cfg
(
feature
=
"
debugger
"
)
]
extern
crate
base64
;
#
[
cfg
(
all
(
feature
=
"
capture
"
feature
=
"
png
"
)
)
]
extern
crate
png
;
#
[
cfg
(
test
)
]
extern
crate
rand
;
#
[
macro_use
]
pub
extern
crate
api
;
extern
crate
webrender_build
;
#
[
doc
(
hidden
)
]
pub
use
crate
:
:
device
:
:
{
build_shader_strings
UploadMethod
VertexUsageHint
get_gl_target
}
;
pub
use
crate
:
:
device
:
:
{
ProgramBinary
ProgramCache
ProgramCacheObserver
FormatDesc
}
;
pub
use
crate
:
:
device
:
:
Device
;
pub
use
crate
:
:
frame_builder
:
:
ChasePrimitive
;
pub
use
crate
:
:
prim_store
:
:
PrimitiveDebugId
;
pub
use
crate
:
:
profiler
:
:
{
ProfilerHooks
set_profiler_hooks
}
;
pub
use
crate
:
:
renderer
:
:
{
AsyncPropertySampler
CpuProfile
DebugFlags
OutputImageHandler
RendererKind
ExternalImage
ExternalImageHandler
ExternalImageSource
GpuProfile
GraphicsApi
GraphicsApiInfo
PipelineInfo
Renderer
RendererOptions
RenderResults
RendererStats
SceneBuilderHooks
ThreadListener
ShaderPrecacheFlags
MAX_VERTEX_TEXTURE_WIDTH
}
;
pub
use
crate
:
:
screen_capture
:
:
{
AsyncScreenshotHandle
RecordedFrameHandle
}
;
pub
use
crate
:
:
shade
:
:
{
Shaders
WrShaders
}
;
pub
use
api
as
webrender_api
;
pub
use
webrender_build
:
:
shader
:
:
ProgramSourceDigest
;
