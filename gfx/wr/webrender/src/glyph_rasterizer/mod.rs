use
api
:
:
{
FontInstanceFlags
FontSize
BaseFontInstance
}
;
use
api
:
:
{
FontKey
FontRenderMode
FontTemplate
}
;
use
api
:
:
{
ColorU
GlyphIndex
GlyphDimensions
SyntheticItalics
}
;
use
api
:
:
units
:
:
*
;
use
api
:
:
{
ImageDescriptor
ImageDescriptorFlags
ImageFormat
DirtyRect
}
;
use
crate
:
:
internal_types
:
:
ResourceCacheError
;
use
crate
:
:
platform
:
:
font
:
:
FontContext
;
use
crate
:
:
device
:
:
TextureFilter
;
use
crate
:
:
gpu_types
:
:
UvRectKind
;
use
crate
:
:
glyph_cache
:
:
{
GlyphCache
CachedGlyphInfo
GlyphCacheEntry
}
;
use
crate
:
:
resource_cache
:
:
CachedImageData
;
use
crate
:
:
texture_cache
:
:
{
TextureCache
TextureCacheHandle
Eviction
}
;
use
crate
:
:
gpu_cache
:
:
GpuCache
;
use
crate
:
:
render_task_graph
:
:
RenderTaskGraph
;
use
crate
:
:
render_task_cache
:
:
RenderTaskCache
;
use
crate
:
:
profiler
:
:
TextureCacheProfileCounters
;
use
malloc_size_of
:
:
{
MallocSizeOf
MallocSizeOfOps
}
;
use
rayon
:
:
ThreadPool
;
use
rayon
:
:
prelude
:
:
*
;
use
euclid
:
:
approxeq
:
:
ApproxEq
;
use
euclid
:
:
size2
;
use
std
:
:
cmp
;
use
std
:
:
cell
:
:
Cell
;
use
std
:
:
hash
:
:
{
Hash
Hasher
}
;
use
std
:
:
mem
;
use
std
:
:
ops
:
:
Deref
;
use
std
:
:
sync
:
:
{
Arc
Condvar
Mutex
MutexGuard
}
;
use
std
:
:
sync
:
:
mpsc
:
:
{
channel
Receiver
Sender
}
;
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicBool
Ordering
}
;
pub
static
GLYPH_FLASHING
:
AtomicBool
=
AtomicBool
:
:
new
(
false
)
;
impl
FontContexts
{
pub
fn
lock_current_context
(
&
self
)
-
>
MutexGuard
<
FontContext
>
{
let
id
=
self
.
current_worker_id
(
)
;
self
.
lock_context
(
id
)
}
pub
(
in
super
)
fn
current_worker_id
(
&
self
)
-
>
Option
<
usize
>
{
self
.
workers
.
current_thread_index
(
)
}
}
thread_local
!
{
pub
static
SEED
:
Cell
<
u32
>
=
Cell
:
:
new
(
0
)
;
}
fn
random
(
)
-
>
u32
{
SEED
.
with
(
|
seed
|
{
seed
.
set
(
seed
.
get
(
)
.
wrapping_mul
(
22695477
)
.
wrapping_add
(
1
)
)
;
seed
.
get
(
)
}
)
}
impl
GlyphRasterizer
{
pub
fn
request_glyphs
(
&
mut
self
glyph_cache
:
&
mut
GlyphCache
font
:
FontInstance
glyph_keys
:
&
[
GlyphKey
]
texture_cache
:
&
mut
TextureCache
gpu_cache
:
&
mut
GpuCache
_
:
&
mut
RenderTaskCache
_
:
&
mut
RenderTaskGraph
)
{
assert
!
(
self
.
font_contexts
.
lock_shared_context
(
)
.
has_font
(
&
font
.
font_key
)
)
;
let
mut
new_glyphs
=
Vec
:
:
new
(
)
;
let
glyph_key_cache
=
glyph_cache
.
get_glyph_key_cache_for_font_mut
(
font
.
clone
(
)
)
;
for
key
in
glyph_keys
{
if
let
Some
(
entry
)
=
glyph_key_cache
.
try_get
(
key
)
{
match
entry
{
GlyphCacheEntry
:
:
Cached
(
ref
glyph
)
=
>
{
if
!
texture_cache
.
request
(
&
glyph
.
texture_cache_handle
gpu_cache
)
{
continue
;
}
}
GlyphCacheEntry
:
:
Blank
|
GlyphCacheEntry
:
:
Pending
=
>
continue
}
}
new_glyphs
.
push
(
key
.
clone
(
)
)
;
glyph_key_cache
.
add_glyph
(
key
.
clone
(
)
GlyphCacheEntry
:
:
Pending
)
;
}
if
new_glyphs
.
is_empty
(
)
{
return
;
}
self
.
pending_glyphs
+
=
1
;
self
.
request_glyphs_from_backend
(
font
new_glyphs
)
;
}
pub
fn
enable_multithreading
(
&
mut
self
enable
:
bool
)
{
self
.
enable_multithreading
=
enable
;
}
pub
(
in
super
)
fn
request_glyphs_from_backend
(
&
mut
self
font
:
FontInstance
glyphs
:
Vec
<
GlyphKey
>
)
{
let
font_contexts
=
Arc
:
:
clone
(
&
self
.
font_contexts
)
;
let
glyph_tx
=
self
.
glyph_tx
.
clone
(
)
;
fn
process_glyph
(
key
:
&
GlyphKey
font_contexts
:
&
FontContexts
font
:
&
FontInstance
)
-
>
GlyphRasterJob
{
profile_scope
!
(
"
glyph
-
raster
"
)
;
let
mut
context
=
font_contexts
.
lock_current_context
(
)
;
let
mut
job
=
GlyphRasterJob
{
key
:
key
.
clone
(
)
result
:
context
.
rasterize_glyph
(
&
font
key
)
}
;
if
let
Ok
(
ref
mut
glyph
)
=
job
.
result
{
let
bpp
=
4
;
assert_eq
!
(
glyph
.
bytes
.
len
(
)
bpp
*
(
glyph
.
width
*
glyph
.
height
)
as
usize
)
;
fn
over
(
dst
:
u8
src
:
u8
)
-
>
u8
{
let
a
=
src
as
u32
;
let
a
=
256
-
a
;
let
dst
=
(
(
dst
as
u32
*
a
)
>
>
8
)
as
u8
;
src
+
dst
}
if
GLYPH_FLASHING
.
load
(
Ordering
:
:
Relaxed
)
{
let
color
=
(
random
(
)
&
0xff
)
as
u8
;
for
i
in
&
mut
glyph
.
bytes
{
*
i
=
over
(
*
i
color
)
;
}
}
assert_eq
!
(
(
glyph
.
left
.
fract
(
)
glyph
.
top
.
fract
(
)
)
(
0
.
0
0
.
0
)
)
;
glyph
.
downscale_bitmap_if_required
(
&
font
)
;
}
job
}
if
!
self
.
enable_multithreading
|
|
glyphs
.
len
(
)
<
8
{
let
jobs
=
glyphs
.
iter
(
)
.
map
(
|
key
:
&
GlyphKey
|
process_glyph
(
key
&
font_contexts
&
font
)
)
.
collect
(
)
;
glyph_tx
.
send
(
GlyphRasterJobs
{
font
jobs
}
)
.
unwrap
(
)
;
}
else
{
profile_scope
!
(
"
spawning
process_glyph
jobs
"
)
;
self
.
workers
.
spawn
(
move
|
|
{
let
jobs
=
glyphs
.
par_iter
(
)
.
map
(
|
key
:
&
GlyphKey
|
process_glyph
(
key
&
font_contexts
&
font
)
)
.
collect
(
)
;
glyph_tx
.
send
(
GlyphRasterJobs
{
font
jobs
}
)
.
unwrap
(
)
;
}
)
;
}
}
pub
fn
resolve_glyphs
(
&
mut
self
glyph_cache
:
&
mut
GlyphCache
texture_cache
:
&
mut
TextureCache
gpu_cache
:
&
mut
GpuCache
_
:
&
mut
RenderTaskCache
_
:
&
mut
RenderTaskGraph
_
:
&
mut
TextureCacheProfileCounters
)
{
profile_scope
!
(
"
resolve_glyphs
"
)
;
while
self
.
pending_glyphs
>
0
{
self
.
pending_glyphs
-
=
1
;
let
GlyphRasterJobs
{
font
mut
jobs
}
=
{
profile_scope
!
(
"
blocking
wait
on
glyph_rx
"
)
;
self
.
glyph_rx
.
recv
(
)
.
expect
(
"
BUG
:
Should
be
glyphs
pending
!
"
)
}
;
jobs
.
sort_by
(
|
a
b
|
a
.
key
.
cmp
(
&
b
.
key
)
)
;
let
glyph_key_cache
=
glyph_cache
.
get_glyph_key_cache_for_font_mut
(
font
)
;
for
GlyphRasterJob
{
key
result
}
in
jobs
{
let
glyph_info
=
match
result
{
Err
(
_
)
=
>
GlyphCacheEntry
:
:
Blank
Ok
(
ref
glyph
)
if
glyph
.
width
=
=
0
|
|
glyph
.
height
=
=
0
=
>
{
GlyphCacheEntry
:
:
Blank
}
Ok
(
glyph
)
=
>
{
let
mut
texture_cache_handle
=
TextureCacheHandle
:
:
invalid
(
)
;
texture_cache
.
request
(
&
texture_cache_handle
gpu_cache
)
;
texture_cache
.
update
(
&
mut
texture_cache_handle
ImageDescriptor
{
size
:
size2
(
glyph
.
width
glyph
.
height
)
stride
:
None
format
:
FORMAT
flags
:
ImageDescriptorFlags
:
:
empty
(
)
offset
:
0
}
TextureFilter
:
:
Linear
Some
(
CachedImageData
:
:
Raw
(
Arc
:
:
new
(
glyph
.
bytes
)
)
)
[
glyph
.
left
-
glyph
.
top
glyph
.
scale
]
DirtyRect
:
:
All
gpu_cache
Some
(
glyph_key_cache
.
eviction_notice
(
)
)
UvRectKind
:
:
Rect
Eviction
:
:
Auto
)
;
GlyphCacheEntry
:
:
Cached
(
CachedGlyphInfo
{
texture_cache_handle
format
:
glyph
.
format
}
)
}
}
;
glyph_key_cache
.
insert
(
key
glyph_info
)
;
}
}
self
.
remove_dead_fonts
(
)
;
}
}
#
[
allow
(
dead_code
)
]
pub
const
FORMAT
:
ImageFormat
=
ImageFormat
:
:
BGRA8
;
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
PartialOrd
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
FontTransform
{
pub
scale_x
:
f32
pub
skew_x
:
f32
pub
skew_y
:
f32
pub
scale_y
:
f32
}
impl
Eq
for
FontTransform
{
}
impl
Ord
for
FontTransform
{
fn
cmp
(
&
self
other
:
&
Self
)
-
>
cmp
:
:
Ordering
{
self
.
partial_cmp
(
other
)
.
unwrap_or
(
cmp
:
:
Ordering
:
:
Equal
)
}
}
impl
Hash
for
FontTransform
{
fn
hash
<
H
:
Hasher
>
(
&
self
state
:
&
mut
H
)
{
self
.
scale_x
.
to_bits
(
)
.
hash
(
state
)
;
self
.
skew_x
.
to_bits
(
)
.
hash
(
state
)
;
self
.
skew_y
.
to_bits
(
)
.
hash
(
state
)
;
self
.
scale_y
.
to_bits
(
)
.
hash
(
state
)
;
}
}
impl
FontTransform
{
const
QUANTIZE_SCALE
:
f32
=
1024
.
0
;
pub
fn
new
(
scale_x
:
f32
skew_x
:
f32
skew_y
:
f32
scale_y
:
f32
)
-
>
Self
{
FontTransform
{
scale_x
skew_x
skew_y
scale_y
}
}
pub
fn
identity
(
)
-
>
Self
{
FontTransform
:
:
new
(
1
.
0
0
.
0
0
.
0
1
.
0
)
}
#
[
allow
(
dead_code
)
]
pub
fn
is_identity
(
&
self
)
-
>
bool
{
*
self
=
=
FontTransform
:
:
identity
(
)
}
pub
fn
quantize
(
&
self
)
-
>
Self
{
FontTransform
:
:
new
(
(
self
.
scale_x
*
Self
:
:
QUANTIZE_SCALE
)
.
round
(
)
/
Self
:
:
QUANTIZE_SCALE
(
self
.
skew_x
*
Self
:
:
QUANTIZE_SCALE
)
.
round
(
)
/
Self
:
:
QUANTIZE_SCALE
(
self
.
skew_y
*
Self
:
:
QUANTIZE_SCALE
)
.
round
(
)
/
Self
:
:
QUANTIZE_SCALE
(
self
.
scale_y
*
Self
:
:
QUANTIZE_SCALE
)
.
round
(
)
/
Self
:
:
QUANTIZE_SCALE
)
}
#
[
allow
(
dead_code
)
]
pub
fn
determinant
(
&
self
)
-
>
f64
{
self
.
scale_x
as
f64
*
self
.
scale_y
as
f64
-
self
.
skew_y
as
f64
*
self
.
skew_x
as
f64
}
#
[
allow
(
dead_code
)
]
pub
fn
compute_scale
(
&
self
)
-
>
Option
<
(
f64
f64
)
>
{
let
det
=
self
.
determinant
(
)
;
if
det
!
=
0
.
0
{
let
x_scale
=
(
self
.
scale_x
as
f64
)
.
hypot
(
self
.
skew_y
as
f64
)
;
let
y_scale
=
det
.
abs
(
)
/
x_scale
;
Some
(
(
x_scale
y_scale
)
)
}
else
{
None
}
}
#
[
allow
(
dead_code
)
]
pub
fn
pre_scale
(
&
self
scale_x
:
f32
scale_y
:
f32
)
-
>
Self
{
FontTransform
:
:
new
(
self
.
scale_x
*
scale_x
self
.
skew_x
*
scale_y
self
.
skew_y
*
scale_x
self
.
scale_y
*
scale_y
)
}
#
[
allow
(
dead_code
)
]
pub
fn
invert_scale
(
&
self
x_scale
:
f64
y_scale
:
f64
)
-
>
Self
{
self
.
pre_scale
(
x_scale
.
recip
(
)
as
f32
y_scale
.
recip
(
)
as
f32
)
}
pub
fn
synthesize_italics
(
&
self
angle
:
SyntheticItalics
size
:
f64
vertical
:
bool
)
-
>
(
Self
(
f64
f64
)
)
{
let
skew_factor
=
angle
.
to_skew
(
)
;
if
vertical
{
let
(
tx
ty
)
=
(
0
.
0
-
size
*
0
.
5
*
skew_factor
as
f64
)
;
(
FontTransform
:
:
new
(
self
.
scale_x
+
self
.
skew_x
*
skew_factor
self
.
skew_x
self
.
skew_y
+
self
.
scale_y
*
skew_factor
self
.
scale_y
)
(
self
.
scale_x
as
f64
*
tx
+
self
.
skew_x
as
f64
*
ty
self
.
skew_y
as
f64
*
tx
+
self
.
scale_y
as
f64
*
ty
)
)
}
else
{
(
FontTransform
:
:
new
(
self
.
scale_x
self
.
skew_x
-
self
.
scale_x
*
skew_factor
self
.
skew_y
self
.
scale_y
-
self
.
skew_y
*
skew_factor
)
(
0
.
0
0
.
0
)
)
}
}
pub
fn
swap_xy
(
&
self
)
-
>
Self
{
FontTransform
:
:
new
(
self
.
skew_x
self
.
scale_x
self
.
scale_y
self
.
skew_y
)
}
pub
fn
flip_x
(
&
self
)
-
>
Self
{
FontTransform
:
:
new
(
-
self
.
scale_x
self
.
skew_x
-
self
.
skew_y
self
.
scale_y
)
}
pub
fn
flip_y
(
&
self
)
-
>
Self
{
FontTransform
:
:
new
(
self
.
scale_x
-
self
.
skew_x
self
.
skew_y
-
self
.
scale_y
)
}
pub
fn
transform
(
&
self
point
:
&
LayoutPoint
)
-
>
DevicePoint
{
DevicePoint
:
:
new
(
self
.
scale_x
*
point
.
x
+
self
.
skew_x
*
point
.
y
self
.
skew_y
*
point
.
x
+
self
.
scale_y
*
point
.
y
)
}
pub
fn
get_subpx_dir
(
&
self
)
-
>
SubpixelDirection
{
if
self
.
skew_y
.
approx_eq
(
&
0
.
0
)
{
SubpixelDirection
:
:
Horizontal
}
else
if
self
.
scale_x
.
approx_eq
(
&
0
.
0
)
{
SubpixelDirection
:
:
Vertical
}
else
{
SubpixelDirection
:
:
Mixed
}
}
}
impl
<
'
a
>
From
<
&
'
a
LayoutToWorldTransform
>
for
FontTransform
{
fn
from
(
xform
:
&
'
a
LayoutToWorldTransform
)
-
>
Self
{
FontTransform
:
:
new
(
xform
.
m11
xform
.
m21
xform
.
m12
xform
.
m22
)
}
}
pub
const
FONT_SIZE_LIMIT
:
f32
=
320
.
0
;
#
[
derive
(
Clone
PartialEq
Eq
Debug
Ord
PartialOrd
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
FontInstance
{
pub
base
:
Arc
<
BaseFontInstance
>
pub
transform
:
FontTransform
pub
render_mode
:
FontRenderMode
pub
flags
:
FontInstanceFlags
pub
color
:
ColorU
pub
transform_glyphs
:
bool
pub
texture_padding
:
bool
pub
size
:
FontSize
}
impl
Hash
for
FontInstance
{
fn
hash
<
H
:
Hasher
>
(
&
self
state
:
&
mut
H
)
{
self
.
base
.
instance_key
.
hash
(
state
)
;
self
.
transform
.
hash
(
state
)
;
self
.
render_mode
.
hash
(
state
)
;
self
.
flags
.
hash
(
state
)
;
self
.
color
.
hash
(
state
)
;
self
.
size
.
hash
(
state
)
;
}
}
impl
Deref
for
FontInstance
{
type
Target
=
BaseFontInstance
;
fn
deref
(
&
self
)
-
>
&
BaseFontInstance
{
self
.
base
.
as_ref
(
)
}
}
impl
MallocSizeOf
for
FontInstance
{
fn
size_of
(
&
self
_ops
:
&
mut
MallocSizeOfOps
)
-
>
usize
{
0
}
}
impl
FontInstance
{
pub
fn
new
(
base
:
Arc
<
BaseFontInstance
>
color
:
ColorU
render_mode
:
FontRenderMode
flags
:
FontInstanceFlags
)
-
>
Self
{
FontInstance
{
transform
:
FontTransform
:
:
identity
(
)
transform_glyphs
:
false
texture_padding
:
false
color
size
:
base
.
size
base
render_mode
flags
}
}
pub
fn
from_base
(
base
:
Arc
<
BaseFontInstance
>
)
-
>
Self
{
FontInstance
{
transform
:
FontTransform
:
:
identity
(
)
transform_glyphs
:
false
texture_padding
:
false
color
:
ColorU
:
:
new
(
0
0
0
255
)
size
:
base
.
size
render_mode
:
base
.
render_mode
flags
:
base
.
flags
base
}
}
pub
fn
get_alpha_glyph_format
(
&
self
)
-
>
GlyphFormat
{
if
!
self
.
transform_glyphs
{
GlyphFormat
:
:
Alpha
}
else
{
GlyphFormat
:
:
TransformedAlpha
}
}
pub
fn
get_subpixel_glyph_format
(
&
self
)
-
>
GlyphFormat
{
if
!
self
.
transform_glyphs
{
GlyphFormat
:
:
Subpixel
}
else
{
GlyphFormat
:
:
TransformedSubpixel
}
}
pub
fn
disable_subpixel_aa
(
&
mut
self
)
{
self
.
render_mode
=
self
.
render_mode
.
limit_by
(
FontRenderMode
:
:
Alpha
)
;
}
pub
fn
disable_subpixel_position
(
&
mut
self
)
{
self
.
flags
.
remove
(
FontInstanceFlags
:
:
SUBPIXEL_POSITION
)
;
}
pub
fn
use_subpixel_position
(
&
self
)
-
>
bool
{
self
.
flags
.
contains
(
FontInstanceFlags
:
:
SUBPIXEL_POSITION
)
&
&
self
.
render_mode
!
=
FontRenderMode
:
:
Mono
}
pub
fn
get_subpx_dir
(
&
self
)
-
>
SubpixelDirection
{
if
self
.
use_subpixel_position
(
)
{
let
mut
subpx_dir
=
self
.
transform
.
get_subpx_dir
(
)
;
if
self
.
flags
.
contains
(
FontInstanceFlags
:
:
TRANSPOSE
)
{
subpx_dir
=
subpx_dir
.
swap_xy
(
)
;
}
subpx_dir
}
else
{
SubpixelDirection
:
:
None
}
}
#
[
allow
(
dead_code
)
]
pub
fn
get_subpx_offset
(
&
self
glyph
:
&
GlyphKey
)
-
>
(
f64
f64
)
{
if
self
.
use_subpixel_position
(
)
{
let
(
dx
dy
)
=
glyph
.
subpixel_offset
(
)
;
(
dx
.
into
(
)
dy
.
into
(
)
)
}
else
{
(
0
.
0
0
.
0
)
}
}
#
[
allow
(
dead_code
)
]
pub
fn
get_glyph_format
(
&
self
)
-
>
GlyphFormat
{
match
self
.
render_mode
{
FontRenderMode
:
:
Mono
|
FontRenderMode
:
:
Alpha
=
>
self
.
get_alpha_glyph_format
(
)
FontRenderMode
:
:
Subpixel
=
>
self
.
get_subpixel_glyph_format
(
)
}
}
#
[
allow
(
dead_code
)
]
pub
fn
get_extra_strikes
(
&
self
x_scale
:
f64
)
-
>
usize
{
if
self
.
flags
.
contains
(
FontInstanceFlags
:
:
SYNTHETIC_BOLD
)
{
let
mut
bold_offset
=
self
.
size
.
to_f64_px
(
)
/
48
.
0
;
if
bold_offset
<
1
.
0
{
bold_offset
=
0
.
25
+
0
.
75
*
bold_offset
;
}
(
bold_offset
*
x_scale
)
.
max
(
1
.
0
)
.
round
(
)
as
usize
}
else
{
0
}
}
pub
fn
synthesize_italics
(
&
self
transform
:
FontTransform
size
:
f64
)
-
>
(
FontTransform
(
f64
f64
)
)
{
transform
.
synthesize_italics
(
self
.
synthetic_italics
size
self
.
flags
.
contains
(
FontInstanceFlags
:
:
VERTICAL
)
)
}
#
[
allow
(
dead_code
)
]
pub
fn
get_transformed_size
(
&
self
)
-
>
f64
{
let
(
_
y_scale
)
=
self
.
transform
.
compute_scale
(
)
.
unwrap_or
(
(
1
.
0
1
.
0
)
)
;
self
.
size
.
to_f64_px
(
)
*
y_scale
}
}
#
[
repr
(
u32
)
]
#
[
derive
(
Copy
Clone
Hash
PartialEq
Eq
Debug
Ord
PartialOrd
)
]
pub
enum
SubpixelDirection
{
None
=
0
Horizontal
Vertical
Mixed
}
impl
SubpixelDirection
{
pub
fn
limit_by
(
self
glyph_format
:
GlyphFormat
)
-
>
Self
{
match
glyph_format
{
GlyphFormat
:
:
Bitmap
|
GlyphFormat
:
:
ColorBitmap
=
>
SubpixelDirection
:
:
None
_
=
>
self
}
}
pub
fn
swap_xy
(
self
)
-
>
Self
{
match
self
{
SubpixelDirection
:
:
None
|
SubpixelDirection
:
:
Mixed
=
>
self
SubpixelDirection
:
:
Horizontal
=
>
SubpixelDirection
:
:
Vertical
SubpixelDirection
:
:
Vertical
=
>
SubpixelDirection
:
:
Horizontal
}
}
}
#
[
repr
(
u8
)
]
#
[
derive
(
Hash
Clone
Copy
Debug
Eq
Ord
PartialEq
PartialOrd
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
enum
SubpixelOffset
{
Zero
=
0
Quarter
=
1
Half
=
2
ThreeQuarters
=
3
}
impl
SubpixelOffset
{
fn
quantize
(
pos
:
f32
)
-
>
Self
{
let
apos
=
(
(
pos
-
pos
.
floor
(
)
)
*
8
.
0
)
as
i32
;
match
apos
{
1
.
.
=
2
=
>
SubpixelOffset
:
:
Quarter
3
.
.
=
4
=
>
SubpixelOffset
:
:
Half
5
.
.
=
6
=
>
SubpixelOffset
:
:
ThreeQuarters
_
=
>
SubpixelOffset
:
:
Zero
}
}
}
impl
Into
<
f64
>
for
SubpixelOffset
{
fn
into
(
self
)
-
>
f64
{
match
self
{
SubpixelOffset
:
:
Zero
=
>
0
.
0
SubpixelOffset
:
:
Quarter
=
>
0
.
25
SubpixelOffset
:
:
Half
=
>
0
.
5
SubpixelOffset
:
:
ThreeQuarters
=
>
0
.
75
}
}
}
#
[
derive
(
Clone
Hash
PartialEq
Eq
Debug
Ord
PartialOrd
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
GlyphKey
(
u32
)
;
impl
GlyphKey
{
pub
fn
new
(
index
:
u32
point
:
DevicePoint
subpx_dir
:
SubpixelDirection
)
-
>
Self
{
let
(
dx
dy
)
=
match
subpx_dir
{
SubpixelDirection
:
:
None
=
>
(
0
.
0
0
.
0
)
SubpixelDirection
:
:
Horizontal
=
>
(
point
.
x
0
.
0
)
SubpixelDirection
:
:
Vertical
=
>
(
0
.
0
point
.
y
)
SubpixelDirection
:
:
Mixed
=
>
(
point
.
x
point
.
y
)
}
;
let
sox
=
SubpixelOffset
:
:
quantize
(
dx
)
;
let
soy
=
SubpixelOffset
:
:
quantize
(
dy
)
;
assert_eq
!
(
0
index
&
0xF0000000
)
;
GlyphKey
(
index
|
(
sox
as
u32
)
<
<
28
|
(
soy
as
u32
)
<
<
30
)
}
pub
fn
index
(
&
self
)
-
>
GlyphIndex
{
self
.
0
&
0x0FFFFFFF
}
fn
subpixel_offset
(
&
self
)
-
>
(
SubpixelOffset
SubpixelOffset
)
{
let
x
=
(
self
.
0
>
>
28
)
as
u8
&
3
;
let
y
=
(
self
.
0
>
>
30
)
as
u8
&
3
;
unsafe
{
(
mem
:
:
transmute
(
x
)
mem
:
:
transmute
(
y
)
)
}
}
}
#
[
derive
(
Copy
Clone
PartialEq
Eq
Hash
Debug
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
#
[
allow
(
dead_code
)
]
pub
enum
GlyphFormat
{
Alpha
TransformedAlpha
Subpixel
TransformedSubpixel
Bitmap
ColorBitmap
}
impl
GlyphFormat
{
pub
fn
ignore_color
(
self
)
-
>
Self
{
match
self
{
GlyphFormat
:
:
ColorBitmap
=
>
GlyphFormat
:
:
Bitmap
_
=
>
self
}
}
}
pub
struct
RasterizedGlyph
{
pub
top
:
f32
pub
left
:
f32
pub
width
:
i32
pub
height
:
i32
pub
scale
:
f32
pub
format
:
GlyphFormat
pub
bytes
:
Vec
<
u8
>
}
impl
RasterizedGlyph
{
#
[
allow
(
dead_code
)
]
pub
fn
downscale_bitmap_if_required
(
&
mut
self
font
:
&
FontInstance
)
{
match
self
.
format
{
GlyphFormat
:
:
Bitmap
|
GlyphFormat
:
:
ColorBitmap
=
>
{
}
_
=
>
return
}
let
(
x_scale
y_scale
)
=
font
.
transform
.
compute_scale
(
)
.
unwrap_or
(
(
1
.
0
1
.
0
)
)
;
let
upscaled
=
x_scale
.
max
(
y_scale
)
as
f32
;
let
mut
new_scale
=
self
.
scale
;
if
new_scale
*
upscaled
<
=
0
.
0
{
return
;
}
let
mut
steps
=
0
;
while
new_scale
*
upscaled
<
=
0
.
5
{
new_scale
*
=
2
.
0
;
steps
+
=
1
;
}
if
steps
=
=
0
{
return
;
}
let
new_width
=
(
self
.
width
as
usize
+
(
1
<
<
steps
)
-
1
)
>
>
steps
;
let
new_height
=
(
self
.
height
as
usize
+
(
1
<
<
steps
)
-
1
)
>
>
steps
;
let
mut
new_bytes
:
Vec
<
u8
>
=
Vec
:
:
with_capacity
(
new_width
*
new_height
*
4
)
;
for
y
in
0
.
.
new_height
{
for
x
in
0
.
.
new_width
{
let
src_y
=
y
<
<
steps
;
let
src_x
=
x
<
<
steps
;
let
y_samples
=
(
1
<
<
steps
)
.
min
(
self
.
height
as
usize
-
src_y
)
;
let
x_samples
=
(
1
<
<
steps
)
.
min
(
self
.
width
as
usize
-
src_x
)
;
let
num_samples
=
(
x_samples
*
y_samples
)
as
u32
;
let
mut
src_idx
=
(
src_y
*
self
.
width
as
usize
+
src_x
)
*
4
;
let
mut
accum
=
[
num_samples
/
2
;
4
]
;
for
_
in
0
.
.
y_samples
{
for
_
in
0
.
.
x_samples
{
accum
[
0
]
+
=
self
.
bytes
[
src_idx
+
0
]
as
u32
;
accum
[
1
]
+
=
self
.
bytes
[
src_idx
+
1
]
as
u32
;
accum
[
2
]
+
=
self
.
bytes
[
src_idx
+
2
]
as
u32
;
accum
[
3
]
+
=
self
.
bytes
[
src_idx
+
3
]
as
u32
;
src_idx
+
=
4
;
}
src_idx
+
=
(
self
.
width
as
usize
-
x_samples
)
*
4
;
}
new_bytes
.
extend_from_slice
(
&
[
(
accum
[
0
]
/
num_samples
)
as
u8
(
accum
[
1
]
/
num_samples
)
as
u8
(
accum
[
2
]
/
num_samples
)
as
u8
(
accum
[
3
]
/
num_samples
)
as
u8
]
)
;
}
}
self
.
top
/
=
(
1
<
<
steps
)
as
f32
;
self
.
left
/
=
(
1
<
<
steps
)
as
f32
;
self
.
width
=
new_width
as
i32
;
self
.
height
=
new_height
as
i32
;
self
.
scale
=
new_scale
;
self
.
bytes
=
new_bytes
;
}
}
pub
struct
FontContexts
{
worker_contexts
:
Vec
<
Mutex
<
FontContext
>
>
shared_context
:
Mutex
<
FontContext
>
#
[
allow
(
dead_code
)
]
workers
:
Arc
<
ThreadPool
>
locked_mutex
:
Mutex
<
bool
>
locked_cond
:
Condvar
}
impl
FontContexts
{
pub
fn
lock_context
(
&
self
id
:
Option
<
usize
>
)
-
>
MutexGuard
<
FontContext
>
{
match
id
{
Some
(
index
)
=
>
self
.
worker_contexts
[
index
]
.
lock
(
)
.
unwrap
(
)
None
=
>
self
.
shared_context
.
lock
(
)
.
unwrap
(
)
}
}
pub
fn
lock_shared_context
(
&
self
)
-
>
MutexGuard
<
FontContext
>
{
self
.
shared_context
.
lock
(
)
.
unwrap
(
)
}
pub
fn
num_worker_contexts
(
&
self
)
-
>
usize
{
self
.
worker_contexts
.
len
(
)
}
}
pub
trait
AsyncForEach
<
T
>
{
fn
async_for_each
<
F
:
Fn
(
MutexGuard
<
T
>
)
+
Send
+
'
static
>
(
&
self
f
:
F
)
;
}
impl
AsyncForEach
<
FontContext
>
for
Arc
<
FontContexts
>
{
fn
async_for_each
<
F
:
Fn
(
MutexGuard
<
FontContext
>
)
+
Send
+
'
static
>
(
&
self
f
:
F
)
{
let
mut
locked
=
self
.
locked_mutex
.
lock
(
)
.
unwrap
(
)
;
*
locked
=
false
;
let
font_contexts
=
self
.
clone
(
)
;
self
.
workers
.
spawn
(
move
|
|
{
let
mut
locks
=
Vec
:
:
with_capacity
(
font_contexts
.
num_worker_contexts
(
)
+
1
)
;
locks
.
push
(
font_contexts
.
lock_shared_context
(
)
)
;
for
i
in
0
.
.
font_contexts
.
num_worker_contexts
(
)
{
locks
.
push
(
font_contexts
.
lock_context
(
Some
(
i
)
)
)
;
}
*
font_contexts
.
locked_mutex
.
lock
(
)
.
unwrap
(
)
=
true
;
font_contexts
.
locked_cond
.
notify_all
(
)
;
for
context
in
locks
{
f
(
context
)
;
}
}
)
;
while
!
*
locked
{
locked
=
self
.
locked_cond
.
wait
(
locked
)
.
unwrap
(
)
;
}
}
}
pub
struct
GlyphRasterizer
{
#
[
allow
(
dead_code
)
]
workers
:
Arc
<
ThreadPool
>
font_contexts
:
Arc
<
FontContexts
>
#
[
allow
(
dead_code
)
]
pending_glyphs
:
usize
#
[
allow
(
dead_code
)
]
glyph_rx
:
Receiver
<
GlyphRasterJobs
>
#
[
allow
(
dead_code
)
]
glyph_tx
:
Sender
<
GlyphRasterJobs
>
fonts_to_remove
:
Vec
<
FontKey
>
font_instances_to_remove
:
Vec
<
FontInstance
>
#
[
allow
(
dead_code
)
]
next_gpu_glyph_cache_key
:
GpuGlyphCacheKey
enable_multithreading
:
bool
}
impl
GlyphRasterizer
{
pub
fn
new
(
workers
:
Arc
<
ThreadPool
>
)
-
>
Result
<
Self
ResourceCacheError
>
{
let
(
glyph_tx
glyph_rx
)
=
channel
(
)
;
let
num_workers
=
workers
.
current_num_threads
(
)
;
let
mut
contexts
=
Vec
:
:
with_capacity
(
num_workers
)
;
let
shared_context
=
FontContext
:
:
new
(
)
?
;
for
_
in
0
.
.
num_workers
{
contexts
.
push
(
Mutex
:
:
new
(
FontContext
:
:
new
(
)
?
)
)
;
}
let
font_context
=
FontContexts
{
worker_contexts
:
contexts
shared_context
:
Mutex
:
:
new
(
shared_context
)
workers
:
Arc
:
:
clone
(
&
workers
)
locked_mutex
:
Mutex
:
:
new
(
false
)
locked_cond
:
Condvar
:
:
new
(
)
}
;
Ok
(
GlyphRasterizer
{
font_contexts
:
Arc
:
:
new
(
font_context
)
pending_glyphs
:
0
glyph_rx
glyph_tx
workers
fonts_to_remove
:
Vec
:
:
new
(
)
font_instances_to_remove
:
Vec
:
:
new
(
)
next_gpu_glyph_cache_key
:
GpuGlyphCacheKey
(
0
)
enable_multithreading
:
true
}
)
}
pub
fn
add_font
(
&
mut
self
font_key
:
FontKey
template
:
FontTemplate
)
{
self
.
font_contexts
.
async_for_each
(
move
|
mut
context
|
{
context
.
add_font
(
&
font_key
&
template
)
;
}
)
;
}
pub
fn
delete_font
(
&
mut
self
font_key
:
FontKey
)
{
self
.
fonts_to_remove
.
push
(
font_key
)
;
}
pub
fn
delete_font_instance
(
&
mut
self
instance
:
&
FontInstance
)
{
self
.
font_instances_to_remove
.
push
(
instance
.
clone
(
)
)
;
}
pub
fn
prepare_font
(
&
self
font
:
&
mut
FontInstance
)
{
FontContext
:
:
prepare_font
(
font
)
;
font
.
transform
=
font
.
transform
.
quantize
(
)
;
}
pub
fn
get_glyph_dimensions
(
&
mut
self
font
:
&
FontInstance
glyph_index
:
GlyphIndex
)
-
>
Option
<
GlyphDimensions
>
{
let
glyph_key
=
GlyphKey
:
:
new
(
glyph_index
DevicePoint
:
:
zero
(
)
SubpixelDirection
:
:
None
)
;
self
.
font_contexts
.
lock_shared_context
(
)
.
get_glyph_dimensions
(
font
&
glyph_key
)
}
pub
fn
get_glyph_index
(
&
mut
self
font_key
:
FontKey
ch
:
char
)
-
>
Option
<
u32
>
{
self
.
font_contexts
.
lock_shared_context
(
)
.
get_glyph_index
(
font_key
ch
)
}
fn
remove_dead_fonts
(
&
mut
self
)
{
if
self
.
fonts_to_remove
.
is_empty
(
)
&
&
self
.
font_instances_to_remove
.
is_empty
(
)
{
return
}
profile_scope
!
(
"
remove_dead_fonts
"
)
;
let
fonts_to_remove
=
mem
:
:
replace
(
&
mut
self
.
fonts_to_remove
Vec
:
:
new
(
)
)
;
let
font_instances_to_remove
=
mem
:
:
replace
(
&
mut
self
.
font_instances_to_remove
Vec
:
:
new
(
)
)
;
self
.
font_contexts
.
async_for_each
(
move
|
mut
context
|
{
for
font_key
in
&
fonts_to_remove
{
context
.
delete_font
(
font_key
)
;
}
for
instance
in
&
font_instances_to_remove
{
context
.
delete_font_instance
(
instance
)
;
}
}
)
;
}
#
[
cfg
(
feature
=
"
replay
"
)
]
pub
fn
reset
(
&
mut
self
)
{
self
.
pending_glyphs
=
0
;
self
.
fonts_to_remove
.
clear
(
)
;
self
.
font_instances_to_remove
.
clear
(
)
;
}
}
trait
AddFont
{
fn
add_font
(
&
mut
self
font_key
:
&
FontKey
template
:
&
FontTemplate
)
;
}
impl
AddFont
for
FontContext
{
fn
add_font
(
&
mut
self
font_key
:
&
FontKey
template
:
&
FontTemplate
)
{
match
*
template
{
FontTemplate
:
:
Raw
(
ref
bytes
index
)
=
>
{
self
.
add_raw_font
(
font_key
bytes
.
clone
(
)
index
)
;
}
FontTemplate
:
:
Native
(
ref
native_font_handle
)
=
>
{
self
.
add_native_font
(
font_key
(
*
native_font_handle
)
.
clone
(
)
)
;
}
}
}
}
#
[
allow
(
dead_code
)
]
pub
(
in
crate
:
:
glyph_rasterizer
)
struct
GlyphRasterJob
{
key
:
GlyphKey
result
:
GlyphRasterResult
}
#
[
allow
(
dead_code
)
]
pub
enum
GlyphRasterError
{
LoadFailed
}
#
[
allow
(
dead_code
)
]
pub
type
GlyphRasterResult
=
Result
<
RasterizedGlyph
GlyphRasterError
>
;
#
[
derive
(
Debug
Copy
Clone
Eq
Hash
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
GpuGlyphCacheKey
(
pub
u32
)
;
#
[
allow
(
dead_code
)
]
struct
GlyphRasterJobs
{
font
:
FontInstance
jobs
:
Vec
<
GlyphRasterJob
>
}
#
[
cfg
(
test
)
]
mod
test_glyph_rasterizer
{
#
[
test
]
fn
rasterize_200_glyphs
(
)
{
use
rayon
:
:
ThreadPoolBuilder
;
use
std
:
:
fs
:
:
File
;
use
std
:
:
io
:
:
Read
;
use
crate
:
:
texture_cache
:
:
TextureCache
;
use
crate
:
:
glyph_cache
:
:
GlyphCache
;
use
crate
:
:
gpu_cache
:
:
GpuCache
;
use
crate
:
:
render_task_cache
:
:
RenderTaskCache
;
use
crate
:
:
render_task_graph
:
:
{
RenderTaskGraph
RenderTaskGraphCounters
}
;
use
crate
:
:
profiler
:
:
TextureCacheProfileCounters
;
use
api
:
:
{
FontKey
FontInstanceKey
FontSize
FontTemplate
FontRenderMode
IdNamespace
ColorU
}
;
use
api
:
:
units
:
:
DevicePoint
;
use
crate
:
:
render_backend
:
:
FrameId
;
use
std
:
:
sync
:
:
Arc
;
use
crate
:
:
glyph_rasterizer
:
:
{
FORMAT
FontInstance
BaseFontInstance
GlyphKey
GlyphRasterizer
}
;
let
worker
=
ThreadPoolBuilder
:
:
new
(
)
.
thread_name
(
|
idx
|
{
format
!
(
"
WRWorker
#
{
}
"
idx
)
}
)
.
build
(
)
;
let
workers
=
Arc
:
:
new
(
worker
.
unwrap
(
)
)
;
let
mut
glyph_rasterizer
=
GlyphRasterizer
:
:
new
(
workers
)
.
unwrap
(
)
;
let
mut
glyph_cache
=
GlyphCache
:
:
new
(
GlyphCache
:
:
DEFAULT_MAX_BYTES_USED
)
;
let
mut
gpu_cache
=
GpuCache
:
:
new_for_testing
(
)
;
let
mut
texture_cache
=
TextureCache
:
:
new_for_testing
(
2048
1024
FORMAT
)
;
let
mut
render_task_cache
=
RenderTaskCache
:
:
new
(
)
;
let
mut
render_task_tree
=
RenderTaskGraph
:
:
new
(
FrameId
:
:
INVALID
&
RenderTaskGraphCounters
:
:
new
(
)
)
;
let
mut
font_file
=
File
:
:
open
(
"
.
.
/
wrench
/
reftests
/
text
/
VeraBd
.
ttf
"
)
.
expect
(
"
Couldn
'
t
open
font
file
"
)
;
let
mut
font_data
=
vec
!
[
]
;
font_file
.
read_to_end
(
&
mut
font_data
)
.
expect
(
"
failed
to
read
font
file
"
)
;
let
font_key
=
FontKey
:
:
new
(
IdNamespace
(
0
)
0
)
;
glyph_rasterizer
.
add_font
(
font_key
FontTemplate
:
:
Raw
(
Arc
:
:
new
(
font_data
)
0
)
)
;
let
font
=
FontInstance
:
:
from_base
(
Arc
:
:
new
(
BaseFontInstance
{
instance_key
:
FontInstanceKey
(
IdNamespace
(
0
)
0
)
font_key
size
:
FontSize
:
:
from_f32_px
(
32
.
0
)
bg_color
:
ColorU
:
:
new
(
0
0
0
0
)
render_mode
:
FontRenderMode
:
:
Subpixel
flags
:
Default
:
:
default
(
)
synthetic_italics
:
Default
:
:
default
(
)
platform_options
:
None
variations
:
Vec
:
:
new
(
)
}
)
)
;
let
subpx_dir
=
font
.
get_subpx_dir
(
)
;
let
mut
glyph_keys
=
Vec
:
:
with_capacity
(
200
)
;
for
i
in
0
.
.
200
{
glyph_keys
.
push
(
GlyphKey
:
:
new
(
i
DevicePoint
:
:
zero
(
)
subpx_dir
)
)
;
}
for
i
in
0
.
.
4
{
glyph_rasterizer
.
request_glyphs
(
&
mut
glyph_cache
font
.
clone
(
)
&
glyph_keys
[
(
50
*
i
)
.
.
(
50
*
(
i
+
1
)
)
]
&
mut
texture_cache
&
mut
gpu_cache
&
mut
render_task_cache
&
mut
render_task_tree
)
;
}
glyph_rasterizer
.
delete_font
(
font_key
)
;
glyph_rasterizer
.
resolve_glyphs
(
&
mut
glyph_cache
&
mut
TextureCache
:
:
new_for_testing
(
4096
1024
FORMAT
)
&
mut
gpu_cache
&
mut
render_task_cache
&
mut
render_task_tree
&
mut
TextureCacheProfileCounters
:
:
new
(
)
)
;
}
#
[
test
]
fn
test_subpx_quantize
(
)
{
use
crate
:
:
glyph_rasterizer
:
:
SubpixelOffset
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
0
)
SubpixelOffset
:
:
Zero
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
-
0
.
0
)
SubpixelOffset
:
:
Zero
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
1
)
SubpixelOffset
:
:
Zero
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
01
)
SubpixelOffset
:
:
Zero
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
05
)
SubpixelOffset
:
:
Zero
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
12
)
SubpixelOffset
:
:
Zero
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
124
)
SubpixelOffset
:
:
Zero
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
125
)
SubpixelOffset
:
:
Quarter
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
2
)
SubpixelOffset
:
:
Quarter
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
25
)
SubpixelOffset
:
:
Quarter
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
33
)
SubpixelOffset
:
:
Quarter
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
374
)
SubpixelOffset
:
:
Quarter
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
375
)
SubpixelOffset
:
:
Half
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
4
)
SubpixelOffset
:
:
Half
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
5
)
SubpixelOffset
:
:
Half
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
58
)
SubpixelOffset
:
:
Half
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
624
)
SubpixelOffset
:
:
Half
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
625
)
SubpixelOffset
:
:
ThreeQuarters
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
67
)
SubpixelOffset
:
:
ThreeQuarters
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
7
)
SubpixelOffset
:
:
ThreeQuarters
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
78
)
SubpixelOffset
:
:
ThreeQuarters
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
874
)
SubpixelOffset
:
:
ThreeQuarters
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
875
)
SubpixelOffset
:
:
Zero
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
89
)
SubpixelOffset
:
:
Zero
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
91
)
SubpixelOffset
:
:
Zero
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
967
)
SubpixelOffset
:
:
Zero
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
0
.
999
)
SubpixelOffset
:
:
Zero
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
-
1
.
0
)
SubpixelOffset
:
:
Zero
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
1
.
0
)
SubpixelOffset
:
:
Zero
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
1
.
5
)
SubpixelOffset
:
:
Half
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
-
1
.
625
)
SubpixelOffset
:
:
Half
)
;
assert_eq
!
(
SubpixelOffset
:
:
quantize
(
-
4
.
33
)
SubpixelOffset
:
:
ThreeQuarters
)
;
}
}
