use
api
:
:
{
BorderRadius
ClipMode
ComplexClipRegion
DeviceIntRect
DevicePixelScale
ImageMask
}
;
use
api
:
:
{
ImageRendering
LayoutRect
LayoutSize
LayoutPoint
LayoutVector2D
}
;
use
api
:
:
{
BoxShadowClipMode
LayoutToWorldScale
PicturePixel
WorldPixel
}
;
use
api
:
:
{
PictureRect
LayoutPixel
WorldPoint
WorldSize
WorldRect
LayoutToWorldTransform
}
;
use
api
:
:
{
VoidPtrToSizeFn
LayoutRectAu
ImageKey
AuHelpers
}
;
use
app_units
:
:
Au
;
use
border
:
:
{
ensure_no_corner_overlap
BorderRadiusAu
}
;
use
box_shadow
:
:
{
BLUR_SAMPLE_SCALE
BoxShadowClipSource
BoxShadowCacheKey
}
;
use
clip_scroll_tree
:
:
{
ClipScrollTree
ROOT_SPATIAL_NODE_INDEX
SpatialNodeIndex
}
;
use
ellipse
:
:
Ellipse
;
use
gpu_cache
:
:
{
GpuCache
GpuCacheHandle
ToGpuBlocks
}
;
use
gpu_types
:
:
{
BoxShadowStretchMode
}
;
use
image
:
:
{
self
Repetition
}
;
use
intern
;
use
internal_types
:
:
FastHashSet
;
use
prim_store
:
:
{
ClipData
ImageMaskData
SpaceMapper
VisibleMaskImageTile
}
;
use
render_task
:
:
to_cache_size
;
use
resource_cache
:
:
{
ImageRequest
ResourceCache
}
;
use
std
:
:
{
cmp
u32
}
;
use
std
:
:
os
:
:
raw
:
:
c_void
;
use
util
:
:
{
extract_inner_rect_safe
project_rect
ScaleOffset
}
;
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
Hash
PartialEq
)
]
pub
struct
ClipDataMarker
;
pub
type
ClipDataStore
=
intern
:
:
DataStore
<
ClipItemKey
ClipNode
ClipDataMarker
>
;
pub
type
ClipDataHandle
=
intern
:
:
Handle
<
ClipDataMarker
>
;
pub
type
ClipDataUpdateList
=
intern
:
:
UpdateList
<
ClipItemKey
>
;
pub
type
ClipDataInterner
=
intern
:
:
Interner
<
ClipItemKey
ClipItemSceneData
ClipDataMarker
>
;
pub
type
ClipUid
=
intern
:
:
ItemUid
<
ClipDataMarker
>
;
#
[
derive
(
Debug
)
]
enum
ClipResult
{
Accept
Reject
Partial
}
#
[
derive
(
Debug
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
ClipNode
{
pub
item
:
ClipItem
pub
gpu_cache_handle
:
GpuCacheHandle
}
impl
From
<
ClipItemKey
>
for
ClipNode
{
fn
from
(
item
:
ClipItemKey
)
-
>
Self
{
let
item
=
match
item
{
ClipItemKey
:
:
Rectangle
(
rect
mode
)
=
>
{
ClipItem
:
:
Rectangle
(
LayoutRect
:
:
from_au
(
rect
)
mode
)
}
ClipItemKey
:
:
RoundedRectangle
(
rect
radius
mode
)
=
>
{
ClipItem
:
:
RoundedRectangle
(
LayoutRect
:
:
from_au
(
rect
)
radius
.
into
(
)
mode
)
}
ClipItemKey
:
:
ImageMask
(
rect
image
repeat
)
=
>
{
ClipItem
:
:
Image
{
mask
:
ImageMask
{
image
rect
:
LayoutRect
:
:
from_au
(
rect
)
repeat
}
visible_tiles
:
None
}
}
ClipItemKey
:
:
BoxShadow
(
shadow_rect
shadow_radius
prim_shadow_rect
blur_radius
clip_mode
)
=
>
{
ClipItem
:
:
new_box_shadow
(
LayoutRect
:
:
from_au
(
shadow_rect
)
shadow_radius
.
into
(
)
LayoutRect
:
:
from_au
(
prim_shadow_rect
)
blur_radius
.
to_f32_px
(
)
clip_mode
)
}
}
;
ClipNode
{
item
gpu_cache_handle
:
GpuCacheHandle
:
:
new
(
)
}
}
}
bitflags
!
{
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
ClipNodeFlags
:
u8
{
const
SAME_SPATIAL_NODE
=
0x1
;
const
SAME_COORD_SYSTEM
=
0x2
;
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
Hash
)
]
pub
struct
ClipChainId
(
pub
u32
)
;
impl
ClipChainId
{
pub
const
NONE
:
Self
=
ClipChainId
(
u32
:
:
MAX
)
;
}
#
[
derive
(
Clone
)
]
pub
struct
ClipChainNode
{
pub
handle
:
ClipDataHandle
pub
spatial_node_index
:
SpatialNodeIndex
pub
parent_clip_chain_id
:
ClipChainId
}
#
[
derive
(
Clone
Copy
Debug
PartialEq
Hash
Eq
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
ClipNodeIndex
(
pub
u32
)
;
#
[
derive
(
Clone
Copy
Debug
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
ClipNodeInstance
{
pub
handle
:
ClipDataHandle
pub
flags
:
ClipNodeFlags
pub
spatial_node_index
:
SpatialNodeIndex
}
#
[
derive
(
Debug
Copy
Clone
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
ClipNodeRange
{
pub
first
:
u32
pub
count
:
u32
}
#
[
derive
(
Debug
)
]
enum
ClipSpaceConversion
{
Local
ScaleOffset
(
ScaleOffset
)
Transform
(
LayoutToWorldTransform
)
}
struct
ClipNodeInfo
{
conversion
:
ClipSpaceConversion
handle
:
ClipDataHandle
spatial_node_index
:
SpatialNodeIndex
}
impl
ClipNode
{
pub
fn
update
(
&
mut
self
gpu_cache
:
&
mut
GpuCache
resource_cache
:
&
mut
ResourceCache
device_pixel_scale
:
DevicePixelScale
clipped_rect
:
&
LayoutRect
)
{
match
self
.
item
{
ClipItem
:
:
Image
{
ref
mask
ref
mut
visible_tiles
}
=
>
{
let
request
=
ImageRequest
{
key
:
mask
.
image
rendering
:
ImageRendering
:
:
Auto
tile
:
None
}
;
*
visible_tiles
=
None
;
if
let
Some
(
props
)
=
resource_cache
.
get_image_properties
(
mask
.
image
)
{
if
let
Some
(
tile_size
)
=
props
.
tiling
{
let
mut
mask_tiles
=
Vec
:
:
new
(
)
;
let
device_image_size
=
props
.
descriptor
.
size
;
let
visible_rect
=
if
mask
.
repeat
{
*
clipped_rect
}
else
{
clipped_rect
.
intersection
(
&
mask
.
rect
)
.
unwrap
(
)
}
;
let
repetitions
=
image
:
:
repetitions
(
&
mask
.
rect
&
visible_rect
mask
.
rect
.
size
)
;
for
Repetition
{
origin
.
.
}
in
repetitions
{
let
image_rect
=
LayoutRect
{
origin
size
:
mask
.
rect
.
size
}
;
let
tiles
=
image
:
:
tiles
(
&
image_rect
&
visible_rect
&
device_image_size
tile_size
as
i32
)
;
for
tile
in
tiles
{
resource_cache
.
request_image
(
request
.
with_tile
(
tile
.
offset
)
gpu_cache
)
;
let
mut
handle
=
GpuCacheHandle
:
:
new
(
)
;
if
let
Some
(
request
)
=
gpu_cache
.
request
(
&
mut
handle
)
{
let
data
=
ImageMaskData
{
local_mask_rect
:
mask
.
rect
local_tile_rect
:
tile
.
rect
}
;
data
.
write_gpu_blocks
(
request
)
;
}
mask_tiles
.
push
(
VisibleMaskImageTile
{
tile_offset
:
tile
.
offset
handle
}
)
;
}
}
*
visible_tiles
=
Some
(
mask_tiles
)
;
}
else
{
if
let
Some
(
request
)
=
gpu_cache
.
request
(
&
mut
self
.
gpu_cache_handle
)
{
let
data
=
ImageMaskData
{
local_mask_rect
:
mask
.
rect
local_tile_rect
:
mask
.
rect
}
;
data
.
write_gpu_blocks
(
request
)
;
}
resource_cache
.
request_image
(
request
gpu_cache
)
;
}
}
}
ClipItem
:
:
BoxShadow
(
ref
mut
info
)
=
>
{
if
let
Some
(
mut
request
)
=
gpu_cache
.
request
(
&
mut
self
.
gpu_cache_handle
)
{
request
.
push
(
[
info
.
original_alloc_size
.
width
info
.
original_alloc_size
.
height
info
.
clip_mode
as
i32
as
f32
0
.
0
]
)
;
request
.
push
(
[
info
.
stretch_mode_x
as
i32
as
f32
info
.
stretch_mode_y
as
i32
as
f32
0
.
0
0
.
0
]
)
;
request
.
push
(
info
.
prim_shadow_rect
)
;
}
let
blur_radius_dp
=
info
.
blur_radius
*
0
.
5
;
let
content_scale
=
LayoutToWorldScale
:
:
new
(
1
.
0
)
*
device_pixel_scale
;
let
cache_size
=
to_cache_size
(
info
.
shadow_rect_alloc_size
*
content_scale
)
;
let
bs_cache_key
=
BoxShadowCacheKey
{
blur_radius_dp
:
(
blur_radius_dp
*
content_scale
.
0
)
.
round
(
)
as
i32
clip_mode
:
info
.
clip_mode
original_alloc_size
:
(
info
.
original_alloc_size
*
content_scale
)
.
round
(
)
.
to_i32
(
)
br_top_left
:
(
info
.
shadow_radius
.
top_left
*
content_scale
)
.
round
(
)
.
to_i32
(
)
br_top_right
:
(
info
.
shadow_radius
.
top_right
*
content_scale
)
.
round
(
)
.
to_i32
(
)
br_bottom_right
:
(
info
.
shadow_radius
.
bottom_right
*
content_scale
)
.
round
(
)
.
to_i32
(
)
br_bottom_left
:
(
info
.
shadow_radius
.
bottom_left
*
content_scale
)
.
round
(
)
.
to_i32
(
)
}
;
info
.
cache_key
=
Some
(
(
cache_size
bs_cache_key
)
)
;
if
let
Some
(
mut
request
)
=
gpu_cache
.
request
(
&
mut
info
.
clip_data_handle
)
{
let
data
=
ClipData
:
:
rounded_rect
(
&
info
.
minimal_shadow_rect
&
info
.
shadow_radius
ClipMode
:
:
Clip
)
;
data
.
write
(
&
mut
request
)
;
}
}
ClipItem
:
:
Rectangle
(
rect
mode
)
=
>
{
if
let
Some
(
mut
request
)
=
gpu_cache
.
request
(
&
mut
self
.
gpu_cache_handle
)
{
let
data
=
ClipData
:
:
uniform
(
rect
0
.
0
mode
)
;
data
.
write
(
&
mut
request
)
;
}
}
ClipItem
:
:
RoundedRectangle
(
ref
rect
ref
radius
mode
)
=
>
{
if
let
Some
(
mut
request
)
=
gpu_cache
.
request
(
&
mut
self
.
gpu_cache_handle
)
{
let
data
=
ClipData
:
:
rounded_rect
(
rect
radius
mode
)
;
data
.
write
(
&
mut
request
)
;
}
}
}
}
}
pub
struct
ClipStore
{
pub
clip_chain_nodes
:
Vec
<
ClipChainNode
>
clip_node_instances
:
Vec
<
ClipNodeInstance
>
clip_node_info
:
Vec
<
ClipNodeInfo
>
clip_node_collectors
:
Vec
<
ClipNodeCollector
>
}
#
[
derive
(
Debug
)
]
pub
struct
ClipChainInstance
{
pub
clips_range
:
ClipNodeRange
pub
local_clip_rect
:
LayoutRect
pub
has_non_local_clips
:
bool
pub
needs_mask
:
bool
pub
pic_clip_rect
:
PictureRect
}
impl
ClipStore
{
pub
fn
new
(
)
-
>
Self
{
ClipStore
{
clip_chain_nodes
:
Vec
:
:
new
(
)
clip_node_instances
:
Vec
:
:
new
(
)
clip_node_info
:
Vec
:
:
new
(
)
clip_node_collectors
:
Vec
:
:
new
(
)
}
}
pub
fn
get_clip_chain
(
&
self
clip_chain_id
:
ClipChainId
)
-
>
&
ClipChainNode
{
&
self
.
clip_chain_nodes
[
clip_chain_id
.
0
as
usize
]
}
pub
fn
add_clip_chain_node
(
&
mut
self
handle
:
ClipDataHandle
spatial_node_index
:
SpatialNodeIndex
parent_clip_chain_id
:
ClipChainId
)
-
>
ClipChainId
{
let
id
=
ClipChainId
(
self
.
clip_chain_nodes
.
len
(
)
as
u32
)
;
self
.
clip_chain_nodes
.
push
(
ClipChainNode
{
handle
spatial_node_index
parent_clip_chain_id
}
)
;
id
}
pub
fn
get_instance_from_range
(
&
self
node_range
:
&
ClipNodeRange
index
:
u32
)
-
>
&
ClipNodeInstance
{
&
self
.
clip_node_instances
[
(
node_range
.
first
+
index
)
as
usize
]
}
pub
fn
push_surface
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
)
{
self
.
clip_node_collectors
.
push
(
ClipNodeCollector
:
:
new
(
spatial_node_index
)
)
;
}
pub
fn
pop_surface
(
&
mut
self
)
-
>
ClipNodeCollector
{
self
.
clip_node_collectors
.
pop
(
)
.
unwrap
(
)
}
pub
fn
build_clip_chain_instance
(
&
mut
self
clip_chain_id
:
ClipChainId
local_prim_rect
:
LayoutRect
local_prim_clip_rect
:
LayoutRect
spatial_node_index
:
SpatialNodeIndex
prim_to_pic_mapper
:
&
SpaceMapper
<
LayoutPixel
PicturePixel
>
pic_to_world_mapper
:
&
SpaceMapper
<
PicturePixel
WorldPixel
>
clip_scroll_tree
:
&
ClipScrollTree
gpu_cache
:
&
mut
GpuCache
resource_cache
:
&
mut
ResourceCache
device_pixel_scale
:
DevicePixelScale
world_rect
:
&
WorldRect
clip_node_collector
:
&
Option
<
ClipNodeCollector
>
clip_data_store
:
&
mut
ClipDataStore
)
-
>
Option
<
ClipChainInstance
>
{
let
mut
local_clip_rect
=
local_prim_clip_rect
;
self
.
clip_node_info
.
clear
(
)
;
let
mut
current_clip_chain_id
=
clip_chain_id
;
while
current_clip_chain_id
!
=
ClipChainId
:
:
NONE
{
let
clip_chain_node
=
&
self
.
clip_chain_nodes
[
current_clip_chain_id
.
0
as
usize
]
;
match
self
.
clip_node_collectors
.
iter_mut
(
)
.
find
(
|
c
|
{
clip_chain_node
.
spatial_node_index
<
c
.
spatial_node_index
}
)
{
Some
(
collector
)
=
>
{
collector
.
insert
(
current_clip_chain_id
)
;
}
None
=
>
{
if
!
add_clip_node_to_current_chain
(
clip_chain_node
.
handle
clip_chain_node
.
spatial_node_index
spatial_node_index
&
mut
local_clip_rect
&
mut
self
.
clip_node_info
clip_data_store
clip_scroll_tree
)
{
return
None
;
}
}
}
current_clip_chain_id
=
clip_chain_node
.
parent_clip_chain_id
;
}
if
let
Some
(
clip_node_collector
)
=
clip_node_collector
{
for
clip_chain_id
in
&
clip_node_collector
.
clips
{
let
(
handle
clip_spatial_node_index
)
=
{
let
clip_chain_node
=
&
self
.
clip_chain_nodes
[
clip_chain_id
.
0
as
usize
]
;
(
clip_chain_node
.
handle
clip_chain_node
.
spatial_node_index
)
}
;
if
!
add_clip_node_to_current_chain
(
handle
clip_spatial_node_index
spatial_node_index
&
mut
local_clip_rect
&
mut
self
.
clip_node_info
clip_data_store
clip_scroll_tree
)
{
return
None
;
}
}
}
let
local_bounding_rect
=
local_prim_rect
.
intersection
(
&
local_clip_rect
)
?
;
let
pic_clip_rect
=
prim_to_pic_mapper
.
map
(
&
local_bounding_rect
)
?
;
let
world_clip_rect
=
pic_to_world_mapper
.
map
(
&
pic_clip_rect
)
?
;
let
first_clip_node_index
=
self
.
clip_node_instances
.
len
(
)
as
u32
;
let
mut
has_non_local_clips
=
false
;
let
mut
needs_mask
=
false
;
for
node_info
in
self
.
clip_node_info
.
drain
(
.
.
)
{
let
node
=
&
mut
clip_data_store
[
node_info
.
handle
]
;
let
clip_result
=
match
node_info
.
conversion
{
ClipSpaceConversion
:
:
Local
=
>
{
node
.
item
.
get_clip_result
(
&
local_bounding_rect
)
}
ClipSpaceConversion
:
:
ScaleOffset
(
ref
scale_offset
)
=
>
{
has_non_local_clips
=
true
;
node
.
item
.
get_clip_result
(
&
scale_offset
.
unmap_rect
(
&
local_bounding_rect
)
)
}
ClipSpaceConversion
:
:
Transform
(
ref
transform
)
=
>
{
has_non_local_clips
=
true
;
node
.
item
.
get_clip_result_complex
(
transform
&
world_clip_rect
world_rect
)
}
}
;
match
clip_result
{
ClipResult
:
:
Accept
=
>
{
}
ClipResult
:
:
Reject
=
>
{
return
None
;
}
ClipResult
:
:
Partial
=
>
{
node
.
update
(
gpu_cache
resource_cache
device_pixel_scale
&
local_bounding_rect
)
;
let
flags
=
match
node_info
.
conversion
{
ClipSpaceConversion
:
:
Local
=
>
{
ClipNodeFlags
:
:
SAME_SPATIAL_NODE
|
ClipNodeFlags
:
:
SAME_COORD_SYSTEM
}
ClipSpaceConversion
:
:
ScaleOffset
(
.
.
)
=
>
{
ClipNodeFlags
:
:
SAME_COORD_SYSTEM
}
ClipSpaceConversion
:
:
Transform
(
.
.
)
=
>
{
ClipNodeFlags
:
:
empty
(
)
}
}
;
needs_mask
|
=
match
node
.
item
{
ClipItem
:
:
Rectangle
(
_
ClipMode
:
:
ClipOut
)
|
ClipItem
:
:
RoundedRectangle
(
.
.
)
|
ClipItem
:
:
Image
{
.
.
}
|
ClipItem
:
:
BoxShadow
(
.
.
)
=
>
{
true
}
ClipItem
:
:
Rectangle
(
_
ClipMode
:
:
Clip
)
=
>
{
!
flags
.
contains
(
ClipNodeFlags
:
:
SAME_COORD_SYSTEM
)
}
}
;
let
instance
=
ClipNodeInstance
{
handle
:
node_info
.
handle
flags
spatial_node_index
:
node_info
.
spatial_node_index
}
;
self
.
clip_node_instances
.
push
(
instance
)
;
}
}
}
let
clips_range
=
ClipNodeRange
{
first
:
first_clip_node_index
count
:
self
.
clip_node_instances
.
len
(
)
as
u32
-
first_clip_node_index
}
;
Some
(
ClipChainInstance
{
clips_range
has_non_local_clips
local_clip_rect
pic_clip_rect
needs_mask
}
)
}
#
[
allow
(
dead_code
)
]
pub
fn
build_local_clip_rect
(
&
self
prim_clip_rect
:
LayoutRect
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
clip_interner
:
&
ClipDataInterner
)
-
>
LayoutRect
{
let
mut
clip_rect
=
prim_clip_rect
;
let
mut
current_clip_chain_id
=
clip_chain_id
;
while
current_clip_chain_id
!
=
ClipChainId
:
:
NONE
{
let
clip_chain_node
=
&
self
.
clip_chain_nodes
[
current_clip_chain_id
.
0
as
usize
]
;
if
clip_chain_node
.
spatial_node_index
=
=
spatial_node_index
{
let
clip_data
=
&
clip_interner
[
clip_chain_node
.
handle
]
;
clip_rect
=
clip_rect
.
intersection
(
&
clip_data
.
clip_rect
)
.
unwrap_or
(
LayoutRect
:
:
zero
(
)
)
;
}
current_clip_chain_id
=
clip_chain_node
.
parent_clip_chain_id
;
}
clip_rect
}
pub
fn
malloc_size_of
(
&
self
op
:
VoidPtrToSizeFn
)
-
>
usize
{
let
mut
size
=
0
;
unsafe
{
size
+
=
op
(
self
.
clip_chain_nodes
.
as_ptr
(
)
as
*
const
c_void
)
;
size
+
=
op
(
self
.
clip_node_instances
.
as_ptr
(
)
as
*
const
c_void
)
;
size
+
=
op
(
self
.
clip_node_info
.
as_ptr
(
)
as
*
const
c_void
)
;
}
size
}
}
pub
struct
ComplexTranslateIter
<
I
>
{
source
:
I
offset
:
LayoutVector2D
}
impl
<
I
:
Iterator
<
Item
=
ComplexClipRegion
>
>
Iterator
for
ComplexTranslateIter
<
I
>
{
type
Item
=
ComplexClipRegion
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
source
.
next
(
)
.
map
(
|
mut
complex
|
{
complex
.
rect
=
complex
.
rect
.
translate
(
&
self
.
offset
)
;
complex
}
)
}
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
ClipRegion
<
I
>
{
pub
main
:
LayoutRect
pub
image_mask
:
Option
<
ImageMask
>
pub
complex_clips
:
I
}
impl
<
J
>
ClipRegion
<
ComplexTranslateIter
<
J
>
>
{
pub
fn
create_for_clip_node
(
rect
:
LayoutRect
complex_clips
:
J
mut
image_mask
:
Option
<
ImageMask
>
reference_frame_relative_offset
:
&
LayoutVector2D
)
-
>
Self
where
J
:
Iterator
<
Item
=
ComplexClipRegion
>
{
if
let
Some
(
ref
mut
image_mask
)
=
image_mask
{
image_mask
.
rect
=
image_mask
.
rect
.
translate
(
reference_frame_relative_offset
)
;
}
ClipRegion
{
main
:
rect
.
translate
(
reference_frame_relative_offset
)
image_mask
complex_clips
:
ComplexTranslateIter
{
source
:
complex_clips
offset
:
*
reference_frame_relative_offset
}
}
}
}
impl
ClipRegion
<
Option
<
ComplexClipRegion
>
>
{
pub
fn
create_for_clip_node_with_local_clip
(
local_clip
:
&
LayoutRect
reference_frame_relative_offset
:
&
LayoutVector2D
)
-
>
Self
{
ClipRegion
{
main
:
local_clip
.
translate
(
reference_frame_relative_offset
)
image_mask
:
None
complex_clips
:
None
}
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
ClipItemSceneData
{
pub
clip_rect
:
LayoutRect
}
#
[
derive
(
Debug
Clone
Eq
PartialEq
Hash
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
enum
ClipItemKey
{
Rectangle
(
LayoutRectAu
ClipMode
)
RoundedRectangle
(
LayoutRectAu
BorderRadiusAu
ClipMode
)
ImageMask
(
LayoutRectAu
ImageKey
bool
)
BoxShadow
(
LayoutRectAu
BorderRadiusAu
LayoutRectAu
Au
BoxShadowClipMode
)
}
impl
ClipItemKey
{
pub
fn
rectangle
(
rect
:
LayoutRect
mode
:
ClipMode
)
-
>
Self
{
ClipItemKey
:
:
Rectangle
(
rect
.
to_au
(
)
mode
)
}
pub
fn
rounded_rect
(
rect
:
LayoutRect
mut
radii
:
BorderRadius
mode
:
ClipMode
)
-
>
Self
{
if
radii
.
is_zero
(
)
{
ClipItemKey
:
:
rectangle
(
rect
mode
)
}
else
{
ensure_no_corner_overlap
(
&
mut
radii
&
rect
)
;
ClipItemKey
:
:
RoundedRectangle
(
rect
.
to_au
(
)
radii
.
into
(
)
mode
)
}
}
pub
fn
image_mask
(
image_mask
:
&
ImageMask
)
-
>
Self
{
ClipItemKey
:
:
ImageMask
(
image_mask
.
rect
.
to_au
(
)
image_mask
.
image
image_mask
.
repeat
)
}
pub
fn
box_shadow
(
shadow_rect
:
LayoutRect
shadow_radius
:
BorderRadius
prim_shadow_rect
:
LayoutRect
blur_radius
:
f32
clip_mode
:
BoxShadowClipMode
)
-
>
Self
{
ClipItemKey
:
:
BoxShadow
(
shadow_rect
.
to_au
(
)
shadow_radius
.
into
(
)
prim_shadow_rect
.
to_au
(
)
Au
:
:
from_f32_px
(
blur_radius
)
clip_mode
)
}
}
#
[
derive
(
Debug
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
enum
ClipItem
{
Rectangle
(
LayoutRect
ClipMode
)
RoundedRectangle
(
LayoutRect
BorderRadius
ClipMode
)
Image
{
mask
:
ImageMask
visible_tiles
:
Option
<
Vec
<
VisibleMaskImageTile
>
>
}
BoxShadow
(
BoxShadowClipSource
)
}
fn
compute_box_shadow_parameters
(
shadow_rect
:
LayoutRect
mut
shadow_radius
:
BorderRadius
prim_shadow_rect
:
LayoutRect
blur_radius
:
f32
clip_mode
:
BoxShadowClipMode
)
-
>
BoxShadowClipSource
{
ensure_no_corner_overlap
(
&
mut
shadow_radius
&
shadow_rect
)
;
let
fract_offset
=
LayoutPoint
:
:
new
(
shadow_rect
.
origin
.
x
.
fract
(
)
.
abs
(
)
shadow_rect
.
origin
.
y
.
fract
(
)
.
abs
(
)
)
;
let
fract_size
=
LayoutSize
:
:
new
(
shadow_rect
.
size
.
width
.
fract
(
)
.
abs
(
)
shadow_rect
.
size
.
height
.
fract
(
)
.
abs
(
)
)
;
let
max_corner_width
=
shadow_radius
.
top_left
.
width
.
max
(
shadow_radius
.
bottom_left
.
width
)
.
max
(
shadow_radius
.
top_right
.
width
)
.
max
(
shadow_radius
.
bottom_right
.
width
)
;
let
max_corner_height
=
shadow_radius
.
top_left
.
height
.
max
(
shadow_radius
.
bottom_left
.
height
)
.
max
(
shadow_radius
.
top_right
.
height
)
.
max
(
shadow_radius
.
bottom_right
.
height
)
;
let
blur_region
=
(
BLUR_SAMPLE_SCALE
*
blur_radius
)
.
ceil
(
)
;
let
used_corner_width
=
max_corner_width
.
max
(
blur_region
)
;
let
used_corner_height
=
max_corner_height
.
max
(
blur_region
)
;
let
min_shadow_rect_size
=
LayoutSize
:
:
new
(
2
.
0
*
used_corner_width
+
blur_region
2
.
0
*
used_corner_height
+
blur_region
)
;
let
mut
minimal_shadow_rect
=
LayoutRect
:
:
new
(
LayoutPoint
:
:
new
(
blur_region
+
fract_offset
.
x
blur_region
+
fract_offset
.
y
)
LayoutSize
:
:
new
(
min_shadow_rect_size
.
width
+
fract_size
.
width
min_shadow_rect_size
.
height
+
fract_size
.
height
)
)
;
let
mut
stretch_mode_x
=
BoxShadowStretchMode
:
:
Stretch
;
if
shadow_rect
.
size
.
width
<
minimal_shadow_rect
.
size
.
width
{
minimal_shadow_rect
.
size
.
width
=
shadow_rect
.
size
.
width
;
stretch_mode_x
=
BoxShadowStretchMode
:
:
Simple
;
}
let
mut
stretch_mode_y
=
BoxShadowStretchMode
:
:
Stretch
;
if
shadow_rect
.
size
.
height
<
minimal_shadow_rect
.
size
.
height
{
minimal_shadow_rect
.
size
.
height
=
shadow_rect
.
size
.
height
;
stretch_mode_y
=
BoxShadowStretchMode
:
:
Simple
;
}
let
shadow_rect_alloc_size
=
LayoutSize
:
:
new
(
2
.
0
*
blur_region
+
minimal_shadow_rect
.
size
.
width
.
ceil
(
)
2
.
0
*
blur_region
+
minimal_shadow_rect
.
size
.
height
.
ceil
(
)
)
;
BoxShadowClipSource
{
original_alloc_size
:
shadow_rect_alloc_size
shadow_rect_alloc_size
shadow_radius
prim_shadow_rect
blur_radius
clip_mode
stretch_mode_x
stretch_mode_y
cache_handle
:
None
cache_key
:
None
clip_data_handle
:
GpuCacheHandle
:
:
new
(
)
minimal_shadow_rect
}
}
impl
ClipItem
{
pub
fn
new_box_shadow
(
shadow_rect
:
LayoutRect
mut
shadow_radius
:
BorderRadius
prim_shadow_rect
:
LayoutRect
blur_radius
:
f32
clip_mode
:
BoxShadowClipMode
)
-
>
Self
{
let
mut
source
=
compute_box_shadow_parameters
(
shadow_rect
shadow_radius
prim_shadow_rect
blur_radius
clip_mode
)
;
fn
needed_downscaling
(
source
:
&
BoxShadowClipSource
)
-
>
Option
<
f32
>
{
const
MAX_SIZE
:
f32
=
2048
.
;
let
max_dimension
=
source
.
shadow_rect_alloc_size
.
width
.
max
(
source
.
shadow_rect_alloc_size
.
height
)
;
if
max_dimension
>
MAX_SIZE
{
Some
(
MAX_SIZE
/
max_dimension
)
}
else
{
None
}
}
if
let
Some
(
downscale
)
=
needed_downscaling
(
&
source
)
{
shadow_radius
.
bottom_left
.
height
*
=
downscale
;
shadow_radius
.
bottom_left
.
width
*
=
downscale
;
shadow_radius
.
bottom_right
.
height
*
=
downscale
;
shadow_radius
.
bottom_right
.
width
*
=
downscale
;
shadow_radius
.
top_left
.
height
*
=
downscale
;
shadow_radius
.
top_left
.
width
*
=
downscale
;
shadow_radius
.
top_right
.
height
*
=
downscale
;
shadow_radius
.
top_right
.
width
*
=
downscale
;
let
original_alloc_size
=
source
.
shadow_rect_alloc_size
;
source
=
compute_box_shadow_parameters
(
shadow_rect
.
scale
(
downscale
downscale
)
shadow_radius
prim_shadow_rect
blur_radius
*
downscale
clip_mode
)
;
source
.
original_alloc_size
=
original_alloc_size
;
}
ClipItem
:
:
BoxShadow
(
source
)
}
fn
get_local_clip_rect
(
&
self
)
-
>
Option
<
LayoutRect
>
{
match
*
self
{
ClipItem
:
:
Rectangle
(
clip_rect
ClipMode
:
:
Clip
)
=
>
Some
(
clip_rect
)
ClipItem
:
:
Rectangle
(
_
ClipMode
:
:
ClipOut
)
=
>
None
ClipItem
:
:
RoundedRectangle
(
clip_rect
_
ClipMode
:
:
Clip
)
=
>
Some
(
clip_rect
)
ClipItem
:
:
RoundedRectangle
(
_
_
ClipMode
:
:
ClipOut
)
=
>
None
ClipItem
:
:
Image
{
ref
mask
.
.
}
if
mask
.
repeat
=
>
None
ClipItem
:
:
Image
{
ref
mask
.
.
}
=
>
Some
(
mask
.
rect
)
ClipItem
:
:
BoxShadow
(
.
.
)
=
>
None
}
}
fn
get_clip_result_complex
(
&
self
transform
:
&
LayoutToWorldTransform
prim_world_rect
:
&
WorldRect
world_rect
:
&
WorldRect
)
-
>
ClipResult
{
let
(
clip_rect
inner_rect
)
=
match
*
self
{
ClipItem
:
:
Rectangle
(
clip_rect
ClipMode
:
:
Clip
)
=
>
{
(
clip_rect
Some
(
clip_rect
)
)
}
ClipItem
:
:
RoundedRectangle
(
ref
clip_rect
ref
radius
ClipMode
:
:
Clip
)
=
>
{
let
inner_clip_rect
=
extract_inner_rect_safe
(
clip_rect
radius
)
;
(
*
clip_rect
inner_clip_rect
)
}
ClipItem
:
:
Rectangle
(
_
ClipMode
:
:
ClipOut
)
|
ClipItem
:
:
RoundedRectangle
(
_
_
ClipMode
:
:
ClipOut
)
|
ClipItem
:
:
Image
{
.
.
}
|
ClipItem
:
:
BoxShadow
(
.
.
)
=
>
{
return
ClipResult
:
:
Partial
}
}
;
let
inner_clip_rect
=
inner_rect
.
and_then
(
|
ref
inner_rect
|
{
project_inner_rect
(
transform
inner_rect
)
}
)
;
if
let
Some
(
inner_clip_rect
)
=
inner_clip_rect
{
if
inner_clip_rect
.
contains_rect
(
prim_world_rect
)
{
return
ClipResult
:
:
Accept
;
}
}
let
outer_clip_rect
=
match
project_rect
(
transform
&
clip_rect
world_rect
)
{
Some
(
outer_clip_rect
)
=
>
outer_clip_rect
None
=
>
return
ClipResult
:
:
Partial
}
;
match
outer_clip_rect
.
intersection
(
prim_world_rect
)
{
Some
(
.
.
)
=
>
{
ClipResult
:
:
Partial
}
None
=
>
{
ClipResult
:
:
Reject
}
}
}
fn
get_clip_result
(
&
self
prim_rect
:
&
LayoutRect
)
-
>
ClipResult
{
match
*
self
{
ClipItem
:
:
Rectangle
(
ref
clip_rect
ClipMode
:
:
Clip
)
=
>
{
if
clip_rect
.
contains_rect
(
prim_rect
)
{
return
ClipResult
:
:
Accept
;
}
match
clip_rect
.
intersection
(
prim_rect
)
{
Some
(
.
.
)
=
>
{
ClipResult
:
:
Partial
}
None
=
>
{
ClipResult
:
:
Reject
}
}
}
ClipItem
:
:
Rectangle
(
ref
clip_rect
ClipMode
:
:
ClipOut
)
=
>
{
if
clip_rect
.
contains_rect
(
prim_rect
)
{
return
ClipResult
:
:
Reject
;
}
match
clip_rect
.
intersection
(
prim_rect
)
{
Some
(
_
)
=
>
{
ClipResult
:
:
Partial
}
None
=
>
{
ClipResult
:
:
Accept
}
}
}
ClipItem
:
:
RoundedRectangle
(
ref
clip_rect
ref
radius
ClipMode
:
:
Clip
)
=
>
{
let
inner_clip_rect
=
extract_inner_rect_safe
(
clip_rect
radius
)
;
if
let
Some
(
inner_clip_rect
)
=
inner_clip_rect
{
if
inner_clip_rect
.
contains_rect
(
prim_rect
)
{
return
ClipResult
:
:
Accept
;
}
}
match
clip_rect
.
intersection
(
prim_rect
)
{
Some
(
.
.
)
=
>
{
ClipResult
:
:
Partial
}
None
=
>
{
ClipResult
:
:
Reject
}
}
}
ClipItem
:
:
RoundedRectangle
(
ref
clip_rect
ref
radius
ClipMode
:
:
ClipOut
)
=
>
{
let
inner_clip_rect
=
extract_inner_rect_safe
(
clip_rect
radius
)
;
if
let
Some
(
inner_clip_rect
)
=
inner_clip_rect
{
if
inner_clip_rect
.
contains_rect
(
prim_rect
)
{
return
ClipResult
:
:
Reject
;
}
}
match
clip_rect
.
intersection
(
prim_rect
)
{
Some
(
_
)
=
>
{
ClipResult
:
:
Partial
}
None
=
>
{
ClipResult
:
:
Accept
}
}
}
ClipItem
:
:
Image
{
ref
mask
.
.
}
=
>
{
if
mask
.
repeat
{
ClipResult
:
:
Partial
}
else
{
match
mask
.
rect
.
intersection
(
prim_rect
)
{
Some
(
.
.
)
=
>
{
ClipResult
:
:
Partial
}
None
=
>
{
ClipResult
:
:
Reject
}
}
}
}
ClipItem
:
:
BoxShadow
(
.
.
)
=
>
{
ClipResult
:
:
Partial
}
}
}
}
#
[
derive
(
Clone
Debug
PartialEq
)
]
pub
struct
Geometry
{
pub
local_rect
:
LayoutRect
pub
device_rect
:
DeviceIntRect
}
impl
From
<
LayoutRect
>
for
Geometry
{
fn
from
(
local_rect
:
LayoutRect
)
-
>
Self
{
Geometry
{
local_rect
device_rect
:
DeviceIntRect
:
:
zero
(
)
}
}
}
pub
fn
rounded_rectangle_contains_point
(
point
:
&
LayoutPoint
rect
:
&
LayoutRect
radii
:
&
BorderRadius
)
-
>
bool
{
if
!
rect
.
contains
(
point
)
{
return
false
;
}
let
top_left_center
=
rect
.
origin
+
radii
.
top_left
.
to_vector
(
)
;
if
top_left_center
.
x
>
point
.
x
&
&
top_left_center
.
y
>
point
.
y
&
&
!
Ellipse
:
:
new
(
radii
.
top_left
)
.
contains
(
*
point
-
top_left_center
.
to_vector
(
)
)
{
return
false
;
}
let
bottom_right_center
=
rect
.
bottom_right
(
)
-
radii
.
bottom_right
.
to_vector
(
)
;
if
bottom_right_center
.
x
<
point
.
x
&
&
bottom_right_center
.
y
<
point
.
y
&
&
!
Ellipse
:
:
new
(
radii
.
bottom_right
)
.
contains
(
*
point
-
bottom_right_center
.
to_vector
(
)
)
{
return
false
;
}
let
top_right_center
=
rect
.
top_right
(
)
+
LayoutVector2D
:
:
new
(
-
radii
.
top_right
.
width
radii
.
top_right
.
height
)
;
if
top_right_center
.
x
<
point
.
x
&
&
top_right_center
.
y
>
point
.
y
&
&
!
Ellipse
:
:
new
(
radii
.
top_right
)
.
contains
(
*
point
-
top_right_center
.
to_vector
(
)
)
{
return
false
;
}
let
bottom_left_center
=
rect
.
bottom_left
(
)
+
LayoutVector2D
:
:
new
(
radii
.
bottom_left
.
width
-
radii
.
bottom_left
.
height
)
;
if
bottom_left_center
.
x
>
point
.
x
&
&
bottom_left_center
.
y
<
point
.
y
&
&
!
Ellipse
:
:
new
(
radii
.
bottom_left
)
.
contains
(
*
point
-
bottom_left_center
.
to_vector
(
)
)
{
return
false
;
}
true
}
pub
fn
project_inner_rect
(
transform
:
&
LayoutToWorldTransform
rect
:
&
LayoutRect
)
-
>
Option
<
WorldRect
>
{
let
points
=
[
transform
.
transform_point2d
(
&
rect
.
origin
)
?
transform
.
transform_point2d
(
&
rect
.
top_right
(
)
)
?
transform
.
transform_point2d
(
&
rect
.
bottom_left
(
)
)
?
transform
.
transform_point2d
(
&
rect
.
bottom_right
(
)
)
?
]
;
let
mut
xs
=
[
points
[
0
]
.
x
points
[
1
]
.
x
points
[
2
]
.
x
points
[
3
]
.
x
]
;
let
mut
ys
=
[
points
[
0
]
.
y
points
[
1
]
.
y
points
[
2
]
.
y
points
[
3
]
.
y
]
;
xs
.
sort_by
(
|
a
b
|
a
.
partial_cmp
(
b
)
.
unwrap_or
(
cmp
:
:
Ordering
:
:
Equal
)
)
;
ys
.
sort_by
(
|
a
b
|
a
.
partial_cmp
(
b
)
.
unwrap_or
(
cmp
:
:
Ordering
:
:
Equal
)
)
;
Some
(
WorldRect
:
:
new
(
WorldPoint
:
:
new
(
xs
[
1
]
ys
[
1
]
)
WorldSize
:
:
new
(
xs
[
2
]
-
xs
[
1
]
ys
[
2
]
-
ys
[
1
]
)
)
)
}
#
[
derive
(
Debug
)
]
pub
struct
ClipNodeCollector
{
spatial_node_index
:
SpatialNodeIndex
clips
:
FastHashSet
<
ClipChainId
>
}
impl
ClipNodeCollector
{
pub
fn
new
(
spatial_node_index
:
SpatialNodeIndex
)
-
>
Self
{
ClipNodeCollector
{
spatial_node_index
clips
:
FastHashSet
:
:
default
(
)
}
}
pub
fn
insert
(
&
mut
self
clip_chain_id
:
ClipChainId
)
{
self
.
clips
.
insert
(
clip_chain_id
)
;
}
}
fn
add_clip_node_to_current_chain
(
handle
:
ClipDataHandle
clip_spatial_node_index
:
SpatialNodeIndex
spatial_node_index
:
SpatialNodeIndex
local_clip_rect
:
&
mut
LayoutRect
clip_node_info
:
&
mut
Vec
<
ClipNodeInfo
>
clip_data_store
:
&
ClipDataStore
clip_scroll_tree
:
&
ClipScrollTree
)
-
>
bool
{
let
clip_node
=
&
clip_data_store
[
handle
]
;
let
clip_spatial_node
=
&
clip_scroll_tree
.
spatial_nodes
[
clip_spatial_node_index
.
0
]
;
let
ref_spatial_node
=
&
clip_scroll_tree
.
spatial_nodes
[
spatial_node_index
.
0
]
;
let
conversion
=
if
spatial_node_index
=
=
clip_spatial_node_index
{
Some
(
ClipSpaceConversion
:
:
Local
)
}
else
if
ref_spatial_node
.
coordinate_system_id
=
=
clip_spatial_node
.
coordinate_system_id
{
let
scale_offset
=
ref_spatial_node
.
coordinate_system_relative_scale_offset
.
inverse
(
)
.
accumulate
(
&
clip_spatial_node
.
coordinate_system_relative_scale_offset
)
;
Some
(
ClipSpaceConversion
:
:
ScaleOffset
(
scale_offset
)
)
}
else
{
let
xf
=
clip_scroll_tree
.
get_relative_transform
(
clip_spatial_node_index
ROOT_SPATIAL_NODE_INDEX
)
;
xf
.
map
(
|
xf
|
{
ClipSpaceConversion
:
:
Transform
(
xf
.
with_destination
:
:
<
WorldPixel
>
(
)
)
}
)
}
;
if
let
Some
(
conversion
)
=
conversion
{
if
let
Some
(
clip_rect
)
=
clip_node
.
item
.
get_local_clip_rect
(
)
{
match
conversion
{
ClipSpaceConversion
:
:
Local
=
>
{
*
local_clip_rect
=
match
local_clip_rect
.
intersection
(
&
clip_rect
)
{
Some
(
rect
)
=
>
rect
None
=
>
return
false
}
;
}
ClipSpaceConversion
:
:
ScaleOffset
(
ref
scale_offset
)
=
>
{
let
clip_rect
=
scale_offset
.
map_rect
(
&
clip_rect
)
;
*
local_clip_rect
=
match
local_clip_rect
.
intersection
(
&
clip_rect
)
{
Some
(
rect
)
=
>
rect
None
=
>
return
false
}
;
}
ClipSpaceConversion
:
:
Transform
(
.
.
)
=
>
{
}
}
}
clip_node_info
.
push
(
ClipNodeInfo
{
conversion
handle
spatial_node_index
:
clip_spatial_node_index
}
)
}
true
}
