use
std
:
:
{
marker
:
:
PhantomData
mem
ops
}
;
use
api
:
:
units
:
:
*
;
use
crate
:
:
{
device
:
:
{
Device
Texture
TextureFilter
TextureUploader
UploadPBOPool
VertexUsageHint
VAO
}
frame_builder
:
:
Frame
gpu_types
:
:
{
PrimitiveHeaderI
PrimitiveHeaderF
TransformData
}
internal_types
:
:
Swizzle
render_task
:
:
RenderTaskData
}
;
pub
const
VERTEX_TEXTURE_EXTRA_ROWS
:
i32
=
10
;
pub
const
MAX_VERTEX_TEXTURE_WIDTH
:
usize
=
webrender_build
:
:
MAX_VERTEX_TEXTURE_WIDTH
;
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
PackedVertex
{
pub
pos
:
[
f32
;
2
]
}
pub
mod
desc
{
use
crate
:
:
device
:
:
{
VertexAttribute
VertexAttributeKind
VertexDescriptor
}
;
pub
const
PRIM_INSTANCES
:
VertexDescriptor
=
VertexDescriptor
{
vertex_attributes
:
&
[
VertexAttribute
{
name
:
"
aPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
]
instance_attributes
:
&
[
VertexAttribute
{
name
:
"
aData
"
count
:
4
kind
:
VertexAttributeKind
:
:
I32
}
]
}
;
pub
const
BLUR
:
VertexDescriptor
=
VertexDescriptor
{
vertex_attributes
:
&
[
VertexAttribute
{
name
:
"
aPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
]
instance_attributes
:
&
[
VertexAttribute
{
name
:
"
aBlurRenderTaskAddress
"
count
:
1
kind
:
VertexAttributeKind
:
:
U16
}
VertexAttribute
{
name
:
"
aBlurSourceTaskAddress
"
count
:
1
kind
:
VertexAttributeKind
:
:
U16
}
VertexAttribute
{
name
:
"
aBlurDirection
"
count
:
1
kind
:
VertexAttributeKind
:
:
I32
}
]
}
;
pub
const
LINE
:
VertexDescriptor
=
VertexDescriptor
{
vertex_attributes
:
&
[
VertexAttribute
{
name
:
"
aPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
]
instance_attributes
:
&
[
VertexAttribute
{
name
:
"
aTaskRect
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aLocalSize
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aWavyLineThickness
"
count
:
1
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aStyle
"
count
:
1
kind
:
VertexAttributeKind
:
:
I32
}
VertexAttribute
{
name
:
"
aAxisSelect
"
count
:
1
kind
:
VertexAttributeKind
:
:
F32
}
]
}
;
pub
const
GRADIENT
:
VertexDescriptor
=
VertexDescriptor
{
vertex_attributes
:
&
[
VertexAttribute
{
name
:
"
aPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
]
instance_attributes
:
&
[
VertexAttribute
{
name
:
"
aTaskRect
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aStops
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aColor0
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aColor1
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aColor2
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aColor3
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aAxisSelect
"
count
:
1
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aStartStop
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
]
}
;
pub
const
BORDER
:
VertexDescriptor
=
VertexDescriptor
{
vertex_attributes
:
&
[
VertexAttribute
{
name
:
"
aPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
]
instance_attributes
:
&
[
VertexAttribute
{
name
:
"
aTaskOrigin
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aRect
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aColor0
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aColor1
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aFlags
"
count
:
1
kind
:
VertexAttributeKind
:
:
I32
}
VertexAttribute
{
name
:
"
aWidths
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aRadii
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipParams1
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipParams2
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
]
}
;
pub
const
SCALE
:
VertexDescriptor
=
VertexDescriptor
{
vertex_attributes
:
&
[
VertexAttribute
{
name
:
"
aPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
]
instance_attributes
:
&
[
VertexAttribute
{
name
:
"
aScaleTargetRect
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aScaleSourceRect
"
count
:
4
kind
:
VertexAttributeKind
:
:
I32
}
VertexAttribute
{
name
:
"
aScaleSourceLayer
"
count
:
1
kind
:
VertexAttributeKind
:
:
I32
}
]
}
;
pub
const
CLIP_RECT
:
VertexDescriptor
=
VertexDescriptor
{
vertex_attributes
:
&
[
VertexAttribute
{
name
:
"
aPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
]
instance_attributes
:
&
[
VertexAttribute
{
name
:
"
aClipDeviceArea
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipOrigins
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aDevicePixelScale
"
count
:
1
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aTransformIds
"
count
:
2
kind
:
VertexAttributeKind
:
:
I32
}
VertexAttribute
{
name
:
"
aClipLocalPos
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipLocalRect
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipMode
"
count
:
1
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipRect_TL
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipRadii_TL
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipRect_TR
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipRadii_TR
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipRect_BL
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipRadii_BL
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipRect_BR
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipRadii_BR
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
]
}
;
pub
const
CLIP_BOX_SHADOW
:
VertexDescriptor
=
VertexDescriptor
{
vertex_attributes
:
&
[
VertexAttribute
{
name
:
"
aPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
]
instance_attributes
:
&
[
VertexAttribute
{
name
:
"
aClipDeviceArea
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipOrigins
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aDevicePixelScale
"
count
:
1
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aTransformIds
"
count
:
2
kind
:
VertexAttributeKind
:
:
I32
}
VertexAttribute
{
name
:
"
aClipDataResourceAddress
"
count
:
2
kind
:
VertexAttributeKind
:
:
U16
}
VertexAttribute
{
name
:
"
aClipSrcRectSize
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipMode
"
count
:
1
kind
:
VertexAttributeKind
:
:
I32
}
VertexAttribute
{
name
:
"
aStretchMode
"
count
:
2
kind
:
VertexAttributeKind
:
:
I32
}
VertexAttribute
{
name
:
"
aClipDestRect
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
]
}
;
pub
const
CLIP_IMAGE
:
VertexDescriptor
=
VertexDescriptor
{
vertex_attributes
:
&
[
VertexAttribute
{
name
:
"
aPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
]
instance_attributes
:
&
[
VertexAttribute
{
name
:
"
aClipDeviceArea
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipOrigins
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aDevicePixelScale
"
count
:
1
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aTransformIds
"
count
:
2
kind
:
VertexAttributeKind
:
:
I32
}
VertexAttribute
{
name
:
"
aClipTileRect
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aClipDataResourceAddress
"
count
:
2
kind
:
VertexAttributeKind
:
:
U16
}
VertexAttribute
{
name
:
"
aClipLocalRect
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
]
}
;
pub
const
GPU_CACHE_UPDATE
:
VertexDescriptor
=
VertexDescriptor
{
vertex_attributes
:
&
[
VertexAttribute
{
name
:
"
aPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
U16Norm
}
VertexAttribute
{
name
:
"
aValue
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
]
instance_attributes
:
&
[
]
}
;
pub
const
RESOLVE
:
VertexDescriptor
=
VertexDescriptor
{
vertex_attributes
:
&
[
VertexAttribute
{
name
:
"
aPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
]
instance_attributes
:
&
[
VertexAttribute
{
name
:
"
aRect
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
]
}
;
pub
const
SVG_FILTER
:
VertexDescriptor
=
VertexDescriptor
{
vertex_attributes
:
&
[
VertexAttribute
{
name
:
"
aPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
]
instance_attributes
:
&
[
VertexAttribute
{
name
:
"
aFilterRenderTaskAddress
"
count
:
1
kind
:
VertexAttributeKind
:
:
U16
}
VertexAttribute
{
name
:
"
aFilterInput1TaskAddress
"
count
:
1
kind
:
VertexAttributeKind
:
:
U16
}
VertexAttribute
{
name
:
"
aFilterInput2TaskAddress
"
count
:
1
kind
:
VertexAttributeKind
:
:
U16
}
VertexAttribute
{
name
:
"
aFilterKind
"
count
:
1
kind
:
VertexAttributeKind
:
:
U16
}
VertexAttribute
{
name
:
"
aFilterInputCount
"
count
:
1
kind
:
VertexAttributeKind
:
:
U16
}
VertexAttribute
{
name
:
"
aFilterGenericInt
"
count
:
1
kind
:
VertexAttributeKind
:
:
U16
}
VertexAttribute
{
name
:
"
aFilterExtraDataAddress
"
count
:
2
kind
:
VertexAttributeKind
:
:
U16
}
]
}
;
pub
const
VECTOR_STENCIL
:
VertexDescriptor
=
VertexDescriptor
{
vertex_attributes
:
&
[
VertexAttribute
{
name
:
"
aPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
]
instance_attributes
:
&
[
VertexAttribute
{
name
:
"
aFromPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aCtrlPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aToPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aFromNormal
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aCtrlNormal
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aToNormal
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aPathID
"
count
:
1
kind
:
VertexAttributeKind
:
:
U16
}
VertexAttribute
{
name
:
"
aPad
"
count
:
1
kind
:
VertexAttributeKind
:
:
U16
}
]
}
;
pub
const
VECTOR_COVER
:
VertexDescriptor
=
VertexDescriptor
{
vertex_attributes
:
&
[
VertexAttribute
{
name
:
"
aPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
]
instance_attributes
:
&
[
VertexAttribute
{
name
:
"
aTargetRect
"
count
:
4
kind
:
VertexAttributeKind
:
:
I32
}
VertexAttribute
{
name
:
"
aStencilOrigin
"
count
:
2
kind
:
VertexAttributeKind
:
:
I32
}
VertexAttribute
{
name
:
"
aSubpixel
"
count
:
1
kind
:
VertexAttributeKind
:
:
U16
}
VertexAttribute
{
name
:
"
aPad
"
count
:
1
kind
:
VertexAttributeKind
:
:
U16
}
]
}
;
pub
const
COMPOSITE
:
VertexDescriptor
=
VertexDescriptor
{
vertex_attributes
:
&
[
VertexAttribute
{
name
:
"
aPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
]
instance_attributes
:
&
[
VertexAttribute
{
name
:
"
aDeviceRect
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aDeviceClipRect
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aColor
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aParams
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aUvRect0
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aUvRect1
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aUvRect2
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aTextureLayers
"
count
:
3
kind
:
VertexAttributeKind
:
:
F32
}
]
}
;
pub
const
CLEAR
:
VertexDescriptor
=
VertexDescriptor
{
vertex_attributes
:
&
[
VertexAttribute
{
name
:
"
aPosition
"
count
:
2
kind
:
VertexAttributeKind
:
:
F32
}
]
instance_attributes
:
&
[
VertexAttribute
{
name
:
"
aRect
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
VertexAttribute
{
name
:
"
aColor
"
count
:
4
kind
:
VertexAttributeKind
:
:
F32
}
]
}
;
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
pub
enum
VertexArrayKind
{
Primitive
Blur
ClipImage
ClipRect
ClipBoxShadow
VectorStencil
VectorCover
Border
Scale
LineDecoration
Gradient
Resolve
SvgFilter
Composite
Clear
}
pub
struct
VertexDataTexture
<
T
>
{
texture
:
Option
<
Texture
>
format
:
api
:
:
ImageFormat
_marker
:
PhantomData
<
T
>
}
impl
<
T
>
VertexDataTexture
<
T
>
{
pub
fn
new
(
format
:
api
:
:
ImageFormat
)
-
>
Self
{
Self
{
texture
:
None
format
_marker
:
PhantomData
}
}
pub
fn
texture
(
&
self
)
-
>
&
Texture
{
self
.
texture
.
as_ref
(
)
.
unwrap
(
)
}
pub
fn
size_in_bytes
(
&
self
)
-
>
usize
{
self
.
texture
.
as_ref
(
)
.
map_or
(
0
|
t
|
t
.
size_in_bytes
(
)
)
}
pub
fn
update
<
'
a
>
(
&
'
a
mut
self
device
:
&
mut
Device
texture_uploader
:
&
mut
TextureUploader
<
'
a
>
data
:
&
mut
Vec
<
T
>
)
{
debug_assert
!
(
mem
:
:
size_of
:
:
<
T
>
(
)
%
16
=
=
0
)
;
let
texels_per_item
=
mem
:
:
size_of
:
:
<
T
>
(
)
/
16
;
let
items_per_row
=
MAX_VERTEX_TEXTURE_WIDTH
/
texels_per_item
;
debug_assert_ne
!
(
items_per_row
0
)
;
let
mut
len
=
data
.
len
(
)
;
if
len
=
=
0
{
if
self
.
texture
.
is_some
(
)
{
return
;
}
data
.
reserve
(
items_per_row
)
;
len
=
items_per_row
;
}
else
{
let
extra
=
len
%
items_per_row
;
if
extra
!
=
0
{
let
padding
=
items_per_row
-
extra
;
data
.
reserve
(
padding
)
;
len
+
=
padding
;
}
}
let
needed_height
=
(
len
/
items_per_row
)
as
i32
;
let
existing_height
=
self
.
texture
.
as_ref
(
)
.
map_or
(
0
|
t
|
t
.
get_dimensions
(
)
.
height
)
;
if
needed_height
>
existing_height
|
|
needed_height
+
VERTEX_TEXTURE_EXTRA_ROWS
<
existing_height
{
if
let
Some
(
t
)
=
self
.
texture
.
take
(
)
{
device
.
delete_texture
(
t
)
;
}
let
texture
=
device
.
create_texture
(
api
:
:
ImageBufferKind
:
:
Texture2D
self
.
format
MAX_VERTEX_TEXTURE_WIDTH
as
i32
needed_height
.
max
(
2
)
TextureFilter
:
:
Nearest
None
1
)
;
self
.
texture
=
Some
(
texture
)
;
}
let
logical_width
=
if
needed_height
=
=
1
{
data
.
len
(
)
*
texels_per_item
}
else
{
MAX_VERTEX_TEXTURE_WIDTH
-
(
MAX_VERTEX_TEXTURE_WIDTH
%
texels_per_item
)
}
;
let
rect
=
DeviceIntRect
:
:
new
(
DeviceIntPoint
:
:
zero
(
)
DeviceIntSize
:
:
new
(
logical_width
as
i32
needed_height
)
)
;
debug_assert
!
(
len
<
=
data
.
capacity
(
)
"
CPU
copy
will
read
out
of
bounds
"
)
;
texture_uploader
.
upload
(
device
self
.
texture
(
)
rect
0
None
None
data
.
as_ptr
(
)
len
)
;
}
pub
fn
deinit
(
mut
self
device
:
&
mut
Device
)
{
if
let
Some
(
t
)
=
self
.
texture
.
take
(
)
{
device
.
delete_texture
(
t
)
;
}
}
}
pub
struct
VertexDataTextures
{
prim_header_f_texture
:
VertexDataTexture
<
PrimitiveHeaderF
>
prim_header_i_texture
:
VertexDataTexture
<
PrimitiveHeaderI
>
transforms_texture
:
VertexDataTexture
<
TransformData
>
render_task_texture
:
VertexDataTexture
<
RenderTaskData
>
}
impl
VertexDataTextures
{
pub
fn
new
(
)
-
>
Self
{
VertexDataTextures
{
prim_header_f_texture
:
VertexDataTexture
:
:
new
(
api
:
:
ImageFormat
:
:
RGBAF32
)
prim_header_i_texture
:
VertexDataTexture
:
:
new
(
api
:
:
ImageFormat
:
:
RGBAI32
)
transforms_texture
:
VertexDataTexture
:
:
new
(
api
:
:
ImageFormat
:
:
RGBAF32
)
render_task_texture
:
VertexDataTexture
:
:
new
(
api
:
:
ImageFormat
:
:
RGBAF32
)
}
}
pub
fn
update
(
&
mut
self
device
:
&
mut
Device
pbo_pool
:
&
mut
UploadPBOPool
frame
:
&
mut
Frame
)
{
let
mut
texture_uploader
=
device
.
upload_texture
(
pbo_pool
)
;
self
.
prim_header_f_texture
.
update
(
device
&
mut
texture_uploader
&
mut
frame
.
prim_headers
.
headers_float
)
;
self
.
prim_header_i_texture
.
update
(
device
&
mut
texture_uploader
&
mut
frame
.
prim_headers
.
headers_int
)
;
self
.
transforms_texture
.
update
(
device
&
mut
texture_uploader
&
mut
frame
.
transform_palette
)
;
self
.
render_task_texture
.
update
(
device
&
mut
texture_uploader
&
mut
frame
.
render_tasks
.
task_data
)
;
texture_uploader
.
flush
(
device
)
;
device
.
bind_texture
(
super
:
:
TextureSampler
:
:
PrimitiveHeadersF
&
self
.
prim_header_f_texture
.
texture
(
)
Swizzle
:
:
default
(
)
)
;
device
.
bind_texture
(
super
:
:
TextureSampler
:
:
PrimitiveHeadersI
&
self
.
prim_header_i_texture
.
texture
(
)
Swizzle
:
:
default
(
)
)
;
device
.
bind_texture
(
super
:
:
TextureSampler
:
:
TransformPalette
&
self
.
transforms_texture
.
texture
(
)
Swizzle
:
:
default
(
)
)
;
device
.
bind_texture
(
super
:
:
TextureSampler
:
:
RenderTasks
&
self
.
render_task_texture
.
texture
(
)
Swizzle
:
:
default
(
)
)
;
}
pub
fn
size_in_bytes
(
&
self
)
-
>
usize
{
self
.
prim_header_f_texture
.
size_in_bytes
(
)
+
self
.
prim_header_i_texture
.
size_in_bytes
(
)
+
self
.
transforms_texture
.
size_in_bytes
(
)
+
self
.
render_task_texture
.
size_in_bytes
(
)
}
pub
fn
deinit
(
self
device
:
&
mut
Device
)
{
self
.
transforms_texture
.
deinit
(
device
)
;
self
.
prim_header_f_texture
.
deinit
(
device
)
;
self
.
prim_header_i_texture
.
deinit
(
device
)
;
self
.
render_task_texture
.
deinit
(
device
)
;
}
}
pub
struct
RendererVAOs
{
prim_vao
:
VAO
blur_vao
:
VAO
clip_rect_vao
:
VAO
clip_box_shadow_vao
:
VAO
clip_image_vao
:
VAO
border_vao
:
VAO
line_vao
:
VAO
scale_vao
:
VAO
gradient_vao
:
VAO
resolve_vao
:
VAO
svg_filter_vao
:
VAO
composite_vao
:
VAO
clear_vao
:
VAO
}
impl
RendererVAOs
{
pub
fn
new
(
device
:
&
mut
Device
)
-
>
Self
{
let
x0
=
0
.
0
;
let
y0
=
0
.
0
;
let
x1
=
1
.
0
;
let
y1
=
1
.
0
;
let
quad_indices
:
[
u16
;
6
]
=
[
0
1
2
2
1
3
]
;
let
quad_vertices
=
[
PackedVertex
{
pos
:
[
x0
y0
]
}
PackedVertex
{
pos
:
[
x1
y0
]
}
PackedVertex
{
pos
:
[
x0
y1
]
}
PackedVertex
{
pos
:
[
x1
y1
]
}
]
;
let
prim_vao
=
device
.
create_vao
(
&
desc
:
:
PRIM_INSTANCES
)
;
device
.
bind_vao
(
&
prim_vao
)
;
device
.
update_vao_indices
(
&
prim_vao
&
quad_indices
VertexUsageHint
:
:
Static
)
;
device
.
update_vao_main_vertices
(
&
prim_vao
&
quad_vertices
VertexUsageHint
:
:
Static
)
;
RendererVAOs
{
blur_vao
:
device
.
create_vao_with_new_instances
(
&
desc
:
:
BLUR
&
prim_vao
)
clip_rect_vao
:
device
.
create_vao_with_new_instances
(
&
desc
:
:
CLIP_RECT
&
prim_vao
)
clip_box_shadow_vao
:
device
.
create_vao_with_new_instances
(
&
desc
:
:
CLIP_BOX_SHADOW
&
prim_vao
)
clip_image_vao
:
device
.
create_vao_with_new_instances
(
&
desc
:
:
CLIP_IMAGE
&
prim_vao
)
border_vao
:
device
.
create_vao_with_new_instances
(
&
desc
:
:
BORDER
&
prim_vao
)
scale_vao
:
device
.
create_vao_with_new_instances
(
&
desc
:
:
SCALE
&
prim_vao
)
line_vao
:
device
.
create_vao_with_new_instances
(
&
desc
:
:
LINE
&
prim_vao
)
gradient_vao
:
device
.
create_vao_with_new_instances
(
&
desc
:
:
GRADIENT
&
prim_vao
)
resolve_vao
:
device
.
create_vao_with_new_instances
(
&
desc
:
:
RESOLVE
&
prim_vao
)
svg_filter_vao
:
device
.
create_vao_with_new_instances
(
&
desc
:
:
SVG_FILTER
&
prim_vao
)
composite_vao
:
device
.
create_vao_with_new_instances
(
&
desc
:
:
COMPOSITE
&
prim_vao
)
clear_vao
:
device
.
create_vao_with_new_instances
(
&
desc
:
:
CLEAR
&
prim_vao
)
prim_vao
}
}
pub
fn
deinit
(
self
device
:
&
mut
Device
)
{
device
.
delete_vao
(
self
.
prim_vao
)
;
device
.
delete_vao
(
self
.
resolve_vao
)
;
device
.
delete_vao
(
self
.
clip_rect_vao
)
;
device
.
delete_vao
(
self
.
clip_box_shadow_vao
)
;
device
.
delete_vao
(
self
.
clip_image_vao
)
;
device
.
delete_vao
(
self
.
gradient_vao
)
;
device
.
delete_vao
(
self
.
blur_vao
)
;
device
.
delete_vao
(
self
.
line_vao
)
;
device
.
delete_vao
(
self
.
border_vao
)
;
device
.
delete_vao
(
self
.
scale_vao
)
;
device
.
delete_vao
(
self
.
svg_filter_vao
)
;
device
.
delete_vao
(
self
.
composite_vao
)
;
device
.
delete_vao
(
self
.
clear_vao
)
;
}
}
impl
ops
:
:
Index
<
VertexArrayKind
>
for
RendererVAOs
{
type
Output
=
VAO
;
fn
index
(
&
self
kind
:
VertexArrayKind
)
-
>
&
VAO
{
match
kind
{
VertexArrayKind
:
:
Primitive
=
>
&
self
.
prim_vao
VertexArrayKind
:
:
ClipImage
=
>
&
self
.
clip_image_vao
VertexArrayKind
:
:
ClipRect
=
>
&
self
.
clip_rect_vao
VertexArrayKind
:
:
ClipBoxShadow
=
>
&
self
.
clip_box_shadow_vao
VertexArrayKind
:
:
Blur
=
>
&
self
.
blur_vao
VertexArrayKind
:
:
VectorStencil
|
VertexArrayKind
:
:
VectorCover
=
>
unreachable
!
(
)
VertexArrayKind
:
:
Border
=
>
&
self
.
border_vao
VertexArrayKind
:
:
Scale
=
>
&
self
.
scale_vao
VertexArrayKind
:
:
LineDecoration
=
>
&
self
.
line_vao
VertexArrayKind
:
:
Gradient
=
>
&
self
.
gradient_vao
VertexArrayKind
:
:
Resolve
=
>
&
self
.
resolve_vao
VertexArrayKind
:
:
SvgFilter
=
>
&
self
.
svg_filter_vao
VertexArrayKind
:
:
Composite
=
>
&
self
.
composite_vao
VertexArrayKind
:
:
Clear
=
>
&
self
.
clear_vao
}
}
}
