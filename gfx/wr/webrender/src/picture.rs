use
api
:
:
{
MixBlendMode
PremultipliedColorF
FilterPrimitiveKind
}
;
use
api
:
:
{
PropertyBinding
PropertyBindingId
FilterPrimitive
}
;
use
api
:
:
{
DebugFlags
ImageKey
ColorF
ColorU
PrimitiveFlags
}
;
use
api
:
:
{
ImageRendering
ColorDepth
YuvColorSpace
YuvFormat
AlphaType
}
;
use
api
:
:
units
:
:
*
;
use
crate
:
:
batch
:
:
BatchFilter
;
use
crate
:
:
box_shadow
:
:
BLUR_SAMPLE_SCALE
;
use
crate
:
:
clip
:
:
{
ClipStore
ClipChainInstance
ClipChainId
ClipInstance
}
;
use
crate
:
:
spatial_tree
:
:
{
ROOT_SPATIAL_NODE_INDEX
SpatialTree
CoordinateSpaceMapping
SpatialNodeIndex
VisibleFace
}
;
use
crate
:
:
composite
:
:
{
CompositorKind
CompositeState
NativeSurfaceId
NativeTileId
CompositeTileSurface
tile_kind
}
;
use
crate
:
:
composite
:
:
{
ExternalSurfaceDescriptor
ExternalSurfaceDependency
CompositeTileDescriptor
CompositeTile
}
;
use
crate
:
:
composite
:
:
{
CompositorTransformIndex
}
;
use
crate
:
:
debug_colors
;
use
euclid
:
:
{
vec2
vec3
Point2D
Scale
Size2D
Vector2D
Rect
Box2D
Transform3D
SideOffsets2D
}
;
use
euclid
:
:
approxeq
:
:
ApproxEq
;
use
crate
:
:
filterdata
:
:
SFilterData
;
use
crate
:
:
intern
:
:
ItemUid
;
use
crate
:
:
internal_types
:
:
{
FastHashMap
FastHashSet
PlaneSplitter
Filter
PlaneSplitAnchor
TextureSource
}
;
use
crate
:
:
frame_builder
:
:
{
FrameBuildingContext
FrameBuildingState
PictureState
PictureContext
}
;
use
crate
:
:
gpu_cache
:
:
{
GpuCache
GpuCacheAddress
GpuCacheHandle
}
;
use
crate
:
:
gpu_types
:
:
{
UvRectKind
ZBufferId
}
;
use
plane_split
:
:
{
Clipper
Polygon
Splitter
}
;
use
crate
:
:
prim_store
:
:
{
PrimitiveTemplateKind
PictureIndex
PrimitiveInstance
PrimitiveInstanceKind
}
;
use
crate
:
:
prim_store
:
:
{
ColorBindingStorage
ColorBindingIndex
PrimitiveScratchBuffer
}
;
use
crate
:
:
print_tree
:
:
{
PrintTree
PrintTreePrinter
}
;
use
crate
:
:
render_backend
:
:
{
DataStores
FrameId
}
;
use
crate
:
:
render_task_graph
:
:
RenderTaskId
;
use
crate
:
:
render_target
:
:
RenderTargetKind
;
use
crate
:
:
render_task
:
:
{
BlurTask
RenderTask
RenderTaskLocation
BlurTaskCache
}
;
use
crate
:
:
render_task
:
:
{
StaticRenderTaskSurface
RenderTaskKind
}
;
use
crate
:
:
renderer
:
:
BlendMode
;
use
crate
:
:
resource_cache
:
:
{
ResourceCache
ImageGeneration
ImageRequest
}
;
use
crate
:
:
space
:
:
SpaceMapper
;
use
crate
:
:
scene
:
:
SceneProperties
;
use
smallvec
:
:
SmallVec
;
use
std
:
:
{
mem
u8
marker
u32
}
;
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicUsize
Ordering
}
;
use
std
:
:
collections
:
:
hash_map
:
:
Entry
;
use
std
:
:
ops
:
:
Range
;
use
crate
:
:
texture_cache
:
:
TextureCacheHandle
;
use
crate
:
:
util
:
:
{
MaxRect
VecHelper
MatrixHelpers
Recycler
raster_rect_to_device_pixels
ScaleOffset
}
;
use
crate
:
:
filterdata
:
:
{
FilterDataHandle
}
;
use
crate
:
:
tile_cache
:
:
{
SliceDebugInfo
TileDebugInfo
DirtyTileDebugInfo
}
;
use
crate
:
:
visibility
:
:
{
PrimitiveVisibilityFlags
FrameVisibilityContext
}
;
use
crate
:
:
visibility
:
:
{
VisibilityState
FrameVisibilityState
}
;
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
use
ron
;
#
[
cfg
(
feature
=
"
capture
"
)
]
use
crate
:
:
scene_builder_thread
:
:
InternerUpdates
;
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
use
crate
:
:
intern
:
:
{
Internable
UpdateList
}
;
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
use
crate
:
:
clip
:
:
{
ClipIntern
PolygonIntern
}
;
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
use
crate
:
:
filterdata
:
:
FilterDataIntern
;
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
use
api
:
:
PrimitiveKeyKind
;
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
use
crate
:
:
prim_store
:
:
backdrop
:
:
Backdrop
;
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
use
crate
:
:
prim_store
:
:
borders
:
:
{
ImageBorder
NormalBorderPrim
}
;
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
use
crate
:
:
prim_store
:
:
gradient
:
:
{
LinearGradient
RadialGradient
ConicGradient
}
;
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
use
crate
:
:
prim_store
:
:
image
:
:
{
Image
YuvImage
}
;
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
use
crate
:
:
prim_store
:
:
line_dec
:
:
LineDecoration
;
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
use
crate
:
:
prim_store
:
:
picture
:
:
Picture
;
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
use
crate
:
:
prim_store
:
:
text_run
:
:
TextRun
;
#
[
cfg
(
feature
=
"
capture
"
)
]
use
std
:
:
fs
:
:
File
;
#
[
cfg
(
feature
=
"
capture
"
)
]
use
std
:
:
io
:
:
prelude
:
:
*
;
#
[
cfg
(
feature
=
"
capture
"
)
]
use
std
:
:
path
:
:
PathBuf
;
use
crate
:
:
scene_building
:
:
{
SliceFlags
}
;
#
[
cfg
(
feature
=
"
replay
"
)
]
use
std
:
:
collections
:
:
HashMap
;
pub
const
MAX_BLUR_RADIUS
:
f32
=
100
.
;
#
[
derive
(
Debug
Copy
Clone
)
]
pub
enum
SubpixelMode
{
Allow
Deny
Conditional
{
allowed_rect
:
PictureRect
}
}
#
[
derive
(
Debug
Clone
)
]
struct
MatrixKey
{
m
:
[
f32
;
16
]
}
impl
PartialEq
for
MatrixKey
{
fn
eq
(
&
self
other
:
&
Self
)
-
>
bool
{
const
EPSILON
:
f32
=
0
.
001
;
for
(
i
j
)
in
self
.
m
.
iter
(
)
.
zip
(
other
.
m
.
iter
(
)
)
{
if
!
i
.
approx_eq_eps
(
j
&
EPSILON
)
{
return
false
;
}
}
true
}
}
#
[
derive
(
Debug
PartialEq
Clone
)
]
enum
TransformKey
{
Local
ScaleOffset
{
scale_x
:
f32
scale_y
:
f32
offset_x
:
f32
offset_y
:
f32
}
Transform
{
m
:
MatrixKey
}
}
impl
<
Src
Dst
>
From
<
CoordinateSpaceMapping
<
Src
Dst
>
>
for
TransformKey
{
fn
from
(
transform
:
CoordinateSpaceMapping
<
Src
Dst
>
)
-
>
TransformKey
{
match
transform
{
CoordinateSpaceMapping
:
:
Local
=
>
{
TransformKey
:
:
Local
}
CoordinateSpaceMapping
:
:
ScaleOffset
(
ref
scale_offset
)
=
>
{
TransformKey
:
:
ScaleOffset
{
scale_x
:
scale_offset
.
scale
.
x
scale_y
:
scale_offset
.
scale
.
y
offset_x
:
scale_offset
.
offset
.
x
offset_y
:
scale_offset
.
offset
.
y
}
}
CoordinateSpaceMapping
:
:
Transform
(
ref
m
)
=
>
{
TransformKey
:
:
Transform
{
m
:
MatrixKey
{
m
:
m
.
to_array
(
)
}
}
}
}
}
}
#
[
derive
(
Hash
Clone
Copy
Debug
Eq
PartialEq
Ord
PartialOrd
)
]
pub
struct
TileCoordinate
;
pub
type
TileOffset
=
Point2D
<
i32
TileCoordinate
>
;
/
/
/
cbindgen
:
ignore
pub
type
TileSize
=
Size2D
<
i32
TileCoordinate
>
;
pub
type
TileRect
=
Rect
<
i32
TileCoordinate
>
;
const
MAX_COMPOSITOR_SURFACES
:
usize
=
4
;
pub
const
TILE_SIZE_DEFAULT
:
DeviceIntSize
=
DeviceIntSize
{
width
:
1024
height
:
512
_unit
:
marker
:
:
PhantomData
}
;
pub
const
TILE_SIZE_SCROLLBAR_HORIZONTAL
:
DeviceIntSize
=
DeviceIntSize
{
width
:
1024
height
:
32
_unit
:
marker
:
:
PhantomData
}
;
pub
const
TILE_SIZE_SCROLLBAR_VERTICAL
:
DeviceIntSize
=
DeviceIntSize
{
width
:
32
height
:
1024
_unit
:
marker
:
:
PhantomData
}
;
const
MAX_SURFACE_SIZE
:
f32
=
4096
.
0
;
const
MAX_COMPOSITOR_SURFACES_SIZE
:
f32
=
8192
.
0
;
const
MAX_PRIM_SUB_DEPS
:
usize
=
u8
:
:
MAX
as
usize
;
static
NEXT_TILE_ID
:
AtomicUsize
=
AtomicUsize
:
:
new
(
0
)
;
fn
clamp
(
value
:
i32
low
:
i32
high
:
i32
)
-
>
i32
{
value
.
max
(
low
)
.
min
(
high
)
}
fn
clampf
(
value
:
f32
low
:
f32
high
:
f32
)
-
>
f32
{
value
.
max
(
low
)
.
min
(
high
)
}
fn
clamp_blur_radius
(
blur_radius
:
f32
scale_factors
:
(
f32
f32
)
)
-
>
f32
{
let
largest_scale_factor
=
f32
:
:
max
(
scale_factors
.
0
scale_factors
.
1
)
;
let
scaled_blur_radius
=
blur_radius
*
largest_scale_factor
;
if
scaled_blur_radius
>
MAX_BLUR_RADIUS
{
MAX_BLUR_RADIUS
/
largest_scale_factor
}
else
{
blur_radius
}
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
Eq
PartialOrd
Ord
Hash
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
PrimitiveDependencyIndex
(
pub
u32
)
;
#
[
derive
(
Debug
)
]
pub
struct
BindingInfo
<
T
>
{
value
:
T
changed
:
bool
}
#
[
derive
(
Debug
PartialEq
Clone
Copy
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
enum
Binding
<
T
>
{
Value
(
T
)
Binding
(
PropertyBindingId
)
}
impl
<
T
>
From
<
PropertyBinding
<
T
>
>
for
Binding
<
T
>
{
fn
from
(
binding
:
PropertyBinding
<
T
>
)
-
>
Binding
<
T
>
{
match
binding
{
PropertyBinding
:
:
Binding
(
key
_
)
=
>
Binding
:
:
Binding
(
key
.
id
)
PropertyBinding
:
:
Value
(
value
)
=
>
Binding
:
:
Value
(
value
)
}
}
}
pub
type
OpacityBinding
=
Binding
<
f32
>
;
pub
type
OpacityBindingInfo
=
BindingInfo
<
f32
>
;
pub
type
ColorBinding
=
Binding
<
ColorU
>
;
pub
type
ColorBindingInfo
=
BindingInfo
<
ColorU
>
;
#
[
derive
(
Copy
Clone
Debug
Eq
PartialEq
Hash
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
SpatialNodeKey
{
spatial_node_index
:
SpatialNodeIndex
frame_id
:
FrameId
}
struct
SpatialNodeComparer
{
ref_spatial_node_index
:
SpatialNodeIndex
spatial_nodes
:
FastHashMap
<
SpatialNodeKey
TransformKey
>
compare_cache
:
FastHashMap
<
(
SpatialNodeKey
SpatialNodeKey
)
bool
>
referenced_frames
:
FastHashSet
<
FrameId
>
}
impl
SpatialNodeComparer
{
fn
new
(
)
-
>
Self
{
SpatialNodeComparer
{
ref_spatial_node_index
:
ROOT_SPATIAL_NODE_INDEX
spatial_nodes
:
FastHashMap
:
:
default
(
)
compare_cache
:
FastHashMap
:
:
default
(
)
referenced_frames
:
FastHashSet
:
:
default
(
)
}
}
fn
next_frame
(
&
mut
self
ref_spatial_node_index
:
SpatialNodeIndex
)
{
let
referenced_frames
=
&
self
.
referenced_frames
;
self
.
spatial_nodes
.
retain
(
|
key
_
|
{
referenced_frames
.
contains
(
&
key
.
frame_id
)
}
)
;
self
.
ref_spatial_node_index
=
ref_spatial_node_index
;
self
.
compare_cache
.
clear
(
)
;
self
.
referenced_frames
.
clear
(
)
;
}
fn
register_used_transform
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
frame_id
:
FrameId
spatial_tree
:
&
SpatialTree
)
{
let
key
=
SpatialNodeKey
{
spatial_node_index
frame_id
}
;
if
let
Entry
:
:
Vacant
(
entry
)
=
self
.
spatial_nodes
.
entry
(
key
)
{
entry
.
insert
(
get_transform_key
(
spatial_node_index
self
.
ref_spatial_node_index
spatial_tree
)
)
;
}
}
fn
are_transforms_equivalent
(
&
mut
self
prev_spatial_node_key
:
&
SpatialNodeKey
curr_spatial_node_key
:
&
SpatialNodeKey
)
-
>
bool
{
let
key
=
(
*
prev_spatial_node_key
*
curr_spatial_node_key
)
;
let
spatial_nodes
=
&
self
.
spatial_nodes
;
*
self
.
compare_cache
.
entry
(
key
)
.
or_insert_with
(
|
|
{
let
prev
=
&
spatial_nodes
[
&
prev_spatial_node_key
]
;
let
curr
=
&
spatial_nodes
[
&
curr_spatial_node_key
]
;
curr
=
=
prev
}
)
}
fn
retain_for_frame
(
&
mut
self
frame_id
:
FrameId
)
{
self
.
referenced_frames
.
insert
(
frame_id
)
;
}
}
struct
TilePreUpdateContext
{
pic_to_world_mapper
:
SpaceMapper
<
PicturePixel
WorldPixel
>
fract_offset
:
PictureVector2D
device_fract_offset
:
DeviceVector2D
background_color
:
Option
<
ColorF
>
global_screen_world_rect
:
WorldRect
tile_size
:
PictureSize
frame_id
:
FrameId
}
struct
TilePostUpdateContext
<
'
a
>
{
pic_to_world_mapper
:
SpaceMapper
<
PicturePixel
WorldPixel
>
global_device_pixel_scale
:
DevicePixelScale
local_clip_rect
:
PictureRect
backdrop
:
Option
<
BackdropInfo
>
opacity_bindings
:
&
'
a
FastHashMap
<
PropertyBindingId
OpacityBindingInfo
>
color_bindings
:
&
'
a
FastHashMap
<
PropertyBindingId
ColorBindingInfo
>
current_tile_size
:
DeviceIntSize
local_rect
:
PictureRect
z_id
:
ZBufferId
invalidate_all
:
bool
}
struct
TilePostUpdateState
<
'
a
>
{
resource_cache
:
&
'
a
mut
ResourceCache
composite_state
:
&
'
a
mut
CompositeState
compare_cache
:
&
'
a
mut
FastHashMap
<
PrimitiveComparisonKey
PrimitiveCompareResult
>
spatial_node_comparer
:
&
'
a
mut
SpatialNodeComparer
}
struct
PrimitiveDependencyInfo
{
prim_uid
:
ItemUid
prim_clip_box
:
PictureBox2D
images
:
SmallVec
<
[
ImageDependency
;
8
]
>
opacity_bindings
:
SmallVec
<
[
OpacityBinding
;
4
]
>
color_binding
:
Option
<
ColorBinding
>
clips
:
SmallVec
<
[
ItemUid
;
8
]
>
spatial_nodes
:
SmallVec
<
[
SpatialNodeIndex
;
4
]
>
}
impl
PrimitiveDependencyInfo
{
fn
new
(
prim_uid
:
ItemUid
prim_clip_box
:
PictureBox2D
)
-
>
Self
{
PrimitiveDependencyInfo
{
prim_uid
images
:
SmallVec
:
:
new
(
)
opacity_bindings
:
SmallVec
:
:
new
(
)
color_binding
:
None
prim_clip_box
clips
:
SmallVec
:
:
new
(
)
spatial_nodes
:
SmallVec
:
:
new
(
)
}
}
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
PartialOrd
Ord
Eq
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
TileId
(
pub
usize
)
;
#
[
derive
(
Debug
)
]
pub
enum
SurfaceTextureDescriptor
{
TextureCache
{
handle
:
TextureCacheHandle
}
Native
{
id
:
Option
<
NativeTileId
>
}
}
#
[
derive
(
Clone
Debug
Eq
PartialEq
Hash
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
enum
ResolvedSurfaceTexture
{
TextureCache
{
texture
:
TextureSource
}
Native
{
id
:
NativeTileId
size
:
DeviceIntSize
}
}
impl
SurfaceTextureDescriptor
{
pub
fn
resolve
(
&
self
resource_cache
:
&
ResourceCache
size
:
DeviceIntSize
)
-
>
ResolvedSurfaceTexture
{
match
self
{
SurfaceTextureDescriptor
:
:
TextureCache
{
handle
}
=
>
{
let
cache_item
=
resource_cache
.
texture_cache
.
get
(
handle
)
;
ResolvedSurfaceTexture
:
:
TextureCache
{
texture
:
cache_item
.
texture_id
}
}
SurfaceTextureDescriptor
:
:
Native
{
id
}
=
>
{
ResolvedSurfaceTexture
:
:
Native
{
id
:
id
.
expect
(
"
bug
:
native
surface
not
allocated
"
)
size
}
}
}
}
}
#
[
derive
(
Debug
)
]
pub
enum
TileSurface
{
Texture
{
descriptor
:
SurfaceTextureDescriptor
}
Color
{
color
:
ColorF
}
Clear
}
impl
TileSurface
{
fn
kind
(
&
self
)
-
>
&
'
static
str
{
match
*
self
{
TileSurface
:
:
Color
{
.
.
}
=
>
"
Color
"
TileSurface
:
:
Texture
{
.
.
}
=
>
"
Texture
"
TileSurface
:
:
Clear
=
>
"
Clear
"
}
}
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
enum
CompareHelperResult
<
T
>
{
Equal
Count
{
prev_count
:
u8
curr_count
:
u8
}
Sentinel
NotEqual
{
prev
:
T
curr
:
T
}
PredicateTrue
{
curr
:
T
}
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
#
[
repr
(
u8
)
]
pub
enum
PrimitiveCompareResult
{
Equal
Descriptor
Clip
Transform
Image
OpacityBinding
ColorBinding
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
enum
PrimitiveCompareResultDetail
{
Equal
Descriptor
{
old
:
PrimitiveDescriptor
new
:
PrimitiveDescriptor
}
Clip
{
detail
:
CompareHelperResult
<
ItemUid
>
}
Transform
{
detail
:
CompareHelperResult
<
SpatialNodeKey
>
}
Image
{
detail
:
CompareHelperResult
<
ImageDependency
>
}
OpacityBinding
{
detail
:
CompareHelperResult
<
OpacityBinding
>
}
ColorBinding
{
detail
:
CompareHelperResult
<
ColorBinding
>
}
}
#
[
derive
(
Debug
Clone
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
enum
InvalidationReason
{
FractionalOffset
{
old
:
DeviceVector2D
new
:
DeviceVector2D
}
BackgroundColor
{
old
:
Option
<
ColorF
>
new
:
Option
<
ColorF
>
}
SurfaceOpacityChanged
{
became_opaque
:
bool
}
NoTexture
NoSurface
PrimCount
{
old
:
Option
<
Vec
<
ItemUid
>
>
new
:
Option
<
Vec
<
ItemUid
>
>
}
Content
{
prim_compare_result
:
PrimitiveCompareResult
prim_compare_result_detail
:
Option
<
PrimitiveCompareResultDetail
>
}
CompositorKindChanged
ValidRectChanged
ScaleChanged
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
TileSerializer
{
pub
rect
:
PictureRect
pub
current_descriptor
:
TileDescriptor
pub
device_fract_offset
:
DeviceVector2D
pub
id
:
TileId
pub
root
:
TileNode
pub
background_color
:
Option
<
ColorF
>
pub
invalidation_reason
:
Option
<
InvalidationReason
>
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
TileCacheInstanceSerializer
{
pub
slice
:
usize
pub
tiles
:
FastHashMap
<
TileOffset
TileSerializer
>
pub
background_color
:
Option
<
ColorF
>
pub
fract_offset
:
PictureVector2D
}
pub
struct
Tile
{
pub
tile_offset
:
TileOffset
pub
world_tile_rect
:
WorldRect
pub
local_tile_rect
:
PictureRect
pub
local_dirty_rect
:
PictureRect
pub
device_dirty_rect
:
DeviceRect
pub
world_valid_rect
:
WorldRect
pub
device_valid_rect
:
DeviceRect
pub
current_descriptor
:
TileDescriptor
pub
prev_descriptor
:
TileDescriptor
pub
surface
:
Option
<
TileSurface
>
pub
is_valid
:
bool
pub
is_visible
:
bool
device_fract_offset
:
DeviceVector2D
pub
id
:
TileId
pub
is_opaque
:
bool
root
:
TileNode
background_color
:
Option
<
ColorF
>
invalidation_reason
:
Option
<
InvalidationReason
>
pub
local_valid_rect
:
PictureBox2D
pub
z_id
:
ZBufferId
pub
last_updated_frame_id
:
FrameId
}
impl
Tile
{
fn
new
(
tile_offset
:
TileOffset
)
-
>
Self
{
let
id
=
TileId
(
NEXT_TILE_ID
.
fetch_add
(
1
Ordering
:
:
Relaxed
)
)
;
Tile
{
tile_offset
local_tile_rect
:
PictureRect
:
:
zero
(
)
world_tile_rect
:
WorldRect
:
:
zero
(
)
world_valid_rect
:
WorldRect
:
:
zero
(
)
device_valid_rect
:
DeviceRect
:
:
zero
(
)
local_dirty_rect
:
PictureRect
:
:
zero
(
)
device_dirty_rect
:
DeviceRect
:
:
zero
(
)
surface
:
None
current_descriptor
:
TileDescriptor
:
:
new
(
)
prev_descriptor
:
TileDescriptor
:
:
new
(
)
is_valid
:
false
is_visible
:
false
device_fract_offset
:
DeviceVector2D
:
:
zero
(
)
id
is_opaque
:
false
root
:
TileNode
:
:
new_leaf
(
Vec
:
:
new
(
)
)
background_color
:
None
invalidation_reason
:
None
local_valid_rect
:
PictureBox2D
:
:
zero
(
)
z_id
:
ZBufferId
:
:
invalid
(
)
last_updated_frame_id
:
FrameId
:
:
INVALID
}
}
fn
print
(
&
self
pt
:
&
mut
dyn
PrintTreePrinter
)
{
pt
.
new_level
(
format
!
(
"
Tile
{
:
?
}
"
self
.
id
)
)
;
pt
.
add_item
(
format
!
(
"
local_tile_rect
:
{
:
?
}
"
self
.
local_tile_rect
)
)
;
pt
.
add_item
(
format
!
(
"
device_fract_offset
:
{
:
?
}
"
self
.
device_fract_offset
)
)
;
pt
.
add_item
(
format
!
(
"
background_color
:
{
:
?
}
"
self
.
background_color
)
)
;
pt
.
add_item
(
format
!
(
"
invalidation_reason
:
{
:
?
}
"
self
.
invalidation_reason
)
)
;
self
.
current_descriptor
.
print
(
pt
)
;
pt
.
end_level
(
)
;
}
fn
update_dirty_rects
(
&
mut
self
ctx
:
&
TilePostUpdateContext
state
:
&
mut
TilePostUpdateState
invalidation_reason
:
&
mut
Option
<
InvalidationReason
>
frame_context
:
&
FrameVisibilityContext
)
-
>
PictureRect
{
let
mut
prim_comparer
=
PrimitiveComparer
:
:
new
(
&
self
.
prev_descriptor
&
self
.
current_descriptor
state
.
resource_cache
state
.
spatial_node_comparer
ctx
.
opacity_bindings
ctx
.
color_bindings
)
;
let
mut
dirty_rect
=
PictureBox2D
:
:
zero
(
)
;
self
.
root
.
update_dirty_rects
(
&
self
.
prev_descriptor
.
prims
&
self
.
current_descriptor
.
prims
&
mut
prim_comparer
&
mut
dirty_rect
state
.
compare_cache
invalidation_reason
frame_context
)
;
dirty_rect
}
fn
update_content_validity
(
&
mut
self
ctx
:
&
TilePostUpdateContext
state
:
&
mut
TilePostUpdateState
frame_context
:
&
FrameVisibilityContext
)
{
state
.
compare_cache
.
clear
(
)
;
let
mut
invalidation_reason
=
None
;
let
dirty_rect
=
self
.
update_dirty_rects
(
ctx
state
&
mut
invalidation_reason
frame_context
)
;
if
!
dirty_rect
.
is_empty
(
)
{
self
.
invalidate
(
Some
(
dirty_rect
)
invalidation_reason
.
expect
(
"
bug
:
no
invalidation_reason
"
)
)
;
}
if
ctx
.
invalidate_all
{
self
.
invalidate
(
None
InvalidationReason
:
:
ScaleChanged
)
;
}
if
self
.
current_descriptor
.
local_valid_rect
!
=
self
.
prev_descriptor
.
local_valid_rect
{
self
.
invalidate
(
None
InvalidationReason
:
:
ValidRectChanged
)
;
state
.
composite_state
.
dirty_rects_are_valid
=
false
;
}
}
fn
invalidate
(
&
mut
self
invalidation_rect
:
Option
<
PictureRect
>
reason
:
InvalidationReason
)
{
self
.
is_valid
=
false
;
match
invalidation_rect
{
Some
(
rect
)
=
>
{
self
.
local_dirty_rect
=
self
.
local_dirty_rect
.
union
(
&
rect
)
;
}
None
=
>
{
self
.
local_dirty_rect
=
self
.
local_tile_rect
;
}
}
if
self
.
invalidation_reason
.
is_none
(
)
{
self
.
invalidation_reason
=
Some
(
reason
)
;
}
}
fn
pre_update
(
&
mut
self
ctx
:
&
TilePreUpdateContext
)
{
self
.
local_tile_rect
=
PictureRect
:
:
from_origin_and_size
(
PicturePoint
:
:
new
(
self
.
tile_offset
.
x
as
f32
*
ctx
.
tile_size
.
width
+
ctx
.
fract_offset
.
x
self
.
tile_offset
.
y
as
f32
*
ctx
.
tile_size
.
height
+
ctx
.
fract_offset
.
y
)
ctx
.
tile_size
)
;
self
.
local_valid_rect
=
PictureBox2D
:
:
zero
(
)
;
self
.
invalidation_reason
=
None
;
self
.
world_tile_rect
=
ctx
.
pic_to_world_mapper
.
map
(
&
self
.
local_tile_rect
)
.
expect
(
"
bug
:
map
local
tile
rect
"
)
;
self
.
is_visible
=
self
.
world_tile_rect
.
intersects
(
&
ctx
.
global_screen_world_rect
)
;
if
!
self
.
is_visible
{
return
;
}
let
fract_delta
=
self
.
device_fract_offset
-
ctx
.
device_fract_offset
;
let
fract_changed
=
fract_delta
.
x
.
abs
(
)
>
0
.
01
|
|
fract_delta
.
y
.
abs
(
)
>
0
.
01
;
if
fract_changed
{
self
.
invalidate
(
None
InvalidationReason
:
:
FractionalOffset
{
old
:
self
.
device_fract_offset
new
:
ctx
.
device_fract_offset
}
)
;
}
if
ctx
.
background_color
!
=
self
.
background_color
{
self
.
invalidate
(
None
InvalidationReason
:
:
BackgroundColor
{
old
:
self
.
background_color
new
:
ctx
.
background_color
}
)
;
self
.
background_color
=
ctx
.
background_color
;
}
mem
:
:
swap
(
&
mut
self
.
current_descriptor
&
mut
self
.
prev_descriptor
)
;
self
.
current_descriptor
.
clear
(
)
;
self
.
root
.
clear
(
self
.
local_tile_rect
)
;
self
.
last_updated_frame_id
=
ctx
.
frame_id
;
}
fn
add_prim_dependency
(
&
mut
self
info
:
&
PrimitiveDependencyInfo
)
{
if
!
self
.
is_visible
{
return
;
}
self
.
local_valid_rect
=
self
.
local_valid_rect
.
union
(
&
info
.
prim_clip_box
)
;
self
.
current_descriptor
.
images
.
extend_from_slice
(
&
info
.
images
)
;
self
.
current_descriptor
.
opacity_bindings
.
extend_from_slice
(
&
info
.
opacity_bindings
)
;
self
.
current_descriptor
.
clips
.
extend_from_slice
(
&
info
.
clips
)
;
for
spatial_node_index
in
&
info
.
spatial_nodes
{
self
.
current_descriptor
.
transforms
.
push
(
SpatialNodeKey
{
spatial_node_index
:
*
spatial_node_index
frame_id
:
self
.
last_updated_frame_id
}
)
;
}
if
info
.
color_binding
.
is_some
(
)
{
self
.
current_descriptor
.
color_bindings
.
insert
(
self
.
current_descriptor
.
color_bindings
.
len
(
)
info
.
color_binding
.
unwrap
(
)
)
;
}
let
tile_p0
=
self
.
local_tile_rect
.
min
;
let
tile_p1
=
self
.
local_tile_rect
.
max
;
let
prim_clip_box
=
PictureBox2D
:
:
new
(
PicturePoint
:
:
new
(
clampf
(
info
.
prim_clip_box
.
min
.
x
tile_p0
.
x
tile_p1
.
x
)
clampf
(
info
.
prim_clip_box
.
min
.
y
tile_p0
.
y
tile_p1
.
y
)
)
PicturePoint
:
:
new
(
clampf
(
info
.
prim_clip_box
.
max
.
x
tile_p0
.
x
tile_p1
.
x
)
clampf
(
info
.
prim_clip_box
.
max
.
y
tile_p0
.
y
tile_p1
.
y
)
)
)
;
let
prim_index
=
PrimitiveDependencyIndex
(
self
.
current_descriptor
.
prims
.
len
(
)
as
u32
)
;
debug_assert
!
(
info
.
spatial_nodes
.
len
(
)
<
=
MAX_PRIM_SUB_DEPS
)
;
debug_assert
!
(
info
.
clips
.
len
(
)
<
=
MAX_PRIM_SUB_DEPS
)
;
debug_assert
!
(
info
.
images
.
len
(
)
<
=
MAX_PRIM_SUB_DEPS
)
;
debug_assert
!
(
info
.
opacity_bindings
.
len
(
)
<
=
MAX_PRIM_SUB_DEPS
)
;
self
.
current_descriptor
.
prims
.
push
(
PrimitiveDescriptor
{
prim_uid
:
info
.
prim_uid
prim_clip_box
transform_dep_count
:
info
.
spatial_nodes
.
len
(
)
as
u8
clip_dep_count
:
info
.
clips
.
len
(
)
as
u8
image_dep_count
:
info
.
images
.
len
(
)
as
u8
opacity_binding_dep_count
:
info
.
opacity_bindings
.
len
(
)
as
u8
color_binding_dep_count
:
if
info
.
color_binding
.
is_some
(
)
{
1
}
else
{
0
}
as
u8
}
)
;
self
.
root
.
add_prim
(
prim_index
&
info
.
prim_clip_box
)
;
}
fn
post_update
(
&
mut
self
ctx
:
&
TilePostUpdateContext
state
:
&
mut
TilePostUpdateState
frame_context
:
&
FrameVisibilityContext
)
-
>
bool
{
state
.
spatial_node_comparer
.
retain_for_frame
(
self
.
last_updated_frame_id
)
;
if
!
self
.
is_visible
{
return
false
;
}
self
.
current_descriptor
.
local_valid_rect
=
self
.
local_valid_rect
;
self
.
current_descriptor
.
local_valid_rect
=
self
.
local_tile_rect
.
intersection
(
&
ctx
.
local_rect
)
.
and_then
(
|
r
|
r
.
intersection
(
&
self
.
current_descriptor
.
local_valid_rect
)
)
.
unwrap_or_else
(
PictureRect
:
:
zero
)
;
self
.
world_valid_rect
=
ctx
.
pic_to_world_mapper
.
map
(
&
self
.
current_descriptor
.
local_valid_rect
)
.
expect
(
"
bug
:
map
local
valid
rect
"
)
;
let
device_rect
=
(
self
.
world_tile_rect
*
ctx
.
global_device_pixel_scale
)
.
round
(
)
;
self
.
device_valid_rect
=
(
self
.
world_valid_rect
*
ctx
.
global_device_pixel_scale
)
.
round_out
(
)
.
intersection
(
&
device_rect
)
.
unwrap_or_else
(
DeviceRect
:
:
zero
)
;
self
.
update_content_validity
(
ctx
state
frame_context
)
;
if
self
.
current_descriptor
.
prims
.
is_empty
(
)
{
if
let
Some
(
TileSurface
:
:
Texture
{
descriptor
:
SurfaceTextureDescriptor
:
:
Native
{
mut
id
.
.
}
.
.
}
)
=
self
.
surface
.
take
(
)
{
if
let
Some
(
id
)
=
id
.
take
(
)
{
state
.
resource_cache
.
destroy_compositor_tile
(
id
)
;
}
}
self
.
is_visible
=
false
;
return
false
;
}
let
clipped_rect
=
self
.
current_descriptor
.
local_valid_rect
.
intersection
(
&
ctx
.
local_clip_rect
)
.
unwrap_or_else
(
PictureRect
:
:
zero
)
;
let
has_opaque_bg_color
=
self
.
background_color
.
map_or
(
false
|
c
|
c
.
a
>
=
1
.
0
)
;
let
has_opaque_backdrop
=
ctx
.
backdrop
.
map_or
(
false
|
b
|
b
.
opaque_rect
.
contains_box
(
&
clipped_rect
)
)
;
let
is_opaque
=
has_opaque_bg_color
|
|
has_opaque_backdrop
;
self
.
z_id
=
ctx
.
z_id
;
if
is_opaque
!
=
self
.
is_opaque
{
if
let
Some
(
TileSurface
:
:
Texture
{
descriptor
:
SurfaceTextureDescriptor
:
:
Native
{
ref
mut
id
.
.
}
.
.
}
)
=
self
.
surface
{
if
let
Some
(
id
)
=
id
.
take
(
)
{
state
.
resource_cache
.
destroy_compositor_tile
(
id
)
;
}
}
self
.
invalidate
(
None
InvalidationReason
:
:
SurfaceOpacityChanged
{
became_opaque
:
is_opaque
}
)
;
self
.
is_opaque
=
is_opaque
;
}
let
(
supports_dirty_rects
supports_simple_prims
)
=
match
state
.
composite_state
.
compositor_kind
{
CompositorKind
:
:
Draw
{
.
.
}
=
>
{
(
frame_context
.
config
.
gpu_supports_render_target_partial_update
true
)
}
CompositorKind
:
:
Native
{
capabilities
.
.
}
=
>
{
(
capabilities
.
max_update_rects
>
0
false
)
}
}
;
if
supports_dirty_rects
{
if
ctx
.
current_tile_size
=
=
state
.
resource_cache
.
texture_cache
.
default_picture_tile_size
(
)
{
let
max_split_level
=
3
;
self
.
root
.
maybe_merge_or_split
(
0
&
self
.
current_descriptor
.
prims
max_split_level
)
;
}
}
if
!
self
.
is_valid
&
&
!
supports_dirty_rects
{
self
.
local_dirty_rect
=
self
.
local_tile_rect
;
}
let
is_simple_prim
=
ctx
.
backdrop
.
map_or
(
false
|
b
|
b
.
kind
.
is_some
(
)
)
&
&
self
.
current_descriptor
.
prims
.
len
(
)
=
=
1
&
&
self
.
is_opaque
&
&
supports_simple_prims
;
let
surface
=
if
is_simple_prim
{
match
ctx
.
backdrop
.
unwrap
(
)
.
kind
{
Some
(
BackdropKind
:
:
Color
{
color
}
)
=
>
{
TileSurface
:
:
Color
{
color
}
}
Some
(
BackdropKind
:
:
Clear
)
=
>
{
TileSurface
:
:
Clear
}
None
=
>
{
unreachable
!
(
)
;
}
}
}
else
{
match
self
.
surface
.
take
(
)
{
Some
(
TileSurface
:
:
Texture
{
descriptor
}
)
=
>
{
TileSurface
:
:
Texture
{
descriptor
}
}
Some
(
TileSurface
:
:
Color
{
.
.
}
)
|
Some
(
TileSurface
:
:
Clear
)
|
None
=
>
{
let
descriptor
=
match
state
.
composite_state
.
compositor_kind
{
CompositorKind
:
:
Draw
{
.
.
}
=
>
{
SurfaceTextureDescriptor
:
:
TextureCache
{
handle
:
TextureCacheHandle
:
:
invalid
(
)
}
}
CompositorKind
:
:
Native
{
.
.
}
=
>
{
SurfaceTextureDescriptor
:
:
Native
{
id
:
None
}
}
}
;
TileSurface
:
:
Texture
{
descriptor
}
}
}
}
;
self
.
surface
=
Some
(
surface
)
;
true
}
}
#
[
derive
(
Debug
Copy
Clone
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
PrimitiveDescriptor
{
pub
prim_uid
:
ItemUid
pub
prim_clip_box
:
PictureBox2D
transform_dep_count
:
u8
image_dep_count
:
u8
opacity_binding_dep_count
:
u8
clip_dep_count
:
u8
color_binding_dep_count
:
u8
}
impl
PartialEq
for
PrimitiveDescriptor
{
fn
eq
(
&
self
other
:
&
Self
)
-
>
bool
{
const
EPSILON
:
f32
=
0
.
001
;
if
self
.
prim_uid
!
=
other
.
prim_uid
{
return
false
;
}
if
!
self
.
prim_clip_box
.
min
.
x
.
approx_eq_eps
(
&
other
.
prim_clip_box
.
min
.
x
&
EPSILON
)
{
return
false
;
}
if
!
self
.
prim_clip_box
.
min
.
y
.
approx_eq_eps
(
&
other
.
prim_clip_box
.
min
.
y
&
EPSILON
)
{
return
false
;
}
if
!
self
.
prim_clip_box
.
max
.
x
.
approx_eq_eps
(
&
other
.
prim_clip_box
.
max
.
x
&
EPSILON
)
{
return
false
;
}
if
!
self
.
prim_clip_box
.
max
.
y
.
approx_eq_eps
(
&
other
.
prim_clip_box
.
max
.
y
&
EPSILON
)
{
return
false
;
}
true
}
}
struct
CompareHelper
<
'
a
T
>
where
T
:
Copy
{
offset_curr
:
usize
offset_prev
:
usize
curr_items
:
&
'
a
[
T
]
prev_items
:
&
'
a
[
T
]
}
impl
<
'
a
T
>
CompareHelper
<
'
a
T
>
where
T
:
Copy
+
PartialEq
{
fn
new
(
prev_items
:
&
'
a
[
T
]
curr_items
:
&
'
a
[
T
]
)
-
>
Self
{
CompareHelper
{
offset_curr
:
0
offset_prev
:
0
curr_items
prev_items
}
}
fn
reset
(
&
mut
self
)
{
self
.
offset_prev
=
0
;
self
.
offset_curr
=
0
;
}
fn
is_same
<
F
>
(
&
self
prev_count
:
u8
curr_count
:
u8
mut
f
:
F
opt_detail
:
Option
<
&
mut
CompareHelperResult
<
T
>
>
)
-
>
bool
where
F
:
FnMut
(
&
T
&
T
)
-
>
bool
{
if
prev_count
!
=
curr_count
{
if
let
Some
(
detail
)
=
opt_detail
{
*
detail
=
CompareHelperResult
:
:
Count
{
prev_count
curr_count
}
;
}
return
false
;
}
if
curr_count
=
=
0
{
if
let
Some
(
detail
)
=
opt_detail
{
*
detail
=
CompareHelperResult
:
:
Equal
;
}
return
true
;
}
if
curr_count
as
usize
=
=
MAX_PRIM_SUB_DEPS
{
if
let
Some
(
detail
)
=
opt_detail
{
*
detail
=
CompareHelperResult
:
:
Sentinel
;
}
return
false
;
}
let
end_prev
=
self
.
offset_prev
+
prev_count
as
usize
;
let
end_curr
=
self
.
offset_curr
+
curr_count
as
usize
;
let
curr_items
=
&
self
.
curr_items
[
self
.
offset_curr
.
.
end_curr
]
;
let
prev_items
=
&
self
.
prev_items
[
self
.
offset_prev
.
.
end_prev
]
;
for
(
curr
prev
)
in
curr_items
.
iter
(
)
.
zip
(
prev_items
.
iter
(
)
)
{
if
!
f
(
prev
curr
)
{
if
let
Some
(
detail
)
=
opt_detail
{
*
detail
=
CompareHelperResult
:
:
PredicateTrue
{
curr
:
*
curr
}
;
}
return
false
;
}
}
if
let
Some
(
detail
)
=
opt_detail
{
*
detail
=
CompareHelperResult
:
:
Equal
;
}
true
}
fn
advance_prev
(
&
mut
self
count
:
u8
)
{
self
.
offset_prev
+
=
count
as
usize
;
}
fn
advance_curr
(
&
mut
self
count
:
u8
)
{
self
.
offset_curr
+
=
count
as
usize
;
}
}
#
[
cfg_attr
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
derive
(
Clone
)
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
TileDescriptor
{
pub
prims
:
Vec
<
PrimitiveDescriptor
>
clips
:
Vec
<
ItemUid
>
images
:
Vec
<
ImageDependency
>
opacity_bindings
:
Vec
<
OpacityBinding
>
transforms
:
Vec
<
SpatialNodeKey
>
pub
local_valid_rect
:
PictureRect
color_bindings
:
Vec
<
ColorBinding
>
}
impl
TileDescriptor
{
fn
new
(
)
-
>
Self
{
TileDescriptor
{
prims
:
Vec
:
:
new
(
)
clips
:
Vec
:
:
new
(
)
opacity_bindings
:
Vec
:
:
new
(
)
images
:
Vec
:
:
new
(
)
transforms
:
Vec
:
:
new
(
)
local_valid_rect
:
PictureRect
:
:
zero
(
)
color_bindings
:
Vec
:
:
new
(
)
}
}
fn
print
(
&
self
pt
:
&
mut
dyn
PrintTreePrinter
)
{
pt
.
new_level
(
"
current_descriptor
"
.
to_string
(
)
)
;
pt
.
new_level
(
"
prims
"
.
to_string
(
)
)
;
for
prim
in
&
self
.
prims
{
pt
.
new_level
(
format
!
(
"
prim
uid
=
{
}
"
prim
.
prim_uid
.
get_uid
(
)
)
)
;
pt
.
add_item
(
format
!
(
"
clip
:
p0
=
{
}
{
}
p1
=
{
}
{
}
"
prim
.
prim_clip_box
.
min
.
x
prim
.
prim_clip_box
.
min
.
y
prim
.
prim_clip_box
.
max
.
x
prim
.
prim_clip_box
.
max
.
y
)
)
;
pt
.
add_item
(
format
!
(
"
deps
:
t
=
{
}
i
=
{
}
o
=
{
}
c
=
{
}
color
=
{
}
"
prim
.
transform_dep_count
prim
.
image_dep_count
prim
.
opacity_binding_dep_count
prim
.
clip_dep_count
prim
.
color_binding_dep_count
)
)
;
pt
.
end_level
(
)
;
}
pt
.
end_level
(
)
;
if
!
self
.
clips
.
is_empty
(
)
{
pt
.
new_level
(
"
clips
"
.
to_string
(
)
)
;
for
clip
in
&
self
.
clips
{
pt
.
new_level
(
format
!
(
"
clip
uid
=
{
}
"
clip
.
get_uid
(
)
)
)
;
pt
.
end_level
(
)
;
}
pt
.
end_level
(
)
;
}
if
!
self
.
images
.
is_empty
(
)
{
pt
.
new_level
(
"
images
"
.
to_string
(
)
)
;
for
info
in
&
self
.
images
{
pt
.
new_level
(
format
!
(
"
key
=
{
:
?
}
"
info
.
key
)
)
;
pt
.
add_item
(
format
!
(
"
generation
=
{
:
?
}
"
info
.
generation
)
)
;
pt
.
end_level
(
)
;
}
pt
.
end_level
(
)
;
}
if
!
self
.
opacity_bindings
.
is_empty
(
)
{
pt
.
new_level
(
"
opacity_bindings
"
.
to_string
(
)
)
;
for
opacity_binding
in
&
self
.
opacity_bindings
{
pt
.
new_level
(
format
!
(
"
binding
=
{
:
?
}
"
opacity_binding
)
)
;
pt
.
end_level
(
)
;
}
pt
.
end_level
(
)
;
}
if
!
self
.
transforms
.
is_empty
(
)
{
pt
.
new_level
(
"
transforms
"
.
to_string
(
)
)
;
for
transform
in
&
self
.
transforms
{
pt
.
new_level
(
format
!
(
"
spatial_node
=
{
:
?
}
"
transform
)
)
;
pt
.
end_level
(
)
;
}
pt
.
end_level
(
)
;
}
if
!
self
.
color_bindings
.
is_empty
(
)
{
pt
.
new_level
(
"
color_bindings
"
.
to_string
(
)
)
;
for
color_binding
in
&
self
.
color_bindings
{
pt
.
new_level
(
format
!
(
"
binding
=
{
:
?
}
"
color_binding
)
)
;
pt
.
end_level
(
)
;
}
pt
.
end_level
(
)
;
}
pt
.
end_level
(
)
;
}
fn
clear
(
&
mut
self
)
{
self
.
prims
.
clear
(
)
;
self
.
clips
.
clear
(
)
;
self
.
opacity_bindings
.
clear
(
)
;
self
.
images
.
clear
(
)
;
self
.
transforms
.
clear
(
)
;
self
.
local_valid_rect
=
PictureRect
:
:
zero
(
)
;
self
.
color_bindings
.
clear
(
)
;
}
}
#
[
derive
(
Clone
)
]
pub
struct
DirtyRegion
{
pub
filters
:
Vec
<
BatchFilter
>
pub
combined
:
WorldRect
spatial_node_index
:
SpatialNodeIndex
}
impl
DirtyRegion
{
pub
fn
new
(
spatial_node_index
:
SpatialNodeIndex
)
-
>
Self
{
DirtyRegion
{
filters
:
Vec
:
:
with_capacity
(
16
)
combined
:
WorldRect
:
:
zero
(
)
spatial_node_index
}
}
pub
fn
reset
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
)
{
self
.
filters
.
clear
(
)
;
self
.
combined
=
WorldRect
:
:
zero
(
)
;
self
.
spatial_node_index
=
spatial_node_index
;
}
pub
fn
add_dirty_region
(
&
mut
self
rect_in_pic_space
:
PictureRect
sub_slice_index
:
SubSliceIndex
spatial_tree
:
&
SpatialTree
)
{
let
map_pic_to_world
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
self
.
spatial_node_index
WorldRect
:
:
max_rect
(
)
spatial_tree
)
;
let
world_rect
=
map_pic_to_world
.
map
(
&
rect_in_pic_space
)
.
expect
(
"
bug
"
)
;
self
.
combined
=
self
.
combined
.
union
(
&
world_rect
)
;
self
.
filters
.
push
(
BatchFilter
{
rect_in_pic_space
sub_slice_index
}
)
;
}
pub
fn
inflate
(
&
self
inflate_amount
:
f32
spatial_tree
:
&
SpatialTree
)
-
>
DirtyRegion
{
let
map_pic_to_world
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
self
.
spatial_node_index
WorldRect
:
:
max_rect
(
)
spatial_tree
)
;
let
mut
filters
=
Vec
:
:
with_capacity
(
self
.
filters
.
len
(
)
)
;
let
mut
combined
=
WorldRect
:
:
zero
(
)
;
for
filter
in
&
self
.
filters
{
let
rect_in_pic_space
=
filter
.
rect_in_pic_space
.
inflate
(
inflate_amount
inflate_amount
)
;
let
world_rect
=
map_pic_to_world
.
map
(
&
rect_in_pic_space
)
.
expect
(
"
bug
"
)
;
combined
=
combined
.
union
(
&
world_rect
)
;
filters
.
push
(
BatchFilter
{
rect_in_pic_space
sub_slice_index
:
filter
.
sub_slice_index
}
)
;
}
DirtyRegion
{
filters
combined
spatial_node_index
:
self
.
spatial_node_index
}
}
}
#
[
derive
(
Debug
Copy
Clone
)
]
pub
enum
BackdropKind
{
Color
{
color
:
ColorF
}
Clear
}
#
[
derive
(
Debug
Copy
Clone
)
]
pub
struct
BackdropInfo
{
pub
opaque_rect
:
PictureRect
pub
kind
:
Option
<
BackdropKind
>
}
impl
BackdropInfo
{
fn
empty
(
)
-
>
Self
{
BackdropInfo
{
opaque_rect
:
PictureRect
:
:
zero
(
)
kind
:
None
}
}
}
#
[
derive
(
Clone
)
]
pub
struct
TileCacheLoggerSlice
{
pub
serialized_slice
:
String
pub
local_to_world_transform
:
Transform3D
<
f32
PicturePixel
WorldPixel
>
}
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
macro_rules
!
declare_tile_cache_logger_updatelists
{
(
(
name
:
ident
:
ty
:
ty
)
+
)
=
>
{
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
struct
TileCacheLoggerUpdateListsSerializer
{
pub
ron_string
:
Vec
<
String
>
}
pub
struct
TileCacheLoggerUpdateLists
{
(
/
/
/
Generate
storage
one
per
interner
.
/
/
/
the
tuple
is
a
workaround
to
avoid
the
need
for
multiple
/
/
/
fields
that
start
with
name
(
macro
concatenation
)
.
/
/
/
the
string
is
.
ron
serialized
updatelist
at
capture
time
;
/
/
/
the
updates
is
the
list
of
DataStore
updates
(
avoid
UpdateList
/
/
/
due
to
Default
(
)
requirements
on
the
Keys
)
reconstructed
at
/
/
/
load
time
.
pub
name
:
(
Vec
<
String
>
Vec
<
UpdateList
<
<
ty
as
Internable
>
:
:
Key
>
>
)
)
+
}
impl
TileCacheLoggerUpdateLists
{
pub
fn
new
(
)
-
>
Self
{
TileCacheLoggerUpdateLists
{
(
name
:
(
Vec
:
:
new
(
)
Vec
:
:
new
(
)
)
)
+
}
}
/
/
/
serialize
all
interners
in
updates
to
.
ron
#
[
cfg
(
feature
=
"
capture
"
)
]
fn
serialize_updates
(
&
mut
self
updates
:
&
InternerUpdates
)
{
(
self
.
name
.
0
.
push
(
ron
:
:
ser
:
:
to_string_pretty
(
&
updates
.
name
Default
:
:
default
(
)
)
.
unwrap
(
)
)
;
)
+
}
fn
is_empty
(
&
self
)
-
>
bool
{
(
if
!
self
.
name
.
0
.
is_empty
(
)
{
return
false
;
}
)
+
true
}
#
[
cfg
(
feature
=
"
capture
"
)
]
fn
to_ron
(
&
self
)
-
>
String
{
let
mut
serializer
=
TileCacheLoggerUpdateListsSerializer
{
ron_string
:
Vec
:
:
new
(
)
}
;
(
serializer
.
ron_string
.
push
(
ron
:
:
ser
:
:
to_string_pretty
(
&
self
.
name
.
0
Default
:
:
default
(
)
)
.
unwrap
(
)
)
;
)
+
ron
:
:
ser
:
:
to_string_pretty
(
&
serializer
Default
:
:
default
(
)
)
.
unwrap
(
)
}
#
[
cfg
(
feature
=
"
replay
"
)
]
pub
fn
from_ron
(
&
mut
self
text
:
&
str
)
{
let
serializer
:
TileCacheLoggerUpdateListsSerializer
=
match
ron
:
:
de
:
:
from_str
(
&
text
)
{
Ok
(
data
)
=
>
{
data
}
Err
(
e
)
=
>
{
println
!
(
"
ERROR
:
failed
to
deserialize
updatelist
:
{
:
?
}
\
n
{
:
?
}
"
&
text
e
)
;
return
;
}
}
;
let
mut
index
=
0
;
(
let
ron_lists
:
Vec
<
String
>
=
ron
:
:
de
:
:
from_str
(
&
serializer
.
ron_string
[
index
]
)
.
unwrap
(
)
;
self
.
name
.
1
=
ron_lists
.
iter
(
)
.
map
(
|
list
|
ron
:
:
de
:
:
from_str
(
&
list
)
.
unwrap
(
)
)
.
collect
(
)
;
index
=
index
+
1
;
)
+
/
/
error
:
value
assigned
to
index
is
never
read
let
_
=
index
;
}
/
/
/
helper
method
to
add
a
stringified
version
of
all
interned
keys
into
/
/
/
a
lookup
table
based
on
ItemUid
.
Use
strings
as
a
form
of
type
erasure
/
/
/
so
all
UpdateLists
can
go
into
a
single
map
.
/
/
/
Then
during
analysis
when
we
see
an
invalidation
reason
due
to
/
/
/
"
ItemUid
such
and
such
was
added
to
the
tile
primitive
list
"
the
lookup
/
/
/
allows
mapping
that
back
into
something
readable
.
#
[
cfg
(
feature
=
"
replay
"
)
]
pub
fn
insert_in_lookup
(
&
mut
self
itemuid_to_string
:
&
mut
HashMap
<
ItemUid
String
>
)
{
(
{
for
list
in
&
self
.
name
.
1
{
for
insertion
in
&
list
.
insertions
{
itemuid_to_string
.
insert
(
insertion
.
uid
format
!
(
"
{
:
?
}
"
insertion
.
value
)
)
;
}
}
}
)
+
}
}
}
}
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
crate
:
:
enumerate_interners
!
(
declare_tile_cache_logger_updatelists
)
;
#
[
cfg
(
not
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
)
]
pub
struct
TileCacheLoggerUpdateLists
{
}
#
[
cfg
(
not
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
)
]
impl
TileCacheLoggerUpdateLists
{
pub
fn
new
(
)
-
>
Self
{
TileCacheLoggerUpdateLists
{
}
}
fn
is_empty
(
&
self
)
-
>
bool
{
true
}
}
pub
struct
TileCacheLoggerFrame
{
pub
slices
:
Vec
<
TileCacheLoggerSlice
>
pub
update_lists
:
TileCacheLoggerUpdateLists
}
impl
TileCacheLoggerFrame
{
pub
fn
new
(
)
-
>
Self
{
TileCacheLoggerFrame
{
slices
:
Vec
:
:
new
(
)
update_lists
:
TileCacheLoggerUpdateLists
:
:
new
(
)
}
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
slices
.
is_empty
(
)
&
&
self
.
update_lists
.
is_empty
(
)
}
}
pub
struct
TileCacheLogger
{
pub
write_index
:
usize
pub
frames
:
Vec
<
TileCacheLoggerFrame
>
}
impl
TileCacheLogger
{
pub
fn
new
(
num_frames
:
usize
)
-
>
Self
{
let
mut
frames
=
Vec
:
:
with_capacity
(
num_frames
)
;
for
_i
in
0
.
.
num_frames
{
frames
.
push
(
TileCacheLoggerFrame
:
:
new
(
)
)
;
}
TileCacheLogger
{
write_index
:
0
frames
}
}
pub
fn
is_enabled
(
&
self
)
-
>
bool
{
!
self
.
frames
.
is_empty
(
)
}
#
[
cfg
(
feature
=
"
capture
"
)
]
pub
fn
add
(
&
mut
self
serialized_slice
:
String
local_to_world_transform
:
Transform3D
<
f32
PicturePixel
WorldPixel
>
)
{
if
!
self
.
is_enabled
(
)
{
return
;
}
self
.
frames
[
self
.
write_index
]
.
slices
.
push
(
TileCacheLoggerSlice
{
serialized_slice
local_to_world_transform
}
)
;
}
#
[
cfg
(
feature
=
"
capture
"
)
]
pub
fn
serialize_updates
(
&
mut
self
updates
:
&
InternerUpdates
)
{
if
!
self
.
is_enabled
(
)
{
return
;
}
self
.
frames
[
self
.
write_index
]
.
update_lists
.
serialize_updates
(
updates
)
;
}
pub
fn
advance
(
&
mut
self
)
{
if
!
self
.
is_enabled
(
)
|
|
self
.
frames
[
self
.
write_index
]
.
is_empty
(
)
{
return
;
}
self
.
write_index
=
self
.
write_index
+
1
;
if
self
.
write_index
>
=
self
.
frames
.
len
(
)
{
self
.
write_index
=
0
;
}
self
.
frames
[
self
.
write_index
]
=
TileCacheLoggerFrame
:
:
new
(
)
;
}
#
[
cfg
(
feature
=
"
capture
"
)
]
pub
fn
save_capture
(
&
self
root
:
&
PathBuf
)
{
if
!
self
.
is_enabled
(
)
{
return
;
}
use
std
:
:
fs
;
info
!
(
"
saving
tile
cache
log
"
)
;
let
path_tile_cache
=
root
.
join
(
"
tile_cache
"
)
;
if
!
path_tile_cache
.
is_dir
(
)
{
fs
:
:
create_dir
(
&
path_tile_cache
)
.
unwrap
(
)
;
}
let
mut
files_written
=
0
;
for
ix
in
0
.
.
self
.
frames
.
len
(
)
{
let
index
=
(
self
.
write_index
+
1
+
ix
)
%
self
.
frames
.
len
(
)
;
if
self
.
frames
[
index
]
.
is_empty
(
)
{
continue
;
}
let
filename
=
path_tile_cache
.
join
(
format
!
(
"
frame
{
:
05
}
.
ron
"
files_written
)
)
;
let
mut
output
=
File
:
:
create
(
filename
)
.
unwrap
(
)
;
output
.
write_all
(
b
"
/
/
slice
data
\
n
"
)
.
unwrap
(
)
;
output
.
write_all
(
b
"
[
\
n
"
)
.
unwrap
(
)
;
for
item
in
&
self
.
frames
[
index
]
.
slices
{
output
.
write_all
(
b
"
(
transform
:
\
n
"
)
.
unwrap
(
)
;
let
transform
=
ron
:
:
ser
:
:
to_string_pretty
(
&
item
.
local_to_world_transform
Default
:
:
default
(
)
)
.
unwrap
(
)
;
output
.
write_all
(
transform
.
as_bytes
(
)
)
.
unwrap
(
)
;
output
.
write_all
(
b
"
\
n
tile_cache
:
\
n
"
)
.
unwrap
(
)
;
output
.
write_all
(
item
.
serialized_slice
.
as_bytes
(
)
)
.
unwrap
(
)
;
output
.
write_all
(
b
"
\
n
)
\
n
"
)
.
unwrap
(
)
;
}
output
.
write_all
(
b
"
]
\
n
\
n
"
)
.
unwrap
(
)
;
output
.
write_all
(
b
"
/
/
chunk
\
n
\
n
"
)
.
unwrap
(
)
;
output
.
write_all
(
b
"
/
/
interning
data
\
n
"
)
.
unwrap
(
)
;
output
.
write_all
(
self
.
frames
[
index
]
.
update_lists
.
to_ron
(
)
.
as_bytes
(
)
)
.
unwrap
(
)
;
files_written
=
files_written
+
1
;
}
}
}
pub
struct
NativeSurface
{
pub
opaque
:
NativeSurfaceId
pub
alpha
:
NativeSurfaceId
}
#
[
derive
(
PartialEq
Eq
Hash
)
]
pub
struct
ExternalNativeSurfaceKey
{
pub
image_keys
:
[
ImageKey
;
3
]
pub
size
:
DeviceIntSize
pub
is_external_surface
:
bool
}
pub
struct
ExternalNativeSurface
{
pub
used_this_frame
:
bool
pub
native_surface_id
:
NativeSurfaceId
pub
image_dependencies
:
[
ImageDependency
;
3
]
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
Eq
Hash
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
SliceId
(
usize
)
;
impl
SliceId
{
pub
fn
new
(
index
:
usize
)
-
>
Self
{
SliceId
(
index
)
}
}
pub
struct
TileCacheParams
{
pub
slice
:
usize
pub
slice_flags
:
SliceFlags
pub
spatial_node_index
:
SpatialNodeIndex
pub
background_color
:
Option
<
ColorF
>
pub
shared_clips
:
Vec
<
ClipInstance
>
pub
shared_clip_chain
:
ClipChainId
pub
virtual_surface_size
:
i32
pub
compositor_surface_count
:
usize
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
pub
struct
SubSliceIndex
(
u8
)
;
impl
SubSliceIndex
{
pub
const
DEFAULT
:
SubSliceIndex
=
SubSliceIndex
(
0
)
;
pub
fn
new
(
index
:
usize
)
-
>
Self
{
SubSliceIndex
(
index
as
u8
)
}
pub
fn
is_primary
(
&
self
)
-
>
bool
{
self
.
0
=
=
0
}
}
pub
struct
CompositorSurface
{
pub
descriptor
:
ExternalSurfaceDescriptor
prohibited_rect
:
PictureRect
pub
is_opaque
:
bool
}
pub
struct
SubSlice
{
pub
tiles
:
FastHashMap
<
TileOffset
Box
<
Tile
>
>
pub
native_surface
:
Option
<
NativeSurface
>
pub
compositor_surfaces
:
Vec
<
CompositorSurface
>
pub
composite_tiles
:
Vec
<
CompositeTile
>
pub
opaque_tile_descriptors
:
Vec
<
CompositeTileDescriptor
>
pub
alpha_tile_descriptors
:
Vec
<
CompositeTileDescriptor
>
}
impl
SubSlice
{
fn
new
(
)
-
>
Self
{
SubSlice
{
tiles
:
FastHashMap
:
:
default
(
)
native_surface
:
None
compositor_surfaces
:
Vec
:
:
new
(
)
composite_tiles
:
Vec
:
:
new
(
)
opaque_tile_descriptors
:
Vec
:
:
new
(
)
alpha_tile_descriptors
:
Vec
:
:
new
(
)
}
}
fn
reset
(
&
mut
self
)
{
self
.
compositor_surfaces
.
clear
(
)
;
self
.
composite_tiles
.
clear
(
)
;
self
.
opaque_tile_descriptors
.
clear
(
)
;
self
.
alpha_tile_descriptors
.
clear
(
)
;
}
fn
resize
(
&
mut
self
new_tile_rect
:
TileRect
)
-
>
FastHashMap
<
TileOffset
Box
<
Tile
>
>
{
let
mut
old_tiles
=
mem
:
:
replace
(
&
mut
self
.
tiles
FastHashMap
:
:
default
(
)
)
;
self
.
tiles
.
reserve
(
new_tile_rect
.
size
.
area
(
)
as
usize
)
;
for
y
in
new_tile_rect
.
origin
.
y
.
.
new_tile_rect
.
origin
.
y
+
new_tile_rect
.
size
.
height
{
for
x
in
new_tile_rect
.
origin
.
x
.
.
new_tile_rect
.
origin
.
x
+
new_tile_rect
.
size
.
width
{
let
key
=
TileOffset
:
:
new
(
x
y
)
;
let
tile
=
old_tiles
.
remove
(
&
key
)
.
unwrap_or_else
(
|
|
{
Box
:
:
new
(
Tile
:
:
new
(
key
)
)
}
)
;
self
.
tiles
.
insert
(
key
tile
)
;
}
}
old_tiles
}
}
pub
struct
TileCacheInstance
{
pub
slice
:
usize
pub
slice_flags
:
SliceFlags
pub
current_tile_size
:
DeviceIntSize
pub
sub_slices
:
Vec
<
SubSlice
>
pub
spatial_node_index
:
SpatialNodeIndex
opacity_bindings
:
FastHashMap
<
PropertyBindingId
OpacityBindingInfo
>
old_opacity_bindings
:
FastHashMap
<
PropertyBindingId
OpacityBindingInfo
>
spatial_node_comparer
:
SpatialNodeComparer
color_bindings
:
FastHashMap
<
PropertyBindingId
ColorBindingInfo
>
old_color_bindings
:
FastHashMap
<
PropertyBindingId
ColorBindingInfo
>
pub
dirty_region
:
DirtyRegion
tile_size
:
PictureSize
tile_rect
:
TileRect
tile_bounds_p0
:
TileOffset
tile_bounds_p1
:
TileOffset
pub
local_rect
:
PictureRect
pub
local_clip_rect
:
PictureRect
surface_index
:
SurfaceIndex
pub
background_color
:
Option
<
ColorF
>
pub
backdrop
:
BackdropInfo
pub
subpixel_mode
:
SubpixelMode
pub
shared_clips
:
Vec
<
ClipInstance
>
shared_clip_chain
:
ClipChainId
root_transform
:
ScaleOffset
frames_until_size_eval
:
usize
fract_offset
:
PictureVector2D
device_fract_offset
:
DeviceVector2D
virtual_offset
:
DeviceIntPoint
compare_cache
:
FastHashMap
<
PrimitiveComparisonKey
PrimitiveCompareResult
>
pub
device_position
:
DevicePoint
tile_size_override
:
Option
<
DeviceIntSize
>
pub
external_native_surface_cache
:
FastHashMap
<
ExternalNativeSurfaceKey
ExternalNativeSurface
>
frame_id
:
FrameId
pub
transform_index
:
CompositorTransformIndex
}
enum
SurfacePromotionResult
{
Failed
Success
{
flip_y
:
bool
}
}
impl
TileCacheInstance
{
pub
fn
new
(
params
:
TileCacheParams
)
-
>
Self
{
let
sub_slice_count
=
params
.
compositor_surface_count
.
min
(
MAX_COMPOSITOR_SURFACES
)
+
1
;
let
mut
sub_slices
=
Vec
:
:
with_capacity
(
sub_slice_count
)
;
for
_
in
0
.
.
sub_slice_count
{
sub_slices
.
push
(
SubSlice
:
:
new
(
)
)
;
}
TileCacheInstance
{
slice
:
params
.
slice
slice_flags
:
params
.
slice_flags
spatial_node_index
:
params
.
spatial_node_index
sub_slices
opacity_bindings
:
FastHashMap
:
:
default
(
)
old_opacity_bindings
:
FastHashMap
:
:
default
(
)
spatial_node_comparer
:
SpatialNodeComparer
:
:
new
(
)
color_bindings
:
FastHashMap
:
:
default
(
)
old_color_bindings
:
FastHashMap
:
:
default
(
)
dirty_region
:
DirtyRegion
:
:
new
(
params
.
spatial_node_index
)
tile_size
:
PictureSize
:
:
zero
(
)
tile_rect
:
TileRect
:
:
zero
(
)
tile_bounds_p0
:
TileOffset
:
:
zero
(
)
tile_bounds_p1
:
TileOffset
:
:
zero
(
)
local_rect
:
PictureRect
:
:
zero
(
)
local_clip_rect
:
PictureRect
:
:
zero
(
)
surface_index
:
SurfaceIndex
(
0
)
background_color
:
params
.
background_color
backdrop
:
BackdropInfo
:
:
empty
(
)
subpixel_mode
:
SubpixelMode
:
:
Allow
root_transform
:
ScaleOffset
:
:
identity
(
)
shared_clips
:
params
.
shared_clips
shared_clip_chain
:
params
.
shared_clip_chain
current_tile_size
:
DeviceIntSize
:
:
zero
(
)
frames_until_size_eval
:
0
fract_offset
:
PictureVector2D
:
:
zero
(
)
device_fract_offset
:
DeviceVector2D
:
:
zero
(
)
virtual_offset
:
DeviceIntPoint
:
:
new
(
params
.
virtual_surface_size
/
2
params
.
virtual_surface_size
/
2
)
compare_cache
:
FastHashMap
:
:
default
(
)
device_position
:
DevicePoint
:
:
zero
(
)
tile_size_override
:
None
external_native_surface_cache
:
FastHashMap
:
:
default
(
)
frame_id
:
FrameId
:
:
INVALID
transform_index
:
CompositorTransformIndex
:
:
INVALID
}
}
pub
fn
tile_count
(
&
self
)
-
>
usize
{
self
.
tile_rect
.
size
.
area
(
)
as
usize
*
self
.
sub_slices
.
len
(
)
}
pub
fn
prepare_for_new_scene
(
&
mut
self
params
:
TileCacheParams
resource_cache
:
&
mut
ResourceCache
)
{
assert_eq
!
(
self
.
slice
params
.
slice
)
;
let
required_sub_slice_count
=
params
.
compositor_surface_count
.
min
(
MAX_COMPOSITOR_SURFACES
)
+
1
;
if
self
.
sub_slices
.
len
(
)
!
=
required_sub_slice_count
{
self
.
tile_rect
=
TileRect
:
:
zero
(
)
;
if
self
.
sub_slices
.
len
(
)
>
required_sub_slice_count
{
let
old_sub_slices
=
self
.
sub_slices
.
split_off
(
required_sub_slice_count
)
;
for
mut
sub_slice
in
old_sub_slices
{
for
tile
in
sub_slice
.
tiles
.
values_mut
(
)
{
if
let
Some
(
TileSurface
:
:
Texture
{
descriptor
:
SurfaceTextureDescriptor
:
:
Native
{
ref
mut
id
.
.
}
.
.
}
)
=
tile
.
surface
{
if
let
Some
(
id
)
=
id
.
take
(
)
{
resource_cache
.
destroy_compositor_tile
(
id
)
;
}
}
}
if
let
Some
(
native_surface
)
=
sub_slice
.
native_surface
{
resource_cache
.
destroy_compositor_surface
(
native_surface
.
opaque
)
;
resource_cache
.
destroy_compositor_surface
(
native_surface
.
alpha
)
;
}
}
}
else
{
while
self
.
sub_slices
.
len
(
)
<
required_sub_slice_count
{
self
.
sub_slices
.
push
(
SubSlice
:
:
new
(
)
)
;
}
}
}
self
.
slice_flags
=
params
.
slice_flags
;
self
.
spatial_node_index
=
params
.
spatial_node_index
;
self
.
background_color
=
params
.
background_color
;
self
.
shared_clips
=
params
.
shared_clips
;
self
.
shared_clip_chain
=
params
.
shared_clip_chain
;
self
.
frames_until_size_eval
=
0
;
}
pub
fn
destroy
(
self
resource_cache
:
&
mut
ResourceCache
)
{
for
sub_slice
in
self
.
sub_slices
{
if
let
Some
(
native_surface
)
=
sub_slice
.
native_surface
{
resource_cache
.
destroy_compositor_surface
(
native_surface
.
opaque
)
;
resource_cache
.
destroy_compositor_surface
(
native_surface
.
alpha
)
;
}
}
for
(
_
external_surface
)
in
self
.
external_native_surface_cache
{
resource_cache
.
destroy_compositor_surface
(
external_surface
.
native_surface_id
)
}
}
fn
get_tile_coords_for_rect
(
&
self
rect
:
&
PictureRect
)
-
>
(
TileOffset
TileOffset
)
{
let
mut
p0
=
TileOffset
:
:
new
(
(
rect
.
min
.
x
/
self
.
tile_size
.
width
)
.
floor
(
)
as
i32
(
rect
.
min
.
y
/
self
.
tile_size
.
height
)
.
floor
(
)
as
i32
)
;
let
mut
p1
=
TileOffset
:
:
new
(
(
rect
.
max
.
x
/
self
.
tile_size
.
width
)
.
ceil
(
)
as
i32
(
rect
.
max
.
y
/
self
.
tile_size
.
height
)
.
ceil
(
)
as
i32
)
;
p0
.
x
=
clamp
(
p0
.
x
self
.
tile_bounds_p0
.
x
self
.
tile_bounds_p1
.
x
)
;
p0
.
y
=
clamp
(
p0
.
y
self
.
tile_bounds_p0
.
y
self
.
tile_bounds_p1
.
y
)
;
p1
.
x
=
clamp
(
p1
.
x
self
.
tile_bounds_p0
.
x
self
.
tile_bounds_p1
.
x
)
;
p1
.
y
=
clamp
(
p1
.
y
self
.
tile_bounds_p0
.
y
self
.
tile_bounds_p1
.
y
)
;
(
p0
p1
)
}
pub
fn
pre_update
(
&
mut
self
pic_rect
:
PictureRect
surface_index
:
SurfaceIndex
frame_context
:
&
FrameVisibilityContext
frame_state
:
&
mut
FrameVisibilityState
)
-
>
WorldRect
{
self
.
surface_index
=
surface_index
;
self
.
local_rect
=
pic_rect
;
self
.
local_clip_rect
=
PictureRect
:
:
max_rect
(
)
;
for
sub_slice
in
&
mut
self
.
sub_slices
{
sub_slice
.
reset
(
)
;
}
self
.
backdrop
=
BackdropInfo
:
:
empty
(
)
;
let
pic_to_world_mapper
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
self
.
spatial_node_index
frame_context
.
global_screen_world_rect
frame_context
.
spatial_tree
)
;
if
self
.
shared_clip_chain
!
=
ClipChainId
:
:
NONE
{
let
shared_clips
=
&
mut
frame_state
.
scratch
.
picture
.
clip_chain_ids
;
shared_clips
.
clear
(
)
;
let
map_local_to_surface
=
SpaceMapper
:
:
new
(
self
.
spatial_node_index
pic_rect
)
;
let
mut
current_clip_chain_id
=
self
.
shared_clip_chain
;
while
current_clip_chain_id
!
=
ClipChainId
:
:
NONE
{
shared_clips
.
push
(
current_clip_chain_id
)
;
let
clip_chain_node
=
&
frame_state
.
clip_store
.
clip_chain_nodes
[
current_clip_chain_id
.
0
as
usize
]
;
current_clip_chain_id
=
clip_chain_node
.
parent_clip_chain_id
;
}
frame_state
.
clip_store
.
set_active_clips
(
LayoutRect
:
:
max_rect
(
)
self
.
spatial_node_index
map_local_to_surface
.
ref_spatial_node_index
&
shared_clips
frame_context
.
spatial_tree
&
mut
frame_state
.
data_stores
.
clip
)
;
let
clip_chain_instance
=
frame_state
.
clip_store
.
build_clip_chain_instance
(
pic_rect
.
to_rect
(
)
.
cast_unit
(
)
&
map_local_to_surface
&
pic_to_world_mapper
frame_context
.
spatial_tree
frame_state
.
gpu_cache
frame_state
.
resource_cache
frame_context
.
global_device_pixel_scale
&
frame_context
.
global_screen_world_rect
&
mut
frame_state
.
data_stores
.
clip
true
false
)
;
self
.
local_clip_rect
=
clip_chain_instance
.
map_or
(
PictureRect
:
:
zero
(
)
|
clip_chain_instance
|
{
clip_chain_instance
.
pic_clip_rect
}
)
;
}
self
.
frame_id
.
advance
(
)
;
self
.
spatial_node_comparer
.
next_frame
(
self
.
spatial_node_index
)
;
for
external_native_surface
in
self
.
external_native_surface_cache
.
values_mut
(
)
{
external_native_surface
.
used_this_frame
=
false
;
}
if
self
.
frames_until_size_eval
=
=
0
|
|
self
.
tile_size_override
!
=
frame_context
.
config
.
tile_size_override
{
let
desired_tile_size
=
match
frame_context
.
config
.
tile_size_override
{
Some
(
tile_size_override
)
=
>
{
tile_size_override
}
None
=
>
{
if
self
.
slice_flags
.
contains
(
SliceFlags
:
:
IS_SCROLLBAR
)
{
if
pic_rect
.
width
(
)
<
=
pic_rect
.
height
(
)
{
TILE_SIZE_SCROLLBAR_VERTICAL
}
else
{
TILE_SIZE_SCROLLBAR_HORIZONTAL
}
}
else
{
frame_state
.
resource_cache
.
texture_cache
.
default_picture_tile_size
(
)
}
}
}
;
if
desired_tile_size
!
=
self
.
current_tile_size
{
for
sub_slice
in
&
mut
self
.
sub_slices
{
if
let
Some
(
native_surface
)
=
sub_slice
.
native_surface
.
take
(
)
{
frame_state
.
resource_cache
.
destroy_compositor_surface
(
native_surface
.
opaque
)
;
frame_state
.
resource_cache
.
destroy_compositor_surface
(
native_surface
.
alpha
)
;
}
sub_slice
.
tiles
.
clear
(
)
;
}
self
.
tile_rect
=
TileRect
:
:
zero
(
)
;
self
.
current_tile_size
=
desired_tile_size
;
}
self
.
frames_until_size_eval
=
120
;
self
.
tile_size_override
=
frame_context
.
config
.
tile_size_override
;
}
let
world_origin
=
pic_to_world_mapper
.
map
(
&
PictureRect
:
:
from_size
(
PictureSize
:
:
new
(
1
.
0
1
.
0
)
)
)
.
expect
(
"
bug
:
unable
to
map
origin
to
world
space
"
)
.
min
;
let
device_origin
=
world_origin
*
frame_context
.
global_device_pixel_scale
;
let
desired_device_origin
=
device_origin
.
round
(
)
;
self
.
device_position
=
desired_device_origin
;
self
.
device_fract_offset
=
desired_device_origin
-
device_origin
;
let
ref_world_rect
=
WorldRect
:
:
from_origin_and_size
(
desired_device_origin
/
frame_context
.
global_device_pixel_scale
WorldSize
:
:
new
(
1
.
0
1
.
0
)
)
;
self
.
fract_offset
=
pic_to_world_mapper
.
unmap
(
&
ref_world_rect
)
.
expect
(
"
bug
:
unable
to
unmap
ref
world
rect
"
)
.
min
.
to_vector
(
)
;
let
current_properties
=
frame_context
.
scene_properties
.
float_properties
(
)
;
mem
:
:
swap
(
&
mut
self
.
opacity_bindings
&
mut
self
.
old_opacity_bindings
)
;
self
.
opacity_bindings
.
clear
(
)
;
for
(
id
value
)
in
current_properties
{
let
changed
=
match
self
.
old_opacity_bindings
.
get
(
id
)
{
Some
(
old_property
)
=
>
!
old_property
.
value
.
approx_eq
(
value
)
None
=
>
true
}
;
self
.
opacity_bindings
.
insert
(
*
id
OpacityBindingInfo
{
value
:
*
value
changed
}
)
;
}
let
current_properties
=
frame_context
.
scene_properties
.
color_properties
(
)
;
mem
:
:
swap
(
&
mut
self
.
color_bindings
&
mut
self
.
old_color_bindings
)
;
self
.
color_bindings
.
clear
(
)
;
for
(
id
value
)
in
current_properties
{
let
changed
=
match
self
.
old_color_bindings
.
get
(
id
)
{
Some
(
old_property
)
=
>
old_property
.
value
!
=
(
*
value
)
.
into
(
)
None
=
>
true
}
;
self
.
color_bindings
.
insert
(
*
id
ColorBindingInfo
{
value
:
(
*
value
)
.
into
(
)
changed
}
)
;
}
let
world_tile_size
=
WorldSize
:
:
new
(
self
.
current_tile_size
.
width
as
f32
/
frame_context
.
global_device_pixel_scale
.
0
self
.
current_tile_size
.
height
as
f32
/
frame_context
.
global_device_pixel_scale
.
0
)
;
let
local_tile_rect
=
pic_to_world_mapper
.
unmap
(
&
WorldRect
:
:
from_origin_and_size
(
WorldPoint
:
:
zero
(
)
world_tile_size
)
)
.
expect
(
"
bug
:
unable
to
get
local
tile
rect
"
)
;
self
.
tile_size
=
local_tile_rect
.
size
(
)
;
let
screen_rect_in_pic_space
=
pic_to_world_mapper
.
unmap
(
&
frame_context
.
global_screen_world_rect
)
.
expect
(
"
unable
to
unmap
screen
rect
"
)
;
let
desired_rect_in_pic_space
=
screen_rect_in_pic_space
.
inflate
(
0
.
0
1
.
0
*
self
.
tile_size
.
height
)
;
let
needed_rect_in_pic_space
=
desired_rect_in_pic_space
.
intersection
(
&
pic_rect
)
.
unwrap_or_else
(
Box2D
:
:
zero
)
;
let
p0
=
needed_rect_in_pic_space
.
min
;
let
p1
=
needed_rect_in_pic_space
.
max
;
let
x0
=
(
p0
.
x
/
local_tile_rect
.
width
(
)
)
.
floor
(
)
as
i32
;
let
x1
=
(
p1
.
x
/
local_tile_rect
.
width
(
)
)
.
ceil
(
)
as
i32
;
let
y0
=
(
p0
.
y
/
local_tile_rect
.
height
(
)
)
.
floor
(
)
as
i32
;
let
y1
=
(
p1
.
y
/
local_tile_rect
.
height
(
)
)
.
ceil
(
)
as
i32
;
let
x_tiles
=
x1
-
x0
;
let
y_tiles
=
y1
-
y0
;
let
new_tile_rect
=
TileRect
:
:
new
(
TileOffset
:
:
new
(
x0
y0
)
TileSize
:
:
new
(
x_tiles
y_tiles
)
)
;
let
virtual_surface_size
=
frame_context
.
config
.
compositor_kind
.
get_virtual_surface_size
(
)
;
if
virtual_surface_size
>
0
{
let
tx0
=
self
.
virtual_offset
.
x
+
x0
*
self
.
current_tile_size
.
width
;
let
ty0
=
self
.
virtual_offset
.
y
+
y0
*
self
.
current_tile_size
.
height
;
let
tx1
=
self
.
virtual_offset
.
x
+
(
x1
+
1
)
*
self
.
current_tile_size
.
width
;
let
ty1
=
self
.
virtual_offset
.
y
+
(
y1
+
1
)
*
self
.
current_tile_size
.
height
;
let
need_new_virtual_offset
=
tx0
<
0
|
|
ty0
<
0
|
|
tx1
>
=
virtual_surface_size
|
|
ty1
>
=
virtual_surface_size
;
if
need_new_virtual_offset
{
self
.
virtual_offset
=
DeviceIntPoint
:
:
new
(
(
virtual_surface_size
/
2
)
-
(
(
x0
+
x1
)
/
2
)
*
self
.
current_tile_size
.
width
(
virtual_surface_size
/
2
)
-
(
(
y0
+
y1
)
/
2
)
*
self
.
current_tile_size
.
height
)
;
for
sub_slice
in
&
mut
self
.
sub_slices
{
for
tile
in
sub_slice
.
tiles
.
values_mut
(
)
{
if
let
Some
(
TileSurface
:
:
Texture
{
descriptor
:
SurfaceTextureDescriptor
:
:
Native
{
ref
mut
id
.
.
}
.
.
}
)
=
tile
.
surface
{
if
let
Some
(
id
)
=
id
.
take
(
)
{
frame_state
.
resource_cache
.
destroy_compositor_tile
(
id
)
;
tile
.
surface
=
None
;
tile
.
invalidate
(
None
InvalidationReason
:
:
CompositorKindChanged
)
;
}
}
}
if
let
Some
(
native_surface
)
=
sub_slice
.
native_surface
.
take
(
)
{
frame_state
.
resource_cache
.
destroy_compositor_surface
(
native_surface
.
opaque
)
;
frame_state
.
resource_cache
.
destroy_compositor_surface
(
native_surface
.
alpha
)
;
}
}
}
}
if
new_tile_rect
!
=
self
.
tile_rect
{
for
sub_slice
in
&
mut
self
.
sub_slices
{
let
mut
old_tiles
=
sub_slice
.
resize
(
new_tile_rect
)
;
if
!
old_tiles
.
is_empty
(
)
{
frame_state
.
composite_state
.
dirty_rects_are_valid
=
false
;
}
frame_state
.
composite_state
.
destroy_native_tiles
(
old_tiles
.
values_mut
(
)
frame_state
.
resource_cache
)
;
}
}
self
.
tile_bounds_p0
=
TileOffset
:
:
new
(
x0
y0
)
;
self
.
tile_bounds_p1
=
TileOffset
:
:
new
(
x1
y1
)
;
self
.
tile_rect
=
new_tile_rect
;
let
mut
world_culling_rect
=
WorldRect
:
:
zero
(
)
;
let
mut
ctx
=
TilePreUpdateContext
{
pic_to_world_mapper
fract_offset
:
self
.
fract_offset
device_fract_offset
:
self
.
device_fract_offset
background_color
:
self
.
background_color
global_screen_world_rect
:
frame_context
.
global_screen_world_rect
tile_size
:
self
.
tile_size
frame_id
:
self
.
frame_id
}
;
for
sub_slice
in
&
mut
self
.
sub_slices
{
for
tile
in
sub_slice
.
tiles
.
values_mut
(
)
{
tile
.
pre_update
(
&
ctx
)
;
if
tile
.
is_visible
{
world_culling_rect
=
world_culling_rect
.
union
(
&
tile
.
world_tile_rect
)
;
}
}
ctx
.
background_color
=
None
;
}
match
frame_context
.
config
.
compositor_kind
{
CompositorKind
:
:
Draw
{
.
.
}
=
>
{
for
sub_slice
in
&
mut
self
.
sub_slices
{
for
tile
in
sub_slice
.
tiles
.
values_mut
(
)
{
if
let
Some
(
TileSurface
:
:
Texture
{
descriptor
:
SurfaceTextureDescriptor
:
:
Native
{
ref
mut
id
.
.
}
.
.
}
)
=
tile
.
surface
{
if
let
Some
(
id
)
=
id
.
take
(
)
{
frame_state
.
resource_cache
.
destroy_compositor_tile
(
id
)
;
}
tile
.
surface
=
None
;
tile
.
invalidate
(
None
InvalidationReason
:
:
CompositorKindChanged
)
;
}
}
if
let
Some
(
native_surface
)
=
sub_slice
.
native_surface
.
take
(
)
{
frame_state
.
resource_cache
.
destroy_compositor_surface
(
native_surface
.
opaque
)
;
frame_state
.
resource_cache
.
destroy_compositor_surface
(
native_surface
.
alpha
)
;
}
}
for
(
_
external_surface
)
in
self
.
external_native_surface_cache
.
drain
(
)
{
frame_state
.
resource_cache
.
destroy_compositor_surface
(
external_surface
.
native_surface_id
)
}
}
CompositorKind
:
:
Native
{
.
.
}
=
>
{
for
sub_slice
in
&
mut
self
.
sub_slices
{
for
tile
in
sub_slice
.
tiles
.
values_mut
(
)
{
if
let
Some
(
TileSurface
:
:
Texture
{
descriptor
:
SurfaceTextureDescriptor
:
:
TextureCache
{
.
.
}
.
.
}
)
=
tile
.
surface
{
tile
.
surface
=
None
;
tile
.
invalidate
(
None
InvalidationReason
:
:
CompositorKindChanged
)
;
}
}
}
}
}
world_culling_rect
}
fn
can_promote_to_surface
(
&
mut
self
flags
:
PrimitiveFlags
prim_clip_chain
:
&
ClipChainInstance
prim_spatial_node_index
:
SpatialNodeIndex
is_root_tile_cache
:
bool
sub_slice_index
:
usize
frame_context
:
&
FrameVisibilityContext
)
-
>
SurfacePromotionResult
{
if
!
flags
.
contains
(
PrimitiveFlags
:
:
PREFER_COMPOSITOR_SURFACE
)
{
return
SurfacePromotionResult
:
:
Failed
;
}
if
sub_slice_index
=
=
MAX_COMPOSITOR_SURFACES
{
return
SurfacePromotionResult
:
:
Failed
;
}
if
prim_clip_chain
.
needs_mask
{
return
SurfacePromotionResult
:
:
Failed
;
}
if
!
is_root_tile_cache
{
return
SurfacePromotionResult
:
:
Failed
;
}
let
mapper
:
SpaceMapper
<
PicturePixel
WorldPixel
>
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
prim_spatial_node_index
frame_context
.
global_screen_world_rect
&
frame_context
.
spatial_tree
)
;
let
transform
=
mapper
.
get_transform
(
)
;
if
!
transform
.
is_2d_scale_translation
(
)
{
return
SurfacePromotionResult
:
:
Failed
;
}
if
transform
.
m11
<
0
.
0
{
return
SurfacePromotionResult
:
:
Failed
;
}
if
self
.
slice_flags
.
contains
(
SliceFlags
:
:
IS_BLEND_CONTAINER
)
{
return
SurfacePromotionResult
:
:
Failed
;
}
SurfacePromotionResult
:
:
Success
{
flip_y
:
transform
.
m22
<
0
.
0
}
}
fn
setup_compositor_surfaces_yuv
(
&
mut
self
sub_slice_index
:
usize
prim_info
:
&
mut
PrimitiveDependencyInfo
flags
:
PrimitiveFlags
local_prim_rect
:
LayoutRect
prim_spatial_node_index
:
SpatialNodeIndex
pic_clip_rect
:
PictureRect
frame_context
:
&
FrameVisibilityContext
image_dependencies
:
&
[
ImageDependency
;
3
]
api_keys
:
&
[
ImageKey
;
3
]
resource_cache
:
&
mut
ResourceCache
composite_state
:
&
mut
CompositeState
gpu_cache
:
&
mut
GpuCache
image_rendering
:
ImageRendering
color_depth
:
ColorDepth
color_space
:
YuvColorSpace
format
:
YuvFormat
)
-
>
bool
{
for
&
key
in
api_keys
{
if
key
!
=
ImageKey
:
:
DUMMY
{
resource_cache
.
request_image
(
ImageRequest
{
key
rendering
:
image_rendering
tile
:
None
}
gpu_cache
)
;
}
}
self
.
setup_compositor_surfaces_impl
(
sub_slice_index
prim_info
flags
local_prim_rect
prim_spatial_node_index
pic_clip_rect
frame_context
ExternalSurfaceDependency
:
:
Yuv
{
image_dependencies
:
*
image_dependencies
color_space
format
rescale
:
color_depth
.
rescaling_factor
(
)
}
api_keys
resource_cache
composite_state
image_rendering
true
)
}
fn
setup_compositor_surfaces_rgb
(
&
mut
self
sub_slice_index
:
usize
prim_info
:
&
mut
PrimitiveDependencyInfo
flags
:
PrimitiveFlags
local_prim_rect
:
LayoutRect
prim_spatial_node_index
:
SpatialNodeIndex
pic_clip_rect
:
PictureRect
frame_context
:
&
FrameVisibilityContext
image_dependency
:
ImageDependency
api_key
:
ImageKey
resource_cache
:
&
mut
ResourceCache
composite_state
:
&
mut
CompositeState
gpu_cache
:
&
mut
GpuCache
image_rendering
:
ImageRendering
flip_y
:
bool
)
-
>
bool
{
let
mut
api_keys
=
[
ImageKey
:
:
DUMMY
;
3
]
;
api_keys
[
0
]
=
api_key
;
resource_cache
.
request_image
(
ImageRequest
{
key
:
api_key
rendering
:
image_rendering
tile
:
None
}
gpu_cache
)
;
let
is_opaque
=
resource_cache
.
get_image_properties
(
api_key
)
.
map_or
(
false
|
properties
|
properties
.
descriptor
.
is_opaque
(
)
)
;
self
.
setup_compositor_surfaces_impl
(
sub_slice_index
prim_info
flags
local_prim_rect
prim_spatial_node_index
pic_clip_rect
frame_context
ExternalSurfaceDependency
:
:
Rgb
{
image_dependency
flip_y
}
&
api_keys
resource_cache
composite_state
image_rendering
is_opaque
)
}
fn
setup_compositor_surfaces_impl
(
&
mut
self
sub_slice_index
:
usize
prim_info
:
&
mut
PrimitiveDependencyInfo
flags
:
PrimitiveFlags
local_prim_rect
:
LayoutRect
prim_spatial_node_index
:
SpatialNodeIndex
pic_clip_rect
:
PictureRect
frame_context
:
&
FrameVisibilityContext
dependency
:
ExternalSurfaceDependency
api_keys
:
&
[
ImageKey
;
3
]
resource_cache
:
&
mut
ResourceCache
composite_state
:
&
mut
CompositeState
image_rendering
:
ImageRendering
is_opaque
:
bool
)
-
>
bool
{
let
map_local_to_surface
=
SpaceMapper
:
:
new_with_target
(
self
.
spatial_node_index
prim_spatial_node_index
self
.
local_rect
frame_context
.
spatial_tree
)
;
let
prim_rect
=
match
map_local_to_surface
.
map
(
&
local_prim_rect
.
to_box2d
(
)
)
{
Some
(
rect
)
=
>
rect
None
=
>
return
true
}
;
if
prim_rect
.
is_empty
(
)
{
return
true
;
}
let
pic_to_world_mapper
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
self
.
spatial_node_index
frame_context
.
global_screen_world_rect
frame_context
.
spatial_tree
)
;
let
world_clip_rect
=
pic_to_world_mapper
.
map
(
&
prim_info
.
prim_clip_box
)
.
expect
(
"
bug
:
unable
to
map
clip
to
world
space
"
)
;
let
is_visible
=
world_clip_rect
.
intersects
(
&
frame_context
.
global_screen_world_rect
)
;
if
!
is_visible
{
return
true
;
}
let
prim_offset
=
ScaleOffset
:
:
from_offset
(
local_prim_rect
.
origin
.
to_vector
(
)
.
cast_unit
(
)
)
;
let
local_prim_to_device
=
get_relative_scale_offset
(
prim_spatial_node_index
ROOT_SPATIAL_NODE_INDEX
frame_context
.
spatial_tree
)
;
let
normalized_prim_to_device
=
prim_offset
.
accumulate
(
&
local_prim_to_device
)
;
let
(
local_to_surface
surface_to_device
)
=
if
composite_state
.
compositor_kind
.
supports_transforms
(
)
{
(
ScaleOffset
:
:
identity
(
)
normalized_prim_to_device
)
}
else
{
(
normalized_prim_to_device
ScaleOffset
:
:
identity
(
)
)
}
;
let
compositor_transform_index
=
composite_state
.
register_transform
(
local_to_surface
surface_to_device
)
;
let
surface_size
=
composite_state
.
get_surface_rect
(
&
local_prim_rect
.
to_box2d
(
)
&
local_prim_rect
.
to_box2d
(
)
compositor_transform_index
)
.
size
(
)
;
let
clip_rect
=
(
world_clip_rect
*
frame_context
.
global_device_pixel_scale
)
.
round
(
)
;
if
surface_size
.
width
>
=
MAX_COMPOSITOR_SURFACES_SIZE
|
|
surface_size
.
height
>
=
MAX_COMPOSITOR_SURFACES_SIZE
{
return
false
;
}
let
external_image_id
=
if
flags
.
contains
(
PrimitiveFlags
:
:
SUPPORTS_EXTERNAL_COMPOSITOR_SURFACE
)
{
resource_cache
.
get_image_properties
(
api_keys
[
0
]
)
.
and_then
(
|
properties
|
properties
.
external_image
)
.
and_then
(
|
image
|
Some
(
image
.
id
)
)
}
else
{
None
}
;
let
(
native_surface_id
update_params
)
=
match
composite_state
.
compositor_kind
{
CompositorKind
:
:
Draw
{
.
.
}
=
>
{
(
None
None
)
}
CompositorKind
:
:
Native
{
.
.
}
=
>
{
let
native_surface_size
=
surface_size
.
to_i32
(
)
;
let
key
=
ExternalNativeSurfaceKey
{
image_keys
:
*
api_keys
size
:
native_surface_size
is_external_surface
:
external_image_id
.
is_some
(
)
}
;
let
native_surface
=
self
.
external_native_surface_cache
.
entry
(
key
)
.
or_insert_with
(
|
|
{
let
native_surface_id
=
match
external_image_id
{
Some
(
_external_image
)
=
>
{
resource_cache
.
create_compositor_external_surface
(
is_opaque
)
}
None
=
>
{
let
native_surface_id
=
resource_cache
.
create_compositor_surface
(
DeviceIntPoint
:
:
zero
(
)
native_surface_size
is_opaque
)
;
let
tile_id
=
NativeTileId
{
surface_id
:
native_surface_id
x
:
0
y
:
0
}
;
resource_cache
.
create_compositor_tile
(
tile_id
)
;
native_surface_id
}
}
;
ExternalNativeSurface
{
used_this_frame
:
true
native_surface_id
image_dependencies
:
[
ImageDependency
:
:
INVALID
;
3
]
}
}
)
;
native_surface
.
used_this_frame
=
true
;
let
update_params
=
match
external_image_id
{
Some
(
external_image
)
=
>
{
resource_cache
.
attach_compositor_external_image
(
native_surface
.
native_surface_id
external_image
)
;
None
}
None
=
>
{
match
dependency
{
ExternalSurfaceDependency
:
:
Yuv
{
image_dependencies
.
.
}
=
>
{
if
image_dependencies
=
=
native_surface
.
image_dependencies
{
None
}
else
{
Some
(
native_surface_size
)
}
}
ExternalSurfaceDependency
:
:
Rgb
{
image_dependency
.
.
}
=
>
{
if
image_dependency
=
=
native_surface
.
image_dependencies
[
0
]
{
None
}
else
{
Some
(
native_surface_size
)
}
}
}
}
}
;
(
Some
(
native_surface
.
native_surface_id
)
update_params
)
}
}
;
assert
!
(
sub_slice_index
<
self
.
sub_slices
.
len
(
)
-
1
)
;
let
sub_slice
=
&
mut
self
.
sub_slices
[
sub_slice_index
]
;
sub_slice
.
compositor_surfaces
.
push
(
CompositorSurface
{
prohibited_rect
:
pic_clip_rect
is_opaque
descriptor
:
ExternalSurfaceDescriptor
{
local_surface_size
:
local_prim_rect
.
size
local_rect
:
prim_rect
local_clip_rect
:
prim_info
.
prim_clip_box
dependency
image_rendering
clip_rect
transform_index
:
compositor_transform_index
z_id
:
ZBufferId
:
:
invalid
(
)
native_surface_id
update_params
}
}
)
;
true
}
pub
fn
update_prim_dependencies
(
&
mut
self
prim_instance
:
&
mut
PrimitiveInstance
prim_spatial_node_index
:
SpatialNodeIndex
local_prim_rect
:
LayoutRect
frame_context
:
&
FrameVisibilityContext
data_stores
:
&
DataStores
clip_store
:
&
ClipStore
pictures
:
&
[
PicturePrimitive
]
resource_cache
:
&
mut
ResourceCache
color_bindings
:
&
ColorBindingStorage
surface_stack
:
&
[
SurfaceIndex
]
composite_state
:
&
mut
CompositeState
gpu_cache
:
&
mut
GpuCache
is_root_tile_cache
:
bool
)
{
profile_scope
!
(
"
update_prim_dependencies
"
)
;
let
prim_surface_index
=
*
surface_stack
.
last
(
)
.
unwrap
(
)
;
let
prim_clip_chain
=
&
prim_instance
.
vis
.
clip_chain
;
let
on_picture_surface
=
prim_surface_index
=
=
self
.
surface_index
;
let
pic_clip_rect
=
if
on_picture_surface
{
prim_clip_chain
.
pic_clip_rect
}
else
{
let
mut
current_pic_clip_rect
=
prim_clip_chain
.
pic_clip_rect
;
let
mut
current_spatial_node_index
=
frame_context
.
surfaces
[
prim_surface_index
.
0
]
.
surface_spatial_node_index
;
for
surface_index
in
surface_stack
.
iter
(
)
.
rev
(
)
{
let
surface
=
&
frame_context
.
surfaces
[
surface_index
.
0
]
;
let
map_local_to_surface
=
SpaceMapper
:
:
new_with_target
(
surface
.
surface_spatial_node_index
current_spatial_node_index
surface
.
rect
frame_context
.
spatial_tree
)
;
current_pic_clip_rect
=
match
map_local_to_surface
.
map
(
&
current_pic_clip_rect
)
{
Some
(
rect
)
=
>
{
rect
.
inflate
(
surface
.
inflation_factor
surface
.
inflation_factor
)
}
None
=
>
{
return
;
}
}
;
current_spatial_node_index
=
surface
.
surface_spatial_node_index
;
}
current_pic_clip_rect
}
;
let
(
p0
p1
)
=
self
.
get_tile_coords_for_rect
(
&
pic_clip_rect
)
;
if
p0
.
x
=
=
p1
.
x
|
|
p0
.
y
=
=
p1
.
y
{
return
;
}
let
mut
prim_info
=
PrimitiveDependencyInfo
:
:
new
(
prim_instance
.
uid
(
)
pic_clip_rect
)
;
let
mut
sub_slice_index
=
self
.
sub_slices
.
len
(
)
-
1
;
if
sub_slice_index
>
0
{
for
(
i
sub_slice
)
in
self
.
sub_slices
.
iter_mut
(
)
.
enumerate
(
)
{
let
mut
intersects_prohibited_region
=
false
;
for
surface
in
&
mut
sub_slice
.
compositor_surfaces
{
if
pic_clip_rect
.
intersects
(
&
surface
.
prohibited_rect
)
{
surface
.
prohibited_rect
=
surface
.
prohibited_rect
.
union
(
&
pic_clip_rect
)
;
intersects_prohibited_region
=
true
;
}
}
if
!
intersects_prohibited_region
{
sub_slice_index
=
i
;
break
;
}
}
}
if
prim_spatial_node_index
!
=
self
.
spatial_node_index
{
prim_info
.
spatial_nodes
.
push
(
prim_spatial_node_index
)
;
}
let
clip_instances
=
&
clip_store
.
clip_node_instances
[
prim_clip_chain
.
clips_range
.
to_range
(
)
]
;
for
clip_instance
in
clip_instances
{
prim_info
.
clips
.
push
(
clip_instance
.
handle
.
uid
(
)
)
;
if
clip_instance
.
spatial_node_index
!
=
self
.
spatial_node_index
&
&
!
prim_info
.
spatial_nodes
.
contains
(
&
clip_instance
.
spatial_node_index
)
{
prim_info
.
spatial_nodes
.
push
(
clip_instance
.
spatial_node_index
)
;
}
}
let
mut
backdrop_candidate
=
None
;
match
prim_instance
.
kind
{
PrimitiveInstanceKind
:
:
Picture
{
pic_index
.
.
}
=
>
{
let
pic
=
&
pictures
[
pic_index
.
0
]
;
if
let
Some
(
PictureCompositeMode
:
:
Filter
(
Filter
:
:
Opacity
(
binding
_
)
)
)
=
pic
.
requested_composite_mode
{
prim_info
.
opacity_bindings
.
push
(
binding
.
into
(
)
)
;
}
}
PrimitiveInstanceKind
:
:
Rectangle
{
data_handle
color_binding_index
.
.
}
=
>
{
let
color
=
match
data_stores
.
prim
[
data_handle
]
.
kind
{
PrimitiveTemplateKind
:
:
Rectangle
{
color
.
.
}
=
>
{
frame_context
.
scene_properties
.
resolve_color
(
&
color
)
}
_
=
>
unreachable
!
(
)
}
;
if
color
.
a
>
=
1
.
0
{
backdrop_candidate
=
Some
(
BackdropInfo
{
opaque_rect
:
pic_clip_rect
kind
:
Some
(
BackdropKind
:
:
Color
{
color
}
)
}
)
;
}
if
color_binding_index
!
=
ColorBindingIndex
:
:
INVALID
{
prim_info
.
color_binding
=
Some
(
color_bindings
[
color_binding_index
]
.
into
(
)
)
;
}
}
PrimitiveInstanceKind
:
:
Image
{
data_handle
ref
mut
is_compositor_surface
.
.
}
=
>
{
let
image_key
=
&
data_stores
.
image
[
data_handle
]
;
let
image_data
=
&
image_key
.
kind
;
let
mut
promote_to_surface
=
false
;
let
mut
promote_with_flip_y
=
false
;
match
self
.
can_promote_to_surface
(
image_key
.
common
.
flags
prim_clip_chain
prim_spatial_node_index
is_root_tile_cache
sub_slice_index
frame_context
)
{
SurfacePromotionResult
:
:
Failed
=
>
{
}
SurfacePromotionResult
:
:
Success
{
flip_y
}
=
>
{
promote_to_surface
=
true
;
promote_with_flip_y
=
flip_y
;
}
}
if
image_data
.
alpha_type
=
=
AlphaType
:
:
Alpha
{
promote_to_surface
=
false
;
}
if
let
Some
(
image_properties
)
=
resource_cache
.
get_image_properties
(
image_data
.
key
)
{
if
image_properties
.
descriptor
.
is_opaque
(
)
&
&
image_properties
.
tiling
.
is_none
(
)
&
&
image_data
.
tile_spacing
=
=
LayoutSize
:
:
zero
(
)
&
&
image_data
.
color
.
a
>
=
1
.
0
{
backdrop_candidate
=
Some
(
BackdropInfo
{
opaque_rect
:
pic_clip_rect
kind
:
None
}
)
;
}
}
if
promote_to_surface
{
promote_to_surface
=
self
.
setup_compositor_surfaces_rgb
(
sub_slice_index
&
mut
prim_info
image_key
.
common
.
flags
local_prim_rect
prim_spatial_node_index
pic_clip_rect
frame_context
ImageDependency
{
key
:
image_data
.
key
generation
:
resource_cache
.
get_image_generation
(
image_data
.
key
)
}
image_data
.
key
resource_cache
composite_state
gpu_cache
image_data
.
image_rendering
promote_with_flip_y
)
;
}
*
is_compositor_surface
=
promote_to_surface
;
if
promote_to_surface
{
prim_instance
.
vis
.
state
=
VisibilityState
:
:
Culled
;
return
;
}
else
{
prim_info
.
images
.
push
(
ImageDependency
{
key
:
image_data
.
key
generation
:
resource_cache
.
get_image_generation
(
image_data
.
key
)
}
)
;
}
}
PrimitiveInstanceKind
:
:
YuvImage
{
data_handle
ref
mut
is_compositor_surface
.
.
}
=
>
{
let
prim_data
=
&
data_stores
.
yuv_image
[
data_handle
]
;
let
mut
promote_to_surface
=
match
self
.
can_promote_to_surface
(
prim_data
.
common
.
flags
prim_clip_chain
prim_spatial_node_index
is_root_tile_cache
sub_slice_index
frame_context
)
{
SurfacePromotionResult
:
:
Failed
=
>
false
SurfacePromotionResult
:
:
Success
{
flip_y
}
=
>
!
flip_y
}
;
if
promote_to_surface
{
let
mut
image_dependencies
=
[
ImageDependency
:
:
INVALID
;
3
]
;
for
(
key
dep
)
in
prim_data
.
kind
.
yuv_key
.
iter
(
)
.
cloned
(
)
.
zip
(
image_dependencies
.
iter_mut
(
)
)
{
*
dep
=
ImageDependency
{
key
generation
:
resource_cache
.
get_image_generation
(
key
)
}
}
promote_to_surface
=
self
.
setup_compositor_surfaces_yuv
(
sub_slice_index
&
mut
prim_info
prim_data
.
common
.
flags
local_prim_rect
prim_spatial_node_index
pic_clip_rect
frame_context
&
image_dependencies
&
prim_data
.
kind
.
yuv_key
resource_cache
composite_state
gpu_cache
prim_data
.
kind
.
image_rendering
prim_data
.
kind
.
color_depth
prim_data
.
kind
.
color_space
prim_data
.
kind
.
format
)
;
}
*
is_compositor_surface
=
promote_to_surface
;
if
promote_to_surface
{
prim_instance
.
vis
.
state
=
VisibilityState
:
:
Culled
;
return
;
}
else
{
prim_info
.
images
.
extend
(
prim_data
.
kind
.
yuv_key
.
iter
(
)
.
map
(
|
key
|
{
ImageDependency
{
key
:
*
key
generation
:
resource_cache
.
get_image_generation
(
*
key
)
}
}
)
)
;
}
}
PrimitiveInstanceKind
:
:
ImageBorder
{
data_handle
.
.
}
=
>
{
let
border_data
=
&
data_stores
.
image_border
[
data_handle
]
.
kind
;
prim_info
.
images
.
push
(
ImageDependency
{
key
:
border_data
.
request
.
key
generation
:
resource_cache
.
get_image_generation
(
border_data
.
request
.
key
)
}
)
;
}
PrimitiveInstanceKind
:
:
Clear
{
.
.
}
=
>
{
backdrop_candidate
=
Some
(
BackdropInfo
{
opaque_rect
:
pic_clip_rect
kind
:
Some
(
BackdropKind
:
:
Clear
)
}
)
;
}
PrimitiveInstanceKind
:
:
LinearGradient
{
data_handle
.
.
}
|
PrimitiveInstanceKind
:
:
CachedLinearGradient
{
data_handle
.
.
}
=
>
{
let
gradient_data
=
&
data_stores
.
linear_grad
[
data_handle
]
;
if
gradient_data
.
stops_opacity
.
is_opaque
&
&
gradient_data
.
tile_spacing
=
=
LayoutSize
:
:
zero
(
)
{
backdrop_candidate
=
Some
(
BackdropInfo
{
opaque_rect
:
pic_clip_rect
kind
:
None
}
)
;
}
}
PrimitiveInstanceKind
:
:
ConicGradient
{
data_handle
.
.
}
=
>
{
let
gradient_data
=
&
data_stores
.
conic_grad
[
data_handle
]
;
if
gradient_data
.
stops_opacity
.
is_opaque
&
&
gradient_data
.
tile_spacing
=
=
LayoutSize
:
:
zero
(
)
{
backdrop_candidate
=
Some
(
BackdropInfo
{
opaque_rect
:
pic_clip_rect
kind
:
None
}
)
;
}
}
PrimitiveInstanceKind
:
:
RadialGradient
{
data_handle
.
.
}
=
>
{
let
gradient_data
=
&
data_stores
.
radial_grad
[
data_handle
]
;
if
gradient_data
.
stops_opacity
.
is_opaque
&
&
gradient_data
.
tile_spacing
=
=
LayoutSize
:
:
zero
(
)
{
backdrop_candidate
=
Some
(
BackdropInfo
{
opaque_rect
:
pic_clip_rect
kind
:
None
}
)
;
}
}
PrimitiveInstanceKind
:
:
LineDecoration
{
.
.
}
|
PrimitiveInstanceKind
:
:
NormalBorder
{
.
.
}
|
PrimitiveInstanceKind
:
:
TextRun
{
.
.
}
|
PrimitiveInstanceKind
:
:
Backdrop
{
.
.
}
=
>
{
}
}
;
let
mut
vis_flags
=
PrimitiveVisibilityFlags
:
:
empty
(
)
;
let
sub_slice
=
&
mut
self
.
sub_slices
[
sub_slice_index
]
;
if
let
Some
(
backdrop_candidate
)
=
backdrop_candidate
{
let
is_suitable_backdrop
=
match
backdrop_candidate
.
kind
{
Some
(
BackdropKind
:
:
Clear
)
=
>
{
true
}
Some
(
BackdropKind
:
:
Color
{
.
.
}
)
|
None
=
>
{
let
same_coord_system
=
{
let
prim_spatial_node
=
&
frame_context
.
spatial_tree
.
spatial_nodes
[
prim_spatial_node_index
.
0
as
usize
]
;
let
surface_spatial_node
=
&
frame_context
.
spatial_tree
.
spatial_nodes
[
self
.
spatial_node_index
.
0
as
usize
]
;
prim_spatial_node
.
coordinate_system_id
=
=
surface_spatial_node
.
coordinate_system_id
}
;
same_coord_system
&
&
on_picture_surface
}
}
;
if
sub_slice_index
=
=
0
&
&
is_suitable_backdrop
&
&
sub_slice
.
compositor_surfaces
.
is_empty
(
)
&
&
!
prim_clip_chain
.
needs_mask
{
if
backdrop_candidate
.
opaque_rect
.
contains_box
(
&
self
.
backdrop
.
opaque_rect
)
{
self
.
backdrop
.
opaque_rect
=
backdrop_candidate
.
opaque_rect
;
}
if
let
Some
(
kind
)
=
backdrop_candidate
.
kind
{
if
backdrop_candidate
.
opaque_rect
.
contains_box
(
&
self
.
local_rect
)
{
if
let
BackdropKind
:
:
Color
{
.
.
}
=
kind
{
vis_flags
|
=
PrimitiveVisibilityFlags
:
:
IS_BACKDROP
;
}
self
.
backdrop
.
kind
=
Some
(
kind
)
;
}
}
}
}
for
spatial_node_index
in
&
prim_info
.
spatial_nodes
{
self
.
spatial_node_comparer
.
register_used_transform
(
*
spatial_node_index
self
.
frame_id
frame_context
.
spatial_tree
)
;
}
prim_info
.
clips
.
truncate
(
MAX_PRIM_SUB_DEPS
)
;
prim_info
.
opacity_bindings
.
truncate
(
MAX_PRIM_SUB_DEPS
)
;
prim_info
.
spatial_nodes
.
truncate
(
MAX_PRIM_SUB_DEPS
)
;
prim_info
.
images
.
truncate
(
MAX_PRIM_SUB_DEPS
)
;
for
y
in
p0
.
y
.
.
p1
.
y
{
for
x
in
p0
.
x
.
.
p1
.
x
{
let
key
=
TileOffset
:
:
new
(
x
y
)
;
let
tile
=
sub_slice
.
tiles
.
get_mut
(
&
key
)
.
expect
(
"
bug
:
no
tile
"
)
;
tile
.
add_prim_dependency
(
&
prim_info
)
;
}
}
prim_instance
.
vis
.
state
=
VisibilityState
:
:
Coarse
{
filter
:
BatchFilter
{
rect_in_pic_space
:
pic_clip_rect
sub_slice_index
:
SubSliceIndex
:
:
new
(
sub_slice_index
)
}
vis_flags
}
;
}
fn
print
(
&
self
)
{
let
mut
pt
=
PrintTree
:
:
new
(
"
Picture
Cache
"
)
;
pt
.
new_level
(
format
!
(
"
Slice
{
:
?
}
"
self
.
slice
)
)
;
pt
.
add_item
(
format
!
(
"
fract_offset
:
{
:
?
}
"
self
.
fract_offset
)
)
;
pt
.
add_item
(
format
!
(
"
background_color
:
{
:
?
}
"
self
.
background_color
)
)
;
for
(
sub_slice_index
sub_slice
)
in
self
.
sub_slices
.
iter
(
)
.
enumerate
(
)
{
pt
.
new_level
(
format
!
(
"
SubSlice
{
:
?
}
"
sub_slice_index
)
)
;
for
y
in
self
.
tile_bounds_p0
.
y
.
.
self
.
tile_bounds_p1
.
y
{
for
x
in
self
.
tile_bounds_p0
.
x
.
.
self
.
tile_bounds_p1
.
x
{
let
key
=
TileOffset
:
:
new
(
x
y
)
;
let
tile
=
&
sub_slice
.
tiles
[
&
key
]
;
tile
.
print
(
&
mut
pt
)
;
}
}
pt
.
end_level
(
)
;
}
pt
.
end_level
(
)
;
}
fn
calculate_subpixel_mode
(
&
self
)
-
>
SubpixelMode
{
let
has_opaque_bg_color
=
self
.
background_color
.
map_or
(
false
|
c
|
c
.
a
>
=
1
.
0
)
;
if
has_opaque_bg_color
{
return
SubpixelMode
:
:
Allow
;
}
if
self
.
backdrop
.
opaque_rect
.
is_empty
(
)
{
return
SubpixelMode
:
:
Deny
;
}
if
self
.
backdrop
.
opaque_rect
.
contains_box
(
&
self
.
local_rect
)
{
return
SubpixelMode
:
:
Allow
;
}
SubpixelMode
:
:
Conditional
{
allowed_rect
:
self
.
backdrop
.
opaque_rect
}
}
pub
fn
post_update
(
&
mut
self
frame_context
:
&
FrameVisibilityContext
frame_state
:
&
mut
FrameVisibilityState
)
{
self
.
dirty_region
.
reset
(
self
.
spatial_node_index
)
;
self
.
subpixel_mode
=
self
.
calculate_subpixel_mode
(
)
;
let
surface_to_device
=
ScaleOffset
:
:
from_offset
(
self
.
device_position
.
to_vector
(
)
.
cast_unit
(
)
)
;
let
local_to_surface
=
get_relative_scale_offset
(
self
.
spatial_node_index
ROOT_SPATIAL_NODE_INDEX
frame_context
.
spatial_tree
)
.
accumulate
(
&
surface_to_device
.
inverse
(
)
)
;
self
.
transform_index
=
frame_state
.
composite_state
.
register_transform
(
local_to_surface
surface_to_device
)
;
let
map_pic_to_world
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
self
.
spatial_node_index
frame_context
.
global_screen_world_rect
frame_context
.
spatial_tree
)
;
self
.
external_native_surface_cache
.
retain
(
|
_
surface
|
{
if
!
surface
.
used_this_frame
{
frame_state
.
composite_state
.
dirty_rects_are_valid
=
false
;
frame_state
.
resource_cache
.
destroy_compositor_surface
(
surface
.
native_surface_id
)
;
}
surface
.
used_this_frame
}
)
;
let
root_transform
=
frame_context
.
spatial_tree
.
get_relative_transform
(
self
.
spatial_node_index
ROOT_SPATIAL_NODE_INDEX
)
;
let
root_transform
=
match
root_transform
{
CoordinateSpaceMapping
:
:
Local
=
>
ScaleOffset
:
:
identity
(
)
CoordinateSpaceMapping
:
:
ScaleOffset
(
scale_offset
)
=
>
scale_offset
CoordinateSpaceMapping
:
:
Transform
(
.
.
)
=
>
panic
!
(
"
bug
:
picture
caches
don
'
t
support
complex
transforms
"
)
}
;
const
EPSILON
:
f32
=
0
.
001
;
let
root_translation_changed
=
!
root_transform
.
offset
.
x
.
approx_eq_eps
(
&
self
.
root_transform
.
offset
.
x
&
EPSILON
)
|
|
!
root_transform
.
offset
.
y
.
approx_eq_eps
(
&
self
.
root_transform
.
offset
.
y
&
EPSILON
)
;
let
root_scale_changed
=
!
root_transform
.
scale
.
x
.
approx_eq_eps
(
&
self
.
root_transform
.
scale
.
x
&
EPSILON
)
|
|
!
root_transform
.
scale
.
y
.
approx_eq_eps
(
&
self
.
root_transform
.
scale
.
y
&
EPSILON
)
;
if
root_translation_changed
|
|
root_scale_changed
|
|
frame_context
.
config
.
force_invalidation
{
self
.
root_transform
=
root_transform
;
frame_state
.
composite_state
.
dirty_rects_are_valid
=
false
;
}
let
pic_to_world_mapper
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
self
.
spatial_node_index
frame_context
.
global_screen_world_rect
frame_context
.
spatial_tree
)
;
let
mut
ctx
=
TilePostUpdateContext
{
pic_to_world_mapper
global_device_pixel_scale
:
frame_context
.
global_device_pixel_scale
local_clip_rect
:
self
.
local_clip_rect
backdrop
:
None
opacity_bindings
:
&
self
.
opacity_bindings
color_bindings
:
&
self
.
color_bindings
current_tile_size
:
self
.
current_tile_size
local_rect
:
self
.
local_rect
z_id
:
ZBufferId
:
:
invalid
(
)
invalidate_all
:
root_scale_changed
|
|
frame_context
.
config
.
force_invalidation
}
;
let
mut
state
=
TilePostUpdateState
{
resource_cache
:
frame_state
.
resource_cache
composite_state
:
frame_state
.
composite_state
compare_cache
:
&
mut
self
.
compare_cache
spatial_node_comparer
:
&
mut
self
.
spatial_node_comparer
}
;
for
(
i
sub_slice
)
in
self
.
sub_slices
.
iter_mut
(
)
.
enumerate
(
)
.
rev
(
)
{
if
i
=
=
0
{
ctx
.
backdrop
=
Some
(
self
.
backdrop
)
;
}
for
compositor_surface
in
sub_slice
.
compositor_surfaces
.
iter_mut
(
)
.
rev
(
)
{
compositor_surface
.
descriptor
.
z_id
=
state
.
composite_state
.
z_generator
.
next
(
)
;
}
ctx
.
z_id
=
state
.
composite_state
.
z_generator
.
next
(
)
;
for
tile
in
sub_slice
.
tiles
.
values_mut
(
)
{
tile
.
post_update
(
&
ctx
&
mut
state
frame_context
)
;
}
}
for
sub_slice
in
&
self
.
sub_slices
{
for
compositor_surface
in
&
sub_slice
.
compositor_surfaces
{
if
compositor_surface
.
is_opaque
{
let
local_surface_rect
=
compositor_surface
.
descriptor
.
local_rect
.
intersection
(
&
compositor_surface
.
descriptor
.
local_clip_rect
)
.
and_then
(
|
r
|
{
r
.
intersection
(
&
self
.
local_clip_rect
)
}
)
;
if
let
Some
(
local_surface_rect
)
=
local_surface_rect
{
let
world_surface_rect
=
map_pic_to_world
.
map
(
&
local_surface_rect
)
.
expect
(
"
bug
:
unable
to
map
external
surface
to
world
space
"
)
;
frame_state
.
composite_state
.
register_occluder
(
compositor_surface
.
descriptor
.
z_id
world_surface_rect
)
;
}
}
}
}
if
!
self
.
backdrop
.
opaque_rect
.
is_empty
(
)
{
let
z_id_backdrop
=
frame_state
.
composite_state
.
z_generator
.
next
(
)
;
let
backdrop_rect
=
self
.
backdrop
.
opaque_rect
.
intersection
(
&
self
.
local_rect
)
.
and_then
(
|
r
|
{
r
.
intersection
(
&
self
.
local_clip_rect
)
}
)
;
if
let
Some
(
backdrop_rect
)
=
backdrop_rect
{
let
world_backdrop_rect
=
map_pic_to_world
.
map
(
&
backdrop_rect
)
.
expect
(
"
bug
:
unable
to
map
backdrop
to
world
space
"
)
;
frame_state
.
composite_state
.
register_occluder
(
z_id_backdrop
world_backdrop_rect
)
;
}
}
}
}
pub
struct
PictureScratchBuffer
{
surface_stack
:
Vec
<
SurfaceIndex
>
clip_chain_ids
:
Vec
<
ClipChainId
>
}
impl
Default
for
PictureScratchBuffer
{
fn
default
(
)
-
>
Self
{
PictureScratchBuffer
{
surface_stack
:
Vec
:
:
new
(
)
clip_chain_ids
:
Vec
:
:
new
(
)
}
}
}
impl
PictureScratchBuffer
{
pub
fn
begin_frame
(
&
mut
self
)
{
self
.
surface_stack
.
clear
(
)
;
self
.
clip_chain_ids
.
clear
(
)
;
}
pub
fn
recycle
(
&
mut
self
recycler
:
&
mut
Recycler
)
{
recycler
.
recycle_vec
(
&
mut
self
.
surface_stack
)
;
}
}
pub
struct
PictureUpdateState
<
'
a
>
{
surfaces
:
&
'
a
mut
Vec
<
SurfaceInfo
>
surface_stack
:
Vec
<
SurfaceIndex
>
}
impl
<
'
a
>
PictureUpdateState
<
'
a
>
{
pub
fn
update_all
(
buffers
:
&
mut
PictureScratchBuffer
surfaces
:
&
'
a
mut
Vec
<
SurfaceInfo
>
pic_index
:
PictureIndex
picture_primitives
:
&
mut
[
PicturePrimitive
]
frame_context
:
&
FrameBuildingContext
gpu_cache
:
&
mut
GpuCache
clip_store
:
&
ClipStore
data_stores
:
&
mut
DataStores
)
{
profile_scope
!
(
"
UpdatePictures
"
)
;
profile_marker
!
(
"
UpdatePictures
"
)
;
let
mut
state
=
PictureUpdateState
{
surfaces
surface_stack
:
buffers
.
surface_stack
.
take
(
)
.
cleared
(
)
}
;
state
.
surface_stack
.
push
(
SurfaceIndex
(
0
)
)
;
state
.
update
(
pic_index
picture_primitives
frame_context
gpu_cache
clip_store
data_stores
)
;
buffers
.
surface_stack
=
state
.
surface_stack
.
take
(
)
;
}
fn
current_surface
(
&
self
)
-
>
&
SurfaceInfo
{
&
self
.
surfaces
[
self
.
surface_stack
.
last
(
)
.
unwrap
(
)
.
0
]
}
fn
current_surface_mut
(
&
mut
self
)
-
>
&
mut
SurfaceInfo
{
&
mut
self
.
surfaces
[
self
.
surface_stack
.
last
(
)
.
unwrap
(
)
.
0
]
}
fn
push_surface
(
&
mut
self
surface
:
SurfaceInfo
)
-
>
SurfaceIndex
{
let
surface_index
=
SurfaceIndex
(
self
.
surfaces
.
len
(
)
)
;
self
.
surfaces
.
push
(
surface
)
;
self
.
surface_stack
.
push
(
surface_index
)
;
surface_index
}
fn
pop_surface
(
&
mut
self
)
-
>
SurfaceIndex
{
self
.
surface_stack
.
pop
(
)
.
unwrap
(
)
}
fn
update
(
&
mut
self
pic_index
:
PictureIndex
picture_primitives
:
&
mut
[
PicturePrimitive
]
frame_context
:
&
FrameBuildingContext
gpu_cache
:
&
mut
GpuCache
clip_store
:
&
ClipStore
data_stores
:
&
mut
DataStores
)
{
if
let
Some
(
prim_list
)
=
picture_primitives
[
pic_index
.
0
]
.
pre_update
(
self
frame_context
)
{
for
child_pic_index
in
&
prim_list
.
child_pictures
{
self
.
update
(
*
child_pic_index
picture_primitives
frame_context
gpu_cache
clip_store
data_stores
)
;
}
picture_primitives
[
pic_index
.
0
]
.
post_update
(
prim_list
self
frame_context
data_stores
)
;
}
}
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
pub
struct
SurfaceIndex
(
pub
usize
)
;
pub
const
ROOT_SURFACE_INDEX
:
SurfaceIndex
=
SurfaceIndex
(
0
)
;
#
[
derive
(
Debug
)
]
pub
enum
SurfaceRenderTasks
{
Simple
(
RenderTaskId
)
Chained
{
root_task_id
:
RenderTaskId
port_task_id
:
RenderTaskId
}
Tiled
(
Vec
<
RenderTaskId
>
)
}
#
[
derive
(
Debug
)
]
pub
struct
SurfaceInfo
{
pub
rect
:
PictureRect
pub
opaque_rect
:
PictureRect
pub
map_local_to_surface
:
SpaceMapper
<
LayoutPixel
PicturePixel
>
pub
raster_spatial_node_index
:
SpatialNodeIndex
pub
surface_spatial_node_index
:
SpatialNodeIndex
pub
render_tasks
:
Option
<
SurfaceRenderTasks
>
pub
inflation_factor
:
f32
pub
device_pixel_scale
:
DevicePixelScale
pub
scale_factors
:
(
f32
f32
)
pub
raster_rect
:
Option
<
DeviceRect
>
}
impl
SurfaceInfo
{
pub
fn
new
(
surface_spatial_node_index
:
SpatialNodeIndex
raster_spatial_node_index
:
SpatialNodeIndex
inflation_factor
:
f32
world_rect
:
WorldRect
spatial_tree
:
&
SpatialTree
device_pixel_scale
:
DevicePixelScale
scale_factors
:
(
f32
f32
)
)
-
>
Self
{
let
map_surface_to_world
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
surface_spatial_node_index
world_rect
spatial_tree
)
;
let
pic_bounds
=
map_surface_to_world
.
unmap
(
&
map_surface_to_world
.
bounds
)
.
unwrap_or_else
(
PictureRect
:
:
max_rect
)
;
let
map_local_to_surface
=
SpaceMapper
:
:
new
(
surface_spatial_node_index
pic_bounds
)
;
SurfaceInfo
{
rect
:
PictureRect
:
:
zero
(
)
opaque_rect
:
PictureRect
:
:
zero
(
)
map_local_to_surface
render_tasks
:
None
raster_spatial_node_index
surface_spatial_node_index
inflation_factor
device_pixel_scale
scale_factors
raster_rect
:
None
}
}
pub
fn
get_raster_rect
(
&
self
)
-
>
DeviceRect
{
self
.
raster_rect
.
expect
(
"
bug
:
queried
before
surface
was
initialized
"
)
}
}
#
[
derive
(
Debug
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
pub
struct
RasterConfig
{
pub
composite_mode
:
PictureCompositeMode
pub
surface_index
:
SurfaceIndex
pub
establishes_raster_root
:
bool
pub
root_scaling_factor
:
f32
pub
clipped_bounding_rect
:
WorldRect
}
bitflags
!
{
/
/
/
A
set
of
flags
describing
why
a
picture
may
need
a
backing
surface
.
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
pub
struct
BlitReason
:
u32
{
/
/
/
Mix
-
blend
-
mode
on
a
child
that
requires
isolation
.
const
ISOLATE
=
1
;
/
/
/
Clip
node
that
_might_
require
a
surface
.
const
CLIP
=
2
;
/
/
/
Preserve
-
3D
requires
a
surface
for
plane
-
splitting
.
const
PRESERVE3D
=
4
;
/
/
/
A
backdrop
that
is
reused
which
requires
a
surface
.
const
BACKDROP
=
8
;
}
}
#
[
allow
(
dead_code
)
]
#
[
derive
(
Debug
Clone
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
pub
enum
PictureCompositeMode
{
MixBlend
(
MixBlendMode
)
Filter
(
Filter
)
ComponentTransferFilter
(
FilterDataHandle
)
Blit
(
BlitReason
)
TileCache
{
slice_id
:
SliceId
}
SvgFilter
(
Vec
<
FilterPrimitive
>
Vec
<
SFilterData
>
)
}
impl
PictureCompositeMode
{
pub
fn
inflate_picture_rect
(
&
self
picture_rect
:
PictureRect
scale_factors
:
(
f32
f32
)
)
-
>
PictureRect
{
let
mut
result_rect
=
picture_rect
;
match
self
{
PictureCompositeMode
:
:
Filter
(
filter
)
=
>
match
filter
{
Filter
:
:
Blur
(
width
height
)
=
>
{
let
width_factor
=
clamp_blur_radius
(
*
width
scale_factors
)
.
ceil
(
)
*
BLUR_SAMPLE_SCALE
;
let
height_factor
=
clamp_blur_radius
(
*
height
scale_factors
)
.
ceil
(
)
*
BLUR_SAMPLE_SCALE
;
result_rect
=
picture_rect
.
inflate
(
width_factor
height_factor
)
;
}
Filter
:
:
DropShadows
(
shadows
)
=
>
{
let
mut
max_inflation
:
f32
=
0
.
0
;
for
shadow
in
shadows
{
max_inflation
=
max_inflation
.
max
(
shadow
.
blur_radius
)
;
}
max_inflation
=
clamp_blur_radius
(
max_inflation
scale_factors
)
.
ceil
(
)
*
BLUR_SAMPLE_SCALE
;
result_rect
=
picture_rect
.
inflate
(
max_inflation
max_inflation
)
;
}
_
=
>
{
}
}
PictureCompositeMode
:
:
SvgFilter
(
primitives
_
)
=
>
{
let
mut
output_rects
=
Vec
:
:
with_capacity
(
primitives
.
len
(
)
)
;
for
(
cur_index
primitive
)
in
primitives
.
iter
(
)
.
enumerate
(
)
{
let
output_rect
=
match
primitive
.
kind
{
FilterPrimitiveKind
:
:
Blur
(
ref
primitive
)
=
>
{
let
input
=
primitive
.
input
.
to_index
(
cur_index
)
.
map
(
|
index
|
output_rects
[
index
]
)
.
unwrap_or
(
picture_rect
)
;
let
width_factor
=
primitive
.
width
.
round
(
)
*
BLUR_SAMPLE_SCALE
;
let
height_factor
=
primitive
.
height
.
round
(
)
*
BLUR_SAMPLE_SCALE
;
input
.
inflate
(
width_factor
height_factor
)
}
FilterPrimitiveKind
:
:
DropShadow
(
ref
primitive
)
=
>
{
let
inflation_factor
=
primitive
.
shadow
.
blur_radius
.
ceil
(
)
*
BLUR_SAMPLE_SCALE
;
let
input
=
primitive
.
input
.
to_index
(
cur_index
)
.
map
(
|
index
|
output_rects
[
index
]
)
.
unwrap_or
(
picture_rect
)
;
let
shadow_rect
=
input
.
inflate
(
inflation_factor
inflation_factor
)
;
input
.
union
(
&
shadow_rect
.
translate
(
primitive
.
shadow
.
offset
*
Scale
:
:
new
(
1
.
0
)
)
)
}
FilterPrimitiveKind
:
:
Blend
(
ref
primitive
)
=
>
{
primitive
.
input1
.
to_index
(
cur_index
)
.
map
(
|
index
|
output_rects
[
index
]
)
.
unwrap_or
(
picture_rect
)
.
union
(
&
primitive
.
input2
.
to_index
(
cur_index
)
.
map
(
|
index
|
output_rects
[
index
]
)
.
unwrap_or
(
picture_rect
)
)
}
FilterPrimitiveKind
:
:
Composite
(
ref
primitive
)
=
>
{
primitive
.
input1
.
to_index
(
cur_index
)
.
map
(
|
index
|
output_rects
[
index
]
)
.
unwrap_or
(
picture_rect
)
.
union
(
&
primitive
.
input2
.
to_index
(
cur_index
)
.
map
(
|
index
|
output_rects
[
index
]
)
.
unwrap_or
(
picture_rect
)
)
}
FilterPrimitiveKind
:
:
Identity
(
ref
primitive
)
=
>
primitive
.
input
.
to_index
(
cur_index
)
.
map
(
|
index
|
output_rects
[
index
]
)
.
unwrap_or
(
picture_rect
)
FilterPrimitiveKind
:
:
Opacity
(
ref
primitive
)
=
>
primitive
.
input
.
to_index
(
cur_index
)
.
map
(
|
index
|
output_rects
[
index
]
)
.
unwrap_or
(
picture_rect
)
FilterPrimitiveKind
:
:
ColorMatrix
(
ref
primitive
)
=
>
primitive
.
input
.
to_index
(
cur_index
)
.
map
(
|
index
|
output_rects
[
index
]
)
.
unwrap_or
(
picture_rect
)
FilterPrimitiveKind
:
:
ComponentTransfer
(
ref
primitive
)
=
>
primitive
.
input
.
to_index
(
cur_index
)
.
map
(
|
index
|
output_rects
[
index
]
)
.
unwrap_or
(
picture_rect
)
FilterPrimitiveKind
:
:
Offset
(
ref
primitive
)
=
>
{
let
input_rect
=
primitive
.
input
.
to_index
(
cur_index
)
.
map
(
|
index
|
output_rects
[
index
]
)
.
unwrap_or
(
picture_rect
)
;
input_rect
.
translate
(
primitive
.
offset
*
Scale
:
:
new
(
1
.
0
)
)
}
FilterPrimitiveKind
:
:
Flood
(
.
.
)
=
>
picture_rect
}
;
output_rects
.
push
(
output_rect
)
;
result_rect
=
result_rect
.
union
(
&
output_rect
)
;
}
}
_
=
>
{
}
}
result_rect
}
}
#
[
derive
(
Clone
Debug
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
pub
enum
Picture3DContext
<
C
>
{
Out
In
{
root_data
:
Option
<
Vec
<
C
>
>
ancestor_index
:
SpatialNodeIndex
}
}
#
[
derive
(
Clone
Debug
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
pub
struct
OrderedPictureChild
{
pub
anchor
:
PlaneSplitAnchor
pub
spatial_node_index
:
SpatialNodeIndex
pub
gpu_address
:
GpuCacheAddress
}
bitflags
!
{
/
/
/
A
set
of
flags
describing
why
a
picture
may
need
a
backing
surface
.
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
pub
struct
ClusterFlags
:
u32
{
/
/
/
Whether
this
cluster
is
visible
when
the
position
node
is
a
backface
.
const
IS_BACKFACE_VISIBLE
=
1
;
/
/
/
This
flag
is
set
during
the
first
pass
picture
traversal
depending
on
whether
/
/
/
the
cluster
is
visible
or
not
.
It
'
s
read
during
the
second
pass
when
primitives
/
/
/
consult
their
owning
clusters
to
see
if
the
primitive
itself
is
visible
.
const
IS_VISIBLE
=
2
;
/
/
/
Is
a
backdrop
-
filter
cluster
that
requires
special
handling
during
post_update
.
const
IS_BACKDROP_FILTER
=
4
;
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
pub
struct
PrimitiveCluster
{
pub
spatial_node_index
:
SpatialNodeIndex
bounding_rect
:
LayoutRect
pub
opaque_rect
:
LayoutRect
pub
prim_range
:
Range
<
usize
>
pub
flags
:
ClusterFlags
}
impl
PrimitiveCluster
{
fn
new
(
spatial_node_index
:
SpatialNodeIndex
flags
:
ClusterFlags
first_instance_index
:
usize
)
-
>
Self
{
PrimitiveCluster
{
bounding_rect
:
LayoutRect
:
:
zero
(
)
opaque_rect
:
LayoutRect
:
:
zero
(
)
spatial_node_index
flags
prim_range
:
first_instance_index
.
.
first_instance_index
}
}
pub
fn
is_compatible
(
&
self
spatial_node_index
:
SpatialNodeIndex
flags
:
ClusterFlags
)
-
>
bool
{
self
.
flags
=
=
flags
&
&
self
.
spatial_node_index
=
=
spatial_node_index
}
pub
fn
prim_range
(
&
self
)
-
>
Range
<
usize
>
{
self
.
prim_range
.
clone
(
)
}
fn
add_instance
(
&
mut
self
culling_rect
:
&
LayoutRect
instance_index
:
usize
)
{
debug_assert_eq
!
(
instance_index
self
.
prim_range
.
end
)
;
self
.
bounding_rect
=
self
.
bounding_rect
.
union
(
culling_rect
)
;
self
.
prim_range
.
end
+
=
1
;
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
pub
struct
PrimitiveList
{
pub
clusters
:
Vec
<
PrimitiveCluster
>
pub
prim_instances
:
Vec
<
PrimitiveInstance
>
pub
child_pictures
:
Vec
<
PictureIndex
>
pub
compositor_surface_count
:
usize
}
impl
PrimitiveList
{
pub
fn
empty
(
)
-
>
Self
{
PrimitiveList
{
clusters
:
Vec
:
:
new
(
)
prim_instances
:
Vec
:
:
new
(
)
child_pictures
:
Vec
:
:
new
(
)
compositor_surface_count
:
0
}
}
pub
fn
add_prim
(
&
mut
self
prim_instance
:
PrimitiveInstance
prim_rect
:
LayoutRect
spatial_node_index
:
SpatialNodeIndex
prim_flags
:
PrimitiveFlags
)
{
let
mut
flags
=
ClusterFlags
:
:
empty
(
)
;
match
prim_instance
.
kind
{
PrimitiveInstanceKind
:
:
Picture
{
pic_index
.
.
}
=
>
{
self
.
child_pictures
.
push
(
pic_index
)
;
}
PrimitiveInstanceKind
:
:
Backdrop
{
.
.
}
=
>
{
flags
.
insert
(
ClusterFlags
:
:
IS_BACKDROP_FILTER
)
;
}
_
=
>
{
}
}
if
prim_flags
.
contains
(
PrimitiveFlags
:
:
IS_BACKFACE_VISIBLE
)
{
flags
.
insert
(
ClusterFlags
:
:
IS_BACKFACE_VISIBLE
)
;
}
if
prim_flags
.
contains
(
PrimitiveFlags
:
:
PREFER_COMPOSITOR_SURFACE
)
{
self
.
compositor_surface_count
+
=
1
;
}
let
culling_rect
=
prim_instance
.
clip_set
.
local_clip_rect
.
intersection
(
&
prim_rect
)
.
unwrap_or_else
(
LayoutRect
:
:
zero
)
;
let
prims_len
=
self
.
prim_instances
.
len
(
)
;
if
prims_len
=
=
self
.
prim_instances
.
capacity
(
)
{
let
next_alloc
=
match
prims_len
{
1
.
.
=
31
=
>
32
-
prims_len
32
.
.
=
256
=
>
512
-
prims_len
_
=
>
prims_len
*
2
}
;
self
.
prim_instances
.
reserve
(
next_alloc
)
;
}
let
instance_index
=
prims_len
;
self
.
prim_instances
.
push
(
prim_instance
)
;
if
let
Some
(
cluster
)
=
self
.
clusters
.
last_mut
(
)
{
if
cluster
.
is_compatible
(
spatial_node_index
flags
)
{
cluster
.
add_instance
(
&
culling_rect
instance_index
)
;
return
;
}
}
let
clusters_len
=
self
.
clusters
.
len
(
)
;
if
clusters_len
=
=
self
.
clusters
.
capacity
(
)
{
let
next_alloc
=
match
clusters_len
{
1
.
.
=
15
=
>
16
-
clusters_len
16
.
.
=
127
=
>
128
-
clusters_len
_
=
>
clusters_len
*
2
}
;
self
.
clusters
.
reserve
(
next_alloc
)
;
}
let
mut
cluster
=
PrimitiveCluster
:
:
new
(
spatial_node_index
flags
instance_index
)
;
cluster
.
add_instance
(
&
culling_rect
instance_index
)
;
self
.
clusters
.
push
(
cluster
)
;
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
clusters
.
is_empty
(
)
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
pub
struct
PictureOptions
{
pub
inflate_if_required
:
bool
}
impl
Default
for
PictureOptions
{
fn
default
(
)
-
>
Self
{
PictureOptions
{
inflate_if_required
:
true
}
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
pub
struct
PicturePrimitive
{
pub
prim_list
:
PrimitiveList
#
[
cfg_attr
(
feature
=
"
capture
"
serde
(
skip
)
)
]
pub
state
:
Option
<
PictureState
>
pub
apply_local_clip_rect
:
bool
pub
is_backface_visible
:
bool
pub
primary_render_task_id
:
Option
<
RenderTaskId
>
pub
secondary_render_task_id
:
Option
<
RenderTaskId
>
pub
requested_composite_mode
:
Option
<
PictureCompositeMode
>
pub
raster_config
:
Option
<
RasterConfig
>
pub
context_3d
:
Picture3DContext
<
OrderedPictureChild
>
pub
extra_gpu_data_handles
:
SmallVec
<
[
GpuCacheHandle
;
1
]
>
pub
spatial_node_index
:
SpatialNodeIndex
pub
estimated_local_rect
:
LayoutRect
pub
precise_local_rect
:
LayoutRect
pub
prev_precise_local_rect
:
LayoutRect
pub
segments_are_valid
:
bool
pub
options
:
PictureOptions
pub
is_opaque
:
bool
}
impl
PicturePrimitive
{
pub
fn
print
<
T
:
PrintTreePrinter
>
(
&
self
pictures
:
&
[
Self
]
self_index
:
PictureIndex
pt
:
&
mut
T
)
{
pt
.
new_level
(
format
!
(
"
{
:
?
}
"
self_index
)
)
;
pt
.
add_item
(
format
!
(
"
cluster_count
:
{
:
?
}
"
self
.
prim_list
.
clusters
.
len
(
)
)
)
;
pt
.
add_item
(
format
!
(
"
estimated_local_rect
:
{
:
?
}
"
self
.
estimated_local_rect
)
)
;
pt
.
add_item
(
format
!
(
"
precise_local_rect
:
{
:
?
}
"
self
.
precise_local_rect
)
)
;
pt
.
add_item
(
format
!
(
"
spatial_node_index
:
{
:
?
}
"
self
.
spatial_node_index
)
)
;
pt
.
add_item
(
format
!
(
"
raster_config
:
{
:
?
}
"
self
.
raster_config
)
)
;
pt
.
add_item
(
format
!
(
"
requested_composite_mode
:
{
:
?
}
"
self
.
requested_composite_mode
)
)
;
for
child_pic_index
in
&
self
.
prim_list
.
child_pictures
{
pictures
[
child_pic_index
.
0
]
.
print
(
pictures
*
child_pic_index
pt
)
;
}
pt
.
end_level
(
)
;
}
pub
fn
can_use_segments
(
&
self
)
-
>
bool
{
match
self
.
raster_config
{
Some
(
RasterConfig
{
composite_mode
:
PictureCompositeMode
:
:
MixBlend
(
.
.
)
.
.
}
)
|
Some
(
RasterConfig
{
composite_mode
:
PictureCompositeMode
:
:
Filter
(
.
.
)
.
.
}
)
|
Some
(
RasterConfig
{
composite_mode
:
PictureCompositeMode
:
:
ComponentTransferFilter
(
.
.
)
.
.
}
)
|
Some
(
RasterConfig
{
composite_mode
:
PictureCompositeMode
:
:
TileCache
{
.
.
}
.
.
}
)
|
Some
(
RasterConfig
{
composite_mode
:
PictureCompositeMode
:
:
SvgFilter
(
.
.
)
.
.
}
)
|
None
=
>
{
false
}
Some
(
RasterConfig
{
composite_mode
:
PictureCompositeMode
:
:
Blit
(
reason
)
.
.
}
)
=
>
{
reason
=
=
BlitReason
:
:
CLIP
}
}
}
fn
resolve_scene_properties
(
&
mut
self
properties
:
&
SceneProperties
)
-
>
bool
{
match
self
.
requested_composite_mode
{
Some
(
PictureCompositeMode
:
:
Filter
(
ref
mut
filter
)
)
=
>
{
match
*
filter
{
Filter
:
:
Opacity
(
ref
binding
ref
mut
value
)
=
>
{
*
value
=
properties
.
resolve_float
(
binding
)
;
}
_
=
>
{
}
}
filter
.
is_visible
(
)
}
_
=
>
true
}
}
pub
fn
is_visible
(
&
self
)
-
>
bool
{
match
self
.
requested_composite_mode
{
Some
(
PictureCompositeMode
:
:
Filter
(
ref
filter
)
)
=
>
{
filter
.
is_visible
(
)
}
_
=
>
true
}
}
pub
fn
new_image
(
requested_composite_mode
:
Option
<
PictureCompositeMode
>
context_3d
:
Picture3DContext
<
OrderedPictureChild
>
apply_local_clip_rect
:
bool
flags
:
PrimitiveFlags
prim_list
:
PrimitiveList
spatial_node_index
:
SpatialNodeIndex
options
:
PictureOptions
)
-
>
Self
{
PicturePrimitive
{
prim_list
state
:
None
primary_render_task_id
:
None
secondary_render_task_id
:
None
requested_composite_mode
raster_config
:
None
context_3d
extra_gpu_data_handles
:
SmallVec
:
:
new
(
)
apply_local_clip_rect
is_backface_visible
:
flags
.
contains
(
PrimitiveFlags
:
:
IS_BACKFACE_VISIBLE
)
spatial_node_index
estimated_local_rect
:
LayoutRect
:
:
zero
(
)
precise_local_rect
:
LayoutRect
:
:
zero
(
)
prev_precise_local_rect
:
LayoutRect
:
:
zero
(
)
options
segments_are_valid
:
false
is_opaque
:
false
}
}
pub
fn
take_context
(
&
mut
self
pic_index
:
PictureIndex
surface_spatial_node_index
:
SpatialNodeIndex
raster_spatial_node_index
:
SpatialNodeIndex
parent_surface_index
:
SurfaceIndex
parent_subpixel_mode
:
SubpixelMode
frame_state
:
&
mut
FrameBuildingState
frame_context
:
&
FrameBuildingContext
scratch
:
&
mut
PrimitiveScratchBuffer
tile_cache_logger
:
&
mut
TileCacheLogger
tile_caches
:
&
mut
FastHashMap
<
SliceId
Box
<
TileCacheInstance
>
>
)
-
>
Option
<
(
PictureContext
PictureState
PrimitiveList
)
>
{
self
.
primary_render_task_id
=
None
;
self
.
secondary_render_task_id
=
None
;
if
!
self
.
is_visible
(
)
{
return
None
;
}
profile_scope
!
(
"
take_context
"
)
;
let
(
raster_spatial_node_index
surface_spatial_node_index
surface_index
inflation_factor
)
=
match
self
.
raster_config
{
Some
(
ref
raster_config
)
=
>
{
let
surface
=
&
frame_state
.
surfaces
[
raster_config
.
surface_index
.
0
]
;
(
surface
.
raster_spatial_node_index
self
.
spatial_node_index
raster_config
.
surface_index
surface
.
inflation_factor
)
}
None
=
>
{
(
raster_spatial_node_index
surface_spatial_node_index
parent_surface_index
0
.
0
)
}
}
;
let
map_pic_to_world
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
surface_spatial_node_index
frame_context
.
global_screen_world_rect
frame_context
.
spatial_tree
)
;
let
pic_bounds
=
map_pic_to_world
.
unmap
(
&
map_pic_to_world
.
bounds
)
.
unwrap_or_else
(
PictureRect
:
:
max_rect
)
;
let
map_local_to_pic
=
SpaceMapper
:
:
new
(
surface_spatial_node_index
pic_bounds
)
;
let
(
map_raster_to_world
map_pic_to_raster
)
=
create_raster_mappers
(
surface_spatial_node_index
raster_spatial_node_index
frame_context
.
global_screen_world_rect
frame_context
.
spatial_tree
)
;
let
plane_splitter
=
match
self
.
context_3d
{
Picture3DContext
:
:
Out
=
>
{
None
}
Picture3DContext
:
:
In
{
root_data
:
Some
(
_
)
.
.
}
=
>
{
Some
(
PlaneSplitter
:
:
new
(
)
)
}
Picture3DContext
:
:
In
{
root_data
:
None
.
.
}
=
>
{
None
}
}
;
match
self
.
raster_config
{
Some
(
RasterConfig
{
surface_index
composite_mode
:
PictureCompositeMode
:
:
TileCache
{
slice_id
}
.
.
}
)
=
>
{
let
tile_cache
=
tile_caches
.
get_mut
(
&
slice_id
)
.
unwrap
(
)
;
let
mut
debug_info
=
SliceDebugInfo
:
:
new
(
)
;
let
mut
surface_tasks
=
Vec
:
:
with_capacity
(
tile_cache
.
tile_count
(
)
)
;
let
mut
surface_local_rect
=
PictureRect
:
:
zero
(
)
;
let
device_pixel_scale
=
frame_state
.
surfaces
[
surface_index
.
0
]
.
device_pixel_scale
;
let
world_clip_rect
=
map_pic_to_world
.
map
(
&
tile_cache
.
local_clip_rect
)
.
expect
(
"
bug
:
unable
to
map
clip
rect
"
)
.
round
(
)
;
let
device_clip_rect
=
(
world_clip_rect
*
frame_context
.
global_device_pixel_scale
)
.
round
(
)
;
for
(
sub_slice_index
sub_slice
)
in
tile_cache
.
sub_slices
.
iter_mut
(
)
.
enumerate
(
)
{
for
tile
in
sub_slice
.
tiles
.
values_mut
(
)
{
surface_local_rect
=
surface_local_rect
.
union
(
&
tile
.
current_descriptor
.
local_valid_rect
)
;
if
tile
.
is_visible
{
let
world_draw_rect
=
world_clip_rect
.
intersection
(
&
tile
.
world_valid_rect
)
;
match
world_draw_rect
{
Some
(
world_draw_rect
)
=
>
{
if
tile_cache
.
spatial_node_index
=
=
ROOT_SPATIAL_NODE_INDEX
&
&
frame_state
.
composite_state
.
occluders
.
is_tile_occluded
(
tile
.
z_id
world_draw_rect
)
{
let
surface
=
tile
.
surface
.
as_mut
(
)
.
expect
(
"
no
tile
surface
set
!
"
)
;
if
let
TileSurface
:
:
Texture
{
descriptor
:
SurfaceTextureDescriptor
:
:
Native
{
id
.
.
}
.
.
}
=
surface
{
if
let
Some
(
id
)
=
id
.
take
(
)
{
frame_state
.
resource_cache
.
destroy_compositor_tile
(
id
)
;
}
}
tile
.
is_visible
=
false
;
if
frame_context
.
fb_config
.
testing
{
debug_info
.
tiles
.
insert
(
tile
.
tile_offset
TileDebugInfo
:
:
Occluded
)
;
}
continue
;
}
}
None
=
>
{
tile
.
is_visible
=
false
;
}
}
}
if
let
Some
(
TileSurface
:
:
Texture
{
descriptor
.
.
}
)
=
tile
.
surface
.
as_ref
(
)
{
if
let
SurfaceTextureDescriptor
:
:
TextureCache
{
ref
handle
.
.
}
=
descriptor
{
frame_state
.
resource_cache
.
texture_cache
.
request
(
handle
frame_state
.
gpu_cache
)
;
}
}
if
!
tile
.
is_visible
{
if
frame_context
.
fb_config
.
testing
{
debug_info
.
tiles
.
insert
(
tile
.
tile_offset
TileDebugInfo
:
:
Culled
)
;
}
continue
;
}
if
frame_context
.
debug_flags
.
contains
(
DebugFlags
:
:
PICTURE_CACHING_DBG
)
{
tile
.
root
.
draw_debug_rects
(
&
map_pic_to_world
tile
.
is_opaque
tile
.
current_descriptor
.
local_valid_rect
scratch
frame_context
.
global_device_pixel_scale
)
;
let
label_offset
=
DeviceVector2D
:
:
new
(
20
.
0
+
sub_slice_index
as
f32
*
20
.
0
30
.
0
+
sub_slice_index
as
f32
*
20
.
0
)
;
let
tile_device_rect
=
tile
.
world_tile_rect
*
frame_context
.
global_device_pixel_scale
;
if
tile_device_rect
.
height
(
)
>
=
label_offset
.
y
{
let
surface
=
tile
.
surface
.
as_ref
(
)
.
expect
(
"
no
tile
surface
set
!
"
)
;
scratch
.
push_debug_string
(
tile_device_rect
.
min
+
label_offset
debug_colors
:
:
RED
format
!
(
"
{
:
?
}
:
s
=
{
}
is_opaque
=
{
}
surface
=
{
}
sub
=
{
}
"
tile
.
id
tile_cache
.
slice
tile
.
is_opaque
surface
.
kind
(
)
sub_slice_index
)
)
;
}
}
if
let
TileSurface
:
:
Texture
{
descriptor
.
.
}
=
tile
.
surface
.
as_mut
(
)
.
unwrap
(
)
{
match
descriptor
{
SurfaceTextureDescriptor
:
:
TextureCache
{
ref
handle
.
.
}
=
>
{
if
frame_state
.
resource_cache
.
texture_cache
.
is_allocated
(
handle
)
{
frame_state
.
resource_cache
.
texture_cache
.
request
(
handle
frame_state
.
gpu_cache
)
;
}
else
{
tile
.
invalidate
(
None
InvalidationReason
:
:
NoTexture
)
;
}
}
SurfaceTextureDescriptor
:
:
Native
{
id
.
.
}
=
>
{
if
id
.
is_none
(
)
{
tile
.
invalidate
(
None
InvalidationReason
:
:
NoSurface
)
;
}
}
}
}
tile
.
local_dirty_rect
=
tile
.
local_dirty_rect
.
intersection
(
&
tile
.
current_descriptor
.
local_valid_rect
)
.
unwrap_or_else
(
PictureRect
:
:
zero
)
;
let
world_dirty_rect
=
map_pic_to_world
.
map
(
&
tile
.
local_dirty_rect
)
.
expect
(
"
bug
"
)
;
let
device_rect
=
(
tile
.
world_tile_rect
*
frame_context
.
global_device_pixel_scale
)
.
round
(
)
;
tile
.
device_dirty_rect
=
(
world_dirty_rect
*
frame_context
.
global_device_pixel_scale
)
.
round_out
(
)
.
intersection
(
&
device_rect
)
.
unwrap_or_else
(
DeviceRect
:
:
zero
)
;
if
tile
.
is_valid
{
if
frame_context
.
fb_config
.
testing
{
debug_info
.
tiles
.
insert
(
tile
.
tile_offset
TileDebugInfo
:
:
Valid
)
;
}
}
else
{
tile_cache
.
dirty_region
.
add_dirty_region
(
tile
.
local_dirty_rect
SubSliceIndex
:
:
new
(
sub_slice_index
)
frame_context
.
spatial_tree
)
;
if
let
TileSurface
:
:
Texture
{
ref
mut
descriptor
}
=
tile
.
surface
.
as_mut
(
)
.
unwrap
(
)
{
match
descriptor
{
SurfaceTextureDescriptor
:
:
TextureCache
{
ref
mut
handle
}
=
>
{
if
!
frame_state
.
resource_cache
.
texture_cache
.
is_allocated
(
handle
)
{
frame_state
.
resource_cache
.
texture_cache
.
update_picture_cache
(
tile_cache
.
current_tile_size
handle
frame_state
.
gpu_cache
)
;
}
}
SurfaceTextureDescriptor
:
:
Native
{
id
}
=
>
{
if
id
.
is_none
(
)
{
if
sub_slice
.
native_surface
.
is_none
(
)
{
let
opaque
=
frame_state
.
resource_cache
.
create_compositor_surface
(
tile_cache
.
virtual_offset
tile_cache
.
current_tile_size
true
)
;
let
alpha
=
frame_state
.
resource_cache
.
create_compositor_surface
(
tile_cache
.
virtual_offset
tile_cache
.
current_tile_size
false
)
;
sub_slice
.
native_surface
=
Some
(
NativeSurface
{
opaque
alpha
}
)
;
}
let
surface_id
=
if
tile
.
is_opaque
{
sub_slice
.
native_surface
.
as_ref
(
)
.
unwrap
(
)
.
opaque
}
else
{
sub_slice
.
native_surface
.
as_ref
(
)
.
unwrap
(
)
.
alpha
}
;
let
tile_id
=
NativeTileId
{
surface_id
x
:
tile
.
tile_offset
.
x
y
:
tile
.
tile_offset
.
y
}
;
frame_state
.
resource_cache
.
create_compositor_tile
(
tile_id
)
;
*
id
=
Some
(
tile_id
)
;
}
}
}
let
content_origin_f
=
tile
.
local_tile_rect
.
min
.
cast_unit
(
)
*
device_pixel_scale
;
let
content_origin
=
content_origin_f
.
round
(
)
;
debug_assert
!
(
(
content_origin_f
.
x
-
content_origin
.
x
)
.
abs
(
)
<
0
.
01
)
;
debug_assert
!
(
(
content_origin_f
.
y
-
content_origin
.
y
)
.
abs
(
)
<
0
.
01
)
;
let
surface
=
descriptor
.
resolve
(
frame_state
.
resource_cache
tile_cache
.
current_tile_size
)
;
let
scissor_rect
=
frame_state
.
composite_state
.
get_surface_rect
(
&
tile
.
local_dirty_rect
&
tile
.
local_tile_rect
tile_cache
.
transform_index
)
.
to_i32
(
)
;
let
valid_rect
=
frame_state
.
composite_state
.
get_surface_rect
(
&
tile
.
current_descriptor
.
local_valid_rect
&
tile
.
local_tile_rect
tile_cache
.
transform_index
)
.
to_i32
(
)
;
let
task_size
=
tile_cache
.
current_tile_size
;
let
batch_filter
=
BatchFilter
{
rect_in_pic_space
:
tile
.
local_dirty_rect
sub_slice_index
:
SubSliceIndex
:
:
new
(
sub_slice_index
)
}
;
let
render_task_id
=
frame_state
.
rg_builder
.
add
(
)
.
init
(
RenderTask
:
:
new
(
RenderTaskLocation
:
:
Static
{
surface
:
StaticRenderTaskSurface
:
:
PictureCache
{
surface
}
rect
:
task_size
.
into
(
)
}
RenderTaskKind
:
:
new_picture
(
task_size
tile_cache
.
current_tile_size
.
to_f32
(
)
pic_index
content_origin
surface_spatial_node_index
device_pixel_scale
Some
(
batch_filter
)
Some
(
scissor_rect
)
Some
(
valid_rect
)
)
)
)
;
surface_tasks
.
push
(
render_task_id
)
;
}
if
frame_context
.
fb_config
.
testing
{
debug_info
.
tiles
.
insert
(
tile
.
tile_offset
TileDebugInfo
:
:
Dirty
(
DirtyTileDebugInfo
{
local_valid_rect
:
tile
.
current_descriptor
.
local_valid_rect
local_dirty_rect
:
tile
.
local_dirty_rect
}
)
)
;
}
if
tile
.
device_dirty_rect
.
contains_box
(
&
tile
.
device_valid_rect
)
{
tile
.
device_fract_offset
=
tile_cache
.
device_fract_offset
;
}
}
let
surface
=
tile
.
surface
.
as_ref
(
)
.
expect
(
"
no
tile
surface
set
!
"
)
;
let
descriptor
=
CompositeTileDescriptor
{
surface_kind
:
surface
.
into
(
)
tile_id
:
tile
.
id
}
;
let
(
surface
is_opaque
)
=
match
surface
{
TileSurface
:
:
Color
{
color
}
=
>
{
(
CompositeTileSurface
:
:
Color
{
color
:
*
color
}
true
)
}
TileSurface
:
:
Clear
=
>
{
(
CompositeTileSurface
:
:
Clear
false
)
}
TileSurface
:
:
Texture
{
descriptor
.
.
}
=
>
{
let
surface
=
descriptor
.
resolve
(
frame_state
.
resource_cache
tile_cache
.
current_tile_size
)
;
(
CompositeTileSurface
:
:
Texture
{
surface
}
tile
.
is_opaque
)
}
}
;
if
is_opaque
{
sub_slice
.
opaque_tile_descriptors
.
push
(
descriptor
)
;
}
else
{
sub_slice
.
alpha_tile_descriptors
.
push
(
descriptor
)
;
}
let
composite_tile
=
CompositeTile
{
kind
:
tile_kind
(
&
surface
is_opaque
)
surface
local_rect
:
tile
.
local_tile_rect
local_valid_rect
:
tile
.
current_descriptor
.
local_valid_rect
local_dirty_rect
:
tile
.
local_dirty_rect
device_clip_rect
z_id
:
tile
.
z_id
transform_index
:
tile_cache
.
transform_index
}
;
sub_slice
.
composite_tiles
.
push
(
composite_tile
)
;
tile
.
local_dirty_rect
=
PictureRect
:
:
zero
(
)
;
tile
.
is_valid
=
true
;
}
sub_slice
.
opaque_tile_descriptors
.
sort_by_key
(
|
desc
|
desc
.
tile_id
)
;
sub_slice
.
alpha_tile_descriptors
.
sort_by_key
(
|
desc
|
desc
.
tile_id
)
;
}
if
frame_context
.
debug_flags
.
contains
(
DebugFlags
:
:
INVALIDATION_DBG
)
{
tile_cache
.
print
(
)
;
}
if
frame_context
.
fb_config
.
testing
{
frame_state
.
composite_state
.
picture_cache_debug
.
slices
.
insert
(
tile_cache
.
slice
debug_info
)
;
}
let
surface_raster_rect
=
map_pic_to_raster
.
map
(
&
surface_local_rect
)
.
expect
(
"
bug
:
unable
to
map
to
raster
"
)
;
let
surface_device_rect
=
surface_raster_rect
.
cast_unit
(
)
*
device_pixel_scale
;
frame_state
.
init_surface_tiled
(
surface_index
surface_tasks
surface_device_rect
)
;
}
Some
(
ref
mut
raster_config
)
=
>
{
let
pic_rect
=
self
.
precise_local_rect
.
to_box2d
(
)
.
cast_unit
(
)
;
let
mut
device_pixel_scale
=
frame_state
.
surfaces
[
raster_config
.
surface_index
.
0
]
.
device_pixel_scale
;
let
scale_factors
=
frame_state
.
surfaces
[
raster_config
.
surface_index
.
0
]
.
scale_factors
;
let
clip_inflation
=
match
raster_config
.
composite_mode
{
PictureCompositeMode
:
:
Filter
(
Filter
:
:
DropShadows
(
ref
shadows
)
)
=
>
{
let
mut
max_offset
=
vec2
(
0
.
0
0
.
0
)
;
let
mut
min_offset
=
vec2
(
0
.
0
0
.
0
)
;
for
shadow
in
shadows
{
let
offset
=
layout_vector_as_picture_vector
(
shadow
.
offset
)
;
max_offset
=
max_offset
.
max
(
offset
)
;
min_offset
=
min_offset
.
min
(
offset
)
;
}
let
raster_min
=
map_pic_to_raster
.
map_vector
(
min_offset
)
;
let
raster_max
=
map_pic_to_raster
.
map_vector
(
max_offset
)
;
let
world_min
=
map_raster_to_world
.
map_vector
(
raster_min
)
;
let
world_max
=
map_raster_to_world
.
map_vector
(
raster_max
)
;
SideOffsets2D
:
:
from_vectors_outer
(
-
world_max
.
max
(
vec2
(
0
.
0
0
.
0
)
)
-
world_min
.
min
(
vec2
(
0
.
0
0
.
0
)
)
)
}
_
=
>
SideOffsets2D
:
:
zero
(
)
}
;
let
(
mut
clipped
mut
unclipped
)
=
match
get_raster_rects
(
pic_rect
&
map_pic_to_raster
&
map_raster_to_world
raster_config
.
clipped_bounding_rect
.
outer_box
(
clip_inflation
)
device_pixel_scale
)
{
Some
(
info
)
=
>
info
None
=
>
{
return
None
}
}
;
let
transform
=
map_pic_to_raster
.
get_transform
(
)
;
fn
adjust_scale_for_max_surface_size
(
raster_config
:
&
RasterConfig
max_target_size
:
i32
pic_rect
:
PictureRect
map_pic_to_raster
:
&
SpaceMapper
<
PicturePixel
RasterPixel
>
map_raster_to_world
:
&
SpaceMapper
<
RasterPixel
WorldPixel
>
clipped_prim_bounding_rect
:
WorldRect
device_pixel_scale
:
&
mut
DevicePixelScale
device_rect
:
&
mut
DeviceRect
unclipped
:
&
mut
DeviceRect
)
-
>
Option
<
f32
>
{
let
limit
=
if
raster_config
.
establishes_raster_root
{
MAX_SURFACE_SIZE
}
else
{
max_target_size
as
f32
}
;
if
device_rect
.
width
(
)
>
limit
|
|
device_rect
.
height
(
)
>
limit
{
let
scale
=
(
limit
as
f32
-
1
.
0
)
/
(
f32
:
:
max
(
device_rect
.
width
(
)
device_rect
.
height
(
)
)
)
;
*
device_pixel_scale
=
*
device_pixel_scale
*
Scale
:
:
new
(
scale
)
;
let
new_device_rect
=
device_rect
.
to_f32
(
)
*
Scale
:
:
new
(
scale
)
;
*
device_rect
=
new_device_rect
.
round_out
(
)
;
*
unclipped
=
match
get_raster_rects
(
pic_rect
&
map_pic_to_raster
&
map_raster_to_world
clipped_prim_bounding_rect
*
device_pixel_scale
)
{
Some
(
info
)
=
>
info
.
1
None
=
>
{
return
None
}
}
;
Some
(
scale
)
}
else
{
None
}
}
let
primary_render_task_id
;
match
raster_config
.
composite_mode
{
PictureCompositeMode
:
:
TileCache
{
.
.
}
=
>
{
unreachable
!
(
"
handled
above
"
)
;
}
PictureCompositeMode
:
:
Filter
(
Filter
:
:
Blur
(
width
height
)
)
=
>
{
let
width_std_deviation
=
clamp_blur_radius
(
width
scale_factors
)
*
device_pixel_scale
.
0
;
let
height_std_deviation
=
clamp_blur_radius
(
height
scale_factors
)
*
device_pixel_scale
.
0
;
let
mut
blur_std_deviation
=
DeviceSize
:
:
new
(
width_std_deviation
*
scale_factors
.
0
height_std_deviation
*
scale_factors
.
1
)
;
let
mut
device_rect
=
if
self
.
options
.
inflate_if_required
{
let
inflation_factor
=
frame_state
.
surfaces
[
raster_config
.
surface_index
.
0
]
.
inflation_factor
;
let
inflation_factor
=
inflation_factor
*
device_pixel_scale
.
0
;
clipped
.
inflate
(
inflation_factor
*
scale_factors
.
0
inflation_factor
*
scale_factors
.
1
)
.
intersection
(
&
unclipped
)
.
unwrap
(
)
}
else
{
clipped
}
;
let
mut
original_size
=
device_rect
.
size
(
)
;
let
adjusted_size
=
BlurTask
:
:
adjusted_blur_source_size
(
device_rect
.
size
(
)
blur_std_deviation
)
;
device_rect
.
set_size
(
adjusted_size
)
;
if
let
Some
(
scale
)
=
adjust_scale_for_max_surface_size
(
raster_config
frame_context
.
fb_config
.
max_target_size
pic_rect
&
map_pic_to_raster
&
map_raster_to_world
raster_config
.
clipped_bounding_rect
&
mut
device_pixel_scale
&
mut
device_rect
&
mut
unclipped
)
{
blur_std_deviation
=
blur_std_deviation
*
scale
;
original_size
=
original_size
.
to_f32
(
)
*
scale
;
raster_config
.
root_scaling_factor
=
scale
;
}
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
device_rect
device_pixel_scale
)
;
let
task_size
=
device_rect
.
size
(
)
.
to_i32
(
)
;
let
picture_task_id
=
frame_state
.
rg_builder
.
add
(
)
.
init
(
RenderTask
:
:
new_dynamic
(
task_size
RenderTaskKind
:
:
new_picture
(
task_size
unclipped
.
size
(
)
pic_index
device_rect
.
min
surface_spatial_node_index
device_pixel_scale
None
None
None
)
)
.
with_uv_rect_kind
(
uv_rect_kind
)
)
;
let
blur_render_task_id
=
RenderTask
:
:
new_blur
(
blur_std_deviation
picture_task_id
frame_state
.
rg_builder
RenderTargetKind
:
:
Color
None
original_size
.
to_i32
(
)
)
;
primary_render_task_id
=
Some
(
blur_render_task_id
)
;
frame_state
.
init_surface_chain
(
raster_config
.
surface_index
blur_render_task_id
picture_task_id
parent_surface_index
device_rect
)
;
}
PictureCompositeMode
:
:
Filter
(
Filter
:
:
DropShadows
(
ref
shadows
)
)
=
>
{
let
mut
max_std_deviation
=
0
.
0
;
for
shadow
in
shadows
{
max_std_deviation
=
f32
:
:
max
(
max_std_deviation
shadow
.
blur_radius
)
;
}
max_std_deviation
=
clamp_blur_radius
(
max_std_deviation
scale_factors
)
*
device_pixel_scale
.
0
;
let
max_blur_range
=
max_std_deviation
*
BLUR_SAMPLE_SCALE
;
let
mut
device_rect
=
clipped
.
inflate
(
max_blur_range
*
scale_factors
.
0
max_blur_range
*
scale_factors
.
1
)
.
intersection
(
&
unclipped
)
.
unwrap
(
)
;
let
adjusted_size
=
BlurTask
:
:
adjusted_blur_source_size
(
device_rect
.
size
(
)
DeviceSize
:
:
new
(
max_std_deviation
*
scale_factors
.
0
max_std_deviation
*
scale_factors
.
1
)
)
;
device_rect
.
set_size
(
adjusted_size
)
;
if
let
Some
(
scale
)
=
adjust_scale_for_max_surface_size
(
raster_config
frame_context
.
fb_config
.
max_target_size
pic_rect
&
map_pic_to_raster
&
map_raster_to_world
raster_config
.
clipped_bounding_rect
&
mut
device_pixel_scale
&
mut
device_rect
&
mut
unclipped
)
{
raster_config
.
root_scaling_factor
=
scale
;
}
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
device_rect
device_pixel_scale
)
;
let
task_size
=
device_rect
.
size
(
)
.
to_i32
(
)
;
let
picture_task_id
=
frame_state
.
rg_builder
.
add
(
)
.
init
(
RenderTask
:
:
new_dynamic
(
task_size
RenderTaskKind
:
:
new_picture
(
task_size
unclipped
.
size
(
)
pic_index
device_rect
.
min
surface_spatial_node_index
device_pixel_scale
None
None
None
)
)
.
with_uv_rect_kind
(
uv_rect_kind
)
)
;
frame_state
.
add_child_render_task
(
parent_surface_index
picture_task_id
)
;
let
mut
blur_tasks
=
BlurTaskCache
:
:
default
(
)
;
self
.
extra_gpu_data_handles
.
resize
(
shadows
.
len
(
)
GpuCacheHandle
:
:
new
(
)
)
;
let
mut
blur_render_task_id
=
picture_task_id
;
for
shadow
in
shadows
{
let
blur_radius
=
clamp_blur_radius
(
shadow
.
blur_radius
scale_factors
)
*
device_pixel_scale
.
0
;
blur_render_task_id
=
RenderTask
:
:
new_blur
(
DeviceSize
:
:
new
(
blur_radius
*
scale_factors
.
0
blur_radius
*
scale_factors
.
1
)
picture_task_id
frame_state
.
rg_builder
RenderTargetKind
:
:
Color
Some
(
&
mut
blur_tasks
)
device_rect
.
size
(
)
.
to_i32
(
)
)
;
}
primary_render_task_id
=
Some
(
blur_render_task_id
)
;
self
.
secondary_render_task_id
=
Some
(
picture_task_id
)
;
frame_state
.
init_surface_chain
(
raster_config
.
surface_index
blur_render_task_id
picture_task_id
parent_surface_index
device_rect
)
;
}
PictureCompositeMode
:
:
MixBlend
(
mode
)
if
BlendMode
:
:
from_mix_blend_mode
(
mode
frame_context
.
fb_config
.
gpu_supports_advanced_blend
frame_context
.
fb_config
.
advanced_blend_is_coherent
frame_context
.
fb_config
.
dual_source_blending_is_enabled
&
&
frame_context
.
fb_config
.
dual_source_blending_is_supported
)
.
is_none
(
)
=
>
{
if
let
Some
(
scale
)
=
adjust_scale_for_max_surface_size
(
raster_config
frame_context
.
fb_config
.
max_target_size
pic_rect
&
map_pic_to_raster
&
map_raster_to_world
raster_config
.
clipped_bounding_rect
&
mut
device_pixel_scale
&
mut
clipped
&
mut
unclipped
)
{
raster_config
.
root_scaling_factor
=
scale
;
}
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
clipped
device_pixel_scale
)
;
let
parent_surface
=
&
frame_state
.
surfaces
[
parent_surface_index
.
0
]
;
let
parent_raster_spatial_node_index
=
parent_surface
.
raster_spatial_node_index
;
let
parent_device_pixel_scale
=
parent_surface
.
device_pixel_scale
;
let
map_pic_to_parent
=
SpaceMapper
:
:
new_with_target
(
parent_raster_spatial_node_index
self
.
spatial_node_index
RasterRect
:
:
max_rect
(
)
.
to_box2d
(
)
frame_context
.
spatial_tree
)
;
let
pic_in_raster_space
=
map_pic_to_parent
.
map
(
&
pic_rect
)
.
expect
(
"
bug
:
unable
to
map
mix
-
blend
content
into
parent
"
)
.
to_rect
(
)
;
let
backdrop_rect
=
raster_rect_to_device_pixels
(
pic_in_raster_space
parent_device_pixel_scale
)
;
let
parent_surface_rect
=
parent_surface
.
get_raster_rect
(
)
;
let
readback_task_id
=
match
backdrop_rect
.
intersection
(
&
parent_surface_rect
)
{
Some
(
available_rect
)
=
>
{
let
backdrop_uv
=
calculate_uv_rect_kind
(
&
pic_rect
&
map_pic_to_parent
.
get_transform
(
)
&
available_rect
parent_device_pixel_scale
)
;
frame_state
.
rg_builder
.
add
(
)
.
init
(
RenderTask
:
:
new_dynamic
(
available_rect
.
size
(
)
.
to_i32
(
)
RenderTaskKind
:
:
new_readback
(
Some
(
available_rect
.
min
)
)
)
.
with_uv_rect_kind
(
backdrop_uv
)
)
}
None
=
>
{
frame_state
.
rg_builder
.
add
(
)
.
init
(
RenderTask
:
:
new_dynamic
(
DeviceIntSize
:
:
new
(
16
16
)
RenderTaskKind
:
:
new_readback
(
None
)
)
)
}
}
;
frame_state
.
add_child_render_task
(
parent_surface_index
readback_task_id
)
;
self
.
secondary_render_task_id
=
Some
(
readback_task_id
)
;
let
task_size
=
clipped
.
size
(
)
.
to_i32
(
)
;
let
render_task_id
=
frame_state
.
rg_builder
.
add
(
)
.
init
(
RenderTask
:
:
new_dynamic
(
task_size
RenderTaskKind
:
:
new_picture
(
task_size
unclipped
.
size
(
)
pic_index
clipped
.
min
surface_spatial_node_index
device_pixel_scale
None
None
None
)
)
.
with_uv_rect_kind
(
uv_rect_kind
)
)
;
primary_render_task_id
=
Some
(
render_task_id
)
;
frame_state
.
init_surface
(
raster_config
.
surface_index
render_task_id
parent_surface_index
clipped
)
;
}
PictureCompositeMode
:
:
Filter
(
.
.
)
=
>
{
if
let
Some
(
scale
)
=
adjust_scale_for_max_surface_size
(
raster_config
frame_context
.
fb_config
.
max_target_size
pic_rect
&
map_pic_to_raster
&
map_raster_to_world
raster_config
.
clipped_bounding_rect
&
mut
device_pixel_scale
&
mut
clipped
&
mut
unclipped
)
{
raster_config
.
root_scaling_factor
=
scale
;
}
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
clipped
device_pixel_scale
)
;
let
task_size
=
clipped
.
size
(
)
.
to_i32
(
)
;
let
render_task_id
=
frame_state
.
rg_builder
.
add
(
)
.
init
(
RenderTask
:
:
new_dynamic
(
task_size
RenderTaskKind
:
:
new_picture
(
task_size
unclipped
.
size
(
)
pic_index
clipped
.
min
surface_spatial_node_index
device_pixel_scale
None
None
None
)
)
.
with_uv_rect_kind
(
uv_rect_kind
)
)
;
primary_render_task_id
=
Some
(
render_task_id
)
;
frame_state
.
init_surface
(
raster_config
.
surface_index
render_task_id
parent_surface_index
clipped
)
;
}
PictureCompositeMode
:
:
ComponentTransferFilter
(
.
.
)
=
>
{
if
let
Some
(
scale
)
=
adjust_scale_for_max_surface_size
(
raster_config
frame_context
.
fb_config
.
max_target_size
pic_rect
&
map_pic_to_raster
&
map_raster_to_world
raster_config
.
clipped_bounding_rect
&
mut
device_pixel_scale
&
mut
clipped
&
mut
unclipped
)
{
raster_config
.
root_scaling_factor
=
scale
;
}
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
clipped
device_pixel_scale
)
;
let
task_size
=
clipped
.
size
(
)
.
to_i32
(
)
;
let
render_task_id
=
frame_state
.
rg_builder
.
add
(
)
.
init
(
RenderTask
:
:
new_dynamic
(
task_size
RenderTaskKind
:
:
new_picture
(
task_size
unclipped
.
size
(
)
pic_index
clipped
.
min
surface_spatial_node_index
device_pixel_scale
None
None
None
)
)
.
with_uv_rect_kind
(
uv_rect_kind
)
)
;
primary_render_task_id
=
Some
(
render_task_id
)
;
frame_state
.
init_surface
(
raster_config
.
surface_index
render_task_id
parent_surface_index
clipped
)
;
}
PictureCompositeMode
:
:
MixBlend
(
.
.
)
|
PictureCompositeMode
:
:
Blit
(
_
)
=
>
{
if
let
Some
(
scale
)
=
adjust_scale_for_max_surface_size
(
raster_config
frame_context
.
fb_config
.
max_target_size
pic_rect
&
map_pic_to_raster
&
map_raster_to_world
raster_config
.
clipped_bounding_rect
&
mut
device_pixel_scale
&
mut
clipped
&
mut
unclipped
)
{
raster_config
.
root_scaling_factor
=
scale
;
}
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
clipped
device_pixel_scale
)
;
let
task_size
=
clipped
.
size
(
)
.
to_i32
(
)
;
let
render_task_id
=
frame_state
.
rg_builder
.
add
(
)
.
init
(
RenderTask
:
:
new_dynamic
(
task_size
RenderTaskKind
:
:
new_picture
(
task_size
unclipped
.
size
(
)
pic_index
clipped
.
min
surface_spatial_node_index
device_pixel_scale
None
None
None
)
)
.
with_uv_rect_kind
(
uv_rect_kind
)
)
;
primary_render_task_id
=
Some
(
render_task_id
)
;
frame_state
.
init_surface
(
raster_config
.
surface_index
render_task_id
parent_surface_index
clipped
)
;
}
PictureCompositeMode
:
:
SvgFilter
(
ref
primitives
ref
filter_datas
)
=
>
{
if
let
Some
(
scale
)
=
adjust_scale_for_max_surface_size
(
raster_config
frame_context
.
fb_config
.
max_target_size
pic_rect
&
map_pic_to_raster
&
map_raster_to_world
raster_config
.
clipped_bounding_rect
&
mut
device_pixel_scale
&
mut
clipped
&
mut
unclipped
)
{
raster_config
.
root_scaling_factor
=
scale
;
}
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
clipped
device_pixel_scale
)
;
let
task_size
=
clipped
.
size
(
)
.
to_i32
(
)
;
let
picture_task_id
=
frame_state
.
rg_builder
.
add
(
)
.
init
(
RenderTask
:
:
new_dynamic
(
task_size
RenderTaskKind
:
:
new_picture
(
task_size
unclipped
.
size
(
)
pic_index
clipped
.
min
surface_spatial_node_index
device_pixel_scale
None
None
None
)
)
.
with_uv_rect_kind
(
uv_rect_kind
)
)
;
let
filter_task_id
=
RenderTask
:
:
new_svg_filter
(
primitives
filter_datas
frame_state
.
rg_builder
clipped
.
size
(
)
.
to_i32
(
)
uv_rect_kind
picture_task_id
device_pixel_scale
)
;
primary_render_task_id
=
Some
(
filter_task_id
)
;
frame_state
.
init_surface_chain
(
raster_config
.
surface_index
filter_task_id
picture_task_id
parent_surface_index
clipped
)
;
}
}
self
.
primary_render_task_id
=
primary_render_task_id
;
frame_state
.
surfaces
[
raster_config
.
surface_index
.
0
]
.
device_pixel_scale
=
device_pixel_scale
;
}
None
=
>
{
}
}
;
#
[
cfg
(
feature
=
"
capture
"
)
]
{
if
frame_context
.
debug_flags
.
contains
(
DebugFlags
:
:
TILE_CACHE_LOGGING_DBG
)
{
if
let
Some
(
PictureCompositeMode
:
:
TileCache
{
slice_id
}
)
=
self
.
requested_composite_mode
{
if
let
Some
(
ref
tile_cache
)
=
tile_caches
.
get
(
&
slice_id
)
{
let
mut
tile_cache_tiny
=
TileCacheInstanceSerializer
{
slice
:
tile_cache
.
slice
tiles
:
FastHashMap
:
:
default
(
)
background_color
:
tile_cache
.
background_color
fract_offset
:
tile_cache
.
fract_offset
}
;
for
(
key
tile
)
in
&
tile_cache
.
sub_slices
.
first
(
)
.
unwrap
(
)
.
tiles
{
tile_cache_tiny
.
tiles
.
insert
(
*
key
TileSerializer
{
rect
:
tile
.
local_tile_rect
current_descriptor
:
tile
.
current_descriptor
.
clone
(
)
device_fract_offset
:
tile
.
device_fract_offset
id
:
tile
.
id
root
:
tile
.
root
.
clone
(
)
background_color
:
tile
.
background_color
invalidation_reason
:
tile
.
invalidation_reason
.
clone
(
)
}
)
;
}
let
text
=
ron
:
:
ser
:
:
to_string_pretty
(
&
tile_cache_tiny
Default
:
:
default
(
)
)
.
unwrap
(
)
;
tile_cache_logger
.
add
(
text
map_pic_to_world
.
get_transform
(
)
)
;
}
}
}
}
#
[
cfg
(
not
(
feature
=
"
capture
"
)
)
]
{
let
_tile_cache_logger
=
tile_cache_logger
;
}
let
state
=
PictureState
{
map_local_to_pic
map_pic_to_world
map_pic_to_raster
map_raster_to_world
plane_splitter
}
;
let
mut
dirty_region_count
=
0
;
if
let
Some
(
RasterConfig
{
composite_mode
:
PictureCompositeMode
:
:
TileCache
{
slice_id
}
.
.
}
)
=
self
.
raster_config
{
let
dirty_region
=
tile_caches
[
&
slice_id
]
.
dirty_region
.
clone
(
)
;
frame_state
.
push_dirty_region
(
dirty_region
)
;
dirty_region_count
+
=
1
;
}
if
inflation_factor
>
0
.
0
{
let
inflated_region
=
frame_state
.
current_dirty_region
(
)
.
inflate
(
inflation_factor
frame_context
.
spatial_tree
)
;
frame_state
.
push_dirty_region
(
inflated_region
)
;
dirty_region_count
+
=
1
;
}
let
subpixel_mode
=
match
self
.
raster_config
{
Some
(
RasterConfig
{
ref
composite_mode
.
.
}
)
=
>
{
let
subpixel_mode
=
match
composite_mode
{
PictureCompositeMode
:
:
TileCache
{
slice_id
}
=
>
{
tile_caches
[
&
slice_id
]
.
subpixel_mode
}
PictureCompositeMode
:
:
Blit
(
.
.
)
|
PictureCompositeMode
:
:
ComponentTransferFilter
(
.
.
)
|
PictureCompositeMode
:
:
Filter
(
.
.
)
|
PictureCompositeMode
:
:
MixBlend
(
.
.
)
|
PictureCompositeMode
:
:
SvgFilter
(
.
.
)
=
>
{
SubpixelMode
:
:
Deny
}
}
;
subpixel_mode
}
None
=
>
{
SubpixelMode
:
:
Allow
}
}
;
let
subpixel_mode
=
match
(
parent_subpixel_mode
subpixel_mode
)
{
(
SubpixelMode
:
:
Allow
SubpixelMode
:
:
Allow
)
=
>
{
SubpixelMode
:
:
Allow
}
(
SubpixelMode
:
:
Allow
SubpixelMode
:
:
Conditional
{
allowed_rect
}
)
=
>
{
SubpixelMode
:
:
Conditional
{
allowed_rect
}
}
(
SubpixelMode
:
:
Conditional
{
allowed_rect
}
SubpixelMode
:
:
Allow
)
=
>
{
SubpixelMode
:
:
Conditional
{
allowed_rect
}
}
(
SubpixelMode
:
:
Conditional
{
.
.
}
SubpixelMode
:
:
Conditional
{
.
.
}
)
=
>
{
unreachable
!
(
"
bug
:
only
top
level
picture
caches
have
conditional
subpixel
"
)
;
}
(
SubpixelMode
:
:
Deny
_
)
|
(
_
SubpixelMode
:
:
Deny
)
=
>
{
SubpixelMode
:
:
Deny
}
}
;
let
context
=
PictureContext
{
pic_index
apply_local_clip_rect
:
self
.
apply_local_clip_rect
raster_spatial_node_index
surface_spatial_node_index
surface_index
dirty_region_count
subpixel_mode
}
;
let
prim_list
=
mem
:
:
replace
(
&
mut
self
.
prim_list
PrimitiveList
:
:
empty
(
)
)
;
Some
(
(
context
state
prim_list
)
)
}
pub
fn
restore_context
(
&
mut
self
prim_list
:
PrimitiveList
context
:
PictureContext
state
:
PictureState
frame_state
:
&
mut
FrameBuildingState
)
{
for
_
in
0
.
.
context
.
dirty_region_count
{
frame_state
.
pop_dirty_region
(
)
;
}
self
.
prim_list
=
prim_list
;
self
.
state
=
Some
(
state
)
;
}
pub
fn
take_state
(
&
mut
self
)
-
>
PictureState
{
self
.
state
.
take
(
)
.
expect
(
"
bug
:
no
state
present
!
"
)
}
pub
fn
add_split_plane
(
splitter
:
&
mut
PlaneSplitter
spatial_tree
:
&
SpatialTree
prim_spatial_node_index
:
SpatialNodeIndex
original_local_rect
:
LayoutRect
combined_local_clip_rect
:
&
LayoutRect
world_rect
:
WorldRect
plane_split_anchor
:
PlaneSplitAnchor
)
-
>
bool
{
let
transform
=
spatial_tree
.
get_world_transform
(
prim_spatial_node_index
)
;
let
matrix
=
transform
.
clone
(
)
.
into_transform
(
)
.
cast
(
)
;
let
local_rect
=
match
original_local_rect
.
intersection
(
combined_local_clip_rect
)
{
Some
(
rect
)
=
>
rect
.
cast
(
)
None
=
>
return
false
}
;
let
world_rect
=
world_rect
.
cast
(
)
;
match
transform
{
CoordinateSpaceMapping
:
:
Local
=
>
{
let
polygon
=
Polygon
:
:
from_rect
(
local_rect
*
Scale
:
:
new
(
1
.
0
)
plane_split_anchor
)
;
splitter
.
add
(
polygon
)
;
}
CoordinateSpaceMapping
:
:
ScaleOffset
(
scale_offset
)
if
scale_offset
.
scale
=
=
Vector2D
:
:
new
(
1
.
0
1
.
0
)
=
>
{
let
inv_matrix
=
scale_offset
.
inverse
(
)
.
to_transform
(
)
.
cast
(
)
;
let
polygon
=
Polygon
:
:
from_transformed_rect_with_inverse
(
local_rect
&
matrix
&
inv_matrix
plane_split_anchor
)
.
unwrap
(
)
;
splitter
.
add
(
polygon
)
;
}
CoordinateSpaceMapping
:
:
ScaleOffset
(
_
)
|
CoordinateSpaceMapping
:
:
Transform
(
_
)
=
>
{
let
mut
clipper
=
Clipper
:
:
new
(
)
;
let
results
=
clipper
.
clip_transformed
(
Polygon
:
:
from_rect
(
local_rect
plane_split_anchor
)
&
matrix
Some
(
world_rect
.
to_rect
(
)
)
)
;
if
let
Ok
(
results
)
=
results
{
for
poly
in
results
{
splitter
.
add
(
poly
)
;
}
}
}
}
true
}
pub
fn
resolve_split_planes
(
&
mut
self
splitter
:
&
mut
PlaneSplitter
gpu_cache
:
&
mut
GpuCache
spatial_tree
:
&
SpatialTree
)
{
let
ordered
=
match
self
.
context_3d
{
Picture3DContext
:
:
In
{
root_data
:
Some
(
ref
mut
list
)
.
.
}
=
>
list
_
=
>
panic
!
(
"
Expected
to
find
3D
context
root
"
)
}
;
ordered
.
clear
(
)
;
let
sorted
=
splitter
.
sort
(
vec3
(
0
.
0
0
.
0
1
.
0
)
)
;
ordered
.
reserve
(
sorted
.
len
(
)
)
;
for
poly
in
sorted
{
let
cluster
=
&
self
.
prim_list
.
clusters
[
poly
.
anchor
.
cluster_index
]
;
let
spatial_node_index
=
cluster
.
spatial_node_index
;
let
transform
=
match
spatial_tree
.
get_world_transform
(
spatial_node_index
)
.
inverse
(
)
{
Some
(
transform
)
=
>
transform
.
into_transform
(
)
None
=
>
continue
}
;
let
local_points
=
[
transform
.
transform_point3d
(
poly
.
points
[
0
]
.
cast
(
)
)
transform
.
transform_point3d
(
poly
.
points
[
1
]
.
cast
(
)
)
transform
.
transform_point3d
(
poly
.
points
[
2
]
.
cast
(
)
)
transform
.
transform_point3d
(
poly
.
points
[
3
]
.
cast
(
)
)
]
;
if
local_points
.
iter
(
)
.
any
(
|
p
|
p
.
is_none
(
)
)
{
continue
;
}
let
p0
=
local_points
[
0
]
.
unwrap
(
)
;
let
p1
=
local_points
[
1
]
.
unwrap
(
)
;
let
p2
=
local_points
[
2
]
.
unwrap
(
)
;
let
p3
=
local_points
[
3
]
.
unwrap
(
)
;
let
gpu_blocks
=
[
[
p0
.
x
p0
.
y
p1
.
x
p1
.
y
]
.
into
(
)
[
p2
.
x
p2
.
y
p3
.
x
p3
.
y
]
.
into
(
)
]
;
let
gpu_handle
=
gpu_cache
.
push_per_frame_blocks
(
&
gpu_blocks
)
;
let
gpu_address
=
gpu_cache
.
get_address
(
&
gpu_handle
)
;
ordered
.
push
(
OrderedPictureChild
{
anchor
:
poly
.
anchor
spatial_node_index
gpu_address
}
)
;
}
}
fn
pre_update
(
&
mut
self
state
:
&
mut
PictureUpdateState
frame_context
:
&
FrameBuildingContext
)
-
>
Option
<
PrimitiveList
>
{
self
.
raster_config
=
None
;
if
!
self
.
resolve_scene_properties
(
frame_context
.
scene_properties
)
{
return
None
;
}
if
!
self
.
is_backface_visible
{
if
let
Picture3DContext
:
:
Out
=
self
.
context_3d
{
match
frame_context
.
spatial_tree
.
get_local_visible_face
(
self
.
spatial_node_index
)
{
VisibleFace
:
:
Front
=
>
{
}
VisibleFace
:
:
Back
=
>
return
None
}
}
}
let
actual_composite_mode
=
self
.
requested_composite_mode
.
clone
(
)
;
if
let
Some
(
composite_mode
)
=
actual_composite_mode
{
let
parent_raster_node_index
=
state
.
current_surface
(
)
.
raster_spatial_node_index
;
let
parent_device_pixel_scale
=
state
.
current_surface
(
)
.
device_pixel_scale
;
let
surface_spatial_node_index
=
self
.
spatial_node_index
;
let
surface_to_parent_transform
=
frame_context
.
spatial_tree
.
get_relative_transform
(
surface_spatial_node_index
parent_raster_node_index
)
;
let
mut
min_scale
=
1
.
0
;
let
establishes_raster_root
=
match
composite_mode
{
PictureCompositeMode
:
:
TileCache
{
.
.
}
=
>
{
min_scale
=
0
.
0
;
true
}
PictureCompositeMode
:
:
SvgFilter
(
.
.
)
=
>
{
true
}
PictureCompositeMode
:
:
MixBlend
(
.
.
)
|
PictureCompositeMode
:
:
Filter
(
.
.
)
|
PictureCompositeMode
:
:
ComponentTransferFilter
(
.
.
)
|
PictureCompositeMode
:
:
Blit
(
.
.
)
=
>
{
surface_to_parent_transform
.
is_perspective
(
)
}
}
;
let
(
raster_spatial_node_index
device_pixel_scale
)
=
if
establishes_raster_root
{
let
scale_factors
=
surface_to_parent_transform
.
scale_factors
(
)
;
let
scaling_factor
=
scale_factors
.
0
.
max
(
scale_factors
.
1
)
.
max
(
min_scale
)
;
let
device_pixel_scale
=
parent_device_pixel_scale
*
Scale
:
:
new
(
scaling_factor
)
;
(
surface_spatial_node_index
device_pixel_scale
)
}
else
{
(
parent_raster_node_index
parent_device_pixel_scale
)
}
;
let
scale_factors
=
frame_context
.
spatial_tree
.
get_relative_transform
(
surface_spatial_node_index
raster_spatial_node_index
)
.
scale_factors
(
)
;
let
mut
inflation_factor
=
0
.
0
;
if
self
.
options
.
inflate_if_required
{
match
composite_mode
{
PictureCompositeMode
:
:
Filter
(
Filter
:
:
Blur
(
width
height
)
)
=
>
{
let
blur_radius
=
f32
:
:
max
(
clamp_blur_radius
(
width
scale_factors
)
clamp_blur_radius
(
height
scale_factors
)
)
;
inflation_factor
=
blur_radius
*
BLUR_SAMPLE_SCALE
;
}
PictureCompositeMode
:
:
SvgFilter
(
ref
primitives
_
)
=
>
{
let
mut
max
=
0
.
0
;
for
primitive
in
primitives
{
if
let
FilterPrimitiveKind
:
:
Blur
(
ref
blur
)
=
primitive
.
kind
{
max
=
f32
:
:
max
(
max
blur
.
width
)
;
max
=
f32
:
:
max
(
max
blur
.
height
)
;
}
}
inflation_factor
=
clamp_blur_radius
(
max
scale_factors
)
*
BLUR_SAMPLE_SCALE
;
}
PictureCompositeMode
:
:
Filter
(
Filter
:
:
DropShadows
(
ref
shadows
)
)
=
>
{
let
mut
max_blur_radius
:
f32
=
0
.
0
;
for
shadow
in
shadows
{
max_blur_radius
=
max_blur_radius
.
max
(
shadow
.
blur_radius
)
;
}
inflation_factor
=
clamp_blur_radius
(
max_blur_radius
scale_factors
)
*
BLUR_SAMPLE_SCALE
;
}
_
=
>
{
}
}
}
let
surface
=
SurfaceInfo
:
:
new
(
surface_spatial_node_index
raster_spatial_node_index
inflation_factor
frame_context
.
global_screen_world_rect
&
frame_context
.
spatial_tree
device_pixel_scale
scale_factors
)
;
self
.
raster_config
=
Some
(
RasterConfig
{
composite_mode
establishes_raster_root
surface_index
:
state
.
push_surface
(
surface
)
root_scaling_factor
:
1
.
0
clipped_bounding_rect
:
WorldRect
:
:
zero
(
)
}
)
;
}
Some
(
mem
:
:
replace
(
&
mut
self
.
prim_list
PrimitiveList
:
:
empty
(
)
)
)
}
fn
post_update
(
&
mut
self
prim_list
:
PrimitiveList
state
:
&
mut
PictureUpdateState
frame_context
:
&
FrameBuildingContext
data_stores
:
&
mut
DataStores
)
{
self
.
prim_list
=
prim_list
;
let
surface
=
state
.
current_surface_mut
(
)
;
for
cluster
in
&
mut
self
.
prim_list
.
clusters
{
cluster
.
flags
.
remove
(
ClusterFlags
:
:
IS_VISIBLE
)
;
if
!
cluster
.
flags
.
contains
(
ClusterFlags
:
:
IS_BACKFACE_VISIBLE
)
{
if
let
Picture3DContext
:
:
In
{
ancestor_index
.
.
}
=
self
.
context_3d
{
let
mut
face
=
VisibleFace
:
:
Front
;
frame_context
.
spatial_tree
.
get_relative_transform_with_face
(
cluster
.
spatial_node_index
ancestor_index
Some
(
&
mut
face
)
)
;
if
face
=
=
VisibleFace
:
:
Back
{
continue
}
}
}
let
spatial_node
=
&
frame_context
.
spatial_tree
.
spatial_nodes
[
cluster
.
spatial_node_index
.
0
as
usize
]
;
if
!
spatial_node
.
invertible
{
continue
;
}
if
cluster
.
flags
.
contains
(
ClusterFlags
:
:
IS_BACKDROP_FILTER
)
{
let
backdrop_to_world_mapper
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
cluster
.
spatial_node_index
LayoutRect
:
:
max_rect
(
)
.
to_box2d
(
)
frame_context
.
spatial_tree
)
;
for
prim_instance
in
&
mut
self
.
prim_list
.
prim_instances
[
cluster
.
prim_range
(
)
]
{
match
prim_instance
.
kind
{
PrimitiveInstanceKind
:
:
Backdrop
{
data_handle
.
.
}
=
>
{
let
prim_data
=
&
mut
data_stores
.
backdrop
[
data_handle
]
;
let
spatial_node_index
=
prim_data
.
kind
.
spatial_node_index
;
let
prim_to_world_mapper
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
spatial_node_index
LayoutRect
:
:
max_rect
(
)
.
to_box2d
(
)
frame_context
.
spatial_tree
)
;
let
prim_rect
=
prim_to_world_mapper
.
map
(
&
prim_data
.
kind
.
border_rect
.
to_box2d
(
)
)
.
unwrap_or_else
(
|
|
LayoutRect
:
:
zero
(
)
.
to_box2d
(
)
)
;
let
prim_rect
=
backdrop_to_world_mapper
.
unmap
(
&
prim_rect
)
.
unwrap_or_else
(
|
|
LayoutRect
:
:
zero
(
)
.
to_box2d
(
)
)
.
to_rect
(
)
;
prim_data
.
common
.
prim_rect
=
prim_rect
;
prim_instance
.
clip_set
.
local_clip_rect
=
prim_rect
;
cluster
.
bounding_rect
=
cluster
.
bounding_rect
.
union
(
&
prim_rect
)
;
}
_
=
>
{
panic
!
(
"
BUG
:
unexpected
deferred
primitive
kind
for
cluster
updates
"
)
;
}
}
}
}
surface
.
map_local_to_surface
.
set_target_spatial_node
(
cluster
.
spatial_node_index
frame_context
.
spatial_tree
)
;
cluster
.
flags
.
insert
(
ClusterFlags
:
:
IS_VISIBLE
)
;
if
let
Some
(
cluster_rect
)
=
surface
.
map_local_to_surface
.
map
(
&
cluster
.
bounding_rect
.
to_box2d
(
)
)
{
surface
.
rect
=
surface
.
rect
.
union
(
&
cluster_rect
)
;
}
}
if
let
Some
(
ref
mut
raster_config
)
=
self
.
raster_config
{
let
surface
=
state
.
current_surface_mut
(
)
;
if
self
.
options
.
inflate_if_required
{
surface
.
rect
=
raster_config
.
composite_mode
.
inflate_picture_rect
(
surface
.
rect
surface
.
scale_factors
)
;
}
let
mut
surface_rect
=
surface
.
rect
.
to_rect
(
)
*
Scale
:
:
new
(
1
.
0
)
;
let
surface_index
=
state
.
pop_surface
(
)
;
debug_assert_eq
!
(
surface_index
raster_config
.
surface_index
)
;
self
.
estimated_local_rect
=
surface_rect
;
self
.
precise_local_rect
=
surface_rect
;
match
raster_config
.
composite_mode
{
PictureCompositeMode
:
:
Filter
(
Filter
:
:
DropShadows
(
ref
shadows
)
)
=
>
{
for
shadow
in
shadows
{
let
shadow_rect
=
self
.
estimated_local_rect
.
translate
(
shadow
.
offset
)
;
surface_rect
=
surface_rect
.
union
(
&
shadow_rect
)
;
}
}
_
=
>
{
}
}
let
parent_surface
=
state
.
current_surface_mut
(
)
;
parent_surface
.
map_local_to_surface
.
set_target_spatial_node
(
self
.
spatial_node_index
frame_context
.
spatial_tree
)
;
if
let
Some
(
parent_surface_rect
)
=
parent_surface
.
map_local_to_surface
.
map
(
&
surface_rect
.
to_box2d
(
)
)
{
parent_surface
.
rect
=
parent_surface
.
rect
.
union
(
&
parent_surface_rect
)
;
}
}
}
pub
fn
prepare_for_render
(
&
mut
self
frame_context
:
&
FrameBuildingContext
frame_state
:
&
mut
FrameBuildingState
data_stores
:
&
mut
DataStores
)
-
>
bool
{
let
mut
pic_state_for_children
=
self
.
take_state
(
)
;
if
let
Some
(
ref
mut
splitter
)
=
pic_state_for_children
.
plane_splitter
{
self
.
resolve_split_planes
(
splitter
&
mut
frame_state
.
gpu_cache
&
frame_context
.
spatial_tree
)
;
}
let
raster_config
=
match
self
.
raster_config
{
Some
(
ref
mut
raster_config
)
=
>
raster_config
None
=
>
{
return
true
}
}
;
match
raster_config
.
composite_mode
{
PictureCompositeMode
:
:
TileCache
{
.
.
}
=
>
{
}
PictureCompositeMode
:
:
Filter
(
Filter
:
:
Blur
(
.
.
)
)
=
>
{
}
PictureCompositeMode
:
:
Filter
(
Filter
:
:
DropShadows
(
ref
shadows
)
)
=
>
{
self
.
extra_gpu_data_handles
.
resize
(
shadows
.
len
(
)
GpuCacheHandle
:
:
new
(
)
)
;
for
(
shadow
extra_handle
)
in
shadows
.
iter
(
)
.
zip
(
self
.
extra_gpu_data_handles
.
iter_mut
(
)
)
{
if
let
Some
(
mut
request
)
=
frame_state
.
gpu_cache
.
request
(
extra_handle
)
{
let
shadow_rect
=
self
.
precise_local_rect
.
translate
(
shadow
.
offset
)
;
request
.
push
(
shadow
.
color
.
premultiplied
(
)
)
;
request
.
push
(
PremultipliedColorF
:
:
WHITE
)
;
request
.
push
(
[
self
.
precise_local_rect
.
size
.
width
self
.
precise_local_rect
.
size
.
height
0
.
0
0
.
0
]
)
;
request
.
push
(
shadow_rect
)
;
request
.
push
(
[
0
.
0
0
.
0
0
.
0
0
.
0
]
)
;
}
}
}
PictureCompositeMode
:
:
Filter
(
ref
filter
)
=
>
{
match
*
filter
{
Filter
:
:
ColorMatrix
(
ref
m
)
=
>
{
if
self
.
extra_gpu_data_handles
.
is_empty
(
)
{
self
.
extra_gpu_data_handles
.
push
(
GpuCacheHandle
:
:
new
(
)
)
;
}
if
let
Some
(
mut
request
)
=
frame_state
.
gpu_cache
.
request
(
&
mut
self
.
extra_gpu_data_handles
[
0
]
)
{
for
i
in
0
.
.
5
{
request
.
push
(
[
m
[
i
*
4
]
m
[
i
*
4
+
1
]
m
[
i
*
4
+
2
]
m
[
i
*
4
+
3
]
]
)
;
}
}
}
Filter
:
:
Flood
(
ref
color
)
=
>
{
if
self
.
extra_gpu_data_handles
.
is_empty
(
)
{
self
.
extra_gpu_data_handles
.
push
(
GpuCacheHandle
:
:
new
(
)
)
;
}
if
let
Some
(
mut
request
)
=
frame_state
.
gpu_cache
.
request
(
&
mut
self
.
extra_gpu_data_handles
[
0
]
)
{
request
.
push
(
color
.
to_array
(
)
)
;
}
}
_
=
>
{
}
}
}
PictureCompositeMode
:
:
ComponentTransferFilter
(
handle
)
=
>
{
let
filter_data
=
&
mut
data_stores
.
filter_data
[
handle
]
;
filter_data
.
update
(
frame_state
)
;
}
PictureCompositeMode
:
:
MixBlend
(
.
.
)
|
PictureCompositeMode
:
:
Blit
(
_
)
|
PictureCompositeMode
:
:
SvgFilter
(
.
.
)
=
>
{
}
}
true
}
}
fn
calculate_screen_uv
(
local_pos
:
&
PicturePoint
transform
:
&
PictureToRasterTransform
rendered_rect
:
&
DeviceRect
device_pixel_scale
:
DevicePixelScale
)
-
>
DeviceHomogeneousVector
{
let
raster_pos
=
transform
.
transform_point2d_homogeneous
(
*
local_pos
)
;
DeviceHomogeneousVector
:
:
new
(
(
raster_pos
.
x
*
device_pixel_scale
.
0
-
rendered_rect
.
min
.
x
*
raster_pos
.
w
)
/
rendered_rect
.
width
(
)
(
raster_pos
.
y
*
device_pixel_scale
.
0
-
rendered_rect
.
min
.
y
*
raster_pos
.
w
)
/
rendered_rect
.
height
(
)
0
.
0
raster_pos
.
w
)
}
fn
calculate_uv_rect_kind
(
pic_rect
:
&
PictureRect
transform
:
&
PictureToRasterTransform
rendered_rect
:
&
DeviceRect
device_pixel_scale
:
DevicePixelScale
)
-
>
UvRectKind
{
let
top_left
=
calculate_screen_uv
(
&
pic_rect
.
top_left
(
)
transform
&
rendered_rect
device_pixel_scale
)
;
let
top_right
=
calculate_screen_uv
(
&
pic_rect
.
top_right
(
)
transform
&
rendered_rect
device_pixel_scale
)
;
let
bottom_left
=
calculate_screen_uv
(
&
pic_rect
.
bottom_left
(
)
transform
&
rendered_rect
device_pixel_scale
)
;
let
bottom_right
=
calculate_screen_uv
(
&
pic_rect
.
bottom_right
(
)
transform
&
rendered_rect
device_pixel_scale
)
;
UvRectKind
:
:
Quad
{
top_left
top_right
bottom_left
bottom_right
}
}
fn
create_raster_mappers
(
surface_spatial_node_index
:
SpatialNodeIndex
raster_spatial_node_index
:
SpatialNodeIndex
world_rect
:
WorldRect
spatial_tree
:
&
SpatialTree
)
-
>
(
SpaceMapper
<
RasterPixel
WorldPixel
>
SpaceMapper
<
PicturePixel
RasterPixel
>
)
{
let
map_raster_to_world
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
raster_spatial_node_index
world_rect
spatial_tree
)
;
let
raster_bounds
=
map_raster_to_world
.
unmap
(
&
world_rect
)
.
unwrap_or_else
(
|
|
RasterRect
:
:
max_rect
(
)
.
to_box2d
(
)
)
;
let
map_pic_to_raster
=
SpaceMapper
:
:
new_with_target
(
raster_spatial_node_index
surface_spatial_node_index
raster_bounds
spatial_tree
)
;
(
map_raster_to_world
map_pic_to_raster
)
}
fn
get_transform_key
(
spatial_node_index
:
SpatialNodeIndex
cache_spatial_node_index
:
SpatialNodeIndex
spatial_tree
:
&
SpatialTree
)
-
>
TransformKey
{
let
transform
=
if
cache_spatial_node_index
>
=
spatial_node_index
{
spatial_tree
.
get_relative_transform
(
cache_spatial_node_index
spatial_node_index
)
}
else
{
spatial_tree
.
get_relative_transform
(
spatial_node_index
cache_spatial_node_index
)
}
;
transform
.
into
(
)
}
#
[
derive
(
Debug
Copy
Clone
Eq
Hash
PartialEq
)
]
struct
PrimitiveComparisonKey
{
prev_index
:
PrimitiveDependencyIndex
curr_index
:
PrimitiveDependencyIndex
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
ImageDependency
{
pub
key
:
ImageKey
pub
generation
:
ImageGeneration
}
impl
ImageDependency
{
pub
const
INVALID
:
ImageDependency
=
ImageDependency
{
key
:
ImageKey
:
:
DUMMY
generation
:
ImageGeneration
:
:
INVALID
}
;
}
struct
PrimitiveComparer
<
'
a
>
{
clip_comparer
:
CompareHelper
<
'
a
ItemUid
>
transform_comparer
:
CompareHelper
<
'
a
SpatialNodeKey
>
image_comparer
:
CompareHelper
<
'
a
ImageDependency
>
opacity_comparer
:
CompareHelper
<
'
a
OpacityBinding
>
color_comparer
:
CompareHelper
<
'
a
ColorBinding
>
resource_cache
:
&
'
a
ResourceCache
spatial_node_comparer
:
&
'
a
mut
SpatialNodeComparer
opacity_bindings
:
&
'
a
FastHashMap
<
PropertyBindingId
OpacityBindingInfo
>
color_bindings
:
&
'
a
FastHashMap
<
PropertyBindingId
ColorBindingInfo
>
}
impl
<
'
a
>
PrimitiveComparer
<
'
a
>
{
fn
new
(
prev
:
&
'
a
TileDescriptor
curr
:
&
'
a
TileDescriptor
resource_cache
:
&
'
a
ResourceCache
spatial_node_comparer
:
&
'
a
mut
SpatialNodeComparer
opacity_bindings
:
&
'
a
FastHashMap
<
PropertyBindingId
OpacityBindingInfo
>
color_bindings
:
&
'
a
FastHashMap
<
PropertyBindingId
ColorBindingInfo
>
)
-
>
Self
{
let
clip_comparer
=
CompareHelper
:
:
new
(
&
prev
.
clips
&
curr
.
clips
)
;
let
transform_comparer
=
CompareHelper
:
:
new
(
&
prev
.
transforms
&
curr
.
transforms
)
;
let
image_comparer
=
CompareHelper
:
:
new
(
&
prev
.
images
&
curr
.
images
)
;
let
opacity_comparer
=
CompareHelper
:
:
new
(
&
prev
.
opacity_bindings
&
curr
.
opacity_bindings
)
;
let
color_comparer
=
CompareHelper
:
:
new
(
&
prev
.
color_bindings
&
curr
.
color_bindings
)
;
PrimitiveComparer
{
clip_comparer
transform_comparer
image_comparer
opacity_comparer
color_comparer
resource_cache
spatial_node_comparer
opacity_bindings
color_bindings
}
}
fn
reset
(
&
mut
self
)
{
self
.
clip_comparer
.
reset
(
)
;
self
.
transform_comparer
.
reset
(
)
;
self
.
image_comparer
.
reset
(
)
;
self
.
opacity_comparer
.
reset
(
)
;
self
.
color_comparer
.
reset
(
)
;
}
fn
advance_prev
(
&
mut
self
prim
:
&
PrimitiveDescriptor
)
{
self
.
clip_comparer
.
advance_prev
(
prim
.
clip_dep_count
)
;
self
.
transform_comparer
.
advance_prev
(
prim
.
transform_dep_count
)
;
self
.
image_comparer
.
advance_prev
(
prim
.
image_dep_count
)
;
self
.
opacity_comparer
.
advance_prev
(
prim
.
opacity_binding_dep_count
)
;
self
.
color_comparer
.
advance_prev
(
prim
.
color_binding_dep_count
)
;
}
fn
advance_curr
(
&
mut
self
prim
:
&
PrimitiveDescriptor
)
{
self
.
clip_comparer
.
advance_curr
(
prim
.
clip_dep_count
)
;
self
.
transform_comparer
.
advance_curr
(
prim
.
transform_dep_count
)
;
self
.
image_comparer
.
advance_curr
(
prim
.
image_dep_count
)
;
self
.
opacity_comparer
.
advance_curr
(
prim
.
opacity_binding_dep_count
)
;
self
.
color_comparer
.
advance_curr
(
prim
.
color_binding_dep_count
)
;
}
fn
compare_prim
(
&
mut
self
prev
:
&
PrimitiveDescriptor
curr
:
&
PrimitiveDescriptor
opt_detail
:
Option
<
&
mut
PrimitiveCompareResultDetail
>
)
-
>
PrimitiveCompareResult
{
let
resource_cache
=
self
.
resource_cache
;
let
spatial_node_comparer
=
&
mut
self
.
spatial_node_comparer
;
let
opacity_bindings
=
self
.
opacity_bindings
;
let
color_bindings
=
self
.
color_bindings
;
if
prev
!
=
curr
{
if
let
Some
(
detail
)
=
opt_detail
{
*
detail
=
PrimitiveCompareResultDetail
:
:
Descriptor
{
old
:
*
prev
new
:
*
curr
}
;
}
return
PrimitiveCompareResult
:
:
Descriptor
;
}
let
mut
clip_result
=
CompareHelperResult
:
:
Equal
;
if
!
self
.
clip_comparer
.
is_same
(
prev
.
clip_dep_count
curr
.
clip_dep_count
|
prev
curr
|
{
prev
=
=
curr
}
if
opt_detail
.
is_some
(
)
{
Some
(
&
mut
clip_result
)
}
else
{
None
}
)
{
if
let
Some
(
detail
)
=
opt_detail
{
*
detail
=
PrimitiveCompareResultDetail
:
:
Clip
{
detail
:
clip_result
}
;
}
return
PrimitiveCompareResult
:
:
Clip
;
}
let
mut
transform_result
=
CompareHelperResult
:
:
Equal
;
if
!
self
.
transform_comparer
.
is_same
(
prev
.
transform_dep_count
curr
.
transform_dep_count
|
prev
curr
|
{
spatial_node_comparer
.
are_transforms_equivalent
(
prev
curr
)
}
if
opt_detail
.
is_some
(
)
{
Some
(
&
mut
transform_result
)
}
else
{
None
}
)
{
if
let
Some
(
detail
)
=
opt_detail
{
*
detail
=
PrimitiveCompareResultDetail
:
:
Transform
{
detail
:
transform_result
}
;
}
return
PrimitiveCompareResult
:
:
Transform
;
}
let
mut
image_result
=
CompareHelperResult
:
:
Equal
;
if
!
self
.
image_comparer
.
is_same
(
prev
.
image_dep_count
curr
.
image_dep_count
|
prev
curr
|
{
prev
=
=
curr
&
&
resource_cache
.
get_image_generation
(
curr
.
key
)
=
=
curr
.
generation
}
if
opt_detail
.
is_some
(
)
{
Some
(
&
mut
image_result
)
}
else
{
None
}
)
{
if
let
Some
(
detail
)
=
opt_detail
{
*
detail
=
PrimitiveCompareResultDetail
:
:
Image
{
detail
:
image_result
}
;
}
return
PrimitiveCompareResult
:
:
Image
;
}
let
mut
bind_result
=
CompareHelperResult
:
:
Equal
;
if
!
self
.
opacity_comparer
.
is_same
(
prev
.
opacity_binding_dep_count
curr
.
opacity_binding_dep_count
|
prev
curr
|
{
if
prev
!
=
curr
{
return
false
;
}
if
let
OpacityBinding
:
:
Binding
(
id
)
=
curr
{
if
opacity_bindings
.
get
(
id
)
.
map_or
(
true
|
info
|
info
.
changed
)
{
return
false
;
}
}
true
}
if
opt_detail
.
is_some
(
)
{
Some
(
&
mut
bind_result
)
}
else
{
None
}
)
{
if
let
Some
(
detail
)
=
opt_detail
{
*
detail
=
PrimitiveCompareResultDetail
:
:
OpacityBinding
{
detail
:
bind_result
}
;
}
return
PrimitiveCompareResult
:
:
OpacityBinding
;
}
let
mut
bind_result
=
CompareHelperResult
:
:
Equal
;
if
!
self
.
color_comparer
.
is_same
(
prev
.
color_binding_dep_count
curr
.
color_binding_dep_count
|
prev
curr
|
{
if
prev
!
=
curr
{
return
false
;
}
if
let
ColorBinding
:
:
Binding
(
id
)
=
curr
{
if
color_bindings
.
get
(
id
)
.
map_or
(
true
|
info
|
info
.
changed
)
{
return
false
;
}
}
true
}
if
opt_detail
.
is_some
(
)
{
Some
(
&
mut
bind_result
)
}
else
{
None
}
)
{
if
let
Some
(
detail
)
=
opt_detail
{
*
detail
=
PrimitiveCompareResultDetail
:
:
ColorBinding
{
detail
:
bind_result
}
;
}
return
PrimitiveCompareResult
:
:
ColorBinding
;
}
PrimitiveCompareResult
:
:
Equal
}
}
#
[
cfg_attr
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
derive
(
Clone
)
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
enum
TileNodeKind
{
Leaf
{
#
[
cfg_attr
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
serde
(
skip
)
)
]
prev_indices
:
Vec
<
PrimitiveDependencyIndex
>
#
[
cfg_attr
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
serde
(
skip
)
)
]
curr_indices
:
Vec
<
PrimitiveDependencyIndex
>
#
[
cfg_attr
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
serde
(
skip
)
)
]
dirty_tracker
:
u64
#
[
cfg_attr
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
serde
(
skip
)
)
]
frames_since_modified
:
usize
}
Node
{
children
:
Vec
<
TileNode
>
}
}
#
[
derive
(
Copy
Clone
PartialEq
Debug
)
]
enum
TileModification
{
Split
Merge
}
#
[
cfg_attr
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
derive
(
Clone
)
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
TileNode
{
pub
kind
:
TileNodeKind
pub
rect
:
PictureBox2D
}
impl
TileNode
{
fn
new_leaf
(
curr_indices
:
Vec
<
PrimitiveDependencyIndex
>
)
-
>
Self
{
TileNode
{
kind
:
TileNodeKind
:
:
Leaf
{
prev_indices
:
Vec
:
:
new
(
)
curr_indices
dirty_tracker
:
0
frames_since_modified
:
0
}
rect
:
PictureBox2D
:
:
zero
(
)
}
}
fn
draw_debug_rects
(
&
self
pic_to_world_mapper
:
&
SpaceMapper
<
PicturePixel
WorldPixel
>
is_opaque
:
bool
local_valid_rect
:
PictureRect
scratch
:
&
mut
PrimitiveScratchBuffer
global_device_pixel_scale
:
DevicePixelScale
)
{
match
self
.
kind
{
TileNodeKind
:
:
Leaf
{
dirty_tracker
.
.
}
=
>
{
let
color
=
if
(
dirty_tracker
&
1
)
!
=
0
{
debug_colors
:
:
RED
}
else
if
is_opaque
{
debug_colors
:
:
GREEN
}
else
{
debug_colors
:
:
YELLOW
}
;
if
let
Some
(
local_rect
)
=
local_valid_rect
.
intersection
(
&
self
.
rect
)
{
let
world_rect
=
pic_to_world_mapper
.
map
(
&
local_rect
)
.
unwrap
(
)
;
let
device_rect
=
world_rect
*
global_device_pixel_scale
;
let
outer_color
=
color
.
scale_alpha
(
0
.
3
)
;
let
inner_color
=
outer_color
.
scale_alpha
(
0
.
5
)
;
scratch
.
push_debug_rect
(
device_rect
.
inflate
(
-
3
.
0
-
3
.
0
)
outer_color
inner_color
)
;
}
}
TileNodeKind
:
:
Node
{
ref
children
.
.
}
=
>
{
for
child
in
children
.
iter
(
)
{
child
.
draw_debug_rects
(
pic_to_world_mapper
is_opaque
local_valid_rect
scratch
global_device_pixel_scale
)
;
}
}
}
}
fn
get_child_rects
(
rect
:
&
PictureBox2D
result
:
&
mut
[
PictureBox2D
;
4
]
)
{
let
p0
=
rect
.
min
;
let
p1
=
rect
.
max
;
let
pc
=
p0
+
rect
.
size
(
)
*
0
.
5
;
*
result
=
[
PictureBox2D
:
:
new
(
p0
pc
)
PictureBox2D
:
:
new
(
PicturePoint
:
:
new
(
pc
.
x
p0
.
y
)
PicturePoint
:
:
new
(
p1
.
x
pc
.
y
)
)
PictureBox2D
:
:
new
(
PicturePoint
:
:
new
(
p0
.
x
pc
.
y
)
PicturePoint
:
:
new
(
pc
.
x
p1
.
y
)
)
PictureBox2D
:
:
new
(
pc
p1
)
]
;
}
fn
clear
(
&
mut
self
rect
:
PictureBox2D
)
{
self
.
rect
=
rect
;
match
self
.
kind
{
TileNodeKind
:
:
Leaf
{
ref
mut
prev_indices
ref
mut
curr_indices
ref
mut
dirty_tracker
ref
mut
frames_since_modified
}
=
>
{
mem
:
:
swap
(
prev_indices
curr_indices
)
;
curr_indices
.
clear
(
)
;
*
dirty_tracker
=
*
dirty_tracker
<
<
1
;
*
frames_since_modified
+
=
1
;
}
TileNodeKind
:
:
Node
{
ref
mut
children
.
.
}
=
>
{
let
mut
child_rects
=
[
PictureBox2D
:
:
zero
(
)
;
4
]
;
TileNode
:
:
get_child_rects
(
&
rect
&
mut
child_rects
)
;
assert_eq
!
(
child_rects
.
len
(
)
children
.
len
(
)
)
;
for
(
child
rect
)
in
children
.
iter_mut
(
)
.
zip
(
child_rects
.
iter
(
)
)
{
child
.
clear
(
*
rect
)
;
}
}
}
}
fn
add_prim
(
&
mut
self
index
:
PrimitiveDependencyIndex
prim_rect
:
&
PictureBox2D
)
{
match
self
.
kind
{
TileNodeKind
:
:
Leaf
{
ref
mut
curr_indices
.
.
}
=
>
{
curr_indices
.
push
(
index
)
;
}
TileNodeKind
:
:
Node
{
ref
mut
children
.
.
}
=
>
{
for
child
in
children
.
iter_mut
(
)
{
if
child
.
rect
.
intersects
(
prim_rect
)
{
child
.
add_prim
(
index
prim_rect
)
;
}
}
}
}
}
fn
maybe_merge_or_split
(
&
mut
self
level
:
i32
curr_prims
:
&
[
PrimitiveDescriptor
]
max_split_levels
:
i32
)
{
let
mut
tile_mod
=
None
;
fn
get_dirty_frames
(
dirty_tracker
:
u64
frames_since_modified
:
usize
)
-
>
Option
<
u32
>
{
if
frames_since_modified
>
64
{
Some
(
dirty_tracker
.
count_ones
(
)
)
}
else
{
None
}
}
match
self
.
kind
{
TileNodeKind
:
:
Leaf
{
dirty_tracker
frames_since_modified
.
.
}
=
>
{
if
level
<
max_split_levels
{
if
let
Some
(
dirty_frames
)
=
get_dirty_frames
(
dirty_tracker
frames_since_modified
)
{
if
dirty_frames
>
32
{
tile_mod
=
Some
(
TileModification
:
:
Split
)
;
}
}
}
}
TileNodeKind
:
:
Node
{
ref
children
.
.
}
=
>
{
let
mut
static_count
=
0
;
let
mut
changing_count
=
0
;
for
child
in
children
{
if
let
TileNodeKind
:
:
Leaf
{
dirty_tracker
frames_since_modified
.
.
}
=
child
.
kind
{
if
let
Some
(
dirty_frames
)
=
get_dirty_frames
(
dirty_tracker
frames_since_modified
)
{
if
dirty_frames
=
=
0
{
static_count
+
=
1
;
}
else
if
dirty_frames
=
=
64
{
changing_count
+
=
1
;
}
}
}
if
static_count
=
=
4
|
|
changing_count
=
=
4
{
tile_mod
=
Some
(
TileModification
:
:
Merge
)
;
}
}
}
}
match
tile_mod
{
Some
(
TileModification
:
:
Split
)
=
>
{
let
curr_indices
=
match
self
.
kind
{
TileNodeKind
:
:
Node
{
.
.
}
=
>
{
unreachable
!
(
"
bug
-
only
leaves
can
split
"
)
;
}
TileNodeKind
:
:
Leaf
{
ref
mut
curr_indices
.
.
}
=
>
{
curr_indices
.
take
(
)
}
}
;
let
mut
child_rects
=
[
PictureBox2D
:
:
zero
(
)
;
4
]
;
TileNode
:
:
get_child_rects
(
&
self
.
rect
&
mut
child_rects
)
;
let
mut
child_indices
=
[
Vec
:
:
new
(
)
Vec
:
:
new
(
)
Vec
:
:
new
(
)
Vec
:
:
new
(
)
]
;
for
index
in
curr_indices
{
let
prim
=
&
curr_prims
[
index
.
0
as
usize
]
;
for
(
child_rect
indices
)
in
child_rects
.
iter
(
)
.
zip
(
child_indices
.
iter_mut
(
)
)
{
if
prim
.
prim_clip_box
.
intersects
(
child_rect
)
{
indices
.
push
(
index
)
;
}
}
}
let
children
=
child_indices
.
iter_mut
(
)
.
map
(
|
i
|
TileNode
:
:
new_leaf
(
mem
:
:
replace
(
i
Vec
:
:
new
(
)
)
)
)
.
collect
(
)
;
self
.
kind
=
TileNodeKind
:
:
Node
{
children
}
;
}
Some
(
TileModification
:
:
Merge
)
=
>
{
let
merged_indices
=
match
self
.
kind
{
TileNodeKind
:
:
Node
{
ref
mut
children
.
.
}
=
>
{
let
mut
merged_indices
=
Vec
:
:
new
(
)
;
for
child
in
children
.
iter
(
)
{
let
child_indices
=
match
child
.
kind
{
TileNodeKind
:
:
Leaf
{
ref
curr_indices
.
.
}
=
>
{
curr_indices
}
TileNodeKind
:
:
Node
{
.
.
}
=
>
{
unreachable
!
(
"
bug
:
child
is
not
a
leaf
"
)
;
}
}
;
merged_indices
.
extend_from_slice
(
child_indices
)
;
}
merged_indices
.
sort
(
)
;
merged_indices
.
dedup
(
)
;
merged_indices
}
TileNodeKind
:
:
Leaf
{
.
.
}
=
>
{
unreachable
!
(
"
bug
-
trying
to
merge
a
leaf
"
)
;
}
}
;
self
.
kind
=
TileNodeKind
:
:
Leaf
{
prev_indices
:
Vec
:
:
new
(
)
curr_indices
:
merged_indices
dirty_tracker
:
0
frames_since_modified
:
0
}
;
}
None
=
>
{
if
let
TileNodeKind
:
:
Node
{
ref
mut
children
.
.
}
=
self
.
kind
{
for
child
in
children
.
iter_mut
(
)
{
child
.
maybe_merge_or_split
(
level
+
1
curr_prims
max_split_levels
)
;
}
}
}
}
}
fn
update_dirty_rects
(
&
mut
self
prev_prims
:
&
[
PrimitiveDescriptor
]
curr_prims
:
&
[
PrimitiveDescriptor
]
prim_comparer
:
&
mut
PrimitiveComparer
dirty_rect
:
&
mut
PictureBox2D
compare_cache
:
&
mut
FastHashMap
<
PrimitiveComparisonKey
PrimitiveCompareResult
>
invalidation_reason
:
&
mut
Option
<
InvalidationReason
>
frame_context
:
&
FrameVisibilityContext
)
{
match
self
.
kind
{
TileNodeKind
:
:
Node
{
ref
mut
children
.
.
}
=
>
{
for
child
in
children
.
iter_mut
(
)
{
child
.
update_dirty_rects
(
prev_prims
curr_prims
prim_comparer
dirty_rect
compare_cache
invalidation_reason
frame_context
)
;
}
}
TileNodeKind
:
:
Leaf
{
ref
prev_indices
ref
curr_indices
ref
mut
dirty_tracker
.
.
}
=
>
{
if
prev_indices
.
len
(
)
=
=
curr_indices
.
len
(
)
{
let
mut
prev_i0
=
0
;
let
mut
prev_i1
=
0
;
prim_comparer
.
reset
(
)
;
for
(
prev_index
curr_index
)
in
prev_indices
.
iter
(
)
.
zip
(
curr_indices
.
iter
(
)
)
{
let
i0
=
prev_index
.
0
as
usize
;
let
i1
=
curr_index
.
0
as
usize
;
for
i
in
prev_i0
.
.
i0
{
prim_comparer
.
advance_prev
(
&
prev_prims
[
i
]
)
;
}
for
i
in
prev_i1
.
.
i1
{
prim_comparer
.
advance_curr
(
&
curr_prims
[
i
]
)
;
}
let
key
=
PrimitiveComparisonKey
{
prev_index
:
*
prev_index
curr_index
:
*
curr_index
}
;
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
let
mut
compare_detail
=
PrimitiveCompareResultDetail
:
:
Equal
;
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
let
prim_compare_result_detail
=
if
frame_context
.
debug_flags
.
contains
(
DebugFlags
:
:
TILE_CACHE_LOGGING_DBG
)
{
Some
(
&
mut
compare_detail
)
}
else
{
None
}
;
#
[
cfg
(
not
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
)
]
let
compare_detail
=
PrimitiveCompareResultDetail
:
:
Equal
;
#
[
cfg
(
not
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
)
]
let
prim_compare_result_detail
=
None
;
let
prim_compare_result
=
*
compare_cache
.
entry
(
key
)
.
or_insert_with
(
|
|
{
let
prev
=
&
prev_prims
[
i0
]
;
let
curr
=
&
curr_prims
[
i1
]
;
prim_comparer
.
compare_prim
(
prev
curr
prim_compare_result_detail
)
}
)
;
if
prim_compare_result
!
=
PrimitiveCompareResult
:
:
Equal
{
if
invalidation_reason
.
is_none
(
)
{
*
invalidation_reason
=
Some
(
InvalidationReason
:
:
Content
{
prim_compare_result
prim_compare_result_detail
:
Some
(
compare_detail
)
}
)
;
}
*
dirty_rect
=
self
.
rect
.
union
(
dirty_rect
)
;
*
dirty_tracker
=
*
dirty_tracker
|
1
;
break
;
}
prev_i0
=
i0
;
prev_i1
=
i1
;
}
}
else
{
if
invalidation_reason
.
is_none
(
)
{
#
[
cfg
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
]
{
if
frame_context
.
debug_flags
.
contains
(
DebugFlags
:
:
TILE_CACHE_LOGGING_DBG
)
{
let
old
=
prev_indices
.
iter
(
)
.
map
(
|
i
|
prev_prims
[
i
.
0
as
usize
]
.
prim_uid
)
.
collect
(
)
;
let
new
=
curr_indices
.
iter
(
)
.
map
(
|
i
|
curr_prims
[
i
.
0
as
usize
]
.
prim_uid
)
.
collect
(
)
;
*
invalidation_reason
=
Some
(
InvalidationReason
:
:
PrimCount
{
old
:
Some
(
old
)
new
:
Some
(
new
)
}
)
;
}
else
{
*
invalidation_reason
=
Some
(
InvalidationReason
:
:
PrimCount
{
old
:
None
new
:
None
}
)
;
}
}
#
[
cfg
(
not
(
any
(
feature
=
"
capture
"
feature
=
"
replay
"
)
)
)
]
{
*
invalidation_reason
=
Some
(
InvalidationReason
:
:
PrimCount
{
old
:
None
new
:
None
}
)
;
}
}
*
dirty_rect
=
self
.
rect
.
union
(
dirty_rect
)
;
*
dirty_tracker
=
*
dirty_tracker
|
1
;
}
}
}
}
}
impl
CompositeState
{
pub
fn
destroy_native_tiles
<
'
a
I
:
Iterator
<
Item
=
&
'
a
mut
Box
<
Tile
>
>
>
(
&
mut
self
tiles_iter
:
I
resource_cache
:
&
mut
ResourceCache
)
{
if
let
CompositorKind
:
:
Native
{
.
.
}
=
self
.
compositor_kind
{
for
tile
in
tiles_iter
{
if
let
Some
(
TileSurface
:
:
Texture
{
descriptor
:
SurfaceTextureDescriptor
:
:
Native
{
ref
mut
id
.
.
}
.
.
}
)
=
tile
.
surface
{
if
let
Some
(
id
)
=
id
.
take
(
)
{
resource_cache
.
destroy_compositor_tile
(
id
)
;
}
}
}
}
}
}
pub
fn
get_raster_rects
(
pic_rect
:
PictureRect
map_to_raster
:
&
SpaceMapper
<
PicturePixel
RasterPixel
>
map_to_world
:
&
SpaceMapper
<
RasterPixel
WorldPixel
>
prim_bounding_rect
:
WorldRect
device_pixel_scale
:
DevicePixelScale
)
-
>
Option
<
(
DeviceRect
DeviceRect
)
>
{
let
unclipped_raster_rect
=
map_to_raster
.
map
(
&
pic_rect
)
?
;
let
unclipped
=
raster_rect_to_device_pixels
(
unclipped_raster_rect
.
to_rect
(
)
device_pixel_scale
)
;
let
unclipped_world_rect
=
map_to_world
.
map
(
&
unclipped_raster_rect
)
?
;
let
clipped_world_rect
=
unclipped_world_rect
.
intersection
(
&
prim_bounding_rect
)
?
;
let
clipped_raster_rect
=
match
map_to_world
.
unmap
(
&
clipped_world_rect
)
{
Some
(
rect
)
=
>
rect
.
intersection
(
&
unclipped_raster_rect
)
?
None
=
>
return
Some
(
(
unclipped
unclipped
)
)
}
;
let
clipped
=
raster_rect_to_device_pixels
(
clipped_raster_rect
.
to_rect
(
)
device_pixel_scale
)
;
if
clipped
.
is_empty
(
)
{
return
None
;
}
Some
(
(
clipped
unclipped
)
)
}
fn
get_relative_scale_offset
(
child_spatial_node_index
:
SpatialNodeIndex
parent_spatial_node_index
:
SpatialNodeIndex
spatial_tree
:
&
SpatialTree
)
-
>
ScaleOffset
{
let
transform
=
spatial_tree
.
get_relative_transform
(
child_spatial_node_index
parent_spatial_node_index
)
;
match
transform
{
CoordinateSpaceMapping
:
:
Local
=
>
ScaleOffset
:
:
identity
(
)
CoordinateSpaceMapping
:
:
ScaleOffset
(
scale_offset
)
=
>
scale_offset
CoordinateSpaceMapping
:
:
Transform
(
m
)
=
>
{
ScaleOffset
:
:
from_transform
(
&
m
)
.
expect
(
"
bug
:
pictures
caches
don
'
t
support
complex
transforms
"
)
}
}
}
