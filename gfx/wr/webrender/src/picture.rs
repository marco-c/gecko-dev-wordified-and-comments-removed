use
api
:
:
{
DeviceRect
FilterOp
MixBlendMode
PipelineId
PremultipliedColorF
PictureRect
PicturePoint
}
;
use
api
:
:
{
DeviceIntRect
DevicePoint
LayoutRect
PictureToRasterTransform
LayoutPixel
PropertyBinding
PropertyBindingId
}
;
use
api
:
:
{
DevicePixelScale
RasterRect
RasterSpace
DeviceIntPoint
ColorF
ImageKey
DirtyRect
}
;
use
api
:
:
{
PicturePixel
RasterPixel
WorldPixel
WorldRect
ImageFormat
ImageDescriptor
LayoutSize
LayoutPoint
}
;
use
box_shadow
:
:
{
BLUR_SAMPLE_SCALE
}
;
use
clip
:
:
{
ClipNodeCollector
ClipStore
ClipChainId
ClipChainNode
}
;
use
clip_scroll_tree
:
:
{
ROOT_SPATIAL_NODE_INDEX
ClipScrollTree
SpatialNodeIndex
}
;
use
device
:
:
TextureFilter
;
use
euclid
:
:
{
TypedScale
vec3
TypedRect
TypedPoint2D
TypedSize2D
}
;
use
euclid
:
:
approxeq
:
:
ApproxEq
;
use
intern
:
:
ItemUid
;
use
internal_types
:
:
{
FastHashMap
PlaneSplitter
}
;
use
frame_builder
:
:
{
FrameBuildingContext
FrameBuildingState
PictureState
PictureContext
}
;
use
gpu_cache
:
:
{
GpuCache
GpuCacheAddress
GpuCacheHandle
}
;
use
gpu_types
:
:
{
TransformPalette
TransformPaletteId
UvRectKind
}
;
use
internal_types
:
:
FastHashSet
;
use
plane_split
:
:
{
Clipper
Polygon
Splitter
}
;
use
prim_store
:
:
{
PictureIndex
PrimitiveInstance
SpaceMapper
VisibleFace
PrimitiveInstanceKind
}
;
use
prim_store
:
:
{
get_raster_rects
CoordinateSpaceMapping
PointKey
}
;
use
prim_store
:
:
{
OpacityBindingStorage
PrimitiveTemplateKind
ImageInstanceStorage
OpacityBindingIndex
SizeKey
}
;
use
print_tree
:
:
PrintTreePrinter
;
use
render_backend
:
:
FrameResources
;
use
render_task
:
:
{
ClearMode
RenderTask
RenderTaskCacheEntryHandle
TileBlit
}
;
use
render_task
:
:
{
RenderTaskCacheKey
RenderTaskCacheKeyKind
RenderTaskId
RenderTaskLocation
}
;
use
resource_cache
:
:
ResourceCache
;
use
scene
:
:
{
FilterOpHelpers
SceneProperties
}
;
use
scene_builder
:
:
DocumentResources
;
use
smallvec
:
:
SmallVec
;
use
surface
:
:
{
SurfaceDescriptor
TransformKey
}
;
use
std
:
:
{
mem
ops
}
;
use
texture_cache
:
:
{
Eviction
TextureCacheHandle
}
;
use
tiling
:
:
RenderTargetKind
;
use
util
:
:
{
TransformedRectKind
MatrixHelpers
MaxRect
RectHelpers
}
;
struct
PictureInfo
{
spatial_node_index
:
SpatialNodeIndex
}
pub
struct
RetainedTiles
{
pub
tiles
:
FastHashMap
<
TileDescriptor
TextureCacheHandle
>
}
impl
RetainedTiles
{
pub
fn
new
(
)
-
>
Self
{
RetainedTiles
{
tiles
:
FastHashMap
:
:
default
(
)
}
}
}
#
[
derive
(
Hash
Clone
Copy
Debug
Eq
PartialEq
Ord
PartialOrd
)
]
pub
struct
TileCoordinate
;
pub
type
TileOffset
=
TypedPoint2D
<
i32
TileCoordinate
>
;
pub
type
TileSize
=
TypedSize2D
<
i32
TileCoordinate
>
;
pub
type
TileRect
=
TypedRect
<
i32
TileCoordinate
>
;
pub
const
TILE_SIZE_WIDTH
:
i32
=
1024
;
pub
const
TILE_SIZE_HEIGHT
:
i32
=
256
;
const
MAX_PICTURE_SIZE
:
f32
=
65536
.
0
;
#
[
derive
(
Debug
)
]
pub
struct
TileTransformInfo
{
spatial_node_index
:
SpatialNodeIndex
changed
:
bool
}
#
[
derive
(
Debug
)
]
pub
struct
GlobalTransformInfo
{
current
:
Option
<
TransformKey
>
changed
:
bool
}
#
[
derive
(
Debug
)
]
pub
struct
OpacityBindingInfo
{
value
:
f32
changed
:
bool
}
#
[
derive
(
Debug
)
]
pub
struct
Tile
{
opacity_bindings
:
FastHashSet
<
PropertyBindingId
>
image_keys
:
FastHashSet
<
ImageKey
>
is_valid
:
bool
is_cacheable
:
bool
pub
in_use
:
bool
pub
is_visible
:
bool
pub
handle
:
TextureCacheHandle
tile_transform_map
:
FastHashMap
<
SpatialNodeIndex
TileTransformIndex
>
transform_info
:
Vec
<
TileTransformInfo
>
descriptor
:
TileDescriptor
}
impl
Tile
{
fn
new
(
tile_offset
:
TileOffset
local_tile_size
:
SizeKey
raster_transform
:
TransformKey
)
-
>
Self
{
Tile
{
opacity_bindings
:
FastHashSet
:
:
default
(
)
image_keys
:
FastHashSet
:
:
default
(
)
is_valid
:
false
is_visible
:
false
is_cacheable
:
true
in_use
:
false
handle
:
TextureCacheHandle
:
:
invalid
(
)
descriptor
:
TileDescriptor
:
:
new
(
tile_offset
local_tile_size
raster_transform
)
tile_transform_map
:
FastHashMap
:
:
default
(
)
transform_info
:
Vec
:
:
new
(
)
}
}
fn
push_transform_dependency
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
surface_spatial_node_index
:
SpatialNodeIndex
clip_scroll_tree
:
&
ClipScrollTree
global_transforms
:
&
mut
[
GlobalTransformInfo
]
)
{
if
spatial_node_index
=
=
surface_spatial_node_index
{
return
;
}
let
transform_info
=
&
mut
self
.
transform_info
;
let
descriptor
=
&
mut
self
.
descriptor
;
let
tile_transform_index
=
self
.
tile_transform_map
.
entry
(
spatial_node_index
)
.
or_insert_with
(
|
|
{
let
index
=
transform_info
.
len
(
)
;
let
mapping
:
CoordinateSpaceMapping
<
LayoutPixel
PicturePixel
>
=
CoordinateSpaceMapping
:
:
new
(
surface_spatial_node_index
spatial_node_index
clip_scroll_tree
)
.
expect
(
"
todo
:
handle
invalid
mappings
"
)
;
let
changed
=
get_global_transform_changed
(
global_transforms
spatial_node_index
clip_scroll_tree
surface_spatial_node_index
)
;
transform_info
.
push
(
TileTransformInfo
{
changed
spatial_node_index
}
)
;
let
key
=
mapping
.
into
(
)
;
descriptor
.
transforms
.
push
(
key
)
;
TileTransformIndex
(
index
as
u32
)
}
)
;
descriptor
.
transform_ids
.
push
(
*
tile_transform_index
)
;
}
fn
destroy
(
self
)
-
>
Option
<
(
TileDescriptor
TextureCacheHandle
)
>
{
if
self
.
is_valid
{
Some
(
(
self
.
descriptor
self
.
handle
)
)
}
else
{
None
}
}
}
#
[
derive
(
Debug
Copy
Clone
Eq
PartialEq
Hash
)
]
pub
struct
TileTransformIndex
(
u32
)
;
#
[
derive
(
Debug
Eq
PartialEq
Hash
)
]
pub
struct
PrimitiveDescriptor
{
prim_uid
:
ItemUid
origin
:
PointKey
first_clip
:
u16
clip_count
:
u16
}
#
[
derive
(
Debug
Eq
PartialEq
Hash
)
]
pub
struct
TileDescriptor
{
pub
prims
:
Vec
<
PrimitiveDescriptor
>
pub
clip_uids
:
Vec
<
ItemUid
>
pub
transform_ids
:
Vec
<
TileTransformIndex
>
pub
transforms
:
Vec
<
TransformKey
>
pub
opacity_bindings
:
Vec
<
PropertyBindingId
>
pub
tile_offset
:
TileOffset
pub
local_tile_size
:
SizeKey
pub
raster_transform
:
TransformKey
}
impl
TileDescriptor
{
fn
new
(
tile_offset
:
TileOffset
local_tile_size
:
SizeKey
raster_transform
:
TransformKey
)
-
>
Self
{
TileDescriptor
{
prims
:
Vec
:
:
new
(
)
clip_uids
:
Vec
:
:
new
(
)
transform_ids
:
Vec
:
:
new
(
)
opacity_bindings
:
Vec
:
:
new
(
)
transforms
:
Vec
:
:
new
(
)
tile_offset
raster_transform
local_tile_size
}
}
fn
clear
(
&
mut
self
)
{
self
.
prims
.
clear
(
)
;
self
.
clip_uids
.
clear
(
)
;
self
.
transform_ids
.
clear
(
)
;
self
.
transforms
.
clear
(
)
;
self
.
opacity_bindings
.
clear
(
)
;
}
}
#
[
derive
(
Debug
)
]
pub
struct
DirtyRegion
{
tile_offset
:
DeviceIntPoint
dirty_rect
:
LayoutRect
dirty_world_rect
:
WorldRect
}
pub
struct
TileCache
{
pub
local_tile_size
:
LayoutSize
pub
tiles
:
Vec
<
Tile
>
pub
old_tiles
:
FastHashMap
<
TileOffset
Tile
>
pub
tile_rect
:
TileRect
pub
transforms
:
Vec
<
GlobalTransformInfo
>
pub
opacity_bindings
:
FastHashMap
<
PropertyBindingId
OpacityBindingInfo
>
pub
space_mapper
:
SpaceMapper
<
LayoutPixel
LayoutPixel
>
pub
needs_update
:
bool
pub
dirty_region
:
Option
<
DirtyRegion
>
raster_transform
:
TransformKey
local_origin
:
LayoutPoint
}
impl
TileCache
{
pub
fn
new
(
)
-
>
Self
{
TileCache
{
tiles
:
Vec
:
:
new
(
)
old_tiles
:
FastHashMap
:
:
default
(
)
tile_rect
:
TileRect
:
:
zero
(
)
local_tile_size
:
LayoutSize
:
:
zero
(
)
transforms
:
Vec
:
:
new
(
)
opacity_bindings
:
FastHashMap
:
:
default
(
)
needs_update
:
true
dirty_region
:
None
space_mapper
:
SpaceMapper
:
:
new
(
ROOT_SPATIAL_NODE_INDEX
LayoutRect
:
:
zero
(
)
)
raster_transform
:
TransformKey
:
:
Local
local_origin
:
LayoutPoint
:
:
zero
(
)
}
}
pub
fn
update_transforms
(
&
mut
self
surface_spatial_node_index
:
SpatialNodeIndex
raster_spatial_node_index
:
SpatialNodeIndex
raster_space
:
RasterSpace
frame_context
:
&
FrameBuildingContext
pic_rect
:
LayoutRect
)
{
if
self
.
tile_rect
.
size
.
is_empty_or_negative
(
)
{
self
.
needs_update
=
true
;
}
let
world_mapper
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
surface_spatial_node_index
frame_context
.
screen_world_rect
frame_context
.
clip_scroll_tree
)
;
let
pic_bounds
=
world_mapper
.
unmap
(
&
frame_context
.
screen_world_rect
)
.
unwrap_or
(
LayoutRect
:
:
max_rect
(
)
)
;
self
.
space_mapper
=
SpaceMapper
:
:
new
(
surface_spatial_node_index
pic_bounds
)
;
let
world_tile_rect
=
WorldRect
:
:
from_floats
(
0
.
0
0
.
0
TILE_SIZE_WIDTH
as
f32
/
frame_context
.
device_pixel_scale
.
0
TILE_SIZE_HEIGHT
as
f32
/
frame_context
.
device_pixel_scale
.
0
)
;
let
local_tile_rect
=
world_mapper
.
unmap
(
&
world_tile_rect
)
.
expect
(
"
bug
:
unable
to
get
local
tile
size
"
)
;
self
.
local_tile_size
=
local_tile_rect
.
size
;
self
.
local_origin
=
pic_rect
.
origin
;
if
self
.
transforms
.
len
(
)
=
=
frame_context
.
clip_scroll_tree
.
spatial_nodes
.
len
(
)
{
for
(
i
transform
)
in
self
.
transforms
.
iter_mut
(
)
.
enumerate
(
)
{
if
let
Some
(
ref
mut
current
)
=
transform
.
current
{
let
mapping
:
CoordinateSpaceMapping
<
LayoutPixel
PicturePixel
>
=
CoordinateSpaceMapping
:
:
new
(
surface_spatial_node_index
SpatialNodeIndex
(
i
)
frame_context
.
clip_scroll_tree
)
.
expect
(
"
todo
:
handle
invalid
mappings
"
)
;
let
key
=
mapping
.
into
(
)
;
transform
.
changed
=
key
!
=
*
current
;
*
current
=
key
;
}
}
}
else
{
self
.
transforms
.
clear
(
)
;
for
_
in
0
.
.
frame_context
.
clip_scroll_tree
.
spatial_nodes
.
len
(
)
{
self
.
transforms
.
push
(
GlobalTransformInfo
{
current
:
None
changed
:
true
}
)
;
}
}
;
let
current_properties
=
frame_context
.
scene_properties
.
float_properties
(
)
;
let
old_properties
=
mem
:
:
replace
(
&
mut
self
.
opacity_bindings
FastHashMap
:
:
default
(
)
)
;
for
(
id
value
)
in
current_properties
{
let
changed
=
match
old_properties
.
get
(
id
)
{
Some
(
old_property
)
=
>
!
old_property
.
value
.
approx_eq
(
value
)
None
=
>
true
}
;
self
.
opacity_bindings
.
insert
(
*
id
OpacityBindingInfo
{
value
:
*
value
changed
}
)
;
}
self
.
raster_transform
=
match
raster_space
{
RasterSpace
:
:
Screen
=
>
{
let
mut
key
=
CoordinateSpaceMapping
:
:
<
LayoutPixel
PicturePixel
>
:
:
new
(
raster_spatial_node_index
surface_spatial_node_index
frame_context
.
clip_scroll_tree
)
.
expect
(
"
bug
:
unable
to
get
coord
mapping
"
)
.
into
(
)
;
if
let
TransformKey
:
:
ScaleOffset
(
ref
mut
key
)
=
key
{
key
.
offset_x
=
0
.
0
;
key
.
offset_y
=
0
.
0
;
}
key
}
RasterSpace
:
:
Local
(
.
.
)
=
>
{
TransformKey
:
:
local
(
)
}
}
;
for
tile
in
&
mut
self
.
tiles
{
tile
.
descriptor
.
local_tile_size
=
self
.
local_tile_size
.
into
(
)
;
tile
.
descriptor
.
raster_transform
=
self
.
raster_transform
.
clone
(
)
;
debug_assert_eq
!
(
tile
.
transform_info
.
len
(
)
tile
.
descriptor
.
transforms
.
len
(
)
)
;
for
(
info
transform
)
in
tile
.
transform_info
.
iter_mut
(
)
.
zip
(
tile
.
descriptor
.
transforms
.
iter_mut
(
)
)
{
let
mapping
:
CoordinateSpaceMapping
<
LayoutPixel
PicturePixel
>
=
CoordinateSpaceMapping
:
:
new
(
surface_spatial_node_index
info
.
spatial_node_index
frame_context
.
clip_scroll_tree
)
.
expect
(
"
todo
:
handle
invalid
mappings
"
)
;
let
new_transform
=
mapping
.
into
(
)
;
info
.
changed
=
*
transform
!
=
new_transform
;
*
transform
=
new_transform
;
self
.
needs_update
|
=
info
.
changed
;
}
}
if
self
.
needs_update
{
debug_assert
!
(
self
.
old_tiles
.
is_empty
(
)
)
;
for
(
i
mut
tile
)
in
self
.
tiles
.
drain
(
.
.
)
.
enumerate
(
)
{
let
y
=
i
as
i32
/
self
.
tile_rect
.
size
.
width
;
let
x
=
i
as
i32
%
self
.
tile_rect
.
size
.
width
;
tile
.
descriptor
.
clear
(
)
;
tile
.
transform_info
.
clear
(
)
;
tile
.
tile_transform_map
.
clear
(
)
;
tile
.
opacity_bindings
.
clear
(
)
;
tile
.
image_keys
.
clear
(
)
;
tile
.
in_use
=
false
;
let
key
=
TileOffset
:
:
new
(
x
+
self
.
tile_rect
.
origin
.
x
y
+
self
.
tile_rect
.
origin
.
y
)
;
self
.
old_tiles
.
insert
(
key
tile
)
;
}
self
.
tile_rect
=
TileRect
:
:
zero
(
)
;
}
let
pic_rect
=
TypedRect
:
:
from_untyped
(
&
pic_rect
.
to_untyped
(
)
)
;
let
(
p0
p1
)
=
self
.
get_tile_coords_for_rect
(
&
pic_rect
)
;
self
.
reconfigure_tiles_if_required
(
p0
.
x
p0
.
y
p1
.
x
p1
.
y
)
;
}
fn
get_tile_coords_for_rect
(
&
self
rect
:
&
LayoutRect
)
-
>
(
TileOffset
TileOffset
)
{
let
origin
=
rect
.
origin
-
self
.
local_origin
;
let
p0
=
TileOffset
:
:
new
(
(
origin
.
x
/
self
.
local_tile_size
.
width
)
.
floor
(
)
as
i32
(
origin
.
y
/
self
.
local_tile_size
.
height
)
.
floor
(
)
as
i32
)
;
let
p1
=
TileOffset
:
:
new
(
(
(
origin
.
x
+
rect
.
size
.
width
)
/
self
.
local_tile_size
.
width
)
.
ceil
(
)
as
i32
(
(
origin
.
y
+
rect
.
size
.
height
)
/
self
.
local_tile_size
.
height
)
.
ceil
(
)
as
i32
)
;
(
p0
p1
)
}
fn
reconfigure_tiles_if_required
(
&
mut
self
mut
x0
:
i32
mut
y0
:
i32
mut
x1
:
i32
mut
y1
:
i32
)
{
if
self
.
tile_rect
.
size
.
width
>
0
{
x0
=
x0
.
min
(
self
.
tile_rect
.
origin
.
x
)
;
x1
=
x1
.
max
(
self
.
tile_rect
.
origin
.
x
+
self
.
tile_rect
.
size
.
width
)
;
}
if
self
.
tile_rect
.
size
.
height
>
0
{
y0
=
y0
.
min
(
self
.
tile_rect
.
origin
.
y
)
;
y1
=
y1
.
max
(
self
.
tile_rect
.
origin
.
y
+
self
.
tile_rect
.
size
.
height
)
;
}
let
x_tiles
=
x1
-
x0
;
let
y_tiles
=
y1
-
y0
;
if
self
.
tile_rect
.
size
.
width
=
=
x_tiles
&
&
self
.
tile_rect
.
size
.
height
=
=
y_tiles
&
&
self
.
tile_rect
.
origin
.
x
=
=
x0
&
&
self
.
tile_rect
.
origin
.
y
=
=
y0
{
return
;
}
let
mut
new_tiles
=
Vec
:
:
with_capacity
(
(
x_tiles
*
y_tiles
)
as
usize
)
;
for
y
in
0
.
.
y_tiles
{
for
x
in
0
.
.
x_tiles
{
let
tx
=
x0
-
self
.
tile_rect
.
origin
.
x
+
x
;
let
ty
=
y0
-
self
.
tile_rect
.
origin
.
y
+
y
;
let
tile_offset
=
TileOffset
:
:
new
(
x
+
x0
y
+
y0
)
;
let
tile
=
if
tx
>
=
0
&
&
ty
>
=
0
&
&
tx
<
self
.
tile_rect
.
size
.
width
&
&
ty
<
self
.
tile_rect
.
size
.
height
{
let
index
=
(
ty
*
self
.
tile_rect
.
size
.
width
+
tx
)
as
usize
;
mem
:
:
replace
(
&
mut
self
.
tiles
[
index
]
Tile
:
:
new
(
tile_offset
self
.
local_tile_size
.
into
(
)
self
.
raster_transform
.
clone
(
)
)
)
}
else
{
self
.
old_tiles
.
remove
(
&
tile_offset
)
.
unwrap_or_else
(
|
|
{
Tile
:
:
new
(
tile_offset
self
.
local_tile_size
.
into
(
)
self
.
raster_transform
.
clone
(
)
)
}
)
}
;
new_tiles
.
push
(
tile
)
;
}
}
self
.
tiles
=
new_tiles
;
self
.
tile_rect
.
origin
=
TileOffset
:
:
new
(
x0
y0
)
;
self
.
tile_rect
.
size
=
TileSize
:
:
new
(
x_tiles
y_tiles
)
;
}
pub
fn
update_prim_dependencies
(
&
mut
self
prim_instance
:
&
PrimitiveInstance
prim_list
:
&
PrimitiveList
surface_spatial_node_index
:
SpatialNodeIndex
clip_scroll_tree
:
&
ClipScrollTree
resources
:
&
FrameResources
clip_chain_nodes
:
&
[
ClipChainNode
]
pictures
:
&
[
PicturePrimitive
]
resource_cache
:
&
ResourceCache
opacity_binding_store
:
&
OpacityBindingStorage
image_instances
:
&
ImageInstanceStorage
)
{
if
!
self
.
needs_update
{
return
;
}
let
mut
in_visible_cluster
=
false
;
for
ci
in
prim_instance
.
cluster_range
.
start
.
.
prim_instance
.
cluster_range
.
end
{
let
cluster_index
=
prim_list
.
prim_cluster_map
[
ci
as
usize
]
;
let
cluster
=
&
prim_list
.
clusters
[
cluster_index
.
0
as
usize
]
;
in_visible_cluster
|
=
cluster
.
is_visible
;
if
cluster
.
is_visible
{
break
;
}
}
if
!
in_visible_cluster
{
return
;
}
self
.
space_mapper
.
set_target_spatial_node
(
prim_instance
.
spatial_node_index
clip_scroll_tree
)
;
let
prim_data
=
&
resources
.
as_common_data
(
&
prim_instance
)
;
let
prim_rect
=
LayoutRect
:
:
new
(
prim_instance
.
prim_origin
prim_data
.
prim_size
)
;
let
clip_rect
=
prim_data
.
prim_relative_clip_rect
.
translate
(
&
prim_instance
.
prim_origin
.
to_vector
(
)
)
;
let
culling_rect
=
match
prim_rect
.
intersection
(
&
clip_rect
)
{
Some
(
rect
)
=
>
rect
None
=
>
return
}
;
let
rect
=
match
self
.
space_mapper
.
map
(
&
culling_rect
)
{
Some
(
rect
)
=
>
rect
None
=
>
{
return
;
}
}
;
if
rect
.
size
.
width
<
=
0
.
0
|
|
rect
.
size
.
height
<
=
0
.
0
{
return
;
}
let
(
p0
p1
)
=
self
.
get_tile_coords_for_rect
(
&
rect
)
;
let
mut
opacity_bindings
:
SmallVec
<
[
PropertyBindingId
;
4
]
>
=
SmallVec
:
:
new
(
)
;
let
mut
clip_chain_spatial_nodes
:
SmallVec
<
[
SpatialNodeIndex
;
8
]
>
=
SmallVec
:
:
new
(
)
;
let
mut
clip_chain_uids
:
SmallVec
<
[
ItemUid
;
8
]
>
=
SmallVec
:
:
new
(
)
;
let
mut
image_keys
:
SmallVec
<
[
ImageKey
;
8
]
>
=
SmallVec
:
:
new
(
)
;
let
mut
current_clip_chain_id
=
prim_instance
.
clip_chain_id
;
let
is_cacheable
=
prim_instance
.
is_cacheable
(
&
resources
.
prim_data_store
resource_cache
)
;
match
prim_instance
.
kind
{
PrimitiveInstanceKind
:
:
Picture
{
pic_index
.
.
}
=
>
{
let
pic
=
&
pictures
[
pic_index
.
0
]
;
if
let
Some
(
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
Opacity
(
binding
_
)
)
)
=
pic
.
requested_composite_mode
{
if
let
PropertyBinding
:
:
Binding
(
key
_
)
=
binding
{
opacity_bindings
.
push
(
key
.
id
)
;
}
}
}
PrimitiveInstanceKind
:
:
Rectangle
{
opacity_binding_index
.
.
}
=
>
{
if
opacity_binding_index
!
=
OpacityBindingIndex
:
:
INVALID
{
let
opacity_binding
=
&
opacity_binding_store
[
opacity_binding_index
]
;
for
binding
in
&
opacity_binding
.
bindings
{
if
let
PropertyBinding
:
:
Binding
(
key
_
)
=
binding
{
opacity_bindings
.
push
(
key
.
id
)
;
}
}
}
}
PrimitiveInstanceKind
:
:
Image
{
data_handle
image_instance_index
.
.
}
=
>
{
let
prim_data
=
&
resources
.
prim_data_store
[
data_handle
]
;
let
image_instance
=
&
image_instances
[
image_instance_index
]
;
let
opacity_binding_index
=
image_instance
.
opacity_binding_index
;
if
opacity_binding_index
!
=
OpacityBindingIndex
:
:
INVALID
{
let
opacity_binding
=
&
opacity_binding_store
[
opacity_binding_index
]
;
for
binding
in
&
opacity_binding
.
bindings
{
if
let
PropertyBinding
:
:
Binding
(
key
_
)
=
binding
{
opacity_bindings
.
push
(
key
.
id
)
;
}
}
}
match
prim_data
.
kind
{
PrimitiveTemplateKind
:
:
Image
{
key
.
.
}
=
>
{
image_keys
.
push
(
key
)
;
}
_
=
>
{
unreachable
!
(
)
;
}
}
}
PrimitiveInstanceKind
:
:
YuvImage
{
data_handle
.
.
}
=
>
{
let
prim_data
=
&
resources
.
prim_data_store
[
data_handle
]
;
match
prim_data
.
kind
{
PrimitiveTemplateKind
:
:
YuvImage
{
ref
yuv_key
.
.
}
=
>
{
image_keys
.
extend_from_slice
(
yuv_key
)
;
}
_
=
>
{
unreachable
!
(
)
;
}
}
}
PrimitiveInstanceKind
:
:
TextRun
{
.
.
}
|
PrimitiveInstanceKind
:
:
LineDecoration
{
.
.
}
|
PrimitiveInstanceKind
:
:
Clear
{
.
.
}
|
PrimitiveInstanceKind
:
:
NormalBorder
{
.
.
}
|
PrimitiveInstanceKind
:
:
LinearGradient
{
.
.
}
|
PrimitiveInstanceKind
:
:
RadialGradient
{
.
.
}
|
PrimitiveInstanceKind
:
:
ImageBorder
{
.
.
}
=
>
{
}
}
while
current_clip_chain_id
!
=
ClipChainId
:
:
NONE
{
let
clip_chain_node
=
&
clip_chain_nodes
[
current_clip_chain_id
.
0
as
usize
]
;
if
clip_chain_node
.
spatial_node_index
>
surface_spatial_node_index
{
clip_chain_spatial_nodes
.
push
(
clip_chain_node
.
spatial_node_index
)
;
clip_chain_uids
.
push
(
clip_chain_node
.
handle
.
uid
(
)
)
;
}
current_clip_chain_id
=
clip_chain_node
.
parent_clip_chain_id
;
}
for
y
in
p0
.
y
-
self
.
tile_rect
.
origin
.
y
.
.
p1
.
y
-
self
.
tile_rect
.
origin
.
y
{
for
x
in
p0
.
x
-
self
.
tile_rect
.
origin
.
x
.
.
p1
.
x
-
self
.
tile_rect
.
origin
.
x
{
let
index
=
(
y
*
self
.
tile_rect
.
size
.
width
+
x
)
as
usize
;
let
tile
=
&
mut
self
.
tiles
[
index
]
;
tile
.
is_cacheable
&
=
is_cacheable
;
tile
.
in_use
=
true
;
for
image_key
in
&
image_keys
{
tile
.
image_keys
.
insert
(
*
image_key
)
;
}
tile
.
push_transform_dependency
(
prim_instance
.
spatial_node_index
surface_spatial_node_index
clip_scroll_tree
&
mut
self
.
transforms
)
;
for
clip_chain_spatial_node
in
&
clip_chain_spatial_nodes
{
tile
.
push_transform_dependency
(
*
clip_chain_spatial_node
surface_spatial_node_index
clip_scroll_tree
&
mut
self
.
transforms
)
;
}
for
id
in
&
opacity_bindings
{
if
tile
.
opacity_bindings
.
insert
(
*
id
)
{
tile
.
descriptor
.
opacity_bindings
.
push
(
*
id
)
;
}
}
tile
.
descriptor
.
prims
.
push
(
PrimitiveDescriptor
{
prim_uid
:
prim_instance
.
uid
(
)
origin
:
prim_instance
.
prim_origin
.
into
(
)
first_clip
:
tile
.
descriptor
.
clip_uids
.
len
(
)
as
u16
clip_count
:
clip_chain_uids
.
len
(
)
as
u16
}
)
;
tile
.
descriptor
.
clip_uids
.
extend_from_slice
(
&
clip_chain_uids
)
;
}
}
}
pub
fn
get_tile_rect
(
&
self
x
:
i32
y
:
i32
)
-
>
LayoutRect
{
LayoutRect
:
:
new
(
LayoutPoint
:
:
new
(
self
.
local_origin
.
x
+
(
self
.
tile_rect
.
origin
.
x
+
x
)
as
f32
*
self
.
local_tile_size
.
width
self
.
local_origin
.
y
+
(
self
.
tile_rect
.
origin
.
y
+
y
)
as
f32
*
self
.
local_tile_size
.
height
)
self
.
local_tile_size
)
}
pub
fn
build_dirty_regions
(
&
mut
self
surface_spatial_node_index
:
SpatialNodeIndex
frame_context
:
&
FrameBuildingContext
resource_cache
:
&
mut
ResourceCache
gpu_cache
:
&
mut
GpuCache
retained_tiles
:
&
mut
RetainedTiles
)
{
self
.
needs_update
=
false
;
for
(
_
tile
)
in
self
.
old_tiles
.
drain
(
)
{
resource_cache
.
texture_cache
.
mark_unused
(
&
tile
.
handle
)
;
}
let
world_mapper
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
surface_spatial_node_index
frame_context
.
screen_world_rect
frame_context
.
clip_scroll_tree
)
;
let
mut
tile_offset
=
DeviceIntPoint
:
:
new
(
self
.
tile_rect
.
size
.
width
self
.
tile_rect
.
size
.
height
)
;
let
mut
dirty_rect
=
LayoutRect
:
:
zero
(
)
;
for
y
in
0
.
.
self
.
tile_rect
.
size
.
height
{
for
x
in
0
.
.
self
.
tile_rect
.
size
.
width
{
let
i
=
y
*
self
.
tile_rect
.
size
.
width
+
x
;
let
tile_rect
=
self
.
get_tile_rect
(
x
y
)
;
let
tile
=
&
mut
self
.
tiles
[
i
as
usize
]
;
if
!
tile
.
in_use
{
continue
;
}
let
tile_world_rect
=
world_mapper
.
map
(
&
tile_rect
)
.
expect
(
"
bug
:
unable
to
map
tile
to
world
coords
"
)
;
tile
.
is_visible
=
frame_context
.
screen_world_rect
.
intersects
(
&
tile_world_rect
)
;
if
tile
.
is_visible
&
&
!
resource_cache
.
texture_cache
.
is_allocated
(
&
tile
.
handle
)
{
if
let
Some
(
retained_handle
)
=
retained_tiles
.
tiles
.
remove
(
&
tile
.
descriptor
)
{
if
resource_cache
.
texture_cache
.
is_allocated
(
&
retained_handle
)
{
tile
.
handle
=
retained_handle
;
tile
.
is_valid
=
true
;
for
info
in
&
mut
tile
.
transform_info
{
info
.
changed
=
false
;
}
}
}
}
if
!
tile
.
is_cacheable
{
tile
.
is_valid
=
false
;
}
for
image_key
in
&
tile
.
image_keys
{
if
resource_cache
.
is_image_dirty
(
*
image_key
)
{
tile
.
is_valid
=
false
;
break
;
}
}
for
id
in
&
tile
.
opacity_bindings
{
let
changed
=
match
self
.
opacity_bindings
.
get
(
id
)
{
Some
(
info
)
=
>
info
.
changed
None
=
>
true
}
;
if
changed
{
tile
.
is_valid
=
false
;
break
;
}
}
for
info
in
&
tile
.
transform_info
{
if
info
.
changed
{
tile
.
is_valid
=
false
;
break
;
}
}
if
!
resource_cache
.
texture_cache
.
is_allocated
(
&
tile
.
handle
)
{
tile
.
is_valid
=
false
;
}
if
tile
.
is_visible
{
resource_cache
.
texture_cache
.
request
(
&
tile
.
handle
gpu_cache
)
;
if
!
tile
.
is_valid
{
dirty_rect
=
dirty_rect
.
union
(
&
tile_rect
)
;
tile_offset
.
x
=
tile_offset
.
x
.
min
(
x
)
;
tile_offset
.
y
=
tile_offset
.
y
.
min
(
y
)
;
}
}
}
}
self
.
dirty_region
=
if
dirty_rect
.
is_empty
(
)
{
None
}
else
{
let
dirty_world_rect
=
world_mapper
.
map
(
&
dirty_rect
)
.
expect
(
"
todo
"
)
;
Some
(
DirtyRegion
{
dirty_rect
tile_offset
dirty_world_rect
}
)
}
;
}
}
pub
struct
TileCacheUpdateState
{
pub
tile_cache
:
Option
<
(
TileCache
SpatialNodeIndex
)
>
}
impl
TileCacheUpdateState
{
pub
fn
new
(
)
-
>
Self
{
TileCacheUpdateState
{
tile_cache
:
None
}
}
}
pub
struct
PictureUpdateState
<
'
a
>
{
pub
surfaces
:
&
'
a
mut
Vec
<
SurfaceInfo
>
surface_stack
:
Vec
<
SurfaceIndex
>
picture_stack
:
Vec
<
PictureInfo
>
}
impl
<
'
a
>
PictureUpdateState
<
'
a
>
{
pub
fn
new
(
surfaces
:
&
'
a
mut
Vec
<
SurfaceInfo
>
)
-
>
Self
{
PictureUpdateState
{
surfaces
surface_stack
:
vec
!
[
SurfaceIndex
(
0
)
]
picture_stack
:
Vec
:
:
new
(
)
}
}
fn
current_surface
(
&
self
)
-
>
&
SurfaceInfo
{
&
self
.
surfaces
[
self
.
surface_stack
.
last
(
)
.
unwrap
(
)
.
0
]
}
fn
current_surface_mut
(
&
mut
self
)
-
>
&
mut
SurfaceInfo
{
&
mut
self
.
surfaces
[
self
.
surface_stack
.
last
(
)
.
unwrap
(
)
.
0
]
}
fn
push_surface
(
&
mut
self
surface
:
SurfaceInfo
)
-
>
SurfaceIndex
{
let
surface_index
=
SurfaceIndex
(
self
.
surfaces
.
len
(
)
)
;
self
.
surfaces
.
push
(
surface
)
;
self
.
surface_stack
.
push
(
surface_index
)
;
surface_index
}
fn
pop_surface
(
&
mut
self
)
{
self
.
surface_stack
.
pop
(
)
.
unwrap
(
)
;
}
fn
current_picture
(
&
self
)
-
>
Option
<
&
PictureInfo
>
{
self
.
picture_stack
.
last
(
)
}
fn
push_picture
(
&
mut
self
info
:
PictureInfo
)
{
self
.
picture_stack
.
push
(
info
)
;
}
fn
pop_picture
(
&
mut
self
)
-
>
PictureInfo
{
self
.
picture_stack
.
pop
(
)
.
unwrap
(
)
}
}
#
[
derive
(
Debug
Copy
Clone
)
]
pub
struct
SurfaceIndex
(
pub
usize
)
;
pub
const
ROOT_SURFACE_INDEX
:
SurfaceIndex
=
SurfaceIndex
(
0
)
;
#
[
derive
(
Debug
)
]
pub
struct
SurfaceInfo
{
pub
rect
:
PictureRect
pub
map_local_to_surface
:
SpaceMapper
<
LayoutPixel
PicturePixel
>
pub
raster_spatial_node_index
:
SpatialNodeIndex
pub
surface_spatial_node_index
:
SpatialNodeIndex
pub
surface
:
Option
<
PictureSurface
>
pub
tasks
:
Vec
<
RenderTaskId
>
pub
inflation_factor
:
f32
}
impl
SurfaceInfo
{
pub
fn
new
(
surface_spatial_node_index
:
SpatialNodeIndex
raster_spatial_node_index
:
SpatialNodeIndex
inflation_factor
:
f32
world_rect
:
WorldRect
clip_scroll_tree
:
&
ClipScrollTree
)
-
>
Self
{
let
map_surface_to_world
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
surface_spatial_node_index
world_rect
clip_scroll_tree
)
;
let
pic_bounds
=
map_surface_to_world
.
unmap
(
&
map_surface_to_world
.
bounds
)
.
unwrap_or
(
PictureRect
:
:
max_rect
(
)
)
;
let
map_local_to_surface
=
SpaceMapper
:
:
new
(
surface_spatial_node_index
pic_bounds
)
;
SurfaceInfo
{
rect
:
PictureRect
:
:
zero
(
)
map_local_to_surface
surface
:
None
raster_spatial_node_index
surface_spatial_node_index
tasks
:
Vec
:
:
new
(
)
inflation_factor
}
}
pub
fn
take_render_tasks
(
&
mut
self
)
-
>
Vec
<
RenderTaskId
>
{
mem
:
:
replace
(
&
mut
self
.
tasks
Vec
:
:
new
(
)
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
RasterConfig
{
pub
composite_mode
:
PictureCompositeMode
pub
surface_index
:
SurfaceIndex
}
#
[
allow
(
dead_code
)
]
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
pub
enum
PictureCompositeMode
{
MixBlend
(
MixBlendMode
)
Filter
(
FilterOp
)
Blit
TileCache
{
clear_color
:
ColorF
}
}
#
[
derive
(
Debug
)
]
pub
enum
PictureSurface
{
RenderTask
(
RenderTaskId
)
TextureCache
(
RenderTaskCacheEntryHandle
)
}
#
[
derive
(
Clone
Debug
)
]
pub
enum
Picture3DContext
<
C
>
{
Out
In
{
root_data
:
Option
<
Vec
<
C
>
>
ancestor_index
:
SpatialNodeIndex
}
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
OrderedPictureChild
{
pub
anchor
:
usize
pub
transform_id
:
TransformPaletteId
pub
gpu_address
:
GpuCacheAddress
}
#
[
derive
(
Hash
Eq
PartialEq
Copy
Clone
)
]
struct
PrimitiveClusterKey
{
spatial_node_index
:
SpatialNodeIndex
is_backface_visible
:
bool
}
pub
struct
PrimitiveCluster
{
spatial_node_index
:
SpatialNodeIndex
is_backface_visible
:
bool
bounding_rect
:
LayoutRect
pub
is_visible
:
bool
}
impl
PrimitiveCluster
{
fn
new
(
spatial_node_index
:
SpatialNodeIndex
is_backface_visible
:
bool
)
-
>
Self
{
PrimitiveCluster
{
bounding_rect
:
LayoutRect
:
:
zero
(
)
spatial_node_index
is_backface_visible
is_visible
:
false
}
}
}
#
[
derive
(
Debug
Copy
Clone
)
]
pub
struct
PrimitiveClusterIndex
(
pub
u32
)
;
pub
type
ClusterRange
=
ops
:
:
Range
<
u32
>
;
pub
type
PictureList
=
SmallVec
<
[
PictureIndex
;
4
]
>
;
pub
struct
PrimitiveList
{
pub
prim_instances
:
Vec
<
PrimitiveInstance
>
pub
pictures
:
PictureList
pub
clusters
:
SmallVec
<
[
PrimitiveCluster
;
4
]
>
pub
prim_cluster_map
:
Vec
<
PrimitiveClusterIndex
>
}
impl
PrimitiveList
{
pub
fn
empty
(
)
-
>
Self
{
PrimitiveList
{
prim_instances
:
Vec
:
:
new
(
)
pictures
:
SmallVec
:
:
new
(
)
clusters
:
SmallVec
:
:
new
(
)
prim_cluster_map
:
Vec
:
:
new
(
)
}
}
pub
fn
new
(
mut
prim_instances
:
Vec
<
PrimitiveInstance
>
resources
:
&
DocumentResources
)
-
>
Self
{
let
mut
pictures
=
SmallVec
:
:
new
(
)
;
let
mut
clusters_map
=
FastHashMap
:
:
default
(
)
;
let
mut
clusters
:
SmallVec
<
[
PrimitiveCluster
;
4
]
>
=
SmallVec
:
:
new
(
)
;
let
mut
prim_cluster_map
=
Vec
:
:
new
(
)
;
for
prim_instance
in
&
mut
prim_instances
{
let
is_pic
=
match
prim_instance
.
kind
{
PrimitiveInstanceKind
:
:
Picture
{
pic_index
.
.
}
=
>
{
pictures
.
push
(
pic_index
)
;
true
}
_
=
>
{
false
}
}
;
let
prim_data
=
match
prim_instance
.
kind
{
PrimitiveInstanceKind
:
:
Picture
{
data_handle
.
.
}
|
PrimitiveInstanceKind
:
:
LineDecoration
{
data_handle
.
.
}
|
PrimitiveInstanceKind
:
:
NormalBorder
{
data_handle
.
.
}
|
PrimitiveInstanceKind
:
:
ImageBorder
{
data_handle
.
.
}
|
PrimitiveInstanceKind
:
:
Rectangle
{
data_handle
.
.
}
|
PrimitiveInstanceKind
:
:
YuvImage
{
data_handle
.
.
}
|
PrimitiveInstanceKind
:
:
Image
{
data_handle
.
.
}
|
PrimitiveInstanceKind
:
:
Clear
{
data_handle
.
.
}
=
>
{
&
resources
.
prim_interner
[
data_handle
]
}
PrimitiveInstanceKind
:
:
LinearGradient
{
data_handle
.
.
}
=
>
{
&
resources
.
linear_grad_interner
[
data_handle
]
}
PrimitiveInstanceKind
:
:
RadialGradient
{
data_handle
.
.
}
=
>
{
&
resources
.
radial_grad_interner
[
data_handle
]
}
PrimitiveInstanceKind
:
:
TextRun
{
data_handle
.
.
}
=
>
{
&
resources
.
text_run_interner
[
data_handle
]
}
}
;
let
key
=
PrimitiveClusterKey
{
spatial_node_index
:
prim_instance
.
spatial_node_index
is_backface_visible
:
prim_data
.
is_backface_visible
}
;
let
cluster_index
=
*
clusters_map
.
entry
(
key
)
.
or_insert_with
(
|
|
{
let
index
=
clusters
.
len
(
)
;
clusters
.
push
(
PrimitiveCluster
:
:
new
(
prim_instance
.
spatial_node_index
prim_data
.
is_backface_visible
)
)
;
index
}
)
;
let
cluster
=
&
mut
clusters
[
cluster_index
]
;
if
!
is_pic
{
let
prim_rect
=
LayoutRect
:
:
new
(
prim_instance
.
prim_origin
prim_data
.
prim_size
)
;
let
clip_rect
=
prim_data
.
prim_relative_clip_rect
.
translate
(
&
prim_instance
.
prim_origin
.
to_vector
(
)
)
;
let
culling_rect
=
clip_rect
.
intersection
(
&
prim_rect
)
.
unwrap_or
(
LayoutRect
:
:
zero
(
)
)
;
cluster
.
bounding_rect
=
cluster
.
bounding_rect
.
union
(
&
culling_rect
)
;
}
let
start
=
prim_cluster_map
.
len
(
)
as
u32
;
let
cluster_range
=
ClusterRange
{
start
end
:
start
+
1
}
;
prim_cluster_map
.
push
(
PrimitiveClusterIndex
(
cluster_index
as
u32
)
)
;
prim_instance
.
cluster_range
=
cluster_range
;
}
PrimitiveList
{
prim_instances
pictures
clusters
prim_cluster_map
}
}
}
pub
struct
PicturePrimitive
{
pub
prim_list
:
PrimitiveList
pub
state
:
Option
<
(
PictureState
PictureContext
)
>
pub
pipeline_id
:
PipelineId
pub
apply_local_clip_rect
:
bool
pub
secondary_render_task_id
:
Option
<
RenderTaskId
>
pub
requested_composite_mode
:
Option
<
PictureCompositeMode
>
pub
requested_raster_space
:
RasterSpace
pub
raster_config
:
Option
<
RasterConfig
>
pub
context_3d
:
Picture3DContext
<
OrderedPictureChild
>
pub
frame_output_pipeline_id
:
Option
<
PipelineId
>
pub
extra_gpu_data_handle
:
GpuCacheHandle
pub
spatial_node_index
:
SpatialNodeIndex
pub
local_rect
:
LayoutRect
pub
local_clip_rect
:
LayoutRect
surface_desc
:
Option
<
SurfaceDescriptor
>
pub
gpu_location
:
GpuCacheHandle
pub
tile_cache
:
Option
<
TileCache
>
}
impl
PicturePrimitive
{
pub
fn
print
<
T
:
PrintTreePrinter
>
(
&
self
pictures
:
&
[
Self
]
self_index
:
PictureIndex
pt
:
&
mut
T
)
{
pt
.
new_level
(
format
!
(
"
{
:
?
}
"
self_index
)
)
;
pt
.
add_item
(
format
!
(
"
prim_count
:
{
:
?
}
"
self
.
prim_list
.
prim_instances
.
len
(
)
)
)
;
pt
.
add_item
(
format
!
(
"
local_rect
:
{
:
?
}
"
self
.
local_rect
)
)
;
if
self
.
apply_local_clip_rect
{
pt
.
add_item
(
format
!
(
"
local_clip_rect
:
{
:
?
}
"
self
.
local_clip_rect
)
)
;
}
pt
.
add_item
(
format
!
(
"
spatial_node_index
:
{
:
?
}
"
self
.
spatial_node_index
)
)
;
pt
.
add_item
(
format
!
(
"
raster_config
:
{
:
?
}
"
self
.
raster_config
)
)
;
pt
.
add_item
(
format
!
(
"
requested_composite_mode
:
{
:
?
}
"
self
.
requested_composite_mode
)
)
;
for
index
in
&
self
.
prim_list
.
pictures
{
pictures
[
index
.
0
]
.
print
(
pictures
*
index
pt
)
;
}
pt
.
end_level
(
)
;
}
fn
resolve_scene_properties
(
&
mut
self
properties
:
&
SceneProperties
)
-
>
bool
{
match
self
.
requested_composite_mode
{
Some
(
PictureCompositeMode
:
:
Filter
(
ref
mut
filter
)
)
=
>
{
match
*
filter
{
FilterOp
:
:
Opacity
(
ref
binding
ref
mut
value
)
=
>
{
*
value
=
properties
.
resolve_float
(
binding
)
;
}
_
=
>
{
}
}
filter
.
is_visible
(
)
}
_
=
>
true
}
}
fn
is_visible
(
&
self
)
-
>
bool
{
match
self
.
requested_composite_mode
{
Some
(
PictureCompositeMode
:
:
Filter
(
ref
filter
)
)
=
>
{
filter
.
is_visible
(
)
}
_
=
>
true
}
}
pub
fn
destroy
(
mut
self
retained_tiles
:
&
mut
RetainedTiles
)
{
if
let
Some
(
tile_cache
)
=
self
.
tile_cache
.
take
(
)
{
debug_assert
!
(
tile_cache
.
old_tiles
.
is_empty
(
)
)
;
for
tile
in
tile_cache
.
tiles
{
if
let
Some
(
(
descriptor
handle
)
)
=
tile
.
destroy
(
)
{
retained_tiles
.
tiles
.
insert
(
descriptor
handle
)
;
}
}
}
}
pub
fn
new_image
(
requested_composite_mode
:
Option
<
PictureCompositeMode
>
context_3d
:
Picture3DContext
<
OrderedPictureChild
>
pipeline_id
:
PipelineId
frame_output_pipeline_id
:
Option
<
PipelineId
>
apply_local_clip_rect
:
bool
requested_raster_space
:
RasterSpace
prim_list
:
PrimitiveList
spatial_node_index
:
SpatialNodeIndex
local_clip_rect
:
LayoutRect
clip_store
:
&
ClipStore
)
-
>
Self
{
let
create_cache_descriptor
=
match
requested_composite_mode
{
Some
(
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
Blur
(
blur_radius
)
)
)
=
>
{
blur_radius
>
0
.
0
}
Some
(
_
)
|
None
=
>
{
false
}
}
;
let
surface_desc
=
if
create_cache_descriptor
{
SurfaceDescriptor
:
:
new
(
&
prim_list
.
prim_instances
spatial_node_index
clip_store
)
}
else
{
None
}
;
let
tile_cache
=
match
requested_composite_mode
{
Some
(
PictureCompositeMode
:
:
TileCache
{
.
.
}
)
=
>
{
Some
(
TileCache
:
:
new
(
)
)
}
Some
(
_
)
|
None
=
>
{
None
}
}
;
PicturePrimitive
{
surface_desc
prim_list
state
:
None
secondary_render_task_id
:
None
requested_composite_mode
raster_config
:
None
context_3d
frame_output_pipeline_id
extra_gpu_data_handle
:
GpuCacheHandle
:
:
new
(
)
apply_local_clip_rect
pipeline_id
requested_raster_space
spatial_node_index
local_rect
:
LayoutRect
:
:
zero
(
)
local_clip_rect
gpu_location
:
GpuCacheHandle
:
:
new
(
)
tile_cache
}
}
pub
fn
take_context
(
&
mut
self
pic_index
:
PictureIndex
surface_spatial_node_index
:
SpatialNodeIndex
raster_spatial_node_index
:
SpatialNodeIndex
surface_index
:
SurfaceIndex
parent_allows_subpixel_aa
:
bool
frame_state
:
&
mut
FrameBuildingState
frame_context
:
&
FrameBuildingContext
)
-
>
Option
<
(
PictureContext
PictureState
PrimitiveList
)
>
{
if
!
self
.
is_visible
(
)
{
return
None
;
}
let
dirty_world_rect
=
match
self
.
tile_cache
{
Some
(
ref
tile_cache
)
=
>
{
tile_cache
.
dirty_region
.
as_ref
(
)
.
map_or
(
WorldRect
:
:
zero
(
)
|
region
|
{
region
.
dirty_world_rect
}
)
}
None
=
>
{
frame_context
.
screen_world_rect
}
}
;
let
(
raster_spatial_node_index
surface_spatial_node_index
surface_index
)
=
match
self
.
raster_config
{
Some
(
ref
raster_config
)
=
>
{
let
surface
=
&
frame_state
.
surfaces
[
raster_config
.
surface_index
.
0
]
;
(
surface
.
raster_spatial_node_index
self
.
spatial_node_index
raster_config
.
surface_index
)
}
None
=
>
{
(
raster_spatial_node_index
surface_spatial_node_index
surface_index
)
}
}
;
if
self
.
raster_config
.
is_some
(
)
{
frame_state
.
clip_store
.
push_surface
(
surface_spatial_node_index
)
;
}
let
map_pic_to_world
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
surface_spatial_node_index
dirty_world_rect
frame_context
.
clip_scroll_tree
)
;
let
pic_bounds
=
map_pic_to_world
.
unmap
(
&
map_pic_to_world
.
bounds
)
.
unwrap_or
(
PictureRect
:
:
max_rect
(
)
)
;
let
map_local_to_pic
=
SpaceMapper
:
:
new
(
surface_spatial_node_index
pic_bounds
)
;
let
(
map_raster_to_world
map_pic_to_raster
)
=
create_raster_mappers
(
surface_spatial_node_index
raster_spatial_node_index
dirty_world_rect
frame_context
.
clip_scroll_tree
)
;
let
plane_splitter
=
match
self
.
context_3d
{
Picture3DContext
:
:
Out
=
>
{
None
}
Picture3DContext
:
:
In
{
root_data
:
Some
(
_
)
.
.
}
=
>
{
Some
(
PlaneSplitter
:
:
new
(
)
)
}
Picture3DContext
:
:
In
{
root_data
:
None
.
.
}
=
>
{
None
}
}
;
let
state
=
PictureState
{
is_cacheable
:
true
map_local_to_pic
map_pic_to_world
map_pic_to_raster
map_raster_to_world
plane_splitter
}
;
let
allow_subpixel_aa
=
match
self
.
raster_config
{
Some
(
RasterConfig
{
composite_mode
:
PictureCompositeMode
:
:
TileCache
{
clear_color
.
.
}
.
.
}
)
=
>
{
clear_color
.
a
>
=
1
.
0
}
Some
(
_
)
=
>
{
false
}
None
=
>
{
true
}
}
;
let
allow_subpixel_aa
=
parent_allows_subpixel_aa
&
&
allow_subpixel_aa
;
let
context
=
PictureContext
{
pic_index
pipeline_id
:
self
.
pipeline_id
apply_local_clip_rect
:
self
.
apply_local_clip_rect
allow_subpixel_aa
is_passthrough
:
self
.
raster_config
.
is_none
(
)
raster_space
:
self
.
requested_raster_space
raster_spatial_node_index
surface_spatial_node_index
surface_index
dirty_world_rect
}
;
let
prim_list
=
mem
:
:
replace
(
&
mut
self
.
prim_list
PrimitiveList
:
:
empty
(
)
)
;
Some
(
(
context
state
prim_list
)
)
}
pub
fn
restore_context
(
&
mut
self
prim_list
:
PrimitiveList
context
:
PictureContext
state
:
PictureState
frame_state
:
&
mut
FrameBuildingState
)
-
>
Option
<
ClipNodeCollector
>
{
self
.
prim_list
=
prim_list
;
self
.
state
=
Some
(
(
state
context
)
)
;
self
.
raster_config
.
as_ref
(
)
.
map
(
|
_
|
{
frame_state
.
clip_store
.
pop_surface
(
)
}
)
}
pub
fn
take_state_and_context
(
&
mut
self
)
-
>
(
PictureState
PictureContext
)
{
self
.
state
.
take
(
)
.
expect
(
"
bug
:
no
state
present
!
"
)
}
pub
fn
add_split_plane
(
splitter
:
&
mut
PlaneSplitter
transforms
:
&
TransformPalette
prim_instance
:
&
PrimitiveInstance
original_local_rect
:
LayoutRect
world_rect
:
WorldRect
plane_split_anchor
:
usize
)
-
>
bool
{
let
transform
=
transforms
.
get_world_transform
(
prim_instance
.
spatial_node_index
)
;
let
matrix
=
transform
.
cast
(
)
;
let
local_rect
=
match
original_local_rect
.
intersection
(
&
prim_instance
.
combined_local_clip_rect
)
{
Some
(
rect
)
=
>
rect
.
cast
(
)
None
=
>
return
false
}
;
let
world_rect
=
world_rect
.
cast
(
)
;
match
transform
.
transform_kind
(
)
{
TransformedRectKind
:
:
AxisAligned
=
>
{
let
inv_transform
=
transforms
.
get_world_inv_transform
(
prim_instance
.
spatial_node_index
)
;
let
polygon
=
Polygon
:
:
from_transformed_rect_with_inverse
(
local_rect
&
matrix
&
inv_transform
.
cast
(
)
plane_split_anchor
)
.
unwrap
(
)
;
splitter
.
add
(
polygon
)
;
}
TransformedRectKind
:
:
Complex
=
>
{
let
mut
clipper
=
Clipper
:
:
new
(
)
;
let
results
=
clipper
.
clip_transformed
(
Polygon
:
:
from_rect
(
local_rect
plane_split_anchor
)
&
matrix
Some
(
world_rect
)
)
;
if
let
Ok
(
results
)
=
results
{
for
poly
in
results
{
splitter
.
add
(
poly
)
;
}
}
}
}
true
}
pub
fn
resolve_split_planes
(
&
mut
self
splitter
:
&
mut
PlaneSplitter
frame_state
:
&
mut
FrameBuildingState
clip_scroll_tree
:
&
ClipScrollTree
)
{
let
ordered
=
match
self
.
context_3d
{
Picture3DContext
:
:
In
{
root_data
:
Some
(
ref
mut
list
)
.
.
}
=
>
list
_
=
>
panic
!
(
"
Expected
to
find
3D
context
root
"
)
}
;
ordered
.
clear
(
)
;
for
poly
in
splitter
.
sort
(
vec3
(
0
.
0
0
.
0
1
.
0
)
)
{
let
spatial_node_index
=
self
.
prim_list
.
prim_instances
[
poly
.
anchor
]
.
spatial_node_index
;
let
transform
=
frame_state
.
transforms
.
get_world_inv_transform
(
spatial_node_index
)
;
let
transform_id
=
frame_state
.
transforms
.
get_id
(
spatial_node_index
ROOT_SPATIAL_NODE_INDEX
clip_scroll_tree
)
;
let
local_points
=
[
transform
.
transform_point3d
(
&
poly
.
points
[
0
]
.
cast
(
)
)
.
unwrap
(
)
transform
.
transform_point3d
(
&
poly
.
points
[
1
]
.
cast
(
)
)
.
unwrap
(
)
transform
.
transform_point3d
(
&
poly
.
points
[
2
]
.
cast
(
)
)
.
unwrap
(
)
transform
.
transform_point3d
(
&
poly
.
points
[
3
]
.
cast
(
)
)
.
unwrap
(
)
]
;
let
gpu_blocks
=
[
[
local_points
[
0
]
.
x
local_points
[
0
]
.
y
local_points
[
1
]
.
x
local_points
[
1
]
.
y
]
.
into
(
)
[
local_points
[
2
]
.
x
local_points
[
2
]
.
y
local_points
[
3
]
.
x
local_points
[
3
]
.
y
]
.
into
(
)
]
;
let
gpu_handle
=
frame_state
.
gpu_cache
.
push_per_frame_blocks
(
&
gpu_blocks
)
;
let
gpu_address
=
frame_state
.
gpu_cache
.
get_address
(
&
gpu_handle
)
;
ordered
.
push
(
OrderedPictureChild
{
anchor
:
poly
.
anchor
transform_id
gpu_address
}
)
;
}
}
pub
fn
pre_update
(
&
mut
self
state
:
&
mut
PictureUpdateState
frame_context
:
&
FrameBuildingContext
)
-
>
Option
<
PictureList
>
{
self
.
raster_config
=
None
;
if
!
self
.
resolve_scene_properties
(
frame_context
.
scene_properties
)
{
return
None
;
}
state
.
push_picture
(
PictureInfo
{
spatial_node_index
:
self
.
spatial_node_index
}
)
;
let
actual_composite_mode
=
match
self
.
requested_composite_mode
{
Some
(
PictureCompositeMode
:
:
Filter
(
filter
)
)
if
filter
.
is_noop
(
)
=
>
None
mode
=
>
mode
}
;
if
let
Some
(
composite_mode
)
=
actual_composite_mode
{
let
parent_raster_spatial_node_index
=
state
.
current_surface
(
)
.
raster_spatial_node_index
;
let
surface_spatial_node_index
=
self
.
spatial_node_index
;
let
xf
=
frame_context
.
clip_scroll_tree
.
get_relative_transform
(
parent_raster_spatial_node_index
surface_spatial_node_index
)
.
expect
(
"
BUG
:
unable
to
get
relative
transform
"
)
;
let
establishes_raster_root
=
xf
.
has_perspective_component
(
)
;
let
raster_space
=
RasterSpace
:
:
Screen
;
let
raster_spatial_node_index
=
if
establishes_raster_root
{
surface_spatial_node_index
}
else
{
parent_raster_spatial_node_index
}
;
let
inflation_factor
=
match
composite_mode
{
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
Blur
(
blur_radius
)
)
=
>
{
BLUR_SAMPLE_SCALE
*
blur_radius
}
_
=
>
{
0
.
0
}
}
;
let
surface_index
=
state
.
push_surface
(
SurfaceInfo
:
:
new
(
surface_spatial_node_index
raster_spatial_node_index
inflation_factor
frame_context
.
screen_world_rect
&
frame_context
.
clip_scroll_tree
)
)
;
self
.
raster_config
=
Some
(
RasterConfig
{
composite_mode
surface_index
}
)
;
if
let
Some
(
ref
mut
surface_desc
)
=
self
.
surface_desc
{
surface_desc
.
update
(
surface_spatial_node_index
raster_spatial_node_index
frame_context
.
clip_scroll_tree
raster_space
)
;
}
}
Some
(
mem
:
:
replace
(
&
mut
self
.
prim_list
.
pictures
SmallVec
:
:
new
(
)
)
)
}
pub
fn
update_prim_dependencies
(
&
self
tile_cache
:
&
mut
TileCache
surface_spatial_node_index
:
SpatialNodeIndex
frame_context
:
&
FrameBuildingContext
resource_cache
:
&
mut
ResourceCache
resources
:
&
FrameResources
pictures
:
&
[
PicturePrimitive
]
clip_store
:
&
ClipStore
opacity_binding_store
:
&
OpacityBindingStorage
image_instances
:
&
ImageInstanceStorage
)
{
for
prim_instance
in
&
self
.
prim_list
.
prim_instances
{
tile_cache
.
update_prim_dependencies
(
prim_instance
&
self
.
prim_list
surface_spatial_node_index
&
frame_context
.
clip_scroll_tree
resources
&
clip_store
.
clip_chain_nodes
pictures
resource_cache
opacity_binding_store
image_instances
)
;
}
}
pub
fn
post_update
(
&
mut
self
child_pictures
:
PictureList
state
:
&
mut
PictureUpdateState
frame_context
:
&
FrameBuildingContext
gpu_cache
:
&
mut
GpuCache
)
{
state
.
pop_picture
(
)
;
for
cluster
in
&
mut
self
.
prim_list
.
clusters
{
if
!
cluster
.
is_backface_visible
{
let
containing_block_index
=
match
self
.
context_3d
{
Picture3DContext
:
:
Out
=
>
{
state
.
current_picture
(
)
.
map_or
(
ROOT_SPATIAL_NODE_INDEX
|
info
|
{
info
.
spatial_node_index
}
)
}
Picture3DContext
:
:
In
{
root_data
:
Some
(
_
)
ancestor_index
}
=
>
{
ancestor_index
}
Picture3DContext
:
:
In
{
root_data
:
None
ancestor_index
}
=
>
{
ancestor_index
}
}
;
let
map_local_to_containing_block
:
SpaceMapper
<
LayoutPixel
LayoutPixel
>
=
SpaceMapper
:
:
new_with_target
(
containing_block_index
cluster
.
spatial_node_index
LayoutRect
:
:
zero
(
)
&
frame_context
.
clip_scroll_tree
)
;
match
map_local_to_containing_block
.
visible_face
(
)
{
VisibleFace
:
:
Back
=
>
continue
VisibleFace
:
:
Front
=
>
{
}
}
}
let
spatial_node
=
&
frame_context
.
clip_scroll_tree
.
spatial_nodes
[
cluster
.
spatial_node_index
.
0
]
;
if
!
spatial_node
.
invertible
{
continue
;
}
let
surface
=
state
.
current_surface_mut
(
)
;
surface
.
map_local_to_surface
.
set_target_spatial_node
(
cluster
.
spatial_node_index
frame_context
.
clip_scroll_tree
)
;
cluster
.
is_visible
=
true
;
if
let
Some
(
cluster_rect
)
=
surface
.
map_local_to_surface
.
map
(
&
cluster
.
bounding_rect
)
{
surface
.
rect
=
surface
.
rect
.
union
(
&
cluster_rect
)
;
}
}
let
inflation_size
=
match
self
.
raster_config
{
Some
(
RasterConfig
{
composite_mode
:
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
Blur
(
blur_radius
)
)
.
.
}
)
|
Some
(
RasterConfig
{
composite_mode
:
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
DropShadow
(
_
blur_radius
_
)
)
.
.
}
)
=
>
{
Some
(
(
blur_radius
*
BLUR_SAMPLE_SCALE
)
.
ceil
(
)
)
}
_
=
>
{
None
}
}
;
if
let
Some
(
inflation_size
)
=
inflation_size
{
let
surface
=
state
.
current_surface_mut
(
)
;
surface
.
rect
=
surface
.
rect
.
inflate
(
inflation_size
inflation_size
)
;
}
self
.
prim_list
.
pictures
=
child_pictures
;
if
let
Some
(
ref
mut
raster_config
)
=
self
.
raster_config
{
let
surface_rect
=
state
.
current_surface
(
)
.
rect
;
if
let
Some
(
ref
mut
tile_cache
)
=
self
.
tile_cache
{
if
surface_rect
.
size
.
width
>
MAX_PICTURE_SIZE
|
|
surface_rect
.
size
.
height
>
MAX_PICTURE_SIZE
|
|
surface_rect
.
size
.
width
<
=
0
.
0
|
|
surface_rect
.
size
.
height
<
=
0
.
0
{
tile_cache
.
needs_update
=
false
;
tile_cache
.
tiles
.
clear
(
)
;
tile_cache
.
tile_rect
=
TileRect
:
:
zero
(
)
;
raster_config
.
composite_mode
=
PictureCompositeMode
:
:
Blit
;
}
}
let
mut
surface_rect
=
TypedRect
:
:
from_untyped
(
&
surface_rect
.
to_untyped
(
)
)
;
state
.
pop_surface
(
)
;
if
self
.
local_rect
!
=
surface_rect
{
gpu_cache
.
invalidate
(
&
self
.
gpu_location
)
;
if
let
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
DropShadow
(
.
.
)
)
=
raster_config
.
composite_mode
{
gpu_cache
.
invalidate
(
&
self
.
extra_gpu_data_handle
)
;
}
self
.
local_rect
=
surface_rect
;
}
if
let
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
DropShadow
(
offset
.
.
)
)
=
raster_config
.
composite_mode
{
let
content_rect
=
surface_rect
;
let
shadow_rect
=
surface_rect
.
translate
(
&
offset
)
;
surface_rect
=
content_rect
.
union
(
&
shadow_rect
)
;
}
let
parent_surface
=
state
.
current_surface_mut
(
)
;
parent_surface
.
map_local_to_surface
.
set_target_spatial_node
(
self
.
spatial_node_index
frame_context
.
clip_scroll_tree
)
;
if
let
Some
(
parent_surface_rect
)
=
parent_surface
.
map_local_to_surface
.
map
(
&
surface_rect
)
{
parent_surface
.
rect
=
parent_surface
.
rect
.
union
(
&
parent_surface_rect
)
;
}
}
}
pub
fn
prepare_for_render
(
&
mut
self
pic_index
:
PictureIndex
prim_instance
:
&
PrimitiveInstance
prim_local_rect
:
&
LayoutRect
clipped_prim_bounding_rect
:
WorldRect
surface_index
:
SurfaceIndex
frame_context
:
&
FrameBuildingContext
frame_state
:
&
mut
FrameBuildingState
)
-
>
bool
{
let
(
mut
pic_state_for_children
pic_context
)
=
self
.
take_state_and_context
(
)
;
if
let
Some
(
ref
mut
splitter
)
=
pic_state_for_children
.
plane_splitter
{
self
.
resolve_split_planes
(
splitter
frame_state
frame_context
.
clip_scroll_tree
)
;
}
let
raster_config
=
match
self
.
raster_config
{
Some
(
ref
mut
raster_config
)
=
>
raster_config
None
=
>
{
return
true
}
}
;
let
(
raster_spatial_node_index
child_tasks
)
=
{
let
surface_info
=
&
mut
frame_state
.
surfaces
[
raster_config
.
surface_index
.
0
]
;
(
surface_info
.
raster_spatial_node_index
surface_info
.
take_render_tasks
(
)
)
}
;
let
surfaces
=
&
mut
frame_state
.
surfaces
;
let
(
map_raster_to_world
map_pic_to_raster
)
=
create_raster_mappers
(
prim_instance
.
spatial_node_index
raster_spatial_node_index
pic_context
.
dirty_world_rect
frame_context
.
clip_scroll_tree
)
;
let
pic_rect
=
PictureRect
:
:
from_untyped
(
&
prim_local_rect
.
to_untyped
(
)
)
;
let
(
clipped
unclipped
)
=
match
get_raster_rects
(
pic_rect
&
map_pic_to_raster
&
map_raster_to_world
clipped_prim_bounding_rect
frame_context
.
device_pixel_scale
)
{
Some
(
info
)
=
>
info
None
=
>
return
false
}
;
let
transform
=
map_pic_to_raster
.
get_transform
(
)
;
let
surface
=
match
raster_config
.
composite_mode
{
PictureCompositeMode
:
:
TileCache
{
clear_color
.
.
}
=
>
{
let
tile_cache
=
self
.
tile_cache
.
as_mut
(
)
.
unwrap
(
)
;
match
tile_cache
.
dirty_region
{
Some
(
ref
dirty_region
)
=
>
{
let
descriptor
=
ImageDescriptor
:
:
new
(
TILE_SIZE_WIDTH
TILE_SIZE_HEIGHT
ImageFormat
:
:
BGRA8
true
false
)
;
let
p0
=
pic_rect
.
origin
;
let
p1
=
pic_rect
.
bottom_right
(
)
;
let
local_tile_size
=
tile_cache
.
local_tile_size
;
let
aligned_pic_rect
=
PictureRect
:
:
from_floats
(
(
p0
.
x
/
local_tile_size
.
width
)
.
floor
(
)
*
local_tile_size
.
width
(
p0
.
y
/
local_tile_size
.
height
)
.
floor
(
)
*
local_tile_size
.
height
(
p1
.
x
/
local_tile_size
.
width
)
.
ceil
(
)
*
local_tile_size
.
width
(
p1
.
y
/
local_tile_size
.
height
)
.
ceil
(
)
*
local_tile_size
.
height
)
;
let
mut
blits
=
Vec
:
:
new
(
)
;
for
y
in
0
.
.
tile_cache
.
tile_rect
.
size
.
height
{
for
x
in
0
.
.
tile_cache
.
tile_rect
.
size
.
width
{
let
i
=
y
*
tile_cache
.
tile_rect
.
size
.
width
+
x
;
let
tile
=
&
mut
tile_cache
.
tiles
[
i
as
usize
]
;
if
!
tile
.
is_valid
&
&
tile
.
is_visible
&
&
tile
.
in_use
{
frame_state
.
resource_cache
.
texture_cache
.
update
(
&
mut
tile
.
handle
descriptor
TextureFilter
:
:
Linear
None
[
0
.
0
;
3
]
DirtyRect
:
:
All
frame_state
.
gpu_cache
None
UvRectKind
:
:
Rect
Eviction
:
:
Eager
)
;
let
cache_item
=
frame_state
.
resource_cache
.
get_texture_cache_item
(
&
tile
.
handle
)
;
let
offset
=
DeviceIntPoint
:
:
new
(
(
x
-
dirty_region
.
tile_offset
.
x
)
*
TILE_SIZE_WIDTH
(
y
-
dirty_region
.
tile_offset
.
y
)
*
TILE_SIZE_HEIGHT
)
;
blits
.
push
(
TileBlit
{
target
:
cache_item
offset
}
)
;
tile
.
is_valid
=
true
;
}
}
}
let
clipped_rect
=
dirty_region
.
dirty_world_rect
;
let
(
clipped
unclipped
)
=
match
get_raster_rects
(
aligned_pic_rect
&
map_pic_to_raster
&
map_raster_to_world
clipped_rect
frame_context
.
device_pixel_scale
)
{
Some
(
info
)
=
>
info
None
=
>
{
return
false
;
}
}
;
let
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
clipped
.
size
)
unclipped
.
size
pic_index
clipped
.
origin
child_tasks
UvRectKind
:
:
Rect
pic_context
.
raster_spatial_node_index
Some
(
clear_color
)
blits
)
;
let
render_task_id
=
frame_state
.
render_tasks
.
add
(
picture_task
)
;
surfaces
[
surface_index
.
0
]
.
tasks
.
push
(
render_task_id
)
;
PictureSurface
:
:
RenderTask
(
render_task_id
)
}
None
=
>
{
return
true
;
}
}
}
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
Blur
(
blur_radius
)
)
=
>
{
let
blur_std_deviation
=
blur_radius
*
frame_context
.
device_pixel_scale
.
0
;
let
blur_range
=
(
blur_std_deviation
*
BLUR_SAMPLE_SCALE
)
.
ceil
(
)
as
i32
;
const
MAX_CACHE_SIZE
:
f32
=
2048
.
0
;
let
too_big_to_cache
=
unclipped
.
size
.
width
>
MAX_CACHE_SIZE
|
|
unclipped
.
size
.
height
>
MAX_CACHE_SIZE
;
let
has_valid_cache_key
=
self
.
surface_desc
.
is_some
(
)
;
if
!
has_valid_cache_key
|
|
too_big_to_cache
|
|
!
pic_state_for_children
.
is_cacheable
{
let
device_rect
=
clipped
.
inflate
(
blur_range
blur_range
)
.
intersection
(
&
unclipped
.
to_i32
(
)
)
.
unwrap
(
)
;
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
device_rect
frame_context
.
device_pixel_scale
)
;
let
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
device_rect
.
size
)
unclipped
.
size
pic_index
device_rect
.
origin
child_tasks
uv_rect_kind
pic_context
.
raster_spatial_node_index
None
Vec
:
:
new
(
)
)
;
let
picture_task_id
=
frame_state
.
render_tasks
.
add
(
picture_task
)
;
let
blur_render_task
=
RenderTask
:
:
new_blur
(
blur_std_deviation
picture_task_id
frame_state
.
render_tasks
RenderTargetKind
:
:
Color
ClearMode
:
:
Transparent
)
;
let
render_task_id
=
frame_state
.
render_tasks
.
add
(
blur_render_task
)
;
surfaces
[
surface_index
.
0
]
.
tasks
.
push
(
render_task_id
)
;
PictureSurface
:
:
RenderTask
(
render_task_id
)
}
else
{
let
device_rect
=
unclipped
.
to_i32
(
)
;
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
device_rect
frame_context
.
device_pixel_scale
)
;
let
cache_key
=
self
.
surface_desc
.
as_ref
(
)
.
expect
(
"
bug
:
no
cache
key
for
surface
"
)
.
cache_key
.
clone
(
)
;
let
cache_item
=
frame_state
.
resource_cache
.
request_render_task
(
RenderTaskCacheKey
{
size
:
device_rect
.
size
kind
:
RenderTaskCacheKeyKind
:
:
Picture
(
cache_key
)
}
frame_state
.
gpu_cache
frame_state
.
render_tasks
None
false
|
render_tasks
|
{
let
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
device_rect
.
size
)
unclipped
.
size
pic_index
device_rect
.
origin
child_tasks
uv_rect_kind
pic_context
.
raster_spatial_node_index
None
Vec
:
:
new
(
)
)
;
let
picture_task_id
=
render_tasks
.
add
(
picture_task
)
;
let
blur_render_task
=
RenderTask
:
:
new_blur
(
blur_std_deviation
picture_task_id
render_tasks
RenderTargetKind
:
:
Color
ClearMode
:
:
Transparent
)
;
let
render_task_id
=
render_tasks
.
add
(
blur_render_task
)
;
surfaces
[
surface_index
.
0
]
.
tasks
.
push
(
render_task_id
)
;
render_task_id
}
)
;
PictureSurface
:
:
TextureCache
(
cache_item
)
}
}
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
DropShadow
(
offset
blur_radius
color
)
)
=
>
{
let
blur_std_deviation
=
blur_radius
*
frame_context
.
device_pixel_scale
.
0
;
let
blur_range
=
(
blur_std_deviation
*
BLUR_SAMPLE_SCALE
)
.
ceil
(
)
as
i32
;
let
device_rect
=
clipped
.
inflate
(
blur_range
blur_range
)
.
intersection
(
&
unclipped
.
to_i32
(
)
)
.
unwrap
(
)
;
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
device_rect
frame_context
.
device_pixel_scale
)
;
let
mut
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
device_rect
.
size
)
unclipped
.
size
pic_index
device_rect
.
origin
child_tasks
uv_rect_kind
pic_context
.
raster_spatial_node_index
None
Vec
:
:
new
(
)
)
;
picture_task
.
mark_for_saving
(
)
;
let
picture_task_id
=
frame_state
.
render_tasks
.
add
(
picture_task
)
;
let
blur_render_task
=
RenderTask
:
:
new_blur
(
blur_std_deviation
.
round
(
)
picture_task_id
frame_state
.
render_tasks
RenderTargetKind
:
:
Color
ClearMode
:
:
Transparent
)
;
self
.
secondary_render_task_id
=
Some
(
picture_task_id
)
;
let
render_task_id
=
frame_state
.
render_tasks
.
add
(
blur_render_task
)
;
surfaces
[
surface_index
.
0
]
.
tasks
.
push
(
render_task_id
)
;
if
let
Some
(
mut
request
)
=
frame_state
.
gpu_cache
.
request
(
&
mut
self
.
extra_gpu_data_handle
)
{
let
shadow_rect
=
prim_local_rect
.
translate
(
&
offset
)
;
request
.
push
(
color
.
premultiplied
(
)
)
;
request
.
push
(
PremultipliedColorF
:
:
WHITE
)
;
request
.
push
(
[
prim_local_rect
.
size
.
width
prim_local_rect
.
size
.
height
0
.
0
0
.
0
]
)
;
request
.
push
(
shadow_rect
)
;
request
.
push
(
[
0
.
0
0
.
0
0
.
0
0
.
0
]
)
;
}
PictureSurface
:
:
RenderTask
(
render_task_id
)
}
PictureCompositeMode
:
:
MixBlend
(
.
.
)
=
>
{
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
clipped
frame_context
.
device_pixel_scale
)
;
let
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
clipped
.
size
)
unclipped
.
size
pic_index
clipped
.
origin
child_tasks
uv_rect_kind
pic_context
.
raster_spatial_node_index
None
Vec
:
:
new
(
)
)
;
let
readback_task_id
=
frame_state
.
render_tasks
.
add
(
RenderTask
:
:
new_readback
(
clipped
)
)
;
self
.
secondary_render_task_id
=
Some
(
readback_task_id
)
;
surfaces
[
surface_index
.
0
]
.
tasks
.
push
(
readback_task_id
)
;
let
render_task_id
=
frame_state
.
render_tasks
.
add
(
picture_task
)
;
surfaces
[
surface_index
.
0
]
.
tasks
.
push
(
render_task_id
)
;
PictureSurface
:
:
RenderTask
(
render_task_id
)
}
PictureCompositeMode
:
:
Filter
(
filter
)
=
>
{
if
let
FilterOp
:
:
ColorMatrix
(
m
)
=
filter
{
if
let
Some
(
mut
request
)
=
frame_state
.
gpu_cache
.
request
(
&
mut
self
.
extra_gpu_data_handle
)
{
for
i
in
0
.
.
5
{
request
.
push
(
[
m
[
i
*
4
]
m
[
i
*
4
+
1
]
m
[
i
*
4
+
2
]
m
[
i
*
4
+
3
]
]
)
;
}
}
}
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
clipped
frame_context
.
device_pixel_scale
)
;
let
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
clipped
.
size
)
unclipped
.
size
pic_index
clipped
.
origin
child_tasks
uv_rect_kind
pic_context
.
raster_spatial_node_index
None
Vec
:
:
new
(
)
)
;
let
render_task_id
=
frame_state
.
render_tasks
.
add
(
picture_task
)
;
surfaces
[
surface_index
.
0
]
.
tasks
.
push
(
render_task_id
)
;
PictureSurface
:
:
RenderTask
(
render_task_id
)
}
PictureCompositeMode
:
:
Blit
=
>
{
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
clipped
frame_context
.
device_pixel_scale
)
;
let
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
clipped
.
size
)
unclipped
.
size
pic_index
clipped
.
origin
child_tasks
uv_rect_kind
pic_context
.
raster_spatial_node_index
None
Vec
:
:
new
(
)
)
;
let
render_task_id
=
frame_state
.
render_tasks
.
add
(
picture_task
)
;
surfaces
[
surface_index
.
0
]
.
tasks
.
push
(
render_task_id
)
;
PictureSurface
:
:
RenderTask
(
render_task_id
)
}
}
;
surfaces
[
raster_config
.
surface_index
.
0
]
.
surface
=
Some
(
surface
)
;
true
}
}
fn
calculate_screen_uv
(
local_pos
:
&
PicturePoint
transform
:
&
PictureToRasterTransform
rendered_rect
:
&
DeviceRect
device_pixel_scale
:
DevicePixelScale
)
-
>
DevicePoint
{
let
raster_pos
=
match
transform
.
transform_point2d
(
local_pos
)
{
Some
(
pos
)
=
>
pos
None
=
>
{
return
DevicePoint
:
:
new
(
0
.
5
0
.
5
)
;
}
}
;
let
raster_to_device_space
=
TypedScale
:
:
new
(
1
.
0
)
*
device_pixel_scale
;
let
mut
device_pos
=
raster_pos
*
raster_to_device_space
;
if
transform
.
transform_kind
(
)
=
=
TransformedRectKind
:
:
AxisAligned
{
device_pos
.
x
=
(
device_pos
.
x
+
0
.
5
)
.
floor
(
)
;
device_pos
.
y
=
(
device_pos
.
y
+
0
.
5
)
.
floor
(
)
;
}
DevicePoint
:
:
new
(
(
device_pos
.
x
-
rendered_rect
.
origin
.
x
)
/
rendered_rect
.
size
.
width
(
device_pos
.
y
-
rendered_rect
.
origin
.
y
)
/
rendered_rect
.
size
.
height
)
}
fn
calculate_uv_rect_kind
(
pic_rect
:
&
PictureRect
transform
:
&
PictureToRasterTransform
rendered_rect
:
&
DeviceIntRect
device_pixel_scale
:
DevicePixelScale
)
-
>
UvRectKind
{
let
rendered_rect
=
rendered_rect
.
to_f32
(
)
;
let
top_left
=
calculate_screen_uv
(
&
pic_rect
.
origin
transform
&
rendered_rect
device_pixel_scale
)
;
let
top_right
=
calculate_screen_uv
(
&
pic_rect
.
top_right
(
)
transform
&
rendered_rect
device_pixel_scale
)
;
let
bottom_left
=
calculate_screen_uv
(
&
pic_rect
.
bottom_left
(
)
transform
&
rendered_rect
device_pixel_scale
)
;
let
bottom_right
=
calculate_screen_uv
(
&
pic_rect
.
bottom_right
(
)
transform
&
rendered_rect
device_pixel_scale
)
;
UvRectKind
:
:
Quad
{
top_left
top_right
bottom_left
bottom_right
}
}
fn
create_raster_mappers
(
surface_spatial_node_index
:
SpatialNodeIndex
raster_spatial_node_index
:
SpatialNodeIndex
dirty_world_rect
:
WorldRect
clip_scroll_tree
:
&
ClipScrollTree
)
-
>
(
SpaceMapper
<
RasterPixel
WorldPixel
>
SpaceMapper
<
PicturePixel
RasterPixel
>
)
{
let
map_raster_to_world
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
raster_spatial_node_index
dirty_world_rect
clip_scroll_tree
)
;
let
raster_bounds
=
map_raster_to_world
.
unmap
(
&
dirty_world_rect
)
.
unwrap_or
(
RasterRect
:
:
max_rect
(
)
)
;
let
map_pic_to_raster
=
SpaceMapper
:
:
new_with_target
(
raster_spatial_node_index
surface_spatial_node_index
raster_bounds
clip_scroll_tree
)
;
(
map_raster_to_world
map_pic_to_raster
)
}
fn
get_global_transform_changed
(
global_transforms
:
&
mut
[
GlobalTransformInfo
]
spatial_node_index
:
SpatialNodeIndex
clip_scroll_tree
:
&
ClipScrollTree
surface_spatial_node_index
:
SpatialNodeIndex
)
-
>
bool
{
let
transform
=
&
mut
global_transforms
[
spatial_node_index
.
0
]
;
if
transform
.
current
.
is_none
(
)
{
let
mapping
:
CoordinateSpaceMapping
<
LayoutPixel
PicturePixel
>
=
CoordinateSpaceMapping
:
:
new
(
surface_spatial_node_index
spatial_node_index
clip_scroll_tree
)
.
expect
(
"
todo
:
handle
invalid
mappings
"
)
;
transform
.
current
=
Some
(
mapping
.
into
(
)
)
;
transform
.
changed
=
true
;
}
transform
.
changed
}
