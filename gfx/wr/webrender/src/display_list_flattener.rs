use
api
:
:
{
AlphaType
BorderDetails
BorderDisplayItem
BuiltDisplayListIter
}
;
use
api
:
:
{
ClipId
ColorF
CommonItemProperties
ComplexClipRegion
ComponentTransferFuncType
RasterSpace
}
;
use
api
:
:
{
DisplayItem
DisplayItemRef
ExtendMode
ExternalScrollId
FilterData
}
;
use
api
:
:
{
FilterOp
FilterPrimitive
FontInstanceKey
GlyphInstance
GlyphOptions
GradientStop
}
;
use
api
:
:
{
IframeDisplayItem
ImageKey
ImageRendering
ItemRange
ColorDepth
}
;
use
api
:
:
{
LineOrientation
LineStyle
NinePatchBorderSource
PipelineId
MixBlendMode
}
;
use
api
:
:
{
PropertyBinding
ReferenceFrame
ReferenceFrameKind
ScrollFrameDisplayItem
ScrollSensitivity
}
;
use
api
:
:
{
Shadow
SpaceAndClipInfo
SpatialId
StackingContext
StickyFrameDisplayItem
}
;
use
api
:
:
{
ClipMode
PrimitiveKeyKind
TransformStyle
YuvColorSpace
ColorRange
YuvData
TempFilterData
}
;
use
api
:
:
units
:
:
*
;
use
crate
:
:
clip
:
:
{
ClipChainId
ClipRegion
ClipItemKey
ClipStore
}
;
use
crate
:
:
clip_scroll_tree
:
:
{
ROOT_SPATIAL_NODE_INDEX
ClipScrollTree
SpatialNodeIndex
}
;
use
crate
:
:
frame_builder
:
:
{
ChasePrimitive
FrameBuilder
FrameBuilderConfig
}
;
use
crate
:
:
glyph_rasterizer
:
:
FontInstance
;
use
crate
:
:
hit_test
:
:
{
HitTestingItem
HitTestingScene
}
;
use
crate
:
:
image
:
:
simplify_repeated_primitive
;
use
crate
:
:
intern
:
:
Interner
;
use
crate
:
:
internal_types
:
:
{
FastHashMap
FastHashSet
LayoutPrimitiveInfo
Filter
}
;
use
crate
:
:
picture
:
:
{
Picture3DContext
PictureCompositeMode
PicturePrimitive
PictureOptions
}
;
use
crate
:
:
picture
:
:
{
BlitReason
OrderedPictureChild
PrimitiveList
TileCacheInstance
}
;
use
crate
:
:
prim_store
:
:
{
PrimitiveInstance
PrimitiveSceneData
}
;
use
crate
:
:
prim_store
:
:
{
PrimitiveInstanceKind
NinePatchDescriptor
PrimitiveStore
}
;
use
crate
:
:
prim_store
:
:
{
ScrollNodeAndClipChain
PictureIndex
}
;
use
crate
:
:
prim_store
:
:
{
InternablePrimitive
SegmentInstanceIndex
}
;
use
crate
:
:
prim_store
:
:
{
register_prim_chase_id
get_line_decoration_sizes
}
;
use
crate
:
:
prim_store
:
:
backdrop
:
:
Backdrop
;
use
crate
:
:
prim_store
:
:
borders
:
:
{
ImageBorder
NormalBorderPrim
}
;
use
crate
:
:
prim_store
:
:
gradient
:
:
{
GradientStopKey
LinearGradient
RadialGradient
RadialGradientParams
}
;
use
crate
:
:
prim_store
:
:
image
:
:
{
Image
YuvImage
}
;
use
crate
:
:
prim_store
:
:
line_dec
:
:
{
LineDecoration
LineDecorationCacheKey
}
;
use
crate
:
:
prim_store
:
:
picture
:
:
{
Picture
PictureCompositeKey
PictureKey
}
;
use
crate
:
:
prim_store
:
:
text_run
:
:
TextRun
;
use
crate
:
:
render_backend
:
:
{
DocumentView
}
;
use
crate
:
:
resource_cache
:
:
{
FontInstanceMap
ImageRequest
}
;
use
crate
:
:
scene
:
:
{
Scene
StackingContextHelpers
}
;
use
crate
:
:
scene_builder
:
:
{
DocumentStats
Interners
}
;
use
crate
:
:
spatial_node
:
:
{
StickyFrameInfo
ScrollFrameKind
}
;
use
std
:
:
{
f32
mem
usize
ops
}
;
use
std
:
:
collections
:
:
vec_deque
:
:
VecDeque
;
use
std
:
:
sync
:
:
Arc
;
use
crate
:
:
util
:
:
{
MaxRect
VecHelper
}
;
use
crate
:
:
filterdata
:
:
{
SFilterDataComponent
SFilterData
SFilterDataKey
}
;
#
[
derive
(
Debug
Copy
Clone
)
]
struct
ClipNode
{
id
:
ClipChainId
count
:
usize
}
impl
ClipNode
{
fn
new
(
id
:
ClipChainId
count
:
usize
)
-
>
Self
{
ClipNode
{
id
count
}
}
}
struct
ReferenceFrameState
{
offsets
:
Vec
<
LayoutVector2D
>
}
struct
ReferenceFrameMapper
{
frames
:
Vec
<
ReferenceFrameState
>
}
impl
ReferenceFrameMapper
{
fn
new
(
)
-
>
Self
{
ReferenceFrameMapper
{
frames
:
vec
!
[
ReferenceFrameState
{
offsets
:
vec
!
[
LayoutVector2D
:
:
zero
(
)
]
}
]
}
}
fn
push_scope
(
&
mut
self
)
{
self
.
frames
.
push
(
ReferenceFrameState
{
offsets
:
vec
!
[
LayoutVector2D
:
:
zero
(
)
]
}
)
;
}
fn
pop_scope
(
&
mut
self
)
{
self
.
frames
.
pop
(
)
.
unwrap
(
)
;
}
fn
push_offset
(
&
mut
self
offset
:
LayoutVector2D
)
{
let
frame
=
self
.
frames
.
last_mut
(
)
.
unwrap
(
)
;
let
current_offset
=
*
frame
.
offsets
.
last
(
)
.
unwrap
(
)
;
frame
.
offsets
.
push
(
current_offset
+
offset
)
;
}
fn
pop_offset
(
&
mut
self
)
{
let
frame
=
self
.
frames
.
last_mut
(
)
.
unwrap
(
)
;
frame
.
offsets
.
pop
(
)
.
unwrap
(
)
;
}
fn
current_offset
(
&
self
)
-
>
LayoutVector2D
{
*
self
.
frames
.
last
(
)
.
unwrap
(
)
.
offsets
.
last
(
)
.
unwrap
(
)
}
}
pub
struct
ScrollOffsetMapper
{
pub
current_spatial_node
:
SpatialNodeIndex
pub
current_offset
:
LayoutVector2D
}
impl
ScrollOffsetMapper
{
fn
new
(
)
-
>
Self
{
ScrollOffsetMapper
{
current_spatial_node
:
SpatialNodeIndex
:
:
INVALID
current_offset
:
LayoutVector2D
:
:
zero
(
)
}
}
fn
external_scroll_offset
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
clip_scroll_tree
:
&
ClipScrollTree
)
-
>
LayoutVector2D
{
if
spatial_node_index
!
=
self
.
current_spatial_node
{
self
.
current_spatial_node
=
spatial_node_index
;
self
.
current_offset
=
clip_scroll_tree
.
external_scroll_offset
(
spatial_node_index
)
;
}
self
.
current_offset
}
}
#
[
derive
(
Default
)
]
pub
struct
NodeIdToIndexMapper
{
clip_node_map
:
FastHashMap
<
ClipId
ClipNode
>
spatial_node_map
:
FastHashMap
<
SpatialId
SpatialNodeIndex
>
}
impl
NodeIdToIndexMapper
{
pub
fn
add_clip_chain
(
&
mut
self
id
:
ClipId
index
:
ClipChainId
count
:
usize
)
{
let
_old_value
=
self
.
clip_node_map
.
insert
(
id
ClipNode
:
:
new
(
index
count
)
)
;
debug_assert
!
(
_old_value
.
is_none
(
)
)
;
}
pub
fn
map_spatial_node
(
&
mut
self
id
:
SpatialId
index
:
SpatialNodeIndex
)
{
let
_old_value
=
self
.
spatial_node_map
.
insert
(
id
index
)
;
debug_assert
!
(
_old_value
.
is_none
(
)
)
;
}
fn
get_clip_node
(
&
self
id
:
&
ClipId
)
-
>
ClipNode
{
self
.
clip_node_map
[
id
]
}
pub
fn
get_clip_chain_id
(
&
self
id
:
ClipId
)
-
>
ClipChainId
{
self
.
clip_node_map
[
&
id
]
.
id
}
pub
fn
get_spatial_node_index
(
&
self
id
:
SpatialId
)
-
>
SpatialNodeIndex
{
self
.
spatial_node_map
[
&
id
]
}
}
#
[
derive
(
Debug
Clone
Default
)
]
pub
struct
CompositeOps
{
pub
filters
:
Vec
<
Filter
>
pub
filter_datas
:
Vec
<
FilterData
>
pub
filter_primitives
:
Vec
<
FilterPrimitive
>
pub
mix_blend_mode
:
Option
<
MixBlendMode
>
}
impl
CompositeOps
{
pub
fn
new
(
filters
:
Vec
<
Filter
>
filter_datas
:
Vec
<
FilterData
>
filter_primitives
:
Vec
<
FilterPrimitive
>
mix_blend_mode
:
Option
<
MixBlendMode
>
)
-
>
Self
{
CompositeOps
{
filters
filter_datas
filter_primitives
mix_blend_mode
}
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
filters
.
is_empty
(
)
&
&
self
.
filter_primitives
.
is_empty
(
)
&
&
self
.
mix_blend_mode
.
is_none
(
)
}
}
pub
struct
DisplayListFlattener
<
'
a
>
{
scene
:
&
'
a
Scene
clip_scroll_tree
:
&
'
a
mut
ClipScrollTree
font_instances
:
FontInstanceMap
output_pipelines
:
&
'
a
FastHashSet
<
PipelineId
>
id_to_index_mapper
:
NodeIdToIndexMapper
sc_stack
:
Vec
<
FlattenedStackingContext
>
pending_shadow_items
:
VecDeque
<
ShadowItem
>
pipeline_clip_chain_stack
:
Vec
<
ClipChainId
>
pub
prim_store
:
PrimitiveStore
pub
hit_testing_scene
:
HitTestingScene
pub
clip_store
:
ClipStore
pub
config
:
FrameBuilderConfig
interners
:
&
'
a
mut
Interners
pub
root_pic_index
:
PictureIndex
rf_mapper
:
ReferenceFrameMapper
external_scroll_mapper
:
ScrollOffsetMapper
found_explicit_tile_cache
:
bool
}
impl
<
'
a
>
DisplayListFlattener
<
'
a
>
{
pub
fn
create_frame_builder
(
scene
:
&
Scene
clip_scroll_tree
:
&
mut
ClipScrollTree
font_instances
:
FontInstanceMap
view
:
&
DocumentView
output_pipelines
:
&
FastHashSet
<
PipelineId
>
frame_builder_config
:
&
FrameBuilderConfig
new_scene
:
&
mut
Scene
interners
:
&
mut
Interners
doc_stats
:
&
DocumentStats
)
-
>
FrameBuilder
{
let
root_pipeline_id
=
scene
.
root_pipeline_id
.
unwrap
(
)
;
let
root_pipeline
=
scene
.
pipelines
.
get
(
&
root_pipeline_id
)
.
unwrap
(
)
;
let
background_color
=
root_pipeline
.
background_color
.
and_then
(
|
color
|
if
color
.
a
>
0
.
0
{
Some
(
color
)
}
else
{
None
}
)
;
let
mut
flattener
=
DisplayListFlattener
{
scene
clip_scroll_tree
font_instances
config
:
*
frame_builder_config
output_pipelines
id_to_index_mapper
:
NodeIdToIndexMapper
:
:
default
(
)
hit_testing_scene
:
HitTestingScene
:
:
new
(
&
doc_stats
.
hit_test_stats
)
pending_shadow_items
:
VecDeque
:
:
new
(
)
sc_stack
:
Vec
:
:
new
(
)
pipeline_clip_chain_stack
:
vec
!
[
ClipChainId
:
:
NONE
]
prim_store
:
PrimitiveStore
:
:
new
(
&
doc_stats
.
prim_store_stats
)
clip_store
:
ClipStore
:
:
new
(
)
interners
root_pic_index
:
PictureIndex
(
0
)
rf_mapper
:
ReferenceFrameMapper
:
:
new
(
)
external_scroll_mapper
:
ScrollOffsetMapper
:
:
new
(
)
found_explicit_tile_cache
:
false
}
;
flattener
.
push_root
(
root_pipeline_id
&
root_pipeline
.
viewport_size
&
root_pipeline
.
content_size
)
;
flattener
.
push_stacking_context
(
root_pipeline
.
pipeline_id
CompositeOps
:
:
default
(
)
TransformStyle
:
:
Flat
true
false
ROOT_SPATIAL_NODE_INDEX
ClipChainId
:
:
NONE
RasterSpace
:
:
Screen
true
)
;
flattener
.
flatten_items
(
&
mut
root_pipeline
.
display_list
.
iter
(
)
root_pipeline
.
pipeline_id
true
)
;
flattener
.
pop_stacking_context
(
)
;
debug_assert
!
(
flattener
.
sc_stack
.
is_empty
(
)
)
;
new_scene
.
root_pipeline_id
=
Some
(
root_pipeline_id
)
;
new_scene
.
pipeline_epochs
=
scene
.
pipeline_epochs
.
clone
(
)
;
new_scene
.
pipelines
=
scene
.
pipelines
.
clone
(
)
;
FrameBuilder
:
:
with_display_list_flattener
(
view
.
device_rect
.
size
.
into
(
)
background_color
flattener
)
}
fn
current_offset
(
&
mut
self
spatial_node_index
:
SpatialNodeIndex
)
-
>
LayoutVector2D
{
let
rf_offset
=
self
.
rf_mapper
.
current_offset
(
)
;
let
scroll_offset
=
self
.
external_scroll_mapper
.
external_scroll_offset
(
spatial_node_index
&
self
.
clip_scroll_tree
)
;
rf_offset
+
scroll_offset
}
fn
setup_picture_caching
(
&
mut
self
primitives
:
&
mut
Vec
<
PrimitiveInstance
>
)
{
if
!
self
.
config
.
enable_picture_caching
{
return
;
}
let
mut
first_index
=
None
;
let
mut
main_scroll_root
=
None
;
let
mut
clip_chain_instances
=
Vec
:
:
new
(
)
;
let
mut
clip_chain_instance_stack
=
Vec
:
:
new
(
)
;
#
[
derive
(
Debug
)
]
struct
ClipChainPairInfo
{
push_index
:
usize
pop_index
:
usize
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
}
for
(
i
instance
)
in
primitives
.
iter
(
)
.
enumerate
(
)
{
let
scroll_root
=
self
.
clip_scroll_tree
.
find_scroll_root
(
instance
.
spatial_node_index
)
;
match
instance
.
kind
{
PrimitiveInstanceKind
:
:
PushClipChain
=
>
{
clip_chain_instance_stack
.
push
(
clip_chain_instances
.
len
(
)
)
;
clip_chain_instances
.
push
(
ClipChainPairInfo
{
push_index
:
i
pop_index
:
usize
:
:
MAX
spatial_node_index
:
instance
.
spatial_node_index
clip_chain_id
:
instance
.
clip_chain_id
}
)
;
}
PrimitiveInstanceKind
:
:
PopClipChain
=
>
{
let
index
=
clip_chain_instance_stack
.
pop
(
)
.
unwrap
(
)
;
let
clip_chain_instance
=
&
mut
clip_chain_instances
[
index
]
;
debug_assert_eq
!
(
clip_chain_instance
.
pop_index
usize
:
:
MAX
)
;
debug_assert_eq
!
(
clip_chain_instance
.
clip_chain_id
instance
.
clip_chain_id
)
;
debug_assert_eq
!
(
clip_chain_instance
.
spatial_node_index
instance
.
spatial_node_index
)
;
clip_chain_instance
.
pop_index
=
i
;
}
_
=
>
{
}
}
if
scroll_root
!
=
ROOT_SPATIAL_NODE_INDEX
{
match
main_scroll_root
{
Some
(
main_scroll_root
)
=
>
{
if
main_scroll_root
!
=
scroll_root
{
return
;
}
}
None
=
>
{
main_scroll_root
=
Some
(
scroll_root
)
;
}
}
if
first_index
.
is_none
(
)
{
first_index
=
Some
(
i
)
;
}
}
}
let
main_scroll_root
=
match
main_scroll_root
{
Some
(
main_scroll_root
)
=
>
main_scroll_root
None
=
>
ROOT_SPATIAL_NODE_INDEX
}
;
let
mut
old_prim_list
=
primitives
.
take
(
)
;
let
mut
preceding_prims
;
let
mut
remaining_prims
;
let
mut
trailing_prims
;
match
first_index
{
Some
(
first_index
)
=
>
{
remaining_prims
=
old_prim_list
.
split_off
(
first_index
)
;
let
last_index
=
remaining_prims
.
iter
(
)
.
rposition
(
|
instance
|
{
let
scroll_root
=
self
.
clip_scroll_tree
.
find_scroll_root
(
instance
.
spatial_node_index
)
;
scroll_root
!
=
ROOT_SPATIAL_NODE_INDEX
}
)
.
unwrap_or
(
remaining_prims
.
len
(
)
-
1
)
;
preceding_prims
=
old_prim_list
;
trailing_prims
=
remaining_prims
.
split_off
(
last_index
+
1
)
;
}
None
=
>
{
preceding_prims
=
Vec
:
:
new
(
)
;
remaining_prims
=
old_prim_list
;
trailing_prims
=
Vec
:
:
new
(
)
;
}
}
let
mid_index
=
preceding_prims
.
len
(
)
;
let
post_index
=
mid_index
+
remaining_prims
.
len
(
)
;
for
clip_chain_instance
in
clip_chain_instances
{
if
clip_chain_instance
.
push_index
<
mid_index
&
&
clip_chain_instance
.
pop_index
>
=
mid_index
{
preceding_prims
.
push
(
create_clip_prim_instance
(
clip_chain_instance
.
spatial_node_index
clip_chain_instance
.
clip_chain_id
PrimitiveInstanceKind
:
:
PopClipChain
)
)
;
remaining_prims
.
insert
(
0
create_clip_prim_instance
(
clip_chain_instance
.
spatial_node_index
clip_chain_instance
.
clip_chain_id
PrimitiveInstanceKind
:
:
PushClipChain
)
)
;
}
if
clip_chain_instance
.
push_index
<
post_index
&
&
clip_chain_instance
.
pop_index
>
=
post_index
{
remaining_prims
.
push
(
create_clip_prim_instance
(
clip_chain_instance
.
spatial_node_index
clip_chain_instance
.
clip_chain_id
PrimitiveInstanceKind
:
:
PopClipChain
)
)
;
trailing_prims
.
insert
(
0
create_clip_prim_instance
(
clip_chain_instance
.
spatial_node_index
clip_chain_instance
.
clip_chain_id
PrimitiveInstanceKind
:
:
PushClipChain
)
)
;
}
}
let
prim_list
=
PrimitiveList
:
:
new
(
remaining_prims
&
self
.
interners
)
;
let
pic_key
=
PictureKey
:
:
new
(
true
LayoutSize
:
:
zero
(
)
Picture
{
composite_mode_key
:
PictureCompositeKey
:
:
Identity
}
)
;
let
pic_data_handle
=
self
.
interners
.
picture
.
intern
(
&
pic_key
|
|
{
PrimitiveSceneData
{
prim_size
:
LayoutSize
:
:
zero
(
)
is_backface_visible
:
true
}
}
)
;
let
tile_cache
=
Box
:
:
new
(
TileCacheInstance
:
:
new
(
0
main_scroll_root
self
.
config
.
background_color
)
)
;
let
pic_index
=
self
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
Some
(
PictureCompositeMode
:
:
TileCache
{
}
)
Picture3DContext
:
:
Out
None
true
true
RasterSpace
:
:
Screen
prim_list
main_scroll_root
Some
(
tile_cache
)
PictureOptions
:
:
default
(
)
)
)
;
let
instance
=
PrimitiveInstance
:
:
new
(
LayoutPoint
:
:
zero
(
)
LayoutRect
:
:
max_rect
(
)
PrimitiveInstanceKind
:
:
Picture
{
data_handle
:
pic_data_handle
pic_index
:
PictureIndex
(
pic_index
)
segment_instance_index
:
SegmentInstanceIndex
:
:
INVALID
}
ClipChainId
:
:
NONE
main_scroll_root
)
;
primitives
.
reserve
(
preceding_prims
.
len
(
)
+
trailing_prims
.
len
(
)
+
1
)
;
primitives
.
extend
(
preceding_prims
)
;
primitives
.
push
(
instance
)
;
primitives
.
extend
(
trailing_prims
)
;
}
fn
flatten_items
(
&
mut
self
traversal
:
&
mut
BuiltDisplayListIter
<
'
a
>
pipeline_id
:
PipelineId
apply_pipeline_clip
:
bool
)
{
loop
{
let
subtraversal
=
{
let
item
=
match
traversal
.
next
(
)
{
Some
(
item
)
=
>
item
None
=
>
break
}
;
match
item
.
item
(
)
{
DisplayItem
:
:
PopReferenceFrame
|
DisplayItem
:
:
PopStackingContext
=
>
return
_
=
>
(
)
}
self
.
flatten_item
(
item
pipeline_id
apply_pipeline_clip
)
}
;
if
let
Some
(
mut
subtraversal
)
=
subtraversal
{
subtraversal
.
merge_debug_stats_from
(
traversal
)
;
*
traversal
=
subtraversal
;
}
}
if
cfg
!
(
feature
=
"
display_list_stats
"
)
{
let
stats
=
traversal
.
debug_stats
(
)
;
let
total_bytes
:
usize
=
stats
.
iter
(
)
.
map
(
|
(
_
stats
)
|
stats
.
num_bytes
)
.
sum
(
)
;
println
!
(
"
item
total
count
total
bytes
%
of
DL
bytes
bytes
per
item
"
)
;
for
(
label
stats
)
in
stats
{
println
!
(
"
{
}
{
}
{
}
kb
{
}
%
{
}
"
label
stats
.
total_count
stats
.
num_bytes
/
1000
(
(
stats
.
num_bytes
as
f32
/
total_bytes
.
max
(
1
)
as
f32
)
*
100
.
0
)
as
usize
stats
.
num_bytes
/
stats
.
total_count
.
max
(
1
)
)
;
}
println
!
(
"
"
)
;
}
}
fn
flatten_sticky_frame
(
&
mut
self
info
:
&
StickyFrameDisplayItem
parent_node_index
:
SpatialNodeIndex
)
{
let
current_offset
=
self
.
current_offset
(
parent_node_index
)
;
let
frame_rect
=
info
.
bounds
.
translate
(
current_offset
)
;
let
sticky_frame_info
=
StickyFrameInfo
:
:
new
(
frame_rect
info
.
margins
info
.
vertical_offset_bounds
info
.
horizontal_offset_bounds
info
.
previously_applied_offset
)
;
let
index
=
self
.
clip_scroll_tree
.
add_sticky_frame
(
parent_node_index
sticky_frame_info
info
.
id
.
pipeline_id
(
)
)
;
self
.
id_to_index_mapper
.
map_spatial_node
(
info
.
id
index
)
;
}
fn
flatten_scroll_frame
(
&
mut
self
item
:
&
DisplayItemRef
info
:
&
ScrollFrameDisplayItem
parent_node_index
:
SpatialNodeIndex
pipeline_id
:
PipelineId
)
{
let
current_offset
=
self
.
current_offset
(
parent_node_index
)
;
let
clip_region
=
ClipRegion
:
:
create_for_clip_node
(
info
.
clip_rect
item
.
complex_clip
(
)
.
iter
(
)
info
.
image_mask
&
current_offset
)
;
let
frame_rect
=
clip_region
.
main
;
let
content_size
=
info
.
content_rect
.
size
;
self
.
add_clip_node
(
info
.
clip_id
&
info
.
parent_space_and_clip
clip_region
)
;
self
.
add_scroll_frame
(
info
.
scroll_frame_id
parent_node_index
info
.
external_id
pipeline_id
&
frame_rect
&
content_size
info
.
scroll_sensitivity
ScrollFrameKind
:
:
Explicit
info
.
external_scroll_offset
)
;
}
fn
flatten_reference_frame
(
&
mut
self
traversal
:
&
mut
BuiltDisplayListIter
<
'
a
>
pipeline_id
:
PipelineId
parent_spatial_node
:
SpatialNodeIndex
origin
:
LayoutPoint
reference_frame
:
&
ReferenceFrame
apply_pipeline_clip
:
bool
)
{
let
current_offset
=
self
.
current_offset
(
parent_spatial_node
)
;
self
.
push_reference_frame
(
reference_frame
.
id
Some
(
parent_spatial_node
)
pipeline_id
reference_frame
.
transform_style
reference_frame
.
transform
reference_frame
.
kind
current_offset
+
origin
.
to_vector
(
)
)
;
self
.
rf_mapper
.
push_scope
(
)
;
self
.
flatten_items
(
traversal
pipeline_id
apply_pipeline_clip
)
;
self
.
rf_mapper
.
pop_scope
(
)
;
}
fn
flatten_stacking_context
(
&
mut
self
traversal
:
&
mut
BuiltDisplayListIter
<
'
a
>
pipeline_id
:
PipelineId
stacking_context
:
&
StackingContext
spatial_node_index
:
SpatialNodeIndex
origin
:
LayoutPoint
filters
:
ItemRange
<
FilterOp
>
filter_datas
:
&
[
TempFilterData
]
filter_primitives
:
ItemRange
<
FilterPrimitive
>
is_backface_visible
:
bool
apply_pipeline_clip
:
bool
)
{
if
traversal
.
current_stacking_context_empty
(
)
{
traversal
.
skip_current_stacking_context
(
)
;
return
;
}
let
composition_operations
=
{
CompositeOps
:
:
new
(
filter_ops_for_compositing
(
filters
)
filter_datas_for_compositing
(
filter_datas
)
filter_primitives_for_compositing
(
filter_primitives
)
stacking_context
.
mix_blend_mode_for_compositing
(
)
)
}
;
let
clip_chain_id
=
match
stacking_context
.
clip_id
{
Some
(
clip_id
)
=
>
self
.
id_to_index_mapper
.
get_clip_chain_id
(
clip_id
)
None
=
>
ClipChainId
:
:
NONE
}
;
self
.
push_stacking_context
(
pipeline_id
composition_operations
stacking_context
.
transform_style
is_backface_visible
stacking_context
.
cache_tiles
spatial_node_index
clip_chain_id
stacking_context
.
raster_space
stacking_context
.
is_backdrop_root
)
;
if
cfg
!
(
debug_assertions
)
&
&
apply_pipeline_clip
&
&
clip_chain_id
!
=
ClipChainId
:
:
NONE
{
let
pipeline_clip
=
self
.
pipeline_clip_chain_stack
.
last
(
)
.
unwrap
(
)
;
let
mut
found_root
=
*
pipeline_clip
=
=
ClipChainId
:
:
NONE
;
let
mut
cur_clip
=
clip_chain_id
.
clone
(
)
;
while
cur_clip
!
=
ClipChainId
:
:
NONE
{
if
cur_clip
=
=
*
pipeline_clip
{
found_root
=
true
;
break
;
}
cur_clip
=
self
.
clip_store
.
get_clip_chain
(
cur_clip
)
.
parent_clip_chain_id
;
}
debug_assert
!
(
found_root
)
;
}
self
.
rf_mapper
.
push_offset
(
origin
.
to_vector
(
)
)
;
self
.
flatten_items
(
traversal
pipeline_id
apply_pipeline_clip
&
&
clip_chain_id
=
=
ClipChainId
:
:
NONE
)
;
self
.
rf_mapper
.
pop_offset
(
)
;
self
.
pop_stacking_context
(
)
;
}
fn
flatten_iframe
(
&
mut
self
info
:
&
IframeDisplayItem
spatial_node_index
:
SpatialNodeIndex
)
{
let
iframe_pipeline_id
=
info
.
pipeline_id
;
let
pipeline
=
match
self
.
scene
.
pipelines
.
get
(
&
iframe_pipeline_id
)
{
Some
(
pipeline
)
=
>
pipeline
None
=
>
{
debug_assert
!
(
info
.
ignore_missing_pipeline
)
;
return
}
}
;
let
current_offset
=
self
.
current_offset
(
spatial_node_index
)
;
let
clip_chain_index
=
self
.
add_clip_node
(
ClipId
:
:
root
(
iframe_pipeline_id
)
&
info
.
space_and_clip
ClipRegion
:
:
create_for_clip_node_with_local_clip
(
&
info
.
clip_rect
&
current_offset
)
)
;
self
.
pipeline_clip_chain_stack
.
push
(
clip_chain_index
)
;
let
bounds
=
info
.
bounds
;
let
origin
=
current_offset
+
bounds
.
origin
.
to_vector
(
)
;
let
spatial_node_index
=
self
.
push_reference_frame
(
SpatialId
:
:
root_reference_frame
(
iframe_pipeline_id
)
Some
(
spatial_node_index
)
iframe_pipeline_id
TransformStyle
:
:
Flat
PropertyBinding
:
:
Value
(
LayoutTransform
:
:
identity
(
)
)
ReferenceFrameKind
:
:
Transform
origin
)
;
let
iframe_rect
=
LayoutRect
:
:
new
(
LayoutPoint
:
:
zero
(
)
bounds
.
size
)
;
self
.
add_scroll_frame
(
SpatialId
:
:
root_scroll_node
(
iframe_pipeline_id
)
spatial_node_index
Some
(
ExternalScrollId
(
0
iframe_pipeline_id
)
)
iframe_pipeline_id
&
iframe_rect
&
pipeline
.
content_size
ScrollSensitivity
:
:
ScriptAndInputEvents
ScrollFrameKind
:
:
PipelineRoot
LayoutVector2D
:
:
zero
(
)
)
;
self
.
rf_mapper
.
push_scope
(
)
;
self
.
flatten_items
(
&
mut
pipeline
.
display_list
.
iter
(
)
pipeline
.
pipeline_id
true
)
;
self
.
rf_mapper
.
pop_scope
(
)
;
self
.
pipeline_clip_chain_stack
.
pop
(
)
;
}
fn
get_space
(
&
mut
self
spatial_id
:
&
SpatialId
)
-
>
SpatialNodeIndex
{
self
.
id_to_index_mapper
.
get_spatial_node_index
(
*
spatial_id
)
}
fn
get_clip_and_scroll
(
&
mut
self
clip_id
:
&
ClipId
spatial_id
:
&
SpatialId
apply_pipeline_clip
:
bool
)
-
>
ScrollNodeAndClipChain
{
ScrollNodeAndClipChain
:
:
new
(
self
.
id_to_index_mapper
.
get_spatial_node_index
(
*
spatial_id
)
if
!
apply_pipeline_clip
&
&
clip_id
.
is_root
(
)
{
ClipChainId
:
:
NONE
}
else
if
clip_id
.
is_valid
(
)
{
self
.
id_to_index_mapper
.
get_clip_chain_id
(
*
clip_id
)
}
else
{
ClipChainId
:
:
INVALID
}
)
}
fn
process_common_properties
(
&
mut
self
common
:
&
CommonItemProperties
apply_pipeline_clip
:
bool
)
-
>
(
LayoutPrimitiveInfo
ScrollNodeAndClipChain
)
{
self
.
process_common_properties_with_bounds
(
common
&
common
.
clip_rect
apply_pipeline_clip
)
}
fn
process_common_properties_with_bounds
(
&
mut
self
common
:
&
CommonItemProperties
bounds
:
&
LayoutRect
apply_pipeline_clip
:
bool
)
-
>
(
LayoutPrimitiveInfo
ScrollNodeAndClipChain
)
{
let
clip_and_scroll
=
self
.
get_clip_and_scroll
(
&
common
.
clip_id
&
common
.
spatial_id
apply_pipeline_clip
)
;
let
current_offset
=
self
.
current_offset
(
clip_and_scroll
.
spatial_node_index
)
;
let
clip_rect
=
common
.
clip_rect
.
translate
(
current_offset
)
;
let
rect
=
bounds
.
translate
(
current_offset
)
;
let
layout
=
LayoutPrimitiveInfo
{
rect
clip_rect
is_backface_visible
:
common
.
is_backface_visible
hit_info
:
common
.
hit_info
}
;
(
layout
clip_and_scroll
)
}
fn
flatten_item
<
'
b
>
(
&
'
b
mut
self
item
:
DisplayItemRef
<
'
a
'
b
>
pipeline_id
:
PipelineId
apply_pipeline_clip
:
bool
)
-
>
Option
<
BuiltDisplayListIter
<
'
a
>
>
{
match
*
item
.
item
(
)
{
DisplayItem
:
:
Image
(
ref
info
)
=
>
{
let
(
layout
clip_and_scroll
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
bounds
apply_pipeline_clip
)
;
self
.
add_image
(
clip_and_scroll
&
layout
info
.
stretch_size
info
.
tile_spacing
None
info
.
image_key
info
.
image_rendering
info
.
alpha_type
info
.
color
)
;
}
DisplayItem
:
:
YuvImage
(
ref
info
)
=
>
{
let
(
layout
clip_and_scroll
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
bounds
apply_pipeline_clip
)
;
self
.
add_yuv_image
(
clip_and_scroll
&
layout
info
.
yuv_data
info
.
color_depth
info
.
color_space
info
.
color_range
info
.
image_rendering
)
;
}
DisplayItem
:
:
Text
(
ref
info
)
=
>
{
let
(
layout
clip_and_scroll
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
bounds
apply_pipeline_clip
)
;
self
.
add_text
(
clip_and_scroll
&
layout
&
info
.
font_key
&
info
.
color
item
.
glyphs
(
)
info
.
glyph_options
)
;
}
DisplayItem
:
:
Rectangle
(
ref
info
)
=
>
{
let
(
layout
clip_and_scroll
)
=
self
.
process_common_properties
(
&
info
.
common
apply_pipeline_clip
)
;
self
.
add_solid_rectangle
(
clip_and_scroll
&
layout
info
.
color
)
;
}
DisplayItem
:
:
HitTest
(
ref
info
)
=
>
{
let
(
layout
clip_and_scroll
)
=
self
.
process_common_properties
(
&
info
.
common
apply_pipeline_clip
)
;
self
.
add_solid_rectangle
(
clip_and_scroll
&
layout
ColorF
:
:
TRANSPARENT
)
;
}
DisplayItem
:
:
ClearRectangle
(
ref
info
)
=
>
{
let
(
layout
clip_and_scroll
)
=
self
.
process_common_properties
(
&
info
.
common
apply_pipeline_clip
)
;
self
.
add_clear_rectangle
(
clip_and_scroll
&
layout
)
;
}
DisplayItem
:
:
Line
(
ref
info
)
=
>
{
let
(
layout
clip_and_scroll
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
area
apply_pipeline_clip
)
;
self
.
add_line
(
clip_and_scroll
&
layout
info
.
wavy_line_thickness
info
.
orientation
info
.
color
info
.
style
)
;
}
DisplayItem
:
:
Gradient
(
ref
info
)
=
>
{
let
(
layout
clip_and_scroll
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
bounds
apply_pipeline_clip
)
;
if
let
Some
(
prim_key_kind
)
=
self
.
create_linear_gradient_prim
(
&
layout
info
.
gradient
.
start_point
info
.
gradient
.
end_point
item
.
gradient_stops
(
)
info
.
gradient
.
extend_mode
info
.
tile_size
info
.
tile_spacing
None
)
{
self
.
add_nonshadowable_primitive
(
clip_and_scroll
&
layout
Vec
:
:
new
(
)
prim_key_kind
)
;
}
}
DisplayItem
:
:
RadialGradient
(
ref
info
)
=
>
{
let
(
layout
clip_and_scroll
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
bounds
apply_pipeline_clip
)
;
let
prim_key_kind
=
self
.
create_radial_gradient_prim
(
&
layout
info
.
gradient
.
center
info
.
gradient
.
start_offset
*
info
.
gradient
.
radius
.
width
info
.
gradient
.
end_offset
*
info
.
gradient
.
radius
.
width
info
.
gradient
.
radius
.
width
/
info
.
gradient
.
radius
.
height
item
.
gradient_stops
(
)
info
.
gradient
.
extend_mode
info
.
tile_size
info
.
tile_spacing
None
)
;
self
.
add_nonshadowable_primitive
(
clip_and_scroll
&
layout
Vec
:
:
new
(
)
prim_key_kind
)
;
}
DisplayItem
:
:
BoxShadow
(
ref
info
)
=
>
{
let
(
layout
clip_and_scroll
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
box_bounds
apply_pipeline_clip
)
;
self
.
add_box_shadow
(
clip_and_scroll
&
layout
&
info
.
offset
info
.
color
info
.
blur_radius
info
.
spread_radius
info
.
border_radius
info
.
clip_mode
)
;
}
DisplayItem
:
:
Border
(
ref
info
)
=
>
{
let
(
layout
clip_and_scroll
)
=
self
.
process_common_properties_with_bounds
(
&
info
.
common
&
info
.
bounds
apply_pipeline_clip
)
;
self
.
add_border
(
clip_and_scroll
&
layout
info
item
.
gradient_stops
(
)
)
;
}
DisplayItem
:
:
PushStackingContext
(
ref
info
)
=
>
{
let
space
=
self
.
get_space
(
&
info
.
spatial_id
)
;
let
mut
subtraversal
=
item
.
sub_iter
(
)
;
self
.
flatten_stacking_context
(
&
mut
subtraversal
pipeline_id
&
info
.
stacking_context
space
info
.
origin
item
.
filters
(
)
item
.
filter_datas
(
)
item
.
filter_primitives
(
)
info
.
is_backface_visible
apply_pipeline_clip
)
;
return
Some
(
subtraversal
)
;
}
DisplayItem
:
:
PushReferenceFrame
(
ref
info
)
=
>
{
let
parent_space
=
self
.
get_space
(
&
info
.
parent_spatial_id
)
;
let
mut
subtraversal
=
item
.
sub_iter
(
)
;
self
.
flatten_reference_frame
(
&
mut
subtraversal
pipeline_id
parent_space
info
.
origin
&
info
.
reference_frame
apply_pipeline_clip
)
;
return
Some
(
subtraversal
)
;
}
DisplayItem
:
:
Iframe
(
ref
info
)
=
>
{
let
space
=
self
.
get_space
(
&
info
.
space_and_clip
.
spatial_id
)
;
self
.
flatten_iframe
(
info
space
)
;
}
DisplayItem
:
:
Clip
(
ref
info
)
=
>
{
let
parent_space
=
self
.
get_space
(
&
info
.
parent_space_and_clip
.
spatial_id
)
;
let
current_offset
=
self
.
current_offset
(
parent_space
)
;
let
clip_region
=
ClipRegion
:
:
create_for_clip_node
(
info
.
clip_rect
item
.
complex_clip
(
)
.
iter
(
)
info
.
image_mask
&
current_offset
)
;
self
.
add_clip_node
(
info
.
id
&
info
.
parent_space_and_clip
clip_region
)
;
}
DisplayItem
:
:
ClipChain
(
ref
info
)
=
>
{
let
parent_clip_chain_id
=
match
info
.
parent
{
Some
(
id
)
=
>
{
self
.
id_to_index_mapper
.
get_clip_chain_id
(
ClipId
:
:
ClipChain
(
id
)
)
}
None
=
>
{
self
.
pipeline_clip_chain_stack
.
last
(
)
.
cloned
(
)
.
unwrap
(
)
}
}
;
let
mut
clip_chain_id
=
parent_clip_chain_id
;
for
clip_item
in
item
.
clip_chain_items
(
)
{
let
item_clip_node
=
self
.
id_to_index_mapper
.
get_clip_node
(
&
clip_item
)
;
let
mut
clip_node_clip_chain_id
=
item_clip_node
.
id
;
for
_
in
0
.
.
item_clip_node
.
count
{
let
(
handle
spatial_node_index
local_pos
has_complex_clip
)
=
{
let
clip_chain
=
self
.
clip_store
.
get_clip_chain
(
clip_node_clip_chain_id
)
;
clip_node_clip_chain_id
=
clip_chain
.
parent_clip_chain_id
;
(
clip_chain
.
handle
clip_chain
.
spatial_node_index
clip_chain
.
local_pos
clip_chain
.
has_complex_clip
)
}
;
clip_chain_id
=
self
.
clip_store
.
add_clip_chain_node
(
handle
local_pos
spatial_node_index
clip_chain_id
has_complex_clip
)
;
}
}
self
.
id_to_index_mapper
.
add_clip_chain
(
ClipId
:
:
ClipChain
(
info
.
id
)
clip_chain_id
0
)
;
}
DisplayItem
:
:
ScrollFrame
(
ref
info
)
=
>
{
let
parent_space
=
self
.
get_space
(
&
info
.
parent_space_and_clip
.
spatial_id
)
;
self
.
flatten_scroll_frame
(
&
item
info
parent_space
pipeline_id
)
;
}
DisplayItem
:
:
StickyFrame
(
ref
info
)
=
>
{
let
parent_space
=
self
.
get_space
(
&
info
.
parent_spatial_id
)
;
self
.
flatten_sticky_frame
(
info
parent_space
)
;
}
DisplayItem
:
:
BackdropFilter
(
ref
info
)
=
>
{
let
(
layout
clip_and_scroll
)
=
self
.
process_common_properties
(
&
info
.
common
apply_pipeline_clip
)
;
let
filters
=
filter_ops_for_compositing
(
item
.
filters
(
)
)
;
let
filter_datas
=
filter_datas_for_compositing
(
item
.
filter_datas
(
)
)
;
let
filter_primitives
=
filter_primitives_for_compositing
(
item
.
filter_primitives
(
)
)
;
self
.
add_backdrop_filter
(
clip_and_scroll
&
layout
filters
filter_datas
filter_primitives
)
;
}
DisplayItem
:
:
SetGradientStops
|
DisplayItem
:
:
SetFilterOps
|
DisplayItem
:
:
SetFilterData
|
DisplayItem
:
:
SetFilterPrimitives
=
>
{
}
DisplayItem
:
:
PopReferenceFrame
|
DisplayItem
:
:
PopStackingContext
=
>
{
unreachable
!
(
"
Should
have
returned
in
parent
method
.
"
)
}
DisplayItem
:
:
PushShadow
(
info
)
=
>
{
let
clip_and_scroll
=
self
.
get_clip_and_scroll
(
&
info
.
space_and_clip
.
clip_id
&
info
.
space_and_clip
.
spatial_id
apply_pipeline_clip
)
;
self
.
push_shadow
(
info
.
shadow
clip_and_scroll
info
.
should_inflate
)
;
}
DisplayItem
:
:
PopAllShadows
=
>
{
self
.
pop_all_shadows
(
)
;
}
}
None
}
fn
build_clip_chain
(
&
mut
self
clip_items
:
Vec
<
(
LayoutPoint
ClipItemKey
)
>
spatial_node_index
:
SpatialNodeIndex
parent_clip_chain_id
:
ClipChainId
)
-
>
ClipChainId
{
if
clip_items
.
is_empty
(
)
{
parent_clip_chain_id
}
else
{
let
mut
clip_chain_id
=
parent_clip_chain_id
;
for
(
local_pos
item
)
in
clip_items
{
let
has_complex_clip
=
item
.
has_complex_clip
(
)
;
let
handle
=
self
.
interners
.
clip
.
intern
(
&
item
|
|
(
)
)
;
clip_chain_id
=
self
.
clip_store
.
add_clip_chain_node
(
handle
local_pos
spatial_node_index
clip_chain_id
has_complex_clip
)
;
}
clip_chain_id
}
}
fn
create_primitive
<
P
>
(
&
mut
self
info
:
&
LayoutPrimitiveInfo
clip_chain_id
:
ClipChainId
spatial_node_index
:
SpatialNodeIndex
prim
:
P
)
-
>
PrimitiveInstance
where
P
:
InternablePrimitive
Interners
:
AsMut
<
Interner
<
P
>
>
{
let
prim_key
=
prim
.
into_key
(
info
)
;
let
current_offset
=
self
.
current_offset
(
spatial_node_index
)
;
let
interner
=
self
.
interners
.
as_mut
(
)
;
let
prim_data_handle
=
interner
.
intern
(
&
prim_key
|
|
{
PrimitiveSceneData
{
prim_size
:
info
.
rect
.
size
is_backface_visible
:
info
.
is_backface_visible
}
}
)
;
let
instance_kind
=
P
:
:
make_instance_kind
(
prim_key
prim_data_handle
&
mut
self
.
prim_store
current_offset
)
;
PrimitiveInstance
:
:
new
(
info
.
rect
.
origin
info
.
clip_rect
instance_kind
clip_chain_id
spatial_node_index
)
}
pub
fn
add_primitive_to_hit_testing_list
(
&
mut
self
info
:
&
LayoutPrimitiveInfo
clip_and_scroll
:
ScrollNodeAndClipChain
)
{
let
tag
=
match
info
.
hit_info
{
Some
(
tag
)
=
>
tag
None
=
>
return
}
;
let
start
=
self
.
hit_testing_scene
.
next_clip_chain_index
(
)
;
self
.
hit_testing_scene
.
add_clip_chain
(
clip_and_scroll
.
clip_chain_id
)
;
for
sc
in
&
self
.
sc_stack
{
self
.
hit_testing_scene
.
add_clip_chain
(
sc
.
clip_chain_id
)
;
}
let
clip_chain_range
=
ops
:
:
Range
{
start
end
:
self
.
hit_testing_scene
.
next_clip_chain_index
(
)
}
;
let
new_item
=
HitTestingItem
:
:
new
(
tag
info
clip_and_scroll
.
spatial_node_index
clip_chain_range
)
;
self
.
hit_testing_scene
.
add_item
(
new_item
)
;
}
pub
fn
add_primitive_to_draw_list
(
&
mut
self
prim_instance
:
PrimitiveInstance
)
{
if
prim_instance
.
is_chased
(
)
{
println
!
(
"
\
tadded
to
stacking
context
at
{
}
"
self
.
sc_stack
.
len
(
)
)
;
}
let
stacking_context
=
self
.
sc_stack
.
last_mut
(
)
.
unwrap
(
)
;
stacking_context
.
primitives
.
push
(
prim_instance
)
;
}
fn
add_nonshadowable_primitive
<
P
>
(
&
mut
self
clip_and_scroll
:
ScrollNodeAndClipChain
info
:
&
LayoutPrimitiveInfo
clip_items
:
Vec
<
(
LayoutPoint
ClipItemKey
)
>
prim
:
P
)
where
P
:
InternablePrimitive
+
IsVisible
Interners
:
AsMut
<
Interner
<
P
>
>
{
if
prim
.
is_visible
(
)
{
let
clip_chain_id
=
self
.
build_clip_chain
(
clip_items
clip_and_scroll
.
spatial_node_index
clip_and_scroll
.
clip_chain_id
)
;
self
.
add_prim_to_draw_list
(
info
clip_chain_id
clip_and_scroll
prim
)
;
}
}
pub
fn
add_primitive
<
P
>
(
&
mut
self
clip_and_scroll
:
ScrollNodeAndClipChain
info
:
&
LayoutPrimitiveInfo
clip_items
:
Vec
<
(
LayoutPoint
ClipItemKey
)
>
prim
:
P
)
where
P
:
InternablePrimitive
+
IsVisible
Interners
:
AsMut
<
Interner
<
P
>
>
ShadowItem
:
From
<
PendingPrimitive
<
P
>
>
{
if
self
.
pending_shadow_items
.
is_empty
(
)
{
self
.
add_nonshadowable_primitive
(
clip_and_scroll
info
clip_items
prim
)
;
}
else
{
debug_assert
!
(
clip_items
.
is_empty
(
)
"
No
per
-
prim
clips
expected
for
shadowed
primitives
"
)
;
self
.
pending_shadow_items
.
push_back
(
PendingPrimitive
{
clip_and_scroll
info
:
*
info
prim
}
.
into
(
)
)
;
}
}
fn
add_prim_to_draw_list
<
P
>
(
&
mut
self
info
:
&
LayoutPrimitiveInfo
clip_chain_id
:
ClipChainId
clip_and_scroll
:
ScrollNodeAndClipChain
prim
:
P
)
where
P
:
InternablePrimitive
Interners
:
AsMut
<
Interner
<
P
>
>
{
let
prim_instance
=
self
.
create_primitive
(
info
clip_chain_id
clip_and_scroll
.
spatial_node_index
prim
)
;
self
.
register_chase_primitive_by_rect
(
&
info
.
rect
&
prim_instance
)
;
self
.
add_primitive_to_hit_testing_list
(
info
clip_and_scroll
)
;
self
.
add_primitive_to_draw_list
(
prim_instance
)
;
}
pub
fn
push_stacking_context
(
&
mut
self
pipeline_id
:
PipelineId
composite_ops
:
CompositeOps
transform_style
:
TransformStyle
is_backface_visible
:
bool
create_tile_cache
:
bool
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
requested_raster_space
:
RasterSpace
is_backdrop_root
:
bool
)
{
let
is_pipeline_root
=
self
.
sc_stack
.
last
(
)
.
map_or
(
true
|
sc
|
sc
.
pipeline_id
!
=
pipeline_id
)
;
let
frame_output_pipeline_id
=
if
is_pipeline_root
&
&
self
.
output_pipelines
.
contains
(
&
pipeline_id
)
{
Some
(
pipeline_id
)
}
else
{
None
}
;
self
.
found_explicit_tile_cache
|
=
create_tile_cache
;
if
is_pipeline_root
&
&
create_tile_cache
&
&
self
.
config
.
enable_picture_caching
{
debug_assert
!
(
!
self
.
sc_stack
.
iter
(
)
.
any
(
|
sc
|
sc
.
create_tile_cache
)
)
;
}
let
(
parent_is_3d
extra_3d_instance
)
=
match
self
.
sc_stack
.
last_mut
(
)
{
Some
(
ref
mut
sc
)
if
sc
.
is_3d
(
)
=
>
{
let
flat_items_context_3d
=
match
sc
.
context_3d
{
Picture3DContext
:
:
In
{
ancestor_index
.
.
}
=
>
Picture3DContext
:
:
In
{
root_data
:
None
ancestor_index
}
Picture3DContext
:
:
Out
=
>
panic
!
(
"
Unexpected
out
of
3D
context
"
)
}
;
let
extra_instance
=
sc
.
cut_item_sequence
(
&
mut
self
.
prim_store
&
mut
self
.
interners
Some
(
PictureCompositeMode
:
:
Blit
(
BlitReason
:
:
PRESERVE3D
)
)
flat_items_context_3d
)
;
(
true
extra_instance
.
map
(
|
(
_
instance
)
|
instance
)
)
}
_
=
>
(
false
None
)
}
;
if
let
Some
(
instance
)
=
extra_3d_instance
{
self
.
add_primitive_instance_to_3d_root
(
instance
)
;
}
let
participating_in_3d_context
=
composite_ops
.
is_empty
(
)
&
&
(
parent_is_3d
|
|
transform_style
=
=
TransformStyle
:
:
Preserve3D
)
;
let
context_3d
=
if
participating_in_3d_context
{
let
ancestor_context
=
self
.
sc_stack
.
iter
(
)
.
rfind
(
|
sc
|
!
sc
.
is_3d
(
)
)
;
Picture3DContext
:
:
In
{
root_data
:
if
parent_is_3d
{
None
}
else
{
Some
(
Vec
:
:
new
(
)
)
}
ancestor_index
:
match
ancestor_context
{
Some
(
sc
)
=
>
sc
.
spatial_node_index
None
=
>
ROOT_SPATIAL_NODE_INDEX
}
}
}
else
{
Picture3DContext
:
:
Out
}
;
let
mut
blit_reason
=
BlitReason
:
:
empty
(
)
;
let
mut
current_clip_chain_id
=
clip_chain_id
;
while
current_clip_chain_id
!
=
ClipChainId
:
:
NONE
{
let
clip_chain_node
=
&
self
.
clip_store
.
clip_chain_nodes
[
current_clip_chain_id
.
0
as
usize
]
;
if
clip_chain_node
.
has_complex_clip
{
blit_reason
=
BlitReason
:
:
CLIP
;
break
;
}
current_clip_chain_id
=
clip_chain_node
.
parent_clip_chain_id
;
}
self
.
sc_stack
.
push
(
FlattenedStackingContext
{
primitives
:
Vec
:
:
new
(
)
pipeline_id
is_backface_visible
requested_raster_space
spatial_node_index
clip_chain_id
frame_output_pipeline_id
composite_ops
blit_reason
transform_style
context_3d
create_tile_cache
is_backdrop_root
}
)
;
}
pub
fn
pop_stacking_context
(
&
mut
self
)
{
let
mut
stacking_context
=
self
.
sc_stack
.
pop
(
)
.
unwrap
(
)
;
let
parent_is_empty
=
match
self
.
sc_stack
.
last_mut
(
)
{
Some
(
parent_sc
)
=
>
{
if
stacking_context
.
is_redundant
(
parent_sc
)
{
if
stacking_context
.
clip_chain_id
!
=
ClipChainId
:
:
NONE
{
let
prim
=
create_clip_prim_instance
(
stacking_context
.
spatial_node_index
stacking_context
.
clip_chain_id
PrimitiveInstanceKind
:
:
PushClipChain
)
;
parent_sc
.
primitives
.
push
(
prim
)
;
}
if
parent_sc
.
primitives
.
is_empty
(
)
{
parent_sc
.
primitives
=
stacking_context
.
primitives
;
}
else
{
parent_sc
.
primitives
.
extend
(
stacking_context
.
primitives
)
;
}
if
stacking_context
.
clip_chain_id
!
=
ClipChainId
:
:
NONE
{
let
prim
=
create_clip_prim_instance
(
stacking_context
.
spatial_node_index
stacking_context
.
clip_chain_id
PrimitiveInstanceKind
:
:
PopClipChain
)
;
parent_sc
.
primitives
.
push
(
prim
)
;
}
return
;
}
parent_sc
.
primitives
.
is_empty
(
)
}
None
=
>
true
}
;
if
stacking_context
.
create_tile_cache
{
self
.
setup_picture_caching
(
&
mut
stacking_context
.
primitives
)
;
}
let
(
leaf_context_3d
leaf_composite_mode
leaf_output_pipeline_id
)
=
match
stacking_context
.
context_3d
{
Picture3DContext
:
:
In
{
ancestor_index
.
.
}
=
>
(
Picture3DContext
:
:
In
{
root_data
:
None
ancestor_index
}
Some
(
PictureCompositeMode
:
:
Blit
(
BlitReason
:
:
PRESERVE3D
|
stacking_context
.
blit_reason
)
)
None
)
Picture3DContext
:
:
Out
=
>
(
Picture3DContext
:
:
Out
if
stacking_context
.
blit_reason
.
is_empty
(
)
{
None
}
else
{
Some
(
PictureCompositeMode
:
:
Blit
(
stacking_context
.
blit_reason
)
)
}
stacking_context
.
frame_output_pipeline_id
)
}
;
if
self
.
sc_stack
.
is_empty
(
)
&
&
!
self
.
found_explicit_tile_cache
&
&
self
.
config
.
enable_picture_caching
{
let
scroll_root
=
ROOT_SPATIAL_NODE_INDEX
;
let
prim_list
=
PrimitiveList
:
:
new
(
stacking_context
.
primitives
&
self
.
interners
)
;
let
pic_key
=
PictureKey
:
:
new
(
true
LayoutSize
:
:
zero
(
)
Picture
{
composite_mode_key
:
PictureCompositeKey
:
:
Identity
}
)
;
let
pic_data_handle
=
self
.
interners
.
picture
.
intern
(
&
pic_key
|
|
{
PrimitiveSceneData
{
prim_size
:
LayoutSize
:
:
zero
(
)
is_backface_visible
:
true
}
}
)
;
let
tile_cache
=
TileCacheInstance
:
:
new
(
0
ROOT_SPATIAL_NODE_INDEX
self
.
config
.
background_color
)
;
let
pic_index
=
self
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
Some
(
PictureCompositeMode
:
:
TileCache
{
}
)
Picture3DContext
:
:
Out
None
true
true
RasterSpace
:
:
Screen
prim_list
scroll_root
Some
(
Box
:
:
new
(
tile_cache
)
)
PictureOptions
:
:
default
(
)
)
)
;
let
instance
=
PrimitiveInstance
:
:
new
(
LayoutPoint
:
:
zero
(
)
LayoutRect
:
:
max_rect
(
)
PrimitiveInstanceKind
:
:
Picture
{
data_handle
:
pic_data_handle
pic_index
:
PictureIndex
(
pic_index
)
segment_instance_index
:
SegmentInstanceIndex
:
:
INVALID
}
ClipChainId
:
:
NONE
scroll_root
)
;
stacking_context
.
primitives
=
vec
!
[
instance
]
;
}
let
leaf_pic_index
=
PictureIndex
(
self
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
leaf_composite_mode
.
clone
(
)
leaf_context_3d
leaf_output_pipeline_id
true
stacking_context
.
is_backface_visible
stacking_context
.
requested_raster_space
PrimitiveList
:
:
new
(
stacking_context
.
primitives
&
self
.
interners
)
stacking_context
.
spatial_node_index
None
PictureOptions
:
:
default
(
)
)
)
)
;
let
mut
current_pic_index
=
leaf_pic_index
;
let
mut
cur_instance
=
create_prim_instance
(
leaf_pic_index
leaf_composite_mode
.
into
(
)
stacking_context
.
is_backface_visible
ClipChainId
:
:
NONE
stacking_context
.
spatial_node_index
&
mut
self
.
interners
)
;
if
cur_instance
.
is_chased
(
)
{
println
!
(
"
\
tis
a
leaf
primitive
for
a
stacking
context
"
)
;
}
if
let
Picture3DContext
:
:
In
{
root_data
:
Some
(
mut
prims
)
ancestor_index
}
=
stacking_context
.
context_3d
{
prims
.
push
(
cur_instance
)
;
current_pic_index
=
PictureIndex
(
self
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
None
Picture3DContext
:
:
In
{
root_data
:
Some
(
Vec
:
:
new
(
)
)
ancestor_index
}
stacking_context
.
frame_output_pipeline_id
true
stacking_context
.
is_backface_visible
stacking_context
.
requested_raster_space
PrimitiveList
:
:
new
(
prims
&
self
.
interners
)
stacking_context
.
spatial_node_index
None
PictureOptions
:
:
default
(
)
)
)
)
;
cur_instance
=
create_prim_instance
(
current_pic_index
PictureCompositeKey
:
:
Identity
stacking_context
.
is_backface_visible
ClipChainId
:
:
NONE
stacking_context
.
spatial_node_index
&
mut
self
.
interners
)
;
}
let
(
filtered_pic_index
filtered_instance
)
=
self
.
wrap_prim_with_filters
(
cur_instance
current_pic_index
stacking_context
.
composite_ops
.
filters
stacking_context
.
composite_ops
.
filter_primitives
stacking_context
.
composite_ops
.
filter_datas
stacking_context
.
is_backface_visible
stacking_context
.
requested_raster_space
stacking_context
.
spatial_node_index
true
)
;
current_pic_index
=
filtered_pic_index
;
cur_instance
=
filtered_instance
;
let
has_mix_blend
=
if
let
(
Some
(
mix_blend_mode
)
false
)
=
(
stacking_context
.
composite_ops
.
mix_blend_mode
parent_is_empty
)
{
let
composite_mode
=
Some
(
PictureCompositeMode
:
:
MixBlend
(
mix_blend_mode
)
)
;
let
blend_pic_index
=
PictureIndex
(
self
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
composite_mode
.
clone
(
)
Picture3DContext
:
:
Out
None
true
stacking_context
.
is_backface_visible
stacking_context
.
requested_raster_space
PrimitiveList
:
:
new
(
vec
!
[
cur_instance
.
clone
(
)
]
&
self
.
interners
)
stacking_context
.
spatial_node_index
None
PictureOptions
:
:
default
(
)
)
)
)
;
current_pic_index
=
blend_pic_index
;
cur_instance
=
create_prim_instance
(
blend_pic_index
composite_mode
.
into
(
)
stacking_context
.
is_backface_visible
ClipChainId
:
:
NONE
stacking_context
.
spatial_node_index
&
mut
self
.
interners
)
;
if
cur_instance
.
is_chased
(
)
{
println
!
(
"
\
tis
a
mix
-
blend
picture
for
a
stacking
context
with
{
:
?
}
"
mix_blend_mode
)
;
}
true
}
else
{
false
}
;
cur_instance
.
clip_chain_id
=
stacking_context
.
clip_chain_id
;
let
trailing_children_instance
=
match
self
.
sc_stack
.
last_mut
(
)
{
Some
(
ref
parent_sc
)
if
parent_sc
.
is_3d
(
)
=
>
{
Some
(
cur_instance
)
}
Some
(
ref
mut
parent_sc
)
=
>
{
if
has_mix_blend
{
parent_sc
.
blit_reason
|
=
BlitReason
:
:
ISOLATE
;
}
parent_sc
.
primitives
.
push
(
cur_instance
)
;
None
}
None
=
>
{
self
.
root_pic_index
=
current_pic_index
;
None
}
}
;
if
let
Some
(
instance
)
=
trailing_children_instance
{
self
.
add_primitive_instance_to_3d_root
(
instance
)
;
}
assert
!
(
self
.
pending_shadow_items
.
is_empty
(
)
"
Found
unpopped
shadows
when
popping
stacking
context
!
"
)
;
}
pub
fn
push_reference_frame
(
&
mut
self
reference_frame_id
:
SpatialId
parent_index
:
Option
<
SpatialNodeIndex
>
pipeline_id
:
PipelineId
transform_style
:
TransformStyle
source_transform
:
PropertyBinding
<
LayoutTransform
>
kind
:
ReferenceFrameKind
origin_in_parent_reference_frame
:
LayoutVector2D
)
-
>
SpatialNodeIndex
{
let
index
=
self
.
clip_scroll_tree
.
add_reference_frame
(
parent_index
transform_style
source_transform
kind
origin_in_parent_reference_frame
pipeline_id
)
;
self
.
id_to_index_mapper
.
map_spatial_node
(
reference_frame_id
index
)
;
index
}
pub
fn
push_root
(
&
mut
self
pipeline_id
:
PipelineId
viewport_size
:
&
LayoutSize
content_size
:
&
LayoutSize
)
{
if
let
ChasePrimitive
:
:
Id
(
id
)
=
self
.
config
.
chase_primitive
{
println
!
(
"
Chasing
{
:
?
}
by
index
"
id
)
;
register_prim_chase_id
(
id
)
;
}
self
.
id_to_index_mapper
.
add_clip_chain
(
ClipId
:
:
root
(
pipeline_id
)
ClipChainId
:
:
NONE
0
)
;
let
spatial_node_index
=
self
.
push_reference_frame
(
SpatialId
:
:
root_reference_frame
(
pipeline_id
)
None
pipeline_id
TransformStyle
:
:
Flat
PropertyBinding
:
:
Value
(
LayoutTransform
:
:
identity
(
)
)
ReferenceFrameKind
:
:
Transform
LayoutVector2D
:
:
zero
(
)
)
;
self
.
add_scroll_frame
(
SpatialId
:
:
root_scroll_node
(
pipeline_id
)
spatial_node_index
Some
(
ExternalScrollId
(
0
pipeline_id
)
)
pipeline_id
&
LayoutRect
:
:
new
(
LayoutPoint
:
:
zero
(
)
*
viewport_size
)
content_size
ScrollSensitivity
:
:
ScriptAndInputEvents
ScrollFrameKind
:
:
PipelineRoot
LayoutVector2D
:
:
zero
(
)
)
;
}
pub
fn
add_clip_node
<
I
>
(
&
mut
self
new_node_id
:
ClipId
space_and_clip
:
&
SpaceAndClipInfo
clip_region
:
ClipRegion
<
I
>
)
-
>
ClipChainId
where
I
:
IntoIterator
<
Item
=
ComplexClipRegion
>
{
let
mut
parent_clip_chain_index
=
self
.
id_to_index_mapper
.
get_clip_chain_id
(
space_and_clip
.
clip_id
)
;
let
spatial_node
=
self
.
id_to_index_mapper
.
get_spatial_node_index
(
space_and_clip
.
spatial_id
)
;
let
mut
clip_count
=
0
;
let
handle
=
self
.
interners
.
clip
.
intern
(
&
ClipItemKey
:
:
rectangle
(
clip_region
.
main
.
size
ClipMode
:
:
Clip
)
|
|
(
)
)
;
parent_clip_chain_index
=
self
.
clip_store
.
add_clip_chain_node
(
handle
clip_region
.
main
.
origin
spatial_node
parent_clip_chain_index
false
)
;
clip_count
+
=
1
;
if
let
Some
(
ref
image_mask
)
=
clip_region
.
image_mask
{
let
handle
=
self
.
interners
.
clip
.
intern
(
&
ClipItemKey
:
:
image_mask
(
image_mask
)
|
|
(
)
)
;
parent_clip_chain_index
=
self
.
clip_store
.
add_clip_chain_node
(
handle
image_mask
.
rect
.
origin
spatial_node
parent_clip_chain_index
true
)
;
clip_count
+
=
1
;
}
for
region
in
clip_region
.
complex_clips
{
let
handle
=
self
.
interners
.
clip
.
intern
(
&
ClipItemKey
:
:
rounded_rect
(
region
.
rect
.
size
region
.
radii
region
.
mode
)
|
|
(
)
)
;
parent_clip_chain_index
=
self
.
clip_store
.
add_clip_chain_node
(
handle
region
.
rect
.
origin
spatial_node
parent_clip_chain_index
true
)
;
clip_count
+
=
1
;
}
self
.
id_to_index_mapper
.
add_clip_chain
(
new_node_id
parent_clip_chain_index
clip_count
)
;
parent_clip_chain_index
}
pub
fn
add_scroll_frame
(
&
mut
self
new_node_id
:
SpatialId
parent_node_index
:
SpatialNodeIndex
external_id
:
Option
<
ExternalScrollId
>
pipeline_id
:
PipelineId
frame_rect
:
&
LayoutRect
content_size
:
&
LayoutSize
scroll_sensitivity
:
ScrollSensitivity
frame_kind
:
ScrollFrameKind
external_scroll_offset
:
LayoutVector2D
)
-
>
SpatialNodeIndex
{
let
node_index
=
self
.
clip_scroll_tree
.
add_scroll_frame
(
parent_node_index
external_id
pipeline_id
frame_rect
content_size
scroll_sensitivity
frame_kind
external_scroll_offset
)
;
self
.
id_to_index_mapper
.
map_spatial_node
(
new_node_id
node_index
)
;
node_index
}
pub
fn
push_shadow
(
&
mut
self
shadow
:
Shadow
clip_and_scroll
:
ScrollNodeAndClipChain
should_inflate
:
bool
)
{
self
.
pending_shadow_items
.
push_back
(
ShadowItem
:
:
Shadow
(
PendingShadow
{
shadow
clip_and_scroll
should_inflate
}
)
)
;
}
pub
fn
pop_all_shadows
(
&
mut
self
)
{
assert
!
(
!
self
.
pending_shadow_items
.
is_empty
(
)
"
popped
shadows
but
none
were
present
"
)
;
let
mut
items
=
mem
:
:
replace
(
&
mut
self
.
pending_shadow_items
VecDeque
:
:
new
(
)
)
;
while
let
Some
(
item
)
=
items
.
pop_front
(
)
{
match
item
{
ShadowItem
:
:
Shadow
(
pending_shadow
)
=
>
{
let
std_deviation
=
pending_shadow
.
shadow
.
blur_radius
*
0
.
5
;
let
is_passthrough
=
pending_shadow
.
shadow
.
blur_radius
=
=
0
.
0
;
let
raster_space
=
if
is_passthrough
{
self
.
sc_stack
.
last
(
)
.
unwrap
(
)
.
requested_raster_space
}
else
{
RasterSpace
:
:
Local
(
1
.
0
)
}
;
let
mut
prims
=
Vec
:
:
new
(
)
;
for
item
in
&
items
{
match
item
{
ShadowItem
:
:
Image
(
ref
pending_image
)
=
>
{
self
.
add_shadow_prim
(
&
pending_shadow
pending_image
&
mut
prims
)
}
ShadowItem
:
:
LineDecoration
(
ref
pending_line_dec
)
=
>
{
self
.
add_shadow_prim
(
&
pending_shadow
pending_line_dec
&
mut
prims
)
}
ShadowItem
:
:
NormalBorder
(
ref
pending_border
)
=
>
{
self
.
add_shadow_prim
(
&
pending_shadow
pending_border
&
mut
prims
)
}
ShadowItem
:
:
Primitive
(
ref
pending_primitive
)
=
>
{
self
.
add_shadow_prim
(
&
pending_shadow
pending_primitive
&
mut
prims
)
}
ShadowItem
:
:
TextRun
(
ref
pending_text_run
)
=
>
{
self
.
add_shadow_prim
(
&
pending_shadow
pending_text_run
&
mut
prims
)
}
_
=
>
{
}
}
}
if
!
prims
.
is_empty
(
)
{
let
mut
blur_filter
=
Filter
:
:
Blur
(
std_deviation
)
;
blur_filter
.
sanitize
(
)
;
let
composite_mode
=
PictureCompositeMode
:
:
Filter
(
blur_filter
)
;
let
composite_mode_key
=
Some
(
composite_mode
.
clone
(
)
)
.
into
(
)
;
let
is_backface_visible
=
true
;
let
options
=
PictureOptions
{
inflate_if_required
:
pending_shadow
.
should_inflate
}
;
let
shadow_pic_index
=
PictureIndex
(
self
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
Some
(
composite_mode
)
Picture3DContext
:
:
Out
None
is_passthrough
is_backface_visible
raster_space
PrimitiveList
:
:
new
(
prims
&
self
.
interners
)
pending_shadow
.
clip_and_scroll
.
spatial_node_index
None
options
)
)
)
;
let
shadow_pic_key
=
PictureKey
:
:
new
(
true
LayoutSize
:
:
zero
(
)
Picture
{
composite_mode_key
}
)
;
let
shadow_prim_data_handle
=
self
.
interners
.
picture
.
intern
(
&
shadow_pic_key
|
|
{
PrimitiveSceneData
{
prim_size
:
LayoutSize
:
:
zero
(
)
is_backface_visible
:
true
}
}
)
;
let
shadow_prim_instance
=
PrimitiveInstance
:
:
new
(
LayoutPoint
:
:
zero
(
)
LayoutRect
:
:
max_rect
(
)
PrimitiveInstanceKind
:
:
Picture
{
data_handle
:
shadow_prim_data_handle
pic_index
:
shadow_pic_index
segment_instance_index
:
SegmentInstanceIndex
:
:
INVALID
}
pending_shadow
.
clip_and_scroll
.
clip_chain_id
pending_shadow
.
clip_and_scroll
.
spatial_node_index
)
;
self
.
add_primitive_to_draw_list
(
shadow_prim_instance
)
;
}
}
ShadowItem
:
:
Image
(
pending_image
)
=
>
{
self
.
add_shadow_prim_to_draw_list
(
pending_image
)
}
ShadowItem
:
:
LineDecoration
(
pending_line_dec
)
=
>
{
self
.
add_shadow_prim_to_draw_list
(
pending_line_dec
)
}
ShadowItem
:
:
NormalBorder
(
pending_border
)
=
>
{
self
.
add_shadow_prim_to_draw_list
(
pending_border
)
}
ShadowItem
:
:
Primitive
(
pending_primitive
)
=
>
{
self
.
add_shadow_prim_to_draw_list
(
pending_primitive
)
}
ShadowItem
:
:
TextRun
(
pending_text_run
)
=
>
{
self
.
add_shadow_prim_to_draw_list
(
pending_text_run
)
}
}
}
debug_assert
!
(
items
.
is_empty
(
)
)
;
self
.
pending_shadow_items
=
items
;
}
fn
add_shadow_prim
<
P
>
(
&
mut
self
pending_shadow
:
&
PendingShadow
pending_primitive
:
&
PendingPrimitive
<
P
>
prims
:
&
mut
Vec
<
PrimitiveInstance
>
)
where
P
:
InternablePrimitive
+
CreateShadow
Interners
:
AsMut
<
Interner
<
P
>
>
{
let
mut
info
=
pending_primitive
.
info
.
clone
(
)
;
info
.
rect
=
info
.
rect
.
translate
(
pending_shadow
.
shadow
.
offset
)
;
info
.
clip_rect
=
info
.
clip_rect
.
translate
(
pending_shadow
.
shadow
.
offset
)
;
let
shadow_prim_instance
=
self
.
create_primitive
(
&
info
pending_primitive
.
clip_and_scroll
.
clip_chain_id
pending_primitive
.
clip_and_scroll
.
spatial_node_index
pending_primitive
.
prim
.
create_shadow
(
&
pending_shadow
.
shadow
)
)
;
prims
.
push
(
shadow_prim_instance
)
;
}
fn
add_shadow_prim_to_draw_list
<
P
>
(
&
mut
self
pending_primitive
:
PendingPrimitive
<
P
>
)
where
P
:
InternablePrimitive
+
IsVisible
Interners
:
AsMut
<
Interner
<
P
>
>
{
if
pending_primitive
.
prim
.
is_visible
(
)
{
self
.
add_prim_to_draw_list
(
&
pending_primitive
.
info
pending_primitive
.
clip_and_scroll
.
clip_chain_id
pending_primitive
.
clip_and_scroll
pending_primitive
.
prim
)
;
}
}
#
[
cfg
(
debug_assertions
)
]
fn
register_chase_primitive_by_rect
(
&
mut
self
rect
:
&
LayoutRect
prim_instance
:
&
PrimitiveInstance
)
{
if
ChasePrimitive
:
:
LocalRect
(
*
rect
)
=
=
self
.
config
.
chase_primitive
{
println
!
(
"
Chasing
{
:
?
}
by
local
rect
"
prim_instance
.
id
)
;
register_prim_chase_id
(
prim_instance
.
id
)
;
}
}
#
[
cfg
(
not
(
debug_assertions
)
)
]
fn
register_chase_primitive_by_rect
(
&
mut
self
_rect
:
&
LayoutRect
_prim_instance
:
&
PrimitiveInstance
)
{
}
pub
fn
add_solid_rectangle
(
&
mut
self
clip_and_scroll
:
ScrollNodeAndClipChain
info
:
&
LayoutPrimitiveInfo
color
:
ColorF
)
{
if
color
.
a
=
=
0
.
0
{
self
.
add_primitive_to_hit_testing_list
(
info
clip_and_scroll
)
;
return
;
}
self
.
add_primitive
(
clip_and_scroll
info
Vec
:
:
new
(
)
PrimitiveKeyKind
:
:
Rectangle
{
color
:
color
.
into
(
)
}
)
;
}
pub
fn
add_clear_rectangle
(
&
mut
self
clip_and_scroll
:
ScrollNodeAndClipChain
info
:
&
LayoutPrimitiveInfo
)
{
self
.
add_primitive
(
clip_and_scroll
info
Vec
:
:
new
(
)
PrimitiveKeyKind
:
:
Clear
)
;
}
pub
fn
add_line
(
&
mut
self
clip_and_scroll
:
ScrollNodeAndClipChain
info
:
&
LayoutPrimitiveInfo
wavy_line_thickness
:
f32
orientation
:
LineOrientation
color
:
ColorF
style
:
LineStyle
)
{
let
mut
info
=
info
.
clone
(
)
;
let
size
=
get_line_decoration_sizes
(
&
info
.
rect
.
size
orientation
style
wavy_line_thickness
)
;
let
cache_key
=
size
.
map
(
|
(
inline_size
block_size
)
|
{
let
size
=
match
orientation
{
LineOrientation
:
:
Horizontal
=
>
LayoutSize
:
:
new
(
inline_size
block_size
)
LineOrientation
:
:
Vertical
=
>
LayoutSize
:
:
new
(
block_size
inline_size
)
}
;
if
style
=
=
LineStyle
:
:
Dotted
{
let
clip_size
=
match
orientation
{
LineOrientation
:
:
Horizontal
=
>
{
LayoutSize
:
:
new
(
inline_size
*
(
info
.
rect
.
size
.
width
/
inline_size
)
.
floor
(
)
info
.
rect
.
size
.
height
)
}
LineOrientation
:
:
Vertical
=
>
{
LayoutSize
:
:
new
(
info
.
rect
.
size
.
width
inline_size
*
(
info
.
rect
.
size
.
height
/
inline_size
)
.
floor
(
)
)
}
}
;
let
clip_rect
=
LayoutRect
:
:
new
(
info
.
rect
.
origin
clip_size
)
;
info
.
clip_rect
=
clip_rect
.
intersection
(
&
info
.
clip_rect
)
.
unwrap_or_else
(
LayoutRect
:
:
zero
)
;
}
LineDecorationCacheKey
{
style
orientation
wavy_line_thickness
:
Au
:
:
from_f32_px
(
wavy_line_thickness
)
size
:
size
.
to_au
(
)
}
}
)
;
self
.
add_primitive
(
clip_and_scroll
&
info
Vec
:
:
new
(
)
LineDecoration
{
cache_key
color
:
color
.
into
(
)
}
)
;
}
pub
fn
add_border
(
&
mut
self
clip_and_scroll
:
ScrollNodeAndClipChain
info
:
&
LayoutPrimitiveInfo
border_item
:
&
BorderDisplayItem
gradient_stops
:
ItemRange
<
GradientStop
>
)
{
match
border_item
.
details
{
BorderDetails
:
:
NinePatch
(
ref
border
)
=
>
{
let
nine_patch
=
NinePatchDescriptor
{
width
:
border
.
width
height
:
border
.
height
slice
:
border
.
slice
fill
:
border
.
fill
repeat_horizontal
:
border
.
repeat_horizontal
repeat_vertical
:
border
.
repeat_vertical
outset
:
border
.
outset
.
into
(
)
widths
:
border_item
.
widths
.
into
(
)
}
;
match
border
.
source
{
NinePatchBorderSource
:
:
Image
(
image_key
)
=
>
{
let
prim
=
ImageBorder
{
request
:
ImageRequest
{
key
:
image_key
rendering
:
ImageRendering
:
:
Auto
tile
:
None
}
nine_patch
}
;
self
.
add_nonshadowable_primitive
(
clip_and_scroll
info
Vec
:
:
new
(
)
prim
)
;
}
NinePatchBorderSource
:
:
Gradient
(
gradient
)
=
>
{
let
prim
=
match
self
.
create_linear_gradient_prim
(
&
info
gradient
.
start_point
gradient
.
end_point
gradient_stops
gradient
.
extend_mode
LayoutSize
:
:
new
(
border
.
height
as
f32
border
.
width
as
f32
)
LayoutSize
:
:
zero
(
)
Some
(
Box
:
:
new
(
nine_patch
)
)
)
{
Some
(
prim
)
=
>
prim
None
=
>
return
}
;
self
.
add_nonshadowable_primitive
(
clip_and_scroll
info
Vec
:
:
new
(
)
prim
)
;
}
NinePatchBorderSource
:
:
RadialGradient
(
gradient
)
=
>
{
let
prim
=
self
.
create_radial_gradient_prim
(
&
info
gradient
.
center
gradient
.
start_offset
*
gradient
.
radius
.
width
gradient
.
end_offset
*
gradient
.
radius
.
width
gradient
.
radius
.
width
/
gradient
.
radius
.
height
gradient_stops
gradient
.
extend_mode
LayoutSize
:
:
new
(
border
.
height
as
f32
border
.
width
as
f32
)
LayoutSize
:
:
zero
(
)
Some
(
Box
:
:
new
(
nine_patch
)
)
)
;
self
.
add_nonshadowable_primitive
(
clip_and_scroll
info
Vec
:
:
new
(
)
prim
)
;
}
}
;
}
BorderDetails
:
:
Normal
(
ref
border
)
=
>
{
self
.
add_normal_border
(
info
border
border_item
.
widths
clip_and_scroll
)
;
}
}
}
pub
fn
create_linear_gradient_prim
(
&
mut
self
info
:
&
LayoutPrimitiveInfo
start_point
:
LayoutPoint
end_point
:
LayoutPoint
stops
:
ItemRange
<
GradientStop
>
extend_mode
:
ExtendMode
stretch_size
:
LayoutSize
mut
tile_spacing
:
LayoutSize
nine_patch
:
Option
<
Box
<
NinePatchDescriptor
>
>
)
-
>
Option
<
LinearGradient
>
{
let
mut
prim_rect
=
info
.
rect
;
simplify_repeated_primitive
(
&
stretch_size
&
mut
tile_spacing
&
mut
prim_rect
)
;
let
mut
max_alpha
:
f32
=
0
.
0
;
let
stops
=
stops
.
iter
(
)
.
map
(
|
stop
|
{
max_alpha
=
max_alpha
.
max
(
stop
.
color
.
a
)
;
GradientStopKey
{
offset
:
stop
.
offset
color
:
stop
.
color
.
into
(
)
}
}
)
.
collect
(
)
;
if
max_alpha
<
=
0
.
0
{
return
None
;
}
let
reverse_stops
=
start_point
.
x
>
end_point
.
x
|
|
(
start_point
.
x
=
=
end_point
.
x
&
&
start_point
.
y
>
end_point
.
y
)
;
let
(
sp
ep
)
=
if
reverse_stops
{
(
end_point
start_point
)
}
else
{
(
start_point
end_point
)
}
;
Some
(
LinearGradient
{
extend_mode
start_point
:
sp
.
into
(
)
end_point
:
ep
.
into
(
)
stretch_size
:
stretch_size
.
into
(
)
tile_spacing
:
tile_spacing
.
into
(
)
stops
reverse_stops
nine_patch
}
)
}
pub
fn
create_radial_gradient_prim
(
&
mut
self
info
:
&
LayoutPrimitiveInfo
center
:
LayoutPoint
start_radius
:
f32
end_radius
:
f32
ratio_xy
:
f32
stops
:
ItemRange
<
GradientStop
>
extend_mode
:
ExtendMode
stretch_size
:
LayoutSize
mut
tile_spacing
:
LayoutSize
nine_patch
:
Option
<
Box
<
NinePatchDescriptor
>
>
)
-
>
RadialGradient
{
let
mut
prim_rect
=
info
.
rect
;
simplify_repeated_primitive
(
&
stretch_size
&
mut
tile_spacing
&
mut
prim_rect
)
;
let
params
=
RadialGradientParams
{
start_radius
end_radius
ratio_xy
}
;
let
stops
=
stops
.
iter
(
)
.
map
(
|
stop
|
{
GradientStopKey
{
offset
:
stop
.
offset
color
:
stop
.
color
.
into
(
)
}
}
)
.
collect
(
)
;
RadialGradient
{
extend_mode
center
:
center
.
into
(
)
params
stretch_size
:
stretch_size
.
into
(
)
tile_spacing
:
tile_spacing
.
into
(
)
nine_patch
stops
}
}
pub
fn
add_text
(
&
mut
self
clip_and_scroll
:
ScrollNodeAndClipChain
prim_info
:
&
LayoutPrimitiveInfo
font_instance_key
:
&
FontInstanceKey
text_color
:
&
ColorF
glyph_range
:
ItemRange
<
GlyphInstance
>
glyph_options
:
Option
<
GlyphOptions
>
)
{
let
offset
=
self
.
current_offset
(
clip_and_scroll
.
spatial_node_index
)
;
let
text_run
=
{
let
instance_map
=
self
.
font_instances
.
read
(
)
.
unwrap
(
)
;
let
font_instance
=
match
instance_map
.
get
(
font_instance_key
)
{
Some
(
instance
)
=
>
instance
None
=
>
{
warn
!
(
"
Unknown
font
instance
key
"
)
;
debug
!
(
"
key
=
{
:
?
}
"
font_instance_key
)
;
return
;
}
}
;
if
font_instance
.
size
.
0
<
=
0
{
return
;
}
let
mut
render_mode
=
self
.
config
.
default_font_render_mode
.
limit_by
(
font_instance
.
render_mode
)
;
let
mut
flags
=
font_instance
.
flags
;
if
let
Some
(
options
)
=
glyph_options
{
render_mode
=
render_mode
.
limit_by
(
options
.
render_mode
)
;
flags
|
=
options
.
flags
;
}
let
font
=
FontInstance
:
:
new
(
Arc
:
:
clone
(
font_instance
)
(
*
text_color
)
.
into
(
)
render_mode
flags
)
;
let
prim_offset
=
prim_info
.
rect
.
origin
.
to_vector
(
)
-
offset
;
let
glyphs
=
glyph_range
.
iter
(
)
.
map
(
|
glyph
|
{
GlyphInstance
{
index
:
glyph
.
index
point
:
glyph
.
point
-
prim_offset
}
}
)
.
collect
(
)
;
TextRun
{
glyphs
:
Arc
:
:
new
(
glyphs
)
font
shadow
:
false
}
}
;
self
.
add_primitive
(
clip_and_scroll
prim_info
Vec
:
:
new
(
)
text_run
)
;
}
pub
fn
add_image
(
&
mut
self
clip_and_scroll
:
ScrollNodeAndClipChain
info
:
&
LayoutPrimitiveInfo
stretch_size
:
LayoutSize
mut
tile_spacing
:
LayoutSize
sub_rect
:
Option
<
TexelRect
>
image_key
:
ImageKey
image_rendering
:
ImageRendering
alpha_type
:
AlphaType
color
:
ColorF
)
{
let
mut
prim_rect
=
info
.
rect
;
simplify_repeated_primitive
(
&
stretch_size
&
mut
tile_spacing
&
mut
prim_rect
)
;
let
info
=
LayoutPrimitiveInfo
{
rect
:
prim_rect
.
.
*
info
}
;
let
sub_rect
=
sub_rect
.
map
(
|
texel_rect
|
{
DeviceIntRect
:
:
new
(
DeviceIntPoint
:
:
new
(
texel_rect
.
uv0
.
x
as
i32
texel_rect
.
uv0
.
y
as
i32
)
DeviceIntSize
:
:
new
(
(
texel_rect
.
uv1
.
x
-
texel_rect
.
uv0
.
x
)
as
i32
(
texel_rect
.
uv1
.
y
-
texel_rect
.
uv0
.
y
)
as
i32
)
)
}
)
;
self
.
add_primitive
(
clip_and_scroll
&
info
Vec
:
:
new
(
)
Image
{
key
:
image_key
tile_spacing
:
tile_spacing
.
into
(
)
stretch_size
:
stretch_size
.
into
(
)
color
:
color
.
into
(
)
sub_rect
image_rendering
alpha_type
}
)
;
}
pub
fn
add_yuv_image
(
&
mut
self
clip_and_scroll
:
ScrollNodeAndClipChain
info
:
&
LayoutPrimitiveInfo
yuv_data
:
YuvData
color_depth
:
ColorDepth
color_space
:
YuvColorSpace
color_range
:
ColorRange
image_rendering
:
ImageRendering
)
{
let
format
=
yuv_data
.
get_format
(
)
;
let
yuv_key
=
match
yuv_data
{
YuvData
:
:
NV12
(
plane_0
plane_1
)
=
>
[
plane_0
plane_1
ImageKey
:
:
DUMMY
]
YuvData
:
:
PlanarYCbCr
(
plane_0
plane_1
plane_2
)
=
>
[
plane_0
plane_1
plane_2
]
YuvData
:
:
InterleavedYCbCr
(
plane_0
)
=
>
[
plane_0
ImageKey
:
:
DUMMY
ImageKey
:
:
DUMMY
]
}
;
self
.
add_nonshadowable_primitive
(
clip_and_scroll
info
Vec
:
:
new
(
)
YuvImage
{
color_depth
yuv_key
format
color_space
color_range
image_rendering
}
)
;
}
pub
fn
add_primitive_instance_to_3d_root
(
&
mut
self
instance
:
PrimitiveInstance
)
{
for
sc
in
self
.
sc_stack
.
iter_mut
(
)
.
rev
(
)
{
match
sc
.
context_3d
{
Picture3DContext
:
:
In
{
root_data
:
Some
(
ref
mut
prims
)
.
.
}
=
>
{
prims
.
push
(
instance
)
;
break
;
}
Picture3DContext
:
:
In
{
.
.
}
=
>
{
}
Picture3DContext
:
:
Out
=
>
panic
!
(
"
Unable
to
find
3D
root
"
)
}
}
}
pub
fn
add_backdrop_filter
(
&
mut
self
clip_and_scroll
:
ScrollNodeAndClipChain
info
:
&
LayoutPrimitiveInfo
filters
:
Vec
<
Filter
>
filter_datas
:
Vec
<
FilterData
>
filter_primitives
:
Vec
<
FilterPrimitive
>
)
{
let
mut
backdrop_pic_index
=
match
self
.
cut_backdrop_picture
(
)
{
None
=
>
return
Some
(
backdrop_pic_index
)
=
>
backdrop_pic_index
}
;
let
backdrop_spatial_node_index
=
self
.
prim_store
.
pictures
[
backdrop_pic_index
.
0
]
.
spatial_node_index
;
let
requested_raster_space
=
self
.
sc_stack
.
last
(
)
.
expect
(
"
no
active
stacking
context
"
)
.
requested_raster_space
;
let
mut
instance
=
self
.
create_primitive
(
info
clip_and_scroll
.
clip_chain_id
backdrop_spatial_node_index
Backdrop
{
pic_index
:
backdrop_pic_index
spatial_node_index
:
clip_and_scroll
.
spatial_node_index
border_rect
:
info
.
rect
.
into
(
)
}
)
;
for
stacking_context
in
self
.
sc_stack
.
iter
(
)
.
rev
(
)
.
take_while
(
|
sc
|
!
sc
.
is_backdrop_root
)
{
let
clip_chain_id
=
stacking_context
.
clip_chain_id
;
let
is_backface_visible
=
stacking_context
.
is_backface_visible
;
let
composite_mode
=
None
;
backdrop_pic_index
=
PictureIndex
(
self
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
composite_mode
.
clone
(
)
Picture3DContext
:
:
Out
None
true
is_backface_visible
requested_raster_space
PrimitiveList
:
:
new
(
vec
!
[
instance
]
&
mut
self
.
interners
)
backdrop_spatial_node_index
None
PictureOptions
{
inflate_if_required
:
false
}
)
)
)
;
instance
=
create_prim_instance
(
backdrop_pic_index
composite_mode
.
into
(
)
is_backface_visible
clip_chain_id
backdrop_spatial_node_index
&
mut
self
.
interners
)
;
}
let
(
mut
filtered_pic_index
mut
filtered_instance
)
=
self
.
wrap_prim_with_filters
(
instance
backdrop_pic_index
filters
filter_primitives
filter_datas
info
.
is_backface_visible
requested_raster_space
backdrop_spatial_node_index
false
)
;
let
backdrop_root_pos
=
self
.
sc_stack
.
iter
(
)
.
rposition
(
|
sc
|
sc
.
is_backdrop_root
)
.
expect
(
"
no
backdrop
root
?
"
)
;
for
i
in
(
(
backdrop_root_pos
+
1
)
.
.
self
.
sc_stack
.
len
(
)
)
.
rev
(
)
{
let
stacking_context
=
&
self
.
sc_stack
[
i
]
;
let
filters
=
stacking_context
.
composite_ops
.
filters
.
clone
(
)
;
let
filter_primitives
=
stacking_context
.
composite_ops
.
filter_primitives
.
clone
(
)
;
let
filter_datas
=
stacking_context
.
composite_ops
.
filter_datas
.
clone
(
)
;
let
(
pic_index
instance
)
=
self
.
wrap_prim_with_filters
(
filtered_instance
filtered_pic_index
filters
filter_primitives
filter_datas
info
.
is_backface_visible
requested_raster_space
backdrop_spatial_node_index
false
)
;
filtered_instance
=
instance
;
filtered_pic_index
=
pic_index
;
}
filtered_instance
.
clip_chain_id
=
clip_and_scroll
.
clip_chain_id
;
self
.
sc_stack
.
iter_mut
(
)
.
rev
(
)
.
find
(
|
sc
|
sc
.
is_backdrop_root
)
.
unwrap
(
)
.
primitives
.
push
(
filtered_instance
)
;
}
pub
fn
cut_backdrop_picture
(
&
mut
self
)
-
>
Option
<
PictureIndex
>
{
let
mut
flattened_items
=
None
;
let
mut
backdrop_root
=
None
;
for
sc
in
self
.
sc_stack
.
iter_mut
(
)
.
rev
(
)
{
if
let
Some
(
(
_
flattened_instance
)
)
=
flattened_items
.
take
(
)
{
sc
.
primitives
.
push
(
flattened_instance
)
;
}
flattened_items
=
sc
.
cut_item_sequence
(
&
mut
self
.
prim_store
&
mut
self
.
interners
None
Picture3DContext
:
:
Out
)
;
if
sc
.
is_backdrop_root
{
backdrop_root
=
Some
(
sc
)
;
break
;
}
}
let
(
pic_index
instance
)
=
flattened_items
?
;
self
.
prim_store
.
pictures
[
pic_index
.
0
]
.
requested_composite_mode
=
Some
(
PictureCompositeMode
:
:
Blit
(
BlitReason
:
:
BACKDROP
)
)
;
backdrop_root
.
expect
(
"
no
backdrop
root
found
"
)
.
primitives
.
push
(
instance
)
;
Some
(
pic_index
)
}
fn
wrap_prim_with_filters
(
&
mut
self
mut
cur_instance
:
PrimitiveInstance
mut
current_pic_index
:
PictureIndex
mut
filter_ops
:
Vec
<
Filter
>
mut
filter_primitives
:
Vec
<
FilterPrimitive
>
filter_datas
:
Vec
<
FilterData
>
is_backface_visible
:
bool
requested_raster_space
:
RasterSpace
spatial_node_index
:
SpatialNodeIndex
inflate_if_required
:
bool
)
-
>
(
PictureIndex
PrimitiveInstance
)
{
assert
!
(
filter_ops
.
is_empty
(
)
|
|
filter_primitives
.
is_empty
(
)
"
Filter
ops
and
filter
primitives
are
not
allowed
on
the
same
stacking
context
.
"
)
;
let
mut
current_filter_data_index
=
0
;
for
filter
in
&
mut
filter_ops
{
filter
.
sanitize
(
)
;
let
composite_mode
=
Some
(
match
*
filter
{
Filter
:
:
ComponentTransfer
=
>
{
let
filter_data
=
&
filter_datas
[
current_filter_data_index
]
;
let
filter_data
=
filter_data
.
sanitize
(
)
;
current_filter_data_index
=
current_filter_data_index
+
1
;
if
filter_data
.
is_identity
(
)
{
continue
}
else
{
let
filter_data_key
=
SFilterDataKey
{
data
:
SFilterData
{
r_func
:
SFilterDataComponent
:
:
from_functype_values
(
filter_data
.
func_r_type
&
filter_data
.
r_values
)
g_func
:
SFilterDataComponent
:
:
from_functype_values
(
filter_data
.
func_g_type
&
filter_data
.
g_values
)
b_func
:
SFilterDataComponent
:
:
from_functype_values
(
filter_data
.
func_b_type
&
filter_data
.
b_values
)
a_func
:
SFilterDataComponent
:
:
from_functype_values
(
filter_data
.
func_a_type
&
filter_data
.
a_values
)
}
}
;
let
handle
=
self
.
interners
.
filter_data
.
intern
(
&
filter_data_key
|
|
(
)
)
;
PictureCompositeMode
:
:
ComponentTransferFilter
(
handle
)
}
}
_
=
>
PictureCompositeMode
:
:
Filter
(
filter
.
clone
(
)
)
}
)
;
let
filter_pic_index
=
PictureIndex
(
self
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
composite_mode
.
clone
(
)
Picture3DContext
:
:
Out
None
true
is_backface_visible
requested_raster_space
PrimitiveList
:
:
new
(
vec
!
[
cur_instance
.
clone
(
)
]
&
mut
self
.
interners
)
spatial_node_index
None
PictureOptions
{
inflate_if_required
}
)
)
)
;
current_pic_index
=
filter_pic_index
;
cur_instance
=
create_prim_instance
(
current_pic_index
composite_mode
.
into
(
)
is_backface_visible
ClipChainId
:
:
NONE
spatial_node_index
&
mut
self
.
interners
)
;
if
cur_instance
.
is_chased
(
)
{
println
!
(
"
\
tis
a
composite
picture
for
a
stacking
context
with
{
:
?
}
"
filter
)
;
}
self
.
prim_store
.
optimize_picture_if_possible
(
current_pic_index
)
;
}
if
!
filter_primitives
.
is_empty
(
)
{
let
filter_datas
=
filter_datas
.
iter
(
)
.
map
(
|
filter_data
|
filter_data
.
sanitize
(
)
)
.
map
(
|
filter_data
|
{
SFilterData
{
r_func
:
SFilterDataComponent
:
:
from_functype_values
(
filter_data
.
func_r_type
&
filter_data
.
r_values
)
g_func
:
SFilterDataComponent
:
:
from_functype_values
(
filter_data
.
func_g_type
&
filter_data
.
g_values
)
b_func
:
SFilterDataComponent
:
:
from_functype_values
(
filter_data
.
func_b_type
&
filter_data
.
b_values
)
a_func
:
SFilterDataComponent
:
:
from_functype_values
(
filter_data
.
func_a_type
&
filter_data
.
a_values
)
}
}
)
.
collect
(
)
;
for
primitive
in
&
mut
filter_primitives
{
primitive
.
sanitize
(
)
;
}
let
composite_mode
=
PictureCompositeMode
:
:
SvgFilter
(
filter_primitives
filter_datas
)
;
let
filter_pic_index
=
PictureIndex
(
self
.
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
Some
(
composite_mode
.
clone
(
)
)
Picture3DContext
:
:
Out
None
true
is_backface_visible
requested_raster_space
PrimitiveList
:
:
new
(
vec
!
[
cur_instance
.
clone
(
)
]
&
mut
self
.
interners
)
spatial_node_index
None
PictureOptions
{
inflate_if_required
}
)
)
)
;
current_pic_index
=
filter_pic_index
;
cur_instance
=
create_prim_instance
(
current_pic_index
Some
(
composite_mode
)
.
into
(
)
is_backface_visible
ClipChainId
:
:
NONE
spatial_node_index
&
mut
self
.
interners
)
;
if
cur_instance
.
is_chased
(
)
{
println
!
(
"
\
tis
a
composite
picture
for
a
stacking
context
with
an
SVG
filter
"
)
;
}
self
.
prim_store
.
optimize_picture_if_possible
(
current_pic_index
)
;
}
(
current_pic_index
cur_instance
)
}
}
pub
trait
CreateShadow
{
fn
create_shadow
(
&
self
shadow
:
&
Shadow
)
-
>
Self
;
}
pub
trait
IsVisible
{
fn
is_visible
(
&
self
)
-
>
bool
;
}
struct
FlattenedStackingContext
{
primitives
:
Vec
<
PrimitiveInstance
>
is_backface_visible
:
bool
requested_raster_space
:
RasterSpace
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
frame_output_pipeline_id
:
Option
<
PipelineId
>
composite_ops
:
CompositeOps
blit_reason
:
BlitReason
pipeline_id
:
PipelineId
transform_style
:
TransformStyle
context_3d
:
Picture3DContext
<
PrimitiveInstance
>
create_tile_cache
:
bool
is_backdrop_root
:
bool
}
impl
FlattenedStackingContext
{
pub
fn
is_3d
(
&
self
)
-
>
bool
{
self
.
transform_style
=
=
TransformStyle
:
:
Preserve3D
&
&
self
.
composite_ops
.
is_empty
(
)
}
pub
fn
is_redundant
(
&
self
parent
:
&
FlattenedStackingContext
)
-
>
bool
{
if
let
Picture3DContext
:
:
In
{
.
.
}
=
self
.
context_3d
{
return
false
;
}
if
!
self
.
composite_ops
.
filters
.
is_empty
(
)
{
return
false
;
}
if
!
self
.
composite_ops
.
filter_primitives
.
is_empty
(
)
{
return
false
;
}
if
!
self
.
composite_ops
.
mix_blend_mode
.
is_none
(
)
&
&
!
parent
.
primitives
.
is_empty
(
)
{
return
false
;
}
if
!
self
.
is_backface_visible
{
return
false
;
}
if
self
.
requested_raster_space
!
=
parent
.
requested_raster_space
{
return
false
;
}
if
!
self
.
blit_reason
.
is_empty
(
)
{
return
false
;
}
if
self
.
create_tile_cache
{
return
false
;
}
true
}
pub
fn
cut_item_sequence
(
&
mut
self
prim_store
:
&
mut
PrimitiveStore
interners
:
&
mut
Interners
composite_mode
:
Option
<
PictureCompositeMode
>
flat_items_context_3d
:
Picture3DContext
<
OrderedPictureChild
>
)
-
>
Option
<
(
PictureIndex
PrimitiveInstance
)
>
{
if
self
.
primitives
.
is_empty
(
)
{
return
None
}
let
pic_index
=
PictureIndex
(
prim_store
.
pictures
.
alloc
(
)
.
init
(
PicturePrimitive
:
:
new_image
(
composite_mode
.
clone
(
)
flat_items_context_3d
None
true
self
.
is_backface_visible
self
.
requested_raster_space
PrimitiveList
:
:
new
(
mem
:
:
replace
(
&
mut
self
.
primitives
Vec
:
:
new
(
)
)
interners
)
self
.
spatial_node_index
None
PictureOptions
:
:
default
(
)
)
)
)
;
let
prim_instance
=
create_prim_instance
(
pic_index
composite_mode
.
into
(
)
self
.
is_backface_visible
self
.
clip_chain_id
self
.
spatial_node_index
interners
)
;
Some
(
(
pic_index
prim_instance
)
)
}
}
pub
struct
PendingPrimitive
<
T
>
{
clip_and_scroll
:
ScrollNodeAndClipChain
info
:
LayoutPrimitiveInfo
prim
:
T
}
pub
struct
PendingShadow
{
shadow
:
Shadow
should_inflate
:
bool
clip_and_scroll
:
ScrollNodeAndClipChain
}
pub
enum
ShadowItem
{
Shadow
(
PendingShadow
)
Image
(
PendingPrimitive
<
Image
>
)
LineDecoration
(
PendingPrimitive
<
LineDecoration
>
)
NormalBorder
(
PendingPrimitive
<
NormalBorderPrim
>
)
Primitive
(
PendingPrimitive
<
PrimitiveKeyKind
>
)
TextRun
(
PendingPrimitive
<
TextRun
>
)
}
impl
From
<
PendingPrimitive
<
Image
>
>
for
ShadowItem
{
fn
from
(
image
:
PendingPrimitive
<
Image
>
)
-
>
Self
{
ShadowItem
:
:
Image
(
image
)
}
}
impl
From
<
PendingPrimitive
<
LineDecoration
>
>
for
ShadowItem
{
fn
from
(
line_dec
:
PendingPrimitive
<
LineDecoration
>
)
-
>
Self
{
ShadowItem
:
:
LineDecoration
(
line_dec
)
}
}
impl
From
<
PendingPrimitive
<
NormalBorderPrim
>
>
for
ShadowItem
{
fn
from
(
border
:
PendingPrimitive
<
NormalBorderPrim
>
)
-
>
Self
{
ShadowItem
:
:
NormalBorder
(
border
)
}
}
impl
From
<
PendingPrimitive
<
PrimitiveKeyKind
>
>
for
ShadowItem
{
fn
from
(
container
:
PendingPrimitive
<
PrimitiveKeyKind
>
)
-
>
Self
{
ShadowItem
:
:
Primitive
(
container
)
}
}
impl
From
<
PendingPrimitive
<
TextRun
>
>
for
ShadowItem
{
fn
from
(
text_run
:
PendingPrimitive
<
TextRun
>
)
-
>
Self
{
ShadowItem
:
:
TextRun
(
text_run
)
}
}
fn
create_prim_instance
(
pic_index
:
PictureIndex
composite_mode_key
:
PictureCompositeKey
is_backface_visible
:
bool
clip_chain_id
:
ClipChainId
spatial_node_index
:
SpatialNodeIndex
interners
:
&
mut
Interners
)
-
>
PrimitiveInstance
{
let
pic_key
=
PictureKey
:
:
new
(
is_backface_visible
LayoutSize
:
:
zero
(
)
Picture
{
composite_mode_key
}
)
;
let
data_handle
=
interners
.
picture
.
intern
(
&
pic_key
|
|
{
PrimitiveSceneData
{
prim_size
:
LayoutSize
:
:
zero
(
)
is_backface_visible
}
}
)
;
PrimitiveInstance
:
:
new
(
LayoutPoint
:
:
zero
(
)
LayoutRect
:
:
max_rect
(
)
PrimitiveInstanceKind
:
:
Picture
{
data_handle
pic_index
segment_instance_index
:
SegmentInstanceIndex
:
:
INVALID
}
clip_chain_id
spatial_node_index
)
}
fn
create_clip_prim_instance
(
spatial_node_index
:
SpatialNodeIndex
clip_chain_id
:
ClipChainId
kind
:
PrimitiveInstanceKind
)
-
>
PrimitiveInstance
{
PrimitiveInstance
:
:
new
(
LayoutPoint
:
:
zero
(
)
LayoutRect
:
:
max_rect
(
)
kind
clip_chain_id
spatial_node_index
)
}
fn
filter_ops_for_compositing
(
input_filters
:
ItemRange
<
FilterOp
>
)
-
>
Vec
<
Filter
>
{
input_filters
.
iter
(
)
.
map
(
|
filter
|
filter
.
into
(
)
)
.
collect
(
)
}
fn
filter_datas_for_compositing
(
input_filter_datas
:
&
[
TempFilterData
]
)
-
>
Vec
<
FilterData
>
{
let
mut
filter_datas
=
vec
!
[
]
;
for
temp_filter_data
in
input_filter_datas
{
let
func_types
:
Vec
<
ComponentTransferFuncType
>
=
temp_filter_data
.
func_types
.
iter
(
)
.
collect
(
)
;
debug_assert
!
(
func_types
.
len
(
)
=
=
4
)
;
filter_datas
.
push
(
FilterData
{
func_r_type
:
func_types
[
0
]
r_values
:
temp_filter_data
.
r_values
.
iter
(
)
.
collect
(
)
func_g_type
:
func_types
[
1
]
g_values
:
temp_filter_data
.
g_values
.
iter
(
)
.
collect
(
)
func_b_type
:
func_types
[
2
]
b_values
:
temp_filter_data
.
b_values
.
iter
(
)
.
collect
(
)
func_a_type
:
func_types
[
3
]
a_values
:
temp_filter_data
.
a_values
.
iter
(
)
.
collect
(
)
}
)
;
}
filter_datas
}
fn
filter_primitives_for_compositing
(
input_filter_primitives
:
ItemRange
<
FilterPrimitive
>
)
-
>
Vec
<
FilterPrimitive
>
{
input_filter_primitives
.
iter
(
)
.
map
(
|
primitive
|
primitive
.
into
(
)
)
.
collect
(
)
}
