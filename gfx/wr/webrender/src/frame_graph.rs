use
api
:
:
units
:
:
*
;
use
api
:
:
ImageFormat
;
use
crate
:
:
gpu_cache
:
:
GpuCache
;
use
crate
:
:
internal_types
:
:
{
CacheTextureId
FastHashMap
FastHashSet
}
;
use
crate
:
:
render_backend
:
:
FrameId
;
use
crate
:
:
render_task_graph
:
:
{
RenderTaskId
}
;
use
crate
:
:
render_task
:
:
{
StaticRenderTaskSurface
RenderTaskLocation
RenderTask
}
;
use
crate
:
:
render_target
:
:
RenderTargetKind
;
use
crate
:
:
render_task
:
:
RenderTaskData
;
use
crate
:
:
render_task_graph
:
:
RenderTaskAllocation
;
use
crate
:
:
resource_cache
:
:
ResourceCache
;
use
crate
:
:
texture_pack
:
:
GuillotineAllocator
;
use
crate
:
:
util
:
:
VecHelper
;
use
smallvec
:
:
SmallVec
;
use
std
:
:
mem
;
const
MAX_SHARED_SURFACE_SIZE
:
i32
=
2048
;
const
TEXTURE_DIMENSION_MASK
:
i32
=
0xFF
;
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
#
[
derive
(
Debug
Copy
Clone
Hash
Eq
PartialEq
PartialOrd
Ord
)
]
pub
struct
PassId
(
usize
)
;
impl
PassId
{
pub
const
MIN
:
PassId
=
PassId
(
0
)
;
pub
const
MAX
:
PassId
=
PassId
(
!
0
)
;
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
struct
Surface
{
kind
:
RenderTargetKind
allocator
:
GuillotineAllocator
is_shared
:
bool
}
impl
Surface
{
fn
alloc_rect
(
&
mut
self
size
:
DeviceIntSize
kind
:
RenderTargetKind
is_shared
:
bool
)
-
>
Option
<
DeviceIntPoint
>
{
if
self
.
kind
=
=
kind
&
&
self
.
is_shared
=
=
is_shared
{
self
.
allocator
.
allocate
(
&
size
)
.
map
(
|
(
_slice
origin
)
|
origin
)
}
else
{
None
}
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
#
[
derive
(
Debug
)
]
pub
enum
SubPassSurface
{
Dynamic
{
texture_id
:
CacheTextureId
target_kind
:
RenderTargetKind
used_rect
:
DeviceIntRect
}
Persistent
{
surface
:
StaticRenderTaskSurface
}
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
SubPass
{
pub
surface
:
SubPassSurface
pub
task_ids
:
Vec
<
RenderTaskId
>
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
Pass
{
pub
task_ids
:
Vec
<
RenderTaskId
>
pub
sub_passes
:
Vec
<
SubPass
>
pub
textures_to_invalidate
:
Vec
<
CacheTextureId
>
}
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
FrameGraph
{
pub
tasks
:
Vec
<
RenderTask
>
pub
passes
:
Vec
<
Pass
>
frame_id
:
FrameId
pub
task_data
:
Vec
<
RenderTaskData
>
#
[
cfg
(
test
)
]
surface_count
:
usize
#
[
cfg
(
test
)
]
unique_surfaces
:
FastHashSet
<
CacheTextureId
>
}
pub
struct
FrameGraphBuilder
{
tasks
:
Vec
<
RenderTask
>
roots
:
FastHashSet
<
RenderTaskId
>
target_inputs
:
Vec
<
(
RenderTaskId
StaticRenderTaskSurface
)
>
frame_id
:
FrameId
textures_to_free
:
FastHashSet
<
CacheTextureId
>
active_surfaces
:
FastHashMap
<
CacheTextureId
Surface
>
child_task_buffer
:
Vec
<
RenderTaskId
>
}
impl
FrameGraphBuilder
{
pub
fn
new
(
)
-
>
Self
{
FrameGraphBuilder
{
tasks
:
Vec
:
:
new
(
)
roots
:
FastHashSet
:
:
default
(
)
target_inputs
:
Vec
:
:
new
(
)
frame_id
:
FrameId
:
:
INVALID
textures_to_free
:
FastHashSet
:
:
default
(
)
active_surfaces
:
FastHashMap
:
:
default
(
)
child_task_buffer
:
Vec
:
:
new
(
)
}
}
#
[
cfg
(
debug_assertions
)
]
pub
fn
frame_id
(
&
self
)
-
>
FrameId
{
self
.
frame_id
}
pub
fn
begin_frame
(
&
mut
self
frame_id
:
FrameId
)
{
self
.
frame_id
=
frame_id
;
self
.
roots
.
clear
(
)
;
}
pub
fn
get_task
(
&
self
task_id
:
RenderTaskId
)
-
>
&
RenderTask
{
&
self
.
tasks
[
task_id
.
index
as
usize
]
}
pub
fn
get_task_mut
(
&
mut
self
task_id
:
RenderTaskId
)
-
>
&
mut
RenderTask
{
&
mut
self
.
tasks
[
task_id
.
index
as
usize
]
}
pub
fn
add
(
&
mut
self
)
-
>
RenderTaskAllocation
{
self
.
roots
.
insert
(
RenderTaskId
{
index
:
self
.
tasks
.
len
(
)
as
u32
}
)
;
RenderTaskAllocation
{
alloc
:
self
.
tasks
.
alloc
(
)
}
}
pub
fn
add_dependency
(
&
mut
self
task_id
:
RenderTaskId
input
:
RenderTaskId
)
{
self
.
tasks
[
task_id
.
index
as
usize
]
.
children
.
push
(
input
)
;
self
.
roots
.
remove
(
&
input
)
;
}
pub
fn
add_target_input
(
&
mut
self
task_id
:
RenderTaskId
target
:
StaticRenderTaskSurface
)
{
self
.
target_inputs
.
push
(
(
task_id
target
)
)
;
}
pub
fn
end_frame
(
&
mut
self
resource_cache
:
&
mut
ResourceCache
gpu_cache
:
&
mut
GpuCache
)
-
>
FrameGraph
{
let
task_count
=
self
.
tasks
.
len
(
)
;
let
tasks
=
mem
:
:
replace
(
&
mut
self
.
tasks
Vec
:
:
with_capacity
(
task_count
)
)
;
let
mut
graph
=
FrameGraph
{
tasks
passes
:
Vec
:
:
new
(
)
task_data
:
Vec
:
:
with_capacity
(
task_count
)
frame_id
:
self
.
frame_id
#
[
cfg
(
test
)
]
surface_count
:
0
#
[
cfg
(
test
)
]
unique_surfaces
:
FastHashSet
:
:
default
(
)
}
;
if
!
self
.
target_inputs
.
is_empty
(
)
{
let
mut
roots
=
FastHashMap
:
:
default
(
)
;
roots
.
reserve
(
self
.
roots
.
len
(
)
)
;
for
root_id
in
&
self
.
roots
{
let
task
=
&
graph
.
tasks
[
root_id
.
index
as
usize
]
;
match
task
.
location
{
RenderTaskLocation
:
:
Static
{
ref
surface
.
.
}
=
>
{
assert
!
(
!
roots
.
contains_key
(
surface
)
)
;
roots
.
insert
(
surface
.
clone
(
)
*
root_id
)
;
}
RenderTaskLocation
:
:
Dynamic
{
.
.
}
|
RenderTaskLocation
:
:
Unallocated
{
.
.
}
=
>
{
panic
!
(
"
bug
:
invalid
root
"
)
;
}
}
}
assert_eq
!
(
roots
.
len
(
)
self
.
roots
.
len
(
)
)
;
for
(
task_id
target_id
)
in
self
.
target_inputs
.
drain
(
.
.
)
{
match
roots
.
get
(
&
target_id
)
{
Some
(
root_task_id
)
=
>
{
graph
.
tasks
[
task_id
.
index
as
usize
]
.
children
.
push
(
*
root_task_id
)
;
self
.
roots
.
remove
(
root_task_id
)
;
}
None
=
>
{
println
!
(
"
WARN
:
{
:
?
}
depends
on
root
{
:
?
}
but
it
has
no
tasks
!
"
task_id
target_id
)
;
}
}
}
}
let
mut
pass_count
=
0
;
for
root_id
in
&
self
.
roots
{
assign_render_pass
(
*
root_id
PassId
(
0
)
&
mut
graph
&
mut
pass_count
)
;
}
for
i
in
0
.
.
graph
.
tasks
.
len
(
)
{
let
task_id
=
RenderTaskId
{
index
:
i
as
u32
}
;
assign_free_pass
(
task_id
&
mut
self
.
child_task_buffer
&
mut
graph
)
;
}
for
_
in
0
.
.
pass_count
+
1
{
graph
.
passes
.
push
(
Pass
{
task_ids
:
Vec
:
:
new
(
)
sub_passes
:
Vec
:
:
new
(
)
textures_to_invalidate
:
Vec
:
:
new
(
)
}
)
;
}
for
(
index
task
)
in
graph
.
tasks
.
iter
(
)
.
enumerate
(
)
{
let
id
=
RenderTaskId
{
index
:
index
as
u32
}
;
graph
.
passes
[
task
.
render_on
.
0
]
.
task_ids
.
push
(
id
)
;
}
assert
!
(
self
.
active_surfaces
.
is_empty
(
)
)
;
for
(
pass_id
pass
)
in
graph
.
passes
.
iter_mut
(
)
.
enumerate
(
)
.
rev
(
)
{
assert
!
(
self
.
textures_to_free
.
is_empty
(
)
)
;
for
task_id
in
&
pass
.
task_ids
{
let
task
=
&
mut
graph
.
tasks
[
task_id
.
index
as
usize
]
;
match
task
.
location
{
RenderTaskLocation
:
:
Unallocated
{
size
}
=
>
{
let
mut
location
=
None
;
let
kind
=
task
.
kind
.
target_kind
(
)
;
let
can_use_shared_surface
=
task
.
render_on
=
=
PassId
(
task
.
free_after
.
0
+
1
)
;
if
can_use_shared_surface
{
for
sub_pass
in
&
mut
pass
.
sub_passes
{
if
let
SubPassSurface
:
:
Dynamic
{
texture_id
ref
mut
used_rect
.
.
}
=
sub_pass
.
surface
{
let
surface
=
self
.
active_surfaces
.
get_mut
(
&
texture_id
)
.
unwrap
(
)
;
if
let
Some
(
p
)
=
surface
.
alloc_rect
(
size
kind
true
)
{
location
=
Some
(
(
texture_id
p
)
)
;
*
used_rect
=
used_rect
.
union
(
&
DeviceIntRect
:
:
new
(
p
size
)
)
;
sub_pass
.
task_ids
.
push
(
*
task_id
)
;
break
;
}
}
}
}
if
location
.
is_none
(
)
{
let
can_use_shared_surface
=
can_use_shared_surface
&
&
size
.
width
<
=
MAX_SHARED_SURFACE_SIZE
&
&
size
.
height
<
=
MAX_SHARED_SURFACE_SIZE
;
let
surface_size
=
if
can_use_shared_surface
{
DeviceIntSize
:
:
new
(
MAX_SHARED_SURFACE_SIZE
MAX_SHARED_SURFACE_SIZE
)
}
else
{
DeviceIntSize
:
:
new
(
(
size
.
width
+
TEXTURE_DIMENSION_MASK
)
&
!
TEXTURE_DIMENSION_MASK
(
size
.
height
+
TEXTURE_DIMENSION_MASK
)
&
!
TEXTURE_DIMENSION_MASK
)
}
;
let
format
=
match
kind
{
RenderTargetKind
:
:
Color
=
>
ImageFormat
:
:
RGBA8
RenderTargetKind
:
:
Alpha
=
>
ImageFormat
:
:
R8
}
;
let
texture_id
=
resource_cache
.
get_or_create_render_target_from_pool
(
surface_size
format
)
;
let
mut
surface
=
Surface
{
kind
allocator
:
GuillotineAllocator
:
:
new
(
Some
(
surface_size
)
)
is_shared
:
can_use_shared_surface
}
;
let
p
=
surface
.
alloc_rect
(
size
kind
can_use_shared_surface
)
.
expect
(
"
bug
:
alloc
must
succeed
!
"
)
;
location
=
Some
(
(
texture_id
p
)
)
;
let
_prev_surface
=
self
.
active_surfaces
.
insert
(
texture_id
surface
)
;
assert
!
(
_prev_surface
.
is_none
(
)
)
;
#
[
cfg
(
test
)
]
{
graph
.
surface_count
+
=
1
;
graph
.
unique_surfaces
.
insert
(
texture_id
)
;
}
pass
.
sub_passes
.
push
(
SubPass
{
surface
:
SubPassSurface
:
:
Dynamic
{
texture_id
target_kind
:
kind
used_rect
:
DeviceIntRect
:
:
new
(
p
size
)
}
task_ids
:
vec
!
[
*
task_id
]
}
)
;
}
assert
!
(
location
.
is_some
(
)
)
;
task
.
location
=
RenderTaskLocation
:
:
Dynamic
{
texture_id
:
location
.
unwrap
(
)
.
0
rect
:
DeviceIntRect
:
:
new
(
location
.
unwrap
(
)
.
1
size
)
}
;
}
RenderTaskLocation
:
:
Static
{
ref
surface
.
.
}
=
>
{
pass
.
sub_passes
.
push
(
SubPass
{
surface
:
SubPassSurface
:
:
Persistent
{
surface
:
surface
.
clone
(
)
}
task_ids
:
vec
!
[
*
task_id
]
}
)
;
}
RenderTaskLocation
:
:
Dynamic
{
.
.
}
=
>
{
panic
!
(
"
bug
:
encountered
an
already
allocated
task
"
)
;
}
}
let
task
=
&
graph
.
tasks
[
task_id
.
index
as
usize
]
;
for
child_id
in
&
task
.
children
{
let
child_task
=
&
graph
.
tasks
[
child_id
.
index
as
usize
]
;
match
child_task
.
location
{
RenderTaskLocation
:
:
Unallocated
{
.
.
}
=
>
panic
!
(
"
bug
:
must
be
allocated
"
)
RenderTaskLocation
:
:
Dynamic
{
texture_id
.
.
}
=
>
{
if
child_task
.
free_after
=
=
PassId
(
pass_id
)
{
self
.
textures_to_free
.
insert
(
texture_id
)
;
}
}
RenderTaskLocation
:
:
Static
{
.
.
}
=
>
{
}
}
}
}
for
texture_id
in
self
.
textures_to_free
.
drain
(
)
{
resource_cache
.
return_render_target_to_pool
(
texture_id
)
;
self
.
active_surfaces
.
remove
(
&
texture_id
)
.
unwrap
(
)
;
pass
.
textures_to_invalidate
.
push
(
texture_id
)
;
}
}
assert
!
(
self
.
active_surfaces
.
is_empty
(
)
)
;
for
task
in
&
mut
graph
.
tasks
{
let
(
target_rect
target_index
)
=
task
.
get_target_rect
(
)
;
task
.
kind
.
write_gpu_blocks
(
target_rect
target_index
gpu_cache
)
;
graph
.
task_data
.
push
(
task
.
kind
.
write_task_data
(
target_rect
target_index
)
)
;
}
graph
}
}
impl
FrameGraph
{
#
[
allow
(
dead_code
)
]
pub
fn
print
(
&
self
)
{
println
!
(
"
-
-
FrameGraph
-
-
"
)
;
for
(
i
task
)
in
self
.
tasks
.
iter
(
)
.
enumerate
(
)
{
println
!
(
"
Task
{
}
:
render_on
=
{
}
free_after
=
{
}
{
:
?
}
"
i
task
.
render_on
.
0
task
.
free_after
.
0
task
.
kind
.
as_str
(
)
)
;
}
for
(
p
pass
)
in
self
.
passes
.
iter
(
)
.
enumerate
(
)
{
println
!
(
"
Pass
{
}
:
"
p
)
;
for
(
s
sub_pass
)
in
pass
.
sub_passes
.
iter
(
)
.
enumerate
(
)
{
println
!
(
"
\
tSubPass
{
}
:
{
:
?
}
"
s
sub_pass
.
surface
)
;
for
task_id
in
&
sub_pass
.
task_ids
{
println
!
(
"
\
t
\
tTask
{
:
?
}
"
task_id
.
index
)
;
}
}
}
}
#
[
cfg
(
test
)
]
pub
fn
surface_counts
(
&
self
)
-
>
(
usize
usize
)
{
(
self
.
surface_count
self
.
unique_surfaces
.
len
(
)
)
}
#
[
cfg
(
debug_assertions
)
]
pub
fn
frame_id
(
&
self
)
-
>
FrameId
{
self
.
frame_id
}
}
impl
std
:
:
ops
:
:
Index
<
RenderTaskId
>
for
FrameGraph
{
type
Output
=
RenderTask
;
fn
index
(
&
self
id
:
RenderTaskId
)
-
>
&
RenderTask
{
&
self
.
tasks
[
id
.
index
as
usize
]
}
}
fn
assign_render_pass
(
id
:
RenderTaskId
pass
:
PassId
graph
:
&
mut
FrameGraph
pass_count
:
&
mut
usize
)
{
let
task
=
&
mut
graph
.
tasks
[
id
.
index
as
usize
]
;
*
pass_count
=
pass
.
0
.
max
(
*
pass_count
)
;
let
mut
child_task_ids
:
SmallVec
<
[
RenderTaskId
;
8
]
>
=
SmallVec
:
:
new
(
)
;
child_task_ids
.
extend_from_slice
(
&
task
.
children
)
;
if
task
.
render_on
>
pass
{
return
;
}
task
.
render_on
=
task
.
render_on
.
max
(
pass
)
;
let
next_pass
=
PassId
(
pass
.
0
+
1
)
;
for
child_id
in
child_task_ids
{
assign_render_pass
(
child_id
next_pass
graph
pass_count
)
;
}
}
fn
assign_free_pass
(
id
:
RenderTaskId
child_task_buffer
:
&
mut
Vec
<
RenderTaskId
>
graph
:
&
mut
FrameGraph
)
{
let
task
=
&
graph
.
tasks
[
id
.
index
as
usize
]
;
let
render_on
=
task
.
render_on
;
debug_assert
!
(
child_task_buffer
.
is_empty
(
)
)
;
child_task_buffer
.
extend_from_slice
(
&
task
.
children
)
;
for
child_id
in
child_task_buffer
.
drain
(
.
.
)
{
let
child_task
=
&
mut
graph
.
tasks
[
child_id
.
index
as
usize
]
;
match
child_task
.
location
{
RenderTaskLocation
:
:
Static
{
.
.
}
=
>
{
}
RenderTaskLocation
:
:
Unallocated
{
.
.
}
=
>
{
child_task
.
free_after
=
child_task
.
free_after
.
min
(
render_on
)
;
}
RenderTaskLocation
:
:
Dynamic
{
.
.
}
=
>
{
panic
!
(
"
bug
:
should
not
be
allocated
yet
"
)
;
}
}
}
}
#
[
cfg
(
test
)
]
fn
pc_target
(
surface_id
:
u64
tile_x
:
i32
tile_y
:
i32
)
-
>
RenderTaskLocation
{
use
crate
:
:
{
composite
:
:
{
NativeSurfaceId
NativeTileId
}
picture
:
:
ResolvedSurfaceTexture
}
;
let
width
=
512
;
let
height
=
512
;
RenderTaskLocation
:
:
Static
{
surface
:
StaticRenderTaskSurface
:
:
PictureCache
{
surface
:
ResolvedSurfaceTexture
:
:
Native
{
id
:
NativeTileId
{
surface_id
:
NativeSurfaceId
(
surface_id
)
x
:
tile_x
y
:
tile_y
}
size
:
DeviceIntSize
:
:
new
(
width
height
)
}
}
rect
:
DeviceIntSize
:
:
new
(
width
height
)
.
into
(
)
}
}
#
[
cfg
(
test
)
]
impl
FrameGraphBuilder
{
fn
test_expect
(
mut
self
pass_count
:
usize
total_surface_count
:
usize
unique_surfaces
:
&
[
(
i32
i32
ImageFormat
)
]
)
{
let
mut
rc
=
ResourceCache
:
:
new_for_testing
(
)
;
let
mut
gc
=
GpuCache
:
:
new
(
)
;
let
g
=
self
.
end_frame
(
&
mut
rc
&
mut
gc
)
;
g
.
print
(
)
;
assert_eq
!
(
g
.
passes
.
len
(
)
pass_count
)
;
assert_eq
!
(
g
.
surface_counts
(
)
(
total_surface_count
unique_surfaces
.
len
(
)
)
)
;
rc
.
validate_surfaces
(
unique_surfaces
)
;
}
}
#
[
cfg
(
test
)
]
fn
task_location
(
location
:
RenderTaskLocation
)
-
>
RenderTask
{
RenderTask
:
:
new_test
(
location
RenderTargetKind
:
:
Color
)
}
#
[
cfg
(
test
)
]
fn
task_dynamic
(
size
:
i32
)
-
>
RenderTask
{
RenderTask
:
:
new_test
(
RenderTaskLocation
:
:
Unallocated
{
size
:
DeviceIntSize
:
:
new
(
size
size
)
}
RenderTargetKind
:
:
Color
)
}
#
[
test
]
fn
fg_test_1
(
)
{
let
mut
gb
=
FrameGraphBuilder
:
:
new
(
)
;
let
root_target
=
pc_target
(
0
0
0
)
;
let
root
=
gb
.
add
(
)
.
init
(
task_location
(
root_target
.
clone
(
)
)
)
;
let
readback
=
gb
.
add
(
)
.
init
(
task_dynamic
(
100
)
)
;
gb
.
add_dependency
(
readback
root
)
;
let
mix_blend_content
=
gb
.
add
(
)
.
init
(
task_dynamic
(
50
)
)
;
let
content
=
gb
.
add
(
)
.
init
(
task_location
(
root_target
)
)
;
gb
.
add_dependency
(
content
readback
)
;
gb
.
add_dependency
(
content
mix_blend_content
)
;
gb
.
test_expect
(
3
1
&
[
(
2048
2048
ImageFormat
:
:
RGBA8
)
]
)
;
}
#
[
test
]
fn
fg_test_2
(
)
{
let
mut
gb
=
FrameGraphBuilder
:
:
new
(
)
;
let
pc_root
=
gb
.
add
(
)
.
init
(
task_location
(
pc_target
(
0
0
0
)
)
)
;
let
tc_0
=
StaticRenderTaskSurface
:
:
TextureCache
{
texture
:
CacheTextureId
(
0
)
layer
:
0
target_kind
:
RenderTargetKind
:
:
Color
}
;
let
tc_1
=
StaticRenderTaskSurface
:
:
TextureCache
{
texture
:
CacheTextureId
(
1
)
layer
:
0
target_kind
:
RenderTargetKind
:
:
Color
}
;
gb
.
add_target_input
(
pc_root
tc_0
.
clone
(
)
)
;
gb
.
add_target_input
(
pc_root
tc_1
.
clone
(
)
)
;
gb
.
add
(
)
.
init
(
task_location
(
RenderTaskLocation
:
:
Static
{
surface
:
tc_0
.
clone
(
)
rect
:
DeviceIntSize
:
:
new
(
128
128
)
.
into
(
)
}
)
)
;
gb
.
add
(
)
.
init
(
task_location
(
RenderTaskLocation
:
:
Static
{
surface
:
tc_1
.
clone
(
)
rect
:
DeviceIntSize
:
:
new
(
128
128
)
.
into
(
)
}
)
)
;
gb
.
test_expect
(
2
0
&
[
]
)
;
}
#
[
test
]
fn
fg_test_3
(
)
{
let
mut
gb
=
FrameGraphBuilder
:
:
new
(
)
;
let
pc_root
=
gb
.
add
(
)
.
init
(
task_location
(
pc_target
(
0
0
0
)
)
)
;
let
child_pic_0
=
gb
.
add
(
)
.
init
(
task_dynamic
(
128
)
)
;
let
child_pic_1
=
gb
.
add
(
)
.
init
(
task_dynamic
(
3000
)
)
;
gb
.
add_dependency
(
pc_root
child_pic_0
)
;
gb
.
add_dependency
(
pc_root
child_pic_1
)
;
gb
.
test_expect
(
2
2
&
[
(
2048
2048
ImageFormat
:
:
RGBA8
)
(
3072
3072
ImageFormat
:
:
RGBA8
)
]
)
;
}
#
[
test
]
fn
fg_test_4
(
)
{
let
mut
gb
=
FrameGraphBuilder
:
:
new
(
)
;
let
pc_root
=
gb
.
add
(
)
.
init
(
task_location
(
pc_target
(
0
0
0
)
)
)
;
let
child_pic_0
=
gb
.
add
(
)
.
init
(
task_dynamic
(
128
)
)
;
let
child_pic_1
=
gb
.
add
(
)
.
init
(
task_dynamic
(
128
)
)
;
let
child_pic_2
=
gb
.
add
(
)
.
init
(
task_dynamic
(
128
)
)
;
gb
.
add_dependency
(
pc_root
child_pic_0
)
;
gb
.
add_dependency
(
child_pic_0
child_pic_1
)
;
gb
.
add_dependency
(
child_pic_1
child_pic_2
)
;
gb
.
test_expect
(
4
3
&
[
(
2048
2048
ImageFormat
:
:
RGBA8
)
(
2048
2048
ImageFormat
:
:
RGBA8
)
]
)
;
}
#
[
test
]
fn
fg_test_5
(
)
{
let
mut
gb
=
FrameGraphBuilder
:
:
new
(
)
;
let
pc_root
=
gb
.
add
(
)
.
init
(
task_location
(
pc_target
(
0
0
0
)
)
)
;
let
child_pic_0
=
gb
.
add
(
)
.
init
(
task_dynamic
(
128
)
)
;
let
child_pic_1
=
gb
.
add
(
)
.
init
(
task_dynamic
(
64
)
)
;
let
child_pic_2
=
gb
.
add
(
)
.
init
(
task_dynamic
(
32
)
)
;
let
child_pic_3
=
gb
.
add
(
)
.
init
(
task_dynamic
(
16
)
)
;
gb
.
add_dependency
(
pc_root
child_pic_0
)
;
gb
.
add_dependency
(
child_pic_0
child_pic_1
)
;
gb
.
add_dependency
(
child_pic_1
child_pic_2
)
;
gb
.
add_dependency
(
child_pic_2
child_pic_3
)
;
gb
.
add_dependency
(
pc_root
child_pic_3
)
;
gb
.
test_expect
(
5
4
&
[
(
256
256
ImageFormat
:
:
RGBA8
)
(
2048
2048
ImageFormat
:
:
RGBA8
)
(
2048
2048
ImageFormat
:
:
RGBA8
)
]
)
;
}
#
[
test
]
fn
fg_test_6
(
)
{
let
mut
gb
=
FrameGraphBuilder
:
:
new
(
)
;
let
pc_root_1
=
gb
.
add
(
)
.
init
(
task_location
(
pc_target
(
0
0
0
)
)
)
;
let
pc_root_2
=
gb
.
add
(
)
.
init
(
task_location
(
pc_target
(
0
1
0
)
)
)
;
let
child_pic
=
gb
.
add
(
)
.
init
(
task_dynamic
(
128
)
)
;
gb
.
add_dependency
(
pc_root_1
child_pic
)
;
gb
.
add_dependency
(
pc_root_2
child_pic
)
;
gb
.
test_expect
(
2
1
&
[
(
2048
2048
ImageFormat
:
:
RGBA8
)
]
)
;
}
#
[
test
]
fn
fg_test_7
(
)
{
let
mut
gb
=
FrameGraphBuilder
:
:
new
(
)
;
let
pc_root
=
gb
.
add
(
)
.
init
(
task_location
(
pc_target
(
0
0
0
)
)
)
;
let
child0
=
gb
.
add
(
)
.
init
(
task_dynamic
(
16
)
)
;
let
child1
=
gb
.
add
(
)
.
init
(
task_dynamic
(
16
)
)
;
let
child2
=
gb
.
add
(
)
.
init
(
task_dynamic
(
16
)
)
;
let
child3
=
gb
.
add
(
)
.
init
(
task_dynamic
(
16
)
)
;
gb
.
add_dependency
(
pc_root
child0
)
;
gb
.
add_dependency
(
child0
child1
)
;
gb
.
add_dependency
(
pc_root
child1
)
;
gb
.
add_dependency
(
pc_root
child2
)
;
gb
.
add_dependency
(
child2
child3
)
;
gb
.
test_expect
(
3
3
&
[
(
256
256
ImageFormat
:
:
RGBA8
)
(
2048
2048
ImageFormat
:
:
RGBA8
)
(
2048
2048
ImageFormat
:
:
RGBA8
)
]
)
;
}
