using
struct
DxgiAdapterDesc
from
"
mozilla
/
D3DMessageUtils
.
h
"
;
using
struct
mozilla
:
:
null_t
from
"
ipc
/
IPCMessageUtils
.
h
"
;
using
mozilla
:
:
gfx
:
:
FeatureStatus
from
"
gfxTelemetry
.
h
"
;
using
mozilla
:
:
gfx
:
:
BackendType
from
"
mozilla
/
gfx
/
Types
.
h
"
;
using
mozilla
:
:
gfx
:
:
IntSize
from
"
mozilla
/
gfx
/
Point
.
h
"
;
using
gfxImageFormat
from
"
mozilla
/
gfx
/
Types
.
h
"
;
using
mozilla
:
:
gfx
:
:
D3D11Checks
:
:
VideoFormatOption
from
"
mozilla
/
gfx
/
D3D11Checks
.
h
"
;
using
mozilla
:
:
gfx
:
:
D3D11Checks
:
:
VideoFormatOptionSet
from
"
mozilla
/
gfx
/
D3D11Checks
.
h
"
;
namespace
mozilla
{
namespace
gfx
{
struct
D3D11DeviceStatus
{
bool
isWARP
;
bool
textureSharingWorks
;
uint32_t
featureLevel
;
DxgiAdapterDesc
adapter
;
int32_t
sequenceNumber
;
VideoFormatOptionSet
formatOptions
;
}
;
struct
DevicePrefs
{
FeatureStatus
hwCompositing
;
FeatureStatus
d3d11Compositing
;
FeatureStatus
oglCompositing
;
FeatureStatus
advancedLayers
;
FeatureStatus
useD2D1
;
FeatureStatus
webGPU
;
FeatureStatus
d3d11HwAngle
;
}
;
struct
ContentDeviceData
{
DevicePrefs
prefs
;
D3D11DeviceStatus
d3d11
;
uint8_t
[
]
cmsOutputProfileData
;
}
;
struct
FeatureFailure
{
FeatureStatus
status
;
nsCString
message
;
nsCString
failureId
;
}
;
struct
GPUDeviceData
{
FeatureFailure
?
d3d11Compositing
;
FeatureFailure
?
oglCompositing
;
FeatureFailure
?
advancedLayers
;
D3D11DeviceStatus
?
gpuDevice
;
FeatureFailure
?
webGPU
;
}
;
union
GfxVarValue
{
BackendType
;
bool
;
gfxImageFormat
;
IntSize
;
nsCString
;
nsString
;
int32_t
;
}
;
struct
GfxVarUpdate
{
uint32_t
index
;
GfxVarValue
value
;
}
;
struct
GfxInfoFeatureStatus
{
int32_t
feature
;
int32_t
status
;
nsCString
failureId
;
}
;
}
}
