#
include
"
CanvasRenderThread
.
h
"
#
include
"
mozilla
/
BackgroundHangMonitor
.
h
"
#
include
"
mozilla
/
SharedThreadPool
.
h
"
#
include
"
mozilla
/
StaticPrefs_gfx
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
"
mozilla
/
gfx
/
CanvasManagerParent
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
layers
/
CanvasTranslator
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
webrender
/
RenderThread
.
h
"
#
include
"
nsThread
.
h
"
#
include
"
prsystem
.
h
"
#
include
"
transport
/
runnable_utils
.
h
"
bool
NS_IsInCanvasThreadOrWorker
(
)
{
return
mozilla
:
:
gfx
:
:
CanvasRenderThread
:
:
IsInCanvasRenderOrWorkerThread
(
)
;
}
namespace
mozilla
:
:
gfx
{
static
StaticRefPtr
<
CanvasRenderThread
>
sCanvasRenderThread
;
static
mozilla
:
:
BackgroundHangMonitor
*
sBackgroundHangMonitor
;
#
ifdef
DEBUG
static
bool
sCanvasRenderThreadEverStarted
=
false
;
#
endif
CanvasRenderThread
:
:
CanvasRenderThread
(
nsCOMPtr
<
nsIThread
>
&
&
aThread
nsCOMPtr
<
nsIThreadPool
>
&
&
aWorkers
bool
aCreatedThread
)
:
mMutex
(
"
CanvasRenderThread
:
:
mMutex
"
)
mThread
(
std
:
:
move
(
aThread
)
)
mWorkers
(
std
:
:
move
(
aWorkers
)
)
mCreatedThread
(
aCreatedThread
)
{
}
CanvasRenderThread
:
:
~
CanvasRenderThread
(
)
=
default
;
void
CanvasRenderThread
:
:
Start
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
sCanvasRenderThread
)
;
#
ifdef
DEBUG
MOZ_ASSERT
(
!
sCanvasRenderThreadEverStarted
)
;
sCanvasRenderThreadEverStarted
=
true
;
#
endif
int32_t
threadPref
=
StaticPrefs
:
:
gfx_canvas_remote_worker_threads_AtStartup
(
)
;
uint32_t
threadLimit
;
if
(
threadPref
<
0
)
{
threadLimit
=
std
:
:
max
(
2
PR_GetNumberOfProcessors
(
)
/
2
)
;
}
else
{
threadLimit
=
uint32_t
(
threadPref
)
;
}
nsCOMPtr
<
nsIThreadPool
>
workers
;
if
(
threadLimit
>
0
)
{
workers
=
SharedThreadPool
:
:
Get
(
"
CanvasWorkers
"
_ns
threadLimit
)
;
if
(
NS_WARN_IF
(
!
workers
)
)
{
return
;
}
}
nsCOMPtr
<
nsIThread
>
thread
;
if
(
!
gfxVars
:
:
SupportsThreadsafeGL
(
)
)
{
thread
=
wr
:
:
RenderThread
:
:
GetRenderThread
(
)
;
MOZ_ASSERT
(
thread
)
;
}
else
if
(
!
gfxVars
:
:
UseCanvasRenderThread
(
)
)
{
thread
=
layers
:
:
CompositorThread
(
)
;
MOZ_ASSERT
(
thread
)
;
}
if
(
thread
)
{
sCanvasRenderThread
=
new
CanvasRenderThread
(
std
:
:
move
(
thread
)
std
:
:
move
(
workers
)
false
)
;
return
;
}
const
uint32_t
stackSize
=
nsIThreadManager
:
:
DEFAULT_STACK_SIZE
?
4096
<
<
10
:
0
;
nsresult
rv
=
NS_NewNamedThread
(
"
CanvasRenderer
"
getter_AddRefs
(
thread
)
NS_NewRunnableFunction
(
"
CanvasRender
:
:
BackgroundHangSetup
"
[
]
(
)
{
sBackgroundHangMonitor
=
new
mozilla
:
:
BackgroundHangMonitor
(
"
CanvasRendererBHM
"
128
2048
)
;
nsCOMPtr
<
nsIThread
>
thread
=
NS_GetCurrentThread
(
)
;
nsThread
*
nsthread
=
static_cast
<
nsThread
*
>
(
thread
.
get
(
)
)
;
nsthread
-
>
SetUseHangMonitor
(
true
)
;
nsthread
-
>
SetPriority
(
nsISupportsPriority
:
:
PRIORITY_HIGH
)
;
}
)
{
.
stackSize
=
stackSize
}
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
sCanvasRenderThread
=
new
CanvasRenderThread
(
std
:
:
move
(
thread
)
std
:
:
move
(
workers
)
true
)
;
}
void
CanvasRenderThread
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
sCanvasRenderThread
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
return
;
}
CanvasManagerParent
:
:
Shutdown
(
)
;
while
(
true
)
{
RefPtr
<
TaskQueue
>
taskQueue
;
{
MutexAutoLock
lock
(
sCanvasRenderThread
-
>
mMutex
)
;
auto
&
pendingQueues
=
sCanvasRenderThread
-
>
mPendingShutdownTaskQueues
;
if
(
pendingQueues
.
IsEmpty
(
)
)
{
break
;
}
taskQueue
=
pendingQueues
.
PopLastElement
(
)
;
}
taskQueue
-
>
AwaitShutdownAndIdle
(
)
;
}
nsCOMPtr
<
nsIThreadPool
>
oldWorkers
=
sCanvasRenderThread
-
>
mWorkers
;
nsCOMPtr
<
nsIThread
>
oldThread
;
if
(
sCanvasRenderThread
-
>
mCreatedThread
)
{
oldThread
=
sCanvasRenderThread
-
>
GetCanvasRenderThread
(
)
;
MOZ_ASSERT
(
oldThread
)
;
}
sCanvasRenderThread
=
nullptr
;
if
(
oldWorkers
)
{
oldWorkers
-
>
Shutdown
(
)
;
}
if
(
oldThread
)
{
oldThread
-
>
Shutdown
(
)
;
}
}
bool
CanvasRenderThread
:
:
IsInCanvasRenderThread
(
)
{
return
sCanvasRenderThread
&
&
sCanvasRenderThread
-
>
mThread
=
=
NS_GetCurrentThread
(
)
;
}
bool
CanvasRenderThread
:
:
IsInCanvasWorkerThread
(
)
{
return
sCanvasRenderThread
&
&
(
(
sCanvasRenderThread
-
>
mWorkers
&
&
sCanvasRenderThread
-
>
mWorkers
-
>
IsOnCurrentThread
(
)
)
|
|
(
!
sCanvasRenderThread
-
>
mWorkers
&
&
sCanvasRenderThread
-
>
mThread
=
=
NS_GetCurrentThread
(
)
)
)
;
}
bool
CanvasRenderThread
:
:
IsInCanvasRenderOrWorkerThread
(
)
{
return
sCanvasRenderThread
&
&
(
sCanvasRenderThread
-
>
mThread
=
=
NS_GetCurrentThread
(
)
|
|
(
sCanvasRenderThread
-
>
mWorkers
&
&
sCanvasRenderThread
-
>
mWorkers
-
>
IsOnCurrentThread
(
)
)
)
;
}
already_AddRefed
<
nsIThread
>
CanvasRenderThread
:
:
GetCanvasRenderThread
(
)
{
nsCOMPtr
<
nsIThread
>
thread
;
if
(
sCanvasRenderThread
)
{
thread
=
sCanvasRenderThread
-
>
mThread
;
}
return
thread
.
forget
(
)
;
}
already_AddRefed
<
TaskQueue
>
CanvasRenderThread
:
:
CreateWorkerTaskQueue
(
)
{
if
(
!
sCanvasRenderThread
)
{
return
nullptr
;
}
if
(
sCanvasRenderThread
-
>
mWorkers
)
{
return
TaskQueue
:
:
Create
(
do_AddRef
(
sCanvasRenderThread
-
>
mWorkers
)
"
CanvasWorker
"
)
.
forget
(
)
;
}
return
TaskQueue
:
:
Create
(
do_AddRef
(
sCanvasRenderThread
-
>
mThread
)
"
CanvasWorker
"
)
.
forget
(
)
;
}
void
CanvasRenderThread
:
:
ShutdownWorkerTaskQueue
(
TaskQueue
*
aTaskQueue
)
{
if
(
!
sCanvasRenderThread
)
{
MOZ_ASSERT_UNREACHABLE
(
"
No
CanvasRenderThread
!
"
)
;
return
;
}
MutexAutoLock
lock
(
sCanvasRenderThread
-
>
mMutex
)
;
auto
&
pendingQueues
=
sCanvasRenderThread
-
>
mPendingShutdownTaskQueues
;
pendingQueues
.
AppendElement
(
aTaskQueue
)
;
}
void
CanvasRenderThread
:
:
FinishShutdownWorkerTaskQueue
(
TaskQueue
*
aTaskQueue
)
{
if
(
!
sCanvasRenderThread
)
{
return
;
}
MutexAutoLock
lock
(
sCanvasRenderThread
-
>
mMutex
)
;
sCanvasRenderThread
-
>
mPendingShutdownTaskQueues
.
RemoveElement
(
aTaskQueue
)
;
}
void
CanvasRenderThread
:
:
Dispatch
(
already_AddRefed
<
nsIRunnable
>
aRunnable
)
{
if
(
!
sCanvasRenderThread
)
{
MOZ_DIAGNOSTIC_ASSERT
(
false
"
Dispatching
after
CanvasRenderThread
shutdown
!
"
)
;
return
;
}
sCanvasRenderThread
-
>
mThread
-
>
Dispatch
(
std
:
:
move
(
aRunnable
)
)
;
}
}
