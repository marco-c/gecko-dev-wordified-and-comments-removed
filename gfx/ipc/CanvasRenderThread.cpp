#
include
"
CanvasRenderThread
.
h
"
#
include
"
mozilla
/
BackgroundHangMonitor
.
h
"
#
include
"
transport
/
runnable_utils
.
h
"
namespace
mozilla
:
:
gfx
{
static
StaticRefPtr
<
CanvasRenderThread
>
sCanvasRenderThread
;
static
mozilla
:
:
BackgroundHangMonitor
*
sBackgroundHangMonitor
;
CanvasRenderThread
:
:
CanvasRenderThread
(
RefPtr
<
nsIThread
>
aThread
)
:
mThread
(
std
:
:
move
(
aThread
)
)
{
}
CanvasRenderThread
:
:
~
CanvasRenderThread
(
)
{
}
CanvasRenderThread
*
CanvasRenderThread
:
:
Get
(
)
{
return
sCanvasRenderThread
;
}
void
CanvasRenderThread
:
:
Start
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
sCanvasRenderThread
)
;
const
uint32_t
stackSize
=
nsIThreadManager
:
:
DEFAULT_STACK_SIZE
?
512
<
<
10
:
0
;
RefPtr
<
nsIThread
>
thread
;
nsresult
rv
=
NS_NewNamedThread
(
"
CanvasRenderer
"
getter_AddRefs
(
thread
)
NS_NewRunnableFunction
(
"
CanvasRender
:
:
BackgroundHanSetup
"
[
]
(
)
{
sBackgroundHangMonitor
=
new
mozilla
:
:
BackgroundHangMonitor
(
"
CanvasRenderer
"
128
2048
)
;
nsCOMPtr
<
nsIThread
>
thread
=
NS_GetCurrentThread
(
)
;
nsThread
*
nsthread
=
static_cast
<
nsThread
*
>
(
thread
.
get
(
)
)
;
nsthread
-
>
SetUseHangMonitor
(
true
)
;
nsthread
-
>
SetPriority
(
nsISupportsPriority
:
:
PRIORITY_HIGH
)
;
}
)
stackSize
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
sCanvasRenderThread
=
new
CanvasRenderThread
(
thread
)
;
}
void
CanvasRenderThread
:
:
ShutDown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
sCanvasRenderThread
)
;
layers
:
:
SynchronousTask
task
(
"
CanvasRenderThread
"
)
;
RefPtr
<
Runnable
>
runnable
=
WrapRunnable
(
RefPtr
<
CanvasRenderThread
>
(
sCanvasRenderThread
.
get
(
)
)
&
CanvasRenderThread
:
:
ShutDownTask
&
task
)
;
sCanvasRenderThread
-
>
PostRunnable
(
runnable
.
forget
(
)
)
;
task
.
Wait
(
)
;
sCanvasRenderThread
=
nullptr
;
}
void
CanvasRenderThread
:
:
ShutDownTask
(
layers
:
:
SynchronousTask
*
aTask
)
{
layers
:
:
AutoCompleteTask
complete
(
aTask
)
;
MOZ_ASSERT
(
IsInCanvasRenderThread
(
)
)
;
}
bool
CanvasRenderThread
:
:
IsInCanvasRenderThread
(
)
{
return
sCanvasRenderThread
&
&
sCanvasRenderThread
-
>
mThread
=
=
NS_GetCurrentThread
(
)
;
}
already_AddRefed
<
nsIThread
>
CanvasRenderThread
:
:
GetCanvasRenderThread
(
)
{
nsCOMPtr
<
nsIThread
>
thread
;
if
(
sCanvasRenderThread
)
{
thread
=
sCanvasRenderThread
-
>
mThread
;
}
return
thread
.
forget
(
)
;
}
void
CanvasRenderThread
:
:
PostRunnable
(
already_AddRefed
<
nsIRunnable
>
aRunnable
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
=
aRunnable
;
mThread
-
>
Dispatch
(
runnable
.
forget
(
)
)
;
}
}
