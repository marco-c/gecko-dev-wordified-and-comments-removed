#
ifndef
_include_mozilla_gfx_ipc_CompositorSession_h_
#
define
_include_mozilla_gfx_ipc_CompositorSession_h_
#
include
"
base
/
basictypes
.
h
"
#
include
"
Units
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
class
nsIWidget
;
namespace
mozilla
{
namespace
widget
{
class
CompositorWidget
;
}
namespace
gfx
{
class
GPUProcessManager
;
}
namespace
layers
{
class
GeckoContentController
;
class
APZCTreeManager
;
class
CompositorBridgeParent
;
class
CompositorBridgeChild
;
class
ClientLayerManager
;
class
CompositorSession
{
friend
class
gfx
:
:
GPUProcessManager
;
typedef
widget
:
:
CompositorWidget
CompositorWidget
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CompositorSession
)
virtual
void
Shutdown
(
)
=
0
;
virtual
CompositorBridgeParent
*
GetInProcessBridge
(
)
const
=
0
;
virtual
void
SetContentController
(
GeckoContentController
*
aController
)
=
0
;
virtual
uint64_t
RootLayerTreeId
(
)
const
=
0
;
virtual
already_AddRefed
<
APZCTreeManager
>
GetAPZCTreeManager
(
)
const
=
0
;
CompositorBridgeChild
*
GetCompositorBridgeChild
(
)
;
RefPtr
<
CompositorWidget
>
GetCompositorWidget
(
)
{
return
mCompositorWidget
;
}
protected
:
CompositorSession
(
)
;
virtual
~
CompositorSession
(
)
;
static
already_AddRefed
<
CompositorSession
>
CreateInProcess
(
nsIWidget
*
aWidget
ClientLayerManager
*
aLayerManager
CSSToLayoutDeviceScale
aScale
bool
aUseAPZ
bool
aUseExternalSurfaceSize
const
gfx
:
:
IntSize
&
aSurfaceSize
)
;
protected
:
RefPtr
<
CompositorBridgeChild
>
mCompositorBridgeChild
;
RefPtr
<
CompositorWidget
>
mCompositorWidget
;
private
:
DISALLOW_COPY_AND_ASSIGN
(
CompositorSession
)
;
}
;
}
}
#
endif
