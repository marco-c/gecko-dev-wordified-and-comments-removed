#
ifndef
_include_mozilla_gfx_ipc_GPUProcessHost_h_
#
define
_include_mozilla_gfx_ipc_GPUProcessHost_h_
#
include
"
mozilla
/
Function
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
ipc
/
GeckoChildProcessHost
.
h
"
#
include
"
mozilla
/
ipc
/
TaskFactory
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
GPUChild
;
class
GPUProcessHost
final
:
public
ipc
:
:
GeckoChildProcessHost
{
public
:
class
Listener
{
public
:
virtual
void
OnProcessLaunchComplete
(
GPUProcessHost
*
aHost
)
{
}
}
;
public
:
GPUProcessHost
(
Listener
*
listener
)
;
~
GPUProcessHost
(
)
;
bool
Launch
(
)
;
bool
WaitForLaunch
(
)
;
void
Shutdown
(
)
;
GPUChild
*
GetActor
(
)
const
{
return
mGPUChild
.
get
(
)
;
}
bool
IsConnected
(
)
const
{
return
!
!
mGPUChild
;
}
void
OnChannelConnected
(
int32_t
peer_pid
)
override
;
void
OnChannelError
(
)
override
;
private
:
void
OnChannelConnectedTask
(
)
;
void
OnChannelErrorTask
(
)
;
void
InitAfterConnect
(
bool
aSucceeded
)
;
void
DestroyProcess
(
)
;
private
:
DISALLOW_COPY_AND_ASSIGN
(
GPUProcessHost
)
;
Listener
*
mListener
;
ipc
:
:
TaskFactory
<
GPUProcessHost
>
mTaskFactory
;
enum
class
LaunchPhase
{
Unlaunched
Waiting
Complete
}
;
LaunchPhase
mLaunchPhase
;
UniquePtr
<
GPUChild
>
mGPUChild
;
}
;
}
}
#
endif
