#
ifndef
_include_mozilla_gfx_ipc_GPUProcessHost_h_
#
define
_include_mozilla_gfx_ipc_GPUProcessHost_h_
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
ipc
/
GeckoChildProcessHost
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
ipc
/
TaskFactory
.
h
"
#
ifdef
MOZ_WIDGET_ANDROID
#
include
"
mozilla
/
java
/
CompositorSurfaceManagerWrappers
.
h
"
#
endif
namespace
mozilla
{
namespace
ipc
{
class
SharedPreferenceSerializer
;
}
}
class
nsITimer
;
namespace
mozilla
{
namespace
gfx
{
class
GPUChild
;
class
GPUProcessHost
final
:
public
mozilla
:
:
ipc
:
:
GeckoChildProcessHost
{
friend
class
GPUChild
;
public
:
class
Listener
{
public
:
virtual
void
OnProcessLaunchComplete
(
GPUProcessHost
*
aHost
)
{
}
virtual
void
OnProcessUnexpectedShutdown
(
GPUProcessHost
*
aHost
)
{
}
virtual
void
OnRemoteProcessDeviceReset
(
GPUProcessHost
*
aHost
)
{
}
virtual
void
OnProcessDeclaredStable
(
)
{
}
}
;
explicit
GPUProcessHost
(
Listener
*
listener
)
;
bool
Launch
(
StringVector
aExtraOpts
)
;
bool
WaitForLaunch
(
)
;
void
Shutdown
(
bool
aUnexpectedShutdown
=
false
)
;
GPUChild
*
GetActor
(
)
const
{
return
mGPUChild
.
get
(
)
;
}
uint64_t
GetProcessToken
(
)
const
;
bool
IsConnected
(
)
const
{
return
!
!
mGPUChild
;
}
TimeStamp
GetLaunchTime
(
)
const
{
return
mLaunchTime
;
}
void
OnChannelConnected
(
base
:
:
ProcessId
peer_pid
)
override
;
void
SetListener
(
Listener
*
aListener
)
;
void
KillProcess
(
bool
aGenerateMinidump
)
;
void
CrashProcess
(
)
;
#
ifdef
MOZ_WIDGET_ANDROID
java
:
:
CompositorSurfaceManager
:
:
Param
GetCompositorSurfaceManager
(
)
;
#
endif
private
:
~
GPUProcessHost
(
)
;
void
OnChannelConnectedTask
(
)
;
void
OnChannelErrorTask
(
)
;
void
InitAfterConnect
(
bool
aSucceeded
)
;
void
OnChannelClosed
(
)
;
void
KillHard
(
bool
aGenerateMinidump
)
;
void
DestroyProcess
(
)
;
DISALLOW_COPY_AND_ASSIGN
(
GPUProcessHost
)
;
Listener
*
mListener
;
mozilla
:
:
ipc
:
:
TaskFactory
<
GPUProcessHost
>
mTaskFactory
;
enum
class
LaunchPhase
{
Unlaunched
Waiting
Complete
}
;
LaunchPhase
mLaunchPhase
;
RefPtr
<
GPUChild
>
mGPUChild
;
uint64_t
mProcessToken
;
UniquePtr
<
mozilla
:
:
ipc
:
:
SharedPreferenceSerializer
>
mPrefSerializer
;
bool
mShutdownRequested
;
bool
mChannelClosed
;
TimeStamp
mLaunchTime
;
#
ifdef
MOZ_WIDGET_ANDROID
java
:
:
CompositorSurfaceManager
:
:
GlobalRef
mCompositorSurfaceManager
;
#
endif
}
;
}
}
#
endif
