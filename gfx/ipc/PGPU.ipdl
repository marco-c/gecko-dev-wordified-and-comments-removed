include
GraphicsMessages
;
include
MemoryReportTypes
;
include
HangTypes
;
include
PrefsTypes
;
include
protocol
PAPZInputBridge
;
include
protocol
PCompositorManager
;
include
protocol
PImageBridge
;
include
protocol
PProfiler
;
include
protocol
PVRGPU
;
include
protocol
PVRManager
;
include
protocol
PVideoBridge
;
include
protocol
PVsyncBridge
;
include
protocol
PUiCompositorController
;
include
protocol
PRemoteDecoderManager
;
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
MOZ_DEBUG
)
&
&
defined
(
ENABLE_TESTS
)
include
protocol
PSandboxTesting
;
#
endif
include
"
mozilla
/
layers
/
LayersMessageUtils
.
h
"
;
using
base
:
:
ProcessId
from
"
base
/
process
.
h
"
;
using
mozilla
:
:
dom
:
:
NativeThreadId
from
"
mozilla
/
dom
/
NativeThreadId
.
h
"
;
using
mozilla
:
:
Telemetry
:
:
HistogramAccumulation
from
"
mozilla
/
TelemetryComms
.
h
"
;
using
mozilla
:
:
Telemetry
:
:
KeyedHistogramAccumulation
from
"
mozilla
/
TelemetryComms
.
h
"
;
using
mozilla
:
:
Telemetry
:
:
ScalarAction
from
"
mozilla
/
TelemetryComms
.
h
"
;
using
mozilla
:
:
Telemetry
:
:
KeyedScalarAction
from
"
mozilla
/
TelemetryComms
.
h
"
;
using
mozilla
:
:
Telemetry
:
:
ChildEventData
from
"
mozilla
/
TelemetryComms
.
h
"
;
using
mozilla
:
:
Telemetry
:
:
DiscardedData
from
"
mozilla
/
TelemetryComms
.
h
"
;
using
mozilla
:
:
gfx
:
:
Feature
from
"
gfxFeature
.
h
"
;
using
mozilla
:
:
gfx
:
:
Fallback
from
"
gfxFallback
.
h
"
;
using
mozilla
:
:
layers
:
:
LayersId
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
PDMFactory
:
:
MediaCodecsSupported
from
"
PDMFactory
.
h
"
;
namespace
mozilla
{
namespace
gfx
{
struct
LayerTreeIdMapping
{
LayersId
layersId
;
ProcessId
ownerId
;
}
;
sync
protocol
PGPU
{
manages
PAPZInputBridge
;
parent
:
async
PAPZInputBridge
(
LayersId
aLayersId
)
;
async
Init
(
GfxVarUpdate
[
]
vars
DevicePrefs
devicePrefs
LayerTreeIdMapping
[
]
mapping
GfxInfoFeatureStatus
[
]
features
)
;
async
InitCompositorManager
(
Endpoint
<
PCompositorManagerParent
>
endpoint
)
;
async
InitVsyncBridge
(
Endpoint
<
PVsyncBridgeParent
>
endpoint
)
;
async
InitImageBridge
(
Endpoint
<
PImageBridgeParent
>
endpoint
)
;
async
InitVideoBridge
(
Endpoint
<
PVideoBridgeParent
>
endpoint
)
;
async
InitVRManager
(
Endpoint
<
PVRManagerParent
>
endpoint
)
;
async
InitUiCompositorController
(
LayersId
rootLayerTreeId
Endpoint
<
PUiCompositorControllerParent
>
endpoint
)
;
async
InitProfiler
(
Endpoint
<
PProfilerChild
>
endpoint
)
;
async
InitVR
(
Endpoint
<
PVRGPUChild
>
endpoint
)
;
async
UpdateVar
(
GfxVarUpdate
var
)
;
async
PreferenceUpdate
(
Pref
pref
)
;
async
NewContentCompositorManager
(
Endpoint
<
PCompositorManagerParent
>
endpoint
)
;
async
NewContentImageBridge
(
Endpoint
<
PImageBridgeParent
>
endpoint
)
;
async
NewContentVRManager
(
Endpoint
<
PVRManagerParent
>
endpoint
)
;
async
NewContentRemoteDecoderManager
(
Endpoint
<
PRemoteDecoderManagerParent
>
endpoint
)
;
sync
AddLayerTreeIdMapping
(
LayerTreeIdMapping
mapping
)
;
async
RemoveLayerTreeIdMapping
(
LayerTreeIdMapping
mapping
)
;
sync
GetDeviceStatus
(
)
returns
(
GPUDeviceData
status
)
;
sync
SimulateDeviceReset
(
)
returns
(
GPUDeviceData
status
)
;
async
NotifyGpuObservers
(
nsCString
aTopic
)
;
async
RequestMemoryReport
(
uint32_t
generation
bool
anonymize
bool
minimizeMemoryUsage
FileDescriptor
?
DMDFile
)
returns
(
uint32_t
aGeneration
)
;
async
ShutdownVR
(
)
;
async
UpdatePerfStatsCollectionMask
(
uint64_t
aMask
)
;
async
CollectPerfStatsJSON
(
)
returns
(
nsCString
aStats
)
;
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
MOZ_DEBUG
)
&
&
defined
(
ENABLE_TESTS
)
async
InitSandboxTesting
(
Endpoint
<
PSandboxTestingChild
>
aEndpoint
)
;
#
endif
child
:
async
InitComplete
(
GPUDeviceData
data
)
;
async
ReportCheckerboard
(
uint32_t
severity
nsCString
log
)
;
async
GraphicsError
(
nsCString
aError
)
;
async
InitCrashReporter
(
NativeThreadId
threadId
)
;
async
CreateVRProcess
(
)
;
async
ShutdownVRProcess
(
)
;
async
NotifyUiObservers
(
nsCString
aTopic
)
;
async
AccumulateChildHistograms
(
HistogramAccumulation
[
]
accumulations
)
;
async
AccumulateChildKeyedHistograms
(
KeyedHistogramAccumulation
[
]
accumulations
)
;
async
UpdateChildScalars
(
ScalarAction
[
]
actions
)
;
async
UpdateChildKeyedScalars
(
KeyedScalarAction
[
]
actions
)
;
async
RecordChildEvents
(
ChildEventData
[
]
events
)
;
async
RecordDiscardedData
(
DiscardedData
data
)
;
async
NotifyDeviceReset
(
GPUDeviceData
status
)
;
async
FlushMemory
(
nsString
reason
)
;
async
AddMemoryReport
(
MemoryReport
aReport
)
;
async
UpdateFeature
(
Feature
aFeature
FeatureFailure
aChange
)
;
async
UsedFallback
(
Fallback
aFallback
nsCString
message
)
;
async
BHRThreadHang
(
HangDetails
aDetails
)
;
async
UpdateMediaCodecsSupported
(
MediaCodecsSupported
aSupported
)
;
}
;
}
}
