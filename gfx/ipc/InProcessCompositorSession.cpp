#
include
"
InProcessCompositorSession
.
h
"
#
include
"
mozilla
/
layers
/
IAPZCTreeManager
.
h
"
#
include
"
nsBaseWidget
.
h
"
namespace
mozilla
{
namespace
layers
{
InProcessCompositorSession
:
:
InProcessCompositorSession
(
nsBaseWidget
*
aWidget
widget
:
:
CompositorWidget
*
aCompositorWidget
CompositorBridgeChild
*
aChild
CompositorBridgeParent
*
aParent
)
:
CompositorSession
(
aWidget
aCompositorWidget
-
>
AsDelegate
(
)
aChild
aParent
-
>
RootLayerTreeId
(
)
)
mCompositorBridgeParent
(
aParent
)
mCompositorWidget
(
aCompositorWidget
)
{
GPUProcessManager
:
:
Get
(
)
-
>
RegisterInProcessSession
(
this
)
;
}
RefPtr
<
InProcessCompositorSession
>
InProcessCompositorSession
:
:
Create
(
nsBaseWidget
*
aWidget
LayerManager
*
aLayerManager
const
LayersId
&
aRootLayerTreeId
CSSToLayoutDeviceScale
aScale
const
CompositorOptions
&
aOptions
bool
aUseExternalSurfaceSize
const
gfx
:
:
IntSize
&
aSurfaceSize
uint32_t
aNamespace
)
{
CompositorWidgetInitData
initData
;
aWidget
-
>
GetCompositorWidgetInitData
(
&
initData
)
;
RefPtr
<
CompositorWidget
>
widget
=
CompositorWidget
:
:
CreateLocal
(
initData
aOptions
aWidget
)
;
RefPtr
<
CompositorBridgeParent
>
parent
=
CompositorManagerParent
:
:
CreateSameProcessWidgetCompositorBridge
(
aScale
aOptions
aUseExternalSurfaceSize
aSurfaceSize
)
;
MOZ_ASSERT
(
parent
)
;
parent
-
>
InitSameProcess
(
widget
aRootLayerTreeId
)
;
RefPtr
<
CompositorBridgeChild
>
child
=
CompositorManagerChild
:
:
CreateSameProcessWidgetCompositorBridge
(
aLayerManager
aNamespace
)
;
MOZ_ASSERT
(
child
)
;
return
new
InProcessCompositorSession
(
aWidget
widget
child
parent
)
;
}
void
InProcessCompositorSession
:
:
NotifySessionLost
(
)
{
mWidget
-
>
NotifyCompositorSessionLost
(
this
)
;
}
CompositorBridgeParent
*
InProcessCompositorSession
:
:
GetInProcessBridge
(
)
const
{
return
mCompositorBridgeParent
;
}
void
InProcessCompositorSession
:
:
SetContentController
(
GeckoContentController
*
aController
)
{
mCompositorBridgeParent
-
>
SetControllerForLayerTree
(
mRootLayerTreeId
aController
)
;
}
RefPtr
<
IAPZCTreeManager
>
InProcessCompositorSession
:
:
GetAPZCTreeManager
(
)
const
{
return
mCompositorBridgeParent
-
>
GetAPZCTreeManager
(
mRootLayerTreeId
)
;
}
nsIWidget
*
InProcessCompositorSession
:
:
GetWidget
(
)
const
{
return
mWidget
;
}
void
InProcessCompositorSession
:
:
Shutdown
(
)
{
#
if
defined
(
MOZ_WIDGET_ANDROID
)
if
(
mUiCompositorControllerChild
)
{
mUiCompositorControllerChild
-
>
Destroy
(
)
;
mUiCompositorControllerChild
=
nullptr
;
}
#
endif
mCompositorBridgeChild
-
>
Destroy
(
)
;
mCompositorBridgeChild
=
nullptr
;
mCompositorBridgeParent
=
nullptr
;
mCompositorWidget
=
nullptr
;
GPUProcessManager
:
:
Get
(
)
-
>
UnregisterInProcessSession
(
this
)
;
}
}
}
