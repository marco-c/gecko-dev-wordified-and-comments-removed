#
include
"
VsyncBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
namespace
mozilla
{
namespace
gfx
{
RefPtr
<
VsyncBridgeParent
>
VsyncBridgeParent
:
:
Start
(
Endpoint
<
PVsyncBridgeParent
>
&
&
aEndpoint
)
{
RefPtr
<
VsyncBridgeParent
>
parent
=
new
VsyncBridgeParent
(
)
;
RefPtr
<
Runnable
>
task
=
NewRunnableMethod
<
Endpoint
<
PVsyncBridgeParent
>
&
&
>
(
"
gfx
:
:
VsyncBridgeParent
:
:
Open
"
parent
&
VsyncBridgeParent
:
:
Open
Move
(
aEndpoint
)
)
;
CompositorThreadHolder
:
:
Loop
(
)
-
>
PostTask
(
task
.
forget
(
)
)
;
return
parent
;
}
VsyncBridgeParent
:
:
VsyncBridgeParent
(
)
:
mOpen
(
false
)
{
MOZ_COUNT_CTOR
(
VsyncBridgeParent
)
;
mCompositorThreadRef
=
CompositorThreadHolder
:
:
GetSingleton
(
)
;
}
VsyncBridgeParent
:
:
~
VsyncBridgeParent
(
)
{
MOZ_COUNT_DTOR
(
VsyncBridgeParent
)
;
}
void
VsyncBridgeParent
:
:
Open
(
Endpoint
<
PVsyncBridgeParent
>
&
&
aEndpoint
)
{
if
(
!
aEndpoint
.
Bind
(
this
)
)
{
MOZ_CRASH
(
"
Failed
to
bind
VsyncBridgeParent
to
endpoint
"
)
;
}
AddRef
(
)
;
mOpen
=
true
;
}
mozilla
:
:
ipc
:
:
IPCResult
VsyncBridgeParent
:
:
RecvNotifyVsync
(
const
TimeStamp
&
aTimeStamp
const
uint64_t
&
aLayersId
)
{
CompositorBridgeParent
:
:
NotifyVsync
(
aTimeStamp
aLayersId
)
;
return
IPC_OK
(
)
;
}
void
VsyncBridgeParent
:
:
Shutdown
(
)
{
MessageLoop
*
ccloop
=
CompositorThreadHolder
:
:
Loop
(
)
;
if
(
MessageLoop
:
:
current
(
)
!
=
ccloop
)
{
ccloop
-
>
PostTask
(
NewRunnableMethod
(
"
gfx
:
:
VsyncBridgeParent
:
:
ShutdownImpl
"
this
&
VsyncBridgeParent
:
:
ShutdownImpl
)
)
;
return
;
}
ShutdownImpl
(
)
;
}
void
VsyncBridgeParent
:
:
ShutdownImpl
(
)
{
if
(
mOpen
)
{
Close
(
)
;
mOpen
=
false
;
}
}
void
VsyncBridgeParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mOpen
=
false
;
mCompositorThreadRef
=
nullptr
;
}
void
VsyncBridgeParent
:
:
DeallocPVsyncBridgeParent
(
)
{
Release
(
)
;
}
}
}
