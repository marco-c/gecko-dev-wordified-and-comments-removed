#
ifndef
_include_mozilla_gfx_ipc_GPUProcessManager_h_
#
define
_include_mozilla_gfx_ipc_GPUProcessManager_h_
#
include
"
base
/
basictypes
.
h
"
#
include
"
base
/
process
.
h
"
#
include
"
Units
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
mozilla
/
gfx
/
GPUProcessHost
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
ipc
/
TaskFactory
.
h
"
#
include
"
mozilla
/
ipc
/
Transport
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsThreadUtils
.
h
"
class
nsBaseWidget
;
namespace
mozilla
{
namespace
layers
{
class
APZCTreeManager
;
class
CompositorSession
;
class
ClientLayerManager
;
class
CompositorUpdateObserver
;
class
PCompositorBridgeChild
;
class
PImageBridgeChild
;
}
namespace
widget
{
class
CompositorWidget
;
}
namespace
dom
{
class
ContentParent
;
class
TabParent
;
}
namespace
ipc
{
class
GeckoChildProcessHost
;
}
namespace
gfx
{
class
GPUChild
;
class
VsyncBridgeChild
;
class
VsyncIOThreadHolder
;
class
PVRManagerChild
;
class
GPUProcessManager
final
:
public
GPUProcessHost
:
:
Listener
{
typedef
layers
:
:
APZCTreeManager
APZCTreeManager
;
typedef
layers
:
:
ClientLayerManager
ClientLayerManager
;
typedef
layers
:
:
CompositorSession
CompositorSession
;
typedef
layers
:
:
CompositorUpdateObserver
CompositorUpdateObserver
;
typedef
layers
:
:
PCompositorBridgeChild
PCompositorBridgeChild
;
typedef
layers
:
:
PImageBridgeChild
PImageBridgeChild
;
public
:
static
void
Initialize
(
)
;
static
void
Shutdown
(
)
;
static
GPUProcessManager
*
Get
(
)
;
~
GPUProcessManager
(
)
;
void
EnableGPUProcess
(
)
;
void
EnsureGPUReady
(
)
;
RefPtr
<
CompositorSession
>
CreateTopLevelCompositor
(
nsBaseWidget
*
aWidget
ClientLayerManager
*
aLayerManager
CSSToLayoutDeviceScale
aScale
bool
aUseAPZ
bool
aUseExternalSurfaceSize
const
gfx
:
:
IntSize
&
aSurfaceSize
)
;
bool
CreateContentCompositorBridge
(
base
:
:
ProcessId
aOtherProcess
ipc
:
:
Endpoint
<
PCompositorBridgeChild
>
*
aOutEndpoint
)
;
bool
CreateContentImageBridge
(
base
:
:
ProcessId
aOtherProcess
ipc
:
:
Endpoint
<
PImageBridgeChild
>
*
aOutEndpoint
)
;
bool
CreateContentVRManager
(
base
:
:
ProcessId
aOtherProcess
ipc
:
:
Endpoint
<
PVRManagerChild
>
*
aOutEndpoint
)
;
already_AddRefed
<
APZCTreeManager
>
GetAPZCTreeManagerForLayers
(
uint64_t
aLayersId
)
;
uint64_t
AllocateLayerTreeId
(
)
;
void
DeallocateLayerTreeId
(
uint64_t
aLayersId
)
;
void
RequestNotifyLayerTreeReady
(
uint64_t
aLayersId
CompositorUpdateObserver
*
aObserver
)
;
void
RequestNotifyLayerTreeCleared
(
uint64_t
aLayersId
CompositorUpdateObserver
*
aObserver
)
;
void
SwapLayerTreeObservers
(
uint64_t
aLayer
uint64_t
aOtherLayer
)
;
bool
UpdateRemoteContentController
(
uint64_t
aLayersId
dom
:
:
ContentParent
*
aContentParent
const
dom
:
:
TabId
&
aTabId
dom
:
:
TabParent
*
aBrowserParent
)
;
void
OnProcessLaunchComplete
(
GPUProcessHost
*
aHost
)
override
;
void
OnProcessUnexpectedShutdown
(
GPUProcessHost
*
aHost
)
override
;
void
NotifyRemoteActorDestroyed
(
const
uint64_t
&
aProcessToken
)
;
GPUChild
*
GetGPUChild
(
)
{
return
mGPUChild
;
}
private
:
void
OnXPCOMShutdown
(
)
;
private
:
GPUProcessManager
(
)
;
void
DisableGPUProcess
(
const
char
*
aMessage
)
;
void
CleanShutdown
(
)
;
void
DestroyProcess
(
)
;
void
EnsureVsyncIOThread
(
)
;
void
ShutdownVsyncIOThread
(
)
;
void
EnsureImageBridgeChild
(
)
;
void
EnsureVRManager
(
)
;
RefPtr
<
CompositorSession
>
CreateRemoteSession
(
nsBaseWidget
*
aWidget
ClientLayerManager
*
aLayerManager
const
uint64_t
&
aRootLayerTreeId
CSSToLayoutDeviceScale
aScale
bool
aUseAPZ
bool
aUseExternalSurfaceSize
const
gfx
:
:
IntSize
&
aSurfaceSize
)
;
DISALLOW_COPY_AND_ASSIGN
(
GPUProcessManager
)
;
class
Observer
final
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
explicit
Observer
(
GPUProcessManager
*
aManager
)
;
protected
:
~
Observer
(
)
{
}
GPUProcessManager
*
mManager
;
}
;
friend
class
Observer
;
private
:
RefPtr
<
Observer
>
mObserver
;
ipc
:
:
TaskFactory
<
GPUProcessManager
>
mTaskFactory
;
RefPtr
<
VsyncIOThreadHolder
>
mVsyncIOThread
;
uint64_t
mNextLayerTreeId
;
GPUProcessHost
*
mProcess
;
uint64_t
mProcessToken
;
GPUChild
*
mGPUChild
;
RefPtr
<
VsyncBridgeChild
>
mVsyncBridge
;
}
;
}
}
#
endif
