#
include
"
CanvasManagerChild
.
h
"
#
include
"
mozilla
/
AppShutdown
.
h
"
#
include
"
mozilla
/
dom
/
CanvasRenderingContext2D
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Swizzle
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
mozilla
/
layers
/
ActiveResource
.
h
"
#
include
"
mozilla
/
layers
/
CanvasChild
.
h
"
#
include
"
mozilla
/
layers
/
CompositorManagerChild
.
h
"
#
include
"
mozilla
/
webgpu
/
WebGPUChild
.
h
"
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
layers
;
namespace
mozilla
:
:
gfx
{
MOZ_THREAD_LOCAL
(
CanvasManagerChild
*
)
CanvasManagerChild
:
:
sLocalManager
;
Atomic
<
uint32_t
>
CanvasManagerChild
:
:
sNextId
(
1
)
;
CanvasManagerChild
:
:
CanvasManagerChild
(
uint32_t
aId
)
:
mId
(
aId
)
{
}
CanvasManagerChild
:
:
~
CanvasManagerChild
(
)
=
default
;
void
CanvasManagerChild
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
DestroyInternal
(
)
;
if
(
sLocalManager
.
get
(
)
=
=
this
)
{
sLocalManager
.
set
(
nullptr
)
;
}
mWorkerRef
=
nullptr
;
}
void
CanvasManagerChild
:
:
DestroyInternal
(
)
{
std
:
:
set
<
CanvasRenderingContext2D
*
>
activeCanvas
=
std
:
:
move
(
mActiveCanvas
)
;
for
(
const
auto
&
i
:
activeCanvas
)
{
i
-
>
OnShutdown
(
)
;
}
if
(
mActiveResourceTracker
)
{
mActiveResourceTracker
-
>
AgeAllGenerations
(
)
;
mActiveResourceTracker
.
reset
(
)
;
}
if
(
mCanvasChild
)
{
mCanvasChild
-
>
Destroy
(
)
;
mCanvasChild
=
nullptr
;
}
}
void
CanvasManagerChild
:
:
Destroy
(
)
{
DestroyInternal
(
)
;
Close
(
)
;
}
void
CanvasManagerChild
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sLocalManager
.
init
(
)
)
{
RefPtr
<
CanvasManagerChild
>
manager
=
sLocalManager
.
get
(
)
;
if
(
manager
)
{
manager
-
>
Destroy
(
)
;
}
}
}
bool
CanvasManagerChild
:
:
CreateParent
(
ipc
:
:
Endpoint
<
PCanvasManagerParent
>
&
&
aEndpoint
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
CompositorManagerChild
*
manager
=
CompositorManagerChild
:
:
GetInstance
(
)
;
if
(
!
manager
|
|
!
manager
-
>
CanSend
(
)
)
{
return
false
;
}
return
manager
-
>
SendInitCanvasManager
(
std
:
:
move
(
aEndpoint
)
)
;
}
CanvasManagerChild
*
CanvasManagerChild
:
:
Get
(
)
{
if
(
NS_WARN_IF
(
!
sLocalManager
.
init
(
)
)
)
{
return
nullptr
;
}
CanvasManagerChild
*
managerWeak
=
sLocalManager
.
get
(
)
;
if
(
managerWeak
)
{
return
managerWeak
;
}
WorkerPrivate
*
worker
=
GetCurrentThreadWorkerPrivate
(
)
;
MOZ_ASSERT_IF
(
!
worker
NS_IsMainThread
(
)
)
;
ipc
:
:
Endpoint
<
PCanvasManagerParent
>
parentEndpoint
;
ipc
:
:
Endpoint
<
PCanvasManagerChild
>
childEndpoint
;
auto
compositorPid
=
CompositorManagerChild
:
:
GetOtherPid
(
)
;
if
(
NS_WARN_IF
(
!
compositorPid
)
)
{
return
nullptr
;
}
nsresult
rv
=
PCanvasManager
:
:
CreateEndpoints
(
compositorPid
base
:
:
GetCurrentProcId
(
)
&
parentEndpoint
&
childEndpoint
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
auto
manager
=
MakeRefPtr
<
CanvasManagerChild
>
(
sNextId
+
+
)
;
if
(
worker
)
{
RefPtr
<
StrongWorkerRef
>
workerRef
=
StrongWorkerRef
:
:
Create
(
worker
"
CanvasManager
"
[
manager
]
(
)
{
manager
-
>
Destroy
(
)
;
}
)
;
if
(
NS_WARN_IF
(
!
workerRef
)
)
{
return
nullptr
;
}
manager
-
>
mWorkerRef
=
new
ThreadSafeWorkerRef
(
workerRef
)
;
}
else
if
(
NS_IsMainThread
(
)
)
{
if
(
NS_WARN_IF
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdownConfirmed
)
)
)
{
return
nullptr
;
}
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
Can
only
be
used
on
main
or
DOM
worker
threads
!
"
)
;
return
nullptr
;
}
if
(
NS_WARN_IF
(
!
childEndpoint
.
Bind
(
manager
)
)
)
{
return
nullptr
;
}
if
(
worker
)
{
worker
-
>
DispatchToMainThread
(
NS_NewRunnableFunction
(
"
CanvasManagerChild
:
:
CreateParent
"
[
parentEndpoint
=
std
:
:
move
(
parentEndpoint
)
]
(
)
{
CreateParent
(
std
:
:
move
(
const_cast
<
ipc
:
:
Endpoint
<
PCanvasManagerParent
>
&
&
>
(
parentEndpoint
)
)
)
;
}
)
)
;
}
else
if
(
NS_WARN_IF
(
!
CreateParent
(
std
:
:
move
(
parentEndpoint
)
)
)
)
{
return
nullptr
;
}
manager
-
>
SendInitialize
(
manager
-
>
Id
(
)
)
;
sLocalManager
.
set
(
manager
)
;
return
manager
;
}
CanvasManagerChild
*
CanvasManagerChild
:
:
MaybeGet
(
)
{
if
(
!
sLocalManager
.
initialized
(
)
)
{
return
nullptr
;
}
return
sLocalManager
.
get
(
)
;
}
void
CanvasManagerChild
:
:
AddShutdownObserver
(
dom
:
:
CanvasRenderingContext2D
*
aCanvas
)
{
mActiveCanvas
.
insert
(
aCanvas
)
;
}
void
CanvasManagerChild
:
:
RemoveShutdownObserver
(
dom
:
:
CanvasRenderingContext2D
*
aCanvas
)
{
mActiveCanvas
.
erase
(
aCanvas
)
;
}
void
CanvasManagerChild
:
:
EndCanvasTransaction
(
)
{
if
(
!
mCanvasChild
)
{
return
;
}
mCanvasChild
-
>
EndTransaction
(
)
;
if
(
mCanvasChild
-
>
ShouldBeCleanedUp
(
)
)
{
mCanvasChild
-
>
Destroy
(
)
;
mCanvasChild
=
nullptr
;
}
}
void
CanvasManagerChild
:
:
ClearCachedResources
(
)
{
if
(
mCanvasChild
)
{
mCanvasChild
-
>
ClearCachedResources
(
)
;
}
}
void
CanvasManagerChild
:
:
DeactivateCanvas
(
)
{
mActive
=
false
;
if
(
mCanvasChild
)
{
mCanvasChild
-
>
Destroy
(
)
;
mCanvasChild
=
nullptr
;
}
}
void
CanvasManagerChild
:
:
BlockCanvas
(
)
{
mBlocked
=
true
;
}
RefPtr
<
layers
:
:
CanvasChild
>
CanvasManagerChild
:
:
GetCanvasChild
(
)
{
if
(
mBlocked
)
{
return
nullptr
;
}
if
(
!
mActive
)
{
MOZ_ASSERT
(
!
mCanvasChild
)
;
return
nullptr
;
}
if
(
!
mCanvasChild
)
{
mCanvasChild
=
MakeAndAddRef
<
layers
:
:
CanvasChild
>
(
)
;
if
(
!
SendPCanvasConstructor
(
mCanvasChild
)
)
{
mCanvasChild
=
nullptr
;
}
}
return
mCanvasChild
;
}
RefPtr
<
webgpu
:
:
WebGPUChild
>
CanvasManagerChild
:
:
GetWebGPUChild
(
)
{
if
(
PWebGPUChild
*
actor
=
LoneManagedOrNullAsserts
(
ManagedPWebGPUChild
(
)
)
)
{
return
static_cast
<
webgpu
:
:
WebGPUChild
*
>
(
actor
)
;
}
auto
actor
=
MakeRefPtr
<
webgpu
:
:
WebGPUChild
>
(
)
;
if
(
!
SendPWebGPUConstructor
(
actor
)
)
{
return
nullptr
;
}
return
actor
;
}
layers
:
:
ActiveResourceTracker
*
CanvasManagerChild
:
:
GetActiveResourceTracker
(
)
{
if
(
!
mActiveResourceTracker
)
{
mActiveResourceTracker
=
MakeUnique
<
ActiveResourceTracker
>
(
1000
"
CanvasManagerChild
"
GetCurrentSerialEventTarget
(
)
)
;
}
return
mActiveResourceTracker
.
get
(
)
;
}
already_AddRefed
<
DataSourceSurface
>
CanvasManagerChild
:
:
GetSnapshot
(
uint32_t
aManagerId
int32_t
aProtocolId
const
Maybe
<
RemoteTextureOwnerId
>
&
aOwnerId
SurfaceFormat
aFormat
bool
aPremultiply
bool
aYFlip
)
{
if
(
!
CanSend
(
)
)
{
return
nullptr
;
}
webgl
:
:
FrontBufferSnapshotIpc
res
;
if
(
!
SendGetSnapshot
(
aManagerId
aProtocolId
aOwnerId
&
res
)
)
{
return
nullptr
;
}
if
(
!
res
.
shmem
|
|
!
res
.
shmem
-
>
IsReadable
(
)
)
{
return
nullptr
;
}
auto
guard
=
MakeScopeExit
(
[
&
]
{
DeallocShmem
(
res
.
shmem
.
ref
(
)
)
;
}
)
;
if
(
!
res
.
surfSize
.
x
|
|
!
res
.
surfSize
.
y
|
|
res
.
surfSize
.
x
>
INT32_MAX
|
|
res
.
surfSize
.
y
>
INT32_MAX
)
{
return
nullptr
;
}
IntSize
size
(
res
.
surfSize
.
x
res
.
surfSize
.
y
)
;
CheckedInt32
stride
=
CheckedInt32
(
size
.
width
)
*
sizeof
(
uint32_t
)
;
if
(
!
stride
.
isValid
(
)
)
{
return
nullptr
;
}
CheckedInt32
length
=
stride
*
size
.
height
;
if
(
!
length
.
isValid
(
)
|
|
size_t
(
length
.
value
(
)
)
!
=
res
.
shmem
-
>
Size
<
uint8_t
>
(
)
)
{
return
nullptr
;
}
SurfaceFormat
format
=
IsOpaque
(
aFormat
)
?
SurfaceFormat
:
:
B8G8R8X8
:
SurfaceFormat
:
:
B8G8R8A8
;
RefPtr
<
DataSourceSurface
>
surface
=
Factory
:
:
CreateDataSourceSurfaceWithStride
(
size
format
stride
.
value
(
)
false
)
;
if
(
!
surface
)
{
return
nullptr
;
}
gfx
:
:
DataSourceSurface
:
:
ScopedMap
map
(
surface
gfx
:
:
DataSourceSurface
:
:
READ_WRITE
)
;
if
(
!
map
.
IsMapped
(
)
)
{
return
nullptr
;
}
if
(
aYFlip
)
{
if
(
aPremultiply
)
{
if
(
!
PremultiplyYFlipData
(
res
.
shmem
-
>
get
<
uint8_t
>
(
)
stride
.
value
(
)
aFormat
map
.
GetData
(
)
map
.
GetStride
(
)
format
size
)
)
{
return
nullptr
;
}
}
else
{
if
(
!
SwizzleYFlipData
(
res
.
shmem
-
>
get
<
uint8_t
>
(
)
stride
.
value
(
)
aFormat
map
.
GetData
(
)
map
.
GetStride
(
)
format
size
)
)
{
return
nullptr
;
}
}
}
else
if
(
aPremultiply
)
{
if
(
!
PremultiplyData
(
res
.
shmem
-
>
get
<
uint8_t
>
(
)
stride
.
value
(
)
aFormat
map
.
GetData
(
)
map
.
GetStride
(
)
format
size
)
)
{
return
nullptr
;
}
}
else
{
if
(
!
SwizzleData
(
res
.
shmem
-
>
get
<
uint8_t
>
(
)
stride
.
value
(
)
aFormat
map
.
GetData
(
)
map
.
GetStride
(
)
format
size
)
)
{
return
nullptr
;
}
}
return
surface
.
forget
(
)
;
}
}
