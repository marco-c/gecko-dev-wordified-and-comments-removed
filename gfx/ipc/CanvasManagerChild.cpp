#
include
"
CanvasManagerChild
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
mozilla
/
layers
/
CompositorManagerChild
.
h
"
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
layers
;
namespace
mozilla
:
:
gfx
{
MOZ_THREAD_LOCAL
(
CanvasManagerChild
*
)
CanvasManagerChild
:
:
sLocalManager
;
CanvasManagerChild
:
:
CanvasManagerChild
(
)
=
default
;
CanvasManagerChild
:
:
~
CanvasManagerChild
(
)
=
default
;
void
CanvasManagerChild
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
if
(
sLocalManager
.
get
(
)
=
=
this
)
{
sLocalManager
.
set
(
nullptr
)
;
}
}
void
CanvasManagerChild
:
:
Destroy
(
)
{
Close
(
)
;
mWorkerRef
=
nullptr
;
}
void
CanvasManagerChild
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sLocalManager
.
init
(
)
)
{
RefPtr
<
CanvasManagerChild
>
manager
=
sLocalManager
.
get
(
)
;
if
(
manager
)
{
manager
-
>
Destroy
(
)
;
}
}
}
bool
CanvasManagerChild
:
:
CreateParent
(
ipc
:
:
Endpoint
<
PCanvasManagerParent
>
&
&
aEndpoint
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
CompositorManagerChild
*
manager
=
CompositorManagerChild
:
:
GetInstance
(
)
;
if
(
!
manager
|
|
!
manager
-
>
CanSend
(
)
)
{
return
false
;
}
return
manager
-
>
SendInitCanvasManager
(
std
:
:
move
(
aEndpoint
)
)
;
}
CanvasManagerChild
*
CanvasManagerChild
:
:
Get
(
)
{
if
(
NS_WARN_IF
(
!
sLocalManager
.
init
(
)
)
)
{
return
nullptr
;
}
CanvasManagerChild
*
managerWeak
=
sLocalManager
.
get
(
)
;
if
(
managerWeak
)
{
return
managerWeak
;
}
WorkerPrivate
*
worker
=
GetCurrentThreadWorkerPrivate
(
)
;
MOZ_ASSERT_IF
(
!
worker
NS_IsMainThread
(
)
)
;
ipc
:
:
Endpoint
<
PCanvasManagerParent
>
parentEndpoint
;
ipc
:
:
Endpoint
<
PCanvasManagerChild
>
childEndpoint
;
auto
compositorPid
=
CompositorManagerChild
:
:
GetOtherPid
(
)
;
if
(
NS_WARN_IF
(
!
compositorPid
)
)
{
return
nullptr
;
}
nsresult
rv
=
PCanvasManager
:
:
CreateEndpoints
(
compositorPid
base
:
:
GetCurrentProcId
(
)
&
parentEndpoint
&
childEndpoint
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
auto
manager
=
MakeRefPtr
<
CanvasManagerChild
>
(
)
;
if
(
worker
)
{
manager
-
>
mWorkerRef
=
IPCWorkerRef
:
:
Create
(
worker
"
CanvasManager
"
[
manager
]
(
)
{
manager
-
>
Destroy
(
)
;
}
)
;
if
(
NS_WARN_IF
(
!
manager
-
>
mWorkerRef
)
)
{
return
nullptr
;
}
}
if
(
NS_WARN_IF
(
!
childEndpoint
.
Bind
(
manager
)
)
)
{
return
nullptr
;
}
if
(
worker
)
{
worker
-
>
DispatchToMainThread
(
NS_NewRunnableFunction
(
"
CanvasManagerChild
:
:
CreateParent
"
[
parentEndpoint
=
std
:
:
move
(
parentEndpoint
)
]
(
)
{
CreateParent
(
std
:
:
move
(
const_cast
<
ipc
:
:
Endpoint
<
PCanvasManagerParent
>
&
&
>
(
parentEndpoint
)
)
)
;
}
)
)
;
}
else
if
(
NS_WARN_IF
(
!
CreateParent
(
std
:
:
move
(
parentEndpoint
)
)
)
)
{
return
nullptr
;
}
sLocalManager
.
set
(
manager
)
;
return
manager
;
}
}
