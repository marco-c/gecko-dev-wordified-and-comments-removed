#
include
"
CompositorSession
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeParent
.
h
"
#
include
"
mozilla
/
widget
/
PlatformWidgetTypes
.
h
"
#
include
"
base
/
process_util
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
widget
;
class
InProcessCompositorSession
final
:
public
CompositorSession
{
public
:
InProcessCompositorSession
(
nsIWidget
*
aWidget
ClientLayerManager
*
aLayerManager
CSSToLayoutDeviceScale
aScale
bool
aUseAPZ
bool
aUseExternalSurfaceSize
const
gfx
:
:
IntSize
&
aSurfaceSize
)
;
CompositorBridgeParent
*
GetInProcessBridge
(
)
const
override
;
void
SetContentController
(
GeckoContentController
*
aController
)
override
;
uint64_t
RootLayerTreeId
(
)
const
override
;
already_AddRefed
<
APZCTreeManager
>
GetAPZCTreeManager
(
)
const
override
;
void
Shutdown
(
)
override
;
private
:
RefPtr
<
CompositorBridgeParent
>
mCompositorBridgeParent
;
RefPtr
<
CompositorWidget
>
mCompositorWidget
;
}
;
already_AddRefed
<
CompositorSession
>
CompositorSession
:
:
CreateInProcess
(
nsIWidget
*
aWidget
ClientLayerManager
*
aLayerManager
CSSToLayoutDeviceScale
aScale
bool
aUseAPZ
bool
aUseExternalSurfaceSize
const
gfx
:
:
IntSize
&
aSurfaceSize
)
{
RefPtr
<
InProcessCompositorSession
>
session
=
new
InProcessCompositorSession
(
aWidget
aLayerManager
aScale
aUseAPZ
aUseExternalSurfaceSize
aSurfaceSize
)
;
return
session
.
forget
(
)
;
}
CompositorSession
:
:
CompositorSession
(
)
:
mCompositorWidgetDelegate
(
nullptr
)
{
}
CompositorSession
:
:
~
CompositorSession
(
)
{
}
CompositorBridgeChild
*
CompositorSession
:
:
GetCompositorBridgeChild
(
)
{
return
mCompositorBridgeChild
;
}
InProcessCompositorSession
:
:
InProcessCompositorSession
(
nsIWidget
*
aWidget
ClientLayerManager
*
aLayerManager
CSSToLayoutDeviceScale
aScale
bool
aUseAPZ
bool
aUseExternalSurfaceSize
const
gfx
:
:
IntSize
&
aSurfaceSize
)
{
CompositorWidgetInitData
initData
;
aWidget
-
>
GetCompositorWidgetInitData
(
&
initData
)
;
mCompositorWidget
=
CompositorWidget
:
:
CreateLocal
(
initData
aWidget
)
;
mCompositorWidgetDelegate
=
mCompositorWidget
-
>
AsDelegate
(
)
;
mCompositorBridgeParent
=
new
CompositorBridgeParent
(
mCompositorWidget
aScale
aUseAPZ
aUseExternalSurfaceSize
aSurfaceSize
)
;
mCompositorBridgeChild
=
new
CompositorBridgeChild
(
aLayerManager
)
;
mCompositorBridgeChild
-
>
OpenSameProcess
(
mCompositorBridgeParent
)
;
mCompositorBridgeParent
-
>
SetOtherProcessId
(
base
:
:
GetCurrentProcId
(
)
)
;
}
CompositorBridgeParent
*
InProcessCompositorSession
:
:
GetInProcessBridge
(
)
const
{
return
mCompositorBridgeParent
;
}
void
InProcessCompositorSession
:
:
SetContentController
(
GeckoContentController
*
aController
)
{
mCompositorBridgeParent
-
>
SetControllerForLayerTree
(
RootLayerTreeId
(
)
aController
)
;
}
uint64_t
InProcessCompositorSession
:
:
RootLayerTreeId
(
)
const
{
return
mCompositorBridgeParent
-
>
RootLayerTreeId
(
)
;
}
already_AddRefed
<
APZCTreeManager
>
InProcessCompositorSession
:
:
GetAPZCTreeManager
(
)
const
{
return
mCompositorBridgeParent
-
>
GetAPZCTreeManager
(
RootLayerTreeId
(
)
)
;
}
void
InProcessCompositorSession
:
:
Shutdown
(
)
{
mCompositorBridgeChild
-
>
Destroy
(
)
;
mCompositorBridgeChild
=
nullptr
;
mCompositorBridgeParent
=
nullptr
;
mCompositorWidget
=
nullptr
;
}
}
}
