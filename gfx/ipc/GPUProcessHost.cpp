#
include
"
GPUProcessHost
.
h
"
#
include
"
chrome
/
common
/
process_watcher
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
VRGPUChild
.
h
"
#
include
"
ProcessUtils
.
h
"
namespace
mozilla
{
namespace
gfx
{
using
namespace
ipc
;
GPUProcessHost
:
:
GPUProcessHost
(
Listener
*
aListener
)
:
GeckoChildProcessHost
(
GeckoProcessType_GPU
)
mListener
(
aListener
)
mTaskFactory
(
this
)
mLaunchPhase
(
LaunchPhase
:
:
Unlaunched
)
mProcessToken
(
0
)
mShutdownRequested
(
false
)
mChannelClosed
(
false
)
{
MOZ_COUNT_CTOR
(
GPUProcessHost
)
;
}
GPUProcessHost
:
:
~
GPUProcessHost
(
)
{
MOZ_COUNT_DTOR
(
GPUProcessHost
)
;
}
bool
GPUProcessHost
:
:
Launch
(
StringVector
aExtraOpts
)
{
MOZ_ASSERT
(
mLaunchPhase
=
=
LaunchPhase
:
:
Unlaunched
)
;
MOZ_ASSERT
(
!
mGPUChild
)
;
MOZ_ASSERT
(
!
gfxPlatform
:
:
IsHeadless
(
)
)
;
mPrefSerializer
=
MakeUnique
<
ipc
:
:
SharedPreferenceSerializer
>
(
)
;
if
(
!
mPrefSerializer
-
>
SerializeToSharedMemory
(
)
)
{
return
false
;
}
mPrefSerializer
-
>
AddSharedPrefCmdLineArgs
(
*
this
aExtraOpts
)
;
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
mSandboxLevel
=
Preferences
:
:
GetInt
(
"
security
.
sandbox
.
gpu
.
level
"
)
;
#
endif
mLaunchPhase
=
LaunchPhase
:
:
Waiting
;
mLaunchTime
=
TimeStamp
:
:
Now
(
)
;
if
(
!
GeckoChildProcessHost
:
:
AsyncLaunch
(
aExtraOpts
)
)
{
mLaunchPhase
=
LaunchPhase
:
:
Complete
;
mPrefSerializer
=
nullptr
;
return
false
;
}
return
true
;
}
bool
GPUProcessHost
:
:
WaitForLaunch
(
)
{
if
(
mLaunchPhase
=
=
LaunchPhase
:
:
Complete
)
{
return
!
!
mGPUChild
;
}
int32_t
timeoutMs
=
gfxPrefs
:
:
GPUProcessTimeoutMs
(
)
;
if
(
PR_GetEnv
(
"
MOZ_DEBUG_CHILD_PROCESS
"
)
|
|
PR_GetEnv
(
"
MOZ_DEBUG_CHILD_PAUSE
"
)
)
{
timeoutMs
=
0
;
}
bool
result
=
GeckoChildProcessHost
:
:
WaitUntilConnected
(
timeoutMs
)
;
InitAfterConnect
(
result
)
;
return
result
;
}
void
GPUProcessHost
:
:
OnChannelConnected
(
int32_t
peer_pid
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
GeckoChildProcessHost
:
:
OnChannelConnected
(
peer_pid
)
;
RefPtr
<
Runnable
>
runnable
;
{
MonitorAutoLock
lock
(
mMonitor
)
;
runnable
=
mTaskFactory
.
NewRunnableMethod
(
&
GPUProcessHost
:
:
OnChannelConnectedTask
)
;
}
NS_DispatchToMainThread
(
runnable
)
;
}
void
GPUProcessHost
:
:
OnChannelError
(
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
GeckoChildProcessHost
:
:
OnChannelError
(
)
;
RefPtr
<
Runnable
>
runnable
;
{
MonitorAutoLock
lock
(
mMonitor
)
;
runnable
=
mTaskFactory
.
NewRunnableMethod
(
&
GPUProcessHost
:
:
OnChannelErrorTask
)
;
}
NS_DispatchToMainThread
(
runnable
)
;
}
void
GPUProcessHost
:
:
OnChannelConnectedTask
(
)
{
if
(
mLaunchPhase
=
=
LaunchPhase
:
:
Waiting
)
{
InitAfterConnect
(
true
)
;
}
}
void
GPUProcessHost
:
:
OnChannelErrorTask
(
)
{
if
(
mLaunchPhase
=
=
LaunchPhase
:
:
Waiting
)
{
InitAfterConnect
(
false
)
;
}
}
static
uint64_t
sProcessTokenCounter
=
0
;
void
GPUProcessHost
:
:
InitAfterConnect
(
bool
aSucceeded
)
{
MOZ_ASSERT
(
mLaunchPhase
=
=
LaunchPhase
:
:
Waiting
)
;
MOZ_ASSERT
(
!
mGPUChild
)
;
mLaunchPhase
=
LaunchPhase
:
:
Complete
;
mPrefSerializer
=
nullptr
;
if
(
aSucceeded
)
{
mProcessToken
=
+
+
sProcessTokenCounter
;
mGPUChild
=
MakeUnique
<
GPUChild
>
(
this
)
;
DebugOnly
<
bool
>
rv
=
mGPUChild
-
>
Open
(
GetChannel
(
)
base
:
:
GetProcId
(
GetChildProcessHandle
(
)
)
)
;
MOZ_ASSERT
(
rv
)
;
mGPUChild
-
>
Init
(
)
;
}
if
(
mListener
)
{
mListener
-
>
OnProcessLaunchComplete
(
this
)
;
}
}
void
GPUProcessHost
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
!
mShutdownRequested
)
;
mListener
=
nullptr
;
if
(
mGPUChild
)
{
mShutdownRequested
=
true
;
if
(
!
mChannelClosed
)
{
if
(
VRGPUChild
:
:
IsCreated
(
)
)
{
VRGPUChild
:
:
Get
(
)
-
>
Close
(
)
;
}
mGPUChild
-
>
SendShutdownVR
(
)
;
mGPUChild
-
>
Close
(
)
;
}
#
ifndef
NS_FREE_PERMANENT_DATA
KillHard
(
"
NormalShutdown
"
)
;
#
endif
return
;
}
DestroyProcess
(
)
;
}
void
GPUProcessHost
:
:
OnChannelClosed
(
)
{
mChannelClosed
=
true
;
if
(
!
mShutdownRequested
&
&
mListener
)
{
mListener
-
>
OnProcessUnexpectedShutdown
(
this
)
;
}
else
{
DestroyProcess
(
)
;
}
GPUChild
:
:
Destroy
(
std
:
:
move
(
mGPUChild
)
)
;
MOZ_ASSERT
(
!
mGPUChild
)
;
}
void
GPUProcessHost
:
:
KillHard
(
const
char
*
aReason
)
{
ProcessHandle
handle
=
GetChildProcessHandle
(
)
;
if
(
!
base
:
:
KillProcess
(
handle
base
:
:
PROCESS_END_KILLED_BY_USER
false
)
)
{
NS_WARNING
(
"
failed
to
kill
subprocess
!
"
)
;
}
SetAlreadyDead
(
)
;
}
uint64_t
GPUProcessHost
:
:
GetProcessToken
(
)
const
{
return
mProcessToken
;
}
void
GPUProcessHost
:
:
KillProcess
(
)
{
KillHard
(
"
DiagnosticKill
"
)
;
}
void
GPUProcessHost
:
:
DestroyProcess
(
)
{
{
MonitorAutoLock
lock
(
mMonitor
)
;
mTaskFactory
.
RevokeAll
(
)
;
}
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NS_NewRunnableFunction
(
"
DestroyProcessRunnable
"
[
this
]
{
Destroy
(
)
;
}
)
)
;
}
}
}
