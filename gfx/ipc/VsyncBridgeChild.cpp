#
include
"
VsyncBridgeChild
.
h
"
#
include
"
VsyncIOThreadHolder
.
h
"
namespace
mozilla
{
namespace
gfx
{
VsyncBridgeChild
:
:
VsyncBridgeChild
(
RefPtr
<
VsyncIOThreadHolder
>
aThread
const
uint64_t
&
aProcessToken
)
:
mThread
(
aThread
)
mLoop
(
nullptr
)
mProcessToken
(
aProcessToken
)
{
}
VsyncBridgeChild
:
:
~
VsyncBridgeChild
(
)
{
}
RefPtr
<
VsyncBridgeChild
>
VsyncBridgeChild
:
:
Create
(
RefPtr
<
VsyncIOThreadHolder
>
aThread
const
uint64_t
&
aProcessToken
Endpoint
<
PVsyncBridgeChild
>
&
&
aEndpoint
)
{
RefPtr
<
VsyncBridgeChild
>
child
=
new
VsyncBridgeChild
(
aThread
aProcessToken
)
;
RefPtr
<
nsIRunnable
>
task
=
NewRunnableMethod
<
Endpoint
<
PVsyncBridgeChild
>
&
&
>
(
child
&
VsyncBridgeChild
:
:
Open
Move
(
aEndpoint
)
)
;
aThread
-
>
GetThread
(
)
-
>
Dispatch
(
task
.
forget
(
)
nsIThread
:
:
DISPATCH_NORMAL
)
;
return
child
;
}
void
VsyncBridgeChild
:
:
Open
(
Endpoint
<
PVsyncBridgeChild
>
&
&
aEndpoint
)
{
if
(
!
aEndpoint
.
Bind
(
this
nullptr
)
)
{
if
(
GPUProcessManager
*
gpm
=
GPUProcessManager
:
:
Get
(
)
)
gpm
-
>
NotifyRemoteActorDestroyed
(
mProcessToken
)
;
return
;
}
mLoop
=
MessageLoop
:
:
current
(
)
;
AddRef
(
)
;
}
void
VsyncBridgeChild
:
:
Close
(
)
{
if
(
MessageLoop
:
:
current
(
)
!
=
mLoop
)
{
mLoop
-
>
PostTask
(
NewRunnableMethod
(
this
&
VsyncBridgeChild
:
:
Close
)
)
;
return
;
}
if
(
!
mProcessToken
)
{
return
;
}
PVsyncBridgeChild
:
:
Close
(
)
;
mProcessToken
=
0
;
}
void
VsyncBridgeChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
if
(
mProcessToken
)
{
GPUProcessManager
:
:
Get
(
)
-
>
NotifyRemoteActorDestroyed
(
mProcessToken
)
;
mProcessToken
=
0
;
}
}
void
VsyncBridgeChild
:
:
DeallocPVsyncBridgeChild
(
)
{
Release
(
)
;
}
void
VsyncBridgeChild
:
:
ProcessingError
(
Result
aCode
const
char
*
aReason
)
{
MOZ_RELEASE_ASSERT
(
aCode
!
=
MsgDropped
"
Processing
error
in
VsyncBridgeChild
"
)
;
}
}
}
