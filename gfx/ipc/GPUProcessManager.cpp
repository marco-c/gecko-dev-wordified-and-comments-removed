#
include
"
GPUProcessManager
.
h
"
#
include
"
GPUProcessHost
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
layers
/
InProcessCompositorSession
.
h
"
#
include
"
mozilla
/
layers
/
RemoteCompositorSession
.
h
"
#
include
"
mozilla
/
widget
/
PlatformWidgetTypes
.
h
"
#
ifdef
MOZ_WIDGET_SUPPORTS_OOP_COMPOSITING
#
include
"
mozilla
/
widget
/
CompositorWidgetChild
.
h
"
#
endif
#
include
"
nsContentUtils
.
h
"
namespace
mozilla
{
namespace
gfx
{
using
namespace
mozilla
:
:
layers
;
static
StaticAutoPtr
<
GPUProcessManager
>
sSingleton
;
GPUProcessManager
*
GPUProcessManager
:
:
Get
(
)
{
return
sSingleton
;
}
void
GPUProcessManager
:
:
Initialize
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
sSingleton
=
new
GPUProcessManager
(
)
;
}
void
GPUProcessManager
:
:
Shutdown
(
)
{
sSingleton
=
nullptr
;
}
GPUProcessManager
:
:
GPUProcessManager
(
)
:
mTaskFactory
(
this
)
mNextLayerTreeId
(
0
)
mProcess
(
nullptr
)
mGPUChild
(
nullptr
)
{
mObserver
=
new
Observer
(
this
)
;
nsContentUtils
:
:
RegisterShutdownObserver
(
mObserver
)
;
}
GPUProcessManager
:
:
~
GPUProcessManager
(
)
{
MOZ_ASSERT
(
!
mProcess
&
&
!
mGPUChild
)
;
MOZ_ASSERT
(
!
mObserver
)
;
}
NS_IMPL_ISUPPORTS
(
GPUProcessManager
:
:
Observer
nsIObserver
)
;
GPUProcessManager
:
:
Observer
:
:
Observer
(
GPUProcessManager
*
aManager
)
:
mManager
(
aManager
)
{
}
NS_IMETHODIMP
GPUProcessManager
:
:
Observer
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
!
strcmp
(
aTopic
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
)
{
mManager
-
>
OnXPCOMShutdown
(
)
;
}
return
NS_OK
;
}
void
GPUProcessManager
:
:
OnXPCOMShutdown
(
)
{
if
(
mObserver
)
{
nsContentUtils
:
:
UnregisterShutdownObserver
(
mObserver
)
;
mObserver
=
nullptr
;
}
DestroyProcess
(
)
;
}
void
GPUProcessManager
:
:
EnableGPUProcess
(
)
{
if
(
mProcess
)
{
return
;
}
mProcess
=
new
GPUProcessHost
(
this
)
;
if
(
!
mProcess
-
>
Launch
(
)
)
{
DisableGPUProcess
(
"
Failed
to
launch
GPU
process
"
)
;
}
}
void
GPUProcessManager
:
:
DisableGPUProcess
(
const
char
*
aMessage
)
{
gfxConfig
:
:
SetFailed
(
Feature
:
:
GPU_PROCESS
FeatureStatus
:
:
Failed
aMessage
)
;
gfxCriticalNote
<
<
aMessage
;
DestroyProcess
(
)
;
}
void
GPUProcessManager
:
:
EnsureGPUReady
(
)
{
if
(
mProcess
&
&
mProcess
-
>
IsConnected
(
)
)
{
if
(
!
mProcess
-
>
WaitForLaunch
(
)
)
{
MOZ_ASSERT
(
!
mProcess
&
&
!
mGPUChild
)
;
return
;
}
}
}
void
GPUProcessManager
:
:
OnProcessLaunchComplete
(
GPUProcessHost
*
aHost
)
{
MOZ_ASSERT
(
mProcess
&
&
mProcess
=
=
aHost
)
;
if
(
!
mProcess
-
>
IsConnected
(
)
)
{
DisableGPUProcess
(
"
Failed
to
launch
GPU
process
"
)
;
return
;
}
mGPUChild
=
mProcess
-
>
GetActor
(
)
;
mProcessToken
=
mProcess
-
>
GetProcessToken
(
)
;
}
void
GPUProcessManager
:
:
OnProcessUnexpectedShutdown
(
GPUProcessHost
*
aHost
)
{
MOZ_ASSERT
(
mProcess
&
&
mProcess
=
=
aHost
)
;
DestroyProcess
(
)
;
}
void
GPUProcessManager
:
:
NotifyRemoteActorDestroyed
(
const
uint64_t
&
aProcessToken
)
{
if
(
!
NS_IsMainThread
(
)
)
{
RefPtr
<
Runnable
>
task
=
mTaskFactory
.
NewRunnableMethod
(
&
GPUProcessManager
:
:
NotifyRemoteActorDestroyed
aProcessToken
)
;
NS_DispatchToMainThread
(
task
.
forget
(
)
)
;
return
;
}
if
(
mProcessToken
!
=
aProcessToken
)
{
return
;
}
DestroyProcess
(
)
;
}
void
GPUProcessManager
:
:
DestroyProcess
(
)
{
if
(
!
mProcess
)
{
return
;
}
mProcess
-
>
Shutdown
(
)
;
mProcessToken
=
0
;
mProcess
=
nullptr
;
mGPUChild
=
nullptr
;
}
RefPtr
<
CompositorSession
>
GPUProcessManager
:
:
CreateTopLevelCompositor
(
nsIWidget
*
aWidget
ClientLayerManager
*
aLayerManager
CSSToLayoutDeviceScale
aScale
bool
aUseAPZ
bool
aUseExternalSurfaceSize
const
gfx
:
:
IntSize
&
aSurfaceSize
)
{
uint64_t
layerTreeId
=
AllocateLayerTreeId
(
)
;
if
(
mGPUChild
)
{
RefPtr
<
CompositorSession
>
session
=
CreateRemoteSession
(
aWidget
aLayerManager
layerTreeId
aScale
aUseAPZ
aUseExternalSurfaceSize
aSurfaceSize
)
;
if
(
session
)
{
return
session
;
}
DisableGPUProcess
(
"
Failed
to
create
remote
compositor
"
)
;
}
return
InProcessCompositorSession
:
:
Create
(
aWidget
aLayerManager
layerTreeId
aScale
aUseAPZ
aUseExternalSurfaceSize
aSurfaceSize
)
;
}
RefPtr
<
CompositorSession
>
GPUProcessManager
:
:
CreateRemoteSession
(
nsIWidget
*
aWidget
ClientLayerManager
*
aLayerManager
const
uint64_t
&
aRootLayerTreeId
CSSToLayoutDeviceScale
aScale
bool
aUseAPZ
bool
aUseExternalSurfaceSize
const
gfx
:
:
IntSize
&
aSurfaceSize
)
{
#
ifdef
MOZ_WIDGET_SUPPORTS_OOP_COMPOSITING
ipc
:
:
Endpoint
<
PCompositorBridgeParent
>
parentPipe
;
ipc
:
:
Endpoint
<
PCompositorBridgeChild
>
childPipe
;
nsresult
rv
=
PCompositorBridge
:
:
CreateEndpoints
(
mGPUChild
-
>
OtherPid
(
)
base
:
:
GetCurrentProcId
(
)
&
parentPipe
&
childPipe
)
;
if
(
NS_FAILED
(
rv
)
)
{
gfxCriticalNote
<
<
"
Failed
to
create
PCompositorBridge
endpoints
:
"
<
<
hexa
(
int
(
rv
)
)
;
return
nullptr
;
}
RefPtr
<
CompositorBridgeChild
>
child
=
CompositorBridgeChild
:
:
CreateRemote
(
mProcessToken
aLayerManager
Move
(
childPipe
)
)
;
if
(
!
child
)
{
gfxCriticalNote
<
<
"
Failed
to
create
CompositorBridgeChild
"
;
return
nullptr
;
}
CompositorWidgetInitData
initData
;
aWidget
-
>
GetCompositorWidgetInitData
(
&
initData
)
;
bool
ok
=
mGPUChild
-
>
SendNewWidgetCompositor
(
Move
(
parentPipe
)
aScale
aUseExternalSurfaceSize
aSurfaceSize
)
;
if
(
!
ok
)
return
nullptr
;
CompositorWidgetChild
*
widget
=
new
CompositorWidgetChild
(
aWidget
)
;
if
(
!
child
-
>
SendPCompositorWidgetConstructor
(
widget
initData
)
)
return
nullptr
;
if
(
!
child
-
>
SendInitialize
(
aRootLayerTreeId
)
)
return
nullptr
;
RefPtr
<
RemoteCompositorSession
>
session
=
new
RemoteCompositorSession
(
child
widget
aRootLayerTreeId
)
;
return
session
.
forget
(
)
;
#
else
gfxCriticalNote
<
<
"
Platform
does
not
support
out
-
of
-
process
compositing
"
;
return
nullptr
;
#
endif
}
PCompositorBridgeParent
*
GPUProcessManager
:
:
CreateTabCompositorBridge
(
ipc
:
:
Transport
*
aTransport
base
:
:
ProcessId
aOtherProcess
)
{
return
CompositorBridgeParent
:
:
Create
(
aTransport
aOtherProcess
)
;
}
already_AddRefed
<
APZCTreeManager
>
GPUProcessManager
:
:
GetAPZCTreeManagerForLayers
(
uint64_t
aLayersId
)
{
return
CompositorBridgeParent
:
:
GetAPZCTreeManager
(
aLayersId
)
;
}
uint64_t
GPUProcessManager
:
:
AllocateLayerTreeId
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
+
+
mNextLayerTreeId
;
}
void
GPUProcessManager
:
:
DeallocateLayerTreeId
(
uint64_t
aLayersId
)
{
CompositorBridgeParent
:
:
DeallocateLayerTreeId
(
aLayersId
)
;
}
void
GPUProcessManager
:
:
RequestNotifyLayerTreeReady
(
uint64_t
aLayersId
CompositorUpdateObserver
*
aObserver
)
{
CompositorBridgeParent
:
:
RequestNotifyLayerTreeReady
(
aLayersId
aObserver
)
;
}
void
GPUProcessManager
:
:
RequestNotifyLayerTreeCleared
(
uint64_t
aLayersId
CompositorUpdateObserver
*
aObserver
)
{
CompositorBridgeParent
:
:
RequestNotifyLayerTreeCleared
(
aLayersId
aObserver
)
;
}
void
GPUProcessManager
:
:
SwapLayerTreeObservers
(
uint64_t
aLayer
uint64_t
aOtherLayer
)
{
CompositorBridgeParent
:
:
SwapLayerTreeObservers
(
aLayer
aOtherLayer
)
;
}
bool
GPUProcessManager
:
:
UpdateRemoteContentController
(
uint64_t
aLayersId
dom
:
:
ContentParent
*
aContentParent
const
dom
:
:
TabId
&
aTabId
dom
:
:
TabParent
*
aBrowserParent
)
{
return
CompositorBridgeParent
:
:
UpdateRemoteContentController
(
aLayersId
aContentParent
aTabId
aBrowserParent
)
;
}
}
}
