#
include
"
CanvasShutdownManager
.
h
"
#
include
"
mozilla
/
AppShutdown
.
h
"
#
include
"
mozilla
/
dom
/
CanvasRenderingContext2D
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
#
include
"
mozilla
/
gfx
/
CanvasManagerChild
.
h
"
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
:
:
gfx
{
MOZ_THREAD_LOCAL
(
CanvasShutdownManager
*
)
CanvasShutdownManager
:
:
sLocalManager
;
CanvasShutdownManager
:
:
CanvasShutdownManager
(
StrongWorkerRef
*
aWorkerRef
)
:
mWorkerRef
(
new
ThreadSafeWorkerRef
(
aWorkerRef
)
)
{
}
CanvasShutdownManager
:
:
CanvasShutdownManager
(
)
=
default
;
CanvasShutdownManager
:
:
~
CanvasShutdownManager
(
)
=
default
;
void
CanvasShutdownManager
:
:
Destroy
(
)
{
std
:
:
set
<
CanvasRenderingContext2D
*
>
activeCanvas
=
std
:
:
move
(
mActiveCanvas
)
;
for
(
const
auto
&
i
:
activeCanvas
)
{
i
-
>
OnShutdown
(
)
;
}
CanvasManagerChild
:
:
Shutdown
(
)
;
mWorkerRef
=
nullptr
;
}
void
CanvasShutdownManager
:
:
Shutdown
(
)
{
auto
*
manager
=
MaybeGet
(
)
;
if
(
!
manager
)
{
return
;
}
sLocalManager
.
set
(
nullptr
)
;
manager
-
>
Destroy
(
)
;
delete
manager
;
}
CanvasShutdownManager
*
CanvasShutdownManager
:
:
MaybeGet
(
)
{
if
(
NS_WARN_IF
(
!
sLocalManager
.
init
(
)
)
)
{
return
nullptr
;
}
return
sLocalManager
.
get
(
)
;
}
CanvasShutdownManager
*
CanvasShutdownManager
:
:
Get
(
)
{
if
(
NS_WARN_IF
(
!
sLocalManager
.
init
(
)
)
)
{
return
nullptr
;
}
CanvasShutdownManager
*
managerWeak
=
sLocalManager
.
get
(
)
;
if
(
managerWeak
)
{
return
managerWeak
;
}
if
(
WorkerPrivate
*
worker
=
GetCurrentThreadWorkerPrivate
(
)
)
{
RefPtr
<
StrongWorkerRef
>
workerRef
=
StrongWorkerRef
:
:
Create
(
worker
"
CanvasShutdownManager
"
[
]
(
)
{
Shutdown
(
)
;
}
)
;
if
(
NS_WARN_IF
(
!
workerRef
)
)
{
return
nullptr
;
}
CanvasShutdownManager
*
manager
=
new
CanvasShutdownManager
(
workerRef
)
;
sLocalManager
.
set
(
manager
)
;
return
manager
;
}
if
(
NS_IsMainThread
(
)
)
{
if
(
NS_WARN_IF
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdownConfirmed
)
)
)
{
return
nullptr
;
}
CanvasShutdownManager
*
manager
=
new
CanvasShutdownManager
(
)
;
sLocalManager
.
set
(
manager
)
;
return
manager
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Can
only
be
used
on
main
or
DOM
worker
threads
!
"
)
;
return
nullptr
;
}
void
CanvasShutdownManager
:
:
AddShutdownObserver
(
dom
:
:
CanvasRenderingContext2D
*
aCanvas
)
{
mActiveCanvas
.
insert
(
aCanvas
)
;
}
void
CanvasShutdownManager
:
:
RemoveShutdownObserver
(
dom
:
:
CanvasRenderingContext2D
*
aCanvas
)
{
mActiveCanvas
.
erase
(
aCanvas
)
;
}
}
