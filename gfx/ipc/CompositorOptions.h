#
ifndef
_include_mozilla_gfx_ipc_CompositorOptions_h_
#
define
_include_mozilla_gfx_ipc_CompositorOptions_h_
namespace
IPC
{
template
<
typename
>
struct
ParamTraits
;
}
namespace
mozilla
{
namespace
layers
{
class
CompositorOptions
{
public
:
CompositorOptions
(
)
=
default
;
CompositorOptions
(
bool
aUseAPZ
bool
aUseSoftwareWebRender
)
:
mUseAPZ
(
aUseAPZ
)
mUseSoftwareWebRender
(
aUseSoftwareWebRender
)
{
}
bool
UseAPZ
(
)
const
{
return
mUseAPZ
;
}
bool
UseSoftwareWebRender
(
)
const
{
return
mUseSoftwareWebRender
;
}
bool
AllowSoftwareWebRenderD3D11
(
)
const
{
return
mAllowSoftwareWebRenderD3D11
;
}
bool
AllowSoftwareWebRenderOGL
(
)
const
{
return
mAllowSoftwareWebRenderOGL
;
}
bool
InitiallyPaused
(
)
const
{
return
mInitiallyPaused
;
}
void
SetUseAPZ
(
bool
aUseAPZ
)
{
mUseAPZ
=
aUseAPZ
;
}
void
SetAllowSoftwareWebRenderD3D11
(
bool
aAllowSoftwareWebRenderD3D11
)
{
mAllowSoftwareWebRenderD3D11
=
aAllowSoftwareWebRenderD3D11
;
}
void
SetAllowSoftwareWebRenderOGL
(
bool
aAllowSoftwareWebRenderOGL
)
{
mAllowSoftwareWebRenderOGL
=
aAllowSoftwareWebRenderOGL
;
}
bool
UseWebGPU
(
)
const
{
return
mUseWebGPU
;
}
void
SetUseWebGPU
(
bool
aUseWebGPU
)
{
mUseWebGPU
=
aUseWebGPU
;
}
void
SetInitiallyPaused
(
bool
aPauseAtStartup
)
{
mInitiallyPaused
=
aPauseAtStartup
;
}
bool
operator
=
=
(
const
CompositorOptions
&
aOther
)
const
{
return
mUseAPZ
=
=
aOther
.
mUseAPZ
&
&
mUseSoftwareWebRender
=
=
aOther
.
mUseSoftwareWebRender
&
&
mAllowSoftwareWebRenderD3D11
=
=
aOther
.
mAllowSoftwareWebRenderD3D11
&
&
mAllowSoftwareWebRenderOGL
=
=
aOther
.
mAllowSoftwareWebRenderOGL
&
&
mUseWebGPU
=
=
aOther
.
mUseWebGPU
;
}
friend
struct
IPC
:
:
ParamTraits
<
CompositorOptions
>
;
private
:
bool
mUseAPZ
=
false
;
bool
mUseSoftwareWebRender
=
false
;
bool
mAllowSoftwareWebRenderD3D11
=
false
;
bool
mAllowSoftwareWebRenderOGL
=
false
;
bool
mUseWebGPU
=
false
;
bool
mInitiallyPaused
=
false
;
}
;
}
}
#
endif
