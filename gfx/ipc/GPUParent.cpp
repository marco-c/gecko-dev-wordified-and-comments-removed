#
include
"
GPUParent
.
h
"
#
include
"
gfxConfig
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
GPUProcessHost
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
ipc
/
ProcessChild
.
h
"
namespace
mozilla
{
namespace
gfx
{
using
namespace
ipc
;
GPUParent
:
:
GPUParent
(
)
{
}
GPUParent
:
:
~
GPUParent
(
)
{
}
bool
GPUParent
:
:
Init
(
base
:
:
ProcessId
aParentPid
MessageLoop
*
aIOLoop
IPC
:
:
Channel
*
aChannel
)
{
if
(
NS_WARN_IF
(
!
Open
(
aChannel
aParentPid
aIOLoop
)
)
)
{
return
false
;
}
gfxPrefs
:
:
GetSingleton
(
)
;
return
true
;
}
bool
GPUParent
:
:
RecvInit
(
nsTArray
<
GfxPrefSetting
>
&
&
prefs
)
{
for
(
auto
setting
:
prefs
)
{
gfxPrefs
:
:
Pref
*
pref
=
gfxPrefs
:
:
all
(
)
[
setting
.
index
(
)
]
;
pref
-
>
SetCachedValue
(
setting
.
value
(
)
)
;
}
return
true
;
}
bool
GPUParent
:
:
RecvUpdatePref
(
const
GfxPrefSetting
&
setting
)
{
gfxPrefs
:
:
Pref
*
pref
=
gfxPrefs
:
:
all
(
)
[
setting
.
index
(
)
]
;
pref
-
>
SetCachedValue
(
setting
.
value
(
)
)
;
return
true
;
}
void
GPUParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
if
(
AbnormalShutdown
=
=
aWhy
)
{
NS_WARNING
(
"
Shutting
down
GPU
process
early
due
to
a
crash
!
"
)
;
ProcessChild
:
:
QuickExit
(
)
;
}
#
ifndef
NS_FREE_PERMANENT_DATA
ProcessChild
:
:
QuickExit
(
)
;
#
else
XRE_ShutdownChildProcess
(
)
;
#
endif
}
}
}
