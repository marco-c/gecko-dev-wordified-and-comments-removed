#
include
"
GPUParent
.
h
"
#
include
"
gfxConfig
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
GPUProcessHost
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
ipc
/
ProcessChild
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
namespace
mozilla
{
namespace
gfx
{
using
namespace
ipc
;
using
namespace
layers
;
GPUParent
:
:
GPUParent
(
)
{
}
GPUParent
:
:
~
GPUParent
(
)
{
}
bool
GPUParent
:
:
Init
(
base
:
:
ProcessId
aParentPid
MessageLoop
*
aIOLoop
IPC
:
:
Channel
*
aChannel
)
{
if
(
NS_WARN_IF
(
!
Open
(
aChannel
aParentPid
aIOLoop
)
)
)
{
return
false
;
}
gfxPrefs
:
:
GetSingleton
(
)
;
CompositorThreadHolder
:
:
Start
(
)
;
return
true
;
}
bool
GPUParent
:
:
RecvInit
(
nsTArray
<
GfxPrefSetting
>
&
&
prefs
)
{
for
(
auto
setting
:
prefs
)
{
gfxPrefs
:
:
Pref
*
pref
=
gfxPrefs
:
:
all
(
)
[
setting
.
index
(
)
]
;
pref
-
>
SetCachedValue
(
setting
.
value
(
)
)
;
}
return
true
;
}
bool
GPUParent
:
:
RecvUpdatePref
(
const
GfxPrefSetting
&
setting
)
{
gfxPrefs
:
:
Pref
*
pref
=
gfxPrefs
:
:
all
(
)
[
setting
.
index
(
)
]
;
pref
-
>
SetCachedValue
(
setting
.
value
(
)
)
;
return
true
;
}
static
void
OpenParent
(
RefPtr
<
CompositorBridgeParent
>
aParent
Endpoint
<
PCompositorBridgeParent
>
&
&
aEndpoint
)
{
if
(
!
aParent
-
>
Bind
(
Move
(
aEndpoint
)
)
)
{
MOZ_CRASH
(
"
Failed
to
bind
compositor
"
)
;
}
}
bool
GPUParent
:
:
RecvNewWidgetCompositor
(
Endpoint
<
layers
:
:
PCompositorBridgeParent
>
&
&
aEndpoint
const
CSSToLayoutDeviceScale
&
aScale
const
bool
&
aUseExternalSurfaceSize
const
IntSize
&
aSurfaceSize
)
{
RefPtr
<
CompositorBridgeParent
>
cbp
=
new
CompositorBridgeParent
(
aScale
aUseExternalSurfaceSize
aSurfaceSize
)
;
MessageLoop
*
loop
=
CompositorThreadHolder
:
:
Loop
(
)
;
loop
-
>
PostTask
(
NewRunnableFunction
(
OpenParent
cbp
Move
(
aEndpoint
)
)
)
;
return
true
;
}
bool
GPUParent
:
:
RecvNewContentCompositorBridge
(
Endpoint
<
PCompositorBridgeParent
>
&
&
aEndpoint
)
{
return
CompositorBridgeParent
:
:
CreateForContent
(
Move
(
aEndpoint
)
)
;
}
void
GPUParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
if
(
AbnormalShutdown
=
=
aWhy
)
{
NS_WARNING
(
"
Shutting
down
GPU
process
early
due
to
a
crash
!
"
)
;
ProcessChild
:
:
QuickExit
(
)
;
}
#
ifndef
NS_FREE_PERMANENT_DATA
ProcessChild
:
:
QuickExit
(
)
;
#
endif
CompositorThreadHolder
:
:
Shutdown
(
)
;
XRE_ShutdownChildProcess
(
)
;
}
}
}
