#
ifdef
XP_WIN
#
include
"
WMF
.
h
"
#
endif
#
include
"
GPUParent
.
h
"
#
include
"
gfxConfig
.
h
"
#
include
"
gfxCrashReporterUtils
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
GLContextProvider
.
h
"
#
include
"
GPUProcessHost
.
h
"
#
include
"
GPUProcessManager
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
VideoDecoderManagerChild
.
h
"
#
include
"
mozilla
/
VideoDecoderManagerParent
.
h
"
#
include
"
mozilla
/
dom
/
MemoryReportRequest
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
image
/
ImageMemoryReporter
.
h
"
#
include
"
mozilla
/
ipc
/
CrashReporterClient
.
h
"
#
include
"
mozilla
/
ipc
/
ProcessChild
.
h
"
#
include
"
mozilla
/
layers
/
APZInputBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
APZThreadUtils
.
h
"
#
include
"
mozilla
/
layers
/
APZUtils
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositorManagerParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
layers
/
ImageBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
LayerTreeOwnerTracker
.
h
"
#
include
"
mozilla
/
layers
/
UiCompositorControllerParent
.
h
"
#
include
"
mozilla
/
layers
/
MemoryReportingMLGPU
.
h
"
#
include
"
mozilla
/
webrender
/
RenderThread
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderAPI
.
h
"
#
include
"
mozilla
/
HangDetails
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsDebugImpl
.
h
"
#
include
"
nsIGfxInfo
.
h
"
#
include
"
nsThreadManager
.
h
"
#
include
"
prenv
.
h
"
#
include
"
ProcessUtils
.
h
"
#
include
"
VRGPUChild
.
h
"
#
include
"
VRManager
.
h
"
#
include
"
VRManagerParent
.
h
"
#
include
"
VsyncBridgeParent
.
h
"
#
include
"
cairo
.
h
"
#
include
"
skia
/
include
/
core
/
SkGraphics
.
h
"
#
if
defined
(
XP_WIN
)
#
include
"
mozilla
/
gfx
/
DeviceManagerDx
.
h
"
#
include
"
mozilla
/
widget
/
WinCompositorWindowThread
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
include
<
process
.
h
>
#
include
<
dwrite
.
h
>
#
endif
#
ifdef
MOZ_WIDGET_GTK
#
include
<
gtk
/
gtk
.
h
>
#
include
"
skia
/
include
/
ports
/
SkTypeface_cairo
.
h
"
#
endif
#
ifdef
MOZ_GECKO_PROFILER
#
include
"
ChildProfilerController
.
h
"
#
endif
#
include
"
nsAppRunner
.
h
"
namespace
mozilla
{
namespace
gfx
{
using
namespace
ipc
;
using
namespace
layers
;
static
GPUParent
*
sGPUParent
;
GPUParent
:
:
GPUParent
(
)
:
mLaunchTime
(
TimeStamp
:
:
Now
(
)
)
{
sGPUParent
=
this
;
}
GPUParent
:
:
~
GPUParent
(
)
{
sGPUParent
=
nullptr
;
}
GPUParent
*
GPUParent
:
:
GetSingleton
(
)
{
return
sGPUParent
;
}
bool
GPUParent
:
:
Init
(
base
:
:
ProcessId
aParentPid
const
char
*
aParentBuildID
MessageLoop
*
aIOLoop
IPC
:
:
Channel
*
aChannel
)
{
if
(
NS_WARN_IF
(
NS_FAILED
(
nsThreadManager
:
:
get
(
)
.
Init
(
)
)
)
)
{
return
false
;
}
if
(
NS_WARN_IF
(
!
Open
(
aChannel
aParentPid
aIOLoop
)
)
)
{
return
false
;
}
nsDebugImpl
:
:
SetMultiprocessMode
(
"
GPU
"
)
;
MessageChannel
*
channel
=
GetIPCChannel
(
)
;
if
(
channel
&
&
!
channel
-
>
SendBuildIDsMatchMessage
(
aParentBuildID
)
)
{
ProcessChild
:
:
QuickExit
(
)
;
}
CrashReporterClient
:
:
InitSingleton
(
this
)
;
gfxConfig
:
:
Init
(
)
;
gfxVars
:
:
Initialize
(
)
;
gfxPlatform
:
:
InitNullMetadata
(
)
;
gfxPlatform
:
:
InitMoz2DLogging
(
)
;
mlg
:
:
InitializeMemoryReporters
(
)
;
#
if
defined
(
XP_WIN
)
DeviceManagerDx
:
:
Init
(
)
;
#
endif
if
(
NS_FAILED
(
NS_InitMinimalXPCOM
(
)
)
)
{
return
false
;
}
CompositorThreadHolder
:
:
Start
(
)
;
APZThreadUtils
:
:
SetControllerThread
(
MessageLoop
:
:
current
(
)
)
;
apz
:
:
InitializeGlobalState
(
)
;
LayerTreeOwnerTracker
:
:
Initialize
(
)
;
mozilla
:
:
ipc
:
:
SetThisProcessName
(
"
GPU
Process
"
)
;
#
ifdef
XP_WIN
wmf
:
:
MFStartup
(
)
;
#
endif
return
true
;
}
void
GPUParent
:
:
NotifyDeviceReset
(
)
{
if
(
!
NS_IsMainThread
(
)
)
{
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
gfx
:
:
GPUParent
:
:
NotifyDeviceReset
"
[
]
(
)
-
>
void
{
GPUParent
:
:
GetSingleton
(
)
-
>
NotifyDeviceReset
(
)
;
}
)
)
;
return
;
}
#
ifdef
XP_WIN
if
(
!
DeviceManagerDx
:
:
Get
(
)
-
>
MaybeResetAndReacquireDevices
(
)
)
{
return
;
}
#
endif
GPUDeviceData
data
;
RecvGetDeviceStatus
(
&
data
)
;
Unused
<
<
SendNotifyDeviceReset
(
data
)
;
}
PAPZInputBridgeParent
*
GPUParent
:
:
AllocPAPZInputBridgeParent
(
const
LayersId
&
aLayersId
)
{
APZInputBridgeParent
*
parent
=
new
APZInputBridgeParent
(
aLayersId
)
;
parent
-
>
AddRef
(
)
;
return
parent
;
}
bool
GPUParent
:
:
DeallocPAPZInputBridgeParent
(
PAPZInputBridgeParent
*
aActor
)
{
APZInputBridgeParent
*
parent
=
static_cast
<
APZInputBridgeParent
*
>
(
aActor
)
;
parent
-
>
Release
(
)
;
return
true
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvInit
(
nsTArray
<
GfxVarUpdate
>
&
&
vars
const
DevicePrefs
&
devicePrefs
nsTArray
<
LayerTreeIdMapping
>
&
&
aMappings
)
{
for
(
const
auto
&
var
:
vars
)
{
gfxVars
:
:
ApplyUpdate
(
var
)
;
}
gfxConfig
:
:
Inherit
(
Feature
:
:
HW_COMPOSITING
devicePrefs
.
hwCompositing
(
)
)
;
gfxConfig
:
:
Inherit
(
Feature
:
:
D3D11_COMPOSITING
devicePrefs
.
d3d11Compositing
(
)
)
;
gfxConfig
:
:
Inherit
(
Feature
:
:
OPENGL_COMPOSITING
devicePrefs
.
oglCompositing
(
)
)
;
gfxConfig
:
:
Inherit
(
Feature
:
:
ADVANCED_LAYERS
devicePrefs
.
advancedLayers
(
)
)
;
gfxConfig
:
:
Inherit
(
Feature
:
:
DIRECT2D
devicePrefs
.
useD2D1
(
)
)
;
{
ScopedGfxFeatureReporter
reporter
(
"
WR
"
gfxPlatform
:
:
WebRenderPrefEnabled
(
)
)
;
if
(
gfxVars
:
:
UseWebRender
(
)
)
{
reporter
.
SetSuccessful
(
)
;
}
}
for
(
const
LayerTreeIdMapping
&
map
:
aMappings
)
{
LayerTreeOwnerTracker
:
:
Get
(
)
-
>
Map
(
map
.
layersId
(
)
map
.
ownerId
(
)
)
;
}
SkGraphics
:
:
Init
(
)
;
#
if
defined
(
XP_WIN
)
if
(
gfxConfig
:
:
IsEnabled
(
Feature
:
:
D3D11_COMPOSITING
)
)
{
DeviceManagerDx
:
:
Get
(
)
-
>
CreateCompositorDevices
(
)
;
}
if
(
gfxVars
:
:
UseWebRender
(
)
)
{
DeviceManagerDx
:
:
Get
(
)
-
>
CreateDirectCompositionDevice
(
)
;
nsCOMPtr
<
nsIGfxInfo
>
gfxInfo
=
services
:
:
GetGfxInfo
(
)
;
Unused
<
<
gfxInfo
;
Factory
:
:
EnsureDWriteFactory
(
)
;
}
#
endif
#
if
defined
(
MOZ_WIDGET_GTK
)
char
*
display_name
=
PR_GetEnv
(
"
MOZ_GDK_DISPLAY
"
)
;
if
(
!
display_name
)
{
bool
waylandDisabled
=
true
;
#
ifdef
MOZ_WAYLAND
waylandDisabled
=
IsWaylandDisabled
(
)
;
#
endif
if
(
waylandDisabled
)
{
display_name
=
PR_GetEnv
(
"
DISPLAY
"
)
;
}
}
if
(
display_name
)
{
int
argc
=
3
;
char
option_name
[
]
=
"
-
-
display
"
;
char
*
argv
[
]
=
{
nullptr
option_name
display_name
nullptr
}
;
char
*
*
argvp
=
argv
;
gtk_init
(
&
argc
&
argvp
)
;
}
else
{
gtk_init
(
nullptr
nullptr
)
;
}
if
(
gfxVars
:
:
UseWebRender
(
)
)
{
FT_Library
library
=
Factory
:
:
NewFTLibrary
(
)
;
MOZ_ASSERT
(
library
)
;
Factory
:
:
SetFTLibrary
(
library
)
;
SkInitCairoFT
(
true
)
;
}
#
endif
if
(
gfxVars
:
:
UseWebRender
(
)
)
{
wr
:
:
RenderThread
:
:
Start
(
)
;
image
:
:
ImageMemoryReporter
:
:
InitForWebRender
(
)
;
}
#
ifdef
XP_WIN
else
{
if
(
StaticPrefs
:
:
Direct3D11UseDoubleBuffering
(
)
&
&
IsWin10OrLater
(
)
)
{
widget
:
:
WinCompositorWindowThread
:
:
Start
(
)
;
}
}
#
endif
VRManager
:
:
ManagerInit
(
)
;
GPUDeviceData
data
;
RecvGetDeviceStatus
(
&
data
)
;
Unused
<
<
SendInitComplete
(
data
)
;
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
GPU_PROCESS_INITIALIZATION_TIME_MS
mLaunchTime
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvInitCompositorManager
(
Endpoint
<
PCompositorManagerParent
>
&
&
aEndpoint
)
{
CompositorManagerParent
:
:
Create
(
std
:
:
move
(
aEndpoint
)
true
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvInitVsyncBridge
(
Endpoint
<
PVsyncBridgeParent
>
&
&
aVsyncEndpoint
)
{
mVsyncBridge
=
VsyncBridgeParent
:
:
Start
(
std
:
:
move
(
aVsyncEndpoint
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvInitImageBridge
(
Endpoint
<
PImageBridgeParent
>
&
&
aEndpoint
)
{
ImageBridgeParent
:
:
CreateForGPUProcess
(
std
:
:
move
(
aEndpoint
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvInitVRManager
(
Endpoint
<
PVRManagerParent
>
&
&
aEndpoint
)
{
VRManagerParent
:
:
CreateForGPUProcess
(
std
:
:
move
(
aEndpoint
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvInitVR
(
Endpoint
<
PVRGPUChild
>
&
&
aEndpoint
)
{
gfx
:
:
VRGPUChild
:
:
InitForGPUProcess
(
std
:
:
move
(
aEndpoint
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvInitUiCompositorController
(
const
LayersId
&
aRootLayerTreeId
Endpoint
<
PUiCompositorControllerParent
>
&
&
aEndpoint
)
{
UiCompositorControllerParent
:
:
Start
(
aRootLayerTreeId
std
:
:
move
(
aEndpoint
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvInitProfiler
(
Endpoint
<
PProfilerChild
>
&
&
aEndpoint
)
{
#
ifdef
MOZ_GECKO_PROFILER
mProfilerController
=
ChildProfilerController
:
:
Create
(
std
:
:
move
(
aEndpoint
)
)
;
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvUpdateVar
(
const
GfxVarUpdate
&
aUpdate
)
{
gfxVars
:
:
ApplyUpdate
(
aUpdate
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvPreferenceUpdate
(
const
Pref
&
aPref
)
{
Preferences
:
:
SetPreference
(
aPref
)
;
return
IPC_OK
(
)
;
}
static
void
CopyFeatureChange
(
Feature
aFeature
Maybe
<
FeatureFailure
>
*
aOut
)
{
FeatureState
&
feature
=
gfxConfig
:
:
GetFeature
(
aFeature
)
;
if
(
feature
.
DisabledByDefault
(
)
|
|
feature
.
IsEnabled
(
)
)
{
*
aOut
=
Nothing
(
)
;
return
;
}
MOZ_ASSERT
(
!
feature
.
IsEnabled
(
)
)
;
nsCString
message
;
message
.
AssignASCII
(
feature
.
GetFailureMessage
(
)
)
;
*
aOut
=
Some
(
FeatureFailure
(
feature
.
GetValue
(
)
message
feature
.
GetFailureId
(
)
)
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvGetDeviceStatus
(
GPUDeviceData
*
aOut
)
{
CopyFeatureChange
(
Feature
:
:
D3D11_COMPOSITING
&
aOut
-
>
d3d11Compositing
(
)
)
;
CopyFeatureChange
(
Feature
:
:
OPENGL_COMPOSITING
&
aOut
-
>
oglCompositing
(
)
)
;
CopyFeatureChange
(
Feature
:
:
ADVANCED_LAYERS
&
aOut
-
>
advancedLayers
(
)
)
;
#
if
defined
(
XP_WIN
)
if
(
DeviceManagerDx
*
dm
=
DeviceManagerDx
:
:
Get
(
)
)
{
D3D11DeviceStatus
deviceStatus
;
dm
-
>
ExportDeviceInfo
(
&
deviceStatus
)
;
aOut
-
>
gpuDevice
(
)
=
Some
(
deviceStatus
)
;
}
#
else
aOut
-
>
gpuDevice
(
)
=
Nothing
(
)
;
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvSimulateDeviceReset
(
GPUDeviceData
*
aOut
)
{
#
if
defined
(
XP_WIN
)
DeviceManagerDx
:
:
Get
(
)
-
>
ForceDeviceReset
(
ForcedDeviceResetReason
:
:
COMPOSITOR_UPDATED
)
;
DeviceManagerDx
:
:
Get
(
)
-
>
MaybeResetAndReacquireDevices
(
)
;
if
(
gfxVars
:
:
UseWebRender
(
)
)
{
wr
:
:
RenderThread
:
:
Get
(
)
-
>
SimulateDeviceReset
(
)
;
}
#
endif
RecvGetDeviceStatus
(
aOut
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvNewContentCompositorManager
(
Endpoint
<
PCompositorManagerParent
>
&
&
aEndpoint
)
{
CompositorManagerParent
:
:
Create
(
std
:
:
move
(
aEndpoint
)
false
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvNewContentImageBridge
(
Endpoint
<
PImageBridgeParent
>
&
&
aEndpoint
)
{
if
(
!
ImageBridgeParent
:
:
CreateForContent
(
std
:
:
move
(
aEndpoint
)
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvNewContentVRManager
(
Endpoint
<
PVRManagerParent
>
&
&
aEndpoint
)
{
if
(
!
VRManagerParent
:
:
CreateForContent
(
std
:
:
move
(
aEndpoint
)
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvNewContentVideoDecoderManager
(
Endpoint
<
PVideoDecoderManagerParent
>
&
&
aEndpoint
)
{
if
(
!
VideoDecoderManagerParent
:
:
CreateForContent
(
std
:
:
move
(
aEndpoint
)
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvAddLayerTreeIdMapping
(
const
LayerTreeIdMapping
&
aMapping
)
{
LayerTreeOwnerTracker
:
:
Get
(
)
-
>
Map
(
aMapping
.
layersId
(
)
aMapping
.
ownerId
(
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvRemoveLayerTreeIdMapping
(
const
LayerTreeIdMapping
&
aMapping
)
{
LayerTreeOwnerTracker
:
:
Get
(
)
-
>
Unmap
(
aMapping
.
layersId
(
)
aMapping
.
ownerId
(
)
)
;
CompositorBridgeParent
:
:
DeallocateLayerTreeId
(
aMapping
.
layersId
(
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvNotifyGpuObservers
(
const
nsCString
&
aTopic
)
{
nsCOMPtr
<
nsIObserverService
>
obsSvc
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
MOZ_ASSERT
(
obsSvc
)
;
if
(
obsSvc
)
{
obsSvc
-
>
NotifyObservers
(
nullptr
aTopic
.
get
(
)
nullptr
)
;
}
return
IPC_OK
(
)
;
}
void
GPUParent
:
:
GetGPUProcessName
(
nsACString
&
aStr
)
{
auto
processType
=
XRE_GetProcessType
(
)
;
unsigned
pid
=
0
;
if
(
processType
=
=
GeckoProcessType_GPU
)
{
pid
=
getpid
(
)
;
}
else
{
MOZ_DIAGNOSTIC_ASSERT
(
processType
=
=
GeckoProcessType_Default
)
;
pid
=
GPUProcessManager
:
:
Get
(
)
-
>
GPUProcessPid
(
)
;
}
nsPrintfCString
processName
(
"
GPU
(
pid
%
u
)
"
pid
)
;
aStr
.
Assign
(
processName
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvRequestMemoryReport
(
const
uint32_t
&
aGeneration
const
bool
&
aAnonymize
const
bool
&
aMinimizeMemoryUsage
const
Maybe
<
FileDescriptor
>
&
aDMDFile
)
{
nsAutoCString
processName
;
GetGPUProcessName
(
processName
)
;
mozilla
:
:
dom
:
:
MemoryReportRequestClient
:
:
Start
(
aGeneration
aAnonymize
aMinimizeMemoryUsage
aDMDFile
processName
[
&
]
(
const
MemoryReport
&
aReport
)
{
Unused
<
<
GetSingleton
(
)
-
>
SendAddMemoryReport
(
aReport
)
;
}
[
&
]
(
const
uint32_t
&
aGeneration
)
{
return
GetSingleton
(
)
-
>
SendFinishMemoryReport
(
aGeneration
)
;
}
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GPUParent
:
:
RecvShutdownVR
(
)
{
if
(
StaticPrefs
:
:
VRProcessEnabled
(
)
)
{
VRGPUChild
:
:
Shutdown
(
)
;
}
return
IPC_OK
(
)
;
}
void
GPUParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
if
(
AbnormalShutdown
=
=
aWhy
)
{
NS_WARNING
(
"
Shutting
down
GPU
process
early
due
to
a
crash
!
"
)
;
ProcessChild
:
:
QuickExit
(
)
;
}
#
ifdef
XP_WIN
wmf
:
:
MFShutdown
(
)
;
#
endif
#
ifndef
NS_FREE_PERMANENT_DATA
ProcessChild
:
:
QuickExit
(
)
;
#
endif
#
ifdef
MOZ_GECKO_PROFILER
if
(
mProfilerController
)
{
mProfilerController
-
>
Shutdown
(
)
;
mProfilerController
=
nullptr
;
}
#
endif
if
(
mVsyncBridge
)
{
mVsyncBridge
-
>
Shutdown
(
)
;
mVsyncBridge
=
nullptr
;
}
VideoDecoderManagerParent
:
:
ShutdownVideoBridge
(
)
;
CompositorThreadHolder
:
:
Shutdown
(
)
;
if
(
wr
:
:
RenderThread
:
:
Get
(
)
)
{
wr
:
:
RenderThread
:
:
ShutDown
(
)
;
}
#
ifdef
XP_WIN
if
(
widget
:
:
WinCompositorWindowThread
:
:
Get
(
)
)
{
widget
:
:
WinCompositorWindowThread
:
:
ShutDown
(
)
;
}
#
endif
image
:
:
ImageMemoryReporter
:
:
ShutdownForWebRender
(
)
;
gl
:
:
GLContextProvider
:
:
Shutdown
(
)
;
#
if
defined
(
XP_WIN
)
gl
:
:
GLContextProviderEGL
:
:
Shutdown
(
)
;
#
endif
Factory
:
:
ShutDown
(
)
;
#
ifdef
NS_FREE_PERMANENT_DATA
SkGraphics
:
:
PurgeFontCache
(
)
;
cairo_debug_reset_static_data
(
)
;
#
endif
#
if
defined
(
XP_WIN
)
DeviceManagerDx
:
:
Shutdown
(
)
;
#
endif
LayerTreeOwnerTracker
:
:
Shutdown
(
)
;
gfxVars
:
:
Shutdown
(
)
;
gfxConfig
:
:
Shutdown
(
)
;
CrashReporterClient
:
:
DestroySingleton
(
)
;
XRE_ShutdownChildProcess
(
)
;
}
}
}
