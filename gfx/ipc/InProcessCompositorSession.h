#
ifndef
_include_mozilla_gfx_ipc_InProcessCompositorSession_h_
#
define
_include_mozilla_gfx_ipc_InProcessCompositorSession_h_
#
include
"
CompositorSession
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
Units
.
h
"
class
nsIWidget
;
namespace
mozilla
{
namespace
layers
{
class
CompositorOptions
;
class
WebRenderLayerManager
;
class
InProcessCompositorSession
final
:
public
CompositorSession
{
public
:
static
RefPtr
<
InProcessCompositorSession
>
Create
(
nsBaseWidget
*
baseWidget
WebRenderLayerManager
*
aLayerManager
const
LayersId
&
aRootLayerTreeId
CSSToLayoutDeviceScale
aScale
const
CompositorOptions
&
aOptions
bool
aUseExternalSurfaceSize
const
gfx
:
:
IntSize
&
aSurfaceSize
uint32_t
aNamespace
uint64_t
aInnerWindowId
)
;
CompositorBridgeParent
*
GetInProcessBridge
(
)
const
override
;
void
SetContentController
(
GeckoContentController
*
aController
)
override
;
nsIWidget
*
GetWidget
(
)
const
;
RefPtr
<
IAPZCTreeManager
>
GetAPZCTreeManager
(
)
const
override
;
void
Shutdown
(
)
override
;
void
NotifySessionLost
(
)
;
private
:
InProcessCompositorSession
(
nsBaseWidget
*
aWidget
widget
:
:
CompositorWidget
*
aCompositorWidget
CompositorBridgeChild
*
aChild
CompositorBridgeParent
*
aParent
)
;
private
:
RefPtr
<
CompositorBridgeParent
>
mCompositorBridgeParent
;
RefPtr
<
CompositorWidget
>
mCompositorWidget
;
}
;
}
}
#
endif
