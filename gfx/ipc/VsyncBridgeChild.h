#
ifndef
include_gfx_ipc_VsyncBridgeChild_h
#
define
include_gfx_ipc_VsyncBridgeChild_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
PVsyncBridgeChild
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
VsyncIOThreadHolder
;
class
VsyncBridgeChild
final
:
public
PVsyncBridgeChild
{
friend
class
NotifyVsyncTask
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VsyncBridgeChild
final
)
static
RefPtr
<
VsyncBridgeChild
>
Create
(
RefPtr
<
VsyncIOThreadHolder
>
aThread
const
uint64_t
&
aProcessToken
Endpoint
<
PVsyncBridgeChild
>
&
&
aEndpoint
)
;
void
Close
(
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
void
ProcessingError
(
Result
aCode
const
char
*
aReason
)
override
;
void
NotifyVsync
(
const
VsyncEvent
&
aVsync
const
layers
:
:
LayersId
&
aLayersId
)
;
void
HandleFatalError
(
const
char
*
aMsg
)
const
override
;
private
:
VsyncBridgeChild
(
RefPtr
<
VsyncIOThreadHolder
>
const
uint64_t
&
aProcessToken
)
;
virtual
~
VsyncBridgeChild
(
)
;
void
Open
(
Endpoint
<
PVsyncBridgeChild
>
&
&
aEndpoint
)
;
void
NotifyVsyncImpl
(
const
VsyncEvent
&
aVsync
const
layers
:
:
LayersId
&
aLayersId
)
;
bool
IsOnVsyncIOThread
(
)
const
;
private
:
RefPtr
<
VsyncIOThreadHolder
>
mThread
;
uint64_t
mProcessToken
;
}
;
}
}
#
endif
