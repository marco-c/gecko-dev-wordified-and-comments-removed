#
ifndef
_include_gfx_ipc_FileHandleWrapper_h__
#
define
_include_gfx_ipc_FileHandleWrapper_h__
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
namespace
ipc
{
template
<
typename
T
>
struct
IPDLParamTraits
;
}
namespace
gfx
{
class
FileHandleWrapper
{
friend
struct
mozilla
:
:
ipc
:
:
IPDLParamTraits
<
gfx
:
:
FileHandleWrapper
*
>
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
FileHandleWrapper
)
;
explicit
FileHandleWrapper
(
mozilla
:
:
UniqueFileHandle
&
&
aHandle
)
;
mozilla
:
:
detail
:
:
FileHandleType
GetHandle
(
)
;
protected
:
~
FileHandleWrapper
(
)
;
const
mozilla
:
:
UniqueFileHandle
mHandle
;
}
;
struct
FenceInfo
{
FenceInfo
(
)
=
default
;
FenceInfo
(
FileHandleWrapper
*
aFenceHandle
uint64_t
aFenceValue
)
:
mFenceHandle
(
aFenceHandle
)
mFenceValue
(
aFenceValue
)
{
}
bool
operator
=
=
(
const
FenceInfo
&
aOther
)
const
{
return
mFenceHandle
=
=
aOther
.
mFenceHandle
&
&
mFenceValue
=
=
aOther
.
mFenceValue
;
}
RefPtr
<
FileHandleWrapper
>
mFenceHandle
;
uint64_t
mFenceValue
=
0
;
}
;
}
}
#
endif
