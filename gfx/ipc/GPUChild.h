#
ifndef
_include_mozilla_gfx_ipc_GPUChild_h_
#
define
_include_mozilla_gfx_ipc_GPUChild_h_
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
gfx
/
PGPUChild
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVarReceiver
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
CrashReporterHost
;
}
namespace
dom
{
class
MemoryReportRequestHost
;
}
namespace
gfx
{
class
GPUProcessHost
;
class
GPUChild
final
:
public
PGPUChild
public
gfxVarReceiver
{
typedef
mozilla
:
:
dom
:
:
MemoryReportRequestHost
MemoryReportRequestHost
;
public
:
explicit
GPUChild
(
GPUProcessHost
*
aHost
)
;
~
GPUChild
(
)
;
void
Init
(
)
;
bool
EnsureGPUReady
(
)
;
base
:
:
ProcessHandle
GetChildProcessHandle
(
)
;
PAPZInputBridgeChild
*
AllocPAPZInputBridgeChild
(
const
LayersId
&
aLayersId
)
;
bool
DeallocPAPZInputBridgeChild
(
PAPZInputBridgeChild
*
aActor
)
;
void
OnVarChanged
(
const
GfxVarUpdate
&
aVar
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitComplete
(
const
GPUDeviceData
&
aData
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReportCheckerboard
(
const
uint32_t
&
aSeverity
const
nsCString
&
aLog
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitCrashReporter
(
Shmem
&
&
shmem
const
NativeThreadId
&
aThreadId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCreateVRProcess
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvShutdownVRProcess
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAccumulateChildHistograms
(
InfallibleTArray
<
HistogramAccumulation
>
&
&
aAccumulations
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAccumulateChildKeyedHistograms
(
InfallibleTArray
<
KeyedHistogramAccumulation
>
&
&
aAccumulations
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateChildScalars
(
InfallibleTArray
<
ScalarAction
>
&
&
aScalarActions
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateChildKeyedScalars
(
InfallibleTArray
<
KeyedScalarAction
>
&
&
aScalarActions
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRecordChildEvents
(
nsTArray
<
ChildEventData
>
&
&
events
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRecordDiscardedData
(
const
DiscardedData
&
aDiscardedData
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGraphicsError
(
const
nsCString
&
aError
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyUiObservers
(
const
nsCString
&
aTopic
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyDeviceReset
(
const
GPUDeviceData
&
aData
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAddMemoryReport
(
const
MemoryReport
&
aReport
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvFinishMemoryReport
(
const
uint32_t
&
aGeneration
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateFeature
(
const
Feature
&
aFeature
const
FeatureFailure
&
aChange
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUsedFallback
(
const
Fallback
&
aFallback
const
nsCString
&
aMessage
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvBHRThreadHang
(
const
HangDetails
&
aDetails
)
;
bool
SendRequestMemoryReport
(
const
uint32_t
&
aGeneration
const
bool
&
aAnonymize
const
bool
&
aMinimizeMemoryUsage
const
MaybeFileDesc
&
aDMDFile
)
;
static
void
Destroy
(
UniquePtr
<
GPUChild
>
&
&
aChild
)
;
private
:
GPUProcessHost
*
mHost
;
UniquePtr
<
ipc
:
:
CrashReporterHost
>
mCrashReporter
;
UniquePtr
<
MemoryReportRequestHost
>
mMemoryReportRequest
;
bool
mGPUReady
;
}
;
}
}
#
endif
