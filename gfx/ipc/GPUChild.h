#
ifndef
_include_mozilla_gfx_ipc_GPUChild_h_
#
define
_include_mozilla_gfx_ipc_GPUChild_h_
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
gfx
/
PGPUChild
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVarReceiver
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
CrashReporterHost
;
}
namespace
gfx
{
class
GPUProcessHost
;
class
GPUChild
final
:
public
PGPUChild
public
gfxVarReceiver
{
public
:
explicit
GPUChild
(
GPUProcessHost
*
aHost
)
;
~
GPUChild
(
)
;
void
Init
(
)
;
void
EnsureGPUReady
(
)
;
void
OnVarChanged
(
const
GfxVarUpdate
&
aVar
)
override
;
bool
RecvInitComplete
(
const
GPUDeviceData
&
aData
)
override
;
bool
RecvReportCheckerboard
(
const
uint32_t
&
aSeverity
const
nsCString
&
aLog
)
override
;
bool
RecvInitCrashReporter
(
Shmem
&
&
shmem
)
override
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
bool
RecvGraphicsError
(
const
nsCString
&
aError
)
override
;
static
void
Destroy
(
UniquePtr
<
GPUChild
>
&
&
aChild
)
;
private
:
GPUProcessHost
*
mHost
;
UniquePtr
<
ipc
:
:
CrashReporterHost
>
mCrashReporter
;
bool
mGPUReady
;
}
;
}
}
#
endif
