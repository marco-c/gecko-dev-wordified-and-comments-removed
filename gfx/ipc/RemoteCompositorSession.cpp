#
include
"
RemoteCompositorSession
.
h
"
#
include
"
mozilla
/
layers
/
APZChild
.
h
"
#
include
"
mozilla
/
layers
/
APZCTreeManagerChild
.
h
"
#
include
"
nsBaseWidget
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
gfx
;
using
namespace
widget
;
RemoteCompositorSession
:
:
RemoteCompositorSession
(
nsBaseWidget
*
aWidget
CompositorBridgeChild
*
aChild
CompositorWidgetDelegate
*
aWidgetDelegate
APZCTreeManagerChild
*
aAPZ
const
uint64_t
&
aRootLayerTreeId
)
:
CompositorSession
(
aWidgetDelegate
aChild
aRootLayerTreeId
)
mWidget
(
aWidget
)
mAPZ
(
aAPZ
)
{
GPUProcessManager
:
:
Get
(
)
-
>
RegisterSession
(
this
)
;
}
RemoteCompositorSession
:
:
~
RemoteCompositorSession
(
)
{
MOZ_ASSERT
(
!
mCompositorBridgeChild
)
;
}
void
RemoteCompositorSession
:
:
NotifySessionLost
(
)
{
MOZ_ASSERT
(
mWidget
)
;
mWidget
-
>
NotifyRemoteCompositorSessionLost
(
this
)
;
}
CompositorBridgeParent
*
RemoteCompositorSession
:
:
GetInProcessBridge
(
)
const
{
return
nullptr
;
}
void
RemoteCompositorSession
:
:
SetContentController
(
GeckoContentController
*
aController
)
{
mCompositorBridgeChild
-
>
SendPAPZConstructor
(
new
APZChild
(
aController
)
0
)
;
}
RefPtr
<
IAPZCTreeManager
>
RemoteCompositorSession
:
:
GetAPZCTreeManager
(
)
const
{
return
mAPZ
;
}
void
RemoteCompositorSession
:
:
Shutdown
(
)
{
mCompositorBridgeChild
-
>
Destroy
(
)
;
mCompositorBridgeChild
=
nullptr
;
mCompositorWidgetDelegate
=
nullptr
;
mWidget
=
nullptr
;
GPUProcessManager
:
:
Get
(
)
-
>
UnregisterSession
(
this
)
;
}
}
}
