#
ifndef
HB_OT_COLOR_COLR_TABLE_HH
#
define
HB_OT_COLOR_COLR_TABLE_HH
#
include
"
hb
-
open
-
type
-
private
.
hh
"
#
define
HB_OT_TAG_COLR
HB_TAG
(
'
C
'
'
O
'
'
L
'
'
R
'
)
namespace
OT
{
struct
LayerRecord
{
friend
struct
COLR
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
)
;
}
protected
:
GlyphID
glyphid
;
HBUINT16
colorIdx
;
public
:
DEFINE_SIZE_STATIC
(
4
)
;
}
;
struct
BaseGlyphRecord
{
friend
struct
COLR
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
)
)
;
}
inline
int
cmp
(
hb_codepoint_t
g
)
const
{
return
g
<
glyphid
?
-
1
:
g
>
glyphid
?
1
:
0
;
}
protected
:
GlyphID
glyphid
;
HBUINT16
firstLayerIdx
;
HBUINT16
numLayers
;
public
:
DEFINE_SIZE_STATIC
(
6
)
;
}
;
static
int
compare_bgr
(
const
void
*
pa
const
void
*
pb
)
{
const
hb_codepoint_t
*
a
=
(
const
hb_codepoint_t
*
)
pa
;
const
BaseGlyphRecord
*
b
=
(
const
BaseGlyphRecord
*
)
pb
;
return
b
-
>
cmp
(
*
a
)
;
}
struct
COLR
{
static
const
hb_tag_t
tableTag
=
HB_OT_TAG_COLR
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
&
&
(
this
+
baseGlyphsZ
)
.
sanitize
(
c
numBaseGlyphs
)
&
&
(
this
+
layersZ
)
.
sanitize
(
c
numLayers
)
)
)
;
}
inline
bool
get_base_glyph_record
(
hb_codepoint_t
glyph_id
unsigned
int
*
first_layer
unsigned
int
*
num_layers
)
const
{
const
BaseGlyphRecord
*
record
;
record
=
(
BaseGlyphRecord
*
)
bsearch
(
&
glyph_id
&
(
this
+
baseGlyphsZ
)
numBaseGlyphs
sizeof
(
BaseGlyphRecord
)
compare_bgr
)
;
if
(
unlikely
(
!
record
)
)
return
false
;
*
first_layer
=
record
-
>
firstLayerIdx
;
*
num_layers
=
record
-
>
numLayers
;
return
true
;
}
inline
bool
get_layer_record
(
unsigned
int
record
hb_codepoint_t
*
glyph_id
unsigned
int
*
palette_index
)
const
{
if
(
unlikely
(
record
>
=
numLayers
)
)
{
*
glyph_id
=
0
;
*
palette_index
=
0xFFFF
;
return
false
;
}
const
LayerRecord
&
layer
=
(
this
+
layersZ
)
[
record
]
;
*
glyph_id
=
layer
.
glyphid
;
*
palette_index
=
layer
.
colorIdx
;
return
true
;
}
protected
:
HBUINT16
version
;
HBUINT16
numBaseGlyphs
;
LOffsetTo
<
UnsizedArrayOf
<
BaseGlyphRecord
>
>
baseGlyphsZ
;
LOffsetTo
<
UnsizedArrayOf
<
LayerRecord
>
>
layersZ
;
HBUINT16
numLayers
;
public
:
DEFINE_SIZE_STATIC
(
14
)
;
}
;
}
#
endif
