#
ifndef
HB_OT_COLOR_COLR_TABLE_HH
#
define
HB_OT_COLOR_COLR_TABLE_HH
#
include
"
hb
-
open
-
type
.
hh
"
#
define
HB_OT_TAG_COLR
HB_TAG
(
'
C
'
'
O
'
'
L
'
'
R
'
)
namespace
OT
{
struct
LayerRecord
{
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
)
;
}
public
:
GlyphID
glyphId
;
Index
colorIdx
;
public
:
DEFINE_SIZE_STATIC
(
4
)
;
}
;
struct
BaseGlyphRecord
{
int
cmp
(
hb_codepoint_t
g
)
const
{
return
g
<
glyphId
?
-
1
:
g
>
glyphId
?
1
:
0
;
}
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
)
)
;
}
public
:
GlyphID
glyphId
;
HBUINT16
firstLayerIdx
;
HBUINT16
numLayers
;
public
:
DEFINE_SIZE_STATIC
(
6
)
;
}
;
struct
COLR
{
enum
{
tableTag
=
HB_OT_TAG_COLR
}
;
bool
has_data
(
)
const
{
return
numBaseGlyphs
;
}
unsigned
int
get_glyph_layers
(
hb_codepoint_t
glyph
unsigned
int
start_offset
unsigned
int
*
count
hb_ot_color_layer_t
*
layers
)
const
{
const
BaseGlyphRecord
&
record
=
(
this
+
baseGlyphsZ
)
.
bsearch
(
numBaseGlyphs
glyph
)
;
hb_array_t
<
const
LayerRecord
>
all_layers
(
(
this
+
layersZ
)
.
arrayZ
numLayers
)
;
hb_array_t
<
const
LayerRecord
>
glyph_layers
=
all_layers
.
sub_array
(
record
.
firstLayerIdx
record
.
numLayers
)
;
if
(
count
)
{
hb_array_t
<
const
LayerRecord
>
segment_layers
=
glyph_layers
.
sub_array
(
start_offset
*
count
)
;
*
count
=
segment_layers
.
len
;
for
(
unsigned
int
i
=
0
;
i
<
segment_layers
.
len
;
i
+
+
)
{
layers
[
i
]
.
glyph
=
segment_layers
.
arrayZ
[
i
]
.
glyphId
;
layers
[
i
]
.
color_index
=
segment_layers
.
arrayZ
[
i
]
.
colorIdx
;
}
}
return
glyph_layers
.
len
;
}
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
&
&
(
this
+
baseGlyphsZ
)
.
sanitize
(
c
numBaseGlyphs
)
&
&
(
this
+
layersZ
)
.
sanitize
(
c
numLayers
)
)
)
;
}
protected
:
HBUINT16
version
;
HBUINT16
numBaseGlyphs
;
LOffsetTo
<
SortedUnsizedArrayOf
<
BaseGlyphRecord
>
false
>
baseGlyphsZ
;
LOffsetTo
<
UnsizedArrayOf
<
LayerRecord
>
false
>
layersZ
;
HBUINT16
numLayers
;
public
:
DEFINE_SIZE_STATIC
(
14
)
;
}
;
}
#
endif
