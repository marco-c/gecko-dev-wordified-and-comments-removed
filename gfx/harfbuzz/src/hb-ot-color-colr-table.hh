#
ifndef
HB_OT_COLOR_COLR_TABLE_HH
#
define
HB_OT_COLOR_COLR_TABLE_HH
#
include
"
hb
-
open
-
type
-
private
.
hh
"
#
define
HB_OT_TAG_COLR
HB_TAG
(
'
C
'
'
O
'
'
L
'
'
R
'
)
namespace
OT
{
struct
LayerRecord
{
friend
struct
COLR
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
)
;
}
protected
:
GlyphID
gID
;
HBUINT16
paletteIndex
;
public
:
DEFINE_SIZE_STATIC
(
4
)
;
}
;
struct
BaseGlyphRecord
{
friend
struct
COLR
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
)
;
}
protected
:
GlyphID
gID
;
HBUINT16
firstLayerIndex
;
HBUINT16
numLayers
;
public
:
DEFINE_SIZE_STATIC
(
6
)
;
}
;
struct
COLR
{
static
const
hb_tag_t
tableTag
=
HB_OT_TAG_COLR
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
if
(
!
(
c
-
>
check_struct
(
this
)
&
&
c
-
>
check_array
(
(
const
void
*
)
&
layerRecordsOffsetZ
sizeof
(
LayerRecord
)
numLayerRecords
)
&
&
c
-
>
check_array
(
(
const
void
*
)
&
baseGlyphRecordsZ
sizeof
(
BaseGlyphRecord
)
numBaseGlyphRecords
)
)
)
return_trace
(
false
)
;
const
BaseGlyphRecord
*
base_glyph_records
=
&
baseGlyphRecordsZ
(
this
)
;
for
(
unsigned
int
i
=
0
;
i
<
numBaseGlyphRecords
;
+
+
i
)
if
(
base_glyph_records
[
i
]
.
firstLayerIndex
+
base_glyph_records
[
i
]
.
numLayers
>
numLayerRecords
)
return_trace
(
false
)
;
return_trace
(
true
)
;
}
inline
bool
get_base_glyph_record
(
hb_codepoint_t
glyph_id
unsigned
int
&
first_layer
unsigned
int
&
num_layers
)
const
{
const
BaseGlyphRecord
*
base_glyph_records
=
&
baseGlyphRecordsZ
(
this
)
;
unsigned
int
min
=
0
max
=
numBaseGlyphRecords
-
1
;
while
(
min
<
=
max
)
{
unsigned
int
mid
=
(
min
+
max
)
/
2
;
hb_codepoint_t
gID
=
base_glyph_records
[
mid
]
.
gID
;
if
(
gID
>
glyph_id
)
max
=
mid
-
1
;
else
if
(
gID
<
glyph_id
)
min
=
mid
+
1
;
else
{
first_layer
=
base_glyph_records
[
mid
]
.
firstLayerIndex
;
num_layers
=
base_glyph_records
[
mid
]
.
numLayers
;
return
true
;
}
}
return
false
;
}
inline
void
get_layer_record
(
int
layer
hb_codepoint_t
&
glyph_id
unsigned
int
&
palette_index
)
const
{
const
LayerRecord
*
records
=
&
layerRecordsOffsetZ
(
this
)
;
glyph_id
=
records
[
layer
]
.
gID
;
palette_index
=
records
[
layer
]
.
paletteIndex
;
}
protected
:
HBUINT16
version
;
HBUINT16
numBaseGlyphRecords
;
LOffsetTo
<
BaseGlyphRecord
>
baseGlyphRecordsZ
;
LOffsetTo
<
LayerRecord
>
layerRecordsOffsetZ
;
HBUINT16
numLayerRecords
;
public
:
DEFINE_SIZE_STATIC
(
14
)
;
}
;
}
#
endif
