#
ifndef
HB_BLOB_HH
#
define
HB_BLOB_HH
#
include
"
hb
.
hh
"
struct
hb_blob_t
{
inline
void
fini_shallow
(
void
)
{
destroy_user_data
(
)
;
}
inline
void
destroy_user_data
(
void
)
{
if
(
destroy
)
{
destroy
(
user_data
)
;
user_data
=
nullptr
;
destroy
=
nullptr
;
}
}
HB_INTERNAL
bool
try_make_writable
(
void
)
;
HB_INTERNAL
bool
try_make_writable_inplace
(
void
)
;
HB_INTERNAL
bool
try_make_writable_inplace_unix
(
void
)
;
template
<
typename
Type
>
inline
const
Type
*
as
(
void
)
const
{
return
unlikely
(
!
data
)
?
&
Null
(
Type
)
:
reinterpret_cast
<
const
Type
*
>
(
data
)
;
}
inline
hb_bytes_t
as_bytes
(
void
)
const
{
return
hb_bytes_t
(
data
length
)
;
}
public
:
hb_object_header_t
header
;
ASSERT_POD
(
)
;
bool
immutable
;
const
char
*
data
;
unsigned
int
length
;
hb_memory_mode_t
mode
;
void
*
user_data
;
hb_destroy_func_t
destroy
;
}
;
DECLARE_NULL_INSTANCE
(
hb_blob_t
)
;
#
endif
