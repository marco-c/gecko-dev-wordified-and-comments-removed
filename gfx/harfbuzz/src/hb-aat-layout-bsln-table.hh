#
ifndef
HB_AAT_LAYOUT_BSLN_TABLE_HH
#
define
HB_AAT_LAYOUT_BSLN_TABLE_HH
#
include
"
hb
-
aat
-
layout
-
common
-
private
.
hh
"
#
define
HB_AAT_TAG_bsln
HB_TAG
(
'
b
'
'
s
'
'
l
'
'
n
'
)
namespace
AAT
{
struct
BaselineTableFormat0Part
{
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
)
)
;
}
protected
:
HBINT16
deltas
[
32
]
;
public
:
DEFINE_SIZE_STATIC
(
64
)
;
}
;
struct
BaselineTableFormat1Part
{
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
&
&
lookupTable
.
sanitize
(
c
)
)
)
;
}
protected
:
HBINT16
deltas
[
32
]
;
Lookup
<
HBUINT16
>
lookupTable
;
public
:
DEFINE_SIZE_MIN
(
66
)
;
}
;
struct
BaselineTableFormat2Part
{
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
)
)
;
}
protected
:
GlyphID
stdGlyph
;
HBUINT16
ctlPoints
[
32
]
;
public
:
DEFINE_SIZE_STATIC
(
66
)
;
}
;
struct
BaselineTableFormat3Part
{
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
&
&
lookupTable
.
sanitize
(
c
)
)
;
}
protected
:
GlyphID
stdGlyph
;
HBUINT16
ctlPoints
[
32
]
;
Lookup
<
HBUINT16
>
lookupTable
;
public
:
DEFINE_SIZE_MIN
(
68
)
;
}
;
struct
bsln
{
static
const
hb_tag_t
tableTag
=
HB_AAT_TAG_bsln
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
if
(
unlikely
(
!
(
c
-
>
check_struct
(
this
)
&
&
defaultBaseline
<
32
)
)
)
return_trace
(
false
)
;
switch
(
format
)
{
case
0
:
return_trace
(
parts
.
format0
.
sanitize
(
c
)
)
;
case
1
:
return_trace
(
parts
.
format1
.
sanitize
(
c
)
)
;
case
2
:
return_trace
(
parts
.
format2
.
sanitize
(
c
)
)
;
case
3
:
return_trace
(
parts
.
format3
.
sanitize
(
c
)
)
;
default
:
return_trace
(
true
)
;
}
}
protected
:
FixedVersion
<
>
version
;
HBUINT16
format
;
HBUINT16
defaultBaseline
;
union
{
BaselineTableFormat0Part
format0
;
BaselineTableFormat1Part
format1
;
BaselineTableFormat2Part
format2
;
BaselineTableFormat3Part
format3
;
}
parts
;
public
:
DEFINE_SIZE_MIN
(
8
)
;
}
;
}
#
endif
