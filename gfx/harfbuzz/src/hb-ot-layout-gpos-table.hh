#
ifndef
HB_OT_LAYOUT_GPOS_TABLE_HH
#
define
HB_OT_LAYOUT_GPOS_TABLE_HH
#
include
"
OT
/
Layout
/
GPOS
/
GPOS
.
hh
"
namespace
OT
{
namespace
Layout
{
namespace
GPOS_impl
{
#
ifndef
HB_NO_OT_LAYOUT
template
<
typename
context_t
>
typename
context_t
:
:
return_t
PosLookup
:
:
dispatch_recurse_func
(
context_t
*
c
unsigned
int
lookup_index
)
{
const
PosLookup
&
l
=
c
-
>
face
-
>
table
.
GPOS
.
get_relaxed
(
)
-
>
table
-
>
get_lookup
(
lookup_index
)
;
return
l
.
dispatch
(
c
)
;
}
template
<
>
inline
hb_closure_lookups_context_t
:
:
return_t
PosLookup
:
:
dispatch_recurse_func
<
hb_closure_lookups_context_t
>
(
hb_closure_lookups_context_t
*
c
unsigned
this_index
)
{
const
PosLookup
&
l
=
c
-
>
face
-
>
table
.
GPOS
.
get_relaxed
(
)
-
>
table
-
>
get_lookup
(
this_index
)
;
return
l
.
closure_lookups
(
c
this_index
)
;
}
template
<
>
inline
bool
PosLookup
:
:
dispatch_recurse_func
<
hb_ot_apply_context_t
>
(
hb_ot_apply_context_t
*
c
unsigned
int
lookup_index
)
{
const
PosLookup
&
l
=
c
-
>
face
-
>
table
.
GPOS
.
get_relaxed
(
)
-
>
table
-
>
get_lookup
(
lookup_index
)
;
unsigned
int
saved_lookup_props
=
c
-
>
lookup_props
;
unsigned
int
saved_lookup_index
=
c
-
>
lookup_index
;
c
-
>
set_lookup_index
(
lookup_index
)
;
c
-
>
set_lookup_props
(
l
.
get_props
(
)
)
;
bool
ret
=
l
.
dispatch
(
c
)
;
c
-
>
set_lookup_index
(
saved_lookup_index
)
;
c
-
>
set_lookup_props
(
saved_lookup_props
)
;
return
ret
;
}
#
endif
}
}
}
#
endif
