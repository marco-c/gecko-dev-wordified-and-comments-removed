#
if
!
defined
(
HB_H_IN
)
&
&
!
defined
(
HB_NO_SINGLE_HEADER_ERROR
)
#
error
"
Include
<
hb
.
h
>
instead
.
"
#
endif
#
ifndef
HB_COMMON_H
#
define
HB_COMMON_H
#
ifndef
HB_EXTERN
#
define
HB_EXTERN
extern
#
endif
#
ifndef
HB_BEGIN_DECLS
#
ifdef
__cplusplus
#
define
HB_BEGIN_DECLS
extern
"
C
"
{
#
define
HB_END_DECLS
}
#
else
#
define
HB_BEGIN_DECLS
#
define
HB_END_DECLS
#
endif
#
endif
#
if
defined
(
_AIX
)
#
include
<
sys
/
inttypes
.
h
>
#
elif
defined
(
_MSC_VER
)
&
&
_MSC_VER
<
1600
typedef
__int8
int8_t
;
typedef
unsigned
__int8
uint8_t
;
typedef
__int16
int16_t
;
typedef
unsigned
__int16
uint16_t
;
typedef
__int32
int32_t
;
typedef
unsigned
__int32
uint32_t
;
typedef
__int64
int64_t
;
typedef
unsigned
__int64
uint64_t
;
#
elif
defined
(
_MSC_VER
)
&
&
_MSC_VER
<
1800
#
include
<
stdint
.
h
>
#
else
#
include
<
inttypes
.
h
>
#
endif
#
if
defined
(
__GNUC__
)
&
&
(
(
__GNUC__
>
3
)
|
|
(
__GNUC__
=
=
3
&
&
__GNUC_MINOR__
>
=
1
)
)
#
define
HB_DEPRECATED
__attribute__
(
(
__deprecated__
)
)
#
elif
defined
(
_MSC_VER
)
&
&
(
_MSC_VER
>
=
1300
)
#
define
HB_DEPRECATED
__declspec
(
deprecated
)
#
else
#
define
HB_DEPRECATED
#
endif
#
if
defined
(
__GNUC__
)
&
&
(
(
__GNUC__
>
4
)
|
|
(
__GNUC__
=
=
4
&
&
__GNUC_MINOR__
>
=
5
)
)
#
define
HB_DEPRECATED_FOR
(
f
)
__attribute__
(
(
__deprecated__
(
"
Use
'
"
#
f
"
'
instead
"
)
)
)
#
elif
defined
(
_MSC_FULL_VER
)
&
&
(
_MSC_FULL_VER
>
140050320
)
#
define
HB_DEPRECATED_FOR
(
f
)
__declspec
(
deprecated
(
"
is
deprecated
.
Use
'
"
#
f
"
'
instead
"
)
)
#
else
#
define
HB_DEPRECATED_FOR
(
f
)
HB_DEPRECATED
#
endif
HB_BEGIN_DECLS
typedef
int
hb_bool_t
;
typedef
uint32_t
hb_codepoint_t
;
#
define
HB_CODEPOINT_INVALID
(
(
hb_codepoint_t
)
-
1
)
typedef
int32_t
hb_position_t
;
typedef
uint32_t
hb_mask_t
;
typedef
union
_hb_var_int_t
{
uint32_t
u32
;
int32_t
i32
;
uint16_t
u16
[
2
]
;
int16_t
i16
[
2
]
;
uint8_t
u8
[
4
]
;
int8_t
i8
[
4
]
;
}
hb_var_int_t
;
typedef
union
_hb_var_num_t
{
float
f
;
uint32_t
u32
;
int32_t
i32
;
uint16_t
u16
[
2
]
;
int16_t
i16
[
2
]
;
uint8_t
u8
[
4
]
;
int8_t
i8
[
4
]
;
}
hb_var_num_t
;
typedef
uint32_t
hb_tag_t
;
#
define
HB_TAG
(
c1
c2
c3
c4
)
(
(
hb_tag_t
)
(
(
(
(
uint32_t
)
(
c1
)
&
0xFF
)
<
<
24
)
|
(
(
(
uint32_t
)
(
c2
)
&
0xFF
)
<
<
16
)
|
(
(
(
uint32_t
)
(
c3
)
&
0xFF
)
<
<
8
)
|
(
(
uint32_t
)
(
c4
)
&
0xFF
)
)
)
#
define
HB_UNTAG
(
tag
)
(
uint8_t
)
(
(
(
tag
)
>
>
24
)
&
0xFF
)
(
uint8_t
)
(
(
(
tag
)
>
>
16
)
&
0xFF
)
(
uint8_t
)
(
(
(
tag
)
>
>
8
)
&
0xFF
)
(
uint8_t
)
(
(
tag
)
&
0xFF
)
#
define
HB_TAG_NONE
HB_TAG
(
0
0
0
0
)
#
define
HB_TAG_MAX
HB_TAG
(
0xff
0xff
0xff
0xff
)
#
define
HB_TAG_MAX_SIGNED
HB_TAG
(
0x7f
0xff
0xff
0xff
)
HB_EXTERN
hb_tag_t
hb_tag_from_string
(
const
char
*
str
int
len
)
;
HB_EXTERN
void
hb_tag_to_string
(
hb_tag_t
tag
char
*
buf
)
;
typedef
enum
{
HB_DIRECTION_INVALID
=
0
HB_DIRECTION_LTR
=
4
HB_DIRECTION_RTL
HB_DIRECTION_TTB
HB_DIRECTION_BTT
}
hb_direction_t
;
HB_EXTERN
hb_direction_t
hb_direction_from_string
(
const
char
*
str
int
len
)
;
HB_EXTERN
const
char
*
hb_direction_to_string
(
hb_direction_t
direction
)
;
#
define
HB_DIRECTION_IS_VALID
(
dir
)
(
(
(
(
unsigned
int
)
(
dir
)
)
&
~
3U
)
=
=
4
)
#
define
HB_DIRECTION_IS_HORIZONTAL
(
dir
)
(
(
(
(
unsigned
int
)
(
dir
)
)
&
~
1U
)
=
=
4
)
#
define
HB_DIRECTION_IS_VERTICAL
(
dir
)
(
(
(
(
unsigned
int
)
(
dir
)
)
&
~
1U
)
=
=
6
)
#
define
HB_DIRECTION_IS_FORWARD
(
dir
)
(
(
(
(
unsigned
int
)
(
dir
)
)
&
~
2U
)
=
=
4
)
#
define
HB_DIRECTION_IS_BACKWARD
(
dir
)
(
(
(
(
unsigned
int
)
(
dir
)
)
&
~
2U
)
=
=
5
)
#
define
HB_DIRECTION_REVERSE
(
dir
)
(
(
hb_direction_t
)
(
(
(
unsigned
int
)
(
dir
)
)
^
1
)
)
typedef
const
struct
hb_language_impl_t
*
hb_language_t
;
HB_EXTERN
hb_language_t
hb_language_from_string
(
const
char
*
str
int
len
)
;
HB_EXTERN
const
char
*
hb_language_to_string
(
hb_language_t
language
)
;
#
define
HB_LANGUAGE_INVALID
(
(
hb_language_t
)
0
)
HB_EXTERN
hb_language_t
hb_language_get_default
(
void
)
;
HB_EXTERN
hb_bool_t
hb_language_matches
(
hb_language_t
language
hb_language_t
specific
)
;
typedef
enum
{
HB_SCRIPT_COMMON
=
HB_TAG
(
'
Z
'
'
y
'
'
y
'
'
y
'
)
HB_SCRIPT_INHERITED
=
HB_TAG
(
'
Z
'
'
i
'
'
n
'
'
h
'
)
HB_SCRIPT_UNKNOWN
=
HB_TAG
(
'
Z
'
'
z
'
'
z
'
'
z
'
)
HB_SCRIPT_ARABIC
=
HB_TAG
(
'
A
'
'
r
'
'
a
'
'
b
'
)
HB_SCRIPT_ARMENIAN
=
HB_TAG
(
'
A
'
'
r
'
'
m
'
'
n
'
)
HB_SCRIPT_BENGALI
=
HB_TAG
(
'
B
'
'
e
'
'
n
'
'
g
'
)
HB_SCRIPT_CYRILLIC
=
HB_TAG
(
'
C
'
'
y
'
'
r
'
'
l
'
)
HB_SCRIPT_DEVANAGARI
=
HB_TAG
(
'
D
'
'
e
'
'
v
'
'
a
'
)
HB_SCRIPT_GEORGIAN
=
HB_TAG
(
'
G
'
'
e
'
'
o
'
'
r
'
)
HB_SCRIPT_GREEK
=
HB_TAG
(
'
G
'
'
r
'
'
e
'
'
k
'
)
HB_SCRIPT_GUJARATI
=
HB_TAG
(
'
G
'
'
u
'
'
j
'
'
r
'
)
HB_SCRIPT_GURMUKHI
=
HB_TAG
(
'
G
'
'
u
'
'
r
'
'
u
'
)
HB_SCRIPT_HANGUL
=
HB_TAG
(
'
H
'
'
a
'
'
n
'
'
g
'
)
HB_SCRIPT_HAN
=
HB_TAG
(
'
H
'
'
a
'
'
n
'
'
i
'
)
HB_SCRIPT_HEBREW
=
HB_TAG
(
'
H
'
'
e
'
'
b
'
'
r
'
)
HB_SCRIPT_HIRAGANA
=
HB_TAG
(
'
H
'
'
i
'
'
r
'
'
a
'
)
HB_SCRIPT_KANNADA
=
HB_TAG
(
'
K
'
'
n
'
'
d
'
'
a
'
)
HB_SCRIPT_KATAKANA
=
HB_TAG
(
'
K
'
'
a
'
'
n
'
'
a
'
)
HB_SCRIPT_LAO
=
HB_TAG
(
'
L
'
'
a
'
'
o
'
'
o
'
)
HB_SCRIPT_LATIN
=
HB_TAG
(
'
L
'
'
a
'
'
t
'
'
n
'
)
HB_SCRIPT_MALAYALAM
=
HB_TAG
(
'
M
'
'
l
'
'
y
'
'
m
'
)
HB_SCRIPT_ORIYA
=
HB_TAG
(
'
O
'
'
r
'
'
y
'
'
a
'
)
HB_SCRIPT_TAMIL
=
HB_TAG
(
'
T
'
'
a
'
'
m
'
'
l
'
)
HB_SCRIPT_TELUGU
=
HB_TAG
(
'
T
'
'
e
'
'
l
'
'
u
'
)
HB_SCRIPT_THAI
=
HB_TAG
(
'
T
'
'
h
'
'
a
'
'
i
'
)
HB_SCRIPT_TIBETAN
=
HB_TAG
(
'
T
'
'
i
'
'
b
'
'
t
'
)
HB_SCRIPT_BOPOMOFO
=
HB_TAG
(
'
B
'
'
o
'
'
p
'
'
o
'
)
HB_SCRIPT_BRAILLE
=
HB_TAG
(
'
B
'
'
r
'
'
a
'
'
i
'
)
HB_SCRIPT_CANADIAN_SYLLABICS
=
HB_TAG
(
'
C
'
'
a
'
'
n
'
'
s
'
)
HB_SCRIPT_CHEROKEE
=
HB_TAG
(
'
C
'
'
h
'
'
e
'
'
r
'
)
HB_SCRIPT_ETHIOPIC
=
HB_TAG
(
'
E
'
'
t
'
'
h
'
'
i
'
)
HB_SCRIPT_KHMER
=
HB_TAG
(
'
K
'
'
h
'
'
m
'
'
r
'
)
HB_SCRIPT_MONGOLIAN
=
HB_TAG
(
'
M
'
'
o
'
'
n
'
'
g
'
)
HB_SCRIPT_MYANMAR
=
HB_TAG
(
'
M
'
'
y
'
'
m
'
'
r
'
)
HB_SCRIPT_OGHAM
=
HB_TAG
(
'
O
'
'
g
'
'
a
'
'
m
'
)
HB_SCRIPT_RUNIC
=
HB_TAG
(
'
R
'
'
u
'
'
n
'
'
r
'
)
HB_SCRIPT_SINHALA
=
HB_TAG
(
'
S
'
'
i
'
'
n
'
'
h
'
)
HB_SCRIPT_SYRIAC
=
HB_TAG
(
'
S
'
'
y
'
'
r
'
'
c
'
)
HB_SCRIPT_THAANA
=
HB_TAG
(
'
T
'
'
h
'
'
a
'
'
a
'
)
HB_SCRIPT_YI
=
HB_TAG
(
'
Y
'
'
i
'
'
i
'
'
i
'
)
HB_SCRIPT_DESERET
=
HB_TAG
(
'
D
'
'
s
'
'
r
'
'
t
'
)
HB_SCRIPT_GOTHIC
=
HB_TAG
(
'
G
'
'
o
'
'
t
'
'
h
'
)
HB_SCRIPT_OLD_ITALIC
=
HB_TAG
(
'
I
'
'
t
'
'
a
'
'
l
'
)
HB_SCRIPT_BUHID
=
HB_TAG
(
'
B
'
'
u
'
'
h
'
'
d
'
)
HB_SCRIPT_HANUNOO
=
HB_TAG
(
'
H
'
'
a
'
'
n
'
'
o
'
)
HB_SCRIPT_TAGALOG
=
HB_TAG
(
'
T
'
'
g
'
'
l
'
'
g
'
)
HB_SCRIPT_TAGBANWA
=
HB_TAG
(
'
T
'
'
a
'
'
g
'
'
b
'
)
HB_SCRIPT_CYPRIOT
=
HB_TAG
(
'
C
'
'
p
'
'
r
'
'
t
'
)
HB_SCRIPT_LIMBU
=
HB_TAG
(
'
L
'
'
i
'
'
m
'
'
b
'
)
HB_SCRIPT_LINEAR_B
=
HB_TAG
(
'
L
'
'
i
'
'
n
'
'
b
'
)
HB_SCRIPT_OSMANYA
=
HB_TAG
(
'
O
'
'
s
'
'
m
'
'
a
'
)
HB_SCRIPT_SHAVIAN
=
HB_TAG
(
'
S
'
'
h
'
'
a
'
'
w
'
)
HB_SCRIPT_TAI_LE
=
HB_TAG
(
'
T
'
'
a
'
'
l
'
'
e
'
)
HB_SCRIPT_UGARITIC
=
HB_TAG
(
'
U
'
'
g
'
'
a
'
'
r
'
)
HB_SCRIPT_BUGINESE
=
HB_TAG
(
'
B
'
'
u
'
'
g
'
'
i
'
)
HB_SCRIPT_COPTIC
=
HB_TAG
(
'
C
'
'
o
'
'
p
'
'
t
'
)
HB_SCRIPT_GLAGOLITIC
=
HB_TAG
(
'
G
'
'
l
'
'
a
'
'
g
'
)
HB_SCRIPT_KHAROSHTHI
=
HB_TAG
(
'
K
'
'
h
'
'
a
'
'
r
'
)
HB_SCRIPT_NEW_TAI_LUE
=
HB_TAG
(
'
T
'
'
a
'
'
l
'
'
u
'
)
HB_SCRIPT_OLD_PERSIAN
=
HB_TAG
(
'
X
'
'
p
'
'
e
'
'
o
'
)
HB_SCRIPT_SYLOTI_NAGRI
=
HB_TAG
(
'
S
'
'
y
'
'
l
'
'
o
'
)
HB_SCRIPT_TIFINAGH
=
HB_TAG
(
'
T
'
'
f
'
'
n
'
'
g
'
)
HB_SCRIPT_BALINESE
=
HB_TAG
(
'
B
'
'
a
'
'
l
'
'
i
'
)
HB_SCRIPT_CUNEIFORM
=
HB_TAG
(
'
X
'
'
s
'
'
u
'
'
x
'
)
HB_SCRIPT_NKO
=
HB_TAG
(
'
N
'
'
k
'
'
o
'
'
o
'
)
HB_SCRIPT_PHAGS_PA
=
HB_TAG
(
'
P
'
'
h
'
'
a
'
'
g
'
)
HB_SCRIPT_PHOENICIAN
=
HB_TAG
(
'
P
'
'
h
'
'
n
'
'
x
'
)
HB_SCRIPT_CARIAN
=
HB_TAG
(
'
C
'
'
a
'
'
r
'
'
i
'
)
HB_SCRIPT_CHAM
=
HB_TAG
(
'
C
'
'
h
'
'
a
'
'
m
'
)
HB_SCRIPT_KAYAH_LI
=
HB_TAG
(
'
K
'
'
a
'
'
l
'
'
i
'
)
HB_SCRIPT_LEPCHA
=
HB_TAG
(
'
L
'
'
e
'
'
p
'
'
c
'
)
HB_SCRIPT_LYCIAN
=
HB_TAG
(
'
L
'
'
y
'
'
c
'
'
i
'
)
HB_SCRIPT_LYDIAN
=
HB_TAG
(
'
L
'
'
y
'
'
d
'
'
i
'
)
HB_SCRIPT_OL_CHIKI
=
HB_TAG
(
'
O
'
'
l
'
'
c
'
'
k
'
)
HB_SCRIPT_REJANG
=
HB_TAG
(
'
R
'
'
j
'
'
n
'
'
g
'
)
HB_SCRIPT_SAURASHTRA
=
HB_TAG
(
'
S
'
'
a
'
'
u
'
'
r
'
)
HB_SCRIPT_SUNDANESE
=
HB_TAG
(
'
S
'
'
u
'
'
n
'
'
d
'
)
HB_SCRIPT_VAI
=
HB_TAG
(
'
V
'
'
a
'
'
i
'
'
i
'
)
HB_SCRIPT_AVESTAN
=
HB_TAG
(
'
A
'
'
v
'
'
s
'
'
t
'
)
HB_SCRIPT_BAMUM
=
HB_TAG
(
'
B
'
'
a
'
'
m
'
'
u
'
)
HB_SCRIPT_EGYPTIAN_HIEROGLYPHS
=
HB_TAG
(
'
E
'
'
g
'
'
y
'
'
p
'
)
HB_SCRIPT_IMPERIAL_ARAMAIC
=
HB_TAG
(
'
A
'
'
r
'
'
m
'
'
i
'
)
HB_SCRIPT_INSCRIPTIONAL_PAHLAVI
=
HB_TAG
(
'
P
'
'
h
'
'
l
'
'
i
'
)
HB_SCRIPT_INSCRIPTIONAL_PARTHIAN
=
HB_TAG
(
'
P
'
'
r
'
'
t
'
'
i
'
)
HB_SCRIPT_JAVANESE
=
HB_TAG
(
'
J
'
'
a
'
'
v
'
'
a
'
)
HB_SCRIPT_KAITHI
=
HB_TAG
(
'
K
'
'
t
'
'
h
'
'
i
'
)
HB_SCRIPT_LISU
=
HB_TAG
(
'
L
'
'
i
'
'
s
'
'
u
'
)
HB_SCRIPT_MEETEI_MAYEK
=
HB_TAG
(
'
M
'
'
t
'
'
e
'
'
i
'
)
HB_SCRIPT_OLD_SOUTH_ARABIAN
=
HB_TAG
(
'
S
'
'
a
'
'
r
'
'
b
'
)
HB_SCRIPT_OLD_TURKIC
=
HB_TAG
(
'
O
'
'
r
'
'
k
'
'
h
'
)
HB_SCRIPT_SAMARITAN
=
HB_TAG
(
'
S
'
'
a
'
'
m
'
'
r
'
)
HB_SCRIPT_TAI_THAM
=
HB_TAG
(
'
L
'
'
a
'
'
n
'
'
a
'
)
HB_SCRIPT_TAI_VIET
=
HB_TAG
(
'
T
'
'
a
'
'
v
'
'
t
'
)
HB_SCRIPT_BATAK
=
HB_TAG
(
'
B
'
'
a
'
'
t
'
'
k
'
)
HB_SCRIPT_BRAHMI
=
HB_TAG
(
'
B
'
'
r
'
'
a
'
'
h
'
)
HB_SCRIPT_MANDAIC
=
HB_TAG
(
'
M
'
'
a
'
'
n
'
'
d
'
)
HB_SCRIPT_CHAKMA
=
HB_TAG
(
'
C
'
'
a
'
'
k
'
'
m
'
)
HB_SCRIPT_MEROITIC_CURSIVE
=
HB_TAG
(
'
M
'
'
e
'
'
r
'
'
c
'
)
HB_SCRIPT_MEROITIC_HIEROGLYPHS
=
HB_TAG
(
'
M
'
'
e
'
'
r
'
'
o
'
)
HB_SCRIPT_MIAO
=
HB_TAG
(
'
P
'
'
l
'
'
r
'
'
d
'
)
HB_SCRIPT_SHARADA
=
HB_TAG
(
'
S
'
'
h
'
'
r
'
'
d
'
)
HB_SCRIPT_SORA_SOMPENG
=
HB_TAG
(
'
S
'
'
o
'
'
r
'
'
a
'
)
HB_SCRIPT_TAKRI
=
HB_TAG
(
'
T
'
'
a
'
'
k
'
'
r
'
)
HB_SCRIPT_BASSA_VAH
=
HB_TAG
(
'
B
'
'
a
'
'
s
'
'
s
'
)
HB_SCRIPT_CAUCASIAN_ALBANIAN
=
HB_TAG
(
'
A
'
'
g
'
'
h
'
'
b
'
)
HB_SCRIPT_DUPLOYAN
=
HB_TAG
(
'
D
'
'
u
'
'
p
'
'
l
'
)
HB_SCRIPT_ELBASAN
=
HB_TAG
(
'
E
'
'
l
'
'
b
'
'
a
'
)
HB_SCRIPT_GRANTHA
=
HB_TAG
(
'
G
'
'
r
'
'
a
'
'
n
'
)
HB_SCRIPT_KHOJKI
=
HB_TAG
(
'
K
'
'
h
'
'
o
'
'
j
'
)
HB_SCRIPT_KHUDAWADI
=
HB_TAG
(
'
S
'
'
i
'
'
n
'
'
d
'
)
HB_SCRIPT_LINEAR_A
=
HB_TAG
(
'
L
'
'
i
'
'
n
'
'
a
'
)
HB_SCRIPT_MAHAJANI
=
HB_TAG
(
'
M
'
'
a
'
'
h
'
'
j
'
)
HB_SCRIPT_MANICHAEAN
=
HB_TAG
(
'
M
'
'
a
'
'
n
'
'
i
'
)
HB_SCRIPT_MENDE_KIKAKUI
=
HB_TAG
(
'
M
'
'
e
'
'
n
'
'
d
'
)
HB_SCRIPT_MODI
=
HB_TAG
(
'
M
'
'
o
'
'
d
'
'
i
'
)
HB_SCRIPT_MRO
=
HB_TAG
(
'
M
'
'
r
'
'
o
'
'
o
'
)
HB_SCRIPT_NABATAEAN
=
HB_TAG
(
'
N
'
'
b
'
'
a
'
'
t
'
)
HB_SCRIPT_OLD_NORTH_ARABIAN
=
HB_TAG
(
'
N
'
'
a
'
'
r
'
'
b
'
)
HB_SCRIPT_OLD_PERMIC
=
HB_TAG
(
'
P
'
'
e
'
'
r
'
'
m
'
)
HB_SCRIPT_PAHAWH_HMONG
=
HB_TAG
(
'
H
'
'
m
'
'
n
'
'
g
'
)
HB_SCRIPT_PALMYRENE
=
HB_TAG
(
'
P
'
'
a
'
'
l
'
'
m
'
)
HB_SCRIPT_PAU_CIN_HAU
=
HB_TAG
(
'
P
'
'
a
'
'
u
'
'
c
'
)
HB_SCRIPT_PSALTER_PAHLAVI
=
HB_TAG
(
'
P
'
'
h
'
'
l
'
'
p
'
)
HB_SCRIPT_SIDDHAM
=
HB_TAG
(
'
S
'
'
i
'
'
d
'
'
d
'
)
HB_SCRIPT_TIRHUTA
=
HB_TAG
(
'
T
'
'
i
'
'
r
'
'
h
'
)
HB_SCRIPT_WARANG_CITI
=
HB_TAG
(
'
W
'
'
a
'
'
r
'
'
a
'
)
HB_SCRIPT_AHOM
=
HB_TAG
(
'
A
'
'
h
'
'
o
'
'
m
'
)
HB_SCRIPT_ANATOLIAN_HIEROGLYPHS
=
HB_TAG
(
'
H
'
'
l
'
'
u
'
'
w
'
)
HB_SCRIPT_HATRAN
=
HB_TAG
(
'
H
'
'
a
'
'
t
'
'
r
'
)
HB_SCRIPT_MULTANI
=
HB_TAG
(
'
M
'
'
u
'
'
l
'
'
t
'
)
HB_SCRIPT_OLD_HUNGARIAN
=
HB_TAG
(
'
H
'
'
u
'
'
n
'
'
g
'
)
HB_SCRIPT_SIGNWRITING
=
HB_TAG
(
'
S
'
'
g
'
'
n
'
'
w
'
)
HB_SCRIPT_ADLAM
=
HB_TAG
(
'
A
'
'
d
'
'
l
'
'
m
'
)
HB_SCRIPT_BHAIKSUKI
=
HB_TAG
(
'
B
'
'
h
'
'
k
'
'
s
'
)
HB_SCRIPT_MARCHEN
=
HB_TAG
(
'
M
'
'
a
'
'
r
'
'
c
'
)
HB_SCRIPT_OSAGE
=
HB_TAG
(
'
O
'
'
s
'
'
g
'
'
e
'
)
HB_SCRIPT_TANGUT
=
HB_TAG
(
'
T
'
'
a
'
'
n
'
'
g
'
)
HB_SCRIPT_NEWA
=
HB_TAG
(
'
N
'
'
e
'
'
w
'
'
a
'
)
HB_SCRIPT_MASARAM_GONDI
=
HB_TAG
(
'
G
'
'
o
'
'
n
'
'
m
'
)
HB_SCRIPT_NUSHU
=
HB_TAG
(
'
N
'
'
s
'
'
h
'
'
u
'
)
HB_SCRIPT_SOYOMBO
=
HB_TAG
(
'
S
'
'
o
'
'
y
'
'
o
'
)
HB_SCRIPT_ZANABAZAR_SQUARE
=
HB_TAG
(
'
Z
'
'
a
'
'
n
'
'
b
'
)
HB_SCRIPT_DOGRA
=
HB_TAG
(
'
D
'
'
o
'
'
g
'
'
r
'
)
HB_SCRIPT_GUNJALA_GONDI
=
HB_TAG
(
'
G
'
'
o
'
'
n
'
'
g
'
)
HB_SCRIPT_HANIFI_ROHINGYA
=
HB_TAG
(
'
R
'
'
o
'
'
h
'
'
g
'
)
HB_SCRIPT_MAKASAR
=
HB_TAG
(
'
M
'
'
a
'
'
k
'
'
a
'
)
HB_SCRIPT_MEDEFAIDRIN
=
HB_TAG
(
'
M
'
'
e
'
'
d
'
'
f
'
)
HB_SCRIPT_OLD_SOGDIAN
=
HB_TAG
(
'
S
'
'
o
'
'
g
'
'
o
'
)
HB_SCRIPT_SOGDIAN
=
HB_TAG
(
'
S
'
'
o
'
'
g
'
'
d
'
)
HB_SCRIPT_ELYMAIC
=
HB_TAG
(
'
E
'
'
l
'
'
y
'
'
m
'
)
HB_SCRIPT_NANDINAGARI
=
HB_TAG
(
'
N
'
'
a
'
'
n
'
'
d
'
)
HB_SCRIPT_NYIAKENG_PUACHUE_HMONG
=
HB_TAG
(
'
H
'
'
m
'
'
n
'
'
p
'
)
HB_SCRIPT_WANCHO
=
HB_TAG
(
'
W
'
'
c
'
'
h
'
'
o
'
)
HB_SCRIPT_CHORASMIAN
=
HB_TAG
(
'
C
'
'
h
'
'
r
'
'
s
'
)
HB_SCRIPT_DIVES_AKURU
=
HB_TAG
(
'
D
'
'
i
'
'
a
'
'
k
'
)
HB_SCRIPT_KHITAN_SMALL_SCRIPT
=
HB_TAG
(
'
K
'
'
i
'
'
t
'
'
s
'
)
HB_SCRIPT_YEZIDI
=
HB_TAG
(
'
Y
'
'
e
'
'
z
'
'
i
'
)
HB_SCRIPT_CYPRO_MINOAN
=
HB_TAG
(
'
C
'
'
p
'
'
m
'
'
n
'
)
HB_SCRIPT_OLD_UYGHUR
=
HB_TAG
(
'
O
'
'
u
'
'
g
'
'
r
'
)
HB_SCRIPT_TANGSA
=
HB_TAG
(
'
T
'
'
n
'
'
s
'
'
a
'
)
HB_SCRIPT_TOTO
=
HB_TAG
(
'
T
'
'
o
'
'
t
'
'
o
'
)
HB_SCRIPT_VITHKUQI
=
HB_TAG
(
'
V
'
'
i
'
'
t
'
'
h
'
)
HB_SCRIPT_MATH
=
HB_TAG
(
'
Z
'
'
m
'
'
t
'
'
h
'
)
HB_SCRIPT_KAWI
=
HB_TAG
(
'
K
'
'
a
'
'
w
'
'
i
'
)
HB_SCRIPT_NAG_MUNDARI
=
HB_TAG
(
'
N
'
'
a
'
'
g
'
'
m
'
)
HB_SCRIPT_GARAY
=
HB_TAG
(
'
G
'
'
a
'
'
r
'
'
a
'
)
HB_SCRIPT_GURUNG_KHEMA
=
HB_TAG
(
'
G
'
'
u
'
'
k
'
'
h
'
)
HB_SCRIPT_KIRAT_RAI
=
HB_TAG
(
'
K
'
'
r
'
'
a
'
'
i
'
)
HB_SCRIPT_OL_ONAL
=
HB_TAG
(
'
O
'
'
n
'
'
a
'
'
o
'
)
HB_SCRIPT_SUNUWAR
=
HB_TAG
(
'
S
'
'
u
'
'
n
'
'
u
'
)
HB_SCRIPT_TODHRI
=
HB_TAG
(
'
T
'
'
o
'
'
d
'
'
r
'
)
HB_SCRIPT_TULU_TIGALARI
=
HB_TAG
(
'
T
'
'
u
'
'
t
'
'
g
'
)
HB_SCRIPT_INVALID
=
HB_TAG_NONE
_HB_SCRIPT_MAX_VALUE
=
HB_TAG_MAX_SIGNED
_HB_SCRIPT_MAX_VALUE_SIGNED
=
HB_TAG_MAX_SIGNED
}
hb_script_t
;
HB_EXTERN
hb_script_t
hb_script_from_iso15924_tag
(
hb_tag_t
tag
)
;
HB_EXTERN
hb_script_t
hb_script_from_string
(
const
char
*
str
int
len
)
;
HB_EXTERN
hb_tag_t
hb_script_to_iso15924_tag
(
hb_script_t
script
)
;
HB_EXTERN
hb_direction_t
hb_script_get_horizontal_direction
(
hb_script_t
script
)
;
typedef
struct
hb_user_data_key_t
{
char
unused
;
}
hb_user_data_key_t
;
typedef
void
(
*
hb_destroy_func_t
)
(
void
*
user_data
)
;
#
define
HB_FEATURE_GLOBAL_START
0
#
define
HB_FEATURE_GLOBAL_END
(
(
unsigned
int
)
-
1
)
typedef
struct
hb_feature_t
{
hb_tag_t
tag
;
uint32_t
value
;
unsigned
int
start
;
unsigned
int
end
;
}
hb_feature_t
;
HB_EXTERN
hb_bool_t
hb_feature_from_string
(
const
char
*
str
int
len
hb_feature_t
*
feature
)
;
HB_EXTERN
void
hb_feature_to_string
(
hb_feature_t
*
feature
char
*
buf
unsigned
int
size
)
;
typedef
struct
hb_variation_t
{
hb_tag_t
tag
;
float
value
;
}
hb_variation_t
;
HB_EXTERN
hb_bool_t
hb_variation_from_string
(
const
char
*
str
int
len
hb_variation_t
*
variation
)
;
HB_EXTERN
void
hb_variation_to_string
(
hb_variation_t
*
variation
char
*
buf
unsigned
int
size
)
;
typedef
uint32_t
hb_color_t
;
#
define
HB_COLOR
(
b
g
r
a
)
(
(
hb_color_t
)
HB_TAG
(
(
b
)
(
g
)
(
r
)
(
a
)
)
)
HB_EXTERN
uint8_t
hb_color_get_alpha
(
hb_color_t
color
)
;
#
define
hb_color_get_alpha
(
color
)
(
(
color
)
&
0xFF
)
HB_EXTERN
uint8_t
hb_color_get_red
(
hb_color_t
color
)
;
#
define
hb_color_get_red
(
color
)
(
(
(
color
)
>
>
8
)
&
0xFF
)
HB_EXTERN
uint8_t
hb_color_get_green
(
hb_color_t
color
)
;
#
define
hb_color_get_green
(
color
)
(
(
(
color
)
>
>
16
)
&
0xFF
)
HB_EXTERN
uint8_t
hb_color_get_blue
(
hb_color_t
color
)
;
#
define
hb_color_get_blue
(
color
)
(
(
(
color
)
>
>
24
)
&
0xFF
)
typedef
struct
hb_glyph_extents_t
{
hb_position_t
x_bearing
;
hb_position_t
y_bearing
;
hb_position_t
width
;
hb_position_t
height
;
}
hb_glyph_extents_t
;
typedef
struct
hb_font_t
hb_font_t
;
HB_END_DECLS
#
endif
