#
include
"
hb
.
hh
"
#
include
"
hb
-
set
.
hh
"
int
main
(
int
argc
char
*
*
argv
)
{
{
hb_set_t
v1
{
1
2
}
;
hb_set_t
v2
{
v1
}
;
assert
(
v1
.
get_population
(
)
=
=
2
)
;
assert
(
hb_len
(
hb_iter
(
v1
)
)
=
=
2
)
;
assert
(
v2
.
get_population
(
)
=
=
2
)
;
}
{
hb_set_t
v1
{
1
2
}
;
hb_set_t
v2
;
v2
=
v1
;
assert
(
v1
.
get_population
(
)
=
=
2
)
;
assert
(
v2
.
get_population
(
)
=
=
2
)
;
}
{
hb_set_t
s
{
1
2
}
;
hb_set_t
v
(
std
:
:
move
(
s
)
)
;
assert
(
s
.
get_population
(
)
=
=
0
)
;
assert
(
hb_len
(
hb_iter
(
s
)
)
=
=
0
)
;
assert
(
v
.
get_population
(
)
=
=
2
)
;
}
{
hb_set_t
s
=
hb_set_t
{
1
2
}
;
hb_set_t
v
;
v
=
std
:
:
move
(
s
)
;
assert
(
s
.
get_population
(
)
=
=
0
)
;
assert
(
v
.
get_population
(
)
=
=
2
)
;
}
{
hb_set_t
s
;
s
.
add
(
18
)
;
s
.
add
(
12
)
;
hb_vector_t
<
hb_codepoint_t
>
v
(
s
)
;
hb_set_t
v0
(
v
)
;
hb_set_t
v1
(
s
)
;
hb_set_t
v2
(
std
:
:
move
(
s
)
)
;
assert
(
s
.
get_population
(
)
=
=
0
)
;
assert
(
v0
.
get_population
(
)
=
=
2
)
;
assert
(
v1
.
get_population
(
)
=
=
2
)
;
assert
(
v2
.
get_population
(
)
=
=
2
)
;
}
{
hb_set_t
s
;
s
.
add
(
18
)
;
s
<
<
12
;
s
<
<
hb_pair_t
<
hb_codepoint_t
hb_codepoint_t
>
{
1
3
}
;
hb_set_t
v
(
hb_iter
(
s
)
)
;
assert
(
v
.
get_population
(
)
=
=
5
)
;
}
{
hb_set_t
v1
{
1
2
3
}
;
hb_set_t
v2
{
4
5
}
;
hb_swap
(
v1
v2
)
;
assert
(
v1
.
get_population
(
)
=
=
2
)
;
assert
(
v2
.
get_population
(
)
=
=
3
)
;
}
{
hb_set_t
s
;
s
.
invert
(
)
;
s
.
del
(
5
)
;
hb_codepoint_t
start
=
HB_SET_VALUE_INVALID
last
=
HB_SET_VALUE_INVALID
;
assert
(
s
.
next_range
(
&
start
&
last
)
)
;
assert
(
start
=
=
0
)
;
assert
(
last
=
=
4
)
;
assert
(
s
.
next_range
(
&
start
&
last
)
)
;
assert
(
start
=
=
6
)
;
assert
(
last
=
=
HB_SET_VALUE_INVALID
-
1
)
;
assert
(
!
s
.
next_range
(
&
start
&
last
)
)
;
start
=
HB_SET_VALUE_INVALID
;
last
=
HB_SET_VALUE_INVALID
;
assert
(
s
.
previous_range
(
&
start
&
last
)
)
;
assert
(
start
=
=
6
)
;
assert
(
last
=
=
HB_SET_VALUE_INVALID
-
1
)
;
assert
(
s
.
previous_range
(
&
start
&
last
)
)
;
assert
(
start
=
=
0
)
;
assert
(
last
=
=
4
)
;
assert
(
!
s
.
previous_range
(
&
start
&
last
)
)
;
assert
(
s
.
is_inverted
(
)
)
;
assert
(
s
.
has
(
HB_SET_VALUE_INVALID
)
)
;
}
return
0
;
}
