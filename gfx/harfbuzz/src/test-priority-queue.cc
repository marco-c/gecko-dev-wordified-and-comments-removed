#
include
"
hb
.
hh
"
#
include
"
hb
-
priority
-
queue
.
hh
"
static
void
test_insert
(
)
{
hb_priority_queue_t
queue
;
assert
(
queue
.
is_empty
(
)
)
;
queue
.
insert
(
10
0
)
;
assert
(
!
queue
.
is_empty
(
)
)
;
assert
(
queue
.
minimum
(
)
=
=
hb_pair
(
10
0
)
)
;
queue
.
insert
(
20
1
)
;
assert
(
queue
.
minimum
(
)
=
=
hb_pair
(
10
0
)
)
;
queue
.
insert
(
5
2
)
;
assert
(
queue
.
minimum
(
)
=
=
hb_pair
(
5
2
)
)
;
queue
.
insert
(
15
3
)
;
assert
(
queue
.
minimum
(
)
=
=
hb_pair
(
5
2
)
)
;
queue
.
insert
(
1
4
)
;
assert
(
queue
.
minimum
(
)
=
=
hb_pair
(
1
4
)
)
;
}
static
void
test_extract
(
)
{
hb_priority_queue_t
queue
;
queue
.
insert
(
0
0
)
;
queue
.
insert
(
60
6
)
;
queue
.
insert
(
30
3
)
;
queue
.
insert
(
40
4
)
;
queue
.
insert
(
20
2
)
;
queue
.
insert
(
50
5
)
;
queue
.
insert
(
70
7
)
;
queue
.
insert
(
10
1
)
;
for
(
int
i
=
0
;
i
<
8
;
i
+
+
)
{
assert
(
!
queue
.
is_empty
(
)
)
;
assert
(
queue
.
minimum
(
)
=
=
hb_pair
(
i
*
10
i
)
)
;
assert
(
queue
.
pop_minimum
(
)
=
=
hb_pair
(
i
*
10
i
)
)
;
}
assert
(
queue
.
is_empty
(
)
)
;
}
static
void
test_extract_empty
(
)
{
hb_priority_queue_t
queue
;
assert
(
queue
.
pop_minimum
(
)
=
=
hb_pair
(
0
0
)
)
;
}
int
main
(
int
argc
char
*
*
argv
)
{
test_insert
(
)
;
test_extract
(
)
;
test_extract_empty
(
)
;
}
