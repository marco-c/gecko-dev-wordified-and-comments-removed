#
ifndef
HB_OT_HEAD_TABLE_HH
#
define
HB_OT_HEAD_TABLE_HH
#
include
"
hb
-
open
-
type
-
private
.
hh
"
namespace
OT
{
#
define
HB_OT_TAG_head
HB_TAG
(
'
h
'
'
e
'
'
a
'
'
d
'
)
struct
head
{
static
const
hb_tag_t
tableTag
=
HB_OT_TAG_head
;
inline
unsigned
int
get_upem
(
void
)
const
{
unsigned
int
upem
=
unitsPerEm
;
return
16
<
=
upem
&
&
upem
<
=
16384
?
upem
:
1000
;
}
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
&
&
version
.
major
=
=
1
&
&
magicNumber
=
=
0x5F0F3CF5u
)
;
}
protected
:
FixedVersion
<
>
version
;
FixedVersion
<
>
fontRevision
;
UINT32
checkSumAdjustment
;
UINT32
magicNumber
;
UINT16
flags
;
UINT16
unitsPerEm
;
LONGDATETIME
created
;
LONGDATETIME
modified
;
INT16
xMin
;
INT16
yMin
;
INT16
xMax
;
INT16
yMax
;
UINT16
macStyle
;
UINT16
lowestRecPPEM
;
INT16
fontDirectionHint
;
public
:
INT16
indexToLocFormat
;
INT16
glyphDataFormat
;
DEFINE_SIZE_STATIC
(
54
)
;
}
;
}
#
endif
