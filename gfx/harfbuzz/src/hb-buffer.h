#
if
!
defined
(
HB_H_IN
)
&
&
!
defined
(
HB_NO_SINGLE_HEADER_ERROR
)
#
error
"
Include
<
hb
.
h
>
instead
.
"
#
endif
#
ifndef
HB_BUFFER_H
#
define
HB_BUFFER_H
#
include
"
hb
-
common
.
h
"
#
include
"
hb
-
unicode
.
h
"
#
include
"
hb
-
font
.
h
"
HB_BEGIN_DECLS
typedef
struct
hb_glyph_info_t
{
hb_codepoint_t
codepoint
;
hb_mask_t
mask
;
uint32_t
cluster
;
hb_var_int_t
var1
;
hb_var_int_t
var2
;
}
hb_glyph_info_t
;
typedef
enum
{
HB_GLYPH_FLAG_UNSAFE_TO_BREAK
=
0x00000001
HB_GLYPH_FLAG_UNSAFE_TO_CONCAT
=
0x00000002
HB_GLYPH_FLAG_SAFE_TO_INSERT_TATWEEL
=
0x00000004
HB_GLYPH_FLAG_DEFINED
=
0x00000007
}
hb_glyph_flags_t
;
HB_EXTERN
hb_glyph_flags_t
hb_glyph_info_get_glyph_flags
(
const
hb_glyph_info_t
*
info
)
;
#
define
hb_glyph_info_get_glyph_flags
(
info
)
\
(
(
hb_glyph_flags_t
)
(
(
unsigned
int
)
(
info
)
-
>
mask
&
HB_GLYPH_FLAG_DEFINED
)
)
typedef
struct
hb_glyph_position_t
{
hb_position_t
x_advance
;
hb_position_t
y_advance
;
hb_position_t
x_offset
;
hb_position_t
y_offset
;
hb_var_int_t
var
;
}
hb_glyph_position_t
;
typedef
struct
hb_segment_properties_t
{
hb_direction_t
direction
;
hb_script_t
script
;
hb_language_t
language
;
void
*
reserved1
;
void
*
reserved2
;
}
hb_segment_properties_t
;
#
define
HB_SEGMENT_PROPERTIES_DEFAULT
{
HB_DIRECTION_INVALID
\
HB_SCRIPT_INVALID
\
HB_LANGUAGE_INVALID
\
(
void
*
)
0
\
(
void
*
)
0
}
HB_EXTERN
hb_bool_t
hb_segment_properties_equal
(
const
hb_segment_properties_t
*
a
const
hb_segment_properties_t
*
b
)
;
HB_EXTERN
unsigned
int
hb_segment_properties_hash
(
const
hb_segment_properties_t
*
p
)
;
HB_EXTERN
void
hb_segment_properties_overlay
(
hb_segment_properties_t
*
p
const
hb_segment_properties_t
*
src
)
;
typedef
struct
hb_buffer_t
hb_buffer_t
;
HB_EXTERN
hb_buffer_t
*
hb_buffer_create
(
void
)
;
HB_EXTERN
hb_buffer_t
*
hb_buffer_create_similar
(
const
hb_buffer_t
*
src
)
;
HB_EXTERN
void
hb_buffer_reset
(
hb_buffer_t
*
buffer
)
;
HB_EXTERN
hb_buffer_t
*
hb_buffer_get_empty
(
void
)
;
HB_EXTERN
hb_buffer_t
*
hb_buffer_reference
(
hb_buffer_t
*
buffer
)
;
HB_EXTERN
void
hb_buffer_destroy
(
hb_buffer_t
*
buffer
)
;
HB_EXTERN
hb_bool_t
hb_buffer_set_user_data
(
hb_buffer_t
*
buffer
hb_user_data_key_t
*
key
void
*
data
hb_destroy_func_t
destroy
hb_bool_t
replace
)
;
HB_EXTERN
void
*
hb_buffer_get_user_data
(
const
hb_buffer_t
*
buffer
hb_user_data_key_t
*
key
)
;
typedef
enum
{
HB_BUFFER_CONTENT_TYPE_INVALID
=
0
HB_BUFFER_CONTENT_TYPE_UNICODE
HB_BUFFER_CONTENT_TYPE_GLYPHS
}
hb_buffer_content_type_t
;
HB_EXTERN
void
hb_buffer_set_content_type
(
hb_buffer_t
*
buffer
hb_buffer_content_type_t
content_type
)
;
HB_EXTERN
hb_buffer_content_type_t
hb_buffer_get_content_type
(
const
hb_buffer_t
*
buffer
)
;
HB_EXTERN
void
hb_buffer_set_unicode_funcs
(
hb_buffer_t
*
buffer
hb_unicode_funcs_t
*
unicode_funcs
)
;
HB_EXTERN
hb_unicode_funcs_t
*
hb_buffer_get_unicode_funcs
(
const
hb_buffer_t
*
buffer
)
;
HB_EXTERN
void
hb_buffer_set_direction
(
hb_buffer_t
*
buffer
hb_direction_t
direction
)
;
HB_EXTERN
hb_direction_t
hb_buffer_get_direction
(
const
hb_buffer_t
*
buffer
)
;
HB_EXTERN
void
hb_buffer_set_script
(
hb_buffer_t
*
buffer
hb_script_t
script
)
;
HB_EXTERN
hb_script_t
hb_buffer_get_script
(
const
hb_buffer_t
*
buffer
)
;
HB_EXTERN
void
hb_buffer_set_language
(
hb_buffer_t
*
buffer
hb_language_t
language
)
;
HB_EXTERN
hb_language_t
hb_buffer_get_language
(
const
hb_buffer_t
*
buffer
)
;
HB_EXTERN
void
hb_buffer_set_segment_properties
(
hb_buffer_t
*
buffer
const
hb_segment_properties_t
*
props
)
;
HB_EXTERN
void
hb_buffer_get_segment_properties
(
const
hb_buffer_t
*
buffer
hb_segment_properties_t
*
props
)
;
HB_EXTERN
void
hb_buffer_guess_segment_properties
(
hb_buffer_t
*
buffer
)
;
typedef
enum
{
HB_BUFFER_FLAG_DEFAULT
=
0x00000000u
HB_BUFFER_FLAG_BOT
=
0x00000001u
HB_BUFFER_FLAG_EOT
=
0x00000002u
HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES
=
0x00000004u
HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES
=
0x00000008u
HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE
=
0x00000010u
HB_BUFFER_FLAG_VERIFY
=
0x00000020u
HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT
=
0x00000040u
HB_BUFFER_FLAG_PRODUCE_SAFE_TO_INSERT_TATWEEL
=
0x00000080u
HB_BUFFER_FLAG_DEFINED
=
0x000000FFu
}
hb_buffer_flags_t
;
HB_EXTERN
void
hb_buffer_set_flags
(
hb_buffer_t
*
buffer
hb_buffer_flags_t
flags
)
;
HB_EXTERN
hb_buffer_flags_t
hb_buffer_get_flags
(
const
hb_buffer_t
*
buffer
)
;
typedef
enum
{
HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES
=
0
HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS
=
1
HB_BUFFER_CLUSTER_LEVEL_CHARACTERS
=
2
HB_BUFFER_CLUSTER_LEVEL_GRAPHEMES
=
3
HB_BUFFER_CLUSTER_LEVEL_DEFAULT
=
HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES
}
hb_buffer_cluster_level_t
;
#
define
HB_BUFFER_CLUSTER_LEVEL_IS_MONOTONE
(
level
)
\
(
(
bool
)
(
(
1u
<
<
(
unsigned
)
(
level
)
)
&
\
(
(
1u
<
<
HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES
)
|
\
(
1u
<
<
HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS
)
)
)
)
#
define
HB_BUFFER_CLUSTER_LEVEL_IS_GRAPHEMES
(
level
)
\
(
(
bool
)
(
(
1u
<
<
(
unsigned
)
(
level
)
)
&
\
(
(
1u
<
<
HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES
)
|
\
(
1u
<
<
HB_BUFFER_CLUSTER_LEVEL_GRAPHEMES
)
)
)
)
#
define
HB_BUFFER_CLUSTER_LEVEL_IS_CHARACTERS
(
level
)
\
(
(
bool
)
(
(
1u
<
<
(
unsigned
)
(
level
)
)
&
\
(
(
1u
<
<
HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARCATERS
)
|
\
(
1u
<
<
HB_BUFFER_CLUSTER_LEVEL_CHARACTERS
)
)
)
)
HB_EXTERN
void
hb_buffer_set_cluster_level
(
hb_buffer_t
*
buffer
hb_buffer_cluster_level_t
cluster_level
)
;
HB_EXTERN
hb_buffer_cluster_level_t
hb_buffer_get_cluster_level
(
const
hb_buffer_t
*
buffer
)
;
#
define
HB_BUFFER_REPLACEMENT_CODEPOINT_DEFAULT
0xFFFDu
HB_EXTERN
void
hb_buffer_set_replacement_codepoint
(
hb_buffer_t
*
buffer
hb_codepoint_t
replacement
)
;
HB_EXTERN
hb_codepoint_t
hb_buffer_get_replacement_codepoint
(
const
hb_buffer_t
*
buffer
)
;
HB_EXTERN
void
hb_buffer_set_invisible_glyph
(
hb_buffer_t
*
buffer
hb_codepoint_t
invisible
)
;
HB_EXTERN
hb_codepoint_t
hb_buffer_get_invisible_glyph
(
const
hb_buffer_t
*
buffer
)
;
HB_EXTERN
void
hb_buffer_set_not_found_glyph
(
hb_buffer_t
*
buffer
hb_codepoint_t
not_found
)
;
HB_EXTERN
hb_codepoint_t
hb_buffer_get_not_found_glyph
(
const
hb_buffer_t
*
buffer
)
;
HB_EXTERN
void
hb_buffer_set_not_found_variation_selector_glyph
(
hb_buffer_t
*
buffer
hb_codepoint_t
not_found_variation_selector
)
;
HB_EXTERN
hb_codepoint_t
hb_buffer_get_not_found_variation_selector_glyph
(
const
hb_buffer_t
*
buffer
)
;
HB_EXTERN
void
hb_buffer_set_random_state
(
hb_buffer_t
*
buffer
unsigned
state
)
;
HB_EXTERN
unsigned
hb_buffer_get_random_state
(
const
hb_buffer_t
*
buffer
)
;
HB_EXTERN
void
hb_buffer_clear_contents
(
hb_buffer_t
*
buffer
)
;
HB_EXTERN
hb_bool_t
hb_buffer_pre_allocate
(
hb_buffer_t
*
buffer
unsigned
int
size
)
;
HB_EXTERN
hb_bool_t
hb_buffer_allocation_successful
(
hb_buffer_t
*
buffer
)
;
HB_EXTERN
void
hb_buffer_reverse
(
hb_buffer_t
*
buffer
)
;
HB_EXTERN
void
hb_buffer_reverse_range
(
hb_buffer_t
*
buffer
unsigned
int
start
unsigned
int
end
)
;
HB_EXTERN
void
hb_buffer_reverse_clusters
(
hb_buffer_t
*
buffer
)
;
HB_EXTERN
void
hb_buffer_add
(
hb_buffer_t
*
buffer
hb_codepoint_t
codepoint
unsigned
int
cluster
)
;
HB_EXTERN
void
hb_buffer_add_utf8
(
hb_buffer_t
*
buffer
const
char
*
text
int
text_length
unsigned
int
item_offset
int
item_length
)
;
HB_EXTERN
void
hb_buffer_add_utf16
(
hb_buffer_t
*
buffer
const
uint16_t
*
text
int
text_length
unsigned
int
item_offset
int
item_length
)
;
HB_EXTERN
void
hb_buffer_add_utf32
(
hb_buffer_t
*
buffer
const
uint32_t
*
text
int
text_length
unsigned
int
item_offset
int
item_length
)
;
HB_EXTERN
void
hb_buffer_add_latin1
(
hb_buffer_t
*
buffer
const
uint8_t
*
text
int
text_length
unsigned
int
item_offset
int
item_length
)
;
HB_EXTERN
void
hb_buffer_add_codepoints
(
hb_buffer_t
*
buffer
const
hb_codepoint_t
*
text
int
text_length
unsigned
int
item_offset
int
item_length
)
;
HB_EXTERN
void
hb_buffer_append
(
hb_buffer_t
*
buffer
const
hb_buffer_t
*
source
unsigned
int
start
unsigned
int
end
)
;
HB_EXTERN
hb_bool_t
hb_buffer_set_length
(
hb_buffer_t
*
buffer
unsigned
int
length
)
;
HB_EXTERN
unsigned
int
hb_buffer_get_length
(
const
hb_buffer_t
*
buffer
)
;
HB_EXTERN
hb_glyph_info_t
*
hb_buffer_get_glyph_infos
(
hb_buffer_t
*
buffer
unsigned
int
*
length
)
;
HB_EXTERN
hb_glyph_position_t
*
hb_buffer_get_glyph_positions
(
hb_buffer_t
*
buffer
unsigned
int
*
length
)
;
HB_EXTERN
hb_bool_t
hb_buffer_has_positions
(
hb_buffer_t
*
buffer
)
;
HB_EXTERN
void
hb_buffer_normalize_glyphs
(
hb_buffer_t
*
buffer
)
;
typedef
enum
{
HB_BUFFER_SERIALIZE_FLAG_DEFAULT
=
0x00000000u
HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS
=
0x00000001u
HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS
=
0x00000002u
HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES
=
0x00000004u
HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS
=
0x00000008u
HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS
=
0x00000010u
HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES
=
0x00000020u
HB_BUFFER_SERIALIZE_FLAG_DEFINED
=
0x0000003Fu
}
hb_buffer_serialize_flags_t
;
typedef
enum
{
HB_BUFFER_SERIALIZE_FORMAT_TEXT
=
HB_TAG
(
'
T
'
'
E
'
'
X
'
'
T
'
)
HB_BUFFER_SERIALIZE_FORMAT_JSON
=
HB_TAG
(
'
J
'
'
S
'
'
O
'
'
N
'
)
HB_BUFFER_SERIALIZE_FORMAT_INVALID
=
HB_TAG_NONE
}
hb_buffer_serialize_format_t
;
HB_EXTERN
hb_buffer_serialize_format_t
hb_buffer_serialize_format_from_string
(
const
char
*
str
int
len
)
;
HB_EXTERN
const
char
*
hb_buffer_serialize_format_to_string
(
hb_buffer_serialize_format_t
format
)
;
HB_EXTERN
const
char
*
*
hb_buffer_serialize_list_formats
(
void
)
;
HB_EXTERN
unsigned
int
hb_buffer_serialize_glyphs
(
hb_buffer_t
*
buffer
unsigned
int
start
unsigned
int
end
char
*
buf
unsigned
int
buf_size
unsigned
int
*
buf_consumed
hb_font_t
*
font
hb_buffer_serialize_format_t
format
hb_buffer_serialize_flags_t
flags
)
;
HB_EXTERN
unsigned
int
hb_buffer_serialize_unicode
(
hb_buffer_t
*
buffer
unsigned
int
start
unsigned
int
end
char
*
buf
unsigned
int
buf_size
unsigned
int
*
buf_consumed
hb_buffer_serialize_format_t
format
hb_buffer_serialize_flags_t
flags
)
;
HB_EXTERN
unsigned
int
hb_buffer_serialize
(
hb_buffer_t
*
buffer
unsigned
int
start
unsigned
int
end
char
*
buf
unsigned
int
buf_size
unsigned
int
*
buf_consumed
hb_font_t
*
font
hb_buffer_serialize_format_t
format
hb_buffer_serialize_flags_t
flags
)
;
HB_EXTERN
hb_bool_t
hb_buffer_deserialize_glyphs
(
hb_buffer_t
*
buffer
const
char
*
buf
int
buf_len
const
char
*
*
end_ptr
hb_font_t
*
font
hb_buffer_serialize_format_t
format
)
;
HB_EXTERN
hb_bool_t
hb_buffer_deserialize_unicode
(
hb_buffer_t
*
buffer
const
char
*
buf
int
buf_len
const
char
*
*
end_ptr
hb_buffer_serialize_format_t
format
)
;
typedef
enum
{
HB_BUFFER_DIFF_FLAG_EQUAL
=
0x0000
HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH
=
0x0001
HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH
=
0x0002
HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT
=
0x0004
HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT
=
0x0008
HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH
=
0x0010
HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH
=
0x0020
HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH
=
0x0040
HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH
=
0x0080
}
hb_buffer_diff_flags_t
;
HB_EXTERN
hb_buffer_diff_flags_t
hb_buffer_diff
(
hb_buffer_t
*
buffer
hb_buffer_t
*
reference
hb_codepoint_t
dottedcircle_glyph
unsigned
int
position_fuzz
)
;
typedef
hb_bool_t
(
*
hb_buffer_message_func_t
)
(
hb_buffer_t
*
buffer
hb_font_t
*
font
const
char
*
message
void
*
user_data
)
;
HB_EXTERN
void
hb_buffer_set_message_func
(
hb_buffer_t
*
buffer
hb_buffer_message_func_t
func
void
*
user_data
hb_destroy_func_t
destroy
)
;
HB_END_DECLS
#
endif
