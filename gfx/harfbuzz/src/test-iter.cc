#
include
"
hb
.
hh
"
#
include
"
hb
-
iter
.
hh
"
#
include
"
hb
-
array
.
hh
"
#
include
"
hb
-
set
.
hh
"
template
<
typename
T
>
struct
array_iter_t
:
hb_iter_t
<
array_iter_t
<
T
>
T
>
hb_iter_mixin_t
<
array_iter_t
<
T
>
T
>
{
array_iter_t
(
hb_array_t
<
T
>
arr_
)
:
arr
(
arr_
)
{
}
typedef
T
__item_type__
;
T
&
__item_at__
(
unsigned
i
)
const
{
return
arr
[
i
]
;
}
void
__forward__
(
unsigned
n
)
{
arr
+
=
n
;
}
void
__rewind__
(
unsigned
n
)
{
arr
-
=
n
;
}
unsigned
__len__
(
)
const
{
return
arr
.
length
;
}
bool
__random_access__
(
)
const
{
return
true
;
}
private
:
hb_array_t
<
T
>
arr
;
}
;
template
<
typename
T
>
struct
some_array_t
{
some_array_t
(
hb_array_t
<
T
>
arr_
)
:
arr
(
arr_
)
{
}
typedef
array_iter_t
<
T
>
iter_t
;
array_iter_t
<
T
>
iter
(
)
{
return
array_iter_t
<
T
>
(
arr
)
;
}
operator
array_iter_t
<
T
>
(
)
{
return
iter
(
)
;
}
operator
hb_iter_t
<
array_iter_t
<
T
>
>
(
)
{
return
iter
(
)
;
}
private
:
hb_array_t
<
T
>
arr
;
}
;
int
main
(
int
argc
char
*
*
argv
)
{
const
int
src
[
10
]
=
{
}
;
int
dst
[
20
]
;
hb_vector_t
<
int
>
v
;
array_iter_t
<
const
int
>
s
(
src
)
;
array_iter_t
<
const
int
>
s2
(
v
)
;
array_iter_t
<
int
>
t
(
dst
)
;
some_array_t
<
const
int
>
a
(
src
)
;
s2
=
s
;
hb_fill
(
t
42
)
;
hb_copy
(
t
s
)
;
return
0
;
}
