#
ifndef
HB_OT_SHAPER_HH
#
define
HB_OT_SHAPER_HH
#
include
"
hb
.
hh
"
#
include
"
hb
-
ot
-
layout
.
hh
"
#
include
"
hb
-
ot
-
shape
.
hh
"
#
include
"
hb
-
ot
-
shape
-
normalize
.
hh
"
#
define
ot_shaper_var_u8_category
(
)
var2
.
u8
[
2
]
#
define
ot_shaper_var_u8_auxiliary
(
)
var2
.
u8
[
3
]
#
define
HB_OT_SHAPE_MAX_COMBINING_MARKS
32
enum
hb_ot_shape_zero_width_marks_type_t
{
HB_OT_SHAPE_ZERO_WIDTH_MARKS_NONE
HB_OT_SHAPE_ZERO_WIDTH_MARKS_BY_GDEF_EARLY
HB_OT_SHAPE_ZERO_WIDTH_MARKS_BY_GDEF_LATE
}
;
#
define
HB_OT_SHAPERS_IMPLEMENT_SHAPERS
\
HB_OT_SHAPER_IMPLEMENT
(
arabic
)
\
HB_OT_SHAPER_IMPLEMENT
(
default
)
\
HB_OT_SHAPER_IMPLEMENT
(
dumber
)
\
HB_OT_SHAPER_IMPLEMENT
(
hangul
)
\
HB_OT_SHAPER_IMPLEMENT
(
hebrew
)
\
HB_OT_SHAPER_IMPLEMENT
(
indic
)
\
HB_OT_SHAPER_IMPLEMENT
(
khmer
)
\
HB_OT_SHAPER_IMPLEMENT
(
myanmar
)
\
HB_OT_SHAPER_IMPLEMENT
(
myanmar_zawgyi
)
\
HB_OT_SHAPER_IMPLEMENT
(
thai
)
\
HB_OT_SHAPER_IMPLEMENT
(
use
)
\
/
*
^
-
-
-
Add
new
shapers
here
;
keep
sorted
.
*
/
struct
hb_ot_shaper_t
{
void
(
*
collect_features
)
(
hb_ot_shape_planner_t
*
plan
)
;
void
(
*
override_features
)
(
hb_ot_shape_planner_t
*
plan
)
;
void
*
(
*
data_create
)
(
const
hb_ot_shape_plan_t
*
plan
)
;
void
(
*
data_destroy
)
(
void
*
data
)
;
void
(
*
preprocess_text
)
(
const
hb_ot_shape_plan_t
*
plan
hb_buffer_t
*
buffer
hb_font_t
*
font
)
;
void
(
*
postprocess_glyphs
)
(
const
hb_ot_shape_plan_t
*
plan
hb_buffer_t
*
buffer
hb_font_t
*
font
)
;
bool
(
*
decompose
)
(
const
hb_ot_shape_normalize_context_t
*
c
hb_codepoint_t
ab
hb_codepoint_t
*
a
hb_codepoint_t
*
b
)
;
bool
(
*
compose
)
(
const
hb_ot_shape_normalize_context_t
*
c
hb_codepoint_t
a
hb_codepoint_t
b
hb_codepoint_t
*
ab
)
;
void
(
*
setup_masks
)
(
const
hb_ot_shape_plan_t
*
plan
hb_buffer_t
*
buffer
hb_font_t
*
font
)
;
void
(
*
reorder_marks
)
(
const
hb_ot_shape_plan_t
*
plan
hb_buffer_t
*
buffer
unsigned
int
start
unsigned
int
end
)
;
hb_tag_t
gpos_tag
;
hb_ot_shape_normalization_mode_t
normalization_preference
;
hb_ot_shape_zero_width_marks_type_t
zero_width_marks
;
bool
fallback_position
;
}
;
#
define
HB_OT_SHAPER_IMPLEMENT
(
name
)
extern
HB_INTERNAL
const
hb_ot_shaper_t
_hb_ot_shaper_
#
#
name
;
HB_OT_SHAPERS_IMPLEMENT_SHAPERS
#
undef
HB_OT_SHAPER_IMPLEMENT
static
inline
const
hb_ot_shaper_t
*
hb_ot_shaper_categorize
(
hb_script_t
script
hb_direction_t
direction
hb_tag_t
gsub_script
)
{
switch
(
(
hb_tag_t
)
script
)
{
default
:
return
&
_hb_ot_shaper_default
;
case
HB_SCRIPT_ARABIC
:
case
HB_SCRIPT_SYRIAC
:
if
(
(
gsub_script
!
=
HB_OT_TAG_DEFAULT_SCRIPT
|
|
script
=
=
HB_SCRIPT_ARABIC
)
&
&
HB_DIRECTION_IS_HORIZONTAL
(
direction
)
)
return
&
_hb_ot_shaper_arabic
;
else
return
&
_hb_ot_shaper_default
;
case
HB_SCRIPT_THAI
:
case
HB_SCRIPT_LAO
:
return
&
_hb_ot_shaper_thai
;
case
HB_SCRIPT_HANGUL
:
return
&
_hb_ot_shaper_hangul
;
case
HB_SCRIPT_HEBREW
:
return
&
_hb_ot_shaper_hebrew
;
case
HB_SCRIPT_BENGALI
:
case
HB_SCRIPT_DEVANAGARI
:
case
HB_SCRIPT_GUJARATI
:
case
HB_SCRIPT_GURMUKHI
:
case
HB_SCRIPT_KANNADA
:
case
HB_SCRIPT_MALAYALAM
:
case
HB_SCRIPT_ORIYA
:
case
HB_SCRIPT_TAMIL
:
case
HB_SCRIPT_TELUGU
:
if
(
gsub_script
=
=
HB_TAG
(
'
D
'
'
F
'
'
L
'
'
T
'
)
|
|
gsub_script
=
=
HB_TAG
(
'
l
'
'
a
'
'
t
'
'
n
'
)
)
return
&
_hb_ot_shaper_default
;
else
if
(
(
gsub_script
&
0x000000FF
)
=
=
'
3
'
)
return
&
_hb_ot_shaper_use
;
else
return
&
_hb_ot_shaper_indic
;
case
HB_SCRIPT_KHMER
:
return
&
_hb_ot_shaper_khmer
;
case
HB_SCRIPT_MYANMAR
:
if
(
gsub_script
=
=
HB_TAG
(
'
D
'
'
F
'
'
L
'
'
T
'
)
|
|
gsub_script
=
=
HB_TAG
(
'
l
'
'
a
'
'
t
'
'
n
'
)
|
|
gsub_script
=
=
HB_TAG
(
'
m
'
'
y
'
'
m
'
'
r
'
)
)
return
&
_hb_ot_shaper_default
;
else
return
&
_hb_ot_shaper_myanmar
;
#
ifndef
HB_NO_OT_SHAPER_MYANMAR_ZAWGYI
#
define
HB_SCRIPT_MYANMAR_ZAWGYI
(
(
hb_script_t
)
HB_TAG
(
'
Q
'
'
a
'
'
a
'
'
g
'
)
)
case
HB_SCRIPT_MYANMAR_ZAWGYI
:
return
&
_hb_ot_shaper_myanmar_zawgyi
;
#
endif
case
HB_SCRIPT_TIBETAN
:
case
HB_SCRIPT_MONGOLIAN
:
case
HB_SCRIPT_SINHALA
:
case
HB_SCRIPT_BUHID
:
case
HB_SCRIPT_HANUNOO
:
case
HB_SCRIPT_TAGALOG
:
case
HB_SCRIPT_TAGBANWA
:
case
HB_SCRIPT_LIMBU
:
case
HB_SCRIPT_TAI_LE
:
case
HB_SCRIPT_BUGINESE
:
case
HB_SCRIPT_KHAROSHTHI
:
case
HB_SCRIPT_SYLOTI_NAGRI
:
case
HB_SCRIPT_TIFINAGH
:
case
HB_SCRIPT_BALINESE
:
case
HB_SCRIPT_NKO
:
case
HB_SCRIPT_PHAGS_PA
:
case
HB_SCRIPT_CHAM
:
case
HB_SCRIPT_KAYAH_LI
:
case
HB_SCRIPT_LEPCHA
:
case
HB_SCRIPT_REJANG
:
case
HB_SCRIPT_SAURASHTRA
:
case
HB_SCRIPT_SUNDANESE
:
case
HB_SCRIPT_EGYPTIAN_HIEROGLYPHS
:
case
HB_SCRIPT_JAVANESE
:
case
HB_SCRIPT_KAITHI
:
case
HB_SCRIPT_MEETEI_MAYEK
:
case
HB_SCRIPT_TAI_THAM
:
case
HB_SCRIPT_TAI_VIET
:
case
HB_SCRIPT_BATAK
:
case
HB_SCRIPT_BRAHMI
:
case
HB_SCRIPT_MANDAIC
:
case
HB_SCRIPT_CHAKMA
:
case
HB_SCRIPT_MIAO
:
case
HB_SCRIPT_SHARADA
:
case
HB_SCRIPT_TAKRI
:
case
HB_SCRIPT_DUPLOYAN
:
case
HB_SCRIPT_GRANTHA
:
case
HB_SCRIPT_KHOJKI
:
case
HB_SCRIPT_KHUDAWADI
:
case
HB_SCRIPT_MAHAJANI
:
case
HB_SCRIPT_MANICHAEAN
:
case
HB_SCRIPT_MODI
:
case
HB_SCRIPT_PAHAWH_HMONG
:
case
HB_SCRIPT_PSALTER_PAHLAVI
:
case
HB_SCRIPT_SIDDHAM
:
case
HB_SCRIPT_TIRHUTA
:
case
HB_SCRIPT_AHOM
:
case
HB_SCRIPT_MULTANI
:
case
HB_SCRIPT_ADLAM
:
case
HB_SCRIPT_BHAIKSUKI
:
case
HB_SCRIPT_MARCHEN
:
case
HB_SCRIPT_NEWA
:
case
HB_SCRIPT_MASARAM_GONDI
:
case
HB_SCRIPT_SOYOMBO
:
case
HB_SCRIPT_ZANABAZAR_SQUARE
:
case
HB_SCRIPT_DOGRA
:
case
HB_SCRIPT_GUNJALA_GONDI
:
case
HB_SCRIPT_HANIFI_ROHINGYA
:
case
HB_SCRIPT_MAKASAR
:
case
HB_SCRIPT_MEDEFAIDRIN
:
case
HB_SCRIPT_OLD_SOGDIAN
:
case
HB_SCRIPT_SOGDIAN
:
case
HB_SCRIPT_ELYMAIC
:
case
HB_SCRIPT_NANDINAGARI
:
case
HB_SCRIPT_NYIAKENG_PUACHUE_HMONG
:
case
HB_SCRIPT_WANCHO
:
case
HB_SCRIPT_CHORASMIAN
:
case
HB_SCRIPT_DIVES_AKURU
:
case
HB_SCRIPT_KHITAN_SMALL_SCRIPT
:
case
HB_SCRIPT_YEZIDI
:
case
HB_SCRIPT_CYPRO_MINOAN
:
case
HB_SCRIPT_OLD_UYGHUR
:
case
HB_SCRIPT_TANGSA
:
case
HB_SCRIPT_TOTO
:
case
HB_SCRIPT_VITHKUQI
:
case
HB_SCRIPT_KAWI
:
case
HB_SCRIPT_NAG_MUNDARI
:
case
HB_SCRIPT_GARAY
:
case
HB_SCRIPT_GURUNG_KHEMA
:
case
HB_SCRIPT_KIRAT_RAI
:
case
HB_SCRIPT_OL_ONAL
:
case
HB_SCRIPT_SUNUWAR
:
case
HB_SCRIPT_TODHRI
:
case
HB_SCRIPT_TULU_TIGALARI
:
if
(
gsub_script
=
=
HB_TAG
(
'
D
'
'
F
'
'
L
'
'
T
'
)
|
|
gsub_script
=
=
HB_TAG
(
'
l
'
'
a
'
'
t
'
'
n
'
)
)
return
&
_hb_ot_shaper_default
;
else
return
&
_hb_ot_shaper_use
;
}
}
#
endif
