#
ifndef
HB_DECYCLER_HH
#
define
HB_DECYCLER_HH
#
include
"
hb
.
hh
"
struct
hb_decycler_node_t
;
struct
hb_decycler_t
{
friend
struct
hb_decycler_node_t
;
private
:
bool
tortoise_asleep
=
true
;
hb_decycler_node_t
*
tortoise
=
nullptr
;
hb_decycler_node_t
*
hare
=
nullptr
;
}
;
struct
hb_decycler_node_t
{
hb_decycler_node_t
(
hb_decycler_t
&
decycler
)
{
u
.
decycler
=
&
decycler
;
decycler
.
tortoise_asleep
=
!
decycler
.
tortoise_asleep
;
if
(
!
decycler
.
tortoise
)
{
decycler
.
tortoise
=
decycler
.
hare
=
this
;
return
;
}
if
(
!
decycler
.
tortoise_asleep
)
decycler
.
tortoise
=
decycler
.
tortoise
-
>
u
.
next
;
this
-
>
prev
=
decycler
.
hare
;
decycler
.
hare
-
>
u
.
next
=
this
;
decycler
.
hare
=
this
;
}
~
hb_decycler_node_t
(
)
{
hb_decycler_t
&
decycler
=
*
u
.
decycler
;
assert
(
decycler
.
hare
=
=
this
)
;
decycler
.
hare
=
prev
;
if
(
prev
)
prev
-
>
u
.
decycler
=
&
decycler
;
assert
(
decycler
.
tortoise
)
;
if
(
!
decycler
.
tortoise_asleep
)
decycler
.
tortoise
=
decycler
.
tortoise
-
>
prev
;
decycler
.
tortoise_asleep
=
!
decycler
.
tortoise_asleep
;
}
bool
visit
(
uintptr_t
value_
)
{
value
=
value_
;
hb_decycler_t
&
decycler
=
*
u
.
decycler
;
if
(
decycler
.
tortoise
=
=
this
)
return
true
;
if
(
decycler
.
tortoise
-
>
value
=
=
value
)
return
false
;
return
true
;
}
private
:
union
{
hb_decycler_t
*
decycler
;
hb_decycler_node_t
*
next
;
}
u
=
{
nullptr
}
;
hb_decycler_node_t
*
prev
=
nullptr
;
uintptr_t
value
=
0
;
}
;
#
endif
