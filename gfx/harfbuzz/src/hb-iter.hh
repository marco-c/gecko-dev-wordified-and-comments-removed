#
ifndef
HB_ITER_HH
#
define
HB_ITER_HH
#
include
"
hb
.
hh
"
#
include
"
hb
-
null
.
hh
"
template
<
typename
Iter
typename
Item
=
typename
Iter
:
:
__item_type__
>
struct
hb_iter_t
{
typedef
Iter
iter_t
;
typedef
iter_t
const_iter_t
;
typedef
Item
item_t
;
static
constexpr
unsigned
item_size
=
hb_static_size
(
Item
)
;
private
:
const
iter_t
*
thiz
(
)
const
{
return
static_cast
<
const
iter_t
*
>
(
this
)
;
}
iter_t
*
thiz
(
)
{
return
static_cast
<
iter_t
*
>
(
this
)
;
}
public
:
operator
iter_t
(
)
{
return
iter
(
)
;
}
explicit_operator
bool
(
)
const
{
return
more
(
)
;
}
item_t
&
operator
*
(
)
const
{
return
item
(
)
;
}
item_t
&
operator
[
]
(
signed
i
)
const
{
return
item_at
(
(
unsigned
)
i
)
;
}
iter_t
&
operator
+
=
(
unsigned
count
)
{
forward
(
count
)
;
return
*
thiz
(
)
;
}
iter_t
&
operator
+
+
(
)
{
next
(
)
;
return
*
thiz
(
)
;
}
iter_t
&
operator
-
=
(
unsigned
count
)
{
rewind
(
count
)
;
return
*
thiz
(
)
;
}
iter_t
&
operator
-
-
(
)
{
prev
(
)
;
return
*
thiz
(
)
;
}
iter_t
operator
+
(
unsigned
count
)
{
iter_t
c
(
*
thiz
(
)
)
;
c
+
=
count
;
return
c
;
}
iter_t
operator
+
+
(
int
)
{
iter_t
c
(
*
thiz
(
)
)
;
+
+
*
thiz
(
)
;
return
c
;
}
iter_t
operator
-
(
unsigned
count
)
{
iter_t
c
(
*
thiz
(
)
)
;
c
-
=
count
;
return
c
;
}
iter_t
operator
-
-
(
int
)
{
iter_t
c
(
*
thiz
(
)
)
;
-
-
*
thiz
(
)
;
return
c
;
}
iter_t
iter
(
)
const
{
return
*
thiz
(
)
;
}
const_iter_t
const_iter
(
)
const
{
return
iter
(
)
;
}
item_t
&
item
(
)
const
{
return
thiz
(
)
-
>
__item__
(
)
;
}
item_t
&
item_at
(
unsigned
i
)
const
{
return
thiz
(
)
-
>
__item_at__
(
i
)
;
}
bool
more
(
)
const
{
return
thiz
(
)
-
>
__more__
(
)
;
}
unsigned
len
(
)
const
{
return
thiz
(
)
-
>
__len__
(
)
;
}
void
next
(
)
{
thiz
(
)
-
>
__next__
(
)
;
}
void
forward
(
unsigned
n
)
{
thiz
(
)
-
>
__forward__
(
n
)
;
}
void
prev
(
)
{
thiz
(
)
-
>
__prev__
(
)
;
}
void
rewind
(
unsigned
n
)
{
thiz
(
)
-
>
__rewind__
(
n
)
;
}
bool
random_access
(
)
const
{
return
thiz
(
)
-
>
__random_access__
(
)
;
}
protected
:
hb_iter_t
(
)
{
}
hb_iter_t
(
const
hb_iter_t
&
o
HB_UNUSED
)
{
}
void
operator
=
(
const
hb_iter_t
&
o
HB_UNUSED
)
{
}
}
;
template
<
typename
Iter
typename
Item
=
typename
Iter
:
:
__item_type__
>
struct
hb_sorted_iter_t
:
hb_iter_t
<
Iter
Item
>
{
protected
:
hb_sorted_iter_t
(
)
{
}
hb_sorted_iter_t
(
const
hb_sorted_iter_t
&
o
)
:
hb_iter_t
<
Iter
Item
>
(
o
)
{
}
void
operator
=
(
const
hb_sorted_iter_t
&
o
HB_UNUSED
)
{
}
}
;
template
<
typename
iter_t
typename
item_t
=
typename
iter_t
:
:
__item_type__
>
struct
hb_iter_mixin_t
{
private
:
const
iter_t
*
thiz
(
)
const
{
return
static_cast
<
const
iter_t
*
>
(
this
)
;
}
iter_t
*
thiz
(
)
{
return
static_cast
<
iter_t
*
>
(
this
)
;
}
public
:
item_t
&
__item__
(
)
const
{
return
thiz
(
)
-
>
item_at
(
0
)
;
}
item_t
&
__item_at__
(
unsigned
i
)
const
{
return
*
(
thiz
(
)
+
i
)
;
}
bool
__more__
(
)
const
{
return
thiz
(
)
-
>
__len__
(
)
;
}
unsigned
__len__
(
)
const
{
iter_t
c
(
*
thiz
(
)
)
;
unsigned
l
=
0
;
while
(
c
)
{
c
+
+
;
l
+
+
;
}
;
return
l
;
}
void
__next__
(
)
{
thiz
(
)
-
>
forward
(
1
)
;
}
void
__forward__
(
unsigned
n
)
{
while
(
n
-
-
)
thiz
(
)
-
>
next
(
)
;
}
void
__prev__
(
)
{
thiz
(
)
-
>
rewind
(
1
)
;
}
void
__rewind__
(
unsigned
n
)
{
while
(
n
-
-
)
thiz
(
)
-
>
prev
(
)
;
}
bool
__random_access__
(
)
const
{
return
false
;
}
}
;
template
<
typename
C
typename
V
>
inline
void
hb_fill
(
const
C
&
c
const
V
&
v
)
{
for
(
typename
C
:
:
iter_t
i
(
c
)
;
i
;
i
+
+
)
hb_assign
(
*
i
v
)
;
}
template
<
typename
S
typename
D
>
inline
bool
hb_copy
(
hb_iter_t
<
D
>
&
id
hb_iter_t
<
S
>
&
is
)
{
for
(
;
id
&
&
is
;
+
+
id
+
+
is
)
*
id
=
*
is
;
return
!
is
;
}
#
endif
