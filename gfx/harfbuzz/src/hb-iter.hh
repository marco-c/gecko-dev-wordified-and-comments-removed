#
ifndef
HB_ITER_HH
#
define
HB_ITER_HH
#
include
"
hb
.
hh
"
template
<
typename
T
>
struct
Iter
;
#
if
0
template
<
typename
T
>
struct
Iter
{
explicit
inline
Iter
(
const
T
&
c
)
;
}
;
#
endif
template
<
typename
T
>
struct
Iter
<
T
*
>
{
typedef
T
Value
;
inline
Iter
(
T
*
array_
int
length_
)
:
array
(
array_
)
length
(
MAX
(
length_
0
)
)
{
}
template
<
unsigned
int
length_
>
explicit
inline
Iter
(
T
(
&
array_
)
[
length_
]
)
:
array
(
array_
)
length
(
length_
)
{
}
explicit_operator
inline
operator
bool
(
void
)
const
{
return
bool
(
length
)
;
}
inline
T
&
operator
*
(
void
)
{
if
(
unlikely
(
!
length
)
)
return
CrapOrNull
(
T
)
;
return
*
array
;
}
inline
T
&
operator
-
>
(
void
)
{
return
(
operator
*
)
;
}
inline
Iter
<
T
*
>
&
operator
+
+
(
void
)
{
if
(
unlikely
(
!
length
)
)
return
*
this
;
array
+
+
;
length
-
-
;
return
*
this
;
}
inline
void
operator
+
+
(
int
)
{
if
(
unlikely
(
!
length
)
)
return
;
array
+
+
;
length
-
-
;
}
inline
unsigned
int
len
(
void
)
const
{
return
length
;
}
inline
void
operator
+
=
(
unsigned
int
n
)
{
n
=
MIN
(
n
length
)
;
array
+
=
n
;
length
-
=
n
;
}
inline
Iter
<
T
*
>
&
operator
[
]
(
unsigned
int
i
)
{
if
(
unlikely
(
i
>
=
length
)
)
return
CrapOrNull
(
T
)
;
return
array
[
i
]
;
}
private
:
T
*
array
;
unsigned
int
length
;
}
;
static
inline
void
m
(
void
)
{
const
int
src
[
10
]
=
{
}
;
int
dst
[
20
]
;
Iter
<
const
int
*
>
s
(
src
)
;
Iter
<
const
int
*
>
s2
(
src
5
)
;
Iter
<
int
*
>
t
(
dst
)
;
s2
=
s
;
for
(
;
s
&
&
t
;
+
+
s
+
+
t
)
{
*
t
=
*
s
;
}
}
#
endif
