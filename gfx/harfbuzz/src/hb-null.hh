#
ifndef
HB_NULL_HH
#
define
HB_NULL_HH
#
include
"
hb
-
private
.
hh
"
#
define
HB_NULL_POOL_SIZE
264
extern
HB_INTERNAL
hb_vector_size_impl_t
const
_hb_NullPool
[
(
HB_NULL_POOL_SIZE
+
sizeof
(
hb_vector_size_impl_t
)
-
1
)
/
sizeof
(
hb_vector_size_impl_t
)
]
;
template
<
typename
Type
>
static
inline
Type
const
&
Null
(
void
)
{
static_assert
(
sizeof
(
Type
)
<
=
HB_NULL_POOL_SIZE
"
Increase
HB_NULL_POOL_SIZE
.
"
)
;
return
*
reinterpret_cast
<
Type
const
*
>
(
_hb_NullPool
)
;
}
#
define
Null
(
Type
)
Null
<
Type
>
(
)
#
define
DECLARE_NULL_NAMESPACE_BYTES
(
Namespace
Type
)
\
}
/
*
Close
namespace
.
*
/
\
extern
HB_INTERNAL
const
unsigned
char
_hb_Null_
#
#
Namespace
#
#
_
#
#
Type
[
Namespace
:
:
Type
:
:
min_size
]
;
\
template
<
>
\
/
*
static
*
/
inline
const
Namespace
:
:
Type
&
Null
<
Namespace
:
:
Type
>
(
void
)
{
\
return
*
reinterpret_cast
<
const
Namespace
:
:
Type
*
>
(
_hb_Null_
#
#
Namespace
#
#
_
#
#
Type
)
;
\
}
\
namespace
Namespace
{
\
static_assert
(
true
"
Just
so
we
take
semicolon
after
.
"
)
#
define
DEFINE_NULL_NAMESPACE_BYTES
(
Namespace
Type
)
\
const
unsigned
char
_hb_Null_
#
#
Namespace
#
#
_
#
#
Type
[
Namespace
:
:
Type
:
:
min_size
]
#
define
DECLARE_NULL_INSTANCE
(
Type
)
\
extern
HB_INTERNAL
const
Type
_hb_Null_
#
#
Type
;
\
template
<
>
\
/
*
static
*
/
inline
const
Type
&
Null
<
Type
>
(
void
)
{
\
return
_hb_Null_
#
#
Type
;
\
}
\
static_assert
(
true
"
Just
so
we
take
semicolon
after
.
"
)
#
define
DEFINE_NULL_INSTANCE
(
Type
)
\
const
Type
_hb_Null_
#
#
Type
extern
HB_INTERNAL
hb_vector_size_impl_t
_hb_CrapPool
[
(
HB_NULL_POOL_SIZE
+
sizeof
(
hb_vector_size_impl_t
)
-
1
)
/
sizeof
(
hb_vector_size_impl_t
)
]
;
template
<
typename
Type
>
static
inline
Type
&
Crap
(
void
)
{
static_assert
(
sizeof
(
Type
)
<
=
HB_NULL_POOL_SIZE
"
Increase
HB_NULL_POOL_SIZE
.
"
)
;
Type
*
obj
=
reinterpret_cast
<
Type
*
>
(
_hb_CrapPool
)
;
*
obj
=
Null
(
Type
)
;
return
*
obj
;
}
#
define
Crap
(
Type
)
Crap
<
Type
>
(
)
template
<
typename
Type
>
struct
CrapOrNull
{
static
inline
Type
&
get
(
void
)
{
return
Crap
(
Type
)
;
}
}
;
template
<
typename
Type
>
struct
CrapOrNull
<
const
Type
>
{
static
inline
Type
const
&
get
(
void
)
{
return
Null
(
Type
)
;
}
}
;
#
define
CrapOrNull
(
Type
)
CrapOrNull
<
Type
>
:
:
get
(
)
#
endif
