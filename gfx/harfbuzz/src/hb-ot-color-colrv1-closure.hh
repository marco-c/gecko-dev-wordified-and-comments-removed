#
ifndef
HB_OT_COLR_COLRV1_CLOSURE_HH
#
define
HB_OT_COLR_COLRV1_CLOSURE_HH
#
include
"
hb
-
open
-
type
.
hh
"
#
include
"
hb
-
ot
-
layout
-
common
.
hh
"
#
include
"
hb
-
ot
-
color
-
colr
-
table
.
hh
"
namespace
OT
{
HB_INTERNAL
void
PaintColrLayers
:
:
closurev1
(
hb_colrv1_closure_context_t
*
c
)
const
{
c
-
>
add_layer_indices
(
firstLayerIndex
numLayers
)
;
const
LayerV1List
&
paint_offset_lists
=
c
-
>
get_colr_table
(
)
-
>
get_layerV1List
(
)
;
for
(
unsigned
i
=
firstLayerIndex
;
i
<
firstLayerIndex
+
numLayers
;
i
+
+
)
{
const
Paint
&
paint
=
hb_addressof
(
paint_offset_lists
)
+
paint_offset_lists
[
i
]
;
paint
.
dispatch
(
c
)
;
}
}
HB_INTERNAL
void
PaintGlyph
:
:
closurev1
(
hb_colrv1_closure_context_t
*
c
)
const
{
c
-
>
add_glyph
(
gid
)
;
(
this
+
paint
)
.
dispatch
(
c
)
;
}
HB_INTERNAL
void
PaintColrGlyph
:
:
closurev1
(
hb_colrv1_closure_context_t
*
c
)
const
{
const
COLR
*
colr_table
=
c
-
>
get_colr_table
(
)
;
const
BaseGlyphV1Record
*
baseglyphV1_record
=
colr_table
-
>
get_base_glyphV1_record
(
gid
)
;
if
(
!
baseglyphV1_record
)
return
;
c
-
>
add_glyph
(
gid
)
;
const
BaseGlyphV1List
&
baseglyphV1_list
=
colr_table
-
>
get_baseglyphV1List
(
)
;
(
&
baseglyphV1_list
+
baseglyphV1_record
-
>
paint
)
.
dispatch
(
c
)
;
}
template
<
template
<
typename
>
class
Var
>
HB_INTERNAL
void
PaintTransform
<
Var
>
:
:
closurev1
(
hb_colrv1_closure_context_t
*
c
)
const
{
(
this
+
src
)
.
dispatch
(
c
)
;
}
template
<
template
<
typename
>
class
Var
>
HB_INTERNAL
void
PaintTranslate
<
Var
>
:
:
closurev1
(
hb_colrv1_closure_context_t
*
c
)
const
{
(
this
+
src
)
.
dispatch
(
c
)
;
}
template
<
template
<
typename
>
class
Var
>
HB_INTERNAL
void
PaintRotate
<
Var
>
:
:
closurev1
(
hb_colrv1_closure_context_t
*
c
)
const
{
(
this
+
src
)
.
dispatch
(
c
)
;
}
template
<
template
<
typename
>
class
Var
>
HB_INTERNAL
void
PaintSkew
<
Var
>
:
:
closurev1
(
hb_colrv1_closure_context_t
*
c
)
const
{
(
this
+
src
)
.
dispatch
(
c
)
;
}
HB_INTERNAL
void
PaintComposite
:
:
closurev1
(
hb_colrv1_closure_context_t
*
c
)
const
{
(
this
+
src
)
.
dispatch
(
c
)
;
(
this
+
backdrop
)
.
dispatch
(
c
)
;
}
}
#
endif
