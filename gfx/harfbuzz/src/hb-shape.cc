#
include
"
hb
.
hh
"
#
include
"
hb
-
shaper
.
hh
"
#
include
"
hb
-
shape
-
plan
.
hh
"
#
include
"
hb
-
buffer
.
hh
"
#
include
"
hb
-
font
.
hh
"
#
include
"
hb
-
machinery
.
hh
"
#
ifdef
HB_USE_ATEXIT
static
void
free_static_shaper_list
(
void
)
;
#
endif
static
const
char
*
nil_shaper_list
[
]
=
{
nullptr
}
;
static
struct
hb_shaper_list_lazy_loader_t
:
hb_lazy_loader_t
<
const
char
*
hb_shaper_list_lazy_loader_t
>
{
static
inline
const
char
*
*
create
(
void
)
{
const
char
*
*
shaper_list
=
(
const
char
*
*
)
calloc
(
1
+
HB_SHAPERS_COUNT
sizeof
(
const
char
*
)
)
;
if
(
unlikely
(
!
shaper_list
)
)
return
nullptr
;
const
hb_shaper_pair_t
*
shapers
=
_hb_shapers_get
(
)
;
unsigned
int
i
;
for
(
i
=
0
;
i
<
HB_SHAPERS_COUNT
;
i
+
+
)
shaper_list
[
i
]
=
shapers
[
i
]
.
name
;
shaper_list
[
i
]
=
nullptr
;
#
ifdef
HB_USE_ATEXIT
atexit
(
free_static_shaper_list
)
;
#
endif
return
shaper_list
;
}
static
inline
void
destroy
(
const
char
*
*
l
)
{
free
(
l
)
;
}
static
inline
const
char
*
*
get_null
(
void
)
{
return
nil_shaper_list
;
}
}
static_shaper_list
;
#
ifdef
HB_USE_ATEXIT
static
void
free_static_shaper_list
(
void
)
{
static_shaper_list
.
free_instance
(
)
;
}
#
endif
const
char
*
*
hb_shape_list_shapers
(
void
)
{
return
static_shaper_list
.
get_unconst
(
)
;
}
hb_bool_t
hb_shape_full
(
hb_font_t
*
font
hb_buffer_t
*
buffer
const
hb_feature_t
*
features
unsigned
int
num_features
const
char
*
const
*
shaper_list
)
{
hb_shape_plan_t
*
shape_plan
=
hb_shape_plan_create_cached2
(
font
-
>
face
&
buffer
-
>
props
features
num_features
font
-
>
coords
font
-
>
num_coords
shaper_list
)
;
hb_bool_t
res
=
hb_shape_plan_execute
(
shape_plan
font
buffer
features
num_features
)
;
hb_shape_plan_destroy
(
shape_plan
)
;
if
(
res
)
buffer
-
>
content_type
=
HB_BUFFER_CONTENT_TYPE_GLYPHS
;
return
res
;
}
void
hb_shape
(
hb_font_t
*
font
hb_buffer_t
*
buffer
const
hb_feature_t
*
features
unsigned
int
num_features
)
{
hb_shape_full
(
font
buffer
features
num_features
nullptr
)
;
}
