#
include
"
hb
.
hh
"
#
ifndef
HB_NO_DRAW
#
include
"
hb
-
draw
.
hh
"
static
void
hb_draw_move_to_nil
(
hb_draw_funcs_t
*
dfuncs
HB_UNUSED
void
*
draw_data
HB_UNUSED
hb_draw_state_t
*
st
HB_UNUSED
float
to_x
HB_UNUSED
float
to_y
HB_UNUSED
void
*
user_data
HB_UNUSED
)
{
}
static
void
hb_draw_line_to_nil
(
hb_draw_funcs_t
*
dfuncs
HB_UNUSED
void
*
draw_data
HB_UNUSED
hb_draw_state_t
*
st
HB_UNUSED
float
to_x
HB_UNUSED
float
to_y
HB_UNUSED
void
*
user_data
HB_UNUSED
)
{
}
static
void
hb_draw_quadratic_to_nil
(
hb_draw_funcs_t
*
dfuncs
void
*
draw_data
hb_draw_state_t
*
st
float
control_x
float
control_y
float
to_x
float
to_y
void
*
user_data
HB_UNUSED
)
{
dfuncs
-
>
emit_cubic_to
(
draw_data
*
st
(
st
-
>
current_x
+
2
.
f
*
control_x
)
/
3
.
f
(
st
-
>
current_y
+
2
.
f
*
control_y
)
/
3
.
f
(
to_x
+
2
.
f
*
control_x
)
/
3
.
f
(
to_y
+
2
.
f
*
control_y
)
/
3
.
f
to_x
to_y
)
;
}
static
void
hb_draw_cubic_to_nil
(
hb_draw_funcs_t
*
dfuncs
HB_UNUSED
void
*
draw_data
HB_UNUSED
hb_draw_state_t
*
st
HB_UNUSED
float
control1_x
HB_UNUSED
float
control1_y
HB_UNUSED
float
control2_x
HB_UNUSED
float
control2_y
HB_UNUSED
float
to_x
HB_UNUSED
float
to_y
HB_UNUSED
void
*
user_data
HB_UNUSED
)
{
}
static
void
hb_draw_close_path_nil
(
hb_draw_funcs_t
*
dfuncs
HB_UNUSED
void
*
draw_data
HB_UNUSED
hb_draw_state_t
*
st
HB_UNUSED
void
*
user_data
HB_UNUSED
)
{
}
#
define
HB_DRAW_FUNC_IMPLEMENT
(
name
)
\
\
void
\
hb_draw_funcs_set_
#
#
name
#
#
_func
(
hb_draw_funcs_t
*
dfuncs
\
hb_draw_
#
#
name
#
#
_func_t
func
\
void
*
user_data
\
hb_destroy_func_t
destroy
)
\
{
\
if
(
hb_object_is_immutable
(
dfuncs
)
)
\
return
;
\
\
if
(
dfuncs
-
>
destroy
.
name
)
\
dfuncs
-
>
destroy
.
name
(
dfuncs
-
>
user_data
.
name
)
;
\
\
if
(
func
)
{
\
dfuncs
-
>
func
.
name
=
func
;
\
dfuncs
-
>
user_data
.
name
=
user_data
;
\
dfuncs
-
>
destroy
.
name
=
destroy
;
\
}
else
{
\
dfuncs
-
>
func
.
name
=
hb_draw_
#
#
name
#
#
_nil
;
\
dfuncs
-
>
user_data
.
name
=
nullptr
;
\
dfuncs
-
>
destroy
.
name
=
nullptr
;
\
}
\
}
HB_DRAW_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_DRAW_FUNC_IMPLEMENT
hb_draw_funcs_t
*
hb_draw_funcs_create
(
)
{
hb_draw_funcs_t
*
dfuncs
;
if
(
unlikely
(
!
(
dfuncs
=
hb_object_create
<
hb_draw_funcs_t
>
(
)
)
)
)
return
const_cast
<
hb_draw_funcs_t
*
>
(
&
Null
(
hb_draw_funcs_t
)
)
;
dfuncs
-
>
func
=
Null
(
hb_draw_funcs_t
)
.
func
;
return
dfuncs
;
}
DEFINE_NULL_INSTANCE
(
hb_draw_funcs_t
)
=
{
HB_OBJECT_HEADER_STATIC
{
#
define
HB_DRAW_FUNC_IMPLEMENT
(
name
)
hb_draw_
#
#
name
#
#
_nil
HB_DRAW_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_DRAW_FUNC_IMPLEMENT
}
}
;
hb_draw_funcs_t
*
hb_draw_funcs_reference
(
hb_draw_funcs_t
*
dfuncs
)
{
return
hb_object_reference
(
dfuncs
)
;
}
void
hb_draw_funcs_destroy
(
hb_draw_funcs_t
*
dfuncs
)
{
if
(
!
hb_object_destroy
(
dfuncs
)
)
return
;
#
define
HB_DRAW_FUNC_IMPLEMENT
(
name
)
\
if
(
dfuncs
-
>
destroy
.
name
)
dfuncs
-
>
destroy
.
name
(
dfuncs
-
>
user_data
.
name
)
;
HB_DRAW_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_DRAW_FUNC_IMPLEMENT
hb_free
(
dfuncs
)
;
}
void
hb_draw_funcs_make_immutable
(
hb_draw_funcs_t
*
dfuncs
)
{
if
(
hb_object_is_immutable
(
dfuncs
)
)
return
;
hb_object_make_immutable
(
dfuncs
)
;
}
hb_bool_t
hb_draw_funcs_is_immutable
(
hb_draw_funcs_t
*
dfuncs
)
{
return
hb_object_is_immutable
(
dfuncs
)
;
}
void
hb_draw_move_to
(
hb_draw_funcs_t
*
dfuncs
void
*
draw_data
hb_draw_state_t
*
st
float
to_x
float
to_y
)
{
dfuncs
-
>
move_to
(
draw_data
*
st
to_x
to_y
)
;
}
void
hb_draw_line_to
(
hb_draw_funcs_t
*
dfuncs
void
*
draw_data
hb_draw_state_t
*
st
float
to_x
float
to_y
)
{
dfuncs
-
>
line_to
(
draw_data
*
st
to_x
to_y
)
;
}
void
hb_draw_quadratic_to
(
hb_draw_funcs_t
*
dfuncs
void
*
draw_data
hb_draw_state_t
*
st
float
control_x
float
control_y
float
to_x
float
to_y
)
{
dfuncs
-
>
quadratic_to
(
draw_data
*
st
control_x
control_y
to_x
to_y
)
;
}
void
hb_draw_cubic_to
(
hb_draw_funcs_t
*
dfuncs
void
*
draw_data
hb_draw_state_t
*
st
float
control1_x
float
control1_y
float
control2_x
float
control2_y
float
to_x
float
to_y
)
{
dfuncs
-
>
cubic_to
(
draw_data
*
st
control1_x
control1_y
control2_x
control2_y
to_x
to_y
)
;
}
void
hb_draw_close_path
(
hb_draw_funcs_t
*
dfuncs
void
*
draw_data
hb_draw_state_t
*
st
)
{
dfuncs
-
>
close_path
(
draw_data
*
st
)
;
}
#
endif
