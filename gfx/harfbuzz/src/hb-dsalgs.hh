#
ifndef
HB_DSALGS_HH
#
define
HB_DSALGS_HH
#
include
"
hb
-
private
.
hh
"
static
inline
void
*
hb_bsearch_r
(
const
void
*
key
const
void
*
base
size_t
nmemb
size_t
size
int
(
*
compar
)
(
const
void
*
_key
const
void
*
_item
void
*
_arg
)
void
*
arg
)
{
int
min
=
0
max
=
(
int
)
nmemb
-
1
;
while
(
min
<
=
max
)
{
int
mid
=
(
min
+
max
)
/
2
;
const
void
*
p
=
(
const
void
*
)
(
(
(
const
char
*
)
base
)
+
(
mid
*
size
)
)
;
int
c
=
compar
(
key
p
arg
)
;
if
(
c
<
0
)
max
=
mid
-
1
;
else
if
(
c
>
0
)
min
=
mid
+
1
;
else
return
(
void
*
)
p
;
}
return
nullptr
;
}
static
int
sort_r_cmpswap
(
char
*
__restrict
a
char
*
__restrict
b
size_t
w
int
(
*
compar
)
(
const
void
*
_a
const
void
*
_b
void
*
_arg
)
void
*
arg
)
{
char
tmp
*
end
=
a
+
w
;
if
(
compar
(
a
b
arg
)
>
0
)
{
for
(
;
a
<
end
;
a
+
+
b
+
+
)
{
tmp
=
*
a
;
*
a
=
*
b
;
*
b
=
tmp
;
}
return
1
;
}
return
0
;
}
static
inline
void
sort_r_simple
(
void
*
base
size_t
nel
size_t
w
int
(
*
compar
)
(
const
void
*
_a
const
void
*
_b
void
*
_arg
)
void
*
arg
)
{
char
*
b
=
(
char
*
)
base
*
end
=
b
+
nel
*
w
;
if
(
nel
<
7
)
{
char
*
pi
*
pj
;
for
(
pi
=
b
+
w
;
pi
<
end
;
pi
+
=
w
)
{
for
(
pj
=
pi
;
pj
>
b
&
&
sort_r_cmpswap
(
pj
-
w
pj
w
compar
arg
)
;
pj
-
=
w
)
{
}
}
}
else
{
char
*
x
*
y
*
xend
ch
;
char
*
pl
*
pr
;
char
*
last
=
b
+
w
*
(
nel
-
1
)
*
tmp
;
char
*
l
[
3
]
;
l
[
0
]
=
b
;
l
[
1
]
=
b
+
w
*
(
nel
/
2
)
;
l
[
2
]
=
last
;
if
(
compar
(
l
[
0
]
l
[
1
]
arg
)
>
0
)
{
tmp
=
l
[
0
]
;
l
[
0
]
=
l
[
1
]
;
l
[
1
]
=
tmp
;
}
if
(
compar
(
l
[
1
]
l
[
2
]
arg
)
>
0
)
{
tmp
=
l
[
1
]
;
l
[
1
]
=
l
[
2
]
;
l
[
2
]
=
tmp
;
if
(
compar
(
l
[
0
]
l
[
1
]
arg
)
>
0
)
{
tmp
=
l
[
0
]
;
l
[
0
]
=
l
[
1
]
;
l
[
1
]
=
tmp
;
}
}
for
(
x
=
l
[
1
]
y
=
last
xend
=
x
+
w
;
x
<
xend
;
x
+
+
y
+
+
)
{
ch
=
*
x
;
*
x
=
*
y
;
*
y
=
ch
;
}
pl
=
b
;
pr
=
last
;
while
(
pl
<
pr
)
{
for
(
;
pl
<
pr
;
pl
+
=
w
)
{
if
(
sort_r_cmpswap
(
pl
pr
w
compar
arg
)
)
{
pr
-
=
w
;
break
;
}
}
for
(
;
pl
<
pr
;
pr
-
=
w
)
{
if
(
sort_r_cmpswap
(
pl
pr
w
compar
arg
)
)
{
pl
+
=
w
;
break
;
}
}
}
sort_r_simple
(
b
(
pl
-
b
)
/
w
w
compar
arg
)
;
sort_r_simple
(
pl
+
w
(
end
-
(
pl
+
w
)
)
/
w
w
compar
arg
)
;
}
}
static
inline
void
hb_sort_r
(
void
*
base
size_t
nel
size_t
width
int
(
*
compar
)
(
const
void
*
_a
const
void
*
_b
void
*
_arg
)
void
*
arg
)
{
sort_r_simple
(
base
nel
width
compar
arg
)
;
}
#
endif
