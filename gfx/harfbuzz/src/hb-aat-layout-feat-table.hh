#
ifndef
HB_AAT_LAYOUT_FEAT_TABLE_HH
#
define
HB_AAT_LAYOUT_FEAT_TABLE_HH
#
include
"
hb
-
aat
-
layout
-
common
-
private
.
hh
"
#
define
HB_AAT_TAG_feat
HB_TAG
(
'
f
'
'
e
'
'
a
'
'
t
'
)
namespace
AAT
{
struct
SettingName
{
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
)
)
;
}
protected
:
HBUINT16
setting
;
NameID
nameIndex
;
public
:
DEFINE_SIZE_STATIC
(
4
)
;
}
;
struct
FeatureName
{
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
const
void
*
base
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
&
&
(
base
+
settingTable
)
.
sanitize
(
c
nSettings
)
)
)
;
}
enum
{
Exclusive
=
0x8000
NotDefault
=
0x4000
IndexMask
=
0x00FF
}
;
protected
:
HBUINT16
feature
;
HBUINT16
nSettings
;
LOffsetTo
<
UnsizedArrayOf
<
SettingName
>
>
settingTable
;
HBUINT16
featureFlags
;
HBINT16
nameIndex
;
public
:
DEFINE_SIZE_STATIC
(
12
)
;
}
;
struct
feat
{
static
const
hb_tag_t
tableTag
=
HB_AAT_TAG_feat
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
&
&
names
.
sanitize
(
c
featureNameCount
this
)
)
)
;
}
protected
:
FixedVersion
<
>
version
;
HBUINT16
featureNameCount
;
HBUINT16
reserved1
;
HBUINT32
reserved2
;
UnsizedArrayOf
<
FeatureName
>
names
;
public
:
DEFINE_SIZE_STATIC
(
24
)
;
}
;
}
#
endif
