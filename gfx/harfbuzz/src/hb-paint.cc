#
include
"
hb
.
hh
"
#
ifndef
HB_NO_PAINT
#
include
"
hb
-
paint
.
hh
"
static
void
hb_paint_push_transform_nil
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
float
xx
float
yx
float
xy
float
yy
float
dx
float
dy
void
*
user_data
)
{
}
static
void
hb_paint_pop_transform_nil
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
void
*
user_data
)
{
}
static
hb_bool_t
hb_paint_color_glyph_nil
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
hb_codepoint_t
glyph
hb_font_t
*
font
void
*
user_data
)
{
return
false
;
}
static
void
hb_paint_push_clip_glyph_nil
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
hb_codepoint_t
glyph
hb_font_t
*
font
void
*
user_data
)
{
}
static
void
hb_paint_push_clip_rectangle_nil
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
float
xmin
float
ymin
float
xmax
float
ymax
void
*
user_data
)
{
}
static
void
hb_paint_pop_clip_nil
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
void
*
user_data
)
{
}
static
void
hb_paint_color_nil
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
hb_bool_t
is_foreground
hb_color_t
color
void
*
user_data
)
{
}
static
hb_bool_t
hb_paint_image_nil
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
hb_blob_t
*
image
unsigned
int
width
unsigned
int
height
hb_tag_t
format
float
slant_xy_deprecated
hb_glyph_extents_t
*
extents
void
*
user_data
)
{
return
false
;
}
static
void
hb_paint_linear_gradient_nil
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
hb_color_line_t
*
color_line
float
x0
float
y0
float
x1
float
y1
float
x2
float
y2
void
*
user_data
)
{
}
static
void
hb_paint_radial_gradient_nil
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
hb_color_line_t
*
color_line
float
x0
float
y0
float
r0
float
x1
float
y1
float
r1
void
*
user_data
)
{
}
static
void
hb_paint_sweep_gradient_nil
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
hb_color_line_t
*
color_line
float
x0
float
y0
float
start_angle
float
end_angle
void
*
user_data
)
{
}
static
void
hb_paint_push_group_nil
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
void
*
user_data
)
{
}
static
void
hb_paint_pop_group_nil
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
hb_paint_composite_mode_t
mode
void
*
user_data
)
{
}
static
hb_bool_t
hb_paint_custom_palette_color_nil
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
unsigned
int
color_index
hb_color_t
*
color
void
*
user_data
)
{
return
false
;
}
static
bool
_hb_paint_funcs_set_preamble
(
hb_paint_funcs_t
*
funcs
bool
func_is_null
void
*
*
user_data
hb_destroy_func_t
*
destroy
)
{
if
(
hb_object_is_immutable
(
funcs
)
)
{
if
(
*
destroy
)
(
*
destroy
)
(
*
user_data
)
;
return
false
;
}
if
(
func_is_null
)
{
if
(
*
destroy
)
(
*
destroy
)
(
*
user_data
)
;
*
destroy
=
nullptr
;
*
user_data
=
nullptr
;
}
return
true
;
}
static
bool
_hb_paint_funcs_set_middle
(
hb_paint_funcs_t
*
funcs
void
*
user_data
hb_destroy_func_t
destroy
)
{
if
(
user_data
&
&
!
funcs
-
>
user_data
)
{
funcs
-
>
user_data
=
(
decltype
(
funcs
-
>
user_data
)
)
hb_calloc
(
1
sizeof
(
*
funcs
-
>
user_data
)
)
;
if
(
unlikely
(
!
funcs
-
>
user_data
)
)
goto
fail
;
}
if
(
destroy
&
&
!
funcs
-
>
destroy
)
{
funcs
-
>
destroy
=
(
decltype
(
funcs
-
>
destroy
)
)
hb_calloc
(
1
sizeof
(
*
funcs
-
>
destroy
)
)
;
if
(
unlikely
(
!
funcs
-
>
destroy
)
)
goto
fail
;
}
return
true
;
fail
:
if
(
destroy
)
(
destroy
)
(
user_data
)
;
return
false
;
}
#
define
HB_PAINT_FUNC_IMPLEMENT
(
name
)
\
\
void
\
hb_paint_funcs_set_
#
#
name
#
#
_func
(
hb_paint_funcs_t
*
funcs
\
hb_paint_
#
#
name
#
#
_func_t
func
\
void
*
user_data
\
hb_destroy_func_t
destroy
)
\
{
\
if
(
!
_hb_paint_funcs_set_preamble
(
funcs
!
func
&
user_data
&
destroy
)
)
\
return
;
\
\
if
(
funcs
-
>
destroy
&
&
funcs
-
>
destroy
-
>
name
)
\
funcs
-
>
destroy
-
>
name
(
!
funcs
-
>
user_data
?
nullptr
:
funcs
-
>
user_data
-
>
name
)
;
\
\
if
(
!
_hb_paint_funcs_set_middle
(
funcs
user_data
destroy
)
)
\
return
;
\
\
if
(
func
)
\
funcs
-
>
func
.
name
=
func
;
\
else
\
funcs
-
>
func
.
name
=
hb_paint_
#
#
name
#
#
_nil
;
\
\
if
(
funcs
-
>
user_data
)
\
funcs
-
>
user_data
-
>
name
=
user_data
;
\
if
(
funcs
-
>
destroy
)
\
funcs
-
>
destroy
-
>
name
=
destroy
;
\
}
HB_PAINT_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_PAINT_FUNC_IMPLEMENT
hb_paint_funcs_t
*
hb_paint_funcs_create
(
)
{
hb_paint_funcs_t
*
funcs
;
if
(
unlikely
(
!
(
funcs
=
hb_object_create
<
hb_paint_funcs_t
>
(
)
)
)
)
return
const_cast
<
hb_paint_funcs_t
*
>
(
&
Null
(
hb_paint_funcs_t
)
)
;
funcs
-
>
func
=
Null
(
hb_paint_funcs_t
)
.
func
;
return
funcs
;
}
DEFINE_NULL_INSTANCE
(
hb_paint_funcs_t
)
=
{
HB_OBJECT_HEADER_STATIC
{
#
define
HB_PAINT_FUNC_IMPLEMENT
(
name
)
hb_paint_
#
#
name
#
#
_nil
HB_PAINT_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_PAINT_FUNC_IMPLEMENT
}
}
;
hb_paint_funcs_t
*
hb_paint_funcs_get_empty
(
)
{
return
const_cast
<
hb_paint_funcs_t
*
>
(
&
Null
(
hb_paint_funcs_t
)
)
;
}
hb_paint_funcs_t
*
hb_paint_funcs_reference
(
hb_paint_funcs_t
*
funcs
)
{
return
hb_object_reference
(
funcs
)
;
}
void
hb_paint_funcs_destroy
(
hb_paint_funcs_t
*
funcs
)
{
if
(
!
hb_object_destroy
(
funcs
)
)
return
;
if
(
funcs
-
>
destroy
)
{
#
define
HB_PAINT_FUNC_IMPLEMENT
(
name
)
\
if
(
funcs
-
>
destroy
-
>
name
)
funcs
-
>
destroy
-
>
name
(
!
funcs
-
>
user_data
?
nullptr
:
funcs
-
>
user_data
-
>
name
)
;
HB_PAINT_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_PAINT_FUNC_IMPLEMENT
}
hb_free
(
funcs
-
>
destroy
)
;
hb_free
(
funcs
-
>
user_data
)
;
hb_free
(
funcs
)
;
}
hb_bool_t
hb_paint_funcs_set_user_data
(
hb_paint_funcs_t
*
funcs
hb_user_data_key_t
*
key
void
*
data
hb_destroy_func_t
destroy
hb_bool_t
replace
)
{
return
hb_object_set_user_data
(
funcs
key
data
destroy
replace
)
;
}
void
*
hb_paint_funcs_get_user_data
(
const
hb_paint_funcs_t
*
funcs
hb_user_data_key_t
*
key
)
{
return
hb_object_get_user_data
(
funcs
key
)
;
}
void
hb_paint_funcs_make_immutable
(
hb_paint_funcs_t
*
funcs
)
{
if
(
hb_object_is_immutable
(
funcs
)
)
return
;
hb_object_make_immutable
(
funcs
)
;
}
hb_bool_t
hb_paint_funcs_is_immutable
(
hb_paint_funcs_t
*
funcs
)
{
return
hb_object_is_immutable
(
funcs
)
;
}
unsigned
int
hb_color_line_get_color_stops
(
hb_color_line_t
*
color_line
unsigned
int
start
unsigned
int
*
count
hb_color_stop_t
*
color_stops
)
{
return
color_line
-
>
get_color_stops
(
color_line
color_line
-
>
data
start
count
color_stops
color_line
-
>
get_color_stops_user_data
)
;
}
hb_paint_extend_t
hb_color_line_get_extend
(
hb_color_line_t
*
color_line
)
{
return
color_line
-
>
get_extend
(
color_line
color_line
-
>
data
color_line
-
>
get_extend_user_data
)
;
}
void
hb_paint_push_transform
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
float
xx
float
yx
float
xy
float
yy
float
dx
float
dy
)
{
funcs
-
>
push_transform
(
paint_data
xx
yx
xy
yy
dx
dy
)
;
}
void
hb_paint_push_font_transform
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
const
hb_font_t
*
font
)
{
funcs
-
>
push_font_transform
(
paint_data
font
)
;
}
void
hb_paint_push_inverse_font_transform
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
const
hb_font_t
*
font
)
{
funcs
-
>
push_inverse_font_transform
(
paint_data
font
)
;
}
void
hb_paint_pop_transform
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
)
{
funcs
-
>
pop_transform
(
paint_data
)
;
}
hb_bool_t
hb_paint_color_glyph
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
hb_codepoint_t
glyph
hb_font_t
*
font
)
{
return
funcs
-
>
color_glyph
(
paint_data
glyph
font
)
;
}
void
hb_paint_push_clip_glyph
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
hb_codepoint_t
glyph
hb_font_t
*
font
)
{
funcs
-
>
push_clip_glyph
(
paint_data
glyph
font
)
;
}
void
hb_paint_push_clip_rectangle
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
float
xmin
float
ymin
float
xmax
float
ymax
)
{
funcs
-
>
push_clip_rectangle
(
paint_data
xmin
ymin
xmax
ymax
)
;
}
void
hb_paint_pop_clip
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
)
{
funcs
-
>
pop_clip
(
paint_data
)
;
}
void
hb_paint_color
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
hb_bool_t
is_foreground
hb_color_t
color
)
{
funcs
-
>
color
(
paint_data
is_foreground
color
)
;
}
void
hb_paint_image
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
hb_blob_t
*
image
unsigned
int
width
unsigned
int
height
hb_tag_t
format
HB_UNUSED
float
slant
hb_glyph_extents_t
*
extents
)
{
funcs
-
>
image
(
paint_data
image
width
height
format
0
.
f
extents
)
;
}
void
hb_paint_linear_gradient
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
hb_color_line_t
*
color_line
float
x0
float
y0
float
x1
float
y1
float
x2
float
y2
)
{
funcs
-
>
linear_gradient
(
paint_data
color_line
x0
y0
x1
y1
x2
y2
)
;
}
void
hb_paint_radial_gradient
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
hb_color_line_t
*
color_line
float
x0
float
y0
float
r0
float
x1
float
y1
float
r1
)
{
funcs
-
>
radial_gradient
(
paint_data
color_line
x0
y0
r0
x1
y1
r1
)
;
}
void
hb_paint_sweep_gradient
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
hb_color_line_t
*
color_line
float
x0
float
y0
float
start_angle
float
end_angle
)
{
funcs
-
>
sweep_gradient
(
paint_data
color_line
x0
y0
start_angle
end_angle
)
;
}
void
hb_paint_push_group
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
)
{
funcs
-
>
push_group
(
paint_data
)
;
}
void
hb_paint_pop_group
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
hb_paint_composite_mode_t
mode
)
{
funcs
-
>
pop_group
(
paint_data
mode
)
;
}
hb_bool_t
hb_paint_custom_palette_color
(
hb_paint_funcs_t
*
funcs
void
*
paint_data
unsigned
int
color_index
hb_color_t
*
color
)
{
return
funcs
-
>
custom_palette_color
(
paint_data
color_index
color
)
;
}
#
endif
