#
include
"
hb
.
hh
"
#
ifndef
HB_NO_STYLE
#
ifdef
HB_EXPERIMENTAL_API
#
include
"
hb
-
aat
-
fdsc
-
table
.
hh
"
#
include
"
hb
-
ot
-
var
-
avar
-
table
.
hh
"
#
include
"
hb
-
ot
-
var
-
fvar
-
table
.
hh
"
#
include
"
hb
-
ot
-
stat
-
table
.
hh
"
#
include
"
hb
-
ot
-
os2
-
table
.
hh
"
#
include
"
hb
-
ot
-
head
-
table
.
hh
"
#
include
"
hb
-
ot
-
post
-
table
.
hh
"
#
include
"
hb
-
ot
-
face
.
hh
"
typedef
enum
{
HB_STYLE_TAG_ITALIC
=
HB_TAG
(
'
i
'
'
t
'
'
a
'
'
l
'
)
HB_STYLE_TAG_OPTICAL_SIZE
=
HB_TAG
(
'
o
'
'
p
'
'
s
'
'
z
'
)
HB_STYLE_TAG_SLANT
=
HB_TAG
(
'
s
'
'
l
'
'
n
'
'
t
'
)
HB_STYLE_TAG_WIDTH
=
HB_TAG
(
'
w
'
'
d
'
'
t
'
'
h
'
)
HB_STYLE_TAG_WEIGHT
=
HB_TAG
(
'
w
'
'
g
'
'
h
'
'
t
'
)
_HB_STYLE_TAG_MAX_VALUE
=
HB_TAG_MAX_SIGNED
}
hb_style_tag_t
;
float
hb_style_get_value
(
hb_font_t
*
font
hb_tag_t
tag
)
{
hb_style_tag_t
style_tag
=
(
hb_style_tag_t
)
tag
;
hb_face_t
*
face
=
font
-
>
face
;
#
ifndef
HB_NO_VAR
hb_ot_var_axis_info_t
axis
;
if
(
hb_ot_var_find_axis_info
(
face
style_tag
&
axis
)
)
{
if
(
axis
.
axis_index
<
font
-
>
num_coords
)
return
font
-
>
design_coords
[
axis
.
axis_index
]
;
return
axis
.
default_value
;
}
#
endif
if
(
style_tag
=
=
HB_STYLE_TAG_OPTICAL_SIZE
&
&
font
-
>
ptem
)
return
font
-
>
ptem
;
float
value
;
if
(
face
-
>
table
.
STAT
-
>
get_value
(
style_tag
&
value
)
)
return
value
;
const
AAT
:
:
FontDescriptor
&
descriptor
=
face
-
>
table
.
fdsc
-
>
get_descriptor
(
style_tag
)
;
if
(
descriptor
.
has_data
(
)
)
{
float
value
=
descriptor
.
get_value
(
)
;
if
(
style_tag
=
=
HB_STYLE_TAG_WEIGHT
)
value
*
=
400
.
f
;
if
(
style_tag
=
=
HB_STYLE_TAG_WIDTH
)
value
*
=
100
.
f
;
return
value
;
}
switch
(
(
unsigned
)
style_tag
)
{
case
HB_STYLE_TAG_ITALIC
:
return
face
-
>
table
.
OS2
-
>
is_italic
(
)
|
|
face
-
>
table
.
head
-
>
is_italic
(
)
?
1
:
0
;
case
HB_STYLE_TAG_OPTICAL_SIZE
:
{
unsigned
int
lower
upper
;
return
face
-
>
table
.
OS2
-
>
v5
(
)
.
get_optical_size
(
&
lower
&
upper
)
?
(
float
)
(
lower
+
upper
)
/
2
.
f
:
12
.
f
;
}
case
HB_STYLE_TAG_SLANT
:
return
face
-
>
table
.
post
-
>
table
-
>
italicAngle
.
to_float
(
)
;
case
HB_STYLE_TAG_WIDTH
:
return
face
-
>
table
.
OS2
-
>
has_data
(
)
?
face
-
>
table
.
OS2
-
>
get_width
(
)
:
(
face
-
>
table
.
head
-
>
is_condensed
(
)
?
75
:
100
)
;
case
HB_STYLE_TAG_WEIGHT
:
return
face
-
>
table
.
OS2
-
>
has_data
(
)
?
face
-
>
table
.
OS2
-
>
usWeightClass
:
(
face
-
>
table
.
head
-
>
is_bold
(
)
?
700
:
400
)
;
default
:
return
0
;
}
}
#
endif
#
endif
