#
include
"
hb
-
private
.
hh
"
#
include
"
hb
-
ot
-
layout
-
private
.
hh
"
#
include
"
hb
-
font
-
private
.
hh
"
#
include
"
hb
-
open
-
file
-
private
.
hh
"
#
include
"
hb
-
ot
-
head
-
table
.
hh
"
#
include
"
hb
-
ot
-
maxp
-
table
.
hh
"
#
include
<
string
.
h
>
static
hb_bool_t
hb_font_get_font_h_extents_nil
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_font_extents_t
*
metrics
void
*
user_data
HB_UNUSED
)
{
memset
(
metrics
0
sizeof
(
*
metrics
)
)
;
return
false
;
}
static
hb_bool_t
hb_font_get_font_h_extents_parent
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_font_extents_t
*
metrics
void
*
user_data
HB_UNUSED
)
{
hb_bool_t
ret
=
font
-
>
parent
-
>
get_font_h_extents
(
metrics
)
;
if
(
ret
)
{
metrics
-
>
ascender
=
font
-
>
parent_scale_y_distance
(
metrics
-
>
ascender
)
;
metrics
-
>
descender
=
font
-
>
parent_scale_y_distance
(
metrics
-
>
descender
)
;
metrics
-
>
line_gap
=
font
-
>
parent_scale_y_distance
(
metrics
-
>
line_gap
)
;
}
return
ret
;
}
static
hb_bool_t
hb_font_get_font_v_extents_nil
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_font_extents_t
*
metrics
void
*
user_data
HB_UNUSED
)
{
memset
(
metrics
0
sizeof
(
*
metrics
)
)
;
return
false
;
}
static
hb_bool_t
hb_font_get_font_v_extents_parent
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_font_extents_t
*
metrics
void
*
user_data
HB_UNUSED
)
{
hb_bool_t
ret
=
font
-
>
parent
-
>
get_font_v_extents
(
metrics
)
;
if
(
ret
)
{
metrics
-
>
ascender
=
font
-
>
parent_scale_x_distance
(
metrics
-
>
ascender
)
;
metrics
-
>
descender
=
font
-
>
parent_scale_x_distance
(
metrics
-
>
descender
)
;
metrics
-
>
line_gap
=
font
-
>
parent_scale_x_distance
(
metrics
-
>
line_gap
)
;
}
return
ret
;
}
static
hb_bool_t
hb_font_get_nominal_glyph_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
unicode
hb_codepoint_t
*
glyph
void
*
user_data
HB_UNUSED
)
{
*
glyph
=
0
;
return
false
;
}
static
hb_bool_t
hb_font_get_nominal_glyph_parent
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
unicode
hb_codepoint_t
*
glyph
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
parent
-
>
get_nominal_glyph
(
unicode
glyph
)
;
}
static
hb_bool_t
hb_font_get_variation_glyph_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
unicode
hb_codepoint_t
variation_selector
hb_codepoint_t
*
glyph
void
*
user_data
HB_UNUSED
)
{
*
glyph
=
0
;
return
false
;
}
static
hb_bool_t
hb_font_get_variation_glyph_parent
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
unicode
hb_codepoint_t
variation_selector
hb_codepoint_t
*
glyph
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
parent
-
>
get_variation_glyph
(
unicode
variation_selector
glyph
)
;
}
static
hb_position_t
hb_font_get_glyph_h_advance_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
x_scale
;
}
static
hb_position_t
hb_font_get_glyph_h_advance_parent
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
parent_scale_x_distance
(
font
-
>
parent
-
>
get_glyph_h_advance
(
glyph
)
)
;
}
static
hb_position_t
hb_font_get_glyph_v_advance_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
y_scale
;
}
static
hb_position_t
hb_font_get_glyph_v_advance_parent
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
parent_scale_y_distance
(
font
-
>
parent
-
>
get_glyph_v_advance
(
glyph
)
)
;
}
static
hb_bool_t
hb_font_get_glyph_h_origin_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
hb_position_t
*
x
hb_position_t
*
y
void
*
user_data
HB_UNUSED
)
{
*
x
=
*
y
=
0
;
return
true
;
}
static
hb_bool_t
hb_font_get_glyph_h_origin_parent
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
hb_position_t
*
x
hb_position_t
*
y
void
*
user_data
HB_UNUSED
)
{
hb_bool_t
ret
=
font
-
>
parent
-
>
get_glyph_h_origin
(
glyph
x
y
)
;
if
(
ret
)
font
-
>
parent_scale_position
(
x
y
)
;
return
ret
;
}
static
hb_bool_t
hb_font_get_glyph_v_origin_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
hb_position_t
*
x
hb_position_t
*
y
void
*
user_data
HB_UNUSED
)
{
*
x
=
*
y
=
0
;
return
false
;
}
static
hb_bool_t
hb_font_get_glyph_v_origin_parent
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
hb_position_t
*
x
hb_position_t
*
y
void
*
user_data
HB_UNUSED
)
{
hb_bool_t
ret
=
font
-
>
parent
-
>
get_glyph_v_origin
(
glyph
x
y
)
;
if
(
ret
)
font
-
>
parent_scale_position
(
x
y
)
;
return
ret
;
}
static
hb_position_t
hb_font_get_glyph_h_kerning_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
left_glyph
hb_codepoint_t
right_glyph
void
*
user_data
HB_UNUSED
)
{
return
0
;
}
static
hb_position_t
hb_font_get_glyph_h_kerning_parent
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
left_glyph
hb_codepoint_t
right_glyph
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
parent_scale_x_distance
(
font
-
>
parent
-
>
get_glyph_h_kerning
(
left_glyph
right_glyph
)
)
;
}
static
hb_position_t
hb_font_get_glyph_v_kerning_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
top_glyph
hb_codepoint_t
bottom_glyph
void
*
user_data
HB_UNUSED
)
{
return
0
;
}
static
hb_position_t
hb_font_get_glyph_v_kerning_parent
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
top_glyph
hb_codepoint_t
bottom_glyph
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
parent_scale_y_distance
(
font
-
>
parent
-
>
get_glyph_v_kerning
(
top_glyph
bottom_glyph
)
)
;
}
static
hb_bool_t
hb_font_get_glyph_extents_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
hb_glyph_extents_t
*
extents
void
*
user_data
HB_UNUSED
)
{
memset
(
extents
0
sizeof
(
*
extents
)
)
;
return
false
;
}
static
hb_bool_t
hb_font_get_glyph_extents_parent
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
hb_glyph_extents_t
*
extents
void
*
user_data
HB_UNUSED
)
{
hb_bool_t
ret
=
font
-
>
parent
-
>
get_glyph_extents
(
glyph
extents
)
;
if
(
ret
)
{
font
-
>
parent_scale_position
(
&
extents
-
>
x_bearing
&
extents
-
>
y_bearing
)
;
font
-
>
parent_scale_distance
(
&
extents
-
>
width
&
extents
-
>
height
)
;
}
return
ret
;
}
static
hb_bool_t
hb_font_get_glyph_contour_point_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
unsigned
int
point_index
hb_position_t
*
x
hb_position_t
*
y
void
*
user_data
HB_UNUSED
)
{
*
x
=
*
y
=
0
;
return
false
;
}
static
hb_bool_t
hb_font_get_glyph_contour_point_parent
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
unsigned
int
point_index
hb_position_t
*
x
hb_position_t
*
y
void
*
user_data
HB_UNUSED
)
{
hb_bool_t
ret
=
font
-
>
parent
-
>
get_glyph_contour_point
(
glyph
point_index
x
y
)
;
if
(
ret
)
font
-
>
parent_scale_position
(
x
y
)
;
return
ret
;
}
static
hb_bool_t
hb_font_get_glyph_name_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
char
*
name
unsigned
int
size
void
*
user_data
HB_UNUSED
)
{
if
(
size
)
*
name
=
'
\
0
'
;
return
false
;
}
static
hb_bool_t
hb_font_get_glyph_name_parent
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
char
*
name
unsigned
int
size
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
parent
-
>
get_glyph_name
(
glyph
name
size
)
;
}
static
hb_bool_t
hb_font_get_glyph_from_name_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
const
char
*
name
int
len
hb_codepoint_t
*
glyph
void
*
user_data
HB_UNUSED
)
{
*
glyph
=
0
;
return
false
;
}
static
hb_bool_t
hb_font_get_glyph_from_name_parent
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
const
char
*
name
int
len
hb_codepoint_t
*
glyph
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
parent
-
>
get_glyph_from_name
(
name
len
glyph
)
;
}
static
const
hb_font_funcs_t
_hb_font_funcs_nil
=
{
HB_OBJECT_HEADER_STATIC
true
{
#
define
HB_FONT_FUNC_IMPLEMENT
(
name
)
NULL
HB_FONT_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_FONT_FUNC_IMPLEMENT
}
{
#
define
HB_FONT_FUNC_IMPLEMENT
(
name
)
NULL
HB_FONT_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_FONT_FUNC_IMPLEMENT
}
{
{
#
define
HB_FONT_FUNC_IMPLEMENT
(
name
)
hb_font_get_
#
#
name
#
#
_nil
HB_FONT_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_FONT_FUNC_IMPLEMENT
}
}
}
;
static
const
hb_font_funcs_t
_hb_font_funcs_parent
=
{
HB_OBJECT_HEADER_STATIC
true
{
#
define
HB_FONT_FUNC_IMPLEMENT
(
name
)
NULL
HB_FONT_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_FONT_FUNC_IMPLEMENT
}
{
#
define
HB_FONT_FUNC_IMPLEMENT
(
name
)
NULL
HB_FONT_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_FONT_FUNC_IMPLEMENT
}
{
{
#
define
HB_FONT_FUNC_IMPLEMENT
(
name
)
hb_font_get_
#
#
name
#
#
_parent
HB_FONT_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_FONT_FUNC_IMPLEMENT
}
}
}
;
hb_font_funcs_t
*
hb_font_funcs_create
(
void
)
{
hb_font_funcs_t
*
ffuncs
;
if
(
!
(
ffuncs
=
hb_object_create
<
hb_font_funcs_t
>
(
)
)
)
return
hb_font_funcs_get_empty
(
)
;
ffuncs
-
>
get
=
_hb_font_funcs_parent
.
get
;
return
ffuncs
;
}
hb_font_funcs_t
*
hb_font_funcs_get_empty
(
void
)
{
return
const_cast
<
hb_font_funcs_t
*
>
(
&
_hb_font_funcs_parent
)
;
}
hb_font_funcs_t
*
hb_font_funcs_reference
(
hb_font_funcs_t
*
ffuncs
)
{
return
hb_object_reference
(
ffuncs
)
;
}
void
hb_font_funcs_destroy
(
hb_font_funcs_t
*
ffuncs
)
{
if
(
!
hb_object_destroy
(
ffuncs
)
)
return
;
#
define
HB_FONT_FUNC_IMPLEMENT
(
name
)
if
(
ffuncs
-
>
destroy
.
name
)
\
ffuncs
-
>
destroy
.
name
(
ffuncs
-
>
user_data
.
name
)
;
HB_FONT_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_FONT_FUNC_IMPLEMENT
free
(
ffuncs
)
;
}
hb_bool_t
hb_font_funcs_set_user_data
(
hb_font_funcs_t
*
ffuncs
hb_user_data_key_t
*
key
void
*
data
hb_destroy_func_t
destroy
hb_bool_t
replace
)
{
return
hb_object_set_user_data
(
ffuncs
key
data
destroy
replace
)
;
}
void
*
hb_font_funcs_get_user_data
(
hb_font_funcs_t
*
ffuncs
hb_user_data_key_t
*
key
)
{
return
hb_object_get_user_data
(
ffuncs
key
)
;
}
void
hb_font_funcs_make_immutable
(
hb_font_funcs_t
*
ffuncs
)
{
if
(
unlikely
(
hb_object_is_inert
(
ffuncs
)
)
)
return
;
ffuncs
-
>
immutable
=
true
;
}
hb_bool_t
hb_font_funcs_is_immutable
(
hb_font_funcs_t
*
ffuncs
)
{
return
ffuncs
-
>
immutable
;
}
#
define
HB_FONT_FUNC_IMPLEMENT
(
name
)
\
\
void
\
hb_font_funcs_set_
#
#
name
#
#
_func
(
hb_font_funcs_t
*
ffuncs
\
hb_font_get_
#
#
name
#
#
_func_t
func
\
void
*
user_data
\
hb_destroy_func_t
destroy
)
\
{
\
if
(
ffuncs
-
>
immutable
)
{
\
if
(
destroy
)
\
destroy
(
user_data
)
;
\
return
;
\
}
\
\
if
(
ffuncs
-
>
destroy
.
name
)
\
ffuncs
-
>
destroy
.
name
(
ffuncs
-
>
user_data
.
name
)
;
\
\
if
(
func
)
{
\
ffuncs
-
>
get
.
f
.
name
=
func
;
\
ffuncs
-
>
user_data
.
name
=
user_data
;
\
ffuncs
-
>
destroy
.
name
=
destroy
;
\
}
else
{
\
ffuncs
-
>
get
.
f
.
name
=
hb_font_get_
#
#
name
#
#
_parent
;
\
ffuncs
-
>
user_data
.
name
=
NULL
;
\
ffuncs
-
>
destroy
.
name
=
NULL
;
\
}
\
}
HB_FONT_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_FONT_FUNC_IMPLEMENT
bool
hb_font_t
:
:
has_func
(
unsigned
int
i
)
{
if
(
parent
&
&
parent
!
=
hb_font_get_empty
(
)
&
&
parent
-
>
has_func
(
i
)
)
return
true
;
return
this
-
>
klass
-
>
get
.
array
[
i
]
!
=
_hb_font_funcs_parent
.
get
.
array
[
i
]
;
}
hb_bool_t
hb_font_get_h_extents
(
hb_font_t
*
font
hb_font_extents_t
*
extents
)
{
return
font
-
>
get_font_h_extents
(
extents
)
;
}
hb_bool_t
hb_font_get_v_extents
(
hb_font_t
*
font
hb_font_extents_t
*
extents
)
{
return
font
-
>
get_font_v_extents
(
extents
)
;
}
hb_bool_t
hb_font_get_glyph
(
hb_font_t
*
font
hb_codepoint_t
unicode
hb_codepoint_t
variation_selector
hb_codepoint_t
*
glyph
)
{
if
(
unlikely
(
variation_selector
)
)
return
font
-
>
get_variation_glyph
(
unicode
variation_selector
glyph
)
;
return
font
-
>
get_nominal_glyph
(
unicode
glyph
)
;
}
hb_bool_t
hb_font_get_nominal_glyph
(
hb_font_t
*
font
hb_codepoint_t
unicode
hb_codepoint_t
*
glyph
)
{
return
font
-
>
get_nominal_glyph
(
unicode
glyph
)
;
}
hb_bool_t
hb_font_get_variation_glyph
(
hb_font_t
*
font
hb_codepoint_t
unicode
hb_codepoint_t
variation_selector
hb_codepoint_t
*
glyph
)
{
return
font
-
>
get_variation_glyph
(
unicode
variation_selector
glyph
)
;
}
hb_position_t
hb_font_get_glyph_h_advance
(
hb_font_t
*
font
hb_codepoint_t
glyph
)
{
return
font
-
>
get_glyph_h_advance
(
glyph
)
;
}
hb_position_t
hb_font_get_glyph_v_advance
(
hb_font_t
*
font
hb_codepoint_t
glyph
)
{
return
font
-
>
get_glyph_v_advance
(
glyph
)
;
}
hb_bool_t
hb_font_get_glyph_h_origin
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
get_glyph_h_origin
(
glyph
x
y
)
;
}
hb_bool_t
hb_font_get_glyph_v_origin
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
get_glyph_v_origin
(
glyph
x
y
)
;
}
hb_position_t
hb_font_get_glyph_h_kerning
(
hb_font_t
*
font
hb_codepoint_t
left_glyph
hb_codepoint_t
right_glyph
)
{
return
font
-
>
get_glyph_h_kerning
(
left_glyph
right_glyph
)
;
}
hb_position_t
hb_font_get_glyph_v_kerning
(
hb_font_t
*
font
hb_codepoint_t
top_glyph
hb_codepoint_t
bottom_glyph
)
{
return
font
-
>
get_glyph_v_kerning
(
top_glyph
bottom_glyph
)
;
}
hb_bool_t
hb_font_get_glyph_extents
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_glyph_extents_t
*
extents
)
{
return
font
-
>
get_glyph_extents
(
glyph
extents
)
;
}
hb_bool_t
hb_font_get_glyph_contour_point
(
hb_font_t
*
font
hb_codepoint_t
glyph
unsigned
int
point_index
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
get_glyph_contour_point
(
glyph
point_index
x
y
)
;
}
hb_bool_t
hb_font_get_glyph_name
(
hb_font_t
*
font
hb_codepoint_t
glyph
char
*
name
unsigned
int
size
)
{
return
font
-
>
get_glyph_name
(
glyph
name
size
)
;
}
hb_bool_t
hb_font_get_glyph_from_name
(
hb_font_t
*
font
const
char
*
name
int
len
hb_codepoint_t
*
glyph
)
{
return
font
-
>
get_glyph_from_name
(
name
len
glyph
)
;
}
void
hb_font_get_extents_for_direction
(
hb_font_t
*
font
hb_direction_t
direction
hb_font_extents_t
*
extents
)
{
return
font
-
>
get_extents_for_direction
(
direction
extents
)
;
}
void
hb_font_get_glyph_advance_for_direction
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_direction_t
direction
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
get_glyph_advance_for_direction
(
glyph
direction
x
y
)
;
}
void
hb_font_get_glyph_origin_for_direction
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_direction_t
direction
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
get_glyph_origin_for_direction
(
glyph
direction
x
y
)
;
}
void
hb_font_add_glyph_origin_for_direction
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_direction_t
direction
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
add_glyph_origin_for_direction
(
glyph
direction
x
y
)
;
}
void
hb_font_subtract_glyph_origin_for_direction
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_direction_t
direction
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
subtract_glyph_origin_for_direction
(
glyph
direction
x
y
)
;
}
void
hb_font_get_glyph_kerning_for_direction
(
hb_font_t
*
font
hb_codepoint_t
first_glyph
hb_codepoint_t
second_glyph
hb_direction_t
direction
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
get_glyph_kerning_for_direction
(
first_glyph
second_glyph
direction
x
y
)
;
}
hb_bool_t
hb_font_get_glyph_extents_for_origin
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_direction_t
direction
hb_glyph_extents_t
*
extents
)
{
return
font
-
>
get_glyph_extents_for_origin
(
glyph
direction
extents
)
;
}
hb_bool_t
hb_font_get_glyph_contour_point_for_origin
(
hb_font_t
*
font
hb_codepoint_t
glyph
unsigned
int
point_index
hb_direction_t
direction
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
get_glyph_contour_point_for_origin
(
glyph
point_index
direction
x
y
)
;
}
void
hb_font_glyph_to_string
(
hb_font_t
*
font
hb_codepoint_t
glyph
char
*
s
unsigned
int
size
)
{
font
-
>
glyph_to_string
(
glyph
s
size
)
;
}
hb_bool_t
hb_font_glyph_from_string
(
hb_font_t
*
font
const
char
*
s
int
len
hb_codepoint_t
*
glyph
)
{
return
font
-
>
glyph_from_string
(
s
len
glyph
)
;
}
hb_font_t
*
hb_font_create
(
hb_face_t
*
face
)
{
hb_font_t
*
font
;
if
(
unlikely
(
!
face
)
)
face
=
hb_face_get_empty
(
)
;
if
(
!
(
font
=
hb_object_create
<
hb_font_t
>
(
)
)
)
return
hb_font_get_empty
(
)
;
hb_face_make_immutable
(
face
)
;
font
-
>
parent
=
hb_font_get_empty
(
)
;
font
-
>
face
=
hb_face_reference
(
face
)
;
font
-
>
klass
=
hb_font_funcs_get_empty
(
)
;
font
-
>
x_scale
=
font
-
>
y_scale
=
hb_face_get_upem
(
face
)
;
return
font
;
}
hb_font_t
*
hb_font_create_sub_font
(
hb_font_t
*
parent
)
{
if
(
unlikely
(
!
parent
)
)
parent
=
hb_font_get_empty
(
)
;
hb_font_t
*
font
=
hb_font_create
(
parent
-
>
face
)
;
if
(
unlikely
(
hb_object_is_inert
(
font
)
)
)
return
font
;
font
-
>
parent
=
hb_font_reference
(
parent
)
;
font
-
>
x_scale
=
parent
-
>
x_scale
;
font
-
>
y_scale
=
parent
-
>
y_scale
;
font
-
>
x_ppem
=
parent
-
>
x_ppem
;
font
-
>
y_ppem
=
parent
-
>
y_ppem
;
return
font
;
}
hb_font_t
*
hb_font_get_empty
(
void
)
{
static
const
hb_font_t
_hb_font_nil
=
{
HB_OBJECT_HEADER_STATIC
true
NULL
const_cast
<
hb_face_t
*
>
(
&
_hb_face_nil
)
1000
1000
0
0
const_cast
<
hb_font_funcs_t
*
>
(
&
_hb_font_funcs_nil
)
NULL
NULL
{
#
define
HB_SHAPER_IMPLEMENT
(
shaper
)
HB_SHAPER_DATA_INVALID
#
include
"
hb
-
shaper
-
list
.
hh
"
#
undef
HB_SHAPER_IMPLEMENT
}
}
;
return
const_cast
<
hb_font_t
*
>
(
&
_hb_font_nil
)
;
}
hb_font_t
*
hb_font_reference
(
hb_font_t
*
font
)
{
return
hb_object_reference
(
font
)
;
}
void
hb_font_destroy
(
hb_font_t
*
font
)
{
if
(
!
hb_object_destroy
(
font
)
)
return
;
#
define
HB_SHAPER_IMPLEMENT
(
shaper
)
HB_SHAPER_DATA_DESTROY
(
shaper
font
)
;
#
include
"
hb
-
shaper
-
list
.
hh
"
#
undef
HB_SHAPER_IMPLEMENT
if
(
font
-
>
destroy
)
font
-
>
destroy
(
font
-
>
user_data
)
;
hb_font_destroy
(
font
-
>
parent
)
;
hb_face_destroy
(
font
-
>
face
)
;
hb_font_funcs_destroy
(
font
-
>
klass
)
;
free
(
font
)
;
}
hb_bool_t
hb_font_set_user_data
(
hb_font_t
*
font
hb_user_data_key_t
*
key
void
*
data
hb_destroy_func_t
destroy
hb_bool_t
replace
)
{
return
hb_object_set_user_data
(
font
key
data
destroy
replace
)
;
}
void
*
hb_font_get_user_data
(
hb_font_t
*
font
hb_user_data_key_t
*
key
)
{
return
hb_object_get_user_data
(
font
key
)
;
}
void
hb_font_make_immutable
(
hb_font_t
*
font
)
{
if
(
unlikely
(
hb_object_is_inert
(
font
)
)
)
return
;
if
(
font
-
>
parent
)
hb_font_make_immutable
(
font
-
>
parent
)
;
font
-
>
immutable
=
true
;
}
hb_bool_t
hb_font_is_immutable
(
hb_font_t
*
font
)
{
return
font
-
>
immutable
;
}
void
hb_font_set_parent
(
hb_font_t
*
font
hb_font_t
*
parent
)
{
if
(
font
-
>
immutable
)
return
;
if
(
!
parent
)
parent
=
hb_font_get_empty
(
)
;
hb_font_t
*
old
=
font
-
>
parent
;
font
-
>
parent
=
hb_font_reference
(
parent
)
;
hb_font_destroy
(
old
)
;
}
hb_font_t
*
hb_font_get_parent
(
hb_font_t
*
font
)
{
return
font
-
>
parent
;
}
hb_face_t
*
hb_font_get_face
(
hb_font_t
*
font
)
{
return
font
-
>
face
;
}
void
hb_font_set_funcs
(
hb_font_t
*
font
hb_font_funcs_t
*
klass
void
*
font_data
hb_destroy_func_t
destroy
)
{
if
(
font
-
>
immutable
)
{
if
(
destroy
)
destroy
(
font_data
)
;
return
;
}
if
(
font
-
>
destroy
)
font
-
>
destroy
(
font
-
>
user_data
)
;
if
(
!
klass
)
klass
=
hb_font_funcs_get_empty
(
)
;
hb_font_funcs_reference
(
klass
)
;
hb_font_funcs_destroy
(
font
-
>
klass
)
;
font
-
>
klass
=
klass
;
font
-
>
user_data
=
font_data
;
font
-
>
destroy
=
destroy
;
}
void
hb_font_set_funcs_data
(
hb_font_t
*
font
void
*
font_data
hb_destroy_func_t
destroy
)
{
if
(
font
-
>
immutable
)
{
if
(
destroy
)
destroy
(
font_data
)
;
return
;
}
if
(
font
-
>
destroy
)
font
-
>
destroy
(
font
-
>
user_data
)
;
font
-
>
user_data
=
font_data
;
font
-
>
destroy
=
destroy
;
}
void
hb_font_set_scale
(
hb_font_t
*
font
int
x_scale
int
y_scale
)
{
if
(
font
-
>
immutable
)
return
;
font
-
>
x_scale
=
x_scale
;
font
-
>
y_scale
=
y_scale
;
}
void
hb_font_get_scale
(
hb_font_t
*
font
int
*
x_scale
int
*
y_scale
)
{
if
(
x_scale
)
*
x_scale
=
font
-
>
x_scale
;
if
(
y_scale
)
*
y_scale
=
font
-
>
y_scale
;
}
void
hb_font_set_ppem
(
hb_font_t
*
font
unsigned
int
x_ppem
unsigned
int
y_ppem
)
{
if
(
font
-
>
immutable
)
return
;
font
-
>
x_ppem
=
x_ppem
;
font
-
>
y_ppem
=
y_ppem
;
}
void
hb_font_get_ppem
(
hb_font_t
*
font
unsigned
int
*
x_ppem
unsigned
int
*
y_ppem
)
{
if
(
x_ppem
)
*
x_ppem
=
font
-
>
x_ppem
;
if
(
y_ppem
)
*
y_ppem
=
font
-
>
y_ppem
;
}
#
ifndef
HB_DISABLE_DEPRECATED
struct
hb_trampoline_closure_t
{
void
*
user_data
;
hb_destroy_func_t
destroy
;
unsigned
int
ref_count
;
}
;
template
<
typename
FuncType
>
struct
hb_trampoline_t
{
hb_trampoline_closure_t
closure
;
FuncType
func
;
}
;
template
<
typename
FuncType
>
static
hb_trampoline_t
<
FuncType
>
*
trampoline_create
(
FuncType
func
void
*
user_data
hb_destroy_func_t
destroy
)
{
typedef
hb_trampoline_t
<
FuncType
>
trampoline_t
;
trampoline_t
*
trampoline
=
(
trampoline_t
*
)
calloc
(
1
sizeof
(
trampoline_t
)
)
;
if
(
unlikely
(
!
trampoline
)
)
return
NULL
;
trampoline
-
>
closure
.
user_data
=
user_data
;
trampoline
-
>
closure
.
destroy
=
destroy
;
trampoline
-
>
closure
.
ref_count
=
1
;
trampoline
-
>
func
=
func
;
return
trampoline
;
}
static
void
trampoline_reference
(
hb_trampoline_closure_t
*
closure
)
{
closure
-
>
ref_count
+
+
;
}
static
void
trampoline_destroy
(
void
*
user_data
)
{
hb_trampoline_closure_t
*
closure
=
(
hb_trampoline_closure_t
*
)
user_data
;
if
(
-
-
closure
-
>
ref_count
)
return
;
if
(
closure
-
>
destroy
)
closure
-
>
destroy
(
closure
-
>
user_data
)
;
free
(
closure
)
;
}
typedef
hb_trampoline_t
<
hb_font_get_glyph_func_t
>
hb_font_get_glyph_trampoline_t
;
static
hb_bool_t
hb_font_get_nominal_glyph_trampoline
(
hb_font_t
*
font
void
*
font_data
hb_codepoint_t
unicode
hb_codepoint_t
*
glyph
void
*
user_data
)
{
hb_font_get_glyph_trampoline_t
*
trampoline
=
(
hb_font_get_glyph_trampoline_t
*
)
user_data
;
return
trampoline
-
>
func
(
font
font_data
unicode
0
glyph
trampoline
-
>
closure
.
user_data
)
;
}
static
hb_bool_t
hb_font_get_variation_glyph_trampoline
(
hb_font_t
*
font
void
*
font_data
hb_codepoint_t
unicode
hb_codepoint_t
variation_selector
hb_codepoint_t
*
glyph
void
*
user_data
)
{
hb_font_get_glyph_trampoline_t
*
trampoline
=
(
hb_font_get_glyph_trampoline_t
*
)
user_data
;
return
trampoline
-
>
func
(
font
font_data
unicode
variation_selector
glyph
trampoline
-
>
closure
.
user_data
)
;
}
void
hb_font_funcs_set_glyph_func
(
hb_font_funcs_t
*
ffuncs
hb_font_get_glyph_func_t
func
void
*
user_data
hb_destroy_func_t
destroy
)
{
hb_font_get_glyph_trampoline_t
*
trampoline
;
trampoline
=
trampoline_create
(
func
user_data
destroy
)
;
if
(
unlikely
(
!
trampoline
)
)
{
if
(
destroy
)
destroy
(
user_data
)
;
return
;
}
hb_font_funcs_set_nominal_glyph_func
(
ffuncs
hb_font_get_nominal_glyph_trampoline
trampoline
trampoline_destroy
)
;
trampoline_reference
(
&
trampoline
-
>
closure
)
;
hb_font_funcs_set_variation_glyph_func
(
ffuncs
hb_font_get_variation_glyph_trampoline
trampoline
trampoline_destroy
)
;
}
#
endif
