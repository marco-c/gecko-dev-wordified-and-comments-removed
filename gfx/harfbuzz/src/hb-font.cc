#
include
"
hb
.
hh
"
#
include
"
hb
-
font
.
hh
"
#
include
"
hb
-
draw
.
hh
"
#
include
"
hb
-
machinery
.
hh
"
#
include
"
hb
-
ot
.
h
"
#
include
"
hb
-
ot
-
var
-
avar
-
table
.
hh
"
#
include
"
hb
-
ot
-
var
-
fvar
-
table
.
hh
"
static
hb_bool_t
hb_font_get_font_h_extents_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_font_extents_t
*
extents
void
*
user_data
HB_UNUSED
)
{
memset
(
extents
0
sizeof
(
*
extents
)
)
;
return
false
;
}
static
hb_bool_t
hb_font_get_font_h_extents_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_font_extents_t
*
extents
void
*
user_data
HB_UNUSED
)
{
hb_bool_t
ret
=
font
-
>
parent
-
>
get_font_h_extents
(
extents
)
;
if
(
ret
)
{
extents
-
>
ascender
=
font
-
>
parent_scale_y_distance
(
extents
-
>
ascender
)
;
extents
-
>
descender
=
font
-
>
parent_scale_y_distance
(
extents
-
>
descender
)
;
extents
-
>
line_gap
=
font
-
>
parent_scale_y_distance
(
extents
-
>
line_gap
)
;
}
return
ret
;
}
static
hb_bool_t
hb_font_get_font_v_extents_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_font_extents_t
*
extents
void
*
user_data
HB_UNUSED
)
{
memset
(
extents
0
sizeof
(
*
extents
)
)
;
return
false
;
}
static
hb_bool_t
hb_font_get_font_v_extents_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_font_extents_t
*
extents
void
*
user_data
HB_UNUSED
)
{
hb_bool_t
ret
=
font
-
>
parent
-
>
get_font_v_extents
(
extents
)
;
if
(
ret
)
{
extents
-
>
ascender
=
font
-
>
parent_scale_x_distance
(
extents
-
>
ascender
)
;
extents
-
>
descender
=
font
-
>
parent_scale_x_distance
(
extents
-
>
descender
)
;
extents
-
>
line_gap
=
font
-
>
parent_scale_x_distance
(
extents
-
>
line_gap
)
;
}
return
ret
;
}
static
hb_bool_t
hb_font_get_nominal_glyph_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
unicode
HB_UNUSED
hb_codepoint_t
*
glyph
void
*
user_data
HB_UNUSED
)
{
*
glyph
=
0
;
return
false
;
}
static
hb_bool_t
hb_font_get_nominal_glyph_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
unicode
hb_codepoint_t
*
glyph
void
*
user_data
HB_UNUSED
)
{
if
(
font
-
>
has_nominal_glyphs_func_set
(
)
)
{
return
font
-
>
get_nominal_glyphs
(
1
&
unicode
0
glyph
0
)
;
}
return
font
-
>
parent
-
>
get_nominal_glyph
(
unicode
glyph
)
;
}
#
define
hb_font_get_nominal_glyphs_nil
hb_font_get_nominal_glyphs_default
static
unsigned
int
hb_font_get_nominal_glyphs_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
unsigned
int
count
const
hb_codepoint_t
*
first_unicode
unsigned
int
unicode_stride
hb_codepoint_t
*
first_glyph
unsigned
int
glyph_stride
void
*
user_data
HB_UNUSED
)
{
if
(
font
-
>
has_nominal_glyph_func_set
(
)
)
{
for
(
unsigned
int
i
=
0
;
i
<
count
;
i
+
+
)
{
if
(
!
font
-
>
get_nominal_glyph
(
*
first_unicode
first_glyph
)
)
return
i
;
first_unicode
=
&
StructAtOffsetUnaligned
<
hb_codepoint_t
>
(
first_unicode
unicode_stride
)
;
first_glyph
=
&
StructAtOffsetUnaligned
<
hb_codepoint_t
>
(
first_glyph
glyph_stride
)
;
}
return
count
;
}
return
font
-
>
parent
-
>
get_nominal_glyphs
(
count
first_unicode
unicode_stride
first_glyph
glyph_stride
)
;
}
static
hb_bool_t
hb_font_get_variation_glyph_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
unicode
HB_UNUSED
hb_codepoint_t
variation_selector
HB_UNUSED
hb_codepoint_t
*
glyph
void
*
user_data
HB_UNUSED
)
{
*
glyph
=
0
;
return
false
;
}
static
hb_bool_t
hb_font_get_variation_glyph_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
unicode
hb_codepoint_t
variation_selector
hb_codepoint_t
*
glyph
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
parent
-
>
get_variation_glyph
(
unicode
variation_selector
glyph
)
;
}
static
hb_position_t
hb_font_get_glyph_h_advance_nil
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
HB_UNUSED
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
x_scale
;
}
static
hb_position_t
hb_font_get_glyph_h_advance_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
void
*
user_data
HB_UNUSED
)
{
if
(
font
-
>
has_glyph_h_advances_func_set
(
)
)
{
hb_position_t
ret
;
font
-
>
get_glyph_h_advances
(
1
&
glyph
0
&
ret
0
)
;
return
ret
;
}
return
font
-
>
parent_scale_x_distance
(
font
-
>
parent
-
>
get_glyph_h_advance
(
glyph
)
)
;
}
static
hb_position_t
hb_font_get_glyph_v_advance_nil
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
HB_UNUSED
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
y_scale
;
}
static
hb_position_t
hb_font_get_glyph_v_advance_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
void
*
user_data
HB_UNUSED
)
{
if
(
font
-
>
has_glyph_v_advances_func_set
(
)
)
{
hb_position_t
ret
;
font
-
>
get_glyph_v_advances
(
1
&
glyph
0
&
ret
0
)
;
return
ret
;
}
return
font
-
>
parent_scale_y_distance
(
font
-
>
parent
-
>
get_glyph_v_advance
(
glyph
)
)
;
}
#
define
hb_font_get_glyph_h_advances_nil
hb_font_get_glyph_h_advances_default
static
void
hb_font_get_glyph_h_advances_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
unsigned
int
count
const
hb_codepoint_t
*
first_glyph
unsigned
int
glyph_stride
hb_position_t
*
first_advance
unsigned
int
advance_stride
void
*
user_data
HB_UNUSED
)
{
if
(
font
-
>
has_glyph_h_advance_func_set
(
)
)
{
for
(
unsigned
int
i
=
0
;
i
<
count
;
i
+
+
)
{
*
first_advance
=
font
-
>
get_glyph_h_advance
(
*
first_glyph
)
;
first_glyph
=
&
StructAtOffsetUnaligned
<
hb_codepoint_t
>
(
first_glyph
glyph_stride
)
;
first_advance
=
&
StructAtOffsetUnaligned
<
hb_position_t
>
(
first_advance
advance_stride
)
;
}
return
;
}
font
-
>
parent
-
>
get_glyph_h_advances
(
count
first_glyph
glyph_stride
first_advance
advance_stride
)
;
for
(
unsigned
int
i
=
0
;
i
<
count
;
i
+
+
)
{
*
first_advance
=
font
-
>
parent_scale_x_distance
(
*
first_advance
)
;
first_advance
=
&
StructAtOffsetUnaligned
<
hb_position_t
>
(
first_advance
advance_stride
)
;
}
}
#
define
hb_font_get_glyph_v_advances_nil
hb_font_get_glyph_v_advances_default
static
void
hb_font_get_glyph_v_advances_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
unsigned
int
count
const
hb_codepoint_t
*
first_glyph
unsigned
int
glyph_stride
hb_position_t
*
first_advance
unsigned
int
advance_stride
void
*
user_data
HB_UNUSED
)
{
if
(
font
-
>
has_glyph_v_advance_func_set
(
)
)
{
for
(
unsigned
int
i
=
0
;
i
<
count
;
i
+
+
)
{
*
first_advance
=
font
-
>
get_glyph_v_advance
(
*
first_glyph
)
;
first_glyph
=
&
StructAtOffsetUnaligned
<
hb_codepoint_t
>
(
first_glyph
glyph_stride
)
;
first_advance
=
&
StructAtOffsetUnaligned
<
hb_position_t
>
(
first_advance
advance_stride
)
;
}
return
;
}
font
-
>
parent
-
>
get_glyph_v_advances
(
count
first_glyph
glyph_stride
first_advance
advance_stride
)
;
for
(
unsigned
int
i
=
0
;
i
<
count
;
i
+
+
)
{
*
first_advance
=
font
-
>
parent_scale_y_distance
(
*
first_advance
)
;
first_advance
=
&
StructAtOffsetUnaligned
<
hb_position_t
>
(
first_advance
advance_stride
)
;
}
}
static
hb_bool_t
hb_font_get_glyph_h_origin_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
HB_UNUSED
hb_position_t
*
x
hb_position_t
*
y
void
*
user_data
HB_UNUSED
)
{
*
x
=
*
y
=
0
;
return
true
;
}
static
hb_bool_t
hb_font_get_glyph_h_origin_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
hb_position_t
*
x
hb_position_t
*
y
void
*
user_data
HB_UNUSED
)
{
hb_bool_t
ret
=
font
-
>
parent
-
>
get_glyph_h_origin
(
glyph
x
y
)
;
if
(
ret
)
font
-
>
parent_scale_position
(
x
y
)
;
return
ret
;
}
static
hb_bool_t
hb_font_get_glyph_v_origin_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
HB_UNUSED
hb_position_t
*
x
hb_position_t
*
y
void
*
user_data
HB_UNUSED
)
{
*
x
=
*
y
=
0
;
return
false
;
}
static
hb_bool_t
hb_font_get_glyph_v_origin_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
hb_position_t
*
x
hb_position_t
*
y
void
*
user_data
HB_UNUSED
)
{
hb_bool_t
ret
=
font
-
>
parent
-
>
get_glyph_v_origin
(
glyph
x
y
)
;
if
(
ret
)
font
-
>
parent_scale_position
(
x
y
)
;
return
ret
;
}
static
hb_position_t
hb_font_get_glyph_h_kerning_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
left_glyph
HB_UNUSED
hb_codepoint_t
right_glyph
HB_UNUSED
void
*
user_data
HB_UNUSED
)
{
return
0
;
}
static
hb_position_t
hb_font_get_glyph_h_kerning_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
left_glyph
hb_codepoint_t
right_glyph
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
parent_scale_x_distance
(
font
-
>
parent
-
>
get_glyph_h_kerning
(
left_glyph
right_glyph
)
)
;
}
#
ifndef
HB_DISABLE_DEPRECATED
static
hb_position_t
hb_font_get_glyph_v_kerning_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
top_glyph
HB_UNUSED
hb_codepoint_t
bottom_glyph
HB_UNUSED
void
*
user_data
HB_UNUSED
)
{
return
0
;
}
static
hb_position_t
hb_font_get_glyph_v_kerning_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
top_glyph
hb_codepoint_t
bottom_glyph
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
parent_scale_y_distance
(
font
-
>
parent
-
>
get_glyph_v_kerning
(
top_glyph
bottom_glyph
)
)
;
}
#
endif
static
hb_bool_t
hb_font_get_glyph_extents_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
HB_UNUSED
hb_glyph_extents_t
*
extents
void
*
user_data
HB_UNUSED
)
{
memset
(
extents
0
sizeof
(
*
extents
)
)
;
return
false
;
}
static
hb_bool_t
hb_font_get_glyph_extents_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
hb_glyph_extents_t
*
extents
void
*
user_data
HB_UNUSED
)
{
hb_bool_t
ret
=
font
-
>
parent
-
>
get_glyph_extents
(
glyph
extents
)
;
if
(
ret
)
{
font
-
>
parent_scale_position
(
&
extents
-
>
x_bearing
&
extents
-
>
y_bearing
)
;
font
-
>
parent_scale_distance
(
&
extents
-
>
width
&
extents
-
>
height
)
;
}
return
ret
;
}
static
hb_bool_t
hb_font_get_glyph_contour_point_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
HB_UNUSED
unsigned
int
point_index
HB_UNUSED
hb_position_t
*
x
hb_position_t
*
y
void
*
user_data
HB_UNUSED
)
{
*
x
=
*
y
=
0
;
return
false
;
}
static
hb_bool_t
hb_font_get_glyph_contour_point_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
unsigned
int
point_index
hb_position_t
*
x
hb_position_t
*
y
void
*
user_data
HB_UNUSED
)
{
hb_bool_t
ret
=
font
-
>
parent
-
>
get_glyph_contour_point
(
glyph
point_index
x
y
)
;
if
(
ret
)
font
-
>
parent_scale_position
(
x
y
)
;
return
ret
;
}
static
hb_bool_t
hb_font_get_glyph_name_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
HB_UNUSED
char
*
name
unsigned
int
size
void
*
user_data
HB_UNUSED
)
{
if
(
size
)
*
name
=
'
\
0
'
;
return
false
;
}
static
hb_bool_t
hb_font_get_glyph_name_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
char
*
name
unsigned
int
size
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
parent
-
>
get_glyph_name
(
glyph
name
size
)
;
}
static
hb_bool_t
hb_font_get_glyph_from_name_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
const
char
*
name
HB_UNUSED
int
len
HB_UNUSED
hb_codepoint_t
*
glyph
void
*
user_data
HB_UNUSED
)
{
*
glyph
=
0
;
return
false
;
}
static
hb_bool_t
hb_font_get_glyph_from_name_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
const
char
*
name
int
len
hb_codepoint_t
*
glyph
void
*
user_data
HB_UNUSED
)
{
return
font
-
>
parent
-
>
get_glyph_from_name
(
name
len
glyph
)
;
}
static
void
hb_font_get_glyph_shape_nil
(
hb_font_t
*
font
HB_UNUSED
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
hb_draw_funcs_t
*
draw_funcs
void
*
draw_data
void
*
user_data
HB_UNUSED
)
{
}
typedef
struct
hb_font_get_glyph_shape_default_adaptor_t
{
hb_draw_funcs_t
*
draw_funcs
;
void
*
draw_data
;
float
x_scale
;
float
y_scale
;
}
hb_font_get_glyph_shape_default_adaptor_t
;
static
void
hb_draw_move_to_default
(
hb_draw_funcs_t
*
dfuncs
HB_UNUSED
void
*
draw_data
hb_draw_state_t
*
st
float
to_x
float
to_y
void
*
user_data
HB_UNUSED
)
{
hb_font_get_glyph_shape_default_adaptor_t
*
adaptor
=
(
hb_font_get_glyph_shape_default_adaptor_t
*
)
draw_data
;
float
x_scale
=
adaptor
-
>
x_scale
;
float
y_scale
=
adaptor
-
>
y_scale
;
adaptor
-
>
draw_funcs
-
>
emit_move_to
(
adaptor
-
>
draw_data
*
st
x_scale
*
to_x
y_scale
*
to_y
)
;
}
static
void
hb_draw_line_to_default
(
hb_draw_funcs_t
*
dfuncs
HB_UNUSED
void
*
draw_data
hb_draw_state_t
*
st
float
to_x
float
to_y
void
*
user_data
HB_UNUSED
)
{
hb_font_get_glyph_shape_default_adaptor_t
*
adaptor
=
(
hb_font_get_glyph_shape_default_adaptor_t
*
)
draw_data
;
float
x_scale
=
adaptor
-
>
x_scale
;
float
y_scale
=
adaptor
-
>
y_scale
;
st
-
>
current_x
*
=
x_scale
;
st
-
>
current_y
*
=
y_scale
;
adaptor
-
>
draw_funcs
-
>
emit_line_to
(
adaptor
-
>
draw_data
*
st
x_scale
*
to_x
y_scale
*
to_y
)
;
}
static
void
hb_draw_quadratic_to_default
(
hb_draw_funcs_t
*
dfuncs
HB_UNUSED
void
*
draw_data
hb_draw_state_t
*
st
float
control_x
float
control_y
float
to_x
float
to_y
void
*
user_data
HB_UNUSED
)
{
hb_font_get_glyph_shape_default_adaptor_t
*
adaptor
=
(
hb_font_get_glyph_shape_default_adaptor_t
*
)
draw_data
;
float
x_scale
=
adaptor
-
>
x_scale
;
float
y_scale
=
adaptor
-
>
y_scale
;
st
-
>
current_x
*
=
x_scale
;
st
-
>
current_y
*
=
y_scale
;
adaptor
-
>
draw_funcs
-
>
emit_quadratic_to
(
adaptor
-
>
draw_data
*
st
x_scale
*
control_x
y_scale
*
control_y
x_scale
*
to_x
y_scale
*
to_y
)
;
}
static
void
hb_draw_cubic_to_default
(
hb_draw_funcs_t
*
dfuncs
HB_UNUSED
void
*
draw_data
hb_draw_state_t
*
st
float
control1_x
float
control1_y
float
control2_x
float
control2_y
float
to_x
float
to_y
void
*
user_data
HB_UNUSED
)
{
hb_font_get_glyph_shape_default_adaptor_t
*
adaptor
=
(
hb_font_get_glyph_shape_default_adaptor_t
*
)
draw_data
;
float
x_scale
=
adaptor
-
>
x_scale
;
float
y_scale
=
adaptor
-
>
y_scale
;
st
-
>
current_x
*
=
x_scale
;
st
-
>
current_y
*
=
y_scale
;
adaptor
-
>
draw_funcs
-
>
emit_cubic_to
(
adaptor
-
>
draw_data
*
st
x_scale
*
control1_x
y_scale
*
control1_y
x_scale
*
control2_x
y_scale
*
control2_y
x_scale
*
to_x
y_scale
*
to_y
)
;
}
static
void
hb_draw_close_path_default
(
hb_draw_funcs_t
*
dfuncs
HB_UNUSED
void
*
draw_data
hb_draw_state_t
*
st
void
*
user_data
HB_UNUSED
)
{
hb_font_get_glyph_shape_default_adaptor_t
*
adaptor
=
(
hb_font_get_glyph_shape_default_adaptor_t
*
)
draw_data
;
adaptor
-
>
draw_funcs
-
>
emit_close_path
(
adaptor
-
>
draw_data
*
st
)
;
}
static
const
hb_draw_funcs_t
_hb_draw_funcs_default
=
{
HB_OBJECT_HEADER_STATIC
{
#
define
HB_DRAW_FUNC_IMPLEMENT
(
name
)
hb_draw_
#
#
name
#
#
_default
HB_DRAW_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_DRAW_FUNC_IMPLEMENT
}
}
;
static
void
hb_font_get_glyph_shape_default
(
hb_font_t
*
font
void
*
font_data
HB_UNUSED
hb_codepoint_t
glyph
hb_draw_funcs_t
*
draw_funcs
void
*
draw_data
void
*
user_data
HB_UNUSED
)
{
hb_font_get_glyph_shape_default_adaptor_t
adaptor
=
{
draw_funcs
draw_data
(
float
)
font
-
>
x_scale
/
(
float
)
font
-
>
parent
-
>
x_scale
(
float
)
font
-
>
y_scale
/
(
float
)
font
-
>
parent
-
>
y_scale
}
;
font
-
>
parent
-
>
get_glyph_shape
(
glyph
const_cast
<
hb_draw_funcs_t
*
>
(
&
_hb_draw_funcs_default
)
&
adaptor
)
;
}
DEFINE_NULL_INSTANCE
(
hb_font_funcs_t
)
=
{
HB_OBJECT_HEADER_STATIC
nullptr
nullptr
{
{
#
define
HB_FONT_FUNC_IMPLEMENT
(
name
)
hb_font_get_
#
#
name
#
#
_nil
HB_FONT_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_FONT_FUNC_IMPLEMENT
}
}
}
;
static
const
hb_font_funcs_t
_hb_font_funcs_default
=
{
HB_OBJECT_HEADER_STATIC
nullptr
nullptr
{
{
#
define
HB_FONT_FUNC_IMPLEMENT
(
name
)
hb_font_get_
#
#
name
#
#
_default
HB_FONT_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_FONT_FUNC_IMPLEMENT
}
}
}
;
hb_font_funcs_t
*
hb_font_funcs_create
(
)
{
hb_font_funcs_t
*
ffuncs
;
if
(
!
(
ffuncs
=
hb_object_create
<
hb_font_funcs_t
>
(
)
)
)
return
hb_font_funcs_get_empty
(
)
;
ffuncs
-
>
get
=
_hb_font_funcs_default
.
get
;
return
ffuncs
;
}
hb_font_funcs_t
*
hb_font_funcs_get_empty
(
)
{
return
const_cast
<
hb_font_funcs_t
*
>
(
&
_hb_font_funcs_default
)
;
}
hb_font_funcs_t
*
hb_font_funcs_reference
(
hb_font_funcs_t
*
ffuncs
)
{
return
hb_object_reference
(
ffuncs
)
;
}
void
hb_font_funcs_destroy
(
hb_font_funcs_t
*
ffuncs
)
{
if
(
!
hb_object_destroy
(
ffuncs
)
)
return
;
if
(
ffuncs
-
>
destroy
)
{
#
define
HB_FONT_FUNC_IMPLEMENT
(
name
)
if
(
ffuncs
-
>
destroy
-
>
name
)
\
ffuncs
-
>
destroy
-
>
name
(
!
ffuncs
-
>
user_data
?
nullptr
:
ffuncs
-
>
user_data
-
>
name
)
;
HB_FONT_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_FONT_FUNC_IMPLEMENT
}
hb_free
(
ffuncs
-
>
destroy
)
;
hb_free
(
ffuncs
-
>
user_data
)
;
hb_free
(
ffuncs
)
;
}
hb_bool_t
hb_font_funcs_set_user_data
(
hb_font_funcs_t
*
ffuncs
hb_user_data_key_t
*
key
void
*
data
hb_destroy_func_t
destroy
hb_bool_t
replace
)
{
return
hb_object_set_user_data
(
ffuncs
key
data
destroy
replace
)
;
}
void
*
hb_font_funcs_get_user_data
(
const
hb_font_funcs_t
*
ffuncs
hb_user_data_key_t
*
key
)
{
return
hb_object_get_user_data
(
ffuncs
key
)
;
}
void
hb_font_funcs_make_immutable
(
hb_font_funcs_t
*
ffuncs
)
{
if
(
hb_object_is_immutable
(
ffuncs
)
)
return
;
hb_object_make_immutable
(
ffuncs
)
;
}
hb_bool_t
hb_font_funcs_is_immutable
(
hb_font_funcs_t
*
ffuncs
)
{
return
hb_object_is_immutable
(
ffuncs
)
;
}
#
define
HB_FONT_FUNC_IMPLEMENT
(
name
)
\
\
void
\
hb_font_funcs_set_
#
#
name
#
#
_func
(
hb_font_funcs_t
*
ffuncs
\
hb_font_get_
#
#
name
#
#
_func_t
func
\
void
*
user_data
\
hb_destroy_func_t
destroy
)
\
{
\
if
(
hb_object_is_immutable
(
ffuncs
)
)
\
goto
fail
;
\
\
if
(
!
func
)
\
{
\
if
(
destroy
)
\
destroy
(
user_data
)
;
\
destroy
=
nullptr
;
\
user_data
=
nullptr
;
\
}
\
\
if
(
ffuncs
-
>
destroy
&
&
ffuncs
-
>
destroy
-
>
name
)
\
ffuncs
-
>
destroy
-
>
name
(
!
ffuncs
-
>
user_data
?
nullptr
:
ffuncs
-
>
user_data
-
>
name
)
;
\
\
if
(
user_data
&
&
!
ffuncs
-
>
user_data
)
\
{
\
ffuncs
-
>
user_data
=
(
decltype
(
ffuncs
-
>
user_data
)
)
hb_calloc
(
1
sizeof
(
*
ffuncs
-
>
user_data
)
)
;
\
if
(
unlikely
(
!
ffuncs
-
>
user_data
)
)
\
goto
fail
;
\
}
\
if
(
destroy
&
&
!
ffuncs
-
>
destroy
)
\
{
\
ffuncs
-
>
destroy
=
(
decltype
(
ffuncs
-
>
destroy
)
)
hb_calloc
(
1
sizeof
(
*
ffuncs
-
>
destroy
)
)
;
\
if
(
unlikely
(
!
ffuncs
-
>
destroy
)
)
\
goto
fail
;
\
}
\
\
if
(
func
)
{
\
ffuncs
-
>
get
.
f
.
name
=
func
;
\
if
(
ffuncs
-
>
user_data
)
\
ffuncs
-
>
user_data
-
>
name
=
user_data
;
\
if
(
ffuncs
-
>
destroy
)
\
ffuncs
-
>
destroy
-
>
name
=
destroy
;
\
}
else
{
\
ffuncs
-
>
get
.
f
.
name
=
hb_font_get_
#
#
name
#
#
_default
;
\
if
(
ffuncs
-
>
user_data
)
\
ffuncs
-
>
user_data
-
>
name
=
nullptr
;
\
if
(
ffuncs
-
>
destroy
)
\
ffuncs
-
>
destroy
-
>
name
=
nullptr
;
\
}
\
return
;
\
\
fail
:
\
if
(
destroy
)
\
destroy
(
user_data
)
;
\
}
HB_FONT_FUNCS_IMPLEMENT_CALLBACKS
#
undef
HB_FONT_FUNC_IMPLEMENT
bool
hb_font_t
:
:
has_func_set
(
unsigned
int
i
)
{
return
this
-
>
klass
-
>
get
.
array
[
i
]
!
=
_hb_font_funcs_default
.
get
.
array
[
i
]
;
}
bool
hb_font_t
:
:
has_func
(
unsigned
int
i
)
{
return
has_func_set
(
i
)
|
|
(
parent
&
&
parent
!
=
&
_hb_Null_hb_font_t
&
&
parent
-
>
has_func
(
i
)
)
;
}
hb_bool_t
hb_font_get_h_extents
(
hb_font_t
*
font
hb_font_extents_t
*
extents
)
{
return
font
-
>
get_font_h_extents
(
extents
)
;
}
hb_bool_t
hb_font_get_v_extents
(
hb_font_t
*
font
hb_font_extents_t
*
extents
)
{
return
font
-
>
get_font_v_extents
(
extents
)
;
}
hb_bool_t
hb_font_get_glyph
(
hb_font_t
*
font
hb_codepoint_t
unicode
hb_codepoint_t
variation_selector
hb_codepoint_t
*
glyph
)
{
if
(
unlikely
(
variation_selector
)
)
return
font
-
>
get_variation_glyph
(
unicode
variation_selector
glyph
)
;
return
font
-
>
get_nominal_glyph
(
unicode
glyph
)
;
}
hb_bool_t
hb_font_get_nominal_glyph
(
hb_font_t
*
font
hb_codepoint_t
unicode
hb_codepoint_t
*
glyph
)
{
return
font
-
>
get_nominal_glyph
(
unicode
glyph
)
;
}
unsigned
int
hb_font_get_nominal_glyphs
(
hb_font_t
*
font
unsigned
int
count
const
hb_codepoint_t
*
first_unicode
unsigned
int
unicode_stride
hb_codepoint_t
*
first_glyph
unsigned
int
glyph_stride
)
{
return
font
-
>
get_nominal_glyphs
(
count
first_unicode
unicode_stride
first_glyph
glyph_stride
)
;
}
hb_bool_t
hb_font_get_variation_glyph
(
hb_font_t
*
font
hb_codepoint_t
unicode
hb_codepoint_t
variation_selector
hb_codepoint_t
*
glyph
)
{
return
font
-
>
get_variation_glyph
(
unicode
variation_selector
glyph
)
;
}
hb_position_t
hb_font_get_glyph_h_advance
(
hb_font_t
*
font
hb_codepoint_t
glyph
)
{
return
font
-
>
get_glyph_h_advance
(
glyph
)
;
}
hb_position_t
hb_font_get_glyph_v_advance
(
hb_font_t
*
font
hb_codepoint_t
glyph
)
{
return
font
-
>
get_glyph_v_advance
(
glyph
)
;
}
void
hb_font_get_glyph_h_advances
(
hb_font_t
*
font
unsigned
int
count
const
hb_codepoint_t
*
first_glyph
unsigned
glyph_stride
hb_position_t
*
first_advance
unsigned
advance_stride
)
{
font
-
>
get_glyph_h_advances
(
count
first_glyph
glyph_stride
first_advance
advance_stride
)
;
}
void
hb_font_get_glyph_v_advances
(
hb_font_t
*
font
unsigned
int
count
const
hb_codepoint_t
*
first_glyph
unsigned
glyph_stride
hb_position_t
*
first_advance
unsigned
advance_stride
)
{
font
-
>
get_glyph_v_advances
(
count
first_glyph
glyph_stride
first_advance
advance_stride
)
;
}
hb_bool_t
hb_font_get_glyph_h_origin
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
get_glyph_h_origin
(
glyph
x
y
)
;
}
hb_bool_t
hb_font_get_glyph_v_origin
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
get_glyph_v_origin
(
glyph
x
y
)
;
}
hb_position_t
hb_font_get_glyph_h_kerning
(
hb_font_t
*
font
hb_codepoint_t
left_glyph
hb_codepoint_t
right_glyph
)
{
return
font
-
>
get_glyph_h_kerning
(
left_glyph
right_glyph
)
;
}
#
ifndef
HB_DISABLE_DEPRECATED
hb_position_t
hb_font_get_glyph_v_kerning
(
hb_font_t
*
font
hb_codepoint_t
top_glyph
hb_codepoint_t
bottom_glyph
)
{
return
font
-
>
get_glyph_v_kerning
(
top_glyph
bottom_glyph
)
;
}
#
endif
hb_bool_t
hb_font_get_glyph_extents
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_glyph_extents_t
*
extents
)
{
return
font
-
>
get_glyph_extents
(
glyph
extents
)
;
}
hb_bool_t
hb_font_get_glyph_contour_point
(
hb_font_t
*
font
hb_codepoint_t
glyph
unsigned
int
point_index
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
get_glyph_contour_point
(
glyph
point_index
x
y
)
;
}
hb_bool_t
hb_font_get_glyph_name
(
hb_font_t
*
font
hb_codepoint_t
glyph
char
*
name
unsigned
int
size
)
{
return
font
-
>
get_glyph_name
(
glyph
name
size
)
;
}
hb_bool_t
hb_font_get_glyph_from_name
(
hb_font_t
*
font
const
char
*
name
int
len
hb_codepoint_t
*
glyph
)
{
return
font
-
>
get_glyph_from_name
(
name
len
glyph
)
;
}
void
hb_font_get_glyph_shape
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_draw_funcs_t
*
dfuncs
void
*
draw_data
)
{
font
-
>
get_glyph_shape
(
glyph
dfuncs
draw_data
)
;
}
void
hb_font_get_extents_for_direction
(
hb_font_t
*
font
hb_direction_t
direction
hb_font_extents_t
*
extents
)
{
font
-
>
get_extents_for_direction
(
direction
extents
)
;
}
void
hb_font_get_glyph_advance_for_direction
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_direction_t
direction
hb_position_t
*
x
hb_position_t
*
y
)
{
font
-
>
get_glyph_advance_for_direction
(
glyph
direction
x
y
)
;
}
HB_EXTERN
void
hb_font_get_glyph_advances_for_direction
(
hb_font_t
*
font
hb_direction_t
direction
unsigned
int
count
const
hb_codepoint_t
*
first_glyph
unsigned
glyph_stride
hb_position_t
*
first_advance
unsigned
advance_stride
)
{
font
-
>
get_glyph_advances_for_direction
(
direction
count
first_glyph
glyph_stride
first_advance
advance_stride
)
;
}
void
hb_font_get_glyph_origin_for_direction
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_direction_t
direction
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
get_glyph_origin_for_direction
(
glyph
direction
x
y
)
;
}
void
hb_font_add_glyph_origin_for_direction
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_direction_t
direction
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
add_glyph_origin_for_direction
(
glyph
direction
x
y
)
;
}
void
hb_font_subtract_glyph_origin_for_direction
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_direction_t
direction
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
subtract_glyph_origin_for_direction
(
glyph
direction
x
y
)
;
}
void
hb_font_get_glyph_kerning_for_direction
(
hb_font_t
*
font
hb_codepoint_t
first_glyph
hb_codepoint_t
second_glyph
hb_direction_t
direction
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
get_glyph_kerning_for_direction
(
first_glyph
second_glyph
direction
x
y
)
;
}
hb_bool_t
hb_font_get_glyph_extents_for_origin
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_direction_t
direction
hb_glyph_extents_t
*
extents
)
{
return
font
-
>
get_glyph_extents_for_origin
(
glyph
direction
extents
)
;
}
hb_bool_t
hb_font_get_glyph_contour_point_for_origin
(
hb_font_t
*
font
hb_codepoint_t
glyph
unsigned
int
point_index
hb_direction_t
direction
hb_position_t
*
x
hb_position_t
*
y
)
{
return
font
-
>
get_glyph_contour_point_for_origin
(
glyph
point_index
direction
x
y
)
;
}
void
hb_font_glyph_to_string
(
hb_font_t
*
font
hb_codepoint_t
glyph
char
*
s
unsigned
int
size
)
{
font
-
>
glyph_to_string
(
glyph
s
size
)
;
}
hb_bool_t
hb_font_glyph_from_string
(
hb_font_t
*
font
const
char
*
s
int
len
hb_codepoint_t
*
glyph
)
{
return
font
-
>
glyph_from_string
(
s
len
glyph
)
;
}
DEFINE_NULL_INSTANCE
(
hb_font_t
)
=
{
HB_OBJECT_HEADER_STATIC
0
0
nullptr
const_cast
<
hb_face_t
*
>
(
&
_hb_Null_hb_face_t
)
1000
1000
0
.
0
.
1
.
f
1
.
f
1
<
<
16
1
<
<
16
0
0
0
0
nullptr
nullptr
const_cast
<
hb_font_funcs_t
*
>
(
&
_hb_Null_hb_font_funcs_t
)
}
;
static
hb_font_t
*
_hb_font_create
(
hb_face_t
*
face
)
{
hb_font_t
*
font
;
if
(
unlikely
(
!
face
)
)
face
=
hb_face_get_empty
(
)
;
if
(
!
(
font
=
hb_object_create
<
hb_font_t
>
(
)
)
)
return
hb_font_get_empty
(
)
;
hb_face_make_immutable
(
face
)
;
font
-
>
parent
=
hb_font_get_empty
(
)
;
font
-
>
face
=
hb_face_reference
(
face
)
;
font
-
>
klass
=
hb_font_funcs_get_empty
(
)
;
font
-
>
data
.
init0
(
font
)
;
font
-
>
x_scale
=
font
-
>
y_scale
=
face
-
>
get_upem
(
)
;
font
-
>
x_multf
=
font
-
>
y_multf
=
1
.
f
;
font
-
>
x_mult
=
font
-
>
y_mult
=
1
<
<
16
;
return
font
;
}
hb_font_t
*
hb_font_create
(
hb_face_t
*
face
)
{
hb_font_t
*
font
=
_hb_font_create
(
face
)
;
#
ifndef
HB_NO_OT_FONT
hb_ot_font_set_funcs
(
font
)
;
#
endif
#
ifndef
HB_NO_VAR
if
(
face
&
&
face
-
>
index
>
>
16
)
hb_font_set_var_named_instance
(
font
(
face
-
>
index
>
>
16
)
-
1
)
;
#
endif
return
font
;
}
static
void
_hb_font_adopt_var_coords
(
hb_font_t
*
font
int
*
coords
float
*
design_coords
unsigned
int
coords_length
)
{
hb_free
(
font
-
>
coords
)
;
hb_free
(
font
-
>
design_coords
)
;
font
-
>
coords
=
coords
;
font
-
>
design_coords
=
design_coords
;
font
-
>
num_coords
=
coords_length
;
font
-
>
mults_changed
(
)
;
}
hb_font_t
*
hb_font_create_sub_font
(
hb_font_t
*
parent
)
{
if
(
unlikely
(
!
parent
)
)
parent
=
hb_font_get_empty
(
)
;
hb_font_t
*
font
=
_hb_font_create
(
parent
-
>
face
)
;
if
(
unlikely
(
hb_object_is_immutable
(
font
)
)
)
return
font
;
font
-
>
parent
=
hb_font_reference
(
parent
)
;
font
-
>
x_scale
=
parent
-
>
x_scale
;
font
-
>
y_scale
=
parent
-
>
y_scale
;
font
-
>
slant
=
parent
-
>
slant
;
font
-
>
x_ppem
=
parent
-
>
x_ppem
;
font
-
>
y_ppem
=
parent
-
>
y_ppem
;
font
-
>
ptem
=
parent
-
>
ptem
;
unsigned
int
num_coords
=
parent
-
>
num_coords
;
if
(
num_coords
)
{
int
*
coords
=
(
int
*
)
hb_calloc
(
num_coords
sizeof
(
parent
-
>
coords
[
0
]
)
)
;
float
*
design_coords
=
(
float
*
)
hb_calloc
(
num_coords
sizeof
(
parent
-
>
design_coords
[
0
]
)
)
;
if
(
likely
(
coords
&
&
design_coords
)
)
{
memcpy
(
coords
parent
-
>
coords
num_coords
*
sizeof
(
parent
-
>
coords
[
0
]
)
)
;
memcpy
(
design_coords
parent
-
>
design_coords
num_coords
*
sizeof
(
parent
-
>
design_coords
[
0
]
)
)
;
_hb_font_adopt_var_coords
(
font
coords
design_coords
num_coords
)
;
}
else
{
hb_free
(
coords
)
;
hb_free
(
design_coords
)
;
}
}
font
-
>
mults_changed
(
)
;
return
font
;
}
hb_font_t
*
hb_font_get_empty
(
)
{
return
const_cast
<
hb_font_t
*
>
(
&
Null
(
hb_font_t
)
)
;
}
hb_font_t
*
hb_font_reference
(
hb_font_t
*
font
)
{
return
hb_object_reference
(
font
)
;
}
void
hb_font_destroy
(
hb_font_t
*
font
)
{
if
(
!
hb_object_destroy
(
font
)
)
return
;
font
-
>
data
.
fini
(
)
;
if
(
font
-
>
destroy
)
font
-
>
destroy
(
font
-
>
user_data
)
;
hb_font_destroy
(
font
-
>
parent
)
;
hb_face_destroy
(
font
-
>
face
)
;
hb_font_funcs_destroy
(
font
-
>
klass
)
;
hb_free
(
font
-
>
coords
)
;
hb_free
(
font
-
>
design_coords
)
;
hb_free
(
font
)
;
}
hb_bool_t
hb_font_set_user_data
(
hb_font_t
*
font
hb_user_data_key_t
*
key
void
*
data
hb_destroy_func_t
destroy
hb_bool_t
replace
)
{
if
(
!
hb_object_is_immutable
(
font
)
)
font
-
>
serial
+
+
;
return
hb_object_set_user_data
(
font
key
data
destroy
replace
)
;
}
void
*
hb_font_get_user_data
(
const
hb_font_t
*
font
hb_user_data_key_t
*
key
)
{
return
hb_object_get_user_data
(
font
key
)
;
}
void
hb_font_make_immutable
(
hb_font_t
*
font
)
{
if
(
hb_object_is_immutable
(
font
)
)
return
;
if
(
font
-
>
parent
)
hb_font_make_immutable
(
font
-
>
parent
)
;
hb_object_make_immutable
(
font
)
;
}
hb_bool_t
hb_font_is_immutable
(
hb_font_t
*
font
)
{
return
hb_object_is_immutable
(
font
)
;
}
unsigned
int
hb_font_get_serial
(
hb_font_t
*
font
)
{
return
font
-
>
serial
;
}
void
hb_font_changed
(
hb_font_t
*
font
)
{
if
(
hb_object_is_immutable
(
font
)
)
return
;
font
-
>
serial
+
+
;
font
-
>
mults_changed
(
)
;
}
void
hb_font_set_parent
(
hb_font_t
*
font
hb_font_t
*
parent
)
{
if
(
hb_object_is_immutable
(
font
)
)
return
;
if
(
parent
=
=
font
-
>
parent
)
return
;
font
-
>
serial
+
+
;
if
(
!
parent
)
parent
=
hb_font_get_empty
(
)
;
hb_font_t
*
old
=
font
-
>
parent
;
font
-
>
parent
=
hb_font_reference
(
parent
)
;
hb_font_destroy
(
old
)
;
}
hb_font_t
*
hb_font_get_parent
(
hb_font_t
*
font
)
{
return
font
-
>
parent
;
}
void
hb_font_set_face
(
hb_font_t
*
font
hb_face_t
*
face
)
{
if
(
hb_object_is_immutable
(
font
)
)
return
;
if
(
face
=
=
font
-
>
face
)
return
;
font
-
>
serial
+
+
;
if
(
unlikely
(
!
face
)
)
face
=
hb_face_get_empty
(
)
;
hb_face_t
*
old
=
font
-
>
face
;
hb_face_make_immutable
(
face
)
;
font
-
>
face
=
hb_face_reference
(
face
)
;
font
-
>
mults_changed
(
)
;
hb_face_destroy
(
old
)
;
}
hb_face_t
*
hb_font_get_face
(
hb_font_t
*
font
)
{
return
font
-
>
face
;
}
void
hb_font_set_funcs
(
hb_font_t
*
font
hb_font_funcs_t
*
klass
void
*
font_data
hb_destroy_func_t
destroy
)
{
if
(
hb_object_is_immutable
(
font
)
)
{
if
(
destroy
)
destroy
(
font_data
)
;
return
;
}
font
-
>
serial
+
+
;
if
(
font
-
>
destroy
)
font
-
>
destroy
(
font
-
>
user_data
)
;
if
(
!
klass
)
klass
=
hb_font_funcs_get_empty
(
)
;
hb_font_funcs_reference
(
klass
)
;
hb_font_funcs_destroy
(
font
-
>
klass
)
;
font
-
>
klass
=
klass
;
font
-
>
user_data
=
font_data
;
font
-
>
destroy
=
destroy
;
}
void
hb_font_set_funcs_data
(
hb_font_t
*
font
void
*
font_data
hb_destroy_func_t
destroy
)
{
if
(
hb_object_is_immutable
(
font
)
)
{
if
(
destroy
)
destroy
(
font_data
)
;
return
;
}
font
-
>
serial
+
+
;
if
(
font
-
>
destroy
)
font
-
>
destroy
(
font
-
>
user_data
)
;
font
-
>
user_data
=
font_data
;
font
-
>
destroy
=
destroy
;
}
void
hb_font_set_scale
(
hb_font_t
*
font
int
x_scale
int
y_scale
)
{
if
(
hb_object_is_immutable
(
font
)
)
return
;
if
(
font
-
>
x_scale
=
=
x_scale
&
&
font
-
>
y_scale
=
=
y_scale
)
return
;
font
-
>
serial
+
+
;
font
-
>
x_scale
=
x_scale
;
font
-
>
y_scale
=
y_scale
;
font
-
>
mults_changed
(
)
;
}
void
hb_font_get_scale
(
hb_font_t
*
font
int
*
x_scale
int
*
y_scale
)
{
if
(
x_scale
)
*
x_scale
=
font
-
>
x_scale
;
if
(
y_scale
)
*
y_scale
=
font
-
>
y_scale
;
}
void
hb_font_set_ppem
(
hb_font_t
*
font
unsigned
int
x_ppem
unsigned
int
y_ppem
)
{
if
(
hb_object_is_immutable
(
font
)
)
return
;
if
(
font
-
>
x_ppem
=
=
x_ppem
&
&
font
-
>
y_ppem
=
=
y_ppem
)
return
;
font
-
>
serial
+
+
;
font
-
>
x_ppem
=
x_ppem
;
font
-
>
y_ppem
=
y_ppem
;
}
void
hb_font_get_ppem
(
hb_font_t
*
font
unsigned
int
*
x_ppem
unsigned
int
*
y_ppem
)
{
if
(
x_ppem
)
*
x_ppem
=
font
-
>
x_ppem
;
if
(
y_ppem
)
*
y_ppem
=
font
-
>
y_ppem
;
}
void
hb_font_set_ptem
(
hb_font_t
*
font
float
ptem
)
{
if
(
hb_object_is_immutable
(
font
)
)
return
;
if
(
font
-
>
ptem
=
=
ptem
)
return
;
font
-
>
serial
+
+
;
font
-
>
ptem
=
ptem
;
}
float
hb_font_get_ptem
(
hb_font_t
*
font
)
{
return
font
-
>
ptem
;
}
HB_EXTERN
void
hb_font_set_synthetic_slant
(
hb_font_t
*
font
float
slant
)
{
if
(
hb_object_is_immutable
(
font
)
)
return
;
if
(
font
-
>
slant
=
=
slant
)
return
;
font
-
>
serial
+
+
;
font
-
>
slant
=
slant
;
font
-
>
mults_changed
(
)
;
}
HB_EXTERN
float
hb_font_get_synthetic_slant
(
hb_font_t
*
font
)
{
return
font
-
>
slant
;
}
#
ifndef
HB_NO_VAR
void
hb_font_set_variations
(
hb_font_t
*
font
const
hb_variation_t
*
variations
unsigned
int
variations_length
)
{
if
(
hb_object_is_immutable
(
font
)
)
return
;
font
-
>
serial_coords
=
+
+
font
-
>
serial
;
if
(
!
variations_length
)
{
hb_font_set_var_coords_normalized
(
font
nullptr
0
)
;
return
;
}
const
OT
:
:
fvar
&
fvar
=
*
font
-
>
face
-
>
table
.
fvar
;
auto
axes
=
fvar
.
get_axes
(
)
;
const
unsigned
coords_length
=
axes
.
length
;
int
*
normalized
=
coords_length
?
(
int
*
)
hb_calloc
(
coords_length
sizeof
(
int
)
)
:
nullptr
;
float
*
design_coords
=
coords_length
?
(
float
*
)
hb_calloc
(
coords_length
sizeof
(
float
)
)
:
nullptr
;
if
(
unlikely
(
coords_length
&
&
!
(
normalized
&
&
design_coords
)
)
)
{
hb_free
(
normalized
)
;
hb_free
(
design_coords
)
;
return
;
}
for
(
unsigned
int
i
=
0
;
i
<
coords_length
;
i
+
+
)
design_coords
[
i
]
=
axes
[
i
]
.
get_default
(
)
;
for
(
unsigned
int
i
=
0
;
i
<
variations_length
;
i
+
+
)
{
const
auto
tag
=
variations
[
i
]
.
tag
;
const
auto
v
=
variations
[
i
]
.
value
;
for
(
unsigned
axis_index
=
0
;
axis_index
<
coords_length
;
axis_index
+
+
)
if
(
axes
[
axis_index
]
.
axisTag
=
=
tag
)
{
design_coords
[
axis_index
]
=
v
;
normalized
[
axis_index
]
=
fvar
.
normalize_axis_value
(
axis_index
v
)
;
}
}
font
-
>
face
-
>
table
.
avar
-
>
map_coords
(
normalized
coords_length
)
;
_hb_font_adopt_var_coords
(
font
normalized
design_coords
coords_length
)
;
}
void
hb_font_set_var_coords_design
(
hb_font_t
*
font
const
float
*
coords
unsigned
int
coords_length
)
{
if
(
hb_object_is_immutable
(
font
)
)
return
;
font
-
>
serial_coords
=
+
+
font
-
>
serial
;
int
*
normalized
=
coords_length
?
(
int
*
)
hb_calloc
(
coords_length
sizeof
(
int
)
)
:
nullptr
;
float
*
design_coords
=
coords_length
?
(
float
*
)
hb_calloc
(
coords_length
sizeof
(
float
)
)
:
nullptr
;
if
(
unlikely
(
coords_length
&
&
!
(
normalized
&
&
design_coords
)
)
)
{
hb_free
(
normalized
)
;
hb_free
(
design_coords
)
;
return
;
}
if
(
coords_length
)
memcpy
(
design_coords
coords
coords_length
*
sizeof
(
font
-
>
design_coords
[
0
]
)
)
;
hb_ot_var_normalize_coords
(
font
-
>
face
coords_length
coords
normalized
)
;
_hb_font_adopt_var_coords
(
font
normalized
design_coords
coords_length
)
;
}
void
hb_font_set_var_named_instance
(
hb_font_t
*
font
unsigned
instance_index
)
{
if
(
hb_object_is_immutable
(
font
)
)
return
;
font
-
>
serial_coords
=
+
+
font
-
>
serial
;
unsigned
int
coords_length
=
hb_ot_var_named_instance_get_design_coords
(
font
-
>
face
instance_index
nullptr
nullptr
)
;
float
*
coords
=
coords_length
?
(
float
*
)
hb_calloc
(
coords_length
sizeof
(
float
)
)
:
nullptr
;
if
(
unlikely
(
coords_length
&
&
!
coords
)
)
return
;
hb_ot_var_named_instance_get_design_coords
(
font
-
>
face
instance_index
&
coords_length
coords
)
;
hb_font_set_var_coords_design
(
font
coords
coords_length
)
;
hb_free
(
coords
)
;
}
void
hb_font_set_var_coords_normalized
(
hb_font_t
*
font
const
int
*
coords
unsigned
int
coords_length
)
{
if
(
hb_object_is_immutable
(
font
)
)
return
;
font
-
>
serial_coords
=
+
+
font
-
>
serial
;
int
*
copy
=
coords_length
?
(
int
*
)
hb_calloc
(
coords_length
sizeof
(
coords
[
0
]
)
)
:
nullptr
;
int
*
unmapped
=
coords_length
?
(
int
*
)
hb_calloc
(
coords_length
sizeof
(
coords
[
0
]
)
)
:
nullptr
;
float
*
design_coords
=
coords_length
?
(
float
*
)
hb_calloc
(
coords_length
sizeof
(
design_coords
[
0
]
)
)
:
nullptr
;
if
(
unlikely
(
coords_length
&
&
!
(
copy
&
&
unmapped
&
&
design_coords
)
)
)
{
hb_free
(
copy
)
;
hb_free
(
unmapped
)
;
hb_free
(
design_coords
)
;
return
;
}
if
(
coords_length
)
{
memcpy
(
copy
coords
coords_length
*
sizeof
(
coords
[
0
]
)
)
;
memcpy
(
unmapped
coords
coords_length
*
sizeof
(
coords
[
0
]
)
)
;
}
font
-
>
face
-
>
table
.
avar
-
>
unmap_coords
(
unmapped
coords_length
)
;
for
(
unsigned
int
i
=
0
;
i
<
coords_length
;
+
+
i
)
design_coords
[
i
]
=
font
-
>
face
-
>
table
.
fvar
-
>
unnormalize_axis_value
(
i
unmapped
[
i
]
)
;
hb_free
(
unmapped
)
;
_hb_font_adopt_var_coords
(
font
copy
design_coords
coords_length
)
;
}
const
int
*
hb_font_get_var_coords_normalized
(
hb_font_t
*
font
unsigned
int
*
length
)
{
if
(
length
)
*
length
=
font
-
>
num_coords
;
return
font
-
>
coords
;
}
const
float
*
hb_font_get_var_coords_design
(
hb_font_t
*
font
unsigned
int
*
length
)
{
if
(
length
)
*
length
=
font
-
>
num_coords
;
return
font
-
>
design_coords
;
}
#
endif
#
ifndef
HB_DISABLE_DEPRECATED
struct
hb_trampoline_closure_t
{
void
*
user_data
;
hb_destroy_func_t
destroy
;
unsigned
int
ref_count
;
}
;
template
<
typename
FuncType
>
struct
hb_trampoline_t
{
hb_trampoline_closure_t
closure
;
FuncType
func
;
}
;
template
<
typename
FuncType
>
static
hb_trampoline_t
<
FuncType
>
*
trampoline_create
(
FuncType
func
void
*
user_data
hb_destroy_func_t
destroy
)
{
typedef
hb_trampoline_t
<
FuncType
>
trampoline_t
;
trampoline_t
*
trampoline
=
(
trampoline_t
*
)
hb_calloc
(
1
sizeof
(
trampoline_t
)
)
;
if
(
unlikely
(
!
trampoline
)
)
return
nullptr
;
trampoline
-
>
closure
.
user_data
=
user_data
;
trampoline
-
>
closure
.
destroy
=
destroy
;
trampoline
-
>
closure
.
ref_count
=
1
;
trampoline
-
>
func
=
func
;
return
trampoline
;
}
static
void
trampoline_reference
(
hb_trampoline_closure_t
*
closure
)
{
closure
-
>
ref_count
+
+
;
}
static
void
trampoline_destroy
(
void
*
user_data
)
{
hb_trampoline_closure_t
*
closure
=
(
hb_trampoline_closure_t
*
)
user_data
;
if
(
-
-
closure
-
>
ref_count
)
return
;
if
(
closure
-
>
destroy
)
closure
-
>
destroy
(
closure
-
>
user_data
)
;
hb_free
(
closure
)
;
}
typedef
hb_trampoline_t
<
hb_font_get_glyph_func_t
>
hb_font_get_glyph_trampoline_t
;
static
hb_bool_t
hb_font_get_nominal_glyph_trampoline
(
hb_font_t
*
font
void
*
font_data
hb_codepoint_t
unicode
hb_codepoint_t
*
glyph
void
*
user_data
)
{
hb_font_get_glyph_trampoline_t
*
trampoline
=
(
hb_font_get_glyph_trampoline_t
*
)
user_data
;
return
trampoline
-
>
func
(
font
font_data
unicode
0
glyph
trampoline
-
>
closure
.
user_data
)
;
}
static
hb_bool_t
hb_font_get_variation_glyph_trampoline
(
hb_font_t
*
font
void
*
font_data
hb_codepoint_t
unicode
hb_codepoint_t
variation_selector
hb_codepoint_t
*
glyph
void
*
user_data
)
{
hb_font_get_glyph_trampoline_t
*
trampoline
=
(
hb_font_get_glyph_trampoline_t
*
)
user_data
;
return
trampoline
-
>
func
(
font
font_data
unicode
variation_selector
glyph
trampoline
-
>
closure
.
user_data
)
;
}
void
hb_font_funcs_set_glyph_func
(
hb_font_funcs_t
*
ffuncs
hb_font_get_glyph_func_t
func
void
*
user_data
hb_destroy_func_t
destroy
)
{
if
(
hb_object_is_immutable
(
ffuncs
)
)
{
if
(
destroy
)
destroy
(
user_data
)
;
return
;
}
hb_font_get_glyph_trampoline_t
*
trampoline
;
trampoline
=
trampoline_create
(
func
user_data
destroy
)
;
if
(
unlikely
(
!
trampoline
)
)
{
if
(
destroy
)
destroy
(
user_data
)
;
return
;
}
trampoline_reference
(
&
trampoline
-
>
closure
)
;
hb_font_funcs_set_nominal_glyph_func
(
ffuncs
hb_font_get_nominal_glyph_trampoline
trampoline
trampoline_destroy
)
;
hb_font_funcs_set_variation_glyph_func
(
ffuncs
hb_font_get_variation_glyph_trampoline
trampoline
trampoline_destroy
)
;
}
#
endif
