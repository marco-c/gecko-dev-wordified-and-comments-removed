#
ifndef
HB_AAT_LTAG_TABLE_HH
#
define
HB_AAT_LTAG_TABLE_HH
#
include
"
hb
-
aat
-
layout
-
common
.
hh
"
#
define
HB_AAT_TAG_ltag
HB_TAG
(
'
l
'
'
t
'
'
a
'
'
g
'
)
namespace
AAT
{
struct
FTStringRange
{
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
const
void
*
base
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
&
&
(
base
+
tag
)
.
sanitize
(
c
length
)
)
;
}
protected
:
OffsetTo
<
UnsizedArrayOf
<
HBUINT8
>
>
tag
;
HBUINT16
length
;
public
:
DEFINE_SIZE_STATIC
(
4
)
;
}
;
struct
ltag
{
static
const
hb_tag_t
tableTag
=
HB_AAT_TAG_ltag
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
&
&
tagRanges
.
sanitize
(
c
this
)
)
)
;
}
protected
:
HBUINT32
version
;
HBUINT32
flags
;
LArrayOf
<
FTStringRange
>
tagRanges
;
public
:
DEFINE_SIZE_ARRAY
(
12
tagRanges
)
;
}
;
}
#
endif
