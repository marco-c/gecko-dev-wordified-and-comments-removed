#
ifndef
HB_AAT_LTAG_TABLE_HH
#
define
HB_AAT_LTAG_TABLE_HH
#
include
"
hb
-
open
-
type
.
hh
"
#
define
HB_AAT_TAG_ltag
HB_TAG
(
'
l
'
'
t
'
'
a
'
'
g
'
)
namespace
AAT
{
using
namespace
OT
;
struct
FTStringRange
{
friend
struct
ltag
;
bool
sanitize
(
hb_sanitize_context_t
*
c
const
void
*
base
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
&
&
hb_barrier
(
)
&
&
(
base
+
tag
)
.
sanitize
(
c
length
)
)
;
}
protected
:
NNOffset16To
<
UnsizedArrayOf
<
HBUINT8
>
>
tag
;
HBUINT16
length
;
public
:
DEFINE_SIZE_STATIC
(
4
)
;
}
;
struct
ltag
{
static
constexpr
hb_tag_t
tableTag
=
HB_AAT_TAG_ltag
;
hb_language_t
get_language
(
unsigned
int
i
)
const
{
const
FTStringRange
&
range
=
tagRanges
[
i
]
;
return
hb_language_from_string
(
(
const
char
*
)
(
this
+
range
.
tag
)
.
arrayZ
range
.
length
)
;
}
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
&
&
hb_barrier
(
)
&
&
version
>
=
1
&
&
tagRanges
.
sanitize
(
c
this
)
)
)
;
}
protected
:
HBUINT32
version
;
HBUINT32
flags
;
Array32Of
<
FTStringRange
>
tagRanges
;
public
:
DEFINE_SIZE_ARRAY
(
12
tagRanges
)
;
}
;
}
#
endif
