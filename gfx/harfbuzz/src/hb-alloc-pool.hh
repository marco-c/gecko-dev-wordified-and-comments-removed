#
ifndef
HB_ALLOC_POOL_HH
#
define
HB_ALLOC_POOL_HH
#
include
"
hb
-
vector
.
hh
"
struct
hb_alloc_pool_t
{
unsigned
ChunkSize
=
65536
-
2
*
sizeof
(
void
*
)
;
void
*
alloc
(
size_t
size
unsigned
alignment
=
2
*
sizeof
(
void
*
)
)
{
if
(
unlikely
(
chunks
.
in_error
(
)
)
)
return
nullptr
;
assert
(
alignment
>
0
)
;
assert
(
alignment
<
=
2
*
sizeof
(
void
*
)
)
;
assert
(
(
alignment
&
(
alignment
-
1
)
)
=
=
0
)
;
if
(
size
>
(
ChunkSize
)
/
4
)
{
hb_vector_t
<
char
>
chunk
;
if
(
unlikely
(
!
chunk
.
resize
(
size
)
)
)
return
nullptr
;
void
*
ret
=
chunk
.
arrayZ
;
chunks
.
push
(
std
:
:
move
(
chunk
)
)
;
if
(
chunks
.
in_error
(
)
)
return
nullptr
;
if
(
chunks
.
length
>
1
)
{
hb_swap
(
chunks
.
arrayZ
[
chunks
.
length
-
1
]
chunks
.
arrayZ
[
chunks
.
length
-
2
]
)
;
}
return
ret
;
}
unsigned
pad
=
(
unsigned
)
(
-
(
uintptr_t
)
current_chunk
.
arrayZ
)
&
(
alignment
-
1
)
;
if
(
current_chunk
.
length
<
pad
+
size
)
{
chunks
.
push
(
)
;
if
(
unlikely
(
chunks
.
in_error
(
)
)
)
return
nullptr
;
hb_vector_t
<
char
>
&
chunk
=
chunks
.
arrayZ
[
chunks
.
length
-
1
]
;
if
(
unlikely
(
!
chunk
.
resize
(
ChunkSize
)
)
)
return
nullptr
;
current_chunk
=
chunk
;
pad
=
(
unsigned
)
(
-
(
uintptr_t
)
current_chunk
.
arrayZ
)
&
(
alignment
-
1
)
;
}
current_chunk
+
=
pad
;
assert
(
current_chunk
.
length
>
=
size
)
;
void
*
ret
=
current_chunk
.
arrayZ
;
current_chunk
+
=
size
;
return
ret
;
}
void
discard
(
void
*
p_
size_t
size
)
{
char
*
p
=
(
char
*
)
p_
;
if
(
current_chunk
.
arrayZ
=
=
p
+
size
&
&
current_chunk
.
backwards_length
>
=
size
)
current_chunk
-
=
size
;
}
private
:
hb_vector_t
<
hb_vector_t
<
char
>
>
chunks
;
hb_array_t
<
char
>
current_chunk
;
}
;
#
endif
