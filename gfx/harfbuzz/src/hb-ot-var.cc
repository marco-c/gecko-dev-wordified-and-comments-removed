#
include
"
hb
-
open
-
type
-
private
.
hh
"
#
include
"
hb
-
ot
-
layout
-
private
.
hh
"
#
include
"
hb
-
ot
-
var
-
avar
-
table
.
hh
"
#
include
"
hb
-
ot
-
var
-
fvar
-
table
.
hh
"
#
include
"
hb
-
ot
-
var
-
mvar
-
table
.
hh
"
#
include
"
hb
-
ot
-
var
.
h
"
static
inline
const
OT
:
:
fvar
&
_get_fvar
(
hb_face_t
*
face
)
{
if
(
unlikely
(
!
hb_ot_shaper_face_data_ensure
(
face
)
)
)
return
Null
(
OT
:
:
fvar
)
;
hb_ot_layout_t
*
layout
=
hb_ot_layout_from_face
(
face
)
;
return
*
(
layout
-
>
table
.
fvar
.
get
(
)
)
;
}
static
inline
const
OT
:
:
avar
&
_get_avar
(
hb_face_t
*
face
)
{
if
(
unlikely
(
!
hb_ot_shaper_face_data_ensure
(
face
)
)
)
return
Null
(
OT
:
:
avar
)
;
hb_ot_layout_t
*
layout
=
hb_ot_layout_from_face
(
face
)
;
return
*
(
layout
-
>
table
.
avar
.
get
(
)
)
;
}
hb_bool_t
hb_ot_var_has_data
(
hb_face_t
*
face
)
{
return
_get_fvar
(
face
)
.
has_data
(
)
;
}
unsigned
int
hb_ot_var_get_axis_count
(
hb_face_t
*
face
)
{
const
OT
:
:
fvar
&
fvar
=
_get_fvar
(
face
)
;
return
fvar
.
get_axis_count
(
)
;
}
unsigned
int
hb_ot_var_get_axes
(
hb_face_t
*
face
unsigned
int
start_offset
unsigned
int
*
axes_count
hb_ot_var_axis_t
*
axes_array
)
{
const
OT
:
:
fvar
&
fvar
=
_get_fvar
(
face
)
;
return
fvar
.
get_axis_infos
(
start_offset
axes_count
axes_array
)
;
}
hb_bool_t
hb_ot_var_find_axis
(
hb_face_t
*
face
hb_tag_t
axis_tag
unsigned
int
*
axis_index
hb_ot_var_axis_t
*
axis_info
)
{
const
OT
:
:
fvar
&
fvar
=
_get_fvar
(
face
)
;
return
fvar
.
find_axis
(
axis_tag
axis_index
axis_info
)
;
}
void
hb_ot_var_normalize_variations
(
hb_face_t
*
face
const
hb_variation_t
*
variations
unsigned
int
variations_length
int
*
coords
unsigned
int
coords_length
)
{
for
(
unsigned
int
i
=
0
;
i
<
coords_length
;
i
+
+
)
coords
[
i
]
=
0
;
const
OT
:
:
fvar
&
fvar
=
_get_fvar
(
face
)
;
for
(
unsigned
int
i
=
0
;
i
<
variations_length
;
i
+
+
)
{
unsigned
int
axis_index
;
if
(
hb_ot_var_find_axis
(
face
variations
[
i
]
.
tag
&
axis_index
nullptr
)
&
&
axis_index
<
coords_length
)
coords
[
axis_index
]
=
fvar
.
normalize_axis_value
(
axis_index
variations
[
i
]
.
value
)
;
}
const
OT
:
:
avar
&
avar
=
_get_avar
(
face
)
;
avar
.
map_coords
(
coords
coords_length
)
;
}
void
hb_ot_var_normalize_coords
(
hb_face_t
*
face
unsigned
int
coords_length
const
float
*
design_coords
int
*
normalized_coords
)
{
const
OT
:
:
fvar
&
fvar
=
_get_fvar
(
face
)
;
for
(
unsigned
int
i
=
0
;
i
<
coords_length
;
i
+
+
)
normalized_coords
[
i
]
=
fvar
.
normalize_axis_value
(
i
design_coords
[
i
]
)
;
const
OT
:
:
avar
&
avar
=
_get_avar
(
face
)
;
avar
.
map_coords
(
normalized_coords
coords_length
)
;
}
