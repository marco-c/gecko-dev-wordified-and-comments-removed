#
ifndef
HB_SUBSET_H
#
define
HB_SUBSET_H
#
include
"
hb
.
h
"
HB_BEGIN_DECLS
typedef
struct
hb_subset_input_t
hb_subset_input_t
;
typedef
struct
hb_subset_plan_t
hb_subset_plan_t
;
typedef
enum
{
HB_SUBSET_FLAGS_DEFAULT
=
0x00000000u
HB_SUBSET_FLAGS_NO_HINTING
=
0x00000001u
HB_SUBSET_FLAGS_RETAIN_GIDS
=
0x00000002u
HB_SUBSET_FLAGS_DESUBROUTINIZE
=
0x00000004u
HB_SUBSET_FLAGS_NAME_LEGACY
=
0x00000008u
HB_SUBSET_FLAGS_SET_OVERLAPS_FLAG
=
0x00000010u
HB_SUBSET_FLAGS_PASSTHROUGH_UNRECOGNIZED
=
0x00000020u
HB_SUBSET_FLAGS_NOTDEF_OUTLINE
=
0x00000040u
HB_SUBSET_FLAGS_GLYPH_NAMES
=
0x00000080u
HB_SUBSET_FLAGS_NO_PRUNE_UNICODE_RANGES
=
0x00000100u
}
hb_subset_flags_t
;
typedef
enum
{
HB_SUBSET_SETS_GLYPH_INDEX
=
0
HB_SUBSET_SETS_UNICODE
HB_SUBSET_SETS_NO_SUBSET_TABLE_TAG
HB_SUBSET_SETS_DROP_TABLE_TAG
HB_SUBSET_SETS_NAME_ID
HB_SUBSET_SETS_NAME_LANG_ID
HB_SUBSET_SETS_LAYOUT_FEATURE_TAG
HB_SUBSET_SETS_LAYOUT_SCRIPT_TAG
}
hb_subset_sets_t
;
HB_EXTERN
hb_subset_input_t
*
hb_subset_input_create_or_fail
(
void
)
;
HB_EXTERN
hb_subset_input_t
*
hb_subset_input_reference
(
hb_subset_input_t
*
input
)
;
HB_EXTERN
void
hb_subset_input_destroy
(
hb_subset_input_t
*
input
)
;
HB_EXTERN
hb_bool_t
hb_subset_input_set_user_data
(
hb_subset_input_t
*
input
hb_user_data_key_t
*
key
void
*
data
hb_destroy_func_t
destroy
hb_bool_t
replace
)
;
HB_EXTERN
void
*
hb_subset_input_get_user_data
(
const
hb_subset_input_t
*
input
hb_user_data_key_t
*
key
)
;
HB_EXTERN
hb_set_t
*
hb_subset_input_unicode_set
(
hb_subset_input_t
*
input
)
;
HB_EXTERN
hb_set_t
*
hb_subset_input_glyph_set
(
hb_subset_input_t
*
input
)
;
HB_EXTERN
hb_set_t
*
hb_subset_input_set
(
hb_subset_input_t
*
input
hb_subset_sets_t
set_type
)
;
HB_EXTERN
hb_subset_flags_t
hb_subset_input_get_flags
(
hb_subset_input_t
*
input
)
;
HB_EXTERN
void
hb_subset_input_set_flags
(
hb_subset_input_t
*
input
unsigned
value
)
;
#
ifdef
HB_EXPERIMENTAL_API
#
ifndef
HB_NO_VAR
HB_EXTERN
hb_bool_t
hb_subset_input_pin_axis_to_default
(
hb_subset_input_t
*
input
hb_face_t
*
face
hb_tag_t
axis_tag
)
;
HB_EXTERN
hb_bool_t
hb_subset_input_pin_axis_location
(
hb_subset_input_t
*
input
hb_face_t
*
face
hb_tag_t
axis_tag
float
axis_value
)
;
#
endif
#
endif
#
ifdef
HB_EXPERIMENTAL_API
HB_EXTERN
hb_face_t
*
hb_subset_preprocess
(
hb_face_t
*
source
)
;
#
endif
HB_EXTERN
hb_face_t
*
hb_subset_or_fail
(
hb_face_t
*
source
const
hb_subset_input_t
*
input
)
;
HB_EXTERN
hb_face_t
*
hb_subset_plan_execute_or_fail
(
hb_subset_plan_t
*
plan
)
;
HB_EXTERN
hb_subset_plan_t
*
hb_subset_plan_create_or_fail
(
hb_face_t
*
face
const
hb_subset_input_t
*
input
)
;
HB_EXTERN
void
hb_subset_plan_destroy
(
hb_subset_plan_t
*
plan
)
;
HB_EXTERN
const
hb_map_t
*
hb_subset_plan_old_to_new_glyph_mapping
(
const
hb_subset_plan_t
*
plan
)
;
HB_EXTERN
const
hb_map_t
*
hb_subset_plan_new_to_old_glyph_mapping
(
const
hb_subset_plan_t
*
plan
)
;
HB_EXTERN
const
hb_map_t
*
hb_subset_plan_unicode_to_old_glyph_mapping
(
const
hb_subset_plan_t
*
plan
)
;
HB_EXTERN
hb_subset_plan_t
*
hb_subset_plan_reference
(
hb_subset_plan_t
*
plan
)
;
HB_EXTERN
hb_bool_t
hb_subset_plan_set_user_data
(
hb_subset_plan_t
*
plan
hb_user_data_key_t
*
key
void
*
data
hb_destroy_func_t
destroy
hb_bool_t
replace
)
;
HB_EXTERN
void
*
hb_subset_plan_get_user_data
(
const
hb_subset_plan_t
*
plan
hb_user_data_key_t
*
key
)
;
HB_END_DECLS
#
endif
