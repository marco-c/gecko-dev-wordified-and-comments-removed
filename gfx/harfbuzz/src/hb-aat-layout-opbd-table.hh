#
ifndef
HB_AAT_LAYOUT_OPBD_TABLE_HH
#
define
HB_AAT_LAYOUT_OPBD_TABLE_HH
#
include
"
hb
-
aat
-
layout
-
common
.
hh
"
#
include
"
hb
-
open
-
type
.
hh
"
#
define
HB_AAT_TAG_opbd
HB_TAG
(
'
o
'
'
p
'
'
b
'
'
d
'
)
namespace
AAT
{
struct
OpticalBounds
{
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
)
)
;
}
HBINT16
leftSide
;
HBINT16
topSide
;
HBINT16
rightSide
;
HBINT16
bottomSide
;
public
:
DEFINE_SIZE_STATIC
(
8
)
;
}
;
struct
opbd
{
static
constexpr
hb_tag_t
tableTag
=
HB_AAT_TAG_opbd
;
bool
get_optical_bounds
(
hb_font_t
*
font
hb_codepoint_t
glyph_id
hb_position_t
*
left
hb_position_t
*
top
hb_position_t
*
right
hb_position_t
*
bottom
)
const
{
const
OffsetTo
<
OpticalBounds
>
*
bounds_offset
=
lookupTable
.
get_value
(
glyph_id
font
-
>
face
-
>
get_num_glyphs
(
)
)
;
if
(
!
bounds_offset
)
return
false
;
const
OpticalBounds
&
bounds
=
this
+
*
bounds_offset
;
switch
(
format
)
{
case
0
:
*
left
=
font
-
>
em_scale_x
(
bounds
.
leftSide
)
;
*
top
=
font
-
>
em_scale_y
(
bounds
.
topSide
)
;
*
right
=
font
-
>
em_scale_x
(
bounds
.
rightSide
)
;
*
bottom
=
font
-
>
em_scale_y
(
bounds
.
bottomSide
)
;
return
true
;
case
1
:
hb_position_t
ignore
;
return
font
-
>
get_glyph_contour_point
(
glyph_id
bounds
.
leftSide
left
&
ignore
)
&
&
font
-
>
get_glyph_contour_point
(
glyph_id
bounds
.
topSide
&
ignore
top
)
&
&
font
-
>
get_glyph_contour_point
(
glyph_id
bounds
.
rightSide
right
&
ignore
)
&
&
font
-
>
get_glyph_contour_point
(
glyph_id
bounds
.
bottomSide
&
ignore
bottom
)
;
default
:
return
false
;
}
}
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
&
&
version
.
major
=
=
1
&
&
lookupTable
.
sanitize
(
c
this
)
)
)
;
}
protected
:
FixedVersion
<
>
version
;
HBUINT16
format
;
Lookup
<
OffsetTo
<
OpticalBounds
>
>
lookupTable
;
public
:
DEFINE_SIZE_MIN
(
8
)
;
}
;
}
#
endif
