#
ifndef
HB_OT_COLOR_SVG_TABLE_HH
#
define
HB_OT_COLOR_SVG_TABLE_HH
#
include
"
hb
-
open
-
type
.
hh
"
#
define
HB_OT_TAG_SVG
HB_TAG
(
'
S
'
'
V
'
'
G
'
'
'
)
namespace
OT
{
struct
SVGDocumentIndexEntry
{
friend
struct
SVG
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
const
void
*
base
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
&
&
(
base
+
svgDoc
)
.
sanitize
(
c
svgDocLength
)
)
;
}
protected
:
HBUINT16
startGlyphID
;
HBUINT16
endGlyphID
;
LOffsetTo
<
UnsizedArrayOf
<
HBUINT8
>
>
svgDoc
;
HBUINT32
svgDocLength
;
public
:
DEFINE_SIZE_STATIC
(
12
)
;
}
;
struct
SVGDocumentIndex
{
friend
struct
SVG
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
&
&
entries
.
sanitize
(
c
this
)
)
;
}
protected
:
ArrayOf
<
SVGDocumentIndexEntry
>
entries
;
public
:
DEFINE_SIZE_ARRAY
(
2
entries
)
;
}
;
struct
SVG
{
static
const
hb_tag_t
tableTag
=
HB_OT_TAG_SVG
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
&
&
(
this
+
svgDocIndex
)
.
sanitize
(
c
)
)
)
;
}
struct
accelerator_t
{
inline
void
init
(
hb_face_t
*
face
)
{
svg_blob
=
hb_sanitize_context_t
(
)
.
reference_table
<
SVG
>
(
face
)
;
svg_len
=
hb_blob_get_length
(
svg_blob
)
;
svg
=
svg_blob
-
>
as
<
SVG
>
(
)
;
}
inline
void
fini
(
void
)
{
hb_blob_destroy
(
svg_blob
)
;
}
inline
void
dump
(
void
(
*
callback
)
(
const
uint8_t
*
data
unsigned
int
length
unsigned
int
start_glyph
unsigned
int
end_glyph
)
)
const
{
const
SVGDocumentIndex
&
index
=
svg
+
svg
-
>
svgDocIndex
;
const
ArrayOf
<
SVGDocumentIndexEntry
>
&
entries
=
index
.
entries
;
for
(
unsigned
int
i
=
0
;
i
<
entries
.
len
;
+
+
i
)
{
const
SVGDocumentIndexEntry
&
entry
=
entries
[
i
]
;
callback
(
(
const
uint8_t
*
)
&
entry
.
svgDoc
(
&
index
)
entry
.
svgDocLength
entry
.
startGlyphID
entry
.
endGlyphID
)
;
}
}
private
:
hb_blob_t
*
svg_blob
;
const
SVG
*
svg
;
unsigned
int
svg_len
;
}
;
protected
:
HBUINT16
version
;
LOffsetTo
<
SVGDocumentIndex
>
svgDocIndex
;
HBUINT32
reserved
;
public
:
DEFINE_SIZE_STATIC
(
10
)
;
}
;
}
#
endif
