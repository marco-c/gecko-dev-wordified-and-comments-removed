#
ifndef
HB_AAT_MAP_HH
#
define
HB_AAT_MAP_HH
#
include
"
hb
.
hh
"
struct
hb_aat_map_t
{
friend
struct
hb_aat_map_builder_t
;
public
:
void
init
(
)
{
memset
(
this
0
sizeof
(
*
this
)
)
;
chain_flags
.
init
(
)
;
}
void
fini
(
)
{
chain_flags
.
fini
(
)
;
}
public
:
hb_vector_t
<
hb_mask_t
>
chain_flags
;
}
;
struct
hb_aat_map_builder_t
{
public
:
HB_INTERNAL
hb_aat_map_builder_t
(
hb_face_t
*
face_
const
hb_segment_properties_t
*
props_
HB_UNUSED
)
:
face
(
face_
)
{
}
HB_INTERNAL
void
add_feature
(
hb_tag_t
tag
unsigned
int
value
=
1
)
;
HB_INTERNAL
void
compile
(
hb_aat_map_t
&
m
)
;
public
:
struct
feature_info_t
{
hb_aat_layout_feature_type_t
type
;
hb_aat_layout_feature_selector_t
setting
;
bool
is_exclusive
;
unsigned
seq
;
HB_INTERNAL
static
int
cmp
(
const
void
*
pa
const
void
*
pb
)
{
const
feature_info_t
*
a
=
(
const
feature_info_t
*
)
pa
;
const
feature_info_t
*
b
=
(
const
feature_info_t
*
)
pb
;
if
(
a
-
>
type
!
=
b
-
>
type
)
return
(
a
-
>
type
<
b
-
>
type
?
-
1
:
1
)
;
if
(
!
a
-
>
is_exclusive
&
&
(
a
-
>
setting
&
~
1
)
!
=
(
b
-
>
setting
&
~
1
)
)
return
(
a
-
>
setting
<
b
-
>
setting
?
-
1
:
1
)
;
return
(
a
-
>
seq
<
b
-
>
seq
?
-
1
:
a
-
>
seq
>
b
-
>
seq
?
1
:
0
)
;
}
int
cmp
(
const
feature_info_t
&
f
)
const
{
return
(
f
.
type
!
=
type
)
?
(
f
.
type
<
type
?
-
1
:
1
)
:
(
f
.
setting
!
=
setting
)
?
(
f
.
setting
<
setting
?
-
1
:
1
)
:
0
;
}
}
;
public
:
hb_face_t
*
face
;
public
:
hb_sorted_vector_t
<
feature_info_t
>
features
;
}
;
#
endif
