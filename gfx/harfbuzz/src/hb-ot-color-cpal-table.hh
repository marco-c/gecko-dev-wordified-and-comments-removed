#
ifndef
HB_OT_COLOR_CPAL_TABLE_HH
#
define
HB_OT_COLOR_CPAL_TABLE_HH
#
include
"
hb
-
open
-
type
-
private
.
hh
"
typedef
uint32_t
hb_ot_color_t
;
typedef
enum
{
HB_OT_COLOR_PALETTE_FLAG_DEFAULT
=
0x00000000u
HB_OT_COLOR_PALETTE_FLAG_FOR_LIGHT_BACKGROUND
=
0x00000001u
HB_OT_COLOR_PALETTE_FLAG_FOR_DARK_BACKGROUND
=
0x00000002u
}
hb_ot_color_palette_flags_t
;
#
define
HB_OT_TAG_CPAL
HB_TAG
(
'
C
'
'
P
'
'
A
'
'
L
'
)
namespace
OT
{
struct
CPALV1Tail
{
friend
struct
CPAL
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
unsigned
int
palettes
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
&
&
c
-
>
check_array
(
(
const
void
*
)
&
paletteFlags
sizeof
(
HBUINT32
)
palettes
)
&
&
c
-
>
check_array
(
(
const
void
*
)
&
paletteLabel
sizeof
(
HBUINT16
)
palettes
)
&
&
c
-
>
check_array
(
(
const
void
*
)
&
paletteEntryLabel
sizeof
(
HBUINT16
)
palettes
)
)
;
}
private
:
inline
hb_ot_color_palette_flags_t
get_palette_flags
(
const
void
*
base
unsigned
int
palette
)
const
{
const
HBUINT32
*
flags
=
&
paletteFlags
(
base
)
;
return
(
hb_ot_color_palette_flags_t
)
(
uint32_t
)
flags
[
palette
]
;
}
inline
unsigned
int
get_palette_name_id
(
const
void
*
base
unsigned
int
palette
)
const
{
const
HBUINT16
*
name_ids
=
&
paletteLabel
(
base
)
;
return
name_ids
[
palette
]
;
}
protected
:
LOffsetTo
<
HBUINT32
>
paletteFlags
;
LOffsetTo
<
HBUINT16
>
paletteLabel
;
LOffsetTo
<
HBUINT16
>
paletteEntryLabel
;
public
:
DEFINE_SIZE_STATIC
(
12
)
;
}
;
typedef
HBUINT32
BGRAColor
;
struct
CPAL
{
static
const
hb_tag_t
tableTag
=
HB_OT_TAG_CPAL
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
if
(
!
(
c
-
>
check_struct
(
this
)
&
&
c
-
>
check_array
(
(
const
void
*
)
&
colorRecordsZ
sizeof
(
BGRAColor
)
numColorRecords
)
)
)
return_trace
(
false
)
;
for
(
unsigned
int
i
=
0
;
i
<
numPalettes
;
+
+
i
)
if
(
colorRecordIndicesX
[
i
]
+
numPaletteEntries
>
numColorRecords
)
return_trace
(
false
)
;
if
(
version
=
=
0
)
return_trace
(
true
)
;
const
CPALV1Tail
&
v1
=
StructAfter
<
CPALV1Tail
>
(
*
this
)
;
return_trace
(
v1
.
sanitize
(
c
numPalettes
)
)
;
}
inline
unsigned
int
get_size
(
void
)
const
{
return
min_size
+
numPalettes
*
sizeof
(
HBUINT16
)
;
}
inline
hb_ot_color_palette_flags_t
get_palette_flags
(
unsigned
int
palette
)
const
{
if
(
version
=
=
0
|
|
palette
>
=
numPalettes
)
return
HB_OT_COLOR_PALETTE_FLAG_DEFAULT
;
const
CPALV1Tail
&
cpal1
=
StructAfter
<
CPALV1Tail
>
(
*
this
)
;
return
cpal1
.
get_palette_flags
(
this
palette
)
;
}
inline
unsigned
int
get_palette_name_id
(
unsigned
int
palette
)
const
{
if
(
version
=
=
0
|
|
palette
>
=
numPalettes
)
return
0xFFFF
;
const
CPALV1Tail
&
cpal1
=
StructAfter
<
CPALV1Tail
>
(
*
this
)
;
return
cpal1
.
get_palette_name_id
(
this
palette
)
;
}
inline
unsigned
int
get_palette_count
(
)
const
{
return
numPalettes
;
}
inline
hb_ot_color_t
get_color_record_argb
(
unsigned
int
color_index
unsigned
int
palette
)
const
{
if
(
color_index
>
=
numPaletteEntries
|
|
palette
>
=
numPalettes
)
return
0
;
const
BGRAColor
*
records
=
&
colorRecordsZ
(
this
)
;
return
records
[
colorRecordIndicesX
[
palette
]
+
color_index
]
;
}
protected
:
HBUINT16
version
;
HBUINT16
numPaletteEntries
;
HBUINT16
numPalettes
;
HBUINT16
numColorRecords
;
LOffsetTo
<
HBUINT32
>
colorRecordsZ
;
HBUINT16
colorRecordIndicesX
[
VAR
]
;
public
:
DEFINE_SIZE_ARRAY
(
12
colorRecordIndicesX
)
;
}
;
}
#
endif
