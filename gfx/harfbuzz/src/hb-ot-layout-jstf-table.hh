#
ifndef
HB_OT_LAYOUT_JSTF_TABLE_HH
#
define
HB_OT_LAYOUT_JSTF_TABLE_HH
#
include
"
hb
-
open
-
type
.
hh
"
#
include
"
hb
-
ot
-
layout
-
gpos
-
table
.
hh
"
namespace
OT
{
typedef
IndexArray
JstfModList
;
typedef
List16OfOffset16To
<
PosLookup
>
JstfMax
;
struct
JstfPriority
{
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
&
&
shrinkageEnableGSUB
.
sanitize
(
c
this
)
&
&
shrinkageDisableGSUB
.
sanitize
(
c
this
)
&
&
shrinkageEnableGPOS
.
sanitize
(
c
this
)
&
&
shrinkageDisableGPOS
.
sanitize
(
c
this
)
&
&
shrinkageJstfMax
.
sanitize
(
c
this
)
&
&
extensionEnableGSUB
.
sanitize
(
c
this
)
&
&
extensionDisableGSUB
.
sanitize
(
c
this
)
&
&
extensionEnableGPOS
.
sanitize
(
c
this
)
&
&
extensionDisableGPOS
.
sanitize
(
c
this
)
&
&
extensionJstfMax
.
sanitize
(
c
this
)
)
;
}
protected
:
Offset16To
<
JstfModList
>
shrinkageEnableGSUB
;
Offset16To
<
JstfModList
>
shrinkageDisableGSUB
;
Offset16To
<
JstfModList
>
shrinkageEnableGPOS
;
Offset16To
<
JstfModList
>
shrinkageDisableGPOS
;
Offset16To
<
JstfMax
>
shrinkageJstfMax
;
Offset16To
<
JstfModList
>
extensionEnableGSUB
;
Offset16To
<
JstfModList
>
extensionDisableGSUB
;
Offset16To
<
JstfModList
>
extensionEnableGPOS
;
Offset16To
<
JstfModList
>
extensionDisableGPOS
;
Offset16To
<
JstfMax
>
extensionJstfMax
;
public
:
DEFINE_SIZE_STATIC
(
20
)
;
}
;
struct
JstfLangSys
:
List16OfOffset16To
<
JstfPriority
>
{
bool
sanitize
(
hb_sanitize_context_t
*
c
const
Record_sanitize_closure_t
*
=
nullptr
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
List16OfOffset16To
<
JstfPriority
>
:
:
sanitize
(
c
)
)
;
}
}
;
typedef
SortedArray16Of
<
HBGlyphID16
>
ExtenderGlyphs
;
struct
JstfScript
{
unsigned
int
get_lang_sys_count
(
)
const
{
return
langSys
.
len
;
}
const
Tag
&
get_lang_sys_tag
(
unsigned
int
i
)
const
{
return
langSys
.
get_tag
(
i
)
;
}
unsigned
int
get_lang_sys_tags
(
unsigned
int
start_offset
unsigned
int
*
lang_sys_count
hb_tag_t
*
lang_sys_tags
)
const
{
return
langSys
.
get_tags
(
start_offset
lang_sys_count
lang_sys_tags
)
;
}
const
JstfLangSys
&
get_lang_sys
(
unsigned
int
i
)
const
{
if
(
i
=
=
Index
:
:
NOT_FOUND_INDEX
)
return
get_default_lang_sys
(
)
;
return
this
+
langSys
[
i
]
.
offset
;
}
bool
find_lang_sys_index
(
hb_tag_t
tag
unsigned
int
*
index
)
const
{
return
langSys
.
find_index
(
tag
index
)
;
}
bool
has_default_lang_sys
(
)
const
{
return
defaultLangSys
!
=
0
;
}
const
JstfLangSys
&
get_default_lang_sys
(
)
const
{
return
this
+
defaultLangSys
;
}
bool
sanitize
(
hb_sanitize_context_t
*
c
const
Record_sanitize_closure_t
*
=
nullptr
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
extenderGlyphs
.
sanitize
(
c
this
)
&
&
defaultLangSys
.
sanitize
(
c
this
)
&
&
langSys
.
sanitize
(
c
this
)
)
;
}
protected
:
Offset16To
<
ExtenderGlyphs
>
extenderGlyphs
;
Offset16To
<
JstfLangSys
>
defaultLangSys
;
RecordArrayOf
<
JstfLangSys
>
langSys
;
public
:
DEFINE_SIZE_ARRAY
(
6
langSys
)
;
}
;
struct
JSTF
{
static
constexpr
hb_tag_t
tableTag
=
HB_OT_TAG_JSTF
;
unsigned
int
get_script_count
(
)
const
{
return
scriptList
.
len
;
}
const
Tag
&
get_script_tag
(
unsigned
int
i
)
const
{
return
scriptList
.
get_tag
(
i
)
;
}
unsigned
int
get_script_tags
(
unsigned
int
start_offset
unsigned
int
*
script_count
hb_tag_t
*
script_tags
)
const
{
return
scriptList
.
get_tags
(
start_offset
script_count
script_tags
)
;
}
const
JstfScript
&
get_script
(
unsigned
int
i
)
const
{
return
this
+
scriptList
[
i
]
.
offset
;
}
bool
find_script_index
(
hb_tag_t
tag
unsigned
int
*
index
)
const
{
return
scriptList
.
find_index
(
tag
index
)
;
}
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
version
.
sanitize
(
c
)
&
&
likely
(
version
.
major
=
=
1
)
&
&
scriptList
.
sanitize
(
c
this
)
)
;
}
protected
:
FixedVersion
<
>
version
;
RecordArrayOf
<
JstfScript
>
scriptList
;
public
:
DEFINE_SIZE_ARRAY
(
6
scriptList
)
;
}
;
}
#
endif
