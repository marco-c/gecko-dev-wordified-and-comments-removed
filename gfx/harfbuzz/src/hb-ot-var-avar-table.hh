#
ifndef
HB_OT_VAR_AVAR_TABLE_HH
#
define
HB_OT_VAR_AVAR_TABLE_HH
#
include
"
hb
-
open
-
type
-
private
.
hh
"
namespace
OT
{
struct
AxisValueMap
{
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
)
;
}
public
:
F2DOT14
fromCoord
;
F2DOT14
toCoord
;
public
:
DEFINE_SIZE_STATIC
(
4
)
;
}
;
struct
SegmentMaps
:
ArrayOf
<
AxisValueMap
>
{
inline
int
map
(
int
value
)
const
{
if
(
!
len
)
return
value
;
if
(
value
<
=
array
[
0
]
.
fromCoord
)
return
value
-
array
[
0
]
.
fromCoord
+
array
[
0
]
.
toCoord
;
unsigned
int
i
;
unsigned
int
count
=
len
;
for
(
i
=
1
;
i
<
count
&
&
value
>
array
[
i
]
.
fromCoord
;
i
+
+
)
;
if
(
value
>
=
array
[
i
]
.
fromCoord
)
return
value
-
array
[
i
]
.
fromCoord
+
array
[
i
]
.
toCoord
;
if
(
unlikely
(
array
[
i
-
1
]
.
fromCoord
=
=
array
[
i
]
.
fromCoord
)
)
return
array
[
i
-
1
]
.
toCoord
;
int
denom
=
array
[
i
]
.
fromCoord
-
array
[
i
-
1
]
.
fromCoord
;
return
array
[
i
-
1
]
.
toCoord
+
(
array
[
i
]
.
toCoord
-
array
[
i
-
1
]
.
toCoord
)
*
(
value
-
array
[
i
-
1
]
.
fromCoord
+
denom
/
2
)
/
denom
;
}
DEFINE_SIZE_ARRAY
(
2
array
)
;
}
;
#
define
HB_OT_TAG_avar
HB_TAG
(
'
a
'
'
v
'
'
a
'
'
r
'
)
struct
avar
{
static
const
hb_tag_t
tableTag
=
HB_OT_TAG_avar
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
if
(
unlikely
(
!
(
version
.
sanitize
(
c
)
&
&
version
.
major
=
=
1
&
&
c
-
>
check_struct
(
this
)
)
)
)
return_trace
(
false
)
;
const
SegmentMaps
*
map
=
&
axisSegmentMapsZ
;
unsigned
int
count
=
axisCount
;
for
(
unsigned
int
i
=
0
;
i
<
count
;
i
+
+
)
{
if
(
unlikely
(
!
map
-
>
sanitize
(
c
)
)
)
return_trace
(
false
)
;
map
=
&
StructAfter
<
SegmentMaps
>
(
*
map
)
;
}
return_trace
(
true
)
;
}
inline
void
map_coords
(
int
*
coords
unsigned
int
coords_length
)
const
{
unsigned
int
count
=
MIN
<
unsigned
int
>
(
coords_length
axisCount
)
;
const
SegmentMaps
*
map
=
&
axisSegmentMapsZ
;
for
(
unsigned
int
i
=
0
;
i
<
count
;
i
+
+
)
{
coords
[
i
]
=
map
-
>
map
(
coords
[
i
]
)
;
map
=
&
StructAfter
<
SegmentMaps
>
(
*
map
)
;
}
}
protected
:
FixedVersion
<
>
version
;
USHORT
reserved
;
USHORT
axisCount
;
SegmentMaps
axisSegmentMapsZ
;
public
:
DEFINE_SIZE_MIN
(
8
)
;
}
;
}
#
endif
