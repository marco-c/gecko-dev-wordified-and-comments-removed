#
include
"
hb
-
ot
-
cff2
-
table
.
hh
"
#
include
"
hb
-
cff2
-
interp
-
cs
.
hh
"
#
ifndef
HB_NO_OT_FONT_CFF
using
namespace
CFF
;
struct
extents_param_t
{
void
init
(
)
{
path_open
=
false
;
min_x
.
set_int
(
INT_MAX
)
;
min_y
.
set_int
(
INT_MAX
)
;
max_x
.
set_int
(
INT_MIN
)
;
max_y
.
set_int
(
INT_MIN
)
;
}
void
start_path
(
)
{
path_open
=
true
;
}
void
end_path
(
)
{
path_open
=
false
;
}
bool
is_path_open
(
)
const
{
return
path_open
;
}
void
update_bounds
(
const
point_t
&
pt
)
{
if
(
pt
.
x
<
min_x
)
min_x
=
pt
.
x
;
if
(
pt
.
x
>
max_x
)
max_x
=
pt
.
x
;
if
(
pt
.
y
<
min_y
)
min_y
=
pt
.
y
;
if
(
pt
.
y
>
max_y
)
max_y
=
pt
.
y
;
}
bool
path_open
;
number_t
min_x
;
number_t
min_y
;
number_t
max_x
;
number_t
max_y
;
}
;
struct
cff2_path_procs_extents_t
:
path_procs_t
<
cff2_path_procs_extents_t
cff2_cs_interp_env_t
extents_param_t
>
{
static
void
moveto
(
cff2_cs_interp_env_t
&
env
extents_param_t
&
param
const
point_t
&
pt
)
{
param
.
end_path
(
)
;
env
.
moveto
(
pt
)
;
}
static
void
line
(
cff2_cs_interp_env_t
&
env
extents_param_t
&
param
const
point_t
&
pt1
)
{
if
(
!
param
.
is_path_open
(
)
)
{
param
.
start_path
(
)
;
param
.
update_bounds
(
env
.
get_pt
(
)
)
;
}
env
.
moveto
(
pt1
)
;
param
.
update_bounds
(
env
.
get_pt
(
)
)
;
}
static
void
curve
(
cff2_cs_interp_env_t
&
env
extents_param_t
&
param
const
point_t
&
pt1
const
point_t
&
pt2
const
point_t
&
pt3
)
{
if
(
!
param
.
is_path_open
(
)
)
{
param
.
start_path
(
)
;
param
.
update_bounds
(
env
.
get_pt
(
)
)
;
}
param
.
update_bounds
(
pt1
)
;
param
.
update_bounds
(
pt2
)
;
env
.
moveto
(
pt3
)
;
param
.
update_bounds
(
env
.
get_pt
(
)
)
;
}
}
;
struct
cff2_cs_opset_extents_t
:
cff2_cs_opset_t
<
cff2_cs_opset_extents_t
extents_param_t
cff2_path_procs_extents_t
>
{
}
;
bool
OT
:
:
cff2
:
:
accelerator_t
:
:
get_extents
(
hb_font_t
*
font
hb_codepoint_t
glyph
hb_glyph_extents_t
*
extents
)
const
{
#
ifdef
HB_NO_OT_FONT_CFF
return
true
;
#
endif
if
(
unlikely
(
!
is_valid
(
)
|
|
(
glyph
>
=
num_glyphs
)
)
)
return
false
;
unsigned
int
num_coords
;
const
int
*
coords
=
hb_font_get_var_coords_normalized
(
font
&
num_coords
)
;
unsigned
int
fd
=
fdSelect
-
>
get_fd
(
glyph
)
;
cff2_cs_interpreter_t
<
cff2_cs_opset_extents_t
extents_param_t
>
interp
;
const
byte_str_t
str
=
(
*
charStrings
)
[
glyph
]
;
interp
.
env
.
init
(
str
*
this
fd
coords
num_coords
)
;
extents_param_t
param
;
param
.
init
(
)
;
if
(
unlikely
(
!
interp
.
interpret
(
param
)
)
)
return
false
;
if
(
param
.
min_x
>
=
param
.
max_x
)
{
extents
-
>
width
=
0
;
extents
-
>
x_bearing
=
0
;
}
else
{
extents
-
>
x_bearing
=
(
int32_t
)
param
.
min_x
.
floor
(
)
;
extents
-
>
width
=
(
int32_t
)
param
.
max_x
.
ceil
(
)
-
extents
-
>
x_bearing
;
}
if
(
param
.
min_y
>
=
param
.
max_y
)
{
extents
-
>
height
=
0
;
extents
-
>
y_bearing
=
0
;
}
else
{
extents
-
>
y_bearing
=
(
int32_t
)
param
.
max_y
.
ceil
(
)
;
extents
-
>
height
=
(
int32_t
)
param
.
min_y
.
floor
(
)
-
extents
-
>
y_bearing
;
}
return
true
;
}
#
endif
