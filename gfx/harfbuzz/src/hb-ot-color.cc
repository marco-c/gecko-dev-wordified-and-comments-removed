#
include
"
hb
-
open
-
type
-
private
.
hh
"
#
include
"
hb
-
ot
-
color
-
colr
-
table
.
hh
"
#
include
"
hb
-
ot
-
color
-
cpal
-
table
.
hh
"
#
include
"
hb
-
ot
.
h
"
#
include
<
stdlib
.
h
>
#
include
<
string
.
h
>
#
include
"
hb
-
ot
-
layout
-
private
.
hh
"
#
include
"
hb
-
shaper
-
private
.
hh
"
#
if
0
HB_MARK_AS_FLAG_T
(
hb_ot_color_palette_flags_t
)
static
inline
const
OT
:
:
COLR
&
_get_colr
(
hb_face_t
*
face
)
{
if
(
unlikely
(
!
hb_ot_shaper_face_data_ensure
(
face
)
)
)
return
Null
(
OT
:
:
COLR
)
;
hb_ot_layout_t
*
layout
=
hb_ot_layout_from_face
(
face
)
;
return
*
(
layout
-
>
colr
.
get
(
)
)
;
}
static
inline
const
OT
:
:
CPAL
&
_get_cpal
(
hb_face_t
*
face
)
{
if
(
unlikely
(
!
hb_ot_shaper_face_data_ensure
(
face
)
)
)
return
Null
(
OT
:
:
CPAL
)
;
hb_ot_layout_t
*
layout
=
hb_ot_layout_from_face
(
face
)
;
return
*
(
layout
-
>
cpal
.
get
(
)
)
;
}
unsigned
int
hb_ot_color_get_palette_count
(
hb_face_t
*
face
)
{
const
OT
:
:
CPAL
&
cpal
=
_get_cpal
(
face
)
;
return
cpal
.
get_palette_count
(
)
;
}
unsigned
int
hb_ot_color_get_palette_name_id
(
hb_face_t
*
face
unsigned
int
palette
)
{
const
OT
:
:
CPAL
&
cpal
=
_get_cpal
(
face
)
;
return
cpal
.
get_palette_name_id
(
palette
)
;
}
hb_ot_color_palette_flags_t
hb_ot_color_get_palette_flags
(
hb_face_t
*
face
unsigned
int
palette
)
{
const
OT
:
:
CPAL
&
cpal
=
_get_cpal
(
face
)
;
return
cpal
.
get_palette_flags
(
palette
)
;
}
unsigned
int
hb_ot_color_get_palette_colors
(
hb_face_t
*
face
unsigned
int
palette
unsigned
int
start_offset
unsigned
int
*
color_count
hb_ot_color_t
*
colors
)
{
const
OT
:
:
CPAL
&
cpal
=
_get_cpal
(
face
)
;
if
(
unlikely
(
palette
>
=
cpal
.
numPalettes
)
)
{
if
(
color_count
)
*
color_count
=
0
;
return
0
;
}
const
OT
:
:
ColorRecord
*
crec
=
&
cpal
.
offsetFirstColorRecord
(
&
cpal
)
;
crec
+
=
cpal
.
colorRecordIndices
[
palette
]
;
unsigned
int
num_results
=
0
;
if
(
likely
(
color_count
&
&
colors
)
)
{
for
(
unsigned
int
i
=
start_offset
;
i
<
cpal
.
numPaletteEntries
&
&
num_results
<
*
color_count
;
+
+
i
)
{
hb_ot_color_t
*
result
=
&
colors
[
num_results
]
;
result
-
>
red
=
crec
[
i
]
.
red
;
result
-
>
green
=
crec
[
i
]
.
green
;
result
-
>
blue
=
crec
[
i
]
.
blue
;
result
-
>
alpha
=
crec
[
i
]
.
alpha
;
+
+
num_results
;
}
}
if
(
likely
(
color_count
)
)
*
color_count
=
num_results
;
return
cpal
.
numPaletteEntries
;
}
#
endif
