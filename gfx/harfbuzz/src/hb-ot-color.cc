#
include
"
hb
.
hh
"
#
ifndef
HB_NO_COLOR
#
include
"
hb
-
ot
.
h
"
#
include
"
OT
/
Color
/
CBDT
/
CBDT
.
hh
"
#
include
"
OT
/
Color
/
COLR
/
COLR
.
hh
"
#
include
"
OT
/
Color
/
CPAL
/
CPAL
.
hh
"
#
include
"
OT
/
Color
/
sbix
/
sbix
.
hh
"
#
include
"
OT
/
Color
/
svg
/
svg
.
hh
"
hb_bool_t
hb_ot_color_has_palettes
(
hb_face_t
*
face
)
{
return
face
-
>
table
.
CPAL
-
>
has_data
(
)
;
}
unsigned
int
hb_ot_color_palette_get_count
(
hb_face_t
*
face
)
{
return
face
-
>
table
.
CPAL
-
>
get_palette_count
(
)
;
}
hb_ot_name_id_t
hb_ot_color_palette_get_name_id
(
hb_face_t
*
face
unsigned
int
palette_index
)
{
return
face
-
>
table
.
CPAL
-
>
get_palette_name_id
(
palette_index
)
;
}
hb_ot_name_id_t
hb_ot_color_palette_color_get_name_id
(
hb_face_t
*
face
unsigned
int
color_index
)
{
return
face
-
>
table
.
CPAL
-
>
get_color_name_id
(
color_index
)
;
}
hb_ot_color_palette_flags_t
hb_ot_color_palette_get_flags
(
hb_face_t
*
face
unsigned
int
palette_index
)
{
return
face
-
>
table
.
CPAL
-
>
get_palette_flags
(
palette_index
)
;
}
unsigned
int
hb_ot_color_palette_get_colors
(
hb_face_t
*
face
unsigned
int
palette_index
unsigned
int
start_offset
unsigned
int
*
colors_count
hb_color_t
*
colors
)
{
return
face
-
>
table
.
CPAL
-
>
get_palette_colors
(
palette_index
start_offset
colors_count
colors
)
;
}
hb_bool_t
hb_ot_color_has_layers
(
hb_face_t
*
face
)
{
return
face
-
>
table
.
COLR
-
>
has_v0_data
(
)
;
}
hb_bool_t
hb_ot_color_has_paint
(
hb_face_t
*
face
)
{
return
face
-
>
table
.
COLR
-
>
has_v1_data
(
)
;
}
hb_bool_t
hb_ot_color_glyph_has_paint
(
hb_face_t
*
face
hb_codepoint_t
glyph
)
{
return
face
-
>
table
.
COLR
-
>
has_paint_for_glyph
(
glyph
)
;
}
unsigned
int
hb_ot_color_glyph_get_layers
(
hb_face_t
*
face
hb_codepoint_t
glyph
unsigned
int
start_offset
unsigned
int
*
layer_count
hb_ot_color_layer_t
*
layers
)
{
return
face
-
>
table
.
COLR
-
>
get_glyph_layers
(
glyph
start_offset
layer_count
layers
)
;
}
hb_bool_t
hb_ot_color_has_svg
(
hb_face_t
*
face
)
{
return
face
-
>
table
.
SVG
-
>
has_data
(
)
;
}
hb_blob_t
*
hb_ot_color_glyph_reference_svg
(
hb_face_t
*
face
hb_codepoint_t
glyph
)
{
return
face
-
>
table
.
SVG
-
>
reference_blob_for_glyph
(
glyph
)
;
}
hb_bool_t
hb_ot_color_has_png
(
hb_face_t
*
face
)
{
return
face
-
>
table
.
CBDT
-
>
has_data
(
)
|
|
face
-
>
table
.
sbix
-
>
has_data
(
)
;
}
hb_blob_t
*
hb_ot_color_glyph_reference_png
(
hb_font_t
*
font
hb_codepoint_t
glyph
)
{
hb_blob_t
*
blob
=
hb_blob_get_empty
(
)
;
if
(
font
-
>
face
-
>
table
.
sbix
-
>
has_data
(
)
)
blob
=
font
-
>
face
-
>
table
.
sbix
-
>
reference_png
(
font
glyph
nullptr
nullptr
nullptr
)
;
if
(
!
blob
-
>
length
&
&
font
-
>
face
-
>
table
.
CBDT
-
>
has_data
(
)
)
blob
=
font
-
>
face
-
>
table
.
CBDT
-
>
reference_png
(
font
glyph
)
;
return
blob
;
}
#
endif
