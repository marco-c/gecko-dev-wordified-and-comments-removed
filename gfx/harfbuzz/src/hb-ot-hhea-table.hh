#
ifndef
HB_OT_HHEA_TABLE_HH
#
define
HB_OT_HHEA_TABLE_HH
#
include
"
hb
-
open
-
type
-
private
.
hh
"
namespace
OT
{
#
define
HB_OT_TAG_hhea
HB_TAG
(
'
h
'
'
h
'
'
e
'
'
a
'
)
#
define
HB_OT_TAG_vhea
HB_TAG
(
'
v
'
'
h
'
'
e
'
'
a
'
)
struct
_hea
{
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
&
&
likely
(
version
.
major
=
=
1
)
)
;
}
public
:
FixedVersion
<
>
version
;
FWORD
ascender
;
FWORD
descender
;
FWORD
lineGap
;
UFWORD
advanceMax
;
FWORD
minLeadingBearing
;
FWORD
minTrailingBearing
;
FWORD
maxExtent
;
INT16
caretSlopeRise
;
INT16
caretSlopeRun
;
INT16
caretOffset
;
INT16
reserved1
;
INT16
reserved2
;
INT16
reserved3
;
INT16
reserved4
;
INT16
metricDataFormat
;
UINT16
numberOfLongMetrics
;
public
:
DEFINE_SIZE_STATIC
(
36
)
;
}
;
struct
hhea
:
_hea
{
static
const
hb_tag_t
tableTag
=
HB_OT_TAG_hhea
;
}
;
struct
vhea
:
_hea
{
static
const
hb_tag_t
tableTag
=
HB_OT_TAG_vhea
;
}
;
}
#
endif
