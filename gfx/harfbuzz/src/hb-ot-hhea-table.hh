#
ifndef
HB_OT_HHEA_TABLE_HH
#
define
HB_OT_HHEA_TABLE_HH
#
include
"
hb
-
open
-
type
.
hh
"
#
define
HB_OT_TAG_hhea
HB_TAG
(
'
h
'
'
h
'
'
e
'
'
a
'
)
#
define
HB_OT_TAG_vhea
HB_TAG
(
'
v
'
'
h
'
'
e
'
'
a
'
)
namespace
OT
{
template
<
typename
T
>
struct
_hea
{
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
&
&
likely
(
version
.
major
=
=
1
)
)
;
}
public
:
FixedVersion
<
>
version
;
FWORD
ascender
;
FWORD
descender
;
FWORD
lineGap
;
UFWORD
advanceMax
;
FWORD
minLeadingBearing
;
FWORD
minTrailingBearing
;
FWORD
maxExtent
;
HBINT16
caretSlopeRise
;
HBINT16
caretSlopeRun
;
HBINT16
caretOffset
;
HBINT16
reserved1
;
HBINT16
reserved2
;
HBINT16
reserved3
;
HBINT16
reserved4
;
HBINT16
metricDataFormat
;
HBUINT16
numberOfLongMetrics
;
public
:
DEFINE_SIZE_STATIC
(
36
)
;
}
;
struct
hhea
:
_hea
<
hhea
>
{
enum
{
tableTag
=
HB_OT_TAG_hhea
}
;
}
;
struct
vhea
:
_hea
<
vhea
>
{
enum
{
tableTag
=
HB_OT_TAG_vhea
}
;
}
;
}
#
endif
