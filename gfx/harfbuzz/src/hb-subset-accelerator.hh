#
ifndef
HB_SUBSET_ACCELERATOR_HH
#
define
HB_SUBSET_ACCELERATOR_HH
#
include
"
hb
.
hh
"
#
include
"
hb
-
map
.
hh
"
#
include
"
hb
-
set
.
hh
"
struct
hb_subset_accelerator_t
{
static
hb_user_data_key_t
*
user_data_key
(
)
{
static
hb_user_data_key_t
key
;
return
&
key
;
}
static
hb_subset_accelerator_t
*
create
(
const
hb_map_t
&
unicode_to_gid_
const
hb_set_t
&
unicodes_
)
{
hb_subset_accelerator_t
*
accel
=
(
hb_subset_accelerator_t
*
)
hb_malloc
(
sizeof
(
hb_subset_accelerator_t
)
)
;
new
(
accel
)
hb_subset_accelerator_t
(
unicode_to_gid_
unicodes_
)
;
return
accel
;
}
static
void
destroy
(
void
*
value
)
{
if
(
!
value
)
return
;
hb_subset_accelerator_t
*
accel
=
(
hb_subset_accelerator_t
*
)
value
;
accel
-
>
~
hb_subset_accelerator_t
(
)
;
hb_free
(
accel
)
;
}
hb_subset_accelerator_t
(
const
hb_map_t
&
unicode_to_gid_
const
hb_set_t
&
unicodes_
)
:
unicode_to_gid
(
unicode_to_gid_
)
unicodes
(
unicodes_
)
{
}
const
hb_map_t
unicode_to_gid
;
const
hb_set_t
unicodes
;
bool
in_error
(
)
const
{
return
unicode_to_gid
.
in_error
(
)
|
|
unicodes
.
in_error
(
)
;
}
}
;
#
endif
