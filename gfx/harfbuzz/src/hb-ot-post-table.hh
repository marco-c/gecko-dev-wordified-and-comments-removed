#
ifndef
HB_OT_POST_TABLE_HH
#
define
HB_OT_POST_TABLE_HH
#
include
"
hb
-
open
-
type
-
private
.
hh
"
namespace
OT
{
#
define
HB_OT_TAG_post
HB_TAG
(
'
p
'
'
o
'
'
s
'
'
t
'
)
struct
postV2Tail
{
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
numberOfGlyphs
.
sanitize
(
c
)
&
&
c
-
>
check_array
(
glyphNameIndex
sizeof
(
USHORT
)
numberOfGlyphs
)
)
;
}
USHORT
numberOfGlyphs
;
USHORT
glyphNameIndex
[
VAR
]
;
BYTE
namesX
[
VAR
]
;
DEFINE_SIZE_ARRAY2
(
2
glyphNameIndex
namesX
)
;
}
;
struct
post
{
static
const
hb_tag_t
tableTag
=
HB_OT_TAG_post
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
if
(
unlikely
(
!
c
-
>
check_struct
(
this
)
)
)
return_trace
(
false
)
;
if
(
version
.
to_int
(
)
=
=
0x00020000
)
{
const
postV2Tail
&
v2
=
StructAfter
<
postV2Tail
>
(
*
this
)
;
return_trace
(
v2
.
sanitize
(
c
)
)
;
}
return_trace
(
true
)
;
}
public
:
FixedVersion
<
>
version
;
Fixed
italicAngle
;
FWORD
underlinePosition
;
FWORD
underlineThickness
;
ULONG
isFixedPitch
;
ULONG
minMemType42
;
ULONG
maxMemType42
;
ULONG
minMemType1
;
ULONG
maxMemType1
;
DEFINE_SIZE_STATIC
(
32
)
;
}
;
}
#
endif
