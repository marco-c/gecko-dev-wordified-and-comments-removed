#
ifndef
HB_PAINT_BOUNDED_HH
#
define
HB_PAINT_BOUNDED_HH
#
include
"
hb
.
hh
"
#
include
"
hb
-
paint
.
h
"
#
include
"
hb
-
geometry
.
hh
"
typedef
struct
hb_paint_bounded_context_t
hb_paint_bounded_context_t
;
struct
hb_paint_bounded_context_t
{
void
clear
(
)
{
clips
=
0
;
bounded
=
true
;
groups
.
clear
(
)
;
}
hb_paint_bounded_context_t
(
)
{
clear
(
)
;
}
bool
is_bounded
(
)
{
return
bounded
;
}
void
push_clip
(
)
{
clips
+
+
;
}
void
pop_clip
(
)
{
if
(
clips
=
=
0
)
return
;
clips
-
-
;
}
void
push_group
(
)
{
groups
.
push
(
bounded
)
;
bounded
=
true
;
}
void
pop_group
(
hb_paint_composite_mode_t
mode
)
{
const
bool
src_bounded
=
bounded
;
bounded
=
groups
.
pop
(
)
;
bool
&
backdrop_bounded
=
bounded
;
switch
(
(
int
)
mode
)
{
case
HB_PAINT_COMPOSITE_MODE_CLEAR
:
backdrop_bounded
=
true
;
break
;
case
HB_PAINT_COMPOSITE_MODE_SRC
:
case
HB_PAINT_COMPOSITE_MODE_SRC_OUT
:
backdrop_bounded
=
src_bounded
;
break
;
case
HB_PAINT_COMPOSITE_MODE_DEST
:
case
HB_PAINT_COMPOSITE_MODE_DEST_OUT
:
break
;
case
HB_PAINT_COMPOSITE_MODE_SRC_IN
:
case
HB_PAINT_COMPOSITE_MODE_DEST_IN
:
backdrop_bounded
=
backdrop_bounded
&
&
src_bounded
;
break
;
default
:
backdrop_bounded
=
backdrop_bounded
|
|
src_bounded
;
break
;
}
}
void
paint
(
)
{
if
(
!
clips
)
bounded
=
false
;
}
protected
:
bool
bounded
;
unsigned
clips
;
hb_vector_t
<
bool
>
groups
;
}
;
HB_INTERNAL
hb_paint_funcs_t
*
hb_paint_bounded_get_funcs
(
)
;
#
endif
