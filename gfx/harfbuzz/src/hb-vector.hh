#
ifndef
HB_VECTOR_HH
#
define
HB_VECTOR_HH
#
include
"
hb
.
hh
"
template
<
typename
Type
unsigned
int
StaticSize
=
8
>
struct
hb_vector_t
{
unsigned
int
len
;
unsigned
int
allocated
;
Type
*
arrayZ
;
Type
static_array
[
StaticSize
]
;
void
init
(
void
)
{
len
=
0
;
allocated
=
ARRAY_LENGTH
(
static_array
)
;
arrayZ
=
static_array
;
}
inline
Type
&
operator
[
]
(
unsigned
int
i
)
{
if
(
unlikely
(
i
>
=
len
)
)
return
Crap
(
Type
)
;
return
arrayZ
[
i
]
;
}
inline
const
Type
&
operator
[
]
(
unsigned
int
i
)
const
{
if
(
unlikely
(
i
>
=
len
)
)
return
Null
(
Type
)
;
return
arrayZ
[
i
]
;
}
inline
Type
*
push
(
void
)
{
if
(
unlikely
(
!
resize
(
len
+
1
)
)
)
return
&
Crap
(
Type
)
;
return
&
arrayZ
[
len
-
1
]
;
}
inline
Type
*
push
(
const
Type
&
v
)
{
Type
*
p
=
push
(
)
;
*
p
=
v
;
return
p
;
}
inline
bool
in_error
(
void
)
const
{
return
allocated
=
=
0
;
}
inline
bool
alloc
(
unsigned
int
size
)
{
if
(
unlikely
(
!
allocated
)
)
return
false
;
if
(
likely
(
size
<
=
allocated
)
)
return
true
;
unsigned
int
new_allocated
=
allocated
;
while
(
size
>
=
new_allocated
)
new_allocated
+
=
(
new_allocated
>
>
1
)
+
8
;
Type
*
new_array
=
nullptr
;
if
(
arrayZ
=
=
static_array
)
{
new_array
=
(
Type
*
)
calloc
(
new_allocated
sizeof
(
Type
)
)
;
if
(
new_array
)
memcpy
(
new_array
arrayZ
len
*
sizeof
(
Type
)
)
;
}
else
{
bool
overflows
=
(
new_allocated
<
allocated
)
|
|
hb_unsigned_mul_overflows
(
new_allocated
sizeof
(
Type
)
)
;
if
(
likely
(
!
overflows
)
)
new_array
=
(
Type
*
)
realloc
(
arrayZ
new_allocated
*
sizeof
(
Type
)
)
;
}
if
(
unlikely
(
!
new_array
)
)
{
allocated
=
0
;
return
false
;
}
arrayZ
=
new_array
;
allocated
=
new_allocated
;
return
true
;
}
inline
bool
resize
(
int
size_
)
{
unsigned
int
size
=
size_
<
0
?
0u
:
(
unsigned
int
)
size_
;
if
(
!
alloc
(
size
)
)
return
false
;
if
(
size
>
len
)
memset
(
arrayZ
+
len
0
(
size
-
len
)
*
sizeof
(
*
arrayZ
)
)
;
len
=
size
;
return
true
;
}
inline
void
pop
(
void
)
{
if
(
!
len
)
return
;
len
-
-
;
}
inline
void
remove
(
unsigned
int
i
)
{
if
(
unlikely
(
i
>
=
len
)
)
return
;
memmove
(
static_cast
<
void
*
>
(
&
arrayZ
[
i
]
)
static_cast
<
void
*
>
(
&
arrayZ
[
i
+
1
]
)
(
len
-
i
-
1
)
*
sizeof
(
Type
)
)
;
len
-
-
;
}
inline
void
shrink
(
int
size_
)
{
unsigned
int
size
=
size_
<
0
?
0u
:
(
unsigned
int
)
size_
;
if
(
size
<
len
)
len
=
size
;
}
template
<
typename
T
>
inline
Type
*
find
(
T
v
)
{
for
(
unsigned
int
i
=
0
;
i
<
len
;
i
+
+
)
if
(
arrayZ
[
i
]
=
=
v
)
return
&
arrayZ
[
i
]
;
return
nullptr
;
}
template
<
typename
T
>
inline
const
Type
*
find
(
T
v
)
const
{
for
(
unsigned
int
i
=
0
;
i
<
len
;
i
+
+
)
if
(
arrayZ
[
i
]
=
=
v
)
return
&
arrayZ
[
i
]
;
return
nullptr
;
}
inline
void
qsort
(
int
(
*
cmp
)
(
const
void
*
const
void
*
)
)
{
:
:
qsort
(
arrayZ
len
sizeof
(
Type
)
cmp
)
;
}
inline
void
qsort
(
void
)
{
:
:
qsort
(
arrayZ
len
sizeof
(
Type
)
Type
:
:
cmp
)
;
}
inline
void
qsort
(
unsigned
int
start
unsigned
int
end
)
{
:
:
qsort
(
arrayZ
+
start
end
-
start
sizeof
(
Type
)
Type
:
:
cmp
)
;
}
template
<
typename
T
>
inline
Type
*
lsearch
(
const
T
&
x
)
{
for
(
unsigned
int
i
=
0
;
i
<
len
;
i
+
+
)
if
(
0
=
=
this
-
>
arrayZ
[
i
]
.
cmp
(
&
x
)
)
return
&
arrayZ
[
i
]
;
return
nullptr
;
}
template
<
typename
T
>
inline
Type
*
bsearch
(
const
T
&
x
)
{
unsigned
int
i
;
return
bfind
(
x
&
i
)
?
&
arrayZ
[
i
]
:
nullptr
;
}
template
<
typename
T
>
inline
const
Type
*
bsearch
(
const
T
&
x
)
const
{
unsigned
int
i
;
return
bfind
(
x
&
i
)
?
&
arrayZ
[
i
]
:
nullptr
;
}
template
<
typename
T
>
inline
bool
bfind
(
const
T
&
x
unsigned
int
*
i
)
const
{
int
min
=
0
max
=
(
int
)
this
-
>
len
-
1
;
while
(
min
<
=
max
)
{
int
mid
=
(
min
+
max
)
/
2
;
int
c
=
this
-
>
arrayZ
[
mid
]
.
cmp
(
&
x
)
;
if
(
c
<
0
)
max
=
mid
-
1
;
else
if
(
c
>
0
)
min
=
mid
+
1
;
else
{
*
i
=
mid
;
return
true
;
}
}
if
(
max
<
0
|
|
(
max
<
(
int
)
this
-
>
len
&
&
this
-
>
arrayZ
[
max
]
.
cmp
(
&
x
)
>
0
)
)
max
+
+
;
*
i
=
max
;
return
false
;
}
inline
void
fini
(
void
)
{
if
(
arrayZ
!
=
static_array
)
free
(
arrayZ
)
;
arrayZ
=
nullptr
;
allocated
=
len
=
0
;
}
}
;
#
endif
