#
include
"
hb
.
hh
"
#
ifndef
HB_NO_OT_SHAPE
#
include
"
hb
-
ot
-
shape
-
complex
-
syllabic
.
hh
"
void
hb_syllabic_insert_dotted_circles
(
hb_font_t
*
font
hb_buffer_t
*
buffer
unsigned
int
broken_syllable_type
unsigned
int
dottedcircle_category
int
repha_category
)
{
if
(
unlikely
(
buffer
-
>
flags
&
HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE
)
)
return
;
bool
has_broken_syllables
=
false
;
unsigned
int
count
=
buffer
-
>
len
;
hb_glyph_info_t
*
info
=
buffer
-
>
info
;
for
(
unsigned
int
i
=
0
;
i
<
count
;
i
+
+
)
if
(
(
info
[
i
]
.
syllable
(
)
&
0x0F
)
=
=
broken_syllable_type
)
{
has_broken_syllables
=
true
;
break
;
}
if
(
likely
(
!
has_broken_syllables
)
)
return
;
hb_codepoint_t
dottedcircle_glyph
;
if
(
!
font
-
>
get_nominal_glyph
(
0x25CCu
&
dottedcircle_glyph
)
)
return
;
hb_glyph_info_t
dottedcircle
=
{
0
}
;
dottedcircle
.
codepoint
=
0x25CCu
;
dottedcircle
.
complex_var_u8_category
(
)
=
dottedcircle_category
;
dottedcircle
.
codepoint
=
dottedcircle_glyph
;
buffer
-
>
clear_output
(
)
;
buffer
-
>
idx
=
0
;
unsigned
int
last_syllable
=
0
;
while
(
buffer
-
>
idx
<
buffer
-
>
len
&
&
buffer
-
>
successful
)
{
unsigned
int
syllable
=
buffer
-
>
cur
(
)
.
syllable
(
)
;
if
(
unlikely
(
last_syllable
!
=
syllable
&
&
(
syllable
&
0x0F
)
=
=
broken_syllable_type
)
)
{
last_syllable
=
syllable
;
hb_glyph_info_t
ginfo
=
dottedcircle
;
ginfo
.
cluster
=
buffer
-
>
cur
(
)
.
cluster
;
ginfo
.
mask
=
buffer
-
>
cur
(
)
.
mask
;
ginfo
.
syllable
(
)
=
buffer
-
>
cur
(
)
.
syllable
(
)
;
if
(
repha_category
!
=
-
1
)
{
while
(
buffer
-
>
idx
<
buffer
-
>
len
&
&
buffer
-
>
successful
&
&
last_syllable
=
=
buffer
-
>
cur
(
)
.
syllable
(
)
&
&
buffer
-
>
cur
(
)
.
complex_var_u8_category
(
)
=
=
(
unsigned
)
repha_category
)
(
void
)
buffer
-
>
next_glyph
(
)
;
}
(
void
)
buffer
-
>
output_info
(
ginfo
)
;
}
else
(
void
)
buffer
-
>
next_glyph
(
)
;
}
buffer
-
>
swap_buffers
(
)
;
}
#
endif
