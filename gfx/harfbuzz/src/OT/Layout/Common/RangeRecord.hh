#
ifndef
OT_LAYOUT_COMMON_RANGERECORD_HH
#
define
OT_LAYOUT_COMMON_RANGERECORD_HH
namespace
OT
{
namespace
Layout
{
namespace
Common
{
template
<
typename
Types
>
struct
RangeRecord
{
typename
Types
:
:
HBGlyphID
first
;
typename
Types
:
:
HBGlyphID
last
;
HBUINT16
value
;
DEFINE_SIZE_STATIC
(
2
+
2
*
Types
:
:
size
)
;
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
)
;
}
int
cmp
(
hb_codepoint_t
g
)
const
{
return
g
<
first
?
-
1
:
g
<
=
last
?
0
:
+
1
;
}
unsigned
get_population
(
)
const
{
if
(
unlikely
(
last
<
first
)
)
return
0
;
return
(
last
-
first
+
1
)
;
}
bool
intersects
(
const
hb_set_t
&
glyphs
)
const
{
return
glyphs
.
intersects
(
first
last
)
;
}
template
<
typename
set_t
>
bool
collect_coverage
(
set_t
*
glyphs
)
const
{
return
glyphs
-
>
add_range
(
first
last
)
;
}
}
;
}
}
}
extern
HB_INTERNAL
const
unsigned
char
_hb_Null_OT_RangeRecord
[
9
]
;
template
<
typename
Spec
>
struct
Null
<
OT
:
:
Layout
:
:
Common
:
:
RangeRecord
<
Spec
>
>
{
static
OT
:
:
Layout
:
:
Common
:
:
RangeRecord
<
Spec
>
const
&
get_null
(
)
{
return
*
reinterpret_cast
<
const
OT
:
:
Layout
:
:
Common
:
:
RangeRecord
<
Spec
>
*
>
(
_hb_Null_OT_RangeRecord
)
;
}
}
;
#
endif
