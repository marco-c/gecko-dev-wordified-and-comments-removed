#
ifndef
HB_HH
#
define
HB_HH
#
ifndef
HB_NO_PRAGMA_GCC_DIAGNOSTIC
#
ifdef
_MSC_VER
#
pragma
warning
(
disable
:
4068
)
/
*
Unknown
pragma
*
/
#
endif
#
if
defined
(
__GNUC__
)
|
|
defined
(
__clang__
)
#
ifndef
HB_NO_PRAGMA_GCC_DIAGNOSTIC_WARNING
#
pragma
GCC
diagnostic
warning
"
-
Wall
"
#
pragma
GCC
diagnostic
warning
"
-
Wextra
"
#
endif
#
ifndef
HB_NO_PRAGMA_GCC_DIAGNOSTIC_IGNORED
#
pragma
GCC
diagnostic
ignored
"
-
Wpragmas
"
#
pragma
GCC
diagnostic
ignored
"
-
Wunknown
-
pragmas
"
#
pragma
GCC
diagnostic
ignored
"
-
Wunknown
-
warning
-
option
"
#
endif
#
ifndef
HB_NO_PRAGMA_GCC_DIAGNOSTIC_WARNING
#
endif
#
ifndef
HB_NO_PRAGMA_GCC_DIAGNOSTIC_ERROR
#
pragma
GCC
diagnostic
error
"
-
Wc
+
+
11
-
narrowing
"
#
pragma
GCC
diagnostic
error
"
-
Wcast
-
align
"
#
pragma
GCC
diagnostic
error
"
-
Wcast
-
function
-
type
"
#
pragma
GCC
diagnostic
error
"
-
Wdelete
-
non
-
virtual
-
dtor
"
#
pragma
GCC
diagnostic
error
"
-
Wembedded
-
directive
"
#
pragma
GCC
diagnostic
error
"
-
Wextra
-
semi
-
stmt
"
#
pragma
GCC
diagnostic
error
"
-
Wformat
-
security
"
#
pragma
GCC
diagnostic
error
"
-
Wimplicit
-
function
-
declaration
"
#
pragma
GCC
diagnostic
error
"
-
Winit
-
self
"
#
pragma
GCC
diagnostic
error
"
-
Winjected
-
class
-
name
"
#
pragma
GCC
diagnostic
error
"
-
Wmissing
-
braces
"
#
pragma
GCC
diagnostic
error
"
-
Wmissing
-
declarations
"
#
pragma
GCC
diagnostic
error
"
-
Wmissing
-
prototypes
"
#
pragma
GCC
diagnostic
error
"
-
Wnested
-
externs
"
#
pragma
GCC
diagnostic
error
"
-
Wold
-
style
-
definition
"
#
pragma
GCC
diagnostic
error
"
-
Wpointer
-
arith
"
#
pragma
GCC
diagnostic
error
"
-
Wredundant
-
decls
"
#
pragma
GCC
diagnostic
error
"
-
Wreorder
"
#
pragma
GCC
diagnostic
error
"
-
Wsign
-
compare
"
#
pragma
GCC
diagnostic
error
"
-
Wstrict
-
prototypes
"
#
pragma
GCC
diagnostic
error
"
-
Wstring
-
conversion
"
#
pragma
GCC
diagnostic
error
"
-
Wswitch
-
enum
"
#
pragma
GCC
diagnostic
error
"
-
Wtautological
-
overlap
-
compare
"
#
pragma
GCC
diagnostic
error
"
-
Wunneeded
-
internal
-
declaration
"
#
pragma
GCC
diagnostic
error
"
-
Wunused
"
#
pragma
GCC
diagnostic
error
"
-
Wunused
-
local
-
typedefs
"
#
pragma
GCC
diagnostic
error
"
-
Wunused
-
value
"
#
pragma
GCC
diagnostic
error
"
-
Wunused
-
variable
"
#
pragma
GCC
diagnostic
error
"
-
Wvla
"
#
pragma
GCC
diagnostic
error
"
-
Wwrite
-
strings
"
#
endif
#
ifndef
HB_NO_PRAGMA_GCC_DIAGNOSTIC_WARNING
#
pragma
GCC
diagnostic
warning
"
-
Wbuiltin
-
macro
-
redefined
"
#
pragma
GCC
diagnostic
warning
"
-
Wdeprecated
"
#
pragma
GCC
diagnostic
warning
"
-
Wdisabled
-
optimization
"
#
pragma
GCC
diagnostic
warning
"
-
Wdouble
-
promotion
"
#
pragma
GCC
diagnostic
warning
"
-
Wformat
=
2
"
#
pragma
GCC
diagnostic
warning
"
-
Wignored
-
pragma
-
optimize
"
#
pragma
GCC
diagnostic
warning
"
-
Wlogical
-
op
"
#
pragma
GCC
diagnostic
warning
"
-
Wmaybe
-
uninitialized
"
#
pragma
GCC
diagnostic
warning
"
-
Wmissing
-
format
-
attribute
"
#
pragma
GCC
diagnostic
warning
"
-
Wundef
"
#
endif
#
ifndef
HB_NO_PRAGMA_GCC_DIAGNOSTIC_IGNORED
#
pragma
GCC
diagnostic
ignored
"
-
Wconversion
"
/
/
TODO
fix
#
pragma
GCC
diagnostic
ignored
"
-
Wformat
-
signedness
"
/
/
TODO
fix
#
pragma
GCC
diagnostic
ignored
"
-
Wshadow
"
/
/
TODO
fix
#
pragma
GCC
diagnostic
ignored
"
-
Wunsafe
-
loop
-
optimizations
"
/
/
TODO
fix
#
pragma
GCC
diagnostic
ignored
"
-
Wunused
-
parameter
"
/
/
TODO
fix
#
endif
#
ifndef
HB_NO_PRAGMA_GCC_DIAGNOSTIC_IGNORED
#
pragma
GCC
diagnostic
ignored
"
-
Wclass
-
memaccess
"
#
pragma
GCC
diagnostic
ignored
"
-
Wformat
-
nonliteral
"
#
pragma
GCC
diagnostic
ignored
"
-
Wformat
-
zero
-
length
"
#
pragma
GCC
diagnostic
ignored
"
-
Wmissing
-
field
-
initializers
"
#
pragma
GCC
diagnostic
ignored
"
-
Wpacked
"
/
/
Erratic
impl
in
clang
#
pragma
GCC
diagnostic
ignored
"
-
Wstrict
-
aliasing
"
#
pragma
GCC
diagnostic
ignored
"
-
Wtype
-
limits
"
#
pragma
GCC
diagnostic
ignored
"
-
Wc
+
+
11
-
compat
"
/
/
only
gcc
raises
it
#
endif
#
endif
#
endif
#
include
"
hb
-
config
.
hh
"
#
ifndef
_ALL_SOURCE
#
define
_ALL_SOURCE
1
#
endif
#
ifndef
_GNU_SOURCE
#
define
_GNU_SOURCE
1
#
endif
#
ifndef
_POSIX_PTHREAD_SEMANTICS
#
define
_POSIX_PTHREAD_SEMANTICS
1
#
endif
#
ifndef
_TANDEM_SOURCE
#
define
_TANDEM_SOURCE
1
#
endif
#
ifndef
__EXTENSIONS__
#
define
__EXTENSIONS__
1
#
endif
#
if
defined
(
_MSC_VER
)
&
&
defined
(
HB_DLL_EXPORT
)
#
define
HB_EXTERN
__declspec
(
dllexport
)
extern
#
endif
#
include
"
hb
.
h
"
#
define
HB_H_IN
#
include
"
hb
-
ot
.
h
"
#
define
HB_OT_H_IN
#
include
"
hb
-
aat
.
h
"
#
define
HB_AAT_H_IN
#
include
<
limits
.
h
>
#
include
<
math
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
stddef
.
h
>
#
include
<
string
.
h
>
#
include
<
assert
.
h
>
#
include
<
errno
.
h
>
#
include
<
stdio
.
h
>
#
include
<
stdarg
.
h
>
#
if
(
defined
(
_MSC_VER
)
&
&
_MSC_VER
>
=
1500
)
|
|
defined
(
__MINGW32__
)
#
ifdef
__MINGW32_VERSION
#
ifndef
WIN32_LEAN_AND_MEAN
#
define
WIN32_LEAN_AND_MEAN
1
#
endif
#
include
<
windows
.
h
>
#
else
#
include
<
intrin
.
h
>
#
endif
#
endif
#
define
HB_PASTE1
(
a
b
)
a
#
#
b
#
define
HB_PASTE
(
a
b
)
HB_PASTE1
(
a
b
)
#
if
defined
(
hb_malloc_impl
)
\
&
&
defined
(
hb_calloc_impl
)
\
&
&
defined
(
hb_realloc_impl
)
\
&
&
defined
(
hb_free_impl
)
extern
"
C
"
void
*
hb_malloc_impl
(
size_t
size
)
;
extern
"
C
"
void
*
hb_calloc_impl
(
size_t
nmemb
size_t
size
)
;
extern
"
C
"
void
*
hb_realloc_impl
(
void
*
ptr
size_t
size
)
;
extern
"
C
"
void
hb_free_impl
(
void
*
ptr
)
;
#
define
malloc
hb_malloc_impl
#
define
calloc
hb_calloc_impl
#
define
realloc
hb_realloc_impl
#
define
free
hb_free_impl
#
endif
#
if
(
defined
(
__GNUC__
)
|
|
defined
(
__clang__
)
)
&
&
defined
(
__OPTIMIZE__
)
#
define
likely
(
expr
)
(
__builtin_expect
(
!
!
(
expr
)
1
)
)
#
define
unlikely
(
expr
)
(
__builtin_expect
(
!
!
(
expr
)
0
)
)
#
else
#
define
likely
(
expr
)
(
expr
)
#
define
unlikely
(
expr
)
(
expr
)
#
endif
#
if
!
defined
(
__GNUC__
)
&
&
!
defined
(
__clang__
)
#
undef
__attribute__
#
define
__attribute__
(
x
)
#
endif
#
if
defined
(
__GNUC__
)
&
&
(
__GNUC__
>
=
3
)
#
define
HB_PURE_FUNC
__attribute__
(
(
pure
)
)
#
define
HB_CONST_FUNC
__attribute__
(
(
const
)
)
#
define
HB_PRINTF_FUNC
(
format_idx
arg_idx
)
__attribute__
(
(
__format__
(
__printf__
format_idx
arg_idx
)
)
)
#
else
#
define
HB_PURE_FUNC
#
define
HB_CONST_FUNC
#
define
HB_PRINTF_FUNC
(
format_idx
arg_idx
)
#
endif
#
if
defined
(
__GNUC__
)
&
&
(
__GNUC__
>
=
4
)
#
define
HB_UNUSED
__attribute__
(
(
unused
)
)
#
elif
defined
(
_MSC_VER
)
#
define
HB_UNUSED
__pragma
(
warning
(
suppress
:
4100
4101
)
)
#
else
#
define
HB_UNUSED
#
endif
#
ifndef
HB_INTERNAL
#
if
!
defined
(
HB_NO_VISIBILITY
)
&
&
!
defined
(
__MINGW32__
)
&
&
!
defined
(
__CYGWIN__
)
&
&
!
defined
(
_MSC_VER
)
&
&
!
defined
(
__SUNPRO_CC
)
#
define
HB_INTERNAL
__attribute__
(
(
__visibility__
(
"
hidden
"
)
)
)
#
elif
defined
(
__MINGW32__
)
#
define
HB_INTERNAL
#
elif
defined
(
_MSC_VER
)
&
&
defined
(
HB_DLL_EXPORT
)
#
define
HB_INTERNAL
#
else
#
define
HB_INTERNAL
#
define
HB_NO_VISIBILITY
1
#
endif
#
endif
#
if
defined
(
__clang__
)
&
&
__clang_major__
<
10
#
define
static_const
static
#
else
#
define
static_const
static
const
#
endif
#
if
defined
(
__GNUC__
)
&
&
(
__GNUC__
>
=
3
)
#
define
HB_FUNC
__PRETTY_FUNCTION__
#
elif
defined
(
_MSC_VER
)
#
define
HB_FUNC
__FUNCSIG__
#
else
#
define
HB_FUNC
__func__
#
endif
#
if
defined
(
__SUNPRO_CC
)
&
&
(
__SUNPRO_CC
<
0x5140
)
#
define
__restrict
#
endif
#
if
defined
(
__clang__
)
&
&
__cplusplus
>
=
201103L
#
define
HB_FALLTHROUGH
[
[
clang
:
:
fallthrough
]
]
#
elif
defined
(
__GNUC__
)
&
&
(
__GNUC__
>
=
7
)
#
define
HB_FALLTHROUGH
__attribute__
(
(
fallthrough
)
)
#
elif
defined
(
_MSC_VER
)
#
include
<
sal
.
h
>
#
define
HB_FALLTHROUGH
__fallthrough
#
else
#
define
HB_FALLTHROUGH
#
endif
#
ifdef
__clang__
#
define
HB_NO_SANITIZE_SIGNED_INTEGER_OVERFLOW
__attribute__
(
(
no_sanitize
(
"
signed
-
integer
-
overflow
"
)
)
)
#
else
#
define
HB_NO_SANITIZE_SIGNED_INTEGER_OVERFLOW
#
endif
#
ifdef
_WIN32
#
if
defined
(
_WIN32_WINNT
)
&
&
_WIN32_WINNT
<
0x0600
#
undef
_WIN32_WINNT
#
endif
#
ifndef
_WIN32_WINNT
#
if
!
defined
(
WINAPI_FAMILY
)
|
|
!
(
WINAPI_FAMILY
=
=
WINAPI_FAMILY_PC_APP
|
|
WINAPI_FAMILY
=
=
WINAPI_FAMILY_PHONE_APP
)
#
define
_WIN32_WINNT
0x0600
#
endif
#
endif
#
ifndef
WIN32_LEAN_AND_MEAN
#
define
WIN32_LEAN_AND_MEAN
1
#
endif
#
ifndef
STRICT
#
define
STRICT
1
#
endif
#
if
defined
(
_WIN32_WCE
)
#
define
vsnprintf
_vsnprintf
#
ifndef
HB_NO_GETENV
#
define
HB_NO_GETENV
#
endif
#
if
_WIN32_WCE
<
0x800
#
define
HB_NO_SETLOCALE
static
int
errno
=
0
;
#
endif
#
elif
defined
(
WINAPI_FAMILY
)
&
&
(
WINAPI_FAMILY
=
=
WINAPI_FAMILY_PC_APP
|
|
WINAPI_FAMILY
=
=
WINAPI_FAMILY_PHONE_APP
)
#
ifndef
HB_NO_GETENV
#
define
HB_NO_GETENV
#
endif
#
endif
#
if
defined
(
_MSC_VER
)
&
&
_MSC_VER
<
1900
#
define
snprintf
_snprintf
#
endif
#
endif
#
ifdef
HB_NO_GETENV
#
define
getenv
(
Name
)
nullptr
#
endif
#
if
defined
(
HAVE_ATEXIT
)
&
&
!
defined
(
HB_USE_ATEXIT
)
#
if
defined
(
__linux
)
&
&
defined
(
__GLIBC_PREREQ
)
#
if
__GLIBC_PREREQ
(
2
3
)
#
define
HB_USE_ATEXIT
1
#
endif
#
elif
defined
(
_MSC_VER
)
|
|
defined
(
__MINGW32__
)
#
define
HB_USE_ATEXIT
1
#
elif
defined
(
__ANDROID__
)
#
define
HB_USE_ATEXIT
1
#
elif
defined
(
__APPLE__
)
#
define
HB_USE_ATEXIT
1
#
endif
#
endif
#
ifdef
HB_NO_ATEXIT
#
undef
HB_USE_ATEXIT
#
endif
#
ifndef
HB_USE_ATEXIT
#
define
HB_USE_ATEXIT
0
#
endif
#
define
HB_STMT_START
do
#
define
HB_STMT_END
while
(
0
)
template
<
unsigned
int
cond
>
class
hb_assert_constant_t
;
template
<
>
class
hb_assert_constant_t
<
1
>
{
}
;
#
define
ASSERT_STATIC_EXPR_ZERO
(
_cond
)
(
0
*
(
unsigned
int
)
sizeof
(
hb_assert_constant_t
<
_cond
>
)
)
static_assert
(
(
sizeof
(
int8_t
)
=
=
1
)
"
"
)
;
static_assert
(
(
sizeof
(
uint8_t
)
=
=
1
)
"
"
)
;
static_assert
(
(
sizeof
(
int16_t
)
=
=
2
)
"
"
)
;
static_assert
(
(
sizeof
(
uint16_t
)
=
=
2
)
"
"
)
;
static_assert
(
(
sizeof
(
int32_t
)
=
=
4
)
"
"
)
;
static_assert
(
(
sizeof
(
uint32_t
)
=
=
4
)
"
"
)
;
static_assert
(
(
sizeof
(
int64_t
)
=
=
8
)
"
"
)
;
static_assert
(
(
sizeof
(
uint64_t
)
=
=
8
)
"
"
)
;
static_assert
(
(
sizeof
(
hb_codepoint_t
)
=
=
4
)
"
"
)
;
static_assert
(
(
sizeof
(
hb_position_t
)
=
=
4
)
"
"
)
;
static_assert
(
(
sizeof
(
hb_mask_t
)
=
=
4
)
"
"
)
;
static_assert
(
(
sizeof
(
hb_var_int_t
)
=
=
4
)
"
"
)
;
#
define
HB_DELETE_COPY_ASSIGN
(
TypeName
)
\
TypeName
(
const
TypeName
&
)
=
delete
;
\
void
operator
=
(
const
TypeName
&
)
=
delete
#
define
HB_DELETE_CREATE_COPY_ASSIGN
(
TypeName
)
\
TypeName
(
)
=
delete
;
\
TypeName
(
const
TypeName
&
)
=
delete
;
\
void
operator
=
(
const
TypeName
&
)
=
delete
#
ifdef
_MSC_VER
#
pragma
warning
(
disable
:
4200
)
#
pragma
warning
(
disable
:
4800
)
#
endif
#
define
HB_MARK_AS_FLAG_T
(
T
)
\
extern
"
C
+
+
"
{
\
static
inline
T
operator
|
(
T
l
T
r
)
{
return
T
(
(
unsigned
)
l
|
(
unsigned
)
r
)
;
}
\
static
inline
T
operator
&
(
T
l
T
r
)
{
return
T
(
(
unsigned
)
l
&
(
unsigned
)
r
)
;
}
\
static
inline
T
operator
^
(
T
l
T
r
)
{
return
T
(
(
unsigned
)
l
^
(
unsigned
)
r
)
;
}
\
static
inline
T
operator
~
(
T
r
)
{
return
T
(
~
(
unsigned
int
)
r
)
;
}
\
static
inline
T
&
operator
|
=
(
T
&
l
T
r
)
{
l
=
l
|
r
;
return
l
;
}
\
static
inline
T
&
operator
&
=
(
T
&
l
T
r
)
{
l
=
l
&
r
;
return
l
;
}
\
static
inline
T
&
operator
^
=
(
T
&
l
T
r
)
{
l
=
l
^
r
;
return
l
;
}
\
}
\
static_assert
(
true
"
"
)
#
define
FLAG
(
x
)
(
ASSERT_STATIC_EXPR_ZERO
(
(
unsigned
)
(
x
)
<
32
)
+
(
(
(
uint32_t
)
1U
)
<
<
(
unsigned
)
(
x
)
)
)
#
define
FLAG_UNSAFE
(
x
)
(
(
unsigned
)
(
x
)
<
32
?
(
(
(
uint32_t
)
1U
)
<
<
(
unsigned
)
(
x
)
)
:
0
)
#
define
FLAG_RANGE
(
x
y
)
(
ASSERT_STATIC_EXPR_ZERO
(
(
x
)
<
(
y
)
)
+
FLAG
(
y
+
1
)
-
FLAG
(
x
)
)
#
define
FLAG64
(
x
)
(
ASSERT_STATIC_EXPR_ZERO
(
(
unsigned
)
(
x
)
<
64
)
+
(
(
(
uint64_t
)
1ULL
)
<
<
(
unsigned
)
(
x
)
)
)
#
define
FLAG64_UNSAFE
(
x
)
(
(
unsigned
)
(
x
)
<
64
?
(
(
(
uint64_t
)
1ULL
)
<
<
(
unsigned
)
(
x
)
)
:
0
)
#
define
VAR
1
template
<
typename
Type
int
Bytes
>
struct
BEInt
;
template
<
typename
Type
>
struct
BEInt
<
Type
1
>
{
public
:
BEInt
<
Type
1
>
&
operator
=
(
Type
V
)
{
v
=
V
;
return
*
this
;
}
operator
Type
(
)
const
{
return
v
;
}
private
:
uint8_t
v
;
}
;
template
<
typename
Type
>
struct
BEInt
<
Type
2
>
{
public
:
BEInt
<
Type
2
>
&
operator
=
(
Type
V
)
{
v
[
0
]
=
(
V
>
>
8
)
&
0xFF
;
v
[
1
]
=
(
V
)
&
0xFF
;
return
*
this
;
}
operator
Type
(
)
const
{
#
if
(
(
defined
(
__GNUC__
)
&
&
__GNUC__
>
=
5
)
|
|
defined
(
__clang__
)
)
&
&
\
defined
(
__BYTE_ORDER
)
&
&
\
(
__BYTE_ORDER
=
=
__LITTLE_ENDIAN
|
|
__BYTE_ORDER
=
=
__BIG_ENDIAN
)
struct
__attribute__
(
(
packed
)
)
packed_uint16_t
{
uint16_t
v
;
}
;
#
if
__BYTE_ORDER
=
=
__LITTLE_ENDIAN
return
__builtin_bswap16
(
(
(
packed_uint16_t
*
)
this
)
-
>
v
)
;
#
else
return
(
(
packed_uint16_t
*
)
this
)
-
>
v
;
#
endif
#
endif
return
(
v
[
0
]
<
<
8
)
+
(
v
[
1
]
)
;
}
private
:
uint8_t
v
[
2
]
;
}
;
template
<
typename
Type
>
struct
BEInt
<
Type
3
>
{
public
:
BEInt
<
Type
3
>
&
operator
=
(
Type
V
)
{
v
[
0
]
=
(
V
>
>
16
)
&
0xFF
;
v
[
1
]
=
(
V
>
>
8
)
&
0xFF
;
v
[
2
]
=
(
V
)
&
0xFF
;
return
*
this
;
}
operator
Type
(
)
const
{
return
(
v
[
0
]
<
<
16
)
+
(
v
[
1
]
<
<
8
)
+
(
v
[
2
]
)
;
}
private
:
uint8_t
v
[
3
]
;
}
;
template
<
typename
Type
>
struct
BEInt
<
Type
4
>
{
public
:
BEInt
<
Type
4
>
&
operator
=
(
Type
V
)
{
v
[
0
]
=
(
V
>
>
24
)
&
0xFF
;
v
[
1
]
=
(
V
>
>
16
)
&
0xFF
;
v
[
2
]
=
(
V
>
>
8
)
&
0xFF
;
v
[
3
]
=
(
V
)
&
0xFF
;
return
*
this
;
}
operator
Type
(
)
const
{
return
(
v
[
0
]
<
<
24
)
+
(
v
[
1
]
<
<
16
)
+
(
v
[
2
]
<
<
8
)
+
(
v
[
3
]
)
;
}
private
:
uint8_t
v
[
4
]
;
}
;
#
define
HB_SCRIPT_MYANMAR_ZAWGYI
(
(
hb_script_t
)
HB_TAG
(
'
Q
'
'
a
'
'
a
'
'
g
'
)
)
#
include
"
hb
-
meta
.
hh
"
#
include
"
hb
-
mutex
.
hh
"
#
include
"
hb
-
atomic
.
hh
"
#
include
"
hb
-
null
.
hh
"
#
include
"
hb
-
algs
.
hh
"
#
include
"
hb
-
iter
.
hh
"
#
include
"
hb
-
debug
.
hh
"
#
include
"
hb
-
array
.
hh
"
#
include
"
hb
-
vector
.
hh
"
#
include
"
hb
-
object
.
hh
"
#
endif
