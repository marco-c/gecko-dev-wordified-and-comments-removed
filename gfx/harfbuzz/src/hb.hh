#
ifndef
HB_HH
#
define
HB_HH
#
ifndef
HB_NO_PRAGMA_GCC_DIAGNOSTIC
#
ifdef
_MSC_VER
#
pragma
warning
(
disable
:
4068
)
/
*
Unknown
pragma
*
/
#
endif
#
if
defined
(
__GNUC__
)
|
|
defined
(
__clang__
)
#
ifndef
HB_NO_PRAGMA_GCC_DIAGNOSTIC_WARNING
#
pragma
GCC
diagnostic
warning
"
-
Wall
"
#
pragma
GCC
diagnostic
warning
"
-
Wextra
"
#
endif
#
ifndef
HB_NO_PRAGMA_GCC_DIAGNOSTIC_IGNORED
#
pragma
GCC
diagnostic
ignored
"
-
Wpragmas
"
#
pragma
GCC
diagnostic
ignored
"
-
Wunknown
-
pragmas
"
#
pragma
GCC
diagnostic
ignored
"
-
Wunknown
-
warning
-
option
"
#
endif
#
ifndef
HB_NO_PRAGMA_GCC_DIAGNOSTIC_WARNING
#
endif
#
ifndef
HB_NO_PRAGMA_GCC_DIAGNOSTIC_ERROR
#
pragma
GCC
diagnostic
error
"
-
Wbitwise
-
instead
-
of
-
logical
"
#
pragma
GCC
diagnostic
error
"
-
Wcast
-
align
"
#
pragma
GCC
diagnostic
error
"
-
Wcast
-
function
-
type
"
#
pragma
GCC
diagnostic
error
"
-
Wcast
-
function
-
type
-
strict
"
#
pragma
GCC
diagnostic
error
"
-
Wconstant
-
conversion
"
#
pragma
GCC
diagnostic
error
"
-
Wcomma
"
#
pragma
GCC
diagnostic
error
"
-
Wdelete
-
non
-
virtual
-
dtor
"
#
pragma
GCC
diagnostic
error
"
-
Wembedded
-
directive
"
#
pragma
GCC
diagnostic
error
"
-
Wextra
-
semi
-
stmt
"
#
pragma
GCC
diagnostic
error
"
-
Wformat
-
security
"
#
pragma
GCC
diagnostic
error
"
-
Wimplicit
-
function
-
declaration
"
#
pragma
GCC
diagnostic
error
"
-
Winit
-
self
"
#
pragma
GCC
diagnostic
error
"
-
Winjected
-
class
-
name
"
#
pragma
GCC
diagnostic
error
"
-
Wmissing
-
braces
"
#
pragma
GCC
diagnostic
error
"
-
Wmissing
-
declarations
"
#
pragma
GCC
diagnostic
error
"
-
Wmissing
-
prototypes
"
#
pragma
GCC
diagnostic
error
"
-
Wnarrowing
"
#
pragma
GCC
diagnostic
error
"
-
Wnested
-
externs
"
#
pragma
GCC
diagnostic
error
"
-
Wold
-
style
-
definition
"
#
pragma
GCC
diagnostic
error
"
-
Wpointer
-
arith
"
#
pragma
GCC
diagnostic
error
"
-
Wredundant
-
decls
"
#
pragma
GCC
diagnostic
error
"
-
Wreorder
"
#
pragma
GCC
diagnostic
error
"
-
Wsign
-
compare
"
#
pragma
GCC
diagnostic
error
"
-
Wstrict
-
flex
-
arrays
"
#
pragma
GCC
diagnostic
error
"
-
Wstrict
-
prototypes
"
#
pragma
GCC
diagnostic
error
"
-
Wstring
-
conversion
"
#
pragma
GCC
diagnostic
error
"
-
Wswitch
-
enum
"
#
pragma
GCC
diagnostic
error
"
-
Wtautological
-
overlap
-
compare
"
#
pragma
GCC
diagnostic
error
"
-
Wuninitialized
"
#
pragma
GCC
diagnostic
error
"
-
Wunneeded
-
internal
-
declaration
"
#
pragma
GCC
diagnostic
error
"
-
Wunused
"
#
pragma
GCC
diagnostic
error
"
-
Wunused
-
local
-
typedefs
"
#
pragma
GCC
diagnostic
error
"
-
Wunused
-
value
"
#
pragma
GCC
diagnostic
error
"
-
Wunused
-
variable
"
#
pragma
GCC
diagnostic
error
"
-
Wvla
"
#
pragma
GCC
diagnostic
error
"
-
Wwrite
-
strings
"
#
endif
#
ifndef
HB_NO_PRAGMA_GCC_DIAGNOSTIC_WARNING
#
pragma
GCC
diagnostic
warning
"
-
Wbuiltin
-
macro
-
redefined
"
#
pragma
GCC
diagnostic
warning
"
-
Wdeprecated
"
#
pragma
GCC
diagnostic
warning
"
-
Wdeprecated
-
declarations
"
#
pragma
GCC
diagnostic
warning
"
-
Wdisabled
-
optimization
"
#
pragma
GCC
diagnostic
warning
"
-
Wdouble
-
promotion
"
#
pragma
GCC
diagnostic
warning
"
-
Wformat
=
2
"
#
pragma
GCC
diagnostic
warning
"
-
Wformat
-
signedness
"
#
pragma
GCC
diagnostic
warning
"
-
Wignored
-
pragma
-
optimize
"
#
pragma
GCC
diagnostic
warning
"
-
Wlogical
-
op
"
#
pragma
GCC
diagnostic
warning
"
-
Wmaybe
-
uninitialized
"
#
pragma
GCC
diagnostic
warning
"
-
Wmissing
-
format
-
attribute
"
#
pragma
GCC
diagnostic
warning
"
-
Wundef
"
#
pragma
GCC
diagnostic
warning
"
-
Wunsafe
-
loop
-
optimizations
"
#
pragma
GCC
diagnostic
warning
"
-
Wunused
-
but
-
set
-
variable
"
#
endif
#
ifndef
HB_NO_PRAGMA_GCC_DIAGNOSTIC_IGNORED
#
pragma
GCC
diagnostic
ignored
"
-
Wconversion
"
/
/
TODO
fix
#
pragma
GCC
diagnostic
ignored
"
-
Wshadow
"
/
/
TODO
fix
#
pragma
GCC
diagnostic
ignored
"
-
Wunused
-
parameter
"
/
/
TODO
fix
#
if
defined
(
__GNUC__
)
&
&
!
defined
(
__clang__
)
#
pragma
GCC
diagnostic
ignored
"
-
Wunused
-
result
"
/
/
TODO
fix
#
endif
#
endif
#
ifndef
HB_NO_PRAGMA_GCC_DIAGNOSTIC_IGNORED
#
pragma
GCC
diagnostic
ignored
"
-
Wclass
-
memaccess
"
#
pragma
GCC
diagnostic
ignored
"
-
Wcast
-
function
-
type
-
strict
"
/
/
https
:
/
/
github
.
com
/
harfbuzz
/
harfbuzz
/
pull
/
3859
#
issuecomment
-
1295409126
#
pragma
GCC
diagnostic
ignored
"
-
Wdangling
-
reference
"
/
/
https
:
/
/
github
.
com
/
harfbuzz
/
harfbuzz
/
issues
/
4043
#
pragma
GCC
diagnostic
ignored
"
-
Wdangling
-
pointer
"
/
/
Trigerred
by
hb_decycler_node_t
(
)
.
#
pragma
GCC
diagnostic
ignored
"
-
Wformat
-
nonliteral
"
#
pragma
GCC
diagnostic
ignored
"
-
Wformat
-
zero
-
length
"
#
pragma
GCC
diagnostic
ignored
"
-
Wmissing
-
field
-
initializers
"
#
pragma
GCC
diagnostic
ignored
"
-
Wpacked
"
/
/
Erratic
impl
in
clang
#
pragma
GCC
diagnostic
ignored
"
-
Wrange
-
loop
-
analysis
"
/
/
https
:
/
/
github
.
com
/
harfbuzz
/
harfbuzz
/
issues
/
2834
#
pragma
GCC
diagnostic
ignored
"
-
Wstrict
-
aliasing
"
#
pragma
GCC
diagnostic
ignored
"
-
Wtype
-
limits
"
#
pragma
GCC
diagnostic
ignored
"
-
Wc
+
+
11
-
compat
"
/
/
only
gcc
raises
it
#
endif
#
endif
#
endif
#
include
"
hb
-
config
.
hh
"
#
include
"
hb
-
limits
.
hh
"
#
ifndef
_ALL_SOURCE
#
define
_ALL_SOURCE
1
#
endif
#
ifndef
_GNU_SOURCE
#
define
_GNU_SOURCE
1
#
endif
#
ifndef
_POSIX_PTHREAD_SEMANTICS
#
define
_POSIX_PTHREAD_SEMANTICS
1
#
endif
#
ifndef
_TANDEM_SOURCE
#
define
_TANDEM_SOURCE
1
#
endif
#
ifndef
__EXTENSIONS__
#
define
__EXTENSIONS__
1
#
endif
#
if
defined
(
_MSC_VER
)
&
&
defined
(
HB_DLL_EXPORT
)
#
define
HB_EXTERN
__declspec
(
dllexport
)
extern
#
endif
#
ifndef
__STDC_FORMAT_MACROS
#
define
__STDC_FORMAT_MACROS
1
#
endif
#
include
"
hb
.
h
"
#
define
HB_H_IN
#
include
"
hb
-
ot
.
h
"
#
define
HB_OT_H_IN
#
include
"
hb
-
aat
.
h
"
#
define
HB_AAT_H_IN
#
include
<
cassert
>
#
include
<
cfloat
>
#
include
<
climits
>
#
if
defined
(
_MSC_VER
)
&
&
!
defined
(
_USE_MATH_DEFINES
)
#
define
_USE_MATH_DEFINES
#
endif
#
include
<
cmath
>
#
include
<
cstdarg
>
#
include
<
cstddef
>
#
include
<
cstdio
>
#
include
<
cstdlib
>
#
include
<
cstring
>
#
if
(
defined
(
_MSC_VER
)
&
&
_MSC_VER
>
=
1500
)
|
|
defined
(
__MINGW32__
)
#
ifdef
__MINGW32_VERSION
#
ifndef
WIN32_LEAN_AND_MEAN
#
define
WIN32_LEAN_AND_MEAN
1
#
endif
#
else
#
include
<
intrin
.
h
>
#
endif
#
endif
#
ifdef
_WIN32
#
include
<
windows
.
h
>
#
include
<
winapifamily
.
h
>
#
endif
#
ifndef
PRId32
#
define
PRId32
"
d
"
#
define
PRIu32
"
u
"
#
define
PRIx32
"
x
"
#
endif
#
define
HB_PASTE1
(
a
b
)
a
#
#
b
#
define
HB_PASTE
(
a
b
)
HB_PASTE1
(
a
b
)
#
ifdef
__has_builtin
#
define
hb_has_builtin
__has_builtin
#
else
#
define
hb_has_builtin
(
x
)
(
(
defined
(
__GNUC__
)
&
&
__GNUC__
>
=
5
)
)
#
endif
#
if
defined
(
__OPTIMIZE__
)
&
&
hb_has_builtin
(
__builtin_expect
)
#
define
likely
(
expr
)
__builtin_expect
(
bool
(
expr
)
1
)
#
define
unlikely
(
expr
)
__builtin_expect
(
bool
(
expr
)
0
)
#
else
#
define
likely
(
expr
)
(
expr
)
#
define
unlikely
(
expr
)
(
expr
)
#
endif
#
if
!
defined
(
__GNUC__
)
&
&
!
defined
(
__clang__
)
#
undef
__attribute__
#
define
__attribute__
(
x
)
#
endif
#
if
defined
(
__MINGW32__
)
&
&
(
__GNUC__
>
=
3
)
&
&
!
defined
(
__clang__
)
#
define
HB_PRINTF_FUNC
(
format_idx
arg_idx
)
__attribute__
(
(
__format__
(
gnu_printf
format_idx
arg_idx
)
)
)
#
elif
defined
(
__GNUC__
)
&
&
(
__GNUC__
>
=
3
)
#
define
HB_PRINTF_FUNC
(
format_idx
arg_idx
)
__attribute__
(
(
__format__
(
__printf__
format_idx
arg_idx
)
)
)
#
else
#
define
HB_PRINTF_FUNC
(
format_idx
arg_idx
)
#
endif
#
if
defined
(
__GNUC__
)
&
&
(
__GNUC__
>
=
4
)
|
|
(
__clang__
)
#
define
HB_UNUSED
__attribute__
(
(
unused
)
)
#
elif
defined
(
_MSC_VER
)
#
define
HB_UNUSED
__pragma
(
warning
(
suppress
:
4100
4101
)
)
#
else
#
define
HB_UNUSED
#
endif
#
ifndef
HB_INTERNAL
#
if
!
defined
(
HB_NO_VISIBILITY
)
&
&
!
defined
(
__MINGW32__
)
&
&
!
defined
(
__CYGWIN__
)
&
&
!
defined
(
_MSC_VER
)
&
&
!
defined
(
__SUNPRO_CC
)
#
define
HB_INTERNAL
__attribute__
(
(
__visibility__
(
"
hidden
"
)
)
)
#
elif
defined
(
__MINGW32__
)
#
define
HB_INTERNAL
#
elif
defined
(
_MSC_VER
)
&
&
defined
(
HB_DLL_EXPORT
)
#
define
HB_INTERNAL
#
else
#
define
HB_INTERNAL
#
define
HB_NO_VISIBILITY
1
#
endif
#
endif
#
if
defined
(
__clang__
)
&
&
__clang_major__
<
10
#
define
static_const
static
#
else
#
define
static_const
static
const
#
endif
#
if
defined
(
__GNUC__
)
&
&
(
__GNUC__
>
=
3
)
#
define
HB_FUNC
__PRETTY_FUNCTION__
#
elif
defined
(
_MSC_VER
)
#
define
HB_FUNC
__FUNCSIG__
#
else
#
define
HB_FUNC
__func__
#
endif
#
if
defined
(
__SUNPRO_CC
)
&
&
(
__SUNPRO_CC
<
0x5140
)
#
define
__restrict
#
endif
#
ifndef
HB_ALWAYS_INLINE
#
if
defined
(
_MSC_VER
)
#
define
HB_ALWAYS_INLINE
__forceinline
#
else
#
define
HB_ALWAYS_INLINE
__attribute__
(
(
always_inline
)
)
inline
#
endif
#
endif
#
if
defined
(
__clang__
)
&
&
__cplusplus
>
=
201103L
#
define
HB_FALLTHROUGH
[
[
clang
:
:
fallthrough
]
]
#
elif
defined
(
__GNUC__
)
&
&
(
__GNUC__
>
=
7
)
#
define
HB_FALLTHROUGH
__attribute__
(
(
fallthrough
)
)
#
elif
defined
(
_MSC_VER
)
#
include
<
sal
.
h
>
#
define
HB_FALLTHROUGH
__fallthrough
#
else
#
define
HB_FALLTHROUGH
#
endif
#
if
__cplusplus
>
=
201703L
#
define
HB_NODISCARD
[
[
nodiscard
]
]
#
elif
defined
(
__GNUC__
)
|
|
defined
(
__clang__
)
#
define
HB_NODISCARD
__attribute__
(
(
warn_unused_result
)
)
#
elif
defined
(
_MSC_VER
)
#
define
HB_NODISCARD
_Check_return_
#
else
#
define
HB_NODISCARD
#
endif
#
if
defined
(
__clang__
)
&
&
!
(
defined
(
_AIX
)
&
&
(
defined
(
__IBMCPP__
)
|
|
defined
(
__ibmxl__
)
)
)
#
define
HB_NO_SANITIZE_SIGNED_INTEGER_OVERFLOW
__attribute__
(
(
no_sanitize
(
"
signed
-
integer
-
overflow
"
)
)
)
#
else
#
define
HB_NO_SANITIZE_SIGNED_INTEGER_OVERFLOW
#
endif
#
ifdef
_WIN32
#
if
defined
(
_WIN32_WINNT
)
&
&
_WIN32_WINNT
<
0x0600
#
undef
_WIN32_WINNT
#
endif
#
ifndef
_WIN32_WINNT
#
if
WINAPI_FAMILY_PARTITION
(
WINAPI_PARTITION_DESKTOP
)
#
define
_WIN32_WINNT
0x0600
#
endif
#
endif
#
ifndef
WIN32_LEAN_AND_MEAN
#
define
WIN32_LEAN_AND_MEAN
1
#
endif
#
ifndef
STRICT
#
define
STRICT
1
#
endif
#
if
defined
(
_WIN32_WCE
)
#
define
vsnprintf
_vsnprintf
#
ifndef
HB_NO_GETENV
#
define
HB_NO_GETENV
#
endif
#
if
_WIN32_WCE
<
0x800
#
define
HB_NO_SETLOCALE
#
define
HB_NO_ERRNO
#
endif
#
elif
!
WINAPI_FAMILY_PARTITION
(
WINAPI_PARTITION_DESKTOP
)
#
ifndef
HB_NO_GETENV
#
define
HB_NO_GETENV
#
endif
#
endif
#
if
defined
(
_MSC_VER
)
&
&
_MSC_VER
<
1900
#
define
snprintf
_snprintf
#
endif
#
endif
#
ifdef
HB_NO_GETENV
#
define
getenv
(
Name
)
nullptr
#
endif
#
ifndef
HB_NO_ERRNO
#
include
<
cerrno
>
#
else
static
int
HB_UNUSED
_hb_errno
=
0
;
#
undef
errno
#
define
errno
_hb_errno
#
endif
#
define
HB_STMT_START
do
#
define
HB_STMT_END
while
(
0
)
#
if
defined
(
HAVE_ATEXIT
)
&
&
!
defined
(
HB_USE_ATEXIT
)
#
if
defined
(
__linux
)
&
&
defined
(
__GLIBC_PREREQ
)
#
if
__GLIBC_PREREQ
(
2
3
)
#
define
HB_USE_ATEXIT
1
#
endif
#
elif
defined
(
_MSC_VER
)
|
|
defined
(
__MINGW32__
)
#
define
HB_USE_ATEXIT
1
#
elif
defined
(
__ANDROID__
)
#
define
HB_USE_ATEXIT
1
#
elif
defined
(
__APPLE__
)
#
define
HB_USE_ATEXIT
1
#
endif
#
endif
#
ifdef
HB_NO_ATEXIT
#
undef
HB_USE_ATEXIT
#
endif
#
ifndef
HB_USE_ATEXIT
#
define
HB_USE_ATEXIT
0
#
endif
#
ifndef
hb_atexit
#
if
!
HB_USE_ATEXIT
#
define
hb_atexit
(
_
)
HB_STMT_START
{
if
(
0
)
(
_
)
(
)
;
}
HB_STMT_END
#
else
#
ifdef
HAVE_ATEXIT
#
define
hb_atexit
atexit
#
else
template
<
void
(
*
function
)
(
void
)
>
struct
hb_atexit_t
{
~
hb_atexit_t
(
)
{
function
(
)
;
}
}
;
#
define
hb_atexit
(
f
)
static
hb_atexit_t
<
f
>
_hb_atexit_
#
#
__LINE__
;
#
endif
#
endif
#
endif
#
if
!
defined
(
HB_NO_SETLOCALE
)
&
&
(
!
defined
(
HAVE_NEWLOCALE
)
|
|
!
defined
(
HAVE_USELOCALE
)
)
#
define
HB_NO_SETLOCALE
1
#
endif
#
ifndef
HB_NO_SETLOCALE
#
include
<
locale
.
h
>
#
ifdef
HAVE_XLOCALE_H
#
include
<
xlocale
.
h
>
#
endif
#
ifdef
WIN32
#
define
hb_locale_t
_locale_t
#
else
#
define
hb_locale_t
locale_t
#
endif
#
define
hb_setlocale
setlocale
#
define
hb_uselocale
uselocale
#
else
#
define
hb_locale_t
void
*
#
define
hb_setlocale
(
Category
Locale
)
"
C
"
#
define
hb_uselocale
(
Locale
)
(
(
hb_locale_t
)
0
)
#
endif
static_assert
(
(
sizeof
(
hb_codepoint_t
)
=
=
4
)
"
"
)
;
static_assert
(
(
sizeof
(
hb_position_t
)
=
=
4
)
"
"
)
;
static_assert
(
(
sizeof
(
hb_mask_t
)
=
=
4
)
"
"
)
;
static_assert
(
(
sizeof
(
hb_var_int_t
)
=
=
4
)
"
"
)
;
#
define
HB_PI
3
.
14159265358979f
#
define
HB_2_PI
(
2
.
f
*
HB_PI
)
#
if
!
defined
(
HB_CUSTOM_MALLOC
)
\
&
&
defined
(
hb_malloc_impl
)
\
&
&
defined
(
hb_calloc_impl
)
\
&
&
defined
(
hb_realloc_impl
)
\
&
&
defined
(
hb_free_impl
)
#
define
HB_CUSTOM_MALLOC
#
endif
#
ifdef
HB_CUSTOM_MALLOC
extern
"
C
"
void
*
hb_malloc_impl
(
size_t
size
)
;
extern
"
C
"
void
*
hb_calloc_impl
(
size_t
nmemb
size_t
size
)
;
extern
"
C
"
void
*
hb_realloc_impl
(
void
*
ptr
size_t
size
)
;
extern
"
C
"
void
hb_free_impl
(
void
*
ptr
)
;
#
else
#
define
hb_malloc_impl
malloc
#
define
hb_calloc_impl
calloc
#
define
hb_realloc_impl
realloc
#
define
hb_free_impl
free
#
endif
#
include
"
hb
-
cplusplus
.
hh
"
#
include
"
hb
-
meta
.
hh
"
#
include
"
hb
-
mutex
.
hh
"
#
include
"
hb
-
number
.
hh
"
#
include
"
hb
-
atomic
.
hh
"
#
include
"
hb
-
null
.
hh
"
#
include
"
hb
-
algs
.
hh
"
#
include
"
hb
-
iter
.
hh
"
#
include
"
hb
-
debug
.
hh
"
#
include
"
hb
-
array
.
hh
"
#
include
"
hb
-
vector
.
hh
"
#
include
"
hb
-
object
.
hh
"
#
endif
