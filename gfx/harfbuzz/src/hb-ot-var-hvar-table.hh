#
ifndef
HB_OT_VAR_HVAR_TABLE_HH
#
define
HB_OT_VAR_HVAR_TABLE_HH
#
include
"
hb
-
ot
-
layout
-
common
.
hh
"
namespace
OT
{
struct
DeltaSetIndexMap
{
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
&
&
c
-
>
check_range
(
mapDataZ
.
arrayZ
mapCount
get_width
(
)
)
)
;
}
unsigned
int
map
(
unsigned
int
v
)
const
{
if
(
!
mapCount
)
return
v
;
if
(
v
>
=
mapCount
)
v
=
mapCount
-
1
;
unsigned
int
u
=
0
;
{
unsigned
int
w
=
get_width
(
)
;
const
HBUINT8
*
p
=
mapDataZ
.
arrayZ
+
w
*
v
;
for
(
;
w
;
w
-
-
)
u
=
(
u
<
<
8
)
+
*
p
+
+
;
}
{
unsigned
int
n
=
get_inner_bitcount
(
)
;
unsigned
int
outer
=
u
>
>
n
;
unsigned
int
inner
=
u
&
(
(
1
<
<
n
)
-
1
)
;
u
=
(
outer
<
<
16
)
|
inner
;
}
return
u
;
}
protected
:
unsigned
int
get_width
(
)
const
{
return
(
(
format
>
>
4
)
&
3
)
+
1
;
}
unsigned
int
get_inner_bitcount
(
)
const
{
return
(
format
&
0xF
)
+
1
;
}
protected
:
HBUINT16
format
;
HBUINT16
mapCount
;
UnsizedArrayOf
<
HBUINT8
>
mapDataZ
;
public
:
DEFINE_SIZE_ARRAY
(
4
mapDataZ
)
;
}
;
#
define
HB_OT_TAG_HVAR
HB_TAG
(
'
H
'
'
V
'
'
A
'
'
R
'
)
#
define
HB_OT_TAG_VVAR
HB_TAG
(
'
V
'
'
V
'
'
A
'
'
R
'
)
struct
HVARVVAR
{
static
constexpr
hb_tag_t
HVARTag
=
HB_OT_TAG_HVAR
;
static
constexpr
hb_tag_t
VVARTag
=
HB_OT_TAG_VVAR
;
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
version
.
sanitize
(
c
)
&
&
likely
(
version
.
major
=
=
1
)
&
&
varStore
.
sanitize
(
c
this
)
&
&
advMap
.
sanitize
(
c
this
)
&
&
lsbMap
.
sanitize
(
c
this
)
&
&
rsbMap
.
sanitize
(
c
this
)
)
;
}
float
get_advance_var
(
hb_codepoint_t
glyph
const
int
*
coords
unsigned
int
coord_count
)
const
{
unsigned
int
varidx
=
(
this
+
advMap
)
.
map
(
glyph
)
;
return
(
this
+
varStore
)
.
get_delta
(
varidx
coords
coord_count
)
;
}
bool
has_sidebearing_deltas
(
)
const
{
return
lsbMap
&
&
rsbMap
;
}
protected
:
FixedVersion
<
>
version
;
LOffsetTo
<
VariationStore
>
varStore
;
LOffsetTo
<
DeltaSetIndexMap
>
advMap
;
LOffsetTo
<
DeltaSetIndexMap
>
lsbMap
;
LOffsetTo
<
DeltaSetIndexMap
>
rsbMap
;
public
:
DEFINE_SIZE_STATIC
(
20
)
;
}
;
struct
HVAR
:
HVARVVAR
{
static
constexpr
hb_tag_t
tableTag
=
HB_OT_TAG_HVAR
;
}
;
struct
VVAR
:
HVARVVAR
{
static
constexpr
hb_tag_t
tableTag
=
HB_OT_TAG_VVAR
;
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
static_cast
<
const
HVARVVAR
*
>
(
this
)
-
>
sanitize
(
c
)
&
&
vorgMap
.
sanitize
(
c
this
)
)
;
}
protected
:
LOffsetTo
<
DeltaSetIndexMap
>
vorgMap
;
public
:
DEFINE_SIZE_STATIC
(
24
)
;
}
;
}
#
endif
