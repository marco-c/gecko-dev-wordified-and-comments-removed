#
ifndef
HB_SET_DIGEST_PRIVATE_HH
#
define
HB_SET_DIGEST_PRIVATE_HH
#
include
"
hb
-
private
.
hh
"
template
<
typename
mask_t
unsigned
int
shift
>
struct
hb_set_digest_lowest_bits_t
{
ASSERT_POD
(
)
;
static
const
unsigned
int
mask_bytes
=
sizeof
(
mask_t
)
;
static
const
unsigned
int
mask_bits
=
sizeof
(
mask_t
)
*
8
;
static
const
unsigned
int
num_bits
=
0
+
(
mask_bytes
>
=
1
?
3
:
0
)
+
(
mask_bytes
>
=
2
?
1
:
0
)
+
(
mask_bytes
>
=
4
?
1
:
0
)
+
(
mask_bytes
>
=
8
?
1
:
0
)
+
(
mask_bytes
>
=
16
?
1
:
0
)
+
0
;
static_assert
(
(
shift
<
sizeof
(
hb_codepoint_t
)
*
8
)
"
"
)
;
static_assert
(
(
shift
+
num_bits
<
=
sizeof
(
hb_codepoint_t
)
*
8
)
"
"
)
;
inline
void
init
(
void
)
{
mask
=
0
;
}
inline
void
add
(
hb_codepoint_t
g
)
{
mask
|
=
mask_for
(
g
)
;
}
inline
void
add_range
(
hb_codepoint_t
a
hb_codepoint_t
b
)
{
if
(
(
b
>
>
shift
)
-
(
a
>
>
shift
)
>
=
mask_bits
-
1
)
mask
=
(
mask_t
)
-
1
;
else
{
mask_t
ma
=
mask_for
(
a
)
;
mask_t
mb
=
mask_for
(
b
)
;
mask
|
=
mb
+
(
mb
-
ma
)
-
(
mb
<
ma
)
;
}
}
inline
bool
may_have
(
hb_codepoint_t
g
)
const
{
return
!
!
(
mask
&
mask_for
(
g
)
)
;
}
private
:
static
inline
mask_t
mask_for
(
hb_codepoint_t
g
)
{
return
(
(
mask_t
)
1
)
<
<
(
(
g
>
>
shift
)
&
(
mask_bits
-
1
)
)
;
}
mask_t
mask
;
}
;
template
<
typename
head_t
typename
tail_t
>
struct
hb_set_digest_combiner_t
{
ASSERT_POD
(
)
;
inline
void
init
(
void
)
{
head
.
init
(
)
;
tail
.
init
(
)
;
}
inline
void
add
(
hb_codepoint_t
g
)
{
head
.
add
(
g
)
;
tail
.
add
(
g
)
;
}
inline
void
add_range
(
hb_codepoint_t
a
hb_codepoint_t
b
)
{
head
.
add_range
(
a
b
)
;
tail
.
add_range
(
a
b
)
;
}
inline
bool
may_have
(
hb_codepoint_t
g
)
const
{
return
head
.
may_have
(
g
)
&
&
tail
.
may_have
(
g
)
;
}
private
:
head_t
head
;
tail_t
tail
;
}
;
typedef
hb_set_digest_combiner_t
<
hb_set_digest_lowest_bits_t
<
unsigned
long
4
>
hb_set_digest_combiner_t
<
hb_set_digest_lowest_bits_t
<
unsigned
long
0
>
hb_set_digest_lowest_bits_t
<
unsigned
long
9
>
>
>
hb_set_digest_t
;
#
endif
