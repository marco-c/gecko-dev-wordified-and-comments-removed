#
ifndef
HB_STRING_ARRAY_HH
#
if
0
#
define
HB_STRING_ARRAY_HH
#
endif
#
include
"
hb
.
hh
"
#
define
HB_STRING_ARRAY_TYPE_NAME
HB_PASTE
(
HB_STRING_ARRAY_NAME
_msgstr_t
)
#
define
HB_STRING_ARRAY_POOL_NAME
HB_PASTE
(
HB_STRING_ARRAY_NAME
_msgstr
)
#
define
HB_STRING_ARRAY_OFFS_NAME
HB_PASTE
(
HB_STRING_ARRAY_NAME
_msgidx
)
#
define
HB_STRING_ARRAY_LENG_NAME
HB_PASTE
(
HB_STRING_ARRAY_NAME
_length
)
static
const
union
HB_STRING_ARRAY_TYPE_NAME
{
struct
{
#
define
HB_STR
(
s
)
char
HB_PASTE
(
str
__LINE__
)
[
sizeof
(
s
)
]
;
#
include
HB_STRING_ARRAY_LIST
#
undef
HB_STR
}
st
;
char
str
[
HB_VAR_ARRAY
]
;
}
HB_STRING_ARRAY_POOL_NAME
=
{
{
#
define
HB_STR
(
s
)
s
#
include
HB_STRING_ARRAY_LIST
#
undef
HB_STR
}
}
;
static
const
unsigned
int
HB_STRING_ARRAY_OFFS_NAME
[
]
=
{
#
define
HB_STR
(
s
)
offsetof
(
union
HB_STRING_ARRAY_TYPE_NAME
st
.
HB_PASTE
(
str
__LINE__
)
)
#
include
HB_STRING_ARRAY_LIST
#
undef
HB_STR
sizeof
(
HB_STRING_ARRAY_TYPE_NAME
)
}
;
static
const
unsigned
int
HB_STRING_ARRAY_LENG_NAME
=
ARRAY_LENGTH_CONST
(
HB_STRING_ARRAY_OFFS_NAME
)
-
1
;
static
inline
hb_bytes_t
HB_STRING_ARRAY_NAME
(
unsigned
int
i
)
{
assert
(
i
<
ARRAY_LENGTH
(
HB_STRING_ARRAY_OFFS_NAME
)
-
1
)
;
return
hb_bytes_t
(
HB_STRING_ARRAY_POOL_NAME
.
str
+
HB_STRING_ARRAY_OFFS_NAME
[
i
]
HB_STRING_ARRAY_OFFS_NAME
[
i
+
1
]
-
HB_STRING_ARRAY_OFFS_NAME
[
i
]
-
1
)
;
}
#
undef
HB_STRING_ARRAY_TYPE_NAME
#
undef
HB_STRING_ARRAY_POOL_NAME
#
undef
HB_STRING_ARRAY_OFFS_NAME
#
undef
HB_STRING_ARRAY_LENG_NAME
#
endif
