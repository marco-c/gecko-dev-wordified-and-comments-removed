#
ifndef
HB_OT_GLYF_TABLE_HH
#
define
HB_OT_GLYF_TABLE_HH
#
include
"
hb
-
open
-
type
-
private
.
hh
"
namespace
OT
{
#
define
HB_OT_TAG_loca
HB_TAG
(
'
l
'
'
o
'
'
c
'
'
a
'
)
struct
loca
{
static
const
hb_tag_t
tableTag
=
HB_OT_TAG_loca
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
true
)
;
}
public
:
union
{
USHORT
shortsZ
[
VAR
]
;
ULONG
longsZ
[
VAR
]
;
}
u
;
DEFINE_SIZE_ARRAY
(
0
u
.
longsZ
)
;
}
;
#
define
HB_OT_TAG_glyf
HB_TAG
(
'
g
'
'
l
'
'
y
'
'
f
'
)
struct
glyf
{
static
const
hb_tag_t
tableTag
=
HB_OT_TAG_glyf
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
true
)
;
}
public
:
BYTE
dataX
[
VAR
]
;
DEFINE_SIZE_ARRAY
(
0
dataX
)
;
}
;
struct
glyfGlyphHeader
{
SHORT
numberOfContours
;
SHORT
xMin
;
SHORT
yMin
;
SHORT
xMax
;
SHORT
yMax
;
DEFINE_SIZE_STATIC
(
10
)
;
}
;
}
#
endif
