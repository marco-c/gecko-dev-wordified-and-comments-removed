#
ifndef
HB_OT_COLOR_SBIX_TABLE_HH
#
define
HB_OT_COLOR_SBIX_TABLE_HH
#
include
"
hb
-
open
-
type
.
hh
"
#
define
HB_OT_TAG_sbix
HB_TAG
(
'
s
'
'
b
'
'
i
'
'
x
'
)
namespace
OT
{
struct
SBIXGlyph
{
HBINT16
xOffset
;
HBINT16
yOffset
;
Tag
graphicType
;
UnsizedArrayOf
<
HBUINT8
>
data
;
public
:
DEFINE_SIZE_ARRAY
(
8
data
)
;
}
;
struct
SBIXStrike
{
friend
struct
sbix
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
c
-
>
check_struct
(
this
)
&
&
imageOffsetsZ
.
sanitize_shallow
(
c
c
-
>
get_num_glyphs
(
)
+
1
)
)
;
}
protected
:
HBUINT16
ppem
;
HBUINT16
resolution
;
UnsizedArrayOf
<
LOffsetTo
<
SBIXGlyph
>
>
imageOffsetsZ
;
public
:
DEFINE_SIZE_STATIC
(
8
)
;
}
;
struct
sbix
{
static
const
hb_tag_t
tableTag
=
HB_OT_TAG_sbix
;
inline
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
&
&
strikes
.
sanitize
(
c
this
)
)
)
;
}
struct
accelerator_t
{
inline
void
init
(
hb_face_t
*
face
)
{
sbix_blob
=
hb_sanitize_context_t
(
)
.
reference_table
<
sbix
>
(
face
)
;
sbix_len
=
hb_blob_get_length
(
sbix_blob
)
;
sbix_table
=
sbix_blob
-
>
as
<
sbix
>
(
)
;
}
inline
void
fini
(
void
)
{
hb_blob_destroy
(
sbix_blob
)
;
}
inline
void
dump
(
void
(
*
callback
)
(
const
uint8_t
*
data
unsigned
int
length
unsigned
int
group
unsigned
int
gid
)
)
const
{
for
(
unsigned
group
=
0
;
group
<
sbix_table
-
>
strikes
.
len
;
+
+
group
)
{
const
SBIXStrike
&
strike
=
sbix_table
-
>
strikes
[
group
]
(
sbix_table
)
;
for
(
unsigned
int
glyph
=
0
;
glyph
<
num_glyphs
;
+
+
glyph
)
if
(
strike
.
imageOffsetsZ
[
glyph
+
1
]
-
strike
.
imageOffsetsZ
[
glyph
]
>
0
)
{
const
SBIXGlyph
&
sbixGlyph
=
strike
.
imageOffsetsZ
[
glyph
]
(
(
const
void
*
)
&
strike
)
;
callback
(
(
const
uint8_t
*
)
&
sbixGlyph
.
data
strike
.
imageOffsetsZ
[
glyph
+
1
]
-
strike
.
imageOffsetsZ
[
glyph
]
-
8
group
glyph
)
;
}
}
}
private
:
hb_blob_t
*
sbix_blob
;
const
sbix
*
sbix_table
;
unsigned
int
sbix_len
;
unsigned
int
num_glyphs
;
}
;
protected
:
HBUINT16
version
;
HBUINT16
flags
;
LArrayOf
<
LOffsetTo
<
SBIXStrike
>
>
strikes
;
public
:
DEFINE_SIZE_ARRAY
(
8
strikes
)
;
}
;
}
#
endif
