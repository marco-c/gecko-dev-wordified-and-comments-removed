#
ifndef
HB_OT_STAT_TABLE_HH
#
define
HB_OT_STAT_TABLE_HH
#
include
"
hb
-
open
-
type
.
hh
"
#
include
"
hb
-
ot
-
layout
-
common
.
hh
"
#
define
HB_OT_TAG_STAT
HB_TAG
(
'
S
'
'
T
'
'
A
'
'
T
'
)
namespace
OT
{
enum
{
OLDER_SIBLING_FONT_ATTRIBUTE
=
0x0001
ELIDABLE_AXIS_VALUE_NAME
=
0x0002
}
;
struct
AxisValueFormat1
{
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
)
)
;
}
protected
:
HBUINT16
format
;
HBUINT16
axisIndex
;
HBUINT16
flags
;
NameID
valueNameID
;
Fixed
value
;
public
:
DEFINE_SIZE_STATIC
(
12
)
;
}
;
struct
AxisValueFormat2
{
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
)
)
;
}
protected
:
HBUINT16
format
;
HBUINT16
axisIndex
;
HBUINT16
flags
;
NameID
valueNameID
;
Fixed
nominalValue
;
Fixed
rangeMinValue
;
Fixed
rangeMaxValue
;
public
:
DEFINE_SIZE_STATIC
(
20
)
;
}
;
struct
AxisValueFormat3
{
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
)
)
;
}
protected
:
HBUINT16
format
;
HBUINT16
axisIndex
;
HBUINT16
flags
;
NameID
valueNameID
;
Fixed
value
;
Fixed
linkedValue
;
public
:
DEFINE_SIZE_STATIC
(
16
)
;
}
;
struct
AxisValueRecord
{
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
)
)
;
}
protected
:
HBUINT16
axisIndex
;
Fixed
value
;
public
:
DEFINE_SIZE_STATIC
(
6
)
;
}
;
struct
AxisValueFormat4
{
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
)
)
;
}
protected
:
HBUINT16
format
;
HBUINT16
axisCount
;
HBUINT16
flags
;
NameID
valueNameID
;
UnsizedArrayOf
<
AxisValueRecord
>
axisValues
;
public
:
DEFINE_SIZE_ARRAY
(
8
axisValues
)
;
}
;
struct
AxisValue
{
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
if
(
unlikely
(
c
-
>
check_struct
(
this
)
)
)
return_trace
(
false
)
;
switch
(
u
.
format
)
{
case
1
:
return_trace
(
likely
(
u
.
format1
.
sanitize
(
c
)
)
)
;
case
2
:
return_trace
(
likely
(
u
.
format2
.
sanitize
(
c
)
)
)
;
case
3
:
return_trace
(
likely
(
u
.
format3
.
sanitize
(
c
)
)
)
;
case
4
:
return_trace
(
likely
(
u
.
format4
.
sanitize
(
c
)
)
)
;
default
:
return_trace
(
true
)
;
}
}
protected
:
union
{
HBUINT16
format
;
AxisValueFormat1
format1
;
AxisValueFormat2
format2
;
AxisValueFormat3
format3
;
AxisValueFormat4
format4
;
}
u
;
public
:
DEFINE_SIZE_UNION
(
2
format
)
;
}
;
struct
StatAxisRecord
{
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
)
)
;
}
protected
:
Tag
tag
;
NameID
nameID
;
HBUINT16
ordering
;
public
:
DEFINE_SIZE_STATIC
(
8
)
;
}
;
struct
STAT
{
enum
{
tableTag
=
HB_OT_TAG_STAT
}
;
bool
sanitize
(
hb_sanitize_context_t
*
c
)
const
{
TRACE_SANITIZE
(
this
)
;
return_trace
(
likely
(
c
-
>
check_struct
(
this
)
&
&
majorVersion
=
=
1
&
&
minorVersion
>
0
&
&
designAxesOffset
.
sanitize
(
c
this
designAxisCount
)
&
&
offsetToAxisValueOffsets
.
sanitize
(
c
this
axisValueCount
&
(
this
+
offsetToAxisValueOffsets
)
)
)
)
;
}
protected
:
HBUINT16
majorVersion
;
HBUINT16
minorVersion
;
HBUINT16
designAxisSize
;
HBUINT16
designAxisCount
;
LOffsetTo
<
UnsizedArrayOf
<
StatAxisRecord
>
false
>
designAxesOffset
;
HBUINT16
axisValueCount
;
LOffsetTo
<
UnsizedArrayOf
<
OffsetTo
<
AxisValue
>
>
false
>
offsetToAxisValueOffsets
;
NameID
elidedFallbackNameID
;
public
:
DEFINE_SIZE_STATIC
(
20
)
;
}
;
}
#
endif
