extern
crate
gleam
;
extern
crate
glutin
;
extern
crate
webrender
;
extern
crate
winit
;
#
[
path
=
"
common
/
boilerplate
.
rs
"
]
mod
boilerplate
;
use
boilerplate
:
:
{
Example
HandyDandyRectBuilder
}
;
use
webrender
:
:
api
:
:
*
;
struct
App
{
}
impl
Example
for
App
{
fn
render
(
&
mut
self
api
:
&
RenderApi
builder
:
&
mut
DisplayListBuilder
_txn
:
&
mut
Transaction
_framebuffer_size
:
DeviceUintSize
pipeline_id
:
PipelineId
document_id
:
DocumentId
)
{
let
sub_size
=
DeviceUintSize
:
:
new
(
100
100
)
;
let
sub_bounds
=
(
0
0
)
.
to
(
sub_size
.
width
as
i32
sub_size
.
height
as
i32
)
;
let
sub_pipeline_id
=
PipelineId
(
pipeline_id
.
0
42
)
;
let
mut
sub_builder
=
DisplayListBuilder
:
:
new
(
sub_pipeline_id
sub_bounds
.
size
)
;
let
info
=
LayoutPrimitiveInfo
:
:
new
(
sub_bounds
)
;
sub_builder
.
push_stacking_context
(
&
info
None
None
TransformStyle
:
:
Flat
None
MixBlendMode
:
:
Normal
Vec
:
:
new
(
)
GlyphRasterSpace
:
:
Screen
)
;
sub_builder
.
push_rect
(
&
info
ColorF
:
:
new
(
0
.
0
1
.
0
0
.
0
1
.
0
)
)
;
sub_builder
.
pop_stacking_context
(
)
;
let
mut
txn
=
Transaction
:
:
new
(
)
;
txn
.
set_display_list
(
Epoch
(
0
)
None
sub_bounds
.
size
sub_builder
.
finalize
(
)
true
)
;
api
.
send_transaction
(
document_id
txn
)
;
builder
.
push_stacking_context
(
&
info
None
Some
(
PropertyBinding
:
:
Binding
(
PropertyBindingKey
:
:
new
(
42
)
LayoutTransform
:
:
identity
(
)
)
)
TransformStyle
:
:
Flat
None
MixBlendMode
:
:
Normal
Vec
:
:
new
(
)
GlyphRasterSpace
:
:
Screen
)
;
builder
.
push_rect
(
&
info
ColorF
:
:
new
(
1
.
0
0
.
0
0
.
0
1
.
0
)
)
;
builder
.
push_iframe
(
&
info
sub_pipeline_id
false
)
;
builder
.
pop_stacking_context
(
)
;
}
}
fn
main
(
)
{
let
mut
app
=
App
{
}
;
boilerplate
:
:
main_wrapper
(
&
mut
app
None
)
;
}
