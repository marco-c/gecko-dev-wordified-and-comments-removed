use
api
:
:
{
ClipId
DevicePoint
DeviceUintRect
DocumentId
Epoch
}
;
use
api
:
:
{
ExternalImageData
ExternalImageId
}
;
use
api
:
:
{
ImageFormat
PipelineId
}
;
use
api
:
:
DebugCommand
;
use
device
:
:
TextureFilter
;
use
fxhash
:
:
FxHasher
;
use
profiler
:
:
BackendProfileCounters
;
use
std
:
:
{
usize
i32
}
;
use
std
:
:
collections
:
:
{
HashMap
HashSet
}
;
use
std
:
:
f32
;
use
std
:
:
hash
:
:
BuildHasherDefault
;
use
std
:
:
path
:
:
PathBuf
;
use
std
:
:
sync
:
:
Arc
;
use
tiling
;
pub
type
FastHashMap
<
K
V
>
=
HashMap
<
K
V
BuildHasherDefault
<
FxHasher
>
>
;
pub
type
FastHashSet
<
K
>
=
HashSet
<
K
BuildHasherDefault
<
FxHasher
>
>
;
#
[
derive
(
Copy
Clone
Debug
Eq
PartialEq
Hash
)
]
pub
struct
CacheTextureId
(
pub
usize
)
;
#
[
derive
(
Copy
Clone
Debug
Eq
PartialEq
Hash
)
]
pub
enum
SourceTexture
{
Invalid
TextureCache
(
CacheTextureId
)
External
(
ExternalImageData
)
CacheA8
CacheRGBA8
}
pub
const
ORTHO_NEAR_PLANE
:
f32
=
-
1000000
.
0
;
pub
const
ORTHO_FAR_PLANE
:
f32
=
1000000
.
0
;
#
[
derive
(
Copy
Clone
Debug
)
]
pub
struct
BatchTextures
{
pub
colors
:
[
SourceTexture
;
3
]
}
impl
BatchTextures
{
pub
fn
no_texture
(
)
-
>
Self
{
BatchTextures
{
colors
:
[
SourceTexture
:
:
Invalid
;
3
]
}
}
pub
fn
render_target_cache
(
)
-
>
Self
{
BatchTextures
{
colors
:
[
SourceTexture
:
:
CacheRGBA8
SourceTexture
:
:
CacheA8
SourceTexture
:
:
Invalid
]
}
}
pub
fn
color
(
texture
:
SourceTexture
)
-
>
Self
{
BatchTextures
{
colors
:
[
texture
SourceTexture
:
:
Invalid
SourceTexture
:
:
Invalid
]
}
}
}
#
[
derive
(
Copy
Clone
Debug
PartialEq
)
]
pub
enum
RenderTargetMode
{
None
RenderTarget
}
#
[
derive
(
Debug
)
]
pub
enum
TextureUpdateSource
{
External
{
id
:
ExternalImageId
channel_index
:
u8
}
Bytes
{
data
:
Arc
<
Vec
<
u8
>
>
}
}
#
[
derive
(
Debug
)
]
pub
enum
TextureUpdateOp
{
Create
{
width
:
u32
height
:
u32
format
:
ImageFormat
filter
:
TextureFilter
mode
:
RenderTargetMode
layer_count
:
i32
}
Update
{
rect
:
DeviceUintRect
stride
:
Option
<
u32
>
offset
:
u32
layer_index
:
i32
source
:
TextureUpdateSource
}
Free
}
#
[
derive
(
Debug
)
]
pub
struct
TextureUpdate
{
pub
id
:
CacheTextureId
pub
op
:
TextureUpdateOp
}
pub
struct
TextureUpdateList
{
pub
updates
:
Vec
<
TextureUpdate
>
}
impl
TextureUpdateList
{
pub
fn
new
(
)
-
>
TextureUpdateList
{
TextureUpdateList
{
updates
:
Vec
:
:
new
(
)
}
}
#
[
inline
]
pub
fn
push
(
&
mut
self
update
:
TextureUpdate
)
{
self
.
updates
.
push
(
update
)
;
}
}
pub
struct
RendererFrame
{
pub
pipeline_epoch_map
:
FastHashMap
<
PipelineId
Epoch
>
pub
layers_bouncing_back
:
FastHashSet
<
ClipId
>
pub
frame
:
Option
<
tiling
:
:
Frame
>
}
impl
RendererFrame
{
pub
fn
new
(
pipeline_epoch_map
:
FastHashMap
<
PipelineId
Epoch
>
layers_bouncing_back
:
FastHashSet
<
ClipId
>
frame
:
Option
<
tiling
:
:
Frame
>
)
-
>
Self
{
RendererFrame
{
pipeline_epoch_map
layers_bouncing_back
frame
}
}
}
pub
enum
DebugOutput
{
FetchDocuments
(
String
)
FetchClipScrollTree
(
String
)
}
pub
enum
ResultMsg
{
DebugCommand
(
DebugCommand
)
DebugOutput
(
DebugOutput
)
RefreshShader
(
PathBuf
)
NewFrame
(
DocumentId
RendererFrame
TextureUpdateList
BackendProfileCounters
)
UpdateResources
{
updates
:
TextureUpdateList
cancel_rendering
:
bool
}
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
struct
UvRect
{
pub
uv0
:
DevicePoint
pub
uv1
:
DevicePoint
}
