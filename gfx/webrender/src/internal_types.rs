use
device
:
:
TextureFilter
;
use
fnv
:
:
FnvHasher
;
use
profiler
:
:
BackendProfileCounters
;
use
std
:
:
collections
:
:
{
HashMap
HashSet
}
;
use
std
:
:
f32
;
use
std
:
:
hash
:
:
BuildHasherDefault
;
use
std
:
:
{
i32
usize
}
;
use
std
:
:
path
:
:
PathBuf
;
use
std
:
:
sync
:
:
Arc
;
use
tiling
;
use
renderer
:
:
BlendMode
;
use
api
:
:
{
ClipId
ColorU
DeviceUintRect
Epoch
ExternalImageData
ExternalImageId
}
;
use
api
:
:
{
DevicePoint
ImageData
ImageFormat
PipelineId
}
;
#
[
derive
(
Copy
Clone
Debug
Eq
PartialEq
Hash
)
]
pub
struct
CacheTextureId
(
pub
usize
)
;
#
[
derive
(
Copy
Clone
Debug
Eq
PartialEq
Hash
)
]
pub
enum
SourceTexture
{
Invalid
TextureCache
(
CacheTextureId
)
External
(
ExternalImageData
)
#
[
cfg_attr
(
not
(
feature
=
"
webgl
"
)
allow
(
dead_code
)
)
]
WebGL
(
u32
)
}
pub
const
ORTHO_NEAR_PLANE
:
f32
=
-
1000000
.
0
;
pub
const
ORTHO_FAR_PLANE
:
f32
=
1000000
.
0
;
#
[
derive
(
Debug
PartialEq
Eq
)
]
pub
enum
TextureSampler
{
Color0
Color1
Color2
CacheA8
CacheRGBA8
ResourceCache
Layers
RenderTasks
Dither
}
impl
TextureSampler
{
pub
fn
color
(
n
:
usize
)
-
>
TextureSampler
{
match
n
{
0
=
>
TextureSampler
:
:
Color0
1
=
>
TextureSampler
:
:
Color1
2
=
>
TextureSampler
:
:
Color2
_
=
>
{
panic
!
(
"
There
are
only
3
color
samplers
.
"
)
;
}
}
}
}
#
[
derive
(
Copy
Clone
Debug
)
]
pub
struct
BatchTextures
{
pub
colors
:
[
SourceTexture
;
3
]
}
impl
BatchTextures
{
pub
fn
no_texture
(
)
-
>
Self
{
BatchTextures
{
colors
:
[
SourceTexture
:
:
Invalid
;
3
]
}
}
}
pub
const
DEFAULT_TEXTURE
:
TextureSampler
=
TextureSampler
:
:
Color0
;
#
[
derive
(
Clone
Copy
Debug
)
]
pub
enum
VertexAttribute
{
Position
Color
ColorTexCoord
Data0
Data1
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
enum
BlurAttribute
{
Position
RenderTaskIndex
SourceTaskIndex
Direction
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
enum
ClipAttribute
{
Position
RenderTaskIndex
LayerIndex
DataIndex
SegmentIndex
ResourceAddress
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
PackedVertex
{
pub
pos
:
[
f32
;
2
]
}
#
[
derive
(
Debug
)
]
#
[
repr
(
C
)
]
pub
struct
DebugFontVertex
{
pub
x
:
f32
pub
y
:
f32
pub
color
:
ColorU
pub
u
:
f32
pub
v
:
f32
}
impl
DebugFontVertex
{
pub
fn
new
(
x
:
f32
y
:
f32
u
:
f32
v
:
f32
color
:
ColorU
)
-
>
DebugFontVertex
{
DebugFontVertex
{
x
y
color
u
v
}
}
}
#
[
repr
(
C
)
]
pub
struct
DebugColorVertex
{
pub
x
:
f32
pub
y
:
f32
pub
color
:
ColorU
}
impl
DebugColorVertex
{
pub
fn
new
(
x
:
f32
y
:
f32
color
:
ColorU
)
-
>
DebugColorVertex
{
DebugColorVertex
{
x
y
color
}
}
}
#
[
derive
(
Copy
Clone
Debug
PartialEq
)
]
pub
enum
RenderTargetMode
{
None
SimpleRenderTarget
LayerRenderTarget
(
i32
)
}
#
[
derive
(
Debug
)
]
pub
enum
TextureUpdateOp
{
Create
{
width
:
u32
height
:
u32
format
:
ImageFormat
filter
:
TextureFilter
mode
:
RenderTargetMode
data
:
Option
<
ImageData
>
}
Update
{
page_pos_x
:
u32
page_pos_y
:
u32
width
:
u32
height
:
u32
data
:
Arc
<
Vec
<
u8
>
>
stride
:
Option
<
u32
>
offset
:
u32
}
UpdateForExternalBuffer
{
rect
:
DeviceUintRect
id
:
ExternalImageId
channel_index
:
u8
stride
:
Option
<
u32
>
offset
:
u32
}
Grow
{
width
:
u32
height
:
u32
format
:
ImageFormat
filter
:
TextureFilter
mode
:
RenderTargetMode
}
Free
}
#
[
derive
(
Debug
)
]
pub
struct
TextureUpdate
{
pub
id
:
CacheTextureId
pub
op
:
TextureUpdateOp
}
pub
struct
TextureUpdateList
{
pub
updates
:
Vec
<
TextureUpdate
>
}
impl
TextureUpdateList
{
pub
fn
new
(
)
-
>
TextureUpdateList
{
TextureUpdateList
{
updates
:
Vec
:
:
new
(
)
}
}
#
[
inline
]
pub
fn
push
(
&
mut
self
update
:
TextureUpdate
)
{
self
.
updates
.
push
(
update
)
;
}
}
pub
struct
RendererFrame
{
pub
pipeline_epoch_map
:
HashMap
<
PipelineId
Epoch
BuildHasherDefault
<
FnvHasher
>
>
pub
layers_bouncing_back
:
HashSet
<
ClipId
BuildHasherDefault
<
FnvHasher
>
>
pub
frame
:
Option
<
tiling
:
:
Frame
>
}
impl
RendererFrame
{
pub
fn
new
(
pipeline_epoch_map
:
HashMap
<
PipelineId
Epoch
BuildHasherDefault
<
FnvHasher
>
>
layers_bouncing_back
:
HashSet
<
ClipId
BuildHasherDefault
<
FnvHasher
>
>
frame
:
Option
<
tiling
:
:
Frame
>
)
-
>
RendererFrame
{
RendererFrame
{
pipeline_epoch_map
layers_bouncing_back
frame
}
}
}
pub
enum
ResultMsg
{
RefreshShader
(
PathBuf
)
NewFrame
(
RendererFrame
TextureUpdateList
BackendProfileCounters
)
}
#
[
derive
(
Debug
Clone
Copy
Eq
Hash
PartialEq
)
]
pub
struct
StackingContextIndex
(
pub
usize
)
;
#
[
derive
(
Clone
Copy
Debug
)
]
pub
struct
UvRect
{
pub
uv0
:
DevicePoint
pub
uv1
:
DevicePoint
}
#
[
derive
(
Clone
Copy
Debug
PartialEq
Eq
Hash
)
]
pub
enum
HardwareCompositeOp
{
PremultipliedAlpha
}
impl
HardwareCompositeOp
{
pub
fn
to_blend_mode
(
&
self
)
-
>
BlendMode
{
match
*
self
{
HardwareCompositeOp
:
:
PremultipliedAlpha
=
>
BlendMode
:
:
PremultipliedAlpha
}
}
}
