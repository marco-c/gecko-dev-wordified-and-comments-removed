use
api
:
:
{
DocumentId
PipelineId
ApiMsg
FrameMsg
ResourceUpdates
}
;
use
api
:
:
channel
:
:
MsgSender
;
use
display_list_flattener
:
:
build_scene
;
use
frame_builder
:
:
{
FrameBuilderConfig
FrameBuilder
}
;
use
clip_scroll_tree
:
:
ClipScrollTree
;
use
internal_types
:
:
FastHashSet
;
use
resource_cache
:
:
FontInstanceMap
;
use
render_backend
:
:
DocumentView
;
use
renderer
:
:
{
PipelineInfo
SceneBuilderHooks
}
;
use
scene
:
:
Scene
;
use
std
:
:
sync
:
:
mpsc
:
:
{
channel
Receiver
Sender
}
;
pub
enum
SceneBuilderRequest
{
Transaction
{
document_id
:
DocumentId
scene
:
Option
<
SceneRequest
>
resource_updates
:
ResourceUpdates
frame_ops
:
Vec
<
FrameMsg
>
render
:
bool
}
WakeUp
Flush
(
MsgSender
<
(
)
>
)
Stop
}
pub
enum
SceneBuilderResult
{
Transaction
{
document_id
:
DocumentId
built_scene
:
Option
<
BuiltScene
>
resource_updates
:
ResourceUpdates
frame_ops
:
Vec
<
FrameMsg
>
render
:
bool
result_tx
:
Option
<
Sender
<
SceneSwapResult
>
>
}
FlushComplete
(
MsgSender
<
(
)
>
)
Stopped
}
pub
enum
SceneSwapResult
{
Complete
(
Sender
<
(
)
>
)
Aborted
}
pub
struct
SceneRequest
{
pub
scene
:
Scene
pub
view
:
DocumentView
pub
font_instances
:
FontInstanceMap
pub
output_pipelines
:
FastHashSet
<
PipelineId
>
pub
removed_pipelines
:
Vec
<
PipelineId
>
}
pub
struct
BuiltScene
{
pub
scene
:
Scene
pub
frame_builder
:
FrameBuilder
pub
clip_scroll_tree
:
ClipScrollTree
pub
removed_pipelines
:
Vec
<
PipelineId
>
}
pub
struct
SceneBuilder
{
rx
:
Receiver
<
SceneBuilderRequest
>
tx
:
Sender
<
SceneBuilderResult
>
api_tx
:
MsgSender
<
ApiMsg
>
config
:
FrameBuilderConfig
hooks
:
Option
<
Box
<
SceneBuilderHooks
+
Send
>
>
}
impl
SceneBuilder
{
pub
fn
new
(
config
:
FrameBuilderConfig
api_tx
:
MsgSender
<
ApiMsg
>
hooks
:
Option
<
Box
<
SceneBuilderHooks
+
Send
>
>
)
-
>
(
Self
Sender
<
SceneBuilderRequest
>
Receiver
<
SceneBuilderResult
>
)
{
let
(
in_tx
in_rx
)
=
channel
(
)
;
let
(
out_tx
out_rx
)
=
channel
(
)
;
(
SceneBuilder
{
rx
:
in_rx
tx
:
out_tx
api_tx
config
hooks
}
in_tx
out_rx
)
}
pub
fn
run
(
&
mut
self
)
{
if
let
Some
(
ref
hooks
)
=
self
.
hooks
{
hooks
.
register
(
)
;
}
loop
{
match
self
.
rx
.
recv
(
)
{
Ok
(
msg
)
=
>
{
if
!
self
.
process_message
(
msg
)
{
break
;
}
}
Err
(
_
)
=
>
{
break
;
}
}
if
let
Some
(
ref
hooks
)
=
self
.
hooks
{
hooks
.
poke
(
)
;
}
}
if
let
Some
(
ref
hooks
)
=
self
.
hooks
{
hooks
.
deregister
(
)
;
}
}
fn
process_message
(
&
mut
self
msg
:
SceneBuilderRequest
)
-
>
bool
{
match
msg
{
SceneBuilderRequest
:
:
WakeUp
=
>
{
}
SceneBuilderRequest
:
:
Flush
(
tx
)
=
>
{
self
.
tx
.
send
(
SceneBuilderResult
:
:
FlushComplete
(
tx
)
)
.
unwrap
(
)
;
let
_
=
self
.
api_tx
.
send
(
ApiMsg
:
:
WakeUp
)
;
}
SceneBuilderRequest
:
:
Transaction
{
document_id
scene
resource_updates
frame_ops
render
}
=
>
{
let
built_scene
=
scene
.
map
(
|
request
|
{
build_scene
(
&
self
.
config
request
)
}
)
;
let
(
pipeline_info
result_tx
result_rx
)
=
match
(
&
self
.
hooks
&
built_scene
)
{
(
&
Some
(
ref
hooks
)
&
Some
(
ref
built
)
)
=
>
{
let
info
=
PipelineInfo
{
epochs
:
built
.
scene
.
pipeline_epochs
.
clone
(
)
removed_pipelines
:
built
.
removed_pipelines
.
clone
(
)
}
;
let
(
tx
rx
)
=
channel
(
)
;
hooks
.
pre_scene_swap
(
)
;
(
Some
(
info
)
Some
(
tx
)
Some
(
rx
)
)
}
_
=
>
(
None
None
None
)
}
;
self
.
tx
.
send
(
SceneBuilderResult
:
:
Transaction
{
document_id
built_scene
resource_updates
frame_ops
render
result_tx
}
)
.
unwrap
(
)
;
let
_
=
self
.
api_tx
.
send
(
ApiMsg
:
:
WakeUp
)
;
if
let
Some
(
pipeline_info
)
=
pipeline_info
{
let
swap_result
=
result_rx
.
unwrap
(
)
.
recv
(
)
;
self
.
hooks
.
as_ref
(
)
.
unwrap
(
)
.
post_scene_swap
(
pipeline_info
)
;
match
swap_result
{
Ok
(
SceneSwapResult
:
:
Complete
(
resume_tx
)
)
=
>
{
resume_tx
.
send
(
(
)
)
.
ok
(
)
;
}
_
=
>
(
)
}
;
}
}
SceneBuilderRequest
:
:
Stop
=
>
{
self
.
tx
.
send
(
SceneBuilderResult
:
:
Stopped
)
.
unwrap
(
)
;
return
false
;
}
}
true
}
}
