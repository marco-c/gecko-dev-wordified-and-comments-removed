use
api
:
:
{
DevicePixelScale
ExternalScrollId
LayoutPixel
LayoutPoint
LayoutRect
LayoutSize
}
;
use
api
:
:
{
LayoutVector2D
LayoutTransform
PipelineId
PropertyBinding
}
;
use
api
:
:
{
ScrollClamping
ScrollLocation
ScrollSensitivity
StickyOffsetBounds
}
;
use
api
:
:
WorldPoint
;
use
clip
:
:
{
ClipChain
ClipChainNode
ClipSourcesHandle
ClipStore
ClipWorkItem
}
;
use
clip_scroll_tree
:
:
{
ClipChainIndex
ClipScrollNodeIndex
CoordinateSystemId
}
;
use
clip_scroll_tree
:
:
TransformUpdateState
;
use
euclid
:
:
SideOffsets2D
;
use
geometry
:
:
ray_intersects_rect
;
use
gpu_cache
:
:
GpuCache
;
use
gpu_types
:
:
{
ClipScrollNodeIndex
as
GPUClipScrollNodeIndex
ClipScrollNodeData
}
;
use
resource_cache
:
:
ResourceCache
;
use
scene
:
:
SceneProperties
;
use
util
:
:
{
LayoutToWorldFastTransform
LayoutFastTransform
}
;
use
util
:
:
{
TransformedRectKind
}
;
#
[
derive
(
Debug
)
]
pub
struct
StickyFrameInfo
{
pub
margins
:
SideOffsets2D
<
Option
<
f32
>
>
pub
vertical_offset_bounds
:
StickyOffsetBounds
pub
horizontal_offset_bounds
:
StickyOffsetBounds
pub
previously_applied_offset
:
LayoutVector2D
pub
current_offset
:
LayoutVector2D
}
impl
StickyFrameInfo
{
pub
fn
new
(
margins
:
SideOffsets2D
<
Option
<
f32
>
>
vertical_offset_bounds
:
StickyOffsetBounds
horizontal_offset_bounds
:
StickyOffsetBounds
previously_applied_offset
:
LayoutVector2D
)
-
>
StickyFrameInfo
{
StickyFrameInfo
{
margins
vertical_offset_bounds
horizontal_offset_bounds
previously_applied_offset
current_offset
:
LayoutVector2D
:
:
zero
(
)
}
}
}
#
[
derive
(
Debug
)
]
pub
enum
NodeType
{
ReferenceFrame
(
ReferenceFrameInfo
)
Clip
{
handle
:
ClipSourcesHandle
clip_chain_index
:
ClipChainIndex
clip_chain_node
:
Option
<
ClipChainNode
>
}
ScrollFrame
(
ScrollFrameInfo
)
StickyFrame
(
StickyFrameInfo
)
Empty
}
impl
NodeType
{
fn
is_reference_frame
(
&
self
)
-
>
bool
{
match
*
self
{
NodeType
:
:
ReferenceFrame
(
_
)
=
>
true
_
=
>
false
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
ClipScrollNode
{
pub
local_viewport_rect
:
LayoutRect
pub
world_viewport_transform
:
LayoutToWorldFastTransform
pub
world_content_transform
:
LayoutToWorldFastTransform
pub
transform_kind
:
TransformedRectKind
pub
pipeline_id
:
PipelineId
pub
parent
:
Option
<
ClipScrollNodeIndex
>
pub
children
:
Vec
<
ClipScrollNodeIndex
>
pub
node_type
:
NodeType
pub
invertible
:
bool
pub
coordinate_system_id
:
CoordinateSystemId
pub
coordinate_system_relative_transform
:
LayoutFastTransform
pub
node_data_index
:
GPUClipScrollNodeIndex
}
impl
ClipScrollNode
{
pub
fn
new
(
pipeline_id
:
PipelineId
parent_index
:
Option
<
ClipScrollNodeIndex
>
rect
:
&
LayoutRect
node_type
:
NodeType
)
-
>
Self
{
ClipScrollNode
{
local_viewport_rect
:
*
rect
world_viewport_transform
:
LayoutToWorldFastTransform
:
:
identity
(
)
world_content_transform
:
LayoutToWorldFastTransform
:
:
identity
(
)
transform_kind
:
TransformedRectKind
:
:
AxisAligned
parent
:
parent_index
children
:
Vec
:
:
new
(
)
pipeline_id
node_type
invertible
:
true
coordinate_system_id
:
CoordinateSystemId
(
0
)
coordinate_system_relative_transform
:
LayoutFastTransform
:
:
identity
(
)
node_data_index
:
GPUClipScrollNodeIndex
(
0
)
}
}
pub
fn
empty
(
)
-
>
ClipScrollNode
{
ClipScrollNode
:
:
new
(
PipelineId
:
:
dummy
(
)
None
&
LayoutRect
:
:
zero
(
)
NodeType
:
:
Empty
)
}
pub
fn
new_scroll_frame
(
pipeline_id
:
PipelineId
parent_index
:
ClipScrollNodeIndex
external_id
:
Option
<
ExternalScrollId
>
frame_rect
:
&
LayoutRect
content_size
:
&
LayoutSize
scroll_sensitivity
:
ScrollSensitivity
)
-
>
Self
{
let
node_type
=
NodeType
:
:
ScrollFrame
(
ScrollFrameInfo
:
:
new
(
scroll_sensitivity
LayoutSize
:
:
new
(
(
content_size
.
width
-
frame_rect
.
size
.
width
)
.
max
(
0
.
0
)
(
content_size
.
height
-
frame_rect
.
size
.
height
)
.
max
(
0
.
0
)
)
external_id
)
)
;
Self
:
:
new
(
pipeline_id
Some
(
parent_index
)
frame_rect
node_type
)
}
pub
fn
new_reference_frame
(
parent_index
:
Option
<
ClipScrollNodeIndex
>
frame_rect
:
&
LayoutRect
source_transform
:
Option
<
PropertyBinding
<
LayoutTransform
>
>
source_perspective
:
Option
<
LayoutTransform
>
origin_in_parent_reference_frame
:
LayoutVector2D
pipeline_id
:
PipelineId
)
-
>
Self
{
let
identity
=
LayoutTransform
:
:
identity
(
)
;
let
source_perspective
=
source_perspective
.
map_or_else
(
LayoutFastTransform
:
:
identity
|
perspective
|
perspective
.
into
(
)
)
;
let
info
=
ReferenceFrameInfo
{
resolved_transform
:
LayoutFastTransform
:
:
identity
(
)
source_transform
:
source_transform
.
unwrap_or
(
PropertyBinding
:
:
Value
(
identity
)
)
source_perspective
origin_in_parent_reference_frame
invertible
:
true
}
;
Self
:
:
new
(
pipeline_id
parent_index
frame_rect
NodeType
:
:
ReferenceFrame
(
info
)
)
}
pub
fn
new_sticky_frame
(
parent_index
:
ClipScrollNodeIndex
frame_rect
:
LayoutRect
sticky_frame_info
:
StickyFrameInfo
pipeline_id
:
PipelineId
)
-
>
Self
{
let
node_type
=
NodeType
:
:
StickyFrame
(
sticky_frame_info
)
;
Self
:
:
new
(
pipeline_id
Some
(
parent_index
)
&
frame_rect
node_type
)
}
pub
fn
add_child
(
&
mut
self
child
:
ClipScrollNodeIndex
)
{
self
.
children
.
push
(
child
)
;
}
pub
fn
apply_old_scrolling_state
(
&
mut
self
old_scrolling_state
:
&
ScrollFrameInfo
)
{
match
self
.
node_type
{
NodeType
:
:
ScrollFrame
(
ref
mut
scrolling
)
=
>
{
let
scroll_sensitivity
=
scrolling
.
scroll_sensitivity
;
let
scrollable_size
=
scrolling
.
scrollable_size
;
*
scrolling
=
*
old_scrolling_state
;
scrolling
.
scroll_sensitivity
=
scroll_sensitivity
;
scrolling
.
scrollable_size
=
scrollable_size
;
}
_
if
old_scrolling_state
.
offset
!
=
LayoutVector2D
:
:
zero
(
)
=
>
{
warn
!
(
"
Tried
to
scroll
a
non
-
scroll
node
.
"
)
}
_
=
>
{
}
}
}
pub
fn
set_scroll_origin
(
&
mut
self
origin
:
&
LayoutPoint
clamp
:
ScrollClamping
)
-
>
bool
{
let
scrollable_size
=
self
.
scrollable_size
(
)
;
let
scrollable_width
=
scrollable_size
.
width
;
let
scrollable_height
=
scrollable_size
.
height
;
let
scrolling
=
match
self
.
node_type
{
NodeType
:
:
ScrollFrame
(
ref
mut
scrolling
)
=
>
scrolling
_
=
>
{
warn
!
(
"
Tried
to
scroll
a
non
-
scroll
node
.
"
)
;
return
false
;
}
}
;
let
new_offset
=
match
clamp
{
ScrollClamping
:
:
ToContentBounds
=
>
{
if
scrollable_height
<
=
0
.
&
&
scrollable_width
<
=
0
.
{
return
false
;
}
let
origin
=
LayoutPoint
:
:
new
(
origin
.
x
.
max
(
0
.
0
)
origin
.
y
.
max
(
0
.
0
)
)
;
LayoutVector2D
:
:
new
(
(
-
origin
.
x
)
.
max
(
-
scrollable_width
)
.
min
(
0
.
0
)
.
round
(
)
(
-
origin
.
y
)
.
max
(
-
scrollable_height
)
.
min
(
0
.
0
)
.
round
(
)
)
}
ScrollClamping
:
:
NoClamping
=
>
LayoutPoint
:
:
zero
(
)
-
*
origin
}
;
if
new_offset
=
=
scrolling
.
offset
{
return
false
;
}
scrolling
.
offset
=
new_offset
;
true
}
pub
fn
mark_uninvertible
(
&
mut
self
)
{
self
.
invertible
=
false
;
self
.
world_content_transform
=
LayoutToWorldFastTransform
:
:
identity
(
)
;
self
.
world_viewport_transform
=
LayoutToWorldFastTransform
:
:
identity
(
)
;
}
pub
fn
push_gpu_node_data
(
&
mut
self
node_data
:
&
mut
Vec
<
ClipScrollNodeData
>
)
{
if
!
self
.
invertible
{
node_data
.
push
(
ClipScrollNodeData
:
:
invalid
(
)
)
;
return
;
}
let
inv_transform
=
match
self
.
world_content_transform
.
inverse
(
)
{
Some
(
inverted
)
=
>
inverted
.
to_transform
(
)
None
=
>
{
node_data
.
push
(
ClipScrollNodeData
:
:
invalid
(
)
)
;
return
;
}
}
;
let
data
=
ClipScrollNodeData
{
transform
:
self
.
world_content_transform
.
into
(
)
inv_transform
transform_kind
:
self
.
transform_kind
as
u32
as
f32
padding
:
[
0
.
0
;
3
]
}
;
node_data
.
push
(
data
)
;
}
pub
fn
update
(
&
mut
self
state
:
&
mut
TransformUpdateState
next_coordinate_system_id
:
&
mut
CoordinateSystemId
device_pixel_scale
:
DevicePixelScale
clip_store
:
&
mut
ClipStore
resource_cache
:
&
mut
ResourceCache
gpu_cache
:
&
mut
GpuCache
scene_properties
:
&
SceneProperties
clip_chains
:
&
mut
Vec
<
ClipChain
>
)
{
if
!
state
.
invertible
{
self
.
mark_uninvertible
(
)
;
return
;
}
self
.
update_transform
(
state
next_coordinate_system_id
scene_properties
)
;
self
.
transform_kind
=
if
self
.
world_content_transform
.
preserves_2d_axis_alignment
(
)
{
TransformedRectKind
:
:
AxisAligned
}
else
{
TransformedRectKind
:
:
Complex
}
;
match
self
.
node_type
{
NodeType
:
:
ReferenceFrame
(
info
)
if
!
info
.
invertible
=
>
{
self
.
mark_uninvertible
(
)
;
return
;
}
_
=
>
self
.
invertible
=
true
}
self
.
update_clip_work_item
(
state
device_pixel_scale
clip_store
resource_cache
gpu_cache
clip_chains
)
;
}
pub
fn
update_clip_work_item
(
&
mut
self
state
:
&
mut
TransformUpdateState
device_pixel_scale
:
DevicePixelScale
clip_store
:
&
mut
ClipStore
resource_cache
:
&
mut
ResourceCache
gpu_cache
:
&
mut
GpuCache
clip_chains
:
&
mut
Vec
<
ClipChain
>
)
{
let
(
clip_sources_handle
clip_chain_index
stored_clip_chain_node
)
=
match
self
.
node_type
{
NodeType
:
:
Clip
{
ref
handle
clip_chain_index
ref
mut
clip_chain_node
}
=
>
(
handle
clip_chain_index
clip_chain_node
)
_
=
>
{
self
.
invertible
=
true
;
return
;
}
}
;
let
clip_sources
=
clip_store
.
get_mut
(
clip_sources_handle
)
;
clip_sources
.
update
(
gpu_cache
resource_cache
device_pixel_scale
)
;
let
(
screen_inner_rect
screen_outer_rect
)
=
clip_sources
.
get_screen_bounds
(
&
self
.
world_viewport_transform
device_pixel_scale
)
;
let
screen_outer_rect
=
screen_outer_rect
.
expect
(
"
Clipping
node
didn
'
t
have
outer
rect
.
"
)
;
let
local_outer_rect
=
clip_sources
.
local_outer_rect
.
expect
(
"
Clipping
node
didn
'
t
have
outer
rect
.
"
)
;
let
new_node
=
ClipChainNode
{
work_item
:
ClipWorkItem
{
scroll_node_data_index
:
self
.
node_data_index
clip_sources
:
clip_sources_handle
.
weak
(
)
coordinate_system_id
:
state
.
current_coordinate_system_id
}
local_clip_rect
:
self
.
coordinate_system_relative_transform
.
transform_rect
(
&
local_outer_rect
)
screen_outer_rect
screen_inner_rect
prev
:
None
}
;
let
mut
clip_chain
=
clip_chains
[
state
.
parent_clip_chain_index
.
0
]
.
new_with_added_node
(
&
new_node
)
;
*
stored_clip_chain_node
=
Some
(
new_node
)
;
clip_chain
.
parent_index
=
Some
(
state
.
parent_clip_chain_index
)
;
clip_chains
[
clip_chain_index
.
0
]
=
clip_chain
;
state
.
parent_clip_chain_index
=
clip_chain_index
;
}
pub
fn
update_transform
(
&
mut
self
state
:
&
mut
TransformUpdateState
next_coordinate_system_id
:
&
mut
CoordinateSystemId
scene_properties
:
&
SceneProperties
)
{
if
self
.
node_type
.
is_reference_frame
(
)
{
self
.
update_transform_for_reference_frame
(
state
next_coordinate_system_id
scene_properties
)
;
return
;
}
let
sticky_offset
=
self
.
calculate_sticky_offset
(
&
state
.
nearest_scrolling_ancestor_offset
&
state
.
nearest_scrolling_ancestor_viewport
)
;
let
accumulated_offset
=
state
.
parent_accumulated_scroll_offset
+
sticky_offset
;
self
.
world_viewport_transform
=
if
accumulated_offset
!
=
LayoutVector2D
:
:
zero
(
)
{
state
.
parent_reference_frame_transform
.
pre_translate
(
&
accumulated_offset
)
}
else
{
state
.
parent_reference_frame_transform
}
;
let
scroll_offset
=
self
.
scroll_offset
(
)
;
self
.
world_content_transform
=
if
scroll_offset
!
=
LayoutVector2D
:
:
zero
(
)
{
self
.
world_viewport_transform
.
pre_translate
(
&
scroll_offset
)
}
else
{
self
.
world_viewport_transform
}
;
let
added_offset
=
state
.
parent_accumulated_scroll_offset
+
sticky_offset
+
scroll_offset
;
self
.
coordinate_system_relative_transform
=
state
.
coordinate_system_relative_transform
.
offset
(
added_offset
)
;
match
self
.
node_type
{
NodeType
:
:
StickyFrame
(
ref
mut
info
)
=
>
info
.
current_offset
=
sticky_offset
_
=
>
{
}
}
self
.
coordinate_system_id
=
state
.
current_coordinate_system_id
;
}
pub
fn
update_transform_for_reference_frame
(
&
mut
self
state
:
&
mut
TransformUpdateState
next_coordinate_system_id
:
&
mut
CoordinateSystemId
scene_properties
:
&
SceneProperties
)
{
let
info
=
match
self
.
node_type
{
NodeType
:
:
ReferenceFrame
(
ref
mut
info
)
=
>
info
_
=
>
unreachable
!
(
"
Called
update_transform_for_reference_frame
on
non
-
ReferenceFrame
"
)
}
;
let
source_transform
=
scene_properties
.
resolve_layout_transform
(
&
info
.
source_transform
)
;
info
.
resolved_transform
=
LayoutFastTransform
:
:
with_vector
(
info
.
origin_in_parent_reference_frame
)
.
pre_mul
(
&
source_transform
.
into
(
)
)
.
pre_mul
(
&
info
.
source_perspective
)
;
let
relative_transform
=
info
.
resolved_transform
.
post_translate
(
state
.
parent_accumulated_scroll_offset
)
.
to_transform
(
)
.
with_destination
:
:
<
LayoutPixel
>
(
)
;
self
.
world_viewport_transform
=
state
.
parent_reference_frame_transform
.
pre_mul
(
&
relative_transform
.
into
(
)
)
;
self
.
world_content_transform
=
self
.
world_viewport_transform
;
info
.
invertible
=
self
.
world_viewport_transform
.
is_invertible
(
)
;
if
!
info
.
invertible
{
return
;
}
match
state
.
coordinate_system_relative_transform
.
update
(
relative_transform
)
{
Some
(
offset
)
=
>
self
.
coordinate_system_relative_transform
=
offset
None
=
>
{
self
.
coordinate_system_relative_transform
=
LayoutFastTransform
:
:
identity
(
)
;
state
.
current_coordinate_system_id
=
*
next_coordinate_system_id
;
next_coordinate_system_id
.
advance
(
)
;
}
}
self
.
coordinate_system_id
=
state
.
current_coordinate_system_id
;
}
fn
calculate_sticky_offset
(
&
self
viewport_scroll_offset
:
&
LayoutVector2D
viewport_rect
:
&
LayoutRect
)
-
>
LayoutVector2D
{
let
info
=
match
self
.
node_type
{
NodeType
:
:
StickyFrame
(
ref
info
)
=
>
info
_
=
>
return
LayoutVector2D
:
:
zero
(
)
}
;
if
info
.
margins
.
top
.
is_none
(
)
&
&
info
.
margins
.
bottom
.
is_none
(
)
&
&
info
.
margins
.
left
.
is_none
(
)
&
&
info
.
margins
.
right
.
is_none
(
)
{
return
LayoutVector2D
:
:
zero
(
)
;
}
let
sticky_rect
=
self
.
local_viewport_rect
.
translate
(
viewport_scroll_offset
)
;
let
mut
sticky_offset
=
LayoutVector2D
:
:
zero
(
)
;
if
let
Some
(
margin
)
=
info
.
margins
.
top
{
let
top_viewport_edge
=
viewport_rect
.
min_y
(
)
+
margin
;
if
sticky_rect
.
min_y
(
)
<
top_viewport_edge
{
sticky_offset
.
y
=
top_viewport_edge
-
sticky_rect
.
min_y
(
)
;
}
else
if
info
.
previously_applied_offset
.
y
>
0
.
0
&
&
sticky_rect
.
min_y
(
)
>
top_viewport_edge
{
sticky_offset
.
y
=
top_viewport_edge
-
sticky_rect
.
min_y
(
)
;
sticky_offset
.
y
=
sticky_offset
.
y
.
max
(
-
info
.
previously_applied_offset
.
y
)
;
}
debug_assert
!
(
sticky_offset
.
y
+
info
.
previously_applied_offset
.
y
>
=
0
.
0
)
;
}
if
sticky_offset
.
y
+
info
.
previously_applied_offset
.
y
<
=
0
.
0
{
if
let
Some
(
margin
)
=
info
.
margins
.
bottom
{
let
bottom_viewport_edge
=
viewport_rect
.
max_y
(
)
-
margin
;
if
sticky_rect
.
max_y
(
)
>
bottom_viewport_edge
{
sticky_offset
.
y
=
bottom_viewport_edge
-
sticky_rect
.
max_y
(
)
;
}
else
if
info
.
previously_applied_offset
.
y
<
0
.
0
&
&
sticky_rect
.
max_y
(
)
<
bottom_viewport_edge
{
sticky_offset
.
y
=
bottom_viewport_edge
-
sticky_rect
.
max_y
(
)
;
sticky_offset
.
y
=
sticky_offset
.
y
.
min
(
-
info
.
previously_applied_offset
.
y
)
;
}
debug_assert
!
(
sticky_offset
.
y
+
info
.
previously_applied_offset
.
y
<
=
0
.
0
)
;
}
}
if
let
Some
(
margin
)
=
info
.
margins
.
left
{
let
left_viewport_edge
=
viewport_rect
.
min_x
(
)
+
margin
;
if
sticky_rect
.
min_x
(
)
<
left_viewport_edge
{
sticky_offset
.
x
=
left_viewport_edge
-
sticky_rect
.
min_x
(
)
;
}
else
if
info
.
previously_applied_offset
.
x
>
0
.
0
&
&
sticky_rect
.
min_x
(
)
>
left_viewport_edge
{
sticky_offset
.
x
=
left_viewport_edge
-
sticky_rect
.
min_x
(
)
;
sticky_offset
.
x
=
sticky_offset
.
x
.
max
(
-
info
.
previously_applied_offset
.
x
)
;
}
debug_assert
!
(
sticky_offset
.
x
+
info
.
previously_applied_offset
.
x
>
=
0
.
0
)
;
}
if
sticky_offset
.
x
+
info
.
previously_applied_offset
.
x
<
=
0
.
0
{
if
let
Some
(
margin
)
=
info
.
margins
.
right
{
let
right_viewport_edge
=
viewport_rect
.
max_x
(
)
-
margin
;
if
sticky_rect
.
max_x
(
)
>
right_viewport_edge
{
sticky_offset
.
x
=
right_viewport_edge
-
sticky_rect
.
max_x
(
)
;
}
else
if
info
.
previously_applied_offset
.
x
<
0
.
0
&
&
sticky_rect
.
max_x
(
)
<
right_viewport_edge
{
sticky_offset
.
x
=
right_viewport_edge
-
sticky_rect
.
max_x
(
)
;
sticky_offset
.
x
=
sticky_offset
.
x
.
min
(
-
info
.
previously_applied_offset
.
x
)
;
}
debug_assert
!
(
sticky_offset
.
x
+
info
.
previously_applied_offset
.
x
<
=
0
.
0
)
;
}
}
let
clamp_adjusted
=
|
value
:
f32
adjust
:
f32
bounds
:
&
StickyOffsetBounds
|
{
(
value
+
adjust
)
.
max
(
bounds
.
min
)
.
min
(
bounds
.
max
)
-
adjust
}
;
sticky_offset
.
y
=
clamp_adjusted
(
sticky_offset
.
y
info
.
previously_applied_offset
.
y
&
info
.
vertical_offset_bounds
)
;
sticky_offset
.
x
=
clamp_adjusted
(
sticky_offset
.
x
info
.
previously_applied_offset
.
x
&
info
.
horizontal_offset_bounds
)
;
sticky_offset
}
pub
fn
prepare_state_for_children
(
&
self
state
:
&
mut
TransformUpdateState
)
{
if
!
self
.
invertible
{
state
.
invertible
=
false
;
return
;
}
match
self
.
node_type
{
NodeType
:
:
ReferenceFrame
(
ref
info
)
=
>
{
state
.
parent_reference_frame_transform
=
self
.
world_viewport_transform
;
state
.
parent_accumulated_scroll_offset
=
LayoutVector2D
:
:
zero
(
)
;
state
.
coordinate_system_relative_transform
=
self
.
coordinate_system_relative_transform
.
clone
(
)
;
let
translation
=
-
info
.
origin_in_parent_reference_frame
;
state
.
nearest_scrolling_ancestor_viewport
=
state
.
nearest_scrolling_ancestor_viewport
.
translate
(
&
translation
)
;
}
NodeType
:
:
Clip
{
.
.
}
=
>
{
}
NodeType
:
:
ScrollFrame
(
ref
scrolling
)
=
>
{
state
.
parent_accumulated_scroll_offset
=
scrolling
.
offset
+
state
.
parent_accumulated_scroll_offset
;
state
.
nearest_scrolling_ancestor_offset
=
scrolling
.
offset
;
state
.
nearest_scrolling_ancestor_viewport
=
self
.
local_viewport_rect
;
}
NodeType
:
:
StickyFrame
(
ref
info
)
=
>
{
state
.
parent_accumulated_scroll_offset
=
info
.
current_offset
+
state
.
parent_accumulated_scroll_offset
;
}
NodeType
:
:
Empty
=
>
unreachable
!
(
"
Empty
node
remaining
in
ClipScrollTree
.
"
)
}
}
pub
fn
scrollable_size
(
&
self
)
-
>
LayoutSize
{
match
self
.
node_type
{
NodeType
:
:
ScrollFrame
(
state
)
=
>
state
.
scrollable_size
_
=
>
LayoutSize
:
:
zero
(
)
}
}
pub
fn
scroll
(
&
mut
self
scroll_location
:
ScrollLocation
)
-
>
bool
{
let
scrolling
=
match
self
.
node_type
{
NodeType
:
:
ScrollFrame
(
ref
mut
scrolling
)
=
>
scrolling
_
=
>
return
false
}
;
let
delta
=
match
scroll_location
{
ScrollLocation
:
:
Delta
(
delta
)
=
>
delta
ScrollLocation
:
:
Start
=
>
{
if
scrolling
.
offset
.
y
.
round
(
)
>
=
0
.
0
{
return
false
;
}
scrolling
.
offset
.
y
=
0
.
0
;
return
true
;
}
ScrollLocation
:
:
End
=
>
{
let
end_pos
=
-
scrolling
.
scrollable_size
.
height
;
if
scrolling
.
offset
.
y
.
round
(
)
<
=
end_pos
{
return
false
;
}
scrolling
.
offset
.
y
=
end_pos
;
return
true
;
}
}
;
let
scrollable_width
=
scrolling
.
scrollable_size
.
width
;
let
scrollable_height
=
scrolling
.
scrollable_size
.
height
;
let
original_layer_scroll_offset
=
scrolling
.
offset
;
if
scrollable_width
>
0
.
{
scrolling
.
offset
.
x
=
(
scrolling
.
offset
.
x
+
delta
.
x
)
.
min
(
0
.
0
)
.
max
(
-
scrollable_width
)
.
round
(
)
;
}
if
scrollable_height
>
0
.
{
scrolling
.
offset
.
y
=
(
scrolling
.
offset
.
y
+
delta
.
y
)
.
min
(
0
.
0
)
.
max
(
-
scrollable_height
)
.
round
(
)
;
}
scrolling
.
offset
!
=
original_layer_scroll_offset
}
pub
fn
ray_intersects_node
(
&
self
cursor
:
&
WorldPoint
)
-
>
bool
{
let
inv
=
match
self
.
world_viewport_transform
.
inverse
(
)
{
Some
(
inv
)
=
>
inv
None
=
>
return
false
}
;
let
z0
=
-
10000
.
0
;
let
z1
=
10000
.
0
;
let
p0
=
inv
.
transform_point3d
(
&
cursor
.
extend
(
z0
)
)
;
let
p1
=
inv
.
transform_point3d
(
&
cursor
.
extend
(
z1
)
)
;
if
self
.
scrollable_size
(
)
=
=
LayoutSize
:
:
zero
(
)
{
return
false
;
}
ray_intersects_rect
(
p0
.
to_untyped
(
)
p1
.
to_untyped
(
)
self
.
local_viewport_rect
.
to_untyped
(
)
)
}
pub
fn
scroll_offset
(
&
self
)
-
>
LayoutVector2D
{
match
self
.
node_type
{
NodeType
:
:
ScrollFrame
(
ref
scrolling
)
=
>
scrolling
.
offset
_
=
>
LayoutVector2D
:
:
zero
(
)
}
}
pub
fn
matches_external_id
(
&
self
external_id
:
ExternalScrollId
)
-
>
bool
{
match
self
.
node_type
{
NodeType
:
:
ScrollFrame
(
info
)
if
info
.
external_id
=
=
Some
(
external_id
)
=
>
true
_
=
>
false
}
}
}
#
[
derive
(
Copy
Clone
Debug
)
]
pub
struct
ScrollFrameInfo
{
pub
offset
:
LayoutVector2D
pub
scroll_sensitivity
:
ScrollSensitivity
pub
scrollable_size
:
LayoutSize
pub
external_id
:
Option
<
ExternalScrollId
>
}
impl
ScrollFrameInfo
{
pub
fn
new
(
scroll_sensitivity
:
ScrollSensitivity
scrollable_size
:
LayoutSize
external_id
:
Option
<
ExternalScrollId
>
)
-
>
ScrollFrameInfo
{
ScrollFrameInfo
{
offset
:
LayoutVector2D
:
:
zero
(
)
scroll_sensitivity
scrollable_size
external_id
}
}
pub
fn
sensitive_to_input_events
(
&
self
)
-
>
bool
{
match
self
.
scroll_sensitivity
{
ScrollSensitivity
:
:
ScriptAndInputEvents
=
>
true
ScrollSensitivity
:
:
Script
=
>
false
}
}
}
#
[
derive
(
Copy
Clone
Debug
)
]
pub
struct
ReferenceFrameInfo
{
pub
resolved_transform
:
LayoutFastTransform
pub
source_transform
:
PropertyBinding
<
LayoutTransform
>
pub
source_perspective
:
LayoutFastTransform
pub
origin_in_parent_reference_frame
:
LayoutVector2D
pub
invertible
:
bool
}
