use
api
:
:
{
DeviceRect
FilterOp
MixBlendMode
PipelineId
PremultipliedColorF
}
;
use
api
:
:
{
DeviceIntRect
DeviceIntSize
DevicePoint
LayoutPoint
LayoutRect
}
;
use
api
:
:
{
DevicePixelScale
PictureIntPoint
PictureIntRect
PictureIntSize
}
;
use
box_shadow
:
:
{
BLUR_SAMPLE_SCALE
}
;
use
clip_scroll_node
:
:
ClipScrollNode
;
use
clip_scroll_tree
:
:
ClipScrollNodeIndex
;
use
frame_builder
:
:
{
FrameBuildingContext
FrameBuildingState
PictureState
PrimitiveRunContext
}
;
use
gpu_cache
:
:
{
GpuCacheHandle
}
;
use
gpu_types
:
:
UvRectKind
;
use
prim_store
:
:
{
PrimitiveIndex
PrimitiveRun
PrimitiveRunLocalRect
}
;
use
prim_store
:
:
{
PrimitiveMetadata
ScrollNodeAndClipChain
}
;
use
render_task
:
:
{
ClearMode
RenderTask
RenderTaskCacheEntryHandle
}
;
use
render_task
:
:
{
RenderTaskCacheKey
RenderTaskCacheKeyKind
RenderTaskId
RenderTaskLocation
}
;
use
scene
:
:
{
FilterOpHelpers
SceneProperties
}
;
use
std
:
:
mem
;
use
tiling
:
:
RenderTargetKind
;
use
util
:
:
TransformedRectKind
;
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
pub
enum
PictureCompositeMode
{
MixBlend
(
MixBlendMode
)
Filter
(
FilterOp
)
Blit
}
#
[
derive
(
Debug
)
]
pub
enum
PictureSurface
{
RenderTask
(
RenderTaskId
)
TextureCache
(
RenderTaskCacheEntryHandle
)
}
#
[
derive
(
Copy
Clone
Debug
Hash
PartialEq
Eq
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
PictureId
(
pub
u64
)
;
#
[
derive
(
Clone
Debug
Hash
PartialEq
Eq
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
PictureCacheKey
{
picture_id
:
PictureId
pic_relative_render_rect
:
PictureIntRect
unclipped_size
:
DeviceIntSize
}
#
[
derive
(
Debug
)
]
pub
struct
PicturePrimitive
{
pub
surface
:
Option
<
PictureSurface
>
pub
runs
:
Vec
<
PrimitiveRun
>
pub
pipeline_id
:
PipelineId
pub
apply_local_clip_rect
:
bool
pub
secondary_render_task_id
:
Option
<
RenderTaskId
>
pub
composite_mode
:
Option
<
PictureCompositeMode
>
pub
is_in_3d_context
:
bool
pub
frame_output_pipeline_id
:
Option
<
PipelineId
>
pub
reference_frame_index
:
ClipScrollNodeIndex
pub
real_local_rect
:
LayoutRect
pub
extra_gpu_data_handle
:
GpuCacheHandle
pub
id
:
PictureId
}
impl
PicturePrimitive
{
pub
fn
resolve_scene_properties
(
&
mut
self
properties
:
&
SceneProperties
)
-
>
bool
{
match
self
.
composite_mode
{
Some
(
PictureCompositeMode
:
:
Filter
(
ref
mut
filter
)
)
=
>
{
match
*
filter
{
FilterOp
:
:
Opacity
(
ref
binding
ref
mut
value
)
=
>
{
*
value
=
properties
.
resolve_float
(
binding
*
value
)
;
}
_
=
>
{
}
}
filter
.
is_visible
(
)
}
_
=
>
true
}
}
pub
fn
new_image
(
id
:
PictureId
composite_mode
:
Option
<
PictureCompositeMode
>
is_in_3d_context
:
bool
pipeline_id
:
PipelineId
reference_frame_index
:
ClipScrollNodeIndex
frame_output_pipeline_id
:
Option
<
PipelineId
>
apply_local_clip_rect
:
bool
)
-
>
Self
{
PicturePrimitive
{
runs
:
Vec
:
:
new
(
)
surface
:
None
secondary_render_task_id
:
None
composite_mode
is_in_3d_context
frame_output_pipeline_id
reference_frame_index
real_local_rect
:
LayoutRect
:
:
zero
(
)
extra_gpu_data_handle
:
GpuCacheHandle
:
:
new
(
)
apply_local_clip_rect
pipeline_id
id
}
}
pub
fn
add_primitive
(
&
mut
self
prim_index
:
PrimitiveIndex
clip_and_scroll
:
ScrollNodeAndClipChain
)
{
if
let
Some
(
ref
mut
run
)
=
self
.
runs
.
last_mut
(
)
{
if
run
.
clip_and_scroll
=
=
clip_and_scroll
&
&
run
.
base_prim_index
.
0
+
run
.
count
=
=
prim_index
.
0
{
run
.
count
+
=
1
;
return
;
}
}
self
.
runs
.
push
(
PrimitiveRun
{
base_prim_index
:
prim_index
count
:
1
clip_and_scroll
}
)
;
}
pub
fn
update_local_rect
(
&
mut
self
prim_run_rect
:
PrimitiveRunLocalRect
)
-
>
LayoutRect
{
let
local_content_rect
=
prim_run_rect
.
local_rect_in_actual_parent_space
;
self
.
real_local_rect
=
prim_run_rect
.
local_rect_in_original_parent_space
;
match
self
.
composite_mode
{
Some
(
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
Blur
(
blur_radius
)
)
)
=
>
{
let
inflate_size
=
(
blur_radius
*
BLUR_SAMPLE_SCALE
)
.
ceil
(
)
;
local_content_rect
.
inflate
(
inflate_size
inflate_size
)
}
Some
(
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
DropShadow
(
_
blur_radius
_
)
)
)
=
>
{
let
inflate_size
=
(
blur_radius
*
BLUR_SAMPLE_SCALE
)
.
ceil
(
)
;
local_content_rect
.
inflate
(
inflate_size
inflate_size
)
}
_
=
>
{
local_content_rect
}
}
}
pub
fn
can_draw_directly_to_parent_surface
(
&
self
)
-
>
bool
{
match
self
.
composite_mode
{
Some
(
PictureCompositeMode
:
:
Filter
(
filter
)
)
=
>
{
filter
.
is_noop
(
)
}
Some
(
PictureCompositeMode
:
:
Blit
)
|
Some
(
PictureCompositeMode
:
:
MixBlend
(
.
.
)
)
=
>
{
false
}
None
=
>
{
true
}
}
}
pub
fn
allow_subpixel_aa
(
&
self
)
-
>
bool
{
self
.
can_draw_directly_to_parent_surface
(
)
}
pub
fn
prepare_for_render_inner
(
&
mut
self
prim_index
:
PrimitiveIndex
prim_metadata
:
&
mut
PrimitiveMetadata
prim_run_context
:
&
PrimitiveRunContext
mut
pic_state_for_children
:
PictureState
pic_state
:
&
mut
PictureState
frame_context
:
&
FrameBuildingContext
frame_state
:
&
mut
FrameBuildingState
)
{
let
prim_screen_rect
=
prim_metadata
.
screen_rect
.
as_ref
(
)
.
expect
(
"
bug
:
trying
to
draw
an
off
-
screen
picture
!
?
"
)
;
if
self
.
can_draw_directly_to_parent_surface
(
)
{
pic_state
.
tasks
.
extend
(
pic_state_for_children
.
tasks
)
;
self
.
surface
=
None
;
return
;
}
match
self
.
composite_mode
{
Some
(
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
Blur
(
blur_radius
)
)
)
=
>
{
let
blur_std_deviation
=
blur_radius
*
frame_context
.
device_pixel_scale
.
0
;
let
blur_range
=
(
blur_std_deviation
*
BLUR_SAMPLE_SCALE
)
.
ceil
(
)
as
i32
;
let
device_rect
=
prim_screen_rect
.
clipped
.
inflate
(
blur_range
blur_range
)
.
intersection
(
&
prim_screen_rect
.
unclipped
)
.
unwrap
(
)
;
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
prim_metadata
.
local_rect
&
prim_run_context
.
scroll_node
&
device_rect
frame_context
.
device_pixel_scale
)
;
let
surface
=
if
pic_state_for_children
.
has_non_root_coord_system
{
let
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
Some
(
device_rect
.
size
)
)
prim_index
device_rect
.
origin
pic_state_for_children
.
tasks
uv_rect_kind
)
;
let
picture_task_id
=
frame_state
.
render_tasks
.
add
(
picture_task
)
;
let
blur_render_task
=
RenderTask
:
:
new_blur
(
blur_std_deviation
picture_task_id
frame_state
.
render_tasks
RenderTargetKind
:
:
Color
ClearMode
:
:
Transparent
)
;
let
render_task_id
=
frame_state
.
render_tasks
.
add
(
blur_render_task
)
;
pic_state
.
tasks
.
push
(
render_task_id
)
;
PictureSurface
:
:
RenderTask
(
render_task_id
)
}
else
{
let
pic_relative_render_rect
=
PictureIntRect
:
:
new
(
PictureIntPoint
:
:
new
(
device_rect
.
origin
.
x
-
prim_screen_rect
.
unclipped
.
origin
.
x
device_rect
.
origin
.
y
-
prim_screen_rect
.
unclipped
.
origin
.
y
)
PictureIntSize
:
:
new
(
device_rect
.
size
.
width
device_rect
.
size
.
height
)
)
;
let
cache_item
=
frame_state
.
resource_cache
.
request_render_task
(
RenderTaskCacheKey
{
size
:
device_rect
.
size
kind
:
RenderTaskCacheKeyKind
:
:
Picture
(
PictureCacheKey
{
picture_id
:
self
.
id
unclipped_size
:
prim_screen_rect
.
unclipped
.
size
pic_relative_render_rect
}
)
}
frame_state
.
gpu_cache
frame_state
.
render_tasks
None
false
|
render_tasks
|
{
let
child_tasks
=
mem
:
:
replace
(
&
mut
pic_state_for_children
.
tasks
Vec
:
:
new
(
)
)
;
let
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
Some
(
device_rect
.
size
)
)
prim_index
device_rect
.
origin
child_tasks
uv_rect_kind
)
;
let
picture_task_id
=
render_tasks
.
add
(
picture_task
)
;
let
blur_render_task
=
RenderTask
:
:
new_blur
(
blur_std_deviation
picture_task_id
render_tasks
RenderTargetKind
:
:
Color
ClearMode
:
:
Transparent
)
;
let
render_task_id
=
render_tasks
.
add
(
blur_render_task
)
;
pic_state
.
tasks
.
push
(
render_task_id
)
;
render_task_id
}
)
;
PictureSurface
:
:
TextureCache
(
cache_item
)
}
;
self
.
surface
=
Some
(
surface
)
;
}
Some
(
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
DropShadow
(
offset
blur_radius
color
)
)
)
=
>
{
let
blur_std_deviation
=
blur_radius
*
frame_context
.
device_pixel_scale
.
0
;
let
blur_range
=
(
blur_std_deviation
*
BLUR_SAMPLE_SCALE
)
.
ceil
(
)
as
i32
;
let
device_rect
=
prim_screen_rect
.
clipped
.
inflate
(
blur_range
blur_range
)
.
intersection
(
&
prim_screen_rect
.
unclipped
)
.
unwrap
(
)
;
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
prim_metadata
.
local_rect
&
prim_run_context
.
scroll_node
&
device_rect
frame_context
.
device_pixel_scale
)
;
let
mut
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
Some
(
device_rect
.
size
)
)
prim_index
device_rect
.
origin
pic_state_for_children
.
tasks
uv_rect_kind
)
;
picture_task
.
mark_for_saving
(
)
;
let
picture_task_id
=
frame_state
.
render_tasks
.
add
(
picture_task
)
;
let
blur_render_task
=
RenderTask
:
:
new_blur
(
blur_std_deviation
.
round
(
)
picture_task_id
frame_state
.
render_tasks
RenderTargetKind
:
:
Color
ClearMode
:
:
Transparent
)
;
self
.
secondary_render_task_id
=
Some
(
picture_task_id
)
;
let
render_task_id
=
frame_state
.
render_tasks
.
add
(
blur_render_task
)
;
pic_state
.
tasks
.
push
(
render_task_id
)
;
self
.
surface
=
Some
(
PictureSurface
:
:
RenderTask
(
render_task_id
)
)
;
if
let
Some
(
mut
request
)
=
frame_state
.
gpu_cache
.
request
(
&
mut
self
.
extra_gpu_data_handle
)
{
let
shadow_rect
=
prim_metadata
.
local_rect
.
translate
(
&
offset
)
;
let
shadow_clip_rect
=
prim_metadata
.
local_clip_rect
.
translate
(
&
offset
)
;
request
.
push
(
shadow_rect
)
;
request
.
push
(
shadow_clip_rect
)
;
request
.
push
(
color
.
premultiplied
(
)
)
;
request
.
push
(
PremultipliedColorF
:
:
WHITE
)
;
request
.
push
(
[
prim_metadata
.
local_rect
.
size
.
width
prim_metadata
.
local_rect
.
size
.
height
0
.
0
0
.
0
]
)
;
request
.
push
(
shadow_rect
)
;
request
.
push
(
[
0
.
0
0
.
0
0
.
0
0
.
0
]
)
;
}
}
Some
(
PictureCompositeMode
:
:
MixBlend
(
.
.
)
)
=
>
{
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
prim_metadata
.
local_rect
&
prim_run_context
.
scroll_node
&
prim_screen_rect
.
clipped
frame_context
.
device_pixel_scale
)
;
let
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
Some
(
prim_screen_rect
.
clipped
.
size
)
)
prim_index
prim_screen_rect
.
clipped
.
origin
pic_state_for_children
.
tasks
uv_rect_kind
)
;
let
readback_task_id
=
frame_state
.
render_tasks
.
add
(
RenderTask
:
:
new_readback
(
prim_screen_rect
.
clipped
)
)
;
self
.
secondary_render_task_id
=
Some
(
readback_task_id
)
;
pic_state
.
tasks
.
push
(
readback_task_id
)
;
let
render_task_id
=
frame_state
.
render_tasks
.
add
(
picture_task
)
;
pic_state
.
tasks
.
push
(
render_task_id
)
;
self
.
surface
=
Some
(
PictureSurface
:
:
RenderTask
(
render_task_id
)
)
;
}
Some
(
PictureCompositeMode
:
:
Filter
(
filter
)
)
=
>
{
if
let
FilterOp
:
:
ColorMatrix
(
m
)
=
filter
{
if
let
Some
(
mut
request
)
=
frame_state
.
gpu_cache
.
request
(
&
mut
self
.
extra_gpu_data_handle
)
{
for
i
in
0
.
.
5
{
request
.
push
(
[
m
[
i
*
4
]
m
[
i
*
4
+
1
]
m
[
i
*
4
+
2
]
m
[
i
*
4
+
3
]
]
)
;
}
}
}
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
prim_metadata
.
local_rect
&
prim_run_context
.
scroll_node
&
prim_screen_rect
.
clipped
frame_context
.
device_pixel_scale
)
;
let
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
Some
(
prim_screen_rect
.
clipped
.
size
)
)
prim_index
prim_screen_rect
.
clipped
.
origin
pic_state_for_children
.
tasks
uv_rect_kind
)
;
let
render_task_id
=
frame_state
.
render_tasks
.
add
(
picture_task
)
;
pic_state
.
tasks
.
push
(
render_task_id
)
;
self
.
surface
=
Some
(
PictureSurface
:
:
RenderTask
(
render_task_id
)
)
;
}
Some
(
PictureCompositeMode
:
:
Blit
)
|
None
=
>
{
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
prim_metadata
.
local_rect
&
prim_run_context
.
scroll_node
&
prim_screen_rect
.
clipped
frame_context
.
device_pixel_scale
)
;
let
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
Some
(
prim_screen_rect
.
clipped
.
size
)
)
prim_index
prim_screen_rect
.
clipped
.
origin
pic_state_for_children
.
tasks
uv_rect_kind
)
;
let
render_task_id
=
frame_state
.
render_tasks
.
add
(
picture_task
)
;
pic_state
.
tasks
.
push
(
render_task_id
)
;
self
.
surface
=
Some
(
PictureSurface
:
:
RenderTask
(
render_task_id
)
)
;
}
}
}
pub
fn
prepare_for_render
(
&
mut
self
prim_index
:
PrimitiveIndex
prim_metadata
:
&
mut
PrimitiveMetadata
prim_run_context
:
&
PrimitiveRunContext
pic_state_for_children
:
PictureState
pic_state
:
&
mut
PictureState
frame_context
:
&
FrameBuildingContext
frame_state
:
&
mut
FrameBuildingState
)
{
self
.
prepare_for_render_inner
(
prim_index
prim_metadata
prim_run_context
pic_state_for_children
pic_state
frame_context
frame_state
)
;
}
}
fn
calculate_screen_uv
(
local_pos
:
&
LayoutPoint
clip_scroll_node
:
&
ClipScrollNode
rendered_rect
:
&
DeviceRect
device_pixel_scale
:
DevicePixelScale
)
-
>
DevicePoint
{
let
world_pos
=
clip_scroll_node
.
world_content_transform
.
transform_point2d
(
local_pos
)
;
let
mut
device_pos
=
world_pos
*
device_pixel_scale
;
if
clip_scroll_node
.
transform_kind
=
=
TransformedRectKind
:
:
AxisAligned
{
device_pos
.
x
=
(
device_pos
.
x
+
0
.
5
)
.
floor
(
)
;
device_pos
.
y
=
(
device_pos
.
y
+
0
.
5
)
.
floor
(
)
;
}
DevicePoint
:
:
new
(
(
device_pos
.
x
-
rendered_rect
.
origin
.
x
)
/
rendered_rect
.
size
.
width
(
device_pos
.
y
-
rendered_rect
.
origin
.
y
)
/
rendered_rect
.
size
.
height
)
}
fn
calculate_uv_rect_kind
(
local_rect
:
&
LayoutRect
clip_scroll_node
:
&
ClipScrollNode
rendered_rect
:
&
DeviceIntRect
device_pixel_scale
:
DevicePixelScale
)
-
>
UvRectKind
{
let
rendered_rect
=
rendered_rect
.
to_f32
(
)
;
let
top_left
=
calculate_screen_uv
(
&
local_rect
.
origin
clip_scroll_node
&
rendered_rect
device_pixel_scale
)
;
let
top_right
=
calculate_screen_uv
(
&
local_rect
.
top_right
(
)
clip_scroll_node
&
rendered_rect
device_pixel_scale
)
;
let
bottom_left
=
calculate_screen_uv
(
&
local_rect
.
bottom_left
(
)
clip_scroll_node
&
rendered_rect
device_pixel_scale
)
;
let
bottom_right
=
calculate_screen_uv
(
&
local_rect
.
bottom_right
(
)
clip_scroll_node
&
rendered_rect
device_pixel_scale
)
;
UvRectKind
:
:
Quad
{
top_left
top_right
bottom_left
bottom_right
}
}
