use
api
:
:
{
DeviceRect
FilterOp
MixBlendMode
PipelineId
PremultipliedColorF
PictureRect
PicturePoint
}
;
use
api
:
:
{
DeviceIntRect
DeviceIntSize
DevicePoint
LayoutRect
PictureToRasterTransform
}
;
use
api
:
:
{
DevicePixelScale
PictureIntPoint
PictureIntRect
PictureIntSize
RasterRect
RasterSpace
}
;
use
api
:
:
{
PicturePixel
RasterPixel
WorldPixel
}
;
use
box_shadow
:
:
{
BLUR_SAMPLE_SCALE
}
;
use
clip
:
:
ClipNodeCollector
;
use
clip_scroll_tree
:
:
{
ROOT_SPATIAL_NODE_INDEX
SpatialNodeIndex
}
;
use
euclid
:
:
TypedScale
;
use
frame_builder
:
:
{
FrameBuildingContext
FrameBuildingState
PictureState
}
;
use
frame_builder
:
:
{
PictureContext
PrimitiveContext
}
;
use
gpu_cache
:
:
{
GpuCacheHandle
}
;
use
gpu_types
:
:
UvRectKind
;
use
prim_store
:
:
{
PrimitiveInstance
SpaceMapper
}
;
use
prim_store
:
:
{
PrimitiveMetadata
get_raster_rects
}
;
use
render_task
:
:
{
ClearMode
RenderTask
RenderTaskCacheEntryHandle
}
;
use
render_task
:
:
{
RenderTaskCacheKey
RenderTaskCacheKeyKind
RenderTaskId
RenderTaskLocation
}
;
use
scene
:
:
{
FilterOpHelpers
SceneProperties
}
;
use
std
:
:
mem
;
use
tiling
:
:
RenderTargetKind
;
use
util
:
:
{
TransformedRectKind
MatrixHelpers
MaxRect
}
;
#
[
derive
(
Debug
)
]
pub
struct
RasterConfig
{
pub
composite_mode
:
PictureCompositeMode
pub
surface
:
Option
<
PictureSurface
>
pub
raster_spatial_node_index
:
SpatialNodeIndex
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
pub
enum
PictureCompositeMode
{
MixBlend
(
MixBlendMode
)
Filter
(
FilterOp
)
Blit
}
#
[
derive
(
Debug
)
]
pub
enum
PictureSurface
{
RenderTask
(
RenderTaskId
)
TextureCache
(
RenderTaskCacheEntryHandle
)
}
#
[
derive
(
Copy
Clone
Debug
Hash
PartialEq
Eq
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
PictureId
(
pub
u64
)
;
pub
struct
PictureIdGenerator
{
next
:
u64
}
impl
PictureIdGenerator
{
pub
fn
new
(
)
-
>
Self
{
PictureIdGenerator
{
next
:
0
}
}
pub
fn
next
(
&
mut
self
)
-
>
PictureId
{
let
id
=
PictureId
(
self
.
next
)
;
self
.
next
+
=
1
;
id
}
}
#
[
derive
(
Clone
Debug
Hash
PartialEq
Eq
)
]
#
[
cfg_attr
(
feature
=
"
capture
"
derive
(
Serialize
)
)
]
#
[
cfg_attr
(
feature
=
"
replay
"
derive
(
Deserialize
)
)
]
pub
struct
PictureCacheKey
{
scene_id
:
u64
picture_id
:
PictureId
pic_relative_render_rect
:
PictureIntRect
unclipped_size
:
DeviceIntSize
}
#
[
derive
(
Debug
)
]
pub
struct
PicturePrimitive
{
pub
prim_instances
:
Vec
<
PrimitiveInstance
>
pub
state
:
Option
<
PictureState
>
pub
pipeline_id
:
PipelineId
pub
apply_local_clip_rect
:
bool
pub
secondary_render_task_id
:
Option
<
RenderTaskId
>
pub
requested_composite_mode
:
Option
<
PictureCompositeMode
>
pub
requested_raster_space
:
RasterSpace
pub
raster_config
:
Option
<
RasterConfig
>
pub
is_in_3d_context
:
bool
pub
frame_output_pipeline_id
:
Option
<
PipelineId
>
pub
extra_gpu_data_handle
:
GpuCacheHandle
pub
id
:
PictureId
}
impl
PicturePrimitive
{
fn
resolve_scene_properties
(
&
mut
self
properties
:
&
SceneProperties
)
-
>
bool
{
match
self
.
requested_composite_mode
{
Some
(
PictureCompositeMode
:
:
Filter
(
ref
mut
filter
)
)
=
>
{
match
*
filter
{
FilterOp
:
:
Opacity
(
ref
binding
ref
mut
value
)
=
>
{
*
value
=
properties
.
resolve_float
(
binding
)
;
}
_
=
>
{
}
}
filter
.
is_visible
(
)
}
_
=
>
true
}
}
pub
fn
new_image
(
id
:
PictureId
requested_composite_mode
:
Option
<
PictureCompositeMode
>
is_in_3d_context
:
bool
pipeline_id
:
PipelineId
frame_output_pipeline_id
:
Option
<
PipelineId
>
apply_local_clip_rect
:
bool
requested_raster_space
:
RasterSpace
prim_instances
:
Vec
<
PrimitiveInstance
>
)
-
>
Self
{
PicturePrimitive
{
prim_instances
state
:
None
secondary_render_task_id
:
None
requested_composite_mode
raster_config
:
None
is_in_3d_context
frame_output_pipeline_id
extra_gpu_data_handle
:
GpuCacheHandle
:
:
new
(
)
apply_local_clip_rect
pipeline_id
id
requested_raster_space
}
}
pub
fn
take_context
(
&
mut
self
prim_context
:
&
PrimitiveContext
surface_spatial_node_index
:
SpatialNodeIndex
raster_spatial_node_index
:
SpatialNodeIndex
parent_allows_subpixel_aa
:
bool
frame_state
:
&
mut
FrameBuildingState
frame_context
:
&
FrameBuildingContext
is_chased
:
bool
)
-
>
Option
<
(
PictureContext
PictureState
Vec
<
PrimitiveInstance
>
)
>
{
if
!
self
.
resolve_scene_properties
(
frame_context
.
scene_properties
)
{
if
cfg
!
(
debug_assertions
)
&
&
is_chased
{
println
!
(
"
\
tculled
for
carrying
an
invisible
composite
filter
"
)
;
}
return
None
;
}
let
actual_composite_mode
=
match
self
.
requested_composite_mode
{
Some
(
PictureCompositeMode
:
:
Filter
(
filter
)
)
if
filter
.
is_noop
(
)
=
>
None
mode
=
>
mode
}
;
let
has_surface
=
actual_composite_mode
.
is_some
(
)
;
let
surface_spatial_node_index
=
if
has_surface
{
prim_context
.
spatial_node_index
}
else
{
surface_spatial_node_index
}
;
let
xf
=
frame_context
.
clip_scroll_tree
.
get_relative_transform
(
raster_spatial_node_index
surface_spatial_node_index
)
.
expect
(
"
todo
"
)
;
let
raster_space
=
self
.
requested_raster_space
;
let
wants_raster_root
=
xf
.
has_perspective_component
(
)
;
let
establishes_raster_root
=
has_surface
&
&
wants_raster_root
;
let
raster_spatial_node_index
=
if
establishes_raster_root
{
surface_spatial_node_index
}
else
{
raster_spatial_node_index
}
;
if
has_surface
{
frame_state
.
clip_store
.
push_surface
(
surface_spatial_node_index
)
;
}
let
map_pic_to_world
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
surface_spatial_node_index
frame_context
.
world_rect
frame_context
.
clip_scroll_tree
)
;
let
pic_bounds
=
map_pic_to_world
.
unmap
(
&
map_pic_to_world
.
bounds
)
.
unwrap_or
(
PictureRect
:
:
max_rect
(
)
)
;
let
map_local_to_pic
=
SpaceMapper
:
:
new
(
surface_spatial_node_index
pic_bounds
)
;
let
(
map_raster_to_world
map_pic_to_raster
)
=
create_raster_mappers
(
surface_spatial_node_index
raster_spatial_node_index
frame_context
)
;
self
.
raster_config
=
actual_composite_mode
.
map
(
|
composite_mode
|
{
RasterConfig
{
composite_mode
surface
:
None
raster_spatial_node_index
}
}
)
;
let
state
=
PictureState
{
tasks
:
Vec
:
:
new
(
)
has_non_root_coord_system
:
false
is_cacheable
:
true
local_rect_changed
:
false
raster_spatial_node_index
surface_spatial_node_index
map_local_to_pic
map_pic_to_world
map_pic_to_raster
map_raster_to_world
}
;
let
allow_subpixel_aa
=
parent_allows_subpixel_aa
&
&
self
.
raster_config
.
is_none
(
)
;
let
inflation_factor
=
match
self
.
raster_config
{
Some
(
RasterConfig
{
composite_mode
:
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
Blur
(
blur_radius
)
)
.
.
}
)
=
>
{
BLUR_SAMPLE_SCALE
*
blur_radius
}
_
=
>
{
0
.
0
}
}
;
let
context
=
PictureContext
{
pipeline_id
:
self
.
pipeline_id
apply_local_clip_rect
:
self
.
apply_local_clip_rect
inflation_factor
allow_subpixel_aa
is_passthrough
:
self
.
raster_config
.
is_none
(
)
raster_space
}
;
let
instances
=
mem
:
:
replace
(
&
mut
self
.
prim_instances
Vec
:
:
new
(
)
)
;
Some
(
(
context
state
instances
)
)
}
pub
fn
restore_context
(
&
mut
self
prim_instances
:
Vec
<
PrimitiveInstance
>
context
:
PictureContext
state
:
PictureState
local_rect
:
Option
<
PictureRect
>
frame_state
:
&
mut
FrameBuildingState
)
-
>
(
LayoutRect
Option
<
ClipNodeCollector
>
)
{
self
.
prim_instances
=
prim_instances
;
self
.
state
=
Some
(
state
)
;
let
local_rect
=
match
local_rect
{
Some
(
local_rect
)
=
>
{
let
local_content_rect
=
LayoutRect
:
:
from_untyped
(
&
local_rect
.
to_untyped
(
)
)
;
match
self
.
raster_config
{
Some
(
RasterConfig
{
composite_mode
:
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
Blur
(
blur_radius
)
)
.
.
}
)
=
>
{
let
inflate_size
=
(
blur_radius
*
BLUR_SAMPLE_SCALE
)
.
ceil
(
)
;
local_content_rect
.
inflate
(
inflate_size
inflate_size
)
}
Some
(
RasterConfig
{
composite_mode
:
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
DropShadow
(
_
blur_radius
_
)
)
.
.
}
)
=
>
{
let
inflate_size
=
(
blur_radius
*
BLUR_SAMPLE_SCALE
)
.
ceil
(
)
;
local_content_rect
.
inflate
(
inflate_size
inflate_size
)
}
_
=
>
{
local_content_rect
}
}
}
None
=
>
{
assert
!
(
self
.
raster_config
.
is_none
(
)
)
;
LayoutRect
:
:
zero
(
)
}
}
;
let
clip_node_collector
=
if
context
.
is_passthrough
{
None
}
else
{
Some
(
frame_state
.
clip_store
.
pop_surface
(
)
)
}
;
(
local_rect
clip_node_collector
)
}
pub
fn
take_state
(
&
mut
self
)
-
>
PictureState
{
self
.
state
.
take
(
)
.
expect
(
"
bug
:
no
state
present
!
"
)
}
pub
fn
prepare_for_render
(
&
mut
self
prim_instance
:
&
PrimitiveInstance
prim_metadata
:
&
PrimitiveMetadata
pic_state
:
&
mut
PictureState
frame_context
:
&
FrameBuildingContext
frame_state
:
&
mut
FrameBuildingState
)
-
>
bool
{
let
mut
pic_state_for_children
=
self
.
take_state
(
)
;
match
self
.
raster_config
{
Some
(
ref
mut
raster_config
)
=
>
{
let
(
map_raster_to_world
map_pic_to_raster
)
=
create_raster_mappers
(
prim_instance
.
spatial_node_index
raster_config
.
raster_spatial_node_index
frame_context
)
;
let
pic_rect
=
PictureRect
:
:
from_untyped
(
&
prim_metadata
.
local_rect
.
to_untyped
(
)
)
;
let
(
clipped
unclipped
transform
)
=
match
get_raster_rects
(
pic_rect
&
map_pic_to_raster
&
map_raster_to_world
prim_instance
.
clipped_world_rect
.
expect
(
"
bug1
"
)
frame_context
.
device_pixel_scale
)
{
Some
(
info
)
=
>
info
None
=
>
return
false
}
;
match
raster_config
.
composite_mode
{
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
Blur
(
blur_radius
)
)
=
>
{
let
blur_std_deviation
=
blur_radius
*
frame_context
.
device_pixel_scale
.
0
;
let
blur_range
=
(
blur_std_deviation
*
BLUR_SAMPLE_SCALE
)
.
ceil
(
)
as
i32
;
let
device_rect
=
clipped
.
inflate
(
blur_range
blur_range
)
.
intersection
(
&
unclipped
.
to_i32
(
)
)
.
unwrap
(
)
;
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
device_rect
frame_context
.
device_pixel_scale
)
;
let
surface
=
if
pic_state_for_children
.
has_non_root_coord_system
|
|
!
pic_state_for_children
.
is_cacheable
{
let
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
device_rect
.
size
)
unclipped
.
size
prim_instance
.
prim_index
device_rect
.
origin
pic_state_for_children
.
tasks
uv_rect_kind
pic_state_for_children
.
raster_spatial_node_index
)
;
let
picture_task_id
=
frame_state
.
render_tasks
.
add
(
picture_task
)
;
let
blur_render_task
=
RenderTask
:
:
new_blur
(
blur_std_deviation
picture_task_id
frame_state
.
render_tasks
RenderTargetKind
:
:
Color
ClearMode
:
:
Transparent
)
;
let
render_task_id
=
frame_state
.
render_tasks
.
add
(
blur_render_task
)
;
pic_state
.
tasks
.
push
(
render_task_id
)
;
PictureSurface
:
:
RenderTask
(
render_task_id
)
}
else
{
let
pic_relative_render_rect
=
PictureIntRect
:
:
new
(
PictureIntPoint
:
:
new
(
device_rect
.
origin
.
x
-
unclipped
.
origin
.
x
as
i32
device_rect
.
origin
.
y
-
unclipped
.
origin
.
y
as
i32
)
PictureIntSize
:
:
new
(
device_rect
.
size
.
width
device_rect
.
size
.
height
)
)
;
let
cache_item
=
frame_state
.
resource_cache
.
request_render_task
(
RenderTaskCacheKey
{
size
:
device_rect
.
size
kind
:
RenderTaskCacheKeyKind
:
:
Picture
(
PictureCacheKey
{
scene_id
:
frame_context
.
scene_id
picture_id
:
self
.
id
unclipped_size
:
unclipped
.
size
.
to_i32
(
)
pic_relative_render_rect
}
)
}
frame_state
.
gpu_cache
frame_state
.
render_tasks
None
false
|
render_tasks
|
{
let
child_tasks
=
mem
:
:
replace
(
&
mut
pic_state_for_children
.
tasks
Vec
:
:
new
(
)
)
;
let
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
device_rect
.
size
)
unclipped
.
size
prim_instance
.
prim_index
device_rect
.
origin
child_tasks
uv_rect_kind
pic_state_for_children
.
raster_spatial_node_index
)
;
let
picture_task_id
=
render_tasks
.
add
(
picture_task
)
;
let
blur_render_task
=
RenderTask
:
:
new_blur
(
blur_std_deviation
picture_task_id
render_tasks
RenderTargetKind
:
:
Color
ClearMode
:
:
Transparent
)
;
let
render_task_id
=
render_tasks
.
add
(
blur_render_task
)
;
pic_state
.
tasks
.
push
(
render_task_id
)
;
render_task_id
}
)
;
PictureSurface
:
:
TextureCache
(
cache_item
)
}
;
raster_config
.
surface
=
Some
(
surface
)
;
}
PictureCompositeMode
:
:
Filter
(
FilterOp
:
:
DropShadow
(
offset
blur_radius
color
)
)
=
>
{
let
blur_std_deviation
=
blur_radius
*
frame_context
.
device_pixel_scale
.
0
;
let
blur_range
=
(
blur_std_deviation
*
BLUR_SAMPLE_SCALE
)
.
ceil
(
)
as
i32
;
let
device_rect
=
clipped
.
inflate
(
blur_range
blur_range
)
.
intersection
(
&
unclipped
.
to_i32
(
)
)
.
unwrap
(
)
;
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
device_rect
frame_context
.
device_pixel_scale
)
;
let
mut
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
device_rect
.
size
)
unclipped
.
size
prim_instance
.
prim_index
device_rect
.
origin
pic_state_for_children
.
tasks
uv_rect_kind
pic_state_for_children
.
raster_spatial_node_index
)
;
picture_task
.
mark_for_saving
(
)
;
let
picture_task_id
=
frame_state
.
render_tasks
.
add
(
picture_task
)
;
let
blur_render_task
=
RenderTask
:
:
new_blur
(
blur_std_deviation
.
round
(
)
picture_task_id
frame_state
.
render_tasks
RenderTargetKind
:
:
Color
ClearMode
:
:
Transparent
)
;
self
.
secondary_render_task_id
=
Some
(
picture_task_id
)
;
let
render_task_id
=
frame_state
.
render_tasks
.
add
(
blur_render_task
)
;
pic_state
.
tasks
.
push
(
render_task_id
)
;
raster_config
.
surface
=
Some
(
PictureSurface
:
:
RenderTask
(
render_task_id
)
)
;
if
pic_state
.
local_rect_changed
{
frame_state
.
gpu_cache
.
invalidate
(
&
mut
self
.
extra_gpu_data_handle
)
;
}
if
let
Some
(
mut
request
)
=
frame_state
.
gpu_cache
.
request
(
&
mut
self
.
extra_gpu_data_handle
)
{
let
shadow_rect
=
prim_metadata
.
local_rect
.
translate
(
&
offset
)
;
request
.
push
(
color
.
premultiplied
(
)
)
;
request
.
push
(
PremultipliedColorF
:
:
WHITE
)
;
request
.
push
(
[
prim_metadata
.
local_rect
.
size
.
width
prim_metadata
.
local_rect
.
size
.
height
0
.
0
0
.
0
]
)
;
request
.
push
(
shadow_rect
)
;
request
.
push
(
[
0
.
0
0
.
0
0
.
0
0
.
0
]
)
;
}
}
PictureCompositeMode
:
:
MixBlend
(
.
.
)
=
>
{
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
clipped
frame_context
.
device_pixel_scale
)
;
let
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
clipped
.
size
)
unclipped
.
size
prim_instance
.
prim_index
clipped
.
origin
pic_state_for_children
.
tasks
uv_rect_kind
pic_state_for_children
.
raster_spatial_node_index
)
;
let
readback_task_id
=
frame_state
.
render_tasks
.
add
(
RenderTask
:
:
new_readback
(
clipped
)
)
;
self
.
secondary_render_task_id
=
Some
(
readback_task_id
)
;
pic_state
.
tasks
.
push
(
readback_task_id
)
;
let
render_task_id
=
frame_state
.
render_tasks
.
add
(
picture_task
)
;
pic_state
.
tasks
.
push
(
render_task_id
)
;
raster_config
.
surface
=
Some
(
PictureSurface
:
:
RenderTask
(
render_task_id
)
)
;
}
PictureCompositeMode
:
:
Filter
(
filter
)
=
>
{
if
let
FilterOp
:
:
ColorMatrix
(
m
)
=
filter
{
if
let
Some
(
mut
request
)
=
frame_state
.
gpu_cache
.
request
(
&
mut
self
.
extra_gpu_data_handle
)
{
for
i
in
0
.
.
5
{
request
.
push
(
[
m
[
i
*
4
]
m
[
i
*
4
+
1
]
m
[
i
*
4
+
2
]
m
[
i
*
4
+
3
]
]
)
;
}
}
}
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
clipped
frame_context
.
device_pixel_scale
)
;
let
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
clipped
.
size
)
unclipped
.
size
prim_instance
.
prim_index
clipped
.
origin
pic_state_for_children
.
tasks
uv_rect_kind
pic_state_for_children
.
raster_spatial_node_index
)
;
let
render_task_id
=
frame_state
.
render_tasks
.
add
(
picture_task
)
;
pic_state
.
tasks
.
push
(
render_task_id
)
;
raster_config
.
surface
=
Some
(
PictureSurface
:
:
RenderTask
(
render_task_id
)
)
;
}
PictureCompositeMode
:
:
Blit
=
>
{
let
uv_rect_kind
=
calculate_uv_rect_kind
(
&
pic_rect
&
transform
&
clipped
frame_context
.
device_pixel_scale
)
;
let
picture_task
=
RenderTask
:
:
new_picture
(
RenderTaskLocation
:
:
Dynamic
(
None
clipped
.
size
)
unclipped
.
size
prim_instance
.
prim_index
clipped
.
origin
pic_state_for_children
.
tasks
uv_rect_kind
pic_state_for_children
.
raster_spatial_node_index
)
;
let
render_task_id
=
frame_state
.
render_tasks
.
add
(
picture_task
)
;
pic_state
.
tasks
.
push
(
render_task_id
)
;
raster_config
.
surface
=
Some
(
PictureSurface
:
:
RenderTask
(
render_task_id
)
)
;
}
}
}
None
=
>
{
pic_state
.
tasks
.
extend
(
pic_state_for_children
.
tasks
)
;
}
}
true
}
}
fn
calculate_screen_uv
(
local_pos
:
&
PicturePoint
transform
:
&
PictureToRasterTransform
rendered_rect
:
&
DeviceRect
device_pixel_scale
:
DevicePixelScale
)
-
>
DevicePoint
{
let
raster_pos
=
match
transform
.
transform_point2d
(
local_pos
)
{
Some
(
pos
)
=
>
pos
None
=
>
{
return
DevicePoint
:
:
new
(
0
.
5
0
.
5
)
;
}
}
;
let
raster_to_device_space
=
TypedScale
:
:
new
(
1
.
0
)
*
device_pixel_scale
;
let
mut
device_pos
=
raster_pos
*
raster_to_device_space
;
if
transform
.
transform_kind
(
)
=
=
TransformedRectKind
:
:
AxisAligned
{
device_pos
.
x
=
(
device_pos
.
x
+
0
.
5
)
.
floor
(
)
;
device_pos
.
y
=
(
device_pos
.
y
+
0
.
5
)
.
floor
(
)
;
}
DevicePoint
:
:
new
(
(
device_pos
.
x
-
rendered_rect
.
origin
.
x
)
/
rendered_rect
.
size
.
width
(
device_pos
.
y
-
rendered_rect
.
origin
.
y
)
/
rendered_rect
.
size
.
height
)
}
fn
calculate_uv_rect_kind
(
pic_rect
:
&
PictureRect
transform
:
&
PictureToRasterTransform
rendered_rect
:
&
DeviceIntRect
device_pixel_scale
:
DevicePixelScale
)
-
>
UvRectKind
{
let
rendered_rect
=
rendered_rect
.
to_f32
(
)
;
let
top_left
=
calculate_screen_uv
(
&
pic_rect
.
origin
transform
&
rendered_rect
device_pixel_scale
)
;
let
top_right
=
calculate_screen_uv
(
&
pic_rect
.
top_right
(
)
transform
&
rendered_rect
device_pixel_scale
)
;
let
bottom_left
=
calculate_screen_uv
(
&
pic_rect
.
bottom_left
(
)
transform
&
rendered_rect
device_pixel_scale
)
;
let
bottom_right
=
calculate_screen_uv
(
&
pic_rect
.
bottom_right
(
)
transform
&
rendered_rect
device_pixel_scale
)
;
UvRectKind
:
:
Quad
{
top_left
top_right
bottom_left
bottom_right
}
}
fn
create_raster_mappers
(
surface_spatial_node_index
:
SpatialNodeIndex
raster_spatial_node_index
:
SpatialNodeIndex
frame_context
:
&
FrameBuildingContext
)
-
>
(
SpaceMapper
<
RasterPixel
WorldPixel
>
SpaceMapper
<
PicturePixel
RasterPixel
>
)
{
let
map_raster_to_world
=
SpaceMapper
:
:
new_with_target
(
ROOT_SPATIAL_NODE_INDEX
raster_spatial_node_index
frame_context
.
world_rect
frame_context
.
clip_scroll_tree
)
;
let
raster_bounds
=
map_raster_to_world
.
unmap
(
&
frame_context
.
world_rect
)
.
unwrap_or
(
RasterRect
:
:
max_rect
(
)
)
;
let
map_pic_to_raster
=
SpaceMapper
:
:
new_with_target
(
raster_spatial_node_index
surface_spatial_node_index
raster_bounds
frame_context
.
clip_scroll_tree
)
;
(
map_raster_to_world
map_pic_to_raster
)
}
