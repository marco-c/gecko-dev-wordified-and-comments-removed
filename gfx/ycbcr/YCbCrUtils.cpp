#
include
"
gfx2DGlue
.
h
"
#
include
"
YCbCrUtils
.
h
"
#
include
"
yuv_convert
.
h
"
#
include
"
ycbcr_to_rgb565
.
h
"
namespace
mozilla
{
namespace
gfx
{
void
GetYCbCrToRGBDestFormatAndSize
(
const
layers
:
:
PlanarYCbCrData
&
aData
SurfaceFormat
&
aSuggestedFormat
IntSize
&
aSuggestedSize
)
{
YUVType
yuvtype
=
TypeFromSize
(
aData
.
mYSize
.
width
aData
.
mYSize
.
height
aData
.
mCbCrSize
.
width
aData
.
mCbCrSize
.
height
)
;
bool
prescale
=
aSuggestedSize
.
width
>
0
&
&
aSuggestedSize
.
height
>
0
&
&
aSuggestedSize
!
=
aData
.
mPicSize
;
if
(
aSuggestedFormat
=
=
SurfaceFormat
:
:
R5G6B5_UINT16
)
{
#
if
defined
(
HAVE_YCBCR_TO_RGB565
)
if
(
prescale
&
&
!
IsScaleYCbCrToRGB565Fast
(
aData
.
mPicX
aData
.
mPicY
aData
.
mPicSize
.
width
aData
.
mPicSize
.
height
aSuggestedSize
.
width
aSuggestedSize
.
height
yuvtype
FILTER_BILINEAR
)
&
&
IsConvertYCbCrToRGB565Fast
(
aData
.
mPicX
aData
.
mPicY
aData
.
mPicSize
.
width
aData
.
mPicSize
.
height
yuvtype
)
)
{
prescale
=
false
;
}
#
else
aSuggestedFormat
=
SurfaceFormat
:
:
B8G8R8X8
;
#
endif
}
else
if
(
aSuggestedFormat
!
=
SurfaceFormat
:
:
B8G8R8X8
)
{
aSuggestedFormat
=
SurfaceFormat
:
:
B8G8R8X8
;
}
if
(
aSuggestedFormat
=
=
SurfaceFormat
:
:
B8G8R8X8
)
{
if
(
aData
.
mPicX
!
=
0
|
|
aData
.
mPicY
!
=
0
|
|
yuvtype
=
=
YV24
)
prescale
=
false
;
}
if
(
!
prescale
)
{
aSuggestedSize
=
aData
.
mPicSize
;
}
}
static
inline
void
ConvertYCbCr16to8Line
(
uint8_t
*
aDst
int
aStride
const
uint16_t
*
aSrc
int
aStride16
int
aWidth
int
aHeight
int
aDepth
)
{
uint16_t
mask
=
(
1
<
<
aDepth
)
-
1
;
for
(
int
i
=
0
;
i
<
aHeight
;
i
+
+
)
{
for
(
int
j
=
0
;
j
<
aWidth
;
j
+
+
)
{
uint16_t
val
=
(
aSrc
[
j
]
&
mask
)
>
>
(
aDepth
-
8
)
;
aDst
[
j
]
=
val
;
}
aDst
+
=
aStride
;
aSrc
+
=
aStride16
;
}
}
void
ConvertYCbCrToRGB
(
const
layers
:
:
PlanarYCbCrData
&
aData
const
SurfaceFormat
&
aDestFormat
const
IntSize
&
aDestSize
unsigned
char
*
aDestBuffer
int32_t
aStride
)
{
MOZ_ASSERT
(
(
aData
.
mCbCrSize
.
width
=
=
aData
.
mYSize
.
width
|
|
aData
.
mCbCrSize
.
width
=
=
(
aData
.
mYSize
.
width
+
1
)
>
>
1
)
&
&
(
aData
.
mCbCrSize
.
height
=
=
aData
.
mYSize
.
height
|
|
aData
.
mCbCrSize
.
height
=
=
(
aData
.
mYSize
.
height
+
1
)
>
>
1
)
)
;
UniquePtr
<
uint8_t
[
]
>
yChannel
;
UniquePtr
<
uint8_t
[
]
>
cbChannel
;
UniquePtr
<
uint8_t
[
]
>
crChannel
;
layers
:
:
PlanarYCbCrData
dstData
;
const
layers
:
:
PlanarYCbCrData
&
srcData
=
aData
.
mDepth
=
=
8
?
aData
:
dstData
;
if
(
aData
.
mDepth
!
=
8
)
{
MOZ_ASSERT
(
aData
.
mDepth
>
8
&
&
aData
.
mDepth
<
=
16
)
;
dstData
.
mPicSize
=
aData
.
mPicSize
;
dstData
.
mPicX
=
aData
.
mPicX
;
dstData
.
mPicY
=
aData
.
mPicY
;
dstData
.
mYSize
=
aData
.
mYSize
;
dstData
.
mYStride
=
(
aData
.
mYSize
.
width
+
31
)
&
~
31
;
dstData
.
mCbCrSize
=
aData
.
mCbCrSize
;
dstData
.
mCbCrStride
=
(
aData
.
mCbCrSize
.
width
+
31
)
&
~
31
;
dstData
.
mYUVColorSpace
=
aData
.
mYUVColorSpace
;
dstData
.
mDepth
=
8
;
size_t
ySize
=
GetAlignedStride
<
1
>
(
dstData
.
mYStride
aData
.
mYSize
.
height
)
;
size_t
cbcrSize
=
GetAlignedStride
<
1
>
(
dstData
.
mCbCrStride
aData
.
mCbCrSize
.
height
)
;
if
(
ySize
=
=
0
|
|
cbcrSize
=
=
0
)
{
return
;
}
yChannel
=
MakeUnique
<
uint8_t
[
]
>
(
ySize
)
;
cbChannel
=
MakeUnique
<
uint8_t
[
]
>
(
cbcrSize
)
;
crChannel
=
MakeUnique
<
uint8_t
[
]
>
(
cbcrSize
)
;
dstData
.
mYChannel
=
yChannel
.
get
(
)
;
dstData
.
mCbChannel
=
cbChannel
.
get
(
)
;
dstData
.
mCrChannel
=
crChannel
.
get
(
)
;
ConvertYCbCr16to8Line
(
dstData
.
mYChannel
dstData
.
mYStride
reinterpret_cast
<
uint16_t
*
>
(
aData
.
mYChannel
)
aData
.
mYStride
/
2
aData
.
mYSize
.
width
aData
.
mYSize
.
height
aData
.
mDepth
)
;
ConvertYCbCr16to8Line
(
dstData
.
mCbChannel
dstData
.
mCbCrStride
reinterpret_cast
<
uint16_t
*
>
(
aData
.
mCbChannel
)
aData
.
mCbCrStride
/
2
aData
.
mCbCrSize
.
width
aData
.
mCbCrSize
.
height
aData
.
mDepth
)
;
ConvertYCbCr16to8Line
(
dstData
.
mCrChannel
dstData
.
mCbCrStride
reinterpret_cast
<
uint16_t
*
>
(
aData
.
mCrChannel
)
aData
.
mCbCrStride
/
2
aData
.
mCbCrSize
.
width
aData
.
mCbCrSize
.
height
aData
.
mDepth
)
;
}
YUVType
yuvtype
=
TypeFromSize
(
srcData
.
mYSize
.
width
srcData
.
mYSize
.
height
srcData
.
mCbCrSize
.
width
srcData
.
mCbCrSize
.
height
)
;
if
(
aDestSize
!
=
srcData
.
mPicSize
)
{
#
if
defined
(
HAVE_YCBCR_TO_RGB565
)
if
(
aDestFormat
=
=
SurfaceFormat
:
:
R5G6B5_UINT16
)
{
ScaleYCbCrToRGB565
(
srcData
.
mYChannel
srcData
.
mCbChannel
srcData
.
mCrChannel
aDestBuffer
srcData
.
mPicX
srcData
.
mPicY
srcData
.
mPicSize
.
width
srcData
.
mPicSize
.
height
aDestSize
.
width
aDestSize
.
height
srcData
.
mYStride
srcData
.
mCbCrStride
aStride
yuvtype
FILTER_BILINEAR
)
;
}
else
#
endif
ScaleYCbCrToRGB32
(
srcData
.
mYChannel
srcData
.
mCbChannel
srcData
.
mCrChannel
aDestBuffer
srcData
.
mPicSize
.
width
srcData
.
mPicSize
.
height
aDestSize
.
width
aDestSize
.
height
srcData
.
mYStride
srcData
.
mCbCrStride
aStride
yuvtype
srcData
.
mYUVColorSpace
FILTER_BILINEAR
)
;
}
else
{
#
if
defined
(
HAVE_YCBCR_TO_RGB565
)
if
(
aDestFormat
=
=
SurfaceFormat
:
:
R5G6B5_UINT16
)
{
ConvertYCbCrToRGB565
(
srcData
.
mYChannel
srcData
.
mCbChannel
srcData
.
mCrChannel
aDestBuffer
srcData
.
mPicX
srcData
.
mPicY
srcData
.
mPicSize
.
width
srcData
.
mPicSize
.
height
srcData
.
mYStride
srcData
.
mCbCrStride
aStride
yuvtype
)
;
}
else
#
endif
ConvertYCbCrToRGB32
(
srcData
.
mYChannel
srcData
.
mCbChannel
srcData
.
mCrChannel
aDestBuffer
srcData
.
mPicX
srcData
.
mPicY
srcData
.
mPicSize
.
width
srcData
.
mPicSize
.
height
srcData
.
mYStride
srcData
.
mCbCrStride
aStride
yuvtype
srcData
.
mYUVColorSpace
)
;
}
}
void
ConvertYCbCrAToARGB
(
const
uint8_t
*
aSrcY
const
uint8_t
*
aSrcU
const
uint8_t
*
aSrcV
const
uint8_t
*
aSrcA
int
aSrcStrideYA
int
aSrcStrideUV
uint8_t
*
aDstARGB
int
aDstStrideARGB
int
aWidth
int
aHeight
)
{
ConvertYCbCrAToARGB32
(
aSrcY
aSrcU
aSrcV
aSrcA
aDstARGB
aWidth
aHeight
aSrcStrideYA
aSrcStrideUV
aDstStrideARGB
)
;
}
}
}
