#
include
"
VRThread
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
gfx
{
static
StaticRefPtr
<
VRListenerThreadHolder
>
sVRListenerThreadHolder
;
static
bool
sFinishedVRListenerShutDown
=
false
;
VRListenerThreadHolder
*
GetVRListenerThreadHolder
(
)
{
return
sVRListenerThreadHolder
;
}
base
:
:
Thread
*
VRListenerThread
(
)
{
return
sVRListenerThreadHolder
?
sVRListenerThreadHolder
-
>
GetThread
(
)
:
nullptr
;
}
MessageLoop
*
VRListenerThreadHolder
:
:
Loop
(
)
{
return
VRListenerThread
(
)
?
VRListenerThread
(
)
-
>
message_loop
(
)
:
nullptr
;
}
VRListenerThreadHolder
*
VRListenerThreadHolder
:
:
GetSingleton
(
)
{
return
sVRListenerThreadHolder
;
}
VRListenerThreadHolder
:
:
VRListenerThreadHolder
(
)
:
mThread
(
CreateThread
(
)
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
VRListenerThreadHolder
:
:
~
VRListenerThreadHolder
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
DestroyThread
(
mThread
)
;
}
void
VRListenerThreadHolder
:
:
DestroyThread
(
base
:
:
Thread
*
aThread
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
sVRListenerThreadHolder
"
We
shouldn
'
t
be
destroying
the
VR
listener
thread
yet
.
"
)
;
delete
aThread
;
sFinishedVRListenerShutDown
=
true
;
}
base
:
:
Thread
*
VRListenerThreadHolder
:
:
CreateThread
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
sVRListenerThreadHolder
"
The
VR
listener
thread
has
already
been
started
!
"
)
;
base
:
:
Thread
*
vrThread
=
new
base
:
:
Thread
(
"
VRListener
"
)
;
base
:
:
Thread
:
:
Options
options
;
options
.
transient_hang_timeout
=
128
;
options
.
permanent_hang_timeout
=
2048
;
if
(
!
vrThread
-
>
StartWithOptions
(
options
)
)
{
delete
vrThread
;
return
nullptr
;
}
return
vrThread
;
}
void
VRListenerThreadHolder
:
:
Start
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Should
be
on
the
main
thread
!
"
)
;
MOZ_ASSERT
(
!
sVRListenerThreadHolder
"
The
VR
listener
thread
has
already
been
started
!
"
)
;
sVRListenerThreadHolder
=
new
VRListenerThreadHolder
(
)
;
}
void
VRListenerThreadHolder
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Should
be
on
the
main
thread
!
"
)
;
MOZ_ASSERT
(
sVRListenerThreadHolder
"
The
VR
listener
thread
has
already
been
shut
down
!
"
)
;
sVRListenerThreadHolder
=
nullptr
;
SpinEventLoopUntil
(
[
&
]
(
)
{
return
sFinishedVRListenerShutDown
;
}
)
;
}
bool
VRListenerThreadHolder
:
:
IsInVRListenerThread
(
)
{
return
VRListenerThread
(
)
&
&
VRListenerThread
(
)
-
>
thread_id
(
)
=
=
PlatformThread
:
:
CurrentId
(
)
;
}
}
}
bool
NS_IsInVRListenerThread
(
)
{
return
mozilla
:
:
gfx
:
:
VRListenerThreadHolder
:
:
IsInVRListenerThread
(
)
;
}
