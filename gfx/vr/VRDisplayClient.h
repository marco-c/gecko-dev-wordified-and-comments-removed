#
ifndef
GFX_VR_DISPLAY_CLIENT_H
#
define
GFX_VR_DISPLAY_CLIENT_H
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
VRDisplayBinding
.
h
"
#
include
"
gfxVR
.
h
"
namespace
mozilla
{
namespace
dom
{
enum
class
XRReferenceSpaceType
:
uint8_t
;
class
XRSession
;
}
namespace
gfx
{
class
VRDisplayPresentation
;
class
VRManagerChild
;
class
VRDisplayClient
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VRDisplayClient
)
explicit
VRDisplayClient
(
const
VRDisplayInfo
&
aDisplayInfo
)
;
MOZ_CAN_RUN_SCRIPT
void
UpdateDisplayInfo
(
const
VRDisplayInfo
&
aDisplayInfo
)
;
void
UpdateSubmitFrameResult
(
const
VRSubmitFrameResultInfo
&
aResult
)
;
const
VRDisplayInfo
&
GetDisplayInfo
(
)
const
{
return
mDisplayInfo
;
}
virtual
const
VRHMDSensorState
&
GetSensorState
(
)
const
;
void
GetSubmitFrameResult
(
VRSubmitFrameResultInfo
&
aResult
)
;
already_AddRefed
<
VRDisplayPresentation
>
BeginPresentation
(
const
nsTArray
<
dom
:
:
VRLayer
>
&
aLayers
uint32_t
aGroup
)
;
void
PresentationCreated
(
)
;
void
PresentationDestroyed
(
)
;
void
SessionStarted
(
dom
:
:
XRSession
*
aSession
)
;
void
SessionEnded
(
dom
:
:
XRSession
*
aSession
)
;
bool
GetIsConnected
(
)
const
;
void
NotifyDisconnected
(
)
;
void
SetGroupMask
(
uint32_t
aGroupMask
)
;
bool
IsPresentationGenerationCurrent
(
)
const
;
void
MakePresentationGenerationCurrent
(
)
;
void
StartVRNavigation
(
)
;
void
StopVRNavigation
(
const
TimeDuration
&
aTimeout
)
;
bool
IsPresenting
(
)
;
bool
IsReferenceSpaceTypeSupported
(
dom
:
:
XRReferenceSpaceType
aType
)
const
;
gfx
:
:
VRAPIMode
GetXRAPIMode
(
)
const
;
void
SetXRAPIMode
(
gfx
:
:
VRAPIMode
aMode
)
;
protected
:
virtual
~
VRDisplayClient
(
)
;
MOZ_CAN_RUN_SCRIPT
void
FireEvents
(
)
;
void
FireGamepadEvents
(
)
;
MOZ_CAN_RUN_SCRIPT
void
StartFrame
(
)
;
VRDisplayInfo
mDisplayInfo
;
bool
bLastEventWasMounted
;
bool
bLastEventWasPresenting
;
int
mPresentationCount
;
uint64_t
mLastEventFrameId
;
uint32_t
mLastPresentingGeneration
;
VRControllerState
mLastEventControllerState
[
kVRControllerMaxCount
]
;
nsTArray
<
RefPtr
<
dom
:
:
XRSession
>
>
mSessions
;
private
:
void
GamepadMappingForWebVR
(
VRControllerState
&
aControllerState
)
;
VRSubmitFrameResultInfo
mSubmitFrameResult
;
gfx
:
:
VRAPIMode
mAPIMode
;
}
;
}
}
#
endif
