#
include
"
VRDisplayPresentation
.
h
"
#
include
"
mozilla
/
dom
/
DocGroup
.
h
"
#
include
"
mozilla
/
dom
/
XRWebGLLayer
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
VRDisplayClient
.
h
"
#
include
"
VRLayerChild
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
VRDisplayPresentation
:
:
VRDisplayPresentation
(
VRDisplayClient
*
aDisplayClient
const
nsTArray
<
mozilla
:
:
dom
:
:
VRLayer
>
&
aLayers
uint32_t
aGroup
)
:
mDisplayClient
(
aDisplayClient
)
mDOMLayers
(
aLayers
.
Clone
(
)
)
mGroup
(
aGroup
)
{
CreateLayers
(
)
;
}
void
VRDisplayPresentation
:
:
UpdateLayers
(
const
nsTArray
<
mozilla
:
:
dom
:
:
VRLayer
>
&
aLayers
)
{
mDOMLayers
=
aLayers
.
Clone
(
)
;
CreateLayers
(
)
;
}
void
VRDisplayPresentation
:
:
UpdateXRWebGLLayer
(
dom
:
:
XRWebGLLayer
*
aLayer
)
{
VRManagerChild
*
manager
=
VRManagerChild
:
:
Get
(
)
;
if
(
!
manager
)
{
NS_WARNING
(
"
VRManagerChild
:
:
Get
returned
null
!
"
)
;
return
;
}
dom
:
:
HTMLCanvasElement
*
canvasElement
=
aLayer
-
>
GetCanvas
(
)
;
nsCOMPtr
<
nsIEventTarget
>
target
=
canvasElement
-
>
OwnerDoc
(
)
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
;
if
(
mLayers
.
Length
(
)
=
=
0
)
{
RefPtr
<
VRLayerChild
>
vrLayer
=
static_cast
<
VRLayerChild
*
>
(
manager
-
>
CreateVRLayer
(
mDisplayClient
-
>
GetDisplayInfo
(
)
.
GetDisplayID
(
)
target
mGroup
)
)
;
mLayers
.
AppendElement
(
vrLayer
)
;
}
RefPtr
<
VRLayerChild
>
vrLayer
=
mLayers
[
0
]
;
Rect
leftBounds
(
0
.
0
0
.
0
0
.
5
1
.
0
)
;
Rect
rightBounds
(
0
.
5
0
.
0
0
.
5
1
.
0
)
;
vrLayer
-
>
Initialize
(
canvasElement
leftBounds
rightBounds
)
;
vrLayer
-
>
SetXRFramebuffer
(
aLayer
-
>
GetFramebuffer
(
)
)
;
}
uint32_t
VRDisplayPresentation
:
:
GetGroup
(
)
const
{
return
mGroup
;
}
void
VRDisplayPresentation
:
:
CreateLayers
(
)
{
VRManagerChild
*
manager
=
VRManagerChild
:
:
Get
(
)
;
if
(
!
manager
)
{
NS_WARNING
(
"
VRManagerChild
:
:
Get
returned
null
!
"
)
;
return
;
}
unsigned
int
iLayer
=
0
;
for
(
dom
:
:
VRLayer
&
layer
:
mDOMLayers
)
{
dom
:
:
HTMLCanvasElement
*
canvasElement
=
layer
.
mSource
;
if
(
!
canvasElement
)
{
continue
;
}
Rect
leftBounds
(
0
.
0
0
.
0
0
.
5
1
.
0
)
;
if
(
layer
.
mLeftBounds
.
Length
(
)
=
=
4
)
{
leftBounds
.
SetRect
(
layer
.
mLeftBounds
[
0
]
layer
.
mLeftBounds
[
1
]
layer
.
mLeftBounds
[
2
]
layer
.
mLeftBounds
[
3
]
)
;
}
else
if
(
layer
.
mLeftBounds
.
Length
(
)
!
=
0
)
{
continue
;
}
Rect
rightBounds
(
0
.
5
0
.
0
0
.
5
1
.
0
)
;
if
(
layer
.
mRightBounds
.
Length
(
)
=
=
4
)
{
rightBounds
.
SetRect
(
layer
.
mRightBounds
[
0
]
layer
.
mRightBounds
[
1
]
layer
.
mRightBounds
[
2
]
layer
.
mRightBounds
[
3
]
)
;
}
else
if
(
layer
.
mRightBounds
.
Length
(
)
!
=
0
)
{
continue
;
}
nsCOMPtr
<
nsIEventTarget
>
target
=
canvasElement
-
>
OwnerDoc
(
)
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
;
if
(
mLayers
.
Length
(
)
<
=
iLayer
)
{
RefPtr
<
VRLayerChild
>
vrLayer
=
static_cast
<
VRLayerChild
*
>
(
manager
-
>
CreateVRLayer
(
mDisplayClient
-
>
GetDisplayInfo
(
)
.
GetDisplayID
(
)
target
mGroup
)
)
;
if
(
!
vrLayer
)
{
NS_WARNING
(
"
CreateVRLayer
returned
null
!
"
)
;
continue
;
}
vrLayer
-
>
Initialize
(
canvasElement
leftBounds
rightBounds
)
;
mLayers
.
AppendElement
(
vrLayer
)
;
}
else
{
mLayers
[
iLayer
]
-
>
Initialize
(
canvasElement
leftBounds
rightBounds
)
;
}
iLayer
+
+
;
}
mLayers
.
SetLength
(
iLayer
)
;
}
void
VRDisplayPresentation
:
:
DestroyLayers
(
)
{
for
(
VRLayerChild
*
layer
:
mLayers
)
{
if
(
layer
-
>
IsIPCOpen
(
)
)
{
Unused
<
<
layer
-
>
SendDestroy
(
)
;
}
}
mLayers
.
Clear
(
)
;
}
void
VRDisplayPresentation
:
:
GetDOMLayers
(
nsTArray
<
dom
:
:
VRLayer
>
&
result
)
{
result
=
mDOMLayers
.
Clone
(
)
;
}
VRDisplayPresentation
:
:
~
VRDisplayPresentation
(
)
{
DestroyLayers
(
)
;
mDisplayClient
-
>
PresentationDestroyed
(
)
;
}
void
VRDisplayPresentation
:
:
SubmitFrame
(
)
{
for
(
VRLayerChild
*
layer
:
mLayers
)
{
layer
-
>
SubmitFrame
(
mDisplayClient
-
>
GetDisplayInfo
(
)
)
;
break
;
}
}
