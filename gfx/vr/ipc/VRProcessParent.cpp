#
include
"
VRProcessParent
.
h
"
#
include
"
VRGPUChild
.
h
"
#
include
"
VRProcessManager
.
h
"
#
include
"
mozilla
/
gfx
/
GPUProcessManager
.
h
"
#
include
"
mozilla
/
gfx
/
GPUChild
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolTypes
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
VRChild
.
h
"
#
include
"
VRManager
.
h
"
#
include
"
VRThread
.
h
"
#
include
"
gfxVRPuppet
.
h
"
#
include
"
nsAppRunner
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
using
std
:
:
string
;
using
std
:
:
vector
;
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
{
namespace
gfx
{
VRProcessParent
:
:
VRProcessParent
(
Listener
*
aListener
)
:
GeckoChildProcessHost
(
GeckoProcessType_VR
)
mTaskFactory
(
this
)
mListener
(
aListener
)
mChannelClosed
(
false
)
mShutdownRequested
(
false
)
{
MOZ_COUNT_CTOR
(
VRProcessParent
)
;
}
VRProcessParent
:
:
~
VRProcessParent
(
)
{
{
MonitorAutoLock
lock
(
mMonitor
)
;
mTaskFactory
.
RevokeAll
(
)
;
}
MOZ_COUNT_DTOR
(
VRProcessParent
)
;
}
bool
VRProcessParent
:
:
Launch
(
)
{
mLaunchThread
=
NS_GetCurrentThread
(
)
;
std
:
:
vector
<
std
:
:
string
>
extraArgs
;
nsCString
parentBuildID
(
mozilla
:
:
PlatformBuildID
(
)
)
;
extraArgs
.
push_back
(
"
-
parentBuildID
"
)
;
extraArgs
.
push_back
(
parentBuildID
.
get
(
)
)
;
if
(
!
GeckoChildProcessHost
:
:
AsyncLaunch
(
extraArgs
)
)
{
return
false
;
}
return
true
;
}
void
VRProcessParent
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
!
mShutdownRequested
)
;
mListener
=
nullptr
;
GPUChild
*
gpuChild
=
GPUProcessManager
:
:
Get
(
)
-
>
GetGPUChild
(
)
;
MOZ_ASSERT
(
gpuChild
)
;
gpuChild
-
>
SendShutdownVR
(
)
;
if
(
mVRChild
)
{
if
(
!
mChannelClosed
)
{
mVRChild
-
>
Close
(
)
;
}
mShutdownRequested
=
true
;
#
ifndef
NS_FREE_PERMANENT_DATA
KillHard
(
"
NormalShutdown
"
)
;
#
endif
return
;
}
DestroyProcess
(
)
;
}
static
void
DelayedDeleteSubprocess
(
GeckoChildProcessHost
*
aSubprocess
)
{
XRE_GetIOMessageLoop
(
)
-
>
PostTask
(
mozilla
:
:
MakeAndAddRef
<
DeleteTask
<
GeckoChildProcessHost
>
>
(
aSubprocess
)
)
;
}
void
VRProcessParent
:
:
DestroyProcess
(
)
{
if
(
mLaunchThread
)
{
mLaunchThread
-
>
Dispatch
(
NewRunnableFunction
(
"
DestroyProcessRunnable
"
DelayedDeleteSubprocess
this
)
)
;
}
}
void
VRProcessParent
:
:
InitAfterConnect
(
bool
aSucceeded
)
{
if
(
aSucceeded
)
{
mVRChild
=
MakeUnique
<
VRChild
>
(
this
)
;
DebugOnly
<
bool
>
rv
=
mVRChild
-
>
Open
(
GetChannel
(
)
base
:
:
GetProcId
(
GetChildProcessHandle
(
)
)
)
;
MOZ_ASSERT
(
rv
)
;
mVRChild
-
>
Init
(
)
;
if
(
mListener
)
{
mListener
-
>
OnProcessLaunchComplete
(
this
)
;
}
GPUChild
*
gpuChild
=
GPUProcessManager
:
:
Get
(
)
-
>
GetGPUChild
(
)
;
MOZ_ASSERT
(
gpuChild
)
;
Endpoint
<
PVRGPUChild
>
vrGPUBridge
;
VRProcessManager
*
vpm
=
VRProcessManager
:
:
Get
(
)
;
DebugOnly
<
bool
>
opened
=
vpm
-
>
CreateGPUBridges
(
gpuChild
-
>
OtherPid
(
)
&
vrGPUBridge
)
;
MOZ_ASSERT
(
opened
)
;
Unused
<
<
gpuChild
-
>
SendInitVR
(
std
:
:
move
(
vrGPUBridge
)
)
;
}
}
void
VRProcessParent
:
:
KillHard
(
const
char
*
aReason
)
{
ProcessHandle
handle
=
GetChildProcessHandle
(
)
;
if
(
!
base
:
:
KillProcess
(
handle
base
:
:
PROCESS_END_KILLED_BY_USER
false
)
)
{
NS_WARNING
(
"
failed
to
kill
subprocess
!
"
)
;
}
SetAlreadyDead
(
)
;
}
void
VRProcessParent
:
:
OnChannelError
(
)
{
MOZ_ASSERT
(
false
"
VR
process
channel
error
.
"
)
;
}
void
VRProcessParent
:
:
OnChannelConnected
(
int32_t
peer_pid
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
GeckoChildProcessHost
:
:
OnChannelConnected
(
peer_pid
)
;
RefPtr
<
Runnable
>
runnable
;
{
MonitorAutoLock
lock
(
mMonitor
)
;
runnable
=
mTaskFactory
.
NewRunnableMethod
(
&
VRProcessParent
:
:
OnChannelConnectedTask
)
;
}
NS_DispatchToMainThread
(
runnable
)
;
}
void
VRProcessParent
:
:
OnChannelConnectedTask
(
)
{
InitAfterConnect
(
true
)
;
}
void
VRProcessParent
:
:
OnChannelErrorTask
(
)
{
MOZ_ASSERT
(
false
"
VR
process
channel
error
.
"
)
;
}
void
VRProcessParent
:
:
OnChannelClosed
(
)
{
mChannelClosed
=
true
;
if
(
!
mShutdownRequested
&
&
mListener
)
{
mListener
-
>
OnProcessUnexpectedShutdown
(
this
)
;
}
else
{
DestroyProcess
(
)
;
}
VRChild
:
:
Destroy
(
std
:
:
move
(
mVRChild
)
)
;
MOZ_ASSERT
(
!
mVRChild
)
;
}
base
:
:
ProcessId
VRProcessParent
:
:
OtherPid
(
)
{
return
mVRChild
-
>
OtherPid
(
)
;
}
bool
VRProcessParent
:
:
IsConnected
(
)
const
{
return
!
!
mVRChild
;
}
}
}
