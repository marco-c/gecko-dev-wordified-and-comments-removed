#
include
"
VRManagerChild
.
h
"
#
include
"
VRManagerParent
.
h
"
#
include
"
VRThread
.
h
"
#
include
"
VRDisplayClient
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
dom
/
Navigator
.
h
"
#
include
"
mozilla
/
dom
/
VREventObserver
.
h
"
#
include
"
mozilla
/
dom
/
WindowBinding
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
dom
/
GamepadManager
.
h
"
#
include
"
mozilla
/
layers
/
SyncObject
.
h
"
using
namespace
mozilla
:
:
dom
;
namespace
{
const
nsTArray
<
RefPtr
<
VRManagerEventObserver
>
>
:
:
index_type
kNoIndex
=
nsTArray
<
RefPtr
<
VRManagerEventObserver
>
>
:
:
NoIndex
;
}
namespace
mozilla
{
namespace
gfx
{
static
StaticRefPtr
<
VRManagerChild
>
sVRManagerChildSingleton
;
static
StaticRefPtr
<
VRManagerParent
>
sVRManagerParentSingleton
;
void
ReleaseVRManagerParentSingleton
(
)
{
sVRManagerParentSingleton
=
nullptr
;
}
VRManagerChild
:
:
VRManagerChild
(
)
:
mRuntimeCapabilities
(
VRDisplayCapabilityFlags
:
:
Cap_None
)
mMessageLoop
(
MessageLoop
:
:
current
(
)
)
mFrameRequestCallbackCounter
(
0
)
mWaitingForEnumeration
(
false
)
mBackend
(
layers
:
:
LayersBackend
:
:
LAYERS_NONE
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mStartTimeStamp
=
TimeStamp
:
:
Now
(
)
;
AddRef
(
)
;
}
VRManagerChild
:
:
~
VRManagerChild
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
void
VRManagerChild
:
:
IdentifyTextureHost
(
const
TextureFactoryIdentifier
&
aIdentifier
)
{
if
(
sVRManagerChildSingleton
)
{
sVRManagerChildSingleton
-
>
mBackend
=
aIdentifier
.
mParentBackend
;
sVRManagerChildSingleton
-
>
mSyncObject
=
layers
:
:
SyncObjectClient
:
:
CreateSyncObjectClient
(
aIdentifier
.
mSyncHandle
)
;
}
}
layers
:
:
LayersBackend
VRManagerChild
:
:
GetBackendType
(
)
const
{
return
mBackend
;
}
VRManagerChild
*
VRManagerChild
:
:
Get
(
)
{
MOZ_ASSERT
(
sVRManagerChildSingleton
)
;
return
sVRManagerChildSingleton
;
}
bool
VRManagerChild
:
:
IsCreated
(
)
{
return
!
!
sVRManagerChildSingleton
;
}
bool
VRManagerChild
:
:
IsPresenting
(
)
{
if
(
!
VRManagerChild
:
:
IsCreated
(
)
)
{
return
false
;
}
nsTArray
<
RefPtr
<
VRDisplayClient
>
>
displays
;
sVRManagerChildSingleton
-
>
GetVRDisplays
(
displays
)
;
bool
result
=
false
;
for
(
auto
&
display
:
displays
)
{
result
|
=
display
-
>
IsPresenting
(
)
;
}
return
result
;
}
bool
VRManagerChild
:
:
InitForContent
(
Endpoint
<
PVRManagerChild
>
&
&
aEndpoint
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
VRManagerChild
>
child
(
new
VRManagerChild
(
)
)
;
if
(
!
aEndpoint
.
Bind
(
child
)
)
{
return
false
;
}
sVRManagerChildSingleton
=
child
;
return
true
;
}
void
VRManagerChild
:
:
InitSameProcess
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
sVRManagerChildSingleton
)
;
sVRManagerChildSingleton
=
new
VRManagerChild
(
)
;
sVRManagerParentSingleton
=
VRManagerParent
:
:
CreateSameProcess
(
)
;
sVRManagerChildSingleton
-
>
Open
(
sVRManagerParentSingleton
-
>
GetIPCChannel
(
)
CompositorThreadHolder
:
:
Loop
(
)
mozilla
:
:
ipc
:
:
ChildSide
)
;
}
void
VRManagerChild
:
:
InitWithGPUProcess
(
Endpoint
<
PVRManagerChild
>
&
&
aEndpoint
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
sVRManagerChildSingleton
)
;
sVRManagerChildSingleton
=
new
VRManagerChild
(
)
;
if
(
!
aEndpoint
.
Bind
(
sVRManagerChildSingleton
)
)
{
MOZ_CRASH
(
"
Couldn
'
t
Open
(
)
Compositor
channel
.
"
)
;
}
}
void
VRManagerChild
:
:
ShutDown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
sVRManagerChildSingleton
)
{
return
;
}
sVRManagerChildSingleton
-
>
Close
(
)
;
sVRManagerChildSingleton
=
nullptr
;
}
void
VRManagerChild
:
:
ActorDealloc
(
)
{
Release
(
)
;
}
void
VRManagerChild
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
if
(
sVRManagerChildSingleton
=
=
this
)
{
sVRManagerChildSingleton
=
nullptr
;
}
}
PVRLayerChild
*
VRManagerChild
:
:
AllocPVRLayerChild
(
const
uint32_t
&
aDisplayID
const
uint32_t
&
aGroup
)
{
return
VRLayerChild
:
:
CreateIPDLActor
(
)
;
}
bool
VRManagerChild
:
:
DeallocPVRLayerChild
(
PVRLayerChild
*
actor
)
{
return
VRLayerChild
:
:
DestroyIPDLActor
(
actor
)
;
}
void
VRManagerChild
:
:
UpdateDisplayInfo
(
const
VRDisplayInfo
&
aDisplayInfo
)
{
nsTArray
<
uint32_t
>
disconnectedDisplays
;
nsTArray
<
uint32_t
>
connectedDisplays
;
const
nsTArray
<
RefPtr
<
VRDisplayClient
>
>
prevDisplays
(
mDisplays
)
;
for
(
auto
&
display
:
prevDisplays
)
{
bool
found
=
false
;
if
(
aDisplayInfo
.
GetDisplayID
(
)
!
=
0
)
{
if
(
display
-
>
GetDisplayInfo
(
)
.
GetDisplayID
(
)
=
=
aDisplayInfo
.
GetDisplayID
(
)
)
{
found
=
true
;
break
;
}
}
if
(
!
found
)
{
if
(
display
-
>
IsPresentationGenerationCurrent
(
)
)
{
NotifyPresentationGenerationChangedInternal
(
display
-
>
GetDisplayInfo
(
)
.
GetDisplayID
(
)
)
;
RefPtr
<
VRManagerChild
>
vm
=
VRManagerChild
:
:
Get
(
)
;
vm
-
>
FireDOMVRDisplayPresentChangeEvent
(
display
-
>
GetDisplayInfo
(
)
.
GetDisplayID
(
)
)
;
}
display
-
>
NotifyDisconnected
(
)
;
disconnectedDisplays
.
AppendElement
(
display
-
>
GetDisplayInfo
(
)
.
GetDisplayID
(
)
)
;
}
}
nsTArray
<
RefPtr
<
VRDisplayClient
>
>
displays
;
if
(
aDisplayInfo
.
GetDisplayID
(
)
!
=
0
)
{
bool
isNewDisplay
=
true
;
for
(
auto
&
display
:
prevDisplays
)
{
const
VRDisplayInfo
&
prevInfo
=
display
-
>
GetDisplayInfo
(
)
;
if
(
prevInfo
.
GetDisplayID
(
)
=
=
aDisplayInfo
.
GetDisplayID
(
)
)
{
if
(
aDisplayInfo
.
GetIsConnected
(
)
&
&
!
prevInfo
.
GetIsConnected
(
)
)
{
connectedDisplays
.
AppendElement
(
aDisplayInfo
.
GetDisplayID
(
)
)
;
}
if
(
!
aDisplayInfo
.
GetIsConnected
(
)
&
&
prevInfo
.
GetIsConnected
(
)
)
{
disconnectedDisplays
.
AppendElement
(
aDisplayInfo
.
GetDisplayID
(
)
)
;
}
MOZ_KnownLive
(
display
)
-
>
UpdateDisplayInfo
(
aDisplayInfo
)
;
displays
.
AppendElement
(
display
)
;
isNewDisplay
=
false
;
break
;
}
}
if
(
isNewDisplay
)
{
displays
.
AppendElement
(
new
VRDisplayClient
(
aDisplayInfo
)
)
;
connectedDisplays
.
AppendElement
(
aDisplayInfo
.
GetDisplayID
(
)
)
;
}
}
mDisplays
=
displays
;
for
(
uint32_t
displayID
:
disconnectedDisplays
)
{
FireDOMVRDisplayDisconnectEvent
(
displayID
)
;
}
for
(
uint32_t
displayID
:
connectedDisplays
)
{
FireDOMVRDisplayConnectEvent
(
displayID
)
;
}
}
bool
VRManagerChild
:
:
RuntimeSupportsVR
(
)
const
{
return
bool
(
mRuntimeCapabilities
&
VRDisplayCapabilityFlags
:
:
Cap_ImmersiveVR
)
;
}
bool
VRManagerChild
:
:
RuntimeSupportsAR
(
)
const
{
return
bool
(
mRuntimeCapabilities
&
VRDisplayCapabilityFlags
:
:
Cap_ImmersiveAR
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
VRManagerChild
:
:
RecvUpdateRuntimeCapabilities
(
const
VRDisplayCapabilityFlags
&
aCapabilities
)
{
mRuntimeCapabilities
=
aCapabilities
;
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
<
>
(
"
gfx
:
:
VRManagerChild
:
:
NotifyRuntimeCapabilitiesUpdatedInternal
"
this
&
VRManagerChild
:
:
NotifyRuntimeCapabilitiesUpdatedInternal
)
)
;
return
IPC_OK
(
)
;
}
void
VRManagerChild
:
:
NotifyRuntimeCapabilitiesUpdatedInternal
(
)
{
nsTArray
<
RefPtr
<
VRManagerEventObserver
>
>
listeners
;
listeners
=
mListeners
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
NotifyDetectRuntimesCompleted
(
)
;
}
}
mozilla
:
:
ipc
:
:
IPCResult
VRManagerChild
:
:
RecvUpdateDisplayInfo
(
const
VRDisplayInfo
&
aDisplayInfo
)
{
UpdateDisplayInfo
(
aDisplayInfo
)
;
for
(
auto
&
windowId
:
mNavigatorCallbacks
)
{
nsGlobalWindowInner
*
window
=
nsGlobalWindowInner
:
:
GetInnerWindowWithId
(
windowId
)
;
if
(
!
window
)
{
continue
;
}
dom
:
:
Navigator
*
nav
=
window
-
>
Navigator
(
)
;
if
(
!
nav
)
{
continue
;
}
nav
-
>
NotifyVRDisplaysUpdated
(
)
;
}
mNavigatorCallbacks
.
Clear
(
)
;
if
(
mWaitingForEnumeration
)
{
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
<
>
(
"
gfx
:
:
VRManagerChild
:
:
NotifyEnumerationCompletedInternal
"
this
&
VRManagerChild
:
:
NotifyEnumerationCompletedInternal
)
)
;
mWaitingForEnumeration
=
false
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
VRManagerChild
:
:
RecvNotifyPuppetCommandBufferCompleted
(
bool
aSuccess
)
{
RefPtr
<
dom
:
:
Promise
>
promise
=
mRunPuppetPromise
;
mRunPuppetPromise
=
nullptr
;
if
(
aSuccess
)
{
promise
-
>
MaybeResolve
(
JS
:
:
UndefinedHandleValue
)
;
}
else
{
promise
-
>
MaybeRejectWithUndefined
(
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
VRManagerChild
:
:
RecvNotifyPuppetResetComplete
(
)
{
nsTArray
<
RefPtr
<
dom
:
:
Promise
>
>
promises
;
promises
.
AppendElements
(
mResetPuppetPromises
)
;
mResetPuppetPromises
.
Clear
(
)
;
for
(
const
auto
&
promise
:
promises
)
{
promise
-
>
MaybeResolve
(
JS
:
:
UndefinedHandleValue
)
;
}
return
IPC_OK
(
)
;
}
void
VRManagerChild
:
:
RunPuppet
(
const
nsTArray
<
uint64_t
>
&
aBuffer
dom
:
:
Promise
*
aPromise
ErrorResult
&
aRv
)
{
if
(
mRunPuppetPromise
)
{
aRv
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
;
}
if
(
!
SendRunPuppet
(
aBuffer
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
mRunPuppetPromise
=
aPromise
;
}
void
VRManagerChild
:
:
ResetPuppet
(
dom
:
:
Promise
*
aPromise
ErrorResult
&
aRv
)
{
if
(
!
SendResetPuppet
(
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
mResetPuppetPromises
.
AppendElement
(
aPromise
)
;
}
void
VRManagerChild
:
:
GetVRDisplays
(
nsTArray
<
RefPtr
<
VRDisplayClient
>
>
&
aDisplays
)
{
aDisplays
=
mDisplays
;
}
bool
VRManagerChild
:
:
RefreshVRDisplaysWithCallback
(
uint64_t
aWindowId
)
{
bool
success
=
SendRefreshDisplays
(
)
;
if
(
success
)
{
mNavigatorCallbacks
.
AppendElement
(
aWindowId
)
;
}
return
success
;
}
bool
VRManagerChild
:
:
EnumerateVRDisplays
(
)
{
bool
success
=
SendRefreshDisplays
(
)
;
if
(
success
)
{
mWaitingForEnumeration
=
true
;
}
return
success
;
}
void
VRManagerChild
:
:
DetectRuntimes
(
)
{
Unused
<
<
SendDetectRuntimes
(
)
;
}
PVRLayerChild
*
VRManagerChild
:
:
CreateVRLayer
(
uint32_t
aDisplayID
nsIEventTarget
*
aTarget
uint32_t
aGroup
)
{
PVRLayerChild
*
vrLayerChild
=
AllocPVRLayerChild
(
aDisplayID
aGroup
)
;
if
(
aTarget
)
{
SetEventTargetForActor
(
vrLayerChild
aTarget
)
;
MOZ_ASSERT
(
vrLayerChild
-
>
GetActorEventTarget
(
)
)
;
}
return
SendPVRLayerConstructor
(
vrLayerChild
aDisplayID
aGroup
)
;
}
nsresult
VRManagerChild
:
:
ScheduleFrameRequestCallback
(
mozilla
:
:
dom
:
:
FrameRequestCallback
&
aCallback
int32_t
*
aHandle
)
{
if
(
mFrameRequestCallbackCounter
=
=
INT32_MAX
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
int32_t
newHandle
=
+
+
mFrameRequestCallbackCounter
;
DebugOnly
<
FrameRequest
*
>
request
=
mFrameRequestCallbacks
.
AppendElement
(
FrameRequest
(
aCallback
newHandle
)
)
;
NS_ASSERTION
(
request
"
This
is
supposed
to
be
infallible
!
"
)
;
*
aHandle
=
newHandle
;
return
NS_OK
;
}
void
VRManagerChild
:
:
CancelFrameRequestCallback
(
int32_t
aHandle
)
{
mFrameRequestCallbacks
.
RemoveElementSorted
(
aHandle
)
;
}
void
VRManagerChild
:
:
RunFrameRequestCallbacks
(
)
{
AUTO_PROFILER_TRACING_MARKER
(
"
VR
"
"
RunFrameRequestCallbacks
"
GRAPHICS
)
;
TimeStamp
nowTime
=
TimeStamp
:
:
Now
(
)
;
mozilla
:
:
TimeDuration
duration
=
nowTime
-
mStartTimeStamp
;
DOMHighResTimeStamp
timeStamp
=
duration
.
ToMilliseconds
(
)
;
nsTArray
<
FrameRequest
>
callbacks
;
callbacks
.
AppendElements
(
mFrameRequestCallbacks
)
;
mFrameRequestCallbacks
.
Clear
(
)
;
for
(
auto
&
callback
:
callbacks
)
{
MOZ_KnownLive
(
callback
.
mCallback
)
-
>
Call
(
timeStamp
)
;
}
}
void
VRManagerChild
:
:
NotifyPresentationGenerationChanged
(
uint32_t
aDisplayID
)
{
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
<
uint32_t
>
(
"
gfx
:
:
VRManagerChild
:
:
NotifyPresentationGenerationChangedInternal
"
this
&
VRManagerChild
:
:
NotifyPresentationGenerationChangedInternal
aDisplayID
)
)
;
}
void
VRManagerChild
:
:
FireDOMVRDisplayMountedEvent
(
uint32_t
aDisplayID
)
{
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
<
uint32_t
>
(
"
gfx
:
:
VRManagerChild
:
:
FireDOMVRDisplayMountedEventInternal
"
this
&
VRManagerChild
:
:
FireDOMVRDisplayMountedEventInternal
aDisplayID
)
)
;
}
void
VRManagerChild
:
:
FireDOMVRDisplayUnmountedEvent
(
uint32_t
aDisplayID
)
{
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
<
uint32_t
>
(
"
gfx
:
:
VRManagerChild
:
:
FireDOMVRDisplayUnmountedEventInternal
"
this
&
VRManagerChild
:
:
FireDOMVRDisplayUnmountedEventInternal
aDisplayID
)
)
;
}
void
VRManagerChild
:
:
FireDOMVRDisplayConnectEvent
(
uint32_t
aDisplayID
)
{
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
<
uint32_t
>
(
"
gfx
:
:
VRManagerChild
:
:
FireDOMVRDisplayConnectEventInternal
"
this
&
VRManagerChild
:
:
FireDOMVRDisplayConnectEventInternal
aDisplayID
)
)
;
}
void
VRManagerChild
:
:
FireDOMVRDisplayDisconnectEvent
(
uint32_t
aDisplayID
)
{
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
<
uint32_t
>
(
"
gfx
:
:
VRManagerChild
:
:
FireDOMVRDisplayDisconnectEventInternal
"
this
&
VRManagerChild
:
:
FireDOMVRDisplayDisconnectEventInternal
aDisplayID
)
)
;
}
void
VRManagerChild
:
:
FireDOMVRDisplayPresentChangeEvent
(
uint32_t
aDisplayID
)
{
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
<
uint32_t
>
(
"
gfx
:
:
VRManagerChild
:
:
FireDOMVRDisplayPresentChangeEventInternal
"
this
&
VRManagerChild
:
:
FireDOMVRDisplayPresentChangeEventInternal
aDisplayID
)
)
;
}
void
VRManagerChild
:
:
FireDOMVRDisplayMountedEventInternal
(
uint32_t
aDisplayID
)
{
nsTArray
<
RefPtr
<
VRManagerEventObserver
>
>
listeners
(
mListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
NotifyVRDisplayMounted
(
aDisplayID
)
;
}
}
void
VRManagerChild
:
:
FireDOMVRDisplayUnmountedEventInternal
(
uint32_t
aDisplayID
)
{
nsTArray
<
RefPtr
<
VRManagerEventObserver
>
>
listeners
(
mListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
NotifyVRDisplayUnmounted
(
aDisplayID
)
;
}
}
void
VRManagerChild
:
:
FireDOMVRDisplayConnectEventInternal
(
uint32_t
aDisplayID
)
{
nsTArray
<
RefPtr
<
VRManagerEventObserver
>
>
listeners
(
mListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
NotifyVRDisplayConnect
(
aDisplayID
)
;
}
}
void
VRManagerChild
:
:
FireDOMVRDisplayDisconnectEventInternal
(
uint32_t
aDisplayID
)
{
nsTArray
<
RefPtr
<
VRManagerEventObserver
>
>
listeners
(
mListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
NotifyVRDisplayDisconnect
(
aDisplayID
)
;
}
}
void
VRManagerChild
:
:
FireDOMVRDisplayPresentChangeEventInternal
(
uint32_t
aDisplayID
)
{
const
nsTArray
<
RefPtr
<
VRManagerEventObserver
>
>
listeners
(
mListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
MOZ_KnownLive
(
listener
)
-
>
NotifyVRDisplayPresentChange
(
aDisplayID
)
;
}
}
void
VRManagerChild
:
:
FireDOMVRDisplayConnectEventsForLoadInternal
(
uint32_t
aDisplayID
VRManagerEventObserver
*
aObserver
)
{
aObserver
-
>
NotifyVRDisplayConnect
(
aDisplayID
)
;
}
void
VRManagerChild
:
:
NotifyPresentationGenerationChangedInternal
(
uint32_t
aDisplayID
)
{
nsTArray
<
RefPtr
<
VRManagerEventObserver
>
>
listeners
(
mListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
NotifyPresentationGenerationChanged
(
aDisplayID
)
;
}
}
void
VRManagerChild
:
:
NotifyEnumerationCompletedInternal
(
)
{
nsTArray
<
RefPtr
<
VRManagerEventObserver
>
>
listeners
;
listeners
=
mListeners
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
NotifyEnumerationCompleted
(
)
;
}
}
void
VRManagerChild
:
:
FireDOMVRDisplayConnectEventsForLoad
(
VRManagerEventObserver
*
aObserver
)
{
nsTArray
<
RefPtr
<
VRDisplayClient
>
>
displays
;
displays
=
mDisplays
;
for
(
auto
&
display
:
displays
)
{
const
VRDisplayInfo
&
info
=
display
-
>
GetDisplayInfo
(
)
;
if
(
info
.
GetIsConnected
(
)
)
{
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
<
uint32_t
RefPtr
<
VRManagerEventObserver
>
>
(
"
gfx
:
:
VRManagerChild
:
:
FireDOMVRDisplayConnectEventsForLoadInternal
"
this
&
VRManagerChild
:
:
FireDOMVRDisplayConnectEventsForLoadInternal
info
.
GetDisplayID
(
)
aObserver
)
)
;
}
}
}
void
VRManagerChild
:
:
AddListener
(
VRManagerEventObserver
*
aObserver
)
{
MOZ_ASSERT
(
aObserver
)
;
if
(
mListeners
.
IndexOf
(
aObserver
)
!
=
kNoIndex
)
{
return
;
}
mListeners
.
AppendElement
(
aObserver
)
;
if
(
mListeners
.
Length
(
)
=
=
1
)
{
Unused
<
<
SendSetHaveEventListener
(
true
)
;
}
}
void
VRManagerChild
:
:
RemoveListener
(
VRManagerEventObserver
*
aObserver
)
{
MOZ_ASSERT
(
aObserver
)
;
mListeners
.
RemoveElement
(
aObserver
)
;
if
(
mListeners
.
IsEmpty
(
)
)
{
Unused
<
<
SendSetHaveEventListener
(
false
)
;
}
}
void
VRManagerChild
:
:
StartActivity
(
)
{
Unused
<
<
SendStartActivity
(
)
;
}
void
VRManagerChild
:
:
StopActivity
(
)
{
for
(
auto
&
listener
:
mListeners
)
{
if
(
!
listener
-
>
GetStopActivityStatus
(
)
)
{
return
;
}
}
Unused
<
<
SendStopActivity
(
)
;
}
void
VRManagerChild
:
:
HandleFatalError
(
const
char
*
aMsg
)
const
{
dom
:
:
ContentChild
:
:
FatalErrorIfNotUsingGPUProcess
(
aMsg
OtherPid
(
)
)
;
}
void
VRManagerChild
:
:
AddPromise
(
const
uint32_t
&
aID
dom
:
:
Promise
*
aPromise
)
{
MOZ_ASSERT
(
!
mGamepadPromiseList
.
Get
(
aID
nullptr
)
)
;
mGamepadPromiseList
.
Put
(
aID
RefPtr
{
aPromise
}
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
VRManagerChild
:
:
RecvReplyGamepadVibrateHaptic
(
const
uint32_t
&
aPromiseID
)
{
MOZ_ASSERT
(
XRE_IsContentProcess
(
)
|
|
IsSameProcess
(
)
)
;
RefPtr
<
dom
:
:
Promise
>
p
;
if
(
!
mGamepadPromiseList
.
Get
(
aPromiseID
getter_AddRefs
(
p
)
)
)
{
MOZ_CRASH
(
"
We
should
always
have
a
promise
.
"
)
;
}
p
-
>
MaybeResolve
(
true
)
;
mGamepadPromiseList
.
Remove
(
aPromiseID
)
;
return
IPC_OK
(
)
;
}
}
}
