#
include
"
VRLayerParent
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
VRDisplayHost
.
h
"
namespace
mozilla
{
using
namespace
layers
;
namespace
gfx
{
VRLayerParent
:
:
VRLayerParent
(
uint32_t
aVRDisplayID
const
uint32_t
aGroup
)
:
mIPCOpen
(
true
)
mVRDisplayID
(
aVRDisplayID
)
mGroup
(
aGroup
)
{
}
VRLayerParent
:
:
~
VRLayerParent
(
)
{
MOZ_COUNT_DTOR
(
VRLayerParent
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
VRLayerParent
:
:
RecvDestroy
(
)
{
Destroy
(
)
;
return
IPC_OK
(
)
;
}
void
VRLayerParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mIPCOpen
=
false
;
}
void
VRLayerParent
:
:
Destroy
(
)
{
if
(
mVRDisplayID
)
{
VRManager
*
vm
=
VRManager
:
:
Get
(
)
;
RefPtr
<
gfx
:
:
VRDisplayHost
>
display
=
vm
-
>
GetDisplay
(
mVRDisplayID
)
;
if
(
display
)
{
display
-
>
RemoveLayer
(
this
)
;
}
mVRDisplayID
=
0
;
}
if
(
mIPCOpen
)
{
Unused
<
<
PVRLayerParent
:
:
Send__delete__
(
this
)
;
}
}
mozilla
:
:
ipc
:
:
IPCResult
VRLayerParent
:
:
RecvSubmitFrame
(
const
layers
:
:
SurfaceDescriptor
&
aTexture
const
uint64_t
&
aFrameId
const
gfx
:
:
Rect
&
aLeftEyeRect
const
gfx
:
:
Rect
&
aRightEyeRect
)
{
if
(
mVRDisplayID
)
{
VRManager
*
vm
=
VRManager
:
:
Get
(
)
;
RefPtr
<
VRDisplayHost
>
display
=
vm
-
>
GetDisplay
(
mVRDisplayID
)
;
if
(
display
)
{
SubmitFrame
(
display
aTexture
aFrameId
aLeftEyeRect
aRightEyeRect
)
;
}
}
return
IPC_OK
(
)
;
}
void
VRLayerParent
:
:
SubmitFrame
(
VRDisplayHost
*
aDisplay
const
layers
:
:
SurfaceDescriptor
&
aTexture
uint64_t
aFrameId
const
gfx
:
:
Rect
&
aLeftEyeRect
const
gfx
:
:
Rect
&
aRightEyeRect
)
{
aDisplay
-
>
SubmitFrame
(
this
aTexture
aFrameId
aLeftEyeRect
aRightEyeRect
)
;
}
}
}
