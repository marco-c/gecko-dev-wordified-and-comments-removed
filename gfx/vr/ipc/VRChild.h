#
ifndef
GFX_VR_CHILD_H
#
define
GFX_VR_CHILD_H
#
include
"
mozilla
/
gfx
/
PVRChild
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVarReceiver
.
h
"
#
include
"
mozilla
/
VsyncDispatcher
.
h
"
#
include
"
gfxVR
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
CrashReporterHost
;
}
namespace
gfx
{
class
VRProcessParent
;
class
VRChild
;
class
VRChild
final
:
public
PVRChild
public
gfxVarReceiver
{
friend
class
PVRChild
;
public
:
explicit
VRChild
(
VRProcessParent
*
aHost
)
;
~
VRChild
(
)
=
default
;
static
void
Destroy
(
UniquePtr
<
VRChild
>
&
&
aChild
)
;
void
Init
(
)
;
bool
EnsureVRReady
(
)
;
virtual
void
OnVarChanged
(
const
GfxVarUpdate
&
aVar
)
override
;
protected
:
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOpenVRControllerActionPathToParent
(
const
nsCString
&
aPath
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOpenVRControllerManifestPathToParent
(
const
OpenVRControllerType
&
aType
const
nsCString
&
aPath
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitComplete
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitCrashReporter
(
Shmem
&
&
shmem
const
NativeThreadId
&
aThreadId
)
;
private
:
VRProcessParent
*
mHost
;
UniquePtr
<
ipc
:
:
CrashReporterHost
>
mCrashReporter
;
bool
mVRReady
;
}
;
}
}
#
endif
