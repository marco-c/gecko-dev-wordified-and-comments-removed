#
include
"
VRLayerChild
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
GLScreenBuffer
.
h
"
#
include
"
.
.
/
.
.
/
.
.
/
dom
/
canvas
/
ClientWebGLContext
.
h
"
#
include
"
mozilla
/
layers
/
TextureClientSharedSurface
.
h
"
#
include
"
SharedSurface
.
h
"
#
include
"
SharedSurfaceGL
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
nsICanvasRenderingContextInternal
.
h
"
#
include
"
mozilla
/
dom
/
HTMLCanvasElement
.
h
"
#
include
"
mozilla
/
layers
/
SyncObject
.
h
"
namespace
mozilla
:
:
gfx
{
VRLayerChild
:
:
VRLayerChild
(
)
:
mCanvasElement
(
nullptr
)
mIPCOpen
(
false
)
mLastSubmittedFrameId
(
0
)
{
MOZ_COUNT_CTOR
(
VRLayerChild
)
;
}
VRLayerChild
:
:
~
VRLayerChild
(
)
{
ClearSurfaces
(
)
;
MOZ_COUNT_DTOR
(
VRLayerChild
)
;
}
void
VRLayerChild
:
:
Initialize
(
dom
:
:
HTMLCanvasElement
*
aCanvasElement
const
gfx
:
:
Rect
&
aLeftEyeRect
const
gfx
:
:
Rect
&
aRightEyeRect
)
{
MOZ_ASSERT
(
aCanvasElement
)
;
mLeftEyeRect
=
aLeftEyeRect
;
mRightEyeRect
=
aRightEyeRect
;
mCanvasElement
=
aCanvasElement
;
}
void
VRLayerChild
:
:
SubmitFrame
(
const
VRDisplayInfo
&
aDisplayInfo
)
{
uint64_t
frameId
=
aDisplayInfo
.
GetFrameId
(
)
;
if
(
!
mCanvasElement
|
|
frameId
=
=
mLastSubmittedFrameId
)
{
return
;
}
const
auto
&
webgl
=
mCanvasElement
-
>
GetWebGLContext
(
)
;
if
(
!
webgl
)
return
;
mLastFrameTexture
=
mThisFrameTexture
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
if
(
!
mThisFrameTexture
|
|
aDisplayInfo
.
mDisplayState
.
lastSubmittedFrameId
=
=
mLastSubmittedFrameId
)
{
mThisFrameTexture
=
webgl
-
>
GetVRFrame
(
)
;
}
#
else
mThisFrameTexture
=
webgl
-
>
GetVRFrame
(
)
;
#
endif
mLastSubmittedFrameId
=
frameId
;
if
(
!
mThisFrameTexture
)
{
return
;
}
VRManagerChild
*
vrmc
=
VRManagerChild
:
:
Get
(
)
;
layers
:
:
SyncObjectClient
*
syncObject
=
vrmc
-
>
GetSyncObject
(
)
;
mThisFrameTexture
-
>
SyncWithObject
(
syncObject
)
;
if
(
!
gfxPlatform
:
:
GetPlatform
(
)
-
>
DidRenderingDeviceReset
(
)
)
{
if
(
syncObject
&
&
syncObject
-
>
IsSyncObjectValid
(
)
)
{
syncObject
-
>
Synchronize
(
)
;
}
}
gl
:
:
SharedSurface
*
surf
=
mThisFrameTexture
-
>
Surf
(
)
;
if
(
surf
-
>
mType
=
=
gl
:
:
SharedSurfaceType
:
:
Basic
)
{
gfxCriticalError
(
)
<
<
"
SharedSurfaceType
:
:
Basic
not
supported
for
WebVR
"
;
return
;
}
layers
:
:
SurfaceDescriptor
desc
;
if
(
!
surf
-
>
ToSurfaceDescriptor
(
&
desc
)
)
{
gfxCriticalError
(
)
<
<
"
SharedSurface
:
:
ToSurfaceDescriptor
failed
in
"
"
VRLayerChild
:
:
SubmitFrame
"
;
return
;
}
SendSubmitFrame
(
desc
frameId
mLeftEyeRect
mRightEyeRect
)
;
}
bool
VRLayerChild
:
:
IsIPCOpen
(
)
{
return
mIPCOpen
;
}
void
VRLayerChild
:
:
ClearSurfaces
(
)
{
mThisFrameTexture
=
nullptr
;
mLastFrameTexture
=
nullptr
;
const
auto
&
webgl
=
mCanvasElement
-
>
GetWebGLContext
(
)
;
if
(
webgl
)
{
webgl
-
>
ClearVRFrame
(
)
;
}
}
void
VRLayerChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mIPCOpen
=
false
;
}
PVRLayerChild
*
VRLayerChild
:
:
CreateIPDLActor
(
)
{
VRLayerChild
*
c
=
new
VRLayerChild
(
)
;
c
-
>
AddIPDLReference
(
)
;
return
c
;
}
bool
VRLayerChild
:
:
DestroyIPDLActor
(
PVRLayerChild
*
actor
)
{
static_cast
<
VRLayerChild
*
>
(
actor
)
-
>
ReleaseIPDLReference
(
)
;
return
true
;
}
void
VRLayerChild
:
:
AddIPDLReference
(
)
{
MOZ_ASSERT
(
mIPCOpen
=
=
false
)
;
mIPCOpen
=
true
;
AddRef
(
)
;
}
void
VRLayerChild
:
:
ReleaseIPDLReference
(
)
{
MOZ_ASSERT
(
mIPCOpen
=
=
false
)
;
Release
(
)
;
}
}
