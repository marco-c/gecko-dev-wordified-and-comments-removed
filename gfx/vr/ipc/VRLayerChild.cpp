#
include
"
VRLayerChild
.
h
"
#
include
"
GLScreenBuffer
.
h
"
#
include
"
mozilla
/
layers
/
TextureClientSharedSurface
.
h
"
#
include
"
SharedSurface
.
h
"
#
include
"
SharedSurfaceGL
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
nsICanvasRenderingContextInternal
.
h
"
#
include
"
mozilla
/
dom
/
HTMLCanvasElement
.
h
"
namespace
mozilla
{
namespace
gfx
{
VRLayerChild
:
:
VRLayerChild
(
)
:
mCanvasElement
(
nullptr
)
mShSurfClient
(
nullptr
)
mFront
(
nullptr
)
mIPCOpen
(
false
)
{
MOZ_COUNT_CTOR
(
VRLayerChild
)
;
}
VRLayerChild
:
:
~
VRLayerChild
(
)
{
if
(
mCanvasElement
)
{
mCanvasElement
-
>
StopVRPresentation
(
)
;
}
ClearSurfaces
(
)
;
MOZ_COUNT_DTOR
(
VRLayerChild
)
;
}
void
VRLayerChild
:
:
Initialize
(
dom
:
:
HTMLCanvasElement
*
aCanvasElement
const
gfx
:
:
Rect
&
aLeftEyeRect
const
gfx
:
:
Rect
&
aRightEyeRect
)
{
MOZ_ASSERT
(
aCanvasElement
)
;
aCanvasElement
-
>
StartVRPresentation
(
)
;
mLeftEyeRect
=
aLeftEyeRect
;
mRightEyeRect
=
aRightEyeRect
;
if
(
mCanvasElement
=
=
nullptr
)
{
mCanvasElement
=
aCanvasElement
;
VRManagerChild
*
vrmc
=
VRManagerChild
:
:
Get
(
)
;
vrmc
-
>
RunFrameRequestCallbacks
(
)
;
}
else
{
mCanvasElement
=
aCanvasElement
;
}
}
void
VRLayerChild
:
:
SubmitFrame
(
uint64_t
aFrameId
)
{
if
(
!
mCanvasElement
)
{
return
;
}
mShSurfClient
=
mCanvasElement
-
>
GetVRFrame
(
)
;
if
(
!
mShSurfClient
)
{
return
;
}
gl
:
:
SharedSurface
*
surf
=
mShSurfClient
-
>
Surf
(
)
;
if
(
surf
-
>
mType
=
=
gl
:
:
SharedSurfaceType
:
:
Basic
)
{
gfxCriticalError
(
)
<
<
"
SharedSurfaceType
:
:
Basic
not
supported
for
WebVR
"
;
return
;
}
mFront
=
mShSurfClient
;
mShSurfClient
=
nullptr
;
mFront
-
>
SetAddedToCompositableClient
(
)
;
VRManagerChild
*
vrmc
=
VRManagerChild
:
:
Get
(
)
;
mFront
-
>
SyncWithObject
(
vrmc
-
>
GetSyncObject
(
)
)
;
MOZ_ALWAYS_TRUE
(
mFront
-
>
InitIPDLActor
(
vrmc
)
)
;
SendSubmitFrame
(
mFront
-
>
GetIPDLActor
(
)
aFrameId
mLeftEyeRect
mRightEyeRect
)
;
}
bool
VRLayerChild
:
:
IsIPCOpen
(
)
{
return
mIPCOpen
;
}
void
VRLayerChild
:
:
ClearSurfaces
(
)
{
mFront
=
nullptr
;
mShSurfClient
=
nullptr
;
}
void
VRLayerChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mIPCOpen
=
false
;
}
PVRLayerChild
*
VRLayerChild
:
:
CreateIPDLActor
(
)
{
VRLayerChild
*
c
=
new
VRLayerChild
(
)
;
c
-
>
AddIPDLReference
(
)
;
return
c
;
}
bool
VRLayerChild
:
:
DestroyIPDLActor
(
PVRLayerChild
*
actor
)
{
static_cast
<
VRLayerChild
*
>
(
actor
)
-
>
ReleaseIPDLReference
(
)
;
return
true
;
}
void
VRLayerChild
:
:
AddIPDLReference
(
)
{
MOZ_ASSERT
(
mIPCOpen
=
=
false
)
;
mIPCOpen
=
true
;
AddRef
(
)
;
}
void
VRLayerChild
:
:
ReleaseIPDLReference
(
)
{
MOZ_ASSERT
(
mIPCOpen
=
=
false
)
;
Release
(
)
;
}
}
}
