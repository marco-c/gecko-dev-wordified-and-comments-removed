#
include
"
VRProcessChild
.
h
"
#
include
"
mozilla
/
BackgroundHangMonitor
.
h
"
#
include
"
mozilla
/
GeckoArgs
.
h
"
#
include
"
mozilla
/
ipc
/
IOThreadChild
.
h
"
#
include
"
mozilla
/
ipc
/
ProcessUtils
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
using
mozilla
:
:
ipc
:
:
IOThreadChild
;
StaticRefPtr
<
VRParent
>
sVRParent
;
VRProcessChild
:
:
VRProcessChild
(
ProcessId
aParentPid
)
:
ProcessChild
(
aParentPid
)
{
}
VRProcessChild
:
:
~
VRProcessChild
(
)
{
sVRParent
=
nullptr
;
}
VRParent
*
VRProcessChild
:
:
GetVRParent
(
)
{
MOZ_ASSERT
(
sVRParent
)
;
return
sVRParent
;
}
bool
VRProcessChild
:
:
Init
(
int
aArgc
char
*
aArgv
[
]
)
{
if
(
!
StaticPrefs
:
:
dom_vr_enabled
(
)
&
&
!
StaticPrefs
:
:
dom_vr_webxr_enabled
(
)
)
{
NS_WARNING
(
"
VR
is
not
enabled
when
trying
to
create
a
VRParent
"
)
;
return
false
;
}
Maybe
<
const
char
*
>
parentBuildID
=
geckoargs
:
:
sParentBuildID
.
Get
(
aArgc
aArgv
)
;
if
(
parentBuildID
.
isNothing
(
)
)
{
return
false
;
}
if
(
!
ProcessChild
:
:
InitPrefs
(
aArgc
aArgv
)
)
{
return
false
;
}
sVRParent
=
new
VRParent
(
)
;
sVRParent
-
>
Init
(
ParentPid
(
)
*
parentBuildID
IOThreadChild
:
:
TakeInitialPort
(
)
)
;
return
true
;
}
void
VRProcessChild
:
:
CleanUp
(
)
{
sVRParent
=
nullptr
;
NS_ShutdownXPCOM
(
nullptr
)
;
}
