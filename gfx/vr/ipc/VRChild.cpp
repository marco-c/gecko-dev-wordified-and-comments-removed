#
include
"
VRChild
.
h
"
#
include
"
VRProcessParent
.
h
"
#
include
"
gfxConfig
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
SystemGroup
.
h
"
#
include
"
mozilla
/
VsyncDispatcher
.
h
"
namespace
mozilla
{
namespace
gfx
{
VRChild
:
:
VRChild
(
VRProcessParent
*
aHost
)
:
mHost
(
aHost
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
}
void
VRChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
gfxVars
:
:
RemoveReceiver
(
this
)
;
mHost
-
>
OnChannelClosed
(
)
;
}
void
VRChild
:
:
Init
(
)
{
nsTArray
<
GfxPrefSetting
>
prefs
;
for
(
auto
pref
:
gfxPrefs
:
:
all
(
)
)
{
if
(
pref
-
>
HasDefaultValue
(
)
)
{
continue
;
}
GfxPrefValue
value
;
pref
-
>
GetCachedValue
(
&
value
)
;
prefs
.
AppendElement
(
GfxPrefSetting
(
pref
-
>
Index
(
)
value
)
)
;
}
nsTArray
<
GfxVarUpdate
>
updates
=
gfxVars
:
:
FetchNonDefaultVars
(
)
;
DevicePrefs
devicePrefs
;
devicePrefs
.
hwCompositing
(
)
=
gfxConfig
:
:
GetValue
(
Feature
:
:
HW_COMPOSITING
)
;
devicePrefs
.
d3d11Compositing
(
)
=
gfxConfig
:
:
GetValue
(
Feature
:
:
D3D11_COMPOSITING
)
;
devicePrefs
.
oglCompositing
(
)
=
gfxConfig
:
:
GetValue
(
Feature
:
:
OPENGL_COMPOSITING
)
;
devicePrefs
.
advancedLayers
(
)
=
gfxConfig
:
:
GetValue
(
Feature
:
:
ADVANCED_LAYERS
)
;
devicePrefs
.
useD2D1
(
)
=
gfxConfig
:
:
GetValue
(
Feature
:
:
DIRECT2D
)
;
SendInit
(
prefs
updates
devicePrefs
)
;
gfxVars
:
:
AddReceiver
(
this
)
;
}
void
VRChild
:
:
OnVarChanged
(
const
GfxVarUpdate
&
aVar
)
{
SendUpdateVar
(
aVar
)
;
}
class
DeferredDeleteVRChild
:
public
Runnable
{
public
:
explicit
DeferredDeleteVRChild
(
UniquePtr
<
VRChild
>
&
&
aChild
)
:
Runnable
(
"
gfx
:
:
DeferredDeleteVRChild
"
)
mChild
(
std
:
:
move
(
aChild
)
)
{
}
NS_IMETHODIMP
Run
(
)
override
{
return
NS_OK
;
}
private
:
UniquePtr
<
VRChild
>
mChild
;
}
;
void
VRChild
:
:
Destroy
(
UniquePtr
<
VRChild
>
&
&
aChild
)
{
NS_DispatchToMainThread
(
new
DeferredDeleteVRChild
(
std
:
:
move
(
aChild
)
)
)
;
}
}
}
