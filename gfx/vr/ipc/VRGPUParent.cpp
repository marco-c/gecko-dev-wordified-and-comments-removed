#
include
"
VRGPUParent
.
h
"
#
include
"
mozilla
/
ipc
/
ProcessChild
.
h
"
namespace
mozilla
{
namespace
gfx
{
using
namespace
ipc
;
VRGPUParent
:
:
VRGPUParent
(
ProcessId
aChildProcessId
)
:
mClosed
(
false
)
{
MOZ_COUNT_CTOR
(
VRGPUParent
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
SetOtherProcessId
(
aChildProcessId
)
;
}
VRGPUParent
:
:
~
VRGPUParent
(
)
{
MOZ_COUNT_DTOR
(
VRGPUParent
)
;
}
void
VRGPUParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
if
(
mVRService
)
{
mVRService
-
>
Stop
(
)
;
mVRService
=
nullptr
;
}
#
endif
mClosed
=
true
;
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
gfx
:
:
VRGPUParent
:
:
DeferredDestroy
"
this
&
VRGPUParent
:
:
DeferredDestroy
)
)
;
}
void
VRGPUParent
:
:
DeferredDestroy
(
)
{
mSelfRef
=
nullptr
;
}
RefPtr
<
VRGPUParent
>
VRGPUParent
:
:
CreateForGPU
(
Endpoint
<
PVRGPUParent
>
&
&
aEndpoint
)
{
RefPtr
<
VRGPUParent
>
vcp
=
new
VRGPUParent
(
aEndpoint
.
OtherPid
(
)
)
;
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableMethod
<
Endpoint
<
PVRGPUParent
>
&
&
>
(
"
gfx
:
:
VRGPUParent
:
:
Bind
"
vcp
&
VRGPUParent
:
:
Bind
std
:
:
move
(
aEndpoint
)
)
)
;
return
vcp
;
}
void
VRGPUParent
:
:
Bind
(
Endpoint
<
PVRGPUParent
>
&
&
aEndpoint
)
{
if
(
!
aEndpoint
.
Bind
(
this
)
)
{
return
;
}
mSelfRef
=
this
;
}
mozilla
:
:
ipc
:
:
IPCResult
VRGPUParent
:
:
RecvStartVRService
(
)
{
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
mVRService
=
VRService
:
:
Create
(
)
;
MOZ_ASSERT
(
mVRService
)
;
mVRService
-
>
Start
(
)
;
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
VRGPUParent
:
:
RecvStopVRService
(
)
{
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
if
(
mVRService
)
{
mVRService
-
>
Stop
(
)
;
mVRService
=
nullptr
;
}
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
VRGPUParent
:
:
RecvPuppetReset
(
)
{
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
VRPuppetCommandBuffer
:
:
Get
(
)
.
Reset
(
)
;
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
VRGPUParent
:
:
RecvPuppetSubmit
(
const
nsTArray
<
uint64_t
>
&
aBuffer
)
{
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
VRPuppetCommandBuffer
:
:
Get
(
)
.
Submit
(
aBuffer
)
;
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
VRGPUParent
:
:
RecvPuppetCheckForCompletion
(
)
{
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
if
(
VRPuppetCommandBuffer
:
:
Get
(
)
.
HasEnded
(
)
)
{
Unused
<
<
SendNotifyPuppetComplete
(
)
;
}
#
endif
return
IPC_OK
(
)
;
}
bool
VRGPUParent
:
:
IsClosed
(
)
{
return
mClosed
;
}
}
}
