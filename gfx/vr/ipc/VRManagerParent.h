#
ifndef
MOZILLA_GFX_VR_VRMANAGERPARENT_H
#
define
MOZILLA_GFX_VR_VRMANAGERPARENT_H
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
gfx
/
PVRManagerParent
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
gfxVR
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
VRManager
;
class
VRManagerParent
final
:
public
PVRManagerParent
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING_WITH_MAIN_THREAD_DESTRUCTION
(
VRManagerParent
)
public
:
explicit
VRManagerParent
(
ProcessId
aChildProcessId
)
;
static
VRManagerParent
*
CreateSameProcess
(
)
;
static
bool
CreateForContent
(
Endpoint
<
PVRManagerParent
>
&
&
aEndpoint
)
;
ipc
:
:
IToplevelProtocol
*
CloneToplevel
(
const
InfallibleTArray
<
ipc
:
:
ProtocolFdMapping
>
&
aFds
base
:
:
ProcessHandle
aPeerProcess
mozilla
:
:
ipc
:
:
ProtocolCloneContext
*
aCtx
)
override
;
protected
:
~
VRManagerParent
(
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
why
)
override
;
void
OnChannelConnected
(
int32_t
pid
)
override
;
virtual
bool
RecvRefreshDevices
(
)
override
;
virtual
bool
RecvResetSensor
(
const
uint32_t
&
aDeviceID
)
override
;
virtual
bool
RecvKeepSensorTracking
(
const
uint32_t
&
aDeviceID
)
override
;
virtual
bool
RecvSetFOV
(
const
uint32_t
&
aDeviceID
const
VRFieldOfView
&
aFOVLeft
const
VRFieldOfView
&
aFOVRight
const
double
&
zNear
const
double
&
zFar
)
override
;
private
:
void
RegisterWithManager
(
)
;
void
UnregisterFromManager
(
)
;
void
Bind
(
Endpoint
<
PVRManagerParent
>
&
&
aEndpoint
)
;
static
void
RegisterVRManagerInCompositorThread
(
VRManagerParent
*
aVRManager
)
;
void
DeferredDestroy
(
)
;
RefPtr
<
VRManagerParent
>
mSelfRef
;
RefPtr
<
layers
:
:
CompositorThreadHolder
>
mCompositorThreadHolder
;
RefPtr
<
VRManager
>
mVRManagerHolder
;
}
;
}
}
#
endif
