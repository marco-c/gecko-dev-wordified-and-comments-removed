#
ifndef
MOZILLA_GFX_VR_VRMANAGERPARENT_H
#
define
MOZILLA_GFX_VR_VRMANAGERPARENT_H
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
layers
/
CompositableTransactionParent
.
h
"
#
include
"
mozilla
/
gfx
/
PVRManagerParent
.
h
"
#
include
"
mozilla
/
gfx
/
PVRLayerParent
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
gfxVR
.
h
"
namespace
mozilla
{
using
namespace
layers
;
namespace
gfx
{
class
VRManager
;
namespace
impl
{
class
VRDisplayPuppet
;
class
VRControllerPuppet
;
}
class
VRManagerParent
final
:
public
PVRManagerParent
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VRManagerParent
)
;
friend
class
PVRManagerParent
;
public
:
explicit
VRManagerParent
(
ProcessId
aChildProcessId
bool
aIsContentChild
)
;
static
VRManagerParent
*
CreateSameProcess
(
)
;
static
bool
CreateForGPUProcess
(
Endpoint
<
PVRManagerParent
>
&
&
aEndpoint
)
;
static
bool
CreateForContent
(
Endpoint
<
PVRManagerParent
>
&
&
aEndpoint
)
;
bool
IsSameProcess
(
)
const
;
bool
HaveEventListener
(
)
;
bool
HaveControllerListener
(
)
;
bool
GetVRActiveStatus
(
)
;
bool
SendGamepadUpdate
(
const
GamepadChangeEvent
&
aGamepadEvent
)
;
bool
SendReplyGamepadVibrateHaptic
(
const
uint32_t
&
aPromiseID
)
;
protected
:
~
VRManagerParent
(
)
;
PVRLayerParent
*
AllocPVRLayerParent
(
const
uint32_t
&
aDisplayID
const
uint32_t
&
aGroup
)
;
bool
DeallocPVRLayerParent
(
PVRLayerParent
*
actor
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
why
)
override
;
void
OnChannelConnected
(
int32_t
pid
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvRefreshDisplays
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvResetSensor
(
const
uint32_t
&
aDisplayID
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvSetGroupMask
(
const
uint32_t
&
aDisplayID
const
uint32_t
&
aGroupMask
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvSetHaveEventListener
(
const
bool
&
aHaveEventListener
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvControllerListenerAdded
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvControllerListenerRemoved
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvVibrateHaptic
(
const
uint32_t
&
aControllerIdx
const
uint32_t
&
aHapticIndex
const
double
&
aIntensity
const
double
&
aDuration
const
uint32_t
&
aPromiseID
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvStopVibrateHaptic
(
const
uint32_t
&
aControllerIdx
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvCreateVRTestSystem
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvCreateVRServiceTestDisplay
(
const
nsCString
&
aID
const
uint32_t
&
aPromiseID
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvCreateVRServiceTestController
(
const
nsCString
&
aID
const
uint32_t
&
aPromiseID
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvSetDisplayInfoToMockDisplay
(
const
uint32_t
&
aDeviceID
const
VRDisplayInfo
&
aDisplayInfo
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvSetSensorStateToMockDisplay
(
const
uint32_t
&
aDeviceID
const
VRHMDSensorState
&
aSensorState
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvNewButtonEventToMockController
(
const
uint32_t
&
aDeviceID
const
long
&
aButton
const
bool
&
aPressed
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvNewAxisMoveEventToMockController
(
const
uint32_t
&
aDeviceID
const
long
&
aAxis
const
double
&
aValue
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvNewPoseMoveToMockController
(
const
uint32_t
&
aDeviceID
const
GamepadPoseState
&
pose
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvStartVRNavigation
(
const
uint32_t
&
aDeviceID
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvStopVRNavigation
(
const
uint32_t
&
aDeviceID
const
TimeDuration
&
aTimeout
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvStartActivity
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvStopActivity
(
)
override
;
private
:
void
RegisterWithManager
(
)
;
void
UnregisterFromManager
(
)
;
void
Bind
(
Endpoint
<
PVRManagerParent
>
&
&
aEndpoint
)
;
static
void
RegisterVRManagerInCompositorThread
(
VRManagerParent
*
aVRManager
)
;
void
DeferredDestroy
(
)
;
already_AddRefed
<
impl
:
:
VRControllerPuppet
>
GetControllerPuppet
(
uint32_t
aDeviceID
)
;
RefPtr
<
VRManagerParent
>
mSelfRef
;
RefPtr
<
CompositorThreadHolder
>
mCompositorThreadHolder
;
RefPtr
<
VRManager
>
mVRManagerHolder
;
nsRefPtrHashtable
<
nsUint32HashKey
impl
:
:
VRControllerPuppet
>
mVRControllerTests
;
uint32_t
mControllerTestID
;
bool
mHaveEventListener
;
bool
mHaveControllerListener
;
bool
mIsContentChild
;
bool
mVRActiveStatus
;
}
;
class
VRManagerPromise
final
{
friend
class
VRManager
;
public
:
explicit
VRManagerPromise
(
RefPtr
<
VRManagerParent
>
aParent
uint32_t
aPromiseID
)
:
mParent
(
aParent
)
mPromiseID
(
aPromiseID
)
{
}
~
VRManagerPromise
(
)
{
mParent
=
nullptr
;
}
bool
operator
=
=
(
const
VRManagerPromise
&
aOther
)
const
{
return
mParent
=
=
aOther
.
mParent
&
&
mPromiseID
=
=
aOther
.
mPromiseID
;
}
private
:
RefPtr
<
VRManagerParent
>
mParent
;
uint32_t
mPromiseID
;
}
;
}
}
#
endif
