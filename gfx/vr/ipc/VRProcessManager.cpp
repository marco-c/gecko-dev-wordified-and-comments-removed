#
include
"
VRProcessManager
.
h
"
#
include
"
VRProcessParent
.
h
"
#
include
"
VRChild
.
h
"
#
include
"
VRGPUChild
.
h
"
#
include
"
VRGPUParent
.
h
"
namespace
mozilla
{
namespace
gfx
{
static
StaticAutoPtr
<
VRProcessManager
>
sSingleton
;
VRProcessManager
*
VRProcessManager
:
:
Get
(
)
{
return
sSingleton
;
}
void
VRProcessManager
:
:
Initialize
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
sSingleton
=
new
VRProcessManager
(
)
;
}
void
VRProcessManager
:
:
Shutdown
(
)
{
sSingleton
=
nullptr
;
}
VRProcessManager
:
:
VRProcessManager
(
)
:
mProcess
(
nullptr
)
{
MOZ_COUNT_CTOR
(
VRProcessManager
)
;
mObserver
=
new
Observer
(
this
)
;
nsContentUtils
:
:
RegisterShutdownObserver
(
mObserver
)
;
}
VRProcessManager
:
:
~
VRProcessManager
(
)
{
MOZ_COUNT_DTOR
(
VRProcessManager
)
;
if
(
mObserver
)
{
nsContentUtils
:
:
UnregisterShutdownObserver
(
mObserver
)
;
mObserver
=
nullptr
;
}
DestroyProcess
(
)
;
MOZ_ASSERT
(
!
mProcess
)
;
}
void
VRProcessManager
:
:
LaunchVRProcess
(
)
{
if
(
mProcess
)
{
return
;
}
mProcess
=
new
VRProcessParent
(
this
)
;
if
(
!
mProcess
-
>
Launch
(
)
)
{
DisableVRProcess
(
"
Failed
to
launch
VR
process
"
)
;
}
}
void
VRProcessManager
:
:
DisableVRProcess
(
const
char
*
aMessage
)
{
if
(
!
gfxPrefs
:
:
VRProcessEnabled
(
)
)
{
return
;
}
DestroyProcess
(
)
;
}
void
VRProcessManager
:
:
DestroyProcess
(
)
{
if
(
!
mProcess
)
{
return
;
}
mProcess
-
>
Shutdown
(
)
;
mProcess
=
nullptr
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
VRProcessStatus
NS_LITERAL_CSTRING
(
"
Destroyed
"
)
)
;
}
void
VRProcessManager
:
:
OnProcessLaunchComplete
(
VRProcessParent
*
aParent
)
{
MOZ_ASSERT
(
mProcess
&
&
mProcess
=
=
aParent
)
;
if
(
!
mProcess
-
>
IsConnected
(
)
)
{
DestroyProcess
(
)
;
return
;
}
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
VRProcessStatus
NS_LITERAL_CSTRING
(
"
Running
"
)
)
;
}
void
VRProcessManager
:
:
OnProcessUnexpectedShutdown
(
VRProcessParent
*
aParent
)
{
MOZ_ASSERT
(
mProcess
&
&
mProcess
=
=
aParent
)
;
DestroyProcess
(
)
;
}
bool
VRProcessManager
:
:
CreateGPUBridges
(
base
:
:
ProcessId
aOtherProcess
mozilla
:
:
ipc
:
:
Endpoint
<
PVRGPUChild
>
*
aOutVRBridge
)
{
if
(
!
CreateGPUVRManager
(
aOtherProcess
aOutVRBridge
)
)
{
return
false
;
}
return
true
;
}
bool
VRProcessManager
:
:
CreateGPUVRManager
(
base
:
:
ProcessId
aOtherProcess
mozilla
:
:
ipc
:
:
Endpoint
<
PVRGPUChild
>
*
aOutEndpoint
)
{
base
:
:
ProcessId
vrparentPid
=
mProcess
?
mProcess
-
>
OtherPid
(
)
:
base
:
:
GetCurrentProcId
(
)
;
ipc
:
:
Endpoint
<
PVRGPUParent
>
vrparentPipe
;
ipc
:
:
Endpoint
<
PVRGPUChild
>
vrchildPipe
;
nsresult
rv
=
PVRGPU
:
:
CreateEndpoints
(
vrparentPid
aOtherProcess
&
vrparentPipe
&
vrchildPipe
)
;
if
(
NS_FAILED
(
rv
)
)
{
gfxCriticalNote
<
<
"
Could
not
create
gpu
-
vr
bridge
:
"
<
<
hexa
(
int
(
rv
)
)
;
return
false
;
}
VRChild
*
vrChild
=
mProcess
-
>
GetActor
(
)
;
vrChild
-
>
SendNewGPUVRManager
(
std
:
:
move
(
vrparentPipe
)
)
;
*
aOutEndpoint
=
std
:
:
move
(
vrchildPipe
)
;
return
true
;
}
NS_IMPL_ISUPPORTS
(
VRProcessManager
:
:
Observer
nsIObserver
)
;
VRProcessManager
:
:
Observer
:
:
Observer
(
VRProcessManager
*
aManager
)
:
mManager
(
aManager
)
{
}
NS_IMETHODIMP
VRProcessManager
:
:
Observer
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
!
strcmp
(
aTopic
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
)
{
mManager
-
>
OnXPCOMShutdown
(
)
;
}
return
NS_OK
;
}
void
VRProcessManager
:
:
CleanShutdown
(
)
{
DestroyProcess
(
)
;
}
void
VRProcessManager
:
:
OnXPCOMShutdown
(
)
{
if
(
mObserver
)
{
nsContentUtils
:
:
UnregisterShutdownObserver
(
mObserver
)
;
mObserver
=
nullptr
;
}
CleanShutdown
(
)
;
}
VRChild
*
VRProcessManager
:
:
GetVRChild
(
)
{
return
mProcess
-
>
GetActor
(
)
;
}
}
}
