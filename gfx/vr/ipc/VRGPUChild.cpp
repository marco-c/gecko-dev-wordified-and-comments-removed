#
include
"
VRGPUChild
.
h
"
#
include
"
VRServiceHost
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
VRManager
.
h
"
namespace
mozilla
{
namespace
gfx
{
static
StaticRefPtr
<
VRGPUChild
>
sVRGPUChildSingleton
;
bool
VRGPUChild
:
:
InitForGPUProcess
(
Endpoint
<
PVRGPUChild
>
&
&
aEndpoint
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
sVRGPUChildSingleton
)
;
RefPtr
<
VRGPUChild
>
child
(
new
VRGPUChild
(
)
)
;
if
(
!
aEndpoint
.
Bind
(
child
)
)
{
return
false
;
}
sVRGPUChildSingleton
=
child
;
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
VRServiceHost
:
:
NotifyVRProcessStarted
"
[
]
(
)
-
>
void
{
VRServiceHost
*
host
=
VRServiceHost
:
:
Get
(
)
;
host
-
>
NotifyVRProcessStarted
(
)
;
}
)
;
NS_DispatchToMainThread
(
task
.
forget
(
)
)
;
#
endif
return
true
;
}
bool
VRGPUChild
:
:
IsCreated
(
)
{
return
!
!
sVRGPUChildSingleton
;
}
VRGPUChild
*
VRGPUChild
:
:
Get
(
)
{
MOZ_ASSERT
(
IsCreated
(
)
"
VRGPUChild
haven
'
t
initialized
yet
.
"
)
;
return
sVRGPUChildSingleton
;
}
void
VRGPUChild
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sVRGPUChildSingleton
&
&
!
sVRGPUChildSingleton
-
>
IsClosed
(
)
)
{
sVRGPUChildSingleton
-
>
Close
(
)
;
}
sVRGPUChildSingleton
=
nullptr
;
}
void
VRGPUChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
VRManager
*
vm
=
VRManager
:
:
Get
(
)
;
mozilla
:
:
layers
:
:
CompositorThread
(
)
-
>
Dispatch
(
NewRunnableMethod
(
"
VRGPUChild
:
:
ActorDestroy
"
vm
&
VRManager
:
:
Shutdown
)
)
;
mClosed
=
true
;
}
mozilla
:
:
ipc
:
:
IPCResult
VRGPUChild
:
:
RecvNotifyPuppetComplete
(
)
{
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
VRManager
*
vm
=
VRManager
:
:
Get
(
)
;
mozilla
:
:
layers
:
:
CompositorThread
(
)
-
>
Dispatch
(
NewRunnableMethod
(
"
VRManager
:
:
NotifyPuppetComplete
"
vm
&
VRManager
:
:
NotifyPuppetComplete
)
)
;
#
endif
return
IPC_OK
(
)
;
}
bool
VRGPUChild
:
:
IsClosed
(
)
{
return
mClosed
;
}
}
}
