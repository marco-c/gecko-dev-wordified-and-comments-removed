#
include
"
VRGPUChild
.
h
"
namespace
mozilla
{
namespace
gfx
{
static
StaticRefPtr
<
VRGPUChild
>
sVRGPUChildSingleton
;
bool
VRGPUChild
:
:
InitForGPUProcess
(
Endpoint
<
PVRGPUChild
>
&
&
aEndpoint
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
sVRGPUChildSingleton
)
;
RefPtr
<
VRGPUChild
>
child
(
new
VRGPUChild
(
)
)
;
if
(
!
aEndpoint
.
Bind
(
child
)
)
{
return
false
;
}
sVRGPUChildSingleton
=
child
;
return
true
;
}
bool
VRGPUChild
:
:
IsCreated
(
)
{
return
!
!
sVRGPUChildSingleton
;
}
VRGPUChild
*
VRGPUChild
:
:
Get
(
)
{
MOZ_ASSERT
(
IsCreated
(
)
"
VRGPUChild
haven
'
t
initialized
yet
.
"
)
;
return
sVRGPUChildSingleton
;
}
void
VRGPUChild
:
:
ShutDown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sVRGPUChildSingleton
)
{
sVRGPUChildSingleton
-
>
Destroy
(
)
;
sVRGPUChildSingleton
=
nullptr
;
}
}
class
DeferredDeleteVRGPUChild
:
public
Runnable
{
public
:
explicit
DeferredDeleteVRGPUChild
(
RefPtr
<
VRGPUChild
>
aChild
)
:
Runnable
(
"
gfx
:
:
DeferredDeleteVRGPUChild
"
)
mChild
(
std
:
:
move
(
aChild
)
)
{
}
NS_IMETHODIMP
Run
(
)
override
{
mChild
-
>
Close
(
)
;
return
NS_OK
;
}
private
:
RefPtr
<
VRGPUChild
>
mChild
;
}
;
void
VRGPUChild
:
:
Destroy
(
)
{
RefPtr
<
VRGPUChild
>
selfRef
=
this
;
NS_DispatchToMainThread
(
new
DeferredDeleteVRGPUChild
(
this
)
)
;
}
}
}
