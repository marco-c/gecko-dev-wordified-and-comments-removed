#
ifndef
MOZILLA_GFX_VR_VRMANAGERCHILD_H
#
define
MOZILLA_GFX_VR_VRMANAGERCHILD_H
#
include
"
mozilla
/
gfx
/
PVRManagerChild
.
h
"
#
include
"
mozilla
/
ipc
/
SharedMemory
.
h
"
#
include
"
ThreadSafeRefcountingWithMainThreadDestruction
.
h
"
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
TextureForwarder
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Promise
;
class
GamepadManager
;
class
Navigator
;
class
VRDisplay
;
class
VREventObserver
;
class
VRMockDisplay
;
}
namespace
layers
{
class
TextureClient
;
}
namespace
gfx
{
class
VRLayerChild
;
class
VRDisplayClient
;
class
VRManagerChild
:
public
PVRManagerChild
public
layers
:
:
TextureForwarder
public
layers
:
:
KnowsCompositor
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VRManagerChild
override
)
;
TextureForwarder
*
GetTextureForwarder
(
)
override
{
return
this
;
}
LayersIPCActor
*
GetLayersIPCActor
(
)
override
{
return
this
;
}
static
VRManagerChild
*
Get
(
)
;
void
AddListener
(
dom
:
:
VREventObserver
*
aObserver
)
;
void
RemoveListener
(
dom
:
:
VREventObserver
*
aObserver
)
;
int
GetInputFrameID
(
)
;
bool
GetVRDisplays
(
nsTArray
<
RefPtr
<
VRDisplayClient
>
>
&
aDisplays
)
;
bool
RefreshVRDisplaysWithCallback
(
uint64_t
aWindowId
)
;
void
AddPromise
(
const
uint32_t
&
aID
dom
:
:
Promise
*
aPromise
)
;
void
CreateVRServiceTestDisplay
(
const
nsCString
&
aID
dom
:
:
Promise
*
aPromise
)
;
void
CreateVRServiceTestController
(
const
nsCString
&
aID
dom
:
:
Promise
*
aPromise
)
;
static
void
InitSameProcess
(
)
;
static
void
InitWithGPUProcess
(
Endpoint
<
PVRManagerChild
>
&
&
aEndpoint
)
;
static
bool
InitForContent
(
Endpoint
<
PVRManagerChild
>
&
&
aEndpoint
)
;
static
bool
ReinitForContent
(
Endpoint
<
PVRManagerChild
>
&
&
aEndpoint
)
;
static
void
ShutDown
(
)
;
static
bool
IsCreated
(
)
;
virtual
PTextureChild
*
CreateTexture
(
const
SurfaceDescriptor
&
aSharedData
layers
:
:
LayersBackend
aLayersBackend
TextureFlags
aFlags
uint64_t
aSerial
wr
:
:
MaybeExternalImageId
&
aExternalImageId
)
override
;
virtual
void
CancelWaitForRecycle
(
uint64_t
aTextureId
)
override
;
PVRLayerChild
*
CreateVRLayer
(
uint32_t
aDisplayID
const
Rect
&
aLeftEyeRect
const
Rect
&
aRightEyeRect
nsIEventTarget
*
aTarget
)
;
static
void
IdentifyTextureHost
(
const
layers
:
:
TextureFactoryIdentifier
&
aIdentifier
)
;
layers
:
:
LayersBackend
GetBackendType
(
)
const
;
layers
:
:
SyncObject
*
GetSyncObject
(
)
{
return
mSyncObject
;
}
virtual
MessageLoop
*
GetMessageLoop
(
)
const
override
{
return
mMessageLoop
;
}
virtual
base
:
:
ProcessId
GetParentPid
(
)
const
override
{
return
OtherPid
(
)
;
}
nsresult
ScheduleFrameRequestCallback
(
mozilla
:
:
dom
:
:
FrameRequestCallback
&
aCallback
int32_t
*
aHandle
)
;
void
CancelFrameRequestCallback
(
int32_t
aHandle
)
;
void
RunFrameRequestCallbacks
(
)
;
void
UpdateDisplayInfo
(
nsTArray
<
VRDisplayInfo
>
&
aDisplayUpdates
)
;
void
FireDOMVRDisplayMountedEvent
(
uint32_t
aDisplayID
)
;
void
FireDOMVRDisplayUnmountedEvent
(
uint32_t
aDisplayID
)
;
void
FireDOMVRDisplayConnectEvent
(
uint32_t
aDisplayID
)
;
void
FireDOMVRDisplayDisconnectEvent
(
uint32_t
aDisplayID
)
;
void
FireDOMVRDisplayPresentChangeEvent
(
uint32_t
aDisplayID
)
;
virtual
void
HandleFatalError
(
const
char
*
aName
const
char
*
aMsg
)
const
override
;
protected
:
explicit
VRManagerChild
(
)
;
~
VRManagerChild
(
)
;
void
Destroy
(
)
;
static
void
DeferredDestroy
(
RefPtr
<
VRManagerChild
>
aVRManagerChild
)
;
virtual
PTextureChild
*
AllocPTextureChild
(
const
SurfaceDescriptor
&
aSharedData
const
layers
:
:
LayersBackend
&
aLayersBackend
const
TextureFlags
&
aFlags
const
uint64_t
&
aSerial
)
override
;
virtual
bool
DeallocPTextureChild
(
PTextureChild
*
actor
)
override
;
virtual
PVRLayerChild
*
AllocPVRLayerChild
(
const
uint32_t
&
aDisplayID
const
float
&
aLeftEyeX
const
float
&
aLeftEyeY
const
float
&
aLeftEyeWidth
const
float
&
aLeftEyeHeight
const
float
&
aRightEyeX
const
float
&
aRightEyeY
const
float
&
aRightEyeWidth
const
float
&
aRightEyeHeight
)
override
;
virtual
bool
DeallocPVRLayerChild
(
PVRLayerChild
*
actor
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateDisplayInfo
(
nsTArray
<
VRDisplayInfo
>
&
&
aDisplayUpdates
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvParentAsyncMessages
(
InfallibleTArray
<
AsyncParentMessageData
>
&
&
aMessages
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyVSync
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyVRVSync
(
const
uint32_t
&
aDisplayID
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvGamepadUpdate
(
const
GamepadChangeEvent
&
aGamepadEvent
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvReplyGamepadVibrateHaptic
(
const
uint32_t
&
aPromiseID
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvReplyCreateVRServiceTestDisplay
(
const
nsCString
&
aID
const
uint32_t
&
aPromiseID
const
uint32_t
&
aDeviceID
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvReplyCreateVRServiceTestController
(
const
nsCString
&
aID
const
uint32_t
&
aPromiseID
const
uint32_t
&
aDeviceID
)
override
;
virtual
bool
AllocShmem
(
size_t
aSize
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aType
ipc
:
:
Shmem
*
aShmem
)
override
;
virtual
bool
AllocUnsafeShmem
(
size_t
aSize
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aType
ipc
:
:
Shmem
*
aShmem
)
override
;
virtual
bool
DeallocShmem
(
ipc
:
:
Shmem
&
aShmem
)
override
;
virtual
bool
IsSameProcess
(
)
const
override
{
return
OtherPid
(
)
=
=
base
:
:
GetCurrentProcId
(
)
;
}
friend
class
layers
:
:
CompositorBridgeChild
;
private
:
void
FireDOMVRDisplayMountedEventInternal
(
uint32_t
aDisplayID
)
;
void
FireDOMVRDisplayUnmountedEventInternal
(
uint32_t
aDisplayID
)
;
void
FireDOMVRDisplayConnectEventInternal
(
uint32_t
aDisplayID
)
;
void
FireDOMVRDisplayDisconnectEventInternal
(
uint32_t
aDisplayID
)
;
void
FireDOMVRDisplayPresentChangeEventInternal
(
uint32_t
aDisplayID
)
;
void
NotifyNotUsed
(
uint64_t
aTextureId
uint64_t
aFwdTransactionId
)
;
nsTArray
<
RefPtr
<
VRDisplayClient
>
>
mDisplays
;
bool
mDisplaysInitialized
;
nsTArray
<
uint64_t
>
mNavigatorCallbacks
;
int32_t
mInputFrameID
;
MessageLoop
*
mMessageLoop
;
struct
FrameRequest
;
nsTArray
<
FrameRequest
>
mFrameRequestCallbacks
;
int32_t
mFrameRequestCallbackCounter
;
mozilla
:
:
TimeStamp
mStartTimeStamp
;
nsTArray
<
RefPtr
<
dom
:
:
VREventObserver
>
>
mListeners
;
nsDataHashtable
<
nsUint64HashKey
RefPtr
<
layers
:
:
TextureClient
>
>
mTexturesWaitingRecycled
;
layers
:
:
LayersBackend
mBackend
;
RefPtr
<
layers
:
:
SyncObject
>
mSyncObject
;
nsRefPtrHashtable
<
nsUint32HashKey
dom
:
:
Promise
>
mGamepadPromiseList
;
uint32_t
mPromiseID
;
nsRefPtrHashtable
<
nsUint32HashKey
dom
:
:
Promise
>
mPromiseList
;
RefPtr
<
dom
:
:
VRMockDisplay
>
mVRMockDisplay
;
DISALLOW_COPY_AND_ASSIGN
(
VRManagerChild
)
;
}
;
}
}
#
endif
