include
LayersSurfaces
;
include
protocol
PVRLayer
;
include
LayersMessages
;
include
GamepadEventTypes
;
include
"
VRMessageUtils
.
h
"
;
include
"
VRManagerParent
.
h
"
;
include
"
VRManagerChild
.
h
"
;
using
struct
mozilla
:
:
gfx
:
:
VRFieldOfView
from
"
gfxVR
.
h
"
;
using
struct
mozilla
:
:
gfx
:
:
VRDisplayInfo
from
"
gfxVR
.
h
"
;
using
struct
mozilla
:
:
gfx
:
:
VRSensorUpdate
from
"
gfxVR
.
h
"
;
using
struct
mozilla
:
:
gfx
:
:
VRHMDSensorState
from
"
gfxVR
.
h
"
;
using
struct
mozilla
:
:
gfx
:
:
VRControllerInfo
from
"
gfxVR
.
h
"
;
using
struct
mozilla
:
:
gfx
:
:
VRSubmitFrameResultInfo
from
"
gfxVR
.
h
"
;
using
mozilla
:
:
gfx
:
:
VRDisplayCapabilityFlags
from
"
moz_external_vr
.
h
"
;
using
mozilla
:
:
layers
:
:
LayersBackend
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
TextureFlags
from
"
mozilla
/
layers
/
CompositorTypes
.
h
"
;
using
mozilla
:
:
dom
:
:
GamepadHandle
from
"
mozilla
/
dom
/
GamepadHandle
.
h
"
;
namespace
mozilla
{
namespace
gfx
{
[
NeedsOtherPid
ChildImpl
=
"
VRManagerChild
"
ParentImpl
=
"
VRManagerParent
"
]
sync
protocol
PVRManager
{
manages
PVRLayer
;
parent
:
async
PVRLayer
(
uint32_t
aDisplayID
uint32_t
aGroup
)
;
async
DetectRuntimes
(
)
;
async
RefreshDisplays
(
)
;
async
SetGroupMask
(
uint32_t
aDisplayID
uint32_t
aGroupMask
)
;
async
SetHaveEventListener
(
bool
aHaveEventListener
)
;
async
ControllerListenerAdded
(
)
;
async
ControllerListenerRemoved
(
)
;
async
VibrateHaptic
(
GamepadHandle
aGamepadHandle
uint32_t
aHapticIndex
double
aIntensity
double
aDuration
uint32_t
aPromiseID
)
;
async
StopVibrateHaptic
(
GamepadHandle
aGamepadHandle
)
;
async
StartVRNavigation
(
uint32_t
aDeviceID
)
;
async
StopVRNavigation
(
uint32_t
aDeviceID
TimeDuration
aDuration
)
;
async
StartActivity
(
)
;
async
StopActivity
(
)
;
async
RunPuppet
(
uint64_t
[
]
buffer
)
;
async
ResetPuppet
(
)
;
child
:
async
UpdateDisplayInfo
(
VRDisplayInfo
aDisplayInfo
)
;
async
UpdateRuntimeCapabilities
(
VRDisplayCapabilityFlags
aCapabilities
)
;
async
ReplyGamepadVibrateHaptic
(
uint32_t
aPromiseID
)
;
async
NotifyPuppetCommandBufferCompleted
(
bool
aSuccess
)
;
async
NotifyPuppetResetComplete
(
)
;
async
__delete__
(
)
;
}
;
}
}
