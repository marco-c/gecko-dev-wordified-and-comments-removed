#
include
"
FxRWindowManager
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
nsWindow
.
h
"
static
mozilla
:
:
StaticAutoPtr
<
FxRWindowManager
>
sFxrWinMgrInstance
;
FxRWindowManager
*
FxRWindowManager
:
:
GetInstance
(
)
{
if
(
sFxrWinMgrInstance
=
=
nullptr
)
{
sFxrWinMgrInstance
=
new
FxRWindowManager
(
)
;
ClearOnShutdown
(
&
sFxrWinMgrInstance
)
;
}
return
sFxrWinMgrInstance
;
}
FxRWindowManager
:
:
FxRWindowManager
(
)
:
mWindow
(
nullptr
)
{
}
void
FxRWindowManager
:
:
AddWindow
(
nsPIDOMWindowOuter
*
aWindow
)
{
if
(
mWindow
!
=
nullptr
)
{
MOZ_CRASH
(
"
Only
one
window
is
supported
"
)
;
}
mWindow
=
aWindow
;
}
bool
FxRWindowManager
:
:
IsFxRWindow
(
uint64_t
aOuterWindowID
)
{
return
(
mWindow
!
=
nullptr
)
&
&
(
mWindow
-
>
WindowID
(
)
=
=
aOuterWindowID
)
;
}
bool
FxRWindowManager
:
:
IsFxRWindow
(
const
nsWindow
*
aWindow
)
const
{
return
(
mWindow
!
=
nullptr
)
&
&
(
aWindow
=
=
mozilla
:
:
widget
:
:
WidgetUtils
:
:
DOMWindowToWidget
(
mWindow
)
.
take
(
)
)
;
}
uint64_t
FxRWindowManager
:
:
GetWindowID
(
)
const
{
MOZ_ASSERT
(
mWindow
)
;
return
mWindow
-
>
WindowID
(
)
;
}
