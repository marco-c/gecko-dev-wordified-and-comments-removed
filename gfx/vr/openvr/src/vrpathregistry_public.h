#
pragma
once
#
include
<
string
>
#
include
<
vector
>
#
include
<
stdint
.
h
>
static
const
char
*
k_pchRuntimeOverrideVar
=
"
VR_OVERRIDE
"
;
static
const
char
*
k_pchConfigOverrideVar
=
"
VR_CONFIG_PATH
"
;
static
const
char
*
k_pchLogOverrideVar
=
"
VR_LOG_PATH
"
;
class
CVRPathRegistry_Public
{
public
:
static
std
:
:
string
GetVRPathRegistryFilename
(
)
;
static
std
:
:
string
GetOpenVRConfigPath
(
)
;
public
:
CVRPathRegistry_Public
(
)
;
static
bool
GetPaths
(
std
:
:
string
*
psRuntimePath
std
:
:
string
*
psConfigPath
std
:
:
string
*
psLogPath
const
char
*
pchConfigPathOverride
const
char
*
pchLogPathOverride
std
:
:
vector
<
std
:
:
string
>
*
pvecExternalDrivers
=
NULL
)
;
bool
BLoadFromFile
(
)
;
bool
BSaveToFile
(
)
const
;
bool
ToJsonString
(
std
:
:
string
&
sJsonString
)
;
std
:
:
string
GetRuntimePath
(
)
const
;
std
:
:
string
GetConfigPath
(
)
const
;
std
:
:
string
GetLogPath
(
)
const
;
protected
:
typedef
std
:
:
vector
<
std
:
:
string
>
StringVector_t
;
StringVector_t
m_vecRuntimePath
;
StringVector_t
m_vecLogPath
;
StringVector_t
m_vecConfigPath
;
StringVector_t
m_vecExternalDrivers
;
}
;
