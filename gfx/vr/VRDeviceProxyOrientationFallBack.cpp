#
include
<
math
.
h
>
#
include
"
VRDeviceProxyOrientationFallBack
.
h
"
#
include
"
mozilla
/
dom
/
ScreenOrientation
.
h
"
#
include
"
mozilla
/
Hal
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
#
ifndef
M_SQRT1_2
#
define
M_SQRT1_2
0
.
70710678118654752440
#
endif
#
ifdef
ANDROID
#
include
<
android
/
log
.
h
>
#
define
LOG
(
args
.
.
.
)
__android_log_print
(
ANDROID_LOG_INFO
"
GeckoVR
"
#
#
args
)
#
else
#
define
LOG
(
.
.
.
)
do
{
}
while
(
0
)
#
endif
namespace
{
Matrix4x4
RemapMatrixForOrientation
(
dom
:
:
ScreenOrientationInternal
screenConfig
const
Matrix4x4
&
aMatrix
)
{
Matrix4x4
out
;
const
float
*
in
=
&
aMatrix
.
_11
;
float
*
o
=
&
out
.
_11
;
if
(
screenConfig
=
=
dom
:
:
eScreenOrientation_LandscapePrimary
)
{
o
[
0
]
=
-
in
[
1
]
;
o
[
1
]
=
in
[
0
]
;
o
[
2
]
=
in
[
2
]
;
o
[
4
]
=
-
in
[
5
]
;
o
[
5
]
=
in
[
4
]
;
o
[
6
]
=
in
[
6
]
;
o
[
8
]
=
-
in
[
9
]
;
o
[
9
]
=
in
[
8
]
;
o
[
10
]
=
in
[
10
]
;
}
else
if
(
screenConfig
=
=
dom
:
:
eScreenOrientation_LandscapeSecondary
)
{
o
[
0
]
=
in
[
1
]
;
o
[
1
]
=
-
in
[
0
]
;
o
[
2
]
=
in
[
2
]
;
o
[
4
]
=
in
[
5
]
;
o
[
5
]
=
-
in
[
4
]
;
o
[
6
]
=
in
[
6
]
;
o
[
8
]
=
in
[
9
]
;
o
[
9
]
=
-
in
[
8
]
;
o
[
10
]
=
in
[
10
]
;
}
else
if
(
screenConfig
=
=
dom
:
:
eScreenOrientation_PortraitPrimary
)
{
out
=
aMatrix
;
}
else
if
(
screenConfig
=
=
dom
:
:
eScreenOrientation_PortraitSecondary
)
{
o
[
0
]
=
in
[
0
]
;
o
[
1
]
=
in
[
2
]
;
o
[
2
]
=
-
in
[
1
]
;
o
[
4
]
=
in
[
4
]
;
o
[
5
]
=
in
[
6
]
;
o
[
6
]
=
-
in
[
5
]
;
o
[
8
]
=
in
[
8
]
;
o
[
9
]
=
in
[
10
]
;
o
[
10
]
=
-
in
[
9
]
;
}
else
{
MOZ_ASSERT
(
0
"
gfxVRCardboard
:
:
RemapMatrixForOrientation
invalid
screenConfig
"
)
;
}
return
out
;
}
}
namespace
mozilla
{
namespace
gfx
{
VRDeviceProxyOrientationFallBack
:
:
VRDeviceProxyOrientationFallBack
(
const
VRDeviceUpdate
&
aDeviceUpdate
)
:
VRDeviceProxy
(
aDeviceUpdate
)
mOrient
(
dom
:
:
eScreenOrientation_PortraitPrimary
)
mTracking
(
false
)
{
MOZ_COUNT_CTOR_INHERITED
(
VRDeviceProxyOrientationFallBack
VRDeviceProxy
)
;
}
VRDeviceProxyOrientationFallBack
:
:
~
VRDeviceProxyOrientationFallBack
(
)
{
StopSensorTracking
(
)
;
MOZ_COUNT_DTOR_INHERITED
(
VRDeviceProxyOrientationFallBack
VRDeviceProxy
)
;
}
void
VRDeviceProxyOrientationFallBack
:
:
StartSensorTracking
(
)
{
if
(
!
mTracking
)
{
hal
:
:
ScreenConfiguration
sconfig
;
hal
:
:
GetCurrentScreenConfiguration
(
&
sconfig
)
;
this
-
>
Notify
(
sconfig
)
;
hal
:
:
RegisterSensorObserver
(
hal
:
:
SENSOR_GAME_ROTATION_VECTOR
this
)
;
hal
:
:
RegisterScreenConfigurationObserver
(
this
)
;
mSensorState
.
Clear
(
)
;
mTracking
=
true
;
}
}
void
VRDeviceProxyOrientationFallBack
:
:
StopSensorTracking
(
)
{
if
(
mTracking
)
{
hal
:
:
UnregisterScreenConfigurationObserver
(
this
)
;
hal
:
:
UnregisterSensorObserver
(
hal
:
:
SENSOR_GAME_ROTATION_VECTOR
this
)
;
mTracking
=
false
;
}
}
void
VRDeviceProxyOrientationFallBack
:
:
Notify
(
const
hal
:
:
ScreenConfiguration
&
config
)
{
mOrient
=
config
.
orientation
(
)
;
if
(
mOrient
=
=
dom
:
:
eScreenOrientation_LandscapePrimary
)
{
mScreenTransform
=
Quaternion
(
-
0
.
5f
0
.
5f
0
.
5f
0
.
5f
)
;
}
else
if
(
mOrient
=
=
dom
:
:
eScreenOrientation_LandscapeSecondary
)
{
mScreenTransform
=
Quaternion
(
-
0
.
5f
-
0
.
5f
-
0
.
5f
0
.
5f
)
;
}
else
if
(
mOrient
=
=
dom
:
:
eScreenOrientation_PortraitPrimary
)
{
mScreenTransform
=
Quaternion
(
(
float
)
-
M_SQRT1_2
0
.
f
0
.
f
(
float
)
M_SQRT1_2
)
;
}
else
if
(
mOrient
=
=
dom
:
:
eScreenOrientation_PortraitSecondary
)
{
mScreenTransform
=
Quaternion
(
(
float
)
M_SQRT1_2
0
.
f
0
.
f
(
float
)
M_SQRT1_2
)
;
}
}
void
VRDeviceProxyOrientationFallBack
:
:
Notify
(
const
hal
:
:
SensorData
&
data
)
{
if
(
data
.
sensor
(
)
!
=
hal
:
:
SENSOR_GAME_ROTATION_VECTOR
)
return
;
const
nsTArray
<
float
>
&
sensorValues
=
data
.
values
(
)
;
mSavedLastSensor
.
Set
(
sensorValues
[
0
]
sensorValues
[
1
]
sensorValues
[
2
]
sensorValues
[
3
]
)
;
mSavedLastSensorTime
=
data
.
timestamp
(
)
;
mNeedsSensorCompute
=
true
;
}
void
VRDeviceProxyOrientationFallBack
:
:
ZeroSensor
(
)
{
mSensorZeroInverse
=
mSavedLastSensor
;
mSensorZeroInverse
.
Invert
(
)
;
}
void
VRDeviceProxyOrientationFallBack
:
:
ComputeStateFromLastSensor
(
)
{
if
(
!
mNeedsSensorCompute
)
return
;
Quaternion
q
=
mSensorZeroInverse
*
mSavedLastSensor
;
Matrix4x4
qm
;
qm
.
SetRotationFromQuaternion
(
q
)
;
Matrix4x4
qmRemapped
=
RemapMatrixForOrientation
(
mOrient
qm
)
;
q
.
SetFromRotationMatrix
(
qmRemapped
)
;
q
=
mScreenTransform
*
q
;
mSensorState
.
flags
|
=
VRStateValidFlags
:
:
State_Orientation
;
mSensorState
.
orientation
[
0
]
=
q
.
x
;
mSensorState
.
orientation
[
1
]
=
q
.
y
;
mSensorState
.
orientation
[
2
]
=
q
.
z
;
mSensorState
.
orientation
[
3
]
=
q
.
w
;
mSensorState
.
timestamp
=
mSavedLastSensorTime
/
1000000
.
0
;
mNeedsSensorCompute
=
false
;
}
VRHMDSensorState
VRDeviceProxyOrientationFallBack
:
:
GetSensorState
(
)
{
StartSensorTracking
(
)
;
ComputeStateFromLastSensor
(
)
;
return
mSensorState
;
}
VRHMDSensorState
VRDeviceProxyOrientationFallBack
:
:
GetImmediateSensorState
(
)
{
return
GetSensorState
(
)
;
}
}
}
