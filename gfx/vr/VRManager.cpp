#
include
"
VRManager
.
h
"
#
include
"
VRManagerParent
.
h
"
#
include
"
VRThread
.
h
"
#
include
"
gfxVR
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
dom
/
VRDisplay
.
h
"
#
include
"
mozilla
/
dom
/
GamepadEventTypes
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
gfxVR
.
h
"
#
include
"
gfxVRExternal
.
h
"
#
include
"
gfxVRPuppet
.
h
"
#
include
"
ipc
/
VRLayerParent
.
h
"
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
#
include
"
service
/
VRService
.
h
"
#
include
"
service
/
VRServiceManager
.
h
"
#
endif
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
layers
;
using
namespace
mozilla
:
:
gl
;
namespace
mozilla
{
namespace
gfx
{
static
StaticRefPtr
<
VRManager
>
sVRManagerSingleton
;
const
uint32_t
kVRActiveTaskInterval
=
1
;
const
uint32_t
kVRIdleTaskInterval
=
100
;
void
VRManager
:
:
ManagerInit
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sVRManagerSingleton
=
=
nullptr
)
{
sVRManagerSingleton
=
new
VRManager
(
)
;
ClearOnShutdown
(
&
sVRManagerSingleton
)
;
}
}
VRManager
:
:
VRManager
(
)
:
mInitialized
(
false
)
mAccumulator100ms
(
0
.
0f
)
mVRDisplaysRequested
(
false
)
mVRDisplaysRequestedNonFocus
(
false
)
mVRControllersRequested
(
false
)
mVRServiceStarted
(
false
)
mTaskInterval
(
0
)
{
MOZ_COUNT_CTOR
(
VRManager
)
;
MOZ_ASSERT
(
sVRManagerSingleton
=
=
nullptr
)
;
RefPtr
<
VRSystemManager
>
mgr
;
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
if
(
!
StaticPrefs
:
:
VRProcessEnabled
(
)
|
|
!
XRE_IsGPUProcess
(
)
)
{
VRServiceManager
:
:
Get
(
)
.
CreateService
(
)
;
}
if
(
VRServiceManager
:
:
Get
(
)
.
IsServiceValid
(
)
)
{
mExternalManager
=
VRSystemManagerExternal
:
:
Create
(
VRServiceManager
:
:
Get
(
)
.
GetAPIShmem
(
)
)
;
}
if
(
mExternalManager
)
{
mManagers
.
AppendElement
(
mExternalManager
)
;
}
#
endif
if
(
!
mExternalManager
)
{
mExternalManager
=
VRSystemManagerExternal
:
:
Create
(
)
;
if
(
mExternalManager
)
{
mManagers
.
AppendElement
(
mExternalManager
)
;
}
}
if
(
XRE_IsParentProcess
(
)
&
&
StaticPrefs
:
:
VREnabled
(
)
)
{
Preferences
:
:
SetBool
(
"
dom
.
gamepad
.
extensions
.
enabled
"
true
)
;
}
}
VRManager
:
:
~
VRManager
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mInitialized
)
;
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
if
(
VRServiceManager
:
:
Get
(
)
.
IsServiceValid
(
)
)
{
VRServiceManager
:
:
Get
(
)
.
Shutdown
(
)
;
}
#
endif
MOZ_COUNT_DTOR
(
VRManager
)
;
}
void
VRManager
:
:
Destroy
(
)
{
StopTasks
(
)
;
mVRDisplayIDs
.
Clear
(
)
;
mVRControllerIDs
.
Clear
(
)
;
for
(
uint32_t
i
=
0
;
i
<
mManagers
.
Length
(
)
;
+
+
i
)
{
mManagers
[
i
]
-
>
Destroy
(
)
;
}
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
if
(
VRServiceManager
:
:
Get
(
)
.
IsServiceValid
(
)
)
{
VRServiceManager
:
:
Get
(
)
.
Shutdown
(
)
;
}
#
endif
Shutdown
(
)
;
mInitialized
=
false
;
}
void
VRManager
:
:
Shutdown
(
)
{
mVRDisplayIDs
.
Clear
(
)
;
mVRControllerIDs
.
Clear
(
)
;
for
(
uint32_t
i
=
0
;
i
<
mManagers
.
Length
(
)
;
+
+
i
)
{
mManagers
[
i
]
-
>
Shutdown
(
)
;
}
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
if
(
VRServiceManager
:
:
Get
(
)
.
IsServiceValid
(
)
)
{
VRServiceManager
:
:
Get
(
)
.
Stop
(
)
;
}
if
(
XRE_IsGPUProcess
(
)
&
&
StaticPrefs
:
:
VRProcessEnabled
(
)
&
&
mVRServiceStarted
)
{
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
VRServiceManager
:
:
ShutdownVRProcess
"
[
]
(
)
-
>
void
{
VRServiceManager
:
:
Get
(
)
.
ShutdownVRProcess
(
)
;
}
)
;
NS_DispatchToMainThread
(
task
.
forget
(
)
)
;
}
#
endif
mVRServiceStarted
=
false
;
}
void
VRManager
:
:
Init
(
)
{
mInitialized
=
true
;
}
VRManager
*
VRManager
:
:
Get
(
)
{
MOZ_ASSERT
(
sVRManagerSingleton
!
=
nullptr
)
;
return
sVRManagerSingleton
;
}
void
VRManager
:
:
AddVRManagerParent
(
VRManagerParent
*
aVRManagerParent
)
{
if
(
mVRManagerParents
.
IsEmpty
(
)
)
{
Init
(
)
;
}
mVRManagerParents
.
PutEntry
(
aVRManagerParent
)
;
}
void
VRManager
:
:
RemoveVRManagerParent
(
VRManagerParent
*
aVRManagerParent
)
{
mVRManagerParents
.
RemoveEntry
(
aVRManagerParent
)
;
if
(
mVRManagerParents
.
IsEmpty
(
)
)
{
Destroy
(
)
;
}
}
void
VRManager
:
:
UpdateRequestedDevices
(
)
{
bool
bHaveEventListener
=
false
;
bool
bHaveEventListenerNonFocus
=
false
;
bool
bHaveControllerListener
=
false
;
for
(
auto
iter
=
mVRManagerParents
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
VRManagerParent
*
vmp
=
iter
.
Get
(
)
-
>
GetKey
(
)
;
bHaveEventListener
|
=
vmp
-
>
HaveEventListener
(
)
&
&
vmp
-
>
GetVRActiveStatus
(
)
;
bHaveEventListenerNonFocus
|
=
vmp
-
>
HaveEventListener
(
)
&
&
!
vmp
-
>
GetVRActiveStatus
(
)
;
bHaveControllerListener
|
=
vmp
-
>
HaveControllerListener
(
)
;
}
mVRDisplaysRequested
=
bHaveEventListener
;
mVRDisplaysRequestedNonFocus
=
bHaveEventListenerNonFocus
;
mVRControllersRequested
=
mVRDisplaysRequested
&
&
bHaveControllerListener
;
}
void
VRManager
:
:
NotifyVsync
(
const
TimeStamp
&
aVsyncTimestamp
)
{
for
(
const
auto
&
manager
:
mManagers
)
{
manager
-
>
NotifyVSync
(
)
;
}
}
void
VRManager
:
:
StartTasks
(
)
{
if
(
!
mTaskTimer
)
{
mTaskInterval
=
GetOptimalTaskInterval
(
)
;
mTaskTimer
=
NS_NewTimer
(
)
;
mTaskTimer
-
>
SetTarget
(
CompositorThreadHolder
:
:
Loop
(
)
-
>
SerialEventTarget
(
)
)
;
mTaskTimer
-
>
InitWithNamedFuncCallback
(
TaskTimerCallback
this
mTaskInterval
nsITimer
:
:
TYPE_REPEATING_PRECISE_CAN_SKIP
"
VRManager
:
:
TaskTimerCallback
"
)
;
}
}
void
VRManager
:
:
StopTasks
(
)
{
if
(
mTaskTimer
)
{
mTaskTimer
-
>
Cancel
(
)
;
mTaskTimer
=
nullptr
;
}
}
void
VRManager
:
:
TaskTimerCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
{
VRManager
*
self
=
static_cast
<
VRManager
*
>
(
aClosure
)
;
self
-
>
RunTasks
(
)
;
}
void
VRManager
:
:
RunTasks
(
)
{
if
(
!
mInitialized
)
{
return
;
}
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
double
lastTickMs
=
mAccumulator100ms
;
double
deltaTime
=
0
.
0f
;
if
(
!
mLastTickTime
.
IsNull
(
)
)
{
deltaTime
=
(
now
-
mLastTickTime
)
.
ToMilliseconds
(
)
;
}
mAccumulator100ms
+
=
deltaTime
;
mLastTickTime
=
now
;
if
(
deltaTime
>
0
.
0f
&
&
floor
(
mAccumulator100ms
)
!
=
floor
(
lastTickMs
)
)
{
Run1msTasks
(
deltaTime
)
;
}
if
(
floor
(
mAccumulator100ms
*
0
.
1f
)
!
=
floor
(
lastTickMs
*
0
.
1f
)
)
{
Run10msTasks
(
)
;
}
if
(
mAccumulator100ms
>
=
100
.
0f
)
{
Run100msTasks
(
)
;
mAccumulator100ms
=
fmod
(
mAccumulator100ms
100
.
0f
)
;
}
uint32_t
optimalTaskInterval
=
GetOptimalTaskInterval
(
)
;
if
(
mTaskTimer
&
&
optimalTaskInterval
!
=
mTaskInterval
)
{
mTaskTimer
-
>
SetDelay
(
optimalTaskInterval
)
;
mTaskInterval
=
optimalTaskInterval
;
}
}
uint32_t
VRManager
:
:
GetOptimalTaskInterval
(
)
{
bool
wantGranularTasks
=
mVRDisplaysRequested
|
|
mVRControllersRequested
|
|
mVRDisplayIDs
.
Length
(
)
|
|
mVRControllerIDs
.
Length
(
)
;
if
(
wantGranularTasks
)
{
return
kVRActiveTaskInterval
;
}
return
kVRIdleTaskInterval
;
}
void
VRManager
:
:
Run1msTasks
(
double
aDeltaTime
)
{
for
(
const
auto
&
manager
:
mManagers
)
{
manager
-
>
Run1msTasks
(
aDeltaTime
)
;
}
for
(
const
auto
&
displayID
:
mVRDisplayIDs
)
{
RefPtr
<
VRDisplayHost
>
display
(
GetDisplay
(
displayID
)
)
;
if
(
display
)
{
display
-
>
Run1msTasks
(
aDeltaTime
)
;
}
}
}
void
VRManager
:
:
Run10msTasks
(
)
{
UpdateRequestedDevices
(
)
;
for
(
const
auto
&
manager
:
mManagers
)
{
manager
-
>
Run10msTasks
(
)
;
}
for
(
const
auto
&
displayID
:
mVRDisplayIDs
)
{
RefPtr
<
VRDisplayHost
>
display
(
GetDisplay
(
displayID
)
)
;
if
(
display
)
{
display
-
>
Run10msTasks
(
)
;
}
}
}
void
VRManager
:
:
Run100msTasks
(
)
{
RefreshVRDisplays
(
)
;
RefreshVRControllers
(
)
;
CheckForInactiveTimeout
(
)
;
for
(
const
auto
&
manager
:
mManagers
)
{
manager
-
>
Run100msTasks
(
)
;
}
for
(
const
auto
&
displayID
:
mVRDisplayIDs
)
{
RefPtr
<
VRDisplayHost
>
display
(
GetDisplay
(
displayID
)
)
;
if
(
display
)
{
display
-
>
Run100msTasks
(
)
;
}
}
}
void
VRManager
:
:
CheckForInactiveTimeout
(
)
{
if
(
mVRDisplaysRequested
|
|
mVRDisplaysRequestedNonFocus
|
|
mVRControllersRequested
)
{
mLastActiveTime
=
TimeStamp
:
:
Now
(
)
;
}
else
if
(
mLastActiveTime
.
IsNull
(
)
)
{
Shutdown
(
)
;
}
else
{
TimeDuration
duration
=
TimeStamp
:
:
Now
(
)
-
mLastActiveTime
;
if
(
duration
.
ToMilliseconds
(
)
>
StaticPrefs
:
:
VRInactiveTimeout
(
)
)
{
Shutdown
(
)
;
mLastDisplayEnumerationTime
=
TimeStamp
(
)
;
}
}
}
void
VRManager
:
:
NotifyVRVsync
(
const
uint32_t
&
aDisplayID
)
{
for
(
const
auto
&
manager
:
mManagers
)
{
if
(
manager
-
>
GetIsPresenting
(
)
)
{
manager
-
>
HandleInput
(
)
;
}
}
RefPtr
<
VRDisplayHost
>
display
=
GetDisplay
(
aDisplayID
)
;
if
(
display
)
{
display
-
>
StartFrame
(
)
;
}
DispatchVRDisplayInfoUpdate
(
)
;
}
void
VRManager
:
:
EnumerateVRDisplays
(
)
{
StartTasks
(
)
;
if
(
!
mLastDisplayEnumerationTime
.
IsNull
(
)
)
{
TimeDuration
duration
=
TimeStamp
:
:
Now
(
)
-
mLastDisplayEnumerationTime
;
if
(
duration
.
ToMilliseconds
(
)
<
StaticPrefs
:
:
VRDisplayEnumerateInterval
(
)
)
{
return
;
}
}
for
(
const
auto
&
manager
:
mManagers
)
{
if
(
manager
-
>
ShouldInhibitEnumeration
(
)
)
{
return
;
}
}
mLastDisplayEnumerationTime
=
TimeStamp
:
:
Now
(
)
;
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
if
(
!
mVRServiceStarted
)
{
if
(
XRE_IsGPUProcess
(
)
&
&
StaticPrefs
:
:
VRProcessEnabled
(
)
)
{
VRServiceManager
:
:
Get
(
)
.
CreateVRProcess
(
)
;
mVRServiceStarted
=
true
;
}
else
{
if
(
VRServiceManager
:
:
Get
(
)
.
IsServiceValid
(
)
)
{
VRServiceManager
:
:
Get
(
)
.
Start
(
)
;
mVRServiceStarted
=
true
;
}
}
}
#
endif
for
(
const
auto
&
manager
:
mManagers
)
{
manager
-
>
Enumerate
(
)
;
if
(
manager
-
>
ShouldInhibitEnumeration
(
)
)
{
return
;
}
}
nsTArray
<
RefPtr
<
gfx
:
:
VRDisplayHost
>
>
displays
;
for
(
const
auto
&
manager
:
mManagers
)
{
manager
-
>
GetHMDs
(
displays
)
;
}
mVRDisplayIDs
.
Clear
(
)
;
for
(
const
auto
&
display
:
displays
)
{
mVRDisplayIDs
.
AppendElement
(
display
-
>
GetDisplayInfo
(
)
.
GetDisplayID
(
)
)
;
}
nsTArray
<
RefPtr
<
gfx
:
:
VRControllerHost
>
>
controllers
;
for
(
const
auto
&
manager
:
mManagers
)
{
manager
-
>
GetControllers
(
controllers
)
;
}
mVRControllerIDs
.
Clear
(
)
;
for
(
const
auto
&
controller
:
controllers
)
{
mVRControllerIDs
.
AppendElement
(
controller
-
>
GetControllerInfo
(
)
.
GetControllerID
(
)
)
;
}
}
void
VRManager
:
:
RefreshVRDisplays
(
bool
aMustDispatch
)
{
if
(
mVRDisplaysRequested
|
|
aMustDispatch
)
{
EnumerateVRDisplays
(
)
;
}
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
VRServiceManager
:
:
Get
(
)
.
Refresh
(
)
;
#
endif
nsTArray
<
RefPtr
<
gfx
:
:
VRDisplayHost
>
>
displays
;
for
(
const
auto
&
manager
:
mManagers
)
{
manager
-
>
GetHMDs
(
displays
)
;
}
bool
displayInfoChanged
=
false
;
bool
displaySetChanged
=
false
;
if
(
displays
.
Length
(
)
!
=
mVRDisplayIDs
.
Length
(
)
)
{
displaySetChanged
=
true
;
}
for
(
const
auto
&
display
:
displays
)
{
if
(
!
GetDisplay
(
display
-
>
GetDisplayInfo
(
)
.
GetDisplayID
(
)
)
)
{
displaySetChanged
=
true
;
break
;
}
if
(
display
-
>
CheckClearDisplayInfoDirty
(
)
)
{
displayInfoChanged
=
true
;
break
;
}
}
if
(
displaySetChanged
)
{
mVRDisplayIDs
.
Clear
(
)
;
for
(
const
auto
&
display
:
displays
)
{
mVRDisplayIDs
.
AppendElement
(
display
-
>
GetDisplayInfo
(
)
.
GetDisplayID
(
)
)
;
}
}
if
(
displayInfoChanged
|
|
displaySetChanged
|
|
aMustDispatch
)
{
DispatchVRDisplayInfoUpdate
(
)
;
}
}
void
VRManager
:
:
DispatchVRDisplayInfoUpdate
(
)
{
nsTArray
<
VRDisplayInfo
>
update
;
GetVRDisplayInfo
(
update
)
;
for
(
auto
iter
=
mVRManagerParents
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
Unused
<
<
iter
.
Get
(
)
-
>
GetKey
(
)
-
>
SendUpdateDisplayInfo
(
update
)
;
}
}
void
VRManager
:
:
GetVRDisplayInfo
(
nsTArray
<
VRDisplayInfo
>
&
aDisplayInfo
)
{
aDisplayInfo
.
Clear
(
)
;
for
(
const
auto
&
displayID
:
mVRDisplayIDs
)
{
RefPtr
<
VRDisplayHost
>
display
(
GetDisplay
(
displayID
)
)
;
if
(
display
)
{
aDisplayInfo
.
AppendElement
(
display
-
>
GetDisplayInfo
(
)
)
;
}
}
}
RefPtr
<
gfx
:
:
VRDisplayHost
>
VRManager
:
:
GetDisplay
(
const
uint32_t
&
aDisplayID
)
{
bool
found
=
false
;
for
(
const
auto
&
displayID
:
mVRDisplayIDs
)
{
if
(
displayID
=
=
aDisplayID
)
{
found
=
true
;
break
;
}
}
if
(
found
)
{
nsTArray
<
RefPtr
<
gfx
:
:
VRDisplayHost
>
>
displays
;
for
(
const
auto
&
manager
:
mManagers
)
{
manager
-
>
GetHMDs
(
displays
)
;
for
(
const
auto
&
display
:
displays
)
{
if
(
display
-
>
GetDisplayInfo
(
)
.
GetDisplayID
(
)
=
=
aDisplayID
)
{
return
display
;
}
}
}
}
return
nullptr
;
}
RefPtr
<
gfx
:
:
VRControllerHost
>
VRManager
:
:
GetController
(
const
uint32_t
&
aControllerID
)
{
bool
found
=
false
;
for
(
const
auto
&
controllerID
:
mVRControllerIDs
)
{
if
(
controllerID
=
=
aControllerID
)
{
found
=
true
;
break
;
}
}
if
(
found
)
{
nsTArray
<
RefPtr
<
gfx
:
:
VRControllerHost
>
>
controllers
;
for
(
const
auto
&
manager
:
mManagers
)
{
manager
-
>
GetControllers
(
controllers
)
;
for
(
const
auto
&
controller
:
controllers
)
{
if
(
controller
-
>
GetControllerInfo
(
)
.
GetControllerID
(
)
=
=
aControllerID
)
{
return
controller
;
}
}
}
}
return
nullptr
;
}
void
VRManager
:
:
GetVRControllerInfo
(
nsTArray
<
VRControllerInfo
>
&
aControllerInfo
)
{
aControllerInfo
.
Clear
(
)
;
for
(
const
auto
&
controllerID
:
mVRControllerIDs
)
{
RefPtr
<
VRControllerHost
>
controller
(
GetController
(
controllerID
)
)
;
if
(
controller
)
{
aControllerInfo
.
AppendElement
(
controller
-
>
GetControllerInfo
(
)
)
;
}
}
}
void
VRManager
:
:
RefreshVRControllers
(
)
{
ScanForControllers
(
)
;
nsTArray
<
RefPtr
<
gfx
:
:
VRControllerHost
>
>
controllers
;
for
(
uint32_t
i
=
0
;
i
<
mManagers
.
Length
(
)
&
&
controllers
.
Length
(
)
=
=
0
;
+
+
i
)
{
mManagers
[
i
]
-
>
GetControllers
(
controllers
)
;
}
bool
controllerInfoChanged
=
false
;
if
(
controllers
.
Length
(
)
!
=
mVRControllerIDs
.
Length
(
)
)
{
controllerInfoChanged
=
true
;
}
for
(
const
auto
&
controller
:
controllers
)
{
if
(
!
GetController
(
controller
-
>
GetControllerInfo
(
)
.
GetControllerID
(
)
)
)
{
controllerInfoChanged
=
true
;
break
;
}
}
if
(
controllerInfoChanged
)
{
mVRControllerIDs
.
Clear
(
)
;
for
(
const
auto
&
controller
:
controllers
)
{
mVRControllerIDs
.
AppendElement
(
controller
-
>
GetControllerInfo
(
)
.
GetControllerID
(
)
)
;
}
}
}
void
VRManager
:
:
ScanForControllers
(
)
{
if
(
!
mLastControllerEnumerationTime
.
IsNull
(
)
)
{
TimeDuration
duration
=
TimeStamp
:
:
Now
(
)
-
mLastControllerEnumerationTime
;
if
(
duration
.
ToMilliseconds
(
)
<
StaticPrefs
:
:
VRControllerEnumerateInterval
(
)
)
{
return
;
}
}
if
(
!
mVRControllersRequested
)
{
return
;
}
for
(
uint32_t
i
=
0
;
i
<
mManagers
.
Length
(
)
;
+
+
i
)
{
mManagers
[
i
]
-
>
ScanForControllers
(
)
;
}
mLastControllerEnumerationTime
=
TimeStamp
:
:
Now
(
)
;
}
void
VRManager
:
:
RemoveControllers
(
)
{
for
(
uint32_t
i
=
0
;
i
<
mManagers
.
Length
(
)
;
+
+
i
)
{
mManagers
[
i
]
-
>
RemoveControllers
(
)
;
}
mVRControllerIDs
.
Clear
(
)
;
}
void
VRManager
:
:
CreateVRTestSystem
(
)
{
if
(
mPuppetManager
)
{
mPuppetManager
-
>
ClearTestDisplays
(
)
;
return
;
}
mPuppetManager
=
VRSystemManagerPuppet
:
:
Create
(
)
;
mManagers
.
AppendElement
(
mPuppetManager
)
;
}
VRSystemManagerPuppet
*
VRManager
:
:
GetPuppetManager
(
)
{
MOZ_ASSERT
(
mPuppetManager
)
;
return
mPuppetManager
;
}
VRSystemManagerExternal
*
VRManager
:
:
GetExternalManager
(
)
{
MOZ_ASSERT
(
mExternalManager
)
;
return
mExternalManager
;
}
template
<
class
T
>
void
VRManager
:
:
NotifyGamepadChange
(
uint32_t
aIndex
const
T
&
aInfo
)
{
dom
:
:
GamepadChangeEventBody
body
(
aInfo
)
;
dom
:
:
GamepadChangeEvent
e
(
aIndex
dom
:
:
GamepadServiceType
:
:
VR
body
)
;
for
(
auto
iter
=
mVRManagerParents
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
Unused
<
<
iter
.
Get
(
)
-
>
GetKey
(
)
-
>
SendGamepadUpdate
(
e
)
;
}
}
void
VRManager
:
:
VibrateHaptic
(
uint32_t
aControllerIdx
uint32_t
aHapticIndex
double
aIntensity
double
aDuration
const
VRManagerPromise
&
aPromise
)
{
for
(
uint32_t
i
=
0
;
i
<
mManagers
.
Length
(
)
;
+
+
i
)
{
mManagers
[
i
]
-
>
VibrateHaptic
(
aControllerIdx
aHapticIndex
aIntensity
aDuration
aPromise
)
;
}
}
void
VRManager
:
:
StopVibrateHaptic
(
uint32_t
aControllerIdx
)
{
for
(
const
auto
&
manager
:
mManagers
)
{
manager
-
>
StopVibrateHaptic
(
aControllerIdx
)
;
}
}
void
VRManager
:
:
NotifyVibrateHapticCompleted
(
const
VRManagerPromise
&
aPromise
)
{
aPromise
.
mParent
-
>
SendReplyGamepadVibrateHaptic
(
aPromise
.
mPromiseID
)
;
}
void
VRManager
:
:
DispatchSubmitFrameResult
(
uint32_t
aDisplayID
const
VRSubmitFrameResultInfo
&
aResult
)
{
for
(
auto
iter
=
mVRManagerParents
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
Unused
<
<
iter
.
Get
(
)
-
>
GetKey
(
)
-
>
SendDispatchSubmitFrameResult
(
aDisplayID
aResult
)
;
}
}
void
VRManager
:
:
StartVRNavigation
(
const
uint32_t
&
aDisplayID
)
{
RefPtr
<
VRDisplayHost
>
display
=
GetDisplay
(
aDisplayID
)
;
if
(
display
)
{
display
-
>
StartVRNavigation
(
)
;
}
}
void
VRManager
:
:
StopVRNavigation
(
const
uint32_t
&
aDisplayID
const
TimeDuration
&
aTimeout
)
{
RefPtr
<
VRDisplayHost
>
display
=
GetDisplay
(
aDisplayID
)
;
if
(
display
)
{
display
-
>
StopVRNavigation
(
aTimeout
)
;
}
}
bool
VRManager
:
:
IsPresenting
(
)
{
for
(
const
auto
&
manager
:
mManagers
)
{
if
(
manager
-
>
GetIsPresenting
(
)
)
{
return
true
;
}
}
return
false
;
}
}
}
