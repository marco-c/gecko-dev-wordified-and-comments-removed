#
include
"
VRManager
.
h
"
#
include
"
VRManagerParent
.
h
"
#
include
"
VRThread
.
h
"
#
include
"
gfxVR
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
dom
/
VRDisplay
.
h
"
#
include
"
mozilla
/
dom
/
GamepadEventTypes
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
gfxVR
.
h
"
#
if
defined
(
XP_WIN
)
#
include
"
gfxVROculus
.
h
"
#
endif
#
if
defined
(
XP_WIN
)
|
|
defined
(
XP_MACOSX
)
|
|
(
defined
(
XP_LINUX
)
&
&
!
defined
(
MOZ_WIDGET_ANDROID
)
)
#
include
"
gfxVROpenVR
.
h
"
#
include
"
gfxVROSVR
.
h
"
#
endif
#
include
"
gfxVRPuppet
.
h
"
#
include
"
ipc
/
VRLayerParent
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
layers
;
using
namespace
mozilla
:
:
gl
;
namespace
mozilla
{
namespace
gfx
{
static
StaticRefPtr
<
VRManager
>
sVRManagerSingleton
;
void
VRManager
:
:
ManagerInit
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sVRManagerSingleton
=
=
nullptr
)
{
sVRManagerSingleton
=
new
VRManager
(
)
;
ClearOnShutdown
(
&
sVRManagerSingleton
)
;
}
}
VRManager
:
:
VRManager
(
)
:
mInitialized
(
false
)
mVRTestSystemCreated
(
false
)
{
MOZ_COUNT_CTOR
(
VRManager
)
;
MOZ_ASSERT
(
sVRManagerSingleton
=
=
nullptr
)
;
RefPtr
<
VRSystemManager
>
mgr
;
#
if
defined
(
XP_WIN
)
mgr
=
VRSystemManagerOculus
:
:
Create
(
)
;
if
(
mgr
)
{
mManagers
.
AppendElement
(
mgr
)
;
}
#
endif
#
if
defined
(
XP_WIN
)
|
|
defined
(
XP_MACOSX
)
|
|
(
defined
(
XP_LINUX
)
&
&
!
defined
(
MOZ_WIDGET_ANDROID
)
)
mgr
=
VRSystemManagerOpenVR
:
:
Create
(
)
;
if
(
mgr
)
{
mManagers
.
AppendElement
(
mgr
)
;
}
mgr
=
VRSystemManagerOSVR
:
:
Create
(
)
;
if
(
mgr
)
{
mManagers
.
AppendElement
(
mgr
)
;
}
#
endif
if
(
XRE_IsParentProcess
(
)
&
&
gfxPrefs
:
:
VREnabled
(
)
)
{
Preferences
:
:
SetBool
(
"
dom
.
gamepad
.
extensions
.
enabled
"
true
)
;
}
}
VRManager
:
:
~
VRManager
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mInitialized
)
;
MOZ_COUNT_DTOR
(
VRManager
)
;
}
void
VRManager
:
:
Destroy
(
)
{
mVRDisplays
.
Clear
(
)
;
mVRControllers
.
Clear
(
)
;
for
(
uint32_t
i
=
0
;
i
<
mManagers
.
Length
(
)
;
+
+
i
)
{
mManagers
[
i
]
-
>
Destroy
(
)
;
}
mInitialized
=
false
;
}
void
VRManager
:
:
Shutdown
(
)
{
mVRDisplays
.
Clear
(
)
;
mVRControllers
.
Clear
(
)
;
for
(
uint32_t
i
=
0
;
i
<
mManagers
.
Length
(
)
;
+
+
i
)
{
mManagers
[
i
]
-
>
Shutdown
(
)
;
}
}
void
VRManager
:
:
Init
(
)
{
mInitialized
=
true
;
}
VRManager
*
VRManager
:
:
Get
(
)
{
MOZ_ASSERT
(
sVRManagerSingleton
!
=
nullptr
)
;
return
sVRManagerSingleton
;
}
void
VRManager
:
:
AddVRManagerParent
(
VRManagerParent
*
aVRManagerParent
)
{
if
(
mVRManagerParents
.
IsEmpty
(
)
)
{
Init
(
)
;
}
mVRManagerParents
.
PutEntry
(
aVRManagerParent
)
;
}
void
VRManager
:
:
RemoveVRManagerParent
(
VRManagerParent
*
aVRManagerParent
)
{
mVRManagerParents
.
RemoveEntry
(
aVRManagerParent
)
;
if
(
mVRManagerParents
.
IsEmpty
(
)
)
{
Destroy
(
)
;
}
}
void
VRManager
:
:
NotifyVsync
(
const
TimeStamp
&
aVsyncTimestamp
)
{
MOZ_ASSERT
(
VRListenerThreadHolder
:
:
IsInVRListenerThread
(
)
)
;
const
double
kVRDisplayRefreshMaxDuration
=
5000
;
const
double
kVRDisplayInactiveMaxDuration
=
30000
;
bool
bHaveEventListener
=
false
;
bool
bHaveControllerListener
=
false
;
for
(
auto
iter
=
mVRManagerParents
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
VRManagerParent
*
vmp
=
iter
.
Get
(
)
-
>
GetKey
(
)
;
bHaveEventListener
|
=
vmp
-
>
HaveEventListener
(
)
;
bHaveControllerListener
|
=
vmp
-
>
HaveControllerListener
(
)
;
}
nsTArray
<
RefPtr
<
VRDisplayHost
>
>
displays
;
for
(
auto
iter
=
mVRDisplays
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
displays
.
AppendElement
(
iter
.
UserData
(
)
)
;
}
for
(
const
auto
&
display
:
displays
)
{
display
-
>
NotifyVSync
(
)
;
}
if
(
bHaveEventListener
)
{
if
(
mLastRefreshTime
.
IsNull
(
)
)
{
RefreshVRDisplays
(
)
;
if
(
bHaveControllerListener
)
{
RefreshVRControllers
(
)
;
}
mLastRefreshTime
=
TimeStamp
:
:
Now
(
)
;
}
else
{
TimeDuration
duration
=
TimeStamp
:
:
Now
(
)
-
mLastRefreshTime
;
if
(
duration
.
ToMilliseconds
(
)
>
kVRDisplayRefreshMaxDuration
)
{
RefreshVRDisplays
(
)
;
if
(
bHaveControllerListener
)
{
RefreshVRControllers
(
)
;
}
mLastRefreshTime
=
TimeStamp
:
:
Now
(
)
;
}
}
if
(
bHaveControllerListener
)
{
for
(
const
auto
&
manager
:
mManagers
)
{
if
(
!
manager
-
>
GetIsPresenting
(
)
)
{
manager
-
>
HandleInput
(
)
;
}
}
}
}
if
(
bHaveEventListener
|
|
bHaveControllerListener
)
{
mLastActiveTime
=
TimeStamp
:
:
Now
(
)
;
}
else
if
(
mLastActiveTime
.
IsNull
(
)
)
{
Shutdown
(
)
;
}
else
{
TimeDuration
duration
=
TimeStamp
:
:
Now
(
)
-
mLastActiveTime
;
if
(
duration
.
ToMilliseconds
(
)
>
kVRDisplayInactiveMaxDuration
)
{
Shutdown
(
)
;
}
}
}
void
VRManager
:
:
NotifyVRVsync
(
const
uint32_t
&
aDisplayID
)
{
MOZ_ASSERT
(
VRListenerThreadHolder
:
:
IsInVRListenerThread
(
)
)
;
for
(
const
auto
&
manager
:
mManagers
)
{
if
(
manager
-
>
GetIsPresenting
(
)
)
{
manager
-
>
HandleInput
(
)
;
}
}
RefPtr
<
VRDisplayHost
>
display
=
GetDisplay
(
aDisplayID
)
;
if
(
display
)
{
display
-
>
StartFrame
(
)
;
}
RefreshVRDisplays
(
)
;
}
void
VRManager
:
:
RefreshVRDisplays
(
bool
aMustDispatch
)
{
nsTArray
<
RefPtr
<
gfx
:
:
VRDisplayHost
>
>
displays
;
for
(
uint32_t
i
=
0
;
i
<
mManagers
.
Length
(
)
&
&
displays
.
Length
(
)
=
=
0
;
+
+
i
)
{
if
(
mManagers
[
i
]
-
>
GetHMDs
(
displays
)
)
{
break
;
}
}
bool
displayInfoChanged
=
false
;
bool
displaySetChanged
=
false
;
if
(
displays
.
Length
(
)
!
=
mVRDisplays
.
Count
(
)
)
{
displaySetChanged
=
true
;
}
for
(
const
auto
&
display
:
displays
)
{
if
(
!
GetDisplay
(
display
-
>
GetDisplayInfo
(
)
.
GetDisplayID
(
)
)
)
{
displaySetChanged
=
true
;
break
;
}
if
(
display
-
>
CheckClearDisplayInfoDirty
(
)
)
{
displayInfoChanged
=
true
;
break
;
}
}
if
(
displaySetChanged
)
{
mVRDisplays
.
Clear
(
)
;
for
(
const
auto
&
display
:
displays
)
{
mVRDisplays
.
Put
(
display
-
>
GetDisplayInfo
(
)
.
GetDisplayID
(
)
display
)
;
}
}
if
(
displayInfoChanged
|
|
displaySetChanged
|
|
aMustDispatch
)
{
DispatchVRDisplayInfoUpdate
(
)
;
}
}
void
VRManager
:
:
DispatchVRDisplayInfoUpdate
(
)
{
nsTArray
<
VRDisplayInfo
>
update
;
GetVRDisplayInfo
(
update
)
;
for
(
auto
iter
=
mVRManagerParents
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
Unused
<
<
iter
.
Get
(
)
-
>
GetKey
(
)
-
>
SendUpdateDisplayInfo
(
update
)
;
}
}
void
VRManager
:
:
GetVRDisplayInfo
(
nsTArray
<
VRDisplayInfo
>
&
aDisplayInfo
)
{
aDisplayInfo
.
Clear
(
)
;
for
(
auto
iter
=
mVRDisplays
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
gfx
:
:
VRDisplayHost
*
display
=
iter
.
UserData
(
)
;
aDisplayInfo
.
AppendElement
(
VRDisplayInfo
(
display
-
>
GetDisplayInfo
(
)
)
)
;
}
}
RefPtr
<
gfx
:
:
VRDisplayHost
>
VRManager
:
:
GetDisplay
(
const
uint32_t
&
aDisplayID
)
{
RefPtr
<
gfx
:
:
VRDisplayHost
>
display
;
if
(
mVRDisplays
.
Get
(
aDisplayID
getter_AddRefs
(
display
)
)
)
{
return
display
;
}
return
nullptr
;
}
RefPtr
<
gfx
:
:
VRControllerHost
>
VRManager
:
:
GetController
(
const
uint32_t
&
aControllerID
)
{
RefPtr
<
gfx
:
:
VRControllerHost
>
controller
;
if
(
mVRControllers
.
Get
(
aControllerID
getter_AddRefs
(
controller
)
)
)
{
return
controller
;
}
return
nullptr
;
}
void
VRManager
:
:
GetVRControllerInfo
(
nsTArray
<
VRControllerInfo
>
&
aControllerInfo
)
{
aControllerInfo
.
Clear
(
)
;
for
(
auto
iter
=
mVRControllers
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
gfx
:
:
VRControllerHost
*
controller
=
iter
.
UserData
(
)
;
aControllerInfo
.
AppendElement
(
VRControllerInfo
(
controller
-
>
GetControllerInfo
(
)
)
)
;
}
}
void
VRManager
:
:
RefreshVRControllers
(
)
{
nsTArray
<
RefPtr
<
gfx
:
:
VRControllerHost
>
>
controllers
;
ScanForControllers
(
)
;
for
(
uint32_t
i
=
0
;
i
<
mManagers
.
Length
(
)
&
&
controllers
.
Length
(
)
=
=
0
;
+
+
i
)
{
mManagers
[
i
]
-
>
GetControllers
(
controllers
)
;
}
bool
controllerInfoChanged
=
false
;
if
(
controllers
.
Length
(
)
!
=
mVRControllers
.
Count
(
)
)
{
controllerInfoChanged
=
true
;
}
for
(
const
auto
&
controller
:
controllers
)
{
if
(
!
GetController
(
controller
-
>
GetControllerInfo
(
)
.
GetControllerID
(
)
)
)
{
controllerInfoChanged
=
true
;
break
;
}
}
if
(
controllerInfoChanged
)
{
mVRControllers
.
Clear
(
)
;
for
(
const
auto
&
controller
:
controllers
)
{
mVRControllers
.
Put
(
controller
-
>
GetControllerInfo
(
)
.
GetControllerID
(
)
controller
)
;
}
}
}
void
VRManager
:
:
ScanForControllers
(
)
{
for
(
uint32_t
i
=
0
;
i
<
mManagers
.
Length
(
)
;
+
+
i
)
{
mManagers
[
i
]
-
>
ScanForControllers
(
)
;
}
}
void
VRManager
:
:
RemoveControllers
(
)
{
for
(
uint32_t
i
=
0
;
i
<
mManagers
.
Length
(
)
;
+
+
i
)
{
mManagers
[
i
]
-
>
RemoveControllers
(
)
;
}
mVRControllers
.
Clear
(
)
;
}
void
VRManager
:
:
CreateVRTestSystem
(
)
{
if
(
mVRTestSystemCreated
)
{
return
;
}
RefPtr
<
VRSystemManager
>
mgr
=
VRSystemManagerPuppet
:
:
Create
(
)
;
if
(
mgr
)
{
mManagers
.
AppendElement
(
mgr
)
;
mVRTestSystemCreated
=
true
;
}
}
template
<
class
T
>
void
VRManager
:
:
NotifyGamepadChange
(
uint32_t
aIndex
const
T
&
aInfo
)
{
dom
:
:
GamepadChangeEventBody
body
(
aInfo
)
;
dom
:
:
GamepadChangeEvent
e
(
aIndex
dom
:
:
GamepadServiceType
:
:
VR
body
)
;
for
(
auto
iter
=
mVRManagerParents
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
Unused
<
<
iter
.
Get
(
)
-
>
GetKey
(
)
-
>
SendGamepadUpdate
(
e
)
;
}
}
void
VRManager
:
:
VibrateHaptic
(
uint32_t
aControllerIdx
uint32_t
aHapticIndex
double
aIntensity
double
aDuration
uint32_t
aPromiseID
)
{
for
(
uint32_t
i
=
0
;
i
<
mManagers
.
Length
(
)
;
+
+
i
)
{
mManagers
[
i
]
-
>
VibrateHaptic
(
aControllerIdx
aHapticIndex
aIntensity
aDuration
aPromiseID
)
;
}
}
void
VRManager
:
:
StopVibrateHaptic
(
uint32_t
aControllerIdx
)
{
for
(
const
auto
&
manager
:
mManagers
)
{
manager
-
>
StopVibrateHaptic
(
aControllerIdx
)
;
}
}
void
VRManager
:
:
NotifyVibrateHapticCompleted
(
uint32_t
aPromiseID
)
{
for
(
auto
iter
=
mVRManagerParents
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
Unused
<
<
iter
.
Get
(
)
-
>
GetKey
(
)
-
>
SendReplyGamepadVibrateHaptic
(
aPromiseID
)
;
}
}
void
VRManager
:
:
DispatchSubmitFrameResult
(
uint32_t
aDisplayID
const
VRSubmitFrameResultInfo
&
aResult
)
{
for
(
auto
iter
=
mVRManagerParents
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
Unused
<
<
iter
.
Get
(
)
-
>
GetKey
(
)
-
>
SendDispatchSubmitFrameResult
(
aDisplayID
aResult
)
;
}
}
}
}
