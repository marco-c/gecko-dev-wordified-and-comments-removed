#
include
"
VRDisplayHost
.
h
"
#
include
"
gfxVR
.
h
"
#
include
"
ipc
/
VRLayerParent
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
dom
/
GamepadBinding
.
h
"
#
if
defined
(
XP_WIN
)
#
include
<
d3d11
.
h
>
#
include
"
gfxWindowsPlatform
.
h
"
#
include
"
.
.
/
layers
/
d3d11
/
CompositorD3D11
.
h
"
#
include
"
mozilla
/
gfx
/
DeviceManagerDx
.
h
"
#
include
"
mozilla
/
layers
/
TextureD3D11
.
h
"
#
elif
defined
(
XP_MACOSX
)
#
include
"
mozilla
/
gfx
/
MacIOSurface
.
h
"
#
endif
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
layers
;
VRDisplayHost
:
:
AutoRestoreRenderState
:
:
AutoRestoreRenderState
(
VRDisplayHost
*
aDisplay
)
:
mDisplay
(
aDisplay
)
mSuccess
(
true
)
{
#
if
defined
(
XP_WIN
)
ID3D11DeviceContext1
*
context
=
mDisplay
-
>
GetD3DDeviceContext
(
)
;
ID3DDeviceContextState
*
state
=
mDisplay
-
>
GetD3DDeviceContextState
(
)
;
if
(
!
context
|
|
!
state
)
{
mSuccess
=
false
;
return
;
}
context
-
>
SwapDeviceContextState
(
state
getter_AddRefs
(
mPrevDeviceContextState
)
)
;
#
endif
}
VRDisplayHost
:
:
AutoRestoreRenderState
:
:
~
AutoRestoreRenderState
(
)
{
#
if
defined
(
XP_WIN
)
ID3D11DeviceContext1
*
context
=
mDisplay
-
>
GetD3DDeviceContext
(
)
;
if
(
context
&
&
mSuccess
)
{
context
-
>
SwapDeviceContextState
(
mPrevDeviceContextState
nullptr
)
;
}
#
endif
}
bool
VRDisplayHost
:
:
AutoRestoreRenderState
:
:
IsSuccess
(
)
{
return
mSuccess
;
}
VRDisplayHost
:
:
VRDisplayHost
(
VRDeviceType
aType
)
:
mFrameStarted
(
false
)
{
MOZ_COUNT_CTOR
(
VRDisplayHost
)
;
mDisplayInfo
.
mType
=
aType
;
mDisplayInfo
.
mDisplayID
=
VRSystemManager
:
:
AllocateDisplayID
(
)
;
mDisplayInfo
.
mPresentingGroups
=
0
;
mDisplayInfo
.
mGroupMask
=
kVRGroupContent
;
mDisplayInfo
.
mFrameId
=
0
;
}
VRDisplayHost
:
:
~
VRDisplayHost
(
)
{
MOZ_COUNT_DTOR
(
VRDisplayHost
)
;
}
#
if
defined
(
XP_WIN
)
bool
VRDisplayHost
:
:
CreateD3DObjects
(
)
{
if
(
!
mDevice
)
{
RefPtr
<
ID3D11Device
>
device
=
gfx
:
:
DeviceManagerDx
:
:
Get
(
)
-
>
GetCompositorDevice
(
)
;
if
(
!
device
)
{
NS_WARNING
(
"
VRDisplayHost
:
:
CreateD3DObjects
failed
to
get
a
D3D11Device
"
)
;
return
false
;
}
if
(
FAILED
(
device
-
>
QueryInterface
(
__uuidof
(
ID3D11Device1
)
getter_AddRefs
(
mDevice
)
)
)
)
{
NS_WARNING
(
"
VRDisplayHost
:
:
CreateD3DObjects
failed
to
get
a
D3D11Device1
"
)
;
return
false
;
}
}
if
(
!
mContext
)
{
mDevice
-
>
GetImmediateContext1
(
getter_AddRefs
(
mContext
)
)
;
if
(
!
mContext
)
{
NS_WARNING
(
"
VRDisplayHost
:
:
CreateD3DObjects
failed
to
get
an
immediate
context
"
)
;
return
false
;
}
}
if
(
!
mDeviceContextState
)
{
D3D_FEATURE_LEVEL
featureLevels
[
]
{
D3D_FEATURE_LEVEL_11_1
D3D_FEATURE_LEVEL_11_0
}
;
mDevice
-
>
CreateDeviceContextState
(
0
featureLevels
2
D3D11_SDK_VERSION
__uuidof
(
ID3D11Device1
)
nullptr
getter_AddRefs
(
mDeviceContextState
)
)
;
}
if
(
!
mDeviceContextState
)
{
NS_WARNING
(
"
VRDisplayHost
:
:
CreateD3DObjects
failed
to
get
a
D3D11DeviceContextState
"
)
;
return
false
;
}
return
true
;
}
ID3D11Device1
*
VRDisplayHost
:
:
GetD3DDevice
(
)
{
return
mDevice
;
}
ID3D11DeviceContext1
*
VRDisplayHost
:
:
GetD3DDeviceContext
(
)
{
return
mContext
;
}
ID3DDeviceContextState
*
VRDisplayHost
:
:
GetD3DDeviceContextState
(
)
{
return
mDeviceContextState
;
}
#
endif
void
VRDisplayHost
:
:
SetGroupMask
(
uint32_t
aGroupMask
)
{
mDisplayInfo
.
mGroupMask
=
aGroupMask
;
}
bool
VRDisplayHost
:
:
GetIsConnected
(
)
{
return
mDisplayInfo
.
mIsConnected
;
}
void
VRDisplayHost
:
:
AddLayer
(
VRLayerParent
*
aLayer
)
{
mLayers
.
AppendElement
(
aLayer
)
;
mDisplayInfo
.
mPresentingGroups
|
=
aLayer
-
>
GetGroup
(
)
;
if
(
mLayers
.
Length
(
)
=
=
1
)
{
StartPresentation
(
)
;
}
VRManager
*
vm
=
VRManager
:
:
Get
(
)
;
vm
-
>
RefreshVRDisplays
(
)
;
}
void
VRDisplayHost
:
:
RemoveLayer
(
VRLayerParent
*
aLayer
)
{
mLayers
.
RemoveElement
(
aLayer
)
;
if
(
mLayers
.
Length
(
)
=
=
0
)
{
StopPresentation
(
)
;
}
mDisplayInfo
.
mPresentingGroups
=
0
;
for
(
auto
layer
:
mLayers
)
{
mDisplayInfo
.
mPresentingGroups
|
=
layer
-
>
GetGroup
(
)
;
}
VRManager
*
vm
=
VRManager
:
:
Get
(
)
;
vm
-
>
RefreshVRDisplays
(
)
;
}
void
VRDisplayHost
:
:
StartFrame
(
)
{
AutoProfilerTracing
tracing
(
"
VR
"
"
GetSensorState
"
)
;
mLastFrameStart
=
TimeStamp
:
:
Now
(
)
;
+
+
mDisplayInfo
.
mFrameId
;
mDisplayInfo
.
mLastSensorState
[
mDisplayInfo
.
mFrameId
%
kVRMaxLatencyFrames
]
=
GetSensorState
(
)
;
mFrameStarted
=
true
;
}
void
VRDisplayHost
:
:
NotifyVSync
(
)
{
const
double
kVRDisplayRAFMaxDuration
=
50
;
bool
bShouldStartFrame
=
false
;
if
(
mDisplayInfo
.
mPresentingGroups
=
=
0
)
{
bShouldStartFrame
=
true
;
}
else
{
if
(
mLastFrameStart
.
IsNull
(
)
)
{
bShouldStartFrame
=
true
;
}
else
{
TimeDuration
duration
=
TimeStamp
:
:
Now
(
)
-
mLastFrameStart
;
if
(
duration
.
ToMilliseconds
(
)
>
kVRDisplayRAFMaxDuration
)
{
bShouldStartFrame
=
true
;
}
}
}
if
(
bShouldStartFrame
)
{
VRManager
*
vm
=
VRManager
:
:
Get
(
)
;
MOZ_ASSERT
(
vm
)
;
vm
-
>
NotifyVRVsync
(
mDisplayInfo
.
mDisplayID
)
;
}
}
void
VRDisplayHost
:
:
SubmitFrame
(
VRLayerParent
*
aLayer
const
layers
:
:
SurfaceDescriptor
&
aTexture
uint64_t
aFrameId
const
gfx
:
:
Rect
&
aLeftEyeRect
const
gfx
:
:
Rect
&
aRightEyeRect
)
{
AutoProfilerTracing
tracing
(
"
VR
"
"
SubmitFrameAtVRDisplayHost
"
)
;
if
(
(
mDisplayInfo
.
mGroupMask
&
aLayer
-
>
GetGroup
(
)
)
=
=
0
)
{
return
;
}
if
(
!
mFrameStarted
|
|
aFrameId
!
=
mDisplayInfo
.
mFrameId
)
{
return
;
}
mFrameStarted
=
false
;
switch
(
aTexture
.
type
(
)
)
{
#
if
defined
(
XP_WIN
)
case
SurfaceDescriptor
:
:
TSurfaceDescriptorD3D10
:
{
if
(
!
CreateD3DObjects
(
)
)
{
return
;
}
const
SurfaceDescriptorD3D10
&
surf
=
aTexture
.
get_SurfaceDescriptorD3D10
(
)
;
RefPtr
<
ID3D11Texture2D
>
dxTexture
;
HRESULT
hr
=
mDevice
-
>
OpenSharedResource
(
(
HANDLE
)
surf
.
handle
(
)
__uuidof
(
ID3D11Texture2D
)
(
void
*
*
)
(
ID3D11Texture2D
*
*
)
getter_AddRefs
(
dxTexture
)
)
;
if
(
FAILED
(
hr
)
|
|
!
dxTexture
)
{
NS_WARNING
(
"
Failed
to
open
shared
texture
"
)
;
return
;
}
RefPtr
<
IDXGIKeyedMutex
>
mutex
;
dxTexture
-
>
QueryInterface
(
(
IDXGIKeyedMutex
*
*
)
getter_AddRefs
(
mutex
)
)
;
if
(
mutex
)
{
HRESULT
hr
=
mutex
-
>
AcquireSync
(
0
1000
)
;
if
(
hr
=
=
WAIT_TIMEOUT
)
{
gfxDevCrash
(
LogReason
:
:
D3DLockTimeout
)
<
<
"
D3D
lock
mutex
timeout
"
;
}
else
if
(
hr
=
=
WAIT_ABANDONED
)
{
gfxCriticalNote
<
<
"
GFX
:
D3D11
lock
mutex
abandoned
"
;
}
if
(
FAILED
(
hr
)
)
{
NS_WARNING
(
"
Failed
to
lock
the
texture
"
)
;
return
;
}
}
bool
success
=
SubmitFrame
(
dxTexture
surf
.
size
(
)
aLeftEyeRect
aRightEyeRect
)
;
if
(
mutex
)
{
HRESULT
hr
=
mutex
-
>
ReleaseSync
(
0
)
;
if
(
FAILED
(
hr
)
)
{
NS_WARNING
(
"
Failed
to
unlock
the
texture
"
)
;
}
}
if
(
!
success
)
{
return
;
}
break
;
}
#
elif
defined
(
XP_MACOSX
)
case
SurfaceDescriptor
:
:
TSurfaceDescriptorMacIOSurface
:
{
const
auto
&
desc
=
aTexture
.
get_SurfaceDescriptorMacIOSurface
(
)
;
RefPtr
<
MacIOSurface
>
surf
=
MacIOSurface
:
:
LookupSurface
(
desc
.
surfaceId
(
)
desc
.
scaleFactor
(
)
!
desc
.
isOpaque
(
)
)
;
if
(
!
surf
)
{
NS_WARNING
(
"
VRDisplayHost
:
:
SubmitFrame
failed
to
get
a
MacIOSurface
"
)
;
return
;
}
IntSize
texSize
=
gfx
:
:
IntSize
(
surf
-
>
GetDevicePixelWidth
(
)
surf
-
>
GetDevicePixelHeight
(
)
)
;
if
(
!
SubmitFrame
(
surf
texSize
aLeftEyeRect
aRightEyeRect
)
)
{
return
;
}
break
;
}
#
endif
default
:
{
NS_WARNING
(
"
Unsupported
SurfaceDescriptor
type
for
VR
layer
texture
"
)
;
return
;
}
}
#
if
defined
(
XP_WIN
)
|
|
defined
(
XP_MACOSX
)
VRManager
*
vm
=
VRManager
:
:
Get
(
)
;
MOZ_ASSERT
(
vm
)
;
vm
-
>
NotifyVRVsync
(
mDisplayInfo
.
mDisplayID
)
;
#
endif
}
bool
VRDisplayHost
:
:
CheckClearDisplayInfoDirty
(
)
{
if
(
mDisplayInfo
=
=
mLastUpdateDisplayInfo
)
{
return
false
;
}
mLastUpdateDisplayInfo
=
mDisplayInfo
;
return
true
;
}
VRControllerHost
:
:
VRControllerHost
(
VRDeviceType
aType
dom
:
:
GamepadHand
aHand
uint32_t
aDisplayID
)
:
mButtonPressed
(
0
)
mButtonTouched
(
0
)
mVibrateIndex
(
0
)
{
MOZ_COUNT_CTOR
(
VRControllerHost
)
;
mControllerInfo
.
mType
=
aType
;
mControllerInfo
.
mHand
=
aHand
;
mControllerInfo
.
mMappingType
=
dom
:
:
GamepadMappingType
:
:
_empty
;
mControllerInfo
.
mDisplayID
=
aDisplayID
;
mControllerInfo
.
mControllerID
=
VRSystemManager
:
:
AllocateControllerID
(
)
;
}
VRControllerHost
:
:
~
VRControllerHost
(
)
{
MOZ_COUNT_DTOR
(
VRControllerHost
)
;
}
const
VRControllerInfo
&
VRControllerHost
:
:
GetControllerInfo
(
)
const
{
return
mControllerInfo
;
}
void
VRControllerHost
:
:
SetButtonPressed
(
uint64_t
aBit
)
{
mButtonPressed
=
aBit
;
}
uint64_t
VRControllerHost
:
:
GetButtonPressed
(
)
{
return
mButtonPressed
;
}
void
VRControllerHost
:
:
SetButtonTouched
(
uint64_t
aBit
)
{
mButtonTouched
=
aBit
;
}
uint64_t
VRControllerHost
:
:
GetButtonTouched
(
)
{
return
mButtonTouched
;
}
void
VRControllerHost
:
:
SetPose
(
const
dom
:
:
GamepadPoseState
&
aPose
)
{
mPose
=
aPose
;
}
const
dom
:
:
GamepadPoseState
&
VRControllerHost
:
:
GetPose
(
)
{
return
mPose
;
}
dom
:
:
GamepadHand
VRControllerHost
:
:
GetHand
(
)
{
return
mControllerInfo
.
mHand
;
}
void
VRControllerHost
:
:
SetVibrateIndex
(
uint64_t
aIndex
)
{
mVibrateIndex
=
aIndex
;
}
uint64_t
VRControllerHost
:
:
GetVibrateIndex
(
)
{
return
mVibrateIndex
;
}
