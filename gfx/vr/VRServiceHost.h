#
ifndef
GFX_VR_SERVICE_HOST_H
#
define
GFX_VR_SERVICE_HOST_H
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTArray
.
h
"
#
include
<
cstdint
>
namespace
mozilla
{
namespace
gfx
{
struct
VRExternalShmem
;
class
VRService
;
class
VRServiceHost
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
mozilla
:
:
gfx
:
:
VRServiceHost
)
public
:
static
void
Init
(
bool
aEnableVRProcess
)
;
static
VRServiceHost
*
Get
(
)
;
void
Refresh
(
)
;
void
StartService
(
)
;
void
StopService
(
)
;
void
Shutdown
(
)
;
void
CreateService
(
volatile
VRExternalShmem
*
aShmem
)
;
void
NotifyVRProcessStarted
(
)
;
void
CheckForPuppetCompletion
(
)
;
void
PuppetSubmit
(
const
nsTArray
<
uint64_t
>
&
aBuffer
)
;
void
PuppetReset
(
)
;
protected
:
private
:
explicit
VRServiceHost
(
bool
aEnableVRProcess
)
;
~
VRServiceHost
(
)
;
void
RefreshVRProcess
(
)
;
bool
NeedVRProcess
(
)
;
void
CreateVRProcess
(
)
;
void
ShutdownVRProcess
(
)
;
void
SendPuppetResetToVRProcess
(
)
;
void
SendPuppetCheckForCompletionToVRProcess
(
)
;
void
SendPuppetSubmitToVRProcess
(
const
nsTArray
<
uint64_t
>
&
aBuffer
)
;
nsTArray
<
uint64_t
>
mPuppetPendingCommands
;
RefPtr
<
VRService
>
mVRService
;
bool
mVRProcessEnabled
;
bool
mVRProcessStarted
;
bool
mVRServiceReadyInVRProcess
;
bool
mVRServiceRequested
;
}
;
}
}
#
endif
