#
include
"
VRServiceHost
.
h
"
#
include
"
VRGPUChild
.
h
"
#
include
"
VRManager
.
h
"
#
include
"
VRPuppetCommandBuffer
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
gfx
/
GPUParent
.
h
"
#
include
"
service
/
VRService
.
h
"
namespace
mozilla
{
namespace
gfx
{
static
StaticRefPtr
<
VRServiceHost
>
sVRServiceHostSingleton
;
void
VRServiceHost
:
:
Init
(
bool
aEnableVRProcess
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sVRServiceHostSingleton
=
=
nullptr
)
{
sVRServiceHostSingleton
=
new
VRServiceHost
(
aEnableVRProcess
)
;
ClearOnShutdown
(
&
sVRServiceHostSingleton
)
;
}
}
VRServiceHost
*
VRServiceHost
:
:
Get
(
)
{
MOZ_ASSERT
(
sVRServiceHostSingleton
!
=
nullptr
)
;
return
sVRServiceHostSingleton
;
}
VRServiceHost
:
:
VRServiceHost
(
bool
aEnableVRProcess
)
:
mPuppetActive
(
false
)
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
mVRService
(
nullptr
)
mVRProcessEnabled
(
aEnableVRProcess
)
mVRProcessStarted
(
false
)
mVRServiceRequested
(
false
)
#
endif
{
MOZ_COUNT_CTOR
(
VRServiceHost
)
;
}
VRServiceHost
:
:
~
VRServiceHost
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_COUNT_DTOR
(
VRServiceHost
)
;
}
void
VRServiceHost
:
:
StartService
(
)
{
mVRServiceRequested
=
true
;
if
(
mVRProcessEnabled
)
{
RefreshVRProcess
(
)
;
}
else
if
(
mVRService
)
{
mVRService
-
>
Start
(
)
;
}
}
void
VRServiceHost
:
:
StopService
(
)
{
mVRServiceRequested
=
false
;
if
(
mVRProcessEnabled
)
{
RefreshVRProcess
(
)
;
}
else
if
(
mVRService
)
{
mVRService
-
>
Stop
(
)
;
}
}
void
VRServiceHost
:
:
Shutdown
(
)
{
PuppetReset
(
)
;
StopService
(
)
;
mVRService
=
nullptr
;
}
void
VRServiceHost
:
:
Refresh
(
)
{
if
(
mVRService
)
{
mVRService
-
>
Refresh
(
)
;
}
}
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
void
VRServiceHost
:
:
CreateService
(
volatile
VRExternalShmem
*
aShmem
)
{
MOZ_ASSERT
(
!
mVRProcessEnabled
)
;
mVRService
=
VRService
:
:
Create
(
aShmem
)
;
}
bool
VRServiceHost
:
:
NeedVRProcess
(
)
{
if
(
!
mVRProcessEnabled
)
{
return
false
;
}
if
(
mVRServiceRequested
)
{
return
true
;
}
if
(
mPuppetActive
)
{
return
true
;
}
return
false
;
}
void
VRServiceHost
:
:
RefreshVRProcess
(
)
{
if
(
NeedVRProcess
(
)
)
{
if
(
!
mVRProcessStarted
)
{
CreateVRProcess
(
)
;
}
}
else
{
if
(
mVRProcessStarted
)
{
ShutdownVRProcess
(
)
;
}
}
}
void
VRServiceHost
:
:
CreateVRProcess
(
)
{
if
(
!
XRE_IsGPUProcess
(
)
)
{
return
;
}
if
(
!
NS_IsMainThread
(
)
)
{
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
VRServiceHost
:
:
CreateVRProcess
"
[
]
(
)
-
>
void
{
VRServiceHost
:
:
Get
(
)
-
>
CreateVRProcess
(
)
;
}
)
;
NS_DispatchToMainThread
(
task
.
forget
(
)
)
;
return
;
}
if
(
mVRProcessStarted
)
{
return
;
}
mVRProcessStarted
=
true
;
gfx
:
:
GPUParent
*
gpu
=
GPUParent
:
:
GetSingleton
(
)
;
MOZ_ASSERT
(
gpu
)
;
Unused
<
<
gpu
-
>
SendCreateVRProcess
(
)
;
}
void
VRServiceHost
:
:
ShutdownVRProcess
(
)
{
if
(
!
XRE_IsGPUProcess
(
)
)
{
return
;
}
if
(
!
NS_IsMainThread
(
)
)
{
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
VRServiceHost
:
:
ShutdownVRProcess
"
[
]
(
)
-
>
void
{
VRServiceHost
:
:
Get
(
)
-
>
ShutdownVRProcess
(
)
;
}
)
;
NS_DispatchToMainThread
(
task
.
forget
(
)
)
;
return
;
}
if
(
VRGPUChild
:
:
IsCreated
(
)
)
{
VRGPUChild
*
vrGPUChild
=
VRGPUChild
:
:
Get
(
)
;
vrGPUChild
-
>
SendStopVRService
(
)
;
if
(
!
vrGPUChild
-
>
IsClosed
(
)
)
{
vrGPUChild
-
>
Close
(
)
;
}
VRGPUChild
:
:
Shutdown
(
)
;
}
if
(
!
mVRProcessStarted
)
{
return
;
}
gfx
:
:
GPUParent
*
gpu
=
GPUParent
:
:
GetSingleton
(
)
;
MOZ_ASSERT
(
gpu
)
;
Unused
<
<
gpu
-
>
SendShutdownVRProcess
(
)
;
mVRProcessStarted
=
false
;
}
#
endif
void
VRServiceHost
:
:
PuppetSubmit
(
const
nsTArray
<
uint64_t
>
&
aBuffer
)
{
mPuppetActive
=
true
;
if
(
mVRProcessEnabled
)
{
MOZ_ASSERT
(
false
)
;
}
else
{
VRPuppetCommandBuffer
:
:
Get
(
)
.
Submit
(
aBuffer
)
;
}
}
void
VRServiceHost
:
:
PuppetReset
(
)
{
if
(
mVRProcessEnabled
)
{
mPuppetActive
=
false
;
if
(
!
mVRProcessStarted
)
{
return
;
}
MOZ_ASSERT
(
false
)
;
}
else
if
(
mPuppetActive
)
{
VRPuppetCommandBuffer
:
:
Get
(
)
.
Reset
(
)
;
mPuppetActive
=
false
;
}
}
bool
VRServiceHost
:
:
PuppetHasEnded
(
)
{
if
(
mVRProcessEnabled
)
{
if
(
!
mVRProcessStarted
)
{
return
true
;
}
MOZ_ASSERT
(
false
)
;
return
false
;
}
if
(
mPuppetActive
)
{
return
VRPuppetCommandBuffer
:
:
Get
(
)
.
HasEnded
(
)
;
}
return
true
;
}
}
}
