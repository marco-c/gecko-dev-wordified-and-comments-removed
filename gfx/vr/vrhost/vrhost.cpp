#
include
"
vrhostex
.
h
"
#
include
"
VRShMem
.
h
"
#
include
<
stdio
.
h
>
#
include
"
windows
.
h
"
static
const
char
s_pszSharedEvent
[
]
=
"
vrhost_test_event_signal
"
;
static
const
DWORD
s_dwWFSO_WAIT
=
20000
;
void
SampleExport
(
)
{
printf
(
"
vrhost
.
cpp
hello
world
"
)
;
}
void
TestTheManager
(
)
{
HANDLE
hEvent
=
:
:
CreateEventA
(
nullptr
FALSE
FALSE
s_pszSharedEvent
)
;
printf
(
"
\
n01
mgr
:
create
mgr
\
n
"
)
;
mozilla
:
:
gfx
:
:
VRShMem
shmem
(
nullptr
true
true
)
;
shmem
.
CreateShMem
(
)
;
printf
(
"
02
mgr
:
wait
for
signal
\
n
"
)
;
:
:
WaitForSingleObject
(
hEvent
s_dwWFSO_WAIT
)
;
mozilla
:
:
gfx
:
:
VRBrowserState
browserState
=
{
0
}
;
browserState
.
presentationActive
=
true
;
browserState
.
layerState
[
0
]
.
type
=
mozilla
:
:
gfx
:
:
VRLayerType
:
:
LayerType_2D_Content
;
browserState
.
hapticState
[
0
]
.
controllerIndex
=
987
;
printf
(
"
06
mgr
:
push
browser
\
n
"
)
;
shmem
.
PushBrowserState
(
browserState
true
)
;
printf
(
"
07
mgr
:
send
signal
\
n
"
)
;
:
:
SetEvent
(
hEvent
)
;
printf
(
"
08
mgr
:
wait
for
signal
\
n
"
)
;
:
:
WaitForSingleObject
(
hEvent
s_dwWFSO_WAIT
)
;
printf
(
"
13
mgr
:
pull
system
\
n
"
)
;
mozilla
:
:
gfx
:
:
VRSystemState
state
;
shmem
.
PullSystemState
(
state
.
displayState
state
.
sensorState
state
.
controllerState
state
.
enumerationCompleted
nullptr
)
;
printf
(
"
14
mgr
:
verify
data
\
n
"
"
\
tstate
.
enumerationCompleted
=
%
d
\
n
"
"
\
tstate
.
displayState
.
displayName
=
\
"
%
s
\
"
\
n
"
"
\
tstate
.
controllerState
[
1
]
.
hand
=
%
hhu
\
n
"
"
\
tstate
.
sensorState
.
inputFrameID
=
%
llu
\
n
"
state
.
enumerationCompleted
state
.
displayState
.
displayName
state
.
controllerState
[
1
]
.
hand
state
.
sensorState
.
inputFrameID
)
;
shmem
.
CloseShMem
(
)
;
printf
(
"
mgr
complete
"
)
;
fflush
(
nullptr
)
;
}
void
TestTheService
(
)
{
HANDLE
hEvent
=
:
:
OpenEventA
(
EVENT_ALL_ACCESS
FALSE
s_pszSharedEvent
)
;
printf
(
"
\
n03
svc
:
create
svc
\
n
"
)
;
mozilla
:
:
gfx
:
:
VRShMem
shmem
(
nullptr
true
false
)
;
shmem
.
JoinShMem
(
)
;
printf
(
"
04
svc
:
send
signal
\
n
"
)
;
:
:
SetEvent
(
hEvent
)
;
printf
(
"
05
svc
:
wait
for
signal
\
n
"
)
;
:
:
WaitForSingleObject
(
hEvent
s_dwWFSO_WAIT
)
;
printf
(
"
09
svc
:
pull
browser
\
n
"
)
;
mozilla
:
:
gfx
:
:
VRBrowserState
state
;
shmem
.
PullBrowserState
(
state
)
;
printf
(
"
10
svc
:
verify
data
\
n
"
"
\
tstate
.
presentationActive
=
%
d
\
n
"
"
\
tstate
.
layerState
[
0
]
.
type
=
%
hu
\
n
"
"
\
tstate
.
hapticState
[
0
]
.
controllerIndex
=
%
d
\
n
"
state
.
presentationActive
state
.
layerState
[
0
]
.
type
state
.
hapticState
[
0
]
.
controllerIndex
)
;
mozilla
:
:
gfx
:
:
VRSystemState
systemState
;
systemState
.
enumerationCompleted
=
true
;
strncpy
(
systemState
.
displayState
.
displayName
"
test
from
vrservice
shmem
"
mozilla
:
:
gfx
:
:
kVRDisplayNameMaxLen
)
;
systemState
.
controllerState
[
1
]
.
hand
=
mozilla
:
:
gfx
:
:
ControllerHand
:
:
Left
;
systemState
.
sensorState
.
inputFrameID
=
1234567
;
printf
(
"
11
svc
:
push
system
\
n
"
)
;
shmem
.
PushSystemState
(
systemState
)
;
printf
(
"
12
svc
:
send
signal
\
n
"
)
;
:
:
SetEvent
(
hEvent
)
;
shmem
.
LeaveShMem
(
)
;
printf
(
"
svc
complete
"
)
;
fflush
(
nullptr
)
;
}
