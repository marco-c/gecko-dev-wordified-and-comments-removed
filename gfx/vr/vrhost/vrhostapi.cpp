#
include
"
vrhostex
.
h
"
#
include
"
VRShMem
.
h
"
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
#
include
<
random
>
#
include
<
queue
>
#
include
"
windows
.
h
"
class
VRShmemInstance
{
public
:
VRShmemInstance
(
)
=
delete
;
VRShmemInstance
(
const
VRShmemInstance
&
aRHS
)
=
delete
;
static
mozilla
:
:
gfx
:
:
VRShMem
&
GetInstance
(
)
{
static
mozilla
:
:
gfx
:
:
VRShMem
shmem
(
nullptr
true
)
;
return
shmem
;
}
}
;
class
VRWindowManager
{
public
:
HWND
GetHWND
(
uint32_t
nId
)
{
if
(
nId
=
=
nWindow
)
{
return
hWindow
;
}
else
{
return
nullptr
;
}
}
uint32_t
GetId
(
HWND
hwnd
)
{
if
(
hwnd
=
=
hWindow
)
{
return
nWindow
;
}
else
{
return
0
;
}
}
HANDLE
GetProc
(
uint32_t
nId
)
{
if
(
nId
=
=
nWindow
)
{
return
hProc
;
}
else
{
return
nullptr
;
}
}
HANDLE
GetEvent
(
)
{
return
hEvent
;
}
uint32_t
SetHWND
(
HWND
hwnd
HANDLE
hproc
HANDLE
hevent
)
{
if
(
hWindow
=
=
nullptr
)
{
MOZ_ASSERT
(
hwnd
!
=
nullptr
&
&
hproc
!
=
nullptr
)
;
hWindow
=
hwnd
;
hProc
=
hproc
;
hEvent
=
hevent
;
nWindow
=
GetRandomUInt
(
)
;
#
if
defined
(
DEBUG
)
&
&
defined
(
NIGHTLY_BUILD
)
printf
(
"
VRWindowManager
:
Storing
HWND
:
0x
%
p
as
ID
:
0x
%
X
\
n
"
hWindow
nWindow
)
;
#
endif
return
nWindow
;
}
else
{
return
-
1
;
}
}
uint32_t
GetRandomUInt
(
)
{
return
randomGenerator
(
)
;
}
static
VRWindowManager
*
GetManager
(
)
{
if
(
Instance
=
=
nullptr
)
{
Instance
=
new
VRWindowManager
(
)
;
}
return
Instance
;
}
private
:
static
VRWindowManager
*
Instance
;
uint32_t
nWindow
=
0
;
HWND
hWindow
=
nullptr
;
HANDLE
hProc
=
nullptr
;
HANDLE
hEvent
=
nullptr
;
std
:
:
random_device
randomGenerator
;
}
;
VRWindowManager
*
VRWindowManager
:
:
Instance
=
nullptr
;
class
VRTelemetryManager
{
public
:
void
SendTelemetry
(
uint32_t
aTelemetryId
uint32_t
aValue
)
{
if
(
!
aTelemetryId
)
{
return
;
}
mozilla
:
:
gfx
:
:
VRTelemetryState
telemetryState
=
{
0
}
;
VRShmemInstance
:
:
GetInstance
(
)
.
PullTelemetryState
(
telemetryState
)
;
if
(
telemetryState
.
uid
=
=
0
)
{
telemetryState
.
uid
=
sUid
;
}
switch
(
mozilla
:
:
gfx
:
:
VRTelemetryId
(
aTelemetryId
)
)
{
case
mozilla
:
:
gfx
:
:
VRTelemetryId
:
:
INSTALLED_FROM
:
MOZ_ASSERT
(
aValue
<
=
0x07
"
VRTelemetryId
:
:
INSTALLED_FROM
only
allows
3
bits
.
"
)
;
telemetryState
.
installedFrom
=
true
;
telemetryState
.
installedFromValue
=
aValue
;
break
;
case
mozilla
:
:
gfx
:
:
VRTelemetryId
:
:
ENTRY_METHOD
:
MOZ_ASSERT
(
aValue
<
=
0x07
"
VRTelemetryId
:
:
ENTRY_METHOD
only
allows
3
bits
.
"
)
;
telemetryState
.
entryMethod
=
true
;
telemetryState
.
entryMethodValue
=
aValue
;
break
;
case
mozilla
:
:
gfx
:
:
VRTelemetryId
:
:
FIRST_RUN
:
MOZ_ASSERT
(
aValue
<
=
0x01
"
VRTelemetryId
:
:
FIRST_RUN
only
allows
1
bit
.
"
)
;
telemetryState
.
firstRun
=
true
;
telemetryState
.
firstRunValue
=
aValue
;
break
;
default
:
MOZ_CRASH
(
"
Undefined
VR
telemetry
type
.
"
)
;
break
;
}
VRShmemInstance
:
:
GetInstance
(
)
.
PushTelemetryState
(
telemetryState
)
;
+
+
sUid
;
}
static
VRTelemetryManager
*
GetManager
(
)
{
if
(
Instance
=
=
nullptr
)
{
Instance
=
new
VRTelemetryManager
(
)
;
}
return
Instance
;
}
private
:
static
VRTelemetryManager
*
Instance
;
static
uint32_t
sUid
;
}
;
uint32_t
VRTelemetryManager
:
:
sUid
=
1
;
VRTelemetryManager
*
VRTelemetryManager
:
:
Instance
=
nullptr
;
struct
StartFirefoxParams
{
char
*
firefoxFolder
;
char
*
firefoxProfileFolder
;
HANDLE
hProcessFx
;
}
;
DWORD
StartFirefoxThreadProc
(
_In_
LPVOID
lpParameter
)
{
wchar_t
cmd
[
]
=
L
"
%
Sfirefox
.
exe
-
wait
-
for
-
browser
-
profile
%
S
-
-
fxr
"
;
StartFirefoxParams
*
params
=
static_cast
<
StartFirefoxParams
*
>
(
lpParameter
)
;
wchar_t
cmdWithPath
[
MAX_PATH
+
MAX_PATH
]
=
{
0
}
;
int
err
=
swprintf_s
(
cmdWithPath
ARRAYSIZE
(
cmdWithPath
)
cmd
params
-
>
firefoxFolder
params
-
>
firefoxProfileFolder
)
;
if
(
err
!
=
-
1
)
{
PROCESS_INFORMATION
procFx
=
{
0
}
;
STARTUPINFO
startupInfoFx
=
{
0
}
;
#
if
defined
(
DEBUG
)
&
&
defined
(
NIGHTLY_BUILD
)
printf
(
"
Starting
Firefox
via
:
%
S
\
n
"
cmdWithPath
)
;
#
endif
bool
fCreateContentProc
=
:
:
CreateProcess
(
nullptr
cmdWithPath
nullptr
nullptr
TRUE
0
nullptr
nullptr
&
startupInfoFx
&
procFx
)
;
if
(
!
fCreateContentProc
)
{
printf
(
"
Failed
to
create
Firefox
process
"
)
;
}
params
-
>
hProcessFx
=
procFx
.
hProcess
;
}
return
0
;
}
void
CreateVRWindow
(
char
*
firefoxFolderPath
char
*
firefoxProfilePath
uint32_t
dxgiAdapterID
uint32_t
widthHost
uint32_t
heightHost
uint32_t
*
windowId
void
*
*
hTex
uint32_t
*
width
uint32_t
*
height
)
{
mozilla
:
:
gfx
:
:
VRWindowState
windowState
=
{
0
}
;
int
err
=
sprintf_s
(
windowState
.
signalName
ARRAYSIZE
(
windowState
.
signalName
)
"
fxr
:
:
CreateVRWindow
:
:
%
X
"
VRWindowManager
:
:
GetManager
(
)
-
>
GetRandomUInt
(
)
)
;
if
(
err
>
0
)
{
HANDLE
hEvent
=
:
:
CreateEventA
(
nullptr
FALSE
FALSE
windowState
.
signalName
)
;
if
(
hEvent
!
=
nullptr
)
{
VRShmemInstance
:
:
GetInstance
(
)
.
CreateShMem
(
true
)
;
VRShmemInstance
:
:
GetInstance
(
)
.
PushWindowState
(
windowState
)
;
StartFirefoxParams
fxParams
=
{
0
}
;
fxParams
.
firefoxFolder
=
firefoxFolderPath
;
fxParams
.
firefoxProfileFolder
=
firefoxProfilePath
;
DWORD
dwTid
=
0
;
HANDLE
hThreadFx
=
CreateThread
(
nullptr
0
StartFirefoxThreadProc
&
fxParams
0
&
dwTid
)
;
if
(
hThreadFx
!
=
nullptr
)
{
:
:
WaitForSingleObject
(
hEvent
INFINITE
)
;
VRShmemInstance
:
:
GetInstance
(
)
.
PullWindowState
(
windowState
)
;
(
*
hTex
)
=
windowState
.
textureFx
;
(
*
windowId
)
=
VRWindowManager
:
:
GetManager
(
)
-
>
SetHWND
(
(
HWND
)
windowState
.
hwndFx
fxParams
.
hProcessFx
hEvent
)
;
(
*
width
)
=
windowState
.
widthFx
;
(
*
height
)
=
windowState
.
heightFx
;
}
else
{
}
}
}
}
volatile
bool
s_WaitingForVREvent
=
false
;
void
WaitForVREvent
(
uint32_t
&
nVRWindowID
uint32_t
&
eventType
uint32_t
&
eventData1
uint32_t
&
eventData2
)
{
MOZ_ASSERT
(
!
s_WaitingForVREvent
)
;
s_WaitingForVREvent
=
true
;
nVRWindowID
=
0
;
eventType
=
0
;
eventData1
=
0
;
eventData2
=
0
;
if
(
VRShmemInstance
:
:
GetInstance
(
)
.
HasExternalShmem
(
)
)
{
HANDLE
evt
=
VRWindowManager
:
:
GetManager
(
)
-
>
GetEvent
(
)
;
const
DWORD
waitResult
=
:
:
WaitForSingleObject
(
evt
INFINITE
)
;
if
(
waitResult
!
=
WAIT_OBJECT_0
)
{
MOZ_ASSERT
(
false
&
&
"
Error
WaitForVREvent
(
)
.
\
n
"
)
;
return
;
}
mozilla
:
:
gfx
:
:
VRWindowState
windowState
=
{
0
}
;
VRShmemInstance
:
:
GetInstance
(
)
.
PullWindowState
(
windowState
)
;
nVRWindowID
=
VRWindowManager
:
:
GetManager
(
)
-
>
GetId
(
(
HWND
)
windowState
.
hwndFx
)
;
if
(
nVRWindowID
!
=
0
)
{
eventType
=
(
uint32_t
)
windowState
.
eventType
;
mozilla
:
:
gfx
:
:
VRFxEventType
fxEvent
=
mozilla
:
:
gfx
:
:
VRFxEventType
(
eventType
)
;
switch
(
fxEvent
)
{
case
mozilla
:
:
gfx
:
:
VRFxEventType
:
:
IME
:
eventData1
=
(
uint32_t
)
windowState
.
eventState
;
break
;
case
mozilla
:
:
gfx
:
:
VRFxEventType
:
:
FULLSCREEN
:
eventData1
=
(
uint32_t
)
windowState
.
eventState
;
break
;
case
mozilla
:
:
gfx
:
:
VRFxEventType
:
:
SHUTDOWN
:
VRShmemInstance
:
:
GetInstance
(
)
.
CloseShMem
(
)
;
break
;
default
:
MOZ_ASSERT
(
false
&
&
"
Undefined
VR
Fx
event
.
"
)
;
break
;
}
}
}
s_WaitingForVREvent
=
false
;
}
void
CloseVRWindow
(
uint32_t
nVRWindowID
bool
waitForTerminate
)
{
HWND
hwnd
=
VRWindowManager
:
:
GetManager
(
)
-
>
GetHWND
(
nVRWindowID
)
;
if
(
hwnd
!
=
nullptr
)
{
:
:
SendMessage
(
hwnd
WM_CLOSE
0
0
)
;
if
(
waitForTerminate
)
{
:
:
WaitForSingleObject
(
VRWindowManager
:
:
GetManager
(
)
-
>
GetProc
(
nVRWindowID
)
INFINITE
)
;
}
}
if
(
s_WaitingForVREvent
)
{
VRShmemInstance
:
:
GetInstance
(
)
.
SendShutdowmState
(
nVRWindowID
)
;
}
else
{
VRShmemInstance
:
:
GetInstance
(
)
.
CloseShMem
(
)
;
}
}
void
SendUIMessageToVRWindow
(
uint32_t
nVRWindowID
uint32_t
msg
uint64_t
wparam
uint64_t
lparam
)
{
HWND
hwnd
=
VRWindowManager
:
:
GetManager
(
)
-
>
GetHWND
(
nVRWindowID
)
;
if
(
hwnd
!
=
nullptr
)
{
switch
(
msg
)
{
case
WM_MOUSEWHEEL
:
POINT
pt
;
POINTSTOPOINT
(
pt
MAKEPOINTS
(
lparam
)
)
;
if
(
!
:
:
ClientToScreen
(
hwnd
&
pt
)
)
{
break
;
}
lparam
=
POINTTOPOINTS
(
pt
)
;
case
WM_MOUSEMOVE
:
case
WM_LBUTTONDOWN
:
case
WM_LBUTTONUP
:
case
WM_CHAR
:
case
WM_KEYDOWN
:
case
WM_KEYUP
:
:
:
PostMessage
(
hwnd
msg
wparam
lparam
)
;
break
;
default
:
break
;
}
}
}
void
SendVRTelemetry
(
uint32_t
nVRWindowID
uint32_t
telemetryId
uint32_t
value
)
{
HWND
hwnd
=
VRWindowManager
:
:
GetManager
(
)
-
>
GetHWND
(
nVRWindowID
)
;
if
(
hwnd
=
=
nullptr
)
{
return
;
}
VRTelemetryManager
:
:
GetManager
(
)
-
>
SendTelemetry
(
telemetryId
value
)
;
}
