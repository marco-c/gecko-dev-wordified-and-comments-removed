#
include
"
VRService
.
h
"
#
include
"
OpenVRSession
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
base
/
thread
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
std
;
namespace
{
int64_t
FrameIDFromBrowserState
(
const
mozilla
:
:
gfx
:
:
VRBrowserState
&
aState
)
{
for
(
int
iLayer
=
0
;
iLayer
<
kVRLayerMaxCount
;
iLayer
+
+
)
{
const
VRLayerState
&
layer
=
aState
.
layerState
[
iLayer
]
;
if
(
layer
.
type
=
=
VRLayerType
:
:
LayerType_Stereo_Immersive
)
{
return
layer
.
layer_stereo_immersive
.
mFrameId
;
}
}
return
0
;
}
bool
IsImmersiveContentActive
(
const
mozilla
:
:
gfx
:
:
VRBrowserState
&
aState
)
{
for
(
int
iLayer
=
0
;
iLayer
<
kVRLayerMaxCount
;
iLayer
+
+
)
{
const
VRLayerState
&
layer
=
aState
.
layerState
[
iLayer
]
;
if
(
layer
.
type
=
=
VRLayerType
:
:
LayerType_Stereo_Immersive
)
{
return
true
;
}
}
return
false
;
}
}
already_AddRefed
<
VRService
>
VRService
:
:
Create
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
gfxPrefs
:
:
VRServiceEnabled
(
)
)
{
return
nullptr
;
}
RefPtr
<
VRService
>
service
=
new
VRService
(
)
;
return
service
.
forget
(
)
;
}
VRService
:
:
VRService
(
)
:
mSystemState
{
}
mBrowserState
{
}
mServiceThread
(
nullptr
)
mShutdownRequested
(
false
)
{
memset
(
&
mAPIShmem
0
sizeof
(
mAPIShmem
)
)
;
}
VRService
:
:
~
VRService
(
)
{
Stop
(
)
;
}
void
VRService
:
:
Start
(
)
{
if
(
!
mServiceThread
)
{
memset
(
&
mSystemState
0
sizeof
(
mSystemState
)
)
;
PushState
(
mSystemState
)
;
mServiceThread
=
new
base
:
:
Thread
(
"
VRService
"
)
;
base
:
:
Thread
:
:
Options
options
;
options
.
transient_hang_timeout
=
128
;
options
.
permanent_hang_timeout
=
2048
;
if
(
!
mServiceThread
-
>
StartWithOptions
(
options
)
)
{
delete
mServiceThread
;
mServiceThread
=
nullptr
;
return
;
}
mServiceThread
-
>
message_loop
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
gfx
:
:
VRService
:
:
ServiceInitialize
"
this
&
VRService
:
:
ServiceInitialize
)
)
;
}
}
void
VRService
:
:
Stop
(
)
{
if
(
mServiceThread
)
{
mServiceThread
-
>
message_loop
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
gfx
:
:
VRService
:
:
RequestShutdown
"
this
&
VRService
:
:
RequestShutdown
)
)
;
delete
mServiceThread
;
mServiceThread
=
nullptr
;
}
}
bool
VRService
:
:
IsInServiceThread
(
)
{
return
mServiceThread
&
&
mServiceThread
-
>
thread_id
(
)
=
=
PlatformThread
:
:
CurrentId
(
)
;
}
void
VRService
:
:
RequestShutdown
(
)
{
MOZ_ASSERT
(
IsInServiceThread
(
)
)
;
mShutdownRequested
=
true
;
}
void
VRService
:
:
ServiceInitialize
(
)
{
MOZ_ASSERT
(
IsInServiceThread
(
)
)
;
mShutdownRequested
=
false
;
memset
(
&
mBrowserState
0
sizeof
(
mBrowserState
)
)
;
unique_ptr
<
VRSession
>
session
;
session
=
make_unique
<
OpenVRSession
>
(
)
;
if
(
!
session
-
>
Initialize
(
mSystemState
)
)
{
session
=
nullptr
;
}
if
(
session
)
{
mSession
=
std
:
:
move
(
session
)
;
mSystemState
.
enumerationCompleted
=
true
;
PushState
(
mSystemState
)
;
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
gfx
:
:
VRService
:
:
ServiceWaitForImmersive
"
this
&
VRService
:
:
ServiceWaitForImmersive
)
)
;
}
else
{
memset
(
&
mSystemState
0
sizeof
(
mSystemState
)
)
;
mSystemState
.
enumerationCompleted
=
true
;
PushState
(
mSystemState
)
;
}
}
void
VRService
:
:
ServiceShutdown
(
)
{
MOZ_ASSERT
(
IsInServiceThread
(
)
)
;
mSession
=
nullptr
;
memset
(
&
mSystemState
0
sizeof
(
mSystemState
)
)
;
mSystemState
.
enumerationCompleted
=
true
;
PushState
(
mSystemState
)
;
}
void
VRService
:
:
ServiceWaitForImmersive
(
)
{
MOZ_ASSERT
(
IsInServiceThread
(
)
)
;
MOZ_ASSERT
(
mSession
)
;
mSession
-
>
ProcessEvents
(
mSystemState
)
;
PushState
(
mSystemState
)
;
PullState
(
mBrowserState
)
;
if
(
mSession
-
>
ShouldQuit
(
)
|
|
mShutdownRequested
)
{
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
gfx
:
:
VRService
:
:
ServiceShutdown
"
this
&
VRService
:
:
ServiceShutdown
)
)
;
}
else
if
(
IsImmersiveContentActive
(
mBrowserState
)
)
{
mSession
-
>
StartPresentation
(
)
;
mSession
-
>
StartFrame
(
mSystemState
)
;
PushState
(
mSystemState
)
;
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
gfx
:
:
VRService
:
:
ServiceImmersiveMode
"
this
&
VRService
:
:
ServiceImmersiveMode
)
)
;
}
else
{
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
gfx
:
:
VRService
:
:
ServiceWaitForImmersive
"
this
&
VRService
:
:
ServiceWaitForImmersive
)
)
;
}
}
void
VRService
:
:
ServiceImmersiveMode
(
)
{
MOZ_ASSERT
(
IsInServiceThread
(
)
)
;
MOZ_ASSERT
(
mSession
)
;
mSession
-
>
ProcessEvents
(
mSystemState
)
;
PushState
(
mSystemState
)
;
PullState
(
mBrowserState
)
;
if
(
mSession
-
>
ShouldQuit
(
)
|
|
mShutdownRequested
)
{
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
gfx
:
:
VRService
:
:
ServiceShutdown
"
this
&
VRService
:
:
ServiceShutdown
)
)
;
return
;
}
else
if
(
!
IsImmersiveContentActive
(
mBrowserState
)
)
{
mSession
-
>
StopPresentation
(
)
;
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
gfx
:
:
VRService
:
:
ServiceWaitForImmersive
"
this
&
VRService
:
:
ServiceWaitForImmersive
)
)
;
return
;
}
uint64_t
newFrameId
=
FrameIDFromBrowserState
(
mBrowserState
)
;
if
(
newFrameId
!
=
mSystemState
.
displayState
.
mLastSubmittedFrameId
)
{
bool
success
=
false
;
for
(
int
iLayer
=
0
;
iLayer
<
kVRLayerMaxCount
;
iLayer
+
+
)
{
const
VRLayerState
&
layer
=
mBrowserState
.
layerState
[
iLayer
]
;
if
(
layer
.
type
=
=
VRLayerType
:
:
LayerType_Stereo_Immersive
)
{
success
=
mSession
-
>
SubmitFrame
(
layer
.
layer_stereo_immersive
)
;
break
;
}
}
mSystemState
.
displayState
.
mLastSubmittedFrameId
=
newFrameId
;
mSystemState
.
displayState
.
mLastSubmittedFrameSuccessful
=
success
;
mSession
-
>
StartFrame
(
mSystemState
)
;
PushState
(
mSystemState
)
;
}
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
gfx
:
:
VRService
:
:
ServiceImmersiveMode
"
this
&
VRService
:
:
ServiceImmersiveMode
)
)
;
}
void
VRService
:
:
PushState
(
const
mozilla
:
:
gfx
:
:
VRSystemState
&
aState
)
{
#
if
defined
(
MOZ_WIDGET_ANDROID
)
if
(
pthread_mutex_lock
(
(
pthread_mutex_t
*
)
&
(
mExternalShmem
-
>
systemMutex
)
)
=
=
0
)
{
memcpy
(
(
void
*
)
&
mAPIShmem
.
state
&
aState
sizeof
(
VRSystemState
)
)
;
pthread_mutex_unlock
(
(
pthread_mutex_t
*
)
&
(
mExternalShmem
-
>
systemMutex
)
)
;
}
#
else
mAPIShmem
.
generationA
+
+
;
memcpy
(
(
void
*
)
&
mAPIShmem
.
state
&
aState
sizeof
(
VRSystemState
)
)
;
mAPIShmem
.
generationB
+
+
;
#
endif
}
void
VRService
:
:
PullState
(
mozilla
:
:
gfx
:
:
VRBrowserState
&
aState
)
{
#
if
defined
(
MOZ_WIDGET_ANDROID
)
if
(
pthread_mutex_lock
(
(
pthread_mutex_t
*
)
&
(
mExternalShmem
-
>
browserMutex
)
)
=
=
0
)
{
memcpy
(
&
aState
&
tmp
.
browserState
sizeof
(
VRBrowserState
)
)
;
pthread_mutex_unlock
(
(
pthread_mutex_t
*
)
&
(
mExternalShmem
-
>
browserMutex
)
)
;
}
#
else
VRExternalShmem
tmp
;
memcpy
(
&
tmp
&
mAPIShmem
sizeof
(
VRExternalShmem
)
)
;
if
(
tmp
.
browserGenerationA
=
=
tmp
.
browserGenerationB
&
&
tmp
.
browserGenerationA
!
=
0
&
&
tmp
.
browserGenerationA
!
=
-
1
)
{
memcpy
(
&
aState
&
tmp
.
browserState
sizeof
(
VRBrowserState
)
)
;
}
#
endif
}
VRExternalShmem
*
VRService
:
:
GetAPIShmem
(
)
{
return
&
mAPIShmem
;
}
