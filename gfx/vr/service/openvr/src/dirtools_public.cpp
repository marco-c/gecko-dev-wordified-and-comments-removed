#
include
"
dirtools_public
.
h
"
#
include
"
strtools_public
.
h
"
#
include
"
pathtools_public
.
h
"
#
include
<
errno
.
h
>
#
include
<
string
.
h
>
#
ifdef
_WIN32
#
include
"
windows
.
h
"
#
else
#
include
<
stdlib
.
h
>
#
include
<
stdio
.
h
>
#
include
<
sys
/
stat
.
h
>
#
include
<
sys
/
types
.
h
>
#
endif
#
if
defined
(
OSX
)
#
include
<
sys
/
syslimits
.
h
>
#
endif
bool
BCreateDirectoryRecursive
(
const
char
*
pchPath
)
{
if
(
Path_IsDirectory
(
pchPath
)
)
return
true
;
int
len
=
(
int
)
strlen
(
pchPath
)
;
char
*
path
=
(
char
*
)
malloc
(
len
+
1
)
;
strcpy
(
path
pchPath
)
;
char
*
s
=
path
+
len
-
1
;
const
char
slash
=
Path_GetSlash
(
)
;
while
(
s
>
path
)
{
if
(
*
s
=
=
slash
)
{
*
s
=
'
\
0
'
;
bool
bExists
=
Path_IsDirectory
(
path
)
;
*
s
=
slash
;
if
(
bExists
)
{
+
+
s
;
break
;
}
}
-
-
s
;
}
while
(
*
s
)
{
if
(
*
s
=
=
slash
)
{
*
s
=
'
\
0
'
;
BCreateDirectory
(
path
)
;
*
s
=
slash
;
}
s
+
+
;
}
bool
bRetVal
=
BCreateDirectory
(
path
)
;
free
(
path
)
;
return
bRetVal
;
}
bool
BCreateDirectory
(
const
char
*
pchPath
)
{
#
ifdef
WIN32
std
:
:
wstring
wPath
=
UTF8to16
(
pchPath
)
;
if
(
:
:
CreateDirectoryW
(
wPath
.
c_str
(
)
NULL
)
)
return
true
;
if
(
:
:
GetLastError
(
)
=
=
ERROR_ALREADY_EXISTS
)
return
true
;
return
false
;
#
else
int
i
=
mkdir
(
pchPath
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)
;
if
(
i
=
=
0
)
return
true
;
if
(
errno
=
=
EEXIST
)
return
true
;
return
false
;
#
endif
}
