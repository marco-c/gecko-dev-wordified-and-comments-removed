#
ifndef
GFX_VR_SERVICE_VRSERVICE_H
#
define
GFX_VR_SERVICE_VRSERVICE_H
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
base
/
process
.
h
"
#
include
"
moz_external_vr
.
h
"
namespace
base
{
class
Thread
;
}
namespace
mozilla
{
namespace
gfx
{
class
VRSession
;
static
const
int
kVRFrameTimingHistoryDepth
=
100
;
class
VRService
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VRService
)
static
already_AddRefed
<
VRService
>
Create
(
)
;
void
Start
(
)
;
void
Stop
(
)
;
VRExternalShmem
*
GetAPIShmem
(
)
;
private
:
VRService
(
)
;
~
VRService
(
)
;
bool
InitShmem
(
)
;
void
PushState
(
const
mozilla
:
:
gfx
:
:
VRSystemState
&
aState
)
;
void
PullState
(
mozilla
:
:
gfx
:
:
VRBrowserState
&
aState
)
;
VRSystemState
mSystemState
;
VRBrowserState
mBrowserState
;
int64_t
mBrowserGeneration
;
UniquePtr
<
VRSession
>
mSession
;
base
:
:
Thread
*
mServiceThread
;
bool
mShutdownRequested
;
VRExternalShmem
*
MOZ_OWNING_REF
mAPIShmem
;
base
:
:
ProcessHandle
mTargetShmemFile
;
VRHapticState
mLastHapticState
[
kVRHapticsMaxCount
]
;
TimeStamp
mFrameStartTime
[
kVRFrameTimingHistoryDepth
]
;
bool
IsInServiceThread
(
)
;
void
UpdateHaptics
(
)
;
void
ServiceInitialize
(
)
;
void
ServiceShutdown
(
)
;
void
ServiceWaitForImmersive
(
)
;
void
ServiceImmersiveMode
(
)
;
}
;
}
}
#
endif
