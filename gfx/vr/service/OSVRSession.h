#
ifndef
GFX_VR_SERVICE_OSVRSESSION_H
#
define
GFX_VR_SERVICE_OSVRSESSION_H
#
include
"
VRSession
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
moz_external_vr
.
h
"
#
include
<
osvr
/
ClientKit
/
ClientKitC
.
h
>
#
include
<
osvr
/
ClientKit
/
DisplayC
.
h
>
#
if
defined
(
XP_WIN
)
#
include
<
d3d11_1
.
h
>
#
elif
defined
(
XP_MACOSX
)
class
MacIOSurface
;
#
endif
namespace
mozilla
{
namespace
gfx
{
class
OSVRSession
:
public
VRSession
{
public
:
OSVRSession
(
)
;
virtual
~
OSVRSession
(
)
;
bool
Initialize
(
mozilla
:
:
gfx
:
:
VRSystemState
&
aSystemState
)
override
;
void
Shutdown
(
)
override
;
void
ProcessEvents
(
mozilla
:
:
gfx
:
:
VRSystemState
&
aSystemState
)
override
;
void
StartFrame
(
mozilla
:
:
gfx
:
:
VRSystemState
&
aSystemState
)
override
;
bool
StartPresentation
(
)
override
;
void
StopPresentation
(
)
override
;
void
VibrateHaptic
(
uint32_t
aControllerIdx
uint32_t
aHapticIndex
float
aIntensity
float
aDuration
)
override
;
void
StopVibrateHaptic
(
uint32_t
aControllerIdx
)
override
;
void
StopAllHaptics
(
)
override
;
protected
:
#
if
defined
(
XP_WIN
)
bool
SubmitFrame
(
const
mozilla
:
:
gfx
:
:
VRLayer_Stereo_Immersive
&
aLayer
ID3D11Texture2D
*
aTexture
)
override
;
#
elif
defined
(
XP_MACOSX
)
bool
SubmitFrame
(
const
mozilla
:
:
gfx
:
:
VRLayer_Stereo_Immersive
&
aLayer
MacIOSurface
*
aTexture
)
override
;
#
endif
private
:
bool
InitState
(
mozilla
:
:
gfx
:
:
VRSystemState
&
aSystemState
)
;
void
UpdateHeadsetPose
(
mozilla
:
:
gfx
:
:
VRSystemState
&
aState
)
;
bool
mRuntimeLoaded
;
bool
mOSVRInitialized
;
bool
mClientContextInitialized
;
bool
mDisplayConfigInitialized
;
bool
mInterfaceInitialized
;
OSVR_ClientContext
m_ctx
;
OSVR_ClientInterface
m_iface
;
OSVR_DisplayConfig
m_display
;
gfx
:
:
Matrix4x4
mHeadToEye
[
2
]
;
void
CheckOSVRStatus
(
)
;
void
InitializeClientContext
(
)
;
void
InitializeDisplay
(
)
;
void
InitializeInterface
(
)
;
}
;
}
}
#
endif
