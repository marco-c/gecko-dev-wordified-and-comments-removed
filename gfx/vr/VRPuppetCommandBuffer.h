#
ifndef
GFX_VR_SERVICE_VRPUPPETCOMMANDBUFFER_H
#
define
GFX_VR_SERVICE_VRPUPPETCOMMANDBUFFER_H
#
include
<
inttypes
.
h
>
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
moz_external_vr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
namespace
mozilla
{
namespace
gfx
{
enum
class
VRPuppet_Command
:
uint64_t
{
VRPuppet_End
=
0x0000000000000000
VRPuppet_ClearAll
=
0x0100000000000000
VRPuppet_ClearController
=
0x0200000000000000
VRPuppet_Timeout
=
0x0300000000000000
VRPuppet_Wait
=
0x0400000000000000
VRPuppet_WaitSubmit
=
0x0500000000000000
VRPuppet_WaitPresentationStart
=
0x0600000000000000
VRPuppet_WaitPresentationEnd
=
0x0700000000000000
VRPuppet_WaitHapticIntensity
=
0x0800000000000000
VRPuppet_CaptureFrame
=
0x0900000000000000
VRPuppet_AcknowledgeFrame
=
0x0a00000000000000
VRPuppet_RejectFrame
=
0x0b00000000000000
VRPuppet_StartTimer
=
0x0c00000000000000
VRPuppet_StopTimer
=
0x0d00000000000000
VRPuppet_UpdateDisplay
=
0x0e00000000000000
VRPuppet_UpdateSensor
=
0x0f00000000000000
VRPuppet_UpdateControllers
=
0x1000000000000000
VRPuppet_Commit
=
0x1100000000000000
VRPuppet_Data1
=
0xf000000000000000
VRPuppet_Data2
=
0xf100000000000000
VRPuppet_Data3
=
0xf200000000000000
VRPuppet_Data4
=
0xf300000000000000
VRPuppet_Data5
=
0xf400000000000000
VRPuppet_Data6
=
0xf500000000000000
VRPuppet_Data7
=
0xf600000000000000
}
;
static
const
int
kNumPuppetHaptics
=
8
;
class
VRPuppetCommandBuffer
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
mozilla
:
:
gfx
:
:
VRPuppetCommandBuffer
)
static
VRPuppetCommandBuffer
&
Get
(
)
;
static
bool
IsCreated
(
)
;
void
Submit
(
const
nsTArray
<
uint64_t
>
&
aBuffer
)
;
void
Reset
(
)
;
bool
HasEnded
(
)
;
void
Run
(
VRSystemState
&
aState
)
;
void
StartPresentation
(
)
;
void
StopPresentation
(
)
;
bool
SubmitFrame
(
)
;
void
VibrateHaptic
(
uint32_t
aControllerIdx
uint32_t
aHapticIndex
float
aIntensity
float
aDuration
)
;
void
StopVibrateHaptic
(
uint32_t
aControllerIdx
)
;
void
StopAllHaptics
(
)
;
static
void
EncodeStruct
(
nsTArray
<
uint64_t
>
&
aBuffer
uint8_t
*
aSrcStart
uint8_t
*
aDstStart
size_t
aLength
gfx
:
:
VRPuppet_Command
aUpdateCommand
)
;
private
:
VRPuppetCommandBuffer
(
)
;
~
VRPuppetCommandBuffer
(
)
;
void
Run
(
)
;
bool
RunCommand
(
uint64_t
aCommand
double
aDeltaTime
)
;
void
WriteData
(
uint8_t
aData
)
;
void
SimulateHaptics
(
double
aDeltaTime
)
;
void
CompleteTest
(
bool
aTimedOut
)
;
nsTArray
<
uint64_t
>
mBuffer
;
mozilla
:
:
Mutex
mMutex
;
VRSystemState
mPendingState
;
VRSystemState
mCommittedState
;
double
mHapticPulseRemaining
[
kVRControllerMaxCount
]
[
kNumPuppetHaptics
]
;
float
mHapticPulseIntensity
[
kVRControllerMaxCount
]
[
kNumPuppetHaptics
]
;
size_t
mDataOffset
;
bool
mPresentationRequested
;
bool
mFrameSubmitted
;
bool
mFrameAccepted
;
double
mTimeoutDuration
;
double
mWaitRemaining
;
double
mBlockedTime
;
double
mTimerElapsed
;
TimeStamp
mLastRunTimestamp
;
bool
mEnded
;
bool
mEndedWithTimeout
;
nsTArray
<
double
>
mTimerSamples
;
}
;
}
}
#
endif
