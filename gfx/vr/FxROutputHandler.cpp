#
include
"
FxROutputHandler
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
moz_external_vr
.
h
"
#
include
"
VRShMem
.
h
"
bool
FxROutputHandler
:
:
TryInitialize
(
IDXGISwapChain
*
aSwapChain
ID3D11Device
*
aDevice
)
{
if
(
mSwapChain
=
=
nullptr
)
{
RefPtr
<
ID3D11Texture2D
>
texOrig
=
nullptr
;
HRESULT
hr
=
aSwapChain
-
>
GetBuffer
(
0
IID_ID3D11Texture2D
getter_AddRefs
(
texOrig
)
)
;
if
(
hr
!
=
S_OK
)
{
return
false
;
}
D3D11_TEXTURE2D_DESC
descOrig
=
{
0
}
;
texOrig
-
>
GetDesc
(
&
descOrig
)
;
descOrig
.
MiscFlags
|
=
D3D11_RESOURCE_MISC_SHARED_NTHANDLE
|
D3D11_RESOURCE_MISC_SHARED
;
hr
=
aDevice
-
>
CreateTexture2D
(
&
descOrig
nullptr
mTexCopy
.
StartAssignment
(
)
)
;
if
(
hr
!
=
S_OK
)
{
return
false
;
}
HANDLE
hCopy
=
nullptr
;
RefPtr
<
IDXGIResource1
>
texResource
;
hr
=
mTexCopy
-
>
QueryInterface
(
IID_IDXGIResource1
getter_AddRefs
(
texResource
)
)
;
if
(
hr
!
=
S_OK
)
{
return
false
;
}
hr
=
texResource
-
>
CreateSharedHandle
(
nullptr
DXGI_SHARED_RESOURCE_READ
|
DXGI_SHARED_RESOURCE_WRITE
nullptr
&
hCopy
)
;
if
(
hr
!
=
S_OK
)
{
return
false
;
}
mSwapChain
=
aSwapChain
;
mozilla
:
:
gfx
:
:
VRShMem
shmem
(
nullptr
true
)
;
if
(
shmem
.
JoinShMem
(
)
)
{
mozilla
:
:
gfx
:
:
VRWindowState
windowState
=
{
0
}
;
shmem
.
PullWindowState
(
windowState
)
;
MOZ_ASSERT
(
windowState
.
hwndFx
!
=
0
)
;
MOZ_ASSERT
(
windowState
.
textureFx
=
=
nullptr
)
;
windowState
.
textureFx
=
(
HANDLE
)
hCopy
;
shmem
.
PushWindowState
(
windowState
)
;
shmem
.
LeaveShMem
(
)
;
HANDLE
hSignal
=
:
:
OpenEventA
(
EVENT_ALL_ACCESS
FALSE
windowState
.
signalName
)
;
:
:
SetEvent
(
hSignal
)
;
:
:
CloseHandle
(
hSignal
)
;
}
}
else
{
MOZ_ASSERT
(
aSwapChain
=
=
mSwapChain
)
;
}
return
mSwapChain
!
=
nullptr
&
&
aSwapChain
=
=
mSwapChain
;
}
void
FxROutputHandler
:
:
UpdateOutput
(
ID3D11DeviceContext
*
aCtx
)
{
MOZ_ASSERT
(
mSwapChain
!
=
nullptr
)
;
ID3D11Texture2D
*
texOrig
=
nullptr
;
HRESULT
hr
=
mSwapChain
-
>
GetBuffer
(
0
IID_PPV_ARGS
(
&
texOrig
)
)
;
if
(
hr
=
=
S_OK
)
{
aCtx
-
>
CopyResource
(
mTexCopy
texOrig
)
;
texOrig
-
>
Release
(
)
;
}
}
