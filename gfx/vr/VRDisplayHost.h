#
ifndef
GFX_VR_DISPLAY_HOST_H
#
define
GFX_VR_DISPLAY_HOST_H
#
include
"
gfxVR
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
TypedEnumBits
.
h
"
namespace
mozilla
{
namespace
layers
{
class
PTextureParent
;
#
if
defined
(
XP_WIN
)
class
TextureSourceD3D11
;
#
endif
}
namespace
gfx
{
class
VRLayerParent
;
class
VRDisplayHost
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VRDisplayHost
)
const
VRDisplayInfo
&
GetDisplayInfo
(
)
const
{
return
mDisplayInfo
;
}
void
AddLayer
(
VRLayerParent
*
aLayer
)
;
void
RemoveLayer
(
VRLayerParent
*
aLayer
)
;
virtual
VRHMDSensorState
GetSensorState
(
)
=
0
;
virtual
VRHMDSensorState
GetImmediateSensorState
(
)
=
0
;
virtual
void
ZeroSensor
(
)
=
0
;
virtual
void
StartPresentation
(
)
=
0
;
virtual
void
StopPresentation
(
)
=
0
;
virtual
void
NotifyVSync
(
)
{
}
;
void
SubmitFrame
(
VRLayerParent
*
aLayer
const
int32_t
&
aInputFrameID
mozilla
:
:
layers
:
:
PTextureParent
*
aTexture
const
gfx
:
:
Rect
&
aLeftEyeRect
const
gfx
:
:
Rect
&
aRightEyeRect
)
;
bool
CheckClearDisplayInfoDirty
(
)
;
protected
:
explicit
VRDisplayHost
(
VRDisplayType
aType
)
;
virtual
~
VRDisplayHost
(
)
;
#
if
defined
(
XP_WIN
)
virtual
void
SubmitFrame
(
mozilla
:
:
layers
:
:
TextureSourceD3D11
*
aSource
const
IntSize
&
aSize
const
VRHMDSensorState
&
aSensorState
const
gfx
:
:
Rect
&
aLeftEyeRect
const
gfx
:
:
Rect
&
aRightEyeRect
)
=
0
;
#
endif
VRDisplayInfo
mDisplayInfo
;
nsTArray
<
RefPtr
<
VRLayerParent
>
>
mLayers
;
static
const
int
kMaxLatencyFrames
=
100
;
VRHMDSensorState
mLastSensorState
[
kMaxLatencyFrames
]
;
int32_t
mInputFrameID
;
private
:
VRDisplayInfo
mLastUpdateDisplayInfo
;
}
;
}
}
#
endif
