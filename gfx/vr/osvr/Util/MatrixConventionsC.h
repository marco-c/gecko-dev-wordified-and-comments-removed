#
ifndef
INCLUDED_MatrixConventionsC_h_GUID_6FC7A4C6_E6C5_4A96_1C28_C3D21B909681
#
define
INCLUDED_MatrixConventionsC_h_GUID_6FC7A4C6_E6C5_4A96_1C28_C3D21B909681
#
include
<
osvr
/
Util
/
Export
.
h
>
#
include
<
osvr
/
Util
/
APIBaseC
.
h
>
#
include
<
osvr
/
Util
/
StdInt
.
h
>
#
include
<
osvr
/
Util
/
Pose3C
.
h
>
#
include
<
osvr
/
Util
/
ReturnCodesC
.
h
>
OSVR_EXTERN_C_BEGIN
typedef
uint16_t
OSVR_MatrixConventions
;
#
ifndef
OSVR_DOXYGEN_EXTERNAL
typedef
enum
OSVR_MatrixMasks
{
OSVR_MATRIX_MASK_ROWMAJOR
=
0x1
OSVR_MATRIX_MASK_ROWVECTORS
=
0x2
OSVR_MATRIX_MASK_LHINPUT
=
0x4
OSVR_MATRIX_MASK_UNSIGNEDZ
=
0x8
}
OSVR_MatrixMasks
;
#
endif
typedef
enum
OSVR_MatrixOrderingFlags
{
OSVR_MATRIX_COLMAJOR
=
0x0
OSVR_MATRIX_ROWMAJOR
=
OSVR_MATRIX_MASK_ROWMAJOR
}
OSVR_MatrixOrderingFlags
;
typedef
enum
OSVR_MatrixVectorFlags
{
OSVR_MATRIX_COLVECTORS
=
0x0
OSVR_MATRIX_ROWVECTORS
=
OSVR_MATRIX_MASK_ROWVECTORS
}
OSVR_MatrixVectorFlags
;
typedef
enum
OSVR_ProjectionMatrixInputFlags
{
OSVR_MATRIX_RHINPUT
=
0x0
OSVR_MATRIX_LHINPUT
=
OSVR_MATRIX_MASK_LHINPUT
}
OSVR_ProjectionMatrixInputFlags
;
typedef
enum
OSVR_ProjectionMatrixZFlags
{
OSVR_MATRIX_SIGNEDZ
=
0x0
OSVR_MATRIX_UNSIGNEDZ
=
OSVR_MATRIX_MASK_UNSIGNEDZ
}
OSVR_ProjectionMatrixZFlags
;
enum
{
OSVR_MATRIX_SIZE
=
16
}
;
OSVR_UTIL_EXPORT
OSVR_ReturnCode
osvrPose3ToMatrixd
(
OSVR_Pose3
const
*
pose
OSVR_MatrixConventions
flags
double
*
mat
)
;
OSVR_UTIL_EXPORT
OSVR_ReturnCode
osvrPose3ToMatrixf
(
OSVR_Pose3
const
*
pose
OSVR_MatrixConventions
flags
float
*
mat
)
;
OSVR_EXTERN_C_END
#
ifdef
__cplusplus
inline
OSVR_ReturnCode
osvrPose3ToMatrix
(
OSVR_Pose3
const
*
pose
OSVR_MatrixConventions
flags
double
*
mat
)
{
return
osvrPose3ToMatrixd
(
pose
flags
mat
)
;
}
inline
OSVR_ReturnCode
osvrPose3ToMatrix
(
OSVR_Pose3
const
*
pose
OSVR_MatrixConventions
flags
float
*
mat
)
{
return
osvrPose3ToMatrixf
(
pose
flags
mat
)
;
}
template
<
typename
Scalar
>
inline
OSVR_ReturnCode
osvrPose3ToMatrix
(
OSVR_Pose3
const
*
pose
OSVR_MatrixConventions
flags
Scalar
mat
[
OSVR_MATRIX_SIZE
]
)
{
return
osvrPose3ToMatrix
(
pose
flags
&
(
mat
[
0
]
)
)
;
}
template
<
typename
Scalar
>
inline
OSVR_ReturnCode
osvrPose3ToMatrix
(
OSVR_Pose3
const
&
pose
OSVR_MatrixConventions
flags
Scalar
mat
[
OSVR_MATRIX_SIZE
]
)
{
return
osvrPose3ToMatrix
(
&
pose
flags
&
(
mat
[
0
]
)
)
;
}
#
endif
#
endif
