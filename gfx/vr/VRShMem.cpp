#
include
"
VRShMem
.
h
"
#
ifdef
MOZILLA_INTERNAL_API
#
include
"
nsString
.
h
"
#
endif
#
include
"
gfxVRMutex
.
h
"
#
if
defined
(
XP_MACOSX
)
#
include
<
sys
/
mman
.
h
>
#
include
<
sys
/
stat
.
h
>
#
include
<
fcntl
.
h
>
#
elif
defined
(
MOZ_WIDGET_ANDROID
)
#
include
"
GeckoVRManager
.
h
"
#
endif
#
if
!
defined
(
XP_WIN
)
#
include
<
unistd
.
h
>
#
endif
using
namespace
mozilla
:
:
gfx
;
#
ifdef
XP_WIN
static
const
char
*
kShmemName
=
"
moz
.
gecko
.
vr_ext
.
0
.
0
.
1
"
;
static
LPCTSTR
kMutexName
=
TEXT
(
"
mozilla
:
:
vr
:
:
ShmemMutex
"
)
;
#
elif
defined
(
XP_MACOSX
)
static
const
char
*
kShmemName
=
"
/
moz
.
gecko
.
vr_ext
.
0
.
0
.
1
"
;
#
endif
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
namespace
{
void
YieldThread
(
)
{
#
if
defined
(
XP_WIN
)
:
:
Sleep
(
0
)
;
#
else
:
:
sleep
(
0
)
;
#
endif
}
}
#
endif
VRShMem
:
:
VRShMem
(
volatile
VRExternalShmem
*
aShmem
bool
aVRProcessEnabled
bool
aIsParentProcess
)
:
mExternalShmem
(
aShmem
)
mVRProcessEnabled
(
aVRProcessEnabled
)
#
if
defined
(
XP_WIN
)
mIsParentProcess
(
aIsParentProcess
)
#
endif
#
if
defined
(
XP_MACOSX
)
mShmemFD
(
0
)
#
elif
defined
(
XP_WIN
)
mShmemFile
(
nullptr
)
mMutex
(
nullptr
)
#
endif
{
MOZ_ASSERT
(
aShmem
=
=
nullptr
|
|
!
aVRProcessEnabled
)
;
}
volatile
VRExternalShmem
*
VRShMem
:
:
GetExternalShmem
(
)
const
{
MOZ_ASSERT
(
!
mVRProcessEnabled
)
;
#
if
defined
(
XP_MACOSX
)
MOZ_ASSERT
(
mShmemFD
=
=
0
)
;
#
elif
defined
(
XP_WIN
)
MOZ_ASSERT
(
mShmemFile
=
=
nullptr
)
;
#
endif
return
mExternalShmem
;
}
bool
VRShMem
:
:
IsDisplayStateShutdown
(
)
const
{
return
mExternalShmem
!
=
nullptr
&
&
mExternalShmem
-
>
state
.
displayState
.
shutdown
;
}
void
VRShMem
:
:
CreateShMem
(
)
{
if
(
mExternalShmem
)
{
return
;
}
#
if
defined
(
XP_WIN
)
if
(
mMutex
=
=
nullptr
)
{
mMutex
=
CreateMutex
(
nullptr
false
kMutexName
)
;
if
(
mMutex
=
=
nullptr
)
{
#
ifdef
MOZILLA_INTERNAL_API
nsAutoCString
msg
;
msg
.
AppendPrintf
(
"
VRManager
CreateMutex
error
\
"
%
lu
\
"
.
"
GetLastError
(
)
)
;
NS_WARNING
(
msg
.
get
(
)
)
;
#
endif
MOZ_ASSERT
(
false
)
;
return
;
}
MOZ_ASSERT
(
GetLastError
(
)
=
=
0
|
|
GetLastError
(
)
=
=
ERROR_ALREADY_EXISTS
)
;
}
#
endif
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
if
(
!
mVRProcessEnabled
)
{
mExternalShmem
=
new
VRExternalShmem
(
)
;
ClearShMem
(
)
;
return
;
}
#
endif
#
if
defined
(
XP_MACOSX
)
if
(
mShmemFD
=
=
0
)
{
mShmemFD
=
shm_open
(
kShmemName
O_RDWR
S_IRUSR
|
S_IWUSR
|
S_IROTH
|
S_IWOTH
)
;
}
if
(
mShmemFD
<
=
0
)
{
mShmemFD
=
0
;
return
;
}
struct
stat
sb
;
fstat
(
mShmemFD
&
sb
)
;
off_t
length
=
sb
.
st_size
;
if
(
length
<
(
off_t
)
sizeof
(
VRExternalShmem
)
)
{
CloseShMem
(
)
;
return
;
}
mExternalShmem
=
(
VRExternalShmem
*
)
mmap
(
NULL
length
PROT_READ
|
PROT_WRITE
MAP_SHARED
mShmemFD
0
)
;
if
(
mExternalShmem
=
=
MAP_FAILED
)
{
mExternalShmem
=
NULL
;
CloseShMem
(
)
;
return
;
}
#
elif
defined
(
XP_WIN
)
if
(
mShmemFile
=
=
nullptr
)
{
mShmemFile
=
CreateFileMappingA
(
INVALID_HANDLE_VALUE
nullptr
PAGE_READWRITE
0
sizeof
(
VRExternalShmem
)
kShmemName
)
;
MOZ_ASSERT
(
GetLastError
(
)
=
=
0
|
|
GetLastError
(
)
=
=
ERROR_ALREADY_EXISTS
)
;
MOZ_ASSERT
(
mShmemFile
)
;
if
(
mShmemFile
=
=
nullptr
)
{
CloseShMem
(
)
;
return
;
}
}
LARGE_INTEGER
length
;
length
.
QuadPart
=
sizeof
(
VRExternalShmem
)
;
mExternalShmem
=
(
VRExternalShmem
*
)
MapViewOfFile
(
mShmemFile
FILE_MAP_ALL_ACCESS
0
0
length
.
QuadPart
)
;
if
(
mExternalShmem
=
=
nullptr
)
{
CloseShMem
(
)
;
return
;
}
#
elif
defined
(
MOZ_WIDGET_ANDROID
)
&
&
defined
(
MOZILLA_INTERNAL_API
)
mExternalShmem
=
(
VRExternalShmem
*
)
mozilla
:
:
GeckoVRManager
:
:
GetExternalContext
(
)
;
if
(
!
mExternalShmem
)
{
return
;
}
int32_t
version
=
-
1
;
int32_t
size
=
0
;
if
(
pthread_mutex_lock
(
(
pthread_mutex_t
*
)
&
(
mExternalShmem
-
>
systemMutex
)
)
=
=
0
)
{
version
=
mExternalShmem
-
>
version
;
size
=
mExternalShmem
-
>
size
;
pthread_mutex_unlock
(
(
pthread_mutex_t
*
)
&
(
mExternalShmem
-
>
systemMutex
)
)
;
}
else
{
return
;
}
if
(
version
!
=
kVRExternalVersion
)
{
mExternalShmem
=
nullptr
;
return
;
}
if
(
size
!
=
sizeof
(
VRExternalShmem
)
)
{
mExternalShmem
=
nullptr
;
return
;
}
#
endif
}
void
VRShMem
:
:
ClearShMem
(
)
{
if
(
mExternalShmem
!
=
nullptr
)
{
#
ifdef
MOZILLA_INTERNAL_API
mExternalShmem
-
>
Clear
(
)
;
#
else
memset
(
(
void
*
)
mExternalShmem
0
sizeof
(
VRExternalShmem
)
)
;
#
endif
}
}
void
VRShMem
:
:
CloseShMem
(
)
{
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
if
(
!
mVRProcessEnabled
)
{
if
(
mExternalShmem
)
{
delete
mExternalShmem
;
mExternalShmem
=
nullptr
;
}
return
;
}
#
endif
#
if
defined
(
XP_MACOSX
)
if
(
mExternalShmem
)
{
munmap
(
(
void
*
)
mExternalShmem
sizeof
(
VRExternalShmem
)
)
;
mExternalShmem
=
NULL
;
}
if
(
mShmemFD
)
{
close
(
mShmemFD
)
;
mShmemFD
=
0
;
}
#
elif
defined
(
XP_WIN
)
if
(
mExternalShmem
)
{
UnmapViewOfFile
(
(
void
*
)
mExternalShmem
)
;
mExternalShmem
=
nullptr
;
}
if
(
mShmemFile
)
{
CloseHandle
(
mShmemFile
)
;
mShmemFile
=
nullptr
;
}
#
elif
defined
(
MOZ_WIDGET_ANDROID
)
mExternalShmem
=
NULL
;
#
endif
#
if
defined
(
XP_WIN
)
if
(
mMutex
)
{
CloseHandle
(
mMutex
)
;
mMutex
=
nullptr
;
}
#
endif
}
bool
VRShMem
:
:
JoinShMem
(
)
{
#
if
defined
(
XP_WIN
)
if
(
!
mMutex
&
&
!
mIsParentProcess
)
{
mMutex
=
OpenMutex
(
MUTEX_ALL_ACCESS
false
kMutexName
)
;
if
(
mMutex
=
=
nullptr
)
{
#
ifdef
MOZILLA_INTERNAL_API
nsAutoCString
msg
;
msg
.
AppendPrintf
(
"
VRService
OpenMutex
error
\
"
%
lu
\
"
.
"
GetLastError
(
)
)
;
NS_WARNING
(
msg
.
get
(
)
)
;
#
endif
MOZ_ASSERT
(
false
)
;
}
MOZ_ASSERT
(
GetLastError
(
)
=
=
0
)
;
}
#
endif
if
(
!
mVRProcessEnabled
)
{
return
true
;
}
#
if
defined
(
XP_WIN
)
base
:
:
ProcessHandle
targetHandle
=
OpenFileMappingA
(
FILE_MAP_ALL_ACCESS
FALSE
kShmemName
)
;
MOZ_ASSERT
(
GetLastError
(
)
=
=
0
)
;
LARGE_INTEGER
length
;
length
.
QuadPart
=
sizeof
(
VRExternalShmem
)
;
mExternalShmem
=
(
VRExternalShmem
*
)
MapViewOfFile
(
reinterpret_cast
<
base
:
:
ProcessHandle
>
(
targetHandle
)
FILE_MAP_ALL_ACCESS
0
0
length
.
QuadPart
)
;
MOZ_ASSERT
(
GetLastError
(
)
=
=
0
)
;
mShmemFile
=
targetHandle
;
if
(
!
mExternalShmem
)
{
MOZ_ASSERT
(
mExternalShmem
)
;
return
false
;
}
#
else
MOZ_ASSERT
(
false
"
JoinShMem
not
implemented
"
)
;
#
endif
return
true
;
}
void
VRShMem
:
:
LeaveShMem
(
)
{
#
if
defined
(
XP_WIN
)
if
(
mShmemFile
)
{
:
:
CloseHandle
(
mShmemFile
)
;
mShmemFile
=
nullptr
;
}
#
endif
if
(
mExternalShmem
!
=
nullptr
&
&
mVRProcessEnabled
)
{
#
if
defined
(
XP_WIN
)
UnmapViewOfFile
(
(
void
*
)
mExternalShmem
)
;
#
endif
mExternalShmem
=
nullptr
;
}
#
if
defined
(
XP_WIN
)
if
(
mMutex
)
{
CloseHandle
(
mMutex
)
;
mMutex
=
nullptr
;
}
#
endif
}
void
VRShMem
:
:
PushBrowserState
(
VRBrowserState
&
aBrowserState
bool
aNotifyCond
)
{
if
(
!
mExternalShmem
)
{
return
;
}
#
if
defined
(
MOZ_WIDGET_ANDROID
)
if
(
pthread_mutex_lock
(
(
pthread_mutex_t
*
)
&
(
mExternalShmem
-
>
geckoMutex
)
)
=
=
0
)
{
memcpy
(
(
void
*
)
&
(
mExternalShmem
-
>
geckoState
)
(
void
*
)
&
aBrowserState
sizeof
(
VRBrowserState
)
)
;
if
(
aNotifyCond
)
{
pthread_cond_signal
(
(
pthread_cond_t
*
)
&
(
mExternalShmem
-
>
geckoCond
)
)
;
}
pthread_mutex_unlock
(
(
pthread_mutex_t
*
)
&
(
mExternalShmem
-
>
geckoMutex
)
)
;
}
#
else
bool
status
=
true
;
#
if
defined
(
XP_WIN
)
WaitForMutex
lock
(
mMutex
)
;
status
=
lock
.
GetStatus
(
)
;
#
endif
if
(
status
)
{
mExternalShmem
-
>
geckoGenerationA
+
+
;
memcpy
(
(
void
*
)
&
(
mExternalShmem
-
>
geckoState
)
(
void
*
)
&
aBrowserState
sizeof
(
VRBrowserState
)
)
;
mExternalShmem
-
>
geckoGenerationB
+
+
;
}
#
endif
}
void
VRShMem
:
:
PullBrowserState
(
mozilla
:
:
gfx
:
:
VRBrowserState
&
aState
)
{
if
(
!
mExternalShmem
)
{
return
;
}
#
if
defined
(
MOZ_WIDGET_ANDROID
)
MOZ_ASSERT
(
false
"
PullBrowserState
not
implemented
"
)
;
#
else
bool
status
=
true
;
#
if
defined
(
XP_WIN
)
if
(
!
mIsParentProcess
)
{
WaitForMutex
lock
(
mMutex
)
;
status
=
lock
.
GetStatus
(
)
;
}
#
endif
if
(
status
)
{
VRExternalShmem
tmp
;
if
(
mExternalShmem
-
>
geckoGenerationA
!
=
mBrowserGeneration
)
{
memcpy
(
&
tmp
(
void
*
)
mExternalShmem
sizeof
(
VRExternalShmem
)
)
;
if
(
tmp
.
geckoGenerationA
=
=
tmp
.
geckoGenerationB
&
&
tmp
.
geckoGenerationA
!
=
0
)
{
memcpy
(
&
aState
&
tmp
.
geckoState
sizeof
(
VRBrowserState
)
)
;
mBrowserGeneration
=
tmp
.
geckoGenerationA
;
}
}
}
#
endif
}
void
VRShMem
:
:
PushSystemState
(
const
mozilla
:
:
gfx
:
:
VRSystemState
&
aState
)
{
if
(
!
mExternalShmem
)
{
return
;
}
#
if
defined
(
MOZ_WIDGET_ANDROID
)
MOZ_ASSERT
(
false
"
JoinShMem
not
implemented
"
)
;
#
else
bool
lockState
=
true
;
#
if
defined
(
XP_WIN
)
if
(
!
mIsParentProcess
)
{
WaitForMutex
lock
(
mMutex
)
;
lockState
=
lock
.
GetStatus
(
)
;
}
#
endif
if
(
lockState
)
{
mExternalShmem
-
>
generationA
+
+
;
memcpy
(
(
void
*
)
&
mExternalShmem
-
>
state
&
aState
sizeof
(
VRSystemState
)
)
;
mExternalShmem
-
>
generationB
+
+
;
}
#
endif
}
#
if
defined
(
MOZ_WIDGET_ANDROID
)
void
VRShMem
:
:
PullSystemState
(
VRDisplayState
&
aDisplayState
VRHMDSensorState
&
aSensorState
VRControllerState
(
&
aControllerState
)
[
kVRControllerMaxCount
]
bool
&
aEnumerationCompleted
const
std
:
:
function
<
bool
(
)
>
&
aWaitCondition
)
{
if
(
!
mExternalShmem
)
{
return
;
}
bool
done
=
false
;
while
(
!
done
)
{
if
(
pthread_mutex_lock
(
(
pthread_mutex_t
*
)
&
(
mExternalShmem
-
>
systemMutex
)
)
=
=
0
)
{
while
(
true
)
{
memcpy
(
&
aDisplayState
(
void
*
)
&
(
mExternalShmem
-
>
state
.
displayState
)
sizeof
(
VRDisplayState
)
)
;
memcpy
(
&
aSensorState
(
void
*
)
&
(
mExternalShmem
-
>
state
.
sensorState
)
sizeof
(
VRHMDSensorState
)
)
;
memcpy
(
aControllerState
(
void
*
)
&
(
mExternalShmem
-
>
state
.
controllerState
)
sizeof
(
VRControllerState
)
*
kVRControllerMaxCount
)
;
aEnumerationCompleted
=
mExternalShmem
-
>
state
.
enumerationCompleted
;
if
(
!
aWaitCondition
|
|
aWaitCondition
(
)
)
{
done
=
true
;
break
;
}
pthread_cond_wait
(
(
pthread_cond_t
*
)
&
mExternalShmem
-
>
systemCond
(
pthread_mutex_t
*
)
&
mExternalShmem
-
>
systemMutex
)
;
}
pthread_mutex_unlock
(
(
pthread_mutex_t
*
)
&
(
mExternalShmem
-
>
systemMutex
)
)
;
}
else
if
(
!
aWaitCondition
)
{
return
;
}
}
}
#
else
void
VRShMem
:
:
PullSystemState
(
VRDisplayState
&
aDisplayState
VRHMDSensorState
&
aSensorState
VRControllerState
(
&
aControllerState
)
[
kVRControllerMaxCount
]
bool
&
aEnumerationCompleted
const
std
:
:
function
<
bool
(
)
>
&
aWaitCondition
)
{
MOZ_ASSERT
(
mExternalShmem
)
;
if
(
!
mExternalShmem
)
{
return
;
}
while
(
true
)
{
{
#
if
defined
(
XP_WIN
)
bool
status
=
true
;
WaitForMutex
lock
(
mMutex
)
;
status
=
lock
.
GetStatus
(
)
;
if
(
status
)
{
#
endif
VRExternalShmem
tmp
;
memcpy
(
&
tmp
(
void
*
)
mExternalShmem
sizeof
(
VRExternalShmem
)
)
;
bool
isCleanCopy
=
tmp
.
generationA
=
=
tmp
.
generationB
&
&
tmp
.
generationA
!
=
0
;
if
(
isCleanCopy
)
{
memcpy
(
&
aDisplayState
&
tmp
.
state
.
displayState
sizeof
(
VRDisplayState
)
)
;
memcpy
(
&
aSensorState
&
tmp
.
state
.
sensorState
sizeof
(
VRHMDSensorState
)
)
;
memcpy
(
aControllerState
(
void
*
)
&
(
mExternalShmem
-
>
state
.
controllerState
)
sizeof
(
VRControllerState
)
*
kVRControllerMaxCount
)
;
aEnumerationCompleted
=
mExternalShmem
-
>
state
.
enumerationCompleted
;
if
(
!
aWaitCondition
|
|
aWaitCondition
(
)
)
{
return
;
}
}
else
if
(
!
aWaitCondition
)
{
return
;
}
YieldThread
(
)
;
#
if
defined
(
XP_WIN
)
}
else
if
(
!
aWaitCondition
)
{
return
;
}
#
endif
}
YieldThread
(
)
;
}
}
#
endif
