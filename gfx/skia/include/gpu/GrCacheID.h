#
ifndef
GrCacheID_DEFINED
#
define
GrCacheID_DEFINED
#
include
"
GrTypes
.
h
"
#
define
GR_DECLARE_RESOURCE_CACHE_TYPE
(
)
\
static
int8_t
GetResourceType
(
)
;
#
define
GR_DEFINE_RESOURCE_CACHE_TYPE
(
ClassName
)
\
int8_t
ClassName
:
:
GetResourceType
(
)
{
\
static
int8_t
kResourceTypeID
=
0
;
\
if
(
0
=
=
kResourceTypeID
)
{
\
kResourceTypeID
=
GrCacheID
:
:
GetNextResourceType
(
)
;
\
}
\
return
kResourceTypeID
;
\
}
#
define
GR_DECLARE_RESOURCE_CACHE_DOMAIN
(
AccessorName
)
\
static
int8_t
AccessorName
(
)
;
#
define
GR_DEFINE_RESOURCE_CACHE_DOMAIN
(
ClassName
AccessorName
)
\
int8_t
ClassName
:
:
AccessorName
(
)
{
\
static
int8_t
kDomainID
=
0
;
\
if
(
0
=
=
kDomainID
)
{
\
kDomainID
=
GrCacheID
:
:
GetNextDomain
(
)
;
\
}
\
return
kDomainID
;
\
}
class
GrCacheID
{
public
:
uint64_t
fPublicID
;
uint32_t
fResourceSpecific32
;
uint8_t
fDomain
;
private
:
uint8_t
fResourceType
;
public
:
uint16_t
fResourceSpecific16
;
GrCacheID
(
uint8_t
resourceType
)
:
fPublicID
(
kDefaultPublicCacheID
)
fDomain
(
GrCacheData
:
:
kScratch_ResourceDomain
)
fResourceType
(
resourceType
)
{
}
void
toRaw
(
uint32_t
v
[
4
]
)
;
uint8_t
getResourceType
(
)
const
{
return
fResourceType
;
}
static
const
uint64_t
kDefaultPublicCacheID
=
0
;
static
const
uint8_t
kInvalid_ResourceType
=
0
;
static
uint8_t
GetNextDomain
(
)
;
static
uint8_t
GetNextResourceType
(
)
;
}
;
#
endif
