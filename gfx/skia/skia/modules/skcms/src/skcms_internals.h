#
pragma
once
#
include
<
stdbool
.
h
>
#
include
<
stdint
.
h
>
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
ARRAY_COUNT
(
arr
)
(
int
)
(
sizeof
(
(
arr
)
)
/
sizeof
(
*
(
arr
)
)
)
#
if
defined
(
__clang__
)
&
&
defined
(
__has_cpp_attribute
)
#
if
__has_cpp_attribute
(
clang
:
:
fallthrough
)
#
define
SKCMS_FALLTHROUGH
[
[
clang
:
:
fallthrough
]
]
#
endif
#
ifndef
SKCMS_HAS_MUSTTAIL
#
if
__has_cpp_attribute
(
clang
:
:
musttail
)
&
&
!
__has_feature
(
memory_sanitizer
)
\
&
&
!
__has_feature
(
address_sanitizer
)
\
&
&
!
defined
(
__EMSCRIPTEN__
)
\
&
&
!
defined
(
__arm__
)
\
&
&
!
defined
(
__riscv
)
\
&
&
!
defined
(
__powerpc__
)
\
&
&
!
defined
(
__loongarch__
)
\
&
&
!
defined
(
_WIN32
)
&
&
!
defined
(
__SYMBIAN32__
)
#
define
SKCMS_HAS_MUSTTAIL
1
#
endif
#
endif
#
endif
#
ifndef
SKCMS_FALLTHROUGH
#
define
SKCMS_FALLTHROUGH
#
endif
#
ifndef
SKCMS_HAS_MUSTTAIL
#
define
SKCMS_HAS_MUSTTAIL
0
#
endif
#
if
defined
(
__clang__
)
#
define
SKCMS_MAYBE_UNUSED
__attribute__
(
(
unused
)
)
#
pragma
clang
diagnostic
ignored
"
-
Wused
-
but
-
marked
-
unused
"
#
elif
defined
(
__GNUC__
)
#
define
SKCMS_MAYBE_UNUSED
__attribute__
(
(
unused
)
)
#
elif
defined
(
_MSC_VER
)
#
define
SKCMS_MAYBE_UNUSED
__pragma
(
warning
(
suppress
:
4100
)
)
#
else
#
define
SKCMS_MAYBE_UNUSED
#
endif
#
define
SAFE_SIZEOF
(
x
)
(
(
uint64_t
)
sizeof
(
x
)
)
#
define
SAFE_FIXED_SIZE
(
type
)
(
(
uint64_t
)
offsetof
(
type
variable
)
)
#
if
!
defined
(
SKCMS_PORTABLE
)
&
&
!
(
defined
(
__clang__
)
|
|
\
defined
(
__GNUC__
)
|
|
\
(
defined
(
__EMSCRIPTEN__
)
&
&
defined
(
__wasm_simd128__
)
)
)
#
define
SKCMS_PORTABLE
1
#
endif
#
if
defined
(
SKCMS_PORTABLE
)
|
|
!
defined
(
__x86_64__
)
|
|
defined
(
ANDROID
)
|
|
defined
(
__ANDROID__
)
#
undef
SKCMS_FORCE_HSW
#
if
!
defined
(
SKCMS_DISABLE_HSW
)
#
define
SKCMS_DISABLE_HSW
1
#
endif
#
undef
SKCMS_FORCE_SKX
#
if
!
defined
(
SKCMS_DISABLE_SKX
)
#
define
SKCMS_DISABLE_SKX
1
#
endif
#
endif
typedef
struct
skcms_ICCTag
{
uint32_t
signature
;
uint32_t
type
;
uint32_t
size
;
const
uint8_t
*
buf
;
}
skcms_ICCTag
;
typedef
struct
skcms_ICCProfile
skcms_ICCProfile
;
typedef
struct
skcms_TransferFunction
skcms_TransferFunction
;
typedef
union
skcms_Curve
skcms_Curve
;
void
skcms_GetTagByIndex
(
const
skcms_ICCProfile
*
uint32_t
idx
skcms_ICCTag
*
)
;
bool
skcms_GetTagBySignature
(
const
skcms_ICCProfile
*
uint32_t
sig
skcms_ICCTag
*
)
;
float
skcms_MaxRoundtripError
(
const
skcms_Curve
*
curve
const
skcms_TransferFunction
*
inv_tf
)
;
extern
const
uint8_t
skcms_252_random_bytes
[
252
]
;
static
inline
float
floorf_
(
float
x
)
{
float
roundtrip
=
(
float
)
(
(
int
)
x
)
;
return
roundtrip
>
x
?
roundtrip
-
1
:
roundtrip
;
}
static
inline
float
fabsf_
(
float
x
)
{
return
x
<
0
?
-
x
:
x
;
}
float
powf_
(
float
float
)
;
#
ifdef
__cplusplus
}
#
endif
