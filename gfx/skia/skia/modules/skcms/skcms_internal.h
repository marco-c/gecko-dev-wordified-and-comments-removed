#
pragma
once
#
include
"
skcms
.
h
"
#
include
<
stdbool
.
h
>
#
include
<
stdint
.
h
>
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
ARRAY_COUNT
(
arr
)
(
int
)
(
sizeof
(
(
arr
)
)
/
sizeof
(
*
(
arr
)
)
)
typedef
struct
skcms_ICCTag
{
uint32_t
signature
;
uint32_t
type
;
uint32_t
size
;
const
uint8_t
*
buf
;
}
skcms_ICCTag
;
void
skcms_GetTagByIndex
(
const
skcms_ICCProfile
*
uint32_t
idx
skcms_ICCTag
*
)
;
bool
skcms_GetTagBySignature
(
const
skcms_ICCProfile
*
uint32_t
sig
skcms_ICCTag
*
)
;
float
skcms_MaxRoundtripError
(
const
skcms_Curve
*
curve
const
skcms_TransferFunction
*
inv_tf
)
;
extern
const
uint8_t
skcms_252_random_bytes
[
252
]
;
static
inline
float
floorf_
(
float
x
)
{
float
roundtrip
=
(
float
)
(
(
int
)
x
)
;
return
roundtrip
>
x
?
roundtrip
-
1
:
roundtrip
;
}
static
inline
float
fabsf_
(
float
x
)
{
return
x
<
0
?
-
x
:
x
;
}
float
powf_
(
float
float
)
;
static
inline
bool
needs_palette
(
skcms_PixelFormat
fmt
)
{
return
(
fmt
>
>
1
)
=
=
(
skcms_PixelFormat_RGBA_8888_Palette8
>
>
1
)
;
}
#
ifdef
__cplusplus
}
#
endif
