#
include
"
include
/
private
/
base
/
SkFloatingPoint
.
h
"
#
include
"
include
/
private
/
base
/
SkAssert
.
h
"
#
include
<
cmath
>
static
inline
int64_t
double_to_twos_complement_bits
(
double
x
)
{
int64_t
bits
=
0
;
static_assert
(
sizeof
(
x
)
=
=
sizeof
(
bits
)
)
;
std
:
:
memcpy
(
&
bits
&
x
sizeof
(
bits
)
)
;
if
(
bits
<
0
)
{
bits
&
=
0x7FFFFFFFFFFFFFFF
;
bits
=
-
bits
;
}
return
bits
;
}
constexpr
static
double
sk_double_epsilon
=
0
.
0000000001
;
bool
sk_doubles_nearly_equal_ulps
(
double
a
double
b
uint8_t
max_ulps_diff
)
{
SkASSERT
(
!
(
fabs
(
a
)
<
sk_double_epsilon
&
&
fabs
(
b
)
<
sk_double_epsilon
)
)
;
SkASSERT
(
!
(
std
:
:
isnan
(
a
)
&
&
std
:
:
isnan
(
b
)
)
)
;
if
(
a
=
=
b
)
{
return
true
;
}
int64_t
aBits
=
double_to_twos_complement_bits
(
a
)
;
int64_t
bBits
=
double_to_twos_complement_bits
(
b
)
;
return
aBits
<
bBits
+
max_ulps_diff
&
&
bBits
<
aBits
+
max_ulps_diff
;
}
bool
sk_double_nearly_zero
(
double
a
)
{
return
a
=
=
0
|
|
fabs
(
a
)
<
sk_double_epsilon
;
}
