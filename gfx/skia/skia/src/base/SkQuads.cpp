#
include
"
src
/
base
/
SkQuads
.
h
"
#
include
"
include
/
private
/
base
/
SkFloatingPoint
.
h
"
#
include
<
cmath
>
static
int
solve_linear
(
const
double
M
const
double
B
double
solution
[
2
]
)
{
if
(
sk_double_nearly_zero
(
M
)
)
{
solution
[
0
]
=
0
;
if
(
sk_double_nearly_zero
(
B
)
)
{
return
1
;
}
return
0
;
}
solution
[
0
]
=
-
B
/
M
;
if
(
!
std
:
:
isfinite
(
solution
[
0
]
)
)
{
return
0
;
}
return
1
;
}
static
bool
close_to_linear
(
double
A
double
B
)
{
if
(
sk_double_nearly_zero
(
B
)
)
{
return
sk_double_nearly_zero
(
A
)
;
}
return
std
:
:
abs
(
A
/
B
)
<
1
.
0e
-
16
;
}
int
SkQuads
:
:
RootsReal
(
const
double
A
const
double
B
const
double
C
double
solution
[
2
]
)
{
if
(
close_to_linear
(
A
B
)
)
{
return
solve_linear
(
B
C
solution
)
;
}
const
double
p
=
sk_ieee_double_divide
(
B
2
*
A
)
;
const
double
q
=
sk_ieee_double_divide
(
C
A
)
;
const
double
p2
=
p
*
p
;
if
(
!
std
:
:
isfinite
(
p2
-
q
)
|
|
(
!
sk_double_nearly_zero
(
p2
-
q
)
&
&
p2
<
q
)
)
{
return
0
;
}
double
sqrt_D
=
0
;
if
(
p2
>
q
)
{
sqrt_D
=
sqrt
(
p2
-
q
)
;
}
solution
[
0
]
=
sqrt_D
-
p
;
solution
[
1
]
=
-
sqrt_D
-
p
;
if
(
sk_double_nearly_zero
(
sqrt_D
)
|
|
sk_doubles_nearly_equal_ulps
(
solution
[
0
]
solution
[
1
]
)
)
{
return
1
;
}
return
2
;
}
