#
include
"
src
/
base
/
SkMathPriv
.
h
"
#
include
"
include
/
private
/
base
/
SkAssert
.
h
"
#
include
"
include
/
private
/
base
/
SkFloatingPoint
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
int32_t
SkSqrtBits
(
int32_t
x
int
count
)
{
SkASSERT
(
x
>
=
0
&
&
count
>
0
&
&
(
unsigned
)
count
<
=
30
)
;
uint32_t
root
=
0
;
uint32_t
remHi
=
0
;
uint32_t
remLo
=
x
;
do
{
root
<
<
=
1
;
remHi
=
(
remHi
<
<
2
)
|
(
remLo
>
>
30
)
;
remLo
<
<
=
2
;
uint32_t
testDiv
=
(
root
<
<
1
)
+
1
;
if
(
remHi
>
=
testDiv
)
{
remHi
-
=
testDiv
;
root
+
+
;
}
}
while
(
-
-
count
>
=
0
)
;
return
root
;
}
int
SkPopCount_portable
(
uint32_t
n
)
{
int
count
=
0
;
while
(
n
)
{
n
&
=
(
n
-
1
)
;
count
+
+
;
}
return
count
;
}
int
SkNthSet
(
uint32_t
target
int
n
)
{
SkASSERT
(
n
<
SkPopCount
(
target
)
)
;
for
(
int
i
=
0
;
i
<
n
;
+
+
i
)
{
target
&
=
(
target
-
1
)
;
}
return
SkCTZ
(
target
)
;
}
bool
sk_floats_are_unit
(
const
float
array
[
]
size_t
count
)
{
bool
is_unit
=
true
;
for
(
size_t
i
=
0
;
i
<
count
;
+
+
i
)
{
is_unit
&
=
(
array
[
i
]
>
=
0
)
&
(
array
[
i
]
<
=
1
)
;
}
return
is_unit
;
}
