#
ifndef
SkASAN_DEFINED
#
define
SkASAN_DEFINED
#
include
<
cstddef
>
#
ifdef
MOZ_SKIA
#
include
"
mozilla
/
MemoryChecking
.
h
"
#
ifdef
MOZ_HAVE_MEM_CHECKS
#
define
SK_SANITIZE_ADDRESS
MOZ_HAVE_MEM_CHECKS
#
endif
static
inline
void
sk_asan_poison_memory_region
(
void
const
volatile
*
addr
size_t
size
)
{
MOZ_MAKE_MEM_NOACCESS
(
addr
size
)
;
}
static
inline
void
sk_asan_unpoison_memory_region
(
void
const
volatile
*
addr
size_t
size
)
{
MOZ_MAKE_MEM_DEFINED
(
addr
size
)
;
}
#
else
#
ifdef
__SANITIZE_ADDRESS__
#
define
SK_SANITIZE_ADDRESS
1
#
endif
#
if
!
defined
(
SK_SANITIZE_ADDRESS
)
&
&
defined
(
__has_feature
)
#
if
__has_feature
(
address_sanitizer
)
#
define
SK_SANITIZE_ADDRESS
1
#
endif
#
endif
#
ifdef
SK_SANITIZE_ADDRESS
extern
"
C
"
{
void
__asan_poison_memory_region
(
void
const
volatile
*
addr
size_t
size
)
;
void
__asan_unpoison_memory_region
(
void
const
volatile
*
addr
size_t
size
)
;
}
#
endif
static
inline
void
sk_asan_poison_memory_region
(
void
const
volatile
*
addr
size_t
size
)
{
#
ifdef
SK_SANITIZE_ADDRESS
__asan_poison_memory_region
(
addr
size
)
;
#
endif
}
static
inline
void
sk_asan_unpoison_memory_region
(
void
const
volatile
*
addr
size_t
size
)
{
#
ifdef
SK_SANITIZE_ADDRESS
__asan_unpoison_memory_region
(
addr
size
)
;
#
endif
}
#
endif
#
endif
