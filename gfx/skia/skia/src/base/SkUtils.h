#
ifndef
SkUtils_DEFINED
#
define
SkUtils_DEFINED
#
include
"
include
/
private
/
base
/
SkAttributes
.
h
"
#
include
<
cstring
>
#
include
<
type_traits
>
namespace
SkHexadecimalDigits
{
extern
const
char
gUpper
[
16
]
;
extern
const
char
gLower
[
16
]
;
}
template
<
typename
T
typename
P
>
static
SK_ALWAYS_INLINE
T
sk_unaligned_load
(
const
P
*
ptr
)
{
static_assert
(
std
:
:
is_trivially_copyable
<
T
>
:
:
value
)
;
static_assert
(
std
:
:
is_trivially_copyable
<
P
>
:
:
value
)
;
T
val
;
memcpy
(
&
val
ptr
sizeof
(
val
)
)
;
return
val
;
}
template
<
typename
T
typename
P
>
static
SK_ALWAYS_INLINE
void
sk_unaligned_store
(
P
*
ptr
T
val
)
{
static_assert
(
std
:
:
is_trivially_copyable
<
T
>
:
:
value
)
;
static_assert
(
std
:
:
is_trivially_copyable
<
P
>
:
:
value
)
;
memcpy
(
ptr
&
val
sizeof
(
val
)
)
;
}
template
<
typename
Dst
typename
Src
>
static
SK_ALWAYS_INLINE
Dst
sk_bit_cast
(
const
Src
&
src
)
{
static_assert
(
sizeof
(
Dst
)
=
=
sizeof
(
Src
)
)
;
return
sk_unaligned_load
<
Dst
>
(
&
src
)
;
}
#
endif
