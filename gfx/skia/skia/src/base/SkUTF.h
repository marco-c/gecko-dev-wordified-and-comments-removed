#
ifndef
SkUTF_DEFINED
#
define
SkUTF_DEFINED
#
include
"
include
/
private
/
base
/
SkAPI
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
typedef
int32_t
SkUnichar
;
namespace
SkUTF
{
SK_SPI
int
CountUTF8
(
const
char
*
utf8
size_t
byteLength
)
;
SK_SPI
int
CountUTF16
(
const
uint16_t
*
utf16
size_t
byteLength
)
;
SK_SPI
int
CountUTF32
(
const
int32_t
*
utf32
size_t
byteLength
)
;
SK_SPI
SkUnichar
NextUTF8
(
const
char
*
*
ptr
const
char
*
end
)
;
SK_SPI
SkUnichar
NextUTF16
(
const
uint16_t
*
*
ptr
const
uint16_t
*
end
)
;
SK_SPI
SkUnichar
NextUTF32
(
const
int32_t
*
*
ptr
const
int32_t
*
end
)
;
constexpr
unsigned
kMaxBytesInUTF8Sequence
=
4
;
SK_SPI
size_t
ToUTF8
(
SkUnichar
uni
char
utf8
[
kMaxBytesInUTF8Sequence
]
=
nullptr
)
;
SK_SPI
size_t
ToUTF16
(
SkUnichar
uni
uint16_t
utf16
[
2
]
=
nullptr
)
;
SK_SPI
int
UTF8ToUTF16
(
uint16_t
dst
[
]
int
dstCapacity
const
char
src
[
]
size_t
srcByteLength
)
;
SK_SPI
int
UTF16ToUTF8
(
char
dst
[
]
int
dstCapacity
const
uint16_t
src
[
]
size_t
srcLength
)
;
static
inline
bool
IsLeadingSurrogateUTF16
(
uint16_t
c
)
{
return
(
(
c
)
&
0xFC00
)
=
=
0xD800
;
}
static
inline
bool
IsTrailingSurrogateUTF16
(
uint16_t
c
)
{
return
(
(
c
)
&
0xFC00
)
=
=
0xDC00
;
}
}
#
endif
