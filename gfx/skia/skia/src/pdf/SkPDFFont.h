#
ifndef
SkPDFFont_DEFINED
#
define
SkPDFFont_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkScalar
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
src
/
base
/
SkUTF
.
h
"
#
include
"
src
/
core
/
SkAdvancedTypefaceMetrics
.
h
"
#
include
"
src
/
core
/
SkStrikeSpec
.
h
"
#
include
"
src
/
core
/
SkTHash
.
h
"
#
include
"
src
/
pdf
/
SkPDFGlyphUse
.
h
"
#
include
"
src
/
pdf
/
SkPDFTypes
.
h
"
#
include
<
cstdint
>
#
include
<
vector
>
class
SkDescriptor
;
class
SkFont
;
class
SkGlyph
;
class
SkPaint
;
class
SkPDFDocument
;
class
SkPDFFont
;
class
SkString
;
class
SkTypeface
;
class
SkPDFStrikeSpec
{
public
:
SkPDFStrikeSpec
(
SkStrikeSpec
SkScalar
em
)
;
const
SkStrikeSpec
fStrikeSpec
;
const
SkScalar
fUnitsPerEM
;
}
;
class
SkPDFStrike
:
public
SkRefCnt
{
public
:
static
sk_sp
<
SkPDFStrike
>
Make
(
SkPDFDocument
*
doc
const
SkFont
&
const
SkPaint
&
)
;
const
SkPDFStrikeSpec
fPath
;
const
SkPDFStrikeSpec
fImage
;
const
bool
fHasMaskFilter
;
SkPDFDocument
*
fDoc
;
skia_private
:
:
THashMap
<
SkGlyphID
SkPDFFont
>
fFontMap
;
SkPDFFont
*
getFontResource
(
const
SkGlyph
*
glyph
)
;
struct
Traits
{
static
const
SkDescriptor
&
GetKey
(
const
sk_sp
<
SkPDFStrike
>
&
strike
)
;
static
uint32_t
Hash
(
const
SkDescriptor
&
descriptor
)
;
}
;
private
:
SkPDFStrike
(
SkPDFStrikeSpec
path
SkPDFStrikeSpec
image
bool
hasMaskFilter
SkPDFDocument
*
)
;
}
;
class
SkPDFFont
{
public
:
~
SkPDFFont
(
)
;
SkPDFFont
(
SkPDFFont
&
&
)
;
SkPDFFont
&
operator
=
(
SkPDFFont
&
&
)
=
delete
;
SkAdvancedTypefaceMetrics
:
:
FontType
getType
(
)
const
{
return
fFontType
;
}
static
SkAdvancedTypefaceMetrics
:
:
FontType
FontType
(
const
SkPDFStrike
&
const
SkAdvancedTypefaceMetrics
&
)
;
static
void
GetType1GlyphNames
(
const
SkTypeface
&
SkString
*
)
;
static
bool
IsMultiByte
(
SkAdvancedTypefaceMetrics
:
:
FontType
type
)
{
return
type
=
=
SkAdvancedTypefaceMetrics
:
:
kType1CID_Font
|
|
type
=
=
SkAdvancedTypefaceMetrics
:
:
kTrueType_Font
|
|
type
=
=
SkAdvancedTypefaceMetrics
:
:
kCFF_Font
;
}
bool
multiByteGlyphs
(
)
const
{
return
SkPDFFont
:
:
IsMultiByte
(
this
-
>
getType
(
)
)
;
}
bool
hasGlyph
(
SkGlyphID
gid
)
{
return
(
gid
>
=
this
-
>
firstGlyphID
(
)
&
&
gid
<
=
this
-
>
lastGlyphID
(
)
)
|
|
gid
=
=
0
;
}
SkGlyphID
glyphToPDFFontEncoding
(
SkGlyphID
gid
)
const
{
if
(
this
-
>
multiByteGlyphs
(
)
|
|
gid
=
=
0
)
{
return
gid
;
}
SkASSERT
(
gid
>
=
this
-
>
firstGlyphID
(
)
&
&
gid
<
=
this
-
>
lastGlyphID
(
)
)
;
SkASSERT
(
this
-
>
firstGlyphID
(
)
>
0
)
;
return
gid
-
this
-
>
firstGlyphID
(
)
+
1
;
}
void
noteGlyphUsage
(
SkGlyphID
glyph
)
{
SkASSERT
(
this
-
>
hasGlyph
(
glyph
)
)
;
fGlyphUsage
.
set
(
glyph
)
;
}
SkPDFIndirectReference
indirectReference
(
)
const
{
return
fIndirectReference
;
}
static
const
SkAdvancedTypefaceMetrics
*
GetMetrics
(
const
SkTypeface
&
typeface
SkPDFDocument
*
canon
)
;
static
const
std
:
:
vector
<
SkUnichar
>
&
GetUnicodeMap
(
const
SkTypeface
&
typeface
SkPDFDocument
*
canon
)
;
static
skia_private
:
:
THashMap
<
SkGlyphID
SkString
>
&
GetUnicodeMapEx
(
const
SkTypeface
&
typeface
SkPDFDocument
*
canon
)
;
static
void
PopulateCommonFontDescriptor
(
SkPDFDict
*
descriptor
const
SkAdvancedTypefaceMetrics
&
uint16_t
emSize
int16_t
defaultWidth
)
;
void
emitSubset
(
SkPDFDocument
*
)
const
;
static
bool
CanEmbedTypeface
(
const
SkTypeface
&
SkPDFDocument
*
)
;
SkGlyphID
firstGlyphID
(
)
const
{
return
fGlyphUsage
.
firstNonZero
(
)
;
}
SkGlyphID
lastGlyphID
(
)
const
{
return
fGlyphUsage
.
lastGlyph
(
)
;
}
const
SkPDFGlyphUse
&
glyphUsage
(
)
const
{
return
fGlyphUsage
;
}
const
SkPDFStrike
&
strike
(
)
const
{
return
*
fStrike
;
}
private
:
const
SkPDFStrike
*
fStrike
;
SkPDFGlyphUse
fGlyphUsage
;
SkPDFIndirectReference
fIndirectReference
;
SkAdvancedTypefaceMetrics
:
:
FontType
fFontType
;
SkPDFFont
(
const
SkPDFStrike
*
SkGlyphID
firstGlyphID
SkGlyphID
lastGlyphID
SkAdvancedTypefaceMetrics
:
:
FontType
fontType
SkPDFIndirectReference
indirectReference
)
;
SkPDFFont
(
)
=
delete
;
SkPDFFont
(
const
SkPDFFont
&
)
=
delete
;
SkPDFFont
&
operator
=
(
const
SkPDFFont
&
)
=
delete
;
friend
class
SkPDFStrike
;
}
;
#
endif
