#
ifndef
SkPDFFont_DEFINED
#
define
SkPDFFont_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkTypeface
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
src
/
core
/
SkAdvancedTypefaceMetrics
.
h
"
#
include
"
src
/
core
/
SkStrikeCache
.
h
"
#
include
"
src
/
pdf
/
SkPDFGlyphUse
.
h
"
#
include
"
src
/
pdf
/
SkPDFTypes
.
h
"
#
include
<
vector
>
class
SkPDFDocument
;
class
SkString
;
class
SkPDFFont
{
public
:
~
SkPDFFont
(
)
;
SkPDFFont
(
SkPDFFont
&
&
)
;
SkPDFFont
&
operator
=
(
SkPDFFont
&
&
)
;
SkTypeface
*
typeface
(
)
const
{
return
fTypeface
.
get
(
)
;
}
SkAdvancedTypefaceMetrics
:
:
FontType
getType
(
)
const
{
return
fFontType
;
}
static
SkAdvancedTypefaceMetrics
:
:
FontType
FontType
(
const
SkTypeface
&
const
SkAdvancedTypefaceMetrics
&
)
;
static
void
GetType1GlyphNames
(
const
SkTypeface
&
SkString
*
)
;
static
bool
IsMultiByte
(
SkAdvancedTypefaceMetrics
:
:
FontType
type
)
{
return
type
=
=
SkAdvancedTypefaceMetrics
:
:
kType1CID_Font
|
|
type
=
=
SkAdvancedTypefaceMetrics
:
:
kTrueType_Font
|
|
type
=
=
SkAdvancedTypefaceMetrics
:
:
kCFF_Font
;
}
bool
multiByteGlyphs
(
)
const
{
return
SkPDFFont
:
:
IsMultiByte
(
this
-
>
getType
(
)
)
;
}
bool
hasGlyph
(
SkGlyphID
gid
)
{
return
(
gid
>
=
this
-
>
firstGlyphID
(
)
&
&
gid
<
=
this
-
>
lastGlyphID
(
)
)
|
|
gid
=
=
0
;
}
SkGlyphID
glyphToPDFFontEncoding
(
SkGlyphID
gid
)
const
{
if
(
this
-
>
multiByteGlyphs
(
)
|
|
gid
=
=
0
)
{
return
gid
;
}
SkASSERT
(
gid
>
=
this
-
>
firstGlyphID
(
)
&
&
gid
<
=
this
-
>
lastGlyphID
(
)
)
;
SkASSERT
(
this
-
>
firstGlyphID
(
)
>
0
)
;
return
gid
-
this
-
>
firstGlyphID
(
)
+
1
;
}
void
noteGlyphUsage
(
SkGlyphID
glyph
)
{
SkASSERT
(
this
-
>
hasGlyph
(
glyph
)
)
;
fGlyphUsage
.
set
(
glyph
)
;
}
SkPDFIndirectReference
indirectReference
(
)
const
{
return
fIndirectReference
;
}
static
SkPDFFont
*
GetFontResource
(
SkPDFDocument
*
doc
const
SkGlyph
*
glyphs
SkTypeface
*
typeface
)
;
static
const
SkAdvancedTypefaceMetrics
*
GetMetrics
(
const
SkTypeface
*
typeface
SkPDFDocument
*
canon
)
;
static
const
std
:
:
vector
<
SkUnichar
>
&
GetUnicodeMap
(
const
SkTypeface
*
typeface
SkPDFDocument
*
canon
)
;
static
void
PopulateCommonFontDescriptor
(
SkPDFDict
*
descriptor
const
SkAdvancedTypefaceMetrics
&
uint16_t
emSize
int16_t
defaultWidth
)
;
void
emitSubset
(
SkPDFDocument
*
)
const
;
static
bool
CanEmbedTypeface
(
SkTypeface
*
SkPDFDocument
*
)
;
SkGlyphID
firstGlyphID
(
)
const
{
return
fGlyphUsage
.
firstNonZero
(
)
;
}
SkGlyphID
lastGlyphID
(
)
const
{
return
fGlyphUsage
.
lastGlyph
(
)
;
}
const
SkPDFGlyphUse
&
glyphUsage
(
)
const
{
return
fGlyphUsage
;
}
sk_sp
<
SkTypeface
>
refTypeface
(
)
const
{
return
fTypeface
;
}
private
:
sk_sp
<
SkTypeface
>
fTypeface
;
SkPDFGlyphUse
fGlyphUsage
;
SkPDFIndirectReference
fIndirectReference
;
SkAdvancedTypefaceMetrics
:
:
FontType
fFontType
;
SkPDFFont
(
sk_sp
<
SkTypeface
>
SkGlyphID
firstGlyphID
SkGlyphID
lastGlyphID
SkAdvancedTypefaceMetrics
:
:
FontType
fontType
SkPDFIndirectReference
indirectReference
)
;
SkPDFFont
(
)
=
delete
;
SkPDFFont
(
const
SkPDFFont
&
)
=
delete
;
SkPDFFont
&
operator
=
(
const
SkPDFFont
&
)
=
delete
;
}
;
#
endif
