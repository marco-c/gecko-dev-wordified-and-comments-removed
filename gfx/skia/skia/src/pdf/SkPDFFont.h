#
ifndef
SkPDFFont_DEFINED
#
define
SkPDFFont_DEFINED
#
include
"
SkAdvancedTypefaceMetrics
.
h
"
#
include
"
SkBitSet
.
h
"
#
include
"
SkPDFTypes
.
h
"
#
include
"
SkTDArray
.
h
"
#
include
"
SkTypeface
.
h
"
class
SkAutoGlyphCache
;
class
SkPDFCanon
;
class
SkPDFFont
;
class
SkPDFFont
:
public
SkPDFDict
{
public
:
~
SkPDFFont
(
)
override
;
SkTypeface
*
typeface
(
)
const
{
return
fTypeface
.
get
(
)
;
}
SkAdvancedTypefaceMetrics
:
:
FontType
getType
(
)
const
{
return
fFontType
;
}
static
SkAdvancedTypefaceMetrics
:
:
FontType
FontType
(
const
SkAdvancedTypefaceMetrics
&
)
;
static
bool
IsMultiByte
(
SkAdvancedTypefaceMetrics
:
:
FontType
type
)
{
return
type
=
=
SkAdvancedTypefaceMetrics
:
:
kType1CID_Font
|
|
type
=
=
SkAdvancedTypefaceMetrics
:
:
kTrueType_Font
;
}
static
SkAutoGlyphCache
MakeVectorCache
(
SkTypeface
*
int
*
sizeOut
)
;
bool
multiByteGlyphs
(
)
const
{
return
SkPDFFont
:
:
IsMultiByte
(
this
-
>
getType
(
)
)
;
}
bool
hasGlyph
(
SkGlyphID
gid
)
{
return
(
gid
>
=
fFirstGlyphID
&
&
gid
<
=
fLastGlyphID
)
|
|
gid
=
=
0
;
}
SkGlyphID
glyphToPDFFontEncoding
(
SkGlyphID
gid
)
const
{
if
(
this
-
>
multiByteGlyphs
(
)
|
|
gid
=
=
0
)
{
return
gid
;
}
SkASSERT
(
gid
>
=
fFirstGlyphID
&
&
gid
<
=
fLastGlyphID
)
;
SkASSERT
(
fFirstGlyphID
>
0
)
;
return
gid
-
fFirstGlyphID
+
1
;
}
void
noteGlyphUsage
(
SkGlyphID
glyph
)
{
SkASSERT
(
this
-
>
hasGlyph
(
glyph
)
)
;
fGlyphUsage
.
set
(
glyph
)
;
}
static
sk_sp
<
SkPDFFont
>
GetFontResource
(
SkPDFCanon
*
canon
SkTypeface
*
typeface
SkGlyphID
glyphID
)
;
static
const
SkAdvancedTypefaceMetrics
*
GetMetrics
(
SkTypeface
*
typeface
SkPDFCanon
*
canon
)
;
virtual
void
getFontSubset
(
SkPDFCanon
*
)
=
0
;
static
bool
CanEmbedTypeface
(
SkTypeface
*
SkPDFCanon
*
)
;
protected
:
struct
Info
{
sk_sp
<
SkTypeface
>
fTypeface
;
SkGlyphID
fFirstGlyphID
;
SkGlyphID
fLastGlyphID
;
SkAdvancedTypefaceMetrics
:
:
FontType
fFontType
;
}
;
SkPDFFont
(
Info
)
;
SkGlyphID
firstGlyphID
(
)
const
{
return
fFirstGlyphID
;
}
SkGlyphID
lastGlyphID
(
)
const
{
return
fLastGlyphID
;
}
const
SkBitSet
&
glyphUsage
(
)
const
{
return
fGlyphUsage
;
}
sk_sp
<
SkTypeface
>
refTypeface
(
)
const
{
return
fTypeface
;
}
void
drop
(
)
override
;
private
:
sk_sp
<
SkTypeface
>
fTypeface
;
SkBitSet
fGlyphUsage
;
const
SkGlyphID
fFirstGlyphID
;
const
SkGlyphID
fLastGlyphID
;
const
SkAdvancedTypefaceMetrics
:
:
FontType
fFontType
;
typedef
SkPDFDict
INHERITED
;
}
;
#
endif
