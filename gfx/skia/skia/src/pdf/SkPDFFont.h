#
ifndef
SkPDFFont_DEFINED
#
define
SkPDFFont_DEFINED
#
include
"
SkAdvancedTypefaceMetrics
.
h
"
#
include
"
SkBitSet
.
h
"
#
include
"
SkPDFTypes
.
h
"
#
include
"
SkTDArray
.
h
"
#
include
"
SkTypeface
.
h
"
class
SkPaint
;
class
SkPDFCanon
;
class
SkPDFObjNumMap
;
class
SkPDFFont
;
class
SkPDFGlyphSet
:
SkNoncopyable
{
public
:
SkPDFGlyphSet
(
)
;
void
set
(
const
uint16_t
*
glyphIDs
int
numGlyphs
)
;
bool
has
(
uint16_t
glyphID
)
const
;
void
merge
(
const
SkPDFGlyphSet
&
usage
)
;
void
exportTo
(
SkTDArray
<
uint32_t
>
*
glyphIDs
)
const
;
private
:
SkBitSet
fBitSet
;
}
;
class
SkPDFGlyphSetMap
:
SkNoncopyable
{
public
:
struct
FontGlyphSetPair
{
FontGlyphSetPair
(
SkPDFFont
*
font
SkPDFGlyphSet
*
glyphSet
)
;
SkPDFFont
*
fFont
;
SkPDFGlyphSet
*
fGlyphSet
;
}
;
SkPDFGlyphSetMap
(
)
;
~
SkPDFGlyphSetMap
(
)
;
const
FontGlyphSetPair
*
begin
(
)
const
{
return
fMap
.
begin
(
)
;
}
const
FontGlyphSetPair
*
end
(
)
const
{
return
fMap
.
end
(
)
;
}
void
merge
(
const
SkPDFGlyphSetMap
&
usage
)
;
void
reset
(
)
;
void
noteGlyphUsage
(
SkPDFFont
*
font
const
uint16_t
*
glyphIDs
int
numGlyphs
)
;
private
:
SkPDFGlyphSet
*
getGlyphSetForFont
(
SkPDFFont
*
font
)
;
SkTDArray
<
FontGlyphSetPair
>
fMap
;
}
;
class
SkPDFFont
:
public
SkPDFDict
{
public
:
virtual
~
SkPDFFont
(
)
;
SkTypeface
*
typeface
(
)
;
virtual
SkAdvancedTypefaceMetrics
:
:
FontType
getType
(
)
;
virtual
bool
multiByteGlyphs
(
)
const
=
0
;
bool
canEmbed
(
)
const
;
bool
canSubset
(
)
const
;
bool
hasGlyph
(
uint16_t
glyphID
)
;
int
glyphsToPDFFontEncoding
(
uint16_t
*
glyphIDs
int
numGlyphs
)
;
static
SkPDFFont
*
GetFontResource
(
SkPDFCanon
*
canon
SkTypeface
*
typeface
uint16_t
glyphID
)
;
virtual
SkPDFFont
*
getFontSubset
(
const
SkPDFGlyphSet
*
usage
)
;
enum
Match
{
kExact_Match
kRelated_Match
kNot_Match
}
;
static
Match
IsMatch
(
SkPDFFont
*
existingFont
uint32_t
existingFontID
uint16_t
existingGlyphID
uint32_t
searchFontID
uint16_t
searchGlyphID
)
;
static
bool
CanEmbedTypeface
(
SkTypeface
*
SkPDFCanon
*
)
;
protected
:
SkPDFFont
(
const
SkAdvancedTypefaceMetrics
*
fontInfo
SkTypeface
*
typeface
SkPDFDict
*
relatedFontDescriptor
)
;
const
SkAdvancedTypefaceMetrics
*
fontInfo
(
)
;
void
setFontInfo
(
const
SkAdvancedTypefaceMetrics
*
info
)
;
uint16_t
firstGlyphID
(
)
const
;
uint16_t
lastGlyphID
(
)
const
;
void
setLastGlyphID
(
uint16_t
glyphID
)
;
SkPDFDict
*
getFontDescriptor
(
)
;
void
setFontDescriptor
(
SkPDFDict
*
descriptor
)
;
bool
addCommonFontDescriptorEntries
(
int16_t
defaultWidth
)
;
void
adjustGlyphRangeForSingleByteEncoding
(
uint16_t
glyphID
)
;
void
populateToUnicodeTable
(
const
SkPDFGlyphSet
*
subset
)
;
static
SkPDFFont
*
Create
(
SkPDFCanon
*
canon
const
SkAdvancedTypefaceMetrics
*
fontInfo
SkTypeface
*
typeface
uint16_t
glyphID
SkPDFDict
*
relatedFontDescriptor
)
;
static
bool
Find
(
uint32_t
fontID
uint16_t
glyphID
int
*
index
)
;
void
drop
(
)
override
;
private
:
sk_sp
<
SkTypeface
>
fTypeface
;
uint16_t
fFirstGlyphID
;
uint16_t
fLastGlyphID
;
sk_sp
<
const
SkAdvancedTypefaceMetrics
>
fFontInfo
;
sk_sp
<
SkPDFDict
>
fDescriptor
;
SkAdvancedTypefaceMetrics
:
:
FontType
fFontType
;
typedef
SkPDFDict
INHERITED
;
}
;
#
endif
