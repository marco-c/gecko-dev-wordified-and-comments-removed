#
ifndef
SkScopeExit_DEFINED
#
define
SkScopeExit_DEFINED
#
include
"
SkTypes
.
h
"
template
<
typename
Fn
>
class
SkScopeExit
{
public
:
SkScopeExit
(
Fn
f
)
:
fFn
(
std
:
:
move
(
f
)
)
{
}
~
SkScopeExit
(
)
{
fFn
(
)
;
}
private
:
Fn
fFn
;
SkScopeExit
(
const
SkScopeExit
&
)
=
delete
;
SkScopeExit
&
operator
=
(
const
SkScopeExit
&
)
=
delete
;
SkScopeExit
(
SkScopeExit
&
&
)
=
delete
;
SkScopeExit
&
operator
=
(
SkScopeExit
&
&
)
=
delete
;
}
;
template
<
typename
Fn
>
inline
SkScopeExit
<
Fn
>
SkMakeScopeExit
(
Fn
&
&
fn
)
{
return
{
std
:
:
move
(
fn
)
}
;
}
#
define
SK_AT_SCOPE_EXIT
(
stmt
)
\
SK_UNUSED
auto
&
&
SK_MACRO_APPEND_LINE
(
at_scope_exit_
)
=
\
SkMakeScopeExit
(
[
&
]
(
)
{
stmt
;
}
)
;
#
endif
