#
ifndef
SkPDFCanon_DEFINED
#
define
SkPDFCanon_DEFINED
#
include
"
SkPDFGraphicState
.
h
"
#
include
"
SkPDFShader
.
h
"
#
include
"
SkPixelSerializer
.
h
"
#
include
"
SkTDArray
.
h
"
#
include
"
SkTHash
.
h
"
#
include
"
SkBitmapKey
.
h
"
class
SkPDFFont
;
class
SkPaint
;
class
SkImage
;
class
SkPDFCanon
:
SkNoncopyable
{
public
:
~
SkPDFCanon
(
)
{
this
-
>
reset
(
)
;
}
void
reset
(
)
;
SkPDFFont
*
findFont
(
uint32_t
fontID
uint16_t
glyphID
SkPDFFont
*
*
relatedFont
)
const
;
void
addFont
(
SkPDFFont
*
font
uint32_t
fontID
uint16_t
fGlyphID
)
;
SkPDFFunctionShader
*
findFunctionShader
(
const
SkPDFShader
:
:
State
&
)
const
;
void
addFunctionShader
(
SkPDFFunctionShader
*
)
;
SkPDFAlphaFunctionShader
*
findAlphaShader
(
const
SkPDFShader
:
:
State
&
)
const
;
void
addAlphaShader
(
SkPDFAlphaFunctionShader
*
)
;
SkPDFImageShader
*
findImageShader
(
const
SkPDFShader
:
:
State
&
)
const
;
void
addImageShader
(
SkPDFImageShader
*
)
;
const
SkPDFGraphicState
*
findGraphicState
(
const
SkPDFGraphicState
&
)
const
;
void
addGraphicState
(
const
SkPDFGraphicState
*
)
;
sk_sp
<
SkPDFObject
>
findPDFBitmap
(
SkBitmapKey
key
)
const
;
void
addPDFBitmap
(
SkBitmapKey
key
sk_sp
<
SkPDFObject
>
)
;
SkTHashMap
<
uint32_t
bool
>
fCanEmbedTypeface
;
SkPixelSerializer
*
getPixelSerializer
(
)
const
{
return
fPixelSerializer
.
get
(
)
;
}
void
setPixelSerializer
(
SkPixelSerializer
*
ps
)
{
fPixelSerializer
.
reset
(
ps
)
;
}
sk_sp
<
SkPDFStream
>
makeInvertFunction
(
)
;
sk_sp
<
SkPDFDict
>
makeNoSmaskGraphicState
(
)
;
sk_sp
<
SkPDFArray
>
makeRangeObject
(
)
;
private
:
struct
FontRec
{
SkPDFFont
*
fFont
;
uint32_t
fFontID
;
uint16_t
fGlyphID
;
}
;
SkTDArray
<
FontRec
>
fFontRecords
;
SkTDArray
<
SkPDFFunctionShader
*
>
fFunctionShaderRecords
;
SkTDArray
<
SkPDFAlphaFunctionShader
*
>
fAlphaShaderRecords
;
SkTDArray
<
SkPDFImageShader
*
>
fImageShaderRecords
;
struct
WrapGS
{
explicit
WrapGS
(
const
SkPDFGraphicState
*
ptr
=
nullptr
)
:
fPtr
(
ptr
)
{
}
const
SkPDFGraphicState
*
fPtr
;
bool
operator
=
=
(
const
WrapGS
&
rhs
)
const
{
SkASSERT
(
fPtr
)
;
SkASSERT
(
rhs
.
fPtr
)
;
return
*
fPtr
=
=
*
rhs
.
fPtr
;
}
struct
Hash
{
uint32_t
operator
(
)
(
const
WrapGS
&
w
)
const
{
SkASSERT
(
w
.
fPtr
)
;
return
w
.
fPtr
-
>
hash
(
)
;
}
}
;
}
;
SkTHashSet
<
WrapGS
WrapGS
:
:
Hash
>
fGraphicStateRecords
;
SkTHashMap
<
SkBitmapKey
SkPDFObject
*
>
fPDFBitmapMap
;
sk_sp
<
SkPixelSerializer
>
fPixelSerializer
;
sk_sp
<
SkPDFStream
>
fInvertFunction
;
sk_sp
<
SkPDFDict
>
fNoSmaskGraphicState
;
sk_sp
<
SkPDFArray
>
fRangeObject
;
}
;
#
endif
