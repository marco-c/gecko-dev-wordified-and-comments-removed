#
ifndef
SkPDFUnion_DEFINED
#
define
SkPDFUnion_DEFINED
#
include
"
SkPDFTypes
.
h
"
template
<
class
T
>
class
SkStorageFor
{
public
:
const
T
&
get
(
)
const
{
return
*
reinterpret_cast
<
const
T
*
>
(
&
fStore
)
;
}
T
&
get
(
)
{
return
*
reinterpret_cast
<
T
*
>
(
&
fStore
)
;
}
template
<
class
.
.
.
Args
>
void
init
(
Args
&
&
.
.
.
args
)
{
new
(
&
this
-
>
get
(
)
)
T
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
void
destroy
(
)
{
this
-
>
get
(
)
.
~
T
(
)
;
}
private
:
typename
std
:
:
aligned_storage
<
sizeof
(
T
)
alignof
(
T
)
>
:
:
type
fStore
;
}
;
void
SkPDFWriteString
(
SkWStream
*
wStream
const
char
*
cin
size_t
len
)
;
class
SkPDFUnion
{
public
:
SkPDFUnion
(
SkPDFUnion
&
&
other
)
;
SkPDFUnion
&
operator
=
(
SkPDFUnion
&
&
other
)
;
~
SkPDFUnion
(
)
;
static
SkPDFUnion
Int
(
int32_t
)
;
static
SkPDFUnion
Int
(
size_t
v
)
{
return
SkPDFUnion
:
:
Int
(
SkToS32
(
v
)
)
;
}
static
SkPDFUnion
Bool
(
bool
)
;
static
SkPDFUnion
Scalar
(
SkScalar
)
;
static
SkPDFUnion
ColorComponent
(
uint8_t
)
;
static
SkPDFUnion
ColorComponentF
(
float
)
;
static
SkPDFUnion
Name
(
const
char
*
)
;
static
SkPDFUnion
String
(
const
char
*
)
;
static
SkPDFUnion
Name
(
SkString
)
;
static
SkPDFUnion
String
(
SkString
)
;
static
SkPDFUnion
Object
(
std
:
:
unique_ptr
<
SkPDFObject
>
)
;
static
SkPDFUnion
Ref
(
SkPDFIndirectReference
)
;
void
emitObject
(
SkWStream
*
)
const
;
bool
isName
(
)
const
;
private
:
union
{
int32_t
fIntValue
;
bool
fBoolValue
;
SkScalar
fScalarValue
;
const
char
*
fStaticString
;
SkStorageFor
<
SkString
>
fSkString
;
SkPDFObject
*
fObject
;
}
;
enum
class
Type
:
char
{
kDestroyed
=
0
kInt
kColorComponent
kColorComponentF
kBool
kScalar
kName
kString
kNameSkS
kStringSkS
kObject
kRef
}
;
Type
fType
;
SkPDFUnion
(
Type
)
;
SkPDFUnion
(
Type
int32_t
)
;
SkPDFUnion
(
Type
bool
)
;
SkPDFUnion
(
Type
SkScalar
)
;
SkPDFUnion
(
Type
SkString
)
;
SkPDFUnion
&
operator
=
(
const
SkPDFUnion
&
)
=
delete
;
SkPDFUnion
(
const
SkPDFUnion
&
)
=
delete
;
}
;
static_assert
(
sizeof
(
SkString
)
=
=
sizeof
(
void
*
)
"
SkString_size
"
)
;
#
endif
