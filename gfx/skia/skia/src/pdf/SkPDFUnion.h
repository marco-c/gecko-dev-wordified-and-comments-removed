#
ifndef
SkPDFUnion_DEFINED
#
define
SkPDFUnion_DEFINED
#
include
"
src
/
pdf
/
SkPDFTypes
.
h
"
class
SkPDFUnion
{
public
:
SkPDFUnion
(
SkPDFUnion
&
&
)
;
SkPDFUnion
&
operator
=
(
SkPDFUnion
&
&
)
;
~
SkPDFUnion
(
)
;
static
SkPDFUnion
Int
(
int32_t
)
;
static
SkPDFUnion
Int
(
size_t
v
)
{
return
SkPDFUnion
:
:
Int
(
SkToS32
(
v
)
)
;
}
static
SkPDFUnion
Bool
(
bool
)
;
static
SkPDFUnion
Scalar
(
SkScalar
)
;
static
SkPDFUnion
ColorComponent
(
uint8_t
)
;
static
SkPDFUnion
ColorComponentF
(
float
)
;
static
SkPDFUnion
Name
(
const
char
*
)
;
static
SkPDFUnion
ByteString
(
const
char
*
)
;
static
SkPDFUnion
TextString
(
const
char
*
)
;
static
SkPDFUnion
Name
(
SkString
)
;
static
SkPDFUnion
ByteString
(
SkString
)
;
static
SkPDFUnion
TextString
(
SkString
)
;
static
SkPDFUnion
Object
(
std
:
:
unique_ptr
<
SkPDFObject
>
)
;
static
SkPDFUnion
Ref
(
SkPDFIndirectReference
)
;
void
emitObject
(
SkWStream
*
)
const
;
bool
isName
(
)
const
;
private
:
using
PDFObject
=
std
:
:
unique_ptr
<
SkPDFObject
>
;
union
{
int32_t
fIntValue
;
bool
fBoolValue
;
SkScalar
fScalarValue
;
const
char
*
fStaticString
;
SkString
fSkString
;
PDFObject
fObject
;
}
;
enum
class
Type
:
char
{
kDestroyed
=
0
kInt
kColorComponent
kColorComponentF
kBool
kScalar
kName
kByteString
kTextString
kNameSkS
kByteStringSkS
kTextStringSkS
kObject
kRef
}
;
Type
fType
;
SkPDFUnion
(
Type
int32_t
)
;
SkPDFUnion
(
Type
bool
)
;
SkPDFUnion
(
Type
SkScalar
)
;
SkPDFUnion
(
Type
const
char
*
)
;
SkPDFUnion
(
Type
SkString
)
;
SkPDFUnion
(
Type
PDFObject
)
;
SkPDFUnion
&
operator
=
(
const
SkPDFUnion
&
)
=
delete
;
SkPDFUnion
(
const
SkPDFUnion
&
)
=
delete
;
}
;
static_assert
(
sizeof
(
SkString
)
=
=
sizeof
(
void
*
)
"
SkString_size
"
)
;
#
endif
