#
ifndef
SkPDFDevice_DEFINED
#
define
SkPDFDevice_DEFINED
#
include
"
SkBitmap
.
h
"
#
include
"
SkCanvas
.
h
"
#
include
"
SkClipStack
.
h
"
#
include
"
SkClipStackDevice
.
h
"
#
include
"
SkData
.
h
"
#
include
"
SkPaint
.
h
"
#
include
"
SkRect
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkStream
.
h
"
#
include
"
SkTextBlobPriv
.
h
"
#
include
"
SkKeyedImage
.
h
"
#
include
<
vector
>
class
SkGlyphRunList
;
class
SkKeyedImage
;
class
SkPath
;
class
SkPDFArray
;
class
SkPDFCanon
;
class
SkPDFDevice
;
class
SkPDFDocument
;
class
SkPDFDict
;
class
SkPDFFont
;
class
SkPDFObject
;
class
SkPDFStream
;
class
SkRRect
;
class
SkPDFDevice
final
:
public
SkClipStackDevice
{
public
:
SkPDFDevice
(
SkISize
pageSize
SkPDFDocument
*
document
const
SkMatrix
&
initialTransform
=
SkMatrix
:
:
I
(
)
)
;
sk_sp
<
SkPDFDevice
>
makeCongruentDevice
(
)
{
return
sk_make_sp
<
SkPDFDevice
>
(
this
-
>
size
(
)
fDocument
)
;
}
~
SkPDFDevice
(
)
override
;
void
drawPaint
(
const
SkPaint
&
paint
)
override
;
void
drawPoints
(
SkCanvas
:
:
PointMode
mode
size_t
count
const
SkPoint
[
]
const
SkPaint
&
paint
)
override
;
void
drawRect
(
const
SkRect
&
r
const
SkPaint
&
paint
)
override
;
void
drawOval
(
const
SkRect
&
oval
const
SkPaint
&
paint
)
override
;
void
drawRRect
(
const
SkRRect
&
rr
const
SkPaint
&
paint
)
override
;
void
drawPath
(
const
SkPath
&
origpath
const
SkPaint
&
paint
bool
pathIsMutable
)
override
;
void
drawBitmapRect
(
const
SkBitmap
&
bitmap
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
&
SkCanvas
:
:
SrcRectConstraint
)
override
;
void
drawBitmap
(
const
SkBitmap
&
bitmap
SkScalar
x
SkScalar
y
const
SkPaint
&
)
override
;
void
drawSprite
(
const
SkBitmap
&
bitmap
int
x
int
y
const
SkPaint
&
paint
)
override
;
void
drawImage
(
const
SkImage
*
SkScalar
x
SkScalar
y
const
SkPaint
&
)
override
;
void
drawImageRect
(
const
SkImage
*
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
&
SkCanvas
:
:
SrcRectConstraint
)
override
;
void
drawGlyphRunList
(
const
SkGlyphRunList
&
glyphRunList
)
override
;
void
drawVertices
(
const
SkVertices
*
const
SkVertices
:
:
Bone
bones
[
]
int
boneCount
SkBlendMode
const
SkPaint
&
)
override
;
void
drawDevice
(
SkBaseDevice
*
int
x
int
y
const
SkPaint
&
)
override
;
sk_sp
<
SkPDFDict
>
makeResourceDict
(
)
;
sk_sp
<
SkPDFArray
>
getAnnotations
(
)
;
void
appendDestinations
(
SkPDFDict
*
dict
SkPDFObject
*
page
)
const
;
std
:
:
unique_ptr
<
SkStreamAsset
>
content
(
)
;
SkPDFCanon
*
getCanon
(
)
const
;
SkISize
size
(
)
const
{
return
this
-
>
imageInfo
(
)
.
dimensions
(
)
;
}
SkIRect
bounds
(
)
const
{
return
this
-
>
imageInfo
(
)
.
bounds
(
)
;
}
struct
GraphicStateEntry
{
SkMatrix
fMatrix
=
SkMatrix
:
:
I
(
)
;
uint32_t
fClipStackGenID
=
SkClipStack
:
:
kWideOpenGenID
;
SkColor4f
fColor
=
{
0
0
0
1
}
;
SkScalar
fTextScaleX
=
1
;
SkPaint
:
:
Style
fTextFill
=
SkPaint
:
:
kFill_Style
;
int
fShaderIndex
=
-
1
;
int
fGraphicStateIndex
=
-
1
;
}
;
void
DrawGlyphRunAsPath
(
SkPDFDevice
*
dev
const
SkGlyphRun
&
glyphRun
SkPoint
offset
)
;
protected
:
sk_sp
<
SkSurface
>
makeSurface
(
const
SkImageInfo
&
const
SkSurfaceProps
&
)
override
;
void
drawAnnotation
(
const
SkRect
&
const
char
key
[
]
SkData
*
value
)
override
;
void
drawSpecial
(
SkSpecialImage
*
int
x
int
y
const
SkPaint
&
SkImage
*
const
SkMatrix
&
)
override
;
sk_sp
<
SkSpecialImage
>
makeSpecial
(
const
SkBitmap
&
)
override
;
sk_sp
<
SkSpecialImage
>
makeSpecial
(
const
SkImage
*
)
override
;
sk_sp
<
SkSpecialImage
>
snapSpecial
(
)
override
;
SkImageFilterCache
*
getImageFilterCache
(
)
override
;
private
:
struct
RectWithData
{
SkRect
rect
;
sk_sp
<
SkData
>
data
;
}
;
struct
NamedDestination
{
sk_sp
<
SkData
>
nameData
;
SkPoint
point
;
}
;
friend
class
ScopedContentEntry
;
SkMatrix
fInitialTransform
;
std
:
:
vector
<
RectWithData
>
fLinkToURLs
;
std
:
:
vector
<
RectWithData
>
fLinkToDestinations
;
std
:
:
vector
<
NamedDestination
>
fNamedDestinations
;
std
:
:
vector
<
sk_sp
<
SkPDFObject
>
>
fGraphicStateResources
;
std
:
:
vector
<
sk_sp
<
SkPDFObject
>
>
fXObjectResources
;
std
:
:
vector
<
sk_sp
<
SkPDFObject
>
>
fShaderResources
;
std
:
:
vector
<
sk_sp
<
SkPDFFont
>
>
fFontResources
;
int
fNodeId
;
SkDynamicMemoryWStream
fContent
;
SkDynamicMemoryWStream
fContentBuffer
;
bool
fNeedsExtraSave
=
false
;
struct
GraphicStackState
{
GraphicStackState
(
SkDynamicMemoryWStream
*
s
=
nullptr
)
;
void
updateClip
(
const
SkClipStack
*
clipStack
const
SkIRect
&
bounds
)
;
void
updateMatrix
(
const
SkMatrix
&
matrix
)
;
void
updateDrawingState
(
const
SkPDFDevice
:
:
GraphicStateEntry
&
state
)
;
void
push
(
)
;
void
pop
(
)
;
void
drainStack
(
)
;
SkPDFDevice
:
:
GraphicStateEntry
*
currentEntry
(
)
{
return
&
fEntries
[
fStackDepth
]
;
}
static
constexpr
int
kMaxStackDepth
=
2
;
SkPDFDevice
:
:
GraphicStateEntry
fEntries
[
kMaxStackDepth
+
1
]
;
int
fStackDepth
=
0
;
SkDynamicMemoryWStream
*
fContentStream
;
}
;
GraphicStackState
fActiveStackState
;
SkPDFDocument
*
fDocument
;
SkBaseDevice
*
onCreateDevice
(
const
CreateInfo
&
const
SkPaint
*
)
override
;
sk_sp
<
SkPDFObject
>
makeFormXObjectFromDevice
(
bool
alpha
=
false
)
;
void
drawFormXObjectWithMask
(
sk_sp
<
SkPDFObject
>
xObject
sk_sp
<
SkPDFObject
>
mask
SkBlendMode
bool
invertClip
)
;
SkDynamicMemoryWStream
*
setUpContentEntry
(
const
SkClipStack
*
clipStack
const
SkMatrix
&
matrix
const
SkPaint
&
paint
bool
hasText
sk_sp
<
SkPDFObject
>
*
dst
)
;
void
finishContentEntry
(
const
SkClipStack
*
SkBlendMode
sk_sp
<
SkPDFObject
>
dst
SkPath
*
shape
)
;
bool
isContentEmpty
(
)
;
void
populateGraphicStateEntryFromPaint
(
const
SkMatrix
&
matrix
const
SkClipStack
*
clipStack
const
SkPaint
&
paint
bool
hasText
GraphicStateEntry
*
entry
)
;
void
internalDrawGlyphRun
(
const
SkGlyphRun
&
glyphRun
SkPoint
offset
)
;
void
drawGlyphRunAsPath
(
const
SkGlyphRun
&
glyphRun
SkPoint
offset
)
;
void
internalDrawImageRect
(
SkKeyedImage
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
&
const
SkMatrix
&
canvasTransformationMatrix
)
;
void
internalDrawPath
(
const
SkClipStack
&
const
SkMatrix
&
const
SkPath
&
const
SkPaint
&
bool
pathIsMutable
)
;
void
internalDrawPathWithFilter
(
const
SkClipStack
&
clipStack
const
SkMatrix
&
ctm
const
SkPath
&
origPath
const
SkPaint
&
paint
)
;
bool
handleInversePath
(
const
SkPath
&
origPath
const
SkPaint
&
paint
bool
pathIsMutable
)
;
void
addSMaskGraphicState
(
sk_sp
<
SkPDFDevice
>
maskDevice
SkDynamicMemoryWStream
*
)
;
void
clearMaskOnGraphicState
(
SkDynamicMemoryWStream
*
)
;
void
setGraphicState
(
sk_sp
<
SkPDFObject
>
SkDynamicMemoryWStream
*
)
;
void
drawFormXObject
(
sk_sp
<
SkPDFObject
>
SkDynamicMemoryWStream
*
)
;
bool
hasEmptyClip
(
)
const
{
return
this
-
>
cs
(
)
.
isEmpty
(
this
-
>
bounds
(
)
)
;
}
void
reset
(
)
;
typedef
SkClipStackDevice
INHERITED
;
}
;
#
endif
