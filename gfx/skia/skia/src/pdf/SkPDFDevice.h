#
ifndef
SkPDFDevice_DEFINED
#
define
SkPDFDevice_DEFINED
#
include
"
SkBitmap
.
h
"
#
include
"
SkCanvas
.
h
"
#
include
"
SkClipStack
.
h
"
#
include
"
SkDevice
.
h
"
#
include
"
SkPaint
.
h
"
#
include
"
SkPath
.
h
"
#
include
"
SkPicture
.
h
"
#
include
"
SkRect
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkStream
.
h
"
#
include
"
SkTDArray
.
h
"
#
include
"
SkTemplates
.
h
"
class
SkPDFArray
;
class
SkPDFCanon
;
class
SkPDFDevice
;
class
SkPDFDict
;
class
SkPDFFont
;
class
SkPDFFormXObject
;
class
SkPDFGlyphSetMap
;
class
SkPDFGraphicState
;
class
SkPDFObject
;
class
SkPDFShader
;
class
SkPDFStream
;
class
SkRRect
;
struct
ContentEntry
;
struct
GraphicStateEntry
;
struct
NamedDestination
;
struct
RectWithData
;
class
SkPDFDevice
final
:
public
SkBaseDevice
{
public
:
static
SkPDFDevice
*
Create
(
SkISize
pageSize
SkScalar
rasterDpi
SkPDFCanon
*
canon
)
{
return
new
SkPDFDevice
(
pageSize
rasterDpi
canon
true
)
;
}
static
SkPDFDevice
*
CreateUnflipped
(
SkISize
pageSize
SkScalar
rasterDpi
SkPDFCanon
*
canon
)
{
return
new
SkPDFDevice
(
pageSize
rasterDpi
canon
false
)
;
}
virtual
~
SkPDFDevice
(
)
;
void
drawPaint
(
const
SkDraw
&
const
SkPaint
&
paint
)
override
;
void
drawPoints
(
const
SkDraw
&
SkCanvas
:
:
PointMode
mode
size_t
count
const
SkPoint
[
]
const
SkPaint
&
paint
)
override
;
void
drawRect
(
const
SkDraw
&
const
SkRect
&
r
const
SkPaint
&
paint
)
override
;
void
drawOval
(
const
SkDraw
&
const
SkRect
&
oval
const
SkPaint
&
paint
)
override
;
void
drawRRect
(
const
SkDraw
&
const
SkRRect
&
rr
const
SkPaint
&
paint
)
override
;
void
drawPath
(
const
SkDraw
&
const
SkPath
&
origpath
const
SkPaint
&
paint
const
SkMatrix
*
prePathMatrix
bool
pathIsMutable
)
override
;
void
drawBitmapRect
(
const
SkDraw
&
draw
const
SkBitmap
&
bitmap
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
&
SkCanvas
:
:
SrcRectConstraint
)
override
;
void
drawBitmap
(
const
SkDraw
&
const
SkBitmap
&
bitmap
const
SkMatrix
&
matrix
const
SkPaint
&
)
override
;
void
drawSprite
(
const
SkDraw
&
const
SkBitmap
&
bitmap
int
x
int
y
const
SkPaint
&
paint
)
override
;
void
drawImage
(
const
SkDraw
&
const
SkImage
*
SkScalar
x
SkScalar
y
const
SkPaint
&
)
override
;
void
drawImageRect
(
const
SkDraw
&
const
SkImage
*
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
&
SkCanvas
:
:
SrcRectConstraint
)
override
;
void
drawText
(
const
SkDraw
&
const
void
*
text
size_t
len
SkScalar
x
SkScalar
y
const
SkPaint
&
)
override
;
void
drawPosText
(
const
SkDraw
&
const
void
*
text
size_t
len
const
SkScalar
pos
[
]
int
scalarsPerPos
const
SkPoint
&
offset
const
SkPaint
&
)
override
;
void
drawVertices
(
const
SkDraw
&
SkCanvas
:
:
VertexMode
int
vertexCount
const
SkPoint
verts
[
]
const
SkPoint
texs
[
]
const
SkColor
colors
[
]
SkXfermode
*
xmode
const
uint16_t
indices
[
]
int
indexCount
const
SkPaint
&
paint
)
override
;
void
drawDevice
(
const
SkDraw
&
SkBaseDevice
*
int
x
int
y
const
SkPaint
&
)
override
;
void
onAttachToCanvas
(
SkCanvas
*
canvas
)
override
;
void
onDetachFromCanvas
(
)
override
;
SkImageInfo
imageInfo
(
)
const
override
;
enum
DrawingArea
{
kContent_DrawingArea
kMargin_DrawingArea
}
;
void
setDrawingArea
(
DrawingArea
drawingArea
)
;
SkPDFDict
*
createResourceDict
(
)
const
;
const
SkTDArray
<
SkPDFFont
*
>
&
getFontResources
(
)
const
;
void
appendAnnotations
(
SkPDFArray
*
array
)
const
;
void
appendDestinations
(
SkPDFDict
*
dict
SkPDFObject
*
page
)
const
;
SkPDFArray
*
copyMediaBox
(
)
const
;
SkStreamAsset
*
content
(
)
const
;
void
writeContent
(
SkWStream
*
)
const
;
const
SkMatrix
&
initialTransform
(
)
const
{
return
fInitialTransform
;
}
const
SkPDFGlyphSetMap
&
getFontGlyphUsage
(
)
const
{
return
*
(
fFontGlyphUsage
.
get
(
)
)
;
}
SkPDFCanon
*
getCanon
(
)
const
{
return
fCanon
;
}
protected
:
const
SkBitmap
&
onAccessBitmap
(
)
override
{
return
fLegacyBitmap
;
}
SkSurface
*
newSurface
(
const
SkImageInfo
&
const
SkSurfaceProps
&
)
override
;
private
:
friend
class
ScopedContentEntry
;
SkISize
fPageSize
;
SkISize
fContentSize
;
SkMatrix
fInitialTransform
;
SkClipStack
fExistingClipStack
;
SkRegion
fExistingClipRegion
;
SkTDArray
<
RectWithData
*
>
fLinkToURLs
;
SkTDArray
<
RectWithData
*
>
fLinkToDestinations
;
SkTDArray
<
NamedDestination
*
>
fNamedDestinations
;
SkTDArray
<
SkPDFObject
*
>
fGraphicStateResources
;
SkTDArray
<
SkPDFObject
*
>
fXObjectResources
;
SkTDArray
<
SkPDFFont
*
>
fFontResources
;
SkTDArray
<
SkPDFObject
*
>
fShaderResources
;
SkAutoTDelete
<
ContentEntry
>
fContentEntries
;
ContentEntry
*
fLastContentEntry
;
SkAutoTDelete
<
ContentEntry
>
fMarginContentEntries
;
ContentEntry
*
fLastMarginContentEntry
;
DrawingArea
fDrawingArea
;
const
SkClipStack
*
fClipStack
;
SkAutoTDelete
<
ContentEntry
>
*
getContentEntries
(
)
;
SkAutoTDelete
<
SkPDFGlyphSetMap
>
fFontGlyphUsage
;
SkScalar
fRasterDpi
;
SkBitmap
fLegacyBitmap
;
SkPDFCanon
*
fCanon
;
SkPDFDevice
(
SkISize
pageSize
SkScalar
rasterDpi
SkPDFCanon
*
canon
bool
flip
)
;
ContentEntry
*
getLastContentEntry
(
)
;
void
setLastContentEntry
(
ContentEntry
*
contentEntry
)
;
SkBaseDevice
*
onCreateDevice
(
const
CreateInfo
&
const
SkPaint
*
)
override
;
void
init
(
)
;
void
cleanUp
(
bool
clearFontUsage
)
;
SkPDFFormXObject
*
createFormXObjectFromDevice
(
)
;
void
drawFormXObjectWithMask
(
int
xObjectIndex
SkPDFFormXObject
*
mask
const
SkClipStack
*
clipStack
const
SkRegion
&
clipRegion
SkXfermode
:
:
Mode
mode
bool
invertClip
)
;
ContentEntry
*
setUpContentEntry
(
const
SkClipStack
*
clipStack
const
SkRegion
&
clipRegion
const
SkMatrix
&
matrix
const
SkPaint
&
paint
bool
hasText
SkPDFFormXObject
*
*
dst
)
;
void
finishContentEntry
(
SkXfermode
:
:
Mode
xfermode
SkPDFFormXObject
*
dst
SkPath
*
shape
)
;
bool
isContentEmpty
(
)
;
void
populateGraphicStateEntryFromPaint
(
const
SkMatrix
&
matrix
const
SkClipStack
&
clipStack
const
SkRegion
&
clipRegion
const
SkPaint
&
paint
bool
hasText
GraphicStateEntry
*
entry
)
;
int
addGraphicStateResource
(
SkPDFObject
*
gs
)
;
int
addXObjectResource
(
SkPDFObject
*
xObject
)
;
void
updateFont
(
const
SkPaint
&
paint
uint16_t
glyphID
ContentEntry
*
contentEntry
)
;
int
getFontResourceIndex
(
SkTypeface
*
typeface
uint16_t
glyphID
)
;
void
internalDrawPaint
(
const
SkPaint
&
paint
ContentEntry
*
contentEntry
)
;
void
internalDrawImage
(
const
SkMatrix
&
matrix
const
SkClipStack
*
clipStack
const
SkRegion
&
clipRegion
const
SkImage
*
image
const
SkIRect
*
srcRect
const
SkPaint
&
paint
)
;
void
copyContentEntriesToData
(
ContentEntry
*
entry
SkWStream
*
data
)
const
;
bool
handleInversePath
(
const
SkDraw
&
d
const
SkPath
&
origPath
const
SkPaint
&
paint
bool
pathIsMutable
const
SkMatrix
*
prePathMatrix
=
nullptr
)
;
bool
handlePointAnnotation
(
const
SkPoint
*
points
size_t
count
const
SkMatrix
&
matrix
SkAnnotation
*
annot
)
;
bool
handlePathAnnotation
(
const
SkPath
&
path
const
SkDraw
&
d
SkAnnotation
*
annot
)
;
typedef
SkBaseDevice
INHERITED
;
}
;
#
endif
