#
ifndef
SkPDFShader_DEFINED
#
define
SkPDFShader_DEFINED
#
include
"
SkBitmapKey
.
h
"
#
include
"
SkPDFTypes
.
h
"
#
include
"
SkShader
.
h
"
class
SkPDFCanon
;
class
SkPDFDocument
;
class
SkMatrix
;
struct
SkIRect
;
class
SkPDFShader
{
public
:
static
sk_sp
<
SkPDFObject
>
GetPDFShader
(
SkPDFDocument
*
doc
SkScalar
dpi
SkShader
*
shader
const
SkMatrix
&
matrix
const
SkIRect
&
surfaceBBox
SkScalar
rasterScale
)
;
static
sk_sp
<
SkPDFArray
>
MakeRangeObject
(
)
;
class
State
{
public
:
SkShader
:
:
GradientType
fType
;
SkShader
:
:
GradientInfo
fInfo
;
std
:
:
unique_ptr
<
SkColor
[
]
>
fColors
;
std
:
:
unique_ptr
<
SkScalar
[
]
>
fStops
;
SkMatrix
fCanvasTransform
;
SkMatrix
fShaderTransform
;
SkIRect
fBBox
;
SkBitmapKey
fBitmapKey
;
SkShader
:
:
TileMode
fImageTileModes
[
2
]
;
State
(
SkShader
*
shader
const
SkMatrix
&
canvasTransform
const
SkIRect
&
bbox
SkScalar
rasterScale
SkBitmap
*
dstImage
)
;
bool
operator
=
=
(
const
State
&
b
)
const
;
State
MakeAlphaToLuminosityState
(
)
const
;
State
MakeOpaqueState
(
)
const
;
bool
GradientHasAlpha
(
)
const
;
State
(
State
&
&
)
=
default
;
State
&
operator
=
(
State
&
&
)
=
default
;
private
:
State
(
const
State
&
other
)
;
State
&
operator
=
(
const
State
&
rhs
)
;
void
allocateGradientInfoStorage
(
)
;
}
;
}
;
#
endif
