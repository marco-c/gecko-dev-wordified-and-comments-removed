#
ifndef
SkPDFDocument_DEFINED
#
define
SkPDFDocument_DEFINED
#
include
"
SkDocument
.
h
"
#
include
"
SkPDFCanon
.
h
"
#
include
"
SkPDFMetadata
.
h
"
#
include
"
SkPDFFont
.
h
"
class
SkPDFDevice
;
sk_sp
<
SkDocument
>
SkPDFMakeDocument
(
SkWStream
*
stream
void
(
*
doneProc
)
(
SkWStream
*
bool
)
SkScalar
rasterDpi
SkPixelSerializer
*
jpegEncoder
)
;
struct
SkPDFObjectSerializer
:
SkNoncopyable
{
SkPDFObjNumMap
fObjNumMap
;
SkPDFSubstituteMap
fSubstituteMap
;
SkTDArray
<
int32_t
>
fOffsets
;
sk_sp
<
SkPDFObject
>
fInfoDict
;
size_t
fBaseOffset
;
int32_t
fNextToBeSerialized
;
SkPDFObjectSerializer
(
)
;
~
SkPDFObjectSerializer
(
)
;
void
addObjectRecursively
(
const
sk_sp
<
SkPDFObject
>
&
)
;
void
serializeHeader
(
SkWStream
*
const
SkPDFMetadata
&
)
;
void
serializeObjects
(
SkWStream
*
)
;
void
serializeFooter
(
SkWStream
*
const
sk_sp
<
SkPDFObject
>
sk_sp
<
SkPDFObject
>
)
;
int32_t
offset
(
SkWStream
*
)
;
}
;
class
SkPDFDocument
:
public
SkDocument
{
public
:
SkPDFDocument
(
SkWStream
*
void
(
*
)
(
SkWStream
*
bool
)
SkScalar
SkPixelSerializer
*
)
;
virtual
~
SkPDFDocument
(
)
;
SkCanvas
*
onBeginPage
(
SkScalar
SkScalar
const
SkRect
&
)
override
;
void
onEndPage
(
)
override
;
bool
onClose
(
SkWStream
*
)
override
;
void
onAbort
(
)
override
;
void
setMetadata
(
const
SkDocument
:
:
Attribute
[
]
int
const
SkTime
:
:
DateTime
*
const
SkTime
:
:
DateTime
*
)
override
;
void
serialize
(
const
sk_sp
<
SkPDFObject
>
&
)
;
SkPDFCanon
*
canon
(
)
{
return
&
fCanon
;
}
private
:
SkPDFObjectSerializer
fObjectSerializer
;
SkPDFCanon
fCanon
;
SkPDFGlyphSetMap
fGlyphUsage
;
SkTArray
<
sk_sp
<
SkPDFDict
>
>
fPages
;
sk_sp
<
SkPDFDict
>
fDests
;
sk_sp
<
SkPDFDevice
>
fPageDevice
;
sk_sp
<
SkCanvas
>
fCanvas
;
#
ifdef
SK_PDF_GENERATE_PDFA
sk_sp
<
SkPDFObject
>
fID
;
sk_sp
<
SkPDFObject
>
fXMP
;
#
endif
SkScalar
fRasterDpi
;
SkPDFMetadata
fMetadata
;
}
;
#
endif
