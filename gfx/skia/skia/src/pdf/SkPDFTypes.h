#
ifndef
SkPDFTypes_DEFINED
#
define
SkPDFTypes_DEFINED
#
include
"
SkRefCnt
.
h
"
#
include
"
SkScalar
.
h
"
#
include
"
SkTHash
.
h
"
#
include
"
SkTypes
.
h
"
class
SkData
;
class
SkPDFObjNumMap
;
class
SkPDFObject
;
class
SkStreamAsset
;
class
SkString
;
class
SkWStream
;
#
ifdef
SK_PDF_IMAGE_STATS
#
include
"
SkAtomics
.
h
"
#
endif
class
SkPDFObject
:
public
SkRefCnt
{
public
:
virtual
void
emitObject
(
SkWStream
*
stream
const
SkPDFObjNumMap
&
objNumMap
)
const
=
0
;
virtual
void
addResources
(
SkPDFObjNumMap
*
catalog
)
const
{
}
virtual
void
drop
(
)
{
}
virtual
~
SkPDFObject
(
)
{
}
private
:
typedef
SkRefCnt
INHERITED
;
}
;
class
SkPDFUnion
{
public
:
SkPDFUnion
(
SkPDFUnion
&
&
other
)
;
SkPDFUnion
&
operator
=
(
SkPDFUnion
&
&
other
)
;
~
SkPDFUnion
(
)
;
static
SkPDFUnion
Int
(
int32_t
)
;
static
SkPDFUnion
Int
(
size_t
v
)
{
return
SkPDFUnion
:
:
Int
(
SkToS32
(
v
)
)
;
}
static
SkPDFUnion
Bool
(
bool
)
;
static
SkPDFUnion
Scalar
(
SkScalar
)
;
static
SkPDFUnion
ColorComponent
(
uint8_t
)
;
static
SkPDFUnion
Name
(
const
char
*
)
;
static
SkPDFUnion
String
(
const
char
*
)
;
static
SkPDFUnion
Name
(
const
SkString
&
)
;
static
SkPDFUnion
String
(
const
SkString
&
)
;
static
SkPDFUnion
Object
(
sk_sp
<
SkPDFObject
>
)
;
static
SkPDFUnion
ObjRef
(
sk_sp
<
SkPDFObject
>
)
;
void
emitObject
(
SkWStream
*
const
SkPDFObjNumMap
&
)
const
;
void
addResources
(
SkPDFObjNumMap
*
)
const
;
bool
isName
(
)
const
;
private
:
union
{
int32_t
fIntValue
;
bool
fBoolValue
;
SkScalar
fScalarValue
;
const
char
*
fStaticString
;
char
fSkString
[
sizeof
(
SkString
)
]
;
SkPDFObject
*
fObject
;
}
;
enum
class
Type
:
char
{
kDestroyed
=
0
kInt
kColorComponent
kBool
kScalar
kName
kString
kNameSkS
kStringSkS
kObjRef
kObject
}
;
Type
fType
;
SkPDFUnion
(
Type
)
;
SkPDFUnion
&
operator
=
(
const
SkPDFUnion
&
)
=
delete
;
SkPDFUnion
(
const
SkPDFUnion
&
)
=
delete
;
}
;
static_assert
(
sizeof
(
SkString
)
=
=
sizeof
(
void
*
)
"
SkString_size
"
)
;
#
if
0
class
SkPDFAtom
final
:
public
SkPDFObject
{
public
:
void
emitObject
(
SkWStream
*
stream
const
SkPDFObjNumMap
&
objNumMap
)
final
override
;
void
addResources
(
SkPDFObjNumMap
*
const
final
;
SkPDFAtom
(
SkPDFUnion
&
&
v
)
:
fValue
(
std
:
:
move
(
v
)
{
}
private
:
const
SkPDFUnion
fValue
;
typedef
SkPDFObject
INHERITED
;
}
;
#
endif
class
SkPDFArray
final
:
public
SkPDFObject
{
public
:
SkPDFArray
(
)
;
~
SkPDFArray
(
)
override
;
void
emitObject
(
SkWStream
*
stream
const
SkPDFObjNumMap
&
objNumMap
)
const
override
;
void
addResources
(
SkPDFObjNumMap
*
)
const
override
;
void
drop
(
)
override
;
int
size
(
)
const
;
void
reserve
(
int
length
)
;
void
appendInt
(
int32_t
)
;
void
appendColorComponent
(
uint8_t
)
;
void
appendBool
(
bool
)
;
void
appendScalar
(
SkScalar
)
;
void
appendName
(
const
char
[
]
)
;
void
appendName
(
const
SkString
&
)
;
void
appendString
(
const
char
[
]
)
;
void
appendString
(
const
SkString
&
)
;
void
appendObject
(
sk_sp
<
SkPDFObject
>
)
;
void
appendObjRef
(
sk_sp
<
SkPDFObject
>
)
;
private
:
SkTArray
<
SkPDFUnion
>
fValues
;
void
append
(
SkPDFUnion
&
&
value
)
;
SkDEBUGCODE
(
bool
fDumped
;
)
}
;
class
SkPDFDict
:
public
SkPDFObject
{
public
:
explicit
SkPDFDict
(
const
char
type
[
]
=
nullptr
)
;
~
SkPDFDict
(
)
override
;
void
emitObject
(
SkWStream
*
stream
const
SkPDFObjNumMap
&
objNumMap
)
const
override
;
void
addResources
(
SkPDFObjNumMap
*
)
const
override
;
void
drop
(
)
override
;
int
size
(
)
const
;
void
insertObject
(
const
char
key
[
]
sk_sp
<
SkPDFObject
>
)
;
void
insertObject
(
const
SkString
&
key
sk_sp
<
SkPDFObject
>
)
;
void
insertObjRef
(
const
char
key
[
]
sk_sp
<
SkPDFObject
>
)
;
void
insertObjRef
(
const
SkString
&
key
sk_sp
<
SkPDFObject
>
)
;
void
insertBool
(
const
char
key
[
]
bool
value
)
;
void
insertInt
(
const
char
key
[
]
int32_t
value
)
;
void
insertInt
(
const
char
key
[
]
size_t
value
)
;
void
insertScalar
(
const
char
key
[
]
SkScalar
value
)
;
void
insertName
(
const
char
key
[
]
const
char
nameValue
[
]
)
;
void
insertName
(
const
char
key
[
]
const
SkString
&
nameValue
)
;
void
insertString
(
const
char
key
[
]
const
char
value
[
]
)
;
void
insertString
(
const
char
key
[
]
const
SkString
&
value
)
;
void
emitAll
(
SkWStream
*
stream
const
SkPDFObjNumMap
&
objNumMap
)
const
;
private
:
struct
Record
{
SkPDFUnion
fKey
;
SkPDFUnion
fValue
;
Record
(
SkPDFUnion
&
&
SkPDFUnion
&
&
)
;
Record
(
Record
&
&
)
=
default
;
Record
&
operator
=
(
Record
&
&
)
=
default
;
Record
(
const
Record
&
)
=
delete
;
Record
&
operator
=
(
const
Record
&
)
=
delete
;
}
;
SkTArray
<
Record
>
fRecords
;
SkDEBUGCODE
(
bool
fDumped
;
)
}
;
class
SkPDFSharedStream
final
:
public
SkPDFObject
{
public
:
SkPDFSharedStream
(
std
:
:
unique_ptr
<
SkStreamAsset
>
data
)
;
~
SkPDFSharedStream
(
)
override
;
SkPDFDict
*
dict
(
)
{
return
&
fDict
;
}
void
emitObject
(
SkWStream
*
const
SkPDFObjNumMap
&
)
const
override
;
void
addResources
(
SkPDFObjNumMap
*
)
const
override
;
void
drop
(
)
override
;
private
:
std
:
:
unique_ptr
<
SkStreamAsset
>
fAsset
;
SkPDFDict
fDict
;
typedef
SkPDFObject
INHERITED
;
}
;
class
SkPDFStream
final
:
public
SkPDFObject
{
public
:
explicit
SkPDFStream
(
sk_sp
<
SkData
>
data
)
;
explicit
SkPDFStream
(
std
:
:
unique_ptr
<
SkStreamAsset
>
stream
)
;
~
SkPDFStream
(
)
override
;
SkPDFDict
*
dict
(
)
{
return
&
fDict
;
}
void
emitObject
(
SkWStream
*
stream
const
SkPDFObjNumMap
&
objNumMap
)
const
override
;
void
addResources
(
SkPDFObjNumMap
*
)
const
final
override
;
void
drop
(
)
override
;
protected
:
SkPDFStream
(
)
;
void
setData
(
std
:
:
unique_ptr
<
SkStreamAsset
>
stream
)
;
private
:
std
:
:
unique_ptr
<
SkStreamAsset
>
fCompressedData
;
SkPDFDict
fDict
;
typedef
SkPDFDict
INHERITED
;
}
;
class
SkPDFObjNumMap
:
SkNoncopyable
{
public
:
bool
addObject
(
SkPDFObject
*
obj
)
;
void
addObjectRecursively
(
SkPDFObject
*
obj
)
;
int32_t
getObjectNumber
(
SkPDFObject
*
obj
)
const
;
const
SkTArray
<
sk_sp
<
SkPDFObject
>
>
&
objects
(
)
const
{
return
fObjects
;
}
private
:
SkTArray
<
sk_sp
<
SkPDFObject
>
>
fObjects
;
SkTHashMap
<
SkPDFObject
*
int32_t
>
fObjectNumbers
;
}
;
#
ifdef
SK_PDF_IMAGE_STATS
extern
SkAtomic
<
int
>
gDrawImageCalls
;
extern
SkAtomic
<
int
>
gJpegImageObjects
;
extern
SkAtomic
<
int
>
gRegularImageObjects
;
extern
void
SkPDFImageDumpStats
(
)
;
#
endif
#
endif
