#
ifndef
SkPDFGraphicState_DEFINED
#
define
SkPDFGraphicState_DEFINED
#
include
"
include
/
core
/
SkScalar
.
h
"
#
include
"
include
/
private
/
base
/
SkMacros
.
h
"
#
include
"
src
/
core
/
SkChecksum
.
h
"
#
include
"
src
/
pdf
/
SkPDFTypes
.
h
"
#
include
<
cstdint
>
#
include
<
cstring
>
class
SkPDFDocument
;
class
SkPaint
;
namespace
SkPDFGraphicState
{
enum
SkPDFSMaskMode
{
kAlpha_SMaskMode
kLuminosity_SMaskMode
}
;
SkPDFIndirectReference
GetGraphicStateForPaint
(
SkPDFDocument
*
const
SkPaint
&
)
;
SkPDFIndirectReference
GetSMaskGraphicState
(
SkPDFIndirectReference
sMask
bool
invert
SkPDFSMaskMode
sMaskMode
SkPDFDocument
*
doc
)
;
}
SK_BEGIN_REQUIRE_DENSE
struct
SkPDFStrokeGraphicState
{
SkScalar
fStrokeWidth
;
SkScalar
fStrokeMiter
;
SkScalar
fAlpha
;
uint8_t
fStrokeCap
;
uint8_t
fStrokeJoin
;
uint8_t
fBlendMode
;
uint8_t
fPADDING
=
0
;
bool
operator
=
=
(
const
SkPDFStrokeGraphicState
&
o
)
const
{
return
!
memcmp
(
this
&
o
sizeof
(
o
)
)
;
}
bool
operator
!
=
(
const
SkPDFStrokeGraphicState
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
using
Hash
=
SkForceDirectHash
<
SkPDFStrokeGraphicState
>
;
}
;
SK_END_REQUIRE_DENSE
SK_BEGIN_REQUIRE_DENSE
struct
SkPDFFillGraphicState
{
SkScalar
fAlpha
;
uint8_t
fBlendMode
;
uint8_t
fPADDING
[
3
]
=
{
0
0
0
}
;
bool
operator
=
=
(
const
SkPDFFillGraphicState
&
o
)
const
{
return
!
memcmp
(
this
&
o
sizeof
(
o
)
)
;
}
bool
operator
!
=
(
const
SkPDFFillGraphicState
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
using
Hash
=
SkForceDirectHash
<
SkPDFFillGraphicState
>
;
}
;
SK_END_REQUIRE_DENSE
#
endif
