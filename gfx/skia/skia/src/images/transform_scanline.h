#
include
"
SkBitmap
.
h
"
#
include
"
SkColor
.
h
"
#
include
"
SkColorPriv
.
h
"
#
include
"
SkPreConfig
.
h
"
#
include
"
SkUnPreMultiply
.
h
"
typedef
void
(
*
transform_scanline_proc
)
(
char
*
SK_RESTRICT
dst
const
char
*
SK_RESTRICT
src
int
width
int
bpp
)
;
static
void
transform_scanline_memcpy
(
char
*
SK_RESTRICT
dst
const
char
*
SK_RESTRICT
src
int
width
int
bpp
)
{
memcpy
(
dst
src
width
*
bpp
)
;
}
static
void
transform_scanline_565
(
char
*
SK_RESTRICT
dst
const
char
*
SK_RESTRICT
src
int
width
int
)
{
const
uint16_t
*
srcP
=
(
const
uint16_t
*
)
src
;
for
(
int
i
=
0
;
i
<
width
;
i
+
+
)
{
unsigned
c
=
*
srcP
+
+
;
*
dst
+
+
=
SkPacked16ToR32
(
c
)
;
*
dst
+
+
=
SkPacked16ToG32
(
c
)
;
*
dst
+
+
=
SkPacked16ToB32
(
c
)
;
}
}
static
void
transform_scanline_RGBX
(
char
*
SK_RESTRICT
dst
const
char
*
SK_RESTRICT
src
int
width
int
)
{
const
uint32_t
*
srcP
=
(
const
SkPMColor
*
)
src
;
for
(
int
i
=
0
;
i
<
width
;
i
+
+
)
{
uint32_t
c
=
*
srcP
+
+
;
*
dst
+
+
=
(
c
>
>
0
)
&
0xFF
;
*
dst
+
+
=
(
c
>
>
8
)
&
0xFF
;
*
dst
+
+
=
(
c
>
>
16
)
&
0xFF
;
}
}
static
void
transform_scanline_BGRX
(
char
*
SK_RESTRICT
dst
const
char
*
SK_RESTRICT
src
int
width
int
)
{
const
uint32_t
*
srcP
=
(
const
SkPMColor
*
)
src
;
for
(
int
i
=
0
;
i
<
width
;
i
+
+
)
{
uint32_t
c
=
*
srcP
+
+
;
*
dst
+
+
=
(
c
>
>
16
)
&
0xFF
;
*
dst
+
+
=
(
c
>
>
8
)
&
0xFF
;
*
dst
+
+
=
(
c
>
>
0
)
&
0xFF
;
}
}
static
void
transform_scanline_444
(
char
*
SK_RESTRICT
dst
const
char
*
SK_RESTRICT
src
int
width
int
)
{
const
SkPMColor16
*
srcP
=
(
const
SkPMColor16
*
)
src
;
for
(
int
i
=
0
;
i
<
width
;
i
+
+
)
{
SkPMColor16
c
=
*
srcP
+
+
;
*
dst
+
+
=
SkPacked4444ToR32
(
c
)
;
*
dst
+
+
=
SkPacked4444ToG32
(
c
)
;
*
dst
+
+
=
SkPacked4444ToB32
(
c
)
;
}
}
template
<
bool
kIsRGBA
>
static
inline
void
transform_scanline_unpremultiply
(
char
*
SK_RESTRICT
dst
const
char
*
SK_RESTRICT
src
int
width
int
)
{
const
uint32_t
*
srcP
=
(
const
SkPMColor
*
)
src
;
const
SkUnPreMultiply
:
:
Scale
*
table
=
SkUnPreMultiply
:
:
GetScaleTable
(
)
;
for
(
int
i
=
0
;
i
<
width
;
i
+
+
)
{
uint32_t
c
=
*
srcP
+
+
;
unsigned
r
g
b
a
;
if
(
kIsRGBA
)
{
r
=
(
c
>
>
0
)
&
0xFF
;
g
=
(
c
>
>
8
)
&
0xFF
;
b
=
(
c
>
>
16
)
&
0xFF
;
a
=
(
c
>
>
24
)
&
0xFF
;
}
else
{
r
=
(
c
>
>
16
)
&
0xFF
;
g
=
(
c
>
>
8
)
&
0xFF
;
b
=
(
c
>
>
0
)
&
0xFF
;
a
=
(
c
>
>
24
)
&
0xFF
;
}
if
(
0
!
=
a
&
&
255
!
=
a
)
{
SkUnPreMultiply
:
:
Scale
scale
=
table
[
a
]
;
r
=
SkUnPreMultiply
:
:
ApplyScale
(
scale
r
)
;
g
=
SkUnPreMultiply
:
:
ApplyScale
(
scale
g
)
;
b
=
SkUnPreMultiply
:
:
ApplyScale
(
scale
b
)
;
}
*
dst
+
+
=
r
;
*
dst
+
+
=
g
;
*
dst
+
+
=
b
;
*
dst
+
+
=
a
;
}
}
static
void
transform_scanline_rgbA
(
char
*
SK_RESTRICT
dst
const
char
*
SK_RESTRICT
src
int
width
int
bpp
)
{
transform_scanline_unpremultiply
<
true
>
(
dst
src
width
bpp
)
;
}
static
void
transform_scanline_bgrA
(
char
*
SK_RESTRICT
dst
const
char
*
SK_RESTRICT
src
int
width
int
bpp
)
{
transform_scanline_unpremultiply
<
false
>
(
dst
src
width
bpp
)
;
}
static
void
transform_scanline_BGRA
(
char
*
SK_RESTRICT
dst
const
char
*
SK_RESTRICT
src
int
width
int
)
{
const
uint32_t
*
srcP
=
(
const
SkPMColor
*
)
src
;
for
(
int
i
=
0
;
i
<
width
;
i
+
+
)
{
uint32_t
c
=
*
srcP
+
+
;
*
dst
+
+
=
(
c
>
>
16
)
&
0xFF
;
*
dst
+
+
=
(
c
>
>
8
)
&
0xFF
;
*
dst
+
+
=
(
c
>
>
0
)
&
0xFF
;
*
dst
+
+
=
(
c
>
>
24
)
&
0xFF
;
}
}
static
void
transform_scanline_4444
(
char
*
SK_RESTRICT
dst
const
char
*
SK_RESTRICT
src
int
width
int
)
{
const
SkPMColor16
*
srcP
=
(
const
SkPMColor16
*
)
src
;
const
SkUnPreMultiply
:
:
Scale
*
table
=
SkUnPreMultiply
:
:
GetScaleTable
(
)
;
for
(
int
i
=
0
;
i
<
width
;
i
+
+
)
{
SkPMColor16
c
=
*
srcP
+
+
;
unsigned
a
=
SkPacked4444ToA32
(
c
)
;
unsigned
r
=
SkPacked4444ToR32
(
c
)
;
unsigned
g
=
SkPacked4444ToG32
(
c
)
;
unsigned
b
=
SkPacked4444ToB32
(
c
)
;
if
(
0
!
=
a
&
&
255
!
=
a
)
{
SkUnPreMultiply
:
:
Scale
scale
=
table
[
a
]
;
r
=
SkUnPreMultiply
:
:
ApplyScale
(
scale
r
)
;
g
=
SkUnPreMultiply
:
:
ApplyScale
(
scale
g
)
;
b
=
SkUnPreMultiply
:
:
ApplyScale
(
scale
b
)
;
}
*
dst
+
+
=
r
;
*
dst
+
+
=
g
;
*
dst
+
+
=
b
;
*
dst
+
+
=
a
;
}
}
