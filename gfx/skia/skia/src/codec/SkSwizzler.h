#
ifndef
SkSwizzler_DEFINED
#
define
SkSwizzler_DEFINED
#
include
"
include
/
codec
/
SkCodec
.
h
"
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
src
/
codec
/
SkSampler
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
struct
SkEncodedInfo
;
struct
SkIRect
;
struct
SkImageInfo
;
class
SkSwizzler
:
public
SkSampler
{
public
:
static
std
:
:
unique_ptr
<
SkSwizzler
>
Make
(
const
SkEncodedInfo
&
encodedInfo
const
SkPMColor
*
ctable
const
SkImageInfo
&
dstInfo
const
SkCodec
:
:
Options
&
const
SkIRect
*
frame
=
nullptr
)
;
static
std
:
:
unique_ptr
<
SkSwizzler
>
MakeSimple
(
int
srcBPP
const
SkImageInfo
&
dstInfo
const
SkCodec
:
:
Options
&
const
SkIRect
*
frame
=
nullptr
)
;
void
swizzle
(
void
*
dst
const
uint8_t
*
SK_RESTRICT
src
)
;
int
fillWidth
(
)
const
override
{
return
fAllocatedWidth
;
}
int
sampleX
(
)
const
{
return
fSampleX
;
}
int
swizzleWidth
(
)
const
{
return
fSwizzleWidth
;
}
size_t
swizzleOffsetBytes
(
)
const
{
return
fDstOffsetBytes
;
}
private
:
typedef
void
(
*
RowProc
)
(
void
*
SK_RESTRICT
dstRow
const
uint8_t
*
SK_RESTRICT
src
int
dstWidth
int
bpp
int
deltaSrc
int
offset
const
SkPMColor
ctable
[
]
)
;
template
<
RowProc
Proc
>
static
void
SkipLeading8888ZerosThen
(
void
*
SK_RESTRICT
dstRow
const
uint8_t
*
SK_RESTRICT
src
int
dstWidth
int
bpp
int
deltaSrc
int
offset
const
SkPMColor
ctable
[
]
)
;
template
<
RowProc
Proc
>
static
void
SkipLeadingGrayAlphaZerosThen
(
void
*
dst
const
uint8_t
*
src
int
width
int
bpp
int
deltaSrc
int
offset
const
SkPMColor
ctable
[
]
)
;
const
RowProc
fFastProc
;
const
RowProc
fSlowProc
;
RowProc
fActualProc
;
const
SkPMColor
*
fColorTable
;
const
int
fSrcOffset
;
const
int
fDstOffset
;
int
fSrcOffsetUnits
;
int
fDstOffsetBytes
;
const
int
fSrcWidth
;
const
int
fDstWidth
;
int
fSwizzleWidth
;
int
fAllocatedWidth
;
int
fSampleX
;
const
int
fSrcBPP
;
const
int
fDstBPP
;
SkSwizzler
(
RowProc
fastProc
RowProc
proc
const
SkPMColor
*
ctable
int
srcOffset
int
srcWidth
int
dstOffset
int
dstWidth
int
srcBPP
int
dstBPP
)
;
static
std
:
:
unique_ptr
<
SkSwizzler
>
Make
(
const
SkImageInfo
&
dstInfo
RowProc
fastProc
RowProc
proc
const
SkPMColor
*
ctable
int
srcBPP
int
dstBPP
const
SkCodec
:
:
Options
&
options
const
SkIRect
*
frame
)
;
int
onSetSampleX
(
int
)
override
;
}
;
#
endif
