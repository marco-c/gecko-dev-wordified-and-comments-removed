#
ifndef
SkSwizzler_DEFINED
#
define
SkSwizzler_DEFINED
#
include
"
SkCodec
.
h
"
#
include
"
SkColor
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkSampler
.
h
"
class
SkSwizzler
:
public
SkSampler
{
public
:
enum
SrcConfig
{
kUnknown
kBit
kGray
kGrayAlpha
kIndex1
kIndex2
kIndex4
kIndex
kRGB
kBGR
kBGRX
kRGBA
kBGRA
kCMYK
kNoOp8
kNoOp16
kNoOp32
}
;
static
int
BitsPerPixel
(
SrcConfig
sc
)
{
switch
(
sc
)
{
case
kBit
:
case
kIndex1
:
return
1
;
case
kIndex2
:
return
2
;
case
kIndex4
:
return
4
;
case
kGray
:
case
kIndex
:
case
kNoOp8
:
return
8
;
case
kGrayAlpha
:
case
kNoOp16
:
return
16
;
case
kRGB
:
case
kBGR
:
return
24
;
case
kRGBA
:
case
kBGRX
:
case
kBGRA
:
case
kCMYK
:
case
kNoOp32
:
return
32
;
default
:
SkASSERT
(
false
)
;
return
0
;
}
}
static
int
BytesPerPixel
(
SrcConfig
sc
)
{
SkASSERT
(
SkIsAlign8
(
BitsPerPixel
(
sc
)
)
)
;
return
BitsPerPixel
(
sc
)
>
>
3
;
}
static
SkSwizzler
*
CreateSwizzler
(
SrcConfig
const
SkPMColor
*
ctable
const
SkImageInfo
&
dstInfo
const
SkCodec
:
:
Options
&
const
SkIRect
*
frame
=
nullptr
)
;
void
swizzle
(
void
*
dst
const
uint8_t
*
SK_RESTRICT
src
)
;
void
fill
(
const
SkImageInfo
&
info
void
*
dst
size_t
rowBytes
uint32_t
colorOrIndex
SkCodec
:
:
ZeroInitialized
zeroInit
)
override
{
const
SkImageInfo
fillInfo
=
info
.
makeWH
(
fAllocatedWidth
info
.
height
(
)
)
;
SkSampler
:
:
Fill
(
fillInfo
dst
rowBytes
colorOrIndex
zeroInit
)
;
}
int
sampleX
(
)
const
{
return
fSampleX
;
}
private
:
typedef
void
(
*
RowProc
)
(
void
*
SK_RESTRICT
dstRow
const
uint8_t
*
SK_RESTRICT
src
int
dstWidth
int
bpp
int
deltaSrc
int
offset
const
SkPMColor
ctable
[
]
)
;
template
<
RowProc
Proc
>
static
void
SkipLeading8888ZerosThen
(
void
*
SK_RESTRICT
dstRow
const
uint8_t
*
SK_RESTRICT
src
int
dstWidth
int
bpp
int
deltaSrc
int
offset
const
SkPMColor
ctable
[
]
)
;
template
<
RowProc
Proc
>
static
void
SkipLeadingGrayAlphaZerosThen
(
void
*
dst
const
uint8_t
*
src
int
width
int
bpp
int
deltaSrc
int
offset
const
SkPMColor
ctable
[
]
)
;
const
RowProc
fFastProc
;
const
RowProc
fSlowProc
;
RowProc
fActualProc
;
const
SkPMColor
*
fColorTable
;
const
int
fSrcOffset
;
const
int
fDstOffset
;
int
fSrcOffsetUnits
;
int
fDstOffsetBytes
;
const
int
fSrcWidth
;
const
int
fDstWidth
;
int
fSwizzleWidth
;
int
fAllocatedWidth
;
int
fSampleX
;
const
int
fSrcBPP
;
const
int
fDstBPP
;
SkSwizzler
(
RowProc
fastProc
RowProc
proc
const
SkPMColor
*
ctable
int
srcOffset
int
srcWidth
int
dstOffset
int
dstWidth
int
srcBPP
int
dstBPP
)
;
int
onSetSampleX
(
int
)
override
;
}
;
#
endif
