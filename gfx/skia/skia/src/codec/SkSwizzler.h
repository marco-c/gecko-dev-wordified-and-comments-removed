#
ifndef
SkSwizzler_DEFINED
#
define
SkSwizzler_DEFINED
#
include
"
SkCodec
.
h
"
#
include
"
SkColor
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkSampler
.
h
"
class
SkSwizzler
:
public
SkSampler
{
public
:
static
SkSwizzler
*
CreateSwizzler
(
const
SkEncodedInfo
&
encodedInfo
const
SkPMColor
*
ctable
const
SkImageInfo
&
dstInfo
const
SkCodec
:
:
Options
&
const
SkIRect
*
frame
=
nullptr
bool
preSwizzled
=
false
)
;
void
swizzle
(
void
*
dst
const
uint8_t
*
SK_RESTRICT
src
)
;
void
fill
(
const
SkImageInfo
&
info
void
*
dst
size_t
rowBytes
uint64_t
colorOrIndex
SkCodec
:
:
ZeroInitialized
zeroInit
)
override
{
const
SkImageInfo
fillInfo
=
info
.
makeWH
(
fAllocatedWidth
info
.
height
(
)
)
;
SkSampler
:
:
Fill
(
fillInfo
dst
rowBytes
colorOrIndex
zeroInit
)
;
}
int
sampleX
(
)
const
{
return
fSampleX
;
}
int
swizzleWidth
(
)
const
{
return
fSwizzleWidth
;
}
private
:
typedef
void
(
*
RowProc
)
(
void
*
SK_RESTRICT
dstRow
const
uint8_t
*
SK_RESTRICT
src
int
dstWidth
int
bpp
int
deltaSrc
int
offset
const
SkPMColor
ctable
[
]
)
;
template
<
RowProc
Proc
>
static
void
SkipLeading8888ZerosThen
(
void
*
SK_RESTRICT
dstRow
const
uint8_t
*
SK_RESTRICT
src
int
dstWidth
int
bpp
int
deltaSrc
int
offset
const
SkPMColor
ctable
[
]
)
;
template
<
RowProc
Proc
>
static
void
SkipLeadingGrayAlphaZerosThen
(
void
*
dst
const
uint8_t
*
src
int
width
int
bpp
int
deltaSrc
int
offset
const
SkPMColor
ctable
[
]
)
;
const
RowProc
fFastProc
;
const
RowProc
fSlowProc
;
RowProc
fActualProc
;
const
SkPMColor
*
fColorTable
;
const
int
fSrcOffset
;
const
int
fDstOffset
;
int
fSrcOffsetUnits
;
int
fDstOffsetBytes
;
const
int
fSrcWidth
;
const
int
fDstWidth
;
int
fSwizzleWidth
;
int
fAllocatedWidth
;
int
fSampleX
;
const
int
fSrcBPP
;
const
int
fDstBPP
;
SkSwizzler
(
RowProc
fastProc
RowProc
proc
const
SkPMColor
*
ctable
int
srcOffset
int
srcWidth
int
dstOffset
int
dstWidth
int
srcBPP
int
dstBPP
)
;
int
onSetSampleX
(
int
)
override
;
}
;
#
endif
