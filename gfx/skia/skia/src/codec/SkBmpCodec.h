#
ifndef
SkBmpCodec_DEFINED
#
define
SkBmpCodec_DEFINED
#
include
"
SkCodec
.
h
"
#
include
"
SkColorTable
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkStream
.
h
"
#
include
"
SkSwizzler
.
h
"
#
include
"
SkTypes
.
h
"
class
SkBmpCodec
:
public
SkCodec
{
public
:
static
bool
IsBmp
(
SkStream
*
)
;
static
SkCodec
*
NewFromStream
(
SkStream
*
)
;
static
SkCodec
*
NewFromIco
(
SkStream
*
)
;
protected
:
SkBmpCodec
(
const
SkImageInfo
&
info
SkStream
*
stream
uint16_t
bitsPerPixel
SkCodec
:
:
SkScanlineOrder
rowOrder
)
;
SkEncodedFormat
onGetEncodedFormat
(
)
const
override
{
return
kBMP_SkEncodedFormat
;
}
static
bool
ReadHeader
(
SkStream
*
bool
inIco
SkCodec
*
*
codecOut
)
;
bool
onRewind
(
)
override
;
bool
inIco
(
)
const
{
return
this
-
>
onInIco
(
)
;
}
virtual
bool
onInIco
(
)
const
{
return
false
;
}
int32_t
getDstRow
(
int32_t
y
int32_t
height
)
const
;
uint32_t
computeNumColors
(
uint32_t
numColors
)
;
uint16_t
bitsPerPixel
(
)
const
{
return
fBitsPerPixel
;
}
SkScanlineOrder
onGetScanlineOrder
(
)
const
override
{
return
fRowOrder
;
}
virtual
SkCodec
:
:
Result
prepareToDecode
(
const
SkImageInfo
&
dstInfo
const
SkCodec
:
:
Options
&
options
SkPMColor
inputColorPtr
[
]
int
*
inputColorCount
)
=
0
;
private
:
static
SkCodec
*
NewFromStream
(
SkStream
*
bool
inIco
)
;
virtual
int
decodeRows
(
const
SkImageInfo
&
dstInfo
void
*
dst
size_t
dstRowBytes
const
Options
&
opts
)
=
0
;
Result
onStartScanlineDecode
(
const
SkImageInfo
&
dstInfo
const
SkCodec
:
:
Options
&
SkPMColor
inputColorPtr
[
]
int
*
inputColorCount
)
override
;
int
onGetScanlines
(
void
*
dst
int
count
size_t
rowBytes
)
override
;
const
uint16_t
fBitsPerPixel
;
const
SkScanlineOrder
fRowOrder
;
typedef
SkCodec
INHERITED
;
}
;
#
endif
