#
ifndef
SkIcoCodec_DEFINED
#
define
SkIcoCodec_DEFINED
#
include
"
SkCodec
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkStream
.
h
"
#
include
"
SkTArray
.
h
"
#
include
"
SkTypes
.
h
"
class
SkIcoCodec
:
public
SkCodec
{
public
:
static
bool
IsIco
(
const
void
*
size_t
)
;
static
std
:
:
unique_ptr
<
SkCodec
>
MakeFromStream
(
std
:
:
unique_ptr
<
SkStream
>
Result
*
)
;
protected
:
SkISize
onGetScaledDimensions
(
float
desiredScale
)
const
override
;
bool
onDimensionsSupported
(
const
SkISize
&
)
override
;
Result
onGetPixels
(
const
SkImageInfo
&
dstInfo
void
*
dst
size_t
dstRowBytes
const
Options
&
int
*
)
override
;
SkEncodedImageFormat
onGetEncodedFormat
(
)
const
override
{
return
SkEncodedImageFormat
:
:
kICO
;
}
SkScanlineOrder
onGetScanlineOrder
(
)
const
override
;
bool
conversionSupported
(
const
SkImageInfo
&
SkColorType
bool
const
SkColorSpace
*
)
const
override
{
return
true
;
}
bool
usesColorXform
(
)
const
override
{
return
false
;
}
private
:
Result
onStartScanlineDecode
(
const
SkImageInfo
&
dstInfo
const
SkCodec
:
:
Options
&
options
)
override
;
int
onGetScanlines
(
void
*
dst
int
count
size_t
rowBytes
)
override
;
bool
onSkipScanlines
(
int
count
)
override
;
Result
onStartIncrementalDecode
(
const
SkImageInfo
&
dstInfo
void
*
pixels
size_t
rowBytes
const
SkCodec
:
:
Options
&
)
override
;
Result
onIncrementalDecode
(
int
*
rowsDecoded
)
override
;
SkSampler
*
getSampler
(
bool
createIfNecessary
)
override
;
int
chooseCodec
(
const
SkISize
&
requestedSize
int
startIndex
)
;
SkIcoCodec
(
int
width
int
height
const
SkEncodedInfo
&
info
SkTArray
<
std
:
:
unique_ptr
<
SkCodec
>
true
>
*
embeddedCodecs
sk_sp
<
SkColorSpace
>
colorSpace
)
;
std
:
:
unique_ptr
<
SkTArray
<
std
:
:
unique_ptr
<
SkCodec
>
true
>
>
fEmbeddedCodecs
;
SkCodec
*
fCurrCodec
;
typedef
SkCodec
INHERITED
;
}
;
#
endif
