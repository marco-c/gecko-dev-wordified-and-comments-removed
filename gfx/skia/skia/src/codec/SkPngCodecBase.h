#
ifndef
SkPngCodecBase_DEFINED
#
define
SkPngCodecBase_DEFINED
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
optional
>
#
include
"
include
/
codec
/
SkCodec
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
private
/
SkEncodedInfo
.
h
"
#
include
"
include
/
private
/
base
/
SkDebug
.
h
"
#
include
"
include
/
private
/
base
/
SkTemplates
.
h
"
class
SkColorPalette
;
class
SkSampler
;
class
SkStream
;
class
SkSwizzler
;
enum
class
SkEncodedImageFormat
;
struct
SkImageInfo
;
template
<
typename
T
>
class
SkSpan
;
class
SkPngCodecBase
:
public
SkCodec
{
public
:
~
SkPngCodecBase
(
)
override
;
static
bool
isCompatibleColorProfileAndType
(
const
SkEncodedInfo
:
:
ICCProfile
*
profile
SkEncodedInfo
:
:
Color
color
)
;
protected
:
SkPngCodecBase
(
SkEncodedInfo
&
&
std
:
:
unique_ptr
<
SkStream
>
)
;
Result
initializeXforms
(
const
SkImageInfo
&
dstInfo
const
Options
&
options
int
frameWidth
)
;
void
initializeXformParams
(
)
;
void
applyXformRow
(
SkSpan
<
uint8_t
>
dstRow
SkSpan
<
const
uint8_t
>
srcRow
)
;
void
applyXformRow
(
void
*
dstRow
const
uint8_t
*
srcRow
)
;
size_t
getEncodedRowBytes
(
)
const
{
return
fEncodedRowBytes
;
}
const
SkSwizzler
*
swizzler
(
)
const
{
return
fSwizzler
.
get
(
)
;
}
struct
PaletteColorEntry
{
uint8_t
red
;
uint8_t
green
;
uint8_t
blue
;
}
;
virtual
std
:
:
optional
<
SkSpan
<
const
PaletteColorEntry
>
>
onTryGetPlteChunk
(
)
=
0
;
virtual
std
:
:
optional
<
SkSpan
<
const
uint8_t
>
>
onTryGetTrnsChunk
(
)
=
0
;
private
:
SkEncodedImageFormat
onGetEncodedFormat
(
)
const
final
;
SkSampler
*
getSampler
(
bool
createIfNecessary
)
final
;
void
allocateStorage
(
const
SkImageInfo
&
dstInfo
)
;
Result
initializeSwizzler
(
const
SkImageInfo
&
dstInfo
const
Options
&
options
bool
skipFormatConversion
int
frameWidth
)
;
bool
createColorTable
(
const
SkImageInfo
&
dstInfo
)
;
enum
XformMode
{
kSwizzleOnly_XformMode
kColorOnly_XformMode
kSwizzleColor_XformMode
}
;
XformMode
fXformMode
;
std
:
:
unique_ptr
<
SkSwizzler
>
fSwizzler
;
skia_private
:
:
AutoTMalloc
<
uint8_t
>
fStorage
;
int
fXformWidth
=
-
1
;
sk_sp
<
SkColorPalette
>
fColorTable
;
size_t
fEncodedRowBytes
=
0
;
#
if
defined
(
SK_DEBUG
)
size_t
fDstRowBytes
=
0
;
#
endif
}
;
#
endif
