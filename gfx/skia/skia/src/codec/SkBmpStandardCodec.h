#
ifndef
SkBmpStandardCodec_DEFINED
#
define
SkBmpStandardCodec_DEFINED
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
src
/
codec
/
SkBmpBaseCodec
.
h
"
#
include
"
src
/
codec
/
SkColorTable
.
h
"
#
include
"
src
/
codec
/
SkSwizzler
.
h
"
class
SkBmpStandardCodec
:
public
SkBmpBaseCodec
{
public
:
SkBmpStandardCodec
(
SkEncodedInfo
&
&
info
std
:
:
unique_ptr
<
SkStream
>
stream
uint16_t
bitsPerPixel
uint32_t
numColors
uint32_t
bytesPerColor
uint32_t
offset
SkCodec
:
:
SkScanlineOrder
rowOrder
bool
isOpaque
bool
inIco
)
;
protected
:
Result
onGetPixels
(
const
SkImageInfo
&
dstInfo
void
*
dst
size_t
dstRowBytes
const
Options
&
int
*
)
override
;
bool
onInIco
(
)
const
override
{
return
fInIco
;
}
SkCodec
:
:
Result
onPrepareToDecode
(
const
SkImageInfo
&
dstInfo
const
SkCodec
:
:
Options
&
options
)
override
;
SkSampler
*
getSampler
(
bool
createIfNecessary
)
override
{
SkASSERT
(
fSwizzler
)
;
return
fSwizzler
.
get
(
)
;
}
private
:
bool
createColorTable
(
SkColorType
colorType
SkAlphaType
alphaType
)
;
SkEncodedInfo
swizzlerInfo
(
)
const
;
void
initializeSwizzler
(
const
SkImageInfo
&
dstInfo
const
Options
&
opts
)
;
int
decodeRows
(
const
SkImageInfo
&
dstInfo
void
*
dst
size_t
dstRowBytes
const
Options
&
opts
)
override
;
void
decodeIcoMask
(
SkStream
*
stream
const
SkImageInfo
&
dstInfo
void
*
dst
size_t
dstRowBytes
)
;
sk_sp
<
SkColorTable
>
fColorTable
;
const
uint32_t
fNumColors
;
const
uint32_t
fBytesPerColor
;
const
uint32_t
fOffset
;
std
:
:
unique_ptr
<
SkSwizzler
>
fSwizzler
;
const
bool
fIsOpaque
;
const
bool
fInIco
;
const
size_t
fAndMaskRowBytes
;
typedef
SkBmpBaseCodec
INHERITED
;
}
;
#
endif
