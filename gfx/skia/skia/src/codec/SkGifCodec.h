#
include
"
SkCodec
.
h
"
#
include
"
SkColorSpace
.
h
"
#
include
"
SkColorTable
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkSwizzler
.
h
"
struct
GifFileType
;
struct
SavedImage
;
class
SkGifCodec
:
public
SkCodec
{
public
:
static
bool
IsGif
(
const
void
*
size_t
)
;
static
SkCodec
*
NewFromStream
(
SkStream
*
)
;
protected
:
static
bool
ReadHeader
(
SkStream
*
stream
SkCodec
*
*
codecOut
GifFileType
*
*
gifOut
)
;
Result
onGetPixels
(
const
SkImageInfo
&
void
*
size_t
const
Options
&
SkPMColor
*
int
*
int
*
)
override
;
SkEncodedFormat
onGetEncodedFormat
(
)
const
override
{
return
kGIF_SkEncodedFormat
;
}
bool
onRewind
(
)
override
;
uint32_t
onGetFillValue
(
SkColorType
)
const
override
;
int
onOutputScanline
(
int
inputScanline
)
const
override
;
private
:
static
Result
ReadUpToFirstImage
(
GifFileType
*
gif
uint32_t
*
transIndex
)
;
static
bool
GetDimensions
(
GifFileType
*
gif
SkISize
*
size
SkIRect
*
frameRect
)
;
void
initializeColorTable
(
const
SkImageInfo
&
dstInfo
SkPMColor
*
colorPtr
int
*
inputColorCount
)
;
Result
prepareToDecode
(
const
SkImageInfo
&
dstInfo
SkPMColor
*
inputColorPtr
int
*
inputColorCount
const
Options
&
opts
)
;
void
initializeSwizzler
(
const
SkImageInfo
&
dstInfo
const
Options
&
options
)
;
SkSampler
*
getSampler
(
bool
createIfNecessary
)
override
{
SkASSERT
(
fSwizzler
)
;
return
fSwizzler
;
}
bool
readRow
(
)
;
Result
onStartScanlineDecode
(
const
SkImageInfo
&
dstInfo
const
Options
&
opts
SkPMColor
inputColorPtr
[
]
int
*
inputColorCount
)
override
;
int
onGetScanlines
(
void
*
dst
int
count
size_t
rowBytes
)
override
;
bool
onSkipScanlines
(
int
count
)
override
;
void
handleScanlineFrame
(
int
count
int
*
rowsBeforeFrame
int
*
rowsInFrame
)
;
SkScanlineOrder
onGetScanlineOrder
(
)
const
override
;
static
void
CloseGif
(
GifFileType
*
gif
)
;
static
void
FreeExtension
(
SavedImage
*
image
)
;
SkGifCodec
(
const
SkImageInfo
&
srcInfo
SkStream
*
stream
GifFileType
*
gif
uint32_t
transIndex
const
SkIRect
&
frameRect
bool
frameIsSubset
)
;
SkAutoTCallVProc
<
GifFileType
CloseGif
>
fGif
;
SkAutoTDeleteArray
<
uint8_t
>
fSrcBuffer
;
const
SkIRect
fFrameRect
;
const
uint32_t
fTransIndex
;
uint32_t
fFillIndex
;
const
bool
fFrameIsSubset
;
SkAutoTDelete
<
SkSwizzler
>
fSwizzler
;
SkAutoTUnref
<
SkColorTable
>
fColorTable
;
typedef
SkCodec
INHERITED
;
}
;
