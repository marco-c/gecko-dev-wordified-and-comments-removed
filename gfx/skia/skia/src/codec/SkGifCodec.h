#
ifndef
SkGifCodec_DEFINED
#
define
SkGifCodec_DEFINED
#
include
"
SkCodec
.
h
"
#
include
"
SkCodecAnimation
.
h
"
#
include
"
SkColorSpace
.
h
"
#
include
"
SkColorTable
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkSwizzler
.
h
"
#
include
"
SkGifImageReader
.
h
"
class
SkGifCodec
:
public
SkCodec
{
public
:
static
bool
IsGif
(
const
void
*
size_t
)
;
static
SkCodec
*
NewFromStream
(
SkStream
*
)
;
bool
haveDecodedRow
(
size_t
frameIndex
const
unsigned
char
*
rowBegin
size_t
rowNumber
unsigned
repeatCount
bool
writeTransparentPixels
)
;
protected
:
Result
onGetPixels
(
const
SkImageInfo
&
void
*
size_t
const
Options
&
SkPMColor
*
int
*
int
*
)
override
;
SkEncodedImageFormat
onGetEncodedFormat
(
)
const
override
{
return
SkEncodedImageFormat
:
:
kGIF
;
}
bool
onRewind
(
)
override
;
uint64_t
onGetFillValue
(
const
SkImageInfo
&
)
const
override
;
size_t
onGetFrameCount
(
)
override
;
bool
onGetFrameInfo
(
size_t
FrameInfo
*
)
const
override
;
int
onGetRepetitionCount
(
)
override
;
Result
onStartIncrementalDecode
(
const
SkImageInfo
&
void
*
size_t
const
SkCodec
:
:
Options
&
SkPMColor
*
int
*
)
override
;
Result
onIncrementalDecode
(
int
*
)
override
;
private
:
void
initializeColorTable
(
const
SkImageInfo
&
dstInfo
size_t
frameIndex
)
;
Result
prepareToDecode
(
const
SkImageInfo
&
dstInfo
SkPMColor
*
inputColorPtr
int
*
inputColorCount
const
Options
&
opts
)
;
void
initializeSwizzler
(
const
SkImageInfo
&
dstInfo
size_t
frameIndex
)
;
SkSampler
*
getSampler
(
bool
createIfNecessary
)
override
{
SkASSERT
(
fSwizzler
)
;
return
fSwizzler
.
get
(
)
;
}
Result
decodeFrame
(
bool
firstAttempt
const
Options
&
opts
int
*
rowsDecoded
)
;
void
applyXformRow
(
const
SkImageInfo
&
dstInfo
void
*
dst
const
uint8_t
*
src
)
const
;
SkGifCodec
(
const
SkEncodedInfo
&
const
SkImageInfo
&
SkGifImageReader
*
)
;
std
:
:
unique_ptr
<
SkGifImageReader
>
fReader
;
std
:
:
unique_ptr
<
uint8_t
[
]
>
fTmpBuffer
;
std
:
:
unique_ptr
<
SkSwizzler
>
fSwizzler
;
sk_sp
<
SkColorTable
>
fCurrColorTable
;
bool
fCurrColorTableIsReal
;
bool
fFilledBackground
;
bool
fFirstCallToIncrementalDecode
;
void
*
fDst
;
size_t
fDstRowBytes
;
int
fRowsDecoded
;
std
:
:
unique_ptr
<
uint32_t
[
]
>
fXformBuffer
;
bool
fXformOnDecode
;
typedef
SkCodec
INHERITED
;
}
;
#
endif
