#
ifndef
SkPngCodec_DEFINED
#
define
SkPngCodec_DEFINED
#
include
"
include
/
codec
/
SkCodec
.
h
"
#
include
"
include
/
codec
/
SkEncodedImageFormat
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
private
/
base
/
SkTemplates
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
class
SkColorTable
;
class
SkPngChunkReader
;
class
SkSampler
;
class
SkStream
;
class
SkSwizzler
;
struct
SkEncodedInfo
;
struct
SkImageInfo
;
class
SkPngCodec
:
public
SkCodec
{
public
:
static
bool
IsPng
(
const
void
*
size_t
)
;
static
std
:
:
unique_ptr
<
SkCodec
>
MakeFromStream
(
std
:
:
unique_ptr
<
SkStream
>
Result
*
SkPngChunkReader
*
=
nullptr
)
;
void
setIdatLength
(
size_t
len
)
{
fIdatLength
=
len
;
}
~
SkPngCodec
(
)
override
;
protected
:
struct
voidp
{
voidp
(
void
*
ptr
)
:
fPtr
(
ptr
)
{
}
template
<
typename
T
>
operator
T
*
(
)
const
{
return
(
T
*
)
fPtr
;
}
explicit
operator
bool
(
)
const
{
return
fPtr
!
=
nullptr
;
}
void
*
fPtr
;
}
;
SkPngCodec
(
SkEncodedInfo
&
&
std
:
:
unique_ptr
<
SkStream
>
SkPngChunkReader
*
void
*
png_ptr
void
*
info_ptr
int
bitDepth
)
;
Result
onGetPixels
(
const
SkImageInfo
&
void
*
size_t
const
Options
&
int
*
)
override
;
SkEncodedImageFormat
onGetEncodedFormat
(
)
const
override
{
return
SkEncodedImageFormat
:
:
kPNG
;
}
bool
onRewind
(
)
override
;
SkSampler
*
getSampler
(
bool
createIfNecessary
)
override
;
void
applyXformRow
(
void
*
dst
const
void
*
src
)
;
voidp
png_ptr
(
)
{
return
fPng_ptr
;
}
voidp
info_ptr
(
)
{
return
fInfo_ptr
;
}
SkSwizzler
*
swizzler
(
)
{
return
fSwizzler
.
get
(
)
;
}
void
initializeXformParams
(
)
;
bool
processData
(
)
;
Result
onStartIncrementalDecode
(
const
SkImageInfo
&
dstInfo
void
*
pixels
size_t
rowBytes
const
SkCodec
:
:
Options
&
)
override
;
Result
onIncrementalDecode
(
int
*
)
override
;
sk_sp
<
SkPngChunkReader
>
fPngChunkReader
;
voidp
fPng_ptr
;
voidp
fInfo_ptr
;
sk_sp
<
SkColorTable
>
fColorTable
;
std
:
:
unique_ptr
<
SkSwizzler
>
fSwizzler
;
skia_private
:
:
AutoTMalloc
<
uint8_t
>
fStorage
;
void
*
fColorXformSrcRow
;
const
int
fBitDepth
;
private
:
enum
XformMode
{
kSwizzleOnly_XformMode
kColorOnly_XformMode
kSwizzleColor_XformMode
}
;
bool
createColorTable
(
const
SkImageInfo
&
dstInfo
)
;
SkCodec
:
:
Result
initializeXforms
(
const
SkImageInfo
&
dstInfo
const
Options
&
)
;
void
initializeSwizzler
(
const
SkImageInfo
&
dstInfo
const
Options
&
bool
skipFormatConversion
)
;
void
allocateStorage
(
const
SkImageInfo
&
dstInfo
)
;
void
destroyReadStruct
(
)
;
virtual
Result
decodeAllRows
(
void
*
dst
size_t
rowBytes
int
*
rowsDecoded
)
=
0
;
virtual
void
setRange
(
int
firstRow
int
lastRow
void
*
dst
size_t
rowBytes
)
=
0
;
virtual
Result
decode
(
int
*
rowsDecoded
)
=
0
;
XformMode
fXformMode
;
int
fXformWidth
;
size_t
fIdatLength
;
bool
fDecodedIdat
;
using
INHERITED
=
SkCodec
;
}
;
#
endif
