#
include
"
SkCodec
.
h
"
#
include
"
SkColorSpaceXform
.
h
"
#
include
"
SkColorTable
.
h
"
#
include
"
SkPngChunkReader
.
h
"
#
include
"
SkEncodedFormat
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkSwizzler
.
h
"
#
define
SK_GOOGLE3_PNG_HACK
class
SkStream
;
class
SkPngCodec
:
public
SkCodec
{
public
:
static
bool
IsPng
(
const
char
*
size_t
)
;
static
SkCodec
*
NewFromStream
(
SkStream
*
SkPngChunkReader
*
=
NULL
)
;
virtual
~
SkPngCodec
(
)
;
protected
:
struct
voidp
{
voidp
(
void
*
ptr
)
:
fPtr
(
ptr
)
{
}
template
<
typename
T
>
operator
T
*
(
)
const
{
return
(
T
*
)
fPtr
;
}
explicit
operator
bool
(
)
const
{
return
fPtr
!
=
nullptr
;
}
void
*
fPtr
;
}
;
SkPngCodec
(
const
SkEncodedInfo
&
const
SkImageInfo
&
SkStream
*
SkPngChunkReader
*
void
*
png_ptr
void
*
info_ptr
int
bitDepth
)
;
Result
onGetPixels
(
const
SkImageInfo
&
void
*
size_t
const
Options
&
SkPMColor
*
int
*
int
*
)
override
;
SkEncodedFormat
onGetEncodedFormat
(
)
const
override
{
return
kPNG_SkEncodedFormat
;
}
bool
onRewind
(
)
override
;
uint64_t
onGetFillValue
(
const
SkImageInfo
&
)
const
override
;
SkSampler
*
getSampler
(
bool
createIfNecessary
)
override
;
void
applyXformRow
(
void
*
dst
const
void
*
src
)
;
voidp
png_ptr
(
)
{
return
fPng_ptr
;
}
voidp
info_ptr
(
)
{
return
fInfo_ptr
;
}
SkSwizzler
*
swizzler
(
)
{
return
fSwizzler
;
}
void
initializeXformParams
(
)
;
void
processData
(
)
;
#
ifdef
SK_GOOGLE3_PNG_HACK
bool
rereadHeaderIfNecessary
(
)
;
void
rereadInfoCallback
(
)
;
#
endif
Result
onStartIncrementalDecode
(
const
SkImageInfo
&
dstInfo
void
*
pixels
size_t
rowBytes
const
SkCodec
:
:
Options
&
SkPMColor
*
ctable
int
*
ctableCount
)
override
;
Result
onIncrementalDecode
(
int
*
)
override
;
SkAutoTUnref
<
SkPngChunkReader
>
fPngChunkReader
;
voidp
fPng_ptr
;
voidp
fInfo_ptr
;
SkAutoTUnref
<
SkColorTable
>
fColorTable
;
SkAutoTDelete
<
SkSwizzler
>
fSwizzler
;
std
:
:
unique_ptr
<
SkColorSpaceXform
>
fColorXform
;
SkAutoTMalloc
<
uint8_t
>
fStorage
;
uint32_t
*
fColorXformSrcRow
;
const
int
fBitDepth
;
private
:
enum
XformMode
{
kSwizzleOnly_XformMode
kColorOnly_XformMode
kSwizzleColor_XformMode
}
;
bool
createColorTable
(
const
SkImageInfo
&
dstInfo
int
*
ctableCount
)
;
bool
initializeXforms
(
const
SkImageInfo
&
dstInfo
const
Options
&
SkPMColor
*
colorPtr
int
*
colorCount
)
;
void
initializeSwizzler
(
const
SkImageInfo
&
dstInfo
const
Options
&
)
;
void
allocateStorage
(
const
SkImageInfo
&
dstInfo
)
;
void
destroyReadStruct
(
)
;
virtual
Result
decodeAllRows
(
void
*
dst
size_t
rowBytes
int
*
rowsDecoded
)
=
0
;
virtual
void
setRange
(
int
firstRow
int
lastRow
void
*
dst
size_t
rowBytes
)
=
0
;
virtual
Result
decode
(
int
*
rowsDecoded
)
=
0
;
XformMode
fXformMode
;
SkColorSpaceXform
:
:
ColorFormat
fXformColorFormat
;
SkAlphaType
fXformAlphaType
;
int
fXformWidth
;
#
ifdef
SK_GOOGLE3_PNG_HACK
bool
fNeedsToRereadHeader
;
#
endif
typedef
SkCodec
INHERITED
;
}
;
