#
ifndef
SkJpegCodec_DEFINED
#
define
SkJpegCodec_DEFINED
#
include
"
SkCodec
.
h
"
#
include
"
SkColorSpace
.
h
"
#
include
"
SkColorSpaceXform
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkSwizzler
.
h
"
#
include
"
SkStream
.
h
"
#
include
"
SkTemplates
.
h
"
class
JpegDecoderMgr
;
class
SkJpegCodec
:
public
SkCodec
{
public
:
static
bool
IsJpeg
(
const
void
*
size_t
)
;
static
SkCodec
*
NewFromStream
(
SkStream
*
)
;
protected
:
SkISize
onGetScaledDimensions
(
float
desiredScale
)
const
override
;
Result
onGetPixels
(
const
SkImageInfo
&
dstInfo
void
*
dst
size_t
dstRowBytes
const
Options
&
SkPMColor
*
int
*
int
*
)
override
;
bool
onQueryYUV8
(
SkYUVSizeInfo
*
sizeInfo
SkYUVColorSpace
*
colorSpace
)
const
override
;
Result
onGetYUV8Planes
(
const
SkYUVSizeInfo
&
sizeInfo
void
*
planes
[
3
]
)
override
;
SkEncodedImageFormat
onGetEncodedFormat
(
)
const
override
{
return
SkEncodedImageFormat
:
:
kJPEG
;
}
bool
onRewind
(
)
override
;
bool
onDimensionsSupported
(
const
SkISize
&
)
override
;
private
:
static
SkCodec
*
NewFromStream
(
SkStream
*
sk_sp
<
SkColorSpace
>
defaultColorSpace
)
;
static
bool
ReadHeader
(
SkStream
*
stream
SkCodec
*
*
codecOut
JpegDecoderMgr
*
*
decoderMgrOut
sk_sp
<
SkColorSpace
>
defaultColorSpace
)
;
SkJpegCodec
(
int
width
int
height
const
SkEncodedInfo
&
info
SkStream
*
stream
JpegDecoderMgr
*
decoderMgr
sk_sp
<
SkColorSpace
>
colorSpace
Origin
origin
)
;
bool
setOutputColorSpace
(
const
SkImageInfo
&
dst
)
;
void
initializeSwizzler
(
const
SkImageInfo
&
dstInfo
const
Options
&
options
bool
needsCMYKToRGB
)
;
void
allocateStorage
(
const
SkImageInfo
&
dstInfo
)
;
int
readRows
(
const
SkImageInfo
&
dstInfo
void
*
dst
size_t
rowBytes
int
count
const
Options
&
)
;
SkSampler
*
getSampler
(
bool
createIfNecessary
)
override
;
Result
onStartScanlineDecode
(
const
SkImageInfo
&
dstInfo
const
Options
&
options
SkPMColor
ctable
[
]
int
*
ctableCount
)
override
;
int
onGetScanlines
(
void
*
dst
int
count
size_t
rowBytes
)
override
;
bool
onSkipScanlines
(
int
count
)
override
;
std
:
:
unique_ptr
<
JpegDecoderMgr
>
fDecoderMgr
;
const
int
fReadyState
;
SkAutoTMalloc
<
uint8_t
>
fStorage
;
uint8_t
*
fSwizzleSrcRow
;
uint32_t
*
fColorXformSrcRow
;
SkIRect
fSwizzlerSubset
;
std
:
:
unique_ptr
<
SkSwizzler
>
fSwizzler
;
friend
class
SkRawCodec
;
typedef
SkCodec
INHERITED
;
}
;
#
endif
