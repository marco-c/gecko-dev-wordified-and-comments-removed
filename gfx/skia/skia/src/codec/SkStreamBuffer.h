#
ifndef
SkStreamBuffer_DEFINED
#
define
SkStreamBuffer_DEFINED
#
include
"
SkData
.
h
"
#
include
"
SkStream
.
h
"
#
include
"
SkTypes
.
h
"
#
include
"
.
.
/
private
/
SkTHash
.
h
"
class
SkStreamBuffer
:
SkNoncopyable
{
public
:
SkStreamBuffer
(
SkStream
*
)
;
~
SkStreamBuffer
(
)
;
const
char
*
get
(
)
const
;
bool
buffer
(
size_t
bytes
)
;
void
flush
(
)
{
if
(
fHasLengthAndPosition
)
{
if
(
fTrulyBuffered
<
fBytesBuffered
)
{
fStream
-
>
move
(
fBytesBuffered
-
fTrulyBuffered
)
;
}
fTrulyBuffered
=
0
;
}
fPosition
+
=
fBytesBuffered
;
fBytesBuffered
=
0
;
}
size_t
markPosition
(
)
;
sk_sp
<
SkData
>
getDataAtPosition
(
size_t
position
size_t
length
)
;
private
:
static
constexpr
size_t
kMaxSize
=
256
*
3
;
std
:
:
unique_ptr
<
SkStream
>
fStream
;
size_t
fPosition
;
char
fBuffer
[
kMaxSize
]
;
size_t
fBytesBuffered
;
const
bool
fHasLengthAndPosition
;
mutable
size_t
fTrulyBuffered
;
SkTHashMap
<
size_t
SkData
*
>
fMarkedData
;
}
;
#
endif
