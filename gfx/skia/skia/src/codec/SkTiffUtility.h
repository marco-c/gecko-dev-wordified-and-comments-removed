#
ifndef
SkTiffUtility_codec_DEFINED
#
define
SkTiffUtility_codec_DEFINED
#
include
"
include
/
core
/
SkData
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
namespace
SkTiff
{
inline
constexpr
size_t
kEndianSize
=
4
;
inline
constexpr
uint8_t
kEndianBig
[
kEndianSize
]
=
{
'
M
'
'
M
'
0
42
}
;
inline
constexpr
uint8_t
kEndianLittle
[
kEndianSize
]
=
{
'
I
'
'
I
'
42
0
}
;
inline
constexpr
uint16_t
kTypeUnsignedByte
=
1
;
inline
constexpr
uint16_t
kTypeAsciiString
=
2
;
inline
constexpr
uint16_t
kTypeUnsignedShort
=
3
;
inline
constexpr
uint16_t
kTypeUnsignedLong
=
4
;
inline
constexpr
uint16_t
kTypeUnsignedRational
=
5
;
inline
constexpr
uint16_t
kTypeSignedByte
=
6
;
inline
constexpr
uint16_t
kTypeUndefined
=
7
;
inline
constexpr
uint16_t
kTypeSignedShort
=
8
;
inline
constexpr
uint16_t
kTypeSignedLong
=
9
;
inline
constexpr
uint16_t
kTypeSignedRational
=
10
;
inline
constexpr
uint16_t
kTypeSingleFloat
=
11
;
inline
constexpr
uint16_t
kTypeDoubleFloat
=
12
;
inline
constexpr
size_t
kSizeEntry
=
12
;
inline
constexpr
size_t
kSizeShort
=
2
;
inline
constexpr
size_t
kSizeLong
=
4
;
class
ImageFileDirectory
{
public
:
static
bool
ParseHeader
(
const
SkData
*
data
bool
*
outLittleEndian
uint32_t
*
outIfdOffset
)
;
static
std
:
:
unique_ptr
<
ImageFileDirectory
>
MakeFromOffset
(
sk_sp
<
SkData
>
data
bool
littleEndian
uint32_t
ifdOffset
bool
allowTruncated
=
false
)
;
uint16_t
getNumEntries
(
)
const
{
return
fNumEntries
;
}
uint32_t
nextIfdOffset
(
)
const
{
return
fNextIfdOffset
;
}
uint16_t
getEntryTag
(
uint16_t
entryIndex
)
const
;
bool
getEntryUnsignedShort
(
uint16_t
entryIndex
uint32_t
count
uint16_t
*
values
)
const
{
return
getEntryValuesGeneric
(
entryIndex
kTypeUnsignedShort
count
values
)
;
}
bool
getEntryUnsignedLong
(
uint16_t
entryIndex
uint32_t
count
uint32_t
*
values
)
const
{
return
getEntryValuesGeneric
(
entryIndex
kTypeUnsignedLong
count
values
)
;
}
bool
getEntrySignedRational
(
uint16_t
entryIndex
uint32_t
count
float
*
values
)
const
{
return
getEntryValuesGeneric
(
entryIndex
kTypeSignedRational
count
values
)
;
}
bool
getEntryUnsignedRational
(
uint16_t
entryIndex
uint32_t
count
float
*
values
)
const
{
return
getEntryValuesGeneric
(
entryIndex
kTypeUnsignedRational
count
values
)
;
}
sk_sp
<
SkData
>
getEntryUndefinedData
(
uint16_t
entryIndex
)
const
;
private
:
static
bool
IsValidType
(
uint16_t
type
)
;
static
size_t
BytesForType
(
uint16_t
type
)
;
ImageFileDirectory
(
sk_sp
<
SkData
>
data
bool
littleEndian
uint32_t
offset
uint16_t
ifdNumEntries
uint32_t
ifdNextOffset
)
;
bool
getEntryRawData
(
uint16_t
entryIndex
uint16_t
*
outTag
uint16_t
*
outType
uint32_t
*
outCount
const
uint8_t
*
*
outData
size_t
*
outDataSize
)
const
;
bool
getEntryValuesGeneric
(
uint16_t
entryIndex
uint16_t
type
uint32_t
count
void
*
values
)
const
;
const
sk_sp
<
SkData
>
fData
;
const
bool
fLittleEndian
;
const
uint32_t
fOffset
;
const
uint16_t
fNumEntries
;
const
uint32_t
fNextIfdOffset
;
}
;
}
#
endif
