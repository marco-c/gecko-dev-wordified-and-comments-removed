#
include
"
SkBmpCodec
.
h
"
#
include
"
SkColorTable
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkSampler
.
h
"
#
include
"
SkTypes
.
h
"
class
SkBmpRLECodec
:
public
SkBmpCodec
{
public
:
SkBmpRLECodec
(
const
SkImageInfo
&
srcInfo
SkStream
*
stream
uint16_t
bitsPerPixel
uint32_t
numColors
uint32_t
bytesPerColor
uint32_t
offset
SkCodec
:
:
SkScanlineOrder
rowOrder
size_t
RLEBytes
)
;
int
setSampleX
(
int
)
;
protected
:
Result
onGetPixels
(
const
SkImageInfo
&
dstInfo
void
*
dst
size_t
dstRowBytes
const
Options
&
SkPMColor
*
int
*
int
*
)
override
;
SkCodec
:
:
Result
prepareToDecode
(
const
SkImageInfo
&
dstInfo
const
SkCodec
:
:
Options
&
options
SkPMColor
inputColorPtr
[
]
int
*
inputColorCount
)
override
;
private
:
bool
createColorTable
(
int
*
colorCount
)
;
bool
initializeStreamBuffer
(
)
;
size_t
checkForMoreData
(
)
;
void
setPixel
(
void
*
dst
size_t
dstRowBytes
const
SkImageInfo
&
dstInfo
uint32_t
x
uint32_t
y
uint8_t
index
)
;
void
setRGBPixel
(
void
*
dst
size_t
dstRowBytes
const
SkImageInfo
&
dstInfo
uint32_t
x
uint32_t
y
uint8_t
red
uint8_t
green
uint8_t
blue
)
;
int
decodeRows
(
const
SkImageInfo
&
dstInfo
void
*
dst
size_t
dstRowBytes
const
Options
&
opts
)
override
;
SkSampler
*
getSampler
(
bool
createIfNecessary
)
override
;
SkAutoTUnref
<
SkColorTable
>
fColorTable
;
const
uint32_t
fNumColors
;
const
uint32_t
fBytesPerColor
;
const
uint32_t
fOffset
;
SkAutoTDeleteArray
<
uint8_t
>
fStreamBuffer
;
size_t
fRLEBytes
;
uint32_t
fCurrRLEByte
;
int
fSampleX
;
SkAutoTDelete
<
SkSampler
>
fSampler
;
typedef
SkBmpCodec
INHERITED
;
}
;
