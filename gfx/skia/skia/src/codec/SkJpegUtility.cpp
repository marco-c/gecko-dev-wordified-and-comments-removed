#
include
"
SkJpegUtility
.
h
"
#
include
"
SkCodecPriv
.
h
"
static
void
sk_init_source
(
j_decompress_ptr
dinfo
)
{
skjpeg_source_mgr
*
src
=
(
skjpeg_source_mgr
*
)
dinfo
-
>
src
;
src
-
>
next_input_byte
=
(
const
JOCTET
*
)
src
-
>
fBuffer
;
src
-
>
bytes_in_buffer
=
0
;
}
static
boolean
sk_fill_input_buffer
(
j_decompress_ptr
dinfo
)
{
skjpeg_source_mgr
*
src
=
(
skjpeg_source_mgr
*
)
dinfo
-
>
src
;
size_t
bytes
=
src
-
>
fStream
-
>
read
(
src
-
>
fBuffer
skjpeg_source_mgr
:
:
kBufferSize
)
;
if
(
bytes
=
=
0
)
{
return
false
;
}
src
-
>
next_input_byte
=
(
const
JOCTET
*
)
src
-
>
fBuffer
;
src
-
>
bytes_in_buffer
=
bytes
;
return
true
;
}
static
void
sk_skip_input_data
(
j_decompress_ptr
dinfo
long
numBytes
)
{
skjpeg_source_mgr
*
src
=
(
skjpeg_source_mgr
*
)
dinfo
-
>
src
;
size_t
bytes
=
(
size_t
)
numBytes
;
if
(
bytes
>
src
-
>
bytes_in_buffer
)
{
size_t
bytesToSkip
=
bytes
-
src
-
>
bytes_in_buffer
;
if
(
bytesToSkip
!
=
src
-
>
fStream
-
>
skip
(
bytesToSkip
)
)
{
SkCodecPrintf
(
"
Failure
to
skip
.
\
n
"
)
;
dinfo
-
>
err
-
>
error_exit
(
(
j_common_ptr
)
dinfo
)
;
return
;
}
src
-
>
next_input_byte
=
(
const
JOCTET
*
)
src
-
>
fBuffer
;
src
-
>
bytes_in_buffer
=
0
;
}
else
{
src
-
>
next_input_byte
+
=
numBytes
;
src
-
>
bytes_in_buffer
-
=
numBytes
;
}
}
static
void
sk_term_source
(
j_decompress_ptr
dinfo
)
{
}
skjpeg_source_mgr
:
:
skjpeg_source_mgr
(
SkStream
*
stream
)
:
fStream
(
stream
)
{
init_source
=
sk_init_source
;
fill_input_buffer
=
sk_fill_input_buffer
;
skip_input_data
=
sk_skip_input_data
;
resync_to_restart
=
jpeg_resync_to_restart
;
term_source
=
sk_term_source
;
}
void
skjpeg_err_exit
(
j_common_ptr
dinfo
)
{
skjpeg_error_mgr
*
error
=
(
skjpeg_error_mgr
*
)
dinfo
-
>
err
;
(
*
error
-
>
output_message
)
(
dinfo
)
;
longjmp
(
error
-
>
fJmpBuf
1
)
;
}
