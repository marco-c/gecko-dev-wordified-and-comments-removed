#
include
"
include
/
core
/
SkTypes
.
h
"
#
if
defined
(
SK_BUILD_FOR_MAC
)
|
|
defined
(
SK_BUILD_FOR_IOS
)
#
include
"
src
/
utils
/
mac
/
SkCTFontCreateExactCopy
.
h
"
#
include
"
src
/
ports
/
SkTypeface_mac_ct
.
h
"
#
include
"
src
/
utils
/
mac
/
SkUniqueCFRef
.
h
"
#
if
defined
(
MOZ_SKIA
)
&
&
defined
(
XP_MACOSX
)
#
include
"
nsCocoaFeatures
.
h
"
#
endif
static
void
add_opsz_attr
(
CFMutableDictionaryRef
attr
double
opsz
)
{
SkUniqueCFRef
<
CFNumberRef
>
opszValueNumber
(
CFNumberCreate
(
kCFAllocatorDefault
kCFNumberDoubleType
&
opsz
)
)
;
CFStringRef
SkCTFontOpticalSizeAttribute
=
CFSTR
(
"
NSCTFontOpticalSizeAttribute
"
)
;
CFDictionarySetValue
(
attr
SkCTFontOpticalSizeAttribute
opszValueNumber
.
get
(
)
)
;
}
static
void
add_notrak_attr
(
CFMutableDictionaryRef
attr
)
{
int
zero
=
0
;
SkUniqueCFRef
<
CFNumberRef
>
unscaledTrackingNumber
(
CFNumberCreate
(
kCFAllocatorDefault
kCFNumberIntType
&
zero
)
)
;
CFStringRef
SkCTFontUnscaledTrackingAttribute
=
CFSTR
(
"
NSCTFontUnscaledTrackingAttribute
"
)
;
CFDictionarySetValue
(
attr
SkCTFontUnscaledTrackingAttribute
unscaledTrackingNumber
.
get
(
)
)
;
}
SkUniqueCFRef
<
CTFontRef
>
SkCTFontCreateExactCopy
(
CTFontRef
baseFont
CGFloat
textSize
OpszVariation
opszVariation
)
{
SkUniqueCFRef
<
CFMutableDictionaryRef
>
attr
(
CFDictionaryCreateMutable
(
kCFAllocatorDefault
0
&
kCFTypeDictionaryKeyCallBacks
&
kCFTypeDictionaryValueCallBacks
)
)
;
if
(
opszVariation
.
isSet
)
{
add_opsz_attr
(
attr
.
get
(
)
opszVariation
.
value
)
;
#
ifdef
MOZ_SKIA
}
#
else
}
else
{
CFStringRef
SkCTFontOpticalSizeAttribute
=
CFSTR
(
"
NSCTFontOpticalSizeAttribute
"
)
;
SkUniqueCFRef
<
CFTypeRef
>
opsz
(
CTFontCopyAttribute
(
baseFont
SkCTFontOpticalSizeAttribute
)
)
;
double
opsz_val
;
if
(
!
opsz
|
|
CFGetTypeID
(
opsz
.
get
(
)
)
!
=
CFNumberGetTypeID
(
)
|
|
!
CFNumberGetValue
(
static_cast
<
CFNumberRef
>
(
opsz
.
get
(
)
)
kCFNumberDoubleType
&
opsz_val
)
|
|
opsz_val
<
=
0
)
{
opsz_val
=
CTFontGetSize
(
baseFont
)
;
}
add_opsz_attr
(
attr
.
get
(
)
opsz_val
)
;
}
add_notrak_attr
(
attr
.
get
(
)
)
;
#
endif
auto
IsInstalledFont
=
[
]
(
CTFontRef
aFont
)
{
CTFontDescriptorRef
desc
=
CTFontCopyFontDescriptor
(
aFont
)
;
CFTypeRef
attr
=
CTFontDescriptorCopyAttribute
(
desc
kCTFontURLAttribute
)
;
CFRelease
(
desc
)
;
bool
result
=
false
;
if
(
attr
)
{
result
=
true
;
CFRelease
(
attr
)
;
}
return
result
;
}
;
SkUniqueCFRef
<
CGFontRef
>
baseCGFont
;
CFDictionaryRef
variations
=
nullptr
;
if
(
IsInstalledFont
(
baseFont
)
)
{
baseCGFont
.
reset
(
CTFontCopyGraphicsFont
(
baseFont
nullptr
)
)
;
variations
=
CGFontCopyVariations
(
baseCGFont
.
get
(
)
)
;
if
(
variations
)
{
CFDictionarySetValue
(
attr
.
get
(
)
kCTFontVariationAttribute
variations
)
;
}
}
SkUniqueCFRef
<
CTFontDescriptorRef
>
desc
(
CTFontDescriptorCreateWithAttributes
(
attr
.
get
(
)
)
)
;
if
(
baseCGFont
.
get
(
)
)
{
auto
ctFont
=
SkUniqueCFRef
<
CTFontRef
>
(
CTFontCreateWithGraphicsFont
(
baseCGFont
.
get
(
)
textSize
nullptr
desc
.
get
(
)
)
)
;
if
(
variations
)
{
#
if
defined
(
MOZ_SKIA
)
&
&
defined
(
XP_MACOSX
)
if
(
nsCocoaFeatures
:
:
OnVenturaOrLater
(
)
)
{
SkUniqueCFRef
<
CFDictionaryRef
>
attrs
(
CFDictionaryCreate
(
nullptr
(
const
void
*
*
)
&
kCTFontVariationAttribute
(
const
void
*
*
)
&
variations
1
&
kCFTypeDictionaryKeyCallBacks
&
kCFTypeDictionaryValueCallBacks
)
)
;
SkUniqueCFRef
<
CTFontDescriptorRef
>
desc
(
CTFontCopyFontDescriptor
(
ctFont
.
get
(
)
)
)
;
desc
.
reset
(
CTFontDescriptorCreateCopyWithAttributes
(
desc
.
get
(
)
attrs
.
get
(
)
)
)
;
ctFont
.
reset
(
CTFontCreateCopyWithAttributes
(
ctFont
.
get
(
)
0
.
0
nullptr
desc
.
get
(
)
)
)
;
}
#
endif
CFRelease
(
variations
)
;
}
return
ctFont
;
}
return
SkUniqueCFRef
<
CTFontRef
>
(
CTFontCreateCopyWithAttributes
(
baseFont
textSize
nullptr
desc
.
get
(
)
)
)
;
}
#
endif
