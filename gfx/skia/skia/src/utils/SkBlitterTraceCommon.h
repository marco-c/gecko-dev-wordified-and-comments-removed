#
ifndef
SkBlitterTraceCommon_DEFINED
#
define
SkBlitterTraceCommon_DEFINED
#
include
<
inttypes
.
h
>
#
include
<
unordered_map
>
#
define
SK_BLITTER_TRACE_NO_CODE
do
{
}
while
(
0
)
#
ifdef
SKIA_COMPARE_VM_VS_RP
#
include
"
src
/
utils
/
SkCycles
.
h
"
class
SkBlitterTrace
{
public
:
SkBlitterTrace
(
const
char
*
header
bool
traceSteps
=
false
)
:
fHeader
(
header
)
fTraceSteps
(
traceSteps
)
{
}
SkBlitterTrace
&
operator
=
(
const
SkBlitterTrace
&
)
=
default
;
void
addTrace
(
const
char
*
name
uint64_t
cycles
uint64_t
scanLines
uint64_t
pixels
)
{
fCycles
+
=
cycles
;
fScanlines
+
=
scanLines
;
fPixels
+
=
pixels
;
if
(
fTraceSteps
)
{
printIncrements
(
name
cycles
scanLines
pixels
)
;
}
}
void
reset
(
)
{
fCycles
=
0ul
;
fScanlines
=
0ul
;
fPixels
=
0ul
;
}
void
printIncrements
(
const
char
*
name
uint64_t
cycles
uint64_t
scanLines
uint64_t
pixels
)
const
{
SkDebugf
(
"
%
s
%
s
:
cycles
=
%
"
PRIu64
"
+
%
"
PRIu64
"
scanlines
=
%
"
PRIu64
"
+
%
"
PRIu64
"
pixels
=
%
"
PRIu64
fHeader
name
fCycles
-
cycles
cycles
fScanlines
-
scanLines
scanLines
fPixels
)
;
SkDebugf
(
"
\
n
"
)
;
}
void
printCounts
(
const
char
*
name
)
const
{
SkDebugf
(
"
%
s
cycles
:
%
"
PRIu64
"
"
"
scanlines
:
%
"
PRIu64
"
pixels
:
%
"
PRIu64
fHeader
fCycles
fScanlines
fPixels
)
;
SkDebugf
(
"
"
)
;
}
uint64_t
getCycles
(
)
const
{
return
fCycles
;
}
uint64_t
getScanlines
(
)
const
{
return
fScanlines
;
}
uint64_t
getPixels
(
)
const
{
return
fPixels
;
}
class
Step
{
public
:
Step
(
SkBlitterTrace
*
trace
const
char
*
name
uint64_t
scanlines
uint64_t
pixels
)
:
fTrace
(
trace
)
fName
(
name
)
fScanlines
(
scanlines
)
fPixels
(
pixels
)
{
fStartTime
=
SkCycles
:
:
Now
(
)
;
}
void
add
(
uint64_t
scanlines
uint64_t
pixels
)
{
fScanlines
+
=
scanlines
;
fPixels
+
=
pixels
;
}
~
Step
(
)
{
if
(
fTrace
=
=
nullptr
)
{
return
;
}
auto
endTime
=
SkCycles
:
:
Now
(
)
-
fStartTime
;
fTrace
-
>
addTrace
(
fName
endTime
fScanlines
fPixels
)
;
}
private
:
SkBlitterTrace
*
fTrace
=
nullptr
;
const
char
*
fName
=
"
"
;
uint64_t
fStartTime
=
0ul
;
uint64_t
fScanlines
=
0ul
;
uint64_t
fPixels
=
0ul
;
}
;
private
:
const
char
*
fHeader
=
"
"
;
bool
fTraceSteps
=
false
;
uint64_t
fCycles
=
0ul
;
uint64_t
fScanlines
=
0ul
;
uint64_t
fPixels
=
0ul
;
}
;
#
define
SK_BLITTER_TRACE_INIT
\
extern
SkBlitterTrace
gSkVMBlitterTrace
;
\
extern
SkBlitterTrace
gSkRPBlitterTrace
;
\
\
static
SkBlitterTrace
gSkVMBlitterTraceCapture
(
"
VM
"
false
)
;
\
static
SkBlitterTrace
gSkRPBlitterTraceCapture
(
"
RP
"
false
)
;
#
define
SK_BLITTER_TRACE_LOCAL_SETUP
\
gSkVMBlitterTrace
.
reset
(
)
;
\
gSkRPBlitterTrace
.
reset
(
)
#
define
SK_BLITTER_TRACE_LOCAL_TEARDOWN
\
gSkVMBlitterTraceCapture
=
gSkVMBlitterTrace
;
\
gSkRPBlitterTraceCapture
=
gSkRPBlitterTrace
#
define
SK_BLITTER_TRACE_PRINT
\
gSkVMBlitterTraceCapture
.
printCounts
(
"
Total
"
)
;
\
SkDebugf
(
"
0
"
)
;
\
gSkRPBlitterTraceCapture
.
printCounts
(
"
Total
"
)
#
else
#
define
SK_BLITTER_TRACE_INIT
#
define
SK_BLITTER_TRACE_LOCAL_SETUP
SK_BLITTER_TRACE_NO_CODE
#
define
SK_BLITTER_TRACE_LOCAL_TEARDOWN
SK_BLITTER_TRACE_NO_CODE
#
define
SK_BLITTER_TRACE_PRINT
SK_BLITTER_TRACE_NO_CODE
#
endif
#
endif
