#
ifndef
SkDWriteFontFileStream_DEFINED
#
define
SkDWriteFontFileStream_DEFINED
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
core
/
SkStream
.
h
"
#
include
"
include
/
private
/
base
/
SkMutex
.
h
"
#
include
"
src
/
utils
/
win
/
SkObjBase
.
h
"
#
include
"
src
/
utils
/
win
/
SkTScopedComPtr
.
h
"
#
include
<
dwrite
.
h
>
class
SkDWriteFontFileStream
:
public
SkStreamMemory
{
public
:
explicit
SkDWriteFontFileStream
(
IDWriteFontFileStream
*
fontFileStream
)
;
~
SkDWriteFontFileStream
(
)
override
;
size_t
read
(
void
*
buffer
size_t
size
)
override
;
bool
isAtEnd
(
)
const
override
;
bool
rewind
(
)
override
;
size_t
getPosition
(
)
const
override
;
bool
seek
(
size_t
position
)
override
;
bool
move
(
long
offset
)
override
;
size_t
getLength
(
)
const
override
;
const
void
*
getMemoryBase
(
)
override
;
std
:
:
unique_ptr
<
SkDWriteFontFileStream
>
duplicate
(
)
const
{
return
std
:
:
unique_ptr
<
SkDWriteFontFileStream
>
(
this
-
>
onDuplicate
(
)
)
;
}
std
:
:
unique_ptr
<
SkDWriteFontFileStream
>
fork
(
)
const
{
return
std
:
:
unique_ptr
<
SkDWriteFontFileStream
>
(
this
-
>
onFork
(
)
)
;
}
private
:
SkDWriteFontFileStream
*
onDuplicate
(
)
const
override
;
SkDWriteFontFileStream
*
onFork
(
)
const
override
;
SkTScopedComPtr
<
IDWriteFontFileStream
>
fFontFileStream
;
size_t
fPos
;
const
void
*
fLockedMemory
;
void
*
fFragmentLock
;
}
;
class
SkDWriteFontFileStreamWrapper
:
public
IDWriteFontFileStream
{
public
:
SK_STDMETHODIMP
QueryInterface
(
REFIID
iid
void
*
*
ppvObject
)
override
;
SK_STDMETHODIMP_
(
ULONG
)
AddRef
(
)
override
;
SK_STDMETHODIMP_
(
ULONG
)
Release
(
)
override
;
SK_STDMETHODIMP
ReadFileFragment
(
void
const
*
*
fragmentStart
UINT64
fileOffset
UINT64
fragmentSize
void
*
*
fragmentContext
)
override
;
SK_STDMETHODIMP_
(
void
)
ReleaseFileFragment
(
void
*
fragmentContext
)
override
;
SK_STDMETHODIMP
GetFileSize
(
UINT64
*
fileSize
)
override
;
SK_STDMETHODIMP
GetLastWriteTime
(
UINT64
*
lastWriteTime
)
override
;
static
HRESULT
Create
(
SkStreamAsset
*
stream
SkDWriteFontFileStreamWrapper
*
*
streamFontFileStream
)
;
private
:
explicit
SkDWriteFontFileStreamWrapper
(
SkStreamAsset
*
stream
)
;
virtual
~
SkDWriteFontFileStreamWrapper
(
)
{
}
ULONG
fRefCount
;
std
:
:
unique_ptr
<
SkStreamAsset
>
fStream
;
SkMutex
fStreamMutex
;
}
;
#
endif
