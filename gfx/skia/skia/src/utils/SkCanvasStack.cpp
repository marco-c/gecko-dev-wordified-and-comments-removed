#
include
"
src
/
utils
/
SkCanvasStack
.
h
"
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
include
/
core
/
SkScalar
.
h
"
#
include
"
include
/
core
/
SkShader
.
h
"
#
include
"
include
/
private
/
base
/
SkTDArray
.
h
"
#
include
<
utility
>
class
SkPath
;
class
SkRRect
;
SkCanvasStack
:
:
SkCanvasStack
(
int
width
int
height
)
:
INHERITED
(
width
height
)
{
}
SkCanvasStack
:
:
~
SkCanvasStack
(
)
{
this
-
>
removeAll
(
)
;
}
void
SkCanvasStack
:
:
pushCanvas
(
std
:
:
unique_ptr
<
SkCanvas
>
canvas
const
SkIPoint
&
origin
)
{
if
(
canvas
)
{
const
SkIRect
canvasBounds
=
SkIRect
:
:
MakeSize
(
canvas
-
>
getBaseLayerSize
(
)
)
;
this
-
>
INHERITED
:
:
addCanvas
(
canvas
.
get
(
)
)
;
CanvasData
*
data
=
&
fCanvasData
.
push_back
(
)
;
data
-
>
origin
=
origin
;
data
-
>
requiredClip
.
setRect
(
canvasBounds
)
;
data
-
>
ownedCanvas
=
std
:
:
move
(
canvas
)
;
for
(
int
i
=
fList
.
size
(
)
-
1
;
i
>
0
;
-
-
i
)
{
SkIRect
localBounds
=
canvasBounds
;
localBounds
.
offset
(
origin
-
fCanvasData
[
i
-
1
]
.
origin
)
;
fCanvasData
[
i
-
1
]
.
requiredClip
.
op
(
localBounds
SkRegion
:
:
kDifference_Op
)
;
fList
[
i
-
1
]
-
>
clipRegion
(
fCanvasData
[
i
-
1
]
.
requiredClip
)
;
}
}
SkASSERT
(
fList
.
size
(
)
=
=
fCanvasData
.
size
(
)
)
;
}
void
SkCanvasStack
:
:
removeAll
(
)
{
this
-
>
INHERITED
:
:
removeAll
(
)
;
fCanvasData
.
clear
(
)
;
}
void
SkCanvasStack
:
:
clipToZOrderedBounds
(
)
{
SkASSERT
(
fList
.
size
(
)
=
=
fCanvasData
.
size
(
)
)
;
for
(
int
i
=
0
;
i
<
fList
.
size
(
)
;
+
+
i
)
{
fList
[
i
]
-
>
clipRegion
(
fCanvasData
[
i
]
.
requiredClip
)
;
}
}
void
SkCanvasStack
:
:
didSetM44
(
const
SkM44
&
mx
)
{
SkASSERT
(
fList
.
size
(
)
=
=
fCanvasData
.
size
(
)
)
;
for
(
int
i
=
0
;
i
<
fList
.
size
(
)
;
+
+
i
)
{
fList
[
i
]
-
>
setMatrix
(
SkM44
:
:
Translate
(
SkIntToScalar
(
-
fCanvasData
[
i
]
.
origin
.
x
(
)
)
SkIntToScalar
(
-
fCanvasData
[
i
]
.
origin
.
y
(
)
)
)
*
mx
)
;
}
this
-
>
SkCanvas
:
:
didSetM44
(
mx
)
;
}
void
SkCanvasStack
:
:
onClipRect
(
const
SkRect
&
r
SkClipOp
op
ClipEdgeStyle
edgeStyle
)
{
this
-
>
INHERITED
:
:
onClipRect
(
r
op
edgeStyle
)
;
this
-
>
clipToZOrderedBounds
(
)
;
}
void
SkCanvasStack
:
:
onClipRRect
(
const
SkRRect
&
rr
SkClipOp
op
ClipEdgeStyle
edgeStyle
)
{
this
-
>
INHERITED
:
:
onClipRRect
(
rr
op
edgeStyle
)
;
this
-
>
clipToZOrderedBounds
(
)
;
}
void
SkCanvasStack
:
:
onClipPath
(
const
SkPath
&
p
SkClipOp
op
ClipEdgeStyle
edgeStyle
)
{
this
-
>
INHERITED
:
:
onClipPath
(
p
op
edgeStyle
)
;
this
-
>
clipToZOrderedBounds
(
)
;
}
void
SkCanvasStack
:
:
onClipShader
(
sk_sp
<
SkShader
>
cs
SkClipOp
op
)
{
this
-
>
INHERITED
:
:
onClipShader
(
std
:
:
move
(
cs
)
op
)
;
}
void
SkCanvasStack
:
:
onClipRegion
(
const
SkRegion
&
deviceRgn
SkClipOp
op
)
{
SkASSERT
(
fList
.
size
(
)
=
=
fCanvasData
.
size
(
)
)
;
for
(
int
i
=
0
;
i
<
fList
.
size
(
)
;
+
+
i
)
{
SkRegion
tempRegion
;
deviceRgn
.
translate
(
-
fCanvasData
[
i
]
.
origin
.
x
(
)
-
fCanvasData
[
i
]
.
origin
.
y
(
)
&
tempRegion
)
;
tempRegion
.
op
(
fCanvasData
[
i
]
.
requiredClip
SkRegion
:
:
kIntersect_Op
)
;
fList
[
i
]
-
>
clipRegion
(
tempRegion
op
)
;
}
this
-
>
SkCanvas
:
:
onClipRegion
(
deviceRgn
op
)
;
}
