#
ifndef
SKDEBUGCANVAS_H_
#
define
SKDEBUGCANVAS_H_
#
include
"
SkCanvas
.
h
"
#
include
"
SkDrawCommand
.
h
"
#
include
"
SkPath
.
h
"
#
include
"
SkPathOps
.
h
"
#
include
"
SkPicture
.
h
"
#
include
"
SkString
.
h
"
#
include
"
SkTArray
.
h
"
class
SkNWayCanvas
;
class
SK_API
SkDebugCanvas
:
public
SkCanvas
{
public
:
SkDebugCanvas
(
int
width
int
height
)
;
virtual
~
SkDebugCanvas
(
)
;
void
toggleFilter
(
bool
toggle
)
{
fFilter
=
toggle
;
}
void
setMegaVizMode
(
bool
megaVizMode
)
{
fMegaVizMode
=
megaVizMode
;
}
bool
getMegaVizMode
(
)
const
{
return
fMegaVizMode
;
}
void
setOverdrawViz
(
bool
overdrawViz
)
;
bool
getOverdrawViz
(
)
const
{
return
fOverdrawViz
;
}
bool
getAllowSimplifyClip
(
)
const
{
return
fAllowSimplifyClip
;
}
void
setPicture
(
SkPicture
*
picture
)
{
fPicture
=
picture
;
}
void
overrideTexFiltering
(
bool
overrideTexFiltering
SkFilterQuality
)
;
void
draw
(
SkCanvas
*
canvas
)
;
void
drawTo
(
SkCanvas
*
canvas
int
index
)
;
const
SkMatrix
&
getCurrentMatrix
(
)
{
return
fMatrix
;
}
const
SkIRect
&
getCurrentClip
(
)
{
return
fClip
;
}
int
getCommandAtPoint
(
int
x
int
y
int
index
)
;
void
deleteDrawCommandAt
(
int
index
)
;
SkDrawCommand
*
getDrawCommandAt
(
int
index
)
;
void
setDrawCommandAt
(
int
index
SkDrawCommand
*
command
)
;
const
SkTDArray
<
SkString
*
>
*
getCommandInfo
(
int
index
)
const
;
bool
getDrawCommandVisibilityAt
(
int
index
)
;
SK_ATTR_DEPRECATED
(
"
please
use
getDrawCommandAt
and
getSize
instead
"
)
const
SkTDArray
<
SkDrawCommand
*
>
&
getDrawCommands
(
)
const
;
SkTDArray
<
SkDrawCommand
*
>
&
getDrawCommands
(
)
;
int
getSize
(
)
const
{
return
fCommandVector
.
count
(
)
;
}
void
toggleCommand
(
int
index
bool
toggle
)
;
void
setUserMatrix
(
SkMatrix
matrix
)
{
fUserMatrix
=
matrix
;
}
SkString
clipStackData
(
)
const
{
return
fClipStackData
;
}
static
const
int
kVizImageHeight
=
256
;
static
const
int
kVizImageWidth
=
256
;
bool
isClipEmpty
(
)
const
override
{
return
false
;
}
bool
isClipRect
(
)
const
override
{
return
true
;
}
bool
getClipBounds
(
SkRect
*
bounds
)
const
override
{
if
(
bounds
)
{
bounds
-
>
setXYWH
(
0
0
SkIntToScalar
(
this
-
>
imageInfo
(
)
.
width
(
)
)
SkIntToScalar
(
this
-
>
imageInfo
(
)
.
height
(
)
)
)
;
}
return
true
;
}
bool
getClipDeviceBounds
(
SkIRect
*
bounds
)
const
override
{
if
(
bounds
)
{
bounds
-
>
setLargest
(
)
;
}
return
true
;
}
protected
:
void
willSave
(
)
override
;
SaveLayerStrategy
willSaveLayer
(
const
SkRect
*
const
SkPaint
*
SaveFlags
)
override
;
void
willRestore
(
)
override
;
void
didConcat
(
const
SkMatrix
&
)
override
;
void
didSetMatrix
(
const
SkMatrix
&
)
override
;
void
onDrawDRRect
(
const
SkRRect
&
const
SkRRect
&
const
SkPaint
&
)
override
;
void
onDrawText
(
const
void
*
text
size_t
byteLength
SkScalar
x
SkScalar
y
const
SkPaint
&
)
override
;
void
onDrawPosText
(
const
void
*
text
size_t
byteLength
const
SkPoint
pos
[
]
const
SkPaint
&
)
override
;
void
onDrawPosTextH
(
const
void
*
text
size_t
byteLength
const
SkScalar
xpos
[
]
SkScalar
constY
const
SkPaint
&
)
override
;
void
onDrawTextOnPath
(
const
void
*
text
size_t
byteLength
const
SkPath
&
path
const
SkMatrix
*
matrix
const
SkPaint
&
)
override
;
void
onDrawTextBlob
(
const
SkTextBlob
*
blob
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
override
;
void
onDrawPatch
(
const
SkPoint
cubics
[
12
]
const
SkColor
colors
[
4
]
const
SkPoint
texCoords
[
4
]
SkXfermode
*
xmode
const
SkPaint
&
paint
)
override
;
void
onDrawPaint
(
const
SkPaint
&
)
override
;
void
onDrawRect
(
const
SkRect
&
const
SkPaint
&
)
override
;
void
onDrawOval
(
const
SkRect
&
const
SkPaint
&
)
override
;
void
onDrawRRect
(
const
SkRRect
&
const
SkPaint
&
)
override
;
void
onDrawPoints
(
PointMode
size_t
count
const
SkPoint
pts
[
]
const
SkPaint
&
)
override
;
void
onDrawVertices
(
VertexMode
vmode
int
vertexCount
const
SkPoint
vertices
[
]
const
SkPoint
texs
[
]
const
SkColor
colors
[
]
SkXfermode
*
xmode
const
uint16_t
indices
[
]
int
indexCount
const
SkPaint
&
)
override
;
void
onDrawPath
(
const
SkPath
&
const
SkPaint
&
)
override
;
void
onDrawBitmap
(
const
SkBitmap
&
SkScalar
left
SkScalar
top
const
SkPaint
*
)
override
;
void
onDrawBitmapRect
(
const
SkBitmap
&
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
*
SrcRectConstraint
)
override
;
void
onDrawImage
(
const
SkImage
*
SkScalar
left
SkScalar
top
const
SkPaint
*
)
override
;
void
onDrawImageRect
(
const
SkImage
*
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
*
SrcRectConstraint
)
override
;
void
onDrawBitmapNine
(
const
SkBitmap
&
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
*
)
override
;
void
onDrawSprite
(
const
SkBitmap
&
int
left
int
top
const
SkPaint
*
)
override
;
void
onClipRect
(
const
SkRect
&
SkRegion
:
:
Op
ClipEdgeStyle
)
override
;
void
onClipRRect
(
const
SkRRect
&
SkRegion
:
:
Op
ClipEdgeStyle
)
override
;
void
onClipPath
(
const
SkPath
&
SkRegion
:
:
Op
ClipEdgeStyle
)
override
;
void
onClipRegion
(
const
SkRegion
&
region
SkRegion
:
:
Op
)
override
;
void
onDrawPicture
(
const
SkPicture
*
const
SkMatrix
*
const
SkPaint
*
)
override
;
void
markActiveCommands
(
int
index
)
;
private
:
SkTDArray
<
SkDrawCommand
*
>
fCommandVector
;
SkPicture
*
fPicture
;
bool
fFilter
;
bool
fMegaVizMode
;
SkMatrix
fUserMatrix
;
SkMatrix
fMatrix
;
SkIRect
fClip
;
SkString
fClipStackData
;
bool
fCalledAddStackData
;
SkPath
fSaveDevPath
;
bool
fOverdrawViz
;
bool
fOverrideFilterQuality
;
SkFilterQuality
fFilterQuality
;
SkAutoTUnref
<
SkNWayCanvas
>
fPaintFilterCanvas
;
SkTDArray
<
SkDrawCommand
*
>
fActiveLayers
;
void
addDrawCommand
(
SkDrawCommand
*
command
)
;
void
applyUserTransform
(
SkCanvas
*
canvas
)
;
void
resetClipStackData
(
)
{
fClipStackData
.
reset
(
)
;
fCalledAddStackData
=
false
;
}
void
addClipStackData
(
const
SkPath
&
devPath
const
SkPath
&
operand
SkRegion
:
:
Op
elementOp
)
;
void
addPathData
(
const
SkPath
&
path
const
char
*
pathName
)
;
bool
lastClipStackData
(
const
SkPath
&
devPath
)
;
void
outputConicPoints
(
const
SkPoint
*
pts
SkScalar
weight
)
;
void
outputPoints
(
const
SkPoint
*
pts
int
count
)
;
void
outputPointsCommon
(
const
SkPoint
*
pts
int
count
)
;
void
outputScalar
(
SkScalar
num
)
;
void
updatePaintFilterCanvas
(
)
;
typedef
SkCanvas
INHERITED
;
}
;
#
endif
