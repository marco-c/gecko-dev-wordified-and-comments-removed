#
include
"
include
/
core
/
SkPaint
.
h
"
#
include
"
src
/
core
/
SkBlenderBase
.
h
"
#
include
"
src
/
core
/
SkColorFilterBase
.
h
"
#
include
"
src
/
core
/
SkColorSpacePriv
.
h
"
#
include
"
src
/
core
/
SkPaintPriv
.
h
"
#
include
"
src
/
core
/
SkPicturePriv
.
h
"
#
include
"
src
/
core
/
SkReadBuffer
.
h
"
#
include
"
src
/
core
/
SkSafeRange
.
h
"
#
include
"
src
/
core
/
SkWriteBuffer
.
h
"
#
include
"
src
/
core
/
SkXfermodePriv
.
h
"
#
include
"
src
/
shaders
/
SkColorFilterShader
.
h
"
#
include
"
src
/
shaders
/
SkShaderBase
.
h
"
static
bool
changes_alpha
(
const
SkPaint
&
paint
)
{
SkColorFilter
*
cf
=
paint
.
getColorFilter
(
)
;
return
cf
&
&
!
as_CFB
(
cf
)
-
>
isAlphaUnchanged
(
)
;
}
bool
SkPaintPriv
:
:
Overwrites
(
const
SkPaint
*
paint
ShaderOverrideOpacity
overrideOpacity
)
{
if
(
!
paint
)
{
return
overrideOpacity
!
=
kNotOpaque_ShaderOverrideOpacity
;
}
SkXfermode
:
:
SrcColorOpacity
opacityType
=
SkXfermode
:
:
kUnknown_SrcColorOpacity
;
if
(
!
changes_alpha
(
*
paint
)
)
{
const
unsigned
paintAlpha
=
paint
-
>
getAlpha
(
)
;
if
(
0xff
=
=
paintAlpha
&
&
overrideOpacity
!
=
kNotOpaque_ShaderOverrideOpacity
&
&
(
!
paint
-
>
getShader
(
)
|
|
paint
-
>
getShader
(
)
-
>
isOpaque
(
)
)
)
{
opacityType
=
SkXfermode
:
:
kOpaque_SrcColorOpacity
;
}
else
if
(
0
=
=
paintAlpha
)
{
if
(
overrideOpacity
=
=
kNone_ShaderOverrideOpacity
&
&
!
paint
-
>
getShader
(
)
)
{
opacityType
=
SkXfermode
:
:
kTransparentBlack_SrcColorOpacity
;
}
else
{
opacityType
=
SkXfermode
:
:
kTransparentAlpha_SrcColorOpacity
;
}
}
}
const
auto
bm
=
paint
-
>
asBlendMode
(
)
;
if
(
!
bm
)
{
return
false
;
}
return
SkXfermode
:
:
IsOpaque
(
bm
.
value
(
)
opacityType
)
;
}
bool
SkPaintPriv
:
:
ShouldDither
(
const
SkPaint
&
p
SkColorType
dstCT
)
{
if
(
!
p
.
isDither
(
)
)
{
return
false
;
}
if
(
dstCT
=
=
kUnknown_SkColorType
)
{
return
false
;
}
if
(
dstCT
=
=
kRGB_565_SkColorType
|
|
dstCT
=
=
kARGB_4444_SkColorType
)
{
return
true
;
}
return
p
.
getImageFilter
(
)
|
|
p
.
getMaskFilter
(
)
|
|
(
p
.
getShader
(
)
&
&
!
as_SB
(
p
.
getShader
(
)
)
-
>
isConstant
(
)
)
;
}
static
bool
just_a_color
(
const
SkPaint
&
paint
SkColor
*
color
)
{
SkColor
c
=
paint
.
getColor
(
)
;
const
auto
*
shader
=
as_SB
(
paint
.
getShader
(
)
)
;
if
(
shader
&
&
!
shader
-
>
asLuminanceColor
(
&
c
)
)
{
return
false
;
}
if
(
paint
.
getColorFilter
(
)
)
{
c
=
paint
.
getColorFilter
(
)
-
>
filterColor
(
c
)
;
}
if
(
color
)
{
*
color
=
c
;
}
return
true
;
}
SkColor
SkPaintPriv
:
:
ComputeLuminanceColor
(
const
SkPaint
&
paint
)
{
SkColor
c
;
if
(
!
just_a_color
(
paint
&
c
)
)
{
c
=
SkColorSetRGB
(
0x7F
0x80
0x7F
)
;
}
return
c
;
}
void
SkPaintPriv
:
:
RemoveColorFilter
(
SkPaint
*
p
SkColorSpace
*
dstCS
)
{
if
(
SkColorFilter
*
filter
=
p
-
>
getColorFilter
(
)
)
{
if
(
SkShader
*
shader
=
p
-
>
getShader
(
)
)
{
p
-
>
setShader
(
sk_make_sp
<
SkColorFilterShader
>
(
sk_ref_sp
(
shader
)
p
-
>
getAlphaf
(
)
sk_ref_sp
(
filter
)
)
)
;
p
-
>
setAlphaf
(
1
.
0f
)
;
}
else
{
p
-
>
setColor
(
filter
-
>
filterColor4f
(
p
-
>
getColor4f
(
)
sk_srgb_singleton
(
)
dstCS
)
dstCS
)
;
}
p
-
>
setColorFilter
(
nullptr
)
;
}
}
#
ifdef
SK_DEBUG
static
void
ASSERT_FITS_IN
(
uint32_t
value
int
bitCount
)
{
SkASSERT
(
bitCount
>
0
&
&
bitCount
<
=
32
)
;
uint32_t
mask
=
~
0U
;
mask
>
>
=
(
32
-
bitCount
)
;
SkASSERT
(
0
=
=
(
value
&
~
mask
)
)
;
}
#
else
#
define
ASSERT_FITS_IN
(
value
bitcount
)
#
endif
enum
FlatFlags
{
kHasTypeface_FlatFlag
=
0x1
kHasEffects_FlatFlag
=
0x2
kFlatFlagMask
=
0x3
}
;
template
<
typename
T
>
uint32_t
shift_bits
(
T
value
unsigned
shift
unsigned
bits
)
{
SkASSERT
(
shift
+
bits
<
=
32
)
;
uint32_t
v
=
static_cast
<
uint32_t
>
(
value
)
;
ASSERT_FITS_IN
(
v
bits
)
;
return
v
<
<
shift
;
}
constexpr
uint8_t
CUSTOM_BLEND_MODE_SENTINEL
=
0xFF
;
static
uint32_t
pack_v68
(
const
SkPaint
&
paint
unsigned
flatFlags
)
{
uint32_t
packed
=
0
;
const
auto
bm
=
paint
.
asBlendMode
(
)
;
const
unsigned
mode
=
bm
?
static_cast
<
unsigned
>
(
bm
.
value
(
)
)
:
CUSTOM_BLEND_MODE_SENTINEL
;
packed
|
=
shift_bits
(
(
(
unsigned
)
paint
.
isDither
(
)
<
<
1
)
|
(
unsigned
)
paint
.
isAntiAlias
(
)
0
8
)
;
packed
|
=
shift_bits
(
mode
8
8
)
;
packed
|
=
shift_bits
(
paint
.
getStrokeCap
(
)
16
2
)
;
packed
|
=
shift_bits
(
paint
.
getStrokeJoin
(
)
18
2
)
;
packed
|
=
shift_bits
(
paint
.
getStyle
(
)
20
2
)
;
packed
|
=
shift_bits
(
0
22
2
)
;
packed
|
=
shift_bits
(
flatFlags
24
8
)
;
return
packed
;
}
static
uint32_t
unpack_v68
(
SkPaint
*
paint
uint32_t
packed
SkSafeRange
&
safe
)
{
paint
-
>
setAntiAlias
(
(
packed
&
1
)
!
=
0
)
;
paint
-
>
setDither
(
(
packed
&
2
)
!
=
0
)
;
packed
>
>
=
8
;
{
unsigned
mode
=
packed
&
0xFF
;
if
(
mode
!
=
CUSTOM_BLEND_MODE_SENTINEL
)
{
paint
-
>
setBlendMode
(
safe
.
checkLE
(
mode
SkBlendMode
:
:
kLastMode
)
)
;
}
}
packed
>
>
=
8
;
paint
-
>
setStrokeCap
(
safe
.
checkLE
(
packed
&
0x3
SkPaint
:
:
kLast_Cap
)
)
;
packed
>
>
=
2
;
paint
-
>
setStrokeJoin
(
safe
.
checkLE
(
packed
&
0x3
SkPaint
:
:
kLast_Join
)
)
;
packed
>
>
=
2
;
paint
-
>
setStyle
(
safe
.
checkLE
(
packed
&
0x3
SkPaint
:
:
kStrokeAndFill_Style
)
)
;
packed
>
>
=
2
;
packed
>
>
=
2
;
return
packed
;
}
void
SkPaintPriv
:
:
Flatten
(
const
SkPaint
&
paint
SkWriteBuffer
&
buffer
)
{
uint8_t
flatFlags
=
0
;
if
(
paint
.
getPathEffect
(
)
|
|
paint
.
getShader
(
)
|
|
paint
.
getMaskFilter
(
)
|
|
paint
.
getColorFilter
(
)
|
|
paint
.
getImageFilter
(
)
|
|
!
paint
.
asBlendMode
(
)
)
{
flatFlags
|
=
kHasEffects_FlatFlag
;
}
buffer
.
writeScalar
(
paint
.
getStrokeWidth
(
)
)
;
buffer
.
writeScalar
(
paint
.
getStrokeMiter
(
)
)
;
buffer
.
writeColor4f
(
paint
.
getColor4f
(
)
)
;
buffer
.
write32
(
pack_v68
(
paint
flatFlags
)
)
;
if
(
flatFlags
&
kHasEffects_FlatFlag
)
{
buffer
.
writeFlattenable
(
paint
.
getPathEffect
(
)
)
;
buffer
.
writeFlattenable
(
paint
.
getShader
(
)
)
;
buffer
.
writeFlattenable
(
paint
.
getMaskFilter
(
)
)
;
buffer
.
writeFlattenable
(
paint
.
getColorFilter
(
)
)
;
buffer
.
writeFlattenable
(
paint
.
getImageFilter
(
)
)
;
buffer
.
writeFlattenable
(
paint
.
getBlender
(
)
)
;
}
}
SkPaint
SkPaintPriv
:
:
Unflatten
(
SkReadBuffer
&
buffer
)
{
SkPaint
paint
;
paint
.
setStrokeWidth
(
buffer
.
readScalar
(
)
)
;
paint
.
setStrokeMiter
(
buffer
.
readScalar
(
)
)
;
{
SkColor4f
color
;
buffer
.
readColor4f
(
&
color
)
;
paint
.
setColor
(
color
sk_srgb_singleton
(
)
)
;
}
SkSafeRange
safe
;
unsigned
flatFlags
=
unpack_v68
(
&
paint
buffer
.
readUInt
(
)
safe
)
;
if
(
!
(
flatFlags
&
kHasEffects_FlatFlag
)
)
{
paint
.
setPathEffect
(
nullptr
)
;
paint
.
setShader
(
nullptr
)
;
paint
.
setMaskFilter
(
nullptr
)
;
paint
.
setColorFilter
(
nullptr
)
;
paint
.
setImageFilter
(
nullptr
)
;
}
else
if
(
buffer
.
isVersionLT
(
SkPicturePriv
:
:
kSkBlenderInSkPaint
)
)
{
paint
.
setPathEffect
(
buffer
.
readPathEffect
(
)
)
;
paint
.
setShader
(
buffer
.
readShader
(
)
)
;
paint
.
setMaskFilter
(
buffer
.
readMaskFilter
(
)
)
;
paint
.
setColorFilter
(
buffer
.
readColorFilter
(
)
)
;
(
void
)
buffer
.
read32
(
)
;
paint
.
setImageFilter
(
buffer
.
readImageFilter
(
)
)
;
}
else
{
paint
.
setPathEffect
(
buffer
.
readPathEffect
(
)
)
;
paint
.
setShader
(
buffer
.
readShader
(
)
)
;
paint
.
setMaskFilter
(
buffer
.
readMaskFilter
(
)
)
;
paint
.
setColorFilter
(
buffer
.
readColorFilter
(
)
)
;
paint
.
setImageFilter
(
buffer
.
readImageFilter
(
)
)
;
paint
.
setBlender
(
buffer
.
readBlender
(
)
)
;
}
if
(
!
buffer
.
validate
(
safe
.
ok
(
)
)
)
{
paint
.
reset
(
)
;
}
return
paint
;
}
