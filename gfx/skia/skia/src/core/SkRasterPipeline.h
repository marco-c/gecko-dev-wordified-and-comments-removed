#
ifndef
SkRasterPipeline_DEFINED
#
define
SkRasterPipeline_DEFINED
#
include
"
SkImageInfo
.
h
"
#
include
"
SkNx
.
h
"
#
include
"
SkTArray
.
h
"
#
include
"
SkTypes
.
h
"
#
include
<
vector
>
#
define
SK_RASTER_PIPELINE_STAGES
(
M
)
\
M
(
move_src_dst
)
M
(
move_dst_src
)
M
(
swap
)
\
M
(
clamp_0
)
M
(
clamp_1
)
M
(
clamp_a
)
\
M
(
unpremul
)
M
(
premul
)
\
M
(
set_rgb
)
M
(
swap_rb
)
\
M
(
from_srgb
)
M
(
to_srgb
)
\
M
(
from_2dot2
)
M
(
to_2dot2
)
\
M
(
constant_color
)
M
(
seed_shader
)
\
M
(
load_a8
)
M
(
store_a8
)
\
M
(
load_g8
)
\
M
(
load_565
)
M
(
store_565
)
\
M
(
load_4444
)
M
(
store_4444
)
\
M
(
load_f16
)
M
(
store_f16
)
\
M
(
load_f32
)
M
(
store_f32
)
\
M
(
load_8888
)
M
(
store_8888
)
\
M
(
load_u16_be
)
M
(
load_rgb_u16_be
)
M
(
store_u16_be
)
\
M
(
load_tables_u16_be
)
M
(
load_tables_rgb_u16_be
)
\
M
(
load_tables
)
\
M
(
scale_u8
)
M
(
scale_1_float
)
\
M
(
lerp_u8
)
M
(
lerp_565
)
M
(
lerp_1_float
)
\
M
(
dstatop
)
M
(
dstin
)
M
(
dstout
)
M
(
dstover
)
\
M
(
srcatop
)
M
(
srcin
)
M
(
srcout
)
M
(
srcover
)
\
M
(
clear
)
M
(
modulate
)
M
(
multiply
)
M
(
plus_
)
M
(
screen
)
M
(
xor_
)
\
M
(
colorburn
)
M
(
colordodge
)
M
(
darken
)
M
(
difference
)
\
M
(
exclusion
)
M
(
hardlight
)
M
(
lighten
)
M
(
overlay
)
M
(
softlight
)
\
M
(
luminance_to_alpha
)
\
M
(
matrix_2x3
)
M
(
matrix_3x4
)
M
(
matrix_4x5
)
\
M
(
matrix_perspective
)
\
M
(
parametric_r
)
M
(
parametric_g
)
M
(
parametric_b
)
\
M
(
parametric_a
)
\
M
(
table_r
)
M
(
table_g
)
M
(
table_b
)
M
(
table_a
)
\
M
(
color_lookup_table
)
M
(
lab_to_xyz
)
\
M
(
clamp_x
)
M
(
mirror_x
)
M
(
repeat_x
)
\
M
(
clamp_y
)
M
(
mirror_y
)
M
(
repeat_y
)
\
M
(
gather_a8
)
M
(
gather_g8
)
M
(
gather_i8
)
\
M
(
gather_565
)
M
(
gather_4444
)
M
(
gather_8888
)
M
(
gather_f16
)
\
M
(
bilinear_nx
)
M
(
bilinear_px
)
M
(
bilinear_ny
)
M
(
bilinear_py
)
\
M
(
bicubic_n3x
)
M
(
bicubic_n1x
)
M
(
bicubic_p1x
)
M
(
bicubic_p3x
)
\
M
(
bicubic_n3y
)
M
(
bicubic_n1y
)
M
(
bicubic_p1y
)
M
(
bicubic_p3y
)
\
M
(
save_xy
)
M
(
accumulate
)
\
M
(
linear_gradient
)
\
M
(
linear_gradient_2stops
)
\
M
(
byte_tables
)
M
(
byte_tables_rgb
)
\
M
(
shader_adapter
)
\
M
(
rgb_to_hsl
)
\
M
(
hsl_to_rgb
)
class
SkRasterPipeline
{
public
:
SkRasterPipeline
(
)
;
enum
StockStage
{
#
define
M
(
stage
)
stage
SK_RASTER_PIPELINE_STAGES
(
M
)
#
undef
M
}
;
void
append
(
StockStage
void
*
=
nullptr
)
;
void
append
(
StockStage
stage
const
void
*
ctx
)
{
this
-
>
append
(
stage
const_cast
<
void
*
>
(
ctx
)
)
;
}
void
extend
(
const
SkRasterPipeline
&
)
;
void
run
(
size_t
x
size_t
n
)
const
;
void
dump
(
)
const
;
struct
Stage
{
StockStage
stage
;
void
*
ctx
;
}
;
void
append_from_srgb
(
SkAlphaType
)
;
bool
empty
(
)
const
{
return
fStages
.
empty
(
)
;
}
private
:
bool
run_with_jumper
(
size_t
x
size_t
n
)
const
;
std
:
:
vector
<
Stage
>
fStages
;
}
;
#
endif
