#
ifndef
SkGlyphBuffer_DEFINED
#
define
SkGlyphBuffer_DEFINED
#
include
"
src
/
core
/
SkGlyph
.
h
"
#
include
"
src
/
core
/
SkZip
.
h
"
class
SkStrikeForGPU
;
struct
SkGlyphPositionRoundingSpec
;
class
SkGlyphVariant
{
public
:
SkGlyphVariant
(
)
:
fV
{
nullptr
}
{
}
SkGlyphVariant
&
operator
=
(
SkPackedGlyphID
packedID
)
{
fV
.
packedID
=
packedID
;
SkDEBUGCODE
(
fTag
=
kPackedID
)
;
return
*
this
;
}
SkGlyphVariant
&
operator
=
(
SkGlyph
*
glyph
)
{
fV
.
glyph
=
glyph
;
SkDEBUGCODE
(
fTag
=
kGlyph
)
;
return
*
this
;
}
SkGlyphVariant
&
operator
=
(
const
SkPath
*
path
)
{
fV
.
path
=
path
;
SkDEBUGCODE
(
fTag
=
kPath
)
;
return
*
this
;
}
SkGlyph
*
glyph
(
)
const
{
SkASSERT
(
fTag
=
=
kGlyph
)
;
return
fV
.
glyph
;
}
const
SkPath
*
path
(
)
const
{
SkASSERT
(
fTag
=
=
kPath
)
;
return
fV
.
path
;
}
SkPackedGlyphID
packedID
(
)
const
{
SkASSERT
(
fTag
=
=
kPackedID
)
;
return
fV
.
packedID
;
}
operator
SkPackedGlyphID
(
)
const
{
return
this
-
>
packedID
(
)
;
}
operator
SkGlyph
*
(
)
const
{
return
this
-
>
glyph
(
)
;
}
operator
const
SkPath
*
(
)
const
{
return
this
-
>
path
(
)
;
}
private
:
union
{
SkGlyph
*
glyph
;
const
SkPath
*
path
;
SkPackedGlyphID
packedID
;
}
fV
;
#
ifdef
SK_DEBUG
enum
{
kEmpty
kPackedID
kGlyph
kPath
}
fTag
{
kEmpty
}
;
#
endif
}
;
class
SkDrawableGlyphBuffer
{
public
:
void
ensureSize
(
size_t
size
)
;
void
startSource
(
const
SkZip
<
const
SkGlyphID
const
SkPoint
>
&
source
SkPoint
origin
)
;
void
startDevice
(
const
SkZip
<
const
SkGlyphID
const
SkPoint
>
&
source
SkPoint
origin
const
SkMatrix
&
viewMatrix
const
SkGlyphPositionRoundingSpec
&
roundingSpec
)
;
SkZip
<
SkGlyphVariant
SkPoint
>
input
(
)
{
SkASSERT
(
fPhase
=
=
kInput
)
;
SkDEBUGCODE
(
fPhase
=
kProcess
)
;
return
SkZip
<
SkGlyphVariant
SkPoint
>
{
fInputSize
fMultiBuffer
fPositions
}
;
}
void
push_back
(
SkGlyph
*
glyph
size_t
from
)
{
SkASSERT
(
fPhase
=
=
kProcess
)
;
SkASSERT
(
fDrawableSize
<
=
from
)
;
fPositions
[
fDrawableSize
]
=
fPositions
[
from
]
;
fMultiBuffer
[
fDrawableSize
]
=
glyph
;
fDrawableSize
+
+
;
}
void
push_back
(
const
SkPath
*
path
size_t
from
)
{
SkASSERT
(
fPhase
=
=
kProcess
)
;
SkASSERT
(
fDrawableSize
<
=
from
)
;
fPositions
[
fDrawableSize
]
=
fPositions
[
from
]
;
fMultiBuffer
[
fDrawableSize
]
=
path
;
fDrawableSize
+
+
;
}
SkZip
<
SkGlyphVariant
SkPoint
>
drawable
(
)
{
SkASSERT
(
fPhase
=
=
kProcess
)
;
SkDEBUGCODE
(
fPhase
=
kDraw
)
;
return
SkZip
<
SkGlyphVariant
SkPoint
>
{
fDrawableSize
fMultiBuffer
fPositions
}
;
}
void
reset
(
)
;
private
:
size_t
fMaxSize
{
0
}
;
size_t
fInputSize
{
0
}
;
size_t
fDrawableSize
{
0
}
;
SkAutoTMalloc
<
SkGlyphVariant
>
fMultiBuffer
;
SkAutoTMalloc
<
SkPoint
>
fPositions
;
#
ifdef
SK_DEBUG
enum
{
kReset
kInput
kProcess
kDraw
}
fPhase
{
kReset
}
;
#
endif
}
;
#
endif
