#
ifndef
SkRasterPipelineContextUtils_DEFINED
#
define
SkRasterPipelineContextUtils_DEFINED
#
include
"
src
/
base
/
SkArenaAlloc
.
h
"
#
include
"
src
/
base
/
SkUtils
.
h
"
#
include
<
cstring
>
#
include
<
type_traits
>
namespace
SkRPCtxUtils
{
template
<
typename
T
>
using
UnpackedType
=
typename
std
:
:
conditional
<
sizeof
(
T
)
<
=
sizeof
(
void
*
)
T
const
T
&
>
:
:
type
;
template
<
typename
T
>
[
[
maybe_unused
]
]
static
void
*
Pack
(
const
T
&
ctx
SkArenaAlloc
*
alloc
)
{
if
constexpr
(
sizeof
(
T
)
<
=
sizeof
(
void
*
)
)
{
return
sk_bit_cast
<
void
*
>
(
ctx
)
;
}
else
{
return
alloc
-
>
make
<
T
>
(
ctx
)
;
}
}
template
<
typename
T
>
[
[
maybe_unused
]
]
static
UnpackedType
<
T
>
Unpack
(
const
T
*
ctx
)
{
if
constexpr
(
sizeof
(
T
)
<
=
sizeof
(
void
*
)
)
{
return
sk_bit_cast
<
T
>
(
ctx
)
;
}
else
{
return
*
ctx
;
}
}
}
#
endif
