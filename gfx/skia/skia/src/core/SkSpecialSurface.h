#
ifndef
SkSpecialSurface_DEFINED
#
define
SkSpecialSurface_DEFINED
#
include
"
include
/
core
/
SkCanvas
.
h
"
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSurfaceProps
.
h
"
#
if
defined
(
SK_GANESH
)
#
include
"
include
/
private
/
gpu
/
ganesh
/
GrTypesPriv
.
h
"
#
endif
#
if
defined
(
SK_GRAPHITE
)
namespace
skgpu
:
:
graphite
{
class
Recorder
;
}
#
endif
class
GrBackendFormat
;
class
GrRecordingContext
;
class
SkBaseDevice
;
class
SkBitmap
;
class
SkCanvas
;
class
SkSpecialImage
;
class
SkSpecialSurface
:
public
SkRefCnt
{
public
:
SkSpecialSurface
(
sk_sp
<
SkBaseDevice
>
const
SkIRect
&
subset
)
;
#
ifdef
SK_DEBUG
SkSurfaceProps
props
(
)
const
{
return
fCanvas
-
>
getBaseProps
(
)
;
}
#
endif
const
SkIRect
&
subset
(
)
const
{
return
fSubset
;
}
int
width
(
)
const
{
return
fSubset
.
width
(
)
;
}
int
height
(
)
const
{
return
fSubset
.
height
(
)
;
}
SkCanvas
*
getCanvas
(
)
{
return
fCanvas
.
get
(
)
;
}
sk_sp
<
SkSpecialImage
>
makeImageSnapshot
(
)
;
#
if
defined
(
SK_GANESH
)
static
sk_sp
<
SkSpecialSurface
>
MakeRenderTarget
(
GrRecordingContext
*
const
SkImageInfo
&
const
SkSurfaceProps
&
GrSurfaceOrigin
)
;
#
endif
#
if
defined
(
SK_GRAPHITE
)
static
sk_sp
<
SkSpecialSurface
>
MakeGraphite
(
skgpu
:
:
graphite
:
:
Recorder
*
const
SkImageInfo
&
const
SkSurfaceProps
&
)
;
#
endif
static
sk_sp
<
SkSpecialSurface
>
MakeRaster
(
const
SkImageInfo
&
const
SkSurfaceProps
&
)
;
private
:
std
:
:
unique_ptr
<
SkCanvas
>
fCanvas
;
const
SkIRect
fSubset
;
}
;
#
endif
