#
ifndef
SkStroke_DEFINED
#
define
SkStroke_DEFINED
#
include
"
include
/
core
/
SkPaint
.
h
"
#
include
"
include
/
core
/
SkPathTypes
.
h
"
#
include
"
include
/
core
/
SkScalar
.
h
"
#
include
"
include
/
private
/
base
/
SkAssert
.
h
"
#
include
"
include
/
private
/
base
/
SkTo
.
h
"
#
include
<
cstdint
>
class
SkPath
;
struct
SkRect
;
#
ifdef
SK_DEBUG
extern
bool
gDebugStrokerErrorSet
;
extern
SkScalar
gDebugStrokerError
;
extern
int
gMaxRecursion
[
]
;
#
endif
class
SkStroke
{
public
:
SkStroke
(
)
;
SkStroke
(
const
SkPaint
&
)
;
SkStroke
(
const
SkPaint
&
SkScalar
width
)
;
SkPaint
:
:
Cap
getCap
(
)
const
{
return
(
SkPaint
:
:
Cap
)
fCap
;
}
void
setCap
(
SkPaint
:
:
Cap
)
;
SkPaint
:
:
Join
getJoin
(
)
const
{
return
(
SkPaint
:
:
Join
)
fJoin
;
}
void
setJoin
(
SkPaint
:
:
Join
)
;
void
setMiterLimit
(
SkScalar
)
;
void
setWidth
(
SkScalar
)
;
bool
getDoFill
(
)
const
{
return
SkToBool
(
fDoFill
)
;
}
void
setDoFill
(
bool
doFill
)
{
fDoFill
=
SkToU8
(
doFill
)
;
}
SkScalar
getResScale
(
)
const
{
return
fResScale
;
}
void
setResScale
(
SkScalar
rs
)
{
SkASSERT
(
rs
>
0
&
&
SkScalarIsFinite
(
rs
)
)
;
fResScale
=
rs
;
}
void
strokeRect
(
const
SkRect
&
rect
SkPath
*
result
SkPathDirection
=
SkPathDirection
:
:
kCW
)
const
;
void
strokePath
(
const
SkPath
&
path
SkPath
*
)
const
;
private
:
SkScalar
fWidth
fMiterLimit
;
SkScalar
fResScale
;
uint8_t
fCap
fJoin
;
bool
fDoFill
;
friend
class
SkPaint
;
}
;
#
endif
