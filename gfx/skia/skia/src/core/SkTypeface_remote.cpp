#
include
"
SkTypeface_remote
.
h
"
#
include
"
SkPaint
.
h
"
#
include
"
SkRemoteGlyphCache
.
h
"
#
include
"
SkStrike
.
h
"
#
include
"
SkStrikeCache
.
h
"
#
include
"
SkTraceEvent
.
h
"
SkScalerContextProxy
:
:
SkScalerContextProxy
(
sk_sp
<
SkTypeface
>
tf
const
SkScalerContextEffects
&
effects
const
SkDescriptor
*
desc
sk_sp
<
SkStrikeClient
:
:
DiscardableHandleManager
>
manager
)
:
SkScalerContext
{
std
:
:
move
(
tf
)
effects
desc
}
fDiscardableManager
{
std
:
:
move
(
manager
)
}
{
}
void
SkScalerContextProxy
:
:
initCache
(
SkStrike
*
cache
SkStrikeCache
*
strikeCache
)
{
SkASSERT
(
fCache
=
=
nullptr
)
;
SkASSERT
(
cache
!
=
nullptr
)
;
fCache
=
cache
;
fStrikeCache
=
strikeCache
;
}
unsigned
SkScalerContextProxy
:
:
generateGlyphCount
(
)
{
SK_ABORT
(
"
Should
never
be
called
.
"
)
;
return
0
;
}
uint16_t
SkScalerContextProxy
:
:
generateCharToGlyph
(
SkUnichar
)
{
SK_ABORT
(
"
Should
never
be
called
.
"
)
;
return
0
;
}
bool
SkScalerContextProxy
:
:
generateAdvance
(
SkGlyph
*
glyph
)
{
return
false
;
}
void
SkScalerContextProxy
:
:
generateMetrics
(
SkGlyph
*
glyph
)
{
TRACE_EVENT1
(
"
skia
"
"
generateMetrics
"
"
rec
"
TRACE_STR_COPY
(
this
-
>
getRec
(
)
.
dump
(
)
.
c_str
(
)
)
)
;
if
(
this
-
>
getProxyTypeface
(
)
-
>
isLogging
(
)
)
{
SkDebugf
(
"
GlyphCacheMiss
generateMetrics
:
%
s
\
n
"
this
-
>
getRec
(
)
.
dump
(
)
.
c_str
(
)
)
;
}
glyph
-
>
fMaskFormat
=
fRec
.
fMaskFormat
;
if
(
fCache
&
&
fCache
-
>
belongsToCache
(
glyph
)
)
{
if
(
const
auto
*
fallback
=
fCache
-
>
getCachedGlyphAnySubPix
(
glyph
-
>
getGlyphID
(
)
glyph
-
>
getPackedID
(
)
)
)
{
fCache
-
>
initializeGlyphFromFallback
(
glyph
*
fallback
)
;
fDiscardableManager
-
>
notifyCacheMiss
(
SkStrikeClient
:
:
CacheMissType
:
:
kGlyphMetricsFallback
)
;
return
;
}
if
(
fStrikeCache
-
>
desperationSearchForImage
(
fCache
-
>
getDescriptor
(
)
glyph
fCache
)
)
{
fDiscardableManager
-
>
notifyCacheMiss
(
SkStrikeClient
:
:
CacheMissType
:
:
kGlyphMetricsFallback
)
;
return
;
}
}
glyph
-
>
zeroMetrics
(
)
;
fDiscardableManager
-
>
notifyCacheMiss
(
SkStrikeClient
:
:
CacheMissType
:
:
kGlyphMetrics
)
;
}
void
SkScalerContextProxy
:
:
generateImage
(
const
SkGlyph
&
glyph
)
{
TRACE_EVENT1
(
"
skia
"
"
generateImage
"
"
rec
"
TRACE_STR_COPY
(
this
-
>
getRec
(
)
.
dump
(
)
.
c_str
(
)
)
)
;
if
(
this
-
>
getProxyTypeface
(
)
-
>
isLogging
(
)
)
{
SkDebugf
(
"
GlyphCacheMiss
generateImage
:
%
s
\
n
"
this
-
>
getRec
(
)
.
dump
(
)
.
c_str
(
)
)
;
}
fDiscardableManager
-
>
notifyCacheMiss
(
SkStrikeClient
:
:
CacheMissType
:
:
kGlyphImage
)
;
}
bool
SkScalerContextProxy
:
:
generatePath
(
SkGlyphID
glyphID
SkPath
*
path
)
{
TRACE_EVENT1
(
"
skia
"
"
generatePath
"
"
rec
"
TRACE_STR_COPY
(
this
-
>
getRec
(
)
.
dump
(
)
.
c_str
(
)
)
)
;
if
(
this
-
>
getProxyTypeface
(
)
-
>
isLogging
(
)
)
{
SkDebugf
(
"
GlyphCacheMiss
generatePath
:
%
s
\
n
"
this
-
>
getRec
(
)
.
dump
(
)
.
c_str
(
)
)
;
}
auto
desc
=
SkScalerContext
:
:
DescriptorGivenRecAndEffects
(
this
-
>
getRec
(
)
this
-
>
getEffects
(
)
)
;
bool
foundPath
=
fStrikeCache
&
&
fStrikeCache
-
>
desperationSearchForPath
(
*
desc
glyphID
path
)
;
fDiscardableManager
-
>
notifyCacheMiss
(
foundPath
?
SkStrikeClient
:
:
CacheMissType
:
:
kGlyphPathFallback
:
SkStrikeClient
:
:
CacheMissType
:
:
kGlyphPath
)
;
return
foundPath
;
}
void
SkScalerContextProxy
:
:
generateFontMetrics
(
SkFontMetrics
*
metrics
)
{
TRACE_EVENT1
(
"
skia
"
"
generateFontMetrics
"
"
rec
"
TRACE_STR_COPY
(
this
-
>
getRec
(
)
.
dump
(
)
.
c_str
(
)
)
)
;
if
(
this
-
>
getProxyTypeface
(
)
-
>
isLogging
(
)
)
{
SkDebugf
(
"
GlyphCacheMiss
generateFontMetrics
:
%
s
\
n
"
this
-
>
getRec
(
)
.
dump
(
)
.
c_str
(
)
)
;
SkDEBUGCODE
(
SkStrikeCache
:
:
Dump
(
)
)
;
}
fDiscardableManager
-
>
notifyCacheMiss
(
SkStrikeClient
:
:
CacheMissType
:
:
kFontMetrics
)
;
sk_bzero
(
metrics
sizeof
(
*
metrics
)
)
;
}
SkTypefaceProxy
*
SkScalerContextProxy
:
:
getProxyTypeface
(
)
const
{
return
(
SkTypefaceProxy
*
)
this
-
>
getTypeface
(
)
;
}
