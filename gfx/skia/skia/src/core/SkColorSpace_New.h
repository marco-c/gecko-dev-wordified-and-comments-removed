#
ifndef
SkColorSpace_New_DEFINED
#
define
SkColorSpace_New_DEFINED
#
include
"
SkColorSpace
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkRefCnt
.
h
"
class
SkRasterPipeline
;
class
SkColorSpace_New
final
:
public
SkColorSpace
{
public
:
class
ICCProfile
;
struct
TransferFn
:
public
SkRefCnt
{
virtual
~
TransferFn
(
)
=
default
;
virtual
SkColorSpaceTransferFn
parameterize
(
)
const
=
0
;
virtual
void
linearizeDst
(
SkRasterPipeline
*
)
const
=
0
;
virtual
void
linearizeSrc
(
SkRasterPipeline
*
)
const
=
0
;
virtual
void
encodeSrc
(
SkRasterPipeline
*
)
const
=
0
;
virtual
bool
equals
(
const
TransferFn
&
)
const
;
virtual
void
updateICCProfile
(
ICCProfile
*
)
const
;
static
sk_sp
<
TransferFn
>
MakeLinear
(
)
;
static
sk_sp
<
TransferFn
>
MakeSRGB
(
)
;
static
sk_sp
<
TransferFn
>
MakeGamma
(
float
)
;
}
;
enum
class
Blending
{
Linear
AsEncoded
}
;
SkColorSpace_New
(
sk_sp
<
TransferFn
>
SkMatrix44
toXYZD50
Blending
)
;
const
SkMatrix44
&
toXYZD50
(
)
const
{
return
fToXYZD50
;
}
const
SkMatrix44
&
fromXYZD50
(
)
const
{
return
fFromXYZD50
;
}
const
TransferFn
&
transferFn
(
)
const
{
return
*
fTransferFn
;
}
Blending
blending
(
)
const
{
return
fBlending
;
}
sk_sp
<
SkColorSpace
>
makeLinearGamma
(
)
const
override
;
sk_sp
<
SkColorSpace
>
makeSRGBGamma
(
)
const
override
;
SkGammaNamed
onGammaNamed
(
)
const
override
;
bool
onGammaCloseToSRGB
(
)
const
override
;
bool
onGammaIsLinear
(
)
const
override
;
bool
onIsNumericalTransferFn
(
SkColorSpaceTransferFn
*
)
const
override
;
const
SkMatrix44
*
onFromXYZD50
(
)
const
override
{
return
&
fFromXYZD50
;
}
const
SkMatrix44
*
onToXYZD50
(
)
const
override
{
return
&
fToXYZD50
;
}
uint32_t
onToXYZD50Hash
(
)
const
override
{
return
fToXYZD50Hash
;
}
private
:
sk_sp
<
TransferFn
>
fTransferFn
;
SkMatrix44
fFromXYZD50
;
SkMatrix44
fToXYZD50
;
uint32_t
fToXYZD50Hash
;
Blending
fBlending
;
}
;
#
endif
