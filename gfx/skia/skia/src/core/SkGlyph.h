#
ifndef
SkGlyph_DEFINED
#
define
SkGlyph_DEFINED
#
include
"
include
/
core
/
SkPath
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
private
/
SkChecksum
.
h
"
#
include
"
include
/
private
/
SkFixed
.
h
"
#
include
"
include
/
private
/
SkTo
.
h
"
#
include
"
src
/
core
/
SkMask
.
h
"
class
SkArenaAlloc
;
class
SkStrike
;
class
SkScalerContext
;
#
define
MASK_FORMAT_UNKNOWN
(
0xFF
)
#
define
MASK_FORMAT_JUST_ADVANCE
MASK_FORMAT_UNKNOWN
struct
SkPackedGlyphID
{
static
constexpr
uint32_t
kImpossibleID
=
~
0u
;
enum
{
kGlyphIDLen
=
16u
kSubPixelPosLen
=
2u
kGlyphID
=
0u
kSubPixelY
=
kGlyphIDLen
kSubPixelX
=
kGlyphIDLen
+
kSubPixelPosLen
kEndData
=
kGlyphIDLen
+
2
*
kSubPixelPosLen
kGlyphIDMask
=
(
1u
<
<
kGlyphIDLen
)
-
1
kSubPixelPosMask
=
(
1u
<
<
kSubPixelPosLen
)
-
1
kMaskAll
=
(
1u
<
<
kEndData
)
-
1
kFixedPointBinaryPointPos
=
16u
kFixedPointSubPixelPosBits
=
kFixedPointBinaryPointPos
-
kSubPixelPosLen
}
;
constexpr
explicit
SkPackedGlyphID
(
SkGlyphID
glyphID
)
:
fID
{
glyphID
}
{
}
constexpr
SkPackedGlyphID
(
SkGlyphID
glyphID
SkFixed
x
SkFixed
y
)
:
fID
{
PackIDXY
(
glyphID
x
y
)
}
{
SkASSERT
(
fID
!
=
kImpossibleID
)
;
}
constexpr
SkPackedGlyphID
(
SkGlyphID
code
SkIPoint
pt
)
:
SkPackedGlyphID
(
code
pt
.
fX
pt
.
fY
)
{
}
constexpr
SkPackedGlyphID
(
)
:
fID
{
kImpossibleID
}
{
}
bool
operator
=
=
(
const
SkPackedGlyphID
&
that
)
const
{
return
fID
=
=
that
.
fID
;
}
bool
operator
!
=
(
const
SkPackedGlyphID
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
bool
operator
<
(
SkPackedGlyphID
that
)
const
{
return
this
-
>
fID
<
that
.
fID
;
}
uint32_t
code
(
)
const
{
return
fID
&
kGlyphIDMask
;
}
uint32_t
value
(
)
const
{
return
fID
;
}
SkFixed
getSubXFixed
(
)
const
{
return
this
-
>
subToFixed
(
kSubPixelX
)
;
}
SkFixed
getSubYFixed
(
)
const
{
return
this
-
>
subToFixed
(
kSubPixelY
)
;
}
uint32_t
hash
(
)
const
{
return
SkChecksum
:
:
CheapMix
(
fID
)
;
}
SkString
dump
(
)
const
{
SkString
str
;
str
.
appendf
(
"
code
:
%
d
x
:
%
d
y
:
%
d
"
code
(
)
getSubXFixed
(
)
getSubYFixed
(
)
)
;
return
str
;
}
private
:
static
constexpr
uint32_t
PackIDXY
(
SkGlyphID
glyphID
SkFixed
x
SkFixed
y
)
{
return
(
FixedToSub
(
x
)
<
<
kSubPixelX
)
|
(
FixedToSub
(
y
)
<
<
kSubPixelY
)
|
glyphID
;
}
static
constexpr
uint32_t
FixedToSub
(
SkFixed
n
)
{
return
(
(
uint32_t
)
n
>
>
kFixedPointSubPixelPosBits
)
&
kSubPixelPosMask
;
}
constexpr
SkFixed
subToFixed
(
uint32_t
subPixelPosBit
)
const
{
uint32_t
subPixelPosition
=
(
fID
>
>
subPixelPosBit
)
&
kSubPixelPosMask
;
return
subPixelPosition
<
<
kFixedPointSubPixelPosBits
;
}
uint32_t
fID
;
}
;
struct
SkGlyphPrototype
;
class
SkGlyph
{
public
:
static
constexpr
SkFixed
kSubpixelRound
=
SK_FixedHalf
>
>
SkPackedGlyphID
:
:
kSubPixelPosLen
;
constexpr
SkGlyph
(
)
:
fID
{
SkPackedGlyphID
(
)
}
{
}
constexpr
explicit
SkGlyph
(
SkPackedGlyphID
id
)
:
fID
{
id
}
{
}
explicit
SkGlyph
(
const
SkGlyphPrototype
&
p
)
;
SkVector
advanceVector
(
)
const
{
return
SkVector
{
fAdvanceX
fAdvanceY
}
;
}
SkScalar
advanceX
(
)
const
{
return
fAdvanceX
;
}
SkScalar
advanceY
(
)
const
{
return
fAdvanceY
;
}
SkGlyphID
getGlyphID
(
)
const
{
return
fID
.
code
(
)
;
}
SkPackedGlyphID
getPackedID
(
)
const
{
return
fID
;
}
SkFixed
getSubXFixed
(
)
const
{
return
fID
.
getSubXFixed
(
)
;
}
SkFixed
getSubYFixed
(
)
const
{
return
fID
.
getSubYFixed
(
)
;
}
size_t
rowBytes
(
)
const
;
size_t
rowBytesUsingFormat
(
SkMask
:
:
Format
format
)
const
;
void
zeroMetrics
(
)
;
SkMask
mask
(
)
const
;
SkMask
mask
(
SkPoint
position
)
const
;
bool
setImage
(
SkArenaAlloc
*
alloc
SkScalerContext
*
scalerContext
)
;
bool
setImage
(
SkArenaAlloc
*
alloc
const
void
*
image
)
;
bool
setMetricsAndImage
(
SkArenaAlloc
*
alloc
const
SkGlyph
&
from
)
;
bool
setImageHasBeenCalled
(
)
const
{
return
fImage
!
=
nullptr
|
|
this
-
>
isEmpty
(
)
|
|
this
-
>
imageTooLarge
(
)
;
}
const
void
*
image
(
)
const
{
SkASSERT
(
this
-
>
setImageHasBeenCalled
(
)
)
;
return
fImage
;
}
size_t
imageSize
(
)
const
;
bool
setPath
(
SkArenaAlloc
*
alloc
SkScalerContext
*
scalerContext
)
;
bool
setPath
(
SkArenaAlloc
*
alloc
const
SkPath
*
path
)
;
bool
setPathHasBeenCalled
(
)
const
{
return
fPathData
!
=
nullptr
;
}
const
SkPath
*
path
(
)
const
;
bool
isColor
(
)
const
{
return
fMaskFormat
=
=
SkMask
:
:
kARGB32_Format
;
}
SkMask
:
:
Format
maskFormat
(
)
const
{
return
static_cast
<
SkMask
:
:
Format
>
(
fMaskFormat
)
;
}
size_t
formatAlignment
(
)
const
;
int
maxDimension
(
)
const
{
return
std
:
:
max
(
fWidth
fHeight
)
;
}
SkIRect
iRect
(
)
const
{
return
SkIRect
:
:
MakeXYWH
(
fLeft
fTop
fWidth
fHeight
)
;
}
SkRect
rect
(
)
const
{
return
SkRect
:
:
MakeXYWH
(
fLeft
fTop
fWidth
fHeight
)
;
}
int
left
(
)
const
{
return
fLeft
;
}
int
top
(
)
const
{
return
fTop
;
}
int
width
(
)
const
{
return
fWidth
;
}
int
height
(
)
const
{
return
fHeight
;
}
bool
isEmpty
(
)
const
{
SkASSERT
(
fHeight
!
=
0
|
|
fWidth
=
=
0
)
;
return
fWidth
=
=
0
;
}
bool
imageTooLarge
(
)
const
{
return
fWidth
>
=
kMaxGlyphWidth
;
}
void
ensureIntercepts
(
const
SkScalar
bounds
[
2
]
SkScalar
scale
SkScalar
xPos
SkScalar
*
array
int
*
count
SkArenaAlloc
*
alloc
)
;
private
:
friend
class
RandomScalerContext
;
friend
class
SkScalerContext
;
friend
class
SkScalerContextProxy
;
friend
class
SkScalerContext_Empty
;
friend
class
SkScalerContext_FreeType
;
friend
class
SkScalerContext_FreeType_Base
;
friend
class
SkScalerContext_CairoFT
;
friend
class
SkScalerContext_DW
;
friend
class
SkScalerContext_GDI
;
friend
class
SkScalerContext_Mac
;
friend
class
SkStrikeClient
;
friend
class
SkStrikeServer
;
friend
class
SkTestScalerContext
;
friend
class
SkTestSVGScalerContext
;
friend
class
TestSVGTypeface
;
friend
class
TestTypeface
;
static
constexpr
uint16_t
kMaxGlyphWidth
=
1u
<
<
13u
;
struct
Intercept
{
Intercept
*
fNext
;
SkScalar
fBounds
[
2
]
;
SkScalar
fInterval
[
2
]
;
}
;
struct
PathData
{
Intercept
*
fIntercept
{
nullptr
}
;
SkPath
fPath
;
bool
fHasPath
{
false
}
;
}
;
size_t
allocImage
(
SkArenaAlloc
*
alloc
)
;
void
installPath
(
SkArenaAlloc
*
alloc
const
SkPath
*
path
)
;
uint16_t
fWidth
=
0
fHeight
=
0
;
int16_t
fTop
=
0
fLeft
=
0
;
void
*
fImage
=
nullptr
;
PathData
*
fPathData
=
nullptr
;
float
fAdvanceX
=
0
fAdvanceY
=
0
;
uint8_t
fMaskFormat
=
MASK_FORMAT_UNKNOWN
;
int8_t
fForceBW
=
0
;
const
SkPackedGlyphID
fID
;
}
;
struct
SkGlyphPrototype
{
SkPackedGlyphID
id
;
float
advanceX
=
0
advanceY
=
0
;
uint16_t
width
=
0
height
=
0
;
int16_t
left
=
0
top
=
0
;
SkMask
:
:
Format
maskFormat
=
SkMask
:
:
kBW_Format
;
bool
forceBW
=
false
;
}
;
#
endif
