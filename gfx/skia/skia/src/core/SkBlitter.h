#
ifndef
SkBlitter_DEFINED
#
define
SkBlitter_DEFINED
#
include
"
SkBitmapProcShader
.
h
"
#
include
"
SkColor
.
h
"
#
include
"
SkRect
.
h
"
#
include
"
SkRegion
.
h
"
#
include
"
SkShader
.
h
"
#
include
"
SkTypes
.
h
"
class
SkMatrix
;
class
SkPaint
;
class
SkPixmap
;
struct
SkMask
;
class
SkBlitter
{
public
:
virtual
~
SkBlitter
(
)
;
virtual
void
blitH
(
int
x
int
y
int
width
)
=
0
;
virtual
void
blitAntiH
(
int
x
int
y
const
SkAlpha
antialias
[
]
const
int16_t
runs
[
]
)
=
0
;
virtual
void
blitV
(
int
x
int
y
int
height
SkAlpha
alpha
)
;
virtual
void
blitRect
(
int
x
int
y
int
width
int
height
)
;
virtual
void
blitAntiRect
(
int
x
int
y
int
width
int
height
SkAlpha
leftAlpha
SkAlpha
rightAlpha
)
;
virtual
void
blitMask
(
const
SkMask
&
const
SkIRect
&
clip
)
;
virtual
const
SkPixmap
*
justAnOpaqueColor
(
uint32_t
*
value
)
;
virtual
void
blitAntiH2
(
int
x
int
y
U8CPU
a0
U8CPU
a1
)
{
int16_t
runs
[
3
]
;
uint8_t
aa
[
2
]
;
runs
[
0
]
=
1
;
runs
[
1
]
=
1
;
runs
[
2
]
=
0
;
aa
[
0
]
=
SkToU8
(
a0
)
;
aa
[
1
]
=
SkToU8
(
a1
)
;
this
-
>
blitAntiH
(
x
y
aa
runs
)
;
}
virtual
void
blitAntiV2
(
int
x
int
y
U8CPU
a0
U8CPU
a1
)
{
int16_t
runs
[
2
]
;
uint8_t
aa
[
1
]
;
runs
[
0
]
=
1
;
runs
[
1
]
=
0
;
aa
[
0
]
=
SkToU8
(
a0
)
;
this
-
>
blitAntiH
(
x
y
aa
runs
)
;
runs
[
0
]
=
1
;
runs
[
1
]
=
0
;
aa
[
0
]
=
SkToU8
(
a1
)
;
this
-
>
blitAntiH
(
x
y
+
1
aa
runs
)
;
}
virtual
bool
isNullBlitter
(
)
const
;
virtual
bool
resetShaderContext
(
const
SkShader
:
:
ContextRec
&
)
;
virtual
SkShader
:
:
Context
*
getShaderContext
(
)
const
;
virtual
int
requestRowsPreserved
(
)
const
{
return
1
;
}
virtual
void
*
allocBlitMemory
(
size_t
sz
)
{
return
fBlitMemory
.
reset
(
sz
SkAutoMalloc
:
:
kReuse_OnShrink
)
;
}
void
blitMaskRegion
(
const
SkMask
&
mask
const
SkRegion
&
clip
)
;
void
blitRectRegion
(
const
SkIRect
&
rect
const
SkRegion
&
clip
)
;
void
blitRegion
(
const
SkRegion
&
clip
)
;
static
SkBlitter
*
Choose
(
const
SkPixmap
&
dst
const
SkMatrix
&
matrix
const
SkPaint
&
paint
SkTBlitterAllocator
*
bool
drawCoverage
=
false
)
;
static
SkBlitter
*
ChooseSprite
(
const
SkPixmap
&
dst
const
SkPaint
&
const
SkPixmap
&
src
int
left
int
top
SkTBlitterAllocator
*
)
;
static
SkShader
:
:
ContextRec
:
:
DstType
PreferredShaderDest
(
const
SkImageInfo
&
)
;
protected
:
SkAutoMalloc
fBlitMemory
;
}
;
class
SkNullBlitter
:
public
SkBlitter
{
public
:
void
blitH
(
int
x
int
y
int
width
)
override
;
void
blitAntiH
(
int
x
int
y
const
SkAlpha
[
]
const
int16_t
runs
[
]
)
override
;
void
blitV
(
int
x
int
y
int
height
SkAlpha
alpha
)
override
;
void
blitRect
(
int
x
int
y
int
width
int
height
)
override
;
void
blitMask
(
const
SkMask
&
const
SkIRect
&
clip
)
override
;
const
SkPixmap
*
justAnOpaqueColor
(
uint32_t
*
value
)
override
;
bool
isNullBlitter
(
)
const
override
;
}
;
class
SkRectClipBlitter
:
public
SkBlitter
{
public
:
void
init
(
SkBlitter
*
blitter
const
SkIRect
&
clipRect
)
{
SkASSERT
(
!
clipRect
.
isEmpty
(
)
)
;
fBlitter
=
blitter
;
fClipRect
=
clipRect
;
}
void
blitH
(
int
x
int
y
int
width
)
override
;
void
blitAntiH
(
int
x
int
y
const
SkAlpha
[
]
const
int16_t
runs
[
]
)
override
;
void
blitV
(
int
x
int
y
int
height
SkAlpha
alpha
)
override
;
void
blitRect
(
int
x
int
y
int
width
int
height
)
override
;
virtual
void
blitAntiRect
(
int
x
int
y
int
width
int
height
SkAlpha
leftAlpha
SkAlpha
rightAlpha
)
override
;
void
blitMask
(
const
SkMask
&
const
SkIRect
&
clip
)
override
;
const
SkPixmap
*
justAnOpaqueColor
(
uint32_t
*
value
)
override
;
int
requestRowsPreserved
(
)
const
override
{
return
fBlitter
-
>
requestRowsPreserved
(
)
;
}
void
*
allocBlitMemory
(
size_t
sz
)
override
{
return
fBlitter
-
>
allocBlitMemory
(
sz
)
;
}
private
:
SkBlitter
*
fBlitter
;
SkIRect
fClipRect
;
}
;
class
SkRgnClipBlitter
:
public
SkBlitter
{
public
:
void
init
(
SkBlitter
*
blitter
const
SkRegion
*
clipRgn
)
{
SkASSERT
(
clipRgn
&
&
!
clipRgn
-
>
isEmpty
(
)
)
;
fBlitter
=
blitter
;
fRgn
=
clipRgn
;
}
void
blitH
(
int
x
int
y
int
width
)
override
;
void
blitAntiH
(
int
x
int
y
const
SkAlpha
[
]
const
int16_t
runs
[
]
)
override
;
void
blitV
(
int
x
int
y
int
height
SkAlpha
alpha
)
override
;
void
blitRect
(
int
x
int
y
int
width
int
height
)
override
;
void
blitAntiRect
(
int
x
int
y
int
width
int
height
SkAlpha
leftAlpha
SkAlpha
rightAlpha
)
override
;
void
blitMask
(
const
SkMask
&
const
SkIRect
&
clip
)
override
;
const
SkPixmap
*
justAnOpaqueColor
(
uint32_t
*
value
)
override
;
int
requestRowsPreserved
(
)
const
override
{
return
fBlitter
-
>
requestRowsPreserved
(
)
;
}
void
*
allocBlitMemory
(
size_t
sz
)
override
{
return
fBlitter
-
>
allocBlitMemory
(
sz
)
;
}
private
:
SkBlitter
*
fBlitter
;
const
SkRegion
*
fRgn
;
}
;
class
SkBlitterClipper
{
public
:
SkBlitter
*
apply
(
SkBlitter
*
blitter
const
SkRegion
*
clip
const
SkIRect
*
bounds
=
nullptr
)
;
private
:
SkNullBlitter
fNullBlitter
;
SkRectClipBlitter
fRectBlitter
;
SkRgnClipBlitter
fRgnBlitter
;
}
;
#
endif
