#
ifndef
SkFixed15_DEFINED
#
define
SkFixed15_DEFINED
#
include
"
SkTypes
.
h
"
class
SkFixed15
{
public
:
SkFixed15
(
)
=
default
;
SkFixed15
(
float
val
)
:
fVal
(
val
*
32768
)
{
SkASSERT
(
0
.
0f
<
=
val
&
&
val
<
=
1
.
0f
)
;
}
explicit
operator
float
(
)
const
{
return
fVal
*
(
1
/
32768
.
0f
)
;
}
static
SkFixed15
Load
(
uint16_t
val
)
{
SkASSERT
(
val
<
=
32768
)
;
return
val
;
}
uint16_t
store
(
)
const
{
return
fVal
;
}
static
SkFixed15
FromU8
(
uint8_t
val
)
{
return
val
*
128
+
(
val
>
>
1
)
+
(
(
val
+
1
)
>
>
8
)
;
}
uint8_t
to_u8
(
)
const
{
return
(
fVal
-
(
fVal
>
>
8
)
)
>
>
7
;
}
SkFixed15
operator
+
(
SkFixed15
o
)
const
{
return
fVal
+
o
.
fVal
;
}
SkFixed15
operator
-
(
SkFixed15
o
)
const
{
return
fVal
-
o
.
fVal
;
}
SkFixed15
operator
*
(
SkFixed15
o
)
const
{
return
(
fVal
*
o
.
fVal
+
(
1
<
<
14
)
)
>
>
15
;
}
SkFixed15
operator
<
<
(
int
bits
)
const
{
return
fVal
<
<
bits
;
}
SkFixed15
operator
>
>
(
int
bits
)
const
{
return
fVal
>
>
bits
;
}
SkFixed15
&
operator
+
=
(
SkFixed15
o
)
{
return
(
*
this
=
*
this
+
o
)
;
}
SkFixed15
&
operator
-
=
(
SkFixed15
o
)
{
return
(
*
this
=
*
this
-
o
)
;
}
SkFixed15
&
operator
*
=
(
SkFixed15
o
)
{
return
(
*
this
=
*
this
*
o
)
;
}
SkFixed15
&
operator
<
<
=
(
int
bits
)
{
return
(
*
this
=
*
this
<
<
bits
)
;
}
SkFixed15
&
operator
>
>
=
(
int
bits
)
{
return
(
*
this
=
*
this
>
>
bits
)
;
}
bool
operator
=
=
(
SkFixed15
o
)
const
{
return
fVal
=
=
o
.
fVal
;
}
bool
operator
!
=
(
SkFixed15
o
)
const
{
return
fVal
!
=
o
.
fVal
;
}
bool
operator
<
=
(
SkFixed15
o
)
const
{
return
fVal
<
=
o
.
fVal
;
}
bool
operator
>
=
(
SkFixed15
o
)
const
{
return
fVal
>
=
o
.
fVal
;
}
bool
operator
<
(
SkFixed15
o
)
const
{
return
fVal
<
o
.
fVal
;
}
bool
operator
>
(
SkFixed15
o
)
const
{
return
fVal
>
o
.
fVal
;
}
private
:
SkFixed15
(
int
val
)
:
fVal
(
val
)
{
}
uint16_t
fVal
;
}
;
#
endif
