#
ifndef
SkColorSpace_DEFINED
#
define
SkColorSpace_DEFINED
#
include
"
SkRefCnt
.
h
"
struct
SkFloat3
{
float
fVec
[
3
]
;
void
dump
(
)
const
;
}
;
struct
SkFloat3x3
{
float
fMat
[
9
]
;
void
dump
(
)
const
;
}
;
struct
SkPM4f
;
void
SkApply3x3ToPM4f
(
const
SkFloat3x3
&
const
SkPM4f
src
[
]
SkPM4f
dst
[
]
int
count
)
;
class
SkColorSpace
:
public
SkRefCnt
{
public
:
enum
Named
{
kUnknown_Named
kDevice_Named
kSRGB_Named
}
;
static
sk_sp
<
SkColorSpace
>
NewRGB
(
const
SkFloat3x3
&
toXYZD50
const
SkFloat3
&
gamma
)
;
static
sk_sp
<
SkColorSpace
>
NewNamed
(
Named
)
;
static
sk_sp
<
SkColorSpace
>
NewICC
(
const
void
*
size_t
)
;
SkFloat3
gamma
(
)
const
{
return
fGamma
;
}
SkFloat3x3
xyz
(
)
const
{
return
fToXYZD50
;
}
Named
named
(
)
const
{
return
fNamed
;
}
uint32_t
uniqueID
(
)
const
{
return
fUniqueID
;
}
enum
Result
{
kFailure_Result
kIdentity_Result
kNormal_Result
}
;
static
Result
Concat
(
const
SkColorSpace
*
src
const
SkColorSpace
*
dst
SkFloat3x3
*
result
)
;
static
void
Test
(
)
;
void
dump
(
)
const
;
protected
:
SkColorSpace
(
const
SkFloat3x3
&
toXYZ
const
SkFloat3
&
gamma
Named
)
;
private
:
const
SkFloat3x3
fToXYZD50
;
const
SkFloat3
fGamma
;
const
uint32_t
fUniqueID
;
const
Named
fNamed
;
}
;
#
endif
