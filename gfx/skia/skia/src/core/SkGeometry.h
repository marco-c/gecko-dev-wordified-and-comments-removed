#
ifndef
SkGeometry_DEFINED
#
define
SkGeometry_DEFINED
#
include
"
SkMatrix
.
h
"
#
include
"
SkNx
.
h
"
static
inline
Sk2s
from_point
(
const
SkPoint
&
point
)
{
return
Sk2s
:
:
Load
(
&
point
)
;
}
static
inline
SkPoint
to_point
(
const
Sk2s
&
x
)
{
SkPoint
point
;
x
.
store
(
&
point
)
;
return
point
;
}
static
Sk2s
times_2
(
const
Sk2s
&
value
)
{
return
value
+
value
;
}
int
SkFindUnitQuadRoots
(
SkScalar
A
SkScalar
B
SkScalar
C
SkScalar
roots
[
2
]
)
;
SkPoint
SkEvalQuadAt
(
const
SkPoint
src
[
3
]
SkScalar
t
)
;
SkPoint
SkEvalQuadTangentAt
(
const
SkPoint
src
[
3
]
SkScalar
t
)
;
void
SkEvalQuadAt
(
const
SkPoint
src
[
3
]
SkScalar
t
SkPoint
*
pt
SkVector
*
tangent
=
nullptr
)
;
void
SkChopQuadAt
(
const
SkPoint
src
[
3
]
SkPoint
dst
[
5
]
SkScalar
t
)
;
void
SkChopQuadAtHalf
(
const
SkPoint
src
[
3
]
SkPoint
dst
[
5
]
)
;
int
SkFindQuadExtrema
(
SkScalar
a
SkScalar
b
SkScalar
c
SkScalar
tValues
[
1
]
)
;
int
SkChopQuadAtYExtrema
(
const
SkPoint
src
[
3
]
SkPoint
dst
[
5
]
)
;
int
SkChopQuadAtXExtrema
(
const
SkPoint
src
[
3
]
SkPoint
dst
[
5
]
)
;
SkScalar
SkFindQuadMaxCurvature
(
const
SkPoint
src
[
3
]
)
;
int
SkChopQuadAtMaxCurvature
(
const
SkPoint
src
[
3
]
SkPoint
dst
[
5
]
)
;
SK_API
void
SkConvertQuadToCubic
(
const
SkPoint
src
[
3
]
SkPoint
dst
[
4
]
)
;
void
SkEvalCubicAt
(
const
SkPoint
src
[
4
]
SkScalar
t
SkPoint
*
locOrNull
SkVector
*
tangentOrNull
SkVector
*
curvatureOrNull
)
;
void
SkChopCubicAt
(
const
SkPoint
src
[
4
]
SkPoint
dst
[
7
]
SkScalar
t
)
;
void
SkChopCubicAt
(
const
SkPoint
src
[
4
]
SkPoint
dst
[
]
const
SkScalar
t
[
]
int
t_count
)
;
void
SkChopCubicAtHalf
(
const
SkPoint
src
[
4
]
SkPoint
dst
[
7
]
)
;
int
SkFindCubicExtrema
(
SkScalar
a
SkScalar
b
SkScalar
c
SkScalar
d
SkScalar
tValues
[
2
]
)
;
int
SkChopCubicAtYExtrema
(
const
SkPoint
src
[
4
]
SkPoint
dst
[
10
]
)
;
int
SkChopCubicAtXExtrema
(
const
SkPoint
src
[
4
]
SkPoint
dst
[
10
]
)
;
int
SkFindCubicInflections
(
const
SkPoint
src
[
4
]
SkScalar
tValues
[
2
]
)
;
int
SkChopCubicAtInflections
(
const
SkPoint
src
[
4
]
SkPoint
dst
[
10
]
)
;
int
SkFindCubicMaxCurvature
(
const
SkPoint
src
[
4
]
SkScalar
tValues
[
3
]
)
;
int
SkChopCubicAtMaxCurvature
(
const
SkPoint
src
[
4
]
SkPoint
dst
[
13
]
SkScalar
tValues
[
3
]
=
nullptr
)
;
bool
SkChopMonoCubicAtX
(
SkPoint
src
[
4
]
SkScalar
y
SkPoint
dst
[
7
]
)
;
bool
SkChopMonoCubicAtY
(
SkPoint
src
[
4
]
SkScalar
x
SkPoint
dst
[
7
]
)
;
enum
SkCubicType
{
kSerpentine_SkCubicType
kCusp_SkCubicType
kLoop_SkCubicType
kQuadratic_SkCubicType
kLine_SkCubicType
kPoint_SkCubicType
}
;
SkCubicType
SkClassifyCubic
(
const
SkPoint
p
[
4
]
SkScalar
inflection
[
3
]
)
;
enum
SkRotationDirection
{
kCW_SkRotationDirection
kCCW_SkRotationDirection
}
;
struct
SkConic
{
SkConic
(
)
{
}
SkConic
(
const
SkPoint
&
p0
const
SkPoint
&
p1
const
SkPoint
&
p2
SkScalar
w
)
{
fPts
[
0
]
=
p0
;
fPts
[
1
]
=
p1
;
fPts
[
2
]
=
p2
;
fW
=
w
;
}
SkConic
(
const
SkPoint
pts
[
3
]
SkScalar
w
)
{
memcpy
(
fPts
pts
sizeof
(
fPts
)
)
;
fW
=
w
;
}
SkPoint
fPts
[
3
]
;
SkScalar
fW
;
void
set
(
const
SkPoint
pts
[
3
]
SkScalar
w
)
{
memcpy
(
fPts
pts
3
*
sizeof
(
SkPoint
)
)
;
fW
=
w
;
}
void
set
(
const
SkPoint
&
p0
const
SkPoint
&
p1
const
SkPoint
&
p2
SkScalar
w
)
{
fPts
[
0
]
=
p0
;
fPts
[
1
]
=
p1
;
fPts
[
2
]
=
p2
;
fW
=
w
;
}
void
evalAt
(
SkScalar
t
SkPoint
*
pos
SkVector
*
tangent
=
nullptr
)
const
;
bool
SK_WARN_UNUSED_RESULT
chopAt
(
SkScalar
t
SkConic
dst
[
2
]
)
const
;
void
chopAt
(
SkScalar
t1
SkScalar
t2
SkConic
*
dst
)
const
;
void
chop
(
SkConic
dst
[
2
]
)
const
;
SkPoint
evalAt
(
SkScalar
t
)
const
;
SkVector
evalTangentAt
(
SkScalar
t
)
const
;
void
computeAsQuadError
(
SkVector
*
err
)
const
;
bool
asQuadTol
(
SkScalar
tol
)
const
;
int
computeQuadPOW2
(
SkScalar
tol
)
const
;
int
SK_WARN_UNUSED_RESULT
chopIntoQuadsPOW2
(
SkPoint
pts
[
]
int
pow2
)
const
;
bool
findXExtrema
(
SkScalar
*
t
)
const
;
bool
findYExtrema
(
SkScalar
*
t
)
const
;
bool
chopAtXExtrema
(
SkConic
dst
[
2
]
)
const
;
bool
chopAtYExtrema
(
SkConic
dst
[
2
]
)
const
;
void
computeTightBounds
(
SkRect
*
bounds
)
const
;
void
computeFastBounds
(
SkRect
*
bounds
)
const
;
static
SkScalar
TransformW
(
const
SkPoint
[
3
]
SkScalar
w
const
SkMatrix
&
)
;
enum
{
kMaxConicsForArc
=
5
}
;
static
int
BuildUnitArc
(
const
SkVector
&
start
const
SkVector
&
stop
SkRotationDirection
const
SkMatrix
*
SkConic
conics
[
kMaxConicsForArc
]
)
;
}
;
namespace
{
struct
SkQuadCoeff
{
SkQuadCoeff
(
)
{
}
SkQuadCoeff
(
const
Sk2s
&
A
const
Sk2s
&
B
const
Sk2s
&
C
)
:
fA
(
A
)
fB
(
B
)
fC
(
C
)
{
}
SkQuadCoeff
(
const
SkPoint
src
[
3
]
)
{
fC
=
from_point
(
src
[
0
]
)
;
Sk2s
P1
=
from_point
(
src
[
1
]
)
;
Sk2s
P2
=
from_point
(
src
[
2
]
)
;
fB
=
times_2
(
P1
-
fC
)
;
fA
=
P2
-
times_2
(
P1
)
+
fC
;
}
Sk2s
eval
(
SkScalar
t
)
{
Sk2s
tt
(
t
)
;
return
eval
(
tt
)
;
}
Sk2s
eval
(
const
Sk2s
&
tt
)
{
return
(
fA
*
tt
+
fB
)
*
tt
+
fC
;
}
Sk2s
fA
;
Sk2s
fB
;
Sk2s
fC
;
}
;
struct
SkConicCoeff
{
SkConicCoeff
(
const
SkConic
&
conic
)
{
Sk2s
p0
=
from_point
(
conic
.
fPts
[
0
]
)
;
Sk2s
p1
=
from_point
(
conic
.
fPts
[
1
]
)
;
Sk2s
p2
=
from_point
(
conic
.
fPts
[
2
]
)
;
Sk2s
ww
(
conic
.
fW
)
;
Sk2s
p1w
=
p1
*
ww
;
fNumer
.
fC
=
p0
;
fNumer
.
fA
=
p2
-
times_2
(
p1w
)
+
p0
;
fNumer
.
fB
=
times_2
(
p1w
-
p0
)
;
fDenom
.
fC
=
Sk2s
(
1
)
;
fDenom
.
fB
=
times_2
(
ww
-
fDenom
.
fC
)
;
fDenom
.
fA
=
Sk2s
(
0
)
-
fDenom
.
fB
;
}
Sk2s
eval
(
SkScalar
t
)
{
Sk2s
tt
(
t
)
;
Sk2s
numer
=
fNumer
.
eval
(
tt
)
;
Sk2s
denom
=
fDenom
.
eval
(
tt
)
;
return
numer
/
denom
;
}
SkQuadCoeff
fNumer
;
SkQuadCoeff
fDenom
;
}
;
struct
SkCubicCoeff
{
SkCubicCoeff
(
const
SkPoint
src
[
4
]
)
{
Sk2s
P0
=
from_point
(
src
[
0
]
)
;
Sk2s
P1
=
from_point
(
src
[
1
]
)
;
Sk2s
P2
=
from_point
(
src
[
2
]
)
;
Sk2s
P3
=
from_point
(
src
[
3
]
)
;
Sk2s
three
(
3
)
;
fA
=
P3
+
three
*
(
P1
-
P2
)
-
P0
;
fB
=
three
*
(
P2
-
times_2
(
P1
)
+
P0
)
;
fC
=
three
*
(
P1
-
P0
)
;
fD
=
P0
;
}
Sk2s
eval
(
SkScalar
t
)
{
Sk2s
tt
(
t
)
;
return
eval
(
tt
)
;
}
Sk2s
eval
(
const
Sk2s
&
t
)
{
return
(
(
fA
*
t
+
fB
)
*
t
+
fC
)
*
t
+
fD
;
}
Sk2s
fA
;
Sk2s
fB
;
Sk2s
fC
;
Sk2s
fD
;
}
;
}
#
include
"
SkTemplates
.
h
"
class
SkAutoConicToQuads
{
public
:
SkAutoConicToQuads
(
)
:
fQuadCount
(
0
)
{
}
const
SkPoint
*
computeQuads
(
const
SkConic
&
conic
SkScalar
tol
)
{
int
pow2
=
conic
.
computeQuadPOW2
(
tol
)
;
fQuadCount
=
1
<
<
pow2
;
SkPoint
*
pts
=
fStorage
.
reset
(
1
+
2
*
fQuadCount
)
;
fQuadCount
=
conic
.
chopIntoQuadsPOW2
(
pts
pow2
)
;
return
pts
;
}
const
SkPoint
*
computeQuads
(
const
SkPoint
pts
[
3
]
SkScalar
weight
SkScalar
tol
)
{
SkConic
conic
;
conic
.
set
(
pts
weight
)
;
return
computeQuads
(
conic
tol
)
;
}
int
countQuads
(
)
const
{
return
fQuadCount
;
}
private
:
enum
{
kQuadCount
=
8
kPointCount
=
1
+
2
*
kQuadCount
}
;
SkAutoSTMalloc
<
kPointCount
SkPoint
>
fStorage
;
int
fQuadCount
;
}
;
#
endif
