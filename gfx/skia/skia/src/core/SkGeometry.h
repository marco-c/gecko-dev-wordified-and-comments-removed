#
ifndef
SkGeometry_DEFINED
#
define
SkGeometry_DEFINED
#
include
"
SkMatrix
.
h
"
#
include
"
SkNx
.
h
"
static
inline
Sk2s
from_point
(
const
SkPoint
&
point
)
{
return
Sk2s
:
:
Load
(
&
point
.
fX
)
;
}
static
inline
SkPoint
to_point
(
const
Sk2s
&
x
)
{
SkPoint
point
;
x
.
store
(
&
point
.
fX
)
;
return
point
;
}
static
inline
Sk2s
sk2s_cubic_eval
(
const
Sk2s
&
A
const
Sk2s
&
B
const
Sk2s
&
C
const
Sk2s
&
D
const
Sk2s
&
t
)
{
return
(
(
A
*
t
+
B
)
*
t
+
C
)
*
t
+
D
;
}
int
SkFindUnitQuadRoots
(
SkScalar
A
SkScalar
B
SkScalar
C
SkScalar
roots
[
2
]
)
;
SkPoint
SkEvalQuadAt
(
const
SkPoint
src
[
3
]
SkScalar
t
)
;
SkPoint
SkEvalQuadTangentAt
(
const
SkPoint
src
[
3
]
SkScalar
t
)
;
void
SkEvalQuadAt
(
const
SkPoint
src
[
3
]
SkScalar
t
SkPoint
*
pt
SkVector
*
tangent
=
nullptr
)
;
void
SkQuadToCoeff
(
const
SkPoint
pts
[
3
]
SkPoint
coeff
[
3
]
)
;
void
SkCubicToCoeff
(
const
SkPoint
pts
[
4
]
SkPoint
coeff
[
4
]
)
;
void
SkChopQuadAt
(
const
SkPoint
src
[
3
]
SkPoint
dst
[
5
]
SkScalar
t
)
;
void
SkChopQuadAtHalf
(
const
SkPoint
src
[
3
]
SkPoint
dst
[
5
]
)
;
int
SkFindQuadExtrema
(
SkScalar
a
SkScalar
b
SkScalar
c
SkScalar
tValues
[
1
]
)
;
int
SkChopQuadAtYExtrema
(
const
SkPoint
src
[
3
]
SkPoint
dst
[
5
]
)
;
int
SkChopQuadAtXExtrema
(
const
SkPoint
src
[
3
]
SkPoint
dst
[
5
]
)
;
SkScalar
SkFindQuadMaxCurvature
(
const
SkPoint
src
[
3
]
)
;
int
SkChopQuadAtMaxCurvature
(
const
SkPoint
src
[
3
]
SkPoint
dst
[
5
]
)
;
SK_API
void
SkConvertQuadToCubic
(
const
SkPoint
src
[
3
]
SkPoint
dst
[
4
]
)
;
void
SkEvalCubicAt
(
const
SkPoint
src
[
4
]
SkScalar
t
SkPoint
*
locOrNull
SkVector
*
tangentOrNull
SkVector
*
curvatureOrNull
)
;
void
SkChopCubicAt
(
const
SkPoint
src
[
4
]
SkPoint
dst
[
7
]
SkScalar
t
)
;
void
SkChopCubicAt
(
const
SkPoint
src
[
4
]
SkPoint
dst
[
]
const
SkScalar
t
[
]
int
t_count
)
;
void
SkChopCubicAtHalf
(
const
SkPoint
src
[
4
]
SkPoint
dst
[
7
]
)
;
int
SkFindCubicExtrema
(
SkScalar
a
SkScalar
b
SkScalar
c
SkScalar
d
SkScalar
tValues
[
2
]
)
;
int
SkChopCubicAtYExtrema
(
const
SkPoint
src
[
4
]
SkPoint
dst
[
10
]
)
;
int
SkChopCubicAtXExtrema
(
const
SkPoint
src
[
4
]
SkPoint
dst
[
10
]
)
;
int
SkFindCubicInflections
(
const
SkPoint
src
[
4
]
SkScalar
tValues
[
2
]
)
;
int
SkChopCubicAtInflections
(
const
SkPoint
src
[
4
]
SkPoint
dst
[
10
]
)
;
int
SkFindCubicMaxCurvature
(
const
SkPoint
src
[
4
]
SkScalar
tValues
[
3
]
)
;
int
SkChopCubicAtMaxCurvature
(
const
SkPoint
src
[
4
]
SkPoint
dst
[
13
]
SkScalar
tValues
[
3
]
=
nullptr
)
;
bool
SkChopMonoCubicAtX
(
SkPoint
src
[
4
]
SkScalar
y
SkPoint
dst
[
7
]
)
;
bool
SkChopMonoCubicAtY
(
SkPoint
src
[
4
]
SkScalar
x
SkPoint
dst
[
7
]
)
;
enum
SkCubicType
{
kSerpentine_SkCubicType
kCusp_SkCubicType
kLoop_SkCubicType
kQuadratic_SkCubicType
kLine_SkCubicType
kPoint_SkCubicType
}
;
SkCubicType
SkClassifyCubic
(
const
SkPoint
p
[
4
]
SkScalar
inflection
[
3
]
)
;
enum
SkRotationDirection
{
kCW_SkRotationDirection
kCCW_SkRotationDirection
}
;
#
define
kSkBuildQuadArcStorage
17
int
SkBuildQuadArc
(
const
SkVector
&
unitStart
const
SkVector
&
unitStop
SkRotationDirection
const
SkMatrix
*
SkPoint
quadPoints
[
]
)
;
struct
SkConic
{
SkConic
(
)
{
}
SkConic
(
const
SkPoint
&
p0
const
SkPoint
&
p1
const
SkPoint
&
p2
SkScalar
w
)
{
fPts
[
0
]
=
p0
;
fPts
[
1
]
=
p1
;
fPts
[
2
]
=
p2
;
fW
=
w
;
}
SkConic
(
const
SkPoint
pts
[
3
]
SkScalar
w
)
{
memcpy
(
fPts
pts
sizeof
(
fPts
)
)
;
fW
=
w
;
}
SkPoint
fPts
[
3
]
;
SkScalar
fW
;
void
set
(
const
SkPoint
pts
[
3
]
SkScalar
w
)
{
memcpy
(
fPts
pts
3
*
sizeof
(
SkPoint
)
)
;
fW
=
w
;
}
void
set
(
const
SkPoint
&
p0
const
SkPoint
&
p1
const
SkPoint
&
p2
SkScalar
w
)
{
fPts
[
0
]
=
p0
;
fPts
[
1
]
=
p1
;
fPts
[
2
]
=
p2
;
fW
=
w
;
}
void
evalAt
(
SkScalar
t
SkPoint
*
pos
SkVector
*
tangent
=
nullptr
)
const
;
void
chopAt
(
SkScalar
t
SkConic
dst
[
2
]
)
const
;
void
chop
(
SkConic
dst
[
2
]
)
const
;
SkPoint
evalAt
(
SkScalar
t
)
const
;
SkVector
evalTangentAt
(
SkScalar
t
)
const
;
void
computeAsQuadError
(
SkVector
*
err
)
const
;
bool
asQuadTol
(
SkScalar
tol
)
const
;
int
computeQuadPOW2
(
SkScalar
tol
)
const
;
int
chopIntoQuadsPOW2
(
SkPoint
pts
[
]
int
pow2
)
const
;
bool
findXExtrema
(
SkScalar
*
t
)
const
;
bool
findYExtrema
(
SkScalar
*
t
)
const
;
bool
chopAtXExtrema
(
SkConic
dst
[
2
]
)
const
;
bool
chopAtYExtrema
(
SkConic
dst
[
2
]
)
const
;
void
computeTightBounds
(
SkRect
*
bounds
)
const
;
void
computeFastBounds
(
SkRect
*
bounds
)
const
;
static
SkScalar
TransformW
(
const
SkPoint
[
3
]
SkScalar
w
const
SkMatrix
&
)
;
enum
{
kMaxConicsForArc
=
5
}
;
static
int
BuildUnitArc
(
const
SkVector
&
start
const
SkVector
&
stop
SkRotationDirection
const
SkMatrix
*
SkConic
conics
[
kMaxConicsForArc
]
)
;
}
;
#
include
"
SkTemplates
.
h
"
class
SkAutoConicToQuads
{
public
:
SkAutoConicToQuads
(
)
:
fQuadCount
(
0
)
{
}
const
SkPoint
*
computeQuads
(
const
SkConic
&
conic
SkScalar
tol
)
{
int
pow2
=
conic
.
computeQuadPOW2
(
tol
)
;
fQuadCount
=
1
<
<
pow2
;
SkPoint
*
pts
=
fStorage
.
reset
(
1
+
2
*
fQuadCount
)
;
conic
.
chopIntoQuadsPOW2
(
pts
pow2
)
;
return
pts
;
}
const
SkPoint
*
computeQuads
(
const
SkPoint
pts
[
3
]
SkScalar
weight
SkScalar
tol
)
{
SkConic
conic
;
conic
.
set
(
pts
weight
)
;
return
computeQuads
(
conic
tol
)
;
}
int
countQuads
(
)
const
{
return
fQuadCount
;
}
private
:
enum
{
kQuadCount
=
8
kPointCount
=
1
+
2
*
kQuadCount
}
;
SkAutoSTMalloc
<
kPointCount
SkPoint
>
fStorage
;
int
fQuadCount
;
}
;
#
endif
