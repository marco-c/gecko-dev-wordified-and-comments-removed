#
ifndef
SkChecksum_DEFINED
#
define
SkChecksum_DEFINED
#
include
"
include
/
core
/
SkString
.
h
"
#
include
"
include
/
private
/
base
/
SkAPI
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
string
>
#
include
<
string_view
>
#
include
<
type_traits
>
namespace
SkChecksum
{
static
inline
uint32_t
Mix
(
uint32_t
hash
)
{
hash
^
=
hash
>
>
16
;
hash
*
=
0x85ebca6b
;
hash
^
=
hash
>
>
13
;
hash
*
=
0xc2b2ae35
;
hash
^
=
hash
>
>
16
;
return
hash
;
}
static
inline
uint32_t
CheapMix
(
uint32_t
hash
)
{
hash
^
=
hash
>
>
16
;
hash
*
=
0x85ebca6b
;
hash
^
=
hash
>
>
16
;
return
hash
;
}
uint32_t
SK_SPI
Hash32
(
const
void
*
data
size_t
bytes
uint32_t
seed
=
0
)
;
uint64_t
SK_SPI
Hash64
(
const
void
*
data
size_t
bytes
uint64_t
seed
=
0
)
;
}
struct
SkGoodHash
{
template
<
typename
K
>
std
:
:
enable_if_t
<
std
:
:
has_unique_object_representations
<
K
>
:
:
value
&
&
sizeof
(
K
)
=
=
4
uint32_t
>
operator
(
)
(
const
K
&
k
)
const
{
return
SkChecksum
:
:
Mix
(
*
(
const
uint32_t
*
)
&
k
)
;
}
template
<
typename
K
>
std
:
:
enable_if_t
<
std
:
:
has_unique_object_representations
<
K
>
:
:
value
&
&
sizeof
(
K
)
!
=
4
uint32_t
>
operator
(
)
(
const
K
&
k
)
const
{
return
SkChecksum
:
:
Hash32
(
&
k
sizeof
(
K
)
)
;
}
uint32_t
operator
(
)
(
const
SkString
&
k
)
const
{
return
SkChecksum
:
:
Hash32
(
k
.
c_str
(
)
k
.
size
(
)
)
;
}
uint32_t
operator
(
)
(
const
std
:
:
string
&
k
)
const
{
return
SkChecksum
:
:
Hash32
(
k
.
c_str
(
)
k
.
size
(
)
)
;
}
uint32_t
operator
(
)
(
std
:
:
string_view
k
)
const
{
return
SkChecksum
:
:
Hash32
(
k
.
data
(
)
k
.
size
(
)
)
;
}
}
;
template
<
typename
K
>
struct
SkForceDirectHash
{
uint32_t
operator
(
)
(
const
K
&
k
)
const
{
return
SkChecksum
:
:
Hash32
(
&
k
sizeof
(
K
)
)
;
}
}
;
#
endif
