#
ifndef
SkMathPriv_DEFINED
#
define
SkMathPriv_DEFINED
#
include
"
SkMath
.
h
"
#
if
defined
(
SK_BUILD_FOR_IOS
)
&
&
(
defined
(
SK_BUILD_FOR_ARM32
)
|
|
defined
(
SK_BUILD_FOR_ARM64
)
)
#
define
SK_CPU_FLUSH_TO_ZERO
#
endif
#
define
SkExtractSign
(
n
)
(
(
int32_t
)
(
n
)
>
>
31
)
static
inline
int32_t
SkApplySign
(
int32_t
n
int32_t
sign
)
{
SkASSERT
(
sign
=
=
0
|
|
sign
=
=
-
1
)
;
return
(
n
^
sign
)
-
sign
;
}
static
inline
int32_t
SkCopySign32
(
int32_t
x
int32_t
y
)
{
return
SkApplySign
(
x
SkExtractSign
(
x
^
y
)
)
;
}
static
inline
unsigned
SkClampUMax
(
unsigned
value
unsigned
max
)
{
if
(
value
>
max
)
{
value
=
max
;
}
return
value
;
}
static
inline
U8CPU
SkMulDiv255Trunc
(
U8CPU
a
U8CPU
b
)
{
SkASSERT
(
(
uint8_t
)
a
=
=
a
)
;
SkASSERT
(
(
uint8_t
)
b
=
=
b
)
;
unsigned
prod
=
a
*
b
+
1
;
return
(
prod
+
(
prod
>
>
8
)
)
>
>
8
;
}
static
inline
U8CPU
SkMulDiv255Ceiling
(
U8CPU
a
U8CPU
b
)
{
SkASSERT
(
(
uint8_t
)
a
=
=
a
)
;
SkASSERT
(
(
uint8_t
)
b
=
=
b
)
;
unsigned
prod
=
a
*
b
+
255
;
return
(
prod
+
(
prod
>
>
8
)
)
>
>
8
;
}
static
inline
unsigned
SkDiv255Round
(
unsigned
prod
)
{
prod
+
=
128
;
return
(
prod
+
(
prod
>
>
8
)
)
>
>
8
;
}
static
inline
float
SkPinToUnitFloat
(
float
x
)
{
return
SkTMin
(
SkTMax
(
x
0
.
0f
)
1
.
0f
)
;
}
#
if
defined
(
_MSC_VER
)
#
include
<
intrin
.
h
>
static
inline
uint32_t
SkBSwap32
(
uint32_t
v
)
{
return
_byteswap_ulong
(
v
)
;
}
#
else
static
inline
uint32_t
SkBSwap32
(
uint32_t
v
)
{
return
__builtin_bswap32
(
v
)
;
}
#
endif
int
SkCLZ_portable
(
uint32_t
)
;
#
ifndef
SkCLZ
#
if
defined
(
SK_BUILD_FOR_WIN32
)
#
include
<
intrin
.
h
>
static
inline
int
SkCLZ
(
uint32_t
mask
)
{
if
(
mask
)
{
unsigned
long
index
;
_BitScanReverse
(
&
index
mask
)
;
#
pragma
warning
(
suppress
:
6102
)
/
/
Using
'
index
'
from
failed
function
call
return
index
^
0x1F
;
}
else
{
return
32
;
}
}
#
elif
defined
(
SK_CPU_ARM32
)
|
|
defined
(
__GNUC__
)
|
|
defined
(
__clang__
)
static
inline
int
SkCLZ
(
uint32_t
mask
)
{
return
mask
?
__builtin_clz
(
mask
)
:
32
;
}
#
else
#
define
SkCLZ
(
x
)
SkCLZ_portable
(
x
)
#
endif
#
endif
static
inline
int
SkNextPow2
(
int
value
)
{
SkASSERT
(
value
>
0
)
;
return
1
<
<
(
32
-
SkCLZ
(
value
-
1
)
)
;
}
static
inline
int
SkNextLog2
(
uint32_t
value
)
{
SkASSERT
(
value
!
=
0
)
;
return
32
-
SkCLZ
(
value
-
1
)
;
}
static
inline
uint32_t
GrNextPow2
(
uint32_t
n
)
{
return
n
?
(
1
<
<
(
32
-
SkCLZ
(
n
-
1
)
)
)
:
1
;
}
static
inline
int
GrNextPow2
(
int
n
)
{
SkASSERT
(
n
>
=
0
)
;
return
n
?
(
1
<
<
(
32
-
SkCLZ
(
n
-
1
)
)
)
:
1
;
}
#
endif
