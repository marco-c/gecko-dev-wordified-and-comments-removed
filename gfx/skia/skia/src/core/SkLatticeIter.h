#
ifndef
SkLatticeIter_DEFINED
#
define
SkLatticeIter_DEFINED
#
include
"
SkCanvas
.
h
"
#
include
"
SkScalar
.
h
"
#
include
"
SkTArray
.
h
"
struct
SkIRect
;
struct
SkRect
;
class
SK_API
SkLatticeIter
{
public
:
static
bool
Valid
(
int
imageWidth
int
imageHeight
const
SkCanvas
:
:
Lattice
&
lattice
)
;
SkLatticeIter
(
const
SkCanvas
:
:
Lattice
&
lattice
const
SkRect
&
dst
)
;
static
bool
Valid
(
int
imageWidth
int
imageHeight
const
SkIRect
&
center
)
;
SkLatticeIter
(
int
imageWidth
int
imageHeight
const
SkIRect
&
center
const
SkRect
&
dst
)
;
bool
next
(
SkIRect
*
src
SkRect
*
dst
bool
*
isFixedColor
=
nullptr
SkColor
*
fixedColor
=
nullptr
)
;
bool
next
(
SkRect
*
src
SkRect
*
dst
bool
*
isFixedColor
=
nullptr
SkColor
*
fixedColor
=
nullptr
)
{
SkIRect
isrcR
;
if
(
this
-
>
next
(
&
isrcR
dst
isFixedColor
fixedColor
)
)
{
*
src
=
SkRect
:
:
Make
(
isrcR
)
;
return
true
;
}
return
false
;
}
void
mapDstScaleTranslate
(
const
SkMatrix
&
matrix
)
;
int
numRectsToDraw
(
)
const
{
return
fNumRectsToDraw
;
}
private
:
SkTArray
<
int
>
fSrcX
;
SkTArray
<
int
>
fSrcY
;
SkTArray
<
SkScalar
>
fDstX
;
SkTArray
<
SkScalar
>
fDstY
;
SkTArray
<
SkCanvas
:
:
Lattice
:
:
RectType
>
fRectTypes
;
SkTArray
<
SkColor
>
fColors
;
int
fCurrX
;
int
fCurrY
;
int
fNumRectsInLattice
;
int
fNumRectsToDraw
;
}
;
#
endif
