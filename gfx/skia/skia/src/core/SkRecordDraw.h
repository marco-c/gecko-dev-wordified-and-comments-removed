#
ifndef
SkRecordDraw_DEFINED
#
define
SkRecordDraw_DEFINED
#
include
"
include
/
core
/
SkBBHFactory
.
h
"
#
include
"
include
/
core
/
SkCanvas
.
h
"
#
include
"
include
/
core
/
SkMatrix
.
h
"
#
include
"
src
/
core
/
SkBigPicture
.
h
"
#
include
"
src
/
core
/
SkRecord
.
h
"
class
SkDrawable
;
class
SkLayerInfo
;
void
SkRecordFillBounds
(
const
SkRect
&
cullRect
const
SkRecord
&
SkRect
bounds
[
]
SkBBoxHierarchy
:
:
Metadata
[
]
)
;
void
SkRecordComputeLayers
(
const
SkRect
&
cullRect
const
SkRecord
&
SkRect
bounds
[
]
const
SkBigPicture
:
:
SnapshotArray
*
SkLayerInfo
*
data
)
;
void
SkRecordDraw
(
const
SkRecord
&
SkCanvas
*
SkPicture
const
*
const
drawablePicts
[
]
SkDrawable
*
const
drawables
[
]
int
drawableCount
const
SkBBoxHierarchy
*
SkPicture
:
:
AbortCallback
*
)
;
void
SkRecordPartialDraw
(
const
SkRecord
&
SkCanvas
*
SkPicture
const
*
const
drawablePicts
[
]
int
drawableCount
int
start
int
stop
const
SkM44
&
initialCTM
)
;
namespace
SkRecords
{
class
Draw
:
SkNoncopyable
{
public
:
explicit
Draw
(
SkCanvas
*
canvas
SkPicture
const
*
const
drawablePicts
[
]
SkDrawable
*
const
drawables
[
]
int
drawableCount
const
SkM44
*
initialCTM
=
nullptr
)
:
fInitialCTM
(
initialCTM
?
*
initialCTM
:
canvas
-
>
getLocalToDevice
(
)
)
fCanvas
(
canvas
)
fDrawablePicts
(
drawablePicts
)
fDrawables
(
drawables
)
fDrawableCount
(
drawableCount
)
{
}
template
<
typename
T
>
void
operator
(
)
(
const
T
&
r
)
{
this
-
>
draw
(
r
)
;
}
protected
:
SkPicture
const
*
const
*
drawablePicts
(
)
const
{
return
fDrawablePicts
;
}
int
drawableCount
(
)
const
{
return
fDrawableCount
;
}
private
:
template
<
typename
T
>
void
draw
(
const
T
&
)
;
const
SkM44
fInitialCTM
;
SkCanvas
*
fCanvas
;
SkPicture
const
*
const
*
fDrawablePicts
;
SkDrawable
*
const
*
fDrawables
;
int
fDrawableCount
;
}
;
}
#
endif
