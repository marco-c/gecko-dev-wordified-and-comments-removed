#
ifndef
SkLightingShader_DEFINED
#
define
SkLightingShader_DEFINED
#
include
"
SkFlattenable
.
h
"
#
include
"
SkLight
.
h
"
#
include
"
SkShader
.
h
"
#
include
"
SkTDArray
.
h
"
class
SkBitmap
;
class
SkMatrix
;
class
SK_API
SkLightingShader
{
public
:
class
Lights
:
public
SkRefCnt
{
public
:
class
Builder
{
public
:
Builder
(
const
SkLight
lights
[
]
int
numLights
)
:
fLights
(
new
Lights
(
lights
numLights
)
)
{
}
Builder
(
)
:
fLights
(
new
Lights
)
{
}
void
add
(
const
SkLight
&
light
)
{
if
(
fLights
)
{
*
fLights
-
>
fLights
.
push
(
)
=
light
;
}
}
const
Lights
*
finish
(
)
{
return
fLights
.
release
(
)
;
}
private
:
SkAutoTUnref
<
Lights
>
fLights
;
}
;
int
numLights
(
)
const
{
return
fLights
.
count
(
)
;
}
const
SkLight
&
light
(
int
index
)
const
{
return
fLights
[
index
]
;
}
private
:
Lights
(
)
{
}
Lights
(
const
SkLight
lights
[
]
int
numLights
)
:
fLights
(
lights
numLights
)
{
}
SkTDArray
<
SkLight
>
fLights
;
typedef
SkRefCnt
INHERITED
;
}
;
static
sk_sp
<
SkShader
>
Make
(
const
SkBitmap
&
diffuse
const
SkBitmap
&
normal
const
Lights
*
lights
const
SkVector
&
invNormRotation
const
SkMatrix
*
diffLocalMatrix
const
SkMatrix
*
normLocalMatrix
)
;
SK_DECLARE_FLATTENABLE_REGISTRAR_GROUP
(
)
}
;
#
endif
