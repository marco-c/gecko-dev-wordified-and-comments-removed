#
include
"
SkWriteBuffer
.
h
"
#
include
"
SkBitmap
.
h
"
#
include
"
SkData
.
h
"
#
include
"
SkDeduper
.
h
"
#
include
"
SkPixelRef
.
h
"
#
include
"
SkPtrRecorder
.
h
"
#
include
"
SkStream
.
h
"
#
include
"
SkTypeface
.
h
"
SkBinaryWriteBuffer
:
:
SkBinaryWriteBuffer
(
uint32_t
flags
)
:
fFlags
(
flags
)
fFactorySet
(
nullptr
)
fTFSet
(
nullptr
)
{
}
SkBinaryWriteBuffer
:
:
SkBinaryWriteBuffer
(
void
*
storage
size_t
storageSize
uint32_t
flags
)
:
fFlags
(
flags
)
fFactorySet
(
nullptr
)
fWriter
(
storage
storageSize
)
fTFSet
(
nullptr
)
{
}
SkBinaryWriteBuffer
:
:
~
SkBinaryWriteBuffer
(
)
{
SkSafeUnref
(
fFactorySet
)
;
SkSafeUnref
(
fTFSet
)
;
}
void
SkBinaryWriteBuffer
:
:
writeByteArray
(
const
void
*
data
size_t
size
)
{
fWriter
.
write32
(
SkToU32
(
size
)
)
;
fWriter
.
writePad
(
data
size
)
;
}
void
SkBinaryWriteBuffer
:
:
writeBool
(
bool
value
)
{
fWriter
.
writeBool
(
value
)
;
}
void
SkBinaryWriteBuffer
:
:
writeScalar
(
SkScalar
value
)
{
fWriter
.
writeScalar
(
value
)
;
}
void
SkBinaryWriteBuffer
:
:
writeScalarArray
(
const
SkScalar
*
value
uint32_t
count
)
{
fWriter
.
write32
(
count
)
;
fWriter
.
write
(
value
count
*
sizeof
(
SkScalar
)
)
;
}
void
SkBinaryWriteBuffer
:
:
writeInt
(
int32_t
value
)
{
fWriter
.
write32
(
value
)
;
}
void
SkBinaryWriteBuffer
:
:
writeIntArray
(
const
int32_t
*
value
uint32_t
count
)
{
fWriter
.
write32
(
count
)
;
fWriter
.
write
(
value
count
*
sizeof
(
int32_t
)
)
;
}
void
SkBinaryWriteBuffer
:
:
writeUInt
(
uint32_t
value
)
{
fWriter
.
write32
(
value
)
;
}
void
SkBinaryWriteBuffer
:
:
writeString
(
const
char
*
value
)
{
fWriter
.
writeString
(
value
)
;
}
void
SkBinaryWriteBuffer
:
:
writeColor
(
SkColor
color
)
{
fWriter
.
write32
(
color
)
;
}
void
SkBinaryWriteBuffer
:
:
writeColorArray
(
const
SkColor
*
color
uint32_t
count
)
{
fWriter
.
write32
(
count
)
;
fWriter
.
write
(
color
count
*
sizeof
(
SkColor
)
)
;
}
void
SkBinaryWriteBuffer
:
:
writeColor4f
(
const
SkColor4f
&
color
)
{
fWriter
.
write
(
&
color
sizeof
(
SkColor4f
)
)
;
}
void
SkBinaryWriteBuffer
:
:
writeColor4fArray
(
const
SkColor4f
*
color
uint32_t
count
)
{
fWriter
.
write32
(
count
)
;
fWriter
.
write
(
color
count
*
sizeof
(
SkColor4f
)
)
;
}
void
SkBinaryWriteBuffer
:
:
writePoint
(
const
SkPoint
&
point
)
{
fWriter
.
writeScalar
(
point
.
fX
)
;
fWriter
.
writeScalar
(
point
.
fY
)
;
}
void
SkBinaryWriteBuffer
:
:
writePointArray
(
const
SkPoint
*
point
uint32_t
count
)
{
fWriter
.
write32
(
count
)
;
fWriter
.
write
(
point
count
*
sizeof
(
SkPoint
)
)
;
}
void
SkBinaryWriteBuffer
:
:
writeMatrix
(
const
SkMatrix
&
matrix
)
{
fWriter
.
writeMatrix
(
matrix
)
;
}
void
SkBinaryWriteBuffer
:
:
writeIRect
(
const
SkIRect
&
rect
)
{
fWriter
.
write
(
&
rect
sizeof
(
SkIRect
)
)
;
}
void
SkBinaryWriteBuffer
:
:
writeRect
(
const
SkRect
&
rect
)
{
fWriter
.
writeRect
(
rect
)
;
}
void
SkBinaryWriteBuffer
:
:
writeRegion
(
const
SkRegion
&
region
)
{
fWriter
.
writeRegion
(
region
)
;
}
void
SkBinaryWriteBuffer
:
:
writePath
(
const
SkPath
&
path
)
{
fWriter
.
writePath
(
path
)
;
}
size_t
SkBinaryWriteBuffer
:
:
writeStream
(
SkStream
*
stream
size_t
length
)
{
fWriter
.
write32
(
SkToU32
(
length
)
)
;
size_t
bytesWritten
=
fWriter
.
readFromStream
(
stream
length
)
;
if
(
bytesWritten
<
length
)
{
fWriter
.
reservePad
(
length
-
bytesWritten
)
;
}
return
bytesWritten
;
}
bool
SkBinaryWriteBuffer
:
:
writeToStream
(
SkWStream
*
stream
)
{
return
fWriter
.
writeToStream
(
stream
)
;
}
static
void
write_encoded_bitmap
(
SkBinaryWriteBuffer
*
buffer
SkData
*
data
const
SkIPoint
&
origin
)
{
buffer
-
>
writeDataAsByteArray
(
data
)
;
buffer
-
>
write32
(
origin
.
fX
)
;
buffer
-
>
write32
(
origin
.
fY
)
;
}
void
SkBinaryWriteBuffer
:
:
writeBitmap
(
const
SkBitmap
&
bitmap
)
{
this
-
>
writeInt
(
bitmap
.
width
(
)
)
;
this
-
>
writeInt
(
bitmap
.
height
(
)
)
;
this
-
>
writeBool
(
false
)
;
SkPixelRef
*
pixelRef
=
bitmap
.
pixelRef
(
)
;
if
(
pixelRef
)
{
sk_sp
<
SkData
>
existingData
(
pixelRef
-
>
refEncodedData
(
)
)
;
if
(
existingData
)
{
if
(
!
fPixelSerializer
|
|
fPixelSerializer
-
>
useEncodedData
(
existingData
-
>
data
(
)
existingData
-
>
size
(
)
)
)
{
write_encoded_bitmap
(
this
existingData
.
get
(
)
bitmap
.
pixelRefOrigin
(
)
)
;
return
;
}
}
SkAutoPixmapUnlock
result
;
if
(
fPixelSerializer
&
&
bitmap
.
requestLock
(
&
result
)
)
{
sk_sp
<
SkData
>
data
(
fPixelSerializer
-
>
encode
(
result
.
pixmap
(
)
)
)
;
if
(
data
)
{
write_encoded_bitmap
(
this
data
.
get
(
)
SkIPoint
:
:
Make
(
0
0
)
)
;
return
;
}
}
}
this
-
>
writeUInt
(
0
)
;
SkBitmap
:
:
WriteRawPixels
(
this
bitmap
)
;
}
void
SkBinaryWriteBuffer
:
:
writeImage
(
const
SkImage
*
image
)
{
if
(
fDeduper
)
{
this
-
>
write32
(
fDeduper
-
>
findOrDefineImage
(
const_cast
<
SkImage
*
>
(
image
)
)
)
;
return
;
}
this
-
>
writeInt
(
image
-
>
width
(
)
)
;
this
-
>
writeInt
(
image
-
>
height
(
)
)
;
sk_sp
<
SkData
>
encoded
(
image
-
>
encode
(
this
-
>
getPixelSerializer
(
)
)
)
;
if
(
encoded
&
&
encoded
-
>
size
(
)
>
0
)
{
write_encoded_bitmap
(
this
encoded
.
get
(
)
SkIPoint
:
:
Make
(
0
0
)
)
;
return
;
}
SkBitmap
bm
;
if
(
image
-
>
asLegacyBitmap
(
&
bm
SkImage
:
:
kRO_LegacyBitmapMode
)
)
{
this
-
>
writeUInt
(
1
)
;
SkBitmap
:
:
WriteRawPixels
(
this
bm
)
;
return
;
}
this
-
>
writeUInt
(
0
)
;
}
void
SkBinaryWriteBuffer
:
:
writeTypeface
(
SkTypeface
*
obj
)
{
if
(
fDeduper
)
{
this
-
>
write32
(
fDeduper
-
>
findOrDefineTypeface
(
obj
)
)
;
return
;
}
if
(
nullptr
=
=
obj
|
|
nullptr
=
=
fTFSet
)
{
fWriter
.
write32
(
0
)
;
}
else
{
fWriter
.
write32
(
fTFSet
-
>
add
(
obj
)
)
;
}
}
void
SkBinaryWriteBuffer
:
:
writePaint
(
const
SkPaint
&
paint
)
{
paint
.
flatten
(
*
this
)
;
}
SkFactorySet
*
SkBinaryWriteBuffer
:
:
setFactoryRecorder
(
SkFactorySet
*
rec
)
{
SkRefCnt_SafeAssign
(
fFactorySet
rec
)
;
return
rec
;
}
SkRefCntSet
*
SkBinaryWriteBuffer
:
:
setTypefaceRecorder
(
SkRefCntSet
*
rec
)
{
SkRefCnt_SafeAssign
(
fTFSet
rec
)
;
return
rec
;
}
void
SkBinaryWriteBuffer
:
:
setPixelSerializer
(
SkPixelSerializer
*
serializer
)
{
fPixelSerializer
.
reset
(
serializer
)
;
if
(
serializer
)
{
serializer
-
>
ref
(
)
;
}
}
void
SkBinaryWriteBuffer
:
:
writeFlattenable
(
const
SkFlattenable
*
flattenable
)
{
if
(
nullptr
=
=
flattenable
)
{
this
-
>
write32
(
0
)
;
return
;
}
if
(
fDeduper
)
{
this
-
>
write32
(
fDeduper
-
>
findOrDefineFactory
(
const_cast
<
SkFlattenable
*
>
(
flattenable
)
)
)
;
}
else
{
if
(
fFactorySet
)
{
SkFlattenable
:
:
Factory
factory
=
flattenable
-
>
getFactory
(
)
;
SkASSERT
(
factory
)
;
this
-
>
write32
(
fFactorySet
-
>
add
(
factory
)
)
;
}
else
{
const
char
*
name
=
flattenable
-
>
getTypeName
(
)
;
SkASSERT
(
name
)
;
SkString
key
(
name
)
;
if
(
uint32_t
*
indexPtr
=
fFlattenableDict
.
find
(
key
)
)
{
SkASSERT
(
0
=
=
*
indexPtr
>
>
24
)
;
this
-
>
write32
(
*
indexPtr
<
<
8
)
;
}
else
{
SkASSERT
(
strcmp
(
"
"
name
)
)
;
this
-
>
writeString
(
name
)
;
fFlattenableDict
.
set
(
key
fFlattenableDict
.
count
(
)
+
1
)
;
}
}
}
(
void
)
fWriter
.
reserve
(
sizeof
(
uint32_t
)
)
;
size_t
offset
=
fWriter
.
bytesWritten
(
)
;
flattenable
-
>
flatten
(
*
this
)
;
size_t
objSize
=
fWriter
.
bytesWritten
(
)
-
offset
;
fWriter
.
overwriteTAt
(
offset
-
sizeof
(
uint32_t
)
SkToU32
(
objSize
)
)
;
}
