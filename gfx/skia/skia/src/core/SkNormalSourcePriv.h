#
ifndef
SkNormalSourcePriv_DEFINED
#
define
SkNormalSourcePriv_DEFINED
#
if
SK_SUPPORT_GPU
#
include
"
glsl
/
GrGLSLFragmentProcessor
.
h
"
#
include
"
glsl
/
GrGLSLFragmentShaderBuilder
.
h
"
class
GLSLNormalFP
:
public
GrGLSLFragmentProcessor
{
public
:
GLSLNormalFP
(
)
:
fDidIntercept
(
false
)
{
}
void
emitCode
(
EmitArgs
&
args
)
final
override
{
if
(
args
.
fFp
.
usesDistanceVectorField
(
)
&
&
!
args
.
fGpImplementsDistanceVector
)
{
GrGLSLFPFragmentBuilder
*
fragBuilder
=
args
.
fFragBuilder
;
fragBuilder
-
>
codeAppendf
(
"
/
/
GLSLNormalFP
intercepted
emitCode
call
GP
does
not
"
"
implement
required
distance
vector
feature
\
n
"
)
;
fragBuilder
-
>
codeAppendf
(
"
%
s
=
vec4
(
0
0
1
0
)
;
"
args
.
fOutputColor
)
;
fDidIntercept
=
true
;
}
else
{
this
-
>
onEmitCode
(
args
)
;
}
}
void
onSetData
(
const
GrGLSLProgramDataManager
&
pdman
const
GrFragmentProcessor
&
proc
)
final
override
{
if
(
!
fDidIntercept
)
{
this
-
>
setNormalData
(
pdman
proc
)
;
}
}
protected
:
virtual
void
onEmitCode
(
EmitArgs
&
args
)
=
0
;
virtual
void
setNormalData
(
const
GrGLSLProgramDataManager
&
const
GrFragmentProcessor
&
)
=
0
;
private
:
bool
fDidIntercept
;
}
;
#
endif
#
endif
