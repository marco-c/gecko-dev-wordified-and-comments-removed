#
ifndef
SkGlyphCache_DEFINED
#
define
SkGlyphCache_DEFINED
#
include
"
SkArenaAlloc
.
h
"
#
include
"
SkDescriptor
.
h
"
#
include
"
SkGlyph
.
h
"
#
include
"
SkGlyphRun
.
h
"
#
include
"
SkPaint
.
h
"
#
include
"
SkTHash
.
h
"
#
include
"
SkScalerContext
.
h
"
#
include
"
SkTemplates
.
h
"
#
include
<
memory
>
class
SkGlyphCache
:
public
SkGlyphCacheInterface
{
public
:
SkGlyphCache
(
const
SkDescriptor
&
desc
std
:
:
unique_ptr
<
SkScalerContext
>
scaler
const
SkPaint
:
:
FontMetrics
&
)
;
~
SkGlyphCache
(
)
override
;
const
SkDescriptor
&
getDescriptor
(
)
const
;
bool
isGlyphCached
(
SkGlyphID
glyphID
SkFixed
x
SkFixed
y
)
const
;
SkGlyph
*
getRawGlyphByID
(
SkPackedGlyphID
)
;
const
SkGlyph
&
getUnicharAdvance
(
SkUnichar
)
;
const
SkGlyph
&
getGlyphIDAdvance
(
SkGlyphID
)
;
const
SkGlyph
&
getUnicharMetrics
(
SkUnichar
)
;
const
SkGlyph
&
getGlyphIDMetrics
(
SkGlyphID
)
;
const
SkGlyph
&
getUnicharMetrics
(
SkUnichar
SkFixed
x
SkFixed
y
)
;
const
SkGlyph
&
getGlyphIDMetrics
(
uint16_t
SkFixed
x
SkFixed
y
)
;
void
getAdvances
(
SkSpan
<
const
SkGlyphID
>
SkPoint
[
]
)
;
SkGlyphID
unicharToGlyph
(
SkUnichar
)
;
SkUnichar
glyphToUnichar
(
SkGlyphID
)
;
unsigned
getGlyphCount
(
)
const
;
int
countCachedGlyphs
(
)
const
;
const
void
*
findImage
(
const
SkGlyph
&
)
;
void
initializeImage
(
const
volatile
void
*
data
size_t
size
SkGlyph
*
)
;
void
findIntercepts
(
const
SkScalar
bounds
[
2
]
SkScalar
scale
SkScalar
xPos
bool
yAxis
SkGlyph
*
SkScalar
*
array
int
*
count
)
;
const
SkPath
*
findPath
(
const
SkGlyph
&
)
;
bool
initializePath
(
SkGlyph
*
const
volatile
void
*
data
size_t
size
)
;
bool
belongsToCache
(
const
SkGlyph
*
glyph
)
const
;
const
SkGlyph
*
getCachedGlyphAnySubPix
(
SkGlyphID
SkPackedGlyphID
vetoID
=
SkPackedGlyphID
(
)
)
const
;
void
initializeGlyphFromFallback
(
SkGlyph
*
glyph
const
SkGlyph
&
)
;
const
SkPaint
:
:
FontMetrics
&
getFontMetrics
(
)
const
{
return
fFontMetrics
;
}
SkMask
:
:
Format
getMaskFormat
(
)
const
{
return
fScalerContext
-
>
getMaskFormat
(
)
;
}
bool
isSubpixel
(
)
const
{
return
fIsSubpixel
;
}
SkVector
rounding
(
)
const
override
;
const
SkGlyph
&
getGlyphMetrics
(
SkGlyphID
glyphID
SkPoint
position
)
override
;
size_t
getMemoryUsed
(
)
const
{
return
fMemoryUsed
;
}
void
dump
(
)
const
;
SkScalerContext
*
getScalerContext
(
)
const
{
return
fScalerContext
.
get
(
)
;
}
#
ifdef
SK_DEBUG
void
forceValidate
(
)
const
;
void
validate
(
)
const
;
#
else
void
validate
(
)
const
{
}
#
endif
class
AutoValidate
:
SkNoncopyable
{
public
:
AutoValidate
(
const
SkGlyphCache
*
cache
)
:
fCache
(
cache
)
{
if
(
fCache
)
{
fCache
-
>
validate
(
)
;
}
}
~
AutoValidate
(
)
{
if
(
fCache
)
{
fCache
-
>
validate
(
)
;
}
}
void
forget
(
)
{
fCache
=
nullptr
;
}
private
:
const
SkGlyphCache
*
fCache
;
}
;
private
:
enum
MetricsType
{
kNothing_MetricsType
kJustAdvance_MetricsType
kFull_MetricsType
}
;
enum
{
kHashBits
=
8
kHashCount
=
1
<
<
kHashBits
kHashMask
=
kHashCount
-
1
}
;
struct
CharGlyphRec
{
SkPackedUnicharID
fPackedUnicharID
;
SkPackedGlyphID
fPackedGlyphID
;
}
;
SkGlyph
*
lookupByPackedGlyphID
(
SkPackedGlyphID
packedGlyphID
MetricsType
type
)
;
SkGlyph
*
lookupByChar
(
SkUnichar
id
MetricsType
type
SkFixed
x
=
0
SkFixed
y
=
0
)
;
SkGlyph
*
allocateNewGlyph
(
SkPackedGlyphID
packedGlyphID
MetricsType
type
)
;
CharGlyphRec
*
getCharGlyphRec
(
SkPackedUnicharID
id
)
;
static
void
OffsetResults
(
const
SkGlyph
:
:
Intercept
*
intercept
SkScalar
scale
SkScalar
xPos
SkScalar
*
array
int
*
count
)
;
static
void
AddInterval
(
SkScalar
val
SkGlyph
:
:
Intercept
*
intercept
)
;
static
void
AddPoints
(
const
SkPoint
*
pts
int
ptCount
const
SkScalar
bounds
[
2
]
bool
yAxis
SkGlyph
:
:
Intercept
*
intercept
)
;
static
void
AddLine
(
const
SkPoint
pts
[
2
]
SkScalar
axis
bool
yAxis
SkGlyph
:
:
Intercept
*
intercept
)
;
static
void
AddQuad
(
const
SkPoint
pts
[
2
]
SkScalar
axis
bool
yAxis
SkGlyph
:
:
Intercept
*
intercept
)
;
static
void
AddCubic
(
const
SkPoint
pts
[
3
]
SkScalar
axis
bool
yAxis
SkGlyph
:
:
Intercept
*
intercept
)
;
static
const
SkGlyph
:
:
Intercept
*
MatchBounds
(
const
SkGlyph
*
glyph
const
SkScalar
bounds
[
2
]
)
;
const
SkAutoDescriptor
fDesc
;
const
std
:
:
unique_ptr
<
SkScalerContext
>
fScalerContext
;
SkPaint
:
:
FontMetrics
fFontMetrics
;
SkTHashTable
<
SkGlyph
SkPackedGlyphID
SkGlyph
:
:
HashTraits
>
fGlyphMap
;
static
constexpr
size_t
kMinGlyphCount
=
8
;
static
constexpr
size_t
kMinGlyphImageSize
=
16
*
8
;
static
constexpr
size_t
kMinAllocAmount
=
kMinGlyphImageSize
*
kMinGlyphCount
;
SkArenaAlloc
fAlloc
{
kMinAllocAmount
}
;
std
:
:
unique_ptr
<
CharGlyphRec
[
]
>
fPackedUnicharIDToPackedGlyphID
;
size_t
fMemoryUsed
;
const
bool
fIsSubpixel
;
const
SkAxisAlignment
fAxisAlignment
;
}
;
#
endif
