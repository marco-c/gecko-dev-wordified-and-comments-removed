#
ifndef
SkGlyphCache_DEFINED
#
define
SkGlyphCache_DEFINED
#
include
"
SkBitmap
.
h
"
#
include
"
SkChunkAlloc
.
h
"
#
include
"
SkDescriptor
.
h
"
#
include
"
SkGlyph
.
h
"
#
include
"
SkPaint
.
h
"
#
include
"
SkTHash
.
h
"
#
include
"
SkScalerContext
.
h
"
#
include
"
SkTemplates
.
h
"
#
include
"
SkTDArray
.
h
"
class
SkTraceMemoryDump
;
class
SkGlyphCache_Globals
;
class
SkGlyphCache
{
public
:
const
SkGlyph
&
getUnicharAdvance
(
SkUnichar
)
;
const
SkGlyph
&
getGlyphIDAdvance
(
uint16_t
)
;
const
SkGlyph
&
getUnicharMetrics
(
SkUnichar
)
;
const
SkGlyph
&
getGlyphIDMetrics
(
uint16_t
)
;
const
SkGlyph
&
getUnicharMetrics
(
SkUnichar
SkFixed
x
SkFixed
y
)
;
const
SkGlyph
&
getGlyphIDMetrics
(
uint16_t
SkFixed
x
SkFixed
y
)
;
uint16_t
unicharToGlyph
(
SkUnichar
)
;
SkUnichar
glyphToUnichar
(
uint16_t
)
;
unsigned
getGlyphCount
(
)
const
;
int
countCachedGlyphs
(
)
const
;
const
void
*
findImage
(
const
SkGlyph
&
)
;
void
findIntercepts
(
const
SkScalar
bounds
[
2
]
SkScalar
scale
SkScalar
xPos
bool
yAxis
SkGlyph
*
SkScalar
*
array
int
*
count
)
;
const
SkPath
*
findPath
(
const
SkGlyph
&
)
;
const
SkPaint
:
:
FontMetrics
&
getFontMetrics
(
)
const
{
return
fFontMetrics
;
}
const
SkDescriptor
&
getDescriptor
(
)
const
{
return
*
fDesc
;
}
SkMask
:
:
Format
getMaskFormat
(
)
const
{
return
fScalerContext
-
>
getMaskFormat
(
)
;
}
bool
isSubpixel
(
)
const
{
return
fScalerContext
-
>
isSubpixel
(
)
;
}
size_t
getMemoryUsed
(
)
const
{
return
fMemoryUsed
;
}
void
dump
(
)
const
;
bool
getAuxProcData
(
void
(
*
auxProc
)
(
void
*
)
void
*
*
dataPtr
)
const
;
void
setAuxProc
(
void
(
*
auxProc
)
(
void
*
)
void
*
auxData
)
;
SkScalerContext
*
getScalerContext
(
)
const
{
return
fScalerContext
;
}
static
SkGlyphCache
*
VisitCache
(
SkTypeface
*
const
SkDescriptor
*
desc
bool
(
*
proc
)
(
const
SkGlyphCache
*
void
*
)
void
*
context
)
;
static
void
AttachCache
(
SkGlyphCache
*
)
;
using
AttachCacheFunctor
=
SkFunctionWrapper
<
void
SkGlyphCache
AttachCache
>
;
static
SkGlyphCache
*
DetachCache
(
SkTypeface
*
typeface
const
SkDescriptor
*
desc
)
{
return
VisitCache
(
typeface
desc
DetachProc
nullptr
)
;
}
static
void
Dump
(
)
;
static
void
DumpMemoryStatistics
(
SkTraceMemoryDump
*
dump
)
;
typedef
void
(
*
Visitor
)
(
const
SkGlyphCache
&
void
*
context
)
;
static
void
VisitAll
(
Visitor
void
*
context
)
;
#
ifdef
SK_DEBUG
void
validate
(
)
const
;
#
else
void
validate
(
)
const
{
}
#
endif
class
AutoValidate
:
SkNoncopyable
{
public
:
AutoValidate
(
const
SkGlyphCache
*
cache
)
:
fCache
(
cache
)
{
if
(
fCache
)
{
fCache
-
>
validate
(
)
;
}
}
~
AutoValidate
(
)
{
if
(
fCache
)
{
fCache
-
>
validate
(
)
;
}
}
void
forget
(
)
{
fCache
=
nullptr
;
}
private
:
const
SkGlyphCache
*
fCache
;
}
;
private
:
friend
class
SkGlyphCache_Globals
;
enum
MetricsType
{
kJustAdvance_MetricsType
kFull_MetricsType
}
;
enum
{
kHashBits
=
8
kHashCount
=
1
<
<
kHashBits
kHashMask
=
kHashCount
-
1
}
;
typedef
uint32_t
PackedGlyphID
;
typedef
uint32_t
PackedUnicharID
;
struct
CharGlyphRec
{
PackedUnicharID
fPackedUnicharID
;
PackedGlyphID
fPackedGlyphID
;
}
;
struct
AuxProcRec
{
AuxProcRec
*
fNext
;
void
(
*
fProc
)
(
void
*
)
;
void
*
fData
;
}
;
SkGlyphCache
(
SkTypeface
*
const
SkDescriptor
*
SkScalerContext
*
)
;
~
SkGlyphCache
(
)
;
SkGlyph
*
lookupByPackedGlyphID
(
PackedGlyphID
packedGlyphID
MetricsType
type
)
;
SkGlyph
*
lookupByChar
(
SkUnichar
id
MetricsType
type
SkFixed
x
=
0
SkFixed
y
=
0
)
;
SkGlyph
*
allocateNewGlyph
(
PackedGlyphID
packedGlyphID
MetricsType
type
)
;
static
bool
DetachProc
(
const
SkGlyphCache
*
void
*
)
{
return
true
;
}
CharGlyphRec
*
getCharGlyphRec
(
PackedUnicharID
id
)
;
void
invokeAndRemoveAuxProcs
(
)
;
inline
static
SkGlyphCache
*
FindTail
(
SkGlyphCache
*
head
)
;
static
void
OffsetResults
(
const
SkGlyph
:
:
Intercept
*
intercept
SkScalar
scale
SkScalar
xPos
SkScalar
*
array
int
*
count
)
;
static
void
AddInterval
(
SkScalar
val
SkGlyph
:
:
Intercept
*
intercept
)
;
static
void
AddPoints
(
const
SkPoint
*
pts
int
ptCount
const
SkScalar
bounds
[
2
]
bool
yAxis
SkGlyph
:
:
Intercept
*
intercept
)
;
static
void
AddLine
(
const
SkPoint
pts
[
2
]
SkScalar
axis
bool
yAxis
SkGlyph
:
:
Intercept
*
intercept
)
;
static
void
AddQuad
(
const
SkPoint
pts
[
2
]
SkScalar
axis
bool
yAxis
SkGlyph
:
:
Intercept
*
intercept
)
;
static
void
AddCubic
(
const
SkPoint
pts
[
3
]
SkScalar
axis
bool
yAxis
SkGlyph
:
:
Intercept
*
intercept
)
;
static
const
SkGlyph
:
:
Intercept
*
MatchBounds
(
const
SkGlyph
*
glyph
const
SkScalar
bounds
[
2
]
)
;
SkGlyphCache
*
fNext
;
SkGlyphCache
*
fPrev
;
SkDescriptor
*
const
fDesc
;
SkScalerContext
*
const
fScalerContext
;
SkPaint
:
:
FontMetrics
fFontMetrics
;
SkTHashTable
<
SkGlyph
PackedGlyphID
SkGlyph
:
:
HashTraits
>
fGlyphMap
;
SkChunkAlloc
fGlyphAlloc
;
SkAutoTArray
<
CharGlyphRec
>
fPackedUnicharIDToPackedGlyphID
;
size_t
fMemoryUsed
;
AuxProcRec
*
fAuxProcList
;
}
;
class
SkAutoGlyphCache
:
public
std
:
:
unique_ptr
<
SkGlyphCache
SkGlyphCache
:
:
AttachCacheFunctor
>
{
public
:
SkGlyphCache
*
getCache
(
)
const
{
return
this
-
>
get
(
)
;
}
SkAutoGlyphCache
(
SkGlyphCache
*
cache
)
:
INHERITED
(
cache
)
{
}
SkAutoGlyphCache
(
SkTypeface
*
typeface
const
SkDescriptor
*
desc
)
:
INHERITED
(
SkGlyphCache
:
:
DetachCache
(
typeface
desc
)
)
{
}
SkAutoGlyphCache
(
const
SkPaint
&
paint
const
SkSurfaceProps
*
surfaceProps
const
SkMatrix
*
matrix
)
:
INHERITED
(
paint
.
detachCache
(
surfaceProps
SkPaint
:
:
FakeGamma
:
:
On
matrix
)
)
{
}
SkAutoGlyphCache
(
const
SkPaint
&
paint
const
SkSurfaceProps
*
surfaceProps
SkPaint
:
:
FakeGamma
fakeGamma
const
SkMatrix
*
matrix
)
:
INHERITED
(
paint
.
detachCache
(
surfaceProps
fakeGamma
matrix
)
)
{
}
private
:
using
INHERITED
=
std
:
:
unique_ptr
<
SkGlyphCache
SkGlyphCache
:
:
AttachCacheFunctor
>
;
}
;
class
SkAutoGlyphCacheNoGamma
:
public
SkAutoGlyphCache
{
public
:
SkAutoGlyphCacheNoGamma
(
const
SkPaint
&
paint
const
SkSurfaceProps
*
surfaceProps
const
SkMatrix
*
matrix
)
:
SkAutoGlyphCache
(
paint
surfaceProps
SkPaint
:
:
FakeGamma
:
:
Off
matrix
)
{
}
}
;
#
define
SkAutoGlyphCache
(
.
.
.
)
SK_REQUIRE_LOCAL_VAR
(
SkAutoGlyphCache
)
#
define
SkAutoGlyphCacheNoGamma
(
.
.
.
)
SK_REQUIRE_LOCAL_VAR
(
SkAutoGlyphCacheNoGamma
)
#
endif
