#
ifndef
SkRuntimeEffectPriv_DEFINED
#
define
SkRuntimeEffectPriv_DEFINED
#
include
"
include
/
effects
/
SkRuntimeEffect
.
h
"
#
include
"
include
/
private
/
SkColorData
.
h
"
#
include
"
src
/
core
/
SkVM
.
h
"
#
include
<
functional
>
#
ifdef
SK_ENABLE_SKSL
namespace
SkSL
{
class
Context
;
class
Variable
;
struct
Program
;
}
class
SkCapabilities
;
struct
SkColorSpaceXformSteps
;
class
SkRuntimeEffectPriv
{
public
:
struct
UniformsCallbackContext
{
const
SkColorSpace
*
fDstColorSpace
;
}
;
using
UniformsCallback
=
std
:
:
function
<
sk_sp
<
const
SkData
>
(
const
UniformsCallbackContext
&
)
>
;
static
sk_sp
<
SkShader
>
MakeDeferredShader
(
const
SkRuntimeEffect
*
effect
UniformsCallback
uniformsCallback
SkSpan
<
SkRuntimeEffect
:
:
ChildPtr
>
children
const
SkMatrix
*
localMatrix
=
nullptr
)
;
static
bool
SupportsConstantOutputForConstantInput
(
const
SkRuntimeEffect
*
effect
)
{
return
effect
-
>
getFilterColorProgram
(
)
;
}
static
uint32_t
Hash
(
const
SkRuntimeEffect
&
effect
)
{
return
effect
.
hash
(
)
;
}
static
const
SkSL
:
:
Program
&
Program
(
const
SkRuntimeEffect
&
effect
)
{
return
*
effect
.
fBaseProgram
;
}
static
SkRuntimeEffect
:
:
Options
ES3Options
(
)
{
SkRuntimeEffect
:
:
Options
options
;
options
.
maxVersionAllowed
=
SkSL
:
:
Version
:
:
k300
;
return
options
;
}
static
void
AllowPrivateAccess
(
SkRuntimeEffect
:
:
Options
*
options
)
{
options
-
>
allowPrivateAccess
=
true
;
}
static
SkRuntimeEffect
:
:
Uniform
VarAsUniform
(
const
SkSL
:
:
Variable
&
const
SkSL
:
:
Context
&
size_t
*
offset
)
;
static
sk_sp
<
const
SkData
>
TransformUniforms
(
SkSpan
<
const
SkRuntimeEffect
:
:
Uniform
>
uniforms
sk_sp
<
const
SkData
>
originalData
const
SkColorSpaceXformSteps
&
)
;
static
sk_sp
<
const
SkData
>
TransformUniforms
(
SkSpan
<
const
SkRuntimeEffect
:
:
Uniform
>
uniforms
sk_sp
<
const
SkData
>
originalData
const
SkColorSpace
*
dstCS
)
;
static
bool
CanDraw
(
const
SkCapabilities
*
const
SkSL
:
:
Program
*
)
;
static
bool
CanDraw
(
const
SkCapabilities
*
const
SkRuntimeEffect
*
)
;
}
;
sk_sp
<
SkRuntimeEffect
>
SkMakeCachedRuntimeEffect
(
SkRuntimeEffect
:
:
Result
(
*
make
)
(
SkString
sksl
const
SkRuntimeEffect
:
:
Options
&
)
SkString
sksl
)
;
inline
sk_sp
<
SkRuntimeEffect
>
SkMakeCachedRuntimeEffect
(
SkRuntimeEffect
:
:
Result
(
*
make
)
(
SkString
const
SkRuntimeEffect
:
:
Options
&
)
const
char
*
sksl
)
{
return
SkMakeCachedRuntimeEffect
(
make
SkString
{
sksl
}
)
;
}
inline
SkRuntimeEffect
*
SkMakeRuntimeEffect
(
SkRuntimeEffect
:
:
Result
(
*
make
)
(
SkString
const
SkRuntimeEffect
:
:
Options
&
)
const
char
*
sksl
SkRuntimeEffect
:
:
Options
options
=
SkRuntimeEffect
:
:
Options
{
}
)
{
#
if
defined
(
SK_DEBUG
)
if
(
SkStrContains
(
sksl
"
/
/
"
)
|
|
SkStrContains
(
sksl
"
"
)
)
{
SkDEBUGFAILF
(
"
Found
SkSL
snippet
that
can
be
minified
:
\
n
%
s
\
n
"
sksl
)
;
}
#
endif
SkRuntimeEffectPriv
:
:
AllowPrivateAccess
(
&
options
)
;
auto
result
=
make
(
SkString
{
sksl
}
options
)
;
if
(
!
result
.
effect
)
{
SK_ABORT
(
"
%
s
"
result
.
errorText
.
c_str
(
)
)
;
}
return
result
.
effect
.
release
(
)
;
}
class
SkFilterColorProgram
{
public
:
static
std
:
:
unique_ptr
<
SkFilterColorProgram
>
Make
(
const
SkRuntimeEffect
*
effect
)
;
SkPMColor4f
eval
(
const
SkPMColor4f
&
inColor
const
void
*
uniformData
std
:
:
function
<
SkPMColor4f
(
int
SkPMColor4f
)
>
evalChild
)
const
;
bool
isAlphaUnchanged
(
)
const
{
return
fAlphaUnchanged
;
}
private
:
struct
SampleCall
{
enum
class
Kind
{
kInputColor
kImmediate
kPrevious
kUniform
}
;
int
fChild
;
Kind
fKind
;
union
{
SkPMColor4f
fImm
;
int
fPrevious
;
int
fOffset
;
}
;
}
;
SkFilterColorProgram
(
skvm
:
:
Program
program
std
:
:
vector
<
SampleCall
>
sampleCalls
bool
alphaUnchanged
)
;
skvm
:
:
Program
fProgram
;
std
:
:
vector
<
SampleCall
>
fSampleCalls
;
bool
fAlphaUnchanged
;
}
;
#
endif
#
endif
