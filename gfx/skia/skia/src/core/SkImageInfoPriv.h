#
ifndef
SkImageInfoPriv_DEFINED
#
define
SkImageInfoPriv_DEFINED
#
include
"
SkImageInfo
.
h
"
enum
class
SkDestinationSurfaceColorMode
{
kLegacy
kGammaAndColorSpaceAware
}
;
static
inline
bool
SkAlphaTypeIsValid
(
unsigned
value
)
{
return
value
<
=
kLastEnum_SkAlphaType
;
}
static
int
SkColorTypeShiftPerPixel
(
SkColorType
ct
)
{
switch
(
ct
)
{
case
kUnknown_SkColorType
:
return
0
;
case
kAlpha_8_SkColorType
:
return
0
;
case
kRGB_565_SkColorType
:
return
1
;
case
kARGB_4444_SkColorType
:
return
1
;
case
kRGBA_8888_SkColorType
:
return
2
;
case
kRGB_888x_SkColorType
:
return
2
;
case
kBGRA_8888_SkColorType
:
return
2
;
case
kRGBA_1010102_SkColorType
:
return
2
;
case
kRGB_101010x_SkColorType
:
return
2
;
case
kGray_8_SkColorType
:
return
0
;
case
kRGBA_F16_SkColorType
:
return
3
;
}
return
0
;
}
static
inline
size_t
SkColorTypeMinRowBytes
(
SkColorType
ct
int
width
)
{
return
width
*
SkColorTypeBytesPerPixel
(
ct
)
;
}
static
inline
bool
SkColorTypeIsValid
(
unsigned
value
)
{
return
value
<
=
kLastEnum_SkColorType
;
}
static
inline
size_t
SkColorTypeComputeOffset
(
SkColorType
ct
int
x
int
y
size_t
rowBytes
)
{
if
(
kUnknown_SkColorType
=
=
ct
)
{
return
0
;
}
return
y
*
rowBytes
+
(
x
<
<
SkColorTypeShiftPerPixel
(
ct
)
)
;
}
static
inline
bool
SkImageInfoIsValidCommon
(
const
SkImageInfo
&
info
)
{
if
(
info
.
width
(
)
<
=
0
|
|
info
.
height
(
)
<
=
0
)
{
return
false
;
}
const
int
kMaxDimension
=
SK_MaxS32
>
>
2
;
if
(
info
.
width
(
)
>
kMaxDimension
|
|
info
.
height
(
)
>
kMaxDimension
)
{
return
false
;
}
if
(
kUnknown_SkColorType
=
=
info
.
colorType
(
)
|
|
kUnknown_SkAlphaType
=
=
info
.
alphaType
(
)
)
{
return
false
;
}
if
(
kOpaque_SkAlphaType
!
=
info
.
alphaType
(
)
&
&
(
kRGB_565_SkColorType
=
=
info
.
colorType
(
)
|
|
kGray_8_SkColorType
=
=
info
.
colorType
(
)
)
)
{
return
false
;
}
if
(
kRGBA_F16_SkColorType
=
=
info
.
colorType
(
)
&
&
(
info
.
colorSpace
(
)
&
&
(
!
info
.
colorSpace
(
)
-
>
gammaIsLinear
(
)
)
)
)
{
return
false
;
}
return
true
;
}
static
inline
bool
SkImageInfoIsValidAllowNumericalCS
(
const
SkImageInfo
&
info
)
{
if
(
!
SkImageInfoIsValidCommon
(
info
)
)
{
return
false
;
}
SkColorSpaceTransferFn
fn
;
if
(
info
.
colorSpace
(
)
&
&
!
info
.
colorSpace
(
)
-
>
isNumericalTransferFn
(
&
fn
)
)
{
return
false
;
}
return
true
;
}
static
inline
bool
SkImageInfoIsValidRenderingCS
(
const
SkImageInfo
&
info
)
{
if
(
!
SkImageInfoIsValidCommon
(
info
)
)
{
return
false
;
}
if
(
info
.
colorSpace
(
)
&
&
(
!
info
.
colorSpace
(
)
-
>
gammaCloseToSRGB
(
)
&
&
!
info
.
colorSpace
(
)
-
>
gammaIsLinear
(
)
)
)
{
return
false
;
}
return
true
;
}
static
inline
bool
SkImageInfoIsValid
(
const
SkImageInfo
&
info
SkDestinationSurfaceColorMode
colorMode
)
{
if
(
SkDestinationSurfaceColorMode
:
:
kGammaAndColorSpaceAware
=
=
colorMode
)
{
return
SkImageInfoIsValidRenderingCS
(
info
)
;
}
return
SkImageInfoIsValidAllowNumericalCS
(
info
)
;
}
static
inline
bool
SkImageInfoValidConversion
(
const
SkImageInfo
&
dst
const
SkImageInfo
&
src
)
{
if
(
!
SkImageInfoIsValidAllowNumericalCS
(
dst
)
|
|
!
SkImageInfoIsValidAllowNumericalCS
(
src
)
)
{
return
false
;
}
if
(
kGray_8_SkColorType
=
=
dst
.
colorType
(
)
)
{
if
(
kGray_8_SkColorType
!
=
src
.
colorType
(
)
)
{
return
false
;
}
if
(
dst
.
colorSpace
(
)
&
&
!
SkColorSpace
:
:
Equals
(
dst
.
colorSpace
(
)
src
.
colorSpace
(
)
)
)
{
return
false
;
}
}
if
(
kAlpha_8_SkColorType
!
=
dst
.
colorType
(
)
&
&
kAlpha_8_SkColorType
=
=
src
.
colorType
(
)
)
{
return
false
;
}
if
(
kOpaque_SkAlphaType
=
=
dst
.
alphaType
(
)
&
&
kOpaque_SkAlphaType
!
=
src
.
alphaType
(
)
)
{
return
false
;
}
if
(
dst
.
colorSpace
(
)
&
&
!
src
.
colorSpace
(
)
)
{
return
false
;
}
return
true
;
}
#
endif
