#
ifndef
SkRectPriv_DEFINED
#
define
SkRectPriv_DEFINED
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
src
/
base
/
SkMathPriv
.
h
"
class
SkM44
;
class
SkMatrix
;
class
SkRectPriv
{
public
:
static
SkIRect
MakeILarge
(
)
{
const
int32_t
large
=
1
<
<
29
;
return
{
-
large
-
large
large
large
}
;
}
static
SkIRect
MakeILargestInverted
(
)
{
return
{
SK_MaxS32
SK_MaxS32
SK_MinS32
SK_MinS32
}
;
}
static
SkRect
MakeLargeS32
(
)
{
SkRect
r
;
r
.
set
(
MakeILarge
(
)
)
;
return
r
;
}
static
SkRect
MakeLargest
(
)
{
return
{
SK_ScalarMin
SK_ScalarMin
SK_ScalarMax
SK_ScalarMax
}
;
}
static
constexpr
SkRect
MakeLargestInverted
(
)
{
return
{
SK_ScalarMax
SK_ScalarMax
SK_ScalarMin
SK_ScalarMin
}
;
}
static
void
GrowToInclude
(
SkRect
*
r
const
SkPoint
&
pt
)
{
r
-
>
fLeft
=
std
:
:
min
(
pt
.
fX
r
-
>
fLeft
)
;
r
-
>
fRight
=
std
:
:
max
(
pt
.
fX
r
-
>
fRight
)
;
r
-
>
fTop
=
std
:
:
min
(
pt
.
fY
r
-
>
fTop
)
;
r
-
>
fBottom
=
std
:
:
max
(
pt
.
fY
r
-
>
fBottom
)
;
}
static
bool
FitsInFixed
(
const
SkRect
&
r
)
{
return
SkFitsInFixed
(
r
.
fLeft
)
&
&
SkFitsInFixed
(
r
.
fTop
)
&
&
SkFitsInFixed
(
r
.
fRight
)
&
&
SkFitsInFixed
(
r
.
fBottom
)
;
}
static
bool
Is16Bit
(
const
SkIRect
&
r
)
{
return
SkTFitsIn
<
int16_t
>
(
r
.
fLeft
)
&
&
SkTFitsIn
<
int16_t
>
(
r
.
fTop
)
&
&
SkTFitsIn
<
int16_t
>
(
r
.
fRight
)
&
&
SkTFitsIn
<
int16_t
>
(
r
.
fBottom
)
;
}
static
SkScalar
HalfWidth
(
const
SkRect
&
r
)
{
return
SkScalarHalf
(
r
.
fRight
)
-
SkScalarHalf
(
r
.
fLeft
)
;
}
static
SkScalar
HalfHeight
(
const
SkRect
&
r
)
{
return
SkScalarHalf
(
r
.
fBottom
)
-
SkScalarHalf
(
r
.
fTop
)
;
}
static
bool
Subtract
(
const
SkRect
&
a
const
SkRect
&
b
SkRect
*
out
)
;
static
bool
Subtract
(
const
SkIRect
&
a
const
SkIRect
&
b
SkIRect
*
out
)
;
static
SkRect
Subtract
(
const
SkRect
&
a
const
SkRect
&
b
)
{
SkRect
diff
;
Subtract
(
a
b
&
diff
)
;
return
diff
;
}
static
SkIRect
Subtract
(
const
SkIRect
&
a
const
SkIRect
&
b
)
{
SkIRect
diff
;
Subtract
(
a
b
&
diff
)
;
return
diff
;
}
static
bool
QuadContainsRect
(
const
SkMatrix
&
m
const
SkIRect
&
a
const
SkIRect
&
b
)
;
static
bool
QuadContainsRect
(
const
SkM44
&
m
const
SkRect
&
a
const
SkRect
&
b
)
;
}
;
#
endif
