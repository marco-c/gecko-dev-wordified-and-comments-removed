#
include
"
SkSmallAllocator
.
h
"
#
include
"
SkSpriteBlitter
.
h
"
SkSpriteBlitter
:
:
SkSpriteBlitter
(
const
SkPixmap
&
source
)
:
fSource
(
source
)
{
}
void
SkSpriteBlitter
:
:
setup
(
const
SkPixmap
&
dst
int
left
int
top
const
SkPaint
&
paint
)
{
fDst
=
dst
;
fLeft
=
left
;
fTop
=
top
;
fPaint
=
&
paint
;
}
#
ifdef
SK_DEBUG
void
SkSpriteBlitter
:
:
blitH
(
int
x
int
y
int
width
)
{
SkDEBUGFAIL
(
"
how
did
we
get
here
?
"
)
;
}
void
SkSpriteBlitter
:
:
blitAntiH
(
int
x
int
y
const
SkAlpha
antialias
[
]
const
int16_t
runs
[
]
)
{
SkDEBUGFAIL
(
"
how
did
we
get
here
?
"
)
;
}
void
SkSpriteBlitter
:
:
blitV
(
int
x
int
y
int
height
SkAlpha
alpha
)
{
SkDEBUGFAIL
(
"
how
did
we
get
here
?
"
)
;
}
void
SkSpriteBlitter
:
:
blitMask
(
const
SkMask
&
const
SkIRect
&
clip
)
{
SkDEBUGFAIL
(
"
how
did
we
get
here
?
"
)
;
}
#
endif
SkBlitter
*
SkBlitter
:
:
ChooseSprite
(
const
SkPixmap
&
dst
const
SkPaint
&
paint
const
SkPixmap
&
source
int
left
int
top
SkTBlitterAllocator
*
allocator
)
{
SkASSERT
(
allocator
!
=
nullptr
)
;
SkSpriteBlitter
*
blitter
;
switch
(
dst
.
colorType
(
)
)
{
case
kRGB_565_SkColorType
:
blitter
=
SkSpriteBlitter
:
:
ChooseD16
(
source
paint
allocator
)
;
break
;
case
kN32_SkColorType
:
if
(
dst
.
info
(
)
.
isSRGB
(
)
)
{
blitter
=
SkSpriteBlitter
:
:
ChooseS32
(
source
paint
allocator
)
;
}
else
{
blitter
=
SkSpriteBlitter
:
:
ChooseL32
(
source
paint
allocator
)
;
}
break
;
case
kRGBA_F16_SkColorType
:
blitter
=
SkSpriteBlitter
:
:
ChooseF16
(
source
paint
allocator
)
;
break
;
default
:
blitter
=
nullptr
;
break
;
}
if
(
blitter
)
{
blitter
-
>
setup
(
dst
left
top
paint
)
;
}
return
blitter
;
}
