#
include
"
src
/
core
/
SkStrikeSpec
.
h
"
#
include
"
include
/
core
/
SkGraphics
.
h
"
#
include
"
src
/
core
/
SkDraw
.
h
"
#
include
"
src
/
core
/
SkFontPriv
.
h
"
#
include
"
src
/
core
/
SkStrikeCache
.
h
"
#
include
"
src
/
core
/
SkTLazy
.
h
"
SkStrikeSpec
SkStrikeSpec
:
:
MakeMask
(
const
SkFont
&
font
const
SkPaint
&
paint
const
SkSurfaceProps
&
surfaceProps
SkScalerContextFlags
scalerContextFlags
const
SkMatrix
&
deviceMatrix
)
{
SkStrikeSpec
storage
;
storage
.
commonSetup
(
font
paint
surfaceProps
scalerContextFlags
deviceMatrix
)
;
return
storage
;
}
SkStrikeSpec
SkStrikeSpec
:
:
MakePath
(
const
SkFont
&
font
const
SkPaint
&
paint
const
SkSurfaceProps
&
surfaceProps
SkScalerContextFlags
scalerContextFlags
)
{
SkStrikeSpec
storage
;
SkPaint
pathPaint
{
paint
}
;
SkFont
pathFont
{
font
}
;
storage
.
fStrikeToSourceRatio
=
pathFont
.
setupForAsPaths
(
&
pathPaint
)
;
pathFont
.
setSubpixel
(
false
)
;
storage
.
commonSetup
(
pathFont
pathPaint
surfaceProps
scalerContextFlags
SkMatrix
:
:
I
(
)
)
;
return
storage
;
}
SkStrikeSpec
SkStrikeSpec
:
:
MakeSourceFallback
(
const
SkFont
&
font
const
SkPaint
&
paint
const
SkSurfaceProps
&
surfaceProps
SkScalerContextFlags
scalerContextFlags
SkScalar
maxSourceGlyphDimension
)
{
SkStrikeSpec
storage
;
SkScalar
maxAtlasDimension
=
SkStrikeCommon
:
:
kSkSideTooBigForAtlas
-
2
;
SkScalar
runFontTextSize
=
font
.
getSize
(
)
;
SkScalar
fallbackTextSize
=
SkScalarFloorToScalar
(
(
maxAtlasDimension
/
maxSourceGlyphDimension
)
*
runFontTextSize
)
;
SkFont
fallbackFont
{
font
}
;
fallbackFont
.
setSize
(
fallbackTextSize
)
;
fallbackFont
.
setSubpixel
(
false
)
;
storage
.
fStrikeToSourceRatio
=
runFontTextSize
/
fallbackTextSize
;
storage
.
commonSetup
(
fallbackFont
paint
surfaceProps
scalerContextFlags
SkMatrix
:
:
I
(
)
)
;
return
storage
;
}
SkStrikeSpec
SkStrikeSpec
:
:
MakeCanonicalized
(
const
SkFont
&
font
const
SkPaint
*
paint
)
{
SkStrikeSpec
storage
;
SkPaint
canonicalizedPaint
;
if
(
paint
!
=
nullptr
)
{
canonicalizedPaint
=
*
paint
;
}
const
SkFont
*
canonicalizedFont
=
&
font
;
SkTLazy
<
SkFont
>
pathFont
;
if
(
ShouldDrawAsPath
(
canonicalizedPaint
font
SkMatrix
:
:
I
(
)
)
)
{
canonicalizedFont
=
pathFont
.
set
(
font
)
;
storage
.
fStrikeToSourceRatio
=
pathFont
-
>
setupForAsPaths
(
nullptr
)
;
canonicalizedPaint
.
reset
(
)
;
}
storage
.
commonSetup
(
*
canonicalizedFont
canonicalizedPaint
SkSurfaceProps
(
SkSurfaceProps
:
:
kLegacyFontHost_InitType
)
kFakeGammaAndBoostContrast
SkMatrix
:
:
I
(
)
)
;
return
storage
;
}
SkStrikeSpec
SkStrikeSpec
:
:
MakeWithNoDevice
(
const
SkFont
&
font
const
SkPaint
*
paint
)
{
SkStrikeSpec
storage
;
SkPaint
setupPaint
;
if
(
paint
!
=
nullptr
)
{
setupPaint
=
*
paint
;
}
storage
.
commonSetup
(
font
setupPaint
SkSurfaceProps
(
SkSurfaceProps
:
:
kLegacyFontHost_InitType
)
kFakeGammaAndBoostContrast
SkMatrix
:
:
I
(
)
)
;
return
storage
;
}
SkStrikeSpec
SkStrikeSpec
:
:
MakeDefault
(
)
{
SkFont
defaultFont
;
return
MakeCanonicalized
(
defaultFont
)
;
}
bool
SkStrikeSpec
:
:
ShouldDrawAsPath
(
const
SkPaint
&
paint
const
SkFont
&
font
const
SkMatrix
&
viewMatrix
)
{
if
(
SkPaint
:
:
kStroke_Style
=
=
paint
.
getStyle
(
)
&
&
0
=
=
paint
.
getStrokeWidth
(
)
)
{
return
true
;
}
if
(
viewMatrix
.
hasPerspective
(
)
)
{
return
true
;
}
if
(
font
.
getTypeface
(
)
&
&
font
.
getTypeface
(
)
-
>
hasColorGlyphs
(
)
)
{
return
false
;
}
SkMatrix
textMatrix
=
SkFontPriv
:
:
MakeTextMatrix
(
font
)
;
textMatrix
.
postConcat
(
viewMatrix
)
;
SkScalar
limit
=
SkMinScalar
(
SkGraphics
:
:
GetFontCachePointSizeLimit
(
)
1024
)
;
SkScalar
maxSizeSquared
=
limit
*
limit
;
auto
distance
=
[
&
textMatrix
]
(
int
XIndex
int
YIndex
)
{
return
textMatrix
[
XIndex
]
*
textMatrix
[
XIndex
]
+
textMatrix
[
YIndex
]
*
textMatrix
[
YIndex
]
;
}
;
return
distance
(
SkMatrix
:
:
kMScaleX
SkMatrix
:
:
kMSkewY
)
>
maxSizeSquared
|
|
distance
(
SkMatrix
:
:
kMSkewX
SkMatrix
:
:
kMScaleY
)
>
maxSizeSquared
;
}
SkStrikeSpec
SkStrikeSpec
:
:
MakePDFVector
(
const
SkTypeface
&
typeface
int
*
size
)
{
SkFont
font
;
font
.
setHinting
(
SkFontHinting
:
:
kNone
)
;
font
.
setEdging
(
SkFont
:
:
Edging
:
:
kAlias
)
;
font
.
setTypeface
(
sk_ref_sp
(
&
typeface
)
)
;
int
unitsPerEm
=
typeface
.
getUnitsPerEm
(
)
;
if
(
unitsPerEm
<
=
0
)
{
unitsPerEm
=
1024
;
}
if
(
size
)
{
*
size
=
unitsPerEm
;
}
font
.
setSize
(
(
SkScalar
)
unitsPerEm
)
;
SkStrikeSpec
storage
;
storage
.
commonSetup
(
font
SkPaint
(
)
SkSurfaceProps
(
0
kUnknown_SkPixelGeometry
)
kFakeGammaAndBoostContrast
SkMatrix
:
:
I
(
)
)
;
return
storage
;
}
#
if
SK_SUPPORT_GPU
std
:
:
tuple
<
SkStrikeSpec
SkScalar
SkScalar
>
SkStrikeSpec
:
:
MakeSDFT
(
const
SkFont
&
font
const
SkPaint
&
paint
const
SkSurfaceProps
&
surfaceProps
const
SkMatrix
&
deviceMatrix
const
GrTextContext
:
:
Options
&
options
)
{
SkStrikeSpec
storage
;
SkPaint
dfPaint
=
GrTextContext
:
:
InitDistanceFieldPaint
(
paint
)
;
SkFont
dfFont
=
GrTextContext
:
:
InitDistanceFieldFont
(
font
deviceMatrix
options
&
storage
.
fStrikeToSourceRatio
)
;
SkScalerContextFlags
flags
=
SkScalerContextFlags
:
:
kNone
;
SkScalar
minScale
maxScale
;
std
:
:
tie
(
minScale
maxScale
)
=
GrTextContext
:
:
InitDistanceFieldMinMaxScale
(
font
.
getSize
(
)
deviceMatrix
options
)
;
storage
.
commonSetup
(
dfFont
dfPaint
surfaceProps
flags
SkMatrix
:
:
I
(
)
)
;
return
std
:
:
tie
(
storage
minScale
maxScale
)
;
}
sk_sp
<
GrTextStrike
>
SkStrikeSpec
:
:
findOrCreateGrStrike
(
GrStrikeCache
*
cache
)
const
{
return
cache
-
>
getStrike
(
*
fAutoDescriptor
.
getDesc
(
)
)
;
}
#
endif
void
SkStrikeSpec
:
:
commonSetup
(
const
SkFont
&
font
const
SkPaint
&
paint
const
SkSurfaceProps
&
surfaceProps
SkScalerContextFlags
scalerContextFlags
const
SkMatrix
&
deviceMatrix
)
{
SkScalerContextEffects
effects
;
SkScalerContext
:
:
CreateDescriptorAndEffectsUsingPaint
(
font
paint
surfaceProps
scalerContextFlags
deviceMatrix
&
fAutoDescriptor
&
effects
)
;
fMaskFilter
=
sk_ref_sp
(
effects
.
fMaskFilter
)
;
fPathEffect
=
sk_ref_sp
(
effects
.
fPathEffect
)
;
fTypeface
=
font
.
refTypefaceOrDefault
(
)
;
}
SkScopedStrikeForGPU
SkStrikeSpec
:
:
findOrCreateScopedStrike
(
SkStrikeForGPUCacheInterface
*
cache
)
const
{
SkScalerContextEffects
effects
{
fPathEffect
.
get
(
)
fMaskFilter
.
get
(
)
}
;
return
cache
-
>
findOrCreateScopedStrike
(
*
fAutoDescriptor
.
getDesc
(
)
effects
*
fTypeface
)
;
}
SkExclusiveStrikePtr
SkStrikeSpec
:
:
findOrCreateExclusiveStrike
(
SkStrikeCache
*
cache
)
const
{
SkScalerContextEffects
effects
{
fPathEffect
.
get
(
)
fMaskFilter
.
get
(
)
}
;
return
cache
-
>
findOrCreateStrikeExclusive
(
*
fAutoDescriptor
.
getDesc
(
)
effects
*
fTypeface
)
;
}
SkBulkGlyphMetrics
:
:
SkBulkGlyphMetrics
(
const
SkStrikeSpec
&
spec
)
:
fStrike
{
spec
.
findOrCreateExclusiveStrike
(
)
}
{
}
SkSpan
<
const
SkGlyph
*
>
SkBulkGlyphMetrics
:
:
glyphs
(
SkSpan
<
const
SkGlyphID
>
glyphIDs
)
{
fGlyphs
.
reset
(
glyphIDs
.
size
(
)
)
;
return
fStrike
-
>
metrics
(
glyphIDs
fGlyphs
.
get
(
)
)
;
}
SkBulkGlyphMetricsAndPaths
:
:
SkBulkGlyphMetricsAndPaths
(
const
SkStrikeSpec
&
spec
)
:
fStrike
{
spec
.
findOrCreateExclusiveStrike
(
)
}
{
}
SkSpan
<
const
SkGlyph
*
>
SkBulkGlyphMetricsAndPaths
:
:
glyphs
(
SkSpan
<
const
SkGlyphID
>
glyphIDs
)
{
fGlyphs
.
reset
(
glyphIDs
.
size
(
)
)
;
return
fStrike
-
>
preparePaths
(
glyphIDs
fGlyphs
.
get
(
)
)
;
}
SkBulkGlyphMetricsAndImages
:
:
SkBulkGlyphMetricsAndImages
(
const
SkStrikeSpec
&
spec
)
:
fStrike
{
spec
.
findOrCreateExclusiveStrike
(
)
}
{
}
SkSpan
<
const
SkGlyph
*
>
SkBulkGlyphMetricsAndImages
:
:
glyphs
(
SkSpan
<
const
SkPackedGlyphID
>
glyphIDs
)
{
fGlyphs
.
reset
(
glyphIDs
.
size
(
)
)
;
return
fStrike
-
>
prepareImages
(
glyphIDs
fGlyphs
.
get
(
)
)
;
}
