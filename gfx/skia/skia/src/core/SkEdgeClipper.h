#
ifndef
SkEdgeClipper_DEFINED
#
define
SkEdgeClipper_DEFINED
#
include
"
include
/
core
/
SkPath
.
h
"
class
SkEdgeClipper
{
public
:
SkEdgeClipper
(
bool
canCullToTheRight
)
:
fCanCullToTheRight
(
canCullToTheRight
)
{
}
bool
clipLine
(
SkPoint
p0
SkPoint
p1
const
SkRect
&
clip
)
;
bool
clipQuad
(
const
SkPoint
pts
[
3
]
const
SkRect
&
clip
)
;
bool
clipCubic
(
const
SkPoint
pts
[
4
]
const
SkRect
&
clip
)
;
SkPath
:
:
Verb
next
(
SkPoint
pts
[
]
)
;
bool
canCullToTheRight
(
)
const
{
return
fCanCullToTheRight
;
}
private
:
SkPoint
*
fCurrPoint
;
SkPath
:
:
Verb
*
fCurrVerb
;
const
bool
fCanCullToTheRight
;
enum
{
kMaxVerbs
=
18
kMaxPoints
=
54
}
;
SkPoint
fPoints
[
kMaxPoints
]
;
SkPath
:
:
Verb
fVerbs
[
kMaxVerbs
]
;
void
clipMonoQuad
(
const
SkPoint
srcPts
[
3
]
const
SkRect
&
clip
)
;
void
clipMonoCubic
(
const
SkPoint
srcPts
[
4
]
const
SkRect
&
clip
)
;
void
appendLine
(
SkPoint
p0
SkPoint
p1
)
;
void
appendVLine
(
SkScalar
x
SkScalar
y0
SkScalar
y1
bool
reverse
)
;
void
appendQuad
(
const
SkPoint
pts
[
3
]
bool
reverse
)
;
void
appendCubic
(
const
SkPoint
pts
[
4
]
bool
reverse
)
;
}
;
#
ifdef
SK_DEBUG
void
sk_assert_monotonic_x
(
const
SkPoint
pts
[
]
int
count
)
;
void
sk_assert_monotonic_y
(
const
SkPoint
pts
[
]
int
count
)
;
#
else
#
define
sk_assert_monotonic_x
(
pts
count
)
#
define
sk_assert_monotonic_y
(
pts
count
)
#
endif
#
endif
