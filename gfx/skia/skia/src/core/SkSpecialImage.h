#
ifndef
SkSpecialImage_DEFINED
#
define
SkSpecialImage_DEFINED
#
include
"
SkNextID
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkSurfaceProps
.
h
"
#
include
"
SkImageFilter
.
h
"
#
include
"
SkImageInfo
.
h
"
class
GrContext
;
class
GrTextureProxy
;
class
SkBitmap
;
class
SkCanvas
;
class
SkImage
;
struct
SkImageInfo
;
class
SkPaint
;
class
SkPixmap
;
class
SkSpecialSurface
;
class
SkSurface
;
enum
{
kNeedNewImageUniqueID_SpecialImage
=
0
}
;
class
SkSpecialImage
:
public
SkRefCnt
{
public
:
typedef
void
*
ReleaseContext
;
typedef
void
(
*
RasterReleaseProc
)
(
void
*
pixels
ReleaseContext
)
;
const
SkSurfaceProps
&
props
(
)
const
{
return
fProps
;
}
int
width
(
)
const
{
return
fSubset
.
width
(
)
;
}
int
height
(
)
const
{
return
fSubset
.
height
(
)
;
}
const
SkIRect
&
subset
(
)
const
{
return
fSubset
;
}
SkColorSpace
*
getColorSpace
(
)
const
;
uint32_t
uniqueID
(
)
const
{
return
fUniqueID
;
}
virtual
SkAlphaType
alphaType
(
)
const
=
0
;
virtual
size_t
getSize
(
)
const
=
0
;
sk_sp
<
SkSpecialImage
>
makeTextureImage
(
GrContext
*
)
;
void
draw
(
SkCanvas
*
SkScalar
x
SkScalar
y
const
SkPaint
*
)
const
;
static
sk_sp
<
SkSpecialImage
>
MakeFromImage
(
const
SkIRect
&
subset
sk_sp
<
SkImage
>
SkColorSpace
*
dstColorSpace
const
SkSurfaceProps
*
=
nullptr
)
;
static
sk_sp
<
SkSpecialImage
>
MakeFromRaster
(
const
SkIRect
&
subset
const
SkBitmap
&
const
SkSurfaceProps
*
=
nullptr
)
;
#
if
SK_SUPPORT_GPU
static
sk_sp
<
SkSpecialImage
>
MakeDeferredFromGpu
(
GrContext
*
const
SkIRect
&
subset
uint32_t
uniqueID
sk_sp
<
GrTextureProxy
>
sk_sp
<
SkColorSpace
>
const
SkSurfaceProps
*
=
nullptr
SkAlphaType
at
=
kPremul_SkAlphaType
)
;
#
endif
sk_sp
<
SkSpecialSurface
>
makeSurface
(
const
SkImageFilter
:
:
OutputProperties
&
outProps
const
SkISize
&
size
SkAlphaType
at
=
kPremul_SkAlphaType
const
SkSurfaceProps
*
props
=
nullptr
)
const
;
sk_sp
<
SkSurface
>
makeTightSurface
(
const
SkImageFilter
:
:
OutputProperties
&
outProps
const
SkISize
&
size
SkAlphaType
at
=
kPremul_SkAlphaType
)
const
;
sk_sp
<
SkSpecialImage
>
makeSubset
(
const
SkIRect
&
subset
)
const
;
sk_sp
<
SkImage
>
asImage
(
const
SkIRect
*
subset
=
nullptr
)
const
;
bool
isTextureBacked
(
)
const
;
GrContext
*
getContext
(
)
const
;
#
if
SK_SUPPORT_GPU
sk_sp
<
GrTextureProxy
>
asTextureProxyRef
(
GrContext
*
)
const
;
#
endif
bool
getROPixels
(
SkBitmap
*
)
const
;
protected
:
SkSpecialImage
(
const
SkIRect
&
subset
uint32_t
uniqueID
const
SkSurfaceProps
*
)
;
private
:
const
SkSurfaceProps
fProps
;
const
SkIRect
fSubset
;
const
uint32_t
fUniqueID
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
