#
ifndef
SkPathEffectBase_DEFINED
#
define
SkPathEffectBase_DEFINED
#
include
"
include
/
core
/
SkPath
.
h
"
#
include
"
include
/
core
/
SkPathEffect
.
h
"
#
include
"
include
/
core
/
SkPoint
.
h
"
#
include
"
include
/
core
/
SkRect
.
h
"
class
SkPath
;
class
SkStrokeRec
;
class
SkPathEffectBase
:
public
SkPathEffect
{
public
:
SkPathEffectBase
(
)
{
}
class
PointData
{
public
:
PointData
(
)
:
fFlags
(
0
)
fPoints
(
nullptr
)
fNumPoints
(
0
)
{
fSize
.
set
(
SK_Scalar1
SK_Scalar1
)
;
}
~
PointData
(
)
{
delete
[
]
fPoints
;
}
enum
PointFlags
{
kCircles_PointFlag
=
0x01
kUsePath_PointFlag
=
0x02
kUseClip_PointFlag
=
0x04
}
;
uint32_t
fFlags
;
SkPoint
*
fPoints
;
int
fNumPoints
;
SkVector
fSize
;
SkRect
fClipRect
;
SkPath
fPath
;
SkPath
fFirst
;
SkPath
fLast
;
}
;
bool
asPoints
(
PointData
*
results
const
SkPath
&
src
const
SkStrokeRec
&
const
SkMatrix
&
const
SkRect
*
cullR
)
const
;
SkFlattenable
:
:
Type
getFlattenableType
(
)
const
override
{
return
kSkPathEffect_Type
;
}
static
sk_sp
<
SkPathEffect
>
Deserialize
(
const
void
*
data
size_t
size
const
SkDeserialProcs
*
procs
=
nullptr
)
{
return
sk_sp
<
SkPathEffect
>
(
static_cast
<
SkPathEffect
*
>
(
SkFlattenable
:
:
Deserialize
(
kSkPathEffect_Type
data
size
procs
)
.
release
(
)
)
)
;
}
virtual
bool
onFilterPath
(
SkPath
*
const
SkPath
&
SkStrokeRec
*
const
SkRect
*
const
SkMatrix
&
)
const
=
0
;
virtual
bool
onNeedsCTM
(
)
const
{
return
false
;
}
virtual
bool
onAsPoints
(
PointData
*
const
SkPath
&
const
SkStrokeRec
&
const
SkMatrix
&
const
SkRect
*
)
const
{
return
false
;
}
virtual
DashType
onAsADash
(
DashInfo
*
)
const
{
return
kNone_DashType
;
}
virtual
bool
computeFastBounds
(
SkRect
*
bounds
)
const
=
0
;
static
void
RegisterFlattenables
(
)
;
private
:
using
INHERITED
=
SkPathEffect
;
}
;
static
inline
SkPathEffectBase
*
as_PEB
(
SkPathEffect
*
effect
)
{
return
static_cast
<
SkPathEffectBase
*
>
(
effect
)
;
}
static
inline
const
SkPathEffectBase
*
as_PEB
(
const
SkPathEffect
*
effect
)
{
return
static_cast
<
const
SkPathEffectBase
*
>
(
effect
)
;
}
static
inline
const
SkPathEffectBase
*
as_PEB
(
const
sk_sp
<
SkPathEffect
>
&
effect
)
{
return
static_cast
<
SkPathEffectBase
*
>
(
effect
.
get
(
)
)
;
}
static
inline
sk_sp
<
SkPathEffectBase
>
as_PEB_sp
(
sk_sp
<
SkPathEffect
>
effect
)
{
return
sk_sp
<
SkPathEffectBase
>
(
static_cast
<
SkPathEffectBase
*
>
(
effect
.
release
(
)
)
)
;
}
#
endif
