#
ifndef
SkNormalSource_DEFINED
#
define
SkNormalSource_DEFINED
#
include
"
include
/
core
/
SkFlattenable
.
h
"
#
include
"
src
/
shaders
/
SkShaderBase
.
h
"
class
SkMatrix
;
struct
SkPoint3
;
#
if
SK_SUPPORT_GPU
class
GrFragmentProcessor
;
#
endif
class
SK_API
SkNormalSource
:
public
SkFlattenable
{
public
:
virtual
~
SkNormalSource
(
)
override
;
#
if
SK_SUPPORT_GPU
virtual
std
:
:
unique_ptr
<
GrFragmentProcessor
>
asFragmentProcessor
(
const
GrFPArgs
&
)
const
=
0
;
#
endif
class
Provider
{
public
:
virtual
~
Provider
(
)
{
}
virtual
void
fillScanLine
(
int
x
int
y
SkPoint3
output
[
]
int
count
)
const
=
0
;
}
;
virtual
Provider
*
asProvider
(
const
SkShaderBase
:
:
ContextRec
&
SkArenaAlloc
*
)
const
=
0
;
static
sk_sp
<
SkNormalSource
>
MakeFromNormalMap
(
sk_sp
<
SkShader
>
map
const
SkMatrix
&
ctm
)
;
static
sk_sp
<
SkNormalSource
>
MakeFlat
(
)
;
static
Type
GetFlattenableType
(
)
{
return
kSkNormalSource_Type
;
}
Type
getFlattenableType
(
)
const
override
{
return
GetFlattenableType
(
)
;
}
static
sk_sp
<
SkNormalSource
>
Deserialize
(
const
void
*
data
size_t
size
const
SkDeserialProcs
*
procs
=
nullptr
)
{
return
sk_sp
<
SkNormalSource
>
(
static_cast
<
SkNormalSource
*
>
(
SkFlattenable
:
:
Deserialize
(
GetFlattenableType
(
)
data
size
procs
)
.
release
(
)
)
)
;
}
static
void
RegisterFlattenables
(
)
;
}
;
#
endif
