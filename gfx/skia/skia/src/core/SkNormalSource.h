#
ifndef
SkNormalSource_DEFINED
#
define
SkNormalSource_DEFINED
#
include
"
SkFlattenable
.
h
"
#
include
"
SkShader
.
h
"
class
SkMatrix
;
struct
SkPoint3
;
#
if
SK_SUPPORT_GPU
class
GrFragmentProcessor
;
#
endif
class
SK_API
SkNormalSource
:
public
SkFlattenable
{
public
:
virtual
~
SkNormalSource
(
)
override
;
#
if
SK_SUPPORT_GPU
virtual
sk_sp
<
GrFragmentProcessor
>
asFragmentProcessor
(
const
SkShader
:
:
AsFPArgs
&
)
const
=
0
;
#
endif
class
Provider
{
public
:
virtual
~
Provider
(
)
{
}
virtual
void
fillScanLine
(
int
x
int
y
SkPoint3
output
[
]
int
count
)
const
=
0
;
}
;
virtual
Provider
*
asProvider
(
const
SkShader
:
:
ContextRec
&
void
*
storage
)
const
=
0
;
virtual
size_t
providerSize
(
const
SkShader
:
:
ContextRec
&
)
const
=
0
;
static
sk_sp
<
SkNormalSource
>
MakeFromNormalMap
(
sk_sp
<
SkShader
>
map
const
SkMatrix
&
ctm
)
;
static
sk_sp
<
SkNormalSource
>
MakeFlat
(
)
;
enum
class
BevelType
{
kLinear
kRoundedOut
kRoundedIn
}
;
static
sk_sp
<
SkNormalSource
>
MakeBevel
(
BevelType
SkScalar
width
SkScalar
height
)
;
SK_DEFINE_FLATTENABLE_TYPE
(
SkNormalSource
)
SK_DECLARE_FLATTENABLE_REGISTRAR_GROUP
(
)
}
;
#
endif
