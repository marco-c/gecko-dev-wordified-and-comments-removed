#
ifndef
SkRemoteGlyphCacheImpl_DEFINED
#
define
SkRemoteGlyphCacheImpl_DEFINED
#
include
"
SkDescriptor
.
h
"
#
include
"
SkGlyphRun
.
h
"
#
include
"
SkGlyphRunPainter
.
h
"
#
include
"
SkRemoteGlyphCache
.
h
"
class
SkStrikeServer
:
:
SkGlyphCacheState
:
public
SkGlyphCacheInterface
{
public
:
SkGlyphCacheState
(
const
SkDescriptor
&
keyDescriptor
const
SkDescriptor
&
deviceDescriptor
std
:
:
unique_ptr
<
SkScalerContext
>
context
SkDiscardableHandleId
discardableHandleId
)
;
~
SkGlyphCacheState
(
)
override
;
void
addGlyph
(
SkPackedGlyphID
bool
pathOnly
)
;
void
writePendingGlyphs
(
Serializer
*
serializer
)
;
SkDiscardableHandleId
discardableHandleId
(
)
const
{
return
fDiscardableHandleId
;
}
const
SkDescriptor
&
getDeviceDescriptor
(
)
{
return
*
fDeviceDescriptor
.
getDesc
(
)
;
}
bool
isSubpixel
(
)
const
{
return
fIsSubpixel
;
}
SkAxisAlignment
axisAlignmentForHText
(
)
const
{
return
fAxisAlignmentForHText
;
}
const
SkDescriptor
&
getKeyDescriptor
(
)
{
return
*
fKeyDescriptor
.
getDesc
(
)
;
}
const
SkGlyph
&
findGlyph
(
SkPackedGlyphID
)
;
void
setPaint
(
const
SkPaint
&
paint
)
;
SkVector
rounding
(
)
const
override
;
const
SkGlyph
&
getGlyphMetrics
(
SkGlyphID
glyphID
SkPoint
position
)
override
;
private
:
bool
hasPendingGlyphs
(
)
const
{
return
!
fPendingGlyphImages
.
empty
(
)
|
|
!
fPendingGlyphPaths
.
empty
(
)
;
}
void
writeGlyphPath
(
const
SkPackedGlyphID
&
glyphID
Serializer
*
serializer
)
const
;
void
ensureScalerContext
(
)
;
SkTHashSet
<
SkPackedGlyphID
>
fCachedGlyphImages
;
SkTHashSet
<
SkPackedGlyphID
>
fCachedGlyphPaths
;
std
:
:
vector
<
SkPackedGlyphID
>
fPendingGlyphImages
;
std
:
:
vector
<
SkPackedGlyphID
>
fPendingGlyphPaths
;
const
SkAutoDescriptor
fKeyDescriptor
;
const
SkAutoDescriptor
fDeviceDescriptor
;
const
SkDiscardableHandleId
fDiscardableHandleId
;
const
bool
fIsSubpixel
;
const
SkAxisAlignment
fAxisAlignmentForHText
;
std
:
:
unique_ptr
<
SkScalerContext
>
fContext
;
const
SkPaint
*
fPaint
{
nullptr
}
;
SkTHashMap
<
SkPackedGlyphID
SkGlyph
>
fGlyphMap
;
}
;
class
SkTextBlobCacheDiffCanvas
:
:
TrackLayerDevice
:
public
SkNoPixelsDevice
{
public
:
TrackLayerDevice
(
const
SkIRect
&
bounds
const
SkSurfaceProps
&
props
SkStrikeServer
*
server
const
SkTextBlobCacheDiffCanvas
:
:
Settings
&
settings
)
;
SkBaseDevice
*
onCreateDevice
(
const
CreateInfo
&
cinfo
const
SkPaint
*
)
override
;
protected
:
void
drawGlyphRunList
(
const
SkGlyphRunList
&
glyphRunList
)
override
;
private
:
void
processGlyphRun
(
const
SkPoint
&
origin
const
SkGlyphRun
&
glyphRun
)
;
void
processGlyphRunForMask
(
const
SkGlyphRun
&
glyphRun
const
SkMatrix
&
runMatrix
SkPoint
origin
)
;
void
processGlyphRunForPaths
(
const
SkGlyphRun
&
glyphRun
const
SkMatrix
&
runMatrix
SkPoint
origin
)
;
#
if
SK_SUPPORT_GPU
bool
maybeProcessGlyphRunForDFT
(
const
SkGlyphRun
&
glyphRun
const
SkMatrix
&
runMatrix
SkPoint
origin
)
;
#
endif
SkStrikeServer
*
const
fStrikeServer
;
const
SkTextBlobCacheDiffCanvas
:
:
Settings
fSettings
;
SkGlyphRunListPainter
fPainter
;
}
;
#
endif
