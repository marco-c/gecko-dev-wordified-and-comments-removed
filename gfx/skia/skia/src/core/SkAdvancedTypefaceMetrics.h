#
ifndef
SkAdvancedTypefaceMetrics_DEFINED
#
define
SkAdvancedTypefaceMetrics_DEFINED
#
include
"
SkBitmaskEnum
.
h
"
#
include
"
SkRect
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkString
.
h
"
#
include
"
SkTDArray
.
h
"
struct
SkAdvancedTypefaceMetrics
{
SkAdvancedTypefaceMetrics
(
)
{
}
SkAdvancedTypefaceMetrics
(
const
SkAdvancedTypefaceMetrics
&
)
=
delete
;
SkAdvancedTypefaceMetrics
&
operator
=
(
const
SkAdvancedTypefaceMetrics
&
)
=
delete
;
~
SkAdvancedTypefaceMetrics
(
)
{
}
SkString
fFontName
;
enum
StyleFlags
:
uint32_t
{
kFixedPitch_Style
=
0x00000001
kSerif_Style
=
0x00000002
kScript_Style
=
0x00000008
kItalic_Style
=
0x00000040
kAllCaps_Style
=
0x00010000
kSmallCaps_Style
=
0x00020000
kForceBold_Style
=
0x00040000
}
;
StyleFlags
fStyle
=
(
StyleFlags
)
0
;
enum
FontType
:
uint8_t
{
kType1_Font
kType1CID_Font
kCFF_Font
kTrueType_Font
kOther_Font
}
;
FontType
fType
=
kOther_Font
;
enum
FontFlags
:
uint8_t
{
kMultiMaster_FontFlag
=
0x01
kNotEmbeddable_FontFlag
=
0x02
kNotSubsettable_FontFlag
=
0x04
}
;
FontFlags
fFlags
=
(
FontFlags
)
0
;
int16_t
fItalicAngle
=
0
;
int16_t
fAscent
=
0
;
int16_t
fDescent
=
0
;
int16_t
fStemV
=
0
;
int16_t
fCapHeight
=
0
;
SkIRect
fBBox
=
{
0
0
0
0
}
;
SkTArray
<
SkString
>
fGlyphNames
;
SkTDArray
<
SkUnichar
>
fGlyphToUnicode
;
}
;
namespace
skstd
{
template
<
>
struct
is_bitmask_enum
<
SkAdvancedTypefaceMetrics
:
:
FontFlags
>
:
std
:
:
true_type
{
}
;
template
<
>
struct
is_bitmask_enum
<
SkAdvancedTypefaceMetrics
:
:
StyleFlags
>
:
std
:
:
true_type
{
}
;
}
#
endif
