#
ifndef
SkYUVAInfoLocation_DEFINED
#
define
SkYUVAInfoLocation_DEFINED
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkYUVAInfo
.
h
"
#
include
<
algorithm
>
struct
SkYUVAInfo
:
:
YUVALocation
{
int
fPlane
=
-
1
;
SkColorChannel
fChannel
=
SkColorChannel
:
:
kA
;
bool
operator
=
=
(
const
YUVALocation
&
that
)
const
{
return
fPlane
=
=
that
.
fPlane
&
&
fChannel
=
=
that
.
fChannel
;
}
bool
operator
!
=
(
const
YUVALocation
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
static
bool
AreValidLocations
(
const
SkYUVAInfo
:
:
YUVALocations
&
locations
int
*
numPlanes
=
nullptr
)
{
int
maxSlotUsed
=
-
1
;
bool
used
[
SkYUVAInfo
:
:
kMaxPlanes
]
=
{
}
;
bool
valid
=
true
;
for
(
int
i
=
0
;
i
<
SkYUVAInfo
:
:
kYUVAChannelCount
;
+
+
i
)
{
if
(
locations
[
i
]
.
fPlane
<
0
)
{
if
(
i
!
=
SkYUVAInfo
:
:
YUVAChannels
:
:
kA
)
{
valid
=
false
;
}
}
else
if
(
locations
[
i
]
.
fPlane
>
=
SkYUVAInfo
:
:
kMaxPlanes
)
{
valid
=
false
;
}
else
{
maxSlotUsed
=
std
:
:
max
(
locations
[
i
]
.
fPlane
maxSlotUsed
)
;
used
[
i
]
=
true
;
}
}
for
(
int
i
=
0
;
i
<
=
maxSlotUsed
;
+
+
i
)
{
if
(
!
used
[
i
]
)
{
valid
=
false
;
}
}
if
(
numPlanes
)
{
*
numPlanes
=
valid
?
maxSlotUsed
+
1
:
0
;
}
return
valid
;
}
}
;
#
endif
