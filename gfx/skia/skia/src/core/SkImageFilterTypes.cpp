#
include
"
src
/
core
/
SkImageFilterTypes
.
h
"
#
include
"
src
/
core
/
SkImageFilter_Base
.
h
"
static
SkIVector
map_as_vector
(
int32_t
x
int32_t
y
const
SkMatrix
&
matrix
)
{
SkVector
v
=
SkVector
:
:
Make
(
SkIntToScalar
(
x
)
SkIntToScalar
(
y
)
)
;
matrix
.
mapVectors
(
&
v
1
)
;
return
SkIVector
:
:
Make
(
SkScalarRoundToInt
(
v
.
fX
)
SkScalarRoundToInt
(
v
.
fY
)
)
;
}
static
SkVector
map_as_vector
(
SkScalar
x
SkScalar
y
const
SkMatrix
&
matrix
)
{
SkVector
v
=
SkVector
:
:
Make
(
x
y
)
;
matrix
.
mapVectors
(
&
v
1
)
;
return
v
;
}
namespace
skif
{
Mapping
Mapping
:
:
Make
(
const
SkMatrix
&
ctm
const
SkImageFilter
*
filter
)
{
SkMatrix
remainder
layer
;
SkSize
scale
;
if
(
ctm
.
isScaleTranslate
(
)
|
|
as_IFB
(
filter
)
-
>
canHandleComplexCTM
(
)
)
{
remainder
=
SkMatrix
:
:
I
(
)
;
layer
=
ctm
;
}
else
if
(
ctm
.
decomposeScale
(
&
scale
&
remainder
)
)
{
layer
=
SkMatrix
:
:
MakeScale
(
scale
.
fWidth
scale
.
fHeight
)
;
}
else
{
remainder
=
ctm
;
layer
=
SkMatrix
:
:
I
(
)
;
}
return
Mapping
(
remainder
layer
)
;
}
template
<
>
SkIRect
Mapping
:
:
map
<
SkIRect
>
(
const
SkIRect
&
geom
const
SkMatrix
&
matrix
)
{
return
matrix
.
mapRect
(
SkRect
:
:
Make
(
geom
)
)
.
roundOut
(
)
;
}
template
<
>
SkRect
Mapping
:
:
map
<
SkRect
>
(
const
SkRect
&
geom
const
SkMatrix
&
matrix
)
{
return
matrix
.
mapRect
(
geom
)
;
}
template
<
>
SkIPoint
Mapping
:
:
map
<
SkIPoint
>
(
const
SkIPoint
&
geom
const
SkMatrix
&
matrix
)
{
SkPoint
p
=
SkPoint
:
:
Make
(
SkIntToScalar
(
geom
.
fX
)
SkIntToScalar
(
geom
.
fY
)
)
;
matrix
.
mapPoints
(
&
p
1
)
;
return
SkIPoint
:
:
Make
(
SkScalarRoundToInt
(
p
.
fX
)
SkScalarRoundToInt
(
p
.
fY
)
)
;
}
template
<
>
SkPoint
Mapping
:
:
map
<
SkPoint
>
(
const
SkPoint
&
geom
const
SkMatrix
&
matrix
)
{
SkPoint
p
;
matrix
.
mapPoints
(
&
p
&
geom
1
)
;
return
p
;
}
template
<
>
IVector
Mapping
:
:
map
<
IVector
>
(
const
IVector
&
geom
const
SkMatrix
&
matrix
)
{
return
IVector
(
map_as_vector
(
geom
.
fX
geom
.
fY
matrix
)
)
;
}
template
<
>
Vector
Mapping
:
:
map
<
Vector
>
(
const
Vector
&
geom
const
SkMatrix
&
matrix
)
{
return
Vector
(
map_as_vector
(
geom
.
fX
geom
.
fY
matrix
)
)
;
}
template
<
>
SkISize
Mapping
:
:
map
<
SkISize
>
(
const
SkISize
&
geom
const
SkMatrix
&
matrix
)
{
SkIVector
v
=
map_as_vector
(
geom
.
fWidth
geom
.
fHeight
matrix
)
;
return
SkISize
:
:
Make
(
v
.
fX
v
.
fY
)
;
}
template
<
>
SkSize
Mapping
:
:
map
<
SkSize
>
(
const
SkSize
&
geom
const
SkMatrix
&
matrix
)
{
SkVector
v
=
map_as_vector
(
geom
.
fWidth
geom
.
fHeight
matrix
)
;
return
SkSize
:
:
Make
(
v
.
fX
v
.
fY
)
;
}
}
