#
ifndef
SkATrace_DEFINED
#
define
SkATrace_DEFINED
#
include
"
SkEventTracer
.
h
"
class
SkATrace
:
public
SkEventTracer
{
public
:
SkATrace
(
)
;
SkEventTracer
:
:
Handle
addTraceEvent
(
char
phase
const
uint8_t
*
categoryEnabledFlag
const
char
*
name
uint64_t
id
int
numArgs
const
char
*
*
argNames
const
uint8_t
*
argTypes
const
uint64_t
*
argValues
uint8_t
flags
)
override
;
void
updateTraceEventDuration
(
const
uint8_t
*
categoryEnabledFlag
const
char
*
name
SkEventTracer
:
:
Handle
handle
)
override
;
const
uint8_t
*
getCategoryGroupEnabled
(
const
char
*
name
)
override
;
const
char
*
getCategoryGroupName
(
const
uint8_t
*
categoryEnabledFlag
)
override
{
static
const
char
*
category
=
"
skiaATrace
"
;
return
category
;
}
private
:
void
(
*
fBeginSection
)
(
const
char
*
)
;
void
(
*
fEndSection
)
(
void
)
;
bool
(
*
fIsEnabled
)
(
void
)
;
}
;
#
ifdef
SK_BUILD_FOR_ANDROID_FRAMEWORK
#
include
<
utils
/
Trace
.
h
>
#
define
ATRACE_ANDROID_FRAMEWORK
(
fmt
.
.
.
)
SkAndroidTraceUtil
__trace
=
\
(
SkAndroidTraceUtil
:
:
atraceFormatBegin
(
fmt
#
#
__VA_ARGS__
)
SkAndroidTraceUtil
(
)
)
class
SkAndroidTraceUtil
{
public
:
~
SkAndroidTraceUtil
(
)
{
ATRACE_END
(
)
;
}
static
void
atraceFormatBegin
(
const
char
*
fmt
.
.
.
)
{
if
(
CC_LIKELY
(
!
ATRACE_ENABLED
(
)
)
)
return
;
const
int
BUFFER_SIZE
=
256
;
va_list
ap
;
char
buf
[
BUFFER_SIZE
]
;
va_start
(
ap
fmt
)
;
vsnprintf
(
buf
BUFFER_SIZE
fmt
ap
)
;
va_end
(
ap
)
;
ATRACE_BEGIN
(
buf
)
;
}
}
;
#
else
#
define
ATRACE_ANDROID_FRAMEWORK
(
fmt
.
.
.
)
#
endif
#
endif
