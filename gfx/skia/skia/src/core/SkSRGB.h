#
ifndef
SkSRGB_DEFINED
#
define
SkSRGB_DEFINED
#
include
"
SkNx
.
h
"
extern
const
float
sk_linear_from_srgb
[
256
]
;
static
inline
Sk4f
sk_clamp_0_255
(
const
Sk4f
&
x
)
{
return
Sk4f
:
:
Min
(
Sk4f
:
:
Max
(
x
0
.
0f
)
255
.
0f
)
;
}
static
inline
Sk4f
sk_linear_to_srgb_needs_trunc
(
const
Sk4f
&
x
)
{
auto
rsqrt
=
x
.
rsqrt
(
)
sqrt
=
rsqrt
.
invert
(
)
ftrt
=
rsqrt
.
rsqrt
(
)
;
auto
lo
=
(
13
.
0471f
*
255
.
0f
)
*
x
;
auto
hi
=
(
-
0
.
0974983f
*
255
.
0f
)
+
(
+
0
.
687999f
*
255
.
0f
)
*
sqrt
+
(
+
0
.
412999f
*
255
.
0f
)
*
ftrt
;
return
(
x
<
0
.
0048f
)
.
thenElse
(
lo
hi
)
;
}
static
inline
Sk4i
sk_linear_to_srgb
(
const
Sk4f
&
x
)
{
Sk4f
f
=
sk_linear_to_srgb_needs_trunc
(
x
)
;
return
SkNx_cast
<
int
>
(
sk_clamp_0_255
(
f
)
)
;
}
static
inline
Sk4i
sk_linear_to_srgb_noclamp
(
const
Sk4f
&
x
)
{
Sk4f
f
=
sk_linear_to_srgb_needs_trunc
(
x
)
;
for
(
int
i
=
0
;
i
<
4
;
i
+
+
)
{
SkASSERTF
(
0
.
0f
<
=
f
[
i
]
&
&
f
[
i
]
<
256
.
0f
"
f
[
%
d
]
was
%
g
outside
[
0
256
)
\
n
"
i
f
[
i
]
)
;
}
return
SkNx_cast
<
int
>
(
f
)
;
}
static
inline
Sk4f
sk_linear_from_srgb_math
(
const
Sk4i
&
s
)
{
auto
x
=
SkNx_cast
<
float
>
(
s
)
;
const
float
u
=
1
/
255
.
0f
;
const
float
k0
=
0
.
0025f
k2
=
0
.
6975f
*
u
*
u
k3
=
0
.
3000f
*
u
*
u
*
u
;
auto
hi
=
k0
+
(
k2
+
k3
*
x
)
*
(
x
*
x
)
;
auto
lo
=
x
*
(
u
/
12
.
92f
)
;
return
(
x
<
14
.
025f
)
.
thenElse
(
lo
hi
)
;
}
#
endif
