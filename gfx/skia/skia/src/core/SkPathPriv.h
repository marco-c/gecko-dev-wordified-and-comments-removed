#
ifndef
SkPathPriv_DEFINED
#
define
SkPathPriv_DEFINED
#
include
"
SkPath
.
h
"
class
SkPathPriv
{
public
:
enum
FirstDirection
{
kCW_FirstDirection
kCCW_FirstDirection
kUnknown_FirstDirection
}
;
static
FirstDirection
AsFirstDirection
(
SkPath
:
:
Direction
dir
)
{
return
(
FirstDirection
)
dir
;
}
static
FirstDirection
OppositeFirstDirection
(
FirstDirection
dir
)
{
static
const
FirstDirection
gOppositeDir
[
]
=
{
kCCW_FirstDirection
kCW_FirstDirection
kUnknown_FirstDirection
}
;
return
gOppositeDir
[
dir
]
;
}
static
bool
CheapComputeFirstDirection
(
const
SkPath
&
FirstDirection
*
dir
)
;
static
bool
CheapIsFirstDirection
(
const
SkPath
&
path
FirstDirection
dir
)
{
FirstDirection
computedDir
=
kUnknown_FirstDirection
;
(
void
)
CheapComputeFirstDirection
(
path
&
computedDir
)
;
return
computedDir
=
=
dir
;
}
static
bool
LastVerbIsClose
(
const
SkPath
&
path
)
{
int
count
=
path
.
countVerbs
(
)
;
return
count
>
=
1
&
&
path
.
fPathRef
-
>
verbs
(
)
[
~
(
count
-
1
)
]
=
=
SkPath
:
:
Verb
:
:
kClose_Verb
;
}
static
void
AddGenIDChangeListener
(
const
SkPath
&
path
SkPathRef
:
:
GenIDChangeListener
*
listener
)
{
path
.
fPathRef
-
>
addGenIDChangeListener
(
listener
)
;
}
}
;
#
endif
