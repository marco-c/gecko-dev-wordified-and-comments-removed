#
include
"
include
/
core
/
SkAlphaType
.
h
"
#
include
"
include
/
core
/
SkBitmap
.
h
"
#
include
"
include
/
core
/
SkBlendMode
.
h
"
#
include
"
include
/
core
/
SkCanvas
.
h
"
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
core
/
SkMatrix
.
h
"
#
include
"
include
/
core
/
SkPaint
.
h
"
#
include
"
include
/
core
/
SkPixmap
.
h
"
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkShader
.
h
"
#
include
"
include
/
core
/
SkSurface
.
h
"
#
include
"
include
/
core
/
SkTileMode
.
h
"
#
include
"
src
/
shaders
/
SkImageShader
.
h
"
#
include
<
utility
>
struct
SkSamplingOptions
;
bool
SkPixmap
:
:
scalePixels
(
const
SkPixmap
&
actualDst
const
SkSamplingOptions
&
sampling
)
const
{
SkPixmap
src
=
*
this
dst
=
actualDst
;
if
(
src
.
width
(
)
<
=
0
|
|
src
.
height
(
)
<
=
0
|
|
dst
.
width
(
)
<
=
0
|
|
dst
.
height
(
)
<
=
0
)
{
return
false
;
}
if
(
src
.
width
(
)
=
=
dst
.
width
(
)
&
&
src
.
height
(
)
=
=
dst
.
height
(
)
)
{
return
src
.
readPixels
(
dst
)
;
}
bool
clampAsIfUnpremul
=
false
;
if
(
src
.
alphaType
(
)
=
=
kUnpremul_SkAlphaType
&
&
dst
.
alphaType
(
)
=
=
kUnpremul_SkAlphaType
)
{
src
.
reset
(
src
.
info
(
)
.
makeAlphaType
(
kPremul_SkAlphaType
)
src
.
addr
(
)
src
.
rowBytes
(
)
)
;
dst
.
reset
(
dst
.
info
(
)
.
makeAlphaType
(
kOpaque_SkAlphaType
)
dst
.
addr
(
)
dst
.
rowBytes
(
)
)
;
clampAsIfUnpremul
=
true
;
}
SkBitmap
bitmap
;
if
(
!
bitmap
.
installPixels
(
src
)
)
{
return
false
;
}
bitmap
.
setImmutable
(
)
;
SkMatrix
scale
=
SkMatrix
:
:
RectToRect
(
SkRect
:
:
Make
(
src
.
bounds
(
)
)
SkRect
:
:
Make
(
dst
.
bounds
(
)
)
)
;
sk_sp
<
SkShader
>
shader
=
SkImageShader
:
:
Make
(
bitmap
.
asImage
(
)
SkTileMode
:
:
kClamp
SkTileMode
:
:
kClamp
sampling
&
scale
clampAsIfUnpremul
)
;
sk_sp
<
SkSurface
>
surface
=
SkSurfaces
:
:
WrapPixels
(
dst
.
info
(
)
dst
.
writable_addr
(
)
dst
.
rowBytes
(
)
)
;
if
(
!
shader
|
|
!
surface
)
{
return
false
;
}
SkPaint
paint
;
paint
.
setBlendMode
(
SkBlendMode
:
:
kSrc
)
;
paint
.
setShader
(
std
:
:
move
(
shader
)
)
;
surface
-
>
getCanvas
(
)
-
>
drawPaint
(
paint
)
;
return
true
;
}
