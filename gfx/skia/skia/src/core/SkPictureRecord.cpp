#
include
"
SkPictureRecord
.
h
"
#
include
"
SkDevice
.
h
"
#
include
"
SkImage_Base
.
h
"
#
include
"
SkPatchUtils
.
h
"
#
include
"
SkPixelRef
.
h
"
#
include
"
SkRRect
.
h
"
#
include
"
SkRSXform
.
h
"
#
include
"
SkTextBlob
.
h
"
#
include
"
SkTSearch
.
h
"
#
define
HEAP_BLOCK_SIZE
4096
enum
{
kNoInitialSave
=
-
1
}
;
static
int
const
kUInt32Size
=
4
;
static
const
uint32_t
kSaveSize
=
kUInt32Size
;
#
ifdef
SK_DEBUG
static
const
uint32_t
kSaveLayerNoBoundsSize
=
4
*
kUInt32Size
;
static
const
uint32_t
kSaveLayerWithBoundsSize
=
4
*
kUInt32Size
+
sizeof
(
SkRect
)
;
#
endif
SkPictureRecord
:
:
SkPictureRecord
(
const
SkISize
&
dimensions
uint32_t
flags
)
:
INHERITED
(
dimensions
.
width
(
)
dimensions
.
height
(
)
)
fRecordFlags
(
flags
)
fInitialSaveCount
(
kNoInitialSave
)
{
}
SkPictureRecord
:
:
~
SkPictureRecord
(
)
{
fImageRefs
.
unrefAll
(
)
;
fPictureRefs
.
unrefAll
(
)
;
fTextBlobRefs
.
unrefAll
(
)
;
}
#
ifdef
SK_DEBUG
static
inline
size_t
get_paint_offset
(
DrawType
op
size_t
opSize
)
{
static
const
uint8_t
gPaintOffsets
[
]
=
{
0
0
0
0
0
0
1
1
1
1
0
0
1
1
1
0
1
1
1
1
1
1
1
1
1
1
1
1
0
0
0
0
0
0
0
0
0
0
0
0
1
0
0
1
1
1
1
1
1
1
1
}
;
static_assert
(
sizeof
(
gPaintOffsets
)
=
=
LAST_DRAWTYPE_ENUM
+
1
"
need_to_be_in_sync
"
)
;
SkASSERT
(
(
unsigned
)
op
<
=
(
unsigned
)
LAST_DRAWTYPE_ENUM
)
;
int
overflow
=
0
;
if
(
0
!
=
(
opSize
&
~
MASK_24
)
|
|
opSize
=
=
MASK_24
)
{
overflow
=
sizeof
(
uint32_t
)
;
}
if
(
SAVE_LAYER
=
=
op
)
{
static
const
uint32_t
kSaveLayerNoBoundsPaintOffset
=
2
*
kUInt32Size
;
static
const
uint32_t
kSaveLayerWithBoundsPaintOffset
=
2
*
kUInt32Size
+
sizeof
(
SkRect
)
;
if
(
kSaveLayerNoBoundsSize
=
=
opSize
)
{
return
kSaveLayerNoBoundsPaintOffset
+
overflow
;
}
else
{
SkASSERT
(
kSaveLayerWithBoundsSize
=
=
opSize
)
;
return
kSaveLayerWithBoundsPaintOffset
+
overflow
;
}
}
SkASSERT
(
0
!
=
gPaintOffsets
[
op
]
)
;
return
gPaintOffsets
[
op
]
*
sizeof
(
uint32_t
)
+
overflow
;
}
#
endif
void
SkPictureRecord
:
:
willSave
(
)
{
fRestoreOffsetStack
.
push
(
-
(
int32_t
)
fWriter
.
bytesWritten
(
)
)
;
this
-
>
recordSave
(
)
;
this
-
>
INHERITED
:
:
willSave
(
)
;
}
void
SkPictureRecord
:
:
recordSave
(
)
{
fContentInfo
.
onSave
(
)
;
size_t
size
=
kSaveSize
;
size_t
initialOffset
=
this
-
>
addDraw
(
SAVE
&
size
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
SkCanvas
:
:
SaveLayerStrategy
SkPictureRecord
:
:
willSaveLayer
(
const
SkRect
*
bounds
const
SkPaint
*
paint
SaveFlags
flags
)
{
fRestoreOffsetStack
.
push
(
-
(
int32_t
)
fWriter
.
bytesWritten
(
)
)
;
this
-
>
recordSaveLayer
(
bounds
paint
flags
)
;
this
-
>
INHERITED
:
:
willSaveLayer
(
bounds
paint
flags
)
;
return
kNoLayer_SaveLayerStrategy
;
}
void
SkPictureRecord
:
:
recordSaveLayer
(
const
SkRect
*
bounds
const
SkPaint
*
paint
SaveFlags
flags
)
{
fContentInfo
.
onSaveLayer
(
)
;
size_t
size
=
2
*
kUInt32Size
;
if
(
bounds
)
{
size
+
=
sizeof
(
*
bounds
)
;
}
size
+
=
2
*
kUInt32Size
;
SkASSERT
(
kSaveLayerNoBoundsSize
=
=
size
|
|
kSaveLayerWithBoundsSize
=
=
size
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
SAVE_LAYER
&
size
)
;
this
-
>
addRectPtr
(
bounds
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
SAVE_LAYER
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaintPtr
(
paint
)
;
this
-
>
addInt
(
flags
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
#
ifdef
SK_DEBUG
static
DrawType
peek_op_and_size
(
SkWriter32
*
writer
size_t
offset
uint32_t
*
size
)
{
uint32_t
peek
=
writer
-
>
readTAt
<
uint32_t
>
(
offset
)
;
uint32_t
op
;
UNPACK_8_24
(
peek
op
*
size
)
;
if
(
MASK_24
=
=
*
size
)
{
*
size
=
writer
-
>
readTAt
<
uint32_t
>
(
offset
+
kUInt32Size
)
;
}
return
(
DrawType
)
op
;
}
#
endif
void
SkPictureRecord
:
:
willRestore
(
)
{
#
if
0
SkASSERT
(
fRestoreOffsetStack
.
count
(
)
>
1
)
;
#
endif
if
(
fRestoreOffsetStack
.
count
(
)
=
=
0
)
{
return
;
}
this
-
>
recordRestore
(
)
;
fRestoreOffsetStack
.
pop
(
)
;
this
-
>
INHERITED
:
:
willRestore
(
)
;
}
void
SkPictureRecord
:
:
recordRestore
(
bool
fillInSkips
)
{
fContentInfo
.
onRestore
(
)
;
if
(
fillInSkips
)
{
this
-
>
fillRestoreOffsetPlaceholdersForCurrentStackLevel
(
(
uint32_t
)
fWriter
.
bytesWritten
(
)
)
;
}
size_t
size
=
1
*
kUInt32Size
;
size_t
initialOffset
=
this
-
>
addDraw
(
RESTORE
&
size
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
recordTranslate
(
const
SkMatrix
&
m
)
{
SkASSERT
(
SkMatrix
:
:
kTranslate_Mask
=
=
m
.
getType
(
)
)
;
size_t
size
=
1
*
kUInt32Size
+
2
*
sizeof
(
SkScalar
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
TRANSLATE
&
size
)
;
this
-
>
addScalar
(
m
.
getTranslateX
(
)
)
;
this
-
>
addScalar
(
m
.
getTranslateY
(
)
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
recordScale
(
const
SkMatrix
&
m
)
{
SkASSERT
(
SkMatrix
:
:
kScale_Mask
=
=
m
.
getType
(
)
)
;
size_t
size
=
1
*
kUInt32Size
+
2
*
sizeof
(
SkScalar
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
SCALE
&
size
)
;
this
-
>
addScalar
(
m
.
getScaleX
(
)
)
;
this
-
>
addScalar
(
m
.
getScaleY
(
)
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
didConcat
(
const
SkMatrix
&
matrix
)
{
switch
(
matrix
.
getType
(
)
)
{
case
SkMatrix
:
:
kTranslate_Mask
:
this
-
>
recordTranslate
(
matrix
)
;
break
;
case
SkMatrix
:
:
kScale_Mask
:
this
-
>
recordScale
(
matrix
)
;
break
;
default
:
this
-
>
recordConcat
(
matrix
)
;
break
;
}
this
-
>
INHERITED
:
:
didConcat
(
matrix
)
;
}
void
SkPictureRecord
:
:
recordConcat
(
const
SkMatrix
&
matrix
)
{
this
-
>
validate
(
fWriter
.
bytesWritten
(
)
0
)
;
size_t
size
=
kUInt32Size
+
matrix
.
writeToMemory
(
nullptr
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
CONCAT
&
size
)
;
this
-
>
addMatrix
(
matrix
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
didSetMatrix
(
const
SkMatrix
&
matrix
)
{
this
-
>
validate
(
fWriter
.
bytesWritten
(
)
0
)
;
size_t
size
=
kUInt32Size
+
matrix
.
writeToMemory
(
nullptr
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
SET_MATRIX
&
size
)
;
this
-
>
addMatrix
(
matrix
)
;
this
-
>
validate
(
initialOffset
size
)
;
this
-
>
INHERITED
:
:
didSetMatrix
(
matrix
)
;
}
static
bool
regionOpExpands
(
SkRegion
:
:
Op
op
)
{
switch
(
op
)
{
case
SkRegion
:
:
kUnion_Op
:
case
SkRegion
:
:
kXOR_Op
:
case
SkRegion
:
:
kReverseDifference_Op
:
case
SkRegion
:
:
kReplace_Op
:
return
true
;
case
SkRegion
:
:
kIntersect_Op
:
case
SkRegion
:
:
kDifference_Op
:
return
false
;
default
:
SkDEBUGFAIL
(
"
unknown
region
op
"
)
;
return
false
;
}
}
void
SkPictureRecord
:
:
fillRestoreOffsetPlaceholdersForCurrentStackLevel
(
uint32_t
restoreOffset
)
{
int32_t
offset
=
fRestoreOffsetStack
.
top
(
)
;
while
(
offset
>
0
)
{
uint32_t
peek
=
fWriter
.
readTAt
<
uint32_t
>
(
offset
)
;
fWriter
.
overwriteTAt
(
offset
restoreOffset
)
;
offset
=
peek
;
}
#
ifdef
SK_DEBUG
if
(
offset
>
0
)
{
uint32_t
opSize
;
DrawType
drawOp
=
peek_op_and_size
(
&
fWriter
-
offset
&
opSize
)
;
SkASSERT
(
SAVE
=
=
drawOp
|
|
SAVE_LAYER
=
=
drawOp
)
;
}
#
endif
}
void
SkPictureRecord
:
:
beginRecording
(
)
{
fInitialSaveCount
=
this
-
>
save
(
)
;
}
void
SkPictureRecord
:
:
endRecording
(
)
{
SkASSERT
(
kNoInitialSave
!
=
fInitialSaveCount
)
;
this
-
>
restoreToCount
(
fInitialSaveCount
)
;
}
size_t
SkPictureRecord
:
:
recordRestoreOffsetPlaceholder
(
SkRegion
:
:
Op
op
)
{
if
(
fRestoreOffsetStack
.
isEmpty
(
)
)
{
return
-
1
;
}
int32_t
prevOffset
=
fRestoreOffsetStack
.
top
(
)
;
if
(
regionOpExpands
(
op
)
)
{
this
-
>
fillRestoreOffsetPlaceholdersForCurrentStackLevel
(
0
)
;
prevOffset
=
0
;
}
size_t
offset
=
fWriter
.
bytesWritten
(
)
;
this
-
>
addInt
(
prevOffset
)
;
fRestoreOffsetStack
.
top
(
)
=
SkToU32
(
offset
)
;
return
offset
;
}
void
SkPictureRecord
:
:
onClipRect
(
const
SkRect
&
rect
SkRegion
:
:
Op
op
ClipEdgeStyle
edgeStyle
)
{
this
-
>
recordClipRect
(
rect
op
kSoft_ClipEdgeStyle
=
=
edgeStyle
)
;
this
-
>
INHERITED
:
:
onClipRect
(
rect
op
edgeStyle
)
;
}
size_t
SkPictureRecord
:
:
recordClipRect
(
const
SkRect
&
rect
SkRegion
:
:
Op
op
bool
doAA
)
{
size_t
size
=
1
*
kUInt32Size
+
sizeof
(
rect
)
+
1
*
kUInt32Size
;
if
(
!
fRestoreOffsetStack
.
isEmpty
(
)
)
{
size
+
=
kUInt32Size
;
}
size_t
initialOffset
=
this
-
>
addDraw
(
CLIP_RECT
&
size
)
;
this
-
>
addRect
(
rect
)
;
this
-
>
addInt
(
ClipParams_pack
(
op
doAA
)
)
;
size_t
offset
=
this
-
>
recordRestoreOffsetPlaceholder
(
op
)
;
this
-
>
validate
(
initialOffset
size
)
;
return
offset
;
}
void
SkPictureRecord
:
:
onClipRRect
(
const
SkRRect
&
rrect
SkRegion
:
:
Op
op
ClipEdgeStyle
edgeStyle
)
{
this
-
>
recordClipRRect
(
rrect
op
kSoft_ClipEdgeStyle
=
=
edgeStyle
)
;
this
-
>
INHERITED
:
:
onClipRRect
(
rrect
op
edgeStyle
)
;
}
size_t
SkPictureRecord
:
:
recordClipRRect
(
const
SkRRect
&
rrect
SkRegion
:
:
Op
op
bool
doAA
)
{
size_t
size
=
1
*
kUInt32Size
+
SkRRect
:
:
kSizeInMemory
+
1
*
kUInt32Size
;
if
(
!
fRestoreOffsetStack
.
isEmpty
(
)
)
{
size
+
=
kUInt32Size
;
}
size_t
initialOffset
=
this
-
>
addDraw
(
CLIP_RRECT
&
size
)
;
this
-
>
addRRect
(
rrect
)
;
this
-
>
addInt
(
ClipParams_pack
(
op
doAA
)
)
;
size_t
offset
=
recordRestoreOffsetPlaceholder
(
op
)
;
this
-
>
validate
(
initialOffset
size
)
;
return
offset
;
}
void
SkPictureRecord
:
:
onClipPath
(
const
SkPath
&
path
SkRegion
:
:
Op
op
ClipEdgeStyle
edgeStyle
)
{
int
pathID
=
this
-
>
addPathToHeap
(
path
)
;
this
-
>
recordClipPath
(
pathID
op
kSoft_ClipEdgeStyle
=
=
edgeStyle
)
;
this
-
>
INHERITED
:
:
onClipPath
(
path
op
edgeStyle
)
;
}
size_t
SkPictureRecord
:
:
recordClipPath
(
int
pathID
SkRegion
:
:
Op
op
bool
doAA
)
{
size_t
size
=
3
*
kUInt32Size
;
if
(
!
fRestoreOffsetStack
.
isEmpty
(
)
)
{
size
+
=
kUInt32Size
;
}
size_t
initialOffset
=
this
-
>
addDraw
(
CLIP_PATH
&
size
)
;
this
-
>
addInt
(
pathID
)
;
this
-
>
addInt
(
ClipParams_pack
(
op
doAA
)
)
;
size_t
offset
=
recordRestoreOffsetPlaceholder
(
op
)
;
this
-
>
validate
(
initialOffset
size
)
;
return
offset
;
}
void
SkPictureRecord
:
:
onClipRegion
(
const
SkRegion
&
region
SkRegion
:
:
Op
op
)
{
this
-
>
recordClipRegion
(
region
op
)
;
this
-
>
INHERITED
:
:
onClipRegion
(
region
op
)
;
}
size_t
SkPictureRecord
:
:
recordClipRegion
(
const
SkRegion
&
region
SkRegion
:
:
Op
op
)
{
size_t
size
=
2
*
kUInt32Size
+
region
.
writeToMemory
(
nullptr
)
;
if
(
!
fRestoreOffsetStack
.
isEmpty
(
)
)
{
size
+
=
kUInt32Size
;
}
size_t
initialOffset
=
this
-
>
addDraw
(
CLIP_REGION
&
size
)
;
this
-
>
addRegion
(
region
)
;
this
-
>
addInt
(
ClipParams_pack
(
op
false
)
)
;
size_t
offset
=
this
-
>
recordRestoreOffsetPlaceholder
(
op
)
;
this
-
>
validate
(
initialOffset
size
)
;
return
offset
;
}
void
SkPictureRecord
:
:
onDrawPaint
(
const
SkPaint
&
paint
)
{
size_t
size
=
2
*
kUInt32Size
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_PAINT
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_PAINT
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaint
(
paint
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawPoints
(
PointMode
mode
size_t
count
const
SkPoint
pts
[
]
const
SkPaint
&
paint
)
{
fContentInfo
.
onDrawPoints
(
count
paint
)
;
size_t
size
=
4
*
kUInt32Size
+
count
*
sizeof
(
SkPoint
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_POINTS
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_POINTS
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaint
(
paint
)
;
this
-
>
addInt
(
mode
)
;
this
-
>
addInt
(
SkToInt
(
count
)
)
;
fWriter
.
writeMul4
(
pts
count
*
sizeof
(
SkPoint
)
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawOval
(
const
SkRect
&
oval
const
SkPaint
&
paint
)
{
size_t
size
=
2
*
kUInt32Size
+
sizeof
(
oval
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_OVAL
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_OVAL
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaint
(
paint
)
;
this
-
>
addRect
(
oval
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawRect
(
const
SkRect
&
rect
const
SkPaint
&
paint
)
{
size_t
size
=
2
*
kUInt32Size
+
sizeof
(
rect
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_RECT
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_RECT
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaint
(
paint
)
;
this
-
>
addRect
(
rect
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawRRect
(
const
SkRRect
&
rrect
const
SkPaint
&
paint
)
{
size_t
size
=
2
*
kUInt32Size
+
SkRRect
:
:
kSizeInMemory
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_RRECT
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_RRECT
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaint
(
paint
)
;
this
-
>
addRRect
(
rrect
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawDRRect
(
const
SkRRect
&
outer
const
SkRRect
&
inner
const
SkPaint
&
paint
)
{
size_t
size
=
2
*
kUInt32Size
+
SkRRect
:
:
kSizeInMemory
*
2
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_DRRECT
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_DRRECT
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaint
(
paint
)
;
this
-
>
addRRect
(
outer
)
;
this
-
>
addRRect
(
inner
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawPath
(
const
SkPath
&
path
const
SkPaint
&
paint
)
{
fContentInfo
.
onDrawPath
(
path
paint
)
;
size_t
size
=
3
*
kUInt32Size
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_PATH
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_PATH
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaint
(
paint
)
;
this
-
>
addPath
(
path
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawBitmap
(
const
SkBitmap
&
bitmap
SkScalar
left
SkScalar
top
const
SkPaint
*
paint
)
{
size_t
size
=
3
*
kUInt32Size
+
2
*
sizeof
(
SkScalar
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_BITMAP
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_BITMAP
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaintPtr
(
paint
)
;
this
-
>
addBitmap
(
bitmap
)
;
this
-
>
addScalar
(
left
)
;
this
-
>
addScalar
(
top
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawBitmapRect
(
const
SkBitmap
&
bitmap
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
)
{
size_t
size
=
5
*
kUInt32Size
;
if
(
src
)
{
size
+
=
sizeof
(
*
src
)
;
}
size
+
=
sizeof
(
dst
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_BITMAP_RECT
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_BITMAP_RECT
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaintPtr
(
paint
)
;
this
-
>
addBitmap
(
bitmap
)
;
this
-
>
addRectPtr
(
src
)
;
this
-
>
addRect
(
dst
)
;
this
-
>
addInt
(
constraint
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawImage
(
const
SkImage
*
image
SkScalar
x
SkScalar
y
const
SkPaint
*
paint
)
{
size_t
size
=
3
*
kUInt32Size
+
2
*
sizeof
(
SkScalar
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_IMAGE
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_IMAGE
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaintPtr
(
paint
)
;
this
-
>
addImage
(
image
)
;
this
-
>
addScalar
(
x
)
;
this
-
>
addScalar
(
y
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawImageRect
(
const
SkImage
*
image
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
)
{
size_t
size
=
5
*
kUInt32Size
;
if
(
src
)
{
size
+
=
sizeof
(
*
src
)
;
}
size
+
=
sizeof
(
dst
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_IMAGE_RECT
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_IMAGE_RECT
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaintPtr
(
paint
)
;
this
-
>
addImage
(
image
)
;
this
-
>
addRectPtr
(
src
)
;
this
-
>
addRect
(
dst
)
;
this
-
>
addInt
(
constraint
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawImageNine
(
const
SkImage
*
img
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
*
paint
)
{
size_t
size
=
3
*
kUInt32Size
+
sizeof
(
SkIRect
)
+
sizeof
(
SkRect
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_IMAGE_NINE
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_IMAGE_NINE
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaintPtr
(
paint
)
;
this
-
>
addImage
(
img
)
;
this
-
>
addIRect
(
center
)
;
this
-
>
addRect
(
dst
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawBitmapNine
(
const
SkBitmap
&
bitmap
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
*
paint
)
{
size_t
size
=
3
*
kUInt32Size
+
sizeof
(
center
)
+
sizeof
(
dst
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_BITMAP_NINE
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_BITMAP_NINE
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaintPtr
(
paint
)
;
this
-
>
addBitmap
(
bitmap
)
;
this
-
>
addIRect
(
center
)
;
this
-
>
addRect
(
dst
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawSprite
(
const
SkBitmap
&
bitmap
int
left
int
top
const
SkPaint
*
paint
)
{
size_t
size
=
5
*
kUInt32Size
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_SPRITE
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_SPRITE
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaintPtr
(
paint
)
;
this
-
>
addBitmap
(
bitmap
)
;
this
-
>
addInt
(
left
)
;
this
-
>
addInt
(
top
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawText
(
const
void
*
text
size_t
byteLength
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
{
size_t
size
=
3
*
kUInt32Size
+
SkAlign4
(
byteLength
)
+
2
*
sizeof
(
SkScalar
)
;
DrawType
op
=
DRAW_TEXT
;
size_t
initialOffset
=
this
-
>
addDraw
(
op
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
op
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaint
(
paint
)
;
this
-
>
addText
(
text
byteLength
)
;
this
-
>
addScalar
(
x
)
;
this
-
>
addScalar
(
y
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawPosText
(
const
void
*
text
size_t
byteLength
const
SkPoint
pos
[
]
const
SkPaint
&
paint
)
{
int
points
=
paint
.
countText
(
text
byteLength
)
;
size_t
size
=
3
*
kUInt32Size
+
SkAlign4
(
byteLength
)
+
kUInt32Size
+
points
*
sizeof
(
SkPoint
)
;
DrawType
op
=
DRAW_POS_TEXT
;
size_t
initialOffset
=
this
-
>
addDraw
(
op
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
op
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaint
(
paint
)
;
this
-
>
addText
(
text
byteLength
)
;
this
-
>
addInt
(
points
)
;
fWriter
.
writeMul4
(
pos
points
*
sizeof
(
SkPoint
)
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawPosTextH
(
const
void
*
text
size_t
byteLength
const
SkScalar
xpos
[
]
SkScalar
constY
const
SkPaint
&
paint
)
{
int
points
=
paint
.
countText
(
text
byteLength
)
;
size_t
size
=
3
*
kUInt32Size
+
SkAlign4
(
byteLength
)
+
1
*
kUInt32Size
;
size
+
=
1
*
kUInt32Size
+
points
*
sizeof
(
SkScalar
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_POS_TEXT_H
&
size
)
;
this
-
>
addPaint
(
paint
)
;
this
-
>
addText
(
text
byteLength
)
;
this
-
>
addInt
(
points
)
;
this
-
>
addScalar
(
constY
)
;
fWriter
.
writeMul4
(
xpos
points
*
sizeof
(
SkScalar
)
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawTextOnPath
(
const
void
*
text
size_t
byteLength
const
SkPath
&
path
const
SkMatrix
*
matrix
const
SkPaint
&
paint
)
{
const
SkMatrix
&
m
=
matrix
?
*
matrix
:
SkMatrix
:
:
I
(
)
;
size_t
size
=
3
*
kUInt32Size
+
SkAlign4
(
byteLength
)
+
kUInt32Size
+
m
.
writeToMemory
(
nullptr
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_TEXT_ON_PATH
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_TEXT_ON_PATH
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaint
(
paint
)
;
this
-
>
addText
(
text
byteLength
)
;
this
-
>
addPath
(
path
)
;
this
-
>
addMatrix
(
m
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawTextBlob
(
const
SkTextBlob
*
blob
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
{
size_t
size
=
3
*
kUInt32Size
+
2
*
sizeof
(
SkScalar
)
;
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_TEXT_BLOB
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_TEXT_BLOB
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaint
(
paint
)
;
this
-
>
addTextBlob
(
blob
)
;
this
-
>
addScalar
(
x
)
;
this
-
>
addScalar
(
y
)
;
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawPicture
(
const
SkPicture
*
picture
const
SkMatrix
*
matrix
const
SkPaint
*
paint
)
{
size_t
size
=
2
*
kUInt32Size
;
size_t
initialOffset
;
if
(
nullptr
=
=
matrix
&
&
nullptr
=
=
paint
)
{
initialOffset
=
this
-
>
addDraw
(
DRAW_PICTURE
&
size
)
;
this
-
>
addPicture
(
picture
)
;
}
else
{
const
SkMatrix
&
m
=
matrix
?
*
matrix
:
SkMatrix
:
:
I
(
)
;
size
+
=
m
.
writeToMemory
(
nullptr
)
+
kUInt32Size
;
initialOffset
=
this
-
>
addDraw
(
DRAW_PICTURE_MATRIX_PAINT
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_PICTURE_MATRIX_PAINT
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaintPtr
(
paint
)
;
this
-
>
addMatrix
(
m
)
;
this
-
>
addPicture
(
picture
)
;
}
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawVertices
(
VertexMode
vmode
int
vertexCount
const
SkPoint
vertices
[
]
const
SkPoint
texs
[
]
const
SkColor
colors
[
]
SkXfermode
*
xfer
const
uint16_t
indices
[
]
int
indexCount
const
SkPaint
&
paint
)
{
uint32_t
flags
=
0
;
if
(
texs
)
{
flags
|
=
DRAW_VERTICES_HAS_TEXS
;
}
if
(
colors
)
{
flags
|
=
DRAW_VERTICES_HAS_COLORS
;
}
if
(
indexCount
>
0
)
{
flags
|
=
DRAW_VERTICES_HAS_INDICES
;
}
if
(
xfer
)
{
SkXfermode
:
:
Mode
mode
;
if
(
xfer
-
>
asMode
(
&
mode
)
&
&
SkXfermode
:
:
kModulate_Mode
!
=
mode
)
{
flags
|
=
DRAW_VERTICES_HAS_XFER
;
}
}
size_t
size
=
5
*
kUInt32Size
+
vertexCount
*
sizeof
(
SkPoint
)
;
if
(
flags
&
DRAW_VERTICES_HAS_TEXS
)
{
size
+
=
vertexCount
*
sizeof
(
SkPoint
)
;
}
if
(
flags
&
DRAW_VERTICES_HAS_COLORS
)
{
size
+
=
vertexCount
*
sizeof
(
SkColor
)
;
}
if
(
flags
&
DRAW_VERTICES_HAS_INDICES
)
{
size
+
=
1
*
kUInt32Size
+
SkAlign4
(
indexCount
*
sizeof
(
uint16_t
)
)
;
}
if
(
flags
&
DRAW_VERTICES_HAS_XFER
)
{
size
+
=
kUInt32Size
;
}
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_VERTICES
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_VERTICES
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaint
(
paint
)
;
this
-
>
addInt
(
flags
)
;
this
-
>
addInt
(
vmode
)
;
this
-
>
addInt
(
vertexCount
)
;
this
-
>
addPoints
(
vertices
vertexCount
)
;
if
(
flags
&
DRAW_VERTICES_HAS_TEXS
)
{
this
-
>
addPoints
(
texs
vertexCount
)
;
}
if
(
flags
&
DRAW_VERTICES_HAS_COLORS
)
{
fWriter
.
writeMul4
(
colors
vertexCount
*
sizeof
(
SkColor
)
)
;
}
if
(
flags
&
DRAW_VERTICES_HAS_INDICES
)
{
this
-
>
addInt
(
indexCount
)
;
fWriter
.
writePad
(
indices
indexCount
*
sizeof
(
uint16_t
)
)
;
}
if
(
flags
&
DRAW_VERTICES_HAS_XFER
)
{
SkXfermode
:
:
Mode
mode
=
SkXfermode
:
:
kModulate_Mode
;
(
void
)
xfer
-
>
asMode
(
&
mode
)
;
this
-
>
addInt
(
mode
)
;
}
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawPatch
(
const
SkPoint
cubics
[
12
]
const
SkColor
colors
[
4
]
const
SkPoint
texCoords
[
4
]
SkXfermode
*
xmode
const
SkPaint
&
paint
)
{
size_t
size
=
2
*
kUInt32Size
+
SkPatchUtils
:
:
kNumCtrlPts
*
sizeof
(
SkPoint
)
+
kUInt32Size
;
uint32_t
flag
=
0
;
if
(
colors
)
{
flag
|
=
DRAW_VERTICES_HAS_COLORS
;
size
+
=
SkPatchUtils
:
:
kNumCorners
*
sizeof
(
SkColor
)
;
}
if
(
texCoords
)
{
flag
|
=
DRAW_VERTICES_HAS_TEXS
;
size
+
=
SkPatchUtils
:
:
kNumCorners
*
sizeof
(
SkPoint
)
;
}
if
(
xmode
)
{
SkXfermode
:
:
Mode
mode
;
if
(
xmode
-
>
asMode
(
&
mode
)
&
&
SkXfermode
:
:
kModulate_Mode
!
=
mode
)
{
flag
|
=
DRAW_VERTICES_HAS_XFER
;
size
+
=
kUInt32Size
;
}
}
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_PATCH
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_PATCH
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaint
(
paint
)
;
this
-
>
addPatch
(
cubics
)
;
this
-
>
addInt
(
flag
)
;
if
(
colors
)
{
fWriter
.
write
(
colors
SkPatchUtils
:
:
kNumCorners
*
sizeof
(
SkColor
)
)
;
}
if
(
texCoords
)
{
fWriter
.
write
(
texCoords
SkPatchUtils
:
:
kNumCorners
*
sizeof
(
SkPoint
)
)
;
}
if
(
flag
&
DRAW_VERTICES_HAS_XFER
)
{
SkXfermode
:
:
Mode
mode
=
SkXfermode
:
:
kModulate_Mode
;
xmode
-
>
asMode
(
&
mode
)
;
this
-
>
addInt
(
mode
)
;
}
this
-
>
validate
(
initialOffset
size
)
;
}
void
SkPictureRecord
:
:
onDrawAtlas
(
const
SkImage
*
atlas
const
SkRSXform
xform
[
]
const
SkRect
tex
[
]
const
SkColor
colors
[
]
int
count
SkXfermode
:
:
Mode
mode
const
SkRect
*
cull
const
SkPaint
*
paint
)
{
size_t
size
=
5
*
kUInt32Size
+
count
*
sizeof
(
SkRSXform
)
+
count
*
sizeof
(
SkRect
)
;
uint32_t
flags
=
0
;
if
(
colors
)
{
flags
|
=
DRAW_ATLAS_HAS_COLORS
;
size
+
=
count
*
sizeof
(
SkColor
)
;
size
+
=
sizeof
(
uint32_t
)
;
}
if
(
cull
)
{
flags
|
=
DRAW_ATLAS_HAS_CULL
;
size
+
=
sizeof
(
SkRect
)
;
}
size_t
initialOffset
=
this
-
>
addDraw
(
DRAW_ATLAS
&
size
)
;
SkASSERT
(
initialOffset
+
get_paint_offset
(
DRAW_ATLAS
size
)
=
=
fWriter
.
bytesWritten
(
)
)
;
this
-
>
addPaintPtr
(
paint
)
;
this
-
>
addImage
(
atlas
)
;
this
-
>
addInt
(
flags
)
;
this
-
>
addInt
(
count
)
;
fWriter
.
write
(
xform
count
*
sizeof
(
SkRSXform
)
)
;
fWriter
.
write
(
tex
count
*
sizeof
(
SkRect
)
)
;
if
(
colors
)
{
fWriter
.
write
(
colors
count
*
sizeof
(
SkColor
)
)
;
this
-
>
addInt
(
mode
)
;
}
if
(
cull
)
{
fWriter
.
write
(
cull
sizeof
(
SkRect
)
)
;
}
this
-
>
validate
(
initialOffset
size
)
;
}
SkSurface
*
SkPictureRecord
:
:
onNewSurface
(
const
SkImageInfo
&
info
const
SkSurfaceProps
&
)
{
return
nullptr
;
}
static
bool
equivalent
(
const
SkBitmap
&
a
const
SkBitmap
&
b
)
{
if
(
a
.
info
(
)
!
=
b
.
info
(
)
|
|
a
.
pixelRefOrigin
(
)
!
=
b
.
pixelRefOrigin
(
)
)
{
return
false
;
}
if
(
a
.
pixelRef
(
)
=
=
b
.
pixelRef
(
)
)
{
return
true
;
}
if
(
!
a
.
pixelRef
(
)
|
|
!
b
.
pixelRef
(
)
)
{
return
false
;
}
SkAutoTUnref
<
SkData
>
encA
(
a
.
pixelRef
(
)
-
>
refEncodedData
(
)
)
encB
(
b
.
pixelRef
(
)
-
>
refEncodedData
(
)
)
;
if
(
encA
&
&
encB
)
{
return
encA
-
>
equals
(
encB
)
;
}
else
if
(
encA
|
|
encB
)
{
return
false
;
}
SkAutoLockPixels
al
(
a
)
bl
(
b
)
;
const
char
*
ap
=
(
const
char
*
)
a
.
getPixels
(
)
;
const
char
*
bp
=
(
const
char
*
)
b
.
getPixels
(
)
;
if
(
ap
&
&
bp
)
{
SkASSERT
(
a
.
info
(
)
=
=
b
.
info
(
)
)
;
SkASSERT
(
a
.
info
(
)
.
bytesPerPixel
(
)
>
0
)
;
const
SkImageInfo
info
=
a
.
info
(
)
;
const
size_t
bytesToCompare
=
info
.
width
(
)
*
info
.
bytesPerPixel
(
)
;
for
(
int
row
=
0
;
row
<
info
.
height
(
)
;
row
+
+
)
{
if
(
0
!
=
memcmp
(
ap
bp
bytesToCompare
)
)
{
return
false
;
}
ap
+
=
a
.
rowBytes
(
)
;
bp
+
=
b
.
rowBytes
(
)
;
}
return
true
;
}
return
false
;
}
void
SkPictureRecord
:
:
addBitmap
(
const
SkBitmap
&
bitmap
)
{
for
(
int
i
=
0
;
i
<
fBitmaps
.
count
(
)
;
i
+
+
)
{
if
(
equivalent
(
fBitmaps
[
i
]
bitmap
)
)
{
this
-
>
addInt
(
i
)
;
return
;
}
}
if
(
bitmap
.
isImmutable
(
)
)
{
fBitmaps
.
push_back
(
bitmap
)
;
}
else
{
SkBitmap
copy
;
bitmap
.
copyTo
(
&
copy
)
;
copy
.
setImmutable
(
)
;
fBitmaps
.
push_back
(
copy
)
;
}
this
-
>
addInt
(
fBitmaps
.
count
(
)
-
1
)
;
}
void
SkPictureRecord
:
:
addImage
(
const
SkImage
*
image
)
{
int
index
=
fImageRefs
.
find
(
image
)
;
if
(
index
>
=
0
)
{
this
-
>
addInt
(
index
)
;
}
else
{
*
fImageRefs
.
append
(
)
=
SkRef
(
image
)
;
this
-
>
addInt
(
fImageRefs
.
count
(
)
-
1
)
;
}
}
void
SkPictureRecord
:
:
addMatrix
(
const
SkMatrix
&
matrix
)
{
fWriter
.
writeMatrix
(
matrix
)
;
}
void
SkPictureRecord
:
:
addPaintPtr
(
const
SkPaint
*
paint
)
{
fContentInfo
.
onAddPaintPtr
(
paint
)
;
if
(
paint
)
{
fPaints
.
push_back
(
*
paint
)
;
this
-
>
addInt
(
fPaints
.
count
(
)
)
;
}
else
{
this
-
>
addInt
(
0
)
;
}
}
int
SkPictureRecord
:
:
addPathToHeap
(
const
SkPath
&
path
)
{
if
(
int
*
n
=
fPaths
.
find
(
path
)
)
{
return
*
n
;
}
int
n
=
fPaths
.
count
(
)
+
1
;
fPaths
.
set
(
path
n
)
;
return
n
;
}
void
SkPictureRecord
:
:
addPath
(
const
SkPath
&
path
)
{
this
-
>
addInt
(
this
-
>
addPathToHeap
(
path
)
)
;
}
void
SkPictureRecord
:
:
addPatch
(
const
SkPoint
cubics
[
12
]
)
{
fWriter
.
write
(
cubics
SkPatchUtils
:
:
kNumCtrlPts
*
sizeof
(
SkPoint
)
)
;
}
void
SkPictureRecord
:
:
addPicture
(
const
SkPicture
*
picture
)
{
int
index
=
fPictureRefs
.
find
(
picture
)
;
if
(
index
<
0
)
{
index
=
fPictureRefs
.
count
(
)
;
*
fPictureRefs
.
append
(
)
=
picture
;
picture
-
>
ref
(
)
;
}
this
-
>
addInt
(
index
+
1
)
;
}
void
SkPictureRecord
:
:
addPoint
(
const
SkPoint
&
point
)
{
fWriter
.
writePoint
(
point
)
;
}
void
SkPictureRecord
:
:
addPoints
(
const
SkPoint
pts
[
]
int
count
)
{
fWriter
.
writeMul4
(
pts
count
*
sizeof
(
SkPoint
)
)
;
}
void
SkPictureRecord
:
:
addNoOp
(
)
{
size_t
size
=
kUInt32Size
;
this
-
>
addDraw
(
NOOP
&
size
)
;
}
void
SkPictureRecord
:
:
addRect
(
const
SkRect
&
rect
)
{
fWriter
.
writeRect
(
rect
)
;
}
void
SkPictureRecord
:
:
addRectPtr
(
const
SkRect
*
rect
)
{
if
(
fWriter
.
writeBool
(
rect
!
=
nullptr
)
)
{
fWriter
.
writeRect
(
*
rect
)
;
}
}
void
SkPictureRecord
:
:
addIRect
(
const
SkIRect
&
rect
)
{
fWriter
.
write
(
&
rect
sizeof
(
rect
)
)
;
}
void
SkPictureRecord
:
:
addIRectPtr
(
const
SkIRect
*
rect
)
{
if
(
fWriter
.
writeBool
(
rect
!
=
nullptr
)
)
{
*
(
SkIRect
*
)
fWriter
.
reserve
(
sizeof
(
SkIRect
)
)
=
*
rect
;
}
}
void
SkPictureRecord
:
:
addRRect
(
const
SkRRect
&
rrect
)
{
fWriter
.
writeRRect
(
rrect
)
;
}
void
SkPictureRecord
:
:
addRegion
(
const
SkRegion
&
region
)
{
fWriter
.
writeRegion
(
region
)
;
}
void
SkPictureRecord
:
:
addText
(
const
void
*
text
size_t
byteLength
)
{
fContentInfo
.
onDrawText
(
)
;
addInt
(
SkToInt
(
byteLength
)
)
;
fWriter
.
writePad
(
text
byteLength
)
;
}
void
SkPictureRecord
:
:
addTextBlob
(
const
SkTextBlob
*
blob
)
{
int
index
=
fTextBlobRefs
.
count
(
)
;
*
fTextBlobRefs
.
append
(
)
=
blob
;
blob
-
>
ref
(
)
;
this
-
>
addInt
(
index
+
1
)
;
}
