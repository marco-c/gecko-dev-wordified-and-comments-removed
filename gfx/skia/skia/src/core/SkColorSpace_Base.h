#
ifndef
SkColorSpace_Base_DEFINED
#
define
SkColorSpace_Base_DEFINED
#
include
"
SkColorLookUpTable
.
h
"
#
include
"
SkColorSpace
.
h
"
#
include
"
SkData
.
h
"
#
include
"
SkOnce
.
h
"
#
include
"
SkTemplates
.
h
"
enum
SkGammaNamed
:
uint8_t
{
kLinear_SkGammaNamed
kSRGB_SkGammaNamed
k2Dot2Curve_SkGammaNamed
kNonStandard_SkGammaNamed
}
;
struct
SkGammas
:
SkRefCnt
{
enum
class
Type
:
uint8_t
{
kNone_Type
kNamed_Type
kValue_Type
kTable_Type
kParam_Type
}
;
struct
Table
{
size_t
fOffset
;
int
fSize
;
const
float
*
table
(
const
SkGammas
*
base
)
const
{
return
SkTAddOffset
<
const
float
>
(
base
sizeof
(
SkGammas
)
+
fOffset
)
;
}
}
;
union
Data
{
Data
(
)
:
fTable
{
0
0
}
{
}
inline
bool
operator
=
=
(
const
Data
&
that
)
const
{
return
this
-
>
fTable
.
fOffset
=
=
that
.
fTable
.
fOffset
&
&
this
-
>
fTable
.
fSize
=
=
that
.
fTable
.
fSize
;
}
inline
bool
operator
!
=
(
const
Data
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
SkGammaNamed
fNamed
;
float
fValue
;
Table
fTable
;
size_t
fParamOffset
;
const
SkColorSpaceTransferFn
&
params
(
const
SkGammas
*
base
)
const
{
return
*
SkTAddOffset
<
const
SkColorSpaceTransferFn
>
(
base
sizeof
(
SkGammas
)
+
fParamOffset
)
;
}
}
;
bool
isNamed
(
int
i
)
const
{
return
Type
:
:
kNamed_Type
=
=
this
-
>
type
(
i
)
;
}
bool
isValue
(
int
i
)
const
{
return
Type
:
:
kValue_Type
=
=
this
-
>
type
(
i
)
;
}
bool
isTable
(
int
i
)
const
{
return
Type
:
:
kTable_Type
=
=
this
-
>
type
(
i
)
;
}
bool
isParametric
(
int
i
)
const
{
return
Type
:
:
kParam_Type
=
=
this
-
>
type
(
i
)
;
}
const
Data
&
data
(
int
i
)
const
{
SkASSERT
(
i
>
=
0
&
&
i
<
fChannels
)
;
return
fData
[
i
]
;
}
const
float
*
table
(
int
i
)
const
{
SkASSERT
(
isTable
(
i
)
)
;
return
this
-
>
data
(
i
)
.
fTable
.
table
(
this
)
;
}
int
tableSize
(
int
i
)
const
{
SkASSERT
(
isTable
(
i
)
)
;
return
this
-
>
data
(
i
)
.
fTable
.
fSize
;
}
const
SkColorSpaceTransferFn
&
params
(
int
i
)
const
{
SkASSERT
(
isParametric
(
i
)
)
;
return
this
-
>
data
(
i
)
.
params
(
this
)
;
}
Type
type
(
int
i
)
const
{
SkASSERT
(
i
>
=
0
&
&
i
<
fChannels
)
;
return
fType
[
i
]
;
}
uint8_t
channels
(
)
const
{
return
fChannels
;
}
SkGammas
(
uint8_t
channels
)
:
fChannels
(
channels
)
{
SkASSERT
(
channels
<
=
kMaxColorChannels
)
;
for
(
uint8_t
i
=
0
;
i
<
kMaxColorChannels
;
+
+
i
)
{
fType
[
i
]
=
Type
:
:
kNone_Type
;
}
}
uint8_t
fChannels
;
Data
fData
[
kMaxColorChannels
]
;
Type
fType
[
kMaxColorChannels
]
;
void
*
operator
new
(
size_t
size
)
{
return
sk_malloc_throw
(
size
)
;
}
void
*
operator
new
(
size_t
void
*
p
)
{
return
p
;
}
void
operator
delete
(
void
*
p
)
{
sk_free
(
p
)
;
}
}
;
class
SkColorSpace_Base
:
public
SkColorSpace
{
public
:
virtual
const
SkMatrix44
*
toXYZD50
(
)
const
=
0
;
virtual
uint32_t
toXYZD50Hash
(
)
const
=
0
;
virtual
const
SkMatrix44
*
fromXYZD50
(
)
const
=
0
;
virtual
bool
onGammaCloseToSRGB
(
)
const
=
0
;
virtual
bool
onGammaIsLinear
(
)
const
=
0
;
virtual
bool
onIsNumericalTransferFn
(
SkColorSpaceTransferFn
*
coeffs
)
const
=
0
;
virtual
bool
onIsCMYK
(
)
const
{
return
false
;
}
virtual
sk_sp
<
SkColorSpace
>
makeLinearGamma
(
)
=
0
;
virtual
sk_sp
<
SkColorSpace
>
makeSRGBGamma
(
)
=
0
;
enum
class
Type
:
uint8_t
{
kXYZ
kA2B
}
;
virtual
Type
type
(
)
const
=
0
;
typedef
uint8_t
ICCTypeFlag
;
static
constexpr
ICCTypeFlag
kRGB_ICCTypeFlag
=
1
<
<
0
;
static
constexpr
ICCTypeFlag
kCMYK_ICCTypeFlag
=
1
<
<
1
;
static
constexpr
ICCTypeFlag
kGray_ICCTypeFlag
=
1
<
<
2
;
static
sk_sp
<
SkColorSpace
>
MakeICC
(
const
void
*
input
size_t
len
ICCTypeFlag
type
)
;
static
sk_sp
<
SkColorSpace
>
MakeRGB
(
SkGammaNamed
gammaNamed
const
SkMatrix44
&
toXYZD50
)
;
enum
Named
:
uint8_t
{
kSRGB_Named
kAdobeRGB_Named
kSRGBLinear_Named
kSRGB_NonLinearBlending_Named
}
;
static
sk_sp
<
SkColorSpace
>
MakeNamed
(
Named
)
;
protected
:
SkColorSpace_Base
(
sk_sp
<
SkData
>
profileData
)
;
private
:
sk_sp
<
SkData
>
fProfileData
;
friend
class
SkColorSpace
;
friend
class
SkColorSpace_XYZ
;
friend
class
ColorSpaceXformTest
;
friend
class
ColorSpaceTest
;
typedef
SkColorSpace
INHERITED
;
}
;
static
inline
SkColorSpace_Base
*
as_CSB
(
SkColorSpace
*
colorSpace
)
{
return
static_cast
<
SkColorSpace_Base
*
>
(
colorSpace
)
;
}
static
inline
const
SkColorSpace_Base
*
as_CSB
(
const
SkColorSpace
*
colorSpace
)
{
return
static_cast
<
const
SkColorSpace_Base
*
>
(
colorSpace
)
;
}
static
inline
SkColorSpace_Base
*
as_CSB
(
const
sk_sp
<
SkColorSpace
>
&
colorSpace
)
{
return
static_cast
<
SkColorSpace_Base
*
>
(
colorSpace
.
get
(
)
)
;
}
#
endif
