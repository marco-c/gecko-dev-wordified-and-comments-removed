#
ifndef
SkEdgeBuilder_DEFINED
#
define
SkEdgeBuilder_DEFINED
#
include
"
SkArenaAlloc
.
h
"
#
include
"
SkRect
.
h
"
#
include
"
SkTDArray
.
h
"
#
include
"
SkEdge
.
h
"
#
include
"
SkAnalyticEdge
.
h
"
struct
SkEdge
;
struct
SkAnalyticEdge
;
class
SkEdgeClipper
;
class
SkPath
;
class
SkEdgeBuilder
{
public
:
enum
EdgeType
{
kEdge
kAnalyticEdge
kBezier
}
;
SkEdgeBuilder
(
)
;
int
build
(
const
SkPath
&
path
const
SkIRect
*
clip
int
shiftUp
bool
clipToTheRight
EdgeType
edgeType
=
kEdge
)
;
int
build_edges
(
const
SkPath
&
path
const
SkIRect
*
shiftedClip
int
shiftEdgesUp
bool
pathContainedInClip
EdgeType
edgeType
=
kEdge
)
;
SkEdge
*
*
edgeList
(
)
{
return
(
SkEdge
*
*
)
fEdgeList
;
}
SkAnalyticEdge
*
*
analyticEdgeList
(
)
{
return
(
SkAnalyticEdge
*
*
)
fEdgeList
;
}
SkBezier
*
*
bezierList
(
)
{
return
(
SkBezier
*
*
)
fEdgeList
;
}
private
:
enum
Combine
{
kNo_Combine
kPartial_Combine
kTotal_Combine
}
;
Combine
CombineVertical
(
const
SkEdge
*
edge
SkEdge
*
last
)
;
Combine
CombineVertical
(
const
SkAnalyticEdge
*
edge
SkAnalyticEdge
*
last
)
;
Combine
checkVertical
(
const
SkEdge
*
edge
SkEdge
*
*
edgePtr
)
;
Combine
checkVertical
(
const
SkAnalyticEdge
*
edge
SkAnalyticEdge
*
*
edgePtr
)
;
bool
vertical_line
(
const
SkEdge
*
edge
)
;
bool
vertical_line
(
const
SkAnalyticEdge
*
edge
)
;
SkSTArenaAlloc
<
512
>
fAlloc
;
SkTDArray
<
void
*
>
fList
;
void
*
*
fEdgeList
;
int
fShiftUp
;
EdgeType
fEdgeType
;
public
:
void
addLine
(
const
SkPoint
pts
[
]
)
;
void
addQuad
(
const
SkPoint
pts
[
]
)
;
void
addCubic
(
const
SkPoint
pts
[
]
)
;
void
addClipper
(
SkEdgeClipper
*
)
;
EdgeType
edgeType
(
)
const
{
return
fEdgeType
;
}
int
buildPoly
(
const
SkPath
&
path
const
SkIRect
*
clip
int
shiftUp
bool
clipToTheRight
)
;
inline
void
addPolyLine
(
SkPoint
pts
[
]
char
*
&
edge
size_t
edgeSize
char
*
*
&
edgePtr
int
shiftUp
)
{
if
(
fEdgeType
=
=
kBezier
)
{
if
(
(
(
SkLine
*
)
edge
)
-
>
set
(
pts
)
)
{
*
edgePtr
+
+
=
edge
;
edge
+
=
edgeSize
;
}
return
;
}
bool
analyticAA
=
fEdgeType
=
=
kAnalyticEdge
;
bool
setLineResult
=
analyticAA
?
(
(
SkAnalyticEdge
*
)
edge
)
-
>
setLine
(
pts
[
0
]
pts
[
1
]
)
:
(
(
SkEdge
*
)
edge
)
-
>
setLine
(
pts
[
0
]
pts
[
1
]
shiftUp
)
;
if
(
setLineResult
)
{
Combine
combine
=
analyticAA
?
checkVertical
(
(
SkAnalyticEdge
*
)
edge
(
SkAnalyticEdge
*
*
)
edgePtr
)
:
checkVertical
(
(
SkEdge
*
)
edge
(
SkEdge
*
*
)
edgePtr
)
;
if
(
kNo_Combine
=
=
combine
)
{
*
edgePtr
+
+
=
edge
;
edge
+
=
edgeSize
;
}
else
if
(
kTotal_Combine
=
=
combine
)
{
-
-
edgePtr
;
}
}
}
}
;
#
endif
