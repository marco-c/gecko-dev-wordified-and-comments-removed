#
ifndef
SkRTree_DEFINED
#
define
SkRTree_DEFINED
#
include
"
SkBBoxHierarchy
.
h
"
#
include
"
SkRect
.
h
"
#
include
"
SkTDArray
.
h
"
class
SkRTree
:
public
SkBBoxHierarchy
{
public
:
explicit
SkRTree
(
SkScalar
aspectRatio
=
1
)
;
~
SkRTree
(
)
override
{
}
void
insert
(
const
SkRect
[
]
int
N
)
override
;
void
search
(
const
SkRect
&
query
SkTDArray
<
int
>
*
results
)
const
override
;
size_t
bytesUsed
(
)
const
override
;
int
getDepth
(
)
const
{
return
fCount
?
fRoot
.
fSubtree
-
>
fLevel
+
1
:
0
;
}
int
getCount
(
)
const
{
return
fCount
;
}
SkRect
getRootBound
(
)
const
override
;
static
const
int
kMinChildren
=
6
kMaxChildren
=
11
;
private
:
struct
Node
;
struct
Branch
{
union
{
Node
*
fSubtree
;
int
fOpIndex
;
}
;
SkRect
fBounds
;
}
;
struct
Node
{
uint16_t
fNumChildren
;
uint16_t
fLevel
;
Branch
fChildren
[
kMaxChildren
]
;
}
;
void
search
(
Node
*
root
const
SkRect
&
query
SkTDArray
<
int
>
*
results
)
const
;
Branch
bulkLoad
(
SkTDArray
<
Branch
>
*
branches
int
level
=
0
)
;
static
int
CountNodes
(
int
branches
SkScalar
aspectRatio
)
;
Node
*
allocateNodeAtLevel
(
uint16_t
level
)
;
int
fCount
;
SkScalar
fAspectRatio
;
Branch
fRoot
;
SkTDArray
<
Node
>
fNodes
;
typedef
SkBBoxHierarchy
INHERITED
;
}
;
#
endif
