#
include
"
SkBitmapCache
.
h
"
#
include
"
SkMutex
.
h
"
#
include
"
SkPixelRef
.
h
"
#
include
"
SkTraceEvent
.
h
"
#
include
"
SkNextID
.
h
"
uint32_t
SkNextID
:
:
ImageID
(
)
{
static
uint32_t
gID
=
0
;
uint32_t
id
;
do
{
id
=
sk_atomic_fetch_add
(
&
gID
2u
)
+
2
;
}
while
(
0
=
=
id
)
;
return
id
;
}
#
ifdef
SK_TRACE_PIXELREF_LIFETIME
static
int32_t
gInstCounter
;
#
endif
SkPixelRef
:
:
SkPixelRef
(
int
width
int
height
void
*
pixels
size_t
rowBytes
)
:
fWidth
(
width
)
fHeight
(
height
)
fPixels
(
pixels
)
fRowBytes
(
rowBytes
)
{
#
ifdef
SK_TRACE_PIXELREF_LIFETIME
SkDebugf
(
"
pixelref
%
d
\
n
"
sk_atomic_inc
(
&
gInstCounter
)
)
;
#
endif
this
-
>
needsNewGenID
(
)
;
fMutability
=
kMutable
;
fAddedToCache
.
store
(
false
)
;
}
SkPixelRef
:
:
~
SkPixelRef
(
)
{
#
ifdef
SK_TRACE_PIXELREF_LIFETIME
SkDebugf
(
"
~
pixelref
%
d
\
n
"
sk_atomic_dec
(
&
gInstCounter
)
-
1
)
;
#
endif
this
-
>
callGenIDChangeListeners
(
)
;
}
void
SkPixelRef
:
:
android_only_reset
(
int
width
int
height
size_t
rowBytes
)
{
fWidth
=
width
;
fHeight
=
height
;
fRowBytes
=
rowBytes
;
this
-
>
notifyPixelsChanged
(
)
;
}
void
SkPixelRef
:
:
needsNewGenID
(
)
{
fTaggedGenID
.
store
(
0
)
;
SkASSERT
(
!
this
-
>
genIDIsUnique
(
)
)
;
}
uint32_t
SkPixelRef
:
:
getGenerationID
(
)
const
{
uint32_t
id
=
fTaggedGenID
.
load
(
)
;
if
(
0
=
=
id
)
{
uint32_t
next
=
SkNextID
:
:
ImageID
(
)
|
1u
;
if
(
fTaggedGenID
.
compare_exchange_strong
(
id
next
)
)
{
id
=
next
;
}
else
{
}
}
return
id
&
~
1u
;
}
void
SkPixelRef
:
:
addGenIDChangeListener
(
GenIDChangeListener
*
listener
)
{
if
(
nullptr
=
=
listener
|
|
!
this
-
>
genIDIsUnique
(
)
)
{
delete
listener
;
return
;
}
SkAutoMutexAcquire
lock
(
fGenIDChangeListenersMutex
)
;
*
fGenIDChangeListeners
.
append
(
)
=
listener
;
}
void
SkPixelRef
:
:
callGenIDChangeListeners
(
)
{
SkAutoMutexAcquire
lock
(
fGenIDChangeListenersMutex
)
;
if
(
this
-
>
genIDIsUnique
(
)
)
{
for
(
int
i
=
0
;
i
<
fGenIDChangeListeners
.
count
(
)
;
i
+
+
)
{
fGenIDChangeListeners
[
i
]
-
>
onChange
(
)
;
}
if
(
fAddedToCache
.
load
(
)
)
{
SkNotifyBitmapGenIDIsStale
(
this
-
>
getGenerationID
(
)
)
;
fAddedToCache
.
store
(
false
)
;
}
}
fGenIDChangeListeners
.
deleteAll
(
)
;
}
void
SkPixelRef
:
:
notifyPixelsChanged
(
)
{
#
ifdef
SK_DEBUG
if
(
this
-
>
isImmutable
(
)
)
{
SkDebugf
(
"
=
=
=
=
=
=
=
=
=
=
notifyPixelsChanged
called
on
immutable
pixelref
"
)
;
}
#
endif
this
-
>
callGenIDChangeListeners
(
)
;
this
-
>
needsNewGenID
(
)
;
}
void
SkPixelRef
:
:
setImmutable
(
)
{
fMutability
=
kImmutable
;
}
void
SkPixelRef
:
:
setImmutableWithID
(
uint32_t
genID
)
{
fMutability
=
kImmutable
;
fTaggedGenID
.
store
(
genID
)
;
}
void
SkPixelRef
:
:
setTemporarilyImmutable
(
)
{
SkASSERT
(
fMutability
!
=
kImmutable
)
;
fMutability
=
kTemporarilyImmutable
;
}
void
SkPixelRef
:
:
restoreMutability
(
)
{
SkASSERT
(
fMutability
!
=
kImmutable
)
;
fMutability
=
kMutable
;
}
