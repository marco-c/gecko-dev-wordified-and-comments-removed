#
ifndef
SK_CONVOLVER_H
#
define
SK_CONVOLVER_H
#
include
"
SkSize
.
h
"
#
include
"
SkTDArray
.
h
"
#
if
defined
(
__APPLE__
)
#
undef
FloatToConvolutionFixed
#
undef
ConvolutionFixedToFloat
#
undef
FloatToFixed
#
undef
FixedToFloat
#
endif
class
SkConvolutionFilter1D
{
public
:
typedef
short
ConvolutionFixed
;
enum
{
kShiftBits
=
14
}
;
SK_API
SkConvolutionFilter1D
(
)
;
SK_API
~
SkConvolutionFilter1D
(
)
;
static
ConvolutionFixed
FloatToFixed
(
float
f
)
{
return
static_cast
<
ConvolutionFixed
>
(
f
*
(
1
<
<
kShiftBits
)
)
;
}
static
unsigned
char
FixedToChar
(
ConvolutionFixed
x
)
{
return
static_cast
<
unsigned
char
>
(
x
>
>
kShiftBits
)
;
}
static
float
FixedToFloat
(
ConvolutionFixed
x
)
{
static_assert
(
sizeof
(
ConvolutionFixed
)
=
=
2
"
ConvolutionFixed_type_should_fit_in_float_mantissa
"
)
;
float
raw
=
static_cast
<
float
>
(
x
)
;
return
ldexpf
(
raw
-
kShiftBits
)
;
}
int
maxFilter
(
)
const
{
return
fMaxFilter
;
}
int
numValues
(
)
const
{
return
static_cast
<
int
>
(
fFilters
.
count
(
)
)
;
}
void
reserveAdditional
(
int
filterCount
int
filterValueCount
)
{
fFilters
.
setReserve
(
fFilters
.
count
(
)
+
filterCount
)
;
fFilterValues
.
setReserve
(
fFilterValues
.
count
(
)
+
filterValueCount
)
;
}
void
AddFilter
(
int
filterOffset
const
ConvolutionFixed
*
filterValues
int
filterLength
)
;
inline
const
ConvolutionFixed
*
FilterForValue
(
int
valueOffset
int
*
filterOffset
int
*
filterLength
)
const
{
const
FilterInstance
&
filter
=
fFilters
[
valueOffset
]
;
*
filterOffset
=
filter
.
fOffset
;
*
filterLength
=
filter
.
fTrimmedLength
;
if
(
filter
.
fTrimmedLength
=
=
0
)
{
return
nullptr
;
}
return
&
fFilterValues
[
filter
.
fDataLocation
]
;
}
SK_API
const
ConvolutionFixed
*
GetSingleFilter
(
int
*
specifiedFilterLength
int
*
filterOffset
int
*
filterLength
)
const
;
void
addFilterValue
(
ConvolutionFixed
val
)
{
fFilterValues
.
push_back
(
val
)
;
}
private
:
struct
FilterInstance
{
int
fDataLocation
;
int
fOffset
;
int
fTrimmedLength
;
int
fLength
;
}
;
SkTDArray
<
FilterInstance
>
fFilters
;
SkTDArray
<
ConvolutionFixed
>
fFilterValues
;
int
fMaxFilter
;
}
;
SK_API
bool
BGRAConvolve2D
(
const
unsigned
char
*
sourceData
int
sourceByteRowStride
bool
sourceHasAlpha
const
SkConvolutionFilter1D
&
xfilter
const
SkConvolutionFilter1D
&
yfilter
int
outputByteRowStride
unsigned
char
*
output
)
;
#
endif
