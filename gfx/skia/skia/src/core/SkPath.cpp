#
include
<
cmath
>
#
include
"
SkBuffer
.
h
"
#
include
"
SkCubicClipper
.
h
"
#
include
"
SkErrorInternals
.
h
"
#
include
"
SkGeometry
.
h
"
#
include
"
SkMath
.
h
"
#
include
"
SkPathPriv
.
h
"
#
include
"
SkPathRef
.
h
"
#
include
"
SkRRect
.
h
"
static
void
joinNoEmptyChecks
(
SkRect
*
dst
const
SkRect
&
src
)
{
dst
-
>
fLeft
=
SkMinScalar
(
dst
-
>
fLeft
src
.
fLeft
)
;
dst
-
>
fTop
=
SkMinScalar
(
dst
-
>
fTop
src
.
fTop
)
;
dst
-
>
fRight
=
SkMaxScalar
(
dst
-
>
fRight
src
.
fRight
)
;
dst
-
>
fBottom
=
SkMaxScalar
(
dst
-
>
fBottom
src
.
fBottom
)
;
}
static
bool
is_degenerate
(
const
SkPath
&
path
)
{
SkPath
:
:
Iter
iter
(
path
false
)
;
SkPoint
pts
[
4
]
;
return
SkPath
:
:
kDone_Verb
=
=
iter
.
next
(
pts
)
;
}
class
SkAutoDisableDirectionCheck
{
public
:
SkAutoDisableDirectionCheck
(
SkPath
*
path
)
:
fPath
(
path
)
{
fSaved
=
static_cast
<
SkPathPriv
:
:
FirstDirection
>
(
fPath
-
>
fFirstDirection
.
load
(
)
)
;
}
~
SkAutoDisableDirectionCheck
(
)
{
fPath
-
>
fFirstDirection
=
fSaved
;
}
private
:
SkPath
*
fPath
;
SkPathPriv
:
:
FirstDirection
fSaved
;
}
;
#
define
SkAutoDisableDirectionCheck
(
.
.
.
)
SK_REQUIRE_LOCAL_VAR
(
SkAutoDisableDirectionCheck
)
class
SkAutoPathBoundsUpdate
{
public
:
SkAutoPathBoundsUpdate
(
SkPath
*
path
const
SkRect
&
r
)
:
fRect
(
r
)
{
this
-
>
init
(
path
)
;
}
SkAutoPathBoundsUpdate
(
SkPath
*
path
SkScalar
left
SkScalar
top
SkScalar
right
SkScalar
bottom
)
{
fRect
.
set
(
left
top
right
bottom
)
;
this
-
>
init
(
path
)
;
}
~
SkAutoPathBoundsUpdate
(
)
{
fPath
-
>
setConvexity
(
fDegenerate
?
SkPath
:
:
kConvex_Convexity
:
SkPath
:
:
kUnknown_Convexity
)
;
if
(
fEmpty
|
|
fHasValidBounds
)
{
fPath
-
>
setBounds
(
fRect
)
;
}
}
private
:
SkPath
*
fPath
;
SkRect
fRect
;
bool
fHasValidBounds
;
bool
fDegenerate
;
bool
fEmpty
;
void
init
(
SkPath
*
path
)
{
fRect
.
sort
(
)
;
fPath
=
path
;
fHasValidBounds
=
path
-
>
hasComputedBounds
(
)
&
&
path
-
>
isFinite
(
)
;
fEmpty
=
path
-
>
isEmpty
(
)
;
if
(
fHasValidBounds
&
&
!
fEmpty
)
{
joinNoEmptyChecks
(
&
fRect
fPath
-
>
getBounds
(
)
)
;
}
fDegenerate
=
is_degenerate
(
*
path
)
;
}
}
;
#
define
SkAutoPathBoundsUpdate
(
.
.
.
)
SK_REQUIRE_LOCAL_VAR
(
SkAutoPathBoundsUpdate
)
#
define
INITIAL_LASTMOVETOINDEX_VALUE
~
0
SkPath
:
:
SkPath
(
)
:
fPathRef
(
SkPathRef
:
:
CreateEmpty
(
)
)
{
this
-
>
resetFields
(
)
;
fIsVolatile
=
false
;
}
void
SkPath
:
:
resetFields
(
)
{
fLastMoveToIndex
=
INITIAL_LASTMOVETOINDEX_VALUE
;
fFillType
=
kWinding_FillType
;
fConvexity
=
kUnknown_Convexity
;
fFirstDirection
=
SkPathPriv
:
:
kUnknown_FirstDirection
;
}
SkPath
:
:
SkPath
(
const
SkPath
&
that
)
:
fPathRef
(
SkRef
(
that
.
fPathRef
.
get
(
)
)
)
{
this
-
>
copyFields
(
that
)
;
SkDEBUGCODE
(
that
.
validate
(
)
;
)
}
SkPath
:
:
~
SkPath
(
)
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
}
SkPath
&
SkPath
:
:
operator
=
(
const
SkPath
&
that
)
{
SkDEBUGCODE
(
that
.
validate
(
)
;
)
if
(
this
!
=
&
that
)
{
fPathRef
.
reset
(
SkRef
(
that
.
fPathRef
.
get
(
)
)
)
;
this
-
>
copyFields
(
that
)
;
}
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
return
*
this
;
}
void
SkPath
:
:
copyFields
(
const
SkPath
&
that
)
{
fLastMoveToIndex
=
that
.
fLastMoveToIndex
;
fFillType
=
that
.
fFillType
;
fConvexity
=
that
.
fConvexity
;
fFirstDirection
.
store
(
that
.
fFirstDirection
.
load
(
)
)
;
fIsVolatile
=
that
.
fIsVolatile
;
}
bool
operator
=
=
(
const
SkPath
&
a
const
SkPath
&
b
)
{
return
&
a
=
=
&
b
|
|
(
a
.
fFillType
=
=
b
.
fFillType
&
&
*
a
.
fPathRef
.
get
(
)
=
=
*
b
.
fPathRef
.
get
(
)
)
;
}
void
SkPath
:
:
swap
(
SkPath
&
that
)
{
if
(
this
!
=
&
that
)
{
fPathRef
.
swap
(
that
.
fPathRef
)
;
SkTSwap
<
int
>
(
fLastMoveToIndex
that
.
fLastMoveToIndex
)
;
SkTSwap
<
uint8_t
>
(
fFillType
that
.
fFillType
)
;
SkTSwap
<
uint8_t
>
(
fConvexity
that
.
fConvexity
)
;
uint8_t
temp
=
fFirstDirection
;
fFirstDirection
.
store
(
that
.
fFirstDirection
.
load
(
)
)
;
that
.
fFirstDirection
.
store
(
temp
)
;
SkTSwap
<
SkBool8
>
(
fIsVolatile
that
.
fIsVolatile
)
;
}
}
bool
SkPath
:
:
isInterpolatable
(
const
SkPath
&
compare
)
const
{
int
count
=
fPathRef
-
>
countVerbs
(
)
;
if
(
count
!
=
compare
.
fPathRef
-
>
countVerbs
(
)
)
{
return
false
;
}
if
(
!
count
)
{
return
true
;
}
if
(
memcmp
(
fPathRef
-
>
verbsMemBegin
(
)
compare
.
fPathRef
-
>
verbsMemBegin
(
)
count
)
)
{
return
false
;
}
return
!
fPathRef
-
>
countWeights
(
)
|
|
!
SkToBool
(
memcmp
(
fPathRef
-
>
conicWeights
(
)
compare
.
fPathRef
-
>
conicWeights
(
)
fPathRef
-
>
countWeights
(
)
*
sizeof
(
*
fPathRef
-
>
conicWeights
(
)
)
)
)
;
}
bool
SkPath
:
:
interpolate
(
const
SkPath
&
ending
SkScalar
weight
SkPath
*
out
)
const
{
int
verbCount
=
fPathRef
-
>
countVerbs
(
)
;
if
(
verbCount
!
=
ending
.
fPathRef
-
>
countVerbs
(
)
)
{
return
false
;
}
if
(
!
verbCount
)
{
return
true
;
}
out
-
>
reset
(
)
;
out
-
>
addPath
(
*
this
)
;
fPathRef
-
>
interpolate
(
*
ending
.
fPathRef
weight
out
-
>
fPathRef
)
;
return
true
;
}
static
inline
bool
check_edge_against_rect
(
const
SkPoint
&
p0
const
SkPoint
&
p1
const
SkRect
&
rect
SkPathPriv
:
:
FirstDirection
dir
)
{
const
SkPoint
*
edgeBegin
;
SkVector
v
;
if
(
SkPathPriv
:
:
kCW_FirstDirection
=
=
dir
)
{
v
=
p1
-
p0
;
edgeBegin
=
&
p0
;
}
else
{
v
=
p0
-
p1
;
edgeBegin
=
&
p1
;
}
if
(
v
.
fX
|
|
v
.
fY
)
{
SkScalar
yL
=
SkScalarMul
(
v
.
fY
rect
.
fLeft
-
edgeBegin
-
>
fX
)
;
SkScalar
xT
=
SkScalarMul
(
v
.
fX
rect
.
fTop
-
edgeBegin
-
>
fY
)
;
SkScalar
yR
=
SkScalarMul
(
v
.
fY
rect
.
fRight
-
edgeBegin
-
>
fX
)
;
SkScalar
xB
=
SkScalarMul
(
v
.
fX
rect
.
fBottom
-
edgeBegin
-
>
fY
)
;
if
(
(
xT
<
yL
)
|
|
(
xT
<
yR
)
|
|
(
xB
<
yL
)
|
|
(
xB
<
yR
)
)
{
return
false
;
}
}
return
true
;
}
bool
SkPath
:
:
conservativelyContainsRect
(
const
SkRect
&
rect
)
const
{
if
(
kConvex_Convexity
!
=
this
-
>
getConvexity
(
)
)
{
return
false
;
}
SkPathPriv
:
:
FirstDirection
direction
;
if
(
!
SkPathPriv
:
:
CheapComputeFirstDirection
(
*
this
&
direction
)
)
{
return
false
;
}
SkPoint
firstPt
;
SkPoint
prevPt
;
SkPath
:
:
Iter
iter
(
*
this
true
)
;
SkPath
:
:
Verb
verb
;
SkPoint
pts
[
4
]
;
SkDEBUGCODE
(
int
moveCnt
=
0
;
)
SkDEBUGCODE
(
int
segmentCount
=
0
;
)
SkDEBUGCODE
(
int
closeCount
=
0
;
)
while
(
(
verb
=
iter
.
next
(
pts
true
true
)
)
!
=
kDone_Verb
)
{
int
nextPt
=
-
1
;
switch
(
verb
)
{
case
kMove_Verb
:
SkASSERT
(
!
segmentCount
&
&
!
closeCount
)
;
SkDEBUGCODE
(
+
+
moveCnt
)
;
firstPt
=
prevPt
=
pts
[
0
]
;
break
;
case
kLine_Verb
:
nextPt
=
1
;
SkASSERT
(
moveCnt
&
&
!
closeCount
)
;
SkDEBUGCODE
(
+
+
segmentCount
)
;
break
;
case
kQuad_Verb
:
case
kConic_Verb
:
SkASSERT
(
moveCnt
&
&
!
closeCount
)
;
SkDEBUGCODE
(
+
+
segmentCount
)
;
nextPt
=
2
;
break
;
case
kCubic_Verb
:
SkASSERT
(
moveCnt
&
&
!
closeCount
)
;
SkDEBUGCODE
(
+
+
segmentCount
)
;
nextPt
=
3
;
break
;
case
kClose_Verb
:
SkDEBUGCODE
(
+
+
closeCount
;
)
break
;
default
:
SkDEBUGFAIL
(
"
unknown
verb
"
)
;
}
if
(
-
1
!
=
nextPt
)
{
if
(
SkPath
:
:
kConic_Verb
=
=
verb
)
{
SkConic
orig
;
orig
.
set
(
pts
iter
.
conicWeight
(
)
)
;
SkPoint
quadPts
[
5
]
;
int
count
=
orig
.
chopIntoQuadsPOW2
(
quadPts
1
)
;
SkASSERT_RELEASE
(
2
=
=
count
)
;
if
(
!
check_edge_against_rect
(
quadPts
[
0
]
quadPts
[
2
]
rect
direction
)
)
{
return
false
;
}
if
(
!
check_edge_against_rect
(
quadPts
[
2
]
quadPts
[
4
]
rect
direction
)
)
{
return
false
;
}
}
else
{
if
(
!
check_edge_against_rect
(
prevPt
pts
[
nextPt
]
rect
direction
)
)
{
return
false
;
}
}
prevPt
=
pts
[
nextPt
]
;
}
}
return
check_edge_against_rect
(
prevPt
firstPt
rect
direction
)
;
}
uint32_t
SkPath
:
:
getGenerationID
(
)
const
{
uint32_t
genID
=
fPathRef
-
>
genID
(
)
;
#
ifdef
SK_BUILD_FOR_ANDROID_FRAMEWORK
SkASSERT
(
(
unsigned
)
fFillType
<
(
1
<
<
(
32
-
kPathRefGenIDBitCnt
)
)
)
;
genID
|
=
static_cast
<
uint32_t
>
(
fFillType
)
<
<
kPathRefGenIDBitCnt
;
#
endif
return
genID
;
}
void
SkPath
:
:
reset
(
)
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
fPathRef
.
reset
(
SkPathRef
:
:
CreateEmpty
(
)
)
;
this
-
>
resetFields
(
)
;
}
void
SkPath
:
:
rewind
(
)
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
SkPathRef
:
:
Rewind
(
&
fPathRef
)
;
this
-
>
resetFields
(
)
;
}
bool
SkPath
:
:
isLastContourClosed
(
)
const
{
int
verbCount
=
fPathRef
-
>
countVerbs
(
)
;
if
(
0
=
=
verbCount
)
{
return
false
;
}
return
kClose_Verb
=
=
fPathRef
-
>
atVerb
(
verbCount
-
1
)
;
}
bool
SkPath
:
:
isLine
(
SkPoint
line
[
2
]
)
const
{
int
verbCount
=
fPathRef
-
>
countVerbs
(
)
;
if
(
2
=
=
verbCount
)
{
SkASSERT
(
kMove_Verb
=
=
fPathRef
-
>
atVerb
(
0
)
)
;
if
(
kLine_Verb
=
=
fPathRef
-
>
atVerb
(
1
)
)
{
SkASSERT
(
2
=
=
fPathRef
-
>
countPoints
(
)
)
;
if
(
line
)
{
const
SkPoint
*
pts
=
fPathRef
-
>
points
(
)
;
line
[
0
]
=
pts
[
0
]
;
line
[
1
]
=
pts
[
1
]
;
}
return
true
;
}
}
return
false
;
}
static
int
rect_make_dir
(
SkScalar
dx
SkScalar
dy
)
{
return
(
(
0
!
=
dx
)
<
<
0
)
|
(
(
dx
>
0
|
|
dy
>
0
)
<
<
1
)
;
}
bool
SkPath
:
:
isRectContour
(
bool
allowPartial
int
*
currVerb
const
SkPoint
*
*
ptsPtr
bool
*
isClosed
Direction
*
direction
)
const
{
int
corners
=
0
;
SkPoint
first
last
;
const
SkPoint
*
pts
=
*
ptsPtr
;
const
SkPoint
*
savePts
=
nullptr
;
first
.
set
(
0
0
)
;
last
.
set
(
0
0
)
;
int
firstDirection
=
0
;
int
lastDirection
=
0
;
int
nextDirection
=
0
;
bool
closedOrMoved
=
false
;
bool
autoClose
=
false
;
bool
insertClose
=
false
;
int
verbCnt
=
fPathRef
-
>
countVerbs
(
)
;
while
(
*
currVerb
<
verbCnt
&
&
(
!
allowPartial
|
|
!
autoClose
)
)
{
uint8_t
verb
=
insertClose
?
(
uint8_t
)
kClose_Verb
:
fPathRef
-
>
atVerb
(
*
currVerb
)
;
switch
(
verb
)
{
case
kClose_Verb
:
savePts
=
pts
;
pts
=
*
ptsPtr
;
autoClose
=
true
;
insertClose
=
false
;
case
kLine_Verb
:
{
SkScalar
left
=
last
.
fX
;
SkScalar
top
=
last
.
fY
;
SkScalar
right
=
pts
-
>
fX
;
SkScalar
bottom
=
pts
-
>
fY
;
+
+
pts
;
if
(
left
!
=
right
&
&
top
!
=
bottom
)
{
return
false
;
}
if
(
left
=
=
right
&
&
top
=
=
bottom
)
{
break
;
}
nextDirection
=
rect_make_dir
(
right
-
left
bottom
-
top
)
;
if
(
0
=
=
corners
)
{
firstDirection
=
nextDirection
;
first
=
last
;
last
=
pts
[
-
1
]
;
corners
=
1
;
closedOrMoved
=
false
;
break
;
}
if
(
closedOrMoved
)
{
return
false
;
}
if
(
autoClose
&
&
nextDirection
=
=
firstDirection
)
{
break
;
}
closedOrMoved
=
autoClose
;
if
(
lastDirection
!
=
nextDirection
)
{
if
(
+
+
corners
>
4
)
{
return
false
;
}
}
last
=
pts
[
-
1
]
;
if
(
lastDirection
=
=
nextDirection
)
{
break
;
}
int
turn
=
firstDirection
^
(
corners
-
1
)
;
int
directionCycle
=
3
=
=
corners
?
0
:
nextDirection
^
turn
;
if
(
(
directionCycle
^
turn
)
!
=
nextDirection
)
{
return
false
;
}
break
;
}
case
kQuad_Verb
:
case
kConic_Verb
:
case
kCubic_Verb
:
return
false
;
case
kMove_Verb
:
if
(
allowPartial
&
&
!
autoClose
&
&
firstDirection
)
{
insertClose
=
true
;
*
currVerb
-
=
1
;
goto
addMissingClose
;
}
if
(
pts
!
=
*
ptsPtr
)
{
return
false
;
}
last
=
*
pts
+
+
;
closedOrMoved
=
true
;
break
;
default
:
SkDEBUGFAIL
(
"
unexpected
verb
"
)
;
break
;
}
*
currVerb
+
=
1
;
lastDirection
=
nextDirection
;
addMissingClose
:
;
}
bool
result
=
4
=
=
corners
&
&
(
first
=
=
last
|
|
autoClose
)
;
if
(
!
result
)
{
SkScalar
closeX
=
first
.
x
(
)
-
last
.
x
(
)
;
SkScalar
closeY
=
first
.
y
(
)
-
last
.
y
(
)
;
if
(
closeX
&
&
closeY
)
{
return
false
;
}
int
closeDirection
=
rect_make_dir
(
closeX
closeY
)
;
if
(
3
=
=
corners
|
|
(
4
=
=
corners
&
&
closeDirection
=
=
lastDirection
)
)
{
result
=
true
;
autoClose
=
false
;
}
}
if
(
savePts
)
{
*
ptsPtr
=
savePts
;
}
if
(
result
&
&
isClosed
)
{
*
isClosed
=
autoClose
;
}
if
(
result
&
&
direction
)
{
*
direction
=
firstDirection
=
=
(
(
lastDirection
+
1
)
&
3
)
?
kCCW_Direction
:
kCW_Direction
;
}
return
result
;
}
bool
SkPath
:
:
isRect
(
SkRect
*
rect
bool
*
isClosed
Direction
*
direction
)
const
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
int
currVerb
=
0
;
const
SkPoint
*
pts
=
fPathRef
-
>
points
(
)
;
const
SkPoint
*
first
=
pts
;
if
(
!
this
-
>
isRectContour
(
false
&
currVerb
&
pts
isClosed
direction
)
)
{
return
false
;
}
if
(
rect
)
{
int32_t
num
=
SkToS32
(
pts
-
first
)
;
if
(
num
)
{
rect
-
>
set
(
first
num
)
;
}
else
{
*
rect
=
this
-
>
getBounds
(
)
;
}
}
return
true
;
}
bool
SkPath
:
:
isNestedFillRects
(
SkRect
rects
[
2
]
Direction
dirs
[
2
]
)
const
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
int
currVerb
=
0
;
const
SkPoint
*
pts
=
fPathRef
-
>
points
(
)
;
const
SkPoint
*
first
=
pts
;
Direction
testDirs
[
2
]
;
if
(
!
isRectContour
(
true
&
currVerb
&
pts
nullptr
&
testDirs
[
0
]
)
)
{
return
false
;
}
const
SkPoint
*
last
=
pts
;
SkRect
testRects
[
2
]
;
bool
isClosed
;
if
(
isRectContour
(
false
&
currVerb
&
pts
&
isClosed
&
testDirs
[
1
]
)
)
{
testRects
[
0
]
.
set
(
first
SkToS32
(
last
-
first
)
)
;
if
(
!
isClosed
)
{
pts
=
fPathRef
-
>
points
(
)
+
fPathRef
-
>
countPoints
(
)
;
}
testRects
[
1
]
.
set
(
last
SkToS32
(
pts
-
last
)
)
;
if
(
testRects
[
0
]
.
contains
(
testRects
[
1
]
)
)
{
if
(
rects
)
{
rects
[
0
]
=
testRects
[
0
]
;
rects
[
1
]
=
testRects
[
1
]
;
}
if
(
dirs
)
{
dirs
[
0
]
=
testDirs
[
0
]
;
dirs
[
1
]
=
testDirs
[
1
]
;
}
return
true
;
}
if
(
testRects
[
1
]
.
contains
(
testRects
[
0
]
)
)
{
if
(
rects
)
{
rects
[
0
]
=
testRects
[
1
]
;
rects
[
1
]
=
testRects
[
0
]
;
}
if
(
dirs
)
{
dirs
[
0
]
=
testDirs
[
1
]
;
dirs
[
1
]
=
testDirs
[
0
]
;
}
return
true
;
}
}
return
false
;
}
int
SkPath
:
:
countPoints
(
)
const
{
return
fPathRef
-
>
countPoints
(
)
;
}
int
SkPath
:
:
getPoints
(
SkPoint
dst
[
]
int
max
)
const
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
SkASSERT
(
max
>
=
0
)
;
SkASSERT
(
!
max
|
|
dst
)
;
int
count
=
SkMin32
(
max
fPathRef
-
>
countPoints
(
)
)
;
sk_careful_memcpy
(
dst
fPathRef
-
>
points
(
)
count
*
sizeof
(
SkPoint
)
)
;
return
fPathRef
-
>
countPoints
(
)
;
}
SkPoint
SkPath
:
:
getPoint
(
int
index
)
const
{
if
(
(
unsigned
)
index
<
(
unsigned
)
fPathRef
-
>
countPoints
(
)
)
{
return
fPathRef
-
>
atPoint
(
index
)
;
}
return
SkPoint
:
:
Make
(
0
0
)
;
}
int
SkPath
:
:
countVerbs
(
)
const
{
return
fPathRef
-
>
countVerbs
(
)
;
}
static
inline
void
copy_verbs_reverse
(
uint8_t
*
inorderDst
const
uint8_t
*
reversedSrc
int
count
)
{
for
(
int
i
=
0
;
i
<
count
;
+
+
i
)
{
inorderDst
[
i
]
=
reversedSrc
[
~
i
]
;
}
}
int
SkPath
:
:
getVerbs
(
uint8_t
dst
[
]
int
max
)
const
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
SkASSERT
(
max
>
=
0
)
;
SkASSERT
(
!
max
|
|
dst
)
;
int
count
=
SkMin32
(
max
fPathRef
-
>
countVerbs
(
)
)
;
copy_verbs_reverse
(
dst
fPathRef
-
>
verbs
(
)
count
)
;
return
fPathRef
-
>
countVerbs
(
)
;
}
bool
SkPath
:
:
getLastPt
(
SkPoint
*
lastPt
)
const
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
int
count
=
fPathRef
-
>
countPoints
(
)
;
if
(
count
>
0
)
{
if
(
lastPt
)
{
*
lastPt
=
fPathRef
-
>
atPoint
(
count
-
1
)
;
}
return
true
;
}
if
(
lastPt
)
{
lastPt
-
>
set
(
0
0
)
;
}
return
false
;
}
void
SkPath
:
:
setPt
(
int
index
SkScalar
x
SkScalar
y
)
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
int
count
=
fPathRef
-
>
countPoints
(
)
;
if
(
count
<
=
index
)
{
return
;
}
else
{
SkPathRef
:
:
Editor
ed
(
&
fPathRef
)
;
ed
.
atPoint
(
index
)
-
>
set
(
x
y
)
;
}
}
void
SkPath
:
:
setLastPt
(
SkScalar
x
SkScalar
y
)
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
int
count
=
fPathRef
-
>
countPoints
(
)
;
if
(
count
=
=
0
)
{
this
-
>
moveTo
(
x
y
)
;
}
else
{
SkPathRef
:
:
Editor
ed
(
&
fPathRef
)
;
ed
.
atPoint
(
count
-
1
)
-
>
set
(
x
y
)
;
}
}
void
SkPath
:
:
setConvexity
(
Convexity
c
)
{
if
(
fConvexity
!
=
c
)
{
fConvexity
=
c
;
}
}
#
define
DIRTY_AFTER_EDIT
\
do
{
\
fConvexity
=
kUnknown_Convexity
;
\
fFirstDirection
=
SkPathPriv
:
:
kUnknown_FirstDirection
;
\
}
while
(
0
)
void
SkPath
:
:
incReserve
(
U16CPU
inc
)
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
SkPathRef
:
:
Editor
(
&
fPathRef
inc
inc
)
;
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
}
void
SkPath
:
:
moveTo
(
SkScalar
x
SkScalar
y
)
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
SkPathRef
:
:
Editor
ed
(
&
fPathRef
)
;
fLastMoveToIndex
=
fPathRef
-
>
countPoints
(
)
;
ed
.
growForVerb
(
kMove_Verb
)
-
>
set
(
x
y
)
;
DIRTY_AFTER_EDIT
;
}
void
SkPath
:
:
rMoveTo
(
SkScalar
x
SkScalar
y
)
{
SkPoint
pt
;
this
-
>
getLastPt
(
&
pt
)
;
this
-
>
moveTo
(
pt
.
fX
+
x
pt
.
fY
+
y
)
;
}
void
SkPath
:
:
injectMoveToIfNeeded
(
)
{
if
(
fLastMoveToIndex
<
0
)
{
SkScalar
x
y
;
if
(
fPathRef
-
>
countVerbs
(
)
=
=
0
)
{
x
=
y
=
0
;
}
else
{
const
SkPoint
&
pt
=
fPathRef
-
>
atPoint
(
~
fLastMoveToIndex
)
;
x
=
pt
.
fX
;
y
=
pt
.
fY
;
}
this
-
>
moveTo
(
x
y
)
;
}
}
void
SkPath
:
:
lineTo
(
SkScalar
x
SkScalar
y
)
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
this
-
>
injectMoveToIfNeeded
(
)
;
SkPathRef
:
:
Editor
ed
(
&
fPathRef
)
;
ed
.
growForVerb
(
kLine_Verb
)
-
>
set
(
x
y
)
;
DIRTY_AFTER_EDIT
;
}
void
SkPath
:
:
rLineTo
(
SkScalar
x
SkScalar
y
)
{
this
-
>
injectMoveToIfNeeded
(
)
;
SkPoint
pt
;
this
-
>
getLastPt
(
&
pt
)
;
this
-
>
lineTo
(
pt
.
fX
+
x
pt
.
fY
+
y
)
;
}
void
SkPath
:
:
quadTo
(
SkScalar
x1
SkScalar
y1
SkScalar
x2
SkScalar
y2
)
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
this
-
>
injectMoveToIfNeeded
(
)
;
SkPathRef
:
:
Editor
ed
(
&
fPathRef
)
;
SkPoint
*
pts
=
ed
.
growForVerb
(
kQuad_Verb
)
;
pts
[
0
]
.
set
(
x1
y1
)
;
pts
[
1
]
.
set
(
x2
y2
)
;
DIRTY_AFTER_EDIT
;
}
void
SkPath
:
:
rQuadTo
(
SkScalar
x1
SkScalar
y1
SkScalar
x2
SkScalar
y2
)
{
this
-
>
injectMoveToIfNeeded
(
)
;
SkPoint
pt
;
this
-
>
getLastPt
(
&
pt
)
;
this
-
>
quadTo
(
pt
.
fX
+
x1
pt
.
fY
+
y1
pt
.
fX
+
x2
pt
.
fY
+
y2
)
;
}
void
SkPath
:
:
conicTo
(
SkScalar
x1
SkScalar
y1
SkScalar
x2
SkScalar
y2
SkScalar
w
)
{
if
(
!
(
w
>
0
)
)
{
this
-
>
lineTo
(
x2
y2
)
;
}
else
if
(
!
SkScalarIsFinite
(
w
)
)
{
this
-
>
lineTo
(
x1
y1
)
;
this
-
>
lineTo
(
x2
y2
)
;
}
else
if
(
SK_Scalar1
=
=
w
)
{
this
-
>
quadTo
(
x1
y1
x2
y2
)
;
}
else
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
this
-
>
injectMoveToIfNeeded
(
)
;
SkPathRef
:
:
Editor
ed
(
&
fPathRef
)
;
SkPoint
*
pts
=
ed
.
growForVerb
(
kConic_Verb
w
)
;
pts
[
0
]
.
set
(
x1
y1
)
;
pts
[
1
]
.
set
(
x2
y2
)
;
DIRTY_AFTER_EDIT
;
}
}
void
SkPath
:
:
rConicTo
(
SkScalar
dx1
SkScalar
dy1
SkScalar
dx2
SkScalar
dy2
SkScalar
w
)
{
this
-
>
injectMoveToIfNeeded
(
)
;
SkPoint
pt
;
this
-
>
getLastPt
(
&
pt
)
;
this
-
>
conicTo
(
pt
.
fX
+
dx1
pt
.
fY
+
dy1
pt
.
fX
+
dx2
pt
.
fY
+
dy2
w
)
;
}
void
SkPath
:
:
cubicTo
(
SkScalar
x1
SkScalar
y1
SkScalar
x2
SkScalar
y2
SkScalar
x3
SkScalar
y3
)
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
this
-
>
injectMoveToIfNeeded
(
)
;
SkPathRef
:
:
Editor
ed
(
&
fPathRef
)
;
SkPoint
*
pts
=
ed
.
growForVerb
(
kCubic_Verb
)
;
pts
[
0
]
.
set
(
x1
y1
)
;
pts
[
1
]
.
set
(
x2
y2
)
;
pts
[
2
]
.
set
(
x3
y3
)
;
DIRTY_AFTER_EDIT
;
}
void
SkPath
:
:
rCubicTo
(
SkScalar
x1
SkScalar
y1
SkScalar
x2
SkScalar
y2
SkScalar
x3
SkScalar
y3
)
{
this
-
>
injectMoveToIfNeeded
(
)
;
SkPoint
pt
;
this
-
>
getLastPt
(
&
pt
)
;
this
-
>
cubicTo
(
pt
.
fX
+
x1
pt
.
fY
+
y1
pt
.
fX
+
x2
pt
.
fY
+
y2
pt
.
fX
+
x3
pt
.
fY
+
y3
)
;
}
void
SkPath
:
:
close
(
)
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
int
count
=
fPathRef
-
>
countVerbs
(
)
;
if
(
count
>
0
)
{
switch
(
fPathRef
-
>
atVerb
(
count
-
1
)
)
{
case
kLine_Verb
:
case
kQuad_Verb
:
case
kConic_Verb
:
case
kCubic_Verb
:
case
kMove_Verb
:
{
SkPathRef
:
:
Editor
ed
(
&
fPathRef
)
;
ed
.
growForVerb
(
kClose_Verb
)
;
break
;
}
case
kClose_Verb
:
break
;
default
:
SkDEBUGFAIL
(
"
unexpected
verb
"
)
;
break
;
}
}
#
if
0
if
(
fLastMoveToIndex
>
=
0
)
{
fLastMoveToIndex
=
~
fLastMoveToIndex
;
}
#
else
fLastMoveToIndex
^
=
~
fLastMoveToIndex
>
>
(
8
*
sizeof
(
fLastMoveToIndex
)
-
1
)
;
#
endif
}
namespace
{
template
<
unsigned
N
>
class
PointIterator
{
public
:
PointIterator
(
SkPath
:
:
Direction
dir
unsigned
startIndex
)
:
fCurrent
(
startIndex
%
N
)
fAdvance
(
dir
=
=
SkPath
:
:
kCW_Direction
?
1
:
N
-
1
)
{
}
const
SkPoint
&
current
(
)
const
{
SkASSERT
(
fCurrent
<
N
)
;
return
fPts
[
fCurrent
]
;
}
const
SkPoint
&
next
(
)
{
fCurrent
=
(
fCurrent
+
fAdvance
)
%
N
;
return
this
-
>
current
(
)
;
}
protected
:
SkPoint
fPts
[
N
]
;
private
:
unsigned
fCurrent
;
unsigned
fAdvance
;
}
;
class
RectPointIterator
:
public
PointIterator
<
4
>
{
public
:
RectPointIterator
(
const
SkRect
&
rect
SkPath
:
:
Direction
dir
unsigned
startIndex
)
:
PointIterator
(
dir
startIndex
)
{
fPts
[
0
]
=
SkPoint
:
:
Make
(
rect
.
fLeft
rect
.
fTop
)
;
fPts
[
1
]
=
SkPoint
:
:
Make
(
rect
.
fRight
rect
.
fTop
)
;
fPts
[
2
]
=
SkPoint
:
:
Make
(
rect
.
fRight
rect
.
fBottom
)
;
fPts
[
3
]
=
SkPoint
:
:
Make
(
rect
.
fLeft
rect
.
fBottom
)
;
}
}
;
class
OvalPointIterator
:
public
PointIterator
<
4
>
{
public
:
OvalPointIterator
(
const
SkRect
&
oval
SkPath
:
:
Direction
dir
unsigned
startIndex
)
:
PointIterator
(
dir
startIndex
)
{
const
SkScalar
cx
=
oval
.
centerX
(
)
;
const
SkScalar
cy
=
oval
.
centerY
(
)
;
fPts
[
0
]
=
SkPoint
:
:
Make
(
cx
oval
.
fTop
)
;
fPts
[
1
]
=
SkPoint
:
:
Make
(
oval
.
fRight
cy
)
;
fPts
[
2
]
=
SkPoint
:
:
Make
(
cx
oval
.
fBottom
)
;
fPts
[
3
]
=
SkPoint
:
:
Make
(
oval
.
fLeft
cy
)
;
}
}
;
class
RRectPointIterator
:
public
PointIterator
<
8
>
{
public
:
RRectPointIterator
(
const
SkRRect
&
rrect
SkPath
:
:
Direction
dir
unsigned
startIndex
)
:
PointIterator
(
dir
startIndex
)
{
const
SkRect
&
bounds
=
rrect
.
getBounds
(
)
;
const
SkScalar
L
=
bounds
.
fLeft
;
const
SkScalar
T
=
bounds
.
fTop
;
const
SkScalar
R
=
bounds
.
fRight
;
const
SkScalar
B
=
bounds
.
fBottom
;
fPts
[
0
]
=
SkPoint
:
:
Make
(
L
+
rrect
.
radii
(
SkRRect
:
:
kUpperLeft_Corner
)
.
fX
T
)
;
fPts
[
1
]
=
SkPoint
:
:
Make
(
R
-
rrect
.
radii
(
SkRRect
:
:
kUpperRight_Corner
)
.
fX
T
)
;
fPts
[
2
]
=
SkPoint
:
:
Make
(
R
T
+
rrect
.
radii
(
SkRRect
:
:
kUpperRight_Corner
)
.
fY
)
;
fPts
[
3
]
=
SkPoint
:
:
Make
(
R
B
-
rrect
.
radii
(
SkRRect
:
:
kLowerRight_Corner
)
.
fY
)
;
fPts
[
4
]
=
SkPoint
:
:
Make
(
R
-
rrect
.
radii
(
SkRRect
:
:
kLowerRight_Corner
)
.
fX
B
)
;
fPts
[
5
]
=
SkPoint
:
:
Make
(
L
+
rrect
.
radii
(
SkRRect
:
:
kLowerLeft_Corner
)
.
fX
B
)
;
fPts
[
6
]
=
SkPoint
:
:
Make
(
L
B
-
rrect
.
radii
(
SkRRect
:
:
kLowerLeft_Corner
)
.
fY
)
;
fPts
[
7
]
=
SkPoint
:
:
Make
(
L
T
+
rrect
.
radii
(
SkRRect
:
:
kUpperLeft_Corner
)
.
fY
)
;
}
}
;
}
static
void
assert_known_direction
(
int
dir
)
{
SkASSERT
(
SkPath
:
:
kCW_Direction
=
=
dir
|
|
SkPath
:
:
kCCW_Direction
=
=
dir
)
;
}
void
SkPath
:
:
addRect
(
const
SkRect
&
rect
Direction
dir
)
{
this
-
>
addRect
(
rect
dir
0
)
;
}
void
SkPath
:
:
addRect
(
SkScalar
left
SkScalar
top
SkScalar
right
SkScalar
bottom
Direction
dir
)
{
this
-
>
addRect
(
SkRect
:
:
MakeLTRB
(
left
top
right
bottom
)
dir
0
)
;
}
void
SkPath
:
:
addRect
(
const
SkRect
&
rect
Direction
dir
unsigned
startIndex
)
{
assert_known_direction
(
dir
)
;
fFirstDirection
=
this
-
>
hasOnlyMoveTos
(
)
?
(
SkPathPriv
:
:
FirstDirection
)
dir
:
SkPathPriv
:
:
kUnknown_FirstDirection
;
SkAutoDisableDirectionCheck
addc
(
this
)
;
SkAutoPathBoundsUpdate
apbu
(
this
rect
)
;
SkDEBUGCODE
(
int
initialVerbCount
=
this
-
>
countVerbs
(
)
)
;
const
int
kVerbs
=
5
;
this
-
>
incReserve
(
kVerbs
)
;
RectPointIterator
iter
(
rect
dir
startIndex
)
;
this
-
>
moveTo
(
iter
.
current
(
)
)
;
this
-
>
lineTo
(
iter
.
next
(
)
)
;
this
-
>
lineTo
(
iter
.
next
(
)
)
;
this
-
>
lineTo
(
iter
.
next
(
)
)
;
this
-
>
close
(
)
;
SkASSERT
(
this
-
>
countVerbs
(
)
=
=
initialVerbCount
+
kVerbs
)
;
}
void
SkPath
:
:
addPoly
(
const
SkPoint
pts
[
]
int
count
bool
close
)
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
if
(
count
<
=
0
)
{
return
;
}
fLastMoveToIndex
=
fPathRef
-
>
countPoints
(
)
;
SkPathRef
:
:
Editor
ed
(
&
fPathRef
count
+
close
count
)
;
ed
.
growForVerb
(
kMove_Verb
)
-
>
set
(
pts
[
0
]
.
fX
pts
[
0
]
.
fY
)
;
if
(
count
>
1
)
{
SkPoint
*
p
=
ed
.
growForRepeatedVerb
(
kLine_Verb
count
-
1
)
;
memcpy
(
p
&
pts
[
1
]
(
count
-
1
)
*
sizeof
(
SkPoint
)
)
;
}
if
(
close
)
{
ed
.
growForVerb
(
kClose_Verb
)
;
fLastMoveToIndex
^
=
~
fLastMoveToIndex
>
>
(
8
*
sizeof
(
fLastMoveToIndex
)
-
1
)
;
}
DIRTY_AFTER_EDIT
;
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
}
#
include
"
SkGeometry
.
h
"
static
bool
arc_is_lone_point
(
const
SkRect
&
oval
SkScalar
startAngle
SkScalar
sweepAngle
SkPoint
*
pt
)
{
if
(
0
=
=
sweepAngle
&
&
(
0
=
=
startAngle
|
|
SkIntToScalar
(
360
)
=
=
startAngle
)
)
{
pt
-
>
set
(
oval
.
fRight
oval
.
centerY
(
)
)
;
return
true
;
}
else
if
(
0
=
=
oval
.
width
(
)
&
&
0
=
=
oval
.
height
(
)
)
{
pt
-
>
set
(
oval
.
fRight
oval
.
fTop
)
;
return
true
;
}
return
false
;
}
static
void
angles_to_unit_vectors
(
SkScalar
startAngle
SkScalar
sweepAngle
SkVector
*
startV
SkVector
*
stopV
SkRotationDirection
*
dir
)
{
startV
-
>
fY
=
SkScalarSinCos
(
SkDegreesToRadians
(
startAngle
)
&
startV
-
>
fX
)
;
stopV
-
>
fY
=
SkScalarSinCos
(
SkDegreesToRadians
(
startAngle
+
sweepAngle
)
&
stopV
-
>
fX
)
;
if
(
*
startV
=
=
*
stopV
)
{
SkScalar
sw
=
SkScalarAbs
(
sweepAngle
)
;
if
(
sw
<
SkIntToScalar
(
360
)
&
&
sw
>
SkIntToScalar
(
359
)
)
{
SkScalar
stopRad
=
SkDegreesToRadians
(
startAngle
+
sweepAngle
)
;
SkScalar
deltaRad
=
SkScalarCopySign
(
SK_Scalar1
/
512
sweepAngle
)
;
do
{
stopRad
-
=
deltaRad
;
stopV
-
>
fY
=
SkScalarSinCos
(
stopRad
&
stopV
-
>
fX
)
;
}
while
(
*
startV
=
=
*
stopV
)
;
}
}
*
dir
=
sweepAngle
>
0
?
kCW_SkRotationDirection
:
kCCW_SkRotationDirection
;
}
static
int
build_arc_conics
(
const
SkRect
&
oval
const
SkVector
&
start
const
SkVector
&
stop
SkRotationDirection
dir
SkConic
conics
[
SkConic
:
:
kMaxConicsForArc
]
SkPoint
*
singlePt
)
{
SkMatrix
matrix
;
matrix
.
setScale
(
SkScalarHalf
(
oval
.
width
(
)
)
SkScalarHalf
(
oval
.
height
(
)
)
)
;
matrix
.
postTranslate
(
oval
.
centerX
(
)
oval
.
centerY
(
)
)
;
int
count
=
SkConic
:
:
BuildUnitArc
(
start
stop
dir
&
matrix
conics
)
;
if
(
0
=
=
count
)
{
matrix
.
mapXY
(
start
.
x
(
)
start
.
y
(
)
singlePt
)
;
}
return
count
;
}
void
SkPath
:
:
addRoundRect
(
const
SkRect
&
rect
const
SkScalar
radii
[
]
Direction
dir
)
{
SkRRect
rrect
;
rrect
.
setRectRadii
(
rect
(
const
SkVector
*
)
radii
)
;
this
-
>
addRRect
(
rrect
dir
)
;
}
void
SkPath
:
:
addRRect
(
const
SkRRect
&
rrect
Direction
dir
)
{
this
-
>
addRRect
(
rrect
dir
dir
=
=
kCW_Direction
?
6
:
7
)
;
}
void
SkPath
:
:
addRRect
(
const
SkRRect
&
rrect
Direction
dir
unsigned
startIndex
)
{
assert_known_direction
(
dir
)
;
if
(
rrect
.
isEmpty
(
)
)
{
return
;
}
bool
isRRect
=
hasOnlyMoveTos
(
)
;
const
SkRect
&
bounds
=
rrect
.
getBounds
(
)
;
if
(
rrect
.
isRect
(
)
)
{
this
-
>
addRect
(
bounds
dir
(
startIndex
+
1
)
/
2
)
;
}
else
if
(
rrect
.
isOval
(
)
)
{
this
-
>
addOval
(
bounds
dir
startIndex
/
2
)
;
}
else
{
fFirstDirection
=
this
-
>
hasOnlyMoveTos
(
)
?
(
SkPathPriv
:
:
FirstDirection
)
dir
:
SkPathPriv
:
:
kUnknown_FirstDirection
;
SkAutoPathBoundsUpdate
apbu
(
this
bounds
)
;
SkAutoDisableDirectionCheck
addc
(
this
)
;
const
bool
startsWithConic
=
(
(
startIndex
&
1
)
=
=
(
dir
=
=
kCW_Direction
)
)
;
const
SkScalar
weight
=
SK_ScalarRoot2Over2
;
SkDEBUGCODE
(
int
initialVerbCount
=
this
-
>
countVerbs
(
)
)
;
const
int
kVerbs
=
startsWithConic
?
9
:
10
;
this
-
>
incReserve
(
kVerbs
)
;
RRectPointIterator
rrectIter
(
rrect
dir
startIndex
)
;
const
unsigned
rectStartIndex
=
startIndex
/
2
+
(
dir
=
=
kCW_Direction
?
0
:
1
)
;
RectPointIterator
rectIter
(
bounds
dir
rectStartIndex
)
;
this
-
>
moveTo
(
rrectIter
.
current
(
)
)
;
if
(
startsWithConic
)
{
for
(
unsigned
i
=
0
;
i
<
3
;
+
+
i
)
{
this
-
>
conicTo
(
rectIter
.
next
(
)
rrectIter
.
next
(
)
weight
)
;
this
-
>
lineTo
(
rrectIter
.
next
(
)
)
;
}
this
-
>
conicTo
(
rectIter
.
next
(
)
rrectIter
.
next
(
)
weight
)
;
}
else
{
for
(
unsigned
i
=
0
;
i
<
4
;
+
+
i
)
{
this
-
>
lineTo
(
rrectIter
.
next
(
)
)
;
this
-
>
conicTo
(
rectIter
.
next
(
)
rrectIter
.
next
(
)
weight
)
;
}
}
this
-
>
close
(
)
;
SkPathRef
:
:
Editor
ed
(
&
fPathRef
)
;
ed
.
setIsRRect
(
isRRect
dir
startIndex
%
8
)
;
SkASSERT
(
this
-
>
countVerbs
(
)
=
=
initialVerbCount
+
kVerbs
)
;
}
SkDEBUGCODE
(
fPathRef
-
>
validate
(
)
;
)
}
bool
SkPath
:
:
hasOnlyMoveTos
(
)
const
{
int
count
=
fPathRef
-
>
countVerbs
(
)
;
const
uint8_t
*
verbs
=
const_cast
<
const
SkPathRef
*
>
(
fPathRef
.
get
(
)
)
-
>
verbsMemBegin
(
)
;
for
(
int
i
=
0
;
i
<
count
;
+
+
i
)
{
if
(
*
verbs
=
=
kLine_Verb
|
|
*
verbs
=
=
kQuad_Verb
|
|
*
verbs
=
=
kConic_Verb
|
|
*
verbs
=
=
kCubic_Verb
)
{
return
false
;
}
+
+
verbs
;
}
return
true
;
}
bool
SkPath
:
:
isZeroLength
(
)
const
{
int
count
=
fPathRef
-
>
countPoints
(
)
;
if
(
count
<
2
)
{
return
true
;
}
const
SkPoint
*
pts
=
fPathRef
.
get
(
)
-
>
points
(
)
;
const
SkPoint
&
first
=
*
pts
;
for
(
int
index
=
1
;
index
<
count
;
+
+
index
)
{
if
(
first
!
=
pts
[
index
]
)
{
return
false
;
}
}
return
true
;
}
void
SkPath
:
:
addRoundRect
(
const
SkRect
&
rect
SkScalar
rx
SkScalar
ry
Direction
dir
)
{
assert_known_direction
(
dir
)
;
if
(
rx
<
0
|
|
ry
<
0
)
{
SkErrorInternals
:
:
SetError
(
kInvalidArgument_SkError
"
I
got
%
f
and
%
f
as
radii
to
SkPath
:
:
AddRoundRect
"
"
but
negative
radii
are
not
allowed
.
"
SkScalarToDouble
(
rx
)
SkScalarToDouble
(
ry
)
)
;
return
;
}
SkRRect
rrect
;
rrect
.
setRectXY
(
rect
rx
ry
)
;
this
-
>
addRRect
(
rrect
dir
)
;
}
void
SkPath
:
:
addOval
(
const
SkRect
&
oval
Direction
dir
)
{
this
-
>
addOval
(
oval
dir
1
)
;
}
void
SkPath
:
:
addOval
(
const
SkRect
&
oval
Direction
dir
unsigned
startPointIndex
)
{
assert_known_direction
(
dir
)
;
bool
isOval
=
hasOnlyMoveTos
(
)
;
if
(
isOval
)
{
fFirstDirection
=
(
SkPathPriv
:
:
FirstDirection
)
dir
;
}
else
{
fFirstDirection
=
SkPathPriv
:
:
kUnknown_FirstDirection
;
}
SkAutoDisableDirectionCheck
addc
(
this
)
;
SkAutoPathBoundsUpdate
apbu
(
this
oval
)
;
SkDEBUGCODE
(
int
initialVerbCount
=
this
-
>
countVerbs
(
)
)
;
const
int
kVerbs
=
6
;
this
-
>
incReserve
(
kVerbs
)
;
OvalPointIterator
ovalIter
(
oval
dir
startPointIndex
)
;
RectPointIterator
rectIter
(
oval
dir
startPointIndex
+
(
dir
=
=
kCW_Direction
?
0
:
1
)
)
;
const
SkScalar
weight
=
SK_ScalarRoot2Over2
;
this
-
>
moveTo
(
ovalIter
.
current
(
)
)
;
for
(
unsigned
i
=
0
;
i
<
4
;
+
+
i
)
{
this
-
>
conicTo
(
rectIter
.
next
(
)
ovalIter
.
next
(
)
weight
)
;
}
this
-
>
close
(
)
;
SkASSERT
(
this
-
>
countVerbs
(
)
=
=
initialVerbCount
+
kVerbs
)
;
SkPathRef
:
:
Editor
ed
(
&
fPathRef
)
;
ed
.
setIsOval
(
isOval
kCCW_Direction
=
=
dir
startPointIndex
%
4
)
;
}
void
SkPath
:
:
addCircle
(
SkScalar
x
SkScalar
y
SkScalar
r
Direction
dir
)
{
if
(
r
>
0
)
{
this
-
>
addOval
(
SkRect
:
:
MakeLTRB
(
x
-
r
y
-
r
x
+
r
y
+
r
)
dir
)
;
}
}
void
SkPath
:
:
arcTo
(
const
SkRect
&
oval
SkScalar
startAngle
SkScalar
sweepAngle
bool
forceMoveTo
)
{
if
(
oval
.
width
(
)
<
0
|
|
oval
.
height
(
)
<
0
)
{
return
;
}
if
(
fPathRef
-
>
countVerbs
(
)
=
=
0
)
{
forceMoveTo
=
true
;
}
SkPoint
lonePt
;
if
(
arc_is_lone_point
(
oval
startAngle
sweepAngle
&
lonePt
)
)
{
forceMoveTo
?
this
-
>
moveTo
(
lonePt
)
:
this
-
>
lineTo
(
lonePt
)
;
return
;
}
SkVector
startV
stopV
;
SkRotationDirection
dir
;
angles_to_unit_vectors
(
startAngle
sweepAngle
&
startV
&
stopV
&
dir
)
;
SkPoint
singlePt
;
SkConic
conics
[
SkConic
:
:
kMaxConicsForArc
]
;
int
count
=
build_arc_conics
(
oval
startV
stopV
dir
conics
&
singlePt
)
;
if
(
count
)
{
this
-
>
incReserve
(
count
*
2
+
1
)
;
const
SkPoint
&
pt
=
conics
[
0
]
.
fPts
[
0
]
;
forceMoveTo
?
this
-
>
moveTo
(
pt
)
:
this
-
>
lineTo
(
pt
)
;
for
(
int
i
=
0
;
i
<
count
;
+
+
i
)
{
this
-
>
conicTo
(
conics
[
i
]
.
fPts
[
1
]
conics
[
i
]
.
fPts
[
2
]
conics
[
i
]
.
fW
)
;
}
}
else
{
forceMoveTo
?
this
-
>
moveTo
(
singlePt
)
:
this
-
>
lineTo
(
singlePt
)
;
}
}
void
SkPath
:
:
arcTo
(
SkScalar
rx
SkScalar
ry
SkScalar
angle
SkPath
:
:
ArcSize
arcLarge
SkPath
:
:
Direction
arcSweep
SkScalar
x
SkScalar
y
)
{
this
-
>
injectMoveToIfNeeded
(
)
;
SkPoint
srcPts
[
2
]
;
this
-
>
getLastPt
(
&
srcPts
[
0
]
)
;
if
(
!
rx
|
|
!
ry
)
{
this
-
>
lineTo
(
x
y
)
;
return
;
}
srcPts
[
1
]
.
set
(
x
y
)
;
if
(
srcPts
[
0
]
=
=
srcPts
[
1
]
)
{
this
-
>
lineTo
(
x
y
)
;
return
;
}
rx
=
SkScalarAbs
(
rx
)
;
ry
=
SkScalarAbs
(
ry
)
;
SkVector
midPointDistance
=
srcPts
[
0
]
-
srcPts
[
1
]
;
midPointDistance
*
=
0
.
5f
;
SkMatrix
pointTransform
;
pointTransform
.
setRotate
(
-
angle
)
;
SkPoint
transformedMidPoint
;
pointTransform
.
mapPoints
(
&
transformedMidPoint
&
midPointDistance
1
)
;
SkScalar
squareRx
=
rx
*
rx
;
SkScalar
squareRy
=
ry
*
ry
;
SkScalar
squareX
=
transformedMidPoint
.
fX
*
transformedMidPoint
.
fX
;
SkScalar
squareY
=
transformedMidPoint
.
fY
*
transformedMidPoint
.
fY
;
SkScalar
radiiScale
=
squareX
/
squareRx
+
squareY
/
squareRy
;
if
(
radiiScale
>
1
)
{
radiiScale
=
SkScalarSqrt
(
radiiScale
)
;
rx
*
=
radiiScale
;
ry
*
=
radiiScale
;
}
pointTransform
.
setScale
(
1
/
rx
1
/
ry
)
;
pointTransform
.
preRotate
(
-
angle
)
;
SkPoint
unitPts
[
2
]
;
pointTransform
.
mapPoints
(
unitPts
srcPts
(
int
)
SK_ARRAY_COUNT
(
unitPts
)
)
;
SkVector
delta
=
unitPts
[
1
]
-
unitPts
[
0
]
;
SkScalar
d
=
delta
.
fX
*
delta
.
fX
+
delta
.
fY
*
delta
.
fY
;
SkScalar
scaleFactorSquared
=
SkTMax
(
1
/
d
-
0
.
25f
0
.
f
)
;
SkScalar
scaleFactor
=
SkScalarSqrt
(
scaleFactorSquared
)
;
if
(
SkToBool
(
arcSweep
)
!
=
SkToBool
(
arcLarge
)
)
{
scaleFactor
=
-
scaleFactor
;
}
delta
.
scale
(
scaleFactor
)
;
SkPoint
centerPoint
=
unitPts
[
0
]
+
unitPts
[
1
]
;
centerPoint
*
=
0
.
5f
;
centerPoint
.
offset
(
-
delta
.
fY
delta
.
fX
)
;
unitPts
[
0
]
-
=
centerPoint
;
unitPts
[
1
]
-
=
centerPoint
;
SkScalar
theta1
=
SkScalarATan2
(
unitPts
[
0
]
.
fY
unitPts
[
0
]
.
fX
)
;
SkScalar
theta2
=
SkScalarATan2
(
unitPts
[
1
]
.
fY
unitPts
[
1
]
.
fX
)
;
SkScalar
thetaArc
=
theta2
-
theta1
;
if
(
thetaArc
<
0
&
&
!
arcSweep
)
{
thetaArc
+
=
SK_ScalarPI
*
2
;
}
else
if
(
thetaArc
>
0
&
&
arcSweep
)
{
thetaArc
-
=
SK_ScalarPI
*
2
;
}
pointTransform
.
setRotate
(
angle
)
;
pointTransform
.
preScale
(
rx
ry
)
;
int
segments
=
SkScalarCeilToInt
(
SkScalarAbs
(
thetaArc
/
(
SK_ScalarPI
/
2
)
)
)
;
SkScalar
thetaWidth
=
thetaArc
/
segments
;
SkScalar
t
=
SkScalarTan
(
0
.
5f
*
thetaWidth
)
;
if
(
!
SkScalarIsFinite
(
t
)
)
{
return
;
}
SkScalar
startTheta
=
theta1
;
SkScalar
w
=
SkScalarSqrt
(
SK_ScalarHalf
+
SkScalarCos
(
thetaWidth
)
*
SK_ScalarHalf
)
;
for
(
int
i
=
0
;
i
<
segments
;
+
+
i
)
{
SkScalar
endTheta
=
startTheta
+
thetaWidth
;
SkScalar
cosEndTheta
sinEndTheta
=
SkScalarSinCos
(
endTheta
&
cosEndTheta
)
;
unitPts
[
1
]
.
set
(
cosEndTheta
sinEndTheta
)
;
unitPts
[
1
]
+
=
centerPoint
;
unitPts
[
0
]
=
unitPts
[
1
]
;
unitPts
[
0
]
.
offset
(
t
*
sinEndTheta
-
t
*
cosEndTheta
)
;
SkPoint
mapped
[
2
]
;
pointTransform
.
mapPoints
(
mapped
unitPts
(
int
)
SK_ARRAY_COUNT
(
unitPts
)
)
;
this
-
>
conicTo
(
mapped
[
0
]
mapped
[
1
]
w
)
;
startTheta
=
endTheta
;
}
}
void
SkPath
:
:
rArcTo
(
SkScalar
rx
SkScalar
ry
SkScalar
xAxisRotate
SkPath
:
:
ArcSize
largeArc
SkPath
:
:
Direction
sweep
SkScalar
dx
SkScalar
dy
)
{
SkPoint
currentPoint
;
this
-
>
getLastPt
(
&
currentPoint
)
;
this
-
>
arcTo
(
rx
ry
xAxisRotate
largeArc
sweep
currentPoint
.
fX
+
dx
currentPoint
.
fY
+
dy
)
;
}
void
SkPath
:
:
addArc
(
const
SkRect
&
oval
SkScalar
startAngle
SkScalar
sweepAngle
)
{
if
(
oval
.
isEmpty
(
)
|
|
0
=
=
sweepAngle
)
{
return
;
}
const
SkScalar
kFullCircleAngle
=
SkIntToScalar
(
360
)
;
if
(
sweepAngle
>
=
kFullCircleAngle
|
|
sweepAngle
<
=
-
kFullCircleAngle
)
{
SkScalar
startOver90
=
startAngle
/
90
.
f
;
SkScalar
startOver90I
=
SkScalarRoundToScalar
(
startOver90
)
;
SkScalar
error
=
startOver90
-
startOver90I
;
if
(
SkScalarNearlyEqual
(
error
0
)
)
{
SkScalar
startIndex
=
std
:
:
fmod
(
startOver90I
+
1
.
f
4
.
f
)
;
startIndex
=
startIndex
<
0
?
startIndex
+
4
.
f
:
startIndex
;
this
-
>
addOval
(
oval
sweepAngle
>
0
?
kCW_Direction
:
kCCW_Direction
(
unsigned
)
startIndex
)
;
return
;
}
}
this
-
>
arcTo
(
oval
startAngle
sweepAngle
true
)
;
}
void
SkPath
:
:
arcTo
(
SkScalar
x1
SkScalar
y1
SkScalar
x2
SkScalar
y2
SkScalar
radius
)
{
if
(
radius
=
=
0
)
{
this
-
>
lineTo
(
x1
y1
)
;
return
;
}
SkVector
before
after
;
{
SkPoint
start
;
this
-
>
getLastPt
(
&
start
)
;
before
.
setNormalize
(
x1
-
start
.
fX
y1
-
start
.
fY
)
;
after
.
setNormalize
(
x2
-
x1
y2
-
y1
)
;
}
SkScalar
cosh
=
SkPoint
:
:
DotProduct
(
before
after
)
;
SkScalar
sinh
=
SkPoint
:
:
CrossProduct
(
before
after
)
;
if
(
SkScalarNearlyZero
(
sinh
)
)
{
this
-
>
lineTo
(
x1
y1
)
;
return
;
}
SkScalar
dist
=
SkScalarAbs
(
SkScalarMulDiv
(
radius
SK_Scalar1
-
cosh
sinh
)
)
;
SkScalar
xx
=
x1
-
SkScalarMul
(
dist
before
.
fX
)
;
SkScalar
yy
=
y1
-
SkScalarMul
(
dist
before
.
fY
)
;
after
.
setLength
(
dist
)
;
this
-
>
lineTo
(
xx
yy
)
;
SkScalar
weight
=
SkScalarSqrt
(
SK_ScalarHalf
+
cosh
*
SK_ScalarHalf
)
;
this
-
>
conicTo
(
x1
y1
x1
+
after
.
fX
y1
+
after
.
fY
weight
)
;
}
void
SkPath
:
:
addPath
(
const
SkPath
&
path
SkScalar
dx
SkScalar
dy
AddPathMode
mode
)
{
SkMatrix
matrix
;
matrix
.
setTranslate
(
dx
dy
)
;
this
-
>
addPath
(
path
matrix
mode
)
;
}
void
SkPath
:
:
addPath
(
const
SkPath
&
path
const
SkMatrix
&
matrix
AddPathMode
mode
)
{
SkPathRef
:
:
Editor
(
&
fPathRef
path
.
countVerbs
(
)
path
.
countPoints
(
)
)
;
RawIter
iter
(
path
)
;
SkPoint
pts
[
4
]
;
Verb
verb
;
SkMatrix
:
:
MapPtsProc
proc
=
matrix
.
getMapPtsProc
(
)
;
bool
firstVerb
=
true
;
while
(
(
verb
=
iter
.
next
(
pts
)
)
!
=
kDone_Verb
)
{
switch
(
verb
)
{
case
kMove_Verb
:
proc
(
matrix
&
pts
[
0
]
&
pts
[
0
]
1
)
;
if
(
firstVerb
&
&
mode
=
=
kExtend_AddPathMode
&
&
!
isEmpty
(
)
)
{
injectMoveToIfNeeded
(
)
;
this
-
>
lineTo
(
pts
[
0
]
)
;
}
else
{
this
-
>
moveTo
(
pts
[
0
]
)
;
}
break
;
case
kLine_Verb
:
proc
(
matrix
&
pts
[
1
]
&
pts
[
1
]
1
)
;
this
-
>
lineTo
(
pts
[
1
]
)
;
break
;
case
kQuad_Verb
:
proc
(
matrix
&
pts
[
1
]
&
pts
[
1
]
2
)
;
this
-
>
quadTo
(
pts
[
1
]
pts
[
2
]
)
;
break
;
case
kConic_Verb
:
proc
(
matrix
&
pts
[
1
]
&
pts
[
1
]
2
)
;
this
-
>
conicTo
(
pts
[
1
]
pts
[
2
]
iter
.
conicWeight
(
)
)
;
break
;
case
kCubic_Verb
:
proc
(
matrix
&
pts
[
1
]
&
pts
[
1
]
3
)
;
this
-
>
cubicTo
(
pts
[
1
]
pts
[
2
]
pts
[
3
]
)
;
break
;
case
kClose_Verb
:
this
-
>
close
(
)
;
break
;
default
:
SkDEBUGFAIL
(
"
unknown
verb
"
)
;
}
firstVerb
=
false
;
}
}
static
int
pts_in_verb
(
unsigned
verb
)
{
static
const
uint8_t
gPtsInVerb
[
]
=
{
1
1
2
2
3
0
0
}
;
SkASSERT
(
verb
<
SK_ARRAY_COUNT
(
gPtsInVerb
)
)
;
return
gPtsInVerb
[
verb
]
;
}
void
SkPath
:
:
reversePathTo
(
const
SkPath
&
path
)
{
int
i
vcount
=
path
.
fPathRef
-
>
countVerbs
(
)
;
if
(
vcount
<
2
)
{
return
;
}
SkPathRef
:
:
Editor
(
&
fPathRef
vcount
path
.
countPoints
(
)
)
;
const
uint8_t
*
verbs
=
path
.
fPathRef
-
>
verbs
(
)
;
const
SkPoint
*
pts
=
path
.
fPathRef
-
>
points
(
)
;
const
SkScalar
*
conicWeights
=
path
.
fPathRef
-
>
conicWeights
(
)
;
SkASSERT
(
verbs
[
~
0
]
=
=
kMove_Verb
)
;
for
(
i
=
1
;
i
<
vcount
;
+
+
i
)
{
unsigned
v
=
verbs
[
~
i
]
;
int
n
=
pts_in_verb
(
v
)
;
if
(
n
=
=
0
)
{
break
;
}
pts
+
=
n
;
conicWeights
+
=
(
SkPath
:
:
kConic_Verb
=
=
v
)
;
}
while
(
-
-
i
>
0
)
{
switch
(
verbs
[
~
i
]
)
{
case
kLine_Verb
:
this
-
>
lineTo
(
pts
[
-
1
]
.
fX
pts
[
-
1
]
.
fY
)
;
break
;
case
kQuad_Verb
:
this
-
>
quadTo
(
pts
[
-
1
]
.
fX
pts
[
-
1
]
.
fY
pts
[
-
2
]
.
fX
pts
[
-
2
]
.
fY
)
;
break
;
case
kConic_Verb
:
this
-
>
conicTo
(
pts
[
-
1
]
pts
[
-
2
]
*
-
-
conicWeights
)
;
break
;
case
kCubic_Verb
:
this
-
>
cubicTo
(
pts
[
-
1
]
.
fX
pts
[
-
1
]
.
fY
pts
[
-
2
]
.
fX
pts
[
-
2
]
.
fY
pts
[
-
3
]
.
fX
pts
[
-
3
]
.
fY
)
;
break
;
default
:
SkDEBUGFAIL
(
"
bad
verb
"
)
;
break
;
}
pts
-
=
pts_in_verb
(
verbs
[
~
i
]
)
;
}
}
void
SkPath
:
:
reverseAddPath
(
const
SkPath
&
src
)
{
SkPathRef
:
:
Editor
ed
(
&
fPathRef
src
.
fPathRef
-
>
countPoints
(
)
src
.
fPathRef
-
>
countVerbs
(
)
)
;
const
SkPoint
*
pts
=
src
.
fPathRef
-
>
pointsEnd
(
)
;
const
uint8_t
*
verbs
=
src
.
fPathRef
-
>
verbsMemBegin
(
)
;
const
uint8_t
*
verbsEnd
=
src
.
fPathRef
-
>
verbs
(
)
;
const
SkScalar
*
conicWeights
=
src
.
fPathRef
-
>
conicWeightsEnd
(
)
;
bool
needMove
=
true
;
bool
needClose
=
false
;
while
(
verbs
<
verbsEnd
)
{
uint8_t
v
=
*
(
verbs
+
+
)
;
int
n
=
pts_in_verb
(
v
)
;
if
(
needMove
)
{
-
-
pts
;
this
-
>
moveTo
(
pts
-
>
fX
pts
-
>
fY
)
;
needMove
=
false
;
}
pts
-
=
n
;
switch
(
v
)
{
case
kMove_Verb
:
if
(
needClose
)
{
this
-
>
close
(
)
;
needClose
=
false
;
}
needMove
=
true
;
pts
+
=
1
;
break
;
case
kLine_Verb
:
this
-
>
lineTo
(
pts
[
0
]
)
;
break
;
case
kQuad_Verb
:
this
-
>
quadTo
(
pts
[
1
]
pts
[
0
]
)
;
break
;
case
kConic_Verb
:
this
-
>
conicTo
(
pts
[
1
]
pts
[
0
]
*
-
-
conicWeights
)
;
break
;
case
kCubic_Verb
:
this
-
>
cubicTo
(
pts
[
2
]
pts
[
1
]
pts
[
0
]
)
;
break
;
case
kClose_Verb
:
needClose
=
true
;
break
;
default
:
SkDEBUGFAIL
(
"
unexpected
verb
"
)
;
}
}
}
void
SkPath
:
:
offset
(
SkScalar
dx
SkScalar
dy
SkPath
*
dst
)
const
{
SkMatrix
matrix
;
matrix
.
setTranslate
(
dx
dy
)
;
this
-
>
transform
(
matrix
dst
)
;
}
static
void
subdivide_cubic_to
(
SkPath
*
path
const
SkPoint
pts
[
4
]
int
level
=
2
)
{
if
(
-
-
level
>
=
0
)
{
SkPoint
tmp
[
7
]
;
SkChopCubicAtHalf
(
pts
tmp
)
;
subdivide_cubic_to
(
path
&
tmp
[
0
]
level
)
;
subdivide_cubic_to
(
path
&
tmp
[
3
]
level
)
;
}
else
{
path
-
>
cubicTo
(
pts
[
1
]
pts
[
2
]
pts
[
3
]
)
;
}
}
void
SkPath
:
:
transform
(
const
SkMatrix
&
matrix
SkPath
*
dst
)
const
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
if
(
dst
=
=
nullptr
)
{
dst
=
(
SkPath
*
)
this
;
}
if
(
matrix
.
hasPerspective
(
)
)
{
SkPath
tmp
;
tmp
.
fFillType
=
fFillType
;
SkPath
:
:
Iter
iter
(
*
this
false
)
;
SkPoint
pts
[
4
]
;
SkPath
:
:
Verb
verb
;
while
(
(
verb
=
iter
.
next
(
pts
false
)
)
!
=
kDone_Verb
)
{
switch
(
verb
)
{
case
kMove_Verb
:
tmp
.
moveTo
(
pts
[
0
]
)
;
break
;
case
kLine_Verb
:
tmp
.
lineTo
(
pts
[
1
]
)
;
break
;
case
kQuad_Verb
:
tmp
.
conicTo
(
pts
[
1
]
pts
[
2
]
SkConic
:
:
TransformW
(
pts
SK_Scalar1
matrix
)
)
;
break
;
case
kConic_Verb
:
tmp
.
conicTo
(
pts
[
1
]
pts
[
2
]
SkConic
:
:
TransformW
(
pts
iter
.
conicWeight
(
)
matrix
)
)
;
break
;
case
kCubic_Verb
:
subdivide_cubic_to
(
&
tmp
pts
)
;
break
;
case
kClose_Verb
:
tmp
.
close
(
)
;
break
;
default
:
SkDEBUGFAIL
(
"
unknown
verb
"
)
;
break
;
}
}
dst
-
>
swap
(
tmp
)
;
SkPathRef
:
:
Editor
ed
(
&
dst
-
>
fPathRef
)
;
matrix
.
mapPoints
(
ed
.
points
(
)
ed
.
pathRef
(
)
-
>
countPoints
(
)
)
;
dst
-
>
fFirstDirection
=
SkPathPriv
:
:
kUnknown_FirstDirection
;
}
else
{
SkPathRef
:
:
CreateTransformedCopy
(
&
dst
-
>
fPathRef
*
fPathRef
.
get
(
)
matrix
)
;
if
(
this
!
=
dst
)
{
dst
-
>
fFillType
=
fFillType
;
dst
-
>
fConvexity
=
fConvexity
;
dst
-
>
fIsVolatile
=
fIsVolatile
;
}
if
(
SkPathPriv
:
:
kUnknown_FirstDirection
=
=
fFirstDirection
)
{
dst
-
>
fFirstDirection
=
SkPathPriv
:
:
kUnknown_FirstDirection
;
}
else
{
SkScalar
det2x2
=
SkScalarMul
(
matrix
.
get
(
SkMatrix
:
:
kMScaleX
)
matrix
.
get
(
SkMatrix
:
:
kMScaleY
)
)
-
SkScalarMul
(
matrix
.
get
(
SkMatrix
:
:
kMSkewX
)
matrix
.
get
(
SkMatrix
:
:
kMSkewY
)
)
;
if
(
det2x2
<
0
)
{
dst
-
>
fFirstDirection
=
SkPathPriv
:
:
OppositeFirstDirection
(
(
SkPathPriv
:
:
FirstDirection
)
fFirstDirection
.
load
(
)
)
;
}
else
if
(
det2x2
>
0
)
{
dst
-
>
fFirstDirection
=
fFirstDirection
.
load
(
)
;
}
else
{
dst
-
>
fConvexity
=
kUnknown_Convexity
;
dst
-
>
fFirstDirection
=
SkPathPriv
:
:
kUnknown_FirstDirection
;
}
}
SkDEBUGCODE
(
dst
-
>
validate
(
)
;
)
}
}
enum
SegmentState
{
kEmptyContour_SegmentState
kAfterMove_SegmentState
kAfterPrimitive_SegmentState
}
;
SkPath
:
:
Iter
:
:
Iter
(
)
{
#
ifdef
SK_DEBUG
fPts
=
nullptr
;
fConicWeights
=
nullptr
;
fMoveTo
.
fX
=
fMoveTo
.
fY
=
fLastPt
.
fX
=
fLastPt
.
fY
=
0
;
fForceClose
=
fCloseLine
=
false
;
fSegmentState
=
kEmptyContour_SegmentState
;
#
endif
fVerbs
=
nullptr
;
fVerbStop
=
nullptr
;
fNeedClose
=
false
;
}
SkPath
:
:
Iter
:
:
Iter
(
const
SkPath
&
path
bool
forceClose
)
{
this
-
>
setPath
(
path
forceClose
)
;
}
void
SkPath
:
:
Iter
:
:
setPath
(
const
SkPath
&
path
bool
forceClose
)
{
fPts
=
path
.
fPathRef
-
>
points
(
)
;
fVerbs
=
path
.
fPathRef
-
>
verbs
(
)
;
fVerbStop
=
path
.
fPathRef
-
>
verbsMemBegin
(
)
;
fConicWeights
=
path
.
fPathRef
-
>
conicWeights
(
)
;
if
(
fConicWeights
)
{
fConicWeights
-
=
1
;
}
fLastPt
.
fX
=
fLastPt
.
fY
=
0
;
fMoveTo
.
fX
=
fMoveTo
.
fY
=
0
;
fForceClose
=
SkToU8
(
forceClose
)
;
fNeedClose
=
false
;
fSegmentState
=
kEmptyContour_SegmentState
;
}
bool
SkPath
:
:
Iter
:
:
isClosedContour
(
)
const
{
if
(
fVerbs
=
=
nullptr
|
|
fVerbs
=
=
fVerbStop
)
{
return
false
;
}
if
(
fForceClose
)
{
return
true
;
}
const
uint8_t
*
verbs
=
fVerbs
;
const
uint8_t
*
stop
=
fVerbStop
;
if
(
kMove_Verb
=
=
*
(
verbs
-
1
)
)
{
verbs
-
=
1
;
}
while
(
verbs
>
stop
)
{
unsigned
v
=
*
(
-
-
verbs
)
;
if
(
kMove_Verb
=
=
v
)
{
break
;
}
if
(
kClose_Verb
=
=
v
)
{
return
true
;
}
}
return
false
;
}
SkPath
:
:
Verb
SkPath
:
:
Iter
:
:
autoClose
(
SkPoint
pts
[
2
]
)
{
SkASSERT
(
pts
)
;
if
(
fLastPt
!
=
fMoveTo
)
{
if
(
SkScalarIsNaN
(
fLastPt
.
fX
)
|
|
SkScalarIsNaN
(
fLastPt
.
fY
)
|
|
SkScalarIsNaN
(
fMoveTo
.
fX
)
|
|
SkScalarIsNaN
(
fMoveTo
.
fY
)
)
{
return
kClose_Verb
;
}
pts
[
0
]
=
fLastPt
;
pts
[
1
]
=
fMoveTo
;
fLastPt
=
fMoveTo
;
fCloseLine
=
true
;
return
kLine_Verb
;
}
else
{
pts
[
0
]
=
fMoveTo
;
return
kClose_Verb
;
}
}
const
SkPoint
&
SkPath
:
:
Iter
:
:
cons_moveTo
(
)
{
if
(
fSegmentState
=
=
kAfterMove_SegmentState
)
{
fSegmentState
=
kAfterPrimitive_SegmentState
;
return
fMoveTo
;
}
else
{
SkASSERT
(
fSegmentState
=
=
kAfterPrimitive_SegmentState
)
;
return
fPts
[
-
1
]
;
}
}
void
SkPath
:
:
Iter
:
:
consumeDegenerateSegments
(
bool
exact
)
{
const
uint8_t
*
lastMoveVerb
=
0
;
const
SkPoint
*
lastMovePt
=
0
;
const
SkScalar
*
lastMoveWeight
=
nullptr
;
SkPoint
lastPt
=
fLastPt
;
while
(
fVerbs
!
=
fVerbStop
)
{
unsigned
verb
=
*
(
fVerbs
-
1
)
;
switch
(
verb
)
{
case
kMove_Verb
:
lastMoveVerb
=
fVerbs
;
lastMovePt
=
fPts
;
lastMoveWeight
=
fConicWeights
;
lastPt
=
fPts
[
0
]
;
fVerbs
-
-
;
fPts
+
+
;
break
;
case
kClose_Verb
:
if
(
fSegmentState
=
=
kAfterPrimitive_SegmentState
&
&
!
lastMoveVerb
)
{
return
;
}
fVerbs
-
-
;
break
;
case
kLine_Verb
:
if
(
!
IsLineDegenerate
(
lastPt
fPts
[
0
]
exact
)
)
{
if
(
lastMoveVerb
)
{
fVerbs
=
lastMoveVerb
;
fPts
=
lastMovePt
;
fConicWeights
=
lastMoveWeight
;
return
;
}
return
;
}
fVerbs
-
-
;
fPts
+
+
;
break
;
case
kConic_Verb
:
case
kQuad_Verb
:
if
(
!
IsQuadDegenerate
(
lastPt
fPts
[
0
]
fPts
[
1
]
exact
)
)
{
if
(
lastMoveVerb
)
{
fVerbs
=
lastMoveVerb
;
fPts
=
lastMovePt
;
fConicWeights
=
lastMoveWeight
;
return
;
}
return
;
}
fVerbs
-
-
;
fPts
+
=
2
;
fConicWeights
+
=
(
kConic_Verb
=
=
verb
)
;
break
;
case
kCubic_Verb
:
if
(
!
IsCubicDegenerate
(
lastPt
fPts
[
0
]
fPts
[
1
]
fPts
[
2
]
exact
)
)
{
if
(
lastMoveVerb
)
{
fVerbs
=
lastMoveVerb
;
fPts
=
lastMovePt
;
fConicWeights
=
lastMoveWeight
;
return
;
}
return
;
}
fVerbs
-
-
;
fPts
+
=
3
;
break
;
default
:
SkDEBUGFAIL
(
"
Should
never
see
kDone_Verb
"
)
;
}
}
}
SkPath
:
:
Verb
SkPath
:
:
Iter
:
:
doNext
(
SkPoint
ptsParam
[
4
]
)
{
SkASSERT
(
ptsParam
)
;
if
(
fVerbs
=
=
fVerbStop
)
{
if
(
fNeedClose
&
&
fSegmentState
=
=
kAfterPrimitive_SegmentState
)
{
if
(
kLine_Verb
=
=
this
-
>
autoClose
(
ptsParam
)
)
{
return
kLine_Verb
;
}
fNeedClose
=
false
;
return
kClose_Verb
;
}
return
kDone_Verb
;
}
unsigned
verb
=
*
(
-
-
fVerbs
)
;
const
SkPoint
*
SK_RESTRICT
srcPts
=
fPts
;
SkPoint
*
SK_RESTRICT
pts
=
ptsParam
;
switch
(
verb
)
{
case
kMove_Verb
:
if
(
fNeedClose
)
{
fVerbs
+
+
;
verb
=
this
-
>
autoClose
(
pts
)
;
if
(
verb
=
=
kClose_Verb
)
{
fNeedClose
=
false
;
}
return
(
Verb
)
verb
;
}
if
(
fVerbs
=
=
fVerbStop
)
{
return
kDone_Verb
;
}
fMoveTo
=
*
srcPts
;
pts
[
0
]
=
*
srcPts
;
srcPts
+
=
1
;
fSegmentState
=
kAfterMove_SegmentState
;
fLastPt
=
fMoveTo
;
fNeedClose
=
fForceClose
;
break
;
case
kLine_Verb
:
pts
[
0
]
=
this
-
>
cons_moveTo
(
)
;
pts
[
1
]
=
srcPts
[
0
]
;
fLastPt
=
srcPts
[
0
]
;
fCloseLine
=
false
;
srcPts
+
=
1
;
break
;
case
kConic_Verb
:
fConicWeights
+
=
1
;
case
kQuad_Verb
:
pts
[
0
]
=
this
-
>
cons_moveTo
(
)
;
memcpy
(
&
pts
[
1
]
srcPts
2
*
sizeof
(
SkPoint
)
)
;
fLastPt
=
srcPts
[
1
]
;
srcPts
+
=
2
;
break
;
case
kCubic_Verb
:
pts
[
0
]
=
this
-
>
cons_moveTo
(
)
;
memcpy
(
&
pts
[
1
]
srcPts
3
*
sizeof
(
SkPoint
)
)
;
fLastPt
=
srcPts
[
2
]
;
srcPts
+
=
3
;
break
;
case
kClose_Verb
:
verb
=
this
-
>
autoClose
(
pts
)
;
if
(
verb
=
=
kLine_Verb
)
{
fVerbs
+
+
;
}
else
{
fNeedClose
=
false
;
fSegmentState
=
kEmptyContour_SegmentState
;
}
fLastPt
=
fMoveTo
;
break
;
}
fPts
=
srcPts
;
return
(
Verb
)
verb
;
}
size_t
SkPath
:
:
writeToMemory
(
void
*
storage
)
const
{
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
if
(
nullptr
=
=
storage
)
{
const
int
byteCount
=
sizeof
(
int32_t
)
*
2
+
fPathRef
-
>
writeSize
(
)
;
return
SkAlign4
(
byteCount
)
;
}
SkWBuffer
buffer
(
storage
)
;
int32_t
packed
=
(
fConvexity
<
<
kConvexity_SerializationShift
)
|
(
fFillType
<
<
kFillType_SerializationShift
)
|
(
fFirstDirection
<
<
kDirection_SerializationShift
)
|
(
fIsVolatile
<
<
kIsVolatile_SerializationShift
)
|
kCurrent_Version
;
buffer
.
write32
(
packed
)
;
buffer
.
write32
(
fLastMoveToIndex
)
;
fPathRef
-
>
writeToBuffer
(
&
buffer
)
;
buffer
.
padToAlign4
(
)
;
return
buffer
.
pos
(
)
;
}
size_t
SkPath
:
:
readFromMemory
(
const
void
*
storage
size_t
length
)
{
SkRBufferWithSizeCheck
buffer
(
storage
length
)
;
int32_t
packed
;
if
(
!
buffer
.
readS32
(
&
packed
)
)
{
return
0
;
}
unsigned
version
=
packed
&
0xFF
;
if
(
version
>
=
kPathPrivLastMoveToIndex_Version
&
&
!
buffer
.
readS32
(
&
fLastMoveToIndex
)
)
{
return
0
;
}
fConvexity
=
(
packed
>
>
kConvexity_SerializationShift
)
&
0xFF
;
fFillType
=
(
packed
>
>
kFillType_SerializationShift
)
&
0x3
;
uint8_t
dir
=
(
packed
>
>
kDirection_SerializationShift
)
&
0x3
;
fIsVolatile
=
(
packed
>
>
kIsVolatile_SerializationShift
)
&
0x1
;
SkPathRef
*
pathRef
=
SkPathRef
:
:
CreateFromBuffer
(
&
buffer
)
;
if
(
!
pathRef
)
{
return
0
;
}
fPathRef
.
reset
(
pathRef
)
;
SkDEBUGCODE
(
this
-
>
validate
(
)
;
)
buffer
.
skipToAlign4
(
)
;
if
(
version
<
kPathPrivFirstDirection_Version
)
{
switch
(
dir
)
{
case
0
:
fFirstDirection
=
SkPathPriv
:
:
kUnknown_FirstDirection
;
break
;
case
1
:
fFirstDirection
=
SkPathPriv
:
:
kCW_FirstDirection
;
break
;
case
2
:
fFirstDirection
=
SkPathPriv
:
:
kCCW_FirstDirection
;
break
;
default
:
SkASSERT
(
false
)
;
}
}
else
{
fFirstDirection
=
dir
;
}
return
buffer
.
pos
(
)
;
}
#
include
"
SkStringUtils
.
h
"
#
include
"
SkStream
.
h
"
static
void
append_params
(
SkString
*
str
const
char
label
[
]
const
SkPoint
pts
[
]
int
count
SkScalarAsStringType
strType
SkScalar
conicWeight
=
-
1
)
{
str
-
>
append
(
label
)
;
str
-
>
append
(
"
(
"
)
;
const
SkScalar
*
values
=
&
pts
[
0
]
.
fX
;
count
*
=
2
;
for
(
int
i
=
0
;
i
<
count
;
+
+
i
)
{
SkAppendScalar
(
str
values
[
i
]
strType
)
;
if
(
i
<
count
-
1
)
{
str
-
>
append
(
"
"
)
;
}
}
if
(
conicWeight
>
=
0
)
{
str
-
>
append
(
"
"
)
;
SkAppendScalar
(
str
conicWeight
strType
)
;
}
str
-
>
append
(
"
)
;
"
)
;
if
(
kHex_SkScalarAsStringType
=
=
strType
)
{
str
-
>
append
(
"
/
/
"
)
;
for
(
int
i
=
0
;
i
<
count
;
+
+
i
)
{
SkAppendScalarDec
(
str
values
[
i
]
)
;
if
(
i
<
count
-
1
)
{
str
-
>
append
(
"
"
)
;
}
}
if
(
conicWeight
>
=
0
)
{
str
-
>
append
(
"
"
)
;
SkAppendScalarDec
(
str
conicWeight
)
;
}
}
str
-
>
append
(
"
\
n
"
)
;
}
void
SkPath
:
:
dump
(
SkWStream
*
wStream
bool
forceClose
bool
dumpAsHex
)
const
{
SkScalarAsStringType
asType
=
dumpAsHex
?
kHex_SkScalarAsStringType
:
kDec_SkScalarAsStringType
;
Iter
iter
(
*
this
forceClose
)
;
SkPoint
pts
[
4
]
;
Verb
verb
;
if
(
!
wStream
)
{
SkDebugf
(
"
path
:
forceClose
=
%
s
\
n
"
forceClose
?
"
true
"
:
"
false
"
)
;
}
SkString
builder
;
while
(
(
verb
=
iter
.
next
(
pts
false
)
)
!
=
kDone_Verb
)
{
switch
(
verb
)
{
case
kMove_Verb
:
append_params
(
&
builder
"
path
.
moveTo
"
&
pts
[
0
]
1
asType
)
;
break
;
case
kLine_Verb
:
append_params
(
&
builder
"
path
.
lineTo
"
&
pts
[
1
]
1
asType
)
;
break
;
case
kQuad_Verb
:
append_params
(
&
builder
"
path
.
quadTo
"
&
pts
[
1
]
2
asType
)
;
break
;
case
kConic_Verb
:
append_params
(
&
builder
"
path
.
conicTo
"
&
pts
[
1
]
2
asType
iter
.
conicWeight
(
)
)
;
break
;
case
kCubic_Verb
:
append_params
(
&
builder
"
path
.
cubicTo
"
&
pts
[
1
]
3
asType
)
;
break
;
case
kClose_Verb
:
builder
.
append
(
"
path
.
close
(
)
;
\
n
"
)
;
break
;
default
:
SkDebugf
(
"
path
:
UNKNOWN
VERB
%
d
aborting
dump
.
.
.
\
n
"
verb
)
;
verb
=
kDone_Verb
;
break
;
}
if
(
!
wStream
&
&
builder
.
size
(
)
)
{
SkDebugf
(
"
%
s
"
builder
.
c_str
(
)
)
;
builder
.
reset
(
)
;
}
}
if
(
wStream
)
{
wStream
-
>
writeText
(
builder
.
c_str
(
)
)
;
}
}
void
SkPath
:
:
dump
(
)
const
{
this
-
>
dump
(
nullptr
false
false
)
;
}
void
SkPath
:
:
dumpHex
(
)
const
{
this
-
>
dump
(
nullptr
false
true
)
;
}
#
ifdef
SK_DEBUG
void
SkPath
:
:
validate
(
)
const
{
SkASSERT
(
(
fFillType
&
~
3
)
=
=
0
)
;
#
ifdef
SK_DEBUG_PATH
if
(
!
fBoundsIsDirty
)
{
SkRect
bounds
;
bool
isFinite
=
compute_pt_bounds
(
&
bounds
*
fPathRef
.
get
(
)
)
;
SkASSERT
(
SkToBool
(
fIsFinite
)
=
=
isFinite
)
;
if
(
fPathRef
-
>
countPoints
(
)
<
=
1
)
{
SkASSERT
(
bounds
.
isEmpty
(
)
)
;
SkASSERT
(
fBounds
.
isEmpty
(
)
)
;
}
else
{
if
(
bounds
.
isEmpty
(
)
)
{
SkASSERT
(
fBounds
.
isEmpty
(
)
)
;
}
else
{
if
(
!
fBounds
.
isEmpty
(
)
)
{
SkASSERT
(
fBounds
.
contains
(
bounds
)
)
;
}
}
}
}
#
endif
}
#
endif
static
int
sign
(
SkScalar
x
)
{
return
x
<
0
;
}
#
define
kValueNeverReturnedBySign
2
enum
DirChange
{
kLeft_DirChange
kRight_DirChange
kStraight_DirChange
kBackwards_DirChange
kInvalid_DirChange
}
;
static
bool
almost_equal
(
SkScalar
compA
SkScalar
compB
)
{
const
int
epsilon
=
16
;
if
(
!
SkScalarIsFinite
(
compA
)
|
|
!
SkScalarIsFinite
(
compB
)
)
{
return
false
;
}
int
aBits
=
SkFloatAs2sCompliment
(
compA
)
;
int
bBits
=
SkFloatAs2sCompliment
(
compB
)
;
return
aBits
<
bBits
+
epsilon
&
&
bBits
<
aBits
+
epsilon
;
}
static
bool
approximately_zero_when_compared_to
(
double
x
double
y
)
{
return
x
=
=
0
|
|
fabs
(
x
)
<
fabs
(
y
*
FLT_EPSILON
)
;
}
struct
Convexicator
{
Convexicator
(
)
:
fPtCount
(
0
)
fConvexity
(
SkPath
:
:
kConvex_Convexity
)
fFirstDirection
(
SkPathPriv
:
:
kUnknown_FirstDirection
)
fIsFinite
(
true
)
fIsCurve
(
false
)
{
fExpectedDir
=
kInvalid_DirChange
;
fPriorPt
.
set
(
0
0
)
;
fLastPt
.
set
(
0
0
)
;
fCurrPt
.
set
(
0
0
)
;
fLastVec
.
set
(
0
0
)
;
fFirstVec
.
set
(
0
0
)
;
fDx
=
fDy
=
0
;
fSx
=
fSy
=
kValueNeverReturnedBySign
;
}
SkPath
:
:
Convexity
getConvexity
(
)
const
{
return
fConvexity
;
}
SkPathPriv
:
:
FirstDirection
getFirstDirection
(
)
const
{
return
fFirstDirection
;
}
void
addPt
(
const
SkPoint
&
pt
)
{
if
(
SkPath
:
:
kConcave_Convexity
=
=
fConvexity
|
|
!
fIsFinite
)
{
return
;
}
if
(
0
=
=
fPtCount
)
{
fCurrPt
=
pt
;
+
+
fPtCount
;
}
else
{
SkVector
vec
=
pt
-
fCurrPt
;
SkScalar
lengthSqd
=
vec
.
lengthSqd
(
)
;
if
(
!
SkScalarIsFinite
(
lengthSqd
)
)
{
fIsFinite
=
false
;
}
else
if
(
lengthSqd
)
{
fPriorPt
=
fLastPt
;
fLastPt
=
fCurrPt
;
fCurrPt
=
pt
;
if
(
+
+
fPtCount
=
=
2
)
{
fFirstVec
=
fLastVec
=
vec
;
}
else
{
SkASSERT
(
fPtCount
>
2
)
;
this
-
>
addVec
(
vec
)
;
}
int
sx
=
sign
(
vec
.
fX
)
;
int
sy
=
sign
(
vec
.
fY
)
;
fDx
+
=
(
sx
!
=
fSx
)
;
fDy
+
=
(
sy
!
=
fSy
)
;
fSx
=
sx
;
fSy
=
sy
;
if
(
fDx
>
3
|
|
fDy
>
3
)
{
fConvexity
=
SkPath
:
:
kConcave_Convexity
;
}
}
}
}
void
close
(
)
{
if
(
fPtCount
>
2
)
{
this
-
>
addVec
(
fFirstVec
)
;
}
}
DirChange
directionChange
(
const
SkVector
&
curVec
)
{
SkScalar
cross
=
SkPoint
:
:
CrossProduct
(
fLastVec
curVec
)
;
SkScalar
smallest
=
SkTMin
(
fCurrPt
.
fX
SkTMin
(
fCurrPt
.
fY
SkTMin
(
fLastPt
.
fX
fLastPt
.
fY
)
)
)
;
SkScalar
largest
=
SkTMax
(
fCurrPt
.
fX
SkTMax
(
fCurrPt
.
fY
SkTMax
(
fLastPt
.
fX
fLastPt
.
fY
)
)
)
;
largest
=
SkTMax
(
largest
-
smallest
)
;
if
(
!
almost_equal
(
largest
largest
+
cross
)
)
{
int
sign
=
SkScalarSignAsInt
(
cross
)
;
if
(
sign
)
{
return
(
1
=
=
sign
)
?
kRight_DirChange
:
kLeft_DirChange
;
}
}
if
(
cross
)
{
double
dLastVecX
=
SkScalarToDouble
(
fLastPt
.
fX
)
-
SkScalarToDouble
(
fPriorPt
.
fX
)
;
double
dLastVecY
=
SkScalarToDouble
(
fLastPt
.
fY
)
-
SkScalarToDouble
(
fPriorPt
.
fY
)
;
double
dCurrVecX
=
SkScalarToDouble
(
fCurrPt
.
fX
)
-
SkScalarToDouble
(
fLastPt
.
fX
)
;
double
dCurrVecY
=
SkScalarToDouble
(
fCurrPt
.
fY
)
-
SkScalarToDouble
(
fLastPt
.
fY
)
;
double
dCross
=
dLastVecX
*
dCurrVecY
-
dLastVecY
*
dCurrVecX
;
if
(
!
approximately_zero_when_compared_to
(
dCross
SkScalarToDouble
(
largest
)
)
)
{
int
sign
=
SkScalarSignAsInt
(
SkDoubleToScalar
(
dCross
)
)
;
if
(
sign
)
{
return
(
1
=
=
sign
)
?
kRight_DirChange
:
kLeft_DirChange
;
}
}
}
if
(
!
SkScalarNearlyZero
(
fLastVec
.
lengthSqd
(
)
SK_ScalarNearlyZero
*
SK_ScalarNearlyZero
)
&
&
!
SkScalarNearlyZero
(
curVec
.
lengthSqd
(
)
SK_ScalarNearlyZero
*
SK_ScalarNearlyZero
)
&
&
fLastVec
.
dot
(
curVec
)
<
0
.
0f
)
{
return
kBackwards_DirChange
;
}
return
kStraight_DirChange
;
}
bool
isFinite
(
)
const
{
return
fIsFinite
;
}
void
setCurve
(
bool
isCurve
)
{
fIsCurve
=
isCurve
;
}
private
:
void
addVec
(
const
SkVector
&
vec
)
{
SkASSERT
(
vec
.
fX
|
|
vec
.
fY
)
;
DirChange
dir
=
this
-
>
directionChange
(
vec
)
;
switch
(
dir
)
{
case
kLeft_DirChange
:
case
kRight_DirChange
:
if
(
kInvalid_DirChange
=
=
fExpectedDir
)
{
fExpectedDir
=
dir
;
fFirstDirection
=
(
kRight_DirChange
=
=
dir
)
?
SkPathPriv
:
:
kCW_FirstDirection
:
SkPathPriv
:
:
kCCW_FirstDirection
;
}
else
if
(
dir
!
=
fExpectedDir
)
{
fConvexity
=
SkPath
:
:
kConcave_Convexity
;
fFirstDirection
=
SkPathPriv
:
:
kUnknown_FirstDirection
;
}
fLastVec
=
vec
;
break
;
case
kStraight_DirChange
:
break
;
case
kBackwards_DirChange
:
if
(
fIsCurve
)
{
fConvexity
=
SkPath
:
:
kConcave_Convexity
;
fFirstDirection
=
SkPathPriv
:
:
kUnknown_FirstDirection
;
}
fLastVec
=
vec
;
break
;
case
kInvalid_DirChange
:
SkFAIL
(
"
Use
of
invalid
direction
change
flag
"
)
;
break
;
}
}
SkPoint
fPriorPt
;
SkPoint
fLastPt
;
SkPoint
fCurrPt
;
SkVector
fLastVec
fFirstVec
;
int
fPtCount
;
DirChange
fExpectedDir
;
SkPath
:
:
Convexity
fConvexity
;
SkPathPriv
:
:
FirstDirection
fFirstDirection
;
int
fDx
fDy
fSx
fSy
;
bool
fIsFinite
;
bool
fIsCurve
;
}
;
SkPath
:
:
Convexity
SkPath
:
:
internalGetConvexity
(
)
const
{
SkASSERT
(
kUnknown_Convexity
=
=
fConvexity
)
;
SkPoint
pts
[
4
]
;
SkPath
:
:
Verb
verb
;
SkPath
:
:
Iter
iter
(
*
this
true
)
;
int
contourCount
=
0
;
int
count
;
Convexicator
state
;
if
(
!
isFinite
(
)
)
{
return
kUnknown_Convexity
;
}
while
(
(
verb
=
iter
.
next
(
pts
true
true
)
)
!
=
SkPath
:
:
kDone_Verb
)
{
switch
(
verb
)
{
case
kMove_Verb
:
if
(
+
+
contourCount
>
1
)
{
fConvexity
=
kConcave_Convexity
;
return
kConcave_Convexity
;
}
pts
[
1
]
=
pts
[
0
]
;
case
kLine_Verb
:
count
=
1
;
state
.
setCurve
(
false
)
;
break
;
case
kQuad_Verb
:
case
kConic_Verb
:
case
kCubic_Verb
:
count
=
2
+
(
kCubic_Verb
=
=
verb
)
;
state
.
setCurve
(
true
)
;
break
;
case
kClose_Verb
:
state
.
setCurve
(
false
)
;
state
.
close
(
)
;
count
=
0
;
break
;
default
:
SkDEBUGFAIL
(
"
bad
verb
"
)
;
fConvexity
=
kConcave_Convexity
;
return
kConcave_Convexity
;
}
for
(
int
i
=
1
;
i
<
=
count
;
i
+
+
)
{
state
.
addPt
(
pts
[
i
]
)
;
}
if
(
!
state
.
isFinite
(
)
)
{
return
kUnknown_Convexity
;
}
if
(
kConcave_Convexity
=
=
state
.
getConvexity
(
)
)
{
fConvexity
=
kConcave_Convexity
;
return
kConcave_Convexity
;
}
}
fConvexity
=
state
.
getConvexity
(
)
;
if
(
kConvex_Convexity
=
=
fConvexity
&
&
SkPathPriv
:
:
kUnknown_FirstDirection
=
=
fFirstDirection
)
{
fFirstDirection
=
state
.
getFirstDirection
(
)
;
}
return
static_cast
<
Convexity
>
(
fConvexity
)
;
}
class
ContourIter
{
public
:
ContourIter
(
const
SkPathRef
&
pathRef
)
;
bool
done
(
)
const
{
return
fDone
;
}
int
count
(
)
const
{
return
fCurrPtCount
;
}
const
SkPoint
*
pts
(
)
const
{
return
fCurrPt
;
}
void
next
(
)
;
private
:
int
fCurrPtCount
;
const
SkPoint
*
fCurrPt
;
const
uint8_t
*
fCurrVerb
;
const
uint8_t
*
fStopVerbs
;
const
SkScalar
*
fCurrConicWeight
;
bool
fDone
;
SkDEBUGCODE
(
int
fContourCounter
;
)
}
;
ContourIter
:
:
ContourIter
(
const
SkPathRef
&
pathRef
)
{
fStopVerbs
=
pathRef
.
verbsMemBegin
(
)
;
fDone
=
false
;
fCurrPt
=
pathRef
.
points
(
)
;
fCurrVerb
=
pathRef
.
verbs
(
)
;
fCurrConicWeight
=
pathRef
.
conicWeights
(
)
;
fCurrPtCount
=
0
;
SkDEBUGCODE
(
fContourCounter
=
0
;
)
this
-
>
next
(
)
;
}
void
ContourIter
:
:
next
(
)
{
if
(
fCurrVerb
<
=
fStopVerbs
)
{
fDone
=
true
;
}
if
(
fDone
)
{
return
;
}
fCurrPt
+
=
fCurrPtCount
;
SkASSERT
(
SkPath
:
:
kMove_Verb
=
=
fCurrVerb
[
~
0
]
)
;
int
ptCount
=
1
;
const
uint8_t
*
verbs
=
fCurrVerb
;
for
(
-
-
verbs
;
verbs
>
fStopVerbs
;
-
-
verbs
)
{
switch
(
verbs
[
~
0
]
)
{
case
SkPath
:
:
kMove_Verb
:
goto
CONTOUR_END
;
case
SkPath
:
:
kLine_Verb
:
ptCount
+
=
1
;
break
;
case
SkPath
:
:
kConic_Verb
:
fCurrConicWeight
+
=
1
;
case
SkPath
:
:
kQuad_Verb
:
ptCount
+
=
2
;
break
;
case
SkPath
:
:
kCubic_Verb
:
ptCount
+
=
3
;
break
;
case
SkPath
:
:
kClose_Verb
:
break
;
default
:
SkDEBUGFAIL
(
"
unexpected
verb
"
)
;
break
;
}
}
CONTOUR_END
:
fCurrPtCount
=
ptCount
;
fCurrVerb
=
verbs
;
SkDEBUGCODE
(
+
+
fContourCounter
;
)
}
static
SkScalar
cross_prod
(
const
SkPoint
&
p0
const
SkPoint
&
p1
const
SkPoint
&
p2
)
{
SkScalar
cross
=
SkPoint
:
:
CrossProduct
(
p1
-
p0
p2
-
p0
)
;
if
(
0
=
=
cross
)
{
double
p0x
=
SkScalarToDouble
(
p0
.
fX
)
;
double
p0y
=
SkScalarToDouble
(
p0
.
fY
)
;
double
p1x
=
SkScalarToDouble
(
p1
.
fX
)
;
double
p1y
=
SkScalarToDouble
(
p1
.
fY
)
;
double
p2x
=
SkScalarToDouble
(
p2
.
fX
)
;
double
p2y
=
SkScalarToDouble
(
p2
.
fY
)
;
cross
=
SkDoubleToScalar
(
(
p1x
-
p0x
)
*
(
p2y
-
p0y
)
-
(
p1y
-
p0y
)
*
(
p2x
-
p0x
)
)
;
}
return
cross
;
}
static
int
find_max_y
(
const
SkPoint
pts
[
]
int
count
)
{
SkASSERT
(
count
>
0
)
;
SkScalar
max
=
pts
[
0
]
.
fY
;
int
firstIndex
=
0
;
for
(
int
i
=
1
;
i
<
count
;
+
+
i
)
{
SkScalar
y
=
pts
[
i
]
.
fY
;
if
(
y
>
max
)
{
max
=
y
;
firstIndex
=
i
;
}
}
return
firstIndex
;
}
static
int
find_diff_pt
(
const
SkPoint
pts
[
]
int
index
int
n
int
inc
)
{
int
i
=
index
;
for
(
;
;
)
{
i
=
(
i
+
inc
)
%
n
;
if
(
i
=
=
index
)
{
break
;
}
if
(
pts
[
index
]
!
=
pts
[
i
]
)
{
break
;
}
}
return
i
;
}
static
int
find_min_max_x_at_y
(
const
SkPoint
pts
[
]
int
index
int
n
int
*
maxIndexPtr
)
{
const
SkScalar
y
=
pts
[
index
]
.
fY
;
SkScalar
min
=
pts
[
index
]
.
fX
;
SkScalar
max
=
min
;
int
minIndex
=
index
;
int
maxIndex
=
index
;
for
(
int
i
=
index
+
1
;
i
<
n
;
+
+
i
)
{
if
(
pts
[
i
]
.
fY
!
=
y
)
{
break
;
}
SkScalar
x
=
pts
[
i
]
.
fX
;
if
(
x
<
min
)
{
min
=
x
;
minIndex
=
i
;
}
else
if
(
x
>
max
)
{
max
=
x
;
maxIndex
=
i
;
}
}
*
maxIndexPtr
=
maxIndex
;
return
minIndex
;
}
static
void
crossToDir
(
SkScalar
cross
SkPathPriv
:
:
FirstDirection
*
dir
)
{
*
dir
=
cross
>
0
?
SkPathPriv
:
:
kCW_FirstDirection
:
SkPathPriv
:
:
kCCW_FirstDirection
;
}
bool
SkPathPriv
:
:
CheapComputeFirstDirection
(
const
SkPath
&
path
FirstDirection
*
dir
)
{
if
(
kUnknown_FirstDirection
!
=
path
.
fFirstDirection
.
load
(
)
)
{
*
dir
=
static_cast
<
FirstDirection
>
(
path
.
fFirstDirection
.
load
(
)
)
;
return
true
;
}
if
(
SkPath
:
:
kConvex_Convexity
=
=
path
.
getConvexityOrUnknown
(
)
)
{
SkASSERT
(
kUnknown_FirstDirection
=
=
path
.
fFirstDirection
)
;
*
dir
=
static_cast
<
FirstDirection
>
(
path
.
fFirstDirection
.
load
(
)
)
;
return
false
;
}
ContourIter
iter
(
*
path
.
fPathRef
.
get
(
)
)
;
SkScalar
ymax
=
path
.
getBounds
(
)
.
fTop
;
SkScalar
ymaxCross
=
0
;
for
(
;
!
iter
.
done
(
)
;
iter
.
next
(
)
)
{
int
n
=
iter
.
count
(
)
;
if
(
n
<
3
)
{
continue
;
}
const
SkPoint
*
pts
=
iter
.
pts
(
)
;
SkScalar
cross
=
0
;
int
index
=
find_max_y
(
pts
n
)
;
if
(
pts
[
index
]
.
fY
<
ymax
)
{
continue
;
}
if
(
pts
[
(
index
+
1
)
%
n
]
.
fY
=
=
pts
[
index
]
.
fY
)
{
int
maxIndex
;
int
minIndex
=
find_min_max_x_at_y
(
pts
index
n
&
maxIndex
)
;
if
(
minIndex
=
=
maxIndex
)
{
goto
TRY_CROSSPROD
;
}
SkASSERT
(
pts
[
minIndex
]
.
fY
=
=
pts
[
index
]
.
fY
)
;
SkASSERT
(
pts
[
maxIndex
]
.
fY
=
=
pts
[
index
]
.
fY
)
;
SkASSERT
(
pts
[
minIndex
]
.
fX
<
=
pts
[
maxIndex
]
.
fX
)
;
cross
=
minIndex
-
maxIndex
;
}
else
{
TRY_CROSSPROD
:
int
prev
=
find_diff_pt
(
pts
index
n
n
-
1
)
;
if
(
prev
=
=
index
)
{
continue
;
}
int
next
=
find_diff_pt
(
pts
index
n
1
)
;
SkASSERT
(
next
!
=
index
)
;
cross
=
cross_prod
(
pts
[
prev
]
pts
[
index
]
pts
[
next
]
)
;
if
(
0
=
=
cross
&
&
pts
[
prev
]
.
fY
=
=
pts
[
index
]
.
fY
&
&
pts
[
next
]
.
fY
=
=
pts
[
index
]
.
fY
)
{
cross
=
pts
[
index
]
.
fX
-
pts
[
next
]
.
fX
;
}
}
if
(
cross
)
{
ymax
=
pts
[
index
]
.
fY
;
ymaxCross
=
cross
;
}
}
if
(
ymaxCross
)
{
crossToDir
(
ymaxCross
dir
)
;
path
.
fFirstDirection
=
*
dir
;
return
true
;
}
else
{
return
false
;
}
}
static
bool
between
(
SkScalar
a
SkScalar
b
SkScalar
c
)
{
SkASSERT
(
(
(
a
<
=
b
&
&
b
<
=
c
)
|
|
(
a
>
=
b
&
&
b
>
=
c
)
)
=
=
(
(
a
-
b
)
*
(
c
-
b
)
<
=
0
)
|
|
(
SkScalarNearlyZero
(
a
)
&
&
SkScalarNearlyZero
(
b
)
&
&
SkScalarNearlyZero
(
c
)
)
)
;
return
(
a
-
b
)
*
(
c
-
b
)
<
=
0
;
}
static
SkScalar
eval_cubic_coeff
(
SkScalar
A
SkScalar
B
SkScalar
C
SkScalar
D
SkScalar
t
)
{
return
SkScalarMulAdd
(
SkScalarMulAdd
(
SkScalarMulAdd
(
A
t
B
)
t
C
)
t
D
)
;
}
static
SkScalar
eval_cubic_pts
(
SkScalar
c0
SkScalar
c1
SkScalar
c2
SkScalar
c3
SkScalar
t
)
{
SkScalar
A
=
c3
+
3
*
(
c1
-
c2
)
-
c0
;
SkScalar
B
=
3
*
(
c2
-
c1
-
c1
+
c0
)
;
SkScalar
C
=
3
*
(
c1
-
c0
)
;
SkScalar
D
=
c0
;
return
eval_cubic_coeff
(
A
B
C
D
t
)
;
}
template
<
size_t
N
>
static
void
find_minmax
(
const
SkPoint
pts
[
]
SkScalar
*
minPtr
SkScalar
*
maxPtr
)
{
SkScalar
min
max
;
min
=
max
=
pts
[
0
]
.
fX
;
for
(
size_t
i
=
1
;
i
<
N
;
+
+
i
)
{
min
=
SkMinScalar
(
min
pts
[
i
]
.
fX
)
;
max
=
SkMaxScalar
(
max
pts
[
i
]
.
fX
)
;
}
*
minPtr
=
min
;
*
maxPtr
=
max
;
}
static
bool
checkOnCurve
(
SkScalar
x
SkScalar
y
const
SkPoint
&
start
const
SkPoint
&
end
)
{
if
(
start
.
fY
=
=
end
.
fY
)
{
return
between
(
start
.
fX
x
end
.
fX
)
&
&
x
!
=
end
.
fX
;
}
else
{
return
x
=
=
start
.
fX
&
&
y
=
=
start
.
fY
;
}
}
static
int
winding_mono_cubic
(
const
SkPoint
pts
[
]
SkScalar
x
SkScalar
y
int
*
onCurveCount
)
{
SkScalar
y0
=
pts
[
0
]
.
fY
;
SkScalar
y3
=
pts
[
3
]
.
fY
;
int
dir
=
1
;
if
(
y0
>
y3
)
{
SkTSwap
(
y0
y3
)
;
dir
=
-
1
;
}
if
(
y
<
y0
|
|
y
>
y3
)
{
return
0
;
}
if
(
checkOnCurve
(
x
y
pts
[
0
]
pts
[
3
]
)
)
{
*
onCurveCount
+
=
1
;
return
0
;
}
if
(
y
=
=
y3
)
{
return
0
;
}
SkScalar
min
max
;
find_minmax
<
4
>
(
pts
&
min
&
max
)
;
if
(
x
<
min
)
{
return
0
;
}
if
(
x
>
max
)
{
return
dir
;
}
SkScalar
t
;
if
(
!
SkCubicClipper
:
:
ChopMonoAtY
(
pts
y
&
t
)
)
{
return
0
;
}
SkScalar
xt
=
eval_cubic_pts
(
pts
[
0
]
.
fX
pts
[
1
]
.
fX
pts
[
2
]
.
fX
pts
[
3
]
.
fX
t
)
;
if
(
SkScalarNearlyEqual
(
xt
x
)
)
{
if
(
x
!
=
pts
[
3
]
.
fX
|
|
y
!
=
pts
[
3
]
.
fY
)
{
*
onCurveCount
+
=
1
;
return
0
;
}
}
return
xt
<
x
?
dir
:
0
;
}
static
int
winding_cubic
(
const
SkPoint
pts
[
]
SkScalar
x
SkScalar
y
int
*
onCurveCount
)
{
SkPoint
dst
[
10
]
;
int
n
=
SkChopCubicAtYExtrema
(
pts
dst
)
;
int
w
=
0
;
for
(
int
i
=
0
;
i
<
=
n
;
+
+
i
)
{
w
+
=
winding_mono_cubic
(
&
dst
[
i
*
3
]
x
y
onCurveCount
)
;
}
return
w
;
}
static
double
conic_eval_numerator
(
const
SkScalar
src
[
]
SkScalar
w
SkScalar
t
)
{
SkASSERT
(
src
)
;
SkASSERT
(
t
>
=
0
&
&
t
<
=
1
)
;
SkScalar
src2w
=
src
[
2
]
*
w
;
SkScalar
C
=
src
[
0
]
;
SkScalar
A
=
src
[
4
]
-
2
*
src2w
+
C
;
SkScalar
B
=
2
*
(
src2w
-
C
)
;
return
(
A
*
t
+
B
)
*
t
+
C
;
}
static
double
conic_eval_denominator
(
SkScalar
w
SkScalar
t
)
{
SkScalar
B
=
2
*
(
w
-
1
)
;
SkScalar
C
=
1
;
SkScalar
A
=
-
B
;
return
(
A
*
t
+
B
)
*
t
+
C
;
}
static
int
winding_mono_conic
(
const
SkConic
&
conic
SkScalar
x
SkScalar
y
int
*
onCurveCount
)
{
const
SkPoint
*
pts
=
conic
.
fPts
;
SkScalar
y0
=
pts
[
0
]
.
fY
;
SkScalar
y2
=
pts
[
2
]
.
fY
;
int
dir
=
1
;
if
(
y0
>
y2
)
{
SkTSwap
(
y0
y2
)
;
dir
=
-
1
;
}
if
(
y
<
y0
|
|
y
>
y2
)
{
return
0
;
}
if
(
checkOnCurve
(
x
y
pts
[
0
]
pts
[
2
]
)
)
{
*
onCurveCount
+
=
1
;
return
0
;
}
if
(
y
=
=
y2
)
{
return
0
;
}
SkScalar
roots
[
2
]
;
SkScalar
A
=
pts
[
2
]
.
fY
;
SkScalar
B
=
pts
[
1
]
.
fY
*
conic
.
fW
-
y
*
conic
.
fW
+
y
;
SkScalar
C
=
pts
[
0
]
.
fY
;
A
+
=
C
-
2
*
B
;
B
-
=
C
;
C
-
=
y
;
int
n
=
SkFindUnitQuadRoots
(
A
2
*
B
C
roots
)
;
SkASSERT
(
n
<
=
1
)
;
SkScalar
xt
;
if
(
0
=
=
n
)
{
xt
=
pts
[
1
-
dir
]
.
fX
;
}
else
{
SkScalar
t
=
roots
[
0
]
;
xt
=
conic_eval_numerator
(
&
pts
[
0
]
.
fX
conic
.
fW
t
)
/
conic_eval_denominator
(
conic
.
fW
t
)
;
}
if
(
SkScalarNearlyEqual
(
xt
x
)
)
{
if
(
x
!
=
pts
[
2
]
.
fX
|
|
y
!
=
pts
[
2
]
.
fY
)
{
*
onCurveCount
+
=
1
;
return
0
;
}
}
return
xt
<
x
?
dir
:
0
;
}
static
bool
is_mono_quad
(
SkScalar
y0
SkScalar
y1
SkScalar
y2
)
{
if
(
y0
=
=
y1
)
{
return
true
;
}
if
(
y0
<
y1
)
{
return
y1
<
=
y2
;
}
else
{
return
y1
>
=
y2
;
}
}
static
int
winding_conic
(
const
SkPoint
pts
[
]
SkScalar
x
SkScalar
y
SkScalar
weight
int
*
onCurveCount
)
{
SkConic
conic
(
pts
weight
)
;
SkConic
chopped
[
2
]
;
bool
isMono
=
is_mono_quad
(
pts
[
0
]
.
fY
pts
[
1
]
.
fY
pts
[
2
]
.
fY
)
|
|
!
conic
.
chopAtYExtrema
(
chopped
)
;
int
w
=
winding_mono_conic
(
isMono
?
conic
:
chopped
[
0
]
x
y
onCurveCount
)
;
if
(
!
isMono
)
{
w
+
=
winding_mono_conic
(
chopped
[
1
]
x
y
onCurveCount
)
;
}
return
w
;
}
static
int
winding_mono_quad
(
const
SkPoint
pts
[
]
SkScalar
x
SkScalar
y
int
*
onCurveCount
)
{
SkScalar
y0
=
pts
[
0
]
.
fY
;
SkScalar
y2
=
pts
[
2
]
.
fY
;
int
dir
=
1
;
if
(
y0
>
y2
)
{
SkTSwap
(
y0
y2
)
;
dir
=
-
1
;
}
if
(
y
<
y0
|
|
y
>
y2
)
{
return
0
;
}
if
(
checkOnCurve
(
x
y
pts
[
0
]
pts
[
2
]
)
)
{
*
onCurveCount
+
=
1
;
return
0
;
}
if
(
y
=
=
y2
)
{
return
0
;
}
#
if
0
if
(
pts
[
0
]
.
fX
>
x
&
&
pts
[
1
]
.
fX
>
x
&
&
pts
[
2
]
.
fX
>
x
)
{
return
0
;
}
#
endif
SkScalar
roots
[
2
]
;
int
n
=
SkFindUnitQuadRoots
(
pts
[
0
]
.
fY
-
2
*
pts
[
1
]
.
fY
+
pts
[
2
]
.
fY
2
*
(
pts
[
1
]
.
fY
-
pts
[
0
]
.
fY
)
pts
[
0
]
.
fY
-
y
roots
)
;
SkASSERT
(
n
<
=
1
)
;
SkScalar
xt
;
if
(
0
=
=
n
)
{
xt
=
pts
[
1
-
dir
]
.
fX
;
}
else
{
SkScalar
t
=
roots
[
0
]
;
SkScalar
C
=
pts
[
0
]
.
fX
;
SkScalar
A
=
pts
[
2
]
.
fX
-
2
*
pts
[
1
]
.
fX
+
C
;
SkScalar
B
=
2
*
(
pts
[
1
]
.
fX
-
C
)
;
xt
=
SkScalarMulAdd
(
SkScalarMulAdd
(
A
t
B
)
t
C
)
;
}
if
(
SkScalarNearlyEqual
(
xt
x
)
)
{
if
(
x
!
=
pts
[
2
]
.
fX
|
|
y
!
=
pts
[
2
]
.
fY
)
{
*
onCurveCount
+
=
1
;
return
0
;
}
}
return
xt
<
x
?
dir
:
0
;
}
static
int
winding_quad
(
const
SkPoint
pts
[
]
SkScalar
x
SkScalar
y
int
*
onCurveCount
)
{
SkPoint
dst
[
5
]
;
int
n
=
0
;
if
(
!
is_mono_quad
(
pts
[
0
]
.
fY
pts
[
1
]
.
fY
pts
[
2
]
.
fY
)
)
{
n
=
SkChopQuadAtYExtrema
(
pts
dst
)
;
pts
=
dst
;
}
int
w
=
winding_mono_quad
(
pts
x
y
onCurveCount
)
;
if
(
n
>
0
)
{
w
+
=
winding_mono_quad
(
&
pts
[
2
]
x
y
onCurveCount
)
;
}
return
w
;
}
static
int
winding_line
(
const
SkPoint
pts
[
]
SkScalar
x
SkScalar
y
int
*
onCurveCount
)
{
SkScalar
x0
=
pts
[
0
]
.
fX
;
SkScalar
y0
=
pts
[
0
]
.
fY
;
SkScalar
x1
=
pts
[
1
]
.
fX
;
SkScalar
y1
=
pts
[
1
]
.
fY
;
SkScalar
dy
=
y1
-
y0
;
int
dir
=
1
;
if
(
y0
>
y1
)
{
SkTSwap
(
y0
y1
)
;
dir
=
-
1
;
}
if
(
y
<
y0
|
|
y
>
y1
)
{
return
0
;
}
if
(
checkOnCurve
(
x
y
pts
[
0
]
pts
[
1
]
)
)
{
*
onCurveCount
+
=
1
;
return
0
;
}
if
(
y
=
=
y1
)
{
return
0
;
}
SkScalar
cross
=
SkScalarMul
(
x1
-
x0
y
-
pts
[
0
]
.
fY
)
-
SkScalarMul
(
dy
x
-
x0
)
;
if
(
!
cross
)
{
if
(
x
!
=
x1
|
|
y
!
=
pts
[
1
]
.
fY
)
{
*
onCurveCount
+
=
1
;
}
dir
=
0
;
}
else
if
(
SkScalarSignAsInt
(
cross
)
=
=
dir
)
{
dir
=
0
;
}
return
dir
;
}
static
void
tangent_cubic
(
const
SkPoint
pts
[
]
SkScalar
x
SkScalar
y
SkTDArray
<
SkVector
>
*
tangents
)
{
if
(
!
between
(
pts
[
0
]
.
fY
y
pts
[
1
]
.
fY
)
&
&
!
between
(
pts
[
1
]
.
fY
y
pts
[
2
]
.
fY
)
&
&
!
between
(
pts
[
2
]
.
fY
y
pts
[
3
]
.
fY
)
)
{
return
;
}
if
(
!
between
(
pts
[
0
]
.
fX
x
pts
[
1
]
.
fX
)
&
&
!
between
(
pts
[
1
]
.
fX
x
pts
[
2
]
.
fX
)
&
&
!
between
(
pts
[
2
]
.
fX
x
pts
[
3
]
.
fX
)
)
{
return
;
}
SkPoint
dst
[
10
]
;
int
n
=
SkChopCubicAtYExtrema
(
pts
dst
)
;
for
(
int
i
=
0
;
i
<
=
n
;
+
+
i
)
{
SkPoint
*
c
=
&
dst
[
i
*
3
]
;
SkScalar
t
;
if
(
!
SkCubicClipper
:
:
ChopMonoAtY
(
c
y
&
t
)
)
{
continue
;
}
SkScalar
xt
=
eval_cubic_pts
(
c
[
0
]
.
fX
c
[
1
]
.
fX
c
[
2
]
.
fX
c
[
3
]
.
fX
t
)
;
if
(
!
SkScalarNearlyEqual
(
x
xt
)
)
{
continue
;
}
SkVector
tangent
;
SkEvalCubicAt
(
c
t
nullptr
&
tangent
nullptr
)
;
tangents
-
>
push
(
tangent
)
;
}
}
static
void
tangent_conic
(
const
SkPoint
pts
[
]
SkScalar
x
SkScalar
y
SkScalar
w
SkTDArray
<
SkVector
>
*
tangents
)
{
if
(
!
between
(
pts
[
0
]
.
fY
y
pts
[
1
]
.
fY
)
&
&
!
between
(
pts
[
1
]
.
fY
y
pts
[
2
]
.
fY
)
)
{
return
;
}
if
(
!
between
(
pts
[
0
]
.
fX
x
pts
[
1
]
.
fX
)
&
&
!
between
(
pts
[
1
]
.
fX
x
pts
[
2
]
.
fX
)
)
{
return
;
}
SkScalar
roots
[
2
]
;
SkScalar
A
=
pts
[
2
]
.
fY
;
SkScalar
B
=
pts
[
1
]
.
fY
*
w
-
y
*
w
+
y
;
SkScalar
C
=
pts
[
0
]
.
fY
;
A
+
=
C
-
2
*
B
;
B
-
=
C
;
C
-
=
y
;
int
n
=
SkFindUnitQuadRoots
(
A
2
*
B
C
roots
)
;
for
(
int
index
=
0
;
index
<
n
;
+
+
index
)
{
SkScalar
t
=
roots
[
index
]
;
SkScalar
xt
=
conic_eval_numerator
(
&
pts
[
0
]
.
fX
w
t
)
/
conic_eval_denominator
(
w
t
)
;
if
(
!
SkScalarNearlyEqual
(
x
xt
)
)
{
continue
;
}
SkConic
conic
(
pts
w
)
;
tangents
-
>
push
(
conic
.
evalTangentAt
(
t
)
)
;
}
}
static
void
tangent_quad
(
const
SkPoint
pts
[
]
SkScalar
x
SkScalar
y
SkTDArray
<
SkVector
>
*
tangents
)
{
if
(
!
between
(
pts
[
0
]
.
fY
y
pts
[
1
]
.
fY
)
&
&
!
between
(
pts
[
1
]
.
fY
y
pts
[
2
]
.
fY
)
)
{
return
;
}
if
(
!
between
(
pts
[
0
]
.
fX
x
pts
[
1
]
.
fX
)
&
&
!
between
(
pts
[
1
]
.
fX
x
pts
[
2
]
.
fX
)
)
{
return
;
}
SkScalar
roots
[
2
]
;
int
n
=
SkFindUnitQuadRoots
(
pts
[
0
]
.
fY
-
2
*
pts
[
1
]
.
fY
+
pts
[
2
]
.
fY
2
*
(
pts
[
1
]
.
fY
-
pts
[
0
]
.
fY
)
pts
[
0
]
.
fY
-
y
roots
)
;
for
(
int
index
=
0
;
index
<
n
;
+
+
index
)
{
SkScalar
t
=
roots
[
index
]
;
SkScalar
C
=
pts
[
0
]
.
fX
;
SkScalar
A
=
pts
[
2
]
.
fX
-
2
*
pts
[
1
]
.
fX
+
C
;
SkScalar
B
=
2
*
(
pts
[
1
]
.
fX
-
C
)
;
SkScalar
xt
=
(
A
*
t
+
B
)
*
t
+
C
;
if
(
!
SkScalarNearlyEqual
(
x
xt
)
)
{
continue
;
}
tangents
-
>
push
(
SkEvalQuadTangentAt
(
pts
t
)
)
;
}
}
static
void
tangent_line
(
const
SkPoint
pts
[
]
SkScalar
x
SkScalar
y
SkTDArray
<
SkVector
>
*
tangents
)
{
SkScalar
y0
=
pts
[
0
]
.
fY
;
SkScalar
y1
=
pts
[
1
]
.
fY
;
if
(
!
between
(
y0
y
y1
)
)
{
return
;
}
SkScalar
x0
=
pts
[
0
]
.
fX
;
SkScalar
x1
=
pts
[
1
]
.
fX
;
if
(
!
between
(
x0
x
x1
)
)
{
return
;
}
SkScalar
dx
=
x1
-
x0
;
SkScalar
dy
=
y1
-
y0
;
if
(
!
SkScalarNearlyEqual
(
(
x
-
x0
)
*
dy
dx
*
(
y
-
y0
)
)
)
{
return
;
}
SkVector
v
;
v
.
set
(
dx
dy
)
;
tangents
-
>
push
(
v
)
;
}
static
bool
contains_inclusive
(
const
SkRect
&
r
SkScalar
x
SkScalar
y
)
{
return
r
.
fLeft
<
=
x
&
&
x
<
=
r
.
fRight
&
&
r
.
fTop
<
=
y
&
&
y
<
=
r
.
fBottom
;
}
bool
SkPath
:
:
contains
(
SkScalar
x
SkScalar
y
)
const
{
bool
isInverse
=
this
-
>
isInverseFillType
(
)
;
if
(
this
-
>
isEmpty
(
)
)
{
return
isInverse
;
}
if
(
!
contains_inclusive
(
this
-
>
getBounds
(
)
x
y
)
)
{
return
isInverse
;
}
SkPath
:
:
Iter
iter
(
*
this
true
)
;
bool
done
=
false
;
int
w
=
0
;
int
onCurveCount
=
0
;
do
{
SkPoint
pts
[
4
]
;
switch
(
iter
.
next
(
pts
false
)
)
{
case
SkPath
:
:
kMove_Verb
:
case
SkPath
:
:
kClose_Verb
:
break
;
case
SkPath
:
:
kLine_Verb
:
w
+
=
winding_line
(
pts
x
y
&
onCurveCount
)
;
break
;
case
SkPath
:
:
kQuad_Verb
:
w
+
=
winding_quad
(
pts
x
y
&
onCurveCount
)
;
break
;
case
SkPath
:
:
kConic_Verb
:
w
+
=
winding_conic
(
pts
x
y
iter
.
conicWeight
(
)
&
onCurveCount
)
;
break
;
case
SkPath
:
:
kCubic_Verb
:
w
+
=
winding_cubic
(
pts
x
y
&
onCurveCount
)
;
break
;
case
SkPath
:
:
kDone_Verb
:
done
=
true
;
break
;
}
}
while
(
!
done
)
;
bool
evenOddFill
=
SkPath
:
:
kEvenOdd_FillType
=
=
this
-
>
getFillType
(
)
|
|
SkPath
:
:
kInverseEvenOdd_FillType
=
=
this
-
>
getFillType
(
)
;
if
(
evenOddFill
)
{
w
&
=
1
;
}
if
(
w
)
{
return
!
isInverse
;
}
if
(
onCurveCount
<
=
1
)
{
return
SkToBool
(
onCurveCount
)
^
isInverse
;
}
if
(
(
onCurveCount
&
1
)
|
|
evenOddFill
)
{
return
SkToBool
(
onCurveCount
&
1
)
^
isInverse
;
}
iter
.
setPath
(
*
this
true
)
;
done
=
false
;
SkTDArray
<
SkVector
>
tangents
;
do
{
SkPoint
pts
[
4
]
;
int
oldCount
=
tangents
.
count
(
)
;
switch
(
iter
.
next
(
pts
false
)
)
{
case
SkPath
:
:
kMove_Verb
:
case
SkPath
:
:
kClose_Verb
:
break
;
case
SkPath
:
:
kLine_Verb
:
tangent_line
(
pts
x
y
&
tangents
)
;
break
;
case
SkPath
:
:
kQuad_Verb
:
tangent_quad
(
pts
x
y
&
tangents
)
;
break
;
case
SkPath
:
:
kConic_Verb
:
tangent_conic
(
pts
x
y
iter
.
conicWeight
(
)
&
tangents
)
;
break
;
case
SkPath
:
:
kCubic_Verb
:
tangent_cubic
(
pts
x
y
&
tangents
)
;
break
;
case
SkPath
:
:
kDone_Verb
:
done
=
true
;
break
;
}
if
(
tangents
.
count
(
)
>
oldCount
)
{
int
last
=
tangents
.
count
(
)
-
1
;
const
SkVector
&
tangent
=
tangents
[
last
]
;
if
(
SkScalarNearlyZero
(
tangent
.
lengthSqd
(
)
)
)
{
tangents
.
remove
(
last
)
;
}
else
{
for
(
int
index
=
0
;
index
<
last
;
+
+
index
)
{
const
SkVector
&
test
=
tangents
[
index
]
;
if
(
SkScalarNearlyZero
(
test
.
cross
(
tangent
)
)
&
&
SkScalarSignAsInt
(
tangent
.
fX
*
test
.
fX
)
<
=
0
&
&
SkScalarSignAsInt
(
tangent
.
fY
*
test
.
fY
)
<
=
0
)
{
tangents
.
remove
(
last
)
;
tangents
.
removeShuffle
(
index
)
;
break
;
}
}
}
}
}
while
(
!
done
)
;
return
SkToBool
(
tangents
.
count
(
)
)
^
isInverse
;
}
int
SkPath
:
:
ConvertConicToQuads
(
const
SkPoint
&
p0
const
SkPoint
&
p1
const
SkPoint
&
p2
SkScalar
w
SkPoint
pts
[
]
int
pow2
)
{
const
SkConic
conic
(
p0
p1
p2
w
)
;
return
conic
.
chopIntoQuadsPOW2
(
pts
pow2
)
;
}
bool
SkPathPriv
:
:
IsSimpleClosedRect
(
const
SkPath
&
path
SkRect
*
rect
SkPath
:
:
Direction
*
direction
unsigned
*
start
)
{
if
(
path
.
getSegmentMasks
(
)
!
=
SkPath
:
:
kLine_SegmentMask
)
{
return
false
;
}
SkPath
:
:
RawIter
iter
(
path
)
;
SkPoint
verbPts
[
4
]
;
SkPath
:
:
Verb
v
;
SkPoint
rectPts
[
5
]
;
int
rectPtCnt
=
0
;
while
(
(
v
=
iter
.
next
(
verbPts
)
)
!
=
SkPath
:
:
kDone_Verb
)
{
switch
(
v
)
{
case
SkPath
:
:
kMove_Verb
:
if
(
0
!
=
rectPtCnt
)
{
return
false
;
}
rectPts
[
0
]
=
verbPts
[
0
]
;
+
+
rectPtCnt
;
break
;
case
SkPath
:
:
kLine_Verb
:
if
(
5
=
=
rectPtCnt
)
{
return
false
;
}
rectPts
[
rectPtCnt
]
=
verbPts
[
1
]
;
+
+
rectPtCnt
;
break
;
case
SkPath
:
:
kClose_Verb
:
if
(
4
=
=
rectPtCnt
)
{
rectPts
[
4
]
=
rectPts
[
0
]
;
rectPtCnt
=
5
;
}
break
;
default
:
return
false
;
}
}
if
(
rectPtCnt
<
5
)
{
return
false
;
}
if
(
rectPts
[
0
]
!
=
rectPts
[
4
]
)
{
return
false
;
}
bool
vec03IsVertical
;
if
(
rectPts
[
0
]
.
fX
=
=
rectPts
[
3
]
.
fX
&
&
rectPts
[
1
]
.
fX
=
=
rectPts
[
2
]
.
fX
&
&
rectPts
[
0
]
.
fY
=
=
rectPts
[
1
]
.
fY
&
&
rectPts
[
3
]
.
fY
=
=
rectPts
[
2
]
.
fY
)
{
if
(
rectPts
[
0
]
.
fX
=
=
rectPts
[
1
]
.
fX
|
|
rectPts
[
0
]
.
fY
=
=
rectPts
[
3
]
.
fY
)
{
return
false
;
}
vec03IsVertical
=
true
;
}
else
if
(
rectPts
[
0
]
.
fY
=
=
rectPts
[
3
]
.
fY
&
&
rectPts
[
1
]
.
fY
=
=
rectPts
[
2
]
.
fY
&
&
rectPts
[
0
]
.
fX
=
=
rectPts
[
1
]
.
fX
&
&
rectPts
[
3
]
.
fX
=
=
rectPts
[
2
]
.
fX
)
{
if
(
rectPts
[
0
]
.
fY
=
=
rectPts
[
1
]
.
fY
|
|
rectPts
[
0
]
.
fX
=
=
rectPts
[
3
]
.
fX
)
{
return
false
;
}
vec03IsVertical
=
false
;
}
else
{
return
false
;
}
unsigned
sortFlags
=
(
(
rectPts
[
0
]
.
fX
<
rectPts
[
2
]
.
fX
)
?
0b00
:
0b01
)
|
(
(
rectPts
[
0
]
.
fY
<
rectPts
[
2
]
.
fY
)
?
0b00
:
0b10
)
;
switch
(
sortFlags
)
{
case
0b00
:
rect
-
>
set
(
rectPts
[
0
]
.
fX
rectPts
[
0
]
.
fY
rectPts
[
2
]
.
fX
rectPts
[
2
]
.
fY
)
;
*
direction
=
vec03IsVertical
?
SkPath
:
:
kCW_Direction
:
SkPath
:
:
kCCW_Direction
;
*
start
=
0
;
break
;
case
0b01
:
rect
-
>
set
(
rectPts
[
2
]
.
fX
rectPts
[
0
]
.
fY
rectPts
[
0
]
.
fX
rectPts
[
2
]
.
fY
)
;
*
direction
=
vec03IsVertical
?
SkPath
:
:
kCCW_Direction
:
SkPath
:
:
kCW_Direction
;
*
start
=
1
;
break
;
case
0b10
:
rect
-
>
set
(
rectPts
[
0
]
.
fX
rectPts
[
2
]
.
fY
rectPts
[
2
]
.
fX
rectPts
[
0
]
.
fY
)
;
*
direction
=
vec03IsVertical
?
SkPath
:
:
kCCW_Direction
:
SkPath
:
:
kCW_Direction
;
*
start
=
3
;
break
;
case
0b11
:
rect
-
>
set
(
rectPts
[
2
]
.
fX
rectPts
[
2
]
.
fY
rectPts
[
0
]
.
fX
rectPts
[
0
]
.
fY
)
;
*
direction
=
vec03IsVertical
?
SkPath
:
:
kCW_Direction
:
SkPath
:
:
kCCW_Direction
;
*
start
=
2
;
break
;
}
return
true
;
}
void
SkPathPriv
:
:
CreateDrawArcPath
(
SkPath
*
path
const
SkRect
&
oval
SkScalar
startAngle
SkScalar
sweepAngle
bool
useCenter
bool
isFillNoPathEffect
)
{
SkASSERT
(
!
oval
.
isEmpty
(
)
)
;
SkASSERT
(
sweepAngle
)
;
path
-
>
reset
(
)
;
path
-
>
setIsVolatile
(
true
)
;
path
-
>
setFillType
(
SkPath
:
:
kWinding_FillType
)
;
if
(
isFillNoPathEffect
&
&
SkScalarAbs
(
sweepAngle
)
>
=
360
.
f
)
{
path
-
>
addOval
(
oval
)
;
return
;
}
if
(
useCenter
)
{
path
-
>
moveTo
(
oval
.
centerX
(
)
oval
.
centerY
(
)
)
;
}
bool
forceMoveTo
=
!
useCenter
;
while
(
sweepAngle
<
=
-
360
.
f
)
{
path
-
>
arcTo
(
oval
startAngle
-
180
.
f
forceMoveTo
)
;
startAngle
-
=
180
.
f
;
path
-
>
arcTo
(
oval
startAngle
-
180
.
f
false
)
;
startAngle
-
=
180
.
f
;
forceMoveTo
=
false
;
sweepAngle
+
=
360
.
f
;
}
while
(
sweepAngle
>
=
360
.
f
)
{
path
-
>
arcTo
(
oval
startAngle
180
.
f
forceMoveTo
)
;
startAngle
+
=
180
.
f
;
path
-
>
arcTo
(
oval
startAngle
180
.
f
false
)
;
startAngle
+
=
180
.
f
;
forceMoveTo
=
false
;
sweepAngle
-
=
360
.
f
;
}
path
-
>
arcTo
(
oval
startAngle
sweepAngle
forceMoveTo
)
;
if
(
useCenter
)
{
path
-
>
close
(
)
;
}
}
