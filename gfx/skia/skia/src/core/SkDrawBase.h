#
ifndef
SkDrawBase_DEFINED
#
define
SkDrawBase_DEFINED
#
include
"
include
/
core
/
SkCanvas
.
h
"
#
include
"
include
/
core
/
SkPaint
.
h
"
#
include
"
include
/
core
/
SkPixmap
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSamplingOptions
.
h
"
#
include
"
include
/
core
/
SkStrokeRec
.
h
"
#
include
"
include
/
private
/
base
/
SkDebug
.
h
"
#
include
"
src
/
base
/
SkZip
.
h
"
#
include
"
src
/
core
/
SkDrawTypes
.
h
"
#
include
"
src
/
core
/
SkGlyphRunPainter
.
h
"
#
include
"
src
/
core
/
SkMask
.
h
"
#
include
<
cstddef
>
class
SkArenaAlloc
;
class
SkBitmap
;
class
SkBlitter
;
class
SkDevice
;
class
SkGlyph
;
class
SkMaskFilter
;
class
SkMatrix
;
class
SkPath
;
class
SkRRect
;
class
SkRasterClip
;
class
SkShader
;
class
SkSurfaceProps
;
struct
SkIRect
;
struct
SkPoint
;
struct
SkRect
;
class
SkDrawBase
:
public
SkGlyphRunListPainterCPU
:
:
BitmapDevicePainter
{
public
:
SkDrawBase
(
)
;
void
drawPaint
(
const
SkPaint
&
)
const
;
void
drawRect
(
const
SkRect
&
prePaintRect
const
SkPaint
&
const
SkMatrix
*
paintMatrix
const
SkRect
*
postPaintRect
)
const
;
void
drawRect
(
const
SkRect
&
rect
const
SkPaint
&
paint
)
const
{
this
-
>
drawRect
(
rect
paint
nullptr
nullptr
)
;
}
void
drawRRect
(
const
SkRRect
&
const
SkPaint
&
)
const
;
void
drawPath
(
const
SkPath
&
path
const
SkPaint
&
paint
const
SkMatrix
*
prePathMatrix
bool
pathIsMutable
)
const
{
this
-
>
drawPath
(
path
paint
prePathMatrix
pathIsMutable
SkDrawCoverage
:
:
kNo
)
;
}
void
drawPathCoverage
(
const
SkPath
&
src
const
SkPaint
&
paint
SkBlitter
*
customBlitter
=
nullptr
)
const
{
bool
isHairline
=
paint
.
getStyle
(
)
=
=
SkPaint
:
:
kStroke_Style
&
&
paint
.
getStrokeWidth
(
)
=
=
0
;
this
-
>
drawPath
(
src
paint
nullptr
false
isHairline
?
SkDrawCoverage
:
:
kNo
:
SkDrawCoverage
:
:
kYes
customBlitter
)
;
}
void
drawDevicePoints
(
SkCanvas
:
:
PointMode
size_t
count
const
SkPoint
[
]
const
SkPaint
&
SkDevice
*
)
const
;
static
bool
DrawToMask
(
const
SkPath
&
devPath
const
SkIRect
&
clipBounds
const
SkMaskFilter
*
const
SkMatrix
*
filterMatrix
SkMaskBuilder
*
dst
SkMaskBuilder
:
:
CreateMode
mode
SkStrokeRec
:
:
InitStyle
style
)
;
enum
RectType
{
kHair_RectType
kFill_RectType
kStroke_RectType
kPath_RectType
}
;
static
RectType
ComputeRectType
(
const
SkRect
&
const
SkPaint
&
const
SkMatrix
&
SkPoint
*
strokeSize
)
;
using
BlitterChooser
=
SkBlitter
*
(
const
SkPixmap
&
dst
const
SkMatrix
&
ctm
const
SkPaint
&
SkArenaAlloc
*
SkDrawCoverage
drawCoverage
sk_sp
<
SkShader
>
clipShader
const
SkSurfaceProps
&
)
;
private
:
void
paintMasks
(
SkZip
<
const
SkGlyph
*
SkPoint
>
accepted
const
SkPaint
&
paint
)
const
override
;
void
drawBitmap
(
const
SkBitmap
&
const
SkMatrix
&
const
SkRect
*
dstOrNull
const
SkSamplingOptions
&
const
SkPaint
&
)
const
override
;
void
drawPath
(
const
SkPath
&
const
SkPaint
&
const
SkMatrix
*
preMatrix
bool
pathIsMutable
SkDrawCoverage
drawCoverage
SkBlitter
*
customBlitter
=
nullptr
)
const
;
void
drawLine
(
const
SkPoint
[
2
]
const
SkPaint
&
)
const
;
void
drawDevPath
(
const
SkPath
&
devPath
const
SkPaint
&
paint
SkDrawCoverage
drawCoverage
SkBlitter
*
customBlitter
bool
doFill
)
const
;
[
[
nodiscard
]
]
bool
computeConservativeLocalClipBounds
(
SkRect
*
bounds
)
const
;
public
:
SkPixmap
fDst
;
BlitterChooser
*
fBlitterChooser
{
nullptr
}
;
const
SkMatrix
*
fCTM
{
nullptr
}
;
const
SkRasterClip
*
fRC
{
nullptr
}
;
const
SkSurfaceProps
*
fProps
{
nullptr
}
;
#
ifdef
SK_DEBUG
void
validate
(
)
const
;
#
else
void
validate
(
)
const
{
}
#
endif
}
;
#
endif
