#
ifndef
SkMessageBus_DEFINED
#
define
SkMessageBus_DEFINED
#
include
<
type_traits
>
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
private
/
base
/
SkMutex
.
h
"
#
include
"
include
/
private
/
base
/
SkNoncopyable
.
h
"
#
include
"
include
/
private
/
base
/
SkOnce
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
"
include
/
private
/
base
/
SkTDArray
.
h
"
template
<
typename
Message
typename
IDType
bool
AllowCopyableMessage
=
true
>
class
SkMessageBus
:
SkNoncopyable
{
public
:
template
<
typename
T
>
struct
is_sk_sp
:
std
:
:
false_type
{
}
;
template
<
typename
T
>
struct
is_sk_sp
<
sk_sp
<
T
>
>
:
std
:
:
true_type
{
}
;
static_assert
(
AllowCopyableMessage
|
|
is_sk_sp
<
Message
>
:
:
value
|
|
!
std
:
:
is_copy_constructible
<
Message
>
:
:
value
"
The
message
type
must
be
sk_sp
or
non
copyable
.
"
)
;
static
void
Post
(
Message
m
)
;
class
Inbox
{
public
:
Inbox
(
IDType
uniqueID
)
;
~
Inbox
(
)
;
IDType
uniqueID
(
)
const
{
return
fUniqueID
;
}
void
poll
(
skia_private
:
:
TArray
<
Message
>
*
out
)
;
private
:
skia_private
:
:
TArray
<
Message
>
fMessages
;
SkMutex
fMessagesMutex
;
const
IDType
fUniqueID
;
friend
class
SkMessageBus
;
void
receive
(
Message
m
)
;
}
;
private
:
SkMessageBus
(
)
;
static
SkMessageBus
*
Get
(
)
;
SkTDArray
<
Inbox
*
>
fInboxes
;
SkMutex
fInboxesMutex
;
}
;
#
define
DECLARE_SKMESSAGEBUS_MESSAGE
(
Message
IDType
AllowCopyableMessage
)
\
template
<
>
\
SkMessageBus
<
Message
IDType
AllowCopyableMessage
>
*
\
SkMessageBus
<
Message
IDType
AllowCopyableMessage
>
:
:
Get
(
)
{
\
static
SkOnce
once
;
\
static
SkMessageBus
<
Message
IDType
AllowCopyableMessage
>
*
bus
;
\
once
(
[
]
{
bus
=
new
SkMessageBus
<
Message
IDType
AllowCopyableMessage
>
(
)
;
}
)
;
\
return
bus
;
\
}
template
<
typename
Message
typename
IDType
bool
AllowCopyableMessage
>
SkMessageBus
<
Message
IDType
AllowCopyableMessage
>
:
:
Inbox
:
:
Inbox
(
IDType
uniqueID
)
:
fUniqueID
(
uniqueID
)
{
auto
*
bus
=
SkMessageBus
<
Message
IDType
AllowCopyableMessage
>
:
:
Get
(
)
;
SkAutoMutexExclusive
lock
(
bus
-
>
fInboxesMutex
)
;
bus
-
>
fInboxes
.
push_back
(
this
)
;
}
template
<
typename
Message
typename
IDType
bool
AllowCopyableMessage
>
SkMessageBus
<
Message
IDType
AllowCopyableMessage
>
:
:
Inbox
:
:
~
Inbox
(
)
{
auto
*
bus
=
SkMessageBus
<
Message
IDType
AllowCopyableMessage
>
:
:
Get
(
)
;
SkAutoMutexExclusive
lock
(
bus
-
>
fInboxesMutex
)
;
for
(
int
i
=
0
;
i
<
bus
-
>
fInboxes
.
size
(
)
;
i
+
+
)
{
if
(
this
=
=
bus
-
>
fInboxes
[
i
]
)
{
bus
-
>
fInboxes
.
removeShuffle
(
i
)
;
break
;
}
}
}
template
<
typename
Message
typename
IDType
bool
AllowCopyableMessage
>
void
SkMessageBus
<
Message
IDType
AllowCopyableMessage
>
:
:
Inbox
:
:
receive
(
Message
m
)
{
SkAutoMutexExclusive
lock
(
fMessagesMutex
)
;
fMessages
.
push_back
(
std
:
:
move
(
m
)
)
;
}
template
<
typename
Message
typename
IDType
bool
AllowCopyableMessage
>
void
SkMessageBus
<
Message
IDType
AllowCopyableMessage
>
:
:
Inbox
:
:
poll
(
skia_private
:
:
TArray
<
Message
>
*
messages
)
{
SkASSERT
(
messages
)
;
messages
-
>
clear
(
)
;
SkAutoMutexExclusive
lock
(
fMessagesMutex
)
;
fMessages
.
swap
(
*
messages
)
;
}
template
<
typename
Message
typename
IDType
bool
AllowCopyableMessage
>
SkMessageBus
<
Message
IDType
AllowCopyableMessage
>
:
:
SkMessageBus
(
)
=
default
;
template
<
typename
Message
typename
IDType
bool
AllowCopyableMessage
>
void
SkMessageBus
<
Message
IDType
AllowCopyableMessage
>
:
:
Post
(
Message
m
)
{
auto
*
bus
=
SkMessageBus
<
Message
IDType
AllowCopyableMessage
>
:
:
Get
(
)
;
SkAutoMutexExclusive
lock
(
bus
-
>
fInboxesMutex
)
;
for
(
int
i
=
0
;
i
<
bus
-
>
fInboxes
.
size
(
)
;
i
+
+
)
{
if
(
SkShouldPostMessageToBus
(
m
bus
-
>
fInboxes
[
i
]
-
>
fUniqueID
)
)
{
if
constexpr
(
AllowCopyableMessage
)
{
bus
-
>
fInboxes
[
i
]
-
>
receive
(
m
)
;
}
else
{
if
constexpr
(
is_sk_sp
<
Message
>
:
:
value
)
{
SkASSERT
(
m
-
>
unique
(
)
)
;
}
bus
-
>
fInboxes
[
i
]
-
>
receive
(
std
:
:
move
(
m
)
)
;
break
;
}
}
}
if
constexpr
(
is_sk_sp
<
Message
>
:
:
value
&
&
!
AllowCopyableMessage
)
{
SkASSERT
(
!
m
)
;
}
}
#
endif
