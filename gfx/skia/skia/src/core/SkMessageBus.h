#
ifndef
SkMessageBus_DEFINED
#
define
SkMessageBus_DEFINED
#
include
"
SkMutex
.
h
"
#
include
"
SkOncePtr
.
h
"
#
include
"
SkTArray
.
h
"
#
include
"
SkTDArray
.
h
"
#
include
"
SkTypes
.
h
"
template
<
typename
Message
>
class
SkMessageBus
:
SkNoncopyable
{
public
:
static
void
Post
(
const
Message
&
m
)
;
class
Inbox
{
public
:
Inbox
(
)
;
~
Inbox
(
)
;
void
poll
(
SkTArray
<
Message
>
*
out
)
;
private
:
SkTArray
<
Message
>
fMessages
;
SkMutex
fMessagesMutex
;
friend
class
SkMessageBus
;
void
receive
(
const
Message
&
m
)
;
}
;
private
:
SkMessageBus
(
)
;
static
SkMessageBus
*
Get
(
)
;
SkTDArray
<
Inbox
*
>
fInboxes
;
SkMutex
fInboxesMutex
;
}
;
#
define
DECLARE_SKMESSAGEBUS_MESSAGE
(
Message
)
\
SK_DECLARE_STATIC_ONCE_PTR
(
SkMessageBus
<
Message
>
bus
)
;
\
template
<
>
\
SkMessageBus
<
Message
>
*
SkMessageBus
<
Message
>
:
:
Get
(
)
{
\
return
bus
.
get
(
[
]
{
return
new
SkMessageBus
<
Message
>
(
)
;
}
)
;
\
}
template
<
typename
Message
>
SkMessageBus
<
Message
>
:
:
Inbox
:
:
Inbox
(
)
{
SkMessageBus
<
Message
>
*
bus
=
SkMessageBus
<
Message
>
:
:
Get
(
)
;
SkAutoMutexAcquire
lock
(
bus
-
>
fInboxesMutex
)
;
bus
-
>
fInboxes
.
push
(
this
)
;
}
template
<
typename
Message
>
SkMessageBus
<
Message
>
:
:
Inbox
:
:
~
Inbox
(
)
{
SkMessageBus
<
Message
>
*
bus
=
SkMessageBus
<
Message
>
:
:
Get
(
)
;
SkAutoMutexAcquire
lock
(
bus
-
>
fInboxesMutex
)
;
for
(
int
i
=
0
;
i
<
bus
-
>
fInboxes
.
count
(
)
;
i
+
+
)
{
if
(
this
=
=
bus
-
>
fInboxes
[
i
]
)
{
bus
-
>
fInboxes
.
removeShuffle
(
i
)
;
break
;
}
}
}
template
<
typename
Message
>
void
SkMessageBus
<
Message
>
:
:
Inbox
:
:
receive
(
const
Message
&
m
)
{
SkAutoMutexAcquire
lock
(
fMessagesMutex
)
;
fMessages
.
push_back
(
m
)
;
}
template
<
typename
Message
>
void
SkMessageBus
<
Message
>
:
:
Inbox
:
:
poll
(
SkTArray
<
Message
>
*
messages
)
{
SkASSERT
(
messages
)
;
messages
-
>
reset
(
)
;
SkAutoMutexAcquire
lock
(
fMessagesMutex
)
;
fMessages
.
swap
(
messages
)
;
}
template
<
typename
Message
>
SkMessageBus
<
Message
>
:
:
SkMessageBus
(
)
{
}
template
<
typename
Message
>
void
SkMessageBus
<
Message
>
:
:
Post
(
const
Message
&
m
)
{
SkMessageBus
<
Message
>
*
bus
=
SkMessageBus
<
Message
>
:
:
Get
(
)
;
SkAutoMutexAcquire
lock
(
bus
-
>
fInboxesMutex
)
;
for
(
int
i
=
0
;
i
<
bus
-
>
fInboxes
.
count
(
)
;
i
+
+
)
{
bus
-
>
fInboxes
[
i
]
-
>
receive
(
m
)
;
}
}
#
endif
