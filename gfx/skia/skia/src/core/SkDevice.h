#
ifndef
SkDevice_DEFINED
#
define
SkDevice_DEFINED
#
include
"
SkRefCnt
.
h
"
#
include
"
SkCanvas
.
h
"
#
include
"
SkColor
.
h
"
#
include
"
SkImage
.
h
"
#
include
"
SkSurfaceProps
.
h
"
class
SkBitmap
;
class
SkDrawFilter
;
struct
SkDrawShadowRec
;
class
SkImageFilterCache
;
struct
SkIRect
;
class
SkMatrix
;
class
SkRasterHandleAllocator
;
class
SkRegion
;
class
SkSpecialImage
;
class
SkBaseDevice
:
public
SkRefCnt
{
public
:
SkBaseDevice
(
const
SkImageInfo
&
const
SkSurfaceProps
&
)
;
const
SkImageInfo
&
imageInfo
(
)
const
{
return
fInfo
;
}
const
SkSurfaceProps
&
surfaceProps
(
)
const
{
return
fSurfaceProps
;
}
void
getGlobalBounds
(
SkIRect
*
bounds
)
const
{
SkASSERT
(
bounds
)
;
const
SkIPoint
&
origin
=
this
-
>
getOrigin
(
)
;
bounds
-
>
setXYWH
(
origin
.
x
(
)
origin
.
y
(
)
this
-
>
width
(
)
this
-
>
height
(
)
)
;
}
SkIRect
getGlobalBounds
(
)
const
{
SkIRect
bounds
;
this
-
>
getGlobalBounds
(
&
bounds
)
;
return
bounds
;
}
int
width
(
)
const
{
return
this
-
>
imageInfo
(
)
.
width
(
)
;
}
int
height
(
)
const
{
return
this
-
>
imageInfo
(
)
.
height
(
)
;
}
bool
isOpaque
(
)
const
{
return
this
-
>
imageInfo
(
)
.
isOpaque
(
)
;
}
bool
writePixels
(
const
SkPixmap
&
int
x
int
y
)
;
bool
accessPixels
(
SkPixmap
*
pmap
)
;
bool
peekPixels
(
SkPixmap
*
)
;
const
SkIPoint
&
getOrigin
(
)
const
{
return
fOrigin
;
}
virtual
void
*
getRasterHandle
(
)
const
{
return
nullptr
;
}
void
save
(
)
{
this
-
>
onSave
(
)
;
}
void
restore
(
const
SkMatrix
&
ctm
)
{
this
-
>
onRestore
(
)
;
this
-
>
setGlobalCTM
(
ctm
)
;
}
void
clipRect
(
const
SkRect
&
rect
SkClipOp
op
bool
aa
)
{
this
-
>
onClipRect
(
rect
op
aa
)
;
}
void
clipRRect
(
const
SkRRect
&
rrect
SkClipOp
op
bool
aa
)
{
this
-
>
onClipRRect
(
rrect
op
aa
)
;
}
void
clipPath
(
const
SkPath
&
path
SkClipOp
op
bool
aa
)
{
this
-
>
onClipPath
(
path
op
aa
)
;
}
void
clipRegion
(
const
SkRegion
&
region
SkClipOp
op
)
{
this
-
>
onClipRegion
(
region
op
)
;
}
void
androidFramework_setDeviceClipRestriction
(
SkIRect
*
mutableClipRestriction
)
{
this
-
>
onSetDeviceClipRestriction
(
mutableClipRestriction
)
;
}
bool
clipIsWideOpen
(
)
const
;
const
SkMatrix
&
ctm
(
)
const
{
return
fCTM
;
}
void
setCTM
(
const
SkMatrix
&
ctm
)
{
fCTM
=
ctm
;
}
void
setGlobalCTM
(
const
SkMatrix
&
ctm
)
;
virtual
void
validateDevBounds
(
const
SkIRect
&
)
{
}
virtual
sk_sp
<
SkImage
>
snapshotImage
(
)
{
return
nullptr
;
}
protected
:
enum
TileUsage
{
kPossible_TileUsage
kNever_TileUsage
}
;
struct
TextFlags
{
uint32_t
fFlags
;
}
;
uint32_t
filterTextFlags
(
const
SkPaint
&
)
const
;
virtual
bool
onShouldDisableLCD
(
const
SkPaint
&
)
const
{
return
false
;
}
virtual
void
onSave
(
)
{
}
virtual
void
onRestore
(
)
{
}
virtual
void
onClipRect
(
const
SkRect
&
rect
SkClipOp
bool
aa
)
{
}
virtual
void
onClipRRect
(
const
SkRRect
&
rrect
SkClipOp
bool
aa
)
{
}
virtual
void
onClipPath
(
const
SkPath
&
path
SkClipOp
bool
aa
)
{
}
virtual
void
onClipRegion
(
const
SkRegion
&
deviceRgn
SkClipOp
)
{
}
virtual
void
onSetDeviceClipRestriction
(
SkIRect
*
mutableClipRestriction
)
{
}
virtual
bool
onClipIsAA
(
)
const
=
0
;
virtual
void
onAsRgnClip
(
SkRegion
*
)
const
=
0
;
enum
ClipType
{
kEmpty_ClipType
kRect_ClipType
kComplex_ClipType
}
;
virtual
ClipType
onGetClipType
(
)
const
=
0
;
virtual
void
drawPaint
(
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawPoints
(
SkCanvas
:
:
PointMode
mode
size_t
count
const
SkPoint
[
]
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawRect
(
const
SkRect
&
r
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawRegion
(
const
SkRegion
&
r
const
SkPaint
&
paint
)
;
virtual
void
drawOval
(
const
SkRect
&
oval
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawArc
(
const
SkRect
&
oval
SkScalar
startAngle
SkScalar
sweepAngle
bool
useCenter
const
SkPaint
&
paint
)
;
virtual
void
drawRRect
(
const
SkRRect
&
rr
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawDRRect
(
const
SkRRect
&
outer
const
SkRRect
&
inner
const
SkPaint
&
)
;
virtual
void
drawPath
(
const
SkPath
&
path
const
SkPaint
&
paint
const
SkMatrix
*
prePathMatrix
=
nullptr
bool
pathIsMutable
=
false
)
=
0
;
virtual
void
drawBitmap
(
const
SkBitmap
&
bitmap
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawSprite
(
const
SkBitmap
&
bitmap
int
x
int
y
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawBitmapRect
(
const
SkBitmap
&
const
SkRect
*
srcOrNull
const
SkRect
&
dst
const
SkPaint
&
paint
SkCanvas
:
:
SrcRectConstraint
)
=
0
;
virtual
void
drawBitmapNine
(
const
SkBitmap
&
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
&
)
;
virtual
void
drawBitmapLattice
(
const
SkBitmap
&
const
SkCanvas
:
:
Lattice
&
const
SkRect
&
dst
const
SkPaint
&
)
;
virtual
void
drawImage
(
const
SkImage
*
SkScalar
x
SkScalar
y
const
SkPaint
&
)
;
virtual
void
drawImageRect
(
const
SkImage
*
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
&
SkCanvas
:
:
SrcRectConstraint
)
;
virtual
void
drawImageNine
(
const
SkImage
*
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
&
)
;
virtual
void
drawImageLattice
(
const
SkImage
*
const
SkCanvas
:
:
Lattice
&
const
SkRect
&
dst
const
SkPaint
&
)
;
virtual
void
drawText
(
const
void
*
text
size_t
len
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawPosText
(
const
void
*
text
size_t
len
const
SkScalar
pos
[
]
int
scalarsPerPos
const
SkPoint
&
offset
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawVertices
(
const
SkVertices
*
SkBlendMode
const
SkPaint
&
)
=
0
;
virtual
void
drawShadow
(
const
SkPath
&
const
SkDrawShadowRec
&
)
;
virtual
void
drawTextBlob
(
const
SkTextBlob
*
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
SkDrawFilter
*
drawFilter
)
;
virtual
void
drawPatch
(
const
SkPoint
cubics
[
12
]
const
SkColor
colors
[
4
]
const
SkPoint
texCoords
[
4
]
SkBlendMode
bool
interpColorsLinearly
const
SkPaint
&
paint
)
;
virtual
void
drawAtlas
(
const
SkImage
*
atlas
const
SkRSXform
[
]
const
SkRect
[
]
const
SkColor
[
]
int
count
SkBlendMode
const
SkPaint
&
)
;
virtual
void
drawAnnotation
(
const
SkRect
&
const
char
[
]
SkData
*
)
{
}
virtual
void
drawDevice
(
SkBaseDevice
*
int
x
int
y
const
SkPaint
&
)
=
0
;
virtual
void
drawTextOnPath
(
const
void
*
text
size_t
len
const
SkPath
&
const
SkMatrix
*
const
SkPaint
&
)
;
virtual
void
drawTextRSXform
(
const
void
*
text
size_t
len
const
SkRSXform
[
]
const
SkPaint
&
)
;
virtual
void
drawSpecial
(
SkSpecialImage
*
int
x
int
y
const
SkPaint
&
SkImage
*
clipImage
const
SkMatrix
&
clipMatrix
)
;
virtual
sk_sp
<
SkSpecialImage
>
makeSpecial
(
const
SkBitmap
&
)
;
virtual
sk_sp
<
SkSpecialImage
>
makeSpecial
(
const
SkImage
*
)
;
virtual
sk_sp
<
SkSpecialImage
>
snapSpecial
(
)
;
bool
readPixels
(
const
SkPixmap
&
int
x
int
y
)
;
virtual
GrContext
*
context
(
)
const
{
return
nullptr
;
}
virtual
sk_sp
<
SkSurface
>
makeSurface
(
const
SkImageInfo
&
const
SkSurfaceProps
&
)
;
virtual
bool
onPeekPixels
(
SkPixmap
*
)
{
return
false
;
}
virtual
bool
onReadPixels
(
const
SkPixmap
&
int
x
int
y
)
;
virtual
bool
onWritePixels
(
const
SkPixmap
&
int
x
int
y
)
;
virtual
bool
onAccessPixels
(
SkPixmap
*
)
{
return
false
;
}
struct
CreateInfo
{
static
SkPixelGeometry
AdjustGeometry
(
const
SkImageInfo
&
TileUsage
SkPixelGeometry
bool
preserveLCDText
)
;
CreateInfo
(
const
SkImageInfo
&
info
TileUsage
tileUsage
SkPixelGeometry
geo
)
:
fInfo
(
info
)
fTileUsage
(
tileUsage
)
fPixelGeometry
(
AdjustGeometry
(
info
tileUsage
geo
false
)
)
{
}
CreateInfo
(
const
SkImageInfo
&
info
TileUsage
tileUsage
SkPixelGeometry
geo
bool
preserveLCDText
SkRasterHandleAllocator
*
allocator
)
:
fInfo
(
info
)
fTileUsage
(
tileUsage
)
fPixelGeometry
(
AdjustGeometry
(
info
tileUsage
geo
preserveLCDText
)
)
fAllocator
(
allocator
)
{
}
const
SkImageInfo
fInfo
;
const
TileUsage
fTileUsage
;
const
SkPixelGeometry
fPixelGeometry
;
SkRasterHandleAllocator
*
fAllocator
=
nullptr
;
}
;
virtual
SkBaseDevice
*
onCreateDevice
(
const
CreateInfo
&
const
SkPaint
*
)
{
return
nullptr
;
}
static
void
LogDrawScaleFactor
(
const
SkMatrix
&
SkFilterQuality
)
;
private
:
friend
class
SkAndroidFrameworkUtils
;
friend
class
SkCanvas
;
friend
struct
DeviceCM
;
friend
class
SkDraw
;
friend
class
SkDrawIter
;
friend
class
SkDeviceFilteredPaint
;
friend
class
SkSurface_Raster
;
friend
class
DeviceTestingAccess
;
virtual
void
replaceBitmapBackendForRasterSurface
(
const
SkBitmap
&
)
{
}
virtual
bool
forceConservativeRasterClip
(
)
const
{
return
false
;
}
virtual
GrRenderTargetContext
*
accessRenderTargetContext
(
)
{
return
nullptr
;
}
void
setOrigin
(
const
SkMatrix
&
ctm
int
x
int
y
)
;
virtual
void
flush
(
)
{
}
virtual
SkImageFilterCache
*
getImageFilterCache
(
)
{
return
nullptr
;
}
friend
class
SkNoPixelsDevice
;
friend
class
SkBitmapDevice
;
void
privateResize
(
int
w
int
h
)
{
*
const_cast
<
SkImageInfo
*
>
(
&
fInfo
)
=
fInfo
.
makeWH
(
w
h
)
;
}
SkIPoint
fOrigin
;
const
SkImageInfo
fInfo
;
const
SkSurfaceProps
fSurfaceProps
;
SkMatrix
fCTM
;
typedef
SkRefCnt
INHERITED
;
}
;
class
SkAutoDeviceCTMRestore
:
SkNoncopyable
{
public
:
SkAutoDeviceCTMRestore
(
SkBaseDevice
*
device
const
SkMatrix
&
ctm
)
:
fDevice
(
device
)
fPrevCTM
(
device
-
>
ctm
(
)
)
{
fDevice
-
>
setCTM
(
ctm
)
;
}
~
SkAutoDeviceCTMRestore
(
)
{
fDevice
-
>
setCTM
(
fPrevCTM
)
;
}
private
:
SkBaseDevice
*
fDevice
;
const
SkMatrix
fPrevCTM
;
}
;
#
endif
