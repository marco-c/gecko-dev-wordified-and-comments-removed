#
include
"
include
/
core
/
SkPathUtils
.
h
"
#
include
"
include
/
core
/
SkMatrix
.
h
"
#
include
"
include
/
core
/
SkPaint
.
h
"
#
include
"
include
/
core
/
SkPath
.
h
"
#
include
"
include
/
core
/
SkPathEffect
.
h
"
#
include
"
include
/
core
/
SkStrokeRec
.
h
"
#
include
"
src
/
core
/
SkMatrixPriv
.
h
"
namespace
skpathutils
{
bool
FillPathWithPaint
(
const
SkPath
&
src
const
SkPaint
&
paint
SkPath
*
dst
)
{
return
skpathutils
:
:
FillPathWithPaint
(
src
paint
dst
nullptr
1
)
;
}
bool
FillPathWithPaint
(
const
SkPath
&
src
const
SkPaint
&
paint
SkPath
*
dst
const
SkRect
*
cullRect
SkScalar
resScale
)
{
return
skpathutils
:
:
FillPathWithPaint
(
src
paint
dst
cullRect
SkMatrix
:
:
Scale
(
resScale
resScale
)
)
;
}
bool
FillPathWithPaint
(
const
SkPath
&
src
const
SkPaint
&
paint
SkPath
*
dst
const
SkRect
*
cullRect
const
SkMatrix
&
ctm
)
{
if
(
!
src
.
isFinite
(
)
)
{
dst
-
>
reset
(
)
;
return
false
;
}
const
SkScalar
resScale
=
SkMatrixPriv
:
:
ComputeResScaleForStroking
(
ctm
)
;
SkStrokeRec
rec
(
paint
resScale
)
;
#
if
defined
(
SK_BUILD_FOR_FUZZER
)
if
(
rec
.
getStyle
(
)
=
=
SkStrokeRec
:
:
Style
:
:
kStroke_Style
&
&
rec
.
getWidth
(
)
<
0
.
001
)
{
return
false
;
}
#
endif
const
SkPath
*
srcPtr
=
&
src
;
SkPath
tmpPath
;
SkPathEffect
*
pe
=
paint
.
getPathEffect
(
)
;
if
(
pe
&
&
pe
-
>
filterPath
(
&
tmpPath
src
&
rec
cullRect
ctm
)
)
{
srcPtr
=
&
tmpPath
;
}
if
(
!
rec
.
applyToPath
(
dst
*
srcPtr
)
)
{
if
(
srcPtr
=
=
&
tmpPath
)
{
dst
-
>
swap
(
tmpPath
)
;
}
else
{
*
dst
=
*
srcPtr
;
}
}
if
(
!
dst
-
>
isFinite
(
)
)
{
dst
-
>
reset
(
)
;
return
false
;
}
return
!
rec
.
isHairlineStyle
(
)
;
}
}
bool
FillPathWithPaint
(
const
SkPath
&
src
const
SkPaint
&
paint
SkPath
*
dst
const
SkRect
*
cullRect
SkScalar
resScale
)
{
return
skpathutils
:
:
FillPathWithPaint
(
src
paint
dst
cullRect
resScale
)
;
}
bool
FillPathWithPaint
(
const
SkPath
&
src
const
SkPaint
&
paint
SkPath
*
dst
const
SkRect
*
cullRect
const
SkMatrix
&
ctm
)
{
return
skpathutils
:
:
FillPathWithPaint
(
src
paint
dst
cullRect
ctm
)
;
}
bool
FillPathWithPaint
(
const
SkPath
&
src
const
SkPaint
&
paint
SkPath
*
dst
)
{
return
skpathutils
:
:
FillPathWithPaint
(
src
paint
dst
)
;
}
