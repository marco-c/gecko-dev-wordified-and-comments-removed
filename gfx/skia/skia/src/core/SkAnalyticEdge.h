#
ifndef
SkAnalyticEdge_DEFINED
#
define
SkAnalyticEdge_DEFINED
#
include
"
include
/
private
/
base
/
SkAssert
.
h
"
#
include
"
include
/
private
/
base
/
SkDebug
.
h
"
#
include
"
include
/
private
/
base
/
SkFixed
.
h
"
#
include
"
include
/
private
/
base
/
SkSafe32
.
h
"
#
include
"
src
/
core
/
SkEdge
.
h
"
#
include
<
cstdint
>
struct
SkPoint
;
struct
SkAnalyticEdge
{
enum
Type
{
kLine_Type
kQuad_Type
kCubic_Type
}
;
SkAnalyticEdge
*
fNext
;
SkAnalyticEdge
*
fPrev
;
SkFixed
fX
;
SkFixed
fDX
;
SkFixed
fUpperX
;
SkFixed
fY
;
SkFixed
fUpperY
;
SkFixed
fLowerY
;
SkFixed
fDY
;
Type
fEdgeType
;
int8_t
fCurveCount
;
uint8_t
fCurveShift
;
uint8_t
fCubicDShift
;
int8_t
fWinding
;
static
const
int
kDefaultAccuracy
=
2
;
static
inline
SkFixed
SnapY
(
SkFixed
y
)
{
const
int
accuracy
=
kDefaultAccuracy
;
return
(
(
unsigned
)
y
+
(
SK_Fixed1
>
>
(
accuracy
+
1
)
)
)
>
>
(
16
-
accuracy
)
<
<
(
16
-
accuracy
)
;
}
inline
void
goY
(
SkFixed
y
)
{
if
(
y
=
=
fY
+
SK_Fixed1
)
{
fX
=
fX
+
fDX
;
fY
=
y
;
}
else
if
(
y
!
=
fY
)
{
fX
=
fUpperX
+
SkFixedMul
(
fDX
y
-
fUpperY
)
;
fY
=
y
;
}
}
inline
void
goY
(
SkFixed
y
int
yShift
)
{
SkASSERT
(
yShift
>
=
0
&
&
yShift
<
=
kDefaultAccuracy
)
;
SkASSERT
(
fDX
=
=
0
|
|
y
-
fY
=
=
SK_Fixed1
>
>
yShift
)
;
fY
=
y
;
fX
+
=
fDX
>
>
yShift
;
}
bool
setLine
(
const
SkPoint
&
p0
const
SkPoint
&
p1
)
;
bool
updateLine
(
SkFixed
ax
SkFixed
ay
SkFixed
bx
SkFixed
by
SkFixed
slope
)
;
bool
update
(
SkFixed
last_y
bool
sortY
=
true
)
;
#
ifdef
SK_DEBUG
void
dump
(
)
const
{
SkDebugf
(
"
edge
:
upperY
:
%
d
lowerY
:
%
d
y
:
%
g
x
:
%
g
dx
:
%
g
w
:
%
d
\
n
"
fUpperY
fLowerY
SkFixedToFloat
(
fY
)
SkFixedToFloat
(
fX
)
SkFixedToFloat
(
fDX
)
fWinding
)
;
}
void
validate
(
)
const
{
SkASSERT
(
fPrev
&
&
fNext
)
;
SkASSERT
(
fPrev
-
>
fNext
=
=
this
)
;
SkASSERT
(
fNext
-
>
fPrev
=
=
this
)
;
SkASSERT
(
fUpperY
<
fLowerY
)
;
SkASSERT
(
SkAbs32
(
fWinding
)
=
=
1
)
;
}
#
endif
}
;
struct
SkAnalyticQuadraticEdge
:
public
SkAnalyticEdge
{
SkQuadraticEdge
fQEdge
;
SkFixed
fSnappedX
fSnappedY
;
bool
setQuadratic
(
const
SkPoint
pts
[
3
]
)
;
bool
updateQuadratic
(
)
;
inline
void
keepContinuous
(
)
{
SkASSERT
(
SkAbs32
(
fX
-
SkFixedMul
(
fY
-
fSnappedY
fDX
)
-
fSnappedX
)
<
SK_Fixed1
)
;
SkASSERT
(
SkAbs32
(
fY
-
fSnappedY
)
<
SK_Fixed1
)
;
fSnappedX
=
fX
;
fSnappedY
=
fY
;
}
}
;
struct
SkAnalyticCubicEdge
:
public
SkAnalyticEdge
{
SkCubicEdge
fCEdge
;
SkFixed
fSnappedY
;
bool
setCubic
(
const
SkPoint
pts
[
4
]
bool
sortY
=
true
)
;
bool
updateCubic
(
bool
sortY
=
true
)
;
inline
void
keepContinuous
(
)
{
SkASSERT
(
SkAbs32
(
fX
-
SkFixedMul
(
fDX
fY
-
SnapY
(
fCEdge
.
fCy
)
)
-
fCEdge
.
fCx
)
<
SK_Fixed1
)
;
fCEdge
.
fCx
=
fX
;
fSnappedY
=
fY
;
}
}
;
#
endif
