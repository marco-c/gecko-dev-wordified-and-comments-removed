#
ifndef
SkColorSpacePriv_DEFINED
#
define
SkColorSpacePriv_DEFINED
#
include
<
math
.
h
>
#
include
"
include
/
core
/
SkColorSpace
.
h
"
#
include
"
include
/
private
/
SkFixed
.
h
"
#
define
SkColorSpacePrintf
(
.
.
.
)
static
constexpr
skcms_Matrix3x3
gNarrow_toXYZD50
=
{
{
{
0
.
190974f
0
.
404865f
0
.
368380f
}
{
0
.
114746f
0
.
582937f
0
.
302318f
}
{
0
.
032925f
0
.
153615f
0
.
638669f
}
}
}
;
static
inline
bool
color_space_almost_equal
(
float
a
float
b
)
{
return
SkTAbs
(
a
-
b
)
<
0
.
01f
;
}
static
inline
bool
transfer_fn_almost_equal
(
float
a
float
b
)
{
return
SkTAbs
(
a
-
b
)
<
0
.
001f
;
}
enum
TFKind
{
Bad_TF
sRGBish_TF
PQish_TF
HLGish_TF
HLGinvish_TF
}
;
static
inline
TFKind
classify_transfer_fn
(
const
skcms_TransferFunction
&
tf
)
{
if
(
tf
.
g
<
0
&
&
(
int
)
tf
.
g
=
=
tf
.
g
)
{
switch
(
-
(
int
)
tf
.
g
)
{
case
PQish_TF
:
return
PQish_TF
;
case
HLGish_TF
:
return
HLGish_TF
;
case
HLGinvish_TF
:
return
HLGinvish_TF
;
}
return
Bad_TF
;
}
if
(
sk_float_isfinite
(
tf
.
a
+
tf
.
b
+
tf
.
c
+
tf
.
d
+
tf
.
e
+
tf
.
f
+
tf
.
g
)
&
&
tf
.
a
>
=
0
&
&
tf
.
c
>
=
0
&
&
tf
.
d
>
=
0
&
&
tf
.
g
>
=
0
&
&
tf
.
a
*
tf
.
d
+
tf
.
b
>
=
0
)
{
return
sRGBish_TF
;
}
return
Bad_TF
;
}
static
inline
bool
is_almost_srgb
(
const
skcms_TransferFunction
&
coeffs
)
{
return
transfer_fn_almost_equal
(
SkNamedTransferFn
:
:
kSRGB
.
a
coeffs
.
a
)
&
&
transfer_fn_almost_equal
(
SkNamedTransferFn
:
:
kSRGB
.
b
coeffs
.
b
)
&
&
transfer_fn_almost_equal
(
SkNamedTransferFn
:
:
kSRGB
.
c
coeffs
.
c
)
&
&
transfer_fn_almost_equal
(
SkNamedTransferFn
:
:
kSRGB
.
d
coeffs
.
d
)
&
&
transfer_fn_almost_equal
(
SkNamedTransferFn
:
:
kSRGB
.
e
coeffs
.
e
)
&
&
transfer_fn_almost_equal
(
SkNamedTransferFn
:
:
kSRGB
.
f
coeffs
.
f
)
&
&
transfer_fn_almost_equal
(
SkNamedTransferFn
:
:
kSRGB
.
g
coeffs
.
g
)
;
}
static
inline
bool
is_almost_2dot2
(
const
skcms_TransferFunction
&
coeffs
)
{
return
transfer_fn_almost_equal
(
1
.
0f
coeffs
.
a
)
&
&
transfer_fn_almost_equal
(
0
.
0f
coeffs
.
b
)
&
&
transfer_fn_almost_equal
(
0
.
0f
coeffs
.
e
)
&
&
transfer_fn_almost_equal
(
2
.
2f
coeffs
.
g
)
&
&
coeffs
.
d
<
=
0
.
0f
;
}
static
inline
bool
is_almost_linear
(
const
skcms_TransferFunction
&
coeffs
)
{
const
bool
linearExp
=
transfer_fn_almost_equal
(
1
.
0f
coeffs
.
a
)
&
&
transfer_fn_almost_equal
(
0
.
0f
coeffs
.
b
)
&
&
transfer_fn_almost_equal
(
0
.
0f
coeffs
.
e
)
&
&
transfer_fn_almost_equal
(
1
.
0f
coeffs
.
g
)
&
&
coeffs
.
d
<
=
0
.
0f
;
const
bool
linearFn
=
transfer_fn_almost_equal
(
1
.
0f
coeffs
.
c
)
&
&
transfer_fn_almost_equal
(
0
.
0f
coeffs
.
f
)
&
&
coeffs
.
d
>
=
1
.
0f
;
return
linearExp
|
|
linearFn
;
}
SkColorSpace
*
sk_srgb_singleton
(
)
;
SkColorSpace
*
sk_srgb_linear_singleton
(
)
;
#
endif
