#
ifndef
SkScopeExit_DEFINED
#
define
SkScopeExit_DEFINED
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
private
/
SkMacros
.
h
"
#
include
<
functional
>
class
SkScopeExit
{
public
:
SkScopeExit
(
)
=
default
;
SkScopeExit
(
std
:
:
function
<
void
(
)
>
f
)
:
fFn
(
std
:
:
move
(
f
)
)
{
}
SkScopeExit
(
SkScopeExit
&
&
that
)
:
fFn
(
std
:
:
move
(
that
.
fFn
)
)
{
}
~
SkScopeExit
(
)
{
if
(
fFn
)
{
fFn
(
)
;
}
}
void
clear
(
)
{
fFn
=
{
}
;
}
SkScopeExit
&
operator
=
(
SkScopeExit
&
&
that
)
{
fFn
=
std
:
:
move
(
that
.
fFn
)
;
return
*
this
;
}
private
:
std
:
:
function
<
void
(
)
>
fFn
;
SkScopeExit
(
const
SkScopeExit
&
)
=
delete
;
SkScopeExit
&
operator
=
(
const
SkScopeExit
&
)
=
delete
;
}
;
#
define
SK_AT_SCOPE_EXIT
(
stmt
)
\
SkScopeExit
SK_MACRO_APPEND_LINE
(
at_scope_exit_
)
(
[
&
]
(
)
{
stmt
;
}
)
#
endif
