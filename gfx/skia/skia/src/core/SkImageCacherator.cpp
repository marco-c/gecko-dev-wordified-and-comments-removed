#
include
"
SkBitmap
.
h
"
#
include
"
SkBitmapCache
.
h
"
#
include
"
SkImage_Base
.
h
"
#
include
"
SkImageCacherator
.
h
"
#
include
"
SkMallocPixelRef
.
h
"
#
include
"
SkNextID
.
h
"
#
include
"
SkPixelRef
.
h
"
#
include
"
SkResourceCache
.
h
"
#
if
SK_SUPPORT_GPU
#
include
"
GrContext
.
h
"
#
include
"
GrGpuResourcePriv
.
h
"
#
include
"
GrImageIDTextureAdjuster
.
h
"
#
include
"
GrResourceKey
.
h
"
#
include
"
GrTextureParams
.
h
"
#
include
"
GrYUVProvider
.
h
"
#
include
"
SkGr
.
h
"
#
include
"
SkGrPriv
.
h
"
#
endif
SkImageCacherator
*
SkImageCacherator
:
:
NewFromGenerator
(
SkImageGenerator
*
gen
const
SkIRect
*
subset
)
{
if
(
!
gen
)
{
return
nullptr
;
}
SkAutoTDelete
<
SkImageGenerator
>
genHolder
(
gen
)
;
const
SkImageInfo
&
info
=
gen
-
>
getInfo
(
)
;
if
(
info
.
isEmpty
(
)
)
{
return
nullptr
;
}
uint32_t
uniqueID
=
gen
-
>
uniqueID
(
)
;
const
SkIRect
bounds
=
SkIRect
:
:
MakeWH
(
info
.
width
(
)
info
.
height
(
)
)
;
if
(
subset
)
{
if
(
!
bounds
.
contains
(
*
subset
)
)
{
return
nullptr
;
}
if
(
*
subset
!
=
bounds
)
{
uniqueID
=
SkNextID
:
:
ImageID
(
)
;
}
}
else
{
subset
=
&
bounds
;
}
genHolder
.
detach
(
)
;
return
new
SkImageCacherator
(
gen
gen
-
>
getInfo
(
)
.
makeWH
(
subset
-
>
width
(
)
subset
-
>
height
(
)
)
SkIPoint
:
:
Make
(
subset
-
>
x
(
)
subset
-
>
y
(
)
)
uniqueID
)
;
}
SkImageCacherator
:
:
SkImageCacherator
(
SkImageGenerator
*
gen
const
SkImageInfo
&
info
const
SkIPoint
&
origin
uint32_t
uniqueID
)
:
fNotThreadSafeGenerator
(
gen
)
fInfo
(
info
)
fOrigin
(
origin
)
fUniqueID
(
uniqueID
)
{
}
SkData
*
SkImageCacherator
:
:
refEncoded
(
GrContext
*
ctx
)
{
ScopedGenerator
generator
(
this
)
;
return
generator
-
>
refEncodedData
(
ctx
)
;
}
static
bool
check_output_bitmap
(
const
SkBitmap
&
bitmap
uint32_t
expectedID
)
{
SkASSERT
(
bitmap
.
getGenerationID
(
)
=
=
expectedID
)
;
SkASSERT
(
bitmap
.
isImmutable
(
)
)
;
SkASSERT
(
bitmap
.
getPixels
(
)
)
;
return
true
;
}
bool
SkImageCacherator
:
:
generateBitmap
(
SkBitmap
*
bitmap
)
{
SkBitmap
:
:
Allocator
*
allocator
=
SkResourceCache
:
:
GetAllocator
(
)
;
ScopedGenerator
generator
(
this
)
;
const
SkImageInfo
&
genInfo
=
generator
-
>
getInfo
(
)
;
if
(
fInfo
.
dimensions
(
)
=
=
genInfo
.
dimensions
(
)
)
{
SkASSERT
(
fOrigin
.
x
(
)
=
=
0
&
&
fOrigin
.
y
(
)
=
=
0
)
;
return
generator
-
>
tryGenerateBitmap
(
bitmap
fInfo
allocator
)
;
}
else
{
SkBitmap
full
;
if
(
!
generator
-
>
tryGenerateBitmap
(
&
full
genInfo
allocator
)
)
{
return
false
;
}
if
(
!
bitmap
-
>
tryAllocPixels
(
fInfo
nullptr
full
.
getColorTable
(
)
)
)
{
return
false
;
}
return
full
.
readPixels
(
bitmap
-
>
info
(
)
bitmap
-
>
getPixels
(
)
bitmap
-
>
rowBytes
(
)
fOrigin
.
x
(
)
fOrigin
.
y
(
)
)
;
}
}
bool
SkImageCacherator
:
:
directGeneratePixels
(
const
SkImageInfo
&
info
void
*
pixels
size_t
rb
int
srcX
int
srcY
)
{
ScopedGenerator
generator
(
this
)
;
const
SkImageInfo
&
genInfo
=
generator
-
>
getInfo
(
)
;
if
(
srcX
|
|
srcY
|
|
genInfo
.
width
(
)
!
=
info
.
width
(
)
|
|
genInfo
.
height
(
)
!
=
info
.
height
(
)
)
{
return
false
;
}
return
generator
-
>
getPixels
(
info
pixels
rb
)
;
}
bool
SkImageCacherator
:
:
lockAsBitmapOnlyIfAlreadyCached
(
SkBitmap
*
bitmap
)
{
return
SkBitmapCache
:
:
Find
(
fUniqueID
bitmap
)
&
&
check_output_bitmap
(
*
bitmap
fUniqueID
)
;
}
bool
SkImageCacherator
:
:
tryLockAsBitmap
(
SkBitmap
*
bitmap
const
SkImage
*
client
SkImage
:
:
CachingHint
chint
)
{
if
(
this
-
>
lockAsBitmapOnlyIfAlreadyCached
(
bitmap
)
)
{
return
true
;
}
if
(
!
this
-
>
generateBitmap
(
bitmap
)
)
{
return
false
;
}
bitmap
-
>
pixelRef
(
)
-
>
setImmutableWithID
(
fUniqueID
)
;
if
(
SkImage
:
:
kAllow_CachingHint
=
=
chint
)
{
SkBitmapCache
:
:
Add
(
fUniqueID
*
bitmap
)
;
if
(
client
)
{
as_IB
(
client
)
-
>
notifyAddedToCache
(
)
;
}
}
return
true
;
}
bool
SkImageCacherator
:
:
lockAsBitmap
(
SkBitmap
*
bitmap
const
SkImage
*
client
SkImage
:
:
CachingHint
chint
)
{
if
(
this
-
>
tryLockAsBitmap
(
bitmap
client
chint
)
)
{
return
check_output_bitmap
(
*
bitmap
fUniqueID
)
;
}
#
if
SK_SUPPORT_GPU
SkAutoTUnref
<
GrTexture
>
tex
;
{
ScopedGenerator
generator
(
this
)
;
SkIRect
subset
=
SkIRect
:
:
MakeXYWH
(
fOrigin
.
x
(
)
fOrigin
.
y
(
)
fInfo
.
width
(
)
fInfo
.
height
(
)
)
;
tex
.
reset
(
generator
-
>
generateTexture
(
nullptr
&
subset
)
)
;
}
if
(
!
tex
)
{
bitmap
-
>
reset
(
)
;
return
false
;
}
if
(
!
bitmap
-
>
tryAllocPixels
(
fInfo
)
)
{
bitmap
-
>
reset
(
)
;
return
false
;
}
const
uint32_t
pixelOpsFlags
=
0
;
if
(
!
tex
-
>
readPixels
(
0
0
bitmap
-
>
width
(
)
bitmap
-
>
height
(
)
SkImageInfo2GrPixelConfig
(
fInfo
)
bitmap
-
>
getPixels
(
)
bitmap
-
>
rowBytes
(
)
pixelOpsFlags
)
)
{
bitmap
-
>
reset
(
)
;
return
false
;
}
bitmap
-
>
pixelRef
(
)
-
>
setImmutableWithID
(
fUniqueID
)
;
if
(
SkImage
:
:
kAllow_CachingHint
=
=
chint
)
{
SkBitmapCache
:
:
Add
(
fUniqueID
*
bitmap
)
;
if
(
client
)
{
as_IB
(
client
)
-
>
notifyAddedToCache
(
)
;
}
}
return
check_output_bitmap
(
*
bitmap
fUniqueID
)
;
#
else
return
false
;
#
endif
}
#
if
SK_SUPPORT_GPU
static
GrTexture
*
load_compressed_into_texture
(
GrContext
*
ctx
SkData
*
data
GrSurfaceDesc
desc
)
{
const
void
*
rawStart
;
GrPixelConfig
config
=
GrIsCompressedTextureDataSupported
(
ctx
data
desc
.
fWidth
desc
.
fHeight
&
rawStart
)
;
if
(
kUnknown_GrPixelConfig
=
=
config
)
{
return
nullptr
;
}
desc
.
fConfig
=
config
;
return
ctx
-
>
textureProvider
(
)
-
>
createTexture
(
desc
true
rawStart
0
)
;
}
class
Generator_GrYUVProvider
:
public
GrYUVProvider
{
SkImageGenerator
*
fGen
;
public
:
Generator_GrYUVProvider
(
SkImageGenerator
*
gen
)
:
fGen
(
gen
)
{
}
uint32_t
onGetID
(
)
override
{
return
fGen
-
>
uniqueID
(
)
;
}
bool
onGetYUVSizes
(
SkISize
sizes
[
3
]
)
override
{
return
fGen
-
>
getYUV8Planes
(
sizes
nullptr
nullptr
nullptr
)
;
}
bool
onGetYUVPlanes
(
SkISize
sizes
[
3
]
void
*
planes
[
3
]
size_t
rowBytes
[
3
]
SkYUVColorSpace
*
space
)
override
{
return
fGen
-
>
getYUV8Planes
(
sizes
planes
rowBytes
space
)
;
}
}
;
static
GrTexture
*
set_key_and_return
(
GrTexture
*
tex
const
GrUniqueKey
&
key
)
{
if
(
key
.
isValid
(
)
)
{
tex
-
>
resourcePriv
(
)
.
setUniqueKey
(
key
)
;
}
return
tex
;
}
GrTexture
*
SkImageCacherator
:
:
lockTexture
(
GrContext
*
ctx
const
GrUniqueKey
&
key
const
SkImage
*
client
SkImage
:
:
CachingHint
chint
)
{
if
(
key
.
isValid
(
)
)
{
if
(
GrTexture
*
tex
=
ctx
-
>
textureProvider
(
)
-
>
findAndRefTextureByUniqueKey
(
key
)
)
{
return
tex
;
}
}
{
ScopedGenerator
generator
(
this
)
;
SkIRect
subset
=
SkIRect
:
:
MakeXYWH
(
fOrigin
.
x
(
)
fOrigin
.
y
(
)
fInfo
.
width
(
)
fInfo
.
height
(
)
)
;
if
(
GrTexture
*
tex
=
generator
-
>
generateTexture
(
ctx
&
subset
)
)
{
return
set_key_and_return
(
tex
key
)
;
}
}
const
GrSurfaceDesc
desc
=
GrImageInfoToSurfaceDesc
(
fInfo
)
;
SkAutoTUnref
<
SkData
>
data
(
this
-
>
refEncoded
(
ctx
)
)
;
if
(
data
)
{
GrTexture
*
tex
=
load_compressed_into_texture
(
ctx
data
desc
)
;
if
(
tex
)
{
return
set_key_and_return
(
tex
key
)
;
}
}
{
ScopedGenerator
generator
(
this
)
;
Generator_GrYUVProvider
provider
(
generator
)
;
GrTexture
*
tex
=
provider
.
refAsTexture
(
ctx
desc
true
)
;
if
(
tex
)
{
return
set_key_and_return
(
tex
key
)
;
}
}
SkBitmap
bitmap
;
if
(
this
-
>
tryLockAsBitmap
(
&
bitmap
client
chint
)
)
{
GrTexture
*
tex
=
GrUploadBitmapToTexture
(
ctx
bitmap
)
;
if
(
tex
)
{
return
set_key_and_return
(
tex
key
)
;
}
}
return
nullptr
;
}
GrTexture
*
SkImageCacherator
:
:
lockAsTexture
(
GrContext
*
ctx
const
GrTextureParams
&
params
const
SkImage
*
client
SkImage
:
:
CachingHint
chint
)
{
if
(
!
ctx
)
{
return
nullptr
;
}
return
GrImageTextureMaker
(
ctx
this
client
chint
)
.
refTextureForParams
(
params
)
;
}
#
else
GrTexture
*
SkImageCacherator
:
:
lockAsTexture
(
GrContext
*
ctx
const
GrTextureParams
&
const
SkImage
*
client
SkImage
:
:
CachingHint
)
{
return
nullptr
;
}
#
endif
