#
include
"
SkPoint3
.
h
"
static
inline
float
get_length_squared
(
float
x
float
y
float
z
)
{
return
x
*
x
+
y
*
y
+
z
*
z
;
}
static
inline
bool
is_length_nearly_zero
(
float
x
float
y
float
z
float
*
lengthSquared
)
{
*
lengthSquared
=
get_length_squared
(
x
y
z
)
;
return
*
lengthSquared
<
=
(
SK_ScalarNearlyZero
*
SK_ScalarNearlyZero
)
;
}
SkScalar
SkPoint3
:
:
Length
(
SkScalar
x
SkScalar
y
SkScalar
z
)
{
float
magSq
=
get_length_squared
(
x
y
z
)
;
if
(
SkScalarIsFinite
(
magSq
)
)
{
return
sk_float_sqrt
(
magSq
)
;
}
else
{
double
xx
=
x
;
double
yy
=
y
;
double
zz
=
z
;
return
(
float
)
sqrt
(
xx
*
xx
+
yy
*
yy
+
zz
*
zz
)
;
}
}
bool
SkPoint3
:
:
normalize
(
)
{
float
magSq
;
if
(
is_length_nearly_zero
(
fX
fY
fZ
&
magSq
)
)
{
this
-
>
set
(
0
0
0
)
;
return
false
;
}
float
scale
;
if
(
SkScalarIsFinite
(
magSq
)
)
{
scale
=
1
.
0f
/
sk_float_sqrt
(
magSq
)
;
}
else
{
double
xx
=
fX
;
double
yy
=
fY
;
double
zz
=
fZ
;
#
ifdef
SK_CPU_FLUSH_TO_ZERO
double
dscale
=
1
.
0f
/
sqrt
(
xx
*
xx
+
yy
*
yy
+
zz
*
zz
)
;
fX
=
x
*
dscale
;
fY
=
y
*
dscale
;
fZ
=
z
*
dscale
;
return
true
;
#
else
scale
=
(
float
)
(
1
.
0f
/
sqrt
(
xx
*
xx
+
yy
*
yy
+
zz
*
zz
)
)
;
#
endif
}
fX
*
=
scale
;
fY
*
=
scale
;
fZ
*
=
scale
;
return
true
;
}
