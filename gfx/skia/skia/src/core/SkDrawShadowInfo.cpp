#
include
"
SkDrawShadowInfo
.
h
"
#
include
"
SkMatrix
.
h
"
#
include
"
SkPath
.
h
"
#
include
"
SkRect
.
h
"
namespace
SkDrawShadowMetrics
{
static
SkScalar
compute_z
(
SkScalar
x
SkScalar
y
const
SkPoint3
&
params
)
{
return
x
*
params
.
fX
+
y
*
params
.
fY
+
params
.
fZ
;
}
void
GetLocalBounds
(
const
SkPath
&
path
const
SkDrawShadowRec
&
rec
const
SkMatrix
&
ctm
SkRect
*
bounds
)
{
SkRect
ambientBounds
=
path
.
getBounds
(
)
;
SkScalar
occluderZ
;
if
(
SkScalarNearlyZero
(
rec
.
fZPlaneParams
.
fX
)
&
&
SkScalarNearlyZero
(
rec
.
fZPlaneParams
.
fY
)
)
{
occluderZ
=
rec
.
fZPlaneParams
.
fZ
;
}
else
{
occluderZ
=
compute_z
(
ambientBounds
.
fLeft
ambientBounds
.
fTop
rec
.
fZPlaneParams
)
;
occluderZ
=
SkTMax
(
occluderZ
compute_z
(
ambientBounds
.
fRight
ambientBounds
.
fTop
rec
.
fZPlaneParams
)
)
;
occluderZ
=
SkTMax
(
occluderZ
compute_z
(
ambientBounds
.
fLeft
ambientBounds
.
fBottom
rec
.
fZPlaneParams
)
)
;
occluderZ
=
SkTMax
(
occluderZ
compute_z
(
ambientBounds
.
fRight
ambientBounds
.
fBottom
rec
.
fZPlaneParams
)
)
;
}
SkScalar
ambientBlur
;
SkScalar
spotBlur
;
SkScalar
spotScale
;
SkPoint
spotOffset
;
if
(
ctm
.
hasPerspective
(
)
)
{
ctm
.
mapRect
(
&
ambientBounds
)
;
ambientBlur
=
SkDrawShadowMetrics
:
:
AmbientBlurRadius
(
occluderZ
)
;
SkPoint
devLightPos
=
SkPoint
:
:
Make
(
rec
.
fLightPos
.
fX
rec
.
fLightPos
.
fY
)
;
ctm
.
mapPoints
(
&
devLightPos
1
)
;
SkDrawShadowMetrics
:
:
GetSpotParams
(
occluderZ
devLightPos
.
fX
devLightPos
.
fY
rec
.
fLightPos
.
fZ
rec
.
fLightRadius
&
spotBlur
&
spotScale
&
spotOffset
)
;
}
else
{
SkScalar
devToSrcScale
=
SkScalarInvert
(
ctm
.
getMinScale
(
)
)
;
SkScalar
devSpaceAmbientBlur
=
SkDrawShadowMetrics
:
:
AmbientBlurRadius
(
occluderZ
)
;
ambientBlur
=
devSpaceAmbientBlur
*
devToSrcScale
;
SkDrawShadowMetrics
:
:
GetSpotParams
(
occluderZ
rec
.
fLightPos
.
fX
rec
.
fLightPos
.
fY
rec
.
fLightPos
.
fZ
rec
.
fLightRadius
&
spotBlur
&
spotScale
&
spotOffset
)
;
spotBlur
*
=
devToSrcScale
;
}
SkRect
spotBounds
=
ambientBounds
;
ambientBounds
.
outset
(
ambientBlur
ambientBlur
)
;
spotBounds
.
fLeft
*
=
spotScale
;
spotBounds
.
fTop
*
=
spotScale
;
spotBounds
.
fRight
*
=
spotScale
;
spotBounds
.
fBottom
*
=
spotScale
;
spotBounds
.
offset
(
spotOffset
.
fX
spotOffset
.
fY
)
;
spotBounds
.
outset
(
spotBlur
spotBlur
)
;
*
bounds
=
ambientBounds
;
bounds
-
>
join
(
spotBounds
)
;
bounds
-
>
outset
(
1
1
)
;
if
(
ctm
.
hasPerspective
(
)
)
{
SkMatrix
inverse
;
if
(
ctm
.
invert
(
&
inverse
)
)
{
inverse
.
mapRect
(
bounds
)
;
}
}
}
}
