#
include
"
SkArenaAlloc
.
h
"
#
include
"
SkGaussFilter
.
h
"
#
include
"
SkMalloc
.
h
"
#
include
"
SkMaskBlurFilter
.
h
"
#
include
"
SkNx
.
h
"
#
include
"
SkSafeMath
.
h
"
#
include
<
cmath
>
#
include
<
climits
>
static
const
double
kPi
=
3
.
14159265358979323846264338327950288
;
class
BlurScanInterface
{
public
:
virtual
~
BlurScanInterface
(
)
=
default
;
virtual
void
blur
(
const
uint8_t
*
src
int
srcStride
const
uint8_t
*
srcEnd
uint8_t
*
dst
int
dstStride
uint8_t
*
dstEnd
)
const
=
0
;
virtual
bool
canBlur4
(
)
{
return
false
;
}
virtual
void
blur4Transpose
(
const
uint8_t
*
src
int
srcStride
const
uint8_t
*
srcEnd
uint8_t
*
dst
int
dstStride
uint8_t
*
dstEnd
)
const
{
SK_ABORT
(
"
This
should
not
be
called
.
"
)
;
}
}
;
class
PlanningInterface
{
public
:
virtual
~
PlanningInterface
(
)
=
default
;
virtual
size_t
bufferSize
(
)
const
=
0
;
virtual
int
border
(
)
const
=
0
;
virtual
bool
needsBlur
(
)
const
=
0
;
virtual
BlurScanInterface
*
makeBlurScan
(
SkArenaAlloc
*
alloc
int
width
uint32_t
*
buffer
)
const
=
0
;
}
;
class
None
final
:
public
PlanningInterface
{
public
:
None
(
)
=
default
;
size_t
bufferSize
(
)
const
override
{
return
0
;
}
int
border
(
)
const
override
{
return
0
;
}
bool
needsBlur
(
)
const
override
{
return
false
;
}
BlurScanInterface
*
makeBlurScan
(
SkArenaAlloc
*
alloc
int
width
uint32_t
*
buffer
)
const
override
{
SK_ABORT
(
"
Should
never
be
called
.
"
)
;
return
nullptr
;
}
}
;
class
PlanGauss
final
:
public
PlanningInterface
{
public
:
explicit
PlanGauss
(
double
sigma
)
{
auto
possibleWindow
=
static_cast
<
int
>
(
floor
(
sigma
*
3
*
sqrt
(
2
*
kPi
)
/
4
+
0
.
5
)
)
;
auto
window
=
std
:
:
max
(
1
possibleWindow
)
;
fPass0Size
=
window
-
1
;
fPass1Size
=
window
-
1
;
fPass2Size
=
(
window
&
1
)
=
=
1
?
window
-
1
:
window
;
fBorder
=
(
window
&
1
)
=
=
1
?
3
*
(
(
window
-
1
)
/
2
)
:
3
*
(
window
/
2
)
-
1
;
fSlidingWindow
=
2
*
fBorder
+
1
;
auto
window2
=
window
*
window
;
auto
window3
=
window2
*
window
;
auto
divisor
=
(
window
&
1
)
=
=
1
?
window3
:
window3
+
window2
;
fWeight
=
static_cast
<
uint64_t
>
(
round
(
1
.
0
/
divisor
*
(
1ull
<
<
32
)
)
)
;
}
size_t
bufferSize
(
)
const
override
{
return
fPass0Size
+
fPass1Size
+
fPass2Size
;
}
int
border
(
)
const
override
{
return
fBorder
;
}
bool
needsBlur
(
)
const
override
{
return
true
;
}
BlurScanInterface
*
makeBlurScan
(
SkArenaAlloc
*
alloc
int
width
uint32_t
*
buffer
)
const
override
{
uint32_t
*
buffer0
*
buffer0End
*
buffer1
*
buffer1End
*
buffer2
*
buffer2End
;
buffer0
=
buffer
;
buffer0End
=
buffer1
=
buffer0
+
fPass0Size
;
buffer1End
=
buffer2
=
buffer1
+
fPass1Size
;
buffer2End
=
buffer2
+
fPass2Size
;
int
noChangeCount
=
fSlidingWindow
>
width
?
fSlidingWindow
-
width
:
0
;
return
alloc
-
>
make
<
Gauss
>
(
fWeight
noChangeCount
buffer0
buffer0End
buffer1
buffer1End
buffer2
buffer2End
)
;
}
public
:
class
Gauss
final
:
public
BlurScanInterface
{
public
:
Gauss
(
uint64_t
weight
int
noChangeCount
uint32_t
*
buffer0
uint32_t
*
buffer0End
uint32_t
*
buffer1
uint32_t
*
buffer1End
uint32_t
*
buffer2
uint32_t
*
buffer2End
)
:
fWeight
{
weight
}
fNoChangeCount
{
noChangeCount
}
fBuffer0
{
buffer0
}
fBuffer0End
{
buffer0End
}
fBuffer1
{
buffer1
}
fBuffer1End
{
buffer1End
}
fBuffer2
{
buffer2
}
fBuffer2End
{
buffer2End
}
{
}
void
blur
(
const
uint8_t
*
src
int
srcStride
const
uint8_t
*
srcEnd
uint8_t
*
dst
int
dstStride
uint8_t
*
dstEnd
)
const
override
{
auto
buffer0Cursor
=
fBuffer0
;
auto
buffer1Cursor
=
fBuffer1
;
auto
buffer2Cursor
=
fBuffer2
;
memset
(
fBuffer0
0x00
(
fBuffer2End
-
fBuffer0
)
*
sizeof
(
*
fBuffer0
)
)
;
uint32_t
sum0
=
0
;
uint32_t
sum1
=
0
;
uint32_t
sum2
=
0
;
for
(
auto
srcCursor
=
src
;
srcCursor
<
srcEnd
;
dst
+
=
dstStride
srcCursor
+
=
srcStride
)
{
uint32_t
leadingEdge
=
*
srcCursor
;
sum0
+
=
leadingEdge
;
sum1
+
=
sum0
;
sum2
+
=
sum1
;
*
dst
=
this
-
>
finalScale
(
sum2
)
;
sum2
-
=
*
buffer2Cursor
;
*
buffer2Cursor
=
sum1
;
buffer2Cursor
=
(
buffer2Cursor
+
1
)
<
fBuffer2End
?
buffer2Cursor
+
1
:
fBuffer2
;
sum1
-
=
*
buffer1Cursor
;
*
buffer1Cursor
=
sum0
;
buffer1Cursor
=
(
buffer1Cursor
+
1
)
<
fBuffer1End
?
buffer1Cursor
+
1
:
fBuffer1
;
sum0
-
=
*
buffer0Cursor
;
*
buffer0Cursor
=
leadingEdge
;
buffer0Cursor
=
(
buffer0Cursor
+
1
)
<
fBuffer0End
?
buffer0Cursor
+
1
:
fBuffer0
;
}
for
(
int
i
=
0
;
i
<
fNoChangeCount
;
i
+
+
)
{
uint32_t
leadingEdge
=
0
;
sum0
+
=
leadingEdge
;
sum1
+
=
sum0
;
sum2
+
=
sum1
;
*
dst
=
this
-
>
finalScale
(
sum2
)
;
sum2
-
=
*
buffer2Cursor
;
*
buffer2Cursor
=
sum1
;
buffer2Cursor
=
(
buffer2Cursor
+
1
)
<
fBuffer2End
?
buffer2Cursor
+
1
:
fBuffer2
;
sum1
-
=
*
buffer1Cursor
;
*
buffer1Cursor
=
sum0
;
buffer1Cursor
=
(
buffer1Cursor
+
1
)
<
fBuffer1End
?
buffer1Cursor
+
1
:
fBuffer1
;
sum0
-
=
*
buffer0Cursor
;
*
buffer0Cursor
=
leadingEdge
;
buffer0Cursor
=
(
buffer0Cursor
+
1
)
<
fBuffer0End
?
buffer0Cursor
+
1
:
fBuffer0
;
dst
+
=
dstStride
;
}
memset
(
fBuffer0
0
(
fBuffer2End
-
fBuffer0
)
*
sizeof
(
*
fBuffer0
)
)
;
sum0
=
sum1
=
sum2
=
0
;
uint8_t
*
dstCursor
=
dstEnd
;
const
uint8_t
*
srcCursor
=
srcEnd
;
while
(
dstCursor
>
dst
)
{
dstCursor
-
=
dstStride
;
srcCursor
-
=
srcStride
;
uint32_t
leadingEdge
=
*
srcCursor
;
sum0
+
=
leadingEdge
;
sum1
+
=
sum0
;
sum2
+
=
sum1
;
*
dstCursor
=
this
-
>
finalScale
(
sum2
)
;
sum2
-
=
*
buffer2Cursor
;
*
buffer2Cursor
=
sum1
;
buffer2Cursor
=
(
buffer2Cursor
+
1
)
<
fBuffer2End
?
buffer2Cursor
+
1
:
fBuffer2
;
sum1
-
=
*
buffer1Cursor
;
*
buffer1Cursor
=
sum0
;
buffer1Cursor
=
(
buffer1Cursor
+
1
)
<
fBuffer1End
?
buffer1Cursor
+
1
:
fBuffer1
;
sum0
-
=
*
buffer0Cursor
;
*
buffer0Cursor
=
leadingEdge
;
buffer0Cursor
=
(
buffer0Cursor
+
1
)
<
fBuffer0End
?
buffer0Cursor
+
1
:
fBuffer0
;
}
}
private
:
static
constexpr
uint64_t
kHalf
=
static_cast
<
uint64_t
>
(
1
)
<
<
31
;
uint8_t
finalScale
(
uint32_t
sum
)
const
{
return
SkTo
<
uint8_t
>
(
(
fWeight
*
sum
+
kHalf
)
>
>
32
)
;
}
uint64_t
fWeight
;
int
fNoChangeCount
;
uint32_t
*
fBuffer0
;
uint32_t
*
fBuffer0End
;
uint32_t
*
fBuffer1
;
uint32_t
*
fBuffer1End
;
uint32_t
*
fBuffer2
;
uint32_t
*
fBuffer2End
;
}
;
uint64_t
fWeight
;
int
fBorder
;
int
fSlidingWindow
;
int
fPass0Size
;
int
fPass1Size
;
int
fPass2Size
;
}
;
SkMaskBlurFilter
:
:
SkMaskBlurFilter
(
double
sigmaW
double
sigmaH
)
:
fSigmaW
{
SkTPin
(
sigmaW
0
.
0
136
.
0
)
}
fSigmaH
{
SkTPin
(
sigmaH
0
.
0
136
.
0
)
}
{
SkASSERT
(
sigmaW
>
=
0
)
;
SkASSERT
(
sigmaH
>
=
0
)
;
}
bool
SkMaskBlurFilter
:
:
hasNoBlur
(
)
const
{
return
(
3
*
fSigmaW
<
=
1
)
&
&
(
3
*
fSigmaH
<
=
1
)
;
}
static
SkMask
prepare_destination
(
int
radiusX
int
radiusY
const
SkMask
&
src
)
{
SkSafeMath
safe
;
SkMask
dst
;
size_t
dstW
=
safe
.
add
(
src
.
fBounds
.
width
(
)
safe
.
add
(
radiusX
radiusX
)
)
;
size_t
dstH
=
safe
.
add
(
src
.
fBounds
.
height
(
)
safe
.
add
(
radiusY
radiusY
)
)
;
dst
.
fBounds
.
set
(
0
0
SkTo
<
int
>
(
dstW
)
SkTo
<
int
>
(
dstH
)
)
;
dst
.
fBounds
.
offset
(
src
.
fBounds
.
x
(
)
src
.
fBounds
.
y
(
)
)
;
dst
.
fBounds
.
offset
(
-
radiusX
-
radiusY
)
;
dst
.
fImage
=
nullptr
;
dst
.
fRowBytes
=
SkTo
<
uint32_t
>
(
dstW
)
;
dst
.
fFormat
=
SkMask
:
:
kA8_Format
;
size_t
toAlloc
=
safe
.
mul
(
dstW
dstH
)
;
if
(
safe
&
&
src
.
fImage
!
=
nullptr
)
{
dst
.
fImage
=
SkMask
:
:
AllocImage
(
toAlloc
)
;
}
return
dst
;
}
static
constexpr
uint16_t
_____
=
0u
;
static
constexpr
uint16_t
kHalf
=
0x80u
;
static
SK_ALWAYS_INLINE
Sk8h
load
(
const
uint8_t
*
from
int
width
)
{
uint8_t
buffer
[
8
]
;
if
(
width
<
8
)
{
sk_bzero
(
buffer
sizeof
(
buffer
)
)
;
for
(
int
i
=
0
;
i
<
width
;
i
+
+
)
{
buffer
[
i
]
=
from
[
i
]
;
}
from
=
buffer
;
}
auto
v
=
SkNx_cast
<
uint16_t
>
(
Sk8b
:
:
Load
(
from
)
)
;
return
v
<
<
8
;
}
;
static
SK_ALWAYS_INLINE
void
store
(
uint8_t
*
to
const
Sk8h
&
v
int
width
)
{
Sk8b
b
=
SkNx_cast
<
uint8_t
>
(
v
>
>
8
)
;
if
(
width
=
=
8
)
{
b
.
store
(
to
)
;
}
else
{
uint8_t
buffer
[
8
]
;
b
.
store
(
buffer
)
;
for
(
int
i
=
0
;
i
<
width
;
i
+
+
)
{
to
[
i
]
=
buffer
[
i
]
;
}
}
}
;
static
SK_ALWAYS_INLINE
void
blur_x_radius_1
(
const
Sk8h
&
s0
const
Sk8h
&
g0
const
Sk8h
&
g1
const
Sk8h
&
const
Sk8h
&
const
Sk8h
&
Sk8h
*
d0
Sk8h
*
d8
)
{
auto
v1
=
s0
.
mulHi
(
g1
)
;
auto
v0
=
s0
.
mulHi
(
g0
)
;
*
d0
+
=
v1
;
*
d0
+
=
Sk8h
{
_____
v0
[
0
]
v0
[
1
]
v0
[
2
]
v0
[
3
]
v0
[
4
]
v0
[
5
]
v0
[
6
]
}
;
*
d8
+
=
Sk8h
{
v0
[
7
]
_____
_____
_____
_____
_____
_____
_____
}
;
*
d0
+
=
Sk8h
{
_____
_____
v1
[
0
]
v1
[
1
]
v1
[
2
]
v1
[
3
]
v1
[
4
]
v1
[
5
]
}
;
*
d8
+
=
Sk8h
{
v1
[
6
]
v1
[
7
]
_____
_____
_____
_____
_____
_____
}
;
}
static
SK_ALWAYS_INLINE
void
blur_x_radius_2
(
const
Sk8h
&
s0
const
Sk8h
&
g0
const
Sk8h
&
g1
const
Sk8h
&
g2
const
Sk8h
&
const
Sk8h
&
Sk8h
*
d0
Sk8h
*
d8
)
{
auto
v0
=
s0
.
mulHi
(
g0
)
;
auto
v1
=
s0
.
mulHi
(
g1
)
;
auto
v2
=
s0
.
mulHi
(
g2
)
;
*
d0
+
=
v2
;
*
d0
+
=
Sk8h
{
_____
v1
[
0
]
v1
[
1
]
v1
[
2
]
v1
[
3
]
v1
[
4
]
v1
[
5
]
v1
[
6
]
}
;
*
d8
+
=
Sk8h
{
v1
[
7
]
_____
_____
_____
_____
_____
_____
_____
}
;
*
d0
+
=
Sk8h
{
_____
_____
v0
[
0
]
v0
[
1
]
v0
[
2
]
v0
[
3
]
v0
[
4
]
v0
[
5
]
}
;
*
d8
+
=
Sk8h
{
v0
[
6
]
v0
[
7
]
_____
_____
_____
_____
_____
_____
}
;
*
d0
+
=
Sk8h
{
_____
_____
_____
v1
[
0
]
v1
[
1
]
v1
[
2
]
v1
[
3
]
v1
[
4
]
}
;
*
d8
+
=
Sk8h
{
v1
[
5
]
v1
[
6
]
v1
[
7
]
_____
_____
_____
_____
_____
}
;
*
d0
+
=
Sk8h
{
_____
_____
_____
_____
v2
[
0
]
v2
[
1
]
v2
[
2
]
v2
[
3
]
}
;
*
d8
+
=
Sk8h
{
v2
[
4
]
v2
[
5
]
v2
[
6
]
v2
[
7
]
_____
_____
_____
_____
}
;
}
static
SK_ALWAYS_INLINE
void
blur_x_radius_3
(
const
Sk8h
&
s0
const
Sk8h
&
gauss0
const
Sk8h
&
gauss1
const
Sk8h
&
gauss2
const
Sk8h
&
gauss3
const
Sk8h
&
Sk8h
*
d0
Sk8h
*
d8
)
{
auto
v0
=
s0
.
mulHi
(
gauss0
)
;
auto
v1
=
s0
.
mulHi
(
gauss1
)
;
auto
v2
=
s0
.
mulHi
(
gauss2
)
;
auto
v3
=
s0
.
mulHi
(
gauss3
)
;
*
d0
+
=
v3
;
*
d0
+
=
Sk8h
{
_____
v2
[
0
]
v2
[
1
]
v2
[
2
]
v2
[
3
]
v2
[
4
]
v2
[
5
]
v2
[
6
]
}
;
*
d8
+
=
Sk8h
{
v2
[
7
]
_____
_____
_____
_____
_____
_____
_____
}
;
*
d0
+
=
Sk8h
{
_____
_____
v1
[
0
]
v1
[
1
]
v1
[
2
]
v1
[
3
]
v1
[
4
]
v1
[
5
]
}
;
*
d8
+
=
Sk8h
{
v1
[
6
]
v1
[
7
]
_____
_____
_____
_____
_____
_____
}
;
*
d0
+
=
Sk8h
{
_____
_____
_____
v0
[
0
]
v0
[
1
]
v0
[
2
]
v0
[
3
]
v0
[
4
]
}
;
*
d8
+
=
Sk8h
{
v0
[
5
]
v0
[
6
]
v0
[
7
]
_____
_____
_____
_____
_____
}
;
*
d0
+
=
Sk8h
{
_____
_____
_____
_____
v1
[
0
]
v1
[
1
]
v1
[
2
]
v1
[
3
]
}
;
*
d8
+
=
Sk8h
{
v1
[
4
]
v1
[
5
]
v1
[
6
]
v1
[
7
]
_____
_____
_____
_____
}
;
*
d0
+
=
Sk8h
{
_____
_____
_____
_____
_____
v2
[
0
]
v2
[
1
]
v2
[
2
]
}
;
*
d8
+
=
Sk8h
{
v2
[
3
]
v2
[
4
]
v2
[
5
]
v2
[
6
]
v2
[
7
]
_____
_____
_____
}
;
*
d0
+
=
Sk8h
{
_____
_____
_____
_____
_____
_____
v3
[
0
]
v3
[
1
]
}
;
*
d8
+
=
Sk8h
{
v3
[
2
]
v3
[
3
]
v3
[
4
]
v3
[
5
]
v3
[
6
]
v3
[
7
]
_____
_____
}
;
}
static
SK_ALWAYS_INLINE
void
blur_x_radius_4
(
const
Sk8h
&
s0
const
Sk8h
&
gauss0
const
Sk8h
&
gauss1
const
Sk8h
&
gauss2
const
Sk8h
&
gauss3
const
Sk8h
&
gauss4
Sk8h
*
d0
Sk8h
*
d8
)
{
auto
v0
=
s0
.
mulHi
(
gauss0
)
;
auto
v1
=
s0
.
mulHi
(
gauss1
)
;
auto
v2
=
s0
.
mulHi
(
gauss2
)
;
auto
v3
=
s0
.
mulHi
(
gauss3
)
;
auto
v4
=
s0
.
mulHi
(
gauss4
)
;
*
d0
+
=
v4
;
*
d0
+
=
Sk8h
{
_____
v3
[
0
]
v3
[
1
]
v3
[
2
]
v3
[
3
]
v3
[
4
]
v3
[
5
]
v3
[
6
]
}
;
*
d8
+
=
Sk8h
{
v3
[
7
]
_____
_____
_____
_____
_____
_____
_____
}
;
*
d0
+
=
Sk8h
{
_____
_____
v2
[
0
]
v2
[
1
]
v2
[
2
]
v2
[
3
]
v2
[
4
]
v2
[
5
]
}
;
*
d8
+
=
Sk8h
{
v2
[
6
]
v2
[
7
]
_____
_____
_____
_____
_____
_____
}
;
*
d0
+
=
Sk8h
{
_____
_____
_____
v1
[
0
]
v1
[
1
]
v1
[
2
]
v1
[
3
]
v1
[
4
]
}
;
*
d8
+
=
Sk8h
{
v1
[
5
]
v1
[
6
]
v1
[
7
]
_____
_____
_____
_____
_____
}
;
*
d0
+
=
Sk8h
{
_____
_____
_____
_____
v0
[
0
]
v0
[
1
]
v0
[
2
]
v0
[
3
]
}
;
*
d8
+
=
Sk8h
{
v0
[
4
]
v0
[
5
]
v0
[
6
]
v0
[
7
]
_____
_____
_____
_____
}
;
*
d0
+
=
Sk8h
{
_____
_____
_____
_____
_____
v1
[
0
]
v1
[
1
]
v1
[
2
]
}
;
*
d8
+
=
Sk8h
{
v1
[
3
]
v1
[
4
]
v1
[
5
]
v1
[
6
]
v1
[
7
]
_____
_____
_____
}
;
*
d0
+
=
Sk8h
{
_____
_____
_____
_____
_____
_____
v2
[
0
]
v2
[
1
]
}
;
*
d8
+
=
Sk8h
{
v2
[
2
]
v2
[
3
]
v2
[
4
]
v2
[
5
]
v2
[
6
]
v2
[
7
]
_____
_____
}
;
*
d0
+
=
Sk8h
{
_____
_____
_____
_____
_____
_____
_____
v3
[
0
]
}
;
*
d8
+
=
Sk8h
{
v3
[
1
]
v3
[
2
]
v3
[
3
]
v3
[
4
]
v3
[
5
]
v3
[
6
]
v3
[
7
]
_____
}
;
*
d8
+
=
v4
;
}
using
BlurX
=
decltype
(
blur_x_radius_1
)
;
static
SK_ALWAYS_INLINE
void
blur_row
(
BlurX
blur
const
Sk8h
&
g0
const
Sk8h
&
g1
const
Sk8h
&
g2
const
Sk8h
&
g3
const
Sk8h
&
g4
const
uint8_t
*
src
int
srcW
uint8_t
*
dst
int
dstW
)
{
Sk8h
d0
{
kHalf
}
d8
{
kHalf
}
;
int
x
=
0
;
for
(
;
x
<
=
srcW
-
8
;
x
+
=
8
)
{
blur
(
load
(
src
8
)
g0
g1
g2
g3
g4
&
d0
&
d8
)
;
store
(
dst
d0
8
)
;
d0
=
d8
;
d8
=
Sk8h
{
kHalf
}
;
src
+
=
8
;
dst
+
=
8
;
}
int
srcTail
=
srcW
-
x
;
if
(
srcTail
>
0
)
{
blur
(
load
(
src
srcTail
)
g0
g1
g2
g3
g4
&
d0
&
d8
)
;
int
dstTail
=
std
:
:
min
(
8
dstW
-
x
)
;
store
(
dst
d0
dstTail
)
;
d0
=
d8
;
dst
+
=
dstTail
;
x
+
=
dstTail
;
}
int
dstTail
=
dstW
-
x
;
if
(
dstTail
>
0
)
{
store
(
dst
d0
dstTail
)
;
}
}
static
SK_ALWAYS_INLINE
void
blur_x_rect
(
BlurX
blur
uint16_t
*
gauss
const
uint8_t
*
src
size_t
srcStride
int
srcW
uint8_t
*
dst
size_t
dstStride
int
dstW
int
dstH
)
{
Sk8h
g0
{
gauss
[
0
]
}
g1
{
gauss
[
1
]
}
g2
{
gauss
[
2
]
}
g3
{
gauss
[
3
]
}
g4
{
gauss
[
4
]
}
;
for
(
int
y
=
0
;
y
<
dstH
;
y
+
+
)
{
blur_row
(
blur
g0
g1
g2
g3
g4
src
srcW
dst
dstW
)
;
src
+
=
srcStride
;
dst
+
=
dstStride
;
}
}
SK_ATTRIBUTE
(
noinline
)
static
void
direct_blur_x
(
int
radius
uint16_t
*
gauss
const
uint8_t
*
src
size_t
srcStride
int
srcW
uint8_t
*
dst
size_t
dstStride
int
dstW
int
dstH
)
{
switch
(
radius
)
{
case
1
:
blur_x_rect
(
blur_x_radius_1
gauss
src
srcStride
srcW
dst
dstStride
dstW
dstH
)
;
break
;
case
2
:
blur_x_rect
(
blur_x_radius_2
gauss
src
srcStride
srcW
dst
dstStride
dstW
dstH
)
;
break
;
case
3
:
blur_x_rect
(
blur_x_radius_3
gauss
src
srcStride
srcW
dst
dstStride
dstW
dstH
)
;
break
;
case
4
:
blur_x_rect
(
blur_x_radius_4
gauss
src
srcStride
srcW
dst
dstStride
dstW
dstH
)
;
break
;
default
:
SkASSERTF
(
false
"
The
radius
%
d
is
not
handled
\
n
"
radius
)
;
}
}
static
SK_ALWAYS_INLINE
Sk8h
blur_y_radius_1
(
const
Sk8h
&
s0
const
Sk8h
&
g0
const
Sk8h
&
g1
const
Sk8h
&
const
Sk8h
&
const
Sk8h
&
Sk8h
*
d01
Sk8h
*
d12
Sk8h
*
Sk8h
*
Sk8h
*
Sk8h
*
Sk8h
*
Sk8h
*
)
{
auto
v0
=
s0
.
mulHi
(
g0
)
;
auto
v1
=
s0
.
mulHi
(
g1
)
;
Sk8h
answer
=
*
d01
+
v1
;
*
d01
=
*
d12
+
v0
;
*
d12
=
v1
+
kHalf
;
return
answer
;
}
static
SK_ALWAYS_INLINE
Sk8h
blur_y_radius_2
(
const
Sk8h
&
s0
const
Sk8h
&
g0
const
Sk8h
&
g1
const
Sk8h
&
g2
const
Sk8h
&
const
Sk8h
&
Sk8h
*
d01
Sk8h
*
d12
Sk8h
*
d23
Sk8h
*
d34
Sk8h
*
Sk8h
*
Sk8h
*
Sk8h
*
)
{
auto
v0
=
s0
.
mulHi
(
g0
)
;
auto
v1
=
s0
.
mulHi
(
g1
)
;
auto
v2
=
s0
.
mulHi
(
g2
)
;
Sk8h
answer
=
*
d01
+
v2
;
*
d01
=
*
d12
+
v1
;
*
d12
=
*
d23
+
v0
;
*
d23
=
*
d34
+
v1
;
*
d34
=
v2
+
kHalf
;
return
answer
;
}
static
SK_ALWAYS_INLINE
Sk8h
blur_y_radius_3
(
const
Sk8h
&
s0
const
Sk8h
&
g0
const
Sk8h
&
g1
const
Sk8h
&
g2
const
Sk8h
&
g3
const
Sk8h
&
Sk8h
*
d01
Sk8h
*
d12
Sk8h
*
d23
Sk8h
*
d34
Sk8h
*
d45
Sk8h
*
d56
Sk8h
*
Sk8h
*
)
{
auto
v0
=
s0
.
mulHi
(
g0
)
;
auto
v1
=
s0
.
mulHi
(
g1
)
;
auto
v2
=
s0
.
mulHi
(
g2
)
;
auto
v3
=
s0
.
mulHi
(
g3
)
;
Sk8h
answer
=
*
d01
+
v3
;
*
d01
=
*
d12
+
v2
;
*
d12
=
*
d23
+
v1
;
*
d23
=
*
d34
+
v0
;
*
d34
=
*
d45
+
v1
;
*
d45
=
*
d56
+
v2
;
*
d56
=
v3
+
kHalf
;
return
answer
;
}
static
SK_ALWAYS_INLINE
Sk8h
blur_y_radius_4
(
const
Sk8h
&
s0
const
Sk8h
&
g0
const
Sk8h
&
g1
const
Sk8h
&
g2
const
Sk8h
&
g3
const
Sk8h
&
g4
Sk8h
*
d01
Sk8h
*
d12
Sk8h
*
d23
Sk8h
*
d34
Sk8h
*
d45
Sk8h
*
d56
Sk8h
*
d67
Sk8h
*
d78
)
{
auto
v0
=
s0
.
mulHi
(
g0
)
;
auto
v1
=
s0
.
mulHi
(
g1
)
;
auto
v2
=
s0
.
mulHi
(
g2
)
;
auto
v3
=
s0
.
mulHi
(
g3
)
;
auto
v4
=
s0
.
mulHi
(
g4
)
;
Sk8h
answer
=
*
d01
+
v4
;
*
d01
=
*
d12
+
v3
;
*
d12
=
*
d23
+
v2
;
*
d23
=
*
d34
+
v1
;
*
d34
=
*
d45
+
v0
;
*
d45
=
*
d56
+
v1
;
*
d56
=
*
d67
+
v2
;
*
d67
=
*
d78
+
v3
;
*
d78
=
v4
+
kHalf
;
return
answer
;
}
using
BlurY
=
decltype
(
blur_y_radius_1
)
;
static
SK_ALWAYS_INLINE
void
blur_column
(
BlurY
blur
int
radius
int
width
const
Sk8h
&
g0
const
Sk8h
&
g1
const
Sk8h
&
g2
const
Sk8h
&
g3
const
Sk8h
&
g4
const
uint8_t
*
src
size_t
srcStride
int
srcH
uint8_t
*
dst
size_t
dstStride
)
{
Sk8h
d01
{
kHalf
}
d12
{
kHalf
}
d23
{
kHalf
}
d34
{
kHalf
}
d45
{
kHalf
}
d56
{
kHalf
}
d67
{
kHalf
}
d78
{
kHalf
}
;
auto
flush
=
[
&
]
(
uint8_t
*
to
const
Sk8h
&
v0
const
Sk8h
&
v1
)
{
store
(
to
v0
width
)
;
to
+
=
dstStride
;
store
(
to
v1
width
)
;
return
to
+
dstStride
;
}
;
for
(
int
y
=
0
;
y
<
srcH
;
y
+
=
1
)
{
auto
s
=
load
(
src
width
)
;
auto
b
=
blur
(
s
g0
g1
g2
g3
g4
&
d01
&
d12
&
d23
&
d34
&
d45
&
d56
&
d67
&
d78
)
;
store
(
dst
b
width
)
;
src
+
=
srcStride
;
dst
+
=
dstStride
;
}
if
(
radius
>
=
1
)
{
dst
=
flush
(
dst
d01
d12
)
;
}
if
(
radius
>
=
2
)
{
dst
=
flush
(
dst
d23
d34
)
;
}
if
(
radius
>
=
3
)
{
dst
=
flush
(
dst
d45
d56
)
;
}
if
(
radius
>
=
4
)
{
flush
(
dst
d67
d78
)
;
}
}
static
SK_ALWAYS_INLINE
void
blur_y_rect
(
BlurY
blur
int
radius
uint16_t
*
gauss
const
uint8_t
*
src
size_t
srcStride
int
srcW
int
srcH
uint8_t
*
dst
size_t
dstStride
)
{
Sk8h
g0
{
gauss
[
0
]
}
g1
{
gauss
[
1
]
}
g2
{
gauss
[
2
]
}
g3
{
gauss
[
3
]
}
g4
{
gauss
[
4
]
}
;
int
x
=
0
;
for
(
;
x
<
=
srcW
-
8
;
x
+
=
8
)
{
blur_column
(
blur
radius
8
g0
g1
g2
g3
g4
src
srcStride
srcH
dst
dstStride
)
;
src
+
=
8
;
dst
+
=
8
;
}
int
xTail
=
srcW
-
x
;
if
(
xTail
>
0
)
{
blur_column
(
blur
radius
xTail
g0
g1
g2
g3
g4
src
srcStride
srcH
dst
dstStride
)
;
}
}
SK_ATTRIBUTE
(
noinline
)
static
void
direct_blur_y
(
int
radius
uint16_t
*
gauss
const
uint8_t
*
src
size_t
srcStride
int
srcW
int
srcH
uint8_t
*
dst
size_t
dstStride
)
{
switch
(
radius
)
{
case
1
:
blur_y_rect
(
blur_y_radius_1
1
gauss
src
srcStride
srcW
srcH
dst
dstStride
)
;
break
;
case
2
:
blur_y_rect
(
blur_y_radius_2
2
gauss
src
srcStride
srcW
srcH
dst
dstStride
)
;
break
;
case
3
:
blur_y_rect
(
blur_y_radius_3
3
gauss
src
srcStride
srcW
srcH
dst
dstStride
)
;
break
;
case
4
:
blur_y_rect
(
blur_y_radius_4
4
gauss
src
srcStride
srcW
srcH
dst
dstStride
)
;
break
;
default
:
SkASSERTF
(
false
"
The
radius
%
d
is
not
handled
\
n
"
radius
)
;
}
}
static
SkIPoint
small_blur
(
double
sigmaX
double
sigmaY
const
SkMask
&
src
SkMask
*
dst
)
{
SkASSERT
(
0
<
=
sigmaX
&
&
sigmaX
<
2
)
;
SkASSERT
(
0
<
=
sigmaY
&
&
sigmaY
<
2
)
;
SkGaussFilter
filterX
{
sigmaX
SkGaussFilter
:
:
Type
:
:
Bessel
}
filterY
{
sigmaY
SkGaussFilter
:
:
Type
:
:
Bessel
}
;
int
radiusX
=
filterX
.
radius
(
)
radiusY
=
filterY
.
radius
(
)
;
SkASSERT
(
radiusX
<
=
4
&
&
radiusY
<
=
4
)
;
auto
prepareGauss
=
[
]
(
const
SkGaussFilter
&
filter
uint16_t
*
factors
)
{
int
i
=
0
;
for
(
double
d
:
filter
)
{
factors
[
i
+
+
]
=
static_cast
<
uint16_t
>
(
round
(
d
*
(
1
<
<
16
)
)
)
;
}
}
;
uint16_t
gaussFactorsX
[
SkGaussFilter
:
:
kGaussArrayMax
]
gaussFactorsY
[
SkGaussFilter
:
:
kGaussArrayMax
]
;
prepareGauss
(
filterX
gaussFactorsX
)
;
prepareGauss
(
filterY
gaussFactorsY
)
;
*
dst
=
prepare_destination
(
radiusX
radiusY
src
)
;
if
(
src
.
fImage
=
=
nullptr
)
{
return
{
SkTo
<
int32_t
>
(
radiusX
)
SkTo
<
int32_t
>
(
radiusY
)
}
;
}
if
(
dst
-
>
fImage
=
=
nullptr
)
{
dst
-
>
fBounds
.
setEmpty
(
)
;
return
{
0
0
}
;
}
int
srcW
=
src
.
fBounds
.
width
(
)
srcH
=
src
.
fBounds
.
height
(
)
;
int
dstW
=
dst
-
>
fBounds
.
width
(
)
dstH
=
dst
-
>
fBounds
.
height
(
)
;
size_t
srcStride
=
src
.
fRowBytes
dstStride
=
dst
-
>
fRowBytes
;
direct_blur_y
(
radiusY
gaussFactorsY
src
.
fImage
srcStride
srcW
srcH
dst
-
>
fImage
+
radiusX
dstStride
)
;
direct_blur_x
(
radiusX
gaussFactorsX
dst
-
>
fImage
+
radiusX
dstStride
srcW
dst
-
>
fImage
dstStride
dstW
dstH
)
;
return
{
radiusX
radiusY
}
;
}
SkIPoint
SkMaskBlurFilter
:
:
blur
(
const
SkMask
&
src
SkMask
*
dst
)
const
{
if
(
fSigmaW
<
2
.
0
&
&
fSigmaH
<
2
.
0
)
{
return
small_blur
(
fSigmaW
fSigmaH
src
dst
)
;
}
SkSTArenaAlloc
<
1024
>
alloc
;
PlanningInterface
*
planW
=
alloc
.
make
<
PlanGauss
>
(
fSigmaW
)
;
PlanningInterface
*
planH
=
alloc
.
make
<
PlanGauss
>
(
fSigmaH
)
;
int
borderW
=
planW
-
>
border
(
)
borderH
=
planH
-
>
border
(
)
;
SkASSERT
(
borderH
>
=
0
&
&
borderW
>
=
0
)
;
*
dst
=
prepare_destination
(
borderW
borderH
src
)
;
if
(
src
.
fImage
=
=
nullptr
)
{
return
{
SkTo
<
int32_t
>
(
borderW
)
SkTo
<
int32_t
>
(
borderH
)
}
;
}
if
(
dst
-
>
fImage
=
=
nullptr
)
{
dst
-
>
fBounds
.
setEmpty
(
)
;
return
{
0
0
}
;
}
int
srcW
=
src
.
fBounds
.
width
(
)
srcH
=
src
.
fBounds
.
height
(
)
dstW
=
dst
-
>
fBounds
.
width
(
)
dstH
=
dst
-
>
fBounds
.
height
(
)
;
SkASSERT
(
srcW
>
=
0
&
&
srcH
>
=
0
&
&
dstW
>
=
0
&
&
dstH
>
=
0
)
;
auto
bufferSize
=
std
:
:
max
(
planW
-
>
bufferSize
(
)
planH
-
>
bufferSize
(
)
)
;
auto
buffer
=
alloc
.
makeArrayDefault
<
uint32_t
>
(
bufferSize
)
;
if
(
planW
-
>
needsBlur
(
)
&
&
planH
-
>
needsBlur
(
)
)
{
int
tmpW
=
srcH
tmpH
=
dstW
;
auto
tmp
=
alloc
.
makeArrayDefault
<
uint8_t
>
(
tmpW
*
tmpH
)
;
auto
scanW
=
planW
-
>
makeBlurScan
(
&
alloc
srcW
buffer
)
;
for
(
int
y
=
0
;
y
<
srcH
;
y
+
+
)
{
auto
srcStart
=
&
src
.
fImage
[
y
*
src
.
fRowBytes
]
;
auto
tmpStart
=
&
tmp
[
y
]
;
scanW
-
>
blur
(
srcStart
1
srcStart
+
srcW
tmpStart
tmpW
tmpStart
+
tmpW
*
tmpH
)
;
}
auto
scanH
=
planH
-
>
makeBlurScan
(
&
alloc
tmpW
buffer
)
;
for
(
int
y
=
0
;
y
<
tmpH
;
y
+
+
)
{
auto
tmpStart
=
&
tmp
[
y
*
tmpW
]
;
auto
dstStart
=
&
dst
-
>
fImage
[
y
]
;
scanH
-
>
blur
(
tmpStart
1
tmpStart
+
tmpW
dstStart
dst
-
>
fRowBytes
dstStart
+
dst
-
>
fRowBytes
*
dstH
)
;
}
}
else
{
SkASSERT
(
false
)
;
for
(
int
y
=
0
;
y
<
srcH
;
y
+
+
)
{
memcpy
(
&
dst
-
>
fImage
[
y
*
dst
-
>
fRowBytes
]
&
src
.
fImage
[
y
*
src
.
fRowBytes
]
dstW
)
;
}
}
return
{
SkTo
<
int32_t
>
(
borderW
)
SkTo
<
int32_t
>
(
borderH
)
}
;
}
