#
ifndef
SkRasterPipelineVizualizer_DEFINED
#
define
SkRasterPipelineVizualizer_DEFINED
#
include
"
include
/
core
/
SkBitmap
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
<
vector
>
class
SkArenaAlloc
;
class
SkBlitter
;
class
SkMatrix
;
class
SkPaint
;
class
SkPixmap
;
class
SkShader
;
class
SkSurfaceProps
;
enum
class
SkRasterPipelineOp
;
namespace
SkRasterPipelineVisualizer
{
struct
DebugStage
{
std
:
:
vector
<
SkBitmap
>
panels
;
std
:
:
vector
<
SkRasterPipelineOp
>
ops
;
}
;
SkBlitter
*
CreateBlitter
(
const
SkPixmap
&
output
const
std
:
:
vector
<
DebugStage
>
&
stages
const
SkPaint
&
const
SkMatrix
&
ctm
SkArenaAlloc
*
sk_sp
<
SkShader
>
clipShader
const
SkSurfaceProps
&
props
)
;
class
DebugStageBuilder
{
public
:
DebugStageBuilder
(
)
=
default
;
DebugStageBuilder
(
const
DebugStageBuilder
&
)
=
delete
;
DebugStageBuilder
(
DebugStageBuilder
&
&
)
=
delete
;
DebugStageBuilder
&
operator
=
(
const
DebugStageBuilder
&
)
=
delete
;
DebugStageBuilder
&
operator
=
(
DebugStageBuilder
&
&
)
=
delete
;
template
<
typename
.
.
.
Args
>
DebugStageBuilder
&
add
(
const
SkBitmap
&
panel
SkRasterPipelineOp
op
Args
.
.
.
args
)
{
std
:
:
vector
<
SkBitmap
>
panels
;
std
:
:
vector
<
SkRasterPipelineOp
>
ops
;
add_next
(
panels
ops
panel
op
args
.
.
.
)
;
fDebugStages
.
push_back
(
{
panels
ops
}
)
;
return
*
this
;
}
DebugStageBuilder
&
add
(
)
{
std
:
:
vector
<
SkBitmap
>
panels
;
std
:
:
vector
<
SkRasterPipelineOp
>
ops
;
fDebugStages
.
push_back
(
{
panels
ops
}
)
;
return
*
this
;
}
std
:
:
vector
<
DebugStage
>
build
(
)
{
return
fDebugStages
;
}
private
:
std
:
:
vector
<
DebugStage
>
fDebugStages
;
static
void
add_next
(
std
:
:
vector
<
SkBitmap
>
&
v
std
:
:
vector
<
SkRasterPipelineOp
>
&
ops
)
{
}
template
<
typename
.
.
.
Args
>
static
void
add_next
(
std
:
:
vector
<
SkBitmap
>
&
panels
std
:
:
vector
<
SkRasterPipelineOp
>
&
ops
const
SkBitmap
&
panel
SkRasterPipelineOp
op
Args
.
.
.
args
)
{
panels
.
emplace_back
(
panel
)
;
ops
.
emplace_back
(
op
)
;
add_next
(
panels
ops
args
.
.
.
)
;
}
}
;
}
#
endif
