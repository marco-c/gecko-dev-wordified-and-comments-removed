#
ifndef
SkEnumBitMask_DEFINED
#
define
SkEnumBitMask_DEFINED
#
include
"
include
/
core
/
SkTypes
.
h
"
template
<
typename
E
>
class
SkEnumBitMask
{
public
:
SK_ALWAYS_INLINE
constexpr
SkEnumBitMask
(
E
e
)
:
SkEnumBitMask
(
(
int
)
e
)
{
}
SK_ALWAYS_INLINE
constexpr
operator
bool
(
)
const
{
return
fValue
;
}
SK_ALWAYS_INLINE
bool
operator
=
=
(
SkEnumBitMask
m
)
const
{
return
fValue
=
=
m
.
fValue
;
}
SK_ALWAYS_INLINE
bool
operator
!
=
(
SkEnumBitMask
m
)
const
{
return
fValue
!
=
m
.
fValue
;
}
SK_ALWAYS_INLINE
constexpr
SkEnumBitMask
operator
|
(
SkEnumBitMask
m
)
const
{
return
SkEnumBitMask
(
fValue
|
m
.
fValue
)
;
}
SK_ALWAYS_INLINE
constexpr
SkEnumBitMask
operator
&
(
SkEnumBitMask
m
)
const
{
return
SkEnumBitMask
(
fValue
&
m
.
fValue
)
;
}
SK_ALWAYS_INLINE
constexpr
SkEnumBitMask
operator
^
(
SkEnumBitMask
m
)
const
{
return
SkEnumBitMask
(
fValue
^
m
.
fValue
)
;
}
SK_ALWAYS_INLINE
constexpr
SkEnumBitMask
operator
~
(
)
const
{
return
SkEnumBitMask
(
~
fValue
)
;
}
SK_ALWAYS_INLINE
SkEnumBitMask
&
operator
|
=
(
SkEnumBitMask
m
)
{
return
*
this
=
*
this
|
m
;
}
SK_ALWAYS_INLINE
SkEnumBitMask
&
operator
&
=
(
SkEnumBitMask
m
)
{
return
*
this
=
*
this
&
m
;
}
SK_ALWAYS_INLINE
SkEnumBitMask
&
operator
^
=
(
SkEnumBitMask
m
)
{
return
*
this
=
*
this
^
m
;
}
private
:
SK_ALWAYS_INLINE
constexpr
explicit
SkEnumBitMask
(
int
value
)
:
fValue
(
value
)
{
}
int
fValue
;
}
;
#
define
SK_MAKE_BITMASK_OPS
(
E
)
\
[
[
maybe_unused
]
]
constexpr
SkEnumBitMask
<
E
>
operator
|
(
E
a
E
b
)
{
\
return
SkEnumBitMask
<
E
>
(
a
)
|
b
;
\
}
\
[
[
maybe_unused
]
]
constexpr
SkEnumBitMask
<
E
>
operator
&
(
E
a
E
b
)
{
\
return
SkEnumBitMask
<
E
>
(
a
)
&
b
;
\
}
\
[
[
maybe_unused
]
]
constexpr
SkEnumBitMask
<
E
>
operator
^
(
E
a
E
b
)
{
\
return
SkEnumBitMask
<
E
>
(
a
)
^
b
;
\
}
\
[
[
maybe_unused
]
]
constexpr
SkEnumBitMask
<
E
>
operator
~
(
E
e
)
{
\
return
~
SkEnumBitMask
<
E
>
(
e
)
;
\
}
\
#
define
SK_DECL_BITMASK_OPS_FRIENDS
(
E
)
\
friend
constexpr
SkEnumBitMask
<
E
>
operator
|
(
E
E
)
;
\
friend
constexpr
SkEnumBitMask
<
E
>
operator
&
(
E
E
)
;
\
friend
constexpr
SkEnumBitMask
<
E
>
operator
^
(
E
E
)
;
\
friend
constexpr
SkEnumBitMask
<
E
>
operator
~
(
E
)
;
\
#
endif
