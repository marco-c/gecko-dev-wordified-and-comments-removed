#
ifndef
SkCoreBlitters_DEFINED
#
define
SkCoreBlitters_DEFINED
#
include
"
SkBitmapProcShader
.
h
"
#
include
"
SkBlitter
.
h
"
#
include
"
SkBlitRow
.
h
"
#
include
"
SkShader
.
h
"
#
include
"
SkSmallAllocator
.
h
"
class
SkRasterBlitter
:
public
SkBlitter
{
public
:
SkRasterBlitter
(
const
SkPixmap
&
device
)
:
fDevice
(
device
)
{
}
protected
:
const
SkPixmap
fDevice
;
private
:
typedef
SkBlitter
INHERITED
;
}
;
class
SkShaderBlitter
:
public
SkRasterBlitter
{
public
:
SkShaderBlitter
(
const
SkPixmap
&
device
const
SkPaint
&
paint
SkShader
:
:
Context
*
shaderContext
)
;
virtual
~
SkShaderBlitter
(
)
;
bool
resetShaderContext
(
const
SkShader
:
:
ContextRec
&
)
override
;
SkShader
:
:
Context
*
getShaderContext
(
)
const
override
{
return
fShaderContext
;
}
protected
:
uint32_t
fShaderFlags
;
const
SkShader
*
fShader
;
SkShader
:
:
Context
*
fShaderContext
;
bool
fConstInY
;
private
:
SkShaderBlitter
&
operator
=
(
const
SkShaderBlitter
&
)
;
typedef
SkRasterBlitter
INHERITED
;
}
;
class
SkA8_Coverage_Blitter
:
public
SkRasterBlitter
{
public
:
SkA8_Coverage_Blitter
(
const
SkPixmap
&
device
const
SkPaint
&
paint
)
;
void
blitH
(
int
x
int
y
int
width
)
override
;
void
blitAntiH
(
int
x
int
y
const
SkAlpha
antialias
[
]
const
int16_t
runs
[
]
)
override
;
void
blitV
(
int
x
int
y
int
height
SkAlpha
alpha
)
override
;
void
blitRect
(
int
x
int
y
int
width
int
height
)
override
;
void
blitMask
(
const
SkMask
&
const
SkIRect
&
)
override
;
const
SkPixmap
*
justAnOpaqueColor
(
uint32_t
*
)
override
;
}
;
class
SkA8_Blitter
:
public
SkRasterBlitter
{
public
:
SkA8_Blitter
(
const
SkPixmap
&
device
const
SkPaint
&
paint
)
;
void
blitH
(
int
x
int
y
int
width
)
override
;
void
blitAntiH
(
int
x
int
y
const
SkAlpha
antialias
[
]
const
int16_t
runs
[
]
)
override
;
void
blitV
(
int
x
int
y
int
height
SkAlpha
alpha
)
override
;
void
blitRect
(
int
x
int
y
int
width
int
height
)
override
;
void
blitMask
(
const
SkMask
&
const
SkIRect
&
)
override
;
const
SkPixmap
*
justAnOpaqueColor
(
uint32_t
*
)
override
;
private
:
unsigned
fSrcA
;
SkA8_Blitter
&
operator
=
(
const
SkA8_Blitter
&
)
;
typedef
SkRasterBlitter
INHERITED
;
}
;
class
SkA8_Shader_Blitter
:
public
SkShaderBlitter
{
public
:
SkA8_Shader_Blitter
(
const
SkPixmap
&
device
const
SkPaint
&
paint
SkShader
:
:
Context
*
shaderContext
)
;
virtual
~
SkA8_Shader_Blitter
(
)
;
void
blitH
(
int
x
int
y
int
width
)
override
;
void
blitAntiH
(
int
x
int
y
const
SkAlpha
antialias
[
]
const
int16_t
runs
[
]
)
override
;
void
blitMask
(
const
SkMask
&
const
SkIRect
&
)
override
;
private
:
SkXfermode
*
fXfermode
;
SkPMColor
*
fBuffer
;
uint8_t
*
fAAExpand
;
SkA8_Shader_Blitter
&
operator
=
(
const
SkA8_Shader_Blitter
&
)
;
typedef
SkShaderBlitter
INHERITED
;
}
;
class
SkARGB32_Blitter
:
public
SkRasterBlitter
{
public
:
SkARGB32_Blitter
(
const
SkPixmap
&
device
const
SkPaint
&
paint
)
;
void
blitH
(
int
x
int
y
int
width
)
override
;
void
blitAntiH
(
int
x
int
y
const
SkAlpha
antialias
[
]
const
int16_t
runs
[
]
)
override
;
void
blitV
(
int
x
int
y
int
height
SkAlpha
alpha
)
override
;
void
blitRect
(
int
x
int
y
int
width
int
height
)
override
;
void
blitMask
(
const
SkMask
&
const
SkIRect
&
)
override
;
const
SkPixmap
*
justAnOpaqueColor
(
uint32_t
*
)
override
;
void
blitAntiH2
(
int
x
int
y
U8CPU
a0
U8CPU
a1
)
override
;
void
blitAntiV2
(
int
x
int
y
U8CPU
a0
U8CPU
a1
)
override
;
protected
:
SkColor
fColor
;
SkPMColor
fPMColor
;
private
:
unsigned
fSrcA
fSrcR
fSrcG
fSrcB
;
SkARGB32_Blitter
&
operator
=
(
const
SkARGB32_Blitter
&
)
;
typedef
SkRasterBlitter
INHERITED
;
}
;
class
SkARGB32_Opaque_Blitter
:
public
SkARGB32_Blitter
{
public
:
SkARGB32_Opaque_Blitter
(
const
SkPixmap
&
device
const
SkPaint
&
paint
)
:
INHERITED
(
device
paint
)
{
SkASSERT
(
paint
.
getAlpha
(
)
=
=
0xFF
)
;
}
void
blitMask
(
const
SkMask
&
const
SkIRect
&
)
override
;
void
blitAntiH2
(
int
x
int
y
U8CPU
a0
U8CPU
a1
)
override
;
void
blitAntiV2
(
int
x
int
y
U8CPU
a0
U8CPU
a1
)
override
;
private
:
typedef
SkARGB32_Blitter
INHERITED
;
}
;
class
SkARGB32_Black_Blitter
:
public
SkARGB32_Opaque_Blitter
{
public
:
SkARGB32_Black_Blitter
(
const
SkPixmap
&
device
const
SkPaint
&
paint
)
:
INHERITED
(
device
paint
)
{
}
void
blitAntiH
(
int
x
int
y
const
SkAlpha
antialias
[
]
const
int16_t
runs
[
]
)
override
;
void
blitAntiH2
(
int
x
int
y
U8CPU
a0
U8CPU
a1
)
override
;
void
blitAntiV2
(
int
x
int
y
U8CPU
a0
U8CPU
a1
)
override
;
private
:
typedef
SkARGB32_Opaque_Blitter
INHERITED
;
}
;
class
SkARGB32_Shader_Blitter
:
public
SkShaderBlitter
{
public
:
SkARGB32_Shader_Blitter
(
const
SkPixmap
&
device
const
SkPaint
&
paint
SkShader
:
:
Context
*
shaderContext
)
;
virtual
~
SkARGB32_Shader_Blitter
(
)
;
void
blitH
(
int
x
int
y
int
width
)
override
;
void
blitV
(
int
x
int
y
int
height
SkAlpha
alpha
)
override
;
void
blitRect
(
int
x
int
y
int
width
int
height
)
override
;
void
blitAntiH
(
int
x
int
y
const
SkAlpha
[
]
const
int16_t
[
]
)
override
;
void
blitMask
(
const
SkMask
&
const
SkIRect
&
)
override
;
private
:
SkXfermode
*
fXfermode
;
SkPMColor
*
fBuffer
;
SkBlitRow
:
:
Proc32
fProc32
;
SkBlitRow
:
:
Proc32
fProc32Blend
;
bool
fShadeDirectlyIntoDevice
;
SkARGB32_Shader_Blitter
&
operator
=
(
const
SkARGB32_Shader_Blitter
&
)
;
typedef
SkShaderBlitter
INHERITED
;
}
;
SkBlitter
*
SkBlitter_ARGB32_Create
(
const
SkPixmap
&
device
const
SkPaint
&
paint
SkShader
:
:
Context
*
shaderContext
SkTBlitterAllocator
*
allocator
)
;
SkBlitter
*
SkBlitter_ARGB64_Create
(
const
SkPixmap
&
device
const
SkPaint
&
paint
SkShader
:
:
Context
*
shaderContext
SkTBlitterAllocator
*
allocator
)
;
SkBlitter
*
SkBlitter_ChooseD565
(
const
SkPixmap
&
device
const
SkPaint
&
paint
SkShader
:
:
Context
*
shaderContext
SkTBlitterAllocator
*
allocator
)
;
#
endif
