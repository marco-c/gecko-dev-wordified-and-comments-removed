#
ifndef
SkCanvasPriv_DEFINED
#
define
SkCanvasPriv_DEFINED
#
include
"
include
/
core
/
SkCanvas
.
h
"
#
include
"
include
/
private
/
base
/
SkNoncopyable
.
h
"
class
SkReadBuffer
;
class
SkWriteBuffer
;
#
if
GR_TEST_UTILS
&
&
defined
(
SK_GANESH
)
namespace
skgpu
:
:
ganesh
{
class
SurfaceDrawContext
;
class
SurfaceFillContext
;
}
#
endif
#
if
defined
(
SK_GANESH
)
class
GrRenderTargetProxy
;
#
else
using
GrRenderTargetProxy
=
SkRefCnt
;
#
endif
#
if
GRAPHITE_TEST_UTILS
namespace
skgpu
:
:
graphite
{
class
TextureProxy
;
}
#
endif
class
SkAutoCanvasMatrixPaint
:
SkNoncopyable
{
public
:
SkAutoCanvasMatrixPaint
(
SkCanvas
*
const
SkMatrix
*
const
SkPaint
*
const
SkRect
&
bounds
)
;
~
SkAutoCanvasMatrixPaint
(
)
;
private
:
SkCanvas
*
fCanvas
;
int
fSaveCount
;
}
;
class
SkCanvasPriv
{
public
:
static
bool
ReadLattice
(
SkReadBuffer
&
SkCanvas
:
:
Lattice
*
)
;
static
void
WriteLattice
(
SkWriteBuffer
&
const
SkCanvas
:
:
Lattice
&
)
;
static
size_t
WriteLattice
(
void
*
storage
const
SkCanvas
:
:
Lattice
&
)
;
static
int
SaveBehind
(
SkCanvas
*
canvas
const
SkRect
*
subset
)
{
return
canvas
-
>
only_axis_aligned_saveBehind
(
subset
)
;
}
static
void
DrawBehind
(
SkCanvas
*
canvas
const
SkPaint
&
paint
)
{
canvas
-
>
drawClippedToSaveBehind
(
paint
)
;
}
static
void
ResetClip
(
SkCanvas
*
canvas
)
{
canvas
-
>
internal_private_resetClip
(
)
;
}
static
SkBaseDevice
*
TopDevice
(
SkCanvas
*
canvas
)
{
return
canvas
-
>
topDevice
(
)
;
}
#
if
GR_TEST_UTILS
&
&
defined
(
SK_GANESH
)
static
skgpu
:
:
ganesh
:
:
SurfaceDrawContext
*
TopDeviceSurfaceDrawContext
(
SkCanvas
*
)
;
static
skgpu
:
:
ganesh
:
:
SurfaceFillContext
*
TopDeviceSurfaceFillContext
(
SkCanvas
*
)
;
#
endif
static
GrRenderTargetProxy
*
TopDeviceTargetProxy
(
SkCanvas
*
)
;
#
if
GRAPHITE_TEST_UTILS
static
skgpu
:
:
graphite
:
:
TextureProxy
*
TopDeviceGraphiteTargetProxy
(
SkCanvas
*
)
;
#
endif
static
void
GetDstClipAndMatrixCounts
(
const
SkCanvas
:
:
ImageSetEntry
set
[
]
int
count
int
*
totalDstClipCount
int
*
totalMatrixCount
)
;
static
SkCanvas
:
:
SaveLayerRec
ScaledBackdropLayer
(
const
SkRect
*
bounds
const
SkPaint
*
paint
const
SkImageFilter
*
backdrop
SkScalar
backdropScale
SkCanvas
:
:
SaveLayerFlags
saveLayerFlags
)
{
return
SkCanvas
:
:
SaveLayerRec
(
bounds
paint
backdrop
backdropScale
saveLayerFlags
)
;
}
static
SkScalar
GetBackdropScaleFactor
(
const
SkCanvas
:
:
SaveLayerRec
&
rec
)
{
return
rec
.
fExperimentalBackdropScale
;
}
static
void
SetBackdropScaleFactor
(
SkCanvas
:
:
SaveLayerRec
*
rec
SkScalar
scale
)
{
rec
-
>
fExperimentalBackdropScale
=
scale
;
}
}
;
constexpr
int
kMaxPictureOpsToUnrollInsteadOfRef
=
1
;
#
endif
