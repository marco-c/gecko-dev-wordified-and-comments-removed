#
ifndef
SkCanvasPriv_DEFINED
#
define
SkCanvasPriv_DEFINED
#
include
"
include
/
core
/
SkCanvas
.
h
"
#
include
"
include
/
private
/
SkNoncopyable
.
h
"
class
SkReadBuffer
;
class
SkWriteBuffer
;
class
SkAutoCanvasMatrixPaint
:
SkNoncopyable
{
public
:
SkAutoCanvasMatrixPaint
(
SkCanvas
*
const
SkMatrix
*
const
SkPaint
*
const
SkRect
&
bounds
)
;
~
SkAutoCanvasMatrixPaint
(
)
;
private
:
SkCanvas
*
fCanvas
;
int
fSaveCount
;
}
;
class
SkCanvasPriv
{
public
:
enum
{
kDontClipToLayer_SaveLayerFlag
=
SkCanvas
:
:
kDontClipToLayer_PrivateSaveLayerFlag
}
;
static
bool
ReadLattice
(
SkReadBuffer
&
SkCanvas
:
:
Lattice
*
)
;
static
void
WriteLattice
(
SkWriteBuffer
&
const
SkCanvas
:
:
Lattice
&
)
;
static
size_t
WriteLattice
(
void
*
storage
const
SkCanvas
:
:
Lattice
&
)
;
static
SkCanvas
:
:
SaveLayerFlags
LegacySaveFlagsToSaveLayerFlags
(
uint32_t
legacySaveFlags
)
;
static
int
SaveBehind
(
SkCanvas
*
canvas
const
SkRect
*
subset
)
{
return
canvas
-
>
only_axis_aligned_saveBehind
(
subset
)
;
}
static
void
DrawBehind
(
SkCanvas
*
canvas
const
SkPaint
&
paint
)
{
canvas
-
>
drawClippedToSaveBehind
(
paint
)
;
}
static
void
GetDstClipAndMatrixCounts
(
const
SkCanvas
:
:
ImageSetEntry
set
[
]
int
count
int
*
totalDstClipCount
int
*
totalMatrixCount
)
;
}
;
#
endif
