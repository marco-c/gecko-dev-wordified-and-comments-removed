#
ifndef
SkValue_DEFINED
#
define
SkValue_DEFINED
#
include
"
SkTypes
.
h
"
#
include
"
SkTemplates
.
h
"
class
SkValue
{
public
:
enum
Type
:
uint32_t
{
Null
Byte
S16
U16
S32
U32
S64
U64
F32
F64
Bytes
S16s
U16s
S32s
U32s
S64s
U64s
F32s
F64s
Array
}
;
enum
Key
:
uint32_t
{
}
;
SkValue
(
)
;
SkValue
(
const
SkValue
&
)
;
SkValue
(
SkValue
&
&
)
;
SkValue
&
operator
=
(
const
SkValue
&
)
;
SkValue
&
operator
=
(
SkValue
&
&
)
;
~
SkValue
(
)
;
static
SkValue
FromS32
(
int32_t
)
;
static
SkValue
FromU32
(
uint32_t
)
;
static
SkValue
FromF32
(
float
)
;
static
SkValue
FromBytes
(
const
void
*
size_t
)
;
static
SkValue
Object
(
Type
)
;
Type
type
(
)
const
;
int32_t
s32
(
)
const
;
uint32_t
u32
(
)
const
;
float
f32
(
)
const
;
const
void
*
bytes
(
)
const
;
size_t
count
(
)
const
;
void
set
(
Key
SkValue
)
;
const
SkValue
*
get
(
Key
)
const
;
void
foreach
(
std
:
:
function
<
void
(
Key
const
SkValue
&
)
>
)
const
;
private
:
class
Bytes
;
class
Object
;
Type
fType
;
union
{
int32_t
fS32
;
uint32_t
fU32
;
float
fF32
;
class
Bytes
*
fBytes
;
class
Object
*
fObject
;
}
;
}
;
#
endif
