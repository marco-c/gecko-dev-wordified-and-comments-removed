#
ifndef
SkMaskFilterBase_DEFINED
#
define
SkMaskFilterBase_DEFINED
#
include
"
include
/
core
/
SkBlurTypes
.
h
"
#
include
"
include
/
core
/
SkFlattenable
.
h
"
#
include
"
include
/
core
/
SkMaskFilter
.
h
"
#
include
"
include
/
core
/
SkPaint
.
h
"
#
include
"
include
/
core
/
SkStrokeRec
.
h
"
#
include
"
include
/
private
/
base
/
SkNoncopyable
.
h
"
#
include
"
src
/
base
/
SkTLazy
.
h
"
#
include
"
src
/
core
/
SkMask
.
h
"
class
GrClip
;
struct
GrFPArgs
;
class
GrFragmentProcessor
;
class
GrPaint
;
class
GrRecordingContext
;
class
GrRenderTarget
;
namespace
skgpu
{
namespace
ganesh
{
class
SurfaceDrawContext
;
}
}
class
GrResourceProvider
;
class
GrStyledShape
;
class
GrSurfaceProxyView
;
class
GrTexture
;
class
GrTextureProxy
;
class
SkBitmap
;
class
SkBlitter
;
class
SkCachedData
;
class
SkMatrix
;
class
SkPath
;
class
SkRasterClip
;
class
SkRRect
;
class
SkMaskFilterBase
:
public
SkMaskFilter
{
public
:
virtual
SkMask
:
:
Format
getFormat
(
)
const
=
0
;
virtual
bool
filterMask
(
SkMaskBuilder
*
dst
const
SkMask
&
src
const
SkMatrix
&
SkIPoint
*
margin
)
const
=
0
;
enum
class
Type
{
kBlur
kEmboss
kSDF
kShader
kTable
}
;
virtual
Type
type
(
)
const
=
0
;
virtual
void
computeFastBounds
(
const
SkRect
&
src
SkRect
*
dest
)
const
;
struct
BlurRec
{
SkScalar
fSigma
;
SkBlurStyle
fStyle
;
}
;
virtual
bool
asABlur
(
BlurRec
*
)
const
;
virtual
sk_sp
<
SkImageFilter
>
asImageFilter
(
const
SkMatrix
&
ctm
)
const
;
static
SkFlattenable
:
:
Type
GetFlattenableType
(
)
{
return
kSkMaskFilter_Type
;
}
SkFlattenable
:
:
Type
getFlattenableType
(
)
const
override
{
return
kSkMaskFilter_Type
;
}
protected
:
SkMaskFilterBase
(
)
{
}
enum
FilterReturn
{
kFalse_FilterReturn
kTrue_FilterReturn
kUnimplemented_FilterReturn
}
;
class
NinePatch
:
:
:
SkNoncopyable
{
public
:
NinePatch
(
const
SkMask
&
mask
SkIRect
outerRect
SkIPoint
center
SkCachedData
*
cache
)
:
fMask
(
mask
)
fOuterRect
(
outerRect
)
fCenter
(
center
)
fCache
(
cache
)
{
}
~
NinePatch
(
)
;
SkMask
fMask
;
SkIRect
fOuterRect
;
SkIPoint
fCenter
;
SkCachedData
*
fCache
=
nullptr
;
}
;
virtual
FilterReturn
filterRectsToNine
(
const
SkRect
[
]
int
count
const
SkMatrix
&
const
SkIRect
&
clipBounds
SkTLazy
<
NinePatch
>
*
)
const
;
virtual
FilterReturn
filterRRectToNine
(
const
SkRRect
&
const
SkMatrix
&
const
SkIRect
&
clipBounds
SkTLazy
<
NinePatch
>
*
)
const
;
private
:
friend
class
SkDraw
;
friend
class
SkDrawBase
;
bool
filterPath
(
const
SkPath
&
devPath
const
SkMatrix
&
ctm
const
SkRasterClip
&
SkBlitter
*
SkStrokeRec
:
:
InitStyle
)
const
;
bool
filterRRect
(
const
SkRRect
&
devRRect
const
SkMatrix
&
ctm
const
SkRasterClip
&
SkBlitter
*
)
const
;
using
INHERITED
=
SkFlattenable
;
}
;
inline
SkMaskFilterBase
*
as_MFB
(
SkMaskFilter
*
mf
)
{
return
static_cast
<
SkMaskFilterBase
*
>
(
mf
)
;
}
inline
const
SkMaskFilterBase
*
as_MFB
(
const
SkMaskFilter
*
mf
)
{
return
static_cast
<
const
SkMaskFilterBase
*
>
(
mf
)
;
}
inline
const
SkMaskFilterBase
*
as_MFB
(
const
sk_sp
<
SkMaskFilter
>
&
mf
)
{
return
static_cast
<
SkMaskFilterBase
*
>
(
mf
.
get
(
)
)
;
}
extern
void
sk_register_blur_maskfilter_createproc
(
)
;
#
endif
