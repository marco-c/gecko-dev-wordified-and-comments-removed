#
ifndef
SkBitmapDevice_DEFINED
#
define
SkBitmapDevice_DEFINED
#
include
"
include
/
core
/
SkBitmap
.
h
"
#
include
"
include
/
core
/
SkCanvas
.
h
"
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
include
/
core
/
SkScalar
.
h
"
#
include
"
include
/
core
/
SkSize
.
h
"
#
include
"
src
/
core
/
SkDevice
.
h
"
#
include
"
src
/
core
/
SkGlyphRunPainter
.
h
"
#
include
"
src
/
core
/
SkRasterClip
.
h
"
#
include
"
src
/
core
/
SkRasterClipStack
.
h
"
class
SkImageFilterCache
;
class
SkMatrix
;
class
SkPaint
;
class
SkPath
;
class
SkPixmap
;
class
SkRasterHandleAllocator
;
class
SkRRect
;
class
SkSurface
;
class
SkSurfaceProps
;
struct
SkPoint
;
#
ifdef
SK_ENABLE_SKSL
class
SkMesh
;
#
endif
class
SkBitmapDevice
:
public
SkBaseDevice
{
public
:
SkBitmapDevice
(
const
SkBitmap
&
bitmap
)
;
static
SkBitmapDevice
*
Create
(
const
SkImageInfo
&
info
)
;
SkBitmapDevice
(
const
SkBitmap
&
bitmap
const
SkSurfaceProps
&
surfaceProps
void
*
externalHandle
=
nullptr
)
;
static
SkBitmapDevice
*
Create
(
const
SkImageInfo
&
const
SkSurfaceProps
&
SkRasterHandleAllocator
*
=
nullptr
)
;
protected
:
void
*
getRasterHandle
(
)
const
override
{
return
fRasterHandle
;
}
void
drawPaint
(
const
SkPaint
&
paint
)
override
;
void
drawPoints
(
SkCanvas
:
:
PointMode
mode
size_t
count
const
SkPoint
[
]
const
SkPaint
&
paint
)
override
;
void
drawRect
(
const
SkRect
&
r
const
SkPaint
&
paint
)
override
;
void
drawOval
(
const
SkRect
&
oval
const
SkPaint
&
paint
)
override
;
void
drawRRect
(
const
SkRRect
&
rr
const
SkPaint
&
paint
)
override
;
void
drawPath
(
const
SkPath
&
const
SkPaint
&
bool
pathIsMutable
)
override
;
void
drawImageRect
(
const
SkImage
*
const
SkRect
*
src
const
SkRect
&
dst
const
SkSamplingOptions
&
const
SkPaint
&
SkCanvas
:
:
SrcRectConstraint
)
override
;
void
drawVertices
(
const
SkVertices
*
sk_sp
<
SkBlender
>
const
SkPaint
&
bool
)
override
;
#
ifdef
SK_ENABLE_SKSL
void
drawMesh
(
const
SkMesh
&
sk_sp
<
SkBlender
>
const
SkPaint
&
)
override
;
#
endif
void
drawAtlas
(
const
SkRSXform
[
]
const
SkRect
[
]
const
SkColor
[
]
int
count
sk_sp
<
SkBlender
>
const
SkPaint
&
)
override
;
void
drawDevice
(
SkBaseDevice
*
const
SkSamplingOptions
&
const
SkPaint
&
)
override
;
void
drawSpecial
(
SkSpecialImage
*
const
SkMatrix
&
const
SkSamplingOptions
&
const
SkPaint
&
)
override
;
sk_sp
<
SkSpecialImage
>
makeSpecial
(
const
SkBitmap
&
)
override
;
sk_sp
<
SkSpecialImage
>
makeSpecial
(
const
SkImage
*
)
override
;
sk_sp
<
SkSpecialImage
>
snapSpecial
(
const
SkIRect
&
bool
forceCopy
=
false
)
override
;
void
setImmutable
(
)
override
{
fBitmap
.
setImmutable
(
)
;
}
void
onDrawGlyphRunList
(
SkCanvas
*
const
sktext
:
:
GlyphRunList
&
const
SkPaint
&
initialPaint
const
SkPaint
&
drawingPaint
)
override
;
bool
onReadPixels
(
const
SkPixmap
&
int
x
int
y
)
override
;
bool
onWritePixels
(
const
SkPixmap
&
int
int
)
override
;
bool
onPeekPixels
(
SkPixmap
*
)
override
;
bool
onAccessPixels
(
SkPixmap
*
)
override
;
void
onSave
(
)
override
;
void
onRestore
(
)
override
;
void
onClipRect
(
const
SkRect
&
rect
SkClipOp
bool
aa
)
override
;
void
onClipRRect
(
const
SkRRect
&
rrect
SkClipOp
bool
aa
)
override
;
void
onClipPath
(
const
SkPath
&
path
SkClipOp
bool
aa
)
override
;
void
onClipShader
(
sk_sp
<
SkShader
>
)
override
;
void
onClipRegion
(
const
SkRegion
&
deviceRgn
SkClipOp
)
override
;
void
onReplaceClip
(
const
SkIRect
&
rect
)
override
;
bool
onClipIsAA
(
)
const
override
;
bool
onClipIsWideOpen
(
)
const
override
;
void
onAsRgnClip
(
SkRegion
*
)
const
override
;
void
validateDevBounds
(
const
SkIRect
&
r
)
override
;
ClipType
onGetClipType
(
)
const
override
;
SkIRect
onDevClipBounds
(
)
const
override
;
void
drawBitmap
(
const
SkBitmap
&
const
SkMatrix
&
const
SkRect
*
dstOrNull
const
SkSamplingOptions
&
const
SkPaint
&
)
;
private
:
friend
class
SkCanvas
;
friend
class
SkDraw
;
friend
class
SkDrawBase
;
friend
class
SkDrawTiler
;
friend
class
SkSurface_Raster
;
class
BDDraw
;
void
replaceBitmapBackendForRasterSurface
(
const
SkBitmap
&
)
override
;
SkBaseDevice
*
onCreateDevice
(
const
CreateInfo
&
const
SkPaint
*
)
override
;
sk_sp
<
SkSurface
>
makeSurface
(
const
SkImageInfo
&
const
SkSurfaceProps
&
)
override
;
SkImageFilterCache
*
getImageFilterCache
(
)
override
;
SkBitmap
fBitmap
;
void
*
fRasterHandle
=
nullptr
;
SkRasterClipStack
fRCStack
;
SkGlyphRunListPainterCPU
fGlyphPainter
;
using
INHERITED
=
SkBaseDevice
;
}
;
#
endif
