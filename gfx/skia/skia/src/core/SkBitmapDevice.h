#
ifndef
SkBitmapDevice_DEFINED
#
define
SkBitmapDevice_DEFINED
#
include
"
SkBitmap
.
h
"
#
include
"
SkCanvas
.
h
"
#
include
"
SkColor
.
h
"
#
include
"
SkDevice
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkPixelRef
.
h
"
#
include
"
SkRasterClip
.
h
"
#
include
"
SkRasterClipStack
.
h
"
#
include
"
SkRect
.
h
"
#
include
"
SkScalar
.
h
"
#
include
"
SkSize
.
h
"
#
include
"
SkSurfaceProps
.
h
"
class
SkImageFilterCache
;
class
SkMatrix
;
class
SkPaint
;
class
SkPath
;
class
SkPixelRef
;
class
SkPixmap
;
class
SkRasterHandleAllocator
;
class
SkRRect
;
class
SkSurface
;
struct
SkPoint
;
class
SK_API
SkBitmapDevice
:
public
SkBaseDevice
{
public
:
SkBitmapDevice
(
const
SkBitmap
&
bitmap
)
;
static
SkBitmapDevice
*
Create
(
const
SkImageInfo
&
info
)
;
SkBitmapDevice
(
const
SkBitmap
&
bitmap
const
SkSurfaceProps
&
surfaceProps
void
*
externalHandle
=
nullptr
)
;
static
SkBitmapDevice
*
Create
(
const
SkImageInfo
&
const
SkSurfaceProps
&
SkRasterHandleAllocator
*
=
nullptr
)
;
protected
:
bool
onShouldDisableLCD
(
const
SkPaint
&
)
const
override
;
void
*
getRasterHandle
(
)
const
override
{
return
fRasterHandle
;
}
void
drawPaint
(
const
SkPaint
&
paint
)
override
;
void
drawPoints
(
SkCanvas
:
:
PointMode
mode
size_t
count
const
SkPoint
[
]
const
SkPaint
&
paint
)
override
;
void
drawRect
(
const
SkRect
&
r
const
SkPaint
&
paint
)
override
;
void
drawOval
(
const
SkRect
&
oval
const
SkPaint
&
paint
)
override
;
void
drawRRect
(
const
SkRRect
&
rr
const
SkPaint
&
paint
)
override
;
void
drawPath
(
const
SkPath
&
const
SkPaint
&
const
SkMatrix
*
prePathMatrix
bool
pathIsMutable
)
override
;
void
drawBitmap
(
const
SkBitmap
&
const
SkMatrix
&
const
SkPaint
&
)
override
;
void
drawSprite
(
const
SkBitmap
&
int
x
int
y
const
SkPaint
&
)
override
;
void
drawBitmapRect
(
const
SkBitmap
&
const
SkRect
*
const
SkRect
&
const
SkPaint
&
SkCanvas
:
:
SrcRectConstraint
)
override
;
void
drawText
(
const
void
*
text
size_t
len
SkScalar
x
SkScalar
y
const
SkPaint
&
)
override
;
void
drawPosText
(
const
void
*
text
size_t
len
const
SkScalar
pos
[
]
int
scalarsPerPos
const
SkPoint
&
offset
const
SkPaint
&
paint
)
override
;
void
drawVertices
(
const
SkVertices
*
SkBlendMode
const
SkPaint
&
)
override
;
void
drawDevice
(
SkBaseDevice
*
int
x
int
y
const
SkPaint
&
)
override
;
void
drawSpecial
(
SkSpecialImage
*
int
x
int
y
const
SkPaint
&
)
override
;
sk_sp
<
SkSpecialImage
>
makeSpecial
(
const
SkBitmap
&
)
override
;
sk_sp
<
SkSpecialImage
>
makeSpecial
(
const
SkImage
*
)
override
;
sk_sp
<
SkSpecialImage
>
snapSpecial
(
)
override
;
bool
onReadPixels
(
const
SkImageInfo
&
void
*
size_t
int
x
int
y
)
override
;
bool
onWritePixels
(
const
SkImageInfo
&
const
void
*
size_t
int
int
)
override
;
bool
onPeekPixels
(
SkPixmap
*
)
override
;
bool
onAccessPixels
(
SkPixmap
*
)
override
;
void
onSave
(
)
override
;
void
onRestore
(
)
override
;
void
onClipRect
(
const
SkRect
&
rect
SkClipOp
bool
aa
)
override
;
void
onClipRRect
(
const
SkRRect
&
rrect
SkClipOp
bool
aa
)
override
;
void
onClipPath
(
const
SkPath
&
path
SkClipOp
bool
aa
)
override
;
void
onClipRegion
(
const
SkRegion
&
deviceRgn
SkClipOp
)
override
;
void
onSetDeviceClipRestriction
(
SkIRect
*
mutableClipRestriction
)
override
;
bool
onClipIsAA
(
)
const
override
;
void
onAsRgnClip
(
SkRegion
*
)
const
override
;
void
validateDevBounds
(
const
SkIRect
&
r
)
override
;
ClipType
onGetClipType
(
)
const
override
;
private
:
friend
class
SkCanvas
;
friend
struct
DeviceCM
;
friend
class
SkDraw
;
friend
class
SkDrawIter
;
friend
class
SkDeviceFilteredPaint
;
friend
class
SkSurface_Raster
;
friend
class
SkThreadedBMPDevice
;
class
BDDraw
;
void
replaceBitmapBackendForRasterSurface
(
const
SkBitmap
&
)
override
;
SkBaseDevice
*
onCreateDevice
(
const
CreateInfo
&
const
SkPaint
*
)
override
;
sk_sp
<
SkSurface
>
makeSurface
(
const
SkImageInfo
&
const
SkSurfaceProps
&
)
override
;
SkImageFilterCache
*
getImageFilterCache
(
)
override
;
SkBitmap
fBitmap
;
void
*
fRasterHandle
=
nullptr
;
SkRasterClipStack
fRCStack
;
typedef
SkBaseDevice
INHERITED
;
}
;
#
endif
