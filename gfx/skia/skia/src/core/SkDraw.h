#
ifndef
SkDraw_DEFINED
#
define
SkDraw_DEFINED
#
include
"
include
/
core
/
SkCanvas
.
h
"
#
include
"
include
/
core
/
SkPaint
.
h
"
#
include
"
include
/
core
/
SkPixmap
.
h
"
#
include
"
include
/
core
/
SkStrokeRec
.
h
"
#
include
"
include
/
core
/
SkVertices
.
h
"
#
include
"
src
/
core
/
SkGlyphRunPainter
.
h
"
#
include
"
src
/
core
/
SkMask
.
h
"
class
SkBitmap
;
class
SkClipStack
;
class
SkBaseDevice
;
class
SkBlitter
;
class
SkMatrix
;
class
SkPath
;
class
SkRegion
;
class
SkRasterClip
;
struct
SkRect
;
class
SkRRect
;
class
SkDraw
:
public
SkGlyphRunListPainter
:
:
BitmapDevicePainter
{
public
:
SkDraw
(
)
;
void
drawPaint
(
const
SkPaint
&
)
const
;
void
drawPoints
(
SkCanvas
:
:
PointMode
size_t
count
const
SkPoint
[
]
const
SkPaint
&
SkBaseDevice
*
)
const
;
void
drawRect
(
const
SkRect
&
prePaintRect
const
SkPaint
&
const
SkMatrix
*
paintMatrix
const
SkRect
*
postPaintRect
)
const
;
void
drawRect
(
const
SkRect
&
rect
const
SkPaint
&
paint
)
const
{
this
-
>
drawRect
(
rect
paint
nullptr
nullptr
)
;
}
void
drawRRect
(
const
SkRRect
&
const
SkPaint
&
)
const
;
void
drawPath
(
const
SkPath
&
path
const
SkPaint
&
paint
const
SkMatrix
*
prePathMatrix
=
nullptr
bool
pathIsMutable
=
false
)
const
{
this
-
>
drawPath
(
path
paint
prePathMatrix
pathIsMutable
false
)
;
}
void
drawBitmap
(
const
SkBitmap
&
const
SkMatrix
&
const
SkRect
*
dstOrNull
const
SkPaint
&
)
const
;
void
drawSprite
(
const
SkBitmap
&
int
x
int
y
const
SkPaint
&
)
const
;
void
drawGlyphRunList
(
const
SkGlyphRunList
&
glyphRunList
SkGlyphRunListPainter
*
glyphPainter
)
const
;
void
drawVertices
(
SkVertices
:
:
VertexMode
mode
int
vertexCount
const
SkPoint
vertices
[
]
const
SkPoint
textures
[
]
const
SkColor
colors
[
]
const
SkVertices
:
:
BoneIndices
boneIndices
[
]
const
SkVertices
:
:
BoneWeights
boneWeights
[
]
SkBlendMode
bmode
const
uint16_t
indices
[
]
int
ptCount
const
SkPaint
&
paint
const
SkVertices
:
:
Bone
bones
[
]
int
boneCount
)
const
;
void
drawAtlas
(
const
SkImage
*
const
SkRSXform
[
]
const
SkRect
[
]
const
SkColor
[
]
int
count
SkBlendMode
const
SkPaint
&
)
;
void
drawPathCoverage
(
const
SkPath
&
src
const
SkPaint
&
paint
SkBlitter
*
customBlitter
=
nullptr
)
const
{
bool
isHairline
=
paint
.
getStyle
(
)
=
=
SkPaint
:
:
kStroke_Style
&
&
paint
.
getStrokeWidth
(
)
>
0
;
this
-
>
drawPath
(
src
paint
nullptr
false
!
isHairline
customBlitter
)
;
}
void
paintPaths
(
SkDrawableGlyphBuffer
*
drawables
SkScalar
scale
const
SkPaint
&
paint
)
const
override
;
void
paintMasks
(
SkDrawableGlyphBuffer
*
drawables
const
SkPaint
&
paint
)
const
override
;
static
bool
ComputeMaskBounds
(
const
SkRect
&
devPathBounds
const
SkIRect
*
clipBounds
const
SkMaskFilter
*
filter
const
SkMatrix
*
filterMatrix
SkIRect
*
bounds
)
;
static
bool
DrawToMask
(
const
SkPath
&
devPath
const
SkIRect
*
clipBounds
const
SkMaskFilter
*
const
SkMatrix
*
filterMatrix
SkMask
*
mask
SkMask
:
:
CreateMode
mode
SkStrokeRec
:
:
InitStyle
style
)
;
void
drawDevMask
(
const
SkMask
&
mask
const
SkPaint
&
)
const
;
enum
RectType
{
kHair_RectType
kFill_RectType
kStroke_RectType
kPath_RectType
}
;
static
RectType
ComputeRectType
(
const
SkPaint
&
const
SkMatrix
&
SkPoint
*
strokeSize
)
;
static
SkScalar
ComputeResScaleForStroking
(
const
SkMatrix
&
matrix
SkScalar
*
overscale
=
nullptr
)
;
private
:
void
drawBitmapAsMask
(
const
SkBitmap
&
const
SkPaint
&
)
const
;
void
drawPath
(
const
SkPath
&
const
SkPaint
&
const
SkMatrix
*
preMatrix
bool
pathIsMutable
bool
drawCoverage
SkBlitter
*
customBlitter
=
nullptr
)
const
;
void
drawLine
(
const
SkPoint
[
2
]
const
SkPaint
&
)
const
;
void
drawDevPath
(
const
SkPath
&
devPath
const
SkPaint
&
paint
bool
drawCoverage
SkBlitter
*
customBlitter
bool
doFill
)
const
;
bool
SK_WARN_UNUSED_RESULT
computeConservativeLocalClipBounds
(
SkRect
*
bounds
)
const
;
public
:
SkPixmap
fDst
;
const
SkMatrix
*
fMatrix
{
nullptr
}
;
const
SkRasterClip
*
fRC
{
nullptr
}
;
const
SkPixmap
*
fCoverage
{
nullptr
}
;
#
ifdef
SK_DEBUG
void
validate
(
)
const
;
#
else
void
validate
(
)
const
{
}
#
endif
}
;
#
endif
