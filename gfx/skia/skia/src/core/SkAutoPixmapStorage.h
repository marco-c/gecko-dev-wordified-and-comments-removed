#
ifndef
SkAutoPixmapStorage_DEFINED
#
define
SkAutoPixmapStorage_DEFINED
#
include
"
SkMalloc
.
h
"
#
include
"
SkPixmap
.
h
"
class
SK_API
SkAutoPixmapStorage
:
public
SkPixmap
{
public
:
SkAutoPixmapStorage
(
)
;
~
SkAutoPixmapStorage
(
)
;
bool
tryAlloc
(
const
SkImageInfo
&
)
;
void
alloc
(
const
SkImageInfo
&
)
;
static
size_t
AllocSize
(
const
SkImageInfo
&
info
size_t
*
rowBytes
)
;
const
SkData
*
SK_WARN_UNUSED_RESULT
detachPixelsAsData
(
)
;
void
reset
(
)
{
this
-
>
freeStorage
(
)
;
this
-
>
INHERITED
:
:
reset
(
)
;
}
void
reset
(
const
SkImageInfo
&
info
const
void
*
addr
size_t
rb
SkColorTable
*
ctable
=
NULL
)
{
this
-
>
freeStorage
(
)
;
this
-
>
INHERITED
:
:
reset
(
info
addr
rb
ctable
)
;
}
void
reset
(
const
SkImageInfo
&
info
)
{
this
-
>
freeStorage
(
)
;
this
-
>
INHERITED
:
:
reset
(
info
)
;
}
bool
SK_WARN_UNUSED_RESULT
reset
(
const
SkMask
&
mask
)
{
this
-
>
freeStorage
(
)
;
return
this
-
>
INHERITED
:
:
reset
(
mask
)
;
}
private
:
void
*
fStorage
;
void
freeStorage
(
)
{
sk_free
(
fStorage
)
;
fStorage
=
nullptr
;
}
typedef
SkPixmap
INHERITED
;
}
;
#
endif
