#
ifndef
SkRasterPipelineOpContexts_DEFINED
#
define
SkRasterPipelineOpContexts_DEFINED
inline
static
constexpr
int
SkRasterPipeline_kMaxStride
=
16
;
inline
static
constexpr
int
SkRasterPipeline_kMaxStride_highp
=
8
;
struct
SkRasterPipeline_MemoryCtx
{
void
*
pixels
;
int
stride
;
}
;
struct
SkRasterPipeline_GatherCtx
{
const
void
*
pixels
;
int
stride
;
float
width
;
float
height
;
float
weights
[
16
]
;
bool
roundDownAtInteger
=
false
;
}
;
struct
SkRasterPipeline_SamplerCtx
{
float
x
[
SkRasterPipeline_kMaxStride_highp
]
;
float
y
[
SkRasterPipeline_kMaxStride_highp
]
;
float
fx
[
SkRasterPipeline_kMaxStride_highp
]
;
float
fy
[
SkRasterPipeline_kMaxStride_highp
]
;
float
scalex
[
SkRasterPipeline_kMaxStride_highp
]
;
float
scaley
[
SkRasterPipeline_kMaxStride_highp
]
;
float
weights
[
16
]
;
float
wx
[
4
]
[
SkRasterPipeline_kMaxStride_highp
]
;
float
wy
[
4
]
[
SkRasterPipeline_kMaxStride_highp
]
;
}
;
struct
SkRasterPipeline_TileCtx
{
float
scale
;
float
invScale
;
int
mirrorBiasDir
=
-
1
;
}
;
struct
SkRasterPipeline_DecalTileCtx
{
uint32_t
mask
[
SkRasterPipeline_kMaxStride
]
;
float
limit_x
;
float
limit_y
;
float
inclusiveEdge_x
=
0
;
float
inclusiveEdge_y
=
0
;
}
;
struct
SkRasterPipeline_MipmapCtx
{
float
x
[
SkRasterPipeline_kMaxStride_highp
]
;
float
y
[
SkRasterPipeline_kMaxStride_highp
]
;
float
r
[
SkRasterPipeline_kMaxStride_highp
]
;
float
g
[
SkRasterPipeline_kMaxStride_highp
]
;
float
b
[
SkRasterPipeline_kMaxStride_highp
]
;
float
a
[
SkRasterPipeline_kMaxStride_highp
]
;
float
scaleX
;
float
scaleY
;
float
lowerWeight
;
}
;
struct
SkRasterPipeline_CoordClampCtx
{
float
min_x
min_y
;
float
max_x
max_y
;
}
;
struct
SkRasterPipeline_CallbackCtx
{
void
(
*
fn
)
(
SkRasterPipeline_CallbackCtx
*
self
int
active_pixels
)
;
float
rgba
[
4
*
SkRasterPipeline_kMaxStride_highp
]
;
float
*
read_from
=
rgba
;
}
;
struct
SkRasterPipelineStage
;
struct
SkRasterPipeline_RewindCtx
{
float
r
[
SkRasterPipeline_kMaxStride_highp
]
;
float
g
[
SkRasterPipeline_kMaxStride_highp
]
;
float
b
[
SkRasterPipeline_kMaxStride_highp
]
;
float
a
[
SkRasterPipeline_kMaxStride_highp
]
;
float
dr
[
SkRasterPipeline_kMaxStride_highp
]
;
float
dg
[
SkRasterPipeline_kMaxStride_highp
]
;
float
db
[
SkRasterPipeline_kMaxStride_highp
]
;
float
da
[
SkRasterPipeline_kMaxStride_highp
]
;
SkRasterPipelineStage
*
stage
;
}
;
struct
SkRasterPipeline_GradientCtx
{
size_t
stopCount
;
float
*
fs
[
4
]
;
float
*
bs
[
4
]
;
float
*
ts
;
}
;
struct
SkRasterPipeline_EvenlySpaced2StopGradientCtx
{
float
f
[
4
]
;
float
b
[
4
]
;
}
;
struct
SkRasterPipeline_2PtConicalCtx
{
uint32_t
fMask
[
SkRasterPipeline_kMaxStride_highp
]
;
float
fP0
fP1
;
}
;
struct
SkRasterPipeline_UniformColorCtx
{
float
r
g
b
a
;
uint16_t
rgba
[
4
]
;
}
;
struct
SkRasterPipeline_EmbossCtx
{
SkRasterPipeline_MemoryCtx
mul
add
;
}
;
struct
SkRasterPipeline_TablesCtx
{
const
uint8_t
*
r
*
g
*
b
*
a
;
}
;
struct
SkRasterPipeline_BinaryOpCtx
{
float
*
dst
;
const
float
*
src
;
}
;
struct
SkRasterPipeline_TernaryOpCtx
{
float
*
dst
;
const
float
*
src0
;
const
float
*
src1
;
}
;
struct
SkRasterPipeline_SwizzleCtx
{
float
*
ptr
;
uint16_t
offsets
[
4
]
;
}
;
struct
SkRasterPipeline_ShuffleCtx
{
float
*
ptr
;
int
count
;
uint16_t
offsets
[
16
]
;
}
;
struct
SkRasterPipeline_SwizzleCopyCtx
{
float
*
dst
;
float
*
src
;
uint16_t
offsets
[
4
]
;
}
;
struct
SkRasterPipeline_CopyIndirectCtx
{
float
*
dst
;
const
float
*
src
;
const
uint32_t
*
indirectOffset
;
uint32_t
indirectLimit
;
uint32_t
slots
;
}
;
struct
SkRasterPipeline_SwizzleCopyIndirectCtx
:
public
SkRasterPipeline_CopyIndirectCtx
{
uint16_t
offsets
[
4
]
;
}
;
struct
SkRasterPipeline_BranchCtx
{
int
offset
;
}
;
struct
SkRasterPipeline_BranchIfEqualCtx
:
public
SkRasterPipeline_BranchCtx
{
int
value
;
const
int
*
ptr
;
}
;
struct
SkRasterPipeline_CaseOpCtx
{
int
expectedValue
;
int
*
ptr
;
}
;
#
endif
