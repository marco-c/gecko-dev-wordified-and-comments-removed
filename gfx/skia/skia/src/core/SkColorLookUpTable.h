#
ifndef
SkColorLookUpTable_DEFINED
#
define
SkColorLookUpTable_DEFINED
#
include
"
SkRefCnt
.
h
"
#
include
"
SkTemplates
.
h
"
static
constexpr
uint8_t
kMaxColorChannels
=
4
;
class
SkColorLookUpTable
:
public
SkRefCnt
{
public
:
static
constexpr
uint8_t
kOutputChannels
=
3
;
SkColorLookUpTable
(
uint8_t
inputChannels
const
uint8_t
gridPoints
[
kMaxColorChannels
]
)
:
fInputChannels
(
inputChannels
)
{
SkASSERT
(
inputChannels
>
=
1
&
&
inputChannels
<
=
kMaxColorChannels
)
;
memcpy
(
fGridPoints
gridPoints
fInputChannels
*
sizeof
(
uint8_t
)
)
;
}
void
interp
(
float
*
dst
const
float
*
src
)
const
;
int
inputChannels
(
)
const
{
return
fInputChannels
;
}
int
outputChannels
(
)
const
{
return
kOutputChannels
;
}
int
gridPoints
(
int
dimension
)
const
{
SkASSERT
(
dimension
>
=
0
&
&
dimension
<
inputChannels
(
)
)
;
return
fGridPoints
[
dimension
]
;
}
private
:
const
float
*
table
(
)
const
{
return
SkTAddOffset
<
const
float
>
(
this
sizeof
(
SkColorLookUpTable
)
)
;
}
void
interp3D
(
float
*
dst
const
float
*
src
)
const
;
float
interpDimension
(
const
float
*
src
int
inputDimension
int
outputDimension
int
index
[
kMaxColorChannels
]
)
const
;
uint8_t
fInputChannels
;
uint8_t
fGridPoints
[
kMaxColorChannels
]
;
public
:
void
*
operator
new
(
size_t
size
)
=
delete
;
void
*
operator
new
(
size_t
void
*
p
)
{
return
p
;
}
void
operator
delete
(
void
*
p
)
{
sk_free
(
p
)
;
}
}
;
#
endif
