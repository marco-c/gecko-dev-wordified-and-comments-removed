#
include
"
SkExecutor
.
h
"
#
include
"
SkMakeUnique
.
h
"
#
include
"
SkMutex
.
h
"
#
include
"
SkSemaphore
.
h
"
#
include
"
SkSpinlock
.
h
"
#
include
"
SkTArray
.
h
"
#
include
<
deque
>
#
include
<
thread
>
#
if
defined
(
SK_BUILD_FOR_WIN
)
#
include
<
windows
.
h
>
static
int
num_cores
(
)
{
SYSTEM_INFO
sysinfo
;
GetNativeSystemInfo
(
&
sysinfo
)
;
return
(
int
)
sysinfo
.
dwNumberOfProcessors
;
}
#
else
#
include
<
unistd
.
h
>
static
int
num_cores
(
)
{
return
(
int
)
sysconf
(
_SC_NPROCESSORS_ONLN
)
;
}
#
endif
SkExecutor
:
:
~
SkExecutor
(
)
{
}
class
SkTrivialExecutor
final
:
public
SkExecutor
{
void
add
(
std
:
:
function
<
void
(
void
)
>
work
)
override
{
work
(
)
;
}
}
;
static
SkTrivialExecutor
gTrivial
;
static
SkExecutor
*
gDefaultExecutor
=
&
gTrivial
;
SkExecutor
&
SkExecutor
:
:
GetDefault
(
)
{
return
*
gDefaultExecutor
;
}
void
SkExecutor
:
:
SetDefault
(
SkExecutor
*
executor
)
{
gDefaultExecutor
=
executor
?
executor
:
&
gTrivial
;
}
static
inline
std
:
:
function
<
void
(
void
)
>
pop
(
std
:
:
deque
<
std
:
:
function
<
void
(
void
)
>
>
*
list
)
{
std
:
:
function
<
void
(
void
)
>
fn
=
std
:
:
move
(
list
-
>
front
(
)
)
;
list
-
>
pop_front
(
)
;
return
fn
;
}
static
inline
std
:
:
function
<
void
(
void
)
>
pop
(
SkTArray
<
std
:
:
function
<
void
(
void
)
>
>
*
list
)
{
std
:
:
function
<
void
(
void
)
>
fn
=
std
:
:
move
(
list
-
>
back
(
)
)
;
list
-
>
pop_back
(
)
;
return
fn
;
}
template
<
typename
WorkList
>
class
SkThreadPool
final
:
public
SkExecutor
{
public
:
explicit
SkThreadPool
(
int
threads
)
{
for
(
int
i
=
0
;
i
<
threads
;
i
+
+
)
{
fThreads
.
emplace_back
(
&
Loop
this
)
;
}
}
~
SkThreadPool
(
)
override
{
for
(
int
i
=
0
;
i
<
fThreads
.
count
(
)
;
i
+
+
)
{
this
-
>
add
(
nullptr
)
;
}
for
(
int
i
=
0
;
i
<
fThreads
.
count
(
)
;
i
+
+
)
{
fThreads
[
i
]
.
join
(
)
;
}
}
virtual
void
add
(
std
:
:
function
<
void
(
void
)
>
work
)
override
{
{
SkAutoExclusive
lock
(
fWorkLock
)
;
fWork
.
emplace_back
(
std
:
:
move
(
work
)
)
;
}
fWorkAvailable
.
signal
(
1
)
;
}
virtual
void
borrow
(
)
override
{
if
(
fWorkAvailable
.
try_wait
(
)
)
{
SkAssertResult
(
this
-
>
do_work
(
)
)
;
}
}
private
:
bool
do_work
(
)
{
std
:
:
function
<
void
(
void
)
>
work
;
{
SkAutoExclusive
lock
(
fWorkLock
)
;
SkASSERT
(
!
fWork
.
empty
(
)
)
;
work
=
pop
(
&
fWork
)
;
}
if
(
!
work
)
{
return
false
;
}
work
(
)
;
return
true
;
}
static
void
Loop
(
void
*
ctx
)
{
auto
pool
=
(
SkThreadPool
*
)
ctx
;
do
{
pool
-
>
fWorkAvailable
.
wait
(
)
;
}
while
(
pool
-
>
do_work
(
)
)
;
}
using
Lock
=
SkMutex
;
SkTArray
<
std
:
:
thread
>
fThreads
;
WorkList
fWork
;
Lock
fWorkLock
;
SkSemaphore
fWorkAvailable
;
}
;
std
:
:
unique_ptr
<
SkExecutor
>
SkExecutor
:
:
MakeFIFOThreadPool
(
int
threads
)
{
using
WorkList
=
std
:
:
deque
<
std
:
:
function
<
void
(
void
)
>
>
;
return
skstd
:
:
make_unique
<
SkThreadPool
<
WorkList
>
>
(
threads
>
0
?
threads
:
num_cores
(
)
)
;
}
std
:
:
unique_ptr
<
SkExecutor
>
SkExecutor
:
:
MakeLIFOThreadPool
(
int
threads
)
{
using
WorkList
=
SkTArray
<
std
:
:
function
<
void
(
void
)
>
>
;
return
skstd
:
:
make_unique
<
SkThreadPool
<
WorkList
>
>
(
threads
>
0
?
threads
:
num_cores
(
)
)
;
}
