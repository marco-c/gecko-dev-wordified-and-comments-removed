#
ifndef
SkScalerContext_DEFINED
#
define
SkScalerContext_DEFINED
#
include
<
memory
>
#
include
"
SkFont
.
h
"
#
include
"
SkFontTypes
.
h
"
#
include
"
SkGlyph
.
h
"
#
include
"
SkMacros
.
h
"
#
include
"
SkMask
.
h
"
#
include
"
SkMaskFilter
.
h
"
#
include
"
SkMaskGamma
.
h
"
#
include
"
SkMatrix
.
h
"
#
include
"
SkPaint
.
h
"
#
include
"
SkStrikeInterface
.
h
"
#
include
"
SkSurfacePriv
.
h
"
#
include
"
SkTypeface
.
h
"
#
include
"
SkWriteBuffer
.
h
"
class
SkAutoDescriptor
;
class
SkDescriptor
;
class
SkMaskFilter
;
class
SkPathEffect
;
class
SkScalerContext
;
class
SkScalerContext_DW
;
enum
SkScalerContextFlags
:
uint32_t
{
kNone
=
0
kFakeGamma
=
1
<
<
0
kBoostContrast
=
1
<
<
1
kFakeGammaAndBoostContrast
=
kFakeGamma
|
kBoostContrast
}
;
enum
SkAxisAlignment
:
uint32_t
{
kNone_SkAxisAlignment
kX_SkAxisAlignment
kY_SkAxisAlignment
}
;
SK_BEGIN_REQUIRE_DENSE
struct
SkScalerContextRec
{
uint32_t
fFontID
;
SkScalar
fTextSize
fPreScaleX
fPreSkewX
;
SkScalar
fPost2x2
[
2
]
[
2
]
;
SkScalar
fFrameWidth
fMiterLimit
;
private
:
uint32_t
fLumBits
;
uint8_t
fDeviceGamma
;
uint8_t
fPaintGamma
;
uint8_t
fContrast
;
const
uint8_t
fReservedAlign
{
0
}
;
public
:
SkScalar
getDeviceGamma
(
)
const
{
return
SkIntToScalar
(
fDeviceGamma
)
/
(
1
<
<
6
)
;
}
void
setDeviceGamma
(
SkScalar
dg
)
{
SkASSERT
(
0
<
=
dg
&
&
dg
<
SkIntToScalar
(
4
)
)
;
fDeviceGamma
=
SkScalarFloorToInt
(
dg
*
(
1
<
<
6
)
)
;
}
SkScalar
getPaintGamma
(
)
const
{
return
SkIntToScalar
(
fPaintGamma
)
/
(
1
<
<
6
)
;
}
void
setPaintGamma
(
SkScalar
pg
)
{
SkASSERT
(
0
<
=
pg
&
&
pg
<
SkIntToScalar
(
4
)
)
;
fPaintGamma
=
SkScalarFloorToInt
(
pg
*
(
1
<
<
6
)
)
;
}
SkScalar
getContrast
(
)
const
{
sk_ignore_unused_variable
(
fReservedAlign
)
;
return
SkIntToScalar
(
fContrast
)
/
(
(
1
<
<
8
)
-
1
)
;
}
void
setContrast
(
SkScalar
c
)
{
SkASSERT
(
0
<
=
c
&
&
c
<
=
SK_Scalar1
)
;
fContrast
=
SkScalarRoundToInt
(
c
*
(
(
1
<
<
8
)
-
1
)
)
;
}
void
ignoreGamma
(
)
{
setLuminanceColor
(
SK_ColorTRANSPARENT
)
;
setPaintGamma
(
SK_Scalar1
)
;
setDeviceGamma
(
SK_Scalar1
)
;
}
void
ignorePreBlend
(
)
{
ignoreGamma
(
)
;
setContrast
(
0
)
;
}
uint8_t
fMaskFormat
;
private
:
uint8_t
fStrokeJoin
:
4
;
uint8_t
fStrokeCap
:
4
;
public
:
uint16_t
fFlags
;
SkString
dump
(
)
const
{
SkString
msg
;
msg
.
appendf
(
"
Rec
\
n
"
)
;
msg
.
appendf
(
"
textsize
%
g
prescale
%
g
preskew
%
g
post
[
%
g
%
g
%
g
%
g
]
\
n
"
fTextSize
fPreScaleX
fPreSkewX
fPost2x2
[
0
]
[
0
]
fPost2x2
[
0
]
[
1
]
fPost2x2
[
1
]
[
0
]
fPost2x2
[
1
]
[
1
]
)
;
msg
.
appendf
(
"
frame
%
g
miter
%
g
format
%
d
join
%
d
cap
%
d
flags
%
#
hx
\
n
"
fFrameWidth
fMiterLimit
fMaskFormat
fStrokeJoin
fStrokeCap
fFlags
)
;
msg
.
appendf
(
"
lum
bits
%
x
device
gamma
%
d
paint
gamma
%
d
contrast
%
d
\
n
"
fLumBits
fDeviceGamma
fPaintGamma
fContrast
)
;
return
msg
;
}
void
getMatrixFrom2x2
(
SkMatrix
*
)
const
;
void
getLocalMatrix
(
SkMatrix
*
)
const
;
void
getSingleMatrix
(
SkMatrix
*
)
const
;
enum
PreMatrixScale
{
kFull_PreMatrixScale
kVertical_PreMatrixScale
kVerticalInteger_PreMatrixScale
}
;
bool
computeMatrices
(
PreMatrixScale
preMatrixScale
SkVector
*
scale
SkMatrix
*
remaining
SkMatrix
*
remainingWithoutRotation
=
nullptr
SkMatrix
*
remainingRotation
=
nullptr
SkMatrix
*
total
=
nullptr
)
;
SkAxisAlignment
computeAxisAlignmentForHText
(
)
const
;
inline
SkFontHinting
getHinting
(
)
const
;
inline
void
setHinting
(
SkFontHinting
)
;
SkMask
:
:
Format
getFormat
(
)
const
{
return
static_cast
<
SkMask
:
:
Format
>
(
fMaskFormat
)
;
}
SkColor
getLuminanceColor
(
)
const
{
return
fLumBits
;
}
void
setLuminanceColor
(
SkColor
c
)
{
fLumBits
=
SkColorSetRGB
(
SkColorGetR
(
c
)
SkColorGetG
(
c
)
SkColorGetB
(
c
)
)
;
}
private
:
friend
class
SkScalerContext
;
}
;
SK_END_REQUIRE_DENSE
typedef
SkTMaskGamma
<
3
3
3
>
SkMaskGamma
;
class
SkScalerContext
{
public
:
enum
Flags
{
kFrameAndFill_Flag
=
0x0001
kUnused
=
0x0002
kEmbeddedBitmapText_Flag
=
0x0004
kEmbolden_Flag
=
0x0008
kSubpixelPositioning_Flag
=
0x0010
kForceAutohinting_Flag
=
0x0020
kHinting_Shift
=
7
kHintingBit1_Flag
=
0x0080
kHintingBit2_Flag
=
0x0100
kLCD_Vertical_Flag
=
0x0200
kLCD_BGROrder_Flag
=
0x0400
kGenA8FromLCD_Flag
=
0x0800
kLightOnDark_Flag
=
0x8000
}
;
enum
{
kHinting_Mask
=
kHintingBit1_Flag
|
kHintingBit2_Flag
}
;
SkScalerContext
(
sk_sp
<
SkTypeface
>
const
SkScalerContextEffects
&
const
SkDescriptor
*
)
;
virtual
~
SkScalerContext
(
)
;
SkTypeface
*
getTypeface
(
)
const
{
return
fTypeface
.
get
(
)
;
}
SkMask
:
:
Format
getMaskFormat
(
)
const
{
return
(
SkMask
:
:
Format
)
fRec
.
fMaskFormat
;
}
bool
isSubpixel
(
)
const
{
return
SkToBool
(
fRec
.
fFlags
&
kSubpixelPositioning_Flag
)
;
}
bool
isVertical
(
)
const
{
return
false
;
}
uint16_t
charToGlyphID
(
SkUnichar
uni
)
{
return
generateCharToGlyph
(
uni
)
;
}
unsigned
getGlyphCount
(
)
{
return
this
-
>
generateGlyphCount
(
)
;
}
void
getAdvance
(
SkGlyph
*
)
;
void
getMetrics
(
SkGlyph
*
)
;
void
getImage
(
const
SkGlyph
&
)
;
bool
SK_WARN_UNUSED_RESULT
getPath
(
SkPackedGlyphID
SkPath
*
)
;
void
getFontMetrics
(
SkFontMetrics
*
)
;
static
size_t
GetGammaLUTSize
(
SkScalar
contrast
SkScalar
paintGamma
SkScalar
deviceGamma
int
*
width
int
*
height
)
;
static
bool
GetGammaLUTData
(
SkScalar
contrast
SkScalar
paintGamma
SkScalar
deviceGamma
uint8_t
*
data
)
;
static
void
MakeRecAndEffects
(
const
SkFont
&
font
const
SkPaint
&
paint
const
SkSurfaceProps
&
surfaceProps
SkScalerContextFlags
scalerContextFlags
const
SkMatrix
&
deviceMatrix
SkScalerContextRec
*
rec
SkScalerContextEffects
*
effects
)
;
static
void
MakeRecAndEffectsFromFont
(
const
SkFont
&
font
SkScalerContextRec
*
rec
SkScalerContextEffects
*
effects
)
{
SkPaint
paint
;
return
MakeRecAndEffects
(
font
paint
SkSurfaceProps
(
SkSurfaceProps
:
:
kLegacyFontHost_InitType
)
SkScalerContextFlags
:
:
kNone
SkMatrix
:
:
I
(
)
rec
effects
)
;
}
static
SkDescriptor
*
MakeDescriptorForPaths
(
SkFontID
fontID
SkAutoDescriptor
*
ad
)
;
static
SkDescriptor
*
AutoDescriptorGivenRecAndEffects
(
const
SkScalerContextRec
&
rec
const
SkScalerContextEffects
&
effects
SkAutoDescriptor
*
ad
)
;
static
std
:
:
unique_ptr
<
SkDescriptor
>
DescriptorGivenRecAndEffects
(
const
SkScalerContextRec
&
rec
const
SkScalerContextEffects
&
effects
)
;
static
void
DescriptorBufferGiveRec
(
const
SkScalerContextRec
&
rec
void
*
buffer
)
;
static
bool
CheckBufferSizeForRec
(
const
SkScalerContextRec
&
rec
const
SkScalerContextEffects
&
effects
size_t
size
)
;
static
SkMaskGamma
:
:
PreBlend
GetMaskPreBlend
(
const
SkScalerContextRec
&
rec
)
;
const
SkScalerContextRec
&
getRec
(
)
const
{
return
fRec
;
}
SkScalerContextEffects
getEffects
(
)
const
{
return
{
fPathEffect
.
get
(
)
fMaskFilter
.
get
(
)
}
;
}
SkAxisAlignment
computeAxisAlignmentForHText
(
)
const
;
static
SkDescriptor
*
CreateDescriptorAndEffectsUsingPaint
(
const
SkFont
&
const
SkPaint
&
const
SkSurfaceProps
&
SkScalerContextFlags
scalerContextFlags
const
SkMatrix
&
deviceMatrix
SkAutoDescriptor
*
ad
SkScalerContextEffects
*
effects
)
;
protected
:
SkScalerContextRec
fRec
;
virtual
bool
generateAdvance
(
SkGlyph
*
glyph
)
=
0
;
virtual
void
generateMetrics
(
SkGlyph
*
glyph
)
=
0
;
virtual
void
generateImage
(
const
SkGlyph
&
glyph
)
=
0
;
virtual
bool
SK_WARN_UNUSED_RESULT
generatePath
(
SkGlyphID
glyphId
SkPath
*
path
)
=
0
;
virtual
void
generateFontMetrics
(
SkFontMetrics
*
)
=
0
;
virtual
unsigned
generateGlyphCount
(
)
=
0
;
virtual
uint16_t
generateCharToGlyph
(
SkUnichar
unichar
)
=
0
;
void
forceGenerateImageFromPath
(
)
{
fGenerateImageFromPath
=
true
;
}
void
forceOffGenerateImageFromPath
(
)
{
fGenerateImageFromPath
=
false
;
}
private
:
friend
class
SkRandomScalerContext
;
static
SkScalerContextRec
PreprocessRec
(
const
SkTypeface
&
typeface
const
SkScalerContextEffects
&
effects
const
SkDescriptor
&
desc
)
;
sk_sp
<
SkTypeface
>
fTypeface
;
sk_sp
<
SkPathEffect
>
fPathEffect
;
sk_sp
<
SkMaskFilter
>
fMaskFilter
;
bool
fGenerateImageFromPath
;
bool
internalGetPath
(
SkPackedGlyphID
id
SkPath
*
devPath
)
;
protected
:
const
SkMaskGamma
:
:
PreBlend
fPreBlend
;
}
;
#
define
kRec_SkDescriptorTag
SkSetFourByteTag
(
'
s
'
'
r
'
'
e
'
'
c
'
)
#
define
kEffects_SkDescriptorTag
SkSetFourByteTag
(
'
e
'
'
f
'
'
c
'
'
t
'
)
SkFontHinting
SkScalerContextRec
:
:
getHinting
(
)
const
{
unsigned
hint
=
(
fFlags
&
SkScalerContext
:
:
kHinting_Mask
)
>
>
SkScalerContext
:
:
kHinting_Shift
;
return
static_cast
<
SkFontHinting
>
(
hint
)
;
}
void
SkScalerContextRec
:
:
setHinting
(
SkFontHinting
hinting
)
{
fFlags
=
(
fFlags
&
~
SkScalerContext
:
:
kHinting_Mask
)
|
(
static_cast
<
unsigned
>
(
hinting
)
<
<
SkScalerContext
:
:
kHinting_Shift
)
;
}
#
endif
