#
ifndef
SkColorSpace_A2B_DEFINED
#
define
SkColorSpace_A2B_DEFINED
#
include
"
SkColorLookUpTable
.
h
"
#
include
"
SkColorSpace
.
h
"
#
include
"
SkGammas
.
h
"
#
include
<
vector
>
class
SkColorSpace_A2B
:
public
SkColorSpace
{
public
:
const
SkMatrix44
*
onToXYZD50
(
)
const
override
{
return
nullptr
;
}
uint32_t
onToXYZD50Hash
(
)
const
override
{
return
0
;
}
const
SkMatrix44
*
onFromXYZD50
(
)
const
override
{
return
nullptr
;
}
SkGammaNamed
onGammaNamed
(
)
const
override
{
return
kNonStandard_SkGammaNamed
;
}
bool
onGammaCloseToSRGB
(
)
const
override
{
return
false
;
}
bool
onGammaIsLinear
(
)
const
override
{
return
false
;
}
bool
onIsNumericalTransferFn
(
SkColorSpaceTransferFn
*
coeffs
)
const
override
{
return
false
;
}
bool
onIsCMYK
(
)
const
override
{
return
SkColorSpace
:
:
kCMYK_Type
=
=
fICCType
;
}
const
SkData
*
onProfileData
(
)
const
override
{
return
fProfileData
.
get
(
)
;
}
sk_sp
<
SkColorSpace
>
makeLinearGamma
(
)
const
override
{
return
SkColorSpace
:
:
MakeSRGBLinear
(
)
;
}
sk_sp
<
SkColorSpace
>
makeSRGBGamma
(
)
const
override
{
return
SkColorSpace
:
:
MakeSRGB
(
)
;
}
class
Element
{
public
:
Element
(
SkGammaNamed
gammaNamed
int
channelCount
)
:
fType
(
Type
:
:
kGammaNamed
)
fGammaNamed
(
gammaNamed
)
fMatrix
(
SkMatrix44
:
:
kUninitialized_Constructor
)
fInputChannels
(
channelCount
)
fOutputChannels
(
channelCount
)
{
SkASSERT
(
gammaNamed
!
=
kNonStandard_SkGammaNamed
)
;
}
explicit
Element
(
sk_sp
<
SkGammas
>
gammas
)
:
fType
(
Type
:
:
kGammas
)
fGammas
(
std
:
:
move
(
gammas
)
)
fMatrix
(
SkMatrix44
:
:
kUninitialized_Constructor
)
fInputChannels
(
fGammas
-
>
channels
(
)
)
fOutputChannels
(
fGammas
-
>
channels
(
)
)
{
for
(
int
i
=
0
;
i
<
fGammas
-
>
channels
(
)
;
+
+
i
)
{
if
(
SkGammas
:
:
Type
:
:
kTable_Type
=
=
fGammas
-
>
type
(
i
)
)
{
SkASSERT
(
fGammas
-
>
data
(
i
)
.
fTable
.
fSize
>
=
2
)
;
}
}
}
explicit
Element
(
sk_sp
<
SkColorLookUpTable
>
colorLUT
)
:
fType
(
Type
:
:
kCLUT
)
fCLUT
(
std
:
:
move
(
colorLUT
)
)
fMatrix
(
SkMatrix44
:
:
kUninitialized_Constructor
)
fInputChannels
(
fCLUT
-
>
inputChannels
(
)
)
fOutputChannels
(
fCLUT
-
>
outputChannels
(
)
)
{
}
explicit
Element
(
const
SkMatrix44
&
matrix
)
:
fType
(
Type
:
:
kMatrix
)
fMatrix
(
matrix
)
fInputChannels
(
3
)
fOutputChannels
(
3
)
{
}
enum
class
Type
{
kGammaNamed
kGammas
kCLUT
kMatrix
}
;
Type
type
(
)
const
{
return
fType
;
}
SkGammaNamed
gammaNamed
(
)
const
{
SkASSERT
(
Type
:
:
kGammaNamed
=
=
fType
)
;
return
fGammaNamed
;
}
const
SkGammas
&
gammas
(
)
const
{
SkASSERT
(
Type
:
:
kGammas
=
=
fType
)
;
return
*
fGammas
;
}
const
SkColorLookUpTable
&
colorLUT
(
)
const
{
SkASSERT
(
Type
:
:
kCLUT
=
=
fType
)
;
return
*
fCLUT
;
}
const
SkMatrix44
&
matrix
(
)
const
{
SkASSERT
(
Type
:
:
kMatrix
=
=
fType
)
;
return
fMatrix
;
}
int
inputChannels
(
)
const
{
return
fInputChannels
;
}
int
outputChannels
(
)
const
{
return
fOutputChannels
;
}
private
:
Type
fType
;
SkGammaNamed
fGammaNamed
;
sk_sp
<
SkGammas
>
fGammas
;
sk_sp
<
SkColorLookUpTable
>
fCLUT
;
SkMatrix44
fMatrix
;
int
fInputChannels
;
int
fOutputChannels
;
}
;
const
Element
&
element
(
int
i
)
const
{
return
fElements
[
i
]
;
}
int
count
(
)
const
{
return
(
int
)
fElements
.
size
(
)
;
}
enum
class
PCS
:
uint8_t
{
kLAB
kXYZ
}
;
PCS
pcs
(
)
const
{
return
fPCS
;
}
SkColorSpace
:
:
Type
iccType
(
)
const
{
return
fICCType
;
}
SkColorSpace_A2B
(
SkColorSpace
:
:
Type
iccType
std
:
:
vector
<
Element
>
elements
PCS
pcs
sk_sp
<
SkData
>
profileData
)
;
private
:
sk_sp
<
SkData
>
fProfileData
;
SkColorSpace
:
:
Type
fICCType
;
std
:
:
vector
<
Element
>
fElements
;
PCS
fPCS
;
friend
class
ColorSpaceXformTest
;
}
;
#
endif
