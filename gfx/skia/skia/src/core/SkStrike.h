#
ifndef
SkStrike_DEFINED
#
define
SkStrike_DEFINED
#
include
"
include
/
core
/
SkFontMetrics
.
h
"
#
include
"
include
/
core
/
SkFontTypes
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
private
/
base
/
SkMutex
.
h
"
#
include
"
include
/
private
/
base
/
SkTemplates
.
h
"
#
include
"
src
/
base
/
SkArenaAlloc
.
h
"
#
include
"
src
/
core
/
SkDescriptor
.
h
"
#
include
"
src
/
core
/
SkGlyph
.
h
"
#
include
"
src
/
core
/
SkGlyphRunPainter
.
h
"
#
include
"
src
/
core
/
SkStrikeSpec
.
h
"
#
include
"
src
/
core
/
SkTHash
.
h
"
#
include
<
memory
>
class
SkScalerContext
;
class
SkStrikeCache
;
class
SkTraceMemoryDump
;
namespace
sktext
{
union
IDOrPath
;
union
IDOrDrawable
;
}
class
SkStrikePinner
{
public
:
virtual
~
SkStrikePinner
(
)
=
default
;
virtual
bool
canDelete
(
)
=
0
;
virtual
void
assertValid
(
)
{
}
}
;
class
SkStrike
final
:
public
sktext
:
:
StrikeForGPU
{
public
:
SkStrike
(
SkStrikeCache
*
strikeCache
const
SkStrikeSpec
&
strikeSpec
std
:
:
unique_ptr
<
SkScalerContext
>
scaler
const
SkFontMetrics
*
metrics
std
:
:
unique_ptr
<
SkStrikePinner
>
pinner
)
;
void
lock
(
)
override
SK_ACQUIRE
(
fStrikeLock
)
;
void
unlock
(
)
override
SK_RELEASE_CAPABILITY
(
fStrikeLock
)
;
SkGlyphDigest
digestFor
(
skglyph
:
:
ActionType
SkPackedGlyphID
)
override
SK_REQUIRES
(
fStrikeLock
)
;
bool
prepareForImage
(
SkGlyph
*
glyph
)
override
SK_REQUIRES
(
fStrikeLock
)
;
bool
prepareForPath
(
SkGlyph
*
)
override
SK_REQUIRES
(
fStrikeLock
)
;
bool
prepareForDrawable
(
SkGlyph
*
)
override
SK_REQUIRES
(
fStrikeLock
)
;
bool
mergeFromBuffer
(
SkReadBuffer
&
buffer
)
SK_EXCLUDES
(
fStrikeLock
)
;
static
void
FlattenGlyphsByType
(
SkWriteBuffer
&
buffer
SkSpan
<
SkGlyph
>
images
SkSpan
<
SkGlyph
>
paths
SkSpan
<
SkGlyph
>
drawables
)
;
SkGlyph
*
mergeGlyphAndImage
(
SkPackedGlyphID
toID
const
SkGlyph
&
fromGlyph
)
SK_EXCLUDES
(
fStrikeLock
)
;
const
SkPath
*
mergePath
(
SkGlyph
*
glyph
const
SkPath
*
path
bool
hairline
)
SK_EXCLUDES
(
fStrikeLock
)
;
const
SkDrawable
*
mergeDrawable
(
SkGlyph
*
glyph
sk_sp
<
SkDrawable
>
drawable
)
SK_EXCLUDES
(
fStrikeLock
)
;
void
findIntercepts
(
const
SkScalar
bounds
[
2
]
SkScalar
scale
SkScalar
xPos
SkGlyph
*
SkScalar
*
array
int
*
count
)
SK_EXCLUDES
(
fStrikeLock
)
;
const
SkFontMetrics
&
getFontMetrics
(
)
const
{
return
fFontMetrics
;
}
SkSpan
<
const
SkGlyph
*
>
metrics
(
SkSpan
<
const
SkGlyphID
>
glyphIDs
const
SkGlyph
*
results
[
]
)
SK_EXCLUDES
(
fStrikeLock
)
;
SkSpan
<
const
SkGlyph
*
>
preparePaths
(
SkSpan
<
const
SkGlyphID
>
glyphIDs
const
SkGlyph
*
results
[
]
)
SK_EXCLUDES
(
fStrikeLock
)
;
SkSpan
<
const
SkGlyph
*
>
prepareImages
(
SkSpan
<
const
SkPackedGlyphID
>
glyphIDs
const
SkGlyph
*
results
[
]
)
SK_EXCLUDES
(
fStrikeLock
)
;
SkSpan
<
const
SkGlyph
*
>
prepareDrawables
(
SkSpan
<
const
SkGlyphID
>
glyphIDs
const
SkGlyph
*
results
[
]
)
SK_EXCLUDES
(
fStrikeLock
)
;
const
SkDescriptor
&
getDescriptor
(
)
const
override
{
return
fStrikeSpec
.
descriptor
(
)
;
}
const
SkGlyphPositionRoundingSpec
&
roundingSpec
(
)
const
override
{
return
fRoundingSpec
;
}
sktext
:
:
SkStrikePromise
strikePromise
(
)
override
{
return
sktext
:
:
SkStrikePromise
(
sk_ref_sp
<
SkStrike
>
(
this
)
)
;
}
void
glyphIDsToPaths
(
SkSpan
<
sktext
:
:
IDOrPath
>
idsOrPaths
)
SK_EXCLUDES
(
fStrikeLock
)
;
void
glyphIDsToDrawables
(
SkSpan
<
sktext
:
:
IDOrDrawable
>
idsOrDrawables
)
SK_EXCLUDES
(
fStrikeLock
)
;
const
SkStrikeSpec
&
strikeSpec
(
)
const
{
return
fStrikeSpec
;
}
void
verifyPinnedStrike
(
)
const
{
if
(
fPinner
!
=
nullptr
)
{
fPinner
-
>
assertValid
(
)
;
}
}
void
dump
(
)
const
SK_EXCLUDES
(
fStrikeLock
)
;
void
dumpMemoryStatistics
(
SkTraceMemoryDump
*
dump
)
const
SK_EXCLUDES
(
fStrikeLock
)
;
SkGlyph
*
glyph
(
SkGlyphDigest
)
SK_REQUIRES
(
fStrikeLock
)
;
private
:
friend
class
SkStrikeCache
;
friend
class
SkStrikeTestingPeer
;
class
Monitor
;
SkGlyph
*
glyph
(
SkPackedGlyphID
)
SK_REQUIRES
(
fStrikeLock
)
;
SkGlyphDigest
*
addGlyphAndDigest
(
SkGlyph
*
glyph
)
SK_REQUIRES
(
fStrikeLock
)
;
SkGlyph
*
mergeGlyphFromBuffer
(
SkReadBuffer
&
buffer
)
SK_REQUIRES
(
fStrikeLock
)
;
bool
mergeGlyphAndImageFromBuffer
(
SkReadBuffer
&
buffer
)
SK_REQUIRES
(
fStrikeLock
)
;
bool
mergeGlyphAndPathFromBuffer
(
SkReadBuffer
&
buffer
)
SK_REQUIRES
(
fStrikeLock
)
;
bool
mergeGlyphAndDrawableFromBuffer
(
SkReadBuffer
&
buffer
)
SK_REQUIRES
(
fStrikeLock
)
;
void
updateMemoryUsage
(
size_t
increase
)
SK_EXCLUDES
(
fStrikeLock
)
;
enum
PathDetail
{
kMetricsOnly
kMetricsAndPath
}
;
SkSpan
<
const
SkGlyph
*
>
internalPrepare
(
SkSpan
<
const
SkGlyphID
>
glyphIDs
PathDetail
pathDetail
const
SkGlyph
*
*
results
)
SK_REQUIRES
(
fStrikeLock
)
;
const
SkFontMetrics
fFontMetrics
;
const
SkGlyphPositionRoundingSpec
fRoundingSpec
;
const
SkStrikeSpec
fStrikeSpec
;
SkStrikeCache
*
const
fStrikeCache
;
mutable
SkMutex
fStrikeLock
;
SkTHashTable
<
SkGlyphDigest
SkPackedGlyphID
SkGlyphDigest
>
fDigestForPackedGlyphID
SK_GUARDED_BY
(
fStrikeLock
)
;
std
:
:
vector
<
SkGlyph
*
>
fGlyphForIndex
SK_GUARDED_BY
(
fStrikeLock
)
;
const
std
:
:
unique_ptr
<
SkScalerContext
>
fScalerContext
SK_GUARDED_BY
(
fStrikeLock
)
;
size_t
fMemoryIncrease
SK_GUARDED_BY
(
fStrikeLock
)
{
0
}
;
inline
static
constexpr
size_t
kMinGlyphCount
=
8
;
inline
static
constexpr
size_t
kMinGlyphImageSize
=
16
*
8
;
inline
static
constexpr
size_t
kMinAllocAmount
=
kMinGlyphImageSize
*
kMinGlyphCount
;
SkArenaAlloc
fAlloc
SK_GUARDED_BY
(
fStrikeLock
)
{
kMinAllocAmount
}
;
SkStrike
*
fNext
{
nullptr
}
;
SkStrike
*
fPrev
{
nullptr
}
;
std
:
:
unique_ptr
<
SkStrikePinner
>
fPinner
;
size_t
fMemoryUsed
{
sizeof
(
SkStrike
)
}
;
bool
fRemoved
{
false
}
;
}
;
#
endif
