#
include
"
SkRecord
.
h
"
#
include
"
SkImage
.
h
"
#
include
<
algorithm
>
SkRecord
:
:
~
SkRecord
(
)
{
Destroyer
destroyer
;
for
(
int
i
=
0
;
i
<
this
-
>
count
(
)
;
i
+
+
)
{
this
-
>
mutate
(
i
destroyer
)
;
}
}
void
SkRecord
:
:
grow
(
)
{
SkASSERT
(
fCount
=
=
fReserved
)
;
fReserved
=
fReserved
?
fReserved
*
2
:
4
;
fRecords
.
realloc
(
fReserved
)
;
}
size_t
SkRecord
:
:
bytesUsed
(
)
const
{
size_t
bytes
=
fApproxBytesAllocated
+
sizeof
(
SkRecord
)
;
return
bytes
;
}
void
SkRecord
:
:
defrag
(
)
{
Record
*
noops
=
std
:
:
remove_if
(
fRecords
.
get
(
)
fRecords
.
get
(
)
+
fCount
[
]
(
Record
op
)
{
return
op
.
type
(
)
=
=
SkRecords
:
:
NoOp_Type
;
}
)
;
fCount
=
noops
-
fRecords
.
get
(
)
;
}
