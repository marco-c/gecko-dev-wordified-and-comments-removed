#
ifndef
SkBitmapProcShader_DEFINED
#
define
SkBitmapProcShader_DEFINED
#
include
"
SkShader
.
h
"
#
include
"
SkSmallAllocator
.
h
"
struct
SkBitmapProcState
;
class
SkBitmapProvider
;
class
SkBitmapProcShader
:
public
SkShader
{
public
:
SkBitmapProcShader
(
const
SkBitmap
&
src
TileMode
tx
TileMode
ty
const
SkMatrix
*
localMatrix
=
nullptr
)
;
bool
isOpaque
(
)
const
override
;
size_t
contextSize
(
)
const
override
{
return
ContextSize
(
)
;
}
SK_TO_STRING_OVERRIDE
(
)
SK_DECLARE_PUBLIC_FLATTENABLE_DESERIALIZATION_PROCS
(
SkBitmapProcShader
)
#
if
SK_SUPPORT_GPU
const
GrFragmentProcessor
*
asFragmentProcessor
(
GrContext
*
const
SkMatrix
&
viewM
const
SkMatrix
*
SkFilterQuality
)
const
override
;
#
endif
protected
:
class
BitmapProcShaderContext
:
public
SkShader
:
:
Context
{
public
:
BitmapProcShaderContext
(
const
SkShader
&
const
ContextRec
&
SkBitmapProcState
*
)
;
~
BitmapProcShaderContext
(
)
override
;
void
shadeSpan
(
int
x
int
y
SkPMColor
dstC
[
]
int
count
)
override
;
ShadeProc
asAShadeProc
(
void
*
*
ctx
)
override
;
uint32_t
getFlags
(
)
const
override
{
return
fFlags
;
}
private
:
SkBitmapProcState
*
fState
;
uint32_t
fFlags
;
typedef
SkShader
:
:
Context
INHERITED
;
}
;
void
flatten
(
SkWriteBuffer
&
)
const
override
;
Context
*
onCreateContext
(
const
ContextRec
&
void
*
storage
)
const
override
;
bool
onIsABitmap
(
SkBitmap
*
SkMatrix
*
TileMode
*
)
const
override
;
SkBitmap
fRawBitmap
;
uint8_t
fTileModeX
fTileModeY
;
private
:
friend
class
SkImageShader
;
static
size_t
ContextSize
(
)
;
static
Context
*
MakeContext
(
const
SkShader
&
TileMode
tmx
TileMode
tmy
const
SkBitmapProvider
&
const
ContextRec
&
void
*
storage
)
;
typedef
SkShader
INHERITED
;
}
;
typedef
SkSmallAllocator
<
3
1160
>
SkTBlitterAllocator
;
SkShader
*
SkCreateBitmapShader
(
const
SkBitmap
&
src
SkShader
:
:
TileMode
SkShader
:
:
TileMode
const
SkMatrix
*
localMatrix
SkTBlitterAllocator
*
alloc
)
;
#
endif
