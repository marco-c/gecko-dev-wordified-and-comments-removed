#
ifndef
SkTraceEventCommon_DEFINED
#
define
SkTraceEventCommon_DEFINED
#
include
"
SkTraceEventPhase
.
h
"
#
include
"
SkTypes
.
h
"
#
if
defined
(
TRACE_EVENT0
)
#
error
"
Another
copy
of
this
file
has
already
been
included
.
"
#
endif
#
define
TRACE_EMPTY
do
{
}
while
(
0
)
#
ifdef
SK_BUILD_FOR_ANDROID_FRAMEWORK
#
include
<
cutils
/
trace
.
h
>
class
SkAndroidFrameworkTraceUtil
{
public
:
SkAndroidFrameworkTraceUtil
(
const
char
*
name
)
{
if
(
CC_UNLIKELY
(
gEnableAndroidTracing
)
)
{
ATRACE_BEGIN
(
name
)
;
}
}
SkAndroidFrameworkTraceUtil
(
bool
const
char
*
fmt
.
.
.
)
{
if
(
CC_LIKELY
(
(
!
gEnableAndroidTracing
)
|
|
(
!
ATRACE_ENABLED
(
)
)
)
)
return
;
const
int
BUFFER_SIZE
=
256
;
va_list
ap
;
char
buf
[
BUFFER_SIZE
]
;
va_start
(
ap
fmt
)
;
vsnprintf
(
buf
BUFFER_SIZE
fmt
ap
)
;
va_end
(
ap
)
;
ATRACE_BEGIN
(
buf
)
;
}
~
SkAndroidFrameworkTraceUtil
(
)
{
if
(
CC_UNLIKELY
(
gEnableAndroidTracing
)
)
{
ATRACE_END
(
)
;
}
}
static
void
setEnableTracing
(
bool
enableAndroidTracing
)
{
gEnableAndroidTracing
=
enableAndroidTracing
;
}
static
bool
getEnableTracing
(
)
{
return
gEnableAndroidTracing
;
}
private
:
static
bool
gEnableAndroidTracing
;
}
;
#
define
ATRACE_ANDROID_FRAMEWORK
(
fmt
.
.
.
)
SkAndroidFrameworkTraceUtil
__trace
(
true
fmt
#
#
__VA_ARGS__
)
#
define
TRACE_EVENT0
(
category_group
name
)
\
SkAndroidFrameworkTraceUtil
__trace
(
name
)
#
define
TRACE_EVENT1
(
category_group
name
arg1_name
arg1_val
)
\
SkAndroidFrameworkTraceUtil
__trace
(
name
)
#
define
TRACE_EVENT2
(
category_group
name
arg1_name
arg1_val
arg2_name
arg2_val
)
\
SkAndroidFrameworkTraceUtil
__trace
(
name
)
#
define
TRACE_EVENT_INSTANT0
(
category_group
name
scope
)
\
do
{
SkAndroidFrameworkTraceUtil
__trace
(
name
)
;
}
while
(
0
)
#
define
TRACE_EVENT_INSTANT1
(
category_group
name
scope
arg1_name
arg1_val
)
\
do
{
SkAndroidFrameworkTraceUtil
__trace
(
name
)
;
}
while
(
0
)
#
define
TRACE_EVENT_INSTANT2
(
category_group
name
scope
arg1_name
arg1_val
\
arg2_name
arg2_val
)
\
do
{
SkAndroidFrameworkTraceUtil
__trace
(
name
)
;
}
while
(
0
)
#
define
TRACE_COUNTER1
(
category_group
name
value
)
\
if
(
CC_UNLIKELY
(
SkAndroidFrameworkTraceUtil
:
:
getEnableTracing
(
)
)
)
{
\
ATRACE_INT
(
name
value
)
;
\
}
#
define
TRACE_COUNTER2
(
category_group
name
value1_name
value1_val
value2_name
value2_val
)
\
do
{
\
if
(
CC_UNLIKELY
(
SkAndroidFrameworkTraceUtil
:
:
getEnableTracing
(
)
)
)
{
\
ATRACE_INT
(
name
"
-
"
value1_name
value1_val
)
;
\
ATRACE_INT
(
name
"
-
"
value2_name
value2_val
)
;
\
}
\
}
while
(
0
)
#
define
TRACE_EVENT_OBJECT_CREATED_WITH_ID
(
category_group
name
id
)
TRACE_EMPTY
#
define
TRACE_EVENT_OBJECT_SNAPSHOT_WITH_ID
(
category_group
name
id
snapshot
)
TRACE_EMPTY
#
define
TRACE_EVENT_OBJECT_DELETED_WITH_ID
(
category_group
name
id
)
TRACE_EMPTY
#
define
TRACE_EVENT_CATEGORY_GROUP_ENABLED
(
category_group
ret
)
\
do
{
*
ret
=
false
;
}
while
(
0
)
#
else
#
define
ATRACE_ANDROID_FRAMEWORK
(
fmt
.
.
.
)
TRACE_EMPTY
#
define
TRACE_EVENT0
(
category_group
name
)
\
INTERNAL_TRACE_EVENT_ADD_SCOPED
(
category_group
name
)
#
define
TRACE_EVENT1
(
category_group
name
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_SCOPED
(
category_group
name
arg1_name
arg1_val
)
#
define
TRACE_EVENT2
(
category_group
name
arg1_name
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_SCOPED
(
category_group
name
arg1_name
arg1_val
arg2_name
arg2_val
)
#
define
TRACE_EVENT_INSTANT0
(
category_group
name
scope
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_INSTANT
category_group
name
\
TRACE_EVENT_FLAG_NONE
|
scope
)
#
define
TRACE_EVENT_INSTANT1
(
category_group
name
scope
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_INSTANT
category_group
name
\
TRACE_EVENT_FLAG_NONE
|
scope
arg1_name
arg1_val
)
#
define
TRACE_EVENT_INSTANT2
(
category_group
name
scope
arg1_name
arg1_val
\
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_INSTANT
category_group
name
\
TRACE_EVENT_FLAG_NONE
|
scope
arg1_name
arg1_val
\
arg2_name
arg2_val
)
#
define
TRACE_COUNTER1
(
category_group
name
value
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_COUNTER
category_group
name
\
TRACE_EVENT_FLAG_NONE
"
value
"
\
static_cast
<
int
>
(
value
)
)
#
define
TRACE_COUNTER2
(
category_group
name
value1_name
value1_val
\
value2_name
value2_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_COUNTER
category_group
name
\
TRACE_EVENT_FLAG_NONE
value1_name
\
static_cast
<
int
>
(
value1_val
)
value2_name
\
static_cast
<
int
>
(
value2_val
)
)
#
define
TRACE_EVENT_ASYNC_BEGIN0
(
category
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_ASYNC_BEGIN
category
name
id
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_ASYNC_BEGIN1
(
category
name
id
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_ASYNC_BEGIN
\
category
name
id
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
)
#
define
TRACE_EVENT_ASYNC_BEGIN2
(
category
name
id
arg1_name
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_ASYNC_BEGIN
\
category
name
id
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
arg2_name
arg2_val
)
#
define
TRACE_EVENT_ASYNC_END0
(
category
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_ASYNC_END
\
category
name
id
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_ASYNC_END1
(
category
name
id
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_ASYNC_END
\
category
name
id
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
)
#
define
TRACE_EVENT_ASYNC_END2
(
category
name
id
arg1_name
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_ASYNC_END
\
category
name
id
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
arg2_name
arg2_val
)
#
define
TRACE_EVENT_OBJECT_CREATED_WITH_ID
(
category_group
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_CREATE_OBJECT
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_OBJECT_SNAPSHOT_WITH_ID
(
category_group
name
id
\
snapshot
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_SNAPSHOT_OBJECT
category_group
name
\
id
TRACE_EVENT_FLAG_NONE
"
snapshot
"
snapshot
)
#
define
TRACE_EVENT_OBJECT_DELETED_WITH_ID
(
category_group
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_DELETE_OBJECT
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_CATEGORY_GROUP_ENABLED
(
category_group
ret
)
\
do
{
\
INTERNAL_TRACE_EVENT_GET_CATEGORY_INFO
(
category_group
)
;
\
if
(
INTERNAL_TRACE_EVENT_CATEGORY_GROUP_ENABLED_FOR_RECORDING_MODE
(
)
)
{
\
*
ret
=
true
;
\
}
else
{
\
*
ret
=
false
;
\
}
\
}
while
(
0
)
#
endif
#
define
TRACE_EVENT_FLAG_NONE
(
static_cast
<
unsigned
int
>
(
0
)
)
#
define
TRACE_EVENT_FLAG_COPY
(
static_cast
<
unsigned
int
>
(
1
<
<
0
)
)
#
define
TRACE_EVENT_FLAG_HAS_ID
(
static_cast
<
unsigned
int
>
(
1
<
<
1
)
)
#
define
TRACE_EVENT_FLAG_MANGLE_ID
(
static_cast
<
unsigned
int
>
(
1
<
<
2
)
)
#
define
TRACE_EVENT_FLAG_SCOPE_OFFSET
(
static_cast
<
unsigned
int
>
(
1
<
<
3
)
)
#
define
TRACE_EVENT_FLAG_SCOPE_EXTRA
(
static_cast
<
unsigned
int
>
(
1
<
<
4
)
)
#
define
TRACE_EVENT_FLAG_EXPLICIT_TIMESTAMP
(
static_cast
<
unsigned
int
>
(
1
<
<
5
)
)
#
define
TRACE_EVENT_FLAG_ASYNC_TTS
(
static_cast
<
unsigned
int
>
(
1
<
<
6
)
)
#
define
TRACE_EVENT_FLAG_BIND_TO_ENCLOSING
(
static_cast
<
unsigned
int
>
(
1
<
<
7
)
)
#
define
TRACE_EVENT_FLAG_FLOW_IN
(
static_cast
<
unsigned
int
>
(
1
<
<
8
)
)
#
define
TRACE_EVENT_FLAG_FLOW_OUT
(
static_cast
<
unsigned
int
>
(
1
<
<
9
)
)
#
define
TRACE_EVENT_FLAG_HAS_CONTEXT_ID
(
static_cast
<
unsigned
int
>
(
1
<
<
10
)
)
#
define
TRACE_EVENT_FLAG_SCOPE_MASK
\
(
static_cast
<
unsigned
int
>
(
TRACE_EVENT_FLAG_SCOPE_OFFSET
|
\
TRACE_EVENT_FLAG_SCOPE_EXTRA
)
)
#
define
TRACE_VALUE_TYPE_BOOL
(
static_cast
<
unsigned
char
>
(
1
)
)
#
define
TRACE_VALUE_TYPE_UINT
(
static_cast
<
unsigned
char
>
(
2
)
)
#
define
TRACE_VALUE_TYPE_INT
(
static_cast
<
unsigned
char
>
(
3
)
)
#
define
TRACE_VALUE_TYPE_DOUBLE
(
static_cast
<
unsigned
char
>
(
4
)
)
#
define
TRACE_VALUE_TYPE_POINTER
(
static_cast
<
unsigned
char
>
(
5
)
)
#
define
TRACE_VALUE_TYPE_STRING
(
static_cast
<
unsigned
char
>
(
6
)
)
#
define
TRACE_VALUE_TYPE_COPY_STRING
(
static_cast
<
unsigned
char
>
(
7
)
)
#
define
TRACE_VALUE_TYPE_CONVERTABLE
(
static_cast
<
unsigned
char
>
(
8
)
)
#
define
TRACE_EVENT_SCOPE_GLOBAL
(
static_cast
<
unsigned
char
>
(
0
<
<
3
)
)
#
define
TRACE_EVENT_SCOPE_PROCESS
(
static_cast
<
unsigned
char
>
(
1
<
<
3
)
)
#
define
TRACE_EVENT_SCOPE_THREAD
(
static_cast
<
unsigned
char
>
(
2
<
<
3
)
)
#
define
TRACE_EVENT_SCOPE_NAME_GLOBAL
(
'
g
'
)
#
define
TRACE_EVENT_SCOPE_NAME_PROCESS
(
'
p
'
)
#
define
TRACE_EVENT_SCOPE_NAME_THREAD
(
'
t
'
)
#
endif
