#
if
defined
(
TRACE_EVENT0
)
#
error
"
Another
copy
of
this
file
has
already
been
included
.
"
#
endif
#
define
TRACE_DISABLED_BY_DEFAULT
(
name
)
"
disabled
-
by
-
default
-
"
name
#
define
TRACE_EVENT0
(
category_group
name
)
\
INTERNAL_TRACE_MEMORY
(
category_group
name
)
\
INTERNAL_TRACE_EVENT_ADD_SCOPED
(
category_group
name
)
#
define
TRACE_EVENT_WITH_FLOW0
(
category_group
name
bind_id
flow_flags
)
\
INTERNAL_TRACE_MEMORY
(
category_group
name
)
\
INTERNAL_TRACE_EVENT_ADD_SCOPED_WITH_FLOW
(
category_group
name
bind_id
\
flow_flags
)
#
define
TRACE_EVENT1
(
category_group
name
arg1_name
arg1_val
)
\
INTERNAL_TRACE_MEMORY
(
category_group
name
)
\
INTERNAL_TRACE_EVENT_ADD_SCOPED
(
category_group
name
arg1_name
arg1_val
)
#
define
TRACE_EVENT_WITH_FLOW1
(
category_group
name
bind_id
flow_flags
\
arg1_name
arg1_val
)
\
INTERNAL_TRACE_MEMORY
(
category_group
name
)
\
INTERNAL_TRACE_EVENT_ADD_SCOPED_WITH_FLOW
(
category_group
name
bind_id
\
flow_flags
arg1_name
arg1_val
)
#
define
TRACE_EVENT2
(
category_group
name
arg1_name
arg1_val
arg2_name
\
arg2_val
)
\
INTERNAL_TRACE_MEMORY
(
category_group
name
)
\
INTERNAL_TRACE_EVENT_ADD_SCOPED
(
category_group
name
arg1_name
arg1_val
\
arg2_name
arg2_val
)
#
define
TRACE_EVENT_WITH_FLOW2
(
category_group
name
bind_id
flow_flags
\
arg1_name
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_MEMORY
(
category_group
name
)
\
INTERNAL_TRACE_EVENT_ADD_SCOPED_WITH_FLOW
(
category_group
name
bind_id
\
flow_flags
arg1_name
arg1_val
\
arg2_name
arg2_val
)
#
define
TRACE_EVENT_WITH_MEMORY_TAG2
(
category
name
memory_tag
arg1_name
\
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_MEMORY
(
category
memory_tag
)
\
INTERNAL_TRACE_EVENT_ADD_SCOPED
(
category
name
arg1_name
arg1_val
\
arg2_name
arg2_val
)
#
if
OFFICIAL_BUILD
#
undef
TRACING_IS_OFFICIAL_BUILD
#
define
TRACING_IS_OFFICIAL_BUILD
1
#
elif
!
defined
(
TRACING_IS_OFFICIAL_BUILD
)
#
define
TRACING_IS_OFFICIAL_BUILD
0
#
endif
#
if
TRACING_IS_OFFICIAL_BUILD
#
define
UNSHIPPED_TRACE_EVENT0
(
category_group
name
)
(
void
)
0
#
define
UNSHIPPED_TRACE_EVENT1
(
category_group
name
arg1_name
arg1_val
)
\
(
void
)
0
#
define
UNSHIPPED_TRACE_EVENT2
(
category_group
name
arg1_name
arg1_val
\
arg2_name
arg2_val
)
\
(
void
)
0
#
define
UNSHIPPED_TRACE_EVENT_INSTANT0
(
category_group
name
scope
)
(
void
)
0
#
define
UNSHIPPED_TRACE_EVENT_INSTANT1
(
category_group
name
scope
arg1_name
\
arg1_val
)
\
(
void
)
0
#
define
UNSHIPPED_TRACE_EVENT_INSTANT2
(
category_group
name
scope
arg1_name
\
arg1_val
arg2_name
arg2_val
)
\
(
void
)
0
#
else
#
define
UNSHIPPED_TRACE_EVENT0
(
category_group
name
)
\
TRACE_EVENT0
(
category_group
name
)
#
define
UNSHIPPED_TRACE_EVENT1
(
category_group
name
arg1_name
arg1_val
)
\
TRACE_EVENT1
(
category_group
name
arg1_name
arg1_val
)
#
define
UNSHIPPED_TRACE_EVENT2
(
category_group
name
arg1_name
arg1_val
\
arg2_name
arg2_val
)
\
TRACE_EVENT2
(
category_group
name
arg1_name
arg1_val
arg2_name
arg2_val
)
#
define
UNSHIPPED_TRACE_EVENT_INSTANT0
(
category_group
name
scope
)
\
TRACE_EVENT_INSTANT0
(
category_group
name
scope
)
#
define
UNSHIPPED_TRACE_EVENT_INSTANT1
(
category_group
name
scope
arg1_name
\
arg1_val
)
\
TRACE_EVENT_INSTANT1
(
category_group
name
scope
arg1_name
arg1_val
)
#
define
UNSHIPPED_TRACE_EVENT_INSTANT2
(
category_group
name
scope
arg1_name
\
arg1_val
arg2_name
arg2_val
)
\
TRACE_EVENT_INSTANT2
(
category_group
name
scope
arg1_name
arg1_val
\
arg2_name
arg2_val
)
#
endif
#
define
TRACE_EVENT_INSTANT0
(
category_group
name
scope
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_INSTANT
category_group
name
\
TRACE_EVENT_FLAG_NONE
|
scope
)
#
define
TRACE_EVENT_INSTANT1
(
category_group
name
scope
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_INSTANT
category_group
name
\
TRACE_EVENT_FLAG_NONE
|
scope
arg1_name
arg1_val
)
#
define
TRACE_EVENT_INSTANT2
(
category_group
name
scope
arg1_name
arg1_val
\
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_INSTANT
category_group
name
\
TRACE_EVENT_FLAG_NONE
|
scope
arg1_name
arg1_val
\
arg2_name
arg2_val
)
#
define
TRACE_EVENT_COPY_INSTANT0
(
category_group
name
scope
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_INSTANT
category_group
name
\
TRACE_EVENT_FLAG_COPY
|
scope
)
#
define
TRACE_EVENT_COPY_INSTANT1
(
category_group
name
scope
arg1_name
\
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_INSTANT
category_group
name
\
TRACE_EVENT_FLAG_COPY
|
scope
arg1_name
arg1_val
)
#
define
TRACE_EVENT_COPY_INSTANT2
(
category_group
name
scope
arg1_name
\
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_INSTANT
category_group
name
\
TRACE_EVENT_FLAG_COPY
|
scope
arg1_name
arg1_val
\
arg2_name
arg2_val
)
#
define
TRACE_EVENT_SCOPED_SAMPLING_STATE
(
category
name
)
\
TRACE_EVENT_SCOPED_SAMPLING_STATE_FOR_BUCKET
(
0
category
name
)
#
define
TRACE_EVENT_GET_SAMPLING_STATE
(
)
\
TRACE_EVENT_GET_SAMPLING_STATE_FOR_BUCKET
(
0
)
#
define
TRACE_EVENT_SET_SAMPLING_STATE
(
category
name
)
\
TRACE_EVENT_SET_SAMPLING_STATE_FOR_BUCKET
(
0
category
name
)
#
define
TRACE_EVENT_SET_NONCONST_SAMPLING_STATE
(
categoryAndName
)
\
TRACE_EVENT_SET_NONCONST_SAMPLING_STATE_FOR_BUCKET
(
0
categoryAndName
)
#
define
TRACE_EVENT_BEGIN0
(
category_group
name
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_BEGIN
category_group
name
\
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_BEGIN1
(
category_group
name
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_BEGIN
category_group
name
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
)
#
define
TRACE_EVENT_BEGIN2
(
category_group
name
arg1_name
arg1_val
\
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_BEGIN
category_group
name
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
\
arg2_name
arg2_val
)
#
define
TRACE_EVENT_COPY_BEGIN0
(
category_group
name
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_BEGIN
category_group
name
\
TRACE_EVENT_FLAG_COPY
)
#
define
TRACE_EVENT_COPY_BEGIN1
(
category_group
name
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_BEGIN
category_group
name
\
TRACE_EVENT_FLAG_COPY
arg1_name
arg1_val
)
#
define
TRACE_EVENT_COPY_BEGIN2
(
category_group
name
arg1_name
arg1_val
\
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_BEGIN
category_group
name
\
TRACE_EVENT_FLAG_COPY
arg1_name
arg1_val
\
arg2_name
arg2_val
)
#
define
TRACE_EVENT_BEGIN_WITH_ID_TID_AND_TIMESTAMP0
(
category_group
name
id
\
thread_id
timestamp
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_ASYNC_BEGIN
category_group
name
id
thread_id
\
timestamp
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_COPY_BEGIN_WITH_ID_TID_AND_TIMESTAMP0
(
\
category_group
name
id
thread_id
timestamp
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_ASYNC_BEGIN
category_group
name
id
thread_id
\
timestamp
TRACE_EVENT_FLAG_COPY
)
#
define
TRACE_EVENT_COPY_BEGIN_WITH_ID_TID_AND_TIMESTAMP1
(
\
category_group
name
id
thread_id
timestamp
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_ASYNC_BEGIN
category_group
name
id
thread_id
\
timestamp
TRACE_EVENT_FLAG_COPY
arg1_name
arg1_val
)
#
define
TRACE_EVENT_COPY_BEGIN_WITH_ID_TID_AND_TIMESTAMP2
(
\
category_group
name
id
thread_id
timestamp
arg1_name
arg1_val
\
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_ASYNC_BEGIN
category_group
name
id
thread_id
\
timestamp
TRACE_EVENT_FLAG_COPY
arg1_name
arg1_val
arg2_name
\
arg2_val
)
#
define
TRACE_EVENT_END0
(
category_group
name
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_END
category_group
name
\
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_END1
(
category_group
name
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_END
category_group
name
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
)
#
define
TRACE_EVENT_END2
(
category_group
name
arg1_name
arg1_val
arg2_name
\
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_END
category_group
name
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
\
arg2_name
arg2_val
)
#
define
TRACE_EVENT_COPY_END0
(
category_group
name
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_END
category_group
name
\
TRACE_EVENT_FLAG_COPY
)
#
define
TRACE_EVENT_COPY_END1
(
category_group
name
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_END
category_group
name
\
TRACE_EVENT_FLAG_COPY
arg1_name
arg1_val
)
#
define
TRACE_EVENT_COPY_END2
(
category_group
name
arg1_name
arg1_val
\
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_END
category_group
name
\
TRACE_EVENT_FLAG_COPY
arg1_name
arg1_val
\
arg2_name
arg2_val
)
#
define
TRACE_EVENT_MARK
(
category_group
name
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_MARK
category_group
name
\
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_MARK_WITH_TIMESTAMP
(
category_group
name
timestamp
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_TIMESTAMP
(
TRACE_EVENT_PHASE_MARK
\
category_group
name
timestamp
\
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_COPY_MARK
(
category_group
name
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_MARK
category_group
name
\
TRACE_EVENT_FLAG_COPY
)
#
define
TRACE_EVENT_COPY_MARK_WITH_TIMESTAMP
(
category_group
name
timestamp
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_TIMESTAMP
(
TRACE_EVENT_PHASE_MARK
\
category_group
name
timestamp
\
TRACE_EVENT_FLAG_COPY
)
#
define
TRACE_EVENT_END_WITH_ID_TID_AND_TIMESTAMP0
(
category_group
name
id
\
thread_id
timestamp
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_ASYNC_END
category_group
name
id
thread_id
\
timestamp
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_COPY_END_WITH_ID_TID_AND_TIMESTAMP0
(
\
category_group
name
id
thread_id
timestamp
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_ASYNC_END
category_group
name
id
thread_id
\
timestamp
TRACE_EVENT_FLAG_COPY
)
#
define
TRACE_EVENT_COPY_END_WITH_ID_TID_AND_TIMESTAMP1
(
\
category_group
name
id
thread_id
timestamp
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_ASYNC_END
category_group
name
id
thread_id
\
timestamp
TRACE_EVENT_FLAG_COPY
arg1_name
arg1_val
)
#
define
TRACE_EVENT_COPY_END_WITH_ID_TID_AND_TIMESTAMP2
(
\
category_group
name
id
thread_id
timestamp
arg1_name
arg1_val
\
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_ASYNC_END
category_group
name
id
thread_id
\
timestamp
TRACE_EVENT_FLAG_COPY
arg1_name
arg1_val
arg2_name
\
arg2_val
)
#
define
TRACE_COUNTER1
(
category_group
name
value
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_COUNTER
category_group
name
\
TRACE_EVENT_FLAG_NONE
"
value
"
\
static_cast
<
int
>
(
value
)
)
#
define
TRACE_COPY_COUNTER1
(
category_group
name
value
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_COUNTER
category_group
name
\
TRACE_EVENT_FLAG_COPY
"
value
"
\
static_cast
<
int
>
(
value
)
)
#
define
TRACE_COUNTER2
(
category_group
name
value1_name
value1_val
\
value2_name
value2_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_COUNTER
category_group
name
\
TRACE_EVENT_FLAG_NONE
value1_name
\
static_cast
<
int
>
(
value1_val
)
value2_name
\
static_cast
<
int
>
(
value2_val
)
)
#
define
TRACE_COPY_COUNTER2
(
category_group
name
value1_name
value1_val
\
value2_name
value2_val
)
\
INTERNAL_TRACE_EVENT_ADD
(
TRACE_EVENT_PHASE_COUNTER
category_group
name
\
TRACE_EVENT_FLAG_COPY
value1_name
\
static_cast
<
int
>
(
value1_val
)
value2_name
\
static_cast
<
int
>
(
value2_val
)
)
#
define
TRACE_COUNTER_ID1
(
category_group
name
id
value
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_COUNTER
category_group
\
name
id
TRACE_EVENT_FLAG_NONE
"
value
"
\
static_cast
<
int
>
(
value
)
)
#
define
TRACE_COPY_COUNTER_ID1
(
category_group
name
id
value
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_COUNTER
category_group
\
name
id
TRACE_EVENT_FLAG_COPY
"
value
"
\
static_cast
<
int
>
(
value
)
)
#
define
TRACE_COUNTER_ID2
(
category_group
name
id
value1_name
value1_val
\
value2_name
value2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_COUNTER
category_group
\
name
id
TRACE_EVENT_FLAG_NONE
\
value1_name
static_cast
<
int
>
(
value1_val
)
\
value2_name
static_cast
<
int
>
(
value2_val
)
)
#
define
TRACE_COPY_COUNTER_ID2
(
category_group
name
id
value1_name
\
value1_val
value2_name
value2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_COUNTER
category_group
\
name
id
TRACE_EVENT_FLAG_COPY
\
value1_name
static_cast
<
int
>
(
value1_val
)
\
value2_name
static_cast
<
int
>
(
value2_val
)
)
#
define
TRACE_EVENT_SAMPLE_WITH_TID_AND_TIMESTAMP0
(
category_group
name
\
thread_id
timestamp
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_SAMPLE
category_group
name
0
thread_id
timestamp
\
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_SAMPLE_WITH_TID_AND_TIMESTAMP1
(
\
category_group
name
thread_id
timestamp
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_SAMPLE
category_group
name
0
thread_id
timestamp
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
)
#
define
TRACE_EVENT_SAMPLE_WITH_TID_AND_TIMESTAMP2
(
category_group
name
\
thread_id
timestamp
\
arg1_name
arg1_val
\
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_SAMPLE
category_group
name
0
thread_id
timestamp
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
arg2_name
arg2_val
)
#
define
TRACE_EVENT_ASYNC_BEGIN0
(
category_group
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_ASYNC_BEGIN
\
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_ASYNC_BEGIN1
(
category_group
name
id
arg1_name
\
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_ASYNC_BEGIN
\
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
)
#
define
TRACE_EVENT_ASYNC_BEGIN2
(
category_group
name
id
arg1_name
\
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_ASYNC_BEGIN
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
arg2_name
arg2_val
)
#
define
TRACE_EVENT_COPY_ASYNC_BEGIN0
(
category_group
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_ASYNC_BEGIN
\
category_group
name
id
\
TRACE_EVENT_FLAG_COPY
)
#
define
TRACE_EVENT_COPY_ASYNC_BEGIN1
(
category_group
name
id
arg1_name
\
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_ASYNC_BEGIN
\
category_group
name
id
\
TRACE_EVENT_FLAG_COPY
arg1_name
arg1_val
)
#
define
TRACE_EVENT_COPY_ASYNC_BEGIN2
(
category_group
name
id
arg1_name
\
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_ASYNC_BEGIN
category_group
name
id
\
TRACE_EVENT_FLAG_COPY
arg1_name
arg1_val
arg2_name
arg2_val
)
#
define
TRACE_EVENT_ASYNC_BEGIN_WITH_TIMESTAMP0
(
category_group
name
id
\
timestamp
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_ASYNC_BEGIN
category_group
name
id
\
TRACE_EVENT_API_CURRENT_THREAD_ID
timestamp
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_COPY_ASYNC_BEGIN_WITH_TIMESTAMP0
(
category_group
name
id
\
timestamp
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_ASYNC_BEGIN
category_group
name
id
\
TRACE_EVENT_API_CURRENT_THREAD_ID
timestamp
TRACE_EVENT_FLAG_COPY
)
#
define
TRACE_EVENT_ASYNC_STEP_INTO0
(
category_group
name
id
step
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_ASYNC_STEP_INTO
\
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
"
step
"
step
)
#
define
TRACE_EVENT_ASYNC_STEP_INTO1
(
category_group
name
id
step
\
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_ASYNC_STEP_INTO
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
"
step
"
step
arg1_name
arg1_val
)
#
define
TRACE_EVENT_ASYNC_STEP_INTO_WITH_TIMESTAMP0
(
category_group
name
id
\
step
timestamp
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_ASYNC_STEP_INTO
category_group
name
id
\
TRACE_EVENT_API_CURRENT_THREAD_ID
timestamp
TRACE_EVENT_FLAG_NONE
\
"
step
"
step
)
#
define
TRACE_EVENT_ASYNC_STEP_PAST0
(
category_group
name
id
step
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_ASYNC_STEP_PAST
\
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
"
step
"
step
)
#
define
TRACE_EVENT_ASYNC_STEP_PAST1
(
category_group
name
id
step
\
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_ASYNC_STEP_PAST
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
"
step
"
step
arg1_name
arg1_val
)
#
define
TRACE_EVENT_ASYNC_END0
(
category_group
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_ASYNC_END
\
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_ASYNC_END1
(
category_group
name
id
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_ASYNC_END
\
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
)
#
define
TRACE_EVENT_ASYNC_END2
(
category_group
name
id
arg1_name
arg1_val
\
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_ASYNC_END
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
arg2_name
arg2_val
)
#
define
TRACE_EVENT_COPY_ASYNC_END0
(
category_group
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_ASYNC_END
\
category_group
name
id
\
TRACE_EVENT_FLAG_COPY
)
#
define
TRACE_EVENT_COPY_ASYNC_END1
(
category_group
name
id
arg1_name
\
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_ASYNC_END
\
category_group
name
id
\
TRACE_EVENT_FLAG_COPY
arg1_name
arg1_val
)
#
define
TRACE_EVENT_COPY_ASYNC_END2
(
category_group
name
id
arg1_name
\
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_ASYNC_END
category_group
name
id
\
TRACE_EVENT_FLAG_COPY
arg1_name
arg1_val
arg2_name
arg2_val
)
#
define
TRACE_EVENT_ASYNC_END_WITH_TIMESTAMP0
(
category_group
name
id
\
timestamp
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_ASYNC_END
category_group
name
id
\
TRACE_EVENT_API_CURRENT_THREAD_ID
timestamp
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_NESTABLE_ASYNC_BEGIN0
(
category_group
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN
\
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_NESTABLE_ASYNC_BEGIN1
(
category_group
name
id
arg1_name
\
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN
\
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
)
#
define
TRACE_EVENT_NESTABLE_ASYNC_BEGIN2
(
category_group
name
id
arg1_name
\
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
arg2_name
arg2_val
)
#
define
TRACE_EVENT_NESTABLE_ASYNC_END0
(
category_group
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_NESTABLE_ASYNC_END
\
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_NESTABLE_ASYNC_END1
(
category_group
name
id
arg1_name
\
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_NESTABLE_ASYNC_END
\
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
)
#
define
TRACE_EVENT_NESTABLE_ASYNC_END2
(
category_group
name
id
arg1_name
\
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_NESTABLE_ASYNC_END
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
arg2_name
arg2_val
)
#
define
TRACE_EVENT_NESTABLE_ASYNC_INSTANT0
(
category_group
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_NESTABLE_ASYNC_INSTANT
\
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_NESTABLE_ASYNC_INSTANT1
(
category_group
name
id
\
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_NESTABLE_ASYNC_INSTANT
\
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
)
#
define
TRACE_EVENT_NESTABLE_ASYNC_INSTANT2
(
\
category_group
name
id
arg1_name
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_NESTABLE_ASYNC_INSTANT
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
arg2_name
arg2_val
)
#
define
TRACE_EVENT_COPY_NESTABLE_ASYNC_BEGIN_WITH_TTS2
(
\
category_group
name
id
arg1_name
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN
category_group
name
id
\
TRACE_EVENT_FLAG_ASYNC_TTS
|
TRACE_EVENT_FLAG_COPY
arg1_name
arg1_val
\
arg2_name
arg2_val
)
#
define
TRACE_EVENT_COPY_NESTABLE_ASYNC_END_WITH_TTS2
(
\
category_group
name
id
arg1_name
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_NESTABLE_ASYNC_END
category_group
name
id
\
TRACE_EVENT_FLAG_ASYNC_TTS
|
TRACE_EVENT_FLAG_COPY
arg1_name
arg1_val
\
arg2_name
arg2_val
)
#
define
TRACE_EVENT_NESTABLE_ASYNC_BEGIN_WITH_TIMESTAMP0
(
category_group
name
\
id
timestamp
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN
category_group
name
id
\
TRACE_EVENT_API_CURRENT_THREAD_ID
timestamp
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_NESTABLE_ASYNC_END_WITH_TIMESTAMP0
(
category_group
name
\
id
timestamp
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_NESTABLE_ASYNC_END
category_group
name
id
\
TRACE_EVENT_API_CURRENT_THREAD_ID
timestamp
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_COPY_NESTABLE_ASYNC_BEGIN_WITH_TIMESTAMP0
(
\
category_group
name
id
timestamp
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN
category_group
name
id
\
timestamp
TRACE_EVENT_FLAG_COPY
)
#
define
TRACE_EVENT_COPY_NESTABLE_ASYNC_END_WITH_TIMESTAMP0
(
\
category_group
name
id
timestamp
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_NESTABLE_ASYNC_END
category_group
name
id
\
timestamp
TRACE_EVENT_FLAG_COPY
)
#
define
TRACE_EVENT_NESTABLE_ASYNC_INSTANT2
(
\
category_group
name
id
arg1_name
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_NESTABLE_ASYNC_INSTANT
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
arg2_name
arg2_val
)
#
define
TRACE_EVENT_FLOW_BEGIN0
(
category_group
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_BEGIN
\
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_FLOW_BEGIN1
(
category_group
name
id
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_BEGIN
\
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
)
#
define
TRACE_EVENT_FLOW_BEGIN2
(
category_group
name
id
arg1_name
arg1_val
\
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_FLOW_BEGIN
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
arg1_name
arg1_val
arg2_name
arg2_val
)
#
define
TRACE_EVENT_COPY_FLOW_BEGIN0
(
category_group
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_BEGIN
\
category_group
name
id
\
TRACE_EVENT_FLAG_COPY
)
#
define
TRACE_EVENT_COPY_FLOW_BEGIN1
(
category_group
name
id
arg1_name
\
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_BEGIN
\
category_group
name
id
\
TRACE_EVENT_FLAG_COPY
arg1_name
arg1_val
)
#
define
TRACE_EVENT_COPY_FLOW_BEGIN2
(
category_group
name
id
arg1_name
\
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_FLOW_BEGIN
category_group
name
id
\
TRACE_EVENT_FLAG_COPY
arg1_name
arg1_val
arg2_name
arg2_val
)
#
define
TRACE_EVENT_FLOW_STEP0
(
category_group
name
id
step
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_STEP
\
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
"
step
"
step
)
#
define
TRACE_EVENT_FLOW_STEP1
(
category_group
name
id
step
arg1_name
\
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_FLOW_STEP
category_group
name
id
\
TRACE_EVENT_FLAG_NONE
"
step
"
step
arg1_name
arg1_val
)
#
define
TRACE_EVENT_COPY_FLOW_STEP0
(
category_group
name
id
step
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_STEP
\
category_group
name
id
\
TRACE_EVENT_FLAG_COPY
"
step
"
step
)
#
define
TRACE_EVENT_COPY_FLOW_STEP1
(
category_group
name
id
step
arg1_name
\
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_FLOW_STEP
category_group
name
id
\
TRACE_EVENT_FLAG_COPY
"
step
"
step
arg1_name
arg1_val
)
#
define
TRACE_EVENT_FLOW_END0
(
category_group
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_END
category_group
\
name
id
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_FLOW_END_BIND_TO_ENCLOSING0
(
category_group
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_END
category_group
\
name
id
\
TRACE_EVENT_FLAG_BIND_TO_ENCLOSING
)
#
define
TRACE_EVENT_FLOW_END1
(
category_group
name
id
arg1_name
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_END
category_group
\
name
id
TRACE_EVENT_FLAG_NONE
arg1_name
\
arg1_val
)
#
define
TRACE_EVENT_FLOW_END2
(
category_group
name
id
arg1_name
arg1_val
\
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_END
category_group
\
name
id
TRACE_EVENT_FLAG_NONE
arg1_name
\
arg1_val
arg2_name
arg2_val
)
#
define
TRACE_EVENT_COPY_FLOW_END0
(
category_group
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_END
category_group
\
name
id
TRACE_EVENT_FLAG_COPY
)
#
define
TRACE_EVENT_COPY_FLOW_END1
(
category_group
name
id
arg1_name
\
arg1_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_END
category_group
\
name
id
TRACE_EVENT_FLAG_COPY
arg1_name
\
arg1_val
)
#
define
TRACE_EVENT_COPY_FLOW_END2
(
category_group
name
id
arg1_name
\
arg1_val
arg2_name
arg2_val
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_END
category_group
\
name
id
TRACE_EVENT_FLAG_COPY
arg1_name
\
arg1_val
arg2_name
arg2_val
)
#
define
TRACE_EVENT_OBJECT_CREATED_WITH_ID
(
category_group
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_CREATE_OBJECT
category_group
name
\
TRACE_ID_DONT_MANGLE
(
id
)
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_OBJECT_SNAPSHOT_WITH_ID
(
category_group
name
id
\
snapshot
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_SNAPSHOT_OBJECT
category_group
name
\
TRACE_ID_DONT_MANGLE
(
id
)
TRACE_EVENT_FLAG_NONE
"
snapshot
"
snapshot
)
#
define
TRACE_EVENT_OBJECT_SNAPSHOT_WITH_ID_AND_TIMESTAMP
(
\
category_group
name
id
timestamp
snapshot
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP
(
\
TRACE_EVENT_PHASE_SNAPSHOT_OBJECT
category_group
name
\
TRACE_ID_DONT_MANGLE
(
id
)
TRACE_EVENT_API_CURRENT_THREAD_ID
timestamp
\
TRACE_EVENT_FLAG_NONE
"
snapshot
"
snapshot
)
#
define
TRACE_EVENT_OBJECT_DELETED_WITH_ID
(
category_group
name
id
)
\
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
\
TRACE_EVENT_PHASE_DELETE_OBJECT
category_group
name
\
TRACE_ID_DONT_MANGLE
(
id
)
TRACE_EVENT_FLAG_NONE
)
#
define
TRACE_EVENT_CATEGORY_GROUP_ENABLED
(
category_group
ret
)
\
do
{
\
INTERNAL_TRACE_EVENT_GET_CATEGORY_INFO
(
category_group
)
;
\
if
(
INTERNAL_TRACE_EVENT_CATEGORY_GROUP_ENABLED_FOR_RECORDING_MODE
(
)
)
{
\
*
ret
=
true
;
\
}
else
{
\
*
ret
=
false
;
\
}
\
}
while
(
0
)
#
define
TRACE_EVENT_WARMUP_CATEGORY
(
category_group
)
\
INTERNAL_TRACE_EVENT_GET_CATEGORY_INFO
(
category_group
)
#
define
TRACE_EVENT_IS_NEW_TRACE
(
ret
)
\
do
{
\
static
int
INTERNAL_TRACE_EVENT_UID
(
lastRecordingNumber
)
=
0
;
\
int
num_traces_recorded
=
TRACE_EVENT_API_GET_NUM_TRACES_RECORDED
(
)
;
\
if
(
num_traces_recorded
!
=
-
1
&
&
\
num_traces_recorded
!
=
\
INTERNAL_TRACE_EVENT_UID
(
lastRecordingNumber
)
)
{
\
INTERNAL_TRACE_EVENT_UID
(
lastRecordingNumber
)
=
num_traces_recorded
;
\
*
ret
=
true
;
\
}
else
{
\
*
ret
=
false
;
\
}
\
}
while
(
0
)
#
define
TRACE_EVENT_PHASE_BEGIN
(
'
B
'
)
#
define
TRACE_EVENT_PHASE_END
(
'
E
'
)
#
define
TRACE_EVENT_PHASE_COMPLETE
(
'
X
'
)
#
define
TRACE_EVENT_PHASE_INSTANT
(
'
I
'
)
#
define
TRACE_EVENT_PHASE_ASYNC_BEGIN
(
'
S
'
)
#
define
TRACE_EVENT_PHASE_ASYNC_STEP_INTO
(
'
T
'
)
#
define
TRACE_EVENT_PHASE_ASYNC_STEP_PAST
(
'
p
'
)
#
define
TRACE_EVENT_PHASE_ASYNC_END
(
'
F
'
)
#
define
TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN
(
'
b
'
)
#
define
TRACE_EVENT_PHASE_NESTABLE_ASYNC_END
(
'
e
'
)
#
define
TRACE_EVENT_PHASE_NESTABLE_ASYNC_INSTANT
(
'
n
'
)
#
define
TRACE_EVENT_PHASE_FLOW_BEGIN
(
'
s
'
)
#
define
TRACE_EVENT_PHASE_FLOW_STEP
(
'
t
'
)
#
define
TRACE_EVENT_PHASE_FLOW_END
(
'
f
'
)
#
define
TRACE_EVENT_PHASE_METADATA
(
'
M
'
)
#
define
TRACE_EVENT_PHASE_COUNTER
(
'
C
'
)
#
define
TRACE_EVENT_PHASE_SAMPLE
(
'
P
'
)
#
define
TRACE_EVENT_PHASE_CREATE_OBJECT
(
'
N
'
)
#
define
TRACE_EVENT_PHASE_SNAPSHOT_OBJECT
(
'
O
'
)
#
define
TRACE_EVENT_PHASE_DELETE_OBJECT
(
'
D
'
)
#
define
TRACE_EVENT_PHASE_MEMORY_DUMP
(
'
v
'
)
#
define
TRACE_EVENT_PHASE_MARK
(
'
R
'
)
#
define
TRACE_EVENT_FLAG_NONE
(
static_cast
<
unsigned
int
>
(
0
)
)
#
define
TRACE_EVENT_FLAG_COPY
(
static_cast
<
unsigned
int
>
(
1
<
<
0
)
)
#
define
TRACE_EVENT_FLAG_HAS_ID
(
static_cast
<
unsigned
int
>
(
1
<
<
1
)
)
#
define
TRACE_EVENT_FLAG_MANGLE_ID
(
static_cast
<
unsigned
int
>
(
1
<
<
2
)
)
#
define
TRACE_EVENT_FLAG_SCOPE_OFFSET
(
static_cast
<
unsigned
int
>
(
1
<
<
3
)
)
#
define
TRACE_EVENT_FLAG_SCOPE_EXTRA
(
static_cast
<
unsigned
int
>
(
1
<
<
4
)
)
#
define
TRACE_EVENT_FLAG_EXPLICIT_TIMESTAMP
(
static_cast
<
unsigned
int
>
(
1
<
<
5
)
)
#
define
TRACE_EVENT_FLAG_ASYNC_TTS
(
static_cast
<
unsigned
int
>
(
1
<
<
6
)
)
#
define
TRACE_EVENT_FLAG_BIND_TO_ENCLOSING
(
static_cast
<
unsigned
int
>
(
1
<
<
7
)
)
#
define
TRACE_EVENT_FLAG_FLOW_IN
(
static_cast
<
unsigned
int
>
(
1
<
<
8
)
)
#
define
TRACE_EVENT_FLAG_FLOW_OUT
(
static_cast
<
unsigned
int
>
(
1
<
<
9
)
)
#
define
TRACE_EVENT_FLAG_HAS_CONTEXT_ID
(
static_cast
<
unsigned
int
>
(
1
<
<
10
)
)
#
define
TRACE_EVENT_FLAG_SCOPE_MASK
\
(
static_cast
<
unsigned
int
>
(
TRACE_EVENT_FLAG_SCOPE_OFFSET
|
\
TRACE_EVENT_FLAG_SCOPE_EXTRA
)
)
#
define
TRACE_VALUE_TYPE_BOOL
(
static_cast
<
unsigned
char
>
(
1
)
)
#
define
TRACE_VALUE_TYPE_UINT
(
static_cast
<
unsigned
char
>
(
2
)
)
#
define
TRACE_VALUE_TYPE_INT
(
static_cast
<
unsigned
char
>
(
3
)
)
#
define
TRACE_VALUE_TYPE_DOUBLE
(
static_cast
<
unsigned
char
>
(
4
)
)
#
define
TRACE_VALUE_TYPE_POINTER
(
static_cast
<
unsigned
char
>
(
5
)
)
#
define
TRACE_VALUE_TYPE_STRING
(
static_cast
<
unsigned
char
>
(
6
)
)
#
define
TRACE_VALUE_TYPE_COPY_STRING
(
static_cast
<
unsigned
char
>
(
7
)
)
#
define
TRACE_VALUE_TYPE_CONVERTABLE
(
static_cast
<
unsigned
char
>
(
8
)
)
#
define
TRACE_EVENT_SCOPE_GLOBAL
(
static_cast
<
unsigned
char
>
(
0
<
<
3
)
)
#
define
TRACE_EVENT_SCOPE_PROCESS
(
static_cast
<
unsigned
char
>
(
1
<
<
3
)
)
#
define
TRACE_EVENT_SCOPE_THREAD
(
static_cast
<
unsigned
char
>
(
2
<
<
3
)
)
#
define
TRACE_EVENT_SCOPE_NAME_GLOBAL
(
'
g
'
)
#
define
TRACE_EVENT_SCOPE_NAME_PROCESS
(
'
p
'
)
#
define
TRACE_EVENT_SCOPE_NAME_THREAD
(
'
t
'
)
