#
ifndef
SkImageCacherator_DEFINED
#
define
SkImageCacherator_DEFINED
#
include
"
SkImageGenerator
.
h
"
#
include
"
SkMutex
.
h
"
#
include
"
SkTemplates
.
h
"
class
GrContext
;
class
GrTextureParams
;
class
GrUniqueKey
;
class
SkBitmap
;
class
SkImage
;
class
SkImageCacherator
{
public
:
static
SkImageCacherator
*
NewFromGenerator
(
SkImageGenerator
*
const
SkIRect
*
subset
=
nullptr
)
;
const
SkImageInfo
&
info
(
)
const
{
return
fInfo
;
}
uint32_t
uniqueID
(
)
const
{
return
fUniqueID
;
}
bool
lockAsBitmap
(
SkBitmap
*
const
SkImage
*
client
SkImage
:
:
CachingHint
=
SkImage
:
:
kAllow_CachingHint
)
;
GrTexture
*
lockAsTexture
(
GrContext
*
const
GrTextureParams
&
SkSourceGammaTreatment
gammaTreatment
const
SkImage
*
client
SkImage
:
:
CachingHint
=
SkImage
:
:
kAllow_CachingHint
)
;
SkData
*
refEncoded
(
GrContext
*
)
;
bool
lockAsBitmapOnlyIfAlreadyCached
(
SkBitmap
*
)
;
bool
directGeneratePixels
(
const
SkImageInfo
&
dstInfo
void
*
dstPixels
size_t
dstRB
int
srcX
int
srcY
)
;
private
:
SkImageCacherator
(
SkImageGenerator
*
const
SkImageInfo
&
const
SkIPoint
&
uint32_t
uniqueID
)
;
bool
generateBitmap
(
SkBitmap
*
)
;
bool
tryLockAsBitmap
(
SkBitmap
*
const
SkImage
*
SkImage
:
:
CachingHint
)
;
#
if
SK_SUPPORT_GPU
GrTexture
*
lockTexture
(
GrContext
*
const
GrUniqueKey
&
key
const
SkImage
*
client
SkImage
:
:
CachingHint
bool
willBeMipped
SkSourceGammaTreatment
)
;
#
endif
class
ScopedGenerator
{
SkImageCacherator
*
fCacher
;
public
:
ScopedGenerator
(
SkImageCacherator
*
cacher
)
:
fCacher
(
cacher
)
{
fCacher
-
>
fMutexForGenerator
.
acquire
(
)
;
}
~
ScopedGenerator
(
)
{
fCacher
-
>
fMutexForGenerator
.
release
(
)
;
}
SkImageGenerator
*
operator
-
>
(
)
const
{
return
fCacher
-
>
fNotThreadSafeGenerator
;
}
operator
SkImageGenerator
*
(
)
const
{
return
fCacher
-
>
fNotThreadSafeGenerator
;
}
}
;
SkMutex
fMutexForGenerator
;
SkAutoTDelete
<
SkImageGenerator
>
fNotThreadSafeGenerator
;
const
SkImageInfo
fInfo
;
const
SkIPoint
fOrigin
;
const
uint32_t
fUniqueID
;
friend
class
GrImageTextureMaker
;
}
;
#
endif
