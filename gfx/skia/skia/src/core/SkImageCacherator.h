#
ifndef
SkImageCacherator_DEFINED
#
define
SkImageCacherator_DEFINED
#
include
"
SkImage
.
h
"
#
include
"
SkImageInfo
.
h
"
#
if
SK_SUPPORT_GPU
#
include
"
GrTextureMaker
.
h
"
#
endif
class
GrCaps
;
class
GrContext
;
class
GrTextureProxy
;
class
GrUniqueKey
;
class
SkColorSpace
;
class
SkImageCacherator
{
public
:
virtual
~
SkImageCacherator
(
)
{
}
enum
CachedFormat
{
kLegacy_CachedFormat
kLinearF16_CachedFormat
kSRGB8888_CachedFormat
kSBGR8888_CachedFormat
kNumCachedFormats
}
;
virtual
CachedFormat
chooseCacheFormat
(
SkColorSpace
*
dstColorSpace
const
GrCaps
*
=
nullptr
)
const
=
0
;
virtual
SkImageInfo
buildCacheInfo
(
CachedFormat
)
const
=
0
;
#
if
SK_SUPPORT_GPU
virtual
sk_sp
<
GrTextureProxy
>
lockTextureProxy
(
GrContext
*
const
GrUniqueKey
&
key
SkImage
:
:
CachingHint
bool
willBeMipped
SkColorSpace
*
dstColorSpace
GrTextureMaker
:
:
AllowedTexGenType
genType
)
=
0
;
virtual
sk_sp
<
SkColorSpace
>
getColorSpace
(
GrContext
*
SkColorSpace
*
dstColorSpace
)
=
0
;
virtual
void
makeCacheKeyFromOrigKey
(
const
GrUniqueKey
&
origKey
CachedFormat
GrUniqueKey
*
cacheKey
)
=
0
;
#
endif
}
;
#
endif
