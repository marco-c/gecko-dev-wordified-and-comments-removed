#
ifndef
SkVarAlloc_DEFINED
#
define
SkVarAlloc_DEFINED
#
include
"
SkTypes
.
h
"
class
SkVarAlloc
:
SkNoncopyable
{
public
:
explicit
SkVarAlloc
(
size_t
minLgSize
)
;
SkVarAlloc
(
size_t
minLgSize
char
*
storage
size_t
len
)
;
~
SkVarAlloc
(
)
;
char
*
alloc
(
size_t
bytes
)
{
bytes
=
SkAlignPtr
(
bytes
)
;
if
(
bytes
>
fRemaining
)
{
this
-
>
makeSpace
(
bytes
)
;
}
SkASSERT
(
bytes
<
=
fRemaining
)
;
char
*
ptr
=
fByte
;
fByte
+
=
bytes
;
fRemaining
=
SkToU32
(
fRemaining
-
bytes
)
;
return
ptr
;
}
size_t
approxBytesAllocated
(
)
const
{
return
fBytesAllocated
;
}
private
:
void
makeSpace
(
size_t
bytes
)
;
size_t
fBytesAllocated
;
char
*
fByte
;
unsigned
fRemaining
;
unsigned
fLgSize
;
struct
Block
;
Block
*
fBlock
;
}
;
static_assert
(
sizeof
(
SkVarAlloc
)
<
=
32
"
SkVarAllocSize
"
)
;
#
endif
