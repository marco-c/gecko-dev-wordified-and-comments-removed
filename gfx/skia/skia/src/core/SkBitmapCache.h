#
ifndef
SkBitmapCache_DEFINED
#
define
SkBitmapCache_DEFINED
#
include
"
SkScalar
.
h
"
#
include
"
SkBitmap
.
h
"
class
SkImage
;
class
SkResourceCache
;
class
SkMipMap
;
uint64_t
SkMakeResourceCacheSharedIDForBitmap
(
uint32_t
bitmapGenID
)
;
void
SkNotifyBitmapGenIDIsStale
(
uint32_t
bitmapGenID
)
;
struct
SkBitmapCacheDesc
{
uint32_t
fImageID
;
int32_t
fWidth
;
int32_t
fHeight
;
SkIRect
fBounds
;
static
SkBitmapCacheDesc
Make
(
const
SkBitmap
&
int
width
int
height
)
;
static
SkBitmapCacheDesc
Make
(
const
SkBitmap
&
)
;
static
SkBitmapCacheDesc
Make
(
const
SkImage
*
int
width
int
height
)
;
static
SkBitmapCacheDesc
Make
(
const
SkImage
*
)
;
}
;
class
SkBitmapCache
{
public
:
static
SkBitmap
:
:
Allocator
*
GetAllocator
(
)
;
static
bool
FindWH
(
const
SkBitmapCacheDesc
&
SkBitmap
*
result
SkResourceCache
*
localCache
=
nullptr
)
;
static
bool
AddWH
(
const
SkBitmapCacheDesc
&
const
SkBitmap
&
result
SkResourceCache
*
localCache
=
nullptr
)
;
static
bool
Find
(
uint32_t
genID
const
SkIRect
&
subset
SkBitmap
*
result
SkResourceCache
*
localCache
=
nullptr
)
;
static
bool
Add
(
SkPixelRef
*
const
SkIRect
&
subset
const
SkBitmap
&
result
SkResourceCache
*
localCache
=
nullptr
)
;
static
bool
Find
(
uint32_t
genID
SkBitmap
*
result
SkResourceCache
*
localCache
=
nullptr
)
;
static
void
Add
(
uint32_t
genID
const
SkBitmap
&
SkResourceCache
*
localCache
=
nullptr
)
;
}
;
class
SkMipMapCache
{
public
:
static
const
SkMipMap
*
FindAndRef
(
const
SkBitmapCacheDesc
&
SkResourceCache
*
localCache
=
nullptr
)
;
static
const
SkMipMap
*
AddAndRef
(
const
SkBitmap
&
src
SkResourceCache
*
localCache
=
nullptr
)
;
}
;
#
endif
