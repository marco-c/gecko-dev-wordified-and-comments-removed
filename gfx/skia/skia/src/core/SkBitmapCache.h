#
ifndef
SkBitmapCache_DEFINED
#
define
SkBitmapCache_DEFINED
#
include
"
SkBitmap
.
h
"
#
include
"
SkMipMap
.
h
"
class
SkImage
;
class
SkResourceCache
;
uint64_t
SkMakeResourceCacheSharedIDForBitmap
(
uint32_t
bitmapGenID
)
;
void
SkNotifyBitmapGenIDIsStale
(
uint32_t
bitmapGenID
)
;
struct
SkBitmapCacheDesc
{
uint32_t
fImageID
;
int32_t
fScaledWidth
;
int32_t
fScaledHeight
;
SkIRect
fSubset
;
void
validate
(
)
const
{
SkASSERT
(
fImageID
)
;
if
(
fScaledWidth
|
|
fScaledHeight
)
{
SkASSERT
(
fScaledWidth
&
&
fScaledHeight
)
;
}
SkASSERT
(
fSubset
.
fLeft
>
=
0
&
&
fSubset
.
fTop
>
=
0
)
;
SkASSERT
(
fSubset
.
width
(
)
>
0
&
&
fSubset
.
height
(
)
>
0
)
;
}
static
SkBitmapCacheDesc
Make
(
const
SkBitmap
&
int
scaledWidth
int
scaledHeight
)
;
static
SkBitmapCacheDesc
Make
(
const
SkBitmap
&
)
;
static
SkBitmapCacheDesc
Make
(
const
SkImage
*
int
scaledWidth
int
scaledHeight
)
;
static
SkBitmapCacheDesc
Make
(
const
SkImage
*
)
;
static
SkBitmapCacheDesc
Make
(
uint32_t
genID
int
origWidth
int
origHeight
)
;
}
;
class
SkBitmapCache
{
public
:
static
bool
Find
(
const
SkBitmapCacheDesc
&
SkBitmap
*
result
)
;
class
Rec
;
struct
RecDeleter
{
void
operator
(
)
(
Rec
*
r
)
{
PrivateDeleteRec
(
r
)
;
}
}
;
typedef
std
:
:
unique_ptr
<
Rec
RecDeleter
>
RecPtr
;
static
RecPtr
Alloc
(
const
SkBitmapCacheDesc
&
const
SkImageInfo
&
SkPixmap
*
)
;
static
void
Add
(
RecPtr
SkBitmap
*
)
;
private
:
static
void
PrivateDeleteRec
(
Rec
*
)
;
}
;
class
SkMipMapCache
{
public
:
static
const
SkMipMap
*
FindAndRef
(
const
SkBitmapCacheDesc
&
SkDestinationSurfaceColorMode
SkResourceCache
*
localCache
=
nullptr
)
;
static
const
SkMipMap
*
AddAndRef
(
const
SkBitmap
&
src
SkDestinationSurfaceColorMode
SkResourceCache
*
localCache
=
nullptr
)
;
}
;
#
endif
