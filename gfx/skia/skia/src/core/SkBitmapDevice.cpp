#
include
"
include
/
core
/
SkImageFilter
.
h
"
#
include
"
include
/
core
/
SkMatrix
.
h
"
#
include
"
include
/
core
/
SkPaint
.
h
"
#
include
"
include
/
core
/
SkPath
.
h
"
#
include
"
include
/
core
/
SkPixmap
.
h
"
#
include
"
include
/
core
/
SkRasterHandleAllocator
.
h
"
#
include
"
include
/
core
/
SkShader
.
h
"
#
include
"
include
/
core
/
SkSurface
.
h
"
#
include
"
include
/
core
/
SkVertices
.
h
"
#
include
"
src
/
core
/
SkBitmapDevice
.
h
"
#
include
"
src
/
core
/
SkDraw
.
h
"
#
include
"
src
/
core
/
SkGlyphRun
.
h
"
#
include
"
src
/
core
/
SkImageFilterCache
.
h
"
#
include
"
src
/
core
/
SkImageFilter_Base
.
h
"
#
include
"
src
/
core
/
SkMakeUnique
.
h
"
#
include
"
src
/
core
/
SkRasterClip
.
h
"
#
include
"
src
/
core
/
SkSpecialImage
.
h
"
#
include
"
src
/
core
/
SkStrikeCache
.
h
"
#
include
"
src
/
core
/
SkTLazy
.
h
"
struct
Bounder
{
SkRect
fBounds
;
bool
fHasBounds
;
Bounder
(
const
SkRect
&
r
const
SkPaint
&
paint
)
{
if
(
(
fHasBounds
=
paint
.
canComputeFastBounds
(
)
)
)
{
fBounds
=
paint
.
computeFastBounds
(
r
&
fBounds
)
;
}
}
bool
hasBounds
(
)
const
{
return
fHasBounds
;
}
const
SkRect
*
bounds
(
)
const
{
return
fHasBounds
?
&
fBounds
:
nullptr
;
}
operator
const
SkRect
*
(
)
const
{
return
this
-
>
bounds
(
)
;
}
}
;
class
SkDrawTiler
{
enum
{
kMaxDim
=
8192
-
1
}
;
SkBitmapDevice
*
fDevice
;
SkPixmap
fRootPixmap
;
SkIRect
fSrcBounds
;
SkDraw
fDraw
;
SkMatrix
fTileMatrix
;
SkRasterClip
fTileRC
;
SkIPoint
fOrigin
;
bool
fDone
fNeedsTiling
;
public
:
static
bool
NeedsTiling
(
SkBitmapDevice
*
dev
)
{
return
dev
-
>
width
(
)
>
kMaxDim
|
|
dev
-
>
height
(
)
>
kMaxDim
;
}
SkDrawTiler
(
SkBitmapDevice
*
dev
const
SkRect
*
bounds
)
:
fDevice
(
dev
)
{
fDone
=
false
;
if
(
!
dev
-
>
accessPixels
(
&
fRootPixmap
)
)
{
fRootPixmap
.
reset
(
dev
-
>
imageInfo
(
)
nullptr
0
)
;
}
const
SkIRect
clipR
=
dev
-
>
fRCStack
.
rc
(
)
.
getBounds
(
)
;
fNeedsTiling
=
clipR
.
right
(
)
>
kMaxDim
|
|
clipR
.
bottom
(
)
>
kMaxDim
;
if
(
fNeedsTiling
)
{
if
(
bounds
)
{
fSrcBounds
=
dev
-
>
ctm
(
)
.
mapRect
(
*
bounds
)
.
roundOut
(
)
;
if
(
fSrcBounds
.
intersect
(
clipR
)
)
{
fNeedsTiling
=
fSrcBounds
.
right
(
)
>
kMaxDim
|
|
fSrcBounds
.
bottom
(
)
>
kMaxDim
;
}
else
{
fNeedsTiling
=
false
;
fDone
=
true
;
}
}
else
{
fSrcBounds
=
clipR
;
}
}
if
(
fNeedsTiling
)
{
fDraw
.
fMatrix
=
&
fTileMatrix
;
fDraw
.
fRC
=
&
fTileRC
;
fOrigin
.
set
(
fSrcBounds
.
fLeft
-
kMaxDim
fSrcBounds
.
fTop
)
;
}
else
{
fDraw
.
fDst
=
fRootPixmap
;
fDraw
.
fMatrix
=
&
dev
-
>
ctm
(
)
;
fDraw
.
fRC
=
&
dev
-
>
fRCStack
.
rc
(
)
;
fOrigin
.
set
(
0
0
)
;
fDraw
.
fCoverage
=
dev
-
>
accessCoverage
(
)
;
}
}
bool
needsTiling
(
)
const
{
return
fNeedsTiling
;
}
const
SkDraw
*
next
(
)
{
if
(
fDone
)
{
return
nullptr
;
}
if
(
fNeedsTiling
)
{
do
{
this
-
>
stepAndSetupTileDraw
(
)
;
}
while
(
!
fDone
&
&
fTileRC
.
isEmpty
(
)
)
;
if
(
fTileRC
.
isEmpty
(
)
)
{
SkASSERT
(
fDone
)
;
return
nullptr
;
}
SkASSERT
(
!
fTileRC
.
isEmpty
(
)
)
;
}
else
{
fDone
=
true
;
}
return
&
fDraw
;
}
private
:
void
stepAndSetupTileDraw
(
)
{
SkASSERT
(
!
fDone
)
;
SkASSERT
(
fNeedsTiling
)
;
if
(
fOrigin
.
fX
>
=
fSrcBounds
.
fRight
-
kMaxDim
)
{
fOrigin
.
fX
=
fSrcBounds
.
fLeft
;
fOrigin
.
fY
+
=
kMaxDim
;
}
else
{
fOrigin
.
fX
+
=
kMaxDim
;
}
fDone
=
fOrigin
.
fX
>
=
fSrcBounds
.
fRight
-
kMaxDim
&
&
fOrigin
.
fY
>
=
fSrcBounds
.
fBottom
-
kMaxDim
;
SkIRect
bounds
=
SkIRect
:
:
MakeXYWH
(
fOrigin
.
x
(
)
fOrigin
.
y
(
)
kMaxDim
kMaxDim
)
;
SkASSERT
(
!
bounds
.
isEmpty
(
)
)
;
bool
success
=
fRootPixmap
.
extractSubset
(
&
fDraw
.
fDst
bounds
)
;
SkASSERT_RELEASE
(
success
)
;
fTileMatrix
=
fDevice
-
>
ctm
(
)
;
fTileMatrix
.
postTranslate
(
SkIntToScalar
(
-
fOrigin
.
x
(
)
)
SkIntToScalar
(
-
fOrigin
.
y
(
)
)
)
;
fDevice
-
>
fRCStack
.
rc
(
)
.
translate
(
-
fOrigin
.
x
(
)
-
fOrigin
.
y
(
)
&
fTileRC
)
;
fTileRC
.
op
(
SkIRect
:
:
MakeWH
(
fDraw
.
fDst
.
width
(
)
fDraw
.
fDst
.
height
(
)
)
SkRegion
:
:
kIntersect_Op
)
;
}
}
;
#
define
LOOP_TILER
(
code
boundsPtr
)
\
SkDrawTiler
priv_tiler
(
this
boundsPtr
)
;
\
while
(
const
SkDraw
*
priv_draw
=
priv_tiler
.
next
(
)
)
{
\
priv_draw
-
>
code
;
\
}
class
SkBitmapDevice
:
:
BDDraw
:
public
SkDraw
{
public
:
BDDraw
(
SkBitmapDevice
*
dev
)
{
if
(
!
dev
-
>
accessPixels
(
&
fDst
)
)
{
fDst
.
reset
(
dev
-
>
imageInfo
(
)
nullptr
0
)
;
}
fMatrix
=
&
dev
-
>
ctm
(
)
;
fRC
=
&
dev
-
>
fRCStack
.
rc
(
)
;
fCoverage
=
dev
-
>
accessCoverage
(
)
;
}
}
;
static
bool
valid_for_bitmap_device
(
const
SkImageInfo
&
info
SkAlphaType
*
newAlphaType
)
{
if
(
info
.
width
(
)
<
0
|
|
info
.
height
(
)
<
0
|
|
kUnknown_SkColorType
=
=
info
.
colorType
(
)
)
{
return
false
;
}
if
(
newAlphaType
)
{
*
newAlphaType
=
SkColorTypeIsAlwaysOpaque
(
info
.
colorType
(
)
)
?
kOpaque_SkAlphaType
:
info
.
alphaType
(
)
;
}
return
true
;
}
SkBitmapDevice
:
:
SkBitmapDevice
(
const
SkBitmap
&
bitmap
)
:
INHERITED
(
bitmap
.
info
(
)
SkSurfaceProps
(
SkSurfaceProps
:
:
kLegacyFontHost_InitType
)
)
fBitmap
(
bitmap
)
fRCStack
(
bitmap
.
width
(
)
bitmap
.
height
(
)
)
fGlyphPainter
(
this
-
>
surfaceProps
(
)
bitmap
.
colorType
(
)
bitmap
.
colorSpace
(
)
SkStrikeCache
:
:
GlobalStrikeCache
(
)
)
{
SkASSERT
(
valid_for_bitmap_device
(
bitmap
.
info
(
)
nullptr
)
)
;
}
SkBitmapDevice
*
SkBitmapDevice
:
:
Create
(
const
SkImageInfo
&
info
)
{
return
Create
(
info
SkSurfaceProps
(
SkSurfaceProps
:
:
kLegacyFontHost_InitType
)
)
;
}
SkBitmapDevice
:
:
SkBitmapDevice
(
const
SkBitmap
&
bitmap
const
SkSurfaceProps
&
surfaceProps
SkRasterHandleAllocator
:
:
Handle
hndl
const
SkBitmap
*
coverage
)
:
INHERITED
(
bitmap
.
info
(
)
surfaceProps
)
fBitmap
(
bitmap
)
fRasterHandle
(
hndl
)
fRCStack
(
bitmap
.
width
(
)
bitmap
.
height
(
)
)
fGlyphPainter
(
this
-
>
surfaceProps
(
)
bitmap
.
colorType
(
)
bitmap
.
colorSpace
(
)
SkStrikeCache
:
:
GlobalStrikeCache
(
)
)
{
SkASSERT
(
valid_for_bitmap_device
(
bitmap
.
info
(
)
nullptr
)
)
;
if
(
coverage
)
{
SkASSERT
(
coverage
-
>
width
(
)
=
=
bitmap
.
width
(
)
)
;
SkASSERT
(
coverage
-
>
height
(
)
=
=
bitmap
.
height
(
)
)
;
fCoverage
=
skstd
:
:
make_unique
<
SkBitmap
>
(
*
coverage
)
;
}
}
SkBitmapDevice
*
SkBitmapDevice
:
:
Create
(
const
SkImageInfo
&
origInfo
const
SkSurfaceProps
&
surfaceProps
bool
trackCoverage
SkRasterHandleAllocator
*
allocator
)
{
SkAlphaType
newAT
=
origInfo
.
alphaType
(
)
;
if
(
!
valid_for_bitmap_device
(
origInfo
&
newAT
)
)
{
return
nullptr
;
}
SkRasterHandleAllocator
:
:
Handle
hndl
=
nullptr
;
const
SkImageInfo
info
=
origInfo
.
makeAlphaType
(
newAT
)
;
SkBitmap
bitmap
;
if
(
kUnknown_SkColorType
=
=
info
.
colorType
(
)
)
{
if
(
!
bitmap
.
setInfo
(
info
)
)
{
return
nullptr
;
}
}
else
if
(
allocator
)
{
hndl
=
allocator
-
>
allocBitmap
(
info
&
bitmap
)
;
if
(
!
hndl
)
{
return
nullptr
;
}
}
else
if
(
info
.
isOpaque
(
)
)
{
if
(
!
bitmap
.
tryAllocPixels
(
info
)
)
{
return
nullptr
;
}
}
else
{
if
(
!
bitmap
.
tryAllocPixelsFlags
(
info
SkBitmap
:
:
kZeroPixels_AllocFlag
)
)
{
return
nullptr
;
}
}
SkBitmap
coverage
;
if
(
trackCoverage
)
{
SkImageInfo
ci
=
SkImageInfo
:
:
Make
(
info
.
dimensions
(
)
kAlpha_8_SkColorType
kPremul_SkAlphaType
)
;
if
(
!
coverage
.
tryAllocPixelsFlags
(
ci
SkBitmap
:
:
kZeroPixels_AllocFlag
)
)
{
return
nullptr
;
}
}
return
new
SkBitmapDevice
(
bitmap
surfaceProps
hndl
trackCoverage
?
&
coverage
:
nullptr
)
;
}
void
SkBitmapDevice
:
:
replaceBitmapBackendForRasterSurface
(
const
SkBitmap
&
bm
)
{
SkASSERT
(
bm
.
width
(
)
=
=
fBitmap
.
width
(
)
)
;
SkASSERT
(
bm
.
height
(
)
=
=
fBitmap
.
height
(
)
)
;
fBitmap
=
bm
;
this
-
>
privateResize
(
fBitmap
.
info
(
)
.
width
(
)
fBitmap
.
info
(
)
.
height
(
)
)
;
}
SkBaseDevice
*
SkBitmapDevice
:
:
onCreateDevice
(
const
CreateInfo
&
cinfo
const
SkPaint
*
layerPaint
)
{
const
SkSurfaceProps
surfaceProps
(
this
-
>
surfaceProps
(
)
.
flags
(
)
cinfo
.
fPixelGeometry
)
;
SkImageInfo
info
=
cinfo
.
fInfo
;
if
(
layerPaint
&
&
layerPaint
-
>
getImageFilter
(
)
)
{
info
=
info
.
makeColorType
(
kN32_SkColorType
)
;
}
return
SkBitmapDevice
:
:
Create
(
info
surfaceProps
cinfo
.
fTrackCoverage
cinfo
.
fAllocator
)
;
}
bool
SkBitmapDevice
:
:
onAccessPixels
(
SkPixmap
*
pmap
)
{
if
(
this
-
>
onPeekPixels
(
pmap
)
)
{
fBitmap
.
notifyPixelsChanged
(
)
;
return
true
;
}
return
false
;
}
bool
SkBitmapDevice
:
:
onPeekPixels
(
SkPixmap
*
pmap
)
{
const
SkImageInfo
info
=
fBitmap
.
info
(
)
;
if
(
fBitmap
.
getPixels
(
)
&
&
(
kUnknown_SkColorType
!
=
info
.
colorType
(
)
)
)
{
pmap
-
>
reset
(
fBitmap
.
info
(
)
fBitmap
.
getPixels
(
)
fBitmap
.
rowBytes
(
)
)
;
return
true
;
}
return
false
;
}
bool
SkBitmapDevice
:
:
onWritePixels
(
const
SkPixmap
&
pm
int
x
int
y
)
{
if
(
nullptr
=
=
fBitmap
.
getPixels
(
)
)
{
return
false
;
}
if
(
fBitmap
.
writePixels
(
pm
x
y
)
)
{
fBitmap
.
notifyPixelsChanged
(
)
;
return
true
;
}
return
false
;
}
bool
SkBitmapDevice
:
:
onReadPixels
(
const
SkPixmap
&
pm
int
x
int
y
)
{
return
fBitmap
.
readPixels
(
pm
x
y
)
;
}
void
SkBitmapDevice
:
:
drawPaint
(
const
SkPaint
&
paint
)
{
BDDraw
(
this
)
.
drawPaint
(
paint
)
;
}
void
SkBitmapDevice
:
:
drawPoints
(
SkCanvas
:
:
PointMode
mode
size_t
count
const
SkPoint
pts
[
]
const
SkPaint
&
paint
)
{
LOOP_TILER
(
drawPoints
(
mode
count
pts
paint
nullptr
)
nullptr
)
}
void
SkBitmapDevice
:
:
drawRect
(
const
SkRect
&
r
const
SkPaint
&
paint
)
{
LOOP_TILER
(
drawRect
(
r
paint
)
Bounder
(
r
paint
)
)
}
void
SkBitmapDevice
:
:
drawOval
(
const
SkRect
&
oval
const
SkPaint
&
paint
)
{
SkPath
path
;
path
.
addOval
(
oval
)
;
this
-
>
drawPath
(
path
paint
true
)
;
}
void
SkBitmapDevice
:
:
drawRRect
(
const
SkRRect
&
rrect
const
SkPaint
&
paint
)
{
#
ifdef
SK_IGNORE_BLURRED_RRECT_OPT
SkPath
path
;
path
.
addRRect
(
rrect
)
;
this
-
>
drawPath
(
path
paint
true
)
;
#
else
LOOP_TILER
(
drawRRect
(
rrect
paint
)
Bounder
(
rrect
.
getBounds
(
)
paint
)
)
#
endif
}
void
SkBitmapDevice
:
:
drawPath
(
const
SkPath
&
path
const
SkPaint
&
paint
bool
pathIsMutable
)
{
const
SkRect
*
bounds
=
nullptr
;
if
(
SkDrawTiler
:
:
NeedsTiling
(
this
)
&
&
!
path
.
isInverseFillType
(
)
)
{
bounds
=
&
path
.
getBounds
(
)
;
}
SkDrawTiler
tiler
(
this
bounds
?
Bounder
(
*
bounds
paint
)
.
bounds
(
)
:
nullptr
)
;
if
(
tiler
.
needsTiling
(
)
)
{
pathIsMutable
=
false
;
}
while
(
const
SkDraw
*
draw
=
tiler
.
next
(
)
)
{
draw
-
>
drawPath
(
path
paint
nullptr
pathIsMutable
)
;
}
}
void
SkBitmapDevice
:
:
drawBitmap
(
const
SkBitmap
&
bitmap
const
SkMatrix
&
matrix
const
SkRect
*
dstOrNull
const
SkPaint
&
paint
)
{
const
SkRect
*
bounds
=
dstOrNull
;
SkRect
storage
;
if
(
!
bounds
&
&
SkDrawTiler
:
:
NeedsTiling
(
this
)
)
{
matrix
.
mapRect
(
&
storage
SkRect
:
:
MakeIWH
(
bitmap
.
width
(
)
bitmap
.
height
(
)
)
)
;
Bounder
b
(
storage
paint
)
;
if
(
b
.
hasBounds
(
)
)
{
storage
=
*
b
.
bounds
(
)
;
bounds
=
&
storage
;
}
}
LOOP_TILER
(
drawBitmap
(
bitmap
matrix
dstOrNull
paint
)
bounds
)
}
static
inline
bool
CanApplyDstMatrixAsCTM
(
const
SkMatrix
&
m
const
SkPaint
&
paint
)
{
if
(
!
paint
.
getMaskFilter
(
)
)
{
return
true
;
}
return
m
.
getType
(
)
<
=
SkMatrix
:
:
kTranslate_Mask
;
}
void
SkBitmapDevice
:
:
drawBitmapRect
(
const
SkBitmap
&
bitmap
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
&
paint
SkCanvas
:
:
SrcRectConstraint
constraint
)
{
SkASSERT
(
dst
.
isFinite
(
)
)
;
SkASSERT
(
dst
.
isSorted
(
)
)
;
SkMatrix
matrix
;
SkRect
bitmapBounds
tmpSrc
tmpDst
;
SkBitmap
tmpBitmap
;
bitmapBounds
.
setIWH
(
bitmap
.
width
(
)
bitmap
.
height
(
)
)
;
if
(
src
)
{
tmpSrc
=
*
src
;
}
else
{
tmpSrc
=
bitmapBounds
;
}
matrix
.
setRectToRect
(
tmpSrc
dst
SkMatrix
:
:
kFill_ScaleToFit
)
;
LogDrawScaleFactor
(
this
-
>
ctm
(
)
matrix
paint
.
getFilterQuality
(
)
)
;
const
SkRect
*
dstPtr
=
&
dst
;
const
SkBitmap
*
bitmapPtr
=
&
bitmap
;
if
(
src
)
{
if
(
!
bitmapBounds
.
contains
(
*
src
)
)
{
if
(
!
tmpSrc
.
intersect
(
bitmapBounds
)
)
{
return
;
}
matrix
.
mapRect
(
&
tmpDst
tmpSrc
)
;
if
(
!
tmpDst
.
isFinite
(
)
)
{
return
;
}
dstPtr
=
&
tmpDst
;
}
}
if
(
src
&
&
!
src
-
>
contains
(
bitmapBounds
)
&
&
SkCanvas
:
:
kFast_SrcRectConstraint
=
=
constraint
&
&
paint
.
getFilterQuality
(
)
!
=
kNone_SkFilterQuality
)
{
goto
USE_SHADER
;
}
if
(
src
)
{
const
SkIRect
srcIR
=
tmpSrc
.
roundOut
(
)
;
if
(
!
bitmap
.
extractSubset
(
&
tmpBitmap
srcIR
)
)
{
return
;
}
bitmapPtr
=
&
tmpBitmap
;
SkScalar
dx
=
0
dy
=
0
;
if
(
srcIR
.
fLeft
>
0
)
{
dx
=
SkIntToScalar
(
srcIR
.
fLeft
)
;
}
if
(
srcIR
.
fTop
>
0
)
{
dy
=
SkIntToScalar
(
srcIR
.
fTop
)
;
}
if
(
dx
|
|
dy
)
{
matrix
.
preTranslate
(
dx
dy
)
;
}
#
ifdef
SK_DRAWBITMAPRECT_FAST_OFFSET
SkRect
extractedBitmapBounds
=
SkRect
:
:
MakeXYWH
(
dx
dy
SkIntToScalar
(
bitmapPtr
-
>
width
(
)
)
SkIntToScalar
(
bitmapPtr
-
>
height
(
)
)
)
;
#
else
SkRect
extractedBitmapBounds
;
extractedBitmapBounds
.
setIWH
(
bitmapPtr
-
>
width
(
)
bitmapPtr
-
>
height
(
)
)
;
#
endif
if
(
extractedBitmapBounds
=
=
tmpSrc
)
{
goto
USE_DRAWBITMAP
;
}
}
else
{
USE_DRAWBITMAP
:
if
(
CanApplyDstMatrixAsCTM
(
matrix
paint
)
)
{
this
-
>
drawBitmap
(
*
bitmapPtr
matrix
dstPtr
paint
)
;
return
;
}
}
USE_SHADER
:
auto
s
=
SkMakeBitmapShaderForPaint
(
paint
*
bitmapPtr
SkTileMode
:
:
kClamp
SkTileMode
:
:
kClamp
&
matrix
kNever_SkCopyPixelsMode
)
;
if
(
!
s
)
{
return
;
}
SkPaint
paintWithShader
(
paint
)
;
paintWithShader
.
setStyle
(
SkPaint
:
:
kFill_Style
)
;
paintWithShader
.
setShader
(
std
:
:
move
(
s
)
)
;
this
-
>
drawRect
(
*
dstPtr
paintWithShader
)
;
}
void
SkBitmapDevice
:
:
drawSprite
(
const
SkBitmap
&
bitmap
int
x
int
y
const
SkPaint
&
paint
)
{
BDDraw
(
this
)
.
drawSprite
(
bitmap
x
y
paint
)
;
}
void
SkBitmapDevice
:
:
drawGlyphRunList
(
const
SkGlyphRunList
&
glyphRunList
)
{
LOOP_TILER
(
drawGlyphRunList
(
glyphRunList
&
fGlyphPainter
)
nullptr
)
}
void
SkBitmapDevice
:
:
drawVertices
(
const
SkVertices
*
vertices
const
SkVertices
:
:
Bone
bones
[
]
int
boneCount
SkBlendMode
bmode
const
SkPaint
&
paint
)
{
BDDraw
(
this
)
.
drawVertices
(
vertices
-
>
mode
(
)
vertices
-
>
vertexCount
(
)
vertices
-
>
positions
(
)
vertices
-
>
texCoords
(
)
vertices
-
>
colors
(
)
vertices
-
>
boneIndices
(
)
vertices
-
>
boneWeights
(
)
bmode
vertices
-
>
indices
(
)
vertices
-
>
indexCount
(
)
paint
bones
boneCount
)
;
}
void
SkBitmapDevice
:
:
drawDevice
(
SkBaseDevice
*
device
int
x
int
y
const
SkPaint
&
origPaint
)
{
SkASSERT
(
!
origPaint
.
getImageFilter
(
)
)
;
SkTCopyOnFirstWrite
<
SkPaint
>
paint
(
origPaint
)
;
if
(
paint
-
>
getMaskFilter
(
)
)
{
paint
.
writable
(
)
-
>
setMaskFilter
(
paint
-
>
getMaskFilter
(
)
-
>
makeWithMatrix
(
this
-
>
ctm
(
)
)
)
;
}
SkBitmapDevice
*
src
=
static_cast
<
SkBitmapDevice
*
>
(
device
)
;
if
(
src
-
>
fCoverage
)
{
SkDraw
draw
;
draw
.
fDst
=
fBitmap
.
pixmap
(
)
;
draw
.
fMatrix
=
&
SkMatrix
:
:
I
(
)
;
draw
.
fRC
=
&
fRCStack
.
rc
(
)
;
SkPaint
paint
(
origPaint
)
;
paint
.
setShader
(
src
-
>
fBitmap
.
makeShader
(
)
)
;
draw
.
drawBitmap
(
*
src
-
>
fCoverage
.
get
(
)
SkMatrix
:
:
MakeTrans
(
SkIntToScalar
(
x
)
SkIntToScalar
(
y
)
)
nullptr
paint
)
;
}
else
{
this
-
>
drawSprite
(
src
-
>
fBitmap
x
y
*
paint
)
;
}
}
void
SkBitmapDevice
:
:
drawAtlas
(
const
SkImage
*
atlas
const
SkRSXform
xform
[
]
const
SkRect
tex
[
]
const
SkColor
colors
[
]
int
count
SkBlendMode
mode
const
SkPaint
&
paint
)
{
if
(
false
)
{
this
-
>
INHERITED
:
:
drawAtlas
(
atlas
xform
tex
colors
count
mode
paint
)
;
return
;
}
BDDraw
(
this
)
.
drawAtlas
(
atlas
xform
tex
colors
count
mode
paint
)
;
}
namespace
{
class
SkAutoDeviceClipRestore
{
public
:
SkAutoDeviceClipRestore
(
SkBaseDevice
*
device
const
SkIRect
&
clip
)
:
fDevice
(
device
)
fPrevCTM
(
device
-
>
ctm
(
)
)
{
fDevice
-
>
save
(
)
;
fDevice
-
>
setCTM
(
SkMatrix
:
:
I
(
)
)
;
fDevice
-
>
clipRect
(
SkRect
:
:
Make
(
clip
)
SkClipOp
:
:
kIntersect
false
)
;
fDevice
-
>
setCTM
(
fPrevCTM
)
;
}
~
SkAutoDeviceClipRestore
(
)
{
fDevice
-
>
restore
(
fPrevCTM
)
;
}
private
:
SkBaseDevice
*
fDevice
;
const
SkMatrix
fPrevCTM
;
}
;
}
void
SkBitmapDevice
:
:
drawSpecial
(
SkSpecialImage
*
src
int
x
int
y
const
SkPaint
&
origPaint
SkImage
*
clipImage
const
SkMatrix
&
clipMatrix
)
{
SkASSERT
(
!
src
-
>
isTextureBacked
(
)
)
;
sk_sp
<
SkSpecialImage
>
filteredImage
;
SkTCopyOnFirstWrite
<
SkPaint
>
paint
(
origPaint
)
;
if
(
SkImageFilter
*
filter
=
paint
-
>
getImageFilter
(
)
)
{
SkIPoint
offset
=
SkIPoint
:
:
Make
(
0
0
)
;
const
SkMatrix
matrix
=
SkMatrix
:
:
Concat
(
SkMatrix
:
:
MakeTrans
(
SkIntToScalar
(
-
x
)
SkIntToScalar
(
-
y
)
)
this
-
>
ctm
(
)
)
;
const
SkIRect
clipBounds
=
fRCStack
.
rc
(
)
.
getBounds
(
)
.
makeOffset
(
-
x
-
y
)
;
sk_sp
<
SkImageFilterCache
>
cache
(
this
-
>
getImageFilterCache
(
)
)
;
SkImageFilter_Base
:
:
Context
ctx
(
matrix
clipBounds
cache
.
get
(
)
fBitmap
.
colorType
(
)
fBitmap
.
colorSpace
(
)
src
)
;
filteredImage
=
as_IFB
(
filter
)
-
>
filterImage
(
ctx
)
.
imageAndOffset
(
&
offset
)
;
if
(
!
filteredImage
)
{
return
;
}
src
=
filteredImage
.
get
(
)
;
paint
.
writable
(
)
-
>
setImageFilter
(
nullptr
)
;
x
+
=
offset
.
x
(
)
;
y
+
=
offset
.
y
(
)
;
}
if
(
paint
-
>
getMaskFilter
(
)
)
{
paint
.
writable
(
)
-
>
setMaskFilter
(
paint
-
>
getMaskFilter
(
)
-
>
makeWithMatrix
(
this
-
>
ctm
(
)
)
)
;
}
if
(
!
clipImage
)
{
SkBitmap
resultBM
;
if
(
src
-
>
getROPixels
(
&
resultBM
)
)
{
this
-
>
drawSprite
(
resultBM
x
y
*
paint
)
;
}
return
;
}
sk_sp
<
SkImage
>
srcImage
(
src
-
>
asImage
(
)
)
;
if
(
!
srcImage
)
{
return
;
}
const
SkMatrix
totalMatrix
=
SkMatrix
:
:
Concat
(
this
-
>
ctm
(
)
clipMatrix
)
;
SkRect
clipBounds
;
totalMatrix
.
mapRect
(
&
clipBounds
SkRect
:
:
Make
(
clipImage
-
>
bounds
(
)
)
)
;
const
SkIRect
srcBounds
=
srcImage
-
>
bounds
(
)
.
makeOffset
(
x
y
)
;
SkIRect
maskBounds
=
fRCStack
.
rc
(
)
.
getBounds
(
)
;
if
(
!
maskBounds
.
intersect
(
clipBounds
.
roundOut
(
)
)
|
|
!
maskBounds
.
intersect
(
srcBounds
)
)
{
return
;
}
sk_sp
<
SkImage
>
mask
;
SkMatrix
maskMatrix
shaderMatrix
;
SkTLazy
<
SkAutoDeviceClipRestore
>
autoClipRestore
;
SkMatrix
totalInverse
;
if
(
clipImage
-
>
isAlphaOnly
(
)
&
&
totalMatrix
.
invert
(
&
totalInverse
)
)
{
mask
=
sk_ref_sp
(
clipImage
)
;
maskMatrix
=
totalMatrix
;
shaderMatrix
=
SkMatrix
:
:
Concat
(
totalInverse
SkMatrix
:
:
MakeTrans
(
x
y
)
)
;
if
(
!
srcBounds
.
contains
(
clipBounds
)
)
{
autoClipRestore
.
init
(
this
srcBounds
)
;
}
maskBounds
.
offsetTo
(
0
0
)
;
}
else
{
sk_sp
<
SkSurface
>
surf
=
SkSurface
:
:
MakeRaster
(
SkImageInfo
:
:
MakeA8
(
maskBounds
.
width
(
)
maskBounds
.
height
(
)
)
)
;
SkCanvas
*
canvas
=
surf
-
>
getCanvas
(
)
;
canvas
-
>
translate
(
-
maskBounds
.
x
(
)
-
maskBounds
.
y
(
)
)
;
canvas
-
>
concat
(
totalMatrix
)
;
canvas
-
>
drawImage
(
clipImage
0
0
)
;
mask
=
surf
-
>
makeImageSnapshot
(
)
;
maskMatrix
=
SkMatrix
:
:
I
(
)
;
shaderMatrix
=
SkMatrix
:
:
MakeTrans
(
x
-
maskBounds
.
x
(
)
y
-
maskBounds
.
y
(
)
)
;
}
SkAutoDeviceCTMRestore
adctmr
(
this
maskMatrix
)
;
paint
.
writable
(
)
-
>
setShader
(
srcImage
-
>
makeShader
(
&
shaderMatrix
)
)
;
this
-
>
drawImageRect
(
mask
.
get
(
)
nullptr
SkRect
:
:
MakeXYWH
(
maskBounds
.
x
(
)
maskBounds
.
y
(
)
mask
-
>
width
(
)
mask
-
>
height
(
)
)
*
paint
SkCanvas
:
:
kFast_SrcRectConstraint
)
;
}
sk_sp
<
SkSpecialImage
>
SkBitmapDevice
:
:
makeSpecial
(
const
SkBitmap
&
bitmap
)
{
return
SkSpecialImage
:
:
MakeFromRaster
(
bitmap
.
bounds
(
)
bitmap
)
;
}
sk_sp
<
SkSpecialImage
>
SkBitmapDevice
:
:
makeSpecial
(
const
SkImage
*
image
)
{
return
SkSpecialImage
:
:
MakeFromImage
(
nullptr
SkIRect
:
:
MakeWH
(
image
-
>
width
(
)
image
-
>
height
(
)
)
image
-
>
makeNonTextureImage
(
)
)
;
}
sk_sp
<
SkSpecialImage
>
SkBitmapDevice
:
:
snapSpecial
(
const
SkIRect
&
bounds
bool
forceCopy
)
{
if
(
forceCopy
)
{
return
SkSpecialImage
:
:
CopyFromRaster
(
bounds
fBitmap
&
this
-
>
surfaceProps
(
)
)
;
}
else
{
return
SkSpecialImage
:
:
MakeFromRaster
(
bounds
fBitmap
)
;
}
}
sk_sp
<
SkSurface
>
SkBitmapDevice
:
:
makeSurface
(
const
SkImageInfo
&
info
const
SkSurfaceProps
&
props
)
{
return
SkSurface
:
:
MakeRaster
(
info
&
props
)
;
}
SkImageFilterCache
*
SkBitmapDevice
:
:
getImageFilterCache
(
)
{
SkImageFilterCache
*
cache
=
SkImageFilterCache
:
:
Get
(
)
;
cache
-
>
ref
(
)
;
return
cache
;
}
void
SkBitmapDevice
:
:
onSave
(
)
{
fRCStack
.
save
(
)
;
}
void
SkBitmapDevice
:
:
onRestore
(
)
{
fRCStack
.
restore
(
)
;
}
void
SkBitmapDevice
:
:
onClipRect
(
const
SkRect
&
rect
SkClipOp
op
bool
aa
)
{
fRCStack
.
clipRect
(
this
-
>
ctm
(
)
rect
op
aa
)
;
}
void
SkBitmapDevice
:
:
onClipRRect
(
const
SkRRect
&
rrect
SkClipOp
op
bool
aa
)
{
fRCStack
.
clipRRect
(
this
-
>
ctm
(
)
rrect
op
aa
)
;
}
void
SkBitmapDevice
:
:
onClipPath
(
const
SkPath
&
path
SkClipOp
op
bool
aa
)
{
fRCStack
.
clipPath
(
this
-
>
ctm
(
)
path
op
aa
)
;
}
void
SkBitmapDevice
:
:
onClipRegion
(
const
SkRegion
&
rgn
SkClipOp
op
)
{
SkIPoint
origin
=
this
-
>
getOrigin
(
)
;
SkRegion
tmp
;
const
SkRegion
*
ptr
=
&
rgn
;
if
(
origin
.
fX
|
origin
.
fY
)
{
rgn
.
translate
(
-
origin
.
fX
-
origin
.
fY
&
tmp
)
;
ptr
=
&
tmp
;
}
fRCStack
.
clipRegion
(
*
ptr
op
)
;
}
void
SkBitmapDevice
:
:
onSetDeviceClipRestriction
(
SkIRect
*
mutableClipRestriction
)
{
fRCStack
.
setDeviceClipRestriction
(
mutableClipRestriction
)
;
if
(
!
mutableClipRestriction
-
>
isEmpty
(
)
)
{
SkRegion
rgn
(
*
mutableClipRestriction
)
;
fRCStack
.
clipRegion
(
rgn
SkClipOp
:
:
kIntersect
)
;
}
}
bool
SkBitmapDevice
:
:
onClipIsAA
(
)
const
{
const
SkRasterClip
&
rc
=
fRCStack
.
rc
(
)
;
return
!
rc
.
isEmpty
(
)
&
&
rc
.
isAA
(
)
;
}
void
SkBitmapDevice
:
:
onAsRgnClip
(
SkRegion
*
rgn
)
const
{
const
SkRasterClip
&
rc
=
fRCStack
.
rc
(
)
;
if
(
rc
.
isAA
(
)
)
{
rgn
-
>
setRect
(
rc
.
getBounds
(
)
)
;
}
else
{
*
rgn
=
rc
.
bwRgn
(
)
;
}
}
void
SkBitmapDevice
:
:
validateDevBounds
(
const
SkIRect
&
drawClipBounds
)
{
#
ifdef
SK_DEBUG
const
SkIRect
&
stackBounds
=
fRCStack
.
rc
(
)
.
getBounds
(
)
;
SkASSERT
(
drawClipBounds
=
=
stackBounds
)
;
#
endif
}
SkBaseDevice
:
:
ClipType
SkBitmapDevice
:
:
onGetClipType
(
)
const
{
const
SkRasterClip
&
rc
=
fRCStack
.
rc
(
)
;
if
(
rc
.
isEmpty
(
)
)
{
return
ClipType
:
:
kEmpty
;
}
else
if
(
rc
.
isRect
(
)
)
{
return
ClipType
:
:
kRect
;
}
else
{
return
ClipType
:
:
kComplex
;
}
}
