#
include
"
.
.
/
jumper
/
SkJumper
.
h
"
#
include
"
SkArenaAlloc
.
h
"
#
include
"
SkBlendModePriv
.
h
"
#
include
"
SkBlitter
.
h
"
#
include
"
SkColor
.
h
"
#
include
"
SkColorFilter
.
h
"
#
include
"
SkColorSpacePriv
.
h
"
#
include
"
SkColorSpaceXformer
.
h
"
#
include
"
SkOpts
.
h
"
#
include
"
SkPM4f
.
h
"
#
include
"
SkPM4fPriv
.
h
"
#
include
"
SkRasterPipeline
.
h
"
#
include
"
SkShader
.
h
"
#
include
"
SkShaderBase
.
h
"
#
include
"
SkTo
.
h
"
#
include
"
SkUtils
.
h
"
class
SkRasterPipelineBlitter
final
:
public
SkBlitter
{
public
:
static
SkBlitter
*
Create
(
const
SkPixmap
&
const
SkPaint
&
SkArenaAlloc
*
const
SkRasterPipeline
&
shaderPipeline
SkShaderBase
:
:
Context
*
bool
is_opaque
bool
is_constant
)
;
SkRasterPipelineBlitter
(
SkPixmap
dst
SkBlendMode
blend
SkArenaAlloc
*
alloc
SkShaderBase
:
:
Context
*
burstCtx
)
:
fDst
(
dst
)
fBlend
(
blend
)
fAlloc
(
alloc
)
fBurstCtx
(
burstCtx
)
fColorPipeline
(
alloc
)
{
}
void
blitH
(
int
x
int
y
int
w
)
override
;
void
blitAntiH
(
int
x
int
y
const
SkAlpha
[
]
const
int16_t
[
]
)
override
;
void
blitAntiH2
(
int
x
int
y
U8CPU
a0
U8CPU
a1
)
override
;
void
blitAntiV2
(
int
x
int
y
U8CPU
a0
U8CPU
a1
)
override
;
void
blitMask
(
const
SkMask
&
const
SkIRect
&
clip
)
override
;
void
blitRect
(
int
x
int
y
int
width
int
height
)
override
;
void
blitV
(
int
x
int
y
int
height
SkAlpha
alpha
)
override
;
private
:
void
append_load_dst
(
SkRasterPipeline
*
)
const
;
void
append_store
(
SkRasterPipeline
*
)
const
;
void
burst_shade
(
int
x
int
y
int
w
)
;
SkPixmap
fDst
;
SkBlendMode
fBlend
;
SkArenaAlloc
*
fAlloc
;
SkShaderBase
:
:
Context
*
fBurstCtx
;
SkRasterPipeline
fColorPipeline
;
SkJumper_MemoryCtx
fShaderOutput
=
{
nullptr
0
}
fDstPtr
=
{
nullptr
0
}
fMaskPtr
=
{
nullptr
0
}
;
bool
fCanMemsetInBlitRect
=
false
;
uint64_t
fMemsetColor
=
0
;
std
:
:
function
<
void
(
size_t
size_t
size_t
size_t
)
>
fBlitRect
fBlitAntiH
fBlitMaskA8
fBlitMaskLCD16
;
float
fCurrentCoverage
=
0
.
0f
;
float
fDitherRate
=
0
.
0f
;
std
:
:
vector
<
SkPMColor4f
>
fShaderBuffer
;
typedef
SkBlitter
INHERITED
;
}
;
SkBlitter
*
SkCreateRasterPipelineBlitter
(
const
SkPixmap
&
dst
const
SkPaint
&
paint
const
SkMatrix
&
ctm
SkArenaAlloc
*
alloc
)
{
#
if
0
SkColorSpace
*
dstCS
=
dst
.
colorSpace
(
)
?
dst
.
colorSpace
(
)
:
sk_srgb_singleton
(
)
;
#
else
SkColorSpace
*
dstCS
=
dst
.
colorSpace
(
)
;
#
endif
SkColor4f
paintColor
=
premul_in_dst_colorspace
(
paint
.
getColor4f
(
)
sk_srgb_singleton
(
)
dstCS
)
;
auto
shader
=
as_SB
(
paint
.
getShader
(
)
)
;
SkRasterPipeline_
<
256
>
shaderPipeline
;
if
(
!
shader
)
{
shaderPipeline
.
append_constant_color
(
alloc
paintColor
)
;
bool
is_opaque
=
paintColor
.
fA
=
=
1
.
0f
is_constant
=
true
;
return
SkRasterPipelineBlitter
:
:
Create
(
dst
paint
alloc
shaderPipeline
nullptr
is_opaque
is_constant
)
;
}
bool
is_opaque
=
shader
-
>
isOpaque
(
)
&
&
paintColor
.
fA
=
=
1
.
0f
;
bool
is_constant
=
shader
-
>
isConstant
(
)
;
if
(
auto
*
burstCtx
=
shader
-
>
makeBurstPipelineContext
(
SkShaderBase
:
:
ContextRec
(
paint
ctm
nullptr
dstCS
)
alloc
)
)
{
return
SkRasterPipelineBlitter
:
:
Create
(
dst
paint
alloc
shaderPipeline
burstCtx
is_opaque
is_constant
)
;
}
if
(
shader
-
>
appendStages
(
{
&
shaderPipeline
alloc
dstCS
paint
nullptr
ctm
}
)
)
{
if
(
paintColor
.
fA
!
=
1
.
0f
)
{
shaderPipeline
.
append
(
SkRasterPipeline
:
:
scale_1_float
alloc
-
>
make
<
float
>
(
paintColor
.
fA
)
)
;
}
return
SkRasterPipelineBlitter
:
:
Create
(
dst
paint
alloc
shaderPipeline
nullptr
is_opaque
is_constant
)
;
}
return
alloc
-
>
make
<
SkNullBlitter
>
(
)
;
}
SkBlitter
*
SkCreateRasterPipelineBlitter
(
const
SkPixmap
&
dst
const
SkPaint
&
paint
const
SkRasterPipeline
&
shaderPipeline
bool
is_opaque
SkArenaAlloc
*
alloc
)
{
bool
is_constant
=
false
;
return
SkRasterPipelineBlitter
:
:
Create
(
dst
paint
alloc
shaderPipeline
nullptr
is_opaque
is_constant
)
;
}
SkBlitter
*
SkRasterPipelineBlitter
:
:
Create
(
const
SkPixmap
&
dst
const
SkPaint
&
paint
SkArenaAlloc
*
alloc
const
SkRasterPipeline
&
shaderPipeline
SkShaderBase
:
:
Context
*
burstCtx
bool
is_opaque
bool
is_constant
)
{
auto
blitter
=
alloc
-
>
make
<
SkRasterPipelineBlitter
>
(
dst
paint
.
getBlendMode
(
)
alloc
burstCtx
)
;
auto
colorPipeline
=
&
blitter
-
>
fColorPipeline
;
if
(
burstCtx
)
{
colorPipeline
-
>
append
(
SkRasterPipeline
:
:
load_f32
&
blitter
-
>
fShaderOutput
)
;
}
else
{
colorPipeline
-
>
extend
(
shaderPipeline
)
;
}
if
(
auto
colorFilter
=
paint
.
getColorFilter
(
)
)
{
colorFilter
-
>
appendStages
(
colorPipeline
dst
.
colorSpace
(
)
alloc
is_opaque
)
;
is_opaque
=
is_opaque
&
&
(
colorFilter
-
>
getFlags
(
)
&
SkColorFilter
:
:
kAlphaUnchanged_Flag
)
;
}
if
(
paint
.
isDither
(
)
)
{
switch
(
dst
.
info
(
)
.
colorType
(
)
)
{
default
:
blitter
-
>
fDitherRate
=
0
.
0f
;
break
;
case
kARGB_4444_SkColorType
:
blitter
-
>
fDitherRate
=
1
/
15
.
0f
;
break
;
case
kRGB_565_SkColorType
:
blitter
-
>
fDitherRate
=
1
/
63
.
0f
;
break
;
case
kGray_8_SkColorType
:
case
kRGB_888x_SkColorType
:
case
kRGBA_8888_SkColorType
:
case
kBGRA_8888_SkColorType
:
blitter
-
>
fDitherRate
=
1
/
255
.
0f
;
break
;
case
kRGB_101010x_SkColorType
:
case
kRGBA_1010102_SkColorType
:
blitter
-
>
fDitherRate
=
1
/
1023
.
0f
;
break
;
}
}
is_constant
=
is_constant
&
&
(
blitter
-
>
fDitherRate
=
=
0
.
0f
)
;
if
(
is_constant
)
{
SkColor4f
constantColor
;
SkJumper_MemoryCtx
constantColorPtr
=
{
&
constantColor
0
}
;
colorPipeline
-
>
append_gamut_clamp_if_normalized
(
dst
.
info
(
)
)
;
colorPipeline
-
>
append
(
SkRasterPipeline
:
:
store_f32
&
constantColorPtr
)
;
colorPipeline
-
>
run
(
0
0
1
1
)
;
colorPipeline
-
>
reset
(
)
;
colorPipeline
-
>
append_constant_color
(
alloc
constantColor
)
;
is_opaque
=
constantColor
.
fA
=
=
1
.
0f
;
}
if
(
is_opaque
&
&
blitter
-
>
fBlend
=
=
SkBlendMode
:
:
kSrcOver
)
{
blitter
-
>
fBlend
=
SkBlendMode
:
:
kSrc
;
}
if
(
is_constant
&
&
blitter
-
>
fBlend
=
=
SkBlendMode
:
:
kSrc
&
&
blitter
-
>
fDst
.
shiftPerPixel
(
)
<
=
3
)
{
SkRasterPipeline_
<
256
>
p
;
p
.
extend
(
*
colorPipeline
)
;
p
.
append_gamut_clamp_if_normalized
(
dst
.
info
(
)
)
;
blitter
-
>
fDstPtr
=
SkJumper_MemoryCtx
{
&
blitter
-
>
fMemsetColor
0
}
;
blitter
-
>
append_store
(
&
p
)
;
p
.
run
(
0
0
1
1
)
;
blitter
-
>
fCanMemsetInBlitRect
=
true
;
}
blitter
-
>
fDstPtr
=
SkJumper_MemoryCtx
{
blitter
-
>
fDst
.
writable_addr
(
)
blitter
-
>
fDst
.
rowBytesAsPixels
(
)
}
;
return
blitter
;
}
void
SkRasterPipelineBlitter
:
:
append_load_dst
(
SkRasterPipeline
*
p
)
const
{
p
-
>
append_load_dst
(
fDst
.
info
(
)
.
colorType
(
)
&
fDstPtr
)
;
if
(
fDst
.
info
(
)
.
alphaType
(
)
=
=
kUnpremul_SkAlphaType
)
{
p
-
>
append
(
SkRasterPipeline
:
:
premul_dst
)
;
}
}
void
SkRasterPipelineBlitter
:
:
append_store
(
SkRasterPipeline
*
p
)
const
{
if
(
fDst
.
info
(
)
.
alphaType
(
)
=
=
kUnpremul_SkAlphaType
)
{
p
-
>
append
(
SkRasterPipeline
:
:
unpremul
)
;
}
if
(
fDitherRate
>
0
.
0f
)
{
p
-
>
append
(
SkRasterPipeline
:
:
dither
&
fDitherRate
)
;
}
p
-
>
append_store
(
fDst
.
info
(
)
.
colorType
(
)
&
fDstPtr
)
;
}
void
SkRasterPipelineBlitter
:
:
burst_shade
(
int
x
int
y
int
w
)
{
SkASSERT
(
fBurstCtx
)
;
if
(
w
>
SkToInt
(
fShaderBuffer
.
size
(
)
)
)
{
fShaderBuffer
.
resize
(
w
)
;
}
fBurstCtx
-
>
shadeSpan4f
(
x
y
fShaderBuffer
.
data
(
)
w
)
;
fShaderOutput
=
SkJumper_MemoryCtx
{
fShaderBuffer
.
data
(
)
-
x
0
}
;
}
void
SkRasterPipelineBlitter
:
:
blitH
(
int
x
int
y
int
w
)
{
this
-
>
blitRect
(
x
y
w
1
)
;
}
void
SkRasterPipelineBlitter
:
:
blitRect
(
int
x
int
y
int
w
int
h
)
{
if
(
fCanMemsetInBlitRect
)
{
for
(
int
ylimit
=
y
+
h
;
y
<
ylimit
;
y
+
+
)
{
switch
(
fDst
.
shiftPerPixel
(
)
)
{
case
0
:
memset
(
fDst
.
writable_addr8
(
x
y
)
fMemsetColor
w
)
;
break
;
case
1
:
sk_memset16
(
fDst
.
writable_addr16
(
x
y
)
fMemsetColor
w
)
;
break
;
case
2
:
sk_memset32
(
fDst
.
writable_addr32
(
x
y
)
fMemsetColor
w
)
;
break
;
case
3
:
sk_memset64
(
fDst
.
writable_addr64
(
x
y
)
fMemsetColor
w
)
;
break
;
default
:
SkASSERT
(
false
)
;
break
;
}
}
return
;
}
if
(
!
fBlitRect
)
{
SkRasterPipeline
p
(
fAlloc
)
;
p
.
extend
(
fColorPipeline
)
;
p
.
append_gamut_clamp_if_normalized
(
fDst
.
info
(
)
)
;
if
(
fBlend
=
=
SkBlendMode
:
:
kSrcOver
&
&
(
fDst
.
info
(
)
.
colorType
(
)
=
=
kRGBA_8888_SkColorType
|
|
fDst
.
info
(
)
.
colorType
(
)
=
=
kBGRA_8888_SkColorType
)
&
&
!
fDst
.
colorSpace
(
)
&
&
fDst
.
info
(
)
.
alphaType
(
)
!
=
kUnpremul_SkAlphaType
&
&
fDitherRate
=
=
0
.
0f
)
{
auto
stage
=
fDst
.
info
(
)
.
colorType
(
)
=
=
kRGBA_8888_SkColorType
?
SkRasterPipeline
:
:
srcover_rgba_8888
:
SkRasterPipeline
:
:
srcover_bgra_8888
;
p
.
append
(
stage
&
fDstPtr
)
;
}
else
{
if
(
fBlend
!
=
SkBlendMode
:
:
kSrc
)
{
this
-
>
append_load_dst
(
&
p
)
;
SkBlendMode_AppendStages
(
fBlend
&
p
)
;
}
this
-
>
append_store
(
&
p
)
;
}
fBlitRect
=
p
.
compile
(
)
;
}
if
(
fBurstCtx
)
{
for
(
int
ylimit
=
y
+
h
;
y
<
ylimit
;
y
+
+
)
{
this
-
>
burst_shade
(
x
y
w
)
;
fBlitRect
(
x
y
w
1
)
;
}
}
else
{
fBlitRect
(
x
y
w
h
)
;
}
}
void
SkRasterPipelineBlitter
:
:
blitAntiH
(
int
x
int
y
const
SkAlpha
aa
[
]
const
int16_t
runs
[
]
)
{
if
(
!
fBlitAntiH
)
{
SkRasterPipeline
p
(
fAlloc
)
;
p
.
extend
(
fColorPipeline
)
;
p
.
append_gamut_clamp_if_normalized
(
fDst
.
info
(
)
)
;
if
(
SkBlendMode_ShouldPreScaleCoverage
(
fBlend
false
)
)
{
p
.
append
(
SkRasterPipeline
:
:
scale_1_float
&
fCurrentCoverage
)
;
this
-
>
append_load_dst
(
&
p
)
;
SkBlendMode_AppendStages
(
fBlend
&
p
)
;
}
else
{
this
-
>
append_load_dst
(
&
p
)
;
SkBlendMode_AppendStages
(
fBlend
&
p
)
;
p
.
append
(
SkRasterPipeline
:
:
lerp_1_float
&
fCurrentCoverage
)
;
}
this
-
>
append_store
(
&
p
)
;
fBlitAntiH
=
p
.
compile
(
)
;
}
for
(
int16_t
run
=
*
runs
;
run
>
0
;
run
=
*
runs
)
{
switch
(
*
aa
)
{
case
0x00
:
break
;
case
0xff
:
this
-
>
blitH
(
x
y
run
)
;
break
;
default
:
fCurrentCoverage
=
*
aa
*
(
1
/
255
.
0f
)
;
if
(
fBurstCtx
)
{
this
-
>
burst_shade
(
x
y
run
)
;
}
fBlitAntiH
(
x
y
run
1
)
;
}
x
+
=
run
;
runs
+
=
run
;
aa
+
=
run
;
}
}
void
SkRasterPipelineBlitter
:
:
blitAntiH2
(
int
x
int
y
U8CPU
a0
U8CPU
a1
)
{
SkIRect
clip
=
{
x
y
x
+
2
y
+
1
}
;
uint8_t
coverage
[
]
=
{
(
uint8_t
)
a0
(
uint8_t
)
a1
}
;
SkMask
mask
;
mask
.
fImage
=
coverage
;
mask
.
fBounds
=
clip
;
mask
.
fRowBytes
=
2
;
mask
.
fFormat
=
SkMask
:
:
kA8_Format
;
this
-
>
blitMask
(
mask
clip
)
;
}
void
SkRasterPipelineBlitter
:
:
blitAntiV2
(
int
x
int
y
U8CPU
a0
U8CPU
a1
)
{
SkIRect
clip
=
{
x
y
x
+
1
y
+
2
}
;
uint8_t
coverage
[
]
=
{
(
uint8_t
)
a0
(
uint8_t
)
a1
}
;
SkMask
mask
;
mask
.
fImage
=
coverage
;
mask
.
fBounds
=
clip
;
mask
.
fRowBytes
=
1
;
mask
.
fFormat
=
SkMask
:
:
kA8_Format
;
this
-
>
blitMask
(
mask
clip
)
;
}
void
SkRasterPipelineBlitter
:
:
blitV
(
int
x
int
y
int
height
SkAlpha
alpha
)
{
SkIRect
clip
=
{
x
y
x
+
1
y
+
height
}
;
SkMask
mask
;
mask
.
fImage
=
&
alpha
;
mask
.
fBounds
=
clip
;
mask
.
fRowBytes
=
0
;
mask
.
fFormat
=
SkMask
:
:
kA8_Format
;
this
-
>
blitMask
(
mask
clip
)
;
}
void
SkRasterPipelineBlitter
:
:
blitMask
(
const
SkMask
&
mask
const
SkIRect
&
clip
)
{
if
(
mask
.
fFormat
=
=
SkMask
:
:
kBW_Format
)
{
return
INHERITED
:
:
blitMask
(
mask
clip
)
;
}
SkMask
:
:
Format
effectiveMaskFormat
=
mask
.
fFormat
=
=
SkMask
:
:
k3D_Format
?
SkMask
:
:
kA8_Format
:
mask
.
fFormat
;
if
(
effectiveMaskFormat
=
=
SkMask
:
:
kA8_Format
&
&
!
fBlitMaskA8
)
{
SkRasterPipeline
p
(
fAlloc
)
;
p
.
extend
(
fColorPipeline
)
;
p
.
append_gamut_clamp_if_normalized
(
fDst
.
info
(
)
)
;
if
(
SkBlendMode_ShouldPreScaleCoverage
(
fBlend
false
)
)
{
p
.
append
(
SkRasterPipeline
:
:
scale_u8
&
fMaskPtr
)
;
this
-
>
append_load_dst
(
&
p
)
;
SkBlendMode_AppendStages
(
fBlend
&
p
)
;
}
else
{
this
-
>
append_load_dst
(
&
p
)
;
SkBlendMode_AppendStages
(
fBlend
&
p
)
;
p
.
append
(
SkRasterPipeline
:
:
lerp_u8
&
fMaskPtr
)
;
}
this
-
>
append_store
(
&
p
)
;
fBlitMaskA8
=
p
.
compile
(
)
;
}
if
(
effectiveMaskFormat
=
=
SkMask
:
:
kLCD16_Format
&
&
!
fBlitMaskLCD16
)
{
SkRasterPipeline
p
(
fAlloc
)
;
p
.
extend
(
fColorPipeline
)
;
p
.
append_gamut_clamp_if_normalized
(
fDst
.
info
(
)
)
;
if
(
SkBlendMode_ShouldPreScaleCoverage
(
fBlend
true
)
)
{
this
-
>
append_load_dst
(
&
p
)
;
p
.
append
(
SkRasterPipeline
:
:
scale_565
&
fMaskPtr
)
;
SkBlendMode_AppendStages
(
fBlend
&
p
)
;
}
else
{
this
-
>
append_load_dst
(
&
p
)
;
SkBlendMode_AppendStages
(
fBlend
&
p
)
;
p
.
append
(
SkRasterPipeline
:
:
lerp_565
&
fMaskPtr
)
;
}
this
-
>
append_store
(
&
p
)
;
fBlitMaskLCD16
=
p
.
compile
(
)
;
}
std
:
:
function
<
void
(
size_t
size_t
size_t
size_t
)
>
*
blitter
=
nullptr
;
size_t
rowBytes
=
mask
.
fRowBytes
;
switch
(
effectiveMaskFormat
)
{
case
SkMask
:
:
kA8_Format
:
fMaskPtr
.
stride
=
rowBytes
;
fMaskPtr
.
pixels
=
(
void
*
)
(
(
uintptr_t
)
mask
.
fImage
-
mask
.
fBounds
.
left
(
)
*
(
size_t
)
1
-
mask
.
fBounds
.
top
(
)
*
rowBytes
)
;
blitter
=
&
fBlitMaskA8
;
break
;
case
SkMask
:
:
kLCD16_Format
:
fMaskPtr
.
stride
=
rowBytes
/
2
;
fMaskPtr
.
pixels
=
(
void
*
)
(
(
uintptr_t
)
mask
.
fImage
-
mask
.
fBounds
.
left
(
)
*
(
size_t
)
2
-
mask
.
fBounds
.
top
(
)
*
rowBytes
)
;
blitter
=
&
fBlitMaskLCD16
;
break
;
default
:
return
;
}
SkASSERT
(
blitter
)
;
if
(
fBurstCtx
)
{
int
x
=
clip
.
left
(
)
;
for
(
int
y
=
clip
.
top
(
)
;
y
<
clip
.
bottom
(
)
;
y
+
+
)
{
this
-
>
burst_shade
(
x
y
clip
.
width
(
)
)
;
(
*
blitter
)
(
x
y
clip
.
width
(
)
1
)
;
}
}
else
{
(
*
blitter
)
(
clip
.
left
(
)
clip
.
top
(
)
clip
.
width
(
)
clip
.
height
(
)
)
;
}
}
