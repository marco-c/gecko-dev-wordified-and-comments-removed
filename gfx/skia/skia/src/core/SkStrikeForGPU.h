#
ifndef
SkStrikeInterface_DEFINED
#
define
SkStrikeInterface_DEFINED
#
include
"
include
/
core
/
SkPaint
.
h
"
#
include
"
include
/
core
/
SkPoint
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
src
/
core
/
SkGlyph
.
h
"
#
include
"
src
/
core
/
SkSpan
.
h
"
#
include
<
memory
>
class
SkDescriptor
;
class
SkGlyph
;
class
SkMaskFilter
;
class
SkPathEffect
;
class
SkTypeface
;
struct
SkGlyphPositionRoundingSpec
;
struct
SkScalerContextEffects
;
struct
SkGlyphPos
{
size_t
index
;
const
SkGlyph
*
glyph
;
SkPoint
position
;
}
;
struct
SkPathPos
{
const
SkPath
*
path
;
SkPoint
position
;
}
;
class
SkStrikeForGPU
{
public
:
virtual
~
SkStrikeForGPU
(
)
=
default
;
virtual
const
SkDescriptor
&
getDescriptor
(
)
const
=
0
;
virtual
SkSpan
<
const
SkGlyphPos
>
prepareForDrawingRemoveEmpty
(
const
SkPackedGlyphID
packedGlyphIDs
[
]
const
SkPoint
positions
[
]
size_t
n
int
maxDimension
SkGlyphPos
results
[
]
)
=
0
;
virtual
const
SkGlyphPositionRoundingSpec
&
roundingSpec
(
)
const
=
0
;
virtual
void
onAboutToExitScope
(
)
=
0
;
static
bool
CanDrawAsMask
(
const
SkGlyph
&
glyph
)
;
static
bool
CanDrawAsSDFT
(
const
SkGlyph
&
glyph
)
;
static
bool
CanDrawAsPath
(
const
SkGlyph
&
glyph
)
;
struct
Deleter
{
void
operator
(
)
(
SkStrikeForGPU
*
ptr
)
const
{
ptr
-
>
onAboutToExitScope
(
)
;
}
}
;
}
;
using
SkScopedStrikeForGPU
=
std
:
:
unique_ptr
<
SkStrikeForGPU
SkStrikeForGPU
:
:
Deleter
>
;
class
SkStrikeForGPUCacheInterface
{
public
:
virtual
~
SkStrikeForGPUCacheInterface
(
)
=
default
;
virtual
SkScopedStrikeForGPU
findOrCreateScopedStrike
(
const
SkDescriptor
&
desc
const
SkScalerContextEffects
&
effects
const
SkTypeface
&
typeface
)
=
0
;
}
;
#
endif
