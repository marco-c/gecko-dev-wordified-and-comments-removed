#
ifndef
SkPipeFormat_DEFINED
#
define
SkPipeFormat_DEFINED
#
include
"
SkTypes
.
h
"
#
define
kDefinePicture_ExtPipeVerb
SkSetFourByteTag
(
'
s
'
'
k
'
'
p
'
'
i
'
)
enum
class
SkPipeVerb
:
uint8_t
{
kSave
kSaveLayer
kRestore
kConcat
kClipRect
kClipRRect
kClipPath
kClipRegion
kDrawArc
kDrawAtlas
kDrawDRRect
kDrawText
kDrawPosText
kDrawPosTextH
kDrawRegion
kDrawTextOnPath
kDrawTextBlob
kDrawTextRSXform
kDrawPatch
kDrawPaint
kDrawPoints
kDrawRect
kDrawPath
kDrawOval
kDrawRRect
kDrawImage
kDrawImageRect
kDrawImageNine
kDrawImageLattice
kDrawVertices
kDrawPicture
kDrawAnnotation
kDefineImage
kDefineTypeface
kDefineFactory
kDefinePicture
kEndPicture
kWriteImage
kWritePicture
}
;
enum
PaintUsage
{
kText_PaintUsage
=
1
<
<
0
kTextBlob_PaintUsage
=
1
<
<
1
kGeometry_PaintUsage
=
1
<
<
2
kImage_PaintUsage
=
1
<
<
3
kSaveLayer_PaintUsage
=
1
<
<
4
kDrawPaint_PaintUsage
=
1
<
<
5
kVertices_PaintUsage
=
1
<
<
6
kRespectsStroke_PaintUsage
=
1
<
<
7
kUnknown_PaintUsage
=
0xFF
}
;
enum
BitsPerField
{
kFlags_BPF
=
16
kFilter_BPF
=
2
kStyle_BPF
=
2
kCaps_BPF
=
2
kJoins_BPF
=
2
kHint_BPF
=
2
kAlign_BPF
=
2
kEncoding_BPF
=
2
}
;
enum
{
kTextSize_NonDef
=
1
<
<
0
kTextScaleX_NonDef
=
1
<
<
1
kTextSkewX_NonDef
=
1
<
<
2
kStrokeWidth_NonDef
=
1
<
<
3
kStrokeMiter_NonDef
=
1
<
<
4
kColor_NonDef
=
1
<
<
5
kTypeface_NonDef
=
1
<
<
6
kPathEffect_NonDef
=
1
<
<
7
kShader_NonDef
=
1
<
<
8
kMaskFilter_NonDef
=
1
<
<
9
kColorFilter_NonDef
=
1
<
<
10
kRasterizer_NonDef
=
1
<
<
11
kImageFilter_NonDef
=
1
<
<
12
kDrawLooper_NonDef
=
1
<
<
13
}
;
enum
{
kFlags_SaveLayerMask
=
0xFF
kHasBounds_SaveLayerMask
=
1
<
<
8
kHasPaint_SaveLayerMask
=
1
<
<
9
kHasBackdrop_SaveLayerMask
=
1
<
<
10
kDontClipToLayer_SaveLayerMask
=
1
<
<
11
}
;
enum
{
kObjectDefinitionBits
=
20
kIndex_ObjectDefinitionMask
=
(
(
1
<
<
kObjectDefinitionBits
)
-
1
)
kUser_ObjectDefinitionMask
=
0x7
<
<
kObjectDefinitionBits
kUndef_ObjectDefinitionMask
=
1
<
<
23
}
;
enum
{
kTypeMask_ConcatMask
=
0xF
kSetMatrix_ConcatMask
=
1
<
<
4
}
;
enum
{
kMode_DrawAtlasMask
=
0xFF
kHasColors_DrawAtlasMask
=
1
<
<
8
kHasCull_DrawAtlasMask
=
1
<
<
9
kHasPaint_DrawAtlasMask
=
1
<
<
10
}
;
enum
{
kHasPaint_DrawImageMask
=
1
<
<
0
}
;
enum
{
kConstraint_DrawImageRectMask
=
1
<
<
0
kHasPaint_DrawImageRectMask
=
1
<
<
1
kHasSrcRect_DrawImageRectMask
=
1
<
<
2
}
;
enum
{
kHasPaint_DrawImageNineMask
=
1
<
<
0
}
;
enum
{
kHasMatrix_DrawPictureExtra
=
1
<
<
21
kHasPaint_DrawPictureExtra
=
1
<
<
22
}
;
enum
{
kIndex_DefineFactoryExtraBits
=
10
kNameLength_DefineFactoryExtraBits
=
14
kNameLength_DefineFactoryExtraMask
=
(
1
<
<
kNameLength_DefineFactoryExtraBits
)
-
1
}
;
enum
{
kModeEnum_DrawPatchExtraMask
=
0xFF
kExplicitXfer_DrawPatchExtraValue
=
0xFF
kHasColors_DrawPatchExtraMask
=
0x100
kHasTexture_DrawPatchExtraMask
=
0x200
}
;
enum
{
kVCount_DrawVerticesMask
=
(
1
<
<
11
)
-
1
kVMode_DrawVerticesShift
=
11
kVMode_DrawVerticesMask
=
3
<
<
kVMode_DrawVerticesShift
kXMode_DrawVerticesShift
=
13
kXMode_DrawVerticesMask
=
0xFF
<
<
kXMode_DrawVerticesShift
kHasTex_DrawVerticesMask
=
1
<
<
21
kHasColors_DrawVerticesMask
=
1
<
<
22
kHasIndices_DrawVerticesMask
=
1
<
<
23
}
;
enum
{
kTextLength_DrawTextOnPathMask
=
(
1
<
<
16
)
-
1
kMatrixType_DrawTextOnPathShift
=
16
kMatrixType_DrawTextOnPathMask
=
0xF
<
<
kMatrixType_DrawTextOnPathShift
}
;
enum
{
kHasPaint_DrawImageLatticeMask
=
1
<
<
0
kHasFlags_DrawImageLatticeMask
=
1
<
<
1
kXCount_DrawImageLatticeShift
=
2
kYCount_DrawImageLatticeShift
=
10
kCount_DrawImageLatticeMask
=
0xFF
}
;
static
inline
bool
fits_in
(
int
value
int
bits
)
{
return
value
>
=
0
&
&
value
<
(
1
<
<
bits
)
;
}
static
inline
void
ASSERT_FITS_IN
(
int
value
int
bits
)
{
SkASSERT
(
fits_in
(
value
bits
)
)
;
}
static
inline
uint32_t
pack_verb
(
SkPipeVerb
verb
unsigned
extra
=
0
)
{
ASSERT_FITS_IN
(
(
unsigned
)
verb
8
)
;
ASSERT_FITS_IN
(
extra
24
)
;
return
(
(
uint32_t
)
verb
<
<
24
)
|
extra
;
}
static
inline
SkPipeVerb
unpack_verb
(
uint32_t
data
)
{
return
(
SkPipeVerb
)
(
data
>
>
24
)
;
}
static
inline
unsigned
unpack_verb_extra
(
uint32_t
data
)
{
return
data
&
0xFFFFFF
;
}
#
endif
