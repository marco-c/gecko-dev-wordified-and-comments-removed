#
ifndef
SkJumper_misc_DEFINED
#
define
SkJumper_misc_DEFINED
#
include
<
string
.
h
>
#
if
defined
(
__clang__
)
#
define
SI
__attribute__
(
(
always_inline
)
)
static
inline
#
else
#
define
SI
static
inline
#
endif
template
<
typename
T
typename
P
>
SI
T
unaligned_load
(
const
P
*
p
)
{
T
v
;
memcpy
(
&
v
p
sizeof
(
v
)
)
;
return
v
;
}
template
<
typename
T
typename
P
>
SI
void
unaligned_store
(
P
*
p
T
v
)
{
memcpy
(
p
&
v
sizeof
(
v
)
)
;
}
template
<
typename
Dst
typename
Src
>
SI
Dst
bit_cast
(
const
Src
&
src
)
{
static_assert
(
sizeof
(
Dst
)
=
=
sizeof
(
Src
)
"
"
)
;
return
unaligned_load
<
Dst
>
(
&
src
)
;
}
template
<
typename
Dst
typename
Src
>
SI
Dst
widen_cast
(
const
Src
&
src
)
{
static_assert
(
sizeof
(
Dst
)
>
sizeof
(
Src
)
"
"
)
;
Dst
dst
;
memcpy
(
&
dst
&
src
sizeof
(
Src
)
)
;
return
dst
;
}
SI
void
*
load_and_inc
(
void
*
*
&
program
)
{
#
if
defined
(
__GNUC__
)
&
&
defined
(
__x86_64__
)
void
*
rax
;
asm
(
"
lodsq
"
:
"
=
a
"
(
rax
)
"
+
S
"
(
program
)
)
;
return
rax
;
#
else
return
*
program
+
+
;
#
endif
}
struct
Ctx
{
struct
None
{
}
;
void
*
ptr
;
void
*
*
&
program
;
explicit
Ctx
(
void
*
*
&
p
)
:
ptr
(
nullptr
)
program
(
p
)
{
}
template
<
typename
T
>
operator
T
*
(
)
{
if
(
!
ptr
)
{
ptr
=
load_and_inc
(
program
)
;
}
return
(
T
*
)
ptr
;
}
operator
None
(
)
{
return
None
{
}
;
}
}
;
#
endif
