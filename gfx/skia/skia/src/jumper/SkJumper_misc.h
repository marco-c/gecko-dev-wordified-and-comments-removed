#
ifndef
SkJumper_misc_DEFINED
#
define
SkJumper_misc_DEFINED
#
include
"
SkJumper
.
h
"
#
define
SI
static
inline
template
<
typename
T
typename
P
>
SI
T
unaligned_load
(
const
P
*
p
)
{
T
v
;
memcpy
(
&
v
p
sizeof
(
v
)
)
;
return
v
;
}
template
<
typename
Dst
typename
Src
>
SI
Dst
bit_cast
(
const
Src
&
src
)
{
static_assert
(
sizeof
(
Dst
)
=
=
sizeof
(
Src
)
"
"
)
;
return
unaligned_load
<
Dst
>
(
&
src
)
;
}
template
<
typename
Dst
typename
Src
>
SI
Dst
widen_cast
(
const
Src
&
src
)
{
static_assert
(
sizeof
(
Dst
)
>
sizeof
(
Src
)
"
"
)
;
Dst
dst
;
memcpy
(
&
dst
&
src
sizeof
(
Src
)
)
;
return
dst
;
}
SI
int
C
(
int
x
)
{
#
if
defined
(
JUMPER
)
&
&
defined
(
__x86_64__
)
asm
(
"
mov
%
1
%
0
"
:
"
=
r
"
(
x
)
:
"
i
"
(
x
)
)
;
#
endif
return
x
;
}
SI
float
C
(
float
f
)
{
int
x
=
C
(
unaligned_load
<
int
>
(
&
f
)
)
;
return
unaligned_load
<
float
>
(
&
x
)
;
}
SI
int
operator
"
"
_i
(
unsigned
long
long
int
i
)
{
return
C
(
(
int
)
i
)
;
}
SI
float
operator
"
"
_f
(
long
double
f
)
{
return
C
(
(
float
)
f
)
;
}
#
endif
