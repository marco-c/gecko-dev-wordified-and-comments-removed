#
ifndef
GrLayerAtlas_DEFINED
#
define
GrLayerAtlas_DEFINED
#
include
"
GrTexture
.
h
"
#
include
"
SkPoint
.
h
"
#
include
"
SkTDArray
.
h
"
#
include
"
SkTInternalLList
.
h
"
class
GrLayerAtlas
;
class
GrTextureProvider
;
class
GrRectanizer
;
class
GrLayerAtlas
{
public
:
class
Plot
{
SK_DECLARE_INTERNAL_LLIST_INTERFACE
(
Plot
)
;
public
:
int
id
(
)
const
{
return
fID
;
}
void
reset
(
)
;
private
:
friend
class
GrLayerAtlas
;
Plot
(
)
;
~
Plot
(
)
;
void
init
(
int
id
int
offX
int
offY
int
width
int
height
)
;
bool
allocateRect
(
int
width
int
height
SkIPoint16
*
)
;
int
fID
;
GrRectanizer
*
fRects
;
SkIPoint16
fOffset
;
}
;
class
ClientPlotUsage
{
public
:
ClientPlotUsage
(
int
maxPlots
)
SkDEBUGCODE
(
:
fMaxPlots
(
maxPlots
)
)
{
fPlots
.
setReserve
(
maxPlots
)
;
}
bool
isEmpty
(
)
const
{
return
0
=
=
fPlots
.
count
(
)
;
}
int
numPlots
(
)
const
{
return
fPlots
.
count
(
)
;
}
Plot
*
plot
(
int
index
)
{
return
fPlots
[
index
]
;
}
void
appendPlot
(
Plot
*
plot
)
{
SkASSERT
(
fPlots
.
count
(
)
<
=
fMaxPlots
)
;
SkASSERT
(
!
fPlots
.
contains
(
plot
)
)
;
*
fPlots
.
append
(
)
=
plot
;
}
void
removePlot
(
const
Plot
*
plot
)
{
int
index
=
fPlots
.
find
(
const_cast
<
Plot
*
>
(
plot
)
)
;
if
(
index
>
=
0
)
{
fPlots
.
remove
(
index
)
;
}
}
#
ifdef
SK_DEBUG
bool
contains
(
const
Plot
*
plot
)
const
{
return
fPlots
.
contains
(
const_cast
<
Plot
*
>
(
plot
)
)
;
}
#
endif
private
:
SkTDArray
<
Plot
*
>
fPlots
;
SkDEBUGCODE
(
int
fMaxPlots
;
)
}
;
GrLayerAtlas
(
GrTextureProvider
*
GrPixelConfig
GrSurfaceFlags
flags
const
SkISize
&
backingTextureSize
int
numPlotsX
int
numPlotsY
)
;
~
GrLayerAtlas
(
)
;
Plot
*
addToAtlas
(
ClientPlotUsage
*
int
width
int
height
SkIPoint16
*
loc
)
;
GrTexture
*
getTextureOrNull
(
)
const
{
return
fTexture
;
}
GrTexture
*
getTexture
(
)
const
{
SkASSERT
(
fTexture
)
;
return
fTexture
;
}
bool
reattachBackingTexture
(
)
;
void
detachBackingTexture
(
)
{
fTexture
.
reset
(
nullptr
)
;
}
void
resetPlots
(
)
;
enum
IterOrder
{
kLRUFirst_IterOrder
kMRUFirst_IterOrder
}
;
typedef
SkTInternalLList
<
Plot
>
PlotList
;
typedef
PlotList
:
:
Iter
PlotIter
;
Plot
*
iterInit
(
PlotIter
*
iter
IterOrder
order
)
{
return
iter
-
>
init
(
fPlotList
kLRUFirst_IterOrder
=
=
order
?
PlotList
:
:
Iter
:
:
kTail_IterStart
:
PlotList
:
:
Iter
:
:
kHead_IterStart
)
;
}
private
:
void
createBackingTexture
(
)
;
void
makeMRU
(
Plot
*
plot
)
;
GrTextureProvider
*
fTexProvider
;
GrPixelConfig
fPixelConfig
;
GrSurfaceFlags
fFlags
;
SkAutoTUnref
<
GrTexture
>
fTexture
;
SkISize
fBackingTextureSize
;
Plot
*
fPlotArray
;
PlotList
fPlotList
;
}
;
#
endif
