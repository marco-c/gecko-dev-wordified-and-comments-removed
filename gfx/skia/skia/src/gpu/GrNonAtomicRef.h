#
ifndef
GrNonAtomicRef_DEFINED
#
define
GrNonAtomicRef_DEFINED
#
include
"
SkRefCnt
.
h
"
#
include
"
SkTArray
.
h
"
template
<
typename
TSubclass
>
class
GrNonAtomicRef
:
public
SkNoncopyable
{
public
:
GrNonAtomicRef
(
)
:
fRefCnt
(
1
)
{
}
#
ifdef
SK_DEBUG
~
GrNonAtomicRef
(
)
{
SkASSERT
(
(
0
=
=
fRefCnt
|
|
1
=
=
fRefCnt
)
)
;
fRefCnt
=
-
10
;
}
#
endif
bool
unique
(
)
const
{
return
1
=
=
fRefCnt
;
}
void
ref
(
)
const
{
SkASSERT
(
fRefCnt
>
0
)
;
+
+
fRefCnt
;
}
void
unref
(
)
const
{
SkASSERT
(
fRefCnt
>
0
)
;
-
-
fRefCnt
;
if
(
0
=
=
fRefCnt
)
{
GrTDeleteNonAtomicRef
(
static_cast
<
const
TSubclass
*
>
(
this
)
)
;
return
;
}
}
private
:
mutable
int32_t
fRefCnt
;
typedef
SkNoncopyable
INHERITED
;
}
;
template
<
typename
T
>
inline
void
GrTDeleteNonAtomicRef
(
const
T
*
ref
)
{
delete
ref
;
}
#
endif
