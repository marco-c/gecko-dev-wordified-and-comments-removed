#
ifndef
GrRenderTargetPriv_DEFINED
#
define
GrRenderTargetPriv_DEFINED
#
include
"
GrRenderTarget
.
h
"
#
include
"
GrGpu
.
h
"
class
GrStencilSettings
;
class
GrRenderTargetPriv
{
public
:
GrStencilAttachment
*
getStencilAttachment
(
)
const
{
return
fRenderTarget
-
>
fStencilAttachment
;
}
bool
attachStencilAttachment
(
GrStencilAttachment
*
stencil
)
;
int
numStencilBits
(
)
const
;
const
GrGpu
:
:
MultisampleSpecs
&
getMultisampleSpecs
(
const
GrStencilSettings
&
stencil
)
const
;
uint8_t
&
accessMultisampleSpecsID
(
)
{
return
fRenderTarget
-
>
fMultisampleSpecsID
;
}
typedef
GrRenderTarget
:
:
Flags
Flags
;
Flags
flags
(
)
const
{
return
fRenderTarget
-
>
fFlags
;
}
int
maxWindowRectangles
(
)
const
;
private
:
explicit
GrRenderTargetPriv
(
GrRenderTarget
*
renderTarget
)
:
fRenderTarget
(
renderTarget
)
{
}
GrRenderTargetPriv
(
const
GrRenderTargetPriv
&
)
{
}
GrRenderTargetPriv
&
operator
=
(
const
GrRenderTargetPriv
&
)
;
const
GrRenderTargetPriv
*
operator
&
(
)
const
;
GrRenderTargetPriv
*
operator
&
(
)
;
GrRenderTarget
*
fRenderTarget
;
friend
class
GrRenderTarget
;
}
;
inline
GrRenderTargetPriv
GrRenderTarget
:
:
renderTargetPriv
(
)
{
return
GrRenderTargetPriv
(
this
)
;
}
inline
const
GrRenderTargetPriv
GrRenderTarget
:
:
renderTargetPriv
(
)
const
{
return
GrRenderTargetPriv
(
const_cast
<
GrRenderTarget
*
>
(
this
)
)
;
}
#
endif
