#
ifndef
GrRenderTargetPriv_DEFINED
#
define
GrRenderTargetPriv_DEFINED
#
include
"
src
/
gpu
/
GrGpu
.
h
"
#
include
"
src
/
gpu
/
GrRenderTarget
.
h
"
class
GrStencilSettings
;
class
GrRenderTargetPriv
{
public
:
GrStencilAttachment
*
getStencilAttachment
(
)
const
{
return
fRenderTarget
-
>
fStencilAttachment
.
get
(
)
;
}
void
attachStencilAttachment
(
sk_sp
<
GrStencilAttachment
>
stencil
)
;
int
numStencilBits
(
)
const
;
int
getSamplePatternKey
(
)
const
;
const
SkTArray
<
SkPoint
>
&
getSampleLocations
(
)
const
{
int
samplePatternKey
=
this
-
>
getSamplePatternKey
(
)
;
return
fRenderTarget
-
>
getGpu
(
)
-
>
retrieveSampleLocations
(
samplePatternKey
)
;
}
private
:
explicit
GrRenderTargetPriv
(
GrRenderTarget
*
renderTarget
)
:
fRenderTarget
(
renderTarget
)
{
}
GrRenderTargetPriv
(
const
GrRenderTargetPriv
&
)
{
}
GrRenderTargetPriv
&
operator
=
(
const
GrRenderTargetPriv
&
)
;
const
GrRenderTargetPriv
*
operator
&
(
)
const
;
GrRenderTargetPriv
*
operator
&
(
)
;
GrRenderTarget
*
fRenderTarget
;
friend
class
GrRenderTarget
;
}
;
inline
GrRenderTargetPriv
GrRenderTarget
:
:
renderTargetPriv
(
)
{
return
GrRenderTargetPriv
(
this
)
;
}
inline
const
GrRenderTargetPriv
GrRenderTarget
:
:
renderTargetPriv
(
)
const
{
return
GrRenderTargetPriv
(
const_cast
<
GrRenderTarget
*
>
(
this
)
)
;
}
#
endif
