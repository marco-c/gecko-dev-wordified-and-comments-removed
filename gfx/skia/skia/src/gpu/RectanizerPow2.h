#
ifndef
skgpu_RectanizerPow2_DEFINED
#
define
skgpu_RectanizerPow2_DEFINED
#
include
"
include
/
private
/
base
/
SkMalloc
.
h
"
#
include
"
src
/
base
/
SkMathPriv
.
h
"
#
include
"
src
/
core
/
SkIPoint16
.
h
"
#
include
"
src
/
gpu
/
Rectanizer
.
h
"
namespace
skgpu
{
class
RectanizerPow2
final
:
public
Rectanizer
{
public
:
RectanizerPow2
(
int
w
int
h
)
:
Rectanizer
(
w
h
)
{
this
-
>
reset
(
)
;
}
~
RectanizerPow2
(
)
final
{
}
void
reset
(
)
final
{
fNextStripY
=
0
;
fAreaSoFar
=
0
;
sk_bzero
(
fRows
sizeof
(
fRows
)
)
;
}
bool
addRect
(
int
w
int
h
SkIPoint16
*
loc
)
final
;
float
percentFull
(
)
const
final
{
return
fAreaSoFar
/
(
(
float
)
this
-
>
width
(
)
*
this
-
>
height
(
)
)
;
}
private
:
static
const
int
kMIN_HEIGHT_POW2
=
2
;
static
const
int
kMaxExponent
=
16
;
struct
Row
{
SkIPoint16
fLoc
;
int
fRowHeight
;
bool
canAddWidth
(
int
width
int
containerWidth
)
const
{
return
fLoc
.
fX
+
width
<
=
containerWidth
;
}
}
;
Row
fRows
[
kMaxExponent
]
;
int
fNextStripY
;
int32_t
fAreaSoFar
;
static
int
HeightToRowIndex
(
int
height
)
{
SkASSERT
(
height
>
=
kMIN_HEIGHT_POW2
)
;
int
index
=
32
-
SkCLZ
(
height
-
1
)
;
SkASSERT
(
index
<
kMaxExponent
)
;
return
index
;
}
bool
canAddStrip
(
int
height
)
const
{
return
fNextStripY
+
height
<
=
this
-
>
height
(
)
;
}
void
initRow
(
Row
*
row
int
rowHeight
)
{
row
-
>
fLoc
.
set
(
0
fNextStripY
)
;
row
-
>
fRowHeight
=
rowHeight
;
fNextStripY
+
=
rowHeight
;
}
}
;
}
#
endif
