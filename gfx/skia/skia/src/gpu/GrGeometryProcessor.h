#
ifndef
GrGeometryProcessor_DEFINED
#
define
GrGeometryProcessor_DEFINED
#
include
"
GrPrimitiveProcessor
.
h
"
class
GrGeometryProcessor
:
public
GrPrimitiveProcessor
{
public
:
GrGeometryProcessor
(
ClassID
classID
)
:
INHERITED
(
classID
)
fWillUseGeoShader
(
false
)
fSampleShading
(
0
.
0
)
{
}
bool
willUseGeoShader
(
)
const
final
{
return
fWillUseGeoShader
;
}
float
getSampleShading
(
)
const
final
{
return
fSampleShading
;
}
protected
:
void
setWillUseGeoShader
(
)
{
fWillUseGeoShader
=
true
;
}
void
setSampleShading
(
float
sampleShading
)
{
fSampleShading
=
sampleShading
;
}
template
<
typename
.
.
.
Args
>
static
const
Attribute
&
IthAttribute
(
int
i
const
Attribute
&
attr0
const
Args
&
.
.
.
attrs
)
{
SkASSERT
(
attr0
.
isInitialized
(
)
)
;
return
(
0
=
=
i
)
?
attr0
:
IthAttribute
(
i
-
1
attrs
.
.
.
)
;
}
static
const
Attribute
&
IthAttribute
(
int
i
)
{
SK_ABORT
(
"
Illegal
attribute
Index
"
)
;
static
constexpr
Attribute
kBogus
;
return
kBogus
;
}
template
<
typename
.
.
.
Args
>
static
const
Attribute
&
IthInitializedAttribute
(
int
i
const
Attribute
&
attr0
const
Args
&
.
.
.
attrs
)
{
if
(
attr0
.
isInitialized
(
)
)
{
if
(
0
=
=
i
)
{
return
attr0
;
}
i
-
=
1
;
}
return
IthInitializedAttribute
(
i
attrs
.
.
.
)
;
}
static
const
Attribute
&
IthInitializedAttribute
(
int
i
)
{
return
IthAttribute
(
i
)
;
}
private
:
bool
fWillUseGeoShader
;
float
fSampleShading
;
typedef
GrPrimitiveProcessor
INHERITED
;
}
;
#
endif
