#
include
"
GrContext
.
h
"
#
include
"
GrDrawContext
.
h
"
#
include
"
GrYUVProvider
.
h
"
#
include
"
effects
/
GrYUVEffect
.
h
"
#
include
"
SkCachedData
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkResourceCache
.
h
"
#
include
"
SkYUVPlanesCache
.
h
"
namespace
{
class
YUVScoper
{
public
:
bool
init
(
GrYUVProvider
*
SkYUVPlanesCache
:
:
Info
*
void
*
planes
[
3
]
bool
useCache
)
;
private
:
SkAutoTUnref
<
SkCachedData
>
fCachedData
;
SkAutoMalloc
fStorage
;
}
;
}
bool
YUVScoper
:
:
init
(
GrYUVProvider
*
provider
SkYUVPlanesCache
:
:
Info
*
yuvInfo
void
*
planes
[
3
]
bool
useCache
)
{
if
(
useCache
)
{
fCachedData
.
reset
(
SkYUVPlanesCache
:
:
FindAndRef
(
provider
-
>
onGetID
(
)
yuvInfo
)
)
;
}
if
(
fCachedData
.
get
(
)
)
{
planes
[
0
]
=
(
void
*
)
fCachedData
-
>
data
(
)
;
planes
[
1
]
=
(
uint8_t
*
)
planes
[
0
]
+
(
yuvInfo
-
>
fSizeInfo
.
fWidthBytes
[
SkYUVSizeInfo
:
:
kY
]
*
yuvInfo
-
>
fSizeInfo
.
fSizes
[
SkYUVSizeInfo
:
:
kY
]
.
fHeight
)
;
planes
[
2
]
=
(
uint8_t
*
)
planes
[
1
]
+
(
yuvInfo
-
>
fSizeInfo
.
fWidthBytes
[
SkYUVSizeInfo
:
:
kU
]
*
yuvInfo
-
>
fSizeInfo
.
fSizes
[
SkYUVSizeInfo
:
:
kU
]
.
fHeight
)
;
}
else
{
if
(
!
provider
-
>
onQueryYUV8
(
&
yuvInfo
-
>
fSizeInfo
&
yuvInfo
-
>
fColorSpace
)
)
{
return
false
;
}
size_t
totalSize
(
0
)
;
for
(
int
i
=
0
;
i
<
3
;
i
+
+
)
{
totalSize
+
=
yuvInfo
-
>
fSizeInfo
.
fWidthBytes
[
i
]
*
yuvInfo
-
>
fSizeInfo
.
fSizes
[
i
]
.
fHeight
;
}
if
(
useCache
)
{
fCachedData
.
reset
(
SkResourceCache
:
:
NewCachedData
(
totalSize
)
)
;
planes
[
0
]
=
fCachedData
-
>
writable_data
(
)
;
}
else
{
fStorage
.
reset
(
totalSize
)
;
planes
[
0
]
=
fStorage
.
get
(
)
;
}
planes
[
1
]
=
(
uint8_t
*
)
planes
[
0
]
+
(
yuvInfo
-
>
fSizeInfo
.
fWidthBytes
[
SkYUVSizeInfo
:
:
kY
]
*
yuvInfo
-
>
fSizeInfo
.
fSizes
[
SkYUVSizeInfo
:
:
kY
]
.
fHeight
)
;
planes
[
2
]
=
(
uint8_t
*
)
planes
[
1
]
+
(
yuvInfo
-
>
fSizeInfo
.
fWidthBytes
[
SkYUVSizeInfo
:
:
kU
]
*
yuvInfo
-
>
fSizeInfo
.
fSizes
[
SkYUVSizeInfo
:
:
kU
]
.
fHeight
)
;
if
(
!
provider
-
>
onGetYUV8Planes
(
yuvInfo
-
>
fSizeInfo
planes
)
)
{
return
false
;
}
if
(
useCache
)
{
SkYUVPlanesCache
:
:
Add
(
provider
-
>
onGetID
(
)
fCachedData
yuvInfo
)
;
}
}
return
true
;
}
GrTexture
*
GrYUVProvider
:
:
refAsTexture
(
GrContext
*
ctx
const
GrSurfaceDesc
&
desc
bool
useCache
)
{
SkYUVPlanesCache
:
:
Info
yuvInfo
;
void
*
planes
[
3
]
;
YUVScoper
scoper
;
if
(
!
scoper
.
init
(
this
&
yuvInfo
planes
useCache
)
)
{
return
nullptr
;
}
GrSurfaceDesc
yuvDesc
;
yuvDesc
.
fConfig
=
kAlpha_8_GrPixelConfig
;
SkAutoTUnref
<
GrTexture
>
yuvTextures
[
3
]
;
for
(
int
i
=
0
;
i
<
3
;
i
+
+
)
{
yuvDesc
.
fWidth
=
yuvInfo
.
fSizeInfo
.
fSizes
[
i
]
.
fWidth
;
yuvDesc
.
fHeight
=
yuvInfo
.
fSizeInfo
.
fSizes
[
i
]
.
fHeight
;
bool
needsExactTexture
=
(
yuvDesc
.
fWidth
!
=
yuvInfo
.
fSizeInfo
.
fSizes
[
SkYUVSizeInfo
:
:
kY
]
.
fWidth
)
|
|
(
yuvDesc
.
fHeight
!
=
yuvInfo
.
fSizeInfo
.
fSizes
[
SkYUVSizeInfo
:
:
kY
]
.
fHeight
)
;
if
(
needsExactTexture
)
{
yuvTextures
[
i
]
.
reset
(
ctx
-
>
textureProvider
(
)
-
>
createTexture
(
yuvDesc
SkBudgeted
:
:
kYes
)
)
;
}
else
{
yuvTextures
[
i
]
.
reset
(
ctx
-
>
textureProvider
(
)
-
>
createApproxTexture
(
yuvDesc
)
)
;
}
if
(
!
yuvTextures
[
i
]
|
|
!
yuvTextures
[
i
]
-
>
writePixels
(
0
0
yuvDesc
.
fWidth
yuvDesc
.
fHeight
yuvDesc
.
fConfig
planes
[
i
]
yuvInfo
.
fSizeInfo
.
fWidthBytes
[
i
]
)
)
{
return
nullptr
;
}
}
GrSurfaceDesc
rtDesc
=
desc
;
rtDesc
.
fFlags
=
rtDesc
.
fFlags
|
kRenderTarget_GrSurfaceFlag
;
SkAutoTUnref
<
GrTexture
>
result
(
ctx
-
>
textureProvider
(
)
-
>
createTexture
(
rtDesc
SkBudgeted
:
:
kYes
nullptr
0
)
)
;
if
(
!
result
)
{
return
nullptr
;
}
GrRenderTarget
*
renderTarget
=
result
-
>
asRenderTarget
(
)
;
SkASSERT
(
renderTarget
)
;
GrPaint
paint
;
paint
.
setDisableOutputConversionToSRGB
(
true
)
;
SkAutoTUnref
<
const
GrFragmentProcessor
>
yuvToRgbProcessor
(
GrYUVEffect
:
:
CreateYUVToRGB
(
yuvTextures
[
0
]
yuvTextures
[
1
]
yuvTextures
[
2
]
yuvInfo
.
fSizeInfo
.
fSizes
yuvInfo
.
fColorSpace
)
)
;
paint
.
addColorFragmentProcessor
(
yuvToRgbProcessor
)
;
paint
.
setPorterDuffXPFactory
(
SkXfermode
:
:
kSrc_Mode
)
;
const
SkRect
r
=
SkRect
:
:
MakeIWH
(
yuvInfo
.
fSizeInfo
.
fSizes
[
SkYUVSizeInfo
:
:
kY
]
.
fWidth
yuvInfo
.
fSizeInfo
.
fSizes
[
SkYUVSizeInfo
:
:
kY
]
.
fHeight
)
;
SkAutoTUnref
<
GrDrawContext
>
drawContext
(
ctx
-
>
drawContext
(
renderTarget
)
)
;
if
(
!
drawContext
)
{
return
nullptr
;
}
drawContext
-
>
drawRect
(
GrClip
:
:
WideOpen
(
)
paint
SkMatrix
:
:
I
(
)
r
)
;
return
result
.
release
(
)
;
}
