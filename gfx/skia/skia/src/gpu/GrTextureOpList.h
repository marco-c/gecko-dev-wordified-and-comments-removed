#
ifndef
GrTexureOpList_DEFINED
#
define
GrTexureOpList_DEFINED
#
include
"
GrGpuResource
.
h
"
#
include
"
GrOpList
.
h
"
#
include
"
GrSurfaceProxy
.
h
"
#
include
"
SkTArray
.
h
"
class
GrAuditTrail
;
class
GrGpu
;
class
GrOp
;
class
GrTextureProxy
;
struct
SkIPoint
;
struct
SkIRect
;
class
GrTextureOpList
final
:
public
GrOpList
{
public
:
GrTextureOpList
(
GrTextureProxy
*
GrGpu
*
GrAuditTrail
*
)
;
~
GrTextureOpList
(
)
override
;
void
reset
(
)
override
;
void
abandonGpuResources
(
)
override
{
}
void
freeGpuResources
(
)
override
{
}
void
prepareOps
(
GrOpFlushState
*
flushState
)
override
;
bool
executeOps
(
GrOpFlushState
*
flushState
)
override
;
bool
copySurface
(
GrResourceProvider
*
resourceProvider
GrSurfaceProxy
*
dst
GrSurfaceProxy
*
src
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
;
GrTextureOpList
*
asTextureOpList
(
)
override
{
return
this
;
}
SkDEBUGCODE
(
void
dump
(
)
const
override
;
)
private
:
void
recordOp
(
std
:
:
unique_ptr
<
GrOp
>
GrGpuResource
:
:
UniqueID
resourceUniqueID
GrSurfaceProxy
:
:
UniqueID
proxyUniqueID
)
;
SkSTArray
<
2
std
:
:
unique_ptr
<
GrOp
>
true
>
fRecordedOps
;
GrGpu
*
fGpu
;
typedef
GrOpList
INHERITED
;
}
;
#
endif
