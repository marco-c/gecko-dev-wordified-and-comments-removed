#
ifndef
GrDeferredUpload_DEFINED
#
define
GrDeferredUpload_DEFINED
#
include
<
functional
>
#
include
"
GrTypes
.
h
"
#
include
"
GrTypesPriv
.
h
"
class
GrTextureProxy
;
class
GrDeferredUploadToken
{
public
:
static
GrDeferredUploadToken
AlreadyFlushedToken
(
)
{
return
GrDeferredUploadToken
(
0
)
;
}
GrDeferredUploadToken
(
const
GrDeferredUploadToken
&
)
=
default
;
GrDeferredUploadToken
&
operator
=
(
const
GrDeferredUploadToken
&
)
=
default
;
bool
operator
=
=
(
const
GrDeferredUploadToken
&
that
)
const
{
return
fSequenceNumber
=
=
that
.
fSequenceNumber
;
}
bool
operator
!
=
(
const
GrDeferredUploadToken
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
bool
operator
<
(
const
GrDeferredUploadToken
that
)
const
{
return
fSequenceNumber
<
that
.
fSequenceNumber
;
}
bool
operator
<
=
(
const
GrDeferredUploadToken
that
)
const
{
return
fSequenceNumber
<
=
that
.
fSequenceNumber
;
}
bool
operator
>
(
const
GrDeferredUploadToken
that
)
const
{
return
fSequenceNumber
>
that
.
fSequenceNumber
;
}
bool
operator
>
=
(
const
GrDeferredUploadToken
that
)
const
{
return
fSequenceNumber
>
=
that
.
fSequenceNumber
;
}
GrDeferredUploadToken
&
operator
+
+
(
)
{
+
+
fSequenceNumber
;
return
*
this
;
}
GrDeferredUploadToken
operator
+
+
(
int
)
{
auto
old
=
fSequenceNumber
;
+
+
fSequenceNumber
;
return
GrDeferredUploadToken
(
old
)
;
}
GrDeferredUploadToken
next
(
)
const
{
return
GrDeferredUploadToken
(
fSequenceNumber
+
1
)
;
}
bool
inInterval
(
const
GrDeferredUploadToken
&
start
const
GrDeferredUploadToken
&
end
)
{
return
*
this
>
=
start
&
&
*
this
<
=
end
;
}
private
:
GrDeferredUploadToken
(
)
=
delete
;
explicit
GrDeferredUploadToken
(
uint64_t
sequenceNumber
)
:
fSequenceNumber
(
sequenceNumber
)
{
}
uint64_t
fSequenceNumber
;
}
;
class
GrTokenTracker
{
public
:
GrDeferredUploadToken
nextTokenToFlush
(
)
const
{
return
fLastFlushedToken
.
next
(
)
;
}
GrDeferredUploadToken
nextDrawToken
(
)
const
{
return
fLastIssuedToken
.
next
(
)
;
}
private
:
friend
class
SkInternalAtlasTextContext
;
friend
class
GrOpFlushState
;
friend
class
TestingUploadTarget
;
GrDeferredUploadToken
issueDrawToken
(
)
{
return
+
+
fLastIssuedToken
;
}
GrDeferredUploadToken
flushToken
(
)
{
return
+
+
fLastFlushedToken
;
}
GrDeferredUploadToken
fLastIssuedToken
=
GrDeferredUploadToken
:
:
AlreadyFlushedToken
(
)
;
GrDeferredUploadToken
fLastFlushedToken
=
GrDeferredUploadToken
:
:
AlreadyFlushedToken
(
)
;
}
;
using
GrDeferredTextureUploadWritePixelsFn
=
std
:
:
function
<
bool
(
GrTextureProxy
*
int
left
int
top
int
width
int
height
GrColorType
colorType
const
void
*
buffer
size_t
rowBytes
)
>
;
using
GrDeferredTextureUploadFn
=
std
:
:
function
<
void
(
GrDeferredTextureUploadWritePixelsFn
&
)
>
;
class
GrDeferredUploadTarget
{
public
:
virtual
~
GrDeferredUploadTarget
(
)
{
}
virtual
const
GrTokenTracker
*
tokenTracker
(
)
=
0
;
virtual
GrDeferredUploadToken
addInlineUpload
(
GrDeferredTextureUploadFn
&
&
)
=
0
;
virtual
GrDeferredUploadToken
addASAPUpload
(
GrDeferredTextureUploadFn
&
&
upload
)
=
0
;
}
;
#
endif
