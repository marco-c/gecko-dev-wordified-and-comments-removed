#
ifndef
GrPathRenderer_DEFINED
#
define
GrPathRenderer_DEFINED
#
include
"
GrDrawTarget
.
h
"
#
include
"
GrStencil
.
h
"
#
include
"
GrStrokeInfo
.
h
"
#
include
"
SkDrawProcs
.
h
"
#
include
"
SkTArray
.
h
"
class
SkPath
;
struct
GrPoint
;
class
SK_API
GrPathRenderer
:
public
SkRefCnt
{
public
:
GrPathRenderer
(
)
;
enum
StencilSupport
{
kNoSupport_StencilSupport
kStencilOnly_StencilSupport
kNoRestriction_StencilSupport
}
;
StencilSupport
getStencilSupport
(
const
SkPath
&
path
const
GrStrokeInfo
&
stroke
)
const
{
SkASSERT
(
!
path
.
isInverseFillType
(
)
)
;
return
this
-
>
onGetStencilSupport
(
path
stroke
)
;
}
struct
CanDrawPathArgs
{
const
GrShaderCaps
*
fShaderCaps
;
const
SkMatrix
*
fViewMatrix
;
const
SkPath
*
fPath
;
const
GrStrokeInfo
*
fStroke
;
bool
fAntiAlias
;
bool
fIsStencilDisabled
;
bool
fIsStencilBufferMSAA
;
void
validate
(
)
const
{
SkASSERT
(
fShaderCaps
)
;
SkASSERT
(
fViewMatrix
)
;
SkASSERT
(
fPath
)
;
SkASSERT
(
fStroke
)
;
SkASSERT
(
!
fPath
-
>
isEmpty
(
)
)
;
}
}
;
bool
canDrawPath
(
const
CanDrawPathArgs
&
args
)
const
{
SkDEBUGCODE
(
args
.
validate
(
)
;
)
return
this
-
>
onCanDrawPath
(
args
)
;
}
struct
DrawPathArgs
{
GrDrawTarget
*
fTarget
;
GrResourceProvider
*
fResourceProvider
;
GrPipelineBuilder
*
fPipelineBuilder
;
GrColor
fColor
;
const
SkMatrix
*
fViewMatrix
;
const
SkPath
*
fPath
;
const
GrStrokeInfo
*
fStroke
;
bool
fAntiAlias
;
void
validate
(
)
const
{
SkASSERT
(
fTarget
)
;
SkASSERT
(
fResourceProvider
)
;
SkASSERT
(
fPipelineBuilder
)
;
SkASSERT
(
fViewMatrix
)
;
SkASSERT
(
fPath
)
;
SkASSERT
(
fStroke
)
;
SkASSERT
(
!
fPath
-
>
isEmpty
(
)
)
;
}
}
;
bool
drawPath
(
const
DrawPathArgs
&
args
)
{
SkDEBUGCODE
(
args
.
validate
(
)
;
)
#
ifdef
SK_DEBUG
CanDrawPathArgs
canArgs
;
canArgs
.
fShaderCaps
=
args
.
fTarget
-
>
caps
(
)
-
>
shaderCaps
(
)
;
canArgs
.
fViewMatrix
=
args
.
fViewMatrix
;
canArgs
.
fPath
=
args
.
fPath
;
canArgs
.
fStroke
=
args
.
fStroke
;
canArgs
.
fAntiAlias
=
args
.
fAntiAlias
;
canArgs
.
fIsStencilDisabled
=
args
.
fPipelineBuilder
-
>
getStencil
(
)
.
isDisabled
(
)
;
canArgs
.
fIsStencilBufferMSAA
=
args
.
fPipelineBuilder
-
>
getRenderTarget
(
)
-
>
isStencilBufferMultisampled
(
)
;
SkASSERT
(
this
-
>
canDrawPath
(
canArgs
)
)
;
SkASSERT
(
args
.
fPipelineBuilder
-
>
getStencil
(
)
.
isDisabled
(
)
|
|
kNoRestriction_StencilSupport
=
=
this
-
>
getStencilSupport
(
*
args
.
fPath
*
args
.
fStroke
)
)
;
#
endif
return
this
-
>
onDrawPath
(
args
)
;
}
struct
StencilPathArgs
{
GrDrawTarget
*
fTarget
;
GrResourceProvider
*
fResourceProvider
;
GrPipelineBuilder
*
fPipelineBuilder
;
const
SkMatrix
*
fViewMatrix
;
const
SkPath
*
fPath
;
const
GrStrokeInfo
*
fStroke
;
void
validate
(
)
const
{
SkASSERT
(
fTarget
)
;
SkASSERT
(
fResourceProvider
)
;
SkASSERT
(
fPipelineBuilder
)
;
SkASSERT
(
fViewMatrix
)
;
SkASSERT
(
fPath
)
;
SkASSERT
(
fStroke
)
;
SkASSERT
(
!
fPath
-
>
isEmpty
(
)
)
;
}
}
;
void
stencilPath
(
const
StencilPathArgs
&
args
)
{
SkDEBUGCODE
(
args
.
validate
(
)
;
)
SkASSERT
(
kNoSupport_StencilSupport
!
=
this
-
>
getStencilSupport
(
*
args
.
fPath
*
args
.
fStroke
)
)
;
this
-
>
onStencilPath
(
args
)
;
}
static
bool
IsStrokeHairlineOrEquivalent
(
const
GrStrokeInfo
&
stroke
const
SkMatrix
&
matrix
SkScalar
*
outCoverage
)
{
if
(
stroke
.
isDashed
(
)
)
{
return
false
;
}
if
(
stroke
.
isHairlineStyle
(
)
)
{
if
(
outCoverage
)
{
*
outCoverage
=
SK_Scalar1
;
}
return
true
;
}
return
stroke
.
getStyle
(
)
=
=
SkStrokeRec
:
:
kStroke_Style
&
&
SkDrawTreatAAStrokeAsHairline
(
stroke
.
getWidth
(
)
matrix
outCoverage
)
;
}
protected
:
static
void
GetPathDevBounds
(
const
SkPath
&
path
int
devW
int
devH
const
SkMatrix
&
matrix
SkRect
*
bounds
)
;
static
void
GetPathDevBounds
(
const
SkPath
&
path
const
GrSurface
*
device
const
SkMatrix
&
matrix
SkRect
*
bounds
)
{
GetPathDevBounds
(
path
device
-
>
width
(
)
device
-
>
height
(
)
matrix
bounds
)
;
}
private
:
virtual
StencilSupport
onGetStencilSupport
(
const
SkPath
&
const
GrStrokeInfo
&
)
const
{
return
kNoRestriction_StencilSupport
;
}
virtual
bool
onDrawPath
(
const
DrawPathArgs
&
args
)
=
0
;
virtual
bool
onCanDrawPath
(
const
CanDrawPathArgs
&
args
)
const
=
0
;
virtual
void
onStencilPath
(
const
StencilPathArgs
&
args
)
{
GR_STATIC_CONST_SAME_STENCIL
(
kIncrementStencil
kReplace_StencilOp
kReplace_StencilOp
kAlways_StencilFunc
0xffff
0xffff
0xffff
)
;
args
.
fPipelineBuilder
-
>
setStencil
(
kIncrementStencil
)
;
args
.
fPipelineBuilder
-
>
setDisableColorXPFactory
(
)
;
DrawPathArgs
drawArgs
;
drawArgs
.
fTarget
=
args
.
fTarget
;
drawArgs
.
fResourceProvider
=
args
.
fResourceProvider
;
drawArgs
.
fPipelineBuilder
=
args
.
fPipelineBuilder
;
drawArgs
.
fColor
=
0xFFFFFFFF
;
drawArgs
.
fViewMatrix
=
args
.
fViewMatrix
;
drawArgs
.
fPath
=
args
.
fPath
;
drawArgs
.
fStroke
=
args
.
fStroke
;
drawArgs
.
fAntiAlias
=
false
;
this
-
>
drawPath
(
drawArgs
)
;
}
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
