#
ifndef
GrPathRenderer_DEFINED
#
define
GrPathRenderer_DEFINED
#
include
"
GrTypesPriv
.
h
"
#
include
"
SkTArray
.
h
"
#
include
"
SkRefCnt
.
h
"
class
GrCaps
;
class
GrClip
;
class
GrContext
;
class
GrFixedClip
;
class
GrHardClip
;
class
GrPaint
;
class
GrRenderTargetContext
;
class
GrShape
;
class
GrStyle
;
struct
GrUserStencilSettings
;
struct
SkIRect
;
class
SkMatrix
;
class
SkPath
;
class
SK_API
GrPathRenderer
:
public
SkRefCnt
{
public
:
GrPathRenderer
(
)
;
enum
StencilSupport
{
kNoSupport_StencilSupport
kStencilOnly_StencilSupport
kNoRestriction_StencilSupport
}
;
StencilSupport
getStencilSupport
(
const
GrShape
&
shape
)
const
;
enum
class
CanDrawPath
{
kNo
kAsBackup
kYes
}
;
struct
CanDrawPathArgs
{
SkDEBUGCODE
(
CanDrawPathArgs
(
)
{
memset
(
this
0
sizeof
(
*
this
)
)
;
}
)
const
GrCaps
*
fCaps
;
const
SkIRect
*
fClipConservativeBounds
;
const
SkMatrix
*
fViewMatrix
;
const
GrShape
*
fShape
;
GrAAType
fAAType
;
bool
fHasUserStencilSettings
;
#
ifdef
SK_DEBUG
void
validate
(
)
const
{
SkASSERT
(
fCaps
)
;
SkASSERT
(
fClipConservativeBounds
)
;
SkASSERT
(
fViewMatrix
)
;
SkASSERT
(
fShape
)
;
}
#
endif
}
;
CanDrawPath
canDrawPath
(
const
CanDrawPathArgs
&
args
)
const
{
SkDEBUGCODE
(
args
.
validate
(
)
;
)
return
this
-
>
onCanDrawPath
(
args
)
;
}
struct
DrawPathArgs
{
GrContext
*
fContext
;
GrPaint
&
&
fPaint
;
const
GrUserStencilSettings
*
fUserStencilSettings
;
GrRenderTargetContext
*
fRenderTargetContext
;
const
GrClip
*
fClip
;
const
SkIRect
*
fClipConservativeBounds
;
const
SkMatrix
*
fViewMatrix
;
const
GrShape
*
fShape
;
GrAAType
fAAType
;
bool
fGammaCorrect
;
#
ifdef
SK_DEBUG
void
validate
(
)
const
{
SkASSERT
(
fContext
)
;
SkASSERT
(
fUserStencilSettings
)
;
SkASSERT
(
fRenderTargetContext
)
;
SkASSERT
(
fClip
)
;
SkASSERT
(
fClipConservativeBounds
)
;
SkASSERT
(
fViewMatrix
)
;
SkASSERT
(
fShape
)
;
}
#
endif
}
;
bool
drawPath
(
const
DrawPathArgs
&
args
)
;
struct
StencilPathArgs
{
SkDEBUGCODE
(
StencilPathArgs
(
)
{
memset
(
this
0
sizeof
(
*
this
)
)
;
}
)
GrContext
*
fContext
;
GrRenderTargetContext
*
fRenderTargetContext
;
const
GrHardClip
*
fClip
;
const
SkIRect
*
fClipConservativeBounds
;
const
SkMatrix
*
fViewMatrix
;
GrAAType
fAAType
;
const
GrShape
*
fShape
;
SkDEBUGCODE
(
void
validate
(
)
const
)
;
}
;
void
stencilPath
(
const
StencilPathArgs
&
args
)
{
SkDEBUGCODE
(
args
.
validate
(
)
;
)
SkASSERT
(
kNoSupport_StencilSupport
!
=
this
-
>
getStencilSupport
(
*
args
.
fShape
)
)
;
this
-
>
onStencilPath
(
args
)
;
}
static
bool
IsStrokeHairlineOrEquivalent
(
const
GrStyle
&
const
SkMatrix
&
SkScalar
*
outCoverage
)
;
protected
:
static
void
GetPathDevBounds
(
const
SkPath
&
path
int
devW
int
devH
const
SkMatrix
&
matrix
SkRect
*
bounds
)
;
private
:
virtual
StencilSupport
onGetStencilSupport
(
const
GrShape
&
)
const
{
return
kNoRestriction_StencilSupport
;
}
virtual
bool
onDrawPath
(
const
DrawPathArgs
&
args
)
=
0
;
virtual
CanDrawPath
onCanDrawPath
(
const
CanDrawPathArgs
&
args
)
const
=
0
;
virtual
void
onStencilPath
(
const
StencilPathArgs
&
)
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
