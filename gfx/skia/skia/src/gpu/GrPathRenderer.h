#
ifndef
GrPathRenderer_DEFINED
#
define
GrPathRenderer_DEFINED
#
include
"
GrCaps
.
h
"
#
include
"
GrDrawContext
.
h
"
#
include
"
GrPaint
.
h
"
#
include
"
GrResourceProvider
.
h
"
#
include
"
GrShape
.
h
"
#
include
"
SkDrawProcs
.
h
"
#
include
"
SkTArray
.
h
"
class
SkPath
;
class
GrFixedClip
;
struct
GrPoint
;
class
SK_API
GrPathRenderer
:
public
SkRefCnt
{
public
:
GrPathRenderer
(
)
;
enum
StencilSupport
{
kNoSupport_StencilSupport
kStencilOnly_StencilSupport
kNoRestriction_StencilSupport
}
;
StencilSupport
getStencilSupport
(
const
GrShape
&
shape
)
const
{
SkDEBUGCODE
(
SkPath
path
;
)
SkDEBUGCODE
(
shape
.
asPath
(
&
path
)
;
)
SkASSERT
(
shape
.
style
(
)
.
isSimpleFill
(
)
)
;
SkASSERT
(
!
path
.
isInverseFillType
(
)
)
;
return
this
-
>
onGetStencilSupport
(
shape
)
;
}
struct
CanDrawPathArgs
{
const
GrShaderCaps
*
fShaderCaps
;
const
SkMatrix
*
fViewMatrix
;
const
GrShape
*
fShape
;
bool
fAntiAlias
;
bool
fHasUserStencilSettings
;
bool
fIsStencilBufferMSAA
;
#
ifdef
SK_DEBUG
void
validate
(
)
const
{
SkASSERT
(
fShaderCaps
)
;
SkASSERT
(
fViewMatrix
)
;
SkASSERT
(
fShape
)
;
}
#
endif
}
;
bool
canDrawPath
(
const
CanDrawPathArgs
&
args
)
const
{
SkDEBUGCODE
(
args
.
validate
(
)
;
)
return
this
-
>
onCanDrawPath
(
args
)
;
}
struct
DrawPathArgs
{
GrResourceProvider
*
fResourceProvider
;
const
GrPaint
*
fPaint
;
const
GrUserStencilSettings
*
fUserStencilSettings
;
GrDrawContext
*
fDrawContext
;
const
GrClip
*
fClip
;
const
SkMatrix
*
fViewMatrix
;
const
GrShape
*
fShape
;
bool
fAntiAlias
;
bool
fGammaCorrect
;
#
ifdef
SK_DEBUG
void
validate
(
)
const
{
SkASSERT
(
fResourceProvider
)
;
SkASSERT
(
fPaint
)
;
SkASSERT
(
fUserStencilSettings
)
;
SkASSERT
(
fDrawContext
)
;
SkASSERT
(
fClip
)
;
SkASSERT
(
fViewMatrix
)
;
SkASSERT
(
fShape
)
;
}
#
endif
}
;
bool
drawPath
(
const
DrawPathArgs
&
args
)
{
SkDEBUGCODE
(
args
.
validate
(
)
;
)
#
ifdef
SK_DEBUG
CanDrawPathArgs
canArgs
;
canArgs
.
fShaderCaps
=
args
.
fResourceProvider
-
>
caps
(
)
-
>
shaderCaps
(
)
;
canArgs
.
fViewMatrix
=
args
.
fViewMatrix
;
canArgs
.
fShape
=
args
.
fShape
;
canArgs
.
fAntiAlias
=
args
.
fAntiAlias
;
canArgs
.
fHasUserStencilSettings
=
!
args
.
fUserStencilSettings
-
>
isUnused
(
)
;
canArgs
.
fIsStencilBufferMSAA
=
args
.
fDrawContext
-
>
isStencilBufferMultisampled
(
)
;
SkASSERT
(
this
-
>
canDrawPath
(
canArgs
)
)
;
if
(
!
args
.
fUserStencilSettings
-
>
isUnused
(
)
)
{
SkPath
path
;
args
.
fShape
-
>
asPath
(
&
path
)
;
SkASSERT
(
args
.
fShape
-
>
style
(
)
.
isSimpleFill
(
)
)
;
SkASSERT
(
kNoRestriction_StencilSupport
=
=
this
-
>
getStencilSupport
(
*
args
.
fShape
)
)
;
}
#
endif
return
this
-
>
onDrawPath
(
args
)
;
}
struct
StencilPathArgs
{
GrResourceProvider
*
fResourceProvider
;
GrDrawContext
*
fDrawContext
;
const
GrClip
*
fClip
;
const
SkMatrix
*
fViewMatrix
;
bool
fIsAA
;
const
GrShape
*
fShape
;
#
ifdef
SK_DEBUG
void
validate
(
)
const
{
SkASSERT
(
fResourceProvider
)
;
SkASSERT
(
fDrawContext
)
;
SkASSERT
(
fViewMatrix
)
;
SkASSERT
(
fShape
)
;
SkASSERT
(
fShape
-
>
style
(
)
.
isSimpleFill
(
)
)
;
SkPath
path
;
fShape
-
>
asPath
(
&
path
)
;
SkASSERT
(
!
path
.
isInverseFillType
(
)
)
;
}
#
endif
}
;
void
stencilPath
(
const
StencilPathArgs
&
args
)
{
SkDEBUGCODE
(
args
.
validate
(
)
;
)
SkASSERT
(
kNoSupport_StencilSupport
!
=
this
-
>
getStencilSupport
(
*
args
.
fShape
)
)
;
this
-
>
onStencilPath
(
args
)
;
}
static
bool
IsStrokeHairlineOrEquivalent
(
const
GrStyle
&
style
const
SkMatrix
&
matrix
SkScalar
*
outCoverage
)
{
if
(
style
.
pathEffect
(
)
)
{
return
false
;
}
const
SkStrokeRec
&
stroke
=
style
.
strokeRec
(
)
;
if
(
stroke
.
isHairlineStyle
(
)
)
{
if
(
outCoverage
)
{
*
outCoverage
=
SK_Scalar1
;
}
return
true
;
}
return
stroke
.
getStyle
(
)
=
=
SkStrokeRec
:
:
kStroke_Style
&
&
SkDrawTreatAAStrokeAsHairline
(
stroke
.
getWidth
(
)
matrix
outCoverage
)
;
}
protected
:
static
void
GetPathDevBounds
(
const
SkPath
&
path
int
devW
int
devH
const
SkMatrix
&
matrix
SkRect
*
bounds
)
;
private
:
virtual
StencilSupport
onGetStencilSupport
(
const
GrShape
&
)
const
{
return
kNoRestriction_StencilSupport
;
}
virtual
bool
onDrawPath
(
const
DrawPathArgs
&
args
)
=
0
;
virtual
bool
onCanDrawPath
(
const
CanDrawPathArgs
&
args
)
const
=
0
;
virtual
void
onStencilPath
(
const
StencilPathArgs
&
args
)
{
static
constexpr
GrUserStencilSettings
kIncrementStencil
(
GrUserStencilSettings
:
:
StaticInit
<
0xffff
GrUserStencilTest
:
:
kAlways
0xffff
GrUserStencilOp
:
:
kReplace
GrUserStencilOp
:
:
kReplace
0xffff
>
(
)
)
;
GrPaint
paint
;
DrawPathArgs
drawArgs
;
drawArgs
.
fResourceProvider
=
args
.
fResourceProvider
;
drawArgs
.
fPaint
=
&
paint
;
drawArgs
.
fUserStencilSettings
=
&
kIncrementStencil
;
drawArgs
.
fDrawContext
=
args
.
fDrawContext
;
drawArgs
.
fViewMatrix
=
args
.
fViewMatrix
;
drawArgs
.
fShape
=
args
.
fShape
;
drawArgs
.
fAntiAlias
=
false
;
drawArgs
.
fGammaCorrect
=
false
;
this
-
>
drawPath
(
drawArgs
)
;
}
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
