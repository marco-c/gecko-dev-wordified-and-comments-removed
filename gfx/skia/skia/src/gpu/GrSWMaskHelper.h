#
ifndef
GrSWMaskHelper_DEFINED
#
define
GrSWMaskHelper_DEFINED
#
include
"
GrColor
.
h
"
#
include
"
GrTextureProvider
.
h
"
#
include
"
SkAutoPixmapStorage
.
h
"
#
include
"
SkBitmap
.
h
"
#
include
"
SkDraw
.
h
"
#
include
"
SkMatrix
.
h
"
#
include
"
SkRasterClip
.
h
"
#
include
"
SkRegion
.
h
"
#
include
"
SkTypes
.
h
"
class
GrClip
;
class
GrPaint
;
class
GrShape
;
class
GrTextureProvider
;
class
GrStyle
;
class
GrTexture
;
struct
GrUserStencilSettings
;
class
GrSWMaskHelper
:
SkNoncopyable
{
public
:
GrSWMaskHelper
(
GrTextureProvider
*
texProvider
)
:
fTexProvider
(
texProvider
)
{
}
bool
init
(
const
SkIRect
&
resultBounds
const
SkMatrix
*
matrix
)
;
void
drawRect
(
const
SkRect
&
rect
SkRegion
:
:
Op
op
bool
antiAlias
uint8_t
alpha
)
;
void
drawShape
(
const
GrShape
&
SkRegion
:
:
Op
op
bool
antiAlias
uint8_t
alpha
)
;
void
toTexture
(
GrTexture
*
texture
)
;
void
toSDF
(
unsigned
char
*
sdf
)
;
void
clear
(
uint8_t
alpha
)
{
fPixels
.
erase
(
SkColorSetARGB
(
alpha
0xFF
0xFF
0xFF
)
)
;
}
enum
class
TextureType
{
kExactFit
kApproximateFit
}
;
static
GrTexture
*
DrawShapeMaskToTexture
(
GrTextureProvider
*
const
GrShape
&
const
SkIRect
&
resultBounds
bool
antiAlias
TextureType
const
SkMatrix
*
matrix
)
;
static
void
DrawToTargetWithShapeMask
(
GrTexture
*
texture
GrDrawContext
*
const
GrPaint
&
paint
const
GrUserStencilSettings
&
userStencilSettings
const
GrClip
&
const
SkMatrix
&
viewMatrix
const
SkIPoint
&
textureOriginInDeviceSpace
const
SkIRect
&
deviceSpaceRectToDraw
)
;
private
:
GrTexture
*
createTexture
(
TextureType
)
;
GrTextureProvider
*
fTexProvider
;
SkMatrix
fMatrix
;
SkAutoPixmapStorage
fPixels
;
SkDraw
fDraw
;
SkRasterClip
fRasterClip
;
typedef
SkNoncopyable
INHERITED
;
}
;
#
endif
