#
ifndef
GrSWMaskHelper_DEFINED
#
define
GrSWMaskHelper_DEFINED
#
include
"
SkAutoPixmapStorage
.
h
"
#
include
"
GrColor
.
h
"
#
include
"
GrPipelineBuilder
.
h
"
#
include
"
SkBitmap
.
h
"
#
include
"
SkDraw
.
h
"
#
include
"
SkMatrix
.
h
"
#
include
"
SkRasterClip
.
h
"
#
include
"
SkRegion
.
h
"
#
include
"
SkTextureCompressor
.
h
"
#
include
"
SkTypes
.
h
"
class
GrClip
;
class
GrContext
;
class
GrTexture
;
class
SkPath
;
class
SkStrokeRec
;
class
GrDrawTarget
;
class
GrSWMaskHelper
:
SkNoncopyable
{
public
:
GrSWMaskHelper
(
GrContext
*
context
)
:
fContext
(
context
)
fCompressionMode
(
kNone_CompressionMode
)
{
}
bool
init
(
const
SkIRect
&
resultBounds
const
SkMatrix
*
matrix
bool
allowCompression
=
true
)
;
void
draw
(
const
SkRect
&
rect
SkRegion
:
:
Op
op
bool
antiAlias
uint8_t
alpha
)
;
void
draw
(
const
SkPath
&
path
const
SkStrokeRec
&
stroke
SkRegion
:
:
Op
op
bool
antiAlias
uint8_t
alpha
)
;
void
toTexture
(
GrTexture
*
texture
)
;
void
toSDF
(
unsigned
char
*
sdf
)
;
void
clear
(
uint8_t
alpha
)
{
fPixels
.
erase
(
SkColorSetARGB
(
alpha
0xFF
0xFF
0xFF
)
)
;
}
static
GrTexture
*
DrawPathMaskToTexture
(
GrContext
*
context
const
SkPath
&
path
const
SkStrokeRec
&
stroke
const
SkIRect
&
resultBounds
bool
antiAlias
const
SkMatrix
*
matrix
)
;
static
void
DrawToTargetWithPathMask
(
GrTexture
*
texture
GrDrawTarget
*
target
GrPipelineBuilder
*
pipelineBuilder
GrColor
const
SkMatrix
&
viewMatrix
const
SkIRect
&
rect
)
;
private
:
GrTexture
*
createTexture
(
)
;
GrContext
*
fContext
;
SkMatrix
fMatrix
;
SkAutoPixmapStorage
fPixels
;
SkDraw
fDraw
;
SkRasterClip
fRasterClip
;
enum
CompressionMode
{
kNone_CompressionMode
kCompress_CompressionMode
kBlitter_CompressionMode
}
fCompressionMode
;
SkAutoMalloc
fCompressedBuffer
;
SkTextureCompressor
:
:
Format
fCompressedFormat
;
void
sendTextureData
(
GrTexture
*
texture
const
GrSurfaceDesc
&
desc
const
void
*
data
size_t
rowbytes
)
;
void
compressTextureData
(
GrTexture
*
texture
const
GrSurfaceDesc
&
desc
)
;
typedef
SkNoncopyable
INHERITED
;
}
;
#
endif
