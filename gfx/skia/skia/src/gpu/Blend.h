#
ifndef
skgpu_Blend_DEFINED
#
define
skgpu_Blend_DEFINED
#
include
"
include
/
core
/
SkSpan
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
private
/
SkColorData
.
h
"
enum
class
SkBlendMode
;
class
SkString
;
namespace
skgpu
{
enum
class
BlendEquation
:
uint8_t
{
kAdd
kSubtract
kReverseSubtract
kScreen
kOverlay
kDarken
kLighten
kColorDodge
kColorBurn
kHardLight
kSoftLight
kDifference
kExclusion
kMultiply
kHSLHue
kHSLSaturation
kHSLColor
kHSLLuminosity
kIllegal
kFirstAdvanced
=
kScreen
kLast
=
kIllegal
}
;
static
const
int
kBlendEquationCnt
=
static_cast
<
int
>
(
BlendEquation
:
:
kLast
)
+
1
;
enum
class
BlendCoeff
:
uint8_t
{
kZero
kOne
kSC
kISC
kDC
kIDC
kSA
kISA
kDA
kIDA
kConstC
kIConstC
kS2C
kIS2C
kS2A
kIS2A
kIllegal
kLast
=
kIllegal
}
;
struct
BlendInfo
{
SkDEBUGCODE
(
SkString
dump
(
)
const
;
)
bool
operator
=
=
(
const
BlendInfo
&
other
)
const
{
return
fEquation
=
=
other
.
fEquation
&
&
fSrcBlend
=
=
other
.
fSrcBlend
&
&
fDstBlend
=
=
other
.
fDstBlend
&
&
fBlendConstant
=
=
other
.
fBlendConstant
&
&
fWritesColor
=
=
other
.
fWritesColor
;
}
skgpu
:
:
BlendEquation
fEquation
=
skgpu
:
:
BlendEquation
:
:
kAdd
;
skgpu
:
:
BlendCoeff
fSrcBlend
=
skgpu
:
:
BlendCoeff
:
:
kOne
;
skgpu
:
:
BlendCoeff
fDstBlend
=
skgpu
:
:
BlendCoeff
:
:
kZero
;
SkPMColor4f
fBlendConstant
=
SK_PMColor4fTRANSPARENT
;
bool
fWritesColor
=
true
;
}
;
static
const
int
kBlendCoeffCnt
=
static_cast
<
int
>
(
BlendCoeff
:
:
kLast
)
+
1
;
static
constexpr
bool
BlendCoeffRefsSrc
(
const
BlendCoeff
coeff
)
{
return
BlendCoeff
:
:
kSC
=
=
coeff
|
|
BlendCoeff
:
:
kISC
=
=
coeff
|
|
BlendCoeff
:
:
kSA
=
=
coeff
|
|
BlendCoeff
:
:
kISA
=
=
coeff
;
}
static
constexpr
bool
BlendCoeffRefsDst
(
const
BlendCoeff
coeff
)
{
return
BlendCoeff
:
:
kDC
=
=
coeff
|
|
BlendCoeff
:
:
kIDC
=
=
coeff
|
|
BlendCoeff
:
:
kDA
=
=
coeff
|
|
BlendCoeff
:
:
kIDA
=
=
coeff
;
}
static
constexpr
bool
BlendCoeffRefsSrc2
(
const
BlendCoeff
coeff
)
{
return
BlendCoeff
:
:
kS2C
=
=
coeff
|
|
BlendCoeff
:
:
kIS2C
=
=
coeff
|
|
BlendCoeff
:
:
kS2A
=
=
coeff
|
|
BlendCoeff
:
:
kIS2A
=
=
coeff
;
}
static
constexpr
bool
BlendCoeffsUseSrcColor
(
BlendCoeff
srcCoeff
BlendCoeff
dstCoeff
)
{
return
BlendCoeff
:
:
kZero
!
=
srcCoeff
|
|
BlendCoeffRefsSrc
(
dstCoeff
)
;
}
static
constexpr
bool
BlendCoeffsUseDstColor
(
BlendCoeff
srcCoeff
BlendCoeff
dstCoeff
bool
srcColorIsOpaque
)
{
return
BlendCoeffRefsDst
(
srcCoeff
)
|
|
(
dstCoeff
!
=
BlendCoeff
:
:
kZero
&
&
!
(
dstCoeff
=
=
BlendCoeff
:
:
kISA
&
&
srcColorIsOpaque
)
)
;
}
static
constexpr
bool
BlendEquationIsAdvanced
(
BlendEquation
equation
)
{
return
equation
>
=
BlendEquation
:
:
kFirstAdvanced
&
&
equation
!
=
BlendEquation
:
:
kIllegal
;
}
static
constexpr
bool
BlendModifiesDst
(
BlendEquation
equation
BlendCoeff
srcCoeff
BlendCoeff
dstCoeff
)
{
return
(
BlendEquation
:
:
kAdd
!
=
equation
&
&
BlendEquation
:
:
kReverseSubtract
!
=
equation
)
|
|
BlendCoeff
:
:
kZero
!
=
srcCoeff
|
|
BlendCoeff
:
:
kOne
!
=
dstCoeff
;
}
static
constexpr
bool
BlendCoeffRefsConstant
(
const
BlendCoeff
coeff
)
{
return
coeff
=
=
BlendCoeff
:
:
kConstC
|
|
coeff
=
=
BlendCoeff
:
:
kIConstC
;
}
static
constexpr
bool
BlendShouldDisable
(
BlendEquation
equation
BlendCoeff
srcCoeff
BlendCoeff
dstCoeff
)
{
return
(
BlendEquation
:
:
kAdd
=
=
equation
|
|
BlendEquation
:
:
kSubtract
=
=
equation
)
&
&
BlendCoeff
:
:
kOne
=
=
srcCoeff
&
&
BlendCoeff
:
:
kZero
=
=
dstCoeff
;
}
static
constexpr
bool
BlendAllowsCoverageAsAlpha
(
BlendEquation
equation
BlendCoeff
srcCoeff
BlendCoeff
dstCoeff
)
{
return
BlendEquationIsAdvanced
(
equation
)
|
|
!
BlendModifiesDst
(
equation
srcCoeff
dstCoeff
)
|
|
(
(
BlendEquation
:
:
kAdd
=
=
equation
|
|
BlendEquation
:
:
kReverseSubtract
=
=
equation
)
&
&
!
BlendCoeffRefsSrc
(
srcCoeff
)
&
&
(
BlendCoeff
:
:
kOne
=
=
dstCoeff
|
|
BlendCoeff
:
:
kISC
=
=
dstCoeff
|
|
BlendCoeff
:
:
kISA
=
=
dstCoeff
)
)
;
}
const
char
*
BlendFuncName
(
SkBlendMode
mode
)
;
SkSpan
<
const
float
>
GetPorterDuffBlendConstants
(
SkBlendMode
mode
)
;
struct
ReducedBlendModeInfo
{
const
char
*
fFunction
;
SkSpan
<
const
float
>
fUniformData
;
}
;
ReducedBlendModeInfo
GetReducedBlendModeInfo
(
SkBlendMode
mode
)
;
}
#
endif
