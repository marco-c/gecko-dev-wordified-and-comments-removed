#
ifndef
gr_instanced_InstanceProcessor_DEFINED
#
define
gr_instanced_InstanceProcessor_DEFINED
#
include
"
GrCaps
.
h
"
#
include
"
GrBufferAccess
.
h
"
#
include
"
GrGeometryProcessor
.
h
"
#
include
"
instanced
/
InstancedRenderingTypes
.
h
"
namespace
gr_instanced
{
class
InstanceProcessor
:
public
GrGeometryProcessor
{
public
:
InstanceProcessor
(
BatchInfo
GrBuffer
*
paramsBuffer
)
;
const
char
*
name
(
)
const
override
{
return
"
Instance
Processor
"
;
}
BatchInfo
batchInfo
(
)
const
{
return
fBatchInfo
;
}
void
getGLSLProcessorKey
(
const
GrGLSLCaps
&
GrProcessorKeyBuilder
*
b
)
const
override
{
b
-
>
add32
(
fBatchInfo
.
fData
)
;
}
GrGLSLPrimitiveProcessor
*
createGLSLInstance
(
const
GrGLSLCaps
&
)
const
override
;
static
const
GrBuffer
*
SK_WARN_UNUSED_RESULT
FindOrCreateVertexBuffer
(
GrGpu
*
)
;
static
const
GrBuffer
*
SK_WARN_UNUSED_RESULT
FindOrCreateIndex8Buffer
(
GrGpu
*
)
;
static
IndexRange
GetIndexRangeForRect
(
AntialiasMode
)
;
static
IndexRange
GetIndexRangeForOval
(
AntialiasMode
const
SkRect
&
devBounds
)
;
static
IndexRange
GetIndexRangeForRRect
(
AntialiasMode
)
;
static
const
char
*
GetNameOfIndexRange
(
IndexRange
)
;
private
:
static
GrCaps
:
:
InstancedSupport
CheckSupport
(
const
GrGLSLCaps
&
const
GrCaps
&
)
;
const
BatchInfo
fBatchInfo
;
GrBufferAccess
fParamsAccess
;
friend
class
GLInstancedRendering
;
typedef
GrGeometryProcessor
INHERITED
;
}
;
}
#
endif
