#
ifndef
gr_instanced_InstancedRendering_DEFINED
#
define
gr_instanced_InstancedRendering_DEFINED
#
include
"
GrMemoryPool
.
h
"
#
include
"
SkTInternalLList
.
h
"
#
include
"
batches
/
GrDrawBatch
.
h
"
#
include
"
instanced
/
InstancedRenderingTypes
.
h
"
#
include
"
.
.
/
private
/
GrInstancedPipelineInfo
.
h
"
class
GrResourceProvider
;
namespace
gr_instanced
{
class
InstanceProcessor
;
class
InstancedRendering
:
public
SkNoncopyable
{
public
:
virtual
~
InstancedRendering
(
)
{
SkASSERT
(
State
:
:
kRecordingDraws
=
=
fState
)
;
}
GrGpu
*
gpu
(
)
const
{
return
fGpu
;
}
GrDrawBatch
*
SK_WARN_UNUSED_RESULT
recordRect
(
const
SkRect
&
const
SkMatrix
&
GrColor
bool
antialias
const
GrInstancedPipelineInfo
&
bool
*
useHWAA
)
;
GrDrawBatch
*
SK_WARN_UNUSED_RESULT
recordRect
(
const
SkRect
&
const
SkMatrix
&
GrColor
const
SkRect
&
localRect
bool
antialias
const
GrInstancedPipelineInfo
&
bool
*
useHWAA
)
;
GrDrawBatch
*
SK_WARN_UNUSED_RESULT
recordRect
(
const
SkRect
&
const
SkMatrix
&
GrColor
const
SkMatrix
&
localMatrix
bool
antialias
const
GrInstancedPipelineInfo
&
bool
*
useHWAA
)
;
GrDrawBatch
*
SK_WARN_UNUSED_RESULT
recordOval
(
const
SkRect
&
const
SkMatrix
&
GrColor
bool
antialias
const
GrInstancedPipelineInfo
&
bool
*
useHWAA
)
;
GrDrawBatch
*
SK_WARN_UNUSED_RESULT
recordRRect
(
const
SkRRect
&
const
SkMatrix
&
GrColor
bool
antialias
const
GrInstancedPipelineInfo
&
bool
*
useHWAA
)
;
GrDrawBatch
*
SK_WARN_UNUSED_RESULT
recordDRRect
(
const
SkRRect
&
outer
const
SkRRect
&
inner
const
SkMatrix
&
GrColor
bool
antialias
const
GrInstancedPipelineInfo
&
bool
*
useHWAA
)
;
void
beginFlush
(
GrResourceProvider
*
)
;
void
endFlush
(
)
;
enum
class
ResetType
:
bool
{
kDestroy
kAbandon
}
;
void
resetGpuResources
(
ResetType
)
;
protected
:
class
Batch
:
public
GrDrawBatch
{
public
:
SK_DECLARE_INTERNAL_LLIST_INTERFACE
(
Batch
)
;
~
Batch
(
)
override
;
const
char
*
name
(
)
const
override
{
return
"
Instanced
Batch
"
;
}
struct
Draw
{
Instance
fInstance
;
IndexRange
fGeometry
;
Draw
*
fNext
;
}
;
Draw
&
getSingleDraw
(
)
const
{
SkASSERT
(
fHeadDraw
&
&
!
fHeadDraw
-
>
fNext
)
;
return
*
fHeadDraw
;
}
Instance
&
getSingleInstance
(
)
const
{
return
this
-
>
getSingleDraw
(
)
.
fInstance
;
}
void
appendRRectParams
(
const
SkRRect
&
)
;
void
appendParamsTexel
(
const
SkScalar
*
vals
int
count
)
;
void
appendParamsTexel
(
SkScalar
x
SkScalar
y
SkScalar
z
SkScalar
w
)
;
void
appendParamsTexel
(
SkScalar
x
SkScalar
y
SkScalar
z
)
;
protected
:
Batch
(
uint32_t
classID
InstancedRendering
*
ir
)
;
void
initBatchTracker
(
const
GrXPOverridesForBatch
&
)
override
;
bool
onCombineIfPossible
(
GrBatch
*
other
const
GrCaps
&
caps
)
override
;
void
computePipelineOptimizations
(
GrInitInvariantOutput
*
color
GrInitInvariantOutput
*
coverage
GrBatchToXPOverrides
*
)
const
override
;
void
onPrepare
(
GrBatchFlushState
*
)
override
{
}
void
onDraw
(
GrBatchFlushState
*
)
override
;
InstancedRendering
*
const
fInstancedRendering
;
BatchInfo
fInfo
;
SkScalar
fPixelLoad
;
SkSTArray
<
5
ParamsTexel
true
>
fParams
;
bool
fIsTracked
;
int
fNumDraws
;
int
fNumChangesInGeometry
;
Draw
*
fHeadDraw
;
Draw
*
fTailDraw
;
typedef
GrDrawBatch
INHERITED
;
friend
class
InstancedRendering
;
}
;
typedef
SkTInternalLList
<
Batch
>
BatchList
;
InstancedRendering
(
GrGpu
*
gpu
)
;
const
BatchList
&
trackedBatches
(
)
const
{
return
fTrackedBatches
;
}
const
GrBuffer
*
vertexBuffer
(
)
const
{
SkASSERT
(
fVertexBuffer
)
;
return
fVertexBuffer
;
}
const
GrBuffer
*
indexBuffer
(
)
const
{
SkASSERT
(
fIndexBuffer
)
;
return
fIndexBuffer
;
}
virtual
void
onBeginFlush
(
GrResourceProvider
*
)
=
0
;
virtual
void
onDraw
(
const
GrPipeline
&
const
InstanceProcessor
&
const
Batch
*
)
=
0
;
virtual
void
onEndFlush
(
)
=
0
;
virtual
void
onResetGpuResources
(
ResetType
)
=
0
;
private
:
enum
class
State
:
bool
{
kRecordingDraws
kFlushing
}
;
Batch
*
SK_WARN_UNUSED_RESULT
recordShape
(
ShapeType
const
SkRect
&
bounds
const
SkMatrix
&
viewMatrix
GrColor
const
SkRect
&
localRect
bool
antialias
const
GrInstancedPipelineInfo
&
bool
*
requireHWAA
)
;
bool
selectAntialiasMode
(
const
SkMatrix
&
viewMatrix
bool
antialias
const
GrInstancedPipelineInfo
&
bool
*
useHWAA
AntialiasMode
*
)
;
virtual
Batch
*
createBatch
(
)
=
0
;
const
SkAutoTUnref
<
GrGpu
>
fGpu
;
State
fState
;
GrMemoryPool
fDrawPool
;
SkSTArray
<
1024
ParamsTexel
true
>
fParams
;
BatchList
fTrackedBatches
;
SkAutoTUnref
<
const
GrBuffer
>
fVertexBuffer
;
SkAutoTUnref
<
const
GrBuffer
>
fIndexBuffer
;
SkAutoTUnref
<
GrBuffer
>
fParamsBuffer
;
}
;
}
#
endif
