#
include
"
src
/
gpu
/
GrTextureRenderTargetProxy
.
h
"
#
include
"
include
/
gpu
/
GrTexture
.
h
"
#
include
"
src
/
gpu
/
GrCaps
.
h
"
#
include
"
src
/
gpu
/
GrContextPriv
.
h
"
#
include
"
src
/
gpu
/
GrRenderTarget
.
h
"
#
include
"
src
/
gpu
/
GrRenderTargetProxyPriv
.
h
"
#
include
"
src
/
gpu
/
GrSurfacePriv
.
h
"
#
include
"
src
/
gpu
/
GrSurfaceProxyPriv
.
h
"
#
include
"
src
/
gpu
/
GrTexturePriv
.
h
"
#
include
"
src
/
gpu
/
GrTextureProxyPriv
.
h
"
GrTextureRenderTargetProxy
:
:
GrTextureRenderTargetProxy
(
const
GrCaps
&
caps
const
GrBackendFormat
&
format
const
GrSurfaceDesc
&
desc
int
sampleCnt
GrSurfaceOrigin
origin
GrMipMapped
mipMapped
GrMipMapsStatus
mipMapsStatus
const
GrSwizzle
&
texSwizzle
const
GrSwizzle
&
outSwizzle
SkBackingFit
fit
SkBudgeted
budgeted
GrProtected
isProtected
GrInternalSurfaceFlags
surfaceFlags
UseAllocator
useAllocator
)
:
GrSurfaceProxy
(
format
desc
GrRenderable
:
:
kYes
origin
texSwizzle
fit
budgeted
isProtected
surfaceFlags
useAllocator
)
GrRenderTargetProxy
(
caps
format
desc
sampleCnt
origin
texSwizzle
outSwizzle
fit
budgeted
isProtected
surfaceFlags
useAllocator
)
GrTextureProxy
(
format
desc
origin
mipMapped
mipMapsStatus
texSwizzle
fit
budgeted
isProtected
surfaceFlags
useAllocator
)
{
this
-
>
initSurfaceFlags
(
caps
)
;
}
GrTextureRenderTargetProxy
:
:
GrTextureRenderTargetProxy
(
const
GrCaps
&
caps
LazyInstantiateCallback
&
&
callback
const
GrBackendFormat
&
format
const
GrSurfaceDesc
&
desc
int
sampleCnt
GrSurfaceOrigin
origin
GrMipMapped
mipMapped
GrMipMapsStatus
mipMapsStatus
const
GrSwizzle
&
texSwizzle
const
GrSwizzle
&
outSwizzle
SkBackingFit
fit
SkBudgeted
budgeted
GrProtected
isProtected
GrInternalSurfaceFlags
surfaceFlags
UseAllocator
useAllocator
)
:
GrSurfaceProxy
(
std
:
:
move
(
callback
)
format
desc
GrRenderable
:
:
kYes
origin
texSwizzle
fit
budgeted
isProtected
surfaceFlags
useAllocator
)
GrRenderTargetProxy
(
LazyInstantiateCallback
(
)
format
desc
sampleCnt
origin
texSwizzle
outSwizzle
fit
budgeted
isProtected
surfaceFlags
useAllocator
WrapsVkSecondaryCB
:
:
kNo
)
GrTextureProxy
(
LazyInstantiateCallback
(
)
format
desc
origin
mipMapped
mipMapsStatus
texSwizzle
fit
budgeted
isProtected
surfaceFlags
useAllocator
)
{
this
-
>
initSurfaceFlags
(
caps
)
;
}
GrTextureRenderTargetProxy
:
:
GrTextureRenderTargetProxy
(
sk_sp
<
GrSurface
>
surf
GrSurfaceOrigin
origin
const
GrSwizzle
&
texSwizzle
const
GrSwizzle
&
outSwizzle
UseAllocator
useAllocator
)
:
GrSurfaceProxy
(
surf
origin
texSwizzle
SkBackingFit
:
:
kExact
useAllocator
)
GrRenderTargetProxy
(
surf
origin
texSwizzle
outSwizzle
useAllocator
)
GrTextureProxy
(
surf
origin
texSwizzle
useAllocator
)
{
SkASSERT
(
surf
-
>
asTexture
(
)
)
;
SkASSERT
(
surf
-
>
asRenderTarget
(
)
)
;
SkASSERT
(
fSurfaceFlags
=
=
fTarget
-
>
surfacePriv
(
)
.
flags
(
)
)
;
SkASSERT
(
(
this
-
>
numSamples
(
)
<
=
1
|
|
fTarget
-
>
getContext
(
)
-
>
priv
(
)
.
caps
(
)
-
>
msaaResolvesAutomatically
(
)
)
!
=
this
-
>
requiresManualMSAAResolve
(
)
)
;
}
void
GrTextureRenderTargetProxy
:
:
initSurfaceFlags
(
const
GrCaps
&
caps
)
{
SkASSERT
(
!
this
-
>
rtPriv
(
)
.
glRTFBOIDIs0
(
)
)
;
if
(
this
-
>
numSamples
(
)
>
1
&
&
!
caps
.
msaaResolvesAutomatically
(
)
)
{
fSurfaceFlags
|
=
GrInternalSurfaceFlags
:
:
kRequiresManualMSAAResolve
;
}
}
size_t
GrTextureRenderTargetProxy
:
:
onUninstantiatedGpuMemorySize
(
const
GrCaps
&
caps
)
const
{
int
colorSamplesPerPixel
=
this
-
>
numSamples
(
)
;
if
(
colorSamplesPerPixel
>
1
)
{
+
+
colorSamplesPerPixel
;
}
return
GrSurface
:
:
ComputeSize
(
caps
this
-
>
backendFormat
(
)
this
-
>
width
(
)
this
-
>
height
(
)
colorSamplesPerPixel
this
-
>
proxyMipMapped
(
)
!
this
-
>
priv
(
)
.
isExact
(
)
)
;
}
bool
GrTextureRenderTargetProxy
:
:
instantiate
(
GrResourceProvider
*
resourceProvider
)
{
if
(
this
-
>
isLazy
(
)
)
{
return
false
;
}
const
GrUniqueKey
&
key
=
this
-
>
getUniqueKey
(
)
;
if
(
!
this
-
>
instantiateImpl
(
resourceProvider
this
-
>
numSamples
(
)
this
-
>
numStencilSamples
(
)
GrRenderable
:
:
kYes
this
-
>
mipMapped
(
)
key
.
isValid
(
)
?
&
key
:
nullptr
)
)
{
return
false
;
}
if
(
key
.
isValid
(
)
)
{
SkASSERT
(
key
=
=
this
-
>
getUniqueKey
(
)
)
;
}
SkASSERT
(
this
-
>
peekRenderTarget
(
)
)
;
SkASSERT
(
this
-
>
peekTexture
(
)
)
;
return
true
;
}
sk_sp
<
GrSurface
>
GrTextureRenderTargetProxy
:
:
createSurface
(
GrResourceProvider
*
resourceProvider
)
const
{
sk_sp
<
GrSurface
>
surface
=
this
-
>
createSurfaceImpl
(
resourceProvider
this
-
>
numSamples
(
)
this
-
>
numStencilSamples
(
)
GrRenderable
:
:
kYes
this
-
>
mipMapped
(
)
)
;
if
(
!
surface
)
{
return
nullptr
;
}
SkASSERT
(
surface
-
>
asRenderTarget
(
)
)
;
SkASSERT
(
surface
-
>
asTexture
(
)
)
;
return
surface
;
}
#
ifdef
SK_DEBUG
void
GrTextureRenderTargetProxy
:
:
onValidateSurface
(
const
GrSurface
*
surface
)
{
SkASSERT
(
surface
-
>
asTexture
(
)
)
;
SkASSERT
(
GrMipMapped
:
:
kNo
=
=
this
-
>
proxyMipMapped
(
)
|
|
GrMipMapped
:
:
kYes
=
=
surface
-
>
asTexture
(
)
-
>
texturePriv
(
)
.
mipMapped
(
)
)
;
SkASSERT
(
surface
-
>
asRenderTarget
(
)
)
;
SkASSERT
(
surface
-
>
asRenderTarget
(
)
-
>
numSamples
(
)
=
=
this
-
>
numSamples
(
)
)
;
SkASSERT
(
surface
-
>
asTexture
(
)
-
>
texturePriv
(
)
.
textureType
(
)
=
=
this
-
>
textureType
(
)
)
;
GrInternalSurfaceFlags
proxyFlags
=
fSurfaceFlags
;
GrInternalSurfaceFlags
surfaceFlags
=
surface
-
>
surfacePriv
(
)
.
flags
(
)
;
SkASSERT
(
!
(
proxyFlags
&
GrInternalSurfaceFlags
:
:
kReadOnly
)
)
;
SkASSERT
(
!
(
surfaceFlags
&
GrInternalSurfaceFlags
:
:
kReadOnly
)
)
;
SkASSERT
(
(
(
int
)
proxyFlags
&
kGrInternalTextureRenderTargetFlagsMask
)
=
=
(
(
int
)
surfaceFlags
&
kGrInternalTextureRenderTargetFlagsMask
)
)
;
}
#
endif
