#
ifndef
GrImageContextPriv_DEFINED
#
define
GrImageContextPriv_DEFINED
#
include
"
GrImageContext
.
h
"
class
GrImageContextPriv
{
public
:
uint32_t
contextID
(
)
const
{
return
fContext
-
>
contextID
(
)
;
}
bool
matches
(
GrContext_Base
*
candidate
)
const
{
return
fContext
-
>
matches
(
candidate
)
;
}
const
GrContextOptions
&
options
(
)
const
{
return
fContext
-
>
options
(
)
;
}
bool
explicitlyAllocateGPUResources
(
)
const
{
return
fContext
-
>
explicitlyAllocateGPUResources
(
)
;
}
const
GrCaps
*
caps
(
)
const
{
return
fContext
-
>
caps
(
)
;
}
sk_sp
<
const
GrCaps
>
refCaps
(
)
const
;
sk_sp
<
GrSkSLFPFactoryCache
>
fpFactoryCache
(
)
;
GrImageContext
*
asImageContext
(
)
{
return
fContext
-
>
asImageContext
(
)
;
}
GrRecordingContext
*
asRecordingContext
(
)
{
return
fContext
-
>
asRecordingContext
(
)
;
}
GrContext
*
asDirectContext
(
)
{
return
fContext
-
>
asDirectContext
(
)
;
}
GrProxyProvider
*
proxyProvider
(
)
{
return
fContext
-
>
proxyProvider
(
)
;
}
const
GrProxyProvider
*
proxyProvider
(
)
const
{
return
fContext
-
>
proxyProvider
(
)
;
}
bool
abandoned
(
)
const
{
return
fContext
-
>
abandoned
(
)
;
}
SkDEBUGCODE
(
GrSingleOwner
*
singleOwner
(
)
const
{
return
fContext
-
>
singleOwner
(
)
;
}
)
private
:
explicit
GrImageContextPriv
(
GrImageContext
*
context
)
:
fContext
(
context
)
{
}
GrImageContextPriv
(
const
GrImageContextPriv
&
)
;
GrImageContextPriv
&
operator
=
(
const
GrImageContextPriv
&
)
;
const
GrImageContextPriv
*
operator
&
(
)
const
;
GrImageContextPriv
*
operator
&
(
)
;
GrImageContext
*
fContext
;
friend
class
GrImageContext
;
}
;
inline
GrImageContextPriv
GrImageContext
:
:
priv
(
)
{
return
GrImageContextPriv
(
this
)
;
}
inline
const
GrImageContextPriv
GrImageContext
:
:
priv
(
)
const
{
return
GrImageContextPriv
(
const_cast
<
GrImageContext
*
>
(
this
)
)
;
}
#
endif
