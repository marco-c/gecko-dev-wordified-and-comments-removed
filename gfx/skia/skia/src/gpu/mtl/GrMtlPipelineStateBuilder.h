#
ifndef
GrMtlPipelineStateBuilder_DEFINED
#
define
GrMtlPipelineStateBuilder_DEFINED
#
include
"
GrPipeline
.
h
"
#
include
"
GrProgramDesc
.
h
"
#
include
"
GrMtlUniformHandler
.
h
"
#
include
"
GrMtlVaryingHandler
.
h
"
#
include
"
SkSLCompiler
.
h
"
#
include
"
glsl
/
GrGLSLProgramBuilder
.
h
"
#
import
<
metal
/
metal
.
h
>
class
GrMtlGpu
;
class
GrMtlPipelineState
;
class
GrMtlPipelineStateBuilder
:
public
GrGLSLProgramBuilder
{
public
:
class
Desc
:
public
GrProgramDesc
{
public
:
static
bool
Build
(
Desc
*
GrRenderTarget
*
const
GrPrimitiveProcessor
&
const
GrPipeline
&
GrPrimitiveType
GrMtlGpu
*
gpu
)
;
size_t
shaderKeyLength
(
)
const
{
return
fShaderKeyLength
;
}
private
:
size_t
fShaderKeyLength
;
typedef
GrProgramDesc
INHERITED
;
}
;
static
GrMtlPipelineState
*
CreatePipelineState
(
GrMtlGpu
*
GrRenderTarget
*
GrSurfaceOrigin
const
GrPrimitiveProcessor
&
const
GrTextureProxy
*
const
primProcProxies
[
]
const
GrPipeline
&
Desc
*
)
;
private
:
GrMtlPipelineStateBuilder
(
GrMtlGpu
*
GrRenderTarget
*
GrSurfaceOrigin
const
GrPipeline
&
const
GrPrimitiveProcessor
&
const
GrTextureProxy
*
const
primProcProxies
[
]
GrProgramDesc
*
)
;
GrMtlPipelineState
*
finalize
(
GrRenderTarget
*
renderTarget
const
GrPrimitiveProcessor
&
primProc
const
GrPipeline
&
pipeline
Desc
*
)
;
const
GrCaps
*
caps
(
)
const
override
;
void
finalizeFragmentOutputColor
(
GrShaderVar
&
outputColor
)
override
;
void
finalizeFragmentSecondaryColor
(
GrShaderVar
&
outputColor
)
override
;
id
<
MTLLibrary
>
createMtlShaderLibrary
(
const
GrGLSLShaderBuilder
&
builder
SkSL
:
:
Program
:
:
Kind
kind
const
SkSL
:
:
Program
:
:
Settings
&
settings
GrProgramDesc
*
desc
)
;
GrGLSLUniformHandler
*
uniformHandler
(
)
override
{
return
&
fUniformHandler
;
}
const
GrGLSLUniformHandler
*
uniformHandler
(
)
const
override
{
return
&
fUniformHandler
;
}
GrGLSLVaryingHandler
*
varyingHandler
(
)
override
{
return
&
fVaryingHandler
;
}
GrMtlGpu
*
fGpu
;
GrMtlUniformHandler
fUniformHandler
;
GrMtlVaryingHandler
fVaryingHandler
;
typedef
GrGLSLProgramBuilder
INHERITED
;
}
;
#
endif
