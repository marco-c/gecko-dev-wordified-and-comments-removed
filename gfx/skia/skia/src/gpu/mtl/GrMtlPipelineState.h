#
ifndef
GrMtlPipelineState_DEFINED
#
define
GrMtlPipelineState_DEFINED
#
include
"
include
/
private
/
GrTypesPriv
.
h
"
#
include
"
src
/
gpu
/
GrStencilSettings
.
h
"
#
include
"
src
/
gpu
/
glsl
/
GrGLSLProgramBuilder
.
h
"
#
include
"
src
/
gpu
/
mtl
/
GrMtlBuffer
.
h
"
#
include
"
src
/
gpu
/
mtl
/
GrMtlPipelineStateDataManager
.
h
"
#
import
<
Metal
/
Metal
.
h
>
class
GrMtlGpu
;
class
GrMtlPipelineStateDataManager
;
class
GrMtlSampler
;
class
GrMtlTexture
;
class
GrPipeline
;
class
GrMtlPipelineState
{
public
:
using
UniformInfoArray
=
GrMtlPipelineStateDataManager
:
:
UniformInfoArray
;
using
UniformHandle
=
GrGLSLProgramDataManager
:
:
UniformHandle
;
GrMtlPipelineState
(
GrMtlGpu
*
gpu
id
<
MTLRenderPipelineState
>
pipelineState
MTLPixelFormat
pixelFormat
const
GrGLSLBuiltinUniformHandles
&
builtinUniformHandles
const
UniformInfoArray
&
uniforms
uint32_t
uniformBufferSize
uint32_t
numSamplers
std
:
:
unique_ptr
<
GrGLSLPrimitiveProcessor
>
geometryProcessor
std
:
:
unique_ptr
<
GrGLSLXferProcessor
>
xferPRocessor
std
:
:
unique_ptr
<
std
:
:
unique_ptr
<
GrGLSLFragmentProcessor
>
[
]
>
fragmentProcessors
int
fFragmentProcessorCnt
)
;
id
<
MTLRenderPipelineState
>
mtlPipelineState
(
)
{
return
fPipelineState
;
}
void
setData
(
const
GrRenderTarget
*
const
GrProgramInfo
&
)
;
void
setDrawState
(
id
<
MTLRenderCommandEncoder
>
const
GrSwizzle
&
outputSwizzle
const
GrXferProcessor
&
)
;
static
void
SetDynamicScissorRectState
(
id
<
MTLRenderCommandEncoder
>
renderCmdEncoder
const
GrRenderTarget
*
renderTarget
GrSurfaceOrigin
rtOrigin
SkIRect
scissorRect
)
;
bool
doesntSampleAttachment
(
const
MTLRenderPassAttachmentDescriptor
*
)
const
;
private
:
struct
RenderTargetState
{
SkISize
fRenderTargetSize
;
GrSurfaceOrigin
fRenderTargetOrigin
;
RenderTargetState
(
)
{
this
-
>
invalidate
(
)
;
}
void
invalidate
(
)
{
fRenderTargetSize
.
fWidth
=
-
1
;
fRenderTargetSize
.
fHeight
=
-
1
;
fRenderTargetOrigin
=
(
GrSurfaceOrigin
)
-
1
;
}
void
getRTAdjustmentVec
(
float
*
destVec
)
{
destVec
[
0
]
=
2
.
f
/
fRenderTargetSize
.
fWidth
;
destVec
[
1
]
=
-
1
.
f
;
if
(
kBottomLeft_GrSurfaceOrigin
=
=
fRenderTargetOrigin
)
{
destVec
[
2
]
=
-
2
.
f
/
fRenderTargetSize
.
fHeight
;
destVec
[
3
]
=
1
.
f
;
}
else
{
destVec
[
2
]
=
2
.
f
/
fRenderTargetSize
.
fHeight
;
destVec
[
3
]
=
-
1
.
f
;
}
}
}
;
void
setRenderTargetState
(
const
GrRenderTarget
*
GrSurfaceOrigin
)
;
void
bind
(
id
<
MTLRenderCommandEncoder
>
)
;
void
setBlendConstants
(
id
<
MTLRenderCommandEncoder
>
const
GrSwizzle
&
const
GrXferProcessor
&
)
;
void
setDepthStencilState
(
id
<
MTLRenderCommandEncoder
>
renderCmdEncoder
)
;
struct
SamplerBindings
{
GrMtlSampler
*
fSampler
;
id
<
MTLTexture
>
fTexture
;
SamplerBindings
(
const
GrSamplerState
&
state
GrTexture
*
texture
GrMtlGpu
*
)
;
}
;
GrMtlGpu
*
fGpu
;
id
<
MTLRenderPipelineState
>
fPipelineState
;
MTLPixelFormat
fPixelFormat
;
RenderTargetState
fRenderTargetState
;
GrGLSLBuiltinUniformHandles
fBuiltinUniformHandles
;
GrStencilSettings
fStencil
;
int
fNumSamplers
;
SkTArray
<
SamplerBindings
>
fSamplerBindings
;
std
:
:
unique_ptr
<
GrGLSLPrimitiveProcessor
>
fGeometryProcessor
;
std
:
:
unique_ptr
<
GrGLSLXferProcessor
>
fXferProcessor
;
std
:
:
unique_ptr
<
std
:
:
unique_ptr
<
GrGLSLFragmentProcessor
>
[
]
>
fFragmentProcessors
;
int
fFragmentProcessorCnt
;
GrMtlPipelineStateDataManager
fDataManager
;
}
;
#
endif
