#
include
"
src
/
gpu
/
mtl
/
GrMtlGpu
.
h
"
#
include
"
src
/
gpu
/
mtl
/
GrMtlSemaphore
.
h
"
#
if
!
__has_feature
(
objc_arc
)
#
error
This
file
must
be
compiled
with
Arc
.
Use
-
fobjc
-
arc
flag
#
endif
sk_sp
<
GrMtlSemaphore
>
GrMtlSemaphore
:
:
Make
(
GrMtlGpu
*
gpu
bool
isOwned
)
{
if
(
available
(
macOS
10
.
14
iOS
12
.
0
*
)
)
{
id
<
MTLEvent
>
event
=
[
gpu
-
>
device
(
)
newEvent
]
;
uint64_t
value
=
1
;
return
sk_sp
<
GrMtlSemaphore
>
(
new
GrMtlSemaphore
(
gpu
event
value
isOwned
)
)
;
}
else
{
return
nullptr
;
}
}
sk_sp
<
GrMtlSemaphore
>
GrMtlSemaphore
:
:
MakeWrapped
(
GrMtlGpu
*
gpu
GrMTLHandle
event
uint64_t
value
GrWrapOwnership
ownership
)
{
if
(
available
(
macOS
10
.
14
iOS
12
.
0
*
)
)
{
id
<
MTLEvent
>
mtlEvent
=
(
__bridge_transfer
id
<
MTLEvent
>
)
event
;
auto
sema
=
sk_sp
<
GrMtlSemaphore
>
(
new
GrMtlSemaphore
(
gpu
mtlEvent
value
kBorrow_GrWrapOwnership
!
=
ownership
)
)
;
return
sema
;
}
else
{
return
nullptr
;
}
}
GrMtlSemaphore
:
:
GrMtlSemaphore
(
GrMtlGpu
*
gpu
id
<
MTLEvent
>
event
uint64_t
value
bool
isOwned
)
:
INHERITED
(
gpu
)
fEvent
(
event
)
fValue
(
value
)
{
isOwned
?
this
-
>
registerWithCache
(
SkBudgeted
:
:
kNo
)
:
this
-
>
registerWithCacheWrapped
(
GrWrapCacheable
:
:
kNo
)
;
}
void
GrMtlSemaphore
:
:
onRelease
(
)
{
if
(
available
(
macOS
10
.
14
iOS
12
.
0
*
)
)
{
fEvent
=
nil
;
}
INHERITED
:
:
onRelease
(
)
;
}
void
GrMtlSemaphore
:
:
onAbandon
(
)
{
if
(
available
(
macOS
10
.
14
iOS
12
.
0
*
)
)
{
fEvent
=
nil
;
}
INHERITED
:
:
onAbandon
(
)
;
}
GrBackendSemaphore
GrMtlSemaphore
:
:
backendSemaphore
(
)
const
{
GrBackendSemaphore
backendSemaphore
;
if
(
available
(
macOS
10
.
14
iOS
12
.
0
*
)
)
{
GrMTLHandle
handle
=
(
__bridge_retained
GrMTLHandle
)
(
fEvent
)
;
backendSemaphore
.
initMetal
(
handle
fValue
)
;
}
return
backendSemaphore
;
}
