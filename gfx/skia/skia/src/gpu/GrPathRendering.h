#
ifndef
GrPathRendering_DEFINED
#
define
GrPathRendering_DEFINED
#
include
"
SkPath
.
h
"
#
include
"
GrPathRange
.
h
"
#
include
"
GrPipeline
.
h
"
class
GrGpu
;
class
GrPath
;
class
GrStencilSettings
;
class
GrStyle
;
struct
SkScalerContextEffects
;
class
SkDescriptor
;
class
SkTypeface
;
class
GrPathRendering
{
public
:
virtual
~
GrPathRendering
(
)
{
}
typedef
GrPathRange
:
:
PathIndexType
PathIndexType
;
enum
PathTransformType
{
kNone_PathTransformType
kTranslateX_PathTransformType
kTranslateY_PathTransformType
kTranslate_PathTransformType
kAffine_PathTransformType
kLast_PathTransformType
=
kAffine_PathTransformType
}
;
static
inline
int
PathTransformSize
(
PathTransformType
type
)
{
switch
(
type
)
{
case
kNone_PathTransformType
:
return
0
;
case
kTranslateX_PathTransformType
:
case
kTranslateY_PathTransformType
:
return
1
;
case
kTranslate_PathTransformType
:
return
2
;
case
kAffine_PathTransformType
:
return
6
;
default
:
SK_ABORT
(
"
Unknown
path
transform
type
"
)
;
return
0
;
}
}
enum
FillType
{
kWinding_FillType
kEvenOdd_FillType
}
;
static
const
GrUserStencilSettings
&
GetStencilPassSettings
(
FillType
)
;
virtual
sk_sp
<
GrPath
>
createPath
(
const
SkPath
&
const
GrStyle
&
)
=
0
;
virtual
sk_sp
<
GrPathRange
>
createPathRange
(
GrPathRange
:
:
PathGenerator
*
const
GrStyle
&
)
=
0
;
sk_sp
<
GrPathRange
>
createGlyphs
(
const
SkTypeface
*
const
SkScalerContextEffects
&
const
SkDescriptor
*
const
GrStyle
&
)
;
struct
StencilPathArgs
{
StencilPathArgs
(
bool
useHWAA
GrRenderTargetProxy
*
proxy
const
SkMatrix
*
viewMatrix
const
GrScissorState
*
scissor
const
GrStencilSettings
*
stencil
)
:
fUseHWAA
(
useHWAA
)
fProxy
(
proxy
)
fViewMatrix
(
viewMatrix
)
fScissor
(
scissor
)
fStencil
(
stencil
)
{
}
bool
fUseHWAA
;
GrRenderTargetProxy
*
fProxy
;
const
SkMatrix
*
fViewMatrix
;
const
GrScissorState
*
fScissor
;
const
GrStencilSettings
*
fStencil
;
}
;
void
stencilPath
(
const
StencilPathArgs
&
args
const
GrPath
*
path
)
;
void
drawPath
(
const
GrPipeline
&
pipeline
const
GrPrimitiveProcessor
&
primProc
const
GrStencilSettings
&
stencilPassSettings
const
GrPath
*
path
)
;
void
drawPaths
(
const
GrPipeline
&
pipeline
const
GrPrimitiveProcessor
&
primProc
const
GrStencilSettings
&
stencilPassSettings
const
GrPathRange
*
pathRange
const
void
*
indices
PathIndexType
indexType
const
float
transformValues
[
]
PathTransformType
transformType
int
count
)
;
protected
:
GrPathRendering
(
GrGpu
*
gpu
)
:
fGpu
(
gpu
)
{
}
virtual
void
onStencilPath
(
const
StencilPathArgs
&
const
GrPath
*
)
=
0
;
virtual
void
onDrawPath
(
const
GrPipeline
&
const
GrPrimitiveProcessor
&
const
GrStencilSettings
&
const
GrPath
*
)
=
0
;
virtual
void
onDrawPaths
(
const
GrPipeline
&
const
GrPrimitiveProcessor
&
const
GrStencilSettings
&
const
GrPathRange
*
const
void
*
indices
PathIndexType
const
float
transformValues
[
]
PathTransformType
int
count
)
=
0
;
GrGpu
*
fGpu
;
private
:
GrPathRendering
&
operator
=
(
const
GrPathRendering
&
)
;
}
;
#
endif
