#
include
"
src
/
gpu
/
geometry
/
GrQuadUtils
.
h
"
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
include
/
private
/
GrTypesPriv
.
h
"
#
include
"
include
/
private
/
SkVx
.
h
"
#
include
"
src
/
gpu
/
geometry
/
GrQuad
.
h
"
using
V4f
=
skvx
:
:
Vec
<
4
float
>
;
using
M4f
=
skvx
:
:
Vec
<
4
int32_t
>
;
static
void
interpolate_local
(
float
alpha
int
v0
int
v1
int
v2
int
v3
float
lx
[
4
]
float
ly
[
4
]
float
lw
[
4
]
)
{
SkASSERT
(
v0
>
=
0
&
&
v0
<
4
)
;
SkASSERT
(
v1
>
=
0
&
&
v1
<
4
)
;
SkASSERT
(
v2
>
=
0
&
&
v2
<
4
)
;
SkASSERT
(
v3
>
=
0
&
&
v3
<
4
)
;
float
beta
=
1
.
f
-
alpha
;
lx
[
v0
]
=
alpha
*
lx
[
v0
]
+
beta
*
lx
[
v2
]
;
ly
[
v0
]
=
alpha
*
ly
[
v0
]
+
beta
*
ly
[
v2
]
;
lw
[
v0
]
=
alpha
*
lw
[
v0
]
+
beta
*
lw
[
v2
]
;
lx
[
v1
]
=
alpha
*
lx
[
v1
]
+
beta
*
lx
[
v3
]
;
ly
[
v1
]
=
alpha
*
ly
[
v1
]
+
beta
*
ly
[
v3
]
;
lw
[
v1
]
=
alpha
*
lw
[
v1
]
+
beta
*
lw
[
v3
]
;
}
static
bool
crop_rect_edge
(
const
SkRect
&
clipDevRect
int
v0
int
v1
int
v2
int
v3
float
x
[
4
]
float
y
[
4
]
float
lx
[
4
]
float
ly
[
4
]
float
lw
[
4
]
)
{
SkASSERT
(
v0
>
=
0
&
&
v0
<
4
)
;
SkASSERT
(
v1
>
=
0
&
&
v1
<
4
)
;
SkASSERT
(
v2
>
=
0
&
&
v2
<
4
)
;
SkASSERT
(
v3
>
=
0
&
&
v3
<
4
)
;
if
(
SkScalarNearlyEqual
(
x
[
v0
]
x
[
v1
]
)
)
{
if
(
x
[
v0
]
<
clipDevRect
.
fLeft
&
&
x
[
v2
]
>
=
clipDevRect
.
fLeft
)
{
if
(
lx
)
{
float
alpha
=
(
x
[
v2
]
-
clipDevRect
.
fLeft
)
/
(
x
[
v2
]
-
x
[
v0
]
)
;
interpolate_local
(
alpha
v0
v1
v2
v3
lx
ly
lw
)
;
}
x
[
v0
]
=
clipDevRect
.
fLeft
;
x
[
v1
]
=
clipDevRect
.
fLeft
;
return
true
;
}
else
if
(
x
[
v0
]
>
clipDevRect
.
fRight
&
&
x
[
v2
]
<
=
clipDevRect
.
fRight
)
{
if
(
lx
)
{
float
alpha
=
(
clipDevRect
.
fRight
-
x
[
v2
]
)
/
(
x
[
v0
]
-
x
[
v2
]
)
;
interpolate_local
(
alpha
v0
v1
v2
v3
lx
ly
lw
)
;
}
x
[
v0
]
=
clipDevRect
.
fRight
;
x
[
v1
]
=
clipDevRect
.
fRight
;
return
true
;
}
}
else
{
SkASSERT
(
SkScalarNearlyEqual
(
y
[
v0
]
y
[
v1
]
)
)
;
if
(
y
[
v0
]
<
clipDevRect
.
fTop
&
&
y
[
v2
]
>
=
clipDevRect
.
fTop
)
{
if
(
lx
)
{
float
alpha
=
(
y
[
v2
]
-
clipDevRect
.
fTop
)
/
(
y
[
v2
]
-
y
[
v0
]
)
;
interpolate_local
(
alpha
v0
v1
v2
v3
lx
ly
lw
)
;
}
y
[
v0
]
=
clipDevRect
.
fTop
;
y
[
v1
]
=
clipDevRect
.
fTop
;
return
true
;
}
else
if
(
y
[
v0
]
>
clipDevRect
.
fBottom
&
&
y
[
v2
]
<
=
clipDevRect
.
fBottom
)
{
if
(
lx
)
{
float
alpha
=
(
clipDevRect
.
fBottom
-
y
[
v2
]
)
/
(
y
[
v0
]
-
y
[
v2
]
)
;
interpolate_local
(
alpha
v0
v1
v2
v3
lx
ly
lw
)
;
}
y
[
v0
]
=
clipDevRect
.
fBottom
;
y
[
v1
]
=
clipDevRect
.
fBottom
;
return
true
;
}
}
return
false
;
}
static
GrQuadAAFlags
crop_rect
(
const
SkRect
&
clipDevRect
float
x
[
4
]
float
y
[
4
]
float
lx
[
4
]
float
ly
[
4
]
float
lw
[
4
]
)
{
GrQuadAAFlags
clipEdgeFlags
=
GrQuadAAFlags
:
:
kNone
;
if
(
crop_rect_edge
(
clipDevRect
0
1
2
3
x
y
lx
ly
lw
)
)
{
clipEdgeFlags
|
=
GrQuadAAFlags
:
:
kLeft
;
}
if
(
crop_rect_edge
(
clipDevRect
0
2
1
3
x
y
lx
ly
lw
)
)
{
clipEdgeFlags
|
=
GrQuadAAFlags
:
:
kTop
;
}
if
(
crop_rect_edge
(
clipDevRect
2
3
0
1
x
y
lx
ly
lw
)
)
{
clipEdgeFlags
|
=
GrQuadAAFlags
:
:
kRight
;
}
if
(
crop_rect_edge
(
clipDevRect
1
3
0
2
x
y
lx
ly
lw
)
)
{
clipEdgeFlags
|
=
GrQuadAAFlags
:
:
kBottom
;
}
return
clipEdgeFlags
;
}
static
GrQuadAAFlags
crop_simple_rect
(
const
SkRect
&
clipDevRect
float
x
[
4
]
float
y
[
4
]
float
lx
[
4
]
float
ly
[
4
]
)
{
GrQuadAAFlags
clipEdgeFlags
=
GrQuadAAFlags
:
:
kNone
;
const
SkScalar
dx
=
lx
?
(
lx
[
2
]
-
lx
[
0
]
)
/
(
x
[
2
]
-
x
[
0
]
)
:
0
.
f
;
const
SkScalar
dy
=
ly
?
(
ly
[
1
]
-
ly
[
0
]
)
/
(
y
[
1
]
-
y
[
0
]
)
:
0
.
f
;
if
(
clipDevRect
.
fLeft
>
x
[
0
]
)
{
if
(
lx
)
{
lx
[
0
]
+
=
(
clipDevRect
.
fLeft
-
x
[
0
]
)
*
dx
;
lx
[
1
]
=
lx
[
0
]
;
}
x
[
0
]
=
clipDevRect
.
fLeft
;
x
[
1
]
=
clipDevRect
.
fLeft
;
clipEdgeFlags
|
=
GrQuadAAFlags
:
:
kLeft
;
}
if
(
clipDevRect
.
fTop
>
y
[
0
]
)
{
if
(
ly
)
{
ly
[
0
]
+
=
(
clipDevRect
.
fTop
-
y
[
0
]
)
*
dy
;
ly
[
2
]
=
ly
[
0
]
;
}
y
[
0
]
=
clipDevRect
.
fTop
;
y
[
2
]
=
clipDevRect
.
fTop
;
clipEdgeFlags
|
=
GrQuadAAFlags
:
:
kTop
;
}
if
(
clipDevRect
.
fRight
<
x
[
2
]
)
{
if
(
lx
)
{
lx
[
2
]
-
=
(
x
[
2
]
-
clipDevRect
.
fRight
)
*
dx
;
lx
[
3
]
=
lx
[
2
]
;
}
x
[
2
]
=
clipDevRect
.
fRight
;
x
[
3
]
=
clipDevRect
.
fRight
;
clipEdgeFlags
|
=
GrQuadAAFlags
:
:
kRight
;
}
if
(
clipDevRect
.
fBottom
<
y
[
1
]
)
{
if
(
ly
)
{
ly
[
1
]
-
=
(
y
[
1
]
-
clipDevRect
.
fBottom
)
*
dy
;
ly
[
3
]
=
ly
[
1
]
;
}
y
[
1
]
=
clipDevRect
.
fBottom
;
y
[
3
]
=
clipDevRect
.
fBottom
;
clipEdgeFlags
|
=
GrQuadAAFlags
:
:
kBottom
;
}
return
clipEdgeFlags
;
}
static
bool
is_simple_rect
(
const
GrQuad
&
quad
)
{
if
(
quad
.
quadType
(
)
!
=
GrQuad
:
:
Type
:
:
kAxisAligned
)
{
return
false
;
}
return
(
(
quad
.
x
(
0
)
+
SK_ScalarNearlyZero
)
<
quad
.
x
(
2
)
)
&
&
(
(
quad
.
y
(
0
)
+
SK_ScalarNearlyZero
)
<
quad
.
y
(
1
)
)
;
}
static
void
barycentric_coords
(
float
x0
float
y0
float
x1
float
y1
float
x2
float
y2
const
V4f
&
testX
const
V4f
&
testY
V4f
*
u
V4f
*
v
V4f
*
w
)
{
float
v0x
=
x2
-
x0
;
float
v0y
=
y2
-
y0
;
float
v1x
=
x1
-
x0
;
float
v1y
=
y1
-
y0
;
V4f
v2x
=
testX
-
x0
;
V4f
v2y
=
testY
-
y0
;
float
dot00
=
v0x
*
v0x
+
v0y
*
v0y
;
float
dot01
=
v0x
*
v1x
+
v0y
*
v1y
;
V4f
dot02
=
v0x
*
v2x
+
v0y
*
v2y
;
float
dot11
=
v1x
*
v1x
+
v1y
*
v1y
;
V4f
dot12
=
v1x
*
v2x
+
v1y
*
v2y
;
float
invDenom
=
sk_ieee_float_divide
(
1
.
f
dot00
*
dot11
-
dot01
*
dot01
)
;
*
u
=
(
dot11
*
dot02
-
dot01
*
dot12
)
*
invDenom
;
*
v
=
(
dot00
*
dot12
-
dot01
*
dot02
)
*
invDenom
;
*
w
=
1
.
f
-
*
u
-
*
v
;
}
static
M4f
inside_triangle
(
const
V4f
&
u
const
V4f
&
v
const
V4f
&
w
)
{
return
(
(
u
>
=
0
.
f
)
&
(
u
<
=
1
.
f
)
)
&
(
(
v
>
=
0
.
f
)
&
(
v
<
=
1
.
f
)
)
&
(
(
w
>
=
0
.
f
)
&
(
w
<
=
1
.
f
)
)
;
}
namespace
GrQuadUtils
{
void
ResolveAAType
(
GrAAType
requestedAAType
GrQuadAAFlags
requestedEdgeFlags
const
GrQuad
&
quad
GrAAType
*
outAAType
GrQuadAAFlags
*
outEdgeFlags
)
{
*
outAAType
=
requestedAAType
;
*
outEdgeFlags
=
requestedEdgeFlags
;
switch
(
requestedAAType
)
{
case
GrAAType
:
:
kCoverage
:
if
(
requestedEdgeFlags
=
=
GrQuadAAFlags
:
:
kNone
)
{
*
outAAType
=
GrAAType
:
:
kNone
;
}
else
{
if
(
quad
.
quadType
(
)
=
=
GrQuad
:
:
Type
:
:
kAxisAligned
&
&
!
quad
.
aaHasEffectOnRect
(
)
)
{
*
outAAType
=
GrAAType
:
:
kNone
;
*
outEdgeFlags
=
GrQuadAAFlags
:
:
kNone
;
}
}
break
;
case
GrAAType
:
:
kNone
:
*
outEdgeFlags
=
GrQuadAAFlags
:
:
kNone
;
break
;
case
GrAAType
:
:
kMSAA
:
*
outEdgeFlags
=
GrQuadAAFlags
:
:
kAll
;
break
;
}
}
bool
CropToRect
(
const
SkRect
&
cropRect
GrAA
cropAA
GrQuadAAFlags
*
edgeFlags
GrQuad
*
quad
GrQuad
*
local
)
{
SkASSERT
(
quad
-
>
isFinite
(
)
)
;
if
(
quad
-
>
quadType
(
)
=
=
GrQuad
:
:
Type
:
:
kAxisAligned
)
{
GrQuadAAFlags
clippedEdges
;
if
(
local
)
{
if
(
is_simple_rect
(
*
quad
)
&
&
is_simple_rect
(
*
local
)
)
{
clippedEdges
=
crop_simple_rect
(
cropRect
quad
-
>
xs
(
)
quad
-
>
ys
(
)
local
-
>
xs
(
)
local
-
>
ys
(
)
)
;
}
else
{
clippedEdges
=
crop_rect
(
cropRect
quad
-
>
xs
(
)
quad
-
>
ys
(
)
local
-
>
xs
(
)
local
-
>
ys
(
)
local
-
>
ws
(
)
)
;
}
}
else
{
if
(
is_simple_rect
(
*
quad
)
)
{
clippedEdges
=
crop_simple_rect
(
cropRect
quad
-
>
xs
(
)
quad
-
>
ys
(
)
nullptr
nullptr
)
;
}
else
{
clippedEdges
=
crop_rect
(
cropRect
quad
-
>
xs
(
)
quad
-
>
ys
(
)
nullptr
nullptr
nullptr
)
;
}
}
if
(
cropAA
=
=
GrAA
:
:
kYes
)
{
*
edgeFlags
|
=
clippedEdges
;
}
else
{
*
edgeFlags
&
=
~
clippedEdges
;
}
return
true
;
}
if
(
local
)
{
return
false
;
}
V4f
devX
=
quad
-
>
x4f
(
)
;
V4f
devY
=
quad
-
>
y4f
(
)
;
V4f
devIW
=
quad
-
>
iw4f
(
)
;
if
(
quad
-
>
quadType
(
)
=
=
GrQuad
:
:
Type
:
:
kPerspective
)
{
devX
*
=
devIW
;
devY
*
=
devIW
;
}
V4f
clipX
=
{
cropRect
.
fLeft
cropRect
.
fLeft
cropRect
.
fRight
cropRect
.
fRight
}
;
V4f
clipY
=
{
cropRect
.
fTop
cropRect
.
fBottom
cropRect
.
fTop
cropRect
.
fBottom
}
;
V4f
u1
v1
w1
;
barycentric_coords
(
devX
[
0
]
devY
[
0
]
devX
[
1
]
devY
[
1
]
devX
[
2
]
devY
[
2
]
clipX
clipY
&
u1
&
v1
&
w1
)
;
V4f
u2
v2
w2
;
barycentric_coords
(
devX
[
1
]
devY
[
1
]
devX
[
3
]
devY
[
3
]
devX
[
2
]
devY
[
2
]
clipX
clipY
&
u2
&
v2
&
w2
)
;
M4f
inTri1
=
inside_triangle
(
u1
v1
w1
)
;
M4f
inTri2
=
inside_triangle
(
u2
v2
w2
)
;
if
(
all
(
inTri1
|
inTri2
)
)
{
clipX
.
store
(
quad
-
>
xs
(
)
)
;
clipY
.
store
(
quad
-
>
ys
(
)
)
;
quad
-
>
ws
(
)
[
0
]
=
1
.
f
;
quad
-
>
ws
(
)
[
1
]
=
1
.
f
;
quad
-
>
ws
(
)
[
2
]
=
1
.
f
;
quad
-
>
ws
(
)
[
3
]
=
1
.
f
;
quad
-
>
setQuadType
(
GrQuad
:
:
Type
:
:
kAxisAligned
)
;
*
edgeFlags
=
cropAA
=
=
GrAA
:
:
kYes
?
GrQuadAAFlags
:
:
kAll
:
GrQuadAAFlags
:
:
kNone
;
return
true
;
}
return
false
;
}
}
;
