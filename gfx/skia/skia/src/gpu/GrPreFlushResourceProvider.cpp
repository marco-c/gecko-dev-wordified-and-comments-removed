#
include
"
GrPreFlushResourceProvider
.
h
"
#
include
"
GrDrawingManager
.
h
"
#
include
"
GrSurfaceProxy
.
h
"
sk_sp
<
GrRenderTargetContext
>
GrPreFlushResourceProvider
:
:
makeRenderTargetContext
(
const
GrSurfaceDesc
&
desc
sk_sp
<
SkColorSpace
>
colorSpace
const
SkSurfaceProps
*
props
)
{
GrSurfaceDesc
tmpDesc
=
desc
;
tmpDesc
.
fFlags
|
=
kRenderTarget_GrSurfaceFlag
;
sk_sp
<
GrSurfaceProxy
>
proxy
=
GrSurfaceProxy
:
:
MakeDeferred
(
fDrawingMgr
-
>
getContext
(
)
-
>
resourceProvider
(
)
tmpDesc
SkBackingFit
:
:
kExact
SkBudgeted
:
:
kYes
GrResourceProvider
:
:
kNoPendingIO_Flag
)
;
if
(
!
proxy
-
>
asRenderTargetProxy
(
)
)
{
return
nullptr
;
}
sk_sp
<
GrRenderTargetOpList
>
opList
(
new
GrRenderTargetOpList
(
proxy
-
>
asRenderTargetProxy
(
)
fDrawingMgr
-
>
fContext
-
>
getGpu
(
)
fDrawingMgr
-
>
fContext
-
>
resourceProvider
(
)
fDrawingMgr
-
>
fContext
-
>
getAuditTrail
(
)
fDrawingMgr
-
>
fOptionsForOpLists
)
)
;
proxy
-
>
setLastOpList
(
opList
.
get
(
)
)
;
sk_sp
<
GrRenderTargetContext
>
renderTargetContext
(
fDrawingMgr
-
>
makeRenderTargetContext
(
std
:
:
move
(
proxy
)
std
:
:
move
(
colorSpace
)
props
)
)
;
if
(
!
renderTargetContext
)
{
return
nullptr
;
}
renderTargetContext
-
>
discard
(
)
;
return
renderTargetContext
;
}
sk_sp
<
GrRenderTargetContext
>
GrPreFlushResourceProvider
:
:
makeRenderTargetContext
(
sk_sp
<
GrSurfaceProxy
>
proxy
sk_sp
<
SkColorSpace
>
colorSpace
const
SkSurfaceProps
*
props
)
{
sk_sp
<
GrRenderTargetOpList
>
opList
(
new
GrRenderTargetOpList
(
proxy
-
>
asRenderTargetProxy
(
)
fDrawingMgr
-
>
fContext
-
>
getGpu
(
)
fDrawingMgr
-
>
fContext
-
>
resourceProvider
(
)
fDrawingMgr
-
>
fContext
-
>
getAuditTrail
(
)
fDrawingMgr
-
>
fOptionsForOpLists
)
)
;
proxy
-
>
setLastOpList
(
opList
.
get
(
)
)
;
sk_sp
<
GrRenderTargetContext
>
renderTargetContext
(
fDrawingMgr
-
>
makeRenderTargetContext
(
std
:
:
move
(
proxy
)
std
:
:
move
(
colorSpace
)
props
)
)
;
if
(
!
renderTargetContext
)
{
return
nullptr
;
}
renderTargetContext
-
>
discard
(
)
;
return
renderTargetContext
;
}
