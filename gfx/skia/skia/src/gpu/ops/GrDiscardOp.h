#
ifndef
GrDiscardOp_DEFINED
#
define
GrDiscardOp_DEFINED
#
include
"
GrGpu
.
h
"
#
include
"
GrOp
.
h
"
#
include
"
GrOpFlushState
.
h
"
#
include
"
GrRenderTarget
.
h
"
class
GrDiscardOp
final
:
public
GrOp
{
public
:
DEFINE_OP_CLASS_ID
static
std
:
:
unique_ptr
<
GrOp
>
Make
(
GrRenderTargetContext
*
rtc
)
{
if
(
!
rtc
-
>
accessRenderTarget
(
)
)
{
return
nullptr
;
}
return
std
:
:
unique_ptr
<
GrOp
>
(
new
GrDiscardOp
(
rtc
)
)
;
}
const
char
*
name
(
)
const
override
{
return
"
Discard
"
;
}
SkString
dumpInfo
(
)
const
override
{
SkString
string
;
string
.
printf
(
"
rtID
:
%
d
proxyID
:
%
d
"
fRenderTarget
.
get
(
)
-
>
uniqueID
(
)
.
asUInt
(
)
fProxyUniqueID
.
asUInt
(
)
)
;
string
.
append
(
INHERITED
:
:
dumpInfo
(
)
)
;
return
string
;
}
private
:
GrDiscardOp
(
GrRenderTargetContext
*
rtc
)
:
INHERITED
(
ClassID
(
)
)
fProxyUniqueID
(
rtc
-
>
asSurfaceProxy
(
)
-
>
uniqueID
(
)
)
{
this
-
>
setBounds
(
SkRect
:
:
MakeIWH
(
rtc
-
>
width
(
)
rtc
-
>
height
(
)
)
HasAABloat
:
:
kNo
IsZeroArea
:
:
kNo
)
;
fRenderTarget
.
reset
(
rtc
-
>
accessRenderTarget
(
)
)
;
}
bool
onCombineIfPossible
(
GrOp
*
that
const
GrCaps
&
caps
)
override
{
return
fRenderTarget
.
get
(
)
=
=
that
-
>
cast
<
GrDiscardOp
>
(
)
-
>
fRenderTarget
.
get
(
)
;
}
void
onPrepare
(
GrOpFlushState
*
)
override
{
}
void
onExecute
(
GrOpFlushState
*
state
)
override
{
state
-
>
commandBuffer
(
)
-
>
discard
(
fRenderTarget
.
get
(
)
)
;
}
GrSurfaceProxy
:
:
UniqueID
fProxyUniqueID
;
GrPendingIOResource
<
GrRenderTarget
kWrite_GrIOType
>
fRenderTarget
;
typedef
GrOp
INHERITED
;
}
;
#
endif
