#
include
"
GrCopySurfaceOp
.
h
"
#
include
"
GrContext
.
h
"
#
include
"
GrContextPriv
.
h
"
#
include
"
GrGpu
.
h
"
#
include
"
GrMemoryPool
.
h
"
static
bool
clip_src_rect_and_dst_point
(
const
GrSurfaceProxy
*
dst
const
GrSurfaceProxy
*
src
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
SkIRect
*
clippedSrcRect
SkIPoint
*
clippedDstPoint
)
{
*
clippedSrcRect
=
srcRect
;
*
clippedDstPoint
=
dstPoint
;
if
(
clippedSrcRect
-
>
fLeft
<
0
)
{
clippedDstPoint
-
>
fX
-
=
clippedSrcRect
-
>
fLeft
;
clippedSrcRect
-
>
fLeft
=
0
;
}
if
(
clippedDstPoint
-
>
fX
<
0
)
{
clippedSrcRect
-
>
fLeft
-
=
clippedDstPoint
-
>
fX
;
clippedDstPoint
-
>
fX
=
0
;
}
if
(
clippedSrcRect
-
>
fTop
<
0
)
{
clippedDstPoint
-
>
fY
-
=
clippedSrcRect
-
>
fTop
;
clippedSrcRect
-
>
fTop
=
0
;
}
if
(
clippedDstPoint
-
>
fY
<
0
)
{
clippedSrcRect
-
>
fTop
-
=
clippedDstPoint
-
>
fY
;
clippedDstPoint
-
>
fY
=
0
;
}
if
(
clippedSrcRect
-
>
fRight
>
src
-
>
width
(
)
)
{
clippedSrcRect
-
>
fRight
=
src
-
>
width
(
)
;
}
if
(
clippedDstPoint
-
>
fX
+
clippedSrcRect
-
>
width
(
)
>
dst
-
>
width
(
)
)
{
clippedSrcRect
-
>
fRight
=
clippedSrcRect
-
>
fLeft
+
dst
-
>
width
(
)
-
clippedDstPoint
-
>
fX
;
}
if
(
clippedSrcRect
-
>
fBottom
>
src
-
>
height
(
)
)
{
clippedSrcRect
-
>
fBottom
=
src
-
>
height
(
)
;
}
if
(
clippedDstPoint
-
>
fY
+
clippedSrcRect
-
>
height
(
)
>
dst
-
>
height
(
)
)
{
clippedSrcRect
-
>
fBottom
=
clippedSrcRect
-
>
fTop
+
dst
-
>
height
(
)
-
clippedDstPoint
-
>
fY
;
}
return
!
clippedSrcRect
-
>
isEmpty
(
)
;
}
std
:
:
unique_ptr
<
GrOp
>
GrCopySurfaceOp
:
:
Make
(
GrContext
*
context
GrSurfaceProxy
*
dstProxy
GrSurfaceProxy
*
srcProxy
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
{
SkASSERT
(
dstProxy
)
;
SkASSERT
(
srcProxy
)
;
SkIRect
clippedSrcRect
;
SkIPoint
clippedDstPoint
;
if
(
!
clip_src_rect_and_dst_point
(
dstProxy
srcProxy
srcRect
dstPoint
&
clippedSrcRect
&
clippedDstPoint
)
)
{
return
nullptr
;
}
GrOpMemoryPool
*
pool
=
context
-
>
contextPriv
(
)
.
opMemoryPool
(
)
;
return
pool
-
>
allocate
<
GrCopySurfaceOp
>
(
dstProxy
srcProxy
clippedSrcRect
clippedDstPoint
)
;
}
void
GrCopySurfaceOp
:
:
onExecute
(
GrOpFlushState
*
state
)
{
if
(
!
fSrc
.
get
(
)
-
>
instantiate
(
state
-
>
resourceProvider
(
)
)
)
{
return
;
}
state
-
>
commandBuffer
(
)
-
>
copy
(
fSrc
.
get
(
)
-
>
peekSurface
(
)
fSrc
.
get
(
)
-
>
origin
(
)
fSrcRect
fDstPoint
)
;
}
