#
ifndef
GrOp_DEFINED
#
define
GrOp_DEFINED
#
include
"
.
.
/
private
/
SkAtomics
.
h
"
#
include
"
GrGpuResource
.
h
"
#
include
"
GrNonAtomicRef
.
h
"
#
include
"
GrTracing
.
h
"
#
include
"
GrXferProcessor
.
h
"
#
include
"
SkMatrix
.
h
"
#
include
"
SkRect
.
h
"
#
include
"
SkString
.
h
"
#
include
<
new
>
class
GrCaps
;
class
GrGpuCommandBuffer
;
class
GrOpFlushState
;
class
GrRenderTargetOpList
;
#
define
GR_OP_SPEW
0
#
if
GR_OP_SPEW
#
define
GrOP_SPEW
(
code
)
code
#
define
GrOP_INFO
(
.
.
.
)
SkDebugf
(
__VA_ARGS__
)
#
else
#
define
GrOP_SPEW
(
code
)
#
define
GrOP_INFO
(
.
.
.
)
#
endif
#
define
GR_FLUSH_TIME_OP_SPEW
0
#
define
DEFINE_OP_CLASS_ID
\
static
uint32_t
ClassID
(
)
{
\
static
uint32_t
kClassID
=
GenOpClassID
(
)
;
\
return
kClassID
;
\
}
class
GrOp
:
private
SkNoncopyable
{
public
:
virtual
~
GrOp
(
)
;
virtual
const
char
*
name
(
)
const
=
0
;
typedef
std
:
:
function
<
void
(
GrSurfaceProxy
*
)
>
VisitProxyFunc
;
virtual
void
visitProxies
(
const
VisitProxyFunc
&
)
const
{
}
enum
class
CombineResult
{
kMerged
kMayChain
kCannotCombine
}
;
CombineResult
combineIfPossible
(
GrOp
*
that
const
GrCaps
&
caps
)
;
const
SkRect
&
bounds
(
)
const
{
SkASSERT
(
kUninitialized_BoundsFlag
!
=
fBoundsFlags
)
;
return
fBounds
;
}
void
setClippedBounds
(
const
SkRect
&
clippedBounds
)
{
fBounds
=
clippedBounds
;
fBoundsFlags
=
0
;
}
bool
hasAABloat
(
)
const
{
SkASSERT
(
fBoundsFlags
!
=
kUninitialized_BoundsFlag
)
;
return
SkToBool
(
fBoundsFlags
&
kAABloat_BoundsFlag
)
;
}
bool
hasZeroArea
(
)
const
{
SkASSERT
(
fBoundsFlags
!
=
kUninitialized_BoundsFlag
)
;
return
SkToBool
(
fBoundsFlags
&
kZeroArea_BoundsFlag
)
;
}
#
ifdef
SK_DEBUG
void
*
operator
new
(
size_t
size
)
;
void
operator
delete
(
void
*
target
)
;
void
*
operator
new
(
size_t
size
void
*
placement
)
{
return
:
:
operator
new
(
size
placement
)
;
}
void
operator
delete
(
void
*
target
void
*
placement
)
{
:
:
operator
delete
(
target
placement
)
;
}
#
endif
template
<
typename
T
>
const
T
&
cast
(
)
const
{
SkASSERT
(
T
:
:
ClassID
(
)
=
=
this
-
>
classID
(
)
)
;
return
*
static_cast
<
const
T
*
>
(
this
)
;
}
template
<
typename
T
>
T
*
cast
(
)
{
SkASSERT
(
T
:
:
ClassID
(
)
=
=
this
-
>
classID
(
)
)
;
return
static_cast
<
T
*
>
(
this
)
;
}
uint32_t
classID
(
)
const
{
SkASSERT
(
kIllegalOpID
!
=
fClassID
)
;
return
fClassID
;
}
uint32_t
uniqueID
(
)
const
{
if
(
kIllegalOpID
=
=
fUniqueID
)
{
fUniqueID
=
GenOpID
(
)
;
}
return
fUniqueID
;
}
void
prepare
(
GrOpFlushState
*
state
)
{
this
-
>
onPrepare
(
state
)
;
}
void
execute
(
GrOpFlushState
*
state
)
{
TRACE_EVENT0
(
"
skia
"
name
(
)
)
;
this
-
>
onExecute
(
state
)
;
}
virtual
SkString
dumpInfo
(
)
const
{
SkString
string
;
string
.
appendf
(
"
OpBounds
:
[
L
:
%
.
2f
T
:
%
.
2f
R
:
%
.
2f
B
:
%
.
2f
]
\
n
"
fBounds
.
fLeft
fBounds
.
fTop
fBounds
.
fRight
fBounds
.
fBottom
)
;
return
string
;
}
template
<
typename
OpSubclass
>
class
ChainRange
{
private
:
class
Iter
{
public
:
explicit
Iter
(
const
GrOp
*
head
)
:
fCurr
(
head
)
{
}
inline
Iter
&
operator
+
+
(
)
{
return
*
this
=
Iter
(
fCurr
-
>
nextInChain
(
)
)
;
}
const
OpSubclass
&
operator
*
(
)
const
{
return
fCurr
-
>
cast
<
OpSubclass
>
(
)
;
}
bool
operator
!
=
(
const
Iter
&
that
)
const
{
return
fCurr
!
=
that
.
fCurr
;
}
private
:
const
GrOp
*
fCurr
;
}
;
const
GrOp
*
fHead
;
public
:
explicit
ChainRange
(
const
GrOp
*
head
)
:
fHead
(
head
)
{
}
Iter
begin
(
)
{
return
Iter
(
fHead
)
;
}
Iter
end
(
)
{
return
Iter
(
nullptr
)
;
}
}
;
void
setNextInChain
(
GrOp
*
)
;
bool
isChainHead
(
)
const
{
return
!
fChainHead
|
|
(
fChainHead
=
=
this
)
;
}
const
GrOp
*
chainHead
(
)
const
{
return
fChainHead
?
fChainHead
:
this
;
}
bool
isChainTail
(
)
const
{
return
!
fNextInChain
;
}
bool
isChained
(
)
const
{
return
SkToBool
(
fChainHead
)
;
}
const
GrOp
*
nextInChain
(
)
const
{
return
fNextInChain
;
}
protected
:
GrOp
(
uint32_t
classID
)
;
enum
class
HasAABloat
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
class
IsZeroArea
:
bool
{
kNo
=
false
kYes
=
true
}
;
void
setBounds
(
const
SkRect
&
newBounds
HasAABloat
aabloat
IsZeroArea
zeroArea
)
{
fBounds
=
newBounds
;
this
-
>
setBoundsFlags
(
aabloat
zeroArea
)
;
}
void
setTransformedBounds
(
const
SkRect
&
srcBounds
const
SkMatrix
&
m
HasAABloat
aabloat
IsZeroArea
zeroArea
)
{
m
.
mapRect
(
&
fBounds
srcBounds
)
;
this
-
>
setBoundsFlags
(
aabloat
zeroArea
)
;
}
void
makeFullScreen
(
GrSurfaceProxy
*
proxy
)
{
this
-
>
setBounds
(
SkRect
:
:
MakeIWH
(
proxy
-
>
width
(
)
proxy
-
>
height
(
)
)
HasAABloat
:
:
kNo
IsZeroArea
:
:
kNo
)
;
}
void
joinBounds
(
const
GrOp
&
that
)
{
if
(
that
.
hasAABloat
(
)
)
{
fBoundsFlags
|
=
kAABloat_BoundsFlag
;
}
if
(
that
.
hasZeroArea
(
)
)
{
fBoundsFlags
|
=
kZeroArea_BoundsFlag
;
}
return
fBounds
.
joinPossiblyEmptyRect
(
that
.
fBounds
)
;
}
void
replaceBounds
(
const
GrOp
&
that
)
{
fBounds
=
that
.
fBounds
;
fBoundsFlags
=
that
.
fBoundsFlags
;
}
static
uint32_t
GenOpClassID
(
)
{
return
GenID
(
&
gCurrOpClassID
)
;
}
private
:
virtual
CombineResult
onCombineIfPossible
(
GrOp
*
const
GrCaps
&
)
{
return
CombineResult
:
:
kCannotCombine
;
}
virtual
void
onPrepare
(
GrOpFlushState
*
)
=
0
;
virtual
void
onExecute
(
GrOpFlushState
*
)
=
0
;
static
uint32_t
GenID
(
int32_t
*
idCounter
)
{
uint32_t
id
=
static_cast
<
uint32_t
>
(
sk_atomic_inc
(
idCounter
)
)
+
1
;
if
(
!
id
)
{
SK_ABORT
(
"
This
should
never
wrap
as
it
should
only
be
called
once
for
each
GrOp
"
"
subclass
.
"
)
;
}
return
id
;
}
void
setBoundsFlags
(
HasAABloat
aabloat
IsZeroArea
zeroArea
)
{
fBoundsFlags
=
0
;
fBoundsFlags
|
=
(
HasAABloat
:
:
kYes
=
=
aabloat
)
?
kAABloat_BoundsFlag
:
0
;
fBoundsFlags
|
=
(
IsZeroArea
:
:
kYes
=
=
zeroArea
)
?
kZeroArea_BoundsFlag
:
0
;
}
enum
{
kIllegalOpID
=
0
}
;
enum
BoundsFlags
{
kAABloat_BoundsFlag
=
0x1
kZeroArea_BoundsFlag
=
0x2
SkDEBUGCODE
(
kUninitialized_BoundsFlag
=
0x4
)
}
;
GrOp
*
fNextInChain
=
nullptr
;
GrOp
*
fChainHead
=
nullptr
;
const
uint16_t
fClassID
;
uint16_t
fBoundsFlags
;
static
uint32_t
GenOpID
(
)
{
return
GenID
(
&
gCurrOpUniqueID
)
;
}
mutable
uint32_t
fUniqueID
=
SK_InvalidUniqueID
;
SkRect
fBounds
;
static
int32_t
gCurrOpUniqueID
;
static
int32_t
gCurrOpClassID
;
}
;
#
endif
