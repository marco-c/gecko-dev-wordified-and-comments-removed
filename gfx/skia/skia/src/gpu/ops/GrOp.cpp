#
include
"
GrOp
.
h
"
#
include
"
GrMemoryPool
.
h
"
#
include
"
SkSpinlock
.
h
"
namespace
{
static
SkSpinlock
gOpPoolSpinLock
;
class
MemoryPoolAccessor
{
public
:
#
if
defined
(
SK_BUILD_FOR_ANDROID_FRAMEWORK
)
MemoryPoolAccessor
(
)
{
}
~
MemoryPoolAccessor
(
)
{
}
#
else
MemoryPoolAccessor
(
)
{
gOpPoolSpinLock
.
acquire
(
)
;
}
~
MemoryPoolAccessor
(
)
{
gOpPoolSpinLock
.
release
(
)
;
}
#
endif
GrMemoryPool
*
pool
(
)
const
{
static
GrMemoryPool
gPool
(
16384
16384
)
;
return
&
gPool
;
}
}
;
}
int32_t
GrOp
:
:
gCurrOpClassID
=
GrOp
:
:
kIllegalOpID
;
int32_t
GrOp
:
:
gCurrOpUniqueID
=
GrOp
:
:
kIllegalOpID
;
void
*
GrOp
:
:
operator
new
(
size_t
size
)
{
return
MemoryPoolAccessor
(
)
.
pool
(
)
-
>
allocate
(
size
)
;
}
void
GrOp
:
:
operator
delete
(
void
*
target
)
{
return
MemoryPoolAccessor
(
)
.
pool
(
)
-
>
release
(
target
)
;
}
GrOp
:
:
GrOp
(
uint32_t
classID
)
:
fClassID
(
classID
)
fUniqueID
(
kIllegalOpID
)
{
SkASSERT
(
classID
=
=
SkToU32
(
fClassID
)
)
;
SkDEBUGCODE
(
fBoundsFlags
=
kUninitialized_BoundsFlag
)
;
}
GrOp
:
:
~
GrOp
(
)
{
}
