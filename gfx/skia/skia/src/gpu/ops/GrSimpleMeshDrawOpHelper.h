#
ifndef
GrSimpleMeshDrawOpHelper_DEFINED
#
define
GrSimpleMeshDrawOpHelper_DEFINED
#
include
"
GrMeshDrawOp
.
h
"
#
include
"
GrOpFlushState
.
h
"
#
include
"
GrPipeline
.
h
"
struct
SkRect
;
class
GrSimpleMeshDrawOpHelper
{
public
:
struct
MakeArgs
;
template
<
typename
Op
typename
.
.
.
OpArgs
>
static
std
:
:
unique_ptr
<
GrDrawOp
>
FactoryHelper
(
GrPaint
&
&
paint
OpArgs
.
.
.
opArgs
)
;
enum
class
Flags
:
uint32_t
{
kNone
=
0x0
kSnapVerticesToPixelCenters
=
0x1
}
;
GR_DECL_BITFIELD_CLASS_OPS_FRIENDS
(
Flags
)
;
GrSimpleMeshDrawOpHelper
(
const
MakeArgs
&
GrAAType
Flags
=
Flags
:
:
kNone
)
;
~
GrSimpleMeshDrawOpHelper
(
)
;
GrSimpleMeshDrawOpHelper
(
)
=
delete
;
GrSimpleMeshDrawOpHelper
(
const
GrSimpleMeshDrawOpHelper
&
)
=
delete
;
GrSimpleMeshDrawOpHelper
&
operator
=
(
const
GrSimpleMeshDrawOpHelper
&
)
=
delete
;
GrDrawOp
:
:
FixedFunctionFlags
fixedFunctionFlags
(
)
const
;
bool
isCompatible
(
const
GrSimpleMeshDrawOpHelper
&
that
const
GrCaps
&
const
SkRect
&
thisBounds
const
SkRect
&
thatBounds
)
const
;
GrDrawOp
:
:
RequiresDstTexture
xpRequiresDstTexture
(
const
GrCaps
&
caps
const
GrAppliedClip
*
clip
GrPixelConfigIsClamped
dstIsClamped
GrProcessorAnalysisCoverage
geometryCoverage
GrProcessorAnalysisColor
*
geometryColor
)
;
GrDrawOp
:
:
RequiresDstTexture
xpRequiresDstTexture
(
const
GrCaps
&
const
GrAppliedClip
*
GrPixelConfigIsClamped
dstIsClamped
GrProcessorAnalysisCoverage
geometryCoverage
GrColor
*
geometryColor
)
;
bool
usesLocalCoords
(
)
const
{
SkASSERT
(
fDidAnalysis
)
;
return
fUsesLocalCoords
;
}
bool
compatibleWithAlphaAsCoverage
(
)
const
{
return
fCompatibleWithAlphaAsCoveage
;
}
GrPipeline
*
makePipeline
(
GrMeshDrawOp
:
:
Target
*
target
)
{
return
this
-
>
internalMakePipeline
(
target
this
-
>
pipelineInitArgs
(
target
)
)
;
}
struct
MakeArgs
{
private
:
MakeArgs
(
)
=
default
;
GrProcessorSet
*
fProcessorSet
;
uint32_t
fSRGBFlags
;
friend
class
GrSimpleMeshDrawOpHelper
;
}
;
void
visitProxies
(
const
std
:
:
function
<
void
(
GrSurfaceProxy
*
)
>
&
func
)
const
{
if
(
fProcessors
)
{
fProcessors
-
>
visitProxies
(
func
)
;
}
}
SkString
dumpInfo
(
)
const
;
protected
:
GrAAType
aaType
(
)
const
{
return
static_cast
<
GrAAType
>
(
fAAType
)
;
}
uint32_t
pipelineFlags
(
)
const
{
return
fPipelineFlags
;
}
GrPipeline
:
:
InitArgs
pipelineInitArgs
(
GrMeshDrawOp
:
:
Target
*
target
)
const
;
GrPipeline
*
internalMakePipeline
(
GrMeshDrawOp
:
:
Target
*
const
GrPipeline
:
:
InitArgs
&
)
;
private
:
GrProcessorSet
*
fProcessors
;
unsigned
fPipelineFlags
:
8
;
unsigned
fAAType
:
2
;
unsigned
fRequiresDstTexture
:
1
;
unsigned
fUsesLocalCoords
:
1
;
unsigned
fCompatibleWithAlphaAsCoveage
:
1
;
SkDEBUGCODE
(
unsigned
fMadePipeline
:
1
;
)
SkDEBUGCODE
(
unsigned
fDidAnalysis
:
1
;
)
}
;
class
GrSimpleMeshDrawOpHelperWithStencil
:
private
GrSimpleMeshDrawOpHelper
{
public
:
using
MakeArgs
=
GrSimpleMeshDrawOpHelper
:
:
MakeArgs
;
using
Flags
=
GrSimpleMeshDrawOpHelper
:
:
Flags
;
using
GrSimpleMeshDrawOpHelper
:
:
visitProxies
;
template
<
typename
Op
typename
.
.
.
OpArgs
>
static
std
:
:
unique_ptr
<
GrDrawOp
>
FactoryHelper
(
GrPaint
&
&
paint
OpArgs
.
.
.
opArgs
)
{
return
GrSimpleMeshDrawOpHelper
:
:
FactoryHelper
<
Op
OpArgs
.
.
.
>
(
std
:
:
move
(
paint
)
std
:
:
forward
<
OpArgs
>
(
opArgs
)
.
.
.
)
;
}
GrSimpleMeshDrawOpHelperWithStencil
(
const
MakeArgs
&
GrAAType
const
GrUserStencilSettings
*
Flags
=
Flags
:
:
kNone
)
;
GrDrawOp
:
:
FixedFunctionFlags
fixedFunctionFlags
(
)
const
;
using
GrSimpleMeshDrawOpHelper
:
:
xpRequiresDstTexture
;
using
GrSimpleMeshDrawOpHelper
:
:
usesLocalCoords
;
using
GrSimpleMeshDrawOpHelper
:
:
compatibleWithAlphaAsCoverage
;
bool
isCompatible
(
const
GrSimpleMeshDrawOpHelperWithStencil
&
that
const
GrCaps
&
const
SkRect
&
thisBounds
const
SkRect
&
thatBounds
)
const
;
const
GrPipeline
*
makePipeline
(
GrMeshDrawOp
:
:
Target
*
)
;
SkString
dumpInfo
(
)
const
;
private
:
const
GrUserStencilSettings
*
fStencilSettings
;
typedef
GrSimpleMeshDrawOpHelper
INHERITED
;
}
;
template
<
typename
Op
typename
.
.
.
OpArgs
>
std
:
:
unique_ptr
<
GrDrawOp
>
GrSimpleMeshDrawOpHelper
:
:
FactoryHelper
(
GrPaint
&
&
paint
OpArgs
.
.
.
opArgs
)
{
MakeArgs
makeArgs
;
makeArgs
.
fSRGBFlags
=
GrPipeline
:
:
SRGBFlagsFromPaint
(
paint
)
;
GrColor
color
=
paint
.
getColor
(
)
;
if
(
paint
.
isTrivial
(
)
)
{
makeArgs
.
fProcessorSet
=
nullptr
;
return
std
:
:
unique_ptr
<
GrDrawOp
>
(
new
Op
(
makeArgs
color
std
:
:
forward
<
OpArgs
>
(
opArgs
)
.
.
.
)
)
;
}
else
{
char
*
mem
=
(
char
*
)
GrOp
:
:
operator
new
(
sizeof
(
Op
)
+
sizeof
(
GrProcessorSet
)
)
;
char
*
setMem
=
mem
+
sizeof
(
Op
)
;
makeArgs
.
fProcessorSet
=
new
(
setMem
)
GrProcessorSet
(
std
:
:
move
(
paint
)
)
;
return
std
:
:
unique_ptr
<
GrDrawOp
>
(
new
(
mem
)
Op
(
makeArgs
color
std
:
:
forward
<
OpArgs
>
(
opArgs
)
.
.
.
)
)
;
}
}
GR_MAKE_BITFIELD_CLASS_OPS
(
GrSimpleMeshDrawOpHelper
:
:
Flags
)
#
endif
