#
ifndef
GrClearOp_DEFINED
#
define
GrClearOp_DEFINED
#
include
"
GrFixedClip
.
h
"
#
include
"
GrOp
.
h
"
class
GrOpFlushState
;
class
GrClearOp
final
:
public
GrOp
{
public
:
DEFINE_OP_CLASS_ID
static
std
:
:
unique_ptr
<
GrClearOp
>
Make
(
GrContext
*
context
const
GrFixedClip
&
clip
GrColor
color
GrSurfaceProxy
*
dstProxy
)
;
static
std
:
:
unique_ptr
<
GrClearOp
>
Make
(
GrContext
*
context
const
SkIRect
&
rect
GrColor
color
bool
fullScreen
)
;
const
char
*
name
(
)
const
override
{
return
"
Clear
"
;
}
SkString
dumpInfo
(
)
const
override
{
SkString
string
;
string
.
append
(
INHERITED
:
:
dumpInfo
(
)
)
;
string
.
appendf
(
"
Scissor
[
"
)
;
if
(
fClip
.
scissorEnabled
(
)
)
{
const
SkIRect
&
r
=
fClip
.
scissorRect
(
)
;
string
.
appendf
(
"
L
:
%
d
T
:
%
d
R
:
%
d
B
:
%
d
"
r
.
fLeft
r
.
fTop
r
.
fRight
r
.
fBottom
)
;
}
else
{
string
.
append
(
"
disabled
"
)
;
}
string
.
appendf
(
"
]
Color
:
0x
%
08x
\
n
"
fColor
)
;
return
string
;
}
GrColor
color
(
)
const
{
return
fColor
;
}
void
setColor
(
GrColor
color
)
{
fColor
=
color
;
}
private
:
friend
class
GrOpMemoryPool
;
GrClearOp
(
const
GrFixedClip
&
clip
GrColor
color
GrSurfaceProxy
*
proxy
)
;
GrClearOp
(
const
SkIRect
&
rect
GrColor
color
bool
fullScreen
)
:
INHERITED
(
ClassID
(
)
)
fClip
(
GrFixedClip
(
rect
)
)
fColor
(
color
)
{
if
(
fullScreen
)
{
fClip
.
disableScissor
(
)
;
}
this
-
>
setBounds
(
SkRect
:
:
Make
(
rect
)
HasAABloat
:
:
kNo
IsZeroArea
:
:
kNo
)
;
}
CombineResult
onCombineIfPossible
(
GrOp
*
t
const
GrCaps
&
caps
)
override
{
GrClearOp
*
cb
=
t
-
>
cast
<
GrClearOp
>
(
)
;
if
(
fClip
.
windowRectsState
(
)
!
=
cb
-
>
fClip
.
windowRectsState
(
)
)
{
return
CombineResult
:
:
kCannotCombine
;
}
if
(
cb
-
>
contains
(
this
)
)
{
fClip
=
cb
-
>
fClip
;
this
-
>
replaceBounds
(
*
t
)
;
fColor
=
cb
-
>
fColor
;
return
CombineResult
:
:
kMerged
;
}
else
if
(
cb
-
>
fColor
=
=
fColor
&
&
this
-
>
contains
(
cb
)
)
{
return
CombineResult
:
:
kMerged
;
}
return
CombineResult
:
:
kCannotCombine
;
}
bool
contains
(
const
GrClearOp
*
that
)
const
{
return
!
fClip
.
scissorEnabled
(
)
|
|
(
that
-
>
fClip
.
scissorEnabled
(
)
&
&
fClip
.
scissorRect
(
)
.
contains
(
that
-
>
fClip
.
scissorRect
(
)
)
)
;
}
void
onPrepare
(
GrOpFlushState
*
)
override
{
}
void
onExecute
(
GrOpFlushState
*
state
)
override
;
GrFixedClip
fClip
;
GrColor
fColor
;
typedef
GrOp
INHERITED
;
}
;
#
endif
