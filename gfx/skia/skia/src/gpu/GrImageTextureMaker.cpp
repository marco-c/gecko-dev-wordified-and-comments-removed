#
include
"
src
/
gpu
/
GrImageTextureMaker
.
h
"
#
include
"
src
/
gpu
/
GrColorSpaceXform
.
h
"
#
include
"
src
/
gpu
/
SkGr
.
h
"
#
include
"
src
/
gpu
/
effects
/
GrYUVtoRGBEffect
.
h
"
#
include
"
src
/
image
/
SkImage_GpuYUVA
.
h
"
#
include
"
src
/
image
/
SkImage_Lazy
.
h
"
GrImageTextureMaker
:
:
GrImageTextureMaker
(
GrRecordingContext
*
context
const
SkImage
*
client
SkImage
:
:
CachingHint
chint
bool
useDecal
)
:
INHERITED
(
context
client
-
>
width
(
)
client
-
>
height
(
)
client
-
>
imageInfo
(
)
.
colorInfo
(
)
useDecal
)
fImage
(
static_cast
<
const
SkImage_Lazy
*
>
(
client
)
)
fCachingHint
(
chint
)
{
SkASSERT
(
client
-
>
isLazyGenerated
(
)
)
;
GrMakeKeyFromImageID
(
&
fOriginalKey
client
-
>
uniqueID
(
)
SkIRect
:
:
MakeWH
(
this
-
>
width
(
)
this
-
>
height
(
)
)
)
;
}
sk_sp
<
GrTextureProxy
>
GrImageTextureMaker
:
:
refOriginalTextureProxy
(
bool
willBeMipped
AllowedTexGenType
onlyIfFast
)
{
return
fImage
-
>
lockTextureProxy
(
this
-
>
context
(
)
fOriginalKey
fCachingHint
willBeMipped
onlyIfFast
)
;
}
void
GrImageTextureMaker
:
:
makeCopyKey
(
const
CopyParams
&
stretch
GrUniqueKey
*
paramsCopyKey
)
{
if
(
fOriginalKey
.
isValid
(
)
&
&
SkImage
:
:
kAllow_CachingHint
=
=
fCachingHint
)
{
GrUniqueKey
cacheKey
;
fImage
-
>
makeCacheKeyFromOrigKey
(
fOriginalKey
&
cacheKey
)
;
MakeCopyKeyFromOrigKey
(
cacheKey
stretch
paramsCopyKey
)
;
}
}
GrYUVAImageTextureMaker
:
:
GrYUVAImageTextureMaker
(
GrContext
*
context
const
SkImage
*
client
bool
useDecal
)
:
INHERITED
(
context
client
-
>
width
(
)
client
-
>
height
(
)
client
-
>
imageInfo
(
)
.
colorInfo
(
)
useDecal
)
fImage
(
static_cast
<
const
SkImage_GpuYUVA
*
>
(
client
)
)
{
SkASSERT
(
as_IB
(
client
)
-
>
isYUVA
(
)
)
;
GrMakeKeyFromImageID
(
&
fOriginalKey
client
-
>
uniqueID
(
)
SkIRect
:
:
MakeWH
(
this
-
>
width
(
)
this
-
>
height
(
)
)
)
;
}
sk_sp
<
GrTextureProxy
>
GrYUVAImageTextureMaker
:
:
refOriginalTextureProxy
(
bool
willBeMipped
AllowedTexGenType
onlyIfFast
)
{
if
(
AllowedTexGenType
:
:
kCheap
=
=
onlyIfFast
)
{
return
nullptr
;
}
if
(
willBeMipped
)
{
return
fImage
-
>
asMippedTextureProxyRef
(
this
-
>
context
(
)
)
;
}
else
{
return
fImage
-
>
asTextureProxyRef
(
this
-
>
context
(
)
)
;
}
}
void
GrYUVAImageTextureMaker
:
:
makeCopyKey
(
const
CopyParams
&
stretch
GrUniqueKey
*
paramsCopyKey
)
{
if
(
fOriginalKey
.
isValid
(
)
)
{
GrUniqueKey
cacheKey
;
static
const
GrUniqueKey
:
:
Domain
kDomain
=
GrUniqueKey
:
:
GenerateDomain
(
)
;
GrUniqueKey
:
:
Builder
builder
(
&
cacheKey
fOriginalKey
kDomain
0
"
Image
"
)
;
MakeCopyKeyFromOrigKey
(
cacheKey
stretch
paramsCopyKey
)
;
}
}
std
:
:
unique_ptr
<
GrFragmentProcessor
>
GrYUVAImageTextureMaker
:
:
createFragmentProcessor
(
const
SkMatrix
&
textureMatrix
const
SkRect
&
constraintRect
FilterConstraint
filterConstraint
bool
coordsLimitedToConstraintRect
const
GrSamplerState
:
:
Filter
*
filterOrNullForBicubic
)
{
if
(
!
filterOrNullForBicubic
|
|
this
-
>
domainNeedsDecal
(
)
|
|
fImage
-
>
fRGBProxy
)
{
return
this
-
>
INHERITED
:
:
createFragmentProcessor
(
textureMatrix
constraintRect
filterConstraint
coordsLimitedToConstraintRect
filterOrNullForBicubic
)
;
}
GrSamplerState
:
:
Filter
filter
=
*
filterOrNullForBicubic
;
if
(
GrSamplerState
:
:
Filter
:
:
kMipMap
=
=
filter
&
&
(
filterConstraint
=
=
GrTextureProducer
:
:
kYes_FilterConstraint
|
|
!
fImage
-
>
setupMipmapsForPlanes
(
this
-
>
context
(
)
)
)
)
{
filter
=
GrSamplerState
:
:
Filter
:
:
kBilerp
;
}
const
SkRect
*
domain
=
nullptr
;
if
(
filterConstraint
=
=
GrTextureProducer
:
:
kYes_FilterConstraint
)
{
domain
=
&
constraintRect
;
}
auto
fp
=
GrYUVtoRGBEffect
:
:
Make
(
fImage
-
>
fProxies
fImage
-
>
fYUVAIndices
fImage
-
>
fYUVColorSpace
filter
textureMatrix
domain
)
;
if
(
fImage
-
>
fFromColorSpace
)
{
fp
=
GrColorSpaceXformEffect
:
:
Make
(
std
:
:
move
(
fp
)
fImage
-
>
fFromColorSpace
.
get
(
)
fImage
-
>
alphaType
(
)
fImage
-
>
colorSpace
(
)
)
;
}
return
fp
;
}
