#
ifndef
GrContextThreadSafeProxyPriv_DEFINED
#
define
GrContextThreadSafeProxyPriv_DEFINED
#
include
"
GrContextThreadSafeProxy
.
h
"
class
GrContextThreadSafeProxyPriv
{
public
:
uint32_t
contextID
(
)
const
{
return
fProxy
-
>
contextID
(
)
;
}
bool
matches
(
GrContext_Base
*
candidate
)
const
{
return
fProxy
-
>
matches
(
candidate
)
;
}
const
GrContextOptions
&
options
(
)
const
{
return
fProxy
-
>
options
(
)
;
}
const
GrCaps
*
caps
(
)
const
{
return
fProxy
-
>
caps
(
)
;
}
sk_sp
<
const
GrCaps
>
refCaps
(
)
const
{
return
fProxy
-
>
refCaps
(
)
;
}
sk_sp
<
GrSkSLFPFactoryCache
>
fpFactoryCache
(
)
;
static
sk_sp
<
GrContextThreadSafeProxy
>
Make
(
GrBackendApi
const
GrContextOptions
&
uint32_t
contextID
sk_sp
<
const
GrCaps
>
sk_sp
<
GrSkSLFPFactoryCache
>
)
;
private
:
explicit
GrContextThreadSafeProxyPriv
(
GrContextThreadSafeProxy
*
proxy
)
:
fProxy
(
proxy
)
{
}
GrContextThreadSafeProxyPriv
(
const
GrContextThreadSafeProxy
&
)
=
delete
;
GrContextThreadSafeProxyPriv
&
operator
=
(
const
GrContextThreadSafeProxyPriv
&
)
=
delete
;
const
GrContextThreadSafeProxyPriv
*
operator
&
(
)
const
=
delete
;
GrContextThreadSafeProxyPriv
*
operator
&
(
)
=
delete
;
GrContextThreadSafeProxy
*
fProxy
;
friend
class
GrContextThreadSafeProxy
;
}
;
inline
GrContextThreadSafeProxyPriv
GrContextThreadSafeProxy
:
:
priv
(
)
{
return
GrContextThreadSafeProxyPriv
(
this
)
;
}
inline
const
GrContextThreadSafeProxyPriv
GrContextThreadSafeProxy
:
:
priv
(
)
const
{
return
GrContextThreadSafeProxyPriv
(
const_cast
<
GrContextThreadSafeProxy
*
>
(
this
)
)
;
}
#
endif
