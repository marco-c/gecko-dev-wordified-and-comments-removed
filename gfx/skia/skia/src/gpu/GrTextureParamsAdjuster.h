#
ifndef
GrTextureMaker_DEFINED
#
define
GrTextureMaker_DEFINED
#
include
"
GrTextureParams
.
h
"
#
include
"
GrResourceKey
.
h
"
#
include
"
GrTexture
.
h
"
#
include
"
SkTLazy
.
h
"
class
GrContext
;
class
GrTextureParams
;
class
GrUniqueKey
;
class
SkBitmap
;
class
GrTextureProducer
:
public
SkNoncopyable
{
public
:
struct
CopyParams
{
GrTextureParams
:
:
FilterMode
fFilter
;
int
fWidth
;
int
fHeight
;
}
;
enum
FilterConstraint
{
kYes_FilterConstraint
kNo_FilterConstraint
}
;
virtual
const
GrFragmentProcessor
*
createFragmentProcessor
(
const
SkMatrix
&
textureMatrix
const
SkRect
&
constraintRect
FilterConstraint
filterConstraint
bool
coordsLimitedToConstraintRect
const
GrTextureParams
:
:
FilterMode
*
filterOrNullForBicubic
)
=
0
;
virtual
~
GrTextureProducer
(
)
{
}
int
width
(
)
const
{
return
fWidth
;
}
int
height
(
)
const
{
return
fHeight
;
}
protected
:
GrTextureProducer
(
int
width
int
height
)
:
fWidth
(
width
)
fHeight
(
height
)
{
}
static
void
MakeCopyKeyFromOrigKey
(
const
GrUniqueKey
&
origKey
const
CopyParams
&
copyParams
GrUniqueKey
*
copyKey
)
{
SkASSERT
(
!
copyKey
-
>
isValid
(
)
)
;
if
(
origKey
.
isValid
(
)
)
{
static
const
GrUniqueKey
:
:
Domain
kDomain
=
GrUniqueKey
:
:
GenerateDomain
(
)
;
GrUniqueKey
:
:
Builder
builder
(
copyKey
origKey
kDomain
3
)
;
builder
[
0
]
=
copyParams
.
fFilter
;
builder
[
1
]
=
copyParams
.
fWidth
;
builder
[
2
]
=
copyParams
.
fHeight
;
}
}
virtual
void
makeCopyKey
(
const
CopyParams
&
GrUniqueKey
*
copyKey
)
=
0
;
virtual
void
didCacheCopy
(
const
GrUniqueKey
&
copyKey
)
=
0
;
private
:
const
int
fWidth
;
const
int
fHeight
;
typedef
SkNoncopyable
INHERITED
;
}
;
class
GrTextureAdjuster
:
public
GrTextureProducer
{
public
:
GrTexture
*
refTextureSafeForParams
(
const
GrTextureParams
&
SkIPoint
*
outOffset
)
;
const
GrFragmentProcessor
*
createFragmentProcessor
(
const
SkMatrix
&
textureMatrix
const
SkRect
&
constraintRect
FilterConstraint
bool
coordsLimitedToConstraintRect
const
GrTextureParams
:
:
FilterMode
*
filterOrNullForBicubic
)
override
;
protected
:
explicit
GrTextureAdjuster
(
GrTexture
*
original
)
:
INHERITED
(
original
-
>
width
(
)
original
-
>
height
(
)
)
fOriginal
(
original
)
{
}
GrTextureAdjuster
(
GrTexture
*
original
const
SkIRect
&
contentArea
)
;
GrTexture
*
originalTexture
(
)
const
{
return
fOriginal
;
}
const
SkIRect
*
contentAreaOrNull
(
)
{
return
fContentArea
.
getMaybeNull
(
)
;
}
private
:
SkTLazy
<
SkIRect
>
fContentArea
;
GrTexture
*
fOriginal
;
typedef
GrTextureProducer
INHERITED
;
}
;
class
GrTextureMaker
:
public
GrTextureProducer
{
public
:
GrTexture
*
refTextureForParams
(
const
GrTextureParams
&
)
;
const
GrFragmentProcessor
*
createFragmentProcessor
(
const
SkMatrix
&
textureMatrix
const
SkRect
&
constraintRect
FilterConstraint
filterConstraint
bool
coordsLimitedToConstraintRect
const
GrTextureParams
:
:
FilterMode
*
filterOrNullForBicubic
)
override
;
protected
:
GrTextureMaker
(
GrContext
*
context
int
width
int
height
)
:
INHERITED
(
width
height
)
fContext
(
context
)
{
}
virtual
GrTexture
*
refOriginalTexture
(
)
=
0
;
virtual
GrTexture
*
generateTextureForParams
(
const
CopyParams
&
)
;
GrContext
*
context
(
)
const
{
return
fContext
;
}
private
:
GrContext
*
fContext
;
typedef
GrTextureProducer
INHERITED
;
}
;
#
endif
