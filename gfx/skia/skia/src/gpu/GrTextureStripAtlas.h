#
ifndef
GrTextureStripAtlas_DEFINED
#
define
GrTextureStripAtlas_DEFINED
#
include
"
SkBitmap
.
h
"
#
include
"
SkOpts
.
h
"
#
include
"
SkGr
.
h
"
#
include
"
SkTDArray
.
h
"
#
include
"
SkTDynamicHash
.
h
"
#
include
"
SkTypes
.
h
"
class
GrSurfaceContext
;
class
GrTextureProxy
;
class
GrTextureStripAtlas
{
public
:
struct
Desc
{
Desc
(
)
{
sk_bzero
(
this
sizeof
(
*
this
)
)
;
}
GrContext
*
fContext
;
GrPixelConfig
fConfig
;
uint16_t
fWidth
fHeight
fRowHeight
;
uint16_t
fUnusedPadding
;
bool
operator
=
=
(
const
Desc
&
other
)
const
{
return
0
=
=
memcmp
(
this
&
other
sizeof
(
Desc
)
)
;
}
}
;
static
GrTextureStripAtlas
*
GetAtlas
(
const
Desc
&
desc
)
;
~
GrTextureStripAtlas
(
)
;
int
lockRow
(
const
SkBitmap
&
data
)
;
void
lockRow
(
int
row
)
;
void
unlockRow
(
int
row
)
;
SkScalar
getYOffset
(
int
row
)
const
{
return
SkIntToScalar
(
row
)
/
fNumRows
;
}
SkScalar
getNormalizedTexelHeight
(
)
const
{
return
fNormalizedYHeight
;
}
GrContext
*
getContext
(
)
const
{
return
fDesc
.
fContext
;
}
sk_sp
<
GrTextureProxy
>
asTextureProxyRef
(
)
const
;
private
:
const
static
uint32_t
kEmptyAtlasRowKey
=
0xffffffff
;
struct
AtlasRow
:
SkNoncopyable
{
AtlasRow
(
)
:
fKey
(
kEmptyAtlasRowKey
)
fLocks
(
0
)
fNext
(
nullptr
)
fPrev
(
nullptr
)
{
}
uint32_t
fKey
;
int32_t
fLocks
;
AtlasRow
*
fNext
;
AtlasRow
*
fPrev
;
}
;
GrTextureStripAtlas
(
Desc
desc
)
;
void
lockTexture
(
)
;
void
unlockTexture
(
)
;
void
initLRU
(
)
;
AtlasRow
*
getLRU
(
)
;
void
appendLRU
(
AtlasRow
*
row
)
;
void
removeFromLRU
(
AtlasRow
*
row
)
;
int
searchByKey
(
uint32_t
key
)
;
static
bool
KeyLess
(
const
AtlasRow
&
lhs
const
AtlasRow
&
rhs
)
{
return
lhs
.
fKey
<
rhs
.
fKey
;
}
#
ifdef
SK_DEBUG
void
validate
(
)
;
#
endif
static
void
CleanUp
(
const
GrContext
*
context
void
*
info
)
;
class
AtlasEntry
:
public
:
:
SkNoncopyable
{
public
:
static
const
Desc
&
GetKey
(
const
AtlasEntry
&
entry
)
{
return
entry
.
fDesc
;
}
static
uint32_t
Hash
(
const
Desc
&
desc
)
{
return
SkOpts
:
:
hash
(
&
desc
sizeof
(
Desc
)
)
;
}
AtlasEntry
(
)
:
fAtlas
(
nullptr
)
{
}
~
AtlasEntry
(
)
{
delete
fAtlas
;
}
Desc
fDesc
;
GrTextureStripAtlas
*
fAtlas
;
}
;
class
Hash
;
static
Hash
*
gAtlasCache
;
static
Hash
*
GetCache
(
)
;
static
int32_t
gCacheCount
;
const
int32_t
fCacheKey
;
int32_t
fLockedRows
;
const
Desc
fDesc
;
const
uint16_t
fNumRows
;
sk_sp
<
GrSurfaceContext
>
fTexContext
;
SkScalar
fNormalizedYHeight
;
AtlasRow
*
fRows
;
AtlasRow
*
fLRUFront
;
AtlasRow
*
fLRUBack
;
SkTDArray
<
AtlasRow
*
>
fKeyTable
;
}
;
#
endif
