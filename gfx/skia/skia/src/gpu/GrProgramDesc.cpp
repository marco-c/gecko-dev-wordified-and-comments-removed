#
include
"
GrProgramDesc
.
h
"
#
include
"
GrPipeline
.
h
"
#
include
"
GrPrimitiveProcessor
.
h
"
#
include
"
GrProcessor
.
h
"
#
include
"
GrRenderTargetPriv
.
h
"
#
include
"
GrShaderCaps
.
h
"
#
include
"
GrTexturePriv
.
h
"
#
include
"
SkChecksum
.
h
"
#
include
"
glsl
/
GrGLSLFragmentProcessor
.
h
"
#
include
"
glsl
/
GrGLSLFragmentShaderBuilder
.
h
"
enum
{
kSamplerOrImageTypeKeyBits
=
4
}
;
static
inline
uint16_t
image_storage_or_sampler_uniform_type_key
(
GrSLType
type
)
{
int
value
=
UINT16_MAX
;
switch
(
type
)
{
case
kTexture2DSampler_GrSLType
:
value
=
0
;
break
;
case
kTextureExternalSampler_GrSLType
:
value
=
1
;
break
;
case
kTexture2DRectSampler_GrSLType
:
value
=
2
;
break
;
case
kBufferSampler_GrSLType
:
value
=
3
;
break
;
default
:
break
;
}
SkASSERT
(
(
value
&
(
(
1
<
<
kSamplerOrImageTypeKeyBits
)
-
1
)
)
=
=
value
)
;
return
value
;
}
static
uint16_t
sampler_key
(
GrSLType
samplerType
GrPixelConfig
config
GrShaderFlags
visibility
const
GrShaderCaps
&
caps
)
{
int
samplerTypeKey
=
image_storage_or_sampler_uniform_type_key
(
samplerType
)
;
GR_STATIC_ASSERT
(
1
=
=
sizeof
(
caps
.
configTextureSwizzle
(
config
)
.
asKey
(
)
)
)
;
return
SkToU16
(
samplerTypeKey
|
caps
.
configTextureSwizzle
(
config
)
.
asKey
(
)
<
<
kSamplerOrImageTypeKeyBits
|
(
GrSLSamplerPrecision
(
config
)
<
<
(
8
+
kSamplerOrImageTypeKeyBits
)
)
)
;
}
static
void
add_sampler_and_image_keys
(
GrProcessorKeyBuilder
*
b
const
GrResourceIOProcessor
&
proc
const
GrShaderCaps
&
caps
)
{
int
numTextureSamplers
=
proc
.
numTextureSamplers
(
)
;
int
numBuffers
=
proc
.
numBuffers
(
)
;
int
numUniforms
=
numTextureSamplers
+
numBuffers
;
int
word32Count
=
(
numUniforms
+
1
)
/
2
;
if
(
0
=
=
word32Count
)
{
return
;
}
uint16_t
*
k16
=
SkTCast
<
uint16_t
*
>
(
b
-
>
add32n
(
word32Count
)
)
;
int
j
=
0
;
for
(
int
i
=
0
;
i
<
numTextureSamplers
;
+
+
i
+
+
j
)
{
const
GrResourceIOProcessor
:
:
TextureSampler
&
sampler
=
proc
.
textureSampler
(
i
)
;
const
GrTexture
*
tex
=
sampler
.
peekTexture
(
)
;
k16
[
j
]
=
sampler_key
(
tex
-
>
texturePriv
(
)
.
samplerType
(
)
tex
-
>
config
(
)
sampler
.
visibility
(
)
caps
)
;
}
for
(
int
i
=
0
;
i
<
numBuffers
;
+
+
i
+
+
j
)
{
const
GrResourceIOProcessor
:
:
BufferAccess
&
access
=
proc
.
bufferAccess
(
i
)
;
k16
[
j
]
=
sampler_key
(
kBufferSampler_GrSLType
access
.
texelConfig
(
)
access
.
visibility
(
)
caps
)
;
}
if
(
numUniforms
&
0x1
)
{
k16
[
numUniforms
]
=
0
;
}
}
static
bool
gen_meta_key
(
const
GrResourceIOProcessor
&
proc
const
GrShaderCaps
&
shaderCaps
uint32_t
transformKey
GrProcessorKeyBuilder
*
b
)
{
size_t
processorKeySize
=
b
-
>
size
(
)
;
uint32_t
classID
=
proc
.
classID
(
)
;
static
const
uint32_t
kMetaKeyInvalidMask
=
~
(
(
uint32_t
)
SK_MaxU16
)
;
if
(
(
processorKeySize
|
classID
)
&
kMetaKeyInvalidMask
)
{
return
false
;
}
add_sampler_and_image_keys
(
b
proc
shaderCaps
)
;
uint32_t
*
key
=
b
-
>
add32n
(
2
)
;
key
[
0
]
=
(
classID
<
<
16
)
|
SkToU32
(
processorKeySize
)
;
key
[
1
]
=
transformKey
;
return
true
;
}
static
bool
gen_meta_key
(
const
GrXferProcessor
&
xp
const
GrShaderCaps
&
shaderCaps
GrProcessorKeyBuilder
*
b
)
{
size_t
processorKeySize
=
b
-
>
size
(
)
;
uint32_t
classID
=
xp
.
classID
(
)
;
static
const
uint32_t
kMetaKeyInvalidMask
=
~
(
(
uint32_t
)
SK_MaxU16
)
;
if
(
(
processorKeySize
|
classID
)
&
kMetaKeyInvalidMask
)
{
return
false
;
}
b
-
>
add32
(
(
classID
<
<
16
)
|
SkToU32
(
processorKeySize
)
)
;
return
true
;
}
static
bool
gen_frag_proc_and_meta_keys
(
const
GrPrimitiveProcessor
&
primProc
const
GrFragmentProcessor
&
fp
const
GrShaderCaps
&
shaderCaps
GrProcessorKeyBuilder
*
b
)
{
for
(
int
i
=
0
;
i
<
fp
.
numChildProcessors
(
)
;
+
+
i
)
{
if
(
!
gen_frag_proc_and_meta_keys
(
primProc
fp
.
childProcessor
(
i
)
shaderCaps
b
)
)
{
return
false
;
}
}
fp
.
getGLSLProcessorKey
(
shaderCaps
b
)
;
return
gen_meta_key
(
fp
shaderCaps
primProc
.
getTransformKey
(
fp
.
coordTransforms
(
)
fp
.
numCoordTransforms
(
)
)
b
)
;
}
bool
GrProgramDesc
:
:
Build
(
GrProgramDesc
*
desc
const
GrPrimitiveProcessor
&
primProc
bool
hasPointSize
const
GrPipeline
&
pipeline
const
GrShaderCaps
&
shaderCaps
)
{
GR_STATIC_ASSERT
(
0
=
=
kProcessorKeysOffset
%
sizeof
(
uint32_t
)
)
;
desc
-
>
key
(
)
.
reset
(
)
;
desc
-
>
key
(
)
.
push_back_n
(
kProcessorKeysOffset
)
;
GrProcessorKeyBuilder
b
(
&
desc
-
>
key
(
)
)
;
primProc
.
getGLSLProcessorKey
(
shaderCaps
&
b
)
;
if
(
!
gen_meta_key
(
primProc
shaderCaps
0
&
b
)
)
{
desc
-
>
key
(
)
.
reset
(
)
;
return
false
;
}
for
(
int
i
=
0
;
i
<
pipeline
.
numFragmentProcessors
(
)
;
+
+
i
)
{
const
GrFragmentProcessor
&
fp
=
pipeline
.
getFragmentProcessor
(
i
)
;
if
(
!
gen_frag_proc_and_meta_keys
(
primProc
fp
shaderCaps
&
b
)
)
{
desc
-
>
key
(
)
.
reset
(
)
;
return
false
;
}
}
const
GrXferProcessor
&
xp
=
pipeline
.
getXferProcessor
(
)
;
const
GrSurfaceOrigin
*
originIfDstTexture
=
nullptr
;
GrSurfaceOrigin
origin
;
if
(
pipeline
.
dstTextureProxy
(
)
)
{
origin
=
pipeline
.
dstTextureProxy
(
)
-
>
origin
(
)
;
originIfDstTexture
=
&
origin
;
}
xp
.
getGLSLProcessorKey
(
shaderCaps
&
b
originIfDstTexture
)
;
if
(
!
gen_meta_key
(
xp
shaderCaps
&
b
)
)
{
desc
-
>
key
(
)
.
reset
(
)
;
return
false
;
}
KeyHeader
*
header
=
desc
-
>
atOffset
<
KeyHeader
kHeaderOffset
>
(
)
;
memset
(
header
0
kHeaderSize
)
;
header
-
>
fOutputSwizzle
=
shaderCaps
.
configOutputSwizzle
(
pipeline
.
proxy
(
)
-
>
config
(
)
)
.
asKey
(
)
;
header
-
>
fSnapVerticesToPixelCenters
=
pipeline
.
snapVerticesToPixelCenters
(
)
;
header
-
>
fColorFragmentProcessorCnt
=
pipeline
.
numColorFragmentProcessors
(
)
;
header
-
>
fCoverageFragmentProcessorCnt
=
pipeline
.
numCoverageFragmentProcessors
(
)
;
if
(
header
-
>
fColorFragmentProcessorCnt
!
=
pipeline
.
numColorFragmentProcessors
(
)
|
|
header
-
>
fCoverageFragmentProcessorCnt
!
=
pipeline
.
numCoverageFragmentProcessors
(
)
)
{
return
false
;
}
header
-
>
fHasPointSize
=
hasPointSize
?
1
:
0
;
return
true
;
}
