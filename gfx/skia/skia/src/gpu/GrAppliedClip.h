#
ifndef
GrAppliedClip_DEFINED
#
define
GrAppliedClip_DEFINED
#
include
"
GrScissorState
.
h
"
#
include
"
GrWindowRectsState
.
h
"
class
GrFragmentProcessor
;
class
GrAppliedClip
:
public
SkNoncopyable
{
public
:
GrAppliedClip
(
const
SkRect
&
drawBounds
)
:
fHasStencilClip
(
false
)
fClippedDrawBounds
(
drawBounds
)
{
}
const
GrScissorState
&
scissorState
(
)
const
{
return
fScissorState
;
}
const
GrWindowRectsState
&
windowRectsState
(
)
const
{
return
fWindowRectsState
;
}
GrFragmentProcessor
*
clipCoverageFragmentProcessor
(
)
const
{
return
fClipCoverageFP
.
get
(
)
;
}
bool
hasStencilClip
(
)
const
{
return
fHasStencilClip
;
}
bool
addScissor
(
const
SkIRect
&
irect
)
{
return
fScissorState
.
intersect
(
irect
)
&
&
fClippedDrawBounds
.
intersect
(
SkRect
:
:
Make
(
irect
)
)
;
}
void
addWindowRectangles
(
const
GrWindowRectsState
&
windowState
)
{
SkASSERT
(
!
fWindowRectsState
.
enabled
(
)
)
;
fWindowRectsState
=
windowState
;
}
void
addWindowRectangles
(
const
GrWindowRectangles
&
windows
const
SkIPoint
&
origin
GrWindowRectsState
:
:
Mode
mode
)
{
SkASSERT
(
!
fWindowRectsState
.
enabled
(
)
)
;
fWindowRectsState
.
set
(
windows
origin
mode
)
;
}
void
addCoverageFP
(
sk_sp
<
GrFragmentProcessor
>
fp
)
{
SkASSERT
(
!
fClipCoverageFP
)
;
fClipCoverageFP
=
fp
;
}
void
addStencilClip
(
)
{
SkASSERT
(
!
fHasStencilClip
)
;
fHasStencilClip
=
true
;
}
const
SkRect
&
clippedDrawBounds
(
)
const
{
return
fClippedDrawBounds
;
}
private
:
GrScissorState
fScissorState
;
GrWindowRectsState
fWindowRectsState
;
sk_sp
<
GrFragmentProcessor
>
fClipCoverageFP
;
bool
fHasStencilClip
;
SkRect
fClippedDrawBounds
;
typedef
SkNoncopyable
INHERITED
;
}
;
#
endif
