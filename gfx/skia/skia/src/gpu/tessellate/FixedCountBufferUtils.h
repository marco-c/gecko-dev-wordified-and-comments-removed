#
ifndef
skgpu_tessellate_FixedCountBufferUtils_DEFINED
#
define
skgpu_tessellate_FixedCountBufferUtils_DEFINED
#
include
"
src
/
gpu
/
tessellate
/
LinearTolerances
.
h
"
#
include
"
src
/
gpu
/
tessellate
/
Tessellation
.
h
"
namespace
skgpu
{
struct
VertexWriter
;
}
namespace
skgpu
:
:
tess
{
class
FixedCountCurves
{
FixedCountCurves
(
)
=
delete
;
public
:
static
constexpr
int
PreallocCount
(
int
totalCombinedPathVerbCnt
)
{
return
totalCombinedPathVerbCnt
+
(
totalCombinedPathVerbCnt
+
3
)
/
2
;
}
static
int
VertexCount
(
const
LinearTolerances
&
tolerances
)
{
int
resolveLevel
=
std
:
:
min
(
tolerances
.
requiredResolveLevel
(
)
kMaxResolveLevel
)
;
return
NumCurveTrianglesAtResolveLevel
(
resolveLevel
)
*
3
;
}
static
constexpr
size_t
VertexBufferSize
(
)
{
return
(
kMaxParametricSegments
+
1
)
*
(
2
*
sizeof
(
float
)
)
;
}
static
constexpr
size_t
IndexBufferSize
(
)
{
return
NumCurveTrianglesAtResolveLevel
(
kMaxResolveLevel
)
*
3
*
sizeof
(
uint16_t
)
;
}
static
void
WriteVertexBuffer
(
VertexWriter
size_t
bufferSize
)
;
static
void
WriteIndexBuffer
(
VertexWriter
size_t
bufferSize
)
;
}
;
class
FixedCountWedges
{
FixedCountWedges
(
)
=
delete
;
public
:
static
constexpr
int
PreallocCount
(
int
totalCombinedPathVerbCnt
)
{
return
(
totalCombinedPathVerbCnt
*
5
+
3
)
/
4
;
}
static
int
VertexCount
(
const
LinearTolerances
&
tolerances
)
{
int
resolveLevel
=
std
:
:
min
(
tolerances
.
requiredResolveLevel
(
)
kMaxResolveLevel
)
;
return
(
NumCurveTrianglesAtResolveLevel
(
resolveLevel
)
+
1
)
*
3
;
}
static
constexpr
size_t
VertexBufferSize
(
)
{
return
(
(
kMaxParametricSegments
+
1
)
+
1
)
*
(
2
*
sizeof
(
float
)
)
;
}
static
constexpr
size_t
IndexBufferSize
(
)
{
return
(
NumCurveTrianglesAtResolveLevel
(
kMaxResolveLevel
)
+
1
)
*
3
*
sizeof
(
uint16_t
)
;
}
static
void
WriteVertexBuffer
(
VertexWriter
size_t
bufferSize
)
;
static
void
WriteIndexBuffer
(
VertexWriter
size_t
bufferSize
)
;
}
;
class
FixedCountStrokes
{
FixedCountStrokes
(
)
=
delete
;
public
:
static
constexpr
int
kMaxEdges
=
(
1
<
<
14
)
-
1
;
static
constexpr
int
kMaxEdgesNoVertexIDs
=
1024
;
static
constexpr
int
PreallocCount
(
int
totalCombinedPathVerbCnt
)
{
return
(
totalCombinedPathVerbCnt
*
2
)
+
8
;
}
static
int
VertexCount
(
const
LinearTolerances
&
tolerances
)
{
return
std
:
:
min
(
tolerances
.
requiredStrokeEdges
(
)
kMaxEdges
)
*
2
;
}
static
constexpr
size_t
VertexBufferSize
(
)
{
return
2
*
kMaxEdgesNoVertexIDs
*
sizeof
(
float
)
;
}
static
void
WriteVertexBuffer
(
VertexWriter
size_t
bufferSize
)
;
}
;
}
#
endif
