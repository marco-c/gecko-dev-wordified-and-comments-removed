#
include
"
GrSurfaceContext
.
h
"
#
include
"
GrContextPriv
.
h
"
#
include
"
SkColorSpace_Base
.
h
"
#
include
"
SkGr
.
h
"
#
include
"
.
.
/
private
/
GrAuditTrail
.
h
"
GrSurfaceContext
:
:
GrSurfaceContext
(
GrContext
*
context
GrDrawingManager
*
drawingMgr
sk_sp
<
SkColorSpace
>
colorSpace
GrAuditTrail
*
auditTrail
GrSingleOwner
*
singleOwner
)
:
fContext
(
context
)
fColorSpace
(
std
:
:
move
(
colorSpace
)
)
fAuditTrail
(
auditTrail
)
fDrawingManager
(
drawingMgr
)
#
ifdef
SK_DEBUG
fSingleOwner
(
singleOwner
)
#
endif
{
}
bool
GrSurfaceContext
:
:
readPixels
(
const
SkImageInfo
&
dstInfo
void
*
dstBuffer
size_t
dstRowBytes
int
x
int
y
uint32_t
flags
)
{
GrPixelConfig
config
=
SkImageInfo2GrPixelConfig
(
dstInfo
*
fContext
-
>
caps
(
)
)
;
if
(
kUnknown_GrPixelConfig
=
=
config
)
{
return
false
;
}
if
(
kUnpremul_SkAlphaType
=
=
dstInfo
.
alphaType
(
)
)
{
flags
|
=
GrContextPriv
:
:
kUnpremul_PixelOpsFlag
;
}
return
fContext
-
>
contextPriv
(
)
.
readSurfacePixels
(
this
-
>
asSurfaceProxy
(
)
this
-
>
getColorSpace
(
)
x
y
dstInfo
.
width
(
)
dstInfo
.
height
(
)
config
dstInfo
.
colorSpace
(
)
dstBuffer
dstRowBytes
flags
)
;
}
bool
GrSurfaceContext
:
:
writePixels
(
const
SkImageInfo
&
srcInfo
const
void
*
srcBuffer
size_t
srcRowBytes
int
x
int
y
uint32_t
flags
)
{
GrPixelConfig
config
=
SkImageInfo2GrPixelConfig
(
srcInfo
*
fContext
-
>
caps
(
)
)
;
if
(
kUnknown_GrPixelConfig
=
=
config
)
{
return
false
;
}
if
(
kUnpremul_SkAlphaType
=
=
srcInfo
.
alphaType
(
)
)
{
flags
|
=
GrContextPriv
:
:
kUnpremul_PixelOpsFlag
;
}
return
fContext
-
>
contextPriv
(
)
.
writeSurfacePixels
(
this
-
>
asSurfaceProxy
(
)
this
-
>
getColorSpace
(
)
x
y
srcInfo
.
width
(
)
srcInfo
.
height
(
)
config
srcInfo
.
colorSpace
(
)
srcBuffer
srcRowBytes
flags
)
;
}
