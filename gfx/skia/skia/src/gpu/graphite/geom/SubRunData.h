#
ifndef
skgpu_graphite_geom_SubRunData_DEFINED
#
define
skgpu_graphite_geom_SubRunData_DEFINED
#
include
"
src
/
gpu
/
graphite
/
geom
/
Rect
.
h
"
namespace
sktext
:
:
gpu
{
class
AtlasSubRun
;
}
namespace
skgpu
:
:
graphite
{
class
Recorder
;
class
SubRunData
{
public
:
SubRunData
(
)
=
delete
;
SubRunData
(
const
SubRunData
&
subRun
)
=
default
;
SubRunData
(
SubRunData
&
&
)
=
delete
;
SubRunData
(
const
sktext
:
:
gpu
:
:
AtlasSubRun
*
subRun
sk_sp
<
SkRefCnt
>
supportDataKeepAlive
Rect
deviceBounds
int
startGlyphIndex
int
glyphCount
Recorder
*
recorder
)
:
fSubRun
(
subRun
)
fSupportDataKeepAlive
(
std
:
:
move
(
supportDataKeepAlive
)
)
fBounds
(
deviceBounds
)
fStartGlyphIndex
(
startGlyphIndex
)
fGlyphCount
(
glyphCount
)
fRecorder
(
recorder
)
{
}
~
SubRunData
(
)
=
default
;
SubRunData
&
operator
=
(
SubRunData
&
&
)
=
delete
;
SubRunData
&
operator
=
(
const
SubRunData
&
that
)
=
default
;
Rect
bounds
(
)
const
{
return
fBounds
;
}
const
sktext
:
:
gpu
:
:
AtlasSubRun
*
subRun
(
)
const
{
return
fSubRun
;
}
int
startGlyphIndex
(
)
const
{
return
fStartGlyphIndex
;
}
int
glyphCount
(
)
const
{
return
fGlyphCount
;
}
Recorder
*
recorder
(
)
const
{
return
fRecorder
;
}
private
:
const
sktext
:
:
gpu
:
:
AtlasSubRun
*
fSubRun
;
sk_sp
<
SkRefCnt
>
fSupportDataKeepAlive
;
Rect
fBounds
;
int
fStartGlyphIndex
;
int
fGlyphCount
;
Recorder
*
fRecorder
;
}
;
}
#
endif
