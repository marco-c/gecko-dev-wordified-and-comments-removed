#
ifndef
skgpu_graphite_geom_Transform_DEFINED
#
define
skgpu_graphite_geom_Transform_DEFINED
#
include
"
include
/
core
/
SkM44
.
h
"
#
include
<
algorithm
>
namespace
skgpu
:
:
graphite
{
class
Rect
;
class
Transform
{
public
:
enum
class
Type
:
unsigned
{
kIdentity
kSimpleRectStaysRect
kRectStaysRect
kAffine
kProjection
kInvalid
}
;
explicit
Transform
(
const
SkM44
&
m
)
;
Transform
(
const
Transform
&
t
)
=
default
;
static
const
Transform
&
Identity
(
)
;
static
const
Transform
&
Invalid
(
)
;
Transform
&
operator
=
(
const
Transform
&
t
)
=
default
;
operator
const
SkM44
&
(
)
const
{
return
fM
;
}
operator
SkMatrix
(
)
const
{
return
fM
.
asM33
(
)
;
}
bool
operator
=
=
(
const
Transform
&
t
)
const
;
bool
operator
!
=
(
const
Transform
&
t
)
const
{
return
!
(
*
this
=
=
t
)
;
}
const
SkM44
&
matrix
(
)
const
{
return
fM
;
}
const
SkM44
&
inverse
(
)
const
{
return
fInvM
;
}
const
SkV2
&
scaleFactors
(
)
const
{
return
fScale
;
}
float
maxScaleFactor
(
)
const
{
return
std
:
:
max
(
fScale
.
x
fScale
.
y
)
;
}
Type
type
(
)
const
{
return
fType
;
}
bool
valid
(
)
const
{
return
fType
!
=
Type
:
:
kInvalid
;
}
Rect
mapRect
(
const
Rect
&
rect
)
const
;
Rect
inverseMapRect
(
const
Rect
&
rect
)
const
;
void
mapPoints
(
const
Rect
&
localRect
SkV4
deviceOut
[
4
]
)
const
;
void
mapPoints
(
const
SkV2
*
localIn
SkV4
*
deviceOut
int
count
)
const
;
void
mapPoints
(
const
SkV4
*
localIn
SkV4
*
deviceOut
int
count
)
const
;
void
inverseMapPoints
(
const
SkV4
*
deviceIn
SkV4
*
localOut
int
count
)
const
;
Transform
preTranslate
(
float
x
float
y
)
const
;
Transform
postTranslate
(
float
x
float
y
)
const
;
Transform
concat
(
const
Transform
&
t
)
const
;
Transform
concat
(
const
SkM44
&
t
)
const
{
return
Transform
(
fM
*
t
)
;
}
Transform
concatInverse
(
const
Transform
&
t
)
const
;
Transform
concatInverse
(
const
SkM44
&
t
)
const
;
private
:
Transform
(
const
SkM44
&
m
const
SkM44
&
invM
Type
type
const
SkV2
scale
)
:
fM
(
m
)
fInvM
(
invM
)
fType
(
type
)
fScale
(
scale
)
{
}
SkM44
fM
;
SkM44
fInvM
;
Type
fType
;
SkV2
fScale
;
}
;
}
#
endif
