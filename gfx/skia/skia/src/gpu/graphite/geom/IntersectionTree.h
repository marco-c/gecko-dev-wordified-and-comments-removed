#
ifndef
skgpu_graphite_geom_IntersectionTree_DEFINED
#
define
skgpu_graphite_geom_IntersectionTree_DEFINED
#
include
"
include
/
private
/
base
/
SkAlign
.
h
"
#
include
"
src
/
base
/
SkArenaAlloc
.
h
"
#
include
"
src
/
gpu
/
graphite
/
geom
/
Rect
.
h
"
namespace
skgpu
:
:
graphite
{
class
IntersectionTree
{
public
:
enum
class
SplitType
:
bool
{
kX
kY
}
;
IntersectionTree
(
)
;
bool
add
(
Rect
rect
)
{
if
(
rect
.
isEmptyNegativeOrNaN
(
)
)
{
return
true
;
}
if
(
!
fRoot
-
>
intersects
(
rect
)
)
{
fRoot
=
fRoot
-
>
addNonIntersecting
(
rect
&
fArena
)
;
return
true
;
}
return
false
;
}
private
:
class
Node
{
public
:
virtual
~
Node
(
)
=
default
;
virtual
bool
intersects
(
Rect
)
=
0
;
virtual
Node
*
addNonIntersecting
(
Rect
SkArenaAlloc
*
)
=
0
;
}
;
template
<
SplitType
kSplitType
>
class
TreeNode
;
class
LeafNode
;
constexpr
static
int
kTreeNodeSize
=
SkAlignTo
(
sizeof
(
void
*
)
+
sizeof
(
float
)
alignof
(
void
*
)
)
+
2
*
sizeof
(
Node
*
)
;
constexpr
static
int
kLeafNodeSize
=
16
+
(
2
+
64
)
*
sizeof
(
Rect
)
;
constexpr
static
int
kPadSize
=
256
;
SkArenaAlloc
fArena
{
kLeafNodeSize
+
kTreeNodeSize
+
kPadSize
*
2
}
;
Node
*
fRoot
;
}
;
}
#
endif
