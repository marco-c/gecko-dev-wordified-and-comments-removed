#
ifndef
skgpu_graphite_FactoryFunctions_DEFINED
#
define
skgpu_graphite_FactoryFunctions_DEFINED
#
include
"
include
/
core
/
SkBlendMode
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSpan
.
h
"
#
include
"
include
/
effects
/
SkRuntimeEffect
.
h
"
namespace
skgpu
:
:
graphite
{
class
PrecompileBase
;
class
PrecompileBlender
;
class
PrecompileColorFilter
;
class
PrecompileImageFilter
;
class
PrecompileMaskFilter
;
class
PrecompileShader
;
class
PrecompileShaders
{
public
:
static
sk_sp
<
PrecompileShader
>
Color
(
)
;
static
sk_sp
<
PrecompileShader
>
Blend
(
SkSpan
<
const
sk_sp
<
PrecompileBlender
>
>
blenders
SkSpan
<
const
sk_sp
<
PrecompileShader
>
>
dsts
SkSpan
<
const
sk_sp
<
PrecompileShader
>
>
srcs
)
;
static
sk_sp
<
PrecompileShader
>
Blend
(
SkSpan
<
SkBlendMode
>
blendModes
SkSpan
<
const
sk_sp
<
PrecompileShader
>
>
dsts
SkSpan
<
const
sk_sp
<
PrecompileShader
>
>
srcs
)
;
static
sk_sp
<
PrecompileShader
>
Image
(
)
;
static
sk_sp
<
PrecompileShader
>
LinearGradient
(
)
;
static
sk_sp
<
PrecompileShader
>
RadialGradient
(
)
;
static
sk_sp
<
PrecompileShader
>
TwoPointConicalGradient
(
)
;
static
sk_sp
<
PrecompileShader
>
SweepGradient
(
)
;
static
sk_sp
<
PrecompileShader
>
LocalMatrix
(
sk_sp
<
PrecompileShader
>
wrapped
)
;
static
sk_sp
<
PrecompileShader
>
ColorFilter
(
sk_sp
<
PrecompileShader
>
sk_sp
<
PrecompileColorFilter
>
)
;
private
:
PrecompileShaders
(
)
=
delete
;
}
;
class
PrecompileMaskFilters
{
public
:
static
sk_sp
<
PrecompileMaskFilter
>
Blur
(
)
;
private
:
PrecompileMaskFilters
(
)
=
delete
;
}
;
class
PrecompileColorFilters
{
public
:
static
sk_sp
<
PrecompileColorFilter
>
Blend
(
)
;
static
sk_sp
<
PrecompileColorFilter
>
Matrix
(
)
;
static
sk_sp
<
PrecompileColorFilter
>
HSLAMatrix
(
)
;
private
:
PrecompileColorFilters
(
)
=
delete
;
}
;
class
PrecompileImageFilters
{
public
:
static
sk_sp
<
PrecompileImageFilter
>
Blur
(
)
;
static
sk_sp
<
PrecompileImageFilter
>
Image
(
)
;
private
:
PrecompileImageFilters
(
)
=
delete
;
}
;
class
PrecompileChildPtr
{
public
:
PrecompileChildPtr
(
)
=
default
;
PrecompileChildPtr
(
sk_sp
<
PrecompileShader
>
)
;
PrecompileChildPtr
(
sk_sp
<
PrecompileColorFilter
>
)
;
PrecompileChildPtr
(
sk_sp
<
PrecompileBlender
>
)
;
PrecompileChildPtr
(
sk_sp
<
PrecompileBase
>
)
;
std
:
:
optional
<
SkRuntimeEffect
:
:
ChildType
>
type
(
)
const
;
PrecompileShader
*
shader
(
)
const
;
PrecompileColorFilter
*
colorFilter
(
)
const
;
PrecompileBlender
*
blender
(
)
const
;
PrecompileBase
*
base
(
)
const
{
return
fChild
.
get
(
)
;
}
private
:
sk_sp
<
PrecompileBase
>
fChild
;
}
;
using
PrecompileChildOptions
=
SkSpan
<
const
PrecompileChildPtr
>
;
sk_sp
<
PrecompileShader
>
MakePrecompileShader
(
sk_sp
<
SkRuntimeEffect
>
effect
SkSpan
<
const
PrecompileChildOptions
>
childOptions
=
{
}
)
;
sk_sp
<
PrecompileColorFilter
>
MakePrecompileColorFilter
(
sk_sp
<
SkRuntimeEffect
>
effect
SkSpan
<
const
PrecompileChildOptions
>
childOptions
=
{
}
)
;
sk_sp
<
PrecompileBlender
>
MakePrecompileBlender
(
sk_sp
<
SkRuntimeEffect
>
effect
SkSpan
<
const
PrecompileChildOptions
>
childOptions
=
{
}
)
;
}
#
endif
