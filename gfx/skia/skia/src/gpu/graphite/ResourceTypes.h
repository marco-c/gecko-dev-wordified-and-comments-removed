#
ifndef
skgpu_graphite_ResourceTypes_DEFINED
#
define
skgpu_graphite_ResourceTypes_DEFINED
#
include
"
include
/
gpu
/
graphite
/
GraphiteTypes
.
h
"
#
include
"
include
/
private
/
base
/
SkTo
.
h
"
#
include
"
src
/
core
/
SkEnumBitMask
.
h
"
namespace
skgpu
:
:
graphite
{
class
Buffer
;
enum
class
DepthStencilFlags
:
int
{
kNone
=
0b000
kDepth
=
0b001
kStencil
=
0b010
kDepthStencil
=
kDepth
|
kStencil
}
;
SK_MAKE_BITMASK_OPS
(
DepthStencilFlags
)
;
enum
class
BufferType
:
int
{
kVertex
kIndex
kXferCpuToGpu
kXferGpuToCpu
kUniform
kStorage
kIndirect
kVertexStorage
kIndexStorage
kLast
=
kIndexStorage
}
;
static
const
int
kBufferTypeCount
=
static_cast
<
int
>
(
BufferType
:
:
kLast
)
+
1
;
enum
class
Layout
{
kInvalid
=
0
kStd140
kStd430
kMetal
}
;
enum
class
PrioritizeGpuReads
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
class
Discardable
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
class
Ownership
{
kOwned
kWrapped
}
;
using
ResourceType
=
uint32_t
;
enum
class
Shareable
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
class
LastRemovedRef
{
kUsage
kCommandBuffer
kCache
}
;
struct
BindBufferInfo
{
const
Buffer
*
fBuffer
=
nullptr
;
size_t
fOffset
=
0
;
operator
bool
(
)
const
{
return
SkToBool
(
fBuffer
)
;
}
bool
operator
=
=
(
const
BindBufferInfo
&
o
)
const
{
return
fBuffer
=
=
o
.
fBuffer
&
&
(
!
fBuffer
|
|
fOffset
=
=
o
.
fOffset
)
;
}
bool
operator
!
=
(
const
BindBufferInfo
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
}
;
}
;
#
endif
