#
ifndef
skgpu_graphite_Renderer_DEFINED
#
define
skgpu_graphite_Renderer_DEFINED
#
include
"
include
/
core
/
SkSpan
.
h
"
#
include
"
include
/
core
/
SkString
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
src
/
core
/
SkEnumBitMask
.
h
"
#
include
"
src
/
gpu
/
graphite
/
Attribute
.
h
"
#
include
"
src
/
gpu
/
graphite
/
DrawTypes
.
h
"
#
include
"
src
/
gpu
/
graphite
/
ResourceTypes
.
h
"
#
include
"
src
/
gpu
/
graphite
/
Uniform
.
h
"
#
include
<
array
>
#
include
<
initializer_list
>
#
include
<
string
>
#
include
<
string_view
>
#
include
<
vector
>
enum
class
SkPathFillType
;
namespace
skgpu
{
enum
class
MaskFormat
;
}
namespace
skgpu
:
:
graphite
{
class
DrawWriter
;
class
DrawParams
;
class
PipelineDataGatherer
;
class
ResourceProvider
;
class
TextureDataBlock
;
struct
ResourceBindingRequirements
;
struct
Varying
{
const
char
*
fName
;
SkSLType
fType
;
}
;
class
RenderStep
{
public
:
virtual
~
RenderStep
(
)
=
default
;
virtual
void
writeVertices
(
DrawWriter
*
const
DrawParams
&
int
ssboIndex
)
const
=
0
;
virtual
void
writeUniformsAndTextures
(
const
DrawParams
&
PipelineDataGatherer
*
)
const
=
0
;
virtual
std
:
:
string
vertexSkSL
(
)
const
=
0
;
virtual
std
:
:
string
texturesAndSamplersSkSL
(
const
ResourceBindingRequirements
&
int
*
nextBindingIndex
)
const
{
return
R
"
(
)
"
;
}
virtual
const
char
*
fragmentCoverageSkSL
(
)
const
{
return
R
"
(
)
"
;
}
virtual
const
char
*
fragmentColorSkSL
(
)
const
{
return
R
"
(
)
"
;
}
uint32_t
uniqueID
(
)
const
{
return
fUniqueID
;
}
const
char
*
name
(
)
const
{
return
fName
.
c_str
(
)
;
}
bool
requiresMSAA
(
)
const
{
return
fFlags
&
Flags
:
:
kRequiresMSAA
;
}
bool
performsShading
(
)
const
{
return
fFlags
&
Flags
:
:
kPerformsShading
;
}
bool
hasTextures
(
)
const
{
return
fFlags
&
Flags
:
:
kHasTextures
;
}
bool
emitsCoverage
(
)
const
{
return
fFlags
&
Flags
:
:
kEmitsCoverage
;
}
bool
emitsPrimitiveColor
(
)
const
{
return
fFlags
&
Flags
:
:
kEmitsPrimitiveColor
;
}
PrimitiveType
primitiveType
(
)
const
{
return
fPrimitiveType
;
}
size_t
vertexStride
(
)
const
{
return
fVertexStride
;
}
size_t
instanceStride
(
)
const
{
return
fInstanceStride
;
}
size_t
numUniforms
(
)
const
{
return
fUniforms
.
size
(
)
;
}
size_t
numVertexAttributes
(
)
const
{
return
fVertexAttrs
.
size
(
)
;
}
size_t
numInstanceAttributes
(
)
const
{
return
fInstanceAttrs
.
size
(
)
;
}
static
const
char
*
ssboIndex
(
)
{
return
"
ssboIndex
"
;
}
SkSpan
<
const
Uniform
>
uniforms
(
)
const
{
return
SkSpan
(
fUniforms
)
;
}
SkSpan
<
const
Attribute
>
vertexAttributes
(
)
const
{
return
SkSpan
(
fVertexAttrs
)
;
}
SkSpan
<
const
Attribute
>
instanceAttributes
(
)
const
{
return
SkSpan
(
fInstanceAttrs
)
;
}
SkSpan
<
const
Varying
>
varyings
(
)
const
{
return
SkSpan
(
fVaryings
)
;
}
const
DepthStencilSettings
&
depthStencilSettings
(
)
const
{
return
fDepthStencilSettings
;
}
SkEnumBitMask
<
DepthStencilFlags
>
depthStencilFlags
(
)
const
{
return
(
fDepthStencilSettings
.
fStencilTestEnabled
?
DepthStencilFlags
:
:
kStencil
:
DepthStencilFlags
:
:
kNone
)
|
(
fDepthStencilSettings
.
fDepthTestEnabled
|
|
fDepthStencilSettings
.
fDepthWriteEnabled
?
DepthStencilFlags
:
:
kDepth
:
DepthStencilFlags
:
:
kNone
)
;
}
protected
:
enum
class
Flags
:
unsigned
{
kNone
=
0b00000
kRequiresMSAA
=
0b00001
kPerformsShading
=
0b00010
kHasTextures
=
0b00100
kEmitsCoverage
=
0b01000
kEmitsPrimitiveColor
=
0b10000
}
;
SK_DECL_BITMASK_OPS_FRIENDS
(
Flags
)
;
RenderStep
(
std
:
:
string_view
className
std
:
:
string_view
variantName
SkEnumBitMask
<
Flags
>
flags
std
:
:
initializer_list
<
Uniform
>
uniforms
PrimitiveType
primitiveType
DepthStencilSettings
depthStencilSettings
SkSpan
<
const
Attribute
>
vertexAttrs
SkSpan
<
const
Attribute
>
instanceAttrs
SkSpan
<
const
Varying
>
varyings
=
{
}
)
;
private
:
friend
class
Renderer
;
RenderStep
(
const
RenderStep
&
)
=
delete
;
RenderStep
(
RenderStep
&
&
)
=
delete
;
uint32_t
fUniqueID
;
SkEnumBitMask
<
Flags
>
fFlags
;
PrimitiveType
fPrimitiveType
;
DepthStencilSettings
fDepthStencilSettings
;
std
:
:
vector
<
Uniform
>
fUniforms
;
std
:
:
vector
<
Attribute
>
fVertexAttrs
;
std
:
:
vector
<
Attribute
>
fInstanceAttrs
;
std
:
:
vector
<
Varying
>
fVaryings
;
size_t
fVertexStride
;
size_t
fInstanceStride
;
std
:
:
string
fName
;
}
;
SK_MAKE_BITMASK_OPS
(
RenderStep
:
:
Flags
)
;
class
Renderer
{
using
StepFlags
=
RenderStep
:
:
Flags
;
public
:
static
constexpr
int
kMaxRenderSteps
=
4
;
const
RenderStep
&
step
(
int
i
)
const
{
SkASSERT
(
i
>
=
0
&
&
i
<
fStepCount
)
;
return
*
fSteps
[
i
]
;
}
SkSpan
<
const
RenderStep
*
const
>
steps
(
)
const
{
SkASSERT
(
fStepCount
>
0
)
;
return
{
fSteps
.
data
(
)
static_cast
<
size_t
>
(
fStepCount
)
}
;
}
const
char
*
name
(
)
const
{
return
fName
.
c_str
(
)
;
}
DrawTypeFlags
drawTypes
(
)
const
{
return
fDrawTypes
;
}
int
numRenderSteps
(
)
const
{
return
fStepCount
;
}
bool
requiresMSAA
(
)
const
{
return
fStepFlags
&
StepFlags
:
:
kRequiresMSAA
;
}
bool
emitsCoverage
(
)
const
{
return
fStepFlags
&
StepFlags
:
:
kEmitsCoverage
;
}
bool
emitsPrimitiveColor
(
)
const
{
return
fStepFlags
&
StepFlags
:
:
kEmitsPrimitiveColor
;
}
SkEnumBitMask
<
DepthStencilFlags
>
depthStencilFlags
(
)
const
{
return
fDepthStencilFlags
;
}
private
:
friend
class
RendererProvider
;
Renderer
(
std
:
:
string_view
name
DrawTypeFlags
drawTypes
const
RenderStep
*
s1
)
:
Renderer
(
name
drawTypes
std
:
:
array
<
const
RenderStep
*
1
>
{
s1
}
)
{
}
Renderer
(
std
:
:
string_view
name
DrawTypeFlags
drawTypes
const
RenderStep
*
s1
const
RenderStep
*
s2
)
:
Renderer
(
name
drawTypes
std
:
:
array
<
const
RenderStep
*
2
>
{
s1
s2
}
)
{
}
Renderer
(
std
:
:
string_view
name
DrawTypeFlags
drawTypes
const
RenderStep
*
s1
const
RenderStep
*
s2
const
RenderStep
*
s3
)
:
Renderer
(
name
drawTypes
std
:
:
array
<
const
RenderStep
*
3
>
{
s1
s2
s3
}
)
{
}
Renderer
(
std
:
:
string_view
name
DrawTypeFlags
drawTypes
const
RenderStep
*
s1
const
RenderStep
*
s2
const
RenderStep
*
s3
const
RenderStep
*
s4
)
:
Renderer
(
name
drawTypes
std
:
:
array
<
const
RenderStep
*
4
>
{
s1
s2
s3
s4
}
)
{
}
template
<
size_t
N
>
Renderer
(
std
:
:
string_view
name
DrawTypeFlags
drawTypes
std
:
:
array
<
const
RenderStep
*
N
>
steps
)
:
fName
(
name
)
fDrawTypes
(
drawTypes
)
fStepCount
(
SkTo
<
int
>
(
N
)
)
{
static_assert
(
N
<
=
kMaxRenderSteps
)
;
for
(
int
i
=
0
;
i
<
fStepCount
;
+
+
i
)
{
fSteps
[
i
]
=
steps
[
i
]
;
fStepFlags
|
=
fSteps
[
i
]
-
>
fFlags
;
fDepthStencilFlags
|
=
fSteps
[
i
]
-
>
depthStencilFlags
(
)
;
}
SkASSERT
(
fStepFlags
&
RenderStep
:
:
Flags
:
:
kPerformsShading
)
;
}
Renderer
(
)
:
fSteps
(
)
fName
(
"
"
)
fStepCount
(
0
)
{
}
Renderer
&
operator
=
(
Renderer
&
&
)
=
default
;
std
:
:
array
<
const
RenderStep
*
kMaxRenderSteps
>
fSteps
;
std
:
:
string
fName
;
DrawTypeFlags
fDrawTypes
=
DrawTypeFlags
:
:
kAll
;
int
fStepCount
;
SkEnumBitMask
<
StepFlags
>
fStepFlags
=
StepFlags
:
:
kNone
;
SkEnumBitMask
<
DepthStencilFlags
>
fDepthStencilFlags
=
DepthStencilFlags
:
:
kNone
;
}
;
}
#
endif
