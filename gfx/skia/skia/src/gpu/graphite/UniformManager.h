#
ifndef
skgpu_UniformManager_DEFINED
#
define
skgpu_UniformManager_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSpan
.
h
"
#
include
"
include
/
private
/
SkColorData
.
h
"
#
include
"
include
/
private
/
base
/
SkTDArray
.
h
"
#
include
"
src
/
core
/
SkSLTypeShared
.
h
"
#
include
"
src
/
gpu
/
graphite
/
ResourceTypes
.
h
"
#
include
"
src
/
gpu
/
graphite
/
Uniform
.
h
"
class
SkM44
;
class
SkMatrix
;
struct
SkPoint
;
struct
SkRect
;
struct
SkV2
;
struct
SkV4
;
namespace
skgpu
:
:
graphite
{
enum
class
CType
:
unsigned
;
class
UniformDataBlock
;
class
UniformOffsetCalculator
{
public
:
UniformOffsetCalculator
(
Layout
layout
uint32_t
startingOffset
)
;
size_t
size
(
)
const
{
return
fOffset
;
}
size_t
advanceOffset
(
SkSLType
type
unsigned
int
count
)
;
protected
:
SkSLType
getUniformTypeForLayout
(
SkSLType
type
)
;
void
setLayout
(
Layout
)
;
using
WriteUniformFn
=
uint32_t
(
*
)
(
SkSLType
type
CType
ctype
void
*
dest
int
n
const
void
*
src
)
;
WriteUniformFn
fWriteUniform
;
Layout
fLayout
;
uint32_t
fOffset
=
0
;
}
;
class
UniformManager
:
public
UniformOffsetCalculator
{
public
:
UniformManager
(
Layout
layout
)
:
UniformOffsetCalculator
(
layout
0
)
{
}
UniformDataBlock
finishUniformDataBlock
(
)
;
size_t
size
(
)
const
{
return
fStorage
.
size
(
)
;
}
void
resetWithNewLayout
(
Layout
)
;
void
reset
(
)
;
void
write
(
SkSLType
type
const
void
*
src
)
;
void
writeArray
(
SkSLType
type
const
void
*
src
unsigned
int
count
)
;
void
write
(
const
Uniform
&
const
uint8_t
*
src
)
;
void
write
(
const
SkM44
&
)
;
void
write
(
const
SkPMColor4f
&
)
;
void
write
(
const
SkRect
&
)
;
void
write
(
const
SkV2
&
)
;
void
write
(
const
SkV4
&
)
;
void
write
(
const
SkPoint
&
)
;
void
write
(
float
f
)
;
void
write
(
int
)
;
void
writeArray
(
SkSpan
<
const
SkColor4f
>
)
;
void
writeArray
(
SkSpan
<
const
SkPMColor4f
>
)
;
void
writeArray
(
SkSpan
<
const
float
>
)
;
void
writeHalf
(
const
SkMatrix
&
)
;
void
writeHalfArray
(
SkSpan
<
const
float
>
)
;
void
checkReset
(
)
const
;
void
setExpectedUniforms
(
SkSpan
<
const
Uniform
>
)
;
void
checkExpected
(
SkSLType
unsigned
int
count
)
;
void
doneWithExpectedUniforms
(
)
;
private
:
void
writeInternal
(
SkSLType
type
unsigned
int
count
const
void
*
src
)
;
#
ifdef
SK_DEBUG
SkSpan
<
const
Uniform
>
fExpectedUniforms
;
int
fExpectedUniformIndex
=
0
;
#
endif
SkTDArray
<
char
>
fStorage
;
uint32_t
fReqAlignment
=
0
;
}
;
}
#
endif
