#
include
"
src
/
gpu
/
graphite
/
PaintParams
.
h
"
#
include
"
include
/
core
/
SkColorSpace
.
h
"
#
include
"
include
/
core
/
SkShader
.
h
"
#
include
"
src
/
core
/
SkBlenderBase
.
h
"
#
include
"
src
/
core
/
SkColorFilterBase
.
h
"
#
include
"
src
/
core
/
SkColorSpacePriv
.
h
"
#
include
"
src
/
gpu
/
DitherUtils
.
h
"
#
include
"
src
/
gpu
/
graphite
/
KeyContext
.
h
"
#
include
"
src
/
gpu
/
graphite
/
KeyHelpers
.
h
"
#
include
"
src
/
gpu
/
graphite
/
PaintParamsKey
.
h
"
#
include
"
src
/
gpu
/
graphite
/
PipelineData
.
h
"
#
include
"
src
/
gpu
/
graphite
/
Uniform
.
h
"
#
include
"
src
/
shaders
/
SkShaderBase
.
h
"
namespace
skgpu
:
:
graphite
{
namespace
{
bool
should_dither
(
const
PaintParams
&
p
SkColorType
dstCT
)
{
if
(
!
p
.
dither
(
)
)
{
return
false
;
}
if
(
dstCT
=
=
kUnknown_SkColorType
)
{
return
false
;
}
if
(
dstCT
=
=
kRGB_565_SkColorType
|
|
dstCT
=
=
kARGB_4444_SkColorType
)
{
return
true
;
}
return
p
.
shader
(
)
&
&
!
as_SB
(
p
.
shader
(
)
)
-
>
isConstant
(
)
;
}
}
PaintParams
:
:
PaintParams
(
const
SkColor4f
&
color
sk_sp
<
SkBlender
>
finalBlender
sk_sp
<
SkShader
>
shader
sk_sp
<
SkColorFilter
>
colorFilter
sk_sp
<
SkBlender
>
primitiveBlender
bool
skipColorXform
bool
dither
)
:
fColor
(
color
)
fFinalBlender
(
std
:
:
move
(
finalBlender
)
)
fShader
(
std
:
:
move
(
shader
)
)
fColorFilter
(
std
:
:
move
(
colorFilter
)
)
fPrimitiveBlender
(
std
:
:
move
(
primitiveBlender
)
)
fSkipColorXform
(
skipColorXform
)
fDither
(
dither
)
{
}
PaintParams
:
:
PaintParams
(
const
SkPaint
&
paint
sk_sp
<
SkBlender
>
primitiveBlender
bool
skipColorXform
)
:
fColor
(
paint
.
getColor4f
(
)
)
fFinalBlender
(
paint
.
refBlender
(
)
)
fShader
(
paint
.
refShader
(
)
)
fColorFilter
(
paint
.
refColorFilter
(
)
)
fPrimitiveBlender
(
std
:
:
move
(
primitiveBlender
)
)
fSkipColorXform
(
skipColorXform
)
fDither
(
paint
.
isDither
(
)
)
{
}
PaintParams
:
:
PaintParams
(
const
PaintParams
&
other
)
=
default
;
PaintParams
:
:
~
PaintParams
(
)
=
default
;
PaintParams
&
PaintParams
:
:
operator
=
(
const
PaintParams
&
other
)
=
default
;
std
:
:
optional
<
SkBlendMode
>
PaintParams
:
:
asFinalBlendMode
(
)
const
{
return
fFinalBlender
?
as_BB
(
fFinalBlender
)
-
>
asBlendMode
(
)
:
SkBlendMode
:
:
kSrcOver
;
}
sk_sp
<
SkBlender
>
PaintParams
:
:
refFinalBlender
(
)
const
{
return
fFinalBlender
;
}
sk_sp
<
SkShader
>
PaintParams
:
:
refShader
(
)
const
{
return
fShader
;
}
sk_sp
<
SkColorFilter
>
PaintParams
:
:
refColorFilter
(
)
const
{
return
fColorFilter
;
}
sk_sp
<
SkBlender
>
PaintParams
:
:
refPrimitiveBlender
(
)
const
{
return
fPrimitiveBlender
;
}
SkColor4f
PaintParams
:
:
Color4fPrepForDst
(
SkColor4f
srcColor
const
SkColorInfo
&
dstColorInfo
)
{
SkColorSpaceXformSteps
steps
(
sk_srgb_singleton
(
)
kUnpremul_SkAlphaType
dstColorInfo
.
colorSpace
(
)
kUnpremul_SkAlphaType
)
;
SkColor4f
result
=
srcColor
;
steps
.
apply
(
result
.
vec
(
)
)
;
return
result
;
}
void
PaintParams
:
:
toKey
(
const
KeyContext
&
keyContext
PaintParamsKeyBuilder
*
builder
PipelineDataGatherer
*
gatherer
)
const
{
SolidColorShaderBlock
:
:
BeginBlock
(
keyContext
builder
gatherer
keyContext
.
paintColor
(
)
)
;
builder
-
>
endBlock
(
)
;
if
(
fShader
)
{
as_SB
(
fShader
)
-
>
addToKey
(
keyContext
builder
gatherer
)
;
}
if
(
fPrimitiveBlender
)
{
as_BB
(
fPrimitiveBlender
)
-
>
addToKey
(
keyContext
builder
gatherer
DstColorType
:
:
kPrimitive
)
;
}
auto
alphaColorFilter
=
SkColorFilters
:
:
Blend
(
{
0
0
0
fColor
.
fA
}
nullptr
SkBlendMode
:
:
kDstIn
)
;
if
(
alphaColorFilter
)
{
as_CFB
(
alphaColorFilter
)
-
>
addToKey
(
keyContext
builder
gatherer
)
;
}
if
(
fColorFilter
)
{
as_CFB
(
fColorFilter
)
-
>
addToKey
(
keyContext
builder
gatherer
)
;
}
#
ifndef
SK_IGNORE_GPU_DITHER
SkColorType
ct
=
keyContext
.
dstColorInfo
(
)
.
colorType
(
)
;
if
(
should_dither
(
*
this
ct
)
)
{
DitherShaderBlock
:
:
DitherData
data
(
skgpu
:
:
DitherRangeForConfig
(
ct
)
)
;
DitherShaderBlock
:
:
BeginBlock
(
keyContext
builder
gatherer
&
data
)
;
builder
-
>
endBlock
(
)
;
}
#
endif
if
(
fFinalBlender
)
{
as_BB
(
fFinalBlender
)
-
>
addToKey
(
keyContext
builder
gatherer
DstColorType
:
:
kSurface
)
;
}
else
{
BlendModeBlock
:
:
BeginBlock
(
keyContext
builder
gatherer
SkBlendMode
:
:
kSrcOver
)
;
builder
-
>
endBlock
(
)
;
}
SkASSERT
(
builder
-
>
sizeInBytes
(
)
>
0
)
;
}
}
