#
ifndef
skgpu_graphite_AtlasManager_DEFINED
#
define
skgpu_graphite_AtlasManager_DEFINED
#
include
"
include
/
gpu
/
graphite
/
TextureInfo
.
h
"
#
include
"
src
/
gpu
/
AtlasTypes
.
h
"
#
include
"
src
/
gpu
/
graphite
/
Caps
.
h
"
#
include
"
src
/
gpu
/
graphite
/
DrawAtlas
.
h
"
namespace
sktext
:
:
gpu
{
class
Glyph
;
}
class
SkGlyph
;
namespace
skgpu
:
:
graphite
{
class
Recorder
;
class
UploadList
;
class
AtlasManager
:
public
AtlasGenerationCounter
{
public
:
AtlasManager
(
Recorder
*
)
;
~
AtlasManager
(
)
;
const
sk_sp
<
TextureProxy
>
*
getProxies
(
MaskFormat
format
unsigned
int
*
numActiveProxies
)
{
format
=
this
-
>
resolveMaskFormat
(
format
)
;
if
(
this
-
>
initAtlas
(
format
)
)
{
*
numActiveProxies
=
this
-
>
getAtlas
(
format
)
-
>
numActivePages
(
)
;
return
this
-
>
getAtlas
(
format
)
-
>
getProxies
(
)
;
}
*
numActiveProxies
=
0
;
return
nullptr
;
}
void
freeAll
(
)
;
bool
hasGlyph
(
MaskFormat
sktext
:
:
gpu
:
:
Glyph
*
)
;
DrawAtlas
:
:
ErrorCode
addGlyphToAtlas
(
const
SkGlyph
&
sktext
:
:
gpu
:
:
Glyph
*
int
srcPadding
)
;
void
addGlyphToBulkAndSetUseToken
(
BulkUsePlotUpdater
*
MaskFormat
sktext
:
:
gpu
:
:
Glyph
*
AtlasToken
)
;
void
setUseTokenBulk
(
const
BulkUsePlotUpdater
&
updater
AtlasToken
token
MaskFormat
format
)
{
this
-
>
getAtlas
(
format
)
-
>
setLastUseTokenBulk
(
updater
token
)
;
}
bool
recordUploads
(
UploadList
*
bool
useCachedUploads
)
;
void
evictAtlases
(
)
{
for
(
int
i
=
0
;
i
<
kMaskFormatCount
;
+
+
i
)
{
if
(
fAtlases
[
i
]
)
{
fAtlases
[
i
]
-
>
evictAllPlots
(
)
;
}
}
}
uint64_t
atlasGeneration
(
skgpu
:
:
MaskFormat
format
)
const
{
return
this
-
>
getAtlas
(
format
)
-
>
atlasGeneration
(
)
;
}
void
setAtlasDimensionsToMinimum_ForTesting
(
)
;
void
setMaxPages_TestingOnly
(
uint32_t
maxPages
)
;
private
:
bool
initAtlas
(
MaskFormat
)
;
MaskFormat
resolveMaskFormat
(
MaskFormat
format
)
const
;
static
int
MaskFormatToAtlasIndex
(
skgpu
:
:
MaskFormat
format
)
{
return
static_cast
<
int
>
(
format
)
;
}
static
skgpu
:
:
MaskFormat
AtlasIndexToMaskFormat
(
int
idx
)
{
return
static_cast
<
skgpu
:
:
MaskFormat
>
(
idx
)
;
}
DrawAtlas
*
getAtlas
(
skgpu
:
:
MaskFormat
format
)
const
{
format
=
this
-
>
resolveMaskFormat
(
format
)
;
int
atlasIndex
=
MaskFormatToAtlasIndex
(
format
)
;
SkASSERT
(
fAtlases
[
atlasIndex
]
)
;
return
fAtlases
[
atlasIndex
]
.
get
(
)
;
}
Recorder
*
fRecorder
;
DrawAtlas
:
:
AllowMultitexturing
fAllowMultitexturing
;
std
:
:
unique_ptr
<
DrawAtlas
>
fAtlases
[
kMaskFormatCount
]
;
static_assert
(
kMaskFormatCount
=
=
3
)
;
bool
fSupportBilerpAtlas
;
DrawAtlasConfig
fAtlasConfig
;
}
;
}
#
endif
