#
include
"
src
/
gpu
/
graphite
/
mtl
/
MtlComputePipeline
.
h
"
#
include
"
include
/
gpu
/
ShaderErrorHandler
.
h
"
#
include
"
include
/
private
/
SkSLProgramKind
.
h
"
#
include
"
src
/
gpu
/
graphite
/
ComputePipelineDesc
.
h
"
#
include
"
src
/
gpu
/
graphite
/
Log
.
h
"
#
include
"
src
/
gpu
/
graphite
/
ResourceProvider
.
h
"
#
include
"
src
/
gpu
/
graphite
/
mtl
/
MtlGraphiteUtilsPriv
.
h
"
#
include
"
src
/
gpu
/
graphite
/
mtl
/
MtlSharedContext
.
h
"
#
include
"
src
/
sksl
/
SkSLProgramSettings
.
h
"
namespace
skgpu
:
:
graphite
{
sk_sp
<
MtlComputePipeline
>
MtlComputePipeline
:
:
Make
(
const
MtlSharedContext
*
sharedContext
std
:
:
string
label
MSLFunction
computeMain
)
{
id
<
MTLLibrary
>
library
=
std
:
:
get
<
0
>
(
computeMain
)
;
if
(
!
library
)
{
return
nullptr
;
}
sk_cfp
<
MTLComputePipelineDescriptor
*
>
psoDescriptor
(
[
MTLComputePipelineDescriptor
new
]
)
;
(
*
psoDescriptor
)
.
label
=
(
label
.
c_str
(
)
)
;
NSString
*
entryPointName
=
[
NSString
stringWithUTF8String
:
std
:
:
get
<
1
>
(
computeMain
)
.
c_str
(
)
]
;
(
*
psoDescriptor
)
.
computeFunction
=
[
library
newFunctionWithName
:
entryPointName
]
;
NSError
*
error
;
sk_cfp
<
id
<
MTLComputePipelineState
>
>
pso
(
[
sharedContext
-
>
device
(
)
newComputePipelineStateWithDescriptor
:
psoDescriptor
.
get
(
)
options
:
MTLPipelineOptionNone
reflection
:
NULL
error
:
&
error
]
)
;
if
(
!
pso
)
{
SKGPU_LOG_E
(
"
Compute
pipeline
creation
failure
:
\
n
%
s
"
error
.
debugDescription
.
UTF8String
)
;
return
nullptr
;
}
return
sk_sp
<
MtlComputePipeline
>
(
new
MtlComputePipeline
(
sharedContext
std
:
:
move
(
pso
)
)
)
;
}
void
MtlComputePipeline
:
:
freeGpuData
(
)
{
fPipelineState
.
reset
(
)
;
}
}
