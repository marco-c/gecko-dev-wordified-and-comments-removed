#
ifndef
skgpu_graphite_Uniform_DEFINED
#
define
skgpu_graphite_Uniform_DEFINED
#
include
"
src
/
core
/
SkSLTypeShared
.
h
"
namespace
skgpu
:
:
graphite
{
class
Uniform
{
public
:
static
constexpr
int
kNonArray
=
0
;
constexpr
Uniform
(
const
char
*
name
SkSLType
type
)
:
Uniform
(
name
type
kNonArray
)
{
}
constexpr
Uniform
(
const
char
*
name
SkSLType
type
int
count
)
:
fType
(
static_cast
<
unsigned
>
(
type
)
)
fCount
(
static_cast
<
unsigned
>
(
count
)
)
fName
(
name
)
{
}
constexpr
Uniform
(
const
Uniform
&
)
=
default
;
Uniform
&
operator
=
(
const
Uniform
&
)
=
default
;
constexpr
bool
isInitialized
(
)
const
{
return
this
-
>
type
(
)
!
=
SkSLType
:
:
kVoid
;
}
constexpr
const
char
*
name
(
)
const
{
return
fName
;
}
constexpr
SkSLType
type
(
)
const
{
return
static_cast
<
SkSLType
>
(
fType
)
;
}
constexpr
uint32_t
count
(
)
const
{
return
static_cast
<
uint32_t
>
(
fCount
)
;
}
private
:
uint32_t
fType
:
6
;
uint32_t
fCount
:
26
;
const
char
*
fName
;
static_assert
(
kSkSLTypeCount
<
=
(
1
<
<
6
)
)
;
}
;
}
#
endif
