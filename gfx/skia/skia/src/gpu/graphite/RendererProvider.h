#
ifndef
skgpu_graphite_RendererProvider_DEFINED
#
define
skgpu_graphite_RendererProvider_DEFINED
#
include
"
include
/
core
/
SkPathTypes
.
h
"
#
include
"
include
/
core
/
SkVertices
.
h
"
#
include
"
src
/
gpu
/
graphite
/
Renderer
.
h
"
#
include
<
vector
>
namespace
skgpu
:
:
graphite
{
class
Caps
;
class
StaticBufferManager
;
class
RendererProvider
{
public
:
const
Renderer
*
stencilTessellatedCurvesAndTris
(
SkPathFillType
type
)
const
{
return
&
fStencilTessellatedCurves
[
(
int
)
type
]
;
}
const
Renderer
*
stencilTessellatedWedges
(
SkPathFillType
type
)
const
{
return
&
fStencilTessellatedWedges
[
(
int
)
type
]
;
}
const
Renderer
*
convexTessellatedWedges
(
)
const
{
return
&
fConvexTessellatedWedges
;
}
const
Renderer
*
tessellatedStrokes
(
)
const
{
return
&
fTessellatedStrokes
;
}
const
Renderer
*
bitmapText
(
)
const
{
return
&
fBitmapText
;
}
const
Renderer
*
sdfText
(
bool
useLCDText
)
const
{
return
&
fSDFText
[
useLCDText
]
;
}
const
Renderer
*
vertices
(
SkVertices
:
:
VertexMode
mode
bool
hasColors
bool
hasTexCoords
)
const
{
SkASSERT
(
mode
!
=
SkVertices
:
:
kTriangleFan_VertexMode
)
;
bool
triStrip
=
mode
=
=
SkVertices
:
:
kTriangleStrip_VertexMode
;
return
&
fVertices
[
4
*
triStrip
+
2
*
hasColors
+
hasTexCoords
]
;
}
const
Renderer
*
analyticRRect
(
)
const
{
return
&
fAnalyticRRect
;
}
SkSpan
<
const
Renderer
*
const
>
renderers
(
)
const
{
return
{
fRenderers
.
data
(
)
fRenderers
.
size
(
)
}
;
}
const
RenderStep
*
lookup
(
uint32_t
uniqueID
)
const
;
private
:
static
constexpr
int
kPathTypeCount
=
4
;
static
constexpr
int
kVerticesCount
=
8
;
friend
class
Context
;
RendererProvider
(
const
Caps
*
StaticBufferManager
*
bufferManager
)
;
RendererProvider
(
const
RendererProvider
&
)
=
delete
;
RendererProvider
(
RendererProvider
&
&
)
=
delete
;
std
:
:
vector
<
std
:
:
unique_ptr
<
RenderStep
>
>
fRenderSteps
;
Renderer
fStencilTessellatedCurves
[
kPathTypeCount
]
;
Renderer
fStencilTessellatedWedges
[
kPathTypeCount
]
;
Renderer
fConvexTessellatedWedges
;
Renderer
fTessellatedStrokes
;
Renderer
fBitmapText
;
Renderer
fSDFText
[
2
]
;
Renderer
fAnalyticRRect
;
Renderer
fVertices
[
kVerticesCount
]
;
std
:
:
vector
<
const
Renderer
*
>
fRenderers
;
}
;
}
#
endif
