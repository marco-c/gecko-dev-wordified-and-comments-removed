#
include
"
src
/
gpu
/
graphite
/
PublicPrecompile
.
h
"
#
include
"
include
/
core
/
SkColorSpace
.
h
"
#
include
"
include
/
core
/
SkColorType
.
h
"
#
include
"
src
/
gpu
/
graphite
/
AttachmentTypes
.
h
"
#
include
"
src
/
gpu
/
graphite
/
Caps
.
h
"
#
include
"
src
/
gpu
/
graphite
/
ContextPriv
.
h
"
#
include
"
src
/
gpu
/
graphite
/
GraphicsPipeline
.
h
"
#
include
"
src
/
gpu
/
graphite
/
GraphicsPipelineDesc
.
h
"
#
include
"
src
/
gpu
/
graphite
/
KeyContext
.
h
"
#
include
"
src
/
gpu
/
graphite
/
Log
.
h
"
#
include
"
src
/
gpu
/
graphite
/
PaintOptionsPriv
.
h
"
#
include
"
src
/
gpu
/
graphite
/
Renderer
.
h
"
#
include
"
src
/
gpu
/
graphite
/
RendererProvider
.
h
"
#
include
"
src
/
gpu
/
graphite
/
ResourceProvider
.
h
"
#
include
"
src
/
gpu
/
graphite
/
RuntimeEffectDictionary
.
h
"
#
include
"
src
/
gpu
/
graphite
/
UniquePaintParamsID
.
h
"
namespace
{
using
namespace
skgpu
:
:
graphite
;
void
compile
(
const
RendererProvider
*
rendererProvider
ResourceProvider
*
resourceProvider
const
KeyContext
&
keyContext
UniquePaintParamsID
uniqueID
DrawTypeFlags
drawTypes
SkSpan
<
RenderPassDesc
>
renderPassDescs
bool
withPrimitiveBlender
)
{
for
(
const
Renderer
*
r
:
rendererProvider
-
>
renderers
(
)
)
{
if
(
!
(
r
-
>
drawTypes
(
)
&
drawTypes
)
)
{
continue
;
}
if
(
r
-
>
emitsPrimitiveColor
(
)
!
=
withPrimitiveBlender
)
{
continue
;
}
for
(
auto
&
&
s
:
r
-
>
steps
(
)
)
{
SkASSERT
(
!
s
-
>
performsShading
(
)
|
|
s
-
>
emitsPrimitiveColor
(
)
=
=
withPrimitiveBlender
)
;
UniquePaintParamsID
paintID
=
s
-
>
performsShading
(
)
?
uniqueID
:
UniquePaintParamsID
:
:
InvalidID
(
)
;
GraphicsPipelineDesc
pipelineDesc
(
s
paintID
)
;
for
(
RenderPassDesc
renderPassDesc
:
renderPassDescs
)
{
auto
pipeline
=
resourceProvider
-
>
findOrCreateGraphicsPipeline
(
keyContext
.
rtEffectDict
(
)
pipelineDesc
renderPassDesc
)
;
if
(
!
pipeline
)
{
SKGPU_LOG_W
(
"
Failed
to
create
GraphicsPipeline
in
precompile
!
"
)
;
return
;
}
}
}
}
}
}
namespace
skgpu
:
:
graphite
{
void
Precompile
(
Context
*
context
const
PaintOptions
&
options
DrawTypeFlags
drawTypes
)
{
ShaderCodeDictionary
*
dict
=
context
-
>
priv
(
)
.
shaderCodeDictionary
(
)
;
const
Caps
*
caps
=
context
-
>
priv
(
)
.
caps
(
)
;
auto
rtEffectDict
=
std
:
:
make_unique
<
RuntimeEffectDictionary
>
(
)
;
SkColorInfo
ci
(
kRGBA_8888_SkColorType
kPremul_SkAlphaType
nullptr
)
;
KeyContext
keyContext
(
dict
rtEffectDict
.
get
(
)
ci
)
;
TextureInfo
info
=
caps
-
>
getDefaultSampledTextureInfo
(
ci
.
colorType
(
)
Mipmapped
:
:
kNo
Protected
:
:
kNo
Renderable
:
:
kYes
)
;
RenderPassDesc
renderPassDescs
[
]
=
{
RenderPassDesc
:
:
Make
(
caps
info
LoadOp
:
:
kClear
StoreOp
:
:
kStore
DepthStencilFlags
:
:
kDepth
{
.
0f
.
0f
.
0f
.
0f
}
true
caps
-
>
getWriteSwizzle
(
ci
.
colorType
(
)
info
)
)
RenderPassDesc
:
:
Make
(
caps
info
LoadOp
:
:
kClear
StoreOp
:
:
kStore
DepthStencilFlags
:
:
kDepthStencil
{
.
0f
.
0f
.
0f
.
0f
}
true
caps
-
>
getWriteSwizzle
(
ci
.
colorType
(
)
info
)
)
RenderPassDesc
:
:
Make
(
caps
info
LoadOp
:
:
kClear
StoreOp
:
:
kStore
DepthStencilFlags
:
:
kDepth
{
.
0f
.
0f
.
0f
.
0f
}
false
caps
-
>
getWriteSwizzle
(
ci
.
colorType
(
)
info
)
)
RenderPassDesc
:
:
Make
(
caps
info
LoadOp
:
:
kClear
StoreOp
:
:
kStore
DepthStencilFlags
:
:
kDepthStencil
{
.
0f
.
0f
.
0f
.
0f
}
false
caps
-
>
getWriteSwizzle
(
ci
.
colorType
(
)
info
)
)
}
;
options
.
priv
(
)
.
buildCombinations
(
keyContext
false
[
&
]
(
UniquePaintParamsID
uniqueID
)
{
compile
(
context
-
>
priv
(
)
.
rendererProvider
(
)
context
-
>
priv
(
)
.
resourceProvider
(
)
keyContext
uniqueID
static_cast
<
DrawTypeFlags
>
(
drawTypes
&
~
DrawTypeFlags
:
:
kDrawVertices
)
renderPassDescs
false
)
;
}
)
;
if
(
drawTypes
&
DrawTypeFlags
:
:
kDrawVertices
)
{
options
.
priv
(
)
.
buildCombinations
(
keyContext
true
[
&
]
(
UniquePaintParamsID
uniqueID
)
{
compile
(
context
-
>
priv
(
)
.
rendererProvider
(
)
context
-
>
priv
(
)
.
resourceProvider
(
)
keyContext
uniqueID
DrawTypeFlags
:
:
kDrawVertices
renderPassDescs
true
)
;
}
)
;
}
}
}
