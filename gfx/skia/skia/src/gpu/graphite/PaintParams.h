#
ifndef
skgpu_graphite_PaintParams_DEFINED
#
define
skgpu_graphite_PaintParams_DEFINED
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkPaint
.
h
"
class
SkColorInfo
;
class
SkShader
;
namespace
skgpu
:
:
graphite
{
class
KeyContext
;
class
PaintParamsKeyBuilder
;
class
PipelineDataGatherer
;
class
PaintParams
{
public
:
PaintParams
(
const
SkColor4f
&
color
sk_sp
<
SkBlender
>
finalBlender
sk_sp
<
SkShader
>
sk_sp
<
SkColorFilter
>
sk_sp
<
SkBlender
>
primitiveBlender
bool
skipColorXform
bool
dither
)
;
explicit
PaintParams
(
const
SkPaint
&
sk_sp
<
SkBlender
>
primitiveBlender
bool
skipColorXform
)
;
PaintParams
(
const
PaintParams
&
)
;
~
PaintParams
(
)
;
PaintParams
&
operator
=
(
const
PaintParams
&
)
;
SkColor4f
color
(
)
const
{
return
fColor
;
}
std
:
:
optional
<
SkBlendMode
>
asFinalBlendMode
(
)
const
;
SkBlender
*
finalBlender
(
)
const
{
return
fFinalBlender
.
get
(
)
;
}
sk_sp
<
SkBlender
>
refFinalBlender
(
)
const
;
SkShader
*
shader
(
)
const
{
return
fShader
.
get
(
)
;
}
sk_sp
<
SkShader
>
refShader
(
)
const
;
SkColorFilter
*
colorFilter
(
)
const
{
return
fColorFilter
.
get
(
)
;
}
sk_sp
<
SkColorFilter
>
refColorFilter
(
)
const
;
SkBlender
*
primitiveBlender
(
)
const
{
return
fPrimitiveBlender
.
get
(
)
;
}
sk_sp
<
SkBlender
>
refPrimitiveBlender
(
)
const
;
bool
skipColorXform
(
)
const
{
return
fSkipColorXform
;
}
bool
dither
(
)
const
{
return
fDither
;
}
static
SkColor4f
Color4fPrepForDst
(
SkColor4f
srgb
const
SkColorInfo
&
dstColorInfo
)
;
void
toKey
(
const
KeyContext
&
PaintParamsKeyBuilder
*
PipelineDataGatherer
*
)
const
;
private
:
SkColor4f
fColor
;
sk_sp
<
SkBlender
>
fFinalBlender
;
sk_sp
<
SkShader
>
fShader
;
sk_sp
<
SkColorFilter
>
fColorFilter
;
sk_sp
<
SkBlender
>
fPrimitiveBlender
;
bool
fSkipColorXform
;
bool
fDither
;
}
;
}
#
endif
