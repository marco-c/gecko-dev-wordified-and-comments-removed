#
ifndef
skgpu_graphite_DrawList_DEFINED
#
define
skgpu_graphite_DrawList_DEFINED
#
include
"
include
/
core
/
SkPaint
.
h
"
#
include
"
src
/
base
/
SkTBlockList
.
h
"
#
include
"
src
/
gpu
/
graphite
/
DrawOrder
.
h
"
#
include
"
src
/
gpu
/
graphite
/
DrawParams
.
h
"
#
include
"
src
/
gpu
/
graphite
/
PaintParams
.
h
"
#
include
"
src
/
gpu
/
graphite
/
geom
/
Geometry
.
h
"
#
include
"
src
/
gpu
/
graphite
/
geom
/
Transform_graphite
.
h
"
#
include
<
limits
>
#
include
<
optional
>
namespace
skgpu
:
:
graphite
{
class
Renderer
;
class
DrawList
{
public
:
static
constexpr
int
kMaxDraws
=
std
:
:
numeric_limits
<
uint16_t
>
:
:
max
(
)
;
void
recordDraw
(
const
Renderer
*
renderer
const
Transform
&
localToDevice
const
Geometry
&
geometry
const
Clip
&
clip
DrawOrder
ordering
const
PaintParams
*
paint
const
StrokeStyle
*
stroke
)
;
int
drawCount
(
)
const
{
return
fDraws
.
count
(
)
;
}
int
renderStepCount
(
)
const
{
return
fRenderStepCount
;
}
private
:
friend
class
DrawPass
;
struct
Draw
{
const
Renderer
*
fRenderer
;
DrawParams
fDrawParams
;
std
:
:
optional
<
PaintParams
>
fPaintParams
;
Draw
(
const
Renderer
*
renderer
const
Transform
&
transform
const
Geometry
&
geometry
const
Clip
&
clip
DrawOrder
order
const
PaintParams
*
paint
const
StrokeStyle
*
stroke
)
:
fRenderer
(
renderer
)
fDrawParams
(
transform
geometry
clip
order
stroke
)
fPaintParams
(
paint
?
std
:
:
optional
<
PaintParams
>
(
*
paint
)
:
std
:
:
nullopt
)
{
}
}
;
const
Transform
&
deduplicateTransform
(
const
Transform
&
)
;
SkTBlockList
<
Transform
16
>
fTransforms
;
SkTBlockList
<
Draw
16
>
fDraws
;
int
fRenderStepCount
;
}
;
}
#
endif
