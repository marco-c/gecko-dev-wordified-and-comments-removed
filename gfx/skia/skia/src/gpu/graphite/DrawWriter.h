#
ifndef
skgpu_graphite_DrawWriter_DEFINED
#
define
skgpu_graphite_DrawWriter_DEFINED
#
include
"
src
/
gpu
/
BufferWriter
.
h
"
#
include
"
src
/
gpu
/
graphite
/
BufferManager
.
h
"
#
include
"
src
/
gpu
/
graphite
/
DrawTypes
.
h
"
namespace
skgpu
:
:
graphite
{
namespace
DrawPassCommands
{
class
List
;
}
class
DrawWriter
{
public
:
DrawWriter
(
DrawPassCommands
:
:
List
*
DrawBufferManager
*
)
;
DrawWriter
(
const
DrawWriter
&
)
=
delete
;
DrawWriter
(
DrawWriter
&
&
)
=
delete
;
~
DrawWriter
(
)
{
SkASSERT
(
fPendingCount
=
=
0
)
;
}
DrawBufferManager
*
bufferManager
(
)
{
return
fManager
;
}
void
flush
(
)
;
void
newDynamicState
(
)
{
this
-
>
flush
(
)
;
}
void
newPipelineState
(
PrimitiveType
type
size_t
vertexStride
size_t
instanceStride
)
{
this
-
>
flush
(
)
;
fPrimitiveType
=
type
;
fVertexStride
=
vertexStride
;
fInstanceStride
=
instanceStride
;
fPendingBase
=
0
;
SkASSERT
(
fPendingCount
=
=
0
)
;
}
#
ifdef
SK_DEBUG
size_t
instanceStride
(
)
const
{
return
fInstanceStride
;
}
size_t
vertexStride
(
)
const
{
return
fVertexStride
;
}
PrimitiveType
primitiveType
(
)
const
{
return
fPrimitiveType
;
}
#
endif
class
Vertices
;
class
Instances
;
template
<
typename
VertexCountProxy
>
class
DynamicInstances
;
void
draw
(
BindBufferInfo
vertices
unsigned
int
vertexCount
)
{
this
-
>
bindAndFlush
(
vertices
{
}
{
}
0
vertexCount
)
;
}
void
drawIndexed
(
BindBufferInfo
vertices
BindBufferInfo
indices
unsigned
int
indexCount
)
{
this
-
>
bindAndFlush
(
vertices
indices
{
}
0
indexCount
)
;
}
void
drawInstanced
(
BindBufferInfo
vertices
unsigned
int
vertexCount
BindBufferInfo
instances
unsigned
int
instanceCount
)
{
SkASSERT
(
vertexCount
>
0
)
;
this
-
>
bindAndFlush
(
vertices
{
}
instances
vertexCount
instanceCount
)
;
}
void
drawIndexedInstanced
(
BindBufferInfo
vertices
BindBufferInfo
indices
unsigned
int
indexCount
BindBufferInfo
instances
unsigned
int
instanceCount
)
{
SkASSERT
(
indexCount
>
0
)
;
this
-
>
bindAndFlush
(
vertices
indices
instances
indexCount
instanceCount
)
;
}
private
:
DrawPassCommands
:
:
List
*
fCommandList
;
DrawBufferManager
*
fManager
;
PrimitiveType
fPrimitiveType
;
size_t
fVertexStride
;
size_t
fInstanceStride
;
BindBufferInfo
fVertices
;
BindBufferInfo
fIndices
;
BindBufferInfo
fInstances
;
int
fTemplateCount
;
unsigned
int
fPendingCount
;
unsigned
int
fPendingBase
;
bool
fPendingBufferBinds
;
void
setTemplate
(
BindBufferInfo
vertices
BindBufferInfo
indices
BindBufferInfo
instances
int
templateCount
)
;
void
bindAndFlush
(
BindBufferInfo
vertices
BindBufferInfo
indices
BindBufferInfo
instances
unsigned
int
templateCount
unsigned
int
drawCount
)
{
SkASSERT
(
drawCount
>
0
)
;
SkASSERT
(
!
fAppender
)
;
this
-
>
setTemplate
(
vertices
indices
instances
SkTo
<
int
>
(
templateCount
)
)
;
fPendingBase
=
0
;
fPendingCount
=
drawCount
;
this
-
>
flush
(
)
;
}
class
Appender
;
SkDEBUGCODE
(
const
Appender
*
fAppender
=
nullptr
;
)
}
;
class
DrawWriter
:
:
Appender
{
public
:
enum
class
Target
{
kVertices
kInstances
}
;
Appender
(
DrawWriter
&
w
Target
target
)
:
fDrawer
(
w
)
fTarget
(
target
=
=
Target
:
:
kVertices
?
w
.
fVertices
:
w
.
fInstances
)
fStride
(
target
=
=
Target
:
:
kVertices
?
w
.
fVertexStride
:
w
.
fInstanceStride
)
fReservedCount
(
0
)
fNextWriter
(
)
{
SkASSERT
(
fStride
>
0
)
;
SkASSERT
(
!
w
.
fAppender
)
;
SkDEBUGCODE
(
w
.
fAppender
=
this
;
)
}
virtual
~
Appender
(
)
{
if
(
fReservedCount
>
0
)
{
fDrawer
.
fManager
-
>
returnVertexBytes
(
fReservedCount
*
fStride
)
;
}
SkASSERT
(
fDrawer
.
fAppender
=
=
this
)
;
SkDEBUGCODE
(
fDrawer
.
fAppender
=
nullptr
;
)
}
protected
:
DrawWriter
&
fDrawer
;
BindBufferInfo
&
fTarget
;
size_t
fStride
;
unsigned
int
fReservedCount
;
VertexWriter
fNextWriter
;
virtual
void
onFlush
(
)
{
}
void
reserve
(
unsigned
int
count
)
{
if
(
fReservedCount
>
=
count
)
{
return
;
}
else
if
(
fReservedCount
>
0
)
{
fDrawer
.
fManager
-
>
returnVertexBytes
(
fReservedCount
*
fStride
)
;
}
fReservedCount
=
count
;
auto
[
writer
reservedChunk
]
=
fDrawer
.
fManager
-
>
getVertexWriter
(
count
*
fStride
)
;
if
(
reservedChunk
.
fBuffer
!
=
fTarget
.
fBuffer
|
|
reservedChunk
.
fOffset
!
=
(
fTarget
.
fOffset
+
(
fDrawer
.
fPendingBase
+
fDrawer
.
fPendingCount
)
*
fStride
)
)
{
this
-
>
onFlush
(
)
;
fDrawer
.
flush
(
)
;
fTarget
=
reservedChunk
;
fDrawer
.
fPendingBase
=
0
;
fDrawer
.
fPendingBufferBinds
=
true
;
}
fNextWriter
=
std
:
:
move
(
writer
)
;
}
VertexWriter
append
(
unsigned
int
count
)
{
SkASSERT
(
count
>
0
)
;
this
-
>
reserve
(
count
)
;
SkASSERT
(
fReservedCount
>
=
count
)
;
fReservedCount
-
=
count
;
fDrawer
.
fPendingCount
+
=
count
;
return
std
:
:
exchange
(
fNextWriter
fNextWriter
.
makeOffset
(
count
*
fStride
)
)
;
}
}
;
class
DrawWriter
:
:
Vertices
:
private
DrawWriter
:
:
Appender
{
public
:
Vertices
(
DrawWriter
&
w
)
:
Appender
(
w
Target
:
:
kVertices
)
{
w
.
setTemplate
(
w
.
fVertices
{
}
{
}
0
)
;
}
using
Appender
:
:
reserve
;
using
Appender
:
:
append
;
}
;
class
DrawWriter
:
:
Instances
:
private
DrawWriter
:
:
Appender
{
public
:
Instances
(
DrawWriter
&
w
BindBufferInfo
vertices
BindBufferInfo
indices
unsigned
int
vertexCount
)
:
Appender
(
w
Target
:
:
kInstances
)
{
SkASSERT
(
vertexCount
>
0
)
;
w
.
setTemplate
(
vertices
indices
w
.
fInstances
SkTo
<
int
>
(
vertexCount
)
)
;
}
using
Appender
:
:
reserve
;
using
Appender
:
:
append
;
}
;
template
<
typename
VertexCountProxy
>
class
DrawWriter
:
:
DynamicInstances
:
private
DrawWriter
:
:
Appender
{
public
:
DynamicInstances
(
DrawWriter
&
w
BindBufferInfo
vertices
BindBufferInfo
indices
)
:
Appender
(
w
Target
:
:
kInstances
)
{
w
.
setTemplate
(
vertices
indices
w
.
fInstances
-
1
)
;
}
~
DynamicInstances
(
)
override
{
this
-
>
updateTemplateCount
(
)
;
}
using
Appender
:
:
reserve
;
template
<
typename
V
>
VertexWriter
append
(
const
V
&
vertexCount
unsigned
int
instanceCount
)
{
VertexWriter
w
=
this
-
>
Appender
:
:
append
(
instanceCount
)
;
fProxy
<
<
vertexCount
;
return
w
;
}
private
:
void
updateTemplateCount
(
)
{
const
unsigned
int
count
=
static_cast
<
unsigned
int
>
(
fProxy
)
;
fDrawer
.
fTemplateCount
=
std
:
:
min
(
fDrawer
.
fTemplateCount
-
SkTo
<
int
>
(
count
)
-
1
)
;
fProxy
=
{
}
;
}
void
onFlush
(
)
override
{
this
-
>
updateTemplateCount
(
)
;
}
VertexCountProxy
fProxy
=
{
}
;
}
;
}
#
endif
