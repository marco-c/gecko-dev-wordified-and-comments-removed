#
include
"
src
/
gpu
/
graphite
/
render
/
SDFTextRenderStep
.
h
"
#
include
"
include
/
core
/
SkM44
.
h
"
#
include
"
include
/
gpu
/
graphite
/
Recorder
.
h
"
#
include
"
include
/
private
/
SkSLString
.
h
"
#
include
"
src
/
gpu
/
graphite
/
ContextUtils
.
h
"
#
include
"
src
/
gpu
/
graphite
/
DrawParams
.
h
"
#
include
"
src
/
gpu
/
graphite
/
DrawWriter
.
h
"
#
include
"
src
/
gpu
/
graphite
/
PipelineData
.
h
"
#
include
"
src
/
gpu
/
graphite
/
RecorderPriv
.
h
"
#
include
"
src
/
gpu
/
graphite
/
render
/
CommonDepthStencilSettings
.
h
"
#
include
"
src
/
gpu
/
graphite
/
text
/
AtlasManager
.
h
"
#
include
"
src
/
text
/
gpu
/
SubRunContainer
.
h
"
namespace
skgpu
:
:
graphite
{
namespace
{
constexpr
int
kNumSDFAtlasTextures
=
4
;
}
SDFTextRenderStep
:
:
SDFTextRenderStep
(
bool
isA8
)
:
RenderStep
(
"
SDFTextRenderStep
"
isA8
?
"
A8
"
:
"
565
"
Flags
:
:
kPerformsShading
|
Flags
:
:
kHasTextures
|
Flags
:
:
kEmitsCoverage
{
{
"
deviceMatrix
"
SkSLType
:
:
kFloat4x4
}
{
"
atlasSizeInv
"
SkSLType
:
:
kFloat2
}
{
"
distanceAdjust
"
SkSLType
:
:
kFloat
}
}
PrimitiveType
:
:
kTriangleStrip
kDirectDepthGEqualPass
{
}
{
{
"
size
"
VertexAttribType
:
:
kUShort2
SkSLType
:
:
kUShort2
}
{
"
uvPos
"
VertexAttribType
:
:
kUShort2
SkSLType
:
:
kUShort2
}
{
"
xyPos
"
VertexAttribType
:
:
kFloat2
SkSLType
:
:
kFloat2
}
{
"
indexAndFlags
"
VertexAttribType
:
:
kUShort2
SkSLType
:
:
kUShort2
}
{
"
strikeToSourceScale
"
VertexAttribType
:
:
kFloat
SkSLType
:
:
kFloat
}
{
"
depth
"
VertexAttribType
:
:
kFloat
SkSLType
:
:
kFloat
}
{
"
ssboIndex
"
VertexAttribType
:
:
kInt
SkSLType
:
:
kInt
}
}
{
{
"
unormTexCoords
"
SkSLType
:
:
kFloat2
}
{
"
textureCoords
"
SkSLType
:
:
kFloat2
}
{
"
texIndex
"
SkSLType
:
:
kFloat
}
}
)
{
}
SDFTextRenderStep
:
:
~
SDFTextRenderStep
(
)
{
}
std
:
:
string
SDFTextRenderStep
:
:
vertexSkSL
(
)
const
{
return
"
float2
baseCoords
=
float2
(
float
(
sk_VertexID
>
>
1
)
float
(
sk_VertexID
&
1
)
)
;
"
"
baseCoords
.
xy
*
=
float2
(
size
)
;
"
"
stepLocalCoords
=
strikeToSourceScale
*
baseCoords
+
float2
(
xyPos
)
;
"
"
float4
position
=
deviceMatrix
*
float4
(
stepLocalCoords
0
1
)
;
"
"
unormTexCoords
=
baseCoords
+
float2
(
uvPos
)
;
"
"
textureCoords
=
unormTexCoords
*
atlasSizeInv
;
"
"
texIndex
=
float
(
indexAndFlags
.
x
)
;
"
"
float4
devPosition
=
float4
(
position
.
xy
depth
position
.
w
)
;
"
;
}
std
:
:
string
SDFTextRenderStep
:
:
texturesAndSamplersSkSL
(
const
ResourceBindingRequirements
&
bindingReqs
int
*
nextBindingIndex
)
const
{
std
:
:
string
result
;
for
(
unsigned
int
i
=
0
;
i
<
kNumSDFAtlasTextures
;
+
+
i
)
{
result
+
=
EmitSamplerLayout
(
bindingReqs
nextBindingIndex
)
;
SkSL
:
:
String
:
:
appendf
(
&
result
"
uniform
sampler2D
sdf_atlas_
%
d
;
\
n
"
i
)
;
}
return
result
;
}
const
char
*
SDFTextRenderStep
:
:
fragmentCoverageSkSL
(
)
const
{
return
"
half
texColor
;
"
"
if
(
texIndex
=
=
0
)
{
"
"
texColor
=
sample
(
sdf_atlas_0
textureCoords
)
.
r
;
"
"
}
else
if
(
texIndex
=
=
1
)
{
"
"
texColor
=
sample
(
sdf_atlas_1
textureCoords
)
.
r
;
"
"
}
else
if
(
texIndex
=
=
2
)
{
"
"
texColor
=
sample
(
sdf_atlas_2
textureCoords
)
.
r
;
"
"
}
else
if
(
texIndex
=
=
3
)
{
"
"
texColor
=
sample
(
sdf_atlas_3
textureCoords
)
.
r
;
"
"
}
else
{
"
"
texColor
=
sample
(
sdf_atlas_0
textureCoords
)
.
r
;
"
"
}
"
"
half
distance
=
7
.
96875
*
(
texColor
-
0
.
50196078431
)
;
"
"
distance
-
=
half
(
distanceAdjust
)
;
"
"
half2
dist_grad
=
half2
(
float2
(
dFdx
(
distance
)
dFdy
(
distance
)
)
)
;
"
"
half
dg_len2
=
dot
(
dist_grad
dist_grad
)
;
"
"
if
(
dg_len2
<
0
.
0001
)
{
"
"
dist_grad
=
half2
(
0
.
7071
0
.
7071
)
;
"
"
}
else
{
"
"
dist_grad
=
dist_grad
*
half
(
inversesqrt
(
dg_len2
)
)
;
"
"
}
"
"
half2
Jdx
=
half2
(
dFdx
(
unormTexCoords
)
)
;
"
"
half2
Jdy
=
half2
(
dFdy
(
unormTexCoords
)
)
;
"
"
half2
grad
=
half2
(
dist_grad
.
x
*
Jdx
.
x
+
dist_grad
.
y
*
Jdy
.
x
"
"
dist_grad
.
x
*
Jdx
.
y
+
dist_grad
.
y
*
Jdy
.
y
)
;
"
"
half
afwidth
=
0
.
65
*
length
(
grad
)
;
"
"
half
val
=
smoothstep
(
-
afwidth
afwidth
distance
)
;
"
"
outputCoverage
=
half4
(
val
)
;
"
;
}
void
SDFTextRenderStep
:
:
writeVertices
(
DrawWriter
*
dw
const
DrawParams
&
params
int
ssboIndex
)
const
{
const
SubRunData
&
subRunData
=
params
.
geometry
(
)
.
subRunData
(
)
;
subRunData
.
subRun
(
)
-
>
fillInstanceData
(
dw
subRunData
.
startGlyphIndex
(
)
subRunData
.
glyphCount
(
)
ssboIndex
params
.
order
(
)
.
depthAsFloat
(
)
)
;
}
void
SDFTextRenderStep
:
:
writeUniformsAndTextures
(
const
DrawParams
&
params
PipelineDataGatherer
*
gatherer
)
const
{
SkDEBUGCODE
(
UniformExpectationsValidator
uev
(
gatherer
this
-
>
uniforms
(
)
)
;
)
const
SubRunData
&
subRunData
=
params
.
geometry
(
)
.
subRunData
(
)
;
unsigned
int
numProxies
;
Recorder
*
recorder
=
subRunData
.
recorder
(
)
;
const
sk_sp
<
TextureProxy
>
*
proxies
=
recorder
-
>
priv
(
)
.
atlasManager
(
)
-
>
getProxies
(
subRunData
.
subRun
(
)
-
>
maskFormat
(
)
&
numProxies
)
;
SkASSERT
(
proxies
&
&
numProxies
>
0
)
;
gatherer
-
>
write
(
params
.
transform
(
)
)
;
SkV2
atlasDimensionsInverse
=
{
1
.
f
/
proxies
[
0
]
-
>
dimensions
(
)
.
width
(
)
1
.
f
/
proxies
[
0
]
-
>
dimensions
(
)
.
height
(
)
}
;
gatherer
-
>
write
(
atlasDimensionsInverse
)
;
float
gammaCorrection
=
0
.
f
;
gatherer
-
>
write
(
gammaCorrection
)
;
const
SkSamplingOptions
kSamplingOptions
(
SkFilterMode
:
:
kLinear
)
;
constexpr
SkTileMode
kTileModes
[
2
]
=
{
SkTileMode
:
:
kClamp
SkTileMode
:
:
kClamp
}
;
for
(
unsigned
int
i
=
0
;
i
<
numProxies
;
+
+
i
)
{
gatherer
-
>
add
(
kSamplingOptions
kTileModes
proxies
[
i
]
)
;
}
for
(
unsigned
int
i
=
numProxies
;
i
<
kNumSDFAtlasTextures
;
+
+
i
)
{
gatherer
-
>
add
(
kSamplingOptions
kTileModes
proxies
[
0
]
)
;
}
}
}
