#
ifndef
skgpu_graphite_render_DynamicInstancesPatchAllocator_DEFINED
#
define
skgpu_graphite_render_DynamicInstancesPatchAllocator_DEFINED
#
include
"
src
/
gpu
/
BufferWriter
.
h
"
#
include
"
src
/
gpu
/
graphite
/
DrawWriter
.
h
"
#
include
"
src
/
gpu
/
tessellate
/
LinearTolerances
.
h
"
namespace
skgpu
:
:
graphite
{
template
<
typename
FixedCountVariant
>
class
DynamicInstancesPatchAllocator
{
public
:
DynamicInstancesPatchAllocator
(
size_t
stride
DrawWriter
&
writer
BindBufferInfo
fixedVertexBuffer
BindBufferInfo
fixedIndexBuffer
unsigned
int
reserveCount
)
:
fInstances
(
writer
fixedVertexBuffer
fixedIndexBuffer
)
{
SkASSERT
(
stride
=
=
writer
.
instanceStride
(
)
)
;
fInstances
.
reserve
(
reserveCount
)
;
}
VertexWriter
append
(
const
tess
:
:
LinearTolerances
&
tolerances
)
{
return
fInstances
.
append
(
tolerances
1
)
;
}
private
:
struct
LinearToleranceProxy
{
operator
unsigned
int
(
)
const
{
return
FixedCountVariant
:
:
VertexCount
(
fTolerances
)
;
}
void
operator
<
<
(
const
tess
:
:
LinearTolerances
&
t
)
{
fTolerances
.
accumulate
(
t
)
;
}
tess
:
:
LinearTolerances
fTolerances
;
}
;
DrawWriter
:
:
DynamicInstances
<
LinearToleranceProxy
>
fInstances
;
}
;
}
#
endif
