#
ifndef
skgpu_graphite_PipelineDataCache_DEFINED
#
define
skgpu_graphite_PipelineDataCache_DEFINED
#
include
"
src
/
base
/
SkArenaAlloc
.
h
"
#
include
"
src
/
core
/
SkTHash
.
h
"
#
include
"
src
/
gpu
/
graphite
/
PipelineData
.
h
"
namespace
skgpu
:
:
graphite
{
template
<
typename
T
>
class
PipelineDataCache
{
public
:
PipelineDataCache
(
)
=
default
;
const
T
*
insert
(
const
T
&
dataBlock
)
{
DataRef
data
{
&
dataBlock
}
;
const
DataRef
*
existing
=
fDataPointers
.
find
(
data
)
;
if
(
existing
)
{
return
existing
-
>
fPointer
;
}
else
{
T
*
copy
=
T
:
:
Make
(
dataBlock
&
fArena
)
;
fDataPointers
.
add
(
DataRef
{
copy
}
)
;
return
copy
;
}
}
int
count
(
)
const
{
return
fDataPointers
.
count
(
)
;
}
template
<
typename
Fn
>
void
foreach
(
Fn
&
&
fn
)
const
{
fDataPointers
.
foreach
(
[
fn
]
(
const
DataRef
&
ref
)
{
fn
(
ref
.
fPointer
)
;
}
)
;
}
private
:
struct
DataRef
{
const
T
*
fPointer
;
bool
operator
=
=
(
const
DataRef
&
o
)
const
{
if
(
!
fPointer
|
|
!
o
.
fPointer
)
{
return
!
fPointer
&
&
!
o
.
fPointer
;
}
else
{
return
*
fPointer
=
=
*
o
.
fPointer
;
}
}
}
;
struct
Hash
{
size_t
operator
(
)
(
const
DataRef
&
dataBlock
)
const
{
return
dataBlock
.
fPointer
?
dataBlock
.
fPointer
-
>
hash
(
)
:
0
;
}
}
;
SkTHashSet
<
DataRef
Hash
>
fDataPointers
;
SkArenaAlloc
fArena
{
0
}
;
}
;
using
UniformDataCache
=
PipelineDataCache
<
UniformDataBlock
>
;
using
TextureDataCache
=
PipelineDataCache
<
TextureDataBlock
>
;
}
#
endif
