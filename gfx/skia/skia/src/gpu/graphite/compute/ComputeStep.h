#
ifndef
skgpu_graphite_ComputeStep_DEFINED
#
define
skgpu_graphite_ComputeStep_DEFINED
#
include
"
include
/
core
/
SkSpan
.
h
"
#
include
"
src
/
core
/
SkEnumBitMask
.
h
"
#
include
"
src
/
gpu
/
graphite
/
ComputeTypes
.
h
"
#
include
<
optional
>
#
include
<
string
>
#
include
<
string_view
>
#
include
<
vector
>
namespace
skgpu
:
:
graphite
{
class
DrawParams
;
struct
ResourceBindingRequirements
;
class
ComputeStep
{
public
:
enum
class
DataFlow
{
kVertexOutput
kIndexOutput
kInstanceOutput
kIndirectDrawOutput
kPrivate
kShared
}
;
enum
class
ResourceType
{
kUniformBuffer
kStorageBuffer
}
;
enum
class
ResourcePolicy
{
kNone
kClear
kMapped
}
;
struct
ResourceDesc
final
{
ResourceType
fType
;
DataFlow
fFlow
;
ResourcePolicy
fPolicy
;
int
fSlot
=
-
1
;
constexpr
ResourceDesc
(
ResourceType
type
DataFlow
flow
ResourcePolicy
policy
int
slot
=
-
1
)
:
fType
(
type
)
fFlow
(
flow
)
fPolicy
(
policy
)
fSlot
(
slot
)
{
}
}
;
virtual
~
ComputeStep
(
)
=
default
;
virtual
std
:
:
string
computeSkSL
(
const
ResourceBindingRequirements
&
int
nextBindingIndex
)
const
=
0
;
virtual
size_t
calculateResourceSize
(
const
DrawParams
&
int
resourceIndex
const
ResourceDesc
&
)
const
{
return
0u
;
}
virtual
WorkgroupSize
calculateGlobalDispatchSize
(
const
DrawParams
&
)
const
{
return
WorkgroupSize
(
)
;
}
virtual
void
prepareBuffer
(
const
DrawParams
&
int
ssboIndex
int
resourceIndex
const
ResourceDesc
&
resource
void
*
buffer
size_t
bufferSize
)
const
;
SkSpan
<
const
ResourceDesc
>
resources
(
)
const
{
return
SkSpan
(
fResources
)
;
}
uint32_t
uniqueID
(
)
const
{
return
fUniqueID
;
}
const
char
*
name
(
)
const
{
return
fName
.
c_str
(
)
;
}
WorkgroupSize
localDispatchSize
(
)
const
{
return
fLocalDispatchSize
;
}
bool
outputsVertices
(
)
const
{
return
fFlags
&
Flags
:
:
kOutputsVertexBuffer
;
}
bool
outputsIndices
(
)
const
{
return
fFlags
&
Flags
:
:
kOutputsIndexBuffer
;
}
bool
outputsInstances
(
)
const
{
return
fFlags
&
Flags
:
:
kOutputsInstanceBuffer
;
}
bool
writesIndirectDraw
(
)
const
{
return
fFlags
&
Flags
:
:
kOutputsIndirectDrawBuffer
;
}
protected
:
ComputeStep
(
std
:
:
string_view
name
WorkgroupSize
localDispatchSize
SkSpan
<
const
ResourceDesc
>
resources
)
;
private
:
enum
class
Flags
:
uint8_t
{
kNone
=
0b0000
kOutputsVertexBuffer
=
0b0001
kOutputsIndexBuffer
=
0b0010
kOutputsInstanceBuffer
=
0b0100
kOutputsIndirectDrawBuffer
=
0b1000
}
;
SK_DECL_BITMASK_OPS_FRIENDS
(
Flags
)
;
ComputeStep
(
const
ComputeStep
&
)
=
delete
;
ComputeStep
(
ComputeStep
&
&
)
=
delete
;
uint32_t
fUniqueID
;
SkEnumBitMask
<
Flags
>
fFlags
;
std
:
:
string
fName
;
std
:
:
vector
<
ResourceDesc
>
fResources
;
WorkgroupSize
fLocalDispatchSize
;
}
;
SK_MAKE_BITMASK_OPS
(
ComputeStep
:
:
Flags
)
;
}
#
endif
