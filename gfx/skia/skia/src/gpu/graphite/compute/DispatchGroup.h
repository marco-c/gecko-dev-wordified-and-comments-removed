#
ifndef
skgpu_graphite_DispatchGroup_DEFINED
#
define
skgpu_graphite_DispatchGroup_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
"
src
/
gpu
/
graphite
/
ComputePipelineDesc
.
h
"
#
include
"
src
/
gpu
/
graphite
/
ComputeTypes
.
h
"
#
include
"
src
/
gpu
/
graphite
/
ResourceTypes
.
h
"
namespace
skgpu
:
:
graphite
{
class
CommandBuffer
;
class
ComputePipeline
;
class
ComputeStep
;
class
Recorder
;
class
ResourceProvider
;
class
DispatchGroup
final
{
public
:
class
Builder
;
struct
Dispatch
{
ComputePassDesc
fParams
;
SkTArray
<
ResourceBinding
>
fBindings
;
int
fPipelineIndex
=
0
;
}
;
~
DispatchGroup
(
)
;
const
SkTArray
<
Dispatch
>
&
dispatches
(
)
const
{
return
fDispatchList
;
}
const
ComputePipeline
*
getPipeline
(
size_t
index
)
const
{
return
fPipelines
[
index
]
.
get
(
)
;
}
bool
prepareResources
(
ResourceProvider
*
)
;
void
addResourceRefs
(
CommandBuffer
*
)
const
;
private
:
friend
class
DispatchGroupBuilder
;
DispatchGroup
(
)
=
default
;
DispatchGroup
(
const
DispatchGroup
&
)
=
delete
;
DispatchGroup
(
DispatchGroup
&
&
)
=
delete
;
SkTArray
<
Dispatch
>
fDispatchList
;
SkTArray
<
ComputePipelineDesc
>
fPipelineDescs
;
SkTArray
<
sk_sp
<
ComputePipeline
>
>
fPipelines
;
}
;
class
DispatchGroup
:
:
Builder
final
{
public
:
struct
OutputTable
{
BindBufferInfo
fVertexBuffer
;
BindBufferInfo
fIndexBuffer
;
BindBufferInfo
fInstanceBuffer
;
BindBufferInfo
fIndirectDrawBuffer
;
BindBufferInfo
fSharedSlots
[
kMaxComputeDataFlowSlots
]
;
OutputTable
(
)
=
default
;
bool
hasDrawBuffers
(
)
const
{
return
fVertexBuffer
|
|
fIndexBuffer
|
|
fInstanceBuffer
|
|
fIndirectDrawBuffer
;
}
void
reset
(
)
{
*
this
=
{
}
;
}
}
;
explicit
Builder
(
Recorder
*
)
;
const
OutputTable
&
outputTable
(
)
const
{
return
fOutputTable
;
}
bool
appendStep
(
const
ComputeStep
*
const
DrawParams
&
int
ssboIndex
)
;
std
:
:
unique_ptr
<
DispatchGroup
>
finalize
(
)
;
private
:
std
:
:
unique_ptr
<
DispatchGroup
>
fObj
;
Recorder
*
fRecorder
;
OutputTable
fOutputTable
;
}
;
}
#
endif
