#
ifndef
skgpu_graphite_TextureProxy_DEFINED
#
define
skgpu_graphite_TextureProxy_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSize
.
h
"
#
include
"
include
/
gpu
/
graphite
/
TextureInfo
.
h
"
#
include
"
include
/
private
/
base
/
SkTo
.
h
"
#
include
<
functional
>
enum
SkColorType
:
int
;
namespace
skgpu
:
:
graphite
{
class
Caps
;
class
ResourceProvider
;
class
Texture
;
class
TextureProxy
:
public
SkRefCnt
{
public
:
TextureProxy
(
SkISize
dimensions
const
TextureInfo
&
info
skgpu
:
:
Budgeted
budgeted
)
;
TextureProxy
(
sk_sp
<
Texture
>
)
;
TextureProxy
(
)
=
delete
;
~
TextureProxy
(
)
override
;
int
numSamples
(
)
const
{
return
fInfo
.
numSamples
(
)
;
}
Mipmapped
mipmapped
(
)
const
{
return
fInfo
.
mipmapped
(
)
;
}
SkISize
dimensions
(
)
const
;
const
TextureInfo
&
textureInfo
(
)
const
{
return
fInfo
;
}
bool
isLazy
(
)
const
;
bool
isFullyLazy
(
)
const
;
bool
isVolatile
(
)
const
;
bool
instantiate
(
ResourceProvider
*
)
;
bool
lazyInstantiate
(
ResourceProvider
*
)
;
static
bool
InstantiateIfNotLazy
(
ResourceProvider
*
TextureProxy
*
)
;
bool
isInstantiated
(
)
const
{
return
SkToBool
(
fTexture
)
;
}
void
deinstantiate
(
)
;
sk_sp
<
Texture
>
refTexture
(
)
const
;
const
Texture
*
texture
(
)
const
;
static
sk_sp
<
TextureProxy
>
Make
(
const
Caps
*
SkISize
dimensions
SkColorType
Mipmapped
Protected
Renderable
skgpu
:
:
Budgeted
)
;
using
LazyInstantiateCallback
=
std
:
:
function
<
sk_sp
<
Texture
>
(
ResourceProvider
*
)
>
;
static
sk_sp
<
TextureProxy
>
MakeLazy
(
SkISize
dimensions
const
TextureInfo
&
skgpu
:
:
Budgeted
Volatile
LazyInstantiateCallback
&
&
)
;
static
sk_sp
<
TextureProxy
>
MakeFullyLazy
(
const
TextureInfo
&
skgpu
:
:
Budgeted
Volatile
LazyInstantiateCallback
&
&
)
;
private
:
TextureProxy
(
SkISize
dimensions
const
TextureInfo
&
skgpu
:
:
Budgeted
Volatile
LazyInstantiateCallback
&
&
)
;
#
ifdef
SK_DEBUG
void
validateTexture
(
const
Texture
*
)
;
#
endif
SkISize
fDimensions
;
const
TextureInfo
fInfo
;
skgpu
:
:
Budgeted
fBudgeted
;
const
Volatile
fVolatile
;
sk_sp
<
Texture
>
fTexture
;
const
LazyInstantiateCallback
fLazyInstantiateCallback
;
}
;
class
AutoDeinstantiateTextureProxy
{
public
:
AutoDeinstantiateTextureProxy
(
TextureProxy
*
textureProxy
)
:
fTextureProxy
(
textureProxy
)
{
}
~
AutoDeinstantiateTextureProxy
(
)
{
if
(
fTextureProxy
)
{
fTextureProxy
-
>
deinstantiate
(
)
;
}
}
private
:
TextureProxy
*
const
fTextureProxy
;
}
;
}
#
endif
