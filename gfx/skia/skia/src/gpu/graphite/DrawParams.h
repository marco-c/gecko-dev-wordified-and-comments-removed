#
ifndef
skgpu_graphite_DrawParams_DEFINED
#
define
skgpu_graphite_DrawParams_DEFINED
#
include
"
include
/
core
/
SkPaint
.
h
"
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
src
/
gpu
/
graphite
/
DrawOrder
.
h
"
#
include
"
src
/
gpu
/
graphite
/
geom
/
Geometry
.
h
"
#
include
"
src
/
gpu
/
graphite
/
geom
/
Rect
.
h
"
#
include
"
src
/
gpu
/
graphite
/
geom
/
Transform_graphite
.
h
"
#
include
<
optional
>
namespace
skgpu
:
:
graphite
{
class
StrokeStyle
{
public
:
StrokeStyle
(
)
:
fHalfWidth
(
0
.
f
)
fJoinLimit
(
0
.
f
)
fCap
(
SkPaint
:
:
kButt_Cap
)
{
}
StrokeStyle
(
float
width
float
miterLimit
SkPaint
:
:
Join
join
SkPaint
:
:
Cap
cap
)
:
fHalfWidth
(
std
:
:
max
(
0
.
f
0
.
5f
*
width
)
)
fJoinLimit
(
join
=
=
SkPaint
:
:
kMiter_Join
?
std
:
:
max
(
0
.
f
miterLimit
)
:
(
join
=
=
SkPaint
:
:
kBevel_Join
?
0
.
f
:
-
1
.
f
)
)
fCap
(
cap
)
{
}
StrokeStyle
(
const
StrokeStyle
&
)
=
default
;
StrokeStyle
&
operator
=
(
const
StrokeStyle
&
)
=
default
;
bool
isMiterJoin
(
)
const
{
return
fJoinLimit
>
0
.
f
;
}
bool
isBevelJoin
(
)
const
{
return
fJoinLimit
=
=
0
.
f
;
}
bool
isRoundJoin
(
)
const
{
return
fJoinLimit
<
0
.
f
;
}
float
halfWidth
(
)
const
{
return
fHalfWidth
;
}
float
width
(
)
const
{
return
2
.
f
*
fHalfWidth
;
}
float
miterLimit
(
)
const
{
return
std
:
:
max
(
0
.
f
fJoinLimit
)
;
}
SkPaint
:
:
Cap
cap
(
)
const
{
return
fCap
;
}
SkPaint
:
:
Join
join
(
)
const
{
return
fJoinLimit
>
0
.
f
?
SkPaint
:
:
kMiter_Join
:
(
fJoinLimit
=
=
0
.
f
?
SkPaint
:
:
kBevel_Join
:
SkPaint
:
:
kRound_Join
)
;
}
float
joinLimit
(
)
const
{
return
fJoinLimit
;
}
private
:
float
fHalfWidth
;
float
fJoinLimit
;
SkPaint
:
:
Cap
fCap
;
}
;
class
Clip
{
public
:
Clip
(
)
=
default
;
Clip
(
const
Rect
&
drawBounds
const
SkIRect
&
scissor
)
:
fDrawBounds
(
drawBounds
)
fScissor
(
scissor
)
{
}
const
Rect
&
drawBounds
(
)
const
{
return
fDrawBounds
;
}
const
SkIRect
&
scissor
(
)
const
{
return
fScissor
;
}
private
:
Rect
fDrawBounds
;
SkIRect
fScissor
;
}
;
class
DrawParams
{
public
:
DrawParams
(
const
Transform
&
transform
const
Geometry
&
geometry
const
Clip
&
clip
DrawOrder
drawOrder
const
StrokeStyle
*
stroke
)
:
fTransform
(
transform
)
fGeometry
(
geometry
)
fClip
(
clip
)
fOrder
(
drawOrder
)
fStroke
(
stroke
?
std
:
:
optional
<
StrokeStyle
>
(
*
stroke
)
:
std
:
:
nullopt
)
{
}
const
Transform
&
transform
(
)
const
{
return
fTransform
;
}
const
Geometry
&
geometry
(
)
const
{
return
fGeometry
;
}
const
Clip
&
clip
(
)
const
{
return
fClip
;
}
DrawOrder
order
(
)
const
{
return
fOrder
;
}
bool
isStroke
(
)
const
{
return
fStroke
.
has_value
(
)
;
}
const
StrokeStyle
&
strokeStyle
(
)
const
{
SkASSERT
(
this
-
>
isStroke
(
)
)
;
return
*
fStroke
;
}
private
:
const
Transform
&
fTransform
;
Geometry
fGeometry
;
Clip
fClip
;
DrawOrder
fOrder
;
std
:
:
optional
<
StrokeStyle
>
fStroke
;
}
;
}
#
endif
