#
ifndef
skgpu_graphite_Device_DEFINED
#
define
skgpu_graphite_Device_DEFINED
#
include
"
include
/
gpu
/
GpuTypes
.
h
"
#
include
"
src
/
core
/
SkDevice
.
h
"
#
include
"
src
/
core
/
SkEnumBitMask
.
h
"
#
include
"
src
/
gpu
/
graphite
/
ClipStack_graphite
.
h
"
#
include
"
src
/
gpu
/
graphite
/
DrawOrder
.
h
"
#
include
"
src
/
gpu
/
graphite
/
geom
/
Rect
.
h
"
#
include
"
src
/
gpu
/
graphite
/
geom
/
Transform_graphite
.
h
"
#
include
"
src
/
text
/
gpu
/
SDFTControl
.
h
"
#
include
"
src
/
text
/
gpu
/
SubRunContainer
.
h
"
class
SkStrokeRec
;
namespace
sktext
:
:
gpu
{
class
AtlasSubRun
;
enum
class
Budgeted
:
bool
;
}
namespace
skgpu
:
:
graphite
{
class
BoundsManager
;
class
Clip
;
class
Context
;
class
DrawContext
;
class
Geometry
;
class
PaintParams
;
class
Recorder
;
class
Renderer
;
class
Shape
;
class
StrokeStyle
;
class
TextureProxy
;
class
TextureProxyView
;
class
Device
final
:
public
SkBaseDevice
{
public
:
~
Device
(
)
override
;
static
sk_sp
<
Device
>
Make
(
Recorder
*
const
SkImageInfo
&
skgpu
:
:
Budgeted
Mipmapped
const
SkSurfaceProps
&
bool
addInitialClear
)
;
static
sk_sp
<
Device
>
Make
(
Recorder
*
sk_sp
<
TextureProxy
>
const
SkColorInfo
&
const
SkSurfaceProps
&
bool
addInitialClear
)
;
static
sk_sp
<
Device
>
Make
(
Recorder
*
recorder
sk_sp
<
TextureProxy
>
SkISize
deviceSize
const
SkColorInfo
&
const
SkSurfaceProps
&
bool
addInitialClear
)
;
Device
*
asGraphiteDevice
(
)
override
{
return
this
;
}
Recorder
*
recorder
(
)
{
return
fRecorder
;
}
void
abandonRecorder
(
)
;
void
flushPendingWorkToRecorder
(
)
;
TextureProxyView
createCopy
(
const
SkIRect
*
subset
Mipmapped
)
;
void
asyncRescaleAndReadPixels
(
const
SkImageInfo
&
info
SkIRect
srcRect
SkImage
:
:
RescaleGamma
rescaleGamma
SkImage
:
:
RescaleMode
rescaleMode
SkImage
:
:
ReadPixelsCallback
callback
SkImage
:
:
ReadPixelsContext
context
)
;
void
asyncRescaleAndReadPixelsYUV420
(
SkYUVColorSpace
yuvColorSpace
sk_sp
<
SkColorSpace
>
dstColorSpace
SkIRect
srcRect
SkISize
dstSize
SkImage
:
:
RescaleGamma
rescaleGamma
SkImage
:
:
RescaleMode
SkImage
:
:
ReadPixelsCallback
callback
SkImage
:
:
ReadPixelsContext
context
)
;
const
Transform
&
localToDeviceTransform
(
)
;
SkStrikeDeviceInfo
strikeDeviceInfo
(
)
const
override
;
TextureProxy
*
target
(
)
;
TextureProxyView
readSurfaceView
(
)
const
;
private
:
class
IntersectionTreeSet
;
void
onSave
(
)
override
{
fClip
.
save
(
)
;
}
void
onRestore
(
)
override
{
fClip
.
restore
(
)
;
}
bool
onClipIsWideOpen
(
)
const
override
{
return
fClip
.
clipState
(
)
=
=
ClipStack
:
:
ClipState
:
:
kWideOpen
;
}
bool
onClipIsAA
(
)
const
override
;
ClipType
onGetClipType
(
)
const
override
;
SkIRect
onDevClipBounds
(
)
const
override
;
void
onAsRgnClip
(
SkRegion
*
)
const
override
;
void
onClipRect
(
const
SkRect
&
rect
SkClipOp
bool
aa
)
override
;
void
onClipRRect
(
const
SkRRect
&
rrect
SkClipOp
bool
aa
)
override
;
void
onClipPath
(
const
SkPath
&
path
SkClipOp
bool
aa
)
override
;
void
onClipShader
(
sk_sp
<
SkShader
>
shader
)
override
;
void
onClipRegion
(
const
SkRegion
&
globalRgn
SkClipOp
)
override
;
void
onReplaceClip
(
const
SkIRect
&
rect
)
override
;
void
drawPaint
(
const
SkPaint
&
paint
)
override
;
void
drawRect
(
const
SkRect
&
r
const
SkPaint
&
paint
)
override
;
void
drawOval
(
const
SkRect
&
oval
const
SkPaint
&
paint
)
override
;
void
drawRRect
(
const
SkRRect
&
rr
const
SkPaint
&
paint
)
override
;
void
drawPoints
(
SkCanvas
:
:
PointMode
mode
size_t
count
const
SkPoint
[
]
const
SkPaint
&
paint
)
override
;
void
drawPath
(
const
SkPath
&
path
const
SkPaint
&
paint
bool
pathIsMutable
=
false
)
override
;
sk_sp
<
SkSurface
>
makeSurface
(
const
SkImageInfo
&
const
SkSurfaceProps
&
)
override
;
SkBaseDevice
*
onCreateDevice
(
const
CreateInfo
&
const
SkPaint
*
)
override
;
bool
onReadPixels
(
const
SkPixmap
&
int
x
int
y
)
override
;
bool
onWritePixels
(
const
SkPixmap
&
int
x
int
y
)
override
;
void
onDrawGlyphRunList
(
SkCanvas
*
const
sktext
:
:
GlyphRunList
&
const
SkPaint
&
const
SkPaint
&
)
override
;
void
drawEdgeAAQuad
(
const
SkRect
&
rect
const
SkPoint
clip
[
4
]
SkCanvas
:
:
QuadAAFlags
aaFlags
const
SkColor4f
&
color
SkBlendMode
mode
)
override
;
void
drawEdgeAAImageSet
(
const
SkCanvas
:
:
ImageSetEntry
[
]
int
count
const
SkPoint
dstClips
[
]
const
SkMatrix
preViewMatrices
[
]
const
SkSamplingOptions
&
const
SkPaint
&
SkCanvas
:
:
SrcRectConstraint
)
override
;
void
drawImageRect
(
const
SkImage
*
const
SkRect
*
src
const
SkRect
&
dst
const
SkSamplingOptions
&
const
SkPaint
&
SkCanvas
:
:
SrcRectConstraint
)
override
;
void
drawImageLattice
(
const
SkImage
*
const
SkCanvas
:
:
Lattice
&
const
SkRect
&
dst
SkFilterMode
const
SkPaint
&
)
override
{
}
void
drawAtlas
(
const
SkRSXform
[
]
const
SkRect
[
]
const
SkColor
[
]
int
count
sk_sp
<
SkBlender
>
const
SkPaint
&
)
override
{
}
void
drawDrawable
(
SkCanvas
*
SkDrawable
*
const
SkMatrix
*
)
override
{
}
void
drawVertices
(
const
SkVertices
*
sk_sp
<
SkBlender
>
const
SkPaint
&
bool
)
override
;
void
drawMesh
(
const
SkMesh
&
sk_sp
<
SkBlender
>
const
SkPaint
&
)
override
{
}
void
drawShadow
(
const
SkPath
&
const
SkDrawShadowRec
&
)
override
{
}
void
drawDevice
(
SkBaseDevice
*
const
SkSamplingOptions
&
const
SkPaint
&
)
override
;
void
drawSpecial
(
SkSpecialImage
*
const
SkMatrix
&
localToDevice
const
SkSamplingOptions
&
const
SkPaint
&
)
override
;
sk_sp
<
SkSpecialImage
>
makeSpecial
(
const
SkBitmap
&
)
override
;
sk_sp
<
SkSpecialImage
>
makeSpecial
(
const
SkImage
*
)
override
;
sk_sp
<
SkSpecialImage
>
snapSpecial
(
const
SkIRect
&
subset
bool
forceCopy
=
false
)
override
;
enum
class
DrawFlags
:
unsigned
{
kNone
=
0b000
kIgnoreMaskFilter
=
0b001
kIgnorePathEffect
=
0b010
}
;
SK_DECL_BITMASK_OPS_FRIENDS
(
DrawFlags
)
;
Device
(
Recorder
*
sk_sp
<
DrawContext
>
bool
addInitialClear
)
;
void
drawGeometry
(
const
Transform
&
const
Geometry
&
const
SkPaint
&
const
SkStrokeRec
&
SkEnumBitMask
<
DrawFlags
>
=
DrawFlags
:
:
kNone
sk_sp
<
SkBlender
>
primitiveBlender
=
nullptr
bool
skipColorXform
=
false
)
;
void
drawClipShape
(
const
Transform
&
const
Shape
&
const
Clip
&
DrawOrder
)
;
void
drawAtlasSubRun
(
const
sktext
:
:
gpu
:
:
AtlasSubRun
*
SkPoint
drawOrigin
const
SkPaint
&
paint
sk_sp
<
SkRefCnt
>
subRunStorage
)
;
const
Renderer
*
chooseRenderer
(
const
Geometry
&
const
Clip
&
const
SkStrokeRec
&
bool
requireMSAA
)
const
;
bool
needsFlushBeforeDraw
(
int
numNewDraws
)
const
;
Recorder
*
fRecorder
;
sk_sp
<
DrawContext
>
fDC
;
ClipStack
fClip
;
std
:
:
unique_ptr
<
BoundsManager
>
fColorDepthBoundsManager
;
std
:
:
unique_ptr
<
IntersectionTreeSet
>
fDisjointStencilSet
;
Transform
fCachedLocalToDevice
;
PaintersDepth
fCurrentDepth
;
const
sktext
:
:
gpu
:
:
SDFTControl
fSDFTControl
;
bool
fDrawsOverlap
;
friend
class
ClipStack
;
friend
class
sktext
:
:
gpu
:
:
AtlasSubRun
;
}
;
SK_MAKE_BITMASK_OPS
(
Device
:
:
DrawFlags
)
}
#
endif
