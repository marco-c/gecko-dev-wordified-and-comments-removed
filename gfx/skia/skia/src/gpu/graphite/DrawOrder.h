#
ifndef
skgpu_graphite_DrawOrder_DEFINED
#
define
skgpu_graphite_DrawOrder_DEFINED
#
include
"
include
/
core
/
SkTypes
.
h
"
namespace
skgpu
:
:
graphite
{
template
<
typename
Sequence
>
class
MonotonicValue
{
public
:
static
constexpr
MonotonicValue
First
(
)
{
return
0
;
}
static
constexpr
MonotonicValue
Last
(
)
{
return
0xffff
;
}
MonotonicValue
(
)
=
default
;
MonotonicValue
(
const
MonotonicValue
&
o
)
=
default
;
MonotonicValue
&
operator
=
(
const
MonotonicValue
&
o
)
=
default
;
bool
operator
<
(
MonotonicValue
o
)
const
{
return
fIndex
<
o
.
fIndex
;
}
bool
operator
<
=
(
MonotonicValue
o
)
const
{
return
fIndex
<
=
o
.
fIndex
;
}
bool
operator
>
(
MonotonicValue
o
)
const
{
return
fIndex
>
o
.
fIndex
;
}
bool
operator
>
=
(
MonotonicValue
o
)
const
{
return
fIndex
>
=
o
.
fIndex
;
}
bool
operator
=
=
(
MonotonicValue
o
)
const
{
return
fIndex
=
=
o
.
fIndex
;
}
bool
operator
!
=
(
MonotonicValue
o
)
const
{
return
fIndex
!
=
o
.
fIndex
;
}
uint16_t
bits
(
)
const
{
return
fIndex
;
}
MonotonicValue
next
(
)
const
{
return
fIndex
+
1
;
}
private
:
constexpr
MonotonicValue
(
uint16_t
index
)
:
fIndex
(
index
)
{
}
uint16_t
fIndex
;
}
;
struct
CompressedPaintersOrderSequence
{
}
;
using
CompressedPaintersOrder
=
MonotonicValue
<
CompressedPaintersOrderSequence
>
;
struct
DisjointStencilIndexSequence
{
}
;
using
DisjointStencilIndex
=
MonotonicValue
<
DisjointStencilIndexSequence
>
;
struct
PaintersDepthSequence
{
}
;
using
PaintersDepth
=
MonotonicValue
<
PaintersDepthSequence
>
;
class
DrawOrder
{
public
:
inline
static
constexpr
PaintersDepth
kClearDepth
=
PaintersDepth
:
:
First
(
)
;
inline
static
constexpr
CompressedPaintersOrder
kNoIntersection
=
CompressedPaintersOrder
:
:
First
(
)
;
inline
static
constexpr
DisjointStencilIndex
kUnassigned
=
DisjointStencilIndex
:
:
First
(
)
;
explicit
DrawOrder
(
PaintersDepth
originalOrder
)
:
fPaintOrder
(
kNoIntersection
)
fStencilIndex
(
kUnassigned
)
fDepth
(
originalOrder
)
{
}
DrawOrder
(
PaintersDepth
originalOrder
CompressedPaintersOrder
compressedOrder
)
:
fPaintOrder
(
compressedOrder
)
fStencilIndex
(
kUnassigned
)
fDepth
(
originalOrder
)
{
}
CompressedPaintersOrder
paintOrder
(
)
const
{
return
fPaintOrder
;
}
DisjointStencilIndex
stencilIndex
(
)
const
{
return
fStencilIndex
;
}
PaintersDepth
depth
(
)
const
{
return
fDepth
;
}
float
depthAsFloat
(
)
const
{
return
fDepth
.
bits
(
)
/
(
float
)
PaintersDepth
:
:
Last
(
)
.
bits
(
)
;
}
DrawOrder
&
dependsOnPaintersOrder
(
CompressedPaintersOrder
prevDraw
)
{
CompressedPaintersOrder
next
=
prevDraw
.
next
(
)
;
if
(
fPaintOrder
<
next
)
{
fPaintOrder
=
next
;
}
return
*
this
;
}
DrawOrder
&
dependsOnStencil
(
DisjointStencilIndex
disjointSet
)
{
SkASSERT
(
fStencilIndex
=
=
kUnassigned
)
;
fStencilIndex
=
disjointSet
;
return
*
this
;
}
private
:
CompressedPaintersOrder
fPaintOrder
;
DisjointStencilIndex
fStencilIndex
;
PaintersDepth
fDepth
;
}
;
}
#
endif
