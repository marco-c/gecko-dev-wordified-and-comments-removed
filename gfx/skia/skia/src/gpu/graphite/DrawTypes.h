#
ifndef
skgpu_graphite_DrawTypes_DEFINED
#
define
skgpu_graphite_DrawTypes_DEFINED
#
include
"
include
/
gpu
/
graphite
/
GraphiteTypes
.
h
"
#
include
"
include
/
core
/
SkSamplingOptions
.
h
"
#
include
"
include
/
core
/
SkTileMode
.
h
"
#
include
"
src
/
gpu
/
graphite
/
ResourceTypes
.
h
"
#
include
<
array
>
namespace
skgpu
:
:
graphite
{
class
Buffer
;
enum
class
CType
:
unsigned
{
kDefault
kSkMatrix
kLast
=
kSkMatrix
}
;
enum
class
PrimitiveType
:
uint8_t
{
kTriangles
kTriangleStrip
kPoints
}
;
enum
class
VertexAttribType
:
uint8_t
{
kFloat
=
0
kFloat2
kFloat3
kFloat4
kHalf
kHalf2
kHalf4
kInt2
kInt3
kInt4
kByte
kByte2
kByte4
kUByte
kUByte2
kUByte4
kUByte_norm
kUByte4_norm
kShort2
kShort4
kUShort2
kUShort2_norm
kInt
kUInt
kUShort_norm
kUShort4_norm
kLast
=
kUShort4_norm
}
;
static
const
int
kVertexAttribTypeCount
=
(
int
)
(
VertexAttribType
:
:
kLast
)
+
1
;
static
constexpr
inline
size_t
VertexAttribTypeSize
(
VertexAttribType
type
)
{
switch
(
type
)
{
case
VertexAttribType
:
:
kFloat
:
return
sizeof
(
float
)
;
case
VertexAttribType
:
:
kFloat2
:
return
2
*
sizeof
(
float
)
;
case
VertexAttribType
:
:
kFloat3
:
return
3
*
sizeof
(
float
)
;
case
VertexAttribType
:
:
kFloat4
:
return
4
*
sizeof
(
float
)
;
case
VertexAttribType
:
:
kHalf
:
return
sizeof
(
uint16_t
)
;
case
VertexAttribType
:
:
kHalf2
:
return
2
*
sizeof
(
uint16_t
)
;
case
VertexAttribType
:
:
kHalf4
:
return
4
*
sizeof
(
uint16_t
)
;
case
VertexAttribType
:
:
kInt2
:
return
2
*
sizeof
(
int32_t
)
;
case
VertexAttribType
:
:
kInt3
:
return
3
*
sizeof
(
int32_t
)
;
case
VertexAttribType
:
:
kInt4
:
return
4
*
sizeof
(
int32_t
)
;
case
VertexAttribType
:
:
kByte
:
return
1
*
sizeof
(
char
)
;
case
VertexAttribType
:
:
kByte2
:
return
2
*
sizeof
(
char
)
;
case
VertexAttribType
:
:
kByte4
:
return
4
*
sizeof
(
char
)
;
case
VertexAttribType
:
:
kUByte
:
return
1
*
sizeof
(
char
)
;
case
VertexAttribType
:
:
kUByte2
:
return
2
*
sizeof
(
char
)
;
case
VertexAttribType
:
:
kUByte4
:
return
4
*
sizeof
(
char
)
;
case
VertexAttribType
:
:
kUByte_norm
:
return
1
*
sizeof
(
char
)
;
case
VertexAttribType
:
:
kUByte4_norm
:
return
4
*
sizeof
(
char
)
;
case
VertexAttribType
:
:
kShort2
:
return
2
*
sizeof
(
int16_t
)
;
case
VertexAttribType
:
:
kShort4
:
return
4
*
sizeof
(
int16_t
)
;
case
VertexAttribType
:
:
kUShort2
:
[
[
fallthrough
]
]
;
case
VertexAttribType
:
:
kUShort2_norm
:
return
2
*
sizeof
(
uint16_t
)
;
case
VertexAttribType
:
:
kInt
:
return
sizeof
(
int32_t
)
;
case
VertexAttribType
:
:
kUInt
:
return
sizeof
(
uint32_t
)
;
case
VertexAttribType
:
:
kUShort_norm
:
return
sizeof
(
uint16_t
)
;
case
VertexAttribType
:
:
kUShort4_norm
:
return
4
*
sizeof
(
uint16_t
)
;
}
SkUNREACHABLE
;
}
struct
SamplerDesc
{
SkSamplingOptions
fSamplingOptions
;
SkTileMode
fTileModes
[
2
]
;
bool
operator
=
=
(
const
SamplerDesc
&
o
)
const
{
return
fSamplingOptions
=
=
o
.
fSamplingOptions
&
&
fTileModes
[
0
]
=
=
o
.
fTileModes
[
0
]
&
&
fTileModes
[
1
]
=
=
o
.
fTileModes
[
1
]
;
}
bool
operator
!
=
(
const
SamplerDesc
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
uint32_t
asKey
(
)
const
{
static_assert
(
kSkTileModeCount
<
=
4
&
&
kSkFilterModeCount
<
=
2
)
;
SkASSERT
(
!
fSamplingOptions
.
useCubic
|
|
(
fSamplingOptions
.
filter
=
=
SkFilterMode
:
:
kNearest
&
&
fSamplingOptions
.
mipmap
=
=
SkMipmapMode
:
:
kNone
)
)
;
return
(
static_cast
<
int
>
(
fTileModes
[
0
]
)
<
<
0
)
|
(
static_cast
<
int
>
(
fTileModes
[
1
]
)
<
<
2
)
|
(
static_cast
<
int
>
(
fSamplingOptions
.
filter
)
<
<
4
)
|
(
static_cast
<
int
>
(
fSamplingOptions
.
mipmap
)
<
<
5
)
;
}
}
;
enum
class
UniformSlot
{
kRenderStep
kPaint
}
;
enum
class
CompareOp
:
uint8_t
{
kAlways
kNever
kGreater
kGEqual
kLess
kLEqual
kEqual
kNotEqual
}
;
static
constexpr
int
kCompareOpCount
=
1
+
(
int
)
CompareOp
:
:
kNotEqual
;
enum
class
StencilOp
:
uint8_t
{
kKeep
kZero
kReplace
kInvert
kIncWrap
kDecWrap
kIncClamp
kDecClamp
}
;
static
constexpr
int
kStencilOpCount
=
1
+
(
int
)
StencilOp
:
:
kDecClamp
;
struct
DepthStencilSettings
{
struct
Face
{
constexpr
Face
(
)
=
default
;
constexpr
Face
(
StencilOp
stencilFail
StencilOp
depthFail
StencilOp
dsPass
CompareOp
compare
uint32_t
readMask
uint32_t
writeMask
)
:
fStencilFailOp
(
stencilFail
)
fDepthFailOp
(
depthFail
)
fDepthStencilPassOp
(
dsPass
)
fCompareOp
(
compare
)
fReadMask
(
readMask
)
fWriteMask
(
writeMask
)
{
}
StencilOp
fStencilFailOp
=
StencilOp
:
:
kKeep
;
StencilOp
fDepthFailOp
=
StencilOp
:
:
kKeep
;
StencilOp
fDepthStencilPassOp
=
StencilOp
:
:
kKeep
;
CompareOp
fCompareOp
=
CompareOp
:
:
kAlways
;
uint32_t
fReadMask
=
0xffffffff
;
uint32_t
fWriteMask
=
0xffffffff
;
constexpr
bool
operator
=
=
(
const
Face
&
that
)
const
{
return
this
-
>
fStencilFailOp
=
=
that
.
fStencilFailOp
&
&
this
-
>
fDepthFailOp
=
=
that
.
fDepthFailOp
&
&
this
-
>
fDepthStencilPassOp
=
=
that
.
fDepthStencilPassOp
&
&
this
-
>
fCompareOp
=
=
that
.
fCompareOp
&
&
this
-
>
fReadMask
=
=
that
.
fReadMask
&
&
this
-
>
fWriteMask
=
=
that
.
fWriteMask
;
}
}
;
constexpr
DepthStencilSettings
(
)
=
default
;
constexpr
DepthStencilSettings
(
Face
front
Face
back
uint32_t
stencilRef
bool
stencilTest
CompareOp
depthCompare
bool
depthTest
bool
depthWrite
)
:
fFrontStencil
(
front
)
fBackStencil
(
back
)
fStencilReferenceValue
(
stencilRef
)
fDepthCompareOp
(
depthCompare
)
fStencilTestEnabled
(
stencilTest
)
fDepthTestEnabled
(
depthTest
)
fDepthWriteEnabled
(
depthWrite
)
{
}
constexpr
bool
operator
=
=
(
const
DepthStencilSettings
&
that
)
const
{
return
this
-
>
fFrontStencil
=
=
that
.
fFrontStencil
&
&
this
-
>
fBackStencil
=
=
that
.
fBackStencil
&
&
this
-
>
fStencilReferenceValue
=
=
that
.
fStencilReferenceValue
&
&
this
-
>
fDepthCompareOp
=
=
that
.
fDepthCompareOp
&
&
this
-
>
fStencilTestEnabled
=
=
that
.
fStencilTestEnabled
&
&
this
-
>
fDepthTestEnabled
=
=
that
.
fDepthTestEnabled
&
&
this
-
>
fDepthWriteEnabled
=
=
that
.
fDepthWriteEnabled
;
}
Face
fFrontStencil
;
Face
fBackStencil
;
uint32_t
fStencilReferenceValue
=
0
;
CompareOp
fDepthCompareOp
=
CompareOp
:
:
kAlways
;
bool
fStencilTestEnabled
=
false
;
bool
fDepthTestEnabled
=
false
;
bool
fDepthWriteEnabled
=
false
;
}
;
}
;
#
endif
