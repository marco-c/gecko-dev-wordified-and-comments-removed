#
include
"
src
/
gpu
/
graphite
/
Resource
.
h
"
#
include
"
src
/
gpu
/
graphite
/
ResourceCache
.
h
"
namespace
skgpu
:
:
graphite
{
Resource
:
:
Resource
(
const
SharedContext
*
sharedContext
Ownership
ownership
skgpu
:
:
Budgeted
budgeted
size_t
gpuMemorySize
)
:
fSharedContext
(
sharedContext
)
fUsageRefCnt
(
1
)
fCommandBufferRefCnt
(
0
)
fCacheRefCnt
(
0
)
fOwnership
(
ownership
)
fGpuMemorySize
(
gpuMemorySize
)
fBudgeted
(
budgeted
)
{
SkASSERT
(
fOwnership
=
=
Ownership
:
:
kOwned
|
|
fBudgeted
=
=
skgpu
:
:
Budgeted
:
:
kNo
)
;
}
Resource
:
:
~
Resource
(
)
{
SkASSERT
(
this
-
>
wasDestroyed
(
)
)
;
}
void
Resource
:
:
registerWithCache
(
sk_sp
<
ResourceCache
>
returnCache
)
{
SkASSERT
(
!
fReturnCache
)
;
SkASSERT
(
returnCache
)
;
fReturnCache
=
std
:
:
move
(
returnCache
)
;
}
bool
Resource
:
:
notifyARefIsZero
(
LastRemovedRef
removedRef
)
const
{
SkASSERT
(
!
this
-
>
wasDestroyed
(
)
)
;
Resource
*
mutableThis
=
const_cast
<
Resource
*
>
(
this
)
;
if
(
removedRef
!
=
LastRemovedRef
:
:
kCache
&
&
fReturnCache
&
&
fReturnCache
-
>
returnResource
(
mutableThis
removedRef
)
)
{
return
false
;
}
if
(
!
this
-
>
hasAnyRefs
(
)
)
{
return
true
;
}
return
false
;
}
void
Resource
:
:
internalDispose
(
)
{
SkASSERT
(
fSharedContext
)
;
this
-
>
invokeReleaseProc
(
)
;
this
-
>
freeGpuData
(
)
;
fSharedContext
=
nullptr
;
delete
this
;
}
bool
Resource
:
:
isPurgeable
(
)
const
{
return
!
this
-
>
hasAnyRefs
(
)
;
}
}
