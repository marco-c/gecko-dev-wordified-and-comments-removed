#
include
"
src
/
gpu
/
graphite
/
DrawList
.
h
"
#
include
"
src
/
gpu
/
BufferWriter
.
h
"
#
include
"
src
/
gpu
/
graphite
/
Renderer
.
h
"
#
include
"
src
/
gpu
/
graphite
/
geom
/
Shape
.
h
"
namespace
skgpu
:
:
graphite
{
const
Transform
&
DrawList
:
:
deduplicateTransform
(
const
Transform
&
localToDevice
)
{
if
(
fTransforms
.
empty
(
)
|
|
fTransforms
.
back
(
)
!
=
localToDevice
)
{
fTransforms
.
push_back
(
localToDevice
)
;
}
return
fTransforms
.
back
(
)
;
}
void
DrawList
:
:
recordDraw
(
const
Renderer
*
renderer
const
Transform
&
localToDevice
const
Geometry
&
geometry
const
Clip
&
clip
DrawOrder
ordering
const
PaintParams
*
paint
const
StrokeStyle
*
stroke
)
{
SkASSERT
(
localToDevice
.
valid
(
)
)
;
SkASSERT
(
!
geometry
.
isEmpty
(
)
&
&
!
clip
.
drawBounds
(
)
.
isEmptyNegativeOrNaN
(
)
)
;
SkASSERT
(
!
(
renderer
-
>
depthStencilFlags
(
)
&
DepthStencilFlags
:
:
kStencil
)
|
|
ordering
.
stencilIndex
(
)
!
=
DrawOrder
:
:
kUnassigned
)
;
fDraws
.
push_back
(
{
renderer
this
-
>
deduplicateTransform
(
localToDevice
)
geometry
clip
ordering
paint
stroke
}
)
;
fRenderStepCount
+
=
renderer
-
>
numRenderSteps
(
)
;
}
}
