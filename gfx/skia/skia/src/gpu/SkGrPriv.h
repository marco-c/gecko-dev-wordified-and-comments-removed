#
ifndef
SkGrPriv_DEFINED
#
define
SkGrPriv_DEFINED
#
include
"
GrTypes
.
h
"
#
include
"
GrBlend
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkMatrix
.
h
"
#
include
"
SkXfermode
.
h
"
class
GrCaps
;
class
GrContext
;
class
GrFragmentProcessor
;
class
GrPaint
;
class
GrTexture
;
class
GrTextureParams
;
class
GrUniqueKey
;
class
SkData
;
class
SkPaint
;
class
SkPixelRef
;
struct
SkIRect
;
void
GrMakeKeyFromImageID
(
GrUniqueKey
*
key
uint32_t
imageID
const
SkIRect
&
imageBounds
)
;
void
GrInstallBitmapUniqueKeyInvalidator
(
const
GrUniqueKey
&
key
SkPixelRef
*
pixelRef
)
;
bool
SkPaintToGrPaint
(
GrContext
*
const
SkPaint
&
skPaint
const
SkMatrix
&
viewM
bool
allowSRGBInputs
GrPaint
*
grPaint
)
;
bool
SkPaintToGrPaintNoShader
(
GrContext
*
context
const
SkPaint
&
skPaint
bool
allowSRGBInputs
GrPaint
*
grPaint
)
;
bool
SkPaintToGrPaintReplaceShader
(
GrContext
*
const
SkPaint
&
skPaint
const
GrFragmentProcessor
*
shaderFP
bool
allowSRGBInputs
GrPaint
*
grPaint
)
;
bool
SkPaintToGrPaintWithXfermode
(
GrContext
*
context
const
SkPaint
&
skPaint
const
SkMatrix
&
viewM
SkXfermode
:
:
Mode
primColorMode
bool
primitiveIsSrc
bool
allowSRGBInputs
GrPaint
*
grPaint
)
;
inline
bool
SkPaintToGrPaintWithPrimitiveColor
(
GrContext
*
context
const
SkPaint
&
skPaint
bool
allowSRGBInputs
GrPaint
*
grPaint
)
{
return
SkPaintToGrPaintWithXfermode
(
context
skPaint
SkMatrix
:
:
I
(
)
SkXfermode
:
:
kDst_Mode
false
allowSRGBInputs
grPaint
)
;
}
bool
SkPaintToGrPaintWithTexture
(
GrContext
*
context
const
SkPaint
&
paint
const
SkMatrix
&
viewM
const
GrFragmentProcessor
*
fp
bool
textureIsAlphaOnly
bool
allowSRGBInputs
GrPaint
*
grPaint
)
;
GrSurfaceDesc
GrImageInfoToSurfaceDesc
(
const
SkImageInfo
&
const
GrCaps
&
)
;
bool
GrPixelConfig2ColorAndProfileType
(
GrPixelConfig
SkColorType
*
SkColorProfileType
*
)
;
GrPixelConfig
GrIsCompressedTextureDataSupported
(
GrContext
*
ctx
SkData
*
data
int
expectedW
int
expectedH
const
void
*
*
outStartOfDataToUpload
)
;
GrTexture
*
GrUploadBitmapToTexture
(
GrContext
*
const
SkBitmap
&
)
;
GrTexture
*
GrGenerateMipMapsAndUploadToTexture
(
GrContext
*
const
SkBitmap
&
)
;
GrTexture
*
GrUploadPixmapToTexture
(
GrContext
*
const
SkPixmap
&
SkBudgeted
budgeted
)
;
GR_STATIC_ASSERT
(
(
int
)
kZero_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kZero_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kOne_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kOne_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kSC_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kSC_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kISC_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kISC_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kDC_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kDC_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kIDC_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kIDC_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kSA_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kSA_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kISA_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kISA_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kDA_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kDA_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kIDA_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kIDA_Coeff
)
;
GR_STATIC_ASSERT
(
SkXfermode
:
:
kCoeffCount
=
=
10
)
;
#
define
SkXfermodeCoeffToGrBlendCoeff
(
X
)
(
(
GrBlendCoeff
)
(
X
)
)
#
endif
