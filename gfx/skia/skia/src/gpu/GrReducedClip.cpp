#
include
"
GrReducedClip
.
h
"
typedef
SkClipStack
:
:
Element
Element
;
static
void
reduced_stack_walker
(
const
SkClipStack
&
stack
const
SkRect
&
queryBounds
GrReducedClip
:
:
ElementList
*
result
int32_t
*
resultGenID
GrReducedClip
:
:
InitialState
*
initialState
bool
*
requiresAA
)
{
static
const
GrReducedClip
:
:
InitialState
kUnknown_InitialState
=
static_cast
<
GrReducedClip
:
:
InitialState
>
(
-
1
)
;
*
initialState
=
kUnknown_InitialState
;
bool
embiggens
=
false
;
bool
emsmallens
=
false
;
SkClipStack
:
:
Iter
iter
(
stack
SkClipStack
:
:
Iter
:
:
kTop_IterStart
)
;
int
numAAElements
=
0
;
while
(
(
kUnknown_InitialState
=
=
*
initialState
)
)
{
const
Element
*
element
=
iter
.
prev
(
)
;
if
(
nullptr
=
=
element
)
{
*
initialState
=
GrReducedClip
:
:
kAllIn_InitialState
;
break
;
}
if
(
SkClipStack
:
:
kEmptyGenID
=
=
element
-
>
getGenID
(
)
)
{
*
initialState
=
GrReducedClip
:
:
kAllOut_InitialState
;
break
;
}
if
(
SkClipStack
:
:
kWideOpenGenID
=
=
element
-
>
getGenID
(
)
)
{
*
initialState
=
GrReducedClip
:
:
kAllIn_InitialState
;
break
;
}
bool
skippable
=
false
;
bool
isFlip
=
false
;
switch
(
element
-
>
getOp
(
)
)
{
case
SkRegion
:
:
kDifference_Op
:
if
(
element
-
>
isInverseFilled
(
)
)
{
if
(
element
-
>
contains
(
queryBounds
)
)
{
skippable
=
true
;
}
else
if
(
!
SkRect
:
:
Intersects
(
element
-
>
getBounds
(
)
queryBounds
)
)
{
*
initialState
=
GrReducedClip
:
:
kAllOut_InitialState
;
skippable
=
true
;
}
}
else
{
if
(
element
-
>
contains
(
queryBounds
)
)
{
*
initialState
=
GrReducedClip
:
:
kAllOut_InitialState
;
skippable
=
true
;
}
else
if
(
!
SkRect
:
:
Intersects
(
element
-
>
getBounds
(
)
queryBounds
)
)
{
skippable
=
true
;
}
}
if
(
!
skippable
)
{
emsmallens
=
true
;
}
break
;
case
SkRegion
:
:
kIntersect_Op
:
if
(
element
-
>
isInverseFilled
(
)
)
{
if
(
element
-
>
contains
(
queryBounds
)
)
{
*
initialState
=
GrReducedClip
:
:
kAllOut_InitialState
;
skippable
=
true
;
}
else
if
(
!
SkRect
:
:
Intersects
(
element
-
>
getBounds
(
)
queryBounds
)
)
{
skippable
=
true
;
}
}
else
{
if
(
element
-
>
contains
(
queryBounds
)
)
{
skippable
=
true
;
}
else
if
(
!
SkRect
:
:
Intersects
(
element
-
>
getBounds
(
)
queryBounds
)
)
{
*
initialState
=
GrReducedClip
:
:
kAllOut_InitialState
;
skippable
=
true
;
}
}
if
(
!
skippable
)
{
emsmallens
=
true
;
}
break
;
case
SkRegion
:
:
kUnion_Op
:
if
(
element
-
>
isInverseFilled
(
)
)
{
if
(
element
-
>
contains
(
queryBounds
)
)
{
skippable
=
true
;
}
else
if
(
!
SkRect
:
:
Intersects
(
element
-
>
getBounds
(
)
queryBounds
)
)
{
*
initialState
=
GrReducedClip
:
:
kAllIn_InitialState
;
skippable
=
true
;
}
}
else
{
if
(
element
-
>
contains
(
queryBounds
)
)
{
*
initialState
=
GrReducedClip
:
:
kAllIn_InitialState
;
skippable
=
true
;
}
else
if
(
!
SkRect
:
:
Intersects
(
element
-
>
getBounds
(
)
queryBounds
)
)
{
skippable
=
true
;
}
}
if
(
!
skippable
)
{
embiggens
=
true
;
}
break
;
case
SkRegion
:
:
kXOR_Op
:
if
(
element
-
>
isInverseFilled
(
)
)
{
if
(
element
-
>
contains
(
queryBounds
)
)
{
skippable
=
true
;
}
else
if
(
!
SkRect
:
:
Intersects
(
element
-
>
getBounds
(
)
queryBounds
)
)
{
isFlip
=
true
;
}
}
else
{
if
(
element
-
>
contains
(
queryBounds
)
)
{
isFlip
=
true
;
}
else
if
(
!
SkRect
:
:
Intersects
(
element
-
>
getBounds
(
)
queryBounds
)
)
{
skippable
=
true
;
}
}
if
(
!
skippable
)
{
emsmallens
=
embiggens
=
true
;
}
break
;
case
SkRegion
:
:
kReverseDifference_Op
:
if
(
element
-
>
isInverseFilled
(
)
)
{
if
(
element
-
>
contains
(
queryBounds
)
)
{
*
initialState
=
GrReducedClip
:
:
kAllOut_InitialState
;
skippable
=
true
;
}
else
if
(
!
SkRect
:
:
Intersects
(
element
-
>
getBounds
(
)
queryBounds
)
)
{
isFlip
=
true
;
}
}
else
{
if
(
element
-
>
contains
(
queryBounds
)
)
{
isFlip
=
true
;
}
else
if
(
!
SkRect
:
:
Intersects
(
element
-
>
getBounds
(
)
queryBounds
)
)
{
*
initialState
=
GrReducedClip
:
:
kAllOut_InitialState
;
skippable
=
true
;
}
}
if
(
!
skippable
)
{
emsmallens
=
embiggens
=
true
;
}
break
;
case
SkRegion
:
:
kReplace_Op
:
if
(
element
-
>
isInverseFilled
(
)
)
{
if
(
element
-
>
contains
(
queryBounds
)
)
{
*
initialState
=
GrReducedClip
:
:
kAllOut_InitialState
;
skippable
=
true
;
}
else
if
(
!
SkRect
:
:
Intersects
(
element
-
>
getBounds
(
)
queryBounds
)
)
{
*
initialState
=
GrReducedClip
:
:
kAllIn_InitialState
;
skippable
=
true
;
}
}
else
{
if
(
element
-
>
contains
(
queryBounds
)
)
{
*
initialState
=
GrReducedClip
:
:
kAllIn_InitialState
;
skippable
=
true
;
}
else
if
(
!
SkRect
:
:
Intersects
(
element
-
>
getBounds
(
)
queryBounds
)
)
{
*
initialState
=
GrReducedClip
:
:
kAllOut_InitialState
;
skippable
=
true
;
}
}
if
(
!
skippable
)
{
*
initialState
=
GrReducedClip
:
:
kAllOut_InitialState
;
embiggens
=
emsmallens
=
true
;
}
break
;
default
:
SkDEBUGFAIL
(
"
Unexpected
op
.
"
)
;
break
;
}
if
(
!
skippable
)
{
if
(
0
=
=
result
-
>
count
(
)
)
{
*
resultGenID
=
element
-
>
getGenID
(
)
;
}
if
(
isFlip
)
{
SkASSERT
(
SkRegion
:
:
kXOR_Op
=
=
element
-
>
getOp
(
)
|
|
SkRegion
:
:
kReverseDifference_Op
=
=
element
-
>
getOp
(
)
)
;
result
-
>
addToHead
(
queryBounds
SkRegion
:
:
kReverseDifference_Op
false
)
;
}
else
{
Element
*
newElement
=
result
-
>
addToHead
(
*
element
)
;
if
(
newElement
-
>
isAA
(
)
)
{
+
+
numAAElements
;
}
bool
isReplace
=
SkRegion
:
:
kReplace_Op
=
=
newElement
-
>
getOp
(
)
;
if
(
newElement
-
>
isInverseFilled
(
)
&
&
(
SkRegion
:
:
kIntersect_Op
=
=
newElement
-
>
getOp
(
)
|
|
isReplace
)
)
{
newElement
-
>
invertShapeFillType
(
)
;
newElement
-
>
setOp
(
SkRegion
:
:
kDifference_Op
)
;
if
(
isReplace
)
{
SkASSERT
(
GrReducedClip
:
:
kAllOut_InitialState
=
=
*
initialState
)
;
*
initialState
=
GrReducedClip
:
:
kAllIn_InitialState
;
}
}
}
}
}
if
(
(
GrReducedClip
:
:
kAllOut_InitialState
=
=
*
initialState
&
&
!
embiggens
)
|
|
(
GrReducedClip
:
:
kAllIn_InitialState
=
=
*
initialState
&
&
!
emsmallens
)
)
{
result
-
>
reset
(
)
;
}
else
{
Element
*
element
=
result
-
>
headIter
(
)
.
get
(
)
;
while
(
element
)
{
bool
skippable
=
false
;
switch
(
element
-
>
getOp
(
)
)
{
case
SkRegion
:
:
kDifference_Op
:
skippable
=
GrReducedClip
:
:
kAllOut_InitialState
=
=
*
initialState
;
break
;
case
SkRegion
:
:
kIntersect_Op
:
if
(
GrReducedClip
:
:
kAllOut_InitialState
=
=
*
initialState
)
{
skippable
=
true
;
}
else
{
*
initialState
=
GrReducedClip
:
:
kAllOut_InitialState
;
element
-
>
setOp
(
SkRegion
:
:
kReplace_Op
)
;
}
break
;
case
SkRegion
:
:
kUnion_Op
:
if
(
GrReducedClip
:
:
kAllIn_InitialState
=
=
*
initialState
)
{
skippable
=
true
;
}
else
{
element
-
>
setOp
(
SkRegion
:
:
kReplace_Op
)
;
}
break
;
case
SkRegion
:
:
kXOR_Op
:
if
(
GrReducedClip
:
:
kAllOut_InitialState
=
=
*
initialState
)
{
element
-
>
setOp
(
SkRegion
:
:
kReplace_Op
)
;
}
break
;
case
SkRegion
:
:
kReverseDifference_Op
:
if
(
GrReducedClip
:
:
kAllIn_InitialState
=
=
*
initialState
)
{
skippable
=
true
;
*
initialState
=
GrReducedClip
:
:
kAllOut_InitialState
;
}
else
{
skippable
=
element
-
>
isInverseFilled
(
)
?
!
SkRect
:
:
Intersects
(
element
-
>
getBounds
(
)
queryBounds
)
:
element
-
>
contains
(
queryBounds
)
;
if
(
skippable
)
{
*
initialState
=
GrReducedClip
:
:
kAllIn_InitialState
;
}
else
{
element
-
>
setOp
(
SkRegion
:
:
kReplace_Op
)
;
}
}
break
;
case
SkRegion
:
:
kReplace_Op
:
skippable
=
false
;
break
;
default
:
SkDEBUGFAIL
(
"
Unexpected
op
.
"
)
;
break
;
}
if
(
!
skippable
)
{
break
;
}
else
{
if
(
element
-
>
isAA
(
)
)
{
-
-
numAAElements
;
}
result
-
>
popHead
(
)
;
element
=
result
-
>
headIter
(
)
.
get
(
)
;
}
}
}
if
(
requiresAA
)
{
*
requiresAA
=
numAAElements
>
0
;
}
if
(
0
=
=
result
-
>
count
(
)
)
{
if
(
*
initialState
=
=
GrReducedClip
:
:
kAllIn_InitialState
)
{
*
resultGenID
=
SkClipStack
:
:
kWideOpenGenID
;
}
else
{
*
resultGenID
=
SkClipStack
:
:
kEmptyGenID
;
}
}
}
void
GrReducedClip
:
:
ReduceClipStack
(
const
SkClipStack
&
stack
const
SkIRect
&
queryBounds
ElementList
*
result
int32_t
*
resultGenID
InitialState
*
initialState
SkIRect
*
tighterBounds
bool
*
requiresAA
)
{
result
-
>
reset
(
)
;
*
resultGenID
=
stack
.
getTopmostGenID
(
)
;
if
(
stack
.
isWideOpen
(
)
)
{
*
initialState
=
kAllIn_InitialState
;
return
;
}
SkClipStack
:
:
BoundsType
stackBoundsType
;
SkRect
stackBounds
;
bool
iior
;
stack
.
getBounds
(
&
stackBounds
&
stackBoundsType
&
iior
)
;
const
SkIRect
*
bounds
=
&
queryBounds
;
SkRect
scalarQueryBounds
=
SkRect
:
:
Make
(
queryBounds
)
;
if
(
iior
)
{
SkASSERT
(
SkClipStack
:
:
kNormal_BoundsType
=
=
stackBoundsType
)
;
SkRect
isectRect
;
if
(
stackBounds
.
contains
(
scalarQueryBounds
)
)
{
*
initialState
=
GrReducedClip
:
:
kAllIn_InitialState
;
if
(
tighterBounds
)
{
*
tighterBounds
=
queryBounds
;
}
if
(
requiresAA
)
{
*
requiresAA
=
false
;
}
}
else
if
(
isectRect
.
intersect
(
stackBounds
scalarQueryBounds
)
)
{
if
(
tighterBounds
)
{
isectRect
.
roundOut
(
tighterBounds
)
;
SkRect
scalarTighterBounds
=
SkRect
:
:
Make
(
*
tighterBounds
)
;
if
(
scalarTighterBounds
=
=
isectRect
)
{
if
(
requiresAA
)
{
*
requiresAA
=
false
;
}
*
initialState
=
GrReducedClip
:
:
kAllIn_InitialState
;
return
;
}
}
*
initialState
=
kAllOut_InitialState
;
SkClipStack
:
:
Iter
iter
(
stack
SkClipStack
:
:
Iter
:
:
kTop_IterStart
)
;
bool
doAA
=
iter
.
prev
(
)
-
>
isAA
(
)
;
result
-
>
addToHead
(
isectRect
SkRegion
:
:
kReplace_Op
doAA
)
;
if
(
requiresAA
)
{
*
requiresAA
=
doAA
;
}
}
else
{
*
initialState
=
kAllOut_InitialState
;
if
(
requiresAA
)
{
*
requiresAA
=
false
;
}
}
return
;
}
else
{
if
(
SkClipStack
:
:
kNormal_BoundsType
=
=
stackBoundsType
)
{
if
(
!
SkRect
:
:
Intersects
(
stackBounds
scalarQueryBounds
)
)
{
*
initialState
=
kAllOut_InitialState
;
if
(
requiresAA
)
{
*
requiresAA
=
false
;
}
return
;
}
if
(
tighterBounds
)
{
SkIRect
stackIBounds
;
stackBounds
.
roundOut
(
&
stackIBounds
)
;
if
(
!
tighterBounds
-
>
intersect
(
queryBounds
stackIBounds
)
)
{
SkASSERT
(
0
)
;
tighterBounds
-
>
setEmpty
(
)
;
}
bounds
=
tighterBounds
;
}
}
else
{
if
(
stackBounds
.
contains
(
scalarQueryBounds
)
)
{
*
initialState
=
kAllOut_InitialState
;
}
if
(
tighterBounds
)
{
*
tighterBounds
=
queryBounds
;
}
}
}
SkRect
scalarBounds
=
SkRect
:
:
Make
(
*
bounds
)
;
reduced_stack_walker
(
stack
scalarBounds
result
resultGenID
initialState
requiresAA
)
;
SkASSERT
(
SkClipStack
:
:
kInvalidGenID
!
=
*
resultGenID
)
;
}
