#
ifndef
GrSurfaceContext_DEFINED
#
define
GrSurfaceContext_DEFINED
#
include
"
.
.
/
private
/
GrSurfaceProxy
.
h
"
#
include
"
GrColorSpaceInfo
.
h
"
#
include
"
SkRefCnt
.
h
"
class
GrAuditTrail
;
class
GrDrawingManager
;
class
GrOpList
;
class
GrRecordingContext
;
class
GrRenderTargetContext
;
class
GrRenderTargetProxy
;
class
GrSingleOwner
;
class
GrSurface
;
class
GrSurfaceContextPriv
;
class
GrSurfaceProxy
;
class
GrTextureProxy
;
struct
SkIPoint
;
struct
SkIRect
;
class
SK_API
GrSurfaceContext
:
public
SkRefCnt
{
public
:
~
GrSurfaceContext
(
)
override
{
}
const
GrColorSpaceInfo
&
colorSpaceInfo
(
)
const
{
return
fColorSpaceInfo
;
}
int
width
(
)
const
{
return
this
-
>
asSurfaceProxy
(
)
-
>
width
(
)
;
}
int
height
(
)
const
{
return
this
-
>
asSurfaceProxy
(
)
-
>
height
(
)
;
}
bool
copy
(
GrSurfaceProxy
*
src
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
;
bool
copy
(
GrSurfaceProxy
*
src
)
{
return
this
-
>
copy
(
src
SkIRect
:
:
MakeWH
(
src
-
>
width
(
)
src
-
>
height
(
)
)
SkIPoint
:
:
Make
(
0
0
)
)
;
}
bool
readPixels
(
const
SkImageInfo
&
dstInfo
void
*
dstBuffer
size_t
dstRowBytes
int
x
int
y
uint32_t
flags
=
0
)
;
bool
writePixels
(
const
SkImageInfo
&
srcInfo
const
void
*
srcBuffer
size_t
srcRowBytes
int
x
int
y
uint32_t
flags
=
0
)
;
virtual
GrSurfaceProxy
*
asSurfaceProxy
(
)
=
0
;
virtual
const
GrSurfaceProxy
*
asSurfaceProxy
(
)
const
=
0
;
virtual
sk_sp
<
GrSurfaceProxy
>
asSurfaceProxyRef
(
)
=
0
;
virtual
GrTextureProxy
*
asTextureProxy
(
)
=
0
;
virtual
const
GrTextureProxy
*
asTextureProxy
(
)
const
=
0
;
virtual
sk_sp
<
GrTextureProxy
>
asTextureProxyRef
(
)
=
0
;
virtual
GrRenderTargetProxy
*
asRenderTargetProxy
(
)
=
0
;
virtual
sk_sp
<
GrRenderTargetProxy
>
asRenderTargetProxyRef
(
)
=
0
;
virtual
GrRenderTargetContext
*
asRenderTargetContext
(
)
{
return
nullptr
;
}
GrAuditTrail
*
auditTrail
(
)
;
GrSurfaceContextPriv
surfPriv
(
)
;
const
GrSurfaceContextPriv
surfPriv
(
)
const
;
protected
:
friend
class
GrSurfaceContextPriv
;
GrSurfaceContext
(
GrRecordingContext
*
GrPixelConfig
sk_sp
<
SkColorSpace
>
)
;
GrDrawingManager
*
drawingManager
(
)
;
const
GrDrawingManager
*
drawingManager
(
)
const
;
virtual
GrOpList
*
getOpList
(
)
=
0
;
SkDEBUGCODE
(
virtual
void
validate
(
)
const
=
0
;
)
SkDEBUGCODE
(
GrSingleOwner
*
singleOwner
(
)
;
)
GrRecordingContext
*
fContext
;
private
:
GrColorSpaceInfo
fColorSpaceInfo
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
