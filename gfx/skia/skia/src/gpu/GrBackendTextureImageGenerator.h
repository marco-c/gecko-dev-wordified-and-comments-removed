#
ifndef
GrBackendTextureImageGenerator_DEFINED
#
define
GrBackendTextureImageGenerator_DEFINED
#
include
"
include
/
core
/
SkImageGenerator
.
h
"
#
include
"
include
/
gpu
/
GrBackendSurface
.
h
"
#
include
"
include
/
private
/
GrResourceKey
.
h
"
#
include
"
include
/
private
/
SkMutex
.
h
"
class
GrSemaphore
;
class
GrBackendTextureImageGenerator
:
public
SkImageGenerator
{
public
:
static
std
:
:
unique_ptr
<
SkImageGenerator
>
Make
(
sk_sp
<
GrTexture
>
GrSurfaceOrigin
sk_sp
<
GrSemaphore
>
SkColorType
SkAlphaType
sk_sp
<
SkColorSpace
>
)
;
~
GrBackendTextureImageGenerator
(
)
override
;
protected
:
bool
onIsValid
(
GrContext
*
)
const
override
{
return
true
;
}
TexGenType
onCanGenerateTexture
(
)
const
override
{
return
TexGenType
:
:
kCheap
;
}
sk_sp
<
GrTextureProxy
>
onGenerateTexture
(
GrRecordingContext
*
const
SkImageInfo
&
const
SkIPoint
&
bool
willNeedMipMaps
)
override
;
private
:
GrBackendTextureImageGenerator
(
const
SkImageInfo
&
info
GrTexture
*
GrSurfaceOrigin
uint32_t
owningContextID
sk_sp
<
GrSemaphore
>
const
GrBackendTexture
&
)
;
static
void
ReleaseRefHelper_TextureReleaseProc
(
void
*
ctx
)
;
class
RefHelper
:
public
SkNVRefCnt
<
RefHelper
>
{
public
:
RefHelper
(
GrTexture
*
uint32_t
owningContextID
)
;
~
RefHelper
(
)
;
GrTexture
*
fOriginalTexture
;
uint32_t
fOwningContextID
;
GrUniqueKey
fBorrowedTextureKey
;
GrRefCntedCallback
*
fBorrowingContextReleaseProc
;
uint32_t
fBorrowingContextID
;
}
;
RefHelper
*
fRefHelper
;
SkMutex
fBorrowingMutex
;
sk_sp
<
GrSemaphore
>
fSemaphore
;
GrBackendTexture
fBackendTexture
;
GrSurfaceOrigin
fSurfaceOrigin
;
typedef
SkImageGenerator
INHERITED
;
}
;
#
endif
