#
ifndef
GrClientMappedBufferManager_DEFINED
#
define
GrClientMappedBufferManager_DEFINED
#
include
"
include
/
private
/
SkTArray
.
h
"
#
include
"
src
/
core
/
SkMessageBus
.
h
"
#
include
"
src
/
gpu
/
GrGpuBuffer
.
h
"
#
include
<
forward_list
>
class
GrClientMappedBufferManager
final
{
public
:
struct
BufferFinishedMessage
{
sk_sp
<
GrGpuBuffer
>
fBuffer
;
uint32_t
fInboxID
;
}
;
using
BufferFinishedMessageBus
=
SkMessageBus
<
BufferFinishedMessage
>
;
GrClientMappedBufferManager
(
uint32_t
contextID
)
;
GrClientMappedBufferManager
(
const
GrClientMappedBufferManager
&
)
=
delete
;
GrClientMappedBufferManager
(
GrClientMappedBufferManager
&
&
)
=
delete
;
~
GrClientMappedBufferManager
(
)
;
GrClientMappedBufferManager
&
operator
=
(
const
GrClientMappedBufferManager
&
)
=
delete
;
GrClientMappedBufferManager
&
operator
=
(
GrClientMappedBufferManager
&
&
)
=
delete
;
uint32_t
inboxID
(
)
const
{
return
fFinishedBufferInbox
.
uniqueID
(
)
;
}
void
insert
(
sk_sp
<
GrGpuBuffer
>
b
)
;
void
process
(
)
;
void
abandon
(
)
;
private
:
BufferFinishedMessageBus
:
:
Inbox
fFinishedBufferInbox
;
std
:
:
forward_list
<
sk_sp
<
GrGpuBuffer
>
>
fClientHeldBuffers
;
bool
fAbandoned
=
false
;
void
remove
(
const
sk_sp
<
GrGpuBuffer
>
&
b
)
;
}
;
bool
SkShouldPostMessageToBus
(
const
GrClientMappedBufferManager
:
:
BufferFinishedMessage
&
uint32_t
msgBusUniqueID
)
;
#
endif
