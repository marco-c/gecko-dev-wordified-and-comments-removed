#
include
"
GrBitmapTextureMaker
.
h
"
#
include
"
GrContext
.
h
"
#
include
"
GrGpuResourcePriv
.
h
"
#
include
"
GrResourceProvider
.
h
"
#
include
"
SkBitmap
.
h
"
#
include
"
SkGr
.
h
"
#
include
"
SkPixelRef
.
h
"
static
bool
bmp_is_alpha_only
(
const
SkBitmap
&
bm
)
{
return
kAlpha_8_SkColorType
=
=
bm
.
colorType
(
)
;
}
GrBitmapTextureMaker
:
:
GrBitmapTextureMaker
(
GrContext
*
context
const
SkBitmap
&
bitmap
)
:
INHERITED
(
context
bitmap
.
width
(
)
bitmap
.
height
(
)
bmp_is_alpha_only
(
bitmap
)
)
fBitmap
(
bitmap
)
{
if
(
!
bitmap
.
isVolatile
(
)
)
{
SkIPoint
origin
=
bitmap
.
pixelRefOrigin
(
)
;
SkIRect
subset
=
SkIRect
:
:
MakeXYWH
(
origin
.
fX
origin
.
fY
bitmap
.
width
(
)
bitmap
.
height
(
)
)
;
GrMakeKeyFromImageID
(
&
fOriginalKey
bitmap
.
pixelRef
(
)
-
>
getGenerationID
(
)
subset
)
;
}
}
sk_sp
<
GrTextureProxy
>
GrBitmapTextureMaker
:
:
refOriginalTextureProxy
(
bool
willBeMipped
SkColorSpace
*
dstColorSpace
)
{
sk_sp
<
GrTextureProxy
>
proxy
;
if
(
fOriginalKey
.
isValid
(
)
)
{
proxy
=
this
-
>
context
(
)
-
>
resourceProvider
(
)
-
>
findProxyByUniqueKey
(
fOriginalKey
)
;
if
(
proxy
)
{
return
proxy
;
}
}
if
(
willBeMipped
)
{
proxy
=
GrGenerateMipMapsAndUploadToTextureProxy
(
this
-
>
context
(
)
fBitmap
dstColorSpace
)
;
}
if
(
!
proxy
)
{
proxy
=
GrUploadBitmapToTextureProxy
(
this
-
>
context
(
)
-
>
resourceProvider
(
)
fBitmap
)
;
}
if
(
proxy
&
&
fOriginalKey
.
isValid
(
)
)
{
this
-
>
context
(
)
-
>
resourceProvider
(
)
-
>
assignUniqueKeyToProxy
(
fOriginalKey
proxy
.
get
(
)
)
;
GrInstallBitmapUniqueKeyInvalidator
(
fOriginalKey
fBitmap
.
pixelRef
(
)
)
;
}
return
proxy
;
}
void
GrBitmapTextureMaker
:
:
makeCopyKey
(
const
CopyParams
&
copyParams
GrUniqueKey
*
copyKey
SkColorSpace
*
dstColorSpace
)
{
if
(
fOriginalKey
.
isValid
(
)
)
{
MakeCopyKeyFromOrigKey
(
fOriginalKey
copyParams
copyKey
)
;
}
}
void
GrBitmapTextureMaker
:
:
didCacheCopy
(
const
GrUniqueKey
&
copyKey
)
{
GrInstallBitmapUniqueKeyInvalidator
(
copyKey
fBitmap
.
pixelRef
(
)
)
;
}
SkAlphaType
GrBitmapTextureMaker
:
:
alphaType
(
)
const
{
return
fBitmap
.
alphaType
(
)
;
}
sk_sp
<
SkColorSpace
>
GrBitmapTextureMaker
:
:
getColorSpace
(
SkColorSpace
*
dstColorSpace
)
{
return
fBitmap
.
refColorSpace
(
)
;
}
