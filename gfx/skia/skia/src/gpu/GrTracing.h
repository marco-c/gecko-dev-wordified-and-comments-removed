#
ifndef
GrTracing_DEFINED
#
define
GrTracing_DEFINED
#
include
"
GrDrawTarget
.
h
"
#
include
"
GrGpu
.
h
"
#
include
"
GrTraceMarker
.
h
"
#
include
"
SkTLazy
.
h
"
#
include
"
SkTraceEvent
.
h
"
class
GrGpuTraceMarkerGenerator
:
public
:
:
SkNoncopyable
{
public
:
GrGpuTraceMarkerGenerator
(
GrDrawTarget
*
target
)
{
}
~
GrGpuTraceMarkerGenerator
(
)
{
if
(
fTraceMarker
.
isValid
(
)
)
{
}
}
void
initialize
(
const
char
*
marker_str
int
*
marker_counter
)
{
}
private
:
SkTLazy
<
GrGpuTraceMarker
>
fTraceMarker
;
}
;
class
GrGpuTraceMarkerGeneratorContext
:
public
:
:
SkNoncopyable
{
public
:
GrGpuTraceMarkerGeneratorContext
(
GrContext
*
context
)
{
}
~
GrGpuTraceMarkerGeneratorContext
(
)
{
if
(
fTraceMarker
.
isValid
(
)
)
{
}
}
void
initialize
(
const
char
*
marker_str
int
*
marker_counter
)
{
}
private
:
SkTLazy
<
GrGpuTraceMarker
>
fTraceMarker
;
}
;
#
define
GR_CREATE_TRACE_MARKER
(
name
target
)
\
INTERNAL_GR_CREATE_TRACE_MARKER_SCOPED
(
name
target
)
#
define
GR_CREATE_TRACE_MARKER1
(
name
target
arg1_name
arg1_val
)
\
INTERNAL_GR_CREATE_TRACE_MARKER_SCOPED
(
name
target
arg1_name
arg1_val
)
#
define
INTERNAL_GR_CREATE_TRACE_MARKER_SCOPED
(
name
target
.
.
.
)
\
static
const
char
*
SK_MACRO_APPEND_LINE
(
static_name
)
=
name
;
\
static
int
SK_MACRO_APPEND_LINE
(
name_counter
)
=
0
;
\
INTERNAL_GR_CREATE_TRACE_MARKER
(
SK_MACRO_APPEND_LINE
(
static_name
)
\
SK_MACRO_APPEND_LINE
(
name_counter
)
\
target
#
#
__VA_ARGS__
)
\
sk_atomic_inc
(
&
SK_MACRO_APPEND_LINE
(
name_counter
)
)
;
#
define
INTERNAL_GR_CREATE_TRACE_MARKER
(
name
name_counter
target
.
.
.
)
\
GR_CREATE_GPU_TRACE_MARKER
(
name
name_counter
target
)
\
INTERNAL_TRACE_EVENT_ADD_SCOPED
(
TRACE_DISABLED_BY_DEFAULT
(
"
skia
.
gpu
"
)
name
\
"
id
"
name_counter
#
#
__VA_ARGS__
)
;
#
if
GR_FORCE_GPU_TRACE_DEBUGGING
#
define
GR_CREATE_GPU_TRACE_MARKER
(
name
name_counter
target
)
\
GrGpuTraceMarkerGenerator
SK_MACRO_APPEND_LINE
(
TMG
)
(
target
)
;
\
SK_MACRO_APPEND_LINE
(
TMG
)
.
initialize
(
name
&
name_counter
)
;
#
else
#
define
GR_CREATE_GPU_TRACE_MARKER
(
name
name_counter
target
)
\
GrGpuTraceMarkerGenerator
SK_MACRO_APPEND_LINE
(
TMG
)
(
target
)
;
\
bool
SK_MACRO_APPEND_LINE
(
gpuTracingEnabled
)
;
\
TRACE_EVENT_CATEGORY_GROUP_ENABLED
(
TRACE_DISABLED_BY_DEFAULT
(
"
skia
.
gpu
"
)
\
&
SK_MACRO_APPEND_LINE
(
gpuTracingEnabled
)
)
;
\
if
(
SK_MACRO_APPEND_LINE
(
gpuTracingEnabled
)
)
{
\
SK_MACRO_APPEND_LINE
(
TMG
)
.
initialize
(
name
&
name_counter
)
;
\
}
#
endif
#
define
GR_CREATE_TRACE_MARKER_CONTEXT
(
name
context
)
\
INTERNAL_GR_CREATE_TRACE_MARKER_SCOPED_C
(
name
context
)
#
define
GR_CREATE_TRACE_MARKER_CONTEXT1
(
name
context
arg1_name
arg1_val
)
\
INTERNAL_GR_CREATE_TRACE_MARKER_SCOPED_C
(
name
context
arg1_name
arg1_val
)
#
define
INTERNAL_GR_CREATE_TRACE_MARKER_SCOPED_C
(
name
context
.
.
.
)
\
static
const
char
*
SK_MACRO_APPEND_LINE
(
static_name
)
=
name
;
\
static
int
SK_MACRO_APPEND_LINE
(
name_counter
)
=
0
;
\
INTERNAL_GR_CREATE_TRACE_MARKER_C
(
SK_MACRO_APPEND_LINE
(
static_name
)
\
SK_MACRO_APPEND_LINE
(
name_counter
)
\
context
#
#
__VA_ARGS__
)
\
sk_atomic_inc
(
&
SK_MACRO_APPEND_LINE
(
name_counter
)
)
;
#
define
INTERNAL_GR_CREATE_TRACE_MARKER_C
(
name
name_counter
context
.
.
.
)
\
GR_CREATE_GPU_TRACE_MARKER_C
(
name
name_counter
context
)
\
INTERNAL_TRACE_EVENT_ADD_SCOPED
(
TRACE_DISABLED_BY_DEFAULT
(
"
skia
.
gpu
"
)
name
\
"
id
"
name_counter
#
#
__VA_ARGS__
)
;
#
if
GR_FORCE_GPU_TRACE_DEBUGGING
#
define
GR_CREATE_GPU_TRACE_MARKER_C
(
name
name_counter
context
)
\
GrGpuTraceMarkerGeneratorContext
SK_MACRO_APPEND_LINE
(
TMG
)
(
context
)
;
\
SK_MACRO_APPEND_LINE
(
TMG
)
.
initialize
(
name
&
name_counter
)
;
#
else
#
define
GR_CREATE_GPU_TRACE_MARKER_C
(
name
name_counter
context
)
\
GrGpuTraceMarkerGeneratorContext
SK_MACRO_APPEND_LINE
(
TMG
)
(
context
)
;
\
bool
SK_MACRO_APPEND_LINE
(
gpuTracingEnabled
)
;
\
TRACE_EVENT_CATEGORY_GROUP_ENABLED
(
TRACE_DISABLED_BY_DEFAULT
(
"
skia
.
gpu
"
)
\
&
SK_MACRO_APPEND_LINE
(
gpuTracingEnabled
)
)
;
\
if
(
SK_MACRO_APPEND_LINE
(
gpuTracingEnabled
)
)
{
\
SK_MACRO_APPEND_LINE
(
TMG
)
.
initialize
(
name
&
name_counter
)
;
\
}
#
endif
#
endif
