#
ifndef
GrBuffer_DEFINED
#
define
GrBuffer_DEFINED
#
include
"
GrGpuResource
.
h
"
class
GrGpu
;
class
GrBuffer
:
public
GrGpuResource
{
public
:
static
void
ComputeScratchKeyForDynamicBuffer
(
size_t
size
GrBufferType
intendedType
GrScratchKey
*
key
)
{
static
const
GrScratchKey
:
:
ResourceType
kType
=
GrScratchKey
:
:
GenerateResourceType
(
)
;
GrScratchKey
:
:
Builder
builder
(
key
kType
1
+
(
sizeof
(
size_t
)
+
3
)
/
4
)
;
builder
[
0
]
=
intendedType
;
builder
[
1
]
=
(
uint32_t
)
size
;
if
(
sizeof
(
size_t
)
>
4
)
{
builder
[
2
]
=
(
uint32_t
)
(
(
uint64_t
)
size
>
>
32
)
;
}
}
GrAccessPattern
accessPattern
(
)
const
{
return
fAccessPattern
;
}
bool
isCPUBacked
(
)
const
{
return
fCPUBacked
;
}
void
*
map
(
)
{
if
(
!
fMapPtr
)
{
this
-
>
onMap
(
)
;
}
return
fMapPtr
;
}
void
unmap
(
)
{
SkASSERT
(
fMapPtr
)
;
this
-
>
onUnmap
(
)
;
fMapPtr
=
nullptr
;
}
void
*
mapPtr
(
)
const
{
return
fMapPtr
;
}
bool
isMapped
(
)
const
{
return
SkToBool
(
fMapPtr
)
;
}
bool
updateData
(
const
void
*
src
size_t
srcSizeInBytes
)
{
SkASSERT
(
!
this
-
>
isMapped
(
)
)
;
SkASSERT
(
srcSizeInBytes
<
=
fGpuMemorySize
)
;
return
this
-
>
onUpdateData
(
src
srcSizeInBytes
)
;
}
protected
:
GrBuffer
(
GrGpu
*
gpu
size_t
gpuMemorySize
GrBufferType
intendedType
GrAccessPattern
accessPattern
bool
cpuBacked
)
:
INHERITED
(
gpu
kCached_LifeCycle
)
fMapPtr
(
nullptr
)
fGpuMemorySize
(
gpuMemorySize
)
fAccessPattern
(
accessPattern
)
fCPUBacked
(
cpuBacked
)
{
if
(
!
fCPUBacked
&
&
SkIsPow2
(
fGpuMemorySize
)
&
&
kDynamic_GrAccessPattern
=
=
fAccessPattern
)
{
GrScratchKey
key
;
ComputeScratchKeyForDynamicBuffer
(
fGpuMemorySize
intendedType
&
key
)
;
this
-
>
setScratchKey
(
key
)
;
}
}
void
*
fMapPtr
;
private
:
virtual
size_t
onGpuMemorySize
(
)
const
{
return
fGpuMemorySize
;
}
virtual
void
onMap
(
)
=
0
;
virtual
void
onUnmap
(
)
=
0
;
virtual
bool
onUpdateData
(
const
void
*
src
size_t
srcSizeInBytes
)
=
0
;
size_t
fGpuMemorySize
;
GrAccessPattern
fAccessPattern
;
bool
fCPUBacked
;
typedef
GrGpuResource
INHERITED
;
}
;
#
endif
