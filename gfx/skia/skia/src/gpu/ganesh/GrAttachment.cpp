#
include
"
src
/
gpu
/
ganesh
/
GrAttachment
.
h
"
#
include
"
include
/
core
/
SkTextureCompressionType
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrBackendUtils
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrCaps
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrDataUtils
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrGpu
.
h
"
size_t
GrAttachment
:
:
onGpuMemorySize
(
)
const
{
if
(
!
(
fSupportedUsages
&
UsageFlags
:
:
kTexture
)
&
&
fMemoryless
=
=
GrMemoryless
:
:
kNo
)
{
GrBackendFormat
format
=
this
-
>
backendFormat
(
)
;
SkTextureCompressionType
compression
=
GrBackendFormatToCompressionType
(
format
)
;
uint64_t
size
=
GrNumBlocks
(
compression
this
-
>
dimensions
(
)
)
;
size
*
=
GrBackendFormatBytesPerBlock
(
this
-
>
backendFormat
(
)
)
;
size
*
=
this
-
>
numSamples
(
)
;
return
size
;
}
return
0
;
}
static
void
build_key
(
skgpu
:
:
ResourceKey
:
:
Builder
*
builder
const
GrCaps
&
caps
const
GrBackendFormat
&
format
SkISize
dimensions
GrAttachment
:
:
UsageFlags
requiredUsage
int
sampleCnt
GrMipmapped
mipmapped
GrProtected
isProtected
GrMemoryless
memoryless
)
{
SkASSERT
(
!
dimensions
.
isEmpty
(
)
)
;
SkASSERT
(
static_cast
<
uint32_t
>
(
isProtected
)
<
=
1
)
;
SkASSERT
(
static_cast
<
uint32_t
>
(
memoryless
)
<
=
1
)
;
SkASSERT
(
static_cast
<
uint32_t
>
(
requiredUsage
)
<
(
1u
<
<
8
)
)
;
SkASSERT
(
static_cast
<
uint32_t
>
(
sampleCnt
)
<
(
1u
<
<
(
32
-
10
)
)
)
;
uint64_t
formatKey
=
caps
.
computeFormatKey
(
format
)
;
(
*
builder
)
[
0
]
=
dimensions
.
width
(
)
;
(
*
builder
)
[
1
]
=
dimensions
.
height
(
)
;
(
*
builder
)
[
2
]
=
formatKey
&
0xFFFFFFFF
;
(
*
builder
)
[
3
]
=
(
formatKey
>
>
32
)
&
0xFFFFFFFF
;
(
*
builder
)
[
4
]
=
(
static_cast
<
uint32_t
>
(
isProtected
)
<
<
0
)
|
(
static_cast
<
uint32_t
>
(
memoryless
)
<
<
1
)
|
(
static_cast
<
uint32_t
>
(
requiredUsage
)
<
<
2
)
|
(
static_cast
<
uint32_t
>
(
sampleCnt
)
<
<
10
)
;
}
void
GrAttachment
:
:
ComputeSharedAttachmentUniqueKey
(
const
GrCaps
&
caps
const
GrBackendFormat
&
format
SkISize
dimensions
UsageFlags
requiredUsage
int
sampleCnt
GrMipmapped
mipmapped
GrProtected
isProtected
GrMemoryless
memoryless
skgpu
:
:
UniqueKey
*
key
)
{
static
const
skgpu
:
:
UniqueKey
:
:
Domain
kDomain
=
skgpu
:
:
UniqueKey
:
:
GenerateDomain
(
)
;
skgpu
:
:
UniqueKey
:
:
Builder
builder
(
key
kDomain
5
)
;
build_key
(
&
builder
caps
format
dimensions
requiredUsage
sampleCnt
mipmapped
isProtected
memoryless
)
;
}
void
GrAttachment
:
:
ComputeScratchKey
(
const
GrCaps
&
caps
const
GrBackendFormat
&
format
SkISize
dimensions
UsageFlags
requiredUsage
int
sampleCnt
GrMipmapped
mipmapped
GrProtected
isProtected
GrMemoryless
memoryless
skgpu
:
:
ScratchKey
*
key
)
{
static
const
skgpu
:
:
ScratchKey
:
:
ResourceType
kType
=
skgpu
:
:
ScratchKey
:
:
GenerateResourceType
(
)
;
skgpu
:
:
ScratchKey
:
:
Builder
builder
(
key
kType
5
)
;
build_key
(
&
builder
caps
format
dimensions
requiredUsage
sampleCnt
mipmapped
isProtected
memoryless
)
;
}
void
GrAttachment
:
:
computeScratchKey
(
skgpu
:
:
ScratchKey
*
key
)
const
{
if
(
!
SkToBool
(
fSupportedUsages
&
UsageFlags
:
:
kStencilAttachment
)
&
&
!
SkToBool
(
fSupportedUsages
&
UsageFlags
:
:
kTexture
)
)
{
auto
isProtected
=
this
-
>
isProtected
(
)
?
GrProtected
:
:
kYes
:
GrProtected
:
:
kNo
;
ComputeScratchKey
(
*
this
-
>
getGpu
(
)
-
>
caps
(
)
this
-
>
backendFormat
(
)
this
-
>
dimensions
(
)
fSupportedUsages
this
-
>
numSamples
(
)
this
-
>
mipmapped
(
)
isProtected
fMemoryless
key
)
;
}
}
