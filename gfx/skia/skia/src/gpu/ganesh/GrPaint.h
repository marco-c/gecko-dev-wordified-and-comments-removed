#
ifndef
GrPaint_DEFINED
#
define
GrPaint_DEFINED
#
include
"
include
/
core
/
SkBlendMode
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkRegion
.
h
"
#
include
"
src
/
base
/
SkTLazy
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrColor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrFragmentProcessor
.
h
"
class
GrTextureProxy
;
class
GrXPFactory
;
class
GrPaint
{
public
:
GrPaint
(
)
=
default
;
~
GrPaint
(
)
=
default
;
static
GrPaint
Clone
(
const
GrPaint
&
src
)
{
return
GrPaint
(
src
)
;
}
void
setColor4f
(
const
SkPMColor4f
&
color
)
{
fColor
=
color
;
}
const
SkPMColor4f
&
getColor4f
(
)
const
{
return
fColor
;
}
void
setXPFactory
(
const
GrXPFactory
*
xpFactory
)
{
fXPFactory
=
xpFactory
;
fTrivial
&
=
!
SkToBool
(
xpFactory
)
;
}
void
setPorterDuffXPFactory
(
SkBlendMode
mode
)
;
void
setCoverageSetOpXPFactory
(
SkRegion
:
:
Op
bool
invertCoverage
=
false
)
;
void
setColorFragmentProcessor
(
std
:
:
unique_ptr
<
GrFragmentProcessor
>
fp
)
{
SkASSERT
(
fp
)
;
SkASSERT
(
fColorFragmentProcessor
=
=
nullptr
)
;
fColorFragmentProcessor
=
std
:
:
move
(
fp
)
;
fTrivial
=
false
;
}
void
setCoverageFragmentProcessor
(
std
:
:
unique_ptr
<
GrFragmentProcessor
>
fp
)
{
SkASSERT
(
fp
)
;
SkASSERT
(
fCoverageFragmentProcessor
=
=
nullptr
)
;
fCoverageFragmentProcessor
=
std
:
:
move
(
fp
)
;
fTrivial
=
false
;
}
bool
hasColorFragmentProcessor
(
)
const
{
return
fColorFragmentProcessor
?
true
:
false
;
}
int
hasCoverageFragmentProcessor
(
)
const
{
return
fCoverageFragmentProcessor
?
true
:
false
;
}
int
numTotalFragmentProcessors
(
)
const
{
return
(
this
-
>
hasColorFragmentProcessor
(
)
?
1
:
0
)
+
(
this
-
>
hasCoverageFragmentProcessor
(
)
?
1
:
0
)
;
}
const
GrXPFactory
*
getXPFactory
(
)
const
{
return
fXPFactory
;
}
GrFragmentProcessor
*
getColorFragmentProcessor
(
)
const
{
return
fColorFragmentProcessor
.
get
(
)
;
}
GrFragmentProcessor
*
getCoverageFragmentProcessor
(
)
const
{
return
fCoverageFragmentProcessor
.
get
(
)
;
}
bool
usesLocalCoords
(
)
const
{
return
(
fColorFragmentProcessor
&
&
fColorFragmentProcessor
-
>
usesSampleCoords
(
)
)
|
|
(
fCoverageFragmentProcessor
&
&
fCoverageFragmentProcessor
-
>
usesSampleCoords
(
)
)
;
}
bool
isConstantBlendedColor
(
SkPMColor4f
*
constantColor
)
const
;
bool
isTrivial
(
)
const
{
return
fTrivial
;
}
friend
void
assert_alive
(
GrPaint
&
p
)
{
SkASSERT
(
p
.
fAlive
)
;
}
private
:
GrPaint
(
const
GrPaint
&
)
;
GrPaint
&
operator
=
(
const
GrPaint
&
)
=
delete
;
friend
class
GrProcessorSet
;
const
GrXPFactory
*
fXPFactory
=
nullptr
;
std
:
:
unique_ptr
<
GrFragmentProcessor
>
fColorFragmentProcessor
;
std
:
:
unique_ptr
<
GrFragmentProcessor
>
fCoverageFragmentProcessor
;
bool
fTrivial
=
true
;
SkPMColor4f
fColor
=
SK_PMColor4fWHITE
;
SkDEBUGCODE
(
bool
fAlive
=
true
;
)
}
;
#
endif
