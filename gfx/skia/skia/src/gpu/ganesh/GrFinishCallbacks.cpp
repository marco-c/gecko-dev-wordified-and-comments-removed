#
include
"
src
/
gpu
/
ganesh
/
GrFinishCallbacks
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrGpu
.
h
"
GrFinishCallbacks
:
:
GrFinishCallbacks
(
GrGpu
*
gpu
)
:
fGpu
(
gpu
)
{
}
GrFinishCallbacks
:
:
~
GrFinishCallbacks
(
)
{
this
-
>
callAll
(
true
)
;
}
void
GrFinishCallbacks
:
:
add
(
GrGpuFinishedProc
finishedProc
GrGpuFinishedContext
finishedContext
)
{
SkASSERT
(
finishedProc
)
;
FinishCallback
callback
;
callback
.
fCallback
=
finishedProc
;
callback
.
fContext
=
finishedContext
;
callback
.
fFence
=
fGpu
-
>
insertFence
(
)
;
fCallbacks
.
push_back
(
callback
)
;
}
void
GrFinishCallbacks
:
:
check
(
)
{
while
(
!
fCallbacks
.
empty
(
)
&
&
fGpu
-
>
waitFence
(
fCallbacks
.
front
(
)
.
fFence
)
)
{
auto
finishCallback
=
fCallbacks
.
front
(
)
;
fGpu
-
>
deleteFence
(
finishCallback
.
fFence
)
;
fCallbacks
.
pop_front
(
)
;
finishCallback
.
fCallback
(
finishCallback
.
fContext
)
;
}
}
void
GrFinishCallbacks
:
:
callAll
(
bool
doDelete
)
{
while
(
!
fCallbacks
.
empty
(
)
)
{
auto
finishCallback
=
fCallbacks
.
front
(
)
;
if
(
doDelete
)
{
fGpu
-
>
deleteFence
(
finishCallback
.
fFence
)
;
}
fCallbacks
.
pop_front
(
)
;
finishCallback
.
fCallback
(
finishCallback
.
fContext
)
;
}
}
