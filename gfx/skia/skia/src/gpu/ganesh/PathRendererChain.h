#
ifndef
PathRendererChain_DEFINED
#
define
PathRendererChain_DEFINED
#
include
"
src
/
gpu
/
ganesh
/
PathRenderer
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
private
/
base
/
SkNoncopyable
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
"
include
/
private
/
gpu
/
ganesh
/
GrTypesPriv
.
h
"
namespace
skgpu
:
:
ganesh
{
class
AtlasPathRenderer
;
class
PathRendererChain
:
public
SkNoncopyable
{
public
:
struct
Options
{
bool
fAllowPathMaskCaching
=
false
;
GpuPathRenderers
fGpuPathRenderers
=
GpuPathRenderers
:
:
kDefault
;
}
;
PathRendererChain
(
GrRecordingContext
*
const
Options
&
)
;
enum
class
DrawType
{
kColor
kStencil
kStencilAndColor
}
;
PathRenderer
*
getPathRenderer
(
const
PathRenderer
:
:
CanDrawPathArgs
&
DrawType
PathRenderer
:
:
StencilSupport
*
)
;
skgpu
:
:
ganesh
:
:
AtlasPathRenderer
*
getAtlasPathRenderer
(
)
{
return
fAtlasPathRenderer
;
}
PathRenderer
*
getTessellationPathRenderer
(
)
{
return
fTessellationPathRenderer
;
}
private
:
enum
{
kPreAllocCount
=
8
}
;
SkSTArray
<
kPreAllocCount
sk_sp
<
PathRenderer
>
>
fChain
;
AtlasPathRenderer
*
fAtlasPathRenderer
=
nullptr
;
PathRenderer
*
fTessellationPathRenderer
=
nullptr
;
}
;
}
#
endif
