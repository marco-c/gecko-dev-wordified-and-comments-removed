#
ifndef
GrGLTextureRenderTarget_DEFINED
#
define
GrGLTextureRenderTarget_DEFINED
#
include
"
src
/
gpu
/
ganesh
/
gl
/
GrGLRenderTarget
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
gl
/
GrGLTexture
.
h
"
class
GrGLGpu
;
#
ifdef
SK_BUILD_FOR_WIN
#
pragma
warning
(
push
)
#
pragma
warning
(
disable
:
4250
)
#
endif
class
GrGLTextureRenderTarget
:
public
GrGLTexture
public
GrGLRenderTarget
{
public
:
GrGLTextureRenderTarget
(
GrGLGpu
*
gpu
skgpu
:
:
Budgeted
budgeted
int
sampleCount
const
GrGLTexture
:
:
Desc
&
texDesc
const
GrGLRenderTarget
:
:
IDs
&
GrMipmapStatus
std
:
:
string_view
label
)
;
bool
canAttemptStencilAttachment
(
bool
useMultisampleFBO
)
const
override
;
void
dumpMemoryStatistics
(
SkTraceMemoryDump
*
traceMemoryDump
)
const
override
;
static
sk_sp
<
GrGLTextureRenderTarget
>
MakeWrapped
(
GrGLGpu
*
gpu
int
sampleCount
const
GrGLTexture
:
:
Desc
&
sk_sp
<
GrGLTextureParameters
>
const
GrGLRenderTarget
:
:
IDs
&
GrWrapCacheable
GrMipmapStatus
std
:
:
string_view
label
)
;
GrBackendFormat
backendFormat
(
)
const
override
{
return
GrGLTexture
:
:
backendFormat
(
)
;
}
protected
:
void
onAbandon
(
)
override
{
GrGLRenderTarget
:
:
onAbandon
(
)
;
GrGLTexture
:
:
onAbandon
(
)
;
}
void
onRelease
(
)
override
{
GrGLRenderTarget
:
:
onRelease
(
)
;
GrGLTexture
:
:
onRelease
(
)
;
}
private
:
GrGLTextureRenderTarget
(
GrGLGpu
*
gpu
int
sampleCount
const
GrGLTexture
:
:
Desc
&
texDesc
sk_sp
<
GrGLTextureParameters
>
parameters
const
GrGLRenderTarget
:
:
IDs
&
ids
GrWrapCacheable
GrMipmapStatus
std
:
:
string_view
label
)
;
size_t
onGpuMemorySize
(
)
const
override
;
void
onSetLabel
(
)
override
;
}
;
#
ifdef
SK_BUILD_FOR_WIN
#
pragma
warning
(
pop
)
#
endif
#
endif
