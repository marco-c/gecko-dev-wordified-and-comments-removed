#
include
"
src
/
gpu
/
ganesh
/
gl
/
GrGLContext
.
h
"
#
include
"
include
/
gpu
/
GrContextOptions
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
gl
/
GrGLGLSL
.
h
"
#
ifdef
SK_BUILD_FOR_ANDROID
#
include
<
sys
/
system_properties
.
h
>
#
endif
std
:
:
unique_ptr
<
GrGLContext
>
GrGLContext
:
:
Make
(
sk_sp
<
const
GrGLInterface
>
interface
const
GrContextOptions
&
options
)
{
if
(
!
interface
-
>
validate
(
)
)
{
return
nullptr
;
}
ConstructorArgs
args
;
args
.
fDriverInfo
=
GrGLGetDriverInfo
(
interface
.
get
(
)
)
;
if
(
args
.
fDriverInfo
.
fVersion
=
=
GR_GL_INVALID_VER
)
{
return
nullptr
;
}
if
(
!
GrGLGetGLSLGeneration
(
args
.
fDriverInfo
&
args
.
fGLSLGeneration
)
)
{
return
nullptr
;
}
#
ifdef
SK_BUILD_FOR_ANDROID
if
(
!
options
.
fDisableDriverCorrectnessWorkarounds
&
&
args
.
fDriverInfo
.
fRenderer
=
=
GrGLRenderer
:
:
kAdreno3xx
)
{
char
androidAPIVersion
[
PROP_VALUE_MAX
]
;
int
strLength
=
__system_property_get
(
"
ro
.
build
.
version
.
sdk
"
androidAPIVersion
)
;
if
(
strLength
=
=
0
|
|
atoi
(
androidAPIVersion
)
<
26
)
{
args
.
fGLSLGeneration
=
SkSL
:
:
GLSLGeneration
:
:
k100es
;
}
}
#
endif
if
(
GR_IS_GR_GL_ES
(
interface
-
>
fStandard
)
&
&
options
.
fPreferExternalImagesOverES3
&
&
!
options
.
fDisableDriverCorrectnessWorkarounds
&
&
interface
-
>
hasExtension
(
"
GL_OES_EGL_image_external
"
)
&
&
args
.
fGLSLGeneration
>
=
SkSL
:
:
GLSLGeneration
:
:
k330
&
&
!
interface
-
>
hasExtension
(
"
GL_OES_EGL_image_external_essl3
"
)
&
&
!
interface
-
>
hasExtension
(
"
OES_EGL_image_external_essl3
"
)
)
{
args
.
fGLSLGeneration
=
SkSL
:
:
GLSLGeneration
:
:
k100es
;
}
args
.
fContextOptions
=
&
options
;
args
.
fInterface
=
std
:
:
move
(
interface
)
;
return
std
:
:
unique_ptr
<
GrGLContext
>
(
new
GrGLContext
(
std
:
:
move
(
args
)
)
)
;
}
GrGLContext
:
:
~
GrGLContext
(
)
{
}
GrGLContextInfo
:
:
GrGLContextInfo
(
ConstructorArgs
&
&
args
)
{
fInterface
=
std
:
:
move
(
args
.
fInterface
)
;
fDriverInfo
=
args
.
fDriverInfo
;
fGLSLGeneration
=
args
.
fGLSLGeneration
;
fGLCaps
=
sk_make_sp
<
GrGLCaps
>
(
*
args
.
fContextOptions
*
this
fInterface
.
get
(
)
)
;
}
