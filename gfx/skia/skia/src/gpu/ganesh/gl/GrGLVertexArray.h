#
ifndef
GrGLVertexArray_DEFINED
#
define
GrGLVertexArray_DEFINED
#
include
"
include
/
gpu
/
gl
/
GrGLTypes
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
"
include
/
private
/
gpu
/
ganesh
/
GrTypesPriv
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrGpuResource
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
gl
/
GrGLDefines_impl
.
h
"
class
GrBuffer
;
class
GrGLGpu
;
class
GrGLAttribArrayState
{
public
:
explicit
GrGLAttribArrayState
(
int
arrayCount
=
0
)
{
this
-
>
resize
(
arrayCount
)
;
}
void
resize
(
int
newCount
)
{
fAttribArrayStates
.
resize_back
(
newCount
)
;
this
-
>
invalidate
(
)
;
}
void
set
(
GrGLGpu
*
int
attribIndex
const
GrBuffer
*
vertexBuffer
GrVertexAttribType
cpuType
SkSLType
gpuType
GrGLsizei
stride
size_t
offsetInBytes
int
divisor
=
0
)
;
void
enableVertexArrays
(
const
GrGLGpu
*
int
enabledCount
GrPrimitiveRestart
=
GrPrimitiveRestart
:
:
kNo
)
;
void
invalidate
(
)
{
int
count
=
fAttribArrayStates
.
size
(
)
;
for
(
int
i
=
0
;
i
<
count
;
+
+
i
)
{
fAttribArrayStates
[
i
]
.
invalidate
(
)
;
}
fEnableStateIsValid
=
false
;
}
int
count
(
)
const
{
return
fAttribArrayStates
.
size
(
)
;
}
private
:
inline
static
constexpr
int
kInvalidDivisor
=
-
1
;
struct
AttribArrayState
{
void
invalidate
(
)
{
fVertexBufferUniqueID
.
makeInvalid
(
)
;
fDivisor
=
kInvalidDivisor
;
fUsingCpuBuffer
=
false
;
}
GrGpuResource
:
:
UniqueID
fVertexBufferUniqueID
;
bool
fUsingCpuBuffer
;
GrVertexAttribType
fCPUType
;
SkSLType
fGPUType
;
GrGLsizei
fStride
;
const
GrGLvoid
*
fOffset
;
int
fDivisor
;
}
;
SkSTArray
<
16
AttribArrayState
true
>
fAttribArrayStates
;
int
fNumEnabledArrays
;
GrPrimitiveRestart
fPrimitiveRestartEnabled
;
bool
fEnableStateIsValid
=
false
;
}
;
class
GrGLVertexArray
{
public
:
GrGLVertexArray
(
GrGLint
id
int
attribCount
)
;
GrGLAttribArrayState
*
bind
(
GrGLGpu
*
)
;
GrGLAttribArrayState
*
bindWithIndexBuffer
(
GrGLGpu
*
gpu
const
GrBuffer
*
indexBuffer
)
;
GrGLuint
arrayID
(
)
const
{
return
fID
;
}
void
invalidateCachedState
(
)
;
private
:
GrGLuint
fID
;
GrGLAttribArrayState
fAttribArrays
;
GrGpuResource
:
:
UniqueID
fIndexBufferUniqueID
;
}
;
#
endif
