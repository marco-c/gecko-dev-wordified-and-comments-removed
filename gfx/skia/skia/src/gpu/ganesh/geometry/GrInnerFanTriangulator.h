#
ifndef
GrInnerFanTriangulator_DEFINED
#
define
GrInnerFanTriangulator_DEFINED
#
if
!
defined
(
SK_ENABLE_OPTIMIZE_SIZE
)
#
include
"
src
/
gpu
/
ganesh
/
geometry
/
GrTriangulator
.
h
"
class
GrInnerFanTriangulator
:
private
GrTriangulator
{
public
:
using
GrTriangulator
:
:
BreadcrumbTriangleList
;
GrInnerFanTriangulator
(
const
SkPath
&
path
SkArenaAlloc
*
alloc
)
:
GrTriangulator
(
path
alloc
)
{
fPreserveCollinearVertices
=
true
;
fCollectBreadcrumbTriangles
=
true
;
}
int
pathToTriangles
(
GrEagerVertexAllocator
*
vertexAlloc
BreadcrumbTriangleList
*
breadcrumbList
bool
*
isLinear
)
{
Poly
*
polys
=
this
-
>
pathToPolys
(
breadcrumbList
isLinear
)
;
return
this
-
>
polysToTriangles
(
polys
vertexAlloc
breadcrumbList
)
;
}
Poly
*
pathToPolys
(
BreadcrumbTriangleList
*
breadcrumbList
bool
*
isLinear
)
{
auto
[
polys
success
]
=
this
-
>
GrTriangulator
:
:
pathToPolys
(
0
SkRect
:
:
MakeEmpty
(
)
isLinear
)
;
if
(
!
success
)
{
return
nullptr
;
}
breadcrumbList
-
>
concat
(
std
:
:
move
(
fBreadcrumbList
)
)
;
return
polys
;
}
int
polysToTriangles
(
Poly
*
polys
GrEagerVertexAllocator
*
vertexAlloc
BreadcrumbTriangleList
*
breadcrumbList
)
const
{
int
vertexCount
=
this
-
>
GrTriangulator
:
:
polysToTriangles
(
polys
vertexAlloc
)
;
breadcrumbList
-
>
concat
(
std
:
:
move
(
fBreadcrumbList
)
)
;
return
vertexCount
;
}
}
;
#
else
namespace
GrInnerFanTriangulator
{
struct
BreadcrumbTriangleList
{
BreadcrumbTriangleList
(
)
=
delete
;
}
;
}
;
#
endif
#
endif
