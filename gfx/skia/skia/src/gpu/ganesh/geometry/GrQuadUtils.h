#
ifndef
GrQuadUtils_DEFINED
#
define
GrQuadUtils_DEFINED
#
include
"
src
/
base
/
SkVx
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
geometry
/
GrQuad
.
h
"
enum
class
GrQuadAAFlags
;
enum
class
GrAA
:
bool
;
enum
class
GrAAType
:
unsigned
;
struct
SkRect
;
namespace
GrQuadUtils
{
void
ResolveAAType
(
GrAAType
requestedAAType
GrQuadAAFlags
requestedEdgeFlags
const
GrQuad
&
quad
GrAAType
*
outAAtype
GrQuadAAFlags
*
outEdgeFlags
)
;
int
ClipToW0
(
DrawQuad
*
quad
DrawQuad
*
extraVertices
)
;
bool
CropToRect
(
const
SkRect
&
cropRect
GrAA
cropAA
DrawQuad
*
quad
bool
computeLocal
=
true
)
;
inline
void
Outset
(
const
skvx
:
:
float4
&
edgeDistances
GrQuad
*
quad
)
;
bool
WillUseHairline
(
const
GrQuad
&
quad
GrAAType
aaType
GrQuadAAFlags
edgeFlags
)
;
class
TessellationHelper
{
public
:
void
reset
(
const
GrQuad
&
deviceQuad
const
GrQuad
*
localQuad
)
;
skvx
:
:
float4
inset
(
const
skvx
:
:
float4
&
edgeDistances
GrQuad
*
deviceInset
GrQuad
*
localInset
)
;
void
outset
(
const
skvx
:
:
float4
&
edgeDistances
GrQuad
*
deviceOutset
GrQuad
*
localOutset
)
;
void
getEdgeEquations
(
skvx
:
:
float4
*
a
skvx
:
:
float4
*
b
skvx
:
:
float4
*
c
)
;
skvx
:
:
float4
getEdgeLengths
(
)
;
bool
isSubpixel
(
)
;
private
:
struct
EdgeVectors
{
skvx
:
:
float4
fX2D
fY2D
;
skvx
:
:
float4
fDX
fDY
;
skvx
:
:
float4
fInvLengths
;
skvx
:
:
float4
fCosTheta
;
skvx
:
:
float4
fInvSinTheta
;
void
reset
(
const
skvx
:
:
float4
&
xs
const
skvx
:
:
float4
&
ys
const
skvx
:
:
float4
&
ws
GrQuad
:
:
Type
quadType
)
;
}
;
struct
EdgeEquations
{
skvx
:
:
float4
fA
fB
fC
;
void
reset
(
const
EdgeVectors
&
edgeVectors
)
;
skvx
:
:
float4
estimateCoverage
(
const
skvx
:
:
float4
&
x2d
const
skvx
:
:
float4
&
y2d
)
const
;
bool
isSubpixel
(
const
skvx
:
:
float4
&
x2d
const
skvx
:
:
float4
&
y2d
)
const
;
int
computeDegenerateQuad
(
const
skvx
:
:
float4
&
signedEdgeDistances
skvx
:
:
float4
*
x2d
skvx
:
:
float4
*
y2d
skvx
:
:
Vec
<
4
int32_t
>
*
aaMask
)
const
;
}
;
struct
OutsetRequest
{
skvx
:
:
float4
fEdgeDistances
;
bool
fInsetDegenerate
;
bool
fOutsetDegenerate
;
void
reset
(
const
EdgeVectors
&
edgeVectors
GrQuad
:
:
Type
quadType
const
skvx
:
:
float4
&
edgeDistances
)
;
}
;
struct
Vertices
{
skvx
:
:
float4
fX
fY
fW
;
skvx
:
:
float4
fU
fV
fR
;
int
fUVRCount
;
void
reset
(
const
GrQuad
&
deviceQuad
const
GrQuad
*
localQuad
)
;
void
asGrQuads
(
GrQuad
*
deviceOut
GrQuad
:
:
Type
deviceType
GrQuad
*
localOut
GrQuad
:
:
Type
localType
)
const
;
void
moveAlong
(
const
EdgeVectors
&
edgeVectors
const
skvx
:
:
float4
&
signedEdgeDistances
)
;
void
moveTo
(
const
skvx
:
:
float4
&
x2d
const
skvx
:
:
float4
&
y2d
const
skvx
:
:
Vec
<
4
int32_t
>
&
mask
)
;
}
;
Vertices
fOriginal
;
EdgeVectors
fEdgeVectors
;
GrQuad
:
:
Type
fDeviceType
;
GrQuad
:
:
Type
fLocalType
;
OutsetRequest
fOutsetRequest
;
EdgeEquations
fEdgeEquations
;
bool
fVerticesValid
=
false
;
bool
fOutsetRequestValid
=
false
;
bool
fEdgeEquationsValid
=
false
;
const
OutsetRequest
&
getOutsetRequest
(
const
skvx
:
:
float4
&
edgeDistances
)
;
const
EdgeEquations
&
getEdgeEquations
(
)
;
void
adjustVertices
(
const
skvx
:
:
float4
&
signedEdgeDistances
Vertices
*
vertices
)
;
int
adjustDegenerateVertices
(
const
skvx
:
:
float4
&
signedEdgeDistances
Vertices
*
vertices
)
;
friend
int
ClipToW0
(
DrawQuad
*
DrawQuad
*
)
;
}
;
}
void
GrQuadUtils
:
:
Outset
(
const
skvx
:
:
float4
&
edgeDistances
GrQuad
*
quad
)
{
TessellationHelper
outsetter
;
outsetter
.
reset
(
*
quad
nullptr
)
;
outsetter
.
outset
(
edgeDistances
quad
nullptr
)
;
}
#
endif
