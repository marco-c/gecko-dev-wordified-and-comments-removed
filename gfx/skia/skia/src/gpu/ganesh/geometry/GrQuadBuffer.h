#
ifndef
GrQuadBuffer_DEFINED
#
define
GrQuadBuffer_DEFINED
#
include
"
include
/
private
/
base
/
SkTDArray
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
geometry
/
GrQuad
.
h
"
template
<
typename
T
>
class
GrQuadBuffer
{
public
:
GrQuadBuffer
(
)
:
fCount
(
0
)
fDeviceType
(
GrQuad
:
:
Type
:
:
kAxisAligned
)
fLocalType
(
GrQuad
:
:
Type
:
:
kAxisAligned
)
{
fData
.
reserve
(
this
-
>
entrySize
(
fDeviceType
nullptr
)
)
;
}
GrQuadBuffer
(
int
count
bool
needsLocals
=
false
)
:
fCount
(
0
)
fDeviceType
(
GrQuad
:
:
Type
:
:
kAxisAligned
)
fLocalType
(
GrQuad
:
:
Type
:
:
kAxisAligned
)
{
int
entrySize
=
this
-
>
entrySize
(
fDeviceType
needsLocals
?
&
fLocalType
:
nullptr
)
;
fData
.
reserve
(
count
*
entrySize
)
;
}
int
count
(
)
const
{
return
fCount
;
}
GrQuad
:
:
Type
deviceQuadType
(
)
const
{
return
fDeviceType
;
}
GrQuad
:
:
Type
localQuadType
(
)
const
{
return
fLocalType
;
}
void
append
(
const
GrQuad
&
deviceQuad
T
&
&
metadata
const
GrQuad
*
localQuad
=
nullptr
)
;
void
concat
(
const
GrQuadBuffer
<
T
>
&
that
)
;
class
Iter
{
public
:
Iter
(
const
GrQuadBuffer
<
T
>
*
buffer
)
:
fDeviceQuad
(
SkRect
:
:
MakeEmpty
(
)
)
fLocalQuad
(
SkRect
:
:
MakeEmpty
(
)
)
fBuffer
(
buffer
)
fCurrentEntry
(
nullptr
)
fNextEntry
(
buffer
-
>
fData
.
begin
(
)
)
{
SkDEBUGCODE
(
fExpectedCount
=
buffer
-
>
count
(
)
;
)
}
bool
next
(
)
;
const
T
&
metadata
(
)
const
{
this
-
>
validate
(
)
;
return
*
(
fBuffer
-
>
metadata
(
fCurrentEntry
)
)
;
}
GrQuad
*
deviceQuad
(
)
{
this
-
>
validate
(
)
;
return
&
fDeviceQuad
;
}
GrQuad
*
localQuad
(
)
{
this
-
>
validate
(
)
;
return
this
-
>
isLocalValid
(
)
?
&
fLocalQuad
:
nullptr
;
}
bool
isLocalValid
(
)
const
{
this
-
>
validate
(
)
;
return
fBuffer
-
>
header
(
fCurrentEntry
)
-
>
fHasLocals
;
}
private
:
GrQuad
fDeviceQuad
;
GrQuad
fLocalQuad
;
const
GrQuadBuffer
<
T
>
*
fBuffer
;
const
char
*
fCurrentEntry
;
const
char
*
fNextEntry
;
SkDEBUGCODE
(
int
fExpectedCount
;
)
void
validate
(
)
const
{
SkDEBUGCODE
(
fBuffer
-
>
validate
(
fCurrentEntry
fExpectedCount
)
;
)
}
}
;
Iter
iterator
(
)
const
{
return
Iter
(
this
)
;
}
class
MetadataIter
{
public
:
MetadataIter
(
GrQuadBuffer
<
T
>
*
list
)
:
fBuffer
(
list
)
fCurrentEntry
(
nullptr
)
{
SkDEBUGCODE
(
fExpectedCount
=
list
-
>
count
(
)
;
)
}
bool
next
(
)
;
T
&
operator
*
(
)
{
this
-
>
validate
(
)
;
return
*
(
fBuffer
-
>
metadata
(
fCurrentEntry
)
)
;
}
T
*
operator
-
>
(
)
{
this
-
>
validate
(
)
;
return
fBuffer
-
>
metadata
(
fCurrentEntry
)
;
}
private
:
GrQuadBuffer
<
T
>
*
fBuffer
;
char
*
fCurrentEntry
;
SkDEBUGCODE
(
int
fExpectedCount
;
)
void
validate
(
)
const
{
SkDEBUGCODE
(
fBuffer
-
>
validate
(
fCurrentEntry
fExpectedCount
)
;
)
}
}
;
MetadataIter
metadata
(
)
{
return
MetadataIter
(
this
)
;
}
private
:
struct
alignas
(
int32_t
)
Header
{
unsigned
fDeviceType
:
2
;
unsigned
fLocalType
:
2
;
unsigned
fHasLocals
:
1
;
SkDEBUGCODE
(
unsigned
fSentinel
:
27
;
)
}
;
static_assert
(
sizeof
(
Header
)
=
=
sizeof
(
int32_t
)
"
Header
should
be
4
bytes
"
)
;
inline
static
constexpr
unsigned
kSentinel
=
0xbaffe
;
inline
static
constexpr
int
kMetaSize
=
sizeof
(
Header
)
+
sizeof
(
T
)
;
inline
static
constexpr
int
k2DQuadFloats
=
8
;
inline
static
constexpr
int
k3DQuadFloats
=
12
;
SkTDArray
<
char
>
fData
;
int
fCount
;
GrQuad
:
:
Type
fDeviceType
;
GrQuad
:
:
Type
fLocalType
;
inline
int
entrySize
(
GrQuad
:
:
Type
deviceType
const
GrQuad
:
:
Type
*
localType
)
const
{
int
size
=
kMetaSize
;
size
+
=
(
deviceType
=
=
GrQuad
:
:
Type
:
:
kPerspective
?
k3DQuadFloats
:
k2DQuadFloats
)
*
sizeof
(
float
)
;
if
(
localType
)
{
size
+
=
(
*
localType
=
=
GrQuad
:
:
Type
:
:
kPerspective
?
k3DQuadFloats
:
k2DQuadFloats
)
*
sizeof
(
float
)
;
}
return
size
;
}
inline
int
entrySize
(
const
Header
*
header
)
const
{
if
(
header
-
>
fHasLocals
)
{
GrQuad
:
:
Type
localType
=
static_cast
<
GrQuad
:
:
Type
>
(
header
-
>
fLocalType
)
;
return
this
-
>
entrySize
(
static_cast
<
GrQuad
:
:
Type
>
(
header
-
>
fDeviceType
)
&
localType
)
;
}
else
{
return
this
-
>
entrySize
(
static_cast
<
GrQuad
:
:
Type
>
(
header
-
>
fDeviceType
)
nullptr
)
;
}
}
inline
Header
*
header
(
char
*
entry
)
{
return
static_cast
<
Header
*
>
(
static_cast
<
void
*
>
(
entry
)
)
;
}
inline
const
Header
*
header
(
const
char
*
entry
)
const
{
return
static_cast
<
const
Header
*
>
(
static_cast
<
const
void
*
>
(
entry
)
)
;
}
inline
T
*
metadata
(
char
*
entry
)
{
return
static_cast
<
T
*
>
(
static_cast
<
void
*
>
(
entry
+
sizeof
(
Header
)
)
)
;
}
inline
const
T
*
metadata
(
const
char
*
entry
)
const
{
return
static_cast
<
const
T
*
>
(
static_cast
<
const
void
*
>
(
entry
+
sizeof
(
Header
)
)
)
;
}
inline
float
*
coords
(
char
*
entry
)
{
return
static_cast
<
float
*
>
(
static_cast
<
void
*
>
(
entry
+
kMetaSize
)
)
;
}
inline
const
float
*
coords
(
const
char
*
entry
)
const
{
return
static_cast
<
const
float
*
>
(
static_cast
<
const
void
*
>
(
entry
+
kMetaSize
)
)
;
}
float
*
packQuad
(
const
GrQuad
&
quad
float
*
coords
)
;
const
float
*
unpackQuad
(
GrQuad
:
:
Type
type
const
float
*
coords
GrQuad
*
quad
)
const
;
#
ifdef
SK_DEBUG
void
validate
(
const
char
*
entry
int
expectedCount
)
const
;
#
endif
}
;
template
<
typename
T
>
float
*
GrQuadBuffer
<
T
>
:
:
packQuad
(
const
GrQuad
&
quad
float
*
coords
)
{
SkASSERT
(
quad
.
xs
(
)
+
4
=
=
quad
.
ys
(
)
&
&
quad
.
xs
(
)
+
8
=
=
quad
.
ws
(
)
)
;
if
(
quad
.
hasPerspective
(
)
)
{
memcpy
(
coords
quad
.
xs
(
)
k3DQuadFloats
*
sizeof
(
float
)
)
;
return
coords
+
k3DQuadFloats
;
}
else
{
memcpy
(
coords
quad
.
xs
(
)
k2DQuadFloats
*
sizeof
(
float
)
)
;
return
coords
+
k2DQuadFloats
;
}
}
template
<
typename
T
>
const
float
*
GrQuadBuffer
<
T
>
:
:
unpackQuad
(
GrQuad
:
:
Type
type
const
float
*
coords
GrQuad
*
quad
)
const
{
SkASSERT
(
quad
-
>
xs
(
)
+
4
=
=
quad
-
>
ys
(
)
&
&
quad
-
>
xs
(
)
+
8
=
=
quad
-
>
ws
(
)
)
;
if
(
type
=
=
GrQuad
:
:
Type
:
:
kPerspective
)
{
memcpy
(
quad
-
>
xs
(
)
coords
k3DQuadFloats
*
sizeof
(
float
)
)
;
coords
=
coords
+
k3DQuadFloats
;
}
else
{
memcpy
(
quad
-
>
xs
(
)
coords
k2DQuadFloats
*
sizeof
(
float
)
)
;
coords
=
coords
+
k2DQuadFloats
;
}
quad
-
>
setQuadType
(
type
)
;
return
coords
;
}
template
<
typename
T
>
void
GrQuadBuffer
<
T
>
:
:
append
(
const
GrQuad
&
deviceQuad
T
&
&
metadata
const
GrQuad
*
localQuad
)
{
GrQuad
:
:
Type
localType
=
localQuad
?
localQuad
-
>
quadType
(
)
:
GrQuad
:
:
Type
:
:
kAxisAligned
;
int
entrySize
=
this
-
>
entrySize
(
deviceQuad
.
quadType
(
)
localQuad
?
&
localType
:
nullptr
)
;
char
*
entry
=
fData
.
append
(
entrySize
)
;
Header
*
h
=
this
-
>
header
(
entry
)
;
h
-
>
fDeviceType
=
static_cast
<
unsigned
>
(
deviceQuad
.
quadType
(
)
)
;
h
-
>
fHasLocals
=
static_cast
<
unsigned
>
(
localQuad
!
=
nullptr
)
;
h
-
>
fLocalType
=
static_cast
<
unsigned
>
(
localQuad
?
localQuad
-
>
quadType
(
)
:
GrQuad
:
:
Type
:
:
kAxisAligned
)
;
SkDEBUGCODE
(
h
-
>
fSentinel
=
static_cast
<
unsigned
>
(
kSentinel
)
;
)
static_assert
(
alignof
(
T
)
=
=
4
"
Metadata
must
be
4
byte
aligned
"
)
;
*
(
this
-
>
metadata
(
entry
)
)
=
std
:
:
move
(
metadata
)
;
float
*
coords
=
this
-
>
coords
(
entry
)
;
coords
=
this
-
>
packQuad
(
deviceQuad
coords
)
;
if
(
localQuad
)
{
coords
=
this
-
>
packQuad
(
*
localQuad
coords
)
;
}
SkASSERT
(
(
char
*
)
coords
-
entry
=
=
entrySize
)
;
fCount
+
+
;
if
(
deviceQuad
.
quadType
(
)
>
fDeviceType
)
{
fDeviceType
=
deviceQuad
.
quadType
(
)
;
}
if
(
localQuad
&
&
localQuad
-
>
quadType
(
)
>
fLocalType
)
{
fLocalType
=
localQuad
-
>
quadType
(
)
;
}
}
template
<
typename
T
>
void
GrQuadBuffer
<
T
>
:
:
concat
(
const
GrQuadBuffer
<
T
>
&
that
)
{
fData
.
append
(
that
.
fData
.
size
(
)
that
.
fData
.
begin
(
)
)
;
fCount
+
=
that
.
fCount
;
if
(
that
.
fDeviceType
>
fDeviceType
)
{
fDeviceType
=
that
.
fDeviceType
;
}
if
(
that
.
fLocalType
>
fLocalType
)
{
fLocalType
=
that
.
fLocalType
;
}
}
#
ifdef
SK_DEBUG
template
<
typename
T
>
void
GrQuadBuffer
<
T
>
:
:
validate
(
const
char
*
entry
int
expectedCount
)
const
{
SkASSERT
(
entry
)
;
SkASSERT
(
entry
<
fData
.
end
(
)
)
;
SkASSERT
(
expectedCount
=
=
fCount
)
;
SkASSERT
(
this
-
>
header
(
entry
)
-
>
fSentinel
=
=
kSentinel
)
;
}
#
endif
template
<
typename
T
>
bool
GrQuadBuffer
<
T
>
:
:
Iter
:
:
next
(
)
{
SkASSERT
(
fNextEntry
)
;
if
(
fNextEntry
>
=
fBuffer
-
>
fData
.
end
(
)
)
{
return
false
;
}
fCurrentEntry
=
fNextEntry
;
const
Header
*
h
=
fBuffer
-
>
header
(
fCurrentEntry
)
;
const
float
*
coords
=
fBuffer
-
>
coords
(
fCurrentEntry
)
;
coords
=
fBuffer
-
>
unpackQuad
(
static_cast
<
GrQuad
:
:
Type
>
(
h
-
>
fDeviceType
)
coords
&
fDeviceQuad
)
;
if
(
h
-
>
fHasLocals
)
{
coords
=
fBuffer
-
>
unpackQuad
(
static_cast
<
GrQuad
:
:
Type
>
(
h
-
>
fLocalType
)
coords
&
fLocalQuad
)
;
}
fNextEntry
=
static_cast
<
const
char
*
>
(
static_cast
<
const
void
*
>
(
coords
)
)
;
SkASSERT
(
(
fNextEntry
-
fCurrentEntry
)
=
=
fBuffer
-
>
entrySize
(
h
)
)
;
return
true
;
}
template
<
typename
T
>
bool
GrQuadBuffer
<
T
>
:
:
MetadataIter
:
:
next
(
)
{
if
(
fCurrentEntry
)
{
if
(
fCurrentEntry
<
fBuffer
-
>
fData
.
end
(
)
)
{
const
Header
*
h
=
fBuffer
-
>
header
(
fCurrentEntry
)
;
fCurrentEntry
+
=
fBuffer
-
>
entrySize
(
h
)
;
}
}
else
{
fCurrentEntry
=
fBuffer
-
>
fData
.
begin
(
)
;
}
return
fCurrentEntry
<
fBuffer
-
>
fData
.
end
(
)
;
}
#
endif
