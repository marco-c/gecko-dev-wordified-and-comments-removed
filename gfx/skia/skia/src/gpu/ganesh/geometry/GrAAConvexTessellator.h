#
ifndef
GrAAConvexTessellator_DEFINED
#
define
GrAAConvexTessellator_DEFINED
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkPaint
.
h
"
#
include
"
include
/
core
/
SkScalar
.
h
"
#
include
"
include
/
core
/
SkStrokeRec
.
h
"
#
include
"
include
/
private
/
base
/
SkTDArray
.
h
"
#
include
"
src
/
core
/
SkPointPriv
.
h
"
class
SkCanvas
;
class
SkMatrix
;
class
SkPath
;
static
const
SkScalar
kAntialiasingRadius
=
0
.
5f
;
class
GrAAConvexTessellator
;
class
GrAAConvexTessellator
{
public
:
GrAAConvexTessellator
(
SkStrokeRec
:
:
Style
style
=
SkStrokeRec
:
:
kFill_Style
SkScalar
strokeWidth
=
-
1
.
0f
SkPaint
:
:
Join
join
=
SkPaint
:
:
Join
:
:
kBevel_Join
SkScalar
miterLimit
=
0
.
0f
)
:
fSide
(
SkPointPriv
:
:
kOn_Side
)
fStrokeWidth
(
strokeWidth
)
fStyle
(
style
)
fJoin
(
join
)
fMiterLimit
(
miterLimit
)
{
}
SkPointPriv
:
:
Side
side
(
)
const
{
return
fSide
;
}
bool
tessellate
(
const
SkMatrix
&
m
const
SkPath
&
path
)
;
int
numPts
(
)
const
{
return
fPts
.
size
(
)
;
}
int
numIndices
(
)
const
{
return
fIndices
.
size
(
)
;
}
const
SkPoint
&
lastPoint
(
)
const
{
return
fPts
.
back
(
)
;
}
const
SkPoint
&
point
(
int
index
)
const
{
return
fPts
[
index
]
;
}
int
index
(
int
index
)
const
{
return
fIndices
[
index
]
;
}
SkScalar
coverage
(
int
index
)
const
{
return
fCoverages
[
index
]
;
}
#
if
GR_AA_CONVEX_TESSELLATOR_VIZ
void
draw
(
SkCanvas
*
canvas
)
const
;
#
endif
void
rewind
(
)
;
private
:
class
CandidateVerts
{
public
:
void
setReserve
(
int
numPts
)
{
fPts
.
reserve
(
numPts
)
;
}
void
rewind
(
)
{
fPts
.
clear
(
)
;
}
int
numPts
(
)
const
{
return
fPts
.
size
(
)
;
}
const
SkPoint
&
lastPoint
(
)
const
{
return
fPts
.
back
(
)
.
fPt
;
}
const
SkPoint
&
firstPoint
(
)
const
{
return
fPts
[
0
]
.
fPt
;
}
const
SkPoint
&
point
(
int
index
)
const
{
return
fPts
[
index
]
.
fPt
;
}
int
originatingIdx
(
int
index
)
const
{
return
fPts
[
index
]
.
fOriginatingIdx
;
}
int
origEdge
(
int
index
)
const
{
return
fPts
[
index
]
.
fOrigEdgeId
;
}
bool
needsToBeNew
(
int
index
)
const
{
return
fPts
[
index
]
.
fNeedsToBeNew
;
}
int
addNewPt
(
const
SkPoint
&
newPt
int
originatingIdx
int
origEdge
bool
needsToBeNew
)
{
struct
PointData
*
pt
=
fPts
.
append
(
)
;
pt
-
>
fPt
=
newPt
;
pt
-
>
fOrigEdgeId
=
origEdge
;
pt
-
>
fOriginatingIdx
=
originatingIdx
;
pt
-
>
fNeedsToBeNew
=
needsToBeNew
;
return
fPts
.
size
(
)
-
1
;
}
int
fuseWithPrior
(
int
origEdgeId
)
{
fPts
.
back
(
)
.
fOrigEdgeId
=
origEdgeId
;
fPts
.
back
(
)
.
fOriginatingIdx
=
-
1
;
fPts
.
back
(
)
.
fNeedsToBeNew
=
true
;
return
fPts
.
size
(
)
-
1
;
}
int
fuseWithNext
(
)
{
fPts
[
0
]
.
fOriginatingIdx
=
-
1
;
fPts
[
0
]
.
fNeedsToBeNew
=
true
;
return
0
;
}
int
fuseWithBoth
(
)
{
if
(
fPts
.
size
(
)
>
1
)
{
fPts
.
pop_back
(
)
;
}
fPts
[
0
]
.
fOriginatingIdx
=
-
1
;
fPts
[
0
]
.
fNeedsToBeNew
=
true
;
return
0
;
}
private
:
struct
PointData
{
SkPoint
fPt
;
int
fOriginatingIdx
;
int
fOrigEdgeId
;
bool
fNeedsToBeNew
;
}
;
SkTDArray
<
struct
PointData
>
fPts
;
}
;
class
Ring
{
public
:
void
setReserve
(
int
numPts
)
{
fPts
.
reserve
(
numPts
)
;
}
void
rewind
(
)
{
fPts
.
clear
(
)
;
}
int
numPts
(
)
const
{
return
fPts
.
size
(
)
;
}
void
addIdx
(
int
index
int
origEdgeId
)
{
struct
PointData
*
pt
=
fPts
.
append
(
)
;
pt
-
>
fIndex
=
index
;
pt
-
>
fOrigEdgeId
=
origEdgeId
;
}
void
makeOriginalRing
(
)
{
for
(
int
i
=
0
;
i
<
fPts
.
size
(
)
;
+
+
i
)
{
fPts
[
i
]
.
fOrigEdgeId
=
fPts
[
i
]
.
fIndex
;
}
}
void
init
(
const
GrAAConvexTessellator
&
tess
)
;
void
init
(
const
SkTDArray
<
SkVector
>
&
norms
const
SkTDArray
<
SkVector
>
&
bisectors
)
;
const
SkPoint
&
norm
(
int
index
)
const
{
return
fPts
[
index
]
.
fNorm
;
}
const
SkPoint
&
bisector
(
int
index
)
const
{
return
fPts
[
index
]
.
fBisector
;
}
int
index
(
int
index
)
const
{
return
fPts
[
index
]
.
fIndex
;
}
int
origEdgeID
(
int
index
)
const
{
return
fPts
[
index
]
.
fOrigEdgeId
;
}
void
setOrigEdgeId
(
int
index
int
id
)
{
fPts
[
index
]
.
fOrigEdgeId
=
id
;
}
#
if
GR_AA_CONVEX_TESSELLATOR_VIZ
void
draw
(
SkCanvas
*
canvas
const
GrAAConvexTessellator
&
tess
)
const
;
#
endif
private
:
void
computeNormals
(
const
GrAAConvexTessellator
&
result
)
;
void
computeBisectors
(
const
GrAAConvexTessellator
&
tess
)
;
SkDEBUGCODE
(
bool
isConvex
(
const
GrAAConvexTessellator
&
tess
)
const
;
)
struct
PointData
{
SkPoint
fNorm
;
SkPoint
fBisector
;
int
fIndex
;
int
fOrigEdgeId
;
}
;
SkTDArray
<
PointData
>
fPts
;
}
;
enum
CurveState
{
kSharp_CurveState
kIndeterminate_CurveState
kCurve_CurveState
}
;
bool
movable
(
int
index
)
const
{
return
fMovable
[
index
]
;
}
int
addPt
(
const
SkPoint
&
pt
SkScalar
depth
SkScalar
coverage
bool
movable
CurveState
curve
)
;
void
popLastPt
(
)
;
void
popFirstPtShuffle
(
)
;
void
updatePt
(
int
index
const
SkPoint
&
pt
SkScalar
depth
SkScalar
coverage
)
;
void
addTri
(
int
i0
int
i1
int
i2
)
;
void
reservePts
(
int
count
)
{
fPts
.
reserve
(
count
)
;
fCoverages
.
reserve
(
count
)
;
fMovable
.
reserve
(
count
)
;
}
SkScalar
computeDepthFromEdge
(
int
edgeIdx
const
SkPoint
&
p
)
const
;
bool
computePtAlongBisector
(
int
startIdx
const
SkPoint
&
bisector
int
edgeIdx
SkScalar
desiredDepth
SkPoint
*
result
)
const
;
void
lineTo
(
const
SkPoint
&
p
CurveState
curve
)
;
void
lineTo
(
const
SkMatrix
&
m
const
SkPoint
&
p
CurveState
curve
)
;
void
quadTo
(
const
SkPoint
pts
[
3
]
)
;
void
quadTo
(
const
SkMatrix
&
m
const
SkPoint
pts
[
3
]
)
;
void
cubicTo
(
const
SkMatrix
&
m
const
SkPoint
pts
[
4
]
)
;
void
conicTo
(
const
SkMatrix
&
m
const
SkPoint
pts
[
3
]
SkScalar
w
)
;
void
terminate
(
const
Ring
&
lastRing
)
;
bool
extractFromPath
(
const
SkMatrix
&
m
const
SkPath
&
path
)
;
void
computeBisectors
(
)
;
void
computeNormals
(
)
;
void
fanRing
(
const
Ring
&
ring
)
;
Ring
*
getNextRing
(
Ring
*
lastRing
)
;
void
createOuterRing
(
const
Ring
&
previousRing
SkScalar
outset
SkScalar
coverage
Ring
*
nextRing
)
;
bool
createInsetRings
(
Ring
&
previousRing
SkScalar
initialDepth
SkScalar
initialCoverage
SkScalar
targetDepth
SkScalar
targetCoverage
Ring
*
*
finalRing
)
;
bool
createInsetRing
(
const
Ring
&
lastRing
Ring
*
nextRing
SkScalar
initialDepth
SkScalar
initialCoverage
SkScalar
targetDepth
SkScalar
targetCoverage
bool
forceNew
)
;
void
validate
(
)
const
;
SkTDArray
<
SkPoint
>
fPts
;
SkTDArray
<
SkScalar
>
fCoverages
;
SkTDArray
<
bool
>
fMovable
;
SkTDArray
<
CurveState
>
fCurveState
;
SkTDArray
<
SkVector
>
fNorms
;
SkTDArray
<
SkVector
>
fBisectors
;
SkPointPriv
:
:
Side
fSide
;
SkTDArray
<
int
>
fIndices
;
Ring
fInitialRing
;
#
if
GR_AA_CONVEX_TESSELLATOR_VIZ
SkTDArray
<
Ring
*
>
fRings
;
#
else
Ring
fRings
[
2
]
;
#
endif
CandidateVerts
fCandidateVerts
;
SkScalar
fStrokeWidth
;
SkStrokeRec
:
:
Style
fStyle
;
SkPaint
:
:
Join
fJoin
;
SkScalar
fMiterLimit
;
SkScalar
fAccumLinearError
;
SkTDArray
<
SkPoint
>
fPointBuffer
;
}
;
#
endif
