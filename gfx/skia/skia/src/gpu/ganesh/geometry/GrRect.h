#
ifndef
GrRect_DEFINED
#
define
GrRect_DEFINED
#
include
"
include
/
core
/
SkMatrix
.
h
"
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
static
inline
bool
GrRectsOverlap
(
const
SkRect
&
a
const
SkRect
&
b
)
{
SkASSERT
(
!
a
.
isFinite
(
)
|
|
(
a
.
fLeft
<
=
a
.
fRight
&
&
a
.
fTop
<
=
a
.
fBottom
)
)
;
SkASSERT
(
!
b
.
isFinite
(
)
|
|
(
b
.
fLeft
<
=
b
.
fRight
&
&
b
.
fTop
<
=
b
.
fBottom
)
)
;
return
a
.
fRight
>
b
.
fLeft
&
&
a
.
fBottom
>
b
.
fTop
&
&
b
.
fRight
>
a
.
fLeft
&
&
b
.
fBottom
>
a
.
fTop
;
}
static
inline
bool
GrRectsTouchOrOverlap
(
const
SkRect
&
a
const
SkRect
&
b
)
{
SkASSERT
(
!
a
.
isFinite
(
)
|
|
(
a
.
fLeft
<
=
a
.
fRight
&
&
a
.
fTop
<
=
a
.
fBottom
)
)
;
SkASSERT
(
!
b
.
isFinite
(
)
|
|
(
b
.
fLeft
<
=
b
.
fRight
&
&
b
.
fTop
<
=
b
.
fBottom
)
)
;
return
a
.
fRight
>
=
b
.
fLeft
&
&
a
.
fBottom
>
=
b
.
fTop
&
&
b
.
fRight
>
=
a
.
fLeft
&
&
b
.
fBottom
>
=
a
.
fTop
;
}
static
inline
void
GrMapRectPoints
(
const
SkRect
&
inRect
const
SkRect
&
outRect
const
SkPoint
inPts
[
]
SkPoint
outPts
[
]
int
ptCount
)
{
SkMatrix
:
:
RectToRect
(
inRect
outRect
)
.
mapPoints
(
outPts
inPts
ptCount
)
;
}
static
inline
bool
GrClipSrcRectAndDstPoint
(
const
SkISize
&
dstSize
SkIPoint
*
dstPoint
const
SkISize
&
srcSize
SkIRect
*
srcRect
)
{
if
(
srcRect
-
>
fLeft
<
0
)
{
dstPoint
-
>
fX
-
=
srcRect
-
>
fLeft
;
srcRect
-
>
fLeft
=
0
;
}
if
(
dstPoint
-
>
fX
<
0
)
{
srcRect
-
>
fLeft
-
=
dstPoint
-
>
fX
;
dstPoint
-
>
fX
=
0
;
}
if
(
srcRect
-
>
fTop
<
0
)
{
dstPoint
-
>
fY
-
=
srcRect
-
>
fTop
;
srcRect
-
>
fTop
=
0
;
}
if
(
dstPoint
-
>
fY
<
0
)
{
srcRect
-
>
fTop
-
=
dstPoint
-
>
fY
;
dstPoint
-
>
fY
=
0
;
}
if
(
srcRect
-
>
fRight
>
srcSize
.
width
(
)
)
{
srcRect
-
>
fRight
=
srcSize
.
width
(
)
;
}
if
(
dstPoint
-
>
fX
+
srcRect
-
>
width
(
)
>
dstSize
.
width
(
)
)
{
srcRect
-
>
fRight
=
srcRect
-
>
fLeft
+
dstSize
.
width
(
)
-
dstPoint
-
>
fX
;
}
if
(
srcRect
-
>
fBottom
>
srcSize
.
height
(
)
)
{
srcRect
-
>
fBottom
=
srcSize
.
height
(
)
;
}
if
(
dstPoint
-
>
fY
+
srcRect
-
>
height
(
)
>
dstSize
.
height
(
)
)
{
srcRect
-
>
fBottom
=
srcRect
-
>
fTop
+
dstSize
.
height
(
)
-
dstPoint
-
>
fY
;
}
return
!
srcRect
-
>
isEmpty
(
)
;
}
#
endif
