#
ifndef
GrStyledShape_DEFINED
#
define
GrStyledShape_DEFINED
#
include
"
include
/
core
/
SkPath
.
h
"
#
include
"
include
/
core
/
SkRRect
.
h
"
#
include
"
include
/
private
/
base
/
SkTemplates
.
h
"
#
include
"
src
/
base
/
SkTLazy
.
h
"
#
include
"
src
/
core
/
SkPathPriv
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrStyle
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
geometry
/
GrShape
.
h
"
#
include
<
new
>
class
SkIDChangeListener
;
class
GrStyledShape
{
public
:
inline
static
constexpr
int
kMaxKeyFromDataVerbCnt
=
10
;
GrStyledShape
(
)
{
}
enum
class
DoSimplify
:
bool
{
kNo
=
false
kYes
}
;
explicit
GrStyledShape
(
const
SkPath
&
path
DoSimplify
doSimplify
=
DoSimplify
:
:
kYes
)
:
GrStyledShape
(
path
GrStyle
:
:
SimpleFill
(
)
doSimplify
)
{
}
explicit
GrStyledShape
(
const
SkRRect
&
rrect
DoSimplify
doSimplify
=
DoSimplify
:
:
kYes
)
:
GrStyledShape
(
rrect
GrStyle
:
:
SimpleFill
(
)
doSimplify
)
{
}
explicit
GrStyledShape
(
const
SkRect
&
rect
DoSimplify
doSimplify
=
DoSimplify
:
:
kYes
)
:
GrStyledShape
(
rect
GrStyle
:
:
SimpleFill
(
)
doSimplify
)
{
}
GrStyledShape
(
const
SkPath
&
path
const
SkPaint
&
paint
DoSimplify
doSimplify
=
DoSimplify
:
:
kYes
)
:
GrStyledShape
(
path
GrStyle
(
paint
)
doSimplify
)
{
}
GrStyledShape
(
const
SkRRect
&
rrect
const
SkPaint
&
paint
DoSimplify
doSimplify
=
DoSimplify
:
:
kYes
)
:
GrStyledShape
(
rrect
GrStyle
(
paint
)
doSimplify
)
{
}
GrStyledShape
(
const
SkRect
&
rect
const
SkPaint
&
paint
DoSimplify
doSimplify
=
DoSimplify
:
:
kYes
)
:
GrStyledShape
(
rect
GrStyle
(
paint
)
doSimplify
)
{
}
GrStyledShape
(
const
SkPath
&
path
const
GrStyle
&
style
DoSimplify
doSimplify
=
DoSimplify
:
:
kYes
)
:
fShape
(
path
)
fStyle
(
style
)
{
if
(
doSimplify
=
=
DoSimplify
:
:
kYes
)
{
this
-
>
simplify
(
)
;
}
}
GrStyledShape
(
const
SkRRect
&
rrect
const
GrStyle
&
style
DoSimplify
doSimplify
=
DoSimplify
:
:
kYes
)
:
fShape
(
rrect
)
fStyle
(
style
)
{
if
(
doSimplify
=
=
DoSimplify
:
:
kYes
)
{
this
-
>
simplify
(
)
;
}
}
GrStyledShape
(
const
SkRRect
&
rrect
SkPathDirection
dir
unsigned
start
bool
inverted
const
GrStyle
&
style
DoSimplify
doSimplify
=
DoSimplify
:
:
kYes
)
:
fShape
(
rrect
)
fStyle
(
style
)
{
fShape
.
setPathWindingParams
(
dir
start
)
;
fShape
.
setInverted
(
inverted
)
;
if
(
doSimplify
=
=
DoSimplify
:
:
kYes
)
{
this
-
>
simplify
(
)
;
}
}
GrStyledShape
(
const
SkRect
&
rect
const
GrStyle
&
style
DoSimplify
doSimplify
=
DoSimplify
:
:
kYes
)
:
fShape
(
rect
)
fStyle
(
style
)
{
if
(
doSimplify
=
=
DoSimplify
:
:
kYes
)
{
this
-
>
simplify
(
)
;
}
}
GrStyledShape
(
const
GrStyledShape
&
)
;
static
GrStyledShape
MakeArc
(
const
SkRect
&
oval
SkScalar
startAngleDegrees
SkScalar
sweepAngleDegrees
bool
useCenter
const
GrStyle
&
style
DoSimplify
=
DoSimplify
:
:
kYes
)
;
GrStyledShape
&
operator
=
(
const
GrStyledShape
&
that
)
;
enum
class
FillInversion
{
kPreserve
kFlip
kForceNoninverted
kForceInverted
}
;
static
GrStyledShape
MakeFilled
(
const
GrStyledShape
&
original
FillInversion
=
FillInversion
:
:
kPreserve
)
;
const
GrStyle
&
style
(
)
const
{
return
fStyle
;
}
bool
simplified
(
)
const
{
return
fSimplified
;
}
GrStyledShape
applyStyle
(
GrStyle
:
:
Apply
apply
SkScalar
scale
)
const
{
return
GrStyledShape
(
*
this
apply
scale
)
;
}
bool
isRect
(
)
const
{
SkASSERT
(
!
fShape
.
isRRect
(
)
|
|
!
fShape
.
rrect
(
)
.
isRect
(
)
)
;
return
fShape
.
isRect
(
)
;
}
bool
asRRect
(
SkRRect
*
rrect
SkPathDirection
*
dir
unsigned
*
start
bool
*
inverted
)
const
;
bool
asLine
(
SkPoint
pts
[
2
]
bool
*
inverted
)
const
;
bool
asNestedRects
(
SkRect
rects
[
2
]
)
const
;
void
asPath
(
SkPath
*
out
)
const
{
fShape
.
asPath
(
out
fStyle
.
isSimpleFill
(
)
)
;
}
bool
isEmpty
(
)
const
{
return
fShape
.
isEmpty
(
)
;
}
SkRect
bounds
(
)
const
{
return
fShape
.
bounds
(
)
;
}
SkRect
styledBounds
(
)
const
;
bool
knownToBeConvex
(
)
const
{
return
fShape
.
convex
(
fStyle
.
isSimpleFill
(
)
)
;
}
bool
knownDirection
(
)
const
{
return
!
fShape
.
isPath
(
)
|
|
SkPathPriv
:
:
ComputeFirstDirection
(
fShape
.
path
(
)
)
!
=
SkPathFirstDirection
:
:
kUnknown
;
}
bool
inverseFilled
(
)
const
{
SkASSERT
(
!
fShape
.
isPath
(
)
|
|
fShape
.
inverted
(
)
=
=
fShape
.
path
(
)
.
isInverseFillType
(
)
)
;
SkASSERT
(
!
(
fShape
.
inverted
(
)
&
&
this
-
>
style
(
)
.
isDashed
(
)
)
)
;
return
fShape
.
inverted
(
)
;
}
bool
mayBeInverseFilledAfterStyling
(
)
const
{
if
(
this
-
>
style
(
)
.
hasNonDashPathEffect
(
)
)
{
return
true
;
}
return
this
-
>
inverseFilled
(
)
;
}
bool
knownToBeClosed
(
)
const
{
return
fShape
.
closed
(
)
;
}
uint32_t
segmentMask
(
)
const
{
return
fShape
.
segmentMask
(
)
;
}
int
unstyledKeySize
(
)
const
;
bool
hasUnstyledKey
(
)
const
{
return
this
-
>
unstyledKeySize
(
)
>
=
0
;
}
void
writeUnstyledKey
(
uint32_t
*
key
)
const
;
void
addGenIDChangeListener
(
sk_sp
<
SkIDChangeListener
>
)
const
;
uint32_t
testingOnly_getOriginalGenerationID
(
)
const
;
bool
testingOnly_isPath
(
)
const
;
bool
testingOnly_isNonVolatilePath
(
)
const
;
void
simplify
(
)
;
private
:
GrStyledShape
(
const
GrStyledShape
&
parentShape
GrStyle
:
:
Apply
SkScalar
scale
)
;
void
setInheritedKey
(
const
GrStyledShape
&
parentShape
GrStyle
:
:
Apply
SkScalar
scale
)
;
void
simplifyStroke
(
)
;
const
SkPath
*
originalPathForListeners
(
)
const
;
GrShape
fShape
;
GrStyle
fStyle
;
int32_t
fGenID
=
0
;
bool
fClosed
=
false
;
bool
fSimplified
=
false
;
SkTLazy
<
SkPath
>
fInheritedPathForListeners
;
skia_private
:
:
AutoSTArray
<
8
uint32_t
>
fInheritedKey
;
}
;
#
endif
