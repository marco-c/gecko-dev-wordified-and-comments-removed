#
include
"
src
/
gpu
/
ganesh
/
effects
/
GrDisableColorXP
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrPipeline
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrProcessor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrShaderCaps
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrXferProcessor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLFragmentShaderBuilder
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLProgramDataManager
.
h
"
class
DisableColorXP
:
public
GrXferProcessor
{
public
:
DisableColorXP
(
)
:
INHERITED
(
kDisableColorXP_ClassID
)
{
}
private
:
const
char
*
name
(
)
const
override
{
return
"
Disable
Color
"
;
}
bool
onIsEqual
(
const
GrXferProcessor
&
xpBase
)
const
override
{
return
true
;
}
void
onAddToKey
(
const
GrShaderCaps
&
skgpu
:
:
KeyBuilder
*
)
const
override
{
}
void
onGetBlendInfo
(
skgpu
:
:
BlendInfo
*
blendInfo
)
const
override
{
blendInfo
-
>
fWritesColor
=
false
;
}
std
:
:
unique_ptr
<
ProgramImpl
>
makeProgramImpl
(
)
const
override
;
using
INHERITED
=
GrXferProcessor
;
}
;
std
:
:
unique_ptr
<
GrXferProcessor
:
:
ProgramImpl
>
DisableColorXP
:
:
makeProgramImpl
(
)
const
{
class
Impl
:
public
ProgramImpl
{
private
:
void
emitOutputsForBlendState
(
const
EmitArgs
&
args
)
override
{
if
(
args
.
fShaderCaps
-
>
fMustWriteToFragColor
)
{
GrGLSLXPFragmentBuilder
*
fragBuilder
=
args
.
fXPFragBuilder
;
fragBuilder
-
>
codeAppendf
(
"
%
s
=
half4
(
0
)
;
"
args
.
fOutputPrimary
)
;
}
}
void
emitWriteSwizzle
(
GrGLSLXPFragmentBuilder
*
const
skgpu
:
:
Swizzle
&
const
char
*
const
char
*
)
const
override
{
return
;
}
}
;
return
std
:
:
make_unique
<
Impl
>
(
)
;
}
sk_sp
<
const
GrXferProcessor
>
GrDisableColorXPFactory
:
:
MakeXferProcessor
(
)
{
return
sk_make_sp
<
DisableColorXP
>
(
)
;
}
GR_DEFINE_XP_FACTORY_TEST
(
GrDisableColorXPFactory
)
#
if
GR_TEST_UTILS
const
GrXPFactory
*
GrDisableColorXPFactory
:
:
TestGet
(
GrProcessorTestData
*
)
{
return
GrDisableColorXPFactory
:
:
Get
(
)
;
}
#
endif
