#
ifndef
GrConvexPolyEffect_DEFINED
#
define
GrConvexPolyEffect_DEFINED
#
include
"
include
/
private
/
gpu
/
ganesh
/
GrTypesPriv
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrCaps
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrFragmentProcessor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrProcessor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrProcessorUnitTest
.
h
"
class
GrInvariantOutput
;
class
SkPath
;
class
GrConvexPolyEffect
:
public
GrFragmentProcessor
{
public
:
inline
static
constexpr
int
kMaxEdges
=
8
;
static
GrFPResult
Make
(
std
:
:
unique_ptr
<
GrFragmentProcessor
>
inputFP
GrClipEdgeType
edgeType
int
n
const
float
edges
[
]
)
{
if
(
n
<
=
0
|
|
n
>
kMaxEdges
)
{
return
GrFPFailure
(
std
:
:
move
(
inputFP
)
)
;
}
return
GrFPSuccess
(
std
:
:
unique_ptr
<
GrFragmentProcessor
>
(
new
GrConvexPolyEffect
(
std
:
:
move
(
inputFP
)
edgeType
n
edges
)
)
)
;
}
static
GrFPResult
Make
(
std
:
:
unique_ptr
<
GrFragmentProcessor
>
GrClipEdgeType
const
SkPath
&
)
;
~
GrConvexPolyEffect
(
)
override
;
const
char
*
name
(
)
const
override
{
return
"
ConvexPoly
"
;
}
std
:
:
unique_ptr
<
GrFragmentProcessor
>
clone
(
)
const
override
;
private
:
GrConvexPolyEffect
(
std
:
:
unique_ptr
<
GrFragmentProcessor
>
inputFP
GrClipEdgeType
edgeType
int
n
const
SkScalar
edges
[
]
)
;
GrConvexPolyEffect
(
const
GrConvexPolyEffect
&
)
;
std
:
:
unique_ptr
<
ProgramImpl
>
onMakeProgramImpl
(
)
const
override
;
void
onAddToKey
(
const
GrShaderCaps
&
skgpu
:
:
KeyBuilder
*
)
const
override
;
bool
onIsEqual
(
const
GrFragmentProcessor
&
other
)
const
override
;
GrClipEdgeType
fEdgeType
;
int
fEdgeCount
;
std
:
:
array
<
float
3
*
kMaxEdges
>
fEdges
;
GR_DECLARE_FRAGMENT_PROCESSOR_TEST
using
INHERITED
=
GrFragmentProcessor
;
}
;
#
endif
