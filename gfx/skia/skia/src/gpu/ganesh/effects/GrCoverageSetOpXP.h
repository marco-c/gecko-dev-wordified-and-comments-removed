#
ifndef
GrCoverageSetOpXP_DEFINED
#
define
GrCoverageSetOpXP_DEFINED
#
include
"
include
/
core
/
SkRegion
.
h
"
#
include
"
include
/
gpu
/
GrTypes
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrProcessorUnitTest
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrXferProcessor
.
h
"
#
if
defined
(
__GNUC__
)
#
pragma
GCC
diagnostic
push
#
pragma
GCC
diagnostic
ignored
"
-
Wnon
-
virtual
-
dtor
"
#
endif
#
if
defined
(
__clang__
)
#
pragma
clang
diagnostic
push
#
pragma
clang
diagnostic
ignored
"
-
Wnon
-
virtual
-
dtor
"
#
endif
class
GrCoverageSetOpXPFactory
:
public
GrXPFactory
{
public
:
static
const
GrXPFactory
*
Get
(
SkRegion
:
:
Op
regionOp
bool
invertCoverage
=
false
)
;
private
:
constexpr
GrCoverageSetOpXPFactory
(
SkRegion
:
:
Op
regionOp
bool
invertCoverage
)
;
sk_sp
<
const
GrXferProcessor
>
makeXferProcessor
(
const
GrProcessorAnalysisColor
&
GrProcessorAnalysisCoverage
const
GrCaps
&
GrClampType
)
const
override
;
AnalysisProperties
analysisProperties
(
const
GrProcessorAnalysisColor
&
color
const
GrProcessorAnalysisCoverage
&
coverage
const
GrCaps
&
GrClampType
)
const
override
{
auto
props
=
AnalysisProperties
:
:
kIgnoresInputColor
;
switch
(
fRegionOp
)
{
case
SkRegion
:
:
kReplace_Op
:
props
|
=
AnalysisProperties
:
:
kUnaffectedByDstValue
;
break
;
case
SkRegion
:
:
kUnion_Op
:
case
SkRegion
:
:
kDifference_Op
:
break
;
case
SkRegion
:
:
kIntersect_Op
:
case
SkRegion
:
:
kXOR_Op
:
case
SkRegion
:
:
kReverseDifference_Op
:
break
;
}
return
props
;
}
GR_DECLARE_XP_FACTORY_TEST
SkRegion
:
:
Op
fRegionOp
;
bool
fInvertCoverage
;
using
INHERITED
=
GrXPFactory
;
}
;
#
if
defined
(
__GNUC__
)
#
pragma
GCC
diagnostic
pop
#
endif
#
if
defined
(
__clang__
)
#
pragma
clang
diagnostic
pop
#
endif
#
endif
