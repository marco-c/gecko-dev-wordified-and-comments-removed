#
ifndef
GrDistanceFieldGeoProc_DEFINED
#
define
GrDistanceFieldGeoProc_DEFINED
#
if
!
defined
(
SK_DISABLE_SDF_TEXT
)
#
include
"
src
/
base
/
SkArenaAlloc
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrGeometryProcessor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrProcessor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrProcessorUnitTest
.
h
"
class
GrGLDistanceFieldA8TextGeoProc
;
class
GrGLDistanceFieldLCDTextGeoProc
;
class
GrGLDistanceFieldPathGeoProc
;
class
GrInvariantOutput
;
class
GrSurfaceProxyView
;
enum
GrDistanceFieldEffectFlags
{
kSimilarity_DistanceFieldEffectFlag
=
0x001
kScaleOnly_DistanceFieldEffectFlag
=
0x002
kPerspective_DistanceFieldEffectFlag
=
0x004
kUseLCD_DistanceFieldEffectFlag
=
0x008
kBGR_DistanceFieldEffectFlag
=
0x010
kPortrait_DistanceFieldEffectFlag
=
0x020
kGammaCorrect_DistanceFieldEffectFlag
=
0x040
kAliased_DistanceFieldEffectFlag
=
0x080
kWideColor_DistanceFieldEffectFlag
=
0x100
kInvalid_DistanceFieldEffectFlag
=
0x200
kUniformScale_DistanceFieldEffectMask
=
kSimilarity_DistanceFieldEffectFlag
|
kScaleOnly_DistanceFieldEffectFlag
kNonLCD_DistanceFieldEffectMask
=
kSimilarity_DistanceFieldEffectFlag
|
kScaleOnly_DistanceFieldEffectFlag
|
kPerspective_DistanceFieldEffectFlag
|
kGammaCorrect_DistanceFieldEffectFlag
|
kAliased_DistanceFieldEffectFlag
kPath_DistanceFieldEffectMask
=
kSimilarity_DistanceFieldEffectFlag
|
kScaleOnly_DistanceFieldEffectFlag
|
kPerspective_DistanceFieldEffectFlag
|
kGammaCorrect_DistanceFieldEffectFlag
|
kAliased_DistanceFieldEffectFlag
|
kWideColor_DistanceFieldEffectFlag
kLCD_DistanceFieldEffectMask
=
kSimilarity_DistanceFieldEffectFlag
|
kScaleOnly_DistanceFieldEffectFlag
|
kPerspective_DistanceFieldEffectFlag
|
kUseLCD_DistanceFieldEffectFlag
|
kBGR_DistanceFieldEffectFlag
|
kGammaCorrect_DistanceFieldEffectFlag
}
;
class
GrDistanceFieldA8TextGeoProc
:
public
GrGeometryProcessor
{
public
:
inline
static
constexpr
int
kMaxTextures
=
4
;
#
ifdef
SK_GAMMA_APPLY_TO_A8
static
GrGeometryProcessor
*
Make
(
SkArenaAlloc
*
arena
const
GrShaderCaps
&
caps
const
GrSurfaceProxyView
*
views
int
numActiveViews
GrSamplerState
params
float
lum
uint32_t
flags
const
SkMatrix
&
localMatrixIfUsesLocalCoords
)
{
return
arena
-
>
make
(
[
&
]
(
void
*
ptr
)
{
return
new
(
ptr
)
GrDistanceFieldA8TextGeoProc
(
caps
views
numActiveViews
params
lum
flags
localMatrixIfUsesLocalCoords
)
;
}
)
;
}
#
else
static
GrGeometryProcessor
*
Make
(
SkArenaAlloc
*
arena
const
GrShaderCaps
&
caps
const
GrSurfaceProxyView
*
views
int
numActiveViews
GrSamplerState
params
uint32_t
flags
const
SkMatrix
&
localMatrixIfUsesLocalCoords
)
{
return
arena
-
>
make
(
[
&
]
(
void
*
ptr
)
{
return
new
(
ptr
)
GrDistanceFieldA8TextGeoProc
(
caps
views
numActiveViews
params
flags
localMatrixIfUsesLocalCoords
)
;
}
)
;
}
#
endif
~
GrDistanceFieldA8TextGeoProc
(
)
override
{
}
const
char
*
name
(
)
const
override
{
return
"
DistanceFieldA8Text
"
;
}
void
addNewViews
(
const
GrSurfaceProxyView
*
views
int
numViews
GrSamplerState
)
;
void
addToKey
(
const
GrShaderCaps
&
skgpu
:
:
KeyBuilder
*
)
const
override
;
std
:
:
unique_ptr
<
ProgramImpl
>
makeProgramImpl
(
const
GrShaderCaps
&
)
const
override
;
private
:
class
Impl
;
GrDistanceFieldA8TextGeoProc
(
const
GrShaderCaps
&
caps
const
GrSurfaceProxyView
*
views
int
numActiveViews
GrSamplerState
params
#
ifdef
SK_GAMMA_APPLY_TO_A8
float
distanceAdjust
#
endif
uint32_t
flags
const
SkMatrix
&
localMatrix
)
;
const
TextureSampler
&
onTextureSampler
(
int
i
)
const
override
{
return
fTextureSamplers
[
i
]
;
}
TextureSampler
fTextureSamplers
[
kMaxTextures
]
;
SkISize
fAtlasDimensions
;
SkMatrix
fLocalMatrix
;
Attribute
fInPosition
;
Attribute
fInColor
;
Attribute
fInTextureCoords
;
uint32_t
fFlags
;
#
ifdef
SK_GAMMA_APPLY_TO_A8
float
fDistanceAdjust
;
#
endif
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
using
INHERITED
=
GrGeometryProcessor
;
}
;
class
GrDistanceFieldPathGeoProc
:
public
GrGeometryProcessor
{
public
:
inline
static
constexpr
int
kMaxTextures
=
4
;
static
GrGeometryProcessor
*
Make
(
SkArenaAlloc
*
arena
const
GrShaderCaps
&
caps
const
GrSurfaceProxyView
*
views
int
numActiveViews
GrSamplerState
params
const
SkMatrix
&
localMatrix
uint32_t
flags
)
{
return
arena
-
>
make
(
[
&
]
(
void
*
ptr
)
{
return
new
(
ptr
)
GrDistanceFieldPathGeoProc
(
caps
views
numActiveViews
params
localMatrix
flags
)
;
}
)
;
}
~
GrDistanceFieldPathGeoProc
(
)
override
{
}
const
char
*
name
(
)
const
override
{
return
"
DistanceFieldPath
"
;
}
void
addNewViews
(
const
GrSurfaceProxyView
*
int
numActiveViews
GrSamplerState
)
;
void
addToKey
(
const
GrShaderCaps
&
skgpu
:
:
KeyBuilder
*
)
const
override
;
std
:
:
unique_ptr
<
ProgramImpl
>
makeProgramImpl
(
const
GrShaderCaps
&
)
const
override
;
private
:
class
Impl
;
GrDistanceFieldPathGeoProc
(
const
GrShaderCaps
&
caps
const
GrSurfaceProxyView
*
views
int
numActiveViews
GrSamplerState
const
SkMatrix
&
localMatrix
uint32_t
flags
)
;
const
TextureSampler
&
onTextureSampler
(
int
i
)
const
override
{
return
fTextureSamplers
[
i
]
;
}
SkMatrix
fLocalMatrix
;
TextureSampler
fTextureSamplers
[
kMaxTextures
]
;
SkISize
fAtlasDimensions
;
Attribute
fInPosition
;
Attribute
fInColor
;
Attribute
fInTextureCoords
;
uint32_t
fFlags
;
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
using
INHERITED
=
GrGeometryProcessor
;
}
;
class
GrDistanceFieldLCDTextGeoProc
:
public
GrGeometryProcessor
{
public
:
inline
static
constexpr
int
kMaxTextures
=
4
;
struct
DistanceAdjust
{
SkScalar
fR
fG
fB
;
static
DistanceAdjust
Make
(
SkScalar
r
SkScalar
g
SkScalar
b
)
{
DistanceAdjust
result
;
result
.
fR
=
r
;
result
.
fG
=
g
;
result
.
fB
=
b
;
return
result
;
}
bool
operator
=
=
(
const
DistanceAdjust
&
wa
)
const
{
return
(
fR
=
=
wa
.
fR
&
&
fG
=
=
wa
.
fG
&
&
fB
=
=
wa
.
fB
)
;
}
bool
operator
!
=
(
const
DistanceAdjust
&
wa
)
const
{
return
!
(
*
this
=
=
wa
)
;
}
}
;
static
GrGeometryProcessor
*
Make
(
SkArenaAlloc
*
arena
const
GrShaderCaps
&
caps
const
GrSurfaceProxyView
*
views
int
numActiveViews
GrSamplerState
params
DistanceAdjust
distanceAdjust
uint32_t
flags
const
SkMatrix
&
localMatrixIfUsesLocalCoords
)
{
return
arena
-
>
make
(
[
&
]
(
void
*
ptr
)
{
return
new
(
ptr
)
GrDistanceFieldLCDTextGeoProc
(
caps
views
numActiveViews
params
distanceAdjust
flags
localMatrixIfUsesLocalCoords
)
;
}
)
;
}
~
GrDistanceFieldLCDTextGeoProc
(
)
override
{
}
const
char
*
name
(
)
const
override
{
return
"
DistanceFieldLCDText
"
;
}
void
addNewViews
(
const
GrSurfaceProxyView
*
int
numActiveViews
GrSamplerState
)
;
void
addToKey
(
const
GrShaderCaps
&
skgpu
:
:
KeyBuilder
*
)
const
override
;
std
:
:
unique_ptr
<
ProgramImpl
>
makeProgramImpl
(
const
GrShaderCaps
&
)
const
override
;
private
:
class
Impl
;
GrDistanceFieldLCDTextGeoProc
(
const
GrShaderCaps
&
caps
const
GrSurfaceProxyView
*
views
int
numActiveViews
GrSamplerState
params
DistanceAdjust
wa
uint32_t
flags
const
SkMatrix
&
localMatrix
)
;
const
TextureSampler
&
onTextureSampler
(
int
i
)
const
override
{
return
fTextureSamplers
[
i
]
;
}
TextureSampler
fTextureSamplers
[
kMaxTextures
]
;
SkISize
fAtlasDimensions
;
const
SkMatrix
fLocalMatrix
;
DistanceAdjust
fDistanceAdjust
;
Attribute
fInPosition
;
Attribute
fInColor
;
Attribute
fInTextureCoords
;
uint32_t
fFlags
;
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
using
INHERITED
=
GrGeometryProcessor
;
}
;
#
endif
#
endif
