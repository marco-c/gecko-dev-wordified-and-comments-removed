#
ifndef
GrBezierEffect_DEFINED
#
define
GrBezierEffect_DEFINED
#
include
"
include
/
private
/
gpu
/
ganesh
/
GrTypesPriv
.
h
"
#
include
"
src
/
base
/
SkArenaAlloc
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrCaps
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrGeometryProcessor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrProcessor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrProcessorUnitTest
.
h
"
class
GrGLConicEffect
;
class
GrConicEffect
:
public
GrGeometryProcessor
{
public
:
static
GrGeometryProcessor
*
Make
(
SkArenaAlloc
*
arena
const
SkPMColor4f
&
color
const
SkMatrix
&
viewMatrix
const
GrCaps
&
caps
const
SkMatrix
&
localMatrix
bool
usesLocalCoords
uint8_t
coverage
=
0xff
)
{
if
(
!
caps
.
shaderCaps
(
)
-
>
fShaderDerivativeSupport
)
{
return
nullptr
;
}
return
arena
-
>
make
(
[
&
]
(
void
*
ptr
)
{
return
new
(
ptr
)
GrConicEffect
(
color
viewMatrix
coverage
localMatrix
usesLocalCoords
)
;
}
)
;
}
~
GrConicEffect
(
)
override
;
const
char
*
name
(
)
const
override
{
return
"
Conic
"
;
}
void
addToKey
(
const
GrShaderCaps
&
caps
skgpu
:
:
KeyBuilder
*
b
)
const
override
;
std
:
:
unique_ptr
<
ProgramImpl
>
makeProgramImpl
(
const
GrShaderCaps
&
)
const
override
;
private
:
class
Impl
;
GrConicEffect
(
const
SkPMColor4f
&
const
SkMatrix
&
viewMatrix
uint8_t
coverage
const
SkMatrix
&
localMatrix
bool
usesLocalCoords
)
;
inline
const
Attribute
&
inPosition
(
)
const
{
return
kAttributes
[
0
]
;
}
inline
const
Attribute
&
inConicCoeffs
(
)
const
{
return
kAttributes
[
1
]
;
}
SkPMColor4f
fColor
;
SkMatrix
fViewMatrix
;
SkMatrix
fLocalMatrix
;
bool
fUsesLocalCoords
;
uint8_t
fCoverageScale
;
inline
static
constexpr
Attribute
kAttributes
[
]
=
{
{
"
inPosition
"
kFloat2_GrVertexAttribType
SkSLType
:
:
kFloat2
}
{
"
inConicCoeffs
"
kFloat4_GrVertexAttribType
SkSLType
:
:
kHalf4
}
}
;
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
using
INHERITED
=
GrGeometryProcessor
;
}
;
class
GrGLQuadEffect
;
class
GrQuadEffect
:
public
GrGeometryProcessor
{
public
:
static
GrGeometryProcessor
*
Make
(
SkArenaAlloc
*
arena
const
SkPMColor4f
&
color
const
SkMatrix
&
viewMatrix
const
GrCaps
&
caps
const
SkMatrix
&
localMatrix
bool
usesLocalCoords
uint8_t
coverage
=
0xff
)
{
if
(
!
caps
.
shaderCaps
(
)
-
>
fShaderDerivativeSupport
)
{
return
nullptr
;
}
return
arena
-
>
make
(
[
&
]
(
void
*
ptr
)
{
return
new
(
ptr
)
GrQuadEffect
(
color
viewMatrix
coverage
localMatrix
usesLocalCoords
)
;
}
)
;
}
~
GrQuadEffect
(
)
override
;
const
char
*
name
(
)
const
override
{
return
"
Quad
"
;
}
void
addToKey
(
const
GrShaderCaps
&
caps
skgpu
:
:
KeyBuilder
*
b
)
const
override
;
std
:
:
unique_ptr
<
ProgramImpl
>
makeProgramImpl
(
const
GrShaderCaps
&
)
const
override
;
private
:
class
Impl
;
GrQuadEffect
(
const
SkPMColor4f
&
const
SkMatrix
&
viewMatrix
uint8_t
coverage
const
SkMatrix
&
localMatrix
bool
usesLocalCoords
)
;
inline
const
Attribute
&
inPosition
(
)
const
{
return
kAttributes
[
0
]
;
}
inline
const
Attribute
&
inHairQuadEdge
(
)
const
{
return
kAttributes
[
1
]
;
}
SkPMColor4f
fColor
;
SkMatrix
fViewMatrix
;
SkMatrix
fLocalMatrix
;
bool
fUsesLocalCoords
;
uint8_t
fCoverageScale
;
inline
static
constexpr
Attribute
kAttributes
[
]
=
{
{
"
inPosition
"
kFloat2_GrVertexAttribType
SkSLType
:
:
kFloat2
}
{
"
inHairQuadEdge
"
kFloat4_GrVertexAttribType
SkSLType
:
:
kHalf4
}
}
;
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
using
INHERITED
=
GrGeometryProcessor
;
}
;
#
endif
