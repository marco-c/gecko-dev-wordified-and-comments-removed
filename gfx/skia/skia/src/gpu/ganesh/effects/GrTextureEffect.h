#
ifndef
GrTextureEffect_DEFINED
#
define
GrTextureEffect_DEFINED
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
core
/
SkMatrix
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrFragmentProcessor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrProcessorUnitTest
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrSamplerState
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrSurfaceProxyView
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrTextureProxy
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLFragmentShaderBuilder
.
h
"
class
GrTextureEffect
:
public
GrFragmentProcessor
{
public
:
inline
static
constexpr
float
kDefaultBorder
[
4
]
=
{
0
}
;
static
std
:
:
unique_ptr
<
GrFragmentProcessor
>
Make
(
GrSurfaceProxyView
SkAlphaType
const
SkMatrix
&
=
SkMatrix
:
:
I
(
)
GrSamplerState
:
:
Filter
=
GrSamplerState
:
:
Filter
:
:
kNearest
GrSamplerState
:
:
MipmapMode
mipmapMode
=
GrSamplerState
:
:
MipmapMode
:
:
kNone
)
;
static
std
:
:
unique_ptr
<
GrFragmentProcessor
>
Make
(
GrSurfaceProxyView
SkAlphaType
const
SkMatrix
&
GrSamplerState
const
GrCaps
&
caps
const
float
border
[
4
]
=
kDefaultBorder
)
;
static
std
:
:
unique_ptr
<
GrFragmentProcessor
>
MakeSubset
(
GrSurfaceProxyView
SkAlphaType
const
SkMatrix
&
GrSamplerState
const
SkRect
&
subset
const
GrCaps
&
caps
const
float
border
[
4
]
=
kDefaultBorder
bool
alwaysUseShaderTileMode
=
false
)
;
static
std
:
:
unique_ptr
<
GrFragmentProcessor
>
MakeSubset
(
GrSurfaceProxyView
SkAlphaType
const
SkMatrix
&
GrSamplerState
const
SkRect
&
subset
const
SkRect
&
domain
const
GrCaps
&
caps
const
float
border
[
4
]
=
kDefaultBorder
)
;
static
std
:
:
unique_ptr
<
GrFragmentProcessor
>
MakeCustomLinearFilterInset
(
GrSurfaceProxyView
SkAlphaType
const
SkMatrix
&
GrSamplerState
:
:
WrapMode
wx
GrSamplerState
:
:
WrapMode
wy
const
SkRect
&
subset
const
SkRect
*
domain
SkVector
inset
const
GrCaps
&
caps
const
float
border
[
4
]
=
kDefaultBorder
)
;
std
:
:
unique_ptr
<
GrFragmentProcessor
>
clone
(
)
const
override
;
const
char
*
name
(
)
const
override
{
return
"
TextureEffect
"
;
}
GrSamplerState
samplerState
(
)
const
{
return
fSamplerState
;
}
GrTexture
*
texture
(
)
const
{
return
fView
.
asTextureProxy
(
)
-
>
peekTexture
(
)
;
}
const
GrSurfaceProxyView
&
view
(
)
const
{
return
fView
;
}
SkMatrix
coordAdjustmentMatrix
(
)
const
;
class
Impl
:
public
ProgramImpl
{
public
:
void
emitCode
(
EmitArgs
&
)
override
;
void
setSamplerHandle
(
GrGLSLShaderBuilder
:
:
SamplerHandle
handle
)
{
fSamplerHandle
=
handle
;
}
private
:
void
onSetData
(
const
GrGLSLProgramDataManager
&
const
GrFragmentProcessor
&
)
override
;
UniformHandle
fSubsetUni
;
UniformHandle
fClampUni
;
UniformHandle
fIDimsUni
;
UniformHandle
fBorderUni
;
GrGLSLShaderBuilder
:
:
SamplerHandle
fSamplerHandle
;
}
;
private
:
struct
Sampling
;
enum
class
ShaderMode
:
uint16_t
{
kNone
kClamp
kRepeat_Nearest_None
kRepeat_Linear_None
kRepeat_Linear_Mipmap
kRepeat_Nearest_Mipmap
kMirrorRepeat
kClampToBorder_Nearest
kClampToBorder_Filter
}
;
static
ShaderMode
GetShaderMode
(
GrSamplerState
:
:
WrapMode
GrSamplerState
:
:
Filter
GrSamplerState
:
:
MipmapMode
)
;
static
bool
ShaderModeIsClampToBorder
(
ShaderMode
)
;
static
bool
ShaderModeRequiresUnormCoord
(
ShaderMode
)
;
GrSurfaceProxyView
fView
;
GrSamplerState
fSamplerState
;
float
fBorder
[
4
]
;
SkRect
fSubset
;
SkRect
fClamp
;
ShaderMode
fShaderModes
[
2
]
;
inline
GrTextureEffect
(
GrSurfaceProxyView
SkAlphaType
const
Sampling
&
)
;
explicit
GrTextureEffect
(
const
GrTextureEffect
&
src
)
;
std
:
:
unique_ptr
<
ProgramImpl
>
onMakeProgramImpl
(
)
const
override
;
void
onAddToKey
(
const
GrShaderCaps
&
skgpu
:
:
KeyBuilder
*
)
const
override
;
bool
onIsEqual
(
const
GrFragmentProcessor
&
)
const
override
;
bool
matrixEffectShouldNormalize
(
)
const
;
bool
hasClampToBorderShaderMode
(
)
const
{
return
ShaderModeIsClampToBorder
(
fShaderModes
[
0
]
)
|
|
ShaderModeIsClampToBorder
(
fShaderModes
[
1
]
)
;
}
GR_DECLARE_FRAGMENT_PROCESSOR_TEST
using
INHERITED
=
GrFragmentProcessor
;
}
;
#
endif
