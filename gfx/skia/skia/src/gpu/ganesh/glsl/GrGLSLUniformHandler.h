#
ifndef
GrGLSLUniformHandler_DEFINED
#
define
GrGLSLUniformHandler_DEFINED
#
include
"
src
/
gpu
/
Swizzle
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrShaderVar
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLProgramDataManager
.
h
"
#
define
GR_NO_MANGLE_PREFIX
"
sk_
"
class
GrGLSLProgramBuilder
;
class
GrGLSLShaderBuilder
;
class
GrProcessor
;
class
GrSamplerState
;
class
GrSurfaceProxy
;
struct
GrGLSLBuiltinUniformHandles
{
GrGLSLProgramDataManager
:
:
UniformHandle
fRTAdjustmentUni
;
GrGLSLProgramDataManager
:
:
UniformHandle
fRTFlipUni
;
GrGLSLProgramDataManager
:
:
UniformHandle
fDstTextureCoordsUni
;
}
;
class
GrGLSLUniformHandler
{
public
:
struct
UniformInfo
{
GrShaderVar
fVariable
;
uint32_t
fVisibility
;
const
GrProcessor
*
fOwner
;
SkString
fRawName
;
}
;
virtual
~
GrGLSLUniformHandler
(
)
{
}
using
UniformHandle
=
GrGLSLProgramDataManager
:
:
UniformHandle
;
GR_DEFINE_RESOURCE_HANDLE_CLASS
(
SamplerHandle
)
;
UniformHandle
addUniform
(
const
GrProcessor
*
owner
uint32_t
visibility
SkSLType
type
const
char
*
name
const
char
*
*
outName
=
nullptr
)
{
SkASSERT
(
!
SkSLTypeIsCombinedSamplerType
(
type
)
)
;
return
this
-
>
addUniformArray
(
owner
visibility
type
name
0
outName
)
;
}
UniformHandle
addUniformArray
(
const
GrProcessor
*
owner
uint32_t
visibility
SkSLType
type
const
char
*
name
int
arrayCount
const
char
*
*
outName
=
nullptr
)
{
SkASSERT
(
!
SkSLTypeIsCombinedSamplerType
(
type
)
)
;
bool
mangle
=
strncmp
(
name
GR_NO_MANGLE_PREFIX
strlen
(
GR_NO_MANGLE_PREFIX
)
)
;
return
this
-
>
internalAddUniformArray
(
owner
visibility
type
name
mangle
arrayCount
outName
)
;
}
virtual
const
GrShaderVar
&
getUniformVariable
(
UniformHandle
u
)
const
=
0
;
virtual
const
char
*
getUniformCStr
(
UniformHandle
u
)
const
=
0
;
virtual
int
numUniforms
(
)
const
=
0
;
virtual
UniformInfo
&
uniform
(
int
idx
)
=
0
;
virtual
const
UniformInfo
&
uniform
(
int
idx
)
const
=
0
;
GrShaderVar
getUniformMapping
(
const
GrProcessor
&
owner
SkString
rawName
)
const
;
GrShaderVar
liftUniformToVertexShader
(
const
GrProcessor
&
owner
SkString
rawName
)
;
protected
:
explicit
GrGLSLUniformHandler
(
GrGLSLProgramBuilder
*
program
)
:
fProgramBuilder
(
program
)
{
}
GrGLSLProgramBuilder
*
fProgramBuilder
;
private
:
virtual
const
char
*
samplerVariable
(
SamplerHandle
)
const
=
0
;
virtual
skgpu
:
:
Swizzle
samplerSwizzle
(
SamplerHandle
)
const
=
0
;
virtual
const
char
*
inputSamplerVariable
(
SamplerHandle
)
const
{
SkDEBUGFAIL
(
"
Trying
to
get
input
sampler
from
unsupported
backend
"
)
;
return
nullptr
;
}
virtual
skgpu
:
:
Swizzle
inputSamplerSwizzle
(
SamplerHandle
)
const
{
SkDEBUGFAIL
(
"
Trying
to
get
input
sampler
swizzle
from
unsupported
backend
"
)
;
return
{
}
;
}
virtual
SamplerHandle
addSampler
(
const
GrBackendFormat
&
GrSamplerState
const
skgpu
:
:
Swizzle
&
const
char
*
name
const
GrShaderCaps
*
)
=
0
;
virtual
SamplerHandle
addInputSampler
(
const
skgpu
:
:
Swizzle
&
swizzle
const
char
*
name
)
{
SkDEBUGFAIL
(
"
Trying
to
add
input
sampler
to
unsupported
backend
"
)
;
return
{
}
;
}
virtual
UniformHandle
internalAddUniformArray
(
const
GrProcessor
*
owner
uint32_t
visibility
SkSLType
type
const
char
*
name
bool
mangleName
int
arrayCount
const
char
*
*
outName
)
=
0
;
virtual
void
appendUniformDecls
(
GrShaderFlags
visibility
SkString
*
)
const
=
0
;
friend
class
GrGLSLProgramBuilder
;
}
;
#
endif
