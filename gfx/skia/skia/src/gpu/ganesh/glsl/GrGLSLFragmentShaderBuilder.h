#
ifndef
GrGLSLFragmentShaderBuilder_DEFINED
#
define
GrGLSLFragmentShaderBuilder_DEFINED
#
include
"
src
/
gpu
/
Blend
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrFragmentProcessor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrProcessor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLShaderBuilder
.
h
"
class
GrRenderTarget
;
class
GrGLSLVarying
;
class
GrGLSLFPFragmentBuilder
:
virtual
public
GrGLSLShaderBuilder
{
public
:
GrGLSLFPFragmentBuilder
(
)
:
GrGLSLShaderBuilder
(
nullptr
)
{
(
void
)
fPadding
;
}
enum
class
ScopeFlags
{
kTopLevel
=
0
kInsidePerPrimitiveBranch
=
(
1
<
<
0
)
kInsidePerPixelBranch
=
(
1
<
<
1
)
kInsideLoop
=
(
1
<
<
2
)
}
;
virtual
void
forceHighPrecision
(
)
=
0
;
virtual
const
char
*
dstColor
(
)
=
0
;
private
:
char
fPadding
[
4
]
=
{
}
;
}
;
GR_MAKE_BITFIELD_CLASS_OPS
(
GrGLSLFPFragmentBuilder
:
:
ScopeFlags
)
class
GrGLSLXPFragmentBuilder
:
virtual
public
GrGLSLShaderBuilder
{
public
:
GrGLSLXPFragmentBuilder
(
)
:
GrGLSLShaderBuilder
(
nullptr
)
{
}
virtual
bool
hasSecondaryOutput
(
)
const
=
0
;
virtual
const
char
*
dstColor
(
)
=
0
;
virtual
void
enableAdvancedBlendEquationIfNeeded
(
skgpu
:
:
BlendEquation
)
=
0
;
}
;
class
GrGLSLFragmentShaderBuilder
:
public
GrGLSLFPFragmentBuilder
public
GrGLSLXPFragmentBuilder
{
public
:
GrGLSLFragmentShaderBuilder
(
GrGLSLProgramBuilder
*
program
)
;
const
char
*
dstColor
(
)
override
;
void
forceHighPrecision
(
)
override
{
fForceHighPrecision
=
true
;
}
bool
hasSecondaryOutput
(
)
const
override
{
return
fHasSecondaryOutput
;
}
void
enableAdvancedBlendEquationIfNeeded
(
skgpu
:
:
BlendEquation
)
override
;
private
:
void
enableSecondaryOutput
(
)
;
const
char
*
getPrimaryColorOutputName
(
)
const
;
const
char
*
getSecondaryColorOutputName
(
)
const
;
bool
primaryColorOutputIsInOut
(
)
const
;
#
ifdef
SK_DEBUG
bool
fHasReadDstColorThisStage_DebugOnly
=
false
;
void
debugOnly_resetPerStageVerification
(
)
{
fHasReadDstColorThisStage_DebugOnly
=
false
;
}
#
endif
static
const
char
*
DeclaredColorOutputName
(
)
{
return
"
sk_FragColor
"
;
}
static
const
char
*
DeclaredSecondaryColorOutputName
(
)
{
return
"
fsSecondaryColorOut
"
;
}
GrSurfaceOrigin
getSurfaceOrigin
(
)
const
;
void
onFinalize
(
)
override
;
inline
static
constexpr
const
char
kDstColorName
[
]
=
"
_dstColor
"
;
bool
fPrimaryColorIsInOut
=
false
;
bool
fSetupFragPosition
=
false
;
bool
fHasSecondaryOutput
=
false
;
bool
fHasModifiedSampleMask
=
false
;
bool
fForceHighPrecision
=
false
;
friend
class
GrGLSLProgramBuilder
;
friend
class
GrGLProgramBuilder
;
friend
class
GrVkPipelineStateBuilder
;
}
;
#
endif
