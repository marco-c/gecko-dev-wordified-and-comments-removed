#
ifndef
GrGLSLProgramBuilder_DEFINED
#
define
GrGLSLProgramBuilder_DEFINED
#
include
"
src
/
gpu
/
ganesh
/
GrCaps
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrFragmentProcessor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrGeometryProcessor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrProgramInfo
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrXferProcessor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLFragmentShaderBuilder
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLProgramDataManager
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLUniformHandler
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLVertexGeoBuilder
.
h
"
#
include
"
src
/
sksl
/
SkSLCompiler
.
h
"
#
include
<
vector
>
class
GrProgramDesc
;
class
GrRenderTarget
;
class
GrShaderVar
;
class
GrGLSLVaryingHandler
;
class
SkString
;
struct
GrShaderCaps
;
class
GrGLSLProgramBuilder
{
public
:
using
UniformHandle
=
GrGLSLUniformHandler
:
:
UniformHandle
;
using
SamplerHandle
=
GrGLSLUniformHandler
:
:
SamplerHandle
;
virtual
~
GrGLSLProgramBuilder
(
)
;
virtual
const
GrCaps
*
caps
(
)
const
=
0
;
const
GrShaderCaps
*
shaderCaps
(
)
const
{
return
this
-
>
caps
(
)
-
>
shaderCaps
(
)
;
}
GrSurfaceOrigin
origin
(
)
const
{
return
fProgramInfo
.
origin
(
)
;
}
const
GrPipeline
&
pipeline
(
)
const
{
return
fProgramInfo
.
pipeline
(
)
;
}
const
GrGeometryProcessor
&
geometryProcessor
(
)
const
{
return
fProgramInfo
.
geomProc
(
)
;
}
bool
snapVerticesToPixelCenters
(
)
const
{
return
fProgramInfo
.
pipeline
(
)
.
snapVerticesToPixelCenters
(
)
;
}
bool
hasPointSize
(
)
const
{
return
fProgramInfo
.
primitiveType
(
)
=
=
GrPrimitiveType
:
:
kPoints
;
}
virtual
SkSL
:
:
Compiler
*
shaderCompiler
(
)
const
=
0
;
const
GrProgramDesc
&
desc
(
)
const
{
return
fDesc
;
}
void
appendUniformDecls
(
GrShaderFlags
visibility
SkString
*
)
const
;
const
char
*
samplerVariable
(
SamplerHandle
handle
)
const
{
return
this
-
>
uniformHandler
(
)
-
>
samplerVariable
(
handle
)
;
}
skgpu
:
:
Swizzle
samplerSwizzle
(
SamplerHandle
handle
)
const
{
return
this
-
>
uniformHandler
(
)
-
>
samplerSwizzle
(
handle
)
;
}
const
char
*
inputSamplerVariable
(
SamplerHandle
handle
)
const
{
return
this
-
>
uniformHandler
(
)
-
>
inputSamplerVariable
(
handle
)
;
}
skgpu
:
:
Swizzle
inputSamplerSwizzle
(
SamplerHandle
handle
)
const
{
return
this
-
>
uniformHandler
(
)
-
>
inputSamplerSwizzle
(
handle
)
;
}
void
addRTFlipUniform
(
const
char
*
name
)
;
SkString
nameVariable
(
char
prefix
const
char
*
name
bool
mangle
=
true
)
;
bool
fragmentProcessorHasCoordsParam
(
const
GrFragmentProcessor
*
)
;
virtual
GrGLSLUniformHandler
*
uniformHandler
(
)
=
0
;
virtual
const
GrGLSLUniformHandler
*
uniformHandler
(
)
const
=
0
;
virtual
GrGLSLVaryingHandler
*
varyingHandler
(
)
=
0
;
virtual
void
finalizeFragmentSecondaryColor
(
GrShaderVar
&
outputColor
)
{
}
static
const
int
kVarsPerBlock
;
GrGLSLVertexBuilder
fVS
;
GrGLSLFragmentShaderBuilder
fFS
;
const
GrProgramDesc
&
fDesc
;
const
GrProgramInfo
&
fProgramInfo
;
GrGLSLBuiltinUniformHandles
fUniformHandles
;
std
:
:
unique_ptr
<
GrGeometryProcessor
:
:
ProgramImpl
>
fGPImpl
;
std
:
:
unique_ptr
<
GrXferProcessor
:
:
ProgramImpl
>
fXPImpl
;
std
:
:
vector
<
std
:
:
unique_ptr
<
GrFragmentProcessor
:
:
ProgramImpl
>
>
fFPImpls
;
SamplerHandle
fDstTextureSamplerHandle
;
GrSurfaceOrigin
fDstTextureOrigin
;
protected
:
explicit
GrGLSLProgramBuilder
(
const
GrProgramDesc
&
const
GrProgramInfo
&
)
;
void
addFeature
(
GrShaderFlags
shaders
uint32_t
featureBit
const
char
*
extensionName
)
;
bool
emitAndInstallProcs
(
)
;
void
finalizeShaders
(
)
;
bool
fragColorIsInOut
(
)
const
{
return
fFS
.
primaryColorOutputIsInOut
(
)
;
}
private
:
void
advanceStage
(
)
{
fStageIndex
+
+
;
SkDEBUGCODE
(
fFS
.
debugOnly_resetPerStageVerification
(
)
;
)
fFS
.
nextStage
(
)
;
}
SkString
getMangleSuffix
(
)
const
;
void
nameExpression
(
SkString
*
const
char
*
baseName
)
;
bool
emitAndInstallPrimProc
(
SkString
*
outputColor
SkString
*
outputCoverage
)
;
bool
emitAndInstallDstTexture
(
)
;
bool
emitAndInstallFragProcs
(
SkString
*
colorInOut
SkString
*
coverageInOut
)
;
SkString
emitRootFragProc
(
const
GrFragmentProcessor
&
fp
GrFragmentProcessor
:
:
ProgramImpl
&
impl
const
SkString
&
input
SkString
output
)
;
void
writeChildFPFunctions
(
const
GrFragmentProcessor
&
fp
GrFragmentProcessor
:
:
ProgramImpl
&
impl
)
;
void
writeFPFunction
(
const
GrFragmentProcessor
&
fp
GrFragmentProcessor
:
:
ProgramImpl
&
impl
)
;
bool
emitAndInstallXferProc
(
const
SkString
&
colorIn
const
SkString
&
coverageIn
)
;
SamplerHandle
emitSampler
(
const
GrBackendFormat
&
GrSamplerState
const
skgpu
:
:
Swizzle
&
const
char
*
name
)
;
SamplerHandle
emitInputSampler
(
const
skgpu
:
:
Swizzle
&
swizzle
const
char
*
name
)
;
bool
checkSamplerCounts
(
)
;
#
ifdef
SK_DEBUG
void
verify
(
const
GrGeometryProcessor
&
)
;
void
verify
(
const
GrFragmentProcessor
&
)
;
void
verify
(
const
GrXferProcessor
&
)
;
#
endif
int
fNumFragmentSamplers
;
GrGeometryProcessor
:
:
ProgramImpl
:
:
FPCoordsMap
fFPCoordsMap
;
GrShaderVar
fLocalCoordsVar
;
int
fStageIndex
=
-
1
;
SkTArray
<
int
>
fSubstageIndices
;
}
;
#
endif
