#
include
"
src
/
gpu
/
ganesh
/
GrRenderTarget
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrShaderCaps
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLFragmentShaderBuilder
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLProgramBuilder
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLUniformHandler
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLVarying
.
h
"
GrGLSLFragmentShaderBuilder
:
:
GrGLSLFragmentShaderBuilder
(
GrGLSLProgramBuilder
*
program
)
:
GrGLSLShaderBuilder
(
program
)
{
}
const
char
*
GrGLSLFragmentShaderBuilder
:
:
dstColor
(
)
{
SkDEBUGCODE
(
fHasReadDstColorThisStage_DebugOnly
=
true
;
)
const
GrShaderCaps
*
shaderCaps
=
fProgramBuilder
-
>
shaderCaps
(
)
;
if
(
shaderCaps
-
>
fFBFetchSupport
)
{
this
-
>
addFeature
(
1
<
<
kFramebufferFetch_GLSLPrivateFeature
shaderCaps
-
>
fFBFetchExtensionString
)
;
const
char
*
fbFetchColorName
=
"
sk_LastFragColor
"
;
if
(
shaderCaps
-
>
fFBFetchNeedsCustomOutput
)
{
fPrimaryColorIsInOut
=
true
;
fbFetchColorName
=
DeclaredColorOutputName
(
)
;
this
-
>
codeAppendf
(
"
half4
%
s
=
%
s
;
"
kDstColorName
fbFetchColorName
)
;
}
else
{
return
fbFetchColorName
;
}
}
return
kDstColorName
;
}
void
GrGLSLFragmentShaderBuilder
:
:
enableAdvancedBlendEquationIfNeeded
(
skgpu
:
:
BlendEquation
equation
)
{
SkASSERT
(
skgpu
:
:
BlendEquationIsAdvanced
(
equation
)
)
;
if
(
fProgramBuilder
-
>
shaderCaps
(
)
-
>
mustEnableAdvBlendEqs
(
)
)
{
this
-
>
addFeature
(
1
<
<
kBlendEquationAdvanced_GLSLPrivateFeature
"
GL_KHR_blend_equation_advanced
"
)
;
this
-
>
addLayoutQualifier
(
"
blend_support_all_equations
"
kOut_InterfaceQualifier
)
;
}
}
void
GrGLSLFragmentShaderBuilder
:
:
enableSecondaryOutput
(
)
{
SkASSERT
(
!
fHasSecondaryOutput
)
;
fHasSecondaryOutput
=
true
;
const
GrShaderCaps
&
caps
=
*
fProgramBuilder
-
>
shaderCaps
(
)
;
if
(
const
char
*
extension
=
caps
.
fSecondaryOutputExtensionString
)
{
this
-
>
addFeature
(
1
<
<
kBlendFuncExtended_GLSLPrivateFeature
extension
)
;
}
if
(
caps
.
mustDeclareFragmentShaderOutput
(
)
)
{
fOutputs
.
emplace_back
(
DeclaredSecondaryColorOutputName
(
)
SkSLType
:
:
kHalf4
GrShaderVar
:
:
TypeModifier
:
:
Out
)
;
fProgramBuilder
-
>
finalizeFragmentSecondaryColor
(
fOutputs
.
back
(
)
)
;
}
}
const
char
*
GrGLSLFragmentShaderBuilder
:
:
getPrimaryColorOutputName
(
)
const
{
return
DeclaredColorOutputName
(
)
;
}
bool
GrGLSLFragmentShaderBuilder
:
:
primaryColorOutputIsInOut
(
)
const
{
return
fPrimaryColorIsInOut
;
}
const
char
*
GrGLSLFragmentShaderBuilder
:
:
getSecondaryColorOutputName
(
)
const
{
if
(
this
-
>
hasSecondaryOutput
(
)
)
{
return
(
fProgramBuilder
-
>
shaderCaps
(
)
-
>
mustDeclareFragmentShaderOutput
(
)
)
?
DeclaredSecondaryColorOutputName
(
)
:
"
sk_SecondaryFragColor
"
;
}
return
nullptr
;
}
GrSurfaceOrigin
GrGLSLFragmentShaderBuilder
:
:
getSurfaceOrigin
(
)
const
{
return
fProgramBuilder
-
>
origin
(
)
;
}
void
GrGLSLFragmentShaderBuilder
:
:
onFinalize
(
)
{
fProgramBuilder
-
>
varyingHandler
(
)
-
>
getFragDecls
(
&
this
-
>
inputs
(
)
&
this
-
>
outputs
(
)
)
;
}
