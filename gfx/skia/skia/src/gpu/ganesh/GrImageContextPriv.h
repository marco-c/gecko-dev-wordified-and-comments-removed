#
ifndef
GrImageContextPriv_DEFINED
#
define
GrImageContextPriv_DEFINED
#
include
"
include
/
private
/
gpu
/
ganesh
/
GrImageContext
.
h
"
#
include
"
include
/
gpu
/
GrContextThreadSafeProxy
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrBaseContextPriv
.
h
"
class
GrImageContextPriv
:
public
GrBaseContextPriv
{
public
:
GrImageContext
*
context
(
)
{
return
static_cast
<
GrImageContext
*
>
(
fContext
)
;
}
const
GrImageContext
*
context
(
)
const
{
return
static_cast
<
const
GrImageContext
*
>
(
fContext
)
;
}
bool
abandoned
(
)
{
return
this
-
>
context
(
)
-
>
abandoned
(
)
;
}
static
sk_sp
<
GrImageContext
>
MakeForPromiseImage
(
sk_sp
<
GrContextThreadSafeProxy
>
tsp
)
{
return
GrImageContext
:
:
MakeForPromiseImage
(
std
:
:
move
(
tsp
)
)
;
}
SkDEBUGCODE
(
skgpu
:
:
SingleOwner
*
singleOwner
(
)
const
{
return
this
-
>
context
(
)
-
>
singleOwner
(
)
;
}
)
protected
:
explicit
GrImageContextPriv
(
GrImageContext
*
iContext
)
:
GrBaseContextPriv
(
iContext
)
{
}
private
:
GrImageContextPriv
(
const
GrImageContextPriv
&
)
=
delete
;
GrImageContextPriv
&
operator
=
(
const
GrImageContextPriv
&
)
=
delete
;
const
GrImageContextPriv
*
operator
&
(
)
const
;
GrImageContextPriv
*
operator
&
(
)
;
friend
class
GrImageContext
;
using
INHERITED
=
GrBaseContextPriv
;
}
;
inline
GrImageContextPriv
GrImageContext
:
:
priv
(
)
{
return
GrImageContextPriv
(
this
)
;
}
inline
const
GrImageContextPriv
GrImageContext
:
:
priv
(
)
const
{
return
GrImageContextPriv
(
const_cast
<
GrImageContext
*
>
(
this
)
)
;
}
#
endif
