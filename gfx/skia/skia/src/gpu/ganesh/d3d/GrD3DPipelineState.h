#
ifndef
GrD3DPipelineState_DEFINED
#
define
GrD3DPipelineState_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
gpu
/
GrTypes
.
h
"
#
include
"
include
/
gpu
/
d3d
/
GrD3DTypes
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrBuffer
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrManagedResource
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
d3d
/
GrD3DPipelineStateDataManager
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLProgramBuilder
.
h
"
#
include
<
vector
>
class
GrD3DDirectCommandList
;
class
GrD3DGpu
;
class
GrD3DPipeline
;
class
GrD3DRootSignature
;
class
GrProgramInfo
;
class
GrD3DPipelineState
{
public
:
using
UniformInfoArray
=
GrD3DPipelineStateDataManager
:
:
UniformInfoArray
;
GrD3DPipelineState
(
sk_sp
<
GrD3DPipeline
>
pipeline
sk_sp
<
GrD3DRootSignature
>
rootSignature
const
GrGLSLBuiltinUniformHandles
&
builtinUniformHandles
const
UniformInfoArray
&
uniforms
uint32_t
uniformSize
uint32_t
numSamplers
std
:
:
unique_ptr
<
GrGeometryProcessor
:
:
ProgramImpl
>
gpImpl
std
:
:
unique_ptr
<
GrXferProcessor
:
:
ProgramImpl
>
xpImpl
std
:
:
vector
<
std
:
:
unique_ptr
<
GrFragmentProcessor
:
:
ProgramImpl
>
>
fpImpls
size_t
vertexStride
size_t
instanceStride
)
;
const
sk_sp
<
GrD3DPipeline
>
&
pipeline
(
)
const
{
return
fPipeline
;
}
const
sk_sp
<
GrD3DRootSignature
>
&
rootSignature
(
)
const
{
return
fRootSignature
;
}
void
setAndBindConstants
(
GrD3DGpu
*
const
GrRenderTarget
*
const
GrProgramInfo
&
)
;
void
setAndBindTextures
(
GrD3DGpu
*
const
GrGeometryProcessor
&
const
GrSurfaceProxy
*
const
geomProcTextures
[
]
const
GrPipeline
&
)
;
void
bindBuffers
(
GrD3DGpu
*
sk_sp
<
const
GrBuffer
>
indexBuffer
sk_sp
<
const
GrBuffer
>
instanceBuffer
sk_sp
<
const
GrBuffer
>
vertexBuffer
GrD3DDirectCommandList
*
commandList
)
;
void
markUniformsDirty
(
)
{
fDataManager
.
markDirty
(
)
;
}
private
:
struct
RenderTargetState
{
SkISize
fRenderTargetSize
;
GrSurfaceOrigin
fRenderTargetOrigin
;
RenderTargetState
(
)
{
this
-
>
invalidate
(
)
;
}
void
invalidate
(
)
{
fRenderTargetSize
.
fWidth
=
-
1
;
fRenderTargetSize
.
fHeight
=
-
1
;
fRenderTargetOrigin
=
(
GrSurfaceOrigin
)
-
1
;
}
}
;
void
setRenderTargetState
(
const
GrRenderTarget
*
GrSurfaceOrigin
)
;
sk_sp
<
GrD3DPipeline
>
fPipeline
;
sk_sp
<
GrD3DRootSignature
>
fRootSignature
;
RenderTargetState
fRenderTargetState
;
GrGLSLBuiltinUniformHandles
fBuiltinUniformHandles
;
std
:
:
unique_ptr
<
GrGeometryProcessor
:
:
ProgramImpl
>
fGPImpl
;
std
:
:
unique_ptr
<
GrXferProcessor
:
:
ProgramImpl
>
fXPImpl
;
std
:
:
vector
<
std
:
:
unique_ptr
<
GrFragmentProcessor
:
:
ProgramImpl
>
>
fFPImpls
;
GrD3DPipelineStateDataManager
fDataManager
;
unsigned
int
fNumSamplers
;
size_t
fVertexStride
;
size_t
fInstanceStride
;
}
;
#
endif
