#
ifndef
GrD3DCommandSignature_DEFINED
#
define
GrD3DCommandSignature_DEFINED
#
include
"
include
/
gpu
/
d3d
/
GrD3DTypes
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrManagedResource
.
h
"
class
GrD3DGpu
;
class
GrD3DCommandSignature
:
public
GrManagedResource
{
public
:
enum
class
ForIndexed
:
bool
{
kYes
=
true
kNo
=
false
}
;
static
sk_sp
<
GrD3DCommandSignature
>
Make
(
GrD3DGpu
*
gpu
ForIndexed
indexed
unsigned
int
slot
)
;
bool
isCompatible
(
ForIndexed
indexed
unsigned
int
slot
)
const
{
return
(
fIndexed
=
=
indexed
&
&
fSlot
=
=
slot
)
;
}
ID3D12CommandSignature
*
commandSignature
(
)
const
{
return
fCommandSignature
.
get
(
)
;
}
#
ifdef
SK_TRACE_MANAGED_RESOURCES
void
dumpInfo
(
)
const
override
{
SkDebugf
(
"
GrD3DCommandSignature
:
%
p
(
%
d
refs
)
\
n
"
fCommandSignature
.
get
(
)
this
-
>
getRefCnt
(
)
)
;
}
#
endif
private
:
GrD3DCommandSignature
(
gr_cp
<
ID3D12CommandSignature
>
commandSignature
ForIndexed
indexed
unsigned
int
slot
)
:
fCommandSignature
(
commandSignature
)
fIndexed
(
indexed
)
fSlot
(
slot
)
{
}
void
freeGPUData
(
)
const
override
{
}
gr_cp
<
ID3D12CommandSignature
>
fCommandSignature
;
ForIndexed
fIndexed
;
unsigned
int
fSlot
;
}
;
#
endif
