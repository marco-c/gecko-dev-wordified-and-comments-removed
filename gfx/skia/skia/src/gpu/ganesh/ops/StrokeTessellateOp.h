#
ifndef
StrokeTessellateOp_DEFINED
#
define
StrokeTessellateOp_DEFINED
#
include
"
include
/
core
/
SkStrokeRec
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
ops
/
GrDrawOp
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
tessellate
/
GrTessellationShader
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
tessellate
/
StrokeTessellator
.
h
"
class
GrRecordingContext
;
class
GrStrokeTessellationShader
;
namespace
skgpu
:
:
ganesh
{
class
StrokeTessellateOp
final
:
public
GrDrawOp
{
public
:
StrokeTessellateOp
(
GrAAType
const
SkMatrix
&
const
SkPath
&
const
SkStrokeRec
&
GrPaint
&
&
)
;
private
:
using
PatchAttribs
=
StrokeTessellator
:
:
PatchAttribs
;
using
PathStrokeList
=
StrokeTessellator
:
:
PathStrokeList
;
DEFINE_OP_CLASS_ID
SkStrokeRec
&
headStroke
(
)
{
return
fPathStrokeList
.
fStroke
;
}
SkPMColor4f
&
headColor
(
)
{
return
fPathStrokeList
.
fColor
;
}
bool
shouldUseDynamicStates
(
PatchAttribs
neededDynamicStates
)
const
{
constexpr
static
int
kMaxVerbsToEnableDynamicState
=
50
;
bool
anyStateDisabled
=
(
bool
)
(
~
fPatchAttribs
&
neededDynamicStates
)
;
bool
allStatesEnabled
=
!
anyStateDisabled
;
return
allStatesEnabled
|
|
(
fTotalCombinedVerbCnt
<
=
kMaxVerbsToEnableDynamicState
)
;
}
const
char
*
name
(
)
const
override
{
return
"
StrokeTessellateOp
"
;
}
void
visitProxies
(
const
GrVisitProxyFunc
&
)
const
override
;
bool
usesMSAA
(
)
const
override
{
return
fAAType
=
=
GrAAType
:
:
kMSAA
;
}
GrProcessorSet
:
:
Analysis
finalize
(
const
GrCaps
&
const
GrAppliedClip
*
GrClampType
)
override
;
bool
usesStencil
(
)
const
override
{
SkASSERT
(
fProcessors
.
isFinalized
(
)
)
;
return
fNeedsStencil
;
}
CombineResult
onCombineIfPossible
(
GrOp
*
SkArenaAlloc
*
const
GrCaps
&
)
override
;
void
prePrepareTessellator
(
GrTessellationShader
:
:
ProgramArgs
&
&
GrAppliedClip
&
&
)
;
void
onPrePrepare
(
GrRecordingContext
*
const
GrSurfaceProxyView
&
GrAppliedClip
*
const
GrDstProxyView
&
GrXferBarrierFlags
GrLoadOp
colorLoadOp
)
override
;
void
onPrepare
(
GrOpFlushState
*
)
override
;
void
onExecute
(
GrOpFlushState
*
const
SkRect
&
chainBounds
)
override
;
const
GrAAType
fAAType
;
const
SkMatrix
fViewMatrix
;
PatchAttribs
fPatchAttribs
=
PatchAttribs
:
:
kNone
;
PathStrokeList
fPathStrokeList
;
PathStrokeList
*
*
fPathStrokeTail
=
&
fPathStrokeList
.
fNext
;
int
fTotalCombinedVerbCnt
=
0
;
GrProcessorSet
fProcessors
;
bool
fNeedsStencil
;
StrokeTessellator
*
fTessellator
=
nullptr
;
GrStrokeTessellationShader
*
fTessellationShader
;
const
GrProgramInfo
*
fStencilProgram
=
nullptr
;
const
GrProgramInfo
*
fFillProgram
=
nullptr
;
}
;
}
#
endif
