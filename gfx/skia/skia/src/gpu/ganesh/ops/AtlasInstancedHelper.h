#
ifndef
AtlasInstancedHelper_DEFINED
#
define
AtlasInstancedHelper_DEFINED
#
include
"
src
/
core
/
SkIPoint16
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrGeometryProcessor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrSurfaceProxyView
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLUniformHandler
.
h
"
namespace
skgpu
:
:
ganesh
{
class
AtlasInstancedHelper
{
public
:
enum
class
ShaderFlags
{
kNone
=
0
kInvertCoverage
=
1
<
<
0
kCheckBounds
=
1
<
<
1
}
;
GR_DECL_BITFIELD_CLASS_OPS_FRIENDS
(
ShaderFlags
)
;
constexpr
static
int
kNumShaderFlags
=
2
;
AtlasInstancedHelper
(
GrSurfaceProxyView
atlasView
ShaderFlags
shaderFlags
)
:
fAtlasProxy
(
atlasView
.
detachProxy
(
)
)
fAtlasSwizzle
(
atlasView
.
swizzle
(
)
)
fShaderFlags
(
shaderFlags
)
{
SkASSERT
(
atlasView
.
origin
(
)
=
=
kTopLeft_GrSurfaceOrigin
)
;
}
GrSurfaceProxy
*
proxy
(
)
const
{
return
fAtlasProxy
.
get
(
)
;
}
const
skgpu
:
:
Swizzle
&
atlasSwizzle
(
)
const
{
return
fAtlasSwizzle
;
}
bool
isCompatible
(
const
AtlasInstancedHelper
&
helper
)
{
SkASSERT
(
fAtlasProxy
!
=
helper
.
fAtlasProxy
|
|
fAtlasSwizzle
=
=
helper
.
fAtlasSwizzle
)
;
return
fAtlasProxy
=
=
helper
.
fAtlasProxy
&
&
fShaderFlags
=
=
helper
.
fShaderFlags
;
}
void
getKeyBits
(
KeyBuilder
*
b
)
const
;
void
appendInstanceAttribs
(
SkTArray
<
GrGeometryProcessor
:
:
Attribute
>
*
instanceAttribs
)
const
;
struct
Instance
{
Instance
(
SkIPoint16
locationInAtlas
const
SkIRect
&
pathDevIBounds
bool
transposedInAtlas
)
:
fLocationInAtlas
(
locationInAtlas
)
fPathDevIBounds
(
pathDevIBounds
)
fTransposedInAtlas
(
transposedInAtlas
)
{
SkASSERT
(
fLocationInAtlas
.
x
(
)
>
=
0
)
;
SkASSERT
(
fLocationInAtlas
.
y
(
)
>
=
0
)
;
}
SkIPoint16
fLocationInAtlas
;
SkIRect
fPathDevIBounds
;
bool
fTransposedInAtlas
;
}
;
void
writeInstanceData
(
VertexWriter
*
instanceWriter
const
Instance
*
)
const
;
void
injectShaderCode
(
const
GrGeometryProcessor
:
:
ProgramImpl
:
:
EmitArgs
&
const
GrShaderVar
&
devCoord
GrGLSLUniformHandler
:
:
UniformHandle
*
atlasAdjustUniformHandle
)
const
;
void
setUniformData
(
const
GrGLSLProgramDataManager
&
const
GrGLSLUniformHandler
:
:
UniformHandle
&
atlasAdjustUniformHandle
)
const
;
private
:
const
sk_sp
<
GrSurfaceProxy
>
fAtlasProxy
;
const
skgpu
:
:
Swizzle
fAtlasSwizzle
;
const
ShaderFlags
fShaderFlags
;
}
;
GR_MAKE_BITFIELD_CLASS_OPS
(
AtlasInstancedHelper
:
:
ShaderFlags
)
}
#
endif
