#
ifndef
SmallPathAtlasMgr_DEFINED
#
define
SmallPathAtlasMgr_DEFINED
#
if
!
defined
(
SK_ENABLE_OPTIMIZE_SIZE
)
#
include
"
src
/
base
/
SkTInternalLList
.
h
"
#
include
"
src
/
core
/
SkTDynamicHash
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrDrawOpAtlas
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrOnFlushResourceProvider
.
h
"
class
GrStyledShape
;
namespace
skgpu
:
:
ganesh
{
class
SmallPathShapeData
;
class
SmallPathShapeDataKey
;
class
SmallPathAtlasMgr
final
:
public
GrOnFlushCallbackObject
public
skgpu
:
:
PlotEvictionCallback
public
skgpu
:
:
AtlasGenerationCounter
{
public
:
SmallPathAtlasMgr
(
)
;
~
SmallPathAtlasMgr
(
)
override
;
void
reset
(
)
;
bool
initAtlas
(
GrProxyProvider
*
const
GrCaps
*
)
;
SmallPathShapeData
*
findOrCreate
(
const
GrStyledShape
&
int
desiredDimension
)
;
SmallPathShapeData
*
findOrCreate
(
const
GrStyledShape
&
const
SkMatrix
&
ctm
)
;
GrDrawOpAtlas
:
:
ErrorCode
addToAtlas
(
GrResourceProvider
*
GrDeferredUploadTarget
*
int
width
int
height
const
void
*
image
skgpu
:
:
AtlasLocator
*
)
;
void
setUseToken
(
SmallPathShapeData
*
skgpu
:
:
AtlasToken
)
;
bool
preFlush
(
GrOnFlushResourceProvider
*
onFlushRP
)
override
{
#
if
GR_TEST_UTILS
if
(
onFlushRP
-
>
failFlushTimeCallbacks
(
)
)
{
return
false
;
}
#
endif
if
(
fAtlas
)
{
fAtlas
-
>
instantiate
(
onFlushRP
)
;
}
return
true
;
}
void
postFlush
(
skgpu
:
:
AtlasToken
startTokenForNextFlush
)
override
{
if
(
fAtlas
)
{
fAtlas
-
>
compact
(
startTokenForNextFlush
)
;
}
}
bool
retainOnFreeGpuResources
(
)
override
{
return
true
;
}
const
GrSurfaceProxyView
*
getViews
(
int
*
numActiveProxies
)
{
*
numActiveProxies
=
fAtlas
-
>
numActivePages
(
)
;
return
fAtlas
-
>
getViews
(
)
;
}
void
deleteCacheEntry
(
SmallPathShapeData
*
)
;
private
:
SmallPathShapeData
*
findOrCreate
(
const
SmallPathShapeDataKey
&
)
;
void
evict
(
skgpu
:
:
PlotLocator
)
override
;
using
ShapeCache
=
SkTDynamicHash
<
SmallPathShapeData
SmallPathShapeDataKey
>
;
typedef
SkTInternalLList
<
SmallPathShapeData
>
ShapeDataList
;
std
:
:
unique_ptr
<
GrDrawOpAtlas
>
fAtlas
;
ShapeCache
fShapeCache
;
ShapeDataList
fShapeList
;
}
;
}
#
endif
#
endif
