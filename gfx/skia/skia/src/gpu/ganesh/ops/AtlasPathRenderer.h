#
ifndef
AtlasPathRenderer_DEFINED
#
define
AtlasPathRenderer_DEFINED
#
include
"
include
/
gpu
/
GrTypes
.
h
"
#
include
"
src
/
core
/
SkIPoint16
.
h
"
#
include
"
src
/
core
/
SkTHash
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrDynamicAtlas
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrFragmentProcessor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrOnFlushResourceProvider
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
PathRenderer
.
h
"
class
GrOp
;
class
GrRecordingContext
;
namespace
skgpu
:
:
ganesh
{
class
AtlasRenderTask
;
class
AtlasPathRenderer
final
:
public
PathRenderer
public
GrOnFlushCallbackObject
{
public
:
static
bool
IsSupported
(
GrRecordingContext
*
)
;
static
sk_sp
<
AtlasPathRenderer
>
Make
(
GrRecordingContext
*
rContext
)
;
const
char
*
name
(
)
const
override
{
return
"
GrAtlasPathRenderer
"
;
}
GrFPResult
makeAtlasClipEffect
(
const
skgpu
:
:
ganesh
:
:
SurfaceDrawContext
*
const
GrOp
*
opBeingClipped
std
:
:
unique_ptr
<
GrFragmentProcessor
>
inputFP
const
SkIRect
&
drawBounds
const
SkMatrix
&
const
SkPath
&
)
;
private
:
AtlasPathRenderer
(
GrDirectContext
*
)
;
StencilSupport
onGetStencilSupport
(
const
GrStyledShape
&
)
const
override
{
return
kNoSupport_StencilSupport
;
}
CanDrawPath
onCanDrawPath
(
const
CanDrawPathArgs
&
)
const
override
;
bool
onDrawPath
(
const
DrawPathArgs
&
)
override
;
bool
pathFitsInAtlas
(
const
SkRect
&
pathDevBounds
GrAAType
fallbackAAType
)
const
;
using
DrawRefsAtlasCallback
=
std
:
:
function
<
bool
(
const
GrSurfaceProxy
*
atlasProxy
)
>
;
bool
addPathToAtlas
(
GrRecordingContext
*
const
SkMatrix
&
const
SkPath
&
const
SkRect
&
pathDevBounds
SkIRect
*
devIBounds
SkIPoint16
*
locationInAtlas
bool
*
transposedInAtlas
const
DrawRefsAtlasCallback
&
)
;
bool
preFlush
(
GrOnFlushResourceProvider
*
)
override
;
float
fAtlasMaxSize
=
0
;
float
fAtlasMaxPathWidth
=
0
;
int
fAtlasInitialSize
=
0
;
SkSTArray
<
4
sk_sp
<
AtlasRenderTask
>
>
fAtlasRenderTasks
;
struct
AtlasPathKey
{
void
set
(
const
SkMatrix
&
const
SkPath
&
)
;
bool
operator
=
=
(
const
AtlasPathKey
&
k
)
const
{
static_assert
(
sizeof
(
*
this
)
=
=
sizeof
(
uint32_t
)
*
8
)
;
return
!
memcmp
(
this
&
k
sizeof
(
*
this
)
)
;
}
uint32_t
fPathGenID
;
float
fAffineMatrix
[
6
]
;
uint32_t
fFillRule
;
}
;
SkTHashMap
<
AtlasPathKey
SkIPoint16
>
fAtlasPathCache
;
}
;
}
#
endif
