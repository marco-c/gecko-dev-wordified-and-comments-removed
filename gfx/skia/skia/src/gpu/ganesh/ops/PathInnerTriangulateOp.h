#
ifndef
PathInnerTriangulateOp_DEFINED
#
define
PathInnerTriangulateOp_DEFINED
#
if
!
defined
(
SK_ENABLE_OPTIMIZE_SIZE
)
#
include
"
src
/
gpu
/
ganesh
/
GrBuffer
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrGpuBuffer
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
geometry
/
GrInnerFanTriangulator
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
ops
/
FillPathFlags
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
ops
/
GrDrawOp
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
tessellate
/
GrTessellationShader
.
h
"
namespace
skgpu
:
:
ganesh
{
class
PathCurveTessellator
;
class
PathInnerTriangulateOp
final
:
public
GrDrawOp
{
private
:
DEFINE_OP_CLASS_ID
PathInnerTriangulateOp
(
const
SkMatrix
&
viewMatrix
const
SkPath
&
path
GrPaint
&
&
paint
GrAAType
aaType
FillPathFlags
pathFlags
const
SkRect
&
drawBounds
)
:
GrDrawOp
(
ClassID
(
)
)
fPathFlags
(
pathFlags
)
fViewMatrix
(
viewMatrix
)
fPath
(
path
)
fAAType
(
aaType
)
fColor
(
paint
.
getColor4f
(
)
)
fProcessors
(
std
:
:
move
(
paint
)
)
{
SkASSERT
(
!
fPath
.
isInverseFillType
(
)
)
;
this
-
>
setBounds
(
drawBounds
HasAABloat
:
:
kNo
IsHairline
:
:
kNo
)
;
}
const
char
*
name
(
)
const
override
{
return
"
PathInnerTriangulateOp
"
;
}
void
visitProxies
(
const
GrVisitProxyFunc
&
)
const
override
;
FixedFunctionFlags
fixedFunctionFlags
(
)
const
override
;
GrProcessorSet
:
:
Analysis
finalize
(
const
GrCaps
&
const
GrAppliedClip
*
GrClampType
)
override
;
void
pushFanStencilProgram
(
const
GrTessellationShader
:
:
ProgramArgs
&
const
GrPipeline
*
pipelineForStencils
const
GrUserStencilSettings
*
)
;
void
pushFanFillProgram
(
const
GrTessellationShader
:
:
ProgramArgs
&
const
GrUserStencilSettings
*
)
;
void
prePreparePrograms
(
const
GrTessellationShader
:
:
ProgramArgs
&
GrAppliedClip
&
&
)
;
void
onPrePrepare
(
GrRecordingContext
*
const
GrSurfaceProxyView
&
GrAppliedClip
*
const
GrDstProxyView
&
GrXferBarrierFlags
GrLoadOp
colorLoadOp
)
override
;
void
onPrepare
(
GrOpFlushState
*
)
override
;
void
onExecute
(
GrOpFlushState
*
const
SkRect
&
chainBounds
)
override
;
const
FillPathFlags
fPathFlags
;
const
SkMatrix
fViewMatrix
;
const
SkPath
fPath
;
const
GrAAType
fAAType
;
SkPMColor4f
fColor
;
GrProcessorSet
fProcessors
;
GrInnerFanTriangulator
*
fFanTriangulator
=
nullptr
;
GrTriangulator
:
:
Poly
*
fFanPolys
=
nullptr
;
GrInnerFanTriangulator
:
:
BreadcrumbTriangleList
fFanBreadcrumbs
;
const
GrPipeline
*
fPipelineForFills
=
nullptr
;
PathCurveTessellator
*
fTessellator
=
nullptr
;
const
GrProgramInfo
*
fStencilCurvesProgram
=
nullptr
;
SkSTArray
<
2
const
GrProgramInfo
*
>
fFanPrograms
;
const
GrProgramInfo
*
fCoverHullsProgram
=
nullptr
;
sk_sp
<
const
GrBuffer
>
fFanBuffer
;
int
fBaseFanVertex
=
0
;
int
fFanVertexCount
=
0
;
sk_sp
<
const
GrGpuBuffer
>
fHullVertexBufferIfNoIDSupport
;
friend
class
GrOp
;
}
;
}
#
endif
#
endif
