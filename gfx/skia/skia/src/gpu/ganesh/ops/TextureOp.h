#
ifndef
skgpu_ganesh_TextureOp_DEFINED
#
define
skgpu_ganesh_TextureOp_DEFINED
#
include
"
include
/
core
/
SkCanvas
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
private
/
gpu
/
ganesh
/
GrTypesPriv
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrColor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrSamplerState
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
ops
/
GrOp
.
h
"
struct
DrawQuad
;
class
GrClip
;
class
GrColorSpaceXform
;
class
GrDrawOp
;
class
GrTextureProxy
;
struct
GrTextureSetEntry
;
struct
SkRect
;
class
SkMatrix
;
namespace
skgpu
:
:
ganesh
{
class
SurfaceDrawContext
;
}
namespace
skgpu
:
:
ganesh
{
class
SurfaceDrawContext
;
class
TextureOp
{
public
:
enum
class
Saturate
:
bool
{
kNo
=
false
kYes
=
true
}
;
static
GrOp
:
:
Owner
Make
(
GrRecordingContext
*
GrSurfaceProxyView
SkAlphaType
srcAlphaType
sk_sp
<
GrColorSpaceXform
>
GrSamplerState
:
:
Filter
GrSamplerState
:
:
MipmapMode
const
SkPMColor4f
&
Saturate
SkBlendMode
GrAAType
DrawQuad
*
const
SkRect
*
subset
=
nullptr
)
;
static
void
AddTextureSetOps
(
skgpu
:
:
ganesh
:
:
SurfaceDrawContext
*
const
GrClip
*
GrRecordingContext
*
GrTextureSetEntry
[
]
int
cnt
int
proxyRunCnt
GrSamplerState
:
:
Filter
GrSamplerState
:
:
MipmapMode
Saturate
SkBlendMode
GrAAType
SkCanvas
:
:
SrcRectConstraint
const
SkMatrix
&
viewMatrix
sk_sp
<
GrColorSpaceXform
>
textureXform
)
;
#
if
GR_TEST_UTILS
static
uint32_t
ClassID
(
)
;
#
endif
private
:
class
BatchSizeLimiter
;
}
;
}
#
endif
