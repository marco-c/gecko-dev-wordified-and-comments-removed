#
ifndef
GrDrawOp_DEFINED
#
define
GrDrawOp_DEFINED
#
include
<
functional
>
#
include
"
src
/
core
/
SkAAClip
.
h
"
#
include
"
src
/
core
/
SkIPoint16
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrDeferredUpload
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrPipeline
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
ops
/
GrOp
.
h
"
class
GrAppliedClip
;
namespace
skgpu
{
namespace
ganesh
{
class
SurfaceDrawContext
;
}
}
class
GrShape
;
class
GrDrawOp
:
public
GrOp
{
public
:
GrDrawOp
(
uint32_t
classID
)
:
INHERITED
(
classID
)
{
}
virtual
bool
usesMSAA
(
)
const
{
return
this
-
>
fixedFunctionFlags
(
)
&
FixedFunctionFlags
:
:
kUsesHWAA
;
}
enum
class
ClipResult
{
kFail
kClippedGeometrically
kClippedInShader
kClippedOut
}
;
virtual
ClipResult
clipToShape
(
skgpu
:
:
ganesh
:
:
SurfaceDrawContext
*
SkClipOp
const
SkMatrix
&
const
GrShape
&
GrAA
)
{
return
ClipResult
:
:
kFail
;
}
virtual
GrProcessorSet
:
:
Analysis
finalize
(
const
GrCaps
&
const
GrAppliedClip
*
GrClampType
)
=
0
;
virtual
bool
usesStencil
(
)
const
{
return
this
-
>
fixedFunctionFlags
(
)
&
FixedFunctionFlags
:
:
kUsesStencil
;
}
#
ifdef
SK_DEBUG
bool
fAddDrawOpCalled
=
false
;
void
validate
(
)
const
override
{
SkASSERT
(
fAddDrawOpCalled
)
;
}
#
endif
#
if
GR_TEST_UTILS
virtual
int
numQuads
(
)
const
{
return
-
1
;
}
#
endif
protected
:
enum
class
FixedFunctionFlags
:
uint32_t
{
kNone
=
0x0
kUsesHWAA
=
0x1
kUsesStencil
=
0x2
}
;
GR_DECL_BITFIELD_CLASS_OPS_FRIENDS
(
FixedFunctionFlags
)
;
virtual
FixedFunctionFlags
fixedFunctionFlags
(
)
const
{
SK_ABORT
(
"
fixedFunctionFlags
(
)
not
implemented
.
"
)
;
}
private
:
friend
class
GrSimpleMeshDrawOpHelper
;
friend
class
GrSimpleMeshDrawOpHelperWithStencil
;
using
INHERITED
=
GrOp
;
}
;
GR_MAKE_BITFIELD_CLASS_OPS
(
GrDrawOp
:
:
FixedFunctionFlags
)
#
endif
