#
ifndef
GrDstProxyView_DEFINED
#
define
GrDstProxyView_DEFINED
#
include
"
include
/
gpu
/
GrTypes
.
h
"
#
include
"
include
/
private
/
gpu
/
ganesh
/
GrTypesPriv
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrSurfaceProxyView
.
h
"
class
GrDstProxyView
{
public
:
GrDstProxyView
(
)
{
}
GrDstProxyView
(
const
GrDstProxyView
&
other
)
{
*
this
=
other
;
}
GrDstProxyView
&
operator
=
(
const
GrDstProxyView
&
other
)
{
fProxyView
=
other
.
fProxyView
;
fOffset
=
other
.
fOffset
;
fDstSampleFlags
=
other
.
fDstSampleFlags
;
return
*
this
;
}
bool
operator
=
=
(
const
GrDstProxyView
&
that
)
const
{
return
fProxyView
=
=
that
.
fProxyView
&
&
fOffset
=
=
that
.
fOffset
&
&
fDstSampleFlags
=
=
that
.
fDstSampleFlags
;
}
bool
operator
!
=
(
const
GrDstProxyView
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
const
SkIPoint
&
offset
(
)
const
{
return
fOffset
;
}
void
setOffset
(
const
SkIPoint
&
offset
)
{
fOffset
=
offset
;
}
void
setOffset
(
int
ox
int
oy
)
{
fOffset
.
set
(
ox
oy
)
;
}
GrSurfaceProxy
*
proxy
(
)
const
{
return
fProxyView
.
proxy
(
)
;
}
const
GrSurfaceProxyView
&
proxyView
(
)
const
{
return
fProxyView
;
}
void
setProxyView
(
GrSurfaceProxyView
view
)
{
fProxyView
=
std
:
:
move
(
view
)
;
if
(
!
fProxyView
.
proxy
(
)
)
{
fOffset
=
{
0
0
}
;
}
}
GrDstSampleFlags
dstSampleFlags
(
)
const
{
return
fDstSampleFlags
;
}
void
setDstSampleFlags
(
GrDstSampleFlags
dstSampleFlags
)
{
fDstSampleFlags
=
dstSampleFlags
;
}
using
sk_is_trivially_relocatable
=
std
:
:
true_type
;
private
:
GrSurfaceProxyView
fProxyView
;
SkIPoint
fOffset
=
{
0
0
}
;
GrDstSampleFlags
fDstSampleFlags
=
GrDstSampleFlags
:
:
kNone
;
static_assert
(
:
:
sk_is_trivially_relocatable
<
decltype
(
fProxyView
)
>
:
:
value
)
;
static_assert
(
:
:
sk_is_trivially_relocatable
<
decltype
(
fOffset
)
>
:
:
value
)
;
static_assert
(
:
:
sk_is_trivially_relocatable
<
decltype
(
fDstSampleFlags
)
>
:
:
value
)
;
}
;
#
endif
