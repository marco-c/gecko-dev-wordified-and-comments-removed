#
ifndef
SkGr_DEFINED
#
define
SkGr_DEFINED
#
include
"
include
/
core
/
SkBlendMode
.
h
"
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkColorPriv
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSamplingOptions
.
h
"
#
include
"
include
/
core
/
SkTileMode
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
gpu
/
GpuTypes
.
h
"
#
include
"
include
/
gpu
/
GrTypes
.
h
"
#
include
"
include
/
private
/
SkColorData
.
h
"
#
include
"
src
/
gpu
/
Blend
.
h
"
#
include
"
src
/
gpu
/
SkBackingFit
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrColor
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrSamplerState
.
h
"
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
string_view
>
#
include
<
tuple
>
class
GrColorInfo
;
class
GrFragmentProcessor
;
class
GrPaint
;
class
GrRecordingContext
;
class
GrSurfaceProxy
;
class
GrSurfaceProxyView
;
class
SkBitmap
;
class
SkBlender
;
class
SkIDChangeListener
;
class
SkMatrix
;
class
SkPaint
;
class
SkSurfaceProps
;
enum
class
GrColorType
;
struct
SkIRect
;
namespace
skgpu
{
class
UniqueKey
;
}
static
inline
GrColor
SkColorToPremulGrColor
(
SkColor
c
)
{
SkPMColor
pm
=
SkPreMultiplyColor
(
c
)
;
unsigned
r
=
SkGetPackedR32
(
pm
)
;
unsigned
g
=
SkGetPackedG32
(
pm
)
;
unsigned
b
=
SkGetPackedB32
(
pm
)
;
unsigned
a
=
SkGetPackedA32
(
pm
)
;
return
GrColorPackRGBA
(
r
g
b
a
)
;
}
static
inline
GrColor
SkColorToUnpremulGrColor
(
SkColor
c
)
{
unsigned
r
=
SkColorGetR
(
c
)
;
unsigned
g
=
SkColorGetG
(
c
)
;
unsigned
b
=
SkColorGetB
(
c
)
;
unsigned
a
=
SkColorGetA
(
c
)
;
return
GrColorPackRGBA
(
r
g
b
a
)
;
}
SkPMColor4f
SkColorToPMColor4f
(
SkColor
const
GrColorInfo
&
)
;
SkColor4f
SkColor4fPrepForDst
(
SkColor4f
const
GrColorInfo
&
)
;
static
constexpr
GrSamplerState
:
:
WrapMode
SkTileModeToWrapMode
(
SkTileMode
tileMode
)
{
switch
(
tileMode
)
{
case
SkTileMode
:
:
kClamp
:
return
GrSamplerState
:
:
WrapMode
:
:
kClamp
;
case
SkTileMode
:
:
kDecal
:
return
GrSamplerState
:
:
WrapMode
:
:
kClampToBorder
;
case
SkTileMode
:
:
kMirror
:
return
GrSamplerState
:
:
WrapMode
:
:
kMirrorRepeat
;
case
SkTileMode
:
:
kRepeat
:
return
GrSamplerState
:
:
WrapMode
:
:
kRepeat
;
}
SkUNREACHABLE
;
}
bool
SkPaintToGrPaint
(
GrRecordingContext
*
const
GrColorInfo
&
dstColorInfo
const
SkPaint
&
skPaint
const
SkMatrix
&
ctm
const
SkSurfaceProps
&
surfaceProps
GrPaint
*
grPaint
)
;
bool
SkPaintToGrPaintReplaceShader
(
GrRecordingContext
*
const
GrColorInfo
&
dstColorInfo
const
SkPaint
&
skPaint
const
SkMatrix
&
ctm
std
:
:
unique_ptr
<
GrFragmentProcessor
>
shaderFP
const
SkSurfaceProps
&
surfaceProps
GrPaint
*
grPaint
)
;
bool
SkPaintToGrPaintWithBlend
(
GrRecordingContext
*
context
const
GrColorInfo
&
dstColorInfo
const
SkPaint
&
skPaint
const
SkMatrix
&
ctm
SkBlender
*
primColorBlender
const
SkSurfaceProps
&
surfaceProps
GrPaint
*
grPaint
)
;
static_assert
(
(
int
)
skgpu
:
:
BlendCoeff
:
:
kZero
=
=
(
int
)
SkBlendModeCoeff
:
:
kZero
)
;
static_assert
(
(
int
)
skgpu
:
:
BlendCoeff
:
:
kOne
=
=
(
int
)
SkBlendModeCoeff
:
:
kOne
)
;
static_assert
(
(
int
)
skgpu
:
:
BlendCoeff
:
:
kSC
=
=
(
int
)
SkBlendModeCoeff
:
:
kSC
)
;
static_assert
(
(
int
)
skgpu
:
:
BlendCoeff
:
:
kISC
=
=
(
int
)
SkBlendModeCoeff
:
:
kISC
)
;
static_assert
(
(
int
)
skgpu
:
:
BlendCoeff
:
:
kDC
=
=
(
int
)
SkBlendModeCoeff
:
:
kDC
)
;
static_assert
(
(
int
)
skgpu
:
:
BlendCoeff
:
:
kIDC
=
=
(
int
)
SkBlendModeCoeff
:
:
kIDC
)
;
static_assert
(
(
int
)
skgpu
:
:
BlendCoeff
:
:
kSA
=
=
(
int
)
SkBlendModeCoeff
:
:
kSA
)
;
static_assert
(
(
int
)
skgpu
:
:
BlendCoeff
:
:
kISA
=
=
(
int
)
SkBlendModeCoeff
:
:
kISA
)
;
static_assert
(
(
int
)
skgpu
:
:
BlendCoeff
:
:
kDA
=
=
(
int
)
SkBlendModeCoeff
:
:
kDA
)
;
static_assert
(
(
int
)
skgpu
:
:
BlendCoeff
:
:
kIDA
=
=
(
int
)
SkBlendModeCoeff
:
:
kIDA
)
;
enum
class
GrImageTexGenPolicy
:
int
{
kDraw
kNew_Uncached_Unbudgeted
kNew_Uncached_Budgeted
}
;
sk_sp
<
GrSurfaceProxy
>
GrCopyBaseMipMapToTextureProxy
(
GrRecordingContext
*
sk_sp
<
GrSurfaceProxy
>
baseProxy
GrSurfaceOrigin
origin
std
:
:
string_view
label
skgpu
:
:
Budgeted
=
skgpu
:
:
Budgeted
:
:
kYes
)
;
GrSurfaceProxyView
GrCopyBaseMipMapToView
(
GrRecordingContext
*
GrSurfaceProxyView
skgpu
:
:
Budgeted
=
skgpu
:
:
Budgeted
:
:
kYes
)
;
std
:
:
tuple
<
GrSurfaceProxyView
GrColorType
>
GrMakeCachedBitmapProxyView
(
GrRecordingContext
*
const
SkBitmap
&
std
:
:
string_view
label
GrMipmapped
=
GrMipmapped
:
:
kNo
)
;
std
:
:
tuple
<
GrSurfaceProxyView
GrColorType
>
GrMakeUncachedBitmapProxyView
(
GrRecordingContext
*
const
SkBitmap
&
GrMipmapped
=
GrMipmapped
:
:
kNo
SkBackingFit
=
SkBackingFit
:
:
kExact
skgpu
:
:
Budgeted
=
skgpu
:
:
Budgeted
:
:
kYes
)
;
void
GrMakeKeyFromImageID
(
skgpu
:
:
UniqueKey
*
key
uint32_t
imageID
const
SkIRect
&
imageBounds
)
;
sk_sp
<
SkIDChangeListener
>
GrMakeUniqueKeyInvalidationListener
(
skgpu
:
:
UniqueKey
*
uint32_t
contextID
)
;
static
inline
bool
GrValidCubicResampler
(
SkCubicResampler
cubic
)
{
return
cubic
.
B
>
=
0
&
&
cubic
.
C
>
=
0
;
}
#
endif
