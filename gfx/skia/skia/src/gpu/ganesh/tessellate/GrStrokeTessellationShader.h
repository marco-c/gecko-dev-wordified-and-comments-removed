#
ifndef
GrStrokeTessellationShader_DEFINED
#
define
GrStrokeTessellationShader_DEFINED
#
include
"
src
/
gpu
/
ganesh
/
tessellate
/
GrTessellationShader
.
h
"
#
include
"
include
/
core
/
SkStrokeRec
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLVarying
.
h
"
#
include
"
src
/
gpu
/
tessellate
/
Tessellation
.
h
"
class
GrStrokeTessellationShader
:
public
GrTessellationShader
{
using
PatchAttribs
=
skgpu
:
:
tess
:
:
PatchAttribs
;
public
:
GrStrokeTessellationShader
(
const
GrShaderCaps
&
PatchAttribs
const
SkMatrix
&
viewMatrix
const
SkStrokeRec
&
SkPMColor4f
)
;
PatchAttribs
attribs
(
)
const
{
return
fPatchAttribs
;
}
bool
hasDynamicStroke
(
)
const
{
return
fPatchAttribs
&
PatchAttribs
:
:
kStrokeParams
;
}
bool
hasDynamicColor
(
)
const
{
return
fPatchAttribs
&
PatchAttribs
:
:
kColor
;
}
bool
hasExplicitCurveType
(
)
const
{
return
fPatchAttribs
&
PatchAttribs
:
:
kExplicitCurveType
;
}
const
SkStrokeRec
&
stroke
(
)
const
{
return
fStroke
;
}
private
:
const
char
*
name
(
)
const
override
{
return
"
GrStrokeTessellationShader
"
;
}
void
addToKey
(
const
GrShaderCaps
&
skgpu
:
:
KeyBuilder
*
)
const
override
;
std
:
:
unique_ptr
<
ProgramImpl
>
makeProgramImpl
(
const
GrShaderCaps
&
)
const
final
;
const
PatchAttribs
fPatchAttribs
;
const
SkStrokeRec
fStroke
;
constexpr
static
int
kMaxAttribCount
=
6
;
SkSTArray
<
kMaxAttribCount
Attribute
>
fAttribs
;
class
Impl
;
}
;
#
endif
