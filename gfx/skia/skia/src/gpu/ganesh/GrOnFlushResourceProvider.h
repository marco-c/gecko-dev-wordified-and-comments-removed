#
ifndef
GrOnFlushResourceProvider_DEFINED
#
define
GrOnFlushResourceProvider_DEFINED
#
include
"
include
/
core
/
SkSpan
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrDeferredUpload
.
h
"
class
GrCaps
;
class
GrDrawingManager
;
class
GrOnFlushResourceProvider
;
class
GrSurfaceProxy
;
class
GrOnFlushCallbackObject
{
public
:
virtual
~
GrOnFlushCallbackObject
(
)
{
}
virtual
bool
preFlush
(
GrOnFlushResourceProvider
*
)
=
0
;
virtual
void
postFlush
(
skgpu
:
:
AtlasToken
startTokenForNextFlush
)
{
}
virtual
bool
retainOnFreeGpuResources
(
)
{
return
false
;
}
}
;
class
GrOnFlushResourceProvider
{
public
:
explicit
GrOnFlushResourceProvider
(
GrDrawingManager
*
drawingMgr
)
:
fDrawingMgr
(
drawingMgr
)
{
}
bool
SK_WARN_UNUSED_RESULT
instantiateProxy
(
GrSurfaceProxy
*
)
;
const
GrCaps
*
caps
(
)
const
;
#
if
GR_TEST_UTILS
bool
failFlushTimeCallbacks
(
)
const
;
#
endif
private
:
GrOnFlushResourceProvider
(
const
GrOnFlushResourceProvider
&
)
=
delete
;
GrOnFlushResourceProvider
&
operator
=
(
const
GrOnFlushResourceProvider
&
)
=
delete
;
GrDrawingManager
*
fDrawingMgr
;
}
;
#
endif
