#
include
"
include
/
private
/
SkSpinlock
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrMemoryPool
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrProcessor
.
h
"
#
include
<
memory
>
namespace
{
#
if
!
defined
(
SK_BUILD_FOR_ANDROID_FRAMEWORK
)
static
SkSpinlock
gProcessorSpinlock
;
#
endif
class
MemoryPoolAccessor
{
public
:
#
if
defined
(
SK_BUILD_FOR_ANDROID_FRAMEWORK
)
MemoryPoolAccessor
(
)
{
}
~
MemoryPoolAccessor
(
)
{
}
#
else
MemoryPoolAccessor
(
)
{
gProcessorSpinlock
.
acquire
(
)
;
}
~
MemoryPoolAccessor
(
)
{
gProcessorSpinlock
.
release
(
)
;
}
#
endif
GrMemoryPool
*
pool
(
)
const
{
static
GrMemoryPool
*
gPool
=
GrMemoryPool
:
:
Make
(
4096
4096
)
.
release
(
)
;
return
gPool
;
}
}
;
}
void
*
GrProcessor
:
:
operator
new
(
size_t
size
)
{
return
MemoryPoolAccessor
(
)
.
pool
(
)
-
>
allocate
(
size
)
;
}
void
*
GrProcessor
:
:
operator
new
(
size_t
object_size
size_t
footer_size
)
{
return
MemoryPoolAccessor
(
)
.
pool
(
)
-
>
allocate
(
object_size
+
footer_size
)
;
}
void
GrProcessor
:
:
operator
delete
(
void
*
target
)
{
return
MemoryPoolAccessor
(
)
.
pool
(
)
-
>
release
(
target
)
;
}
