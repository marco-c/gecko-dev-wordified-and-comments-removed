#
ifndef
GrRingBuffer_DEFINED
#
define
GrRingBuffer_DEFINED
#
include
"
src
/
gpu
/
ganesh
/
GrGpuBuffer
.
h
"
#
include
<
vector
>
class
GrGpu
;
class
GrRingBuffer
{
public
:
GrRingBuffer
(
GrGpu
*
gpu
size_t
size
size_t
alignment
GrGpuBufferType
intendedType
)
:
fGpu
(
gpu
)
fTotalSize
(
size
)
fAlignment
(
alignment
)
fType
(
intendedType
)
fNewAllocation
(
false
)
fHead
(
0
)
fTail
(
0
)
fGenID
(
0
)
{
SkASSERT
(
SkIsPow2
(
size
)
)
;
}
struct
Slice
{
GrGpuBuffer
*
fBuffer
;
size_t
fOffset
;
}
;
Slice
suballocate
(
size_t
size
)
;
void
startSubmit
(
GrGpu
*
)
;
size_t
size
(
)
const
{
return
fTotalSize
;
}
private
:
size_t
getAllocationOffset
(
size_t
size
)
;
struct
SubmitData
{
GrRingBuffer
*
fOwner
;
size_t
fLastHead
;
size_t
fGenID
;
}
;
static
void
FinishSubmit
(
void
*
)
;
GrGpu
*
fGpu
;
sk_sp
<
GrGpuBuffer
>
fCurrentBuffer
;
std
:
:
vector
<
sk_sp
<
GrGpuBuffer
>
>
fPreviousBuffers
;
size_t
fTotalSize
;
size_t
fAlignment
;
GrGpuBufferType
fType
;
bool
fNewAllocation
;
size_t
fHead
;
size_t
fTail
;
uint64_t
fGenID
;
}
;
#
endif
