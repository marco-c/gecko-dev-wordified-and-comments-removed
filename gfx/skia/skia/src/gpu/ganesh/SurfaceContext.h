#
ifndef
SurfaceContext_DEFINED
#
define
SurfaceContext_DEFINED
#
include
"
include
/
core
/
SkImage
.
h
"
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSamplingOptions
.
h
"
#
include
"
include
/
core
/
SkSurface
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrColorInfo
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrDataUtils
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrImageInfo
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrPixmap
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrRenderTargetProxy
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrRenderTask
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrSurfaceProxy
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrSurfaceProxyView
.
h
"
class
GrDrawingManager
;
class
GrRecordingContext
;
class
GrRenderTargetProxy
;
class
GrSurface
;
class
GrSurfaceProxy
;
class
GrTextureProxy
;
struct
SkIPoint
;
struct
SkIRect
;
namespace
skgpu
{
class
SingleOwner
;
}
namespace
skgpu
:
:
ganesh
{
class
SurfaceFillContext
;
class
SurfaceContext
{
public
:
SurfaceContext
(
GrRecordingContext
*
GrSurfaceProxyView
readView
const
GrColorInfo
&
)
;
virtual
~
SurfaceContext
(
)
=
default
;
GrRecordingContext
*
recordingContext
(
)
const
{
return
fContext
;
}
const
GrColorInfo
&
colorInfo
(
)
const
{
return
fColorInfo
;
}
GrImageInfo
imageInfo
(
)
const
{
return
{
fColorInfo
fReadView
.
proxy
(
)
-
>
dimensions
(
)
}
;
}
GrSurfaceOrigin
origin
(
)
const
{
return
fReadView
.
origin
(
)
;
}
skgpu
:
:
Swizzle
readSwizzle
(
)
const
{
return
fReadView
.
swizzle
(
)
;
}
GrSurfaceProxyView
readSurfaceView
(
)
{
return
fReadView
;
}
SkISize
dimensions
(
)
const
{
return
fReadView
.
dimensions
(
)
;
}
int
width
(
)
const
{
return
fReadView
.
proxy
(
)
-
>
width
(
)
;
}
int
height
(
)
const
{
return
fReadView
.
proxy
(
)
-
>
height
(
)
;
}
GrMipmapped
mipmapped
(
)
const
{
return
fReadView
.
mipmapped
(
)
;
}
const
GrCaps
*
caps
(
)
const
;
bool
readPixels
(
GrDirectContext
*
dContext
GrPixmap
dst
SkIPoint
srcPt
)
;
using
ReadPixelsCallback
=
SkImage
:
:
ReadPixelsCallback
;
using
ReadPixelsContext
=
SkImage
:
:
ReadPixelsContext
;
using
RescaleGamma
=
SkImage
:
:
RescaleGamma
;
using
RescaleMode
=
SkImage
:
:
RescaleMode
;
void
asyncRescaleAndReadPixels
(
GrDirectContext
*
const
SkImageInfo
&
info
const
SkIRect
&
srcRect
RescaleGamma
rescaleGamma
RescaleMode
ReadPixelsCallback
callback
ReadPixelsContext
callbackContext
)
;
void
asyncRescaleAndReadPixelsYUV420
(
GrDirectContext
*
SkYUVColorSpace
yuvColorSpace
sk_sp
<
SkColorSpace
>
dstColorSpace
const
SkIRect
&
srcRect
SkISize
dstSize
RescaleGamma
rescaleGamma
RescaleMode
ReadPixelsCallback
callback
ReadPixelsContext
context
)
;
bool
writePixels
(
GrDirectContext
*
dContext
GrCPixmap
src
SkIPoint
dstPt
)
;
bool
writePixels
(
GrDirectContext
*
dContext
const
GrCPixmap
src
[
]
int
numLevels
)
;
GrSurfaceProxy
*
asSurfaceProxy
(
)
{
return
fReadView
.
proxy
(
)
;
}
const
GrSurfaceProxy
*
asSurfaceProxy
(
)
const
{
return
fReadView
.
proxy
(
)
;
}
sk_sp
<
GrSurfaceProxy
>
asSurfaceProxyRef
(
)
{
return
fReadView
.
refProxy
(
)
;
}
GrTextureProxy
*
asTextureProxy
(
)
{
return
fReadView
.
asTextureProxy
(
)
;
}
const
GrTextureProxy
*
asTextureProxy
(
)
const
{
return
fReadView
.
asTextureProxy
(
)
;
}
sk_sp
<
GrTextureProxy
>
asTextureProxyRef
(
)
{
return
fReadView
.
asTextureProxyRef
(
)
;
}
GrRenderTargetProxy
*
asRenderTargetProxy
(
)
{
return
fReadView
.
asRenderTargetProxy
(
)
;
}
const
GrRenderTargetProxy
*
asRenderTargetProxy
(
)
const
{
return
fReadView
.
asRenderTargetProxy
(
)
;
}
sk_sp
<
GrRenderTargetProxy
>
asRenderTargetProxyRef
(
)
{
return
fReadView
.
asRenderTargetProxyRef
(
)
;
}
virtual
SurfaceFillContext
*
asFillContext
(
)
{
return
nullptr
;
}
std
:
:
unique_ptr
<
SurfaceFillContext
>
rescale
(
const
GrImageInfo
&
info
GrSurfaceOrigin
SkIRect
srcRect
SkImage
:
:
RescaleGamma
SkImage
:
:
RescaleMode
)
;
bool
rescaleInto
(
SurfaceFillContext
*
dst
SkIRect
dstRect
SkIRect
srcRect
SkImage
:
:
RescaleGamma
SkImage
:
:
RescaleMode
)
;
#
if
GR_TEST_UTILS
bool
testCopy
(
sk_sp
<
GrSurfaceProxy
>
src
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
{
return
this
-
>
copy
(
std
:
:
move
(
src
)
srcRect
dstPoint
)
!
=
nullptr
;
}
bool
testCopy
(
sk_sp
<
GrSurfaceProxy
>
src
)
{
auto
rect
=
SkIRect
:
:
MakeSize
(
src
-
>
dimensions
(
)
)
;
return
this
-
>
copy
(
std
:
:
move
(
src
)
rect
{
0
0
}
)
!
=
nullptr
;
}
#
endif
protected
:
GrDrawingManager
*
drawingManager
(
)
;
const
GrDrawingManager
*
drawingManager
(
)
const
;
SkDEBUGCODE
(
void
validate
(
)
const
;
)
SkDEBUGCODE
(
skgpu
:
:
SingleOwner
*
singleOwner
(
)
const
;
)
GrRecordingContext
*
fContext
;
GrSurfaceProxyView
fReadView
;
struct
PixelTransferResult
{
using
ConversionFn
=
void
(
void
*
dst
const
void
*
mappedBuffer
)
;
sk_sp
<
GrGpuBuffer
>
fTransferBuffer
;
std
:
:
function
<
ConversionFn
>
fPixelConverter
;
}
;
PixelTransferResult
transferPixels
(
GrColorType
colorType
const
SkIRect
&
rect
)
;
void
asyncReadPixels
(
GrDirectContext
*
const
SkIRect
&
srcRect
SkColorType
ReadPixelsCallback
ReadPixelsContext
)
;
private
:
friend
class
:
:
GrRecordingContextPriv
;
friend
class
:
:
GrSurfaceProxy
;
SkDEBUGCODE
(
virtual
void
onValidate
(
)
const
{
}
)
sk_sp
<
GrRenderTask
>
copy
(
sk_sp
<
GrSurfaceProxy
>
src
SkIRect
srcRect
SkIPoint
dstPoint
)
;
sk_sp
<
GrRenderTask
>
copyScaled
(
sk_sp
<
GrSurfaceProxy
>
src
SkIRect
srcRect
SkIRect
dstRect
GrSamplerState
:
:
Filter
filterMode
)
;
bool
internalWritePixels
(
GrDirectContext
*
dContext
const
GrCPixmap
src
[
]
int
numLevels
SkIPoint
)
;
GrColorInfo
fColorInfo
;
using
INHERITED
=
SkRefCnt
;
}
;
}
#
endif
