#
ifndef
GrVkPipelineStateDataManager_DEFINED
#
define
GrVkPipelineStateDataManager_DEFINED
#
include
"
src
/
gpu
/
ganesh
/
GrUniformDataManager
.
h
"
#
include
"
include
/
gpu
/
vk
/
GrVkTypes
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
vk
/
GrVkUniformHandler
.
h
"
class
GrGpuBuffer
;
class
GrVkCommandBuffer
;
class
GrVkGpu
;
class
GrVkPipelineStateDataManager
:
public
GrUniformDataManager
{
public
:
typedef
GrVkUniformHandler
:
:
UniformInfoArray
UniformInfoArray
;
GrVkPipelineStateDataManager
(
const
UniformInfoArray
&
uint32_t
uniformSize
bool
usePushConstants
)
;
std
:
:
pair
<
sk_sp
<
GrGpuBuffer
>
bool
>
uploadUniforms
(
GrVkGpu
*
gpu
VkPipelineLayout
GrVkCommandBuffer
*
commandBuffer
)
;
void
releaseData
(
)
;
void
set1iv
(
UniformHandle
int
arrayCount
const
int32_t
v
[
]
)
const
override
;
void
set1fv
(
UniformHandle
int
arrayCount
const
float
v
[
]
)
const
override
;
void
set2iv
(
UniformHandle
int
arrayCount
const
int32_t
v
[
]
)
const
override
;
void
set2fv
(
UniformHandle
int
arrayCount
const
float
v
[
]
)
const
override
;
void
setMatrix2fv
(
UniformHandle
int
arrayCount
const
float
matrices
[
]
)
const
override
;
private
:
sk_sp
<
GrGpuBuffer
>
fUniformBuffer
;
bool
fUsePushConstants
;
using
INHERITED
=
GrUniformDataManager
;
}
;
#
endif
