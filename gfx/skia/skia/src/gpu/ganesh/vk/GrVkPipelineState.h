#
ifndef
GrVkPipelineState_DEFINED
#
define
GrVkPipelineState_DEFINED
#
include
"
include
/
gpu
/
vk
/
GrVkTypes
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrRefCnt
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLProgramBuilder
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
vk
/
GrVkDescriptorSet
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
vk
/
GrVkDescriptorSetManager
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
vk
/
GrVkPipelineStateDataManager
.
h
"
class
GrPipeline
;
class
GrStencilSettings
;
class
GrVkBuffer
;
class
GrVkCommandBuffer
;
class
GrVkDescriptorPool
;
class
GrVkGpu
;
class
GrVkImageView
;
class
GrVkPipeline
;
class
GrVkRenderTarget
;
class
GrVkSampler
;
class
GrVkTexture
;
class
GrVkPipelineState
{
public
:
using
UniformInfoArray
=
GrVkPipelineStateDataManager
:
:
UniformInfoArray
;
using
UniformHandle
=
GrGLSLProgramDataManager
:
:
UniformHandle
;
GrVkPipelineState
(
GrVkGpu
*
sk_sp
<
const
GrVkPipeline
>
const
GrVkDescriptorSetManager
:
:
Handle
&
samplerDSHandle
const
GrGLSLBuiltinUniformHandles
&
builtinUniformHandles
const
UniformInfoArray
&
uniforms
uint32_t
uniformSize
bool
usePushConstants
const
UniformInfoArray
&
samplers
std
:
:
unique_ptr
<
GrGeometryProcessor
:
:
ProgramImpl
>
std
:
:
unique_ptr
<
GrXferProcessor
:
:
ProgramImpl
>
std
:
:
vector
<
std
:
:
unique_ptr
<
GrFragmentProcessor
:
:
ProgramImpl
>
>
fpImpls
)
;
~
GrVkPipelineState
(
)
;
bool
setAndBindUniforms
(
GrVkGpu
*
SkISize
colorAttachmentDimensions
const
GrProgramInfo
&
GrVkCommandBuffer
*
)
;
bool
setAndBindTextures
(
GrVkGpu
*
const
GrGeometryProcessor
&
const
GrPipeline
&
const
GrSurfaceProxy
*
const
geomProcTextures
[
]
GrVkCommandBuffer
*
)
;
bool
setAndBindInputAttachment
(
GrVkGpu
*
gr_rp
<
const
GrVkDescriptorSet
>
inputDescSet
GrVkCommandBuffer
*
)
;
void
bindPipeline
(
const
GrVkGpu
*
gpu
GrVkCommandBuffer
*
commandBuffer
)
;
void
freeGPUResources
(
GrVkGpu
*
gpu
)
;
private
:
struct
RenderTargetState
{
SkISize
fRenderTargetSize
;
GrSurfaceOrigin
fRenderTargetOrigin
;
RenderTargetState
(
)
{
this
-
>
invalidate
(
)
;
}
void
invalidate
(
)
{
fRenderTargetSize
.
fWidth
=
-
1
;
fRenderTargetSize
.
fHeight
=
-
1
;
fRenderTargetOrigin
=
(
GrSurfaceOrigin
)
-
1
;
}
}
;
void
setRenderTargetState
(
SkISize
colorAttachmentDimensions
GrSurfaceOrigin
)
;
sk_sp
<
const
GrVkPipeline
>
fPipeline
;
const
GrVkDescriptorSetManager
:
:
Handle
fSamplerDSHandle
;
SkSTArray
<
4
const
GrVkSampler
*
>
fImmutableSamplers
;
RenderTargetState
fRenderTargetState
;
GrGLSLBuiltinUniformHandles
fBuiltinUniformHandles
;
std
:
:
unique_ptr
<
GrGeometryProcessor
:
:
ProgramImpl
>
fGPImpl
;
std
:
:
unique_ptr
<
GrXferProcessor
:
:
ProgramImpl
>
fXPImpl
;
std
:
:
vector
<
std
:
:
unique_ptr
<
GrFragmentProcessor
:
:
ProgramImpl
>
>
fFPImpls
;
GrVkPipelineStateDataManager
fDataManager
;
int
fNumSamplers
;
}
;
#
endif
