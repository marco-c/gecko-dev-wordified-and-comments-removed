#
ifndef
GrVkFramebuffer_DEFINED
#
define
GrVkFramebuffer_DEFINED
#
include
"
include
/
gpu
/
GrTypes
.
h
"
#
include
"
include
/
gpu
/
vk
/
GrVkTypes
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
vk
/
GrVkManagedResource
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
vk
/
GrVkResourceProvider
.
h
"
#
include
<
cinttypes
>
class
GrVkGpu
;
class
GrVkImage
;
class
GrVkImageView
;
class
GrVkRenderPass
;
class
GrVkFramebuffer
:
public
GrVkManagedResource
{
public
:
static
sk_sp
<
const
GrVkFramebuffer
>
Make
(
GrVkGpu
*
gpu
SkISize
dimensions
sk_sp
<
const
GrVkRenderPass
>
compatibleRenderPass
GrVkImage
*
colorAttachment
GrVkImage
*
resolveAttachment
GrVkImage
*
stencilAttachment
GrVkResourceProvider
:
:
CompatibleRPHandle
)
;
GrVkFramebuffer
(
const
GrVkGpu
*
gpu
sk_sp
<
GrVkImage
>
colorAttachment
sk_sp
<
const
GrVkRenderPass
>
renderPass
std
:
:
unique_ptr
<
GrVkSecondaryCommandBuffer
>
)
;
VkFramebuffer
framebuffer
(
)
const
{
SkASSERT
(
!
this
-
>
isExternal
(
)
)
;
return
fFramebuffer
;
}
bool
isExternal
(
)
const
{
return
fExternalRenderPass
.
get
(
)
;
}
const
GrVkRenderPass
*
externalRenderPass
(
)
const
{
return
fExternalRenderPass
.
get
(
)
;
}
std
:
:
unique_ptr
<
GrVkSecondaryCommandBuffer
>
externalCommandBuffer
(
)
;
void
returnExternalGrSecondaryCommandBuffer
(
std
:
:
unique_ptr
<
GrVkSecondaryCommandBuffer
>
)
;
#
ifdef
SK_TRACE_MANAGED_RESOURCES
void
dumpInfo
(
)
const
override
{
SkDebugf
(
"
GrVkFramebuffer
:
%
"
PRIdPTR
"
(
%
d
refs
)
\
n
"
(
intptr_t
)
fFramebuffer
this
-
>
getRefCnt
(
)
)
;
}
#
endif
const
GrVkRenderPass
*
compatibleRenderPass
(
)
const
{
return
fCompatibleRenderPass
.
get
(
)
;
}
GrVkResourceProvider
:
:
CompatibleRPHandle
compatibleRenderPassHandle
(
)
const
{
return
fCompatibleRenderPassHandle
;
}
GrVkImage
*
colorAttachment
(
)
{
return
fColorAttachment
.
get
(
)
;
}
GrVkImage
*
resolveAttachment
(
)
{
return
fResolveAttachment
.
get
(
)
;
}
GrVkImage
*
stencilAttachment
(
)
{
return
fStencilAttachment
.
get
(
)
;
}
private
:
GrVkFramebuffer
(
const
GrVkGpu
*
gpu
VkFramebuffer
framebuffer
sk_sp
<
GrVkImage
>
colorAttachment
sk_sp
<
GrVkImage
>
resolveAttachment
sk_sp
<
GrVkImage
>
stencilAttachment
sk_sp
<
const
GrVkRenderPass
>
compatibleRenderPass
GrVkResourceProvider
:
:
CompatibleRPHandle
)
;
~
GrVkFramebuffer
(
)
override
;
void
freeGPUData
(
)
const
override
;
void
releaseResources
(
)
;
VkFramebuffer
fFramebuffer
=
VK_NULL_HANDLE
;
sk_sp
<
GrVkImage
>
fColorAttachment
;
sk_sp
<
GrVkImage
>
fResolveAttachment
;
sk_sp
<
GrVkImage
>
fStencilAttachment
;
sk_sp
<
const
GrVkRenderPass
>
fCompatibleRenderPass
;
GrVkResourceProvider
:
:
CompatibleRPHandle
fCompatibleRenderPassHandle
;
sk_sp
<
const
GrVkRenderPass
>
fExternalRenderPass
;
std
:
:
unique_ptr
<
GrVkSecondaryCommandBuffer
>
fExternalCommandBuffer
;
}
;
#
endif
