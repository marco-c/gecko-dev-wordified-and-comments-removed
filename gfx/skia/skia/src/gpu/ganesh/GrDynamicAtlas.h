#
ifndef
GrDynamicAtlas_DEFINED
#
define
GrDynamicAtlas_DEFINED
#
include
"
src
/
base
/
SkArenaAlloc
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrTextureProxy
.
h
"
class
GrOnFlushResourceProvider
;
class
GrResourceProvider
;
class
GrSurfaceProxyView
;
struct
SkIPoint16
;
struct
SkIRect
;
class
GrDynamicAtlas
{
public
:
inline
static
constexpr
GrSurfaceOrigin
kTextureOrigin
=
kTopLeft_GrSurfaceOrigin
;
inline
static
constexpr
int
kPadding
=
1
;
using
LazyAtlasDesc
=
GrSurfaceProxy
:
:
LazySurfaceDesc
;
using
LazyInstantiateAtlasCallback
=
GrSurfaceProxy
:
:
LazyInstantiateCallback
;
enum
class
InternalMultisample
:
bool
{
kNo
=
false
kYes
=
true
}
;
static
sk_sp
<
GrTextureProxy
>
MakeLazyAtlasProxy
(
LazyInstantiateAtlasCallback
&
&
GrColorType
colorType
InternalMultisample
const
GrCaps
&
GrSurfaceProxy
:
:
UseAllocator
)
;
enum
class
RectanizerAlgorithm
{
kSkyline
kPow2
}
;
GrDynamicAtlas
(
GrColorType
colorType
InternalMultisample
SkISize
initialSize
int
maxAtlasSize
const
GrCaps
&
RectanizerAlgorithm
=
RectanizerAlgorithm
:
:
kSkyline
)
;
virtual
~
GrDynamicAtlas
(
)
;
void
reset
(
SkISize
initialSize
const
GrCaps
&
desc
)
;
GrColorType
colorType
(
)
const
{
return
fColorType
;
}
int
maxAtlasSize
(
)
const
{
return
fMaxAtlasSize
;
}
GrTextureProxy
*
textureProxy
(
)
const
{
return
fTextureProxy
.
get
(
)
;
}
GrSurfaceProxyView
readView
(
const
GrCaps
&
)
const
;
GrSurfaceProxyView
writeView
(
const
GrCaps
&
)
const
;
bool
isInstantiated
(
)
const
{
return
fTextureProxy
-
>
isInstantiated
(
)
;
}
bool
addRect
(
int
width
int
height
SkIPoint16
*
location
)
;
const
SkISize
&
drawBounds
(
)
{
return
fDrawBounds
;
}
bool
SK_WARN_UNUSED_RESULT
instantiate
(
GrOnFlushResourceProvider
*
sk_sp
<
GrTexture
>
backingTexture
=
nullptr
)
;
private
:
class
Node
;
Node
*
makeNode
(
Node
*
previous
int
l
int
t
int
r
int
b
)
;
bool
internalPlaceRect
(
int
w
int
h
SkIPoint16
*
loc
)
;
const
GrColorType
fColorType
;
const
InternalMultisample
fInternalMultisample
;
const
int
fMaxAtlasSize
;
const
RectanizerAlgorithm
fRectanizerAlgorithm
;
int
fWidth
;
int
fHeight
;
SkISize
fDrawBounds
;
SkSTArenaAllocWithReset
<
512
>
fNodeAllocator
;
Node
*
fTopNode
=
nullptr
;
sk_sp
<
GrTextureProxy
>
fTextureProxy
;
sk_sp
<
GrTexture
>
fBackingTexture
;
}
;
#
endif
