#
ifndef
GrDeferredProxyUploader_DEFINED
#
define
GrDeferredProxyUploader_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
private
/
base
/
SkSemaphore
.
h
"
#
include
"
src
/
core
/
SkAutoPixmapStorage
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrOpFlushState
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrTextureProxyPriv
.
h
"
class
GrDeferredProxyUploader
:
public
SkNoncopyable
{
public
:
GrDeferredProxyUploader
(
)
:
fScheduledUpload
(
false
)
fWaited
(
false
)
{
}
virtual
~
GrDeferredProxyUploader
(
)
{
this
-
>
wait
(
)
;
}
void
scheduleUpload
(
GrOpFlushState
*
flushState
GrTextureProxy
*
proxy
)
{
if
(
fScheduledUpload
)
{
return
;
}
auto
uploadMask
=
[
this
proxy
]
(
GrDeferredTextureUploadWritePixelsFn
&
writePixelsFn
)
{
this
-
>
wait
(
)
;
GrColorType
pixelColorType
=
SkColorTypeToGrColorType
(
this
-
>
fPixels
.
info
(
)
.
colorType
(
)
)
;
if
(
this
-
>
fPixels
.
addr
(
)
)
{
writePixelsFn
(
proxy
SkIRect
:
:
MakeSize
(
fPixels
.
dimensions
(
)
)
pixelColorType
this
-
>
fPixels
.
addr
(
)
this
-
>
fPixels
.
rowBytes
(
)
)
;
}
proxy
-
>
texPriv
(
)
.
resetDeferredUploader
(
)
;
}
;
flushState
-
>
addASAPUpload
(
std
:
:
move
(
uploadMask
)
)
;
fScheduledUpload
=
true
;
}
void
signalAndFreeData
(
)
{
this
-
>
freeData
(
)
;
fPixelsReady
.
signal
(
)
;
}
SkAutoPixmapStorage
*
getPixels
(
)
{
return
&
fPixels
;
}
protected
:
void
wait
(
)
{
if
(
!
fWaited
)
{
fPixelsReady
.
wait
(
)
;
fWaited
=
true
;
}
}
private
:
virtual
void
freeData
(
)
{
}
SkAutoPixmapStorage
fPixels
;
SkSemaphore
fPixelsReady
;
bool
fScheduledUpload
;
bool
fWaited
;
}
;
template
<
typename
T
>
class
GrTDeferredProxyUploader
:
public
GrDeferredProxyUploader
{
public
:
template
<
typename
.
.
.
Args
>
GrTDeferredProxyUploader
(
Args
&
&
.
.
.
args
)
:
fData
(
std
:
:
make_unique
<
T
>
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
)
{
}
~
GrTDeferredProxyUploader
(
)
override
{
this
-
>
wait
(
)
;
}
T
&
data
(
)
{
return
*
fData
;
}
private
:
void
freeData
(
)
override
{
fData
.
reset
(
)
;
}
std
:
:
unique_ptr
<
T
>
fData
;
}
;
#
endif
