#
ifndef
GrUniformDataManager_DEFINED
#
define
GrUniformDataManager_DEFINED
#
include
"
src
/
gpu
/
ganesh
/
glsl
/
GrGLSLProgramDataManager
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
"
include
/
private
/
gpu
/
ganesh
/
GrTypesPriv
.
h
"
#
include
"
src
/
base
/
SkAutoMalloc
.
h
"
#
include
"
src
/
core
/
SkSLTypeShared
.
h
"
class
GrUniformDataManager
:
public
GrGLSLProgramDataManager
{
public
:
GrUniformDataManager
(
uint32_t
uniformCount
uint32_t
uniformSize
)
;
void
set1i
(
UniformHandle
int32_t
)
const
override
;
void
set1iv
(
UniformHandle
int
arrayCount
const
int32_t
v
[
]
)
const
override
;
void
set1f
(
UniformHandle
float
v0
)
const
override
;
void
set1fv
(
UniformHandle
int
arrayCount
const
float
v
[
]
)
const
override
;
void
set2i
(
UniformHandle
int32_t
int32_t
)
const
override
;
void
set2iv
(
UniformHandle
int
arrayCount
const
int32_t
v
[
]
)
const
override
;
void
set2f
(
UniformHandle
float
float
)
const
override
;
void
set2fv
(
UniformHandle
int
arrayCount
const
float
v
[
]
)
const
override
;
void
set3i
(
UniformHandle
int32_t
int32_t
int32_t
)
const
override
;
void
set3iv
(
UniformHandle
int
arrayCount
const
int32_t
v
[
]
)
const
override
;
void
set3f
(
UniformHandle
float
float
float
)
const
override
;
void
set3fv
(
UniformHandle
int
arrayCount
const
float
v
[
]
)
const
override
;
void
set4i
(
UniformHandle
int32_t
int32_t
int32_t
int32_t
)
const
override
;
void
set4iv
(
UniformHandle
int
arrayCount
const
int32_t
v
[
]
)
const
override
;
void
set4f
(
UniformHandle
float
float
float
float
)
const
override
;
void
set4fv
(
UniformHandle
int
arrayCount
const
float
v
[
]
)
const
override
;
void
setMatrix2f
(
UniformHandle
const
float
matrix
[
]
)
const
override
;
void
setMatrix3f
(
UniformHandle
const
float
matrix
[
]
)
const
override
;
void
setMatrix4f
(
UniformHandle
const
float
matrix
[
]
)
const
override
;
void
setMatrix2fv
(
UniformHandle
int
arrayCount
const
float
matrices
[
]
)
const
override
;
void
setMatrix3fv
(
UniformHandle
int
arrayCount
const
float
matrices
[
]
)
const
override
;
void
setMatrix4fv
(
UniformHandle
int
arrayCount
const
float
matrices
[
]
)
const
override
;
void
markDirty
(
)
{
fUniformsDirty
=
true
;
}
protected
:
struct
Uniform
{
uint32_t
fOffset
:
24
;
SkSLType
fType
:
8
;
SkDEBUGCODE
(
int
fArrayCount
;
)
;
}
;
int
copyUniforms
(
void
*
dest
const
void
*
src
int
numUniforms
SkSLType
uniformType
)
const
;
template
<
int
N
SkSLType
kFullType
SkSLType
kHalfType
>
inline
void
set
(
UniformHandle
u
const
void
*
v
)
const
;
template
<
int
N
SkSLType
kFullType
SkSLType
kHalfType
>
inline
void
setv
(
UniformHandle
u
int
arrayCount
const
void
*
v
)
const
;
template
<
int
N
SkSLType
FullType
SkSLType
HalfType
>
inline
void
setMatrices
(
UniformHandle
int
arrayCount
const
float
matrices
[
]
)
const
;
void
*
getBufferPtrAndMarkDirty
(
const
Uniform
&
uni
)
const
;
uint32_t
fUniformSize
;
bool
fWrite16BitUniforms
=
false
;
SkTArray
<
Uniform
true
>
fUniforms
;
mutable
SkAutoMalloc
fUniformData
;
mutable
bool
fUniformsDirty
=
false
;
}
;
#
endif
