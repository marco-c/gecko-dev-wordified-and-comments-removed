#
include
"
src
/
gpu
/
ganesh
/
GrFixedClip
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrAppliedClip
.
h
"
SkIRect
GrFixedClip
:
:
getConservativeBounds
(
)
const
{
return
fScissorState
.
rect
(
)
;
}
GrClip
:
:
PreClipResult
GrFixedClip
:
:
preApply
(
const
SkRect
&
drawBounds
GrAA
aa
)
const
{
SkIRect
pixelBounds
=
GetPixelIBounds
(
drawBounds
aa
)
;
if
(
!
SkIRect
:
:
Intersects
(
fScissorState
.
rect
(
)
pixelBounds
)
)
{
return
Effect
:
:
kClippedOut
;
}
if
(
fWindowRectsState
.
enabled
(
)
)
{
return
Effect
:
:
kClipped
;
}
if
(
!
fScissorState
.
enabled
(
)
|
|
fScissorState
.
rect
(
)
.
contains
(
pixelBounds
)
)
{
return
Effect
:
:
kUnclipped
;
}
return
{
SkRect
:
:
Make
(
fScissorState
.
rect
(
)
)
GrAA
:
:
kNo
}
;
}
GrClip
:
:
Effect
GrFixedClip
:
:
apply
(
GrAppliedHardClip
*
out
SkIRect
*
bounds
)
const
{
if
(
!
SkIRect
:
:
Intersects
(
fScissorState
.
rect
(
)
*
bounds
)
)
{
return
Effect
:
:
kClippedOut
;
}
Effect
effect
=
Effect
:
:
kUnclipped
;
if
(
fScissorState
.
enabled
(
)
&
&
!
fScissorState
.
rect
(
)
.
contains
(
*
bounds
)
)
{
SkAssertResult
(
bounds
-
>
intersect
(
fScissorState
.
rect
(
)
)
)
;
out
-
>
setScissor
(
*
bounds
)
;
effect
=
Effect
:
:
kClipped
;
}
if
(
fWindowRectsState
.
enabled
(
)
)
{
out
-
>
addWindowRectangles
(
fWindowRectsState
)
;
effect
=
Effect
:
:
kClipped
;
}
return
effect
;
}
