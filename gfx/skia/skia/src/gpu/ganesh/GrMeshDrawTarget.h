#
ifndef
GrMeshDrawTarget_DEFINED
#
define
GrMeshDrawTarget_DEFINED
#
include
"
src
/
base
/
SkArenaAlloc
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrDrawIndirectCommand
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrSimpleMesh
.
h
"
class
GrAtlasManager
;
class
GrThreadSafeCache
;
namespace
skgpu
{
namespace
ganesh
{
class
SmallPathAtlasMgr
;
}
struct
IndexWriter
;
struct
VertexWriter
;
}
namespace
sktext
:
:
gpu
{
class
StrikeCache
;
}
class
GrMeshDrawTarget
{
public
:
virtual
~
GrMeshDrawTarget
(
)
{
}
virtual
void
recordDraw
(
const
GrGeometryProcessor
*
const
GrSimpleMesh
[
]
int
meshCnt
const
GrSurfaceProxy
*
const
primProcProxies
[
]
GrPrimitiveType
)
=
0
;
void
recordDraw
(
const
GrGeometryProcessor
*
gp
const
GrSimpleMesh
meshes
[
]
int
meshCnt
GrPrimitiveType
primitiveType
)
{
this
-
>
recordDraw
(
gp
meshes
meshCnt
nullptr
primitiveType
)
;
}
virtual
void
*
makeVertexSpace
(
size_t
vertexSize
int
vertexCount
sk_sp
<
const
GrBuffer
>
*
int
*
startVertex
)
=
0
;
virtual
uint16_t
*
makeIndexSpace
(
int
indexCount
sk_sp
<
const
GrBuffer
>
*
int
*
startIndex
)
=
0
;
virtual
void
*
makeVertexSpaceAtLeast
(
size_t
vertexSize
int
minVertexCount
int
fallbackVertexCount
sk_sp
<
const
GrBuffer
>
*
int
*
startVertex
int
*
actualVertexCount
)
=
0
;
virtual
uint16_t
*
makeIndexSpaceAtLeast
(
int
minIndexCount
int
fallbackIndexCount
sk_sp
<
const
GrBuffer
>
*
int
*
startIndex
int
*
actualIndexCount
)
=
0
;
virtual
GrDrawIndirectWriter
makeDrawIndirectSpace
(
int
drawCount
sk_sp
<
const
GrBuffer
>
*
buffer
size_t
*
offsetInBytes
)
=
0
;
virtual
GrDrawIndexedIndirectWriter
makeDrawIndexedIndirectSpace
(
int
drawCount
sk_sp
<
const
GrBuffer
>
*
size_t
*
offsetInBytes
)
=
0
;
skgpu
:
:
VertexWriter
makeVertexWriter
(
size_t
vertexSize
int
vertexCount
sk_sp
<
const
GrBuffer
>
*
int
*
startVertex
)
;
skgpu
:
:
IndexWriter
makeIndexWriter
(
int
indexCount
sk_sp
<
const
GrBuffer
>
*
int
*
startIndex
)
;
skgpu
:
:
VertexWriter
makeVertexWriterAtLeast
(
size_t
vertexSize
int
minVertexCount
int
fallbackVertexCount
sk_sp
<
const
GrBuffer
>
*
int
*
startVertex
int
*
actualVertexCount
)
;
skgpu
:
:
IndexWriter
makeIndexWriterAtLeast
(
int
minIndexCount
int
fallbackIndexCount
sk_sp
<
const
GrBuffer
>
*
int
*
startIndex
int
*
actualIndexCount
)
;
virtual
void
putBackIndices
(
int
indices
)
=
0
;
virtual
void
putBackVertices
(
int
vertices
size_t
vertexStride
)
=
0
;
virtual
void
putBackIndirectDraws
(
int
count
)
=
0
;
virtual
void
putBackIndexedIndirectDraws
(
int
count
)
=
0
;
GrSimpleMesh
*
allocMesh
(
)
{
return
this
-
>
allocator
(
)
-
>
make
<
GrSimpleMesh
>
(
)
;
}
GrSimpleMesh
*
allocMeshes
(
int
n
)
{
return
this
-
>
allocator
(
)
-
>
makeArray
<
GrSimpleMesh
>
(
n
)
;
}
const
GrSurfaceProxy
*
*
allocPrimProcProxyPtrs
(
int
n
)
{
return
this
-
>
allocator
(
)
-
>
makeArray
<
const
GrSurfaceProxy
*
>
(
n
)
;
}
virtual
GrRenderTargetProxy
*
rtProxy
(
)
const
=
0
;
virtual
const
GrSurfaceProxyView
&
writeView
(
)
const
=
0
;
virtual
const
GrAppliedClip
*
appliedClip
(
)
const
=
0
;
virtual
GrAppliedClip
detachAppliedClip
(
)
=
0
;
virtual
const
GrDstProxyView
&
dstProxyView
(
)
const
=
0
;
virtual
bool
usesMSAASurface
(
)
const
=
0
;
virtual
GrXferBarrierFlags
renderPassBarriers
(
)
const
=
0
;
virtual
GrLoadOp
colorLoadOp
(
)
const
=
0
;
virtual
GrThreadSafeCache
*
threadSafeCache
(
)
const
=
0
;
virtual
GrResourceProvider
*
resourceProvider
(
)
const
=
0
;
uint32_t
contextUniqueID
(
)
const
;
virtual
sktext
:
:
gpu
:
:
StrikeCache
*
strikeCache
(
)
const
=
0
;
virtual
GrAtlasManager
*
atlasManager
(
)
const
=
0
;
#
if
!
defined
(
SK_ENABLE_OPTIMIZE_SIZE
)
virtual
skgpu
:
:
ganesh
:
:
SmallPathAtlasMgr
*
smallPathAtlasManager
(
)
const
=
0
;
#
endif
virtual
SkTArray
<
GrSurfaceProxy
*
true
>
*
sampledProxyArray
(
)
=
0
;
virtual
const
GrCaps
&
caps
(
)
const
=
0
;
virtual
GrDeferredUploadTarget
*
deferredUploadTarget
(
)
=
0
;
virtual
SkArenaAlloc
*
allocator
(
)
=
0
;
}
;
#
endif
