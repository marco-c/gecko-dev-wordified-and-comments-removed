#
ifndef
GrColor_DEFINED
#
define
GrColor_DEFINED
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkColorPriv
.
h
"
#
include
"
include
/
gpu
/
GrTypes
.
h
"
#
include
"
include
/
private
/
SkColorData
.
h
"
#
include
"
src
/
base
/
SkHalf
.
h
"
#
include
"
src
/
gpu
/
BufferWriter
.
h
"
typedef
uint32_t
GrColor
;
#
ifdef
SK_CPU_BENDIAN
#
define
GrColor_SHIFT_R
24
#
define
GrColor_SHIFT_G
16
#
define
GrColor_SHIFT_B
8
#
define
GrColor_SHIFT_A
0
#
else
#
define
GrColor_SHIFT_R
0
#
define
GrColor_SHIFT_G
8
#
define
GrColor_SHIFT_B
16
#
define
GrColor_SHIFT_A
24
#
endif
static
inline
GrColor
GrColorPackRGBA
(
unsigned
r
unsigned
g
unsigned
b
unsigned
a
)
{
SkASSERT
(
(
uint8_t
)
r
=
=
r
)
;
SkASSERT
(
(
uint8_t
)
g
=
=
g
)
;
SkASSERT
(
(
uint8_t
)
b
=
=
b
)
;
SkASSERT
(
(
uint8_t
)
a
=
=
a
)
;
return
(
r
<
<
GrColor_SHIFT_R
)
|
(
g
<
<
GrColor_SHIFT_G
)
|
(
b
<
<
GrColor_SHIFT_B
)
|
(
a
<
<
GrColor_SHIFT_A
)
;
}
#
define
GrColorUnpackR
(
color
)
(
(
(
color
)
>
>
GrColor_SHIFT_R
)
&
0xFF
)
#
define
GrColorUnpackG
(
color
)
(
(
(
color
)
>
>
GrColor_SHIFT_G
)
&
0xFF
)
#
define
GrColorUnpackB
(
color
)
(
(
(
color
)
>
>
GrColor_SHIFT_B
)
&
0xFF
)
#
define
GrColorUnpackA
(
color
)
(
(
(
color
)
>
>
GrColor_SHIFT_A
)
&
0xFF
)
#
define
GrColor_ILLEGAL
(
~
(
0xFF
<
<
GrColor_SHIFT_A
)
)
static
inline
float
GrNormalizeByteToFloat
(
uint8_t
value
)
{
static
const
float
ONE_OVER_255
=
1
.
f
/
255
.
f
;
return
value
*
ONE_OVER_255
;
}
static
inline
bool
SkPMColor4fFitsInBytes
(
const
SkPMColor4f
&
color
)
{
return
color
.
fitsInBytes
(
)
;
}
static
inline
uint64_t
SkPMColor4f_toFP16
(
const
SkPMColor4f
&
color
)
{
uint64_t
halfColor
;
SkFloatToHalf_finite_ftz
(
skvx
:
:
float4
:
:
Load
(
color
.
vec
(
)
)
)
.
store
(
&
halfColor
)
;
return
halfColor
;
}
#
endif
