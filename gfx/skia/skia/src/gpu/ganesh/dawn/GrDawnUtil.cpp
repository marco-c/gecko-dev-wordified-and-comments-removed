#
include
"
src
/
gpu
/
ganesh
/
dawn
/
GrDawnUtil
.
h
"
int
GrDawnFormatStencilBits
(
wgpu
:
:
TextureFormat
format
)
{
switch
(
format
)
{
case
wgpu
:
:
TextureFormat
:
:
RGBA8Unorm
:
case
wgpu
:
:
TextureFormat
:
:
BGRA8Unorm
:
case
wgpu
:
:
TextureFormat
:
:
R8Unorm
:
return
0
;
case
wgpu
:
:
TextureFormat
:
:
Depth24PlusStencil8
:
return
8
;
default
:
SkUNREACHABLE
;
}
}
bool
GrDawnFormatIsRenderable
(
wgpu
:
:
TextureFormat
format
)
{
return
true
;
}
bool
GrColorTypeToDawnFormat
(
GrColorType
ct
wgpu
:
:
TextureFormat
*
format
)
{
switch
(
ct
)
{
case
GrColorType
:
:
kRGBA_8888
:
*
format
=
wgpu
:
:
TextureFormat
:
:
RGBA8Unorm
;
return
true
;
case
GrColorType
:
:
kBGRA_8888
:
*
format
=
wgpu
:
:
TextureFormat
:
:
BGRA8Unorm
;
return
true
;
case
GrColorType
:
:
kAlpha_8
:
case
GrColorType
:
:
kGray_8
:
*
format
=
wgpu
:
:
TextureFormat
:
:
R8Unorm
;
return
true
;
default
:
return
false
;
}
}
bool
GrDawnFormatToGrColorType
(
wgpu
:
:
TextureFormat
format
GrColorType
*
colorType
)
{
switch
(
format
)
{
case
wgpu
:
:
TextureFormat
:
:
RGBA8Unorm
:
*
colorType
=
GrColorType
:
:
kRGBA_8888
;
return
true
;
case
wgpu
:
:
TextureFormat
:
:
BGRA8Unorm
:
*
colorType
=
GrColorType
:
:
kBGRA_8888
;
return
true
;
case
wgpu
:
:
TextureFormat
:
:
R8Unorm
:
*
colorType
=
GrColorType
:
:
kR_8
;
return
true
;
default
:
return
false
;
}
}
size_t
GrDawnRoundRowBytes
(
size_t
rowBytes
)
{
return
(
rowBytes
+
0xFF
)
&
~
0xFF
;
}
#
if
defined
(
SK_DEBUG
)
|
|
GR_TEST_UTILS
const
char
*
GrDawnFormatToStr
(
wgpu
:
:
TextureFormat
format
)
{
switch
(
format
)
{
case
wgpu
:
:
TextureFormat
:
:
RGBA8Unorm
:
return
"
RGBA8Unorm
"
;
case
wgpu
:
:
TextureFormat
:
:
BGRA8Unorm
:
return
"
BGRA8Unorm
"
;
case
wgpu
:
:
TextureFormat
:
:
R8Unorm
:
return
"
R8Unorm
"
;
case
wgpu
:
:
TextureFormat
:
:
Depth24PlusStencil8
:
return
"
Depth24PlusStencil8
"
;
default
:
SkUNREACHABLE
;
}
}
#
endif
