#
ifndef
GrSurface_DEFINED
#
define
GrSurface_DEFINED
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
include
/
gpu
/
GpuTypes
.
h
"
#
include
"
src
/
gpu
/
RefCntedCallback
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrGpuResource
.
h
"
class
GrBackendFormat
;
class
GrDirectContext
;
class
GrRenderTarget
;
class
GrTexture
;
class
GrSurface
:
public
GrGpuResource
{
public
:
SkISize
dimensions
(
)
const
{
return
fDimensions
;
}
int
width
(
)
const
{
return
fDimensions
.
width
(
)
;
}
int
height
(
)
const
{
return
fDimensions
.
height
(
)
;
}
SkRect
getBoundsRect
(
)
const
{
return
SkRect
:
:
Make
(
this
-
>
dimensions
(
)
)
;
}
virtual
GrBackendFormat
backendFormat
(
)
const
=
0
;
void
setRelease
(
sk_sp
<
skgpu
:
:
RefCntedCallback
>
releaseHelper
)
;
typedef
void
*
ReleaseCtx
;
typedef
void
(
*
ReleaseProc
)
(
ReleaseCtx
)
;
void
setRelease
(
ReleaseProc
proc
ReleaseCtx
ctx
)
{
this
-
>
setRelease
(
skgpu
:
:
RefCntedCallback
:
:
Make
(
proc
ctx
)
)
;
}
virtual
GrTexture
*
asTexture
(
)
{
return
nullptr
;
}
virtual
const
GrTexture
*
asTexture
(
)
const
{
return
nullptr
;
}
virtual
GrRenderTarget
*
asRenderTarget
(
)
{
return
nullptr
;
}
virtual
const
GrRenderTarget
*
asRenderTarget
(
)
const
{
return
nullptr
;
}
GrInternalSurfaceFlags
flags
(
)
const
{
return
fSurfaceFlags
;
}
static
size_t
ComputeSize
(
const
GrBackendFormat
&
SkISize
dimensions
int
colorSamplesPerPixel
GrMipmapped
bool
binSize
=
false
)
;
bool
readOnly
(
)
const
{
return
fSurfaceFlags
&
GrInternalSurfaceFlags
:
:
kReadOnly
;
}
bool
framebufferOnly
(
)
const
{
return
fSurfaceFlags
&
GrInternalSurfaceFlags
:
:
kFramebufferOnly
;
}
bool
isProtected
(
)
const
{
return
fIsProtected
=
=
skgpu
:
:
Protected
:
:
kYes
;
}
void
setFramebufferOnly
(
)
{
SkASSERT
(
this
-
>
asRenderTarget
(
)
)
;
fSurfaceFlags
|
=
GrInternalSurfaceFlags
:
:
kFramebufferOnly
;
}
class
RefCntedReleaseProc
:
public
SkNVRefCnt
<
RefCntedReleaseProc
>
{
public
:
RefCntedReleaseProc
(
sk_sp
<
skgpu
:
:
RefCntedCallback
>
callback
sk_sp
<
GrDirectContext
>
directContext
)
;
~
RefCntedReleaseProc
(
)
;
private
:
sk_sp
<
skgpu
:
:
RefCntedCallback
>
fCallback
;
sk_sp
<
GrDirectContext
>
fDirectContext
;
}
;
protected
:
void
setGLRTFBOIDIs0
(
)
{
SkASSERT
(
!
this
-
>
requiresManualMSAAResolve
(
)
)
;
SkASSERT
(
!
this
-
>
asTexture
(
)
)
;
SkASSERT
(
this
-
>
asRenderTarget
(
)
)
;
fSurfaceFlags
|
=
GrInternalSurfaceFlags
:
:
kGLRTFBOIDIs0
;
}
bool
glRTFBOIDis0
(
)
const
{
return
fSurfaceFlags
&
GrInternalSurfaceFlags
:
:
kGLRTFBOIDIs0
;
}
void
setRequiresManualMSAAResolve
(
)
{
SkASSERT
(
!
this
-
>
glRTFBOIDis0
(
)
)
;
SkASSERT
(
this
-
>
asRenderTarget
(
)
)
;
fSurfaceFlags
|
=
GrInternalSurfaceFlags
:
:
kRequiresManualMSAAResolve
;
}
bool
requiresManualMSAAResolve
(
)
const
{
return
fSurfaceFlags
&
GrInternalSurfaceFlags
:
:
kRequiresManualMSAAResolve
;
}
void
setReadOnly
(
)
{
SkASSERT
(
!
this
-
>
asRenderTarget
(
)
)
;
fSurfaceFlags
|
=
GrInternalSurfaceFlags
:
:
kReadOnly
;
}
void
setVkRTSupportsInputAttachment
(
)
{
SkASSERT
(
this
-
>
asRenderTarget
(
)
)
;
fSurfaceFlags
|
=
GrInternalSurfaceFlags
:
:
kVkRTSupportsInputAttachment
;
}
GrSurface
(
GrGpu
*
gpu
const
SkISize
&
dimensions
skgpu
:
:
Protected
isProtected
std
:
:
string_view
label
)
:
INHERITED
(
gpu
label
)
fDimensions
(
dimensions
)
fSurfaceFlags
(
GrInternalSurfaceFlags
:
:
kNone
)
fIsProtected
(
isProtected
)
{
}
~
GrSurface
(
)
override
{
SkASSERT
(
!
fReleaseHelper
)
;
}
void
onRelease
(
)
override
;
void
onAbandon
(
)
override
;
private
:
const
char
*
getResourceType
(
)
const
override
{
return
"
Surface
"
;
}
virtual
void
onSetRelease
(
sk_sp
<
RefCntedReleaseProc
>
)
{
}
void
invokeReleaseProc
(
)
{
fReleaseHelper
.
reset
(
)
;
}
SkISize
fDimensions
;
GrInternalSurfaceFlags
fSurfaceFlags
;
skgpu
:
:
Protected
fIsProtected
;
sk_sp
<
RefCntedReleaseProc
>
fReleaseHelper
;
using
INHERITED
=
GrGpuResource
;
}
;
#
endif
