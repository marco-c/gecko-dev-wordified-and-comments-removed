#
ifndef
GrSurfaceProxyPriv_DEFINED
#
define
GrSurfaceProxyPriv_DEFINED
#
include
"
src
/
gpu
/
ganesh
/
GrSurfaceProxy
.
h
"
#
include
"
src
/
gpu
/
SkBackingFit
.
h
"
class
GrResourceProvider
;
class
GrSurfaceProxyPriv
{
public
:
void
computeScratchKey
(
const
GrCaps
&
caps
skgpu
:
:
ScratchKey
*
key
)
const
{
return
fProxy
-
>
computeScratchKey
(
caps
key
)
;
}
sk_sp
<
GrSurface
>
createSurface
(
GrResourceProvider
*
resourceProvider
)
const
{
return
fProxy
-
>
createSurface
(
resourceProvider
)
;
}
void
assign
(
sk_sp
<
GrSurface
>
surface
)
{
fProxy
-
>
assign
(
std
:
:
move
(
surface
)
)
;
}
bool
isExact
(
)
const
{
return
SkBackingFit
:
:
kExact
=
=
fProxy
-
>
fFit
;
}
void
exactify
(
bool
allocatedCaseOnly
)
;
void
setLazyDimensions
(
SkISize
dimensions
)
{
fProxy
-
>
setLazyDimensions
(
dimensions
)
;
}
bool
doLazyInstantiation
(
GrResourceProvider
*
)
;
void
setIsDDLTarget
(
)
{
fProxy
-
>
fIsDDLTarget
=
true
;
}
void
setIsPromiseProxy
(
)
{
fProxy
-
>
fIsPromiseProxy
=
true
;
}
private
:
explicit
GrSurfaceProxyPriv
(
GrSurfaceProxy
*
proxy
)
:
fProxy
(
proxy
)
{
}
GrSurfaceProxyPriv
&
operator
=
(
const
GrSurfaceProxyPriv
&
)
=
delete
;
const
GrSurfaceProxyPriv
*
operator
&
(
)
const
;
GrSurfaceProxyPriv
*
operator
&
(
)
;
GrSurfaceProxy
*
fProxy
;
friend
class
GrSurfaceProxy
;
}
;
inline
GrSurfaceProxyPriv
GrSurfaceProxy
:
:
priv
(
)
{
return
GrSurfaceProxyPriv
(
this
)
;
}
inline
const
GrSurfaceProxyPriv
GrSurfaceProxy
:
:
priv
(
)
const
{
return
GrSurfaceProxyPriv
(
const_cast
<
GrSurfaceProxy
*
>
(
this
)
)
;
}
#
endif
