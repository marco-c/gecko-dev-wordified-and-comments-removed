#
ifndef
GrTextureProxyCacheAccess_DEFINED
#
define
GrTextureProxyCacheAccess_DEFINED
#
include
"
src
/
gpu
/
ganesh
/
GrTextureProxy
.
h
"
class
GrTextureProxy
:
:
CacheAccess
{
private
:
void
setUniqueKey
(
GrProxyProvider
*
proxyProvider
const
skgpu
:
:
UniqueKey
&
key
)
{
fTextureProxy
-
>
setUniqueKey
(
proxyProvider
key
)
;
}
void
clearUniqueKey
(
)
{
fTextureProxy
-
>
clearUniqueKey
(
)
;
}
explicit
CacheAccess
(
GrTextureProxy
*
textureProxy
)
:
fTextureProxy
(
textureProxy
)
{
}
CacheAccess
&
operator
=
(
const
CacheAccess
&
)
=
delete
;
const
CacheAccess
*
operator
&
(
)
const
;
CacheAccess
*
operator
&
(
)
;
GrTextureProxy
*
fTextureProxy
;
friend
class
GrTextureProxy
;
friend
class
GrProxyProvider
;
}
;
inline
GrTextureProxy
:
:
CacheAccess
GrTextureProxy
:
:
cacheAccess
(
)
{
return
CacheAccess
(
this
)
;
}
inline
const
GrTextureProxy
:
:
CacheAccess
GrTextureProxy
:
:
cacheAccess
(
)
const
{
return
CacheAccess
(
const_cast
<
GrTextureProxy
*
>
(
this
)
)
;
}
#
endif
