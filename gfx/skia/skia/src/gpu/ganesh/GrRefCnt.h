#
ifndef
GrRefCnt_DEFINED
#
define
GrRefCnt_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrGpuResource
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrManagedResource
.
h
"
template
<
typename
T
auto
Ref
auto
Unref
>
class
gr_sp
{
private
:
static
inline
T
*
SafeRef
(
T
*
obj
)
{
if
(
obj
)
{
(
obj
-
>
*
Ref
)
(
)
;
}
return
obj
;
}
static
inline
void
SafeUnref
(
T
*
obj
)
{
if
(
obj
)
{
(
obj
-
>
*
Unref
)
(
)
;
}
}
public
:
using
element_type
=
T
;
constexpr
gr_sp
(
)
:
fPtr
(
nullptr
)
{
}
constexpr
gr_sp
(
std
:
:
nullptr_t
)
:
fPtr
(
nullptr
)
{
}
gr_sp
(
const
gr_sp
<
T
Ref
Unref
>
&
that
)
:
fPtr
(
SafeRef
(
that
.
get
(
)
)
)
{
}
template
<
typename
U
typename
=
typename
std
:
:
enable_if
<
std
:
:
is_convertible
<
U
*
T
*
>
:
:
value
>
:
:
type
>
gr_sp
(
const
gr_sp
<
U
Ref
Unref
>
&
that
)
:
fPtr
(
SafeRef
(
that
.
get
(
)
)
)
{
}
gr_sp
(
const
sk_sp
<
T
>
&
that
)
:
fPtr
(
SafeRef
(
that
.
get
(
)
)
)
{
}
gr_sp
(
gr_sp
<
T
Ref
Unref
>
&
&
that
)
:
fPtr
(
that
.
release
(
)
)
{
}
gr_sp
(
sk_sp
<
T
>
&
&
that
)
:
fPtr
(
SafeRef
(
that
.
get
(
)
)
)
{
}
explicit
gr_sp
(
T
*
obj
)
:
fPtr
(
obj
)
{
}
~
gr_sp
(
)
{
SafeUnref
(
fPtr
)
;
SkDEBUGCODE
(
fPtr
=
nullptr
)
;
}
gr_sp
&
operator
=
(
std
:
:
nullptr_t
)
{
this
-
>
reset
(
)
;
return
*
this
;
}
gr_sp
&
operator
=
(
const
gr_sp
<
T
Ref
Unref
>
&
that
)
{
if
(
this
!
=
&
that
)
{
this
-
>
reset
(
SafeRef
(
that
.
get
(
)
)
)
;
}
return
*
this
;
}
gr_sp
&
operator
=
(
const
sk_sp
<
T
>
&
that
)
{
this
-
>
reset
(
SafeRef
(
that
.
get
(
)
)
)
;
return
*
this
;
}
gr_sp
&
operator
=
(
gr_sp
<
T
Ref
Unref
>
&
&
that
)
{
this
-
>
reset
(
that
.
release
(
)
)
;
return
*
this
;
}
gr_sp
&
operator
=
(
sk_sp
<
T
>
&
&
that
)
{
this
-
>
reset
(
SafeRef
(
that
.
get
(
)
)
)
;
return
*
this
;
}
T
&
operator
*
(
)
const
{
SkASSERT
(
this
-
>
get
(
)
!
=
nullptr
)
;
return
*
this
-
>
get
(
)
;
}
explicit
operator
bool
(
)
const
{
return
this
-
>
get
(
)
!
=
nullptr
;
}
T
*
get
(
)
const
{
return
fPtr
;
}
T
*
operator
-
>
(
)
const
{
return
fPtr
;
}
void
reset
(
T
*
ptr
=
nullptr
)
{
T
*
oldPtr
=
fPtr
;
fPtr
=
ptr
;
SafeUnref
(
oldPtr
)
;
}
private
:
T
*
SK_WARN_UNUSED_RESULT
release
(
)
{
T
*
ptr
=
fPtr
;
fPtr
=
nullptr
;
return
ptr
;
}
T
*
fPtr
;
}
;
template
<
typename
T
>
using
gr_cb
=
gr_sp
<
T
&
T
:
:
addCommandBufferUsage
&
T
:
:
removeCommandBufferUsage
>
;
template
<
typename
T
>
using
gr_rp
=
gr_sp
<
T
&
T
:
:
ref
&
T
:
:
recycle
>
;
template
<
typename
T
>
gr_rp
<
T
>
gr_ref_rp
(
T
*
obj
)
{
return
gr_rp
<
T
>
(
SkSafeRef
(
obj
)
)
;
}
template
<
typename
T
>
gr_rp
<
T
>
gr_ref_rp
(
const
T
*
obj
)
{
return
gr_rp
<
T
>
(
const_cast
<
T
*
>
(
SkSafeRef
(
obj
)
)
)
;
}
#
endif
