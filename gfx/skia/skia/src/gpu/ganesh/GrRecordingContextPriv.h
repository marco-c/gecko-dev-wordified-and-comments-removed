#
ifndef
GrRecordingContextPriv_DEFINED
#
define
GrRecordingContextPriv_DEFINED
#
include
"
include
/
core
/
SkPaint
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
gpu
/
GrRecordingContext
.
h
"
#
include
"
src
/
gpu
/
RefCntedCallback
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
Device_v1
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrImageContextPriv
.
h
"
#
include
"
src
/
text
/
gpu
/
SDFTControl
.
h
"
class
GrImageInfo
;
class
SkDeferredDisplayList
;
namespace
skgpu
{
class
Swizzle
;
}
namespace
skgpu
:
:
ganesh
{
class
SurfaceContext
;
class
SurfaceFillContext
;
}
class
GrRecordingContextPriv
:
public
GrImageContextPriv
{
public
:
GrRecordingContext
*
context
(
)
{
return
static_cast
<
GrRecordingContext
*
>
(
fContext
)
;
}
const
GrRecordingContext
*
context
(
)
const
{
return
static_cast
<
const
GrRecordingContext
*
>
(
fContext
)
;
}
GrProxyProvider
*
proxyProvider
(
)
{
return
this
-
>
context
(
)
-
>
proxyProvider
(
)
;
}
const
GrProxyProvider
*
proxyProvider
(
)
const
{
return
this
-
>
context
(
)
-
>
proxyProvider
(
)
;
}
GrDrawingManager
*
drawingManager
(
)
{
return
this
-
>
context
(
)
-
>
drawingManager
(
)
;
}
SkArenaAlloc
*
recordTimeAllocator
(
)
{
return
this
-
>
context
(
)
-
>
arenas
(
)
.
recordTimeAllocator
(
)
;
}
sktext
:
:
gpu
:
:
SubRunAllocator
*
recordTimeSubRunAllocator
(
)
{
return
this
-
>
context
(
)
-
>
arenas
(
)
.
recordTimeSubRunAllocator
(
)
;
}
GrRecordingContext
:
:
Arenas
arenas
(
)
{
return
this
-
>
context
(
)
-
>
arenas
(
)
;
}
GrRecordingContext
:
:
OwnedArenas
&
&
detachArenas
(
)
{
return
this
-
>
context
(
)
-
>
detachArenas
(
)
;
}
void
recordProgramInfo
(
const
GrProgramInfo
*
programInfo
)
{
this
-
>
context
(
)
-
>
recordProgramInfo
(
programInfo
)
;
}
void
detachProgramData
(
SkTArray
<
GrRecordingContext
:
:
ProgramData
>
*
dst
)
{
this
-
>
context
(
)
-
>
detachProgramData
(
dst
)
;
}
sktext
:
:
gpu
:
:
TextBlobRedrawCoordinator
*
getTextBlobCache
(
)
{
return
this
-
>
context
(
)
-
>
getTextBlobRedrawCoordinator
(
)
;
}
GrThreadSafeCache
*
threadSafeCache
(
)
{
return
this
-
>
context
(
)
-
>
threadSafeCache
(
)
;
}
void
moveRenderTasksToDDL
(
SkDeferredDisplayList
*
)
;
void
addOnFlushCallbackObject
(
GrOnFlushCallbackObject
*
)
;
GrAuditTrail
*
auditTrail
(
)
{
return
this
-
>
context
(
)
-
>
fAuditTrail
.
get
(
)
;
}
#
if
GR_TEST_UTILS
class
AutoSuppressWarningMessages
{
public
:
AutoSuppressWarningMessages
(
GrRecordingContext
*
context
)
:
fContext
(
context
)
{
+
+
fContext
-
>
fSuppressWarningMessages
;
}
~
AutoSuppressWarningMessages
(
)
{
-
-
fContext
-
>
fSuppressWarningMessages
;
}
private
:
GrRecordingContext
*
fContext
;
}
;
void
incrSuppressWarningMessages
(
)
{
+
+
this
-
>
context
(
)
-
>
fSuppressWarningMessages
;
}
void
decrSuppressWarningMessages
(
)
{
-
-
this
-
>
context
(
)
-
>
fSuppressWarningMessages
;
}
#
endif
void
printWarningMessage
(
const
char
*
msg
)
const
{
#
if
GR_TEST_UTILS
if
(
this
-
>
context
(
)
-
>
fSuppressWarningMessages
>
0
)
{
return
;
}
#
endif
SkDebugf
(
"
%
s
"
msg
)
;
}
GrRecordingContext
:
:
Stats
*
stats
(
)
{
return
&
this
-
>
context
(
)
-
>
fStats
;
}
#
if
GR_GPU_STATS
&
&
GR_TEST_UTILS
using
DMSAAStats
=
GrRecordingContext
:
:
DMSAAStats
;
DMSAAStats
&
dmsaaStats
(
)
{
return
this
-
>
context
(
)
-
>
fDMSAAStats
;
}
#
endif
sktext
:
:
gpu
:
:
SDFTControl
getSDFTControl
(
bool
useSDFTForSmallText
)
const
;
static
sk_sp
<
GrRecordingContext
>
MakeDDL
(
sk_sp
<
GrContextThreadSafeProxy
>
)
;
sk_sp
<
skgpu
:
:
ganesh
:
:
Device
>
createDevice
(
GrColorType
sk_sp
<
GrSurfaceProxy
>
sk_sp
<
SkColorSpace
>
GrSurfaceOrigin
const
SkSurfaceProps
&
skgpu
:
:
ganesh
:
:
Device
:
:
InitContents
)
;
sk_sp
<
skgpu
:
:
ganesh
:
:
Device
>
createDevice
(
skgpu
:
:
Budgeted
const
SkImageInfo
&
SkBackingFit
int
sampleCount
skgpu
:
:
Mipmapped
skgpu
:
:
Protected
GrSurfaceOrigin
const
SkSurfaceProps
&
skgpu
:
:
ganesh
:
:
Device
:
:
InitContents
)
;
std
:
:
unique_ptr
<
skgpu
:
:
ganesh
:
:
SurfaceContext
>
makeSC
(
GrSurfaceProxyView
readView
const
GrColorInfo
&
)
;
std
:
:
unique_ptr
<
skgpu
:
:
ganesh
:
:
SurfaceContext
>
makeSC
(
const
GrImageInfo
&
const
GrBackendFormat
&
std
:
:
string_view
label
SkBackingFit
=
SkBackingFit
:
:
kExact
GrSurfaceOrigin
=
kTopLeft_GrSurfaceOrigin
skgpu
:
:
Renderable
=
skgpu
:
:
Renderable
:
:
kNo
int
renderTargetSampleCnt
=
1
skgpu
:
:
Mipmapped
=
skgpu
:
:
Mipmapped
:
:
kNo
skgpu
:
:
Protected
=
skgpu
:
:
Protected
:
:
kNo
skgpu
:
:
Budgeted
=
skgpu
:
:
Budgeted
:
:
kYes
)
;
std
:
:
unique_ptr
<
skgpu
:
:
ganesh
:
:
SurfaceFillContext
>
makeSFC
(
GrImageInfo
std
:
:
string_view
label
SkBackingFit
=
SkBackingFit
:
:
kExact
int
sampleCount
=
1
skgpu
:
:
Mipmapped
=
skgpu
:
:
Mipmapped
:
:
kNo
skgpu
:
:
Protected
=
skgpu
:
:
Protected
:
:
kNo
GrSurfaceOrigin
=
kTopLeft_GrSurfaceOrigin
skgpu
:
:
Budgeted
=
skgpu
:
:
Budgeted
:
:
kYes
)
;
std
:
:
unique_ptr
<
skgpu
:
:
ganesh
:
:
SurfaceFillContext
>
makeSFC
(
SkAlphaType
sk_sp
<
SkColorSpace
>
SkISize
dimensions
SkBackingFit
const
GrBackendFormat
&
int
sampleCount
skgpu
:
:
Mipmapped
skgpu
:
:
Protected
skgpu
:
:
Swizzle
readSwizzle
skgpu
:
:
Swizzle
writeSwizzle
GrSurfaceOrigin
skgpu
:
:
Budgeted
std
:
:
string_view
label
)
;
std
:
:
unique_ptr
<
skgpu
:
:
ganesh
:
:
SurfaceFillContext
>
makeSFCWithFallback
(
GrImageInfo
SkBackingFit
=
SkBackingFit
:
:
kExact
int
sampleCount
=
1
skgpu
:
:
Mipmapped
=
skgpu
:
:
Mipmapped
:
:
kNo
skgpu
:
:
Protected
=
skgpu
:
:
Protected
:
:
kNo
GrSurfaceOrigin
=
kTopLeft_GrSurfaceOrigin
skgpu
:
:
Budgeted
=
skgpu
:
:
Budgeted
:
:
kYes
)
;
std
:
:
unique_ptr
<
skgpu
:
:
ganesh
:
:
SurfaceFillContext
>
makeSFCFromBackendTexture
(
GrColorInfo
const
GrBackendTexture
&
int
sampleCount
GrSurfaceOrigin
sk_sp
<
skgpu
:
:
RefCntedCallback
>
releaseHelper
)
;
protected
:
explicit
GrRecordingContextPriv
(
GrRecordingContext
*
rContext
)
:
GrImageContextPriv
(
rContext
)
{
}
private
:
GrRecordingContextPriv
(
const
GrRecordingContextPriv
&
)
=
delete
;
GrRecordingContextPriv
&
operator
=
(
const
GrRecordingContextPriv
&
)
=
delete
;
const
GrRecordingContextPriv
*
operator
&
(
)
const
;
GrRecordingContextPriv
*
operator
&
(
)
;
friend
class
GrRecordingContext
;
using
INHERITED
=
GrImageContextPriv
;
}
;
inline
GrRecordingContextPriv
GrRecordingContext
:
:
priv
(
)
{
return
GrRecordingContextPriv
(
this
)
;
}
inline
const
GrRecordingContextPriv
GrRecordingContext
:
:
priv
(
)
const
{
return
GrRecordingContextPriv
(
const_cast
<
GrRecordingContext
*
>
(
this
)
)
;
}
#
endif
