#
ifndef
GrProgramDesc_DEFINED
#
define
GrProgramDesc_DEFINED
#
include
"
include
/
core
/
SkString
.
h
"
#
include
"
include
/
private
/
base
/
SkAlign
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
"
include
/
private
/
base
/
SkTo
.
h
"
#
include
"
include
/
private
/
gpu
/
ganesh
/
GrTypesPriv
.
h
"
#
include
<
limits
.
h
>
class
GrCaps
;
class
GrProgramInfo
;
class
GrRenderTarget
;
class
GrProgramDesc
{
public
:
GrProgramDesc
(
const
GrProgramDesc
&
other
)
=
default
;
GrProgramDesc
&
operator
=
(
const
GrProgramDesc
&
other
)
=
default
;
bool
isValid
(
)
const
{
return
!
fKey
.
empty
(
)
;
}
void
reset
(
)
{
*
this
=
GrProgramDesc
{
}
;
}
const
uint32_t
*
asKey
(
)
const
{
return
fKey
.
data
(
)
;
}
uint32_t
keyLength
(
)
const
{
return
SkToU32
(
fKey
.
size
(
)
*
sizeof
(
uint32_t
)
)
;
}
bool
operator
=
=
(
const
GrProgramDesc
&
that
)
const
{
return
this
-
>
fKey
=
=
that
.
fKey
;
}
bool
operator
!
=
(
const
GrProgramDesc
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
uint32_t
initialKeyLength
(
)
const
{
return
fInitialKeyLength
;
}
static
SkString
Describe
(
const
GrProgramInfo
&
const
GrCaps
&
)
;
protected
:
friend
class
GrDawnCaps
;
friend
class
GrD3DCaps
;
friend
class
GrGLCaps
;
friend
class
GrMockCaps
;
friend
class
GrMtlCaps
;
friend
class
GrVkCaps
;
friend
class
GrGLGpu
;
friend
class
GrMtlResourceProvider
;
GrProgramDesc
(
)
{
}
static
void
Build
(
GrProgramDesc
*
const
GrProgramInfo
&
const
GrCaps
&
)
;
static
bool
BuildFromData
(
GrProgramDesc
*
desc
const
void
*
keyData
size_t
keyLength
)
{
if
(
!
SkTFitsIn
<
int
>
(
keyLength
)
|
|
!
SkIsAlign4
(
keyLength
)
)
{
return
false
;
}
desc
-
>
fKey
.
reset
(
SkToInt
(
keyLength
/
4
)
)
;
memcpy
(
desc
-
>
fKey
.
begin
(
)
keyData
keyLength
)
;
return
true
;
}
enum
{
kHeaderSize
=
1
kMaxPreallocProcessors
=
8
kIntsPerProcessor
=
4
kPreAllocSize
=
kHeaderSize
+
kMaxPreallocProcessors
*
kIntsPerProcessor
}
;
using
KeyType
=
SkSTArray
<
kPreAllocSize
uint32_t
true
>
;
KeyType
*
key
(
)
{
return
&
fKey
;
}
private
:
SkSTArray
<
kPreAllocSize
uint32_t
true
>
fKey
;
uint32_t
fInitialKeyLength
=
0
;
}
;
#
endif
