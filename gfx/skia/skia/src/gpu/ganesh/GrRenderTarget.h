#
ifndef
GrRenderTarget_DEFINED
#
define
GrRenderTarget_DEFINED
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrSurface
.
h
"
class
GrCaps
;
class
GrAttachment
;
class
GrBackendRenderTarget
;
class
GrRenderTarget
:
virtual
public
GrSurface
{
public
:
using
GrSurface
:
:
setRequiresManualMSAAResolve
;
using
GrSurface
:
:
requiresManualMSAAResolve
;
virtual
bool
alwaysClearStencil
(
)
const
{
return
false
;
}
GrRenderTarget
*
asRenderTarget
(
)
override
{
return
this
;
}
const
GrRenderTarget
*
asRenderTarget
(
)
const
override
{
return
this
;
}
int
numSamples
(
)
const
{
return
fSampleCnt
;
}
virtual
GrBackendRenderTarget
getBackendRenderTarget
(
)
const
=
0
;
GrAttachment
*
getStencilAttachment
(
bool
useMSAASurface
)
const
{
return
(
useMSAASurface
)
?
fMSAAStencilAttachment
.
get
(
)
:
fStencilAttachment
.
get
(
)
;
}
GrAttachment
*
getStencilAttachment
(
)
const
{
return
getStencilAttachment
(
this
-
>
numSamples
(
)
>
1
)
;
}
virtual
bool
canAttemptStencilAttachment
(
bool
useMSAASurface
)
const
=
0
;
void
attachStencilAttachment
(
sk_sp
<
GrAttachment
>
stencil
bool
useMSAASurface
)
;
int
numStencilBits
(
bool
useMSAASurface
)
const
;
int
getSamplePatternKey
(
)
;
const
SkTArray
<
SkPoint
>
&
getSampleLocations
(
)
;
protected
:
GrRenderTarget
(
GrGpu
*
const
SkISize
&
int
sampleCount
GrProtected
std
:
:
string_view
label
sk_sp
<
GrAttachment
>
stenicl
=
nullptr
)
;
~
GrRenderTarget
(
)
override
;
void
onAbandon
(
)
override
;
void
onRelease
(
)
override
;
private
:
virtual
bool
completeStencilAttachment
(
GrAttachment
*
stencil
bool
useMSAASurface
)
=
0
;
sk_sp
<
GrAttachment
>
fStencilAttachment
;
sk_sp
<
GrAttachment
>
fMSAAStencilAttachment
;
int
fSampleCnt
;
using
INHERITED
=
GrSurface
;
}
;
#
endif
