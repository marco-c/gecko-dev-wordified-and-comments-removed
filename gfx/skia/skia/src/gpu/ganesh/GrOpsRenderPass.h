#
ifndef
GrOpsRenderPass_DEFINED
#
define
GrOpsRenderPass_DEFINED
#
include
"
include
/
core
/
SkDrawable
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrBuffer
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrDeferredUpload
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrPipeline
.
h
"
class
GrOpFlushState
;
class
GrGpu
;
class
GrPipeline
;
class
GrGeometryProcessor
;
class
GrProgramInfo
;
class
GrRenderTarget
;
class
GrScissorState
;
class
GrSemaphore
;
struct
SkIRect
;
struct
SkRect
;
class
GrOpsRenderPass
{
public
:
virtual
~
GrOpsRenderPass
(
)
{
}
struct
LoadAndStoreInfo
{
GrLoadOp
fLoadOp
;
GrStoreOp
fStoreOp
;
std
:
:
array
<
float
4
>
fClearColor
;
}
;
struct
StencilLoadAndStoreInfo
{
GrLoadOp
fLoadOp
;
GrStoreOp
fStoreOp
;
}
;
void
begin
(
)
;
void
end
(
)
;
void
bindPipeline
(
const
GrProgramInfo
&
const
SkRect
&
drawBounds
)
;
void
setScissorRect
(
const
SkIRect
&
)
;
void
bindTextures
(
const
GrGeometryProcessor
&
const
GrSurfaceProxy
*
const
geomProcTextures
[
]
const
GrPipeline
&
)
;
void
bindBuffers
(
sk_sp
<
const
GrBuffer
>
indexBuffer
sk_sp
<
const
GrBuffer
>
instanceBuffer
sk_sp
<
const
GrBuffer
>
vertexBuffer
GrPrimitiveRestart
=
GrPrimitiveRestart
:
:
kNo
)
;
void
draw
(
int
vertexCount
int
baseVertex
)
;
void
drawIndexed
(
int
indexCount
int
baseIndex
uint16_t
minIndexValue
uint16_t
maxIndexValue
int
baseVertex
)
;
void
drawInstanced
(
int
instanceCount
int
baseInstance
int
vertexCount
int
baseVertex
)
;
void
drawIndexedInstanced
(
int
indexCount
int
baseIndex
int
instanceCount
int
baseInstance
int
baseVertex
)
;
void
drawIndirect
(
const
GrBuffer
*
drawIndirectBuffer
size_t
bufferOffset
int
drawCount
)
;
void
drawIndexedIndirect
(
const
GrBuffer
*
drawIndirectBuffer
size_t
bufferOffset
int
drawCount
)
;
void
drawIndexPattern
(
int
patternIndexCount
int
patternRepeatCount
int
maxPatternRepetitionsInIndexBuffer
int
patternVertexCount
int
baseVertex
)
;
virtual
void
inlineUpload
(
GrOpFlushState
*
GrDeferredTextureUploadFn
&
)
=
0
;
void
clear
(
const
GrScissorState
&
scissor
std
:
:
array
<
float
4
>
color
)
;
void
clearStencilClip
(
const
GrScissorState
&
scissor
bool
insideStencilMask
)
;
void
executeDrawable
(
std
:
:
unique_ptr
<
SkDrawable
:
:
GpuDrawHandler
>
)
;
protected
:
GrOpsRenderPass
(
)
:
fOrigin
(
kTopLeft_GrSurfaceOrigin
)
fRenderTarget
(
nullptr
)
{
}
GrOpsRenderPass
(
GrRenderTarget
*
rt
GrSurfaceOrigin
origin
)
:
fOrigin
(
origin
)
fRenderTarget
(
rt
)
{
}
void
set
(
GrRenderTarget
*
rt
GrSurfaceOrigin
origin
)
{
SkASSERT
(
!
fRenderTarget
)
;
fRenderTarget
=
rt
;
fOrigin
=
origin
;
}
GrSurfaceOrigin
fOrigin
;
GrRenderTarget
*
fRenderTarget
;
sk_sp
<
const
GrBuffer
>
fActiveIndexBuffer
;
sk_sp
<
const
GrBuffer
>
fActiveVertexBuffer
;
sk_sp
<
const
GrBuffer
>
fActiveInstanceBuffer
;
private
:
virtual
GrGpu
*
gpu
(
)
=
0
;
void
resetActiveBuffers
(
)
{
fActiveIndexBuffer
.
reset
(
)
;
fActiveInstanceBuffer
.
reset
(
)
;
fActiveVertexBuffer
.
reset
(
)
;
}
bool
prepareToDraw
(
)
;
virtual
void
onBegin
(
)
{
}
virtual
void
onEnd
(
)
{
}
virtual
bool
onBindPipeline
(
const
GrProgramInfo
&
const
SkRect
&
drawBounds
)
=
0
;
virtual
void
onSetScissorRect
(
const
SkIRect
&
)
=
0
;
virtual
bool
onBindTextures
(
const
GrGeometryProcessor
&
const
GrSurfaceProxy
*
const
geomProcTextures
[
]
const
GrPipeline
&
)
=
0
;
virtual
void
onBindBuffers
(
sk_sp
<
const
GrBuffer
>
indexBuffer
sk_sp
<
const
GrBuffer
>
instanceBuffer
sk_sp
<
const
GrBuffer
>
vertexBuffer
GrPrimitiveRestart
)
=
0
;
virtual
void
onDraw
(
int
vertexCount
int
baseVertex
)
=
0
;
virtual
void
onDrawIndexed
(
int
indexCount
int
baseIndex
uint16_t
minIndexValue
uint16_t
maxIndexValue
int
baseVertex
)
=
0
;
virtual
void
onDrawInstanced
(
int
instanceCount
int
baseInstance
int
vertexCount
int
baseVertex
)
=
0
;
virtual
void
onDrawIndexedInstanced
(
int
indexCount
int
baseIndex
int
instanceCount
int
baseInstance
int
baseVertex
)
=
0
;
virtual
void
onDrawIndirect
(
const
GrBuffer
*
size_t
offset
int
drawCount
)
{
SK_ABORT
(
"
Not
implemented
.
"
)
;
}
virtual
void
onDrawIndexedIndirect
(
const
GrBuffer
*
size_t
offset
int
drawCount
)
{
SK_ABORT
(
"
Not
implemented
.
"
)
;
}
virtual
void
onClear
(
const
GrScissorState
&
std
:
:
array
<
float
4
>
color
)
=
0
;
virtual
void
onClearStencilClip
(
const
GrScissorState
&
bool
insideStencilMask
)
=
0
;
virtual
void
onExecuteDrawable
(
std
:
:
unique_ptr
<
SkDrawable
:
:
GpuDrawHandler
>
)
{
}
enum
class
DrawPipelineStatus
{
kOk
=
0
kNotConfigured
kFailedToBind
}
;
DrawPipelineStatus
fDrawPipelineStatus
=
DrawPipelineStatus
:
:
kNotConfigured
;
GrXferBarrierType
fXferBarrierType
;
#
ifdef
SK_DEBUG
enum
class
DynamicStateStatus
{
kDisabled
kUninitialized
kConfigured
}
;
DynamicStateStatus
fScissorStatus
;
DynamicStateStatus
fTextureBindingStatus
;
bool
fHasIndexBuffer
;
DynamicStateStatus
fInstanceBufferStatus
;
DynamicStateStatus
fVertexBufferStatus
;
#
endif
using
INHERITED
=
GrOpsRenderPass
;
}
;
#
endif
