#
ifndef
GrDDLTask_DEFINED
#
define
GrDDLTask_DEFINED
#
include
"
include
/
core
/
SkPoint
.
h
"
#
include
"
src
/
gpu
/
ganesh
/
GrRenderTask
.
h
"
class
GrRenderTargetProxy
;
class
GrDDLTask
final
:
public
GrRenderTask
{
public
:
GrDDLTask
(
GrDrawingManager
*
sk_sp
<
GrRenderTargetProxy
>
ddlTarget
sk_sp
<
const
SkDeferredDisplayList
>
SkIPoint
offset
)
;
~
GrDDLTask
(
)
override
;
bool
requiresExplicitCleanup
(
)
const
override
{
return
true
;
}
void
endFlush
(
GrDrawingManager
*
)
override
;
void
disown
(
GrDrawingManager
*
)
override
;
private
:
bool
onIsUsed
(
GrSurfaceProxy
*
)
const
override
;
void
gatherProxyIntervals
(
GrResourceAllocator
*
)
const
override
;
ExpectedOutcome
onMakeClosed
(
GrRecordingContext
*
SkIRect
*
targetUpdateBounds
)
override
;
void
onPrePrepare
(
GrRecordingContext
*
)
override
{
SkASSERT
(
0
)
;
}
void
onPrepare
(
GrOpFlushState
*
)
override
;
bool
onExecute
(
GrOpFlushState
*
)
override
;
#
if
GR_TEST_UTILS
void
dump
(
const
SkString
&
label
SkString
indent
bool
printDependencies
bool
close
)
const
final
;
const
char
*
name
(
)
const
final
{
return
"
DDL
"
;
}
#
endif
#
ifdef
SK_DEBUG
void
visitProxies_debugOnly
(
const
GrVisitProxyFunc
&
)
const
override
{
}
#
endif
sk_sp
<
const
SkDeferredDisplayList
>
fDDL
;
sk_sp
<
GrRenderTargetProxy
>
fDDLTarget
;
SkIPoint
fOffset
;
typedef
GrRenderTask
INHERITED
;
}
;
#
endif
