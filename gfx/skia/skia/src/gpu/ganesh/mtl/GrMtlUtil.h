#
ifndef
GrMtlUtil_DEFINED
#
define
GrMtlUtil_DEFINED
#
import
<
Metal
/
Metal
.
h
>
#
include
"
include
/
gpu
/
GrBackendSurface
.
h
"
#
include
"
include
/
gpu
/
GrContextOptions
.
h
"
#
include
"
include
/
private
/
gpu
/
ganesh
/
GrMtlTypesPriv
.
h
"
#
include
"
include
/
private
/
gpu
/
ganesh
/
GrTypesPriv
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLProgram
.
h
"
class
GrMtlGpu
;
class
GrSurface
;
enum
class
SkTextureCompressionType
;
namespace
SkSL
{
enum
class
ProgramKind
:
int8_t
;
struct
ProgramSettings
;
}
GR_NORETAIN_BEGIN
SK_ALWAYS_INLINE
id
<
MTLTexture
>
GrGetMTLTexture
(
const
void
*
mtlTexture
)
{
#
if
__has_feature
(
objc_arc
)
return
(
__bridge
id
<
MTLTexture
>
)
mtlTexture
;
#
else
return
(
id
<
MTLTexture
>
)
mtlTexture
;
#
endif
}
SK_ALWAYS_INLINE
const
void
*
GrGetPtrFromId
(
id
idObject
)
{
#
if
__has_feature
(
objc_arc
)
return
(
__bridge
const
void
*
)
idObject
;
#
else
return
(
const
void
*
)
idObject
;
#
endif
}
SK_ALWAYS_INLINE
CF_RETURNS_RETAINED
const
void
*
GrRetainPtrFromId
(
id
idObject
)
{
return
CFBridgingRetain
(
idObject
)
;
}
enum
class
GrMtlErrorCode
{
kTimeout
=
1
}
;
NSError
*
GrCreateMtlError
(
NSString
*
description
GrMtlErrorCode
errorCode
)
;
MTLTextureDescriptor
*
GrGetMTLTextureDescriptor
(
id
<
MTLTexture
>
mtlTexture
)
;
id
<
MTLLibrary
>
GrCompileMtlShaderLibrary
(
const
GrMtlGpu
*
gpu
const
std
:
:
string
&
msl
GrContextOptions
:
:
ShaderErrorHandler
*
errorHandler
)
;
void
GrPrecompileMtlShaderLibrary
(
const
GrMtlGpu
*
gpu
const
std
:
:
string
&
msl
)
;
id
<
MTLLibrary
>
GrMtlNewLibraryWithSource
(
id
<
MTLDevice
>
NSString
*
mslCode
MTLCompileOptions
*
NSError
*
*
)
;
id
<
MTLRenderPipelineState
>
GrMtlNewRenderPipelineStateWithDescriptor
(
id
<
MTLDevice
>
MTLRenderPipelineDescriptor
*
NSError
*
*
)
;
id
<
MTLTexture
>
GrGetMTLTextureFromSurface
(
GrSurface
*
surface
)
;
static
inline
MTLPixelFormat
GrBackendFormatAsMTLPixelFormat
(
const
GrBackendFormat
&
format
)
{
return
static_cast
<
MTLPixelFormat
>
(
format
.
asMtlFormat
(
)
)
;
}
SkTextureCompressionType
GrMtlFormatToCompressionType
(
MTLPixelFormat
mtlFormat
)
;
int
GrMtlFormatStencilBits
(
MTLPixelFormat
)
;
GR_NORETAIN_END
#
endif
