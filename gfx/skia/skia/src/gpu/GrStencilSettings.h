#
ifndef
GrStencilSettings_DEFINED
#
define
GrStencilSettings_DEFINED
#
include
"
GrUserStencilSettings
.
h
"
#
include
"
SkRegion
.
h
"
class
GrProcessorKeyBuilder
;
enum
class
GrStencilTest
:
uint16_t
{
kAlways
kNever
kGreater
kGEqual
kLess
kLEqual
kEqual
kNotEqual
}
;
static
constexpr
int
kGrStencilTestCount
=
1
+
(
int
)
GrStencilTest
:
:
kNotEqual
;
enum
class
GrStencilOp
:
uint8_t
{
kKeep
kZero
kReplace
kInvert
kIncWrap
kDecWrap
kIncClamp
kDecClamp
}
;
static
constexpr
int
kGrStencilOpCount
=
1
+
(
int
)
GrStencilOp
:
:
kDecClamp
;
class
GrStencilSettings
{
public
:
GrStencilSettings
(
)
{
this
-
>
setDisabled
(
)
;
}
GrStencilSettings
(
const
GrUserStencilSettings
&
user
bool
hasStencilClip
int
numStencilBits
)
{
this
-
>
reset
(
user
hasStencilClip
numStencilBits
)
;
}
GrStencilSettings
(
const
GrStencilSettings
&
that
)
{
this
-
>
reset
(
that
)
;
}
GrStencilSettings
&
operator
=
(
const
GrStencilSettings
&
that
)
{
this
-
>
reset
(
that
)
;
return
*
this
;
}
void
invalidate
(
)
{
fFlags
|
=
kInvalid_PrivateFlag
;
}
void
setDisabled
(
)
{
fFlags
=
kAll_StencilFlags
;
}
void
reset
(
const
GrUserStencilSettings
&
bool
hasStencilClip
int
numStencilBits
)
;
void
reset
(
const
GrStencilSettings
&
)
;
bool
isValid
(
)
const
{
return
!
(
fFlags
&
kInvalid_PrivateFlag
)
;
}
bool
isDisabled
(
)
const
{
SkASSERT
(
this
-
>
isValid
(
)
)
;
return
fFlags
&
kDisabled_StencilFlag
;
}
bool
doesWrite
(
)
const
{
SkASSERT
(
this
-
>
isValid
(
)
)
;
return
!
(
fFlags
&
kNoModifyStencil_StencilFlag
)
;
}
bool
isTwoSided
(
)
const
{
SkASSERT
(
this
-
>
isValid
(
)
)
;
return
!
(
fFlags
&
kSingleSided_StencilFlag
)
;
}
bool
usesWrapOp
(
)
const
{
SkASSERT
(
this
-
>
isValid
(
)
)
;
return
!
(
fFlags
&
kNoWrapOps_StencilFlag
)
;
}
void
genKey
(
GrProcessorKeyBuilder
*
b
)
const
;
bool
operator
!
=
(
const
GrStencilSettings
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
bool
operator
=
=
(
const
GrStencilSettings
&
)
const
;
struct
Face
:
public
GrTStencilFaceSettings
<
GrStencilTest
GrStencilOp
>
{
void
reset
(
const
GrUserStencilSettings
:
:
Face
&
bool
useStencilClip
int
numStencilBits
)
;
void
setDisabled
(
)
;
}
;
const
Face
&
front
(
)
const
{
SkASSERT
(
!
this
-
>
isDisabled
(
)
)
;
return
fFront
;
}
const
Face
&
back
(
)
const
{
SkASSERT
(
this
-
>
isTwoSided
(
)
)
;
return
fBack
;
}
static
GrUserStencilSettings
const
*
const
*
GetClipPasses
(
SkRegion
:
:
Op
op
bool
canBeDirect
bool
invertedFill
bool
*
drawDirectToClip
)
;
private
:
enum
{
kInvalid_PrivateFlag
=
(
kLast_StencilFlag
<
<
1
)
}
;
uint32_t
fFlags
;
Face
fFront
;
Face
fBack
;
}
;
#
endif
