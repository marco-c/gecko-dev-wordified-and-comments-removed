#
ifndef
GrOpList_DEFINED
#
define
GrOpList_DEFINED
#
include
"
SkRefCnt
.
h
"
#
include
"
SkTDArray
.
h
"
class
GrAuditTrail
;
class
GrOpFlushState
;
class
GrRenderTargetOpList
;
class
GrSurface
;
class
GrSurfaceProxy
;
class
GrTextureOpList
;
class
GrOpList
:
public
SkRefCnt
{
public
:
GrOpList
(
GrSurfaceProxy
*
surfaceProxy
GrAuditTrail
*
auditTrail
)
;
~
GrOpList
(
)
override
;
virtual
void
prepareOps
(
GrOpFlushState
*
flushState
)
=
0
;
virtual
bool
executeOps
(
GrOpFlushState
*
flushState
)
=
0
;
virtual
void
makeClosed
(
)
{
#
ifdef
ENABLE_MDB
this
-
>
setFlag
(
kClosed_Flag
)
;
#
endif
}
virtual
void
reset
(
)
=
0
;
virtual
void
abandonGpuResources
(
)
=
0
;
virtual
void
freeGpuResources
(
)
=
0
;
void
clearTarget
(
)
{
fTarget
=
nullptr
;
}
bool
isClosed
(
)
const
{
return
this
-
>
isSetFlag
(
kClosed_Flag
)
;
}
void
addDependency
(
GrSurface
*
dependedOn
)
;
bool
dependsOn
(
GrOpList
*
dependedOn
)
const
{
return
fDependencies
.
find
(
dependedOn
)
>
=
0
;
}
virtual
GrTextureOpList
*
asTextureOpList
(
)
{
return
nullptr
;
}
virtual
GrRenderTargetOpList
*
asRenderTargetOpList
(
)
{
return
nullptr
;
}
int32_t
uniqueID
(
)
const
{
return
fUniqueID
;
}
SkDEBUGCODE
(
virtual
void
dump
(
)
const
;
)
private
:
friend
class
GrDrawingManager
;
static
uint32_t
CreateUniqueID
(
)
;
enum
Flags
{
kClosed_Flag
=
0x01
kWasOutput_Flag
=
0x02
kTempMark_Flag
=
0x04
}
;
void
setFlag
(
uint32_t
flag
)
{
fFlags
|
=
flag
;
}
void
resetFlag
(
uint32_t
flag
)
{
fFlags
&
=
~
flag
;
}
bool
isSetFlag
(
uint32_t
flag
)
const
{
return
SkToBool
(
fFlags
&
flag
)
;
}
struct
TopoSortTraits
{
static
void
Output
(
GrOpList
*
dt
int
)
{
dt
-
>
setFlag
(
GrOpList
:
:
kWasOutput_Flag
)
;
}
static
bool
WasOutput
(
const
GrOpList
*
dt
)
{
return
dt
-
>
isSetFlag
(
GrOpList
:
:
kWasOutput_Flag
)
;
}
static
void
SetTempMark
(
GrOpList
*
dt
)
{
dt
-
>
setFlag
(
GrOpList
:
:
kTempMark_Flag
)
;
}
static
void
ResetTempMark
(
GrOpList
*
dt
)
{
dt
-
>
resetFlag
(
GrOpList
:
:
kTempMark_Flag
)
;
}
static
bool
IsTempMarked
(
const
GrOpList
*
dt
)
{
return
dt
-
>
isSetFlag
(
GrOpList
:
:
kTempMark_Flag
)
;
}
static
int
NumDependencies
(
const
GrOpList
*
dt
)
{
return
dt
-
>
fDependencies
.
count
(
)
;
}
static
GrOpList
*
Dependency
(
GrOpList
*
dt
int
index
)
{
return
dt
-
>
fDependencies
[
index
]
;
}
}
;
void
addDependency
(
GrOpList
*
dependedOn
)
;
uint32_t
fUniqueID
;
uint32_t
fFlags
;
GrSurfaceProxy
*
fTarget
;
SkTDArray
<
GrOpList
*
>
fDependencies
;
protected
:
GrAuditTrail
*
fAuditTrail
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
