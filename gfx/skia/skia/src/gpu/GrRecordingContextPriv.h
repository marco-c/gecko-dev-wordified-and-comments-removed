#
ifndef
GrRecordingContextPriv_DEFINED
#
define
GrRecordingContextPriv_DEFINED
#
include
"
GrRecordingContext
.
h
"
class
GrRecordingContextPriv
{
public
:
uint32_t
contextID
(
)
const
{
return
fContext
-
>
contextID
(
)
;
}
bool
matches
(
GrContext_Base
*
candidate
)
const
{
return
fContext
-
>
matches
(
candidate
)
;
}
const
GrContextOptions
&
options
(
)
const
{
return
fContext
-
>
options
(
)
;
}
bool
explicitlyAllocateGPUResources
(
)
const
{
return
fContext
-
>
explicitlyAllocateGPUResources
(
)
;
}
const
GrCaps
*
caps
(
)
const
{
return
fContext
-
>
caps
(
)
;
}
sk_sp
<
const
GrCaps
>
refCaps
(
)
const
;
sk_sp
<
GrSkSLFPFactoryCache
>
fpFactoryCache
(
)
;
GrImageContext
*
asImageContext
(
)
{
return
fContext
-
>
asImageContext
(
)
;
}
GrRecordingContext
*
asRecordingContext
(
)
{
return
fContext
-
>
asRecordingContext
(
)
;
}
GrContext
*
asDirectContext
(
)
{
return
fContext
-
>
asDirectContext
(
)
;
}
GrProxyProvider
*
proxyProvider
(
)
{
return
fContext
-
>
proxyProvider
(
)
;
}
const
GrProxyProvider
*
proxyProvider
(
)
const
{
return
fContext
-
>
proxyProvider
(
)
;
}
bool
abandoned
(
)
const
{
return
fContext
-
>
abandoned
(
)
;
}
SkDEBUGCODE
(
GrSingleOwner
*
singleOwner
(
)
const
{
return
fContext
-
>
singleOwner
(
)
;
}
)
GrDrawingManager
*
drawingManager
(
)
{
return
fContext
-
>
drawingManager
(
)
;
}
sk_sp
<
GrOpMemoryPool
>
refOpMemoryPool
(
)
;
GrOpMemoryPool
*
opMemoryPool
(
)
{
return
fContext
-
>
opMemoryPool
(
)
;
}
GrStrikeCache
*
getGrStrikeCache
(
)
{
return
fContext
-
>
getGrStrikeCache
(
)
;
}
GrTextBlobCache
*
getTextBlobCache
(
)
{
return
fContext
-
>
getTextBlobCache
(
)
;
}
void
addOnFlushCallbackObject
(
GrOnFlushCallbackObject
*
)
;
sk_sp
<
GrSurfaceContext
>
makeWrappedSurfaceContext
(
sk_sp
<
GrSurfaceProxy
>
sk_sp
<
SkColorSpace
>
=
nullptr
const
SkSurfaceProps
*
=
nullptr
)
;
sk_sp
<
GrSurfaceContext
>
makeDeferredSurfaceContext
(
const
GrBackendFormat
&
const
GrSurfaceDesc
&
GrSurfaceOrigin
GrMipMapped
SkBackingFit
SkBudgeted
sk_sp
<
SkColorSpace
>
colorSpace
=
nullptr
const
SkSurfaceProps
*
=
nullptr
)
;
sk_sp
<
GrRenderTargetContext
>
makeDeferredRenderTargetContext
(
const
GrBackendFormat
&
format
SkBackingFit
fit
int
width
int
height
GrPixelConfig
config
sk_sp
<
SkColorSpace
>
colorSpace
int
sampleCnt
=
1
GrMipMapped
=
GrMipMapped
:
:
kNo
GrSurfaceOrigin
origin
=
kBottomLeft_GrSurfaceOrigin
const
SkSurfaceProps
*
surfaceProps
=
nullptr
SkBudgeted
=
SkBudgeted
:
:
kYes
)
;
sk_sp
<
GrRenderTargetContext
>
makeDeferredRenderTargetContextWithFallback
(
const
GrBackendFormat
&
format
SkBackingFit
fit
int
width
int
height
GrPixelConfig
config
sk_sp
<
SkColorSpace
>
colorSpace
int
sampleCnt
=
1
GrMipMapped
=
GrMipMapped
:
:
kNo
GrSurfaceOrigin
origin
=
kBottomLeft_GrSurfaceOrigin
const
SkSurfaceProps
*
surfaceProps
=
nullptr
SkBudgeted
budgeted
=
SkBudgeted
:
:
kYes
)
;
GrAuditTrail
*
auditTrail
(
)
{
return
fContext
-
>
auditTrail
(
)
;
}
GrContext
*
backdoor
(
)
;
private
:
explicit
GrRecordingContextPriv
(
GrRecordingContext
*
context
)
:
fContext
(
context
)
{
}
GrRecordingContextPriv
(
const
GrRecordingContextPriv
&
)
;
GrRecordingContextPriv
&
operator
=
(
const
GrRecordingContextPriv
&
)
;
const
GrRecordingContextPriv
*
operator
&
(
)
const
;
GrRecordingContextPriv
*
operator
&
(
)
;
GrRecordingContext
*
fContext
;
friend
class
GrRecordingContext
;
}
;
inline
GrRecordingContextPriv
GrRecordingContext
:
:
priv
(
)
{
return
GrRecordingContextPriv
(
this
)
;
}
inline
const
GrRecordingContextPriv
GrRecordingContext
:
:
priv
(
)
const
{
return
GrRecordingContextPriv
(
const_cast
<
GrRecordingContext
*
>
(
this
)
)
;
}
#
endif
