#
include
"
src
/
gpu
/
GrCopyRenderTask
.
h
"
#
include
"
src
/
gpu
/
GrGpu
.
h
"
#
include
"
src
/
gpu
/
GrOpFlushState
.
h
"
#
include
"
src
/
gpu
/
GrResourceAllocator
.
h
"
sk_sp
<
GrRenderTask
>
GrCopyRenderTask
:
:
Make
(
sk_sp
<
GrSurfaceProxy
>
srcProxy
const
SkIRect
&
srcRect
sk_sp
<
GrSurfaceProxy
>
dstProxy
const
SkIPoint
&
dstPoint
const
GrCaps
*
caps
)
{
SkASSERT
(
dstProxy
)
;
SkASSERT
(
srcProxy
)
;
SkIRect
clippedSrcRect
;
SkIPoint
clippedDstPoint
;
if
(
!
GrClipSrcRectAndDstPoint
(
dstProxy
-
>
isize
(
)
srcProxy
-
>
isize
(
)
srcRect
dstPoint
&
clippedSrcRect
&
clippedDstPoint
)
)
{
return
nullptr
;
}
if
(
caps
-
>
isFormatCompressed
(
dstProxy
-
>
backendFormat
(
)
)
)
{
return
nullptr
;
}
SkASSERT
(
dstProxy
-
>
origin
(
)
=
=
srcProxy
-
>
origin
(
)
)
;
if
(
srcProxy
-
>
origin
(
)
=
=
kBottomLeft_GrSurfaceOrigin
)
{
int
rectHeight
=
clippedSrcRect
.
height
(
)
;
clippedSrcRect
.
fTop
=
srcProxy
-
>
height
(
)
-
clippedSrcRect
.
fBottom
;
clippedSrcRect
.
fBottom
=
clippedSrcRect
.
fTop
+
rectHeight
;
clippedDstPoint
.
fY
=
dstProxy
-
>
height
(
)
-
clippedDstPoint
.
fY
-
rectHeight
;
}
sk_sp
<
GrCopyRenderTask
>
task
(
new
GrCopyRenderTask
(
std
:
:
move
(
srcProxy
)
clippedSrcRect
std
:
:
move
(
dstProxy
)
clippedDstPoint
)
)
;
return
task
;
}
GrCopyRenderTask
:
:
GrCopyRenderTask
(
sk_sp
<
GrSurfaceProxy
>
srcProxy
const
SkIRect
&
srcRect
sk_sp
<
GrSurfaceProxy
>
dstProxy
const
SkIPoint
&
dstPoint
)
:
GrRenderTask
(
std
:
:
move
(
dstProxy
)
)
fSrcProxy
(
std
:
:
move
(
srcProxy
)
)
fSrcRect
(
srcRect
)
fDstPoint
(
dstPoint
)
{
fTarget
-
>
setLastRenderTask
(
this
)
;
}
void
GrCopyRenderTask
:
:
gatherProxyIntervals
(
GrResourceAllocator
*
alloc
)
const
{
alloc
-
>
addInterval
(
fSrcProxy
.
get
(
)
alloc
-
>
curOp
(
)
alloc
-
>
curOp
(
)
GrResourceAllocator
:
:
ActualUse
:
:
kYes
)
;
alloc
-
>
addInterval
(
fTarget
.
get
(
)
alloc
-
>
curOp
(
)
alloc
-
>
curOp
(
)
GrResourceAllocator
:
:
ActualUse
:
:
kYes
)
;
alloc
-
>
incOps
(
)
;
}
bool
GrCopyRenderTask
:
:
onExecute
(
GrOpFlushState
*
flushState
)
{
if
(
!
fSrcProxy
-
>
isInstantiated
(
)
|
|
!
fTarget
-
>
isInstantiated
(
)
)
{
return
false
;
}
GrSurface
*
srcSurface
=
fSrcProxy
-
>
peekSurface
(
)
;
GrSurface
*
dstSurface
=
fTarget
-
>
peekSurface
(
)
;
if
(
fSrcProxy
-
>
origin
(
)
=
=
kBottomLeft_GrSurfaceOrigin
)
{
if
(
fSrcProxy
-
>
height
(
)
!
=
srcSurface
-
>
height
(
)
)
{
fSrcRect
.
offset
(
0
srcSurface
-
>
height
(
)
-
fSrcProxy
-
>
height
(
)
)
;
}
if
(
fTarget
-
>
height
(
)
!
=
dstSurface
-
>
height
(
)
)
{
fDstPoint
.
fY
=
fDstPoint
.
fY
+
(
dstSurface
-
>
height
(
)
-
fTarget
-
>
height
(
)
)
;
}
}
return
flushState
-
>
gpu
(
)
-
>
copySurface
(
dstSurface
srcSurface
fSrcRect
fDstPoint
)
;
}
