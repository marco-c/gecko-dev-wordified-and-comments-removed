#
include
"
GrGpuBuffer
.
h
"
#
include
"
GrCaps
.
h
"
#
include
"
GrGpu
.
h
"
GrGpuBuffer
:
:
GrGpuBuffer
(
GrGpu
*
gpu
size_t
sizeInBytes
GrGpuBufferType
type
GrAccessPattern
pattern
)
:
GrGpuResource
(
gpu
)
fMapPtr
(
nullptr
)
fSizeInBytes
(
sizeInBytes
)
fAccessPattern
(
pattern
)
fIntendedType
(
type
)
{
}
void
GrGpuBuffer
:
:
ComputeScratchKeyForDynamicVBO
(
size_t
size
GrGpuBufferType
intendedType
GrScratchKey
*
key
)
{
static
const
GrScratchKey
:
:
ResourceType
kType
=
GrScratchKey
:
:
GenerateResourceType
(
)
;
GrScratchKey
:
:
Builder
builder
(
key
kType
1
+
(
sizeof
(
size_t
)
+
3
)
/
4
)
;
builder
[
0
]
=
SkToU32
(
intendedType
)
;
builder
[
1
]
=
(
uint32_t
)
size
;
if
(
sizeof
(
size_t
)
>
4
)
{
builder
[
2
]
=
(
uint32_t
)
(
(
uint64_t
)
size
>
>
32
)
;
}
}
void
GrGpuBuffer
:
:
computeScratchKey
(
GrScratchKey
*
key
)
const
{
if
(
SkIsPow2
(
fSizeInBytes
)
&
&
kDynamic_GrAccessPattern
=
=
fAccessPattern
)
{
ComputeScratchKeyForDynamicVBO
(
fSizeInBytes
fIntendedType
key
)
;
}
}
