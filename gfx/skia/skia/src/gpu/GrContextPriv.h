#
ifndef
GrContextPriv_DEFINED
#
define
GrContextPriv_DEFINED
#
include
"
GrContext
.
h
"
class
GrContextPriv
{
public
:
GrDrawingManager
*
drawingManager
(
)
{
return
fContext
-
>
fDrawingManager
;
}
sk_sp
<
GrDrawContext
>
makeWrappedDrawContext
(
sk_sp
<
GrRenderTarget
>
rt
sk_sp
<
SkColorSpace
>
colorSpace
const
SkSurfaceProps
*
=
nullptr
)
;
sk_sp
<
GrDrawContext
>
makeBackendTextureDrawContext
(
const
GrBackendTextureDesc
&
desc
sk_sp
<
SkColorSpace
>
colorSpace
const
SkSurfaceProps
*
=
nullptr
GrWrapOwnership
=
kBorrow_GrWrapOwnership
)
;
sk_sp
<
GrDrawContext
>
makeBackendRenderTargetDrawContext
(
const
GrBackendRenderTargetDesc
&
desc
sk_sp
<
SkColorSpace
>
colorSpace
const
SkSurfaceProps
*
=
nullptr
)
;
sk_sp
<
GrDrawContext
>
makeBackendTextureAsRenderTargetDrawContext
(
const
GrBackendTextureDesc
&
desc
sk_sp
<
SkColorSpace
>
colorSpace
const
SkSurfaceProps
*
=
nullptr
)
;
private
:
explicit
GrContextPriv
(
GrContext
*
context
)
:
fContext
(
context
)
{
}
GrContextPriv
(
const
GrContextPriv
&
)
{
}
GrContextPriv
&
operator
=
(
const
GrContextPriv
&
)
;
const
GrContextPriv
*
operator
&
(
)
const
;
GrContextPriv
*
operator
&
(
)
;
GrContext
*
fContext
;
friend
class
GrContext
;
}
;
inline
GrContextPriv
GrContext
:
:
contextPriv
(
)
{
return
GrContextPriv
(
this
)
;
}
inline
const
GrContextPriv
GrContext
:
:
contextPriv
(
)
const
{
return
GrContextPriv
(
const_cast
<
GrContext
*
>
(
this
)
)
;
}
#
endif
