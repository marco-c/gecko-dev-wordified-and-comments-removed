#
ifndef
GrContextPriv_DEFINED
#
define
GrContextPriv_DEFINED
#
include
"
include
/
gpu
/
GrContext
.
h
"
#
include
"
src
/
gpu
/
GrSurfaceContext
.
h
"
#
include
"
src
/
gpu
/
text
/
GrAtlasManager
.
h
"
class
GrBackendFormat
;
class
GrBackendRenderTarget
;
class
GrOpMemoryPool
;
class
GrOnFlushCallbackObject
;
class
GrSemaphore
;
class
GrSkSLFPFactory
;
class
GrSkSLFPFactoryCache
;
class
GrSurfaceProxy
;
class
GrTextureContext
;
class
SkDeferredDisplayList
;
class
SkTaskGroup
;
class
GrContextPriv
{
public
:
uint32_t
contextID
(
)
const
{
return
fContext
-
>
contextID
(
)
;
}
bool
matches
(
GrContext_Base
*
candidate
)
const
{
return
fContext
-
>
matches
(
candidate
)
;
}
const
GrContextOptions
&
options
(
)
const
{
return
fContext
-
>
options
(
)
;
}
const
GrCaps
*
caps
(
)
const
{
return
fContext
-
>
caps
(
)
;
}
sk_sp
<
const
GrCaps
>
refCaps
(
)
const
;
sk_sp
<
GrSkSLFPFactoryCache
>
fpFactoryCache
(
)
;
GrImageContext
*
asImageContext
(
)
{
return
fContext
-
>
asImageContext
(
)
;
}
GrRecordingContext
*
asRecordingContext
(
)
{
return
fContext
-
>
asRecordingContext
(
)
;
}
GrContext
*
asDirectContext
(
)
{
return
fContext
-
>
asDirectContext
(
)
;
}
GrProxyProvider
*
proxyProvider
(
)
{
return
fContext
-
>
proxyProvider
(
)
;
}
const
GrProxyProvider
*
proxyProvider
(
)
const
{
return
fContext
-
>
proxyProvider
(
)
;
}
bool
abandoned
(
)
const
{
return
fContext
-
>
abandoned
(
)
;
}
SkDEBUGCODE
(
GrSingleOwner
*
singleOwner
(
)
const
{
return
fContext
-
>
singleOwner
(
)
;
}
)
GrDrawingManager
*
drawingManager
(
)
{
return
fContext
-
>
drawingManager
(
)
;
}
sk_sp
<
GrOpMemoryPool
>
refOpMemoryPool
(
)
;
GrOpMemoryPool
*
opMemoryPool
(
)
{
return
fContext
-
>
opMemoryPool
(
)
;
}
GrStrikeCache
*
getGrStrikeCache
(
)
{
return
fContext
-
>
getGrStrikeCache
(
)
;
}
GrTextBlobCache
*
getTextBlobCache
(
)
{
return
fContext
-
>
getTextBlobCache
(
)
;
}
void
addOnFlushCallbackObject
(
GrOnFlushCallbackObject
*
)
;
std
:
:
unique_ptr
<
GrSurfaceContext
>
makeWrappedSurfaceContext
(
sk_sp
<
GrSurfaceProxy
>
GrColorType
SkAlphaType
sk_sp
<
SkColorSpace
>
=
nullptr
const
SkSurfaceProps
*
=
nullptr
)
;
std
:
:
unique_ptr
<
GrTextureContext
>
makeDeferredTextureContext
(
SkBackingFit
int
width
int
height
GrColorType
SkAlphaType
sk_sp
<
SkColorSpace
>
GrMipMapped
=
GrMipMapped
:
:
kNo
GrSurfaceOrigin
=
kTopLeft_GrSurfaceOrigin
SkBudgeted
=
SkBudgeted
:
:
kYes
GrProtected
=
GrProtected
:
:
kNo
)
;
std
:
:
unique_ptr
<
GrRenderTargetContext
>
makeDeferredRenderTargetContext
(
SkBackingFit
fit
int
width
int
height
GrColorType
sk_sp
<
SkColorSpace
>
colorSpace
int
sampleCnt
=
1
GrMipMapped
=
GrMipMapped
:
:
kNo
GrSurfaceOrigin
origin
=
kBottomLeft_GrSurfaceOrigin
const
SkSurfaceProps
*
surfaceProps
=
nullptr
SkBudgeted
=
SkBudgeted
:
:
kYes
GrProtected
isProtected
=
GrProtected
:
:
kNo
)
;
std
:
:
unique_ptr
<
GrRenderTargetContext
>
makeDeferredRenderTargetContextWithFallback
(
SkBackingFit
fit
int
width
int
height
GrColorType
sk_sp
<
SkColorSpace
>
colorSpace
int
sampleCnt
=
1
GrMipMapped
=
GrMipMapped
:
:
kNo
GrSurfaceOrigin
origin
=
kBottomLeft_GrSurfaceOrigin
const
SkSurfaceProps
*
surfaceProps
=
nullptr
SkBudgeted
budgeted
=
SkBudgeted
:
:
kYes
GrProtected
isProtected
=
GrProtected
:
:
kNo
)
;
GrAuditTrail
*
auditTrail
(
)
{
return
fContext
-
>
auditTrail
(
)
;
}
static
sk_sp
<
GrContext
>
MakeDDL
(
const
sk_sp
<
GrContextThreadSafeProxy
>
&
)
;
std
:
:
unique_ptr
<
GrTextureContext
>
makeBackendTextureContext
(
const
GrBackendTexture
&
GrSurfaceOrigin
GrColorType
SkAlphaType
sk_sp
<
SkColorSpace
>
)
;
typedef
void
*
ReleaseContext
;
typedef
void
(
*
ReleaseProc
)
(
ReleaseContext
)
;
std
:
:
unique_ptr
<
GrRenderTargetContext
>
makeBackendTextureRenderTargetContext
(
const
GrBackendTexture
&
tex
GrSurfaceOrigin
origin
int
sampleCnt
GrColorType
sk_sp
<
SkColorSpace
>
colorSpace
const
SkSurfaceProps
*
=
nullptr
ReleaseProc
=
nullptr
ReleaseContext
=
nullptr
)
;
std
:
:
unique_ptr
<
GrRenderTargetContext
>
makeBackendRenderTargetRenderTargetContext
(
const
GrBackendRenderTarget
&
GrSurfaceOrigin
origin
GrColorType
sk_sp
<
SkColorSpace
>
colorSpace
const
SkSurfaceProps
*
=
nullptr
ReleaseProc
=
nullptr
ReleaseContext
=
nullptr
)
;
std
:
:
unique_ptr
<
GrRenderTargetContext
>
makeBackendTextureAsRenderTargetRenderTargetContext
(
const
GrBackendTexture
&
tex
GrSurfaceOrigin
origin
int
sampleCnt
GrColorType
sk_sp
<
SkColorSpace
>
colorSpace
const
SkSurfaceProps
*
=
nullptr
)
;
std
:
:
unique_ptr
<
GrRenderTargetContext
>
makeVulkanSecondaryCBRenderTargetContext
(
const
SkImageInfo
&
const
GrVkDrawableInfo
&
const
SkSurfaceProps
*
=
nullptr
)
;
GrSemaphoresSubmitted
flushSurfaces
(
GrSurfaceProxy
*
[
]
int
numProxies
const
GrFlushInfo
&
)
;
void
flushSurface
(
GrSurfaceProxy
*
)
;
bool
validPMUPMConversionExists
(
)
;
std
:
:
unique_ptr
<
GrFragmentProcessor
>
createPMToUPMEffect
(
std
:
:
unique_ptr
<
GrFragmentProcessor
>
)
;
std
:
:
unique_ptr
<
GrFragmentProcessor
>
createUPMToPMEffect
(
std
:
:
unique_ptr
<
GrFragmentProcessor
>
)
;
SkTaskGroup
*
getTaskGroup
(
)
{
return
fContext
-
>
fTaskGroup
.
get
(
)
;
}
GrResourceProvider
*
resourceProvider
(
)
{
return
fContext
-
>
fResourceProvider
;
}
const
GrResourceProvider
*
resourceProvider
(
)
const
{
return
fContext
-
>
fResourceProvider
;
}
GrResourceCache
*
getResourceCache
(
)
{
return
fContext
-
>
fResourceCache
;
}
GrGpu
*
getGpu
(
)
{
return
fContext
-
>
fGpu
.
get
(
)
;
}
const
GrGpu
*
getGpu
(
)
const
{
return
fContext
-
>
fGpu
.
get
(
)
;
}
GrAtlasManager
*
getAtlasManager
(
)
{
return
fContext
-
>
onGetAtlasManager
(
)
;
}
void
moveRenderTasksToDDL
(
SkDeferredDisplayList
*
)
;
void
copyRenderTasksFromDDL
(
const
SkDeferredDisplayList
*
GrRenderTargetProxy
*
newDest
)
;
GrContextOptions
:
:
PersistentCache
*
getPersistentCache
(
)
{
return
fContext
-
>
fPersistentCache
;
}
GrContextOptions
:
:
ShaderErrorHandler
*
getShaderErrorHandler
(
)
const
{
return
fContext
-
>
fShaderErrorHandler
;
}
GrClientMappedBufferManager
*
clientMappedBufferManager
(
)
{
return
fContext
-
>
fMappedBufferManager
.
get
(
)
;
}
#
if
GR_TEST_UTILS
void
resetGpuStats
(
)
const
;
void
dumpCacheStats
(
SkString
*
)
const
;
void
dumpCacheStatsKeyValuePairs
(
SkTArray
<
SkString
>
*
keys
SkTArray
<
double
>
*
values
)
const
;
void
printCacheStats
(
)
const
;
void
dumpGpuStats
(
SkString
*
)
const
;
void
dumpGpuStatsKeyValuePairs
(
SkTArray
<
SkString
>
*
keys
SkTArray
<
double
>
*
values
)
const
;
void
printGpuStats
(
)
const
;
void
testingOnly_setTextBlobCacheLimit
(
size_t
bytes
)
;
sk_sp
<
SkImage
>
testingOnly_getFontAtlasImage
(
GrMaskFormat
format
unsigned
int
index
=
0
)
;
void
testingOnly_purgeAllUnlockedResources
(
)
;
void
testingOnly_flushAndRemoveOnFlushCallbackObject
(
GrOnFlushCallbackObject
*
)
;
#
endif
private
:
explicit
GrContextPriv
(
GrContext
*
context
)
:
fContext
(
context
)
{
}
GrContextPriv
(
const
GrContextPriv
&
)
;
GrContextPriv
&
operator
=
(
const
GrContextPriv
&
)
;
const
GrContextPriv
*
operator
&
(
)
const
;
GrContextPriv
*
operator
&
(
)
;
GrContext
*
fContext
;
friend
class
GrContext
;
}
;
inline
GrContextPriv
GrContext
:
:
priv
(
)
{
return
GrContextPriv
(
this
)
;
}
inline
const
GrContextPriv
GrContext
:
:
priv
(
)
const
{
return
GrContextPriv
(
const_cast
<
GrContext
*
>
(
this
)
)
;
}
#
endif
