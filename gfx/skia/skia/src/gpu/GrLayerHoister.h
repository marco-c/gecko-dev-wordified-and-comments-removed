#
ifndef
GrLayerHoister_DEFINED
#
define
GrLayerHoister_DEFINED
#
include
"
SkPicture
.
h
"
#
include
"
SkTDArray
.
h
"
struct
GrCachedLayer
;
class
GrReplacements
;
class
SkGpuDevice
;
struct
SkRect
;
class
GrHoistedLayer
{
public
:
const
SkPicture
*
fPicture
;
GrCachedLayer
*
fLayer
;
SkMatrix
fInitialMat
;
SkMatrix
fPreMat
;
SkMatrix
fLocalMat
;
}
;
class
GrLayerHoister
{
public
:
static
void
Begin
(
GrContext
*
context
)
;
static
void
End
(
GrContext
*
context
)
;
static
void
FindLayersToAtlas
(
GrContext
*
context
const
SkPicture
*
topLevelPicture
const
SkMatrix
&
initialMat
const
SkRect
&
query
SkTDArray
<
GrHoistedLayer
>
*
atlasedNeedRendering
SkTDArray
<
GrHoistedLayer
>
*
recycled
int
numSamples
)
;
static
void
FindLayersToHoist
(
GrContext
*
context
const
SkPicture
*
topLevelPicture
const
SkMatrix
&
initialMat
const
SkRect
&
query
SkTDArray
<
GrHoistedLayer
>
*
needRendering
SkTDArray
<
GrHoistedLayer
>
*
recycled
int
numSamples
)
;
static
void
DrawLayersToAtlas
(
GrContext
*
context
const
SkTDArray
<
GrHoistedLayer
>
&
layers
)
;
static
void
DrawLayers
(
GrContext
*
context
const
SkTDArray
<
GrHoistedLayer
>
&
layers
)
;
static
void
ConvertLayersToReplacements
(
const
SkPicture
*
topLevelPicture
const
SkTDArray
<
GrHoistedLayer
>
&
layers
GrReplacements
*
replacements
)
;
static
void
UnlockLayers
(
GrContext
*
context
const
SkTDArray
<
GrHoistedLayer
>
&
layers
)
;
static
void
PurgeCache
(
GrContext
*
context
)
;
private
:
static
void
FilterLayer
(
GrContext
*
context
SkGpuDevice
*
device
const
GrHoistedLayer
&
info
)
;
}
;
#
endif
