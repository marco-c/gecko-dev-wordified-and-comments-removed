#
ifndef
GrTextureAdjuster_DEFINED
#
define
GrTextureAdjuster_DEFINED
#
include
"
GrTextureProducer
.
h
"
#
include
"
GrTextureProxy
.
h
"
#
include
"
SkTLazy
.
h
"
class
GrTextureAdjuster
:
public
GrTextureProducer
{
public
:
sk_sp
<
GrTextureProxy
>
refTextureProxySafeForParams
(
const
GrSamplerState
&
SkScalar
scaleAdjust
[
2
]
)
;
std
:
:
unique_ptr
<
GrFragmentProcessor
>
createFragmentProcessor
(
const
SkMatrix
&
textureMatrix
const
SkRect
&
constraintRect
FilterConstraint
bool
coordsLimitedToConstraintRect
const
GrSamplerState
:
:
Filter
*
filterOrNullForBicubic
SkColorSpace
*
dstColorSpace
)
override
;
GrTextureAdjuster
(
GrContext
*
sk_sp
<
GrTextureProxy
>
SkAlphaType
uint32_t
uniqueID
SkColorSpace
*
)
;
protected
:
SkAlphaType
alphaType
(
)
const
override
{
return
fAlphaType
;
}
void
makeCopyKey
(
const
CopyParams
&
params
GrUniqueKey
*
copyKey
SkColorSpace
*
dstColorSpace
)
override
;
void
didCacheCopy
(
const
GrUniqueKey
&
copyKey
)
override
;
GrTextureProxy
*
originalProxy
(
)
const
{
return
fOriginal
.
get
(
)
;
}
sk_sp
<
GrTextureProxy
>
originalProxyRef
(
)
const
{
return
fOriginal
;
}
private
:
GrContext
*
fContext
;
sk_sp
<
GrTextureProxy
>
fOriginal
;
SkAlphaType
fAlphaType
;
SkColorSpace
*
fColorSpace
;
uint32_t
fUniqueID
;
sk_sp
<
GrTextureProxy
>
refTextureProxyCopy
(
const
CopyParams
&
copyParams
bool
willBeMipped
)
;
typedef
GrTextureProducer
INHERITED
;
}
;
#
endif
