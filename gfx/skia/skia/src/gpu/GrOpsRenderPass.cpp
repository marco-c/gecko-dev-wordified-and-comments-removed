#
include
"
src
/
gpu
/
GrOpsRenderPass
.
h
"
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
include
/
gpu
/
GrContext
.
h
"
#
include
"
src
/
gpu
/
GrCaps
.
h
"
#
include
"
src
/
gpu
/
GrContextPriv
.
h
"
#
include
"
src
/
gpu
/
GrFixedClip
.
h
"
#
include
"
src
/
gpu
/
GrGpu
.
h
"
#
include
"
src
/
gpu
/
GrMesh
.
h
"
#
include
"
src
/
gpu
/
GrPrimitiveProcessor
.
h
"
#
include
"
src
/
gpu
/
GrProgramInfo
.
h
"
#
include
"
src
/
gpu
/
GrRenderTarget
.
h
"
#
include
"
src
/
gpu
/
GrRenderTargetPriv
.
h
"
#
include
"
src
/
gpu
/
GrTexturePriv
.
h
"
void
GrOpsRenderPass
:
:
clear
(
const
GrFixedClip
&
clip
const
SkPMColor4f
&
color
)
{
SkASSERT
(
fRenderTarget
)
;
SkASSERT
(
!
this
-
>
gpu
(
)
-
>
caps
(
)
-
>
performColorClearsAsDraws
(
)
)
;
SkASSERT
(
!
clip
.
scissorEnabled
(
)
|
|
!
this
-
>
gpu
(
)
-
>
caps
(
)
-
>
performPartialClearsAsDraws
(
)
)
;
this
-
>
onClear
(
clip
color
)
;
}
void
GrOpsRenderPass
:
:
clearStencilClip
(
const
GrFixedClip
&
clip
bool
insideStencilMask
)
{
SkASSERT
(
!
this
-
>
gpu
(
)
-
>
caps
(
)
-
>
performStencilClearsAsDraws
(
)
)
;
this
-
>
onClearStencilClip
(
clip
insideStencilMask
)
;
}
bool
GrOpsRenderPass
:
:
draw
(
const
GrProgramInfo
&
programInfo
const
GrMesh
meshes
[
]
int
meshCount
const
SkRect
&
bounds
)
{
if
(
!
meshCount
)
{
return
true
;
}
#
ifdef
SK_DEBUG
SkASSERT
(
!
programInfo
.
primProc
(
)
.
hasInstanceAttributes
(
)
|
|
this
-
>
gpu
(
)
-
>
caps
(
)
-
>
instanceAttribSupport
(
)
)
;
programInfo
.
compatibleWithMeshes
(
meshes
meshCount
)
;
programInfo
.
checkAllInstantiated
(
)
;
programInfo
.
checkMSAAAndMIPSAreResolved
(
)
;
#
endif
if
(
programInfo
.
primProc
(
)
.
numVertexAttributes
(
)
>
this
-
>
gpu
(
)
-
>
caps
(
)
-
>
maxVertexAttributes
(
)
)
{
this
-
>
gpu
(
)
-
>
stats
(
)
-
>
incNumFailedDraws
(
)
;
return
false
;
}
this
-
>
onDraw
(
programInfo
meshes
meshCount
bounds
)
;
#
ifdef
SK_DEBUG
GrProcessor
:
:
CustomFeatures
processorFeatures
=
programInfo
.
requestedFeatures
(
)
;
if
(
GrProcessor
:
:
CustomFeatures
:
:
kSampleLocations
&
processorFeatures
)
{
SkASSERT
(
this
-
>
gpu
(
)
-
>
findOrAssignSamplePatternKey
(
fRenderTarget
)
=
=
fRenderTarget
-
>
renderTargetPriv
(
)
.
getSamplePatternKey
(
)
)
;
}
#
endif
return
true
;
}
