#
ifndef
GrDefaultGeoProcFactory_DEFINED
#
define
GrDefaultGeoProcFactory_DEFINED
#
include
"
GrGeometryProcessor
.
h
"
class
GrDrawState
;
namespace
GrDefaultGeoProcFactory
{
struct
PositionAttr
{
SkPoint
fPosition
;
}
;
struct
PositionCoverageAttr
{
SkPoint
fPosition
;
GrColor
fCoverage
;
}
;
struct
PositionColorAttr
{
SkPoint
fPosition
;
SkColor
fColor
;
}
;
struct
PositionColorCoverageAttr
{
SkPoint
fPosition
;
SkColor
fColor
;
GrColor
fCoverage
;
}
;
struct
PositionLocalCoordAttr
{
SkPoint
fPosition
;
SkPoint
fLocalCoord
;
}
;
struct
PositionLocalCoordCoverageAttr
{
SkPoint
fPosition
;
SkPoint
fLocalCoord
;
GrColor
fCoverage
;
}
;
struct
PositionColorLocalCoordAttr
{
SkPoint
fPosition
;
GrColor
fColor
;
SkPoint
fLocalCoord
;
}
;
struct
PositionColorLocalCoordCoverage
{
SkPoint
fPosition
;
GrColor
fColor
;
SkPoint
fLocalCoord
;
GrColor
fCoverage
;
}
;
struct
Color
{
enum
Type
{
kNone_Type
kUniform_Type
kAttribute_Type
}
;
Color
(
GrColor
color
)
:
fType
(
kUniform_Type
)
fColor
(
color
)
{
}
Color
(
Type
type
)
:
fType
(
type
)
fColor
(
GrColor_ILLEGAL
)
{
SkASSERT
(
type
!
=
kUniform_Type
)
;
if
(
kAttribute_Type
=
=
type
)
{
fColor
=
GrColor_WHITE
;
}
}
Type
fType
;
GrColor
fColor
;
}
;
struct
Coverage
{
enum
Type
{
kNone_Type
kSolid_Type
kUniform_Type
kAttribute_Type
}
;
Coverage
(
uint8_t
coverage
)
:
fType
(
kUniform_Type
)
fCoverage
(
coverage
)
{
}
Coverage
(
Type
type
)
:
fType
(
type
)
fCoverage
(
0xff
)
{
SkASSERT
(
type
!
=
kUniform_Type
)
;
}
Type
fType
;
uint8_t
fCoverage
;
}
;
struct
LocalCoords
{
enum
Type
{
kUnused_Type
kUsePosition_Type
kHasExplicit_Type
kHasTransformed_Type
}
;
LocalCoords
(
Type
type
)
:
fType
(
type
)
fMatrix
(
nullptr
)
{
}
LocalCoords
(
Type
type
const
SkMatrix
*
matrix
)
:
fType
(
type
)
fMatrix
(
matrix
)
{
SkASSERT
(
kUnused_Type
!
=
type
)
;
}
bool
hasLocalMatrix
(
)
const
{
return
nullptr
!
=
fMatrix
;
}
Type
fType
;
const
SkMatrix
*
fMatrix
;
}
;
const
GrGeometryProcessor
*
Create
(
const
Color
&
const
Coverage
&
const
LocalCoords
&
const
SkMatrix
&
viewMatrix
)
;
const
GrGeometryProcessor
*
CreateForDeviceSpace
(
const
Color
&
const
Coverage
&
const
LocalCoords
&
const
SkMatrix
&
viewMatrix
)
;
inline
size_t
DefaultVertexStride
(
)
{
return
sizeof
(
PositionAttr
)
;
}
}
;
#
endif
