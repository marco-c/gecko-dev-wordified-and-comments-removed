#
ifndef
GrContextFactory_DEFINED
#
define
GrContextFactory_DEFINED
#
include
"
GrContext
.
h
"
#
include
"
GrContextOptions
.
h
"
#
include
"
gl
/
SkGLContext
.
h
"
#
include
"
SkTArray
.
h
"
class
GrContextFactory
:
SkNoncopyable
{
public
:
enum
GLContextType
{
kNative_GLContextType
#
if
SK_ANGLE
kANGLE_GLContextType
kANGLE_GL_GLContextType
#
endif
#
if
SK_COMMAND_BUFFER
kCommandBuffer_GLContextType
#
endif
#
if
SK_MESA
kMESA_GLContextType
#
endif
kNVPR_GLContextType
kNull_GLContextType
kDebug_GLContextType
kLastGLContextType
=
kDebug_GLContextType
}
;
static
const
int
kGLContextTypeCnt
=
kLastGLContextType
+
1
;
static
bool
IsRenderingGLContext
(
GLContextType
type
)
{
switch
(
type
)
{
case
kNull_GLContextType
:
case
kDebug_GLContextType
:
return
false
;
default
:
return
true
;
}
}
static
const
char
*
GLContextTypeName
(
GLContextType
type
)
{
switch
(
type
)
{
case
kNative_GLContextType
:
return
"
native
"
;
case
kNull_GLContextType
:
return
"
null
"
;
#
if
SK_ANGLE
case
kANGLE_GLContextType
:
return
"
angle
"
;
case
kANGLE_GL_GLContextType
:
return
"
angle
-
gl
"
;
#
endif
#
if
SK_COMMAND_BUFFER
case
kCommandBuffer_GLContextType
:
return
"
commandbuffer
"
;
#
endif
#
if
SK_MESA
case
kMESA_GLContextType
:
return
"
mesa
"
;
#
endif
case
kNVPR_GLContextType
:
return
"
nvpr
"
;
case
kDebug_GLContextType
:
return
"
debug
"
;
default
:
SkFAIL
(
"
Unknown
GL
Context
type
.
"
)
;
}
}
explicit
GrContextFactory
(
const
GrContextOptions
&
opts
)
:
fGlobalOptions
(
opts
)
{
}
GrContextFactory
(
)
{
}
~
GrContextFactory
(
)
{
this
-
>
destroyContexts
(
)
;
}
void
destroyContexts
(
)
{
for
(
int
i
=
0
;
i
<
fContexts
.
count
(
)
;
+
+
i
)
{
if
(
fContexts
[
i
]
-
>
fGLContext
)
{
fContexts
[
i
]
-
>
fGLContext
-
>
makeCurrent
(
)
;
}
fContexts
[
i
]
-
>
fGrContext
-
>
unref
(
)
;
SkSafeUnref
(
fContexts
[
i
]
-
>
fGLContext
)
;
}
fContexts
.
reset
(
)
;
}
void
abandonContexts
(
)
{
for
(
int
i
=
0
;
i
<
fContexts
.
count
(
)
;
+
+
i
)
{
if
(
fContexts
[
i
]
-
>
fGLContext
)
{
fContexts
[
i
]
-
>
fGLContext
-
>
testAbandon
(
)
;
SkSafeSetNull
(
fContexts
[
i
]
-
>
fGLContext
)
;
}
fContexts
[
i
]
-
>
fGrContext
-
>
abandonContext
(
)
;
}
}
struct
ContextInfo
{
GLContextType
fType
;
SkGLContext
*
fGLContext
;
GrContext
*
fGrContext
;
}
;
ContextInfo
*
getContextInfo
(
GLContextType
type
GrGLStandard
forcedGpuAPI
=
kNone_GrGLStandard
)
;
GrContext
*
get
(
GLContextType
type
GrGLStandard
forcedGpuAPI
=
kNone_GrGLStandard
)
{
if
(
ContextInfo
*
info
=
this
-
>
getContextInfo
(
type
forcedGpuAPI
)
)
{
return
info
-
>
fGrContext
;
}
return
nullptr
;
}
const
GrContextOptions
&
getGlobalOptions
(
)
const
{
return
fGlobalOptions
;
}
private
:
SkTArray
<
SkAutoTDelete
<
ContextInfo
>
true
>
fContexts
;
const
GrContextOptions
fGlobalOptions
;
}
;
#
endif
