#
ifndef
GrContextFactory_DEFINED
#
define
GrContextFactory_DEFINED
#
include
"
GrContext
.
h
"
#
include
"
GrContextOptions
.
h
"
#
include
"
gl
/
SkGLContext
.
h
"
#
include
"
SkTArray
.
h
"
class
GrContextFactory
:
SkNoncopyable
{
public
:
enum
GLContextType
{
kNative_GLContextType
kGL_GLContextType
kGLES_GLContextType
#
if
SK_ANGLE
#
ifdef
SK_BUILD_FOR_WIN
kANGLE_GLContextType
#
endif
kANGLE_GL_GLContextType
#
endif
#
if
SK_COMMAND_BUFFER
kCommandBuffer_GLContextType
#
endif
#
if
SK_MESA
kMESA_GLContextType
#
endif
kNull_GLContextType
kDebug_GLContextType
kLastGLContextType
=
kDebug_GLContextType
}
;
static
const
int
kGLContextTypeCnt
=
kLastGLContextType
+
1
;
enum
GLContextOptions
{
kNone_GLContextOptions
=
0
kEnableNVPR_GLContextOptions
=
0x1
}
;
static
bool
IsRenderingGLContext
(
GLContextType
type
)
{
switch
(
type
)
{
case
kNull_GLContextType
:
case
kDebug_GLContextType
:
return
false
;
default
:
return
true
;
}
}
static
const
char
*
GLContextTypeName
(
GLContextType
type
)
{
switch
(
type
)
{
case
kNative_GLContextType
:
return
"
native
"
;
case
kGL_GLContextType
:
return
"
gl
"
;
case
kGLES_GLContextType
:
return
"
gles
"
;
#
if
SK_ANGLE
#
ifdef
SK_BUILD_FOR_WIN
case
kANGLE_GLContextType
:
return
"
angle
"
;
#
endif
case
kANGLE_GL_GLContextType
:
return
"
angle
-
gl
"
;
#
endif
#
if
SK_COMMAND_BUFFER
case
kCommandBuffer_GLContextType
:
return
"
commandbuffer
"
;
#
endif
#
if
SK_MESA
case
kMESA_GLContextType
:
return
"
mesa
"
;
#
endif
case
kNull_GLContextType
:
return
"
null
"
;
case
kDebug_GLContextType
:
return
"
debug
"
;
default
:
SkFAIL
(
"
Unknown
GL
Context
type
.
"
)
;
}
}
explicit
GrContextFactory
(
const
GrContextOptions
&
opts
)
;
GrContextFactory
(
)
;
~
GrContextFactory
(
)
;
void
destroyContexts
(
)
;
void
abandonContexts
(
)
;
struct
ContextInfo
{
ContextInfo
(
)
:
fGrContext
(
nullptr
)
fGLContext
(
nullptr
)
{
}
ContextInfo
(
GrContext
*
grContext
SkGLContext
*
glContext
)
:
fGrContext
(
grContext
)
fGLContext
(
glContext
)
{
}
GrContext
*
fGrContext
;
SkGLContext
*
fGLContext
;
}
;
ContextInfo
getContextInfo
(
GLContextType
type
GLContextOptions
options
=
kNone_GLContextOptions
)
;
GrContext
*
get
(
GLContextType
type
GLContextOptions
options
=
kNone_GLContextOptions
)
{
return
this
-
>
getContextInfo
(
type
options
)
.
fGrContext
;
}
const
GrContextOptions
&
getGlobalOptions
(
)
const
{
return
fGlobalOptions
;
}
private
:
struct
Context
{
GLContextType
fType
;
GLContextOptions
fOptions
;
SkGLContext
*
fGLContext
;
GrContext
*
fGrContext
;
}
;
SkTArray
<
Context
true
>
fContexts
;
const
GrContextOptions
fGlobalOptions
;
}
;
#
endif
