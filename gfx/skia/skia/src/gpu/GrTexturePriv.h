#
ifndef
GrTexturePriv_DEFINED
#
define
GrTexturePriv_DEFINED
#
include
"
GrTexture
.
h
"
class
GrTexturePriv
{
public
:
void
markMipMapsDirty
(
)
{
fTexture
-
>
markMipMapsDirty
(
)
;
}
void
markMipMapsClean
(
)
{
fTexture
-
>
markMipMapsClean
(
)
;
}
bool
mipMapsAreDirty
(
)
const
{
return
GrMipMapsStatus
:
:
kValid
!
=
fTexture
-
>
fMipMapsStatus
;
}
GrMipMapped
mipMapped
(
)
const
{
if
(
GrMipMapsStatus
:
:
kNotAllocated
!
=
fTexture
-
>
fMipMapsStatus
)
{
return
GrMipMapped
:
:
kYes
;
}
return
GrMipMapped
:
:
kNo
;
}
int
maxMipMapLevel
(
)
const
{
return
fTexture
-
>
fMaxMipMapLevel
;
}
GrTextureType
textureType
(
)
const
{
return
fTexture
-
>
fTextureType
;
}
bool
hasRestrictedSampling
(
)
const
{
return
GrTextureTypeHasRestrictedSampling
(
this
-
>
textureType
(
)
)
;
}
GrSamplerState
:
:
Filter
highestFilterMode
(
)
const
{
return
this
-
>
hasRestrictedSampling
(
)
?
GrSamplerState
:
:
Filter
:
:
kBilerp
:
GrSamplerState
:
:
Filter
:
:
kMipMap
;
}
static
void
ComputeScratchKey
(
const
GrSurfaceDesc
&
GrScratchKey
*
)
;
static
void
ComputeScratchKey
(
GrPixelConfig
config
int
width
int
height
bool
isRenderTarget
int
sampleCnt
GrMipMapped
GrScratchKey
*
key
)
;
private
:
GrTexturePriv
(
GrTexture
*
texture
)
:
fTexture
(
texture
)
{
}
GrTexturePriv
(
const
GrTexturePriv
&
that
)
:
fTexture
(
that
.
fTexture
)
{
}
GrTexturePriv
&
operator
=
(
const
GrTexturePriv
&
)
;
const
GrTexturePriv
*
operator
&
(
)
const
;
GrTexturePriv
*
operator
&
(
)
;
GrTexture
*
fTexture
;
friend
class
GrTexture
;
}
;
inline
GrTexturePriv
GrTexture
:
:
texturePriv
(
)
{
return
GrTexturePriv
(
this
)
;
}
inline
const
GrTexturePriv
GrTexture
:
:
texturePriv
(
)
const
{
return
GrTexturePriv
(
const_cast
<
GrTexture
*
>
(
this
)
)
;
}
#
endif
