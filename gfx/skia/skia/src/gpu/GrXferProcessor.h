#
ifndef
GrXferProcessor_DEFINED
#
define
GrXferProcessor_DEFINED
#
include
"
GrBlend
.
h
"
#
include
"
GrColor
.
h
"
#
include
"
GrNonAtomicRef
.
h
"
#
include
"
GrProcessor
.
h
"
#
include
"
GrProcessorSet
.
h
"
#
include
"
GrTexture
.
h
"
#
include
"
GrTypes
.
h
"
class
GrShaderCaps
;
class
GrGLSLXferProcessor
;
enum
GrXferBarrierType
{
kNone_GrXferBarrierType
=
0
kTexture_GrXferBarrierType
kBlend_GrXferBarrierType
}
;
GR_STATIC_ASSERT
(
SkToBool
(
kNone_GrXferBarrierType
)
=
=
false
)
;
class
GrXferProcessor
:
public
GrProcessor
public
GrNonAtomicRef
<
GrXferProcessor
>
{
public
:
class
DstTexture
{
public
:
DstTexture
(
)
{
fOffset
.
set
(
0
0
)
;
}
DstTexture
(
const
DstTexture
&
other
)
{
*
this
=
other
;
}
DstTexture
(
GrTexture
*
texture
const
SkIPoint
&
offset
)
:
fTexture
(
SkSafeRef
(
texture
)
)
fOffset
(
texture
?
offset
:
SkIPoint
{
0
0
}
)
{
}
DstTexture
&
operator
=
(
const
DstTexture
&
other
)
{
fTexture
=
other
.
fTexture
;
fOffset
=
other
.
fOffset
;
return
*
this
;
}
bool
operator
=
=
(
const
DstTexture
&
that
)
const
{
return
fTexture
=
=
that
.
fTexture
&
&
fOffset
=
=
that
.
fOffset
;
}
bool
operator
!
=
(
const
DstTexture
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
const
SkIPoint
&
offset
(
)
const
{
return
fOffset
;
}
void
setOffset
(
const
SkIPoint
&
offset
)
{
fOffset
=
offset
;
}
void
setOffset
(
int
ox
int
oy
)
{
fOffset
.
set
(
ox
oy
)
;
}
GrTexture
*
texture
(
)
const
{
return
fTexture
.
get
(
)
;
}
void
setTexture
(
sk_sp
<
GrTexture
>
texture
)
{
fTexture
=
std
:
:
move
(
texture
)
;
if
(
!
fTexture
)
{
fOffset
=
{
0
0
}
;
}
}
private
:
sk_sp
<
GrTexture
>
fTexture
;
SkIPoint
fOffset
;
}
;
void
getGLSLProcessorKey
(
const
GrShaderCaps
&
GrProcessorKeyBuilder
*
const
GrSurfaceOrigin
*
originIfDstTexture
)
const
;
virtual
GrGLSLXferProcessor
*
createGLSLInstance
(
)
const
=
0
;
virtual
GrXferBarrierType
xferBarrierType
(
const
GrCaps
&
caps
)
const
{
return
kNone_GrXferBarrierType
;
}
struct
BlendInfo
{
void
reset
(
)
{
fEquation
=
kAdd_GrBlendEquation
;
fSrcBlend
=
kOne_GrBlendCoeff
;
fDstBlend
=
kZero_GrBlendCoeff
;
fBlendConstant
=
0
;
fWriteColor
=
true
;
}
SkDEBUGCODE
(
SkString
dump
(
)
const
;
)
GrBlendEquation
fEquation
;
GrBlendCoeff
fSrcBlend
;
GrBlendCoeff
fDstBlend
;
GrColor
fBlendConstant
;
bool
fWriteColor
;
}
;
void
getBlendInfo
(
BlendInfo
*
blendInfo
)
const
;
bool
willReadDstColor
(
)
const
{
return
fWillReadDstColor
;
}
bool
dstReadUsesMixedSamples
(
)
const
{
return
fDstReadUsesMixedSamples
;
}
bool
hasSecondaryOutput
(
)
const
;
bool
isEqual
(
const
GrXferProcessor
&
that
)
const
{
if
(
this
-
>
classID
(
)
!
=
that
.
classID
(
)
)
{
return
false
;
}
if
(
this
-
>
fWillReadDstColor
!
=
that
.
fWillReadDstColor
)
{
return
false
;
}
if
(
this
-
>
fDstReadUsesMixedSamples
!
=
that
.
fDstReadUsesMixedSamples
)
{
return
false
;
}
return
this
-
>
onIsEqual
(
that
)
;
}
protected
:
GrXferProcessor
(
)
;
GrXferProcessor
(
bool
willReadDstColor
bool
hasMixedSamples
)
;
private
:
virtual
void
onGetGLSLProcessorKey
(
const
GrShaderCaps
&
GrProcessorKeyBuilder
*
)
const
=
0
;
virtual
bool
onHasSecondaryOutput
(
)
const
{
return
false
;
}
virtual
void
onGetBlendInfo
(
BlendInfo
*
)
const
{
}
virtual
bool
onIsEqual
(
const
GrXferProcessor
&
)
const
=
0
;
bool
fWillReadDstColor
;
bool
fDstReadUsesMixedSamples
;
typedef
GrFragmentProcessor
INHERITED
;
}
;
#
if
defined
(
__GNUC__
)
|
|
defined
(
__clang
)
#
pragma
GCC
diagnostic
push
#
pragma
GCC
diagnostic
ignored
"
-
Wnon
-
virtual
-
dtor
"
#
endif
class
GrXPFactory
{
public
:
typedef
GrXferProcessor
:
:
DstTexture
DstTexture
;
enum
class
AnalysisProperties
:
unsigned
{
kNone
=
0x0
kReadsDstInShader
=
0x1
kCompatibleWithAlphaAsCoverage
=
0x2
kIgnoresInputColor
=
0x4
kCanCombineOverlappedStencilAndCover
=
0x8
kRequiresDstTexture
=
0x10
kRequiresBarrierBetweenOverlappingDraws
=
0x20
}
;
GR_DECL_BITFIELD_CLASS_OPS_FRIENDS
(
AnalysisProperties
)
;
static
sk_sp
<
const
GrXferProcessor
>
MakeXferProcessor
(
const
GrXPFactory
*
const
GrProcessorAnalysisColor
&
GrProcessorAnalysisCoverage
bool
hasMixedSamples
const
GrCaps
&
caps
)
;
static
AnalysisProperties
GetAnalysisProperties
(
const
GrXPFactory
*
const
GrProcessorAnalysisColor
&
const
GrProcessorAnalysisCoverage
&
const
GrCaps
&
)
;
protected
:
constexpr
GrXPFactory
(
)
{
}
private
:
virtual
sk_sp
<
const
GrXferProcessor
>
makeXferProcessor
(
const
GrProcessorAnalysisColor
&
GrProcessorAnalysisCoverage
bool
hasMixedSamples
const
GrCaps
&
)
const
=
0
;
virtual
AnalysisProperties
analysisProperties
(
const
GrProcessorAnalysisColor
&
const
GrProcessorAnalysisCoverage
&
const
GrCaps
&
)
const
=
0
;
}
;
#
if
defined
(
__GNUC__
)
|
|
defined
(
__clang
)
#
pragma
GCC
diagnostic
pop
#
endif
GR_MAKE_BITFIELD_CLASS_OPS
(
GrXPFactory
:
:
AnalysisProperties
)
;
#
endif
