#
ifndef
GrPrimitiveProcessor_DEFINED
#
define
GrPrimitiveProcessor_DEFINED
#
include
"
GrColor
.
h
"
#
include
"
GrProcessor
.
h
"
#
include
"
GrShaderVar
.
h
"
class
GrGLSLPrimitiveProcessor
;
class
GrPrimitiveProcessor
:
public
GrResourceIOProcessor
public
GrProgramElement
{
public
:
virtual
bool
willUseGeoShader
(
)
const
=
0
;
struct
Attribute
{
Attribute
(
)
:
fName
(
nullptr
)
fType
(
kFloat_GrVertexAttribType
)
fOffset
(
0
)
{
}
Attribute
(
const
char
*
name
GrVertexAttribType
type
GrSLPrecision
precision
)
:
fName
(
name
)
fType
(
type
)
fOffset
(
SkAlign4
(
GrVertexAttribTypeSize
(
type
)
)
)
fPrecision
(
precision
)
{
}
const
char
*
fName
;
GrVertexAttribType
fType
;
size_t
fOffset
;
GrSLPrecision
fPrecision
;
}
;
int
numAttribs
(
)
const
{
return
fAttribs
.
count
(
)
;
}
const
Attribute
&
getAttrib
(
int
index
)
const
{
return
fAttribs
[
index
]
;
}
size_t
getVertexStride
(
)
const
{
return
fVertexStride
;
}
uint32_t
getTransformKey
(
const
SkTArray
<
const
GrCoordTransform
*
true
>
&
coords
int
numCoords
)
const
;
virtual
void
getGLSLProcessorKey
(
const
GrShaderCaps
&
GrProcessorKeyBuilder
*
)
const
=
0
;
virtual
GrGLSLPrimitiveProcessor
*
createGLSLInstance
(
const
GrShaderCaps
&
)
const
=
0
;
virtual
bool
isPathRendering
(
)
const
{
return
false
;
}
virtual
const
char
*
getDestColorOverride
(
)
const
{
return
nullptr
;
}
virtual
float
getSampleShading
(
)
const
{
return
0
.
0
;
}
virtual
bool
implementsDistanceVector
(
)
const
{
return
false
;
}
protected
:
GrPrimitiveProcessor
(
)
:
fVertexStride
(
0
)
{
}
enum
{
kPreallocAttribCnt
=
8
}
;
SkSTArray
<
kPreallocAttribCnt
Attribute
>
fAttribs
;
size_t
fVertexStride
;
private
:
void
addPendingIOs
(
)
const
override
{
GrResourceIOProcessor
:
:
addPendingIOs
(
)
;
}
void
removeRefs
(
)
const
override
{
GrResourceIOProcessor
:
:
removeRefs
(
)
;
}
void
pendingIOComplete
(
)
const
override
{
GrResourceIOProcessor
:
:
pendingIOComplete
(
)
;
}
void
notifyRefCntIsZero
(
)
const
final
{
}
virtual
bool
hasExplicitLocalCoords
(
)
const
=
0
;
typedef
GrProcessor
INHERITED
;
}
;
#
endif
