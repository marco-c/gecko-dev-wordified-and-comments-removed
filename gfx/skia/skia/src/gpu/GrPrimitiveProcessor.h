#
ifndef
GrPrimitiveProcessor_DEFINED
#
define
GrPrimitiveProcessor_DEFINED
#
include
"
GrColor
.
h
"
#
include
"
GrProcessor
.
h
"
#
include
"
GrShaderVar
.
h
"
class
GrGLSLCaps
;
class
GrGLSLPrimitiveProcessor
;
struct
GrInitInvariantOutput
;
enum
GrPixelLocalStorageState
{
kDraw_GrPixelLocalStorageState
kFinish_GrPixelLocalStorageState
kDisabled_GrPixelLocalStorageState
}
;
class
GrXPOverridesForBatch
{
public
:
bool
readsColor
(
)
const
{
return
SkToBool
(
kReadsColor_Flag
&
fFlags
)
;
}
bool
readsCoverage
(
)
const
{
return
SkToBool
(
kReadsCoverage_Flag
&
fFlags
)
;
}
bool
readsLocalCoords
(
)
const
{
return
SkToBool
(
kReadsLocalCoords_Flag
&
fFlags
)
;
}
bool
canTweakAlphaForCoverage
(
)
const
{
return
SkToBool
(
kCanTweakAlphaForCoverage_Flag
&
fFlags
)
;
}
bool
getOverrideColorIfSet
(
GrColor
*
overrideColor
)
const
{
if
(
SkToBool
(
kUseOverrideColor_Flag
&
fFlags
)
)
{
SkASSERT
(
SkToBool
(
kReadsColor_Flag
&
fFlags
)
)
;
if
(
overrideColor
)
{
*
overrideColor
=
fOverrideColor
;
}
return
true
;
}
return
false
;
}
bool
willColorBlendWithDst
(
)
const
{
return
SkToBool
(
kWillColorBlendWithDst_Flag
&
fFlags
)
;
}
private
:
enum
{
kReadsColor_Flag
=
0x1
kReadsCoverage_Flag
=
0x2
kReadsLocalCoords_Flag
=
0x4
kCanTweakAlphaForCoverage_Flag
=
0x8
kUseOverrideColor_Flag
=
0x10
kWillColorBlendWithDst_Flag
=
0x20
}
;
uint32_t
fFlags
;
GrColor
fOverrideColor
;
friend
class
GrPipeline
;
}
;
class
GrPrimitiveProcessor
:
public
GrProcessor
{
public
:
virtual
bool
willUseGeoShader
(
)
const
=
0
;
struct
Attribute
{
Attribute
(
)
:
fName
(
nullptr
)
fType
(
kFloat_GrVertexAttribType
)
fOffset
(
0
)
{
}
Attribute
(
const
char
*
name
GrVertexAttribType
type
GrSLPrecision
precision
)
:
fName
(
name
)
fType
(
type
)
fOffset
(
SkAlign4
(
GrVertexAttribTypeSize
(
type
)
)
)
fPrecision
(
precision
)
{
}
const
char
*
fName
;
GrVertexAttribType
fType
;
size_t
fOffset
;
GrSLPrecision
fPrecision
;
}
;
int
numAttribs
(
)
const
{
return
fAttribs
.
count
(
)
;
}
const
Attribute
&
getAttrib
(
int
index
)
const
{
return
fAttribs
[
index
]
;
}
size_t
getVertexStride
(
)
const
{
return
fVertexStride
;
}
uint32_t
getTransformKey
(
const
SkTArray
<
const
GrCoordTransform
*
true
>
&
coords
int
numCoords
)
const
;
virtual
void
getGLSLProcessorKey
(
const
GrGLSLCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
=
0
;
virtual
GrGLSLPrimitiveProcessor
*
createGLSLInstance
(
const
GrGLSLCaps
&
caps
)
const
=
0
;
virtual
bool
isPathRendering
(
)
const
{
return
false
;
}
virtual
GrPixelLocalStorageState
getPixelLocalStorageState
(
)
const
{
return
kDisabled_GrPixelLocalStorageState
;
}
virtual
const
char
*
getDestColorOverride
(
)
const
{
return
nullptr
;
}
virtual
float
getSampleShading
(
)
const
{
return
0
.
0
;
}
virtual
bool
implementsDistanceVector
(
)
const
{
return
false
;
}
protected
:
GrPrimitiveProcessor
(
)
:
fVertexStride
(
0
)
{
}
enum
{
kPreallocAttribCnt
=
8
}
;
SkSTArray
<
kPreallocAttribCnt
Attribute
>
fAttribs
;
size_t
fVertexStride
;
private
:
void
notifyRefCntIsZero
(
)
const
final
{
}
virtual
bool
hasExplicitLocalCoords
(
)
const
=
0
;
typedef
GrProcessor
INHERITED
;
}
;
#
endif
