#
ifndef
GrPrimitiveProcessor_DEFINED
#
define
GrPrimitiveProcessor_DEFINED
#
include
"
GrColor
.
h
"
#
include
"
GrProcessor
.
h
"
#
include
"
GrShaderVar
.
h
"
class
GrGLSLPrimitiveProcessor
;
class
GrPrimitiveProcessor
:
public
GrResourceIOProcessor
public
GrProgramElement
{
public
:
struct
Attribute
{
enum
class
InputRate
:
bool
{
kPerVertex
kPerInstance
}
;
GrShaderVar
asShaderVar
(
)
const
{
return
GrShaderVar
(
fName
GrVertexAttribTypeToSLType
(
fType
)
GrShaderVar
:
:
kIn_TypeModifier
)
;
}
bool
isInitialized
(
)
const
{
return
SkToBool
(
fName
)
;
}
Attribute
(
)
=
default
;
Attribute
(
const
char
*
name
GrVertexAttribType
type
int
offset
InputRate
rate
)
:
fName
(
name
)
fType
(
type
)
fOffsetInRecord
(
offset
)
fInputRate
(
rate
)
{
}
const
char
*
fName
=
nullptr
;
GrVertexAttribType
fType
;
int
fOffsetInRecord
;
InputRate
fInputRate
;
}
;
GrPrimitiveProcessor
(
ClassID
classID
)
:
GrResourceIOProcessor
(
classID
)
{
}
int
numAttribs
(
)
const
{
return
fAttribs
.
count
(
)
;
}
const
Attribute
&
getAttrib
(
int
index
)
const
{
return
fAttribs
[
index
]
;
}
bool
hasVertexAttribs
(
)
const
{
return
SkToBool
(
fVertexStride
)
;
}
bool
hasInstanceAttribs
(
)
const
{
return
SkToBool
(
fInstanceStride
)
;
}
int
getVertexStride
(
)
const
{
return
fVertexStride
;
}
int
getInstanceStride
(
)
const
{
return
fInstanceStride
;
}
virtual
bool
willUseGeoShader
(
)
const
=
0
;
bool
willUsePrimitiveRestart
(
)
const
{
return
fWillUsePrimitiveRestart
;
}
uint32_t
getTransformKey
(
const
SkTArray
<
const
GrCoordTransform
*
true
>
&
coords
int
numCoords
)
const
;
virtual
void
getGLSLProcessorKey
(
const
GrShaderCaps
&
GrProcessorKeyBuilder
*
)
const
=
0
;
virtual
GrGLSLPrimitiveProcessor
*
createGLSLInstance
(
const
GrShaderCaps
&
)
const
=
0
;
virtual
bool
isPathRendering
(
)
const
{
return
false
;
}
virtual
const
char
*
getDestColorOverride
(
)
const
{
return
nullptr
;
}
virtual
float
getSampleShading
(
)
const
{
return
0
.
0
;
}
protected
:
const
Attribute
&
addVertexAttrib
(
const
char
*
name
GrVertexAttribType
type
)
{
fAttribs
.
push_back
(
)
=
{
name
type
fVertexStride
Attribute
:
:
InputRate
:
:
kPerVertex
}
;
fVertexStride
+
=
static_cast
<
int
>
(
SkAlign4
(
GrVertexAttribTypeSize
(
type
)
)
)
;
return
fAttribs
.
back
(
)
;
}
const
Attribute
&
addInstanceAttrib
(
const
char
*
name
GrVertexAttribType
type
)
{
fAttribs
.
push_back
(
)
=
{
name
type
fInstanceStride
Attribute
:
:
InputRate
:
:
kPerInstance
}
;
fInstanceStride
+
=
static_cast
<
int
>
(
SkAlign4
(
GrVertexAttribTypeSize
(
type
)
)
)
;
return
fAttribs
.
back
(
)
;
}
void
setWillUsePrimitiveRestart
(
)
{
fWillUsePrimitiveRestart
=
true
;
}
private
:
void
addPendingIOs
(
)
const
override
{
GrResourceIOProcessor
:
:
addPendingIOs
(
)
;
}
void
removeRefs
(
)
const
override
{
GrResourceIOProcessor
:
:
removeRefs
(
)
;
}
void
pendingIOComplete
(
)
const
override
{
GrResourceIOProcessor
:
:
pendingIOComplete
(
)
;
}
void
notifyRefCntIsZero
(
)
const
final
{
}
virtual
bool
hasExplicitLocalCoords
(
)
const
=
0
;
SkSTArray
<
8
Attribute
>
fAttribs
;
int
fVertexStride
=
0
;
int
fInstanceStride
=
0
;
bool
fWillUsePrimitiveRestart
=
false
;
typedef
GrProcessor
INHERITED
;
}
;
#
endif
