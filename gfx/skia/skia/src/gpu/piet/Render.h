#
ifndef
skgpu_piet_Renderer_DEFINED
#
define
skgpu_piet_Renderer_DEFINED
#
include
"
src
/
gpu
/
piet
/
PietTypes
.
h
"
#
include
<
memory
>
#
if
defined
(
SK_METAL
)
&
&
defined
(
__OBJC__
)
#
import
<
Metal
/
Metal
.
h
>
#
endif
namespace
skgpu
:
:
piet
{
class
Scene
;
class
RendererBase
:
public
Object
<
PgpuRenderer
pgpu_renderer_destroy
>
{
protected
:
RendererBase
(
void
*
device
void
*
queue
)
;
~
RendererBase
(
)
override
=
default
;
void
render
(
const
Scene
&
scene
void
*
target
void
*
cmdBuffer
)
const
;
private
:
RendererBase
(
const
RendererBase
&
)
=
delete
;
RendererBase
(
RendererBase
&
&
)
=
delete
;
}
;
template
<
typename
BackendTraits
>
class
Renderer
final
:
public
RendererBase
{
using
Device
=
typename
BackendTraits
:
:
Device
;
using
CommandQueue
=
typename
BackendTraits
:
:
CommandQueue
;
using
CommandBuffer
=
typename
BackendTraits
:
:
CommandBuffer
;
using
Texture
=
typename
BackendTraits
:
:
Texture
;
public
:
Renderer
(
Device
device
CommandQueue
queue
)
:
RendererBase
(
static_cast
<
void
*
>
(
device
)
static_cast
<
void
*
>
(
queue
)
)
{
}
~
Renderer
(
)
override
=
default
;
void
render
(
const
Scene
&
scene
Texture
target
CommandBuffer
cmdBuffer
)
const
{
RendererBase
:
:
render
(
scene
static_cast
<
void
*
>
(
target
)
static_cast
<
void
*
>
(
cmdBuffer
)
)
;
}
}
;
#
if
defined
(
SK_METAL
)
&
&
defined
(
__OBJC__
)
struct
MtlBackendTraits
{
using
Device
=
id
<
MTLDevice
>
;
using
CommandQueue
=
id
<
MTLCommandQueue
>
;
using
CommandBuffer
=
id
<
MTLCommandBuffer
>
;
using
Texture
=
id
<
MTLTexture
>
;
}
;
using
MtlRenderer
=
Renderer
<
MtlBackendTraits
>
;
#
endif
}
#
endif
