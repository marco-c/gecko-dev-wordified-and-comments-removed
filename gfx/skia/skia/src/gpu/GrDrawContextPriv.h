#
ifndef
GrDrawContextPriv_DEFINED
#
define
GrDrawContextPriv_DEFINED
#
include
"
GrDrawContext
.
h
"
#
include
"
GrDrawTarget
.
h
"
#
include
"
GrPathRendering
.
h
"
class
GrFixedClip
;
class
GrPath
;
struct
GrUserStencilSettings
;
class
GrDrawContextPriv
{
public
:
gr_instanced
:
:
InstancedRendering
*
accessInstancedRendering
(
)
const
{
return
fDrawContext
-
>
getDrawTarget
(
)
-
>
instancedRendering
(
)
;
}
void
clear
(
const
GrFixedClip
&
const
GrColor
bool
canIgnoreClip
)
;
void
clearStencilClip
(
const
GrFixedClip
&
bool
insideStencilMask
)
;
void
stencilRect
(
const
GrClip
&
clip
const
GrUserStencilSettings
*
ss
bool
useHWAA
const
SkMatrix
&
viewMatrix
const
SkRect
&
rect
)
;
void
stencilPath
(
const
GrClip
&
bool
useHWAA
const
SkMatrix
&
viewMatrix
const
GrPath
*
)
;
bool
drawAndStencilRect
(
const
GrClip
&
const
GrUserStencilSettings
*
SkRegion
:
:
Op
op
bool
invert
bool
doAA
const
SkMatrix
&
viewMatrix
const
SkRect
&
)
;
bool
drawAndStencilPath
(
const
GrClip
&
const
GrUserStencilSettings
*
SkRegion
:
:
Op
op
bool
invert
bool
doAA
const
SkMatrix
&
viewMatrix
const
SkPath
&
)
;
SkBudgeted
isBudgeted
(
)
const
;
void
testingOnly_drawBatch
(
const
GrPaint
&
GrDrawBatch
*
batch
const
GrUserStencilSettings
*
=
nullptr
bool
snapToCenters
=
false
)
;
private
:
explicit
GrDrawContextPriv
(
GrDrawContext
*
drawContext
)
:
fDrawContext
(
drawContext
)
{
}
GrDrawContextPriv
(
const
GrRenderTargetPriv
&
)
{
}
GrDrawContextPriv
&
operator
=
(
const
GrRenderTargetPriv
&
)
;
const
GrDrawContextPriv
*
operator
&
(
)
const
;
GrDrawContextPriv
*
operator
&
(
)
;
GrDrawContext
*
fDrawContext
;
friend
class
GrDrawContext
;
}
;
inline
GrDrawContextPriv
GrDrawContext
:
:
drawContextPriv
(
)
{
return
GrDrawContextPriv
(
this
)
;
}
inline
const
GrDrawContextPriv
GrDrawContext
:
:
drawContextPriv
(
)
const
{
return
GrDrawContextPriv
(
const_cast
<
GrDrawContext
*
>
(
this
)
)
;
}
#
endif
