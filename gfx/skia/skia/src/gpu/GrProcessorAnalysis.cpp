#
include
"
GrProcessorAnalysis
.
h
"
#
include
"
GrGeometryProcessor
.
h
"
#
include
"
ops
/
GrDrawOp
.
h
"
void
GrColorFragmentProcessorAnalysis
:
:
analyzeProcessors
(
const
GrFragmentProcessor
*
const
*
processors
int
cnt
)
{
for
(
int
i
=
0
;
i
<
cnt
;
+
+
i
)
{
bool
knowCurrentOutput
=
fProcessorsVisitedWithKnownOutput
=
=
fTotalProcessorsVisited
;
if
(
fUsesLocalCoords
&
&
!
knowCurrentOutput
&
&
!
fAllProcessorsCompatibleWithCoverageAsAlpha
&
&
!
fIsOpaque
)
{
fTotalProcessorsVisited
+
=
cnt
-
i
;
return
;
}
const
GrFragmentProcessor
*
fp
=
processors
[
i
]
;
if
(
knowCurrentOutput
&
&
fp
-
>
hasConstantOutputForConstantInput
(
fLastKnownOutputColor
&
fLastKnownOutputColor
)
)
{
+
+
fProcessorsVisitedWithKnownOutput
;
fIsOpaque
=
fLastKnownOutputColor
.
isOpaque
(
)
;
fAllProcessorsCompatibleWithCoverageAsAlpha
=
true
;
fUsesLocalCoords
=
false
;
}
else
if
(
fIsOpaque
&
&
!
fp
-
>
preservesOpaqueInput
(
)
)
{
fIsOpaque
=
false
;
}
if
(
fAllProcessorsCompatibleWithCoverageAsAlpha
&
&
!
fp
-
>
compatibleWithCoverageAsAlpha
(
)
)
{
fAllProcessorsCompatibleWithCoverageAsAlpha
=
false
;
}
if
(
fp
-
>
usesLocalCoords
(
)
)
{
fUsesLocalCoords
=
true
;
}
+
+
fTotalProcessorsVisited
;
}
}
