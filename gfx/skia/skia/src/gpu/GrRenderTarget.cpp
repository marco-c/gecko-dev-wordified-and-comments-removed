#
include
"
src
/
gpu
/
GrRenderTarget
.
h
"
#
include
"
include
/
gpu
/
GrContext
.
h
"
#
include
"
src
/
core
/
SkRectPriv
.
h
"
#
include
"
src
/
gpu
/
GrContextPriv
.
h
"
#
include
"
src
/
gpu
/
GrGpu
.
h
"
#
include
"
src
/
gpu
/
GrRenderTargetContext
.
h
"
#
include
"
src
/
gpu
/
GrRenderTargetPriv
.
h
"
#
include
"
src
/
gpu
/
GrSamplePatternDictionary
.
h
"
#
include
"
src
/
gpu
/
GrStencilAttachment
.
h
"
#
include
"
src
/
gpu
/
GrStencilSettings
.
h
"
GrRenderTarget
:
:
GrRenderTarget
(
GrGpu
*
gpu
const
SkISize
&
size
GrPixelConfig
config
int
sampleCount
GrProtected
isProtected
GrStencilAttachment
*
stencil
)
:
INHERITED
(
gpu
size
config
isProtected
)
fSampleCnt
(
sampleCount
)
fSamplePatternKey
(
GrSamplePatternDictionary
:
:
kInvalidSamplePatternKey
)
fStencilAttachment
(
stencil
)
{
}
GrRenderTarget
:
:
~
GrRenderTarget
(
)
=
default
;
void
GrRenderTarget
:
:
onRelease
(
)
{
fStencilAttachment
=
nullptr
;
INHERITED
:
:
onRelease
(
)
;
}
void
GrRenderTarget
:
:
onAbandon
(
)
{
fStencilAttachment
=
nullptr
;
INHERITED
:
:
onAbandon
(
)
;
}
void
GrRenderTargetPriv
:
:
attachStencilAttachment
(
sk_sp
<
GrStencilAttachment
>
stencil
)
{
#
ifdef
SK_DEBUG
if
(
1
=
=
fRenderTarget
-
>
fSampleCnt
)
{
SkASSERT
(
GrSamplePatternDictionary
:
:
kInvalidSamplePatternKey
=
=
fRenderTarget
-
>
fSamplePatternKey
)
;
}
else
{
SkASSERT
(
!
stencil
|
|
stencil
-
>
numSamples
(
)
=
=
fRenderTarget
-
>
fSampleCnt
)
;
}
#
endif
if
(
!
stencil
&
&
!
fRenderTarget
-
>
fStencilAttachment
)
{
return
;
}
fRenderTarget
-
>
fStencilAttachment
=
std
:
:
move
(
stencil
)
;
if
(
!
fRenderTarget
-
>
completeStencilAttachment
(
)
)
{
fRenderTarget
-
>
fStencilAttachment
=
nullptr
;
}
}
int
GrRenderTargetPriv
:
:
numStencilBits
(
)
const
{
SkASSERT
(
this
-
>
getStencilAttachment
(
)
)
;
return
this
-
>
getStencilAttachment
(
)
-
>
bits
(
)
;
}
int
GrRenderTargetPriv
:
:
getSamplePatternKey
(
)
const
{
#
ifdef
SK_DEBUG
GrStencilAttachment
*
stencil
=
fRenderTarget
-
>
fStencilAttachment
.
get
(
)
;
if
(
fRenderTarget
-
>
fSampleCnt
<
=
1
)
{
SkASSERT
(
stencil
&
&
stencil
-
>
numSamples
(
)
>
1
)
;
}
else
{
SkASSERT
(
!
stencil
|
|
stencil
-
>
numSamples
(
)
=
=
fRenderTarget
-
>
fSampleCnt
)
;
}
#
endif
if
(
GrSamplePatternDictionary
:
:
kInvalidSamplePatternKey
=
=
fRenderTarget
-
>
fSamplePatternKey
)
{
fRenderTarget
-
>
fSamplePatternKey
=
fRenderTarget
-
>
getGpu
(
)
-
>
findOrAssignSamplePatternKey
(
fRenderTarget
)
;
}
SkASSERT
(
GrSamplePatternDictionary
:
:
kInvalidSamplePatternKey
!
=
fRenderTarget
-
>
fSamplePatternKey
)
;
return
fRenderTarget
-
>
fSamplePatternKey
;
}
