#
ifndef
GrTInstanceBatch_DEFINED
#
define
GrTInstanceBatch_DEFINED
#
include
"
GrVertexBatch
.
h
"
#
include
"
GrBatchFlushState
.
h
"
template
<
typename
Impl
>
class
GrTInstanceBatch
:
public
GrVertexBatch
{
public
:
DEFINE_BATCH_CLASS_ID
typedef
typename
Impl
:
:
Geometry
Geometry
;
static
GrTInstanceBatch
*
Create
(
)
{
return
new
GrTInstanceBatch
;
}
const
char
*
name
(
)
const
override
{
return
Impl
:
:
Name
(
)
;
}
SkString
dumpInfo
(
)
const
override
{
SkString
str
;
for
(
int
i
=
0
;
i
<
fGeoData
.
count
(
)
;
+
+
i
)
{
str
.
append
(
Impl
:
:
DumpInfo
(
fGeoData
[
i
]
i
)
)
;
}
str
.
append
(
INHERITED
:
:
dumpInfo
(
)
)
;
return
str
;
}
void
computePipelineOptimizations
(
GrInitInvariantOutput
*
color
GrInitInvariantOutput
*
coverage
GrBatchToXPOverrides
*
overrides
)
const
override
{
color
-
>
setKnownFourComponents
(
fGeoData
[
0
]
.
fColor
)
;
Impl
:
:
InitInvariantOutputCoverage
(
coverage
)
;
}
void
initBatchTracker
(
const
GrXPOverridesForBatch
&
overrides
)
override
{
overrides
.
getOverrideColorIfSet
(
&
fGeoData
[
0
]
.
fColor
)
;
fOverrides
=
overrides
;
}
SkSTArray
<
1
Geometry
true
>
*
geoData
(
)
{
return
&
fGeoData
;
}
void
init
(
)
{
const
Geometry
&
geo
=
fGeoData
[
0
]
;
Impl
:
:
SetBounds
(
geo
&
fBounds
)
;
}
void
updateBoundsAfterAppend
(
)
{
const
Geometry
&
geo
=
fGeoData
.
back
(
)
;
Impl
:
:
UpdateBoundsAfterAppend
(
geo
&
fBounds
)
;
}
private
:
GrTInstanceBatch
(
)
:
INHERITED
(
ClassID
(
)
)
{
}
void
onPrepareDraws
(
Target
*
target
)
const
override
{
SkAutoTUnref
<
const
GrGeometryProcessor
>
gp
(
Impl
:
:
CreateGP
(
this
-
>
seedGeometry
(
)
fOverrides
)
)
;
if
(
!
gp
)
{
SkDebugf
(
"
Couldn
'
t
create
GrGeometryProcessor
\
n
"
)
;
return
;
}
size_t
vertexStride
=
gp
-
>
getVertexStride
(
)
;
int
instanceCount
=
fGeoData
.
count
(
)
;
SkAutoTUnref
<
const
GrBuffer
>
indexBuffer
(
Impl
:
:
GetIndexBuffer
(
target
-
>
resourceProvider
(
)
)
)
;
InstancedHelper
helper
;
void
*
vertices
=
helper
.
init
(
target
kTriangles_GrPrimitiveType
vertexStride
indexBuffer
Impl
:
:
kVertsPerInstance
Impl
:
:
kIndicesPerInstance
instanceCount
)
;
if
(
!
vertices
|
|
!
indexBuffer
)
{
SkDebugf
(
"
Could
not
allocate
vertices
\
n
"
)
;
return
;
}
for
(
int
i
=
0
;
i
<
instanceCount
;
i
+
+
)
{
intptr_t
verts
=
reinterpret_cast
<
intptr_t
>
(
vertices
)
+
i
*
Impl
:
:
kVertsPerInstance
*
vertexStride
;
Impl
:
:
Tesselate
(
verts
vertexStride
fGeoData
[
i
]
fOverrides
)
;
}
helper
.
recordDraw
(
target
gp
)
;
}
const
Geometry
&
seedGeometry
(
)
const
{
return
fGeoData
[
0
]
;
}
bool
onCombineIfPossible
(
GrBatch
*
t
const
GrCaps
&
caps
)
override
{
GrTInstanceBatch
*
that
=
t
-
>
cast
<
GrTInstanceBatch
>
(
)
;
if
(
!
GrPipeline
:
:
CanCombine
(
*
this
-
>
pipeline
(
)
this
-
>
bounds
(
)
*
that
-
>
pipeline
(
)
that
-
>
bounds
(
)
caps
)
)
{
return
false
;
}
if
(
!
Impl
:
:
CanCombine
(
this
-
>
seedGeometry
(
)
that
-
>
seedGeometry
(
)
fOverrides
)
)
{
return
false
;
}
if
(
fOverrides
.
canTweakAlphaForCoverage
(
)
&
&
!
that
-
>
fOverrides
.
canTweakAlphaForCoverage
(
)
)
{
fOverrides
=
that
-
>
fOverrides
;
}
fGeoData
.
push_back_n
(
that
-
>
geoData
(
)
-
>
count
(
)
that
-
>
geoData
(
)
-
>
begin
(
)
)
;
this
-
>
joinBounds
(
that
-
>
bounds
(
)
)
;
return
true
;
}
GrXPOverridesForBatch
fOverrides
;
SkSTArray
<
1
Geometry
true
>
fGeoData
;
typedef
GrVertexBatch
INHERITED
;
}
;
#
endif
