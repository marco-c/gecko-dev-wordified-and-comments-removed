#
ifndef
GrDrawBatch_DEFINED
#
define
GrDrawBatch_DEFINED
#
include
"
GrBatch
.
h
"
#
include
"
GrPipeline
.
h
"
struct
GrInitInvariantOutput
;
typedef
uint64_t
GrBatchToken
;
class
GrBatchUploader
:
public
SkRefCnt
{
public
:
class
TextureUploader
;
GrBatchUploader
(
GrBatchToken
lastUploadToken
)
:
fLastUploadToken
(
lastUploadToken
)
{
}
GrBatchToken
lastUploadToken
(
)
const
{
return
fLastUploadToken
;
}
virtual
void
upload
(
TextureUploader
*
)
=
0
;
private
:
GrBatchToken
fLastUploadToken
;
}
;
class
GrDrawBatch
:
public
GrBatch
{
public
:
class
Target
;
GrDrawBatch
(
uint32_t
classID
)
;
~
GrDrawBatch
(
)
override
;
void
getPipelineOptimizations
(
GrPipelineOptimizations
*
override
)
const
;
const
GrPipeline
*
pipeline
(
)
const
{
SkASSERT
(
fPipelineInstalled
)
;
return
reinterpret_cast
<
const
GrPipeline
*
>
(
fPipelineStorage
.
get
(
)
)
;
}
bool
installPipeline
(
const
GrPipeline
:
:
CreateArgs
&
)
;
bool
willReadFragmentPosition
(
)
const
{
return
false
;
}
uint32_t
renderTargetUniqueID
(
)
const
final
{
SkASSERT
(
fPipelineInstalled
)
;
return
this
-
>
pipeline
(
)
-
>
getRenderTarget
(
)
-
>
getUniqueID
(
)
;
}
SkString
dumpInfo
(
)
const
override
{
SkString
string
;
string
.
appendf
(
"
RT
:
%
d
\
n
"
this
-
>
renderTargetUniqueID
(
)
)
;
string
.
append
(
"
ColorStages
:
\
n
"
)
;
for
(
int
i
=
0
;
i
<
this
-
>
pipeline
(
)
-
>
numColorFragmentProcessors
(
)
;
i
+
+
)
{
string
.
appendf
(
"
\
t
\
t
%
s
\
n
\
t
\
t
%
s
\
n
"
this
-
>
pipeline
(
)
-
>
getColorFragmentProcessor
(
i
)
.
name
(
)
this
-
>
pipeline
(
)
-
>
getColorFragmentProcessor
(
i
)
.
dumpInfo
(
)
.
c_str
(
)
)
;
}
string
.
append
(
"
CoverageStages
:
\
n
"
)
;
for
(
int
i
=
0
;
i
<
this
-
>
pipeline
(
)
-
>
numCoverageFragmentProcessors
(
)
;
i
+
+
)
{
string
.
appendf
(
"
\
t
\
t
%
s
\
n
\
t
\
t
%
s
\
n
"
this
-
>
pipeline
(
)
-
>
getCoverageFragmentProcessor
(
i
)
.
name
(
)
this
-
>
pipeline
(
)
-
>
getCoverageFragmentProcessor
(
i
)
.
dumpInfo
(
)
.
c_str
(
)
)
;
}
string
.
appendf
(
"
XP
:
%
s
\
n
"
this
-
>
pipeline
(
)
-
>
getXferProcessor
(
)
-
>
name
(
)
)
;
return
string
;
}
protected
:
virtual
void
computePipelineOptimizations
(
GrInitInvariantOutput
*
color
GrInitInvariantOutput
*
coverage
GrBatchToXPOverrides
*
overrides
)
const
=
0
;
private
:
virtual
void
initBatchTracker
(
const
GrXPOverridesForBatch
&
)
=
0
;
protected
:
SkTArray
<
SkAutoTUnref
<
GrBatchUploader
>
true
>
fInlineUploads
;
private
:
SkAlignedSTStorage
<
1
GrPipeline
>
fPipelineStorage
;
bool
fPipelineInstalled
;
typedef
GrBatch
INHERITED
;
}
;
#
endif
