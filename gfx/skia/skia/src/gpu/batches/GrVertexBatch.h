#
ifndef
GrVertexBatch_DEFINED
#
define
GrVertexBatch_DEFINED
#
include
"
GrDrawBatch
.
h
"
#
include
"
GrPrimitiveProcessor
.
h
"
#
include
"
GrPendingProgramElement
.
h
"
#
include
"
GrVertices
.
h
"
#
include
"
SkTLList
.
h
"
class
GrBatchFlushState
;
class
GrVertexBatch
:
public
GrDrawBatch
{
public
:
class
Target
;
GrVertexBatch
(
uint32_t
classID
)
;
protected
:
class
InstancedHelper
{
public
:
InstancedHelper
(
)
{
}
void
*
init
(
Target
*
GrPrimitiveType
size_t
vertexStride
const
GrIndexBuffer
*
int
verticesPerInstance
int
indicesPerInstance
int
instancesToDraw
)
;
void
recordDraw
(
Target
*
target
)
;
private
:
GrVertices
fVertices
;
}
;
static
const
int
kVerticesPerQuad
=
4
;
static
const
int
kIndicesPerQuad
=
6
;
class
QuadHelper
:
private
InstancedHelper
{
public
:
QuadHelper
(
)
:
INHERITED
(
)
{
}
void
*
init
(
Target
*
batchTarget
size_t
vertexStride
int
quadsToDraw
)
;
using
InstancedHelper
:
:
recordDraw
;
private
:
typedef
InstancedHelper
INHERITED
;
}
;
private
:
void
onPrepare
(
GrBatchFlushState
*
state
)
final
;
void
onDraw
(
GrBatchFlushState
*
state
)
final
;
virtual
void
onPrepareDraws
(
Target
*
)
const
=
0
;
struct
DrawArray
{
SkSTArray
<
1
GrVertices
true
>
fDraws
;
GrPendingProgramElement
<
const
GrPrimitiveProcessor
>
fPrimitiveProcessor
;
}
;
typedef
SkTLList
<
DrawArray
4
>
DrawArrayList
;
DrawArrayList
fDrawArrays
;
typedef
GrDrawBatch
INHERITED
;
}
;
#
endif
