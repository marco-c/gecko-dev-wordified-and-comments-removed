#
include
"
GrGLContext
.
h
"
#
include
"
GrGLGLSL
.
h
"
#
include
"
SkSLCompiler
.
h
"
std
:
:
unique_ptr
<
GrGLContext
>
GrGLContext
:
:
Make
(
sk_sp
<
const
GrGLInterface
>
interface
const
GrContextOptions
&
options
)
{
if
(
!
interface
-
>
validate
(
)
)
{
return
nullptr
;
}
const
GrGLubyte
*
verUByte
;
GR_GL_CALL_RET
(
interface
.
get
(
)
verUByte
GetString
(
GR_GL_VERSION
)
)
;
const
char
*
ver
=
reinterpret_cast
<
const
char
*
>
(
verUByte
)
;
const
GrGLubyte
*
rendererUByte
;
GR_GL_CALL_RET
(
interface
.
get
(
)
rendererUByte
GetString
(
GR_GL_RENDERER
)
)
;
const
char
*
renderer
=
reinterpret_cast
<
const
char
*
>
(
rendererUByte
)
;
ConstructorArgs
args
;
args
.
fGLVersion
=
GrGLGetVersionFromString
(
ver
)
;
if
(
GR_GL_INVALID_VER
=
=
args
.
fGLVersion
)
{
return
nullptr
;
}
if
(
!
GrGLGetGLSLGeneration
(
interface
.
get
(
)
&
args
.
fGLSLGeneration
)
)
{
return
nullptr
;
}
args
.
fVendor
=
GrGLGetVendor
(
interface
.
get
(
)
)
;
args
.
fRenderer
=
GrGLGetRendererFromStrings
(
renderer
interface
-
>
fExtensions
)
;
GrGLGetANGLEInfoFromString
(
renderer
&
args
.
fANGLEBackend
&
args
.
fANGLEVendor
&
args
.
fANGLERenderer
)
;
if
(
kAdreno3xx_GrGLRenderer
=
=
args
.
fRenderer
)
{
args
.
fGLSLGeneration
=
k110_GrGLSLGeneration
;
}
if
(
kGLES_GrGLStandard
=
=
interface
-
>
fStandard
&
&
options
.
fPreferExternalImagesOverES3
&
&
!
options
.
fDisableDriverCorrectnessWorkarounds
&
&
interface
-
>
hasExtension
(
"
GL_OES_EGL_image_external
"
)
&
&
args
.
fGLSLGeneration
>
=
k330_GrGLSLGeneration
&
&
!
interface
-
>
hasExtension
(
"
GL_OES_EGL_image_external_essl3
"
)
&
&
!
interface
-
>
hasExtension
(
"
OES_EGL_image_external_essl3
"
)
)
{
args
.
fGLSLGeneration
=
k110_GrGLSLGeneration
;
}
GrGLGetDriverInfo
(
interface
-
>
fStandard
args
.
fVendor
renderer
ver
&
args
.
fDriver
&
args
.
fDriverVersion
)
;
args
.
fContextOptions
=
&
options
;
args
.
fInterface
=
std
:
:
move
(
interface
)
;
return
std
:
:
unique_ptr
<
GrGLContext
>
(
new
GrGLContext
(
std
:
:
move
(
args
)
)
)
;
}
GrGLContext
:
:
~
GrGLContext
(
)
{
delete
fCompiler
;
}
SkSL
:
:
Compiler
*
GrGLContext
:
:
compiler
(
)
const
{
if
(
!
fCompiler
)
{
fCompiler
=
new
SkSL
:
:
Compiler
(
)
;
}
return
fCompiler
;
}
GrGLContextInfo
:
:
GrGLContextInfo
(
ConstructorArgs
&
&
args
)
{
fInterface
=
std
:
:
move
(
args
.
fInterface
)
;
fGLVersion
=
args
.
fGLVersion
;
fGLSLGeneration
=
args
.
fGLSLGeneration
;
fVendor
=
args
.
fVendor
;
fRenderer
=
args
.
fRenderer
;
fDriver
=
args
.
fDriver
;
fDriverVersion
=
args
.
fDriverVersion
;
fANGLEBackend
=
args
.
fANGLEBackend
;
fANGLEVendor
=
args
.
fANGLEVendor
;
fANGLERenderer
=
args
.
fANGLERenderer
;
fGLCaps
=
sk_make_sp
<
GrGLCaps
>
(
*
args
.
fContextOptions
*
this
fInterface
.
get
(
)
)
;
}
