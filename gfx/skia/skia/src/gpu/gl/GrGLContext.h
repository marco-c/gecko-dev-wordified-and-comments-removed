#
ifndef
GrGLContext_DEFINED
#
define
GrGLContext_DEFINED
#
include
"
gl
/
GrGLExtensions
.
h
"
#
include
"
gl
/
GrGLInterface
.
h
"
#
include
"
GrGLCaps
.
h
"
#
include
"
GrGLUtil
.
h
"
struct
GrContextOptions
;
namespace
SkSL
{
class
Compiler
;
}
class
GrGLContextInfo
:
public
SkRefCnt
{
public
:
GrGLStandard
standard
(
)
const
{
return
fInterface
-
>
fStandard
;
}
GrGLVersion
version
(
)
const
{
return
fGLVersion
;
}
GrGLSLGeneration
glslGeneration
(
)
const
{
return
fGLSLGeneration
;
}
GrGLVendor
vendor
(
)
const
{
return
fVendor
;
}
GrGLRenderer
renderer
(
)
const
{
return
fRenderer
;
}
GrGLDriver
driver
(
)
const
{
return
fDriver
;
}
GrGLDriverVersion
driverVersion
(
)
const
{
return
fDriverVersion
;
}
const
GrGLCaps
*
caps
(
)
const
{
return
fGLCaps
.
get
(
)
;
}
GrGLCaps
*
caps
(
)
{
return
fGLCaps
.
get
(
)
;
}
bool
hasExtension
(
const
char
*
ext
)
const
{
return
fInterface
-
>
hasExtension
(
ext
)
;
}
const
GrGLExtensions
&
extensions
(
)
const
{
return
fInterface
-
>
fExtensions
;
}
virtual
~
GrGLContextInfo
(
)
{
}
protected
:
struct
ConstructorArgs
{
const
GrGLInterface
*
fInterface
;
GrGLVersion
fGLVersion
;
GrGLSLGeneration
fGLSLGeneration
;
GrGLVendor
fVendor
;
GrGLRenderer
fRenderer
;
GrGLDriver
fDriver
;
GrGLDriverVersion
fDriverVersion
;
const
GrContextOptions
*
fContextOptions
;
}
;
GrGLContextInfo
(
const
ConstructorArgs
&
args
)
;
sk_sp
<
const
GrGLInterface
>
fInterface
;
GrGLVersion
fGLVersion
;
GrGLSLGeneration
fGLSLGeneration
;
GrGLVendor
fVendor
;
GrGLRenderer
fRenderer
;
GrGLDriver
fDriver
;
GrGLDriverVersion
fDriverVersion
;
sk_sp
<
GrGLCaps
>
fGLCaps
;
}
;
class
GrGLContext
:
public
GrGLContextInfo
{
public
:
static
GrGLContext
*
Create
(
const
GrGLInterface
*
interface
const
GrContextOptions
&
options
)
;
const
GrGLInterface
*
interface
(
)
const
{
return
fInterface
.
get
(
)
;
}
SkSL
:
:
Compiler
*
compiler
(
)
const
;
~
GrGLContext
(
)
override
;
private
:
GrGLContext
(
const
ConstructorArgs
&
args
)
:
INHERITED
(
args
)
fCompiler
(
nullptr
)
{
}
mutable
SkSL
:
:
Compiler
*
fCompiler
;
typedef
GrGLContextInfo
INHERITED
;
}
;
#
endif
