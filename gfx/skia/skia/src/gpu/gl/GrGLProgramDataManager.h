#
ifndef
GrGLProgramDataManager_DEFINED
#
define
GrGLProgramDataManager_DEFINED
#
include
"
glsl
/
GrGLSLProgramDataManager
.
h
"
#
include
"
GrAllocator
.
h
"
#
include
"
gl
/
GrGLTypes
.
h
"
#
include
"
glsl
/
GrGLSLShaderVar
.
h
"
#
include
"
SkTArray
.
h
"
class
GrGLGpu
;
class
SkMatrix
;
class
GrGLProgram
;
class
GrGLProgramDataManager
:
public
GrGLSLProgramDataManager
{
public
:
struct
UniformInfo
{
GrGLSLShaderVar
fVariable
;
uint32_t
fVisibility
;
GrGLint
fLocation
;
}
;
struct
VaryingInfo
{
GrGLSLShaderVar
fVariable
;
GrGLint
fLocation
;
}
;
typedef
GrTAllocator
<
UniformInfo
>
UniformInfoArray
;
typedef
GrTAllocator
<
VaryingInfo
>
VaryingInfoArray
;
GrGLProgramDataManager
(
GrGLGpu
*
GrGLuint
programID
const
UniformInfoArray
&
const
VaryingInfoArray
&
)
;
void
setSampler
(
UniformHandle
int
texUnit
)
const
;
void
set1f
(
UniformHandle
float
v0
)
const
override
;
void
set1fv
(
UniformHandle
int
arrayCount
const
float
v
[
]
)
const
override
;
void
set2f
(
UniformHandle
float
float
)
const
override
;
void
set2fv
(
UniformHandle
int
arrayCount
const
float
v
[
]
)
const
override
;
void
set3f
(
UniformHandle
float
float
float
)
const
override
;
void
set3fv
(
UniformHandle
int
arrayCount
const
float
v
[
]
)
const
override
;
void
set4f
(
UniformHandle
float
float
float
float
)
const
override
;
void
set4fv
(
UniformHandle
int
arrayCount
const
float
v
[
]
)
const
override
;
void
setMatrix3f
(
UniformHandle
const
float
matrix
[
]
)
const
override
;
void
setMatrix4f
(
UniformHandle
const
float
matrix
[
]
)
const
override
;
void
setMatrix3fv
(
UniformHandle
int
arrayCount
const
float
matrices
[
]
)
const
override
;
void
setMatrix4fv
(
UniformHandle
int
arrayCount
const
float
matrices
[
]
)
const
override
;
void
setSkMatrix
(
UniformHandle
const
SkMatrix
&
)
const
override
;
void
setPathFragmentInputTransform
(
VaryingHandle
u
int
components
const
SkMatrix
&
matrix
)
const
override
;
private
:
enum
{
kUnusedUniform
=
-
1
}
;
struct
Uniform
{
GrGLint
fVSLocation
;
GrGLint
fFSLocation
;
SkDEBUGCODE
(
GrSLType
fType
;
int
fArrayCount
;
)
;
}
;
enum
{
kUnusedPathProcVarying
=
-
1
}
;
struct
PathProcVarying
{
GrGLint
fLocation
;
SkDEBUGCODE
(
GrSLType
fType
;
int
fArrayCount
;
)
;
}
;
SkDEBUGCODE
(
void
printUnused
(
const
Uniform
&
)
const
;
)
SkTArray
<
Uniform
true
>
fUniforms
;
SkTArray
<
PathProcVarying
true
>
fPathProcVaryings
;
GrGLGpu
*
fGpu
;
GrGLuint
fProgramID
;
typedef
GrGLSLProgramDataManager
INHERITED
;
}
;
#
endif
