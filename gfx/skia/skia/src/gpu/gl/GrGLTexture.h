#
ifndef
GrGLTexture_DEFINED
#
define
GrGLTexture_DEFINED
#
include
"
GrGpu
.
h
"
#
include
"
GrTexture
.
h
"
#
include
"
GrGLUtil
.
h
"
class
GrGLGpu
;
class
GrGLTexture
:
public
GrTexture
{
public
:
struct
TexParams
{
GrGLenum
fMinFilter
;
GrGLenum
fMagFilter
;
GrGLenum
fWrapS
;
GrGLenum
fWrapT
;
GrGLenum
fMaxMipMapLevel
;
GrGLenum
fSwizzleRGBA
[
4
]
;
GrGLenum
fSRGBDecode
;
void
invalidate
(
)
{
memset
(
this
0xff
sizeof
(
TexParams
)
)
;
}
}
;
struct
IDDesc
{
GrGLTextureInfo
fInfo
;
GrGpuResource
:
:
LifeCycle
fLifeCycle
;
}
;
GrGLTexture
(
GrGLGpu
*
const
GrSurfaceDesc
&
const
IDDesc
&
)
;
GrGLTexture
(
GrGLGpu
*
const
GrSurfaceDesc
&
const
IDDesc
&
bool
wasMipMapDataProvided
)
;
GrBackendObject
getTextureHandle
(
)
const
override
;
void
textureParamsModified
(
)
override
{
fTexParams
.
invalidate
(
)
;
}
const
TexParams
&
getCachedTexParams
(
GrGpu
:
:
ResetTimestamp
*
timestamp
)
const
{
*
timestamp
=
fTexParamsTimestamp
;
return
fTexParams
;
}
void
setCachedTexParams
(
const
TexParams
&
texParams
GrGpu
:
:
ResetTimestamp
timestamp
)
{
fTexParams
=
texParams
;
fTexParamsTimestamp
=
timestamp
;
}
GrGLuint
textureID
(
)
const
{
return
fInfo
.
fID
;
}
GrGLenum
target
(
)
const
{
return
fInfo
.
fTarget
;
}
protected
:
enum
Derived
{
kDerived
}
;
GrGLTexture
(
GrGLGpu
*
const
GrSurfaceDesc
&
const
IDDesc
&
Derived
)
;
void
init
(
const
GrSurfaceDesc
&
const
IDDesc
&
)
;
void
onAbandon
(
)
override
;
void
onRelease
(
)
override
;
void
setMemoryBacking
(
SkTraceMemoryDump
*
traceMemoryDump
const
SkString
&
dumpName
)
const
override
;
private
:
TexParams
fTexParams
;
GrGpu
:
:
ResetTimestamp
fTexParamsTimestamp
;
GrGLTextureInfo
fInfo
;
LifeCycle
fTextureIDLifecycle
;
typedef
GrTexture
INHERITED
;
}
;
#
endif
