#
ifndef
GrGLRenderTarget_DEFINED
#
define
GrGLRenderTarget_DEFINED
#
include
"
GrGLIRect
.
h
"
#
include
"
GrRenderTarget
.
h
"
#
include
"
SkScalar
.
h
"
class
GrGLGpu
;
class
GrGLStencilAttachment
;
class
GrGLRenderTarget
:
public
GrRenderTarget
{
public
:
enum
{
kUnresolvableFBOID
=
0
}
;
struct
IDDesc
{
GrGLuint
fRTFBOID
;
GrGLuint
fTexFBOID
;
GrGLuint
fMSColorRenderbufferID
;
GrGpuResource
:
:
LifeCycle
fLifeCycle
;
GrRenderTarget
:
:
SampleConfig
fSampleConfig
;
}
;
static
GrGLRenderTarget
*
CreateWrapped
(
GrGLGpu
*
const
GrSurfaceDesc
&
const
IDDesc
&
int
stencilBits
)
;
void
setViewport
(
const
GrGLIRect
&
rect
)
{
fViewport
=
rect
;
}
const
GrGLIRect
&
getViewport
(
)
const
{
return
fViewport
;
}
GrGLuint
renderFBOID
(
)
const
{
return
fRTFBOID
;
}
GrGLuint
textureFBOID
(
)
const
{
return
fTexFBOID
;
}
ResolveType
getResolveType
(
)
const
override
{
if
(
!
this
-
>
isUnifiedMultisampled
(
)
|
|
fRTFBOID
=
=
fTexFBOID
)
{
return
kAutoResolves_ResolveType
;
}
else
if
(
kUnresolvableFBOID
=
=
fTexFBOID
)
{
return
kCantResolve_ResolveType
;
}
else
{
return
kCanResolve_ResolveType
;
}
}
GrBackendObject
getRenderTargetHandle
(
)
const
override
{
return
fRTFBOID
;
}
bool
canAttemptStencilAttachment
(
)
const
override
{
return
kCached_LifeCycle
=
=
fRTLifecycle
|
|
kUncached_LifeCycle
=
=
fRTLifecycle
;
}
void
dumpMemoryStatistics
(
SkTraceMemoryDump
*
traceMemoryDump
)
const
override
;
protected
:
enum
Derived
{
kDerived
}
;
GrGLRenderTarget
(
GrGLGpu
*
const
GrSurfaceDesc
&
const
IDDesc
&
Derived
)
;
void
init
(
const
GrSurfaceDesc
&
const
IDDesc
&
)
;
void
onAbandon
(
)
override
;
void
onRelease
(
)
override
;
size_t
onGpuMemorySize
(
)
const
override
;
private
:
GrGLRenderTarget
(
GrGLGpu
*
const
GrSurfaceDesc
&
const
IDDesc
&
GrGLStencilAttachment
*
)
;
GrGLGpu
*
getGLGpu
(
)
const
;
bool
completeStencilAttachment
(
)
override
;
size_t
totalBytesPerSample
(
)
const
;
int
msaaSamples
(
)
const
;
int
totalSamples
(
)
const
;
GrGLuint
fRTFBOID
;
GrGLuint
fTexFBOID
;
GrGLuint
fMSColorRenderbufferID
;
LifeCycle
fRTLifecycle
;
GrGLIRect
fViewport
;
size_t
fGpuMemorySize
;
typedef
GrRenderTarget
INHERITED
;
}
;
#
endif
