#
ifndef
GrGLBufferImpl_DEFINED
#
define
GrGLBufferImpl_DEFINED
#
include
"
SkTypes
.
h
"
#
include
"
gl
/
GrGLTypes
.
h
"
class
GrGLGpu
;
class
GrGLBufferImpl
:
SkNoncopyable
{
public
:
enum
Usage
{
kStaticDraw_Usage
=
0
kDynamicDraw_Usage
kStreamDraw_Usage
kStreamRead_Usage
kLast_Usage
=
kStreamRead_Usage
}
;
static
const
int
kUsageCount
=
kLast_Usage
+
1
;
struct
Desc
{
GrGLuint
fID
;
size_t
fSizeInBytes
;
Usage
fUsage
;
}
;
GrGLBufferImpl
(
GrGLGpu
*
const
Desc
&
GrGLenum
bufferType
)
;
~
GrGLBufferImpl
(
)
{
SkASSERT
(
0
=
=
fDesc
.
fID
)
;
}
void
abandon
(
)
;
void
release
(
GrGLGpu
*
gpu
)
;
GrGLuint
bufferID
(
)
const
{
return
fDesc
.
fID
;
}
size_t
baseOffset
(
)
const
{
return
reinterpret_cast
<
size_t
>
(
fCPUData
)
;
}
GrGLenum
bufferType
(
)
const
{
return
fBufferType
;
}
void
*
map
(
GrGLGpu
*
gpu
)
;
void
unmap
(
GrGLGpu
*
gpu
)
;
bool
isMapped
(
)
const
;
bool
updateData
(
GrGLGpu
*
gpu
const
void
*
src
size_t
srcSizeInBytes
)
;
private
:
void
validate
(
)
const
;
Desc
fDesc
;
GrGLenum
fBufferType
;
void
*
fCPUData
;
void
*
fMapPtr
;
size_t
fGLSizeInBytes
;
typedef
SkNoncopyable
INHERITED
;
}
;
#
endif
