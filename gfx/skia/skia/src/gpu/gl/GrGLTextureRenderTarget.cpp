#
include
"
GrGLTextureRenderTarget
.
h
"
#
include
"
SkTraceMemoryDump
.
h
"
void
GrGLTextureRenderTarget
:
:
dumpMemoryStatistics
(
SkTraceMemoryDump
*
traceMemoryDump
)
const
{
GrGLRenderTarget
:
:
dumpMemoryStatistics
(
traceMemoryDump
)
;
SkString
dumpName
(
"
skia
/
gpu_resources
/
resource_
"
)
;
dumpName
.
appendS32
(
this
-
>
uniqueID
(
)
)
;
dumpName
.
append
(
"
/
texture
"
)
;
size_t
size
=
GrGLTexture
:
:
gpuMemorySize
(
)
;
traceMemoryDump
-
>
dumpNumericValue
(
dumpName
.
c_str
(
)
"
size
"
"
bytes
"
size
)
;
if
(
this
-
>
isPurgeable
(
)
)
{
traceMemoryDump
-
>
dumpNumericValue
(
dumpName
.
c_str
(
)
"
purgeable_size
"
"
bytes
"
size
)
;
}
SkString
texture_id
;
texture_id
.
appendU32
(
this
-
>
textureID
(
)
)
;
traceMemoryDump
-
>
setMemoryBacking
(
dumpName
.
c_str
(
)
"
gl_texture
"
texture_id
.
c_str
(
)
)
;
}
bool
GrGLTextureRenderTarget
:
:
canAttemptStencilAttachment
(
)
const
{
return
true
;
}
GrGLTextureRenderTarget
*
GrGLTextureRenderTarget
:
:
CreateWrapped
(
GrGLGpu
*
gpu
const
GrSurfaceDesc
&
desc
const
GrGLTexture
:
:
IDDesc
&
texIDDesc
const
GrGLRenderTarget
:
:
IDDesc
&
rtIDDesc
)
{
return
new
GrGLTextureRenderTarget
(
gpu
desc
texIDDesc
rtIDDesc
)
;
}
