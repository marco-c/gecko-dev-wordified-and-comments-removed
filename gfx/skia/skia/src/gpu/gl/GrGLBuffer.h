#
ifndef
GrGLBuffer_DEFINED
#
define
GrGLBuffer_DEFINED
#
include
"
GrBuffer
.
h
"
#
include
"
gl
/
GrGLTypes
.
h
"
class
GrGLGpu
;
class
GrGLCaps
;
class
GrGLBuffer
:
public
GrBuffer
{
public
:
static
GrGLBuffer
*
Create
(
GrGLGpu
*
size_t
size
GrBufferType
intendedType
GrAccessPattern
const
void
*
data
=
nullptr
)
;
~
GrGLBuffer
(
)
override
{
SkASSERT
(
0
=
=
fBufferID
)
;
}
GrGLuint
bufferID
(
)
const
{
return
fBufferID
;
}
size_t
glSizeInBytes
(
)
const
{
return
fGLSizeInBytes
;
}
void
setHasAttachedToTexture
(
)
{
fHasAttachedToTexture
=
true
;
}
bool
hasAttachedToTexture
(
)
const
{
return
fHasAttachedToTexture
;
}
protected
:
GrGLBuffer
(
GrGLGpu
*
size_t
size
GrBufferType
intendedType
GrAccessPattern
const
void
*
data
)
;
void
onAbandon
(
)
override
;
void
onRelease
(
)
override
;
void
setMemoryBacking
(
SkTraceMemoryDump
*
traceMemoryDump
const
SkString
&
dumpName
)
const
override
;
private
:
GrGLGpu
*
glGpu
(
)
const
;
const
GrGLCaps
&
glCaps
(
)
const
;
void
onMap
(
)
override
;
void
onUnmap
(
)
override
;
bool
onUpdateData
(
const
void
*
src
size_t
srcSizeInBytes
)
override
;
#
ifdef
SK_DEBUG
void
validate
(
)
const
;
#
endif
GrBufferType
fIntendedType
;
GrGLuint
fBufferID
;
GrGLenum
fUsage
;
size_t
fGLSizeInBytes
;
bool
fHasAttachedToTexture
;
typedef
GrBuffer
INHERITED
;
}
;
#
endif
