#
ifndef
GrGLUniformHandler_DEFINED
#
define
GrGLUniformHandler_DEFINED
#
include
"
glsl
/
GrGLSLUniformHandler
.
h
"
#
include
"
gl
/
GrGLProgramDataManager
.
h
"
class
GrGLCaps
;
static
const
int
kUniformsPerBlock
=
8
;
class
GrGLUniformHandler
:
public
GrGLSLUniformHandler
{
public
:
const
GrGLSLShaderVar
&
getUniformVariable
(
UniformHandle
u
)
const
override
{
return
fUniforms
[
u
.
toIndex
(
)
]
.
fVariable
;
}
const
char
*
getUniformCStr
(
UniformHandle
u
)
const
override
{
return
this
-
>
getUniformVariable
(
u
)
.
c_str
(
)
;
}
private
:
explicit
GrGLUniformHandler
(
GrGLSLProgramBuilder
*
program
)
:
INHERITED
(
program
)
fUniforms
(
kUniformsPerBlock
)
{
}
UniformHandle
internalAddUniformArray
(
uint32_t
visibility
GrSLType
type
GrSLPrecision
precision
const
char
*
name
bool
mangleName
int
arrayCount
const
char
*
*
outName
)
override
;
void
appendUniformDecls
(
ShaderVisibility
SkString
*
)
const
override
;
void
bindUniformLocations
(
GrGLuint
programID
const
GrGLCaps
&
caps
)
;
void
getUniformLocations
(
GrGLuint
programID
const
GrGLCaps
&
caps
)
;
const
GrGLGpu
*
glGpu
(
)
const
;
typedef
GrGLProgramDataManager
:
:
UniformInfo
UniformInfo
;
typedef
GrGLProgramDataManager
:
:
UniformInfoArray
UniformInfoArray
;
UniformInfoArray
fUniforms
;
friend
class
GrGLProgramBuilder
;
typedef
GrGLSLUniformHandler
INHERITED
;
}
;
#
endif
