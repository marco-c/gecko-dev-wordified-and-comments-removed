#
ifndef
GrGLTextureRenderTarget_DEFINED
#
define
GrGLTextureRenderTarget_DEFINED
#
include
"
GrGLGpu
.
h
"
#
include
"
GrGLTexture
.
h
"
#
include
"
GrGLRenderTarget
.
h
"
class
GrGLGpu
;
#
ifdef
SK_BUILD_FOR_WIN
#
pragma
warning
(
push
)
#
pragma
warning
(
disable
:
4250
)
#
endif
class
GrGLTextureRenderTarget
:
public
GrGLTexture
public
GrGLRenderTarget
{
public
:
GrGLTextureRenderTarget
(
GrGLGpu
*
gpu
SkBudgeted
budgeted
const
GrSurfaceDesc
&
desc
const
GrGLTexture
:
:
IDDesc
&
texIDDesc
const
GrGLRenderTarget
:
:
IDDesc
&
rtIDDesc
)
:
GrSurface
(
gpu
desc
)
GrGLTexture
(
gpu
desc
texIDDesc
)
GrGLRenderTarget
(
gpu
desc
rtIDDesc
)
{
this
-
>
registerWithCache
(
budgeted
)
;
}
bool
canAttemptStencilAttachment
(
)
const
override
;
void
dumpMemoryStatistics
(
SkTraceMemoryDump
*
traceMemoryDump
)
const
override
;
static
GrGLTextureRenderTarget
*
CreateWrapped
(
GrGLGpu
*
gpu
const
GrSurfaceDesc
&
desc
const
GrGLTexture
:
:
IDDesc
&
texIDDesc
const
GrGLRenderTarget
:
:
IDDesc
&
rtIDDesc
)
;
protected
:
void
onAbandon
(
)
override
{
GrGLRenderTarget
:
:
onAbandon
(
)
;
GrGLTexture
:
:
onAbandon
(
)
;
}
void
onRelease
(
)
override
{
GrGLRenderTarget
:
:
onRelease
(
)
;
GrGLTexture
:
:
onRelease
(
)
;
}
private
:
GrGLTextureRenderTarget
(
GrGLGpu
*
gpu
const
GrSurfaceDesc
&
desc
const
GrGLTexture
:
:
IDDesc
&
texIDDesc
const
GrGLRenderTarget
:
:
IDDesc
&
rtIDDesc
)
:
GrSurface
(
gpu
desc
)
GrGLTexture
(
gpu
desc
texIDDesc
)
GrGLRenderTarget
(
gpu
desc
rtIDDesc
)
{
this
-
>
registerWithCacheWrapped
(
)
;
}
size_t
onGpuMemorySize
(
)
const
override
{
return
GrGLRenderTarget
:
:
onGpuMemorySize
(
)
;
}
}
;
#
ifdef
SK_BUILD_FOR_WIN
#
pragma
warning
(
pop
)
#
endif
#
endif
