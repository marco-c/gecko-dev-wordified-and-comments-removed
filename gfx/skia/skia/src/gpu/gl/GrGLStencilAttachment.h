#
ifndef
GrGLStencilAttachment_DEFINED
#
define
GrGLStencilAttachment_DEFINED
#
include
"
include
/
gpu
/
gl
/
GrGLInterface
.
h
"
#
include
"
src
/
gpu
/
GrStencilAttachment
.
h
"
class
GrGLStencilAttachment
:
public
GrStencilAttachment
{
public
:
static
const
GrGLenum
kUnknownInternalFormat
=
~
0U
;
static
const
GrGLuint
kUnknownBitCount
=
~
0U
;
struct
Format
{
GrGLenum
fInternalFormat
;
GrGLuint
fStencilBits
;
GrGLuint
fTotalBits
;
bool
fPacked
;
}
;
struct
IDDesc
{
IDDesc
(
)
:
fRenderbufferID
(
0
)
{
}
GrGLuint
fRenderbufferID
;
}
;
GrGLStencilAttachment
(
GrGpu
*
gpu
const
IDDesc
&
idDesc
int
width
int
height
int
sampleCnt
const
Format
&
format
)
:
GrStencilAttachment
(
gpu
width
height
format
.
fStencilBits
sampleCnt
)
fFormat
(
format
)
fRenderbufferID
(
idDesc
.
fRenderbufferID
)
{
this
-
>
registerWithCache
(
SkBudgeted
:
:
kYes
)
;
}
GrGLuint
renderbufferID
(
)
const
{
return
fRenderbufferID
;
}
const
Format
&
format
(
)
const
{
return
fFormat
;
}
protected
:
void
onRelease
(
)
override
;
void
onAbandon
(
)
override
;
void
setMemoryBacking
(
SkTraceMemoryDump
*
traceMemoryDump
const
SkString
&
dumpName
)
const
override
;
private
:
size_t
onGpuMemorySize
(
)
const
override
;
Format
fFormat
;
GrGLuint
fRenderbufferID
;
typedef
GrStencilAttachment
INHERITED
;
}
;
#
endif
