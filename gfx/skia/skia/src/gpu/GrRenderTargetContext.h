#
ifndef
GrRenderTargetContext_DEFINED
#
define
GrRenderTargetContext_DEFINED
#
include
"
GrColor
.
h
"
#
include
"
GrContext
.
h
"
#
include
"
GrPaint
.
h
"
#
include
"
GrSurfaceContext
.
h
"
#
include
"
GrXferProcessor
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkSurfaceProps
.
h
"
#
include
"
.
.
/
private
/
GrInstancedPipelineInfo
.
h
"
#
include
"
.
.
/
private
/
GrRenderTargetProxy
.
h
"
class
GrClip
;
class
GrDrawingManager
;
class
GrDrawOp
;
class
GrFixedClip
;
class
GrLegacyMeshDrawOp
;
class
GrPipelineBuilder
;
class
GrRenderTarget
;
class
GrRenderTargetContextPriv
;
class
GrRenderTargetOpList
;
class
GrStyle
;
class
GrTextureProxy
;
struct
GrUserStencilSettings
;
class
SkDrawFilter
;
struct
SkIPoint
;
struct
SkIRect
;
class
SkLatticeIter
;
class
SkMatrix
;
class
SkPaint
;
class
SkPath
;
struct
SkPoint
;
struct
SkRect
;
class
SkRegion
;
class
SkRRect
;
struct
SkRSXform
;
class
SkTextBlob
;
class
SkVertices
;
class
SK_API
GrRenderTargetContext
:
public
GrSurfaceContext
{
public
:
~
GrRenderTargetContext
(
)
override
;
GrResourceProvider
*
resourceProvider
(
)
{
return
fContext
-
>
resourceProvider
(
)
;
}
virtual
void
drawText
(
const
GrClip
&
const
SkPaint
&
const
SkMatrix
&
viewMatrix
const
char
text
[
]
size_t
byteLength
SkScalar
x
SkScalar
y
const
SkIRect
&
clipBounds
)
;
virtual
void
drawPosText
(
const
GrClip
&
const
SkPaint
&
const
SkMatrix
&
viewMatrix
const
char
text
[
]
size_t
byteLength
const
SkScalar
pos
[
]
int
scalarsPerPosition
const
SkPoint
&
offset
const
SkIRect
&
clipBounds
)
;
virtual
void
drawTextBlob
(
const
GrClip
&
const
SkPaint
&
const
SkMatrix
&
viewMatrix
const
SkTextBlob
*
SkScalar
x
SkScalar
y
SkDrawFilter
*
const
SkIRect
&
clipBounds
)
;
void
discard
(
)
;
void
clear
(
const
SkIRect
*
rect
GrColor
color
bool
canIgnoreRect
)
;
void
drawPaint
(
const
GrClip
&
GrPaint
&
&
const
SkMatrix
&
viewMatrix
)
;
void
drawRect
(
const
GrClip
&
GrPaint
&
&
paint
GrAA
const
SkMatrix
&
viewMatrix
const
SkRect
&
const
GrStyle
*
style
=
nullptr
)
;
void
fillRectToRect
(
const
GrClip
&
GrPaint
&
&
paint
GrAA
const
SkMatrix
&
viewMatrix
const
SkRect
&
rectToDraw
const
SkRect
&
localRect
)
;
void
fillRectWithLocalMatrix
(
const
GrClip
&
clip
GrPaint
&
&
paint
GrAA
const
SkMatrix
&
viewMatrix
const
SkRect
&
rect
const
SkMatrix
&
localMatrix
)
;
void
drawRRect
(
const
GrClip
&
GrPaint
&
&
GrAA
const
SkMatrix
&
viewMatrix
const
SkRRect
&
rrect
const
GrStyle
&
style
)
;
void
drawShadowRRect
(
const
GrClip
&
GrPaint
&
&
const
SkMatrix
&
viewMatrix
const
SkRRect
&
rrect
SkScalar
blurRadius
const
GrStyle
&
style
)
;
void
drawDRRect
(
const
GrClip
&
GrPaint
&
&
GrAA
const
SkMatrix
&
viewMatrix
const
SkRRect
&
outer
const
SkRRect
&
inner
)
;
void
drawPath
(
const
GrClip
&
GrPaint
&
&
GrAA
const
SkMatrix
&
viewMatrix
const
SkPath
&
const
GrStyle
&
style
)
;
enum
class
ColorArrayType
{
kPremulGrColor
kSkColor
}
;
void
drawVertices
(
const
GrClip
&
GrPaint
&
&
paint
const
SkMatrix
&
viewMatrix
GrPrimitiveType
primitiveType
int
vertexCount
const
SkPoint
positions
[
]
const
SkPoint
texs
[
]
const
uint32_t
colors
[
]
const
uint16_t
indices
[
]
int
indexCount
ColorArrayType
=
ColorArrayType
:
:
kPremulGrColor
)
;
void
drawVertices
(
const
GrClip
&
GrPaint
&
&
paint
const
SkMatrix
&
viewMatrix
sk_sp
<
SkVertices
>
vertices
)
;
void
drawAtlas
(
const
GrClip
&
GrPaint
&
&
paint
const
SkMatrix
&
viewMatrix
int
spriteCount
const
SkRSXform
xform
[
]
const
SkRect
texRect
[
]
const
SkColor
colors
[
]
)
;
void
drawRegion
(
const
GrClip
&
GrPaint
&
&
paint
GrAA
aa
const
SkMatrix
&
viewMatrix
const
SkRegion
&
region
const
GrStyle
&
style
)
;
void
drawOval
(
const
GrClip
&
GrPaint
&
&
paint
GrAA
const
SkMatrix
&
viewMatrix
const
SkRect
&
oval
const
GrStyle
&
style
)
;
void
drawArc
(
const
GrClip
&
GrPaint
&
&
paint
GrAA
const
SkMatrix
&
viewMatrix
const
SkRect
&
oval
SkScalar
startAngle
SkScalar
sweepAngle
bool
useCenter
const
GrStyle
&
style
)
;
void
drawImageLattice
(
const
GrClip
&
GrPaint
&
&
paint
const
SkMatrix
&
viewMatrix
int
imageWidth
int
imageHeight
std
:
:
unique_ptr
<
SkLatticeIter
>
iter
const
SkRect
&
dst
)
;
void
prepareForExternalIO
(
)
;
bool
isStencilBufferMultisampled
(
)
const
{
return
fRenderTargetProxy
-
>
isStencilBufferMultisampled
(
)
;
}
bool
isUnifiedMultisampled
(
)
const
{
return
fRenderTargetProxy
-
>
isUnifiedMultisampled
(
)
;
}
bool
hasMixedSamples
(
)
const
{
return
fRenderTargetProxy
-
>
isMixedSampled
(
)
;
}
const
GrCaps
*
caps
(
)
const
{
return
fContext
-
>
caps
(
)
;
}
const
GrSurfaceDesc
&
desc
(
)
const
{
return
fRenderTargetProxy
-
>
desc
(
)
;
}
int
width
(
)
const
{
return
fRenderTargetProxy
-
>
width
(
)
;
}
int
height
(
)
const
{
return
fRenderTargetProxy
-
>
height
(
)
;
}
GrPixelConfig
config
(
)
const
{
return
fRenderTargetProxy
-
>
config
(
)
;
}
int
numColorSamples
(
)
const
{
return
fRenderTargetProxy
-
>
numColorSamples
(
)
;
}
const
SkSurfaceProps
&
surfaceProps
(
)
const
{
return
fSurfaceProps
;
}
GrColorSpaceXform
*
getColorXformFromSRGB
(
)
const
{
return
fColorXformFromSRGB
.
get
(
)
;
}
GrSurfaceOrigin
origin
(
)
const
{
return
fRenderTargetProxy
-
>
origin
(
)
;
}
bool
wasAbandoned
(
)
const
;
GrRenderTarget
*
accessRenderTarget
(
)
{
return
fRenderTargetProxy
-
>
instantiate
(
fContext
-
>
resourceProvider
(
)
)
;
}
GrSurfaceProxy
*
asSurfaceProxy
(
)
override
{
return
fRenderTargetProxy
.
get
(
)
;
}
const
GrSurfaceProxy
*
asSurfaceProxy
(
)
const
override
{
return
fRenderTargetProxy
.
get
(
)
;
}
sk_sp
<
GrSurfaceProxy
>
asSurfaceProxyRef
(
)
override
{
return
fRenderTargetProxy
;
}
GrTextureProxy
*
asTextureProxy
(
)
override
;
sk_sp
<
GrTextureProxy
>
asTextureProxyRef
(
)
override
;
GrRenderTargetProxy
*
asRenderTargetProxy
(
)
override
{
return
fRenderTargetProxy
.
get
(
)
;
}
sk_sp
<
GrRenderTargetProxy
>
asRenderTargetProxyRef
(
)
override
{
return
fRenderTargetProxy
;
}
GrRenderTargetContext
*
asRenderTargetContext
(
)
override
{
return
this
;
}
GrRenderTargetContextPriv
priv
(
)
;
const
GrRenderTargetContextPriv
priv
(
)
const
;
bool
isWrapped_ForTesting
(
)
const
;
protected
:
GrRenderTargetContext
(
GrContext
*
GrDrawingManager
*
sk_sp
<
GrRenderTargetProxy
>
sk_sp
<
SkColorSpace
>
const
SkSurfaceProps
*
GrAuditTrail
*
GrSingleOwner
*
)
;
SkDEBUGCODE
(
void
validate
(
)
const
;
)
private
:
inline
GrAAType
decideAAType
(
GrAA
aa
bool
allowMixedSamples
=
false
)
{
if
(
GrAA
:
:
kNo
=
=
aa
)
{
return
GrAAType
:
:
kNone
;
}
if
(
this
-
>
isUnifiedMultisampled
(
)
)
{
return
GrAAType
:
:
kMSAA
;
}
if
(
allowMixedSamples
&
&
this
-
>
isStencilBufferMultisampled
(
)
)
{
return
GrAAType
:
:
kMixedSamples
;
}
return
GrAAType
:
:
kCoverage
;
}
friend
class
GrAtlasTextBlob
;
friend
class
GrStencilAndCoverTextContext
;
friend
class
GrDrawingManager
;
friend
class
GrRenderTargetContextPriv
;
friend
class
GrSWMaskHelper
;
friend
class
GrSoftwarePathRenderer
;
friend
class
GrAAConvexPathRenderer
;
friend
class
GrDashLinePathRenderer
;
friend
class
GrAAHairLinePathRenderer
;
friend
class
GrAALinearizingConvexPathRenderer
;
friend
class
GrSmallPathRenderer
;
friend
class
GrDefaultPathRenderer
;
friend
class
GrMSAAPathRenderer
;
friend
class
GrStencilAndCoverPathRenderer
;
friend
class
GrTessellatingPathRenderer
;
friend
void
test_draw_op
(
GrRenderTargetContext
*
sk_sp
<
GrFragmentProcessor
>
sk_sp
<
GrTextureProxy
>
)
;
void
internalClear
(
const
GrFixedClip
&
const
GrColor
bool
canIgnoreClip
)
;
bool
drawFilledDRRect
(
const
GrClip
&
clip
GrPaint
&
&
paint
GrAA
const
SkMatrix
&
viewMatrix
const
SkRRect
&
origOuter
const
SkRRect
&
origInner
)
;
bool
drawFilledRect
(
const
GrClip
&
clip
GrPaint
&
&
paint
GrAA
const
SkMatrix
&
viewMatrix
const
SkRect
&
rect
const
GrUserStencilSettings
*
ss
)
;
void
drawNonAAFilledRect
(
const
GrClip
&
GrPaint
&
&
const
SkMatrix
&
viewMatrix
const
SkRect
&
rect
const
SkRect
*
localRect
const
SkMatrix
*
localMatrix
const
GrUserStencilSettings
*
ss
GrAAType
hwOrNoneAAType
)
;
void
internalDrawPath
(
const
GrClip
&
GrPaint
&
&
GrAA
const
SkMatrix
&
const
SkPath
&
const
GrStyle
&
)
;
bool
onCopy
(
GrSurfaceProxy
*
src
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
override
;
uint32_t
addDrawOp
(
const
GrClip
&
std
:
:
unique_ptr
<
GrDrawOp
>
)
;
uint32_t
addLegacyMeshDrawOp
(
GrPipelineBuilder
&
&
const
GrClip
&
std
:
:
unique_ptr
<
GrLegacyMeshDrawOp
>
)
;
bool
SK_WARN_UNUSED_RESULT
setupDstTexture
(
GrRenderTargetProxy
*
const
GrClip
&
const
SkRect
&
opBounds
GrXferProcessor
:
:
DstTexture
*
result
)
;
GrRenderTargetOpList
*
getOpList
(
)
;
sk_sp
<
GrRenderTargetProxy
>
fRenderTargetProxy
;
GrRenderTargetOpList
*
fOpList
;
GrInstancedPipelineInfo
fInstancedPipelineInfo
;
sk_sp
<
GrColorSpaceXform
>
fColorXformFromSRGB
;
SkSurfaceProps
fSurfaceProps
;
typedef
GrSurfaceContext
INHERITED
;
}
;
#
endif
