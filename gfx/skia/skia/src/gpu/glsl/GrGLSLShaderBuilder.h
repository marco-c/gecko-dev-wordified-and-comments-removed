#
ifndef
GrGLSLShaderBuilder_DEFINED
#
define
GrGLSLShaderBuilder_DEFINED
#
include
"
GrAllocator
.
h
"
#
include
"
glsl
/
GrGLSLUniformHandler
.
h
"
#
include
"
glsl
/
GrGLSLShaderVar
.
h
"
#
include
"
SkTDArray
.
h
"
#
include
<
stdarg
.
h
>
class
GrGLSLColorSpaceXformHelper
;
class
GrGLSLShaderBuilder
{
public
:
GrGLSLShaderBuilder
(
GrGLSLProgramBuilder
*
program
)
;
virtual
~
GrGLSLShaderBuilder
(
)
{
}
typedef
GrGLSLUniformHandler
:
:
SamplerHandle
SamplerHandle
;
void
appendTextureLookup
(
SkString
*
out
SamplerHandle
const
char
*
coordName
GrSLType
coordType
=
kVec2f_GrSLType
)
const
;
void
appendTextureLookup
(
SamplerHandle
const
char
*
coordName
GrSLType
coordType
=
kVec2f_GrSLType
GrGLSLColorSpaceXformHelper
*
colorXformHelper
=
nullptr
)
;
void
appendTextureLookupAndModulate
(
const
char
*
modulation
SamplerHandle
const
char
*
coordName
GrSLType
coordType
=
kVec2f_GrSLType
GrGLSLColorSpaceXformHelper
*
colorXformHelper
=
nullptr
)
;
void
appendColorGamutXform
(
SkString
*
out
const
char
*
srcColor
GrGLSLColorSpaceXformHelper
*
colorXformHelper
)
;
void
appendColorGamutXform
(
const
char
*
srcColor
GrGLSLColorSpaceXformHelper
*
colorXformHelper
)
;
void
appendTexelFetch
(
SkString
*
out
SamplerHandle
const
char
*
coordExpr
)
const
;
void
appendTexelFetch
(
SamplerHandle
const
char
*
coordExpr
)
;
void
define
(
const
char
*
macro
const
char
*
replacement
)
{
this
-
>
definitions
(
)
.
appendf
(
"
#
define
%
s
%
s
\
n
"
macro
replacement
)
;
}
void
define
(
const
char
*
macro
int
replacement
)
{
this
-
>
definitions
(
)
.
appendf
(
"
#
define
%
s
%
i
\
n
"
macro
replacement
)
;
}
void
definef
(
const
char
*
macro
const
char
*
replacement
.
.
.
)
{
this
-
>
definitions
(
)
.
appendf
(
"
#
define
%
s
"
macro
)
;
va_list
args
;
va_start
(
args
replacement
)
;
this
-
>
definitions
(
)
.
appendVAList
(
replacement
args
)
;
va_end
(
args
)
;
this
-
>
definitions
(
)
.
append
(
"
\
n
"
)
;
}
void
codeAppendf
(
const
char
format
[
]
.
.
.
)
SK_PRINTF_LIKE
(
2
3
)
{
va_list
args
;
va_start
(
args
format
)
;
this
-
>
code
(
)
.
appendVAList
(
format
args
)
;
va_end
(
args
)
;
}
void
codeAppend
(
const
char
*
str
)
{
this
-
>
code
(
)
.
append
(
str
)
;
}
void
codePrependf
(
const
char
format
[
]
.
.
.
)
SK_PRINTF_LIKE
(
2
3
)
{
va_list
args
;
va_start
(
args
format
)
;
this
-
>
code
(
)
.
prependVAList
(
format
args
)
;
va_end
(
args
)
;
}
void
declAppend
(
const
GrGLSLShaderVar
&
var
)
;
void
appendPrecisionModifier
(
GrSLPrecision
)
;
void
emitFunction
(
GrSLType
returnType
const
char
*
name
int
argCnt
const
GrGLSLShaderVar
*
args
const
char
*
body
SkString
*
outName
)
;
void
finalize
(
uint32_t
visibility
)
;
GrGLSLProgramBuilder
*
getProgramBuilder
(
)
{
return
fProgramBuilder
;
}
class
ShaderBlock
{
public
:
ShaderBlock
(
GrGLSLShaderBuilder
*
builder
)
:
fBuilder
(
builder
)
{
SkASSERT
(
builder
)
;
fBuilder
-
>
codeAppend
(
"
{
"
)
;
}
~
ShaderBlock
(
)
{
fBuilder
-
>
codeAppend
(
"
}
"
)
;
}
private
:
GrGLSLShaderBuilder
*
fBuilder
;
}
;
protected
:
typedef
GrTAllocator
<
GrGLSLShaderVar
>
VarArray
;
void
appendDecls
(
const
VarArray
&
vars
SkString
*
out
)
const
;
enum
GLSLPrivateFeature
{
kFragCoordConventions_GLSLPrivateFeature
kBlendEquationAdvanced_GLSLPrivateFeature
kBlendFuncExtended_GLSLPrivateFeature
kExternalTexture_GLSLPrivateFeature
kTexelBuffer_GLSLPrivateFeature
kFramebufferFetch_GLSLPrivateFeature
kNoPerspectiveInterpolation_GLSLPrivateFeature
kSampleVariables_GLSLPrivateFeature
kSampleMaskOverrideCoverage_GLSLPrivateFeature
kLastGLSLPrivateFeature
=
kSampleMaskOverrideCoverage_GLSLPrivateFeature
}
;
bool
addFeature
(
uint32_t
featureBit
const
char
*
extensionName
)
;
enum
InterfaceQualifier
{
kOut_InterfaceQualifier
kLastInterfaceQualifier
=
kOut_InterfaceQualifier
}
;
void
addLayoutQualifier
(
const
char
*
param
InterfaceQualifier
)
;
void
compileAndAppendLayoutQualifiers
(
)
;
void
appendTextureSwizzle
(
SkString
*
out
GrPixelConfig
)
const
;
void
nextStage
(
)
{
fShaderStrings
.
push_back
(
)
;
fCompilerStrings
.
push_back
(
this
-
>
code
(
)
.
c_str
(
)
)
;
fCompilerStringLengths
.
push_back
(
(
int
)
this
-
>
code
(
)
.
size
(
)
)
;
fCodeIndex
+
+
;
}
SkString
&
versionDecl
(
)
{
return
fShaderStrings
[
kVersionDecl
]
;
}
SkString
&
extensions
(
)
{
return
fShaderStrings
[
kExtensions
]
;
}
SkString
&
definitions
(
)
{
return
fShaderStrings
[
kDefinitions
]
;
}
SkString
&
precisionQualifier
(
)
{
return
fShaderStrings
[
kPrecisionQualifier
]
;
}
SkString
&
layoutQualifiers
(
)
{
return
fShaderStrings
[
kLayoutQualifiers
]
;
}
SkString
&
uniforms
(
)
{
return
fShaderStrings
[
kUniforms
]
;
}
SkString
&
inputs
(
)
{
return
fShaderStrings
[
kInputs
]
;
}
SkString
&
outputs
(
)
{
return
fShaderStrings
[
kOutputs
]
;
}
SkString
&
functions
(
)
{
return
fShaderStrings
[
kFunctions
]
;
}
SkString
&
main
(
)
{
return
fShaderStrings
[
kMain
]
;
}
SkString
&
code
(
)
{
return
fShaderStrings
[
fCodeIndex
]
;
}
virtual
void
onFinalize
(
)
=
0
;
enum
{
kVersionDecl
kExtensions
kDefinitions
kPrecisionQualifier
kLayoutQualifiers
kUniforms
kInputs
kOutputs
kFunctions
kMain
kCode
}
;
GrGLSLProgramBuilder
*
fProgramBuilder
;
SkSTArray
<
kCode
const
char
*
true
>
fCompilerStrings
;
SkSTArray
<
kCode
int
true
>
fCompilerStringLengths
;
SkSTArray
<
kCode
SkString
>
fShaderStrings
;
SkString
fCode
;
SkString
fFunctions
;
SkString
fExtensions
;
VarArray
fInputs
;
VarArray
fOutputs
;
uint32_t
fFeaturesAddedMask
;
SkSTArray
<
1
SkString
>
fLayoutParams
[
kLastInterfaceQualifier
+
1
]
;
int
fCodeIndex
;
bool
fFinalized
;
friend
class
GrGLSLProgramBuilder
;
friend
class
GrGLProgramBuilder
;
friend
class
GrGLSLVaryingHandler
;
friend
class
GrGLPathProgramBuilder
;
friend
class
GrVkPipelineStateBuilder
;
}
;
#
endif
