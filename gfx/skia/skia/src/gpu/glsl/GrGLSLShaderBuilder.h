#
ifndef
GrGLSLShaderBuilder_DEFINED
#
define
GrGLSLShaderBuilder_DEFINED
#
include
"
GrAllocator
.
h
"
#
include
"
GrShaderVar
.
h
"
#
include
"
glsl
/
GrGLSLUniformHandler
.
h
"
#
include
"
SkTDArray
.
h
"
#
include
<
stdarg
.
h
>
class
GrGLSLColorSpaceXformHelper
;
class
GrGLSLShaderBuilder
{
public
:
GrGLSLShaderBuilder
(
GrGLSLProgramBuilder
*
program
)
;
virtual
~
GrGLSLShaderBuilder
(
)
{
}
using
SamplerHandle
=
GrGLSLUniformHandler
:
:
SamplerHandle
;
void
appendTextureLookup
(
SkString
*
out
SamplerHandle
const
char
*
coordName
GrSLType
coordType
=
kHalf2_GrSLType
)
const
;
void
appendTextureLookup
(
SamplerHandle
const
char
*
coordName
GrSLType
coordType
=
kHalf2_GrSLType
GrGLSLColorSpaceXformHelper
*
colorXformHelper
=
nullptr
)
;
void
appendTextureLookupAndModulate
(
const
char
*
modulation
SamplerHandle
const
char
*
coordName
GrSLType
coordType
=
kHalf2_GrSLType
GrGLSLColorSpaceXformHelper
*
colorXformHelper
=
nullptr
)
;
void
appendColorGamutXform
(
SkString
*
out
const
char
*
srcColor
GrGLSLColorSpaceXformHelper
*
colorXformHelper
)
;
void
appendColorGamutXform
(
const
char
*
srcColor
GrGLSLColorSpaceXformHelper
*
colorXformHelper
)
;
void
defineConstant
(
const
char
*
type
const
char
*
name
const
char
*
value
)
{
this
-
>
definitions
(
)
.
appendf
(
"
const
%
s
%
s
=
%
s
;
\
n
"
type
name
value
)
;
}
void
defineConstant
(
const
char
*
name
int
value
)
{
this
-
>
definitions
(
)
.
appendf
(
"
const
int
%
s
=
%
i
;
\
n
"
name
value
)
;
}
void
defineConstant
(
const
char
*
name
float
value
)
{
this
-
>
definitions
(
)
.
appendf
(
"
const
float
%
s
=
%
f
;
\
n
"
name
value
)
;
}
void
defineConstantf
(
const
char
*
type
const
char
*
name
const
char
*
fmt
.
.
.
)
{
this
-
>
definitions
(
)
.
appendf
(
"
const
%
s
%
s
=
"
type
name
)
;
va_list
args
;
va_start
(
args
fmt
)
;
this
-
>
definitions
(
)
.
appendVAList
(
fmt
args
)
;
va_end
(
args
)
;
this
-
>
definitions
(
)
.
append
(
"
;
\
n
"
)
;
}
void
declareGlobal
(
const
GrShaderVar
&
)
;
void
codeAppendf
(
const
char
format
[
]
.
.
.
)
SK_PRINTF_LIKE
(
2
3
)
{
va_list
args
;
va_start
(
args
format
)
;
this
-
>
code
(
)
.
appendVAList
(
format
args
)
;
va_end
(
args
)
;
}
void
codeAppend
(
const
char
*
str
)
{
this
-
>
code
(
)
.
append
(
str
)
;
}
void
codeAppend
(
const
char
*
str
size_t
length
)
{
this
-
>
code
(
)
.
append
(
str
length
)
;
}
void
codePrependf
(
const
char
format
[
]
.
.
.
)
SK_PRINTF_LIKE
(
2
3
)
{
va_list
args
;
va_start
(
args
format
)
;
this
-
>
code
(
)
.
prependVAList
(
format
args
)
;
va_end
(
args
)
;
}
void
declAppend
(
const
GrShaderVar
&
var
)
;
void
emitFunction
(
GrSLType
returnType
const
char
*
name
int
argCnt
const
GrShaderVar
*
args
const
char
*
body
SkString
*
outName
)
;
void
finalize
(
uint32_t
visibility
)
;
GrGLSLProgramBuilder
*
getProgramBuilder
(
)
{
return
fProgramBuilder
;
}
class
ShaderBlock
{
public
:
ShaderBlock
(
GrGLSLShaderBuilder
*
builder
)
:
fBuilder
(
builder
)
{
SkASSERT
(
builder
)
;
fBuilder
-
>
codeAppend
(
"
{
"
)
;
}
~
ShaderBlock
(
)
{
fBuilder
-
>
codeAppend
(
"
}
"
)
;
}
private
:
GrGLSLShaderBuilder
*
fBuilder
;
}
;
protected
:
typedef
GrTAllocator
<
GrShaderVar
>
VarArray
;
void
appendDecls
(
const
VarArray
&
vars
SkString
*
out
)
const
;
enum
GLSLPrivateFeature
{
kFragCoordConventions_GLSLPrivateFeature
kBlendEquationAdvanced_GLSLPrivateFeature
kBlendFuncExtended_GLSLPrivateFeature
kFramebufferFetch_GLSLPrivateFeature
kNoPerspectiveInterpolation_GLSLPrivateFeature
kLastGLSLPrivateFeature
=
kNoPerspectiveInterpolation_GLSLPrivateFeature
}
;
bool
addFeature
(
uint32_t
featureBit
const
char
*
extensionName
)
;
enum
InterfaceQualifier
{
kIn_InterfaceQualifier
kOut_InterfaceQualifier
kLastInterfaceQualifier
=
kOut_InterfaceQualifier
}
;
void
addLayoutQualifier
(
const
char
*
param
InterfaceQualifier
)
;
void
compileAndAppendLayoutQualifiers
(
)
;
void
nextStage
(
)
{
fShaderStrings
.
push_back
(
)
;
fCompilerStrings
.
push_back
(
this
-
>
code
(
)
.
c_str
(
)
)
;
fCompilerStringLengths
.
push_back
(
(
int
)
this
-
>
code
(
)
.
size
(
)
)
;
fCodeIndex
+
+
;
}
SkString
&
versionDecl
(
)
{
return
fShaderStrings
[
kVersionDecl
]
;
}
SkString
&
extensions
(
)
{
return
fShaderStrings
[
kExtensions
]
;
}
SkString
&
definitions
(
)
{
return
fShaderStrings
[
kDefinitions
]
;
}
SkString
&
precisionQualifier
(
)
{
return
fShaderStrings
[
kPrecisionQualifier
]
;
}
SkString
&
layoutQualifiers
(
)
{
return
fShaderStrings
[
kLayoutQualifiers
]
;
}
SkString
&
uniforms
(
)
{
return
fShaderStrings
[
kUniforms
]
;
}
SkString
&
inputs
(
)
{
return
fShaderStrings
[
kInputs
]
;
}
SkString
&
outputs
(
)
{
return
fShaderStrings
[
kOutputs
]
;
}
SkString
&
functions
(
)
{
return
fShaderStrings
[
kFunctions
]
;
}
SkString
&
main
(
)
{
return
fShaderStrings
[
kMain
]
;
}
SkString
&
code
(
)
{
return
fShaderStrings
[
fCodeIndex
]
;
}
virtual
void
onFinalize
(
)
=
0
;
enum
{
kVersionDecl
kExtensions
kDefinitions
kPrecisionQualifier
kLayoutQualifiers
kUniforms
kInputs
kOutputs
kFunctions
kMain
kCode
}
;
GrGLSLProgramBuilder
*
fProgramBuilder
;
SkSTArray
<
kCode
const
char
*
true
>
fCompilerStrings
;
SkSTArray
<
kCode
int
true
>
fCompilerStringLengths
;
SkSTArray
<
kCode
SkString
>
fShaderStrings
;
SkString
fCode
;
SkString
fFunctions
;
SkString
fExtensions
;
VarArray
fInputs
;
VarArray
fOutputs
;
uint32_t
fFeaturesAddedMask
;
SkSTArray
<
1
SkString
>
fLayoutParams
[
kLastInterfaceQualifier
+
1
]
;
int
fCodeIndex
;
bool
fFinalized
;
friend
class
GrCCCoverageProcessor
;
friend
class
GrGLSLProgramBuilder
;
friend
class
GrGLProgramBuilder
;
friend
class
GrGLSLVaryingHandler
;
friend
class
GrGLPathProgramBuilder
;
friend
class
GrVkPipelineStateBuilder
;
friend
class
GrMtlPipelineStateBuilder
;
}
;
#
endif
