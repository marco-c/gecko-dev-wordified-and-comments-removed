#
ifndef
GrGLSLFragmentShaderBuilder_DEFINED
#
define
GrGLSLFragmentShaderBuilder_DEFINED
#
include
"
GrGLSLShaderBuilder
.
h
"
#
include
"
glsl
/
GrGLSLProcessorTypes
.
h
"
class
GrRenderTarget
;
class
GrGLSLVarying
;
class
GrGLSLFragmentBuilder
:
public
GrGLSLShaderBuilder
{
public
:
GrGLSLFragmentBuilder
(
GrGLSLProgramBuilder
*
program
)
:
INHERITED
(
program
)
fHasCustomColorOutput
(
false
)
fHasSecondaryOutput
(
false
)
{
fSubstageIndices
.
push_back
(
0
)
;
}
virtual
~
GrGLSLFragmentBuilder
(
)
{
}
enum
GLSLFeature
{
kStandardDerivatives_GLSLFeature
=
0
kLastGLSLFeature
=
kStandardDerivatives_GLSLFeature
}
;
virtual
bool
enableFeature
(
GLSLFeature
)
=
0
;
virtual
SkString
ensureFSCoords2D
(
const
GrGLSLTransformedCoordsArray
&
coords
int
index
)
=
0
;
virtual
const
char
*
fragmentPosition
(
)
=
0
;
void
onBeforeChildProcEmitCode
(
)
;
void
onAfterChildProcEmitCode
(
)
;
const
SkString
&
getMangleString
(
)
const
{
return
fMangleString
;
}
bool
hasCustomColorOutput
(
)
const
{
return
fHasCustomColorOutput
;
}
bool
hasSecondaryOutput
(
)
const
{
return
fHasSecondaryOutput
;
}
protected
:
bool
fHasCustomColorOutput
;
bool
fHasSecondaryOutput
;
private
:
SkTArray
<
int
>
fSubstageIndices
;
SkString
fMangleString
;
friend
class
GrGLPathProcessor
;
typedef
GrGLSLShaderBuilder
INHERITED
;
}
;
class
GrGLSLXPFragmentBuilder
:
public
GrGLSLFragmentBuilder
{
public
:
GrGLSLXPFragmentBuilder
(
GrGLSLProgramBuilder
*
program
)
:
INHERITED
(
program
)
{
}
virtual
const
char
*
dstColor
(
)
=
0
;
virtual
void
enableAdvancedBlendEquationIfNeeded
(
GrBlendEquation
)
=
0
;
private
:
typedef
GrGLSLFragmentBuilder
INHERITED
;
}
;
class
GrGLSLFragmentShaderBuilder
:
public
GrGLSLXPFragmentBuilder
{
public
:
typedef
uint8_t
FragPosKey
;
static
FragPosKey
KeyForFragmentPosition
(
const
GrRenderTarget
*
dst
)
;
GrGLSLFragmentShaderBuilder
(
GrGLSLProgramBuilder
*
program
uint8_t
fragPosKey
)
;
bool
enableFeature
(
GLSLFeature
)
override
;
virtual
SkString
ensureFSCoords2D
(
const
GrGLSLTransformedCoordsArray
&
coords
int
index
)
override
;
const
char
*
fragmentPosition
(
)
override
;
const
char
*
dstColor
(
)
override
;
void
enableAdvancedBlendEquationIfNeeded
(
GrBlendEquation
)
override
;
private
:
void
enableCustomOutput
(
)
;
void
enableSecondaryOutput
(
)
;
const
char
*
getPrimaryColorOutputName
(
)
const
;
const
char
*
getSecondaryColorOutputName
(
)
const
;
bool
hasReadDstColor
(
)
const
{
return
fHasReadDstColor
;
}
bool
hasReadFragmentPosition
(
)
const
{
return
fHasReadFragmentPosition
;
}
void
reset
(
)
{
fHasReadDstColor
=
false
;
fHasReadFragmentPosition
=
false
;
}
static
const
char
*
DeclaredColorOutputName
(
)
{
return
"
fsColorOut
"
;
}
static
const
char
*
DeclaredSecondaryColorOutputName
(
)
{
return
"
fsSecondaryColorOut
"
;
}
void
addVarying
(
GrGLSLVarying
*
GrSLPrecision
)
;
void
onFinalize
(
)
override
;
enum
GLSLPrivateFeature
{
kFragCoordConventions_GLSLPrivateFeature
=
kLastGLSLFeature
+
1
kBlendEquationAdvanced_GLSLPrivateFeature
kBlendFuncExtended_GLSLPrivateFeature
kExternalTexture_GLSLPrivateFeature
kLastGLSLPrivateFeature
=
kBlendFuncExtended_GLSLPrivateFeature
}
;
enum
{
kNoFragPosRead_FragPosKey
=
0
kTopLeftFragPosRead_FragPosKey
=
0x1
kBottomLeftFragPosRead_FragPosKey
=
0x2
}
;
static
const
char
*
kDstTextureColorName
;
bool
fSetupFragPosition
;
bool
fTopLeftFragPosRead
;
int
fCustomColorOutputIndex
;
bool
fHasReadDstColor
;
bool
fHasReadFragmentPosition
;
friend
class
GrGLSLProgramBuilder
;
friend
class
GrGLProgramBuilder
;
typedef
GrGLSLXPFragmentBuilder
INHERITED
;
}
;
#
endif
