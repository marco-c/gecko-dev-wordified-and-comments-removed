#
ifndef
GrGLSLFragmentProcessor_DEFINED
#
define
GrGLSLFragmentProcessor_DEFINED
#
include
"
glsl
/
GrGLSLProcessorTypes
.
h
"
#
include
"
glsl
/
GrGLSLProgramDataManager
.
h
"
#
include
"
glsl
/
GrGLSLTextureSampler
.
h
"
class
GrProcessor
;
class
GrProcessorKeyBuilder
;
class
GrGLSLCaps
;
class
GrGLSLFPBuilder
;
class
GrGLSLFPFragmentBuilder
;
class
GrGLSLUniformHandler
;
class
GrGLSLFragmentProcessor
{
public
:
GrGLSLFragmentProcessor
(
)
{
}
virtual
~
GrGLSLFragmentProcessor
(
)
{
for
(
int
i
=
0
;
i
<
fChildProcessors
.
count
(
)
;
+
+
i
)
{
delete
fChildProcessors
[
i
]
;
}
}
typedef
GrGLSLProgramDataManager
:
:
UniformHandle
UniformHandle
;
typedef
GrGLSLTextureSampler
:
:
TextureSamplerArray
TextureSamplerArray
;
struct
EmitArgs
{
EmitArgs
(
GrGLSLFPFragmentBuilder
*
fragBuilder
GrGLSLUniformHandler
*
uniformHandler
const
GrGLSLCaps
*
caps
const
GrFragmentProcessor
&
fp
const
char
*
outputColor
const
char
*
inputColor
const
GrGLSLTransformedCoordsArray
&
coords
const
TextureSamplerArray
&
samplers
)
:
fFragBuilder
(
fragBuilder
)
fUniformHandler
(
uniformHandler
)
fGLSLCaps
(
caps
)
fFp
(
fp
)
fOutputColor
(
outputColor
)
fInputColor
(
inputColor
)
fCoords
(
coords
)
fSamplers
(
samplers
)
{
}
GrGLSLFPFragmentBuilder
*
fFragBuilder
;
GrGLSLUniformHandler
*
fUniformHandler
;
const
GrGLSLCaps
*
fGLSLCaps
;
const
GrFragmentProcessor
&
fFp
;
const
char
*
fOutputColor
;
const
char
*
fInputColor
;
const
GrGLSLTransformedCoordsArray
&
fCoords
;
const
TextureSamplerArray
&
fSamplers
;
}
;
virtual
void
emitCode
(
EmitArgs
&
)
=
0
;
void
setData
(
const
GrGLSLProgramDataManager
&
pdman
const
GrFragmentProcessor
&
processor
)
;
static
void
GenKey
(
const
GrProcessor
&
const
GrGLSLCaps
&
GrProcessorKeyBuilder
*
)
{
}
int
numChildProcessors
(
)
const
{
return
fChildProcessors
.
count
(
)
;
}
GrGLSLFragmentProcessor
*
childProcessor
(
int
index
)
const
{
return
fChildProcessors
[
index
]
;
}
void
emitChild
(
int
childIndex
const
char
*
inputColor
SkString
*
outputColor
EmitArgs
&
parentArgs
)
;
void
emitChild
(
int
childIndex
const
char
*
inputColor
EmitArgs
&
parentArgs
)
;
protected
:
virtual
void
onSetData
(
const
GrGLSLProgramDataManager
&
const
GrProcessor
&
)
{
}
private
:
void
internalEmitChild
(
int
const
char
*
const
char
*
EmitArgs
&
)
;
SkTArray
<
GrGLSLFragmentProcessor
*
true
>
fChildProcessors
;
friend
class
GrFragmentProcessor
;
}
;
#
endif
