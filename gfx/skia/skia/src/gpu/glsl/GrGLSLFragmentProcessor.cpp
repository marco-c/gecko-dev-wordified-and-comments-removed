#
include
"
GrGLSLFragmentProcessor
.
h
"
#
include
"
GrFragmentProcessor
.
h
"
#
include
"
GrProcessor
.
h
"
#
include
"
glsl
/
GrGLSLFragmentShaderBuilder
.
h
"
#
include
"
glsl
/
GrGLSLUniformHandler
.
h
"
void
GrGLSLFragmentProcessor
:
:
setData
(
const
GrGLSLProgramDataManager
&
pdman
const
GrFragmentProcessor
&
processor
)
{
this
-
>
onSetData
(
pdman
processor
)
;
}
void
GrGLSLFragmentProcessor
:
:
emitChild
(
int
childIndex
const
char
*
inputColor
EmitArgs
&
args
)
{
this
-
>
internalEmitChild
(
childIndex
inputColor
args
.
fOutputColor
args
)
;
}
void
GrGLSLFragmentProcessor
:
:
emitChild
(
int
childIndex
const
char
*
inputColor
SkString
*
outputColor
EmitArgs
&
args
)
{
SkASSERT
(
outputColor
)
;
GrGLSLFPFragmentBuilder
*
fragBuilder
=
args
.
fFragBuilder
;
outputColor
-
>
append
(
fragBuilder
-
>
getMangleString
(
)
)
;
fragBuilder
-
>
codeAppendf
(
"
half4
%
s
;
"
outputColor
-
>
c_str
(
)
)
;
this
-
>
internalEmitChild
(
childIndex
inputColor
outputColor
-
>
c_str
(
)
args
)
;
}
void
GrGLSLFragmentProcessor
:
:
internalEmitChild
(
int
childIndex
const
char
*
inputColor
const
char
*
outputColor
EmitArgs
&
args
)
{
GrGLSLFPFragmentBuilder
*
fragBuilder
=
args
.
fFragBuilder
;
fragBuilder
-
>
onBeforeChildProcEmitCode
(
)
;
SkString
inputName
;
if
(
inputColor
&
&
strcmp
(
"
half4
(
1
.
0
)
"
inputColor
)
!
=
0
&
&
strcmp
(
"
half4
(
1
)
"
inputColor
)
!
=
0
)
{
inputName
.
appendf
(
"
_childInput
%
s
"
fragBuilder
-
>
getMangleString
(
)
.
c_str
(
)
)
;
fragBuilder
-
>
codeAppendf
(
"
half4
%
s
=
%
s
;
"
inputName
.
c_str
(
)
inputColor
)
;
}
const
GrFragmentProcessor
&
childProc
=
args
.
fFp
.
childProcessor
(
childIndex
)
;
fragBuilder
-
>
codeAppend
(
"
{
\
n
"
)
;
fragBuilder
-
>
codeAppendf
(
"
/
/
Child
Index
%
d
(
mangle
:
%
s
)
:
%
s
\
n
"
childIndex
fragBuilder
-
>
getMangleString
(
)
.
c_str
(
)
childProc
.
name
(
)
)
;
TransformedCoordVars
coordVars
=
args
.
fTransformedCoords
.
childInputs
(
childIndex
)
;
TextureSamplers
textureSamplers
=
args
.
fTexSamplers
.
childInputs
(
childIndex
)
;
EmitArgs
childArgs
(
fragBuilder
args
.
fUniformHandler
args
.
fShaderCaps
childProc
outputColor
inputName
.
size
(
)
>
0
?
inputName
.
c_str
(
)
:
nullptr
coordVars
textureSamplers
)
;
this
-
>
childProcessor
(
childIndex
)
-
>
emitCode
(
childArgs
)
;
fragBuilder
-
>
codeAppend
(
"
}
\
n
"
)
;
fragBuilder
-
>
onAfterChildProcEmitCode
(
)
;
}
GrGLSLFragmentProcessor
*
GrGLSLFragmentProcessor
:
:
Iter
:
:
next
(
)
{
if
(
fFPStack
.
empty
(
)
)
{
return
nullptr
;
}
GrGLSLFragmentProcessor
*
back
=
fFPStack
.
back
(
)
;
fFPStack
.
pop_back
(
)
;
for
(
int
i
=
back
-
>
numChildProcessors
(
)
-
1
;
i
>
=
0
;
-
-
i
)
{
fFPStack
.
push_back
(
back
-
>
childProcessor
(
i
)
)
;
}
return
back
;
}
