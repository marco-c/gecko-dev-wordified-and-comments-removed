#
include
"
GrGLSLFragmentProcessor
.
h
"
#
include
"
GrFragmentProcessor
.
h
"
#
include
"
GrProcessor
.
h
"
#
include
"
glsl
/
GrGLSLFragmentShaderBuilder
.
h
"
#
include
"
glsl
/
GrGLSLProgramBuilder
.
h
"
void
GrGLSLFragmentProcessor
:
:
setData
(
const
GrGLSLProgramDataManager
&
pdman
const
GrFragmentProcessor
&
processor
)
{
this
-
>
onSetData
(
pdman
processor
)
;
SkASSERT
(
fChildProcessors
.
count
(
)
=
=
processor
.
numChildProcessors
(
)
)
;
for
(
int
i
=
0
;
i
<
fChildProcessors
.
count
(
)
;
+
+
i
)
{
fChildProcessors
[
i
]
-
>
setData
(
pdman
processor
.
childProcessor
(
i
)
)
;
}
}
void
GrGLSLFragmentProcessor
:
:
emitChild
(
int
childIndex
const
char
*
inputColor
EmitArgs
&
args
)
{
this
-
>
internalEmitChild
(
childIndex
inputColor
args
.
fOutputColor
args
)
;
}
void
GrGLSLFragmentProcessor
:
:
emitChild
(
int
childIndex
const
char
*
inputColor
SkString
*
outputColor
EmitArgs
&
args
)
{
SkASSERT
(
outputColor
)
;
GrGLSLFragmentBuilder
*
fragBuilder
=
args
.
fFragBuilder
;
outputColor
-
>
append
(
fragBuilder
-
>
getMangleString
(
)
)
;
fragBuilder
-
>
codeAppendf
(
"
vec4
%
s
;
"
outputColor
-
>
c_str
(
)
)
;
this
-
>
internalEmitChild
(
childIndex
inputColor
outputColor
-
>
c_str
(
)
args
)
;
}
void
GrGLSLFragmentProcessor
:
:
internalEmitChild
(
int
childIndex
const
char
*
inputColor
const
char
*
outputColor
EmitArgs
&
args
)
{
GrGLSLFragmentBuilder
*
fragBuilder
=
args
.
fFragBuilder
;
fragBuilder
-
>
onBeforeChildProcEmitCode
(
)
;
const
GrFragmentProcessor
&
childProc
=
args
.
fFp
.
childProcessor
(
childIndex
)
;
int
firstCoordAt
=
args
.
fFp
.
numTransformsExclChildren
(
)
;
int
firstSamplerAt
=
args
.
fFp
.
numTexturesExclChildren
(
)
;
for
(
int
i
=
0
;
i
<
childIndex
;
+
+
i
)
{
firstCoordAt
+
=
args
.
fFp
.
childProcessor
(
i
)
.
numTransforms
(
)
;
firstSamplerAt
+
=
args
.
fFp
.
childProcessor
(
i
)
.
numTextures
(
)
;
}
GrGLSLTransformedCoordsArray
childCoords
;
TextureSamplerArray
childSamplers
;
if
(
childProc
.
numTransforms
(
)
>
0
)
{
childCoords
.
push_back_n
(
childProc
.
numTransforms
(
)
&
args
.
fCoords
[
firstCoordAt
]
)
;
}
if
(
childProc
.
numTextures
(
)
>
0
)
{
childSamplers
.
push_back_n
(
childProc
.
numTextures
(
)
&
args
.
fSamplers
[
firstSamplerAt
]
)
;
}
fragBuilder
-
>
codeAppend
(
"
{
\
n
"
)
;
fragBuilder
-
>
codeAppendf
(
"
/
/
Child
Index
%
d
(
mangle
:
%
s
)
:
%
s
\
n
"
childIndex
fragBuilder
-
>
getMangleString
(
)
.
c_str
(
)
childProc
.
name
(
)
)
;
EmitArgs
childArgs
(
args
.
fBuilder
fragBuilder
args
.
fGLSLCaps
childProc
outputColor
inputColor
childCoords
childSamplers
)
;
this
-
>
childProcessor
(
childIndex
)
-
>
emitCode
(
childArgs
)
;
fragBuilder
-
>
codeAppend
(
"
}
\
n
"
)
;
fragBuilder
-
>
onAfterChildProcEmitCode
(
)
;
}
