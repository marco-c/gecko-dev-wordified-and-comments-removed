#
ifndef
GrGLSLProgramDataManager_DEFINED
#
define
GrGLSLProgramDataManager_DEFINED
#
include
"
SkTypes
.
h
"
class
SkMatrix
;
class
GrGLSLProgramDataManager
:
SkNoncopyable
{
public
:
class
ShaderResourceHandle
{
public
:
ShaderResourceHandle
(
int
value
)
:
fValue
(
value
)
{
SkASSERT
(
this
-
>
isValid
(
)
)
;
}
ShaderResourceHandle
(
)
:
fValue
(
kInvalid_ShaderResourceHandle
)
{
}
bool
operator
=
=
(
const
ShaderResourceHandle
&
other
)
const
{
return
other
.
fValue
=
=
fValue
;
}
bool
isValid
(
)
const
{
return
kInvalid_ShaderResourceHandle
!
=
fValue
;
}
int
toIndex
(
)
const
{
SkASSERT
(
this
-
>
isValid
(
)
)
;
return
fValue
;
}
private
:
static
const
int
kInvalid_ShaderResourceHandle
=
-
1
;
int
fValue
;
}
;
typedef
ShaderResourceHandle
UniformHandle
;
virtual
~
GrGLSLProgramDataManager
(
)
{
}
virtual
void
set1f
(
UniformHandle
float
v0
)
const
=
0
;
virtual
void
set1fv
(
UniformHandle
int
arrayCount
const
float
v
[
]
)
const
=
0
;
virtual
void
set2f
(
UniformHandle
float
float
)
const
=
0
;
virtual
void
set2fv
(
UniformHandle
int
arrayCount
const
float
v
[
]
)
const
=
0
;
virtual
void
set3f
(
UniformHandle
float
float
float
)
const
=
0
;
virtual
void
set3fv
(
UniformHandle
int
arrayCount
const
float
v
[
]
)
const
=
0
;
virtual
void
set4f
(
UniformHandle
float
float
float
float
)
const
=
0
;
virtual
void
set4fv
(
UniformHandle
int
arrayCount
const
float
v
[
]
)
const
=
0
;
virtual
void
setMatrix3f
(
UniformHandle
const
float
matrix
[
]
)
const
=
0
;
virtual
void
setMatrix4f
(
UniformHandle
const
float
matrix
[
]
)
const
=
0
;
virtual
void
setMatrix3fv
(
UniformHandle
int
arrayCount
const
float
matrices
[
]
)
const
=
0
;
virtual
void
setMatrix4fv
(
UniformHandle
int
arrayCount
const
float
matrices
[
]
)
const
=
0
;
virtual
void
setSkMatrix
(
UniformHandle
const
SkMatrix
&
)
const
=
0
;
typedef
ShaderResourceHandle
VaryingHandle
;
virtual
void
setPathFragmentInputTransform
(
VaryingHandle
u
int
components
const
SkMatrix
&
matrix
)
const
=
0
;
protected
:
GrGLSLProgramDataManager
(
)
{
}
private
:
typedef
SkNoncopyable
INHERITED
;
}
;
#
endif
