#
ifndef
GrGLSLPrimitiveProcessor_DEFINED
#
define
GrGLSLPrimitiveProcessor_DEFINED
#
include
"
GrFragmentProcessor
.
h
"
#
include
"
GrPrimitiveProcessor
.
h
"
#
include
"
glsl
/
GrGLSLProgramDataManager
.
h
"
#
include
"
glsl
/
GrGLSLSampler
.
h
"
class
GrBatchTracker
;
class
GrPrimitiveProcessor
;
class
GrGLSLCaps
;
class
GrGLSLPPFragmentBuilder
;
class
GrGLSLGPBuilder
;
class
GrGLSLUniformHandler
;
class
GrGLSLVaryingHandler
;
class
GrGLSLVertexBuilder
;
class
GrGLSLPrimitiveProcessor
{
public
:
using
FPCoordTransformIter
=
GrFragmentProcessor
:
:
CoordTransformIter
;
virtual
~
GrGLSLPrimitiveProcessor
(
)
{
}
typedef
GrGLSLProgramDataManager
:
:
UniformHandle
UniformHandle
;
typedef
GrGLSLProgramDataManager
:
:
UniformHandle
SamplerHandle
;
class
FPCoordTransformHandler
:
public
SkNoncopyable
{
public
:
FPCoordTransformHandler
(
const
GrPipeline
&
pipeline
SkTArray
<
GrShaderVar
>
*
transformedCoordVars
)
:
fIter
(
pipeline
)
fTransformedCoordVars
(
transformedCoordVars
)
{
}
~
FPCoordTransformHandler
(
)
{
SkASSERT
(
!
this
-
>
nextCoordTransform
(
)
)
;
}
const
GrCoordTransform
*
nextCoordTransform
(
)
;
template
<
typename
.
.
.
Args
>
void
specifyCoordsForCurrCoordTransform
(
Args
&
&
.
.
.
args
)
{
SkASSERT
(
!
fAddedCoord
)
;
fTransformedCoordVars
-
>
emplace_back
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
SkDEBUGCODE
(
fAddedCoord
=
true
;
)
}
private
:
GrFragmentProcessor
:
:
CoordTransformIter
fIter
;
SkDEBUGCODE
(
bool
fAddedCoord
=
false
;
)
SkDEBUGCODE
(
const
GrCoordTransform
*
fCurr
=
nullptr
;
)
SkTArray
<
GrShaderVar
>
*
fTransformedCoordVars
;
}
;
struct
EmitArgs
{
EmitArgs
(
GrGLSLVertexBuilder
*
vertBuilder
GrGLSLPPFragmentBuilder
*
fragBuilder
GrGLSLVaryingHandler
*
varyingHandler
GrGLSLUniformHandler
*
uniformHandler
const
GrGLSLCaps
*
caps
const
GrPrimitiveProcessor
&
gp
const
char
*
outputColor
const
char
*
outputCoverage
const
char
*
distanceVectorName
const
SamplerHandle
*
texSamplers
const
SamplerHandle
*
bufferSamplers
FPCoordTransformHandler
*
transformHandler
)
:
fVertBuilder
(
vertBuilder
)
fFragBuilder
(
fragBuilder
)
fVaryingHandler
(
varyingHandler
)
fUniformHandler
(
uniformHandler
)
fGLSLCaps
(
caps
)
fGP
(
gp
)
fOutputColor
(
outputColor
)
fOutputCoverage
(
outputCoverage
)
fDistanceVectorName
(
distanceVectorName
)
fTexSamplers
(
texSamplers
)
fBufferSamplers
(
bufferSamplers
)
fFPCoordTransformHandler
(
transformHandler
)
{
}
GrGLSLVertexBuilder
*
fVertBuilder
;
GrGLSLPPFragmentBuilder
*
fFragBuilder
;
GrGLSLVaryingHandler
*
fVaryingHandler
;
GrGLSLUniformHandler
*
fUniformHandler
;
const
GrGLSLCaps
*
fGLSLCaps
;
const
GrPrimitiveProcessor
&
fGP
;
const
char
*
fOutputColor
;
const
char
*
fOutputCoverage
;
const
char
*
fDistanceVectorName
;
const
SamplerHandle
*
fTexSamplers
;
const
SamplerHandle
*
fBufferSamplers
;
FPCoordTransformHandler
*
fFPCoordTransformHandler
;
}
;
virtual
void
emitCode
(
EmitArgs
&
)
=
0
;
virtual
void
setData
(
const
GrGLSLProgramDataManager
&
const
GrPrimitiveProcessor
&
FPCoordTransformIter
&
&
)
=
0
;
static
SkMatrix
GetTransformMatrix
(
const
SkMatrix
&
localMatrix
const
GrCoordTransform
&
)
;
protected
:
void
setupUniformColor
(
GrGLSLPPFragmentBuilder
*
fragBuilder
GrGLSLUniformHandler
*
uniformHandler
const
char
*
outputName
UniformHandle
*
colorUniform
)
;
}
;
#
endif
