#
ifndef
GrGLSLXferProcessor_DEFINED
#
define
GrGLSLXferProcessor_DEFINED
#
include
"
SkPoint
.
h
"
#
include
"
glsl
/
GrGLSLProgramDataManager
.
h
"
#
include
"
glsl
/
GrGLSLUniformHandler
.
h
"
class
GrXferProcessor
;
class
GrGLSLXPBuilder
;
class
GrGLSLXPFragmentBuilder
;
class
GrShaderCaps
;
class
GrTexture
;
class
GrGLSLXferProcessor
{
public
:
GrGLSLXferProcessor
(
)
{
}
virtual
~
GrGLSLXferProcessor
(
)
{
}
using
SamplerHandle
=
GrGLSLUniformHandler
:
:
SamplerHandle
;
struct
EmitArgs
{
EmitArgs
(
GrGLSLXPFragmentBuilder
*
fragBuilder
GrGLSLUniformHandler
*
uniformHandler
const
GrShaderCaps
*
caps
const
GrXferProcessor
&
xp
const
char
*
inputColor
const
char
*
inputCoverage
const
char
*
outputPrimary
const
char
*
outputSecondary
const
SamplerHandle
dstTextureSamplerHandle
GrSurfaceOrigin
dstTextureOrigin
)
:
fXPFragBuilder
(
fragBuilder
)
fUniformHandler
(
uniformHandler
)
fShaderCaps
(
caps
)
fXP
(
xp
)
fInputColor
(
inputColor
?
inputColor
:
"
half4
(
1
.
0
)
"
)
fInputCoverage
(
inputCoverage
)
fOutputPrimary
(
outputPrimary
)
fOutputSecondary
(
outputSecondary
)
fDstTextureSamplerHandle
(
dstTextureSamplerHandle
)
fDstTextureOrigin
(
dstTextureOrigin
)
{
}
GrGLSLXPFragmentBuilder
*
fXPFragBuilder
;
GrGLSLUniformHandler
*
fUniformHandler
;
const
GrShaderCaps
*
fShaderCaps
;
const
GrXferProcessor
&
fXP
;
const
char
*
fInputColor
;
const
char
*
fInputCoverage
;
const
char
*
fOutputPrimary
;
const
char
*
fOutputSecondary
;
const
SamplerHandle
fDstTextureSamplerHandle
;
GrSurfaceOrigin
fDstTextureOrigin
;
}
;
void
emitCode
(
const
EmitArgs
&
)
;
void
setData
(
const
GrGLSLProgramDataManager
&
pdm
const
GrXferProcessor
&
xp
const
GrTexture
*
dstTexture
const
SkIPoint
&
dstTextureOffset
)
;
protected
:
static
void
DefaultCoverageModulation
(
GrGLSLXPFragmentBuilder
*
fragBuilder
const
char
*
srcCoverage
const
char
*
dstColor
const
char
*
outColor
const
char
*
outColorSecondary
const
GrXferProcessor
&
proc
)
;
private
:
virtual
void
emitOutputsForBlendState
(
const
EmitArgs
&
)
{
SK_ABORT
(
"
emitOutputsForBlendState
not
implemented
.
"
)
;
}
virtual
void
emitBlendCodeForDstRead
(
GrGLSLXPFragmentBuilder
*
GrGLSLUniformHandler
*
const
char
*
srcColor
const
char
*
srcCoverage
const
char
*
dstColor
const
char
*
outColor
const
char
*
outColorSecondary
const
GrXferProcessor
&
)
{
SK_ABORT
(
"
emitBlendCodeForDstRead
not
implemented
.
"
)
;
}
virtual
void
onSetData
(
const
GrGLSLProgramDataManager
&
const
GrXferProcessor
&
)
=
0
;
GrGLSLProgramDataManager
:
:
UniformHandle
fDstTopLeftUni
;
GrGLSLProgramDataManager
:
:
UniformHandle
fDstScaleUni
;
}
;
#
endif
