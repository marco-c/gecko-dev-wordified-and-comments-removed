#
ifndef
GrGLSLCaps_DEFINED
#
define
GrGLSLCaps_DEFINED
#
include
"
GrCaps
.
h
"
#
include
"
GrGLSL
.
h
"
#
include
"
GrSwizzle
.
h
"
class
GrGLSLCaps
:
public
GrShaderCaps
{
public
:
enum
AdvBlendEqInteraction
{
kNotSupported_AdvBlendEqInteraction
kAutomatic_AdvBlendEqInteraction
kGeneralEnable_AdvBlendEqInteraction
kSpecificEnables_AdvBlendEqInteraction
kLast_AdvBlendEqInteraction
=
kSpecificEnables_AdvBlendEqInteraction
}
;
GrGLSLCaps
(
const
GrContextOptions
&
)
;
bool
fbFetchSupport
(
)
const
{
return
fFBFetchSupport
;
}
bool
fbFetchNeedsCustomOutput
(
)
const
{
return
fFBFetchNeedsCustomOutput
;
}
bool
bindlessTextureSupport
(
)
const
{
return
fBindlessTextureSupport
;
}
const
char
*
versionDeclString
(
)
const
{
return
fVersionDeclString
;
}
const
char
*
fbFetchColorName
(
)
const
{
return
fFBFetchColorName
;
}
const
char
*
fbFetchExtensionString
(
)
const
{
return
fFBFetchExtensionString
;
}
bool
dropsTileOnZeroDivide
(
)
const
{
return
fDropsTileOnZeroDivide
;
}
bool
flatInterpolationSupport
(
)
const
{
return
fFlatInterpolationSupport
;
}
bool
noperspectiveInterpolationSupport
(
)
const
{
return
fNoPerspectiveInterpolationSupport
;
}
bool
multisampleInterpolationSupport
(
)
const
{
return
fMultisampleInterpolationSupport
;
}
bool
sampleVariablesSupport
(
)
const
{
return
fSampleVariablesSupport
;
}
bool
sampleMaskOverrideCoverageSupport
(
)
const
{
return
fSampleMaskOverrideCoverageSupport
;
}
bool
externalTextureSupport
(
)
const
{
return
fExternalTextureSupport
;
}
bool
texelFetchSupport
(
)
const
{
return
fTexelFetchSupport
;
}
AdvBlendEqInteraction
advBlendEqInteraction
(
)
const
{
return
fAdvBlendEqInteraction
;
}
bool
mustEnableAdvBlendEqs
(
)
const
{
return
fAdvBlendEqInteraction
>
=
kGeneralEnable_AdvBlendEqInteraction
;
}
bool
mustEnableSpecificAdvBlendEqs
(
)
const
{
return
fAdvBlendEqInteraction
=
=
kSpecificEnables_AdvBlendEqInteraction
;
}
bool
mustDeclareFragmentShaderOutput
(
)
const
{
return
fGLSLGeneration
>
k110_GrGLSLGeneration
;
}
bool
usesPrecisionModifiers
(
)
const
{
return
fUsesPrecisionModifiers
;
}
bool
canUseAnyFunctionInShader
(
)
const
{
return
fCanUseAnyFunctionInShader
;
}
bool
canUseMinAndAbsTogether
(
)
const
{
return
fCanUseMinAndAbsTogether
;
}
bool
mustForceNegatedAtanParamToFloat
(
)
const
{
return
fMustForceNegatedAtanParamToFloat
;
}
bool
requiresLocalOutputColorForFBFetch
(
)
const
{
return
fRequiresLocalOutputColorForFBFetch
;
}
const
char
*
shaderDerivativeExtensionString
(
)
const
{
SkASSERT
(
this
-
>
shaderDerivativeSupport
(
)
)
;
return
fShaderDerivativeExtensionString
;
}
const
char
*
fragCoordConventionsExtensionString
(
)
const
{
return
fFragCoordConventionsExtensionString
;
}
const
char
*
secondaryOutputExtensionString
(
)
const
{
return
fSecondaryOutputExtensionString
;
}
const
char
*
externalTextureExtensionString
(
)
const
{
SkASSERT
(
this
-
>
externalTextureSupport
(
)
)
;
return
fExternalTextureExtensionString
;
}
const
char
*
texelBufferExtensionString
(
)
const
{
SkASSERT
(
this
-
>
texelBufferSupport
(
)
)
;
return
fTexelBufferExtensionString
;
}
const
char
*
noperspectiveInterpolationExtensionString
(
)
const
{
SkASSERT
(
this
-
>
noperspectiveInterpolationSupport
(
)
)
;
return
fNoPerspectiveInterpolationExtensionString
;
}
const
char
*
multisampleInterpolationExtensionString
(
)
const
{
SkASSERT
(
this
-
>
multisampleInterpolationSupport
(
)
)
;
return
fMultisampleInterpolationExtensionString
;
}
const
char
*
sampleVariablesExtensionString
(
)
const
{
SkASSERT
(
this
-
>
sampleVariablesSupport
(
)
)
;
return
fSampleVariablesExtensionString
;
}
int
maxVertexSamplers
(
)
const
{
return
fMaxVertexSamplers
;
}
int
maxGeometrySamplers
(
)
const
{
return
fMaxGeometrySamplers
;
}
int
maxFragmentSamplers
(
)
const
{
return
fMaxFragmentSamplers
;
}
int
maxCombinedSamplers
(
)
const
{
return
fMaxCombinedSamplers
;
}
const
GrSwizzle
&
configTextureSwizzle
(
GrPixelConfig
config
)
const
{
return
fConfigTextureSwizzle
[
config
]
;
}
const
GrSwizzle
&
configOutputSwizzle
(
GrPixelConfig
config
)
const
{
return
fConfigOutputSwizzle
[
config
]
;
}
GrSLPrecision
samplerPrecision
(
GrPixelConfig
config
GrShaderFlags
visibility
)
const
{
return
static_cast
<
GrSLPrecision
>
(
fSamplerPrecisions
[
visibility
]
[
config
]
)
;
}
GrGLSLGeneration
generation
(
)
const
{
return
fGLSLGeneration
;
}
SkString
dump
(
)
const
override
;
private
:
void
initSamplerPrecisionTable
(
)
;
void
onApplyOptionsOverrides
(
const
GrContextOptions
&
options
)
override
;
GrGLSLGeneration
fGLSLGeneration
;
bool
fDropsTileOnZeroDivide
:
1
;
bool
fFBFetchSupport
:
1
;
bool
fFBFetchNeedsCustomOutput
:
1
;
bool
fBindlessTextureSupport
:
1
;
bool
fUsesPrecisionModifiers
:
1
;
bool
fCanUseAnyFunctionInShader
:
1
;
bool
fFlatInterpolationSupport
:
1
;
bool
fNoPerspectiveInterpolationSupport
:
1
;
bool
fMultisampleInterpolationSupport
:
1
;
bool
fSampleVariablesSupport
:
1
;
bool
fSampleMaskOverrideCoverageSupport
:
1
;
bool
fExternalTextureSupport
:
1
;
bool
fTexelFetchSupport
:
1
;
bool
fCanUseMinAndAbsTogether
:
1
;
bool
fMustForceNegatedAtanParamToFloat
:
1
;
bool
fRequiresLocalOutputColorForFBFetch
:
1
;
const
char
*
fVersionDeclString
;
const
char
*
fShaderDerivativeExtensionString
;
const
char
*
fFragCoordConventionsExtensionString
;
const
char
*
fSecondaryOutputExtensionString
;
const
char
*
fExternalTextureExtensionString
;
const
char
*
fTexelBufferExtensionString
;
const
char
*
fNoPerspectiveInterpolationExtensionString
;
const
char
*
fMultisampleInterpolationExtensionString
;
const
char
*
fSampleVariablesExtensionString
;
const
char
*
fFBFetchColorName
;
const
char
*
fFBFetchExtensionString
;
int
fMaxVertexSamplers
;
int
fMaxGeometrySamplers
;
int
fMaxFragmentSamplers
;
int
fMaxCombinedSamplers
;
AdvBlendEqInteraction
fAdvBlendEqInteraction
;
GrSwizzle
fConfigTextureSwizzle
[
kGrPixelConfigCnt
]
;
GrSwizzle
fConfigOutputSwizzle
[
kGrPixelConfigCnt
]
;
uint8_t
fSamplerPrecisions
[
(
1
<
<
kGrShaderTypeCount
)
]
[
kGrPixelConfigCnt
]
;
friend
class
GrGLCaps
;
friend
class
GrVkCaps
;
typedef
GrShaderCaps
INHERITED
;
}
;
#
endif
