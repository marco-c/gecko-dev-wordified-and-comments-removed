#
ifndef
GrGLSLUniformHandler_DEFINED
#
define
GrGLSLUniformHandler_DEFINED
#
include
"
GrGLSLProgramDataManager
.
h
"
#
include
"
GrShaderVar
.
h
"
#
include
"
GrSwizzle
.
h
"
#
define
GR_NO_MANGLE_PREFIX
"
sk_
"
class
GrGLSLProgramBuilder
;
class
GrGLSLUniformHandler
{
public
:
virtual
~
GrGLSLUniformHandler
(
)
{
}
using
UniformHandle
=
GrGLSLProgramDataManager
:
:
UniformHandle
;
GR_DEFINE_RESOURCE_HANDLE_CLASS
(
SamplerHandle
)
;
GR_DEFINE_RESOURCE_HANDLE_CLASS
(
TexelBufferHandle
)
;
UniformHandle
addUniform
(
uint32_t
visibility
GrSLType
type
GrSLPrecision
precision
const
char
*
name
const
char
*
*
outName
=
nullptr
)
{
SkASSERT
(
!
GrSLTypeIsCombinedSamplerType
(
type
)
)
;
return
this
-
>
addUniformArray
(
visibility
type
precision
name
0
outName
)
;
}
UniformHandle
addUniform
(
uint32_t
visibility
GrSLType
type
const
char
*
name
const
char
*
*
outName
=
nullptr
)
{
return
this
-
>
addUniform
(
visibility
type
kDefault_GrSLPrecision
name
outName
)
;
}
UniformHandle
addUniformArray
(
uint32_t
visibility
GrSLType
type
GrSLPrecision
precision
const
char
*
name
int
arrayCount
const
char
*
*
outName
=
nullptr
)
{
SkASSERT
(
!
GrSLTypeIsCombinedSamplerType
(
type
)
)
;
bool
mangle
=
strncmp
(
name
GR_NO_MANGLE_PREFIX
strlen
(
GR_NO_MANGLE_PREFIX
)
)
;
return
this
-
>
internalAddUniformArray
(
visibility
type
precision
name
mangle
arrayCount
outName
)
;
}
UniformHandle
addUniformArray
(
uint32_t
visibility
GrSLType
type
const
char
*
name
int
arrayCount
const
char
*
*
outName
=
nullptr
)
{
SkASSERT
(
!
GrSLTypeIsCombinedSamplerType
(
type
)
)
;
bool
mangle
=
strncmp
(
name
GR_NO_MANGLE_PREFIX
strlen
(
GR_NO_MANGLE_PREFIX
)
)
;
return
this
-
>
internalAddUniformArray
(
visibility
type
kDefault_GrSLPrecision
name
mangle
arrayCount
outName
)
;
}
virtual
const
GrShaderVar
&
getUniformVariable
(
UniformHandle
u
)
const
=
0
;
virtual
const
char
*
getUniformCStr
(
UniformHandle
u
)
const
=
0
;
protected
:
explicit
GrGLSLUniformHandler
(
GrGLSLProgramBuilder
*
program
)
:
fProgramBuilder
(
program
)
{
}
GrGLSLProgramBuilder
*
fProgramBuilder
;
private
:
virtual
const
GrShaderVar
&
samplerVariable
(
SamplerHandle
)
const
=
0
;
virtual
GrSwizzle
samplerSwizzle
(
SamplerHandle
)
const
=
0
;
virtual
SamplerHandle
addSampler
(
uint32_t
visibility
GrSwizzle
GrSLType
GrSLPrecision
const
char
*
name
)
=
0
;
virtual
const
GrShaderVar
&
texelBufferVariable
(
TexelBufferHandle
)
const
=
0
;
virtual
TexelBufferHandle
addTexelBuffer
(
uint32_t
visibility
GrSLPrecision
const
char
*
name
)
=
0
;
virtual
UniformHandle
internalAddUniformArray
(
uint32_t
visibility
GrSLType
type
GrSLPrecision
precision
const
char
*
name
bool
mangleName
int
arrayCount
const
char
*
*
outName
)
=
0
;
virtual
void
appendUniformDecls
(
GrShaderFlags
visibility
SkString
*
)
const
=
0
;
friend
class
GrGLSLProgramBuilder
;
}
;
#
endif
