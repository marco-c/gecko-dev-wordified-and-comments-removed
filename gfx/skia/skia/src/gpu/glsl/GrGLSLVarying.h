#
ifndef
GrGLSLVarying_DEFINED
#
define
GrGLSLVarying_DEFINED
#
include
"
GrAllocator
.
h
"
#
include
"
GrGeometryProcessor
.
h
"
#
include
"
GrTypesPriv
.
h
"
#
include
"
glsl
/
GrGLSLProgramDataManager
.
h
"
#
include
"
glsl
/
GrGLSLShaderVar
.
h
"
class
GrGLSLProgramBuilder
;
class
GrGLSLVarying
{
public
:
bool
vsVarying
(
)
const
{
return
kVertToFrag_Varying
=
=
fVarying
|
|
kVertToGeo_Varying
=
=
fVarying
;
}
bool
fsVarying
(
)
const
{
return
kVertToFrag_Varying
=
=
fVarying
|
|
kGeoToFrag_Varying
=
=
fVarying
;
}
const
char
*
vsOut
(
)
const
{
return
fVsOut
;
}
const
char
*
gsIn
(
)
const
{
return
fGsIn
;
}
const
char
*
gsOut
(
)
const
{
return
fGsOut
;
}
const
char
*
fsIn
(
)
const
{
return
fFsIn
;
}
GrSLType
type
(
)
const
{
return
fType
;
}
protected
:
enum
Varying
{
kVertToFrag_Varying
kVertToGeo_Varying
kGeoToFrag_Varying
}
;
GrGLSLVarying
(
GrSLType
type
Varying
varying
)
:
fVarying
(
varying
)
fType
(
type
)
fVsOut
(
nullptr
)
fGsIn
(
nullptr
)
fGsOut
(
nullptr
)
fFsIn
(
nullptr
)
{
}
Varying
fVarying
;
private
:
GrSLType
fType
;
const
char
*
fVsOut
;
const
char
*
fGsIn
;
const
char
*
fGsOut
;
const
char
*
fFsIn
;
friend
class
GrGLSLVaryingHandler
;
}
;
struct
GrGLSLVertToFrag
:
public
GrGLSLVarying
{
GrGLSLVertToFrag
(
GrSLType
type
)
:
GrGLSLVarying
(
type
kVertToFrag_Varying
)
{
}
}
;
struct
GrGLSLVertToGeo
:
public
GrGLSLVarying
{
GrGLSLVertToGeo
(
GrSLType
type
)
:
GrGLSLVarying
(
type
kVertToGeo_Varying
)
{
}
}
;
struct
GrGLSLGeoToFrag
:
public
GrGLSLVarying
{
GrGLSLGeoToFrag
(
GrSLType
type
)
:
GrGLSLVarying
(
type
kGeoToFrag_Varying
)
{
}
}
;
static
const
int
kVaryingsPerBlock
=
8
;
class
GrGLSLVaryingHandler
{
public
:
explicit
GrGLSLVaryingHandler
(
GrGLSLProgramBuilder
*
program
)
:
fVaryings
(
kVaryingsPerBlock
)
fVertexInputs
(
kVaryingsPerBlock
)
fVertexOutputs
(
kVaryingsPerBlock
)
fGeomInputs
(
kVaryingsPerBlock
)
fGeomOutputs
(
kVaryingsPerBlock
)
fFragInputs
(
kVaryingsPerBlock
)
fFragOutputs
(
kVaryingsPerBlock
)
fProgramBuilder
(
program
)
fDefaultInterpolationModifier
(
nullptr
)
{
}
virtual
~
GrGLSLVaryingHandler
(
)
{
}
void
setNoPerspective
(
)
;
void
addVarying
(
const
char
*
name
GrGLSLVarying
*
varying
GrSLPrecision
precision
=
kDefault_GrSLPrecision
)
{
SkASSERT
(
GrSLTypeIsFloatType
(
varying
-
>
type
(
)
)
)
;
this
-
>
internalAddVarying
(
name
varying
precision
false
)
;
}
void
addFlatVarying
(
const
char
*
name
GrGLSLVarying
*
varying
GrSLPrecision
precision
=
kDefault_GrSLPrecision
)
{
this
-
>
internalAddVarying
(
name
varying
precision
true
)
;
}
void
addPassThroughAttribute
(
const
GrGeometryProcessor
:
:
Attribute
*
const
char
*
output
GrSLPrecision
=
kDefault_GrSLPrecision
)
;
void
addFlatPassThroughAttribute
(
const
GrGeometryProcessor
:
:
Attribute
*
const
char
*
output
GrSLPrecision
=
kDefault_GrSLPrecision
)
;
void
emitAttributes
(
const
GrGeometryProcessor
&
gp
)
;
void
finalize
(
)
;
void
getVertexDecls
(
SkString
*
inputDecls
SkString
*
outputDecls
)
const
;
void
getGeomDecls
(
SkString
*
inputDecls
SkString
*
outputDecls
)
const
;
void
getFragDecls
(
SkString
*
inputDecls
SkString
*
outputDecls
)
const
;
protected
:
struct
VaryingInfo
{
GrSLType
fType
;
GrSLPrecision
fPrecision
;
bool
fIsFlat
;
SkString
fVsOut
;
SkString
fGsOut
;
GrShaderFlags
fVisibility
;
}
;
typedef
GrTAllocator
<
VaryingInfo
>
VaryingList
;
typedef
GrTAllocator
<
GrGLSLShaderVar
>
VarArray
;
typedef
GrGLSLProgramDataManager
:
:
VaryingHandle
VaryingHandle
;
VaryingList
fVaryings
;
VarArray
fVertexInputs
;
VarArray
fVertexOutputs
;
VarArray
fGeomInputs
;
VarArray
fGeomOutputs
;
VarArray
fFragInputs
;
VarArray
fFragOutputs
;
GrGLSLProgramBuilder
*
fProgramBuilder
;
private
:
void
internalAddVarying
(
const
char
*
name
GrGLSLVarying
*
GrSLPrecision
bool
flat
)
;
void
writePassThroughAttribute
(
const
GrGeometryProcessor
:
:
Attribute
*
const
char
*
output
const
GrGLSLVarying
&
)
;
void
addAttribute
(
const
GrShaderVar
&
var
)
;
virtual
void
onFinalize
(
)
=
0
;
void
appendDecls
(
const
VarArray
&
vars
SkString
*
out
)
const
;
const
char
*
fDefaultInterpolationModifier
;
friend
class
GrGLSLProgramBuilder
;
}
;
#
endif
