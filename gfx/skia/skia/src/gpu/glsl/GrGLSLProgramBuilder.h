#
ifndef
GrGLSLProgramBuilder_DEFINED
#
define
GrGLSLProgramBuilder_DEFINED
#
include
"
GrCaps
.
h
"
#
include
"
GrGeometryProcessor
.
h
"
#
include
"
GrProgramDesc
.
h
"
#
include
"
glsl
/
GrGLSLFragmentProcessor
.
h
"
#
include
"
glsl
/
GrGLSLFragmentShaderBuilder
.
h
"
#
include
"
glsl
/
GrGLSLPrimitiveProcessor
.
h
"
#
include
"
glsl
/
GrGLSLProgramDataManager
.
h
"
#
include
"
glsl
/
GrGLSLUniformHandler
.
h
"
#
include
"
glsl
/
GrGLSLVertexGeoBuilder
.
h
"
#
include
"
glsl
/
GrGLSLXferProcessor
.
h
"
class
GrShaderVar
;
class
GrGLSLVaryingHandler
;
class
SkString
;
class
GrShaderCaps
;
typedef
SkSTArray
<
8
GrGLSLFragmentProcessor
*
true
>
GrGLSLFragProcs
;
class
GrGLSLProgramBuilder
{
public
:
using
UniformHandle
=
GrGLSLUniformHandler
:
:
UniformHandle
;
using
SamplerHandle
=
GrGLSLUniformHandler
:
:
SamplerHandle
;
using
TexelBufferHandle
=
GrGLSLUniformHandler
:
:
TexelBufferHandle
;
virtual
~
GrGLSLProgramBuilder
(
)
{
}
virtual
const
GrCaps
*
caps
(
)
const
=
0
;
const
GrShaderCaps
*
shaderCaps
(
)
const
{
return
this
-
>
caps
(
)
-
>
shaderCaps
(
)
;
}
const
GrPrimitiveProcessor
&
primitiveProcessor
(
)
const
{
return
fPrimProc
;
}
const
GrPipeline
&
pipeline
(
)
const
{
return
fPipeline
;
}
GrProgramDesc
*
desc
(
)
{
return
fDesc
;
}
const
GrProgramDesc
:
:
KeyHeader
&
header
(
)
const
{
return
fDesc
-
>
header
(
)
;
}
void
appendUniformDecls
(
GrShaderFlags
visibility
SkString
*
)
const
;
const
GrShaderVar
&
samplerVariable
(
SamplerHandle
handle
)
const
{
return
this
-
>
uniformHandler
(
)
-
>
samplerVariable
(
handle
)
;
}
GrSwizzle
samplerSwizzle
(
SamplerHandle
handle
)
const
{
return
this
-
>
uniformHandler
(
)
-
>
samplerSwizzle
(
handle
)
;
}
const
GrShaderVar
&
texelBufferVariable
(
TexelBufferHandle
handle
)
const
{
return
this
-
>
uniformHandler
(
)
-
>
texelBufferVariable
(
handle
)
;
}
struct
BuiltinUniformHandles
{
UniformHandle
fRTAdjustmentUni
;
UniformHandle
fRTHeightUni
;
}
;
void
addRTHeightUniform
(
const
char
*
name
)
;
void
nameVariable
(
SkString
*
out
char
prefix
const
char
*
name
bool
mangle
=
true
)
;
virtual
GrGLSLUniformHandler
*
uniformHandler
(
)
=
0
;
virtual
const
GrGLSLUniformHandler
*
uniformHandler
(
)
const
=
0
;
virtual
GrGLSLVaryingHandler
*
varyingHandler
(
)
=
0
;
virtual
void
finalizeFragmentOutputColor
(
GrShaderVar
&
outputColor
)
{
}
virtual
void
finalizeFragmentSecondaryColor
(
GrShaderVar
&
outputColor
)
{
}
static
const
int
kVarsPerBlock
;
GrGLSLVertexBuilder
fVS
;
GrGLSLGeometryBuilder
fGS
;
GrGLSLFragmentShaderBuilder
fFS
;
int
fStageIndex
;
const
GrPipeline
&
fPipeline
;
const
GrPrimitiveProcessor
&
fPrimProc
;
GrProgramDesc
*
fDesc
;
BuiltinUniformHandles
fUniformHandles
;
std
:
:
unique_ptr
<
GrGLSLPrimitiveProcessor
>
fGeometryProcessor
;
std
:
:
unique_ptr
<
GrGLSLXferProcessor
>
fXferProcessor
;
GrGLSLFragProcs
fFragmentProcessors
;
protected
:
explicit
GrGLSLProgramBuilder
(
const
GrPipeline
&
const
GrPrimitiveProcessor
&
GrProgramDesc
*
)
;
void
addFeature
(
GrShaderFlags
shaders
uint32_t
featureBit
const
char
*
extensionName
)
;
bool
emitAndInstallProcs
(
)
;
void
cleanupFragmentProcessors
(
)
;
void
finalizeShaders
(
)
;
private
:
void
reset
(
)
{
this
-
>
addStage
(
)
;
SkDEBUGCODE
(
fFS
.
resetVerification
(
)
;
)
}
void
addStage
(
)
{
fStageIndex
+
+
;
}
class
AutoStageAdvance
{
public
:
AutoStageAdvance
(
GrGLSLProgramBuilder
*
pb
)
:
fPB
(
pb
)
{
fPB
-
>
reset
(
)
;
fPB
-
>
fFS
.
nextStage
(
)
;
}
~
AutoStageAdvance
(
)
{
}
private
:
GrGLSLProgramBuilder
*
fPB
;
}
;
void
nameExpression
(
SkString
*
const
char
*
baseName
)
;
void
emitAndInstallPrimProc
(
const
GrPrimitiveProcessor
&
SkString
*
outputColor
SkString
*
outputCoverage
)
;
void
emitAndInstallFragProcs
(
SkString
*
colorInOut
SkString
*
coverageInOut
)
;
SkString
emitAndInstallFragProc
(
const
GrFragmentProcessor
&
int
index
int
transformedCoordVarsIdx
const
SkString
&
input
SkString
output
)
;
void
emitAndInstallXferProc
(
const
SkString
&
colorIn
const
SkString
&
coverageIn
)
;
void
emitSamplers
(
const
GrResourceIOProcessor
&
processor
SkTArray
<
SamplerHandle
>
*
outTexSamplerHandles
SkTArray
<
TexelBufferHandle
>
*
outTexelBufferHandles
)
;
SamplerHandle
emitSampler
(
GrSLType
samplerType
GrPixelConfig
const
char
*
name
GrShaderFlags
visibility
)
;
TexelBufferHandle
emitTexelBuffer
(
GrPixelConfig
const
char
*
name
GrShaderFlags
visibility
)
;
void
emitFSOutputSwizzle
(
bool
hasSecondaryOutput
)
;
void
updateSamplerCounts
(
GrShaderFlags
visibility
)
;
bool
checkSamplerCounts
(
)
;
#
ifdef
SK_DEBUG
void
verify
(
const
GrPrimitiveProcessor
&
)
;
void
verify
(
const
GrXferProcessor
&
)
;
void
verify
(
const
GrFragmentProcessor
&
)
;
#
endif
int
fNumVertexSamplers
;
int
fNumGeometrySamplers
;
int
fNumFragmentSamplers
;
SkSTArray
<
4
GrShaderVar
>
fTransformedCoordVars
;
}
;
#
endif
