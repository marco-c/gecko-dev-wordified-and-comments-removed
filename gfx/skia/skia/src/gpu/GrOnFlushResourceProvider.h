#
ifndef
GrOnFlushResourceProvider_DEFINED
#
define
GrOnFlushResourceProvider_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
private
/
SkTArray
.
h
"
#
include
"
src
/
gpu
/
GrDeferredUpload
.
h
"
#
include
"
src
/
gpu
/
GrOpFlushState
.
h
"
#
include
"
src
/
gpu
/
GrResourceProvider
.
h
"
class
GrDrawingManager
;
class
GrOnFlushResourceProvider
;
class
GrRenderTargetContext
;
class
GrSurfaceProxy
;
class
SkColorSpace
;
class
SkSurfaceProps
;
class
GrOnFlushCallbackObject
{
public
:
virtual
~
GrOnFlushCallbackObject
(
)
{
}
virtual
void
preFlush
(
GrOnFlushResourceProvider
*
const
uint32_t
*
opsTaskIDs
int
numOpsTaskIDs
)
=
0
;
virtual
void
postFlush
(
GrDeferredUploadToken
startTokenForNextFlush
const
uint32_t
*
opsTaskIDs
int
numOpsTaskIDs
)
{
}
virtual
bool
retainOnFreeGpuResources
(
)
{
return
false
;
}
}
;
class
GrOnFlushResourceProvider
{
public
:
using
UseAllocator
=
GrSurfaceProxy
:
:
UseAllocator
;
explicit
GrOnFlushResourceProvider
(
GrDrawingManager
*
drawingMgr
)
:
fDrawingMgr
(
drawingMgr
)
{
}
std
:
:
unique_ptr
<
GrRenderTargetContext
>
makeRenderTargetContext
(
sk_sp
<
GrSurfaceProxy
>
GrColorType
sk_sp
<
SkColorSpace
>
const
SkSurfaceProps
*
)
;
void
addTextureResolveTask
(
sk_sp
<
GrTextureProxy
>
GrSurfaceProxy
:
:
ResolveFlags
)
;
bool
assignUniqueKeyToProxy
(
const
GrUniqueKey
&
GrTextureProxy
*
)
;
void
removeUniqueKeyFromProxy
(
GrTextureProxy
*
)
;
void
processInvalidUniqueKey
(
const
GrUniqueKey
&
)
;
sk_sp
<
GrTextureProxy
>
findOrCreateProxyByUniqueKey
(
const
GrUniqueKey
&
GrColorType
GrSurfaceOrigin
UseAllocator
)
;
bool
instatiateProxy
(
GrSurfaceProxy
*
)
;
sk_sp
<
GrGpuBuffer
>
makeBuffer
(
GrGpuBufferType
size_t
const
void
*
data
=
nullptr
)
;
sk_sp
<
const
GrGpuBuffer
>
findOrMakeStaticBuffer
(
GrGpuBufferType
size_t
const
void
*
data
const
GrUniqueKey
&
)
;
uint32_t
contextID
(
)
const
;
const
GrCaps
*
caps
(
)
const
;
private
:
GrOnFlushResourceProvider
(
const
GrOnFlushResourceProvider
&
)
=
delete
;
GrOnFlushResourceProvider
&
operator
=
(
const
GrOnFlushResourceProvider
&
)
=
delete
;
GrDrawingManager
*
fDrawingMgr
;
}
;
#
endif
