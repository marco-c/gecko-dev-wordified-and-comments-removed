#
include
"
GrContext
.
h
"
#
include
"
GrCaps
.
h
"
#
include
"
GrContextPriv
.
h
"
#
include
"
GrContextThreadSafeProxyPriv
.
h
"
#
include
"
GrSkSLFPFactoryCache
.
h
"
class
SK_API
GrDDLContext
:
public
GrContext
{
public
:
GrDDLContext
(
sk_sp
<
GrContextThreadSafeProxy
>
proxy
)
:
INHERITED
(
proxy
-
>
backend
(
)
proxy
-
>
priv
(
)
.
options
(
)
proxy
-
>
priv
(
)
.
contextID
(
)
)
{
fThreadSafeProxy
=
std
:
:
move
(
proxy
)
;
}
~
GrDDLContext
(
)
override
{
}
void
abandonContext
(
)
override
{
SkASSERT
(
0
)
;
INHERITED
:
:
abandonContext
(
)
;
}
void
releaseResourcesAndAbandonContext
(
)
override
{
SkASSERT
(
0
)
;
INHERITED
:
:
releaseResourcesAndAbandonContext
(
)
;
}
void
freeGpuResources
(
)
override
{
SkASSERT
(
0
)
;
INHERITED
:
:
freeGpuResources
(
)
;
}
protected
:
GrContext
*
asDirectContext
(
)
override
{
return
nullptr
;
}
bool
init
(
sk_sp
<
const
GrCaps
>
caps
sk_sp
<
GrSkSLFPFactoryCache
>
FPFactoryCache
)
override
{
SkASSERT
(
caps
&
&
FPFactoryCache
)
;
SkASSERT
(
fThreadSafeProxy
)
;
if
(
!
INHERITED
:
:
init
(
std
:
:
move
(
caps
)
std
:
:
move
(
FPFactoryCache
)
)
)
{
return
false
;
}
SkASSERT
(
this
-
>
caps
(
)
)
;
return
true
;
}
GrAtlasManager
*
onGetAtlasManager
(
)
override
{
SkASSERT
(
0
)
;
return
nullptr
;
}
private
:
typedef
GrContext
INHERITED
;
}
;
sk_sp
<
GrContext
>
GrContextPriv
:
:
MakeDDL
(
const
sk_sp
<
GrContextThreadSafeProxy
>
&
proxy
)
{
sk_sp
<
GrContext
>
context
(
new
GrDDLContext
(
proxy
)
)
;
if
(
!
context
-
>
init
(
proxy
-
>
priv
(
)
.
refCaps
(
)
proxy
-
>
priv
(
)
.
fpFactoryCache
(
)
)
)
{
return
nullptr
;
}
return
context
;
}
