#
include
"
GrContext
.
h
"
#
include
"
GrCaps
.
h
"
#
include
"
GrContextPriv
.
h
"
#
include
"
GrContextThreadSafeProxyPriv
.
h
"
class
SK_API
GrDDLContext
:
public
GrContext
{
public
:
GrDDLContext
(
sk_sp
<
GrContextThreadSafeProxy
>
proxy
)
:
INHERITED
(
proxy
-
>
priv
(
)
.
backend
(
)
proxy
-
>
priv
(
)
.
contextUniqueID
(
)
)
{
fCaps
=
proxy
-
>
priv
(
)
.
refCaps
(
)
;
fFPFactoryCache
=
proxy
-
>
priv
(
)
.
fpFactoryCache
(
)
;
SkASSERT
(
fFPFactoryCache
)
;
fThreadSafeProxy
=
std
:
:
move
(
proxy
)
;
}
~
GrDDLContext
(
)
override
{
}
void
abandonContext
(
)
override
{
SkASSERT
(
0
)
;
INHERITED
:
:
abandonContext
(
)
;
}
void
releaseResourcesAndAbandonContext
(
)
override
{
SkASSERT
(
0
)
;
INHERITED
:
:
releaseResourcesAndAbandonContext
(
)
;
}
void
freeGpuResources
(
)
override
{
SkASSERT
(
0
)
;
INHERITED
:
:
freeGpuResources
(
)
;
}
protected
:
bool
init
(
const
GrContextOptions
&
options
)
override
{
SkASSERT
(
fCaps
)
;
SkASSERT
(
fThreadSafeProxy
)
;
if
(
!
INHERITED
:
:
initCommon
(
options
)
)
{
return
false
;
}
return
true
;
}
GrAtlasManager
*
onGetAtlasManager
(
)
override
{
SkASSERT
(
0
)
;
return
nullptr
;
}
private
:
typedef
GrContext
INHERITED
;
}
;
sk_sp
<
GrContext
>
GrContextPriv
:
:
MakeDDL
(
const
sk_sp
<
GrContextThreadSafeProxy
>
&
proxy
)
{
sk_sp
<
GrContext
>
context
(
new
GrDDLContext
(
proxy
)
)
;
if
(
!
context
-
>
init
(
proxy
-
>
priv
(
)
.
contextOptions
(
)
)
)
{
return
nullptr
;
}
return
context
;
}
