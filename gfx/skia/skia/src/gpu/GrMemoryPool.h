#
ifndef
GrMemoryPool_DEFINED
#
define
GrMemoryPool_DEFINED
#
include
"
GrTypes
.
h
"
class
GrMemoryPool
{
public
:
GrMemoryPool
(
size_t
preallocSize
size_t
minAllocSize
)
;
~
GrMemoryPool
(
)
;
void
*
allocate
(
size_t
size
)
;
void
release
(
void
*
p
)
;
bool
isEmpty
(
)
const
{
return
fTail
=
=
fHead
&
&
!
fHead
-
>
fLiveCount
;
}
size_t
size
(
)
const
{
return
fSize
;
}
private
:
struct
BlockHeader
;
static
BlockHeader
*
CreateBlock
(
size_t
size
)
;
static
void
DeleteBlock
(
BlockHeader
*
block
)
;
void
validate
(
)
;
struct
BlockHeader
{
#
ifdef
SK_DEBUG
uint32_t
fBlockSentinal
;
#
endif
BlockHeader
*
fNext
;
BlockHeader
*
fPrev
;
int
fLiveCount
;
intptr_t
fCurrPtr
;
intptr_t
fPrevPtr
;
size_t
fFreeSize
;
size_t
fSize
;
}
;
static
const
uint32_t
kAssignedMarker
=
0xCDCDCDCD
;
static
const
uint32_t
kFreedMarker
=
0xEFEFEFEF
;
struct
AllocHeader
{
#
ifdef
SK_DEBUG
uint32_t
fSentinal
;
#
endif
BlockHeader
*
fHeader
;
}
;
enum
{
kAlignment
=
8
kHeaderSize
=
GR_CT_ALIGN_UP
(
sizeof
(
BlockHeader
)
kAlignment
)
kPerAllocPad
=
GR_CT_ALIGN_UP
(
sizeof
(
AllocHeader
)
kAlignment
)
}
;
size_t
fSize
;
size_t
fPreallocSize
;
size_t
fMinAllocSize
;
BlockHeader
*
fHead
;
BlockHeader
*
fTail
;
#
ifdef
SK_DEBUG
int
fAllocationCnt
;
int
fAllocBlockCnt
;
#
endif
}
;
#
endif
