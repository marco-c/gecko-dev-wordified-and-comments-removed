#
ifndef
GrGpuCommandBuffer_DEFINED
#
define
GrGpuCommandBuffer_DEFINED
#
include
"
GrColor
.
h
"
class
GrFixedClip
;
class
GrGpu
;
class
GrMesh
;
class
GrPipeline
;
class
GrPrimitiveProcessor
;
class
GrRenderTarget
;
struct
SkIRect
;
class
GrGpuCommandBuffer
{
public
:
enum
class
LoadOp
{
kLoad
kClear
kDiscard
}
;
enum
class
StoreOp
{
kStore
kDiscard
}
;
struct
LoadAndStoreInfo
{
LoadOp
fLoadOp
;
StoreOp
fStoreOp
;
GrColor
fClearColor
;
}
;
GrGpuCommandBuffer
(
)
{
}
virtual
~
GrGpuCommandBuffer
(
)
{
}
virtual
void
end
(
)
=
0
;
void
submit
(
const
SkIRect
&
bounds
)
;
bool
draw
(
const
GrPipeline
&
const
GrPrimitiveProcessor
&
const
GrMesh
*
int
meshCount
)
;
void
clear
(
const
GrFixedClip
&
GrColor
GrRenderTarget
*
)
;
void
clearStencilClip
(
const
GrFixedClip
&
bool
insideStencilMask
GrRenderTarget
*
)
;
virtual
void
discard
(
GrRenderTarget
*
=
nullptr
)
=
0
;
private
:
virtual
GrGpu
*
gpu
(
)
=
0
;
virtual
void
onSubmit
(
const
SkIRect
&
bounds
)
=
0
;
virtual
void
onDraw
(
const
GrPipeline
&
const
GrPrimitiveProcessor
&
const
GrMesh
*
int
meshCount
)
=
0
;
virtual
void
onClear
(
GrRenderTarget
*
const
GrFixedClip
&
GrColor
)
=
0
;
virtual
void
onClearStencilClip
(
GrRenderTarget
*
const
GrFixedClip
&
bool
insideStencilMask
)
=
0
;
}
;
#
endif
