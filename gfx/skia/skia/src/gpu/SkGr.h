#
ifndef
SkGr_DEFINED
#
define
SkGr_DEFINED
#
include
"
GrBlend
.
h
"
#
include
"
GrColor
.
h
"
#
include
"
GrSamplerParams
.
h
"
#
include
"
GrTypes
.
h
"
#
include
"
SkCanvas
.
h
"
#
include
"
SkColor
.
h
"
#
include
"
SkColorPriv
.
h
"
#
include
"
SkFilterQuality
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkMatrix
.
h
"
#
include
"
SkPM4f
.
h
"
#
include
"
SkVertices
.
h
"
#
include
"
SkXfermodePriv
.
h
"
class
GrCaps
;
class
GrColorSpaceXform
;
class
GrContext
;
class
GrRenderTargetContext
;
class
GrFragmentProcessor
;
class
GrPaint
;
class
GrResourceProvider
;
class
GrTextureProxy
;
class
GrUniqueKey
;
class
SkBitmap
;
class
SkData
;
class
SkPaint
;
class
SkPixelRef
;
class
SkPixmap
;
struct
SkIRect
;
static
inline
GrColor
SkColorToPremulGrColor
(
SkColor
c
)
{
SkPMColor
pm
=
SkPreMultiplyColor
(
c
)
;
unsigned
r
=
SkGetPackedR32
(
pm
)
;
unsigned
g
=
SkGetPackedG32
(
pm
)
;
unsigned
b
=
SkGetPackedB32
(
pm
)
;
unsigned
a
=
SkGetPackedA32
(
pm
)
;
return
GrColorPackRGBA
(
r
g
b
a
)
;
}
static
inline
GrColor
SkColorToUnpremulGrColor
(
SkColor
c
)
{
unsigned
r
=
SkColorGetR
(
c
)
;
unsigned
g
=
SkColorGetG
(
c
)
;
unsigned
b
=
SkColorGetB
(
c
)
;
unsigned
a
=
SkColorGetA
(
c
)
;
return
GrColorPackRGBA
(
r
g
b
a
)
;
}
GrColor4f
SkColorToPremulGrColor4f
(
SkColor
c
SkColorSpace
*
dstColorSpace
)
;
GrColor4f
SkColorToUnpremulGrColor4f
(
SkColor
c
SkColorSpace
*
dstColorSpace
)
;
GrColor4f
SkColorToPremulGrColor4f
(
SkColor
c
SkColorSpace
*
dstColorSpace
GrColorSpaceXform
*
gamutXform
)
;
GrColor4f
SkColorToUnpremulGrColor4f
(
SkColor
c
SkColorSpace
*
dstColorSpace
GrColorSpaceXform
*
gamutXform
)
;
static
inline
GrColor
SkColorAlphaToGrColor
(
SkColor
c
)
{
U8CPU
a
=
SkColorGetA
(
c
)
;
return
GrColorPackRGBA
(
a
a
a
a
)
;
}
static
inline
SkPM4f
GrColor4fToSkPM4f
(
const
GrColor4f
&
c
)
{
SkPM4f
pm4f
;
pm4f
.
fVec
[
SkPM4f
:
:
R
]
=
c
.
fRGBA
[
0
]
;
pm4f
.
fVec
[
SkPM4f
:
:
G
]
=
c
.
fRGBA
[
1
]
;
pm4f
.
fVec
[
SkPM4f
:
:
B
]
=
c
.
fRGBA
[
2
]
;
pm4f
.
fVec
[
SkPM4f
:
:
A
]
=
c
.
fRGBA
[
3
]
;
return
pm4f
;
}
static
inline
GrColor4f
SkPM4fToGrColor4f
(
const
SkPM4f
&
c
)
{
return
GrColor4f
{
c
.
r
(
)
c
.
g
(
)
c
.
b
(
)
c
.
a
(
)
}
;
}
bool
SkPaintToGrPaint
(
GrContext
*
GrRenderTargetContext
*
const
SkPaint
&
skPaint
const
SkMatrix
&
viewM
GrPaint
*
grPaint
)
;
bool
SkPaintToGrPaintNoShader
(
GrContext
*
context
GrRenderTargetContext
*
rtc
const
SkPaint
&
skPaint
GrPaint
*
grPaint
)
;
bool
SkPaintToGrPaintReplaceShader
(
GrContext
*
GrRenderTargetContext
*
const
SkPaint
&
skPaint
sk_sp
<
GrFragmentProcessor
>
shaderFP
GrPaint
*
grPaint
)
;
bool
SkPaintToGrPaintWithXfermode
(
GrContext
*
context
GrRenderTargetContext
*
rtc
const
SkPaint
&
skPaint
const
SkMatrix
&
viewM
SkBlendMode
primColorMode
bool
primitiveIsSrc
GrPaint
*
grPaint
)
;
inline
bool
SkPaintToGrPaintWithPrimitiveColor
(
GrContext
*
context
GrRenderTargetContext
*
rtc
const
SkPaint
&
skPaint
GrPaint
*
grPaint
)
{
return
SkPaintToGrPaintWithXfermode
(
context
rtc
skPaint
SkMatrix
:
:
I
(
)
SkBlendMode
:
:
kDst
false
grPaint
)
;
}
bool
SkPaintToGrPaintWithTexture
(
GrContext
*
context
GrRenderTargetContext
*
rtc
const
SkPaint
&
paint
const
SkMatrix
&
viewM
sk_sp
<
GrFragmentProcessor
>
fp
bool
textureIsAlphaOnly
GrPaint
*
grPaint
)
;
GrSurfaceDesc
GrImageInfoToSurfaceDesc
(
const
SkImageInfo
&
const
GrCaps
&
)
;
GrPixelConfig
SkImageInfo2GrPixelConfig
(
const
SkImageInfo
&
info
const
GrCaps
&
caps
)
;
bool
GrPixelConfigToColorType
(
GrPixelConfig
SkColorType
*
)
;
GrSamplerParams
:
:
FilterMode
GrSkFilterQualityToGrFilterMode
(
SkFilterQuality
paintFilterQuality
const
SkMatrix
&
viewM
const
SkMatrix
&
localM
bool
*
doBicubic
)
;
static
inline
GrPrimitiveType
SkVertexModeToGrPrimitiveType
(
SkVertices
:
:
VertexMode
mode
)
{
switch
(
mode
)
{
case
SkVertices
:
:
kTriangles_VertexMode
:
return
kTriangles_GrPrimitiveType
;
case
SkVertices
:
:
kTriangleStrip_VertexMode
:
return
kTriangleStrip_GrPrimitiveType
;
case
SkVertices
:
:
kTriangleFan_VertexMode
:
return
kTriangleFan_GrPrimitiveType
;
}
SkFAIL
(
"
Invalid
mode
"
)
;
return
kPoints_GrPrimitiveType
;
}
GR_STATIC_ASSERT
(
(
int
)
kZero_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kZero_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kOne_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kOne_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kSC_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kSC_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kISC_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kISC_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kDC_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kDC_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kIDC_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kIDC_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kSA_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kSA_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kISA_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kISA_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kDA_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kDA_Coeff
)
;
GR_STATIC_ASSERT
(
(
int
)
kIDA_GrBlendCoeff
=
=
(
int
)
SkXfermode
:
:
kIDA_Coeff
)
;
GR_STATIC_ASSERT
(
SkXfermode
:
:
kCoeffCount
=
=
10
)
;
#
define
SkXfermodeCoeffToGrBlendCoeff
(
X
)
(
(
GrBlendCoeff
)
(
X
)
)
sk_sp
<
GrTextureProxy
>
GrRefCachedBitmapTextureProxy
(
GrContext
*
const
SkBitmap
&
const
GrSamplerParams
&
SkScalar
scaleAdjust
[
2
]
)
;
sk_sp
<
GrTextureProxy
>
GrUploadBitmapToTextureProxy
(
GrResourceProvider
*
const
SkBitmap
&
)
;
sk_sp
<
GrTextureProxy
>
GrGenerateMipMapsAndUploadToTextureProxy
(
GrContext
*
const
SkBitmap
&
SkColorSpace
*
dstColorSpace
)
;
sk_sp
<
GrTextureProxy
>
GrUploadPixmapToTextureProxy
(
GrResourceProvider
*
const
SkPixmap
&
SkBudgeted
)
;
sk_sp
<
GrTextureProxy
>
GrUploadPixmapToTextureProxyNoCheck
(
GrResourceProvider
*
const
SkPixmap
&
SkBudgeted
)
;
sk_sp
<
GrTextureProxy
>
GrUploadMipMapToTextureProxy
(
GrContext
*
const
SkImageInfo
&
const
GrMipLevel
*
texels
int
mipLevelCount
SkDestinationSurfaceColorMode
colorMode
)
;
sk_sp
<
GrTextureProxy
>
GrMakeCachedBitmapProxy
(
GrResourceProvider
*
const
SkBitmap
&
bitmap
)
;
void
GrMakeKeyFromImageID
(
GrUniqueKey
*
key
uint32_t
imageID
const
SkIRect
&
imageBounds
)
;
void
GrInstallBitmapUniqueKeyInvalidator
(
const
GrUniqueKey
&
key
SkPixelRef
*
pixelRef
)
;
GrPixelConfig
GrRenderableConfigForColorSpace
(
const
SkColorSpace
*
)
;
GrPixelConfig
GrIsCompressedTextureDataSupported
(
GrContext
*
ctx
SkData
*
data
int
expectedW
int
expectedH
const
void
*
*
outStartOfDataToUpload
)
;
#
endif
