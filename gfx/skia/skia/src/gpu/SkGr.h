#
ifndef
SkGr_DEFINED
#
define
SkGr_DEFINED
#
include
"
include
/
core
/
SkCanvas
.
h
"
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkFilterQuality
.
h
"
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
core
/
SkMatrix
.
h
"
#
include
"
include
/
core
/
SkVertices
.
h
"
#
include
"
include
/
gpu
/
GrTypes
.
h
"
#
include
"
include
/
private
/
SkColorData
.
h
"
#
include
"
src
/
core
/
SkBlendModePriv
.
h
"
#
include
"
src
/
gpu
/
GrBlend
.
h
"
#
include
"
src
/
gpu
/
GrCaps
.
h
"
#
include
"
src
/
gpu
/
GrColor
.
h
"
#
include
"
src
/
gpu
/
GrSamplerState
.
h
"
class
GrCaps
;
class
GrColorInfo
;
class
GrColorSpaceXform
;
class
GrContext
;
class
GrFragmentProcessor
;
class
GrPaint
;
class
GrRecordingContext
;
class
GrResourceProvider
;
class
GrTextureProxy
;
class
GrUniqueKey
;
class
SkBitmap
;
class
SkData
;
class
SkPaint
;
class
SkPixelRef
;
class
SkPixmap
;
struct
SkIRect
;
static
inline
GrColor
SkColorToPremulGrColor
(
SkColor
c
)
{
SkPMColor
pm
=
SkPreMultiplyColor
(
c
)
;
unsigned
r
=
SkGetPackedR32
(
pm
)
;
unsigned
g
=
SkGetPackedG32
(
pm
)
;
unsigned
b
=
SkGetPackedB32
(
pm
)
;
unsigned
a
=
SkGetPackedA32
(
pm
)
;
return
GrColorPackRGBA
(
r
g
b
a
)
;
}
static
inline
GrColor
SkColorToUnpremulGrColor
(
SkColor
c
)
{
unsigned
r
=
SkColorGetR
(
c
)
;
unsigned
g
=
SkColorGetG
(
c
)
;
unsigned
b
=
SkColorGetB
(
c
)
;
unsigned
a
=
SkColorGetA
(
c
)
;
return
GrColorPackRGBA
(
r
g
b
a
)
;
}
SkPMColor4f
SkColorToPMColor4f
(
SkColor
const
GrColorInfo
&
)
;
SkColor4f
SkColor4fPrepForDst
(
SkColor4f
const
GrColorInfo
&
)
;
static
inline
bool
SkPMColor4fNeedsWideColor
(
SkPMColor4f
color
GrClampType
clampType
const
GrCaps
&
caps
)
{
return
GrClampType
:
:
kNone
=
=
clampType
&
&
caps
.
halfFloatVertexAttributeSupport
(
)
&
&
!
color
.
fitsInBytes
(
)
;
}
bool
SkPaintToGrPaint
(
GrRecordingContext
*
const
GrColorInfo
&
dstColorInfo
const
SkPaint
&
skPaint
const
SkMatrix
&
viewM
GrPaint
*
grPaint
)
;
bool
SkPaintToGrPaintNoShader
(
GrRecordingContext
*
const
GrColorInfo
&
dstColorInfo
const
SkPaint
&
skPaint
GrPaint
*
grPaint
)
;
bool
SkPaintToGrPaintReplaceShader
(
GrRecordingContext
*
const
GrColorInfo
&
dstColorInfo
const
SkPaint
&
skPaint
std
:
:
unique_ptr
<
GrFragmentProcessor
>
shaderFP
GrPaint
*
grPaint
)
;
bool
SkPaintToGrPaintWithXfermode
(
GrRecordingContext
*
const
GrColorInfo
&
dstColorInfo
const
SkPaint
&
skPaint
const
SkMatrix
&
viewM
SkBlendMode
primColorMode
GrPaint
*
grPaint
)
;
inline
bool
SkPaintToGrPaintWithPrimitiveColor
(
GrRecordingContext
*
context
const
GrColorInfo
&
dstColorInfo
const
SkPaint
&
skPaint
GrPaint
*
grPaint
)
{
return
SkPaintToGrPaintWithXfermode
(
context
dstColorInfo
skPaint
SkMatrix
:
:
I
(
)
SkBlendMode
:
:
kDst
grPaint
)
;
}
bool
SkPaintToGrPaintWithTexture
(
GrRecordingContext
*
const
GrColorInfo
&
dstColorInfo
const
SkPaint
&
skPaint
const
SkMatrix
&
viewM
std
:
:
unique_ptr
<
GrFragmentProcessor
>
fp
bool
textureIsAlphaOnly
GrPaint
*
grPaint
)
;
GrSurfaceDesc
GrImageInfoToSurfaceDesc
(
const
SkImageInfo
&
)
;
GrPixelConfig
SkColorType2GrPixelConfig
(
const
SkColorType
)
;
GrPixelConfig
SkImageInfo2GrPixelConfig
(
const
SkImageInfo
&
info
)
;
bool
GrPixelConfigToColorType
(
GrPixelConfig
SkColorType
*
)
;
GrSamplerState
:
:
Filter
GrSkFilterQualityToGrFilterMode
(
int
imageWidth
int
imageHeight
SkFilterQuality
paintFilterQuality
const
SkMatrix
&
viewM
const
SkMatrix
&
localM
bool
sharpenMipmappedTextures
bool
*
doBicubic
)
;
static
inline
GrPrimitiveType
SkVertexModeToGrPrimitiveType
(
SkVertices
:
:
VertexMode
mode
)
{
switch
(
mode
)
{
case
SkVertices
:
:
kTriangles_VertexMode
:
return
GrPrimitiveType
:
:
kTriangles
;
case
SkVertices
:
:
kTriangleStrip_VertexMode
:
return
GrPrimitiveType
:
:
kTriangleStrip
;
case
SkVertices
:
:
kTriangleFan_VertexMode
:
break
;
}
SK_ABORT
(
"
Invalid
mode
"
)
;
}
GR_STATIC_ASSERT
(
(
int
)
kZero_GrBlendCoeff
=
=
(
int
)
SkBlendModeCoeff
:
:
kZero
)
;
GR_STATIC_ASSERT
(
(
int
)
kOne_GrBlendCoeff
=
=
(
int
)
SkBlendModeCoeff
:
:
kOne
)
;
GR_STATIC_ASSERT
(
(
int
)
kSC_GrBlendCoeff
=
=
(
int
)
SkBlendModeCoeff
:
:
kSC
)
;
GR_STATIC_ASSERT
(
(
int
)
kISC_GrBlendCoeff
=
=
(
int
)
SkBlendModeCoeff
:
:
kISC
)
;
GR_STATIC_ASSERT
(
(
int
)
kDC_GrBlendCoeff
=
=
(
int
)
SkBlendModeCoeff
:
:
kDC
)
;
GR_STATIC_ASSERT
(
(
int
)
kIDC_GrBlendCoeff
=
=
(
int
)
SkBlendModeCoeff
:
:
kIDC
)
;
GR_STATIC_ASSERT
(
(
int
)
kSA_GrBlendCoeff
=
=
(
int
)
SkBlendModeCoeff
:
:
kSA
)
;
GR_STATIC_ASSERT
(
(
int
)
kISA_GrBlendCoeff
=
=
(
int
)
SkBlendModeCoeff
:
:
kISA
)
;
GR_STATIC_ASSERT
(
(
int
)
kDA_GrBlendCoeff
=
=
(
int
)
SkBlendModeCoeff
:
:
kDA
)
;
GR_STATIC_ASSERT
(
(
int
)
kIDA_GrBlendCoeff
=
=
(
int
)
SkBlendModeCoeff
:
:
kIDA
)
;
sk_sp
<
GrTextureProxy
>
GrRefCachedBitmapTextureProxy
(
GrRecordingContext
*
const
SkBitmap
&
const
GrSamplerState
&
SkScalar
scaleAdjust
[
2
]
)
;
sk_sp
<
GrTextureProxy
>
GrCopyBaseMipMapToTextureProxy
(
GrRecordingContext
*
GrTextureProxy
*
baseProxy
GrColorType
srcColorType
)
;
sk_sp
<
GrTextureProxy
>
GrMakeCachedBitmapProxy
(
GrProxyProvider
*
const
SkBitmap
&
bitmap
SkBackingFit
fit
=
SkBackingFit
:
:
kExact
)
;
sk_sp
<
GrTextureProxy
>
GrMakeCachedImageProxy
(
GrProxyProvider
*
sk_sp
<
SkImage
>
srcImage
SkBackingFit
fit
=
SkBackingFit
:
:
kExact
)
;
void
GrMakeKeyFromImageID
(
GrUniqueKey
*
key
uint32_t
imageID
const
SkIRect
&
imageBounds
)
;
void
GrInstallBitmapUniqueKeyInvalidator
(
const
GrUniqueKey
&
key
uint32_t
contextID
SkPixelRef
*
pixelRef
)
;
#
endif
