#
ifndef
GrCaps_DEFINED
#
define
GrCaps_DEFINED
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkString
.
h
"
#
include
"
include
/
gpu
/
GrDriverBugWorkarounds
.
h
"
#
include
"
include
/
private
/
GrTypesPriv
.
h
"
#
include
"
src
/
gpu
/
GrBlend
.
h
"
#
include
"
src
/
gpu
/
GrShaderCaps
.
h
"
#
include
"
src
/
gpu
/
GrSurfaceProxy
.
h
"
class
GrBackendFormat
;
class
GrBackendRenderTarget
;
class
GrBackendTexture
;
struct
GrContextOptions
;
class
GrRenderTargetProxy
;
class
GrSurface
;
class
SkJSONWriter
;
class
GrCaps
:
public
SkRefCnt
{
public
:
GrCaps
(
const
GrContextOptions
&
)
;
void
dumpJSON
(
SkJSONWriter
*
)
const
;
const
GrShaderCaps
*
shaderCaps
(
)
const
{
return
fShaderCaps
.
get
(
)
;
}
bool
npotTextureTileSupport
(
)
const
{
return
fNPOTTextureTileSupport
;
}
bool
mipMapSupport
(
)
const
{
return
fMipMapSupport
;
}
bool
gpuTracingSupport
(
)
const
{
return
fGpuTracingSupport
;
}
bool
oversizedStencilSupport
(
)
const
{
return
fOversizedStencilSupport
;
}
bool
textureBarrierSupport
(
)
const
{
return
fTextureBarrierSupport
;
}
bool
sampleLocationsSupport
(
)
const
{
return
fSampleLocationsSupport
;
}
bool
multisampleDisableSupport
(
)
const
{
return
fMultisampleDisableSupport
;
}
bool
instanceAttribSupport
(
)
const
{
return
fInstanceAttribSupport
;
}
bool
mixedSamplesSupport
(
)
const
{
return
fMixedSamplesSupport
;
}
bool
msaaResolvesAutomatically
(
)
const
{
return
fMSAAResolvesAutomatically
;
}
bool
halfFloatVertexAttributeSupport
(
)
const
{
return
fHalfFloatVertexAttributeSupport
;
}
bool
usePrimitiveRestart
(
)
const
{
return
fUsePrimitiveRestart
;
}
bool
preferClientSideDynamicBuffers
(
)
const
{
return
fPreferClientSideDynamicBuffers
;
}
bool
preferFullscreenClears
(
)
const
{
return
fPreferFullscreenClears
;
}
bool
discardStencilValuesAfterRenderPass
(
)
const
{
return
this
-
>
preferFullscreenClears
(
)
;
}
bool
preferVRAMUseOverFlushes
(
)
const
{
return
fPreferVRAMUseOverFlushes
;
}
bool
preferTrianglesOverSampleMask
(
)
const
{
return
fPreferTrianglesOverSampleMask
;
}
bool
avoidStencilBuffers
(
)
const
{
return
fAvoidStencilBuffers
;
}
bool
avoidWritePixelsFastPath
(
)
const
{
return
fAvoidWritePixelsFastPath
;
}
enum
BlendEquationSupport
{
kBasic_BlendEquationSupport
kAdvanced_BlendEquationSupport
kAdvancedCoherent_BlendEquationSupport
kLast_BlendEquationSupport
=
kAdvancedCoherent_BlendEquationSupport
}
;
BlendEquationSupport
blendEquationSupport
(
)
const
{
return
fBlendEquationSupport
;
}
bool
advancedBlendEquationSupport
(
)
const
{
return
fBlendEquationSupport
>
=
kAdvanced_BlendEquationSupport
;
}
bool
advancedCoherentBlendEquationSupport
(
)
const
{
return
kAdvancedCoherent_BlendEquationSupport
=
=
fBlendEquationSupport
;
}
bool
isAdvancedBlendEquationBlacklisted
(
GrBlendEquation
equation
)
const
{
SkASSERT
(
GrBlendEquationIsAdvanced
(
equation
)
)
;
SkASSERT
(
this
-
>
advancedBlendEquationSupport
(
)
)
;
return
SkToBool
(
fAdvBlendEqBlacklist
&
(
1
<
<
equation
)
)
;
}
enum
MapFlags
{
kNone_MapFlags
=
0x0
kCanMap_MapFlag
=
0x1
kSubset_MapFlag
=
0x2
kAsyncRead_MapFlag
=
0x4
}
;
uint32_t
mapBufferFlags
(
)
const
{
return
fMapBufferFlags
;
}
bool
reuseScratchTextures
(
)
const
{
return
fReuseScratchTextures
;
}
bool
reuseScratchBuffers
(
)
const
{
return
fReuseScratchBuffers
;
}
int
maxVertexAttributes
(
)
const
{
return
fMaxVertexAttributes
;
}
int
maxRenderTargetSize
(
)
const
{
return
fMaxRenderTargetSize
;
}
int
maxPreferredRenderTargetSize
(
)
const
{
return
fMaxPreferredRenderTargetSize
;
}
int
maxTextureSize
(
)
const
{
return
fMaxTextureSize
;
}
int
maxTileSize
(
)
const
{
SkASSERT
(
fMaxTileSize
<
=
fMaxTextureSize
)
;
return
fMaxTileSize
;
}
int
maxWindowRectangles
(
)
const
{
return
fMaxWindowRectangles
;
}
bool
isWindowRectanglesSupportedForRT
(
const
GrBackendRenderTarget
&
rt
)
const
{
return
this
-
>
maxWindowRectangles
(
)
>
0
&
&
this
-
>
onIsWindowRectanglesSupportedForRT
(
rt
)
;
}
virtual
bool
isFormatSRGB
(
const
GrBackendFormat
&
)
const
=
0
;
virtual
bool
isFormatCompressed
(
const
GrBackendFormat
&
SkImage
:
:
CompressionType
*
compressionType
=
nullptr
)
const
=
0
;
virtual
bool
isFormatTexturableAndUploadable
(
GrColorType
const
GrBackendFormat
&
)
const
=
0
;
virtual
bool
isFormatTexturable
(
const
GrBackendFormat
&
)
const
=
0
;
virtual
bool
isFormatCopyable
(
const
GrBackendFormat
&
)
const
=
0
;
virtual
int
maxRenderTargetSampleCount
(
const
GrBackendFormat
&
)
const
=
0
;
int
internalMultisampleCount
(
const
GrBackendFormat
&
format
)
const
{
return
SkTMin
(
fInternalMultisampleCount
this
-
>
maxRenderTargetSampleCount
(
format
)
)
;
}
virtual
bool
isFormatAsColorTypeRenderable
(
GrColorType
ct
const
GrBackendFormat
&
format
int
sampleCount
=
1
)
const
=
0
;
virtual
bool
isFormatRenderable
(
const
GrBackendFormat
&
format
int
sampleCount
)
const
=
0
;
virtual
int
getRenderTargetSampleCount
(
int
requestedCount
const
GrBackendFormat
&
)
const
=
0
;
virtual
size_t
bytesPerPixel
(
const
GrBackendFormat
&
)
const
=
0
;
bool
surfaceSupportsWritePixels
(
const
GrSurface
*
)
const
;
enum
class
SurfaceReadPixelsSupport
{
kSupported
kCopyToTexture2D
kUnsupported
}
;
virtual
SurfaceReadPixelsSupport
surfaceSupportsReadPixels
(
const
GrSurface
*
)
const
=
0
;
struct
SupportedWrite
{
GrColorType
fColorType
;
size_t
fOffsetAlignmentForTransferBuffer
;
}
;
virtual
SupportedWrite
supportedWritePixelsColorType
(
GrColorType
surfaceColorType
const
GrBackendFormat
&
surfaceFormat
GrColorType
srcColorType
)
const
=
0
;
struct
SupportedRead
{
GrColorType
fColorType
;
size_t
fOffsetAlignmentForTransferBuffer
;
}
;
SupportedRead
supportedReadPixelsColorType
(
GrColorType
srcColorType
const
GrBackendFormat
&
srcFormat
GrColorType
dstColorType
)
const
;
bool
writePixelsRowBytesSupport
(
)
const
{
return
fWritePixelsRowBytesSupport
;
}
bool
readPixelsRowBytesSupport
(
)
const
{
return
fReadPixelsRowBytesSupport
;
}
bool
transferBufferSupport
(
)
const
{
return
fTransferBufferSupport
;
}
bool
suppressPrints
(
)
const
{
return
fSuppressPrints
;
}
size_t
bufferMapThreshold
(
)
const
{
SkASSERT
(
fBufferMapThreshold
>
=
0
)
;
return
fBufferMapThreshold
;
}
bool
mustClearUploadedBufferData
(
)
const
{
return
fMustClearUploadedBufferData
;
}
bool
shouldInitializeTextures
(
)
const
{
return
fShouldInitializeTextures
;
}
bool
supportsAHardwareBufferImages
(
)
const
{
return
fSupportsAHardwareBufferImages
;
}
bool
wireframeMode
(
)
const
{
return
fWireframeMode
;
}
bool
fenceSyncSupport
(
)
const
{
return
fFenceSyncSupport
;
}
bool
semaphoreSupport
(
)
const
{
return
fSemaphoreSupport
;
}
bool
crossContextTextureSupport
(
)
const
{
return
fCrossContextTextureSupport
;
}
bool
canCopySurface
(
const
GrSurfaceProxy
*
dst
const
GrSurfaceProxy
*
src
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
const
;
bool
dynamicStateArrayGeometryProcessorTextureSupport
(
)
const
{
return
fDynamicStateArrayGeometryProcessorTextureSupport
;
}
bool
performPartialClearsAsDraws
(
)
const
{
return
fPerformColorClearsAsDraws
|
|
fPerformPartialClearsAsDraws
;
}
bool
performColorClearsAsDraws
(
)
const
{
return
fPerformColorClearsAsDraws
;
}
bool
performStencilClearsAsDraws
(
)
const
{
return
fPerformStencilClearsAsDraws
;
}
bool
allowCoverageCounting
(
)
const
{
return
fAllowCoverageCounting
;
}
bool
driverBlacklistCCPR
(
)
const
{
return
fDriverBlacklistCCPR
;
}
bool
driverBlacklistMSAACCPR
(
)
const
{
return
fDriverBlacklistMSAACCPR
;
}
struct
DstCopyRestrictions
{
GrSurfaceProxy
:
:
RectsMustMatch
fRectsMustMatch
=
GrSurfaceProxy
:
:
RectsMustMatch
:
:
kNo
;
bool
fMustCopyWholeSrc
=
false
;
}
;
virtual
DstCopyRestrictions
getDstCopyRestrictions
(
const
GrRenderTargetProxy
*
src
GrColorType
ct
)
const
{
return
{
}
;
}
bool
validateSurfaceParams
(
const
SkISize
&
const
GrBackendFormat
&
GrPixelConfig
GrRenderable
renderable
int
renderTargetSampleCnt
GrMipMapped
)
const
;
bool
areColorTypeAndFormatCompatible
(
GrColorType
grCT
const
GrBackendFormat
&
format
)
const
{
if
(
GrColorType
:
:
kUnknown
=
=
grCT
)
{
return
false
;
}
return
this
-
>
onAreColorTypeAndFormatCompatible
(
grCT
format
)
;
}
GrPixelConfig
getConfigFromBackendFormat
(
const
GrBackendFormat
&
format
GrColorType
grCT
)
const
{
if
(
GrColorType
:
:
kUnknown
=
=
grCT
)
{
return
kUnknown_GrPixelConfig
;
}
return
this
-
>
onGetConfigFromBackendFormat
(
format
grCT
)
;
}
virtual
GrColorType
getYUVAColorTypeFromBackendFormat
(
const
GrBackendFormat
&
bool
isAlphaChannel
)
const
=
0
;
GrBackendFormat
getDefaultBackendFormat
(
GrColorType
GrRenderable
)
const
;
virtual
GrBackendFormat
getBackendFormatFromCompressionType
(
SkImage
:
:
CompressionType
)
const
=
0
;
bool
clampToBorderSupport
(
)
const
{
return
fClampToBorderSupport
;
}
virtual
GrSwizzle
getTextureSwizzle
(
const
GrBackendFormat
&
GrColorType
)
const
=
0
;
virtual
GrSwizzle
getOutputSwizzle
(
const
GrBackendFormat
&
GrColorType
)
const
=
0
;
const
GrDriverBugWorkarounds
&
workarounds
(
)
const
{
return
fDriverBugWorkarounds
;
}
GrPixelConfig
makeConfigSpecific
(
GrPixelConfig
config
const
GrBackendFormat
&
format
)
const
{
auto
ct
=
GrPixelConfigToColorType
(
config
)
;
auto
result
=
this
-
>
getConfigFromBackendFormat
(
format
ct
)
;
SkASSERT
(
config
=
=
result
|
|
AreConfigsCompatible
(
config
result
)
)
;
return
result
;
}
#
ifdef
SK_DEBUG
static
bool
AreConfigsCompatible
(
GrPixelConfig
genericConfig
GrPixelConfig
specificConfig
)
;
#
endif
#
if
GR_TEST_UTILS
struct
TestFormatColorTypeCombination
{
GrColorType
fColorType
;
GrBackendFormat
fFormat
;
}
;
virtual
std
:
:
vector
<
TestFormatColorTypeCombination
>
getTestingCombinations
(
)
const
=
0
;
#
endif
protected
:
void
applyOptionsOverrides
(
const
GrContextOptions
&
options
)
;
sk_sp
<
GrShaderCaps
>
fShaderCaps
;
bool
fNPOTTextureTileSupport
:
1
;
bool
fMipMapSupport
:
1
;
bool
fReuseScratchTextures
:
1
;
bool
fReuseScratchBuffers
:
1
;
bool
fGpuTracingSupport
:
1
;
bool
fOversizedStencilSupport
:
1
;
bool
fTextureBarrierSupport
:
1
;
bool
fSampleLocationsSupport
:
1
;
bool
fMultisampleDisableSupport
:
1
;
bool
fInstanceAttribSupport
:
1
;
bool
fMixedSamplesSupport
:
1
;
bool
fMSAAResolvesAutomatically
:
1
;
bool
fUsePrimitiveRestart
:
1
;
bool
fPreferClientSideDynamicBuffers
:
1
;
bool
fPreferFullscreenClears
:
1
;
bool
fMustClearUploadedBufferData
:
1
;
bool
fShouldInitializeTextures
:
1
;
bool
fSupportsAHardwareBufferImages
:
1
;
bool
fHalfFloatVertexAttributeSupport
:
1
;
bool
fClampToBorderSupport
:
1
;
bool
fPerformPartialClearsAsDraws
:
1
;
bool
fPerformColorClearsAsDraws
:
1
;
bool
fPerformStencilClearsAsDraws
:
1
;
bool
fAllowCoverageCounting
:
1
;
bool
fTransferBufferSupport
:
1
;
bool
fWritePixelsRowBytesSupport
:
1
;
bool
fReadPixelsRowBytesSupport
:
1
;
bool
fDriverBlacklistCCPR
:
1
;
bool
fDriverBlacklistMSAACCPR
:
1
;
bool
fAvoidStencilBuffers
:
1
;
bool
fAvoidWritePixelsFastPath
:
1
;
bool
fPreferVRAMUseOverFlushes
:
1
;
bool
fPreferTrianglesOverSampleMask
:
1
;
bool
fFenceSyncSupport
:
1
;
bool
fSemaphoreSupport
:
1
;
bool
fCrossContextTextureSupport
:
1
;
bool
fDynamicStateArrayGeometryProcessorTextureSupport
:
1
;
BlendEquationSupport
fBlendEquationSupport
;
uint32_t
fAdvBlendEqBlacklist
;
GR_STATIC_ASSERT
(
kLast_GrBlendEquation
<
32
)
;
uint32_t
fMapBufferFlags
;
int
fBufferMapThreshold
;
int
fMaxRenderTargetSize
;
int
fMaxPreferredRenderTargetSize
;
int
fMaxVertexAttributes
;
int
fMaxTextureSize
;
int
fMaxTileSize
;
int
fMaxWindowRectangles
;
int
fInternalMultisampleCount
;
GrDriverBugWorkarounds
fDriverBugWorkarounds
;
private
:
virtual
void
onApplyOptionsOverrides
(
const
GrContextOptions
&
)
{
}
virtual
void
onDumpJSON
(
SkJSONWriter
*
)
const
{
}
virtual
bool
onSurfaceSupportsWritePixels
(
const
GrSurface
*
)
const
=
0
;
virtual
bool
onCanCopySurface
(
const
GrSurfaceProxy
*
dst
const
GrSurfaceProxy
*
src
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
const
=
0
;
virtual
GrBackendFormat
onGetDefaultBackendFormat
(
GrColorType
GrRenderable
)
const
=
0
;
virtual
bool
onIsWindowRectanglesSupportedForRT
(
const
GrBackendRenderTarget
&
)
const
{
return
true
;
}
virtual
GrPixelConfig
onGetConfigFromBackendFormat
(
const
GrBackendFormat
&
format
GrColorType
ct
)
const
=
0
;
virtual
bool
onAreColorTypeAndFormatCompatible
(
GrColorType
const
GrBackendFormat
&
)
const
=
0
;
virtual
SupportedRead
onSupportedReadPixelsColorType
(
GrColorType
srcColorType
const
GrBackendFormat
&
srcFormat
GrColorType
dstColorType
)
const
=
0
;
bool
fSuppressPrints
:
1
;
bool
fWireframeMode
:
1
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
