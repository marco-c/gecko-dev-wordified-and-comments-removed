#
ifndef
GrCaps_DEFINED
#
define
GrCaps_DEFINED
#
include
"
.
.
/
private
/
GrTypesPriv
.
h
"
#
include
"
GrBlend
.
h
"
#
include
"
GrDriverBugWorkarounds
.
h
"
#
include
"
GrShaderCaps
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkString
.
h
"
class
GrBackendFormat
;
class
GrBackendRenderTarget
;
class
GrBackendTexture
;
struct
GrContextOptions
;
class
GrRenderTargetProxy
;
class
GrSurface
;
class
GrSurfaceProxy
;
class
SkJSONWriter
;
class
GrCaps
:
public
SkRefCnt
{
public
:
GrCaps
(
const
GrContextOptions
&
)
;
void
dumpJSON
(
SkJSONWriter
*
)
const
;
const
GrShaderCaps
*
shaderCaps
(
)
const
{
return
fShaderCaps
.
get
(
)
;
}
bool
npotTextureTileSupport
(
)
const
{
return
fNPOTTextureTileSupport
;
}
bool
mipMapSupport
(
)
const
{
return
fMipMapSupport
;
}
bool
srgbSupport
(
)
const
{
return
fSRGBSupport
;
}
bool
srgbWriteControl
(
)
const
{
return
fSRGBWriteControl
;
}
bool
discardRenderTargetSupport
(
)
const
{
return
fDiscardRenderTargetSupport
;
}
bool
gpuTracingSupport
(
)
const
{
return
fGpuTracingSupport
;
}
bool
compressedTexSubImageSupport
(
)
const
{
return
fCompressedTexSubImageSupport
;
}
bool
oversizedStencilSupport
(
)
const
{
return
fOversizedStencilSupport
;
}
bool
textureBarrierSupport
(
)
const
{
return
fTextureBarrierSupport
;
}
bool
sampleLocationsSupport
(
)
const
{
return
fSampleLocationsSupport
;
}
bool
multisampleDisableSupport
(
)
const
{
return
fMultisampleDisableSupport
;
}
bool
instanceAttribSupport
(
)
const
{
return
fInstanceAttribSupport
;
}
bool
usesMixedSamples
(
)
const
{
return
fUsesMixedSamples
;
}
bool
halfFloatVertexAttributeSupport
(
)
const
{
return
fHalfFloatVertexAttributeSupport
;
}
bool
usePrimitiveRestart
(
)
const
{
return
fUsePrimitiveRestart
;
}
bool
preferClientSideDynamicBuffers
(
)
const
{
return
fPreferClientSideDynamicBuffers
;
}
bool
preferFullscreenClears
(
)
const
{
return
fPreferFullscreenClears
;
}
bool
preferVRAMUseOverFlushes
(
)
const
{
return
fPreferVRAMUseOverFlushes
;
}
bool
blacklistCoverageCounting
(
)
const
{
return
fBlacklistCoverageCounting
;
}
bool
avoidStencilBuffers
(
)
const
{
return
fAvoidStencilBuffers
;
}
bool
avoidWritePixelsFastPath
(
)
const
{
return
fAvoidWritePixelsFastPath
;
}
enum
BlendEquationSupport
{
kBasic_BlendEquationSupport
kAdvanced_BlendEquationSupport
kAdvancedCoherent_BlendEquationSupport
kLast_BlendEquationSupport
=
kAdvancedCoherent_BlendEquationSupport
}
;
BlendEquationSupport
blendEquationSupport
(
)
const
{
return
fBlendEquationSupport
;
}
bool
advancedBlendEquationSupport
(
)
const
{
return
fBlendEquationSupport
>
=
kAdvanced_BlendEquationSupport
;
}
bool
advancedCoherentBlendEquationSupport
(
)
const
{
return
kAdvancedCoherent_BlendEquationSupport
=
=
fBlendEquationSupport
;
}
bool
isAdvancedBlendEquationBlacklisted
(
GrBlendEquation
equation
)
const
{
SkASSERT
(
GrBlendEquationIsAdvanced
(
equation
)
)
;
SkASSERT
(
this
-
>
advancedBlendEquationSupport
(
)
)
;
return
SkToBool
(
fAdvBlendEqBlacklist
&
(
1
<
<
equation
)
)
;
}
enum
MapFlags
{
kNone_MapFlags
=
0x0
kCanMap_MapFlag
=
0x1
kSubset_MapFlag
=
0x2
}
;
uint32_t
mapBufferFlags
(
)
const
{
return
fMapBufferFlags
;
}
bool
reuseScratchTextures
(
)
const
{
return
fReuseScratchTextures
;
}
bool
reuseScratchBuffers
(
)
const
{
return
fReuseScratchBuffers
;
}
int
maxVertexAttributes
(
)
const
{
return
fMaxVertexAttributes
;
}
int
maxRenderTargetSize
(
)
const
{
return
fMaxRenderTargetSize
;
}
int
maxPreferredRenderTargetSize
(
)
const
{
return
fMaxPreferredRenderTargetSize
;
}
int
maxTextureSize
(
)
const
{
return
fMaxTextureSize
;
}
int
maxTileSize
(
)
const
{
SkASSERT
(
fMaxTileSize
<
=
fMaxTextureSize
)
;
return
fMaxTileSize
;
}
int
maxWindowRectangles
(
)
const
{
return
fMaxWindowRectangles
;
}
bool
isWindowRectanglesSupportedForRT
(
const
GrBackendRenderTarget
&
rt
)
const
{
return
this
-
>
maxWindowRectangles
(
)
>
0
&
&
this
-
>
onIsWindowRectanglesSupportedForRT
(
rt
)
;
}
int
maxClipAnalyticFPs
(
)
const
{
return
fMaxClipAnalyticFPs
;
}
virtual
bool
isConfigTexturable
(
GrPixelConfig
)
const
=
0
;
virtual
bool
isConfigCopyable
(
GrPixelConfig
)
const
=
0
;
virtual
int
maxRenderTargetSampleCount
(
GrPixelConfig
)
const
=
0
;
bool
isConfigRenderable
(
GrPixelConfig
config
)
const
{
return
this
-
>
maxRenderTargetSampleCount
(
config
)
>
0
;
}
bool
isConfigRenderable
(
GrPixelConfig
config
bool
withMSAA
)
const
{
return
this
-
>
maxRenderTargetSampleCount
(
config
)
>
(
withMSAA
?
1
:
0
)
;
}
virtual
int
getRenderTargetSampleCount
(
int
requestedCount
GrPixelConfig
)
const
=
0
;
int
getSampleCount
(
int
requestedCount
GrPixelConfig
config
)
const
{
return
this
-
>
getRenderTargetSampleCount
(
requestedCount
config
)
;
}
bool
surfaceSupportsWritePixels
(
const
GrSurface
*
)
const
;
virtual
bool
surfaceSupportsReadPixels
(
const
GrSurface
*
)
const
=
0
;
virtual
GrColorType
supportedWritePixelsColorType
(
GrPixelConfig
config
GrColorType
)
const
{
return
GrPixelConfigToColorType
(
config
)
;
}
virtual
GrColorType
supportedReadPixelsColorType
(
GrPixelConfig
config
GrColorType
)
const
{
return
GrPixelConfigToColorType
(
config
)
;
}
bool
suppressPrints
(
)
const
{
return
fSuppressPrints
;
}
size_t
bufferMapThreshold
(
)
const
{
SkASSERT
(
fBufferMapThreshold
>
=
0
)
;
return
fBufferMapThreshold
;
}
bool
mustClearUploadedBufferData
(
)
const
{
return
fMustClearUploadedBufferData
;
}
bool
supportsAHardwareBufferImages
(
)
const
{
return
fSupportsAHardwareBufferImages
;
}
bool
wireframeMode
(
)
const
{
return
fWireframeMode
;
}
bool
fenceSyncSupport
(
)
const
{
return
fFenceSyncSupport
;
}
bool
crossContextTextureSupport
(
)
const
{
return
fCrossContextTextureSupport
;
}
bool
canCopySurface
(
const
GrSurfaceProxy
*
dst
const
GrSurfaceProxy
*
src
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
const
;
bool
dynamicStateArrayGeometryProcessorTextureSupport
(
)
const
{
return
fDynamicStateArrayGeometryProcessorTextureSupport
;
}
bool
performPartialClearsAsDraws
(
)
const
{
return
fPerformColorClearsAsDraws
|
|
fPerformPartialClearsAsDraws
;
}
bool
performColorClearsAsDraws
(
)
const
{
return
fPerformColorClearsAsDraws
;
}
bool
performStencilClearsAsDraws
(
)
const
{
return
fPerformStencilClearsAsDraws
;
}
virtual
bool
initDescForDstCopy
(
const
GrRenderTargetProxy
*
src
GrSurfaceDesc
*
desc
GrSurfaceOrigin
*
origin
bool
*
rectsMustMatch
bool
*
disallowSubrect
)
const
=
0
;
bool
validateSurfaceDesc
(
const
GrSurfaceDesc
&
GrMipMapped
)
const
;
virtual
GrPixelConfig
validateBackendRenderTarget
(
const
GrBackendRenderTarget
&
SkColorType
)
const
=
0
;
virtual
GrPixelConfig
getConfigFromBackendFormat
(
const
GrBackendFormat
&
format
SkColorType
ct
)
const
=
0
;
virtual
GrPixelConfig
getYUVAConfigFromBackendFormat
(
const
GrBackendFormat
&
format
)
const
=
0
;
virtual
GrBackendFormat
getBackendFormatFromGrColorType
(
GrColorType
ct
GrSRGBEncoded
srgbEncoded
)
const
=
0
;
GrBackendFormat
getBackendFormatFromColorType
(
SkColorType
ct
)
const
;
bool
clampToBorderSupport
(
)
const
{
return
fClampToBorderSupport
;
}
const
GrDriverBugWorkarounds
&
workarounds
(
)
const
{
return
fDriverBugWorkarounds
;
}
protected
:
void
applyOptionsOverrides
(
const
GrContextOptions
&
options
)
;
sk_sp
<
GrShaderCaps
>
fShaderCaps
;
bool
fNPOTTextureTileSupport
:
1
;
bool
fMipMapSupport
:
1
;
bool
fSRGBSupport
:
1
;
bool
fSRGBWriteControl
:
1
;
bool
fDiscardRenderTargetSupport
:
1
;
bool
fReuseScratchTextures
:
1
;
bool
fReuseScratchBuffers
:
1
;
bool
fGpuTracingSupport
:
1
;
bool
fCompressedTexSubImageSupport
:
1
;
bool
fOversizedStencilSupport
:
1
;
bool
fTextureBarrierSupport
:
1
;
bool
fSampleLocationsSupport
:
1
;
bool
fMultisampleDisableSupport
:
1
;
bool
fInstanceAttribSupport
:
1
;
bool
fUsesMixedSamples
:
1
;
bool
fUsePrimitiveRestart
:
1
;
bool
fPreferClientSideDynamicBuffers
:
1
;
bool
fPreferFullscreenClears
:
1
;
bool
fMustClearUploadedBufferData
:
1
;
bool
fSupportsAHardwareBufferImages
:
1
;
bool
fHalfFloatVertexAttributeSupport
:
1
;
bool
fClampToBorderSupport
:
1
;
bool
fPerformPartialClearsAsDraws
:
1
;
bool
fPerformColorClearsAsDraws
:
1
;
bool
fPerformStencilClearsAsDraws
:
1
;
bool
fBlacklistCoverageCounting
:
1
;
bool
fAvoidStencilBuffers
:
1
;
bool
fAvoidWritePixelsFastPath
:
1
;
bool
fPreferVRAMUseOverFlushes
:
1
;
bool
fFenceSyncSupport
:
1
;
bool
fCrossContextTextureSupport
:
1
;
bool
fDynamicStateArrayGeometryProcessorTextureSupport
:
1
;
BlendEquationSupport
fBlendEquationSupport
;
uint32_t
fAdvBlendEqBlacklist
;
GR_STATIC_ASSERT
(
kLast_GrBlendEquation
<
32
)
;
uint32_t
fMapBufferFlags
;
int
fBufferMapThreshold
;
int
fMaxRenderTargetSize
;
int
fMaxPreferredRenderTargetSize
;
int
fMaxVertexAttributes
;
int
fMaxTextureSize
;
int
fMaxTileSize
;
int
fMaxWindowRectangles
;
int
fMaxClipAnalyticFPs
;
GrDriverBugWorkarounds
fDriverBugWorkarounds
;
private
:
virtual
void
onApplyOptionsOverrides
(
const
GrContextOptions
&
)
{
}
virtual
void
onDumpJSON
(
SkJSONWriter
*
)
const
{
}
virtual
bool
onSurfaceSupportsWritePixels
(
const
GrSurface
*
)
const
=
0
;
virtual
bool
onCanCopySurface
(
const
GrSurfaceProxy
*
dst
const
GrSurfaceProxy
*
src
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
const
=
0
;
virtual
bool
onIsWindowRectanglesSupportedForRT
(
const
GrBackendRenderTarget
&
)
const
{
return
true
;
}
bool
fSuppressPrints
:
1
;
bool
fWireframeMode
:
1
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
