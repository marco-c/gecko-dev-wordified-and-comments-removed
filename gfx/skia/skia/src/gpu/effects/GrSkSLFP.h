#
ifndef
GrSkSLFP_DEFINED
#
define
GrSkSLFP_DEFINED
#
include
"
GrCaps
.
h
"
#
include
"
GrFragmentProcessor
.
h
"
#
include
"
GrCoordTransform
.
h
"
#
include
"
GrShaderCaps
.
h
"
#
include
"
SkSLCompiler
.
h
"
#
include
"
SkSLPipelineStageCodeGenerator
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
.
.
/
private
/
GrSkSLFPFactoryCache
.
h
"
#
include
<
atomic
>
#
if
GR_TEST_UTILS
#
define
GR_FP_SRC_STRING
const
char
*
#
else
#
define
GR_FP_SRC_STRING
static
const
char
*
#
endif
class
GrContext_Base
;
class
GrSkSLFPFactory
;
class
GrSkSLFP
:
public
GrFragmentProcessor
{
public
:
static
int
NewIndex
(
)
{
static
std
:
:
atomic
<
int
>
nextIndex
{
0
}
;
return
nextIndex
+
+
;
}
static
std
:
:
unique_ptr
<
GrSkSLFP
>
Make
(
GrContext_Base
*
context
int
index
const
char
*
name
const
char
*
sksl
const
void
*
inputs
size_t
inputSize
)
;
static
std
:
:
unique_ptr
<
GrSkSLFP
>
Make
(
GrContext_Base
*
context
int
index
const
char
*
name
SkString
sksl
const
void
*
inputs
size_t
inputSize
)
;
const
char
*
name
(
)
const
override
;
void
addChild
(
std
:
:
unique_ptr
<
GrFragmentProcessor
>
child
)
;
std
:
:
unique_ptr
<
GrFragmentProcessor
>
clone
(
)
const
override
;
private
:
GrSkSLFP
(
sk_sp
<
GrSkSLFPFactoryCache
>
factoryCache
const
GrShaderCaps
*
shaderCaps
int
fIndex
const
char
*
name
const
char
*
sksl
SkString
skslString
const
void
*
inputs
size_t
inputSize
)
;
GrSkSLFP
(
const
GrSkSLFP
&
other
)
;
GrGLSLFragmentProcessor
*
onCreateGLSLInstance
(
)
const
override
;
void
onGetGLSLProcessorKey
(
const
GrShaderCaps
&
GrProcessorKeyBuilder
*
)
const
override
;
bool
onIsEqual
(
const
GrFragmentProcessor
&
)
const
override
;
void
createFactory
(
)
const
;
sk_sp
<
GrSkSLFPFactoryCache
>
fFactoryCache
;
const
sk_sp
<
GrShaderCaps
>
fShaderCaps
;
mutable
sk_sp
<
GrSkSLFPFactory
>
fFactory
;
int
fIndex
;
const
char
*
fName
;
SkString
fSkSLString
;
const
char
*
fSkSL
;
const
std
:
:
unique_ptr
<
int8_t
[
]
>
fInputs
;
size_t
fInputSize
;
mutable
SkSL
:
:
String
fKey
;
GR_DECLARE_FRAGMENT_PROCESSOR_TEST
typedef
GrFragmentProcessor
INHERITED
;
friend
class
GrGLSLSkSLFP
;
friend
class
GrSkSLFPFactory
;
}
;
class
GrSkSLFPFactory
:
public
SkNVRefCnt
<
GrSkSLFPFactory
>
{
public
:
GrSkSLFPFactory
(
const
char
*
name
const
GrShaderCaps
*
shaderCaps
const
char
*
sksl
)
;
const
SkSL
:
:
Program
*
getSpecialization
(
const
SkSL
:
:
String
&
key
const
void
*
inputs
size_t
inputSize
)
;
const
char
*
fName
;
SkSL
:
:
Compiler
fCompiler
;
std
:
:
shared_ptr
<
SkSL
:
:
Program
>
fBaseProgram
;
std
:
:
vector
<
const
SkSL
:
:
Variable
*
>
fInputVars
;
std
:
:
vector
<
const
SkSL
:
:
Variable
*
>
fKeyVars
;
std
:
:
unordered_map
<
SkSL
:
:
String
std
:
:
unique_ptr
<
const
SkSL
:
:
Program
>
>
fSpecializations
;
friend
class
GrSkSLFP
;
}
;
#
endif
