#
include
"
effects
/
GrDisableColorXP
.
h
"
#
include
"
GrPipeline
.
h
"
#
include
"
GrProcessor
.
h
"
#
include
"
glsl
/
GrGLSLFragmentShaderBuilder
.
h
"
#
include
"
glsl
/
GrGLSLProgramDataManager
.
h
"
#
include
"
glsl
/
GrGLSLXferProcessor
.
h
"
class
DisableColorXP
:
public
GrXferProcessor
{
public
:
DisableColorXP
(
)
:
INHERITED
(
kDisableColorXP_ClassID
)
{
}
const
char
*
name
(
)
const
override
{
return
"
Disable
Color
"
;
}
GrGLSLXferProcessor
*
createGLSLInstance
(
)
const
override
;
private
:
void
onGetGLSLProcessorKey
(
const
GrShaderCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
override
;
void
onGetBlendInfo
(
GrXferProcessor
:
:
BlendInfo
*
blendInfo
)
const
override
;
bool
onIsEqual
(
const
GrXferProcessor
&
xpBase
)
const
override
{
return
true
;
}
typedef
GrXferProcessor
INHERITED
;
}
;
class
GLDisableColorXP
:
public
GrGLSLXferProcessor
{
public
:
GLDisableColorXP
(
const
GrProcessor
&
)
{
}
~
GLDisableColorXP
(
)
override
{
}
static
void
GenKey
(
const
GrProcessor
&
const
GrShaderCaps
&
GrProcessorKeyBuilder
*
)
{
}
private
:
void
emitOutputsForBlendState
(
const
EmitArgs
&
args
)
override
{
GrGLSLXPFragmentBuilder
*
fragBuilder
=
args
.
fXPFragBuilder
;
fragBuilder
-
>
codeAppendf
(
"
%
s
=
half4
(
0
)
;
"
args
.
fOutputPrimary
)
;
}
void
onSetData
(
const
GrGLSLProgramDataManager
&
const
GrXferProcessor
&
)
override
{
}
typedef
GrGLSLXferProcessor
INHERITED
;
}
;
void
DisableColorXP
:
:
onGetGLSLProcessorKey
(
const
GrShaderCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
{
GLDisableColorXP
:
:
GenKey
(
*
this
caps
b
)
;
}
GrGLSLXferProcessor
*
DisableColorXP
:
:
createGLSLInstance
(
)
const
{
return
new
GLDisableColorXP
(
*
this
)
;
}
void
DisableColorXP
:
:
onGetBlendInfo
(
GrXferProcessor
:
:
BlendInfo
*
blendInfo
)
const
{
blendInfo
-
>
fWriteColor
=
false
;
}
sk_sp
<
const
GrXferProcessor
>
GrDisableColorXPFactory
:
:
makeXferProcessor
(
const
GrProcessorAnalysisColor
&
GrProcessorAnalysisCoverage
bool
hasMixedSamples
const
GrCaps
&
caps
GrPixelConfigIsClamped
dstIsClamped
)
const
{
return
sk_sp
<
const
GrXferProcessor
>
(
new
DisableColorXP
)
;
}
GR_DEFINE_XP_FACTORY_TEST
(
GrDisableColorXPFactory
)
;
#
if
GR_TEST_UTILS
const
GrXPFactory
*
GrDisableColorXPFactory
:
:
TestGet
(
GrProcessorTestData
*
)
{
return
GrDisableColorXPFactory
:
:
Get
(
)
;
}
#
endif
