#
ifndef
GrGaussianConvolutionFragmentProcessor_DEFINED
#
define
GrGaussianConvolutionFragmentProcessor_DEFINED
#
include
"
Gr1DKernelEffect
.
h
"
class
GrGaussianConvolutionFragmentProcessor
:
public
Gr1DKernelEffect
{
public
:
static
sk_sp
<
GrFragmentProcessor
>
Make
(
GrResourceProvider
*
resourceProvider
sk_sp
<
GrTextureProxy
>
proxy
Direction
dir
int
halfWidth
float
gaussianSigma
bool
useBounds
int
*
bounds
)
{
return
sk_sp
<
GrFragmentProcessor
>
(
new
GrGaussianConvolutionFragmentProcessor
(
resourceProvider
std
:
:
move
(
proxy
)
dir
halfWidth
gaussianSigma
useBounds
bounds
)
)
;
}
~
GrGaussianConvolutionFragmentProcessor
(
)
override
;
const
float
*
kernel
(
)
const
{
return
fKernel
;
}
const
int
*
bounds
(
)
const
{
return
fBounds
;
}
bool
useBounds
(
)
const
{
return
fUseBounds
;
}
const
char
*
name
(
)
const
override
{
return
"
GaussianConvolution
"
;
}
static
const
int
kMaxKernelRadius
=
12
;
static
const
int
kMaxKernelWidth
=
2
*
kMaxKernelRadius
+
1
;
private
:
GrGaussianConvolutionFragmentProcessor
(
GrResourceProvider
*
sk_sp
<
GrTextureProxy
>
Direction
int
halfWidth
float
gaussianSigma
bool
useBounds
int
bounds
[
2
]
)
;
GrGLSLFragmentProcessor
*
onCreateGLSLInstance
(
)
const
override
;
void
onGetGLSLProcessorKey
(
const
GrShaderCaps
&
GrProcessorKeyBuilder
*
)
const
override
;
bool
onIsEqual
(
const
GrFragmentProcessor
&
)
const
override
;
GR_DECLARE_FRAGMENT_PROCESSOR_TEST
;
float
fKernel
[
kMaxKernelWidth
]
;
bool
fUseBounds
;
int
fBounds
[
2
]
;
typedef
Gr1DKernelEffect
INHERITED
;
}
;
#
endif
