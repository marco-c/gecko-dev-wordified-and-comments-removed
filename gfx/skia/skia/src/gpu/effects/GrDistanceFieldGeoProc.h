#
ifndef
GrDistanceFieldGeoProc_DEFINED
#
define
GrDistanceFieldGeoProc_DEFINED
#
include
"
GrProcessor
.
h
"
#
include
"
GrGeometryProcessor
.
h
"
class
GrGLDistanceFieldA8TextGeoProc
;
class
GrGLDistanceFieldPathGeoProc
;
class
GrGLDistanceFieldLCDTextGeoProc
;
class
GrInvariantOutput
;
enum
GrDistanceFieldEffectFlags
{
kSimilarity_DistanceFieldEffectFlag
=
0x01
kScaleOnly_DistanceFieldEffectFlag
=
0x02
kPerspective_DistanceFieldEffectFlag
=
0x04
kUseLCD_DistanceFieldEffectFlag
=
0x08
kBGR_DistanceFieldEffectFlag
=
0x10
kPortrait_DistanceFieldEffectFlag
=
0x20
kGammaCorrect_DistanceFieldEffectFlag
=
0x40
kAliased_DistanceFieldEffectFlag
=
0x80
kInvalid_DistanceFieldEffectFlag
=
0x100
kUniformScale_DistanceFieldEffectMask
=
kSimilarity_DistanceFieldEffectFlag
|
kScaleOnly_DistanceFieldEffectFlag
kNonLCD_DistanceFieldEffectMask
=
kSimilarity_DistanceFieldEffectFlag
|
kScaleOnly_DistanceFieldEffectFlag
|
kPerspective_DistanceFieldEffectFlag
|
kGammaCorrect_DistanceFieldEffectFlag
|
kAliased_DistanceFieldEffectFlag
kLCD_DistanceFieldEffectMask
=
kSimilarity_DistanceFieldEffectFlag
|
kScaleOnly_DistanceFieldEffectFlag
|
kPerspective_DistanceFieldEffectFlag
|
kUseLCD_DistanceFieldEffectFlag
|
kBGR_DistanceFieldEffectFlag
|
kGammaCorrect_DistanceFieldEffectFlag
}
;
class
GrDistanceFieldA8TextGeoProc
:
public
GrGeometryProcessor
{
public
:
static
constexpr
int
kMaxTextures
=
4
;
#
ifdef
SK_GAMMA_APPLY_TO_A8
static
sk_sp
<
GrGeometryProcessor
>
Make
(
const
GrShaderCaps
&
caps
const
sk_sp
<
GrTextureProxy
>
*
proxies
int
numActiveProxies
const
GrSamplerState
&
params
float
lum
uint32_t
flags
const
SkMatrix
&
localMatrixIfUsesLocalCoords
)
{
return
sk_sp
<
GrGeometryProcessor
>
(
new
GrDistanceFieldA8TextGeoProc
(
caps
proxies
numActiveProxies
params
lum
flags
localMatrixIfUsesLocalCoords
)
)
;
}
#
else
static
sk_sp
<
GrGeometryProcessor
>
Make
(
const
GrShaderCaps
&
caps
const
sk_sp
<
GrTextureProxy
>
*
proxies
int
numActiveProxies
const
GrSamplerState
&
params
uint32_t
flags
const
SkMatrix
&
localMatrixIfUsesLocalCoords
)
{
return
sk_sp
<
GrGeometryProcessor
>
(
new
GrDistanceFieldA8TextGeoProc
(
caps
proxies
numActiveProxies
params
flags
localMatrixIfUsesLocalCoords
)
)
;
}
#
endif
~
GrDistanceFieldA8TextGeoProc
(
)
override
{
}
const
char
*
name
(
)
const
override
{
return
"
DistanceFieldA8Text
"
;
}
const
Attribute
&
inPosition
(
)
const
{
return
fInPosition
;
}
const
Attribute
&
inColor
(
)
const
{
return
kInColor
;
}
const
Attribute
&
inTextureCoords
(
)
const
{
return
fInTextureCoords
;
}
const
SkMatrix
&
localMatrix
(
)
const
{
return
fLocalMatrix
;
}
#
ifdef
SK_GAMMA_APPLY_TO_A8
float
getDistanceAdjust
(
)
const
{
return
fDistanceAdjust
;
}
#
endif
uint32_t
getFlags
(
)
const
{
return
fFlags
;
}
const
SkISize
&
atlasSize
(
)
const
{
return
fAtlasSize
;
}
void
addNewProxies
(
const
sk_sp
<
GrTextureProxy
>
*
proxies
int
numProxies
const
GrSamplerState
&
)
;
void
getGLSLProcessorKey
(
const
GrShaderCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
override
;
GrGLSLPrimitiveProcessor
*
createGLSLInstance
(
const
GrShaderCaps
&
)
const
override
;
private
:
GrDistanceFieldA8TextGeoProc
(
const
GrShaderCaps
&
caps
const
sk_sp
<
GrTextureProxy
>
*
proxies
int
numActiveProxies
const
GrSamplerState
&
params
#
ifdef
SK_GAMMA_APPLY_TO_A8
float
distanceAdjust
#
endif
uint32_t
flags
const
SkMatrix
&
localMatrix
)
;
const
Attribute
&
onVertexAttribute
(
int
i
)
const
override
{
return
IthAttribute
(
i
fInPosition
kInColor
fInTextureCoords
)
;
}
const
TextureSampler
&
onTextureSampler
(
int
i
)
const
override
{
return
fTextureSamplers
[
i
]
;
}
TextureSampler
fTextureSamplers
[
kMaxTextures
]
;
SkISize
fAtlasSize
;
SkMatrix
fLocalMatrix
;
Attribute
fInPosition
;
Attribute
fInTextureCoords
;
uint32_t
fFlags
;
#
ifdef
SK_GAMMA_APPLY_TO_A8
float
fDistanceAdjust
;
#
endif
static
constexpr
Attribute
kInColor
=
{
"
inColor
"
kUByte4_norm_GrVertexAttribType
kHalf4_GrSLType
}
;
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
typedef
GrGeometryProcessor
INHERITED
;
}
;
class
GrDistanceFieldPathGeoProc
:
public
GrGeometryProcessor
{
public
:
static
constexpr
int
kMaxTextures
=
4
;
static
sk_sp
<
GrGeometryProcessor
>
Make
(
const
GrShaderCaps
&
caps
const
SkMatrix
&
matrix
const
sk_sp
<
GrTextureProxy
>
*
proxies
int
numActiveProxies
const
GrSamplerState
&
params
uint32_t
flags
)
{
return
sk_sp
<
GrGeometryProcessor
>
(
new
GrDistanceFieldPathGeoProc
(
caps
matrix
proxies
numActiveProxies
params
flags
)
)
;
}
~
GrDistanceFieldPathGeoProc
(
)
override
{
}
const
char
*
name
(
)
const
override
{
return
"
DistanceFieldPath
"
;
}
const
Attribute
&
inPosition
(
)
const
{
return
kInPosition
;
}
const
Attribute
&
inColor
(
)
const
{
return
kInColor
;
}
const
Attribute
&
inTextureCoords
(
)
const
{
return
fInTextureCoords
;
}
const
SkMatrix
&
matrix
(
)
const
{
return
fMatrix
;
}
uint32_t
getFlags
(
)
const
{
return
fFlags
;
}
const
SkISize
&
atlasSize
(
)
const
{
return
fAtlasSize
;
}
void
addNewProxies
(
const
sk_sp
<
GrTextureProxy
>
*
int
numActiveProxies
const
GrSamplerState
&
)
;
void
getGLSLProcessorKey
(
const
GrShaderCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
override
;
GrGLSLPrimitiveProcessor
*
createGLSLInstance
(
const
GrShaderCaps
&
)
const
override
;
private
:
GrDistanceFieldPathGeoProc
(
const
GrShaderCaps
&
caps
const
SkMatrix
&
matrix
const
sk_sp
<
GrTextureProxy
>
*
proxies
int
numActiveProxies
const
GrSamplerState
&
uint32_t
flags
)
;
const
Attribute
&
onVertexAttribute
(
int
i
)
const
override
;
const
TextureSampler
&
onTextureSampler
(
int
i
)
const
override
{
return
fTextureSamplers
[
i
]
;
}
SkMatrix
fMatrix
;
TextureSampler
fTextureSamplers
[
kMaxTextures
]
;
SkISize
fAtlasSize
;
Attribute
fInTextureCoords
;
uint32_t
fFlags
;
static
constexpr
Attribute
kInPosition
=
{
"
inPosition
"
kFloat2_GrVertexAttribType
kFloat2_GrSLType
}
;
static
constexpr
Attribute
kInColor
=
{
"
inColor
"
kUByte4_norm_GrVertexAttribType
kHalf4_GrSLType
}
;
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
typedef
GrGeometryProcessor
INHERITED
;
}
;
class
GrDistanceFieldLCDTextGeoProc
:
public
GrGeometryProcessor
{
public
:
static
constexpr
int
kMaxTextures
=
4
;
struct
DistanceAdjust
{
SkScalar
fR
fG
fB
;
static
DistanceAdjust
Make
(
SkScalar
r
SkScalar
g
SkScalar
b
)
{
DistanceAdjust
result
;
result
.
fR
=
r
;
result
.
fG
=
g
;
result
.
fB
=
b
;
return
result
;
}
bool
operator
=
=
(
const
DistanceAdjust
&
wa
)
const
{
return
(
fR
=
=
wa
.
fR
&
&
fG
=
=
wa
.
fG
&
&
fB
=
=
wa
.
fB
)
;
}
bool
operator
!
=
(
const
DistanceAdjust
&
wa
)
const
{
return
!
(
*
this
=
=
wa
)
;
}
}
;
static
sk_sp
<
GrGeometryProcessor
>
Make
(
const
GrShaderCaps
&
caps
const
sk_sp
<
GrTextureProxy
>
*
proxies
int
numActiveProxies
const
GrSamplerState
&
params
DistanceAdjust
distanceAdjust
uint32_t
flags
const
SkMatrix
&
localMatrixIfUsesLocalCoords
)
{
return
sk_sp
<
GrGeometryProcessor
>
(
new
GrDistanceFieldLCDTextGeoProc
(
caps
proxies
numActiveProxies
params
distanceAdjust
flags
localMatrixIfUsesLocalCoords
)
)
;
}
~
GrDistanceFieldLCDTextGeoProc
(
)
override
{
}
const
char
*
name
(
)
const
override
{
return
"
DistanceFieldLCDText
"
;
}
const
Attribute
&
inPosition
(
)
const
{
return
fInPosition
;
}
const
Attribute
&
inColor
(
)
const
{
return
kInColor
;
}
const
Attribute
&
inTextureCoords
(
)
const
{
return
fInTextureCoords
;
}
DistanceAdjust
getDistanceAdjust
(
)
const
{
return
fDistanceAdjust
;
}
uint32_t
getFlags
(
)
const
{
return
fFlags
;
}
const
SkMatrix
&
localMatrix
(
)
const
{
return
fLocalMatrix
;
}
const
SkISize
&
atlasSize
(
)
const
{
return
fAtlasSize
;
}
void
addNewProxies
(
const
sk_sp
<
GrTextureProxy
>
*
int
numActiveProxies
const
GrSamplerState
&
)
;
void
getGLSLProcessorKey
(
const
GrShaderCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
override
;
GrGLSLPrimitiveProcessor
*
createGLSLInstance
(
const
GrShaderCaps
&
)
const
override
;
private
:
GrDistanceFieldLCDTextGeoProc
(
const
GrShaderCaps
&
caps
const
sk_sp
<
GrTextureProxy
>
*
proxies
int
numActiveProxies
const
GrSamplerState
&
params
DistanceAdjust
wa
uint32_t
flags
const
SkMatrix
&
localMatrix
)
;
const
Attribute
&
onVertexAttribute
(
int
)
const
override
;
const
TextureSampler
&
onTextureSampler
(
int
i
)
const
override
{
return
fTextureSamplers
[
i
]
;
}
TextureSampler
fTextureSamplers
[
kMaxTextures
]
;
SkISize
fAtlasSize
;
const
SkMatrix
fLocalMatrix
;
DistanceAdjust
fDistanceAdjust
;
Attribute
fInPosition
;
Attribute
fInTextureCoords
;
uint32_t
fFlags
;
static
constexpr
Attribute
kInColor
=
{
"
inColor
"
kUByte4_norm_GrVertexAttribType
kHalf4_GrSLType
}
;
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
typedef
GrGeometryProcessor
INHERITED
;
}
;
#
endif
