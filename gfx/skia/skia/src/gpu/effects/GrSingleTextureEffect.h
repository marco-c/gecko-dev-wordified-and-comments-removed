#
ifndef
GrSingleTextureEffect_DEFINED
#
define
GrSingleTextureEffect_DEFINED
#
include
"
GrFragmentProcessor
.
h
"
#
include
"
GrColorSpaceXform
.
h
"
#
include
"
GrCoordTransform
.
h
"
#
include
"
SkMatrix
.
h
"
class
GrTexture
;
class
GrTextureProxy
;
class
GrSingleTextureEffect
:
public
GrFragmentProcessor
{
public
:
SkString
dumpInfo
(
)
const
override
{
SkString
str
;
str
.
appendf
(
"
Texture
:
%
d
"
fTextureSampler
.
texture
(
)
-
>
uniqueID
(
)
.
asUInt
(
)
)
;
return
str
;
}
GrColorSpaceXform
*
colorSpaceXform
(
)
const
{
return
fColorSpaceXform
.
get
(
)
;
}
protected
:
GrSingleTextureEffect
(
GrResourceProvider
*
OptimizationFlags
sk_sp
<
GrTextureProxy
>
sk_sp
<
GrColorSpaceXform
>
const
SkMatrix
&
)
;
GrSingleTextureEffect
(
GrResourceProvider
*
OptimizationFlags
sk_sp
<
GrTextureProxy
>
sk_sp
<
GrColorSpaceXform
>
const
SkMatrix
&
GrSamplerParams
:
:
FilterMode
filterMode
)
;
GrSingleTextureEffect
(
GrResourceProvider
*
OptimizationFlags
sk_sp
<
GrTextureProxy
>
sk_sp
<
GrColorSpaceXform
>
const
SkMatrix
&
const
GrSamplerParams
&
)
;
static
OptimizationFlags
ModulationFlags
(
GrPixelConfig
config
)
{
if
(
GrPixelConfigIsOpaque
(
config
)
)
{
return
kCompatibleWithCoverageAsAlpha_OptimizationFlag
|
kPreservesOpaqueInput_OptimizationFlag
;
}
else
{
return
kCompatibleWithCoverageAsAlpha_OptimizationFlag
;
}
}
private
:
GrCoordTransform
fCoordTransform
;
TextureSampler
fTextureSampler
;
sk_sp
<
GrColorSpaceXform
>
fColorSpaceXform
;
typedef
GrFragmentProcessor
INHERITED
;
}
;
#
endif
