#
ifndef
GrConfigConversionEffect_DEFINED
#
define
GrConfigConversionEffect_DEFINED
#
include
"
GrSingleTextureEffect
.
h
"
#
include
"
GrSwizzle
.
h
"
class
GrInvariantOutput
;
class
GrConfigConversionEffect
:
public
GrSingleTextureEffect
{
public
:
enum
PMConversion
{
kNone_PMConversion
=
0
kMulByAlpha_RoundUp_PMConversion
kMulByAlpha_RoundDown_PMConversion
kDivByAlpha_RoundUp_PMConversion
kDivByAlpha_RoundDown_PMConversion
kPMConversionCnt
}
;
static
sk_sp
<
GrFragmentProcessor
>
Make
(
GrTexture
*
const
GrSwizzle
&
PMConversion
const
SkMatrix
&
)
;
const
char
*
name
(
)
const
override
{
return
"
Config
Conversion
"
;
}
const
GrSwizzle
&
swizzle
(
)
const
{
return
fSwizzle
;
}
PMConversion
pmConversion
(
)
const
{
return
fPMConversion
;
}
static
void
TestForPreservingPMConversions
(
GrContext
*
context
PMConversion
*
PMToUPMRule
PMConversion
*
UPMToPMRule
)
;
private
:
GrConfigConversionEffect
(
GrTexture
*
const
GrSwizzle
&
PMConversion
pmConversion
const
SkMatrix
&
matrix
)
;
GrGLSLFragmentProcessor
*
onCreateGLSLInstance
(
)
const
override
;
void
onGetGLSLProcessorKey
(
const
GrGLSLCaps
&
GrProcessorKeyBuilder
*
)
const
override
;
bool
onIsEqual
(
const
GrFragmentProcessor
&
)
const
override
;
void
onComputeInvariantOutput
(
GrInvariantOutput
*
inout
)
const
override
;
GrSwizzle
fSwizzle
;
PMConversion
fPMConversion
;
GR_DECLARE_FRAGMENT_PROCESSOR_TEST
;
typedef
GrSingleTextureEffect
INHERITED
;
}
;
#
endif
