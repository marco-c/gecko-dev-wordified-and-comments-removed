#
ifndef
GrBitmapTextGeoProc_DEFINED
#
define
GrBitmapTextGeoProc_DEFINED
#
include
"
GrProcessor
.
h
"
#
include
"
GrGeometryProcessor
.
h
"
class
GrGLBitmapTextGeoProc
;
class
GrInvariantOutput
;
class
GrBitmapTextGeoProc
:
public
GrGeometryProcessor
{
public
:
static
constexpr
int
kMaxTextures
=
4
;
static
sk_sp
<
GrGeometryProcessor
>
Make
(
const
GrShaderCaps
&
caps
GrColor
color
const
sk_sp
<
GrTextureProxy
>
*
proxies
int
numActiveProxies
const
GrSamplerState
&
p
GrMaskFormat
format
const
SkMatrix
&
localMatrix
bool
usesW
)
{
return
sk_sp
<
GrGeometryProcessor
>
(
new
GrBitmapTextGeoProc
(
caps
color
proxies
numActiveProxies
p
format
localMatrix
usesW
)
)
;
}
~
GrBitmapTextGeoProc
(
)
override
{
}
const
char
*
name
(
)
const
override
{
return
"
Texture
"
;
}
const
Attribute
&
inPosition
(
)
const
{
return
fInPosition
;
}
const
Attribute
&
inColor
(
)
const
{
return
fInColor
;
}
const
Attribute
&
inTextureCoords
(
)
const
{
return
fInTextureCoords
;
}
GrMaskFormat
maskFormat
(
)
const
{
return
fMaskFormat
;
}
GrColor
color
(
)
const
{
return
fColor
;
}
bool
hasVertexColor
(
)
const
{
return
fInColor
.
isInitialized
(
)
;
}
const
SkMatrix
&
localMatrix
(
)
const
{
return
fLocalMatrix
;
}
bool
usesW
(
)
const
{
return
fUsesW
;
}
const
SkISize
&
atlasSize
(
)
const
{
return
fAtlasSize
;
}
void
addNewProxies
(
const
sk_sp
<
GrTextureProxy
>
*
int
numActiveProxies
const
GrSamplerState
&
)
;
void
getGLSLProcessorKey
(
const
GrShaderCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
override
;
GrGLSLPrimitiveProcessor
*
createGLSLInstance
(
const
GrShaderCaps
&
caps
)
const
override
;
private
:
GrBitmapTextGeoProc
(
const
GrShaderCaps
&
GrColor
const
sk_sp
<
GrTextureProxy
>
*
proxies
int
numProxies
const
GrSamplerState
&
params
GrMaskFormat
format
const
SkMatrix
&
localMatrix
bool
usesW
)
;
const
Attribute
&
onVertexAttribute
(
int
i
)
const
override
;
const
TextureSampler
&
onTextureSampler
(
int
i
)
const
override
{
return
fTextureSamplers
[
i
]
;
}
GrColor
fColor
;
SkMatrix
fLocalMatrix
;
bool
fUsesW
;
SkISize
fAtlasSize
;
TextureSampler
fTextureSamplers
[
kMaxTextures
]
;
Attribute
fInPosition
;
Attribute
fInColor
;
Attribute
fInTextureCoords
;
GrMaskFormat
fMaskFormat
;
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
typedef
GrGeometryProcessor
INHERITED
;
}
;
#
endif
