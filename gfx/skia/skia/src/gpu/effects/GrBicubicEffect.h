#
ifndef
GrBicubicTextureEffect_DEFINED
#
define
GrBicubicTextureEffect_DEFINED
#
include
"
GrSingleTextureEffect
.
h
"
#
include
"
GrTextureDomain
.
h
"
#
include
"
glsl
/
GrGLSLFragmentProcessor
.
h
"
class
GrGLBicubicEffect
;
class
GrInvariantOutput
;
class
GrBicubicEffect
:
public
GrSingleTextureEffect
{
public
:
enum
{
kFilterTexelPad
=
2
}
;
virtual
~
GrBicubicEffect
(
)
;
const
float
*
coefficients
(
)
const
{
return
fCoefficients
;
}
const
char
*
name
(
)
const
override
{
return
"
Bicubic
"
;
}
const
GrTextureDomain
&
domain
(
)
const
{
return
fDomain
;
}
static
const
GrFragmentProcessor
*
Create
(
GrTexture
*
tex
const
SkScalar
coefficients
[
16
]
const
SkRect
*
domain
=
nullptr
)
{
if
(
nullptr
=
=
domain
)
{
static
const
SkShader
:
:
TileMode
kTileModes
[
]
=
{
SkShader
:
:
kClamp_TileMode
SkShader
:
:
kClamp_TileMode
}
;
return
Create
(
tex
coefficients
GrCoordTransform
:
:
MakeDivByTextureWHMatrix
(
tex
)
kTileModes
)
;
}
else
{
return
new
GrBicubicEffect
(
tex
coefficients
GrCoordTransform
:
:
MakeDivByTextureWHMatrix
(
tex
)
*
domain
)
;
}
}
static
const
GrFragmentProcessor
*
Create
(
GrTexture
*
tex
const
SkMatrix
&
matrix
const
SkShader
:
:
TileMode
tileModes
[
2
]
)
{
return
Create
(
tex
gMitchellCoefficients
matrix
tileModes
)
;
}
static
const
GrFragmentProcessor
*
Create
(
GrTexture
*
tex
const
SkScalar
coefficients
[
16
]
const
SkMatrix
&
matrix
const
SkShader
:
:
TileMode
tileModes
[
2
]
)
{
return
new
GrBicubicEffect
(
tex
coefficients
matrix
tileModes
)
;
}
static
const
GrFragmentProcessor
*
Create
(
GrTexture
*
tex
const
SkMatrix
&
matrix
const
SkRect
&
domain
)
{
return
new
GrBicubicEffect
(
tex
gMitchellCoefficients
matrix
domain
)
;
}
static
bool
ShouldUseBicubic
(
const
SkMatrix
&
localCoordsToDevice
GrTextureParams
:
:
FilterMode
*
filterMode
)
;
private
:
GrBicubicEffect
(
GrTexture
*
const
SkScalar
coefficients
[
16
]
const
SkMatrix
&
matrix
const
SkShader
:
:
TileMode
tileModes
[
2
]
)
;
GrBicubicEffect
(
GrTexture
*
const
SkScalar
coefficients
[
16
]
const
SkMatrix
&
matrix
const
SkRect
&
domain
)
;
GrGLSLFragmentProcessor
*
onCreateGLSLInstance
(
)
const
override
;
void
onGetGLSLProcessorKey
(
const
GrGLSLCaps
&
GrProcessorKeyBuilder
*
)
const
override
;
bool
onIsEqual
(
const
GrFragmentProcessor
&
)
const
override
;
void
onComputeInvariantOutput
(
GrInvariantOutput
*
inout
)
const
override
;
float
fCoefficients
[
16
]
;
GrTextureDomain
fDomain
;
GR_DECLARE_FRAGMENT_PROCESSOR_TEST
;
static
const
SkScalar
gMitchellCoefficients
[
16
]
;
typedef
GrSingleTextureEffect
INHERITED
;
}
;
#
endif
