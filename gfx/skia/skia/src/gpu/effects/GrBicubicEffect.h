#
ifndef
GrBicubicTextureEffect_DEFINED
#
define
GrBicubicTextureEffect_DEFINED
#
include
"
GrTextureDomain
.
h
"
#
include
"
glsl
/
GrGLSLFragmentProcessor
.
h
"
class
GrInvariantOutput
;
class
GrBicubicEffect
:
public
GrFragmentProcessor
{
public
:
enum
{
kFilterTexelPad
=
2
}
;
const
char
*
name
(
)
const
override
{
return
"
Bicubic
"
;
}
std
:
:
unique_ptr
<
GrFragmentProcessor
>
clone
(
)
const
override
{
return
std
:
:
unique_ptr
<
GrFragmentProcessor
>
(
new
GrBicubicEffect
(
*
this
)
)
;
}
const
GrTextureDomain
&
domain
(
)
const
{
return
fDomain
;
}
static
std
:
:
unique_ptr
<
GrFragmentProcessor
>
Make
(
sk_sp
<
GrTextureProxy
>
proxy
const
SkMatrix
&
matrix
const
GrSamplerState
:
:
WrapMode
wrapModes
[
2
]
)
{
return
Make
(
std
:
:
move
(
proxy
)
matrix
wrapModes
GrTextureDomain
:
:
kIgnore_Mode
GrTextureDomain
:
:
kIgnore_Mode
)
;
}
static
std
:
:
unique_ptr
<
GrFragmentProcessor
>
Make
(
sk_sp
<
GrTextureProxy
>
proxy
const
SkMatrix
&
matrix
const
GrSamplerState
:
:
WrapMode
wrapModes
[
2
]
GrTextureDomain
:
:
Mode
modeX
GrTextureDomain
:
:
Mode
modeY
const
SkRect
*
domain
=
nullptr
)
{
SkRect
resolvedDomain
=
domain
?
*
domain
:
GrTextureDomain
:
:
MakeTexelDomain
(
SkIRect
:
:
MakeWH
(
proxy
-
>
width
(
)
proxy
-
>
height
(
)
)
modeX
modeY
)
;
return
std
:
:
unique_ptr
<
GrFragmentProcessor
>
(
new
GrBicubicEffect
(
std
:
:
move
(
proxy
)
matrix
resolvedDomain
wrapModes
modeX
modeY
)
)
;
}
static
std
:
:
unique_ptr
<
GrFragmentProcessor
>
Make
(
sk_sp
<
GrTextureProxy
>
proxy
const
SkMatrix
&
matrix
const
SkRect
&
domain
)
{
static
const
GrSamplerState
:
:
WrapMode
kClampClamp
[
]
=
{
GrSamplerState
:
:
WrapMode
:
:
kClamp
GrSamplerState
:
:
WrapMode
:
:
kClamp
}
;
return
Make
(
std
:
:
move
(
proxy
)
matrix
kClampClamp
GrTextureDomain
:
:
kClamp_Mode
GrTextureDomain
:
:
kClamp_Mode
&
domain
)
;
}
static
bool
ShouldUseBicubic
(
const
SkMatrix
&
localCoordsToDevice
GrSamplerState
:
:
Filter
*
filterMode
)
;
private
:
GrBicubicEffect
(
sk_sp
<
GrTextureProxy
>
const
SkMatrix
&
matrix
const
SkRect
&
domain
const
GrSamplerState
:
:
WrapMode
wrapModes
[
2
]
GrTextureDomain
:
:
Mode
modeX
GrTextureDomain
:
:
Mode
modeY
)
;
explicit
GrBicubicEffect
(
const
GrBicubicEffect
&
)
;
GrGLSLFragmentProcessor
*
onCreateGLSLInstance
(
)
const
override
;
void
onGetGLSLProcessorKey
(
const
GrShaderCaps
&
GrProcessorKeyBuilder
*
)
const
override
;
bool
onIsEqual
(
const
GrFragmentProcessor
&
)
const
override
;
const
TextureSampler
&
onTextureSampler
(
int
)
const
override
{
return
fTextureSampler
;
}
GrCoordTransform
fCoordTransform
;
GrTextureDomain
fDomain
;
TextureSampler
fTextureSampler
;
GR_DECLARE_FRAGMENT_PROCESSOR_TEST
typedef
GrFragmentProcessor
INHERITED
;
}
;
#
endif
