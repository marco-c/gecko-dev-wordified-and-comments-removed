#
ifndef
GrTextureDomainEffect_DEFINED
#
define
GrTextureDomainEffect_DEFINED
#
include
"
GrSingleTextureEffect
.
h
"
#
include
"
glsl
/
GrGLSLFragmentProcessor
.
h
"
#
include
"
glsl
/
GrGLSLProgramDataManager
.
h
"
class
GrGLProgramBuilder
;
class
GrGLSLColorSpaceXformHelper
;
class
GrGLSLShaderBuilder
;
class
GrInvariantOutput
;
class
GrGLSLUniformHandler
;
struct
SkRect
;
class
GrTextureDomain
{
public
:
enum
Mode
{
kIgnore_Mode
kClamp_Mode
kDecal_Mode
kRepeat_Mode
kLastMode
=
kRepeat_Mode
}
;
static
const
int
kModeCount
=
kLastMode
+
1
;
static
const
GrTextureDomain
&
IgnoredDomain
(
)
{
static
const
GrTextureDomain
gDomain
(
(
GrTextureProxy
*
)
nullptr
SkRect
:
:
MakeEmpty
(
)
kIgnore_Mode
)
;
return
gDomain
;
}
GrTextureDomain
(
GrTexture
*
const
SkRect
&
domain
Mode
int
index
=
-
1
)
;
GrTextureDomain
(
GrTextureProxy
*
const
SkRect
&
domain
Mode
int
index
=
-
1
)
;
const
SkRect
&
domain
(
)
const
{
return
fDomain
;
}
Mode
mode
(
)
const
{
return
fMode
;
}
static
const
SkRect
MakeTexelDomain
(
const
SkIRect
&
texelRect
)
{
return
SkRect
:
:
Make
(
texelRect
)
;
}
static
const
SkRect
MakeTexelDomainForMode
(
const
SkIRect
&
texelRect
Mode
mode
)
{
SkScalar
inset
=
(
mode
=
=
kClamp_Mode
&
&
!
texelRect
.
isEmpty
(
)
)
?
SK_ScalarHalf
:
0
;
return
SkRect
:
:
MakeLTRB
(
texelRect
.
fLeft
+
inset
texelRect
.
fTop
+
inset
texelRect
.
fRight
-
inset
texelRect
.
fBottom
-
inset
)
;
}
bool
operator
=
=
(
const
GrTextureDomain
&
that
)
const
{
return
fMode
=
=
that
.
fMode
&
&
(
kIgnore_Mode
=
=
fMode
|
|
fDomain
=
=
that
.
fDomain
)
;
}
class
GLDomain
{
public
:
GLDomain
(
)
{
for
(
int
i
=
0
;
i
<
kPrevDomainCount
;
i
+
+
)
{
fPrevDomain
[
i
]
=
SK_FloatNaN
;
}
SkDEBUGCODE
(
fMode
=
(
Mode
)
-
1
;
)
}
void
sampleTexture
(
GrGLSLShaderBuilder
*
builder
GrGLSLUniformHandler
*
uniformHandler
const
GrShaderCaps
*
shaderCaps
const
GrTextureDomain
&
textureDomain
const
char
*
outColor
const
SkString
&
inCoords
GrGLSLFragmentProcessor
:
:
SamplerHandle
sampler
const
char
*
inModulateColor
=
nullptr
GrGLSLColorSpaceXformHelper
*
colorXformHelper
=
nullptr
)
;
void
setData
(
const
GrGLSLProgramDataManager
&
pdman
const
GrTextureDomain
&
textureDomain
GrTexture
*
texure
)
;
enum
{
kDomainKeyBits
=
2
}
;
static
uint32_t
DomainKey
(
const
GrTextureDomain
&
domain
)
{
GR_STATIC_ASSERT
(
kModeCount
<
=
(
1
<
<
kDomainKeyBits
)
)
;
return
domain
.
mode
(
)
;
}
private
:
static
const
int
kPrevDomainCount
=
4
;
SkDEBUGCODE
(
Mode
fMode
;
)
GrGLSLProgramDataManager
:
:
UniformHandle
fDomainUni
;
SkString
fDomainName
;
float
fPrevDomain
[
kPrevDomainCount
]
;
}
;
protected
:
Mode
fMode
;
SkRect
fDomain
;
int
fIndex
;
}
;
class
GrTextureDomainEffect
:
public
GrSingleTextureEffect
{
public
:
static
sk_sp
<
GrFragmentProcessor
>
Make
(
GrResourceProvider
*
sk_sp
<
GrTextureProxy
>
sk_sp
<
GrColorSpaceXform
>
const
SkMatrix
&
const
SkRect
&
domain
GrTextureDomain
:
:
Mode
GrSamplerParams
:
:
FilterMode
filterMode
)
;
const
char
*
name
(
)
const
override
{
return
"
TextureDomain
"
;
}
SkString
dumpInfo
(
)
const
override
{
SkString
str
;
str
.
appendf
(
"
Domain
:
[
L
:
%
.
2f
T
:
%
.
2f
R
:
%
.
2f
B
:
%
.
2f
]
"
fTextureDomain
.
domain
(
)
.
fLeft
fTextureDomain
.
domain
(
)
.
fTop
fTextureDomain
.
domain
(
)
.
fRight
fTextureDomain
.
domain
(
)
.
fBottom
)
;
str
.
append
(
INHERITED
:
:
dumpInfo
(
)
)
;
return
str
;
}
private
:
GrTextureDomain
fTextureDomain
;
GrTextureDomainEffect
(
GrResourceProvider
*
sk_sp
<
GrTextureProxy
>
sk_sp
<
GrColorSpaceXform
>
const
SkMatrix
&
const
SkRect
&
domain
GrTextureDomain
:
:
Mode
GrSamplerParams
:
:
FilterMode
)
;
static
OptimizationFlags
OptFlags
(
GrPixelConfig
config
GrTextureDomain
:
:
Mode
mode
)
;
GrGLSLFragmentProcessor
*
onCreateGLSLInstance
(
)
const
override
;
void
onGetGLSLProcessorKey
(
const
GrShaderCaps
&
GrProcessorKeyBuilder
*
)
const
override
;
bool
onIsEqual
(
const
GrFragmentProcessor
&
)
const
override
;
GR_DECLARE_FRAGMENT_PROCESSOR_TEST
;
typedef
GrSingleTextureEffect
INHERITED
;
}
;
class
GrDeviceSpaceTextureDecalFragmentProcessor
:
public
GrFragmentProcessor
{
public
:
static
sk_sp
<
GrFragmentProcessor
>
Make
(
GrResourceProvider
*
sk_sp
<
GrTextureProxy
>
const
SkIRect
&
subset
const
SkIPoint
&
deviceSpaceOffset
)
;
const
char
*
name
(
)
const
override
{
return
"
GrDeviceSpaceTextureDecalFragmentProcessor
"
;
}
SkString
dumpInfo
(
)
const
override
{
SkString
str
;
str
.
appendf
(
"
Domain
:
[
L
:
%
.
2f
T
:
%
.
2f
R
:
%
.
2f
B
:
%
.
2f
]
Offset
:
[
%
d
%
d
]
"
fTextureDomain
.
domain
(
)
.
fLeft
fTextureDomain
.
domain
(
)
.
fTop
fTextureDomain
.
domain
(
)
.
fRight
fTextureDomain
.
domain
(
)
.
fBottom
fDeviceSpaceOffset
.
fX
fDeviceSpaceOffset
.
fY
)
;
str
.
append
(
INHERITED
:
:
dumpInfo
(
)
)
;
return
str
;
}
private
:
TextureSampler
fTextureSampler
;
GrTextureDomain
fTextureDomain
;
SkIPoint
fDeviceSpaceOffset
;
GrDeviceSpaceTextureDecalFragmentProcessor
(
GrResourceProvider
*
sk_sp
<
GrTextureProxy
>
const
SkIRect
&
const
SkIPoint
&
)
;
GrGLSLFragmentProcessor
*
onCreateGLSLInstance
(
)
const
override
;
void
onGetGLSLProcessorKey
(
const
GrShaderCaps
&
GrProcessorKeyBuilder
*
)
const
override
{
}
bool
onIsEqual
(
const
GrFragmentProcessor
&
fp
)
const
override
;
GR_DECLARE_FRAGMENT_PROCESSOR_TEST
;
typedef
GrFragmentProcessor
INHERITED
;
}
;
#
endif
