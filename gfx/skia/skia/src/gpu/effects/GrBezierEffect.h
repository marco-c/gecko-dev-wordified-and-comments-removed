#
ifndef
GrBezierEffect_DEFINED
#
define
GrBezierEffect_DEFINED
#
include
"
GrCaps
.
h
"
#
include
"
GrProcessor
.
h
"
#
include
"
GrGeometryProcessor
.
h
"
#
include
"
GrTypesPriv
.
h
"
class
GrGLConicEffect
;
class
GrConicEffect
:
public
GrGeometryProcessor
{
public
:
static
sk_sp
<
GrGeometryProcessor
>
Make
(
GrColor
color
const
SkMatrix
&
viewMatrix
const
GrPrimitiveEdgeType
edgeType
const
GrCaps
&
caps
const
SkMatrix
&
localMatrix
bool
usesLocalCoords
uint8_t
coverage
=
0xff
)
{
switch
(
edgeType
)
{
case
kFillAA_GrProcessorEdgeType
:
if
(
!
caps
.
shaderCaps
(
)
-
>
shaderDerivativeSupport
(
)
)
{
return
nullptr
;
}
return
sk_sp
<
GrGeometryProcessor
>
(
new
GrConicEffect
(
color
viewMatrix
coverage
kFillAA_GrProcessorEdgeType
localMatrix
usesLocalCoords
)
)
;
case
kHairlineAA_GrProcessorEdgeType
:
if
(
!
caps
.
shaderCaps
(
)
-
>
shaderDerivativeSupport
(
)
)
{
return
nullptr
;
}
return
sk_sp
<
GrGeometryProcessor
>
(
new
GrConicEffect
(
color
viewMatrix
coverage
kHairlineAA_GrProcessorEdgeType
localMatrix
usesLocalCoords
)
)
;
case
kFillBW_GrProcessorEdgeType
:
return
sk_sp
<
GrGeometryProcessor
>
(
new
GrConicEffect
(
color
viewMatrix
coverage
kFillBW_GrProcessorEdgeType
localMatrix
usesLocalCoords
)
)
;
default
:
return
nullptr
;
}
}
~
GrConicEffect
(
)
override
;
const
char
*
name
(
)
const
override
{
return
"
Conic
"
;
}
inline
const
Attribute
*
inPosition
(
)
const
{
return
fInPosition
;
}
inline
const
Attribute
*
inConicCoeffs
(
)
const
{
return
fInConicCoeffs
;
}
inline
bool
isAntiAliased
(
)
const
{
return
GrProcessorEdgeTypeIsAA
(
fEdgeType
)
;
}
inline
bool
isFilled
(
)
const
{
return
GrProcessorEdgeTypeIsFill
(
fEdgeType
)
;
}
inline
GrPrimitiveEdgeType
getEdgeType
(
)
const
{
return
fEdgeType
;
}
GrColor
color
(
)
const
{
return
fColor
;
}
const
SkMatrix
&
viewMatrix
(
)
const
{
return
fViewMatrix
;
}
const
SkMatrix
&
localMatrix
(
)
const
{
return
fLocalMatrix
;
}
bool
usesLocalCoords
(
)
const
{
return
fUsesLocalCoords
;
}
uint8_t
coverageScale
(
)
const
{
return
fCoverageScale
;
}
void
getGLSLProcessorKey
(
const
GrShaderCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
override
;
GrGLSLPrimitiveProcessor
*
createGLSLInstance
(
const
GrShaderCaps
&
)
const
override
;
private
:
GrConicEffect
(
GrColor
const
SkMatrix
&
viewMatrix
uint8_t
coverage
GrPrimitiveEdgeType
const
SkMatrix
&
localMatrix
bool
usesLocalCoords
)
;
GrColor
fColor
;
SkMatrix
fViewMatrix
;
SkMatrix
fLocalMatrix
;
bool
fUsesLocalCoords
;
uint8_t
fCoverageScale
;
GrPrimitiveEdgeType
fEdgeType
;
const
Attribute
*
fInPosition
;
const
Attribute
*
fInConicCoeffs
;
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
;
typedef
GrGeometryProcessor
INHERITED
;
}
;
class
GrGLQuadEffect
;
class
GrQuadEffect
:
public
GrGeometryProcessor
{
public
:
static
sk_sp
<
GrGeometryProcessor
>
Make
(
GrColor
color
const
SkMatrix
&
viewMatrix
const
GrPrimitiveEdgeType
edgeType
const
GrCaps
&
caps
const
SkMatrix
&
localMatrix
bool
usesLocalCoords
uint8_t
coverage
=
0xff
)
{
switch
(
edgeType
)
{
case
kFillAA_GrProcessorEdgeType
:
if
(
!
caps
.
shaderCaps
(
)
-
>
shaderDerivativeSupport
(
)
)
{
return
nullptr
;
}
return
sk_sp
<
GrGeometryProcessor
>
(
new
GrQuadEffect
(
color
viewMatrix
coverage
kFillAA_GrProcessorEdgeType
localMatrix
usesLocalCoords
)
)
;
case
kHairlineAA_GrProcessorEdgeType
:
if
(
!
caps
.
shaderCaps
(
)
-
>
shaderDerivativeSupport
(
)
)
{
return
nullptr
;
}
return
sk_sp
<
GrGeometryProcessor
>
(
new
GrQuadEffect
(
color
viewMatrix
coverage
kHairlineAA_GrProcessorEdgeType
localMatrix
usesLocalCoords
)
)
;
case
kFillBW_GrProcessorEdgeType
:
return
sk_sp
<
GrGeometryProcessor
>
(
new
GrQuadEffect
(
color
viewMatrix
coverage
kFillBW_GrProcessorEdgeType
localMatrix
usesLocalCoords
)
)
;
default
:
return
nullptr
;
}
}
~
GrQuadEffect
(
)
override
;
const
char
*
name
(
)
const
override
{
return
"
Quad
"
;
}
inline
const
Attribute
*
inPosition
(
)
const
{
return
fInPosition
;
}
inline
const
Attribute
*
inHairQuadEdge
(
)
const
{
return
fInHairQuadEdge
;
}
inline
bool
isAntiAliased
(
)
const
{
return
GrProcessorEdgeTypeIsAA
(
fEdgeType
)
;
}
inline
bool
isFilled
(
)
const
{
return
GrProcessorEdgeTypeIsFill
(
fEdgeType
)
;
}
inline
GrPrimitiveEdgeType
getEdgeType
(
)
const
{
return
fEdgeType
;
}
GrColor
color
(
)
const
{
return
fColor
;
}
const
SkMatrix
&
viewMatrix
(
)
const
{
return
fViewMatrix
;
}
const
SkMatrix
&
localMatrix
(
)
const
{
return
fLocalMatrix
;
}
bool
usesLocalCoords
(
)
const
{
return
fUsesLocalCoords
;
}
uint8_t
coverageScale
(
)
const
{
return
fCoverageScale
;
}
void
getGLSLProcessorKey
(
const
GrShaderCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
override
;
GrGLSLPrimitiveProcessor
*
createGLSLInstance
(
const
GrShaderCaps
&
)
const
override
;
private
:
GrQuadEffect
(
GrColor
const
SkMatrix
&
viewMatrix
uint8_t
coverage
GrPrimitiveEdgeType
const
SkMatrix
&
localMatrix
bool
usesLocalCoords
)
;
GrColor
fColor
;
SkMatrix
fViewMatrix
;
SkMatrix
fLocalMatrix
;
bool
fUsesLocalCoords
;
uint8_t
fCoverageScale
;
GrPrimitiveEdgeType
fEdgeType
;
const
Attribute
*
fInPosition
;
const
Attribute
*
fInHairQuadEdge
;
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
;
typedef
GrGeometryProcessor
INHERITED
;
}
;
class
GrGLCubicEffect
;
class
GrCubicEffect
:
public
GrGeometryProcessor
{
public
:
static
sk_sp
<
GrGeometryProcessor
>
Make
(
GrColor
color
const
SkMatrix
&
viewMatrix
const
GrPrimitiveEdgeType
edgeType
const
GrCaps
&
caps
)
{
switch
(
edgeType
)
{
case
kFillAA_GrProcessorEdgeType
:
if
(
!
caps
.
shaderCaps
(
)
-
>
shaderDerivativeSupport
(
)
)
{
return
nullptr
;
}
return
sk_sp
<
GrGeometryProcessor
>
(
new
GrCubicEffect
(
color
viewMatrix
kFillAA_GrProcessorEdgeType
)
)
;
case
kHairlineAA_GrProcessorEdgeType
:
if
(
!
caps
.
shaderCaps
(
)
-
>
shaderDerivativeSupport
(
)
)
{
return
nullptr
;
}
return
sk_sp
<
GrGeometryProcessor
>
(
new
GrCubicEffect
(
color
viewMatrix
kHairlineAA_GrProcessorEdgeType
)
)
;
case
kFillBW_GrProcessorEdgeType
:
return
sk_sp
<
GrGeometryProcessor
>
(
new
GrCubicEffect
(
color
viewMatrix
kFillBW_GrProcessorEdgeType
)
)
;
default
:
return
nullptr
;
}
}
~
GrCubicEffect
(
)
override
;
const
char
*
name
(
)
const
override
{
return
"
Cubic
"
;
}
inline
const
Attribute
*
inPosition
(
)
const
{
return
fInPosition
;
}
inline
const
Attribute
*
inCubicCoeffs
(
)
const
{
return
fInCubicCoeffs
;
}
inline
bool
isAntiAliased
(
)
const
{
return
GrProcessorEdgeTypeIsAA
(
fEdgeType
)
;
}
inline
bool
isFilled
(
)
const
{
return
GrProcessorEdgeTypeIsFill
(
fEdgeType
)
;
}
inline
GrPrimitiveEdgeType
getEdgeType
(
)
const
{
return
fEdgeType
;
}
GrColor
color
(
)
const
{
return
fColor
;
}
bool
colorIgnored
(
)
const
{
return
GrColor_ILLEGAL
=
=
fColor
;
}
const
SkMatrix
&
viewMatrix
(
)
const
{
return
fViewMatrix
;
}
void
getGLSLProcessorKey
(
const
GrShaderCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
override
;
GrGLSLPrimitiveProcessor
*
createGLSLInstance
(
const
GrShaderCaps
&
)
const
override
;
private
:
GrCubicEffect
(
GrColor
const
SkMatrix
&
viewMatrix
GrPrimitiveEdgeType
)
;
GrColor
fColor
;
SkMatrix
fViewMatrix
;
GrPrimitiveEdgeType
fEdgeType
;
const
Attribute
*
fInPosition
;
const
Attribute
*
fInCubicCoeffs
;
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
;
typedef
GrGeometryProcessor
INHERITED
;
}
;
#
endif
