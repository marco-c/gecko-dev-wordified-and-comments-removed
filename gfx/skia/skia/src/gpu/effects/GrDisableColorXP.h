#
ifndef
GrDisableColorXP_DEFINED
#
define
GrDisableColorXP_DEFINED
#
include
"
GrTypes
.
h
"
#
include
"
GrXferProcessor
.
h
"
#
include
"
SkRefCnt
.
h
"
#
if
defined
(
__GNUC__
)
#
pragma
GCC
diagnostic
push
#
pragma
GCC
diagnostic
ignored
"
-
Wnon
-
virtual
-
dtor
"
#
endif
#
if
defined
(
__clang__
)
#
pragma
clang
diagnostic
push
#
pragma
clang
diagnostic
ignored
"
-
Wnon
-
virtual
-
dtor
"
#
endif
class
GrDisableColorXPFactory
:
public
GrXPFactory
{
public
:
static
const
GrXPFactory
*
Get
(
)
;
private
:
constexpr
GrDisableColorXPFactory
(
)
{
}
AnalysisProperties
analysisProperties
(
const
GrProcessorAnalysisColor
&
const
GrProcessorAnalysisCoverage
&
const
GrCaps
&
GrPixelConfigIsClamped
)
const
override
{
return
AnalysisProperties
:
:
kCompatibleWithAlphaAsCoverage
|
AnalysisProperties
:
:
kIgnoresInputColor
;
}
sk_sp
<
const
GrXferProcessor
>
makeXferProcessor
(
const
GrProcessorAnalysisColor
&
GrProcessorAnalysisCoverage
bool
hasMixedSamples
const
GrCaps
&
GrPixelConfigIsClamped
)
const
override
;
GR_DECLARE_XP_FACTORY_TEST
typedef
GrXPFactory
INHERITED
;
}
;
#
if
defined
(
__GNUC__
)
#
pragma
GCC
diagnostic
pop
#
endif
#
if
defined
(
__clang__
)
#
pragma
clang
diagnostic
pop
#
endif
inline
const
GrXPFactory
*
GrDisableColorXPFactory
:
:
Get
(
)
{
#
ifdef
SK_BUILD_FOR_WIN
static
const
GrDisableColorXPFactory
gDisableColorXPFactory
;
#
else
static
constexpr
const
GrDisableColorXPFactory
gDisableColorXPFactory
;
#
endif
return
&
gDisableColorXPFactory
;
}
#
endif
