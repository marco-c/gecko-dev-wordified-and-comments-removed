#
ifndef
GrConvexPolyEffect_DEFINED
#
define
GrConvexPolyEffect_DEFINED
#
include
"
GrCaps
.
h
"
#
include
"
GrFragmentProcessor
.
h
"
#
include
"
GrProcessor
.
h
"
#
include
"
GrTypesPriv
.
h
"
class
GrInvariantOutput
;
class
SkPath
;
class
GrConvexPolyEffect
:
public
GrFragmentProcessor
{
public
:
enum
{
kMaxEdges
=
8
}
;
static
std
:
:
unique_ptr
<
GrFragmentProcessor
>
Make
(
GrClipEdgeType
edgeType
int
n
const
SkScalar
edges
[
]
)
{
if
(
n
<
=
0
|
|
n
>
kMaxEdges
|
|
GrClipEdgeType
:
:
kHairlineAA
=
=
edgeType
)
{
return
nullptr
;
}
return
std
:
:
unique_ptr
<
GrFragmentProcessor
>
(
new
GrConvexPolyEffect
(
edgeType
n
edges
)
)
;
}
static
std
:
:
unique_ptr
<
GrFragmentProcessor
>
Make
(
GrClipEdgeType
const
SkPath
&
)
;
static
std
:
:
unique_ptr
<
GrFragmentProcessor
>
Make
(
GrClipEdgeType
const
SkRect
&
)
;
~
GrConvexPolyEffect
(
)
override
;
const
char
*
name
(
)
const
override
{
return
"
ConvexPoly
"
;
}
std
:
:
unique_ptr
<
GrFragmentProcessor
>
clone
(
)
const
override
;
GrClipEdgeType
getEdgeType
(
)
const
{
return
fEdgeType
;
}
int
getEdgeCount
(
)
const
{
return
fEdgeCount
;
}
const
SkScalar
*
getEdges
(
)
const
{
return
fEdges
;
}
private
:
GrConvexPolyEffect
(
GrClipEdgeType
edgeType
int
n
const
SkScalar
edges
[
]
)
;
GrConvexPolyEffect
(
const
GrConvexPolyEffect
&
)
;
GrGLSLFragmentProcessor
*
onCreateGLSLInstance
(
)
const
override
;
void
onGetGLSLProcessorKey
(
const
GrShaderCaps
&
GrProcessorKeyBuilder
*
)
const
override
;
bool
onIsEqual
(
const
GrFragmentProcessor
&
other
)
const
override
;
GrClipEdgeType
fEdgeType
;
int
fEdgeCount
;
SkScalar
fEdges
[
3
*
kMaxEdges
]
;
GR_DECLARE_FRAGMENT_PROCESSOR_TEST
typedef
GrFragmentProcessor
INHERITED
;
}
;
#
endif
