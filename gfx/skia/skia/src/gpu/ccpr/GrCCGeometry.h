#
ifndef
GrGrCCGeometry_DEFINED
#
define
GrGrCCGeometry_DEFINED
#
include
"
SkGeometry
.
h
"
#
include
"
SkNx
.
h
"
#
include
"
SkPoint
.
h
"
#
include
"
SkTArray
.
h
"
class
GrCCGeometry
{
public
:
enum
class
Verb
:
uint8_t
{
kBeginPath
kBeginContour
kLineTo
kMonotonicQuadraticTo
kMonotonicCubicTo
kEndClosedContour
kEndOpenContour
}
;
struct
PrimitiveTallies
{
int
fTriangles
;
int
fWoundTriangles
;
int
fQuadratics
;
int
fCubics
;
void
operator
+
=
(
const
PrimitiveTallies
&
)
;
PrimitiveTallies
operator
-
(
const
PrimitiveTallies
&
)
const
;
bool
operator
=
=
(
const
PrimitiveTallies
&
)
;
}
;
GrCCGeometry
(
int
numSkPoints
=
0
int
numSkVerbs
=
0
)
:
fPoints
(
numSkPoints
*
3
)
fVerbs
(
numSkVerbs
*
3
)
{
}
const
SkTArray
<
SkPoint
true
>
&
points
(
)
const
{
SkASSERT
(
!
fBuildingContour
)
;
return
fPoints
;
}
const
SkTArray
<
Verb
true
>
&
verbs
(
)
const
{
SkASSERT
(
!
fBuildingContour
)
;
return
fVerbs
;
}
void
reset
(
)
{
SkASSERT
(
!
fBuildingContour
)
;
fPoints
.
reset
(
)
;
fVerbs
.
reset
(
)
;
}
void
resize_back
(
int
numPoints
int
numVerbs
)
{
SkASSERT
(
!
fBuildingContour
)
;
fPoints
.
resize_back
(
numPoints
)
;
fVerbs
.
resize_back
(
numVerbs
)
;
SkASSERT
(
fVerbs
.
empty
(
)
|
|
fVerbs
.
back
(
)
=
=
Verb
:
:
kEndOpenContour
|
|
fVerbs
.
back
(
)
=
=
Verb
:
:
kEndClosedContour
)
;
}
void
beginPath
(
)
;
void
beginContour
(
const
SkPoint
&
devPt
)
;
void
lineTo
(
const
SkPoint
&
devPt
)
;
void
quadraticTo
(
const
SkPoint
&
devP1
const
SkPoint
&
devP2
)
;
void
cubicTo
(
const
SkPoint
&
devP1
const
SkPoint
&
devP2
const
SkPoint
&
devP3
float
inflectPad
=
0
.
55f
float
loopIntersectPad
=
2
)
;
PrimitiveTallies
endContour
(
)
;
private
:
inline
void
appendMonotonicQuadratics
(
const
Sk2f
&
p0
const
Sk2f
&
p1
const
Sk2f
&
p2
)
;
inline
void
appendSingleMonotonicQuadratic
(
const
Sk2f
&
p0
const
Sk2f
&
p1
const
Sk2f
&
p2
)
;
using
AppendCubicFn
=
void
(
GrCCGeometry
:
:
*
)
(
const
Sk2f
&
p0
const
Sk2f
&
p1
const
Sk2f
&
p2
const
Sk2f
&
p3
int
maxSubdivisions
)
;
static
constexpr
int
kMaxSubdivionsPerCubicSection
=
2
;
template
<
AppendCubicFn
AppendLeftRight
>
inline
void
chopCubicAtMidTangent
(
const
Sk2f
&
p0
const
Sk2f
&
p1
const
Sk2f
&
p2
const
Sk2f
&
p3
const
Sk2f
&
tan0
const
Sk2f
&
tan3
int
maxFutureSubdivisions
=
kMaxSubdivionsPerCubicSection
)
;
template
<
AppendCubicFn
AppendLeft
AppendCubicFn
AppendRight
>
inline
void
chopCubic
(
const
Sk2f
&
p0
const
Sk2f
&
p1
const
Sk2f
&
p2
const
Sk2f
&
p3
float
T
int
maxFutureSubdivisions
=
kMaxSubdivionsPerCubicSection
)
;
void
appendMonotonicCubics
(
const
Sk2f
&
p0
const
Sk2f
&
p1
const
Sk2f
&
p2
const
Sk2f
&
p3
int
maxSubdivisions
=
kMaxSubdivionsPerCubicSection
)
;
void
appendCubicApproximation
(
const
Sk2f
&
p0
const
Sk2f
&
p1
const
Sk2f
&
p2
const
Sk2f
&
p3
int
maxSubdivisions
=
kMaxSubdivionsPerCubicSection
)
;
SkPoint
fCurrAnchorPoint
;
SkPoint
fCurrFanPoint
;
PrimitiveTallies
fCurrContourTallies
;
SkCubicType
fCurrCubicType
;
SkDEBUGCODE
(
bool
fBuildingContour
=
false
)
;
SkSTArray
<
128
SkPoint
true
>
fPoints
;
SkSTArray
<
128
Verb
true
>
fVerbs
;
}
;
inline
void
GrCCGeometry
:
:
PrimitiveTallies
:
:
operator
+
=
(
const
PrimitiveTallies
&
b
)
{
fTriangles
+
=
b
.
fTriangles
;
fWoundTriangles
+
=
b
.
fWoundTriangles
;
fQuadratics
+
=
b
.
fQuadratics
;
fCubics
+
=
b
.
fCubics
;
}
GrCCGeometry
:
:
PrimitiveTallies
inline
GrCCGeometry
:
:
PrimitiveTallies
:
:
operator
-
(
const
PrimitiveTallies
&
b
)
const
{
return
{
fTriangles
-
b
.
fTriangles
fWoundTriangles
-
b
.
fWoundTriangles
fQuadratics
-
b
.
fQuadratics
fCubics
-
b
.
fCubics
}
;
}
inline
bool
GrCCGeometry
:
:
PrimitiveTallies
:
:
operator
=
=
(
const
PrimitiveTallies
&
b
)
{
return
fTriangles
=
=
b
.
fTriangles
&
&
fWoundTriangles
=
=
b
.
fWoundTriangles
&
&
fQuadratics
=
=
b
.
fQuadratics
&
&
fCubics
=
=
b
.
fCubics
;
}
#
endif
