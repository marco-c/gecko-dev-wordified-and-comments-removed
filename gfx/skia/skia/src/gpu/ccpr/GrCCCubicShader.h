#
ifndef
GrCCCubicShader_DEFINED
#
define
GrCCCubicShader_DEFINED
#
include
"
ccpr
/
GrCCCoverageProcessor
.
h
"
class
GrCCCubicShader
:
public
GrCCCoverageProcessor
:
:
Shader
{
protected
:
void
emitSetupCode
(
GrGLSLVertexGeoBuilder
*
const
char
*
pts
const
char
*
repetitionID
const
char
*
wind
GeometryVars
*
)
const
final
;
virtual
void
onEmitSetupCode
(
GrGLSLVertexGeoBuilder
*
const
char
*
pts
const
char
*
repetitionID
GeometryVars
*
)
const
{
}
void
onEmitVaryings
(
GrGLSLVaryingHandler
*
GrGLSLVarying
:
:
Scope
SkString
*
code
const
char
*
position
const
char
*
inputCoverage
const
char
*
wind
)
final
;
virtual
void
onEmitVaryings
(
GrGLSLVaryingHandler
*
GrGLSLVarying
:
:
Scope
SkString
*
code
)
=
0
;
void
onEmitFragmentCode
(
GrGLSLFPFragmentBuilder
*
const
char
*
outputCoverage
)
const
final
;
virtual
void
emitCoverage
(
GrGLSLFPFragmentBuilder
*
const
char
*
outputCoverage
)
const
=
0
;
GrShaderVar
fKLMMatrix
{
"
klm_matrix
"
kFloat3x3_GrSLType
}
;
GrShaderVar
fEdgeDistanceEquation
{
"
edge_distance_equation
"
kFloat3_GrSLType
}
;
GrGLSLVarying
fKLMD
;
}
;
class
GrCCCubicHullShader
:
public
GrCCCubicShader
{
void
onEmitVaryings
(
GrGLSLVaryingHandler
*
GrGLSLVarying
:
:
Scope
SkString
*
code
)
override
;
void
emitCoverage
(
GrGLSLFPFragmentBuilder
*
const
char
*
outputCoverage
)
const
override
;
GrGLSLVarying
fGradMatrix
;
}
;
class
GrCCCubicCornerShader
:
public
GrCCCubicShader
{
void
onEmitSetupCode
(
GrGLSLVertexGeoBuilder
*
const
char
*
pts
const
char
*
repetitionID
GeometryVars
*
)
const
override
;
void
onEmitVaryings
(
GrGLSLVaryingHandler
*
GrGLSLVarying
:
:
Scope
SkString
*
code
)
override
;
void
emitCoverage
(
GrGLSLFPFragmentBuilder
*
const
char
*
outputCoverage
)
const
override
;
GrGLSLVarying
fdKLMDdx
;
GrGLSLVarying
fdKLMDdy
;
}
;
#
endif
