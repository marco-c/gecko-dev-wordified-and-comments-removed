#
ifndef
GrCCPathParser_DEFINED
#
define
GrCCPathParser_DEFINED
#
include
"
GrMesh
.
h
"
#
include
"
SkPathPriv
.
h
"
#
include
"
SkRect
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
GrTessellator
.
h
"
#
include
"
ccpr
/
GrCCCoverageProcessor
.
h
"
#
include
"
ccpr
/
GrCCFillGeometry
.
h
"
#
include
"
ops
/
GrDrawOp
.
h
"
class
GrOnFlushResourceProvider
;
class
SkMatrix
;
class
SkPath
;
class
GrCCFiller
{
public
:
GrCCFiller
(
int
numPaths
int
numSkPoints
int
numSkVerbs
int
numConicWeights
)
;
void
parseDeviceSpaceFill
(
const
SkPath
&
const
SkPoint
*
deviceSpacePts
GrScissorTest
const
SkIRect
&
clippedDevIBounds
const
SkIVector
&
devToAtlasOffset
)
;
using
BatchID
=
int
;
BatchID
closeCurrentBatch
(
)
;
bool
prepareToDraw
(
GrOnFlushResourceProvider
*
)
;
void
drawFills
(
GrOpFlushState
*
BatchID
const
SkIRect
&
drawBounds
)
const
;
private
:
static
constexpr
int
kNumScissorModes
=
2
;
using
PrimitiveTallies
=
GrCCFillGeometry
:
:
PrimitiveTallies
;
class
PathInfo
{
public
:
PathInfo
(
GrScissorTest
scissorTest
const
SkIVector
&
devToAtlasOffset
)
:
fScissorTest
(
scissorTest
)
fDevToAtlasOffset
(
devToAtlasOffset
)
{
}
GrScissorTest
scissorTest
(
)
const
{
return
fScissorTest
;
}
const
SkIVector
&
devToAtlasOffset
(
)
const
{
return
fDevToAtlasOffset
;
}
bool
hasFanTessellation
(
)
const
{
return
fFanTessellationCount
>
=
0
;
}
int
fanTessellationCount
(
)
const
{
SkASSERT
(
this
-
>
hasFanTessellation
(
)
)
;
return
fFanTessellationCount
;
}
const
GrTessellator
:
:
WindingVertex
*
fanTessellation
(
)
const
{
SkASSERT
(
this
-
>
hasFanTessellation
(
)
)
;
return
fFanTessellation
.
get
(
)
;
}
void
tessellateFan
(
const
GrCCFillGeometry
&
int
verbsIdx
int
ptsIdx
const
SkIRect
&
clippedDevIBounds
PrimitiveTallies
*
newTriangleCounts
)
;
private
:
GrScissorTest
fScissorTest
;
SkIVector
fDevToAtlasOffset
;
int
fFanTessellationCount
=
-
1
;
std
:
:
unique_ptr
<
const
GrTessellator
:
:
WindingVertex
[
]
>
fFanTessellation
;
}
;
struct
Batch
{
PrimitiveTallies
fEndNonScissorIndices
;
int
fEndScissorSubBatchIdx
;
PrimitiveTallies
fTotalPrimitiveCounts
;
}
;
struct
ScissorSubBatch
{
PrimitiveTallies
fEndPrimitiveIndices
;
SkIRect
fScissor
;
}
;
void
drawPrimitives
(
GrOpFlushState
*
const
GrPipeline
&
BatchID
GrCCCoverageProcessor
:
:
PrimitiveType
int
PrimitiveTallies
:
:
*
instanceType
const
SkIRect
&
drawBounds
)
const
;
GrCCFillGeometry
fGeometry
;
SkSTArray
<
32
PathInfo
true
>
fPathInfos
;
SkSTArray
<
32
Batch
true
>
fBatches
;
SkSTArray
<
32
ScissorSubBatch
true
>
fScissorSubBatches
;
PrimitiveTallies
fTotalPrimitiveCounts
[
kNumScissorModes
]
;
int
fMaxMeshesPerDraw
=
0
;
sk_sp
<
GrGpuBuffer
>
fInstanceBuffer
;
PrimitiveTallies
fBaseInstances
[
kNumScissorModes
]
;
mutable
SkSTArray
<
32
GrMesh
>
fMeshesScratchBuffer
;
mutable
SkSTArray
<
32
SkIRect
>
fScissorRectScratchBuffer
;
}
;
#
endif
