#
ifndef
GrGSCoverageProcessor_DEFINED
#
define
GrGSCoverageProcessor_DEFINED
#
include
"
src
/
gpu
/
ccpr
/
GrCCCoverageProcessor
.
h
"
class
GrGSCoverageProcessor
:
public
GrCCCoverageProcessor
{
public
:
GrGSCoverageProcessor
(
)
:
GrCCCoverageProcessor
(
kGrGSCoverageProcessor_ClassID
)
{
this
-
>
setWillUseGeoShader
(
)
;
}
private
:
void
reset
(
PrimitiveType
GrResourceProvider
*
)
override
;
void
getGLSLProcessorKey
(
const
GrShaderCaps
&
GrProcessorKeyBuilder
*
b
)
const
override
{
SkDEBUGCODE
(
this
-
>
getDebugBloatKey
(
b
)
)
;
b
-
>
add32
(
(
(
int
)
fPrimitiveType
<
<
16
)
|
(
int
)
fSubpass
)
;
}
void
appendMesh
(
sk_sp
<
const
GrGpuBuffer
>
instanceBuffer
int
instanceCount
int
baseInstance
SkTArray
<
GrMesh
>
*
out
)
const
override
;
void
draw
(
GrOpFlushState
*
const
GrPipeline
&
const
SkIRect
scissorRects
[
]
const
GrMesh
[
]
int
meshCount
const
SkRect
&
drawBounds
)
const
override
;
GrGLSLPrimitiveProcessor
*
onCreateGLSLInstance
(
std
:
:
unique_ptr
<
Shader
>
)
const
override
;
enum
class
Subpass
:
bool
{
kHulls
kCorners
}
;
Attribute
fInputXOrYValues
;
mutable
Subpass
fSubpass
=
Subpass
:
:
kHulls
;
class
Impl
;
class
TriangleHullImpl
;
class
CurveHullImpl
;
class
CornerImpl
;
}
;
#
endif
