#
ifndef
GrUserStencilSettings_DEFINED
#
define
GrUserStencilSettings_DEFINED
#
include
"
GrTypes
.
h
"
enum
GrStencilFlags
{
kDisabled_StencilFlag
=
0x1
kNoModifyStencil_StencilFlag
=
0x2
kNoWrapOps_StencilFlag
=
0x4
kSingleSided_StencilFlag
=
0x8
kLast_StencilFlag
=
kSingleSided_StencilFlag
kAll_StencilFlags
=
kLast_StencilFlag
|
(
kLast_StencilFlag
-
1
)
}
;
template
<
typename
TTest
typename
TOp
>
struct
GrTStencilFaceSettings
{
uint16_t
fRef
;
TTest
fTest
;
uint16_t
fTestMask
;
TOp
fPassOp
;
TOp
fFailOp
;
uint16_t
fWriteMask
;
}
;
enum
class
GrUserStencilTest
:
uint16_t
{
kAlwaysIfInClip
kEqualIfInClip
kLessIfInClip
kLEqualIfInClip
kAlways
kNever
kGreater
kGEqual
kLess
kLEqual
kEqual
kNotEqual
}
;
constexpr
static
GrUserStencilTest
kLastClippedStencilTest
=
GrUserStencilTest
:
:
kLEqualIfInClip
;
constexpr
static
int
kGrUserStencilTestCount
=
1
+
(
int
)
GrUserStencilTest
:
:
kNotEqual
;
enum
class
GrUserStencilOp
:
uint8_t
{
kKeep
kZero
kReplace
kInvert
kIncWrap
kDecWrap
kIncMaybeClamp
kDecMaybeClamp
kZeroClipBit
kSetClipBit
kInvertClipBit
kSetClipAndReplaceUserBits
kZeroClipAndUserBits
}
;
constexpr
static
GrUserStencilOp
kLastUserOnlyStencilOp
=
GrUserStencilOp
:
:
kDecMaybeClamp
;
constexpr
static
GrUserStencilOp
kLastClipOnlyStencilOp
=
GrUserStencilOp
:
:
kInvertClipBit
;
constexpr
static
int
kGrUserStencilOpCount
=
1
+
(
int
)
GrUserStencilOp
:
:
kZeroClipAndUserBits
;
struct
GrUserStencilSettings
{
typedef
GrTStencilFaceSettings
<
GrUserStencilTest
GrUserStencilOp
>
Face
;
template
<
GrUserStencilTest
GrUserStencilOp
PassOp
GrUserStencilOp
FailOp
>
struct
Attrs
;
template
<
uint16_t
Ref
GrUserStencilTest
Test
uint16_t
TestMask
GrUserStencilOp
PassOp
GrUserStencilOp
FailOp
uint16_t
WriteMask
>
struct
Init
{
}
;
template
<
uint16_t
FtRef
uint16_t
BkRef
GrUserStencilTest
FtTest
GrUserStencilTest
BkTest
uint16_t
FtTestMask
uint16_t
BkTestMask
GrUserStencilOp
FtPassOp
GrUserStencilOp
BkPassOp
GrUserStencilOp
FtFailOp
GrUserStencilOp
BkFailOp
uint16_t
FtWriteMask
uint16_t
BkWriteMask
>
struct
InitSeparate
{
}
;
template
<
uint16_t
Ref
GrUserStencilTest
Test
uint16_t
TestMask
GrUserStencilOp
PassOp
GrUserStencilOp
FailOp
uint16_t
WriteMask
>
constexpr
static
Init
<
Ref
Test
TestMask
PassOp
FailOp
WriteMask
>
StaticInit
(
)
{
return
Init
<
Ref
Test
TestMask
PassOp
FailOp
WriteMask
>
(
)
;
}
template
<
uint16_t
FtRef
uint16_t
BkRef
GrUserStencilTest
FtTest
GrUserStencilTest
BkTest
uint16_t
FtTestMask
uint16_t
BkTestMask
GrUserStencilOp
FtPassOp
GrUserStencilOp
BkPassOp
GrUserStencilOp
FtFailOp
GrUserStencilOp
BkFailOp
uint16_t
FtWriteMask
uint16_t
BkWriteMask
>
constexpr
static
InitSeparate
<
FtRef
BkRef
FtTest
BkTest
FtTestMask
BkTestMask
FtPassOp
BkPassOp
FtFailOp
BkFailOp
FtWriteMask
BkWriteMask
>
StaticInitSeparate
(
)
{
return
InitSeparate
<
FtRef
BkRef
FtTest
BkTest
FtTestMask
BkTestMask
FtPassOp
BkPassOp
FtFailOp
BkFailOp
FtWriteMask
BkWriteMask
>
(
)
;
}
template
<
uint16_t
Ref
GrUserStencilTest
Test
uint16_t
TestMask
GrUserStencilOp
PassOp
GrUserStencilOp
FailOp
uint16_t
WriteMask
typename
Attrs
=
Attrs
<
Test
PassOp
FailOp
>
>
constexpr
explicit
GrUserStencilSettings
(
const
Init
<
Ref
Test
TestMask
PassOp
FailOp
WriteMask
>
&
)
:
fFrontFlags
{
(
uint16_t
)
(
Attrs
:
:
Flags
(
false
)
|
kSingleSided_StencilFlag
)
(
uint16_t
)
(
Attrs
:
:
Flags
(
true
)
|
kSingleSided_StencilFlag
)
}
fFront
{
Ref
Test
Attrs
:
:
EffectiveTestMask
(
TestMask
)
PassOp
FailOp
Attrs
:
:
EffectiveWriteMask
(
WriteMask
)
}
fBackFlags
{
(
uint16_t
)
(
Attrs
:
:
Flags
(
false
)
|
kSingleSided_StencilFlag
)
(
uint16_t
)
(
Attrs
:
:
Flags
(
true
)
|
kSingleSided_StencilFlag
)
}
fBack
{
Ref
Test
Attrs
:
:
EffectiveTestMask
(
TestMask
)
PassOp
FailOp
Attrs
:
:
EffectiveWriteMask
(
WriteMask
)
}
{
}
template
<
uint16_t
FtRef
uint16_t
BkRef
GrUserStencilTest
FtTest
GrUserStencilTest
BkTest
uint16_t
FtTestMask
uint16_t
BkTestMask
GrUserStencilOp
FtPassOp
GrUserStencilOp
BkPassOp
GrUserStencilOp
FtFailOp
GrUserStencilOp
BkFailOp
uint16_t
FtWriteMask
uint16_t
BkWriteMask
typename
FtAttrs
=
Attrs
<
FtTest
FtPassOp
FtFailOp
>
typename
BkAttrs
=
Attrs
<
BkTest
BkPassOp
BkFailOp
>
>
constexpr
explicit
GrUserStencilSettings
(
const
InitSeparate
<
FtRef
BkRef
FtTest
BkTest
FtTestMask
BkTestMask
FtPassOp
BkPassOp
FtFailOp
BkFailOp
FtWriteMask
BkWriteMask
>
&
)
:
fFrontFlags
{
FtAttrs
:
:
Flags
(
false
)
FtAttrs
:
:
Flags
(
true
)
}
fFront
{
FtRef
FtTest
FtAttrs
:
:
EffectiveTestMask
(
FtTestMask
)
FtPassOp
FtFailOp
FtAttrs
:
:
EffectiveWriteMask
(
FtWriteMask
)
}
fBackFlags
{
BkAttrs
:
:
Flags
(
false
)
BkAttrs
:
:
Flags
(
true
)
}
fBack
{
BkRef
BkTest
BkAttrs
:
:
EffectiveTestMask
(
BkTestMask
)
BkPassOp
BkFailOp
BkAttrs
:
:
EffectiveWriteMask
(
BkWriteMask
)
}
{
}
GrUserStencilSettings
(
)
=
delete
;
GrUserStencilSettings
(
const
GrUserStencilSettings
&
)
=
delete
;
const
uint16_t
fFrontFlags
[
2
]
;
const
Face
fFront
;
const
uint16_t
fBackFlags
[
2
]
;
const
Face
fBack
;
static
const
GrUserStencilSettings
&
kUnused
;
bool
isUnused
(
)
const
{
return
this
=
=
&
kUnused
;
}
}
;
template
<
GrUserStencilTest
Test
GrUserStencilOp
PassOp
GrUserStencilOp
FailOp
>
struct
GrUserStencilSettings
:
:
Attrs
{
GR_STATIC_ASSERT
(
GrUserStencilOp
:
:
kKeep
=
=
PassOp
|
|
GrUserStencilOp
:
:
kKeep
=
=
FailOp
|
|
(
PassOp
<
=
kLastUserOnlyStencilOp
)
=
=
(
FailOp
<
=
kLastUserOnlyStencilOp
)
)
;
GR_STATIC_ASSERT
(
GrUserStencilOp
:
:
kKeep
=
=
PassOp
|
|
GrUserStencilOp
:
:
kKeep
=
=
FailOp
|
|
(
PassOp
<
=
kLastClipOnlyStencilOp
)
=
=
(
FailOp
<
=
kLastClipOnlyStencilOp
)
)
;
constexpr
static
bool
TestAlwaysPasses
(
bool
hasStencilClip
)
{
return
(
!
hasStencilClip
&
&
GrUserStencilTest
:
:
kAlwaysIfInClip
=
=
Test
)
|
|
GrUserStencilTest
:
:
kAlways
=
=
Test
;
}
constexpr
static
bool
DoesNotModifyStencil
(
bool
hasStencilClip
)
{
return
(
GrUserStencilTest
:
:
kNever
=
=
Test
|
|
GrUserStencilOp
:
:
kKeep
=
=
PassOp
)
&
&
(
TestAlwaysPasses
(
hasStencilClip
)
|
|
GrUserStencilOp
:
:
kKeep
=
=
FailOp
)
;
}
constexpr
static
bool
IsDisabled
(
bool
hasStencilClip
)
{
return
TestAlwaysPasses
(
hasStencilClip
)
&
&
DoesNotModifyStencil
(
hasStencilClip
)
;
}
constexpr
static
bool
UsesWrapOps
(
)
{
return
GrUserStencilOp
:
:
kIncWrap
=
=
PassOp
|
|
GrUserStencilOp
:
:
kDecWrap
=
=
PassOp
|
|
GrUserStencilOp
:
:
kIncWrap
=
=
FailOp
|
|
GrUserStencilOp
:
:
kDecWrap
=
=
FailOp
;
}
constexpr
static
bool
TestIgnoresRef
(
)
{
return
(
GrUserStencilTest
:
:
kAlwaysIfInClip
=
=
Test
|
|
GrUserStencilTest
:
:
kAlways
=
=
Test
|
|
GrUserStencilTest
:
:
kNever
=
=
Test
)
;
}
constexpr
static
uint16_t
Flags
(
bool
hasStencilClip
)
{
return
(
IsDisabled
(
hasStencilClip
)
?
kDisabled_StencilFlag
:
0
)
|
(
DoesNotModifyStencil
(
hasStencilClip
)
?
kNoModifyStencil_StencilFlag
:
0
)
|
(
UsesWrapOps
(
)
?
0
:
kNoWrapOps_StencilFlag
)
;
}
constexpr
static
uint16_t
EffectiveTestMask
(
uint16_t
testMask
)
{
return
TestIgnoresRef
(
)
?
0
:
testMask
;
}
constexpr
static
uint16_t
EffectiveWriteMask
(
uint16_t
writeMask
)
{
return
DoesNotModifyStencil
(
true
)
?
0
:
writeMask
;
}
}
;
#
endif
