#
include
"
GrOpList
.
h
"
#
include
"
GrRenderTargetOpList
.
h
"
#
include
"
GrSurface
.
h
"
#
include
"
GrSurfaceProxy
.
h
"
uint32_t
GrOpList
:
:
CreateUniqueID
(
)
{
static
int32_t
gUniqueID
=
SK_InvalidUniqueID
;
uint32_t
id
;
do
{
id
=
static_cast
<
uint32_t
>
(
sk_atomic_inc
(
&
gUniqueID
)
+
1
)
;
}
while
(
id
=
=
SK_InvalidUniqueID
)
;
return
id
;
}
GrOpList
:
:
GrOpList
(
GrSurfaceProxy
*
surfaceProxy
GrAuditTrail
*
auditTrail
)
:
fUniqueID
(
CreateUniqueID
(
)
)
fFlags
(
0
)
fTarget
(
surfaceProxy
)
fAuditTrail
(
auditTrail
)
{
surfaceProxy
-
>
setLastOpList
(
this
)
;
}
GrOpList
:
:
~
GrOpList
(
)
{
if
(
fTarget
&
&
this
=
=
fTarget
-
>
getLastOpList
(
)
)
{
fTarget
-
>
setLastOpList
(
nullptr
)
;
}
}
void
GrOpList
:
:
addDependency
(
GrOpList
*
dependedOn
)
{
SkASSERT
(
!
dependedOn
-
>
dependsOn
(
this
)
)
;
if
(
this
-
>
dependsOn
(
dependedOn
)
)
{
return
;
}
*
fDependencies
.
push
(
)
=
dependedOn
;
}
void
GrOpList
:
:
addDependency
(
GrSurface
*
dependedOn
)
{
if
(
dependedOn
-
>
getLastOpList
(
)
)
{
SkASSERT
(
!
this
-
>
isClosed
(
)
)
;
GrOpList
*
opList
=
dependedOn
-
>
getLastOpList
(
)
;
if
(
opList
=
=
this
)
{
}
else
{
this
-
>
addDependency
(
opList
)
;
opList
-
>
makeClosed
(
)
;
}
}
}
#
ifdef
SK_DEBUG
void
GrOpList
:
:
dump
(
)
const
{
SkDebugf
(
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
SkDebugf
(
"
node
:
%
d
-
>
RT
:
%
d
\
n
"
fUniqueID
fTarget
?
fTarget
-
>
uniqueID
(
)
.
asUInt
(
)
:
-
1
)
;
SkDebugf
(
"
relies
On
(
%
d
)
:
"
fDependencies
.
count
(
)
)
;
for
(
int
i
=
0
;
i
<
fDependencies
.
count
(
)
;
+
+
i
)
{
SkDebugf
(
"
%
d
"
fDependencies
[
i
]
-
>
fUniqueID
)
;
}
SkDebugf
(
"
\
n
"
)
;
}
#
endif
