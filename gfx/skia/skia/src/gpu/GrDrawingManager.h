#
ifndef
GrDrawingManager_DEFINED
#
define
GrDrawingManager_DEFINED
#
include
"
GrPathRenderer
.
h
"
#
include
"
GrPathRendererChain
.
h
"
#
include
"
GrResourceCache
.
h
"
#
include
"
SkTArray
.
h
"
#
include
"
text
/
GrTextContext
.
h
"
class
GrContext
;
class
GrCoverageCountingPathRenderer
;
class
GrOnFlushCallbackObject
;
class
GrRenderTargetContext
;
class
GrRenderTargetProxy
;
class
GrSingleOWner
;
class
GrRenderTargetOpList
;
class
GrSoftwarePathRenderer
;
class
GrTextureContext
;
class
GrTextureOpList
;
class
SkDeferredDisplayList
;
class
GrDrawingManager
{
public
:
~
GrDrawingManager
(
)
;
bool
wasAbandoned
(
)
const
{
return
fAbandoned
;
}
void
freeGpuResources
(
)
;
sk_sp
<
GrRenderTargetContext
>
makeRenderTargetContext
(
sk_sp
<
GrSurfaceProxy
>
sk_sp
<
SkColorSpace
>
const
SkSurfaceProps
*
bool
managedOpList
=
true
)
;
sk_sp
<
GrTextureContext
>
makeTextureContext
(
sk_sp
<
GrSurfaceProxy
>
sk_sp
<
SkColorSpace
>
)
;
sk_sp
<
GrRenderTargetOpList
>
newRTOpList
(
GrRenderTargetProxy
*
rtp
bool
managedOpList
)
;
sk_sp
<
GrTextureOpList
>
newTextureOpList
(
GrTextureProxy
*
textureProxy
)
;
GrContext
*
getContext
(
)
{
return
fContext
;
}
GrTextContext
*
getTextContext
(
)
;
GrPathRenderer
*
getPathRenderer
(
const
GrPathRenderer
:
:
CanDrawPathArgs
&
args
bool
allowSW
GrPathRendererChain
:
:
DrawType
drawType
GrPathRenderer
:
:
StencilSupport
*
stencilSupport
=
nullptr
)
;
GrPathRenderer
*
getSoftwarePathRenderer
(
)
;
GrCoverageCountingPathRenderer
*
getCoverageCountingPathRenderer
(
)
;
void
flushIfNecessary
(
)
;
static
bool
ProgramUnitTest
(
GrContext
*
context
int
maxStages
int
maxLevels
)
;
GrSemaphoresSubmitted
prepareSurfaceForExternalIO
(
GrSurfaceProxy
*
int
numSemaphores
GrBackendSemaphore
backendSemaphores
[
]
)
;
void
addOnFlushCallbackObject
(
GrOnFlushCallbackObject
*
)
;
void
testingOnly_removeOnFlushCallbackObject
(
GrOnFlushCallbackObject
*
)
;
void
moveOpListsToDDL
(
SkDeferredDisplayList
*
ddl
)
;
void
copyOpListsFromDDL
(
const
SkDeferredDisplayList
*
GrRenderTargetProxy
*
newDest
)
;
private
:
class
OpListDAG
{
public
:
OpListDAG
(
bool
explicitlyAllocating
GrContextOptions
:
:
Enable
sortOpLists
)
;
~
OpListDAG
(
)
;
void
prepForFlush
(
)
;
void
closeAll
(
const
GrCaps
*
caps
)
;
void
cleanup
(
const
GrCaps
*
caps
)
;
void
gatherIDs
(
SkSTArray
<
8
uint32_t
true
>
*
idArray
)
const
;
void
reset
(
)
;
void
removeOpList
(
int
index
)
;
void
removeOpLists
(
int
startIndex
int
stopIndex
)
;
bool
empty
(
)
const
{
return
fOpLists
.
empty
(
)
;
}
int
numOpLists
(
)
const
{
return
fOpLists
.
count
(
)
;
}
GrOpList
*
opList
(
int
index
)
{
return
fOpLists
[
index
]
.
get
(
)
;
}
const
GrOpList
*
opList
(
int
index
)
const
{
return
fOpLists
[
index
]
.
get
(
)
;
}
GrOpList
*
back
(
)
{
return
fOpLists
.
back
(
)
.
get
(
)
;
}
const
GrOpList
*
back
(
)
const
{
return
fOpLists
.
back
(
)
.
get
(
)
;
}
void
add
(
sk_sp
<
GrOpList
>
)
;
void
add
(
const
SkTArray
<
sk_sp
<
GrOpList
>
>
&
)
;
void
swap
(
SkTArray
<
sk_sp
<
GrOpList
>
>
*
opLists
)
;
bool
sortingOpLists
(
)
const
{
return
fSortOpLists
;
}
private
:
SkTArray
<
sk_sp
<
GrOpList
>
>
fOpLists
;
bool
fSortOpLists
;
}
;
GrDrawingManager
(
GrContext
*
const
GrPathRendererChain
:
:
Options
&
const
GrTextContext
:
:
Options
&
GrSingleOwner
*
bool
explicitlyAllocating
GrContextOptions
:
:
Enable
sortRenderTargets
GrContextOptions
:
:
Enable
reduceOpListSplitting
)
;
void
abandon
(
)
;
void
cleanup
(
)
;
bool
executeOpLists
(
int
startIndex
int
stopIndex
GrOpFlushState
*
)
;
GrSemaphoresSubmitted
flush
(
GrSurfaceProxy
*
proxy
int
numSemaphores
=
0
GrBackendSemaphore
backendSemaphores
[
]
=
nullptr
)
;
SkDEBUGCODE
(
void
validate
(
)
const
)
;
friend
class
GrContext
;
friend
class
GrContextPriv
;
friend
class
GrOnFlushResourceProvider
;
static
const
int
kNumPixelGeometries
=
5
;
static
const
int
kNumDFTOptions
=
2
;
GrContext
*
fContext
;
GrPathRendererChain
:
:
Options
fOptionsForPathRendererChain
;
GrTextContext
:
:
Options
fOptionsForTextContext
;
GrSingleOwner
*
fSingleOwner
;
bool
fAbandoned
;
OpListDAG
fDAG
;
GrOpList
*
fActiveOpList
=
nullptr
;
SkSTArray
<
8
uint32_t
true
>
fFlushingOpListIDs
;
SkSTArray
<
8
sk_sp
<
GrOpList
>
>
fOnFlushCBOpLists
;
std
:
:
unique_ptr
<
GrTextContext
>
fTextContext
;
std
:
:
unique_ptr
<
GrPathRendererChain
>
fPathRendererChain
;
sk_sp
<
GrSoftwarePathRenderer
>
fSoftwarePathRenderer
;
GrTokenTracker
fTokenTracker
;
bool
fFlushing
;
bool
fReduceOpListSplitting
;
SkTArray
<
GrOnFlushCallbackObject
*
>
fOnFlushCBObjects
;
}
;
#
endif
