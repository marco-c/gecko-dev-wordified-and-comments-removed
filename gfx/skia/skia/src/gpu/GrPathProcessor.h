#
ifndef
GrPathProcessor_DEFINED
#
define
GrPathProcessor_DEFINED
#
include
"
GrPrimitiveProcessor
.
h
"
class
GrPathProcessor
:
public
GrPrimitiveProcessor
{
public
:
static
GrPathProcessor
*
Create
(
GrColor
color
const
SkMatrix
&
viewMatrix
=
SkMatrix
:
:
I
(
)
const
SkMatrix
&
localMatrix
=
SkMatrix
:
:
I
(
)
)
{
return
new
GrPathProcessor
(
color
viewMatrix
localMatrix
)
;
}
const
char
*
name
(
)
const
override
{
return
"
PathProcessor
"
;
}
GrColor
color
(
)
const
{
return
fColor
;
}
const
SkMatrix
&
viewMatrix
(
)
const
{
return
fViewMatrix
;
}
const
SkMatrix
&
localMatrix
(
)
const
{
return
fLocalMatrix
;
}
bool
willUseGeoShader
(
)
const
override
{
return
false
;
}
virtual
void
getGLSLProcessorKey
(
const
GrShaderCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
override
;
virtual
GrGLSLPrimitiveProcessor
*
createGLSLInstance
(
const
GrShaderCaps
&
caps
)
const
override
;
virtual
bool
isPathRendering
(
)
const
override
{
return
true
;
}
private
:
GrPathProcessor
(
GrColor
const
SkMatrix
&
viewMatrix
const
SkMatrix
&
localMatrix
)
;
bool
hasExplicitLocalCoords
(
)
const
override
{
return
false
;
}
GrColor
fColor
;
const
SkMatrix
fViewMatrix
;
const
SkMatrix
fLocalMatrix
;
typedef
GrPrimitiveProcessor
INHERITED
;
}
;
#
endif
