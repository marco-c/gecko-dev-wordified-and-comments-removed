#
include
"
GrSurfaceProxy
.
h
"
#
include
"
GrSurfaceProxyPriv
.
h
"
#
include
"
GrCaps
.
h
"
#
include
"
GrContext
.
h
"
#
include
"
GrContextPriv
.
h
"
#
include
"
GrGpuResourcePriv
.
h
"
#
include
"
GrOpList
.
h
"
#
include
"
GrProxyProvider
.
h
"
#
include
"
GrSurfaceContext
.
h
"
#
include
"
GrTexturePriv
.
h
"
#
include
"
GrTextureRenderTargetProxy
.
h
"
#
include
"
SkMathPriv
.
h
"
#
include
"
SkMipMap
.
h
"
#
ifdef
SK_DEBUG
static
bool
is_valid_fully_lazy
(
const
GrSurfaceDesc
&
desc
SkBackingFit
fit
)
{
return
desc
.
fWidth
<
=
0
&
&
desc
.
fHeight
<
=
0
&
&
desc
.
fConfig
!
=
kUnknown_GrPixelConfig
&
&
desc
.
fSampleCnt
=
=
1
&
&
SkBackingFit
:
:
kApprox
=
=
fit
;
}
static
bool
is_valid_partially_lazy
(
const
GrSurfaceDesc
&
desc
)
{
return
(
(
desc
.
fWidth
>
0
&
&
desc
.
fHeight
>
0
)
|
|
(
desc
.
fWidth
<
=
0
&
&
desc
.
fHeight
<
=
0
)
)
&
&
desc
.
fConfig
!
=
kUnknown_GrPixelConfig
;
}
static
bool
is_valid_non_lazy
(
const
GrSurfaceDesc
&
desc
)
{
return
desc
.
fWidth
>
0
&
&
desc
.
fHeight
>
0
&
&
desc
.
fConfig
!
=
kUnknown_GrPixelConfig
;
}
#
endif
GrSurfaceProxy
:
:
GrSurfaceProxy
(
LazyInstantiateCallback
&
&
callback
LazyInstantiationType
lazyType
const
GrSurfaceDesc
&
desc
SkBackingFit
fit
SkBudgeted
budgeted
uint32_t
flags
)
:
fConfig
(
desc
.
fConfig
)
fWidth
(
desc
.
fWidth
)
fHeight
(
desc
.
fHeight
)
fOrigin
(
desc
.
fOrigin
)
fFit
(
fit
)
fBudgeted
(
budgeted
)
fFlags
(
flags
)
fLazyInstantiateCallback
(
std
:
:
move
(
callback
)
)
fLazyInstantiationType
(
lazyType
)
fNeedsClear
(
SkToBool
(
desc
.
fFlags
&
kPerformInitialClear_GrSurfaceFlag
)
)
fGpuMemorySize
(
kInvalidGpuMemorySize
)
fLastOpList
(
nullptr
)
{
if
(
fLazyInstantiateCallback
)
{
SkASSERT
(
is_valid_fully_lazy
(
desc
fit
)
|
|
is_valid_partially_lazy
(
desc
)
)
;
}
else
{
SkASSERT
(
is_valid_non_lazy
(
desc
)
)
;
}
}
GrSurfaceProxy
:
:
GrSurfaceProxy
(
sk_sp
<
GrSurface
>
surface
GrSurfaceOrigin
origin
SkBackingFit
fit
)
:
INHERITED
(
std
:
:
move
(
surface
)
)
fConfig
(
fTarget
-
>
config
(
)
)
fWidth
(
fTarget
-
>
width
(
)
)
fHeight
(
fTarget
-
>
height
(
)
)
fOrigin
(
origin
)
fFit
(
fit
)
fBudgeted
(
fTarget
-
>
resourcePriv
(
)
.
isBudgeted
(
)
)
fFlags
(
0
)
fUniqueID
(
fTarget
-
>
uniqueID
(
)
)
fNeedsClear
(
false
)
fGpuMemorySize
(
kInvalidGpuMemorySize
)
fLastOpList
(
nullptr
)
{
}
GrSurfaceProxy
:
:
~
GrSurfaceProxy
(
)
{
if
(
fLazyInstantiateCallback
)
{
this
-
>
fLazyInstantiateCallback
(
nullptr
)
;
}
SkASSERT
(
!
fLastOpList
)
;
}
bool
GrSurfaceProxyPriv
:
:
AttachStencilIfNeeded
(
GrResourceProvider
*
resourceProvider
GrSurface
*
surface
bool
needsStencil
)
{
if
(
needsStencil
)
{
GrRenderTarget
*
rt
=
surface
-
>
asRenderTarget
(
)
;
if
(
!
rt
)
{
SkASSERT
(
0
)
;
return
false
;
}
if
(
!
resourceProvider
-
>
attachStencilAttachment
(
rt
)
)
{
return
false
;
}
}
return
true
;
}
sk_sp
<
GrSurface
>
GrSurfaceProxy
:
:
createSurfaceImpl
(
GrResourceProvider
*
resourceProvider
int
sampleCnt
bool
needsStencil
GrSurfaceFlags
flags
GrMipMapped
mipMapped
)
const
{
SkASSERT
(
GrSurfaceProxy
:
:
LazyState
:
:
kNot
=
=
this
-
>
lazyInstantiationState
(
)
)
;
SkASSERT
(
!
fTarget
)
;
GrSurfaceDesc
desc
;
desc
.
fFlags
=
flags
;
if
(
fNeedsClear
)
{
desc
.
fFlags
|
=
kPerformInitialClear_GrSurfaceFlag
;
}
desc
.
fOrigin
=
fOrigin
;
desc
.
fWidth
=
fWidth
;
desc
.
fHeight
=
fHeight
;
desc
.
fConfig
=
fConfig
;
desc
.
fSampleCnt
=
sampleCnt
;
sk_sp
<
GrSurface
>
surface
;
if
(
GrMipMapped
:
:
kYes
=
=
mipMapped
)
{
SkASSERT
(
SkBackingFit
:
:
kExact
=
=
fFit
)
;
int
mipCount
=
SkMipMap
:
:
ComputeLevelCount
(
desc
.
fWidth
desc
.
fHeight
)
+
1
;
SkASSERT
(
mipCount
>
1
)
;
std
:
:
unique_ptr
<
GrMipLevel
[
]
>
texels
(
new
GrMipLevel
[
mipCount
]
)
;
for
(
int
i
=
0
;
i
<
mipCount
;
i
+
+
)
{
texels
[
i
]
.
fPixels
=
nullptr
;
texels
[
i
]
.
fRowBytes
=
0
;
}
surface
=
resourceProvider
-
>
createTexture
(
desc
fBudgeted
texels
.
get
(
)
mipCount
SkDestinationSurfaceColorMode
:
:
kLegacy
)
;
if
(
surface
)
{
SkASSERT
(
surface
-
>
asTexture
(
)
)
;
SkASSERT
(
GrMipMapped
:
:
kYes
=
=
surface
-
>
asTexture
(
)
-
>
texturePriv
(
)
.
mipMapped
(
)
)
;
}
}
else
{
if
(
SkBackingFit
:
:
kApprox
=
=
fFit
)
{
surface
=
resourceProvider
-
>
createApproxTexture
(
desc
fFlags
)
;
}
else
{
surface
=
resourceProvider
-
>
createTexture
(
desc
fBudgeted
fFlags
)
;
}
}
if
(
!
surface
)
{
return
nullptr
;
}
if
(
!
GrSurfaceProxyPriv
:
:
AttachStencilIfNeeded
(
resourceProvider
surface
.
get
(
)
needsStencil
)
)
{
return
nullptr
;
}
return
surface
;
}
void
GrSurfaceProxy
:
:
assign
(
sk_sp
<
GrSurface
>
surface
)
{
SkASSERT
(
!
fTarget
&
&
surface
)
;
fTarget
=
surface
.
release
(
)
;
this
-
>
INHERITED
:
:
transferRefs
(
)
;
#
ifdef
SK_DEBUG
if
(
kInvalidGpuMemorySize
!
=
this
-
>
getRawGpuMemorySize_debugOnly
(
)
)
{
SkASSERT
(
fTarget
-
>
gpuMemorySize
(
)
<
=
this
-
>
getRawGpuMemorySize_debugOnly
(
)
)
;
}
#
endif
}
bool
GrSurfaceProxy
:
:
instantiateImpl
(
GrResourceProvider
*
resourceProvider
int
sampleCnt
bool
needsStencil
GrSurfaceFlags
flags
GrMipMapped
mipMapped
const
GrUniqueKey
*
uniqueKey
)
{
SkASSERT
(
LazyState
:
:
kNot
=
=
this
-
>
lazyInstantiationState
(
)
)
;
if
(
fTarget
)
{
if
(
uniqueKey
)
{
SkASSERT
(
fTarget
-
>
getUniqueKey
(
)
=
=
*
uniqueKey
)
;
}
return
GrSurfaceProxyPriv
:
:
AttachStencilIfNeeded
(
resourceProvider
fTarget
needsStencil
)
;
}
sk_sp
<
GrSurface
>
surface
=
this
-
>
createSurfaceImpl
(
resourceProvider
sampleCnt
needsStencil
flags
mipMapped
)
;
if
(
!
surface
)
{
return
false
;
}
if
(
uniqueKey
&
&
uniqueKey
-
>
isValid
(
)
)
{
resourceProvider
-
>
assignUniqueKeyToResource
(
*
uniqueKey
surface
.
get
(
)
)
;
}
this
-
>
assign
(
std
:
:
move
(
surface
)
)
;
return
true
;
}
void
GrSurfaceProxy
:
:
computeScratchKey
(
GrScratchKey
*
key
)
const
{
SkASSERT
(
LazyState
:
:
kFully
!
=
this
-
>
lazyInstantiationState
(
)
)
;
const
GrRenderTargetProxy
*
rtp
=
this
-
>
asRenderTargetProxy
(
)
;
int
sampleCount
=
1
;
if
(
rtp
)
{
sampleCount
=
rtp
-
>
numStencilSamples
(
)
;
}
const
GrTextureProxy
*
tp
=
this
-
>
asTextureProxy
(
)
;
GrMipMapped
mipMapped
=
GrMipMapped
:
:
kNo
;
if
(
tp
)
{
mipMapped
=
tp
-
>
mipMapped
(
)
;
}
int
width
=
this
-
>
worstCaseWidth
(
)
;
int
height
=
this
-
>
worstCaseHeight
(
)
;
GrTexturePriv
:
:
ComputeScratchKey
(
this
-
>
config
(
)
width
height
SkToBool
(
rtp
)
sampleCount
mipMapped
key
)
;
}
void
GrSurfaceProxy
:
:
setLastOpList
(
GrOpList
*
opList
)
{
#
ifdef
SK_DEBUG
if
(
fLastOpList
)
{
SkASSERT
(
fLastOpList
-
>
isClosed
(
)
)
;
}
#
endif
fLastOpList
=
opList
;
}
GrRenderTargetOpList
*
GrSurfaceProxy
:
:
getLastRenderTargetOpList
(
)
{
return
fLastOpList
?
fLastOpList
-
>
asRenderTargetOpList
(
)
:
nullptr
;
}
GrTextureOpList
*
GrSurfaceProxy
:
:
getLastTextureOpList
(
)
{
return
fLastOpList
?
fLastOpList
-
>
asTextureOpList
(
)
:
nullptr
;
}
int
GrSurfaceProxy
:
:
worstCaseWidth
(
)
const
{
SkASSERT
(
LazyState
:
:
kFully
!
=
this
-
>
lazyInstantiationState
(
)
)
;
if
(
fTarget
)
{
return
fTarget
-
>
width
(
)
;
}
if
(
SkBackingFit
:
:
kExact
=
=
fFit
)
{
return
fWidth
;
}
return
SkTMax
(
GrResourceProvider
:
:
kMinScratchTextureSize
GrNextPow2
(
fWidth
)
)
;
}
int
GrSurfaceProxy
:
:
worstCaseHeight
(
)
const
{
SkASSERT
(
LazyState
:
:
kFully
!
=
this
-
>
lazyInstantiationState
(
)
)
;
if
(
fTarget
)
{
return
fTarget
-
>
height
(
)
;
}
if
(
SkBackingFit
:
:
kExact
=
=
fFit
)
{
return
fHeight
;
}
return
SkTMax
(
GrResourceProvider
:
:
kMinScratchTextureSize
GrNextPow2
(
fHeight
)
)
;
}
#
ifdef
SK_DEBUG
void
GrSurfaceProxy
:
:
validate
(
GrContext
*
context
)
const
{
if
(
fTarget
)
{
SkASSERT
(
fTarget
-
>
getContext
(
)
=
=
context
)
;
}
INHERITED
:
:
validate
(
)
;
}
#
endif
sk_sp
<
GrTextureProxy
>
GrSurfaceProxy
:
:
Copy
(
GrContext
*
context
GrSurfaceProxy
*
src
GrMipMapped
mipMapped
SkIRect
srcRect
SkBudgeted
budgeted
)
{
SkASSERT
(
LazyState
:
:
kFully
!
=
src
-
>
lazyInstantiationState
(
)
)
;
if
(
!
srcRect
.
intersect
(
SkIRect
:
:
MakeWH
(
src
-
>
width
(
)
src
-
>
height
(
)
)
)
)
{
return
nullptr
;
}
GrSurfaceDesc
dstDesc
;
dstDesc
.
fOrigin
=
src
-
>
origin
(
)
;
dstDesc
.
fWidth
=
srcRect
.
width
(
)
;
dstDesc
.
fHeight
=
srcRect
.
height
(
)
;
dstDesc
.
fConfig
=
src
-
>
config
(
)
;
sk_sp
<
SkColorSpace
>
colorSpace
;
if
(
GrPixelConfigIsSRGB
(
dstDesc
.
fConfig
)
)
{
colorSpace
=
SkColorSpace
:
:
MakeSRGB
(
)
;
}
sk_sp
<
GrSurfaceContext
>
dstContext
(
context
-
>
contextPriv
(
)
.
makeDeferredSurfaceContext
(
dstDesc
mipMapped
SkBackingFit
:
:
kExact
budgeted
std
:
:
move
(
colorSpace
)
)
)
;
if
(
!
dstContext
)
{
return
nullptr
;
}
if
(
!
dstContext
-
>
copy
(
src
srcRect
SkIPoint
:
:
Make
(
0
0
)
)
)
{
return
nullptr
;
}
return
dstContext
-
>
asTextureProxyRef
(
)
;
}
sk_sp
<
GrTextureProxy
>
GrSurfaceProxy
:
:
Copy
(
GrContext
*
context
GrSurfaceProxy
*
src
GrMipMapped
mipMapped
SkBudgeted
budgeted
)
{
SkASSERT
(
LazyState
:
:
kFully
!
=
src
-
>
lazyInstantiationState
(
)
)
;
return
Copy
(
context
src
mipMapped
SkIRect
:
:
MakeWH
(
src
-
>
width
(
)
src
-
>
height
(
)
)
budgeted
)
;
}
sk_sp
<
GrSurfaceContext
>
GrSurfaceProxy
:
:
TestCopy
(
GrContext
*
context
const
GrSurfaceDesc
&
dstDesc
GrSurfaceProxy
*
srcProxy
)
{
SkASSERT
(
LazyState
:
:
kFully
!
=
srcProxy
-
>
lazyInstantiationState
(
)
)
;
sk_sp
<
GrSurfaceContext
>
dstContext
(
context
-
>
contextPriv
(
)
.
makeDeferredSurfaceContext
(
dstDesc
GrMipMapped
:
:
kNo
SkBackingFit
:
:
kExact
SkBudgeted
:
:
kYes
)
)
;
if
(
!
dstContext
)
{
return
nullptr
;
}
if
(
!
dstContext
-
>
copy
(
srcProxy
)
)
{
return
nullptr
;
}
return
dstContext
;
}
void
GrSurfaceProxyPriv
:
:
exactify
(
)
{
SkASSERT
(
GrSurfaceProxy
:
:
LazyState
:
:
kFully
!
=
fProxy
-
>
lazyInstantiationState
(
)
)
;
if
(
this
-
>
isExact
(
)
)
{
return
;
}
SkASSERT
(
SkBackingFit
:
:
kApprox
=
=
fProxy
-
>
fFit
)
;
if
(
fProxy
-
>
fTarget
)
{
fProxy
-
>
fWidth
=
fProxy
-
>
fTarget
-
>
width
(
)
;
fProxy
-
>
fHeight
=
fProxy
-
>
fTarget
-
>
height
(
)
;
return
;
}
fProxy
-
>
fFit
=
SkBackingFit
:
:
kExact
;
}
bool
GrSurfaceProxyPriv
:
:
doLazyInstantiation
(
GrResourceProvider
*
resourceProvider
)
{
SkASSERT
(
GrSurfaceProxy
:
:
LazyState
:
:
kNot
!
=
fProxy
-
>
lazyInstantiationState
(
)
)
;
sk_sp
<
GrSurface
>
surface
=
fProxy
-
>
fLazyInstantiateCallback
(
resourceProvider
)
;
if
(
GrSurfaceProxy
:
:
LazyInstantiationType
:
:
kSingleUse
=
=
fProxy
-
>
fLazyInstantiationType
)
{
fProxy
-
>
fLazyInstantiateCallback
(
nullptr
)
;
fProxy
-
>
fLazyInstantiateCallback
=
nullptr
;
}
if
(
!
surface
)
{
fProxy
-
>
fWidth
=
0
;
fProxy
-
>
fHeight
=
0
;
return
false
;
}
fProxy
-
>
fWidth
=
surface
-
>
width
(
)
;
fProxy
-
>
fHeight
=
surface
-
>
height
(
)
;
SkASSERT
(
surface
-
>
config
(
)
=
=
fProxy
-
>
fConfig
)
;
SkDEBUGCODE
(
fProxy
-
>
validateLazySurface
(
surface
.
get
(
)
)
;
)
this
-
>
assign
(
std
:
:
move
(
surface
)
)
;
return
true
;
}
