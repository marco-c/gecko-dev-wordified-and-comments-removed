#
ifndef
GrRenderTargetContextPriv_DEFINED
#
define
GrRenderTargetContextPriv_DEFINED
#
include
"
GrRenderTargetContext
.
h
"
#
include
"
GrRenderTargetOpList
.
h
"
#
include
"
GrPathRendering
.
h
"
class
GrFixedClip
;
class
GrHardClip
;
class
GrPath
;
class
GrRenderTargetPriv
;
struct
GrUserStencilSettings
;
class
GrRenderTargetContextPriv
{
public
:
void
setLastClip
(
uint32_t
clipStackGenID
const
SkIRect
&
devClipBounds
int
numClipAnalyticFPs
)
{
GrRenderTargetOpList
*
opList
=
fRenderTargetContext
-
>
getRTOpList
(
)
;
opList
-
>
fLastClipStackGenID
=
clipStackGenID
;
opList
-
>
fLastDevClipBounds
=
devClipBounds
;
opList
-
>
fLastClipNumAnalyticFPs
=
numClipAnalyticFPs
;
}
bool
mustRenderClip
(
uint32_t
clipStackGenID
const
SkIRect
&
devClipBounds
int
numClipAnalyticFPs
)
const
{
GrRenderTargetOpList
*
opList
=
fRenderTargetContext
-
>
getRTOpList
(
)
;
return
opList
-
>
fLastClipStackGenID
!
=
clipStackGenID
|
|
!
opList
-
>
fLastDevClipBounds
.
contains
(
devClipBounds
)
|
|
opList
-
>
fLastClipNumAnalyticFPs
!
=
numClipAnalyticFPs
;
}
using
CanClearFullscreen
=
GrRenderTargetContext
:
:
CanClearFullscreen
;
void
clear
(
const
GrFixedClip
&
const
GrColor
CanClearFullscreen
)
;
void
clearStencilClip
(
const
GrFixedClip
&
bool
insideStencilMask
)
;
void
absClear
(
const
SkIRect
*
rect
const
GrColor
color
)
;
void
stencilRect
(
const
GrHardClip
&
const
GrUserStencilSettings
*
ss
GrAAType
const
SkMatrix
&
viewMatrix
const
SkRect
&
rect
)
;
void
stencilPath
(
const
GrHardClip
&
GrAAType
const
SkMatrix
&
viewMatrix
const
GrPath
*
)
;
bool
drawAndStencilRect
(
const
GrHardClip
&
const
GrUserStencilSettings
*
SkRegion
:
:
Op
op
bool
invert
GrAA
const
SkMatrix
&
viewMatrix
const
SkRect
&
)
;
bool
drawAndStencilPath
(
const
GrHardClip
&
const
GrUserStencilSettings
*
SkRegion
:
:
Op
op
bool
invert
GrAA
const
SkMatrix
&
viewMatrix
const
SkPath
&
)
;
SkBudgeted
isBudgeted
(
)
const
;
int
maxWindowRectangles
(
)
const
;
GrSurfaceProxy
:
:
UniqueID
uniqueID
(
)
const
{
return
fRenderTargetContext
-
>
fRenderTargetProxy
-
>
uniqueID
(
)
;
}
uint32_t
testingOnly_getOpListID
(
)
;
uint32_t
testingOnly_addDrawOp
(
std
:
:
unique_ptr
<
GrDrawOp
>
)
;
uint32_t
testingOnly_addDrawOp
(
const
GrClip
&
std
:
:
unique_ptr
<
GrDrawOp
>
)
;
bool
refsWrappedObjects
(
)
const
{
return
fRenderTargetContext
-
>
fRenderTargetProxy
-
>
refsWrappedObjects
(
)
;
}
private
:
explicit
GrRenderTargetContextPriv
(
GrRenderTargetContext
*
renderTargetContext
)
:
fRenderTargetContext
(
renderTargetContext
)
{
}
GrRenderTargetContextPriv
(
const
GrRenderTargetPriv
&
)
{
}
GrRenderTargetContextPriv
&
operator
=
(
const
GrRenderTargetPriv
&
)
;
const
GrRenderTargetContextPriv
*
operator
&
(
)
const
;
GrRenderTargetContextPriv
*
operator
&
(
)
;
GrRenderTargetContext
*
fRenderTargetContext
;
friend
class
GrRenderTargetContext
;
}
;
inline
GrRenderTargetContextPriv
GrRenderTargetContext
:
:
priv
(
)
{
return
GrRenderTargetContextPriv
(
this
)
;
}
inline
const
GrRenderTargetContextPriv
GrRenderTargetContext
:
:
priv
(
)
const
{
return
GrRenderTargetContextPriv
(
const_cast
<
GrRenderTargetContext
*
>
(
this
)
)
;
}
#
endif
