#
ifndef
GrGradientShader_DEFINE
#
define
GrGradientShader_DEFINE
#
include
"
GrFPArgs
.
h
"
#
include
"
GrFragmentProcessor
.
h
"
#
include
"
SkGradientShaderPriv
.
h
"
#
include
"
SkLinearGradient
.
h
"
#
include
"
SkRadialGradient
.
h
"
#
include
"
SkSweepGradient
.
h
"
#
include
"
SkTwoPointConicalGradient
.
h
"
#
if
GR_TEST_UTILS
#
include
"
SkRandom
.
h
"
#
endif
namespace
GrGradientShader
{
std
:
:
unique_ptr
<
GrFragmentProcessor
>
MakeLinear
(
const
SkLinearGradient
&
shader
const
GrFPArgs
&
args
)
;
std
:
:
unique_ptr
<
GrFragmentProcessor
>
MakeRadial
(
const
SkRadialGradient
&
shader
const
GrFPArgs
&
args
)
;
std
:
:
unique_ptr
<
GrFragmentProcessor
>
MakeSweep
(
const
SkSweepGradient
&
shader
const
GrFPArgs
&
args
)
;
std
:
:
unique_ptr
<
GrFragmentProcessor
>
MakeConical
(
const
SkTwoPointConicalGradient
&
shader
const
GrFPArgs
&
args
)
;
#
if
GR_TEST_UTILS
struct
RandomParams
{
static
constexpr
int
kMaxRandomGradientColors
=
5
;
static
constexpr
SkScalar
kGradientScale
=
256
.
0f
;
RandomParams
(
SkRandom
*
r
)
;
bool
fUseColors4f
;
SkColor
fColors
[
kMaxRandomGradientColors
]
;
SkColor4f
fColors4f
[
kMaxRandomGradientColors
]
;
sk_sp
<
SkColorSpace
>
fColorSpace
;
SkScalar
fStopStorage
[
kMaxRandomGradientColors
]
;
SkShader
:
:
TileMode
fTileMode
;
int
fColorCount
;
SkScalar
*
fStops
;
}
;
#
endif
}
#
endif
