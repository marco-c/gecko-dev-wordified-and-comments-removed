#
include
"
GrVkDescriptorPool
.
h
"
#
include
"
GrVkGpu
.
h
"
#
include
"
SkTemplates
.
h
"
GrVkDescriptorPool
:
:
GrVkDescriptorPool
(
const
GrVkGpu
*
gpu
VkDescriptorType
type
uint32_t
count
)
:
INHERITED
(
)
fType
(
type
)
fCount
(
count
)
{
VkDescriptorPoolSize
poolSize
;
memset
(
&
poolSize
0
sizeof
(
VkDescriptorPoolSize
)
)
;
poolSize
.
descriptorCount
=
count
;
poolSize
.
type
=
type
;
VkDescriptorPoolCreateInfo
createInfo
;
memset
(
&
createInfo
0
sizeof
(
VkDescriptorPoolCreateInfo
)
)
;
createInfo
.
sType
=
VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO
;
createInfo
.
pNext
=
nullptr
;
createInfo
.
flags
=
0
;
createInfo
.
maxSets
=
count
;
createInfo
.
poolSizeCount
=
1
;
createInfo
.
pPoolSizes
=
&
poolSize
;
GR_VK_CALL_ERRCHECK
(
gpu
-
>
vkInterface
(
)
CreateDescriptorPool
(
gpu
-
>
device
(
)
&
createInfo
nullptr
&
fDescPool
)
)
;
}
bool
GrVkDescriptorPool
:
:
isCompatible
(
VkDescriptorType
type
uint32_t
count
)
const
{
return
fType
=
=
type
&
&
count
<
=
fCount
;
}
void
GrVkDescriptorPool
:
:
reset
(
const
GrVkGpu
*
gpu
)
{
GR_VK_CALL_ERRCHECK
(
gpu
-
>
vkInterface
(
)
ResetDescriptorPool
(
gpu
-
>
device
(
)
fDescPool
0
)
)
;
}
void
GrVkDescriptorPool
:
:
freeGPUData
(
GrVkGpu
*
gpu
)
const
{
GR_VK_CALL
(
gpu
-
>
vkInterface
(
)
DestroyDescriptorPool
(
gpu
-
>
device
(
)
fDescPool
nullptr
)
)
;
}
