#
ifndef
GrVkPipelineStateBuilder_DEFINED
#
define
GrVkPipelineStateBuilder_DEFINED
#
include
"
include
/
gpu
/
vk
/
GrVkTypes
.
h
"
#
include
"
src
/
gpu
/
GrPipeline
.
h
"
#
include
"
src
/
gpu
/
GrProgramDesc
.
h
"
#
include
"
src
/
gpu
/
glsl
/
GrGLSLProgramBuilder
.
h
"
#
include
"
src
/
gpu
/
vk
/
GrVkPipelineState
.
h
"
#
include
"
src
/
gpu
/
vk
/
GrVkUniformHandler
.
h
"
#
include
"
src
/
gpu
/
vk
/
GrVkVaryingHandler
.
h
"
#
include
"
src
/
sksl
/
SkSLCompiler
.
h
"
class
GrVkGpu
;
class
GrVkRenderPass
;
class
SkReader32
;
class
GrVkPipelineStateBuilder
:
public
GrGLSLProgramBuilder
{
public
:
class
Desc
:
public
GrProgramDesc
{
public
:
static
bool
Build
(
Desc
*
GrRenderTarget
*
const
GrProgramInfo
&
const
GrStencilSettings
&
GrPrimitiveType
primitiveType
GrVkGpu
*
gpu
)
;
size_t
shaderKeyLength
(
)
const
{
return
fShaderKeyLength
;
}
private
:
size_t
fShaderKeyLength
;
typedef
GrProgramDesc
INHERITED
;
}
;
static
GrVkPipelineState
*
CreatePipelineState
(
GrVkGpu
*
GrRenderTarget
*
const
GrProgramInfo
&
const
GrStencilSettings
&
GrPrimitiveType
Desc
*
VkRenderPass
compatibleRenderPass
)
;
const
GrCaps
*
caps
(
)
const
override
;
GrVkGpu
*
gpu
(
)
const
{
return
fGpu
;
}
void
finalizeFragmentOutputColor
(
GrShaderVar
&
outputColor
)
override
;
void
finalizeFragmentSecondaryColor
(
GrShaderVar
&
outputColor
)
override
;
private
:
GrVkPipelineStateBuilder
(
GrVkGpu
*
GrRenderTarget
*
const
GrProgramInfo
&
GrProgramDesc
*
)
;
GrVkPipelineState
*
finalize
(
const
GrStencilSettings
&
GrPrimitiveType
primitiveType
VkRenderPass
compatibleRenderPass
Desc
*
)
;
int
loadShadersFromCache
(
SkReader32
*
cached
VkShaderModule
outShaderModules
[
]
VkPipelineShaderStageCreateInfo
*
outStageInfo
)
;
void
storeShadersInCache
(
const
SkSL
:
:
String
shaders
[
]
const
SkSL
:
:
Program
:
:
Inputs
inputs
[
]
bool
isSkSL
)
;
bool
createVkShaderModule
(
VkShaderStageFlagBits
stage
const
SkSL
:
:
String
&
sksl
VkShaderModule
*
shaderModule
VkPipelineShaderStageCreateInfo
*
stageInfo
const
SkSL
:
:
Program
:
:
Settings
&
settings
Desc
*
desc
SkSL
:
:
String
*
outSPIRV
SkSL
:
:
Program
:
:
Inputs
*
outInputs
)
;
bool
installVkShaderModule
(
VkShaderStageFlagBits
stage
const
GrGLSLShaderBuilder
&
builder
VkShaderModule
*
shaderModule
VkPipelineShaderStageCreateInfo
*
stageInfo
SkSL
:
:
String
spirv
SkSL
:
:
Program
:
:
Inputs
inputs
)
;
GrGLSLUniformHandler
*
uniformHandler
(
)
override
{
return
&
fUniformHandler
;
}
const
GrGLSLUniformHandler
*
uniformHandler
(
)
const
override
{
return
&
fUniformHandler
;
}
GrGLSLVaryingHandler
*
varyingHandler
(
)
override
{
return
&
fVaryingHandler
;
}
GrVkGpu
*
fGpu
;
GrVkVaryingHandler
fVaryingHandler
;
GrVkUniformHandler
fUniformHandler
;
typedef
GrGLSLProgramBuilder
INHERITED
;
}
;
#
endif
