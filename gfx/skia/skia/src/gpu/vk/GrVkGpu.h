#
ifndef
GrVkGpu_DEFINED
#
define
GrVkGpu_DEFINED
#
include
"
GrGpu
.
h
"
#
include
"
GrGpuFactory
.
h
"
#
include
"
vk
/
GrVkBackendContext
.
h
"
#
include
"
GrVkCaps
.
h
"
#
include
"
GrVkCopyManager
.
h
"
#
include
"
GrVkIndexBuffer
.
h
"
#
include
"
GrVkMemory
.
h
"
#
include
"
GrVkResourceProvider
.
h
"
#
include
"
GrVkSemaphore
.
h
"
#
include
"
GrVkVertexBuffer
.
h
"
#
include
"
GrVkUtil
.
h
"
#
include
"
vk
/
GrVkDefines
.
h
"
class
GrPipeline
;
class
GrVkBufferImpl
;
class
GrVkPipeline
;
class
GrVkPipelineState
;
class
GrVkPrimaryCommandBuffer
;
class
GrVkRenderPass
;
class
GrVkSecondaryCommandBuffer
;
class
GrVkTexture
;
struct
GrVkInterface
;
namespace
SkSL
{
class
Compiler
;
}
class
GrVkGpu
:
public
GrGpu
{
public
:
static
sk_sp
<
GrGpu
>
Make
(
GrBackendContext
backendContext
const
GrContextOptions
&
GrContext
*
)
;
static
sk_sp
<
GrGpu
>
Make
(
sk_sp
<
const
GrVkBackendContext
>
const
GrContextOptions
&
GrContext
*
)
;
~
GrVkGpu
(
)
override
;
void
disconnect
(
DisconnectType
)
override
;
const
GrVkInterface
*
vkInterface
(
)
const
{
return
fBackendContext
-
>
fInterface
.
get
(
)
;
}
const
GrVkCaps
&
vkCaps
(
)
const
{
return
*
fVkCaps
;
}
VkDevice
device
(
)
const
{
return
fDevice
;
}
VkQueue
queue
(
)
const
{
return
fQueue
;
}
VkCommandPool
cmdPool
(
)
const
{
return
fCmdPool
;
}
VkPhysicalDeviceProperties
physicalDeviceProperties
(
)
const
{
return
fPhysDevProps
;
}
VkPhysicalDeviceMemoryProperties
physicalDeviceMemoryProperties
(
)
const
{
return
fPhysDevMemProps
;
}
GrVkResourceProvider
&
resourceProvider
(
)
{
return
fResourceProvider
;
}
GrVkPrimaryCommandBuffer
*
currentCommandBuffer
(
)
{
return
fCurrentCmdBuffer
;
}
enum
SyncQueue
{
kForce_SyncQueue
kSkip_SyncQueue
}
;
void
xferBarrier
(
GrRenderTarget
*
GrXferBarrierType
)
override
{
}
GrBackendTexture
createTestingOnlyBackendTexture
(
void
*
pixels
int
w
int
h
GrPixelConfig
config
bool
isRenderTarget
GrMipMapped
)
override
;
bool
isTestingOnlyBackendTexture
(
const
GrBackendTexture
&
)
const
override
;
void
deleteTestingOnlyBackendTexture
(
GrBackendTexture
*
bool
abandonTexture
=
false
)
override
;
GrStencilAttachment
*
createStencilAttachmentForRenderTarget
(
const
GrRenderTarget
*
int
width
int
height
)
override
;
void
clearStencil
(
GrRenderTarget
*
target
int
clearValue
)
override
;
GrGpuRTCommandBuffer
*
createCommandBuffer
(
GrRenderTarget
*
GrSurfaceOrigin
const
GrGpuRTCommandBuffer
:
:
LoadAndStoreInfo
&
const
GrGpuRTCommandBuffer
:
:
StencilLoadAndStoreInfo
&
)
override
;
GrGpuTextureCommandBuffer
*
createCommandBuffer
(
GrTexture
*
GrSurfaceOrigin
)
override
;
void
addMemoryBarrier
(
VkPipelineStageFlags
srcStageMask
VkPipelineStageFlags
dstStageMask
bool
byRegion
VkMemoryBarrier
*
barrier
)
const
;
void
addBufferMemoryBarrier
(
VkPipelineStageFlags
srcStageMask
VkPipelineStageFlags
dstStageMask
bool
byRegion
VkBufferMemoryBarrier
*
barrier
)
const
;
void
addImageMemoryBarrier
(
VkPipelineStageFlags
srcStageMask
VkPipelineStageFlags
dstStageMask
bool
byRegion
VkImageMemoryBarrier
*
barrier
)
const
;
SkSL
:
:
Compiler
*
shaderCompiler
(
)
const
{
return
fCompiler
;
}
void
onResolveRenderTarget
(
GrRenderTarget
*
target
)
override
{
this
-
>
internalResolveRenderTarget
(
target
true
)
;
}
void
submitSecondaryCommandBuffer
(
const
SkTArray
<
GrVkSecondaryCommandBuffer
*
>
&
const
GrVkRenderPass
*
const
VkClearValue
*
colorClear
GrVkRenderTarget
*
GrSurfaceOrigin
const
SkIRect
&
bounds
)
;
GrFence
SK_WARN_UNUSED_RESULT
insertFence
(
)
override
;
bool
waitFence
(
GrFence
uint64_t
timeout
)
override
;
void
deleteFence
(
GrFence
)
const
override
;
sk_sp
<
GrSemaphore
>
SK_WARN_UNUSED_RESULT
makeSemaphore
(
bool
isOwned
)
override
;
sk_sp
<
GrSemaphore
>
wrapBackendSemaphore
(
const
GrBackendSemaphore
&
semaphore
GrResourceProvider
:
:
SemaphoreWrapType
wrapType
GrWrapOwnership
ownership
)
override
;
void
insertSemaphore
(
sk_sp
<
GrSemaphore
>
semaphore
bool
flush
)
override
;
void
waitSemaphore
(
sk_sp
<
GrSemaphore
>
semaphore
)
override
;
sk_sp
<
GrSemaphore
>
prepareTextureForCrossContextUsage
(
GrTexture
*
)
override
;
void
generateMipmap
(
GrVkTexture
*
tex
GrSurfaceOrigin
texOrigin
)
;
void
copyBuffer
(
GrVkBuffer
*
srcBuffer
GrVkBuffer
*
dstBuffer
VkDeviceSize
srcOffset
VkDeviceSize
dstOffset
VkDeviceSize
size
)
;
bool
updateBuffer
(
GrVkBuffer
*
buffer
const
void
*
src
VkDeviceSize
offset
VkDeviceSize
size
)
;
enum
Heap
{
kLinearImage_Heap
=
0
kOptimalImage_Heap
kSmallOptimalImage_Heap
kVertexBuffer_Heap
kIndexBuffer_Heap
kUniformBuffer_Heap
kTexelBuffer_Heap
kCopyReadBuffer_Heap
kCopyWriteBuffer_Heap
kLastHeap
=
kCopyWriteBuffer_Heap
}
;
static
const
int
kHeapCount
=
kLastHeap
+
1
;
GrVkHeap
*
getHeap
(
Heap
heap
)
const
{
return
fHeaps
[
heap
]
.
get
(
)
;
}
private
:
GrVkGpu
(
GrContext
*
const
GrContextOptions
&
sk_sp
<
const
GrVkBackendContext
>
backendContext
)
;
void
onResetContext
(
uint32_t
resetBits
)
override
{
}
void
destroyResources
(
)
;
sk_sp
<
GrTexture
>
onCreateTexture
(
const
GrSurfaceDesc
&
desc
SkBudgeted
budgeted
const
GrMipLevel
texels
[
]
int
mipLevelCount
)
override
;
sk_sp
<
GrTexture
>
onWrapBackendTexture
(
const
GrBackendTexture
&
GrWrapOwnership
)
override
;
sk_sp
<
GrTexture
>
onWrapRenderableBackendTexture
(
const
GrBackendTexture
&
int
sampleCnt
GrWrapOwnership
)
override
;
sk_sp
<
GrRenderTarget
>
onWrapBackendRenderTarget
(
const
GrBackendRenderTarget
&
)
override
;
sk_sp
<
GrRenderTarget
>
onWrapBackendTextureAsRenderTarget
(
const
GrBackendTexture
&
int
sampleCnt
)
override
;
GrBuffer
*
onCreateBuffer
(
size_t
size
GrBufferType
type
GrAccessPattern
const
void
*
data
)
override
;
bool
onGetReadPixelsInfo
(
GrSurface
*
GrSurfaceOrigin
int
width
int
height
size_t
rowBytes
GrColorType
DrawPreference
*
ReadPixelTempDrawInfo
*
)
override
;
bool
onGetWritePixelsInfo
(
GrSurface
*
GrSurfaceOrigin
int
width
int
height
GrColorType
DrawPreference
*
WritePixelTempDrawInfo
*
)
override
;
bool
onReadPixels
(
GrSurface
*
surface
GrSurfaceOrigin
int
left
int
top
int
width
int
height
GrColorType
void
*
buffer
size_t
rowBytes
)
override
;
bool
onWritePixels
(
GrSurface
*
surface
GrSurfaceOrigin
int
left
int
top
int
width
int
height
GrColorType
const
GrMipLevel
texels
[
]
int
mipLevelCount
)
override
;
bool
onTransferPixels
(
GrTexture
*
int
left
int
top
int
width
int
height
GrColorType
GrBuffer
*
transferBuffer
size_t
offset
size_t
rowBytes
)
override
;
bool
onCopySurface
(
GrSurface
*
dst
GrSurfaceOrigin
dstOrigin
GrSurface
*
src
GrSurfaceOrigin
srcOrigin
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
override
;
void
onFinishFlush
(
bool
insertedSemaphores
)
override
;
void
submitCommandBuffer
(
SyncQueue
sync
)
;
void
internalResolveRenderTarget
(
GrRenderTarget
*
bool
requiresSubmit
)
;
void
copySurfaceAsCopyImage
(
GrSurface
*
dst
GrSurfaceOrigin
dstOrigin
GrSurface
*
src
GrSurfaceOrigin
srcOrigin
GrVkImage
*
dstImage
GrVkImage
*
srcImage
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
;
void
copySurfaceAsBlit
(
GrSurface
*
dst
GrSurfaceOrigin
dstOrigin
GrSurface
*
src
GrSurfaceOrigin
srcOrigin
GrVkImage
*
dstImage
GrVkImage
*
srcImage
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
;
void
copySurfaceAsResolve
(
GrSurface
*
dst
GrSurfaceOrigin
dstOrigin
GrSurface
*
src
GrSurfaceOrigin
srcOrigin
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
;
bool
uploadTexDataLinear
(
GrVkTexture
*
tex
GrSurfaceOrigin
texOrigin
int
left
int
top
int
width
int
height
GrColorType
colorType
const
void
*
data
size_t
rowBytes
)
;
bool
uploadTexDataOptimal
(
GrVkTexture
*
tex
GrSurfaceOrigin
texOrigin
int
left
int
top
int
width
int
height
GrColorType
colorType
const
GrMipLevel
texels
[
]
int
mipLevelCount
)
;
void
resolveImage
(
GrSurface
*
dst
GrVkRenderTarget
*
src
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
;
sk_sp
<
const
GrVkBackendContext
>
fBackendContext
;
sk_sp
<
GrVkCaps
>
fVkCaps
;
VkDevice
fDevice
;
VkQueue
fQueue
;
GrVkResourceProvider
fResourceProvider
;
VkCommandPool
fCmdPool
;
GrVkPrimaryCommandBuffer
*
fCurrentCmdBuffer
;
SkSTArray
<
1
GrVkSemaphore
:
:
Resource
*
>
fSemaphoresToWaitOn
;
SkSTArray
<
1
GrVkSemaphore
:
:
Resource
*
>
fSemaphoresToSignal
;
VkPhysicalDeviceProperties
fPhysDevProps
;
VkPhysicalDeviceMemoryProperties
fPhysDevMemProps
;
std
:
:
unique_ptr
<
GrVkHeap
>
fHeaps
[
kHeapCount
]
;
GrVkCopyManager
fCopyManager
;
#
ifdef
SK_ENABLE_VK_LAYERS
VkDebugReportCallbackEXT
fCallback
;
#
endif
SkSL
:
:
Compiler
*
fCompiler
;
bool
fDisconnected
;
typedef
GrGpu
INHERITED
;
}
;
#
endif
