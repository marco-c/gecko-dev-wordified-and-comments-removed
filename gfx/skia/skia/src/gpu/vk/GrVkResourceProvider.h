#
ifndef
GrVkResourceProvider_DEFINED
#
define
GrVkResourceProvider_DEFINED
#
include
"
GrResourceHandle
.
h
"
#
include
"
GrVkDescriptorPool
.
h
"
#
include
"
GrVkDescriptorSetManager
.
h
"
#
include
"
GrVkPipelineStateBuilder
.
h
"
#
include
"
GrVkRenderPass
.
h
"
#
include
"
GrVkResource
.
h
"
#
include
"
GrVkSampler
.
h
"
#
include
"
GrVkSamplerYcbcrConversion
.
h
"
#
include
"
GrVkUtil
.
h
"
#
include
"
SkLRUCache
.
h
"
#
include
"
SkTArray
.
h
"
#
include
"
SkTDynamicHash
.
h
"
#
include
"
SkTInternalLList
.
h
"
#
include
"
vk
/
GrVkTypes
.
h
"
#
include
<
mutex
>
#
include
<
thread
>
class
GrVkCommandPool
;
class
GrVkCopyPipeline
;
class
GrVkGpu
;
class
GrVkPipeline
;
class
GrVkPipelineState
;
class
GrVkPrimaryCommandBuffer
;
class
GrVkRenderTarget
;
class
GrVkSecondaryCommandBuffer
;
class
GrVkUniformHandler
;
class
GrVkResourceProvider
{
public
:
GrVkResourceProvider
(
GrVkGpu
*
gpu
)
;
~
GrVkResourceProvider
(
)
;
void
init
(
)
;
GrVkPipeline
*
createPipeline
(
int
numColorSamples
const
GrPrimitiveProcessor
&
primProc
const
GrPipeline
&
pipeline
const
GrStencilSettings
&
stencil
VkPipelineShaderStageCreateInfo
*
shaderStageInfo
int
shaderStageCount
GrPrimitiveType
primitiveType
VkRenderPass
compatibleRenderPass
VkPipelineLayout
layout
)
;
GrVkCopyPipeline
*
findOrCreateCopyPipeline
(
const
GrVkRenderTarget
*
dst
VkPipelineShaderStageCreateInfo
*
VkPipelineLayout
)
;
GR_DEFINE_RESOURCE_HANDLE_CLASS
(
CompatibleRPHandle
)
;
const
GrVkRenderPass
*
findCompatibleRenderPass
(
const
GrVkRenderTarget
&
target
CompatibleRPHandle
*
compatibleHandle
=
nullptr
)
;
const
GrVkRenderPass
*
findCompatibleRenderPass
(
const
CompatibleRPHandle
&
compatibleHandle
)
;
const
GrVkRenderPass
*
findCompatibleExternalRenderPass
(
VkRenderPass
uint32_t
colorAttachmentIndex
)
;
const
GrVkRenderPass
*
findRenderPass
(
const
GrVkRenderTarget
&
target
const
GrVkRenderPass
:
:
LoadStoreOps
&
colorOps
const
GrVkRenderPass
:
:
LoadStoreOps
&
stencilOps
CompatibleRPHandle
*
compatibleHandle
=
nullptr
)
;
const
GrVkRenderPass
*
findRenderPass
(
const
CompatibleRPHandle
&
compatibleHandle
const
GrVkRenderPass
:
:
LoadStoreOps
&
colorOps
const
GrVkRenderPass
:
:
LoadStoreOps
&
stencilOps
)
;
GrVkCommandPool
*
findOrCreateCommandPool
(
)
;
void
checkCommandBuffers
(
)
;
GrVkDescriptorPool
*
findOrCreateCompatibleDescriptorPool
(
VkDescriptorType
type
uint32_t
count
)
;
GrVkSampler
*
findOrCreateCompatibleSampler
(
const
GrSamplerState
&
const
GrVkYcbcrConversionInfo
&
ycbcrInfo
)
;
GrVkSamplerYcbcrConversion
*
findOrCreateCompatibleSamplerYcbcrConversion
(
const
GrVkYcbcrConversionInfo
&
ycbcrInfo
)
;
GrVkPipelineState
*
findOrCreateCompatiblePipelineState
(
GrRenderTarget
*
GrSurfaceOrigin
const
GrPipeline
&
const
GrPrimitiveProcessor
&
const
GrTextureProxy
*
const
primProcProxies
[
]
GrPrimitiveType
VkRenderPass
compatibleRenderPass
)
;
void
getSamplerDescriptorSetHandle
(
VkDescriptorType
type
const
GrVkUniformHandler
&
GrVkDescriptorSetManager
:
:
Handle
*
handle
)
;
void
getSamplerDescriptorSetHandle
(
VkDescriptorType
type
const
SkTArray
<
uint32_t
>
&
visibilities
GrVkDescriptorSetManager
:
:
Handle
*
handle
)
;
VkDescriptorSetLayout
getUniformDSLayout
(
)
const
;
VkDescriptorSetLayout
getSamplerDSLayout
(
const
GrVkDescriptorSetManager
:
:
Handle
&
)
const
;
const
GrVkDescriptorSet
*
getUniformDescriptorSet
(
)
;
const
GrVkDescriptorSet
*
getSamplerDescriptorSet
(
const
GrVkDescriptorSetManager
:
:
Handle
&
)
;
void
recycleDescriptorSet
(
const
GrVkDescriptorSet
*
descSet
const
GrVkDescriptorSetManager
:
:
Handle
&
)
;
const
GrVkResource
*
findOrCreateStandardUniformBufferResource
(
)
;
void
recycleStandardUniformBufferResource
(
const
GrVkResource
*
)
;
void
storePipelineCacheData
(
)
;
void
destroyResources
(
bool
deviceLost
)
;
void
abandonResources
(
)
;
void
backgroundReset
(
GrVkCommandPool
*
pool
)
;
void
reset
(
GrVkCommandPool
*
pool
)
;
private
:
#
ifdef
SK_DEBUG
#
define
GR_PIPELINE_STATE_CACHE_STATS
#
endif
class
PipelineStateCache
:
public
:
:
SkNoncopyable
{
public
:
PipelineStateCache
(
GrVkGpu
*
gpu
)
;
~
PipelineStateCache
(
)
;
void
abandon
(
)
;
void
release
(
)
;
GrVkPipelineState
*
refPipelineState
(
GrRenderTarget
*
GrSurfaceOrigin
const
GrPrimitiveProcessor
&
const
GrTextureProxy
*
const
primProcProxies
[
]
const
GrPipeline
&
GrPrimitiveType
VkRenderPass
compatibleRenderPass
)
;
private
:
enum
{
kMaxEntries
=
128
}
;
struct
Entry
;
struct
DescHash
{
uint32_t
operator
(
)
(
const
GrProgramDesc
&
desc
)
const
{
return
SkOpts
:
:
hash_fn
(
desc
.
asKey
(
)
desc
.
keyLength
(
)
0
)
;
}
}
;
SkLRUCache
<
const
GrVkPipelineStateBuilder
:
:
Desc
std
:
:
unique_ptr
<
Entry
>
DescHash
>
fMap
;
GrVkGpu
*
fGpu
;
#
ifdef
GR_PIPELINE_STATE_CACHE_STATS
int
fTotalRequests
;
int
fCacheMisses
;
#
endif
}
;
class
CompatibleRenderPassSet
{
public
:
CompatibleRenderPassSet
(
const
GrVkGpu
*
gpu
const
GrVkRenderTarget
&
target
)
;
bool
isCompatible
(
const
GrVkRenderTarget
&
target
)
const
;
GrVkRenderPass
*
getCompatibleRenderPass
(
)
const
{
SkASSERT
(
fRenderPasses
[
0
]
)
;
return
fRenderPasses
[
0
]
;
}
GrVkRenderPass
*
getRenderPass
(
const
GrVkGpu
*
gpu
const
GrVkRenderPass
:
:
LoadStoreOps
&
colorOps
const
GrVkRenderPass
:
:
LoadStoreOps
&
stencilOps
)
;
void
releaseResources
(
GrVkGpu
*
gpu
)
;
void
abandonResources
(
)
;
private
:
SkSTArray
<
4
GrVkRenderPass
*
>
fRenderPasses
;
int
fLastReturnedIndex
;
}
;
VkPipelineCache
pipelineCache
(
)
;
GrVkGpu
*
fGpu
;
VkPipelineCache
fPipelineCache
;
SkTArray
<
GrVkCopyPipeline
*
>
fCopyPipelines
;
SkSTArray
<
4
CompatibleRenderPassSet
>
fRenderPassArray
;
SkTArray
<
const
GrVkRenderPass
*
>
fExternalRenderPasses
;
SkSTArray
<
4
GrVkCommandPool
*
true
>
fActiveCommandPools
;
SkSTArray
<
4
GrVkCommandPool
*
true
>
fAvailableCommandPools
;
SkSTArray
<
16
const
GrVkResource
*
true
>
fAvailableUniformBufferResources
;
SkTDynamicHash
<
GrVkSampler
GrVkSampler
:
:
Key
>
fSamplers
;
SkTDynamicHash
<
GrVkSamplerYcbcrConversion
GrVkSamplerYcbcrConversion
:
:
Key
>
fYcbcrConversions
;
PipelineStateCache
*
fPipelineStateCache
;
SkSTArray
<
4
std
:
:
unique_ptr
<
GrVkDescriptorSetManager
>
>
fDescriptorSetManagers
;
GrVkDescriptorSetManager
:
:
Handle
fUniformDSHandle
;
std
:
:
recursive_mutex
fBackgroundMutex
;
}
;
#
endif
