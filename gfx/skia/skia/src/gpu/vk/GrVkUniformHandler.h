#
ifndef
GrVkUniformHandler_DEFINED
#
define
GrVkUniformHandler_DEFINED
#
include
"
GrAllocator
.
h
"
#
include
"
GrSamplerState
.
h
"
#
include
"
GrShaderVar
.
h
"
#
include
"
GrVkSampler
.
h
"
#
include
"
glsl
/
GrGLSLUniformHandler
.
h
"
#
include
"
vk
/
GrVkTypes
.
h
"
class
GrVkUniformHandler
:
public
GrGLSLUniformHandler
{
public
:
static
const
int
kUniformsPerBlock
=
8
;
enum
{
kUniformBufferDescSet
=
0
kSamplerDescSet
=
1
}
;
enum
{
kGeometryBinding
=
0
kFragBinding
=
1
}
;
struct
UniformInfo
{
GrShaderVar
fVariable
;
uint32_t
fVisibility
;
uint32_t
fUBOffset
;
const
GrVkSampler
*
fImmutableSampler
=
nullptr
;
}
;
typedef
GrTAllocator
<
UniformInfo
>
UniformInfoArray
;
const
GrShaderVar
&
getUniformVariable
(
UniformHandle
u
)
const
override
{
return
fUniforms
[
u
.
toIndex
(
)
]
.
fVariable
;
}
const
char
*
getUniformCStr
(
UniformHandle
u
)
const
override
{
return
this
-
>
getUniformVariable
(
u
)
.
c_str
(
)
;
}
private
:
explicit
GrVkUniformHandler
(
GrGLSLProgramBuilder
*
program
)
:
INHERITED
(
program
)
fUniforms
(
kUniformsPerBlock
)
fSamplers
(
kUniformsPerBlock
)
fCurrentGeometryUBOOffset
(
0
)
fCurrentFragmentUBOOffset
(
0
)
{
}
UniformHandle
internalAddUniformArray
(
uint32_t
visibility
GrSLType
type
GrSLPrecision
precision
const
char
*
name
bool
mangleName
int
arrayCount
const
char
*
*
outName
)
override
;
SamplerHandle
addSampler
(
const
GrTexture
*
texture
const
GrSamplerState
&
const
char
*
name
const
GrShaderCaps
*
)
override
;
int
numSamplers
(
)
const
{
return
fSamplers
.
count
(
)
;
}
const
GrShaderVar
&
samplerVariable
(
SamplerHandle
handle
)
const
override
{
return
fSamplers
[
handle
.
toIndex
(
)
]
.
fVariable
;
}
GrSwizzle
samplerSwizzle
(
SamplerHandle
handle
)
const
override
{
return
fSamplerSwizzles
[
handle
.
toIndex
(
)
]
;
}
uint32_t
samplerVisibility
(
SamplerHandle
handle
)
const
{
return
fSamplers
[
handle
.
toIndex
(
)
]
.
fVisibility
;
}
const
GrVkSampler
*
immutableSampler
(
UniformHandle
u
)
const
{
return
fSamplers
[
u
.
toIndex
(
)
]
.
fImmutableSampler
;
}
void
appendUniformDecls
(
GrShaderFlags
SkString
*
)
const
override
;
bool
hasGeometryUniforms
(
)
const
{
return
fCurrentGeometryUBOOffset
>
0
;
}
bool
hasFragmentUniforms
(
)
const
{
return
fCurrentFragmentUBOOffset
>
0
;
}
const
UniformInfo
&
getUniformInfo
(
UniformHandle
u
)
const
{
return
fUniforms
[
u
.
toIndex
(
)
]
;
}
UniformInfoArray
fUniforms
;
UniformInfoArray
fSamplers
;
SkTArray
<
GrSwizzle
>
fSamplerSwizzles
;
uint32_t
fCurrentGeometryUBOOffset
;
uint32_t
fCurrentFragmentUBOOffset
;
friend
class
GrVkPipelineStateBuilder
;
friend
class
GrVkDescriptorSetManager
;
typedef
GrGLSLUniformHandler
INHERITED
;
}
;
#
endif
