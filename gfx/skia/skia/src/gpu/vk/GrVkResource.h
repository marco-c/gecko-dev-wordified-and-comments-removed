#
ifndef
GrVkResource_DEFINED
#
define
GrVkResource_DEFINED
#
include
"
SkAtomics
.
h
"
#
include
"
SkTDynamicHash
.
h
"
#
include
"
SkRandom
.
h
"
class
GrVkGpu
;
class
GrVkResource
:
SkNoncopyable
{
public
:
#
ifdef
SK_TRACE_VK_RESOURCES
static
const
uint32_t
&
GetKey
(
const
GrVkResource
&
r
)
{
return
r
.
fKey
;
}
static
uint32_t
Hash
(
const
uint32_t
&
k
)
{
return
k
;
}
static
SkTDynamicHash
<
GrVkResource
uint32_t
>
fTrace
;
static
SkRandom
fRandom
;
#
endif
GrVkResource
(
)
:
fRefCnt
(
1
)
{
#
ifdef
SK_TRACE_VK_RESOURCES
fKey
=
fRandom
.
nextU
(
)
;
fTrace
.
add
(
this
)
;
#
endif
}
virtual
~
GrVkResource
(
)
{
#
ifdef
SK_DEBUG
SkASSERTF
(
fRefCnt
=
=
1
"
fRefCnt
was
%
d
"
fRefCnt
)
;
fRefCnt
=
0
;
#
endif
}
#
ifdef
SK_DEBUG
int32_t
getRefCnt
(
)
const
{
return
fRefCnt
;
}
#
endif
bool
unique
(
)
const
{
if
(
1
=
=
sk_atomic_load
(
&
fRefCnt
sk_memory_order_acquire
)
)
{
return
true
;
}
return
false
;
}
void
ref
(
)
const
{
SkASSERT
(
fRefCnt
>
0
)
;
(
void
)
sk_atomic_fetch_add
(
&
fRefCnt
+
1
sk_memory_order_relaxed
)
;
}
void
unref
(
const
GrVkGpu
*
gpu
)
const
{
SkASSERT
(
fRefCnt
>
0
)
;
SkASSERT
(
gpu
)
;
if
(
1
=
=
sk_atomic_fetch_add
(
&
fRefCnt
-
1
sk_memory_order_acq_rel
)
)
{
this
-
>
internal_dispose
(
gpu
)
;
}
}
void
unrefAndAbandon
(
)
const
{
SkASSERT
(
fRefCnt
>
0
)
;
if
(
1
=
=
sk_atomic_fetch_add
(
&
fRefCnt
-
1
sk_memory_order_acq_rel
)
)
{
this
-
>
internal_dispose
(
)
;
}
}
#
ifdef
SK_DEBUG
void
validate
(
)
const
{
SkASSERT
(
fRefCnt
>
0
)
;
}
#
endif
private
:
virtual
void
freeGPUData
(
const
GrVkGpu
*
gpu
)
const
=
0
;
virtual
void
abandonSubResources
(
)
const
{
}
void
internal_dispose
(
const
GrVkGpu
*
gpu
)
const
{
this
-
>
freeGPUData
(
gpu
)
;
#
ifdef
SK_TRACE_VK_RESOURCES
fTrace
.
remove
(
GetKey
(
*
this
)
)
;
#
endif
SkASSERT
(
0
=
=
fRefCnt
)
;
fRefCnt
=
1
;
delete
this
;
}
void
internal_dispose
(
)
const
{
this
-
>
abandonSubResources
(
)
;
#
ifdef
SK_TRACE_VK_RESOURCES
fTrace
.
remove
(
GetKey
(
*
this
)
)
;
#
endif
SkASSERT
(
0
=
=
fRefCnt
)
;
fRefCnt
=
1
;
delete
this
;
}
mutable
int32_t
fRefCnt
;
#
ifdef
SK_TRACE_VK_RESOURCES
uint32_t
fKey
;
#
endif
typedef
SkNoncopyable
INHERITED
;
}
;
#
endif
