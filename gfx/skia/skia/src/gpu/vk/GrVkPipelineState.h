#
ifndef
GrVkPipelineState_DEFINED
#
define
GrVkPipelineState_DEFINED
#
include
"
GrProgramDesc
.
h
"
#
include
"
GrStencilSettings
.
h
"
#
include
"
GrVkDescriptorSetManager
.
h
"
#
include
"
GrVkImage
.
h
"
#
include
"
GrVkPipelineStateDataManager
.
h
"
#
include
"
glsl
/
GrGLSLProgramBuilder
.
h
"
#
include
"
vk
/
GrVkDefines
.
h
"
class
GrPipeline
;
class
GrVkCommandBuffer
;
class
GrVkDescriptorPool
;
class
GrVkDescriptorSet
;
class
GrVkGpu
;
class
GrVkImageView
;
class
GrVkPipeline
;
class
GrVkSampler
;
class
GrVkUniformBuffer
;
class
GrVkPipelineState
:
public
SkRefCnt
{
public
:
typedef
GrGLSLProgramBuilder
:
:
BuiltinUniformHandles
BuiltinUniformHandles
;
~
GrVkPipelineState
(
)
;
GrVkPipeline
*
vkPipeline
(
)
const
{
return
fPipeline
;
}
void
setData
(
GrVkGpu
*
const
GrPrimitiveProcessor
&
const
GrPipeline
&
)
;
void
bind
(
const
GrVkGpu
*
gpu
GrVkCommandBuffer
*
commandBuffer
)
;
void
addUniformResources
(
GrVkCommandBuffer
&
)
;
void
freeGPUResources
(
const
GrVkGpu
*
gpu
)
;
void
freeTempResources
(
const
GrVkGpu
*
gpu
)
;
void
abandonGPUResources
(
)
;
class
Desc
:
public
GrProgramDesc
{
public
:
static
bool
Build
(
Desc
*
const
GrPrimitiveProcessor
&
const
GrPipeline
&
GrPrimitiveType
primitiveType
const
GrGLSLCaps
&
)
;
private
:
typedef
GrProgramDesc
INHERITED
;
}
;
const
Desc
&
getDesc
(
)
{
return
fDesc
;
}
private
:
typedef
GrVkPipelineStateDataManager
:
:
UniformInfoArray
UniformInfoArray
;
typedef
GrGLSLProgramDataManager
:
:
UniformHandle
UniformHandle
;
GrVkPipelineState
(
GrVkGpu
*
gpu
const
GrVkPipelineState
:
:
Desc
&
GrVkPipeline
*
pipeline
VkPipelineLayout
layout
const
GrVkDescriptorSetManager
:
:
Handle
&
samplerDSHandle
const
BuiltinUniformHandles
&
builtinUniformHandles
const
UniformInfoArray
&
uniforms
uint32_t
vertexUniformSize
uint32_t
fragmentUniformSize
uint32_t
numSamplers
GrGLSLPrimitiveProcessor
*
geometryProcessor
GrGLSLXferProcessor
*
xferProcessor
const
GrGLSLFragProcs
&
fragmentProcessors
)
;
struct
DescriptorPoolManager
{
DescriptorPoolManager
(
VkDescriptorSetLayout
layout
VkDescriptorType
type
uint32_t
descCount
GrVkGpu
*
gpu
)
:
fDescLayout
(
layout
)
fDescType
(
type
)
fDescCountPerSet
(
descCount
)
fCurrentDescriptorCount
(
0
)
fPool
(
nullptr
)
{
SkASSERT
(
descCount
<
kMaxDescLimit
>
>
2
)
;
fMaxDescriptors
=
fDescCountPerSet
<
<
2
;
this
-
>
getNewPool
(
gpu
)
;
}
~
DescriptorPoolManager
(
)
{
SkASSERT
(
!
fDescLayout
)
;
SkASSERT
(
!
fPool
)
;
}
void
getNewDescriptorSet
(
GrVkGpu
*
gpu
VkDescriptorSet
*
ds
)
;
void
freeGPUResources
(
const
GrVkGpu
*
gpu
)
;
void
abandonGPUResources
(
)
;
VkDescriptorSetLayout
fDescLayout
;
VkDescriptorType
fDescType
;
uint32_t
fDescCountPerSet
;
uint32_t
fMaxDescriptors
;
uint32_t
fCurrentDescriptorCount
;
GrVkDescriptorPool
*
fPool
;
private
:
static
const
uint32_t
kMaxDescLimit
=
1
<
<
10
;
void
getNewPool
(
GrVkGpu
*
gpu
)
;
}
;
void
writeUniformBuffers
(
const
GrVkGpu
*
gpu
)
;
void
writeSamplers
(
GrVkGpu
*
gpu
const
SkTArray
<
const
GrTextureAccess
*
>
&
textureBindings
bool
allowSRGBInputs
)
;
struct
RenderTargetState
{
SkISize
fRenderTargetSize
;
GrSurfaceOrigin
fRenderTargetOrigin
;
RenderTargetState
(
)
{
this
-
>
invalidate
(
)
;
}
void
invalidate
(
)
{
fRenderTargetSize
.
fWidth
=
-
1
;
fRenderTargetSize
.
fHeight
=
-
1
;
fRenderTargetOrigin
=
(
GrSurfaceOrigin
)
-
1
;
}
void
getRTAdjustmentVec
(
float
*
destVec
)
{
destVec
[
0
]
=
2
.
f
/
fRenderTargetSize
.
fWidth
;
destVec
[
1
]
=
-
1
.
f
;
if
(
kBottomLeft_GrSurfaceOrigin
=
=
fRenderTargetOrigin
)
{
destVec
[
2
]
=
-
2
.
f
/
fRenderTargetSize
.
fHeight
;
destVec
[
3
]
=
1
.
f
;
}
else
{
destVec
[
2
]
=
2
.
f
/
fRenderTargetSize
.
fHeight
;
destVec
[
3
]
=
-
1
.
f
;
}
}
}
;
void
setRenderTargetState
(
const
GrPipeline
&
)
;
GrVkPipeline
*
fPipeline
;
VkPipelineLayout
fPipelineLayout
;
VkDescriptorSet
fDescriptorSets
[
2
]
;
const
GrVkDescriptorSet
*
fUniformDescriptorSet
;
const
GrVkDescriptorSet
*
fSamplerDescriptorSet
;
const
GrVkDescriptorSetManager
:
:
Handle
fSamplerDSHandle
;
int
fStartDS
;
int
fDSCount
;
SkAutoTDelete
<
GrVkUniformBuffer
>
fVertexUniformBuffer
;
SkAutoTDelete
<
GrVkUniformBuffer
>
fFragmentUniformBuffer
;
SkTDArray
<
GrVkSampler
*
>
fSamplers
;
SkTDArray
<
const
GrVkImageView
*
>
fTextureViews
;
SkTDArray
<
const
GrVkResource
*
>
fTextures
;
RenderTargetState
fRenderTargetState
;
BuiltinUniformHandles
fBuiltinUniformHandles
;
SkAutoTDelete
<
GrGLSLPrimitiveProcessor
>
fGeometryProcessor
;
SkAutoTDelete
<
GrGLSLXferProcessor
>
fXferProcessor
;
GrGLSLFragProcs
fFragmentProcessors
;
Desc
fDesc
;
GrVkPipelineStateDataManager
fDataManager
;
int
fNumSamplers
;
friend
class
GrVkPipelineStateBuilder
;
}
;
#
endif
