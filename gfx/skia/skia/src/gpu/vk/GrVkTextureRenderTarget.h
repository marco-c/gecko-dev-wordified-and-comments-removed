#
ifndef
GrVkTextureRenderTarget_DEFINED
#
define
GrVkTextureRenderTarget_DEFINED
#
include
"
include
/
gpu
/
vk
/
GrVkTypes
.
h
"
#
include
"
src
/
gpu
/
vk
/
GrVkRenderTarget
.
h
"
#
include
"
src
/
gpu
/
vk
/
GrVkTexture
.
h
"
class
GrVkGpu
;
#
ifdef
SK_BUILD_FOR_WIN
#
pragma
warning
(
push
)
#
pragma
warning
(
disable
:
4250
)
#
endif
class
GrVkImageView
;
struct
GrVkImageInfo
;
class
GrVkTextureRenderTarget
:
public
GrVkTexture
public
GrVkRenderTarget
{
public
:
static
sk_sp
<
GrVkTextureRenderTarget
>
MakeNewTextureRenderTarget
(
GrVkGpu
*
SkBudgeted
const
GrSurfaceDesc
&
int
sampleCnt
const
GrVkImage
:
:
ImageDesc
&
GrMipMapsStatus
)
;
static
sk_sp
<
GrVkTextureRenderTarget
>
MakeWrappedTextureRenderTarget
(
GrVkGpu
*
const
GrSurfaceDesc
&
int
sampleCnt
GrWrapOwnership
GrWrapCacheable
const
GrVkImageInfo
&
sk_sp
<
GrVkImageLayout
>
)
;
GrBackendFormat
backendFormat
(
)
const
override
{
return
this
-
>
getBackendFormat
(
)
;
}
protected
:
void
onAbandon
(
)
override
{
GrVkTexture
:
:
onAbandon
(
)
;
GrVkRenderTarget
:
:
onAbandon
(
)
;
}
void
onRelease
(
)
override
{
GrVkTexture
:
:
onRelease
(
)
;
GrVkRenderTarget
:
:
onRelease
(
)
;
}
private
:
GrVkTextureRenderTarget
(
GrVkGpu
*
gpu
SkBudgeted
budgeted
const
GrSurfaceDesc
&
desc
int
sampleCnt
const
GrVkImageInfo
&
info
sk_sp
<
GrVkImageLayout
>
layout
const
GrVkImageView
*
texView
const
GrVkImageInfo
&
msaaInfo
sk_sp
<
GrVkImageLayout
>
msaaLayout
const
GrVkImageView
*
colorAttachmentView
const
GrVkImageView
*
resolveAttachmentView
GrMipMapsStatus
)
;
GrVkTextureRenderTarget
(
GrVkGpu
*
gpu
SkBudgeted
budgeted
const
GrSurfaceDesc
&
desc
const
GrVkImageInfo
&
info
sk_sp
<
GrVkImageLayout
>
layout
const
GrVkImageView
*
texView
const
GrVkImageView
*
colorAttachmentView
GrMipMapsStatus
)
;
GrVkTextureRenderTarget
(
GrVkGpu
*
gpu
const
GrSurfaceDesc
&
desc
int
sampleCnt
const
GrVkImageInfo
&
info
sk_sp
<
GrVkImageLayout
>
layout
const
GrVkImageView
*
texView
const
GrVkImageInfo
&
msaaInfo
sk_sp
<
GrVkImageLayout
>
msaaLayout
const
GrVkImageView
*
colorAttachmentView
const
GrVkImageView
*
resolveAttachmentView
GrMipMapsStatus
GrBackendObjectOwnership
GrWrapCacheable
)
;
GrVkTextureRenderTarget
(
GrVkGpu
*
gpu
const
GrSurfaceDesc
&
desc
const
GrVkImageInfo
&
info
sk_sp
<
GrVkImageLayout
>
layout
const
GrVkImageView
*
texView
const
GrVkImageView
*
colorAttachmentView
GrMipMapsStatus
GrBackendObjectOwnership
GrWrapCacheable
)
;
size_t
onGpuMemorySize
(
)
const
override
;
void
onSetRelease
(
sk_sp
<
GrRefCntedCallback
>
releaseHelper
)
override
{
this
-
>
setResourceRelease
(
std
:
:
move
(
releaseHelper
)
)
;
}
}
;
#
endif
