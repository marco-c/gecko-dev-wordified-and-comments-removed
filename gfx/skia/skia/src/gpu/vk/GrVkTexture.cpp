#
include
"
GrVkTexture
.
h
"
#
include
"
GrVkGpu
.
h
"
#
include
"
GrVkImageView
.
h
"
#
include
"
GrVkUtil
.
h
"
#
include
"
vk
/
GrVkTypes
.
h
"
#
define
VK_CALL
(
GPU
X
)
GR_VK_CALL
(
GPU
-
>
vkInterface
(
)
X
)
GrVkTexture
:
:
GrVkTexture
(
GrVkGpu
*
gpu
const
GrSurfaceDesc
&
desc
GrGpuResource
:
:
LifeCycle
lifeCycle
const
GrVkImage
:
:
Resource
*
imageResource
const
GrVkImageView
*
view
)
:
GrSurface
(
gpu
lifeCycle
desc
)
GrVkImage
(
imageResource
)
INHERITED
(
gpu
lifeCycle
desc
kSampler2D_GrSLType
false
)
fTextureView
(
view
)
{
this
-
>
registerWithCache
(
)
;
}
GrVkTexture
:
:
GrVkTexture
(
GrVkGpu
*
gpu
const
GrSurfaceDesc
&
desc
GrGpuResource
:
:
LifeCycle
lifeCycle
const
GrVkImage
:
:
Resource
*
imageResource
const
GrVkImageView
*
view
Derived
)
:
GrSurface
(
gpu
lifeCycle
desc
)
GrVkImage
(
imageResource
)
INHERITED
(
gpu
lifeCycle
desc
kSampler2D_GrSLType
false
)
fTextureView
(
view
)
{
}
GrVkTexture
*
GrVkTexture
:
:
Create
(
GrVkGpu
*
gpu
const
GrSurfaceDesc
&
desc
GrGpuResource
:
:
LifeCycle
lifeCycle
VkFormat
format
const
GrVkImage
:
:
Resource
*
imageResource
)
{
VkImage
image
=
imageResource
-
>
fImage
;
const
GrVkImageView
*
imageView
=
GrVkImageView
:
:
Create
(
gpu
image
format
GrVkImageView
:
:
kColor_Type
)
;
if
(
!
imageView
)
{
return
nullptr
;
}
return
new
GrVkTexture
(
gpu
desc
lifeCycle
imageResource
imageView
)
;
}
GrVkTexture
*
GrVkTexture
:
:
CreateNewTexture
(
GrVkGpu
*
gpu
const
GrSurfaceDesc
&
desc
GrGpuResource
:
:
LifeCycle
lifeCycle
const
GrVkImage
:
:
ImageDesc
&
imageDesc
)
{
SkASSERT
(
imageDesc
.
fUsageFlags
&
VK_IMAGE_USAGE_SAMPLED_BIT
)
;
const
GrVkImage
:
:
Resource
*
imageResource
=
GrVkImage
:
:
CreateResource
(
gpu
imageDesc
)
;
if
(
!
imageResource
)
{
return
nullptr
;
}
GrVkTexture
*
texture
=
Create
(
gpu
desc
lifeCycle
imageDesc
.
fFormat
imageResource
)
;
imageResource
-
>
unref
(
gpu
)
;
return
texture
;
}
GrVkTexture
*
GrVkTexture
:
:
CreateWrappedTexture
(
GrVkGpu
*
gpu
const
GrSurfaceDesc
&
desc
GrGpuResource
:
:
LifeCycle
lifeCycle
VkFormat
format
const
GrVkTextureInfo
*
info
)
{
SkASSERT
(
info
)
;
SkASSERT
(
VK_NULL_HANDLE
!
=
info
-
>
fImage
&
&
VK_NULL_HANDLE
!
=
info
-
>
fAlloc
)
;
GrVkImage
:
:
Resource
:
:
Flags
flags
=
(
VK_IMAGE_TILING_LINEAR
=
=
info
-
>
fImageTiling
)
?
Resource
:
:
kLinearTiling_Flag
:
Resource
:
:
kNo_Flags
;
const
GrVkImage
:
:
Resource
*
imageResource
;
if
(
kBorrowed_LifeCycle
=
=
lifeCycle
)
{
imageResource
=
new
GrVkImage
:
:
BorrowedResource
(
info
-
>
fImage
info
-
>
fAlloc
flags
)
;
}
else
{
imageResource
=
new
GrVkImage
:
:
Resource
(
info
-
>
fImage
info
-
>
fAlloc
flags
)
;
}
if
(
!
imageResource
)
{
return
nullptr
;
}
GrVkTexture
*
texture
=
Create
(
gpu
desc
lifeCycle
format
imageResource
)
;
if
(
texture
)
{
texture
-
>
fCurrentLayout
=
info
-
>
fImageLayout
;
}
imageResource
-
>
unref
(
gpu
)
;
return
texture
;
}
GrVkTexture
:
:
~
GrVkTexture
(
)
{
SkASSERT
(
!
fTextureView
)
;
}
void
GrVkTexture
:
:
onRelease
(
)
{
if
(
fTextureView
)
{
fTextureView
-
>
unref
(
this
-
>
getVkGpu
(
)
)
;
fTextureView
=
nullptr
;
}
if
(
this
-
>
shouldFreeResources
(
)
)
{
this
-
>
releaseImage
(
this
-
>
getVkGpu
(
)
)
;
}
else
{
this
-
>
abandonImage
(
)
;
}
INHERITED
:
:
onRelease
(
)
;
}
void
GrVkTexture
:
:
onAbandon
(
)
{
if
(
fTextureView
)
{
fTextureView
-
>
unrefAndAbandon
(
)
;
fTextureView
=
nullptr
;
}
this
-
>
abandonImage
(
)
;
INHERITED
:
:
onAbandon
(
)
;
}
GrBackendObject
GrVkTexture
:
:
getTextureHandle
(
)
const
{
return
(
GrBackendObject
)
&
fResource
;
}
GrVkGpu
*
GrVkTexture
:
:
getVkGpu
(
)
const
{
SkASSERT
(
!
this
-
>
wasDestroyed
(
)
)
;
return
static_cast
<
GrVkGpu
*
>
(
this
-
>
getGpu
(
)
)
;
}
