#
ifndef
GrVkRenderPass_DEFINED
#
define
GrVkRenderPass_DEFINED
#
include
"
GrTypes
.
h
"
#
include
"
GrVkResource
.
h
"
#
include
"
vk
/
GrVkDefines
.
h
"
class
GrProcessorKeyBuilder
;
class
GrVkGpu
;
class
GrVkRenderTarget
;
class
GrVkRenderPass
:
public
GrVkResource
{
public
:
GrVkRenderPass
(
)
:
INHERITED
(
)
fRenderPass
(
VK_NULL_HANDLE
)
{
}
void
initSimple
(
const
GrVkGpu
*
gpu
const
GrVkRenderTarget
&
target
)
;
struct
AttachmentsDescriptor
{
struct
AttachmentDesc
{
VkFormat
fFormat
;
int
fSamples
;
AttachmentDesc
(
)
:
fFormat
(
VK_FORMAT_UNDEFINED
)
fSamples
(
0
)
{
}
bool
operator
=
=
(
const
AttachmentDesc
&
right
)
const
{
return
(
fFormat
=
=
right
.
fFormat
&
&
fSamples
=
=
right
.
fSamples
)
;
}
bool
operator
!
=
(
const
AttachmentDesc
&
right
)
const
{
return
!
(
*
this
=
=
right
)
;
}
}
;
AttachmentDesc
fColor
;
AttachmentDesc
fResolve
;
AttachmentDesc
fStencil
;
uint32_t
fAttachmentCount
;
}
;
enum
AttachmentFlags
{
kColor_AttachmentFlag
=
0x1
kResolve_AttachmentFlag
=
0x2
kStencil_AttachmentFlag
=
0x4
}
;
GR_DECL_BITFIELD_OPS_FRIENDS
(
AttachmentFlags
)
;
bool
colorAttachmentIndex
(
uint32_t
*
index
)
const
;
bool
resolveAttachmentIndex
(
uint32_t
*
index
)
const
;
bool
stencilAttachmentIndex
(
uint32_t
*
index
)
const
;
void
getBeginInfo
(
const
GrVkRenderTarget
&
target
VkRenderPassBeginInfo
*
beginInfo
VkSubpassContents
*
contents
)
const
;
bool
isCompatible
(
const
GrVkRenderTarget
&
target
)
const
;
VkRenderPass
vkRenderPass
(
)
const
{
return
fRenderPass
;
}
void
genKey
(
GrProcessorKeyBuilder
*
b
)
const
;
private
:
GrVkRenderPass
(
const
GrVkRenderPass
&
)
;
GrVkRenderPass
&
operator
=
(
const
GrVkRenderPass
&
)
;
void
freeGPUData
(
const
GrVkGpu
*
gpu
)
const
override
;
VkRenderPass
fRenderPass
;
AttachmentFlags
fAttachmentFlags
;
AttachmentsDescriptor
fAttachmentsDescriptor
;
typedef
GrVkResource
INHERITED
;
}
;
GR_MAKE_BITFIELD_OPS
(
GrVkRenderPass
:
:
AttachmentFlags
)
;
#
endif
