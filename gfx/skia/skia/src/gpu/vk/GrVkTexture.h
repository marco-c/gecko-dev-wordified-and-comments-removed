#
ifndef
GrVkTexture_DEFINED
#
define
GrVkTexture_DEFINED
#
include
"
GrTexture
.
h
"
#
include
"
GrVkImage
.
h
"
class
GrVkGpu
;
class
GrVkImageView
;
struct
GrVkImageInfo
;
class
GrVkTexture
:
public
GrTexture
public
virtual
GrVkImage
{
public
:
static
sk_sp
<
GrVkTexture
>
CreateNewTexture
(
GrVkGpu
*
SkBudgeted
budgeted
const
GrSurfaceDesc
&
const
GrVkImage
:
:
ImageDesc
&
GrMipMapsStatus
)
;
static
sk_sp
<
GrVkTexture
>
MakeWrappedTexture
(
GrVkGpu
*
const
GrSurfaceDesc
&
GrWrapOwnership
const
GrVkImageInfo
*
)
;
~
GrVkTexture
(
)
override
;
GrBackendObject
getTextureHandle
(
)
const
override
;
GrBackendTexture
getBackendTexture
(
)
const
override
;
void
textureParamsModified
(
)
override
{
}
const
GrVkImageView
*
textureView
(
bool
allowSRGB
)
;
bool
reallocForMipmap
(
GrVkGpu
*
gpu
uint32_t
mipLevels
)
;
void
setRelease
(
sk_sp
<
GrReleaseProcHelper
>
releaseHelper
)
override
{
this
-
>
setResourceRelease
(
std
:
:
move
(
releaseHelper
)
)
;
}
protected
:
GrVkTexture
(
GrVkGpu
*
const
GrSurfaceDesc
&
const
GrVkImageInfo
&
const
GrVkImageView
*
GrMipMapsStatus
GrBackendObjectOwnership
)
;
GrVkGpu
*
getVkGpu
(
)
const
;
void
onAbandon
(
)
override
;
void
onRelease
(
)
override
;
bool
onStealBackendTexture
(
GrBackendTexture
*
SkImage
:
:
BackendTextureReleaseProc
*
)
override
{
return
false
;
}
private
:
enum
Wrapped
{
kWrapped
}
;
GrVkTexture
(
GrVkGpu
*
SkBudgeted
const
GrSurfaceDesc
&
const
GrVkImageInfo
&
const
GrVkImageView
*
imageView
GrMipMapsStatus
)
;
GrVkTexture
(
GrVkGpu
*
Wrapped
const
GrSurfaceDesc
&
const
GrVkImageInfo
&
const
GrVkImageView
*
imageView
GrMipMapsStatus
GrBackendObjectOwnership
)
;
const
GrVkImageView
*
fTextureView
;
const
GrVkImageView
*
fLinearTextureView
;
typedef
GrTexture
INHERITED
;
}
;
#
endif
