#
ifndef
GrVkCaps_DEFINED
#
define
GrVkCaps_DEFINED
#
include
"
GrCaps
.
h
"
#
include
"
GrVkStencilAttachment
.
h
"
#
include
"
vk
/
GrVkDefines
.
h
"
struct
GrVkInterface
;
class
GrShaderCaps
;
class
GrVkCaps
:
public
GrCaps
{
public
:
typedef
GrVkStencilAttachment
:
:
Format
StencilFormat
;
GrVkCaps
(
const
GrContextOptions
&
contextOptions
const
GrVkInterface
*
vkInterface
VkPhysicalDevice
device
uint32_t
featureFlags
uint32_t
extensionFlags
)
;
bool
isConfigTexturable
(
GrPixelConfig
config
)
const
override
{
return
SkToBool
(
ConfigInfo
:
:
kTextureable_Flag
&
fConfigTable
[
config
]
.
fOptimalFlags
)
;
}
bool
isConfigRenderable
(
GrPixelConfig
config
bool
withMSAA
)
const
override
{
return
SkToBool
(
ConfigInfo
:
:
kRenderable_Flag
&
fConfigTable
[
config
]
.
fOptimalFlags
)
;
}
bool
canConfigBeImageStorage
(
GrPixelConfig
)
const
override
{
return
false
;
}
bool
isConfigTexturableLinearly
(
GrPixelConfig
config
)
const
{
return
SkToBool
(
ConfigInfo
:
:
kTextureable_Flag
&
fConfigTable
[
config
]
.
fLinearFlags
)
;
}
bool
isConfigRenderableLinearly
(
GrPixelConfig
config
bool
withMSAA
)
const
{
return
!
withMSAA
&
&
SkToBool
(
ConfigInfo
:
:
kRenderable_Flag
&
fConfigTable
[
config
]
.
fLinearFlags
)
;
}
bool
configCanBeDstofBlit
(
GrPixelConfig
config
bool
linearTiled
)
const
{
const
uint16_t
&
flags
=
linearTiled
?
fConfigTable
[
config
]
.
fLinearFlags
:
fConfigTable
[
config
]
.
fOptimalFlags
;
return
SkToBool
(
ConfigInfo
:
:
kBlitDst_Flag
&
flags
)
;
}
bool
configCanBeSrcofBlit
(
GrPixelConfig
config
bool
linearTiled
)
const
{
const
uint16_t
&
flags
=
linearTiled
?
fConfigTable
[
config
]
.
fLinearFlags
:
fConfigTable
[
config
]
.
fOptimalFlags
;
return
SkToBool
(
ConfigInfo
:
:
kBlitSrc_Flag
&
flags
)
;
}
bool
canUseGLSLForShaderModule
(
)
const
{
return
fCanUseGLSLForShaderModule
;
}
bool
mustDoCopiesFromOrigin
(
)
const
{
return
fMustDoCopiesFromOrigin
;
}
bool
supportsCopiesAsDraws
(
)
const
{
return
fSupportsCopiesAsDraws
;
}
bool
mustSubmitCommandsBeforeCopyOp
(
)
const
{
return
fMustSubmitCommandsBeforeCopyOp
;
}
bool
mustSleepOnTearDown
(
)
const
{
return
fMustSleepOnTearDown
;
}
bool
newSecondaryCBOnPipelineChange
(
)
const
{
return
fNewSecondaryCBOnPipelineChange
;
}
const
StencilFormat
&
preferedStencilFormat
(
)
const
{
return
fPreferedStencilFormat
;
}
bool
initDescForDstCopy
(
const
GrRenderTargetProxy
*
src
GrSurfaceDesc
*
desc
bool
*
rectsMustMatch
bool
*
disallowSubrect
)
const
override
;
private
:
enum
VkVendor
{
kAMD_VkVendor
=
4098
kImagination_VkVendor
=
4112
kNvidia_VkVendor
=
4318
kQualcomm_VkVendor
=
20803
}
;
void
init
(
const
GrContextOptions
&
contextOptions
const
GrVkInterface
*
vkInterface
VkPhysicalDevice
device
uint32_t
featureFlags
uint32_t
extensionFlags
)
;
void
initGrCaps
(
const
VkPhysicalDeviceProperties
&
const
VkPhysicalDeviceMemoryProperties
&
uint32_t
featureFlags
)
;
void
initShaderCaps
(
const
VkPhysicalDeviceProperties
&
uint32_t
featureFlags
)
;
void
initSampleCount
(
const
VkPhysicalDeviceProperties
&
properties
)
;
void
initConfigTable
(
const
GrVkInterface
*
VkPhysicalDevice
)
;
void
initStencilFormat
(
const
GrVkInterface
*
iface
VkPhysicalDevice
physDev
)
;
struct
ConfigInfo
{
ConfigInfo
(
)
:
fOptimalFlags
(
0
)
fLinearFlags
(
0
)
{
}
void
init
(
const
GrVkInterface
*
VkPhysicalDevice
VkFormat
)
;
static
void
InitConfigFlags
(
VkFormatFeatureFlags
uint16_t
*
flags
)
;
enum
{
kTextureable_Flag
=
0x1
kRenderable_Flag
=
0x2
kBlitSrc_Flag
=
0x4
kBlitDst_Flag
=
0x8
}
;
uint16_t
fOptimalFlags
;
uint16_t
fLinearFlags
;
}
;
ConfigInfo
fConfigTable
[
kGrPixelConfigCnt
]
;
StencilFormat
fPreferedStencilFormat
;
bool
fCanUseGLSLForShaderModule
;
bool
fMustDoCopiesFromOrigin
;
bool
fSupportsCopiesAsDraws
;
bool
fMustSubmitCommandsBeforeCopyOp
;
bool
fMustSleepOnTearDown
;
bool
fNewSecondaryCBOnPipelineChange
;
typedef
GrCaps
INHERITED
;
}
;
#
endif
