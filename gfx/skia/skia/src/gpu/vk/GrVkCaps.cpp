#
include
"
GrVkCaps
.
h
"
#
include
"
GrVkUtil
.
h
"
#
include
"
glsl
/
GrGLSLCaps
.
h
"
#
include
"
vk
/
GrVkInterface
.
h
"
#
include
"
vk
/
GrVkBackendContext
.
h
"
GrVkCaps
:
:
GrVkCaps
(
const
GrContextOptions
&
contextOptions
const
GrVkInterface
*
vkInterface
VkPhysicalDevice
physDev
uint32_t
featureFlags
uint32_t
extensionFlags
)
:
INHERITED
(
contextOptions
)
{
fCanUseGLSLForShaderModule
=
false
;
fMipMapSupport
=
false
;
fNPOTTextureTileSupport
=
false
;
fTwoSidedStencilSupport
=
false
;
fStencilWrapOpsSupport
=
false
;
fDiscardRenderTargetSupport
=
false
;
fReuseScratchTextures
=
true
;
fGpuTracingSupport
=
false
;
fCompressedTexSubImageSupport
=
false
;
fOversizedStencilSupport
=
false
;
fUseDrawInsteadOfClear
=
false
;
fMapBufferFlags
=
kNone_MapFlags
;
fBufferMapThreshold
=
SK_MaxS32
;
fMaxRenderTargetSize
=
4096
;
fMaxTextureSize
=
4096
;
fMaxColorSampleCount
=
4
;
fMaxStencilSampleCount
=
4
;
fShaderCaps
.
reset
(
new
GrGLSLCaps
(
contextOptions
)
)
;
this
-
>
init
(
contextOptions
vkInterface
physDev
featureFlags
extensionFlags
)
;
}
void
GrVkCaps
:
:
init
(
const
GrContextOptions
&
contextOptions
const
GrVkInterface
*
vkInterface
VkPhysicalDevice
physDev
uint32_t
featureFlags
uint32_t
extensionFlags
)
{
VkPhysicalDeviceProperties
properties
;
GR_VK_CALL
(
vkInterface
GetPhysicalDeviceProperties
(
physDev
&
properties
)
)
;
VkPhysicalDeviceMemoryProperties
memoryProperties
;
GR_VK_CALL
(
vkInterface
GetPhysicalDeviceMemoryProperties
(
physDev
&
memoryProperties
)
)
;
this
-
>
initGrCaps
(
properties
memoryProperties
featureFlags
)
;
this
-
>
initGLSLCaps
(
properties
featureFlags
)
;
this
-
>
initConfigTable
(
vkInterface
physDev
)
;
this
-
>
initStencilFormat
(
vkInterface
physDev
)
;
if
(
SkToBool
(
extensionFlags
&
kNV_glsl_shader_GrVkExtensionFlag
)
)
{
}
this
-
>
applyOptionsOverrides
(
contextOptions
)
;
GrGLSLCaps
*
glslCaps
=
static_cast
<
GrGLSLCaps
*
>
(
fShaderCaps
.
get
(
)
)
;
glslCaps
-
>
applyOptionsOverrides
(
contextOptions
)
;
}
int
get_max_sample_count
(
VkSampleCountFlags
flags
)
{
SkASSERT
(
flags
&
VK_SAMPLE_COUNT_1_BIT
)
;
if
(
!
(
flags
&
VK_SAMPLE_COUNT_2_BIT
)
)
{
return
0
;
}
if
(
!
(
flags
&
VK_SAMPLE_COUNT_4_BIT
)
)
{
return
2
;
}
if
(
!
(
flags
&
VK_SAMPLE_COUNT_8_BIT
)
)
{
return
4
;
}
if
(
!
(
flags
&
VK_SAMPLE_COUNT_16_BIT
)
)
{
return
8
;
}
if
(
!
(
flags
&
VK_SAMPLE_COUNT_32_BIT
)
)
{
return
16
;
}
if
(
!
(
flags
&
VK_SAMPLE_COUNT_64_BIT
)
)
{
return
32
;
}
return
64
;
}
void
GrVkCaps
:
:
initSampleCount
(
const
VkPhysicalDeviceProperties
&
properties
)
{
VkSampleCountFlags
colorSamples
=
properties
.
limits
.
framebufferColorSampleCounts
;
VkSampleCountFlags
stencilSamples
=
properties
.
limits
.
framebufferStencilSampleCounts
;
fMaxColorSampleCount
=
get_max_sample_count
(
colorSamples
)
;
fMaxStencilSampleCount
=
get_max_sample_count
(
stencilSamples
)
;
}
void
GrVkCaps
:
:
initGrCaps
(
const
VkPhysicalDeviceProperties
&
properties
const
VkPhysicalDeviceMemoryProperties
&
memoryProperties
uint32_t
featureFlags
)
{
fMaxVertexAttributes
=
properties
.
limits
.
maxVertexInputAttributes
;
fMaxRenderTargetSize
=
properties
.
limits
.
maxImageDimension2D
;
fMaxTextureSize
=
properties
.
limits
.
maxImageDimension2D
;
this
-
>
initSampleCount
(
properties
)
;
fBufferMapThreshold
=
0
;
fMapBufferFlags
=
kCanMap_MapFlag
|
kSubset_MapFlag
;
fStencilWrapOpsSupport
=
true
;
fOversizedStencilSupport
=
true
;
fSampleShadingSupport
=
SkToBool
(
featureFlags
&
kSampleRateShading_GrVkFeatureFlag
)
;
}
void
GrVkCaps
:
:
initGLSLCaps
(
const
VkPhysicalDeviceProperties
&
properties
uint32_t
featureFlags
)
{
GrGLSLCaps
*
glslCaps
=
static_cast
<
GrGLSLCaps
*
>
(
fShaderCaps
.
get
(
)
)
;
glslCaps
-
>
fVersionDeclString
=
"
#
version
330
\
n
"
;
for
(
int
i
=
0
;
i
<
kGrPixelConfigCnt
;
+
+
i
)
{
GrPixelConfig
config
=
static_cast
<
GrPixelConfig
>
(
i
)
;
if
(
GrPixelConfigIsAlphaOnly
(
config
)
)
{
glslCaps
-
>
fConfigTextureSwizzle
[
i
]
=
GrSwizzle
:
:
RRRR
(
)
;
glslCaps
-
>
fConfigOutputSwizzle
[
i
]
=
GrSwizzle
:
:
AAAA
(
)
;
}
else
{
glslCaps
-
>
fConfigTextureSwizzle
[
i
]
=
GrSwizzle
:
:
RGBA
(
)
;
}
}
glslCaps
-
>
fUsesPrecisionModifiers
=
true
;
glslCaps
-
>
fFlatInterpolationSupport
=
true
;
glslCaps
-
>
fShaderDerivativeSupport
=
true
;
glslCaps
-
>
fGeometryShaderSupport
=
SkToBool
(
featureFlags
&
kGeometryShader_GrVkFeatureFlag
)
;
glslCaps
-
>
fDualSourceBlendingSupport
=
SkToBool
(
featureFlags
&
kDualSrcBlend_GrVkFeatureFlag
)
;
glslCaps
-
>
fIntegerSupport
=
true
;
glslCaps
-
>
fMaxVertexSamplers
=
glslCaps
-
>
fMaxGeometrySamplers
=
glslCaps
-
>
fMaxFragmentSamplers
=
SkTMin
(
properties
.
limits
.
maxPerStageDescriptorSampledImages
properties
.
limits
.
maxPerStageDescriptorSamplers
)
;
glslCaps
-
>
fMaxCombinedSamplers
=
SkTMin
(
properties
.
limits
.
maxDescriptorSetSampledImages
properties
.
limits
.
maxDescriptorSetSamplers
)
;
}
bool
stencil_format_supported
(
const
GrVkInterface
*
interface
VkPhysicalDevice
physDev
VkFormat
format
)
{
VkFormatProperties
props
;
memset
(
&
props
0
sizeof
(
VkFormatProperties
)
)
;
GR_VK_CALL
(
interface
GetPhysicalDeviceFormatProperties
(
physDev
format
&
props
)
)
;
return
SkToBool
(
VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT
&
props
.
optimalTilingFeatures
)
;
}
void
GrVkCaps
:
:
initStencilFormat
(
const
GrVkInterface
*
interface
VkPhysicalDevice
physDev
)
{
static
const
StencilFormat
gS8
=
{
VK_FORMAT_S8_UINT
8
8
false
}
gD24S8
=
{
VK_FORMAT_D24_UNORM_S8_UINT
8
32
true
}
gD32S8
=
{
VK_FORMAT_D32_SFLOAT_S8_UINT
8
64
true
}
;
if
(
stencil_format_supported
(
interface
physDev
VK_FORMAT_S8_UINT
)
)
{
fPreferedStencilFormat
=
gS8
;
}
else
if
(
stencil_format_supported
(
interface
physDev
VK_FORMAT_D24_UNORM_S8_UINT
)
)
{
fPreferedStencilFormat
=
gD24S8
;
}
else
{
SkASSERT
(
stencil_format_supported
(
interface
physDev
VK_FORMAT_D32_SFLOAT_S8_UINT
)
)
;
fPreferedStencilFormat
=
gD32S8
;
}
}
void
GrVkCaps
:
:
initConfigTable
(
const
GrVkInterface
*
interface
VkPhysicalDevice
physDev
)
{
for
(
int
i
=
0
;
i
<
kGrPixelConfigCnt
;
+
+
i
)
{
VkFormat
format
;
if
(
GrPixelConfigToVkFormat
(
static_cast
<
GrPixelConfig
>
(
i
)
&
format
)
)
{
fConfigTable
[
i
]
.
init
(
interface
physDev
format
)
;
}
}
}
void
GrVkCaps
:
:
ConfigInfo
:
:
InitConfigFlags
(
VkFormatFeatureFlags
vkFlags
uint16_t
*
flags
)
{
if
(
SkToBool
(
VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT
&
vkFlags
)
&
&
SkToBool
(
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT
&
vkFlags
)
)
{
*
flags
=
*
flags
|
kTextureable_Flag
;
}
if
(
SkToBool
(
VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT
&
vkFlags
)
)
{
*
flags
=
*
flags
|
kRenderable_Flag
;
}
if
(
SkToBool
(
VK_FORMAT_FEATURE_BLIT_SRC_BIT
&
vkFlags
)
)
{
*
flags
=
*
flags
|
kBlitSrc_Flag
;
}
if
(
SkToBool
(
VK_FORMAT_FEATURE_BLIT_DST_BIT
&
vkFlags
)
)
{
*
flags
=
*
flags
|
kBlitDst_Flag
;
}
}
void
GrVkCaps
:
:
ConfigInfo
:
:
init
(
const
GrVkInterface
*
interface
VkPhysicalDevice
physDev
VkFormat
format
)
{
VkFormatProperties
props
;
memset
(
&
props
0
sizeof
(
VkFormatProperties
)
)
;
GR_VK_CALL
(
interface
GetPhysicalDeviceFormatProperties
(
physDev
format
&
props
)
)
;
InitConfigFlags
(
props
.
linearTilingFeatures
&
fLinearFlags
)
;
InitConfigFlags
(
props
.
optimalTilingFeatures
&
fOptimalFlags
)
;
}
