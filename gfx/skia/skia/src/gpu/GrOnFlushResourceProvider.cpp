#
include
"
GrOnFlushResourceProvider
.
h
"
#
include
"
GrContextPriv
.
h
"
#
include
"
GrDrawingManager
.
h
"
#
include
"
GrProxyProvider
.
h
"
#
include
"
GrSurfaceProxy
.
h
"
sk_sp
<
GrRenderTargetContext
>
GrOnFlushResourceProvider
:
:
makeRenderTargetContext
(
const
GrSurfaceDesc
&
desc
sk_sp
<
SkColorSpace
>
colorSpace
const
SkSurfaceProps
*
props
)
{
GrSurfaceDesc
tmpDesc
=
desc
;
tmpDesc
.
fFlags
|
=
kRenderTarget_GrSurfaceFlag
;
auto
proxyProvider
=
fDrawingMgr
-
>
getContext
(
)
-
>
contextPriv
(
)
.
proxyProvider
(
)
;
auto
resourceProvider
=
fDrawingMgr
-
>
getContext
(
)
-
>
contextPriv
(
)
.
resourceProvider
(
)
;
sk_sp
<
GrSurfaceProxy
>
proxy
=
proxyProvider
-
>
createProxy
(
tmpDesc
SkBackingFit
:
:
kExact
SkBudgeted
:
:
kYes
GrResourceProvider
:
:
kNoPendingIO_Flag
)
;
if
(
!
proxy
-
>
asRenderTargetProxy
(
)
)
{
return
nullptr
;
}
sk_sp
<
GrRenderTargetContext
>
renderTargetContext
(
fDrawingMgr
-
>
makeRenderTargetContext
(
std
:
:
move
(
proxy
)
std
:
:
move
(
colorSpace
)
props
false
)
)
;
if
(
!
renderTargetContext
)
{
return
nullptr
;
}
if
(
!
renderTargetContext
-
>
asSurfaceProxy
(
)
-
>
instantiate
(
resourceProvider
)
)
{
return
nullptr
;
}
renderTargetContext
-
>
discard
(
)
;
return
renderTargetContext
;
}
sk_sp
<
GrRenderTargetContext
>
GrOnFlushResourceProvider
:
:
makeRenderTargetContext
(
sk_sp
<
GrSurfaceProxy
>
proxy
sk_sp
<
SkColorSpace
>
colorSpace
const
SkSurfaceProps
*
props
)
{
sk_sp
<
GrRenderTargetContext
>
renderTargetContext
(
fDrawingMgr
-
>
makeRenderTargetContext
(
std
:
:
move
(
proxy
)
std
:
:
move
(
colorSpace
)
props
false
)
)
;
if
(
!
renderTargetContext
)
{
return
nullptr
;
}
auto
resourceProvider
=
fDrawingMgr
-
>
getContext
(
)
-
>
contextPriv
(
)
.
resourceProvider
(
)
;
if
(
!
renderTargetContext
-
>
asSurfaceProxy
(
)
-
>
instantiate
(
resourceProvider
)
)
{
return
nullptr
;
}
renderTargetContext
-
>
discard
(
)
;
return
renderTargetContext
;
}
bool
GrOnFlushResourceProvider
:
:
instatiateProxy
(
GrSurfaceProxy
*
proxy
)
{
auto
resourceProvider
=
fDrawingMgr
-
>
getContext
(
)
-
>
contextPriv
(
)
.
resourceProvider
(
)
;
if
(
GrSurfaceProxy
:
:
LazyState
:
:
kNot
!
=
proxy
-
>
lazyInstantiationState
(
)
)
{
return
proxy
-
>
priv
(
)
.
doLazyInstantiation
(
resourceProvider
)
;
}
return
proxy
-
>
instantiate
(
resourceProvider
)
;
}
sk_sp
<
GrBuffer
>
GrOnFlushResourceProvider
:
:
makeBuffer
(
GrBufferType
intendedType
size_t
size
const
void
*
data
)
{
auto
resourceProvider
=
fDrawingMgr
-
>
getContext
(
)
-
>
contextPriv
(
)
.
resourceProvider
(
)
;
return
sk_sp
<
GrBuffer
>
(
resourceProvider
-
>
createBuffer
(
size
intendedType
kDynamic_GrAccessPattern
GrResourceProvider
:
:
kNoPendingIO_Flag
data
)
)
;
}
sk_sp
<
const
GrBuffer
>
GrOnFlushResourceProvider
:
:
findOrMakeStaticBuffer
(
GrBufferType
intendedType
size_t
size
const
void
*
data
const
GrUniqueKey
&
key
)
{
auto
resourceProvider
=
fDrawingMgr
-
>
getContext
(
)
-
>
contextPriv
(
)
.
resourceProvider
(
)
;
sk_sp
<
const
GrBuffer
>
buffer
=
resourceProvider
-
>
findOrMakeStaticBuffer
(
intendedType
size
data
key
)
;
SkASSERT
(
!
buffer
-
>
resourcePriv
(
)
.
hasPendingIO_debugOnly
(
)
)
;
return
buffer
;
}
const
GrCaps
*
GrOnFlushResourceProvider
:
:
caps
(
)
const
{
return
fDrawingMgr
-
>
getContext
(
)
-
>
caps
(
)
;
}
