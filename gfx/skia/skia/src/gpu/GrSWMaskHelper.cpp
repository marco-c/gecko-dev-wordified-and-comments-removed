#
include
"
src
/
gpu
/
GrSWMaskHelper
.
h
"
#
include
"
include
/
private
/
GrRecordingContext
.
h
"
#
include
"
src
/
gpu
/
GrCaps
.
h
"
#
include
"
src
/
gpu
/
GrProxyProvider
.
h
"
#
include
"
src
/
gpu
/
GrRecordingContextPriv
.
h
"
#
include
"
src
/
gpu
/
GrSurfaceContext
.
h
"
#
include
"
src
/
gpu
/
GrTextureProxy
.
h
"
#
include
"
src
/
gpu
/
geometry
/
GrShape
.
h
"
static
SkBlendMode
op_to_mode
(
SkRegion
:
:
Op
op
)
{
static
const
SkBlendMode
modeMap
[
]
=
{
SkBlendMode
:
:
kDstOut
SkBlendMode
:
:
kModulate
SkBlendMode
:
:
kSrcOver
SkBlendMode
:
:
kXor
SkBlendMode
:
:
kClear
SkBlendMode
:
:
kSrc
}
;
return
modeMap
[
op
]
;
}
void
GrSWMaskHelper
:
:
drawRect
(
const
SkRect
&
rect
const
SkMatrix
&
matrix
SkRegion
:
:
Op
op
GrAA
aa
uint8_t
alpha
)
{
SkPaint
paint
;
paint
.
setBlendMode
(
op_to_mode
(
op
)
)
;
paint
.
setAntiAlias
(
GrAA
:
:
kYes
=
=
aa
)
;
paint
.
setColor
(
SkColorSetARGB
(
alpha
alpha
alpha
alpha
)
)
;
SkMatrix
translatedMatrix
=
matrix
;
translatedMatrix
.
postTranslate
(
fTranslate
.
fX
fTranslate
.
fY
)
;
fDraw
.
fMatrix
=
&
translatedMatrix
;
fDraw
.
drawRect
(
rect
paint
)
;
}
void
GrSWMaskHelper
:
:
drawShape
(
const
GrShape
&
shape
const
SkMatrix
&
matrix
SkRegion
:
:
Op
op
GrAA
aa
uint8_t
alpha
)
{
SkPaint
paint
;
paint
.
setPathEffect
(
shape
.
style
(
)
.
refPathEffect
(
)
)
;
shape
.
style
(
)
.
strokeRec
(
)
.
applyToPaint
(
&
paint
)
;
paint
.
setAntiAlias
(
GrAA
:
:
kYes
=
=
aa
)
;
SkMatrix
translatedMatrix
=
matrix
;
translatedMatrix
.
postTranslate
(
fTranslate
.
fX
fTranslate
.
fY
)
;
fDraw
.
fMatrix
=
&
translatedMatrix
;
SkPath
path
;
shape
.
asPath
(
&
path
)
;
if
(
SkRegion
:
:
kReplace_Op
=
=
op
&
&
0xFF
=
=
alpha
)
{
SkASSERT
(
0xFF
=
=
paint
.
getAlpha
(
)
)
;
fDraw
.
drawPathCoverage
(
path
paint
)
;
}
else
{
paint
.
setBlendMode
(
op_to_mode
(
op
)
)
;
paint
.
setColor
(
SkColorSetARGB
(
alpha
alpha
alpha
alpha
)
)
;
fDraw
.
drawPath
(
path
paint
)
;
}
}
;
bool
GrSWMaskHelper
:
:
init
(
const
SkIRect
&
resultBounds
)
{
fTranslate
=
{
-
SkIntToScalar
(
resultBounds
.
fLeft
)
-
SkIntToScalar
(
resultBounds
.
fTop
)
}
;
SkIRect
bounds
=
SkIRect
:
:
MakeWH
(
resultBounds
.
width
(
)
resultBounds
.
height
(
)
)
;
const
SkImageInfo
bmImageInfo
=
SkImageInfo
:
:
MakeA8
(
bounds
.
width
(
)
bounds
.
height
(
)
)
;
if
(
!
fPixels
-
>
tryAlloc
(
bmImageInfo
)
)
{
return
false
;
}
fPixels
-
>
erase
(
0
)
;
fDraw
.
fDst
=
*
fPixels
;
fRasterClip
.
setRect
(
bounds
)
;
fDraw
.
fRC
=
&
fRasterClip
;
return
true
;
}
sk_sp
<
GrTextureProxy
>
GrSWMaskHelper
:
:
toTextureProxy
(
GrRecordingContext
*
context
SkBackingFit
fit
)
{
SkImageInfo
ii
=
SkImageInfo
:
:
MakeA8
(
fPixels
-
>
width
(
)
fPixels
-
>
height
(
)
)
;
size_t
rowBytes
=
fPixels
-
>
rowBytes
(
)
;
sk_sp
<
SkData
>
data
=
fPixels
-
>
detachPixelsAsData
(
)
;
if
(
!
data
)
{
return
nullptr
;
}
sk_sp
<
SkImage
>
img
=
SkImage
:
:
MakeRasterData
(
ii
std
:
:
move
(
data
)
rowBytes
)
;
if
(
!
img
)
{
return
nullptr
;
}
return
context
-
>
priv
(
)
.
proxyProvider
(
)
-
>
createTextureProxy
(
std
:
:
move
(
img
)
1
SkBudgeted
:
:
kYes
fit
)
;
}
