#
ifndef
GrClip_DEFINED
#
define
GrClip_DEFINED
#
include
"
GrTypes
.
h
"
#
include
"
SkRRect
.
h
"
#
include
"
SkRect
.
h
"
class
GrAppliedClip
;
class
GrContext
;
class
GrRenderTargetContext
;
class
GrClip
{
public
:
virtual
bool
quickContains
(
const
SkRect
&
)
const
=
0
;
virtual
bool
quickContains
(
const
SkRRect
&
rrect
)
const
{
return
this
-
>
quickContains
(
rrect
.
getBounds
(
)
)
;
}
virtual
void
getConservativeBounds
(
int
width
int
height
SkIRect
*
devResult
bool
*
isIntersectionOfRects
=
nullptr
)
const
=
0
;
virtual
bool
apply
(
GrContext
*
GrRenderTargetContext
*
bool
useHWAA
bool
hasUserStencilSettings
GrAppliedClip
*
result
SkRect
*
bounds
)
const
=
0
;
virtual
~
GrClip
(
)
{
}
virtual
bool
isRRect
(
const
SkRect
&
rtBounds
SkRRect
*
rrect
GrAA
*
aa
)
const
=
0
;
constexpr
static
SkScalar
kBoundsTolerance
=
1e
-
3f
;
template
<
typename
TRect
>
constexpr
static
bool
IsInsideClip
(
const
TRect
&
innerClipBounds
const
SkRect
&
queryBounds
)
{
return
innerClipBounds
.
fRight
-
innerClipBounds
.
fLeft
>
kBoundsTolerance
&
&
innerClipBounds
.
fBottom
-
innerClipBounds
.
fTop
>
kBoundsTolerance
&
&
innerClipBounds
.
fLeft
<
queryBounds
.
fLeft
+
kBoundsTolerance
&
&
innerClipBounds
.
fTop
<
queryBounds
.
fTop
+
kBoundsTolerance
&
&
innerClipBounds
.
fRight
>
queryBounds
.
fRight
-
kBoundsTolerance
&
&
innerClipBounds
.
fBottom
>
queryBounds
.
fBottom
-
kBoundsTolerance
;
}
template
<
typename
TRect
>
constexpr
static
bool
IsOutsideClip
(
const
TRect
&
outerClipBounds
const
SkRect
&
queryBounds
)
{
return
outerClipBounds
.
fRight
-
outerClipBounds
.
fLeft
<
=
kBoundsTolerance
|
|
outerClipBounds
.
fBottom
-
outerClipBounds
.
fTop
<
=
kBoundsTolerance
|
|
outerClipBounds
.
fLeft
>
=
queryBounds
.
fRight
-
kBoundsTolerance
|
|
outerClipBounds
.
fTop
>
=
queryBounds
.
fBottom
-
kBoundsTolerance
|
|
outerClipBounds
.
fRight
<
=
queryBounds
.
fLeft
+
kBoundsTolerance
|
|
outerClipBounds
.
fBottom
<
=
queryBounds
.
fTop
+
kBoundsTolerance
;
}
static
SkIRect
GetPixelIBounds
(
const
SkRect
&
bounds
)
{
return
SkIRect
:
:
MakeLTRB
(
SkScalarFloorToInt
(
bounds
.
fLeft
+
kBoundsTolerance
)
SkScalarFloorToInt
(
bounds
.
fTop
+
kBoundsTolerance
)
SkScalarCeilToInt
(
bounds
.
fRight
-
kBoundsTolerance
)
SkScalarCeilToInt
(
bounds
.
fBottom
-
kBoundsTolerance
)
)
;
}
static
SkRect
GetPixelBounds
(
const
SkRect
&
bounds
)
{
return
SkRect
:
:
MakeLTRB
(
SkScalarFloorToScalar
(
bounds
.
fLeft
+
kBoundsTolerance
)
SkScalarFloorToScalar
(
bounds
.
fTop
+
kBoundsTolerance
)
SkScalarCeilToScalar
(
bounds
.
fRight
-
kBoundsTolerance
)
SkScalarCeilToScalar
(
bounds
.
fBottom
-
kBoundsTolerance
)
)
;
}
static
bool
IsPixelAligned
(
const
SkRect
&
rect
)
{
return
SkScalarAbs
(
SkScalarRoundToScalar
(
rect
.
fLeft
)
-
rect
.
fLeft
)
<
=
kBoundsTolerance
&
&
SkScalarAbs
(
SkScalarRoundToScalar
(
rect
.
fTop
)
-
rect
.
fTop
)
<
=
kBoundsTolerance
&
&
SkScalarAbs
(
SkScalarRoundToScalar
(
rect
.
fRight
)
-
rect
.
fRight
)
<
=
kBoundsTolerance
&
&
SkScalarAbs
(
SkScalarRoundToScalar
(
rect
.
fBottom
)
-
rect
.
fBottom
)
<
=
kBoundsTolerance
;
}
}
;
class
GrNoClip
final
:
public
GrClip
{
private
:
bool
quickContains
(
const
SkRect
&
)
const
final
override
{
return
true
;
}
bool
quickContains
(
const
SkRRect
&
)
const
final
override
{
return
true
;
}
void
getConservativeBounds
(
int
width
int
height
SkIRect
*
devResult
bool
*
isIntersectionOfRects
)
const
final
override
{
devResult
-
>
setXYWH
(
0
0
width
height
)
;
if
(
isIntersectionOfRects
)
{
*
isIntersectionOfRects
=
true
;
}
}
bool
apply
(
GrContext
*
GrRenderTargetContext
*
bool
bool
GrAppliedClip
*
SkRect
*
)
const
final
override
{
return
true
;
}
bool
isRRect
(
const
SkRect
&
SkRRect
*
GrAA
*
)
const
override
{
return
false
;
}
}
;
#
endif
