#
include
"
GrOvalRenderer
.
h
"
#
include
"
GrBatchFlushState
.
h
"
#
include
"
GrBatchTest
.
h
"
#
include
"
GrDrawTarget
.
h
"
#
include
"
GrGeometryProcessor
.
h
"
#
include
"
GrInvariantOutput
.
h
"
#
include
"
GrPipelineBuilder
.
h
"
#
include
"
GrProcessor
.
h
"
#
include
"
GrResourceProvider
.
h
"
#
include
"
GrVertexBuffer
.
h
"
#
include
"
SkRRect
.
h
"
#
include
"
SkStrokeRec
.
h
"
#
include
"
SkTLazy
.
h
"
#
include
"
batches
/
GrRectBatchFactory
.
h
"
#
include
"
batches
/
GrVertexBatch
.
h
"
#
include
"
effects
/
GrRRectEffect
.
h
"
#
include
"
glsl
/
GrGLSLFragmentShaderBuilder
.
h
"
#
include
"
glsl
/
GrGLSLGeometryProcessor
.
h
"
#
include
"
glsl
/
GrGLSLProgramDataManager
.
h
"
#
include
"
glsl
/
GrGLSLVarying
.
h
"
#
include
"
glsl
/
GrGLSLVertexShaderBuilder
.
h
"
#
include
"
glsl
/
GrGLSLUniformHandler
.
h
"
#
include
"
glsl
/
GrGLSLUtil
.
h
"
namespace
{
struct
CircleVertex
{
SkPoint
fPos
;
SkPoint
fOffset
;
SkScalar
fOuterRadius
;
SkScalar
fInnerRadius
;
}
;
struct
EllipseVertex
{
SkPoint
fPos
;
SkPoint
fOffset
;
SkPoint
fOuterRadii
;
SkPoint
fInnerRadii
;
}
;
struct
DIEllipseVertex
{
SkPoint
fPos
;
SkPoint
fOuterOffset
;
SkPoint
fInnerOffset
;
}
;
inline
bool
circle_stays_circle
(
const
SkMatrix
&
m
)
{
return
m
.
isSimilarity
(
)
;
}
}
class
CircleEdgeEffect
:
public
GrGeometryProcessor
{
public
:
static
GrGeometryProcessor
*
Create
(
GrColor
color
bool
stroke
const
SkMatrix
&
localMatrix
bool
usesLocalCoords
)
{
return
new
CircleEdgeEffect
(
color
stroke
localMatrix
usesLocalCoords
)
;
}
const
Attribute
*
inPosition
(
)
const
{
return
fInPosition
;
}
const
Attribute
*
inCircleEdge
(
)
const
{
return
fInCircleEdge
;
}
GrColor
color
(
)
const
{
return
fColor
;
}
bool
colorIgnored
(
)
const
{
return
GrColor_ILLEGAL
=
=
fColor
;
}
const
SkMatrix
&
localMatrix
(
)
const
{
return
fLocalMatrix
;
}
bool
usesLocalCoords
(
)
const
{
return
fUsesLocalCoords
;
}
virtual
~
CircleEdgeEffect
(
)
{
}
const
char
*
name
(
)
const
override
{
return
"
CircleEdge
"
;
}
inline
bool
isStroked
(
)
const
{
return
fStroke
;
}
class
GLSLProcessor
:
public
GrGLSLGeometryProcessor
{
public
:
GLSLProcessor
(
)
:
fColor
(
GrColor_ILLEGAL
)
{
}
void
onEmitCode
(
EmitArgs
&
args
GrGPArgs
*
gpArgs
)
override
{
const
CircleEdgeEffect
&
ce
=
args
.
fGP
.
cast
<
CircleEdgeEffect
>
(
)
;
GrGLSLVertexBuilder
*
vertBuilder
=
args
.
fVertBuilder
;
GrGLSLVaryingHandler
*
varyingHandler
=
args
.
fVaryingHandler
;
GrGLSLUniformHandler
*
uniformHandler
=
args
.
fUniformHandler
;
varyingHandler
-
>
emitAttributes
(
ce
)
;
GrGLSLVertToFrag
v
(
kVec4f_GrSLType
)
;
varyingHandler
-
>
addVarying
(
"
CircleEdge
"
&
v
)
;
vertBuilder
-
>
codeAppendf
(
"
%
s
=
%
s
;
"
v
.
vsOut
(
)
ce
.
inCircleEdge
(
)
-
>
fName
)
;
GrGLSLFragmentBuilder
*
fragBuilder
=
args
.
fFragBuilder
;
if
(
!
ce
.
colorIgnored
(
)
)
{
this
-
>
setupUniformColor
(
fragBuilder
uniformHandler
args
.
fOutputColor
&
fColorUniform
)
;
}
this
-
>
setupPosition
(
vertBuilder
gpArgs
ce
.
inPosition
(
)
-
>
fName
)
;
this
-
>
emitTransforms
(
vertBuilder
varyingHandler
uniformHandler
gpArgs
-
>
fPositionVar
ce
.
inPosition
(
)
-
>
fName
ce
.
localMatrix
(
)
args
.
fTransformsIn
args
.
fTransformsOut
)
;
fragBuilder
-
>
codeAppendf
(
"
float
d
=
length
(
%
s
.
xy
)
;
"
v
.
fsIn
(
)
)
;
fragBuilder
-
>
codeAppendf
(
"
float
edgeAlpha
=
clamp
(
%
s
.
z
*
(
1
.
0
-
d
)
0
.
0
1
.
0
)
;
"
v
.
fsIn
(
)
)
;
if
(
ce
.
isStroked
(
)
)
{
fragBuilder
-
>
codeAppendf
(
"
float
innerAlpha
=
clamp
(
%
s
.
z
*
(
d
-
%
s
.
w
)
0
.
0
1
.
0
)
;
"
v
.
fsIn
(
)
v
.
fsIn
(
)
)
;
fragBuilder
-
>
codeAppend
(
"
edgeAlpha
*
=
innerAlpha
;
"
)
;
}
fragBuilder
-
>
codeAppendf
(
"
%
s
=
vec4
(
edgeAlpha
)
;
"
args
.
fOutputCoverage
)
;
}
static
void
GenKey
(
const
GrGeometryProcessor
&
gp
const
GrGLSLCaps
&
GrProcessorKeyBuilder
*
b
)
{
const
CircleEdgeEffect
&
ce
=
gp
.
cast
<
CircleEdgeEffect
>
(
)
;
uint16_t
key
=
ce
.
isStroked
(
)
?
0x1
:
0x0
;
key
|
=
ce
.
usesLocalCoords
(
)
&
&
ce
.
localMatrix
(
)
.
hasPerspective
(
)
?
0x2
:
0x0
;
key
|
=
ce
.
colorIgnored
(
)
?
0x4
:
0x0
;
b
-
>
add32
(
key
)
;
}
void
setData
(
const
GrGLSLProgramDataManager
&
pdman
const
GrPrimitiveProcessor
&
gp
)
override
{
const
CircleEdgeEffect
&
ce
=
gp
.
cast
<
CircleEdgeEffect
>
(
)
;
if
(
ce
.
color
(
)
!
=
fColor
)
{
float
c
[
4
]
;
GrColorToRGBAFloat
(
ce
.
color
(
)
c
)
;
pdman
.
set4fv
(
fColorUniform
1
c
)
;
fColor
=
ce
.
color
(
)
;
}
}
void
setTransformData
(
const
GrPrimitiveProcessor
&
primProc
const
GrGLSLProgramDataManager
&
pdman
int
index
const
SkTArray
<
const
GrCoordTransform
*
true
>
&
transforms
)
override
{
this
-
>
setTransformDataHelper
<
CircleEdgeEffect
>
(
primProc
pdman
index
transforms
)
;
}
private
:
GrColor
fColor
;
UniformHandle
fColorUniform
;
typedef
GrGLSLGeometryProcessor
INHERITED
;
}
;
void
getGLSLProcessorKey
(
const
GrGLSLCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
override
{
GLSLProcessor
:
:
GenKey
(
*
this
caps
b
)
;
}
GrGLSLPrimitiveProcessor
*
createGLSLInstance
(
const
GrGLSLCaps
&
)
const
override
{
return
new
GLSLProcessor
(
)
;
}
private
:
CircleEdgeEffect
(
GrColor
color
bool
stroke
const
SkMatrix
&
localMatrix
bool
usesLocalCoords
)
:
fColor
(
color
)
fLocalMatrix
(
localMatrix
)
fUsesLocalCoords
(
usesLocalCoords
)
{
this
-
>
initClassID
<
CircleEdgeEffect
>
(
)
;
fInPosition
=
&
this
-
>
addVertexAttrib
(
Attribute
(
"
inPosition
"
kVec2f_GrVertexAttribType
kHigh_GrSLPrecision
)
)
;
fInCircleEdge
=
&
this
-
>
addVertexAttrib
(
Attribute
(
"
inCircleEdge
"
kVec4f_GrVertexAttribType
)
)
;
fStroke
=
stroke
;
}
GrColor
fColor
;
SkMatrix
fLocalMatrix
;
const
Attribute
*
fInPosition
;
const
Attribute
*
fInCircleEdge
;
bool
fStroke
;
bool
fUsesLocalCoords
;
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
;
typedef
GrGeometryProcessor
INHERITED
;
}
;
GR_DEFINE_GEOMETRY_PROCESSOR_TEST
(
CircleEdgeEffect
)
;
const
GrGeometryProcessor
*
CircleEdgeEffect
:
:
TestCreate
(
GrProcessorTestData
*
d
)
{
return
CircleEdgeEffect
:
:
Create
(
GrRandomColor
(
d
-
>
fRandom
)
d
-
>
fRandom
-
>
nextBool
(
)
GrTest
:
:
TestMatrix
(
d
-
>
fRandom
)
d
-
>
fRandom
-
>
nextBool
(
)
)
;
}
class
EllipseEdgeEffect
:
public
GrGeometryProcessor
{
public
:
static
GrGeometryProcessor
*
Create
(
GrColor
color
bool
stroke
const
SkMatrix
&
localMatrix
bool
usesLocalCoords
)
{
return
new
EllipseEdgeEffect
(
color
stroke
localMatrix
usesLocalCoords
)
;
}
virtual
~
EllipseEdgeEffect
(
)
{
}
const
char
*
name
(
)
const
override
{
return
"
EllipseEdge
"
;
}
const
Attribute
*
inPosition
(
)
const
{
return
fInPosition
;
}
const
Attribute
*
inEllipseOffset
(
)
const
{
return
fInEllipseOffset
;
}
const
Attribute
*
inEllipseRadii
(
)
const
{
return
fInEllipseRadii
;
}
GrColor
color
(
)
const
{
return
fColor
;
}
bool
colorIgnored
(
)
const
{
return
GrColor_ILLEGAL
=
=
fColor
;
}
const
SkMatrix
&
localMatrix
(
)
const
{
return
fLocalMatrix
;
}
bool
usesLocalCoords
(
)
const
{
return
fUsesLocalCoords
;
}
inline
bool
isStroked
(
)
const
{
return
fStroke
;
}
class
GLSLProcessor
:
public
GrGLSLGeometryProcessor
{
public
:
GLSLProcessor
(
)
:
fColor
(
GrColor_ILLEGAL
)
{
}
void
onEmitCode
(
EmitArgs
&
args
GrGPArgs
*
gpArgs
)
override
{
const
EllipseEdgeEffect
&
ee
=
args
.
fGP
.
cast
<
EllipseEdgeEffect
>
(
)
;
GrGLSLVertexBuilder
*
vertBuilder
=
args
.
fVertBuilder
;
GrGLSLVaryingHandler
*
varyingHandler
=
args
.
fVaryingHandler
;
GrGLSLUniformHandler
*
uniformHandler
=
args
.
fUniformHandler
;
varyingHandler
-
>
emitAttributes
(
ee
)
;
GrGLSLVertToFrag
ellipseOffsets
(
kVec2f_GrSLType
)
;
varyingHandler
-
>
addVarying
(
"
EllipseOffsets
"
&
ellipseOffsets
)
;
vertBuilder
-
>
codeAppendf
(
"
%
s
=
%
s
;
"
ellipseOffsets
.
vsOut
(
)
ee
.
inEllipseOffset
(
)
-
>
fName
)
;
GrGLSLVertToFrag
ellipseRadii
(
kVec4f_GrSLType
)
;
varyingHandler
-
>
addVarying
(
"
EllipseRadii
"
&
ellipseRadii
)
;
vertBuilder
-
>
codeAppendf
(
"
%
s
=
%
s
;
"
ellipseRadii
.
vsOut
(
)
ee
.
inEllipseRadii
(
)
-
>
fName
)
;
GrGLSLFragmentBuilder
*
fragBuilder
=
args
.
fFragBuilder
;
if
(
!
ee
.
colorIgnored
(
)
)
{
this
-
>
setupUniformColor
(
fragBuilder
uniformHandler
args
.
fOutputColor
&
fColorUniform
)
;
}
this
-
>
setupPosition
(
vertBuilder
gpArgs
ee
.
inPosition
(
)
-
>
fName
)
;
this
-
>
emitTransforms
(
vertBuilder
varyingHandler
uniformHandler
gpArgs
-
>
fPositionVar
ee
.
inPosition
(
)
-
>
fName
ee
.
localMatrix
(
)
args
.
fTransformsIn
args
.
fTransformsOut
)
;
fragBuilder
-
>
codeAppendf
(
"
vec2
scaledOffset
=
%
s
*
%
s
.
xy
;
"
ellipseOffsets
.
fsIn
(
)
ellipseRadii
.
fsIn
(
)
)
;
fragBuilder
-
>
codeAppend
(
"
float
test
=
dot
(
scaledOffset
scaledOffset
)
-
1
.
0
;
"
)
;
fragBuilder
-
>
codeAppendf
(
"
vec2
grad
=
2
.
0
*
scaledOffset
*
%
s
.
xy
;
"
ellipseRadii
.
fsIn
(
)
)
;
fragBuilder
-
>
codeAppend
(
"
float
grad_dot
=
dot
(
grad
grad
)
;
"
)
;
fragBuilder
-
>
codeAppend
(
"
grad_dot
=
max
(
grad_dot
1
.
0e
-
4
)
;
"
)
;
fragBuilder
-
>
codeAppend
(
"
float
invlen
=
inversesqrt
(
grad_dot
)
;
"
)
;
fragBuilder
-
>
codeAppend
(
"
float
edgeAlpha
=
clamp
(
0
.
5
-
test
*
invlen
0
.
0
1
.
0
)
;
"
)
;
if
(
ee
.
isStroked
(
)
)
{
fragBuilder
-
>
codeAppendf
(
"
scaledOffset
=
%
s
*
%
s
.
zw
;
"
ellipseOffsets
.
fsIn
(
)
ellipseRadii
.
fsIn
(
)
)
;
fragBuilder
-
>
codeAppend
(
"
test
=
dot
(
scaledOffset
scaledOffset
)
-
1
.
0
;
"
)
;
fragBuilder
-
>
codeAppendf
(
"
grad
=
2
.
0
*
scaledOffset
*
%
s
.
zw
;
"
ellipseRadii
.
fsIn
(
)
)
;
fragBuilder
-
>
codeAppend
(
"
invlen
=
inversesqrt
(
dot
(
grad
grad
)
)
;
"
)
;
fragBuilder
-
>
codeAppend
(
"
edgeAlpha
*
=
clamp
(
0
.
5
+
test
*
invlen
0
.
0
1
.
0
)
;
"
)
;
}
fragBuilder
-
>
codeAppendf
(
"
%
s
=
vec4
(
edgeAlpha
)
;
"
args
.
fOutputCoverage
)
;
}
static
void
GenKey
(
const
GrGeometryProcessor
&
gp
const
GrGLSLCaps
&
GrProcessorKeyBuilder
*
b
)
{
const
EllipseEdgeEffect
&
ee
=
gp
.
cast
<
EllipseEdgeEffect
>
(
)
;
uint16_t
key
=
ee
.
isStroked
(
)
?
0x1
:
0x0
;
key
|
=
ee
.
usesLocalCoords
(
)
&
&
ee
.
localMatrix
(
)
.
hasPerspective
(
)
?
0x2
:
0x0
;
key
|
=
ee
.
colorIgnored
(
)
?
0x4
:
0x0
;
b
-
>
add32
(
key
)
;
}
void
setData
(
const
GrGLSLProgramDataManager
&
pdman
const
GrPrimitiveProcessor
&
gp
)
override
{
const
EllipseEdgeEffect
&
ee
=
gp
.
cast
<
EllipseEdgeEffect
>
(
)
;
if
(
ee
.
color
(
)
!
=
fColor
)
{
float
c
[
4
]
;
GrColorToRGBAFloat
(
ee
.
color
(
)
c
)
;
pdman
.
set4fv
(
fColorUniform
1
c
)
;
fColor
=
ee
.
color
(
)
;
}
}
void
setTransformData
(
const
GrPrimitiveProcessor
&
primProc
const
GrGLSLProgramDataManager
&
pdman
int
index
const
SkTArray
<
const
GrCoordTransform
*
true
>
&
transforms
)
override
{
this
-
>
setTransformDataHelper
<
EllipseEdgeEffect
>
(
primProc
pdman
index
transforms
)
;
}
private
:
GrColor
fColor
;
UniformHandle
fColorUniform
;
typedef
GrGLSLGeometryProcessor
INHERITED
;
}
;
void
getGLSLProcessorKey
(
const
GrGLSLCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
override
{
GLSLProcessor
:
:
GenKey
(
*
this
caps
b
)
;
}
GrGLSLPrimitiveProcessor
*
createGLSLInstance
(
const
GrGLSLCaps
&
)
const
override
{
return
new
GLSLProcessor
(
)
;
}
private
:
EllipseEdgeEffect
(
GrColor
color
bool
stroke
const
SkMatrix
&
localMatrix
bool
usesLocalCoords
)
:
fColor
(
color
)
fLocalMatrix
(
localMatrix
)
fUsesLocalCoords
(
usesLocalCoords
)
{
this
-
>
initClassID
<
EllipseEdgeEffect
>
(
)
;
fInPosition
=
&
this
-
>
addVertexAttrib
(
Attribute
(
"
inPosition
"
kVec2f_GrVertexAttribType
)
)
;
fInEllipseOffset
=
&
this
-
>
addVertexAttrib
(
Attribute
(
"
inEllipseOffset
"
kVec2f_GrVertexAttribType
)
)
;
fInEllipseRadii
=
&
this
-
>
addVertexAttrib
(
Attribute
(
"
inEllipseRadii
"
kVec4f_GrVertexAttribType
)
)
;
fStroke
=
stroke
;
}
const
Attribute
*
fInPosition
;
const
Attribute
*
fInEllipseOffset
;
const
Attribute
*
fInEllipseRadii
;
GrColor
fColor
;
SkMatrix
fLocalMatrix
;
bool
fStroke
;
bool
fUsesLocalCoords
;
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
;
typedef
GrGeometryProcessor
INHERITED
;
}
;
GR_DEFINE_GEOMETRY_PROCESSOR_TEST
(
EllipseEdgeEffect
)
;
const
GrGeometryProcessor
*
EllipseEdgeEffect
:
:
TestCreate
(
GrProcessorTestData
*
d
)
{
return
EllipseEdgeEffect
:
:
Create
(
GrRandomColor
(
d
-
>
fRandom
)
d
-
>
fRandom
-
>
nextBool
(
)
GrTest
:
:
TestMatrix
(
d
-
>
fRandom
)
d
-
>
fRandom
-
>
nextBool
(
)
)
;
}
class
DIEllipseEdgeEffect
:
public
GrGeometryProcessor
{
public
:
enum
Mode
{
kStroke
=
0
kHairline
kFill
}
;
static
GrGeometryProcessor
*
Create
(
GrColor
color
const
SkMatrix
&
viewMatrix
Mode
mode
bool
usesLocalCoords
)
{
return
new
DIEllipseEdgeEffect
(
color
viewMatrix
mode
usesLocalCoords
)
;
}
virtual
~
DIEllipseEdgeEffect
(
)
{
}
const
char
*
name
(
)
const
override
{
return
"
DIEllipseEdge
"
;
}
const
Attribute
*
inPosition
(
)
const
{
return
fInPosition
;
}
const
Attribute
*
inEllipseOffsets0
(
)
const
{
return
fInEllipseOffsets0
;
}
const
Attribute
*
inEllipseOffsets1
(
)
const
{
return
fInEllipseOffsets1
;
}
GrColor
color
(
)
const
{
return
fColor
;
}
bool
colorIgnored
(
)
const
{
return
GrColor_ILLEGAL
=
=
fColor
;
}
const
SkMatrix
&
viewMatrix
(
)
const
{
return
fViewMatrix
;
}
bool
usesLocalCoords
(
)
const
{
return
fUsesLocalCoords
;
}
inline
Mode
getMode
(
)
const
{
return
fMode
;
}
class
GLSLProcessor
:
public
GrGLSLGeometryProcessor
{
public
:
GLSLProcessor
(
)
:
fViewMatrix
(
SkMatrix
:
:
InvalidMatrix
(
)
)
fColor
(
GrColor_ILLEGAL
)
{
}
void
onEmitCode
(
EmitArgs
&
args
GrGPArgs
*
gpArgs
)
override
{
const
DIEllipseEdgeEffect
&
ee
=
args
.
fGP
.
cast
<
DIEllipseEdgeEffect
>
(
)
;
GrGLSLVertexBuilder
*
vertBuilder
=
args
.
fVertBuilder
;
GrGLSLVaryingHandler
*
varyingHandler
=
args
.
fVaryingHandler
;
GrGLSLUniformHandler
*
uniformHandler
=
args
.
fUniformHandler
;
varyingHandler
-
>
emitAttributes
(
ee
)
;
GrGLSLVertToFrag
offsets0
(
kVec2f_GrSLType
)
;
varyingHandler
-
>
addVarying
(
"
EllipseOffsets0
"
&
offsets0
)
;
vertBuilder
-
>
codeAppendf
(
"
%
s
=
%
s
;
"
offsets0
.
vsOut
(
)
ee
.
inEllipseOffsets0
(
)
-
>
fName
)
;
GrGLSLVertToFrag
offsets1
(
kVec2f_GrSLType
)
;
varyingHandler
-
>
addVarying
(
"
EllipseOffsets1
"
&
offsets1
)
;
vertBuilder
-
>
codeAppendf
(
"
%
s
=
%
s
;
"
offsets1
.
vsOut
(
)
ee
.
inEllipseOffsets1
(
)
-
>
fName
)
;
GrGLSLFragmentBuilder
*
fragBuilder
=
args
.
fFragBuilder
;
if
(
!
ee
.
colorIgnored
(
)
)
{
this
-
>
setupUniformColor
(
fragBuilder
uniformHandler
args
.
fOutputColor
&
fColorUniform
)
;
}
this
-
>
setupPosition
(
vertBuilder
uniformHandler
gpArgs
ee
.
inPosition
(
)
-
>
fName
ee
.
viewMatrix
(
)
&
fViewMatrixUniform
)
;
this
-
>
emitTransforms
(
vertBuilder
varyingHandler
uniformHandler
gpArgs
-
>
fPositionVar
ee
.
inPosition
(
)
-
>
fName
args
.
fTransformsIn
args
.
fTransformsOut
)
;
SkAssertResult
(
fragBuilder
-
>
enableFeature
(
GrGLSLFragmentShaderBuilder
:
:
kStandardDerivatives_GLSLFeature
)
)
;
fragBuilder
-
>
codeAppendf
(
"
vec2
scaledOffset
=
%
s
.
xy
;
"
offsets0
.
fsIn
(
)
)
;
fragBuilder
-
>
codeAppend
(
"
float
test
=
dot
(
scaledOffset
scaledOffset
)
-
1
.
0
;
"
)
;
fragBuilder
-
>
codeAppendf
(
"
vec2
duvdx
=
dFdx
(
%
s
)
;
"
offsets0
.
fsIn
(
)
)
;
fragBuilder
-
>
codeAppendf
(
"
vec2
duvdy
=
dFdy
(
%
s
)
;
"
offsets0
.
fsIn
(
)
)
;
fragBuilder
-
>
codeAppendf
(
"
vec2
grad
=
vec2
(
2
.
0
*
%
s
.
x
*
duvdx
.
x
+
2
.
0
*
%
s
.
y
*
duvdx
.
y
"
"
2
.
0
*
%
s
.
x
*
duvdy
.
x
+
2
.
0
*
%
s
.
y
*
duvdy
.
y
)
;
"
offsets0
.
fsIn
(
)
offsets0
.
fsIn
(
)
offsets0
.
fsIn
(
)
offsets0
.
fsIn
(
)
)
;
fragBuilder
-
>
codeAppend
(
"
float
grad_dot
=
dot
(
grad
grad
)
;
"
)
;
fragBuilder
-
>
codeAppend
(
"
grad_dot
=
max
(
grad_dot
1
.
0e
-
4
)
;
"
)
;
fragBuilder
-
>
codeAppend
(
"
float
invlen
=
inversesqrt
(
grad_dot
)
;
"
)
;
if
(
kHairline
=
=
ee
.
getMode
(
)
)
{
fragBuilder
-
>
codeAppend
(
"
float
edgeAlpha
=
clamp
(
1
.
0
-
test
*
invlen
0
.
0
1
.
0
)
;
"
)
;
fragBuilder
-
>
codeAppend
(
"
edgeAlpha
*
=
clamp
(
1
.
0
+
test
*
invlen
0
.
0
1
.
0
)
;
"
)
;
}
else
{
fragBuilder
-
>
codeAppend
(
"
float
edgeAlpha
=
clamp
(
0
.
5
-
test
*
invlen
0
.
0
1
.
0
)
;
"
)
;
}
if
(
kStroke
=
=
ee
.
getMode
(
)
)
{
fragBuilder
-
>
codeAppendf
(
"
scaledOffset
=
%
s
.
xy
;
"
offsets1
.
fsIn
(
)
)
;
fragBuilder
-
>
codeAppend
(
"
test
=
dot
(
scaledOffset
scaledOffset
)
-
1
.
0
;
"
)
;
fragBuilder
-
>
codeAppendf
(
"
duvdx
=
dFdx
(
%
s
)
;
"
offsets1
.
fsIn
(
)
)
;
fragBuilder
-
>
codeAppendf
(
"
duvdy
=
dFdy
(
%
s
)
;
"
offsets1
.
fsIn
(
)
)
;
fragBuilder
-
>
codeAppendf
(
"
grad
=
vec2
(
2
.
0
*
%
s
.
x
*
duvdx
.
x
+
2
.
0
*
%
s
.
y
*
duvdx
.
y
"
"
2
.
0
*
%
s
.
x
*
duvdy
.
x
+
2
.
0
*
%
s
.
y
*
duvdy
.
y
)
;
"
offsets1
.
fsIn
(
)
offsets1
.
fsIn
(
)
offsets1
.
fsIn
(
)
offsets1
.
fsIn
(
)
)
;
fragBuilder
-
>
codeAppend
(
"
invlen
=
inversesqrt
(
dot
(
grad
grad
)
)
;
"
)
;
fragBuilder
-
>
codeAppend
(
"
edgeAlpha
*
=
clamp
(
0
.
5
+
test
*
invlen
0
.
0
1
.
0
)
;
"
)
;
}
fragBuilder
-
>
codeAppendf
(
"
%
s
=
vec4
(
edgeAlpha
)
;
"
args
.
fOutputCoverage
)
;
}
static
void
GenKey
(
const
GrGeometryProcessor
&
gp
const
GrGLSLCaps
&
GrProcessorKeyBuilder
*
b
)
{
const
DIEllipseEdgeEffect
&
ellipseEffect
=
gp
.
cast
<
DIEllipseEdgeEffect
>
(
)
;
uint16_t
key
=
ellipseEffect
.
getMode
(
)
;
key
|
=
ellipseEffect
.
colorIgnored
(
)
<
<
9
;
key
|
=
ComputePosKey
(
ellipseEffect
.
viewMatrix
(
)
)
<
<
10
;
b
-
>
add32
(
key
)
;
}
void
setData
(
const
GrGLSLProgramDataManager
&
pdman
const
GrPrimitiveProcessor
&
gp
)
override
{
const
DIEllipseEdgeEffect
&
dee
=
gp
.
cast
<
DIEllipseEdgeEffect
>
(
)
;
if
(
!
dee
.
viewMatrix
(
)
.
isIdentity
(
)
&
&
!
fViewMatrix
.
cheapEqualTo
(
dee
.
viewMatrix
(
)
)
)
{
fViewMatrix
=
dee
.
viewMatrix
(
)
;
float
viewMatrix
[
3
*
3
]
;
GrGLSLGetMatrix
<
3
>
(
viewMatrix
fViewMatrix
)
;
pdman
.
setMatrix3f
(
fViewMatrixUniform
viewMatrix
)
;
}
if
(
dee
.
color
(
)
!
=
fColor
)
{
float
c
[
4
]
;
GrColorToRGBAFloat
(
dee
.
color
(
)
c
)
;
pdman
.
set4fv
(
fColorUniform
1
c
)
;
fColor
=
dee
.
color
(
)
;
}
}
private
:
SkMatrix
fViewMatrix
;
GrColor
fColor
;
UniformHandle
fColorUniform
;
UniformHandle
fViewMatrixUniform
;
typedef
GrGLSLGeometryProcessor
INHERITED
;
}
;
void
getGLSLProcessorKey
(
const
GrGLSLCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
override
{
GLSLProcessor
:
:
GenKey
(
*
this
caps
b
)
;
}
GrGLSLPrimitiveProcessor
*
createGLSLInstance
(
const
GrGLSLCaps
&
)
const
override
{
return
new
GLSLProcessor
(
)
;
}
private
:
DIEllipseEdgeEffect
(
GrColor
color
const
SkMatrix
&
viewMatrix
Mode
mode
bool
usesLocalCoords
)
:
fColor
(
color
)
fViewMatrix
(
viewMatrix
)
fUsesLocalCoords
(
usesLocalCoords
)
{
this
-
>
initClassID
<
DIEllipseEdgeEffect
>
(
)
;
fInPosition
=
&
this
-
>
addVertexAttrib
(
Attribute
(
"
inPosition
"
kVec2f_GrVertexAttribType
kHigh_GrSLPrecision
)
)
;
fInEllipseOffsets0
=
&
this
-
>
addVertexAttrib
(
Attribute
(
"
inEllipseOffsets0
"
kVec2f_GrVertexAttribType
)
)
;
fInEllipseOffsets1
=
&
this
-
>
addVertexAttrib
(
Attribute
(
"
inEllipseOffsets1
"
kVec2f_GrVertexAttribType
)
)
;
fMode
=
mode
;
}
const
Attribute
*
fInPosition
;
const
Attribute
*
fInEllipseOffsets0
;
const
Attribute
*
fInEllipseOffsets1
;
GrColor
fColor
;
SkMatrix
fViewMatrix
;
Mode
fMode
;
bool
fUsesLocalCoords
;
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
;
typedef
GrGeometryProcessor
INHERITED
;
}
;
GR_DEFINE_GEOMETRY_PROCESSOR_TEST
(
DIEllipseEdgeEffect
)
;
const
GrGeometryProcessor
*
DIEllipseEdgeEffect
:
:
TestCreate
(
GrProcessorTestData
*
d
)
{
return
DIEllipseEdgeEffect
:
:
Create
(
GrRandomColor
(
d
-
>
fRandom
)
GrTest
:
:
TestMatrix
(
d
-
>
fRandom
)
(
Mode
)
(
d
-
>
fRandom
-
>
nextRangeU
(
0
2
)
)
d
-
>
fRandom
-
>
nextBool
(
)
)
;
}
bool
GrOvalRenderer
:
:
DrawOval
(
GrDrawTarget
*
target
const
GrPipelineBuilder
&
pipelineBuilder
GrColor
color
const
SkMatrix
&
viewMatrix
bool
useAA
const
SkRect
&
oval
const
SkStrokeRec
&
stroke
)
{
bool
useCoverageAA
=
useAA
&
&
!
pipelineBuilder
.
getRenderTarget
(
)
-
>
isUnifiedMultisampled
(
)
;
if
(
!
useCoverageAA
)
{
return
false
;
}
if
(
SkScalarNearlyEqual
(
oval
.
width
(
)
oval
.
height
(
)
)
&
&
circle_stays_circle
(
viewMatrix
)
)
{
DrawCircle
(
target
pipelineBuilder
color
viewMatrix
useCoverageAA
oval
stroke
)
;
}
else
if
(
target
-
>
caps
(
)
-
>
shaderCaps
(
)
-
>
shaderDerivativeSupport
(
)
)
{
return
DrawDIEllipse
(
target
pipelineBuilder
color
viewMatrix
useCoverageAA
oval
stroke
)
;
}
else
if
(
viewMatrix
.
rectStaysRect
(
)
)
{
return
DrawEllipse
(
target
pipelineBuilder
color
viewMatrix
useCoverageAA
oval
stroke
)
;
}
else
{
return
false
;
}
return
true
;
}
class
CircleBatch
:
public
GrVertexBatch
{
public
:
DEFINE_BATCH_CLASS_ID
struct
Geometry
{
SkMatrix
fViewMatrix
;
SkRect
fDevBounds
;
SkScalar
fInnerRadius
;
SkScalar
fOuterRadius
;
GrColor
fColor
;
bool
fStroke
;
}
;
static
GrDrawBatch
*
Create
(
const
Geometry
&
geometry
)
{
return
new
CircleBatch
(
geometry
)
;
}
const
char
*
name
(
)
const
override
{
return
"
CircleBatch
"
;
}
SkString
dumpInfo
(
)
const
override
{
SkString
string
;
for
(
int
i
=
0
;
i
<
fGeoData
.
count
(
)
;
+
+
i
)
{
string
.
appendf
(
"
Color
:
0x
%
08x
Rect
[
L
:
%
.
2f
T
:
%
.
2f
R
:
%
.
2f
B
:
%
.
2f
]
"
"
InnerRad
:
%
.
2f
OuterRad
:
%
.
2f
\
n
"
fGeoData
[
i
]
.
fColor
fGeoData
[
i
]
.
fDevBounds
.
fLeft
fGeoData
[
i
]
.
fDevBounds
.
fTop
fGeoData
[
i
]
.
fDevBounds
.
fRight
fGeoData
[
i
]
.
fDevBounds
.
fBottom
fGeoData
[
i
]
.
fInnerRadius
fGeoData
[
i
]
.
fOuterRadius
)
;
}
string
.
append
(
INHERITED
:
:
dumpInfo
(
)
)
;
return
string
;
}
void
computePipelineOptimizations
(
GrInitInvariantOutput
*
color
GrInitInvariantOutput
*
coverage
GrBatchToXPOverrides
*
overrides
)
const
override
{
color
-
>
setKnownFourComponents
(
fGeoData
[
0
]
.
fColor
)
;
coverage
-
>
setUnknownSingleComponent
(
)
;
overrides
-
>
fUsePLSDstRead
=
false
;
}
private
:
void
initBatchTracker
(
const
GrXPOverridesForBatch
&
overrides
)
override
{
if
(
!
overrides
.
readsColor
(
)
)
{
fGeoData
[
0
]
.
fColor
=
GrColor_ILLEGAL
;
}
overrides
.
getOverrideColorIfSet
(
&
fGeoData
[
0
]
.
fColor
)
;
fBatch
.
fColorIgnored
=
!
overrides
.
readsColor
(
)
;
fBatch
.
fColor
=
fGeoData
[
0
]
.
fColor
;
fBatch
.
fStroke
=
fGeoData
[
0
]
.
fStroke
;
fBatch
.
fUsesLocalCoords
=
overrides
.
readsLocalCoords
(
)
;
fBatch
.
fCoverageIgnored
=
!
overrides
.
readsCoverage
(
)
;
}
void
onPrepareDraws
(
Target
*
target
)
const
override
{
SkMatrix
invert
;
if
(
!
this
-
>
viewMatrix
(
)
.
invert
(
&
invert
)
)
{
return
;
}
SkAutoTUnref
<
GrGeometryProcessor
>
gp
(
CircleEdgeEffect
:
:
Create
(
this
-
>
color
(
)
this
-
>
stroke
(
)
invert
this
-
>
usesLocalCoords
(
)
)
)
;
target
-
>
initDraw
(
gp
this
-
>
pipeline
(
)
)
;
int
instanceCount
=
fGeoData
.
count
(
)
;
size_t
vertexStride
=
gp
-
>
getVertexStride
(
)
;
SkASSERT
(
vertexStride
=
=
sizeof
(
CircleVertex
)
)
;
QuadHelper
helper
;
CircleVertex
*
verts
=
reinterpret_cast
<
CircleVertex
*
>
(
helper
.
init
(
target
vertexStride
instanceCount
)
)
;
if
(
!
verts
)
{
return
;
}
for
(
int
i
=
0
;
i
<
instanceCount
;
i
+
+
)
{
const
Geometry
&
geom
=
fGeoData
[
i
]
;
SkScalar
innerRadius
=
geom
.
fInnerRadius
;
SkScalar
outerRadius
=
geom
.
fOuterRadius
;
const
SkRect
&
bounds
=
geom
.
fDevBounds
;
innerRadius
=
innerRadius
/
outerRadius
;
verts
[
0
]
.
fPos
=
SkPoint
:
:
Make
(
bounds
.
fLeft
bounds
.
fTop
)
;
verts
[
0
]
.
fOffset
=
SkPoint
:
:
Make
(
-
1
-
1
)
;
verts
[
0
]
.
fOuterRadius
=
outerRadius
;
verts
[
0
]
.
fInnerRadius
=
innerRadius
;
verts
[
1
]
.
fPos
=
SkPoint
:
:
Make
(
bounds
.
fLeft
bounds
.
fBottom
)
;
verts
[
1
]
.
fOffset
=
SkPoint
:
:
Make
(
-
1
1
)
;
verts
[
1
]
.
fOuterRadius
=
outerRadius
;
verts
[
1
]
.
fInnerRadius
=
innerRadius
;
verts
[
2
]
.
fPos
=
SkPoint
:
:
Make
(
bounds
.
fRight
bounds
.
fBottom
)
;
verts
[
2
]
.
fOffset
=
SkPoint
:
:
Make
(
1
1
)
;
verts
[
2
]
.
fOuterRadius
=
outerRadius
;
verts
[
2
]
.
fInnerRadius
=
innerRadius
;
verts
[
3
]
.
fPos
=
SkPoint
:
:
Make
(
bounds
.
fRight
bounds
.
fTop
)
;
verts
[
3
]
.
fOffset
=
SkPoint
:
:
Make
(
1
-
1
)
;
verts
[
3
]
.
fOuterRadius
=
outerRadius
;
verts
[
3
]
.
fInnerRadius
=
innerRadius
;
verts
+
=
kVerticesPerQuad
;
}
helper
.
recordDraw
(
target
)
;
}
SkSTArray
<
1
Geometry
true
>
*
geoData
(
)
{
return
&
fGeoData
;
}
CircleBatch
(
const
Geometry
&
geometry
)
:
INHERITED
(
ClassID
(
)
)
{
fGeoData
.
push_back
(
geometry
)
;
this
-
>
setBounds
(
geometry
.
fDevBounds
)
;
}
bool
onCombineIfPossible
(
GrBatch
*
t
const
GrCaps
&
caps
)
override
{
CircleBatch
*
that
=
t
-
>
cast
<
CircleBatch
>
(
)
;
if
(
!
GrPipeline
:
:
CanCombine
(
*
this
-
>
pipeline
(
)
this
-
>
bounds
(
)
*
that
-
>
pipeline
(
)
that
-
>
bounds
(
)
caps
)
)
{
return
false
;
}
if
(
this
-
>
color
(
)
!
=
that
-
>
color
(
)
)
{
return
false
;
}
if
(
this
-
>
stroke
(
)
!
=
that
-
>
stroke
(
)
)
{
return
false
;
}
SkASSERT
(
this
-
>
usesLocalCoords
(
)
=
=
that
-
>
usesLocalCoords
(
)
)
;
if
(
this
-
>
usesLocalCoords
(
)
&
&
!
this
-
>
viewMatrix
(
)
.
cheapEqualTo
(
that
-
>
viewMatrix
(
)
)
)
{
return
false
;
}
fGeoData
.
push_back_n
(
that
-
>
geoData
(
)
-
>
count
(
)
that
-
>
geoData
(
)
-
>
begin
(
)
)
;
this
-
>
joinBounds
(
that
-
>
bounds
(
)
)
;
return
true
;
}
GrColor
color
(
)
const
{
return
fBatch
.
fColor
;
}
bool
usesLocalCoords
(
)
const
{
return
fBatch
.
fUsesLocalCoords
;
}
const
SkMatrix
&
viewMatrix
(
)
const
{
return
fGeoData
[
0
]
.
fViewMatrix
;
}
bool
stroke
(
)
const
{
return
fBatch
.
fStroke
;
}
struct
BatchTracker
{
GrColor
fColor
;
bool
fStroke
;
bool
fUsesLocalCoords
;
bool
fColorIgnored
;
bool
fCoverageIgnored
;
}
;
BatchTracker
fBatch
;
SkSTArray
<
1
Geometry
true
>
fGeoData
;
typedef
GrVertexBatch
INHERITED
;
}
;
static
GrDrawBatch
*
create_circle_batch
(
GrColor
color
const
SkMatrix
&
viewMatrix
bool
useCoverageAA
const
SkRect
&
circle
const
SkStrokeRec
&
stroke
)
{
SkPoint
center
=
SkPoint
:
:
Make
(
circle
.
centerX
(
)
circle
.
centerY
(
)
)
;
viewMatrix
.
mapPoints
(
&
center
1
)
;
SkScalar
radius
=
viewMatrix
.
mapRadius
(
SkScalarHalf
(
circle
.
width
(
)
)
)
;
SkScalar
strokeWidth
=
viewMatrix
.
mapRadius
(
stroke
.
getWidth
(
)
)
;
SkStrokeRec
:
:
Style
style
=
stroke
.
getStyle
(
)
;
bool
isStrokeOnly
=
SkStrokeRec
:
:
kStroke_Style
=
=
style
|
|
SkStrokeRec
:
:
kHairline_Style
=
=
style
;
bool
hasStroke
=
isStrokeOnly
|
|
SkStrokeRec
:
:
kStrokeAndFill_Style
=
=
style
;
SkScalar
innerRadius
=
0
.
0f
;
SkScalar
outerRadius
=
radius
;
SkScalar
halfWidth
=
0
;
if
(
hasStroke
)
{
if
(
SkScalarNearlyZero
(
strokeWidth
)
)
{
halfWidth
=
SK_ScalarHalf
;
}
else
{
halfWidth
=
SkScalarHalf
(
strokeWidth
)
;
}
outerRadius
+
=
halfWidth
;
if
(
isStrokeOnly
)
{
innerRadius
=
radius
-
halfWidth
;
}
}
outerRadius
+
=
SK_ScalarHalf
;
innerRadius
-
=
SK_ScalarHalf
;
CircleBatch
:
:
Geometry
geometry
;
geometry
.
fViewMatrix
=
viewMatrix
;
geometry
.
fColor
=
color
;
geometry
.
fInnerRadius
=
innerRadius
;
geometry
.
fOuterRadius
=
outerRadius
;
geometry
.
fStroke
=
isStrokeOnly
&
&
innerRadius
>
0
;
geometry
.
fDevBounds
=
SkRect
:
:
MakeLTRB
(
center
.
fX
-
outerRadius
center
.
fY
-
outerRadius
center
.
fX
+
outerRadius
center
.
fY
+
outerRadius
)
;
return
CircleBatch
:
:
Create
(
geometry
)
;
}
void
GrOvalRenderer
:
:
DrawCircle
(
GrDrawTarget
*
target
const
GrPipelineBuilder
&
pipelineBuilder
GrColor
color
const
SkMatrix
&
viewMatrix
bool
useCoverageAA
const
SkRect
&
circle
const
SkStrokeRec
&
stroke
)
{
SkAutoTUnref
<
GrDrawBatch
>
batch
(
create_circle_batch
(
color
viewMatrix
useCoverageAA
circle
stroke
)
)
;
target
-
>
drawBatch
(
pipelineBuilder
batch
)
;
}
class
EllipseBatch
:
public
GrVertexBatch
{
public
:
DEFINE_BATCH_CLASS_ID
struct
Geometry
{
SkMatrix
fViewMatrix
;
SkRect
fDevBounds
;
SkScalar
fXRadius
;
SkScalar
fYRadius
;
SkScalar
fInnerXRadius
;
SkScalar
fInnerYRadius
;
GrColor
fColor
;
bool
fStroke
;
}
;
static
GrDrawBatch
*
Create
(
const
Geometry
&
geometry
)
{
return
new
EllipseBatch
(
geometry
)
;
}
const
char
*
name
(
)
const
override
{
return
"
EllipseBatch
"
;
}
void
computePipelineOptimizations
(
GrInitInvariantOutput
*
color
GrInitInvariantOutput
*
coverage
GrBatchToXPOverrides
*
overrides
)
const
override
{
color
-
>
setKnownFourComponents
(
fGeoData
[
0
]
.
fColor
)
;
coverage
-
>
setUnknownSingleComponent
(
)
;
overrides
-
>
fUsePLSDstRead
=
false
;
}
private
:
void
initBatchTracker
(
const
GrXPOverridesForBatch
&
overrides
)
override
{
if
(
!
overrides
.
readsCoverage
(
)
)
{
fGeoData
[
0
]
.
fColor
=
GrColor_ILLEGAL
;
}
overrides
.
getOverrideColorIfSet
(
&
fGeoData
[
0
]
.
fColor
)
;
fBatch
.
fColorIgnored
=
!
overrides
.
readsColor
(
)
;
fBatch
.
fColor
=
fGeoData
[
0
]
.
fColor
;
fBatch
.
fStroke
=
fGeoData
[
0
]
.
fStroke
;
fBatch
.
fUsesLocalCoords
=
overrides
.
readsLocalCoords
(
)
;
fBatch
.
fCoverageIgnored
=
!
overrides
.
readsCoverage
(
)
;
}
void
onPrepareDraws
(
Target
*
target
)
const
override
{
SkMatrix
invert
;
if
(
!
this
-
>
viewMatrix
(
)
.
invert
(
&
invert
)
)
{
return
;
}
SkAutoTUnref
<
GrGeometryProcessor
>
gp
(
EllipseEdgeEffect
:
:
Create
(
this
-
>
color
(
)
this
-
>
stroke
(
)
invert
this
-
>
usesLocalCoords
(
)
)
)
;
target
-
>
initDraw
(
gp
this
-
>
pipeline
(
)
)
;
int
instanceCount
=
fGeoData
.
count
(
)
;
QuadHelper
helper
;
size_t
vertexStride
=
gp
-
>
getVertexStride
(
)
;
SkASSERT
(
vertexStride
=
=
sizeof
(
EllipseVertex
)
)
;
EllipseVertex
*
verts
=
reinterpret_cast
<
EllipseVertex
*
>
(
helper
.
init
(
target
vertexStride
instanceCount
)
)
;
if
(
!
verts
)
{
return
;
}
for
(
int
i
=
0
;
i
<
instanceCount
;
i
+
+
)
{
const
Geometry
&
geom
=
fGeoData
[
i
]
;
SkScalar
xRadius
=
geom
.
fXRadius
;
SkScalar
yRadius
=
geom
.
fYRadius
;
SkScalar
xRadRecip
=
SkScalarInvert
(
xRadius
)
;
SkScalar
yRadRecip
=
SkScalarInvert
(
yRadius
)
;
SkScalar
xInnerRadRecip
=
SkScalarInvert
(
geom
.
fInnerXRadius
)
;
SkScalar
yInnerRadRecip
=
SkScalarInvert
(
geom
.
fInnerYRadius
)
;
const
SkRect
&
bounds
=
geom
.
fDevBounds
;
verts
[
0
]
.
fPos
=
SkPoint
:
:
Make
(
bounds
.
fLeft
bounds
.
fTop
)
;
verts
[
0
]
.
fOffset
=
SkPoint
:
:
Make
(
-
xRadius
-
yRadius
)
;
verts
[
0
]
.
fOuterRadii
=
SkPoint
:
:
Make
(
xRadRecip
yRadRecip
)
;
verts
[
0
]
.
fInnerRadii
=
SkPoint
:
:
Make
(
xInnerRadRecip
yInnerRadRecip
)
;
verts
[
1
]
.
fPos
=
SkPoint
:
:
Make
(
bounds
.
fLeft
bounds
.
fBottom
)
;
verts
[
1
]
.
fOffset
=
SkPoint
:
:
Make
(
-
xRadius
yRadius
)
;
verts
[
1
]
.
fOuterRadii
=
SkPoint
:
:
Make
(
xRadRecip
yRadRecip
)
;
verts
[
1
]
.
fInnerRadii
=
SkPoint
:
:
Make
(
xInnerRadRecip
yInnerRadRecip
)
;
verts
[
2
]
.
fPos
=
SkPoint
:
:
Make
(
bounds
.
fRight
bounds
.
fBottom
)
;
verts
[
2
]
.
fOffset
=
SkPoint
:
:
Make
(
xRadius
yRadius
)
;
verts
[
2
]
.
fOuterRadii
=
SkPoint
:
:
Make
(
xRadRecip
yRadRecip
)
;
verts
[
2
]
.
fInnerRadii
=
SkPoint
:
:
Make
(
xInnerRadRecip
yInnerRadRecip
)
;
verts
[
3
]
.
fPos
=
SkPoint
:
:
Make
(
bounds
.
fRight
bounds
.
fTop
)
;
verts
[
3
]
.
fOffset
=
SkPoint
:
:
Make
(
xRadius
-
yRadius
)
;
verts
[
3
]
.
fOuterRadii
=
SkPoint
:
:
Make
(
xRadRecip
yRadRecip
)
;
verts
[
3
]
.
fInnerRadii
=
SkPoint
:
:
Make
(
xInnerRadRecip
yInnerRadRecip
)
;
verts
+
=
kVerticesPerQuad
;
}
helper
.
recordDraw
(
target
)
;
}
SkSTArray
<
1
Geometry
true
>
*
geoData
(
)
{
return
&
fGeoData
;
}
EllipseBatch
(
const
Geometry
&
geometry
)
:
INHERITED
(
ClassID
(
)
)
{
fGeoData
.
push_back
(
geometry
)
;
this
-
>
setBounds
(
geometry
.
fDevBounds
)
;
}
bool
onCombineIfPossible
(
GrBatch
*
t
const
GrCaps
&
caps
)
override
{
EllipseBatch
*
that
=
t
-
>
cast
<
EllipseBatch
>
(
)
;
if
(
!
GrPipeline
:
:
CanCombine
(
*
this
-
>
pipeline
(
)
this
-
>
bounds
(
)
*
that
-
>
pipeline
(
)
that
-
>
bounds
(
)
caps
)
)
{
return
false
;
}
if
(
this
-
>
color
(
)
!
=
that
-
>
color
(
)
)
{
return
false
;
}
if
(
this
-
>
stroke
(
)
!
=
that
-
>
stroke
(
)
)
{
return
false
;
}
SkASSERT
(
this
-
>
usesLocalCoords
(
)
=
=
that
-
>
usesLocalCoords
(
)
)
;
if
(
this
-
>
usesLocalCoords
(
)
&
&
!
this
-
>
viewMatrix
(
)
.
cheapEqualTo
(
that
-
>
viewMatrix
(
)
)
)
{
return
false
;
}
fGeoData
.
push_back_n
(
that
-
>
geoData
(
)
-
>
count
(
)
that
-
>
geoData
(
)
-
>
begin
(
)
)
;
this
-
>
joinBounds
(
that
-
>
bounds
(
)
)
;
return
true
;
}
GrColor
color
(
)
const
{
return
fBatch
.
fColor
;
}
bool
usesLocalCoords
(
)
const
{
return
fBatch
.
fUsesLocalCoords
;
}
const
SkMatrix
&
viewMatrix
(
)
const
{
return
fGeoData
[
0
]
.
fViewMatrix
;
}
bool
stroke
(
)
const
{
return
fBatch
.
fStroke
;
}
struct
BatchTracker
{
GrColor
fColor
;
bool
fStroke
;
bool
fUsesLocalCoords
;
bool
fColorIgnored
;
bool
fCoverageIgnored
;
}
;
BatchTracker
fBatch
;
SkSTArray
<
1
Geometry
true
>
fGeoData
;
typedef
GrVertexBatch
INHERITED
;
}
;
static
GrDrawBatch
*
create_ellipse_batch
(
GrColor
color
const
SkMatrix
&
viewMatrix
bool
useCoverageAA
const
SkRect
&
ellipse
const
SkStrokeRec
&
stroke
)
{
#
ifdef
SK_DEBUG
{
bool
isAxisAlignedEllipse
=
viewMatrix
.
rectStaysRect
(
)
;
SkASSERT
(
useCoverageAA
&
&
isAxisAlignedEllipse
)
;
}
#
endif
SkPoint
center
=
SkPoint
:
:
Make
(
ellipse
.
centerX
(
)
ellipse
.
centerY
(
)
)
;
viewMatrix
.
mapPoints
(
&
center
1
)
;
SkScalar
ellipseXRadius
=
SkScalarHalf
(
ellipse
.
width
(
)
)
;
SkScalar
ellipseYRadius
=
SkScalarHalf
(
ellipse
.
height
(
)
)
;
SkScalar
xRadius
=
SkScalarAbs
(
viewMatrix
[
SkMatrix
:
:
kMScaleX
]
*
ellipseXRadius
+
viewMatrix
[
SkMatrix
:
:
kMSkewY
]
*
ellipseYRadius
)
;
SkScalar
yRadius
=
SkScalarAbs
(
viewMatrix
[
SkMatrix
:
:
kMSkewX
]
*
ellipseXRadius
+
viewMatrix
[
SkMatrix
:
:
kMScaleY
]
*
ellipseYRadius
)
;
SkVector
scaledStroke
;
SkScalar
strokeWidth
=
stroke
.
getWidth
(
)
;
scaledStroke
.
fX
=
SkScalarAbs
(
strokeWidth
*
(
viewMatrix
[
SkMatrix
:
:
kMScaleX
]
+
viewMatrix
[
SkMatrix
:
:
kMSkewY
]
)
)
;
scaledStroke
.
fY
=
SkScalarAbs
(
strokeWidth
*
(
viewMatrix
[
SkMatrix
:
:
kMSkewX
]
+
viewMatrix
[
SkMatrix
:
:
kMScaleY
]
)
)
;
SkStrokeRec
:
:
Style
style
=
stroke
.
getStyle
(
)
;
bool
isStrokeOnly
=
SkStrokeRec
:
:
kStroke_Style
=
=
style
|
|
SkStrokeRec
:
:
kHairline_Style
=
=
style
;
bool
hasStroke
=
isStrokeOnly
|
|
SkStrokeRec
:
:
kStrokeAndFill_Style
=
=
style
;
SkScalar
innerXRadius
=
0
;
SkScalar
innerYRadius
=
0
;
if
(
hasStroke
)
{
if
(
SkScalarNearlyZero
(
scaledStroke
.
length
(
)
)
)
{
scaledStroke
.
set
(
SK_ScalarHalf
SK_ScalarHalf
)
;
}
else
{
scaledStroke
.
scale
(
SK_ScalarHalf
)
;
}
if
(
scaledStroke
.
length
(
)
>
SK_ScalarHalf
&
&
(
SK_ScalarHalf
*
xRadius
>
yRadius
|
|
SK_ScalarHalf
*
yRadius
>
xRadius
)
)
{
return
nullptr
;
}
if
(
scaledStroke
.
fX
*
(
yRadius
*
yRadius
)
<
(
scaledStroke
.
fY
*
scaledStroke
.
fY
)
*
xRadius
|
|
scaledStroke
.
fY
*
(
xRadius
*
xRadius
)
<
(
scaledStroke
.
fX
*
scaledStroke
.
fX
)
*
yRadius
)
{
return
nullptr
;
}
if
(
isStrokeOnly
)
{
innerXRadius
=
xRadius
-
scaledStroke
.
fX
;
innerYRadius
=
yRadius
-
scaledStroke
.
fY
;
}
xRadius
+
=
scaledStroke
.
fX
;
yRadius
+
=
scaledStroke
.
fY
;
}
xRadius
+
=
SK_ScalarHalf
;
yRadius
+
=
SK_ScalarHalf
;
EllipseBatch
:
:
Geometry
geometry
;
geometry
.
fViewMatrix
=
viewMatrix
;
geometry
.
fColor
=
color
;
geometry
.
fXRadius
=
xRadius
;
geometry
.
fYRadius
=
yRadius
;
geometry
.
fInnerXRadius
=
innerXRadius
;
geometry
.
fInnerYRadius
=
innerYRadius
;
geometry
.
fStroke
=
isStrokeOnly
&
&
innerXRadius
>
0
&
&
innerYRadius
>
0
;
geometry
.
fDevBounds
=
SkRect
:
:
MakeLTRB
(
center
.
fX
-
xRadius
center
.
fY
-
yRadius
center
.
fX
+
xRadius
center
.
fY
+
yRadius
)
;
return
EllipseBatch
:
:
Create
(
geometry
)
;
}
bool
GrOvalRenderer
:
:
DrawEllipse
(
GrDrawTarget
*
target
const
GrPipelineBuilder
&
pipelineBuilder
GrColor
color
const
SkMatrix
&
viewMatrix
bool
useCoverageAA
const
SkRect
&
ellipse
const
SkStrokeRec
&
stroke
)
{
SkAutoTUnref
<
GrDrawBatch
>
batch
(
create_ellipse_batch
(
color
viewMatrix
useCoverageAA
ellipse
stroke
)
)
;
if
(
!
batch
)
{
return
false
;
}
target
-
>
drawBatch
(
pipelineBuilder
batch
)
;
return
true
;
}
class
DIEllipseBatch
:
public
GrVertexBatch
{
public
:
DEFINE_BATCH_CLASS_ID
struct
Geometry
{
SkMatrix
fViewMatrix
;
SkRect
fBounds
;
SkScalar
fXRadius
;
SkScalar
fYRadius
;
SkScalar
fInnerXRadius
;
SkScalar
fInnerYRadius
;
SkScalar
fGeoDx
;
SkScalar
fGeoDy
;
GrColor
fColor
;
DIEllipseEdgeEffect
:
:
Mode
fMode
;
}
;
static
GrDrawBatch
*
Create
(
const
Geometry
&
geometry
const
SkRect
&
bounds
)
{
return
new
DIEllipseBatch
(
geometry
bounds
)
;
}
const
char
*
name
(
)
const
override
{
return
"
DIEllipseBatch
"
;
}
void
computePipelineOptimizations
(
GrInitInvariantOutput
*
color
GrInitInvariantOutput
*
coverage
GrBatchToXPOverrides
*
overrides
)
const
override
{
color
-
>
setKnownFourComponents
(
fGeoData
[
0
]
.
fColor
)
;
coverage
-
>
setUnknownSingleComponent
(
)
;
overrides
-
>
fUsePLSDstRead
=
false
;
}
private
:
void
initBatchTracker
(
const
GrXPOverridesForBatch
&
overrides
)
override
{
if
(
!
overrides
.
readsColor
(
)
)
{
fGeoData
[
0
]
.
fColor
=
GrColor_ILLEGAL
;
}
overrides
.
getOverrideColorIfSet
(
&
fGeoData
[
0
]
.
fColor
)
;
fBatch
.
fColorIgnored
=
!
overrides
.
readsColor
(
)
;
fBatch
.
fColor
=
fGeoData
[
0
]
.
fColor
;
fBatch
.
fMode
=
fGeoData
[
0
]
.
fMode
;
fBatch
.
fUsesLocalCoords
=
overrides
.
readsLocalCoords
(
)
;
fBatch
.
fCoverageIgnored
=
!
overrides
.
readsCoverage
(
)
;
}
void
onPrepareDraws
(
Target
*
target
)
const
override
{
SkAutoTUnref
<
GrGeometryProcessor
>
gp
(
DIEllipseEdgeEffect
:
:
Create
(
this
-
>
color
(
)
this
-
>
viewMatrix
(
)
this
-
>
mode
(
)
this
-
>
usesLocalCoords
(
)
)
)
;
target
-
>
initDraw
(
gp
this
-
>
pipeline
(
)
)
;
int
instanceCount
=
fGeoData
.
count
(
)
;
size_t
vertexStride
=
gp
-
>
getVertexStride
(
)
;
SkASSERT
(
vertexStride
=
=
sizeof
(
DIEllipseVertex
)
)
;
QuadHelper
helper
;
DIEllipseVertex
*
verts
=
reinterpret_cast
<
DIEllipseVertex
*
>
(
helper
.
init
(
target
vertexStride
instanceCount
)
)
;
if
(
!
verts
)
{
return
;
}
for
(
int
i
=
0
;
i
<
instanceCount
;
i
+
+
)
{
const
Geometry
&
geom
=
fGeoData
[
i
]
;
SkScalar
xRadius
=
geom
.
fXRadius
;
SkScalar
yRadius
=
geom
.
fYRadius
;
const
SkRect
&
bounds
=
geom
.
fBounds
;
SkScalar
offsetDx
=
geom
.
fGeoDx
/
xRadius
;
SkScalar
offsetDy
=
geom
.
fGeoDy
/
yRadius
;
SkScalar
innerRatioX
=
xRadius
/
geom
.
fInnerXRadius
;
SkScalar
innerRatioY
=
yRadius
/
geom
.
fInnerYRadius
;
verts
[
0
]
.
fPos
=
SkPoint
:
:
Make
(
bounds
.
fLeft
bounds
.
fTop
)
;
verts
[
0
]
.
fOuterOffset
=
SkPoint
:
:
Make
(
-
1
.
0f
-
offsetDx
-
1
.
0f
-
offsetDy
)
;
verts
[
0
]
.
fInnerOffset
=
SkPoint
:
:
Make
(
-
innerRatioX
-
offsetDx
-
innerRatioY
-
offsetDy
)
;
verts
[
1
]
.
fPos
=
SkPoint
:
:
Make
(
bounds
.
fLeft
bounds
.
fBottom
)
;
verts
[
1
]
.
fOuterOffset
=
SkPoint
:
:
Make
(
-
1
.
0f
-
offsetDx
1
.
0f
+
offsetDy
)
;
verts
[
1
]
.
fInnerOffset
=
SkPoint
:
:
Make
(
-
innerRatioX
-
offsetDx
innerRatioY
+
offsetDy
)
;
verts
[
2
]
.
fPos
=
SkPoint
:
:
Make
(
bounds
.
fRight
bounds
.
fBottom
)
;
verts
[
2
]
.
fOuterOffset
=
SkPoint
:
:
Make
(
1
.
0f
+
offsetDx
1
.
0f
+
offsetDy
)
;
verts
[
2
]
.
fInnerOffset
=
SkPoint
:
:
Make
(
innerRatioX
+
offsetDx
innerRatioY
+
offsetDy
)
;
verts
[
3
]
.
fPos
=
SkPoint
:
:
Make
(
bounds
.
fRight
bounds
.
fTop
)
;
verts
[
3
]
.
fOuterOffset
=
SkPoint
:
:
Make
(
1
.
0f
+
offsetDx
-
1
.
0f
-
offsetDy
)
;
verts
[
3
]
.
fInnerOffset
=
SkPoint
:
:
Make
(
innerRatioX
+
offsetDx
-
innerRatioY
-
offsetDy
)
;
verts
+
=
kVerticesPerQuad
;
}
helper
.
recordDraw
(
target
)
;
}
SkSTArray
<
1
Geometry
true
>
*
geoData
(
)
{
return
&
fGeoData
;
}
DIEllipseBatch
(
const
Geometry
&
geometry
const
SkRect
&
bounds
)
:
INHERITED
(
ClassID
(
)
)
{
fGeoData
.
push_back
(
geometry
)
;
this
-
>
setBounds
(
bounds
)
;
}
bool
onCombineIfPossible
(
GrBatch
*
t
const
GrCaps
&
caps
)
override
{
DIEllipseBatch
*
that
=
t
-
>
cast
<
DIEllipseBatch
>
(
)
;
if
(
!
GrPipeline
:
:
CanCombine
(
*
this
-
>
pipeline
(
)
this
-
>
bounds
(
)
*
that
-
>
pipeline
(
)
that
-
>
bounds
(
)
caps
)
)
{
return
false
;
}
if
(
this
-
>
color
(
)
!
=
that
-
>
color
(
)
)
{
return
false
;
}
if
(
this
-
>
mode
(
)
!
=
that
-
>
mode
(
)
)
{
return
false
;
}
if
(
!
this
-
>
viewMatrix
(
)
.
cheapEqualTo
(
that
-
>
viewMatrix
(
)
)
)
{
return
false
;
}
fGeoData
.
push_back_n
(
that
-
>
geoData
(
)
-
>
count
(
)
that
-
>
geoData
(
)
-
>
begin
(
)
)
;
this
-
>
joinBounds
(
that
-
>
bounds
(
)
)
;
return
true
;
}
GrColor
color
(
)
const
{
return
fBatch
.
fColor
;
}
bool
usesLocalCoords
(
)
const
{
return
fBatch
.
fUsesLocalCoords
;
}
const
SkMatrix
&
viewMatrix
(
)
const
{
return
fGeoData
[
0
]
.
fViewMatrix
;
}
DIEllipseEdgeEffect
:
:
Mode
mode
(
)
const
{
return
fBatch
.
fMode
;
}
struct
BatchTracker
{
GrColor
fColor
;
DIEllipseEdgeEffect
:
:
Mode
fMode
;
bool
fUsesLocalCoords
;
bool
fColorIgnored
;
bool
fCoverageIgnored
;
}
;
BatchTracker
fBatch
;
SkSTArray
<
1
Geometry
true
>
fGeoData
;
typedef
GrVertexBatch
INHERITED
;
}
;
static
GrDrawBatch
*
create_diellipse_batch
(
GrColor
color
const
SkMatrix
&
viewMatrix
bool
useCoverageAA
const
SkRect
&
ellipse
const
SkStrokeRec
&
stroke
)
{
SkPoint
center
=
SkPoint
:
:
Make
(
ellipse
.
centerX
(
)
ellipse
.
centerY
(
)
)
;
SkScalar
xRadius
=
SkScalarHalf
(
ellipse
.
width
(
)
)
;
SkScalar
yRadius
=
SkScalarHalf
(
ellipse
.
height
(
)
)
;
SkStrokeRec
:
:
Style
style
=
stroke
.
getStyle
(
)
;
DIEllipseEdgeEffect
:
:
Mode
mode
=
(
SkStrokeRec
:
:
kStroke_Style
=
=
style
)
?
DIEllipseEdgeEffect
:
:
kStroke
:
(
SkStrokeRec
:
:
kHairline_Style
=
=
style
)
?
DIEllipseEdgeEffect
:
:
kHairline
:
DIEllipseEdgeEffect
:
:
kFill
;
SkScalar
innerXRadius
=
0
;
SkScalar
innerYRadius
=
0
;
if
(
SkStrokeRec
:
:
kFill_Style
!
=
style
&
&
SkStrokeRec
:
:
kHairline_Style
!
=
style
)
{
SkScalar
strokeWidth
=
stroke
.
getWidth
(
)
;
if
(
SkScalarNearlyZero
(
strokeWidth
)
)
{
strokeWidth
=
SK_ScalarHalf
;
}
else
{
strokeWidth
*
=
SK_ScalarHalf
;
}
if
(
strokeWidth
>
SK_ScalarHalf
&
&
(
SK_ScalarHalf
*
xRadius
>
yRadius
|
|
SK_ScalarHalf
*
yRadius
>
xRadius
)
)
{
return
nullptr
;
}
if
(
strokeWidth
*
(
yRadius
*
yRadius
)
<
(
strokeWidth
*
strokeWidth
)
*
xRadius
|
|
strokeWidth
*
(
xRadius
*
xRadius
)
<
(
strokeWidth
*
strokeWidth
)
*
yRadius
)
{
return
nullptr
;
}
if
(
SkStrokeRec
:
:
kStroke_Style
=
=
style
)
{
innerXRadius
=
xRadius
-
strokeWidth
;
innerYRadius
=
yRadius
-
strokeWidth
;
}
xRadius
+
=
strokeWidth
;
yRadius
+
=
strokeWidth
;
}
if
(
DIEllipseEdgeEffect
:
:
kStroke
=
=
mode
)
{
mode
=
(
innerXRadius
>
0
&
&
innerYRadius
>
0
)
?
DIEllipseEdgeEffect
:
:
kStroke
:
DIEllipseEdgeEffect
:
:
kFill
;
}
SkScalar
a
=
viewMatrix
[
SkMatrix
:
:
kMScaleX
]
;
SkScalar
b
=
viewMatrix
[
SkMatrix
:
:
kMSkewX
]
;
SkScalar
c
=
viewMatrix
[
SkMatrix
:
:
kMSkewY
]
;
SkScalar
d
=
viewMatrix
[
SkMatrix
:
:
kMScaleY
]
;
SkScalar
geoDx
=
SK_ScalarHalf
/
SkScalarSqrt
(
a
*
a
+
c
*
c
)
;
SkScalar
geoDy
=
SK_ScalarHalf
/
SkScalarSqrt
(
b
*
b
+
d
*
d
)
;
DIEllipseBatch
:
:
Geometry
geometry
;
geometry
.
fViewMatrix
=
viewMatrix
;
geometry
.
fColor
=
color
;
geometry
.
fXRadius
=
xRadius
;
geometry
.
fYRadius
=
yRadius
;
geometry
.
fInnerXRadius
=
innerXRadius
;
geometry
.
fInnerYRadius
=
innerYRadius
;
geometry
.
fGeoDx
=
geoDx
;
geometry
.
fGeoDy
=
geoDy
;
geometry
.
fMode
=
mode
;
geometry
.
fBounds
=
SkRect
:
:
MakeLTRB
(
center
.
fX
-
xRadius
-
geoDx
center
.
fY
-
yRadius
-
geoDy
center
.
fX
+
xRadius
+
geoDx
center
.
fY
+
yRadius
+
geoDy
)
;
SkRect
devBounds
=
geometry
.
fBounds
;
viewMatrix
.
mapRect
(
&
devBounds
)
;
return
DIEllipseBatch
:
:
Create
(
geometry
devBounds
)
;
}
bool
GrOvalRenderer
:
:
DrawDIEllipse
(
GrDrawTarget
*
target
const
GrPipelineBuilder
&
pipelineBuilder
GrColor
color
const
SkMatrix
&
viewMatrix
bool
useCoverageAA
const
SkRect
&
ellipse
const
SkStrokeRec
&
stroke
)
{
SkAutoTUnref
<
GrDrawBatch
>
batch
(
create_diellipse_batch
(
color
viewMatrix
useCoverageAA
ellipse
stroke
)
)
;
if
(
!
batch
)
{
return
false
;
}
target
-
>
drawBatch
(
pipelineBuilder
batch
)
;
return
true
;
}
static
const
uint16_t
gRRectIndices
[
]
=
{
0
1
5
0
5
4
2
3
7
2
7
6
8
9
13
8
13
12
10
11
15
10
15
14
1
2
6
1
6
5
4
5
9
4
9
8
6
7
11
6
11
10
9
10
14
9
14
13
5
6
10
5
10
9
}
;
static
const
int
kIndicesPerStrokeRRect
=
SK_ARRAY_COUNT
(
gRRectIndices
)
-
6
;
static
const
int
kIndicesPerRRect
=
SK_ARRAY_COUNT
(
gRRectIndices
)
;
static
const
int
kVertsPerRRect
=
16
;
static
const
int
kNumRRectsInIndexBuffer
=
256
;
GR_DECLARE_STATIC_UNIQUE_KEY
(
gStrokeRRectOnlyIndexBufferKey
)
;
GR_DECLARE_STATIC_UNIQUE_KEY
(
gRRectOnlyIndexBufferKey
)
;
static
const
GrIndexBuffer
*
ref_rrect_index_buffer
(
bool
strokeOnly
GrResourceProvider
*
resourceProvider
)
{
GR_DEFINE_STATIC_UNIQUE_KEY
(
gStrokeRRectOnlyIndexBufferKey
)
;
GR_DEFINE_STATIC_UNIQUE_KEY
(
gRRectOnlyIndexBufferKey
)
;
if
(
strokeOnly
)
{
return
resourceProvider
-
>
findOrCreateInstancedIndexBuffer
(
gRRectIndices
kIndicesPerStrokeRRect
kNumRRectsInIndexBuffer
kVertsPerRRect
gStrokeRRectOnlyIndexBufferKey
)
;
}
else
{
return
resourceProvider
-
>
findOrCreateInstancedIndexBuffer
(
gRRectIndices
kIndicesPerRRect
kNumRRectsInIndexBuffer
kVertsPerRRect
gRRectOnlyIndexBufferKey
)
;
}
}
bool
GrOvalRenderer
:
:
DrawDRRect
(
GrDrawTarget
*
target
const
GrPipelineBuilder
&
pipelineBuilder
GrColor
color
const
SkMatrix
&
viewMatrix
bool
useAA
const
SkRRect
&
origOuter
const
SkRRect
&
origInner
)
{
bool
applyAA
=
useAA
&
&
!
pipelineBuilder
.
getRenderTarget
(
)
-
>
isUnifiedMultisampled
(
)
;
GrPipelineBuilder
:
:
AutoRestoreFragmentProcessorState
arfps
;
if
(
!
origInner
.
isEmpty
(
)
)
{
SkTCopyOnFirstWrite
<
SkRRect
>
inner
(
origInner
)
;
if
(
!
viewMatrix
.
isIdentity
(
)
)
{
if
(
!
origInner
.
transform
(
viewMatrix
inner
.
writable
(
)
)
)
{
return
false
;
}
}
GrPrimitiveEdgeType
edgeType
=
applyAA
?
kInverseFillAA_GrProcessorEdgeType
:
kInverseFillBW_GrProcessorEdgeType
;
GrFragmentProcessor
*
fp
=
GrRRectEffect
:
:
Create
(
edgeType
*
inner
)
;
if
(
nullptr
=
=
fp
)
{
return
false
;
}
arfps
.
set
(
&
pipelineBuilder
)
;
arfps
.
addCoverageFragmentProcessor
(
fp
)
-
>
unref
(
)
;
}
SkStrokeRec
fillRec
(
SkStrokeRec
:
:
kFill_InitStyle
)
;
if
(
DrawRRect
(
target
pipelineBuilder
color
viewMatrix
useAA
origOuter
fillRec
)
)
{
return
true
;
}
SkASSERT
(
!
origOuter
.
isEmpty
(
)
)
;
SkTCopyOnFirstWrite
<
SkRRect
>
outer
(
origOuter
)
;
if
(
!
viewMatrix
.
isIdentity
(
)
)
{
if
(
!
origOuter
.
transform
(
viewMatrix
outer
.
writable
(
)
)
)
{
return
false
;
}
}
GrPrimitiveEdgeType
edgeType
=
applyAA
?
kFillAA_GrProcessorEdgeType
:
kFillBW_GrProcessorEdgeType
;
GrFragmentProcessor
*
effect
=
GrRRectEffect
:
:
Create
(
edgeType
*
outer
)
;
if
(
nullptr
=
=
effect
)
{
return
false
;
}
if
(
!
arfps
.
isSet
(
)
)
{
arfps
.
set
(
&
pipelineBuilder
)
;
}
SkMatrix
invert
;
if
(
!
viewMatrix
.
invert
(
&
invert
)
)
{
return
false
;
}
arfps
.
addCoverageFragmentProcessor
(
effect
)
-
>
unref
(
)
;
SkRect
bounds
=
outer
-
>
getBounds
(
)
;
if
(
applyAA
)
{
bounds
.
outset
(
SK_ScalarHalf
SK_ScalarHalf
)
;
}
SkAutoTUnref
<
GrDrawBatch
>
batch
(
GrRectBatchFactory
:
:
CreateNonAAFill
(
color
SkMatrix
:
:
I
(
)
bounds
nullptr
&
invert
)
)
;
target
-
>
drawBatch
(
pipelineBuilder
batch
)
;
return
true
;
}
class
RRectCircleRendererBatch
:
public
GrVertexBatch
{
public
:
DEFINE_BATCH_CLASS_ID
struct
Geometry
{
SkMatrix
fViewMatrix
;
SkRect
fDevBounds
;
SkScalar
fInnerRadius
;
SkScalar
fOuterRadius
;
GrColor
fColor
;
bool
fStroke
;
}
;
static
GrDrawBatch
*
Create
(
const
Geometry
&
geometry
)
{
return
new
RRectCircleRendererBatch
(
geometry
)
;
}
const
char
*
name
(
)
const
override
{
return
"
RRectCircleBatch
"
;
}
void
computePipelineOptimizations
(
GrInitInvariantOutput
*
color
GrInitInvariantOutput
*
coverage
GrBatchToXPOverrides
*
overrides
)
const
override
{
color
-
>
setKnownFourComponents
(
fGeoData
[
0
]
.
fColor
)
;
coverage
-
>
setUnknownSingleComponent
(
)
;
overrides
-
>
fUsePLSDstRead
=
false
;
}
private
:
void
initBatchTracker
(
const
GrXPOverridesForBatch
&
overrides
)
override
{
if
(
!
overrides
.
readsColor
(
)
)
{
fGeoData
[
0
]
.
fColor
=
GrColor_ILLEGAL
;
}
overrides
.
getOverrideColorIfSet
(
&
fGeoData
[
0
]
.
fColor
)
;
fBatch
.
fColorIgnored
=
!
overrides
.
readsColor
(
)
;
fBatch
.
fColor
=
fGeoData
[
0
]
.
fColor
;
fBatch
.
fStroke
=
fGeoData
[
0
]
.
fStroke
;
fBatch
.
fUsesLocalCoords
=
overrides
.
readsLocalCoords
(
)
;
fBatch
.
fCoverageIgnored
=
!
overrides
.
readsCoverage
(
)
;
}
void
onPrepareDraws
(
Target
*
target
)
const
override
{
SkMatrix
invert
;
if
(
!
this
-
>
viewMatrix
(
)
.
invert
(
&
invert
)
)
{
SkDebugf
(
"
Failed
to
invert
\
n
"
)
;
return
;
}
SkAutoTUnref
<
GrGeometryProcessor
>
gp
(
CircleEdgeEffect
:
:
Create
(
this
-
>
color
(
)
this
-
>
stroke
(
)
invert
this
-
>
usesLocalCoords
(
)
)
)
;
target
-
>
initDraw
(
gp
this
-
>
pipeline
(
)
)
;
int
instanceCount
=
fGeoData
.
count
(
)
;
size_t
vertexStride
=
gp
-
>
getVertexStride
(
)
;
SkASSERT
(
vertexStride
=
=
sizeof
(
CircleVertex
)
)
;
int
indicesPerInstance
=
this
-
>
stroke
(
)
?
kIndicesPerStrokeRRect
:
kIndicesPerRRect
;
SkAutoTUnref
<
const
GrIndexBuffer
>
indexBuffer
(
ref_rrect_index_buffer
(
this
-
>
stroke
(
)
target
-
>
resourceProvider
(
)
)
)
;
InstancedHelper
helper
;
CircleVertex
*
verts
=
reinterpret_cast
<
CircleVertex
*
>
(
helper
.
init
(
target
kTriangles_GrPrimitiveType
vertexStride
indexBuffer
kVertsPerRRect
indicesPerInstance
instanceCount
)
)
;
if
(
!
verts
|
|
!
indexBuffer
)
{
SkDebugf
(
"
Could
not
allocate
vertices
\
n
"
)
;
return
;
}
for
(
int
i
=
0
;
i
<
instanceCount
;
i
+
+
)
{
const
Geometry
&
args
=
fGeoData
[
i
]
;
SkScalar
outerRadius
=
args
.
fOuterRadius
;
const
SkRect
&
bounds
=
args
.
fDevBounds
;
SkScalar
yCoords
[
4
]
=
{
bounds
.
fTop
bounds
.
fTop
+
outerRadius
bounds
.
fBottom
-
outerRadius
bounds
.
fBottom
}
;
SkScalar
yOuterRadii
[
4
]
=
{
-
1
0
0
1
}
;
SkScalar
innerRadius
=
args
.
fInnerRadius
/
args
.
fOuterRadius
;
for
(
int
i
=
0
;
i
<
4
;
+
+
i
)
{
verts
-
>
fPos
=
SkPoint
:
:
Make
(
bounds
.
fLeft
yCoords
[
i
]
)
;
verts
-
>
fOffset
=
SkPoint
:
:
Make
(
-
1
yOuterRadii
[
i
]
)
;
verts
-
>
fOuterRadius
=
outerRadius
;
verts
-
>
fInnerRadius
=
innerRadius
;
verts
+
+
;
verts
-
>
fPos
=
SkPoint
:
:
Make
(
bounds
.
fLeft
+
outerRadius
yCoords
[
i
]
)
;
verts
-
>
fOffset
=
SkPoint
:
:
Make
(
0
yOuterRadii
[
i
]
)
;
verts
-
>
fOuterRadius
=
outerRadius
;
verts
-
>
fInnerRadius
=
innerRadius
;
verts
+
+
;
verts
-
>
fPos
=
SkPoint
:
:
Make
(
bounds
.
fRight
-
outerRadius
yCoords
[
i
]
)
;
verts
-
>
fOffset
=
SkPoint
:
:
Make
(
0
yOuterRadii
[
i
]
)
;
verts
-
>
fOuterRadius
=
outerRadius
;
verts
-
>
fInnerRadius
=
innerRadius
;
verts
+
+
;
verts
-
>
fPos
=
SkPoint
:
:
Make
(
bounds
.
fRight
yCoords
[
i
]
)
;
verts
-
>
fOffset
=
SkPoint
:
:
Make
(
1
yOuterRadii
[
i
]
)
;
verts
-
>
fOuterRadius
=
outerRadius
;
verts
-
>
fInnerRadius
=
innerRadius
;
verts
+
+
;
}
}
helper
.
recordDraw
(
target
)
;
}
SkSTArray
<
1
Geometry
true
>
*
geoData
(
)
{
return
&
fGeoData
;
}
RRectCircleRendererBatch
(
const
Geometry
&
geometry
)
:
INHERITED
(
ClassID
(
)
)
{
fGeoData
.
push_back
(
geometry
)
;
this
-
>
setBounds
(
geometry
.
fDevBounds
)
;
}
bool
onCombineIfPossible
(
GrBatch
*
t
const
GrCaps
&
caps
)
override
{
RRectCircleRendererBatch
*
that
=
t
-
>
cast
<
RRectCircleRendererBatch
>
(
)
;
if
(
!
GrPipeline
:
:
CanCombine
(
*
this
-
>
pipeline
(
)
this
-
>
bounds
(
)
*
that
-
>
pipeline
(
)
that
-
>
bounds
(
)
caps
)
)
{
return
false
;
}
if
(
this
-
>
color
(
)
!
=
that
-
>
color
(
)
)
{
return
false
;
}
if
(
this
-
>
stroke
(
)
!
=
that
-
>
stroke
(
)
)
{
return
false
;
}
SkASSERT
(
this
-
>
usesLocalCoords
(
)
=
=
that
-
>
usesLocalCoords
(
)
)
;
if
(
this
-
>
usesLocalCoords
(
)
&
&
!
this
-
>
viewMatrix
(
)
.
cheapEqualTo
(
that
-
>
viewMatrix
(
)
)
)
{
return
false
;
}
fGeoData
.
push_back_n
(
that
-
>
geoData
(
)
-
>
count
(
)
that
-
>
geoData
(
)
-
>
begin
(
)
)
;
this
-
>
joinBounds
(
that
-
>
bounds
(
)
)
;
return
true
;
}
GrColor
color
(
)
const
{
return
fBatch
.
fColor
;
}
bool
usesLocalCoords
(
)
const
{
return
fBatch
.
fUsesLocalCoords
;
}
const
SkMatrix
&
viewMatrix
(
)
const
{
return
fGeoData
[
0
]
.
fViewMatrix
;
}
bool
stroke
(
)
const
{
return
fBatch
.
fStroke
;
}
struct
BatchTracker
{
GrColor
fColor
;
bool
fStroke
;
bool
fUsesLocalCoords
;
bool
fColorIgnored
;
bool
fCoverageIgnored
;
}
;
BatchTracker
fBatch
;
SkSTArray
<
1
Geometry
true
>
fGeoData
;
typedef
GrVertexBatch
INHERITED
;
}
;
class
RRectEllipseRendererBatch
:
public
GrVertexBatch
{
public
:
DEFINE_BATCH_CLASS_ID
struct
Geometry
{
SkMatrix
fViewMatrix
;
SkRect
fDevBounds
;
SkScalar
fXRadius
;
SkScalar
fYRadius
;
SkScalar
fInnerXRadius
;
SkScalar
fInnerYRadius
;
GrColor
fColor
;
bool
fStroke
;
}
;
static
GrDrawBatch
*
Create
(
const
Geometry
&
geometry
)
{
return
new
RRectEllipseRendererBatch
(
geometry
)
;
}
const
char
*
name
(
)
const
override
{
return
"
RRectEllipseRendererBatch
"
;
}
void
computePipelineOptimizations
(
GrInitInvariantOutput
*
color
GrInitInvariantOutput
*
coverage
GrBatchToXPOverrides
*
overrides
)
const
override
{
color
-
>
setKnownFourComponents
(
fGeoData
[
0
]
.
fColor
)
;
coverage
-
>
setUnknownSingleComponent
(
)
;
overrides
-
>
fUsePLSDstRead
=
false
;
}
private
:
void
initBatchTracker
(
const
GrXPOverridesForBatch
&
overrides
)
override
{
if
(
!
overrides
.
readsColor
(
)
)
{
fGeoData
[
0
]
.
fColor
=
GrColor_ILLEGAL
;
}
overrides
.
getOverrideColorIfSet
(
&
fGeoData
[
0
]
.
fColor
)
;
fBatch
.
fColorIgnored
=
!
overrides
.
readsColor
(
)
;
fBatch
.
fColor
=
fGeoData
[
0
]
.
fColor
;
fBatch
.
fStroke
=
fGeoData
[
0
]
.
fStroke
;
fBatch
.
fUsesLocalCoords
=
overrides
.
readsLocalCoords
(
)
;
fBatch
.
fCoverageIgnored
=
!
overrides
.
readsCoverage
(
)
;
}
void
onPrepareDraws
(
Target
*
target
)
const
override
{
SkMatrix
invert
;
if
(
!
this
-
>
viewMatrix
(
)
.
invert
(
&
invert
)
)
{
SkDebugf
(
"
Failed
to
invert
\
n
"
)
;
return
;
}
SkAutoTUnref
<
GrGeometryProcessor
>
gp
(
EllipseEdgeEffect
:
:
Create
(
this
-
>
color
(
)
this
-
>
stroke
(
)
invert
this
-
>
usesLocalCoords
(
)
)
)
;
target
-
>
initDraw
(
gp
this
-
>
pipeline
(
)
)
;
int
instanceCount
=
fGeoData
.
count
(
)
;
size_t
vertexStride
=
gp
-
>
getVertexStride
(
)
;
SkASSERT
(
vertexStride
=
=
sizeof
(
EllipseVertex
)
)
;
int
indicesPerInstance
=
this
-
>
stroke
(
)
?
kIndicesPerStrokeRRect
:
kIndicesPerRRect
;
SkAutoTUnref
<
const
GrIndexBuffer
>
indexBuffer
(
ref_rrect_index_buffer
(
this
-
>
stroke
(
)
target
-
>
resourceProvider
(
)
)
)
;
InstancedHelper
helper
;
EllipseVertex
*
verts
=
reinterpret_cast
<
EllipseVertex
*
>
(
helper
.
init
(
target
kTriangles_GrPrimitiveType
vertexStride
indexBuffer
kVertsPerRRect
indicesPerInstance
instanceCount
)
)
;
if
(
!
verts
|
|
!
indexBuffer
)
{
SkDebugf
(
"
Could
not
allocate
vertices
\
n
"
)
;
return
;
}
for
(
int
i
=
0
;
i
<
instanceCount
;
i
+
+
)
{
const
Geometry
&
args
=
fGeoData
[
i
]
;
SkScalar
xRadRecip
=
SkScalarInvert
(
args
.
fXRadius
)
;
SkScalar
yRadRecip
=
SkScalarInvert
(
args
.
fYRadius
)
;
SkScalar
xInnerRadRecip
=
SkScalarInvert
(
args
.
fInnerXRadius
)
;
SkScalar
yInnerRadRecip
=
SkScalarInvert
(
args
.
fInnerYRadius
)
;
SkScalar
xOuterRadius
=
args
.
fXRadius
+
SK_ScalarHalf
;
SkScalar
yOuterRadius
=
args
.
fYRadius
+
SK_ScalarHalf
;
const
SkRect
&
bounds
=
args
.
fDevBounds
;
SkScalar
yCoords
[
4
]
=
{
bounds
.
fTop
bounds
.
fTop
+
yOuterRadius
bounds
.
fBottom
-
yOuterRadius
bounds
.
fBottom
}
;
SkScalar
yOuterOffsets
[
4
]
=
{
yOuterRadius
SK_ScalarNearlyZero
SK_ScalarNearlyZero
yOuterRadius
}
;
for
(
int
i
=
0
;
i
<
4
;
+
+
i
)
{
verts
-
>
fPos
=
SkPoint
:
:
Make
(
bounds
.
fLeft
yCoords
[
i
]
)
;
verts
-
>
fOffset
=
SkPoint
:
:
Make
(
xOuterRadius
yOuterOffsets
[
i
]
)
;
verts
-
>
fOuterRadii
=
SkPoint
:
:
Make
(
xRadRecip
yRadRecip
)
;
verts
-
>
fInnerRadii
=
SkPoint
:
:
Make
(
xInnerRadRecip
yInnerRadRecip
)
;
verts
+
+
;
verts
-
>
fPos
=
SkPoint
:
:
Make
(
bounds
.
fLeft
+
xOuterRadius
yCoords
[
i
]
)
;
verts
-
>
fOffset
=
SkPoint
:
:
Make
(
SK_ScalarNearlyZero
yOuterOffsets
[
i
]
)
;
verts
-
>
fOuterRadii
=
SkPoint
:
:
Make
(
xRadRecip
yRadRecip
)
;
verts
-
>
fInnerRadii
=
SkPoint
:
:
Make
(
xInnerRadRecip
yInnerRadRecip
)
;
verts
+
+
;
verts
-
>
fPos
=
SkPoint
:
:
Make
(
bounds
.
fRight
-
xOuterRadius
yCoords
[
i
]
)
;
verts
-
>
fOffset
=
SkPoint
:
:
Make
(
SK_ScalarNearlyZero
yOuterOffsets
[
i
]
)
;
verts
-
>
fOuterRadii
=
SkPoint
:
:
Make
(
xRadRecip
yRadRecip
)
;
verts
-
>
fInnerRadii
=
SkPoint
:
:
Make
(
xInnerRadRecip
yInnerRadRecip
)
;
verts
+
+
;
verts
-
>
fPos
=
SkPoint
:
:
Make
(
bounds
.
fRight
yCoords
[
i
]
)
;
verts
-
>
fOffset
=
SkPoint
:
:
Make
(
xOuterRadius
yOuterOffsets
[
i
]
)
;
verts
-
>
fOuterRadii
=
SkPoint
:
:
Make
(
xRadRecip
yRadRecip
)
;
verts
-
>
fInnerRadii
=
SkPoint
:
:
Make
(
xInnerRadRecip
yInnerRadRecip
)
;
verts
+
+
;
}
}
helper
.
recordDraw
(
target
)
;
}
SkSTArray
<
1
Geometry
true
>
*
geoData
(
)
{
return
&
fGeoData
;
}
RRectEllipseRendererBatch
(
const
Geometry
&
geometry
)
:
INHERITED
(
ClassID
(
)
)
{
fGeoData
.
push_back
(
geometry
)
;
this
-
>
setBounds
(
geometry
.
fDevBounds
)
;
}
bool
onCombineIfPossible
(
GrBatch
*
t
const
GrCaps
&
caps
)
override
{
RRectEllipseRendererBatch
*
that
=
t
-
>
cast
<
RRectEllipseRendererBatch
>
(
)
;
if
(
!
GrPipeline
:
:
CanCombine
(
*
this
-
>
pipeline
(
)
this
-
>
bounds
(
)
*
that
-
>
pipeline
(
)
that
-
>
bounds
(
)
caps
)
)
{
return
false
;
}
if
(
this
-
>
color
(
)
!
=
that
-
>
color
(
)
)
{
return
false
;
}
if
(
this
-
>
stroke
(
)
!
=
that
-
>
stroke
(
)
)
{
return
false
;
}
SkASSERT
(
this
-
>
usesLocalCoords
(
)
=
=
that
-
>
usesLocalCoords
(
)
)
;
if
(
this
-
>
usesLocalCoords
(
)
&
&
!
this
-
>
viewMatrix
(
)
.
cheapEqualTo
(
that
-
>
viewMatrix
(
)
)
)
{
return
false
;
}
fGeoData
.
push_back_n
(
that
-
>
geoData
(
)
-
>
count
(
)
that
-
>
geoData
(
)
-
>
begin
(
)
)
;
this
-
>
joinBounds
(
that
-
>
bounds
(
)
)
;
return
true
;
}
GrColor
color
(
)
const
{
return
fBatch
.
fColor
;
}
bool
usesLocalCoords
(
)
const
{
return
fBatch
.
fUsesLocalCoords
;
}
const
SkMatrix
&
viewMatrix
(
)
const
{
return
fGeoData
[
0
]
.
fViewMatrix
;
}
bool
stroke
(
)
const
{
return
fBatch
.
fStroke
;
}
struct
BatchTracker
{
GrColor
fColor
;
bool
fStroke
;
bool
fUsesLocalCoords
;
bool
fColorIgnored
;
bool
fCoverageIgnored
;
}
;
BatchTracker
fBatch
;
SkSTArray
<
1
Geometry
true
>
fGeoData
;
typedef
GrVertexBatch
INHERITED
;
}
;
static
GrDrawBatch
*
create_rrect_batch
(
GrColor
color
const
SkMatrix
&
viewMatrix
const
SkRRect
&
rrect
const
SkStrokeRec
&
stroke
)
{
SkASSERT
(
viewMatrix
.
rectStaysRect
(
)
)
;
SkASSERT
(
rrect
.
isSimple
(
)
)
;
SkASSERT
(
!
rrect
.
isOval
(
)
)
;
const
SkRect
&
rrectBounds
=
rrect
.
getBounds
(
)
;
SkRect
bounds
;
viewMatrix
.
mapRect
(
&
bounds
rrectBounds
)
;
SkVector
radii
=
rrect
.
getSimpleRadii
(
)
;
SkScalar
xRadius
=
SkScalarAbs
(
viewMatrix
[
SkMatrix
:
:
kMScaleX
]
*
radii
.
fX
+
viewMatrix
[
SkMatrix
:
:
kMSkewY
]
*
radii
.
fY
)
;
SkScalar
yRadius
=
SkScalarAbs
(
viewMatrix
[
SkMatrix
:
:
kMSkewX
]
*
radii
.
fX
+
viewMatrix
[
SkMatrix
:
:
kMScaleY
]
*
radii
.
fY
)
;
SkStrokeRec
:
:
Style
style
=
stroke
.
getStyle
(
)
;
SkVector
scaledStroke
;
SkScalar
strokeWidth
=
stroke
.
getWidth
(
)
;
bool
isStrokeOnly
=
SkStrokeRec
:
:
kStroke_Style
=
=
style
|
|
SkStrokeRec
:
:
kHairline_Style
=
=
style
;
bool
hasStroke
=
isStrokeOnly
|
|
SkStrokeRec
:
:
kStrokeAndFill_Style
=
=
style
;
if
(
hasStroke
)
{
if
(
SkStrokeRec
:
:
kHairline_Style
=
=
style
)
{
scaledStroke
.
set
(
1
1
)
;
}
else
{
scaledStroke
.
fX
=
SkScalarAbs
(
strokeWidth
*
(
viewMatrix
[
SkMatrix
:
:
kMScaleX
]
+
viewMatrix
[
SkMatrix
:
:
kMSkewY
]
)
)
;
scaledStroke
.
fY
=
SkScalarAbs
(
strokeWidth
*
(
viewMatrix
[
SkMatrix
:
:
kMSkewX
]
+
viewMatrix
[
SkMatrix
:
:
kMScaleY
]
)
)
;
}
if
(
SK_ScalarHalf
*
scaledStroke
.
fX
>
xRadius
|
|
SK_ScalarHalf
*
scaledStroke
.
fY
>
yRadius
)
{
return
nullptr
;
}
}
if
(
!
isStrokeOnly
&
&
(
SK_ScalarHalf
>
xRadius
|
|
SK_ScalarHalf
>
yRadius
)
)
{
return
nullptr
;
}
if
(
(
!
hasStroke
|
|
scaledStroke
.
fX
=
=
scaledStroke
.
fY
)
&
&
xRadius
=
=
yRadius
)
{
SkScalar
innerRadius
=
0
.
0f
;
SkScalar
outerRadius
=
xRadius
;
SkScalar
halfWidth
=
0
;
if
(
hasStroke
)
{
if
(
SkScalarNearlyZero
(
scaledStroke
.
fX
)
)
{
halfWidth
=
SK_ScalarHalf
;
}
else
{
halfWidth
=
SkScalarHalf
(
scaledStroke
.
fX
)
;
}
if
(
isStrokeOnly
)
{
innerRadius
=
xRadius
-
halfWidth
;
}
outerRadius
+
=
halfWidth
;
bounds
.
outset
(
halfWidth
halfWidth
)
;
}
isStrokeOnly
=
(
isStrokeOnly
&
&
innerRadius
>
=
0
)
;
outerRadius
+
=
SK_ScalarHalf
;
innerRadius
-
=
SK_ScalarHalf
;
bounds
.
outset
(
SK_ScalarHalf
SK_ScalarHalf
)
;
RRectCircleRendererBatch
:
:
Geometry
geometry
;
geometry
.
fViewMatrix
=
viewMatrix
;
geometry
.
fColor
=
color
;
geometry
.
fInnerRadius
=
innerRadius
;
geometry
.
fOuterRadius
=
outerRadius
;
geometry
.
fStroke
=
isStrokeOnly
;
geometry
.
fDevBounds
=
bounds
;
return
RRectCircleRendererBatch
:
:
Create
(
geometry
)
;
}
else
{
SkScalar
innerXRadius
=
0
.
0f
;
SkScalar
innerYRadius
=
0
.
0f
;
if
(
hasStroke
)
{
if
(
SkScalarNearlyZero
(
scaledStroke
.
length
(
)
)
)
{
scaledStroke
.
set
(
SK_ScalarHalf
SK_ScalarHalf
)
;
}
else
{
scaledStroke
.
scale
(
SK_ScalarHalf
)
;
}
if
(
scaledStroke
.
length
(
)
>
SK_ScalarHalf
&
&
(
SK_ScalarHalf
*
xRadius
>
yRadius
|
|
SK_ScalarHalf
*
yRadius
>
xRadius
)
)
{
return
nullptr
;
}
if
(
scaledStroke
.
fX
*
(
yRadius
*
yRadius
)
<
(
scaledStroke
.
fY
*
scaledStroke
.
fY
)
*
xRadius
|
|
scaledStroke
.
fY
*
(
xRadius
*
xRadius
)
<
(
scaledStroke
.
fX
*
scaledStroke
.
fX
)
*
yRadius
)
{
return
nullptr
;
}
if
(
isStrokeOnly
)
{
innerXRadius
=
xRadius
-
scaledStroke
.
fX
;
innerYRadius
=
yRadius
-
scaledStroke
.
fY
;
}
xRadius
+
=
scaledStroke
.
fX
;
yRadius
+
=
scaledStroke
.
fY
;
bounds
.
outset
(
scaledStroke
.
fX
scaledStroke
.
fY
)
;
}
isStrokeOnly
=
(
isStrokeOnly
&
&
innerXRadius
>
=
0
&
&
innerYRadius
>
=
0
)
;
bounds
.
outset
(
SK_ScalarHalf
SK_ScalarHalf
)
;
RRectEllipseRendererBatch
:
:
Geometry
geometry
;
geometry
.
fViewMatrix
=
viewMatrix
;
geometry
.
fColor
=
color
;
geometry
.
fXRadius
=
xRadius
;
geometry
.
fYRadius
=
yRadius
;
geometry
.
fInnerXRadius
=
innerXRadius
;
geometry
.
fInnerYRadius
=
innerYRadius
;
geometry
.
fStroke
=
isStrokeOnly
;
geometry
.
fDevBounds
=
bounds
;
return
RRectEllipseRendererBatch
:
:
Create
(
geometry
)
;
}
}
bool
GrOvalRenderer
:
:
DrawRRect
(
GrDrawTarget
*
target
const
GrPipelineBuilder
&
pipelineBuilder
GrColor
color
const
SkMatrix
&
viewMatrix
bool
useAA
const
SkRRect
&
rrect
const
SkStrokeRec
&
stroke
)
{
if
(
rrect
.
isOval
(
)
)
{
return
DrawOval
(
target
pipelineBuilder
color
viewMatrix
useAA
rrect
.
getBounds
(
)
stroke
)
;
}
bool
useCoverageAA
=
useAA
&
&
!
pipelineBuilder
.
getRenderTarget
(
)
-
>
isUnifiedMultisampled
(
)
;
if
(
!
useCoverageAA
)
{
return
false
;
}
if
(
!
viewMatrix
.
rectStaysRect
(
)
|
|
!
rrect
.
isSimple
(
)
)
{
return
false
;
}
SkAutoTUnref
<
GrDrawBatch
>
batch
(
create_rrect_batch
(
color
viewMatrix
rrect
stroke
)
)
;
if
(
!
batch
)
{
return
false
;
}
target
-
>
drawBatch
(
pipelineBuilder
batch
)
;
return
true
;
}
#
ifdef
GR_TEST_UTILS
DRAW_BATCH_TEST_DEFINE
(
CircleBatch
)
{
SkMatrix
viewMatrix
=
GrTest
:
:
TestMatrix
(
random
)
;
GrColor
color
=
GrRandomColor
(
random
)
;
bool
useCoverageAA
=
random
-
>
nextBool
(
)
;
SkRect
circle
=
GrTest
:
:
TestSquare
(
random
)
;
return
create_circle_batch
(
color
viewMatrix
useCoverageAA
circle
GrTest
:
:
TestStrokeRec
(
random
)
)
;
}
DRAW_BATCH_TEST_DEFINE
(
EllipseBatch
)
{
SkMatrix
viewMatrix
=
GrTest
:
:
TestMatrixRectStaysRect
(
random
)
;
GrColor
color
=
GrRandomColor
(
random
)
;
SkRect
ellipse
=
GrTest
:
:
TestSquare
(
random
)
;
return
create_ellipse_batch
(
color
viewMatrix
true
ellipse
GrTest
:
:
TestStrokeRec
(
random
)
)
;
}
DRAW_BATCH_TEST_DEFINE
(
DIEllipseBatch
)
{
SkMatrix
viewMatrix
=
GrTest
:
:
TestMatrix
(
random
)
;
GrColor
color
=
GrRandomColor
(
random
)
;
bool
useCoverageAA
=
random
-
>
nextBool
(
)
;
SkRect
ellipse
=
GrTest
:
:
TestSquare
(
random
)
;
return
create_diellipse_batch
(
color
viewMatrix
useCoverageAA
ellipse
GrTest
:
:
TestStrokeRec
(
random
)
)
;
}
DRAW_BATCH_TEST_DEFINE
(
RRectBatch
)
{
SkMatrix
viewMatrix
=
GrTest
:
:
TestMatrixRectStaysRect
(
random
)
;
GrColor
color
=
GrRandomColor
(
random
)
;
const
SkRRect
&
rrect
=
GrTest
:
:
TestRRectSimple
(
random
)
;
return
create_rrect_batch
(
color
viewMatrix
rrect
GrTest
:
:
TestStrokeRec
(
random
)
)
;
}
#
endif
