#
ifndef
GrTextBlobCache_DEFINED
#
define
GrTextBlobCache_DEFINED
#
include
"
GrAtlasTextContext
.
h
"
#
include
"
SkTDynamicHash
.
h
"
#
include
"
SkTextBlobRunIterator
.
h
"
class
GrTextBlobCache
{
public
:
typedef
void
(
*
PFOverBudgetCB
)
(
void
*
data
)
;
GrTextBlobCache
(
PFOverBudgetCB
cb
void
*
data
)
:
fPool
(
kPreAllocSize
kMinGrowthSize
)
fCallback
(
cb
)
fData
(
data
)
fBudget
(
kDefaultBudget
)
{
SkASSERT
(
cb
&
&
data
)
;
}
~
GrTextBlobCache
(
)
;
GrAtlasTextBlob
*
createBlob
(
int
glyphCount
int
runCount
)
{
return
GrAtlasTextBlob
:
:
Create
(
&
fPool
glyphCount
runCount
)
;
}
GrAtlasTextBlob
*
createBlob
(
const
SkTextBlob
*
blob
)
{
int
glyphCount
=
0
;
int
runCount
=
0
;
BlobGlyphCount
(
&
glyphCount
&
runCount
blob
)
;
GrAtlasTextBlob
*
cacheBlob
=
GrAtlasTextBlob
:
:
Create
(
&
fPool
glyphCount
runCount
)
;
return
cacheBlob
;
}
GrAtlasTextBlob
*
createCachedBlob
(
const
SkTextBlob
*
blob
const
GrAtlasTextBlob
:
:
Key
&
key
const
SkMaskFilter
:
:
BlurRec
&
blurRec
const
SkPaint
&
paint
)
{
int
glyphCount
=
0
;
int
runCount
=
0
;
BlobGlyphCount
(
&
glyphCount
&
runCount
blob
)
;
GrAtlasTextBlob
*
cacheBlob
=
GrAtlasTextBlob
:
:
Create
(
&
fPool
glyphCount
runCount
)
;
cacheBlob
-
>
setupKey
(
key
blurRec
paint
)
;
this
-
>
add
(
cacheBlob
)
;
return
cacheBlob
;
}
GrAtlasTextBlob
*
find
(
const
GrAtlasTextBlob
:
:
Key
&
key
)
{
return
fCache
.
find
(
key
)
;
}
void
remove
(
GrAtlasTextBlob
*
blob
)
{
fCache
.
remove
(
blob
-
>
key
(
)
)
;
fBlobList
.
remove
(
blob
)
;
blob
-
>
unref
(
)
;
}
void
add
(
GrAtlasTextBlob
*
blob
)
{
fCache
.
add
(
blob
)
;
fBlobList
.
addToHead
(
blob
)
;
this
-
>
checkPurge
(
blob
)
;
}
void
makeMRU
(
GrAtlasTextBlob
*
blob
)
{
if
(
fBlobList
.
head
(
)
=
=
blob
)
{
return
;
}
fBlobList
.
remove
(
blob
)
;
fBlobList
.
addToHead
(
blob
)
;
}
void
freeAll
(
)
;
static
void
BlobGlyphCount
(
int
*
glyphCount
int
*
runCount
const
SkTextBlob
*
blob
)
{
SkTextBlobRunIterator
itCounter
(
blob
)
;
for
(
;
!
itCounter
.
done
(
)
;
itCounter
.
next
(
)
(
*
runCount
)
+
+
)
{
*
glyphCount
+
=
itCounter
.
glyphCount
(
)
;
}
}
void
setBudget
(
size_t
budget
)
{
fBudget
=
budget
;
this
-
>
checkPurge
(
)
;
}
private
:
typedef
SkTInternalLList
<
GrAtlasTextBlob
>
BitmapBlobList
;
void
checkPurge
(
GrAtlasTextBlob
*
blob
=
nullptr
)
{
if
(
fPool
.
size
(
)
>
fBudget
)
{
BitmapBlobList
:
:
Iter
iter
;
iter
.
init
(
fBlobList
BitmapBlobList
:
:
Iter
:
:
kTail_IterStart
)
;
GrAtlasTextBlob
*
lruBlob
=
nullptr
;
while
(
fPool
.
size
(
)
>
fBudget
&
&
(
lruBlob
=
iter
.
get
(
)
)
&
&
lruBlob
!
=
blob
)
{
fCache
.
remove
(
lruBlob
-
>
key
(
)
)
;
iter
.
prev
(
)
;
fBlobList
.
remove
(
lruBlob
)
;
lruBlob
-
>
unref
(
)
;
}
if
(
blob
&
&
lruBlob
=
=
blob
)
{
(
*
fCallback
)
(
fData
)
;
}
#
ifdef
SPEW_BUDGET_MESSAGE
if
(
fPool
.
size
(
)
>
fBudget
)
{
SkDebugf
(
"
Single
textblob
is
larger
than
our
whole
budget
"
)
;
}
#
endif
}
}
static
const
int
kPreAllocSize
=
1
<
<
17
;
static
const
int
kMinGrowthSize
=
1
<
<
17
;
static
const
int
kDefaultBudget
=
1
<
<
22
;
BitmapBlobList
fBlobList
;
SkTDynamicHash
<
GrAtlasTextBlob
GrAtlasTextBlob
:
:
Key
>
fCache
;
GrMemoryPool
fPool
;
PFOverBudgetCB
fCallback
;
void
*
fData
;
size_t
fBudget
;
}
;
#
endif
