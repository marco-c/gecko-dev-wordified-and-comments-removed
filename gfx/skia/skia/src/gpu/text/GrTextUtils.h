#
ifndef
GrTextUtils_DEFINED
#
define
GrTextUtils_DEFINED
#
include
"
GrColor
.
h
"
#
include
"
GrColorSpaceInfo
.
h
"
#
include
"
SkColorFilter
.
h
"
#
include
"
SkPaint
.
h
"
#
include
"
SkScalar
.
h
"
#
include
"
SkTextToPathIter
.
h
"
#
include
"
SkTLazy
.
h
"
class
GrAtlasGlyphCache
;
class
GrAtlasTextBlob
;
class
GrAtlasTextOp
;
class
GrAtlasTextStrike
;
class
GrClip
;
class
GrColorSpaceXform
;
class
GrContext
;
class
GrPaint
;
class
GrShaderCaps
;
class
SkColorSpace
;
class
SkDrawFilter
;
class
SkGlyph
;
class
SkMatrix
;
struct
SkIRect
;
struct
SkPoint
;
class
SkGlyphCache
;
class
SkTextBlobRunIterator
;
class
SkSurfaceProps
;
class
GrTextUtils
{
public
:
class
Target
{
public
:
virtual
~
Target
(
)
=
default
;
int
width
(
)
const
{
return
fWidth
;
}
int
height
(
)
const
{
return
fHeight
;
}
const
GrColorSpaceInfo
&
colorSpaceInfo
(
)
const
{
return
fColorSpaceInfo
;
}
virtual
void
addDrawOp
(
const
GrClip
&
std
:
:
unique_ptr
<
GrAtlasTextOp
>
op
)
=
0
;
virtual
void
drawPath
(
const
GrClip
&
const
SkPath
&
const
SkPaint
&
const
SkMatrix
&
viewMatrix
const
SkMatrix
*
pathMatrix
const
SkIRect
&
clipBounds
)
=
0
;
virtual
void
makeGrPaint
(
GrMaskFormat
const
SkPaint
&
const
SkMatrix
&
viewMatrix
GrPaint
*
)
=
0
;
protected
:
Target
(
int
width
int
height
const
GrColorSpaceInfo
&
colorSpaceInfo
)
:
fWidth
(
width
)
fHeight
(
height
)
fColorSpaceInfo
(
colorSpaceInfo
)
{
}
private
:
int
fWidth
;
int
fHeight
;
const
GrColorSpaceInfo
&
fColorSpaceInfo
;
}
;
class
Paint
{
public
:
explicit
Paint
(
const
SkPaint
*
paint
const
GrColorSpaceInfo
*
dstColorSpaceInfo
)
:
fPaint
(
paint
)
fDstColorSpaceInfo
(
dstColorSpaceInfo
)
{
this
-
>
initFilteredColor
(
)
;
}
GrColor
filteredPremulColor
(
)
const
{
return
fFilteredPremulColor
;
}
SkColor
luminanceColor
(
)
const
{
return
fPaint
-
>
computeLuminanceColor
(
)
;
}
const
SkPaint
&
skPaint
(
)
const
{
return
*
fPaint
;
}
operator
const
SkPaint
&
(
)
const
{
return
this
-
>
skPaint
(
)
;
}
const
GrColorSpaceInfo
*
dstColorSpaceInfo
(
)
const
{
return
fDstColorSpaceInfo
;
}
protected
:
void
initFilteredColor
(
)
;
Paint
(
)
=
default
;
const
SkPaint
*
fPaint
;
const
GrColorSpaceInfo
*
fDstColorSpaceInfo
;
GrColor
fFilteredPremulColor
;
}
;
class
RunPaint
:
public
Paint
{
public
:
RunPaint
(
const
Paint
*
paint
SkDrawFilter
*
filter
const
SkSurfaceProps
&
props
)
:
fOriginalPaint
(
paint
)
fFilter
(
filter
)
fProps
(
props
)
{
fPaint
=
&
fOriginalPaint
-
>
skPaint
(
)
;
fDstColorSpaceInfo
=
fOriginalPaint
-
>
dstColorSpaceInfo
(
)
;
fFilteredPremulColor
=
fOriginalPaint
-
>
filteredPremulColor
(
)
;
}
bool
modifyForRun
(
std
:
:
function
<
void
(
SkPaint
*
)
>
paintModFunc
)
;
private
:
SkTLazy
<
SkPaint
>
fModifiedPaint
;
const
Paint
*
fOriginalPaint
;
SkDrawFilter
*
fFilter
;
const
SkSurfaceProps
&
fProps
;
}
;
static
uint32_t
FilterTextFlags
(
const
SkSurfaceProps
&
surfaceProps
const
SkPaint
&
paint
)
;
static
bool
ShouldDisableLCD
(
const
SkPaint
&
paint
)
;
class
PathTextIter
:
SkTextBaseIter
{
public
:
PathTextIter
(
const
char
text
[
]
size_t
length
const
SkPaint
&
paint
bool
applyStrokeAndPathEffects
)
:
SkTextBaseIter
(
text
length
paint
applyStrokeAndPathEffects
)
{
}
const
SkPaint
&
getPaint
(
)
const
{
return
fPaint
;
}
SkScalar
getPathScale
(
)
const
{
return
fScale
;
}
const
char
*
getText
(
)
const
{
return
fText
;
}
bool
next
(
const
SkGlyph
*
*
skGlyph
const
SkPath
*
*
path
SkScalar
*
xpos
)
;
}
;
}
;
#
endif
