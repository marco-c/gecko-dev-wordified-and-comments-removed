#
ifndef
GrBatchFontCache_DEFINED
#
define
GrBatchFontCache_DEFINED
#
include
"
GrBatchAtlas
.
h
"
#
include
"
GrFontScaler
.
h
"
#
include
"
GrGlyph
.
h
"
#
include
"
SkGlyph
.
h
"
#
include
"
SkTDynamicHash
.
h
"
#
include
"
SkVarAlloc
.
h
"
class
GrBatchFontCache
;
class
GrGpu
;
class
GrBatchTextStrike
:
public
SkNVRefCnt
<
GrBatchTextStrike
>
{
public
:
GrBatchTextStrike
(
GrBatchFontCache
*
const
GrFontDescKey
*
fontScalerKey
)
;
~
GrBatchTextStrike
(
)
;
const
GrFontDescKey
*
getFontScalerKey
(
)
const
{
return
fFontScalerKey
;
}
GrBatchFontCache
*
getBatchFontCache
(
)
const
{
return
fBatchFontCache
;
}
inline
GrGlyph
*
getGlyph
(
const
SkGlyph
&
skGlyph
GrGlyph
:
:
PackedID
packed
GrFontScaler
*
scaler
)
{
GrGlyph
*
glyph
=
fCache
.
find
(
packed
)
;
if
(
nullptr
=
=
glyph
)
{
glyph
=
this
-
>
generateGlyph
(
skGlyph
packed
scaler
)
;
}
return
glyph
;
}
inline
GrGlyph
*
getGlyph
(
GrGlyph
:
:
PackedID
packed
GrMaskFormat
expectedMaskFormat
GrFontScaler
*
scaler
)
{
GrGlyph
*
glyph
=
fCache
.
find
(
packed
)
;
if
(
nullptr
=
=
glyph
)
{
const
SkGlyph
&
skGlyph
=
scaler
-
>
grToSkGlyph
(
packed
)
;
glyph
=
this
-
>
generateGlyph
(
skGlyph
packed
scaler
)
;
glyph
-
>
fMaskFormat
=
expectedMaskFormat
;
}
return
glyph
;
}
bool
addGlyphToAtlas
(
GrDrawBatch
:
:
Target
*
GrGlyph
*
GrFontScaler
*
GrMaskFormat
expectedMaskFormat
)
;
int
countGlyphs
(
)
const
{
return
fCache
.
count
(
)
;
}
void
removeID
(
GrBatchAtlas
:
:
AtlasID
)
;
bool
isAbandoned
(
)
const
{
return
fIsAbandoned
;
}
static
const
GrFontDescKey
&
GetKey
(
const
GrBatchTextStrike
&
ts
)
{
return
*
(
ts
.
fFontScalerKey
)
;
}
static
uint32_t
Hash
(
const
GrFontDescKey
&
key
)
{
return
key
.
getHash
(
)
;
}
private
:
SkTDynamicHash
<
GrGlyph
GrGlyph
:
:
PackedID
>
fCache
;
SkAutoTUnref
<
const
GrFontDescKey
>
fFontScalerKey
;
SkVarAlloc
fPool
;
GrBatchFontCache
*
fBatchFontCache
;
int
fAtlasedGlyphs
;
bool
fIsAbandoned
;
GrGlyph
*
generateGlyph
(
const
SkGlyph
&
GrGlyph
:
:
PackedID
GrFontScaler
*
)
;
friend
class
GrBatchFontCache
;
}
;
class
GrBatchFontCache
{
public
:
GrBatchFontCache
(
GrContext
*
)
;
~
GrBatchFontCache
(
)
;
inline
GrBatchTextStrike
*
getStrike
(
GrFontScaler
*
scaler
)
{
GrBatchTextStrike
*
strike
=
fCache
.
find
(
*
(
scaler
-
>
getKey
(
)
)
)
;
if
(
nullptr
=
=
strike
)
{
strike
=
this
-
>
generateStrike
(
scaler
)
;
}
return
strike
;
}
void
freeAll
(
)
;
GrTexture
*
getTexture
(
GrMaskFormat
format
)
{
if
(
this
-
>
initAtlas
(
format
)
)
{
return
this
-
>
getAtlas
(
format
)
-
>
getTexture
(
)
;
}
return
nullptr
;
}
bool
hasGlyph
(
GrGlyph
*
glyph
)
{
SkASSERT
(
glyph
)
;
return
this
-
>
getAtlas
(
glyph
-
>
fMaskFormat
)
-
>
hasID
(
glyph
-
>
fID
)
;
}
void
addGlyphToBulkAndSetUseToken
(
GrBatchAtlas
:
:
BulkUseTokenUpdater
*
updater
GrGlyph
*
glyph
GrBatchToken
token
)
{
SkASSERT
(
glyph
)
;
updater
-
>
add
(
glyph
-
>
fID
)
;
this
-
>
getAtlas
(
glyph
-
>
fMaskFormat
)
-
>
setLastUseToken
(
glyph
-
>
fID
token
)
;
}
void
setUseTokenBulk
(
const
GrBatchAtlas
:
:
BulkUseTokenUpdater
&
updater
GrBatchToken
token
GrMaskFormat
format
)
{
this
-
>
getAtlas
(
format
)
-
>
setLastUseTokenBulk
(
updater
token
)
;
}
bool
addToAtlas
(
GrBatchTextStrike
*
strike
GrBatchAtlas
:
:
AtlasID
*
id
GrDrawBatch
:
:
Target
*
target
GrMaskFormat
format
int
width
int
height
const
void
*
image
SkIPoint16
*
loc
)
{
fPreserveStrike
=
strike
;
return
this
-
>
getAtlas
(
format
)
-
>
addToAtlas
(
id
target
width
height
image
loc
)
;
}
uint64_t
atlasGeneration
(
GrMaskFormat
format
)
const
{
return
this
-
>
getAtlas
(
format
)
-
>
atlasGeneration
(
)
;
}
void
dump
(
)
const
;
void
setAtlasSizes_ForTesting
(
const
GrBatchAtlasConfig
configs
[
3
]
)
;
private
:
static
GrPixelConfig
MaskFormatToPixelConfig
(
GrMaskFormat
format
)
{
static
const
GrPixelConfig
kPixelConfigs
[
]
=
{
kAlpha_8_GrPixelConfig
kRGB_565_GrPixelConfig
kSkia8888_GrPixelConfig
}
;
static_assert
(
SK_ARRAY_COUNT
(
kPixelConfigs
)
=
=
kMaskFormatCount
"
array_size_mismatch
"
)
;
return
kPixelConfigs
[
format
]
;
}
static
int
MaskFormatToAtlasIndex
(
GrMaskFormat
format
)
{
static
const
int
sAtlasIndices
[
]
=
{
kA8_GrMaskFormat
kA565_GrMaskFormat
kARGB_GrMaskFormat
}
;
static_assert
(
SK_ARRAY_COUNT
(
sAtlasIndices
)
=
=
kMaskFormatCount
"
array_size_mismatch
"
)
;
SkASSERT
(
sAtlasIndices
[
format
]
<
kMaskFormatCount
)
;
return
sAtlasIndices
[
format
]
;
}
bool
initAtlas
(
GrMaskFormat
)
;
GrBatchTextStrike
*
generateStrike
(
GrFontScaler
*
scaler
)
{
GrBatchTextStrike
*
strike
=
new
GrBatchTextStrike
(
this
scaler
-
>
getKey
(
)
)
;
fCache
.
add
(
strike
)
;
return
strike
;
}
GrBatchAtlas
*
getAtlas
(
GrMaskFormat
format
)
const
{
int
atlasIndex
=
MaskFormatToAtlasIndex
(
format
)
;
SkASSERT
(
fAtlases
[
atlasIndex
]
)
;
return
fAtlases
[
atlasIndex
]
;
}
static
void
HandleEviction
(
GrBatchAtlas
:
:
AtlasID
void
*
)
;
GrContext
*
fContext
;
SkTDynamicHash
<
GrBatchTextStrike
GrFontDescKey
>
fCache
;
GrBatchAtlas
*
fAtlases
[
kMaskFormatCount
]
;
GrBatchTextStrike
*
fPreserveStrike
;
GrBatchAtlasConfig
fAtlasConfigs
[
kMaskFormatCount
]
;
}
;
#
endif
