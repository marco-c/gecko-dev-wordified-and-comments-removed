#
include
"
GrDistanceFieldAdjustTable
.
h
"
#
include
"
SkScalerContext
.
h
"
SkDEBUGCODE
(
static
const
int
kExpectedDistanceAdjustTableSize
=
8
;
)
void
GrDistanceFieldAdjustTable
:
:
buildDistanceAdjustTable
(
)
{
int
width
height
;
size_t
size
;
#
ifdef
SK_GAMMA_CONTRAST
SkScalar
contrast
=
SK_GAMMA_CONTRAST
;
#
else
SkScalar
contrast
=
0
.
5f
;
#
endif
SkScalar
paintGamma
=
SK_GAMMA_EXPONENT
;
SkScalar
deviceGamma
=
SK_GAMMA_EXPONENT
;
size
=
SkScalerContext
:
:
GetGammaLUTSize
(
contrast
paintGamma
deviceGamma
&
width
&
height
)
;
SkASSERT
(
kExpectedDistanceAdjustTableSize
=
=
height
)
;
fTable
=
new
SkScalar
[
height
]
;
SkAutoTArray
<
uint8_t
>
data
(
(
int
)
size
)
;
SkScalerContext
:
:
GetGammaLUTData
(
contrast
paintGamma
deviceGamma
data
.
get
(
)
)
;
for
(
int
row
=
0
;
row
<
height
;
+
+
row
)
{
uint8_t
*
rowPtr
=
data
.
get
(
)
+
row
*
width
;
for
(
int
col
=
0
;
col
<
width
-
1
;
+
+
col
)
{
if
(
rowPtr
[
col
]
<
=
127
&
&
rowPtr
[
col
+
1
]
>
=
128
)
{
float
interp
=
(
127
.
5f
-
rowPtr
[
col
]
)
/
(
rowPtr
[
col
+
1
]
-
rowPtr
[
col
]
)
;
float
borderAlpha
=
(
col
+
interp
)
/
255
.
f
;
float
t
=
borderAlpha
*
(
borderAlpha
*
(
4
.
0f
*
borderAlpha
-
6
.
0f
)
+
5
.
0f
)
/
3
.
0f
;
const
float
kDistanceFieldAAFactor
=
0
.
65f
;
float
d
=
2
.
0f
*
kDistanceFieldAAFactor
*
t
-
kDistanceFieldAAFactor
;
fTable
[
row
]
=
d
;
break
;
}
}
}
}
