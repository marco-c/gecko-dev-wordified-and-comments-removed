#
include
"
GrTextureOpList
.
h
"
#
include
"
GrAuditTrail
.
h
"
#
include
"
GrGpu
.
h
"
#
include
"
GrResourceAllocator
.
h
"
#
include
"
GrTextureProxy
.
h
"
#
include
"
SkStringUtils
.
h
"
#
include
"
ops
/
GrCopySurfaceOp
.
h
"
GrTextureOpList
:
:
GrTextureOpList
(
GrResourceProvider
*
resourceProvider
GrTextureProxy
*
proxy
GrAuditTrail
*
auditTrail
)
:
INHERITED
(
resourceProvider
proxy
auditTrail
)
{
}
GrTextureOpList
:
:
~
GrTextureOpList
(
)
{
}
#
ifdef
SK_DEBUG
void
GrTextureOpList
:
:
dump
(
)
const
{
INHERITED
:
:
dump
(
)
;
SkDebugf
(
"
ops
(
%
d
)
:
\
n
"
fRecordedOps
.
count
(
)
)
;
for
(
int
i
=
0
;
i
<
fRecordedOps
.
count
(
)
;
+
+
i
)
{
if
(
!
fRecordedOps
[
i
]
)
{
SkDebugf
(
"
%
d
:
<
failed
instantiation
>
\
n
"
i
)
;
}
else
{
SkDebugf
(
"
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
\
n
"
)
;
SkDebugf
(
"
%
d
:
%
s
\
n
"
i
fRecordedOps
[
i
]
-
>
name
(
)
)
;
SkString
str
=
fRecordedOps
[
i
]
-
>
dumpInfo
(
)
;
SkDebugf
(
"
%
s
\
n
"
str
.
c_str
(
)
)
;
const
SkRect
&
clippedBounds
=
fRecordedOps
[
i
]
-
>
bounds
(
)
;
SkDebugf
(
"
ClippedBounds
:
[
L
:
%
.
2f
T
:
%
.
2f
R
:
%
.
2f
B
:
%
.
2f
]
\
n
"
clippedBounds
.
fLeft
clippedBounds
.
fTop
clippedBounds
.
fRight
clippedBounds
.
fBottom
)
;
}
}
}
#
endif
void
GrTextureOpList
:
:
onPrepare
(
GrOpFlushState
*
flushState
)
{
SkASSERT
(
this
-
>
isClosed
(
)
)
;
for
(
int
i
=
0
;
i
<
fRecordedOps
.
count
(
)
;
+
+
i
)
{
if
(
fRecordedOps
[
i
]
)
{
GrOpFlushState
:
:
OpArgs
opArgs
=
{
fRecordedOps
[
i
]
.
get
(
)
nullptr
nullptr
GrXferProcessor
:
:
DstProxy
(
)
}
;
flushState
-
>
setOpArgs
(
&
opArgs
)
;
fRecordedOps
[
i
]
-
>
prepare
(
flushState
)
;
flushState
-
>
setOpArgs
(
nullptr
)
;
}
}
}
bool
GrTextureOpList
:
:
onExecute
(
GrOpFlushState
*
flushState
)
{
if
(
0
=
=
fRecordedOps
.
count
(
)
)
{
return
false
;
}
std
:
:
unique_ptr
<
GrGpuTextureCommandBuffer
>
commandBuffer
(
flushState
-
>
gpu
(
)
-
>
createCommandBuffer
(
fTarget
.
get
(
)
-
>
priv
(
)
.
peekTexture
(
)
fTarget
.
get
(
)
-
>
origin
(
)
)
)
;
flushState
-
>
setCommandBuffer
(
commandBuffer
.
get
(
)
)
;
for
(
int
i
=
0
;
i
<
fRecordedOps
.
count
(
)
;
+
+
i
)
{
GrOpFlushState
:
:
OpArgs
opArgs
=
{
fRecordedOps
[
i
]
.
get
(
)
nullptr
nullptr
GrXferProcessor
:
:
DstProxy
(
)
}
;
flushState
-
>
setOpArgs
(
&
opArgs
)
;
fRecordedOps
[
i
]
-
>
execute
(
flushState
)
;
flushState
-
>
setOpArgs
(
nullptr
)
;
}
commandBuffer
-
>
submit
(
)
;
flushState
-
>
setCommandBuffer
(
nullptr
)
;
return
true
;
}
void
GrTextureOpList
:
:
endFlush
(
)
{
fRecordedOps
.
reset
(
)
;
INHERITED
:
:
endFlush
(
)
;
}
bool
GrTextureOpList
:
:
copySurface
(
const
GrCaps
&
caps
GrSurfaceProxy
*
dst
GrSurfaceProxy
*
src
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
{
SkASSERT
(
dst
=
=
fTarget
.
get
(
)
)
;
std
:
:
unique_ptr
<
GrOp
>
op
=
GrCopySurfaceOp
:
:
Make
(
dst
src
srcRect
dstPoint
)
;
if
(
!
op
)
{
return
false
;
}
auto
addDependency
=
[
&
caps
this
]
(
GrSurfaceProxy
*
p
)
{
this
-
>
addDependency
(
p
caps
)
;
}
;
op
-
>
visitProxies
(
addDependency
)
;
this
-
>
recordOp
(
std
:
:
move
(
op
)
)
;
return
true
;
}
void
GrTextureOpList
:
:
purgeOpsWithUninstantiatedProxies
(
)
{
bool
hasUninstantiatedProxy
=
false
;
auto
checkInstantiation
=
[
&
hasUninstantiatedProxy
]
(
GrSurfaceProxy
*
p
)
{
if
(
!
p
-
>
priv
(
)
.
isInstantiated
(
)
)
{
hasUninstantiatedProxy
=
true
;
}
}
;
for
(
int
i
=
0
;
i
<
fRecordedOps
.
count
(
)
;
+
+
i
)
{
const
GrOp
*
op
=
fRecordedOps
[
i
]
.
get
(
)
;
hasUninstantiatedProxy
=
false
;
if
(
op
)
{
op
-
>
visitProxies
(
checkInstantiation
)
;
}
if
(
hasUninstantiatedProxy
)
{
fRecordedOps
[
i
]
=
nullptr
;
}
}
}
void
GrTextureOpList
:
:
gatherProxyIntervals
(
GrResourceAllocator
*
alloc
)
const
{
unsigned
int
cur
=
alloc
-
>
numOps
(
)
;
if
(
fRecordedOps
.
count
(
)
)
{
alloc
-
>
addInterval
(
fTarget
.
get
(
)
cur
cur
+
fRecordedOps
.
count
(
)
-
1
)
;
}
else
{
alloc
-
>
addInterval
(
fTarget
.
get
(
)
)
;
alloc
-
>
incOps
(
)
;
}
auto
gather
=
[
alloc
SkDEBUGCODE
(
this
)
]
(
GrSurfaceProxy
*
p
)
{
alloc
-
>
addInterval
(
p
SkDEBUGCODE
(
p
=
=
fTarget
.
get
(
)
)
)
;
}
;
for
(
int
i
=
0
;
i
<
fRecordedOps
.
count
(
)
;
+
+
i
)
{
const
GrOp
*
op
=
fRecordedOps
[
i
]
.
get
(
)
;
if
(
op
)
{
op
-
>
visitProxies
(
gather
)
;
}
alloc
-
>
incOps
(
)
;
}
}
void
GrTextureOpList
:
:
recordOp
(
std
:
:
unique_ptr
<
GrOp
>
op
)
{
SkASSERT
(
fTarget
.
get
(
)
)
;
SkASSERT
(
!
this
-
>
isClosed
(
)
)
;
GR_AUDIT_TRAIL_ADD_OP
(
fAuditTrail
op
.
get
(
)
fTarget
.
get
(
)
-
>
uniqueID
(
)
)
;
GrOP_INFO
(
"
Re
-
Recording
(
%
s
opID
:
%
u
)
\
n
"
"
\
tBounds
LRTB
(
%
f
%
f
%
f
%
f
)
\
n
"
op
-
>
name
(
)
op
-
>
uniqueID
(
)
op
-
>
bounds
(
)
.
fLeft
op
-
>
bounds
(
)
.
fRight
op
-
>
bounds
(
)
.
fTop
op
-
>
bounds
(
)
.
fBottom
)
;
GrOP_INFO
(
SkTabString
(
op
-
>
dumpInfo
(
)
1
)
.
c_str
(
)
)
;
GR_AUDIT_TRAIL_OP_RESULT_NEW
(
fAuditTrail
op
.
get
(
)
)
;
fRecordedOps
.
emplace_back
(
std
:
:
move
(
op
)
)
;
}
