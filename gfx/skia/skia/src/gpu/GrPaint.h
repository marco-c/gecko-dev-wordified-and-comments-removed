#
ifndef
GrPaint_DEFINED
#
define
GrPaint_DEFINED
#
include
"
GrColor
.
h
"
#
include
"
GrFragmentProcessor
.
h
"
#
include
"
SkBlendMode
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkRegion
.
h
"
#
include
"
SkTLazy
.
h
"
class
GrTextureProxy
;
class
GrXPFactory
;
class
GrPaint
{
public
:
GrPaint
(
)
=
default
;
~
GrPaint
(
)
=
default
;
static
GrPaint
Clone
(
const
GrPaint
&
src
)
{
return
GrPaint
(
src
)
;
}
void
setColor4f
(
const
GrColor4f
&
color
)
{
fColor
=
color
;
}
const
GrColor4f
&
getColor4f
(
)
const
{
return
fColor
;
}
GrColor
getColor
(
)
const
{
return
fColor
.
toGrColor
(
)
;
}
void
setDisableOutputConversionToSRGB
(
bool
srgb
)
{
fDisableOutputConversionToSRGB
=
srgb
;
}
bool
getDisableOutputConversionToSRGB
(
)
const
{
return
fDisableOutputConversionToSRGB
;
}
void
setAllowSRGBInputs
(
bool
allowSRGBInputs
)
{
fAllowSRGBInputs
=
allowSRGBInputs
;
}
bool
getAllowSRGBInputs
(
)
const
{
return
fAllowSRGBInputs
;
}
void
setGammaCorrect
(
bool
gammaCorrect
)
{
this
-
>
setDisableOutputConversionToSRGB
(
!
gammaCorrect
)
;
this
-
>
setAllowSRGBInputs
(
gammaCorrect
)
;
}
void
setXPFactory
(
const
GrXPFactory
*
xpFactory
)
{
fXPFactory
=
xpFactory
;
fTrivial
&
=
!
SkToBool
(
xpFactory
)
;
}
void
setPorterDuffXPFactory
(
SkBlendMode
mode
)
;
void
setCoverageSetOpXPFactory
(
SkRegion
:
:
Op
bool
invertCoverage
=
false
)
;
void
addColorFragmentProcessor
(
std
:
:
unique_ptr
<
GrFragmentProcessor
>
fp
)
{
SkASSERT
(
fp
)
;
fColorFragmentProcessors
.
push_back
(
std
:
:
move
(
fp
)
)
;
fTrivial
=
false
;
}
void
addCoverageFragmentProcessor
(
std
:
:
unique_ptr
<
GrFragmentProcessor
>
fp
)
{
SkASSERT
(
fp
)
;
fCoverageFragmentProcessors
.
push_back
(
std
:
:
move
(
fp
)
)
;
fTrivial
=
false
;
}
void
addColorTextureProcessor
(
sk_sp
<
GrTextureProxy
>
const
SkMatrix
&
)
;
void
addColorTextureProcessor
(
sk_sp
<
GrTextureProxy
>
const
SkMatrix
&
const
GrSamplerState
&
)
;
void
addCoverageTextureProcessor
(
sk_sp
<
GrTextureProxy
>
const
SkMatrix
&
)
;
void
addCoverageTextureProcessor
(
sk_sp
<
GrTextureProxy
>
const
SkMatrix
&
const
GrSamplerState
&
)
;
int
numColorFragmentProcessors
(
)
const
{
return
fColorFragmentProcessors
.
count
(
)
;
}
int
numCoverageFragmentProcessors
(
)
const
{
return
fCoverageFragmentProcessors
.
count
(
)
;
}
int
numTotalFragmentProcessors
(
)
const
{
return
this
-
>
numColorFragmentProcessors
(
)
+
this
-
>
numCoverageFragmentProcessors
(
)
;
}
const
GrXPFactory
*
getXPFactory
(
)
const
{
return
fXPFactory
;
}
GrFragmentProcessor
*
getColorFragmentProcessor
(
int
i
)
const
{
return
fColorFragmentProcessors
[
i
]
.
get
(
)
;
}
GrFragmentProcessor
*
getCoverageFragmentProcessor
(
int
i
)
const
{
return
fCoverageFragmentProcessors
[
i
]
.
get
(
)
;
}
bool
isConstantBlendedColor
(
GrColor
*
constantColor
)
const
;
bool
isTrivial
(
)
const
{
return
fTrivial
;
}
private
:
GrPaint
(
const
GrPaint
&
)
;
GrPaint
&
operator
=
(
const
GrPaint
&
)
=
delete
;
friend
class
GrProcessorSet
;
const
GrXPFactory
*
fXPFactory
=
nullptr
;
SkSTArray
<
4
std
:
:
unique_ptr
<
GrFragmentProcessor
>
>
fColorFragmentProcessors
;
SkSTArray
<
2
std
:
:
unique_ptr
<
GrFragmentProcessor
>
>
fCoverageFragmentProcessors
;
bool
fDisableOutputConversionToSRGB
=
false
;
bool
fAllowSRGBInputs
=
false
;
bool
fTrivial
=
true
;
GrColor4f
fColor
=
GrColor4f
:
:
OpaqueWhite
(
)
;
}
;
#
endif
