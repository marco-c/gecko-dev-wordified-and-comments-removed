#
include
<
emmintrin
.
h
>
#
include
"
SkBitmapProcState_opts_SSE2
.
h
"
#
include
"
SkBlitRow_opts_SSE2
.
h
"
#
include
"
SkColorData
.
h
"
#
include
"
SkColor_opts_SSE2
.
h
"
#
include
"
SkDither
.
h
"
#
include
"
SkMSAN
.
h
"
#
include
"
SkUtils
.
h
"
void
S32_Blend_BlitRow32_SSE2
(
SkPMColor
*
SK_RESTRICT
dst
const
SkPMColor
*
SK_RESTRICT
src
int
count
U8CPU
alpha
)
{
SkASSERT
(
alpha
<
=
255
)
;
if
(
count
<
=
0
)
{
return
;
}
uint32_t
src_scale
=
SkAlpha255To256
(
alpha
)
;
if
(
count
>
=
4
)
{
SkASSERT
(
(
(
size_t
)
dst
&
0x03
)
=
=
0
)
;
while
(
(
(
size_t
)
dst
&
0x0F
)
!
=
0
)
{
*
dst
=
SkPMLerp
(
*
src
*
dst
src_scale
)
;
src
+
+
;
dst
+
+
;
count
-
-
;
}
const
__m128i
*
s
=
reinterpret_cast
<
const
__m128i
*
>
(
src
)
;
__m128i
*
d
=
reinterpret_cast
<
__m128i
*
>
(
dst
)
;
while
(
count
>
=
4
)
{
__m128i
src_pixel
=
_mm_loadu_si128
(
s
)
;
__m128i
dst_pixel
=
_mm_load_si128
(
d
)
;
__m128i
result
=
SkPMLerp_SSE2
(
src_pixel
dst_pixel
src_scale
)
;
_mm_store_si128
(
d
result
)
;
s
+
+
;
d
+
+
;
count
-
=
4
;
}
src
=
reinterpret_cast
<
const
SkPMColor
*
>
(
s
)
;
dst
=
reinterpret_cast
<
SkPMColor
*
>
(
d
)
;
}
while
(
count
>
0
)
{
*
dst
=
SkPMLerp
(
*
src
*
dst
src_scale
)
;
src
+
+
;
dst
+
+
;
count
-
-
;
}
}
void
S32A_Blend_BlitRow32_SSE2
(
SkPMColor
*
SK_RESTRICT
dst
const
SkPMColor
*
SK_RESTRICT
src
int
count
U8CPU
alpha
)
{
SkASSERT
(
alpha
<
=
255
)
;
if
(
count
<
=
0
)
{
return
;
}
if
(
count
>
=
4
)
{
while
(
(
(
size_t
)
dst
&
0x0F
)
!
=
0
)
{
*
dst
=
SkBlendARGB32
(
*
src
*
dst
alpha
)
;
src
+
+
;
dst
+
+
;
count
-
-
;
}
const
__m128i
*
s
=
reinterpret_cast
<
const
__m128i
*
>
(
src
)
;
__m128i
*
d
=
reinterpret_cast
<
__m128i
*
>
(
dst
)
;
while
(
count
>
=
4
)
{
__m128i
src_pixel
=
_mm_loadu_si128
(
s
)
;
__m128i
dst_pixel
=
_mm_load_si128
(
d
)
;
__m128i
result
=
SkBlendARGB32_SSE2
(
src_pixel
dst_pixel
alpha
)
;
_mm_store_si128
(
d
result
)
;
s
+
+
;
d
+
+
;
count
-
=
4
;
}
src
=
reinterpret_cast
<
const
SkPMColor
*
>
(
s
)
;
dst
=
reinterpret_cast
<
SkPMColor
*
>
(
d
)
;
}
while
(
count
>
0
)
{
*
dst
=
SkBlendARGB32
(
*
src
*
dst
alpha
)
;
src
+
+
;
dst
+
+
;
count
-
-
;
}
}
#
define
SK_R16x5_R32x5_SHIFT
(
SK_R32_SHIFT
-
SK_R16_SHIFT
-
SK_R16_BITS
+
5
)
#
define
SK_G16x5_G32x5_SHIFT
(
SK_G32_SHIFT
-
SK_G16_SHIFT
-
SK_G16_BITS
+
5
)
#
define
SK_B16x5_B32x5_SHIFT
(
SK_B32_SHIFT
-
SK_B16_SHIFT
-
SK_B16_BITS
+
5
)
#
if
SK_R16x5_R32x5_SHIFT
=
=
0
#
define
SkPackedR16x5ToUnmaskedR32x5_SSE2
(
x
)
(
x
)
#
elif
SK_R16x5_R32x5_SHIFT
>
0
#
define
SkPackedR16x5ToUnmaskedR32x5_SSE2
(
x
)
(
_mm_slli_epi32
(
x
SK_R16x5_R32x5_SHIFT
)
)
#
else
#
define
SkPackedR16x5ToUnmaskedR32x5_SSE2
(
x
)
(
_mm_srli_epi32
(
x
-
SK_R16x5_R32x5_SHIFT
)
)
#
endif
#
if
SK_G16x5_G32x5_SHIFT
=
=
0
#
define
SkPackedG16x5ToUnmaskedG32x5_SSE2
(
x
)
(
x
)
#
elif
SK_G16x5_G32x5_SHIFT
>
0
#
define
SkPackedG16x5ToUnmaskedG32x5_SSE2
(
x
)
(
_mm_slli_epi32
(
x
SK_G16x5_G32x5_SHIFT
)
)
#
else
#
define
SkPackedG16x5ToUnmaskedG32x5_SSE2
(
x
)
(
_mm_srli_epi32
(
x
-
SK_G16x5_G32x5_SHIFT
)
)
#
endif
#
if
SK_B16x5_B32x5_SHIFT
=
=
0
#
define
SkPackedB16x5ToUnmaskedB32x5_SSE2
(
x
)
(
x
)
#
elif
SK_B16x5_B32x5_SHIFT
>
0
#
define
SkPackedB16x5ToUnmaskedB32x5_SSE2
(
x
)
(
_mm_slli_epi32
(
x
SK_B16x5_B32x5_SHIFT
)
)
#
else
#
define
SkPackedB16x5ToUnmaskedB32x5_SSE2
(
x
)
(
_mm_srli_epi32
(
x
-
SK_B16x5_B32x5_SHIFT
)
)
#
endif
static
__m128i
SkBlendLCD16_SSE2
(
__m128i
&
src
__m128i
&
dst
__m128i
&
mask
__m128i
&
srcA
)
{
__m128i
r
=
_mm_and_si128
(
SkPackedR16x5ToUnmaskedR32x5_SSE2
(
mask
)
_mm_set1_epi32
(
0x1F
<
<
SK_R32_SHIFT
)
)
;
__m128i
g
=
_mm_and_si128
(
SkPackedG16x5ToUnmaskedG32x5_SSE2
(
mask
)
_mm_set1_epi32
(
0x1F
<
<
SK_G32_SHIFT
)
)
;
__m128i
b
=
_mm_and_si128
(
SkPackedB16x5ToUnmaskedB32x5_SSE2
(
mask
)
_mm_set1_epi32
(
0x1F
<
<
SK_B32_SHIFT
)
)
;
mask
=
_mm_or_si128
(
_mm_or_si128
(
r
g
)
b
)
;
__m128i
maskLo
maskHi
;
maskLo
=
_mm_unpacklo_epi8
(
mask
_mm_setzero_si128
(
)
)
;
maskHi
=
_mm_unpackhi_epi8
(
mask
_mm_setzero_si128
(
)
)
;
maskLo
=
_mm_add_epi16
(
maskLo
_mm_srli_epi16
(
maskLo
4
)
)
;
maskHi
=
_mm_add_epi16
(
maskHi
_mm_srli_epi16
(
maskHi
4
)
)
;
maskLo
=
_mm_mullo_epi16
(
maskLo
srcA
)
;
maskHi
=
_mm_mullo_epi16
(
maskHi
srcA
)
;
maskLo
=
_mm_srli_epi16
(
maskLo
8
)
;
maskHi
=
_mm_srli_epi16
(
maskHi
8
)
;
__m128i
dstLo
=
_mm_unpacklo_epi8
(
dst
_mm_setzero_si128
(
)
)
;
__m128i
dstHi
=
_mm_unpackhi_epi8
(
dst
_mm_setzero_si128
(
)
)
;
maskLo
=
_mm_mullo_epi16
(
maskLo
_mm_sub_epi16
(
src
dstLo
)
)
;
maskHi
=
_mm_mullo_epi16
(
maskHi
_mm_sub_epi16
(
src
dstHi
)
)
;
maskLo
=
_mm_srai_epi16
(
maskLo
5
)
;
maskHi
=
_mm_srai_epi16
(
maskHi
5
)
;
__m128i
resultLo
=
_mm_add_epi16
(
dstLo
maskLo
)
;
__m128i
resultHi
=
_mm_add_epi16
(
dstHi
maskHi
)
;
return
_mm_packus_epi16
(
resultLo
resultHi
)
;
}
static
__m128i
SkBlendLCD16Opaque_SSE2
(
__m128i
&
src
__m128i
&
dst
__m128i
&
mask
)
{
__m128i
r
=
_mm_and_si128
(
SkPackedR16x5ToUnmaskedR32x5_SSE2
(
mask
)
_mm_set1_epi32
(
0x1F
<
<
SK_R32_SHIFT
)
)
;
__m128i
g
=
_mm_and_si128
(
SkPackedG16x5ToUnmaskedG32x5_SSE2
(
mask
)
_mm_set1_epi32
(
0x1F
<
<
SK_G32_SHIFT
)
)
;
__m128i
b
=
_mm_and_si128
(
SkPackedB16x5ToUnmaskedB32x5_SSE2
(
mask
)
_mm_set1_epi32
(
0x1F
<
<
SK_B32_SHIFT
)
)
;
mask
=
_mm_or_si128
(
_mm_or_si128
(
r
g
)
b
)
;
__m128i
maskLo
maskHi
;
maskLo
=
_mm_unpacklo_epi8
(
mask
_mm_setzero_si128
(
)
)
;
maskHi
=
_mm_unpackhi_epi8
(
mask
_mm_setzero_si128
(
)
)
;
maskLo
=
_mm_add_epi16
(
maskLo
_mm_srli_epi16
(
maskLo
4
)
)
;
maskHi
=
_mm_add_epi16
(
maskHi
_mm_srli_epi16
(
maskHi
4
)
)
;
__m128i
dstLo
=
_mm_unpacklo_epi8
(
dst
_mm_setzero_si128
(
)
)
;
__m128i
dstHi
=
_mm_unpackhi_epi8
(
dst
_mm_setzero_si128
(
)
)
;
maskLo
=
_mm_mullo_epi16
(
maskLo
_mm_sub_epi16
(
src
dstLo
)
)
;
maskHi
=
_mm_mullo_epi16
(
maskHi
_mm_sub_epi16
(
src
dstHi
)
)
;
maskLo
=
_mm_srai_epi16
(
maskLo
5
)
;
maskHi
=
_mm_srai_epi16
(
maskHi
5
)
;
__m128i
resultLo
=
_mm_add_epi16
(
dstLo
maskLo
)
;
__m128i
resultHi
=
_mm_add_epi16
(
dstHi
maskHi
)
;
return
_mm_or_si128
(
_mm_packus_epi16
(
resultLo
resultHi
)
_mm_set1_epi32
(
SK_A32_MASK
<
<
SK_A32_SHIFT
)
)
;
}
void
SkBlitLCD16Row_SSE2
(
SkPMColor
dst
[
]
const
uint16_t
mask
[
]
SkColor
src
int
width
SkPMColor
)
{
if
(
width
<
=
0
)
{
return
;
}
int
srcA
=
SkColorGetA
(
src
)
;
int
srcR
=
SkColorGetR
(
src
)
;
int
srcG
=
SkColorGetG
(
src
)
;
int
srcB
=
SkColorGetB
(
src
)
;
srcA
=
SkAlpha255To256
(
srcA
)
;
if
(
width
>
=
4
)
{
SkASSERT
(
(
(
size_t
)
dst
&
0x03
)
=
=
0
)
;
while
(
(
(
size_t
)
dst
&
0x0F
)
!
=
0
)
{
*
dst
=
SkBlendLCD16
(
srcA
srcR
srcG
srcB
*
dst
*
mask
)
;
mask
+
+
;
dst
+
+
;
width
-
-
;
}
__m128i
*
d
=
reinterpret_cast
<
__m128i
*
>
(
dst
)
;
__m128i
src_sse
=
_mm_set1_epi32
(
SkPackARGB32
(
0xFF
srcR
srcG
srcB
)
)
;
src_sse
=
_mm_unpacklo_epi8
(
src_sse
_mm_setzero_si128
(
)
)
;
__m128i
srcA_sse
=
_mm_set1_epi16
(
srcA
)
;
while
(
width
>
=
4
)
{
__m128i
dst_sse
=
_mm_load_si128
(
d
)
;
__m128i
mask_sse
=
_mm_loadl_epi64
(
reinterpret_cast
<
const
__m128i
*
>
(
mask
)
)
;
int
pack_cmp
=
_mm_movemask_epi8
(
_mm_cmpeq_epi16
(
mask_sse
_mm_setzero_si128
(
)
)
)
;
if
(
pack_cmp
!
=
0xFFFF
)
{
mask_sse
=
_mm_unpacklo_epi16
(
mask_sse
_mm_setzero_si128
(
)
)
;
__m128i
result
=
SkBlendLCD16_SSE2
(
src_sse
dst_sse
mask_sse
srcA_sse
)
;
_mm_store_si128
(
d
result
)
;
}
d
+
+
;
mask
+
=
4
;
width
-
=
4
;
}
dst
=
reinterpret_cast
<
SkPMColor
*
>
(
d
)
;
}
while
(
width
>
0
)
{
*
dst
=
SkBlendLCD16
(
srcA
srcR
srcG
srcB
*
dst
*
mask
)
;
mask
+
+
;
dst
+
+
;
width
-
-
;
}
}
void
SkBlitLCD16OpaqueRow_SSE2
(
SkPMColor
dst
[
]
const
uint16_t
mask
[
]
SkColor
src
int
width
SkPMColor
opaqueDst
)
{
if
(
width
<
=
0
)
{
return
;
}
int
srcR
=
SkColorGetR
(
src
)
;
int
srcG
=
SkColorGetG
(
src
)
;
int
srcB
=
SkColorGetB
(
src
)
;
if
(
width
>
=
4
)
{
SkASSERT
(
(
(
size_t
)
dst
&
0x03
)
=
=
0
)
;
while
(
(
(
size_t
)
dst
&
0x0F
)
!
=
0
)
{
*
dst
=
SkBlendLCD16Opaque
(
srcR
srcG
srcB
*
dst
*
mask
opaqueDst
)
;
mask
+
+
;
dst
+
+
;
width
-
-
;
}
__m128i
*
d
=
reinterpret_cast
<
__m128i
*
>
(
dst
)
;
__m128i
src_sse
=
_mm_set1_epi32
(
SkPackARGB32
(
0xFF
srcR
srcG
srcB
)
)
;
src_sse
=
_mm_unpacklo_epi8
(
src_sse
_mm_setzero_si128
(
)
)
;
while
(
width
>
=
4
)
{
__m128i
dst_sse
=
_mm_load_si128
(
d
)
;
__m128i
mask_sse
=
_mm_loadl_epi64
(
reinterpret_cast
<
const
__m128i
*
>
(
mask
)
)
;
int
pack_cmp
=
_mm_movemask_epi8
(
_mm_cmpeq_epi16
(
mask_sse
_mm_setzero_si128
(
)
)
)
;
if
(
pack_cmp
!
=
0xFFFF
)
{
mask_sse
=
_mm_unpacklo_epi16
(
mask_sse
_mm_setzero_si128
(
)
)
;
__m128i
result
=
SkBlendLCD16Opaque_SSE2
(
src_sse
dst_sse
mask_sse
)
;
_mm_store_si128
(
d
result
)
;
}
d
+
+
;
mask
+
=
4
;
width
-
=
4
;
}
dst
=
reinterpret_cast
<
SkPMColor
*
>
(
d
)
;
}
while
(
width
>
0
)
{
*
dst
=
SkBlendLCD16Opaque
(
srcR
srcG
srcB
*
dst
*
mask
opaqueDst
)
;
mask
+
+
;
dst
+
+
;
width
-
-
;
}
}
