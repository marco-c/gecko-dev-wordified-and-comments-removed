#
ifndef
sktext_gpu_GlyphVector_DEFINED
#
define
sktext_gpu_GlyphVector_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSpan
.
h
"
#
include
"
src
/
core
/
SkGlyph
.
h
"
#
include
"
src
/
gpu
/
AtlasTypes
.
h
"
#
include
"
src
/
text
/
StrikeForGPU
.
h
"
#
include
"
src
/
text
/
gpu
/
StrikeCache
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
optional
>
#
include
<
tuple
>
class
SkReadBuffer
;
class
SkStrikeClient
;
class
SkWriteBuffer
;
class
GrMeshDrawTarget
;
namespace
skgpu
:
:
ganesh
{
class
AtlasTextOp
;
}
namespace
skgpu
:
:
graphite
{
class
Device
;
class
Recorder
;
}
namespace
sktext
:
:
gpu
{
class
Glyph
;
class
SubRunAllocator
;
class
GlyphVector
{
public
:
union
Variant
{
SkPackedGlyphID
packedGlyphID
;
Glyph
*
glyph
;
Variant
(
)
:
glyph
{
nullptr
}
{
}
Variant
(
SkPackedGlyphID
id
)
:
packedGlyphID
{
id
}
{
}
}
;
GlyphVector
(
SkStrikePromise
&
&
strikePromise
SkSpan
<
Variant
>
glyphs
)
;
static
GlyphVector
Make
(
SkStrikePromise
&
&
promise
SkSpan
<
const
SkPackedGlyphID
>
glyphs
SubRunAllocator
*
alloc
)
;
SkSpan
<
const
Glyph
*
>
glyphs
(
)
const
;
static
std
:
:
optional
<
GlyphVector
>
MakeFromBuffer
(
SkReadBuffer
&
buffer
const
SkStrikeClient
*
strikeClient
SubRunAllocator
*
alloc
)
;
void
flatten
(
SkWriteBuffer
&
buffer
)
const
;
int
unflattenSize
(
)
const
{
return
GlyphVectorSize
(
fGlyphs
.
size
(
)
)
;
}
void
packedGlyphIDToGlyph
(
StrikeCache
*
cache
)
;
static
size_t
GlyphVectorSize
(
size_t
count
)
{
return
sizeof
(
Variant
)
*
count
;
}
private
:
friend
class
GlyphVectorTestingPeer
;
friend
class
:
:
skgpu
:
:
graphite
:
:
Device
;
friend
class
:
:
skgpu
:
:
ganesh
:
:
AtlasTextOp
;
std
:
:
tuple
<
bool
int
>
regenerateAtlasForGanesh
(
int
begin
int
end
skgpu
:
:
MaskFormat
maskFormat
int
srcPadding
GrMeshDrawTarget
*
)
;
std
:
:
tuple
<
bool
int
>
regenerateAtlasForGraphite
(
int
begin
int
end
skgpu
:
:
MaskFormat
maskFormat
int
srcPadding
skgpu
:
:
graphite
:
:
Recorder
*
)
;
SkStrikePromise
fStrikePromise
;
SkSpan
<
Variant
>
fGlyphs
;
sk_sp
<
TextStrike
>
fTextStrike
{
nullptr
}
;
uint64_t
fAtlasGeneration
{
skgpu
:
:
AtlasGenerationCounter
:
:
kInvalidGeneration
}
;
skgpu
:
:
BulkUsePlotUpdater
fBulkUseUpdater
;
}
;
}
#
endif
