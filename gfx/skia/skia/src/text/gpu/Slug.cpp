#
include
"
include
/
private
/
chromium
/
Slug
.
h
"
#
include
"
include
/
core
/
SkCanvas
.
h
"
#
include
"
src
/
core
/
SkReadBuffer
.
h
"
#
include
"
src
/
core
/
SkWriteBuffer
.
h
"
#
include
<
atomic
>
namespace
sktext
:
:
gpu
{
class
Slug
;
sk_sp
<
Slug
>
SkMakeSlugFromBuffer
(
SkReadBuffer
&
buffer
const
SkStrikeClient
*
client
)
;
sk_sp
<
Slug
>
Slug
:
:
ConvertBlob
(
SkCanvas
*
canvas
const
SkTextBlob
&
blob
SkPoint
origin
const
SkPaint
&
paint
)
{
return
canvas
-
>
convertBlobToSlug
(
blob
origin
paint
)
;
}
sk_sp
<
SkData
>
Slug
:
:
serialize
(
)
const
{
SkBinaryWriteBuffer
buffer
;
this
-
>
doFlatten
(
buffer
)
;
return
buffer
.
snapshotAsData
(
)
;
}
size_t
Slug
:
:
serialize
(
void
*
buffer
size_t
size
)
const
{
SkBinaryWriteBuffer
writeBuffer
{
buffer
size
}
;
this
-
>
doFlatten
(
writeBuffer
)
;
return
writeBuffer
.
usingInitialStorage
(
)
?
writeBuffer
.
bytesWritten
(
)
:
0u
;
}
sk_sp
<
Slug
>
Slug
:
:
MakeFromBuffer
(
SkReadBuffer
&
buffer
)
{
return
SkMakeSlugFromBuffer
(
buffer
nullptr
)
;
}
sk_sp
<
Slug
>
Slug
:
:
Deserialize
(
const
void
*
data
size_t
size
const
SkStrikeClient
*
client
)
{
SkReadBuffer
buffer
{
data
size
}
;
return
SkMakeSlugFromBuffer
(
buffer
client
)
;
}
void
Slug
:
:
draw
(
SkCanvas
*
canvas
)
const
{
canvas
-
>
drawSlug
(
this
)
;
}
uint32_t
Slug
:
:
NextUniqueID
(
)
{
static
std
:
:
atomic
<
uint32_t
>
nextUnique
=
1
;
return
nextUnique
+
+
;
}
}
