#
ifndef
sktext_gpu_StrikeCache_DEFINED
#
define
sktext_gpu_StrikeCache_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
src
/
base
/
SkArenaAlloc
.
h
"
#
include
"
src
/
core
/
SkDescriptor
.
h
"
#
include
"
src
/
core
/
SkStrikeSpec
.
h
"
#
include
"
src
/
core
/
SkTHash
.
h
"
#
include
<
cstdint
>
struct
SkPackedGlyphID
;
namespace
sktext
:
:
gpu
{
class
Glyph
;
class
TextStrike
:
public
SkNVRefCnt
<
TextStrike
>
{
public
:
TextStrike
(
const
SkStrikeSpec
&
strikeSpec
)
;
Glyph
*
getGlyph
(
SkPackedGlyphID
)
;
const
SkStrikeSpec
&
strikeSpec
(
)
const
{
return
fStrikeSpec
;
}
private
:
const
SkStrikeSpec
fStrikeSpec
;
struct
HashTraits
{
static
const
SkPackedGlyphID
&
GetKey
(
const
Glyph
*
glyph
)
;
static
uint32_t
Hash
(
SkPackedGlyphID
key
)
;
}
;
skia_private
:
:
THashTable
<
Glyph
*
SkPackedGlyphID
HashTraits
>
fCache
;
SkArenaAlloc
fAlloc
{
512
}
;
friend
class
StrikeCache
;
}
;
class
StrikeCache
{
public
:
~
StrikeCache
(
)
;
sk_sp
<
TextStrike
>
findOrCreateStrike
(
const
SkStrikeSpec
&
strikeSpec
)
;
void
freeAll
(
)
;
private
:
sk_sp
<
TextStrike
>
generateStrike
(
const
SkStrikeSpec
&
strikeSpec
)
;
struct
HashTraits
{
static
const
SkDescriptor
&
GetKey
(
const
sk_sp
<
TextStrike
>
&
strike
)
;
static
uint32_t
Hash
(
const
SkDescriptor
&
strikeSpec
)
;
}
;
using
StrikeHash
=
skia_private
:
:
THashTable
<
sk_sp
<
TextStrike
>
const
SkDescriptor
&
HashTraits
>
;
StrikeHash
fCache
;
}
;
}
#
endif
