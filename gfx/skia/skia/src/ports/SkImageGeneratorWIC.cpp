#
include
"
SkImageGeneratorWIC
.
h
"
#
include
"
SkIStream
.
h
"
#
include
"
SkStream
.
h
"
#
if
defined
(
CLSID_WICImagingFactory
)
#
undef
CLSID_WICImagingFactory
#
endif
SkImageGenerator
*
SkImageGeneratorWIC
:
:
NewFromEncodedWIC
(
SkData
*
data
)
{
SkTScopedComPtr
<
IWICImagingFactory
>
imagingFactory
;
HRESULT
hr
=
CoCreateInstance
(
CLSID_WICImagingFactory
nullptr
CLSCTX_INPROC_SERVER
IID_PPV_ARGS
(
&
imagingFactory
)
)
;
if
(
FAILED
(
hr
)
)
{
return
nullptr
;
}
SkTScopedComPtr
<
IStream
>
iStream
;
hr
=
SkIStream
:
:
CreateFromSkStream
(
new
SkMemoryStream
(
sk_ref_sp
(
data
)
)
true
&
iStream
)
;
if
(
FAILED
(
hr
)
)
{
return
nullptr
;
}
SkTScopedComPtr
<
IWICBitmapDecoder
>
decoder
;
hr
=
imagingFactory
-
>
CreateDecoderFromStream
(
iStream
.
get
(
)
nullptr
WICDecodeMetadataCacheOnDemand
&
decoder
)
;
if
(
FAILED
(
hr
)
)
{
return
nullptr
;
}
SkTScopedComPtr
<
IWICBitmapFrameDecode
>
imageFrame
;
hr
=
decoder
-
>
GetFrame
(
0
&
imageFrame
)
;
if
(
FAILED
(
hr
)
)
{
return
nullptr
;
}
SkTScopedComPtr
<
IWICBitmapSource
>
imageSource
;
hr
=
imageFrame
-
>
QueryInterface
(
IID_PPV_ARGS
(
&
imageSource
)
)
;
if
(
FAILED
(
hr
)
)
{
return
nullptr
;
}
UINT
width
;
UINT
height
;
hr
=
imageSource
-
>
GetSize
(
&
width
&
height
)
;
if
(
FAILED
(
hr
)
)
{
return
nullptr
;
}
WICPixelFormatGUID
format
;
hr
=
imageSource
-
>
GetPixelFormat
(
&
format
)
;
if
(
FAILED
(
hr
)
)
{
return
nullptr
;
}
SkAlphaType
alphaType
=
kPremul_SkAlphaType
;
if
(
GUID_WICPixelFormat16bppBGR555
=
=
format
|
|
GUID_WICPixelFormat16bppBGR565
=
=
format
|
|
GUID_WICPixelFormat32bppBGR101010
=
=
format
|
|
GUID_WICPixelFormatBlackWhite
=
=
format
|
|
GUID_WICPixelFormat2bppGray
=
=
format
|
|
GUID_WICPixelFormat4bppGray
=
=
format
|
|
GUID_WICPixelFormat8bppGray
=
=
format
|
|
GUID_WICPixelFormat16bppGray
=
=
format
|
|
GUID_WICPixelFormat16bppGrayFixedPoint
=
=
format
|
|
GUID_WICPixelFormat16bppGrayHalf
=
=
format
|
|
GUID_WICPixelFormat32bppGrayFloat
=
=
format
|
|
GUID_WICPixelFormat32bppGrayFixedPoint
=
=
format
|
|
GUID_WICPixelFormat32bppRGBE
=
=
format
|
|
GUID_WICPixelFormat24bppRGB
=
=
format
|
|
GUID_WICPixelFormat24bppBGR
=
=
format
|
|
GUID_WICPixelFormat32bppBGR
=
=
format
|
|
GUID_WICPixelFormat48bppRGB
=
=
format
|
|
GUID_WICPixelFormat48bppBGR
=
=
format
|
|
GUID_WICPixelFormat48bppRGBFixedPoint
=
=
format
|
|
GUID_WICPixelFormat48bppBGRFixedPoint
=
=
format
|
|
GUID_WICPixelFormat48bppRGBHalf
=
=
format
|
|
GUID_WICPixelFormat64bppRGBFixedPoint
=
=
format
|
|
GUID_WICPixelFormat64bppRGBHalf
=
=
format
|
|
GUID_WICPixelFormat96bppRGBFixedPoint
=
=
format
|
|
GUID_WICPixelFormat128bppRGBFloat
=
=
format
|
|
GUID_WICPixelFormat128bppRGBFixedPoint
=
=
format
|
|
GUID_WICPixelFormat32bppRGB
=
=
format
|
|
GUID_WICPixelFormat64bppRGB
=
=
format
|
|
GUID_WICPixelFormat96bppRGBFloat
=
=
format
|
|
GUID_WICPixelFormat32bppCMYK
=
=
format
|
|
GUID_WICPixelFormat64bppCMYK
=
=
format
|
|
GUID_WICPixelFormat8bppY
=
=
format
|
|
GUID_WICPixelFormat8bppCb
=
=
format
|
|
GUID_WICPixelFormat8bppCr
=
=
format
|
|
GUID_WICPixelFormat16bppCbCr
=
=
format
)
{
alphaType
=
kOpaque_SkAlphaType
;
}
SkImageInfo
info
=
SkImageInfo
:
:
MakeS32
(
width
height
alphaType
)
;
return
new
SkImageGeneratorWIC
(
info
imagingFactory
.
release
(
)
imageSource
.
release
(
)
data
)
;
}
SkImageGeneratorWIC
:
:
SkImageGeneratorWIC
(
const
SkImageInfo
&
info
IWICImagingFactory
*
imagingFactory
IWICBitmapSource
*
imageSource
SkData
*
data
)
:
INHERITED
(
info
)
fImagingFactory
(
imagingFactory
)
fImageSource
(
imageSource
)
fData
(
SkRef
(
data
)
)
{
}
SkData
*
SkImageGeneratorWIC
:
:
onRefEncodedData
(
)
{
return
SkRef
(
fData
.
get
(
)
)
;
}
bool
SkImageGeneratorWIC
:
:
onGetPixels
(
const
SkImageInfo
&
info
void
*
pixels
size_t
rowBytes
const
Options
&
)
{
if
(
kN32_SkColorType
!
=
info
.
colorType
(
)
)
{
return
false
;
}
SkTScopedComPtr
<
IWICFormatConverter
>
formatConverter
;
HRESULT
hr
=
fImagingFactory
-
>
CreateFormatConverter
(
&
formatConverter
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
GUID
format
=
GUID_WICPixelFormat32bppPBGRA
;
if
(
kUnpremul_SkAlphaType
=
=
info
.
alphaType
(
)
)
{
format
=
GUID_WICPixelFormat32bppBGRA
;
}
hr
=
formatConverter
-
>
Initialize
(
fImageSource
.
get
(
)
format
WICBitmapDitherTypeNone
nullptr
0
.
0
WICBitmapPaletteTypeCustom
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
SkTScopedComPtr
<
IWICBitmapSource
>
formatConverterSrc
;
hr
=
formatConverter
-
>
QueryInterface
(
IID_PPV_ARGS
(
&
formatConverterSrc
)
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
hr
=
formatConverterSrc
-
>
CopyPixels
(
nullptr
(
UINT
)
rowBytes
(
UINT
)
rowBytes
*
info
.
height
(
)
(
BYTE
*
)
pixels
)
;
return
SUCCEEDED
(
hr
)
;
}
