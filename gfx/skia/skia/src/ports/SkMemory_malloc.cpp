#
include
"
include
/
private
/
base
/
SkAssert
.
h
"
#
include
"
include
/
private
/
base
/
SkDebug
.
h
"
#
include
"
include
/
private
/
base
/
SkFeatures
.
h
"
#
include
"
include
/
private
/
base
/
SkMalloc
.
h
"
#
include
<
cstdlib
>
#
if
defined
(
SK_DEBUG
)
&
&
defined
(
SK_BUILD_FOR_WIN
)
#
include
<
intrin
.
h
>
#
ifndef
FAST_FAIL_FATAL_APP_EXIT
#
define
FAST_FAIL_FATAL_APP_EXIT
7
#
endif
#
endif
#
ifdef
SK_BUILD_FOR_ANDROID_FRAMEWORK
#
define
SK_DEBUGFAILF
(
fmt
.
.
.
)
SK_ABORT
(
fmt
"
\
n
"
__VA_ARGS__
)
#
else
#
define
SK_DEBUGFAILF
(
fmt
.
.
.
)
SkASSERT
(
(
SkDebugf
(
fmt
"
\
n
"
__VA_ARGS__
)
false
)
)
#
endif
static
inline
void
sk_out_of_memory
(
size_t
size
)
{
SK_DEBUGFAILF
(
"
sk_out_of_memory
(
asked
for
%
zu
bytes
)
"
size
)
;
#
if
defined
(
SK_BUILD_FOR_AFL_FUZZ
)
exit
(
1
)
;
#
else
abort
(
)
;
#
endif
}
static
inline
void
*
throw_on_failure
(
size_t
size
void
*
p
)
{
if
(
size
>
0
&
&
p
=
=
nullptr
)
{
sk_out_of_memory
(
size
)
;
}
return
p
;
}
bool
sk_abort_is_enabled
(
)
{
return
true
;
}
void
sk_abort_no_print
(
)
{
#
if
defined
(
SK_DEBUG
)
&
&
defined
(
SK_BUILD_FOR_WIN
)
__fastfail
(
FAST_FAIL_FATAL_APP_EXIT
)
;
#
elif
defined
(
__clang__
)
__builtin_trap
(
)
;
#
else
abort
(
)
;
#
endif
}
void
sk_out_of_memory
(
void
)
{
SkDEBUGFAIL
(
"
sk_out_of_memory
"
)
;
#
if
defined
(
SK_BUILD_FOR_AFL_FUZZ
)
exit
(
1
)
;
#
else
abort
(
)
;
#
endif
}
void
*
sk_realloc_throw
(
void
*
addr
size_t
size
)
{
if
(
size
=
=
0
)
{
sk_free
(
addr
)
;
return
nullptr
;
}
return
throw_on_failure
(
size
realloc
(
addr
size
)
)
;
}
void
sk_free
(
void
*
p
)
{
if
(
p
!
=
nullptr
)
{
free
(
p
)
;
}
}
void
*
sk_malloc_flags
(
size_t
size
unsigned
flags
)
{
void
*
p
;
if
(
flags
&
SK_MALLOC_ZERO_INITIALIZE
)
{
p
=
calloc
(
size
1
)
;
}
else
{
#
if
defined
(
SK_BUILD_FOR_ANDROID_FRAMEWORK
)
&
&
defined
(
__BIONIC__
)
(
void
)
mallopt
(
M_THREAD_DISABLE_MEM_INIT
1
)
;
#
endif
p
=
malloc
(
size
)
;
#
if
defined
(
SK_BUILD_FOR_ANDROID_FRAMEWORK
)
&
&
defined
(
__BIONIC__
)
(
void
)
mallopt
(
M_THREAD_DISABLE_MEM_INIT
0
)
;
#
endif
}
if
(
flags
&
SK_MALLOC_THROW
)
{
return
throw_on_failure
(
size
p
)
;
}
else
{
return
p
;
}
}
