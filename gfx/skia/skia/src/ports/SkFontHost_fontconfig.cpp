#
include
"
SkFontConfigInterface
.
h
"
#
include
"
SkFontConfigTypeface
.
h
"
#
include
"
SkFontDescriptor
.
h
"
#
include
"
SkStream
.
h
"
#
include
"
SkTypeface
.
h
"
#
include
"
SkTypefaceCache
.
h
"
SK_DECLARE_STATIC_MUTEX
(
gFontConfigInterfaceMutex
)
;
static
SkFontConfigInterface
*
gFontConfigInterface
;
SkFontConfigInterface
*
SkFontConfigInterface
:
:
RefGlobal
(
)
{
SkAutoMutexAcquire
ac
(
gFontConfigInterfaceMutex
)
;
return
SkSafeRef
(
gFontConfigInterface
)
;
}
SkFontConfigInterface
*
SkFontConfigInterface
:
:
SetGlobal
(
SkFontConfigInterface
*
fc
)
{
SkAutoMutexAcquire
ac
(
gFontConfigInterfaceMutex
)
;
SkRefCnt_SafeAssign
(
gFontConfigInterface
fc
)
;
return
fc
;
}
extern
SkFontConfigInterface
*
SkCreateDirectFontConfigInterface
(
)
;
static
SkFontConfigInterface
*
RefFCI
(
)
{
for
(
;
;
)
{
SkFontConfigInterface
*
fci
=
SkFontConfigInterface
:
:
RefGlobal
(
)
;
if
(
fci
)
{
return
fci
;
}
fci
=
SkFontConfigInterface
:
:
GetSingletonDirectInterface
(
&
gFontConfigInterfaceMutex
)
;
SkFontConfigInterface
:
:
SetGlobal
(
fci
)
;
}
}
SkFontConfigInterface
*
SkFontHost_fontconfig_ref_global
(
)
;
SkFontConfigInterface
*
SkFontHost_fontconfig_ref_global
(
)
{
return
RefFCI
(
)
;
}
struct
NameStyle
{
NameStyle
(
const
char
*
name
const
SkFontStyle
&
style
)
:
fFamilyName
(
name
)
fStyle
(
style
)
{
}
const
char
*
fFamilyName
;
SkFontStyle
fStyle
;
}
;
static
bool
find_by_NameStyle
(
SkTypeface
*
cachedTypeface
const
SkFontStyle
&
cachedStyle
void
*
ctx
)
{
FontConfigTypeface
*
cachedFCTypeface
=
static_cast
<
FontConfigTypeface
*
>
(
cachedTypeface
)
;
const
NameStyle
*
nameStyle
=
static_cast
<
const
NameStyle
*
>
(
ctx
)
;
return
nameStyle
-
>
fStyle
=
=
cachedStyle
&
&
cachedFCTypeface
-
>
isFamilyName
(
nameStyle
-
>
fFamilyName
)
;
}
static
bool
find_by_FontIdentity
(
SkTypeface
*
cachedTypeface
const
SkFontStyle
&
void
*
ctx
)
{
typedef
SkFontConfigInterface
:
:
FontIdentity
FontIdentity
;
FontConfigTypeface
*
cachedFCTypeface
=
static_cast
<
FontConfigTypeface
*
>
(
cachedTypeface
)
;
FontIdentity
*
indentity
=
static_cast
<
FontIdentity
*
>
(
ctx
)
;
return
cachedFCTypeface
-
>
getIdentity
(
)
=
=
*
indentity
;
}
SkTypeface
*
FontConfigTypeface
:
:
LegacyCreateTypeface
(
const
char
familyName
[
]
SkTypeface
:
:
Style
style
)
{
SkAutoTUnref
<
SkFontConfigInterface
>
fci
(
RefFCI
(
)
)
;
if
(
nullptr
=
=
fci
.
get
(
)
)
{
return
nullptr
;
}
SkFontStyle
requestedStyle
(
style
)
;
NameStyle
nameStyle
(
familyName
requestedStyle
)
;
SkTypeface
*
face
=
SkTypefaceCache
:
:
FindByProcAndRef
(
find_by_NameStyle
&
nameStyle
)
;
if
(
face
)
{
return
face
;
}
SkFontConfigInterface
:
:
FontIdentity
indentity
;
SkString
outFamilyName
;
SkTypeface
:
:
Style
outStyle
;
if
(
!
fci
-
>
matchFamilyName
(
familyName
style
&
indentity
&
outFamilyName
&
outStyle
)
)
{
return
nullptr
;
}
face
=
SkTypefaceCache
:
:
FindByProcAndRef
(
find_by_FontIdentity
&
indentity
)
;
if
(
!
face
)
{
face
=
FontConfigTypeface
:
:
Create
(
SkFontStyle
(
outStyle
)
indentity
outFamilyName
)
;
SkTypefaceCache
:
:
Add
(
face
requestedStyle
)
;
}
return
face
;
}
SkStreamAsset
*
FontConfigTypeface
:
:
onOpenStream
(
int
*
ttcIndex
)
const
{
SkStreamAsset
*
stream
=
this
-
>
getLocalStream
(
)
;
if
(
stream
)
{
*
ttcIndex
=
0
;
return
stream
-
>
duplicate
(
)
;
}
SkAutoTUnref
<
SkFontConfigInterface
>
fci
(
RefFCI
(
)
)
;
if
(
nullptr
=
=
fci
.
get
(
)
)
{
return
nullptr
;
}
*
ttcIndex
=
this
-
>
getIdentity
(
)
.
fTTCIndex
;
return
fci
-
>
openStream
(
this
-
>
getIdentity
(
)
)
;
}
void
FontConfigTypeface
:
:
onGetFamilyName
(
SkString
*
familyName
)
const
{
*
familyName
=
fFamilyName
;
}
void
FontConfigTypeface
:
:
onGetFontDescriptor
(
SkFontDescriptor
*
desc
bool
*
isLocalStream
)
const
{
SkString
name
;
this
-
>
getFamilyName
(
&
name
)
;
desc
-
>
setFamilyName
(
name
.
c_str
(
)
)
;
*
isLocalStream
=
SkToBool
(
this
-
>
getLocalStream
(
)
)
;
}
