#
ifndef
SkScalarContext_win_dw_DEFINED
#
define
SkScalarContext_win_dw_DEFINED
#
include
"
SkScalar
.
h
"
#
include
"
SkScalerContext
.
h
"
#
include
"
SkTypeface_win_dw
.
h
"
#
include
"
SkTypes
.
h
"
#
include
<
dwrite
.
h
>
class
SkGlyph
;
class
SkDescriptor
;
class
SkScalerContext_DW
:
public
SkScalerContext
{
public
:
SkScalerContext_DW
(
DWriteFontTypeface
*
const
SkDescriptor
*
desc
)
;
virtual
~
SkScalerContext_DW
(
)
;
protected
:
unsigned
generateGlyphCount
(
)
override
;
uint16_t
generateCharToGlyph
(
SkUnichar
uni
)
override
;
void
generateAdvance
(
SkGlyph
*
glyph
)
override
;
void
generateMetrics
(
SkGlyph
*
glyph
)
override
;
void
generateImage
(
const
SkGlyph
&
glyph
)
override
;
void
generatePath
(
const
SkGlyph
&
glyph
SkPath
*
path
)
override
;
void
generateFontMetrics
(
SkPaint
:
:
FontMetrics
*
)
override
;
private
:
const
void
*
drawDWMask
(
const
SkGlyph
&
glyph
DWRITE_RENDERING_MODE
renderingMode
DWRITE_TEXTURE_TYPE
textureType
)
;
HRESULT
getBoundingBox
(
SkGlyph
*
glyph
DWRITE_RENDERING_MODE
renderingMode
DWRITE_TEXTURE_TYPE
textureType
RECT
*
bbox
)
;
SkTDArray
<
uint8_t
>
fBits
;
SkMatrix
fSkXform
;
DWRITE_MATRIX
fXform
;
DWRITE_MATRIX
fGsA
;
SkMatrix
fG_inv
;
SkScalar
fTextSizeRender
;
SkScalar
fTextSizeMeasure
;
SkAutoTUnref
<
DWriteFontTypeface
>
fTypeface
;
int
fGlyphCount
;
DWRITE_RENDERING_MODE
fRenderingMode
;
DWRITE_TEXTURE_TYPE
fTextureType
;
DWRITE_MEASURING_MODE
fMeasuringMode
;
}
;
#
endif
