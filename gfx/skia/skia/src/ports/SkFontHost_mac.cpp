#
include
"
SkTypes
.
h
"
#
if
defined
(
SK_BUILD_FOR_MAC
)
|
|
defined
(
SK_BUILD_FOR_IOS
)
#
ifdef
SK_BUILD_FOR_MAC
#
import
<
ApplicationServices
/
ApplicationServices
.
h
>
#
endif
#
ifdef
SK_BUILD_FOR_IOS
#
include
<
CoreText
/
CoreText
.
h
>
#
include
<
CoreText
/
CTFontManager
.
h
>
#
include
<
CoreGraphics
/
CoreGraphics
.
h
>
#
include
<
CoreFoundation
/
CoreFoundation
.
h
>
#
endif
#
include
"
mac
/
SkUniqueCFRef
.
h
"
#
include
"
SkAdvancedTypefaceMetrics
.
h
"
#
include
"
SkAutoMalloc
.
h
"
#
include
"
SkCGUtils
.
h
"
#
include
"
SkColorData
.
h
"
#
include
"
SkDescriptor
.
h
"
#
include
"
SkEndian
.
h
"
#
include
"
SkFloatingPoint
.
h
"
#
include
"
SkFontDescriptor
.
h
"
#
include
"
SkFontMgr
.
h
"
#
include
"
SkGlyph
.
h
"
#
include
"
SkMakeUnique
.
h
"
#
include
"
SkMaskGamma
.
h
"
#
include
"
SkMathPriv
.
h
"
#
include
"
SkMutex
.
h
"
#
include
"
SkOTTable_OS_2
.
h
"
#
include
"
SkOTUtils
.
h
"
#
include
"
SkOnce
.
h
"
#
include
"
SkPaint
.
h
"
#
include
"
SkPath
.
h
"
#
include
"
SkSFNTHeader
.
h
"
#
include
"
SkStream
.
h
"
#
include
"
SkString
.
h
"
#
include
"
SkTemplates
.
h
"
#
include
"
SkTo
.
h
"
#
include
"
SkTypefaceCache
.
h
"
#
include
"
SkTypeface_mac
.
h
"
#
include
"
SkUTF
.
h
"
#
include
"
SkUtils
.
h
"
#
include
<
dlfcn
.
h
>
#
include
<
utility
>
#
define
USE_GLOBAL_MUTEX_FOR_CG_ACCESS
#
ifdef
USE_GLOBAL_MUTEX_FOR_CG_ACCESS
SK_DECLARE_STATIC_MUTEX
(
gCGMutex
)
;
#
define
AUTO_CG_LOCK
(
)
SkAutoMutexAcquire
amc
(
gCGMutex
)
#
else
#
define
AUTO_CG_LOCK
(
)
#
endif
#
define
SK_SHOW_TEXT_BLIT_COVERAGE
0
CTFontRef
SkTypeface_GetCTFontRef
(
const
SkTypeface
*
face
)
{
return
face
?
(
CTFontRef
)
face
-
>
internal_private_getCTFontRef
(
)
:
nullptr
;
}
class
SkScalerContext_Mac
;
static
SkUniqueCFRef
<
CFStringRef
>
make_CFString
(
const
char
s
[
]
)
{
return
SkUniqueCFRef
<
CFStringRef
>
(
CFStringCreateWithCString
(
nullptr
s
kCFStringEncodingUTF8
)
)
;
}
static
bool
CGRectIsEmpty_inline
(
const
CGRect
&
rect
)
{
return
rect
.
size
.
width
<
=
0
|
|
rect
.
size
.
height
<
=
0
;
}
static
CGFloat
CGRectGetMinX_inline
(
const
CGRect
&
rect
)
{
return
rect
.
origin
.
x
;
}
static
CGFloat
CGRectGetMaxX_inline
(
const
CGRect
&
rect
)
{
return
rect
.
origin
.
x
+
rect
.
size
.
width
;
}
static
CGFloat
CGRectGetMinY_inline
(
const
CGRect
&
rect
)
{
return
rect
.
origin
.
y
;
}
static
CGFloat
CGRectGetMaxY_inline
(
const
CGRect
&
rect
)
{
return
rect
.
origin
.
y
+
rect
.
size
.
height
;
}
static
CGFloat
CGRectGetWidth_inline
(
const
CGRect
&
rect
)
{
return
rect
.
size
.
width
;
}
static
void
sk_memset_rect32
(
uint32_t
*
ptr
uint32_t
value
int
width
int
height
size_t
rowBytes
)
{
SkASSERT
(
width
)
;
SkASSERT
(
width
*
sizeof
(
uint32_t
)
<
=
rowBytes
)
;
if
(
width
>
=
32
)
{
while
(
height
)
{
sk_memset32
(
ptr
value
width
)
;
ptr
=
(
uint32_t
*
)
(
(
char
*
)
ptr
+
rowBytes
)
;
height
-
=
1
;
}
return
;
}
rowBytes
-
=
width
*
sizeof
(
uint32_t
)
;
if
(
width
>
=
8
)
{
while
(
height
)
{
int
w
=
width
;
do
{
*
ptr
+
+
=
value
;
*
ptr
+
+
=
value
;
*
ptr
+
+
=
value
;
*
ptr
+
+
=
value
;
*
ptr
+
+
=
value
;
*
ptr
+
+
=
value
;
*
ptr
+
+
=
value
;
*
ptr
+
+
=
value
;
w
-
=
8
;
}
while
(
w
>
=
8
)
;
while
(
-
-
w
>
=
0
)
{
*
ptr
+
+
=
value
;
}
ptr
=
(
uint32_t
*
)
(
(
char
*
)
ptr
+
rowBytes
)
;
height
-
=
1
;
}
}
else
{
while
(
height
)
{
int
w
=
width
;
do
{
*
ptr
+
+
=
value
;
}
while
(
-
-
w
>
0
)
;
ptr
=
(
uint32_t
*
)
(
(
char
*
)
ptr
+
rowBytes
)
;
height
-
=
1
;
}
}
}
typedef
uint32_t
CGRGBPixel
;
static
unsigned
CGRGBPixel_getAlpha
(
CGRGBPixel
pixel
)
{
return
pixel
&
0xFF
;
}
static
CGFloat
ScalarToCG
(
SkScalar
scalar
)
{
if
(
sizeof
(
CGFloat
)
=
=
sizeof
(
float
)
)
{
return
SkScalarToFloat
(
scalar
)
;
}
else
{
SkASSERT
(
sizeof
(
CGFloat
)
=
=
sizeof
(
double
)
)
;
return
(
CGFloat
)
SkScalarToDouble
(
scalar
)
;
}
}
static
SkScalar
CGToScalar
(
CGFloat
cgFloat
)
{
if
(
sizeof
(
CGFloat
)
=
=
sizeof
(
float
)
)
{
return
SkFloatToScalar
(
cgFloat
)
;
}
else
{
SkASSERT
(
sizeof
(
CGFloat
)
=
=
sizeof
(
double
)
)
;
return
SkDoubleToScalar
(
cgFloat
)
;
}
}
static
float
CGToFloat
(
CGFloat
cgFloat
)
{
if
(
sizeof
(
CGFloat
)
=
=
sizeof
(
float
)
)
{
return
cgFloat
;
}
else
{
SkASSERT
(
sizeof
(
CGFloat
)
=
=
sizeof
(
double
)
)
;
return
static_cast
<
float
>
(
cgFloat
)
;
}
}
static
CGAffineTransform
MatrixToCGAffineTransform
(
const
SkMatrix
&
matrix
)
{
return
CGAffineTransformMake
(
ScalarToCG
(
matrix
[
SkMatrix
:
:
kMScaleX
]
)
-
ScalarToCG
(
matrix
[
SkMatrix
:
:
kMSkewY
]
)
-
ScalarToCG
(
matrix
[
SkMatrix
:
:
kMSkewX
]
)
ScalarToCG
(
matrix
[
SkMatrix
:
:
kMScaleY
]
)
ScalarToCG
(
matrix
[
SkMatrix
:
:
kMTransX
]
)
ScalarToCG
(
matrix
[
SkMatrix
:
:
kMTransY
]
)
)
;
}
#
define
BITMAP_INFO_RGB
(
kCGImageAlphaNoneSkipFirst
|
kCGBitmapByteOrder32Host
)
static
constexpr
const
uint8_t
kSpiderSymbol_ttf
[
]
=
{
0x00
0x01
0x00
0x00
0x00
0x0c
0x00
0x80
0x00
0x03
0x00
0x40
0x47
0x44
0x45
0x46
0x00
0x14
0x00
0x14
0x00
0x00
0x07
0xa8
0x00
0x00
0x00
0x18
0x4f
0x53
0x2f
0x32
0x8a
0xf4
0xfb
0xdb
0x00
0x00
0x01
0x48
0x00
0x00
0x00
0x60
0x63
0x6d
0x61
0x70
0xe0
0x7f
0x10
0x7e
0x00
0x00
0x01
0xb8
0x00
0x00
0x00
0x54
0x67
0x61
0x73
0x70
0xff
0xff
0x00
0x03
0x00
0x00
0x07
0xa0
0x00
0x00
0x00
0x08
0x67
0x6c
0x79
0x66
0x97
0x0b
0x6a
0xf6
0x00
0x00
0x02
0x18
0x00
0x00
0x03
0x40
0x68
0x65
0x61
0x64
0x0f
0xa2
0x24
0x1a
0x00
0x00
0x00
0xcc
0x00
0x00
0x00
0x36
0x68
0x68
0x65
0x61
0x0e
0xd3
0x07
0x3f
0x00
0x00
0x01
0x04
0x00
0x00
0x00
0x24
0x68
0x6d
0x74
0x78
0x10
0x03
0x00
0x44
0x00
0x00
0x01
0xa8
0x00
0x00
0x00
0x0e
0x6c
0x6f
0x63
0x61
0x01
0xb4
0x00
0x28
0x00
0x00
0x02
0x0c
0x00
0x00
0x00
0x0a
0x6d
0x61
0x78
0x70
0x00
0x4a
0x01
0x4d
0x00
0x00
0x01
0x28
0x00
0x00
0x00
0x20
0x6e
0x61
0x6d
0x65
0xc3
0xe5
0x39
0xd4
0x00
0x00
0x05
0x58
0x00
0x00
0x02
0x28
0x70
0x6f
0x73
0x74
0xff
0x03
0x00
0x67
0x00
0x00
0x07
0x80
0x00
0x00
0x00
0x20
0x00
0x01
0x00
0x00
0x00
0x01
0x00
0x00
0x0b
0x0f
0x08
0x1d
0x5f
0x0f
0x3c
0xf5
0x00
0x0b
0x08
0x00
0x00
0x00
0x00
0x00
0xd1
0x97
0xa8
0x5a
0x00
0x00
0x00
0x00
0xd6
0xe8
0x32
0x33
0x00
0x03
0xff
0x3b
0x08
0x00
0x05
0x55
0x00
0x00
0x00
0x08
0x00
0x02
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x00
0x00
0x05
0x55
0xff
0x3b
0x01
0x79
0x08
0x00
0x00
0x03
0x00
0x00
0x08
0x00
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x03
0x00
0x01
0x00
0x00
0x00
0x04
0x01
0x1c
0x00
0x04
0x00
0x00
0x00
0x00
0x00
0x02
0x00
0x00
0x00
0x01
0x00
0x01
0x00
0x00
0x00
0x40
0x00
0x2e
0x00
0x00
0x00
0x00
0x00
0x04
0x08
0x00
0x01
0x90
0x00
0x05
0x00
0x00
0x05
0x33
0x05
0x99
0x00
0x00
0x01
0x1e
0x05
0x33
0x05
0x99
0x00
0x00
0x03
0xd7
0x00
0x66
0x02
0x12
0x00
0x00
0x05
0x00
0x01
0x02
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x73
0x6b
0x69
0x61
0x00
0xc0
0x00
0x00
0xf0
0x21
0x06
0x66
0xfe
0x66
0x01
0x79
0x05
0x55
0x00
0xc5
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x20
0x00
0x01
0x08
0x00
0x00
0x44
0x00
0x00
0x00
0x00
0x08
0x00
0x00
0x00
0x00
0x03
0x00
0x00
0x00
0x00
0x00
0x01
0x00
0x03
0x00
0x00
0x00
0x00
0x00
0x0c
0x00
0x04
0x00
0x48
0x00
0x00
0x00
0x0e
0x00
0x08
0x00
0x02
0x00
0x06
0x00
0x00
0x00
0x09
0x00
0x0d
0x00
0x1d
0x00
0x21
0xf0
0x21
0xff
0xff
0x00
0x00
0x00
0x00
0x00
0x08
0x00
0x0d
0x00
0x1d
0x00
0x21
0xf0
0x21
0xff
0xff
0x00
0x01
0xff
0xf9
0xff
0xf5
0xff
0xe4
0xff
0xe2
0x0f
0xe2
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x14
0x00
0x14
0x00
0x14
0x01
0xa0
0x00
0x00
0x00
0x02
0x00
0x44
0x00
0x00
0x02
0x64
0x05
0x55
0x00
0x03
0x00
0x07
0x00
0x00
0x33
0x11
0x21
0x11
0x25
0x21
0x11
0x21
0x44
0x02
0x20
0xfe
0x24
0x01
0x98
0xfe
0x68
0x05
0x55
0xfa
0xab
0x44
0x04
0xcd
0x00
0x04
0x00
0x03
0xff
0x3b
0x08
0x00
0x05
0x4c
0x00
0x15
0x00
0x1d
0x00
0x25
0x01
0x1b
0x00
0x00
0x01
0x36
0x37
0x36
0x27
0x26
0x07
0x06
0x06
0x23
0x22
0x27
0x26
0x27
0x26
0x07
0x06
0x17
0x16
0x17
0x16
0x32
0x37
0x32
0x35
0x34
0x23
0x22
0x15
0x14
0x27
0x32
0x35
0x34
0x23
0x22
0x15
0x14
0x03
0x32
0x17
0x30
0x17
0x31
0x36
0x37
0x36
0x37
0x36
0x37
0x36
0x33
0x32
0x33
0x16
0x33
0x32
0x17
0x16
0x07
0x06
0x23
0x22
0x27
0x26
0x27
0x26
0x23
0x22
0x07
0x07
0x06
0x07
0x06
0x07
0x06
0x1f
0x02
0x37
0x36
0x37
0x36
0x33
0x32
0x17
0x17
0x16
0x33
0x16
0x17
0x16
0x07
0x06
0x23
0x22
0x27
0x27
0x26
0x23
0x22
0x07
0x06
0x07
0x06
0x17
0x16
0x17
0x16
0x33
0x32
0x33
0x32
0x37
0x36
0x37
0x36
0x17
0x16
0x1f
0x02
0x16
0x17
0x16
0x15
0x14
0x23
0x22
0x27
0x27
0x26
0x27
0x27
0x26
0x27
0x26
0x07
0x06
0x07
0x06
0x17
0x16
0x17
0x16
0x15
0x14
0x07
0x06
0x07
0x06
0x23
0x22
0x27
0x26
0x07
0x06
0x07
0x06
0x15
0x14
0x17
0x16
0x17
0x16
0x15
0x14
0x07
0x06
0x23
0x22
0x27
0x26
0x27
0x26
0x35
0x34
0x37
0x36
0x37
0x36
0x37
0x34
0x27
0x26
0x07
0x06
0x07
0x06
0x0f
0x02
0x06
0x23
0x22
0x27
0x26
0x35
0x34
0x37
0x37
0x36
0x37
0x36
0x37
0x36
0x37
0x36
0x27
0x26
0x27
0x26
0x07
0x06
0x07
0x06
0x07
0x06
0x07
0x07
0x06
0x23
0x22
0x27
0x26
0x35
0x34
0x37
0x36
0x37
0x37
0x36
0x37
0x37
0x36
0x37
0x36
0x37
0x36
0x35
0x34
0x27
0x26
0x27
0x26
0x27
0x26
0x23
0x22
0x07
0x06
0x07
0x06
0x07
0x06
0x27
0x26
0x27
0x26
0x27
0x26
0x35
0x34
0x37
0x36
0x37
0x36
0x37
0x36
0x33
0x32
0x17
0x16
0x33
0x32
0x37
0x36
0x35
0x34
0x37
0x36
0x37
0x36
0x33
0x04
0xf5
0x23
0x13
0x11
0x14
0x16
0x1d
0x1b
0x4c
0x1f
0x0e
0x2d
0x23
0x14
0x2c
0x13
0x18
0x25
0x2c
0x10
0x3c
0x71
0x1d
0x5c
0x5c
0x3f
0xae
0x5c
0x5c
0x3f
0x6a
0x27
0x31
0x5b
0x09
0x27
0x36
0x03
0x0a
0x26
0x35
0x2e
0x09
0x08
0xc6
0x13
0x81
0x17
0x20
0x18
0x21
0x1e
0x04
0x04
0x15
0x5c
0x22
0x26
0x48
0x56
0x3b
0x10
0x21
0x01
0x0c
0x06
0x06
0x0f
0x31
0x44
0x3c
0x52
0x4a
0x1d
0x11
0x3f
0xb4
0x71
0x01
0x26
0x06
0x0d
0x15
0x1a
0x2a
0x13
0x53
0xaa
0x42
0x1d
0x0a
0x33
0x20
0x21
0x2b
0x01
0x02
0x3e
0x21
0x09
0x02
0x02
0x0f
0x2d
0x4b
0x0a
0x22
0x15
0x20
0x1f
0x72
0x8b
0x2d
0x2f
0x1d
0x1f
0x0e
0x25
0x3f
0x4d
0x1b
0x63
0x2a
0x2c
0x14
0x22
0x18
0x1c
0x0f
0x08
0x2a
0x08
0x08
0x0d
0x3b
0x4c
0x52
0x74
0x27
0x71
0x2e
0x01
0x0c
0x10
0x15
0x0d
0x06
0x0d
0x05
0x01
0x06
0x2c
0x28
0x14
0x1b
0x05
0x04
0x10
0x06
0x12
0x08
0x0a
0x16
0x27
0x03
0x0d
0x30
0x4c
0x4c
0x4b
0x1f
0x0b
0x22
0x26
0x0d
0x15
0x0d
0x2d
0x68
0x34
0x14
0x3c
0x25
0x12
0x04
0x10
0x18
0x0b
0x09
0x30
0x2b
0x44
0x66
0x14
0x47
0x47
0x59
0x73
0x25
0x05
0x03
0x1f
0x01
0x08
0x3f
0x48
0x4b
0x4b
0x76
0x2f
0x49
0x2d
0x22
0x24
0x0c
0x15
0x08
0x0e
0x33
0x03
0x44
0x4c
0x10
0x46
0x13
0x1f
0x27
0x1b
0x1d
0x13
0x02
0x24
0x08
0x02
0x42
0x0e
0x4d
0x3c
0x19
0x1b
0x40
0x2b
0x2b
0x1e
0x16
0x11
0x04
0x1f
0x11
0x04
0x18
0x11
0x35
0x01
0xa3
0x13
0x24
0x1f
0x0b
0x0c
0x19
0x19
0x18
0x13
0x0f
0x0c
0x1a
0x18
0x1f
0x19
0x1e
0x07
0x1a
0xc3
0x54
0x51
0x54
0x51
0x04
0x53
0x51
0x54
0x50
0x02
0x48
0x1a
0x31
0x18
0x55
0x74
0x04
0x0e
0x09
0x0d
0x06
0x10
0x16
0x1b
0x24
0x01
0x04
0x0b
0x04
0x10
0x3f
0x0a
0x41
0x02
0x41
0x20
0x06
0x12
0x16
0x21
0x17
0x2a
0x1e
0x15
0x40
0x27
0x11
0x0e
0x1e
0x11
0x15
0x1f
0x43
0x13
0x1a
0x10
0x15
0x1b
0x04
0x09
0x4d
0x2a
0x0f
0x19
0x0a
0x0a
0x03
0x05
0x15
0x3c
0x64
0x21
0x4b
0x2e
0x21
0x28
0x13
0x47
0x44
0x19
0x3f
0x11
0x18
0x0b
0x0a
0x07
0x18
0x0d
0x07
0x24
0x2c
0x2b
0x21
0x32
0x10
0x48
0x2a
0x2d
0x1e
0x1a
0x01
0x0c
0x43
0x59
0x28
0x4e
0x1c
0x0d
0x5d
0x24
0x14
0x0a
0x05
0x1f
0x24
0x32
0x46
0x3e
0x5f
0x3e
0x44
0x1a
0x30
0x15
0x0d
0x07
0x18
0x2b
0x03
0x0d
0x1a
0x28
0x28
0x57
0xb2
0x29
0x27
0x40
0x2c
0x23
0x16
0x63
0x58
0x1a
0x0a
0x18
0x11
0x23
0x08
0x1b
0x29
0x05
0x04
0x0b
0x15
0x0d
0x14
0x0b
0x2a
0x29
0x5a
0x62
0x01
0x19
0x1e
0x05
0x05
0x26
0x42
0x42
0x2a
0x2a
0x3f
0x0d
0x0f
0x09
0x05
0x07
0x01
0x0b
0x25
0x3e
0x0d
0x17
0x11
0x01
0x03
0x0d
0x13
0x20
0x19
0x11
0x03
0x02
0x01
0x04
0x11
0x04
0x05
0x1b
0x3d
0x10
0x29
0x20
0x04
0x04
0x0a
0x07
0x04
0x1f
0x15
0x20
0x3e
0x0f
0x2a
0x1e
0x00
0x00
0x00
0x1b
0x01
0x4a
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x1b
0x00
0x00
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x01
0x00
0x0c
0x00
0x1b
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x02
0x00
0x07
0x00
0x27
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x03
0x00
0x0c
0x00
0x1b
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x04
0x00
0x0c
0x00
0x1b
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x05
0x00
0x02
0x00
0x2e
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x06
0x00
0x0c
0x00
0x1b
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x0d
0x00
0x1b
0x00
0x00
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x0e
0x00
0x1a
0x00
0x30
0x00
0x03
0x00
0x00
0x04
0x09
0x00
0x00
0x00
0x36
0x00
0x4a
0x00
0x03
0x00
0x00
0x04
0x09
0x00
0x01
0x00
0x18
0x00
0x80
0x00
0x03
0x00
0x00
0x04
0x09
0x00
0x02
0x00
0x0e
0x00
0x98
0x00
0x03
0x00
0x00
0x04
0x09
0x00
0x03
0x00
0x18
0x00
0x80
0x00
0x03
0x00
0x00
0x04
0x09
0x00
0x04
0x00
0x18
0x00
0x80
0x00
0x03
0x00
0x00
0x04
0x09
0x00
0x05
0x00
0x04
0x00
0xa6
0x00
0x03
0x00
0x00
0x04
0x09
0x00
0x06
0x00
0x18
0x00
0x80
0x00
0x03
0x00
0x00
0x04
0x09
0x00
0x0d
0x00
0x36
0x00
0x4a
0x00
0x03
0x00
0x00
0x04
0x09
0x00
0x0e
0x00
0x34
0x00
0xaa
0x00
0x03
0x00
0x01
0x04
0x09
0x00
0x00
0x00
0x36
0x00
0x4a
0x00
0x03
0x00
0x01
0x04
0x09
0x00
0x01
0x00
0x18
0x00
0x80
0x00
0x03
0x00
0x01
0x04
0x09
0x00
0x02
0x00
0x0e
0x00
0x98
0x00
0x03
0x00
0x01
0x04
0x09
0x00
0x03
0x00
0x18
0x00
0x80
0x00
0x03
0x00
0x01
0x04
0x09
0x00
0x04
0x00
0x18
0x00
0x80
0x00
0x03
0x00
0x01
0x04
0x09
0x00
0x05
0x00
0x04
0x00
0xa6
0x00
0x03
0x00
0x01
0x04
0x09
0x00
0x06
0x00
0x18
0x00
0x80
0x00
0x03
0x00
0x01
0x04
0x09
0x00
0x0d
0x00
0x36
0x00
0x4a
0x00
0x03
0x00
0x01
0x04
0x09
0x00
0x0e
0x00
0x34
0x00
0xaa
0x43
0x6f
0x70
0x79
0x72
0x69
0x67
0x68
0x74
0x20
0x28
0x63
0x29
0x20
0x32
0x30
0x31
0x35
0x2c
0x20
0x47
0x6f
0x6f
0x67
0x6c
0x65
0x2e
0x53
0x70
0x69
0x64
0x65
0x72
0x53
0x79
0x6d
0x62
0x6f
0x6c
0x52
0x65
0x67
0x75
0x6c
0x61
0x72
0x56
0x31
0x68
0x74
0x74
0x70
0x3a
0x2f
0x2f
0x73
0x63
0x72
0x69
0x70
0x74
0x73
0x2e
0x73
0x69
0x6c
0x2e
0x6f
0x72
0x67
0x2f
0x4f
0x46
0x4c
0x00
0x43
0x00
0x6f
0x00
0x70
0x00
0x79
0x00
0x72
0x00
0x69
0x00
0x67
0x00
0x68
0x00
0x74
0x00
0x20
0x00
0x28
0x00
0x63
0x00
0x29
0x00
0x20
0x00
0x32
0x00
0x30
0x00
0x31
0x00
0x35
0x00
0x2c
0x00
0x20
0x00
0x47
0x00
0x6f
0x00
0x6f
0x00
0x67
0x00
0x6c
0x00
0x65
0x00
0x2e
0x00
0x53
0x00
0x70
0x00
0x69
0x00
0x64
0x00
0x65
0x00
0x72
0x00
0x53
0x00
0x79
0x00
0x6d
0x00
0x62
0x00
0x6f
0x00
0x6c
0x00
0x52
0x00
0x65
0x00
0x67
0x00
0x75
0x00
0x6c
0x00
0x61
0x00
0x72
0x00
0x56
0x00
0x31
0x00
0x68
0x00
0x74
0x00
0x74
0x00
0x70
0x00
0x3a
0x00
0x2f
0x00
0x2f
0x00
0x73
0x00
0x63
0x00
0x72
0x00
0x69
0x00
0x70
0x00
0x74
0x00
0x73
0x00
0x2e
0x00
0x73
0x00
0x69
0x00
0x6c
0x00
0x2e
0x00
0x6f
0x00
0x72
0x00
0x67
0x00
0x2f
0x00
0x4f
0x00
0x46
0x00
0x4c
0x00
0x03
0x00
0x00
0x00
0x00
0x00
0x00
0xff
0x00
0x00
0x66
0x00
0x00
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0xff
0xff
0x00
0x02
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x0c
0x00
0x14
0x00
0x04
0x00
0x00
0x00
0x01
0x00
0x00
0x00
0x02
0x00
0x00
}
;
enum
class
SmoothBehavior
{
none
some
subpixel
}
;
static
SmoothBehavior
smooth_behavior
(
)
{
static
SmoothBehavior
gSmoothBehavior
=
[
]
{
uint32_t
noSmoothBitmap
[
16
]
[
16
]
=
{
}
;
uint32_t
smoothBitmap
[
16
]
[
16
]
=
{
}
;
SkUniqueCFRef
<
CGColorSpaceRef
>
colorspace
(
CGColorSpaceCreateDeviceRGB
(
)
)
;
SkUniqueCFRef
<
CGContextRef
>
noSmoothContext
(
CGBitmapContextCreate
(
&
noSmoothBitmap
16
16
8
16
*
4
colorspace
.
get
(
)
BITMAP_INFO_RGB
)
)
;
SkUniqueCFRef
<
CGContextRef
>
smoothContext
(
CGBitmapContextCreate
(
&
smoothBitmap
16
16
8
16
*
4
colorspace
.
get
(
)
BITMAP_INFO_RGB
)
)
;
SkUniqueCFRef
<
CGDataProviderRef
>
data
(
CGDataProviderCreateWithData
(
nullptr
kSpiderSymbol_ttf
SK_ARRAY_COUNT
(
kSpiderSymbol_ttf
)
nullptr
)
)
;
SkUniqueCFRef
<
CGFontRef
>
cgFont
(
CGFontCreateWithDataProvider
(
data
.
get
(
)
)
)
;
SkASSERT
(
cgFont
)
;
SkUniqueCFRef
<
CTFontRef
>
ctFont
(
CTFontCreateWithGraphicsFont
(
cgFont
.
get
(
)
16
nullptr
nullptr
)
)
;
SkASSERT
(
ctFont
)
;
CGContextSetShouldSmoothFonts
(
noSmoothContext
.
get
(
)
false
)
;
CGContextSetShouldAntialias
(
noSmoothContext
.
get
(
)
true
)
;
CGContextSetTextDrawingMode
(
noSmoothContext
.
get
(
)
kCGTextFill
)
;
CGContextSetGrayFillColor
(
noSmoothContext
.
get
(
)
1
1
)
;
CGContextSetShouldSmoothFonts
(
smoothContext
.
get
(
)
true
)
;
CGContextSetShouldAntialias
(
smoothContext
.
get
(
)
true
)
;
CGContextSetTextDrawingMode
(
smoothContext
.
get
(
)
kCGTextFill
)
;
CGContextSetGrayFillColor
(
smoothContext
.
get
(
)
1
1
)
;
CGPoint
point
=
CGPointMake
(
0
3
)
;
CGGlyph
spiderGlyph
=
3
;
CTFontDrawGlyphs
(
ctFont
.
get
(
)
&
spiderGlyph
&
point
1
noSmoothContext
.
get
(
)
)
;
CTFontDrawGlyphs
(
ctFont
.
get
(
)
&
spiderGlyph
&
point
1
smoothContext
.
get
(
)
)
;
SmoothBehavior
smoothBehavior
=
SmoothBehavior
:
:
none
;
for
(
int
x
=
0
;
x
<
16
;
+
+
x
)
{
for
(
int
y
=
0
;
y
<
16
;
+
+
y
)
{
uint32_t
smoothPixel
=
smoothBitmap
[
x
]
[
y
]
;
uint32_t
r
=
(
smoothPixel
>
>
16
)
&
0xFF
;
uint32_t
g
=
(
smoothPixel
>
>
8
)
&
0xFF
;
uint32_t
b
=
(
smoothPixel
>
>
0
)
&
0xFF
;
if
(
r
!
=
g
|
|
r
!
=
b
)
{
return
SmoothBehavior
:
:
subpixel
;
}
if
(
noSmoothBitmap
[
x
]
[
y
]
!
=
smoothPixel
)
{
smoothBehavior
=
SmoothBehavior
:
:
some
;
}
}
}
return
smoothBehavior
;
}
(
)
;
return
gSmoothBehavior
;
}
class
Offscreen
{
public
:
Offscreen
(
)
:
fRGBSpace
(
nullptr
)
fCG
(
nullptr
)
fDoAA
(
false
)
fDoLCD
(
false
)
{
fSize
.
set
(
0
0
)
;
}
CGRGBPixel
*
getCG
(
const
SkScalerContext_Mac
&
context
const
SkGlyph
&
glyph
CGGlyph
glyphID
size_t
*
rowBytesPtr
bool
generateA8FromLCD
)
;
private
:
enum
{
kSize
=
32
*
32
*
sizeof
(
CGRGBPixel
)
}
;
SkAutoSMalloc
<
kSize
>
fImageStorage
;
SkUniqueCFRef
<
CGColorSpaceRef
>
fRGBSpace
;
SkUniqueCFRef
<
CGContextRef
>
fCG
;
SkISize
fSize
;
bool
fDoAA
;
bool
fDoLCD
;
static
int
RoundSize
(
int
dimension
)
{
return
SkNextPow2
(
dimension
)
;
}
}
;
static
bool
find_dict_CGFloat
(
CFDictionaryRef
dict
CFStringRef
name
CGFloat
*
value
)
{
CFNumberRef
num
;
return
CFDictionaryGetValueIfPresent
(
dict
name
(
const
void
*
*
)
&
num
)
&
&
CFNumberIsFloatType
(
num
)
&
&
CFNumberGetValue
(
num
kCFNumberCGFloatType
value
)
;
}
template
<
typename
S
typename
D
typename
C
>
struct
LinearInterpolater
{
struct
Mapping
{
S
src_val
;
D
dst_val
;
}
;
constexpr
LinearInterpolater
(
Mapping
const
mapping
[
]
int
mappingCount
)
:
fMapping
(
mapping
)
fMappingCount
(
mappingCount
)
{
}
static
D
map
(
S
value
S
src_min
S
src_max
D
dst_min
D
dst_max
)
{
SkASSERT
(
src_min
<
src_max
)
;
SkASSERT
(
dst_min
<
=
dst_max
)
;
return
C
(
)
(
dst_min
+
(
(
(
value
-
src_min
)
*
(
dst_max
-
dst_min
)
)
/
(
src_max
-
src_min
)
)
)
;
}
D
map
(
S
val
)
const
{
if
(
val
<
fMapping
[
0
]
.
src_val
)
{
return
fMapping
[
0
]
.
dst_val
;
}
for
(
int
i
=
0
;
i
<
fMappingCount
-
1
;
+
+
i
)
{
if
(
val
<
fMapping
[
i
+
1
]
.
src_val
)
{
return
map
(
val
fMapping
[
i
]
.
src_val
fMapping
[
i
+
1
]
.
src_val
fMapping
[
i
]
.
dst_val
fMapping
[
i
+
1
]
.
dst_val
)
;
}
}
return
fMapping
[
fMappingCount
-
1
]
.
dst_val
;
}
Mapping
const
*
fMapping
;
int
fMappingCount
;
}
;
struct
RoundCGFloatToInt
{
int
operator
(
)
(
CGFloat
s
)
{
return
s
+
0
.
5
;
}
}
;
struct
CGFloatIdentity
{
CGFloat
operator
(
)
(
CGFloat
s
)
{
return
s
;
}
}
;
static
CGFloat
(
&
get_NSFontWeight_mapping
(
)
)
[
11
]
{
#
ifdef
SK_BUILD_FOR_MAC
#
define
SK_KIT_FONT_WEIGHT_PREFIX
"
NS
"
#
endif
#
ifdef
SK_BUILD_FOR_IOS
#
define
SK_KIT_FONT_WEIGHT_PREFIX
"
UI
"
#
endif
static
constexpr
struct
{
CGFloat
defaultValue
;
const
char
*
name
;
}
nsFontWeightLoaderInfos
[
]
=
{
{
-
0
.
80f
SK_KIT_FONT_WEIGHT_PREFIX
"
FontWeightUltraLight
"
}
{
-
0
.
60f
SK_KIT_FONT_WEIGHT_PREFIX
"
FontWeightThin
"
}
{
-
0
.
40f
SK_KIT_FONT_WEIGHT_PREFIX
"
FontWeightLight
"
}
{
0
.
00f
SK_KIT_FONT_WEIGHT_PREFIX
"
FontWeightRegular
"
}
{
0
.
23f
SK_KIT_FONT_WEIGHT_PREFIX
"
FontWeightMedium
"
}
{
0
.
30f
SK_KIT_FONT_WEIGHT_PREFIX
"
FontWeightSemibold
"
}
{
0
.
40f
SK_KIT_FONT_WEIGHT_PREFIX
"
FontWeightBold
"
}
{
0
.
56f
SK_KIT_FONT_WEIGHT_PREFIX
"
FontWeightHeavy
"
}
{
0
.
62f
SK_KIT_FONT_WEIGHT_PREFIX
"
FontWeightBlack
"
}
}
;
static_assert
(
SK_ARRAY_COUNT
(
nsFontWeightLoaderInfos
)
=
=
9
"
"
)
;
static
CGFloat
nsFontWeights
[
11
]
;
static
SkOnce
once
;
once
(
[
&
]
{
size_t
i
=
0
;
nsFontWeights
[
i
+
+
]
=
-
1
.
00
;
for
(
const
auto
&
nsFontWeightLoaderInfo
:
nsFontWeightLoaderInfos
)
{
void
*
nsFontWeightValuePtr
=
dlsym
(
RTLD_DEFAULT
nsFontWeightLoaderInfo
.
name
)
;
if
(
nsFontWeightValuePtr
)
{
nsFontWeights
[
i
+
+
]
=
*
(
static_cast
<
CGFloat
*
>
(
nsFontWeightValuePtr
)
)
;
}
else
{
nsFontWeights
[
i
+
+
]
=
nsFontWeightLoaderInfo
.
defaultValue
;
}
}
nsFontWeights
[
i
+
+
]
=
1
.
00
;
}
)
;
return
nsFontWeights
;
}
static
CGFloat
fontstyle_to_ct_weight
(
int
fontstyleWeight
)
{
using
Interpolator
=
LinearInterpolater
<
int
CGFloat
CGFloatIdentity
>
;
static
Interpolator
:
:
Mapping
nativeWeightMappings
[
11
]
;
static
SkOnce
once
;
once
(
[
&
]
{
CGFloat
(
&
nsFontWeights
)
[
11
]
=
get_NSFontWeight_mapping
(
)
;
for
(
int
i
=
0
;
i
<
11
;
+
+
i
)
{
nativeWeightMappings
[
i
]
.
src_val
=
i
*
100
;
nativeWeightMappings
[
i
]
.
dst_val
=
nsFontWeights
[
i
]
;
}
}
)
;
static
constexpr
Interpolator
nativeInterpolator
(
nativeWeightMappings
SK_ARRAY_COUNT
(
nativeWeightMappings
)
)
;
return
nativeInterpolator
.
map
(
fontstyleWeight
)
;
}
static
int
ct_weight_to_fontstyle
(
CGFloat
cgWeight
bool
fromDataProvider
)
{
using
Interpolator
=
LinearInterpolater
<
CGFloat
int
RoundCGFloatToInt
>
;
static
constexpr
Interpolator
:
:
Mapping
dataProviderWeightMappings
[
]
=
{
{
-
1
.
00
0
}
{
-
0
.
70
100
}
{
-
0
.
50
200
}
{
-
0
.
23
300
}
{
0
.
00
400
}
{
0
.
20
500
}
{
0
.
30
600
}
{
0
.
40
700
}
{
0
.
60
800
}
{
0
.
80
900
}
{
1
.
00
1000
}
}
;
static
constexpr
Interpolator
dataProviderInterpolator
(
dataProviderWeightMappings
SK_ARRAY_COUNT
(
dataProviderWeightMappings
)
)
;
static
Interpolator
:
:
Mapping
nativeWeightMappings
[
11
]
;
static
SkOnce
once
;
once
(
[
&
]
{
CGFloat
(
&
nsFontWeights
)
[
11
]
=
get_NSFontWeight_mapping
(
)
;
for
(
int
i
=
0
;
i
<
11
;
+
+
i
)
{
nativeWeightMappings
[
i
]
.
src_val
=
nsFontWeights
[
i
]
;
nativeWeightMappings
[
i
]
.
dst_val
=
i
*
100
;
}
}
)
;
static
constexpr
Interpolator
nativeInterpolator
(
nativeWeightMappings
SK_ARRAY_COUNT
(
nativeWeightMappings
)
)
;
return
fromDataProvider
?
dataProviderInterpolator
.
map
(
cgWeight
)
:
nativeInterpolator
.
map
(
cgWeight
)
;
}
static
int
fontstyle_to_ct_width
(
int
fontstyleWidth
)
{
using
Interpolator
=
LinearInterpolater
<
int
CGFloat
CGFloatIdentity
>
;
static
constexpr
Interpolator
:
:
Mapping
widthMappings
[
]
=
{
{
0
-
0
.
5
}
{
10
0
.
5
}
}
;
static
constexpr
Interpolator
interpolator
(
widthMappings
SK_ARRAY_COUNT
(
widthMappings
)
)
;
return
interpolator
.
map
(
fontstyleWidth
)
;
}
static
int
ct_width_to_fontstyle
(
CGFloat
cgWidth
)
{
using
Interpolator
=
LinearInterpolater
<
CGFloat
int
RoundCGFloatToInt
>
;
static
constexpr
Interpolator
:
:
Mapping
widthMappings
[
]
=
{
{
-
0
.
5
0
}
{
0
.
5
10
}
}
;
static
constexpr
Interpolator
interpolator
(
widthMappings
SK_ARRAY_COUNT
(
widthMappings
)
)
;
return
interpolator
.
map
(
cgWidth
)
;
}
static
SkFontStyle
fontstyle_from_descriptor
(
CTFontDescriptorRef
desc
bool
fromDataProvider
)
{
SkUniqueCFRef
<
CFTypeRef
>
traits
(
CTFontDescriptorCopyAttribute
(
desc
kCTFontTraitsAttribute
)
)
;
if
(
!
traits
|
|
CFDictionaryGetTypeID
(
)
!
=
CFGetTypeID
(
traits
.
get
(
)
)
)
{
return
SkFontStyle
(
)
;
}
SkUniqueCFRef
<
CFDictionaryRef
>
fontTraitsDict
(
static_cast
<
CFDictionaryRef
>
(
traits
.
release
(
)
)
)
;
CGFloat
weight
width
slant
;
if
(
!
find_dict_CGFloat
(
fontTraitsDict
.
get
(
)
kCTFontWeightTrait
&
weight
)
)
{
weight
=
0
;
}
if
(
!
find_dict_CGFloat
(
fontTraitsDict
.
get
(
)
kCTFontWidthTrait
&
width
)
)
{
width
=
0
;
}
if
(
!
find_dict_CGFloat
(
fontTraitsDict
.
get
(
)
kCTFontSlantTrait
&
slant
)
)
{
slant
=
0
;
}
return
SkFontStyle
(
ct_weight_to_fontstyle
(
weight
fromDataProvider
)
ct_width_to_fontstyle
(
width
)
slant
?
SkFontStyle
:
:
kItalic_Slant
:
SkFontStyle
:
:
kUpright_Slant
)
;
}
class
SkTypeface_Mac
:
public
SkTypeface
{
public
:
SkTypeface_Mac
(
SkUniqueCFRef
<
CTFontRef
>
fontRef
SkUniqueCFRef
<
CFTypeRef
>
resourceRef
const
SkFontStyle
&
fs
bool
isFixedPitch
bool
isLocalStream
)
:
SkTypeface
(
fs
isFixedPitch
)
fFontRef
(
std
:
:
move
(
fontRef
)
)
fOriginatingCFTypeRef
(
std
:
:
move
(
resourceRef
)
)
fHasColorGlyphs
(
SkToBool
(
CTFontGetSymbolicTraits
(
fFontRef
.
get
(
)
)
&
kCTFontColorGlyphsTrait
)
)
fIsLocalStream
(
isLocalStream
)
{
SkASSERT
(
fFontRef
)
;
}
SkUniqueCFRef
<
CTFontRef
>
fFontRef
;
SkUniqueCFRef
<
CFTypeRef
>
fOriginatingCFTypeRef
;
const
bool
fHasColorGlyphs
;
bool
hasColorGlyphs
(
)
const
override
{
return
fHasColorGlyphs
;
}
protected
:
int
onGetUPEM
(
)
const
override
;
SkStreamAsset
*
onOpenStream
(
int
*
ttcIndex
)
const
override
;
std
:
:
unique_ptr
<
SkFontData
>
onMakeFontData
(
)
const
override
;
int
onGetVariationDesignPosition
(
SkFontArguments
:
:
VariationPosition
:
:
Coordinate
coordinates
[
]
int
coordinateCount
)
const
override
;
void
onGetFamilyName
(
SkString
*
familyName
)
const
override
;
SkTypeface
:
:
LocalizedStrings
*
onCreateFamilyNameIterator
(
)
const
override
;
int
onGetTableTags
(
SkFontTableTag
tags
[
]
)
const
override
;
size_t
onGetTableData
(
SkFontTableTag
size_t
offset
size_t
length
void
*
data
)
const
override
;
SkScalerContext
*
onCreateScalerContext
(
const
SkScalerContextEffects
&
const
SkDescriptor
*
)
const
override
;
void
onFilterRec
(
SkScalerContextRec
*
)
const
override
;
void
onGetFontDescriptor
(
SkFontDescriptor
*
bool
*
)
const
override
;
void
getGlyphToUnicodeMap
(
SkUnichar
*
)
const
override
;
std
:
:
unique_ptr
<
SkAdvancedTypefaceMetrics
>
onGetAdvancedMetrics
(
)
const
override
;
int
onCharsToGlyphs
(
const
void
*
chars
Encoding
uint16_t
glyphs
[
]
int
glyphCount
)
const
override
;
int
onCountGlyphs
(
)
const
override
;
void
*
onGetCTFontRef
(
)
const
override
{
return
(
void
*
)
fFontRef
.
get
(
)
;
}
private
:
bool
fIsLocalStream
;
typedef
SkTypeface
INHERITED
;
}
;
static
bool
find_by_CTFontRef
(
SkTypeface
*
cached
void
*
context
)
{
CTFontRef
self
=
(
CTFontRef
)
context
;
CTFontRef
other
=
(
CTFontRef
)
cached
-
>
internal_private_getCTFontRef
(
)
;
return
CFEqual
(
self
other
)
;
}
static
sk_sp
<
SkTypeface
>
create_from_CTFontRef
(
SkUniqueCFRef
<
CTFontRef
>
font
SkUniqueCFRef
<
CFTypeRef
>
resource
bool
isLocalStream
)
{
SkASSERT
(
font
)
;
if
(
!
isLocalStream
)
{
SkTypeface
*
face
=
SkTypefaceCache
:
:
FindByProcAndRef
(
find_by_CTFontRef
(
void
*
)
font
.
get
(
)
)
;
if
(
face
)
{
return
sk_sp
<
SkTypeface
>
(
face
)
;
}
}
SkUniqueCFRef
<
CTFontDescriptorRef
>
desc
(
CTFontCopyFontDescriptor
(
font
.
get
(
)
)
)
;
SkFontStyle
style
=
fontstyle_from_descriptor
(
desc
.
get
(
)
isLocalStream
)
;
CTFontSymbolicTraits
traits
=
CTFontGetSymbolicTraits
(
font
.
get
(
)
)
;
bool
isFixedPitch
=
SkToBool
(
traits
&
kCTFontMonoSpaceTrait
)
;
SkTypeface
*
face
=
new
SkTypeface_Mac
(
std
:
:
move
(
font
)
std
:
:
move
(
resource
)
style
isFixedPitch
isLocalStream
)
;
if
(
!
isLocalStream
)
{
SkTypefaceCache
:
:
Add
(
face
)
;
}
return
sk_sp
<
SkTypeface
>
(
face
)
;
}
static
sk_sp
<
SkTypeface
>
create_from_desc
(
CTFontDescriptorRef
desc
)
{
SkUniqueCFRef
<
CTFontRef
>
ctFont
(
CTFontCreateWithFontDescriptor
(
desc
0
nullptr
)
)
;
if
(
!
ctFont
)
{
return
nullptr
;
}
return
create_from_CTFontRef
(
std
:
:
move
(
ctFont
)
nullptr
false
)
;
}
static
SkUniqueCFRef
<
CTFontDescriptorRef
>
create_descriptor
(
const
char
familyName
[
]
const
SkFontStyle
&
style
)
{
SkUniqueCFRef
<
CFMutableDictionaryRef
>
cfAttributes
(
CFDictionaryCreateMutable
(
kCFAllocatorDefault
0
&
kCFTypeDictionaryKeyCallBacks
&
kCFTypeDictionaryValueCallBacks
)
)
;
SkUniqueCFRef
<
CFMutableDictionaryRef
>
cfTraits
(
CFDictionaryCreateMutable
(
kCFAllocatorDefault
0
&
kCFTypeDictionaryKeyCallBacks
&
kCFTypeDictionaryValueCallBacks
)
)
;
if
(
!
cfAttributes
|
|
!
cfTraits
)
{
return
nullptr
;
}
CGFloat
ctWeight
=
fontstyle_to_ct_weight
(
style
.
weight
(
)
)
;
SkUniqueCFRef
<
CFNumberRef
>
cfFontWeight
(
CFNumberCreate
(
kCFAllocatorDefault
kCFNumberCGFloatType
&
ctWeight
)
)
;
if
(
cfFontWeight
)
{
CFDictionaryAddValue
(
cfTraits
.
get
(
)
kCTFontWeightTrait
cfFontWeight
.
get
(
)
)
;
}
CGFloat
ctWidth
=
fontstyle_to_ct_width
(
style
.
weight
(
)
)
;
SkUniqueCFRef
<
CFNumberRef
>
cfFontWidth
(
CFNumberCreate
(
kCFAllocatorDefault
kCFNumberCGFloatType
&
ctWidth
)
)
;
if
(
cfFontWidth
)
{
CFDictionaryAddValue
(
cfTraits
.
get
(
)
kCTFontWidthTrait
cfFontWidth
.
get
(
)
)
;
}
CGFloat
ctSlant
=
style
.
slant
(
)
=
=
SkFontStyle
:
:
kUpright_Slant
?
0
:
1
;
SkUniqueCFRef
<
CFNumberRef
>
cfFontSlant
(
CFNumberCreate
(
kCFAllocatorDefault
kCFNumberCGFloatType
&
ctSlant
)
)
;
if
(
cfFontSlant
)
{
CFDictionaryAddValue
(
cfTraits
.
get
(
)
kCTFontSlantTrait
cfFontSlant
.
get
(
)
)
;
}
CFDictionaryAddValue
(
cfAttributes
.
get
(
)
kCTFontTraitsAttribute
cfTraits
.
get
(
)
)
;
if
(
familyName
)
{
SkUniqueCFRef
<
CFStringRef
>
cfFontName
=
make_CFString
(
familyName
)
;
if
(
cfFontName
)
{
CFDictionaryAddValue
(
cfAttributes
.
get
(
)
kCTFontFamilyNameAttribute
cfFontName
.
get
(
)
)
;
}
}
return
SkUniqueCFRef
<
CTFontDescriptorRef
>
(
CTFontDescriptorCreateWithAttributes
(
cfAttributes
.
get
(
)
)
)
;
}
static
sk_sp
<
SkTypeface
>
create_from_name
(
const
char
familyName
[
]
const
SkFontStyle
&
style
)
{
SkUniqueCFRef
<
CTFontDescriptorRef
>
desc
=
create_descriptor
(
familyName
style
)
;
if
(
!
desc
)
{
return
nullptr
;
}
return
create_from_desc
(
desc
.
get
(
)
)
;
}
SkTypeface
*
SkCreateTypefaceFromCTFont
(
CTFontRef
font
CFTypeRef
resource
)
{
CFRetain
(
font
)
;
if
(
resource
)
{
CFRetain
(
resource
)
;
}
return
create_from_CTFontRef
(
SkUniqueCFRef
<
CTFontRef
>
(
font
)
SkUniqueCFRef
<
CFTypeRef
>
(
resource
)
false
)
.
release
(
)
;
}
static
const
char
*
map_css_names
(
const
char
*
name
)
{
static
const
struct
{
const
char
*
fFrom
;
const
char
*
fTo
;
}
gPairs
[
]
=
{
{
"
sans
-
serif
"
"
Helvetica
"
}
{
"
serif
"
"
Times
"
}
{
"
monospace
"
"
Courier
"
}
}
;
for
(
size_t
i
=
0
;
i
<
SK_ARRAY_COUNT
(
gPairs
)
;
i
+
+
)
{
if
(
strcmp
(
name
gPairs
[
i
]
.
fFrom
)
=
=
0
)
{
return
gPairs
[
i
]
.
fTo
;
}
}
return
name
;
}
class
SkScalerContext_Mac
:
public
SkScalerContext
{
public
:
SkScalerContext_Mac
(
sk_sp
<
SkTypeface_Mac
>
const
SkScalerContextEffects
&
const
SkDescriptor
*
)
;
protected
:
unsigned
generateGlyphCount
(
void
)
override
;
uint16_t
generateCharToGlyph
(
SkUnichar
uni
)
override
;
bool
generateAdvance
(
SkGlyph
*
glyph
)
override
;
void
generateMetrics
(
SkGlyph
*
glyph
)
override
;
void
generateImage
(
const
SkGlyph
&
glyph
)
override
;
bool
generatePath
(
SkGlyphID
glyph
SkPath
*
path
)
override
;
void
generateFontMetrics
(
SkPaint
:
:
FontMetrics
*
)
override
;
private
:
static
void
CTPathElement
(
void
*
info
const
CGPathElement
*
element
)
;
void
getVerticalOffset
(
CGGlyph
glyphID
SkPoint
*
offset
)
const
;
Offscreen
fOffscreen
;
SkUniqueCFRef
<
CTFontRef
>
fCTFont
;
CGAffineTransform
fTransform
;
CGAffineTransform
fInvTransform
;
SkUniqueCFRef
<
CGFontRef
>
fCGFont
;
uint16_t
fGlyphCount
;
const
bool
fDoSubPosition
;
const
bool
fVertical
;
friend
class
Offscreen
;
typedef
SkScalerContext
INHERITED
;
}
;
#
ifdef
MOZ_SKIA
extern
"
C
"
bool
Gecko_OnSierraExactly
(
)
;
extern
"
C
"
bool
Gecko_OnHighSierraOrLater
(
)
;
#
endif
static
SkUniqueCFRef
<
CTFontRef
>
ctfont_create_exact_copy
(
CTFontRef
baseFont
CGFloat
textSize
const
CGAffineTransform
*
transform
)
{
SkUniqueCFRef
<
CGFontRef
>
baseCGFont
(
CTFontCopyGraphicsFont
(
baseFont
nullptr
)
)
;
#
ifdef
MOZ_SKIA
auto
IsInstalledFont
=
[
]
(
CTFontRef
aFont
)
{
CTFontDescriptorRef
desc
=
CTFontCopyFontDescriptor
(
aFont
)
;
CFTypeRef
attr
=
CTFontDescriptorCopyAttribute
(
desc
kCTFontURLAttribute
)
;
CFRelease
(
desc
)
;
bool
result
=
false
;
if
(
attr
)
{
result
=
true
;
CFRelease
(
attr
)
;
}
return
result
;
}
;
if
(
Gecko_OnSierraExactly
(
)
|
|
(
Gecko_OnHighSierraOrLater
(
)
&
&
IsInstalledFont
(
baseFont
)
)
)
#
endif
{
CFDictionaryRef
variations
=
CGFontCopyVariations
(
baseCGFont
.
get
(
)
)
;
if
(
variations
)
{
SkUniqueCFRef
<
CFDictionaryRef
>
varAttr
(
CFDictionaryCreate
(
nullptr
(
const
void
*
*
)
&
kCTFontVariationAttribute
(
const
void
*
*
)
&
variations
1
&
kCFTypeDictionaryKeyCallBacks
&
kCFTypeDictionaryValueCallBacks
)
)
;
CFRelease
(
variations
)
;
SkUniqueCFRef
<
CTFontDescriptorRef
>
varDesc
(
CTFontDescriptorCreateWithAttributes
(
varAttr
.
get
(
)
)
)
;
return
SkUniqueCFRef
<
CTFontRef
>
(
CTFontCreateWithGraphicsFont
(
baseCGFont
.
get
(
)
textSize
transform
varDesc
.
get
(
)
)
)
;
}
}
return
SkUniqueCFRef
<
CTFontRef
>
(
CTFontCreateWithGraphicsFont
(
baseCGFont
.
get
(
)
textSize
transform
nullptr
)
)
;
}
SkScalerContext_Mac
:
:
SkScalerContext_Mac
(
sk_sp
<
SkTypeface_Mac
>
typeface
const
SkScalerContextEffects
&
effects
const
SkDescriptor
*
desc
)
:
INHERITED
(
std
:
:
move
(
typeface
)
effects
desc
)
fDoSubPosition
(
SkToBool
(
fRec
.
fFlags
&
kSubpixelPositioning_Flag
)
)
fVertical
(
SkToBool
(
fRec
.
fFlags
&
kVertical_Flag
)
)
{
AUTO_CG_LOCK
(
)
;
CTFontRef
ctFont
=
(
CTFontRef
)
this
-
>
getTypeface
(
)
-
>
internal_private_getCTFontRef
(
)
;
CFIndex
numGlyphs
=
CTFontGetGlyphCount
(
ctFont
)
;
SkASSERT
(
numGlyphs
>
=
1
&
&
numGlyphs
<
=
0xFFFF
)
;
fGlyphCount
=
SkToU16
(
numGlyphs
)
;
SkVector
scale
;
SkMatrix
skTransform
;
bool
invertible
=
fRec
.
computeMatrices
(
SkScalerContextRec
:
:
kVertical_PreMatrixScale
&
scale
&
skTransform
nullptr
nullptr
nullptr
)
;
fTransform
=
MatrixToCGAffineTransform
(
skTransform
)
;
if
(
invertible
)
{
fInvTransform
=
CGAffineTransformInvert
(
fTransform
)
;
}
else
{
fInvTransform
=
fTransform
;
}
CGFloat
textSize
=
ScalarToCG
(
scale
.
y
(
)
)
;
fCTFont
=
ctfont_create_exact_copy
(
ctFont
textSize
nullptr
)
;
fCGFont
.
reset
(
CTFontCopyGraphicsFont
(
fCTFont
.
get
(
)
nullptr
)
)
;
}
CGRGBPixel
*
Offscreen
:
:
getCG
(
const
SkScalerContext_Mac
&
context
const
SkGlyph
&
glyph
CGGlyph
glyphID
size_t
*
rowBytesPtr
bool
generateA8FromLCD
)
{
if
(
!
fRGBSpace
)
{
fRGBSpace
.
reset
(
CGColorSpaceCreateDeviceRGB
(
)
)
;
}
bool
doAA
=
false
;
bool
doLCD
=
false
;
if
(
SkMask
:
:
kBW_Format
!
=
glyph
.
fMaskFormat
)
{
doLCD
=
true
;
doAA
=
true
;
}
if
(
!
generateA8FromLCD
&
&
SkMask
:
:
kA8_Format
=
=
glyph
.
fMaskFormat
)
{
doLCD
=
false
;
doAA
=
true
;
}
if
(
SkMask
:
:
kARGB32_Format
=
=
glyph
.
fMaskFormat
)
{
doLCD
=
false
;
}
size_t
rowBytes
=
fSize
.
fWidth
*
sizeof
(
CGRGBPixel
)
;
if
(
!
fCG
|
|
fSize
.
fWidth
<
glyph
.
fWidth
|
|
fSize
.
fHeight
<
glyph
.
fHeight
)
{
if
(
fSize
.
fWidth
<
glyph
.
fWidth
)
{
fSize
.
fWidth
=
RoundSize
(
glyph
.
fWidth
)
;
}
if
(
fSize
.
fHeight
<
glyph
.
fHeight
)
{
fSize
.
fHeight
=
RoundSize
(
glyph
.
fHeight
)
;
}
rowBytes
=
fSize
.
fWidth
*
sizeof
(
CGRGBPixel
)
;
void
*
image
=
fImageStorage
.
reset
(
rowBytes
*
fSize
.
fHeight
)
;
const
CGImageAlphaInfo
alpha
=
(
SkMask
:
:
kARGB32_Format
=
=
glyph
.
fMaskFormat
)
?
kCGImageAlphaPremultipliedFirst
:
kCGImageAlphaNoneSkipFirst
;
const
CGBitmapInfo
bitmapInfo
=
kCGBitmapByteOrder32Host
|
alpha
;
fCG
.
reset
(
CGBitmapContextCreate
(
image
fSize
.
fWidth
fSize
.
fHeight
8
rowBytes
fRGBSpace
.
get
(
)
bitmapInfo
)
)
;
CGContextSetAllowsFontSubpixelQuantization
(
fCG
.
get
(
)
false
)
;
CGContextSetShouldSubpixelQuantizeFonts
(
fCG
.
get
(
)
false
)
;
CGContextSetAllowsFontSubpixelPositioning
(
fCG
.
get
(
)
true
)
;
CGContextSetShouldSubpixelPositionFonts
(
fCG
.
get
(
)
true
)
;
CGContextSetTextDrawingMode
(
fCG
.
get
(
)
kCGTextFill
)
;
CGContextSetGrayFillColor
(
fCG
.
get
(
)
0
.
0f
1
.
0f
)
;
fDoAA
=
!
doAA
;
fDoLCD
=
!
doLCD
;
CGContextSetTextMatrix
(
fCG
.
get
(
)
context
.
fTransform
)
;
}
if
(
fDoAA
!
=
doAA
)
{
CGContextSetShouldAntialias
(
fCG
.
get
(
)
doAA
)
;
fDoAA
=
doAA
;
}
if
(
fDoLCD
!
=
doLCD
)
{
CGContextSetShouldSmoothFonts
(
fCG
.
get
(
)
doLCD
)
;
fDoLCD
=
doLCD
;
}
CGRGBPixel
*
image
=
(
CGRGBPixel
*
)
fImageStorage
.
get
(
)
;
image
+
=
(
fSize
.
fHeight
-
glyph
.
fHeight
)
*
fSize
.
fWidth
;
uint32_t
bgColor
=
(
SkMask
:
:
kARGB32_Format
!
=
glyph
.
fMaskFormat
)
?
0xFFFFFFFF
:
0x00000000
;
sk_memset_rect32
(
image
bgColor
glyph
.
fWidth
glyph
.
fHeight
rowBytes
)
;
float
subX
=
0
;
float
subY
=
0
;
if
(
context
.
fDoSubPosition
)
{
subX
=
SkFixedToFloat
(
glyph
.
getSubXFixed
(
)
)
;
subY
=
SkFixedToFloat
(
glyph
.
getSubYFixed
(
)
)
;
}
if
(
context
.
fVertical
)
{
SkPoint
offset
;
context
.
getVerticalOffset
(
glyphID
&
offset
)
;
subX
+
=
offset
.
fX
;
subY
+
=
offset
.
fY
;
}
CGPoint
point
=
CGPointMake
(
-
glyph
.
fLeft
+
subX
glyph
.
fTop
+
glyph
.
fHeight
-
subY
)
;
point
=
CGPointApplyAffineTransform
(
point
context
.
fInvTransform
)
;
CTFontDrawGlyphs
(
context
.
fCTFont
.
get
(
)
&
glyphID
&
point
1
fCG
.
get
(
)
)
;
SkASSERT
(
rowBytesPtr
)
;
*
rowBytesPtr
=
rowBytes
;
return
image
;
}
void
SkScalerContext_Mac
:
:
getVerticalOffset
(
CGGlyph
glyphID
SkPoint
*
offset
)
const
{
CGSize
cgVertOffset
;
CTFontGetVerticalTranslationsForGlyphs
(
fCTFont
.
get
(
)
&
glyphID
&
cgVertOffset
1
)
;
cgVertOffset
=
CGSizeApplyAffineTransform
(
cgVertOffset
fTransform
)
;
SkPoint
skVertOffset
=
{
CGToScalar
(
cgVertOffset
.
width
)
CGToScalar
(
cgVertOffset
.
height
)
}
;
skVertOffset
.
fY
=
-
skVertOffset
.
fY
;
*
offset
=
skVertOffset
;
}
unsigned
SkScalerContext_Mac
:
:
generateGlyphCount
(
void
)
{
return
fGlyphCount
;
}
uint16_t
SkScalerContext_Mac
:
:
generateCharToGlyph
(
SkUnichar
uni
)
{
AUTO_CG_LOCK
(
)
;
CGGlyph
cgGlyph
[
2
]
;
UniChar
theChar
[
2
]
;
size_t
numUniChar
=
SkUTF
:
:
ToUTF16
(
uni
theChar
)
;
SkASSERT
(
sizeof
(
CGGlyph
)
<
=
sizeof
(
uint16_t
)
)
;
CTFontGetGlyphsForCharacters
(
fCTFont
.
get
(
)
theChar
cgGlyph
numUniChar
)
;
return
cgGlyph
[
0
]
;
}
bool
SkScalerContext_Mac
:
:
generateAdvance
(
SkGlyph
*
glyph
)
{
return
false
;
}
void
SkScalerContext_Mac
:
:
generateMetrics
(
SkGlyph
*
glyph
)
{
AUTO_CG_LOCK
(
)
;
glyph
-
>
fMaskFormat
=
fRec
.
fMaskFormat
;
const
CGGlyph
cgGlyph
=
(
CGGlyph
)
glyph
-
>
getGlyphID
(
)
;
glyph
-
>
zeroMetrics
(
)
;
CGSize
cgAdvance
;
if
(
fVertical
)
{
CTFontGetAdvancesForGlyphs
(
fCTFont
.
get
(
)
kCTFontOrientationVertical
&
cgGlyph
&
cgAdvance
1
)
;
using
std
:
:
swap
;
swap
(
cgAdvance
.
height
cgAdvance
.
width
)
;
cgAdvance
.
height
=
-
cgAdvance
.
height
;
}
else
{
CTFontGetAdvancesForGlyphs
(
fCTFont
.
get
(
)
kCTFontOrientationHorizontal
&
cgGlyph
&
cgAdvance
1
)
;
}
cgAdvance
=
CGSizeApplyAffineTransform
(
cgAdvance
fTransform
)
;
glyph
-
>
fAdvanceX
=
CGToFloat
(
cgAdvance
.
width
)
;
glyph
-
>
fAdvanceY
=
-
CGToFloat
(
cgAdvance
.
height
)
;
SkRect
skBounds
;
{
CGRect
cgBounds
;
CTFontGetBoundingRectsForGlyphs
(
fCTFont
.
get
(
)
kCTFontOrientationHorizontal
&
cgGlyph
&
cgBounds
1
)
;
cgBounds
=
CGRectApplyAffineTransform
(
cgBounds
fTransform
)
;
if
(
0
=
=
cgAdvance
.
width
&
&
0
=
=
cgAdvance
.
height
)
{
SkUniqueCFRef
<
CGPathRef
>
path
(
CTFontCreatePathForGlyph
(
fCTFont
.
get
(
)
cgGlyph
nullptr
)
)
;
if
(
!
path
|
|
CGPathIsEmpty
(
path
.
get
(
)
)
)
{
return
;
}
}
if
(
CGRectIsEmpty_inline
(
cgBounds
)
)
{
return
;
}
skBounds
=
SkRect
:
:
MakeXYWH
(
cgBounds
.
origin
.
x
-
cgBounds
.
origin
.
y
-
cgBounds
.
size
.
height
cgBounds
.
size
.
width
cgBounds
.
size
.
height
)
;
}
if
(
fVertical
)
{
SkPoint
offset
;
this
-
>
getVerticalOffset
(
cgGlyph
&
offset
)
;
skBounds
.
offset
(
offset
)
;
}
if
(
fDoSubPosition
)
{
skBounds
.
fRight
+
=
SkFixedToFloat
(
glyph
-
>
getSubXFixed
(
)
)
;
skBounds
.
fBottom
+
=
SkFixedToFloat
(
glyph
-
>
getSubYFixed
(
)
)
;
}
if
(
!
SkRect
:
:
MakeXYWH
(
-
32767
-
32767
65535
65535
)
.
contains
(
skBounds
)
)
{
return
;
}
SkIRect
skIBounds
;
skBounds
.
roundOut
(
&
skIBounds
)
;
skIBounds
.
outset
(
1
1
)
;
glyph
-
>
fLeft
=
SkToS16
(
skIBounds
.
fLeft
)
;
glyph
-
>
fTop
=
SkToS16
(
skIBounds
.
fTop
)
;
glyph
-
>
fWidth
=
SkToU16
(
skIBounds
.
width
(
)
)
;
glyph
-
>
fHeight
=
SkToU16
(
skIBounds
.
height
(
)
)
;
}
#
include
"
SkColorData
.
h
"
static
constexpr
uint8_t
sk_pow2_table
(
size_t
i
)
{
return
SkToU8
(
(
(
i
*
i
+
128
)
/
255
)
)
;
}
static
constexpr
auto
gLinearCoverageFromCGLCDValue
=
SkMakeArray
<
256
>
(
sk_pow2_table
)
;
static
void
cgpixels_to_bits
(
uint8_t
dst
[
]
const
CGRGBPixel
src
[
]
int
count
)
{
while
(
count
>
0
)
{
uint8_t
mask
=
0
;
for
(
int
i
=
7
;
i
>
=
0
;
-
-
i
)
{
mask
|
=
(
(
CGRGBPixel_getAlpha
(
*
src
+
+
)
>
>
7
)
^
0x1
)
<
<
i
;
if
(
0
=
=
-
-
count
)
{
break
;
}
}
*
dst
+
+
=
mask
;
}
}
template
<
bool
APPLY_PREBLEND
>
static
inline
uint8_t
rgb_to_a8
(
CGRGBPixel
rgb
const
uint8_t
*
table8
)
{
U8CPU
r
=
0xFF
-
(
(
rgb
>
>
16
)
&
0xFF
)
;
U8CPU
g
=
0xFF
-
(
(
rgb
>
>
8
)
&
0xFF
)
;
U8CPU
b
=
0xFF
-
(
(
rgb
>
>
0
)
&
0xFF
)
;
U8CPU
lum
=
sk_apply_lut_if
<
APPLY_PREBLEND
>
(
SkComputeLuminance
(
r
g
b
)
table8
)
;
#
if
SK_SHOW_TEXT_BLIT_COVERAGE
lum
=
SkTMax
(
lum
(
U8CPU
)
0x30
)
;
#
endif
return
lum
;
}
template
<
bool
APPLY_PREBLEND
>
static
void
rgb_to_a8
(
const
CGRGBPixel
*
SK_RESTRICT
cgPixels
size_t
cgRowBytes
const
SkGlyph
&
glyph
const
uint8_t
*
table8
)
{
const
int
width
=
glyph
.
fWidth
;
size_t
dstRB
=
glyph
.
rowBytes
(
)
;
uint8_t
*
SK_RESTRICT
dst
=
(
uint8_t
*
)
glyph
.
fImage
;
for
(
int
y
=
0
;
y
<
glyph
.
fHeight
;
y
+
+
)
{
for
(
int
i
=
0
;
i
<
width
;
+
+
i
)
{
dst
[
i
]
=
rgb_to_a8
<
APPLY_PREBLEND
>
(
cgPixels
[
i
]
table8
)
;
}
cgPixels
=
SkTAddOffset
<
const
CGRGBPixel
>
(
cgPixels
cgRowBytes
)
;
dst
=
SkTAddOffset
<
uint8_t
>
(
dst
dstRB
)
;
}
}
template
<
bool
APPLY_PREBLEND
>
static
inline
uint16_t
rgb_to_lcd16
(
CGRGBPixel
rgb
const
uint8_t
*
tableR
const
uint8_t
*
tableG
const
uint8_t
*
tableB
)
{
U8CPU
r
=
sk_apply_lut_if
<
APPLY_PREBLEND
>
(
0xFF
-
(
(
rgb
>
>
16
)
&
0xFF
)
tableR
)
;
U8CPU
g
=
sk_apply_lut_if
<
APPLY_PREBLEND
>
(
0xFF
-
(
(
rgb
>
>
8
)
&
0xFF
)
tableG
)
;
U8CPU
b
=
sk_apply_lut_if
<
APPLY_PREBLEND
>
(
0xFF
-
(
(
rgb
>
>
0
)
&
0xFF
)
tableB
)
;
#
if
SK_SHOW_TEXT_BLIT_COVERAGE
r
=
SkTMax
(
r
(
U8CPU
)
0x30
)
;
g
=
SkTMax
(
g
(
U8CPU
)
0x30
)
;
b
=
SkTMax
(
b
(
U8CPU
)
0x30
)
;
#
endif
return
SkPack888ToRGB16
(
r
g
b
)
;
}
template
<
bool
APPLY_PREBLEND
>
static
void
rgb_to_lcd16
(
const
CGRGBPixel
*
SK_RESTRICT
cgPixels
size_t
cgRowBytes
const
SkGlyph
&
glyph
const
uint8_t
*
tableR
const
uint8_t
*
tableG
const
uint8_t
*
tableB
)
{
const
int
width
=
glyph
.
fWidth
;
size_t
dstRB
=
glyph
.
rowBytes
(
)
;
uint16_t
*
SK_RESTRICT
dst
=
(
uint16_t
*
)
glyph
.
fImage
;
for
(
int
y
=
0
;
y
<
glyph
.
fHeight
;
y
+
+
)
{
for
(
int
i
=
0
;
i
<
width
;
i
+
+
)
{
dst
[
i
]
=
rgb_to_lcd16
<
APPLY_PREBLEND
>
(
cgPixels
[
i
]
tableR
tableG
tableB
)
;
}
cgPixels
=
SkTAddOffset
<
const
CGRGBPixel
>
(
cgPixels
cgRowBytes
)
;
dst
=
SkTAddOffset
<
uint16_t
>
(
dst
dstRB
)
;
}
}
static
SkPMColor
cgpixels_to_pmcolor
(
CGRGBPixel
rgb
)
{
U8CPU
a
=
(
rgb
>
>
24
)
&
0xFF
;
U8CPU
r
=
(
rgb
>
>
16
)
&
0xFF
;
U8CPU
g
=
(
rgb
>
>
8
)
&
0xFF
;
U8CPU
b
=
(
rgb
>
>
0
)
&
0xFF
;
#
if
SK_SHOW_TEXT_BLIT_COVERAGE
a
=
SkTMax
(
a
(
U8CPU
)
0x30
)
;
#
endif
return
SkPackARGB32
(
a
r
g
b
)
;
}
void
SkScalerContext_Mac
:
:
generateImage
(
const
SkGlyph
&
glyph
)
{
CGGlyph
cgGlyph
=
SkTo
<
CGGlyph
>
(
glyph
.
getGlyphID
(
)
)
;
bool
requestSmooth
=
fRec
.
getHinting
(
)
!
=
SkPaint
:
:
kNo_Hinting
;
size_t
cgRowBytes
;
CGRGBPixel
*
cgPixels
=
fOffscreen
.
getCG
(
*
this
glyph
cgGlyph
&
cgRowBytes
requestSmooth
)
;
if
(
cgPixels
=
=
nullptr
)
{
return
;
}
if
(
(
glyph
.
fMaskFormat
=
=
SkMask
:
:
kLCD16_Format
)
|
|
(
glyph
.
fMaskFormat
=
=
SkMask
:
:
kA8_Format
&
&
requestSmooth
&
&
smooth_behavior
(
)
=
=
SmoothBehavior
:
:
subpixel
)
)
{
const
uint8_t
*
linear
=
gLinearCoverageFromCGLCDValue
.
data
(
)
;
CGRGBPixel
*
addr
=
cgPixels
;
for
(
int
y
=
0
;
y
<
glyph
.
fHeight
;
+
+
y
)
{
for
(
int
x
=
0
;
x
<
glyph
.
fWidth
;
+
+
x
)
{
int
r
=
(
addr
[
x
]
>
>
16
)
&
0xFF
;
int
g
=
(
addr
[
x
]
>
>
8
)
&
0xFF
;
int
b
=
(
addr
[
x
]
>
>
0
)
&
0xFF
;
addr
[
x
]
=
(
linear
[
r
]
<
<
16
)
|
(
linear
[
g
]
<
<
8
)
|
linear
[
b
]
;
}
addr
=
SkTAddOffset
<
CGRGBPixel
>
(
addr
cgRowBytes
)
;
}
}
switch
(
glyph
.
fMaskFormat
)
{
case
SkMask
:
:
kLCD16_Format
:
{
if
(
fPreBlend
.
isApplicable
(
)
)
{
rgb_to_lcd16
<
true
>
(
cgPixels
cgRowBytes
glyph
fPreBlend
.
fR
fPreBlend
.
fG
fPreBlend
.
fB
)
;
}
else
{
rgb_to_lcd16
<
false
>
(
cgPixels
cgRowBytes
glyph
fPreBlend
.
fR
fPreBlend
.
fG
fPreBlend
.
fB
)
;
}
}
break
;
case
SkMask
:
:
kA8_Format
:
{
if
(
fPreBlend
.
isApplicable
(
)
)
{
rgb_to_a8
<
true
>
(
cgPixels
cgRowBytes
glyph
fPreBlend
.
fG
)
;
}
else
{
rgb_to_a8
<
false
>
(
cgPixels
cgRowBytes
glyph
fPreBlend
.
fG
)
;
}
}
break
;
case
SkMask
:
:
kBW_Format
:
{
const
int
width
=
glyph
.
fWidth
;
size_t
dstRB
=
glyph
.
rowBytes
(
)
;
uint8_t
*
dst
=
(
uint8_t
*
)
glyph
.
fImage
;
for
(
int
y
=
0
;
y
<
glyph
.
fHeight
;
y
+
+
)
{
cgpixels_to_bits
(
dst
cgPixels
width
)
;
cgPixels
=
SkTAddOffset
<
CGRGBPixel
>
(
cgPixels
cgRowBytes
)
;
dst
=
SkTAddOffset
<
uint8_t
>
(
dst
dstRB
)
;
}
}
break
;
case
SkMask
:
:
kARGB32_Format
:
{
const
int
width
=
glyph
.
fWidth
;
size_t
dstRB
=
glyph
.
rowBytes
(
)
;
SkPMColor
*
dst
=
(
SkPMColor
*
)
glyph
.
fImage
;
for
(
int
y
=
0
;
y
<
glyph
.
fHeight
;
y
+
+
)
{
for
(
int
x
=
0
;
x
<
width
;
+
+
x
)
{
dst
[
x
]
=
cgpixels_to_pmcolor
(
cgPixels
[
x
]
)
;
}
cgPixels
=
SkTAddOffset
<
CGRGBPixel
>
(
cgPixels
cgRowBytes
)
;
dst
=
SkTAddOffset
<
SkPMColor
>
(
dst
dstRB
)
;
}
}
break
;
default
:
SkDEBUGFAIL
(
"
unexpected
mask
format
"
)
;
break
;
}
}
#
define
kScaleForSubPixelPositionHinting
(
4
.
0f
)
bool
SkScalerContext_Mac
:
:
generatePath
(
SkGlyphID
glyph
SkPath
*
path
)
{
AUTO_CG_LOCK
(
)
;
SkScalar
scaleX
=
SK_Scalar1
;
SkScalar
scaleY
=
SK_Scalar1
;
CGAffineTransform
xform
=
fTransform
;
if
(
fDoSubPosition
)
{
scaleX
=
scaleY
=
kScaleForSubPixelPositionHinting
;
switch
(
this
-
>
computeAxisAlignmentForHText
(
)
)
{
case
kX_SkAxisAlignment
:
scaleY
=
SK_Scalar1
;
break
;
case
kY_SkAxisAlignment
:
scaleX
=
SK_Scalar1
;
break
;
default
:
break
;
}
CGAffineTransform
scale
(
CGAffineTransformMakeScale
(
ScalarToCG
(
scaleX
)
ScalarToCG
(
scaleY
)
)
)
;
xform
=
CGAffineTransformConcat
(
fTransform
scale
)
;
}
CGGlyph
cgGlyph
=
SkTo
<
CGGlyph
>
(
glyph
)
;
SkUniqueCFRef
<
CGPathRef
>
cgPath
(
CTFontCreatePathForGlyph
(
fCTFont
.
get
(
)
cgGlyph
&
xform
)
)
;
path
-
>
reset
(
)
;
if
(
!
cgPath
)
{
return
false
;
}
CGPathApply
(
cgPath
.
get
(
)
path
SkScalerContext_Mac
:
:
CTPathElement
)
;
if
(
fDoSubPosition
)
{
SkMatrix
m
;
m
.
setScale
(
SkScalarInvert
(
scaleX
)
SkScalarInvert
(
scaleY
)
)
;
path
-
>
transform
(
m
)
;
}
if
(
fVertical
)
{
SkPoint
offset
;
getVerticalOffset
(
cgGlyph
&
offset
)
;
path
-
>
offset
(
offset
.
fX
offset
.
fY
)
;
}
return
true
;
}
void
SkScalerContext_Mac
:
:
generateFontMetrics
(
SkPaint
:
:
FontMetrics
*
metrics
)
{
if
(
nullptr
=
=
metrics
)
{
return
;
}
AUTO_CG_LOCK
(
)
;
CGRect
theBounds
=
CTFontGetBoundingBox
(
fCTFont
.
get
(
)
)
;
metrics
-
>
fTop
=
CGToScalar
(
-
CGRectGetMaxY_inline
(
theBounds
)
)
;
metrics
-
>
fAscent
=
CGToScalar
(
-
CTFontGetAscent
(
fCTFont
.
get
(
)
)
)
;
metrics
-
>
fDescent
=
CGToScalar
(
CTFontGetDescent
(
fCTFont
.
get
(
)
)
)
;
metrics
-
>
fBottom
=
CGToScalar
(
-
CGRectGetMinY_inline
(
theBounds
)
)
;
metrics
-
>
fLeading
=
CGToScalar
(
CTFontGetLeading
(
fCTFont
.
get
(
)
)
)
;
metrics
-
>
fAvgCharWidth
=
CGToScalar
(
CGRectGetWidth_inline
(
theBounds
)
)
;
metrics
-
>
fXMin
=
CGToScalar
(
CGRectGetMinX_inline
(
theBounds
)
)
;
metrics
-
>
fXMax
=
CGToScalar
(
CGRectGetMaxX_inline
(
theBounds
)
)
;
metrics
-
>
fMaxCharWidth
=
metrics
-
>
fXMax
-
metrics
-
>
fXMin
;
metrics
-
>
fXHeight
=
CGToScalar
(
CTFontGetXHeight
(
fCTFont
.
get
(
)
)
)
;
metrics
-
>
fCapHeight
=
CGToScalar
(
CTFontGetCapHeight
(
fCTFont
.
get
(
)
)
)
;
metrics
-
>
fUnderlineThickness
=
CGToScalar
(
CTFontGetUnderlineThickness
(
fCTFont
.
get
(
)
)
)
;
metrics
-
>
fUnderlinePosition
=
-
CGToScalar
(
CTFontGetUnderlinePosition
(
fCTFont
.
get
(
)
)
)
;
metrics
-
>
fFlags
=
0
;
metrics
-
>
fFlags
|
=
SkPaint
:
:
FontMetrics
:
:
kUnderlineThicknessIsValid_Flag
;
metrics
-
>
fFlags
|
=
SkPaint
:
:
FontMetrics
:
:
kUnderlinePositionIsValid_Flag
;
struct
OS2HeightMetrics
{
SK_OT_SHORT
sxHeight
;
SK_OT_SHORT
sCapHeight
;
}
heights
;
size_t
bytesRead
=
this
-
>
getTypeface
(
)
-
>
getTableData
(
SkTEndian_SwapBE32
(
SkOTTableOS2
:
:
TAG
)
offsetof
(
SkOTTableOS2
version
.
v2
.
sxHeight
)
sizeof
(
heights
)
&
heights
)
;
if
(
bytesRead
=
=
sizeof
(
heights
)
)
{
CGFloat
fontSize
=
CTFontGetSize
(
this
-
>
fCTFont
.
get
(
)
)
;
unsigned
upem
=
CTFontGetUnitsPerEm
(
this
-
>
fCTFont
.
get
(
)
)
;
unsigned
maxSaneHeight
=
upem
*
2
;
uint16_t
xHeight
=
SkEndian_SwapBE16
(
heights
.
sxHeight
)
;
if
(
xHeight
&
&
xHeight
<
maxSaneHeight
)
{
metrics
-
>
fXHeight
=
CGToScalar
(
xHeight
*
fontSize
/
upem
)
;
}
uint16_t
capHeight
=
SkEndian_SwapBE16
(
heights
.
sCapHeight
)
;
if
(
capHeight
&
&
capHeight
<
maxSaneHeight
)
{
metrics
-
>
fCapHeight
=
CGToScalar
(
capHeight
*
fontSize
/
upem
)
;
}
}
}
void
SkScalerContext_Mac
:
:
CTPathElement
(
void
*
info
const
CGPathElement
*
element
)
{
SkPath
*
skPath
=
(
SkPath
*
)
info
;
switch
(
element
-
>
type
)
{
case
kCGPathElementMoveToPoint
:
skPath
-
>
moveTo
(
element
-
>
points
[
0
]
.
x
-
element
-
>
points
[
0
]
.
y
)
;
break
;
case
kCGPathElementAddLineToPoint
:
skPath
-
>
lineTo
(
element
-
>
points
[
0
]
.
x
-
element
-
>
points
[
0
]
.
y
)
;
break
;
case
kCGPathElementAddQuadCurveToPoint
:
skPath
-
>
quadTo
(
element
-
>
points
[
0
]
.
x
-
element
-
>
points
[
0
]
.
y
element
-
>
points
[
1
]
.
x
-
element
-
>
points
[
1
]
.
y
)
;
break
;
case
kCGPathElementAddCurveToPoint
:
skPath
-
>
cubicTo
(
element
-
>
points
[
0
]
.
x
-
element
-
>
points
[
0
]
.
y
element
-
>
points
[
1
]
.
x
-
element
-
>
points
[
1
]
.
y
element
-
>
points
[
2
]
.
x
-
element
-
>
points
[
2
]
.
y
)
;
break
;
case
kCGPathElementCloseSubpath
:
skPath
-
>
close
(
)
;
break
;
default
:
SkDEBUGFAIL
(
"
Unknown
path
element
!
"
)
;
break
;
}
}
static
sk_sp
<
SkTypeface
>
create_from_dataProvider
(
SkUniqueCFRef
<
CGDataProviderRef
>
provider
int
ttcIndex
)
{
if
(
ttcIndex
!
=
0
)
{
return
nullptr
;
}
SkUniqueCFRef
<
CGFontRef
>
cg
(
CGFontCreateWithDataProvider
(
provider
.
get
(
)
)
)
;
if
(
!
cg
)
{
return
nullptr
;
}
SkUniqueCFRef
<
CTFontRef
>
ct
(
CTFontCreateWithGraphicsFont
(
cg
.
get
(
)
0
nullptr
nullptr
)
)
;
if
(
!
ct
)
{
return
nullptr
;
}
return
create_from_CTFontRef
(
std
:
:
move
(
ct
)
nullptr
true
)
;
}
static
void
populate_glyph_to_unicode_slow
(
CTFontRef
ctFont
CFIndex
glyphCount
SkUnichar
*
out
)
{
sk_bzero
(
out
glyphCount
*
sizeof
(
SkUnichar
)
)
;
UniChar
unichar
=
0
;
while
(
glyphCount
>
0
)
{
CGGlyph
glyph
;
if
(
CTFontGetGlyphsForCharacters
(
ctFont
&
unichar
&
glyph
1
)
)
{
if
(
out
[
glyph
]
!
=
0
)
{
out
[
glyph
]
=
unichar
;
-
-
glyphCount
;
}
}
if
(
+
+
unichar
=
=
0
)
{
break
;
}
}
}
static
void
populate_glyph_to_unicode
(
CTFontRef
ctFont
CFIndex
glyphCount
SkUnichar
*
glyphToUnicode
)
{
sk_bzero
(
glyphToUnicode
sizeof
(
SkUnichar
)
*
glyphCount
)
;
SkUniqueCFRef
<
CFCharacterSetRef
>
charSet
(
CTFontCopyCharacterSet
(
ctFont
)
)
;
if
(
!
charSet
)
{
populate_glyph_to_unicode_slow
(
ctFont
glyphCount
glyphToUnicode
)
;
return
;
}
SkUniqueCFRef
<
CFDataRef
>
bitmap
(
CFCharacterSetCreateBitmapRepresentation
(
nullptr
charSet
.
get
(
)
)
)
;
if
(
!
bitmap
)
{
return
;
}
CFIndex
length
=
CFDataGetLength
(
bitmap
.
get
(
)
)
;
if
(
!
length
)
{
return
;
}
if
(
length
>
8192
)
{
length
=
8192
;
}
const
UInt8
*
bits
=
CFDataGetBytePtr
(
bitmap
.
get
(
)
)
;
sk_bzero
(
glyphToUnicode
glyphCount
*
sizeof
(
SkUnichar
)
)
;
for
(
int
i
=
0
;
i
<
length
;
i
+
+
)
{
int
mask
=
bits
[
i
]
;
if
(
!
mask
)
{
continue
;
}
for
(
int
j
=
0
;
j
<
8
;
j
+
+
)
{
CGGlyph
glyph
;
UniChar
unichar
=
static_cast
<
UniChar
>
(
(
i
<
<
3
)
+
j
)
;
if
(
mask
&
(
1
<
<
j
)
&
&
CTFontGetGlyphsForCharacters
(
ctFont
&
unichar
&
glyph
1
)
)
{
glyphToUnicode
[
glyph
]
=
unichar
;
}
}
}
}
static
void
CFStringToSkString
(
CFStringRef
src
SkString
*
dst
)
{
CFIndex
length
=
CFStringGetMaximumSizeForEncoding
(
CFStringGetLength
(
src
)
kCFStringEncodingUTF8
)
+
1
;
dst
-
>
resize
(
length
)
;
CFStringGetCString
(
src
dst
-
>
writable_str
(
)
length
kCFStringEncodingUTF8
)
;
dst
-
>
resize
(
strlen
(
dst
-
>
c_str
(
)
)
)
;
}
void
SkTypeface_Mac
:
:
getGlyphToUnicodeMap
(
SkUnichar
*
dstArray
)
const
{
AUTO_CG_LOCK
(
)
;
SkUniqueCFRef
<
CTFontRef
>
ctFont
=
ctfont_create_exact_copy
(
fFontRef
.
get
(
)
CTFontGetUnitsPerEm
(
fFontRef
.
get
(
)
)
nullptr
)
;
CFIndex
glyphCount
=
CTFontGetGlyphCount
(
ctFont
.
get
(
)
)
;
populate_glyph_to_unicode
(
ctFont
.
get
(
)
glyphCount
dstArray
)
;
}
std
:
:
unique_ptr
<
SkAdvancedTypefaceMetrics
>
SkTypeface_Mac
:
:
onGetAdvancedMetrics
(
)
const
{
AUTO_CG_LOCK
(
)
;
SkUniqueCFRef
<
CTFontRef
>
ctFont
=
ctfont_create_exact_copy
(
fFontRef
.
get
(
)
CTFontGetUnitsPerEm
(
fFontRef
.
get
(
)
)
nullptr
)
;
std
:
:
unique_ptr
<
SkAdvancedTypefaceMetrics
>
info
(
new
SkAdvancedTypefaceMetrics
)
;
{
SkUniqueCFRef
<
CFStringRef
>
fontName
(
CTFontCopyPostScriptName
(
ctFont
.
get
(
)
)
)
;
if
(
fontName
.
get
(
)
)
{
CFStringToSkString
(
fontName
.
get
(
)
&
info
-
>
fPostScriptName
)
;
info
-
>
fFontName
=
info
-
>
fPostScriptName
;
}
}
SkUniqueCFRef
<
CGFontRef
>
cgFont
(
CTFontCopyGraphicsFont
(
ctFont
.
get
(
)
nullptr
)
)
;
if
(
cgFont
)
{
SkUniqueCFRef
<
CFArrayRef
>
cgAxes
(
CGFontCopyVariationAxes
(
cgFont
.
get
(
)
)
)
;
if
(
cgAxes
&
&
CFArrayGetCount
(
cgAxes
.
get
(
)
)
>
0
)
{
info
-
>
fFlags
|
=
SkAdvancedTypefaceMetrics
:
:
kMultiMaster_FontFlag
;
}
}
SkOTTableOS2_V4
:
:
Type
fsType
;
if
(
sizeof
(
fsType
)
=
=
this
-
>
getTableData
(
SkTEndian_SwapBE32
(
SkOTTableOS2
:
:
TAG
)
offsetof
(
SkOTTableOS2_V4
fsType
)
sizeof
(
fsType
)
&
fsType
)
)
{
SkOTUtils
:
:
SetAdvancedTypefaceFlags
(
fsType
info
.
get
(
)
)
;
}
if
(
!
this
-
>
getTableSize
(
'
glyf
'
)
|
|
!
this
-
>
getTableSize
(
'
loca
'
)
)
{
return
info
;
}
info
-
>
fType
=
SkAdvancedTypefaceMetrics
:
:
kTrueType_Font
;
CTFontSymbolicTraits
symbolicTraits
=
CTFontGetSymbolicTraits
(
ctFont
.
get
(
)
)
;
if
(
symbolicTraits
&
kCTFontMonoSpaceTrait
)
{
info
-
>
fStyle
|
=
SkAdvancedTypefaceMetrics
:
:
kFixedPitch_Style
;
}
if
(
symbolicTraits
&
kCTFontItalicTrait
)
{
info
-
>
fStyle
|
=
SkAdvancedTypefaceMetrics
:
:
kItalic_Style
;
}
CTFontStylisticClass
stylisticClass
=
symbolicTraits
&
kCTFontClassMaskTrait
;
if
(
stylisticClass
>
=
kCTFontOldStyleSerifsClass
&
&
stylisticClass
<
=
kCTFontSlabSerifsClass
)
{
info
-
>
fStyle
|
=
SkAdvancedTypefaceMetrics
:
:
kSerif_Style
;
}
else
if
(
stylisticClass
&
kCTFontScriptsClass
)
{
info
-
>
fStyle
|
=
SkAdvancedTypefaceMetrics
:
:
kScript_Style
;
}
info
-
>
fItalicAngle
=
(
int16_t
)
CTFontGetSlantAngle
(
ctFont
.
get
(
)
)
;
info
-
>
fAscent
=
(
int16_t
)
CTFontGetAscent
(
ctFont
.
get
(
)
)
;
info
-
>
fDescent
=
(
int16_t
)
CTFontGetDescent
(
ctFont
.
get
(
)
)
;
info
-
>
fCapHeight
=
(
int16_t
)
CTFontGetCapHeight
(
ctFont
.
get
(
)
)
;
CGRect
bbox
=
CTFontGetBoundingBox
(
ctFont
.
get
(
)
)
;
SkRect
r
;
r
.
set
(
CGToScalar
(
CGRectGetMinX_inline
(
bbox
)
)
CGToScalar
(
CGRectGetMaxY_inline
(
bbox
)
)
CGToScalar
(
CGRectGetMaxX_inline
(
bbox
)
)
CGToScalar
(
CGRectGetMinY_inline
(
bbox
)
)
)
;
r
.
roundOut
(
&
(
info
-
>
fBBox
)
)
;
int16_t
min_width
=
SHRT_MAX
;
info
-
>
fStemV
=
0
;
static
const
UniChar
stem_chars
[
]
=
{
'
i
'
'
I
'
'
!
'
'
1
'
}
;
const
size_t
count
=
sizeof
(
stem_chars
)
/
sizeof
(
stem_chars
[
0
]
)
;
CGGlyph
glyphs
[
count
]
;
CGRect
boundingRects
[
count
]
;
if
(
CTFontGetGlyphsForCharacters
(
ctFont
.
get
(
)
stem_chars
glyphs
count
)
)
{
CTFontGetBoundingRectsForGlyphs
(
ctFont
.
get
(
)
kCTFontOrientationHorizontal
glyphs
boundingRects
count
)
;
for
(
size_t
i
=
0
;
i
<
count
;
i
+
+
)
{
int16_t
width
=
(
int16_t
)
boundingRects
[
i
]
.
size
.
width
;
if
(
width
>
0
&
&
width
<
min_width
)
{
min_width
=
width
;
info
-
>
fStemV
=
min_width
;
}
}
}
return
info
;
}
static
SK_SFNT_ULONG
get_font_type_tag
(
CTFontRef
ctFont
)
{
SkUniqueCFRef
<
CFNumberRef
>
fontFormatRef
(
static_cast
<
CFNumberRef
>
(
CTFontCopyAttribute
(
ctFont
kCTFontFormatAttribute
)
)
)
;
if
(
!
fontFormatRef
)
{
return
0
;
}
SInt32
fontFormatValue
;
if
(
!
CFNumberGetValue
(
fontFormatRef
.
get
(
)
kCFNumberSInt32Type
&
fontFormatValue
)
)
{
return
0
;
}
switch
(
fontFormatValue
)
{
case
kCTFontFormatOpenTypePostScript
:
return
SkSFNTHeader
:
:
fontType_OpenTypeCFF
:
:
TAG
;
case
kCTFontFormatOpenTypeTrueType
:
return
SkSFNTHeader
:
:
fontType_WindowsTrueType
:
:
TAG
;
case
kCTFontFormatTrueType
:
return
SkSFNTHeader
:
:
fontType_MacTrueType
:
:
TAG
;
case
kCTFontFormatPostScript
:
return
SkSFNTHeader
:
:
fontType_PostScript
:
:
TAG
;
case
kCTFontFormatBitmap
:
return
SkSFNTHeader
:
:
fontType_MacTrueType
:
:
TAG
;
case
kCTFontFormatUnrecognized
:
default
:
return
0
;
}
}
SkStreamAsset
*
SkTypeface_Mac
:
:
onOpenStream
(
int
*
ttcIndex
)
const
{
SK_SFNT_ULONG
fontType
=
get_font_type_tag
(
fFontRef
.
get
(
)
)
;
int
numTables
=
this
-
>
countTables
(
)
;
SkTDArray
<
SkFontTableTag
>
tableTags
;
tableTags
.
setCount
(
numTables
)
;
this
-
>
getTableTags
(
tableTags
.
begin
(
)
)
;
if
(
fontType
=
=
0
)
{
fontType
=
SkSFNTHeader
:
:
fontType_WindowsTrueType
:
:
TAG
;
bool
couldBeCFF
=
false
;
constexpr
SkFontTableTag
CFFTag
=
SkSetFourByteTag
(
'
C
'
'
F
'
'
F
'
'
'
)
;
constexpr
SkFontTableTag
CFF2Tag
=
SkSetFourByteTag
(
'
C
'
'
F
'
'
F
'
'
2
'
)
;
for
(
int
tableIndex
=
0
;
tableIndex
<
numTables
;
+
+
tableIndex
)
{
if
(
CFFTag
=
=
tableTags
[
tableIndex
]
|
|
CFF2Tag
=
=
tableTags
[
tableIndex
]
)
{
couldBeCFF
=
true
;
}
}
if
(
couldBeCFF
)
{
fontType
=
SkSFNTHeader
:
:
fontType_OpenTypeCFF
:
:
TAG
;
}
}
if
(
fontType
=
=
SkSFNTHeader
:
:
fontType_PostScript
:
:
TAG
)
{
bool
couldBeTyp1
=
false
;
constexpr
SkFontTableTag
TYPE1Tag
=
SkSetFourByteTag
(
'
T
'
'
Y
'
'
P
'
'
1
'
)
;
constexpr
SkFontTableTag
CIDTag
=
SkSetFourByteTag
(
'
C
'
'
I
'
'
D
'
'
'
)
;
for
(
int
tableIndex
=
0
;
tableIndex
<
numTables
;
+
+
tableIndex
)
{
if
(
TYPE1Tag
=
=
tableTags
[
tableIndex
]
|
|
CIDTag
=
=
tableTags
[
tableIndex
]
)
{
couldBeTyp1
=
true
;
}
}
if
(
!
couldBeTyp1
)
{
fontType
=
SkSFNTHeader
:
:
fontType_OpenTypeCFF
:
:
TAG
;
}
}
SkTDArray
<
size_t
>
tableSizes
;
size_t
totalSize
=
sizeof
(
SkSFNTHeader
)
+
sizeof
(
SkSFNTHeader
:
:
TableDirectoryEntry
)
*
numTables
;
for
(
int
tableIndex
=
0
;
tableIndex
<
numTables
;
+
+
tableIndex
)
{
size_t
tableSize
=
this
-
>
getTableSize
(
tableTags
[
tableIndex
]
)
;
totalSize
+
=
(
tableSize
+
3
)
&
~
3
;
*
tableSizes
.
append
(
)
=
tableSize
;
}
SkMemoryStream
*
stream
=
new
SkMemoryStream
(
totalSize
)
;
char
*
dataStart
=
(
char
*
)
stream
-
>
getMemoryBase
(
)
;
sk_bzero
(
dataStart
totalSize
)
;
char
*
dataPtr
=
dataStart
;
uint16_t
entrySelector
=
0
;
uint16_t
searchRange
=
1
;
while
(
searchRange
<
numTables
>
>
1
)
{
entrySelector
+
+
;
searchRange
<
<
=
1
;
}
searchRange
<
<
=
4
;
uint16_t
rangeShift
=
(
numTables
<
<
4
)
-
searchRange
;
SkSFNTHeader
*
header
=
(
SkSFNTHeader
*
)
dataPtr
;
header
-
>
fontType
=
fontType
;
header
-
>
numTables
=
SkEndian_SwapBE16
(
numTables
)
;
header
-
>
searchRange
=
SkEndian_SwapBE16
(
searchRange
)
;
header
-
>
entrySelector
=
SkEndian_SwapBE16
(
entrySelector
)
;
header
-
>
rangeShift
=
SkEndian_SwapBE16
(
rangeShift
)
;
dataPtr
+
=
sizeof
(
SkSFNTHeader
)
;
SkSFNTHeader
:
:
TableDirectoryEntry
*
entry
=
(
SkSFNTHeader
:
:
TableDirectoryEntry
*
)
dataPtr
;
dataPtr
+
=
sizeof
(
SkSFNTHeader
:
:
TableDirectoryEntry
)
*
numTables
;
for
(
int
tableIndex
=
0
;
tableIndex
<
numTables
;
+
+
tableIndex
)
{
size_t
tableSize
=
tableSizes
[
tableIndex
]
;
this
-
>
getTableData
(
tableTags
[
tableIndex
]
0
tableSize
dataPtr
)
;
entry
-
>
tag
=
SkEndian_SwapBE32
(
tableTags
[
tableIndex
]
)
;
entry
-
>
checksum
=
SkEndian_SwapBE32
(
SkOTUtils
:
:
CalcTableChecksum
(
(
SK_OT_ULONG
*
)
dataPtr
tableSize
)
)
;
entry
-
>
offset
=
SkEndian_SwapBE32
(
SkToU32
(
dataPtr
-
dataStart
)
)
;
entry
-
>
logicalLength
=
SkEndian_SwapBE32
(
SkToU32
(
tableSize
)
)
;
dataPtr
+
=
(
tableSize
+
3
)
&
~
3
;
+
+
entry
;
}
*
ttcIndex
=
0
;
return
stream
;
}
struct
NonDefaultAxesContext
{
SkFixed
*
axisValue
;
CFArrayRef
cgAxes
;
}
;
static
void
set_non_default_axes
(
CFTypeRef
key
CFTypeRef
value
void
*
context
)
{
NonDefaultAxesContext
*
self
=
static_cast
<
NonDefaultAxesContext
*
>
(
context
)
;
if
(
CFGetTypeID
(
key
)
!
=
CFStringGetTypeID
(
)
|
|
CFGetTypeID
(
value
)
!
=
CFNumberGetTypeID
(
)
)
{
return
;
}
CFIndex
keyIndex
=
-
1
;
CFStringRef
keyString
=
static_cast
<
CFStringRef
>
(
key
)
;
for
(
CFIndex
i
=
0
;
i
<
CFArrayGetCount
(
self
-
>
cgAxes
)
;
+
+
i
)
{
CFTypeRef
cgAxis
=
CFArrayGetValueAtIndex
(
self
-
>
cgAxes
i
)
;
if
(
CFGetTypeID
(
cgAxis
)
!
=
CFDictionaryGetTypeID
(
)
)
{
continue
;
}
CFDictionaryRef
cgAxisDict
=
static_cast
<
CFDictionaryRef
>
(
cgAxis
)
;
CFTypeRef
cgAxisName
=
CFDictionaryGetValue
(
cgAxisDict
kCGFontVariationAxisName
)
;
if
(
!
cgAxisName
|
|
CFGetTypeID
(
cgAxisName
)
!
=
CFStringGetTypeID
(
)
)
{
continue
;
}
CFStringRef
cgAxisNameString
=
static_cast
<
CFStringRef
>
(
cgAxisName
)
;
if
(
CFStringCompare
(
keyString
cgAxisNameString
0
)
=
=
kCFCompareEqualTo
)
{
keyIndex
=
i
;
break
;
}
}
if
(
keyIndex
=
=
-
1
)
{
return
;
}
CFNumberRef
valueNumber
=
static_cast
<
CFNumberRef
>
(
value
)
;
double
valueDouble
;
if
(
!
CFNumberGetValue
(
valueNumber
kCFNumberDoubleType
&
valueDouble
)
|
|
valueDouble
<
SkFixedToDouble
(
SK_FixedMin
)
|
|
SkFixedToDouble
(
SK_FixedMax
)
<
valueDouble
)
{
return
;
}
self
-
>
axisValue
[
keyIndex
]
=
SkDoubleToFixed
(
valueDouble
)
;
}
static
bool
get_variations
(
CTFontRef
ctFont
CFIndex
*
cgAxisCount
SkAutoSTMalloc
<
4
SkFixed
>
*
axisValues
)
{
SkUniqueCFRef
<
CGFontRef
>
cgFont
(
CTFontCopyGraphicsFont
(
ctFont
nullptr
)
)
;
if
(
!
cgFont
)
{
return
false
;
}
SkUniqueCFRef
<
CFDictionaryRef
>
cgVariations
(
CGFontCopyVariations
(
cgFont
.
get
(
)
)
)
;
if
(
!
cgVariations
)
{
return
false
;
}
SkUniqueCFRef
<
CFArrayRef
>
cgAxes
(
CGFontCopyVariationAxes
(
cgFont
.
get
(
)
)
)
;
if
(
!
cgAxes
)
{
return
false
;
}
*
cgAxisCount
=
CFArrayGetCount
(
cgAxes
.
get
(
)
)
;
axisValues
-
>
reset
(
*
cgAxisCount
)
;
for
(
CFIndex
i
=
0
;
i
<
*
cgAxisCount
;
+
+
i
)
{
CFTypeRef
cgAxis
=
CFArrayGetValueAtIndex
(
cgAxes
.
get
(
)
i
)
;
if
(
CFGetTypeID
(
cgAxis
)
!
=
CFDictionaryGetTypeID
(
)
)
{
return
false
;
}
CFDictionaryRef
cgAxisDict
=
static_cast
<
CFDictionaryRef
>
(
cgAxis
)
;
CFTypeRef
axisDefaultValue
=
CFDictionaryGetValue
(
cgAxisDict
kCGFontVariationAxisDefaultValue
)
;
if
(
!
axisDefaultValue
|
|
CFGetTypeID
(
axisDefaultValue
)
!
=
CFNumberGetTypeID
(
)
)
{
return
false
;
}
CFNumberRef
axisDefaultValueNumber
=
static_cast
<
CFNumberRef
>
(
axisDefaultValue
)
;
double
axisDefaultValueDouble
;
if
(
!
CFNumberGetValue
(
axisDefaultValueNumber
kCFNumberDoubleType
&
axisDefaultValueDouble
)
)
{
return
false
;
}
if
(
axisDefaultValueDouble
<
SkFixedToDouble
(
SK_FixedMin
)
|
|
SkFixedToDouble
(
SK_FixedMax
)
<
axisDefaultValueDouble
)
{
return
false
;
}
(
*
axisValues
)
[
(
int
)
i
]
=
SkDoubleToFixed
(
axisDefaultValueDouble
)
;
}
NonDefaultAxesContext
c
=
{
axisValues
-
>
get
(
)
cgAxes
.
get
(
)
}
;
CFDictionaryApplyFunction
(
cgVariations
.
get
(
)
set_non_default_axes
&
c
)
;
return
true
;
}
std
:
:
unique_ptr
<
SkFontData
>
SkTypeface_Mac
:
:
onMakeFontData
(
)
const
{
int
index
;
std
:
:
unique_ptr
<
SkStreamAsset
>
stream
(
this
-
>
onOpenStream
(
&
index
)
)
;
CFIndex
cgAxisCount
;
SkAutoSTMalloc
<
4
SkFixed
>
axisValues
;
if
(
get_variations
(
fFontRef
.
get
(
)
&
cgAxisCount
&
axisValues
)
)
{
return
skstd
:
:
make_unique
<
SkFontData
>
(
std
:
:
move
(
stream
)
index
axisValues
.
get
(
)
cgAxisCount
)
;
}
return
skstd
:
:
make_unique
<
SkFontData
>
(
std
:
:
move
(
stream
)
index
nullptr
0
)
;
}
static
SkUniqueCFRef
<
CFDictionaryRef
>
ct_variation_from_cg_variation
(
CFDictionaryRef
cgVariations
CFArrayRef
ctAxes
)
{
SkUniqueCFRef
<
CFMutableDictionaryRef
>
ctVariations
(
CFDictionaryCreateMutable
(
kCFAllocatorDefault
0
&
kCFTypeDictionaryKeyCallBacks
&
kCFTypeDictionaryValueCallBacks
)
)
;
CFIndex
axisCount
=
CFArrayGetCount
(
ctAxes
)
;
for
(
CFIndex
i
=
0
;
i
<
axisCount
;
+
+
i
)
{
CFTypeRef
axisInfo
=
CFArrayGetValueAtIndex
(
ctAxes
i
)
;
if
(
CFDictionaryGetTypeID
(
)
!
=
CFGetTypeID
(
axisInfo
)
)
{
return
nullptr
;
}
CFDictionaryRef
axisInfoDict
=
static_cast
<
CFDictionaryRef
>
(
axisInfo
)
;
CFTypeRef
axisName
=
CFDictionaryGetValue
(
axisInfoDict
kCTFontVariationAxisNameKey
)
;
if
(
!
axisName
|
|
CFGetTypeID
(
axisName
)
!
=
CFStringGetTypeID
(
)
)
{
return
nullptr
;
}
CFTypeRef
axisValue
=
CFDictionaryGetValue
(
cgVariations
axisName
)
;
if
(
!
axisValue
|
|
CFGetTypeID
(
axisValue
)
!
=
CFNumberGetTypeID
(
)
)
{
return
nullptr
;
}
CFTypeRef
axisTag
=
CFDictionaryGetValue
(
axisInfoDict
kCTFontVariationAxisIdentifierKey
)
;
if
(
!
axisTag
|
|
CFGetTypeID
(
axisTag
)
!
=
CFNumberGetTypeID
(
)
)
{
return
nullptr
;
}
CFDictionaryAddValue
(
ctVariations
.
get
(
)
axisTag
axisValue
)
;
}
return
std
:
:
move
(
ctVariations
)
;
}
int
SkTypeface_Mac
:
:
onGetVariationDesignPosition
(
SkFontArguments
:
:
VariationPosition
:
:
Coordinate
coordinates
[
]
int
coordinateCount
)
const
{
SkUniqueCFRef
<
CFArrayRef
>
ctAxes
(
CTFontCopyVariationAxes
(
fFontRef
.
get
(
)
)
)
;
if
(
!
ctAxes
)
{
return
-
1
;
}
CFIndex
axisCount
=
CFArrayGetCount
(
ctAxes
.
get
(
)
)
;
if
(
!
coordinates
|
|
coordinateCount
<
axisCount
)
{
return
axisCount
;
}
SkUniqueCFRef
<
CFDictionaryRef
>
ctVariations
(
CTFontCopyVariation
(
fFontRef
.
get
(
)
)
)
;
if
(
!
ctVariations
)
{
SkUniqueCFRef
<
CGFontRef
>
cgFont
(
CTFontCopyGraphicsFont
(
fFontRef
.
get
(
)
nullptr
)
)
;
if
(
!
cgFont
)
{
return
-
1
;
}
SkUniqueCFRef
<
CFDictionaryRef
>
cgVariations
(
CGFontCopyVariations
(
cgFont
.
get
(
)
)
)
;
if
(
!
cgVariations
)
{
return
-
1
;
}
ctVariations
=
ct_variation_from_cg_variation
(
cgVariations
.
get
(
)
ctAxes
.
get
(
)
)
;
if
(
!
ctVariations
)
{
return
-
1
;
}
}
for
(
int
i
=
0
;
i
<
axisCount
;
+
+
i
)
{
CFTypeRef
axisInfo
=
CFArrayGetValueAtIndex
(
ctAxes
.
get
(
)
i
)
;
if
(
CFDictionaryGetTypeID
(
)
!
=
CFGetTypeID
(
axisInfo
)
)
{
return
-
1
;
}
CFDictionaryRef
axisInfoDict
=
static_cast
<
CFDictionaryRef
>
(
axisInfo
)
;
CFTypeRef
tag
=
CFDictionaryGetValue
(
axisInfoDict
kCTFontVariationAxisIdentifierKey
)
;
if
(
!
tag
|
|
CFGetTypeID
(
tag
)
!
=
CFNumberGetTypeID
(
)
)
{
return
-
1
;
}
CFNumberRef
tagNumber
=
static_cast
<
CFNumberRef
>
(
tag
)
;
int64_t
tagLong
;
if
(
!
CFNumberGetValue
(
tagNumber
kCFNumberSInt64Type
&
tagLong
)
)
{
return
-
1
;
}
coordinates
[
i
]
.
axis
=
tagLong
;
CGFloat
variationCGFloat
;
CFTypeRef
variationValue
=
CFDictionaryGetValue
(
ctVariations
.
get
(
)
tagNumber
)
;
if
(
variationValue
)
{
if
(
CFGetTypeID
(
variationValue
)
!
=
CFNumberGetTypeID
(
)
)
{
return
-
1
;
}
CFNumberRef
variationNumber
=
static_cast
<
CFNumberRef
>
(
variationValue
)
;
if
(
!
CFNumberGetValue
(
variationNumber
kCFNumberCGFloatType
&
variationCGFloat
)
)
{
return
-
1
;
}
}
else
{
CFTypeRef
def
=
CFDictionaryGetValue
(
axisInfoDict
kCTFontVariationAxisDefaultValueKey
)
;
if
(
!
def
|
|
CFGetTypeID
(
def
)
!
=
CFNumberGetTypeID
(
)
)
{
return
-
1
;
}
CFNumberRef
defNumber
=
static_cast
<
CFNumberRef
>
(
def
)
;
if
(
!
CFNumberGetValue
(
defNumber
kCFNumberCGFloatType
&
variationCGFloat
)
)
{
return
-
1
;
}
}
coordinates
[
i
]
.
value
=
CGToScalar
(
variationCGFloat
)
;
}
return
axisCount
;
}
int
SkTypeface_Mac
:
:
onGetUPEM
(
)
const
{
SkUniqueCFRef
<
CGFontRef
>
cgFont
(
CTFontCopyGraphicsFont
(
fFontRef
.
get
(
)
nullptr
)
)
;
return
CGFontGetUnitsPerEm
(
cgFont
.
get
(
)
)
;
}
SkTypeface
:
:
LocalizedStrings
*
SkTypeface_Mac
:
:
onCreateFamilyNameIterator
(
)
const
{
sk_sp
<
SkTypeface
:
:
LocalizedStrings
>
nameIter
=
SkOTUtils
:
:
LocalizedStrings_NameTable
:
:
MakeForFamilyNames
(
*
this
)
;
if
(
!
nameIter
)
{
CFStringRef
cfLanguageRaw
;
SkUniqueCFRef
<
CFStringRef
>
cfFamilyName
(
CTFontCopyLocalizedName
(
fFontRef
.
get
(
)
kCTFontFamilyNameKey
&
cfLanguageRaw
)
)
;
SkUniqueCFRef
<
CFStringRef
>
cfLanguage
(
cfLanguageRaw
)
;
SkString
skLanguage
;
SkString
skFamilyName
;
if
(
cfLanguage
)
{
CFStringToSkString
(
cfLanguage
.
get
(
)
&
skLanguage
)
;
}
else
{
skLanguage
=
"
und
"
;
}
if
(
cfFamilyName
)
{
CFStringToSkString
(
cfFamilyName
.
get
(
)
&
skFamilyName
)
;
}
nameIter
=
sk_make_sp
<
SkOTUtils
:
:
LocalizedStrings_SingleName
>
(
skFamilyName
skLanguage
)
;
}
return
nameIter
.
release
(
)
;
}
int
SkTypeface_Mac
:
:
onGetTableTags
(
SkFontTableTag
tags
[
]
)
const
{
SkUniqueCFRef
<
CFArrayRef
>
cfArray
(
CTFontCopyAvailableTables
(
fFontRef
.
get
(
)
kCTFontTableOptionNoOptions
)
)
;
if
(
!
cfArray
)
{
return
0
;
}
int
count
=
SkToInt
(
CFArrayGetCount
(
cfArray
.
get
(
)
)
)
;
if
(
tags
)
{
for
(
int
i
=
0
;
i
<
count
;
+
+
i
)
{
uintptr_t
fontTag
=
reinterpret_cast
<
uintptr_t
>
(
CFArrayGetValueAtIndex
(
cfArray
.
get
(
)
i
)
)
;
tags
[
i
]
=
static_cast
<
SkFontTableTag
>
(
fontTag
)
;
}
}
return
count
;
}
static
SkUniqueCFRef
<
CFDataRef
>
copy_table_from_font
(
CTFontRef
ctFont
SkFontTableTag
tag
)
{
SkUniqueCFRef
<
CFDataRef
>
data
(
CTFontCopyTable
(
ctFont
(
CTFontTableTag
)
tag
kCTFontTableOptionNoOptions
)
)
;
if
(
!
data
)
{
SkUniqueCFRef
<
CGFontRef
>
cgFont
(
CTFontCopyGraphicsFont
(
ctFont
nullptr
)
)
;
data
.
reset
(
CGFontCopyTableForTag
(
cgFont
.
get
(
)
tag
)
)
;
}
return
data
;
}
size_t
SkTypeface_Mac
:
:
onGetTableData
(
SkFontTableTag
tag
size_t
offset
size_t
length
void
*
dstData
)
const
{
SkUniqueCFRef
<
CFDataRef
>
srcData
=
copy_table_from_font
(
fFontRef
.
get
(
)
tag
)
;
if
(
!
srcData
)
{
return
0
;
}
size_t
srcSize
=
CFDataGetLength
(
srcData
.
get
(
)
)
;
if
(
offset
>
=
srcSize
)
{
return
0
;
}
if
(
length
>
srcSize
-
offset
)
{
length
=
srcSize
-
offset
;
}
if
(
dstData
)
{
memcpy
(
dstData
CFDataGetBytePtr
(
srcData
.
get
(
)
)
+
offset
length
)
;
}
return
length
;
}
SkScalerContext
*
SkTypeface_Mac
:
:
onCreateScalerContext
(
const
SkScalerContextEffects
&
effects
const
SkDescriptor
*
desc
)
const
{
return
new
SkScalerContext_Mac
(
sk_ref_sp
(
const_cast
<
SkTypeface_Mac
*
>
(
this
)
)
effects
desc
)
;
}
void
SkTypeface_Mac
:
:
onFilterRec
(
SkScalerContextRec
*
rec
)
const
{
if
(
rec
-
>
fFlags
&
SkScalerContext
:
:
kLCD_BGROrder_Flag
|
|
rec
-
>
fFlags
&
SkScalerContext
:
:
kLCD_Vertical_Flag
)
{
rec
-
>
fMaskFormat
=
SkMask
:
:
kA8_Format
;
rec
-
>
setHinting
(
SkPaint
:
:
kNormal_Hinting
)
;
}
unsigned
flagsWeDontSupport
=
SkScalerContext
:
:
kForceAutohinting_Flag
|
SkScalerContext
:
:
kLCD_BGROrder_Flag
|
SkScalerContext
:
:
kLCD_Vertical_Flag
;
rec
-
>
fFlags
&
=
~
flagsWeDontSupport
;
SmoothBehavior
smoothBehavior
=
smooth_behavior
(
)
;
SkPaint
:
:
Hinting
hinting
=
rec
-
>
getHinting
(
)
;
if
(
SkPaint
:
:
kSlight_Hinting
=
=
hinting
|
|
smoothBehavior
=
=
SmoothBehavior
:
:
none
)
{
hinting
=
SkPaint
:
:
kNo_Hinting
;
}
else
if
(
SkPaint
:
:
kFull_Hinting
=
=
hinting
)
{
hinting
=
SkPaint
:
:
kNormal_Hinting
;
}
rec
-
>
setHinting
(
hinting
)
;
if
(
rec
-
>
fMaskFormat
=
=
SkMask
:
:
kLCD16_Format
)
{
if
(
smoothBehavior
=
=
SmoothBehavior
:
:
subpixel
)
{
rec
-
>
fMaskFormat
=
SkMask
:
:
kLCD16_Format
;
rec
-
>
setHinting
(
SkPaint
:
:
kNormal_Hinting
)
;
}
else
{
rec
-
>
fMaskFormat
=
SkMask
:
:
kA8_Format
;
if
(
smoothBehavior
=
=
SmoothBehavior
:
:
some
)
{
rec
-
>
setHinting
(
SkPaint
:
:
kNormal_Hinting
)
;
}
}
}
if
(
fHasColorGlyphs
)
{
rec
-
>
fMaskFormat
=
SkMask
:
:
kARGB32_Format
;
}
if
(
SkMask
:
:
kA8_Format
=
=
rec
-
>
fMaskFormat
&
&
SkPaint
:
:
kNo_Hinting
=
=
hinting
)
{
#
ifndef
SK_GAMMA_APPLY_TO_A8
rec
-
>
ignorePreBlend
(
)
;
#
endif
}
else
{
rec
-
>
setContrast
(
0
)
;
}
}
static
const
char
*
get_str
(
CFStringRef
ref
SkString
*
str
)
{
if
(
nullptr
=
=
ref
)
{
return
nullptr
;
}
CFStringToSkString
(
ref
str
)
;
CFRelease
(
ref
)
;
return
str
-
>
c_str
(
)
;
}
void
SkTypeface_Mac
:
:
onGetFamilyName
(
SkString
*
familyName
)
const
{
get_str
(
CTFontCopyFamilyName
(
fFontRef
.
get
(
)
)
familyName
)
;
}
void
SkTypeface_Mac
:
:
onGetFontDescriptor
(
SkFontDescriptor
*
desc
bool
*
isLocalStream
)
const
{
SkString
tmpStr
;
desc
-
>
setFamilyName
(
get_str
(
CTFontCopyFamilyName
(
fFontRef
.
get
(
)
)
&
tmpStr
)
)
;
desc
-
>
setFullName
(
get_str
(
CTFontCopyFullName
(
fFontRef
.
get
(
)
)
&
tmpStr
)
)
;
desc
-
>
setPostscriptName
(
get_str
(
CTFontCopyPostScriptName
(
fFontRef
.
get
(
)
)
&
tmpStr
)
)
;
desc
-
>
setStyle
(
this
-
>
fontStyle
(
)
)
;
*
isLocalStream
=
fIsLocalStream
;
}
int
SkTypeface_Mac
:
:
onCharsToGlyphs
(
const
void
*
chars
Encoding
encoding
uint16_t
glyphs
[
]
int
glyphCount
)
const
{
SkAutoSTMalloc
<
1024
UniChar
>
charStorage
;
const
UniChar
*
src
;
int
srcCount
;
switch
(
encoding
)
{
case
kUTF8_Encoding
:
{
const
char
*
utf8
=
reinterpret_cast
<
const
char
*
>
(
chars
)
;
UniChar
*
utf16
=
charStorage
.
reset
(
2
*
glyphCount
)
;
src
=
utf16
;
for
(
int
i
=
0
;
i
<
glyphCount
;
+
+
i
)
{
SkUnichar
uni
=
SkUTF8_NextUnichar
(
&
utf8
)
;
utf16
+
=
SkUTF
:
:
ToUTF16
(
uni
utf16
)
;
}
srcCount
=
SkToInt
(
utf16
-
src
)
;
break
;
}
case
kUTF16_Encoding
:
{
src
=
reinterpret_cast
<
const
UniChar
*
>
(
chars
)
;
int
extra
=
0
;
for
(
int
i
=
0
;
i
<
glyphCount
;
+
+
i
)
{
if
(
SkUTF16_IsLeadingSurrogate
(
src
[
i
+
extra
]
)
)
{
+
+
extra
;
}
}
srcCount
=
glyphCount
+
extra
;
break
;
}
case
kUTF32_Encoding
:
{
const
SkUnichar
*
utf32
=
reinterpret_cast
<
const
SkUnichar
*
>
(
chars
)
;
UniChar
*
utf16
=
charStorage
.
reset
(
2
*
glyphCount
)
;
src
=
utf16
;
for
(
int
i
=
0
;
i
<
glyphCount
;
+
+
i
)
{
utf16
+
=
SkUTF
:
:
ToUTF16
(
utf32
[
i
]
utf16
)
;
}
srcCount
=
SkToInt
(
utf16
-
src
)
;
break
;
}
}
SkAutoSTMalloc
<
1024
uint16_t
>
glyphStorage
;
uint16_t
*
macGlyphs
=
glyphs
;
if
(
nullptr
=
=
macGlyphs
|
|
srcCount
>
glyphCount
)
{
macGlyphs
=
glyphStorage
.
reset
(
srcCount
)
;
}
bool
allEncoded
=
CTFontGetGlyphsForCharacters
(
fFontRef
.
get
(
)
src
macGlyphs
srcCount
)
;
uint16_t
*
compactedGlyphs
=
glyphs
;
if
(
nullptr
=
=
compactedGlyphs
)
{
compactedGlyphs
=
macGlyphs
;
}
if
(
srcCount
>
glyphCount
)
{
int
extra
=
0
;
for
(
int
i
=
0
;
i
<
glyphCount
;
+
+
i
)
{
compactedGlyphs
[
i
]
=
macGlyphs
[
i
+
extra
]
;
if
(
SkUTF16_IsLeadingSurrogate
(
src
[
i
+
extra
]
)
)
{
+
+
extra
;
}
}
}
if
(
allEncoded
)
{
return
glyphCount
;
}
for
(
int
i
=
0
;
i
<
glyphCount
;
+
+
i
)
{
if
(
0
=
=
compactedGlyphs
[
i
]
)
{
return
i
;
}
}
return
glyphCount
;
}
int
SkTypeface_Mac
:
:
onCountGlyphs
(
)
const
{
return
SkToInt
(
CTFontGetGlyphCount
(
fFontRef
.
get
(
)
)
)
;
}
static
bool
find_desc_str
(
CTFontDescriptorRef
desc
CFStringRef
name
SkString
*
value
)
{
SkUniqueCFRef
<
CFStringRef
>
ref
(
(
CFStringRef
)
CTFontDescriptorCopyAttribute
(
desc
name
)
)
;
if
(
!
ref
)
{
return
false
;
}
CFStringToSkString
(
ref
.
get
(
)
value
)
;
return
true
;
}
#
include
"
SkFontMgr
.
h
"
static
inline
int
sqr
(
int
value
)
{
SkASSERT
(
SkAbs32
(
value
)
<
0x7FFF
)
;
return
value
*
value
;
}
static
int
compute_metric
(
const
SkFontStyle
&
a
const
SkFontStyle
&
b
)
{
return
sqr
(
a
.
weight
(
)
-
b
.
weight
(
)
)
+
sqr
(
(
a
.
width
(
)
-
b
.
width
(
)
)
*
100
)
+
sqr
(
(
a
.
slant
(
)
!
=
b
.
slant
(
)
)
*
900
)
;
}
class
SkFontStyleSet_Mac
:
public
SkFontStyleSet
{
public
:
SkFontStyleSet_Mac
(
CTFontDescriptorRef
desc
)
:
fArray
(
CTFontDescriptorCreateMatchingFontDescriptors
(
desc
nullptr
)
)
fCount
(
0
)
{
if
(
!
fArray
)
{
fArray
.
reset
(
CFArrayCreate
(
nullptr
nullptr
0
nullptr
)
)
;
}
fCount
=
SkToInt
(
CFArrayGetCount
(
fArray
.
get
(
)
)
)
;
}
int
count
(
)
override
{
return
fCount
;
}
void
getStyle
(
int
index
SkFontStyle
*
style
SkString
*
name
)
override
{
SkASSERT
(
(
unsigned
)
index
<
(
unsigned
)
fCount
)
;
CTFontDescriptorRef
desc
=
(
CTFontDescriptorRef
)
CFArrayGetValueAtIndex
(
fArray
.
get
(
)
index
)
;
if
(
style
)
{
*
style
=
fontstyle_from_descriptor
(
desc
false
)
;
}
if
(
name
)
{
if
(
!
find_desc_str
(
desc
kCTFontStyleNameAttribute
name
)
)
{
name
-
>
reset
(
)
;
}
}
}
SkTypeface
*
createTypeface
(
int
index
)
override
{
SkASSERT
(
(
unsigned
)
index
<
(
unsigned
)
CFArrayGetCount
(
fArray
.
get
(
)
)
)
;
CTFontDescriptorRef
desc
=
(
CTFontDescriptorRef
)
CFArrayGetValueAtIndex
(
fArray
.
get
(
)
index
)
;
return
create_from_desc
(
desc
)
.
release
(
)
;
}
SkTypeface
*
matchStyle
(
const
SkFontStyle
&
pattern
)
override
{
if
(
0
=
=
fCount
)
{
return
nullptr
;
}
return
create_from_desc
(
findMatchingDesc
(
pattern
)
)
.
release
(
)
;
}
private
:
SkUniqueCFRef
<
CFArrayRef
>
fArray
;
int
fCount
;
CTFontDescriptorRef
findMatchingDesc
(
const
SkFontStyle
&
pattern
)
const
{
int
bestMetric
=
SK_MaxS32
;
CTFontDescriptorRef
bestDesc
=
nullptr
;
for
(
int
i
=
0
;
i
<
fCount
;
+
+
i
)
{
CTFontDescriptorRef
desc
=
(
CTFontDescriptorRef
)
CFArrayGetValueAtIndex
(
fArray
.
get
(
)
i
)
;
int
metric
=
compute_metric
(
pattern
fontstyle_from_descriptor
(
desc
false
)
)
;
if
(
0
=
=
metric
)
{
return
desc
;
}
if
(
metric
<
bestMetric
)
{
bestMetric
=
metric
;
bestDesc
=
desc
;
}
}
SkASSERT
(
bestDesc
)
;
return
bestDesc
;
}
}
;
class
SkFontMgr_Mac
:
public
SkFontMgr
{
SkUniqueCFRef
<
CFArrayRef
>
fNames
;
int
fCount
;
CFStringRef
getFamilyNameAt
(
int
index
)
const
{
SkASSERT
(
(
unsigned
)
index
<
(
unsigned
)
fCount
)
;
return
(
CFStringRef
)
CFArrayGetValueAtIndex
(
fNames
.
get
(
)
index
)
;
}
static
SkFontStyleSet
*
CreateSet
(
CFStringRef
cfFamilyName
)
{
SkUniqueCFRef
<
CFMutableDictionaryRef
>
cfAttr
(
CFDictionaryCreateMutable
(
kCFAllocatorDefault
0
&
kCFTypeDictionaryKeyCallBacks
&
kCFTypeDictionaryValueCallBacks
)
)
;
CFDictionaryAddValue
(
cfAttr
.
get
(
)
kCTFontFamilyNameAttribute
cfFamilyName
)
;
SkUniqueCFRef
<
CTFontDescriptorRef
>
desc
(
CTFontDescriptorCreateWithAttributes
(
cfAttr
.
get
(
)
)
)
;
return
new
SkFontStyleSet_Mac
(
desc
.
get
(
)
)
;
}
static
SkUniqueCFRef
<
CFArrayRef
>
CopyAvailableFontFamilyNames
(
)
{
#
ifdef
SK_BUILD_FOR_IOS
return
SkUniqueCFRef
<
CFArrayRef
>
(
CFArrayCreate
(
nullptr
nullptr
0
nullptr
)
)
;
#
else
return
SkUniqueCFRef
<
CFArrayRef
>
(
CTFontManagerCopyAvailableFontFamilyNames
(
)
)
;
#
endif
}
public
:
SkFontMgr_Mac
(
)
:
fNames
(
CopyAvailableFontFamilyNames
(
)
)
fCount
(
fNames
?
SkToInt
(
CFArrayGetCount
(
fNames
.
get
(
)
)
)
:
0
)
{
}
protected
:
int
onCountFamilies
(
)
const
override
{
return
fCount
;
}
void
onGetFamilyName
(
int
index
SkString
*
familyName
)
const
override
{
if
(
(
unsigned
)
index
<
(
unsigned
)
fCount
)
{
CFStringToSkString
(
this
-
>
getFamilyNameAt
(
index
)
familyName
)
;
}
else
{
familyName
-
>
reset
(
)
;
}
}
SkFontStyleSet
*
onCreateStyleSet
(
int
index
)
const
override
{
if
(
(
unsigned
)
index
>
=
(
unsigned
)
fCount
)
{
return
nullptr
;
}
return
CreateSet
(
this
-
>
getFamilyNameAt
(
index
)
)
;
}
SkFontStyleSet
*
onMatchFamily
(
const
char
familyName
[
]
)
const
override
{
if
(
!
familyName
)
{
return
nullptr
;
}
SkUniqueCFRef
<
CFStringRef
>
cfName
=
make_CFString
(
familyName
)
;
return
CreateSet
(
cfName
.
get
(
)
)
;
}
SkTypeface
*
onMatchFamilyStyle
(
const
char
familyName
[
]
const
SkFontStyle
&
style
)
const
override
{
SkUniqueCFRef
<
CTFontDescriptorRef
>
desc
=
create_descriptor
(
familyName
style
)
;
return
create_from_desc
(
desc
.
get
(
)
)
.
release
(
)
;
}
SkTypeface
*
onMatchFamilyStyleCharacter
(
const
char
familyName
[
]
const
SkFontStyle
&
style
const
char
*
bcp47
[
]
int
bcp47Count
SkUnichar
character
)
const
override
{
SkUniqueCFRef
<
CTFontDescriptorRef
>
desc
=
create_descriptor
(
familyName
style
)
;
SkUniqueCFRef
<
CTFontRef
>
familyFont
(
CTFontCreateWithFontDescriptor
(
desc
.
get
(
)
0
nullptr
)
)
;
#
ifdef
SK_CPU_LENDIAN
constexpr
CFStringEncoding
encoding
=
kCFStringEncodingUTF32LE
;
#
else
constexpr
CFStringEncoding
encoding
=
kCFStringEncodingUTF32BE
;
#
endif
SkUniqueCFRef
<
CFStringRef
>
string
(
CFStringCreateWithBytes
(
kCFAllocatorDefault
reinterpret_cast
<
const
UInt8
*
>
(
&
character
)
sizeof
(
character
)
encoding
false
)
)
;
CFRange
range
=
CFRangeMake
(
0
CFStringGetLength
(
string
.
get
(
)
)
)
;
SkUniqueCFRef
<
CTFontRef
>
fallbackFont
(
CTFontCreateForString
(
familyFont
.
get
(
)
string
.
get
(
)
range
)
)
;
return
create_from_CTFontRef
(
std
:
:
move
(
fallbackFont
)
nullptr
false
)
.
release
(
)
;
}
SkTypeface
*
onMatchFaceStyle
(
const
SkTypeface
*
familyMember
const
SkFontStyle
&
)
const
override
{
return
nullptr
;
}
sk_sp
<
SkTypeface
>
onMakeFromData
(
sk_sp
<
SkData
>
data
int
ttcIndex
)
const
override
{
SkUniqueCFRef
<
CGDataProviderRef
>
pr
(
SkCreateDataProviderFromData
(
std
:
:
move
(
data
)
)
)
;
if
(
!
pr
)
{
return
nullptr
;
}
return
create_from_dataProvider
(
std
:
:
move
(
pr
)
ttcIndex
)
;
}
sk_sp
<
SkTypeface
>
onMakeFromStreamIndex
(
std
:
:
unique_ptr
<
SkStreamAsset
>
stream
int
ttcIndex
)
const
override
{
SkUniqueCFRef
<
CGDataProviderRef
>
pr
(
SkCreateDataProviderFromStream
(
std
:
:
move
(
stream
)
)
)
;
if
(
!
pr
)
{
return
nullptr
;
}
return
create_from_dataProvider
(
std
:
:
move
(
pr
)
ttcIndex
)
;
}
static
SkUniqueCFRef
<
CFDictionaryRef
>
copy_axes
(
CGFontRef
cg
const
SkFontArguments
&
args
)
{
SkUniqueCFRef
<
CTFontRef
>
ct
(
CTFontCreateWithGraphicsFont
(
cg
0
nullptr
nullptr
)
)
;
SkUniqueCFRef
<
CFArrayRef
>
ctAxes
(
CTFontCopyVariationAxes
(
ct
.
get
(
)
)
)
;
if
(
!
ctAxes
)
{
return
nullptr
;
}
CFIndex
axisCount
=
CFArrayGetCount
(
ctAxes
.
get
(
)
)
;
const
SkFontArguments
:
:
VariationPosition
position
=
args
.
getVariationDesignPosition
(
)
;
SkUniqueCFRef
<
CFMutableDictionaryRef
>
dict
(
CFDictionaryCreateMutable
(
kCFAllocatorDefault
axisCount
&
kCFTypeDictionaryKeyCallBacks
&
kCFTypeDictionaryValueCallBacks
)
)
;
for
(
int
i
=
0
;
i
<
axisCount
;
+
+
i
)
{
CFTypeRef
axisInfo
=
CFArrayGetValueAtIndex
(
ctAxes
.
get
(
)
i
)
;
if
(
CFDictionaryGetTypeID
(
)
!
=
CFGetTypeID
(
axisInfo
)
)
{
return
nullptr
;
}
CFDictionaryRef
axisInfoDict
=
static_cast
<
CFDictionaryRef
>
(
axisInfo
)
;
CFTypeRef
axisName
=
CFDictionaryGetValue
(
axisInfoDict
kCTFontVariationAxisNameKey
)
;
if
(
!
axisName
|
|
CFGetTypeID
(
axisName
)
!
=
CFStringGetTypeID
(
)
)
{
return
nullptr
;
}
CFTypeRef
tag
=
CFDictionaryGetValue
(
axisInfoDict
kCTFontVariationAxisIdentifierKey
)
;
if
(
!
tag
|
|
CFGetTypeID
(
tag
)
!
=
CFNumberGetTypeID
(
)
)
{
return
nullptr
;
}
CFNumberRef
tagNumber
=
static_cast
<
CFNumberRef
>
(
tag
)
;
int64_t
tagLong
;
if
(
!
CFNumberGetValue
(
tagNumber
kCFNumberSInt64Type
&
tagLong
)
)
{
return
nullptr
;
}
CFTypeRef
min
=
CFDictionaryGetValue
(
axisInfoDict
kCTFontVariationAxisMinimumValueKey
)
;
CFTypeRef
max
=
CFDictionaryGetValue
(
axisInfoDict
kCTFontVariationAxisMaximumValueKey
)
;
CFTypeRef
def
=
CFDictionaryGetValue
(
axisInfoDict
kCTFontVariationAxisDefaultValueKey
)
;
if
(
!
min
|
|
CFGetTypeID
(
min
)
!
=
CFNumberGetTypeID
(
)
|
|
!
max
|
|
CFGetTypeID
(
max
)
!
=
CFNumberGetTypeID
(
)
|
|
!
def
|
|
CFGetTypeID
(
def
)
!
=
CFNumberGetTypeID
(
)
)
{
return
nullptr
;
}
CFNumberRef
minNumber
=
static_cast
<
CFNumberRef
>
(
min
)
;
CFNumberRef
maxNumber
=
static_cast
<
CFNumberRef
>
(
max
)
;
CFNumberRef
defNumber
=
static_cast
<
CFNumberRef
>
(
def
)
;
double
minDouble
;
double
maxDouble
;
double
defDouble
;
if
(
!
CFNumberGetValue
(
minNumber
kCFNumberDoubleType
&
minDouble
)
|
|
!
CFNumberGetValue
(
maxNumber
kCFNumberDoubleType
&
maxDouble
)
|
|
!
CFNumberGetValue
(
defNumber
kCFNumberDoubleType
&
defDouble
)
)
{
return
nullptr
;
}
double
value
=
defDouble
;
for
(
int
j
=
position
.
coordinateCount
;
j
-
-
>
0
;
)
{
if
(
position
.
coordinates
[
j
]
.
axis
=
=
tagLong
)
{
value
=
SkTPin
(
SkScalarToDouble
(
position
.
coordinates
[
j
]
.
value
)
minDouble
maxDouble
)
;
break
;
}
}
SkUniqueCFRef
<
CFNumberRef
>
valueNumber
(
CFNumberCreate
(
kCFAllocatorDefault
kCFNumberDoubleType
&
value
)
)
;
CFDictionaryAddValue
(
dict
.
get
(
)
axisName
valueNumber
.
get
(
)
)
;
}
return
std
:
:
move
(
dict
)
;
}
sk_sp
<
SkTypeface
>
onMakeFromStreamArgs
(
std
:
:
unique_ptr
<
SkStreamAsset
>
s
const
SkFontArguments
&
args
)
const
override
{
if
(
args
.
getCollectionIndex
(
)
!
=
0
)
{
return
nullptr
;
}
SkUniqueCFRef
<
CGDataProviderRef
>
provider
(
SkCreateDataProviderFromStream
(
std
:
:
move
(
s
)
)
)
;
if
(
!
provider
)
{
return
nullptr
;
}
SkUniqueCFRef
<
CGFontRef
>
cg
(
CGFontCreateWithDataProvider
(
provider
.
get
(
)
)
)
;
if
(
!
cg
)
{
return
nullptr
;
}
SkUniqueCFRef
<
CFDictionaryRef
>
cgVariations
=
copy_axes
(
cg
.
get
(
)
args
)
;
SkUniqueCFRef
<
CGFontRef
>
cgVariant
;
if
(
cgVariations
)
{
cgVariant
.
reset
(
CGFontCreateCopyWithVariations
(
cg
.
get
(
)
cgVariations
.
get
(
)
)
)
;
}
else
{
cgVariant
.
reset
(
cg
.
release
(
)
)
;
}
SkUniqueCFRef
<
CTFontRef
>
ct
(
CTFontCreateWithGraphicsFont
(
cgVariant
.
get
(
)
0
nullptr
nullptr
)
)
;
if
(
!
ct
)
{
return
nullptr
;
}
return
create_from_CTFontRef
(
std
:
:
move
(
ct
)
std
:
:
move
(
cg
)
true
)
;
}
static
SkUniqueCFRef
<
CFDictionaryRef
>
copy_axes
(
CGFontRef
cg
SkFontData
*
fontData
)
{
SkUniqueCFRef
<
CFArrayRef
>
cgAxes
(
CGFontCopyVariationAxes
(
cg
)
)
;
if
(
!
cgAxes
)
{
return
nullptr
;
}
CFIndex
axisCount
=
CFArrayGetCount
(
cgAxes
.
get
(
)
)
;
if
(
0
=
=
axisCount
|
|
axisCount
!
=
fontData
-
>
getAxisCount
(
)
)
{
return
nullptr
;
}
SkUniqueCFRef
<
CFMutableDictionaryRef
>
dict
(
CFDictionaryCreateMutable
(
kCFAllocatorDefault
axisCount
&
kCFTypeDictionaryKeyCallBacks
&
kCFTypeDictionaryValueCallBacks
)
)
;
for
(
int
i
=
0
;
i
<
fontData
-
>
getAxisCount
(
)
;
+
+
i
)
{
CFTypeRef
axisInfo
=
CFArrayGetValueAtIndex
(
cgAxes
.
get
(
)
i
)
;
if
(
CFDictionaryGetTypeID
(
)
!
=
CFGetTypeID
(
axisInfo
)
)
{
return
nullptr
;
}
CFDictionaryRef
axisInfoDict
=
static_cast
<
CFDictionaryRef
>
(
axisInfo
)
;
CFTypeRef
axisName
=
CFDictionaryGetValue
(
axisInfoDict
kCGFontVariationAxisName
)
;
if
(
!
axisName
|
|
CFGetTypeID
(
axisName
)
!
=
CFStringGetTypeID
(
)
)
{
return
nullptr
;
}
CFTypeRef
min
=
CFDictionaryGetValue
(
axisInfoDict
kCGFontVariationAxisMinValue
)
;
CFTypeRef
max
=
CFDictionaryGetValue
(
axisInfoDict
kCGFontVariationAxisMaxValue
)
;
if
(
!
min
|
|
CFGetTypeID
(
min
)
!
=
CFNumberGetTypeID
(
)
|
|
!
max
|
|
CFGetTypeID
(
max
)
!
=
CFNumberGetTypeID
(
)
)
{
return
nullptr
;
}
CFNumberRef
minNumber
=
static_cast
<
CFNumberRef
>
(
min
)
;
CFNumberRef
maxNumber
=
static_cast
<
CFNumberRef
>
(
max
)
;
double
minDouble
;
double
maxDouble
;
if
(
!
CFNumberGetValue
(
minNumber
kCFNumberDoubleType
&
minDouble
)
|
|
!
CFNumberGetValue
(
maxNumber
kCFNumberDoubleType
&
maxDouble
)
)
{
return
nullptr
;
}
double
value
=
SkTPin
(
SkFixedToDouble
(
fontData
-
>
getAxis
(
)
[
i
]
)
minDouble
maxDouble
)
;
SkUniqueCFRef
<
CFNumberRef
>
valueNumber
(
CFNumberCreate
(
kCFAllocatorDefault
kCFNumberDoubleType
&
value
)
)
;
CFDictionaryAddValue
(
dict
.
get
(
)
axisName
valueNumber
.
get
(
)
)
;
}
return
std
:
:
move
(
dict
)
;
}
sk_sp
<
SkTypeface
>
onMakeFromFontData
(
std
:
:
unique_ptr
<
SkFontData
>
fontData
)
const
override
{
if
(
fontData
-
>
getIndex
(
)
!
=
0
)
{
return
nullptr
;
}
SkUniqueCFRef
<
CGDataProviderRef
>
provider
(
SkCreateDataProviderFromStream
(
fontData
-
>
detachStream
(
)
)
)
;
if
(
!
provider
)
{
return
nullptr
;
}
SkUniqueCFRef
<
CGFontRef
>
cg
(
CGFontCreateWithDataProvider
(
provider
.
get
(
)
)
)
;
if
(
!
cg
)
{
return
nullptr
;
}
SkUniqueCFRef
<
CFDictionaryRef
>
cgVariations
=
copy_axes
(
cg
.
get
(
)
fontData
.
get
(
)
)
;
SkUniqueCFRef
<
CGFontRef
>
cgVariant
;
if
(
cgVariations
)
{
cgVariant
.
reset
(
CGFontCreateCopyWithVariations
(
cg
.
get
(
)
cgVariations
.
get
(
)
)
)
;
}
else
{
cgVariant
.
reset
(
cg
.
release
(
)
)
;
}
SkUniqueCFRef
<
CTFontRef
>
ct
(
CTFontCreateWithGraphicsFont
(
cgVariant
.
get
(
)
0
nullptr
nullptr
)
)
;
if
(
!
ct
)
{
return
nullptr
;
}
return
create_from_CTFontRef
(
std
:
:
move
(
ct
)
std
:
:
move
(
cg
)
true
)
;
}
sk_sp
<
SkTypeface
>
onMakeFromFile
(
const
char
path
[
]
int
ttcIndex
)
const
override
{
SkUniqueCFRef
<
CGDataProviderRef
>
pr
(
CGDataProviderCreateWithFilename
(
path
)
)
;
if
(
!
pr
)
{
return
nullptr
;
}
return
create_from_dataProvider
(
std
:
:
move
(
pr
)
ttcIndex
)
;
}
sk_sp
<
SkTypeface
>
onLegacyMakeTypeface
(
const
char
familyName
[
]
SkFontStyle
style
)
const
override
{
if
(
familyName
)
{
familyName
=
map_css_names
(
familyName
)
;
}
sk_sp
<
SkTypeface
>
face
=
create_from_name
(
familyName
style
)
;
if
(
face
)
{
return
face
;
}
static
SkTypeface
*
gDefaultFace
;
static
SkOnce
lookupDefault
;
static
const
char
FONT_DEFAULT_NAME
[
]
=
"
Lucida
Sans
"
;
lookupDefault
(
[
]
{
gDefaultFace
=
create_from_name
(
FONT_DEFAULT_NAME
SkFontStyle
(
)
)
.
release
(
)
;
}
)
;
return
sk_ref_sp
(
gDefaultFace
)
;
}
}
;
sk_sp
<
SkFontMgr
>
SkFontMgr
:
:
Factory
(
)
{
return
sk_make_sp
<
SkFontMgr_Mac
>
(
)
;
}
#
endif
