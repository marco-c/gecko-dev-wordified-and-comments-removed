#
ifndef
SkPathWriter_DEFINED
#
define
SkPathWriter_DEFINED
#
include
"
SkPath
.
h
"
#
include
"
SkTArray
.
h
"
#
include
"
SkTDArray
.
h
"
class
SkOpPtT
;
class
SkPathWriter
{
public
:
SkPathWriter
(
SkPath
&
path
)
;
void
assemble
(
)
;
void
conicTo
(
const
SkPoint
&
pt1
const
SkOpPtT
*
pt2
SkScalar
weight
)
;
void
cubicTo
(
const
SkPoint
&
pt1
const
SkPoint
&
pt2
const
SkOpPtT
*
pt3
)
;
void
deferredLine
(
const
SkOpPtT
*
pt
)
;
void
deferredMove
(
const
SkOpPtT
*
pt
)
;
void
finishContour
(
)
;
bool
hasMove
(
)
const
{
return
!
fFirstPtT
;
}
void
init
(
)
;
bool
isClosed
(
)
const
;
const
SkPath
*
nativePath
(
)
const
{
return
fPathPtr
;
}
void
quadTo
(
const
SkPoint
&
pt1
const
SkOpPtT
*
pt2
)
;
private
:
bool
changedSlopes
(
const
SkOpPtT
*
pt
)
const
;
void
close
(
)
;
const
SkTDArray
<
const
SkOpPtT
*
>
&
endPtTs
(
)
const
{
return
fEndPtTs
;
}
void
lineTo
(
)
;
bool
matchedLast
(
const
SkOpPtT
*
)
const
;
void
moveTo
(
)
;
const
SkTArray
<
SkPath
>
&
partials
(
)
const
{
return
fPartials
;
}
bool
someAssemblyRequired
(
)
;
void
update
(
const
SkOpPtT
*
pt
)
;
SkPath
fCurrent
;
SkTArray
<
SkPath
>
fPartials
;
SkTDArray
<
const
SkOpPtT
*
>
fEndPtTs
;
SkPath
*
fPathPtr
;
const
SkOpPtT
*
fDefer
[
2
]
;
const
SkOpPtT
*
fFirstPtT
;
}
;
#
endif
