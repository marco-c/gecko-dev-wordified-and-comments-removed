#
include
"
SkOpAngle
.
h
"
#
include
"
SkOpSegment
.
h
"
#
include
"
SkPathOpsCurve
.
h
"
#
include
"
SkTSort
.
h
"
#
if
DEBUG_ANGLE
static
bool
CompareResult
(
const
char
*
func
SkString
*
bugOut
SkString
*
bugPart
int
append
bool
compare
)
{
SkDebugf
(
"
%
s
%
c
%
d
\
n
"
bugOut
-
>
c_str
(
)
compare
?
'
T
'
:
'
F
'
append
)
;
SkDebugf
(
"
%
sPart
%
s
\
n
"
func
bugPart
[
0
]
.
c_str
(
)
)
;
SkDebugf
(
"
%
sPart
%
s
\
n
"
func
bugPart
[
1
]
.
c_str
(
)
)
;
SkDebugf
(
"
%
sPart
%
s
\
n
"
func
bugPart
[
2
]
.
c_str
(
)
)
;
return
compare
;
}
#
define
COMPARE_RESULT
(
append
compare
)
CompareResult
(
__FUNCTION__
&
bugOut
bugPart
append
\
compare
)
#
else
#
define
COMPARE_RESULT
(
append
compare
)
compare
#
endif
bool
SkOpAngle
:
:
after
(
SkOpAngle
*
test
)
{
SkOpAngle
*
lh
=
test
;
SkOpAngle
*
rh
=
lh
-
>
fNext
;
SkASSERT
(
lh
!
=
rh
)
;
fPart
.
fCurve
=
fOriginalCurvePart
;
lh
-
>
fPart
.
fCurve
=
lh
-
>
fOriginalCurvePart
;
lh
-
>
fPart
.
fCurve
.
offset
(
lh
-
>
segment
(
)
-
>
verb
(
)
fPart
.
fCurve
[
0
]
-
lh
-
>
fPart
.
fCurve
[
0
]
)
;
rh
-
>
fPart
.
fCurve
=
rh
-
>
fOriginalCurvePart
;
rh
-
>
fPart
.
fCurve
.
offset
(
rh
-
>
segment
(
)
-
>
verb
(
)
fPart
.
fCurve
[
0
]
-
rh
-
>
fPart
.
fCurve
[
0
]
)
;
#
if
DEBUG_ANGLE
SkString
bugOut
;
bugOut
.
printf
(
"
%
s
[
%
d
/
%
d
]
%
d
/
%
d
tStart
=
%
1
.
9g
tEnd
=
%
1
.
9g
"
"
<
[
%
d
/
%
d
]
%
d
/
%
d
tStart
=
%
1
.
9g
tEnd
=
%
1
.
9g
"
"
<
[
%
d
/
%
d
]
%
d
/
%
d
tStart
=
%
1
.
9g
tEnd
=
%
1
.
9g
"
__FUNCTION__
lh
-
>
segment
(
)
-
>
debugID
(
)
lh
-
>
debugID
(
)
lh
-
>
fSectorStart
lh
-
>
fSectorEnd
lh
-
>
fStart
-
>
t
(
)
lh
-
>
fEnd
-
>
t
(
)
segment
(
)
-
>
debugID
(
)
debugID
(
)
fSectorStart
fSectorEnd
fStart
-
>
t
(
)
fEnd
-
>
t
(
)
rh
-
>
segment
(
)
-
>
debugID
(
)
rh
-
>
debugID
(
)
rh
-
>
fSectorStart
rh
-
>
fSectorEnd
rh
-
>
fStart
-
>
t
(
)
rh
-
>
fEnd
-
>
t
(
)
)
;
SkString
bugPart
[
3
]
=
{
lh
-
>
debugPart
(
)
this
-
>
debugPart
(
)
rh
-
>
debugPart
(
)
}
;
#
endif
if
(
lh
-
>
fComputeSector
&
&
!
lh
-
>
computeSector
(
)
)
{
return
COMPARE_RESULT
(
1
true
)
;
}
if
(
fComputeSector
&
&
!
this
-
>
computeSector
(
)
)
{
return
COMPARE_RESULT
(
2
true
)
;
}
if
(
rh
-
>
fComputeSector
&
&
!
rh
-
>
computeSector
(
)
)
{
return
COMPARE_RESULT
(
3
true
)
;
}
#
if
DEBUG_ANGLE
bugOut
.
printf
(
"
%
s
[
%
d
/
%
d
]
%
d
/
%
d
tStart
=
%
1
.
9g
tEnd
=
%
1
.
9g
"
"
<
[
%
d
/
%
d
]
%
d
/
%
d
tStart
=
%
1
.
9g
tEnd
=
%
1
.
9g
"
"
<
[
%
d
/
%
d
]
%
d
/
%
d
tStart
=
%
1
.
9g
tEnd
=
%
1
.
9g
"
__FUNCTION__
lh
-
>
segment
(
)
-
>
debugID
(
)
lh
-
>
debugID
(
)
lh
-
>
fSectorStart
lh
-
>
fSectorEnd
lh
-
>
fStart
-
>
t
(
)
lh
-
>
fEnd
-
>
t
(
)
segment
(
)
-
>
debugID
(
)
debugID
(
)
fSectorStart
fSectorEnd
fStart
-
>
t
(
)
fEnd
-
>
t
(
)
rh
-
>
segment
(
)
-
>
debugID
(
)
rh
-
>
debugID
(
)
rh
-
>
fSectorStart
rh
-
>
fSectorEnd
rh
-
>
fStart
-
>
t
(
)
rh
-
>
fEnd
-
>
t
(
)
)
;
#
endif
bool
ltrOverlap
=
(
lh
-
>
fSectorMask
|
rh
-
>
fSectorMask
)
&
fSectorMask
;
bool
lrOverlap
=
lh
-
>
fSectorMask
&
rh
-
>
fSectorMask
;
int
lrOrder
;
if
(
!
lrOverlap
)
{
if
(
!
ltrOverlap
)
{
return
COMPARE_RESULT
(
4
(
lh
-
>
fSectorEnd
>
rh
-
>
fSectorStart
)
^
(
fSectorStart
>
lh
-
>
fSectorEnd
)
^
(
fSectorStart
>
rh
-
>
fSectorStart
)
)
;
}
int
lrGap
=
(
rh
-
>
fSectorStart
-
lh
-
>
fSectorStart
+
32
)
&
0x1f
;
lrOrder
=
lrGap
>
20
?
0
:
lrGap
>
11
?
-
1
:
1
;
}
else
{
lrOrder
=
lh
-
>
orderable
(
rh
)
;
if
(
!
ltrOverlap
&
&
lrOrder
>
=
0
)
{
return
COMPARE_RESULT
(
5
!
lrOrder
)
;
}
}
int
ltOrder
;
SkASSERT
(
(
lh
-
>
fSectorMask
&
fSectorMask
)
|
|
(
rh
-
>
fSectorMask
&
fSectorMask
)
|
|
-
1
=
=
lrOrder
)
;
if
(
lh
-
>
fSectorMask
&
fSectorMask
)
{
ltOrder
=
lh
-
>
orderable
(
this
)
;
}
else
{
int
ltGap
=
(
fSectorStart
-
lh
-
>
fSectorStart
+
32
)
&
0x1f
;
ltOrder
=
ltGap
>
20
?
0
:
ltGap
>
11
?
-
1
:
1
;
}
int
trOrder
;
if
(
rh
-
>
fSectorMask
&
fSectorMask
)
{
trOrder
=
this
-
>
orderable
(
rh
)
;
}
else
{
int
trGap
=
(
rh
-
>
fSectorStart
-
fSectorStart
+
32
)
&
0x1f
;
trOrder
=
trGap
>
20
?
0
:
trGap
>
11
?
-
1
:
1
;
}
this
-
>
alignmentSameSide
(
lh
&
ltOrder
)
;
this
-
>
alignmentSameSide
(
rh
&
trOrder
)
;
if
(
lrOrder
>
=
0
&
&
ltOrder
>
=
0
&
&
trOrder
>
=
0
)
{
return
COMPARE_RESULT
(
7
lrOrder
?
(
ltOrder
&
trOrder
)
:
(
ltOrder
|
trOrder
)
)
;
}
if
(
ltOrder
=
=
0
&
&
lrOrder
=
=
0
)
{
SkASSERT
(
trOrder
<
0
)
;
SkDEBUGCODE
(
bool
lrOpposite
=
lh
-
>
oppositePlanes
(
rh
)
)
;
bool
ltOpposite
=
lh
-
>
oppositePlanes
(
this
)
;
SkOPASSERT
(
lrOpposite
!
=
ltOpposite
)
;
return
COMPARE_RESULT
(
8
ltOpposite
)
;
}
else
if
(
ltOrder
=
=
1
&
&
trOrder
=
=
0
)
{
SkASSERT
(
lrOrder
<
0
)
;
bool
trOpposite
=
oppositePlanes
(
rh
)
;
return
COMPARE_RESULT
(
9
trOpposite
)
;
}
else
if
(
lrOrder
=
=
1
&
&
trOrder
=
=
1
)
{
SkASSERT
(
ltOrder
<
0
)
;
bool
lrOpposite
=
lh
-
>
oppositePlanes
(
rh
)
;
return
COMPARE_RESULT
(
10
lrOpposite
)
;
}
if
(
fUnorderable
|
|
lh
-
>
fUnorderable
|
|
rh
-
>
fUnorderable
)
{
if
(
!
fPart
.
isCurve
(
)
&
&
!
lh
-
>
fPart
.
isCurve
(
)
&
&
!
rh
-
>
fPart
.
isCurve
(
)
)
{
int
ltShare
=
lh
-
>
fOriginalCurvePart
[
0
]
=
=
fOriginalCurvePart
[
0
]
;
int
lrShare
=
lh
-
>
fOriginalCurvePart
[
0
]
=
=
rh
-
>
fOriginalCurvePart
[
0
]
;
int
trShare
=
fOriginalCurvePart
[
0
]
=
=
rh
-
>
fOriginalCurvePart
[
0
]
;
if
(
ltShare
+
lrShare
+
trShare
=
=
1
)
{
if
(
lrShare
)
{
int
ltOOrder
=
lh
-
>
allOnOriginalSide
(
this
)
;
int
rtOOrder
=
rh
-
>
allOnOriginalSide
(
this
)
;
if
(
(
rtOOrder
^
ltOOrder
)
=
=
1
)
{
return
ltOOrder
;
}
}
else
if
(
trShare
)
{
int
tlOOrder
=
this
-
>
allOnOriginalSide
(
lh
)
;
int
rlOOrder
=
rh
-
>
allOnOriginalSide
(
lh
)
;
if
(
(
tlOOrder
^
rlOOrder
)
=
=
1
)
{
return
rlOOrder
;
}
}
else
{
SkASSERT
(
ltShare
)
;
int
trOOrder
=
rh
-
>
allOnOriginalSide
(
this
)
;
int
lrOOrder
=
lh
-
>
allOnOriginalSide
(
rh
)
;
if
(
(
lrOOrder
^
trOOrder
)
=
=
1
)
{
return
trOOrder
;
}
}
}
}
}
if
(
lrOrder
<
0
)
{
if
(
ltOrder
<
0
)
{
return
COMPARE_RESULT
(
11
trOrder
)
;
}
return
COMPARE_RESULT
(
12
ltOrder
)
;
}
return
COMPARE_RESULT
(
13
!
lrOrder
)
;
}
int
SkOpAngle
:
:
allOnOneSide
(
const
SkOpAngle
*
test
)
{
SkASSERT
(
!
fPart
.
isCurve
(
)
)
;
SkASSERT
(
test
-
>
fPart
.
isCurve
(
)
)
;
SkDPoint
origin
=
fPart
.
fCurve
[
0
]
;
SkDVector
line
=
fPart
.
fCurve
[
1
]
-
origin
;
double
crosses
[
3
]
;
SkPath
:
:
Verb
testVerb
=
test
-
>
segment
(
)
-
>
verb
(
)
;
int
iMax
=
SkPathOpsVerbToPoints
(
testVerb
)
;
const
SkDCurve
&
testCurve
=
test
-
>
fPart
.
fCurve
;
for
(
int
index
=
1
;
index
<
=
iMax
;
+
+
index
)
{
double
xy1
=
line
.
fX
*
(
testCurve
[
index
]
.
fY
-
origin
.
fY
)
;
double
xy2
=
line
.
fY
*
(
testCurve
[
index
]
.
fX
-
origin
.
fX
)
;
crosses
[
index
-
1
]
=
AlmostBequalUlps
(
xy1
xy2
)
?
0
:
xy1
-
xy2
;
}
if
(
crosses
[
0
]
*
crosses
[
1
]
<
0
)
{
return
-
1
;
}
if
(
SkPath
:
:
kCubic_Verb
=
=
testVerb
)
{
if
(
crosses
[
0
]
*
crosses
[
2
]
<
0
|
|
crosses
[
1
]
*
crosses
[
2
]
<
0
)
{
return
-
1
;
}
}
if
(
crosses
[
0
]
)
{
return
crosses
[
0
]
<
0
;
}
if
(
crosses
[
1
]
)
{
return
crosses
[
1
]
<
0
;
}
if
(
SkPath
:
:
kCubic_Verb
=
=
testVerb
&
&
crosses
[
2
]
)
{
return
crosses
[
2
]
<
0
;
}
fUnorderable
=
true
;
return
-
1
;
}
int
SkOpAngle
:
:
allOnOriginalSide
(
const
SkOpAngle
*
test
)
{
SkASSERT
(
!
fPart
.
isCurve
(
)
)
;
SkASSERT
(
!
test
-
>
fPart
.
isCurve
(
)
)
;
SkDPoint
origin
=
fOriginalCurvePart
[
0
]
;
SkDVector
line
=
fOriginalCurvePart
[
1
]
-
origin
;
double
dots
[
2
]
;
double
crosses
[
2
]
;
const
SkDCurve
&
testCurve
=
test
-
>
fOriginalCurvePart
;
for
(
int
index
=
0
;
index
<
2
;
+
+
index
)
{
SkDVector
testLine
=
testCurve
[
index
]
-
origin
;
double
xy1
=
line
.
fX
*
testLine
.
fY
;
double
xy2
=
line
.
fY
*
testLine
.
fX
;
dots
[
index
]
=
line
.
fX
*
testLine
.
fX
+
line
.
fY
*
testLine
.
fY
;
crosses
[
index
]
=
AlmostBequalUlps
(
xy1
xy2
)
?
0
:
xy1
-
xy2
;
}
if
(
crosses
[
0
]
*
crosses
[
1
]
<
0
)
{
return
-
1
;
}
if
(
crosses
[
0
]
)
{
return
crosses
[
0
]
<
0
;
}
if
(
crosses
[
1
]
)
{
return
crosses
[
1
]
<
0
;
}
if
(
(
!
dots
[
0
]
&
&
dots
[
1
]
<
0
)
|
|
(
dots
[
0
]
<
0
&
&
!
dots
[
1
]
)
)
{
return
2
;
}
fUnorderable
=
true
;
return
-
1
;
}
void
SkOpAngle
:
:
alignmentSameSide
(
const
SkOpAngle
*
test
int
*
order
)
const
{
if
(
*
order
<
0
)
{
return
;
}
if
(
fPart
.
isCurve
(
)
)
{
return
;
}
if
(
test
-
>
fPart
.
isCurve
(
)
)
{
return
;
}
const
SkDPoint
&
xOrigin
=
test
-
>
fPart
.
fCurve
.
fLine
[
0
]
;
const
SkDPoint
&
oOrigin
=
test
-
>
fOriginalCurvePart
.
fLine
[
0
]
;
if
(
xOrigin
=
=
oOrigin
)
{
return
;
}
int
iMax
=
SkPathOpsVerbToPoints
(
this
-
>
segment
(
)
-
>
verb
(
)
)
;
SkDVector
xLine
=
test
-
>
fPart
.
fCurve
.
fLine
[
1
]
-
xOrigin
;
SkDVector
oLine
=
test
-
>
fOriginalCurvePart
.
fLine
[
1
]
-
oOrigin
;
for
(
int
index
=
1
;
index
<
=
iMax
;
+
+
index
)
{
const
SkDPoint
&
testPt
=
fPart
.
fCurve
[
index
]
;
double
xCross
=
oLine
.
crossCheck
(
testPt
-
xOrigin
)
;
double
oCross
=
xLine
.
crossCheck
(
testPt
-
oOrigin
)
;
if
(
oCross
*
xCross
<
0
)
{
*
order
^
=
1
;
break
;
}
}
}
bool
SkOpAngle
:
:
checkCrossesZero
(
)
const
{
int
start
=
SkTMin
(
fSectorStart
fSectorEnd
)
;
int
end
=
SkTMax
(
fSectorStart
fSectorEnd
)
;
bool
crossesZero
=
end
-
start
>
16
;
return
crossesZero
;
}
bool
SkOpAngle
:
:
checkParallel
(
SkOpAngle
*
rh
)
{
SkDVector
scratch
[
2
]
;
const
SkDVector
*
sweep
*
tweep
;
if
(
this
-
>
fPart
.
isOrdered
(
)
)
{
sweep
=
this
-
>
fPart
.
fSweep
;
}
else
{
scratch
[
0
]
=
this
-
>
fPart
.
fCurve
[
1
]
-
this
-
>
fPart
.
fCurve
[
0
]
;
sweep
=
&
scratch
[
0
]
;
}
if
(
rh
-
>
fPart
.
isOrdered
(
)
)
{
tweep
=
rh
-
>
fPart
.
fSweep
;
}
else
{
scratch
[
1
]
=
rh
-
>
fPart
.
fCurve
[
1
]
-
rh
-
>
fPart
.
fCurve
[
0
]
;
tweep
=
&
scratch
[
1
]
;
}
double
s0xt0
=
sweep
-
>
crossCheck
(
*
tweep
)
;
if
(
tangentsDiverge
(
rh
s0xt0
)
)
{
return
s0xt0
<
0
;
}
bool
inside
;
if
(
!
fEnd
-
>
contains
(
rh
-
>
fEnd
)
)
{
if
(
this
-
>
endToSide
(
rh
&
inside
)
)
{
return
inside
;
}
if
(
rh
-
>
endToSide
(
this
&
inside
)
)
{
return
!
inside
;
}
}
if
(
this
-
>
midToSide
(
rh
&
inside
)
)
{
return
inside
;
}
if
(
rh
-
>
midToSide
(
this
&
inside
)
)
{
return
!
inside
;
}
SkDVector
m0
=
segment
(
)
-
>
dPtAtT
(
this
-
>
midT
(
)
)
-
this
-
>
fPart
.
fCurve
[
0
]
;
SkDVector
m1
=
rh
-
>
segment
(
)
-
>
dPtAtT
(
rh
-
>
midT
(
)
)
-
rh
-
>
fPart
.
fCurve
[
0
]
;
double
m0xm1
=
m0
.
crossCheck
(
m1
)
;
if
(
m0xm1
=
=
0
)
{
this
-
>
fUnorderable
=
true
;
rh
-
>
fUnorderable
=
true
;
return
true
;
}
return
m0xm1
<
0
;
}
bool
SkOpAngle
:
:
computeSector
(
)
{
if
(
fComputedSector
)
{
return
!
fUnorderable
;
}
fComputedSector
=
true
;
bool
stepUp
=
fStart
-
>
t
(
)
<
fEnd
-
>
t
(
)
;
SkOpSpanBase
*
checkEnd
=
fEnd
;
if
(
checkEnd
-
>
final
(
)
&
&
stepUp
)
{
fUnorderable
=
true
;
return
false
;
}
do
{
const
SkOpSegment
*
other
=
checkEnd
-
>
segment
(
)
;
const
SkOpSpanBase
*
oSpan
=
other
-
>
head
(
)
;
do
{
if
(
oSpan
-
>
segment
(
)
!
=
segment
(
)
)
{
continue
;
}
if
(
oSpan
=
=
checkEnd
)
{
continue
;
}
if
(
!
approximately_equal
(
oSpan
-
>
t
(
)
checkEnd
-
>
t
(
)
)
)
{
continue
;
}
goto
recomputeSector
;
}
while
(
!
oSpan
-
>
final
(
)
&
&
(
oSpan
=
oSpan
-
>
upCast
(
)
-
>
next
(
)
)
)
;
checkEnd
=
stepUp
?
!
checkEnd
-
>
final
(
)
?
checkEnd
-
>
upCast
(
)
-
>
next
(
)
:
nullptr
:
checkEnd
-
>
prev
(
)
;
}
while
(
checkEnd
)
;
recomputeSector
:
SkOpSpanBase
*
computedEnd
=
stepUp
?
checkEnd
?
checkEnd
-
>
prev
(
)
:
fEnd
-
>
segment
(
)
-
>
head
(
)
:
checkEnd
?
checkEnd
-
>
upCast
(
)
-
>
next
(
)
:
fEnd
-
>
segment
(
)
-
>
tail
(
)
;
if
(
checkEnd
=
=
fEnd
|
|
computedEnd
=
=
fEnd
|
|
computedEnd
=
=
fStart
)
{
fUnorderable
=
true
;
return
false
;
}
if
(
stepUp
!
=
(
fStart
-
>
t
(
)
<
computedEnd
-
>
t
(
)
)
)
{
fUnorderable
=
true
;
return
false
;
}
SkOpSpanBase
*
saveEnd
=
fEnd
;
fComputedEnd
=
fEnd
=
computedEnd
;
setSpans
(
)
;
setSector
(
)
;
fEnd
=
saveEnd
;
return
!
fUnorderable
;
}
int
SkOpAngle
:
:
convexHullOverlaps
(
const
SkOpAngle
*
rh
)
{
const
SkDVector
*
sweep
=
this
-
>
fPart
.
fSweep
;
const
SkDVector
*
tweep
=
rh
-
>
fPart
.
fSweep
;
double
s0xs1
=
sweep
[
0
]
.
crossCheck
(
sweep
[
1
]
)
;
double
s0xt0
=
sweep
[
0
]
.
crossCheck
(
tweep
[
0
]
)
;
double
s1xt0
=
sweep
[
1
]
.
crossCheck
(
tweep
[
0
]
)
;
bool
tBetweenS
=
s0xs1
>
0
?
s0xt0
>
0
&
&
s1xt0
<
0
:
s0xt0
<
0
&
&
s1xt0
>
0
;
double
s0xt1
=
sweep
[
0
]
.
crossCheck
(
tweep
[
1
]
)
;
double
s1xt1
=
sweep
[
1
]
.
crossCheck
(
tweep
[
1
]
)
;
tBetweenS
|
=
s0xs1
>
0
?
s0xt1
>
0
&
&
s1xt1
<
0
:
s0xt1
<
0
&
&
s1xt1
>
0
;
double
t0xt1
=
tweep
[
0
]
.
crossCheck
(
tweep
[
1
]
)
;
if
(
tBetweenS
)
{
return
-
1
;
}
if
(
(
s0xt0
=
=
0
&
&
s1xt1
=
=
0
)
|
|
(
s1xt0
=
=
0
&
&
s0xt1
=
=
0
)
)
{
return
-
1
;
}
bool
sBetweenT
=
t0xt1
>
0
?
s0xt0
<
0
&
&
s0xt1
>
0
:
s0xt0
>
0
&
&
s0xt1
<
0
;
sBetweenT
|
=
t0xt1
>
0
?
s1xt0
<
0
&
&
s1xt1
>
0
:
s1xt0
>
0
&
&
s1xt1
<
0
;
if
(
sBetweenT
)
{
return
-
1
;
}
if
(
s0xt0
>
=
0
&
&
s0xt1
>
=
0
&
&
s1xt0
>
=
0
&
&
s1xt1
>
=
0
)
{
return
0
;
}
if
(
s0xt0
<
=
0
&
&
s0xt1
<
=
0
&
&
s1xt0
<
=
0
&
&
s1xt1
<
=
0
)
{
return
1
;
}
SkDVector
m0
=
this
-
>
segment
(
)
-
>
dPtAtT
(
this
-
>
midT
(
)
)
-
this
-
>
fPart
.
fCurve
[
0
]
;
SkDVector
m1
=
rh
-
>
segment
(
)
-
>
dPtAtT
(
rh
-
>
midT
(
)
)
-
rh
-
>
fPart
.
fCurve
[
0
]
;
double
m0xm1
=
m0
.
crossCheck
(
m1
)
;
if
(
s0xt0
>
0
&
&
m0xm1
>
0
)
{
return
0
;
}
if
(
s0xt0
<
0
&
&
m0xm1
<
0
)
{
return
1
;
}
if
(
tangentsDiverge
(
rh
s0xt0
)
)
{
return
s0xt0
<
0
;
}
return
m0xm1
<
0
;
}
double
SkOpAngle
:
:
distEndRatio
(
double
dist
)
const
{
double
longest
=
0
;
const
SkOpSegment
&
segment
=
*
this
-
>
segment
(
)
;
int
ptCount
=
SkPathOpsVerbToPoints
(
segment
.
verb
(
)
)
;
const
SkPoint
*
pts
=
segment
.
pts
(
)
;
for
(
int
idx1
=
0
;
idx1
<
=
ptCount
-
1
;
+
+
idx1
)
{
for
(
int
idx2
=
idx1
+
1
;
idx2
<
=
ptCount
;
+
+
idx2
)
{
if
(
idx1
=
=
idx2
)
{
continue
;
}
SkDVector
v
;
v
.
set
(
pts
[
idx2
]
-
pts
[
idx1
]
)
;
double
lenSq
=
v
.
lengthSquared
(
)
;
longest
=
SkTMax
(
longest
lenSq
)
;
}
}
return
sqrt
(
longest
)
/
dist
;
}
bool
SkOpAngle
:
:
endsIntersect
(
SkOpAngle
*
rh
)
{
SkPath
:
:
Verb
lVerb
=
this
-
>
segment
(
)
-
>
verb
(
)
;
SkPath
:
:
Verb
rVerb
=
rh
-
>
segment
(
)
-
>
verb
(
)
;
int
lPts
=
SkPathOpsVerbToPoints
(
lVerb
)
;
int
rPts
=
SkPathOpsVerbToPoints
(
rVerb
)
;
SkDLine
rays
[
]
=
{
{
{
this
-
>
fPart
.
fCurve
[
0
]
rh
-
>
fPart
.
fCurve
[
rPts
]
}
}
{
{
this
-
>
fPart
.
fCurve
[
0
]
this
-
>
fPart
.
fCurve
[
lPts
]
}
}
}
;
if
(
this
-
>
fEnd
-
>
contains
(
rh
-
>
fEnd
)
)
{
return
checkParallel
(
rh
)
;
}
double
smallTs
[
2
]
=
{
-
1
-
1
}
;
bool
limited
[
2
]
=
{
false
false
}
;
for
(
int
index
=
0
;
index
<
2
;
+
+
index
)
{
SkPath
:
:
Verb
cVerb
=
index
?
rVerb
:
lVerb
;
if
(
cVerb
=
=
SkPath
:
:
kLine_Verb
)
{
continue
;
}
const
SkOpSegment
&
segment
=
index
?
*
rh
-
>
segment
(
)
:
*
this
-
>
segment
(
)
;
SkIntersections
i
;
(
*
CurveIntersectRay
[
cVerb
]
)
(
segment
.
pts
(
)
segment
.
weight
(
)
rays
[
index
]
&
i
)
;
double
tStart
=
index
?
rh
-
>
fStart
-
>
t
(
)
:
this
-
>
fStart
-
>
t
(
)
;
double
tEnd
=
index
?
rh
-
>
fComputedEnd
-
>
t
(
)
:
this
-
>
fComputedEnd
-
>
t
(
)
;
bool
testAscends
=
tStart
<
(
index
?
rh
-
>
fComputedEnd
-
>
t
(
)
:
this
-
>
fComputedEnd
-
>
t
(
)
)
;
double
t
=
testAscends
?
0
:
1
;
for
(
int
idx2
=
0
;
idx2
<
i
.
used
(
)
;
+
+
idx2
)
{
double
testT
=
i
[
0
]
[
idx2
]
;
if
(
!
approximately_between_orderable
(
tStart
testT
tEnd
)
)
{
continue
;
}
if
(
approximately_equal_orderable
(
tStart
testT
)
)
{
continue
;
}
smallTs
[
index
]
=
t
=
testAscends
?
SkTMax
(
t
testT
)
:
SkTMin
(
t
testT
)
;
limited
[
index
]
=
approximately_equal_orderable
(
t
tEnd
)
;
}
}
bool
sRayLonger
=
false
;
SkDVector
sCept
=
{
0
0
}
;
double
sCeptT
=
-
1
;
int
sIndex
=
-
1
;
bool
useIntersect
=
false
;
for
(
int
index
=
0
;
index
<
2
;
+
+
index
)
{
if
(
smallTs
[
index
]
<
0
)
{
continue
;
}
const
SkOpSegment
&
segment
=
index
?
*
rh
-
>
segment
(
)
:
*
this
-
>
segment
(
)
;
const
SkDPoint
&
dPt
=
segment
.
dPtAtT
(
smallTs
[
index
]
)
;
SkDVector
cept
=
dPt
-
rays
[
index
]
[
0
]
;
if
(
(
index
?
lPts
:
rPts
)
=
=
1
)
{
SkDVector
total
=
rays
[
index
]
[
1
]
-
rays
[
index
]
[
0
]
;
if
(
cept
.
lengthSquared
(
)
*
2
<
total
.
lengthSquared
(
)
)
{
continue
;
}
}
SkDVector
end
=
rays
[
index
]
[
1
]
-
rays
[
index
]
[
0
]
;
if
(
cept
.
fX
*
end
.
fX
<
0
|
|
cept
.
fY
*
end
.
fY
<
0
)
{
continue
;
}
double
rayDist
=
cept
.
length
(
)
;
double
endDist
=
end
.
length
(
)
;
bool
rayLonger
=
rayDist
>
endDist
;
if
(
limited
[
0
]
&
&
limited
[
1
]
&
&
rayLonger
)
{
useIntersect
=
true
;
sRayLonger
=
rayLonger
;
sCept
=
cept
;
sCeptT
=
smallTs
[
index
]
;
sIndex
=
index
;
break
;
}
double
delta
=
fabs
(
rayDist
-
endDist
)
;
double
minX
minY
maxX
maxY
;
minX
=
minY
=
SK_ScalarInfinity
;
maxX
=
maxY
=
-
SK_ScalarInfinity
;
const
SkDCurve
&
curve
=
index
?
rh
-
>
fPart
.
fCurve
:
this
-
>
fPart
.
fCurve
;
int
ptCount
=
index
?
rPts
:
lPts
;
for
(
int
idx2
=
0
;
idx2
<
=
ptCount
;
+
+
idx2
)
{
minX
=
SkTMin
(
minX
curve
[
idx2
]
.
fX
)
;
minY
=
SkTMin
(
minY
curve
[
idx2
]
.
fY
)
;
maxX
=
SkTMax
(
maxX
curve
[
idx2
]
.
fX
)
;
maxY
=
SkTMax
(
maxY
curve
[
idx2
]
.
fY
)
;
}
double
maxWidth
=
SkTMax
(
maxX
-
minX
maxY
-
minY
)
;
delta
/
=
maxWidth
;
if
(
delta
>
1e
-
3
&
&
(
useIntersect
^
=
true
)
)
{
sRayLonger
=
rayLonger
;
sCept
=
cept
;
sCeptT
=
smallTs
[
index
]
;
sIndex
=
index
;
}
}
if
(
useIntersect
)
{
const
SkDCurve
&
curve
=
sIndex
?
rh
-
>
fPart
.
fCurve
:
this
-
>
fPart
.
fCurve
;
const
SkOpSegment
&
segment
=
sIndex
?
*
rh
-
>
segment
(
)
:
*
this
-
>
segment
(
)
;
double
tStart
=
sIndex
?
rh
-
>
fStart
-
>
t
(
)
:
fStart
-
>
t
(
)
;
SkDVector
mid
=
segment
.
dPtAtT
(
tStart
+
(
sCeptT
-
tStart
)
/
2
)
-
curve
[
0
]
;
double
septDir
=
mid
.
crossCheck
(
sCept
)
;
if
(
!
septDir
)
{
return
checkParallel
(
rh
)
;
}
return
sRayLonger
^
(
sIndex
=
=
0
)
^
(
septDir
<
0
)
;
}
else
{
return
checkParallel
(
rh
)
;
}
}
bool
SkOpAngle
:
:
endToSide
(
const
SkOpAngle
*
rh
bool
*
inside
)
const
{
const
SkOpSegment
*
segment
=
this
-
>
segment
(
)
;
SkPath
:
:
Verb
verb
=
segment
-
>
verb
(
)
;
SkDLine
rayEnd
;
rayEnd
[
0
]
.
set
(
this
-
>
fEnd
-
>
pt
(
)
)
;
rayEnd
[
1
]
=
rayEnd
[
0
]
;
SkDVector
slopeAtEnd
=
(
*
CurveDSlopeAtT
[
verb
]
)
(
segment
-
>
pts
(
)
segment
-
>
weight
(
)
this
-
>
fEnd
-
>
t
(
)
)
;
rayEnd
[
1
]
.
fX
+
=
slopeAtEnd
.
fY
;
rayEnd
[
1
]
.
fY
-
=
slopeAtEnd
.
fX
;
SkIntersections
iEnd
;
const
SkOpSegment
*
oppSegment
=
rh
-
>
segment
(
)
;
SkPath
:
:
Verb
oppVerb
=
oppSegment
-
>
verb
(
)
;
(
*
CurveIntersectRay
[
oppVerb
]
)
(
oppSegment
-
>
pts
(
)
oppSegment
-
>
weight
(
)
rayEnd
&
iEnd
)
;
double
endDist
;
int
closestEnd
=
iEnd
.
closestTo
(
rh
-
>
fStart
-
>
t
(
)
rh
-
>
fEnd
-
>
t
(
)
rayEnd
[
0
]
&
endDist
)
;
if
(
closestEnd
<
0
)
{
return
false
;
}
if
(
!
endDist
)
{
return
false
;
}
SkDPoint
start
;
start
.
set
(
this
-
>
fStart
-
>
pt
(
)
)
;
double
minX
minY
maxX
maxY
;
minX
=
minY
=
SK_ScalarInfinity
;
maxX
=
maxY
=
-
SK_ScalarInfinity
;
const
SkDCurve
&
curve
=
rh
-
>
fPart
.
fCurve
;
int
oppPts
=
SkPathOpsVerbToPoints
(
oppVerb
)
;
for
(
int
idx2
=
0
;
idx2
<
=
oppPts
;
+
+
idx2
)
{
minX
=
SkTMin
(
minX
curve
[
idx2
]
.
fX
)
;
minY
=
SkTMin
(
minY
curve
[
idx2
]
.
fY
)
;
maxX
=
SkTMax
(
maxX
curve
[
idx2
]
.
fX
)
;
maxY
=
SkTMax
(
maxY
curve
[
idx2
]
.
fY
)
;
}
double
maxWidth
=
SkTMax
(
maxX
-
minX
maxY
-
minY
)
;
endDist
/
=
maxWidth
;
if
(
endDist
<
5e
-
12
)
{
return
false
;
}
const
SkDPoint
*
endPt
=
&
rayEnd
[
0
]
;
SkDPoint
oppPt
=
iEnd
.
pt
(
closestEnd
)
;
SkDVector
vLeft
=
*
endPt
-
start
;
SkDVector
vRight
=
oppPt
-
start
;
double
dir
=
vLeft
.
crossNoNormalCheck
(
vRight
)
;
if
(
!
dir
)
{
return
false
;
}
*
inside
=
dir
<
0
;
return
true
;
}
int
SkOpAngle
:
:
findSector
(
SkPath
:
:
Verb
verb
double
x
double
y
)
const
{
double
absX
=
fabs
(
x
)
;
double
absY
=
fabs
(
y
)
;
double
xy
=
SkPath
:
:
kLine_Verb
=
=
verb
|
|
!
AlmostEqualUlps
(
absX
absY
)
?
absX
-
absY
:
0
;
static
const
int
sedecimant
[
3
]
[
3
]
[
3
]
=
{
{
{
4
3
2
}
{
7
-
1
15
}
{
10
11
12
}
}
{
{
5
-
1
1
}
{
-
1
-
1
-
1
}
{
9
-
1
13
}
}
{
{
6
3
0
}
{
7
-
1
15
}
{
8
11
14
}
}
}
;
int
sector
=
sedecimant
[
(
xy
>
=
0
)
+
(
xy
>
0
)
]
[
(
y
>
=
0
)
+
(
y
>
0
)
]
[
(
x
>
=
0
)
+
(
x
>
0
)
]
*
2
+
1
;
return
sector
;
}
SkOpGlobalState
*
SkOpAngle
:
:
globalState
(
)
const
{
return
this
-
>
segment
(
)
-
>
globalState
(
)
;
}
bool
SkOpAngle
:
:
insert
(
SkOpAngle
*
angle
)
{
if
(
angle
-
>
fNext
)
{
if
(
loopCount
(
)
>
=
angle
-
>
loopCount
(
)
)
{
if
(
!
merge
(
angle
)
)
{
return
true
;
}
}
else
if
(
fNext
)
{
if
(
!
angle
-
>
merge
(
this
)
)
{
return
true
;
}
}
else
{
angle
-
>
insert
(
this
)
;
}
return
true
;
}
bool
singleton
=
nullptr
=
=
fNext
;
if
(
singleton
)
{
fNext
=
this
;
}
SkOpAngle
*
next
=
fNext
;
if
(
next
-
>
fNext
=
=
this
)
{
if
(
singleton
|
|
angle
-
>
after
(
this
)
)
{
this
-
>
fNext
=
angle
;
angle
-
>
fNext
=
next
;
}
else
{
next
-
>
fNext
=
angle
;
angle
-
>
fNext
=
this
;
}
debugValidateNext
(
)
;
return
true
;
}
SkOpAngle
*
last
=
this
;
bool
flipAmbiguity
=
false
;
do
{
SkASSERT
(
last
-
>
fNext
=
=
next
)
;
if
(
angle
-
>
after
(
last
)
^
(
angle
-
>
tangentsAmbiguous
(
)
&
flipAmbiguity
)
)
{
last
-
>
fNext
=
angle
;
angle
-
>
fNext
=
next
;
debugValidateNext
(
)
;
return
true
;
}
last
=
next
;
if
(
last
=
=
this
)
{
FAIL_IF
(
flipAmbiguity
)
;
flipAmbiguity
=
true
;
}
next
=
next
-
>
fNext
;
}
while
(
true
)
;
return
true
;
}
SkOpSpanBase
*
SkOpAngle
:
:
lastMarked
(
)
const
{
if
(
fLastMarked
)
{
if
(
fLastMarked
-
>
chased
(
)
)
{
return
nullptr
;
}
fLastMarked
-
>
setChased
(
true
)
;
}
return
fLastMarked
;
}
bool
SkOpAngle
:
:
loopContains
(
const
SkOpAngle
*
angle
)
const
{
if
(
!
fNext
)
{
return
false
;
}
const
SkOpAngle
*
first
=
this
;
const
SkOpAngle
*
loop
=
this
;
const
SkOpSegment
*
tSegment
=
angle
-
>
fStart
-
>
segment
(
)
;
double
tStart
=
angle
-
>
fStart
-
>
t
(
)
;
double
tEnd
=
angle
-
>
fEnd
-
>
t
(
)
;
do
{
const
SkOpSegment
*
lSegment
=
loop
-
>
fStart
-
>
segment
(
)
;
if
(
lSegment
!
=
tSegment
)
{
continue
;
}
double
lStart
=
loop
-
>
fStart
-
>
t
(
)
;
if
(
lStart
!
=
tEnd
)
{
continue
;
}
double
lEnd
=
loop
-
>
fEnd
-
>
t
(
)
;
if
(
lEnd
=
=
tStart
)
{
return
true
;
}
}
while
(
(
loop
=
loop
-
>
fNext
)
!
=
first
)
;
return
false
;
}
int
SkOpAngle
:
:
loopCount
(
)
const
{
int
count
=
0
;
const
SkOpAngle
*
first
=
this
;
const
SkOpAngle
*
next
=
this
;
do
{
next
=
next
-
>
fNext
;
+
+
count
;
}
while
(
next
&
&
next
!
=
first
)
;
return
count
;
}
bool
SkOpAngle
:
:
merge
(
SkOpAngle
*
angle
)
{
SkASSERT
(
fNext
)
;
SkASSERT
(
angle
-
>
fNext
)
;
SkOpAngle
*
working
=
angle
;
do
{
if
(
this
=
=
working
)
{
return
false
;
}
working
=
working
-
>
fNext
;
}
while
(
working
!
=
angle
)
;
do
{
SkOpAngle
*
next
=
working
-
>
fNext
;
working
-
>
fNext
=
nullptr
;
insert
(
working
)
;
working
=
next
;
}
while
(
working
!
=
angle
)
;
debugValidateNext
(
)
;
return
true
;
}
double
SkOpAngle
:
:
midT
(
)
const
{
return
(
fStart
-
>
t
(
)
+
fEnd
-
>
t
(
)
)
/
2
;
}
bool
SkOpAngle
:
:
midToSide
(
const
SkOpAngle
*
rh
bool
*
inside
)
const
{
const
SkOpSegment
*
segment
=
this
-
>
segment
(
)
;
SkPath
:
:
Verb
verb
=
segment
-
>
verb
(
)
;
const
SkPoint
&
startPt
=
this
-
>
fStart
-
>
pt
(
)
;
const
SkPoint
&
endPt
=
this
-
>
fEnd
-
>
pt
(
)
;
SkDPoint
dStartPt
;
dStartPt
.
set
(
startPt
)
;
SkDLine
rayMid
;
rayMid
[
0
]
.
fX
=
(
startPt
.
fX
+
endPt
.
fX
)
/
2
;
rayMid
[
0
]
.
fY
=
(
startPt
.
fY
+
endPt
.
fY
)
/
2
;
rayMid
[
1
]
.
fX
=
rayMid
[
0
]
.
fX
+
(
endPt
.
fY
-
startPt
.
fY
)
;
rayMid
[
1
]
.
fY
=
rayMid
[
0
]
.
fY
-
(
endPt
.
fX
-
startPt
.
fX
)
;
SkIntersections
iMid
;
(
*
CurveIntersectRay
[
verb
]
)
(
segment
-
>
pts
(
)
segment
-
>
weight
(
)
rayMid
&
iMid
)
;
int
iOutside
=
iMid
.
mostOutside
(
this
-
>
fStart
-
>
t
(
)
this
-
>
fEnd
-
>
t
(
)
dStartPt
)
;
if
(
iOutside
<
0
)
{
return
false
;
}
const
SkOpSegment
*
oppSegment
=
rh
-
>
segment
(
)
;
SkPath
:
:
Verb
oppVerb
=
oppSegment
-
>
verb
(
)
;
SkIntersections
oppMid
;
(
*
CurveIntersectRay
[
oppVerb
]
)
(
oppSegment
-
>
pts
(
)
oppSegment
-
>
weight
(
)
rayMid
&
oppMid
)
;
int
oppOutside
=
oppMid
.
mostOutside
(
rh
-
>
fStart
-
>
t
(
)
rh
-
>
fEnd
-
>
t
(
)
dStartPt
)
;
if
(
oppOutside
<
0
)
{
return
false
;
}
SkDVector
iSide
=
iMid
.
pt
(
iOutside
)
-
dStartPt
;
SkDVector
oppSide
=
oppMid
.
pt
(
oppOutside
)
-
dStartPt
;
double
dir
=
iSide
.
crossCheck
(
oppSide
)
;
if
(
!
dir
)
{
return
false
;
}
*
inside
=
dir
<
0
;
return
true
;
}
bool
SkOpAngle
:
:
oppositePlanes
(
const
SkOpAngle
*
rh
)
const
{
int
startSpan
=
SkTAbs
(
rh
-
>
fSectorStart
-
fSectorStart
)
;
return
startSpan
>
=
8
;
}
int
SkOpAngle
:
:
orderable
(
SkOpAngle
*
rh
)
{
int
result
;
if
(
!
fPart
.
isCurve
(
)
)
{
if
(
!
rh
-
>
fPart
.
isCurve
(
)
)
{
double
leftX
=
fTangentHalf
.
dx
(
)
;
double
leftY
=
fTangentHalf
.
dy
(
)
;
double
rightX
=
rh
-
>
fTangentHalf
.
dx
(
)
;
double
rightY
=
rh
-
>
fTangentHalf
.
dy
(
)
;
double
x_ry
=
leftX
*
rightY
;
double
rx_y
=
rightX
*
leftY
;
if
(
x_ry
=
=
rx_y
)
{
if
(
leftX
*
rightX
<
0
|
|
leftY
*
rightY
<
0
)
{
return
1
;
}
goto
unorderable
;
}
SkASSERT
(
x_ry
!
=
rx_y
)
;
return
x_ry
<
rx_y
?
1
:
0
;
}
if
(
(
result
=
this
-
>
allOnOneSide
(
rh
)
)
>
=
0
)
{
return
result
;
}
if
(
fUnorderable
|
|
approximately_zero
(
rh
-
>
fSide
)
)
{
goto
unorderable
;
}
}
else
if
(
!
rh
-
>
fPart
.
isCurve
(
)
)
{
if
(
(
result
=
rh
-
>
allOnOneSide
(
this
)
)
>
=
0
)
{
return
result
?
0
:
1
;
}
if
(
rh
-
>
fUnorderable
|
|
approximately_zero
(
fSide
)
)
{
goto
unorderable
;
}
}
else
if
(
(
result
=
this
-
>
convexHullOverlaps
(
rh
)
)
>
=
0
)
{
return
result
;
}
return
this
-
>
endsIntersect
(
rh
)
?
1
:
0
;
unorderable
:
fUnorderable
=
true
;
rh
-
>
fUnorderable
=
true
;
return
-
1
;
}
SkOpAngle
*
SkOpAngle
:
:
previous
(
)
const
{
SkOpAngle
*
last
=
fNext
;
do
{
SkOpAngle
*
next
=
last
-
>
fNext
;
if
(
next
=
=
this
)
{
return
last
;
}
last
=
next
;
}
while
(
true
)
;
}
SkOpSegment
*
SkOpAngle
:
:
segment
(
)
const
{
return
fStart
-
>
segment
(
)
;
}
void
SkOpAngle
:
:
set
(
SkOpSpanBase
*
start
SkOpSpanBase
*
end
)
{
fStart
=
start
;
fComputedEnd
=
fEnd
=
end
;
SkASSERT
(
start
!
=
end
)
;
fNext
=
nullptr
;
fComputeSector
=
fComputedSector
=
fCheckCoincidence
=
fTangentsAmbiguous
=
false
;
setSpans
(
)
;
setSector
(
)
;
SkDEBUGCODE
(
fID
=
start
?
start
-
>
globalState
(
)
-
>
nextAngleID
(
)
:
-
1
)
;
}
void
SkOpAngle
:
:
setSpans
(
)
{
fUnorderable
=
false
;
fLastMarked
=
nullptr
;
if
(
!
fStart
)
{
fUnorderable
=
true
;
return
;
}
const
SkOpSegment
*
segment
=
fStart
-
>
segment
(
)
;
const
SkPoint
*
pts
=
segment
-
>
pts
(
)
;
SkDEBUGCODE
(
fPart
.
fCurve
.
fVerb
=
SkPath
:
:
kCubic_Verb
)
;
SkDEBUGCODE
(
fPart
.
fCurve
[
2
]
.
fX
=
fPart
.
fCurve
[
2
]
.
fY
=
fPart
.
fCurve
[
3
]
.
fX
=
fPart
.
fCurve
[
3
]
.
fY
=
SK_ScalarNaN
)
;
SkDEBUGCODE
(
fPart
.
fCurve
.
fVerb
=
segment
-
>
verb
(
)
)
;
segment
-
>
subDivide
(
fStart
fEnd
&
fPart
.
fCurve
)
;
fOriginalCurvePart
=
fPart
.
fCurve
;
const
SkPath
:
:
Verb
verb
=
segment
-
>
verb
(
)
;
fPart
.
setCurveHullSweep
(
verb
)
;
if
(
SkPath
:
:
kLine_Verb
!
=
verb
&
&
!
fPart
.
isCurve
(
)
)
{
SkDLine
lineHalf
;
fPart
.
fCurve
[
1
]
=
fPart
.
fCurve
[
SkPathOpsVerbToPoints
(
verb
)
]
;
fOriginalCurvePart
[
1
]
=
fPart
.
fCurve
[
1
]
;
lineHalf
[
0
]
.
set
(
fPart
.
fCurve
[
0
]
.
asSkPoint
(
)
)
;
lineHalf
[
1
]
.
set
(
fPart
.
fCurve
[
1
]
.
asSkPoint
(
)
)
;
fTangentHalf
.
lineEndPoints
(
lineHalf
)
;
fSide
=
0
;
}
switch
(
verb
)
{
case
SkPath
:
:
kLine_Verb
:
{
SkASSERT
(
fStart
!
=
fEnd
)
;
const
SkPoint
&
cP1
=
pts
[
fStart
-
>
t
(
)
<
fEnd
-
>
t
(
)
]
;
SkDLine
lineHalf
;
lineHalf
[
0
]
.
set
(
fStart
-
>
pt
(
)
)
;
lineHalf
[
1
]
.
set
(
cP1
)
;
fTangentHalf
.
lineEndPoints
(
lineHalf
)
;
fSide
=
0
;
}
return
;
case
SkPath
:
:
kQuad_Verb
:
case
SkPath
:
:
kConic_Verb
:
{
SkLineParameters
tangentPart
;
(
void
)
tangentPart
.
quadEndPoints
(
fPart
.
fCurve
.
fQuad
)
;
fSide
=
-
tangentPart
.
pointDistance
(
fPart
.
fCurve
[
2
]
)
;
}
break
;
case
SkPath
:
:
kCubic_Verb
:
{
SkLineParameters
tangentPart
;
(
void
)
tangentPart
.
cubicPart
(
fPart
.
fCurve
.
fCubic
)
;
fSide
=
-
tangentPart
.
pointDistance
(
fPart
.
fCurve
[
3
]
)
;
double
testTs
[
4
]
;
int
testCount
=
SkDCubic
:
:
FindInflections
(
pts
testTs
)
;
double
startT
=
fStart
-
>
t
(
)
;
double
endT
=
fEnd
-
>
t
(
)
;
double
limitT
=
endT
;
int
index
;
for
(
index
=
0
;
index
<
testCount
;
+
+
index
)
{
if
(
!
:
:
between
(
startT
testTs
[
index
]
limitT
)
)
{
testTs
[
index
]
=
-
1
;
}
}
testTs
[
testCount
+
+
]
=
startT
;
testTs
[
testCount
+
+
]
=
endT
;
SkTQSort
<
double
>
(
testTs
&
testTs
[
testCount
-
1
]
)
;
double
bestSide
=
0
;
int
testCases
=
(
testCount
<
<
1
)
-
1
;
index
=
0
;
while
(
testTs
[
index
]
<
0
)
{
+
+
index
;
}
index
<
<
=
1
;
for
(
;
index
<
testCases
;
+
+
index
)
{
int
testIndex
=
index
>
>
1
;
double
testT
=
testTs
[
testIndex
]
;
if
(
index
&
1
)
{
testT
=
(
testT
+
testTs
[
testIndex
+
1
]
)
/
2
;
}
SkDPoint
pt
=
dcubic_xy_at_t
(
pts
segment
-
>
weight
(
)
testT
)
;
SkLineParameters
tangentPart
;
tangentPart
.
cubicEndPoints
(
fPart
.
fCurve
.
fCubic
)
;
double
testSide
=
tangentPart
.
pointDistance
(
pt
)
;
if
(
fabs
(
bestSide
)
<
fabs
(
testSide
)
)
{
bestSide
=
testSide
;
}
}
fSide
=
-
bestSide
;
}
break
;
default
:
SkASSERT
(
0
)
;
}
}
void
SkOpAngle
:
:
setSector
(
)
{
if
(
!
fStart
)
{
fUnorderable
=
true
;
return
;
}
const
SkOpSegment
*
segment
=
fStart
-
>
segment
(
)
;
SkPath
:
:
Verb
verb
=
segment
-
>
verb
(
)
;
fSectorStart
=
this
-
>
findSector
(
verb
fPart
.
fSweep
[
0
]
.
fX
fPart
.
fSweep
[
0
]
.
fY
)
;
if
(
fSectorStart
<
0
)
{
goto
deferTilLater
;
}
if
(
!
fPart
.
isCurve
(
)
)
{
SkASSERT
(
fSectorStart
>
=
0
)
;
fSectorEnd
=
fSectorStart
;
fSectorMask
=
1
<
<
fSectorStart
;
return
;
}
SkASSERT
(
SkPath
:
:
kLine_Verb
!
=
verb
)
;
fSectorEnd
=
this
-
>
findSector
(
verb
fPart
.
fSweep
[
1
]
.
fX
fPart
.
fSweep
[
1
]
.
fY
)
;
if
(
fSectorEnd
<
0
)
{
deferTilLater
:
fSectorStart
=
fSectorEnd
=
-
1
;
fSectorMask
=
0
;
fComputeSector
=
true
;
return
;
}
if
(
fSectorEnd
=
=
fSectorStart
&
&
(
fSectorStart
&
3
)
!
=
3
)
{
fSectorMask
=
1
<
<
fSectorStart
;
return
;
}
bool
crossesZero
=
this
-
>
checkCrossesZero
(
)
;
int
start
=
SkTMin
(
fSectorStart
fSectorEnd
)
;
bool
curveBendsCCW
=
(
fSectorStart
=
=
start
)
^
crossesZero
;
if
(
(
fSectorStart
&
3
)
=
=
3
)
{
fSectorStart
=
(
fSectorStart
+
(
curveBendsCCW
?
1
:
31
)
)
&
0x1f
;
}
if
(
(
fSectorEnd
&
3
)
=
=
3
)
{
fSectorEnd
=
(
fSectorEnd
+
(
curveBendsCCW
?
31
:
1
)
)
&
0x1f
;
}
crossesZero
=
this
-
>
checkCrossesZero
(
)
;
start
=
SkTMin
(
fSectorStart
fSectorEnd
)
;
int
end
=
SkTMax
(
fSectorStart
fSectorEnd
)
;
if
(
!
crossesZero
)
{
fSectorMask
=
(
unsigned
)
-
1
>
>
(
31
-
end
+
start
)
<
<
start
;
}
else
{
fSectorMask
=
(
unsigned
)
-
1
>
>
(
31
-
start
)
|
(
(
unsigned
)
-
1
<
<
end
)
;
}
}
SkOpSpan
*
SkOpAngle
:
:
starter
(
)
{
return
fStart
-
>
starter
(
fEnd
)
;
}
bool
SkOpAngle
:
:
tangentsDiverge
(
const
SkOpAngle
*
rh
double
s0xt0
)
{
if
(
s0xt0
=
=
0
)
{
return
false
;
}
const
SkDVector
*
sweep
=
fPart
.
fSweep
;
const
SkDVector
*
tweep
=
rh
-
>
fPart
.
fSweep
;
double
s0dt0
=
sweep
[
0
]
.
dot
(
tweep
[
0
]
)
;
if
(
!
s0dt0
)
{
return
true
;
}
SkASSERT
(
s0dt0
!
=
0
)
;
double
m
=
s0xt0
/
s0dt0
;
double
sDist
=
sweep
[
0
]
.
length
(
)
*
m
;
double
tDist
=
tweep
[
0
]
.
length
(
)
*
m
;
bool
useS
=
fabs
(
sDist
)
<
fabs
(
tDist
)
;
double
mFactor
=
fabs
(
useS
?
this
-
>
distEndRatio
(
sDist
)
:
rh
-
>
distEndRatio
(
tDist
)
)
;
fTangentsAmbiguous
=
mFactor
>
=
50
&
&
mFactor
<
200
;
return
mFactor
<
50
;
}
