#
include
"
src
/
sksl
/
SkSLMangler
.
h
"
#
include
"
include
/
core
/
SkString
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
src
/
base
/
SkStringView
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLSymbolTable
.
h
"
#
include
<
algorithm
>
#
include
<
cstring
>
#
include
<
ctype
.
h
>
namespace
SkSL
{
std
:
:
string
Mangler
:
:
uniqueName
(
std
:
:
string_view
baseName
SymbolTable
*
symbolTable
)
{
SkASSERT
(
symbolTable
)
;
if
(
skstd
:
:
starts_with
(
baseName
'
'
)
)
{
baseName
.
remove_prefix
(
1
)
;
}
if
(
skstd
:
:
starts_with
(
baseName
'
_
'
)
)
{
int
offset
=
1
;
while
(
isdigit
(
baseName
[
offset
]
)
)
{
+
+
offset
;
}
if
(
offset
>
1
&
&
baseName
[
offset
]
=
=
'
_
'
&
&
baseName
[
offset
+
1
]
!
=
'
\
0
'
)
{
baseName
.
remove_prefix
(
offset
+
1
)
;
}
else
{
baseName
.
remove_prefix
(
1
)
;
}
}
char
uniqueName
[
256
]
;
uniqueName
[
0
]
=
'
_
'
;
char
*
uniqueNameEnd
=
uniqueName
+
std
:
:
size
(
uniqueName
)
;
for
(
;
;
)
{
char
*
endPtr
=
SkStrAppendS32
(
uniqueName
+
1
fCounter
+
+
)
;
*
endPtr
+
+
=
'
_
'
;
int
baseNameCopyLength
=
std
:
:
min
<
int
>
(
baseName
.
size
(
)
uniqueNameEnd
-
endPtr
)
;
memcpy
(
endPtr
baseName
.
data
(
)
baseNameCopyLength
)
;
endPtr
+
=
baseNameCopyLength
;
std
:
:
string_view
uniqueNameView
(
uniqueName
endPtr
-
uniqueName
)
;
if
(
symbolTable
-
>
find
(
uniqueNameView
)
=
=
nullptr
)
{
return
std
:
:
string
(
uniqueNameView
)
;
}
}
}
}
