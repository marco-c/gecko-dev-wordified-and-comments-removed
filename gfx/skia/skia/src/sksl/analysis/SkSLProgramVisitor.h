#
ifndef
SkSLProgramVisitor_DEFINED
#
define
SkSLProgramVisitor_DEFINED
#
include
<
memory
>
namespace
SkSL
{
struct
Program
;
class
Expression
;
class
Statement
;
class
ProgramElement
;
template
<
typename
T
>
class
TProgramVisitor
{
public
:
virtual
~
TProgramVisitor
(
)
=
default
;
protected
:
virtual
bool
visitExpression
(
typename
T
:
:
Expression
&
expression
)
;
virtual
bool
visitStatement
(
typename
T
:
:
Statement
&
statement
)
;
virtual
bool
visitProgramElement
(
typename
T
:
:
ProgramElement
&
programElement
)
;
virtual
bool
visitExpressionPtr
(
typename
T
:
:
UniquePtrExpression
&
expr
)
=
0
;
virtual
bool
visitStatementPtr
(
typename
T
:
:
UniquePtrStatement
&
stmt
)
=
0
;
}
;
struct
ProgramVisitorTypes
{
using
Program
=
const
SkSL
:
:
Program
;
using
Expression
=
const
SkSL
:
:
Expression
;
using
Statement
=
const
SkSL
:
:
Statement
;
using
ProgramElement
=
const
SkSL
:
:
ProgramElement
;
using
UniquePtrExpression
=
const
std
:
:
unique_ptr
<
SkSL
:
:
Expression
>
;
using
UniquePtrStatement
=
const
std
:
:
unique_ptr
<
SkSL
:
:
Statement
>
;
}
;
extern
template
class
TProgramVisitor
<
ProgramVisitorTypes
>
;
class
ProgramVisitor
:
public
TProgramVisitor
<
ProgramVisitorTypes
>
{
public
:
bool
visit
(
const
Program
&
program
)
;
private
:
bool
visitExpressionPtr
(
const
std
:
:
unique_ptr
<
Expression
>
&
e
)
final
{
return
this
-
>
visitExpression
(
*
e
)
;
}
bool
visitStatementPtr
(
const
std
:
:
unique_ptr
<
Statement
>
&
s
)
final
{
return
this
-
>
visitStatement
(
*
s
)
;
}
}
;
}
#
endif
