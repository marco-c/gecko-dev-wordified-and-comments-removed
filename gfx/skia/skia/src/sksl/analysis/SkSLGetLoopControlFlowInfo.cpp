#
include
"
src
/
sksl
/
SkSLAnalysis
.
h
"
#
include
"
src
/
sksl
/
analysis
/
SkSLProgramVisitor
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLIRNode
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLStatement
.
h
"
namespace
SkSL
{
class
Expression
;
namespace
Analysis
{
namespace
{
class
LoopControlFlowVisitor
:
public
ProgramVisitor
{
public
:
LoopControlFlowVisitor
(
)
{
}
bool
visitExpression
(
const
Expression
&
expr
)
override
{
return
false
;
}
bool
visitStatement
(
const
Statement
&
stmt
)
override
{
switch
(
stmt
.
kind
(
)
)
{
case
Statement
:
:
Kind
:
:
kContinue
:
fResult
.
fHasContinue
|
=
(
fDepth
=
=
0
)
;
break
;
case
Statement
:
:
Kind
:
:
kBreak
:
fResult
.
fHasBreak
|
=
(
fDepth
=
=
0
)
;
break
;
case
Statement
:
:
Kind
:
:
kReturn
:
fResult
.
fHasReturn
=
true
;
break
;
case
Statement
:
:
Kind
:
:
kFor
:
case
Statement
:
:
Kind
:
:
kDo
:
case
Statement
:
:
Kind
:
:
kSwitch
:
{
+
+
fDepth
;
bool
done
=
ProgramVisitor
:
:
visitStatement
(
stmt
)
;
-
-
fDepth
;
return
done
;
}
default
:
return
ProgramVisitor
:
:
visitStatement
(
stmt
)
;
}
return
fResult
.
fHasContinue
&
&
fResult
.
fHasBreak
&
&
fResult
.
fHasReturn
;
}
LoopControlFlowInfo
fResult
;
int
fDepth
=
0
;
}
;
}
LoopControlFlowInfo
GetLoopControlFlowInfo
(
const
Statement
&
stmt
)
{
LoopControlFlowVisitor
visitor
;
visitor
.
visitStatement
(
stmt
)
;
return
visitor
.
fResult
;
}
}
}
