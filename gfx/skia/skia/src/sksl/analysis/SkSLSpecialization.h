#
ifndef
SKSL_SPECIALIZATION
#
define
SKSL_SPECIALIZATION
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
"
src
/
core
/
SkChecksum
.
h
"
#
include
"
src
/
core
/
SkTHash
.
h
"
#
include
"
src
/
utils
/
SkBitSet
.
h
"
#
include
<
cstddef
>
#
include
<
functional
>
namespace
SkSL
{
class
Expression
;
class
FunctionCall
;
class
FunctionDeclaration
;
class
Variable
;
struct
Program
;
namespace
Analysis
{
using
SpecializationIndex
=
int
;
static
constexpr
SpecializationIndex
kUnspecialized
=
-
1
;
using
SpecializedParameters
=
skia_private
:
:
THashMap
<
const
Variable
*
const
Expression
*
>
;
using
Specializations
=
skia_private
:
:
TArray
<
SpecializedParameters
>
;
using
SpecializationMap
=
skia_private
:
:
THashMap
<
const
FunctionDeclaration
*
Specializations
>
;
struct
SpecializedFunctionKey
{
struct
Hash
{
size_t
operator
(
)
(
const
SpecializedFunctionKey
&
entry
)
{
return
SkGoodHash
(
)
(
entry
.
fDeclaration
)
^
SkGoodHash
(
)
(
entry
.
fSpecializationIndex
)
;
}
}
;
bool
operator
=
=
(
const
SpecializedFunctionKey
&
other
)
const
{
return
fDeclaration
=
=
other
.
fDeclaration
&
&
fSpecializationIndex
=
=
other
.
fSpecializationIndex
;
}
const
FunctionDeclaration
*
fDeclaration
=
nullptr
;
SpecializationIndex
fSpecializationIndex
=
Analysis
:
:
kUnspecialized
;
}
;
struct
SpecializedCallKey
{
struct
Hash
{
size_t
operator
(
)
(
const
SpecializedCallKey
&
entry
)
{
return
SkGoodHash
(
)
(
entry
.
fStablePointer
)
^
SkGoodHash
(
)
(
entry
.
fParentSpecializationIndex
)
;
}
}
;
bool
operator
=
=
(
const
SpecializedCallKey
&
other
)
const
{
return
fStablePointer
=
=
other
.
fStablePointer
&
&
fParentSpecializationIndex
=
=
other
.
fParentSpecializationIndex
;
}
const
FunctionCall
*
fStablePointer
=
nullptr
;
SpecializationIndex
fParentSpecializationIndex
=
Analysis
:
:
kUnspecialized
;
}
;
using
SpecializedCallMap
=
skia_private
:
:
THashMap
<
SpecializedCallKey
SpecializationIndex
SpecializedCallKey
:
:
Hash
>
;
struct
SpecializationInfo
{
SpecializationMap
fSpecializationMap
;
SpecializedCallMap
fSpecializedCallMap
;
}
;
using
ParameterMatchesFn
=
std
:
:
function
<
bool
(
const
Variable
&
)
>
;
void
FindFunctionsToSpecialize
(
const
Program
&
program
SpecializationInfo
*
info
const
ParameterMatchesFn
&
specializationFn
)
;
SpecializationIndex
FindSpecializationIndexForCall
(
const
FunctionCall
&
call
const
SpecializationInfo
&
info
SpecializationIndex
activeSpecializationIndex
)
;
SkBitSet
FindSpecializedParametersForFunction
(
const
FunctionDeclaration
&
func
const
SpecializationInfo
&
info
)
;
using
ParameterMappingCallback
=
std
:
:
function
<
void
(
int
paramIndex
const
Variable
*
param
const
Expression
*
value
)
>
;
void
GetParameterMappingsForFunction
(
const
FunctionDeclaration
&
func
const
SpecializationInfo
&
info
SpecializationIndex
specializationIndex
const
ParameterMappingCallback
&
callback
)
;
}
}
#
endif
