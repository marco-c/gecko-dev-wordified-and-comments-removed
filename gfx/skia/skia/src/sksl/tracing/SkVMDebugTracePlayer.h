#
include
"
src
/
sksl
/
tracing
/
SkVMDebugTrace
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
src
/
utils
/
SkBitSet
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
optional
>
#
include
<
unordered_map
>
#
include
<
unordered_set
>
#
include
<
vector
>
namespace
SkSL
{
class
SkVMDebugTracePlayer
{
public
:
void
reset
(
sk_sp
<
SkVMDebugTrace
>
trace
)
;
void
step
(
)
;
void
stepOver
(
)
;
void
stepOut
(
)
;
void
run
(
)
;
void
setBreakpoints
(
std
:
:
unordered_set
<
int
>
breakpointLines
)
;
void
addBreakpoint
(
int
line
)
;
void
removeBreakpoint
(
int
line
)
;
using
BreakpointSet
=
std
:
:
unordered_set
<
int
>
;
const
BreakpointSet
&
getBreakpoints
(
)
{
return
fBreakpointLines
;
}
bool
traceHasCompleted
(
)
const
;
bool
atBreakpoint
(
)
const
;
size_t
cursor
(
)
{
return
fCursor
;
}
int32_t
getCurrentLine
(
)
const
;
int32_t
getCurrentLineInStackFrame
(
int
stackFrameIndex
)
const
;
std
:
:
vector
<
int
>
getCallStack
(
)
const
;
int
getStackDepth
(
)
const
;
using
LineNumberMap
=
std
:
:
unordered_map
<
int
int
>
;
const
LineNumberMap
&
getLineNumbersReached
(
)
const
{
return
fLineNumbers
;
}
struct
VariableData
{
int
fSlotIndex
;
bool
fDirty
;
double
fValue
;
}
;
std
:
:
vector
<
VariableData
>
getLocalVariables
(
int
stackFrameIndex
)
const
;
std
:
:
vector
<
VariableData
>
getGlobalVariables
(
)
const
;
private
:
bool
execute
(
size_t
position
)
;
void
tidyState
(
)
;
void
updateVariableWriteTime
(
int
slotIdx
size_t
writeTime
)
;
std
:
:
vector
<
VariableData
>
getVariablesForDisplayMask
(
const
SkBitSet
&
bits
)
const
;
struct
StackFrame
{
int32_t
fFunction
;
int32_t
fLine
;
SkBitSet
fDisplayMask
;
}
;
struct
Slot
{
int32_t
fValue
;
int
fScope
;
size_t
fWriteTime
;
}
;
sk_sp
<
SkVMDebugTrace
>
fDebugTrace
;
size_t
fCursor
=
0
;
int
fScope
=
0
;
std
:
:
vector
<
Slot
>
fSlots
;
std
:
:
vector
<
StackFrame
>
fStack
;
std
:
:
optional
<
SkBitSet
>
fDirtyMask
;
std
:
:
optional
<
SkBitSet
>
fReturnValues
;
LineNumberMap
fLineNumbers
;
BreakpointSet
fBreakpointLines
;
}
;
}
