#
ifndef
SKSL_COMPILER
#
define
SKSL_COMPILER
#
include
<
vector
>
#
include
"
ir
/
SkSLProgram
.
h
"
#
include
"
ir
/
SkSLSymbolTable
.
h
"
#
include
"
SkSLContext
.
h
"
#
include
"
SkSLErrorReporter
.
h
"
#
include
"
SkSLGLSLCodeGenerator
.
h
"
namespace
SkSL
{
class
IRGenerator
;
class
Compiler
:
public
ErrorReporter
{
public
:
Compiler
(
)
;
~
Compiler
(
)
;
std
:
:
unique_ptr
<
Program
>
convertProgram
(
Program
:
:
Kind
kind
std
:
:
string
text
)
;
bool
toSPIRV
(
Program
:
:
Kind
kind
const
std
:
:
string
&
text
std
:
:
ostream
&
out
)
;
bool
toSPIRV
(
Program
:
:
Kind
kind
const
std
:
:
string
&
text
std
:
:
string
*
out
)
;
bool
toGLSL
(
Program
:
:
Kind
kind
const
std
:
:
string
&
text
GLCaps
caps
std
:
:
ostream
&
out
)
;
bool
toGLSL
(
Program
:
:
Kind
kind
const
std
:
:
string
&
text
GLCaps
caps
std
:
:
string
*
out
)
;
void
error
(
Position
position
std
:
:
string
msg
)
override
;
std
:
:
string
errorText
(
)
;
void
writeErrorCount
(
)
;
private
:
void
internalConvertProgram
(
std
:
:
string
text
std
:
:
vector
<
std
:
:
unique_ptr
<
ProgramElement
>
>
*
result
)
;
std
:
:
shared_ptr
<
SymbolTable
>
fTypes
;
IRGenerator
*
fIRGenerator
;
std
:
:
string
fSkiaVertText
;
Context
fContext
;
int
fErrorCount
;
std
:
:
string
fErrorText
;
}
;
}
#
endif
