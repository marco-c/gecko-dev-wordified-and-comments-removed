#
ifndef
SkSLUniformCTypes_DEFINED
#
define
SkSLUniformCTypes_DEFINED
#
include
"
SkSLString
.
h
"
#
include
"
SkSLContext
.
h
"
#
include
"
ir
/
SkSLType
.
h
"
#
include
"
ir
/
SkSLVariable
.
h
"
namespace
SkSL
{
class
UniformCTypeMapper
{
public
:
UniformCTypeMapper
(
Layout
:
:
CType
ctype
const
std
:
:
vector
<
String
>
&
skslTypes
const
char
*
setUniformFormat
)
:
UniformCTypeMapper
(
ctype
skslTypes
setUniformFormat
false
"
"
"
"
"
"
)
{
}
UniformCTypeMapper
(
Layout
:
:
CType
ctype
const
std
:
:
vector
<
String
>
&
skslTypes
const
String
&
setUniformFormat
const
String
&
defaultValue
const
String
&
dirtyExpressionFormat
const
String
&
saveStateFormat
)
:
UniformCTypeMapper
(
ctype
skslTypes
setUniformFormat
true
defaultValue
dirtyExpressionFormat
saveStateFormat
)
{
}
static
const
UniformCTypeMapper
*
Get
(
const
Context
&
context
const
Type
&
type
const
Layout
&
layout
)
;
static
const
UniformCTypeMapper
*
Get
(
const
Context
&
context
const
Variable
&
variable
)
{
return
Get
(
context
variable
.
fType
variable
.
fModifiers
.
fLayout
)
;
}
Layout
:
:
CType
ctype
(
)
const
{
return
fCType
;
}
const
std
:
:
vector
<
String
>
&
supportedTypeNames
(
)
const
{
return
fSKSLTypes
;
}
bool
supportsTracking
(
)
const
{
return
fSupportsTracking
;
}
const
String
&
defaultValue
(
)
const
{
return
fDefaultValue
;
}
String
dirtyExpression
(
const
String
&
newValueVarName
const
String
&
oldValueVarName
)
const
;
String
saveState
(
const
String
&
newValueVarName
const
String
&
oldValueVarName
)
const
;
String
setUniform
(
const
String
&
pdmanName
const
String
&
uniformHandleName
const
String
&
valueVarName
)
const
;
bool
canInlineUniformValue
(
)
const
{
return
fInlineValue
;
}
private
:
UniformCTypeMapper
(
Layout
:
:
CType
ctype
const
std
:
:
vector
<
String
>
&
skslTypes
const
String
&
setUniformFormat
bool
enableTracking
const
String
&
defaultValue
const
String
&
dirtyExpressionFormat
const
String
&
saveStateFormat
)
;
Layout
:
:
CType
fCType
;
std
:
:
vector
<
String
>
fSKSLTypes
;
String
fUniformTemplate
;
bool
fInlineValue
;
bool
fSupportsTracking
;
String
fDefaultValue
;
String
fDirtyExpressionTemplate
;
String
fSaveStateTemplate
;
}
;
}
#
endif
