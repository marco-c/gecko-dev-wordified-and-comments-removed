#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
"
src
/
sksl
/
SkSLBuiltinTypes
.
h
"
#
include
"
src
/
sksl
/
SkSLContext
.
h
"
#
include
"
src
/
sksl
/
SkSLDefines
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLConstructorCompound
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLExpression
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLIndexExpression
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLSwizzle
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLType
.
h
"
#
include
"
src
/
sksl
/
transform
/
SkSLTransform
.
h
"
#
include
<
memory
>
#
include
<
utility
>
namespace
SkSL
{
std
:
:
unique_ptr
<
Expression
>
Transform
:
:
RewriteIndexedSwizzle
(
const
Context
&
context
const
IndexExpression
&
indexExpr
)
{
if
(
!
indexExpr
.
base
(
)
-
>
is
<
Swizzle
>
(
)
)
{
return
nullptr
;
}
const
Swizzle
&
swizzle
=
indexExpr
.
base
(
)
-
>
as
<
Swizzle
>
(
)
;
double
vecArray
[
4
]
;
for
(
int
index
=
0
;
index
<
swizzle
.
components
(
)
.
size
(
)
;
+
+
index
)
{
vecArray
[
index
]
=
swizzle
.
components
(
)
[
index
]
;
}
const
Type
&
vecType
=
context
.
fTypes
.
fInt
-
>
toCompound
(
context
swizzle
.
components
(
)
.
size
(
)
1
)
;
std
:
:
unique_ptr
<
Expression
>
vec
=
ConstructorCompound
:
:
MakeFromConstants
(
context
indexExpr
.
fPosition
vecType
vecArray
)
;
std
:
:
unique_ptr
<
Expression
>
innerExpr
=
IndexExpression
:
:
Make
(
context
indexExpr
.
fPosition
std
:
:
move
(
vec
)
indexExpr
.
index
(
)
-
>
clone
(
)
)
;
return
IndexExpression
:
:
Make
(
context
indexExpr
.
fPosition
swizzle
.
base
(
)
-
>
clone
(
)
std
:
:
move
(
innerExpr
)
)
;
}
}
