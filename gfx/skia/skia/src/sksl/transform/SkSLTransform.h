#
ifndef
SKSL_TRANSFORM
#
define
SKSL_TRANSFORM
#
include
"
include
/
core
/
SkSpan
.
h
"
#
include
<
memory
>
#
include
<
vector
>
namespace
SkSL
{
class
Context
;
class
Expression
;
class
IndexExpression
;
struct
Modifiers
;
struct
Module
;
struct
Program
;
class
ProgramElement
;
class
ProgramUsage
;
class
Statement
;
class
Variable
;
enum
class
ProgramKind
:
int8_t
;
namespace
Transform
{
const
Modifiers
*
AddConstToVarModifiers
(
const
Context
&
context
const
Variable
&
var
const
Expression
*
initialValue
const
ProgramUsage
*
usage
)
;
std
:
:
unique_ptr
<
Expression
>
RewriteIndexedSwizzle
(
const
Context
&
context
const
IndexExpression
&
swizzle
)
;
void
FindAndDeclareBuiltinFunctions
(
Program
&
program
)
;
void
FindAndDeclareBuiltinVariables
(
Program
&
program
)
;
void
EliminateUnreachableCode
(
Module
&
module
ProgramUsage
*
usage
)
;
void
EliminateUnreachableCode
(
Program
&
program
)
;
void
EliminateEmptyStatements
(
Module
&
module
)
;
bool
EliminateDeadFunctions
(
const
Context
&
context
Module
&
module
ProgramUsage
*
usage
)
;
bool
EliminateDeadFunctions
(
Program
&
program
)
;
bool
EliminateDeadLocalVariables
(
const
Context
&
context
Module
&
module
ProgramUsage
*
usage
)
;
bool
EliminateDeadLocalVariables
(
Program
&
program
)
;
bool
EliminateDeadGlobalVariables
(
const
Context
&
context
Module
&
module
ProgramUsage
*
usage
bool
onlyPrivateGlobals
)
;
bool
EliminateDeadGlobalVariables
(
Program
&
program
)
;
void
RenamePrivateSymbols
(
Context
&
context
Module
&
module
ProgramUsage
*
usage
ProgramKind
kind
)
;
void
ReplaceConstVarsWithLiterals
(
Module
&
module
ProgramUsage
*
usage
)
;
}
}
#
endif
