#
ifndef
SKSL_ASTVARDECLARATIONS
#
define
SKSL_ASTVARDECLARATIONS
#
include
"
SkSLASTDeclaration
.
h
"
#
include
"
SkSLASTStatement
.
h
"
#
include
"
SkSLASTType
.
h
"
#
include
"
.
.
/
SkSLUtil
.
h
"
#
include
"
.
.
/
ir
/
SkSLModifiers
.
h
"
namespace
SkSL
{
struct
ASTVarDeclaration
{
ASTVarDeclaration
(
StringFragment
name
std
:
:
vector
<
std
:
:
unique_ptr
<
ASTExpression
>
>
sizes
std
:
:
unique_ptr
<
ASTExpression
>
value
)
:
fName
(
name
)
fSizes
(
std
:
:
move
(
sizes
)
)
fValue
(
std
:
:
move
(
value
)
)
{
}
String
description
(
)
const
{
String
result
(
fName
)
;
for
(
const
auto
&
size
:
fSizes
)
{
if
(
size
)
{
result
+
=
"
[
"
+
size
-
>
description
(
)
+
"
]
"
;
}
else
{
result
+
=
"
[
]
"
;
}
}
if
(
fValue
)
{
result
+
=
"
=
"
+
fValue
-
>
description
(
)
;
}
return
result
;
}
StringFragment
fName
;
std
:
:
vector
<
std
:
:
unique_ptr
<
ASTExpression
>
>
fSizes
;
std
:
:
unique_ptr
<
ASTExpression
>
fValue
;
}
;
struct
ASTVarDeclarations
:
public
ASTDeclaration
{
ASTVarDeclarations
(
Modifiers
modifiers
std
:
:
unique_ptr
<
ASTType
>
type
std
:
:
vector
<
ASTVarDeclaration
>
vars
)
:
INHERITED
(
type
-
>
fOffset
kVar_Kind
)
fModifiers
(
modifiers
)
fType
(
std
:
:
move
(
type
)
)
fVars
(
std
:
:
move
(
vars
)
)
{
}
String
description
(
)
const
override
{
String
result
=
fModifiers
.
description
(
)
+
fType
-
>
description
(
)
+
"
"
;
String
separator
;
for
(
const
auto
&
var
:
fVars
)
{
result
+
=
separator
;
separator
=
"
"
;
result
+
=
var
.
description
(
)
;
}
return
result
;
}
const
Modifiers
fModifiers
;
const
std
:
:
unique_ptr
<
ASTType
>
fType
;
const
std
:
:
vector
<
ASTVarDeclaration
>
fVars
;
typedef
ASTDeclaration
INHERITED
;
}
;
}
#
endif
