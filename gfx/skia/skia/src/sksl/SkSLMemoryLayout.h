#
ifndef
SKIASL_MEMORYLAYOUT
#
define
SKIASL_MEMORYLAYOUT
#
include
"
ir
/
SkSLType
.
h
"
namespace
SkSL
{
class
MemoryLayout
{
public
:
enum
Standard
{
k140_Standard
k430_Standard
}
;
MemoryLayout
(
Standard
std
)
:
fStd
(
std
)
{
}
static
size_t
vector_alignment
(
size_t
componentSize
int
columns
)
{
return
componentSize
*
(
columns
+
columns
%
2
)
;
}
size_t
roundUpIfNeeded
(
size_t
raw
)
const
{
switch
(
fStd
)
{
case
k140_Standard
:
return
(
raw
+
15
)
&
~
15
;
case
k430_Standard
:
return
raw
;
}
ABORT
(
"
unreachable
"
)
;
}
size_t
alignment
(
const
Type
&
type
)
const
{
switch
(
type
.
kind
(
)
)
{
case
Type
:
:
kScalar_Kind
:
return
this
-
>
size
(
type
)
;
case
Type
:
:
kVector_Kind
:
return
vector_alignment
(
this
-
>
size
(
type
.
componentType
(
)
)
type
.
columns
(
)
)
;
case
Type
:
:
kMatrix_Kind
:
return
this
-
>
roundUpIfNeeded
(
vector_alignment
(
this
-
>
size
(
type
.
componentType
(
)
)
type
.
rows
(
)
)
)
;
case
Type
:
:
kArray_Kind
:
return
this
-
>
roundUpIfNeeded
(
this
-
>
alignment
(
type
.
componentType
(
)
)
)
;
case
Type
:
:
kStruct_Kind
:
{
size_t
result
=
0
;
for
(
const
auto
&
f
:
type
.
fields
(
)
)
{
size_t
alignment
=
this
-
>
alignment
(
*
f
.
fType
)
;
if
(
alignment
>
result
)
{
result
=
alignment
;
}
}
return
this
-
>
roundUpIfNeeded
(
result
)
;
}
default
:
ABORT
(
"
cannot
determine
size
of
type
%
s
"
type
.
name
(
)
.
c_str
(
)
)
;
}
}
size_t
stride
(
const
Type
&
type
)
const
{
switch
(
type
.
kind
(
)
)
{
case
Type
:
:
kMatrix_Kind
:
case
Type
:
:
kArray_Kind
:
return
this
-
>
alignment
(
type
)
;
default
:
ABORT
(
"
type
does
not
have
a
stride
"
)
;
}
}
size_t
size
(
const
Type
&
type
)
const
{
switch
(
type
.
kind
(
)
)
{
case
Type
:
:
kScalar_Kind
:
if
(
type
.
name
(
)
=
=
"
bool
"
)
{
return
1
;
}
return
4
;
case
Type
:
:
kVector_Kind
:
return
type
.
columns
(
)
*
this
-
>
size
(
type
.
componentType
(
)
)
;
case
Type
:
:
kMatrix_Kind
:
case
Type
:
:
kArray_Kind
:
return
type
.
columns
(
)
*
this
-
>
stride
(
type
)
;
case
Type
:
:
kStruct_Kind
:
{
size_t
total
=
0
;
for
(
const
auto
&
f
:
type
.
fields
(
)
)
{
size_t
alignment
=
this
-
>
alignment
(
*
f
.
fType
)
;
if
(
total
%
alignment
!
=
0
)
{
total
+
=
alignment
-
total
%
alignment
;
}
ASSERT
(
total
%
alignment
=
=
0
)
;
total
+
=
this
-
>
size
(
*
f
.
fType
)
;
}
size_t
alignment
=
this
-
>
alignment
(
type
)
;
ASSERT
(
!
type
.
fields
(
)
.
size
(
)
|
|
(
0
=
=
alignment
%
this
-
>
alignment
(
*
type
.
fields
(
)
[
0
]
.
fType
)
)
)
;
return
(
total
+
alignment
-
1
)
&
~
(
alignment
-
1
)
;
}
default
:
ABORT
(
"
cannot
determine
size
of
type
%
s
"
type
.
name
(
)
.
c_str
(
)
)
;
}
}
const
Standard
fStd
;
}
;
}
#
endif
