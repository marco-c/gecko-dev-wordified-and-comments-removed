#
ifndef
SKSL_NFA
#
define
SKSL_NFA
#
include
"
NFAState
.
h
"
#
include
"
RegexNode
.
h
"
struct
NFA
{
int
addRegex
(
const
RegexNode
&
regex
)
{
std
:
:
vector
<
int
>
accept
;
accept
.
push_back
(
this
-
>
addState
(
NFAState
(
+
+
fRegexCount
)
)
)
;
std
:
:
vector
<
int
>
startStates
=
regex
.
createStates
(
this
accept
)
;
fStartStates
.
insert
(
fStartStates
.
end
(
)
startStates
.
begin
(
)
startStates
.
end
(
)
)
;
return
fStartStates
.
size
(
)
-
1
;
}
int
addState
(
NFAState
s
)
{
fStates
.
push_back
(
std
:
:
move
(
s
)
)
;
return
fStates
.
size
(
)
-
1
;
}
int
match
(
std
:
:
string
s
)
const
;
int
fRegexCount
=
0
;
std
:
:
vector
<
NFAState
>
fStates
;
std
:
:
vector
<
int
>
fStartStates
;
}
;
#
endif
