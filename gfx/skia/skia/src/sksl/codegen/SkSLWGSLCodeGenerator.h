#
ifndef
SKSL_WGSLCODEGENERATOR
#
define
SKSL_WGSLCODEGENERATOR
#
include
"
include
/
core
/
SkSpan
.
h
"
#
include
"
include
/
private
/
SkSLDefines
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
"
src
/
core
/
SkTHash
.
h
"
#
include
"
src
/
sksl
/
SkSLStringStream
.
h
"
#
include
"
src
/
sksl
/
codegen
/
SkSLCodeGenerator
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLType
.
h
"
#
include
<
cstdint
>
#
include
<
initializer_list
>
#
include
<
string
>
#
include
<
string_view
>
#
include
<
utility
>
namespace
sknonstd
{
template
<
typename
T
>
struct
is_bitmask_enum
;
}
namespace
SkSL
{
class
AnyConstructor
;
class
BinaryExpression
;
class
Block
;
class
Context
;
class
ConstructorCompound
;
class
ConstructorDiagonalMatrix
;
class
ConstructorMatrixResize
;
class
Expression
;
class
ExpressionStatement
;
class
FieldAccess
;
class
FunctionCall
;
class
FunctionDeclaration
;
class
FunctionDefinition
;
class
GlobalVarDeclaration
;
class
IfStatement
;
class
IndexExpression
;
class
Literal
;
class
MemoryLayout
;
class
OutputStream
;
class
Position
;
class
ProgramElement
;
class
ReturnStatement
;
class
Statement
;
class
StructDefinition
;
class
Swizzle
;
class
TernaryExpression
;
class
VarDeclaration
;
class
Variable
;
class
VariableReference
;
enum
class
OperatorPrecedence
:
uint8_t
;
struct
Modifiers
;
struct
Program
;
class
WGSLCodeGenerator
:
public
CodeGenerator
{
public
:
enum
class
Builtin
{
kVertexIndex
kInstanceIndex
kPosition
kFrontFacing
kSampleIndex
kFragDepth
kSampleMask
kLocalInvocationId
kLocalInvocationIndex
kGlobalInvocationId
kWorkgroupId
kNumWorkgroups
}
;
enum
class
FunctionDependencies
:
uint8_t
{
kNone
=
0
kPipelineInputs
=
1
kPipelineOutputs
=
2
}
;
enum
class
Delimiter
{
kComma
kSemicolon
kNone
}
;
struct
ProgramRequirements
{
using
DepsMap
=
SkTHashMap
<
const
FunctionDeclaration
*
FunctionDependencies
>
;
ProgramRequirements
(
)
=
default
;
ProgramRequirements
(
DepsMap
dependencies
bool
mainNeedsCoordsArgument
)
:
dependencies
(
std
:
:
move
(
dependencies
)
)
mainNeedsCoordsArgument
(
mainNeedsCoordsArgument
)
{
}
DepsMap
dependencies
;
bool
mainNeedsCoordsArgument
;
}
;
WGSLCodeGenerator
(
const
Context
*
context
const
Program
*
program
OutputStream
*
out
)
:
INHERITED
(
context
program
out
)
fReservedWords
(
{
"
array
"
"
FSIn
"
"
FSOut
"
"
_globalUniforms
"
"
_GlobalUniforms
"
"
_return
"
"
_stageIn
"
"
_stageOut
"
"
VSIn
"
"
VSOut
"
}
)
{
}
bool
generateCode
(
)
override
;
private
:
using
INHERITED
=
CodeGenerator
;
using
Precedence
=
OperatorPrecedence
;
void
preprocessProgram
(
)
;
void
write
(
std
:
:
string_view
s
)
;
void
writeLine
(
std
:
:
string_view
s
=
std
:
:
string_view
(
)
)
;
void
finishLine
(
)
;
void
writeName
(
std
:
:
string_view
name
)
;
void
writeVariableDecl
(
const
Type
&
type
std
:
:
string_view
name
Delimiter
delimiter
)
;
void
writePipelineIODeclaration
(
Modifiers
modifiers
const
Type
&
type
std
:
:
string_view
name
Delimiter
delimiter
)
;
void
writeUserDefinedIODecl
(
const
Type
&
type
std
:
:
string_view
name
int
location
Delimiter
delimiter
)
;
void
writeBuiltinIODecl
(
const
Type
&
type
std
:
:
string_view
name
Builtin
builtin
Delimiter
delimiter
)
;
void
writeFunction
(
const
FunctionDefinition
&
f
)
;
void
writeFunctionDeclaration
(
const
FunctionDeclaration
&
f
)
;
void
writeEntryPoint
(
const
FunctionDefinition
&
f
)
;
void
writeStatement
(
const
Statement
&
s
)
;
void
writeStatements
(
const
StatementArray
&
statements
)
;
void
writeBlock
(
const
Block
&
b
)
;
void
writeExpressionStatement
(
const
ExpressionStatement
&
s
)
;
void
writeIfStatement
(
const
IfStatement
&
s
)
;
void
writeReturnStatement
(
const
ReturnStatement
&
s
)
;
void
writeVarDeclaration
(
const
VarDeclaration
&
varDecl
)
;
void
writeExpression
(
const
Expression
&
e
Precedence
parentPrecedence
)
;
void
writeBinaryExpression
(
const
BinaryExpression
&
b
Precedence
parentPrecedence
)
;
void
writeFieldAccess
(
const
FieldAccess
&
f
)
;
void
writeFunctionCall
(
const
FunctionCall
&
)
;
void
writeIndexExpression
(
const
IndexExpression
&
i
)
;
void
writeLiteral
(
const
Literal
&
l
)
;
void
writeSwizzle
(
const
Swizzle
&
swizzle
)
;
void
writeTernaryExpression
(
const
TernaryExpression
&
t
Precedence
parentPrecedence
)
;
void
writeVariableReference
(
const
VariableReference
&
r
)
;
void
writeAnyConstructor
(
const
AnyConstructor
&
c
Precedence
parentPrecedence
)
;
void
writeConstructorCompound
(
const
ConstructorCompound
&
c
Precedence
parentPrecedence
)
;
void
writeConstructorCompoundVector
(
const
ConstructorCompound
&
c
Precedence
parentPrecedence
)
;
void
writeConstructorCompoundMatrix
(
const
ConstructorCompound
&
c
Precedence
parentPrecedence
)
;
void
writeConstructorDiagonalMatrix
(
const
ConstructorDiagonalMatrix
&
c
Precedence
parentPrecedence
)
;
void
writeConstructorMatrixResize
(
const
ConstructorMatrixResize
&
c
Precedence
parentPrecedence
)
;
bool
isMatrixConstructorHelperNeeded
(
const
ConstructorCompound
&
c
)
;
std
:
:
string
getMatrixConstructorHelper
(
const
AnyConstructor
&
c
)
;
void
writeMatrixFromMatrixArgs
(
const
Type
&
sourceMatrix
int
columns
int
rows
)
;
void
writeMatrixFromScalarAndVectorArgs
(
const
AnyConstructor
&
ctor
int
columns
int
rows
)
;
void
writeMatrixEquality
(
const
Expression
&
left
const
Expression
&
right
)
;
void
writeProgramElement
(
const
ProgramElement
&
e
)
;
void
writeGlobalVarDeclaration
(
const
GlobalVarDeclaration
&
d
)
;
void
writeStructDefinition
(
const
StructDefinition
&
s
)
;
void
writeFields
(
SkSpan
<
const
Type
:
:
Field
>
fields
Position
parentPos
const
MemoryLayout
*
layout
=
nullptr
)
;
void
writeStageInputStruct
(
)
;
void
writeStageOutputStruct
(
)
;
void
writeNonBlockUniformsForTests
(
)
;
bool
writeFunctionDependencyArgs
(
const
FunctionDeclaration
&
)
;
bool
writeFunctionDependencyParams
(
const
FunctionDeclaration
&
)
;
std
:
:
string
writeOutParamHelper
(
const
FunctionCall
&
const
ExpressionArray
&
args
const
SkTArray
<
VariableReference
*
>
&
outVars
)
;
SkTHashSet
<
std
:
:
string_view
>
fReservedWords
;
ProgramRequirements
fRequirements
;
int
fPipelineInputCount
=
0
;
bool
fDeclaredUniformsStruct
=
false
;
SkTHashSet
<
const
Variable
*
>
fOutParamArgVars
;
int
fIndentation
=
0
;
bool
fAtLineStart
=
false
;
int
fSwizzleHelperCount
=
0
;
StringStream
fExtraFunctions
;
SkTHashSet
<
std
:
:
string
>
fHelpers
;
}
;
}
namespace
sknonstd
{
template
<
>
struct
is_bitmask_enum
<
SkSL
:
:
WGSLCodeGenerator
:
:
FunctionDependencies
>
:
std
:
:
true_type
{
}
;
}
#
endif
