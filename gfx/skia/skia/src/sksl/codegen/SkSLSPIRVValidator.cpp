#
include
"
src
/
sksl
/
codegen
/
SkSLSPIRVValidator
.
h
"
#
include
"
src
/
sksl
/
SkSLErrorReporter
.
h
"
#
include
"
src
/
sksl
/
SkSLPosition
.
h
"
#
include
"
spirv
-
tools
/
libspirv
.
hpp
"
namespace
SkSL
{
static
bool
validate_spirv
(
ErrorReporter
&
reporter
std
:
:
string_view
program
bool
disassemble
)
{
SkASSERT
(
0
=
=
program
.
size
(
)
%
4
)
;
const
uint32_t
*
programData
=
reinterpret_cast
<
const
uint32_t
*
>
(
program
.
data
(
)
)
;
size_t
programSize
=
program
.
size
(
)
/
4
;
spvtools
:
:
SpirvTools
tools
(
SPV_ENV_VULKAN_1_0
)
;
std
:
:
string
errors
;
auto
msgFn
=
[
&
errors
]
(
spv_message_level_t
const
char
*
const
spv_position_t
&
const
char
*
m
)
{
errors
+
=
"
SPIR
-
V
validation
error
:
"
;
errors
+
=
m
;
errors
+
=
'
\
n
'
;
}
;
tools
.
SetMessageConsumer
(
msgFn
)
;
bool
result
=
tools
.
Validate
(
programData
programSize
)
;
if
(
result
)
{
return
true
;
}
if
(
disassemble
)
{
std
:
:
string
disassembly
;
uint32_t
options
=
spvtools
:
:
SpirvTools
:
:
kDefaultDisassembleOption
;
options
|
=
SPV_BINARY_TO_TEXT_OPTION_INDENT
;
if
(
tools
.
Disassemble
(
programData
programSize
&
disassembly
options
)
)
{
errors
.
append
(
disassembly
)
;
}
reporter
.
error
(
Position
(
)
errors
)
;
}
else
{
SkDEBUGFAILF
(
"
%
s
"
errors
.
c_str
(
)
)
;
}
return
false
;
}
bool
ValidateSPIRV
(
ErrorReporter
&
reporter
std
:
:
string_view
program
)
{
return
validate_spirv
(
reporter
program
false
)
;
}
bool
ValidateSPIRVAndDissassemble
(
ErrorReporter
&
reporter
std
:
:
string_view
program
)
{
return
validate_spirv
(
reporter
program
true
)
;
}
}
