#
ifndef
SKSL_CODEGENERATOR
#
define
SKSL_CODEGENERATOR
#
include
"
src
/
sksl
/
SkSLOutputStream
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLProgram
.
h
"
namespace
SkSL
{
class
CodeGenerator
{
public
:
CodeGenerator
(
const
Context
*
context
const
Program
*
program
OutputStream
*
out
)
:
fContext
(
*
context
)
fProgram
(
*
program
)
fOut
(
out
)
{
}
virtual
~
CodeGenerator
(
)
{
}
virtual
bool
generateCode
(
)
=
0
;
OutputStream
*
outputStream
(
)
{
return
fOut
;
}
void
setOutputStream
(
OutputStream
*
output
)
{
fOut
=
output
;
}
protected
:
#
if
defined
(
SK_USE_LEGACY_MIPMAP_LOD_BIAS
)
static
constexpr
float
kSharpenTexturesBias
=
-
.
5f
;
#
else
static
constexpr
float
kSharpenTexturesBias
=
-
.
475f
;
#
endif
const
Context
&
fContext
;
const
Program
&
fProgram
;
OutputStream
*
fOut
;
}
;
class
AutoOutputStream
{
public
:
AutoOutputStream
(
CodeGenerator
*
codeGen
OutputStream
*
newOutput
)
:
fCodeGen
(
codeGen
)
fOldOutput
(
codeGen
-
>
outputStream
(
)
)
{
fCodeGen
-
>
setOutputStream
(
newOutput
)
;
}
AutoOutputStream
(
CodeGenerator
*
codeGen
OutputStream
*
newOutput
int
*
indentationPtr
)
:
fCodeGen
(
codeGen
)
fOldOutput
(
codeGen
-
>
outputStream
(
)
)
fIndentationPtr
(
indentationPtr
)
fOldIndentation
(
indentationPtr
?
*
indentationPtr
:
0
)
{
fCodeGen
-
>
setOutputStream
(
newOutput
)
;
*
fIndentationPtr
=
0
;
}
~
AutoOutputStream
(
)
{
fCodeGen
-
>
setOutputStream
(
fOldOutput
)
;
if
(
fIndentationPtr
)
{
*
fIndentationPtr
=
fOldIndentation
;
}
}
private
:
CodeGenerator
*
fCodeGen
=
nullptr
;
OutputStream
*
fOldOutput
=
nullptr
;
int
*
fIndentationPtr
=
nullptr
;
int
fOldIndentation
=
0
;
}
;
}
#
endif
