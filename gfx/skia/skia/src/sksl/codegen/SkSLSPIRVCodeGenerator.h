#
ifndef
SKSL_SPIRVCODEGENERATOR
#
define
SKSL_SPIRVCODEGENERATOR
#
include
"
include
/
core
/
SkSpan
.
h
"
#
include
"
include
/
private
/
SkSLDefines
.
h
"
#
include
"
include
/
private
/
SkSLLayout
.
h
"
#
include
"
include
/
private
/
SkSLModifiers
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
"
src
/
core
/
SkTHash
.
h
"
#
include
"
src
/
sksl
/
SkSLMemoryLayout
.
h
"
#
include
"
src
/
sksl
/
SkSLStringStream
.
h
"
#
include
"
src
/
sksl
/
codegen
/
SkSLCodeGenerator
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLFunctionDeclaration
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLFunctionDefinition
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLInterfaceBlock
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLSymbolTable
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLType
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLVariable
.
h
"
#
include
"
src
/
sksl
/
spirv
.
h
"
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
string_view
>
#
include
<
tuple
>
#
include
<
vector
>
namespace
SkSL
{
class
AnyConstructor
;
class
BinaryExpression
;
class
Block
;
class
ConstructorCompound
;
class
ConstructorCompoundCast
;
class
ConstructorDiagonalMatrix
;
class
ConstructorMatrixResize
;
class
ConstructorScalarCast
;
class
ConstructorSplat
;
class
Context
;
class
DoStatement
;
class
Expression
;
class
FieldAccess
;
class
ForStatement
;
class
FunctionCall
;
class
IfStatement
;
class
IndexExpression
;
class
Literal
;
class
Operator
;
class
OutputStream
;
class
Position
;
class
PostfixExpression
;
class
PrefixExpression
;
class
ProgramElement
;
class
ReturnStatement
;
class
Statement
;
class
SwitchStatement
;
class
Swizzle
;
class
TernaryExpression
;
class
VarDeclaration
;
class
VariableReference
;
enum
class
ProgramKind
:
int8_t
;
enum
IntrinsicKind
:
int8_t
;
struct
Program
;
class
SPIRVCodeGenerator
:
public
CodeGenerator
{
public
:
static
constexpr
SpvId
NA
=
(
SpvId
)
-
1
;
class
LValue
{
public
:
virtual
~
LValue
(
)
{
}
virtual
SpvId
getPointer
(
)
{
return
NA
;
}
virtual
bool
isMemoryObjectPointer
(
)
const
{
return
true
;
}
virtual
bool
applySwizzle
(
const
ComponentArray
&
components
const
Type
&
newType
)
{
return
false
;
}
virtual
SpvId
load
(
OutputStream
&
out
)
=
0
;
virtual
void
store
(
SpvId
value
OutputStream
&
out
)
=
0
;
}
;
SPIRVCodeGenerator
(
const
Context
*
context
const
Program
*
program
OutputStream
*
out
)
:
INHERITED
(
context
program
out
)
fDefaultLayout
(
MemoryLayout
:
:
Standard
:
:
k140
)
fCapabilities
(
0
)
fIdCount
(
1
)
fCurrentBlock
(
0
)
fSynthetics
(
true
)
{
}
bool
generateCode
(
)
override
;
private
:
enum
IntrinsicOpcodeKind
{
kGLSL_STD_450_IntrinsicOpcodeKind
kSPIRV_IntrinsicOpcodeKind
kSpecial_IntrinsicOpcodeKind
kInvalid_IntrinsicOpcodeKind
}
;
enum
SpecialIntrinsic
{
kAtan_SpecialIntrinsic
kClamp_SpecialIntrinsic
kMatrixCompMult_SpecialIntrinsic
kMax_SpecialIntrinsic
kMin_SpecialIntrinsic
kMix_SpecialIntrinsic
kMod_SpecialIntrinsic
kDFdy_SpecialIntrinsic
kSaturate_SpecialIntrinsic
kSampledImage_SpecialIntrinsic
kSmoothStep_SpecialIntrinsic
kStep_SpecialIntrinsic
kSubpassLoad_SpecialIntrinsic
kTexture_SpecialIntrinsic
kTextureGrad_SpecialIntrinsic
kTextureLod_SpecialIntrinsic
}
;
enum
class
Precision
{
kDefault
kRelaxed
}
;
struct
TempVar
{
SpvId
spvId
;
const
Type
*
type
;
std
:
:
unique_ptr
<
SPIRVCodeGenerator
:
:
LValue
>
lvalue
;
}
;
SpvId
nextId
(
const
Type
*
type
)
;
SpvId
nextId
(
Precision
precision
)
;
SpvId
getType
(
const
Type
&
type
)
;
SpvId
getType
(
const
Type
&
type
const
MemoryLayout
&
layout
)
;
SpvId
getFunctionType
(
const
FunctionDeclaration
&
function
)
;
SpvId
getFunctionParameterType
(
const
Type
&
parameterType
)
;
SpvId
getPointerType
(
const
Type
&
type
SpvStorageClass_
storageClass
)
;
SpvId
getPointerType
(
const
Type
&
type
const
MemoryLayout
&
layout
SpvStorageClass_
storageClass
)
;
SkTArray
<
SpvId
>
getAccessChain
(
const
Expression
&
expr
OutputStream
&
out
)
;
void
writeLayout
(
const
Layout
&
layout
SpvId
target
Position
pos
)
;
void
writeFieldLayout
(
const
Layout
&
layout
SpvId
target
int
member
)
;
SpvId
writeStruct
(
const
Type
&
type
const
MemoryLayout
&
memoryLayout
)
;
void
writeProgramElement
(
const
ProgramElement
&
pe
OutputStream
&
out
)
;
SpvId
writeInterfaceBlock
(
const
InterfaceBlock
&
intf
bool
appendRTFlip
=
true
)
;
SpvId
writeFunctionStart
(
const
FunctionDeclaration
&
f
OutputStream
&
out
)
;
SpvId
writeFunctionDeclaration
(
const
FunctionDeclaration
&
f
OutputStream
&
out
)
;
SpvId
writeFunction
(
const
FunctionDefinition
&
f
OutputStream
&
out
)
;
bool
writeGlobalVarDeclaration
(
ProgramKind
kind
const
VarDeclaration
&
v
)
;
SpvId
writeGlobalVar
(
ProgramKind
kind
SpvStorageClass_
const
Variable
&
v
)
;
void
writeVarDeclaration
(
const
VarDeclaration
&
var
OutputStream
&
out
)
;
SpvId
writeVariableReference
(
const
VariableReference
&
ref
OutputStream
&
out
)
;
int
findUniformFieldIndex
(
const
Variable
&
var
)
const
;
std
:
:
unique_ptr
<
LValue
>
getLValue
(
const
Expression
&
value
OutputStream
&
out
)
;
SpvId
writeExpression
(
const
Expression
&
expr
OutputStream
&
out
)
;
SpvId
writeIntrinsicCall
(
const
FunctionCall
&
c
OutputStream
&
out
)
;
SpvId
writeFunctionCallArgument
(
const
FunctionCall
&
call
int
argIndex
std
:
:
vector
<
TempVar
>
*
tempVars
OutputStream
&
out
SpvId
*
outSynthesizedSamplerId
=
nullptr
)
;
void
copyBackTempVars
(
const
std
:
:
vector
<
TempVar
>
&
tempVars
OutputStream
&
out
)
;
SpvId
writeFunctionCall
(
const
FunctionCall
&
c
OutputStream
&
out
)
;
void
writeGLSLExtendedInstruction
(
const
Type
&
type
SpvId
id
SpvId
floatInst
SpvId
signedInst
SpvId
unsignedInst
const
SkTArray
<
SpvId
>
&
args
OutputStream
&
out
)
;
SpvId
vectorize
(
const
Expression
&
expr
int
vectorSize
OutputStream
&
out
)
;
SkTArray
<
SpvId
>
vectorize
(
const
ExpressionArray
&
args
OutputStream
&
out
)
;
SpvId
writeSpecialIntrinsic
(
const
FunctionCall
&
c
SpecialIntrinsic
kind
OutputStream
&
out
)
;
SpvId
writeScalarToMatrixSplat
(
const
Type
&
matrixType
SpvId
scalarId
OutputStream
&
out
)
;
SpvId
writeFloatConstructor
(
const
AnyConstructor
&
c
OutputStream
&
out
)
;
SpvId
castScalarToFloat
(
SpvId
inputId
const
Type
&
inputType
const
Type
&
outputType
OutputStream
&
out
)
;
SpvId
writeIntConstructor
(
const
AnyConstructor
&
c
OutputStream
&
out
)
;
SpvId
castScalarToSignedInt
(
SpvId
inputId
const
Type
&
inputType
const
Type
&
outputType
OutputStream
&
out
)
;
SpvId
writeUIntConstructor
(
const
AnyConstructor
&
c
OutputStream
&
out
)
;
SpvId
castScalarToUnsignedInt
(
SpvId
inputId
const
Type
&
inputType
const
Type
&
outputType
OutputStream
&
out
)
;
SpvId
writeBooleanConstructor
(
const
AnyConstructor
&
c
OutputStream
&
out
)
;
SpvId
castScalarToBoolean
(
SpvId
inputId
const
Type
&
inputType
const
Type
&
outputType
OutputStream
&
out
)
;
SpvId
castScalarToType
(
SpvId
inputExprId
const
Type
&
inputType
const
Type
&
outputType
OutputStream
&
out
)
;
SpvId
writeMatrixCopy
(
SpvId
src
const
Type
&
srcType
const
Type
&
dstType
OutputStream
&
out
)
;
void
addColumnEntry
(
const
Type
&
columnType
SkTArray
<
SpvId
>
*
currentColumn
SkTArray
<
SpvId
>
*
columnIds
int
rows
SpvId
entry
OutputStream
&
out
)
;
SpvId
writeConstructorCompound
(
const
ConstructorCompound
&
c
OutputStream
&
out
)
;
SpvId
writeMatrixConstructor
(
const
ConstructorCompound
&
c
OutputStream
&
out
)
;
SpvId
writeVectorConstructor
(
const
ConstructorCompound
&
c
OutputStream
&
out
)
;
SpvId
writeCompositeConstructor
(
const
AnyConstructor
&
c
OutputStream
&
out
)
;
SpvId
writeConstructorDiagonalMatrix
(
const
ConstructorDiagonalMatrix
&
c
OutputStream
&
out
)
;
SpvId
writeConstructorMatrixResize
(
const
ConstructorMatrixResize
&
c
OutputStream
&
out
)
;
SpvId
writeConstructorScalarCast
(
const
ConstructorScalarCast
&
c
OutputStream
&
out
)
;
SpvId
writeConstructorSplat
(
const
ConstructorSplat
&
c
OutputStream
&
out
)
;
SpvId
writeConstructorCompoundCast
(
const
ConstructorCompoundCast
&
c
OutputStream
&
out
)
;
SpvId
writeFieldAccess
(
const
FieldAccess
&
f
OutputStream
&
out
)
;
SpvId
writeSwizzle
(
const
Swizzle
&
swizzle
OutputStream
&
out
)
;
SpvId
foldToBool
(
SpvId
id
const
Type
&
operandType
SpvOp
op
OutputStream
&
out
)
;
SpvId
writeMatrixComparison
(
const
Type
&
operandType
SpvId
lhs
SpvId
rhs
SpvOp_
floatOperator
SpvOp_
intOperator
SpvOp_
vectorMergeOperator
SpvOp_
mergeOperator
OutputStream
&
out
)
;
SpvId
writeStructComparison
(
const
Type
&
structType
SpvId
lhs
Operator
op
SpvId
rhs
OutputStream
&
out
)
;
SpvId
writeArrayComparison
(
const
Type
&
structType
SpvId
lhs
Operator
op
SpvId
rhs
OutputStream
&
out
)
;
SpvId
mergeComparisons
(
SpvId
comparison
SpvId
allComparisons
Operator
op
OutputStream
&
out
)
;
SpvId
writeComponentwiseMatrixUnary
(
const
Type
&
operandType
SpvId
operand
SpvOp_
op
OutputStream
&
out
)
;
SpvId
writeComponentwiseMatrixBinary
(
const
Type
&
operandType
SpvId
lhs
SpvId
rhs
SpvOp_
op
OutputStream
&
out
)
;
SpvId
writeBinaryOperation
(
const
Type
&
resultType
const
Type
&
operandType
SpvId
lhs
SpvId
rhs
SpvOp_
ifFloat
SpvOp_
ifInt
SpvOp_
ifUInt
SpvOp_
ifBool
OutputStream
&
out
)
;
SpvId
writeReciprocal
(
const
Type
&
type
SpvId
value
OutputStream
&
out
)
;
SpvId
writeBinaryExpression
(
const
Type
&
leftType
SpvId
lhs
Operator
op
const
Type
&
rightType
SpvId
rhs
const
Type
&
resultType
OutputStream
&
out
)
;
SpvId
writeBinaryExpression
(
const
BinaryExpression
&
b
OutputStream
&
out
)
;
SpvId
writeTernaryExpression
(
const
TernaryExpression
&
t
OutputStream
&
out
)
;
SpvId
writeIndexExpression
(
const
IndexExpression
&
expr
OutputStream
&
out
)
;
SpvId
writeLogicalAnd
(
const
Expression
&
left
const
Expression
&
right
OutputStream
&
out
)
;
SpvId
writeLogicalOr
(
const
Expression
&
left
const
Expression
&
right
OutputStream
&
out
)
;
SpvId
writePrefixExpression
(
const
PrefixExpression
&
p
OutputStream
&
out
)
;
SpvId
writePostfixExpression
(
const
PostfixExpression
&
p
OutputStream
&
out
)
;
SpvId
writeLiteral
(
const
Literal
&
f
)
;
SpvId
writeLiteral
(
double
value
const
Type
&
type
)
;
void
writeStatement
(
const
Statement
&
s
OutputStream
&
out
)
;
void
writeBlock
(
const
Block
&
b
OutputStream
&
out
)
;
void
writeIfStatement
(
const
IfStatement
&
stmt
OutputStream
&
out
)
;
void
writeForStatement
(
const
ForStatement
&
f
OutputStream
&
out
)
;
void
writeDoStatement
(
const
DoStatement
&
d
OutputStream
&
out
)
;
void
writeSwitchStatement
(
const
SwitchStatement
&
s
OutputStream
&
out
)
;
void
writeReturnStatement
(
const
ReturnStatement
&
r
OutputStream
&
out
)
;
void
writeCapabilities
(
OutputStream
&
out
)
;
void
writeInstructions
(
const
Program
&
program
OutputStream
&
out
)
;
void
writeOpCode
(
SpvOp_
opCode
int
length
OutputStream
&
out
)
;
void
writeWord
(
int32_t
word
OutputStream
&
out
)
;
void
writeString
(
std
:
:
string_view
s
OutputStream
&
out
)
;
void
writeInstruction
(
SpvOp_
opCode
OutputStream
&
out
)
;
void
writeInstruction
(
SpvOp_
opCode
std
:
:
string_view
string
OutputStream
&
out
)
;
void
writeInstruction
(
SpvOp_
opCode
int32_t
word1
OutputStream
&
out
)
;
void
writeInstruction
(
SpvOp_
opCode
int32_t
word1
std
:
:
string_view
string
OutputStream
&
out
)
;
void
writeInstruction
(
SpvOp_
opCode
int32_t
word1
int32_t
word2
std
:
:
string_view
string
OutputStream
&
out
)
;
void
writeInstruction
(
SpvOp_
opCode
int32_t
word1
int32_t
word2
OutputStream
&
out
)
;
void
writeInstruction
(
SpvOp_
opCode
int32_t
word1
int32_t
word2
int32_t
word3
OutputStream
&
out
)
;
void
writeInstruction
(
SpvOp_
opCode
int32_t
word1
int32_t
word2
int32_t
word3
int32_t
word4
OutputStream
&
out
)
;
void
writeInstruction
(
SpvOp_
opCode
int32_t
word1
int32_t
word2
int32_t
word3
int32_t
word4
int32_t
word5
OutputStream
&
out
)
;
void
writeInstruction
(
SpvOp_
opCode
int32_t
word1
int32_t
word2
int32_t
word3
int32_t
word4
int32_t
word5
int32_t
word6
OutputStream
&
out
)
;
void
writeInstruction
(
SpvOp_
opCode
int32_t
word1
int32_t
word2
int32_t
word3
int32_t
word4
int32_t
word5
int32_t
word6
int32_t
word7
OutputStream
&
out
)
;
void
writeInstruction
(
SpvOp_
opCode
int32_t
word1
int32_t
word2
int32_t
word3
int32_t
word4
int32_t
word5
int32_t
word6
int32_t
word7
int32_t
word8
OutputStream
&
out
)
;
struct
Word
;
using
Words
=
SkSTArray
<
8
Word
true
>
;
SpvId
writeInstruction
(
SpvOp_
opCode
const
SkTArray
<
Word
true
>
&
words
OutputStream
&
out
)
;
struct
Instruction
{
SpvId
fOp
;
int32_t
fResultKind
;
SkSTArray
<
8
int32_t
>
fWords
;
bool
operator
=
=
(
const
Instruction
&
that
)
const
;
struct
Hash
;
}
;
static
Instruction
BuildInstructionKey
(
SpvOp_
opCode
const
SkTArray
<
Word
true
>
&
words
)
;
SpvId
writeOpConstantTrue
(
const
Type
&
type
)
;
SpvId
writeOpConstantFalse
(
const
Type
&
type
)
;
SpvId
writeOpConstant
(
const
Type
&
type
int32_t
valueBits
)
;
SpvId
writeOpConstantComposite
(
const
Type
&
type
const
SkTArray
<
SpvId
>
&
values
)
;
SpvId
writeOpCompositeConstruct
(
const
Type
&
type
const
SkTArray
<
SpvId
>
&
OutputStream
&
out
)
;
SpvId
writeOpCompositeExtract
(
const
Type
&
type
SpvId
base
int
component
OutputStream
&
out
)
;
SpvId
writeOpCompositeExtract
(
const
Type
&
type
SpvId
base
int
componentA
int
componentB
OutputStream
&
out
)
;
SpvId
writeOpLoad
(
SpvId
type
Precision
precision
SpvId
pointer
OutputStream
&
out
)
;
void
writeOpStore
(
SpvStorageClass_
storageClass
SpvId
pointer
SpvId
value
OutputStream
&
out
)
;
bool
toConstants
(
SpvId
value
SkTArray
<
SpvId
>
*
constants
)
;
bool
toConstants
(
SkSpan
<
const
SpvId
>
values
SkTArray
<
SpvId
>
*
constants
)
;
Instruction
*
resultTypeForInstruction
(
const
Instruction
&
instr
)
;
int
numComponentsForVecInstruction
(
const
Instruction
&
instr
)
;
SpvId
toComponent
(
SpvId
id
int
component
)
;
struct
ConditionalOpCounts
{
int
numReachableOps
;
int
numStoreOps
;
}
;
ConditionalOpCounts
getConditionalOpCounts
(
)
;
void
pruneConditionalOps
(
ConditionalOpCounts
ops
)
;
enum
StraightLineLabelType
{
kBranchlessBlock
kBranchIsOnPreviousLine
}
;
enum
BranchingLabelType
{
kBranchIsAbove
kBranchIsBelow
kBranchesOnBothSides
}
;
void
writeLabel
(
SpvId
label
StraightLineLabelType
type
OutputStream
&
out
)
;
void
writeLabel
(
SpvId
label
BranchingLabelType
type
ConditionalOpCounts
ops
OutputStream
&
out
)
;
bool
isDead
(
const
Variable
&
var
)
const
;
MemoryLayout
memoryLayoutForStorageClass
(
SpvStorageClass_
storageClass
)
;
MemoryLayout
memoryLayoutForVariable
(
const
Variable
&
)
const
;
struct
EntrypointAdapter
{
std
:
:
unique_ptr
<
FunctionDefinition
>
entrypointDef
;
std
:
:
unique_ptr
<
FunctionDeclaration
>
entrypointDecl
;
Layout
fLayout
;
Modifiers
fModifiers
;
}
;
EntrypointAdapter
writeEntrypointAdapter
(
const
FunctionDeclaration
&
main
)
;
struct
UniformBuffer
{
std
:
:
unique_ptr
<
InterfaceBlock
>
fInterfaceBlock
;
std
:
:
unique_ptr
<
Variable
>
fInnerVariable
;
std
:
:
unique_ptr
<
Type
>
fStruct
;
}
;
void
writeUniformBuffer
(
std
:
:
shared_ptr
<
SymbolTable
>
topLevelSymbolTable
)
;
void
addRTFlipUniform
(
Position
pos
)
;
std
:
:
tuple
<
const
Variable
*
const
Variable
*
>
synthesizeTextureAndSampler
(
const
Variable
&
combinedSampler
)
;
const
MemoryLayout
fDefaultLayout
;
uint64_t
fCapabilities
;
SpvId
fIdCount
;
SpvId
fGLSLExtendedInstructions
;
struct
Intrinsic
{
IntrinsicOpcodeKind
opKind
;
int32_t
floatOp
;
int32_t
signedOp
;
int32_t
unsignedOp
;
int32_t
boolOp
;
}
;
Intrinsic
getIntrinsic
(
IntrinsicKind
)
const
;
SkTHashMap
<
const
FunctionDeclaration
*
SpvId
>
fFunctionMap
;
SkTHashMap
<
const
Variable
*
SpvId
>
fVariableMap
;
SkTHashMap
<
const
Type
*
SpvId
>
fStructMap
;
StringStream
fGlobalInitializersBuffer
;
StringStream
fConstantBuffer
;
StringStream
fVariableBuffer
;
StringStream
fNameBuffer
;
StringStream
fDecorationBuffer
;
struct
SynthesizedTextureSamplerPair
{
std
:
:
string
fTextureName
;
std
:
:
string
fSamplerName
;
std
:
:
unique_ptr
<
Variable
>
fTexture
;
std
:
:
unique_ptr
<
Variable
>
fSampler
;
}
;
SkTHashMap
<
const
Variable
*
std
:
:
unique_ptr
<
SynthesizedTextureSamplerPair
>
>
fSynthesizedSamplerMap
;
SkTHashMap
<
Instruction
SpvId
Instruction
:
:
Hash
>
fOpCache
;
SkTHashMap
<
SpvId
Instruction
>
fSpvIdCache
;
SkTHashMap
<
SpvId
SpvId
>
fStoreCache
;
SkTArray
<
SpvId
>
fReachableOps
;
SkTArray
<
SpvId
>
fStoreOps
;
SpvId
fCurrentBlock
;
SkTArray
<
SpvId
>
fBreakTarget
;
SkTArray
<
SpvId
>
fContinueTarget
;
bool
fWroteRTFlip
=
false
;
SymbolTable
fSynthetics
;
UniformBuffer
fUniformBuffer
;
std
:
:
vector
<
const
VarDeclaration
*
>
fTopLevelUniforms
;
SkTHashMap
<
const
Variable
*
int
>
fTopLevelUniformMap
;
SkTHashSet
<
const
Variable
*
>
fSPIRVBonusVariables
;
SpvId
fUniformBufferId
=
NA
;
friend
class
PointerLValue
;
friend
class
SwizzleLValue
;
using
INHERITED
=
CodeGenerator
;
}
;
}
#
endif
