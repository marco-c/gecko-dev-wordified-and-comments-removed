#
include
"
src
/
sksl
/
codegen
/
SkSLWGSLValidator
.
h
"
#
include
"
src
/
sksl
/
SkSLErrorReporter
.
h
"
#
include
"
src
/
sksl
/
SkSLPosition
.
h
"
#
include
"
src
/
tint
/
lang
/
wgsl
/
extension
.
h
"
#
include
"
src
/
tint
/
lang
/
wgsl
/
reader
/
options
.
h
"
#
include
"
tint
/
tint
.
h
"
namespace
SkSL
{
static
bool
validate_wgsl
(
ErrorReporter
&
reporter
std
:
:
string_view
wgsl
bool
appendError
std
:
:
string
*
warnings
)
{
tint
:
:
wgsl
:
:
reader
:
:
Options
options
;
for
(
auto
extension
:
{
tint
:
:
wgsl
:
:
Extension
:
:
kChromiumExperimentalPixelLocal
tint
:
:
wgsl
:
:
Extension
:
:
kDualSourceBlending
}
)
{
options
.
allowed_features
.
extensions
.
insert
(
extension
)
;
}
options
.
allowed_features
.
features
.
insert
(
tint
:
:
wgsl
:
:
LanguageFeature
:
:
kUnrestrictedPointerParameters
)
;
tint
:
:
Source
:
:
File
srcFile
(
"
"
wgsl
)
;
tint
:
:
Program
program
(
tint
:
:
wgsl
:
:
reader
:
:
Parse
(
&
srcFile
options
)
)
;
if
(
program
.
Diagnostics
(
)
.
ContainsErrors
(
)
)
{
if
(
appendError
)
{
tint
:
:
diag
:
:
Formatter
diagFormatter
;
std
:
:
string
diagOutput
=
diagFormatter
.
Format
(
program
.
Diagnostics
(
)
)
.
Plain
(
)
;
diagOutput
+
=
"
\
n
"
;
diagOutput
+
=
wgsl
;
SkDEBUGFAILF
(
"
%
s
"
diagOutput
.
c_str
(
)
)
;
}
else
{
reporter
.
error
(
Position
(
)
std
:
:
string
(
"
Tint
compilation
failed
.
\
n
\
n
"
)
+
std
:
:
string
(
wgsl
)
)
;
}
return
false
;
}
if
(
!
program
.
Diagnostics
(
)
.
empty
(
)
)
{
tint
:
:
diag
:
:
Formatter
diagFormatter
;
*
warnings
=
diagFormatter
.
Format
(
program
.
Diagnostics
(
)
)
.
Plain
(
)
;
}
return
true
;
}
bool
ValidateWGSL
(
ErrorReporter
&
reporter
std
:
:
string_view
wgsl
std
:
:
string
*
warnings
)
{
return
validate_wgsl
(
reporter
wgsl
false
warnings
)
;
}
bool
ValidateWGSLVerbose
(
ErrorReporter
&
reporter
std
:
:
string_view
wgsl
std
:
:
string
*
warnings
)
{
return
validate_wgsl
(
reporter
wgsl
true
warnings
)
;
}
}
