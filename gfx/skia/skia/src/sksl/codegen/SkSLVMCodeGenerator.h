#
ifndef
SKSL_VMGENERATOR
#
define
SKSL_VMGENERATOR
#
include
"
src
/
core
/
SkVM
.
h
"
#
include
<
cstddef
>
template
<
typename
T
>
class
SkSpan
;
namespace
SkSL
{
class
FunctionDefinition
;
struct
Program
;
class
SkVMDebugTrace
;
class
SkVMCallbacks
{
public
:
virtual
~
SkVMCallbacks
(
)
=
default
;
virtual
skvm
:
:
Color
sampleShader
(
int
index
skvm
:
:
Coord
coord
)
=
0
;
virtual
skvm
:
:
Color
sampleColorFilter
(
int
index
skvm
:
:
Color
color
)
=
0
;
virtual
skvm
:
:
Color
sampleBlender
(
int
index
skvm
:
:
Color
src
skvm
:
:
Color
dst
)
=
0
;
virtual
skvm
:
:
Color
toLinearSrgb
(
skvm
:
:
Color
color
)
=
0
;
virtual
skvm
:
:
Color
fromLinearSrgb
(
skvm
:
:
Color
color
)
=
0
;
}
;
skvm
:
:
Color
ProgramToSkVM
(
const
Program
&
program
const
FunctionDefinition
&
function
skvm
:
:
Builder
*
builder
SkVMDebugTrace
*
debugTrace
SkSpan
<
skvm
:
:
Val
>
uniforms
skvm
:
:
Coord
device
skvm
:
:
Coord
local
skvm
:
:
Color
inputColor
skvm
:
:
Color
destColor
SkVMCallbacks
*
callbacks
)
;
struct
SkVMSignature
{
size_t
fParameterSlots
=
0
;
size_t
fReturnSlots
=
0
;
}
;
bool
ProgramToSkVM
(
const
Program
&
program
const
FunctionDefinition
&
function
skvm
:
:
Builder
*
b
SkVMDebugTrace
*
debugTrace
SkSpan
<
skvm
:
:
Val
>
uniforms
SkVMSignature
*
outSignature
=
nullptr
)
;
bool
testingOnly_ProgramToSkVMShader
(
const
Program
&
program
skvm
:
:
Builder
*
builder
SkVMDebugTrace
*
debugTrace
)
;
}
#
endif
