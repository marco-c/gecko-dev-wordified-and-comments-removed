#
ifndef
SKSL_INTLITERAL
#
define
SKSL_INTLITERAL
#
include
"
SkSLContext
.
h
"
#
include
"
SkSLExpression
.
h
"
namespace
SkSL
{
struct
IntLiteral
:
public
Expression
{
IntLiteral
(
const
Context
&
context
int
offset
int64_t
value
const
Type
*
type
=
nullptr
)
:
INHERITED
(
offset
kIntLiteral_Kind
type
?
*
type
:
*
context
.
fInt_Type
)
fValue
(
value
)
{
}
String
description
(
)
const
override
{
return
to_string
(
fValue
)
;
}
bool
hasSideEffects
(
)
const
override
{
return
false
;
}
bool
isConstant
(
)
const
override
{
return
true
;
}
bool
compareConstant
(
const
Context
&
context
const
Expression
&
other
)
const
override
{
IntLiteral
&
i
=
(
IntLiteral
&
)
other
;
return
fValue
=
=
i
.
fValue
;
}
int
coercionCost
(
const
Type
&
target
)
const
override
{
if
(
target
.
isUnsigned
(
)
)
{
return
0
;
}
return
INHERITED
:
:
coercionCost
(
target
)
;
}
int64_t
getConstantInt
(
)
const
override
{
return
fValue
;
}
const
int64_t
fValue
;
typedef
Expression
INHERITED
;
}
;
}
#
endif
