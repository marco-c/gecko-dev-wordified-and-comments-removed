#
ifndef
SKSL_CONSTRUCTOR
#
define
SKSL_CONSTRUCTOR
#
include
"
SkSLExpression
.
h
"
namespace
SkSL
{
struct
Constructor
:
public
Expression
{
Constructor
(
Position
position
const
Type
&
type
std
:
:
vector
<
std
:
:
unique_ptr
<
Expression
>
>
arguments
)
:
INHERITED
(
position
kConstructor_Kind
type
)
fArguments
(
std
:
:
move
(
arguments
)
)
{
}
std
:
:
string
description
(
)
const
override
{
std
:
:
string
result
=
fType
.
description
(
)
+
"
(
"
;
std
:
:
string
separator
=
"
"
;
for
(
size_t
i
=
0
;
i
<
fArguments
.
size
(
)
;
i
+
+
)
{
result
+
=
separator
;
result
+
=
fArguments
[
i
]
-
>
description
(
)
;
separator
=
"
"
;
}
result
+
=
"
)
"
;
return
result
;
}
bool
isConstant
(
)
const
override
{
for
(
size_t
i
=
0
;
i
<
fArguments
.
size
(
)
;
i
+
+
)
{
if
(
!
fArguments
[
i
]
-
>
isConstant
(
)
)
{
return
false
;
}
}
return
true
;
}
const
std
:
:
vector
<
std
:
:
unique_ptr
<
Expression
>
>
fArguments
;
typedef
Expression
INHERITED
;
}
;
}
#
endif
