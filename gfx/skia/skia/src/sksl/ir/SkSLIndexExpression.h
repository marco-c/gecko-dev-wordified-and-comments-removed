#
ifndef
SKSL_INDEX
#
define
SKSL_INDEX
#
include
"
src
/
sksl
/
SkSLPosition
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLExpression
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLIRNode
.
h
"
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
namespace
SkSL
{
class
Context
;
class
Type
;
enum
class
OperatorPrecedence
:
uint8_t
;
class
IndexExpression
final
:
public
Expression
{
public
:
inline
static
constexpr
Kind
kIRNodeKind
=
Kind
:
:
kIndex
;
IndexExpression
(
const
Context
&
context
Position
pos
std
:
:
unique_ptr
<
Expression
>
base
std
:
:
unique_ptr
<
Expression
>
index
)
:
INHERITED
(
pos
kIRNodeKind
&
IndexType
(
context
base
-
>
type
(
)
)
)
fBase
(
std
:
:
move
(
base
)
)
fIndex
(
std
:
:
move
(
index
)
)
{
}
static
std
:
:
unique_ptr
<
Expression
>
Convert
(
const
Context
&
context
Position
pos
std
:
:
unique_ptr
<
Expression
>
base
std
:
:
unique_ptr
<
Expression
>
index
)
;
static
std
:
:
unique_ptr
<
Expression
>
Make
(
const
Context
&
context
Position
pos
std
:
:
unique_ptr
<
Expression
>
base
std
:
:
unique_ptr
<
Expression
>
index
)
;
static
const
Type
&
IndexType
(
const
Context
&
context
const
Type
&
type
)
;
std
:
:
unique_ptr
<
Expression
>
&
base
(
)
{
return
fBase
;
}
const
std
:
:
unique_ptr
<
Expression
>
&
base
(
)
const
{
return
fBase
;
}
std
:
:
unique_ptr
<
Expression
>
&
index
(
)
{
return
fIndex
;
}
const
std
:
:
unique_ptr
<
Expression
>
&
index
(
)
const
{
return
fIndex
;
}
std
:
:
unique_ptr
<
Expression
>
clone
(
Position
pos
)
const
override
{
return
std
:
:
unique_ptr
<
Expression
>
(
new
IndexExpression
(
pos
this
-
>
base
(
)
-
>
clone
(
)
this
-
>
index
(
)
-
>
clone
(
)
&
this
-
>
type
(
)
)
)
;
}
std
:
:
string
description
(
OperatorPrecedence
)
const
override
;
using
INHERITED
=
Expression
;
private
:
IndexExpression
(
Position
pos
std
:
:
unique_ptr
<
Expression
>
base
std
:
:
unique_ptr
<
Expression
>
index
const
Type
*
type
)
:
INHERITED
(
pos
Kind
:
:
kIndex
type
)
fBase
(
std
:
:
move
(
base
)
)
fIndex
(
std
:
:
move
(
index
)
)
{
}
std
:
:
unique_ptr
<
Expression
>
fBase
;
std
:
:
unique_ptr
<
Expression
>
fIndex
;
}
;
}
#
endif
