#
ifndef
SkSLEmptyExpression_DEFINED
#
define
SkSLEmptyExpression_DEFINED
#
include
"
src
/
sksl
/
SkSLBuiltinTypes
.
h
"
#
include
"
src
/
sksl
/
SkSLCompiler
.
h
"
#
include
"
src
/
sksl
/
SkSLContext
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLExpression
.
h
"
namespace
SkSL
{
class
EmptyExpression
:
public
Expression
{
public
:
inline
static
constexpr
Kind
kIRNodeKind
=
Kind
:
:
kEmpty
;
static
std
:
:
unique_ptr
<
Expression
>
Make
(
Position
pos
const
Context
&
context
)
{
return
std
:
:
make_unique
<
EmptyExpression
>
(
pos
context
.
fTypes
.
fVoid
.
get
(
)
)
;
}
EmptyExpression
(
Position
pos
const
Type
*
type
)
:
INHERITED
(
pos
kIRNodeKind
type
)
{
SkASSERT
(
type
-
>
isVoid
(
)
)
;
}
std
:
:
unique_ptr
<
Expression
>
clone
(
Position
pos
)
const
override
{
return
std
:
:
make_unique
<
EmptyExpression
>
(
pos
&
this
-
>
type
(
)
)
;
}
std
:
:
string
description
(
OperatorPrecedence
)
const
override
{
return
"
false
"
;
}
private
:
using
INHERITED
=
Expression
;
}
;
}
#
endif
