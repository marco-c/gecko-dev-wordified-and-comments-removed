#
ifndef
SKSL_FUNCTIONCALL
#
define
SKSL_FUNCTIONCALL
#
include
"
SkSLExpression
.
h
"
#
include
"
SkSLFunctionDeclaration
.
h
"
namespace
SkSL
{
struct
FunctionCall
:
public
Expression
{
FunctionCall
(
Position
position
const
Type
&
type
const
FunctionDeclaration
&
function
std
:
:
vector
<
std
:
:
unique_ptr
<
Expression
>
>
arguments
)
:
INHERITED
(
position
kFunctionCall_Kind
type
)
fFunction
(
std
:
:
move
(
function
)
)
fArguments
(
std
:
:
move
(
arguments
)
)
{
}
String
description
(
)
const
override
{
String
result
=
fFunction
.
fName
+
"
(
"
;
String
separator
;
for
(
size_t
i
=
0
;
i
<
fArguments
.
size
(
)
;
i
+
+
)
{
result
+
=
separator
;
result
+
=
fArguments
[
i
]
-
>
description
(
)
;
separator
=
"
"
;
}
result
+
=
"
)
"
;
return
result
;
}
const
FunctionDeclaration
&
fFunction
;
std
:
:
vector
<
std
:
:
unique_ptr
<
Expression
>
>
fArguments
;
typedef
Expression
INHERITED
;
}
;
}
#
endif
