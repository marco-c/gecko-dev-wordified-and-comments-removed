#
ifndef
SKSL_FUNCTIONDEFINITION
#
define
SKSL_FUNCTIONDEFINITION
#
include
"
include
/
private
/
SkSLIRNode
.
h
"
#
include
"
include
/
private
/
SkSLProgramElement
.
h
"
#
include
"
include
/
private
/
SkSLStatement
.
h
"
#
include
"
include
/
sksl
/
SkSLPosition
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLFunctionDeclaration
.
h
"
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
namespace
SkSL
{
class
Context
;
class
FunctionDefinition
final
:
public
ProgramElement
{
public
:
inline
static
constexpr
Kind
kIRNodeKind
=
Kind
:
:
kFunction
;
FunctionDefinition
(
Position
pos
const
FunctionDeclaration
*
declaration
bool
builtin
std
:
:
unique_ptr
<
Statement
>
body
)
:
INHERITED
(
pos
kIRNodeKind
)
fDeclaration
(
declaration
)
fBuiltin
(
builtin
)
fBody
(
std
:
:
move
(
body
)
)
{
}
static
std
:
:
unique_ptr
<
FunctionDefinition
>
Convert
(
const
Context
&
context
Position
pos
const
FunctionDeclaration
&
function
std
:
:
unique_ptr
<
Statement
>
body
bool
builtin
)
;
const
FunctionDeclaration
&
declaration
(
)
const
{
return
*
fDeclaration
;
}
bool
isBuiltin
(
)
const
{
return
fBuiltin
;
}
std
:
:
unique_ptr
<
Statement
>
&
body
(
)
{
return
fBody
;
}
const
std
:
:
unique_ptr
<
Statement
>
&
body
(
)
const
{
return
fBody
;
}
std
:
:
unique_ptr
<
ProgramElement
>
clone
(
)
const
override
{
return
std
:
:
make_unique
<
FunctionDefinition
>
(
fPosition
&
this
-
>
declaration
(
)
false
this
-
>
body
(
)
-
>
clone
(
)
)
;
}
std
:
:
string
description
(
)
const
override
{
return
this
-
>
declaration
(
)
.
description
(
)
+
"
"
+
this
-
>
body
(
)
-
>
description
(
)
;
}
private
:
const
FunctionDeclaration
*
fDeclaration
;
bool
fBuiltin
;
std
:
:
unique_ptr
<
Statement
>
fBody
;
using
INHERITED
=
ProgramElement
;
}
;
}
#
endif
