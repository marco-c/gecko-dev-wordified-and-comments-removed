#
ifndef
SKSL_SWITCHSTATEMENT
#
define
SKSL_SWITCHSTATEMENT
#
include
"
include
/
private
/
SkSLDefines
.
h
"
#
include
"
include
/
private
/
SkSLIRNode
.
h
"
#
include
"
include
/
private
/
SkSLStatement
.
h
"
#
include
"
include
/
sksl
/
SkSLPosition
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLExpression
.
h
"
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
namespace
SkSL
{
class
Context
;
class
SwitchCase
;
class
SymbolTable
;
class
SwitchStatement
final
:
public
Statement
{
public
:
inline
static
constexpr
Kind
kIRNodeKind
=
Kind
:
:
kSwitch
;
SwitchStatement
(
Position
pos
std
:
:
unique_ptr
<
Expression
>
value
StatementArray
cases
std
:
:
shared_ptr
<
SymbolTable
>
symbols
)
:
INHERITED
(
pos
kIRNodeKind
)
fValue
(
std
:
:
move
(
value
)
)
fCases
(
std
:
:
move
(
cases
)
)
fSymbols
(
std
:
:
move
(
symbols
)
)
{
}
static
std
:
:
unique_ptr
<
Statement
>
Convert
(
const
Context
&
context
Position
pos
std
:
:
unique_ptr
<
Expression
>
value
ExpressionArray
caseValues
StatementArray
caseStatements
std
:
:
shared_ptr
<
SymbolTable
>
symbolTable
)
;
static
std
:
:
unique_ptr
<
Statement
>
Make
(
const
Context
&
context
Position
pos
std
:
:
unique_ptr
<
Expression
>
value
StatementArray
cases
std
:
:
shared_ptr
<
SymbolTable
>
symbolTable
)
;
static
std
:
:
unique_ptr
<
Statement
>
BlockForCase
(
StatementArray
*
cases
SwitchCase
*
caseToCapture
std
:
:
shared_ptr
<
SymbolTable
>
symbolTable
)
;
std
:
:
unique_ptr
<
Expression
>
&
value
(
)
{
return
fValue
;
}
const
std
:
:
unique_ptr
<
Expression
>
&
value
(
)
const
{
return
fValue
;
}
StatementArray
&
cases
(
)
{
return
fCases
;
}
const
StatementArray
&
cases
(
)
const
{
return
fCases
;
}
const
std
:
:
shared_ptr
<
SymbolTable
>
&
symbols
(
)
const
{
return
fSymbols
;
}
std
:
:
unique_ptr
<
Statement
>
clone
(
)
const
override
;
std
:
:
string
description
(
)
const
override
;
private
:
std
:
:
unique_ptr
<
Expression
>
fValue
;
StatementArray
fCases
;
std
:
:
shared_ptr
<
SymbolTable
>
fSymbols
;
using
INHERITED
=
Statement
;
}
;
}
#
endif
