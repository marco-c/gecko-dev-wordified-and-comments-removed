#
include
"
src
/
sksl
/
ir
/
SkSLExpressionStatement
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
src
/
sksl
/
SkSLAnalysis
.
h
"
#
include
"
src
/
sksl
/
SkSLContext
.
h
"
#
include
"
src
/
sksl
/
SkSLProgramSettings
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLBinaryExpression
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLNop
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLVariableReference
.
h
"
namespace
SkSL
{
std
:
:
unique_ptr
<
Statement
>
ExpressionStatement
:
:
Convert
(
const
Context
&
context
std
:
:
unique_ptr
<
Expression
>
expr
)
{
if
(
expr
-
>
isIncomplete
(
context
)
)
{
return
nullptr
;
}
return
ExpressionStatement
:
:
Make
(
context
std
:
:
move
(
expr
)
)
;
}
std
:
:
unique_ptr
<
Statement
>
ExpressionStatement
:
:
Make
(
const
Context
&
context
std
:
:
unique_ptr
<
Expression
>
expr
)
{
SkASSERT
(
!
expr
-
>
isIncomplete
(
context
)
)
;
if
(
context
.
fConfig
-
>
fSettings
.
fOptimize
)
{
if
(
!
Analysis
:
:
HasSideEffects
(
*
expr
)
)
{
return
Nop
:
:
Make
(
)
;
}
if
(
expr
-
>
is
<
BinaryExpression
>
(
)
)
{
BinaryExpression
&
binary
=
expr
-
>
as
<
BinaryExpression
>
(
)
;
if
(
VariableReference
*
assignedVar
=
binary
.
isAssignmentIntoVariable
(
)
)
{
if
(
assignedVar
-
>
refKind
(
)
=
=
VariableRefKind
:
:
kReadWrite
)
{
assignedVar
-
>
setRefKind
(
VariableRefKind
:
:
kWrite
)
;
}
}
}
}
return
std
:
:
make_unique
<
ExpressionStatement
>
(
std
:
:
move
(
expr
)
)
;
}
}
