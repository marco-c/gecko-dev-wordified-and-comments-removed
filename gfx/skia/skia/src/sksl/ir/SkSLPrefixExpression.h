#
ifndef
SKSL_PREFIXEXPRESSION
#
define
SKSL_PREFIXEXPRESSION
#
include
"
include
/
private
/
SkSLIRNode
.
h
"
#
include
"
include
/
sksl
/
SkSLOperator
.
h
"
#
include
"
include
/
sksl
/
SkSLPosition
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLExpression
.
h
"
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
namespace
SkSL
{
class
Context
;
class
PrefixExpression
final
:
public
Expression
{
public
:
inline
static
constexpr
Kind
kIRNodeKind
=
Kind
:
:
kPrefix
;
PrefixExpression
(
Position
pos
Operator
op
std
:
:
unique_ptr
<
Expression
>
operand
)
:
INHERITED
(
pos
kIRNodeKind
&
operand
-
>
type
(
)
)
fOperator
(
op
)
fOperand
(
std
:
:
move
(
operand
)
)
{
}
static
std
:
:
unique_ptr
<
Expression
>
Convert
(
const
Context
&
context
Position
pos
Operator
op
std
:
:
unique_ptr
<
Expression
>
base
)
;
static
std
:
:
unique_ptr
<
Expression
>
Make
(
const
Context
&
context
Position
pos
Operator
op
std
:
:
unique_ptr
<
Expression
>
base
)
;
Operator
getOperator
(
)
const
{
return
fOperator
;
}
std
:
:
unique_ptr
<
Expression
>
&
operand
(
)
{
return
fOperand
;
}
const
std
:
:
unique_ptr
<
Expression
>
&
operand
(
)
const
{
return
fOperand
;
}
std
:
:
unique_ptr
<
Expression
>
clone
(
Position
pos
)
const
override
{
return
std
:
:
make_unique
<
PrefixExpression
>
(
pos
this
-
>
getOperator
(
)
this
-
>
operand
(
)
-
>
clone
(
)
)
;
}
std
:
:
string
description
(
OperatorPrecedence
parentPrecedence
)
const
override
;
private
:
Operator
fOperator
;
std
:
:
unique_ptr
<
Expression
>
fOperand
;
using
INHERITED
=
Expression
;
}
;
}
#
endif
