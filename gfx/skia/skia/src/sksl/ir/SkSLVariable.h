#
ifndef
SKSL_VARIABLE
#
define
SKSL_VARIABLE
#
include
"
SkSLModifiers
.
h
"
#
include
"
SkSLPosition
.
h
"
#
include
"
SkSLSymbol
.
h
"
#
include
"
SkSLType
.
h
"
namespace
SkSL
{
struct
Expression
;
struct
Variable
:
public
Symbol
{
enum
Storage
{
kGlobal_Storage
kLocal_Storage
kParameter_Storage
}
;
Variable
(
int
offset
Modifiers
modifiers
StringFragment
name
const
Type
&
type
Storage
storage
Expression
*
initialValue
=
nullptr
)
:
INHERITED
(
offset
kVariable_Kind
name
)
fModifiers
(
modifiers
)
fType
(
type
)
fStorage
(
storage
)
fInitialValue
(
initialValue
)
fReadCount
(
0
)
fWriteCount
(
initialValue
?
1
:
0
)
{
}
~
Variable
(
)
override
{
if
(
fInitialValue
)
{
-
-
fWriteCount
;
}
SkASSERT
(
!
fReadCount
&
&
!
fWriteCount
)
;
}
virtual
String
description
(
)
const
override
{
return
fModifiers
.
description
(
)
+
fType
.
fName
+
"
"
+
fName
;
}
bool
dead
(
)
const
{
return
!
fWriteCount
|
|
(
!
fReadCount
&
&
!
(
fModifiers
.
fFlags
&
Modifiers
:
:
kOut_Flag
)
)
;
}
mutable
Modifiers
fModifiers
;
const
Type
&
fType
;
const
Storage
fStorage
;
Expression
*
fInitialValue
=
nullptr
;
mutable
int
fReadCount
;
mutable
int
fWriteCount
;
typedef
Symbol
INHERITED
;
}
;
}
#
endif
