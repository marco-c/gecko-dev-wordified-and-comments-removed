#
ifndef
SKSL_FIELDACCESS
#
define
SKSL_FIELDACCESS
#
include
"
SkSLExpression
.
h
"
#
include
"
SkSLUtil
.
h
"
namespace
SkSL
{
struct
FieldAccess
:
public
Expression
{
enum
OwnerKind
{
kDefault_OwnerKind
kAnonymousInterfaceBlock_OwnerKind
}
;
FieldAccess
(
std
:
:
unique_ptr
<
Expression
>
base
int
fieldIndex
OwnerKind
ownerKind
=
kDefault_OwnerKind
)
:
INHERITED
(
base
-
>
fPosition
kFieldAccess_Kind
*
base
-
>
fType
.
fields
(
)
[
fieldIndex
]
.
fType
)
fBase
(
std
:
:
move
(
base
)
)
fFieldIndex
(
fieldIndex
)
fOwnerKind
(
ownerKind
)
{
}
virtual
String
description
(
)
const
override
{
return
fBase
-
>
description
(
)
+
"
.
"
+
fBase
-
>
fType
.
fields
(
)
[
fFieldIndex
]
.
fName
;
}
std
:
:
unique_ptr
<
Expression
>
fBase
;
const
int
fFieldIndex
;
const
OwnerKind
fOwnerKind
;
typedef
Expression
INHERITED
;
}
;
}
#
endif
