#
ifndef
SKSL_VARDECLARATIONS
#
define
SKSL_VARDECLARATIONS
#
include
"
SkSLExpression
.
h
"
#
include
"
SkSLProgramElement
.
h
"
#
include
"
SkSLStatement
.
h
"
#
include
"
SkSLVariable
.
h
"
namespace
SkSL
{
struct
VarDeclaration
:
public
Statement
{
VarDeclaration
(
const
Variable
*
var
std
:
:
vector
<
std
:
:
unique_ptr
<
Expression
>
>
sizes
std
:
:
unique_ptr
<
Expression
>
value
)
:
INHERITED
(
var
-
>
fOffset
Statement
:
:
kVarDeclaration_Kind
)
fVar
(
var
)
fSizes
(
std
:
:
move
(
sizes
)
)
fValue
(
std
:
:
move
(
value
)
)
{
}
String
description
(
)
const
{
String
result
=
fVar
-
>
fName
;
for
(
const
auto
&
size
:
fSizes
)
{
if
(
size
)
{
result
+
=
"
[
"
+
size
-
>
description
(
)
+
"
]
"
;
}
else
{
result
+
=
"
[
]
"
;
}
}
if
(
fValue
)
{
result
+
=
"
=
"
+
fValue
-
>
description
(
)
;
}
return
result
;
}
const
Variable
*
fVar
;
std
:
:
vector
<
std
:
:
unique_ptr
<
Expression
>
>
fSizes
;
std
:
:
unique_ptr
<
Expression
>
fValue
;
typedef
Statement
INHERITED
;
}
;
struct
VarDeclarations
:
public
ProgramElement
{
VarDeclarations
(
int
offset
const
Type
*
baseType
std
:
:
vector
<
std
:
:
unique_ptr
<
VarDeclaration
>
>
vars
)
:
INHERITED
(
offset
kVar_Kind
)
fBaseType
(
*
baseType
)
{
for
(
auto
&
var
:
vars
)
{
fVars
.
push_back
(
std
:
:
unique_ptr
<
Statement
>
(
var
.
release
(
)
)
)
;
}
}
String
description
(
)
const
override
{
if
(
!
fVars
.
size
(
)
)
{
return
String
(
)
;
}
String
result
=
(
(
VarDeclaration
&
)
*
fVars
[
0
]
)
.
fVar
-
>
fModifiers
.
description
(
)
+
fBaseType
.
description
(
)
+
"
"
;
String
separator
;
for
(
const
auto
&
var
:
fVars
)
{
result
+
=
separator
;
separator
=
"
"
;
result
+
=
var
-
>
description
(
)
;
}
return
result
;
}
const
Type
&
fBaseType
;
std
:
:
vector
<
std
:
:
unique_ptr
<
Statement
>
>
fVars
;
typedef
ProgramElement
INHERITED
;
}
;
}
#
endif
