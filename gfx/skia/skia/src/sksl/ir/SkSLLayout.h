#
ifndef
SKSL_LAYOUT
#
define
SKSL_LAYOUT
#
include
"
src
/
base
/
SkEnumBitMask
.
h
"
#
include
<
string
>
namespace
SkSL
{
class
Context
;
class
Position
;
enum
class
LayoutFlag
:
int
{
kNone
=
0
kAll
=
~
0
kOriginUpperLeft
=
1
<
<
0
kPushConstant
=
1
<
<
1
kBlendSupportAllEquations
=
1
<
<
2
kColor
=
1
<
<
3
kLocation
=
1
<
<
4
kOffset
=
1
<
<
5
kBinding
=
1
<
<
6
kTexture
=
1
<
<
7
kSampler
=
1
<
<
8
kIndex
=
1
<
<
9
kSet
=
1
<
<
10
kBuiltin
=
1
<
<
11
kInputAttachmentIndex
=
1
<
<
12
kVulkan
=
1
<
<
13
kMetal
=
1
<
<
14
kWebGPU
=
1
<
<
15
kDirect3D
=
1
<
<
16
kAllBackends
=
kVulkan
|
kMetal
|
kWebGPU
|
kDirect3D
kRGBA8
=
1
<
<
17
kRGBA32F
=
1
<
<
18
kR32F
=
1
<
<
19
kAllPixelFormats
=
kRGBA8
|
kRGBA32F
|
kR32F
kLocalSizeX
=
1
<
<
20
kLocalSizeY
=
1
<
<
21
kLocalSizeZ
=
1
<
<
22
}
;
}
SK_MAKE_BITMASK_OPS
(
SkSL
:
:
LayoutFlag
)
;
namespace
SkSL
{
using
LayoutFlags
=
SkEnumBitMask
<
SkSL
:
:
LayoutFlag
>
;
struct
Layout
{
Layout
(
LayoutFlags
flags
int
location
int
offset
int
binding
int
index
int
set
int
builtin
int
inputAttachmentIndex
)
:
fFlags
(
flags
)
fLocation
(
location
)
fOffset
(
offset
)
fBinding
(
binding
)
fIndex
(
index
)
fSet
(
set
)
fBuiltin
(
builtin
)
fInputAttachmentIndex
(
inputAttachmentIndex
)
{
}
constexpr
Layout
(
)
=
default
;
static
Layout
builtin
(
int
builtin
)
{
Layout
result
;
result
.
fBuiltin
=
builtin
;
return
result
;
}
std
:
:
string
description
(
)
const
;
std
:
:
string
paddedDescription
(
)
const
;
bool
checkPermittedLayout
(
const
Context
&
context
Position
pos
LayoutFlags
permittedLayoutFlags
)
const
;
bool
operator
=
=
(
const
Layout
&
other
)
const
;
bool
operator
!
=
(
const
Layout
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
LayoutFlags
fFlags
=
LayoutFlag
:
:
kNone
;
int
fLocation
=
-
1
;
int
fOffset
=
-
1
;
int
fBinding
=
-
1
;
int
fTexture
=
-
1
;
int
fSampler
=
-
1
;
int
fIndex
=
-
1
;
int
fSet
=
-
1
;
int
fBuiltin
=
-
1
;
int
fInputAttachmentIndex
=
-
1
;
int
fLocalSizeX
=
-
1
;
int
fLocalSizeY
=
-
1
;
int
fLocalSizeZ
=
-
1
;
}
;
}
#
endif
