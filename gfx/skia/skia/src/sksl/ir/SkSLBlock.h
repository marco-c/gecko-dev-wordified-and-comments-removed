#
ifndef
SKSL_BLOCK
#
define
SKSL_BLOCK
#
include
"
include
/
private
/
SkSLDefines
.
h
"
#
include
"
include
/
private
/
SkSLIRNode
.
h
"
#
include
"
include
/
private
/
SkSLStatement
.
h
"
#
include
"
include
/
sksl
/
SkSLPosition
.
h
"
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
namespace
SkSL
{
class
SymbolTable
;
class
Block
final
:
public
Statement
{
public
:
inline
static
constexpr
Kind
kIRNodeKind
=
Kind
:
:
kBlock
;
enum
class
Kind
{
kUnbracedBlock
kBracedScope
kCompoundStatement
}
;
Block
(
Position
pos
StatementArray
statements
Kind
kind
=
Kind
:
:
kBracedScope
const
std
:
:
shared_ptr
<
SymbolTable
>
symbols
=
nullptr
)
:
INHERITED
(
pos
kIRNodeKind
)
fChildren
(
std
:
:
move
(
statements
)
)
fBlockKind
(
kind
)
fSymbolTable
(
std
:
:
move
(
symbols
)
)
{
}
static
std
:
:
unique_ptr
<
Statement
>
Make
(
Position
pos
StatementArray
statements
Kind
kind
=
Kind
:
:
kBracedScope
std
:
:
shared_ptr
<
SymbolTable
>
symbols
=
nullptr
)
;
static
std
:
:
unique_ptr
<
Block
>
MakeBlock
(
Position
pos
StatementArray
statements
Kind
kind
=
Kind
:
:
kBracedScope
std
:
:
shared_ptr
<
SymbolTable
>
symbols
=
nullptr
)
;
const
StatementArray
&
children
(
)
const
{
return
fChildren
;
}
StatementArray
&
children
(
)
{
return
fChildren
;
}
bool
isScope
(
)
const
{
return
fBlockKind
=
=
Kind
:
:
kBracedScope
;
}
Kind
blockKind
(
)
const
{
return
fBlockKind
;
}
void
setBlockKind
(
Kind
kind
)
{
fBlockKind
=
kind
;
}
std
:
:
shared_ptr
<
SymbolTable
>
symbolTable
(
)
const
{
return
fSymbolTable
;
}
bool
isEmpty
(
)
const
override
{
for
(
const
std
:
:
unique_ptr
<
Statement
>
&
stmt
:
this
-
>
children
(
)
)
{
if
(
!
stmt
-
>
isEmpty
(
)
)
{
return
false
;
}
}
return
true
;
}
std
:
:
unique_ptr
<
Statement
>
clone
(
)
const
override
;
std
:
:
string
description
(
)
const
override
;
private
:
StatementArray
fChildren
;
Kind
fBlockKind
;
std
:
:
shared_ptr
<
SymbolTable
>
fSymbolTable
;
using
INHERITED
=
Statement
;
}
;
}
#
endif
