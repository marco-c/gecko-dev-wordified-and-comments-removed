#
ifndef
SKSL_VARIABLEREFERENCE
#
define
SKSL_VARIABLEREFERENCE
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
private
/
SkSLIRNode
.
h
"
#
include
"
include
/
sksl
/
SkSLPosition
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLExpression
.
h
"
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
string
>
namespace
SkSL
{
class
Variable
;
enum
class
OperatorPrecedence
:
uint8_t
;
enum
class
VariableRefKind
:
int8_t
{
kRead
kWrite
kReadWrite
kPointer
}
;
class
VariableReference
final
:
public
Expression
{
public
:
using
RefKind
=
VariableRefKind
;
inline
static
constexpr
Kind
kIRNodeKind
=
Kind
:
:
kVariableReference
;
VariableReference
(
Position
pos
const
Variable
*
variable
RefKind
refKind
)
;
static
std
:
:
unique_ptr
<
Expression
>
Make
(
Position
pos
const
Variable
*
variable
RefKind
refKind
=
RefKind
:
:
kRead
)
{
SkASSERT
(
variable
)
;
return
std
:
:
make_unique
<
VariableReference
>
(
pos
variable
refKind
)
;
}
VariableReference
(
const
VariableReference
&
)
=
delete
;
VariableReference
&
operator
=
(
const
VariableReference
&
)
=
delete
;
const
Variable
*
variable
(
)
const
{
return
fVariable
;
}
RefKind
refKind
(
)
const
{
return
fRefKind
;
}
void
setRefKind
(
RefKind
refKind
)
;
void
setVariable
(
const
Variable
*
variable
)
;
std
:
:
unique_ptr
<
Expression
>
clone
(
Position
pos
)
const
override
{
return
std
:
:
make_unique
<
VariableReference
>
(
pos
this
-
>
variable
(
)
this
-
>
refKind
(
)
)
;
}
std
:
:
string
description
(
OperatorPrecedence
)
const
override
;
private
:
const
Variable
*
fVariable
;
VariableRefKind
fRefKind
;
using
INHERITED
=
Expression
;
}
;
}
#
endif
