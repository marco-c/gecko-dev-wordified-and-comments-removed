#
ifndef
SKSL_IFSTATEMENT
#
define
SKSL_IFSTATEMENT
#
include
"
include
/
private
/
SkSLIRNode
.
h
"
#
include
"
include
/
private
/
SkSLStatement
.
h
"
#
include
"
include
/
sksl
/
SkSLPosition
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLExpression
.
h
"
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
namespace
SkSL
{
class
Context
;
class
IfStatement
final
:
public
Statement
{
public
:
inline
static
constexpr
Kind
kIRNodeKind
=
Kind
:
:
kIf
;
IfStatement
(
Position
pos
std
:
:
unique_ptr
<
Expression
>
test
std
:
:
unique_ptr
<
Statement
>
ifTrue
std
:
:
unique_ptr
<
Statement
>
ifFalse
)
:
INHERITED
(
pos
kIRNodeKind
)
fTest
(
std
:
:
move
(
test
)
)
fIfTrue
(
std
:
:
move
(
ifTrue
)
)
fIfFalse
(
std
:
:
move
(
ifFalse
)
)
{
}
static
std
:
:
unique_ptr
<
Statement
>
Convert
(
const
Context
&
context
Position
pos
std
:
:
unique_ptr
<
Expression
>
test
std
:
:
unique_ptr
<
Statement
>
ifTrue
std
:
:
unique_ptr
<
Statement
>
ifFalse
)
;
static
std
:
:
unique_ptr
<
Statement
>
Make
(
const
Context
&
context
Position
pos
std
:
:
unique_ptr
<
Expression
>
test
std
:
:
unique_ptr
<
Statement
>
ifTrue
std
:
:
unique_ptr
<
Statement
>
ifFalse
)
;
std
:
:
unique_ptr
<
Expression
>
&
test
(
)
{
return
fTest
;
}
const
std
:
:
unique_ptr
<
Expression
>
&
test
(
)
const
{
return
fTest
;
}
std
:
:
unique_ptr
<
Statement
>
&
ifTrue
(
)
{
return
fIfTrue
;
}
const
std
:
:
unique_ptr
<
Statement
>
&
ifTrue
(
)
const
{
return
fIfTrue
;
}
std
:
:
unique_ptr
<
Statement
>
&
ifFalse
(
)
{
return
fIfFalse
;
}
const
std
:
:
unique_ptr
<
Statement
>
&
ifFalse
(
)
const
{
return
fIfFalse
;
}
std
:
:
unique_ptr
<
Statement
>
clone
(
)
const
override
;
std
:
:
string
description
(
)
const
override
;
private
:
std
:
:
unique_ptr
<
Expression
>
fTest
;
std
:
:
unique_ptr
<
Statement
>
fIfTrue
;
std
:
:
unique_ptr
<
Statement
>
fIfFalse
;
using
INHERITED
=
Statement
;
}
;
}
#
endif
