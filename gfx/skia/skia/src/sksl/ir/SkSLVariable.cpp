#
include
"
src
/
sksl
/
ir
/
SkSLVariable
.
h
"
#
include
"
include
/
private
/
SkSLIRNode
.
h
"
#
include
"
include
/
private
/
SkSLLayout
.
h
"
#
include
"
include
/
sksl
/
SkSLErrorReporter
.
h
"
#
include
"
src
/
base
/
SkStringView
.
h
"
#
include
"
src
/
sksl
/
SkSLCompiler
.
h
"
#
include
"
src
/
sksl
/
SkSLContext
.
h
"
#
include
"
src
/
sksl
/
SkSLMangler
.
h
"
#
include
"
src
/
sksl
/
SkSLModifiersPool
.
h
"
#
include
"
src
/
sksl
/
SkSLProgramSettings
.
h
"
#
include
"
src
/
sksl
/
SkSLThreadContext
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLExpression
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLInterfaceBlock
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLSymbolTable
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLVarDeclarations
.
h
"
#
include
<
type_traits
>
#
include
<
utility
>
namespace
SkSL
{
Variable
:
:
~
Variable
(
)
{
if
(
VarDeclaration
*
declaration
=
this
-
>
varDeclaration
(
)
)
{
declaration
-
>
detachDeadVariable
(
)
;
}
}
InterfaceBlockVariable
:
:
~
InterfaceBlockVariable
(
)
{
if
(
fInterfaceBlockElement
)
{
fInterfaceBlockElement
-
>
detachDeadVariable
(
)
;
}
}
const
Expression
*
Variable
:
:
initialValue
(
)
const
{
VarDeclaration
*
declaration
=
this
-
>
varDeclaration
(
)
;
return
declaration
?
declaration
-
>
value
(
)
.
get
(
)
:
nullptr
;
}
VarDeclaration
*
Variable
:
:
varDeclaration
(
)
const
{
if
(
!
fDeclaringElement
)
{
return
nullptr
;
}
SkASSERT
(
fDeclaringElement
-
>
is
<
VarDeclaration
>
(
)
|
|
fDeclaringElement
-
>
is
<
GlobalVarDeclaration
>
(
)
)
;
return
fDeclaringElement
-
>
is
<
GlobalVarDeclaration
>
(
)
?
&
fDeclaringElement
-
>
as
<
GlobalVarDeclaration
>
(
)
.
varDeclaration
(
)
:
&
fDeclaringElement
-
>
as
<
VarDeclaration
>
(
)
;
}
GlobalVarDeclaration
*
Variable
:
:
globalVarDeclaration
(
)
const
{
if
(
!
fDeclaringElement
)
{
return
nullptr
;
}
SkASSERT
(
fDeclaringElement
-
>
is
<
VarDeclaration
>
(
)
|
|
fDeclaringElement
-
>
is
<
GlobalVarDeclaration
>
(
)
)
;
return
fDeclaringElement
-
>
is
<
GlobalVarDeclaration
>
(
)
?
&
fDeclaringElement
-
>
as
<
GlobalVarDeclaration
>
(
)
:
nullptr
;
}
void
Variable
:
:
setVarDeclaration
(
VarDeclaration
*
declaration
)
{
SkASSERT
(
!
fDeclaringElement
|
|
this
=
=
declaration
-
>
var
(
)
)
;
if
(
!
fDeclaringElement
)
{
fDeclaringElement
=
declaration
;
}
}
void
Variable
:
:
setGlobalVarDeclaration
(
GlobalVarDeclaration
*
global
)
{
SkASSERT
(
!
fDeclaringElement
|
|
this
=
=
global
-
>
varDeclaration
(
)
.
var
(
)
)
;
fDeclaringElement
=
global
;
}
std
:
:
string
Variable
:
:
mangledName
(
)
const
{
std
:
:
string_view
name
=
this
-
>
name
(
)
;
if
(
!
skstd
:
:
starts_with
(
name
'
'
)
)
{
return
std
:
:
string
(
name
)
;
}
name
.
remove_prefix
(
1
)
;
return
"
sk_Priv
"
+
std
:
:
string
(
name
)
;
}
std
:
:
unique_ptr
<
Variable
>
Variable
:
:
Convert
(
const
Context
&
context
Position
pos
Position
modifiersPos
const
Modifiers
&
modifiers
const
Type
*
baseType
Position
namePos
std
:
:
string_view
name
bool
isArray
std
:
:
unique_ptr
<
Expression
>
arraySize
Variable
:
:
Storage
storage
)
{
if
(
modifiers
.
fLayout
.
fLocation
=
=
0
&
&
modifiers
.
fLayout
.
fIndex
=
=
0
&
&
(
modifiers
.
fFlags
&
Modifiers
:
:
kOut_Flag
)
&
&
ProgramConfig
:
:
IsFragment
(
context
.
fConfig
-
>
fKind
)
&
&
name
!
=
Compiler
:
:
FRAGCOLOR_NAME
)
{
context
.
fErrors
-
>
error
(
modifiersPos
"
out
location
=
0
index
=
0
is
reserved
for
sk_FragColor
"
)
;
}
if
(
baseType
-
>
isUnsizedArray
(
)
&
&
storage
!
=
Variable
:
:
Storage
:
:
kInterfaceBlock
)
{
context
.
fErrors
-
>
error
(
pos
"
unsized
arrays
are
not
permitted
here
"
)
;
}
if
(
ProgramConfig
:
:
IsCompute
(
ThreadContext
:
:
Context
(
)
.
fConfig
-
>
fKind
)
&
&
modifiers
.
fLayout
.
fBuiltin
=
=
-
1
)
{
if
(
storage
=
=
Variable
:
:
Storage
:
:
kGlobal
)
{
if
(
modifiers
.
fFlags
&
Modifiers
:
:
kIn_Flag
)
{
context
.
fErrors
-
>
error
(
pos
"
pipeline
inputs
not
permitted
in
compute
shaders
"
)
;
}
else
if
(
modifiers
.
fFlags
&
Modifiers
:
:
kOut_Flag
)
{
context
.
fErrors
-
>
error
(
pos
"
pipeline
outputs
not
permitted
in
compute
shaders
"
)
;
}
}
}
return
Make
(
context
pos
modifiersPos
modifiers
baseType
name
isArray
std
:
:
move
(
arraySize
)
storage
)
;
}
std
:
:
unique_ptr
<
Variable
>
Variable
:
:
Make
(
const
Context
&
context
Position
pos
Position
modifiersPos
const
Modifiers
&
modifiers
const
Type
*
baseType
std
:
:
string_view
name
bool
isArray
std
:
:
unique_ptr
<
Expression
>
arraySize
Variable
:
:
Storage
storage
)
{
const
Type
*
type
=
baseType
;
int
arraySizeValue
=
0
;
if
(
isArray
)
{
SkASSERT
(
arraySize
)
;
arraySizeValue
=
type
-
>
convertArraySize
(
context
pos
std
:
:
move
(
arraySize
)
)
;
if
(
!
arraySizeValue
)
{
return
nullptr
;
}
type
=
ThreadContext
:
:
SymbolTable
(
)
-
>
addArrayDimension
(
type
arraySizeValue
)
;
}
if
(
type
-
>
componentType
(
)
.
isInterfaceBlock
(
)
)
{
return
std
:
:
make_unique
<
InterfaceBlockVariable
>
(
pos
modifiersPos
context
.
fModifiersPool
-
>
add
(
modifiers
)
name
type
context
.
fConfig
-
>
fIsBuiltinCode
storage
)
;
}
else
{
return
std
:
:
make_unique
<
Variable
>
(
pos
modifiersPos
context
.
fModifiersPool
-
>
add
(
modifiers
)
name
type
context
.
fConfig
-
>
fIsBuiltinCode
storage
)
;
}
}
Variable
:
:
ScratchVariable
Variable
:
:
MakeScratchVariable
(
const
Context
&
context
Mangler
&
mangler
std
:
:
string_view
baseName
const
Type
*
type
const
Modifiers
&
modifiers
SymbolTable
*
symbolTable
std
:
:
unique_ptr
<
Expression
>
initialValue
)
{
if
(
type
-
>
isLiteral
(
)
)
{
SkDEBUGFAIL
(
"
found
a
literal
type
in
MakeScratchVariable
"
)
;
type
=
&
type
-
>
scalarTypeForLiteral
(
)
;
}
SkASSERT
(
!
(
modifiers
.
fFlags
&
Modifiers
:
:
kOut_Flag
)
)
;
const
std
:
:
string
*
name
=
symbolTable
-
>
takeOwnershipOfString
(
mangler
.
uniqueName
(
baseName
symbolTable
)
)
;
ScratchVariable
result
;
auto
var
=
std
:
:
make_unique
<
Variable
>
(
initialValue
?
initialValue
-
>
fPosition
:
Position
(
)
Position
(
)
context
.
fModifiersPool
-
>
add
(
Modifiers
{
}
)
name
-
>
c_str
(
)
type
symbolTable
-
>
isBuiltin
(
)
Variable
:
:
Storage
:
:
kLocal
)
;
int
arraySize
=
0
;
if
(
type
-
>
isArray
(
)
)
{
arraySize
=
type
-
>
columns
(
)
;
type
=
&
type
-
>
componentType
(
)
;
}
result
.
fVarDecl
=
VarDeclaration
:
:
Make
(
context
var
.
get
(
)
type
arraySize
std
:
:
move
(
initialValue
)
)
;
result
.
fVarSymbol
=
symbolTable
-
>
add
(
std
:
:
move
(
var
)
)
;
return
result
;
}
}
