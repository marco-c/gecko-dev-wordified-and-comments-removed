#
ifndef
SKSL_EXPRESSION
#
define
SKSL_EXPRESSION
#
include
"
SkSLType
.
h
"
#
include
"
SkSLVariable
.
h
"
#
include
<
unordered_map
>
namespace
SkSL
{
struct
Expression
;
class
IRGenerator
;
typedef
std
:
:
unordered_map
<
const
Variable
*
std
:
:
unique_ptr
<
Expression
>
*
>
DefinitionMap
;
struct
Expression
:
public
IRNode
{
enum
Kind
{
kBinary_Kind
kBoolLiteral_Kind
kConstructor_Kind
kIntLiteral_Kind
kFieldAccess_Kind
kFloatLiteral_Kind
kFunctionReference_Kind
kFunctionCall_Kind
kIndex_Kind
kPrefix_Kind
kPostfix_Kind
kSwizzle_Kind
kVariableReference_Kind
kTernary_Kind
kTypeReference_Kind
kDefined_Kind
}
;
Expression
(
Position
position
Kind
kind
const
Type
&
type
)
:
INHERITED
(
position
)
fKind
(
kind
)
fType
(
std
:
:
move
(
type
)
)
{
}
virtual
bool
isConstant
(
)
const
{
return
false
;
}
virtual
std
:
:
unique_ptr
<
Expression
>
constantPropagate
(
const
IRGenerator
&
irGenerator
const
DefinitionMap
&
definitions
)
{
return
nullptr
;
}
const
Kind
fKind
;
const
Type
&
fType
;
typedef
IRNode
INHERITED
;
}
;
}
#
endif
