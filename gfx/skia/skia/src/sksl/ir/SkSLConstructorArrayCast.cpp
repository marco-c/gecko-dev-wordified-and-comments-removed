#
include
"
src
/
sksl
/
ir
/
SkSLConstructorArrayCast
.
h
"
#
include
"
include
/
core
/
SkSpan
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
private
/
SkSLDefines
.
h
"
#
include
"
src
/
sksl
/
SkSLAnalysis
.
h
"
#
include
"
src
/
sksl
/
SkSLConstantFolder
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLConstructorArray
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLConstructorCompoundCast
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLConstructorScalarCast
.
h
"
#
include
"
src
/
sksl
/
ir
/
SkSLType
.
h
"
namespace
SkSL
{
static
std
:
:
unique_ptr
<
Expression
>
cast_constant_array
(
const
Context
&
context
Position
pos
const
Type
&
destType
std
:
:
unique_ptr
<
Expression
>
constCtor
)
{
const
Type
&
scalarType
=
destType
.
componentType
(
)
;
auto
inputArgs
=
constCtor
-
>
as
<
ConstructorArray
>
(
)
.
argumentSpan
(
)
;
ExpressionArray
typecastArgs
;
typecastArgs
.
reserve_back
(
inputArgs
.
size
(
)
)
;
for
(
std
:
:
unique_ptr
<
Expression
>
&
arg
:
inputArgs
)
{
Position
argPos
=
arg
-
>
fPosition
;
if
(
arg
-
>
type
(
)
.
isScalar
(
)
)
{
typecastArgs
.
push_back
(
ConstructorScalarCast
:
:
Make
(
context
argPos
scalarType
std
:
:
move
(
arg
)
)
)
;
}
else
{
typecastArgs
.
push_back
(
ConstructorCompoundCast
:
:
Make
(
context
argPos
scalarType
std
:
:
move
(
arg
)
)
)
;
}
}
return
ConstructorArray
:
:
Make
(
context
pos
destType
std
:
:
move
(
typecastArgs
)
)
;
}
std
:
:
unique_ptr
<
Expression
>
ConstructorArrayCast
:
:
Make
(
const
Context
&
context
Position
pos
const
Type
&
type
std
:
:
unique_ptr
<
Expression
>
arg
)
{
SkASSERT
(
type
.
isArray
(
)
)
;
SkASSERT
(
type
.
isAllowedInES2
(
context
)
)
;
SkASSERT
(
arg
-
>
type
(
)
.
isArray
(
)
)
;
SkASSERT
(
type
.
columns
(
)
=
=
arg
-
>
type
(
)
.
columns
(
)
)
;
if
(
type
.
matches
(
arg
-
>
type
(
)
)
)
{
arg
-
>
fPosition
=
pos
;
return
arg
;
}
arg
=
ConstantFolder
:
:
MakeConstantValueForVariable
(
pos
std
:
:
move
(
arg
)
)
;
if
(
Analysis
:
:
IsCompileTimeConstant
(
*
arg
)
)
{
return
cast_constant_array
(
context
pos
type
std
:
:
move
(
arg
)
)
;
}
return
std
:
:
make_unique
<
ConstructorArrayCast
>
(
pos
type
std
:
:
move
(
arg
)
)
;
}
}
