#
ifndef
SKSL_PROGRAMSETTINGS
#
define
SKSL_PROGRAMSETTINGS
#
include
"
include
/
sksl
/
SkSLVersion
.
h
"
#
include
"
src
/
sksl
/
SkSLDefines
.
h
"
#
include
"
src
/
sksl
/
SkSLModule
.
h
"
#
include
"
src
/
sksl
/
SkSLProgramKind
.
h
"
#
include
<
optional
>
#
include
<
vector
>
namespace
SkSL
{
enum
class
ModuleType
:
int8_t
;
struct
ProgramSettings
{
bool
fFragColorIsInOut
=
false
;
bool
fForceHighPrecision
=
false
;
bool
fSharpenTextures
=
false
;
bool
fForceNoRTFlip
=
false
;
int
fRTFlipOffset
=
-
1
;
int
fRTFlipBinding
=
-
1
;
int
fRTFlipSet
=
-
1
;
int
fDefaultUniformSet
=
0
;
int
fDefaultUniformBinding
=
0
;
bool
fOptimize
=
true
;
bool
fRemoveDeadFunctions
=
true
;
bool
fRemoveDeadVariables
=
true
;
int
fInlineThreshold
=
SkSL
:
:
kDefaultInlineThreshold
;
bool
fForceNoInline
=
false
;
bool
fAllowNarrowingConversions
=
false
;
bool
fValidateSPIRV
=
true
;
bool
fUseVulkanPushConstantsForGaneshRTAdjust
=
false
;
SkSL
:
:
Version
fMaxVersionAllowed
=
SkSL
:
:
Version
:
:
k100
;
bool
fUseMemoryPool
=
true
;
}
;
struct
ProgramConfig
{
ModuleType
fModuleType
;
ProgramKind
fKind
;
ProgramSettings
fSettings
;
bool
isBuiltinCode
(
)
{
return
fModuleType
!
=
ModuleType
:
:
program
;
}
SkSL
:
:
Version
fRequiredSkSLVersion
=
SkSL
:
:
Version
:
:
k100
;
bool
enforcesSkSLVersion
(
)
const
{
return
IsRuntimeEffect
(
fKind
)
;
}
bool
strictES2Mode
(
)
const
{
return
fSettings
.
fMaxVersionAllowed
=
=
Version
:
:
k100
&
&
fRequiredSkSLVersion
=
=
Version
:
:
k100
&
&
this
-
>
enforcesSkSLVersion
(
)
;
}
const
char
*
versionDescription
(
)
const
{
if
(
this
-
>
enforcesSkSLVersion
(
)
)
{
switch
(
fRequiredSkSLVersion
)
{
case
Version
:
:
k100
:
return
"
#
version
100
\
n
"
;
case
Version
:
:
k300
:
return
"
#
version
300
\
n
"
;
}
}
return
"
"
;
}
static
bool
IsFragment
(
ProgramKind
kind
)
{
return
kind
=
=
ProgramKind
:
:
kFragment
|
|
kind
=
=
ProgramKind
:
:
kGraphiteFragment
|
|
kind
=
=
ProgramKind
:
:
kGraphiteFragmentES2
;
}
static
bool
IsVertex
(
ProgramKind
kind
)
{
return
kind
=
=
ProgramKind
:
:
kVertex
|
|
kind
=
=
ProgramKind
:
:
kGraphiteVertex
|
|
kind
=
=
ProgramKind
:
:
kGraphiteVertexES2
;
}
static
bool
IsCompute
(
ProgramKind
kind
)
{
return
kind
=
=
ProgramKind
:
:
kCompute
;
}
static
bool
IsRuntimeEffect
(
ProgramKind
kind
)
{
return
(
kind
=
=
ProgramKind
:
:
kRuntimeColorFilter
|
|
kind
=
=
ProgramKind
:
:
kRuntimeShader
|
|
kind
=
=
ProgramKind
:
:
kRuntimeBlender
|
|
kind
=
=
ProgramKind
:
:
kPrivateRuntimeColorFilter
|
|
kind
=
=
ProgramKind
:
:
kPrivateRuntimeShader
|
|
kind
=
=
ProgramKind
:
:
kPrivateRuntimeBlender
|
|
kind
=
=
ProgramKind
:
:
kMeshVertex
|
|
kind
=
=
ProgramKind
:
:
kMeshFragment
)
;
}
static
bool
IsRuntimeShader
(
ProgramKind
kind
)
{
return
(
kind
=
=
ProgramKind
:
:
kRuntimeShader
|
|
kind
=
=
ProgramKind
:
:
kPrivateRuntimeShader
)
;
}
static
bool
IsRuntimeColorFilter
(
ProgramKind
kind
)
{
return
(
kind
=
=
ProgramKind
:
:
kRuntimeColorFilter
|
|
kind
=
=
ProgramKind
:
:
kPrivateRuntimeColorFilter
)
;
}
static
bool
IsRuntimeBlender
(
ProgramKind
kind
)
{
return
(
kind
=
=
ProgramKind
:
:
kRuntimeBlender
|
|
kind
=
=
ProgramKind
:
:
kPrivateRuntimeBlender
)
;
}
static
bool
IsMesh
(
ProgramKind
kind
)
{
return
(
kind
=
=
ProgramKind
:
:
kMeshVertex
|
|
kind
=
=
ProgramKind
:
:
kMeshFragment
)
;
}
static
bool
AllowsPrivateIdentifiers
(
ProgramKind
kind
)
{
return
(
kind
!
=
ProgramKind
:
:
kRuntimeColorFilter
&
&
kind
!
=
ProgramKind
:
:
kRuntimeShader
&
&
kind
!
=
ProgramKind
:
:
kRuntimeBlender
&
&
kind
!
=
ProgramKind
:
:
kMeshVertex
&
&
kind
!
=
ProgramKind
:
:
kMeshFragment
)
;
}
}
;
}
#
endif
