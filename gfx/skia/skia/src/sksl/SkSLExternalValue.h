#
ifndef
SKSL_EXTERNALVALUE
#
define
SKSL_EXTERNALVALUE
#
include
"
src
/
sksl
/
ir
/
SkSLSymbol
.
h
"
namespace
SkSL
{
class
String
;
class
Type
;
class
ExternalValue
:
public
Symbol
{
public
:
ExternalValue
(
const
char
*
name
const
Type
&
type
)
:
INHERITED
(
-
1
kExternal_Kind
name
)
fType
(
type
)
{
}
virtual
bool
canRead
(
)
const
{
return
false
;
}
virtual
bool
canWrite
(
)
const
{
return
false
;
}
virtual
bool
canCall
(
)
const
{
return
false
;
}
virtual
const
Type
&
type
(
)
const
{
return
fType
;
}
virtual
int
callParameterCount
(
)
const
{
return
-
1
;
}
virtual
void
getCallParameterTypes
(
const
Type
*
*
outTypes
)
const
{
SkASSERT
(
false
)
;
}
virtual
const
Type
&
callReturnType
(
)
const
{
return
fType
;
}
virtual
void
read
(
int
index
float
*
target
)
{
SkASSERT
(
false
)
;
}
virtual
void
write
(
int
index
float
*
src
)
{
SkASSERT
(
false
)
;
}
virtual
void
call
(
int
index
float
*
arguments
float
*
outResult
)
{
SkASSERT
(
false
)
;
}
virtual
ExternalValue
*
getChild
(
const
char
*
name
)
const
{
return
nullptr
;
}
String
description
(
)
const
override
{
return
String
(
"
external
<
"
)
+
fName
+
"
>
"
;
}
private
:
typedef
Symbol
INHERITED
;
const
Type
&
fType
;
}
;
}
#
endif
