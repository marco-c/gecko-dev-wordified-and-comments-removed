#
include
"
SkGaussianEdgeShader
.
h
"
#
include
"
SkReadBuffer
.
h
"
#
include
"
SkWriteBuffer
.
h
"
class
SkArenaAlloc
;
class
SkGaussianEdgeShaderImpl
:
public
SkShader
{
public
:
SkGaussianEdgeShaderImpl
(
)
{
}
bool
isOpaque
(
)
const
override
;
#
if
SK_SUPPORT_GPU
sk_sp
<
GrFragmentProcessor
>
asFragmentProcessor
(
const
AsFPArgs
&
)
const
override
;
#
endif
SK_TO_STRING_OVERRIDE
(
)
SK_DECLARE_PUBLIC_FLATTENABLE_DESERIALIZATION_PROCS
(
SkGaussianEdgeShaderImpl
)
protected
:
void
flatten
(
SkWriteBuffer
&
)
const
override
;
Context
*
onMakeContext
(
const
ContextRec
&
rec
SkArenaAlloc
*
storage
)
const
override
{
return
nullptr
;
}
private
:
friend
class
SkGaussianEdgeShader
;
typedef
SkShader
INHERITED
;
}
;
#
if
SK_SUPPORT_GPU
#
include
"
effects
/
GrBlurredEdgeFragmentProcessor
.
h
"
sk_sp
<
GrFragmentProcessor
>
SkGaussianEdgeShaderImpl
:
:
asFragmentProcessor
(
const
AsFPArgs
&
)
const
{
return
GrBlurredEdgeFP
:
:
Make
(
GrBlurredEdgeFP
:
:
kGaussian_Mode
)
;
}
#
endif
bool
SkGaussianEdgeShaderImpl
:
:
isOpaque
(
)
const
{
return
false
;
}
#
ifndef
SK_IGNORE_TO_STRING
void
SkGaussianEdgeShaderImpl
:
:
toString
(
SkString
*
str
)
const
{
str
-
>
appendf
(
"
GaussianEdgeShader
:
(
)
"
)
;
}
#
endif
sk_sp
<
SkFlattenable
>
SkGaussianEdgeShaderImpl
:
:
CreateProc
(
SkReadBuffer
&
buf
)
{
return
sk_make_sp
<
SkGaussianEdgeShaderImpl
>
(
)
;
}
void
SkGaussianEdgeShaderImpl
:
:
flatten
(
SkWriteBuffer
&
buf
)
const
{
}
sk_sp
<
SkShader
>
SkGaussianEdgeShader
:
:
Make
(
)
{
return
sk_make_sp
<
SkGaussianEdgeShaderImpl
>
(
)
;
}
SK_DEFINE_FLATTENABLE_REGISTRAR_GROUP_START
(
SkGaussianEdgeShader
)
SK_DEFINE_FLATTENABLE_REGISTRAR_ENTRY
(
SkGaussianEdgeShaderImpl
)
SK_DEFINE_FLATTENABLE_REGISTRAR_GROUP_END
