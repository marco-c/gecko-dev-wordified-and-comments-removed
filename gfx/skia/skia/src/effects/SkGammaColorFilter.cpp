#
include
"
SkGammaColorFilter
.
h
"
#
include
"
SkReadBuffer
.
h
"
#
include
"
SkString
.
h
"
#
if
SK_SUPPORT_GPU
#
include
"
effects
/
GrGammaEffect
.
h
"
#
endif
void
SkGammaColorFilter
:
:
filterSpan
(
const
SkPMColor
src
[
]
int
count
SkPMColor
dst
[
]
)
const
{
SkASSERT
(
0
)
;
for
(
int
i
=
0
;
i
<
count
;
+
+
i
)
{
SkPMColor
c
=
src
[
i
]
;
dst
[
i
]
=
c
;
}
}
sk_sp
<
SkColorFilter
>
SkGammaColorFilter
:
:
Make
(
SkScalar
gamma
)
{
return
sk_sp
<
SkColorFilter
>
(
new
SkGammaColorFilter
(
gamma
)
)
;
}
SkGammaColorFilter
:
:
SkGammaColorFilter
(
SkScalar
gamma
)
:
fGamma
(
gamma
)
{
}
sk_sp
<
SkFlattenable
>
SkGammaColorFilter
:
:
CreateProc
(
SkReadBuffer
&
buffer
)
{
SkScalar
gamma
=
buffer
.
readScalar
(
)
;
return
Make
(
gamma
)
;
}
void
SkGammaColorFilter
:
:
flatten
(
SkWriteBuffer
&
buffer
)
const
{
this
-
>
INHERITED
:
:
flatten
(
buffer
)
;
buffer
.
writeScalar
(
fGamma
)
;
}
#
ifndef
SK_IGNORE_TO_STRING
void
SkGammaColorFilter
:
:
toString
(
SkString
*
str
)
const
{
str
-
>
appendf
(
"
SkGammaColorFilter
(
%
.
2f
)
"
fGamma
)
;
}
#
endif
#
if
SK_SUPPORT_GPU
sk_sp
<
GrFragmentProcessor
>
SkGammaColorFilter
:
:
asFragmentProcessor
(
GrContext
*
)
const
{
return
GrGammaEffect
:
:
Make
(
fGamma
)
;
}
#
endif
