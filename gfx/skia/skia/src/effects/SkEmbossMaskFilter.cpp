#
include
"
src
/
effects
/
SkEmbossMaskFilter
.
h
"
#
include
"
include
/
core
/
SkBlurTypes
.
h
"
#
include
"
include
/
core
/
SkMatrix
.
h
"
#
include
"
include
/
core
/
SkPoint
.
h
"
#
include
"
include
/
core
/
SkPoint3
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
private
/
base
/
SkFloatingPoint
.
h
"
#
include
"
src
/
core
/
SkBlurMask
.
h
"
#
include
"
src
/
core
/
SkReadBuffer
.
h
"
#
include
"
src
/
core
/
SkWriteBuffer
.
h
"
#
include
"
src
/
effects
/
SkEmbossMask
.
h
"
#
if
defined
(
SK_SUPPORT_LEGACY_EMBOSSMASKFILTER
)
#
include
"
include
/
effects
/
SkBlurMaskFilter
.
h
"
#
endif
#
include
<
cstring
>
sk_sp
<
SkMaskFilter
>
SkEmbossMaskFilter
:
:
Make
(
SkScalar
blurSigma
const
Light
&
light
)
{
if
(
!
SkIsFinite
(
blurSigma
)
|
|
blurSigma
<
=
0
)
{
return
nullptr
;
}
SkPoint3
lightDir
{
light
.
fDirection
[
0
]
light
.
fDirection
[
1
]
light
.
fDirection
[
2
]
}
;
if
(
!
lightDir
.
normalize
(
)
)
{
return
nullptr
;
}
Light
newLight
=
light
;
newLight
.
fDirection
[
0
]
=
lightDir
.
x
(
)
;
newLight
.
fDirection
[
1
]
=
lightDir
.
y
(
)
;
newLight
.
fDirection
[
2
]
=
lightDir
.
z
(
)
;
return
sk_sp
<
SkMaskFilter
>
(
new
SkEmbossMaskFilter
(
blurSigma
newLight
)
)
;
}
#
ifdef
SK_SUPPORT_LEGACY_EMBOSSMASKFILTER
sk_sp
<
SkMaskFilter
>
SkBlurMaskFilter
:
:
MakeEmboss
(
SkScalar
blurSigma
const
SkScalar
direction
[
3
]
SkScalar
ambient
SkScalar
specular
)
{
if
(
direction
=
=
nullptr
)
{
return
nullptr
;
}
SkEmbossMaskFilter
:
:
Light
light
;
memcpy
(
light
.
fDirection
direction
sizeof
(
light
.
fDirection
)
)
;
light
.
fAmbient
=
SkUnitScalarClampToByte
(
ambient
)
;
static
const
SkScalar
kSpecularMultiplier
=
SkIntToScalar
(
255
)
/
16
;
light
.
fSpecular
=
static_cast
<
U8CPU
>
(
SkTPin
(
specular
0
.
0f
16
.
0f
)
*
kSpecularMultiplier
+
0
.
5
)
;
return
SkEmbossMaskFilter
:
:
Make
(
blurSigma
light
)
;
}
#
endif
SkEmbossMaskFilter
:
:
SkEmbossMaskFilter
(
SkScalar
blurSigma
const
Light
&
light
)
:
fLight
(
light
)
fBlurSigma
(
blurSigma
)
{
SkASSERT
(
fBlurSigma
>
0
)
;
SkASSERT
(
SkIsFinite
(
fLight
.
fDirection
3
)
)
;
}
SkMask
:
:
Format
SkEmbossMaskFilter
:
:
getFormat
(
)
const
{
return
SkMask
:
:
k3D_Format
;
}
bool
SkEmbossMaskFilter
:
:
filterMask
(
SkMaskBuilder
*
dst
const
SkMask
&
src
const
SkMatrix
&
matrix
SkIPoint
*
margin
)
const
{
if
(
src
.
fFormat
!
=
SkMask
:
:
kA8_Format
)
{
return
false
;
}
SkScalar
sigma
=
matrix
.
mapRadius
(
fBlurSigma
)
;
if
(
!
SkBlurMask
:
:
BoxBlur
(
dst
src
sigma
kInner_SkBlurStyle
)
)
{
return
false
;
}
dst
-
>
format
(
)
=
SkMask
:
:
k3D_Format
;
if
(
margin
)
{
margin
-
>
set
(
SkScalarCeilToInt
(
3
*
sigma
)
SkScalarCeilToInt
(
3
*
sigma
)
)
;
}
if
(
src
.
fImage
=
=
nullptr
)
{
return
true
;
}
{
uint8_t
*
alphaPlane
=
dst
-
>
image
(
)
;
size_t
totalSize
=
dst
-
>
computeTotalImageSize
(
)
;
if
(
totalSize
=
=
0
)
{
return
false
;
}
size_t
planeSize
=
dst
-
>
computeImageSize
(
)
;
SkASSERT
(
planeSize
!
=
0
)
;
dst
-
>
image
(
)
=
SkMaskBuilder
:
:
AllocImage
(
totalSize
)
;
memcpy
(
dst
-
>
image
(
)
alphaPlane
planeSize
)
;
SkMaskBuilder
:
:
FreeImage
(
alphaPlane
)
;
}
Light
light
=
fLight
;
matrix
.
mapVectors
(
(
SkVector
*
)
(
void
*
)
light
.
fDirection
(
SkVector
*
)
(
void
*
)
fLight
.
fDirection
1
)
;
SkVector
*
vec
=
(
SkVector
*
)
(
void
*
)
light
.
fDirection
;
vec
-
>
setLength
(
light
.
fDirection
[
0
]
light
.
fDirection
[
1
]
SkPoint
:
:
Length
(
fLight
.
fDirection
[
0
]
fLight
.
fDirection
[
1
]
)
)
;
SkEmbossMask
:
:
Emboss
(
dst
light
)
;
memcpy
(
dst
-
>
image
(
)
src
.
fImage
src
.
computeImageSize
(
)
)
;
return
true
;
}
sk_sp
<
SkFlattenable
>
SkEmbossMaskFilter
:
:
CreateProc
(
SkReadBuffer
&
buffer
)
{
Light
light
;
if
(
buffer
.
readByteArray
(
&
light
sizeof
(
Light
)
)
)
{
light
.
fPad
=
0
;
const
SkScalar
sigma
=
buffer
.
readScalar
(
)
;
return
Make
(
sigma
light
)
;
}
return
nullptr
;
}
void
SkEmbossMaskFilter
:
:
flatten
(
SkWriteBuffer
&
buffer
)
const
{
Light
tmpLight
=
fLight
;
tmpLight
.
fPad
=
0
;
buffer
.
writeByteArray
(
&
tmpLight
sizeof
(
tmpLight
)
)
;
buffer
.
writeScalar
(
fBlurSigma
)
;
}
