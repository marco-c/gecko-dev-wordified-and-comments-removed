#
ifndef
GrCircleBlurFragmentProcessor_DEFINED
#
define
GrCircleBlurFragmentProcessor_DEFINED
#
include
"
SkString
.
h
"
#
include
"
SkTypes
.
h
"
#
if
SK_SUPPORT_GPU
#
include
"
GrFragmentProcessor
.
h
"
#
include
"
GrProcessorUnitTest
.
h
"
class
GrTextureProvider
;
class
GrCircleBlurFragmentProcessor
:
public
GrFragmentProcessor
{
public
:
~
GrCircleBlurFragmentProcessor
(
)
override
{
}
const
char
*
name
(
)
const
override
{
return
"
CircleBlur
"
;
}
SkString
dumpInfo
(
)
const
override
{
SkString
str
;
str
.
appendf
(
"
Rect
[
L
:
%
.
2f
T
:
%
.
2f
R
:
%
.
2f
B
:
%
.
2f
]
solidR
:
%
.
2f
textureR
:
%
.
2f
"
fCircle
.
fLeft
fCircle
.
fTop
fCircle
.
fRight
fCircle
.
fBottom
fSolidRadius
fTextureRadius
)
;
return
str
;
}
static
sk_sp
<
GrFragmentProcessor
>
Make
(
GrTextureProvider
*
textureProvider
const
SkRect
&
circle
float
sigma
)
;
private
:
class
GLSLProcessor
;
GrCircleBlurFragmentProcessor
(
const
SkRect
&
circle
float
textureRadius
float
innerRadius
GrTexture
*
blurProfile
)
;
GrGLSLFragmentProcessor
*
onCreateGLSLInstance
(
)
const
override
;
void
onGetGLSLProcessorKey
(
const
GrGLSLCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
override
;
bool
onIsEqual
(
const
GrFragmentProcessor
&
other
)
const
override
{
const
GrCircleBlurFragmentProcessor
&
cbfp
=
other
.
cast
<
GrCircleBlurFragmentProcessor
>
(
)
;
return
fCircle
=
=
cbfp
.
fCircle
&
&
fSolidRadius
=
=
cbfp
.
fSolidRadius
&
&
fTextureRadius
=
=
cbfp
.
fTextureRadius
;
}
void
onComputeInvariantOutput
(
GrInvariantOutput
*
inout
)
const
override
;
SkRect
fCircle
;
SkScalar
fSolidRadius
;
float
fTextureRadius
;
GrTextureAccess
fBlurProfileAccess
;
GR_DECLARE_FRAGMENT_PROCESSOR_TEST
;
typedef
GrFragmentProcessor
INHERITED
;
}
;
#
endif
#
endif
