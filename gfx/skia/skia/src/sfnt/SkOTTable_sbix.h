#
ifndef
SkOTTable_sbix_DEFINED
#
define
SkOTTable_sbix_DEFINED
#
include
"
include
/
private
/
base
/
SkTemplates
.
h
"
#
include
"
src
/
base
/
SkUtils
.
h
"
#
include
"
src
/
sfnt
/
SkOTTableTypes
.
h
"
#
pragma
pack
(
push
1
)
struct
SkOTTableGlyphData
;
struct
SkOTTableStandardBitmapGraphics
{
static
const
SK_OT_CHAR
TAG0
=
'
s
'
;
static
const
SK_OT_CHAR
TAG1
=
'
b
'
;
static
const
SK_OT_CHAR
TAG2
=
'
i
'
;
static
const
SK_OT_CHAR
TAG3
=
'
x
'
;
static
const
SK_OT_ULONG
TAG
=
SkOTTableTAG
<
SkOTTableStandardBitmapGraphics
>
:
:
value
;
SK_OT_USHORT
version
;
SK_OT_USHORT
flags
;
SK_OT_ULONG
numStrikes
;
SK_OT_ULONG
strikeOffset
(
int
strikeIndex
)
{
return
sk_unaligned_load
<
SK_OT_ULONG
>
(
SkTAddOffset
<
void
*
>
(
&
numStrikes
sizeof
(
numStrikes
)
+
sizeof
(
SK_OT_ULONG
)
*
strikeIndex
)
)
;
}
struct
Strike
{
SK_OT_USHORT
ppem
;
SK_OT_USHORT
ppi
;
SK_OT_ULONG
glyphDataOffset
(
int
glyphId
)
{
return
sk_unaligned_load
<
SK_OT_ULONG
>
(
SkTAddOffset
<
void
*
>
(
&
ppi
sizeof
(
ppi
)
+
sizeof
(
SK_OT_ULONG
)
*
glyphId
)
)
;
}
}
;
struct
GlyphData
{
SK_OT_SHORT
originOffsetX
;
SK_OT_SHORT
originOffsetY
;
SK_OT_ULONG
graphicType
;
SK_OT_BYTE
*
data
(
)
{
return
SkTAfter
<
SK_OT_BYTE
>
(
&
graphicType
)
;
}
const
SK_OT_BYTE
*
data
(
)
const
{
return
SkTAfter
<
const
SK_OT_BYTE
>
(
&
graphicType
)
;
}
}
;
}
;
#
pragma
pack
(
pop
)
#
endif
