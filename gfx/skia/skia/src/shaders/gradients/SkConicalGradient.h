#
ifndef
SkConicalGradient_DEFINED
#
define
SkConicalGradient_DEFINED
#
include
"
include
/
core
/
SkFlattenable
.
h
"
#
include
"
include
/
core
/
SkPoint
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkScalar
.
h
"
#
include
"
src
/
shaders
/
gradients
/
SkGradientBaseShader
.
h
"
class
SkArenaAlloc
;
class
SkMatrix
;
class
SkRasterPipeline
;
class
SkReadBuffer
;
class
SkShader
;
class
SkWriteBuffer
;
class
SkConicalGradient
final
:
public
SkGradientBaseShader
{
public
:
struct
FocalData
{
SkScalar
fR1
;
SkScalar
fFocalX
;
bool
fIsSwapped
;
bool
set
(
SkScalar
r0
SkScalar
r1
SkMatrix
*
matrix
)
;
bool
isFocalOnCircle
(
)
const
{
return
SkScalarNearlyZero
(
1
-
fR1
)
;
}
bool
isSwapped
(
)
const
{
return
fIsSwapped
;
}
bool
isWellBehaved
(
)
const
{
return
!
this
-
>
isFocalOnCircle
(
)
&
&
fR1
>
1
;
}
bool
isNativelyFocal
(
)
const
{
return
SkScalarNearlyZero
(
fFocalX
)
;
}
}
;
enum
class
Type
{
kRadial
kStrip
kFocal
}
;
static
sk_sp
<
SkShader
>
Create
(
const
SkPoint
&
start
SkScalar
startRadius
const
SkPoint
&
end
SkScalar
endRadius
const
Descriptor
&
const
SkMatrix
*
localMatrix
)
;
GradientType
asGradient
(
GradientInfo
*
info
SkMatrix
*
localMatrix
)
const
override
;
bool
isOpaque
(
)
const
override
;
SkScalar
getCenterX1
(
)
const
{
return
SkPoint
:
:
Distance
(
fCenter1
fCenter2
)
;
}
SkScalar
getStartRadius
(
)
const
{
return
fRadius1
;
}
SkScalar
getDiffRadius
(
)
const
{
return
fRadius2
-
fRadius1
;
}
const
SkPoint
&
getStartCenter
(
)
const
{
return
fCenter1
;
}
const
SkPoint
&
getEndCenter
(
)
const
{
return
fCenter2
;
}
SkScalar
getEndRadius
(
)
const
{
return
fRadius2
;
}
Type
getType
(
)
const
{
return
fType
;
}
const
FocalData
&
getFocalData
(
)
const
{
return
fFocalData
;
}
SkConicalGradient
(
const
SkPoint
&
c0
SkScalar
r0
const
SkPoint
&
c1
SkScalar
r1
const
Descriptor
&
Type
const
SkMatrix
&
const
FocalData
&
)
;
protected
:
void
flatten
(
SkWriteBuffer
&
buffer
)
const
override
;
void
appendGradientStages
(
SkArenaAlloc
*
alloc
SkRasterPipeline
*
tPipeline
SkRasterPipeline
*
postPipeline
)
const
override
;
private
:
friend
void
:
:
SkRegisterConicalGradientShaderFlattenable
(
)
;
SK_FLATTENABLE_HOOKS
(
SkConicalGradient
)
SkPoint
fCenter1
;
SkPoint
fCenter2
;
SkScalar
fRadius1
;
SkScalar
fRadius2
;
Type
fType
;
FocalData
fFocalData
;
}
;
#
endif
