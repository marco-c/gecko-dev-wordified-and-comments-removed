#
ifndef
SkColorShader_DEFINED
#
define
SkColorShader_DEFINED
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkFlattenable
.
h
"
#
include
"
src
/
shaders
/
SkShaderBase
.
h
"
class
SkReadBuffer
;
class
SkWriteBuffer
;
struct
SkStageRec
;
class
SkColorShader
:
public
SkShaderBase
{
public
:
explicit
SkColorShader
(
const
SkColor4f
&
c
)
:
fColor
(
c
)
{
}
bool
isOpaque
(
)
const
override
{
return
fColor
.
isOpaque
(
)
;
}
bool
isConstant
(
)
const
override
{
return
true
;
}
ShaderType
type
(
)
const
override
{
return
ShaderType
:
:
kColor
;
}
const
SkColor4f
&
color
(
)
const
{
return
fColor
;
}
private
:
friend
void
:
:
SkRegisterColorShaderFlattenable
(
)
;
SK_FLATTENABLE_HOOKS
(
SkColorShader
)
void
flatten
(
SkWriteBuffer
&
)
const
override
;
bool
onAsLuminanceColor
(
SkColor4f
*
lum
)
const
override
{
*
lum
=
fColor
;
return
true
;
}
bool
appendStages
(
const
SkStageRec
&
const
SkShaders
:
:
MatrixRec
&
)
const
override
;
const
SkColor4f
fColor
;
}
;
#
endif
