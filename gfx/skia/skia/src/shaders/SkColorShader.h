#
ifndef
SkColorShader_DEFINED
#
define
SkColorShader_DEFINED
#
include
"
SkColorSpaceXformer
.
h
"
#
include
"
SkShaderBase
.
h
"
class
SkColorShader
:
public
SkShaderBase
{
public
:
explicit
SkColorShader
(
SkColor
c
)
;
bool
isOpaque
(
)
const
override
;
bool
isConstant
(
)
const
override
{
return
true
;
}
GradientType
asAGradient
(
GradientInfo
*
info
)
const
override
;
#
if
SK_SUPPORT_GPU
std
:
:
unique_ptr
<
GrFragmentProcessor
>
asFragmentProcessor
(
const
GrFPArgs
&
)
const
override
;
#
endif
private
:
SK_FLATTENABLE_HOOKS
(
SkColorShader
)
void
flatten
(
SkWriteBuffer
&
)
const
override
;
bool
onAsLuminanceColor
(
SkColor
*
lum
)
const
override
{
*
lum
=
fColor
;
return
true
;
}
bool
onAppendStages
(
const
StageRec
&
)
const
override
;
sk_sp
<
SkShader
>
onMakeColorSpace
(
SkColorSpaceXformer
*
xformer
)
const
override
{
return
SkShader
:
:
MakeColorShader
(
xformer
-
>
apply
(
fColor
)
)
;
}
SkColor
fColor
;
}
;
class
SkColor4Shader
:
public
SkShaderBase
{
public
:
SkColor4Shader
(
const
SkColor4f
&
sk_sp
<
SkColorSpace
>
)
;
bool
isOpaque
(
)
const
override
{
return
fColor
.
isOpaque
(
)
;
}
bool
isConstant
(
)
const
override
{
return
true
;
}
#
if
SK_SUPPORT_GPU
std
:
:
unique_ptr
<
GrFragmentProcessor
>
asFragmentProcessor
(
const
GrFPArgs
&
)
const
override
;
#
endif
private
:
SK_FLATTENABLE_HOOKS
(
SkColor4Shader
)
void
flatten
(
SkWriteBuffer
&
)
const
override
;
bool
onAppendStages
(
const
StageRec
&
)
const
override
;
sk_sp
<
SkShader
>
onMakeColorSpace
(
SkColorSpaceXformer
*
xformer
)
const
override
;
sk_sp
<
SkColorSpace
>
fColorSpace
;
const
SkColor4f
fColor
;
}
;
#
endif
