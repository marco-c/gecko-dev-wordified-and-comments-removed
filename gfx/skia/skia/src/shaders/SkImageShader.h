#
ifndef
SkImageShader_DEFINED
#
define
SkImageShader_DEFINED
#
include
"
include
/
core
/
SkImage
.
h
"
#
include
"
include
/
core
/
SkM44
.
h
"
#
include
"
src
/
shaders
/
SkBitmapProcShader
.
h
"
#
include
"
src
/
shaders
/
SkShaderBase
.
h
"
namespace
skgpu
{
class
Swizzle
;
}
namespace
skgpu
:
:
graphite
{
class
KeyContext
;
enum
class
ReadSwizzle
;
}
class
SkImageShader
:
public
SkShaderBase
{
public
:
static
sk_sp
<
SkShader
>
Make
(
sk_sp
<
SkImage
>
SkTileMode
tmx
SkTileMode
tmy
const
SkSamplingOptions
&
const
SkMatrix
*
localMatrix
bool
clampAsIfUnpremul
=
false
)
;
static
sk_sp
<
SkShader
>
MakeRaw
(
sk_sp
<
SkImage
>
SkTileMode
tmx
SkTileMode
tmy
const
SkSamplingOptions
&
const
SkMatrix
*
localMatrix
)
;
static
sk_sp
<
SkShader
>
MakeSubset
(
sk_sp
<
SkImage
>
const
SkRect
&
subset
SkTileMode
tmx
SkTileMode
tmy
const
SkSamplingOptions
&
const
SkMatrix
*
localMatrix
bool
clampAsIfUnpremul
=
false
)
;
SkImageShader
(
sk_sp
<
SkImage
>
const
SkRect
&
subset
SkTileMode
tmx
SkTileMode
tmy
const
SkSamplingOptions
&
bool
raw
bool
clampAsIfUnpremul
)
;
bool
isOpaque
(
)
const
override
;
#
if
defined
(
SK_GANESH
)
std
:
:
unique_ptr
<
GrFragmentProcessor
>
asFragmentProcessor
(
const
GrFPArgs
&
const
MatrixRec
&
)
const
override
;
#
endif
#
if
defined
(
SK_GRAPHITE
)
void
addToKey
(
const
skgpu
:
:
graphite
:
:
KeyContext
&
skgpu
:
:
graphite
:
:
PaintParamsKeyBuilder
*
skgpu
:
:
graphite
:
:
PipelineDataGatherer
*
)
const
override
;
#
endif
static
SkM44
CubicResamplerMatrix
(
float
B
float
C
)
;
private
:
SK_FLATTENABLE_HOOKS
(
SkImageShader
)
void
flatten
(
SkWriteBuffer
&
)
const
override
;
#
ifdef
SK_ENABLE_LEGACY_SHADERCONTEXT
Context
*
onMakeContext
(
const
ContextRec
&
SkArenaAlloc
*
storage
)
const
override
;
#
endif
SkImage
*
onIsAImage
(
SkMatrix
*
SkTileMode
*
)
const
override
;
bool
appendStages
(
const
SkStageRec
&
const
MatrixRec
&
)
const
override
;
skvm
:
:
Color
program
(
skvm
:
:
Builder
*
skvm
:
:
Coord
device
skvm
:
:
Coord
local
skvm
:
:
Color
paint
const
MatrixRec
&
const
SkColorInfo
&
dst
skvm
:
:
Uniforms
*
uniforms
SkArenaAlloc
*
)
const
override
;
sk_sp
<
SkImage
>
fImage
;
const
SkSamplingOptions
fSampling
;
const
SkTileMode
fTileModeX
;
const
SkTileMode
fTileModeY
;
const
SkRect
fSubset
;
const
bool
fRaw
;
const
bool
fClampAsIfUnpremul
;
friend
class
SkShaderBase
;
using
INHERITED
=
SkShaderBase
;
}
;
#
endif
