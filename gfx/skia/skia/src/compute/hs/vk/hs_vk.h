#
pragma
once
#
include
<
vulkan
/
vulkan
.
h
>
#
include
<
stdint
.
h
>
#
include
<
stdbool
.
h
>
#
include
"
hs_vk_target
.
h
"
struct
hs_vk
*
hs_vk_create
(
struct
hs_vk_target
const
*
const
target
VkDevice
device
VkAllocationCallbacks
const
*
allocator
VkPipelineCache
pipeline_cache
)
;
void
hs_vk_release
(
struct
hs_vk
*
const
hs
)
;
VkDescriptorSet
hs_vk_ds_alloc
(
struct
hs_vk
const
*
const
hs
VkDescriptorPool
desc_pool
)
;
void
hs_vk_ds_bind
(
struct
hs_vk
const
*
const
hs
VkDescriptorSet
hs_ds
VkCommandBuffer
cb
VkBuffer
vin
VkBuffer
vout
)
;
void
hs_vk_pad
(
struct
hs_vk
const
*
const
hs
uint32_t
const
count
uint32_t
*
const
count_padded_in
uint32_t
*
const
count_padded_out
)
;
void
hs_vk_sort
(
struct
hs_vk
const
*
const
hs
VkCommandBuffer
cb
VkBuffer
vin
VkPipelineStageFlags
const
vin_src_stage
VkAccessFlagBits
const
vin_src_access
VkBuffer
vout
VkPipelineStageFlags
const
vout_src_stage
VkAccessFlagBits
const
vout_src_access
uint32_t
const
count
uint32_t
const
count_padded_in
uint32_t
const
count_padded_out
bool
const
linearize
)
;
