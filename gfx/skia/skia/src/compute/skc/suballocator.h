#
pragma
once
#
include
"
types
.
h
"
typedef
skc_ushort
skc_subbuf_id_t
;
typedef
skc_uint
skc_subbuf_size_t
;
struct
skc_subbuf
{
struct
skc_subbuf
*
prev
;
struct
skc_subbuf
*
next
;
skc_subbuf_size_t
size
;
skc_subbuf_size_t
origin
;
skc_uint
idx
;
skc_uint
inuse
;
}
;
struct
skc_suballocator
{
struct
skc_subbuf
*
subbufs
;
skc_subbuf_id_t
*
ids
;
struct
{
skc_uint
avail
;
skc_uint
spare
;
}
rem
;
skc_uint
align
;
skc_uint
count
;
skc_subbuf_size_t
size
;
skc_subbuf_size_t
total
;
char
const
*
name
;
}
;
void
skc_suballocator_create
(
struct
skc_runtime
*
const
runtime
struct
skc_suballocator
*
const
suballocator
char
const
*
const
name
skc_uint
const
subbufs
size_t
const
align
size_t
const
size
)
;
void
skc_suballocator_dispose
(
struct
skc_runtime
*
const
runtime
struct
skc_suballocator
*
const
suballocator
)
;
size_t
skc_suballocator_subbuf_alloc
(
struct
skc_suballocator
*
const
suballocator
struct
skc_scheduler
*
const
scheduler
size_t
const
size
skc_subbuf_id_t
*
const
subbuf_id
size_t
*
const
subbuf_size
)
;
void
skc_suballocator_subbuf_free
(
struct
skc_suballocator
*
const
suballocator
skc_subbuf_id_t
subbuf_id
)
;
