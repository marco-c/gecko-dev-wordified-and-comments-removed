#
ifndef
SKC_ONCE_STYLING_TYPES
#
define
SKC_ONCE_STYLING_TYPES
#
include
"
types
.
h
"
#
include
"
macros
.
h
"
#
include
"
skc_styling
.
h
"
typedef
skc_uint
skc_layer_id
;
typedef
skc_uint
skc_group_id
;
union
skc_styling_cmd
{
skc_uint
u32
;
skc_int
s32
;
skc_float
f32
;
skc_half
f16a2
[
2
]
;
skc_ushort2
u16v2
;
skc_styling_opcode_e
opcode
;
skc_styling_gradient_type_e
gradient_type
;
skc_group_id
parent
;
#
if
0
#
if
!
defined
(
__OPENCL_C_VERSION__
)
struct
{
skc_uint
opcode
:
31
;
skc_uint
final
:
1
;
}
;
#
endif
#
endif
}
;
#
define
SKC_STYLING_OPCODE_MASK_OPCODE
SKC_BITS_TO_MASK
(
31
)
#
define
SKC_STYLING_OPCODE_MASK_IS_FINAL
SKC_BITS_TO_MASK_AT
(
1
31
)
SKC_STATIC_ASSERT
(
sizeof
(
union
skc_styling_cmd
)
=
=
sizeof
(
skc_uint
)
)
;
union
skc_layer_node
{
skc_uint2
u32v2
;
struct
{
skc_uint
cmds
;
skc_group_id
parent
;
}
;
}
;
SKC_STATIC_ASSERT
(
sizeof
(
union
skc_layer_node
)
=
=
sizeof
(
skc_uint2
)
)
;
union
skc_group_parents
{
skc_uint2
u32v2
;
struct
{
skc_uint
depth
;
skc_uint
base
;
}
;
}
;
SKC_STATIC_ASSERT
(
sizeof
(
union
skc_group_parents
)
=
=
sizeof
(
skc_uint2
)
)
;
union
skc_group_range
{
skc_uint2
u32v2
;
struct
{
skc_uint
lo
;
skc_uint
hi
;
}
;
}
;
SKC_STATIC_ASSERT
(
sizeof
(
union
skc_group_range
)
=
=
sizeof
(
skc_uint2
)
)
;
struct
skc_group_node
{
union
skc_group_parents
parents
;
union
skc_group_range
range
;
struct
{
skc_uint
enter
;
skc_uint
leave
;
}
cmds
;
}
;
SKC_STATIC_ASSERT
(
sizeof
(
struct
skc_group_node
)
=
=
sizeof
(
skc_uint2
)
*
3
)
;
union
skc_gradient_slope
{
skc_float
slope
;
skc_half
color_pair
[
2
]
;
}
;
SKC_STATIC_ASSERT
(
sizeof
(
union
skc_gradient_slope
)
=
=
sizeof
(
skc_float
)
)
;
union
skc_gradient_vector
{
skc_float4
f32v4
;
struct
{
skc_float
dx
;
skc_float
p0
;
skc_float
dy
;
skc_float
denom
;
}
;
union
skc_gradient_slope
slopes
[
4
]
;
}
;
SKC_STATIC_ASSERT
(
sizeof
(
union
skc_gradient_vector
)
=
=
sizeof
(
skc_float4
)
)
;
#
if
0
#
define
SKC_GRADIENT_HEADER_WORDS_LUTS_OFFSET
4
#
define
SKC_GRADIENT_HEADER_WORDS_TOTAL
(
n_minus_1
)
(
7
*
(
n_minus_1
)
+
9
)
#
define
SKC_GRADIENT_HEADER_WORDS_MIN
SKC_GRADIENT_HEADER_WORDS_TOTAL
(
1
)
#
define
SKC_GRADIENT_CMD_WORDS_V1
(
n
)
(
1
+
SKC_GRADIENT_HEADER_WORDS_TOTAL
(
n
-
1
)
)
#
endif
#
define
SKC_GRADIENT_CMD_WORDS_V1
(
n
)
(
7
*
(
n
)
+
2
)
#
define
SKC_GRADIENT_CMD_WORDS_V2
(
n
)
(
5
*
(
n
)
+
6
)
#
define
SKC_GRADIENT_CMD_WORDS_V2_ADJUST
(
v1
v2
)
(
SKC_GRADIENT_CMD_WORDS_V1
(
v1
)
-
(
(
v2
)
+
6
)
)
#
endif
