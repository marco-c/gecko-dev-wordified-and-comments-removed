#
ifndef
SKC_ONCE_ATOMIC_CL
#
define
SKC_ONCE_ATOMIC_CL
#
include
"
types
.
h
"
#
if
(
__OPENCL_C_VERSION__
<
=
120
)
#
define
SKC_ATOMIC_UINT
uint
#
define
SKC_ATOMIC_INT
int
#
define
SKC_ATOMIC_ADD_LOCAL_RELAXED_DEVICE
(
p
v
)
atomic_add
(
p
v
)
#
define
SKC_ATOMIC_ADD_LOCAL_RELAXED_SUBGROUP
(
p
v
)
atomic_add
(
p
v
)
#
define
SKC_ATOMIC_ADD_GLOBAL_RELAXED_DEVICE
(
p
v
)
atomic_add
(
p
v
)
#
define
SKC_ATOMIC_ADD_GLOBAL_RELAXED_SUBGROUP
(
p
v
)
atomic_add
(
p
v
)
#
else
#
ifdef
SKC_SUPPORT_BROKEN_INTEL_CODE_BUILDER
#
define
SKC_ATOMIC_UINT
uint
#
define
SKC_ATOMIC_CAST_LOCAL
(
p
)
(
__local
atomic_uint
volatile
*
restrict
const
)
(
p
)
#
define
SKC_ATOMIC_CAST_GLOBAL
(
p
)
(
__global
atomic_uint
volatile
*
restrict
const
)
(
p
)
#
else
#
define
SKC_ATOMIC_UINT
atomic_uint
#
define
SKC_ATOMIC_CAST_LOCAL
(
p
)
(
p
)
#
define
SKC_ATOMIC_CAST_GLOBAL
(
p
)
(
p
)
#
endif
#
define
SKC_ATOMIC_ADD_LOCAL_RELAXED_DEVICE
(
p
v
)
atomic_fetch_add_explicit
(
SKC_ATOMIC_CAST_LOCAL
(
p
)
\
v
memory_order_relaxed
memory_scope_device
)
#
define
SKC_ATOMIC_ADD_LOCAL_RELAXED_SUBGROUP
(
p
v
)
atomic_fetch_add_explicit
(
SKC_ATOMIC_CAST_LOCAL
(
p
)
\
v
memory_order_relaxed
memory_scope_sub_group
)
#
define
SKC_ATOMIC_ADD_GLOBAL_RELAXED_DEVICE
(
p
v
)
atomic_fetch_add_explicit
(
SKC_ATOMIC_CAST_GLOBAL
(
p
)
\
v
memory_order_relaxed
memory_scope_device
)
#
define
SKC_ATOMIC_ADD_GLOBAL_RELAXED_SUBGROUP
(
p
v
)
atomic_fetch_add_explicit
(
SKC_ATOMIC_CAST_GLOBAL
(
p
)
\
v
memory_order_relaxed
memory_scope_sub_group
)
#
endif
#
endif
