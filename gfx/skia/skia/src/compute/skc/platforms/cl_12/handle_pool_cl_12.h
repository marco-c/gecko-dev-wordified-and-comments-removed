#
pragma
once
#
include
"
macros
.
h
"
#
include
"
handle
.
h
"
#
include
"
extent_cl_12
.
h
"
#
include
"
device_cl_12
.
h
"
union
skc_handle_refcnt
{
skc_ushort
hd
;
struct
{
skc_uchar
h
;
skc_uchar
d
;
}
;
}
;
SKC_STATIC_ASSERT
(
SKC_MEMBER_SIZE
(
union
skc_handle_refcnt
hd
)
=
=
SKC_MEMBER_SIZE
(
union
skc_handle_refcnt
h
)
+
SKC_MEMBER_SIZE
(
union
skc_handle_refcnt
d
)
)
;
struct
skc_handle_bih
{
skc_uint
block
;
skc_uint
rem
;
skc_handle_t
*
handles
;
}
;
struct
skc_handle_reclaim
{
struct
skc_handle_bih
bih
;
cl_kernel
kernel
;
skc_device_kernel_id
kernel_id
;
}
;
union
skc_handle_reclaim_rec
{
struct
skc_runtime
*
runtime
;
struct
{
skc_uint
rem
;
skc_uint
head
;
}
;
struct
{
skc_uint
index
;
union
{
skc_uint
next
;
skc_uint
block
;
}
;
}
;
}
;
SKC_STATIC_ASSERT
(
sizeof
(
union
skc_handle_reclaim_rec
)
=
=
sizeof
(
skc_uint2
)
)
;
typedef
enum
skc_handle_reclaim_type_e
{
SKC_HANDLE_RECLAIM_TYPE_PATH
SKC_HANDLE_RECLAIM_TYPE_RASTER
SKC_HANDLE_RECLAIM_TYPE_COUNT
}
skc_handle_reclaim_type_e
;
struct
skc_handle_pool
{
struct
skc_extent_pdrw
map
;
struct
{
skc_handle_t
*
indices
;
union
skc_handle_refcnt
*
refcnts
;
skc_uint
count
;
}
handle
;
struct
{
skc_uint
*
indices
;
skc_uint
count
;
skc_uint
width
;
skc_uint
tos
;
skc_uint
bos
;
}
block
;
union
skc_handle_reclaim_rec
*
recs
;
struct
skc_handle_bih
acquire
;
struct
skc_handle_reclaim
reclaim
[
SKC_HANDLE_RECLAIM_TYPE_COUNT
]
;
}
;
void
skc_handle_pool_create
(
struct
skc_runtime
*
const
runtime
struct
skc_handle_pool
*
const
handle_pool
skc_uint
const
size
skc_uint
const
width
skc_uint
const
recs
)
;
void
skc_handle_pool_dispose
(
struct
skc_runtime
*
const
runtime
struct
skc_handle_pool
*
const
handle_pool
)
;
