#
ifndef
SKC_ONCE_BLOCK
#
define
SKC_ONCE_BLOCK
#
include
"
types
.
h
"
#
include
"
macros
.
h
"
#
define
SKC_TAGGED_BLOCK_ID_BITS_ID
27
/
/
this
size
is
cast
in
stone
#
define
SKC_TAGGED_BLOCK_ID_BITS_TAG
5
/
/
which
leaves
5
bits
of
tag
typedef
enum
skc_block_id_tag
{
SKC_BLOCK_ID_TAG_PATH_LINE
SKC_BLOCK_ID_TAG_PATH_QUAD
SKC_BLOCK_ID_TAG_PATH_CUBIC
SKC_BLOCK_ID_TAG_PATH_RAT_QUAD
SKC_BLOCK_ID_TAG_PATH_RAT_CUBIC
SKC_BLOCK_ID_TAG_PATH_COUNT
SKC_BLOCK_ID_TAG_PATH_NEXT
=
SKC_BLOCK_ID_TAG_PATH_COUNT
SKC_BLOCK_ID_TAG_INVALID
=
(
1u
<
<
SKC_TAGGED_BLOCK_ID_BITS_TAG
)
-
1
SKC_BLOCK_ID_TAG_COUNT
}
skc_block_id_tag
;
#
define
SKC_TAGGED_BLOCK_ID_INVALID
SKC_UINT_MAX
/
/
all
1
'
s
typedef
skc_uint
skc_block_id_t
;
typedef
skc_uint
skc_tagged_block_id_t
;
union
skc_tagged_block_id
{
skc_uint
u32
;
#
if
!
defined
(
__OPENCL_C_VERSION__
)
struct
{
skc_uint
tag
:
SKC_TAGGED_BLOCK_ID_BITS_TAG
;
skc_uint
id
:
SKC_TAGGED_BLOCK_ID_BITS_ID
;
}
;
#
else
#
endif
}
;
#
define
SKC_TAGGED_BLOCK_ID_MASK_TAG
SKC_BITS_TO_MASK
(
SKC_TAGGED_BLOCK_ID_BITS_TAG
)
#
define
SKC_TAGGED_BLOCK_ID_GET_TAG
(
bst
)
(
(
bst
)
&
SKC_TAGGED_BLOCK_ID_MASK_TAG
)
#
define
SKC_TAGGED_BLOCK_ID_GET_ID
(
bst
)
(
(
bst
)
>
>
SKC_TAGGED_BLOCK_ID_BITS_TAG
)
#
endif
