#
pragma
once
#
include
"
types
.
h
"
#
include
"
runtime
.
h
"
struct
skc_extent_ring
{
struct
skc_extent_ring_snap
*
head
;
struct
skc_extent_ring_snap
*
last
;
union
{
skc_uint2
rw
;
struct
{
skc_uint
reads
;
skc_uint
writes
;
}
;
}
outer
;
union
{
skc_uint2
rw
;
struct
{
skc_uint
reads
;
skc_uint
writes
;
}
;
}
inner
;
struct
{
skc_uint
pow2
;
skc_uint
mask
;
skc_uint
snap
;
skc_uint
elem
;
}
size
;
}
;
void
skc_extent_ring_init
(
struct
skc_extent_ring
*
const
ring
skc_uint
const
size_pow2
skc_uint
const
size_snap
skc_uint
const
size_elem
)
;
skc_bool
skc_extent_ring_rem
(
struct
skc_extent_ring
const
*
const
ring
)
;
skc_bool
skc_extent_ring_is_full
(
struct
skc_extent_ring
const
*
const
ring
)
;
skc_uint
skc_extent_ring_wip_count
(
struct
skc_extent_ring
const
*
const
ring
)
;
skc_uint
skc_extent_ring_wip_rem
(
struct
skc_extent_ring
const
*
const
ring
)
;
skc_bool
skc_extent_ring_wip_is_full
(
struct
skc_extent_ring
const
*
const
ring
)
;
skc_uint
skc_extent_ring_wip_index_inc
(
struct
skc_extent_ring
*
const
ring
)
;
void
skc_extent_ring_checkpoint
(
struct
skc_extent_ring
*
const
ring
)
;
struct
skc_extent_ring_snap
{
struct
skc_extent_ring
*
ring
;
struct
skc_extent_ring_snap
*
next
;
skc_uint
reads
;
skc_uint
writes
;
skc_bool
is_free
;
skc_subbuf_id_t
id
;
}
;
struct
skc_extent_ring_snap
*
skc_extent_ring_snap_alloc
(
struct
skc_runtime
*
const
runtime
struct
skc_extent_ring
*
const
ring
)
;
void
skc_extent_ring_snap_free
(
struct
skc_runtime
*
const
runtime
struct
skc_extent_ring_snap
*
const
snap
)
;
skc_uint
skc_extent_ring_snap_count
(
struct
skc_extent_ring_snap
const
*
const
snap
)
;
skc_uint
skc_extent_ring_snap_from
(
struct
skc_extent_ring_snap
const
*
const
snap
)
;
skc_uint
skc_extent_ring_snap_to
(
struct
skc_extent_ring_snap
const
*
const
snap
)
;
