#
ifndef
SkSurface_Base_DEFINED
#
define
SkSurface_Base_DEFINED
#
include
"
SkCanvas
.
h
"
#
include
"
SkSurface
.
h
"
#
include
"
SkSurfacePriv
.
h
"
class
SkSurface_Base
:
public
SkSurface
{
public
:
SkSurface_Base
(
int
width
int
height
const
SkSurfaceProps
*
)
;
SkSurface_Base
(
const
SkImageInfo
&
const
SkSurfaceProps
*
)
;
virtual
~
SkSurface_Base
(
)
;
virtual
GrBackendObject
onGetTextureHandle
(
BackendHandleAccess
)
{
return
0
;
}
virtual
bool
onGetRenderTargetHandle
(
GrBackendObject
*
BackendHandleAccess
)
{
return
false
;
}
virtual
SkCanvas
*
onNewCanvas
(
)
=
0
;
virtual
SkSurface
*
onNewSurface
(
const
SkImageInfo
&
)
=
0
;
virtual
SkImage
*
onNewImageSnapshot
(
Budgeted
)
=
0
;
virtual
void
onDraw
(
SkCanvas
*
SkScalar
x
SkScalar
y
const
SkPaint
*
)
;
virtual
void
onDiscard
(
)
{
}
virtual
void
onCopyOnWrite
(
ContentChangeMode
)
=
0
;
virtual
void
onRestoreBackingMutability
(
)
{
}
inline
SkCanvas
*
getCachedCanvas
(
)
;
inline
SkImage
*
getCachedImage
(
Budgeted
)
;
bool
hasCachedImage
(
)
const
{
return
fCachedImage
!
=
nullptr
;
}
uint32_t
newGenerationID
(
)
;
private
:
SkCanvas
*
fCachedCanvas
;
SkImage
*
fCachedImage
;
void
aboutToDraw
(
ContentChangeMode
mode
)
;
bool
outstandingImageSnapshot
(
)
const
;
friend
class
SkCanvas
;
friend
class
SkSurface
;
typedef
SkSurface
INHERITED
;
}
;
SkCanvas
*
SkSurface_Base
:
:
getCachedCanvas
(
)
{
if
(
nullptr
=
=
fCachedCanvas
)
{
fCachedCanvas
=
this
-
>
onNewCanvas
(
)
;
if
(
fCachedCanvas
)
{
fCachedCanvas
-
>
setSurfaceBase
(
this
)
;
}
}
return
fCachedCanvas
;
}
SkImage
*
SkSurface_Base
:
:
getCachedImage
(
Budgeted
budgeted
)
{
if
(
nullptr
=
=
fCachedImage
)
{
fCachedImage
=
this
-
>
onNewImageSnapshot
(
budgeted
)
;
SkASSERT
(
!
fCachedCanvas
|
|
fCachedCanvas
-
>
getSurfaceBase
(
)
=
=
this
)
;
}
return
fCachedImage
;
}
#
endif
