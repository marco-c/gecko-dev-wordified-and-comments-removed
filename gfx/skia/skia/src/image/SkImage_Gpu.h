#
ifndef
SkImage_Gpu_DEFINED
#
define
SkImage_Gpu_DEFINED
#
include
"
GrContext
.
h
"
#
include
"
GrGpuResourcePriv
.
h
"
#
include
"
GrSurfaceProxyPriv
.
h
"
#
include
"
SkGr
.
h
"
#
include
"
SkImagePriv
.
h
"
#
include
"
SkImage_GpuBase
.
h
"
class
GrTexture
;
class
SkBitmap
;
struct
SkYUVAIndex
;
class
SkImage_Gpu
:
public
SkImage_GpuBase
{
public
:
SkImage_Gpu
(
sk_sp
<
GrContext
>
uint32_t
uniqueID
SkAlphaType
sk_sp
<
GrTextureProxy
>
sk_sp
<
SkColorSpace
>
SkBudgeted
)
;
~
SkImage_Gpu
(
)
override
;
SkImageInfo
onImageInfo
(
)
const
override
;
GrTextureProxy
*
peekProxy
(
)
const
override
{
return
fProxy
.
get
(
)
;
}
sk_sp
<
GrTextureProxy
>
asTextureProxyRef
(
)
const
override
{
return
fProxy
;
}
sk_sp
<
SkColorSpace
>
refColorSpace
(
)
{
return
fColorSpace
;
}
static
sk_sp
<
SkImage
>
MakePromiseTexture
(
GrContext
*
context
const
GrBackendFormat
&
backendFormat
int
width
int
height
GrMipMapped
mipMapped
GrSurfaceOrigin
origin
SkColorType
colorType
SkAlphaType
alphaType
sk_sp
<
SkColorSpace
>
colorSpace
TextureFulfillProc
textureFulfillProc
TextureReleaseProc
textureReleaseProc
PromiseDoneProc
promiseDoneProc
TextureContext
textureContext
)
;
static
sk_sp
<
SkImage
>
MakePromiseYUVATexture
(
GrContext
*
context
SkYUVColorSpace
yuvColorSpace
const
GrBackendFormat
yuvaFormats
[
]
const
SkYUVAIndex
yuvaIndices
[
4
]
int
imageWidth
int
imageHeight
GrSurfaceOrigin
imageOrigin
sk_sp
<
SkColorSpace
>
imageColorSpace
TextureFulfillProc
textureFulfillProc
TextureReleaseProc
textureReleaseProc
PromiseDoneProc
promiseDoneProc
TextureContext
textureContexts
[
]
)
;
void
resetContext
(
sk_sp
<
GrContext
>
newContext
)
{
SkASSERT
(
fContext
-
>
uniqueID
(
)
=
=
newContext
-
>
uniqueID
(
)
)
;
fContext
=
newContext
;
}
static
sk_sp
<
SkImage
>
ConvertYUVATexturesToRGB
(
GrContext
*
SkYUVColorSpace
yuvColorSpace
const
GrBackendTexture
yuvaTextures
[
]
const
SkYUVAIndex
yuvaIndices
[
4
]
SkISize
imageSize
GrSurfaceOrigin
imageOrigin
SkBudgeted
GrRenderTargetContext
*
)
;
private
:
sk_sp
<
GrTextureProxy
>
fProxy
;
typedef
SkImage_GpuBase
INHERITED
;
}
;
#
endif
