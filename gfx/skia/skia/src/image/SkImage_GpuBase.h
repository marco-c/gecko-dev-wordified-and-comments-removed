#
ifndef
SkImage_GpuBase_DEFINED
#
define
SkImage_GpuBase_DEFINED
#
include
"
GrBackendSurface
.
h
"
#
include
"
GrTypesPriv
.
h
"
#
include
"
SkImage_Base
.
h
"
class
GrContext
;
class
SkColorSpace
;
class
SkImage_GpuBase
:
public
SkImage_Base
{
public
:
SkImage_GpuBase
(
sk_sp
<
GrContext
>
int
width
int
height
uint32_t
uniqueID
SkAlphaType
SkBudgeted
sk_sp
<
SkColorSpace
>
)
;
~
SkImage_GpuBase
(
)
override
;
GrContext
*
context
(
)
const
final
{
return
fContext
.
get
(
)
;
}
bool
getROPixels
(
SkBitmap
*
SkColorSpace
*
dstColorSpace
CachingHint
)
const
final
;
sk_sp
<
SkImage
>
onMakeSubset
(
const
SkIRect
&
subset
)
const
final
;
bool
onReadPixels
(
const
SkImageInfo
&
dstInfo
void
*
dstPixels
size_t
dstRB
int
srcX
int
srcY
CachingHint
)
const
override
;
sk_sp
<
GrTextureProxy
>
asTextureProxyRef
(
)
const
override
{
SkASSERT
(
false
)
;
return
this
-
>
INHERITED
:
:
asTextureProxyRef
(
)
;
}
sk_sp
<
GrTextureProxy
>
asTextureProxyRef
(
GrContext
*
const
GrSamplerState
&
SkColorSpace
*
sk_sp
<
SkColorSpace
>
*
SkScalar
scaleAdjust
[
2
]
)
const
final
;
sk_sp
<
GrTextureProxy
>
refPinnedTextureProxy
(
uint32_t
*
uniqueID
)
const
final
{
*
uniqueID
=
this
-
>
uniqueID
(
)
;
return
this
-
>
asTextureProxyRef
(
)
;
}
GrBackendTexture
onGetBackendTexture
(
bool
flushPendingGrContextIO
GrSurfaceOrigin
*
origin
)
const
final
;
GrTexture
*
onGetTexture
(
)
const
final
;
sk_sp
<
SkImage
>
onMakeColorSpace
(
sk_sp
<
SkColorSpace
>
)
const
final
;
bool
onIsValid
(
GrContext
*
)
const
final
;
static
bool
ValidateBackendTexture
(
GrContext
*
ctx
const
GrBackendTexture
&
tex
GrPixelConfig
*
config
SkColorType
ct
SkAlphaType
at
sk_sp
<
SkColorSpace
>
cs
)
;
typedef
ReleaseContext
TextureContext
;
typedef
void
(
*
TextureFulfillProc
)
(
TextureContext
textureContext
GrBackendTexture
*
outTexture
)
;
typedef
void
(
*
PromiseDoneProc
)
(
TextureContext
textureContext
)
;
protected
:
sk_sp
<
GrContext
>
fContext
;
const
SkAlphaType
fAlphaType
;
const
SkBudgeted
fBudgeted
;
sk_sp
<
SkColorSpace
>
fColorSpace
;
private
:
typedef
SkImage_Base
INHERITED
;
}
;
class
SkPromiseReleaseProcHelper
:
public
GrReleaseProcHelper
{
public
:
SkPromiseReleaseProcHelper
(
SkImage_GpuBase
:
:
TextureReleaseProc
releaseProc
SkImage_GpuBase
:
:
TextureContext
context
sk_sp
<
GrReleaseProcHelper
>
doneHelper
)
:
INHERITED
(
releaseProc
context
)
fDoneProcHelper
(
std
:
:
move
(
doneHelper
)
)
{
}
void
weak_dispose
(
)
const
override
{
INHERITED
:
:
weak_dispose
(
)
;
fDoneProcHelper
.
reset
(
)
;
}
private
:
mutable
sk_sp
<
GrReleaseProcHelper
>
fDoneProcHelper
;
typedef
GrReleaseProcHelper
INHERITED
;
}
;
class
SkPromiseImageHelper
{
public
:
SkPromiseImageHelper
(
)
:
fFulfillProc
(
nullptr
)
fReleaseProc
(
nullptr
)
fContext
(
nullptr
)
fDoneHelper
(
nullptr
)
{
}
void
set
(
SkImage_GpuBase
:
:
TextureFulfillProc
fulfillProc
SkImage_GpuBase
:
:
TextureReleaseProc
releaseProc
SkImage_GpuBase
:
:
PromiseDoneProc
doneProc
SkImage_GpuBase
:
:
TextureContext
context
)
{
fFulfillProc
=
fulfillProc
;
fReleaseProc
=
releaseProc
;
fContext
=
context
;
fDoneHelper
.
reset
(
new
GrReleaseProcHelper
(
doneProc
context
)
)
;
}
SkPromiseImageHelper
(
SkImage_GpuBase
:
:
TextureFulfillProc
fulfillProc
SkImage_GpuBase
:
:
TextureReleaseProc
releaseProc
SkImage_GpuBase
:
:
PromiseDoneProc
doneProc
SkImage_GpuBase
:
:
TextureContext
context
)
:
fFulfillProc
(
fulfillProc
)
fReleaseProc
(
releaseProc
)
fContext
(
context
)
fDoneHelper
(
new
GrReleaseProcHelper
(
doneProc
context
)
)
{
}
bool
isValid
(
)
{
return
SkToBool
(
fDoneHelper
)
;
}
void
reset
(
)
{
this
-
>
resetReleaseHelper
(
)
;
fDoneHelper
.
reset
(
)
;
}
sk_sp
<
GrTexture
>
getTexture
(
GrResourceProvider
*
resourceProvider
GrPixelConfig
config
)
;
private
:
void
resetReleaseHelper
(
)
{
if
(
fReleaseHelper
)
{
fReleaseHelper
-
>
weak_unref
(
)
;
fReleaseHelper
=
nullptr
;
}
}
SkImage_GpuBase
:
:
TextureFulfillProc
fFulfillProc
;
SkImage_GpuBase
:
:
TextureReleaseProc
fReleaseProc
;
SkImage_GpuBase
:
:
TextureContext
fContext
;
GrBackendTexture
fBackendTex
;
SkPromiseReleaseProcHelper
*
fReleaseHelper
=
nullptr
;
sk_sp
<
GrReleaseProcHelper
>
fDoneHelper
;
}
;
#
endif
