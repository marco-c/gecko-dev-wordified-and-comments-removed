#
ifndef
SkImage_GpuYUVA_DEFINED
#
define
SkImage_GpuYUVA_DEFINED
#
include
"
include
/
gpu
/
GrBackendSurface
.
h
"
#
include
"
include
/
gpu
/
GrContext
.
h
"
#
include
"
src
/
core
/
SkCachedData
.
h
"
#
include
"
src
/
image
/
SkImage_GpuBase
.
h
"
class
GrTexture
;
struct
SkYUVASizeInfo
;
class
SkImage_GpuYUVA
:
public
SkImage_GpuBase
{
public
:
friend
class
GrYUVAImageTextureMaker
;
SkImage_GpuYUVA
(
sk_sp
<
GrContext
>
int
width
int
height
uint32_t
uniqueID
SkYUVColorSpace
sk_sp
<
GrTextureProxy
>
proxies
[
]
GrColorType
proxyColorTypes
[
]
int
numProxies
const
SkYUVAIndex
[
4
]
GrSurfaceOrigin
sk_sp
<
SkColorSpace
>
)
;
~
SkImage_GpuYUVA
(
)
override
;
GrSemaphoresSubmitted
onFlush
(
GrContext
*
const
GrFlushInfo
&
)
override
;
GrTextureProxy
*
peekProxy
(
)
const
override
;
sk_sp
<
GrTextureProxy
>
asTextureProxyRef
(
GrRecordingContext
*
)
const
override
;
virtual
bool
onIsTextureBacked
(
)
const
override
{
return
fProxies
[
0
]
|
|
fRGBProxy
;
}
sk_sp
<
SkImage
>
onMakeColorTypeAndColorSpace
(
GrRecordingContext
*
SkColorType
sk_sp
<
SkColorSpace
>
)
const
final
;
sk_sp
<
SkImage
>
onReinterpretColorSpace
(
sk_sp
<
SkColorSpace
>
)
const
final
;
virtual
bool
isYUVA
(
)
const
override
{
return
true
;
}
bool
setupMipmapsForPlanes
(
GrRecordingContext
*
)
const
;
sk_sp
<
GrTextureProxy
>
asMippedTextureProxyRef
(
GrRecordingContext
*
)
const
;
#
if
GR_TEST_UTILS
bool
testingOnly_IsFlattened
(
)
const
{
SkASSERT
(
SkToBool
(
fRGBProxy
)
!
=
SkToBool
(
fProxies
[
0
]
)
)
;
return
SkToBool
(
fRGBProxy
)
;
}
#
endif
static
sk_sp
<
SkImage
>
MakePromiseYUVATexture
(
GrContext
*
context
SkYUVColorSpace
yuvColorSpace
const
GrBackendFormat
yuvaFormats
[
]
const
SkISize
yuvaSizes
[
]
const
SkYUVAIndex
yuvaIndices
[
4
]
int
width
int
height
GrSurfaceOrigin
imageOrigin
sk_sp
<
SkColorSpace
>
imageColorSpace
PromiseImageTextureFulfillProc
textureFulfillProc
PromiseImageTextureReleaseProc
textureReleaseProc
PromiseImageTextureDoneProc
textureDoneProc
PromiseImageTextureContext
textureContexts
[
]
PromiseImageApiVersion
)
;
private
:
SkImage_GpuYUVA
(
const
SkImage_GpuYUVA
*
image
sk_sp
<
SkColorSpace
>
)
;
mutable
sk_sp
<
GrTextureProxy
>
fProxies
[
4
]
;
mutable
GrColorType
fProxyColorTypes
[
4
]
;
int
fNumProxies
;
SkYUVAIndex
fYUVAIndices
[
4
]
;
const
SkYUVColorSpace
fYUVColorSpace
;
GrSurfaceOrigin
fOrigin
;
const
sk_sp
<
SkColorSpace
>
fFromColorSpace
;
mutable
sk_sp
<
SkColorSpace
>
fOnMakeColorSpaceTarget
;
mutable
sk_sp
<
SkImage
>
fOnMakeColorSpaceResult
;
mutable
sk_sp
<
GrTextureProxy
>
fRGBProxy
;
typedef
SkImage_GpuBase
INHERITED
;
}
;
#
endif
