#
ifndef
SkImage_Lazy_DEFINED
#
define
SkImage_Lazy_DEFINED
#
include
"
include
/
private
/
SkMutex
.
h
"
#
include
"
src
/
image
/
SkImage_Base
.
h
"
#
if
SK_SUPPORT_GPU
#
include
"
src
/
gpu
/
GrTextureMaker
.
h
"
#
endif
class
SharedGenerator
;
class
SkImage_Lazy
:
public
SkImage_Base
{
public
:
struct
Validator
{
Validator
(
sk_sp
<
SharedGenerator
>
const
SkIRect
*
subset
const
SkColorType
*
colorType
sk_sp
<
SkColorSpace
>
colorSpace
)
;
MOZ_IMPLICIT
operator
bool
(
)
const
{
return
fSharedGenerator
.
get
(
)
;
}
sk_sp
<
SharedGenerator
>
fSharedGenerator
;
SkImageInfo
fInfo
;
SkIPoint
fOrigin
;
sk_sp
<
SkColorSpace
>
fColorSpace
;
uint32_t
fUniqueID
;
}
;
SkImage_Lazy
(
Validator
*
validator
)
;
~
SkImage_Lazy
(
)
override
;
SkIRect
onGetSubset
(
)
const
override
{
return
SkIRect
:
:
MakeXYWH
(
fOrigin
.
fX
fOrigin
.
fY
this
-
>
width
(
)
this
-
>
height
(
)
)
;
}
bool
onReadPixels
(
const
SkImageInfo
&
void
*
size_t
int
srcX
int
srcY
CachingHint
)
const
override
;
#
if
SK_SUPPORT_GPU
sk_sp
<
GrTextureProxy
>
asTextureProxyRef
(
GrRecordingContext
*
const
GrSamplerState
&
SkScalar
scaleAdjust
[
2
]
)
const
override
;
sk_sp
<
SkCachedData
>
getPlanes
(
SkYUVASizeInfo
*
SkYUVAIndex
[
4
]
SkYUVColorSpace
*
const
void
*
planes
[
4
]
)
override
;
#
endif
sk_sp
<
SkData
>
onRefEncoded
(
)
const
override
;
sk_sp
<
SkImage
>
onMakeSubset
(
GrRecordingContext
*
const
SkIRect
&
)
const
override
;
bool
getROPixels
(
SkBitmap
*
CachingHint
)
const
override
;
bool
onIsLazyGenerated
(
)
const
override
{
return
true
;
}
sk_sp
<
SkImage
>
onMakeColorTypeAndColorSpace
(
GrRecordingContext
*
SkColorType
sk_sp
<
SkColorSpace
>
)
const
override
;
sk_sp
<
SkImage
>
onReinterpretColorSpace
(
sk_sp
<
SkColorSpace
>
)
const
final
;
bool
onIsValid
(
GrContext
*
)
const
override
;
#
if
SK_SUPPORT_GPU
sk_sp
<
GrTextureProxy
>
lockTextureProxy
(
GrRecordingContext
*
const
GrUniqueKey
&
key
SkImage
:
:
CachingHint
bool
willBeMipped
GrTextureMaker
:
:
AllowedTexGenType
genType
)
const
;
void
makeCacheKeyFromOrigKey
(
const
GrUniqueKey
&
origKey
GrUniqueKey
*
cacheKey
)
const
;
#
endif
private
:
class
ScopedGenerator
;
sk_sp
<
SharedGenerator
>
fSharedGenerator
;
const
SkIPoint
fOrigin
;
uint32_t
fUniqueID
;
mutable
SkMutex
fOnMakeColorTypeAndSpaceMutex
;
mutable
sk_sp
<
SkImage
>
fOnMakeColorTypeAndSpaceResult
;
#
if
SK_SUPPORT_GPU
mutable
SkTDArray
<
GrUniqueKeyInvalidatedMessage
*
>
fUniqueKeyInvalidatedMessages
;
#
endif
typedef
SkImage_Base
INHERITED
;
}
;
#
endif
