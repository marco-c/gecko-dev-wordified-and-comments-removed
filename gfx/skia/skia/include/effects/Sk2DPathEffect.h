#
ifndef
Sk2DPathEffect_DEFINED
#
define
Sk2DPathEffect_DEFINED
#
include
"
SkFlattenable
.
h
"
#
include
"
SkPath
.
h
"
#
include
"
SkPathEffect
.
h
"
#
include
"
SkMatrix
.
h
"
class
SK_API
Sk2DPathEffect
:
public
SkPathEffect
{
protected
:
virtual
void
begin
(
const
SkIRect
&
uvBounds
SkPath
*
dst
)
const
;
virtual
void
next
(
const
SkPoint
&
loc
int
u
int
v
SkPath
*
dst
)
const
;
virtual
void
end
(
SkPath
*
dst
)
const
;
virtual
void
nextSpan
(
int
u
int
v
int
ucount
SkPath
*
dst
)
const
;
const
SkMatrix
&
getMatrix
(
)
const
{
return
fMatrix
;
}
explicit
Sk2DPathEffect
(
const
SkMatrix
&
mat
)
;
void
flatten
(
SkWriteBuffer
&
)
const
override
;
bool
onFilterPath
(
SkPath
*
const
SkPath
&
SkStrokeRec
*
const
SkRect
*
)
const
override
;
private
:
SkMatrix
fMatrix
fInverse
;
bool
fMatrixIsInvertible
;
Sk2DPathEffect
(
const
Sk2DPathEffect
&
)
;
Sk2DPathEffect
&
operator
=
(
const
Sk2DPathEffect
&
)
;
friend
class
Sk2DPathEffectBlitter
;
typedef
SkPathEffect
INHERITED
;
}
;
class
SK_API
SkLine2DPathEffect
:
public
Sk2DPathEffect
{
public
:
static
sk_sp
<
SkPathEffect
>
Make
(
SkScalar
width
const
SkMatrix
&
matrix
)
{
if
(
!
(
width
>
=
0
)
)
{
return
nullptr
;
}
return
sk_sp
<
SkPathEffect
>
(
new
SkLine2DPathEffect
(
width
matrix
)
)
;
}
Factory
getFactory
(
)
const
override
{
return
CreateProc
;
}
protected
:
SkLine2DPathEffect
(
SkScalar
width
const
SkMatrix
&
matrix
)
:
Sk2DPathEffect
(
matrix
)
fWidth
(
width
)
{
SkASSERT
(
width
>
=
0
)
;
}
void
flatten
(
SkWriteBuffer
&
)
const
override
;
bool
onFilterPath
(
SkPath
*
dst
const
SkPath
&
src
SkStrokeRec
*
const
SkRect
*
)
const
override
;
void
nextSpan
(
int
u
int
v
int
ucount
SkPath
*
)
const
override
;
private
:
static
sk_sp
<
SkFlattenable
>
CreateProc
(
SkReadBuffer
&
)
;
friend
class
SkFlattenable
:
:
PrivateInitializer
;
SkScalar
fWidth
;
typedef
Sk2DPathEffect
INHERITED
;
}
;
class
SK_API
SkPath2DPathEffect
:
public
Sk2DPathEffect
{
public
:
static
sk_sp
<
SkPathEffect
>
Make
(
const
SkMatrix
&
matrix
const
SkPath
&
path
)
{
return
sk_sp
<
SkPathEffect
>
(
new
SkPath2DPathEffect
(
matrix
path
)
)
;
}
Factory
getFactory
(
)
const
override
{
return
CreateProc
;
}
protected
:
SkPath2DPathEffect
(
const
SkMatrix
&
const
SkPath
&
)
;
void
flatten
(
SkWriteBuffer
&
)
const
override
;
void
next
(
const
SkPoint
&
int
u
int
v
SkPath
*
)
const
override
;
private
:
static
sk_sp
<
SkFlattenable
>
CreateProc
(
SkReadBuffer
&
)
;
friend
class
SkFlattenable
:
:
PrivateInitializer
;
SkPath
fPath
;
typedef
Sk2DPathEffect
INHERITED
;
}
;
#
endif
