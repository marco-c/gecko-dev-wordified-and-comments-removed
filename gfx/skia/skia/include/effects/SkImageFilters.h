#
ifndef
SkImageFilters_DEFINED
#
define
SkImageFilters_DEFINED
#
include
"
include
/
core
/
SkBlendMode
.
h
"
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkFilterQuality
.
h
"
#
include
"
include
/
core
/
SkImage
.
h
"
#
include
"
include
/
core
/
SkImageFilter
.
h
"
#
include
"
include
/
core
/
SkPicture
.
h
"
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
include
/
core
/
SkTileMode
.
h
"
class
SkColorFilter
;
class
SkPaint
;
class
SkRegion
;
class
SK_API
SkImageFilters
{
public
:
static
sk_sp
<
SkImageFilter
>
AlphaThreshold
(
const
SkRegion
&
region
SkScalar
innerMin
SkScalar
outerMax
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
Arithmetic
(
SkScalar
k1
SkScalar
k2
SkScalar
k3
SkScalar
k4
bool
enforcePMColor
sk_sp
<
SkImageFilter
>
background
sk_sp
<
SkImageFilter
>
foreground
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
Blur
(
SkScalar
sigmaX
SkScalar
sigmaY
SkTileMode
tileMode
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
Blur
(
SkScalar
sigmaX
SkScalar
sigmaY
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
{
return
Blur
(
sigmaX
sigmaY
SkTileMode
:
:
kDecal
std
:
:
move
(
input
)
cropRect
)
;
}
static
sk_sp
<
SkImageFilter
>
ColorFilter
(
sk_sp
<
SkColorFilter
>
cf
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
Compose
(
sk_sp
<
SkImageFilter
>
outer
sk_sp
<
SkImageFilter
>
inner
)
;
static
sk_sp
<
SkImageFilter
>
DisplacementMap
(
SkColorChannel
xChannelSelector
SkColorChannel
yChannelSelector
SkScalar
scale
sk_sp
<
SkImageFilter
>
displacement
sk_sp
<
SkImageFilter
>
color
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
DropShadow
(
SkScalar
dx
SkScalar
dy
SkScalar
sigmaX
SkScalar
sigmaY
SkColor
color
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
DropShadowOnly
(
SkScalar
dx
SkScalar
dy
SkScalar
sigmaX
SkScalar
sigmaY
SkColor
color
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
Image
(
sk_sp
<
SkImage
>
image
const
SkRect
&
srcRect
const
SkRect
&
dstRect
SkFilterQuality
filterQuality
)
;
static
sk_sp
<
SkImageFilter
>
Image
(
sk_sp
<
SkImage
>
image
)
{
SkRect
r
=
image
?
SkRect
:
:
MakeWH
(
image
-
>
width
(
)
image
-
>
height
(
)
)
:
SkRect
:
:
MakeEmpty
(
)
;
return
Image
(
std
:
:
move
(
image
)
r
r
kHigh_SkFilterQuality
)
;
}
static
sk_sp
<
SkImageFilter
>
Magnifier
(
const
SkRect
&
srcRect
SkScalar
inset
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
MatrixConvolution
(
const
SkISize
&
kernelSize
const
SkScalar
kernel
[
]
SkScalar
gain
SkScalar
bias
const
SkIPoint
&
kernelOffset
SkTileMode
tileMode
bool
convolveAlpha
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
MatrixTransform
(
const
SkMatrix
&
matrix
SkFilterQuality
filterQuality
sk_sp
<
SkImageFilter
>
input
)
;
static
sk_sp
<
SkImageFilter
>
Merge
(
sk_sp
<
SkImageFilter
>
*
const
filters
int
count
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
Merge
(
sk_sp
<
SkImageFilter
>
first
sk_sp
<
SkImageFilter
>
second
const
SkIRect
*
cropRect
=
nullptr
)
{
sk_sp
<
SkImageFilter
>
array
[
]
=
{
std
:
:
move
(
first
)
std
:
:
move
(
second
)
}
;
return
Merge
(
array
2
cropRect
)
;
}
static
sk_sp
<
SkImageFilter
>
Offset
(
SkScalar
dx
SkScalar
dy
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
Paint
(
const
SkPaint
&
paint
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
Picture
(
sk_sp
<
SkPicture
>
pic
const
SkRect
&
targetRect
)
;
static
sk_sp
<
SkImageFilter
>
Picture
(
sk_sp
<
SkPicture
>
pic
)
{
SkRect
target
=
pic
?
pic
-
>
cullRect
(
)
:
SkRect
:
:
MakeEmpty
(
)
;
return
Picture
(
std
:
:
move
(
pic
)
target
)
;
}
static
sk_sp
<
SkImageFilter
>
Tile
(
const
SkRect
&
src
const
SkRect
&
dst
sk_sp
<
SkImageFilter
>
input
)
;
static
sk_sp
<
SkImageFilter
>
Xfermode
(
SkBlendMode
sk_sp
<
SkImageFilter
>
background
sk_sp
<
SkImageFilter
>
foreground
=
nullptr
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
Dilate
(
int
radiusX
int
radiusY
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
Erode
(
int
radiusX
int
radiusY
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
DistantLitDiffuse
(
const
SkPoint3
&
direction
SkColor
lightColor
SkScalar
surfaceScale
SkScalar
kd
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
PointLitDiffuse
(
const
SkPoint3
&
location
SkColor
lightColor
SkScalar
surfaceScale
SkScalar
kd
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
SpotLitDiffuse
(
const
SkPoint3
&
location
const
SkPoint3
&
target
SkScalar
falloffExponent
SkScalar
cutoffAngle
SkColor
lightColor
SkScalar
surfaceScale
SkScalar
kd
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
DistantLitSpecular
(
const
SkPoint3
&
direction
SkColor
lightColor
SkScalar
surfaceScale
SkScalar
ks
SkScalar
shininess
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
PointLitSpecular
(
const
SkPoint3
&
location
SkColor
lightColor
SkScalar
surfaceScale
SkScalar
ks
SkScalar
shininess
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
;
static
sk_sp
<
SkImageFilter
>
SpotLitSpecular
(
const
SkPoint3
&
location
const
SkPoint3
&
target
SkScalar
falloffExponent
SkScalar
cutoffAngle
SkColor
lightColor
SkScalar
surfaceScale
SkScalar
ks
SkScalar
shininess
sk_sp
<
SkImageFilter
>
input
const
SkIRect
*
cropRect
=
nullptr
)
;
static
void
RegisterFlattenables
(
)
;
private
:
SkImageFilters
(
)
=
delete
;
}
;
#
endif
