#
ifndef
SkLayerDrawLooper_DEFINED
#
define
SkLayerDrawLooper_DEFINED
#
include
"
SkDrawLooper
.
h
"
#
include
"
SkPaint
.
h
"
#
include
"
SkPoint
.
h
"
#
include
"
SkXfermode
.
h
"
class
SK_API
SkLayerDrawLooper
:
public
SkDrawLooper
{
public
:
virtual
~
SkLayerDrawLooper
(
)
;
enum
Bits
{
kStyle_Bit
=
1
<
<
0
kTextSkewX_Bit
=
1
<
<
1
kPathEffect_Bit
=
1
<
<
2
kMaskFilter_Bit
=
1
<
<
3
kShader_Bit
=
1
<
<
4
kColorFilter_Bit
=
1
<
<
5
kXfermode_Bit
=
1
<
<
6
kEntirePaint_Bits
=
-
1
}
;
typedef
int32_t
BitFlags
;
struct
SK_API
LayerInfo
{
BitFlags
fPaintBits
;
SkXfermode
:
:
Mode
fColorMode
;
SkVector
fOffset
;
bool
fPostTranslate
;
LayerInfo
(
)
;
}
;
SkDrawLooper
:
:
Context
*
createContext
(
SkCanvas
*
void
*
storage
)
const
override
;
size_t
contextSize
(
)
const
override
{
return
sizeof
(
LayerDrawLooperContext
)
;
}
bool
asABlurShadow
(
BlurShadowRec
*
rec
)
const
override
;
SK_TO_STRING_OVERRIDE
(
)
Factory
getFactory
(
)
const
override
{
return
CreateProc
;
}
static
sk_sp
<
SkFlattenable
>
CreateProc
(
SkReadBuffer
&
buffer
)
;
protected
:
SkLayerDrawLooper
(
)
;
void
flatten
(
SkWriteBuffer
&
)
const
override
;
private
:
struct
Rec
{
Rec
*
fNext
;
SkPaint
fPaint
;
LayerInfo
fInfo
;
}
;
Rec
*
fRecs
;
int
fCount
;
class
LayerDrawLooperContext
:
public
SkDrawLooper
:
:
Context
{
public
:
explicit
LayerDrawLooperContext
(
const
SkLayerDrawLooper
*
looper
)
;
protected
:
bool
next
(
SkCanvas
*
SkPaint
*
paint
)
override
;
private
:
Rec
*
fCurrRec
;
static
void
ApplyInfo
(
SkPaint
*
dst
const
SkPaint
&
src
const
LayerInfo
&
)
;
}
;
typedef
SkDrawLooper
INHERITED
;
public
:
class
SK_API
Builder
{
public
:
Builder
(
)
;
~
Builder
(
)
;
SkPaint
*
addLayer
(
const
LayerInfo
&
)
;
void
addLayer
(
SkScalar
dx
SkScalar
dy
)
;
void
addLayer
(
)
{
this
-
>
addLayer
(
0
0
)
;
}
SkPaint
*
addLayerOnTop
(
const
LayerInfo
&
)
;
sk_sp
<
SkDrawLooper
>
detach
(
)
;
#
ifdef
SK_SUPPORT_LEGACY_MINOR_EFFECT_PTR
SkLayerDrawLooper
*
detachLooper
(
)
{
return
(
SkLayerDrawLooper
*
)
this
-
>
detach
(
)
.
release
(
)
;
}
#
endif
private
:
Rec
*
fRecs
;
Rec
*
fTopRec
;
int
fCount
;
}
;
}
;
#
endif
