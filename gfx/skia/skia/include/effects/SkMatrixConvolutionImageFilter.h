#
ifndef
SkMatrixConvolutionImageFilter_DEFINED
#
define
SkMatrixConvolutionImageFilter_DEFINED
#
include
"
SkImageFilter
.
h
"
#
include
"
SkScalar
.
h
"
#
include
"
SkSize
.
h
"
#
include
"
SkPoint
.
h
"
class
SkBitmap
;
class
SK_API
SkMatrixConvolutionImageFilter
:
public
SkImageFilter
{
public
:
enum
TileMode
{
kClamp_TileMode
=
0
kRepeat_TileMode
kClampToBlack_TileMode
kMax_TileMode
=
kClampToBlack_TileMode
}
;
~
SkMatrixConvolutionImageFilter
(
)
override
;
static
sk_sp
<
SkImageFilter
>
Make
(
const
SkISize
&
kernelSize
const
SkScalar
*
kernel
SkScalar
gain
SkScalar
bias
const
SkIPoint
&
kernelOffset
TileMode
tileMode
bool
convolveAlpha
sk_sp
<
SkImageFilter
>
input
const
CropRect
*
cropRect
=
nullptr
)
;
SK_TO_STRING_OVERRIDE
(
)
SK_DECLARE_PUBLIC_FLATTENABLE_DESERIALIZATION_PROCS
(
SkMatrixConvolutionImageFilter
)
protected
:
SkMatrixConvolutionImageFilter
(
const
SkISize
&
kernelSize
const
SkScalar
*
kernel
SkScalar
gain
SkScalar
bias
const
SkIPoint
&
kernelOffset
TileMode
tileMode
bool
convolveAlpha
sk_sp
<
SkImageFilter
>
input
const
CropRect
*
cropRect
)
;
void
flatten
(
SkWriteBuffer
&
)
const
override
;
sk_sp
<
SkSpecialImage
>
onFilterImage
(
SkSpecialImage
*
source
const
Context
&
SkIPoint
*
offset
)
const
override
;
sk_sp
<
SkImageFilter
>
onMakeColorSpace
(
SkColorSpaceXformer
*
)
const
override
;
SkIRect
onFilterNodeBounds
(
const
SkIRect
&
const
SkMatrix
&
MapDirection
)
const
override
;
bool
affectsTransparentBlack
(
)
const
override
;
private
:
SkISize
fKernelSize
;
SkScalar
*
fKernel
;
SkScalar
fGain
;
SkScalar
fBias
;
SkIPoint
fKernelOffset
;
TileMode
fTileMode
;
bool
fConvolveAlpha
;
template
<
class
PixelFetcher
bool
convolveAlpha
>
void
filterPixels
(
const
SkBitmap
&
src
SkBitmap
*
result
const
SkIRect
&
rect
const
SkIRect
&
bounds
)
const
;
template
<
class
PixelFetcher
>
void
filterPixels
(
const
SkBitmap
&
src
SkBitmap
*
result
const
SkIRect
&
rect
const
SkIRect
&
bounds
)
const
;
void
filterInteriorPixels
(
const
SkBitmap
&
src
SkBitmap
*
result
const
SkIRect
&
rect
const
SkIRect
&
bounds
)
const
;
void
filterBorderPixels
(
const
SkBitmap
&
src
SkBitmap
*
result
const
SkIRect
&
rect
const
SkIRect
&
bounds
)
const
;
typedef
SkImageFilter
INHERITED
;
}
;
#
endif
