#
ifndef
SkGradientShader_DEFINED
#
define
SkGradientShader_DEFINED
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkColorSpace
.
h
"
#
include
"
include
/
core
/
SkPoint
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkScalar
.
h
"
#
include
"
include
/
core
/
SkShader
.
h
"
#
include
"
include
/
core
/
SkTileMode
.
h
"
#
include
"
include
/
private
/
base
/
SkAPI
.
h
"
#
include
<
cstdint
>
#
include
<
utility
>
class
SkMatrix
;
class
SK_API
SkGradientShader
{
public
:
enum
Flags
{
kInterpolateColorsInPremul_Flag
=
1
<
<
0
}
;
struct
Interpolation
{
enum
class
InPremul
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
class
ColorSpace
:
uint8_t
{
kDestination
kSRGBLinear
kLab
kOKLab
kOKLabGamutMap
kLCH
kOKLCH
kOKLCHGamutMap
kSRGB
kHSL
kHWB
kLastColorSpace
=
kHWB
}
;
static
constexpr
int
kColorSpaceCount
=
static_cast
<
int
>
(
ColorSpace
:
:
kLastColorSpace
)
+
1
;
enum
class
HueMethod
:
uint8_t
{
kShorter
kLonger
kIncreasing
kDecreasing
kLastHueMethod
=
kDecreasing
}
;
static
constexpr
int
kHueMethodCount
=
static_cast
<
int
>
(
HueMethod
:
:
kLastHueMethod
)
+
1
;
InPremul
fInPremul
=
InPremul
:
:
kNo
;
ColorSpace
fColorSpace
=
ColorSpace
:
:
kDestination
;
HueMethod
fHueMethod
=
HueMethod
:
:
kShorter
;
static
Interpolation
FromFlags
(
uint32_t
flags
)
{
return
{
flags
&
kInterpolateColorsInPremul_Flag
?
InPremul
:
:
kYes
:
InPremul
:
:
kNo
ColorSpace
:
:
kDestination
HueMethod
:
:
kShorter
}
;
}
}
;
static
sk_sp
<
SkShader
>
MakeLinear
(
const
SkPoint
pts
[
2
]
const
SkColor
colors
[
]
const
SkScalar
pos
[
]
int
count
SkTileMode
mode
uint32_t
flags
=
0
const
SkMatrix
*
localMatrix
=
nullptr
)
;
static
sk_sp
<
SkShader
>
MakeLinear
(
const
SkPoint
pts
[
2
]
const
SkColor4f
colors
[
]
sk_sp
<
SkColorSpace
>
colorSpace
const
SkScalar
pos
[
]
int
count
SkTileMode
mode
const
Interpolation
&
interpolation
const
SkMatrix
*
localMatrix
)
;
static
sk_sp
<
SkShader
>
MakeLinear
(
const
SkPoint
pts
[
2
]
const
SkColor4f
colors
[
]
sk_sp
<
SkColorSpace
>
colorSpace
const
SkScalar
pos
[
]
int
count
SkTileMode
mode
uint32_t
flags
=
0
const
SkMatrix
*
localMatrix
=
nullptr
)
{
return
MakeLinear
(
pts
colors
std
:
:
move
(
colorSpace
)
pos
count
mode
Interpolation
:
:
FromFlags
(
flags
)
localMatrix
)
;
}
static
sk_sp
<
SkShader
>
MakeRadial
(
const
SkPoint
&
center
SkScalar
radius
const
SkColor
colors
[
]
const
SkScalar
pos
[
]
int
count
SkTileMode
mode
uint32_t
flags
=
0
const
SkMatrix
*
localMatrix
=
nullptr
)
;
static
sk_sp
<
SkShader
>
MakeRadial
(
const
SkPoint
&
center
SkScalar
radius
const
SkColor4f
colors
[
]
sk_sp
<
SkColorSpace
>
colorSpace
const
SkScalar
pos
[
]
int
count
SkTileMode
mode
const
Interpolation
&
interpolation
const
SkMatrix
*
localMatrix
)
;
static
sk_sp
<
SkShader
>
MakeRadial
(
const
SkPoint
&
center
SkScalar
radius
const
SkColor4f
colors
[
]
sk_sp
<
SkColorSpace
>
colorSpace
const
SkScalar
pos
[
]
int
count
SkTileMode
mode
uint32_t
flags
=
0
const
SkMatrix
*
localMatrix
=
nullptr
)
{
return
MakeRadial
(
center
radius
colors
std
:
:
move
(
colorSpace
)
pos
count
mode
Interpolation
:
:
FromFlags
(
flags
)
localMatrix
)
;
}
static
sk_sp
<
SkShader
>
MakeTwoPointConical
(
const
SkPoint
&
start
SkScalar
startRadius
const
SkPoint
&
end
SkScalar
endRadius
const
SkColor
colors
[
]
const
SkScalar
pos
[
]
int
count
SkTileMode
mode
uint32_t
flags
=
0
const
SkMatrix
*
localMatrix
=
nullptr
)
;
static
sk_sp
<
SkShader
>
MakeTwoPointConical
(
const
SkPoint
&
start
SkScalar
startRadius
const
SkPoint
&
end
SkScalar
endRadius
const
SkColor4f
colors
[
]
sk_sp
<
SkColorSpace
>
colorSpace
const
SkScalar
pos
[
]
int
count
SkTileMode
mode
const
Interpolation
&
interpolation
const
SkMatrix
*
localMatrix
)
;
static
sk_sp
<
SkShader
>
MakeTwoPointConical
(
const
SkPoint
&
start
SkScalar
startRadius
const
SkPoint
&
end
SkScalar
endRadius
const
SkColor4f
colors
[
]
sk_sp
<
SkColorSpace
>
colorSpace
const
SkScalar
pos
[
]
int
count
SkTileMode
mode
uint32_t
flags
=
0
const
SkMatrix
*
localMatrix
=
nullptr
)
{
return
MakeTwoPointConical
(
start
startRadius
end
endRadius
colors
std
:
:
move
(
colorSpace
)
pos
count
mode
Interpolation
:
:
FromFlags
(
flags
)
localMatrix
)
;
}
static
sk_sp
<
SkShader
>
MakeSweep
(
SkScalar
cx
SkScalar
cy
const
SkColor
colors
[
]
const
SkScalar
pos
[
]
int
count
SkTileMode
mode
SkScalar
startAngle
SkScalar
endAngle
uint32_t
flags
const
SkMatrix
*
localMatrix
)
;
static
sk_sp
<
SkShader
>
MakeSweep
(
SkScalar
cx
SkScalar
cy
const
SkColor
colors
[
]
const
SkScalar
pos
[
]
int
count
uint32_t
flags
=
0
const
SkMatrix
*
localMatrix
=
nullptr
)
{
return
MakeSweep
(
cx
cy
colors
pos
count
SkTileMode
:
:
kClamp
0
360
flags
localMatrix
)
;
}
static
sk_sp
<
SkShader
>
MakeSweep
(
SkScalar
cx
SkScalar
cy
const
SkColor4f
colors
[
]
sk_sp
<
SkColorSpace
>
colorSpace
const
SkScalar
pos
[
]
int
count
SkTileMode
mode
SkScalar
startAngle
SkScalar
endAngle
const
Interpolation
&
interpolation
const
SkMatrix
*
localMatrix
)
;
static
sk_sp
<
SkShader
>
MakeSweep
(
SkScalar
cx
SkScalar
cy
const
SkColor4f
colors
[
]
sk_sp
<
SkColorSpace
>
colorSpace
const
SkScalar
pos
[
]
int
count
SkTileMode
mode
SkScalar
startAngle
SkScalar
endAngle
uint32_t
flags
const
SkMatrix
*
localMatrix
)
{
return
MakeSweep
(
cx
cy
colors
std
:
:
move
(
colorSpace
)
pos
count
mode
startAngle
endAngle
Interpolation
:
:
FromFlags
(
flags
)
localMatrix
)
;
}
static
sk_sp
<
SkShader
>
MakeSweep
(
SkScalar
cx
SkScalar
cy
const
SkColor4f
colors
[
]
sk_sp
<
SkColorSpace
>
colorSpace
const
SkScalar
pos
[
]
int
count
uint32_t
flags
=
0
const
SkMatrix
*
localMatrix
=
nullptr
)
{
return
MakeSweep
(
cx
cy
colors
std
:
:
move
(
colorSpace
)
pos
count
SkTileMode
:
:
kClamp
0
360
flags
localMatrix
)
;
}
}
;
#
endif
