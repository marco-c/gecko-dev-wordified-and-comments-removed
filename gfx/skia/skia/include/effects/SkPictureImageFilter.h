#
ifndef
SkPictureImageFilter_DEFINED
#
define
SkPictureImageFilter_DEFINED
#
include
"
SkImageFilter
.
h
"
#
include
"
SkPicture
.
h
"
class
SK_API
SkPictureImageFilter
:
public
SkImageFilter
{
public
:
static
sk_sp
<
SkImageFilter
>
Make
(
sk_sp
<
SkPicture
>
picture
)
{
return
sk_sp
<
SkImageFilter
>
(
new
SkPictureImageFilter
(
std
:
:
move
(
picture
)
)
)
;
}
static
sk_sp
<
SkImageFilter
>
Make
(
sk_sp
<
SkPicture
>
picture
const
SkRect
&
cropRect
)
{
return
sk_sp
<
SkImageFilter
>
(
new
SkPictureImageFilter
(
std
:
:
move
(
picture
)
cropRect
kDeviceSpace_PictureResolution
kLow_SkFilterQuality
)
)
;
}
static
sk_sp
<
SkImageFilter
>
MakeForLocalSpace
(
sk_sp
<
SkPicture
>
picture
const
SkRect
&
cropRect
SkFilterQuality
filterQuality
)
{
return
sk_sp
<
SkImageFilter
>
(
new
SkPictureImageFilter
(
std
:
:
move
(
picture
)
cropRect
kLocalSpace_PictureResolution
filterQuality
)
)
;
}
#
ifdef
SK_SUPPORT_LEGACY_IMAGEFILTER_PTR
static
SkImageFilter
*
Create
(
const
SkPicture
*
picture
)
{
return
Make
(
sk_ref_sp
(
const_cast
<
SkPicture
*
>
(
picture
)
)
)
.
release
(
)
;
}
static
SkImageFilter
*
Create
(
const
SkPicture
*
picture
const
SkRect
&
cropRect
)
{
return
Make
(
sk_ref_sp
(
const_cast
<
SkPicture
*
>
(
picture
)
)
cropRect
)
.
release
(
)
;
}
static
SkImageFilter
*
CreateForLocalSpace
(
const
SkPicture
*
picture
const
SkRect
&
cropRect
SkFilterQuality
filterQuality
)
{
return
MakeForLocalSpace
(
sk_ref_sp
(
const_cast
<
SkPicture
*
>
(
picture
)
)
cropRect
filterQuality
)
.
release
(
)
;
}
#
endif
SK_TO_STRING_OVERRIDE
(
)
SK_DECLARE_PUBLIC_FLATTENABLE_DESERIALIZATION_PROCS
(
SkPictureImageFilter
)
protected
:
enum
PictureResolution
{
kDeviceSpace_PictureResolution
kLocalSpace_PictureResolution
}
;
void
flatten
(
SkWriteBuffer
&
)
const
override
;
bool
onFilterImageDeprecated
(
Proxy
*
const
SkBitmap
&
src
const
Context
&
SkBitmap
*
result
SkIPoint
*
offset
)
const
override
;
private
:
explicit
SkPictureImageFilter
(
sk_sp
<
SkPicture
>
picture
)
;
SkPictureImageFilter
(
sk_sp
<
SkPicture
>
picture
const
SkRect
&
cropRect
PictureResolution
SkFilterQuality
)
;
void
drawPictureAtDeviceResolution
(
SkBaseDevice
*
const
SkIRect
&
deviceBounds
const
Context
&
)
const
;
void
drawPictureAtLocalResolution
(
Proxy
*
SkBaseDevice
*
const
SkIRect
&
deviceBounds
const
Context
&
)
const
;
sk_sp
<
SkPicture
>
fPicture
;
SkRect
fCropRect
;
PictureResolution
fPictureResolution
;
SkFilterQuality
fFilterQuality
;
typedef
SkImageFilter
INHERITED
;
}
;
#
endif
