#
ifndef
SkPictureImageFilter_DEFINED
#
define
SkPictureImageFilter_DEFINED
#
include
"
SkImageFilter
.
h
"
#
include
"
SkPicture
.
h
"
class
SK_API
SkPictureImageFilter
:
public
SkImageFilter
{
public
:
static
SkImageFilter
*
Create
(
const
SkPicture
*
picture
)
{
return
new
SkPictureImageFilter
(
picture
)
;
}
static
SkImageFilter
*
Create
(
const
SkPicture
*
picture
const
SkRect
&
cropRect
)
{
return
new
SkPictureImageFilter
(
picture
cropRect
kDeviceSpace_PictureResolution
kLow_SkFilterQuality
)
;
}
static
SkImageFilter
*
CreateForLocalSpace
(
const
SkPicture
*
picture
const
SkRect
&
cropRect
SkFilterQuality
filterQuality
)
{
return
new
SkPictureImageFilter
(
picture
cropRect
kLocalSpace_PictureResolution
filterQuality
)
;
}
SK_TO_STRING_OVERRIDE
(
)
SK_DECLARE_PUBLIC_FLATTENABLE_DESERIALIZATION_PROCS
(
SkPictureImageFilter
)
protected
:
enum
PictureResolution
{
kDeviceSpace_PictureResolution
kLocalSpace_PictureResolution
}
;
virtual
~
SkPictureImageFilter
(
)
;
void
flatten
(
SkWriteBuffer
&
)
const
override
;
bool
onFilterImage
(
Proxy
*
const
SkBitmap
&
src
const
Context
&
SkBitmap
*
result
SkIPoint
*
offset
)
const
override
;
private
:
explicit
SkPictureImageFilter
(
const
SkPicture
*
picture
)
;
SkPictureImageFilter
(
const
SkPicture
*
picture
const
SkRect
&
cropRect
PictureResolution
SkFilterQuality
)
;
void
drawPictureAtDeviceResolution
(
SkBaseDevice
*
const
SkIRect
&
deviceBounds
const
Context
&
)
const
;
void
drawPictureAtLocalResolution
(
Proxy
*
SkBaseDevice
*
const
SkIRect
&
deviceBounds
const
Context
&
)
const
;
const
SkPicture
*
fPicture
;
SkRect
fCropRect
;
PictureResolution
fPictureResolution
;
SkFilterQuality
fFilterQuality
;
typedef
SkImageFilter
INHERITED
;
}
;
#
endif
