#
ifndef
SkTableMaskFilter_DEFINED
#
define
SkTableMaskFilter_DEFINED
#
include
"
SkMaskFilter
.
h
"
#
include
"
SkScalar
.
h
"
class
SK_API
SkTableMaskFilter
:
public
SkMaskFilter
{
public
:
static
void
MakeGammaTable
(
uint8_t
table
[
256
]
SkScalar
gamma
)
;
static
void
MakeClipTable
(
uint8_t
table
[
256
]
uint8_t
min
uint8_t
max
)
;
static
SkMaskFilter
*
Create
(
const
uint8_t
table
[
256
]
)
{
return
new
SkTableMaskFilter
(
table
)
;
}
static
SkMaskFilter
*
CreateGamma
(
SkScalar
gamma
)
{
uint8_t
table
[
256
]
;
MakeGammaTable
(
table
gamma
)
;
return
new
SkTableMaskFilter
(
table
)
;
}
static
SkMaskFilter
*
CreateClip
(
uint8_t
min
uint8_t
max
)
{
uint8_t
table
[
256
]
;
MakeClipTable
(
table
min
max
)
;
return
new
SkTableMaskFilter
(
table
)
;
}
SkMask
:
:
Format
getFormat
(
)
const
override
;
bool
filterMask
(
SkMask
*
const
SkMask
&
const
SkMatrix
&
SkIPoint
*
)
const
override
;
SK_TO_STRING_OVERRIDE
(
)
SK_DECLARE_PUBLIC_FLATTENABLE_DESERIALIZATION_PROCS
(
SkTableMaskFilter
)
protected
:
~
SkTableMaskFilter
(
)
override
;
void
flatten
(
SkWriteBuffer
&
)
const
override
;
private
:
SkTableMaskFilter
(
)
;
explicit
SkTableMaskFilter
(
const
uint8_t
table
[
256
]
)
;
uint8_t
fTable
[
256
]
;
typedef
SkMaskFilter
INHERITED
;
}
;
#
endif
