#
include
"
SkColorFilter
.
h
"
#
include
"
SkFlattenable
.
h
"
#
ifndef
SkOverdrawColorFilter_DEFINED
#
define
SkOverdrawColorFilter_DEFINED
class
SK_API
SkOverdrawColorFilter
:
public
SkColorFilter
{
public
:
static
constexpr
int
kNumColors
=
6
;
static
sk_sp
<
SkOverdrawColorFilter
>
Make
(
const
SkPMColor
colors
[
kNumColors
]
)
{
return
sk_sp
<
SkOverdrawColorFilter
>
(
new
SkOverdrawColorFilter
(
colors
)
)
;
}
#
if
SK_SUPPORT_GPU
std
:
:
unique_ptr
<
GrFragmentProcessor
>
asFragmentProcessor
(
GrContext
*
const
GrColorSpaceInfo
&
)
const
override
;
#
endif
void
toString
(
SkString
*
str
)
const
override
;
static
sk_sp
<
SkFlattenable
>
CreateProc
(
SkReadBuffer
&
buffer
)
;
Factory
getFactory
(
)
const
override
{
return
CreateProc
;
}
SK_DECLARE_FLATTENABLE_REGISTRAR_GROUP
(
)
protected
:
void
flatten
(
SkWriteBuffer
&
buffer
)
const
override
;
private
:
SkOverdrawColorFilter
(
const
SkPMColor
colors
[
kNumColors
]
)
{
memcpy
(
fColors
colors
kNumColors
*
sizeof
(
SkPMColor
)
)
;
}
void
onAppendStages
(
SkRasterPipeline
*
SkColorSpace
*
SkArenaAlloc
*
bool
)
const
override
;
SkPMColor
fColors
[
kNumColors
]
;
typedef
SkColorFilter
INHERITED
;
}
;
#
endif
