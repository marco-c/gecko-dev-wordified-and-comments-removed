#
ifndef
skgpu_MutableTextureState_DEFINED
#
define
skgpu_MutableTextureState_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
private
/
base
/
SkAnySubclass
.
h
"
#
include
<
cstddef
>
namespace
skgpu
{
enum
class
BackendApi
:
unsigned
int
;
class
MutableTextureStateData
;
class
SK_API
MutableTextureState
:
public
SkRefCnt
{
public
:
MutableTextureState
(
)
;
~
MutableTextureState
(
)
override
;
MutableTextureState
(
const
MutableTextureState
&
that
)
;
MutableTextureState
&
operator
=
(
const
MutableTextureState
&
that
)
;
void
set
(
const
MutableTextureState
&
that
)
;
BackendApi
backend
(
)
const
{
return
fBackend
;
}
bool
isValid
(
)
const
{
return
fIsValid
;
}
private
:
friend
class
MutableTextureStateData
;
friend
class
MutableTextureStatePriv
;
inline
constexpr
static
size_t
kMaxSubclassSize
=
16
;
using
AnyStateData
=
SkAnySubclass
<
MutableTextureStateData
kMaxSubclassSize
>
;
template
<
typename
StateData
>
MutableTextureState
(
BackendApi
api
const
StateData
&
data
)
:
fBackend
(
api
)
fIsValid
(
true
)
{
fStateData
.
emplace
<
StateData
>
(
data
)
;
}
AnyStateData
fStateData
;
BackendApi
fBackend
;
bool
fIsValid
;
}
;
}
#
endif
