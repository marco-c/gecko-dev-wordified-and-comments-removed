#
ifndef
skgpu_MutableTextureState_DEFINED
#
define
skgpu_MutableTextureState_DEFINED
#
include
"
include
/
gpu
/
GpuTypes
.
h
"
#
ifdef
SK_VULKAN
#
include
"
include
/
private
/
gpu
/
vk
/
VulkanTypesPriv
.
h
"
#
endif
#
include
<
new
>
class
GrVkGpu
;
namespace
skgpu
{
class
SK_API
MutableTextureState
{
public
:
MutableTextureState
(
)
{
}
#
ifdef
SK_VULKAN
MutableTextureState
(
VkImageLayout
layout
uint32_t
queueFamilyIndex
)
:
fVkState
(
layout
queueFamilyIndex
)
fBackend
(
BackendApi
:
:
kVulkan
)
fIsValid
(
true
)
{
}
#
endif
MutableTextureState
(
const
MutableTextureState
&
that
)
:
fBackend
(
that
.
fBackend
)
fIsValid
(
that
.
fIsValid
)
{
if
(
!
fIsValid
)
{
return
;
}
switch
(
fBackend
)
{
case
BackendApi
:
:
kVulkan
:
#
ifdef
SK_VULKAN
SkASSERT
(
that
.
fBackend
=
=
BackendApi
:
:
kVulkan
)
;
fVkState
=
that
.
fVkState
;
#
endif
break
;
default
:
(
void
)
that
;
SkUNREACHABLE
;
}
}
MutableTextureState
&
operator
=
(
const
MutableTextureState
&
that
)
{
if
(
this
!
=
&
that
)
{
this
-
>
~
MutableTextureState
(
)
;
new
(
this
)
MutableTextureState
(
that
)
;
}
return
*
this
;
}
#
ifdef
SK_VULKAN
VkImageLayout
getVkImageLayout
(
)
const
{
if
(
this
-
>
isValid
(
)
&
&
fBackend
!
=
BackendApi
:
:
kVulkan
)
{
return
VK_IMAGE_LAYOUT_UNDEFINED
;
}
return
fVkState
.
getImageLayout
(
)
;
}
uint32_t
getQueueFamilyIndex
(
)
const
{
if
(
this
-
>
isValid
(
)
&
&
fBackend
!
=
BackendApi
:
:
kVulkan
)
{
return
VK_QUEUE_FAMILY_IGNORED
;
}
return
fVkState
.
getQueueFamilyIndex
(
)
;
}
#
endif
BackendApi
backend
(
)
const
{
return
fBackend
;
}
bool
isValid
(
)
const
{
return
fIsValid
;
}
private
:
friend
class
MutableTextureStateRef
;
friend
class
:
:
GrVkGpu
;
#
ifdef
SK_VULKAN
void
setVulkanState
(
VkImageLayout
layout
uint32_t
queueFamilyIndex
)
{
SkASSERT
(
!
this
-
>
isValid
(
)
|
|
fBackend
=
=
BackendApi
:
:
kVulkan
)
;
fVkState
.
setImageLayout
(
layout
)
;
fVkState
.
setQueueFamilyIndex
(
queueFamilyIndex
)
;
fBackend
=
BackendApi
:
:
kVulkan
;
fIsValid
=
true
;
}
#
endif
union
{
char
fPlaceholder
;
#
ifdef
SK_VULKAN
VulkanMutableTextureState
fVkState
;
#
endif
}
;
BackendApi
fBackend
=
BackendApi
:
:
kMock
;
bool
fIsValid
=
false
;
}
;
}
#
endif
