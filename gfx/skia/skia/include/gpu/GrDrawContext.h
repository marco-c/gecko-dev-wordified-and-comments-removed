#
ifndef
GrDrawContext_DEFINED
#
define
GrDrawContext_DEFINED
#
include
"
GrColor
.
h
"
#
include
"
GrRenderTarget
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkSurfaceProps
.
h
"
class
GrClip
;
class
GrContext
;
class
GrDrawBatch
;
class
GrDrawingManager
;
class
GrDrawTarget
;
class
GrPaint
;
class
GrPathProcessor
;
class
GrPathRange
;
class
GrPathRangeDraw
;
class
GrPipelineBuilder
;
class
GrRenderTarget
;
class
GrStrokeInfo
;
class
GrSurface
;
class
GrTextContext
;
class
SkDrawFilter
;
struct
SkIPoint
;
struct
SkIRect
;
class
SkMatrix
;
class
SkPaint
;
class
SkPath
;
struct
SkPoint
;
struct
SkRect
;
class
SkRRect
;
struct
SkRSXform
;
class
SkTextBlob
;
class
SK_API
GrDrawContext
:
public
SkRefCnt
{
public
:
~
GrDrawContext
(
)
override
;
void
copySurface
(
GrSurface
*
src
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
;
void
drawText
(
const
GrClip
&
const
GrPaint
&
const
SkPaint
&
const
SkMatrix
&
viewMatrix
const
char
text
[
]
size_t
byteLength
SkScalar
x
SkScalar
y
const
SkIRect
&
clipBounds
)
;
void
drawPosText
(
const
GrClip
&
const
GrPaint
&
const
SkPaint
&
const
SkMatrix
&
viewMatrix
const
char
text
[
]
size_t
byteLength
const
SkScalar
pos
[
]
int
scalarsPerPosition
const
SkPoint
&
offset
const
SkIRect
&
clipBounds
)
;
void
drawTextBlob
(
const
GrClip
&
const
SkPaint
&
const
SkMatrix
&
viewMatrix
const
SkTextBlob
*
SkScalar
x
SkScalar
y
SkDrawFilter
*
const
SkIRect
&
clipBounds
)
;
void
drawPathsFromRange
(
const
GrPipelineBuilder
*
const
SkMatrix
&
viewMatrix
const
SkMatrix
&
localMatrix
GrColor
color
GrPathRange
*
range
GrPathRangeDraw
*
draw
int
fill
const
SkRect
&
bounds
)
;
void
discard
(
)
;
void
clear
(
const
SkIRect
*
rect
GrColor
color
bool
canIgnoreRect
)
;
void
drawPaint
(
const
GrClip
&
const
GrPaint
&
const
SkMatrix
&
viewMatrix
)
;
void
drawRect
(
const
GrClip
&
const
GrPaint
&
paint
const
SkMatrix
&
viewMatrix
const
SkRect
&
const
GrStrokeInfo
*
strokeInfo
=
NULL
)
;
void
fillRectToRect
(
const
GrClip
&
const
GrPaint
&
paint
const
SkMatrix
&
viewMatrix
const
SkRect
&
rectToDraw
const
SkRect
&
localRect
)
;
void
fillRectWithLocalMatrix
(
const
GrClip
&
clip
const
GrPaint
&
paint
const
SkMatrix
&
viewMatrix
const
SkRect
&
rect
const
SkMatrix
&
localMatrix
)
;
void
drawRRect
(
const
GrClip
&
const
GrPaint
&
const
SkMatrix
&
viewMatrix
const
SkRRect
&
rrect
const
GrStrokeInfo
&
)
;
void
drawDRRect
(
const
GrClip
&
const
GrPaint
&
const
SkMatrix
&
viewMatrix
const
SkRRect
&
outer
const
SkRRect
&
inner
)
;
void
drawPath
(
const
GrClip
&
const
GrPaint
&
const
SkMatrix
&
viewMatrix
const
SkPath
&
const
GrStrokeInfo
&
)
;
void
drawVertices
(
const
GrClip
&
const
GrPaint
&
paint
const
SkMatrix
&
viewMatrix
GrPrimitiveType
primitiveType
int
vertexCount
const
SkPoint
positions
[
]
const
SkPoint
texs
[
]
const
GrColor
colors
[
]
const
uint16_t
indices
[
]
int
indexCount
)
;
void
drawAtlas
(
const
GrClip
&
const
GrPaint
&
paint
const
SkMatrix
&
viewMatrix
int
spriteCount
const
SkRSXform
xform
[
]
const
SkRect
texRect
[
]
const
SkColor
colors
[
]
)
;
void
drawOval
(
const
GrClip
&
const
GrPaint
&
paint
const
SkMatrix
&
viewMatrix
const
SkRect
&
oval
const
GrStrokeInfo
&
strokeInfo
)
;
void
drawImageNine
(
const
GrClip
&
const
GrPaint
&
paint
const
SkMatrix
&
viewMatrix
int
imageWidth
int
imageHeight
const
SkIRect
&
center
const
SkRect
&
dst
)
;
void
drawBatch
(
const
GrClip
&
const
GrPaint
&
GrDrawBatch
*
)
;
int
width
(
)
const
{
return
fRenderTarget
-
>
width
(
)
;
}
int
height
(
)
const
{
return
fRenderTarget
-
>
height
(
)
;
}
int
numColorSamples
(
)
const
{
return
fRenderTarget
-
>
numColorSamples
(
)
;
}
private
:
friend
class
GrAtlasTextContext
;
friend
class
GrDrawingManager
;
SkDEBUGCODE
(
void
validate
(
)
const
;
)
GrDrawContext
(
GrDrawingManager
*
GrRenderTarget
*
const
SkSurfaceProps
*
surfaceProps
)
;
void
internalDrawPath
(
GrPipelineBuilder
*
const
SkMatrix
&
viewMatrix
GrColor
bool
useAA
const
SkPath
&
const
GrStrokeInfo
&
)
;
void
drawBatch
(
GrPipelineBuilder
*
pipelineBuilder
GrDrawBatch
*
batch
)
;
GrDrawTarget
*
getDrawTarget
(
)
;
GrDrawingManager
*
fDrawingManager
;
GrRenderTarget
*
fRenderTarget
;
GrDrawTarget
*
fDrawTarget
;
GrTextContext
*
fTextContext
;
SkSurfaceProps
fSurfaceProps
;
}
;
#
endif
