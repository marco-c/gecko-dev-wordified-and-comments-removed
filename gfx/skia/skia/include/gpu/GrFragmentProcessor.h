#
ifndef
GrFragmentProcessor_DEFINED
#
define
GrFragmentProcessor_DEFINED
#
include
"
GrProcessor
.
h
"
class
GrCoordTransform
;
class
GrGLSLCaps
;
class
GrGLSLFragmentProcessor
;
class
GrInvariantOutput
;
class
GrPipeline
;
class
GrProcessorKeyBuilder
;
class
GrFragmentProcessor
:
public
GrProcessor
{
public
:
static
sk_sp
<
GrFragmentProcessor
>
MulOutputByInputAlpha
(
sk_sp
<
GrFragmentProcessor
>
)
;
static
sk_sp
<
GrFragmentProcessor
>
MulOutputByInputUnpremulColor
(
sk_sp
<
GrFragmentProcessor
>
)
;
static
sk_sp
<
GrFragmentProcessor
>
OverrideInput
(
sk_sp
<
GrFragmentProcessor
>
GrColor4f
)
;
static
sk_sp
<
GrFragmentProcessor
>
PremulInput
(
sk_sp
<
GrFragmentProcessor
>
)
;
static
sk_sp
<
GrFragmentProcessor
>
RunInSeries
(
sk_sp
<
GrFragmentProcessor
>
*
int
cnt
)
;
GrFragmentProcessor
(
)
:
INHERITED
(
)
fUsesDistanceVectorField
(
false
)
fUsesLocalCoords
(
false
)
{
}
~
GrFragmentProcessor
(
)
override
;
GrGLSLFragmentProcessor
*
createGLSLInstance
(
)
const
;
void
getGLSLProcessorKey
(
const
GrGLSLCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
{
this
-
>
onGetGLSLProcessorKey
(
caps
b
)
;
for
(
int
i
=
0
;
i
<
fChildProcessors
.
count
(
)
;
+
+
i
)
{
fChildProcessors
[
i
]
-
>
getGLSLProcessorKey
(
caps
b
)
;
}
}
int
numCoordTransforms
(
)
const
{
return
fCoordTransforms
.
count
(
)
;
}
const
GrCoordTransform
&
coordTransform
(
int
index
)
const
{
return
*
fCoordTransforms
[
index
]
;
}
const
SkTArray
<
const
GrCoordTransform
*
true
>
&
coordTransforms
(
)
const
{
return
fCoordTransforms
;
}
int
numChildProcessors
(
)
const
{
return
fChildProcessors
.
count
(
)
;
}
const
GrFragmentProcessor
&
childProcessor
(
int
index
)
const
{
return
*
fChildProcessors
[
index
]
;
}
bool
usesLocalCoords
(
)
const
{
return
fUsesLocalCoords
;
}
bool
usesDistanceVectorField
(
)
const
{
return
fUsesDistanceVectorField
;
}
bool
isEqual
(
const
GrFragmentProcessor
&
that
)
const
;
void
computeInvariantOutput
(
GrInvariantOutput
*
inout
)
const
{
this
-
>
onComputeInvariantOutput
(
inout
)
;
}
class
Iter
:
public
SkNoncopyable
{
public
:
explicit
Iter
(
const
GrFragmentProcessor
*
fp
)
{
fFPStack
.
push_back
(
fp
)
;
}
explicit
Iter
(
const
GrPipeline
&
pipeline
)
;
const
GrFragmentProcessor
*
next
(
)
;
private
:
SkSTArray
<
4
const
GrFragmentProcessor
*
true
>
fFPStack
;
}
;
template
<
typename
T
typename
BASE
int
(
BASE
:
:
*
COUNT
)
(
)
const
const
T
&
(
BASE
:
:
*
GET
)
(
int
)
const
>
class
FPItemIter
:
public
SkNoncopyable
{
public
:
explicit
FPItemIter
(
const
GrFragmentProcessor
*
fp
)
:
fCurrFP
(
nullptr
)
fCTIdx
(
0
)
fFPIter
(
fp
)
{
fCurrFP
=
fFPIter
.
next
(
)
;
}
explicit
FPItemIter
(
const
GrPipeline
&
pipeline
)
:
fCurrFP
(
nullptr
)
fCTIdx
(
0
)
fFPIter
(
pipeline
)
{
fCurrFP
=
fFPIter
.
next
(
)
;
}
const
T
*
next
(
)
{
if
(
!
fCurrFP
)
{
return
nullptr
;
}
while
(
fCTIdx
=
=
(
fCurrFP
-
>
*
COUNT
)
(
)
)
{
fCTIdx
=
0
;
fCurrFP
=
fFPIter
.
next
(
)
;
if
(
!
fCurrFP
)
{
return
nullptr
;
}
}
return
&
(
fCurrFP
-
>
*
GET
)
(
fCTIdx
+
+
)
;
}
private
:
const
GrFragmentProcessor
*
fCurrFP
;
int
fCTIdx
;
GrFragmentProcessor
:
:
Iter
fFPIter
;
}
;
using
CoordTransformIter
=
FPItemIter
<
GrCoordTransform
GrFragmentProcessor
&
GrFragmentProcessor
:
:
numCoordTransforms
&
GrFragmentProcessor
:
:
coordTransform
>
;
using
TextureAccessIter
=
FPItemIter
<
GrTextureAccess
GrProcessor
&
GrProcessor
:
:
numTextures
&
GrProcessor
:
:
textureAccess
>
;
protected
:
void
addTextureAccess
(
const
GrTextureAccess
*
textureAccess
)
override
;
void
addBufferAccess
(
const
GrBufferAccess
*
)
override
;
void
addCoordTransform
(
const
GrCoordTransform
*
)
;
int
registerChildProcessor
(
sk_sp
<
GrFragmentProcessor
>
child
)
;
virtual
void
onComputeInvariantOutput
(
GrInvariantOutput
*
inout
)
const
=
0
;
bool
fUsesDistanceVectorField
;
private
:
void
notifyRefCntIsZero
(
)
const
final
;
virtual
GrGLSLFragmentProcessor
*
onCreateGLSLInstance
(
)
const
=
0
;
virtual
void
onGetGLSLProcessorKey
(
const
GrGLSLCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
=
0
;
virtual
bool
onIsEqual
(
const
GrFragmentProcessor
&
)
const
=
0
;
bool
hasSameTransforms
(
const
GrFragmentProcessor
&
)
const
;
bool
fUsesLocalCoords
;
SkSTArray
<
4
const
GrCoordTransform
*
true
>
fCoordTransforms
;
SkSTArray
<
1
GrFragmentProcessor
*
true
>
fChildProcessors
;
typedef
GrProcessor
INHERITED
;
}
;
#
endif
