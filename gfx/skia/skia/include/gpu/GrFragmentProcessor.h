#
ifndef
GrFragmentProcessor_DEFINED
#
define
GrFragmentProcessor_DEFINED
#
include
"
GrProcessor
.
h
"
class
GrCoordTransform
;
class
GrGLSLCaps
;
class
GrGLSLFragmentProcessor
;
class
GrInvariantOutput
;
class
GrProcessorKeyBuilder
;
class
GrFragmentProcessor
:
public
GrProcessor
{
public
:
static
const
GrFragmentProcessor
*
MulOutputByInputAlpha
(
const
GrFragmentProcessor
*
)
;
static
const
GrFragmentProcessor
*
MulOutputByInputUnpremulColor
(
const
GrFragmentProcessor
*
)
;
static
const
GrFragmentProcessor
*
OverrideInput
(
const
GrFragmentProcessor
*
GrColor
)
;
static
const
GrFragmentProcessor
*
RunInSeries
(
const
GrFragmentProcessor
*
[
]
int
cnt
)
;
GrFragmentProcessor
(
)
:
INHERITED
(
)
fUsesLocalCoords
(
false
)
fNumTexturesExclChildren
(
0
)
fNumTransformsExclChildren
(
0
)
{
}
~
GrFragmentProcessor
(
)
override
;
GrGLSLFragmentProcessor
*
createGLSLInstance
(
)
const
;
void
getGLSLProcessorKey
(
const
GrGLSLCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
{
this
-
>
onGetGLSLProcessorKey
(
caps
b
)
;
for
(
int
i
=
0
;
i
<
fChildProcessors
.
count
(
)
;
+
+
i
)
{
fChildProcessors
[
i
]
-
>
getGLSLProcessorKey
(
caps
b
)
;
}
}
int
numTexturesExclChildren
(
)
const
{
return
fNumTexturesExclChildren
;
}
int
numTransformsExclChildren
(
)
const
{
return
fNumTransformsExclChildren
;
}
int
numTransforms
(
)
const
{
return
fCoordTransforms
.
count
(
)
;
}
const
GrCoordTransform
&
coordTransform
(
int
index
)
const
{
return
*
fCoordTransforms
[
index
]
;
}
const
SkTArray
<
const
GrCoordTransform
*
true
>
&
coordTransforms
(
)
const
{
return
fCoordTransforms
;
}
void
gatherCoordTransforms
(
SkTArray
<
const
GrCoordTransform
*
true
>
*
outTransforms
)
const
{
if
(
!
fCoordTransforms
.
empty
(
)
)
{
outTransforms
-
>
push_back_n
(
fCoordTransforms
.
count
(
)
fCoordTransforms
.
begin
(
)
)
;
}
}
int
numChildProcessors
(
)
const
{
return
fChildProcessors
.
count
(
)
;
}
const
GrFragmentProcessor
&
childProcessor
(
int
index
)
const
{
return
*
fChildProcessors
[
index
]
;
}
bool
usesLocalCoords
(
)
const
{
return
fUsesLocalCoords
;
}
bool
isEqual
(
const
GrFragmentProcessor
&
that
bool
ignoreCoordTransforms
)
const
;
void
computeInvariantOutput
(
GrInvariantOutput
*
inout
)
const
{
this
-
>
onComputeInvariantOutput
(
inout
)
;
}
protected
:
void
addTextureAccess
(
const
GrTextureAccess
*
textureAccess
)
override
;
void
addCoordTransform
(
const
GrCoordTransform
*
)
;
int
registerChildProcessor
(
const
GrFragmentProcessor
*
child
)
;
virtual
void
onComputeInvariantOutput
(
GrInvariantOutput
*
inout
)
const
=
0
;
private
:
void
notifyRefCntIsZero
(
)
const
final
;
virtual
GrGLSLFragmentProcessor
*
onCreateGLSLInstance
(
)
const
=
0
;
virtual
void
onGetGLSLProcessorKey
(
const
GrGLSLCaps
&
caps
GrProcessorKeyBuilder
*
b
)
const
=
0
;
virtual
bool
onIsEqual
(
const
GrFragmentProcessor
&
)
const
=
0
;
bool
hasSameTransforms
(
const
GrFragmentProcessor
&
)
const
;
bool
fUsesLocalCoords
;
SkSTArray
<
4
const
GrCoordTransform
*
true
>
fCoordTransforms
;
int
fNumTexturesExclChildren
;
int
fNumTransformsExclChildren
;
SkSTArray
<
1
const
GrFragmentProcessor
*
true
>
fChildProcessors
;
typedef
GrProcessor
INHERITED
;
}
;
#
endif
