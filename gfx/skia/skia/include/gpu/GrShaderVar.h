#
ifndef
GrShaderVar_DEFINED
#
define
GrShaderVar_DEFINED
#
include
"
SkString
.
h
"
#
include
"
GrTypesPriv
.
h
"
class
GrShaderCaps
;
#
define
USE_UNIFORM_FLOAT_ARRAYS
true
class
GrShaderVar
{
public
:
enum
TypeModifier
{
kNone_TypeModifier
kOut_TypeModifier
kIn_TypeModifier
kInOut_TypeModifier
kUniform_TypeModifier
}
;
enum
{
kNonArray
=
0
kUnsizedArray
=
-
1
}
;
GrShaderVar
(
)
:
fType
(
kFloat_GrSLType
)
fTypeModifier
(
kNone_TypeModifier
)
fCount
(
kNonArray
)
fPrecision
(
kDefault_GrSLPrecision
)
fUseUniformFloatArrays
(
USE_UNIFORM_FLOAT_ARRAYS
)
{
}
GrShaderVar
(
const
SkString
&
name
GrSLType
type
int
arrayCount
=
kNonArray
GrSLPrecision
precision
=
kDefault_GrSLPrecision
)
:
fType
(
type
)
fTypeModifier
(
kNone_TypeModifier
)
fCount
(
arrayCount
)
fPrecision
(
precision
)
fUseUniformFloatArrays
(
USE_UNIFORM_FLOAT_ARRAYS
)
fName
(
name
)
{
SkASSERT
(
kVoid_GrSLType
!
=
type
)
;
fUseUniformFloatArrays
=
USE_UNIFORM_FLOAT_ARRAYS
;
}
GrShaderVar
(
const
char
*
name
GrSLType
type
int
arrayCount
=
kNonArray
GrSLPrecision
precision
=
kDefault_GrSLPrecision
)
:
fType
(
type
)
fTypeModifier
(
kNone_TypeModifier
)
fCount
(
arrayCount
)
fPrecision
(
precision
)
fUseUniformFloatArrays
(
USE_UNIFORM_FLOAT_ARRAYS
)
fName
(
name
)
{
SkASSERT
(
kVoid_GrSLType
!
=
type
)
;
fUseUniformFloatArrays
=
USE_UNIFORM_FLOAT_ARRAYS
;
}
GrShaderVar
(
const
char
*
name
GrSLType
type
TypeModifier
typeModifier
GrSLPrecision
precision
=
kDefault_GrSLPrecision
)
:
fType
(
type
)
fTypeModifier
(
typeModifier
)
fCount
(
kNonArray
)
fPrecision
(
precision
)
fUseUniformFloatArrays
(
USE_UNIFORM_FLOAT_ARRAYS
)
fName
(
name
)
{
SkASSERT
(
kVoid_GrSLType
!
=
type
)
;
}
GrShaderVar
(
const
char
*
name
GrSLType
type
TypeModifier
typeModifier
int
arrayCount
GrSLPrecision
precision
=
kDefault_GrSLPrecision
)
:
fType
(
type
)
fTypeModifier
(
typeModifier
)
fCount
(
arrayCount
)
fPrecision
(
precision
)
fUseUniformFloatArrays
(
USE_UNIFORM_FLOAT_ARRAYS
)
fName
(
name
)
{
SkASSERT
(
kVoid_GrSLType
!
=
type
)
;
}
GrShaderVar
(
const
GrShaderVar
&
that
)
:
fType
(
that
.
fType
)
fTypeModifier
(
that
.
fTypeModifier
)
fCount
(
that
.
fCount
)
fPrecision
(
that
.
fPrecision
)
fUseUniformFloatArrays
(
USE_UNIFORM_FLOAT_ARRAYS
)
fName
(
that
.
fName
)
fLayoutQualifier
(
that
.
fLayoutQualifier
)
fExtraModifiers
(
that
.
fExtraModifiers
)
{
SkASSERT
(
kVoid_GrSLType
!
=
that
.
getType
(
)
)
;
}
void
set
(
GrSLType
type
const
SkString
&
name
TypeModifier
typeModifier
=
kNone_TypeModifier
GrSLPrecision
precision
=
kDefault_GrSLPrecision
const
char
*
layoutQualifier
=
nullptr
const
char
*
extraModifiers
=
nullptr
bool
useUniformFloatArrays
=
USE_UNIFORM_FLOAT_ARRAYS
)
{
SkASSERT
(
kVoid_GrSLType
!
=
type
)
;
SkASSERT
(
kDefault_GrSLPrecision
=
=
precision
|
|
GrSLTypeAcceptsPrecision
(
type
)
)
;
fType
=
type
;
fTypeModifier
=
typeModifier
;
fName
=
name
;
fCount
=
kNonArray
;
fPrecision
=
precision
;
fLayoutQualifier
=
layoutQualifier
;
if
(
extraModifiers
)
{
fExtraModifiers
.
printf
(
"
%
s
"
extraModifiers
)
;
}
fUseUniformFloatArrays
=
useUniformFloatArrays
;
}
void
set
(
GrSLType
type
const
char
*
name
TypeModifier
typeModifier
=
kNone_TypeModifier
GrSLPrecision
precision
=
kDefault_GrSLPrecision
const
char
*
layoutQualifier
=
nullptr
const
char
*
extraModifiers
=
nullptr
bool
useUniformFloatArrays
=
USE_UNIFORM_FLOAT_ARRAYS
)
{
SkASSERT
(
kVoid_GrSLType
!
=
type
)
;
SkASSERT
(
kDefault_GrSLPrecision
=
=
precision
|
|
GrSLTypeAcceptsPrecision
(
type
)
)
;
fType
=
type
;
fTypeModifier
=
typeModifier
;
fName
=
name
;
fCount
=
kNonArray
;
fPrecision
=
precision
;
fLayoutQualifier
=
layoutQualifier
;
if
(
extraModifiers
)
{
fExtraModifiers
.
printf
(
"
%
s
"
extraModifiers
)
;
}
fUseUniformFloatArrays
=
useUniformFloatArrays
;
}
void
set
(
GrSLType
type
const
SkString
&
name
int
count
TypeModifier
typeModifier
GrSLPrecision
precision
=
kDefault_GrSLPrecision
const
char
*
layoutQualifier
=
nullptr
const
char
*
extraModifiers
=
nullptr
bool
useUniformFloatArrays
=
USE_UNIFORM_FLOAT_ARRAYS
)
{
SkASSERT
(
kVoid_GrSLType
!
=
type
)
;
SkASSERT
(
kDefault_GrSLPrecision
=
=
precision
|
|
GrSLTypeAcceptsPrecision
(
type
)
)
;
fType
=
type
;
fTypeModifier
=
typeModifier
;
fName
=
name
;
fCount
=
count
;
fPrecision
=
precision
;
fLayoutQualifier
=
layoutQualifier
;
if
(
extraModifiers
)
{
fExtraModifiers
.
printf
(
"
%
s
"
extraModifiers
)
;
}
fUseUniformFloatArrays
=
useUniformFloatArrays
;
}
void
set
(
GrSLType
type
const
char
*
name
int
count
TypeModifier
typeModifier
GrSLPrecision
precision
=
kDefault_GrSLPrecision
const
char
*
layoutQualifier
=
nullptr
const
char
*
extraModifiers
=
nullptr
bool
useUniformFloatArrays
=
USE_UNIFORM_FLOAT_ARRAYS
)
{
SkASSERT
(
kVoid_GrSLType
!
=
type
)
;
SkASSERT
(
kDefault_GrSLPrecision
=
=
precision
|
|
GrSLTypeAcceptsPrecision
(
type
)
)
;
fType
=
type
;
fTypeModifier
=
typeModifier
;
fName
=
name
;
fCount
=
count
;
fPrecision
=
precision
;
fLayoutQualifier
=
layoutQualifier
;
if
(
extraModifiers
)
{
fExtraModifiers
.
printf
(
"
%
s
"
extraModifiers
)
;
}
fUseUniformFloatArrays
=
useUniformFloatArrays
;
}
bool
isArray
(
)
const
{
return
kNonArray
!
=
fCount
;
}
bool
isUnsizedArray
(
)
const
{
return
kUnsizedArray
=
=
fCount
;
}
int
getArrayCount
(
)
const
{
return
fCount
;
}
void
setArrayCount
(
int
count
)
{
fCount
=
count
;
}
void
setNonArray
(
)
{
fCount
=
kNonArray
;
}
void
setUnsizedArray
(
)
{
fCount
=
kUnsizedArray
;
}
SkString
*
accessName
(
)
{
return
&
fName
;
}
void
setName
(
const
SkString
&
n
)
{
fName
=
n
;
}
void
setName
(
const
char
*
n
)
{
fName
=
n
;
}
const
SkString
&
getName
(
)
const
{
return
fName
;
}
const
char
*
c_str
(
)
const
{
return
this
-
>
getName
(
)
.
c_str
(
)
;
}
GrSLType
getType
(
)
const
{
return
fType
;
}
void
setType
(
GrSLType
type
)
{
fType
=
type
;
}
TypeModifier
getTypeModifier
(
)
const
{
return
fTypeModifier
;
}
void
setTypeModifier
(
TypeModifier
type
)
{
fTypeModifier
=
type
;
}
GrSLPrecision
getPrecision
(
)
const
{
return
fPrecision
;
}
void
setPrecision
(
GrSLPrecision
p
)
{
fPrecision
=
p
;
}
void
addLayoutQualifier
(
const
char
*
layoutQualifier
)
{
if
(
!
layoutQualifier
|
|
!
strlen
(
layoutQualifier
)
)
{
return
;
}
if
(
fLayoutQualifier
.
isEmpty
(
)
)
{
fLayoutQualifier
=
layoutQualifier
;
}
else
{
fLayoutQualifier
.
appendf
(
"
%
s
"
layoutQualifier
)
;
}
}
void
setImageStorageFormat
(
GrImageStorageFormat
format
)
;
void
setMemoryModel
(
GrSLMemoryModel
)
;
void
setRestrict
(
GrSLRestrict
)
;
void
setIOType
(
GrIOType
)
;
void
addModifier
(
const
char
*
modifier
)
{
if
(
modifier
)
{
fExtraModifiers
.
appendf
(
"
%
s
"
modifier
)
;
}
}
void
appendDecl
(
const
GrShaderCaps
*
SkString
*
out
)
const
;
void
appendArrayAccess
(
int
index
SkString
*
out
)
const
{
out
-
>
appendf
(
"
%
s
[
%
d
]
%
s
"
this
-
>
getName
(
)
.
c_str
(
)
index
fUseUniformFloatArrays
?
"
"
:
"
.
x
"
)
;
}
void
appendArrayAccess
(
const
char
*
indexName
SkString
*
out
)
const
{
out
-
>
appendf
(
"
%
s
[
%
s
]
%
s
"
this
-
>
getName
(
)
.
c_str
(
)
indexName
fUseUniformFloatArrays
?
"
"
:
"
.
x
"
)
;
}
private
:
GrSLType
fType
;
TypeModifier
fTypeModifier
;
int
fCount
;
GrSLPrecision
fPrecision
;
bool
fUseUniformFloatArrays
;
SkString
fName
;
SkString
fLayoutQualifier
;
SkString
fExtraModifiers
;
}
;
#
endif
