#
ifndef
GrProgramElement_DEFINED
#
define
GrProgramElement_DEFINED
#
include
"
SkRefCnt
.
h
"
#
include
"
SkTArray
.
h
"
class
GrGpuResourceRef
;
class
GrProgramElement
:
public
SkNoncopyable
{
public
:
virtual
~
GrProgramElement
(
)
{
SkASSERT
(
(
0
=
=
fRefCnt
|
|
1
=
=
fRefCnt
)
&
&
0
=
=
fPendingExecutions
)
;
SkDEBUGCODE
(
fRefCnt
=
fPendingExecutions
=
-
10
;
)
}
void
ref
(
)
const
{
this
-
>
validate
(
)
;
SkASSERT
(
fRefCnt
>
0
)
;
+
+
fRefCnt
;
this
-
>
validate
(
)
;
}
void
unref
(
)
const
{
this
-
>
validate
(
)
;
-
-
fRefCnt
;
if
(
0
=
=
fRefCnt
)
{
this
-
>
notifyRefCntIsZero
(
)
;
if
(
0
=
=
fPendingExecutions
)
{
delete
this
;
return
;
}
else
{
this
-
>
removeRefs
(
)
;
}
}
this
-
>
validate
(
)
;
}
uint32_t
getUniqueID
(
)
const
{
return
fUniqueID
;
}
void
validate
(
)
const
{
#
ifdef
SK_DEBUG
SkASSERT
(
fRefCnt
>
=
0
)
;
SkASSERT
(
fPendingExecutions
>
=
0
)
;
SkASSERT
(
fRefCnt
+
fPendingExecutions
>
0
)
;
#
endif
}
protected
:
GrProgramElement
(
)
:
fRefCnt
(
1
)
fPendingExecutions
(
0
)
fUniqueID
(
CreateUniqueID
(
)
)
{
}
void
addGpuResource
(
const
GrGpuResourceRef
*
res
)
{
fGpuResources
.
push_back
(
res
)
;
}
void
addPendingExecution
(
)
const
{
this
-
>
validate
(
)
;
SkASSERT
(
fRefCnt
>
0
)
;
if
(
0
=
=
fPendingExecutions
)
{
this
-
>
addPendingIOs
(
)
;
}
+
+
fPendingExecutions
;
this
-
>
validate
(
)
;
}
void
completedExecution
(
)
const
{
this
-
>
validate
(
)
;
-
-
fPendingExecutions
;
if
(
0
=
=
fPendingExecutions
)
{
if
(
0
=
=
fRefCnt
)
{
delete
this
;
return
;
}
else
{
this
-
>
pendingIOComplete
(
)
;
}
}
this
-
>
validate
(
)
;
}
private
:
virtual
void
notifyRefCntIsZero
(
)
const
=
0
;
static
uint32_t
CreateUniqueID
(
)
;
void
removeRefs
(
)
const
;
void
addPendingIOs
(
)
const
;
void
pendingIOComplete
(
)
const
;
mutable
int32_t
fRefCnt
;
mutable
int32_t
fPendingExecutions
;
uint32_t
fUniqueID
;
SkSTArray
<
4
const
GrGpuResourceRef
*
true
>
fGpuResources
;
template
<
typename
T
>
friend
class
GrPendingProgramElement
;
typedef
SkNoncopyable
INHERITED
;
}
;
#
endif
