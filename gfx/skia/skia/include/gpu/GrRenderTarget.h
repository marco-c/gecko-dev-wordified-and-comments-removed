#
ifndef
GrRenderTarget_DEFINED
#
define
GrRenderTarget_DEFINED
#
include
"
GrSurface
.
h
"
#
include
"
SkRect
.
h
"
class
GrCaps
;
class
GrRenderTargetOpList
;
class
GrRenderTargetPriv
;
class
GrStencilAttachment
;
class
GrBackendRenderTarget
;
class
GrRenderTarget
:
virtual
public
GrSurface
{
public
:
virtual
bool
alwaysClearStencil
(
)
const
{
return
false
;
}
GrRenderTarget
*
asRenderTarget
(
)
override
{
return
this
;
}
const
GrRenderTarget
*
asRenderTarget
(
)
const
override
{
return
this
;
}
bool
isStencilBufferMultisampled
(
)
const
{
return
fSampleCnt
>
1
;
}
GrFSAAType
fsaaType
(
)
const
{
SkASSERT
(
fSampleCnt
>
=
1
)
;
if
(
fSampleCnt
<
=
1
)
{
SkASSERT
(
!
(
fFlags
&
GrRenderTargetFlags
:
:
kMixedSampled
)
)
;
return
GrFSAAType
:
:
kNone
;
}
return
(
fFlags
&
GrRenderTargetFlags
:
:
kMixedSampled
)
?
GrFSAAType
:
:
kMixedSamples
:
GrFSAAType
:
:
kUnifiedMSAA
;
}
int
numStencilSamples
(
)
const
{
return
fSampleCnt
;
}
int
numColorSamples
(
)
const
{
return
GrFSAAType
:
:
kMixedSamples
=
=
this
-
>
fsaaType
(
)
?
1
:
fSampleCnt
;
}
void
flagAsNeedingResolve
(
const
SkIRect
*
rect
=
nullptr
)
;
void
overrideResolveRect
(
const
SkIRect
rect
)
;
void
flagAsResolved
(
)
;
bool
needsResolve
(
)
const
{
return
!
fResolveRect
.
isEmpty
(
)
;
}
const
SkIRect
&
getResolveRect
(
)
const
{
return
fResolveRect
;
}
enum
ResolveType
{
kCanResolve_ResolveType
kAutoResolves_ResolveType
kCantResolve_ResolveType
}
;
virtual
ResolveType
getResolveType
(
)
const
=
0
;
virtual
GrBackendObject
getRenderTargetHandle
(
)
const
=
0
;
virtual
GrBackendRenderTarget
getBackendRenderTarget
(
)
const
=
0
;
virtual
bool
canAttemptStencilAttachment
(
)
const
=
0
;
GrRenderTargetPriv
renderTargetPriv
(
)
;
const
GrRenderTargetPriv
renderTargetPriv
(
)
const
;
protected
:
GrRenderTarget
(
GrGpu
*
const
GrSurfaceDesc
&
GrRenderTargetFlags
=
GrRenderTargetFlags
:
:
kNone
GrStencilAttachment
*
=
nullptr
)
;
void
onAbandon
(
)
override
;
void
onRelease
(
)
override
;
private
:
virtual
bool
completeStencilAttachment
(
)
=
0
;
friend
class
GrRenderTargetPriv
;
int
fSampleCnt
;
GrStencilAttachment
*
fStencilAttachment
;
GrRenderTargetFlags
fFlags
;
SkIRect
fResolveRect
;
typedef
GrSurface
INHERITED
;
}
;
#
endif
