#
ifndef
GrRenderTarget_DEFINED
#
define
GrRenderTarget_DEFINED
#
include
"
GrSurface
.
h
"
#
include
"
SkRect
.
h
"
class
GrCaps
;
class
GrDrawTarget
;
class
GrStencilAttachment
;
class
GrRenderTargetPriv
;
class
GrRenderTarget
:
virtual
public
GrSurface
{
public
:
GrRenderTarget
*
asRenderTarget
(
)
override
{
return
this
;
}
const
GrRenderTarget
*
asRenderTarget
(
)
const
override
{
return
this
;
}
bool
isStencilBufferMultisampled
(
)
const
{
return
fDesc
.
fSampleCnt
>
0
;
}
bool
isMixedSampled
(
)
const
{
return
fFlags
&
Flags
:
:
kMixedSampled
;
}
bool
isUnifiedMultisampled
(
)
const
{
return
fDesc
.
fSampleCnt
>
0
&
&
!
this
-
>
isMixedSampled
(
)
;
}
int
numStencilSamples
(
)
const
{
return
fDesc
.
fSampleCnt
;
}
int
numColorSamples
(
)
const
{
return
this
-
>
isMixedSampled
(
)
?
0
:
fDesc
.
fSampleCnt
;
}
void
flagAsNeedingResolve
(
const
SkIRect
*
rect
=
NULL
)
;
void
overrideResolveRect
(
const
SkIRect
rect
)
;
void
flagAsResolved
(
)
{
fResolveRect
.
setLargestInverted
(
)
;
}
bool
needsResolve
(
)
const
{
return
!
fResolveRect
.
isEmpty
(
)
;
}
const
SkIRect
&
getResolveRect
(
)
const
{
return
fResolveRect
;
}
void
discard
(
)
;
enum
ResolveType
{
kCanResolve_ResolveType
kAutoResolves_ResolveType
kCantResolve_ResolveType
}
;
virtual
ResolveType
getResolveType
(
)
const
=
0
;
virtual
GrBackendObject
getRenderTargetHandle
(
)
const
=
0
;
virtual
bool
canAttemptStencilAttachment
(
)
const
=
0
;
GrRenderTargetPriv
renderTargetPriv
(
)
;
const
GrRenderTargetPriv
renderTargetPriv
(
)
const
;
void
setLastDrawTarget
(
GrDrawTarget
*
dt
)
;
GrDrawTarget
*
getLastDrawTarget
(
)
{
return
fLastDrawTarget
;
}
protected
:
enum
class
Flags
{
kNone
=
0
kMixedSampled
=
1
<
<
0
kWindowRectsSupport
=
1
<
<
1
}
;
GR_DECL_BITFIELD_CLASS_OPS_FRIENDS
(
Flags
)
;
GrRenderTarget
(
GrGpu
*
const
GrSurfaceDesc
&
Flags
=
Flags
:
:
kNone
GrStencilAttachment
*
=
nullptr
)
;
~
GrRenderTarget
(
)
override
;
void
onAbandon
(
)
override
;
void
onRelease
(
)
override
;
private
:
virtual
bool
completeStencilAttachment
(
)
=
0
;
friend
class
GrRenderTargetPriv
;
GrStencilAttachment
*
fStencilAttachment
;
uint8_t
fMultisampleSpecsID
;
Flags
fFlags
;
SkIRect
fResolveRect
;
GrDrawTarget
*
fLastDrawTarget
;
typedef
GrSurface
INHERITED
;
}
;
GR_MAKE_BITFIELD_CLASS_OPS
(
GrRenderTarget
:
:
Flags
)
;
#
endif
