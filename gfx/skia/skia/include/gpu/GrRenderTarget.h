#
ifndef
GrRenderTarget_DEFINED
#
define
GrRenderTarget_DEFINED
#
include
"
GrSurface
.
h
"
#
include
"
SkRect
.
h
"
class
GrDrawTarget
;
class
GrStencilAttachment
;
class
GrRenderTargetPriv
;
class
GrRenderTarget
:
virtual
public
GrSurface
{
public
:
GrRenderTarget
*
asRenderTarget
(
)
override
{
return
this
;
}
const
GrRenderTarget
*
asRenderTarget
(
)
const
override
{
return
this
;
}
enum
SampleConfig
{
kUnified_SampleConfig
=
0
kStencil_SampleConfig
=
1
}
;
bool
isUnifiedMultisampled
(
)
const
{
if
(
fSampleConfig
!
=
kUnified_SampleConfig
)
{
return
false
;
}
return
0
!
=
fDesc
.
fSampleCnt
;
}
bool
isStencilBufferMultisampled
(
)
const
{
return
0
!
=
fDesc
.
fSampleCnt
;
}
int
numColorSamples
(
)
const
{
if
(
fSampleConfig
=
=
kUnified_SampleConfig
)
{
return
fDesc
.
fSampleCnt
;
}
return
0
;
}
int
numStencilSamples
(
)
const
{
return
fDesc
.
fSampleCnt
;
}
bool
hasMixedSamples
(
)
const
{
SkASSERT
(
kStencil_SampleConfig
!
=
fSampleConfig
|
|
this
-
>
isStencilBufferMultisampled
(
)
)
;
return
kStencil_SampleConfig
=
=
fSampleConfig
;
}
void
flagAsNeedingResolve
(
const
SkIRect
*
rect
=
NULL
)
;
void
overrideResolveRect
(
const
SkIRect
rect
)
;
void
flagAsResolved
(
)
{
fResolveRect
.
setLargestInverted
(
)
;
}
bool
needsResolve
(
)
const
{
return
!
fResolveRect
.
isEmpty
(
)
;
}
const
SkIRect
&
getResolveRect
(
)
const
{
return
fResolveRect
;
}
void
discard
(
)
;
enum
ResolveType
{
kCanResolve_ResolveType
kAutoResolves_ResolveType
kCantResolve_ResolveType
}
;
virtual
ResolveType
getResolveType
(
)
const
=
0
;
virtual
GrBackendObject
getRenderTargetHandle
(
)
const
=
0
;
virtual
bool
canAttemptStencilAttachment
(
)
const
=
0
;
GrRenderTargetPriv
renderTargetPriv
(
)
;
const
GrRenderTargetPriv
renderTargetPriv
(
)
const
;
void
setLastDrawTarget
(
GrDrawTarget
*
dt
)
;
GrDrawTarget
*
getLastDrawTarget
(
)
{
return
fLastDrawTarget
;
}
protected
:
GrRenderTarget
(
GrGpu
*
gpu
LifeCycle
lifeCycle
const
GrSurfaceDesc
&
desc
SampleConfig
sampleConfig
GrStencilAttachment
*
stencil
=
nullptr
)
:
INHERITED
(
gpu
lifeCycle
desc
)
fStencilAttachment
(
stencil
)
fSampleConfig
(
sampleConfig
)
fLastDrawTarget
(
nullptr
)
{
fResolveRect
.
setLargestInverted
(
)
;
}
~
GrRenderTarget
(
)
override
;
void
onAbandon
(
)
override
;
void
onRelease
(
)
override
;
private
:
virtual
bool
completeStencilAttachment
(
)
=
0
;
friend
class
GrRenderTargetPriv
;
GrStencilAttachment
*
fStencilAttachment
;
SampleConfig
fSampleConfig
;
SkIRect
fResolveRect
;
GrDrawTarget
*
fLastDrawTarget
;
typedef
GrSurface
INHERITED
;
}
;
#
endif
