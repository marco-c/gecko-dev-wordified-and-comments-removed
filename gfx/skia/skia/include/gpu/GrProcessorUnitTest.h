#
ifndef
GrProcessorUnitTest_DEFINED
#
define
GrProcessorUnitTest_DEFINED
#
include
"
GrTestUtils
.
h
"
#
include
"
SkTArray
.
h
"
#
include
"
SkTypes
.
h
"
class
SkMatrix
;
class
GrCaps
;
class
GrContext
;
class
GrRenderTarget
;
struct
GrProcessorTestData
;
namespace
GrProcessorUnitTest
{
enum
{
kSkiaPMTextureIdx
=
0
kAlphaTextureIdx
=
1
}
;
const
GrFragmentProcessor
*
CreateChildFP
(
GrProcessorTestData
*
)
;
}
struct
GrProcessorTestData
{
GrProcessorTestData
(
SkRandom
*
random
GrContext
*
context
const
GrCaps
*
caps
const
GrRenderTarget
*
rt
GrTexture
*
textures
[
2
]
)
:
fRandom
(
random
)
fContext
(
context
)
fCaps
(
caps
)
fRenderTarget
(
rt
)
{
fTextures
[
0
]
=
textures
[
0
]
;
fTextures
[
1
]
=
textures
[
1
]
;
}
SkRandom
*
fRandom
;
GrContext
*
fContext
;
const
GrCaps
*
fCaps
;
const
GrRenderTarget
*
fRenderTarget
;
GrTexture
*
fTextures
[
2
]
;
}
;
#
if
SK_ALLOW_STATIC_GLOBAL_INITIALIZERS
class
GrProcessor
;
class
GrTexture
;
template
<
class
Processor
>
class
GrProcessorTestFactory
:
SkNoncopyable
{
public
:
typedef
const
Processor
*
(
*
CreateProc
)
(
GrProcessorTestData
*
)
;
GrProcessorTestFactory
(
CreateProc
createProc
)
{
fCreateProc
=
createProc
;
GetFactories
(
)
-
>
push_back
(
this
)
;
}
static
const
Processor
*
Create
(
GrProcessorTestData
*
data
)
{
VerifyFactoryCount
(
)
;
SkASSERT
(
GetFactories
(
)
-
>
count
(
)
)
;
uint32_t
idx
=
data
-
>
fRandom
-
>
nextRangeU
(
0
GetFactories
(
)
-
>
count
(
)
-
1
)
;
return
CreateIdx
(
idx
data
)
;
}
static
int
Count
(
)
{
return
GetFactories
(
)
-
>
count
(
)
;
}
static
const
Processor
*
CreateIdx
(
int
idx
GrProcessorTestData
*
data
)
{
GrProcessorTestFactory
<
Processor
>
*
factory
=
(
*
GetFactories
(
)
)
[
idx
]
;
return
factory
-
>
fCreateProc
(
data
)
;
}
static
void
VerifyFactoryCount
(
)
;
private
:
CreateProc
fCreateProc
;
static
SkTArray
<
GrProcessorTestFactory
<
Processor
>
*
true
>
*
GetFactories
(
)
;
}
;
#
define
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
\
static
GrProcessorTestFactory
<
GrGeometryProcessor
>
gTestFactory
SK_UNUSED
;
\
static
const
GrGeometryProcessor
*
TestCreate
(
GrProcessorTestData
*
)
#
define
GR_DECLARE_FRAGMENT_PROCESSOR_TEST
\
static
GrProcessorTestFactory
<
GrFragmentProcessor
>
gTestFactory
SK_UNUSED
;
\
static
const
GrFragmentProcessor
*
TestCreate
(
GrProcessorTestData
*
)
#
define
GR_DECLARE_XP_FACTORY_TEST
\
static
GrProcessorTestFactory
<
GrXPFactory
>
gTestFactory
SK_UNUSED
;
\
static
const
GrXPFactory
*
TestCreate
(
GrProcessorTestData
*
)
#
define
GR_DEFINE_FRAGMENT_PROCESSOR_TEST
(
Effect
)
\
GrProcessorTestFactory
<
GrFragmentProcessor
>
Effect
:
:
gTestFactory
(
Effect
:
:
TestCreate
)
#
define
GR_DEFINE_XP_FACTORY_TEST
(
Factory
)
\
GrProcessorTestFactory
<
GrXPFactory
>
Factory
:
:
gTestFactory
(
Factory
:
:
TestCreate
)
#
define
GR_DEFINE_GEOMETRY_PROCESSOR_TEST
(
Effect
)
\
GrProcessorTestFactory
<
GrGeometryProcessor
>
Effect
:
:
gTestFactory
(
Effect
:
:
TestCreate
)
#
else
#
define
GR_DECLARE_FRAGMENT_PROCESSOR_TEST
\
static
const
GrFragmentProcessor
*
TestCreate
(
GrProcessorTestData
*
)
#
define
GR_DEFINE_FRAGMENT_PROCESSOR_TEST
(
X
)
#
define
GR_DECLARE_XP_FACTORY_TEST
\
static
const
GrXPFactory
*
TestCreate
(
GrProcessorTestData
*
)
#
define
GR_DEFINE_XP_FACTORY_TEST
(
X
)
#
define
GR_DECLARE_GEOMETRY_PROCESSOR_TEST
\
static
const
GrGeometryProcessor
*
TestCreate
(
GrProcessorTestData
*
)
#
define
GR_DEFINE_GEOMETRY_PROCESSOR_TEST
(
X
)
#
endif
#
endif
