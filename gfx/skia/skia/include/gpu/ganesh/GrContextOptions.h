#
ifndef
GrContextOptions_DEFINED
#
define
GrContextOptions_DEFINED
#
include
"
include
/
core
/
SkData
.
h
"
#
include
"
include
/
core
/
SkString
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
gpu
/
ShaderErrorHandler
.
h
"
#
include
"
include
/
gpu
/
ganesh
/
GrDriverBugWorkarounds
.
h
"
#
include
"
include
/
gpu
/
ganesh
/
GrTypes
.
h
"
#
include
"
include
/
private
/
gpu
/
ganesh
/
GrTypesPriv
.
h
"
#
include
<
optional
>
#
include
<
vector
>
class
SkExecutor
;
struct
SK_API
GrContextOptions
{
enum
class
Enable
{
kNo
kYes
kDefault
}
;
enum
class
ShaderCacheStrategy
{
kSkSL
kBackendSource
kBackendBinary
}
;
class
SK_API
PersistentCache
{
public
:
virtual
~
PersistentCache
(
)
=
default
;
virtual
sk_sp
<
SkData
>
load
(
const
SkData
&
key
)
=
0
;
virtual
void
store
(
const
SkData
&
const
SkData
&
)
{
SkASSERT
(
false
)
;
}
virtual
void
store
(
const
SkData
&
key
const
SkData
&
data
const
SkString
&
)
{
this
-
>
store
(
key
data
)
;
}
protected
:
PersistentCache
(
)
=
default
;
PersistentCache
(
const
PersistentCache
&
)
=
delete
;
PersistentCache
&
operator
=
(
const
PersistentCache
&
)
=
delete
;
}
;
using
ShaderErrorHandler
=
skgpu
:
:
ShaderErrorHandler
;
GrContextOptions
(
)
{
}
bool
fSuppressPrints
=
false
;
Enable
fSkipGLErrorChecks
=
Enable
:
:
kDefault
;
int
fMaxTextureSizeOverride
=
SK_MaxS32
;
int
fBufferMapThreshold
=
-
1
;
size_t
fMinimumStagingBufferSize
=
64
*
1024
;
SkExecutor
*
fExecutor
=
nullptr
;
bool
fDoManualMipmapping
=
false
;
bool
fDisableCoverageCountingPaths
=
true
;
bool
fDisableDistanceFieldPaths
=
false
;
bool
fAllowPathMaskCaching
=
true
;
bool
fDisableGpuYUVConversion
=
false
;
size_t
fGlyphCacheTextureMaximumBytes
=
2048
*
1024
*
4
;
float
fMinDistanceFieldFontSize
=
18
;
#
if
defined
(
SK_BUILD_FOR_ANDROID
)
float
fGlyphsAsPathsFontSize
=
384
;
#
elif
defined
(
SK_BUILD_FOR_MAC
)
float
fGlyphsAsPathsFontSize
=
256
;
#
else
float
fGlyphsAsPathsFontSize
=
324
;
#
endif
Enable
fAllowMultipleGlyphCacheTextures
=
Enable
:
:
kDefault
;
bool
fAvoidStencilBuffers
=
false
;
bool
fSharpenMipmappedTextures
=
true
;
Enable
fUseDrawInsteadOfClear
=
Enable
:
:
kDefault
;
Enable
fReduceOpsTaskSplitting
=
Enable
:
:
kDefault
;
bool
fPreferExternalImagesOverES3
=
false
;
bool
fDisableDriverCorrectnessWorkarounds
=
false
;
int
fRuntimeProgramCacheSize
=
256
;
PersistentCache
*
fPersistentCache
=
nullptr
;
ShaderCacheStrategy
fShaderCacheStrategy
=
ShaderCacheStrategy
:
:
kBackendBinary
;
ShaderErrorHandler
*
fShaderErrorHandler
=
nullptr
;
int
fInternalMultisampleCount
=
4
;
int
fMaxCachedVulkanSecondaryCommandBuffers
=
-
1
;
std
:
:
optional
<
uint64_t
>
fVulkanVMALargeHeapBlockSize
;
bool
fSuppressMipmapSupport
=
false
;
bool
fDisableTessellationPathRenderer
=
false
;
bool
fEnableExperimentalHardwareTessellation
=
false
;
bool
fSupportBilerpFromGlyphAtlas
=
false
;
bool
fReducedShaderVariations
=
false
;
bool
fAllowMSAAOnNewIntel
=
false
;
bool
fAlwaysUseTexStorageWhenAvailable
=
false
;
GrDirectContextDestroyedContext
fContextDeleteContext
=
nullptr
;
GrDirectContextDestroyedProc
fContextDeleteProc
=
nullptr
;
#
if
defined
(
GPU_TEST_UTILS
)
bool
fFailFlushTimeCallbacks
=
false
;
bool
fSuppressDualSourceBlending
=
false
;
bool
fSuppressAdvancedBlendEquations
=
false
;
bool
fSuppressFramebufferFetch
=
false
;
bool
fAllPathsVolatile
=
false
;
bool
fWireframeMode
=
false
;
bool
fClearAllTextures
=
false
;
bool
fRandomGLOOM
=
false
;
bool
fDisallowWriteAndTransferPixelRowBytes
=
false
;
GpuPathRenderers
fGpuPathRenderers
=
GpuPathRenderers
:
:
kDefault
;
int
fResourceCacheLimitOverride
=
-
1
;
int
fMaxTextureAtlasSize
=
2048
;
#
endif
GrDriverBugWorkarounds
fDriverBugWorkarounds
;
}
;
#
endif
