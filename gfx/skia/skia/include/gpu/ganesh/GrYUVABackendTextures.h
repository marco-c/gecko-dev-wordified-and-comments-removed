#
ifndef
GrYUVABackendTextures_DEFINED
#
define
GrYUVABackendTextures_DEFINED
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
core
/
SkYUVAInfo
.
h
"
#
include
"
include
/
gpu
/
GpuTypes
.
h
"
#
include
"
include
/
gpu
/
ganesh
/
GrBackendSurface
.
h
"
#
include
"
include
/
gpu
/
ganesh
/
GrTypes
.
h
"
#
include
<
array
>
#
include
<
cstddef
>
enum
SkYUVColorSpace
:
int
;
class
SK_API
GrYUVABackendTextureInfo
{
public
:
static
constexpr
auto
kMaxPlanes
=
SkYUVAInfo
:
:
kMaxPlanes
;
GrYUVABackendTextureInfo
(
)
=
default
;
GrYUVABackendTextureInfo
(
const
SkYUVAInfo
&
const
GrBackendFormat
[
kMaxPlanes
]
skgpu
:
:
Mipmapped
GrSurfaceOrigin
)
;
GrYUVABackendTextureInfo
(
const
GrYUVABackendTextureInfo
&
)
=
default
;
GrYUVABackendTextureInfo
&
operator
=
(
const
GrYUVABackendTextureInfo
&
)
=
default
;
bool
operator
=
=
(
const
GrYUVABackendTextureInfo
&
)
const
;
bool
operator
!
=
(
const
GrYUVABackendTextureInfo
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
const
SkYUVAInfo
&
yuvaInfo
(
)
const
{
return
fYUVAInfo
;
}
SkYUVColorSpace
yuvColorSpace
(
)
const
{
return
fYUVAInfo
.
yuvColorSpace
(
)
;
}
skgpu
:
:
Mipmapped
mipmapped
(
)
const
{
return
fMipmapped
;
}
GrSurfaceOrigin
textureOrigin
(
)
const
{
return
fTextureOrigin
;
}
int
numPlanes
(
)
const
{
return
fYUVAInfo
.
numPlanes
(
)
;
}
const
GrBackendFormat
&
planeFormat
(
int
i
)
const
{
return
fPlaneFormats
[
i
]
;
}
bool
isValid
(
)
const
{
return
fYUVAInfo
.
isValid
(
)
;
}
SkYUVAInfo
:
:
YUVALocations
toYUVALocations
(
)
const
;
private
:
SkYUVAInfo
fYUVAInfo
;
GrBackendFormat
fPlaneFormats
[
kMaxPlanes
]
;
skgpu
:
:
Mipmapped
fMipmapped
=
skgpu
:
:
Mipmapped
:
:
kNo
;
GrSurfaceOrigin
fTextureOrigin
=
kTopLeft_GrSurfaceOrigin
;
}
;
class
SK_API
GrYUVABackendTextures
{
public
:
GrYUVABackendTextures
(
)
=
default
;
GrYUVABackendTextures
(
const
GrYUVABackendTextures
&
)
=
delete
;
GrYUVABackendTextures
(
GrYUVABackendTextures
&
&
)
=
default
;
GrYUVABackendTextures
&
operator
=
(
const
GrYUVABackendTextures
&
)
=
delete
;
GrYUVABackendTextures
&
operator
=
(
GrYUVABackendTextures
&
&
)
=
default
;
GrYUVABackendTextures
(
const
SkYUVAInfo
&
const
GrBackendTexture
[
SkYUVAInfo
:
:
kMaxPlanes
]
GrSurfaceOrigin
textureOrigin
)
;
const
std
:
:
array
<
GrBackendTexture
SkYUVAInfo
:
:
kMaxPlanes
>
&
textures
(
)
const
{
return
fTextures
;
}
GrBackendTexture
texture
(
int
i
)
const
{
SkASSERT
(
i
>
=
0
&
&
i
<
SkYUVAInfo
:
:
kMaxPlanes
)
;
return
fTextures
[
static_cast
<
size_t
>
(
i
)
]
;
}
const
SkYUVAInfo
&
yuvaInfo
(
)
const
{
return
fYUVAInfo
;
}
int
numPlanes
(
)
const
{
return
fYUVAInfo
.
numPlanes
(
)
;
}
GrSurfaceOrigin
textureOrigin
(
)
const
{
return
fTextureOrigin
;
}
bool
isValid
(
)
const
{
return
fYUVAInfo
.
isValid
(
)
;
}
SkYUVAInfo
:
:
YUVALocations
toYUVALocations
(
)
const
;
private
:
SkYUVAInfo
fYUVAInfo
;
std
:
:
array
<
GrBackendTexture
SkYUVAInfo
:
:
kMaxPlanes
>
fTextures
;
GrSurfaceOrigin
fTextureOrigin
=
kTopLeft_GrSurfaceOrigin
;
}
;
#
endif
