#
ifndef
GrTypes_DEFINED
#
define
GrTypes_DEFINED
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
gpu
/
GpuTypes
.
h
"
#
include
"
include
/
private
/
base
/
SkTo
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
class
GrBackendSemaphore
;
enum
class
GrBackendApi
:
unsigned
{
kOpenGL
kVulkan
kMetal
kDirect3D
kMock
kUnsupported
kOpenGL_GrBackend
=
kOpenGL
}
;
typedef
GrBackendApi
GrBackend
;
static
constexpr
GrBackendApi
kMetal_GrBackend
=
GrBackendApi
:
:
kMetal
;
static
constexpr
GrBackendApi
kVulkan_GrBackend
=
GrBackendApi
:
:
kVulkan
;
static
constexpr
GrBackendApi
kMock_GrBackend
=
GrBackendApi
:
:
kMock
;
using
GrRenderable
=
skgpu
:
:
Renderable
;
using
GrProtected
=
skgpu
:
:
Protected
;
enum
GrSurfaceOrigin
:
int
{
kTopLeft_GrSurfaceOrigin
kBottomLeft_GrSurfaceOrigin
}
;
enum
GrGLBackendState
{
kRenderTarget_GrGLBackendState
=
1
<
<
0
kTextureBinding_GrGLBackendState
=
1
<
<
1
kView_GrGLBackendState
=
1
<
<
2
kBlend_GrGLBackendState
=
1
<
<
3
kMSAAEnable_GrGLBackendState
=
1
<
<
4
kVertex_GrGLBackendState
=
1
<
<
5
kStencil_GrGLBackendState
=
1
<
<
6
kPixelStore_GrGLBackendState
=
1
<
<
7
kProgram_GrGLBackendState
=
1
<
<
8
kFixedFunction_GrGLBackendState
=
1
<
<
9
kMisc_GrGLBackendState
=
1
<
<
10
kALL_GrGLBackendState
=
0xffff
}
;
static
const
uint32_t
kAll_GrBackendState
=
0xffffffff
;
typedef
void
*
GrGpuFinishedContext
;
typedef
void
(
*
GrGpuFinishedProc
)
(
GrGpuFinishedContext
finishedContext
)
;
typedef
void
(
*
GrGpuFinishedWithStatsProc
)
(
GrGpuFinishedContext
finishedContext
const
skgpu
:
:
GpuStats
&
)
;
typedef
void
*
GrGpuSubmittedContext
;
typedef
void
(
*
GrGpuSubmittedProc
)
(
GrGpuSubmittedContext
submittedContext
bool
success
)
;
typedef
void
*
GrDirectContextDestroyedContext
;
typedef
void
(
*
GrDirectContextDestroyedProc
)
(
GrDirectContextDestroyedContext
destroyedContext
)
;
struct
GrFlushInfo
{
size_t
fNumSemaphores
=
0
;
skgpu
:
:
GpuStatsFlags
fGpuStatsFlags
=
skgpu
:
:
GpuStatsFlags
:
:
kNone
;
GrBackendSemaphore
*
fSignalSemaphores
=
nullptr
;
GrGpuFinishedProc
fFinishedProc
=
nullptr
;
GrGpuFinishedWithStatsProc
fFinishedWithStatsProc
=
nullptr
;
GrGpuFinishedContext
fFinishedContext
=
nullptr
;
GrGpuSubmittedProc
fSubmittedProc
=
nullptr
;
GrGpuSubmittedContext
fSubmittedContext
=
nullptr
;
}
;
enum
class
GrSemaphoresSubmitted
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
class
GrPurgeResourceOptions
{
kAllResources
kScratchResourcesOnly
}
;
enum
class
GrSyncCpu
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
class
GrMarkFrameBoundary
:
bool
{
kNo
=
false
kYes
=
true
}
;
struct
GrSubmitInfo
{
GrSyncCpu
fSync
=
GrSyncCpu
:
:
kNo
;
GrMarkFrameBoundary
fMarkBoundary
=
GrMarkFrameBoundary
:
:
kNo
;
uint64_t
fFrameID
=
0
;
}
;
#
endif
