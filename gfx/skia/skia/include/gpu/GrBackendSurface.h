#
ifndef
GrBackendSurface_DEFINED
#
define
GrBackendSurface_DEFINED
#
include
"
GrTypes
.
h
"
#
include
"
gl
/
GrGLTypes
.
h
"
#
include
"
mock
/
GrMockTypes
.
h
"
#
include
"
vk
/
GrVkTypes
.
h
"
#
include
"
.
.
/
private
/
GrVkTypesPriv
.
h
"
class
GrVkImageLayout
;
#
ifdef
SK_METAL
#
include
"
mtl
/
GrMtlTypes
.
h
"
#
endif
#
if
!
SK_SUPPORT_GPU
class
SK_API
GrBackendTexture
{
public
:
GrBackendTexture
(
)
{
}
bool
isValid
(
)
const
{
return
false
;
}
}
;
class
SK_API
GrBackendRenderTarget
{
public
:
GrBackendRenderTarget
(
)
{
}
bool
isValid
(
)
const
{
return
false
;
}
}
;
#
else
class
SK_API
GrBackendFormat
{
public
:
GrBackendFormat
(
)
:
fValid
(
false
)
{
}
static
GrBackendFormat
MakeGL
(
GrGLenum
format
GrGLenum
target
)
{
return
GrBackendFormat
(
format
target
)
;
}
static
GrBackendFormat
MakeVk
(
VkFormat
format
)
{
return
GrBackendFormat
(
format
GrVkYcbcrConversionInfo
(
)
)
;
}
static
GrBackendFormat
MakeVk
(
const
GrVkYcbcrConversionInfo
&
ycbcrInfo
)
;
#
ifdef
SK_METAL
static
GrBackendFormat
MakeMtl
(
GrMTLPixelFormat
format
)
{
return
GrBackendFormat
(
format
)
;
}
#
endif
static
GrBackendFormat
MakeMock
(
GrPixelConfig
config
)
{
return
GrBackendFormat
(
config
)
;
}
bool
operator
=
=
(
const
GrBackendFormat
&
that
)
const
;
bool
operator
!
=
(
const
GrBackendFormat
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
GrBackendApi
backend
(
)
const
{
return
fBackend
;
}
GrTextureType
textureType
(
)
const
{
return
fTextureType
;
}
const
GrGLenum
*
getGLFormat
(
)
const
;
const
GrGLenum
*
getGLTarget
(
)
const
;
const
VkFormat
*
getVkFormat
(
)
const
;
const
GrVkYcbcrConversionInfo
*
getVkYcbcrConversionInfo
(
)
const
;
#
ifdef
SK_METAL
const
GrMTLPixelFormat
*
getMtlFormat
(
)
const
;
#
endif
const
GrPixelConfig
*
getMockFormat
(
)
const
;
GrBackendFormat
makeTexture2D
(
)
const
;
bool
isValid
(
)
const
{
return
fValid
;
}
private
:
GrBackendFormat
(
GrGLenum
format
GrGLenum
target
)
;
GrBackendFormat
(
const
VkFormat
vkFormat
const
GrVkYcbcrConversionInfo
&
)
;
#
ifdef
SK_METAL
GrBackendFormat
(
const
GrMTLPixelFormat
mtlFormat
)
;
#
endif
GrBackendFormat
(
const
GrPixelConfig
config
)
;
GrBackendApi
fBackend
;
bool
fValid
;
union
{
GrGLenum
fGLFormat
;
struct
{
VkFormat
fFormat
;
GrVkYcbcrConversionInfo
fYcbcrConversionInfo
;
}
fVk
;
#
ifdef
SK_METAL
GrMTLPixelFormat
fMtlFormat
;
#
endif
GrPixelConfig
fMockFormat
;
}
;
GrTextureType
fTextureType
;
}
;
class
SK_API
GrBackendTexture
{
public
:
GrBackendTexture
(
)
:
fIsValid
(
false
)
{
}
GrBackendTexture
(
int
width
int
height
GrMipMapped
const
GrGLTextureInfo
&
glInfo
)
;
GrBackendTexture
(
int
width
int
height
const
GrVkImageInfo
&
vkInfo
)
;
#
ifdef
SK_METAL
GrBackendTexture
(
int
width
int
height
GrMipMapped
const
GrMtlTextureInfo
&
mtlInfo
)
;
#
endif
GrBackendTexture
(
int
width
int
height
GrMipMapped
const
GrMockTextureInfo
&
mockInfo
)
;
GrBackendTexture
(
const
GrBackendTexture
&
that
)
;
~
GrBackendTexture
(
)
;
GrBackendTexture
&
operator
=
(
const
GrBackendTexture
&
that
)
;
int
width
(
)
const
{
return
fWidth
;
}
int
height
(
)
const
{
return
fHeight
;
}
bool
hasMipMaps
(
)
const
{
return
GrMipMapped
:
:
kYes
=
=
fMipMapped
;
}
GrBackendApi
backend
(
)
const
{
return
fBackend
;
}
bool
getGLTextureInfo
(
GrGLTextureInfo
*
)
const
;
bool
getVkImageInfo
(
GrVkImageInfo
*
)
const
;
void
setVkImageLayout
(
VkImageLayout
)
;
#
ifdef
SK_METAL
bool
getMtlTextureInfo
(
GrMtlTextureInfo
*
)
const
;
#
endif
GrBackendFormat
getBackendFormat
(
)
const
;
bool
getMockTextureInfo
(
GrMockTextureInfo
*
)
const
;
bool
isValid
(
)
const
{
return
fIsValid
;
}
#
if
GR_TEST_UTILS
GrPixelConfig
pixelConfig
(
)
const
{
return
fConfig
;
}
void
setPixelConfig
(
GrPixelConfig
config
)
{
fConfig
=
config
;
}
static
bool
TestingOnly_Equals
(
const
GrBackendTexture
&
const
GrBackendTexture
&
)
;
#
endif
private
:
friend
class
SkImage
;
friend
class
SkImage_Gpu
;
friend
class
SkImage_GpuBase
;
friend
class
SkImage_GpuYUVA
;
friend
class
SkPromiseImageHelper
;
friend
class
SkSurface
;
friend
class
GrAHardwareBufferImageGenerator
;
friend
class
GrBackendTextureImageGenerator
;
friend
class
GrProxyProvider
;
friend
class
GrGpu
;
friend
class
GrGLGpu
;
friend
class
GrVkGpu
;
friend
class
GrMtlGpu
;
friend
class
PromiseImageHelper
;
GrPixelConfig
config
(
)
const
{
return
fConfig
;
}
sk_sp
<
GrVkImageLayout
>
getGrVkImageLayout
(
)
const
;
friend
class
GrVkTexture
;
#
ifdef
SK_VULKAN
GrBackendTexture
(
int
width
int
height
const
GrVkImageInfo
&
vkInfo
sk_sp
<
GrVkImageLayout
>
layout
)
;
#
endif
void
cleanup
(
)
;
bool
fIsValid
;
int
fWidth
;
int
fHeight
;
GrPixelConfig
fConfig
;
GrMipMapped
fMipMapped
;
GrBackendApi
fBackend
;
union
{
GrGLTextureInfo
fGLInfo
;
GrVkBackendSurfaceInfo
fVkInfo
;
#
ifdef
SK_METAL
GrMtlTextureInfo
fMtlInfo
;
#
endif
GrMockTextureInfo
fMockInfo
;
}
;
}
;
class
SK_API
GrBackendRenderTarget
{
public
:
GrBackendRenderTarget
(
)
:
fIsValid
(
false
)
{
}
GrBackendRenderTarget
(
int
width
int
height
int
sampleCnt
int
stencilBits
const
GrGLFramebufferInfo
&
glInfo
)
;
GrBackendRenderTarget
(
int
width
int
height
int
sampleCnt
int
stencilBits
const
GrVkImageInfo
&
vkInfo
)
;
GrBackendRenderTarget
(
int
width
int
height
int
sampleCnt
const
GrVkImageInfo
&
vkInfo
)
;
#
ifdef
SK_METAL
GrBackendRenderTarget
(
int
width
int
height
int
sampleCnt
const
GrMtlTextureInfo
&
mtlInfo
)
;
#
endif
GrBackendRenderTarget
(
int
width
int
height
int
sampleCnt
int
stencilBits
const
GrMockRenderTargetInfo
&
mockInfo
)
;
~
GrBackendRenderTarget
(
)
;
GrBackendRenderTarget
(
const
GrBackendRenderTarget
&
that
)
;
GrBackendRenderTarget
&
operator
=
(
const
GrBackendRenderTarget
&
)
;
int
width
(
)
const
{
return
fWidth
;
}
int
height
(
)
const
{
return
fHeight
;
}
int
sampleCnt
(
)
const
{
return
fSampleCnt
;
}
int
stencilBits
(
)
const
{
return
fStencilBits
;
}
GrBackendApi
backend
(
)
const
{
return
fBackend
;
}
bool
getGLFramebufferInfo
(
GrGLFramebufferInfo
*
)
const
;
bool
getVkImageInfo
(
GrVkImageInfo
*
)
const
;
void
setVkImageLayout
(
VkImageLayout
)
;
#
ifdef
SK_METAL
bool
getMtlTextureInfo
(
GrMtlTextureInfo
*
)
const
;
#
endif
bool
getMockRenderTargetInfo
(
GrMockRenderTargetInfo
*
)
const
;
bool
isValid
(
)
const
{
return
fIsValid
;
}
#
if
GR_TEST_UTILS
GrPixelConfig
pixelConfig
(
)
const
{
return
fConfig
;
}
void
setPixelConfig
(
GrPixelConfig
config
)
{
fConfig
=
config
;
}
static
bool
TestingOnly_Equals
(
const
GrBackendRenderTarget
&
const
GrBackendRenderTarget
&
)
;
#
endif
private
:
friend
class
SkSurface
;
friend
class
SkSurface_Gpu
;
friend
class
SkImage_Gpu
;
friend
class
GrGpu
;
friend
class
GrGLGpu
;
friend
class
GrProxyProvider
;
friend
class
GrVkGpu
;
friend
class
GrMtlGpu
;
GrPixelConfig
config
(
)
const
{
return
fConfig
;
}
sk_sp
<
GrVkImageLayout
>
getGrVkImageLayout
(
)
const
;
friend
class
GrVkRenderTarget
;
GrBackendRenderTarget
(
int
width
int
height
int
sampleCnt
const
GrVkImageInfo
&
vkInfo
sk_sp
<
GrVkImageLayout
>
layout
)
;
void
cleanup
(
)
;
bool
fIsValid
;
int
fWidth
;
int
fHeight
;
int
fSampleCnt
;
int
fStencilBits
;
GrPixelConfig
fConfig
;
GrBackendApi
fBackend
;
union
{
GrGLFramebufferInfo
fGLInfo
;
GrVkBackendSurfaceInfo
fVkInfo
;
#
ifdef
SK_METAL
GrMtlTextureInfo
fMtlInfo
;
#
endif
GrMockRenderTargetInfo
fMockInfo
;
}
;
}
;
#
endif
#
endif
