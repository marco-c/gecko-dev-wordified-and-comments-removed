#
ifndef
GrContext_DEFINED
#
define
GrContext_DEFINED
#
include
"
GrCaps
.
h
"
#
include
"
SkMatrix
.
h
"
#
include
"
SkPathEffect
.
h
"
#
include
"
SkTypes
.
h
"
#
include
"
.
.
/
private
/
GrAuditTrail
.
h
"
#
include
"
.
.
/
private
/
GrSingleOwner
.
h
"
#
include
"
GrContextOptions
.
h
"
class
GrAtlasGlyphCache
;
class
GrBackendFormat
;
class
GrBackendSemaphore
;
class
GrContextPriv
;
class
GrContextThreadSafeProxy
;
class
GrDrawingManager
;
struct
GrDrawOpAtlasConfig
;
class
GrFragmentProcessor
;
struct
GrGLInterface
;
class
GrGpu
;
class
GrIndexBuffer
;
struct
GrMockOptions
;
class
GrOvalRenderer
;
class
GrPath
;
class
GrProxyProvider
;
class
GrRenderTargetContext
;
class
GrResourceEntry
;
class
GrResourceCache
;
class
GrResourceProvider
;
class
GrSamplerState
;
class
GrSurfaceProxy
;
class
GrSwizzle
;
class
GrTextBlobCache
;
class
GrTextContext
;
class
GrTextureProxy
;
class
GrVertexBuffer
;
struct
GrVkBackendContext
;
class
SkImage
;
class
SkSurfaceCharacterization
;
class
SkSurfaceProps
;
class
SkTaskGroup
;
class
SkTraceMemoryDump
;
class
SK_API
GrContext
:
public
SkRefCnt
{
public
:
static
GrContext
*
Create
(
GrBackend
GrBackendContext
const
GrContextOptions
&
options
)
;
static
GrContext
*
Create
(
GrBackend
GrBackendContext
)
;
static
sk_sp
<
GrContext
>
MakeGL
(
sk_sp
<
const
GrGLInterface
>
const
GrContextOptions
&
)
;
static
sk_sp
<
GrContext
>
MakeGL
(
sk_sp
<
const
GrGLInterface
>
)
;
static
sk_sp
<
GrContext
>
MakeGL
(
const
GrGLInterface
*
)
;
static
sk_sp
<
GrContext
>
MakeGL
(
const
GrGLInterface
*
const
GrContextOptions
&
)
;
#
ifdef
SK_VULKAN
static
sk_sp
<
GrContext
>
MakeVulkan
(
sk_sp
<
const
GrVkBackendContext
>
const
GrContextOptions
&
)
;
static
sk_sp
<
GrContext
>
MakeVulkan
(
sk_sp
<
const
GrVkBackendContext
>
)
;
#
endif
#
ifdef
SK_METAL
static
sk_sp
<
GrContext
>
MakeMetal
(
void
*
device
void
*
queue
const
GrContextOptions
&
options
)
;
static
sk_sp
<
GrContext
>
MakeMetal
(
void
*
device
void
*
queue
)
;
#
endif
static
sk_sp
<
GrContext
>
MakeMock
(
const
GrMockOptions
*
const
GrContextOptions
&
)
;
static
sk_sp
<
GrContext
>
MakeMock
(
const
GrMockOptions
*
)
;
virtual
~
GrContext
(
)
;
sk_sp
<
GrContextThreadSafeProxy
>
threadSafeProxy
(
)
;
void
resetContext
(
uint32_t
state
=
kAll_GrBackendState
)
;
typedef
void
(
*
PFCleanUpFunc
)
(
const
GrContext
*
context
void
*
info
)
;
void
addCleanUp
(
PFCleanUpFunc
cleanUp
void
*
info
)
{
CleanUpData
*
entry
=
fCleanUpData
.
push
(
)
;
entry
-
>
fFunc
=
cleanUp
;
entry
-
>
fInfo
=
info
;
}
void
abandonContext
(
)
;
void
releaseResourcesAndAbandonContext
(
)
;
void
getResourceCacheLimits
(
int
*
maxResources
size_t
*
maxResourceBytes
)
const
;
void
getResourceCacheUsage
(
int
*
resourceCount
size_t
*
resourceBytes
)
const
;
size_t
getResourceCachePurgeableBytes
(
)
const
;
void
setResourceCacheLimits
(
int
maxResources
size_t
maxResourceBytes
)
;
void
freeGpuResources
(
)
;
void
purgeAllUnlockedResources
(
)
;
void
performDeferredCleanup
(
std
:
:
chrono
:
:
milliseconds
msNotUsed
)
;
void
purgeResourcesNotUsedInMs
(
std
:
:
chrono
:
:
milliseconds
msNotUsed
)
{
this
-
>
performDeferredCleanup
(
msNotUsed
)
;
}
void
purgeUnlockedResources
(
size_t
bytesToPurge
bool
preferScratchResources
)
;
const
GrCaps
*
caps
(
)
const
{
return
fCaps
.
get
(
)
;
}
bool
colorTypeSupportedAsImage
(
SkColorType
)
const
;
bool
colorTypeSupportedAsSurface
(
SkColorType
colorType
)
const
{
return
this
-
>
maxSurfaceSampleCountForColorType
(
colorType
)
>
0
;
}
int
maxSurfaceSampleCountForColorType
(
SkColorType
)
const
;
sk_sp
<
GrRenderTargetContext
>
makeDeferredRenderTargetContext
(
SkBackingFit
fit
int
width
int
height
GrPixelConfig
config
sk_sp
<
SkColorSpace
>
colorSpace
int
sampleCnt
=
1
GrMipMapped
=
GrMipMapped
:
:
kNo
GrSurfaceOrigin
origin
=
kBottomLeft_GrSurfaceOrigin
const
SkSurfaceProps
*
surfaceProps
=
nullptr
SkBudgeted
=
SkBudgeted
:
:
kYes
)
;
sk_sp
<
GrRenderTargetContext
>
makeDeferredRenderTargetContextWithFallback
(
SkBackingFit
fit
int
width
int
height
GrPixelConfig
config
sk_sp
<
SkColorSpace
>
colorSpace
int
sampleCnt
=
1
GrMipMapped
=
GrMipMapped
:
:
kNo
GrSurfaceOrigin
origin
=
kBottomLeft_GrSurfaceOrigin
const
SkSurfaceProps
*
surfaceProps
=
nullptr
SkBudgeted
budgeted
=
SkBudgeted
:
:
kYes
)
;
void
flush
(
)
;
GrSemaphoresSubmitted
flushAndSignalSemaphores
(
int
numSemaphores
GrBackendSemaphore
signalSemaphores
[
]
)
;
uint32_t
uniqueID
(
)
{
return
fUniqueID
;
}
bool
abandoned
(
)
const
;
void
resetGpuStats
(
)
const
;
void
dumpCacheStats
(
SkString
*
)
const
;
void
dumpCacheStatsKeyValuePairs
(
SkTArray
<
SkString
>
*
keys
SkTArray
<
double
>
*
values
)
const
;
void
printCacheStats
(
)
const
;
void
dumpGpuStats
(
SkString
*
)
const
;
void
dumpGpuStatsKeyValuePairs
(
SkTArray
<
SkString
>
*
keys
SkTArray
<
double
>
*
values
)
const
;
void
printGpuStats
(
)
const
;
SkString
dump
(
)
const
;
void
setTextBlobCacheLimit_ForTesting
(
size_t
bytes
)
;
void
setTextContextAtlasSizes_ForTesting
(
const
GrDrawOpAtlasConfig
*
configs
)
;
void
dumpMemoryStatistics
(
SkTraceMemoryDump
*
traceMemoryDump
)
const
;
sk_sp
<
SkImage
>
getFontAtlasImage_ForTesting
(
GrMaskFormat
format
unsigned
int
index
=
0
)
;
GrAuditTrail
*
getAuditTrail
(
)
{
return
&
fAuditTrail
;
}
GrContextOptions
:
:
PersistentCache
*
getPersistentCache
(
)
{
return
fPersistentCache
;
}
SkDEBUGCODE
(
GrSingleOwner
*
debugSingleOwner
(
)
const
{
return
&
fSingleOwner
;
}
)
GrContextPriv
contextPriv
(
)
;
const
GrContextPriv
contextPriv
(
)
const
;
protected
:
GrContext
(
GrContextThreadSafeProxy
*
)
;
GrContext
(
GrBackend
)
;
private
:
sk_sp
<
GrGpu
>
fGpu
;
sk_sp
<
const
GrCaps
>
fCaps
;
GrResourceCache
*
fResourceCache
;
GrResourceProvider
*
fResourceProvider
;
GrProxyProvider
*
fProxyProvider
;
sk_sp
<
GrContextThreadSafeProxy
>
fThreadSafeProxy
;
GrAtlasGlyphCache
*
fAtlasGlyphCache
;
std
:
:
unique_ptr
<
GrTextBlobCache
>
fTextBlobCache
;
bool
fDisableGpuYUVConversion
;
bool
fSharpenMipmappedTextures
;
bool
fDidTestPMConversions
;
bool
fPMUPMConversionsRoundTrip
;
mutable
GrSingleOwner
fSingleOwner
;
std
:
:
unique_ptr
<
SkTaskGroup
>
fTaskGroup
;
struct
CleanUpData
{
PFCleanUpFunc
fFunc
;
void
*
fInfo
;
}
;
SkTDArray
<
CleanUpData
>
fCleanUpData
;
const
uint32_t
fUniqueID
;
std
:
:
unique_ptr
<
GrDrawingManager
>
fDrawingManager
;
GrAuditTrail
fAuditTrail
;
const
GrBackend
fBackend
;
GrContextOptions
:
:
PersistentCache
*
fPersistentCache
;
friend
class
GrContextPriv
;
bool
init
(
const
GrContextOptions
&
)
;
std
:
:
unique_ptr
<
GrFragmentProcessor
>
createPMToUPMEffect
(
std
:
:
unique_ptr
<
GrFragmentProcessor
>
bool
useConfigConversionEffect
)
;
std
:
:
unique_ptr
<
GrFragmentProcessor
>
createUPMToPMEffect
(
std
:
:
unique_ptr
<
GrFragmentProcessor
>
bool
useConfigConversionEffect
)
;
bool
validPMUPMConversionExists
(
)
;
static
void
TextBlobCacheOverBudgetCB
(
void
*
data
)
;
typedef
SkRefCnt
INHERITED
;
}
;
class
GrContextThreadSafeProxy
:
public
SkRefCnt
{
public
:
bool
matches
(
GrContext
*
context
)
const
{
return
context
-
>
uniqueID
(
)
=
=
fContextUniqueID
;
}
SkSurfaceCharacterization
createCharacterization
(
size_t
cacheMaxResourceBytes
const
SkImageInfo
&
ii
const
GrBackendFormat
&
backendFormat
int
sampleCount
GrSurfaceOrigin
origin
const
SkSurfaceProps
&
surfaceProps
bool
isMipMapped
)
;
private
:
GrContextThreadSafeProxy
(
sk_sp
<
const
GrCaps
>
caps
uint32_t
uniqueID
GrBackend
backend
const
GrContextOptions
&
options
)
:
fCaps
(
std
:
:
move
(
caps
)
)
fContextUniqueID
(
uniqueID
)
fBackend
(
backend
)
fOptions
(
options
)
{
}
sk_sp
<
const
GrCaps
>
fCaps
;
const
uint32_t
fContextUniqueID
;
const
GrBackend
fBackend
;
const
GrContextOptions
fOptions
;
friend
class
GrContext
;
friend
class
GrContextPriv
;
friend
class
SkImage
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
