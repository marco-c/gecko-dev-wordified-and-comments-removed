#
ifndef
GrContext_DEFINED
#
define
GrContext_DEFINED
#
include
"
SkMatrix
.
h
"
#
include
"
SkPathEffect
.
h
"
#
include
"
SkTypes
.
h
"
#
include
"
.
.
/
private
/
GrAuditTrail
.
h
"
#
include
"
.
.
/
private
/
GrSingleOwner
.
h
"
#
include
"
.
.
/
private
/
GrSkSLFPFactoryCache
.
h
"
#
include
"
GrContextOptions
.
h
"
#
include
"
SkUnPreMultiply
.
h
"
class
GrAtlasManager
;
class
GrBackendFormat
;
class
GrBackendSemaphore
;
class
GrCaps
;
class
GrContextPriv
;
class
GrContextThreadSafeProxy
;
class
GrContextThreadSafeProxyPriv
;
class
GrDrawingManager
;
class
GrFragmentProcessor
;
struct
GrGLInterface
;
class
GrGlyphCache
;
class
GrGpu
;
struct
GrMockOptions
;
class
GrOpMemoryPool
;
class
GrPath
;
class
GrProxyProvider
;
class
GrRenderTargetContext
;
class
GrResourceCache
;
class
GrResourceProvider
;
class
GrSamplerState
;
class
GrSurfaceProxy
;
class
GrSwizzle
;
class
GrTextBlobCache
;
class
GrTextContext
;
class
GrTextureProxy
;
struct
GrVkBackendContext
;
class
SkImage
;
class
SkSurfaceCharacterization
;
class
SkSurfaceProps
;
class
SkTaskGroup
;
class
SkTraceMemoryDump
;
class
SK_API
GrContext
:
public
SkRefCnt
{
public
:
static
sk_sp
<
GrContext
>
MakeGL
(
sk_sp
<
const
GrGLInterface
>
const
GrContextOptions
&
)
;
static
sk_sp
<
GrContext
>
MakeGL
(
sk_sp
<
const
GrGLInterface
>
)
;
static
sk_sp
<
GrContext
>
MakeGL
(
const
GrContextOptions
&
)
;
static
sk_sp
<
GrContext
>
MakeGL
(
)
;
static
sk_sp
<
GrContext
>
MakeVulkan
(
const
GrVkBackendContext
&
const
GrContextOptions
&
)
;
static
sk_sp
<
GrContext
>
MakeVulkan
(
const
GrVkBackendContext
&
)
;
#
ifdef
SK_METAL
static
sk_sp
<
GrContext
>
MakeMetal
(
void
*
device
void
*
queue
const
GrContextOptions
&
options
)
;
static
sk_sp
<
GrContext
>
MakeMetal
(
void
*
device
void
*
queue
)
;
#
endif
static
sk_sp
<
GrContext
>
MakeMock
(
const
GrMockOptions
*
const
GrContextOptions
&
)
;
static
sk_sp
<
GrContext
>
MakeMock
(
const
GrMockOptions
*
)
;
virtual
~
GrContext
(
)
;
sk_sp
<
GrContextThreadSafeProxy
>
threadSafeProxy
(
)
;
void
resetContext
(
uint32_t
state
=
kAll_GrBackendState
)
;
virtual
void
abandonContext
(
)
;
bool
abandoned
(
)
const
;
virtual
void
releaseResourcesAndAbandonContext
(
)
;
void
getResourceCacheLimits
(
int
*
maxResources
size_t
*
maxResourceBytes
)
const
;
void
getResourceCacheUsage
(
int
*
resourceCount
size_t
*
resourceBytes
)
const
;
size_t
getResourceCachePurgeableBytes
(
)
const
;
void
setResourceCacheLimits
(
int
maxResources
size_t
maxResourceBytes
)
;
virtual
void
freeGpuResources
(
)
;
void
performDeferredCleanup
(
std
:
:
chrono
:
:
milliseconds
msNotUsed
)
;
void
purgeResourcesNotUsedInMs
(
std
:
:
chrono
:
:
milliseconds
msNotUsed
)
{
this
-
>
performDeferredCleanup
(
msNotUsed
)
;
}
void
purgeUnlockedResources
(
size_t
bytesToPurge
bool
preferScratchResources
)
;
void
purgeUnlockedResources
(
bool
scratchResourcesOnly
)
;
int
maxTextureSize
(
)
const
;
int
maxRenderTargetSize
(
)
const
;
bool
colorTypeSupportedAsImage
(
SkColorType
)
const
;
bool
colorTypeSupportedAsSurface
(
SkColorType
colorType
)
const
{
return
this
-
>
maxSurfaceSampleCountForColorType
(
colorType
)
>
0
;
}
int
maxSurfaceSampleCountForColorType
(
SkColorType
)
const
;
void
flush
(
)
;
GrSemaphoresSubmitted
flushAndSignalSemaphores
(
int
numSemaphores
GrBackendSemaphore
signalSemaphores
[
]
)
;
uint32_t
uniqueID
(
)
{
return
fUniqueID
;
}
GrContextPriv
contextPriv
(
)
;
const
GrContextPriv
contextPriv
(
)
const
;
void
dumpMemoryStatistics
(
SkTraceMemoryDump
*
traceMemoryDump
)
const
;
bool
supportsDistanceFieldText
(
)
const
;
protected
:
GrContext
(
GrBackend
int32_t
id
=
SK_InvalidGenID
)
;
bool
initCommon
(
const
GrContextOptions
&
)
;
virtual
bool
init
(
const
GrContextOptions
&
)
=
0
;
virtual
GrAtlasManager
*
onGetAtlasManager
(
)
=
0
;
const
GrBackend
fBackend
;
sk_sp
<
const
GrCaps
>
fCaps
;
sk_sp
<
GrContextThreadSafeProxy
>
fThreadSafeProxy
;
sk_sp
<
GrSkSLFPFactoryCache
>
fFPFactoryCache
;
private
:
sk_sp
<
GrGpu
>
fGpu
;
GrResourceCache
*
fResourceCache
;
GrResourceProvider
*
fResourceProvider
;
GrProxyProvider
*
fProxyProvider
;
sk_sp
<
GrOpMemoryPool
>
fOpMemoryPool
;
GrGlyphCache
*
fGlyphCache
;
std
:
:
unique_ptr
<
GrTextBlobCache
>
fTextBlobCache
;
bool
fDisableGpuYUVConversion
;
bool
fSharpenMipmappedTextures
;
bool
fDidTestPMConversions
;
bool
fPMUPMConversionsRoundTrip
;
mutable
GrSingleOwner
fSingleOwner
;
std
:
:
unique_ptr
<
SkTaskGroup
>
fTaskGroup
;
const
uint32_t
fUniqueID
;
std
:
:
unique_ptr
<
GrDrawingManager
>
fDrawingManager
;
GrAuditTrail
fAuditTrail
;
GrContextOptions
:
:
PersistentCache
*
fPersistentCache
;
friend
class
GrContextPriv
;
std
:
:
unique_ptr
<
GrFragmentProcessor
>
createPMToUPMEffect
(
std
:
:
unique_ptr
<
GrFragmentProcessor
>
)
;
std
:
:
unique_ptr
<
GrFragmentProcessor
>
createUPMToPMEffect
(
std
:
:
unique_ptr
<
GrFragmentProcessor
>
)
;
bool
validPMUPMConversionExists
(
)
;
static
void
TextBlobCacheOverBudgetCB
(
void
*
data
)
;
typedef
SkRefCnt
INHERITED
;
}
;
class
SK_API
GrContextThreadSafeProxy
:
public
SkRefCnt
{
public
:
~
GrContextThreadSafeProxy
(
)
;
bool
matches
(
GrContext
*
context
)
const
{
return
context
-
>
uniqueID
(
)
=
=
fContextUniqueID
;
}
SkSurfaceCharacterization
createCharacterization
(
size_t
cacheMaxResourceBytes
const
SkImageInfo
&
ii
const
GrBackendFormat
&
backendFormat
int
sampleCount
GrSurfaceOrigin
origin
const
SkSurfaceProps
&
surfaceProps
bool
isMipMapped
bool
willUseGLFBO0
=
false
)
;
bool
operator
=
=
(
const
GrContextThreadSafeProxy
&
that
)
const
{
SkASSERT
(
(
this
=
=
&
that
)
=
=
(
fContextUniqueID
=
=
that
.
fContextUniqueID
)
)
;
return
this
=
=
&
that
;
}
bool
operator
!
=
(
const
GrContextThreadSafeProxy
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
GrContextThreadSafeProxyPriv
priv
(
)
;
const
GrContextThreadSafeProxyPriv
priv
(
)
const
;
private
:
GrContextThreadSafeProxy
(
sk_sp
<
const
GrCaps
>
caps
uint32_t
uniqueID
GrBackend
backend
const
GrContextOptions
&
options
sk_sp
<
GrSkSLFPFactoryCache
>
cache
)
;
sk_sp
<
const
GrCaps
>
fCaps
;
const
uint32_t
fContextUniqueID
;
const
GrBackend
fBackend
;
const
GrContextOptions
fOptions
;
sk_sp
<
GrSkSLFPFactoryCache
>
fFPFactoryCache
;
friend
class
GrDirectContext
;
friend
class
GrContextThreadSafeProxyPriv
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
