#
ifndef
GrGpuResource_DEFINED
#
define
GrGpuResource_DEFINED
#
include
"
.
.
/
private
/
GrTypesPriv
.
h
"
#
include
"
GrResourceKey
.
h
"
class
GrContext
;
class
GrGpu
;
class
GrResourceCache
;
class
SkTraceMemoryDump
;
template
<
typename
DERIVED
>
class
GrIORef
:
public
SkNoncopyable
{
public
:
void
ref
(
)
const
{
this
-
>
validate
(
)
;
+
+
fRefCnt
;
}
void
unref
(
)
const
{
this
-
>
validate
(
)
;
if
(
!
(
-
-
fRefCnt
)
)
{
if
(
!
static_cast
<
const
DERIVED
*
>
(
this
)
-
>
notifyRefCountIsZero
(
)
)
{
return
;
}
}
this
-
>
didRemoveRefOrPendingIO
(
kRef_CntType
)
;
}
void
validate
(
)
const
{
#
ifdef
SK_DEBUG
SkASSERT
(
fRefCnt
>
=
0
)
;
SkASSERT
(
fPendingReads
>
=
0
)
;
SkASSERT
(
fPendingWrites
>
=
0
)
;
SkASSERT
(
fRefCnt
+
fPendingReads
+
fPendingWrites
>
=
0
)
;
#
endif
}
protected
:
GrIORef
(
)
:
fRefCnt
(
1
)
fPendingReads
(
0
)
fPendingWrites
(
0
)
{
}
enum
CntType
{
kRef_CntType
kPendingRead_CntType
kPendingWrite_CntType
}
;
bool
isPurgeable
(
)
const
{
return
!
this
-
>
internalHasRef
(
)
&
&
!
this
-
>
internalHasPendingIO
(
)
;
}
bool
internalHasPendingRead
(
)
const
{
return
SkToBool
(
fPendingReads
)
;
}
bool
internalHasPendingWrite
(
)
const
{
return
SkToBool
(
fPendingWrites
)
;
}
bool
internalHasPendingIO
(
)
const
{
return
SkToBool
(
fPendingWrites
|
fPendingReads
)
;
}
bool
internalHasRef
(
)
const
{
return
SkToBool
(
fRefCnt
)
;
}
bool
internalHasUniqueRef
(
)
const
{
return
fRefCnt
=
=
1
;
}
private
:
friend
class
GrIORefProxy
;
template
<
typename
T
>
friend
void
testingOnly_getIORefCnts
(
const
T
*
int
*
refCnt
int
*
readCnt
int
*
writeCnt
)
;
void
addPendingRead
(
)
const
{
this
-
>
validate
(
)
;
+
+
fPendingReads
;
}
void
completedRead
(
)
const
{
this
-
>
validate
(
)
;
-
-
fPendingReads
;
this
-
>
didRemoveRefOrPendingIO
(
kPendingRead_CntType
)
;
}
void
addPendingWrite
(
)
const
{
this
-
>
validate
(
)
;
+
+
fPendingWrites
;
}
void
completedWrite
(
)
const
{
this
-
>
validate
(
)
;
-
-
fPendingWrites
;
this
-
>
didRemoveRefOrPendingIO
(
kPendingWrite_CntType
)
;
}
private
:
void
didRemoveRefOrPendingIO
(
CntType
cntTypeRemoved
)
const
{
if
(
0
=
=
fPendingReads
&
&
0
=
=
fPendingWrites
&
&
0
=
=
fRefCnt
)
{
static_cast
<
const
DERIVED
*
>
(
this
)
-
>
notifyAllCntsAreZero
(
cntTypeRemoved
)
;
}
}
mutable
int32_t
fRefCnt
;
mutable
int32_t
fPendingReads
;
mutable
int32_t
fPendingWrites
;
friend
class
GrGpuResourceRef
;
friend
class
GrResourceCache
;
template
<
typename
GrIOType
>
friend
class
GrPendingIOResource
;
}
;
class
SK_API
GrGpuResource
:
public
GrIORef
<
GrGpuResource
>
{
public
:
bool
wasDestroyed
(
)
const
{
return
nullptr
=
=
fGpu
;
}
const
GrContext
*
getContext
(
)
const
;
GrContext
*
getContext
(
)
;
size_t
gpuMemorySize
(
)
const
{
if
(
kInvalidGpuMemorySize
=
=
fGpuMemorySize
)
{
fGpuMemorySize
=
this
-
>
onGpuMemorySize
(
)
;
SkASSERT
(
kInvalidGpuMemorySize
!
=
fGpuMemorySize
)
;
}
return
fGpuMemorySize
;
}
class
UniqueID
{
public
:
static
UniqueID
InvalidID
(
)
{
return
UniqueID
(
uint32_t
(
SK_InvalidUniqueID
)
)
;
}
UniqueID
(
)
{
}
explicit
UniqueID
(
uint32_t
id
)
:
fID
(
id
)
{
}
uint32_t
asUInt
(
)
const
{
return
fID
;
}
bool
operator
=
=
(
const
UniqueID
&
other
)
const
{
return
fID
=
=
other
.
fID
;
}
bool
operator
!
=
(
const
UniqueID
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
void
makeInvalid
(
)
{
fID
=
SK_InvalidUniqueID
;
}
bool
isInvalid
(
)
const
{
return
SK_InvalidUniqueID
=
=
fID
;
}
protected
:
uint32_t
fID
;
}
;
UniqueID
uniqueID
(
)
const
{
return
fUniqueID
;
}
const
GrUniqueKey
&
getUniqueKey
(
)
const
{
return
fUniqueKey
;
}
class
CacheAccess
;
inline
CacheAccess
cacheAccess
(
)
;
inline
const
CacheAccess
cacheAccess
(
)
const
;
class
ResourcePriv
;
inline
ResourcePriv
resourcePriv
(
)
;
inline
const
ResourcePriv
resourcePriv
(
)
const
;
void
abandon
(
)
;
virtual
void
dumpMemoryStatistics
(
SkTraceMemoryDump
*
traceMemoryDump
)
const
;
static
uint32_t
CreateUniqueID
(
)
;
protected
:
void
registerWithCache
(
SkBudgeted
)
;
void
registerWithCacheWrapped
(
)
;
GrGpuResource
(
GrGpu
*
)
;
virtual
~
GrGpuResource
(
)
;
GrGpu
*
getGpu
(
)
const
{
return
fGpu
;
}
virtual
void
onRelease
(
)
{
}
virtual
void
onAbandon
(
)
{
}
void
didChangeGpuMemorySize
(
)
const
;
virtual
void
setMemoryBacking
(
SkTraceMemoryDump
*
const
SkString
&
)
const
{
}
private
:
virtual
void
computeScratchKey
(
GrScratchKey
*
)
const
{
}
void
release
(
)
;
virtual
size_t
onGpuMemorySize
(
)
const
=
0
;
void
setUniqueKey
(
const
GrUniqueKey
&
)
;
void
removeUniqueKey
(
)
;
void
notifyAllCntsAreZero
(
CntType
)
const
;
bool
notifyRefCountIsZero
(
)
const
;
void
removeScratchKey
(
)
;
void
makeBudgeted
(
)
;
void
makeUnbudgeted
(
)
;
#
ifdef
SK_DEBUG
friend
class
GrGpu
;
#
endif
int
fCacheArrayIndex
;
uint32_t
fTimestamp
;
uint32_t
fExternalFlushCntWhenBecamePurgeable
;
GrStdSteadyClock
:
:
time_point
fTimeWhenBecamePurgeable
;
static
const
size_t
kInvalidGpuMemorySize
=
~
static_cast
<
size_t
>
(
0
)
;
GrScratchKey
fScratchKey
;
GrUniqueKey
fUniqueKey
;
GrGpu
*
fGpu
;
mutable
size_t
fGpuMemorySize
;
SkBudgeted
fBudgeted
;
bool
fRefsWrappedObjects
;
const
UniqueID
fUniqueID
;
typedef
GrIORef
<
GrGpuResource
>
INHERITED
;
friend
class
GrIORef
<
GrGpuResource
>
;
}
;
#
endif
