#
ifndef
GrTexture_DEFINED
#
define
GrTexture_DEFINED
#
include
"
GrSurface
.
h
"
#
include
"
GrSamplerParams
.
h
"
#
include
"
SkPoint
.
h
"
#
include
"
SkRefCnt
.
h
"
class
GrExternalTextureData
;
class
GrTexturePriv
;
class
GrTexture
:
virtual
public
GrSurface
{
public
:
GrTexture
*
asTexture
(
)
override
{
return
this
;
}
const
GrTexture
*
asTexture
(
)
const
override
{
return
this
;
}
virtual
GrBackendObject
getTextureHandle
(
)
const
=
0
;
virtual
void
textureParamsModified
(
)
=
0
;
#
ifdef
SK_DEBUG
void
validate
(
)
const
{
this
-
>
INHERITED
:
:
validate
(
)
;
this
-
>
validateDesc
(
)
;
}
#
endif
inline
GrTexturePriv
texturePriv
(
)
;
inline
const
GrTexturePriv
texturePriv
(
)
const
;
protected
:
GrTexture
(
GrGpu
*
const
GrSurfaceDesc
&
GrSLType
samplerType
GrSamplerParams
:
:
FilterMode
highestFilterMode
bool
wasMipMapDataProvided
)
;
void
validateDesc
(
)
const
;
virtual
std
:
:
unique_ptr
<
GrExternalTextureData
>
detachBackendTexture
(
)
=
0
;
private
:
void
computeScratchKey
(
GrScratchKey
*
)
const
override
;
size_t
onGpuMemorySize
(
)
const
override
;
void
dirtyMipMaps
(
bool
mipMapsDirty
)
;
enum
MipMapsStatus
{
kNotAllocated_MipMapsStatus
kAllocated_MipMapsStatus
kValid_MipMapsStatus
}
;
GrSLType
fSamplerType
;
GrSamplerParams
:
:
FilterMode
fHighestFilterMode
;
MipMapsStatus
fMipMapsStatus
;
int
fMaxMipMapLevel
;
SkDestinationSurfaceColorMode
fMipColorMode
;
friend
class
GrTexturePriv
;
typedef
GrSurface
INHERITED
;
}
;
#
endif
