#
ifndef
GrTexture_DEFINED
#
define
GrTexture_DEFINED
#
include
"
GrBackendSurface
.
h
"
#
include
"
GrSamplerState
.
h
"
#
include
"
GrSurface
.
h
"
#
include
"
SkImage
.
h
"
#
include
"
SkPoint
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
.
.
/
private
/
GrTypesPriv
.
h
"
class
GrTexturePriv
;
enum
class
SkDestinationSurfaceColorMode
;
class
GrTexture
:
virtual
public
GrSurface
{
public
:
GrTexture
*
asTexture
(
)
override
{
return
this
;
}
const
GrTexture
*
asTexture
(
)
const
override
{
return
this
;
}
virtual
GrBackendObject
getTextureHandle
(
)
const
=
0
;
virtual
GrBackendTexture
getBackendTexture
(
)
const
=
0
;
virtual
void
textureParamsModified
(
)
=
0
;
static
bool
StealBackendTexture
(
sk_sp
<
GrTexture
>
&
&
GrBackendTexture
*
SkImage
:
:
BackendTextureReleaseProc
*
)
;
#
ifdef
SK_DEBUG
void
validate
(
)
const
{
this
-
>
INHERITED
:
:
validate
(
)
;
}
#
endif
virtual
void
setRelease
(
sk_sp
<
GrReleaseProcHelper
>
releaseHelper
)
=
0
;
typedef
void
*
ReleaseCtx
;
typedef
void
(
*
ReleaseProc
)
(
ReleaseCtx
)
;
void
setRelease
(
ReleaseProc
proc
ReleaseCtx
ctx
)
{
sk_sp
<
GrReleaseProcHelper
>
helper
(
new
GrReleaseProcHelper
(
proc
ctx
)
)
;
this
-
>
setRelease
(
std
:
:
move
(
helper
)
)
;
}
inline
GrTexturePriv
texturePriv
(
)
;
inline
const
GrTexturePriv
texturePriv
(
)
const
;
protected
:
GrTexture
(
GrGpu
*
const
GrSurfaceDesc
&
GrSLType
samplerType
GrSamplerState
:
:
Filter
highestFilterMode
GrMipMapsStatus
)
;
virtual
bool
onStealBackendTexture
(
GrBackendTexture
*
SkImage
:
:
BackendTextureReleaseProc
*
)
=
0
;
private
:
void
computeScratchKey
(
GrScratchKey
*
)
const
override
;
size_t
onGpuMemorySize
(
)
const
override
;
void
markMipMapsDirty
(
)
;
void
markMipMapsClean
(
)
;
GrSLType
fSamplerType
;
GrSamplerState
:
:
Filter
fHighestFilterMode
;
GrMipMapsStatus
fMipMapsStatus
;
int
fMaxMipMapLevel
;
SkDestinationSurfaceColorMode
fMipColorMode
;
friend
class
GrTexturePriv
;
typedef
GrSurface
INHERITED
;
}
;
#
endif
