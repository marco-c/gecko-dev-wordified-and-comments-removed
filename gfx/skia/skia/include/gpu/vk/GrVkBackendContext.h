#
ifndef
GrVkBackendContext_DEFINED
#
define
GrVkBackendContext_DEFINED
#
include
"
SkRefCnt
.
h
"
#
include
"
vk
/
GrVkDefines
.
h
"
#
include
"
vk
/
GrVkInterface
.
h
"
enum
GrVkExtensionFlags
{
kEXT_debug_report_GrVkExtensionFlag
=
0x0001
kNV_glsl_shader_GrVkExtensionFlag
=
0x0002
kKHR_surface_GrVkExtensionFlag
=
0x0004
kKHR_swapchain_GrVkExtensionFlag
=
0x0008
kKHR_win32_surface_GrVkExtensionFlag
=
0x0010
kKHR_android_surface_GrVkExtensionFlag
=
0x0020
kKHR_xcb_surface_GrVkExtensionFlag
=
0x0040
}
;
enum
GrVkFeatureFlags
{
kGeometryShader_GrVkFeatureFlag
=
0x0001
kDualSrcBlend_GrVkFeatureFlag
=
0x0002
kSampleRateShading_GrVkFeatureFlag
=
0x0004
}
;
struct
SK_API
GrVkBackendContext
:
public
SkRefCnt
{
VkInstance
fInstance
;
VkPhysicalDevice
fPhysicalDevice
;
VkDevice
fDevice
;
VkQueue
fQueue
;
uint32_t
fGraphicsQueueIndex
;
uint32_t
fMinAPIVersion
;
uint32_t
fExtensions
;
uint32_t
fFeatures
;
sk_sp
<
const
GrVkInterface
>
fInterface
;
bool
fOwnsInstanceAndDevice
=
true
;
using
CanPresentFn
=
std
:
:
function
<
bool
(
VkInstance
VkPhysicalDevice
uint32_t
queueFamilyIndex
)
>
;
static
const
GrVkBackendContext
*
Create
(
uint32_t
*
presentQueueIndex
=
nullptr
CanPresentFn
=
CanPresentFn
(
)
GrVkInterface
:
:
GetProc
getProc
=
nullptr
)
;
static
const
GrVkBackendContext
*
Create
(
const
GrVkInterface
:
:
GetInstanceProc
&
getInstanceProc
const
GrVkInterface
:
:
GetDeviceProc
&
getDeviceProc
uint32_t
*
presentQueueIndex
=
nullptr
CanPresentFn
canPresent
=
CanPresentFn
(
)
)
{
if
(
!
getInstanceProc
|
|
!
getDeviceProc
)
{
return
nullptr
;
}
auto
getProc
=
[
&
getInstanceProc
&
getDeviceProc
]
(
const
char
*
proc_name
VkInstance
instance
VkDevice
device
)
{
if
(
device
!
=
VK_NULL_HANDLE
)
{
return
getDeviceProc
(
device
proc_name
)
;
}
return
getInstanceProc
(
instance
proc_name
)
;
}
;
return
Create
(
presentQueueIndex
canPresent
getProc
)
;
}
~
GrVkBackendContext
(
)
override
;
}
;
#
endif
