#
ifndef
GrVkBackendContext_DEFINED
#
define
GrVkBackendContext_DEFINED
#
include
"
SkRefCnt
.
h
"
#
include
"
vk
/
GrVkDefines
.
h
"
struct
GrVkInterface
;
enum
GrVkExtensionFlags
{
kEXT_debug_report_GrVkExtensionFlag
=
0x0001
kNV_glsl_shader_GrVkExtensionFlag
=
0x0002
kKHR_surface_GrVkExtensionFlag
=
0x0004
kKHR_swapchain_GrVkExtensionFlag
=
0x0008
kKHR_win32_surface_GrVkExtensionFlag
=
0x0010
kKHR_android_surface_GrVkExtensionFlag
=
0x0020
kKHR_xcb_surface_GrVkExtensionFlag
=
0x0040
}
;
enum
GrVkFeatureFlags
{
kGeometryShader_GrVkFeatureFlag
=
0x0001
kDualSrcBlend_GrVkFeatureFlag
=
0x0002
kSampleRateShading_GrVkFeatureFlag
=
0x0004
}
;
struct
GrVkBackendContext
:
public
SkRefCnt
{
VkInstance
fInstance
;
VkPhysicalDevice
fPhysicalDevice
;
VkDevice
fDevice
;
VkQueue
fQueue
;
uint32_t
fGraphicsQueueIndex
;
uint32_t
fMinAPIVersion
;
uint32_t
fExtensions
;
uint32_t
fFeatures
;
SkAutoTUnref
<
const
GrVkInterface
>
fInterface
;
using
CanPresentFn
=
std
:
:
function
<
bool
(
VkInstance
VkPhysicalDevice
uint32_t
queueFamilyIndex
)
>
;
static
const
GrVkBackendContext
*
Create
(
uint32_t
*
presentQueueIndex
=
nullptr
CanPresentFn
=
CanPresentFn
(
)
)
;
~
GrVkBackendContext
(
)
override
;
}
;
#
endif
