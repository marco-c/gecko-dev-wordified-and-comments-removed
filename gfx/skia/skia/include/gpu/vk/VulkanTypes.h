#
ifndef
skgpu_VulkanTypes_DEFINED
#
define
skgpu_VulkanTypes_DEFINED
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
private
/
gpu
/
vk
/
SkiaVulkan
.
h
"
#
include
<
functional
>
#
ifndef
VK_VERSION_1_1
#
error
Skia
requires
the
use
of
Vulkan
1
.
1
headers
#
endif
namespace
skgpu
{
using
VulkanGetProc
=
std
:
:
function
<
PFN_vkVoidFunction
(
const
char
*
VkInstance
VkDevice
)
>
;
typedef
intptr_t
VulkanBackendMemory
;
struct
VulkanAlloc
{
VkDeviceMemory
fMemory
=
VK_NULL_HANDLE
;
VkDeviceSize
fOffset
=
0
;
VkDeviceSize
fSize
=
0
;
uint32_t
fFlags
=
0
;
VulkanBackendMemory
fBackendMemory
=
0
;
enum
Flag
{
kNoncoherent_Flag
=
0x1
kMappable_Flag
=
0x2
kLazilyAllocated_Flag
=
0x4
}
;
bool
operator
=
=
(
const
VulkanAlloc
&
that
)
const
{
return
fMemory
=
=
that
.
fMemory
&
&
fOffset
=
=
that
.
fOffset
&
&
fSize
=
=
that
.
fSize
&
&
fFlags
=
=
that
.
fFlags
&
&
fUsesSystemHeap
=
=
that
.
fUsesSystemHeap
;
}
private
:
bool
fUsesSystemHeap
=
false
;
}
;
}
#
endif
