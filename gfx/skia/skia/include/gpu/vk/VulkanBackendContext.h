#
ifndef
skgpu_VulkanBackendContext_DEFINED
#
define
skgpu_VulkanBackendContext_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
gpu
/
GpuTypes
.
h
"
#
include
"
include
/
gpu
/
vk
/
VulkanMemoryAllocator
.
h
"
#
include
"
include
/
gpu
/
vk
/
VulkanTypes
.
h
"
#
include
"
include
/
private
/
base
/
SkAPI
.
h
"
#
include
"
include
/
private
/
gpu
/
vk
/
SkiaVulkan
.
h
"
#
include
<
cstdint
>
namespace
skgpu
{
class
VulkanExtensions
;
struct
SK_API
VulkanBackendContext
{
VkInstance
fInstance
=
VK_NULL_HANDLE
;
VkPhysicalDevice
fPhysicalDevice
=
VK_NULL_HANDLE
;
VkDevice
fDevice
=
VK_NULL_HANDLE
;
VkQueue
fQueue
=
VK_NULL_HANDLE
;
uint32_t
fGraphicsQueueIndex
=
0
;
uint32_t
fMaxAPIVersion
=
0
;
const
skgpu
:
:
VulkanExtensions
*
fVkExtensions
=
nullptr
;
const
VkPhysicalDeviceFeatures
*
fDeviceFeatures
=
nullptr
;
const
VkPhysicalDeviceFeatures2
*
fDeviceFeatures2
=
nullptr
;
sk_sp
<
VulkanMemoryAllocator
>
fMemoryAllocator
;
skgpu
:
:
VulkanGetProc
fGetProc
;
Protected
fProtectedContext
=
Protected
:
:
kNo
;
skgpu
:
:
VulkanDeviceLostContext
fDeviceLostContext
=
nullptr
;
skgpu
:
:
VulkanDeviceLostProc
fDeviceLostProc
=
nullptr
;
}
;
}
#
endif
