#
ifndef
skgpu_VulkanMemoryAllocator_DEFINED
#
define
skgpu_VulkanMemoryAllocator_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
gpu
/
vk
/
VulkanTypes
.
h
"
#
include
"
include
/
private
/
gpu
/
vk
/
SkiaVulkan
.
h
"
#
include
<
cstdint
>
#
include
<
utility
>
namespace
skgpu
{
class
VulkanMemoryAllocator
:
public
SkRefCnt
{
public
:
enum
AllocationPropertyFlags
{
kNone_AllocationPropertyFlag
=
0b0000
kDedicatedAllocation_AllocationPropertyFlag
=
0b0001
kLazyAllocation_AllocationPropertyFlag
=
0b0010
kPersistentlyMapped_AllocationPropertyFlag
=
0b0100
kProtected_AllocationPropertyFlag
=
0b1000
}
;
enum
class
BufferUsage
{
kGpuOnly
kCpuWritesGpuReads
kTransfersFromCpuToGpu
kTransfersFromGpuToCpu
}
;
virtual
VkResult
allocateImageMemory
(
VkImage
image
uint32_t
allocationPropertyFlags
skgpu
:
:
VulkanBackendMemory
*
memory
)
=
0
;
virtual
VkResult
allocateBufferMemory
(
VkBuffer
buffer
BufferUsage
usage
uint32_t
allocationPropertyFlags
skgpu
:
:
VulkanBackendMemory
*
memory
)
=
0
;
virtual
void
getAllocInfo
(
const
skgpu
:
:
VulkanBackendMemory
&
skgpu
:
:
VulkanAlloc
*
)
const
=
0
;
virtual
void
*
mapMemory
(
const
skgpu
:
:
VulkanBackendMemory
&
)
{
return
nullptr
;
}
virtual
VkResult
mapMemory
(
const
skgpu
:
:
VulkanBackendMemory
&
memory
void
*
*
data
)
{
*
data
=
this
-
>
mapMemory
(
memory
)
;
return
*
data
?
VK_SUCCESS
:
VK_ERROR_INITIALIZATION_FAILED
;
}
virtual
void
unmapMemory
(
const
skgpu
:
:
VulkanBackendMemory
&
)
=
0
;
virtual
void
flushMappedMemory
(
const
skgpu
:
:
VulkanBackendMemory
&
VkDeviceSize
VkDeviceSize
)
{
}
virtual
VkResult
flushMemory
(
const
skgpu
:
:
VulkanBackendMemory
&
memory
VkDeviceSize
offset
VkDeviceSize
size
)
{
this
-
>
flushMappedMemory
(
memory
offset
size
)
;
return
VK_SUCCESS
;
}
virtual
void
invalidateMappedMemory
(
const
skgpu
:
:
VulkanBackendMemory
&
VkDeviceSize
VkDeviceSize
)
{
}
virtual
VkResult
invalidateMemory
(
const
skgpu
:
:
VulkanBackendMemory
&
memory
VkDeviceSize
offset
VkDeviceSize
size
)
{
this
-
>
invalidateMappedMemory
(
memory
offset
size
)
;
return
VK_SUCCESS
;
}
virtual
void
freeMemory
(
const
skgpu
:
:
VulkanBackendMemory
&
)
=
0
;
virtual
std
:
:
pair
<
uint64_t
uint64_t
>
totalAllocatedAndUsedMemory
(
)
const
=
0
;
}
;
}
#
endif
