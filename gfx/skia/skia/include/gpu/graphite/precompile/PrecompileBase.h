#
ifndef
skgpu_graphite_precompile_PrecompileBase_DEFINED
#
define
skgpu_graphite_precompile_PrecompileBase_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSpan
.
h
"
namespace
skgpu
:
:
graphite
{
class
KeyContext
;
class
PaintParamsKeyBuilder
;
class
PipelineDataGatherer
;
class
PrecompileBasePriv
;
class
SK_API
PrecompileBase
:
public
SkRefCnt
{
public
:
enum
class
Type
{
kBlender
kColorFilter
kImageFilter
kMaskFilter
kShader
}
;
Type
type
(
)
const
{
return
fType
;
}
PrecompileBasePriv
priv
(
)
;
const
PrecompileBasePriv
priv
(
)
const
;
protected
:
PrecompileBase
(
Type
type
)
:
fType
(
type
)
{
}
virtual
int
numIntrinsicCombinations
(
)
const
{
return
1
;
}
virtual
int
numChildCombinations
(
)
const
{
return
1
;
}
int
numCombinations
(
)
const
{
return
this
-
>
numIntrinsicCombinations
(
)
*
this
-
>
numChildCombinations
(
)
;
}
virtual
void
addToKey
(
const
KeyContext
&
PaintParamsKeyBuilder
*
PipelineDataGatherer
*
int
desiredCombination
)
const
=
0
;
template
<
typename
T
>
static
std
:
:
pair
<
sk_sp
<
T
>
int
>
SelectOption
(
SkSpan
<
const
sk_sp
<
T
>
>
options
int
desiredOption
)
;
template
<
typename
T
>
static
void
AddToKey
(
const
KeyContext
&
PaintParamsKeyBuilder
*
PipelineDataGatherer
*
SkSpan
<
const
sk_sp
<
T
>
>
options
int
desiredOption
)
;
private
:
friend
class
PrecompileBasePriv
;
friend
class
PaintOptions
;
friend
class
PrecompileBlenderList
;
Type
fType
;
}
;
}
#
endif
