#
ifndef
skgpu_graphite_precompile_PrecompileShader_DEFINED
#
define
skgpu_graphite_precompile_PrecompileShader_DEFINED
#
include
"
include
/
gpu
/
graphite
/
precompile
/
PrecompileBase
.
h
"
#
include
"
include
/
core
/
SkBlendMode
.
h
"
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
effects
/
SkGradientShader
.
h
"
class
SkColorSpace
;
namespace
skgpu
:
:
graphite
{
class
PrecompileBlender
;
class
PrecompileColorFilter
;
class
PrecompileShaderPriv
;
class
SK_API
PrecompileShader
:
public
PrecompileBase
{
public
:
sk_sp
<
PrecompileShader
>
makeWithLocalMatrix
(
bool
isPerspective
)
const
;
sk_sp
<
PrecompileShader
>
makeWithColorFilter
(
sk_sp
<
PrecompileColorFilter
>
)
const
;
sk_sp
<
PrecompileShader
>
makeWithWorkingColorSpace
(
sk_sp
<
SkColorSpace
>
)
const
;
PrecompileShaderPriv
priv
(
)
;
const
PrecompileShaderPriv
priv
(
)
const
;
protected
:
friend
class
PrecompileShaderPriv
;
PrecompileShader
(
)
:
PrecompileBase
(
Type
:
:
kShader
)
{
}
~
PrecompileShader
(
)
override
;
virtual
bool
isConstant
(
int
)
const
{
return
false
;
}
virtual
bool
isALocalMatrixShader
(
)
const
{
return
false
;
}
}
;
namespace
PrecompileShaders
{
SK_API
sk_sp
<
PrecompileShader
>
Empty
(
)
;
SK_API
sk_sp
<
PrecompileShader
>
Color
(
)
;
SK_API
sk_sp
<
PrecompileShader
>
Color
(
sk_sp
<
SkColorSpace
>
)
;
SK_API
sk_sp
<
PrecompileShader
>
Blend
(
SkSpan
<
const
SkBlendMode
>
blendModes
SkSpan
<
const
sk_sp
<
PrecompileShader
>
>
dsts
SkSpan
<
const
sk_sp
<
PrecompileShader
>
>
srcs
)
;
SK_API
sk_sp
<
PrecompileShader
>
Blend
(
SkSpan
<
const
sk_sp
<
PrecompileBlender
>
>
blenders
SkSpan
<
const
sk_sp
<
PrecompileShader
>
>
dsts
SkSpan
<
const
sk_sp
<
PrecompileShader
>
>
srcs
)
;
SK_API
sk_sp
<
PrecompileShader
>
CoordClamp
(
SkSpan
<
const
sk_sp
<
PrecompileShader
>
>
)
;
SK_API
sk_sp
<
PrecompileShader
>
Image
(
SkSpan
<
const
SkColorInfo
>
=
{
}
SkSpan
<
const
SkTileMode
>
=
{
}
)
;
SK_API
sk_sp
<
PrecompileShader
>
RawImage
(
SkSpan
<
const
SkColorInfo
>
=
{
}
SkSpan
<
const
SkTileMode
>
=
{
}
)
;
SK_API
sk_sp
<
PrecompileShader
>
YUVImage
(
)
;
SK_API
sk_sp
<
PrecompileShader
>
MakeFractalNoise
(
)
;
SK_API
sk_sp
<
PrecompileShader
>
MakeTurbulence
(
)
;
SK_API
sk_sp
<
PrecompileShader
>
LinearGradient
(
SkGradientShader
:
:
Interpolation
=
SkGradientShader
:
:
Interpolation
(
)
)
;
SK_API
sk_sp
<
PrecompileShader
>
RadialGradient
(
SkGradientShader
:
:
Interpolation
=
SkGradientShader
:
:
Interpolation
(
)
)
;
SK_API
sk_sp
<
PrecompileShader
>
TwoPointConicalGradient
(
SkGradientShader
:
:
Interpolation
=
SkGradientShader
:
:
Interpolation
(
)
)
;
SK_API
sk_sp
<
PrecompileShader
>
SweepGradient
(
SkGradientShader
:
:
Interpolation
=
SkGradientShader
:
:
Interpolation
(
)
)
;
SK_API
sk_sp
<
PrecompileShader
>
Picture
(
)
;
SK_API
sk_sp
<
PrecompileShader
>
LocalMatrix
(
SkSpan
<
const
sk_sp
<
PrecompileShader
>
>
wrapped
bool
isPerspective
=
false
)
;
SK_API
sk_sp
<
PrecompileShader
>
ColorFilter
(
SkSpan
<
const
sk_sp
<
PrecompileShader
>
>
shaders
SkSpan
<
const
sk_sp
<
PrecompileColorFilter
>
>
colorFilters
)
;
SK_API
sk_sp
<
PrecompileShader
>
WorkingColorSpace
(
SkSpan
<
const
sk_sp
<
PrecompileShader
>
>
shaders
SkSpan
<
const
sk_sp
<
SkColorSpace
>
>
colorSpaces
)
;
}
}
#
endif
