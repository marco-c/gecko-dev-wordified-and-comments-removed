#
ifndef
skgpu_graphite_precompile_PrecompileColorFilter_DEFINED
#
define
skgpu_graphite_precompile_PrecompileColorFilter_DEFINED
#
include
"
include
/
gpu
/
graphite
/
precompile
/
PrecompileBase
.
h
"
enum
class
SkBlendMode
;
namespace
skgpu
:
:
graphite
{
class
SK_API
PrecompileColorFilter
:
public
PrecompileBase
{
public
:
sk_sp
<
PrecompileColorFilter
>
makeComposed
(
sk_sp
<
PrecompileColorFilter
>
inner
)
const
;
protected
:
PrecompileColorFilter
(
)
:
PrecompileBase
(
Type
:
:
kColorFilter
)
{
}
~
PrecompileColorFilter
(
)
override
;
}
;
namespace
PrecompileColorFilters
{
SK_API
sk_sp
<
PrecompileColorFilter
>
Compose
(
SkSpan
<
const
sk_sp
<
PrecompileColorFilter
>
>
outer
SkSpan
<
const
sk_sp
<
PrecompileColorFilter
>
>
inner
)
;
SK_API
sk_sp
<
PrecompileColorFilter
>
Blend
(
SkSpan
<
const
SkBlendMode
>
blendModes
)
;
SK_API
sk_sp
<
PrecompileColorFilter
>
Blend
(
)
;
SK_API
sk_sp
<
PrecompileColorFilter
>
Matrix
(
)
;
SK_API
sk_sp
<
PrecompileColorFilter
>
HSLAMatrix
(
)
;
SK_API
sk_sp
<
PrecompileColorFilter
>
LinearToSRGBGamma
(
)
;
SK_API
sk_sp
<
PrecompileColorFilter
>
SRGBToLinearGamma
(
)
;
SK_API
sk_sp
<
PrecompileColorFilter
>
Lerp
(
SkSpan
<
const
sk_sp
<
PrecompileColorFilter
>
>
dstOptions
SkSpan
<
const
sk_sp
<
PrecompileColorFilter
>
>
srcOptions
)
;
SK_API
sk_sp
<
PrecompileColorFilter
>
Table
(
)
;
SK_API
sk_sp
<
PrecompileColorFilter
>
Lighting
(
)
;
SK_API
sk_sp
<
PrecompileColorFilter
>
HighContrast
(
)
;
SK_API
sk_sp
<
PrecompileColorFilter
>
Luma
(
)
;
SK_API
sk_sp
<
PrecompileColorFilter
>
Overdraw
(
)
;
}
}
#
endif
