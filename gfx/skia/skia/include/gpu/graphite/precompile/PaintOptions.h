#
ifndef
skgpu_graphite_precompile_PaintOptions_DEFINED
#
define
skgpu_graphite_precompile_PaintOptions_DEFINED
#
include
"
include
/
core
/
SkBlendMode
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSpan
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
"
include
/
private
/
base
/
SkTDArray
.
h
"
#
include
<
functional
>
namespace
skgpu
:
:
graphite
{
class
PrecompileBlender
;
class
PrecompileColorFilter
;
class
PrecompileImageFilter
;
class
PrecompileMaskFilter
;
class
PrecompileShader
;
enum
class
Coverage
;
enum
DrawTypeFlags
:
uint16_t
;
enum
class
PrecompileImageFilterFlags
:
uint32_t
;
class
KeyContext
;
class
PaintOptionsPriv
;
class
PaintParamsKeyBuilder
;
class
PipelineDataGatherer
;
struct
RenderPassDesc
;
class
UniquePaintParamsID
;
class
SK_API
PaintOptions
{
public
:
PaintOptions
(
)
;
PaintOptions
(
const
PaintOptions
&
)
;
~
PaintOptions
(
)
;
PaintOptions
&
operator
=
(
const
PaintOptions
&
)
;
void
setShaders
(
SkSpan
<
const
sk_sp
<
PrecompileShader
>
>
shaders
)
;
SkSpan
<
const
sk_sp
<
PrecompileShader
>
>
getShaders
(
)
const
{
return
SkSpan
<
const
sk_sp
<
PrecompileShader
>
>
(
fShaderOptions
)
;
}
void
setImageFilters
(
SkSpan
<
const
sk_sp
<
PrecompileImageFilter
>
>
imageFilters
)
;
SkSpan
<
const
sk_sp
<
PrecompileImageFilter
>
>
getImageFilters
(
)
const
{
return
SkSpan
<
const
sk_sp
<
PrecompileImageFilter
>
>
(
fImageFilterOptions
)
;
}
void
setMaskFilters
(
SkSpan
<
const
sk_sp
<
PrecompileMaskFilter
>
>
maskFilters
)
;
SkSpan
<
const
sk_sp
<
PrecompileMaskFilter
>
>
getMaskFilters
(
)
const
{
return
SkSpan
<
const
sk_sp
<
PrecompileMaskFilter
>
>
(
fMaskFilterOptions
)
;
}
void
setColorFilters
(
SkSpan
<
const
sk_sp
<
PrecompileColorFilter
>
>
colorFilters
)
;
SkSpan
<
const
sk_sp
<
PrecompileColorFilter
>
>
getColorFilters
(
)
const
{
return
SkSpan
<
const
sk_sp
<
PrecompileColorFilter
>
>
(
fColorFilterOptions
)
;
}
void
setBlendModes
(
SkSpan
<
const
SkBlendMode
>
blendModes
)
;
SkSpan
<
const
SkBlendMode
>
getBlendModes
(
)
const
{
return
SkSpan
<
const
SkBlendMode
>
(
fBlendModeOptions
.
data
(
)
fBlendModeOptions
.
size
(
)
)
;
}
void
setBlenders
(
SkSpan
<
const
sk_sp
<
PrecompileBlender
>
>
blenders
)
;
SkSpan
<
const
sk_sp
<
PrecompileBlender
>
>
getBlenders
(
)
const
{
return
SkSpan
<
const
sk_sp
<
PrecompileBlender
>
>
(
fBlenderOptions
)
;
}
void
setDither
(
bool
dither
)
{
fDither
=
dither
;
}
bool
isDither
(
)
const
{
return
fDither
;
}
PaintOptionsPriv
priv
(
)
;
const
PaintOptionsPriv
priv
(
)
const
;
private
:
friend
class
PaintOptionsPriv
;
friend
class
PrecompileImageFilter
;
friend
class
PrecompileMaskFilter
;
void
addColorFilter
(
sk_sp
<
PrecompileColorFilter
>
cf
)
;
void
addBlendMode
(
SkBlendMode
bm
)
{
fBlendModeOptions
.
push_back
(
bm
)
;
}
void
setClipShaders
(
SkSpan
<
const
sk_sp
<
PrecompileShader
>
>
clipShaders
)
;
int
numShaderCombinations
(
)
const
;
int
numColorFilterCombinations
(
)
const
;
int
numBlendCombinations
(
)
const
;
int
numClipShaderCombinations
(
)
const
;
int
numCombinations
(
)
const
;
void
createKey
(
const
KeyContext
&
PaintParamsKeyBuilder
*
PipelineDataGatherer
*
int
desiredCombination
bool
addPrimitiveBlender
Coverage
coverage
)
const
;
typedef
std
:
:
function
<
void
(
UniquePaintParamsID
id
DrawTypeFlags
bool
withPrimitiveBlender
Coverage
const
RenderPassDesc
&
)
>
ProcessCombination
;
void
buildCombinations
(
const
KeyContext
&
PipelineDataGatherer
*
DrawTypeFlags
bool
addPrimitiveBlender
Coverage
const
RenderPassDesc
&
const
ProcessCombination
&
)
const
;
skia_private
:
:
TArray
<
sk_sp
<
PrecompileShader
>
>
fShaderOptions
;
skia_private
:
:
TArray
<
sk_sp
<
PrecompileColorFilter
>
>
fColorFilterOptions
;
skia_private
:
:
TArray
<
SkBlendMode
>
fBlendModeOptions
;
skia_private
:
:
TArray
<
sk_sp
<
PrecompileBlender
>
>
fBlenderOptions
;
skia_private
:
:
TArray
<
sk_sp
<
PrecompileShader
>
>
fClipShaderOptions
;
skia_private
:
:
TArray
<
sk_sp
<
PrecompileImageFilter
>
>
fImageFilterOptions
;
skia_private
:
:
TArray
<
sk_sp
<
PrecompileMaskFilter
>
>
fMaskFilterOptions
;
bool
fDither
=
false
;
}
;
}
#
endif
