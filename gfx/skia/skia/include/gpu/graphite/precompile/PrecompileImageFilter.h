#
ifndef
skgpu_graphite_precompile_PrecompileImageFilter_DEFINED
#
define
skgpu_graphite_precompile_PrecompileImageFilter_DEFINED
#
include
"
include
/
gpu
/
graphite
/
precompile
/
PrecompileBase
.
h
"
#
include
"
include
/
core
/
SkBlendMode
.
h
"
#
include
"
include
/
gpu
/
graphite
/
precompile
/
PaintOptions
.
h
"
#
include
"
include
/
private
/
base
/
SkTemplates
.
h
"
namespace
skgpu
:
:
graphite
{
class
PrecompileBlender
;
class
PrecompileColorFilter
;
class
PrecompileImageFilterPriv
;
class
SK_API
PrecompileImageFilter
:
public
PrecompileBase
{
public
:
~
PrecompileImageFilter
(
)
override
;
PrecompileImageFilterPriv
priv
(
)
;
const
PrecompileImageFilterPriv
priv
(
)
const
;
protected
:
PrecompileImageFilter
(
SkSpan
<
sk_sp
<
PrecompileImageFilter
>
>
inputs
)
;
private
:
friend
class
PaintOptions
;
friend
class
PrecompileImageFilterPriv
;
int
countInputs
(
)
const
{
return
fInputs
.
count
(
)
;
}
const
PrecompileImageFilter
*
getInput
(
int
index
)
const
{
SkASSERT
(
index
<
this
-
>
countInputs
(
)
)
;
return
fInputs
[
index
]
.
get
(
)
;
}
virtual
sk_sp
<
PrecompileColorFilter
>
isColorFilterNode
(
)
const
{
return
nullptr
;
}
sk_sp
<
PrecompileColorFilter
>
asAColorFilter
(
)
const
;
void
addToKey
(
const
KeyContext
&
PaintParamsKeyBuilder
*
PipelineDataGatherer
*
int
)
const
final
{
SkASSERT
(
false
)
;
}
virtual
void
onCreatePipelines
(
const
KeyContext
&
PipelineDataGatherer
*
const
RenderPassDesc
&
const
PaintOptions
:
:
ProcessCombination
&
)
const
=
0
;
void
createPipelines
(
const
KeyContext
&
PipelineDataGatherer
*
const
RenderPassDesc
&
const
PaintOptions
:
:
ProcessCombination
&
)
;
skia_private
:
:
AutoSTArray
<
2
sk_sp
<
PrecompileImageFilter
>
>
fInputs
;
}
;
namespace
PrecompileImageFilters
{
SK_API
sk_sp
<
PrecompileImageFilter
>
Arithmetic
(
sk_sp
<
PrecompileImageFilter
>
background
sk_sp
<
PrecompileImageFilter
>
foreground
)
;
SK_API
sk_sp
<
PrecompileImageFilter
>
Blend
(
SkBlendMode
bm
sk_sp
<
PrecompileImageFilter
>
background
sk_sp
<
PrecompileImageFilter
>
foreground
)
;
SK_API
sk_sp
<
PrecompileImageFilter
>
Blend
(
sk_sp
<
PrecompileBlender
>
blender
sk_sp
<
PrecompileImageFilter
>
background
sk_sp
<
PrecompileImageFilter
>
foreground
)
;
SK_API
sk_sp
<
PrecompileImageFilter
>
Blur
(
sk_sp
<
PrecompileImageFilter
>
input
)
;
SK_API
sk_sp
<
PrecompileImageFilter
>
ColorFilter
(
sk_sp
<
PrecompileColorFilter
>
colorFilter
sk_sp
<
PrecompileImageFilter
>
input
)
;
SK_API
sk_sp
<
PrecompileImageFilter
>
DisplacementMap
(
sk_sp
<
PrecompileImageFilter
>
input
)
;
SK_API
sk_sp
<
PrecompileImageFilter
>
Lighting
(
sk_sp
<
PrecompileImageFilter
>
input
)
;
SK_API
sk_sp
<
PrecompileImageFilter
>
MatrixConvolution
(
sk_sp
<
PrecompileImageFilter
>
input
)
;
SK_API
sk_sp
<
PrecompileImageFilter
>
Morphology
(
sk_sp
<
PrecompileImageFilter
>
input
)
;
}
}
#
endif
