#
ifndef
skgpu_graphite_Surface_DEFINED
#
define
skgpu_graphite_Surface_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSurface
.
h
"
#
include
"
include
/
gpu
/
GpuTypes
.
h
"
class
SkImage
;
struct
SkImageInfo
;
namespace
skgpu
:
:
graphite
{
class
BackendTexture
;
class
Recorder
;
}
namespace
SkSurfaces
{
using
ReleaseContext
=
void
*
;
using
TextureReleaseProc
=
void
(
*
)
(
ReleaseContext
)
;
SK_API
sk_sp
<
SkImage
>
AsImage
(
sk_sp
<
const
SkSurface
>
)
;
SK_API
sk_sp
<
SkImage
>
AsImageCopy
(
sk_sp
<
const
SkSurface
>
const
SkIRect
*
subset
=
nullptr
skgpu
:
:
Mipmapped
=
skgpu
:
:
Mipmapped
:
:
kNo
)
;
SK_API
sk_sp
<
SkSurface
>
RenderTarget
(
skgpu
:
:
graphite
:
:
Recorder
*
const
SkImageInfo
&
imageInfo
skgpu
:
:
Mipmapped
=
skgpu
:
:
Mipmapped
:
:
kNo
const
SkSurfaceProps
*
surfaceProps
=
nullptr
)
;
SK_API
sk_sp
<
SkSurface
>
WrapBackendTexture
(
skgpu
:
:
graphite
:
:
Recorder
*
const
skgpu
:
:
graphite
:
:
BackendTexture
&
SkColorType
colorType
sk_sp
<
SkColorSpace
>
colorSpace
const
SkSurfaceProps
*
props
TextureReleaseProc
=
nullptr
ReleaseContext
=
nullptr
)
;
}
#
endif
