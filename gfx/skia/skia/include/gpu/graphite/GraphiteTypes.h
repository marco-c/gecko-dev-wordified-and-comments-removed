#
ifndef
skgpu_graphite_GraphiteTypes_DEFINED
#
define
skgpu_graphite_GraphiteTypes_DEFINED
#
include
"
include
/
core
/
SkPoint
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
gpu
/
GpuTypes
.
h
"
#
include
<
memory
>
class
SkSurface
;
namespace
skgpu
{
class
MutableTextureState
;
}
namespace
skgpu
:
:
graphite
{
class
BackendSemaphore
;
class
Recording
;
class
Task
;
using
GpuFinishedContext
=
void
*
;
using
GpuFinishedProc
=
void
(
*
)
(
GpuFinishedContext
finishedContext
CallbackResult
)
;
struct
InsertRecordingInfo
{
Recording
*
fRecording
=
nullptr
;
SkSurface
*
fTargetSurface
=
nullptr
;
SkIVector
fTargetTranslation
=
{
0
0
}
;
MutableTextureState
*
fTargetTextureState
=
nullptr
;
size_t
fNumWaitSemaphores
=
0
;
BackendSemaphore
*
fWaitSemaphores
=
nullptr
;
size_t
fNumSignalSemaphores
=
0
;
BackendSemaphore
*
fSignalSemaphores
=
nullptr
;
GpuFinishedContext
fFinishedContext
=
nullptr
;
GpuFinishedProc
fFinishedProc
=
nullptr
;
}
;
struct
InsertFinishInfo
{
GpuFinishedContext
fFinishedContext
=
nullptr
;
GpuFinishedProc
fFinishedProc
=
nullptr
;
}
;
enum
class
SyncToCpu
:
bool
{
kYes
=
true
kNo
=
false
}
;
enum
class
Volatile
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
DrawTypeFlags
:
uint8_t
{
kNone
=
0b0000
kText
=
0b0001
kDrawVertices
=
0b0010
kSimpleShape
=
0b0100
kNonSimpleShape
=
0b1000
kShape
=
kSimpleShape
|
kNonSimpleShape
kMostCommon
=
kText
|
kShape
kAll
=
kText
|
kDrawVertices
|
kShape
}
;
}
#
endif
