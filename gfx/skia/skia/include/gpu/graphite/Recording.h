#
ifndef
skgpu_graphite_Recording_DEFINED
#
define
skgpu_graphite_Recording_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
<
memory
>
#
include
<
unordered_set
>
#
include
<
vector
>
namespace
skgpu
{
class
RefCntedCallback
;
}
namespace
skgpu
:
:
graphite
{
class
CommandBuffer
;
class
RecordingPriv
;
class
Resource
;
class
ResourceProvider
;
class
TaskList
;
class
Texture
;
class
TextureInfo
;
class
TextureProxy
;
class
SK_API
Recording
final
{
public
:
~
Recording
(
)
;
RecordingPriv
priv
(
)
;
private
:
friend
class
Recorder
;
friend
class
RecordingPriv
;
class
LazyProxyData
{
public
:
LazyProxyData
(
const
TextureInfo
&
)
;
TextureProxy
*
lazyProxy
(
)
;
sk_sp
<
TextureProxy
>
refLazyProxy
(
)
;
bool
lazyInstantiate
(
ResourceProvider
*
sk_sp
<
Texture
>
)
;
private
:
sk_sp
<
Texture
>
fTarget
;
sk_sp
<
TextureProxy
>
fTargetProxy
;
}
;
struct
ProxyHash
{
std
:
:
size_t
operator
(
)
(
const
sk_sp
<
TextureProxy
>
&
proxy
)
const
;
}
;
Recording
(
uint32_t
uniqueID
uint32_t
recorderID
std
:
:
unordered_set
<
sk_sp
<
TextureProxy
>
ProxyHash
>
&
&
nonVolatileLazyProxies
std
:
:
unordered_set
<
sk_sp
<
TextureProxy
>
ProxyHash
>
&
&
volatileLazyProxies
std
:
:
unique_ptr
<
LazyProxyData
>
targetProxyData
skia_private
:
:
TArray
<
sk_sp
<
RefCntedCallback
>
>
&
&
finishedProcs
)
;
bool
addCommands
(
CommandBuffer
*
ResourceProvider
*
)
;
void
addResourceRef
(
sk_sp
<
Resource
>
)
;
uint32_t
fUniqueID
;
uint32_t
fRecorderID
;
std
:
:
unique_ptr
<
TaskList
>
fRootTaskList
;
std
:
:
vector
<
sk_sp
<
Resource
>
>
fExtraResourceRefs
;
std
:
:
unordered_set
<
sk_sp
<
TextureProxy
>
ProxyHash
>
fNonVolatileLazyProxies
;
std
:
:
unordered_set
<
sk_sp
<
TextureProxy
>
ProxyHash
>
fVolatileLazyProxies
;
std
:
:
unique_ptr
<
LazyProxyData
>
fTargetProxyData
;
skia_private
:
:
TArray
<
sk_sp
<
RefCntedCallback
>
>
fFinishedProcs
;
}
;
}
#
endif
