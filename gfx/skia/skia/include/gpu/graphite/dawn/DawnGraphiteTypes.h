#
ifndef
skgpu_graphite_DawnTypes_DEFINED
#
define
skgpu_graphite_DawnTypes_DEFINED
#
include
"
include
/
core
/
SkSize
.
h
"
#
include
"
include
/
gpu
/
graphite
/
GraphiteTypes
.
h
"
#
include
"
include
/
gpu
/
graphite
/
TextureInfo
.
h
"
#
include
"
include
/
private
/
base
/
SkAPI
.
h
"
#
include
"
webgpu
/
webgpu_cpp
.
h
"
class
SkStream
;
class
SkWStream
;
namespace
skgpu
:
:
graphite
{
class
BackendTexture
;
class
SK_API
DawnTextureInfo
final
:
public
TextureInfo
:
:
Data
{
public
:
wgpu
:
:
TextureFormat
fFormat
=
wgpu
:
:
TextureFormat
:
:
Undefined
;
wgpu
:
:
TextureFormat
fViewFormat
=
wgpu
:
:
TextureFormat
:
:
Undefined
;
wgpu
:
:
TextureUsage
fUsage
=
wgpu
:
:
TextureUsage
:
:
None
;
wgpu
:
:
TextureAspect
fAspect
=
wgpu
:
:
TextureAspect
:
:
All
;
uint32_t
fSlice
=
0
;
#
if
!
defined
(
__EMSCRIPTEN__
)
wgpu
:
:
YCbCrVkDescriptor
fYcbcrVkDescriptor
=
{
}
;
#
endif
wgpu
:
:
TextureFormat
getViewFormat
(
)
const
{
return
fViewFormat
!
=
wgpu
:
:
TextureFormat
:
:
Undefined
?
fViewFormat
:
fFormat
;
}
DawnTextureInfo
(
)
=
default
;
DawnTextureInfo
(
WGPUTexture
texture
)
;
DawnTextureInfo
(
uint32_t
sampleCount
Mipmapped
mipmapped
wgpu
:
:
TextureFormat
format
wgpu
:
:
TextureUsage
usage
wgpu
:
:
TextureAspect
aspect
)
:
DawnTextureInfo
(
sampleCount
mipmapped
format
format
usage
aspect
0
)
{
}
DawnTextureInfo
(
uint32_t
sampleCount
Mipmapped
mipmapped
wgpu
:
:
TextureFormat
format
wgpu
:
:
TextureFormat
viewFormat
wgpu
:
:
TextureUsage
usage
wgpu
:
:
TextureAspect
aspect
uint32_t
slice
)
:
Data
(
sampleCount
mipmapped
)
fFormat
(
format
)
fViewFormat
(
viewFormat
)
fUsage
(
usage
)
fAspect
(
aspect
)
fSlice
(
slice
)
{
}
#
if
!
defined
(
__EMSCRIPTEN__
)
DawnTextureInfo
(
uint32_t
sampleCount
Mipmapped
mipmapped
wgpu
:
:
TextureFormat
format
wgpu
:
:
TextureFormat
viewFormat
wgpu
:
:
TextureUsage
usage
wgpu
:
:
TextureAspect
aspect
uint32_t
slice
wgpu
:
:
YCbCrVkDescriptor
ycbcrVkDescriptor
)
:
Data
(
sampleCount
mipmapped
)
fFormat
(
format
)
fViewFormat
(
viewFormat
)
fUsage
(
usage
)
fAspect
(
aspect
)
fSlice
(
slice
)
fYcbcrVkDescriptor
(
ycbcrVkDescriptor
)
{
}
#
endif
private
:
friend
class
TextureInfo
;
friend
class
TextureInfoPriv
;
static
constexpr
skgpu
:
:
BackendApi
kBackend
=
skgpu
:
:
BackendApi
:
:
kDawn
;
Protected
isProtected
(
)
const
{
return
Protected
:
:
kNo
;
}
TextureFormat
viewFormat
(
)
const
;
bool
serialize
(
SkWStream
*
)
const
;
bool
deserialize
(
SkStream
*
)
;
SkString
toBackendString
(
)
const
override
;
void
copyTo
(
TextureInfo
:
:
AnyTextureInfoData
&
dstData
)
const
override
{
dstData
.
emplace
<
DawnTextureInfo
>
(
*
this
)
;
}
bool
isCompatible
(
const
TextureInfo
&
that
bool
requireExact
)
const
override
;
}
;
namespace
TextureInfos
{
SK_API
TextureInfo
MakeDawn
(
const
DawnTextureInfo
&
dawnInfo
)
;
SK_API
bool
GetDawnTextureInfo
(
const
TextureInfo
&
DawnTextureInfo
*
)
;
}
namespace
BackendTextures
{
SK_API
BackendTexture
MakeDawn
(
WGPUTexture
)
;
SK_API
BackendTexture
MakeDawn
(
SkISize
planeDimensions
const
DawnTextureInfo
&
WGPUTexture
)
;
SK_API
BackendTexture
MakeDawn
(
SkISize
dimensions
const
DawnTextureInfo
&
info
WGPUTextureView
textureView
)
;
}
}
#
endif
