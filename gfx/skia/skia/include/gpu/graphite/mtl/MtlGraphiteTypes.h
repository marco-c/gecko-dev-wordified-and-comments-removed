#
ifndef
skgpu_graphite_MtlGraphiteTypes_DEFINED
#
define
skgpu_graphite_MtlGraphiteTypes_DEFINED
#
include
"
include
/
gpu
/
graphite
/
GraphiteTypes
.
h
"
#
include
"
include
/
ports
/
SkCFObject
.
h
"
#
ifdef
__APPLE__
#
include
<
CoreFoundation
/
CoreFoundation
.
h
>
#
include
<
TargetConditionals
.
h
>
#
if
TARGET_OS_SIMULATOR
#
define
SK_API_AVAILABLE_CA_METAL_LAYER
SK_API_AVAILABLE
(
macos
(
10
.
11
)
ios
(
13
.
0
)
tvos
(
13
.
0
)
)
#
else
#
define
SK_API_AVAILABLE_CA_METAL_LAYER
SK_API_AVAILABLE
(
macos
(
10
.
11
)
ios
(
8
.
0
)
tvos
(
9
.
0
)
)
#
endif
#
endif
namespace
skgpu
:
:
graphite
{
using
MtlPixelFormat
=
unsigned
int
;
using
MtlTextureUsage
=
unsigned
int
;
using
MtlStorageMode
=
unsigned
int
;
struct
MtlTextureInfo
{
uint32_t
fSampleCount
=
1
;
skgpu
:
:
Mipmapped
fMipmapped
=
skgpu
:
:
Mipmapped
:
:
kNo
;
MtlPixelFormat
fFormat
=
0
;
MtlTextureUsage
fUsage
=
0
;
MtlStorageMode
fStorageMode
=
0
;
bool
fFramebufferOnly
=
false
;
MtlTextureInfo
(
)
=
default
;
MtlTextureInfo
(
CFTypeRef
mtlTexture
)
;
MtlTextureInfo
(
uint32_t
sampleCount
skgpu
:
:
Mipmapped
mipmapped
MtlPixelFormat
format
MtlTextureUsage
usage
MtlStorageMode
storageMode
bool
framebufferOnly
)
:
fSampleCount
(
sampleCount
)
fMipmapped
(
mipmapped
)
fFormat
(
format
)
fUsage
(
usage
)
fStorageMode
(
storageMode
)
fFramebufferOnly
(
framebufferOnly
)
{
}
}
;
}
#
endif
