#
ifndef
skgpu_graphite_BackendTexture_DEFINED
#
define
skgpu_graphite_BackendTexture_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSize
.
h
"
#
include
"
include
/
gpu
/
graphite
/
GraphiteTypes
.
h
"
#
include
"
include
/
gpu
/
graphite
/
TextureInfo
.
h
"
#
ifdef
SK_DAWN
#
include
"
include
/
gpu
/
graphite
/
dawn
/
DawnTypes
.
h
"
#
endif
#
ifdef
SK_METAL
#
include
"
include
/
gpu
/
graphite
/
mtl
/
MtlGraphiteTypes
.
h
"
#
endif
#
ifdef
SK_VULKAN
#
include
"
include
/
private
/
gpu
/
vk
/
SkiaVulkan
.
h
"
#
endif
namespace
skgpu
{
class
MutableTextureState
;
class
MutableTextureStateRef
;
}
namespace
skgpu
:
:
graphite
{
class
BackendTexture
{
public
:
BackendTexture
(
)
;
#
ifdef
SK_DAWN
BackendTexture
(
wgpu
:
:
Texture
texture
)
;
BackendTexture
(
SkISize
dimensions
const
DawnTextureInfo
&
info
wgpu
:
:
TextureView
textureView
)
;
#
endif
#
ifdef
SK_METAL
BackendTexture
(
SkISize
dimensions
MtlHandle
mtlTexture
)
;
#
endif
#
ifdef
SK_VULKAN
BackendTexture
(
SkISize
dimensions
const
VulkanTextureInfo
&
VkImageLayout
uint32_t
queueFamilyIndex
VkImage
)
;
#
endif
BackendTexture
(
const
BackendTexture
&
)
;
~
BackendTexture
(
)
;
BackendTexture
&
operator
=
(
const
BackendTexture
&
)
;
bool
operator
=
=
(
const
BackendTexture
&
)
const
;
bool
operator
!
=
(
const
BackendTexture
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
bool
isValid
(
)
const
{
return
fInfo
.
isValid
(
)
;
}
BackendApi
backend
(
)
const
{
return
fInfo
.
backend
(
)
;
}
SkISize
dimensions
(
)
const
{
return
fDimensions
;
}
const
TextureInfo
&
info
(
)
const
{
return
fInfo
;
}
void
setMutableState
(
const
skgpu
:
:
MutableTextureState
&
)
;
#
ifdef
SK_DAWN
wgpu
:
:
Texture
getDawnTexture
(
)
const
;
wgpu
:
:
TextureView
getDawnTextureView
(
)
const
;
#
endif
#
ifdef
SK_METAL
MtlHandle
getMtlTexture
(
)
const
;
#
endif
#
ifdef
SK_VULKAN
VkImage
getVkImage
(
)
const
;
VkImageLayout
getVkImageLayout
(
)
const
;
uint32_t
getVkQueueFamilyIndex
(
)
const
;
#
endif
private
:
sk_sp
<
MutableTextureStateRef
>
mutableState
(
)
const
;
SkISize
fDimensions
;
TextureInfo
fInfo
;
sk_sp
<
MutableTextureStateRef
>
fMutableState
;
#
ifdef
SK_DAWN
struct
Dawn
{
Dawn
(
wgpu
:
:
Texture
texture
)
:
fTexture
(
std
:
:
move
(
texture
)
)
{
}
Dawn
(
wgpu
:
:
TextureView
textureView
)
:
fTextureView
(
std
:
:
move
(
textureView
)
)
{
}
bool
operator
=
=
(
const
Dawn
&
that
)
const
{
return
fTexture
.
Get
(
)
=
=
that
.
fTexture
.
Get
(
)
&
&
fTextureView
.
Get
(
)
=
=
that
.
fTextureView
.
Get
(
)
;
}
bool
operator
!
=
(
const
Dawn
&
that
)
const
{
return
!
this
-
>
operator
=
=
(
that
)
;
}
Dawn
&
operator
=
(
const
Dawn
&
that
)
{
fTexture
=
that
.
fTexture
;
fTextureView
=
that
.
fTextureView
;
return
*
this
;
}
wgpu
:
:
Texture
fTexture
;
wgpu
:
:
TextureView
fTextureView
;
}
;
#
endif
union
{
#
ifdef
SK_DAWN
Dawn
fDawn
;
#
endif
#
ifdef
SK_METAL
MtlHandle
fMtlTexture
;
#
endif
#
ifdef
SK_VULKAN
VkImage
fVkImage
;
#
endif
}
;
}
;
}
#
endif
