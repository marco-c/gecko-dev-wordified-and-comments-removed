#
ifndef
skgpu_graphite_Recorder_DEFINED
#
define
skgpu_graphite_Recorder_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSize
.
h
"
#
include
"
include
/
gpu
/
graphite
/
GraphiteTypes
.
h
"
#
include
"
include
/
gpu
/
graphite
/
Recording
.
h
"
#
include
"
include
/
private
/
base
/
SingleOwner
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
<
chrono
>
struct
AHardwareBuffer
;
class
SkCanvas
;
struct
SkImageInfo
;
class
SkPixmap
;
class
SkTraceMemoryDump
;
namespace
skgpu
{
class
RefCntedCallback
;
class
TokenTracker
;
}
namespace
sktext
:
:
gpu
{
class
StrikeCache
;
class
TextBlobRedrawCoordinator
;
}
namespace
skgpu
:
:
graphite
{
class
AtlasProvider
;
class
BackendTexture
;
class
Caps
;
class
Context
;
class
Device
;
class
DrawBufferManager
;
class
GlobalCache
;
class
ImageProvider
;
class
ProxyCache
;
class
ProxyReadCountMap
;
class
RecorderPriv
;
class
ResourceProvider
;
class
RuntimeEffectDictionary
;
class
SharedContext
;
class
Task
;
class
TaskList
;
class
TextureDataBlock
;
class
TextureInfo
;
class
UniformDataBlock
;
class
UploadBufferManager
;
class
UploadList
;
template
<
typename
T
>
class
PipelineDataCache
;
using
TextureDataCache
=
PipelineDataCache
<
TextureDataBlock
>
;
struct
SK_API
RecorderOptions
final
{
RecorderOptions
(
)
;
RecorderOptions
(
const
RecorderOptions
&
)
;
~
RecorderOptions
(
)
;
sk_sp
<
ImageProvider
>
fImageProvider
;
static
constexpr
size_t
kDefaultRecorderBudget
=
256
*
(
1
<
<
20
)
;
size_t
fGpuBudgetInBytes
=
kDefaultRecorderBudget
;
}
;
class
SK_API
Recorder
final
{
public
:
Recorder
(
const
Recorder
&
)
=
delete
;
Recorder
(
Recorder
&
&
)
=
delete
;
Recorder
&
operator
=
(
const
Recorder
&
)
=
delete
;
Recorder
&
operator
=
(
Recorder
&
&
)
=
delete
;
~
Recorder
(
)
;
BackendApi
backend
(
)
const
;
std
:
:
unique_ptr
<
Recording
>
snap
(
)
;
ImageProvider
*
clientImageProvider
(
)
{
return
fClientImageProvider
.
get
(
)
;
}
const
ImageProvider
*
clientImageProvider
(
)
const
{
return
fClientImageProvider
.
get
(
)
;
}
int
maxTextureSize
(
)
const
;
BackendTexture
createBackendTexture
(
SkISize
dimensions
const
TextureInfo
&
)
;
#
ifdef
SK_BUILD_FOR_ANDROID
BackendTexture
createBackendTexture
(
AHardwareBuffer
*
bool
isRenderable
bool
isProtectedContent
SkISize
dimensions
bool
fromAndroidWindow
=
false
)
const
;
#
endif
bool
updateBackendTexture
(
const
BackendTexture
&
const
SkPixmap
srcData
[
]
int
numLevels
GpuFinishedProc
=
nullptr
GpuFinishedContext
=
nullptr
)
;
bool
updateCompressedBackendTexture
(
const
BackendTexture
&
const
void
*
data
size_t
dataSize
GpuFinishedProc
=
nullptr
GpuFinishedContext
=
nullptr
)
;
void
deleteBackendTexture
(
const
BackendTexture
&
)
;
void
addFinishInfo
(
const
InsertFinishInfo
&
)
;
SkCanvas
*
makeDeferredCanvas
(
const
SkImageInfo
&
const
TextureInfo
&
)
;
void
freeGpuResources
(
)
;
void
performDeferredCleanup
(
std
:
:
chrono
:
:
milliseconds
msNotUsed
)
;
size_t
currentBudgetedBytes
(
)
const
;
size_t
currentPurgeableBytes
(
)
const
;
size_t
maxBudgetedBytes
(
)
const
;
void
dumpMemoryStatistics
(
SkTraceMemoryDump
*
traceMemoryDump
)
const
;
RecorderPriv
priv
(
)
;
const
RecorderPriv
priv
(
)
const
;
private
:
friend
class
Context
;
friend
class
Device
;
friend
class
RecorderPriv
;
Recorder
(
sk_sp
<
SharedContext
>
const
RecorderOptions
&
const
Context
*
)
;
SingleOwner
*
singleOwner
(
)
const
{
return
&
fSingleOwner
;
}
void
registerDevice
(
sk_sp
<
Device
>
)
;
void
deregisterDevice
(
const
Device
*
)
;
sk_sp
<
SharedContext
>
fSharedContext
;
ResourceProvider
*
fResourceProvider
;
std
:
:
unique_ptr
<
ResourceProvider
>
fOwnedResourceProvider
;
std
:
:
unique_ptr
<
RuntimeEffectDictionary
>
fRuntimeEffectDict
;
std
:
:
unique_ptr
<
TaskList
>
fRootTaskList
;
std
:
:
unique_ptr
<
UploadList
>
fRootUploads
;
std
:
:
unique_ptr
<
TextureDataCache
>
fTextureDataCache
;
std
:
:
unique_ptr
<
DrawBufferManager
>
fDrawBufferManager
;
std
:
:
unique_ptr
<
UploadBufferManager
>
fUploadBufferManager
;
std
:
:
unique_ptr
<
ProxyReadCountMap
>
fProxyReadCounts
;
skia_private
:
:
TArray
<
sk_sp
<
Device
>
>
fTrackedDevices
;
int
fFlushingDevicesIndex
=
-
1
;
uint32_t
fUniqueID
;
uint32_t
fNextRecordingID
=
1
;
std
:
:
unique_ptr
<
AtlasProvider
>
fAtlasProvider
;
std
:
:
unique_ptr
<
TokenTracker
>
fTokenTracker
;
std
:
:
unique_ptr
<
sktext
:
:
gpu
:
:
StrikeCache
>
fStrikeCache
;
std
:
:
unique_ptr
<
sktext
:
:
gpu
:
:
TextBlobRedrawCoordinator
>
fTextBlobCache
;
sk_sp
<
ImageProvider
>
fClientImageProvider
;
mutable
SingleOwner
fSingleOwner
;
sk_sp
<
Device
>
fTargetProxyDevice
;
std
:
:
unique_ptr
<
SkCanvas
>
fTargetProxyCanvas
;
std
:
:
unique_ptr
<
Recording
:
:
LazyProxyData
>
fTargetProxyData
;
skia_private
:
:
TArray
<
sk_sp
<
RefCntedCallback
>
>
fFinishedProcs
;
#
if
defined
(
GPU_TEST_UTILS
)
Context
*
fContext
=
nullptr
;
#
endif
}
;
}
#
endif
