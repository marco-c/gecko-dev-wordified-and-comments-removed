#
ifndef
skgpu_graphite_Image_DEFINED
#
define
skgpu_graphite_Image_DEFINED
#
include
"
include
/
core
/
SkColorSpace
.
h
"
#
include
"
include
/
core
/
SkImage
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSpan
.
h
"
#
include
"
include
/
gpu
/
GpuTypes
.
h
"
#
include
<
string_view
>
#
include
<
tuple
>
class
SkYUVAInfo
;
class
SkYUVAPixmaps
;
struct
SkIRect
;
namespace
skgpu
:
:
graphite
{
class
BackendTexture
;
class
Recorder
;
class
TextureInfo
;
class
YUVABackendTextureInfo
;
class
YUVABackendTextures
;
enum
class
Volatile
:
bool
;
}
namespace
SkImages
{
enum
class
GenerateMipmapsFromBase
:
bool
{
kNo
kYes
}
;
using
TextureReleaseProc
=
void
(
*
)
(
ReleaseContext
)
;
using
GraphitePromiseImageContext
=
void
*
;
using
GraphitePromiseTextureFulfillContext
=
void
*
;
using
GraphitePromiseTextureReleaseContext
=
void
*
;
using
GraphitePromiseTextureFulfillProc
=
std
:
:
tuple
<
skgpu
:
:
graphite
:
:
BackendTexture
GraphitePromiseTextureReleaseContext
>
(
*
)
(
GraphitePromiseTextureFulfillContext
)
;
using
GraphitePromiseImageReleaseProc
=
void
(
*
)
(
GraphitePromiseImageContext
)
;
using
GraphitePromiseTextureReleaseProc
=
void
(
*
)
(
GraphitePromiseTextureReleaseContext
)
;
SK_API
sk_sp
<
SkImage
>
WrapTexture
(
skgpu
:
:
graphite
:
:
Recorder
*
const
skgpu
:
:
graphite
:
:
BackendTexture
&
SkColorType
colorType
SkAlphaType
alphaType
sk_sp
<
SkColorSpace
>
colorSpace
skgpu
:
:
Origin
origin
GenerateMipmapsFromBase
generateMipmapsFromBase
TextureReleaseProc
=
nullptr
ReleaseContext
=
nullptr
std
:
:
string_view
label
=
{
}
)
;
SK_API
sk_sp
<
SkImage
>
WrapTexture
(
skgpu
:
:
graphite
:
:
Recorder
*
const
skgpu
:
:
graphite
:
:
BackendTexture
&
SkColorType
colorType
SkAlphaType
alphaType
sk_sp
<
SkColorSpace
>
colorSpace
skgpu
:
:
Origin
origin
TextureReleaseProc
=
nullptr
ReleaseContext
=
nullptr
std
:
:
string_view
label
=
{
}
)
;
SK_API
sk_sp
<
SkImage
>
WrapTexture
(
skgpu
:
:
graphite
:
:
Recorder
*
const
skgpu
:
:
graphite
:
:
BackendTexture
&
SkColorType
colorType
SkAlphaType
alphaType
sk_sp
<
SkColorSpace
>
colorSpace
TextureReleaseProc
=
nullptr
ReleaseContext
=
nullptr
std
:
:
string_view
label
=
{
}
)
;
SK_API
sk_sp
<
SkImage
>
PromiseTextureFrom
(
skgpu
:
:
graphite
:
:
Recorder
*
SkISize
dimensions
const
skgpu
:
:
graphite
:
:
TextureInfo
&
const
SkColorInfo
&
skgpu
:
:
Origin
origin
skgpu
:
:
graphite
:
:
Volatile
GraphitePromiseTextureFulfillProc
GraphitePromiseImageReleaseProc
GraphitePromiseTextureReleaseProc
GraphitePromiseImageContext
std
:
:
string_view
label
=
{
}
)
;
SK_API
sk_sp
<
SkImage
>
PromiseTextureFrom
(
skgpu
:
:
graphite
:
:
Recorder
*
SkISize
dimensions
const
skgpu
:
:
graphite
:
:
TextureInfo
&
const
SkColorInfo
&
skgpu
:
:
graphite
:
:
Volatile
GraphitePromiseTextureFulfillProc
GraphitePromiseImageReleaseProc
GraphitePromiseTextureReleaseProc
GraphitePromiseImageContext
)
;
SK_API
sk_sp
<
SkImage
>
PromiseTextureFromYUVA
(
skgpu
:
:
graphite
:
:
Recorder
*
const
skgpu
:
:
graphite
:
:
YUVABackendTextureInfo
&
sk_sp
<
SkColorSpace
>
imageColorSpace
skgpu
:
:
graphite
:
:
Volatile
GraphitePromiseTextureFulfillProc
GraphitePromiseImageReleaseProc
GraphitePromiseTextureReleaseProc
GraphitePromiseImageContext
imageContext
GraphitePromiseTextureFulfillContext
planeContexts
[
]
std
:
:
string_view
label
=
{
}
)
;
SK_API
sk_sp
<
SkImage
>
TextureFromImage
(
skgpu
:
:
graphite
:
:
Recorder
*
const
SkImage
*
SkImage
:
:
RequiredProperties
=
{
}
)
;
inline
sk_sp
<
SkImage
>
TextureFromImage
(
skgpu
:
:
graphite
:
:
Recorder
*
r
const
sk_sp
<
const
SkImage
>
&
img
SkImage
:
:
RequiredProperties
props
=
{
}
)
{
return
TextureFromImage
(
r
img
.
get
(
)
props
)
;
}
SK_API
sk_sp
<
SkImage
>
TextureFromYUVAPixmaps
(
skgpu
:
:
graphite
:
:
Recorder
*
const
SkYUVAPixmaps
&
pixmaps
SkImage
:
:
RequiredProperties
=
{
}
bool
limitToMaxTextureSize
=
false
sk_sp
<
SkColorSpace
>
imgColorSpace
=
nullptr
std
:
:
string_view
label
=
{
}
)
;
SK_API
sk_sp
<
SkImage
>
TextureFromYUVATextures
(
skgpu
:
:
graphite
:
:
Recorder
*
recorder
const
skgpu
:
:
graphite
:
:
YUVABackendTextures
&
yuvaBackendTextures
sk_sp
<
SkColorSpace
>
imageColorSpace
TextureReleaseProc
=
nullptr
ReleaseContext
=
nullptr
std
:
:
string_view
label
=
{
}
)
;
SK_API
sk_sp
<
SkImage
>
TextureFromYUVAImages
(
skgpu
:
:
graphite
:
:
Recorder
*
recorder
const
SkYUVAInfo
&
yuvaInfo
SkSpan
<
const
sk_sp
<
SkImage
>
>
images
sk_sp
<
SkColorSpace
>
imageColorSpace
)
;
SK_API
sk_sp
<
SkImage
>
SubsetTextureFrom
(
skgpu
:
:
graphite
:
:
Recorder
*
recorder
const
SkImage
*
img
const
SkIRect
&
subset
SkImage
:
:
RequiredProperties
props
=
{
}
)
;
SK_API
sk_sp
<
SkImage
>
MakeWithFilter
(
skgpu
:
:
graphite
:
:
Recorder
*
recorder
sk_sp
<
SkImage
>
src
const
SkImageFilter
*
filter
const
SkIRect
&
subset
const
SkIRect
&
clipBounds
SkIRect
*
outSubset
SkIPoint
*
offset
)
;
}
#
endif
