#
ifndef
skgpu_graphite_ContextOptions_DEFINED
#
define
skgpu_graphite_ContextOptions_DEFINED
#
include
"
include
/
private
/
base
/
SkAPI
.
h
"
#
include
"
include
/
private
/
base
/
SkMath
.
h
"
#
include
<
optional
>
namespace
skgpu
{
class
ShaderErrorHandler
;
}
namespace
skgpu
:
:
graphite
{
struct
ContextOptionsPriv
;
struct
SK_API
ContextOptions
{
ContextOptions
(
)
{
}
bool
fDisableDriverCorrectnessWorkarounds
=
false
;
skgpu
:
:
ShaderErrorHandler
*
fShaderErrorHandler
=
nullptr
;
int
fInternalMultisampleCount
=
4
;
bool
fClientWillExternallySynchronizeAllThreads
=
false
;
size_t
fGlyphCacheTextureMaximumBytes
=
2048
*
1024
*
4
;
float
fMinDistanceFieldFontSize
=
18
;
#
if
defined
(
SK_BUILD_FOR_ANDROID
)
float
fGlyphsAsPathsFontSize
=
384
;
#
elif
defined
(
SK_BUILD_FOR_MAC
)
float
fGlyphsAsPathsFontSize
=
256
;
#
else
float
fGlyphsAsPathsFontSize
=
324
;
#
endif
int
fMaxPathAtlasTextureSize
=
8192
;
bool
fAllowMultipleAtlasTextures
=
true
;
bool
fSupportBilerpFromGlyphAtlas
=
false
;
bool
fDisableCachedGlyphUploads
=
false
;
static
constexpr
size_t
kDefaultContextBudget
=
256
*
(
1
<
<
20
)
;
size_t
fGpuBudgetInBytes
=
kDefaultContextBudget
;
#
if
defined
(
SK_DEBUG
)
bool
fSetBackendLabels
=
true
;
#
else
bool
fSetBackendLabels
=
false
;
#
endif
std
:
:
optional
<
uint64_t
>
fVulkanVMALargeHeapBlockSize
;
ContextOptionsPriv
*
fOptionsPriv
=
nullptr
;
}
;
}
#
endif
