#
ifndef
skgpu_graphite_BackendSemaphore_DEFINED
#
define
skgpu_graphite_BackendSemaphore_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
gpu
/
graphite
/
GraphiteTypes
.
h
"
#
ifdef
SK_METAL
#
include
"
include
/
gpu
/
graphite
/
mtl
/
MtlGraphiteTypes
.
h
"
#
endif
#
ifdef
SK_VULKAN
#
include
"
include
/
private
/
gpu
/
vk
/
SkiaVulkan
.
h
"
#
endif
namespace
skgpu
:
:
graphite
{
class
SK_API
BackendSemaphore
{
public
:
BackendSemaphore
(
)
;
#
ifdef
SK_METAL
BackendSemaphore
(
CFTypeRef
mtlEvent
uint64_t
value
)
;
#
endif
#
ifdef
SK_VULKAN
BackendSemaphore
(
VkSemaphore
semaphore
)
;
#
endif
BackendSemaphore
(
const
BackendSemaphore
&
)
;
~
BackendSemaphore
(
)
;
BackendSemaphore
&
operator
=
(
const
BackendSemaphore
&
)
;
bool
isValid
(
)
const
{
return
fIsValid
;
}
BackendApi
backend
(
)
const
{
return
fBackend
;
}
#
ifdef
SK_METAL
CFTypeRef
getMtlEvent
(
)
const
;
uint64_t
getMtlValue
(
)
const
;
#
endif
#
ifdef
SK_VULKAN
VkSemaphore
getVkSemaphore
(
)
const
;
#
endif
private
:
union
{
#
ifdef
SK_DAWN
#
endif
#
ifdef
SK_METAL
struct
{
CFTypeRef
fMtlEvent
;
uint64_t
fMtlValue
;
}
;
#
endif
#
ifdef
SK_VULKAN
VkSemaphore
fVkSemaphore
;
#
endif
void
*
fEnsureUnionNonEmpty
;
}
;
bool
fIsValid
=
false
;
BackendApi
fBackend
;
}
;
}
#
endif
