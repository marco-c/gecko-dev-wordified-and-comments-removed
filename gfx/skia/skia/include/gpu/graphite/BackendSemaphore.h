#
ifndef
skgpu_graphite_BackendSemaphore_DEFINED
#
define
skgpu_graphite_BackendSemaphore_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
gpu
/
graphite
/
GraphiteTypes
.
h
"
#
include
"
include
/
private
/
base
/
SkAnySubclass
.
h
"
namespace
skgpu
:
:
graphite
{
class
BackendSemaphoreData
;
class
SK_API
BackendSemaphore
{
public
:
BackendSemaphore
(
)
;
BackendSemaphore
(
const
BackendSemaphore
&
)
;
~
BackendSemaphore
(
)
;
BackendSemaphore
&
operator
=
(
const
BackendSemaphore
&
)
;
bool
isValid
(
)
const
{
return
fIsValid
;
}
BackendApi
backend
(
)
const
{
return
fBackend
;
}
private
:
friend
class
BackendSemaphoreData
;
friend
class
BackendSemaphorePriv
;
inline
constexpr
static
size_t
kMaxSubclassSize
=
24
;
using
AnyBackendSemaphoreData
=
SkAnySubclass
<
BackendSemaphoreData
kMaxSubclassSize
>
;
template
<
typename
SomeBackendSemaphoreData
>
BackendSemaphore
(
BackendApi
backend
const
SomeBackendSemaphoreData
&
data
)
:
fBackend
(
backend
)
fIsValid
(
true
)
{
fSemaphoreData
.
emplace
<
SomeBackendSemaphoreData
>
(
data
)
;
}
BackendApi
fBackend
;
AnyBackendSemaphoreData
fSemaphoreData
;
bool
fIsValid
=
false
;
}
;
}
#
endif
