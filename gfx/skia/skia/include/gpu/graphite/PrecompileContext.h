#
ifndef
skgpu_graphite_PrecompileContext_DEFINED
#
define
skgpu_graphite_PrecompileContext_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
private
/
base
/
SingleOwner
.
h
"
#
include
<
chrono
>
#
include
<
memory
>
class
SkData
;
namespace
skgpu
:
:
graphite
{
class
SharedContext
;
class
PrecompileContextPriv
;
class
ResourceProvider
;
class
SK_API
PrecompileContext
{
public
:
~
PrecompileContext
(
)
;
void
purgePipelinesNotUsedInMs
(
std
:
:
chrono
:
:
milliseconds
msNotUsed
)
;
void
reportPipelineStats
(
)
;
bool
precompile
(
sk_sp
<
SkData
>
serializedPipelineKey
)
;
std
:
:
string
getPipelineLabel
(
sk_sp
<
SkData
>
serializedPipelineKey
)
;
PrecompileContextPriv
priv
(
)
;
const
PrecompileContextPriv
priv
(
)
const
;
private
:
friend
class
PrecompileContextPriv
;
friend
class
Context
;
PrecompileContext
(
sk_sp
<
SharedContext
>
)
;
mutable
SingleOwner
fSingleOwner
;
sk_sp
<
SharedContext
>
fSharedContext
;
std
:
:
unique_ptr
<
ResourceProvider
>
fResourceProvider
;
}
;
}
#
endif
