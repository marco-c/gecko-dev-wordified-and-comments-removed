#
ifndef
GrD3DTypes_DEFINED
#
define
GrD3DTypes_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
gpu
/
GpuTypes
.
h
"
#
include
<
d3d12
.
h
>
#
include
<
dxgi1_4
.
h
>
class
GrD3DGpu
;
template
<
typename
T
>
static
inline
T
*
GrSafeComAddRef
(
T
*
obj
)
{
if
(
obj
)
{
obj
-
>
AddRef
(
)
;
}
return
obj
;
}
template
<
typename
T
>
static
inline
void
GrSafeComRelease
(
T
*
obj
)
{
if
(
obj
)
{
obj
-
>
Release
(
)
;
}
}
template
<
typename
T
>
class
gr_cp
{
public
:
using
element_type
=
T
;
constexpr
gr_cp
(
)
:
fObject
(
nullptr
)
{
}
constexpr
gr_cp
(
std
:
:
nullptr_t
)
:
fObject
(
nullptr
)
{
}
gr_cp
(
const
gr_cp
<
T
>
&
that
)
:
fObject
(
GrSafeComAddRef
(
that
.
get
(
)
)
)
{
}
gr_cp
(
gr_cp
<
T
>
&
&
that
)
:
fObject
(
that
.
release
(
)
)
{
}
explicit
gr_cp
(
T
*
obj
)
{
fObject
=
obj
;
}
~
gr_cp
(
)
{
GrSafeComRelease
(
fObject
)
;
SkDEBUGCODE
(
fObject
=
nullptr
)
;
}
gr_cp
<
T
>
&
operator
=
(
const
gr_cp
<
T
>
&
that
)
{
if
(
this
!
=
&
that
)
{
this
-
>
reset
(
GrSafeComAddRef
(
that
.
get
(
)
)
)
;
}
return
*
this
;
}
gr_cp
<
T
>
&
operator
=
(
gr_cp
<
T
>
&
&
that
)
{
this
-
>
reset
(
that
.
release
(
)
)
;
return
*
this
;
}
explicit
operator
bool
(
)
const
{
return
this
-
>
get
(
)
!
=
nullptr
;
}
T
*
get
(
)
const
{
return
fObject
;
}
T
*
operator
-
>
(
)
const
{
return
fObject
;
}
T
*
*
operator
&
(
)
{
return
&
fObject
;
}
void
reset
(
T
*
object
=
nullptr
)
{
T
*
oldObject
=
fObject
;
fObject
=
object
;
GrSafeComRelease
(
oldObject
)
;
}
void
retain
(
T
*
object
)
{
if
(
this
-
>
fObject
!
=
object
)
{
this
-
>
reset
(
GrSafeComAddRef
(
object
)
)
;
}
}
T
*
SK_WARN_UNUSED_RESULT
release
(
)
{
T
*
obj
=
fObject
;
fObject
=
nullptr
;
return
obj
;
}
private
:
T
*
fObject
;
}
;
template
<
typename
T
>
inline
bool
operator
=
=
(
const
gr_cp
<
T
>
&
a
const
gr_cp
<
T
>
&
b
)
{
return
a
.
get
(
)
=
=
b
.
get
(
)
;
}
template
<
typename
T
>
inline
bool
operator
!
=
(
const
gr_cp
<
T
>
&
a
const
gr_cp
<
T
>
&
b
)
{
return
a
.
get
(
)
!
=
b
.
get
(
)
;
}
class
GrD3DAlloc
:
public
SkRefCnt
{
public
:
~
GrD3DAlloc
(
)
override
=
default
;
}
;
class
GrD3DMemoryAllocator
:
public
SkRefCnt
{
public
:
virtual
gr_cp
<
ID3D12Resource
>
createResource
(
D3D12_HEAP_TYPE
const
D3D12_RESOURCE_DESC
*
D3D12_RESOURCE_STATES
initialResourceState
sk_sp
<
GrD3DAlloc
>
*
allocation
const
D3D12_CLEAR_VALUE
*
)
=
0
;
virtual
gr_cp
<
ID3D12Resource
>
createAliasingResource
(
sk_sp
<
GrD3DAlloc
>
&
allocation
uint64_t
localOffset
const
D3D12_RESOURCE_DESC
*
D3D12_RESOURCE_STATES
initialResourceState
const
D3D12_CLEAR_VALUE
*
)
=
0
;
}
;
struct
GrD3DTextureResourceInfo
{
gr_cp
<
ID3D12Resource
>
fResource
=
nullptr
;
sk_sp
<
GrD3DAlloc
>
fAlloc
=
nullptr
;
D3D12_RESOURCE_STATES
fResourceState
=
D3D12_RESOURCE_STATE_COMMON
;
DXGI_FORMAT
fFormat
=
DXGI_FORMAT_UNKNOWN
;
uint32_t
fSampleCount
=
1
;
uint32_t
fLevelCount
=
0
;
unsigned
int
fSampleQualityPattern
=
DXGI_STANDARD_MULTISAMPLE_QUALITY_PATTERN
;
skgpu
:
:
Protected
fProtected
=
skgpu
:
:
Protected
:
:
kNo
;
GrD3DTextureResourceInfo
(
)
=
default
;
GrD3DTextureResourceInfo
(
ID3D12Resource
*
resource
const
sk_sp
<
GrD3DAlloc
>
alloc
D3D12_RESOURCE_STATES
resourceState
DXGI_FORMAT
format
uint32_t
sampleCount
uint32_t
levelCount
unsigned
int
sampleQualityLevel
skgpu
:
:
Protected
isProtected
=
skgpu
:
:
Protected
:
:
kNo
)
:
fResource
(
resource
)
fAlloc
(
alloc
)
fResourceState
(
resourceState
)
fFormat
(
format
)
fSampleCount
(
sampleCount
)
fLevelCount
(
levelCount
)
fSampleQualityPattern
(
sampleQualityLevel
)
fProtected
(
isProtected
)
{
}
GrD3DTextureResourceInfo
(
const
GrD3DTextureResourceInfo
&
info
D3D12_RESOURCE_STATES
resourceState
)
:
fResource
(
info
.
fResource
)
fAlloc
(
info
.
fAlloc
)
fResourceState
(
resourceState
)
fFormat
(
info
.
fFormat
)
fSampleCount
(
info
.
fSampleCount
)
fLevelCount
(
info
.
fLevelCount
)
fSampleQualityPattern
(
info
.
fSampleQualityPattern
)
fProtected
(
info
.
fProtected
)
{
}
#
if
GR_TEST_UTILS
bool
operator
=
=
(
const
GrD3DTextureResourceInfo
&
that
)
const
{
return
fResource
=
=
that
.
fResource
&
&
fResourceState
=
=
that
.
fResourceState
&
&
fFormat
=
=
that
.
fFormat
&
&
fSampleCount
=
=
that
.
fSampleCount
&
&
fLevelCount
=
=
that
.
fLevelCount
&
&
fSampleQualityPattern
=
=
that
.
fSampleQualityPattern
&
&
fProtected
=
=
that
.
fProtected
;
}
#
endif
}
;
struct
GrD3DFenceInfo
{
GrD3DFenceInfo
(
)
:
fFence
(
nullptr
)
fValue
(
0
)
{
}
gr_cp
<
ID3D12Fence
>
fFence
;
uint64_t
fValue
;
}
;
struct
GrD3DSurfaceInfo
{
uint32_t
fSampleCount
=
1
;
uint32_t
fLevelCount
=
0
;
skgpu
:
:
Protected
fProtected
=
skgpu
:
:
Protected
:
:
kNo
;
DXGI_FORMAT
fFormat
=
DXGI_FORMAT_UNKNOWN
;
unsigned
int
fSampleQualityPattern
=
DXGI_STANDARD_MULTISAMPLE_QUALITY_PATTERN
;
}
;
#
endif
