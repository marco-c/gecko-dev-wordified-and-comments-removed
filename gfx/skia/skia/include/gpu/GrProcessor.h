#
ifndef
GrProcessor_DEFINED
#
define
GrProcessor_DEFINED
#
include
"
GrColor
.
h
"
#
include
"
GrProcessorUnitTest
.
h
"
#
include
"
GrProgramElement
.
h
"
#
include
"
GrTextureAccess
.
h
"
#
include
"
SkMath
.
h
"
#
include
"
SkString
.
h
"
class
GrContext
;
class
GrCoordTransform
;
class
GrInvariantOutput
;
class
GrProcessorKeyBuilder
{
public
:
GrProcessorKeyBuilder
(
SkTArray
<
unsigned
char
true
>
*
data
)
:
fData
(
data
)
fCount
(
0
)
{
SkASSERT
(
0
=
=
fData
-
>
count
(
)
%
sizeof
(
uint32_t
)
)
;
}
void
add32
(
uint32_t
v
)
{
+
+
fCount
;
fData
-
>
push_back_n
(
4
reinterpret_cast
<
uint8_t
*
>
(
&
v
)
)
;
}
uint32_t
*
SK_WARN_UNUSED_RESULT
add32n
(
int
count
)
{
SkASSERT
(
count
>
0
)
;
fCount
+
=
count
;
return
reinterpret_cast
<
uint32_t
*
>
(
fData
-
>
push_back_n
(
4
*
count
)
)
;
}
size_t
size
(
)
const
{
return
sizeof
(
uint32_t
)
*
fCount
;
}
private
:
SkTArray
<
uint8_t
true
>
*
fData
;
int
fCount
;
}
;
class
GrProcessor
:
public
GrProgramElement
{
public
:
virtual
~
GrProcessor
(
)
;
virtual
const
char
*
name
(
)
const
=
0
;
virtual
SkString
dumpInfo
(
)
const
{
SkString
str
;
str
.
appendf
(
"
Missing
data
"
)
;
return
str
;
}
int
numTextures
(
)
const
{
return
fTextureAccesses
.
count
(
)
;
}
const
GrTextureAccess
&
textureAccess
(
int
index
)
const
{
return
*
fTextureAccesses
[
index
]
;
}
GrTexture
*
texture
(
int
index
)
const
{
return
this
-
>
textureAccess
(
index
)
.
getTexture
(
)
;
}
bool
willReadFragmentPosition
(
)
const
{
return
fWillReadFragmentPosition
;
}
void
*
operator
new
(
size_t
size
)
;
void
operator
delete
(
void
*
target
)
;
void
*
operator
new
(
size_t
size
void
*
placement
)
{
return
:
:
operator
new
(
size
placement
)
;
}
void
operator
delete
(
void
*
target
void
*
placement
)
{
:
:
operator
delete
(
target
placement
)
;
}
template
<
typename
T
>
const
T
&
cast
(
)
const
{
return
*
static_cast
<
const
T
*
>
(
this
)
;
}
uint32_t
classID
(
)
const
{
SkASSERT
(
kIllegalProcessorClassID
!
=
fClassID
)
;
return
fClassID
;
}
protected
:
GrProcessor
(
)
:
fClassID
(
kIllegalProcessorClassID
)
fWillReadFragmentPosition
(
false
)
{
}
virtual
void
addTextureAccess
(
const
GrTextureAccess
*
textureAccess
)
;
bool
hasSameTextureAccesses
(
const
GrProcessor
&
)
const
;
void
setWillReadFragmentPosition
(
)
{
fWillReadFragmentPosition
=
true
;
}
template
<
typename
PROC_SUBCLASS
>
void
initClassID
(
)
{
static
uint32_t
kClassID
=
GenClassID
(
)
;
fClassID
=
kClassID
;
}
uint32_t
fClassID
;
SkSTArray
<
4
const
GrTextureAccess
*
true
>
fTextureAccesses
;
private
:
static
uint32_t
GenClassID
(
)
{
uint32_t
id
=
static_cast
<
uint32_t
>
(
sk_atomic_inc
(
&
gCurrProcessorClassID
)
)
+
1
;
if
(
!
id
)
{
SkFAIL
(
"
This
should
never
wrap
as
it
should
only
be
called
once
for
each
GrProcessor
"
"
subclass
.
"
)
;
}
return
id
;
}
enum
{
kIllegalProcessorClassID
=
0
}
;
static
int32_t
gCurrProcessorClassID
;
bool
fWillReadFragmentPosition
;
typedef
GrProgramElement
INHERITED
;
}
;
#
endif
