#
ifndef
GrProcessor_DEFINED
#
define
GrProcessor_DEFINED
#
include
"
GrColor
.
h
"
#
include
"
GrBuffer
.
h
"
#
include
"
GrGpuResourceRef
.
h
"
#
include
"
GrProcessorUnitTest
.
h
"
#
include
"
GrProgramElement
.
h
"
#
include
"
GrSamplerParams
.
h
"
#
include
"
GrShaderVar
.
h
"
#
include
"
SkMath
.
h
"
#
include
"
SkString
.
h
"
#
include
"
.
.
/
private
/
SkAtomics
.
h
"
class
GrContext
;
class
GrCoordTransform
;
class
GrInvariantOutput
;
class
GrResourceProvider
;
class
GrTextureProxy
;
class
GrProcessorKeyBuilder
{
public
:
GrProcessorKeyBuilder
(
SkTArray
<
unsigned
char
true
>
*
data
)
:
fData
(
data
)
fCount
(
0
)
{
SkASSERT
(
0
=
=
fData
-
>
count
(
)
%
sizeof
(
uint32_t
)
)
;
}
void
add32
(
uint32_t
v
)
{
+
+
fCount
;
fData
-
>
push_back_n
(
4
reinterpret_cast
<
uint8_t
*
>
(
&
v
)
)
;
}
uint32_t
*
SK_WARN_UNUSED_RESULT
add32n
(
int
count
)
{
SkASSERT
(
count
>
0
)
;
fCount
+
=
count
;
return
reinterpret_cast
<
uint32_t
*
>
(
fData
-
>
push_back_n
(
4
*
count
)
)
;
}
size_t
size
(
)
const
{
return
sizeof
(
uint32_t
)
*
fCount
;
}
private
:
SkTArray
<
uint8_t
true
>
*
fData
;
int
fCount
;
}
;
class
GrProcessor
{
public
:
virtual
~
GrProcessor
(
)
=
default
;
virtual
const
char
*
name
(
)
const
=
0
;
virtual
SkString
dumpInfo
(
)
const
{
SkString
str
;
str
.
appendf
(
"
Missing
data
"
)
;
return
str
;
}
enum
RequiredFeatures
{
kNone_RequiredFeatures
=
0
kSampleLocations_RequiredFeature
=
1
<
<
0
}
;
GR_DECL_BITFIELD_OPS_FRIENDS
(
RequiredFeatures
)
;
RequiredFeatures
requiredFeatures
(
)
const
{
return
fRequiredFeatures
;
}
void
*
operator
new
(
size_t
size
)
;
void
operator
delete
(
void
*
target
)
;
void
*
operator
new
(
size_t
size
void
*
placement
)
{
return
:
:
operator
new
(
size
placement
)
;
}
void
operator
delete
(
void
*
target
void
*
placement
)
{
:
:
operator
delete
(
target
placement
)
;
}
template
<
typename
T
>
const
T
&
cast
(
)
const
{
return
*
static_cast
<
const
T
*
>
(
this
)
;
}
uint32_t
classID
(
)
const
{
SkASSERT
(
kIllegalProcessorClassID
!
=
fClassID
)
;
return
fClassID
;
}
protected
:
GrProcessor
(
)
:
fClassID
(
kIllegalProcessorClassID
)
fRequiredFeatures
(
kNone_RequiredFeatures
)
{
}
void
setWillUseSampleLocations
(
)
{
fRequiredFeatures
|
=
kSampleLocations_RequiredFeature
;
}
void
combineRequiredFeatures
(
const
GrProcessor
&
other
)
{
fRequiredFeatures
|
=
other
.
fRequiredFeatures
;
}
template
<
typename
PROC_SUBCLASS
>
void
initClassID
(
)
{
static
uint32_t
kClassID
=
GenClassID
(
)
;
fClassID
=
kClassID
;
}
private
:
GrProcessor
(
const
GrProcessor
&
)
=
delete
;
GrProcessor
&
operator
=
(
const
GrProcessor
&
)
=
delete
;
static
uint32_t
GenClassID
(
)
{
uint32_t
id
=
static_cast
<
uint32_t
>
(
sk_atomic_inc
(
&
gCurrProcessorClassID
)
)
+
1
;
if
(
!
id
)
{
SkFAIL
(
"
This
should
never
wrap
as
it
should
only
be
called
once
for
each
GrProcessor
"
"
subclass
.
"
)
;
}
return
id
;
}
enum
{
kIllegalProcessorClassID
=
0
}
;
static
int32_t
gCurrProcessorClassID
;
uint32_t
fClassID
;
RequiredFeatures
fRequiredFeatures
;
}
;
GR_MAKE_BITFIELD_OPS
(
GrProcessor
:
:
RequiredFeatures
)
;
class
GrResourceIOProcessor
:
public
GrProcessor
{
public
:
class
TextureSampler
;
class
BufferAccess
;
class
ImageStorageAccess
;
int
numTextureSamplers
(
)
const
{
return
fTextureSamplers
.
count
(
)
;
}
const
TextureSampler
&
textureSampler
(
int
index
)
const
{
return
*
fTextureSamplers
[
index
]
;
}
int
numBuffers
(
)
const
{
return
fBufferAccesses
.
count
(
)
;
}
const
BufferAccess
&
bufferAccess
(
int
index
)
const
{
return
*
fBufferAccesses
[
index
]
;
}
int
numImageStorages
(
)
const
{
return
fImageStorageAccesses
.
count
(
)
;
}
const
ImageStorageAccess
&
imageStorageAccess
(
int
index
)
const
{
return
*
fImageStorageAccesses
[
index
]
;
}
protected
:
GrResourceIOProcessor
(
)
=
default
;
void
addTextureSampler
(
const
TextureSampler
*
)
;
void
addBufferAccess
(
const
BufferAccess
*
)
;
void
addImageStorageAccess
(
const
ImageStorageAccess
*
)
;
bool
hasSameSamplersAndAccesses
(
const
GrResourceIOProcessor
&
)
const
;
void
addPendingIOs
(
)
const
;
void
removeRefs
(
)
const
;
void
pendingIOComplete
(
)
const
;
private
:
SkSTArray
<
4
const
TextureSampler
*
true
>
fTextureSamplers
;
SkSTArray
<
1
const
BufferAccess
*
true
>
fBufferAccesses
;
SkSTArray
<
1
const
ImageStorageAccess
*
true
>
fImageStorageAccesses
;
typedef
GrProcessor
INHERITED
;
}
;
class
GrResourceIOProcessor
:
:
TextureSampler
:
public
SkNoncopyable
{
public
:
TextureSampler
(
)
;
TextureSampler
(
GrTexture
*
const
GrSamplerParams
&
)
;
explicit
TextureSampler
(
GrTexture
*
GrSamplerParams
:
:
FilterMode
=
GrSamplerParams
:
:
kNone_FilterMode
SkShader
:
:
TileMode
tileXAndY
=
SkShader
:
:
kClamp_TileMode
GrShaderFlags
visibility
=
kFragment_GrShaderFlag
)
;
void
reset
(
GrTexture
*
const
GrSamplerParams
&
GrShaderFlags
visibility
=
kFragment_GrShaderFlag
)
;
void
reset
(
GrTexture
*
GrSamplerParams
:
:
FilterMode
=
GrSamplerParams
:
:
kNone_FilterMode
SkShader
:
:
TileMode
tileXAndY
=
SkShader
:
:
kClamp_TileMode
GrShaderFlags
visibility
=
kFragment_GrShaderFlag
)
;
TextureSampler
(
GrResourceProvider
*
sk_sp
<
GrTextureProxy
>
const
GrSamplerParams
&
)
;
explicit
TextureSampler
(
GrResourceProvider
*
sk_sp
<
GrTextureProxy
>
GrSamplerParams
:
:
FilterMode
=
GrSamplerParams
:
:
kNone_FilterMode
SkShader
:
:
TileMode
tileXAndY
=
SkShader
:
:
kClamp_TileMode
GrShaderFlags
visibility
=
kFragment_GrShaderFlag
)
;
void
reset
(
GrResourceProvider
*
sk_sp
<
GrTextureProxy
>
const
GrSamplerParams
&
GrShaderFlags
visibility
=
kFragment_GrShaderFlag
)
;
void
reset
(
GrResourceProvider
*
sk_sp
<
GrTextureProxy
>
GrSamplerParams
:
:
FilterMode
=
GrSamplerParams
:
:
kNone_FilterMode
SkShader
:
:
TileMode
tileXAndY
=
SkShader
:
:
kClamp_TileMode
GrShaderFlags
visibility
=
kFragment_GrShaderFlag
)
;
bool
operator
=
=
(
const
TextureSampler
&
that
)
const
{
return
this
-
>
texture
(
)
=
=
that
.
texture
(
)
&
&
fParams
=
=
that
.
fParams
&
&
fVisibility
=
=
that
.
fVisibility
;
}
bool
operator
!
=
(
const
TextureSampler
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
GrTexture
*
texture
(
)
const
{
return
fTexture
.
get
(
)
;
}
GrShaderFlags
visibility
(
)
const
{
return
fVisibility
;
}
const
GrSamplerParams
&
params
(
)
const
{
return
fParams
;
}
const
GrGpuResourceRef
*
programTexture
(
)
const
{
return
&
fTexture
;
}
private
:
typedef
GrTGpuResourceRef
<
GrTexture
>
ProgramTexture
;
ProgramTexture
fTexture
;
GrSamplerParams
fParams
;
GrShaderFlags
fVisibility
;
typedef
SkNoncopyable
INHERITED
;
}
;
class
GrResourceIOProcessor
:
:
BufferAccess
:
public
SkNoncopyable
{
public
:
BufferAccess
(
)
=
default
;
BufferAccess
(
GrPixelConfig
texelConfig
GrBuffer
*
buffer
GrShaderFlags
visibility
=
kFragment_GrShaderFlag
)
{
this
-
>
reset
(
texelConfig
buffer
visibility
)
;
}
void
reset
(
GrPixelConfig
texelConfig
GrBuffer
*
buffer
GrShaderFlags
visibility
=
kFragment_GrShaderFlag
)
{
fTexelConfig
=
texelConfig
;
fBuffer
.
set
(
SkRef
(
buffer
)
kRead_GrIOType
)
;
fVisibility
=
visibility
;
}
bool
operator
=
=
(
const
BufferAccess
&
that
)
const
{
return
fTexelConfig
=
=
that
.
fTexelConfig
&
&
this
-
>
buffer
(
)
=
=
that
.
buffer
(
)
&
&
fVisibility
=
=
that
.
fVisibility
;
}
bool
operator
!
=
(
const
BufferAccess
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
GrPixelConfig
texelConfig
(
)
const
{
return
fTexelConfig
;
}
GrBuffer
*
buffer
(
)
const
{
return
fBuffer
.
get
(
)
;
}
GrShaderFlags
visibility
(
)
const
{
return
fVisibility
;
}
const
GrGpuResourceRef
*
programBuffer
(
)
const
{
return
&
fBuffer
;
}
private
:
GrPixelConfig
fTexelConfig
;
GrTGpuResourceRef
<
GrBuffer
>
fBuffer
;
GrShaderFlags
fVisibility
;
typedef
SkNoncopyable
INHERITED
;
}
;
class
GrResourceIOProcessor
:
:
ImageStorageAccess
:
public
SkNoncopyable
{
public
:
ImageStorageAccess
(
sk_sp
<
GrTexture
>
texture
GrIOType
ioType
GrSLMemoryModel
GrSLRestrict
GrShaderFlags
visibility
=
kFragment_GrShaderFlag
)
;
bool
operator
=
=
(
const
ImageStorageAccess
&
that
)
const
{
return
this
-
>
texture
(
)
=
=
that
.
texture
(
)
&
&
fVisibility
=
=
that
.
fVisibility
;
}
bool
operator
!
=
(
const
ImageStorageAccess
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
GrTexture
*
texture
(
)
const
{
return
fTexture
.
get
(
)
;
}
GrShaderFlags
visibility
(
)
const
{
return
fVisibility
;
}
GrIOType
ioType
(
)
const
{
return
fTexture
.
ioType
(
)
;
}
GrImageStorageFormat
format
(
)
const
{
return
fFormat
;
}
GrSLMemoryModel
memoryModel
(
)
const
{
return
fMemoryModel
;
}
GrSLRestrict
restrict
(
)
const
{
return
fRestrict
;
}
const
GrGpuResourceRef
*
programTexture
(
)
const
{
return
&
fTexture
;
}
private
:
GrTGpuResourceRef
<
GrTexture
>
fTexture
;
GrShaderFlags
fVisibility
;
GrImageStorageFormat
fFormat
;
GrSLMemoryModel
fMemoryModel
;
GrSLRestrict
fRestrict
;
typedef
SkNoncopyable
INHERITED
;
}
;
#
endif
