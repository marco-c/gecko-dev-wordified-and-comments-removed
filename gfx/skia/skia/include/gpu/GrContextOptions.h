#
ifndef
GrContextOptions_DEFINED
#
define
GrContextOptions_DEFINED
#
include
"
SkData
.
h
"
#
include
"
SkTypes
.
h
"
#
include
"
GrTypes
.
h
"
#
include
"
.
.
/
private
/
GrTypesPriv
.
h
"
#
include
"
GrDriverBugWorkarounds
.
h
"
#
include
<
vector
>
class
SkExecutor
;
#
if
SK_SUPPORT_GPU
struct
GrContextOptions
{
enum
class
Enable
{
kNo
kYes
kDefault
}
;
class
PersistentCache
{
public
:
virtual
~
PersistentCache
(
)
{
}
virtual
sk_sp
<
SkData
>
load
(
const
SkData
&
key
)
=
0
;
virtual
void
store
(
const
SkData
&
key
const
SkData
&
data
)
=
0
;
}
;
GrContextOptions
(
)
{
}
bool
fSuppressPrints
=
false
;
int
fMaxTextureSizeOverride
=
SK_MaxS32
;
int
fBufferMapThreshold
=
-
1
;
SkExecutor
*
fExecutor
=
nullptr
;
bool
fDoManualMipmapping
=
false
;
bool
fDisableCoverageCountingPaths
=
false
;
bool
fDisableDistanceFieldPaths
=
false
;
bool
fAllowPathMaskCaching
=
true
;
bool
fDisableGpuYUVConversion
=
false
;
size_t
fGlyphCacheTextureMaximumBytes
=
2048
*
1024
*
4
;
float
fMinDistanceFieldFontSize
=
-
1
.
f
;
float
fGlyphsAsPathsFontSize
=
-
1
.
f
;
Enable
fAllowMultipleGlyphCacheTextures
=
Enable
:
:
kDefault
;
bool
fAvoidStencilBuffers
=
false
;
Enable
fUseGLBufferDataNullHint
=
Enable
:
:
kDefault
;
bool
fSharpenMipmappedTextures
=
false
;
Enable
fUseDrawInsteadOfGLClear
=
Enable
:
:
kDefault
;
Enable
fExplicitlyAllocateGPUResources
=
Enable
:
:
kDefault
;
Enable
fSortRenderTargets
=
Enable
:
:
kDefault
;
Enable
fReduceOpListSplitting
=
Enable
:
:
kDefault
;
bool
fPreferExternalImagesOverES3
=
false
;
bool
fDisableDriverCorrectnessWorkarounds
=
false
;
PersistentCache
*
fPersistentCache
=
nullptr
;
#
if
GR_TEST_UTILS
int
fMaxTileSizeOverride
=
0
;
bool
fSuppressDualSourceBlending
=
false
;
bool
fSuppressPathRendering
=
false
;
bool
fSuppressGeometryShaders
=
false
;
bool
fWireframeMode
=
false
;
GpuPathRenderers
fGpuPathRenderers
=
GpuPathRenderers
:
:
kAll
;
bool
fDisableImageMultitexturing
=
false
;
#
endif
#
if
SK_SUPPORT_ATLAS_TEXT
Enable
fDistanceFieldGlyphVerticesAlwaysHaveW
=
Enable
:
:
kDefault
;
#
endif
GrDriverBugWorkarounds
fDriverBugWorkarounds
;
}
;
#
else
struct
GrContextOptions
{
struct
PersistentCache
{
}
;
}
;
#
endif
#
endif
