#
ifndef
GrCoordTransform_DEFINED
#
define
GrCoordTransform_DEFINED
#
include
"
SkMatrix
.
h
"
#
include
"
GrTexture
.
h
"
class
GrResourceProvider
;
class
GrTextureProxy
;
class
GrCoordTransform
:
SkNoncopyable
{
public
:
GrCoordTransform
(
)
:
fTexture
(
nullptr
)
fNormalize
(
false
)
fReverseY
(
false
)
{
SkDEBUGCODE
(
fInProcessor
=
false
)
;
}
GrCoordTransform
(
GrResourceProvider
*
resourceProvider
GrTextureProxy
*
proxy
)
{
SkASSERT
(
proxy
)
;
SkDEBUGCODE
(
fInProcessor
=
false
)
;
this
-
>
reset
(
resourceProvider
SkMatrix
:
:
I
(
)
proxy
)
;
}
GrCoordTransform
(
GrResourceProvider
*
resourceProvider
const
SkMatrix
&
m
GrTextureProxy
*
proxy
)
{
SkASSERT
(
proxy
)
;
SkDEBUGCODE
(
fInProcessor
=
false
)
;
this
-
>
reset
(
resourceProvider
m
proxy
)
;
}
GrCoordTransform
(
const
SkMatrix
&
m
)
{
SkDEBUGCODE
(
fInProcessor
=
false
)
;
this
-
>
reset
(
m
)
;
}
void
reset
(
GrResourceProvider
*
const
SkMatrix
&
GrTextureProxy
*
bool
normalize
=
true
)
;
void
reset
(
const
SkMatrix
&
m
)
{
SkASSERT
(
!
fInProcessor
)
;
fMatrix
=
m
;
fTexture
=
nullptr
;
fNormalize
=
false
;
fReverseY
=
false
;
}
GrCoordTransform
&
operator
=
(
const
GrCoordTransform
&
that
)
{
SkASSERT
(
!
fInProcessor
)
;
fMatrix
=
that
.
fMatrix
;
fTexture
=
that
.
fTexture
;
fNormalize
=
that
.
fNormalize
;
fReverseY
=
that
.
fReverseY
;
return
*
this
;
}
SkMatrix
*
accessMatrix
(
)
{
SkASSERT
(
!
fInProcessor
)
;
return
&
fMatrix
;
}
bool
hasSameEffectAs
(
const
GrCoordTransform
&
that
)
const
{
if
(
fNormalize
!
=
that
.
fNormalize
|
|
fReverseY
!
=
that
.
fReverseY
|
|
!
fMatrix
.
cheapEqualTo
(
that
.
fMatrix
)
)
{
return
false
;
}
if
(
fNormalize
)
{
SkASSERT
(
fTexture
&
&
that
.
fTexture
)
;
return
fTexture
-
>
width
(
)
=
=
that
.
fTexture
-
>
width
(
)
&
&
fTexture
-
>
height
(
)
=
=
that
.
fTexture
-
>
height
(
)
;
}
return
true
;
}
const
SkMatrix
&
getMatrix
(
)
const
{
return
fMatrix
;
}
const
GrTexture
*
texture
(
)
const
{
return
fTexture
;
}
bool
normalize
(
)
const
{
return
fNormalize
;
}
bool
reverseY
(
)
const
{
return
fReverseY
;
}
private
:
bool
operator
=
=
(
const
GrCoordTransform
&
that
)
const
;
bool
operator
!
=
(
const
GrCoordTransform
&
that
)
const
;
SkMatrix
fMatrix
;
const
GrTexture
*
fTexture
;
bool
fNormalize
;
bool
fReverseY
;
typedef
SkNoncopyable
INHERITED
;
#
ifdef
SK_DEBUG
public
:
void
setInProcessor
(
)
const
{
fInProcessor
=
true
;
}
private
:
mutable
bool
fInProcessor
;
#
endif
}
;
#
endif
