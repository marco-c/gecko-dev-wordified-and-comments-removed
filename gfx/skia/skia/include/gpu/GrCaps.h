#
ifndef
GrCaps_DEFINED
#
define
GrCaps_DEFINED
#
include
"
GrTypes
.
h
"
#
include
"
GrTypesPriv
.
h
"
#
include
"
GrBlend
.
h
"
#
include
"
GrShaderVar
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkString
.
h
"
struct
GrContextOptions
;
class
GrShaderCaps
:
public
SkRefCnt
{
public
:
struct
PrecisionInfo
{
PrecisionInfo
(
)
{
fLogRangeLow
=
0
;
fLogRangeHigh
=
0
;
fBits
=
0
;
}
bool
supported
(
)
const
{
return
0
!
=
fBits
;
}
bool
operator
=
=
(
const
PrecisionInfo
&
that
)
const
{
return
fLogRangeLow
=
=
that
.
fLogRangeLow
&
&
fLogRangeHigh
=
=
that
.
fLogRangeHigh
&
&
fBits
=
=
that
.
fBits
;
}
bool
operator
!
=
(
const
PrecisionInfo
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
int
fLogRangeLow
;
int
fLogRangeHigh
;
int
fBits
;
}
;
GrShaderCaps
(
)
;
virtual
SkString
dump
(
)
const
;
bool
shaderDerivativeSupport
(
)
const
{
return
fShaderDerivativeSupport
;
}
bool
geometryShaderSupport
(
)
const
{
return
fGeometryShaderSupport
;
}
bool
pathRenderingSupport
(
)
const
{
return
fPathRenderingSupport
;
}
bool
dstReadInShaderSupport
(
)
const
{
return
fDstReadInShaderSupport
;
}
bool
dualSourceBlendingSupport
(
)
const
{
return
fDualSourceBlendingSupport
;
}
const
PrecisionInfo
&
getFloatShaderPrecisionInfo
(
GrShaderType
shaderType
GrSLPrecision
precision
)
const
{
return
fFloatPrecisions
[
shaderType
]
[
precision
]
;
}
;
bool
floatPrecisionVaries
(
)
const
{
return
fShaderPrecisionVaries
;
}
protected
:
void
applyOptionsOverrides
(
const
GrContextOptions
&
options
)
;
bool
fShaderDerivativeSupport
:
1
;
bool
fGeometryShaderSupport
:
1
;
bool
fPathRenderingSupport
:
1
;
bool
fDstReadInShaderSupport
:
1
;
bool
fDualSourceBlendingSupport
:
1
;
bool
fShaderPrecisionVaries
;
PrecisionInfo
fFloatPrecisions
[
kGrShaderTypeCount
]
[
kGrSLPrecisionCount
]
;
private
:
virtual
void
onApplyOptionsOverrides
(
const
GrContextOptions
&
)
{
}
;
typedef
SkRefCnt
INHERITED
;
}
;
class
GrCaps
:
public
SkRefCnt
{
public
:
GrCaps
(
const
GrContextOptions
&
)
;
virtual
SkString
dump
(
)
const
;
GrShaderCaps
*
shaderCaps
(
)
const
{
return
fShaderCaps
;
}
bool
npotTextureTileSupport
(
)
const
{
return
fNPOTTextureTileSupport
;
}
bool
mipMapSupport
(
)
const
{
return
fMipMapSupport
;
}
bool
twoSidedStencilSupport
(
)
const
{
return
fTwoSidedStencilSupport
;
}
bool
stencilWrapOpsSupport
(
)
const
{
return
fStencilWrapOpsSupport
;
}
bool
discardRenderTargetSupport
(
)
const
{
return
fDiscardRenderTargetSupport
;
}
bool
gpuTracingSupport
(
)
const
{
return
fGpuTracingSupport
;
}
bool
compressedTexSubImageSupport
(
)
const
{
return
fCompressedTexSubImageSupport
;
}
bool
oversizedStencilSupport
(
)
const
{
return
fOversizedStencilSupport
;
}
bool
textureBarrierSupport
(
)
const
{
return
fTextureBarrierSupport
;
}
bool
mixedSamplesSupport
(
)
const
{
return
fMixedSamplesSupport
;
}
bool
useDrawInsteadOfClear
(
)
const
{
return
fUseDrawInsteadOfClear
;
}
bool
useDrawInsteadOfPartialRenderTargetWrite
(
)
const
{
return
fUseDrawInsteadOfPartialRenderTargetWrite
;
}
bool
preferVRAMUseOverFlushes
(
)
const
{
return
fPreferVRAMUseOverFlushes
;
}
enum
BlendEquationSupport
{
kBasic_BlendEquationSupport
kAdvanced_BlendEquationSupport
kAdvancedCoherent_BlendEquationSupport
kLast_BlendEquationSupport
=
kAdvancedCoherent_BlendEquationSupport
}
;
BlendEquationSupport
blendEquationSupport
(
)
const
{
return
fBlendEquationSupport
;
}
bool
advancedBlendEquationSupport
(
)
const
{
return
fBlendEquationSupport
>
=
kAdvanced_BlendEquationSupport
;
}
bool
advancedCoherentBlendEquationSupport
(
)
const
{
return
kAdvancedCoherent_BlendEquationSupport
=
=
fBlendEquationSupport
;
}
bool
canUseAdvancedBlendEquation
(
GrBlendEquation
equation
)
const
{
SkASSERT
(
GrBlendEquationIsAdvanced
(
equation
)
)
;
return
SkToBool
(
fAdvBlendEqBlacklist
&
(
1
<
<
equation
)
)
;
}
enum
MapFlags
{
kNone_MapFlags
=
0x0
kCanMap_MapFlag
=
0x1
kSubset_MapFlag
=
0x2
}
;
uint32_t
mapBufferFlags
(
)
const
{
return
fMapBufferFlags
;
}
bool
reuseScratchTextures
(
)
const
{
return
fReuseScratchTextures
;
}
bool
reuseScratchBuffers
(
)
const
{
return
fReuseScratchBuffers
;
}
int
maxRenderTargetSize
(
)
const
{
return
fMaxRenderTargetSize
;
}
int
maxTextureSize
(
)
const
{
return
fMaxTextureSize
;
}
int
maxTileSize
(
)
const
{
SkASSERT
(
fMaxTileSize
<
=
fMaxTextureSize
)
;
return
fMaxTileSize
;
}
int
maxSampleCount
(
)
const
{
return
fMaxSampleCount
;
}
virtual
bool
isConfigTexturable
(
GrPixelConfig
config
)
const
=
0
;
virtual
bool
isConfigRenderable
(
GrPixelConfig
config
bool
withMSAA
)
const
=
0
;
bool
suppressPrints
(
)
const
{
return
fSuppressPrints
;
}
bool
immediateFlush
(
)
const
{
return
fImmediateFlush
;
}
bool
drawPathMasksToCompressedTexturesSupport
(
)
const
{
return
fDrawPathMasksToCompressedTextureSupport
;
}
size_t
geometryBufferMapThreshold
(
)
const
{
SkASSERT
(
fGeometryBufferMapThreshold
>
=
0
)
;
return
fGeometryBufferMapThreshold
;
}
bool
supportsInstancedDraws
(
)
const
{
return
fSupportsInstancedDraws
;
}
bool
fullClearIsFree
(
)
const
{
return
fFullClearIsFree
;
}
bool
mustClearUploadedBufferData
(
)
const
{
return
fMustClearUploadedBufferData
;
}
protected
:
void
applyOptionsOverrides
(
const
GrContextOptions
&
options
)
;
SkAutoTUnref
<
GrShaderCaps
>
fShaderCaps
;
bool
fNPOTTextureTileSupport
:
1
;
bool
fMipMapSupport
:
1
;
bool
fTwoSidedStencilSupport
:
1
;
bool
fStencilWrapOpsSupport
:
1
;
bool
fDiscardRenderTargetSupport
:
1
;
bool
fReuseScratchTextures
:
1
;
bool
fReuseScratchBuffers
:
1
;
bool
fGpuTracingSupport
:
1
;
bool
fCompressedTexSubImageSupport
:
1
;
bool
fOversizedStencilSupport
:
1
;
bool
fTextureBarrierSupport
:
1
;
bool
fMixedSamplesSupport
:
1
;
bool
fSupportsInstancedDraws
:
1
;
bool
fFullClearIsFree
:
1
;
bool
fMustClearUploadedBufferData
:
1
;
bool
fUseDrawInsteadOfClear
:
1
;
bool
fUseDrawInsteadOfPartialRenderTargetWrite
:
1
;
bool
fPreferVRAMUseOverFlushes
:
1
;
BlendEquationSupport
fBlendEquationSupport
;
uint32_t
fAdvBlendEqBlacklist
;
GR_STATIC_ASSERT
(
kLast_GrBlendEquation
<
32
)
;
uint32_t
fMapBufferFlags
;
int
fGeometryBufferMapThreshold
;
int
fMaxRenderTargetSize
;
int
fMaxTextureSize
;
int
fMaxTileSize
;
int
fMaxSampleCount
;
private
:
virtual
void
onApplyOptionsOverrides
(
const
GrContextOptions
&
)
{
}
;
bool
fSuppressPrints
:
1
;
bool
fImmediateFlush
:
1
;
bool
fDrawPathMasksToCompressedTextureSupport
:
1
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
