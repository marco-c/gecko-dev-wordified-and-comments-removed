#
ifndef
GrSurface_DEFINED
#
define
GrSurface_DEFINED
#
include
"
GrTypes
.
h
"
#
include
"
GrGpuResource
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkRect
.
h
"
class
GrRenderTarget
;
class
GrSurfacePriv
;
class
GrTexture
;
class
SK_API
GrSurface
:
public
GrGpuResource
{
public
:
int
width
(
)
const
{
return
fWidth
;
}
int
height
(
)
const
{
return
fHeight
;
}
SkRect
getBoundsRect
(
)
const
{
return
SkRect
:
:
MakeIWH
(
this
-
>
width
(
)
this
-
>
height
(
)
)
;
}
GrPixelConfig
config
(
)
const
{
return
fConfig
;
}
virtual
GrTexture
*
asTexture
(
)
{
return
nullptr
;
}
virtual
const
GrTexture
*
asTexture
(
)
const
{
return
nullptr
;
}
virtual
GrRenderTarget
*
asRenderTarget
(
)
{
return
nullptr
;
}
virtual
const
GrRenderTarget
*
asRenderTarget
(
)
const
{
return
nullptr
;
}
inline
GrSurfacePriv
surfacePriv
(
)
;
inline
const
GrSurfacePriv
surfacePriv
(
)
const
;
static
size_t
WorstCaseSize
(
const
GrSurfaceDesc
&
desc
bool
useNextPow2
=
false
)
;
static
size_t
ComputeSize
(
GrPixelConfig
config
int
width
int
height
int
colorSamplesPerPixel
GrMipMapped
bool
useNextPow2
=
false
)
;
protected
:
void
setHasMixedSamples
(
)
{
SkASSERT
(
this
-
>
asRenderTarget
(
)
)
;
fSurfaceFlags
|
=
GrInternalSurfaceFlags
:
:
kMixedSampled
;
}
bool
hasMixedSamples
(
)
const
{
return
fSurfaceFlags
&
GrInternalSurfaceFlags
:
:
kMixedSampled
;
}
void
setSupportsWindowRects
(
)
{
SkASSERT
(
this
-
>
asRenderTarget
(
)
)
;
fSurfaceFlags
|
=
GrInternalSurfaceFlags
:
:
kWindowRectsSupport
;
}
bool
supportsWindowRects
(
)
const
{
return
fSurfaceFlags
&
GrInternalSurfaceFlags
:
:
kWindowRectsSupport
;
}
void
setGLRTFBOIDIs0
(
)
{
SkASSERT
(
this
-
>
asRenderTarget
(
)
)
;
fSurfaceFlags
|
=
GrInternalSurfaceFlags
:
:
kGLRTFBOIDIs0
;
}
bool
glRTFBOIDis0
(
)
const
{
return
fSurfaceFlags
&
GrInternalSurfaceFlags
:
:
kGLRTFBOIDIs0
;
}
bool
hasPendingRead
(
)
const
;
bool
hasPendingWrite
(
)
const
;
bool
hasPendingIO
(
)
const
;
friend
class
GrSurfacePriv
;
GrSurface
(
GrGpu
*
gpu
const
GrSurfaceDesc
&
desc
)
:
INHERITED
(
gpu
)
fConfig
(
desc
.
fConfig
)
fWidth
(
desc
.
fWidth
)
fHeight
(
desc
.
fHeight
)
fSurfaceFlags
(
GrInternalSurfaceFlags
:
:
kNone
)
{
}
~
GrSurface
(
)
override
{
}
void
onRelease
(
)
override
;
void
onAbandon
(
)
override
;
private
:
const
char
*
getResourceType
(
)
const
override
{
return
"
Surface
"
;
}
GrPixelConfig
fConfig
;
int
fWidth
;
int
fHeight
;
GrInternalSurfaceFlags
fSurfaceFlags
;
typedef
GrGpuResource
INHERITED
;
}
;
#
endif
