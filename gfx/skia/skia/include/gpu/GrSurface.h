#
ifndef
GrSurface_DEFINED
#
define
GrSurface_DEFINED
#
include
"
GrTypes
.
h
"
#
include
"
GrGpuResource
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkRect
.
h
"
class
GrOpList
;
class
GrRenderTarget
;
class
GrSurfacePriv
;
class
GrTexture
;
class
SK_API
GrSurface
:
public
GrGpuResource
{
public
:
int
width
(
)
const
{
return
fDesc
.
fWidth
;
}
int
height
(
)
const
{
return
fDesc
.
fHeight
;
}
SkRect
getBoundsRect
(
)
const
{
return
SkRect
:
:
MakeIWH
(
this
-
>
width
(
)
this
-
>
height
(
)
)
;
}
GrSurfaceOrigin
origin
(
)
const
{
SkASSERT
(
kTopLeft_GrSurfaceOrigin
=
=
fDesc
.
fOrigin
|
|
kBottomLeft_GrSurfaceOrigin
=
=
fDesc
.
fOrigin
)
;
return
fDesc
.
fOrigin
;
}
GrPixelConfig
config
(
)
const
{
return
fDesc
.
fConfig
;
}
const
GrSurfaceDesc
&
desc
(
)
const
{
return
fDesc
;
}
virtual
GrTexture
*
asTexture
(
)
{
return
NULL
;
}
virtual
const
GrTexture
*
asTexture
(
)
const
{
return
NULL
;
}
virtual
GrRenderTarget
*
asRenderTarget
(
)
{
return
NULL
;
}
virtual
const
GrRenderTarget
*
asRenderTarget
(
)
const
{
return
NULL
;
}
inline
GrSurfacePriv
surfacePriv
(
)
;
inline
const
GrSurfacePriv
surfacePriv
(
)
const
;
typedef
void
*
ReleaseCtx
;
typedef
void
(
*
ReleaseProc
)
(
ReleaseCtx
)
;
void
setRelease
(
ReleaseProc
proc
ReleaseCtx
ctx
)
{
fReleaseProc
=
proc
;
fReleaseCtx
=
ctx
;
}
void
setLastOpList
(
GrOpList
*
opList
)
;
GrOpList
*
getLastOpList
(
)
{
return
fLastOpList
;
}
static
size_t
WorstCaseSize
(
const
GrSurfaceDesc
&
desc
bool
useNextPow2
=
false
)
;
static
size_t
ComputeSize
(
const
GrSurfaceDesc
&
desc
int
colorSamplesPerPixel
bool
hasMIPMaps
bool
useNextPow2
=
false
)
;
protected
:
bool
hasPendingRead
(
)
const
;
bool
hasPendingWrite
(
)
const
;
bool
hasPendingIO
(
)
const
;
friend
class
GrSurfacePriv
;
GrSurface
(
GrGpu
*
gpu
const
GrSurfaceDesc
&
desc
)
:
INHERITED
(
gpu
)
fDesc
(
desc
)
fReleaseProc
(
NULL
)
fReleaseCtx
(
NULL
)
fLastOpList
(
nullptr
)
{
}
~
GrSurface
(
)
override
;
GrSurfaceDesc
fDesc
;
void
onRelease
(
)
override
;
void
onAbandon
(
)
override
;
private
:
void
invokeReleaseProc
(
)
{
if
(
fReleaseProc
)
{
fReleaseProc
(
fReleaseCtx
)
;
fReleaseProc
=
NULL
;
}
}
ReleaseProc
fReleaseProc
;
ReleaseCtx
fReleaseCtx
;
GrOpList
*
fLastOpList
;
typedef
GrGpuResource
INHERITED
;
}
;
#
endif
