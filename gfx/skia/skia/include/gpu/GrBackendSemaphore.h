#
ifndef
GrBackendSemaphore_DEFINED
#
define
GrBackendSemaphore_DEFINED
#
include
"
GrTypes
.
h
"
#
include
"
gl
/
GrGLTypes
.
h
"
#
ifdef
SK_VULKAN
#
include
"
vk
/
GrVkTypes
.
h
"
#
endif
class
GrBackendSemaphore
{
public
:
GrBackendSemaphore
(
)
:
fBackend
(
kOpenGL_GrBackend
)
fGLSync
(
0
)
fIsInitialized
(
false
)
{
}
void
initGL
(
GrGLsync
sync
)
{
fBackend
=
kOpenGL_GrBackend
;
fGLSync
=
sync
;
fIsInitialized
=
true
;
}
#
ifdef
SK_VULKAN
void
initVulkan
(
VkSemaphore
semaphore
)
{
fBackend
=
kVulkan_GrBackend
;
fVkSemaphore
=
semaphore
;
fIsInitialized
=
true
;
}
#
endif
bool
isInitialized
(
)
const
{
return
fIsInitialized
;
}
GrGLsync
glSync
(
)
const
{
if
(
!
fIsInitialized
|
|
kOpenGL_GrBackend
!
=
fBackend
)
{
return
0
;
}
return
fGLSync
;
}
#
ifdef
SK_VULKAN
VkSemaphore
vkSemaphore
(
)
const
{
if
(
!
fIsInitialized
|
|
kVulkan_GrBackend
!
=
fBackend
)
{
return
VK_NULL_HANDLE
;
}
return
fVkSemaphore
;
}
#
endif
private
:
GrBackend
fBackend
;
union
{
GrGLsync
fGLSync
;
#
ifdef
SK_VULKAN
VkSemaphore
fVkSemaphore
;
#
endif
}
;
bool
fIsInitialized
;
}
;
#
endif
