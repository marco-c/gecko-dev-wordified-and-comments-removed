#
ifndef
GrBlend_DEFINED
#
define
GrBlend_DEFINED
#
include
"
SkTypes
.
h
"
enum
GrBlendEquation
{
kAdd_GrBlendEquation
kSubtract_GrBlendEquation
kReverseSubtract_GrBlendEquation
kScreen_GrBlendEquation
kOverlay_GrBlendEquation
kDarken_GrBlendEquation
kLighten_GrBlendEquation
kColorDodge_GrBlendEquation
kColorBurn_GrBlendEquation
kHardLight_GrBlendEquation
kSoftLight_GrBlendEquation
kDifference_GrBlendEquation
kExclusion_GrBlendEquation
kMultiply_GrBlendEquation
kHSLHue_GrBlendEquation
kHSLSaturation_GrBlendEquation
kHSLColor_GrBlendEquation
kHSLLuminosity_GrBlendEquation
kIllegal_GrBlendEquation
kFirstAdvancedGrBlendEquation
=
kScreen_GrBlendEquation
kLast_GrBlendEquation
=
kIllegal_GrBlendEquation
}
;
static
const
int
kGrBlendEquationCnt
=
kLast_GrBlendEquation
+
1
;
enum
GrBlendCoeff
{
kZero_GrBlendCoeff
kOne_GrBlendCoeff
kSC_GrBlendCoeff
kISC_GrBlendCoeff
kDC_GrBlendCoeff
kIDC_GrBlendCoeff
kSA_GrBlendCoeff
kISA_GrBlendCoeff
kDA_GrBlendCoeff
kIDA_GrBlendCoeff
kConstC_GrBlendCoeff
kIConstC_GrBlendCoeff
kConstA_GrBlendCoeff
kIConstA_GrBlendCoeff
kS2C_GrBlendCoeff
kIS2C_GrBlendCoeff
kS2A_GrBlendCoeff
kIS2A_GrBlendCoeff
kIllegal_GrBlendCoeff
kLast_GrBlendCoeff
=
kIllegal_GrBlendCoeff
}
;
static
const
int
kGrBlendCoeffCnt
=
kLast_GrBlendCoeff
+
1
;
static
constexpr
bool
GrBlendCoeffRefsSrc
(
const
GrBlendCoeff
coeff
)
{
return
kSC_GrBlendCoeff
=
=
coeff
|
|
kISC_GrBlendCoeff
=
=
coeff
|
|
kSA_GrBlendCoeff
=
=
coeff
|
|
kISA_GrBlendCoeff
=
=
coeff
;
}
static
constexpr
bool
GrBlendCoeffRefsDst
(
const
GrBlendCoeff
coeff
)
{
return
kDC_GrBlendCoeff
=
=
coeff
|
|
kIDC_GrBlendCoeff
=
=
coeff
|
|
kDA_GrBlendCoeff
=
=
coeff
|
|
kIDA_GrBlendCoeff
=
=
coeff
;
}
static
constexpr
bool
GrBlendCoeffRefsSrc2
(
const
GrBlendCoeff
coeff
)
{
return
kS2C_GrBlendCoeff
=
=
coeff
|
|
kIS2C_GrBlendCoeff
=
=
coeff
|
|
kS2A_GrBlendCoeff
=
=
coeff
|
|
kIS2A_GrBlendCoeff
=
=
coeff
;
}
static
constexpr
bool
GrBlendCoeffsUseSrcColor
(
GrBlendCoeff
srcCoeff
GrBlendCoeff
dstCoeff
)
{
return
kZero_GrBlendCoeff
!
=
srcCoeff
|
|
GrBlendCoeffRefsSrc
(
dstCoeff
)
;
}
static
constexpr
bool
GrBlendCoeffsUseDstColor
(
GrBlendCoeff
srcCoeff
GrBlendCoeff
dstCoeff
)
{
return
GrBlendCoeffRefsDst
(
srcCoeff
)
|
|
kZero_GrBlendCoeff
!
=
dstCoeff
;
}
static
constexpr
bool
GrBlendEquationIsAdvanced
(
GrBlendEquation
equation
)
{
return
equation
>
=
kFirstAdvancedGrBlendEquation
&
&
equation
!
=
kIllegal_GrBlendEquation
;
}
static
constexpr
bool
GrBlendModifiesDst
(
GrBlendEquation
equation
GrBlendCoeff
srcCoeff
GrBlendCoeff
dstCoeff
)
{
return
(
kAdd_GrBlendEquation
!
=
equation
&
&
kReverseSubtract_GrBlendEquation
!
=
equation
)
|
|
kZero_GrBlendCoeff
!
=
srcCoeff
|
|
kOne_GrBlendCoeff
!
=
dstCoeff
;
}
static
constexpr
bool
GrBlendAllowsCoverageAsAlpha
(
GrBlendEquation
equation
GrBlendCoeff
srcCoeff
GrBlendCoeff
dstCoeff
)
{
return
GrBlendEquationIsAdvanced
(
equation
)
|
|
!
GrBlendModifiesDst
(
equation
srcCoeff
dstCoeff
)
|
|
(
(
kAdd_GrBlendEquation
=
=
equation
|
|
kReverseSubtract_GrBlendEquation
=
=
equation
)
&
&
!
GrBlendCoeffRefsSrc
(
srcCoeff
)
&
&
(
kOne_GrBlendCoeff
=
=
dstCoeff
|
|
kISC_GrBlendCoeff
=
=
dstCoeff
|
|
kISA_GrBlendCoeff
=
=
dstCoeff
)
)
;
}
#
endif
