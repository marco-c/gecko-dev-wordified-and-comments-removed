#
ifndef
GrResourceKey_DEFINED
#
define
GrResourceKey_DEFINED
#
include
"
.
.
/
private
/
SkTemplates
.
h
"
#
include
"
GrTypes
.
h
"
#
include
"
SkData
.
h
"
#
include
"
.
.
/
private
/
SkOnce
.
h
"
uint32_t
GrResourceKeyHash
(
const
uint32_t
*
data
size_t
size
)
;
class
GrResourceKey
{
public
:
uint32_t
hash
(
)
const
{
this
-
>
validate
(
)
;
return
fKey
[
kHash_MetaDataIdx
]
;
}
size_t
size
(
)
const
{
this
-
>
validate
(
)
;
SkASSERT
(
this
-
>
isValid
(
)
)
;
return
this
-
>
internalSize
(
)
;
}
protected
:
static
const
uint32_t
kInvalidDomain
=
0
;
GrResourceKey
(
)
{
this
-
>
reset
(
)
;
}
void
reset
(
)
{
GR_STATIC_ASSERT
(
(
uint16_t
)
kInvalidDomain
=
=
kInvalidDomain
)
;
fKey
.
reset
(
kMetaDataCnt
)
;
fKey
[
kHash_MetaDataIdx
]
=
0
;
fKey
[
kDomainAndSize_MetaDataIdx
]
=
kInvalidDomain
;
}
bool
operator
=
=
(
const
GrResourceKey
&
that
)
const
{
return
this
-
>
hash
(
)
=
=
that
.
hash
(
)
&
&
0
=
=
memcmp
(
&
fKey
[
kHash_MetaDataIdx
+
1
]
&
that
.
fKey
[
kHash_MetaDataIdx
+
1
]
this
-
>
internalSize
(
)
-
sizeof
(
uint32_t
)
)
;
}
GrResourceKey
&
operator
=
(
const
GrResourceKey
&
that
)
{
SkASSERT
(
that
.
isValid
(
)
)
;
if
(
this
!
=
&
that
)
{
size_t
bytes
=
that
.
size
(
)
;
SkASSERT
(
SkIsAlign4
(
bytes
)
)
;
fKey
.
reset
(
SkToInt
(
bytes
/
sizeof
(
uint32_t
)
)
)
;
memcpy
(
fKey
.
get
(
)
that
.
fKey
.
get
(
)
bytes
)
;
this
-
>
validate
(
)
;
}
return
*
this
;
}
bool
isValid
(
)
const
{
return
kInvalidDomain
!
=
this
-
>
domain
(
)
;
}
uint32_t
domain
(
)
const
{
return
fKey
[
kDomainAndSize_MetaDataIdx
]
&
0xffff
;
}
size_t
dataSize
(
)
const
{
return
this
-
>
size
(
)
-
4
*
kMetaDataCnt
;
}
const
uint32_t
*
data
(
)
const
{
this
-
>
validate
(
)
;
return
&
fKey
[
kMetaDataCnt
]
;
}
class
Builder
{
public
:
Builder
(
GrResourceKey
*
key
uint32_t
domain
int
data32Count
)
:
fKey
(
key
)
{
SkASSERT
(
data32Count
>
=
0
)
;
SkASSERT
(
domain
!
=
kInvalidDomain
)
;
key
-
>
fKey
.
reset
(
kMetaDataCnt
+
data32Count
)
;
int
size
=
(
data32Count
+
kMetaDataCnt
)
*
sizeof
(
uint32_t
)
;
SkASSERT
(
SkToU16
(
size
)
=
=
size
)
;
SkASSERT
(
SkToU16
(
domain
)
=
=
domain
)
;
key
-
>
fKey
[
kDomainAndSize_MetaDataIdx
]
=
domain
|
(
size
<
<
16
)
;
}
~
Builder
(
)
{
this
-
>
finish
(
)
;
}
void
finish
(
)
{
if
(
NULL
=
=
fKey
)
{
return
;
}
GR_STATIC_ASSERT
(
0
=
=
kHash_MetaDataIdx
)
;
uint32_t
*
hash
=
&
fKey
-
>
fKey
[
kHash_MetaDataIdx
]
;
*
hash
=
GrResourceKeyHash
(
hash
+
1
fKey
-
>
internalSize
(
)
-
sizeof
(
uint32_t
)
)
;
fKey
-
>
validate
(
)
;
fKey
=
NULL
;
}
uint32_t
&
operator
[
]
(
int
dataIdx
)
{
SkASSERT
(
fKey
)
;
SkDEBUGCODE
(
size_t
dataCount
=
fKey
-
>
internalSize
(
)
/
sizeof
(
uint32_t
)
-
kMetaDataCnt
;
)
SkASSERT
(
SkToU32
(
dataIdx
)
<
dataCount
)
;
return
fKey
-
>
fKey
[
kMetaDataCnt
+
dataIdx
]
;
}
private
:
GrResourceKey
*
fKey
;
}
;
private
:
enum
MetaDataIdx
{
kHash_MetaDataIdx
kDomainAndSize_MetaDataIdx
kLastMetaDataIdx
=
kDomainAndSize_MetaDataIdx
}
;
static
const
uint32_t
kMetaDataCnt
=
kLastMetaDataIdx
+
1
;
size_t
internalSize
(
)
const
{
return
fKey
[
kDomainAndSize_MetaDataIdx
]
>
>
16
;
}
void
validate
(
)
const
{
SkASSERT
(
fKey
[
kHash_MetaDataIdx
]
=
=
GrResourceKeyHash
(
&
fKey
[
kHash_MetaDataIdx
]
+
1
this
-
>
internalSize
(
)
-
sizeof
(
uint32_t
)
)
)
;
SkASSERT
(
SkIsAlign4
(
this
-
>
internalSize
(
)
)
)
;
}
friend
class
TestResource
;
SkAutoSTMalloc
<
kMetaDataCnt
+
5
uint32_t
>
fKey
;
}
;
class
GrScratchKey
:
public
GrResourceKey
{
private
:
typedef
GrResourceKey
INHERITED
;
public
:
typedef
uint32_t
ResourceType
;
static
ResourceType
GenerateResourceType
(
)
;
GrScratchKey
(
)
{
}
GrScratchKey
(
const
GrScratchKey
&
that
)
{
*
this
=
that
;
}
using
INHERITED
:
:
reset
;
using
INHERITED
:
:
isValid
;
ResourceType
resourceType
(
)
const
{
return
this
-
>
domain
(
)
;
}
GrScratchKey
&
operator
=
(
const
GrScratchKey
&
that
)
{
this
-
>
INHERITED
:
:
operator
=
(
that
)
;
return
*
this
;
}
bool
operator
=
=
(
const
GrScratchKey
&
that
)
const
{
return
this
-
>
INHERITED
:
:
operator
=
=
(
that
)
;
}
bool
operator
!
=
(
const
GrScratchKey
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
class
Builder
:
public
INHERITED
:
:
Builder
{
public
:
Builder
(
GrScratchKey
*
key
ResourceType
type
int
data32Count
)
:
INHERITED
:
:
Builder
(
key
type
data32Count
)
{
}
}
;
}
;
class
GrUniqueKey
:
public
GrResourceKey
{
private
:
typedef
GrResourceKey
INHERITED
;
public
:
typedef
uint32_t
Domain
;
static
Domain
GenerateDomain
(
)
;
GrUniqueKey
(
)
{
}
GrUniqueKey
(
const
GrUniqueKey
&
that
)
{
*
this
=
that
;
}
using
INHERITED
:
:
reset
;
using
INHERITED
:
:
isValid
;
GrUniqueKey
&
operator
=
(
const
GrUniqueKey
&
that
)
{
this
-
>
INHERITED
:
:
operator
=
(
that
)
;
this
-
>
setCustomData
(
that
.
getCustomData
(
)
)
;
return
*
this
;
}
bool
operator
=
=
(
const
GrUniqueKey
&
that
)
const
{
return
this
-
>
INHERITED
:
:
operator
=
=
(
that
)
;
}
bool
operator
!
=
(
const
GrUniqueKey
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
void
setCustomData
(
const
SkData
*
data
)
{
SkSafeRef
(
data
)
;
fData
.
reset
(
data
)
;
}
const
SkData
*
getCustomData
(
)
const
{
return
fData
.
get
(
)
;
}
class
Builder
:
public
INHERITED
:
:
Builder
{
public
:
Builder
(
GrUniqueKey
*
key
Domain
domain
int
data32Count
)
:
INHERITED
:
:
Builder
(
key
domain
data32Count
)
{
}
Builder
(
GrUniqueKey
*
key
const
GrUniqueKey
&
innerKey
Domain
domain
int
extraData32Cnt
)
:
INHERITED
:
:
Builder
(
key
domain
Data32CntForInnerKey
(
innerKey
)
+
extraData32Cnt
)
{
SkASSERT
(
&
innerKey
!
=
key
)
;
uint32_t
*
innerKeyData
=
&
this
-
>
operator
[
]
(
extraData32Cnt
)
;
const
uint32_t
*
srcData
=
innerKey
.
data
(
)
;
(
*
innerKeyData
+
+
)
=
innerKey
.
domain
(
)
;
memcpy
(
innerKeyData
srcData
innerKey
.
dataSize
(
)
)
;
}
private
:
static
int
Data32CntForInnerKey
(
const
GrUniqueKey
&
innerKey
)
{
return
SkToInt
(
(
innerKey
.
dataSize
(
)
>
>
2
)
+
1
)
;
}
}
;
private
:
SkAutoTUnref
<
const
SkData
>
fData
;
}
;
#
define
GR_DECLARE_STATIC_UNIQUE_KEY
(
name
)
SK_DECLARE_STATIC_ONCE
(
name
#
#
_once
)
#
define
GR_DEFINE_STATIC_UNIQUE_KEY
(
name
)
\
static
GrUniqueKey
name
;
\
SkOnce
(
&
name
#
#
_once
gr_init_static_unique_key_once
&
name
)
static
inline
void
gr_init_static_unique_key_once
(
GrUniqueKey
*
key
)
{
GrUniqueKey
:
:
Builder
builder
(
key
GrUniqueKey
:
:
GenerateDomain
(
)
0
)
;
}
class
GrUniqueKeyInvalidatedMessage
{
public
:
explicit
GrUniqueKeyInvalidatedMessage
(
const
GrUniqueKey
&
key
)
:
fKey
(
key
)
{
}
GrUniqueKeyInvalidatedMessage
(
const
GrUniqueKeyInvalidatedMessage
&
that
)
:
fKey
(
that
.
fKey
)
{
}
GrUniqueKeyInvalidatedMessage
&
operator
=
(
const
GrUniqueKeyInvalidatedMessage
&
that
)
{
fKey
=
that
.
fKey
;
return
*
this
;
}
const
GrUniqueKey
&
key
(
)
const
{
return
fKey
;
}
private
:
GrUniqueKey
fKey
;
}
;
#
endif
