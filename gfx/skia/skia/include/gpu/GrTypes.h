#
ifndef
GrTypes_DEFINED
#
define
GrTypes_DEFINED
#
include
"
SkMath
.
h
"
#
include
"
SkTypes
.
h
"
#
include
"
GrConfig
.
h
"
#
define
GR_MAKE_BITFIELD_OPS
(
X
)
\
inline
X
operator
|
(
X
a
X
b
)
{
\
return
(
X
)
(
+
a
|
+
b
)
;
\
}
\
inline
X
&
operator
|
=
(
X
&
a
X
b
)
{
\
return
(
a
=
a
|
b
)
;
\
}
\
\
inline
X
operator
&
(
X
a
X
b
)
{
\
return
(
X
)
(
+
a
&
+
b
)
;
\
}
\
template
<
typename
T
>
\
inline
X
operator
&
(
T
a
X
b
)
{
\
return
(
X
)
(
+
a
&
+
b
)
;
\
}
\
template
<
typename
T
>
\
inline
X
operator
&
(
X
a
T
b
)
{
\
return
(
X
)
(
+
a
&
+
b
)
;
\
}
\
#
define
GR_DECL_BITFIELD_OPS_FRIENDS
(
X
)
\
friend
X
operator
|
(
X
a
X
b
)
;
\
friend
X
&
operator
|
=
(
X
&
a
X
b
)
;
\
\
friend
X
operator
&
(
X
a
X
b
)
;
\
\
template
<
typename
T
>
\
friend
X
operator
&
(
T
a
X
b
)
;
\
\
template
<
typename
T
>
\
friend
X
operator
&
(
X
a
T
b
)
;
\
#
define
GR_MAKE_BITFIELD_CLASS_OPS
(
X
)
\
inline
X
operator
|
(
X
a
X
b
)
{
\
return
(
X
)
(
(
int
)
a
|
(
int
)
b
)
;
\
}
\
inline
X
&
operator
|
=
(
X
&
a
X
b
)
{
\
return
(
a
=
a
|
b
)
;
\
}
\
inline
bool
operator
&
(
X
a
X
b
)
{
\
return
SkToBool
(
(
int
)
a
&
(
int
)
b
)
;
\
}
#
define
GR_DECL_BITFIELD_CLASS_OPS_FRIENDS
(
X
)
\
friend
X
operator
|
(
X
a
X
b
)
;
\
friend
X
&
operator
|
=
(
X
&
a
X
b
)
;
\
friend
bool
operator
&
(
X
a
X
b
)
;
#
define
GR_CT_MAX
(
a
b
)
(
(
(
b
)
<
(
a
)
)
?
(
a
)
:
(
b
)
)
#
define
GR_CT_MIN
(
a
b
)
(
(
(
b
)
<
(
a
)
)
?
(
b
)
:
(
a
)
)
static
inline
int32_t
GrIDivRoundUp
(
int
x
int
y
)
{
SkASSERT
(
y
>
0
)
;
return
(
x
+
(
y
-
1
)
)
/
y
;
}
static
inline
uint32_t
GrUIDivRoundUp
(
uint32_t
x
uint32_t
y
)
{
return
(
x
+
(
y
-
1
)
)
/
y
;
}
static
inline
size_t
GrSizeDivRoundUp
(
size_t
x
size_t
y
)
{
return
(
x
+
(
y
-
1
)
)
/
y
;
}
#
define
GR_CT_DIV_ROUND_UP
(
X
Y
)
(
(
(
X
)
+
(
(
Y
)
-
1
)
)
/
(
Y
)
)
static
inline
uint32_t
GrUIAlignUp
(
uint32_t
x
uint32_t
alignment
)
{
return
GrUIDivRoundUp
(
x
alignment
)
*
alignment
;
}
static
inline
size_t
GrSizeAlignUp
(
size_t
x
size_t
alignment
)
{
return
GrSizeDivRoundUp
(
x
alignment
)
*
alignment
;
}
#
define
GR_CT_ALIGN_UP
(
X
A
)
(
GR_CT_DIV_ROUND_UP
(
(
X
)
(
A
)
)
*
(
A
)
)
static
inline
uint32_t
GrUIAlignUpPad
(
uint32_t
x
uint32_t
alignment
)
{
return
(
alignment
-
x
%
alignment
)
%
alignment
;
}
static
inline
size_t
GrSizeAlignUpPad
(
size_t
x
size_t
alignment
)
{
return
(
alignment
-
x
%
alignment
)
%
alignment
;
}
static
inline
uint32_t
GrUIAlignDown
(
uint32_t
x
uint32_t
alignment
)
{
return
(
x
/
alignment
)
*
alignment
;
}
static
inline
size_t
GrSizeAlignDown
(
size_t
x
uint32_t
alignment
)
{
return
(
x
/
alignment
)
*
alignment
;
}
enum
GrBackend
{
kOpenGL_GrBackend
kVulkan_GrBackend
kLast_GrBackend
=
kVulkan_GrBackend
}
;
const
int
kBackendCount
=
kLast_GrBackend
+
1
;
typedef
intptr_t
GrBackendContext
;
enum
GrPrimitiveType
{
kTriangles_GrPrimitiveType
kTriangleStrip_GrPrimitiveType
kTriangleFan_GrPrimitiveType
kPoints_GrPrimitiveType
kLines_GrPrimitiveType
kLineStrip_GrPrimitiveType
kLast_GrPrimitiveType
=
kLineStrip_GrPrimitiveType
}
;
static
inline
bool
GrIsPrimTypeLines
(
GrPrimitiveType
type
)
{
return
kLines_GrPrimitiveType
=
=
type
|
|
kLineStrip_GrPrimitiveType
=
=
type
;
}
static
inline
bool
GrIsPrimTypeTris
(
GrPrimitiveType
type
)
{
return
kTriangles_GrPrimitiveType
=
=
type
|
|
kTriangleStrip_GrPrimitiveType
=
=
type
|
|
kTriangleFan_GrPrimitiveType
=
=
type
;
}
enum
GrMaskFormat
{
kA8_GrMaskFormat
kA565_GrMaskFormat
kARGB_GrMaskFormat
kLast_GrMaskFormat
=
kARGB_GrMaskFormat
}
;
static
const
int
kMaskFormatCount
=
kLast_GrMaskFormat
+
1
;
static
inline
int
GrMaskFormatBytesPerPixel
(
GrMaskFormat
format
)
{
SkASSERT
(
format
<
kMaskFormatCount
)
;
static
const
int
sBytesPerPixel
[
]
=
{
1
2
4
}
;
static_assert
(
SK_ARRAY_COUNT
(
sBytesPerPixel
)
=
=
kMaskFormatCount
"
array_size_mismatch
"
)
;
static_assert
(
kA8_GrMaskFormat
=
=
0
"
enum_order_dependency
"
)
;
static_assert
(
kA565_GrMaskFormat
=
=
1
"
enum_order_dependency
"
)
;
static_assert
(
kARGB_GrMaskFormat
=
=
2
"
enum_order_dependency
"
)
;
return
sBytesPerPixel
[
(
int
)
format
]
;
}
enum
GrPixelConfig
{
kUnknown_GrPixelConfig
kAlpha_8_GrPixelConfig
kIndex_8_GrPixelConfig
kRGB_565_GrPixelConfig
kRGBA_4444_GrPixelConfig
kRGBA_8888_GrPixelConfig
kBGRA_8888_GrPixelConfig
kSRGBA_8888_GrPixelConfig
kSBGRA_8888_GrPixelConfig
kETC1_GrPixelConfig
kLATC_GrPixelConfig
kR11_EAC_GrPixelConfig
kASTC_12x12_GrPixelConfig
kRGBA_float_GrPixelConfig
kAlpha_half_GrPixelConfig
kRGBA_half_GrPixelConfig
kLast_GrPixelConfig
=
kRGBA_half_GrPixelConfig
}
;
static
const
int
kGrPixelConfigCnt
=
kLast_GrPixelConfig
+
1
;
#
ifndef
SK_CPU_LENDIAN
#
error
"
Skia
gpu
currently
assumes
little
endian
"
#
endif
#
if
SK_PMCOLOR_BYTE_ORDER
(
B
G
R
A
)
static
const
GrPixelConfig
kSkia8888_GrPixelConfig
=
kBGRA_8888_GrPixelConfig
;
static
const
GrPixelConfig
kSkiaGamma8888_GrPixelConfig
=
kSBGRA_8888_GrPixelConfig
;
#
elif
SK_PMCOLOR_BYTE_ORDER
(
R
G
B
A
)
static
const
GrPixelConfig
kSkia8888_GrPixelConfig
=
kRGBA_8888_GrPixelConfig
;
static
const
GrPixelConfig
kSkiaGamma8888_GrPixelConfig
=
kSRGBA_8888_GrPixelConfig
;
#
else
#
error
"
SK_
*
32_SHIFT
values
must
correspond
to
GL_BGRA
or
GL_RGBA
format
.
"
#
endif
static
inline
bool
GrPixelConfigIsCompressed
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kIndex_8_GrPixelConfig
:
case
kETC1_GrPixelConfig
:
case
kLATC_GrPixelConfig
:
case
kR11_EAC_GrPixelConfig
:
case
kASTC_12x12_GrPixelConfig
:
return
true
;
default
:
return
false
;
}
}
static
inline
GrPixelConfig
GrMakePixelConfigUncompressed
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kIndex_8_GrPixelConfig
:
case
kETC1_GrPixelConfig
:
case
kASTC_12x12_GrPixelConfig
:
return
kRGBA_8888_GrPixelConfig
;
case
kLATC_GrPixelConfig
:
case
kR11_EAC_GrPixelConfig
:
return
kAlpha_8_GrPixelConfig
;
default
:
SkASSERT
(
!
GrPixelConfigIsCompressed
(
config
)
)
;
return
config
;
}
}
static
inline
bool
GrPixelConfigIs8888
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kRGBA_8888_GrPixelConfig
:
case
kBGRA_8888_GrPixelConfig
:
case
kSRGBA_8888_GrPixelConfig
:
case
kSBGRA_8888_GrPixelConfig
:
return
true
;
default
:
return
false
;
}
}
static
inline
bool
GrPixelConfigIsSRGB
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kSRGBA_8888_GrPixelConfig
:
case
kSBGRA_8888_GrPixelConfig
:
return
true
;
default
:
return
false
;
}
}
static
inline
GrPixelConfig
GrPixelConfigSwapRAndB
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kBGRA_8888_GrPixelConfig
:
return
kRGBA_8888_GrPixelConfig
;
case
kRGBA_8888_GrPixelConfig
:
return
kBGRA_8888_GrPixelConfig
;
case
kSBGRA_8888_GrPixelConfig
:
return
kSRGBA_8888_GrPixelConfig
;
case
kSRGBA_8888_GrPixelConfig
:
return
kSBGRA_8888_GrPixelConfig
;
default
:
return
kUnknown_GrPixelConfig
;
}
}
static
inline
size_t
GrBytesPerPixel
(
GrPixelConfig
config
)
{
SkASSERT
(
!
GrPixelConfigIsCompressed
(
config
)
)
;
switch
(
config
)
{
case
kAlpha_8_GrPixelConfig
:
return
1
;
case
kRGB_565_GrPixelConfig
:
case
kRGBA_4444_GrPixelConfig
:
case
kAlpha_half_GrPixelConfig
:
return
2
;
case
kRGBA_8888_GrPixelConfig
:
case
kBGRA_8888_GrPixelConfig
:
case
kSRGBA_8888_GrPixelConfig
:
case
kSBGRA_8888_GrPixelConfig
:
return
4
;
case
kRGBA_half_GrPixelConfig
:
return
8
;
case
kRGBA_float_GrPixelConfig
:
return
16
;
default
:
return
0
;
}
}
static
inline
bool
GrPixelConfigIsOpaque
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kETC1_GrPixelConfig
:
case
kRGB_565_GrPixelConfig
:
return
true
;
default
:
return
false
;
}
}
static
inline
bool
GrPixelConfigIsAlphaOnly
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kR11_EAC_GrPixelConfig
:
case
kLATC_GrPixelConfig
:
case
kASTC_12x12_GrPixelConfig
:
case
kAlpha_8_GrPixelConfig
:
case
kAlpha_half_GrPixelConfig
:
return
true
;
default
:
return
false
;
}
}
static
inline
bool
GrPixelConfigIsFloatingPoint
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kRGBA_float_GrPixelConfig
:
case
kAlpha_half_GrPixelConfig
:
case
kRGBA_half_GrPixelConfig
:
return
true
;
default
:
return
false
;
}
}
enum
GrSurfaceFlags
{
kNone_GrSurfaceFlags
=
0x0
kRenderTarget_GrSurfaceFlag
=
0x1
kZeroCopy_GrSurfaceFlag
=
0x2
kCheckAllocation_GrSurfaceFlag
=
0x4
}
;
GR_MAKE_BITFIELD_OPS
(
GrSurfaceFlags
)
typedef
intptr_t
GrBackendObject
;
enum
GrSurfaceOrigin
{
kDefault_GrSurfaceOrigin
kTopLeft_GrSurfaceOrigin
kBottomLeft_GrSurfaceOrigin
}
;
struct
GrMipLevel
{
const
void
*
fPixels
;
size_t
fRowBytes
;
}
;
struct
GrSurfaceDesc
{
GrSurfaceDesc
(
)
:
fFlags
(
kNone_GrSurfaceFlags
)
fOrigin
(
kDefault_GrSurfaceOrigin
)
fWidth
(
0
)
fHeight
(
0
)
fConfig
(
kUnknown_GrPixelConfig
)
fSampleCnt
(
0
)
fIsMipMapped
(
false
)
{
}
GrSurfaceFlags
fFlags
;
GrSurfaceOrigin
fOrigin
;
int
fWidth
;
int
fHeight
;
GrPixelConfig
fConfig
;
int
fSampleCnt
;
bool
fIsMipMapped
;
}
;
typedef
GrSurfaceDesc
GrTextureDesc
;
enum
GrClipType
{
kRect_ClipType
kPath_ClipType
}
;
enum
GrWrapOwnership
{
kBorrow_GrWrapOwnership
kAdopt_GrWrapOwnership
}
;
enum
GrBackendTextureFlags
{
kNone_GrBackendTextureFlag
=
0
kRenderTarget_GrBackendTextureFlag
=
kRenderTarget_GrSurfaceFlag
}
;
GR_MAKE_BITFIELD_OPS
(
GrBackendTextureFlags
)
struct
GrBackendTextureDesc
{
GrBackendTextureDesc
(
)
{
memset
(
this
0
sizeof
(
*
this
)
)
;
}
GrBackendTextureFlags
fFlags
;
GrSurfaceOrigin
fOrigin
;
int
fWidth
;
int
fHeight
;
GrPixelConfig
fConfig
;
int
fSampleCnt
;
GrBackendObject
fTextureHandle
;
}
;
struct
GrBackendRenderTargetDesc
{
GrBackendRenderTargetDesc
(
)
{
memset
(
this
0
sizeof
(
*
this
)
)
;
}
int
fWidth
;
int
fHeight
;
GrPixelConfig
fConfig
;
GrSurfaceOrigin
fOrigin
;
int
fSampleCnt
;
int
fStencilBits
;
GrBackendObject
fRenderTargetHandle
;
}
;
enum
GrGLBackendState
{
kRenderTarget_GrGLBackendState
=
1
<
<
0
kTextureBinding_GrGLBackendState
=
1
<
<
1
kView_GrGLBackendState
=
1
<
<
2
kBlend_GrGLBackendState
=
1
<
<
3
kMSAAEnable_GrGLBackendState
=
1
<
<
4
kVertex_GrGLBackendState
=
1
<
<
5
kStencil_GrGLBackendState
=
1
<
<
6
kPixelStore_GrGLBackendState
=
1
<
<
7
kProgram_GrGLBackendState
=
1
<
<
8
kFixedFunction_GrGLBackendState
=
1
<
<
9
kMisc_GrGLBackendState
=
1
<
<
10
kPathRendering_GrGLBackendState
=
1
<
<
11
kALL_GrGLBackendState
=
0xffff
}
;
static
inline
size_t
GrCompressedFormatDataSize
(
GrPixelConfig
config
int
width
int
height
)
{
SkASSERT
(
GrPixelConfigIsCompressed
(
config
)
)
;
static
const
int
kGrIndex8TableSize
=
256
*
4
;
switch
(
config
)
{
case
kIndex_8_GrPixelConfig
:
return
width
*
height
+
kGrIndex8TableSize
;
case
kR11_EAC_GrPixelConfig
:
case
kLATC_GrPixelConfig
:
case
kETC1_GrPixelConfig
:
SkASSERT
(
(
width
&
3
)
=
=
0
)
;
SkASSERT
(
(
height
&
3
)
=
=
0
)
;
return
(
width
>
>
2
)
*
(
height
>
>
2
)
*
8
;
case
kASTC_12x12_GrPixelConfig
:
SkASSERT
(
(
width
%
12
)
=
=
0
)
;
SkASSERT
(
(
height
%
12
)
=
=
0
)
;
return
(
width
/
12
)
*
(
height
/
12
)
*
16
;
default
:
SkFAIL
(
"
Unknown
compressed
pixel
config
"
)
;
return
4
*
width
*
height
;
}
}
static
const
uint32_t
kAll_GrBackendState
=
0xffffffff
;
#
endif
