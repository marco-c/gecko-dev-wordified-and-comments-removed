#
ifndef
GrTypes_DEFINED
#
define
GrTypes_DEFINED
#
include
"
SkMath
.
h
"
#
include
"
SkTypes
.
h
"
#
include
"
GrConfig
.
h
"
#
define
GR_MAKE_BITFIELD_OPS
(
X
)
\
inline
X
operator
|
(
X
a
X
b
)
{
\
return
(
X
)
(
+
a
|
+
b
)
;
\
}
\
inline
X
&
operator
|
=
(
X
&
a
X
b
)
{
\
return
(
a
=
a
|
b
)
;
\
}
\
inline
X
operator
&
(
X
a
X
b
)
{
\
return
(
X
)
(
+
a
&
+
b
)
;
\
}
\
inline
X
&
operator
&
=
(
X
&
a
X
b
)
{
\
return
(
a
=
a
&
b
)
;
\
}
\
template
<
typename
T
>
\
inline
X
operator
&
(
T
a
X
b
)
{
\
return
(
X
)
(
+
a
&
+
b
)
;
\
}
\
template
<
typename
T
>
\
inline
X
operator
&
(
X
a
T
b
)
{
\
return
(
X
)
(
+
a
&
+
b
)
;
\
}
\
#
define
GR_DECL_BITFIELD_OPS_FRIENDS
(
X
)
\
friend
X
operator
|
(
X
a
X
b
)
;
\
friend
X
&
operator
|
=
(
X
&
a
X
b
)
;
\
\
friend
X
operator
&
(
X
a
X
b
)
;
\
friend
X
&
operator
&
=
(
X
&
a
X
b
)
;
\
\
template
<
typename
T
>
\
friend
X
operator
&
(
T
a
X
b
)
;
\
\
template
<
typename
T
>
\
friend
X
operator
&
(
X
a
T
b
)
;
\
template
<
typename
TFlags
>
class
GrTFlagsMask
{
public
:
constexpr
explicit
GrTFlagsMask
(
TFlags
value
)
:
GrTFlagsMask
(
static_cast
<
int
>
(
value
)
)
{
}
constexpr
explicit
GrTFlagsMask
(
int
value
)
:
fValue
(
value
)
{
}
constexpr
int
value
(
)
const
{
return
fValue
;
}
private
:
const
int
fValue
;
}
;
template
<
typename
TFlags
>
constexpr
GrTFlagsMask
<
TFlags
>
operator
|
(
GrTFlagsMask
<
TFlags
>
a
GrTFlagsMask
<
TFlags
>
b
)
{
return
GrTFlagsMask
<
TFlags
>
(
a
.
value
(
)
|
b
.
value
(
)
)
;
}
template
<
typename
TFlags
>
constexpr
GrTFlagsMask
<
TFlags
>
operator
|
(
GrTFlagsMask
<
TFlags
>
a
TFlags
b
)
{
return
GrTFlagsMask
<
TFlags
>
(
a
.
value
(
)
|
static_cast
<
int
>
(
b
)
)
;
}
template
<
typename
TFlags
>
constexpr
GrTFlagsMask
<
TFlags
>
operator
|
(
TFlags
a
GrTFlagsMask
<
TFlags
>
b
)
{
return
GrTFlagsMask
<
TFlags
>
(
static_cast
<
int
>
(
a
)
|
b
.
value
(
)
)
;
}
template
<
typename
TFlags
>
inline
GrTFlagsMask
<
TFlags
>
&
operator
|
=
(
GrTFlagsMask
<
TFlags
>
&
a
GrTFlagsMask
<
TFlags
>
b
)
{
return
(
a
=
a
|
b
)
;
}
template
<
typename
TFlags
>
constexpr
GrTFlagsMask
<
TFlags
>
operator
&
(
GrTFlagsMask
<
TFlags
>
a
GrTFlagsMask
<
TFlags
>
b
)
{
return
GrTFlagsMask
<
TFlags
>
(
a
.
value
(
)
&
b
.
value
(
)
)
;
}
template
<
typename
TFlags
>
constexpr
TFlags
operator
&
(
GrTFlagsMask
<
TFlags
>
a
TFlags
b
)
{
return
static_cast
<
TFlags
>
(
a
.
value
(
)
&
static_cast
<
int
>
(
b
)
)
;
}
template
<
typename
TFlags
>
constexpr
TFlags
operator
&
(
TFlags
a
GrTFlagsMask
<
TFlags
>
b
)
{
return
static_cast
<
TFlags
>
(
static_cast
<
int
>
(
a
)
&
b
.
value
(
)
)
;
}
template
<
typename
TFlags
>
inline
TFlags
&
operator
&
=
(
TFlags
&
a
GrTFlagsMask
<
TFlags
>
b
)
{
return
(
a
=
a
&
b
)
;
}
#
define
GR_MAKE_BITFIELD_CLASS_OPS
(
X
)
\
constexpr
GrTFlagsMask
<
X
>
operator
~
(
X
a
)
{
\
return
GrTFlagsMask
<
X
>
(
~
static_cast
<
int
>
(
a
)
)
;
\
}
\
constexpr
X
operator
|
(
X
a
X
b
)
{
\
return
static_cast
<
X
>
(
static_cast
<
int
>
(
a
)
|
static_cast
<
int
>
(
b
)
)
;
\
}
\
inline
X
&
operator
|
=
(
X
&
a
X
b
)
{
\
return
(
a
=
a
|
b
)
;
\
}
\
constexpr
bool
operator
&
(
X
a
X
b
)
{
\
return
SkToBool
(
static_cast
<
int
>
(
a
)
&
static_cast
<
int
>
(
b
)
)
;
\
}
\
#
define
GR_DECL_BITFIELD_CLASS_OPS_FRIENDS
(
X
)
\
friend
constexpr
GrTFlagsMask
<
X
>
operator
~
(
X
)
;
\
friend
constexpr
X
operator
|
(
X
X
)
;
\
friend
X
&
operator
|
=
(
X
&
X
)
;
\
friend
constexpr
bool
operator
&
(
X
X
)
;
#
define
GR_CT_MAX
(
a
b
)
(
(
(
b
)
<
(
a
)
)
?
(
a
)
:
(
b
)
)
#
define
GR_CT_MIN
(
a
b
)
(
(
(
b
)
<
(
a
)
)
?
(
b
)
:
(
a
)
)
static
inline
int32_t
GrIDivRoundUp
(
int
x
int
y
)
{
SkASSERT
(
y
>
0
)
;
return
(
x
+
(
y
-
1
)
)
/
y
;
}
static
inline
uint32_t
GrUIDivRoundUp
(
uint32_t
x
uint32_t
y
)
{
return
(
x
+
(
y
-
1
)
)
/
y
;
}
static
inline
size_t
GrSizeDivRoundUp
(
size_t
x
size_t
y
)
{
return
(
x
+
(
y
-
1
)
)
/
y
;
}
#
define
GR_CT_DIV_ROUND_UP
(
X
Y
)
(
(
(
X
)
+
(
(
Y
)
-
1
)
)
/
(
Y
)
)
static
inline
uint32_t
GrUIAlignUp
(
uint32_t
x
uint32_t
alignment
)
{
return
GrUIDivRoundUp
(
x
alignment
)
*
alignment
;
}
static
inline
size_t
GrSizeAlignUp
(
size_t
x
size_t
alignment
)
{
return
GrSizeDivRoundUp
(
x
alignment
)
*
alignment
;
}
#
define
GR_CT_ALIGN_UP
(
X
A
)
(
GR_CT_DIV_ROUND_UP
(
(
X
)
(
A
)
)
*
(
A
)
)
static
inline
uint32_t
GrUIAlignUpPad
(
uint32_t
x
uint32_t
alignment
)
{
return
(
alignment
-
x
%
alignment
)
%
alignment
;
}
static
inline
size_t
GrSizeAlignUpPad
(
size_t
x
size_t
alignment
)
{
return
(
alignment
-
x
%
alignment
)
%
alignment
;
}
static
inline
uint32_t
GrUIAlignDown
(
uint32_t
x
uint32_t
alignment
)
{
return
(
x
/
alignment
)
*
alignment
;
}
static
inline
size_t
GrSizeAlignDown
(
size_t
x
uint32_t
alignment
)
{
return
(
x
/
alignment
)
*
alignment
;
}
enum
GrBackend
{
kMetal_GrBackend
kOpenGL_GrBackend
kVulkan_GrBackend
kMock_GrBackend
}
;
typedef
intptr_t
GrBackendContext
;
enum
class
GrAA
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
class
GrMipMapped
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
class
GrPrimitiveType
{
kTriangles
kTriangleStrip
kTriangleFan
kPoints
kLines
kLineStrip
kLinesAdjacency
}
;
static
constexpr
int
kNumGrPrimitiveTypes
=
(
int
)
GrPrimitiveType
:
:
kLinesAdjacency
+
1
;
static
constexpr
bool
GrIsPrimTypeLines
(
GrPrimitiveType
type
)
{
return
GrPrimitiveType
:
:
kLines
=
=
type
|
|
GrPrimitiveType
:
:
kLineStrip
=
=
type
|
|
GrPrimitiveType
:
:
kLinesAdjacency
=
=
type
;
}
static
constexpr
bool
GrIsPrimTypeTris
(
GrPrimitiveType
type
)
{
return
GrPrimitiveType
:
:
kTriangles
=
=
type
|
|
GrPrimitiveType
:
:
kTriangleStrip
=
=
type
|
|
GrPrimitiveType
:
:
kTriangleFan
=
=
type
;
}
static
constexpr
bool
GrPrimTypeRequiresGeometryShaderSupport
(
GrPrimitiveType
type
)
{
return
GrPrimitiveType
:
:
kLinesAdjacency
=
=
type
;
}
enum
GrMaskFormat
{
kA8_GrMaskFormat
kA565_GrMaskFormat
kARGB_GrMaskFormat
kLast_GrMaskFormat
=
kARGB_GrMaskFormat
}
;
static
const
int
kMaskFormatCount
=
kLast_GrMaskFormat
+
1
;
static
inline
int
GrMaskFormatBytesPerPixel
(
GrMaskFormat
format
)
{
SkASSERT
(
format
<
kMaskFormatCount
)
;
static
const
int
sBytesPerPixel
[
]
=
{
1
2
4
}
;
static_assert
(
SK_ARRAY_COUNT
(
sBytesPerPixel
)
=
=
kMaskFormatCount
"
array_size_mismatch
"
)
;
static_assert
(
kA8_GrMaskFormat
=
=
0
"
enum_order_dependency
"
)
;
static_assert
(
kA565_GrMaskFormat
=
=
1
"
enum_order_dependency
"
)
;
static_assert
(
kARGB_GrMaskFormat
=
=
2
"
enum_order_dependency
"
)
;
return
sBytesPerPixel
[
(
int
)
format
]
;
}
enum
GrPixelConfig
{
kUnknown_GrPixelConfig
kAlpha_8_GrPixelConfig
kGray_8_GrPixelConfig
kRGB_565_GrPixelConfig
kRGBA_4444_GrPixelConfig
kRGBA_8888_GrPixelConfig
kBGRA_8888_GrPixelConfig
kSRGBA_8888_GrPixelConfig
kSBGRA_8888_GrPixelConfig
kRGBA_float_GrPixelConfig
kRG_float_GrPixelConfig
kAlpha_half_GrPixelConfig
kRGBA_half_GrPixelConfig
kPrivateConfig1_GrPixelConfig
kPrivateConfig2_GrPixelConfig
kPrivateConfig3_GrPixelConfig
kPrivateConfig4_GrPixelConfig
kPrivateConfig5_GrPixelConfig
kLast_GrPixelConfig
=
kPrivateConfig5_GrPixelConfig
}
;
static
const
int
kGrPixelConfigCnt
=
kLast_GrPixelConfig
+
1
;
#
if
SK_PMCOLOR_BYTE_ORDER
(
B
G
R
A
)
static
const
GrPixelConfig
kSkia8888_GrPixelConfig
=
kBGRA_8888_GrPixelConfig
;
#
elif
SK_PMCOLOR_BYTE_ORDER
(
R
G
B
A
)
static
const
GrPixelConfig
kSkia8888_GrPixelConfig
=
kRGBA_8888_GrPixelConfig
;
#
else
static
const
GrPixelConfig
kSkia8888_GrPixelConfig
=
kBGRA_8888_GrPixelConfig
;
#
endif
enum
GrSurfaceFlags
{
kNone_GrSurfaceFlags
=
0x0
kRenderTarget_GrSurfaceFlag
=
0x1
kPerformInitialClear_GrSurfaceFlag
=
0x2
}
;
GR_MAKE_BITFIELD_OPS
(
GrSurfaceFlags
)
typedef
intptr_t
GrBackendObject
;
enum
GrSurfaceOrigin
{
kTopLeft_GrSurfaceOrigin
kBottomLeft_GrSurfaceOrigin
}
;
struct
GrMipLevel
{
const
void
*
fPixels
;
size_t
fRowBytes
;
}
;
struct
GrSurfaceDesc
{
GrSurfaceDesc
(
)
:
fFlags
(
kNone_GrSurfaceFlags
)
fOrigin
(
kTopLeft_GrSurfaceOrigin
)
fWidth
(
0
)
fHeight
(
0
)
fConfig
(
kUnknown_GrPixelConfig
)
fSampleCnt
(
1
)
{
}
GrSurfaceFlags
fFlags
;
GrSurfaceOrigin
fOrigin
;
int
fWidth
;
int
fHeight
;
GrPixelConfig
fConfig
;
int
fSampleCnt
;
}
;
enum
GrClipType
{
kRect_ClipType
kPath_ClipType
}
;
enum
GrWrapOwnership
{
kBorrow_GrWrapOwnership
kAdopt_GrWrapOwnership
}
;
enum
GrGLBackendState
{
kRenderTarget_GrGLBackendState
=
1
<
<
0
kTextureBinding_GrGLBackendState
=
1
<
<
1
kView_GrGLBackendState
=
1
<
<
2
kBlend_GrGLBackendState
=
1
<
<
3
kMSAAEnable_GrGLBackendState
=
1
<
<
4
kVertex_GrGLBackendState
=
1
<
<
5
kStencil_GrGLBackendState
=
1
<
<
6
kPixelStore_GrGLBackendState
=
1
<
<
7
kProgram_GrGLBackendState
=
1
<
<
8
kFixedFunction_GrGLBackendState
=
1
<
<
9
kMisc_GrGLBackendState
=
1
<
<
10
kPathRendering_GrGLBackendState
=
1
<
<
11
kALL_GrGLBackendState
=
0xffff
}
;
static
const
uint32_t
kAll_GrBackendState
=
0xffffffff
;
enum
class
GrSemaphoresSubmitted
:
bool
{
kNo
=
false
kYes
=
true
}
;
#
endif
