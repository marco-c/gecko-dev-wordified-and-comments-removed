#
ifndef
GrContextThreadSafeProxy_DEFINED
#
define
GrContextThreadSafeProxy_DEFINED
#
include
"
.
.
/
private
/
GrContext_Base
.
h
"
class
GrBackendFormat
;
class
GrContextThreadSafeProxyPriv
;
struct
SkImageInfo
;
class
SkSurfaceCharacterization
;
class
SK_API
GrContextThreadSafeProxy
:
public
GrContext_Base
{
public
:
~
GrContextThreadSafeProxy
(
)
override
;
SkSurfaceCharacterization
createCharacterization
(
size_t
cacheMaxResourceBytes
const
SkImageInfo
&
ii
const
GrBackendFormat
&
backendFormat
int
sampleCount
GrSurfaceOrigin
origin
const
SkSurfaceProps
&
surfaceProps
bool
isMipMapped
bool
willUseGLFBO0
=
false
bool
isTextureable
=
true
)
;
bool
operator
=
=
(
const
GrContextThreadSafeProxy
&
that
)
const
{
SkASSERT
(
(
this
=
=
&
that
)
=
=
(
this
-
>
contextID
(
)
=
=
that
.
contextID
(
)
)
)
;
return
this
=
=
&
that
;
}
bool
operator
!
=
(
const
GrContextThreadSafeProxy
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
GrContextThreadSafeProxyPriv
priv
(
)
;
const
GrContextThreadSafeProxyPriv
priv
(
)
const
;
private
:
friend
class
GrContextThreadSafeProxyPriv
;
GrContextThreadSafeProxy
(
GrBackendApi
const
GrContextOptions
&
uint32_t
contextID
)
;
bool
init
(
sk_sp
<
const
GrCaps
>
sk_sp
<
GrSkSLFPFactoryCache
>
)
override
;
typedef
GrContext_Base
INHERITED
;
}
;
#
endif
