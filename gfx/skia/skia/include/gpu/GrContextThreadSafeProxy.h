#
ifndef
GrContextThreadSafeProxy_DEFINED
#
define
GrContextThreadSafeProxy_DEFINED
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
gpu
/
GpuTypes
.
h
"
#
include
"
include
/
gpu
/
GrContextOptions
.
h
"
#
include
"
include
/
gpu
/
GrTypes
.
h
"
#
include
<
atomic
>
class
GrBackendFormat
;
class
GrCaps
;
class
GrContextThreadSafeProxyPriv
;
class
GrSurfaceCharacterization
;
class
GrThreadSafeCache
;
class
GrThreadSafePipelineBuilder
;
class
SkSurfaceProps
;
enum
class
SkTextureCompressionType
;
namespace
sktext
:
:
gpu
{
class
TextBlobRedrawCoordinator
;
}
class
SK_API
GrContextThreadSafeProxy
:
public
SkNVRefCnt
<
GrContextThreadSafeProxy
>
{
public
:
virtual
~
GrContextThreadSafeProxy
(
)
;
GrSurfaceCharacterization
createCharacterization
(
size_t
cacheMaxResourceBytes
const
SkImageInfo
&
ii
const
GrBackendFormat
&
backendFormat
int
sampleCount
GrSurfaceOrigin
origin
const
SkSurfaceProps
&
surfaceProps
skgpu
:
:
Mipmapped
isMipmapped
bool
willUseGLFBO0
=
false
bool
isTextureable
=
true
skgpu
:
:
Protected
isProtected
=
GrProtected
:
:
kNo
bool
vkRTSupportsInputAttachment
=
false
bool
forVulkanSecondaryCommandBuffer
=
false
)
;
GrBackendFormat
defaultBackendFormat
(
SkColorType
ct
GrRenderable
renderable
)
const
;
GrBackendFormat
compressedBackendFormat
(
SkTextureCompressionType
c
)
const
;
int
maxSurfaceSampleCountForColorType
(
SkColorType
colorType
)
const
;
bool
isValid
(
)
const
{
return
nullptr
!
=
fCaps
;
}
bool
operator
=
=
(
const
GrContextThreadSafeProxy
&
that
)
const
{
SkASSERT
(
(
this
=
=
&
that
)
=
=
(
this
-
>
fContextID
=
=
that
.
fContextID
)
)
;
return
this
=
=
&
that
;
}
bool
operator
!
=
(
const
GrContextThreadSafeProxy
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
GrContextThreadSafeProxyPriv
priv
(
)
;
const
GrContextThreadSafeProxyPriv
priv
(
)
const
;
protected
:
GrContextThreadSafeProxy
(
GrBackendApi
const
GrContextOptions
&
)
;
private
:
friend
class
GrContextThreadSafeProxyPriv
;
void
abandonContext
(
)
;
bool
abandoned
(
)
const
;
void
init
(
sk_sp
<
const
GrCaps
>
sk_sp
<
GrThreadSafePipelineBuilder
>
)
;
virtual
bool
isValidCharacterizationForVulkan
(
sk_sp
<
const
GrCaps
>
bool
isTextureable
skgpu
:
:
Mipmapped
isMipmapped
skgpu
:
:
Protected
isProtected
bool
vkRTSupportsInputAttachment
bool
forVulkanSecondaryCommandBuffer
)
;
const
GrBackendApi
fBackend
;
const
GrContextOptions
fOptions
;
const
uint32_t
fContextID
;
sk_sp
<
const
GrCaps
>
fCaps
;
std
:
:
unique_ptr
<
sktext
:
:
gpu
:
:
TextBlobRedrawCoordinator
>
fTextBlobRedrawCoordinator
;
std
:
:
unique_ptr
<
GrThreadSafeCache
>
fThreadSafeCache
;
sk_sp
<
GrThreadSafePipelineBuilder
>
fPipelineBuilder
;
std
:
:
atomic
<
bool
>
fAbandoned
{
false
}
;
}
;
#
endif
