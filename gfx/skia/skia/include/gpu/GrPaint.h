#
ifndef
GrPaint_DEFINED
#
define
GrPaint_DEFINED
#
include
"
GrColor
.
h
"
#
include
"
GrXferProcessor
.
h
"
#
include
"
effects
/
GrPorterDuffXferProcessor
.
h
"
#
include
"
GrFragmentProcessor
.
h
"
#
include
"
SkRegion
.
h
"
#
include
"
SkXfermode
.
h
"
class
GrPaint
{
public
:
GrPaint
(
)
;
GrPaint
(
const
GrPaint
&
paint
)
{
*
this
=
paint
;
}
~
GrPaint
(
)
{
this
-
>
resetFragmentProcessors
(
)
;
}
void
setColor
(
GrColor
color
)
{
fColor
=
color
;
}
GrColor
getColor
(
)
const
{
return
fColor
;
}
void
setAntiAlias
(
bool
aa
)
{
fAntiAlias
=
aa
;
}
bool
isAntiAlias
(
)
const
{
return
fAntiAlias
;
}
void
setDisableOutputConversionToSRGB
(
bool
srgb
)
{
fDisableOutputConversionToSRGB
=
srgb
;
}
bool
getDisableOutputConversionToSRGB
(
)
const
{
return
fDisableOutputConversionToSRGB
;
}
void
setAllowSRGBInputs
(
bool
allowSRGBInputs
)
{
fAllowSRGBInputs
=
allowSRGBInputs
;
}
bool
getAllowSRGBInputs
(
)
const
{
return
fAllowSRGBInputs
;
}
const
GrXPFactory
*
setXPFactory
(
const
GrXPFactory
*
xpFactory
)
{
fXPFactory
.
reset
(
SkSafeRef
(
xpFactory
)
)
;
return
xpFactory
;
}
void
setPorterDuffXPFactory
(
SkXfermode
:
:
Mode
mode
)
{
fXPFactory
.
reset
(
GrPorterDuffXPFactory
:
:
Create
(
mode
)
)
;
}
void
setCoverageSetOpXPFactory
(
SkRegion
:
:
Op
regionOp
bool
invertCoverage
=
false
)
;
const
GrFragmentProcessor
*
addColorFragmentProcessor
(
const
GrFragmentProcessor
*
fp
)
{
SkASSERT
(
fp
)
;
fColorFragmentProcessors
.
push_back
(
SkRef
(
fp
)
)
;
return
fp
;
}
const
GrFragmentProcessor
*
addCoverageFragmentProcessor
(
const
GrFragmentProcessor
*
fp
)
{
SkASSERT
(
fp
)
;
fCoverageFragmentProcessors
.
push_back
(
SkRef
(
fp
)
)
;
return
fp
;
}
void
addColorTextureProcessor
(
GrTexture
*
const
SkMatrix
&
)
;
void
addCoverageTextureProcessor
(
GrTexture
*
const
SkMatrix
&
)
;
void
addColorTextureProcessor
(
GrTexture
*
const
SkMatrix
&
const
GrTextureParams
&
)
;
void
addCoverageTextureProcessor
(
GrTexture
*
const
SkMatrix
&
const
GrTextureParams
&
)
;
int
numColorFragmentProcessors
(
)
const
{
return
fColorFragmentProcessors
.
count
(
)
;
}
int
numCoverageFragmentProcessors
(
)
const
{
return
fCoverageFragmentProcessors
.
count
(
)
;
}
int
numTotalFragmentProcessors
(
)
const
{
return
this
-
>
numColorFragmentProcessors
(
)
+
this
-
>
numCoverageFragmentProcessors
(
)
;
}
const
GrXPFactory
*
getXPFactory
(
)
const
{
return
fXPFactory
;
}
const
GrFragmentProcessor
*
getColorFragmentProcessor
(
int
i
)
const
{
return
fColorFragmentProcessors
[
i
]
;
}
const
GrFragmentProcessor
*
getCoverageFragmentProcessor
(
int
i
)
const
{
return
fCoverageFragmentProcessors
[
i
]
;
}
GrPaint
&
operator
=
(
const
GrPaint
&
paint
)
{
fAntiAlias
=
paint
.
fAntiAlias
;
fDisableOutputConversionToSRGB
=
paint
.
fDisableOutputConversionToSRGB
;
fAllowSRGBInputs
=
paint
.
fAllowSRGBInputs
;
fColor
=
paint
.
fColor
;
this
-
>
resetFragmentProcessors
(
)
;
fColorFragmentProcessors
=
paint
.
fColorFragmentProcessors
;
fCoverageFragmentProcessors
=
paint
.
fCoverageFragmentProcessors
;
for
(
int
i
=
0
;
i
<
fColorFragmentProcessors
.
count
(
)
;
+
+
i
)
{
fColorFragmentProcessors
[
i
]
-
>
ref
(
)
;
}
for
(
int
i
=
0
;
i
<
fCoverageFragmentProcessors
.
count
(
)
;
+
+
i
)
{
fCoverageFragmentProcessors
[
i
]
-
>
ref
(
)
;
}
fXPFactory
.
reset
(
SkSafeRef
(
paint
.
getXPFactory
(
)
)
)
;
return
*
this
;
}
bool
isConstantBlendedColor
(
GrColor
*
constantColor
)
const
;
private
:
void
resetFragmentProcessors
(
)
{
for
(
int
i
=
0
;
i
<
fColorFragmentProcessors
.
count
(
)
;
+
+
i
)
{
fColorFragmentProcessors
[
i
]
-
>
unref
(
)
;
}
for
(
int
i
=
0
;
i
<
fCoverageFragmentProcessors
.
count
(
)
;
+
+
i
)
{
fCoverageFragmentProcessors
[
i
]
-
>
unref
(
)
;
}
fColorFragmentProcessors
.
reset
(
)
;
fCoverageFragmentProcessors
.
reset
(
)
;
}
mutable
SkAutoTUnref
<
const
GrXPFactory
>
fXPFactory
;
SkSTArray
<
4
const
GrFragmentProcessor
*
true
>
fColorFragmentProcessors
;
SkSTArray
<
2
const
GrFragmentProcessor
*
true
>
fCoverageFragmentProcessors
;
bool
fAntiAlias
;
bool
fDisableOutputConversionToSRGB
;
bool
fAllowSRGBInputs
;
GrColor
fColor
;
}
;
#
endif
