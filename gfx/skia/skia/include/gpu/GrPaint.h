#
ifndef
GrPaint_DEFINED
#
define
GrPaint_DEFINED
#
include
"
GrColor
.
h
"
#
include
"
GrColorSpaceXform
.
h
"
#
include
"
GrXferProcessor
.
h
"
#
include
"
effects
/
GrPorterDuffXferProcessor
.
h
"
#
include
"
GrFragmentProcessor
.
h
"
#
include
"
SkBlendMode
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkRegion
.
h
"
class
GrPaint
{
public
:
GrPaint
(
)
;
GrPaint
(
const
GrPaint
&
paint
)
{
*
this
=
paint
;
}
~
GrPaint
(
)
{
}
void
setColor4f
(
const
GrColor4f
&
color
)
{
fColor
=
color
;
}
const
GrColor4f
&
getColor4f
(
)
const
{
return
fColor
;
}
GrColor
getColor
(
)
const
{
return
fColor
.
toGrColor
(
)
;
}
void
setAntiAlias
(
bool
aa
)
{
fAntiAlias
=
aa
;
}
bool
isAntiAlias
(
)
const
{
return
fAntiAlias
;
}
void
setDisableOutputConversionToSRGB
(
bool
srgb
)
{
fDisableOutputConversionToSRGB
=
srgb
;
}
bool
getDisableOutputConversionToSRGB
(
)
const
{
return
fDisableOutputConversionToSRGB
;
}
void
setAllowSRGBInputs
(
bool
allowSRGBInputs
)
{
fAllowSRGBInputs
=
allowSRGBInputs
;
}
bool
getAllowSRGBInputs
(
)
const
{
return
fAllowSRGBInputs
;
}
bool
usesDistanceVectorField
(
)
const
{
return
fUsesDistanceVectorField
;
}
void
setGammaCorrect
(
bool
gammaCorrect
)
{
setDisableOutputConversionToSRGB
(
!
gammaCorrect
)
;
setAllowSRGBInputs
(
gammaCorrect
)
;
}
void
setXPFactory
(
sk_sp
<
GrXPFactory
>
xpFactory
)
{
fXPFactory
=
std
:
:
move
(
xpFactory
)
;
}
void
setPorterDuffXPFactory
(
SkBlendMode
mode
)
{
fXPFactory
=
GrPorterDuffXPFactory
:
:
Make
(
(
SkXfermode
:
:
Mode
)
mode
)
;
}
void
setPorterDuffXPFactory
(
SkXfermode
:
:
Mode
mode
)
{
fXPFactory
=
GrPorterDuffXPFactory
:
:
Make
(
mode
)
;
}
void
setCoverageSetOpXPFactory
(
SkRegion
:
:
Op
bool
invertCoverage
=
false
)
;
void
addColorFragmentProcessor
(
sk_sp
<
GrFragmentProcessor
>
fp
)
{
SkASSERT
(
fp
)
;
fUsesDistanceVectorField
|
=
fp
-
>
usesDistanceVectorField
(
)
;
fColorFragmentProcessors
.
push_back
(
std
:
:
move
(
fp
)
)
;
}
void
addCoverageFragmentProcessor
(
sk_sp
<
GrFragmentProcessor
>
fp
)
{
SkASSERT
(
fp
)
;
fUsesDistanceVectorField
|
=
fp
-
>
usesDistanceVectorField
(
)
;
fCoverageFragmentProcessors
.
push_back
(
std
:
:
move
(
fp
)
)
;
}
void
addColorTextureProcessor
(
GrTexture
*
sk_sp
<
GrColorSpaceXform
>
const
SkMatrix
&
)
;
void
addCoverageTextureProcessor
(
GrTexture
*
const
SkMatrix
&
)
;
void
addColorTextureProcessor
(
GrTexture
*
sk_sp
<
GrColorSpaceXform
>
const
SkMatrix
&
const
GrTextureParams
&
)
;
void
addCoverageTextureProcessor
(
GrTexture
*
const
SkMatrix
&
const
GrTextureParams
&
)
;
int
numColorFragmentProcessors
(
)
const
{
return
fColorFragmentProcessors
.
count
(
)
;
}
int
numCoverageFragmentProcessors
(
)
const
{
return
fCoverageFragmentProcessors
.
count
(
)
;
}
int
numTotalFragmentProcessors
(
)
const
{
return
this
-
>
numColorFragmentProcessors
(
)
+
this
-
>
numCoverageFragmentProcessors
(
)
;
}
GrXPFactory
*
getXPFactory
(
)
const
{
return
fXPFactory
.
get
(
)
;
}
GrFragmentProcessor
*
getColorFragmentProcessor
(
int
i
)
const
{
return
fColorFragmentProcessors
[
i
]
.
get
(
)
;
}
GrFragmentProcessor
*
getCoverageFragmentProcessor
(
int
i
)
const
{
return
fCoverageFragmentProcessors
[
i
]
.
get
(
)
;
}
GrPaint
&
operator
=
(
const
GrPaint
&
paint
)
{
fAntiAlias
=
paint
.
fAntiAlias
;
fDisableOutputConversionToSRGB
=
paint
.
fDisableOutputConversionToSRGB
;
fAllowSRGBInputs
=
paint
.
fAllowSRGBInputs
;
fUsesDistanceVectorField
=
paint
.
fUsesDistanceVectorField
;
fColor
=
paint
.
fColor
;
fColorFragmentProcessors
=
paint
.
fColorFragmentProcessors
;
fCoverageFragmentProcessors
=
paint
.
fCoverageFragmentProcessors
;
fXPFactory
=
paint
.
fXPFactory
;
return
*
this
;
}
bool
isConstantBlendedColor
(
GrColor
*
constantColor
)
const
{
GrColor
paintColor
=
this
-
>
getColor
(
)
;
if
(
!
fXPFactory
&
&
fColorFragmentProcessors
.
empty
(
)
)
{
if
(
!
GrColorIsOpaque
(
paintColor
)
)
{
return
false
;
}
*
constantColor
=
paintColor
;
return
true
;
}
return
this
-
>
internalIsConstantBlendedColor
(
paintColor
constantColor
)
;
}
private
:
bool
internalIsConstantBlendedColor
(
GrColor
paintColor
GrColor
*
constantColor
)
const
;
mutable
sk_sp
<
GrXPFactory
>
fXPFactory
;
SkSTArray
<
4
sk_sp
<
GrFragmentProcessor
>
>
fColorFragmentProcessors
;
SkSTArray
<
2
sk_sp
<
GrFragmentProcessor
>
>
fCoverageFragmentProcessors
;
bool
fAntiAlias
;
bool
fDisableOutputConversionToSRGB
;
bool
fAllowSRGBInputs
;
bool
fUsesDistanceVectorField
;
GrColor4f
fColor
;
}
;
#
endif
