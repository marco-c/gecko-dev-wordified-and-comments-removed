#
ifndef
SkTextBox_DEFINED
#
define
SkTextBox_DEFINED
#
include
"
SkCanvas
.
h
"
class
SkTextBox
{
public
:
SkTextBox
(
)
;
enum
Mode
{
kOneLine_Mode
kLineBreak_Mode
kModeCount
}
;
Mode
getMode
(
)
const
{
return
(
Mode
)
fMode
;
}
void
setMode
(
Mode
)
;
enum
SpacingAlign
{
kStart_SpacingAlign
kCenter_SpacingAlign
kEnd_SpacingAlign
kSpacingAlignCount
}
;
SpacingAlign
getSpacingAlign
(
)
const
{
return
(
SpacingAlign
)
fSpacingAlign
;
}
void
setSpacingAlign
(
SpacingAlign
)
;
void
getBox
(
SkRect
*
)
const
;
void
setBox
(
const
SkRect
&
)
;
void
setBox
(
SkScalar
left
SkScalar
top
SkScalar
right
SkScalar
bottom
)
;
void
getSpacing
(
SkScalar
*
mul
SkScalar
*
add
)
const
;
void
setSpacing
(
SkScalar
mul
SkScalar
add
)
;
void
draw
(
SkCanvas
*
const
char
text
[
]
size_t
len
const
SkPaint
&
)
;
void
setText
(
const
char
text
[
]
size_t
len
const
SkPaint
&
)
;
void
draw
(
SkCanvas
*
)
;
int
countLines
(
)
const
;
SkScalar
getTextHeight
(
)
const
;
sk_sp
<
SkTextBlob
>
snapshotTextBlob
(
SkScalar
*
computedBottom
)
const
;
class
Visitor
{
public
:
virtual
~
Visitor
(
)
{
}
virtual
void
operator
(
)
(
const
char
*
size_t
SkScalar
x
SkScalar
y
const
SkPaint
&
)
=
0
;
}
;
private
:
SkRect
fBox
;
SkScalar
fSpacingMul
fSpacingAdd
;
uint8_t
fMode
fSpacingAlign
;
const
char
*
fText
;
size_t
fLen
;
const
SkPaint
*
fPaint
;
SkScalar
visit
(
Visitor
&
const
char
text
[
]
size_t
len
const
SkPaint
&
)
const
;
}
;
class
SkTextLineBreaker
{
public
:
static
int
CountLines
(
const
char
text
[
]
size_t
len
const
SkPaint
&
SkScalar
width
)
;
}
;
#
endif
