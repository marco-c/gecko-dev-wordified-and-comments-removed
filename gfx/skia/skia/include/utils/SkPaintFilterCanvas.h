#
ifndef
SkPaintFilterCanvas_DEFINED
#
define
SkPaintFilterCanvas_DEFINED
#
include
"
SkNWayCanvas
.
h
"
#
include
"
SkTLazy
.
h
"
class
SK_API
SkPaintFilterCanvas
:
public
SkNWayCanvas
{
public
:
SkPaintFilterCanvas
(
int
width
int
height
)
;
SkPaintFilterCanvas
(
SkCanvas
*
canvas
)
;
enum
Type
{
kPaint_Type
kPoint_Type
kBitmap_Type
kRect_Type
kRRect_Type
kDRRect_Type
kOval_Type
kPath_Type
kPicture_Type
kText_Type
kTextBlob_Type
kVertices_Type
kPatch_Type
kTypeCount
}
;
protected
:
virtual
bool
onFilter
(
SkTCopyOnFirstWrite
<
SkPaint
>
*
paint
Type
type
)
const
=
0
;
void
onDrawPaint
(
const
SkPaint
&
)
override
;
void
onDrawPoints
(
PointMode
size_t
count
const
SkPoint
pts
[
]
const
SkPaint
&
)
override
;
void
onDrawRect
(
const
SkRect
&
const
SkPaint
&
)
override
;
void
onDrawRRect
(
const
SkRRect
&
const
SkPaint
&
)
override
;
void
onDrawDRRect
(
const
SkRRect
&
const
SkRRect
&
const
SkPaint
&
)
override
;
void
onDrawOval
(
const
SkRect
&
const
SkPaint
&
)
override
;
void
onDrawPath
(
const
SkPath
&
const
SkPaint
&
)
override
;
void
onDrawBitmap
(
const
SkBitmap
&
SkScalar
left
SkScalar
top
const
SkPaint
*
)
override
;
void
onDrawBitmapRect
(
const
SkBitmap
&
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
*
SrcRectConstraint
)
override
;
void
onDrawBitmapNine
(
const
SkBitmap
&
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
*
)
override
;
void
onDrawImage
(
const
SkImage
*
SkScalar
left
SkScalar
top
const
SkPaint
*
)
override
;
void
onDrawImageRect
(
const
SkImage
*
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
*
SrcRectConstraint
)
override
;
void
onDrawImageNine
(
const
SkImage
*
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
*
)
override
;
void
onDrawVertices
(
VertexMode
vmode
int
vertexCount
const
SkPoint
vertices
[
]
const
SkPoint
texs
[
]
const
SkColor
colors
[
]
SkXfermode
*
xmode
const
uint16_t
indices
[
]
int
indexCount
const
SkPaint
&
)
override
;
void
onDrawPatch
(
const
SkPoint
cubics
[
12
]
const
SkColor
colors
[
4
]
const
SkPoint
texCoords
[
4
]
SkXfermode
*
xmode
const
SkPaint
&
paint
)
override
;
void
onDrawPicture
(
const
SkPicture
*
const
SkMatrix
*
const
SkPaint
*
)
override
;
void
onDrawText
(
const
void
*
text
size_t
byteLength
SkScalar
x
SkScalar
y
const
SkPaint
&
)
override
;
void
onDrawPosText
(
const
void
*
text
size_t
byteLength
const
SkPoint
pos
[
]
const
SkPaint
&
)
override
;
void
onDrawPosTextH
(
const
void
*
text
size_t
byteLength
const
SkScalar
xpos
[
]
SkScalar
constY
const
SkPaint
&
)
override
;
void
onDrawTextOnPath
(
const
void
*
text
size_t
byteLength
const
SkPath
&
path
const
SkMatrix
*
matrix
const
SkPaint
&
)
override
;
void
onDrawTextBlob
(
const
SkTextBlob
*
blob
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
override
;
private
:
class
AutoPaintFilter
;
typedef
SkNWayCanvas
INHERITED
;
}
;
#
endif
