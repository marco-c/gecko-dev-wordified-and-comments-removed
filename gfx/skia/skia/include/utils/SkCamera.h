#
ifndef
SkCamera_DEFINED
#
define
SkCamera_DEFINED
#
include
"
include
/
core
/
SkM44
.
h
"
#
include
"
include
/
core
/
SkMatrix
.
h
"
#
include
"
include
/
core
/
SkScalar
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
private
/
base
/
SkNoncopyable
.
h
"
class
SkCanvas
;
class
SkPatch3D
{
public
:
SkPatch3D
(
)
;
void
reset
(
)
;
void
transform
(
const
SkM44
&
SkPatch3D
*
dst
=
nullptr
)
const
;
SkScalar
dotWith
(
SkScalar
dx
SkScalar
dy
SkScalar
dz
)
const
;
SkScalar
dotWith
(
const
SkV3
&
v
)
const
{
return
this
-
>
dotWith
(
v
.
x
v
.
y
v
.
z
)
;
}
void
rotate
(
SkScalar
SkScalar
SkScalar
)
{
}
void
rotateDegrees
(
SkScalar
SkScalar
SkScalar
)
{
}
private
:
public
:
SkV3
fU
fV
;
SkV3
fOrigin
;
friend
class
SkCamera3D
;
}
;
class
SkCamera3D
{
public
:
SkCamera3D
(
)
;
void
reset
(
)
;
void
update
(
)
;
void
patchToMatrix
(
const
SkPatch3D
&
SkMatrix
*
matrix
)
const
;
SkV3
fLocation
;
SkV3
fAxis
;
SkV3
fZenith
;
SkV3
fObserver
;
private
:
mutable
SkMatrix
fOrientation
;
mutable
bool
fNeedToUpdate
;
void
doUpdate
(
)
const
;
}
;
class
SK_API
Sk3DView
:
SkNoncopyable
{
public
:
Sk3DView
(
)
;
~
Sk3DView
(
)
;
void
save
(
)
;
void
restore
(
)
;
void
translate
(
SkScalar
x
SkScalar
y
SkScalar
z
)
;
void
rotateX
(
SkScalar
deg
)
;
void
rotateY
(
SkScalar
deg
)
;
void
rotateZ
(
SkScalar
deg
)
;
#
ifdef
SK_BUILD_FOR_ANDROID_FRAMEWORK
void
setCameraLocation
(
SkScalar
x
SkScalar
y
SkScalar
z
)
;
SkScalar
getCameraLocationX
(
)
const
;
SkScalar
getCameraLocationY
(
)
const
;
SkScalar
getCameraLocationZ
(
)
const
;
#
endif
void
getMatrix
(
SkMatrix
*
)
const
;
void
applyToCanvas
(
SkCanvas
*
)
const
;
SkScalar
dotWithNormal
(
SkScalar
dx
SkScalar
dy
SkScalar
dz
)
const
;
private
:
struct
Rec
{
Rec
*
fNext
;
SkM44
fMatrix
;
}
;
Rec
*
fRec
;
Rec
fInitialRec
;
SkCamera3D
fCamera
;
}
;
#
endif
