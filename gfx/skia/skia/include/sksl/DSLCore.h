#
ifndef
SKSL_DSL_CORE
#
define
SKSL_DSL_CORE
#
include
"
include
/
private
/
SkSLDefines
.
h
"
#
include
"
include
/
private
/
SkSLProgramKind
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
"
include
/
sksl
/
DSLCase
.
h
"
#
include
"
include
/
sksl
/
DSLExpression
.
h
"
#
include
"
include
/
sksl
/
DSLStatement
.
h
"
#
include
"
include
/
sksl
/
DSLVar
.
h
"
#
include
"
include
/
sksl
/
SkSLPosition
.
h
"
#
include
<
memory
>
#
include
<
string
>
#
include
<
string_view
>
#
include
<
utility
>
namespace
SkSL
{
class
Compiler
;
class
ErrorReporter
;
struct
Program
;
struct
ProgramSettings
;
namespace
dsl
{
class
DSLField
;
class
DSLModifiers
;
using
namespace
SkSL
:
:
SwizzleComponent
;
void
Start
(
SkSL
:
:
Compiler
*
compiler
SkSL
:
:
ProgramKind
kind
=
SkSL
:
:
ProgramKind
:
:
kFragment
)
;
void
Start
(
SkSL
:
:
Compiler
*
compiler
SkSL
:
:
ProgramKind
kind
const
SkSL
:
:
ProgramSettings
&
settings
)
;
void
End
(
)
;
std
:
:
unique_ptr
<
SkSL
:
:
Program
>
ReleaseProgram
(
std
:
:
unique_ptr
<
std
:
:
string
>
source
=
nullptr
)
;
ErrorReporter
&
GetErrorReporter
(
)
;
void
SetErrorReporter
(
ErrorReporter
*
errorReporter
)
;
void
AddExtension
(
std
:
:
string_view
name
Position
pos
=
{
}
)
;
DSLStatement
Break
(
Position
pos
=
{
}
)
;
DSLStatement
Continue
(
Position
pos
=
{
}
)
;
void
Declare
(
const
DSLModifiers
&
modifiers
Position
pos
=
{
}
)
;
DSLStatement
Declare
(
DSLVar
&
var
Position
pos
=
{
}
)
;
DSLStatement
Declare
(
SkTArray
<
DSLVar
>
&
vars
Position
pos
=
{
}
)
;
void
Declare
(
DSLGlobalVar
&
var
Position
pos
=
{
}
)
;
void
Declare
(
SkTArray
<
DSLGlobalVar
>
&
vars
Position
pos
=
{
}
)
;
template
<
class
.
.
.
Statements
>
DSLCase
Default
(
Statements
.
.
.
statements
)
{
return
DSLCase
(
DSLExpression
(
)
std
:
:
move
(
statements
)
.
.
.
)
;
}
DSLStatement
Discard
(
Position
pos
=
{
}
)
;
DSLStatement
Do
(
DSLStatement
stmt
DSLExpression
test
Position
pos
=
{
}
)
;
DSLStatement
For
(
DSLStatement
initializer
DSLExpression
test
DSLExpression
next
DSLStatement
stmt
Position
pos
=
{
}
ForLoopPositions
positions
=
{
}
)
;
DSLStatement
If
(
DSLExpression
test
DSLStatement
ifTrue
DSLStatement
ifFalse
=
DSLStatement
(
)
Position
pos
=
{
}
)
;
DSLExpression
InterfaceBlock
(
const
DSLModifiers
&
modifiers
std
:
:
string_view
typeName
SkTArray
<
DSLField
>
fields
std
:
:
string_view
varName
=
"
"
int
arraySize
=
0
Position
pos
=
{
}
)
;
DSLStatement
Return
(
DSLExpression
value
=
DSLExpression
(
)
Position
pos
=
{
}
)
;
DSLExpression
Select
(
DSLExpression
test
DSLExpression
ifTrue
DSLExpression
ifFalse
Position
=
{
}
)
;
DSLStatement
Switch
(
DSLExpression
value
SkTArray
<
DSLCase
>
cases
Position
pos
=
{
}
)
;
template
<
class
.
.
.
Cases
>
DSLStatement
Switch
(
DSLExpression
value
Cases
.
.
.
cases
)
{
SkTArray
<
DSLCase
>
caseArray
;
caseArray
.
reserve_back
(
sizeof
.
.
.
(
cases
)
)
;
(
caseArray
.
push_back
(
std
:
:
move
(
cases
)
)
.
.
.
)
;
return
Switch
(
std
:
:
move
(
value
)
std
:
:
move
(
caseArray
)
Position
{
}
)
;
}
DSLStatement
While
(
DSLExpression
test
DSLStatement
stmt
Position
pos
=
{
}
)
;
DSLExpression
Swizzle
(
DSLExpression
base
SkSL
:
:
SwizzleComponent
:
:
Type
a
Position
pos
=
{
}
Position
maskPos
=
{
}
)
;
DSLExpression
Swizzle
(
DSLExpression
base
SkSL
:
:
SwizzleComponent
:
:
Type
a
SkSL
:
:
SwizzleComponent
:
:
Type
b
Position
pos
=
{
}
Position
maskPos
=
{
}
)
;
DSLExpression
Swizzle
(
DSLExpression
base
SkSL
:
:
SwizzleComponent
:
:
Type
a
SkSL
:
:
SwizzleComponent
:
:
Type
b
SkSL
:
:
SwizzleComponent
:
:
Type
c
Position
pos
=
{
}
Position
maskPos
=
{
}
)
;
DSLExpression
Swizzle
(
DSLExpression
base
SkSL
:
:
SwizzleComponent
:
:
Type
a
SkSL
:
:
SwizzleComponent
:
:
Type
b
SkSL
:
:
SwizzleComponent
:
:
Type
c
SkSL
:
:
SwizzleComponent
:
:
Type
d
Position
pos
=
{
}
Position
maskPos
=
{
}
)
;
DSLExpression
Abs
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
All
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Any
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Atan
(
DSLExpression
y_over_x
Position
pos
=
{
}
)
;
DSLExpression
Atan
(
DSLExpression
y
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Ceil
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Clamp
(
DSLExpression
x
DSLExpression
min
DSLExpression
max
Position
pos
=
{
}
)
;
DSLExpression
Cos
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Cross
(
DSLExpression
x
DSLExpression
y
Position
pos
=
{
}
)
;
DSLExpression
Degrees
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Distance
(
DSLExpression
x
DSLExpression
y
Position
pos
=
{
}
)
;
DSLExpression
Dot
(
DSLExpression
x
DSLExpression
y
Position
pos
=
{
}
)
;
DSLExpression
Equal
(
DSLExpression
x
DSLExpression
y
Position
pos
=
{
}
)
;
DSLExpression
Exp
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Exp2
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Faceforward
(
DSLExpression
n
DSLExpression
i
DSLExpression
nref
Position
pos
=
{
}
)
;
DSLExpression
Floor
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Fract
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
GreaterThan
(
DSLExpression
x
DSLExpression
y
Position
pos
=
{
}
)
;
DSLExpression
GreaterThanEqual
(
DSLExpression
x
DSLExpression
y
Position
pos
=
{
}
)
;
DSLExpression
Inversesqrt
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Inverse
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Length
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
LessThan
(
DSLExpression
x
DSLExpression
y
Position
pos
=
{
}
)
;
DSLExpression
LessThanEqual
(
DSLExpression
x
DSLExpression
y
Position
pos
=
{
}
)
;
DSLExpression
Log
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Log2
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Max
(
DSLExpression
x
DSLExpression
y
Position
pos
=
{
}
)
;
DSLExpression
Min
(
DSLExpression
x
DSLExpression
y
Position
pos
=
{
}
)
;
DSLExpression
Mix
(
DSLExpression
x
DSLExpression
y
DSLExpression
a
Position
pos
=
{
}
)
;
DSLExpression
Mod
(
DSLExpression
x
DSLExpression
y
Position
pos
=
{
}
)
;
DSLExpression
Normalize
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
NotEqual
(
DSLExpression
x
DSLExpression
y
Position
pos
=
{
}
)
;
DSLExpression
Pow
(
DSLExpression
x
DSLExpression
y
Position
pos
=
{
}
)
;
DSLExpression
Radians
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Reflect
(
DSLExpression
i
DSLExpression
n
Position
pos
=
{
}
)
;
DSLExpression
Refract
(
DSLExpression
i
DSLExpression
n
DSLExpression
eta
Position
pos
=
{
}
)
;
DSLExpression
Round
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Saturate
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Sign
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Sin
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Smoothstep
(
DSLExpression
edge1
DSLExpression
edge2
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Sqrt
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Step
(
DSLExpression
edge
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Tan
(
DSLExpression
x
Position
pos
=
{
}
)
;
DSLExpression
Unpremul
(
DSLExpression
x
Position
pos
=
{
}
)
;
}
}
#
endif
