#
ifndef
SKSL_DSL_EXPRESSION
#
define
SKSL_DSL_EXPRESSION
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
"
include
/
sksl
/
SkSLOperator
.
h
"
#
include
"
include
/
sksl
/
SkSLPosition
.
h
"
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
string_view
>
#
include
<
type_traits
>
#
if
defined
(
__has_cpp_attribute
)
&
&
__has_cpp_attribute
(
clang
:
:
reinitializes
)
#
define
SK_CLANG_REINITIALIZES
[
[
clang
:
:
reinitializes
]
]
#
else
#
define
SK_CLANG_REINITIALIZES
#
endif
namespace
SkSL
{
class
Expression
;
class
ExpressionArray
;
namespace
dsl
{
class
DSLType
;
class
DSLVarBase
;
class
DSLExpression
{
public
:
DSLExpression
(
const
DSLExpression
&
)
=
delete
;
DSLExpression
(
DSLExpression
&
&
)
;
DSLExpression
(
)
;
DSLExpression
(
float
value
Position
pos
=
{
}
)
;
DSLExpression
(
double
value
Position
pos
=
{
}
)
:
DSLExpression
(
(
float
)
value
)
{
}
DSLExpression
(
int
value
Position
pos
=
{
}
)
;
DSLExpression
(
int64_t
value
Position
pos
=
{
}
)
;
DSLExpression
(
unsigned
int
value
Position
pos
=
{
}
)
;
DSLExpression
(
bool
value
Position
pos
=
{
}
)
;
DSLExpression
(
DSLVarBase
&
var
Position
pos
=
{
}
)
;
DSLExpression
(
DSLVarBase
&
&
var
Position
pos
=
{
}
)
;
explicit
DSLExpression
(
std
:
:
unique_ptr
<
SkSL
:
:
Expression
>
expression
Position
pos
=
{
}
)
;
static
DSLExpression
Poison
(
Position
pos
=
{
}
)
;
~
DSLExpression
(
)
;
DSLType
type
(
)
const
;
std
:
:
string
description
(
)
const
;
Position
position
(
)
const
;
void
setPosition
(
Position
pos
)
;
DSLExpression
assign
(
DSLExpression
other
)
;
DSLExpression
x
(
Position
pos
=
{
}
)
;
DSLExpression
y
(
Position
pos
=
{
}
)
;
DSLExpression
z
(
Position
pos
=
{
}
)
;
DSLExpression
w
(
Position
pos
=
{
}
)
;
DSLExpression
r
(
Position
pos
=
{
}
)
;
DSLExpression
g
(
Position
pos
=
{
}
)
;
DSLExpression
b
(
Position
pos
=
{
}
)
;
DSLExpression
a
(
Position
pos
=
{
}
)
;
DSLExpression
field
(
std
:
:
string_view
name
Position
pos
=
{
}
)
;
DSLExpression
operator
[
]
(
DSLExpression
index
)
;
DSLExpression
operator
(
)
(
SkTArray
<
DSLExpression
true
>
args
Position
pos
=
{
}
)
;
DSLExpression
operator
(
)
(
ExpressionArray
args
Position
pos
=
{
}
)
;
DSLExpression
prefix
(
Operator
:
:
Kind
op
Position
pos
)
;
DSLExpression
postfix
(
Operator
:
:
Kind
op
Position
pos
)
;
DSLExpression
binary
(
Operator
:
:
Kind
op
DSLExpression
right
Position
pos
)
;
DSLExpression
index
(
DSLExpression
index
Position
pos
)
;
bool
hasValue
(
)
const
{
return
fExpression
!
=
nullptr
;
}
bool
isValid
(
)
const
;
SK_CLANG_REINITIALIZES
void
swap
(
DSLExpression
&
other
)
;
std
:
:
unique_ptr
<
SkSL
:
:
Expression
>
release
(
)
;
private
:
std
:
:
unique_ptr
<
SkSL
:
:
Expression
>
releaseIfPossible
(
)
;
std
:
:
unique_ptr
<
SkSL
:
:
Expression
>
fExpression
;
friend
DSLExpression
SampleChild
(
int
index
DSLExpression
coords
)
;
friend
class
DSLCore
;
friend
class
DSLVarBase
;
friend
class
DSLWriter
;
}
;
DSLExpression
operator
+
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
+
(
DSLExpression
expr
)
;
DSLExpression
operator
+
=
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
-
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
-
(
DSLExpression
expr
)
;
DSLExpression
operator
-
=
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
*
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
*
=
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
/
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
/
=
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
%
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
%
=
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
<
<
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
<
<
=
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
>
>
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
>
>
=
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
&
&
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
|
|
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
&
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
&
=
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
|
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
|
=
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
^
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
^
=
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
LogicalXor
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
=
=
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
!
=
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
>
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
<
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
>
=
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
<
=
(
DSLExpression
left
DSLExpression
right
)
;
DSLExpression
operator
!
(
DSLExpression
expr
)
;
DSLExpression
operator
~
(
DSLExpression
expr
)
;
DSLExpression
operator
+
+
(
DSLExpression
expr
)
;
DSLExpression
operator
+
+
(
DSLExpression
expr
int
)
;
DSLExpression
operator
-
-
(
DSLExpression
expr
)
;
DSLExpression
operator
-
-
(
DSLExpression
expr
int
)
;
}
}
template
<
typename
T
>
struct
sk_is_trivially_relocatable
;
template
<
>
struct
sk_is_trivially_relocatable
<
SkSL
:
:
dsl
:
:
DSLExpression
>
:
std
:
:
true_type
{
}
;
#
endif
