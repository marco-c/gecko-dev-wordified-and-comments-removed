#
ifndef
SkPDFDocument_DEFINED
#
define
SkPDFDocument_DEFINED
#
include
"
include
/
core
/
SkDocument
.
h
"
#
include
<
vector
>
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkMilestone
.
h
"
#
include
"
include
/
core
/
SkScalar
.
h
"
#
include
"
include
/
core
/
SkString
.
h
"
#
include
"
include
/
core
/
SkTime
.
h
"
#
include
"
include
/
private
/
base
/
SkNoncopyable
.
h
"
#
define
SKPDF_STRING
(
X
)
SKPDF_STRING_IMPL
(
X
)
#
define
SKPDF_STRING_IMPL
(
X
)
#
X
class
SkExecutor
;
class
SkPDFArray
;
class
SkPDFTagTree
;
namespace
SkPDF
{
class
SK_API
AttributeList
:
SkNoncopyable
{
public
:
AttributeList
(
)
;
~
AttributeList
(
)
;
void
appendInt
(
const
char
*
owner
const
char
*
name
int
value
)
;
void
appendFloat
(
const
char
*
owner
const
char
*
name
float
value
)
;
void
appendName
(
const
char
*
owner
const
char
*
attrName
const
char
*
value
)
;
void
appendFloatArray
(
const
char
*
owner
const
char
*
name
const
std
:
:
vector
<
float
>
&
value
)
;
void
appendNodeIdArray
(
const
char
*
owner
const
char
*
attrName
const
std
:
:
vector
<
int
>
&
nodeIds
)
;
private
:
friend
class
:
:
SkPDFTagTree
;
std
:
:
unique_ptr
<
SkPDFArray
>
fAttrs
;
}
;
struct
StructureElementNode
{
SkString
fTypeString
;
std
:
:
vector
<
std
:
:
unique_ptr
<
StructureElementNode
>
>
fChildVector
;
int
fNodeId
=
0
;
std
:
:
vector
<
int
>
fAdditionalNodeIds
;
AttributeList
fAttributes
;
SkString
fAlt
;
SkString
fLang
;
}
;
struct
Metadata
{
SkString
fTitle
;
SkString
fAuthor
;
SkString
fSubject
;
SkString
fKeywords
;
SkString
fCreator
;
SkString
fProducer
=
SkString
(
"
Skia
/
PDF
m
"
SKPDF_STRING
(
SK_MILESTONE
)
)
;
SkTime
:
:
DateTime
fCreation
=
{
0
0
0
0
0
0
0
0
}
;
SkTime
:
:
DateTime
fModified
=
{
0
0
0
0
0
0
0
0
}
;
SkScalar
fRasterDPI
=
SK_ScalarDefaultRasterDPI
;
bool
fPDFA
=
false
;
int
fEncodingQuality
=
101
;
StructureElementNode
*
fStructureElementTreeRoot
=
nullptr
;
SkExecutor
*
fExecutor
=
nullptr
;
enum
class
CompressionLevel
:
int
{
Default
=
-
1
None
=
0
LowButFast
=
1
Average
=
6
HighButSlow
=
9
}
fCompressionLevel
=
CompressionLevel
:
:
Default
;
enum
Subsetter
{
kHarfbuzz_Subsetter
kSfntly_Subsetter
}
fSubsetter
=
kHarfbuzz_Subsetter
;
}
;
SK_API
void
SetNodeId
(
SkCanvas
*
dst
int
nodeID
)
;
SK_API
sk_sp
<
SkDocument
>
MakeDocument
(
SkWStream
*
stream
const
Metadata
&
metadata
)
;
static
inline
sk_sp
<
SkDocument
>
MakeDocument
(
SkWStream
*
stream
)
{
return
MakeDocument
(
stream
Metadata
(
)
)
;
}
}
#
undef
SKPDF_STRING
#
undef
SKPDF_STRING_IMPL
#
endif
