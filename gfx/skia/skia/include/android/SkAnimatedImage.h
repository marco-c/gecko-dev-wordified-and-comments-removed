#
ifndef
SkAnimatedImage_DEFINED
#
define
SkAnimatedImage_DEFINED
#
include
"
include
/
codec
/
SkCodecAnimation
.
h
"
#
include
"
include
/
core
/
SkBitmap
.
h
"
#
include
"
include
/
core
/
SkDrawable
.
h
"
#
include
"
include
/
core
/
SkMatrix
.
h
"
#
include
"
include
/
core
/
SkRect
.
h
"
class
SkAndroidCodec
;
class
SkImage
;
class
SkPicture
;
class
SK_API
SkAnimatedImage
:
public
SkDrawable
{
public
:
static
sk_sp
<
SkAnimatedImage
>
Make
(
std
:
:
unique_ptr
<
SkAndroidCodec
>
const
SkImageInfo
&
info
SkIRect
cropRect
sk_sp
<
SkPicture
>
postProcess
)
;
static
sk_sp
<
SkAnimatedImage
>
Make
(
std
:
:
unique_ptr
<
SkAndroidCodec
>
)
;
~
SkAnimatedImage
(
)
override
;
void
reset
(
)
;
bool
isFinished
(
)
const
{
return
fFinished
;
}
static
constexpr
int
kFinished
=
-
1
;
int
decodeNextFrame
(
)
;
sk_sp
<
SkImage
>
getCurrentFrame
(
)
;
int
currentFrameDuration
(
)
{
return
fCurrentFrameDuration
;
}
void
setRepetitionCount
(
int
count
)
;
int
getRepetitionCount
(
)
const
{
return
fRepetitionCount
;
}
int
getFrameCount
(
)
const
{
return
fFrameCount
;
}
protected
:
SkRect
onGetBounds
(
)
override
;
void
onDraw
(
SkCanvas
*
)
override
;
private
:
struct
Frame
{
SkBitmap
fBitmap
;
int
fIndex
;
SkCodecAnimation
:
:
DisposalMethod
fDisposalMethod
;
enum
class
OnInit
{
kRestoreIfNecessary
kNoRestore
}
;
Frame
(
)
;
bool
init
(
const
SkImageInfo
&
info
OnInit
)
;
bool
copyTo
(
Frame
*
)
const
;
}
;
std
:
:
unique_ptr
<
SkAndroidCodec
>
fCodec
;
SkImageInfo
fDecodeInfo
;
const
SkIRect
fCropRect
;
const
sk_sp
<
SkPicture
>
fPostProcess
;
const
int
fFrameCount
;
SkMatrix
fMatrix
;
int
fSampleSize
;
bool
fFinished
;
int
fCurrentFrameDuration
;
Frame
fDisplayFrame
;
Frame
fDecodingFrame
;
Frame
fRestoreFrame
;
int
fRepetitionCount
;
int
fRepetitionsCompleted
;
SkAnimatedImage
(
std
:
:
unique_ptr
<
SkAndroidCodec
>
const
SkImageInfo
&
requestedInfo
SkIRect
cropRect
sk_sp
<
SkPicture
>
postProcess
)
;
int
computeNextFrame
(
int
current
bool
*
animationEnded
)
;
double
finish
(
)
;
bool
simple
(
)
const
{
return
fMatrix
.
isIdentity
(
)
&
&
!
fPostProcess
&
&
fCropRect
=
=
fDecodeInfo
.
bounds
(
)
;
}
sk_sp
<
SkImage
>
getCurrentFrameSimple
(
)
;
using
INHERITED
=
SkDrawable
;
}
;
#
endif
