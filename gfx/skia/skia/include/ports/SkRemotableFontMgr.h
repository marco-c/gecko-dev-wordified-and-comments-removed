#
ifndef
SkRemotableFontMgr_DEFINED
#
define
SkRemotableFontMgr_DEFINED
#
include
"
.
.
/
private
/
SkTemplates
.
h
"
#
include
"
SkFontStyle
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkTypes
.
h
"
class
SkDataTable
;
class
SkStreamAsset
;
struct
SK_API
SkFontIdentity
{
static
const
uint32_t
kInvalidDataId
=
0xFFFFFFFF
;
uint32_t
fDataId
;
uint32_t
fTtcIndex
;
SkFontStyle
fFontStyle
;
}
;
class
SK_API
SkRemotableFontIdentitySet
:
public
SkRefCnt
{
public
:
SkRemotableFontIdentitySet
(
int
count
SkFontIdentity
*
*
data
)
;
int
count
(
)
const
{
return
fCount
;
}
const
SkFontIdentity
&
at
(
int
index
)
const
{
return
fData
[
index
]
;
}
static
SkRemotableFontIdentitySet
*
NewEmpty
(
)
;
private
:
SkRemotableFontIdentitySet
(
)
:
fCount
(
0
)
fData
(
)
{
}
friend
SkRemotableFontIdentitySet
*
sk_remotable_font_identity_set_new
(
)
;
int
fCount
;
SkAutoTMalloc
<
SkFontIdentity
>
fData
;
typedef
SkRefCnt
INHERITED
;
}
;
class
SK_API
SkRemotableFontMgr
:
public
SkRefCnt
{
public
:
virtual
SkRemotableFontIdentitySet
*
getIndex
(
int
familyIndex
)
const
=
0
;
virtual
SkFontIdentity
matchIndexStyle
(
int
familyIndex
const
SkFontStyle
&
)
const
=
0
;
virtual
SkRemotableFontIdentitySet
*
matchName
(
const
char
familyName
[
]
)
const
=
0
;
virtual
SkFontIdentity
matchNameStyle
(
const
char
familyName
[
]
const
SkFontStyle
&
)
const
=
0
;
virtual
SkFontIdentity
matchNameStyleCharacter
(
const
char
familyName
[
]
const
SkFontStyle
&
const
char
*
bcp47
[
]
int
bcp47Count
SkUnichar
character
)
const
=
0
;
virtual
SkStreamAsset
*
getData
(
int
dataId
)
const
=
0
;
private
:
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
