#
ifndef
SkFontMgr_DEFINED
#
define
SkFontMgr_DEFINED
#
include
"
SkFontStyle
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkScalar
.
h
"
#
include
"
SkTypes
.
h
"
class
SkData
;
class
SkFontData
;
class
SkStreamAsset
;
class
SkString
;
class
SkTypeface
;
class
SK_API
SkFontStyleSet
:
public
SkRefCnt
{
public
:
virtual
int
count
(
)
=
0
;
virtual
void
getStyle
(
int
index
SkFontStyle
*
SkString
*
style
)
=
0
;
virtual
SkTypeface
*
createTypeface
(
int
index
)
=
0
;
virtual
SkTypeface
*
matchStyle
(
const
SkFontStyle
&
pattern
)
=
0
;
static
SkFontStyleSet
*
CreateEmpty
(
)
;
protected
:
SkTypeface
*
matchStyleCSS3
(
const
SkFontStyle
&
pattern
)
;
private
:
typedef
SkRefCnt
INHERITED
;
}
;
class
SK_API
SkFontMgr
:
public
SkRefCnt
{
public
:
int
countFamilies
(
)
const
;
void
getFamilyName
(
int
index
SkString
*
familyName
)
const
;
SkFontStyleSet
*
createStyleSet
(
int
index
)
const
;
SkFontStyleSet
*
matchFamily
(
const
char
familyName
[
]
)
const
;
SkTypeface
*
matchFamilyStyle
(
const
char
familyName
[
]
const
SkFontStyle
&
)
const
;
SkTypeface
*
matchFamilyStyleCharacter
(
const
char
familyName
[
]
const
SkFontStyle
&
const
char
*
bcp47
[
]
int
bcp47Count
SkUnichar
character
)
const
;
SkTypeface
*
matchFaceStyle
(
const
SkTypeface
*
const
SkFontStyle
&
)
const
;
SkTypeface
*
createFromData
(
SkData
*
int
ttcIndex
=
0
)
const
;
SkTypeface
*
createFromStream
(
SkStreamAsset
*
int
ttcIndex
=
0
)
const
;
struct
FontParameters
{
struct
Axis
{
SkFourByteTag
fTag
;
SkScalar
fStyleValue
;
}
;
FontParameters
(
)
:
fCollectionIndex
(
0
)
fAxisCount
(
0
)
fAxes
(
nullptr
)
{
}
FontParameters
&
setCollectionIndex
(
int
collectionIndex
)
{
fCollectionIndex
=
collectionIndex
;
return
*
this
;
}
FontParameters
&
setAxes
(
const
Axis
*
axes
int
axisCount
)
{
fAxisCount
=
axisCount
;
fAxes
=
axes
;
return
*
this
;
}
int
getCollectionIndex
(
)
const
{
return
fCollectionIndex
;
}
const
Axis
*
getAxes
(
int
*
axisCount
)
const
{
*
axisCount
=
fAxisCount
;
return
fAxes
;
}
private
:
int
fCollectionIndex
;
int
fAxisCount
;
const
Axis
*
fAxes
;
}
;
SkTypeface
*
createFromStream
(
SkStreamAsset
*
const
FontParameters
&
)
const
;
SkTypeface
*
createFromFontData
(
std
:
:
unique_ptr
<
SkFontData
>
)
const
;
SkTypeface
*
createFromFile
(
const
char
path
[
]
int
ttcIndex
=
0
)
const
;
SkTypeface
*
legacyCreateTypeface
(
const
char
familyName
[
]
SkFontStyle
style
)
const
;
static
SkFontMgr
*
RefDefault
(
)
;
protected
:
virtual
int
onCountFamilies
(
)
const
=
0
;
virtual
void
onGetFamilyName
(
int
index
SkString
*
familyName
)
const
=
0
;
virtual
SkFontStyleSet
*
onCreateStyleSet
(
int
index
)
const
=
0
;
virtual
SkFontStyleSet
*
onMatchFamily
(
const
char
familyName
[
]
)
const
=
0
;
virtual
SkTypeface
*
onMatchFamilyStyle
(
const
char
familyName
[
]
const
SkFontStyle
&
)
const
=
0
;
virtual
SkTypeface
*
onMatchFamilyStyleCharacter
(
const
char
familyName
[
]
const
SkFontStyle
&
const
char
*
bcp47
[
]
int
bcp47Count
SkUnichar
character
)
const
=
0
;
virtual
SkTypeface
*
onMatchFaceStyle
(
const
SkTypeface
*
const
SkFontStyle
&
)
const
=
0
;
virtual
SkTypeface
*
onCreateFromData
(
SkData
*
int
ttcIndex
)
const
=
0
;
virtual
SkTypeface
*
onCreateFromStream
(
SkStreamAsset
*
int
ttcIndex
)
const
=
0
;
virtual
SkTypeface
*
onCreateFromStream
(
SkStreamAsset
*
const
FontParameters
&
)
const
;
virtual
SkTypeface
*
onCreateFromFontData
(
std
:
:
unique_ptr
<
SkFontData
>
)
const
;
virtual
SkTypeface
*
onCreateFromFile
(
const
char
path
[
]
int
ttcIndex
)
const
=
0
;
virtual
SkTypeface
*
onLegacyCreateTypeface
(
const
char
familyName
[
]
SkFontStyle
)
const
=
0
;
private
:
static
SkFontMgr
*
Factory
(
)
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
