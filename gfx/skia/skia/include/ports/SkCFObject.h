#
ifndef
SkCFObject_DEFINED
#
define
SkCFObject_DEFINED
#
if
defined
(
SK_BUILD_FOR_MAC
)
|
|
defined
(
SK_BUILD_FOR_IOS
)
#
import
<
CoreFoundation
/
CoreFoundation
.
h
>
template
<
typename
T
>
static
inline
T
SkCFSafeRetain
(
T
obj
)
{
if
(
obj
)
{
CFRetain
(
obj
)
;
}
return
obj
;
}
template
<
typename
T
>
static
inline
void
SkCFSafeRelease
(
T
obj
)
{
if
(
obj
)
{
CFRelease
(
obj
)
;
}
}
template
<
typename
T
>
class
sk_cf_obj
{
public
:
using
element_type
=
T
;
constexpr
sk_cf_obj
(
)
:
fObject
(
nullptr
)
{
}
sk_cf_obj
(
const
sk_cf_obj
<
T
>
&
that
)
:
fObject
(
SkCFSafeRetain
(
that
.
get
(
)
)
)
{
}
sk_cf_obj
(
sk_cf_obj
<
T
>
&
&
that
)
:
fObject
(
that
.
release
(
)
)
{
}
explicit
sk_cf_obj
(
T
obj
)
{
fObject
=
obj
;
}
~
sk_cf_obj
(
)
{
SkCFSafeRelease
(
fObject
)
;
SkDEBUGCODE
(
fObject
=
nullptr
)
;
}
sk_cf_obj
<
T
>
&
operator
=
(
const
sk_cf_obj
<
T
>
&
that
)
{
if
(
this
!
=
&
that
)
{
this
-
>
reset
(
SkCFSafeRetain
(
that
.
get
(
)
)
)
;
}
return
*
this
;
}
sk_cf_obj
<
T
>
&
operator
=
(
sk_cf_obj
<
T
>
&
&
that
)
{
this
-
>
reset
(
that
.
release
(
)
)
;
return
*
this
;
}
T
get
(
)
const
{
return
fObject
;
}
void
reset
(
T
object
=
nullptr
)
{
T
oldObject
=
fObject
;
fObject
=
object
;
SkCFSafeRelease
(
oldObject
)
;
}
void
retain
(
T
object
)
{
if
(
this
-
>
fObject
!
=
object
)
{
this
-
>
reset
(
SkCFSafeRetain
(
object
)
)
;
}
}
T
SK_WARN_UNUSED_RESULT
release
(
)
{
T
obj
=
fObject
;
fObject
=
nullptr
;
return
obj
;
}
private
:
T
fObject
;
}
;
template
<
typename
T
>
inline
bool
operator
=
=
(
const
sk_cf_obj
<
T
>
&
a
const
sk_cf_obj
<
T
>
&
b
)
{
return
a
.
get
(
)
=
=
b
.
get
(
)
;
}
template
<
typename
T
>
inline
bool
operator
!
=
(
const
sk_cf_obj
<
T
>
&
a
const
sk_cf_obj
<
T
>
&
b
)
{
return
a
.
get
(
)
!
=
b
.
get
(
)
;
}
#
endif
#
endif
