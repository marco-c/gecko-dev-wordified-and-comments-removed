#
ifndef
SkCFObject_DEFINED
#
define
SkCFObject_DEFINED
#
ifdef
__APPLE__
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
<
cstddef
>
#
import
<
CoreFoundation
/
CoreFoundation
.
h
>
template
<
typename
T
>
static
inline
T
SkCFSafeRetain
(
T
obj
)
{
if
(
obj
)
{
CFRetain
(
obj
)
;
}
return
obj
;
}
template
<
typename
T
>
static
inline
void
SkCFSafeRelease
(
T
obj
)
{
if
(
obj
)
{
CFRelease
(
obj
)
;
}
}
template
<
typename
T
>
class
sk_cfp
{
public
:
using
element_type
=
T
;
constexpr
sk_cfp
(
)
{
}
constexpr
sk_cfp
(
std
:
:
nullptr_t
)
{
}
sk_cfp
(
const
sk_cfp
<
T
>
&
that
)
:
fObject
(
SkCFSafeRetain
(
that
.
get
(
)
)
)
{
}
sk_cfp
(
sk_cfp
<
T
>
&
&
that
)
:
fObject
(
that
.
release
(
)
)
{
}
explicit
sk_cfp
(
T
obj
)
{
fObject
=
obj
;
}
~
sk_cfp
(
)
{
SkCFSafeRelease
(
fObject
)
;
SkDEBUGCODE
(
fObject
=
nil
)
;
}
sk_cfp
<
T
>
&
operator
=
(
std
:
:
nullptr_t
)
{
this
-
>
reset
(
)
;
return
*
this
;
}
sk_cfp
<
T
>
&
operator
=
(
const
sk_cfp
<
T
>
&
that
)
{
if
(
this
!
=
&
that
)
{
this
-
>
reset
(
SkCFSafeRetain
(
that
.
get
(
)
)
)
;
}
return
*
this
;
}
sk_cfp
<
T
>
&
operator
=
(
sk_cfp
<
T
>
&
&
that
)
{
this
-
>
reset
(
that
.
release
(
)
)
;
return
*
this
;
}
explicit
operator
bool
(
)
const
{
return
this
-
>
get
(
)
!
=
nil
;
}
T
get
(
)
const
{
return
fObject
;
}
T
operator
*
(
)
const
{
SkASSERT
(
fObject
)
;
return
fObject
;
}
void
reset
(
T
object
=
nil
)
{
T
oldObject
=
fObject
;
fObject
=
object
;
SkCFSafeRelease
(
oldObject
)
;
}
void
retain
(
T
object
)
{
if
(
fObject
!
=
object
)
{
this
-
>
reset
(
SkCFSafeRetain
(
object
)
)
;
}
}
T
SK_WARN_UNUSED_RESULT
release
(
)
{
T
obj
=
fObject
;
fObject
=
nil
;
return
obj
;
}
private
:
T
fObject
=
nil
;
}
;
template
<
typename
T
>
inline
bool
operator
=
=
(
const
sk_cfp
<
T
>
&
a
const
sk_cfp
<
T
>
&
b
)
{
return
a
.
get
(
)
=
=
b
.
get
(
)
;
}
template
<
typename
T
>
inline
bool
operator
=
=
(
const
sk_cfp
<
T
>
&
a
std
:
:
nullptr_t
)
{
return
!
a
;
}
template
<
typename
T
>
inline
bool
operator
=
=
(
std
:
:
nullptr_t
const
sk_cfp
<
T
>
&
b
)
{
return
!
b
;
}
template
<
typename
T
>
inline
bool
operator
!
=
(
const
sk_cfp
<
T
>
&
a
const
sk_cfp
<
T
>
&
b
)
{
return
a
.
get
(
)
!
=
b
.
get
(
)
;
}
template
<
typename
T
>
inline
bool
operator
!
=
(
const
sk_cfp
<
T
>
&
a
std
:
:
nullptr_t
)
{
return
static_cast
<
bool
>
(
a
)
;
}
template
<
typename
T
>
inline
bool
operator
!
=
(
std
:
:
nullptr_t
const
sk_cfp
<
T
>
&
b
)
{
return
static_cast
<
bool
>
(
b
)
;
}
template
<
typename
T
>
sk_cfp
<
T
>
sk_ret_cfp
(
T
obj
)
{
return
sk_cfp
<
T
>
(
SkCFSafeRetain
(
obj
)
)
;
}
#
endif
#
endif
