#
ifndef
SkEvent_DEFINED
#
define
SkEvent_DEFINED
#
include
"
SkMetaData
.
h
"
typedef
uint32_t
SkEventSinkID
;
class
SkEvent
{
public
:
SkEvent
(
)
;
explicit
SkEvent
(
const
char
type
[
]
)
;
SkEvent
(
const
SkEvent
&
src
)
;
~
SkEvent
(
)
;
bool
isType
(
const
char
type
[
]
)
const
;
void
setType
(
const
char
type
[
]
)
;
uint32_t
getFast32
(
)
const
{
return
f32
;
}
void
setFast32
(
uint32_t
x
)
{
f32
=
x
;
}
bool
findS32
(
const
char
name
[
]
int32_t
*
value
=
nullptr
)
const
{
return
fMeta
.
findS32
(
name
value
)
;
}
bool
findScalar
(
const
char
name
[
]
SkScalar
*
value
=
nullptr
)
const
{
return
fMeta
.
findScalar
(
name
value
)
;
}
const
SkScalar
*
findScalars
(
const
char
name
[
]
int
*
count
SkScalar
values
[
]
=
nullptr
)
const
{
return
fMeta
.
findScalars
(
name
count
values
)
;
}
const
char
*
findString
(
const
char
name
[
]
)
const
{
return
fMeta
.
findString
(
name
)
;
}
bool
findPtr
(
const
char
name
[
]
void
*
*
value
)
const
{
return
fMeta
.
findPtr
(
name
value
)
;
}
bool
findBool
(
const
char
name
[
]
bool
*
value
)
const
{
return
fMeta
.
findBool
(
name
value
)
;
}
const
void
*
findData
(
const
char
name
[
]
size_t
*
byteCount
=
nullptr
)
const
{
return
fMeta
.
findData
(
name
byteCount
)
;
}
bool
hasS32
(
const
char
name
[
]
int32_t
value
)
const
{
return
fMeta
.
hasS32
(
name
value
)
;
}
bool
hasScalar
(
const
char
name
[
]
SkScalar
value
)
const
{
return
fMeta
.
hasScalar
(
name
value
)
;
}
bool
hasString
(
const
char
name
[
]
const
char
value
[
]
)
const
{
return
fMeta
.
hasString
(
name
value
)
;
}
bool
hasPtr
(
const
char
name
[
]
void
*
value
)
const
{
return
fMeta
.
hasPtr
(
name
value
)
;
}
bool
hasBool
(
const
char
name
[
]
bool
value
)
const
{
return
fMeta
.
hasBool
(
name
value
)
;
}
bool
hasData
(
const
char
name
[
]
const
void
*
data
size_t
byteCount
)
const
{
return
fMeta
.
hasData
(
name
data
byteCount
)
;
}
void
setS32
(
const
char
name
[
]
int32_t
value
)
{
fMeta
.
setS32
(
name
value
)
;
}
void
setScalar
(
const
char
name
[
]
SkScalar
value
)
{
fMeta
.
setScalar
(
name
value
)
;
}
SkScalar
*
setScalars
(
const
char
name
[
]
int
count
const
SkScalar
values
[
]
=
nullptr
)
{
return
fMeta
.
setScalars
(
name
count
values
)
;
}
void
setString
(
const
char
name
[
]
const
char
value
[
]
)
{
fMeta
.
setString
(
name
value
)
;
}
void
setPtr
(
const
char
name
[
]
void
*
value
)
{
fMeta
.
setPtr
(
name
value
)
;
}
void
setBool
(
const
char
name
[
]
bool
value
)
{
fMeta
.
setBool
(
name
value
)
;
}
void
setData
(
const
char
name
[
]
const
void
*
data
size_t
byteCount
)
{
fMeta
.
setData
(
name
data
byteCount
)
;
}
SkMetaData
&
getMetaData
(
)
{
return
fMeta
;
}
const
SkMetaData
&
getMetaData
(
)
const
{
return
fMeta
;
}
private
:
SkMetaData
fMeta
;
char
*
fType
;
uint32_t
f32
;
void
initialize
(
const
char
*
type
)
;
}
;
#
endif
