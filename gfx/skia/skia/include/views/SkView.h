#
ifndef
SkView_DEFINED
#
define
SkView_DEFINED
#
include
"
SkEventSink
.
h
"
#
include
"
SkRect
.
h
"
#
include
"
SkMatrix
.
h
"
#
include
"
SkMetaData
.
h
"
class
SkCanvas
;
class
SkView
:
public
SkEventSink
{
public
:
enum
Flag_Shift
{
kVisible_Shift
kNoClip_Shift
kFlagShiftCount
}
;
enum
Flag_Mask
{
kVisible_Mask
=
1
<
<
kVisible_Shift
kNoClip_Mask
=
1
<
<
kNoClip_Shift
kAllFlagMasks
=
(
uint32_t
)
(
0
-
1
)
>
>
(
32
-
kFlagShiftCount
)
}
;
SkView
(
uint32_t
flags
=
0
)
;
virtual
~
SkView
(
)
;
uint32_t
getFlags
(
)
const
{
return
fFlags
;
}
void
setFlags
(
uint32_t
flags
)
;
int
isVisible
(
)
const
{
return
fFlags
&
kVisible_Mask
;
}
int
isClipToBounds
(
)
const
{
return
!
(
fFlags
&
kNoClip_Mask
)
;
}
void
setVisibleP
(
bool
)
;
void
setClipToBounds
(
bool
)
;
SkScalar
width
(
)
const
{
return
fWidth
;
}
SkScalar
height
(
)
const
{
return
fHeight
;
}
void
setSize
(
SkScalar
width
SkScalar
height
)
;
void
setSize
(
const
SkPoint
&
size
)
{
this
-
>
setSize
(
size
.
fX
size
.
fY
)
;
}
void
setWidth
(
SkScalar
width
)
{
this
-
>
setSize
(
width
fHeight
)
;
}
void
setHeight
(
SkScalar
height
)
{
this
-
>
setSize
(
fWidth
height
)
;
}
virtual
void
draw
(
SkCanvas
*
canvas
)
;
class
Click
{
public
:
Click
(
SkView
*
target
)
;
virtual
~
Click
(
)
;
enum
State
{
kDown_State
kMoved_State
kUp_State
}
;
SkPoint
fOrig
fPrev
fCurr
;
SkIPoint
fIOrig
fIPrev
fICurr
;
State
fState
;
unsigned
fModifierKeys
;
SkMetaData
fMeta
;
private
:
SkEventSinkID
fTargetID
;
friend
class
SkView
;
}
;
Click
*
findClickHandler
(
SkScalar
x
SkScalar
y
unsigned
modifierKeys
)
;
static
void
DoClickDown
(
Click
*
int
x
int
y
unsigned
modi
)
;
static
void
DoClickMoved
(
Click
*
int
x
int
y
unsigned
modi
)
;
static
void
DoClickUp
(
Click
*
int
x
int
y
unsigned
modi
)
;
protected
:
virtual
void
onDraw
(
SkCanvas
*
)
;
virtual
void
onSizeChange
(
)
;
virtual
Click
*
onFindClickHandler
(
SkScalar
x
SkScalar
y
unsigned
modi
)
;
virtual
bool
onClick
(
Click
*
)
;
private
:
SkScalar
fWidth
fHeight
;
uint8_t
fFlags
;
}
;
#
endif
