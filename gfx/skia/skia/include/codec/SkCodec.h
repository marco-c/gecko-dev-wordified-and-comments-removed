#
ifndef
SkCodec_DEFINED
#
define
SkCodec_DEFINED
#
include
"
.
.
/
private
/
SkTemplates
.
h
"
#
include
"
SkColor
.
h
"
#
include
"
SkEncodedFormat
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkSize
.
h
"
#
include
"
SkStream
.
h
"
#
include
"
SkTypes
.
h
"
class
SkData
;
class
SkPngChunkReader
;
class
SkSampler
;
class
SkCodec
:
SkNoncopyable
{
public
:
static
size_t
MinBufferedBytesNeeded
(
)
;
static
SkCodec
*
NewFromStream
(
SkStream
*
SkPngChunkReader
*
=
NULL
)
;
static
SkCodec
*
NewFromData
(
SkData
*
SkPngChunkReader
*
=
NULL
)
;
virtual
~
SkCodec
(
)
;
const
SkImageInfo
&
getInfo
(
)
const
{
return
fSrcInfo
;
}
SkISize
getScaledDimensions
(
float
desiredScale
)
const
{
SkASSERT
(
desiredScale
>
0
.
0f
)
;
if
(
desiredScale
<
=
0
.
0f
)
{
return
SkISize
:
:
Make
(
0
0
)
;
}
if
(
desiredScale
>
=
1
.
0f
)
{
return
this
-
>
getInfo
(
)
.
dimensions
(
)
;
}
return
this
-
>
onGetScaledDimensions
(
desiredScale
)
;
}
bool
getValidSubset
(
SkIRect
*
desiredSubset
)
const
{
return
this
-
>
onGetValidSubset
(
desiredSubset
)
;
}
SkEncodedFormat
getEncodedFormat
(
)
const
{
return
this
-
>
onGetEncodedFormat
(
)
;
}
enum
Result
{
kSuccess
kIncompleteInput
kInvalidConversion
kInvalidScale
kInvalidParameters
kInvalidInput
kCouldNotRewind
kUnimplemented
}
;
enum
ZeroInitialized
{
kYes_ZeroInitialized
kNo_ZeroInitialized
}
;
struct
Options
{
Options
(
)
:
fZeroInitialized
(
kNo_ZeroInitialized
)
fSubset
(
NULL
)
{
}
ZeroInitialized
fZeroInitialized
;
SkIRect
*
fSubset
;
}
;
Result
getPixels
(
const
SkImageInfo
&
info
void
*
pixels
size_t
rowBytes
const
Options
*
SkPMColor
ctable
[
]
int
*
ctableCount
)
;
Result
getPixels
(
const
SkImageInfo
&
info
void
*
pixels
size_t
rowBytes
)
;
Result
startScanlineDecode
(
const
SkImageInfo
&
dstInfo
const
SkCodec
:
:
Options
*
options
SkPMColor
ctable
[
]
int
*
ctableCount
)
;
Result
startScanlineDecode
(
const
SkImageInfo
&
dstInfo
)
;
int
getScanlines
(
void
*
dst
int
countLines
size_t
rowBytes
)
;
bool
skipScanlines
(
int
countLines
)
;
enum
SkScanlineOrder
{
kTopDown_SkScanlineOrder
kBottomUp_SkScanlineOrder
kOutOfOrder_SkScanlineOrder
kNone_SkScanlineOrder
}
;
SkScanlineOrder
getScanlineOrder
(
)
const
{
return
this
-
>
onGetScanlineOrder
(
)
;
}
int
nextScanline
(
)
const
{
return
this
-
>
outputScanline
(
fCurrScanline
)
;
}
int
outputScanline
(
int
inputScanline
)
const
;
protected
:
SkCodec
(
const
SkImageInfo
&
SkStream
*
)
;
virtual
SkISize
onGetScaledDimensions
(
float
)
const
{
return
this
-
>
getInfo
(
)
.
dimensions
(
)
;
}
virtual
bool
onDimensionsSupported
(
const
SkISize
&
)
{
return
false
;
}
virtual
SkEncodedFormat
onGetEncodedFormat
(
)
const
=
0
;
virtual
Result
onGetPixels
(
const
SkImageInfo
&
info
void
*
pixels
size_t
rowBytes
const
Options
&
SkPMColor
ctable
[
]
int
*
ctableCount
int
*
rowsDecoded
)
=
0
;
virtual
bool
onGetValidSubset
(
SkIRect
*
)
const
{
return
false
;
}
bool
SK_WARN_UNUSED_RESULT
rewindIfNeeded
(
)
;
virtual
bool
onRewind
(
)
{
return
true
;
}
uint32_t
getFillValue
(
SkColorType
colorType
SkAlphaType
alphaType
)
const
{
return
this
-
>
onGetFillValue
(
colorType
alphaType
)
;
}
virtual
uint32_t
onGetFillValue
(
SkColorType
SkAlphaType
alphaType
)
const
{
return
kOpaque_SkAlphaType
=
=
alphaType
?
SK_ColorBLACK
:
SK_ColorTRANSPARENT
;
}
SkStream
*
stream
(
)
{
return
fStream
.
get
(
)
;
}
virtual
SkScanlineOrder
onGetScanlineOrder
(
)
const
{
return
kTopDown_SkScanlineOrder
;
}
void
updateCurrScanline
(
int
newY
)
{
fCurrScanline
=
newY
;
}
const
SkImageInfo
&
dstInfo
(
)
const
{
return
fDstInfo
;
}
const
SkCodec
:
:
Options
&
options
(
)
const
{
return
fOptions
;
}
int
currScanline
(
)
const
{
return
fCurrScanline
;
}
virtual
int
onOutputScanline
(
int
inputScanline
)
const
;
private
:
const
SkImageInfo
fSrcInfo
;
SkAutoTDelete
<
SkStream
>
fStream
;
bool
fNeedsRewind
;
SkImageInfo
fDstInfo
;
SkCodec
:
:
Options
fOptions
;
int
fCurrScanline
;
bool
dimensionsSupported
(
const
SkISize
&
dim
)
{
return
dim
=
=
fSrcInfo
.
dimensions
(
)
|
|
this
-
>
onDimensionsSupported
(
dim
)
;
}
virtual
SkCodec
:
:
Result
onStartScanlineDecode
(
const
SkImageInfo
&
const
SkCodec
:
:
Options
&
SkPMColor
*
int
*
)
{
return
kUnimplemented
;
}
virtual
bool
onSkipScanlines
(
int
countLines
)
{
SkAutoMalloc
storage
(
fDstInfo
.
minRowBytes
(
)
)
;
return
countLines
=
=
this
-
>
onGetScanlines
(
storage
.
get
(
)
countLines
0
)
;
}
virtual
int
onGetScanlines
(
void
*
int
size_t
)
{
return
0
;
}
void
fillIncompleteImage
(
const
SkImageInfo
&
dstInfo
void
*
dst
size_t
rowBytes
ZeroInitialized
zeroInit
int
linesRequested
int
linesDecoded
)
;
virtual
SkSampler
*
getSampler
(
bool
)
{
return
nullptr
;
}
friend
class
SkSampledCodec
;
friend
class
SkIcoCodec
;
}
;
#
endif
