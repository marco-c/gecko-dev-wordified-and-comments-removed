#
ifndef
SkAndroidCodec_DEFINED
#
define
SkAndroidCodec_DEFINED
#
include
"
include
/
codec
/
SkCodec
.
h
"
#
include
"
include
/
core
/
SkColorSpace
.
h
"
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSize
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
private
/
SkEncodedInfo
.
h
"
#
include
"
include
/
private
/
base
/
SkNoncopyable
.
h
"
#
include
"
modules
/
skcms
/
skcms
.
h
"
#
include
"
include
/
codec
/
SkEncodedImageFormat
.
h
"
#
include
"
include
/
core
/
SkAlphaType
.
h
"
#
include
"
include
/
core
/
SkColorType
.
h
"
#
include
<
cstddef
>
#
include
<
memory
>
class
SkData
;
class
SkPngChunkReader
;
class
SkStream
;
struct
SkGainmapInfo
;
struct
SkIRect
;
class
SK_API
SkAndroidCodec
:
SkNoncopyable
{
public
:
enum
class
ExifOrientationBehavior
{
kIgnore
kRespect
}
;
static
std
:
:
unique_ptr
<
SkAndroidCodec
>
MakeFromCodec
(
std
:
:
unique_ptr
<
SkCodec
>
)
;
static
std
:
:
unique_ptr
<
SkAndroidCodec
>
MakeFromStream
(
std
:
:
unique_ptr
<
SkStream
>
SkPngChunkReader
*
=
nullptr
)
;
static
std
:
:
unique_ptr
<
SkAndroidCodec
>
MakeFromData
(
sk_sp
<
SkData
>
SkPngChunkReader
*
=
nullptr
)
;
virtual
~
SkAndroidCodec
(
)
;
const
SkImageInfo
&
getInfo
(
)
const
{
return
fInfo
;
}
const
skcms_ICCProfile
*
getICCProfile
(
)
const
{
return
fCodec
-
>
getEncodedInfo
(
)
.
profile
(
)
;
}
SkEncodedImageFormat
getEncodedFormat
(
)
const
{
return
fCodec
-
>
getEncodedFormat
(
)
;
}
SkColorType
computeOutputColorType
(
SkColorType
requestedColorType
)
;
SkAlphaType
computeOutputAlphaType
(
bool
requestedUnpremul
)
;
sk_sp
<
SkColorSpace
>
computeOutputColorSpace
(
SkColorType
outputColorType
sk_sp
<
SkColorSpace
>
prefColorSpace
=
nullptr
)
;
int
computeSampleSize
(
SkISize
*
size
)
const
;
SkISize
getSampledDimensions
(
int
sampleSize
)
const
;
bool
getSupportedSubset
(
SkIRect
*
desiredSubset
)
const
;
SkISize
getSampledSubsetDimensions
(
int
sampleSize
const
SkIRect
&
subset
)
const
;
struct
AndroidOptions
:
public
SkCodec
:
:
Options
{
AndroidOptions
(
)
:
SkCodec
:
:
Options
(
)
fSampleSize
(
1
)
{
}
int
fSampleSize
;
}
;
SkCodec
:
:
Result
getAndroidPixels
(
const
SkImageInfo
&
info
void
*
pixels
size_t
rowBytes
const
AndroidOptions
*
options
)
;
SkCodec
:
:
Result
getAndroidPixels
(
const
SkImageInfo
&
info
void
*
pixels
size_t
rowBytes
)
;
SkCodec
:
:
Result
getPixels
(
const
SkImageInfo
&
info
void
*
pixels
size_t
rowBytes
)
{
return
this
-
>
getAndroidPixels
(
info
pixels
rowBytes
)
;
}
SkCodec
*
codec
(
)
const
{
return
fCodec
.
get
(
)
;
}
bool
getGainmapAndroidCodec
(
SkGainmapInfo
*
outInfo
std
:
:
unique_ptr
<
SkAndroidCodec
>
*
outCodec
)
;
bool
getAndroidGainmap
(
SkGainmapInfo
*
outInfo
std
:
:
unique_ptr
<
SkStream
>
*
outGainmapImageStream
)
;
protected
:
SkAndroidCodec
(
SkCodec
*
)
;
virtual
SkISize
onGetSampledDimensions
(
int
sampleSize
)
const
=
0
;
virtual
bool
onGetSupportedSubset
(
SkIRect
*
desiredSubset
)
const
=
0
;
virtual
SkCodec
:
:
Result
onGetAndroidPixels
(
const
SkImageInfo
&
info
void
*
pixels
size_t
rowBytes
const
AndroidOptions
&
options
)
=
0
;
private
:
const
SkImageInfo
fInfo
;
std
:
:
unique_ptr
<
SkCodec
>
fCodec
;
}
;
#
endif
