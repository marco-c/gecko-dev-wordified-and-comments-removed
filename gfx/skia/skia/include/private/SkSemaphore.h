#
ifndef
SkSemaphore_DEFINED
#
define
SkSemaphore_DEFINED
#
include
"
SkTypes
.
h
"
#
include
"
.
.
/
private
/
SkAtomics
.
h
"
#
include
"
.
.
/
private
/
SkOncePtr
.
h
"
struct
SkBaseSemaphore
{
void
signal
(
)
{
if
(
sk_atomic_fetch_add
(
&
fCount
1
sk_memory_order_release
)
<
0
)
{
this
-
>
osSignal
(
1
)
;
}
}
void
signal
(
int
N
)
;
void
wait
(
)
{
if
(
sk_atomic_fetch_sub
(
&
fCount
1
sk_memory_order_acquire
)
<
=
0
)
{
this
-
>
osWait
(
)
;
}
}
struct
OSSemaphore
;
void
osSignal
(
int
n
)
;
void
osWait
(
)
;
void
deleteSemaphore
(
)
;
int
fCount
;
SkBaseOncePtr
<
OSSemaphore
>
fOSSemaphore
;
}
;
class
SkSemaphore
:
SkNoncopyable
{
public
:
SkSemaphore
(
)
;
~
SkSemaphore
(
)
;
void
wait
(
)
;
void
signal
(
int
n
=
1
)
;
private
:
SkBaseSemaphore
fBaseSemaphore
;
}
;
#
endif
