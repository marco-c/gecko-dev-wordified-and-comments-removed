#
ifndef
GrContext_Base_DEFINED
#
define
GrContext_Base_DEFINED
#
include
"
SkRefCnt
.
h
"
#
include
"
GrContextOptions
.
h
"
#
include
"
GrTypes
.
h
"
class
GrBaseContextPriv
;
class
GrCaps
;
class
GrContext
;
class
GrImageContext
;
class
GrRecordingContext
;
class
GrSkSLFPFactoryCache
;
class
SK_API
GrContext_Base
:
public
SkRefCnt
{
public
:
virtual
~
GrContext_Base
(
)
;
GrBackendApi
backend
(
)
const
{
return
fBackend
;
}
GrBaseContextPriv
priv
(
)
;
const
GrBaseContextPriv
priv
(
)
const
;
protected
:
friend
class
GrBaseContextPriv
;
GrContext_Base
(
GrBackendApi
backend
const
GrContextOptions
&
options
uint32_t
contextID
)
;
virtual
bool
init
(
sk_sp
<
const
GrCaps
>
sk_sp
<
GrSkSLFPFactoryCache
>
)
;
uint32_t
contextID
(
)
const
{
return
fContextID
;
}
bool
matches
(
GrContext_Base
*
candidate
)
const
{
return
candidate
-
>
contextID
(
)
=
=
this
-
>
contextID
(
)
;
}
const
GrContextOptions
&
options
(
)
const
{
return
fOptions
;
}
bool
explicitlyAllocateGPUResources
(
)
const
;
const
GrCaps
*
caps
(
)
const
;
sk_sp
<
const
GrCaps
>
refCaps
(
)
const
;
sk_sp
<
GrSkSLFPFactoryCache
>
fpFactoryCache
(
)
;
virtual
GrImageContext
*
asImageContext
(
)
{
return
nullptr
;
}
virtual
GrRecordingContext
*
asRecordingContext
(
)
{
return
nullptr
;
}
virtual
GrContext
*
asDirectContext
(
)
{
return
nullptr
;
}
private
:
const
GrBackendApi
fBackend
;
const
GrContextOptions
fOptions
;
const
uint32_t
fContextID
;
sk_sp
<
const
GrCaps
>
fCaps
;
sk_sp
<
GrSkSLFPFactoryCache
>
fFPFactoryCache
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
