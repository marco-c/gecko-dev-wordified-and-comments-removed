#
ifndef
SkIDChangeListener_DEFINED
#
define
SkIDChangeListener_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
private
/
base
/
SkMutex
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
"
include
/
private
/
base
/
SkThreadAnnotations
.
h
"
#
include
<
atomic
>
class
SkIDChangeListener
:
public
SkRefCnt
{
public
:
SkIDChangeListener
(
)
;
~
SkIDChangeListener
(
)
override
;
virtual
void
changed
(
)
=
0
;
void
markShouldDeregister
(
)
{
fShouldDeregister
.
store
(
true
std
:
:
memory_order_relaxed
)
;
}
bool
shouldDeregister
(
)
{
return
fShouldDeregister
.
load
(
std
:
:
memory_order_acquire
)
;
}
class
List
{
public
:
List
(
)
;
~
List
(
)
;
void
add
(
sk_sp
<
SkIDChangeListener
>
listener
)
SK_EXCLUDES
(
fMutex
)
;
int
count
(
)
const
SK_EXCLUDES
(
fMutex
)
;
void
changed
(
)
SK_EXCLUDES
(
fMutex
)
;
void
reset
(
)
SK_EXCLUDES
(
fMutex
)
;
private
:
mutable
SkMutex
fMutex
;
skia_private
:
:
STArray
<
1
sk_sp
<
SkIDChangeListener
>
>
fListeners
SK_GUARDED_BY
(
fMutex
)
;
}
;
private
:
std
:
:
atomic
<
bool
>
fShouldDeregister
;
}
;
#
endif
