#
ifndef
SkMutex_DEFINED
#
define
SkMutex_DEFINED
#
include
"
.
.
/
private
/
SkSemaphore
.
h
"
#
include
"
SkTypes
.
h
"
#
ifdef
SK_DEBUG
#
include
"
.
.
/
private
/
SkThreadID
.
h
"
#
endif
#
define
SK_MUTEX_SEMAPHORE_INIT
{
1
{
0
}
}
#
ifdef
SK_DEBUG
#
define
SK_BASE_MUTEX_INIT
{
SK_MUTEX_SEMAPHORE_INIT
0
}
#
else
#
define
SK_BASE_MUTEX_INIT
{
SK_MUTEX_SEMAPHORE_INIT
}
#
endif
#
define
SK_DECLARE_STATIC_MUTEX
(
name
)
namespace
{
}
static
SkBaseMutex
name
=
SK_BASE_MUTEX_INIT
;
struct
SkBaseMutex
{
void
acquire
(
)
{
fSemaphore
.
wait
(
)
;
SkDEBUGCODE
(
fOwner
=
SkGetThreadID
(
)
;
)
}
void
release
(
)
{
this
-
>
assertHeld
(
)
;
SkDEBUGCODE
(
fOwner
=
kIllegalThreadID
;
)
fSemaphore
.
signal
(
)
;
}
void
assertHeld
(
)
{
SkASSERT
(
fOwner
=
=
SkGetThreadID
(
)
)
;
}
SkBaseSemaphore
fSemaphore
;
SkDEBUGCODE
(
SkThreadID
fOwner
;
)
}
;
class
SkMutex
:
public
SkBaseMutex
{
public
:
SkMutex
(
)
{
fSemaphore
=
SK_MUTEX_SEMAPHORE_INIT
;
SkDEBUGCODE
(
fOwner
=
kIllegalThreadID
)
;
}
~
SkMutex
(
)
{
fSemaphore
.
deleteSemaphore
(
)
;
}
SkMutex
(
const
SkMutex
&
)
=
delete
;
SkMutex
&
operator
=
(
const
SkMutex
&
)
=
delete
;
}
;
template
<
typename
Lock
>
class
SkAutoTAcquire
:
SkNoncopyable
{
public
:
explicit
SkAutoTAcquire
(
Lock
&
mutex
)
:
fMutex
(
&
mutex
)
{
SkASSERT
(
fMutex
!
=
nullptr
)
;
mutex
.
acquire
(
)
;
}
explicit
SkAutoTAcquire
(
Lock
*
mutex
)
:
fMutex
(
mutex
)
{
if
(
mutex
)
{
mutex
-
>
acquire
(
)
;
}
}
~
SkAutoTAcquire
(
)
{
if
(
fMutex
)
{
fMutex
-
>
release
(
)
;
}
}
void
release
(
)
{
if
(
fMutex
)
{
fMutex
-
>
release
(
)
;
fMutex
=
nullptr
;
}
}
void
assertHeld
(
)
{
SkASSERT
(
fMutex
)
;
fMutex
-
>
assertHeld
(
)
;
}
private
:
Lock
*
fMutex
;
}
;
template
<
typename
Lock
>
class
SkAutoTExclusive
{
public
:
SkAutoTExclusive
(
Lock
&
lock
)
:
fLock
(
lock
)
{
lock
.
acquire
(
)
;
}
~
SkAutoTExclusive
(
)
{
fLock
.
release
(
)
;
}
private
:
Lock
&
fLock
;
}
;
typedef
SkAutoTAcquire
<
SkBaseMutex
>
SkAutoMutexAcquire
;
#
define
SkAutoMutexAcquire
(
.
.
.
)
SK_REQUIRE_LOCAL_VAR
(
SkAutoMutexAcquire
)
typedef
SkAutoTExclusive
<
SkBaseMutex
>
SkAutoMutexExclusive
;
#
define
SkAutoMutexExclusive
(
.
.
.
)
SK_REQUIRE_LOCAL_VAR
(
SkAutoMutexExclusive
)
#
endif
