#
ifndef
GrSurfaceProxy_DEFINED
#
define
GrSurfaceProxy_DEFINED
#
include
"
GrGpuResource
.
h
"
#
include
"
GrSurface
.
h
"
#
include
"
SkRect
.
h
"
class
GrBackendTexture
;
class
GrCaps
;
class
GrOpList
;
class
GrProxyProvider
;
class
GrRenderTargetOpList
;
class
GrRenderTargetProxy
;
class
GrResourceProvider
;
class
GrSurfaceContext
;
class
GrSurfaceProxyPriv
;
class
GrTextureOpList
;
class
GrTextureProxy
;
class
GrIORefProxy
:
public
SkNoncopyable
{
public
:
void
ref
(
)
const
{
this
-
>
validate
(
)
;
+
+
fRefCnt
;
if
(
fTarget
)
{
fTarget
-
>
ref
(
)
;
}
}
void
unref
(
)
const
{
this
-
>
validate
(
)
;
if
(
fTarget
)
{
fTarget
-
>
unref
(
)
;
}
-
-
fRefCnt
;
this
-
>
didRemoveRefOrPendingIO
(
)
;
}
#
ifdef
SK_DEBUG
bool
isUnique_debugOnly
(
)
const
{
SkASSERT
(
fRefCnt
>
=
0
&
&
fPendingWrites
>
=
0
&
&
fPendingReads
>
=
0
)
;
return
1
=
=
fRefCnt
+
fPendingWrites
+
fPendingReads
;
}
#
endif
void
validate
(
)
const
{
#
ifdef
SK_DEBUG
SkASSERT
(
fRefCnt
>
=
0
)
;
SkASSERT
(
fPendingReads
>
=
0
)
;
SkASSERT
(
fPendingWrites
>
=
0
)
;
SkASSERT
(
fRefCnt
+
fPendingReads
+
fPendingWrites
>
=
1
)
;
if
(
fTarget
)
{
SkASSERT
(
fTarget
-
>
fRefCnt
>
=
fRefCnt
)
;
SkASSERT
(
fTarget
-
>
fPendingReads
>
=
fPendingReads
)
;
SkASSERT
(
fTarget
-
>
fPendingWrites
>
=
fPendingWrites
)
;
}
#
endif
}
int32_t
getProxyRefCnt_TestOnly
(
)
const
;
int32_t
getBackingRefCnt_TestOnly
(
)
const
;
int32_t
getPendingReadCnt_TestOnly
(
)
const
;
int32_t
getPendingWriteCnt_TestOnly
(
)
const
;
void
addPendingRead
(
)
const
{
this
-
>
validate
(
)
;
+
+
fPendingReads
;
if
(
fTarget
)
{
fTarget
-
>
addPendingRead
(
)
;
}
}
void
completedRead
(
)
const
{
this
-
>
validate
(
)
;
if
(
fTarget
)
{
fTarget
-
>
completedRead
(
)
;
}
-
-
fPendingReads
;
this
-
>
didRemoveRefOrPendingIO
(
)
;
}
void
addPendingWrite
(
)
const
{
this
-
>
validate
(
)
;
+
+
fPendingWrites
;
if
(
fTarget
)
{
fTarget
-
>
addPendingWrite
(
)
;
}
}
void
completedWrite
(
)
const
{
this
-
>
validate
(
)
;
if
(
fTarget
)
{
fTarget
-
>
completedWrite
(
)
;
}
-
-
fPendingWrites
;
this
-
>
didRemoveRefOrPendingIO
(
)
;
}
protected
:
GrIORefProxy
(
)
:
fTarget
(
nullptr
)
fRefCnt
(
1
)
fPendingReads
(
0
)
fPendingWrites
(
0
)
{
}
GrIORefProxy
(
sk_sp
<
GrSurface
>
surface
)
:
fRefCnt
(
1
)
fPendingReads
(
0
)
fPendingWrites
(
0
)
{
fTarget
=
surface
.
release
(
)
;
}
virtual
~
GrIORefProxy
(
)
{
}
void
transferRefs
(
)
{
SkASSERT
(
fTarget
)
;
SkASSERT
(
fTarget
-
>
fRefCnt
>
0
)
;
fTarget
-
>
fRefCnt
+
=
(
fRefCnt
-
1
)
;
fTarget
-
>
fPendingReads
+
=
fPendingReads
;
fTarget
-
>
fPendingWrites
+
=
fPendingWrites
;
}
bool
internalHasPendingIO
(
)
const
{
if
(
fTarget
)
{
return
fTarget
-
>
internalHasPendingIO
(
)
;
}
return
SkToBool
(
fPendingWrites
|
fPendingReads
)
;
}
bool
internalHasPendingWrite
(
)
const
{
if
(
fTarget
)
{
return
fTarget
-
>
internalHasPendingWrite
(
)
;
}
return
SkToBool
(
fPendingWrites
)
;
}
GrSurface
*
fTarget
;
private
:
friend
class
GrSurfaceProxyRef
;
template
<
typename
GrIOType
>
friend
class
GrPendingIOResource
;
void
didRemoveRefOrPendingIO
(
)
const
{
if
(
0
=
=
fPendingReads
&
&
0
=
=
fPendingWrites
&
&
0
=
=
fRefCnt
)
{
delete
this
;
}
}
mutable
int32_t
fRefCnt
;
mutable
int32_t
fPendingReads
;
mutable
int32_t
fPendingWrites
;
}
;
class
GrSurfaceProxy
:
public
GrIORefProxy
{
public
:
enum
class
LazyInstantiationType
{
kSingleUse
kMultipleUse
}
;
enum
class
LazyState
{
kNot
kPartially
kFully
}
;
LazyState
lazyInstantiationState
(
)
const
{
if
(
fTarget
|
|
!
SkToBool
(
fLazyInstantiateCallback
)
)
{
return
LazyState
:
:
kNot
;
}
else
{
if
(
fWidth
<
=
0
)
{
SkASSERT
(
fHeight
<
=
0
)
;
return
LazyState
:
:
kFully
;
}
else
{
SkASSERT
(
fHeight
>
0
)
;
return
LazyState
:
:
kPartially
;
}
}
}
GrPixelConfig
config
(
)
const
{
return
fConfig
;
}
int
width
(
)
const
{
SkASSERT
(
LazyState
:
:
kFully
!
=
this
-
>
lazyInstantiationState
(
)
)
;
return
fWidth
;
}
int
height
(
)
const
{
SkASSERT
(
LazyState
:
:
kFully
!
=
this
-
>
lazyInstantiationState
(
)
)
;
return
fHeight
;
}
int
worstCaseWidth
(
)
const
;
int
worstCaseHeight
(
)
const
;
GrSurfaceOrigin
origin
(
)
const
{
SkASSERT
(
kTopLeft_GrSurfaceOrigin
=
=
fOrigin
|
|
kBottomLeft_GrSurfaceOrigin
=
=
fOrigin
)
;
return
fOrigin
;
}
class
UniqueID
{
public
:
static
UniqueID
InvalidID
(
)
{
return
UniqueID
(
uint32_t
(
SK_InvalidUniqueID
)
)
;
}
explicit
UniqueID
(
const
GrGpuResource
:
:
UniqueID
&
id
)
:
fID
(
id
.
asUInt
(
)
)
{
}
UniqueID
(
)
:
fID
(
GrGpuResource
:
:
CreateUniqueID
(
)
)
{
}
uint32_t
asUInt
(
)
const
{
return
fID
;
}
bool
operator
=
=
(
const
UniqueID
&
other
)
const
{
return
fID
=
=
other
.
fID
;
}
bool
operator
!
=
(
const
UniqueID
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
void
makeInvalid
(
)
{
fID
=
SK_InvalidUniqueID
;
}
bool
isInvalid
(
)
const
{
return
SK_InvalidUniqueID
=
=
fID
;
}
private
:
explicit
UniqueID
(
uint32_t
id
)
:
fID
(
id
)
{
}
uint32_t
fID
;
}
;
UniqueID
uniqueID
(
)
const
{
return
fUniqueID
;
}
UniqueID
underlyingUniqueID
(
)
const
{
if
(
fTarget
)
{
return
UniqueID
(
fTarget
-
>
uniqueID
(
)
)
;
}
return
fUniqueID
;
}
virtual
bool
instantiate
(
GrResourceProvider
*
resourceProvider
)
=
0
;
SkRect
getBoundsRect
(
)
const
{
SkASSERT
(
LazyState
:
:
kFully
!
=
this
-
>
lazyInstantiationState
(
)
)
;
return
SkRect
:
:
MakeIWH
(
this
-
>
width
(
)
this
-
>
height
(
)
)
;
}
virtual
GrTextureProxy
*
asTextureProxy
(
)
{
return
nullptr
;
}
virtual
const
GrTextureProxy
*
asTextureProxy
(
)
const
{
return
nullptr
;
}
virtual
GrRenderTargetProxy
*
asRenderTargetProxy
(
)
{
return
nullptr
;
}
virtual
const
GrRenderTargetProxy
*
asRenderTargetProxy
(
)
const
{
return
nullptr
;
}
SkBudgeted
isBudgeted
(
)
const
{
return
fBudgeted
;
}
void
setLastOpList
(
GrOpList
*
opList
)
;
GrOpList
*
getLastOpList
(
)
{
return
fLastOpList
;
}
GrRenderTargetOpList
*
getLastRenderTargetOpList
(
)
;
GrTextureOpList
*
getLastTextureOpList
(
)
;
size_t
gpuMemorySize
(
)
const
{
SkASSERT
(
LazyState
:
:
kFully
!
=
this
-
>
lazyInstantiationState
(
)
)
;
if
(
fTarget
)
{
return
fTarget
-
>
gpuMemorySize
(
)
;
}
if
(
kInvalidGpuMemorySize
=
=
fGpuMemorySize
)
{
fGpuMemorySize
=
this
-
>
onUninstantiatedGpuMemorySize
(
)
;
SkASSERT
(
kInvalidGpuMemorySize
!
=
fGpuMemorySize
)
;
}
return
fGpuMemorySize
;
}
static
sk_sp
<
GrTextureProxy
>
Copy
(
GrContext
*
GrSurfaceProxy
*
src
GrMipMapped
SkIRect
srcRect
SkBudgeted
)
;
static
sk_sp
<
GrTextureProxy
>
Copy
(
GrContext
*
context
GrSurfaceProxy
*
src
GrMipMapped
SkBudgeted
budgeted
)
;
static
sk_sp
<
GrSurfaceContext
>
TestCopy
(
GrContext
*
context
const
GrSurfaceDesc
&
dstDesc
GrSurfaceProxy
*
srcProxy
)
;
bool
isWrapped_ForTesting
(
)
const
;
SkDEBUGCODE
(
void
validate
(
GrContext
*
)
const
;
)
inline
GrSurfaceProxyPriv
priv
(
)
;
inline
const
GrSurfaceProxyPriv
priv
(
)
const
;
protected
:
GrSurfaceProxy
(
const
GrSurfaceDesc
&
desc
SkBackingFit
fit
SkBudgeted
budgeted
uint32_t
flags
)
:
GrSurfaceProxy
(
nullptr
LazyInstantiationType
:
:
kSingleUse
desc
fit
budgeted
flags
)
{
}
using
LazyInstantiateCallback
=
std
:
:
function
<
sk_sp
<
GrSurface
>
(
GrResourceProvider
*
)
>
;
GrSurfaceProxy
(
LazyInstantiateCallback
&
&
callback
LazyInstantiationType
lazyType
const
GrSurfaceDesc
&
desc
SkBackingFit
fit
SkBudgeted
budgeted
uint32_t
flags
)
;
GrSurfaceProxy
(
sk_sp
<
GrSurface
>
surface
GrSurfaceOrigin
origin
SkBackingFit
fit
)
;
virtual
~
GrSurfaceProxy
(
)
;
friend
class
GrSurfaceProxyPriv
;
bool
hasPendingIO
(
)
const
{
return
this
-
>
internalHasPendingIO
(
)
;
}
bool
hasPendingWrite
(
)
const
{
return
this
-
>
internalHasPendingWrite
(
)
;
}
void
computeScratchKey
(
GrScratchKey
*
)
const
;
virtual
sk_sp
<
GrSurface
>
createSurface
(
GrResourceProvider
*
)
const
=
0
;
void
assign
(
sk_sp
<
GrSurface
>
surface
)
;
sk_sp
<
GrSurface
>
createSurfaceImpl
(
GrResourceProvider
*
int
sampleCnt
bool
needsStencil
GrSurfaceFlags
flags
GrMipMapped
mipMapped
)
const
;
bool
instantiateImpl
(
GrResourceProvider
*
resourceProvider
int
sampleCnt
bool
needsStencil
GrSurfaceFlags
flags
GrMipMapped
mipMapped
const
GrUniqueKey
*
)
;
private
:
GrPixelConfig
fConfig
;
int
fWidth
;
int
fHeight
;
GrSurfaceOrigin
fOrigin
;
SkBackingFit
fFit
;
mutable
SkBudgeted
fBudgeted
;
const
uint32_t
fFlags
;
const
UniqueID
fUniqueID
;
LazyInstantiateCallback
fLazyInstantiateCallback
;
LazyInstantiationType
fLazyInstantiationType
;
SkDEBUGCODE
(
virtual
void
validateLazySurface
(
const
GrSurface
*
)
=
0
;
)
static
const
size_t
kInvalidGpuMemorySize
=
~
static_cast
<
size_t
>
(
0
)
;
SkDEBUGCODE
(
size_t
getRawGpuMemorySize_debugOnly
(
)
const
{
return
fGpuMemorySize
;
}
)
virtual
size_t
onUninstantiatedGpuMemorySize
(
)
const
=
0
;
bool
fNeedsClear
;
mutable
size_t
fGpuMemorySize
;
GrOpList
*
fLastOpList
;
typedef
GrIORefProxy
INHERITED
;
}
;
#
endif
