#
ifndef
SkChecksum_DEFINED
#
define
SkChecksum_DEFINED
#
include
"
SkString
.
h
"
#
include
"
SkTLogic
.
h
"
#
include
"
SkTypes
.
h
"
class
SkChecksum
:
SkNoncopyable
{
public
:
static
uint32_t
Mix
(
uint32_t
hash
)
{
hash
^
=
hash
>
>
16
;
hash
*
=
0x85ebca6b
;
hash
^
=
hash
>
>
13
;
hash
*
=
0xc2b2ae35
;
hash
^
=
hash
>
>
16
;
return
hash
;
}
static
uint32_t
CheapMix
(
uint32_t
hash
)
{
hash
^
=
hash
>
>
16
;
hash
*
=
0x85ebca6b
;
hash
^
=
hash
>
>
16
;
return
hash
;
}
static
uint32_t
Murmur3
(
const
void
*
data
size_t
bytes
uint32_t
seed
=
0
)
;
}
;
struct
SkGoodHash
{
template
<
typename
K
>
SK_WHEN
(
sizeof
(
K
)
=
=
4
uint32_t
)
operator
(
)
(
const
K
&
k
)
const
{
return
SkChecksum
:
:
Mix
(
*
(
const
uint32_t
*
)
&
k
)
;
}
template
<
typename
K
>
SK_WHEN
(
sizeof
(
K
)
!
=
4
uint32_t
)
operator
(
)
(
const
K
&
k
)
const
{
return
SkChecksum
:
:
Murmur3
(
&
k
sizeof
(
K
)
)
;
}
uint32_t
operator
(
)
(
const
SkString
&
k
)
const
{
return
SkChecksum
:
:
Murmur3
(
k
.
c_str
(
)
k
.
size
(
)
)
;
}
}
;
#
endif
