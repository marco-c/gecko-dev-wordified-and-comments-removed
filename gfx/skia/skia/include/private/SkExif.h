#
ifndef
SkExif_DEFINED
#
define
SkExif_DEFINED
#
include
"
include
/
codec
/
SkEncodedOrigin
.
h
"
#
include
"
include
/
core
/
SkData
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
private
/
base
/
SkAPI
.
h
"
#
include
<
cstdint
>
class
SK_API
SkExifMetadata
{
public
:
SkExifMetadata
(
const
sk_sp
<
SkData
>
data
)
;
bool
getOrigin
(
SkEncodedOrigin
*
out
)
const
{
if
(
fOriginPresent
&
&
out
)
*
out
=
fOriginValue
;
return
fOriginPresent
;
}
bool
getHdrHeadroom
(
float
*
out
)
const
{
if
(
fHdrHeadroomPresent
&
&
out
)
*
out
=
fHdrHeadroomValue
;
return
fHdrHeadroomPresent
;
}
bool
getResolutionUnit
(
uint16_t
*
out
)
const
{
if
(
fResolutionUnitPresent
&
&
out
)
*
out
=
fResolutionUnitValue
;
return
fResolutionUnitPresent
;
}
bool
getXResolution
(
float
*
out
)
const
{
if
(
fXResolutionPresent
&
&
out
)
*
out
=
fXResolutionValue
;
return
fXResolutionPresent
;
}
bool
getYResolution
(
float
*
out
)
const
{
if
(
fYResolutionPresent
&
&
out
)
*
out
=
fYResolutionValue
;
return
fYResolutionPresent
;
}
bool
getPixelXDimension
(
uint32_t
*
out
)
const
{
if
(
fPixelXDimensionPresent
&
&
out
)
*
out
=
fPixelXDimensionValue
;
return
fPixelXDimensionPresent
;
}
bool
getPixelYDimension
(
uint32_t
*
out
)
const
{
if
(
fPixelYDimensionPresent
&
&
out
)
*
out
=
fPixelYDimensionValue
;
return
fPixelYDimensionPresent
;
}
private
:
void
parseIfd
(
uint32_t
ifdOffset
bool
littleEndian
bool
isRoot
)
;
const
sk_sp
<
SkData
>
fData
;
bool
fOriginPresent
=
false
;
SkEncodedOrigin
fOriginValue
=
kTopLeft_SkEncodedOrigin
;
bool
fHdrHeadroomPresent
=
false
;
float
fHdrHeadroomValue
=
1
.
f
;
bool
fResolutionUnitPresent
=
false
;
uint16_t
fResolutionUnitValue
=
0
;
bool
fXResolutionPresent
=
false
;
float
fXResolutionValue
=
0
;
bool
fYResolutionPresent
=
false
;
float
fYResolutionValue
=
0
;
bool
fPixelXDimensionPresent
=
false
;
uint32_t
fPixelXDimensionValue
=
0
;
bool
fPixelYDimensionPresent
=
false
;
uint32_t
fPixelYDimensionValue
=
0
;
}
;
#
endif
