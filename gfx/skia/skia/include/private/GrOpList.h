#
ifndef
GrOpList_DEFINED
#
define
GrOpList_DEFINED
#
include
"
GrColor
.
h
"
#
include
"
GrSurfaceProxyRef
.
h
"
#
include
"
GrTextureProxy
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkTDArray
.
h
"
class
GrAuditTrail
;
class
GrCaps
;
class
GrOpFlushState
;
class
GrRenderTargetOpList
;
class
GrResourceAllocator
;
class
GrResourceProvider
;
class
GrSurfaceProxy
;
class
GrTextureOpList
;
struct
SkIPoint
;
struct
SkIRect
;
class
GrOpList
:
public
SkRefCnt
{
public
:
GrOpList
(
GrResourceProvider
*
GrSurfaceProxy
*
GrAuditTrail
*
)
;
~
GrOpList
(
)
override
;
bool
instantiate
(
GrResourceProvider
*
resourceProvider
)
;
void
instantiateDeferredProxies
(
GrResourceProvider
*
resourceProvider
)
;
void
prepare
(
GrOpFlushState
*
flushState
)
;
bool
execute
(
GrOpFlushState
*
flushState
)
{
return
this
-
>
onExecute
(
flushState
)
;
}
virtual
bool
copySurface
(
const
GrCaps
&
caps
GrSurfaceProxy
*
dst
GrSurfaceProxy
*
src
const
SkIRect
&
srcRect
const
SkIPoint
&
dstPoint
)
=
0
;
virtual
void
makeClosed
(
const
GrCaps
&
)
{
if
(
!
this
-
>
isClosed
(
)
)
{
this
-
>
setFlag
(
kClosed_Flag
)
;
fTarget
.
removeRef
(
)
;
}
}
virtual
void
endFlush
(
)
;
bool
isClosed
(
)
const
{
return
this
-
>
isSetFlag
(
kClosed_Flag
)
;
}
void
addDependency
(
GrSurfaceProxy
*
dependedOn
const
GrCaps
&
caps
)
;
bool
dependsOn
(
GrOpList
*
dependedOn
)
const
{
for
(
int
i
=
0
;
i
<
fDependencies
.
count
(
)
;
+
+
i
)
{
if
(
fDependencies
[
i
]
=
=
dependedOn
)
{
return
true
;
}
}
return
false
;
}
virtual
GrTextureOpList
*
asTextureOpList
(
)
{
return
nullptr
;
}
virtual
GrRenderTargetOpList
*
asRenderTargetOpList
(
)
{
return
nullptr
;
}
uint32_t
uniqueID
(
)
const
{
return
fUniqueID
;
}
SkDEBUGCODE
(
virtual
void
dump
(
)
const
;
)
SkDEBUGCODE
(
virtual
int
numOps
(
)
const
=
0
;
)
SkDEBUGCODE
(
virtual
int
numClips
(
)
const
{
return
0
;
}
)
void
setStencilLoadOp
(
GrLoadOp
loadOp
)
{
fStencilLoadOp
=
loadOp
;
}
protected
:
bool
isInstantiated
(
)
const
;
GrSurfaceProxyRef
fTarget
;
GrAuditTrail
*
fAuditTrail
;
GrLoadOp
fColorLoadOp
=
GrLoadOp
:
:
kLoad
;
GrColor
fLoadClearColor
=
0x0
;
GrLoadOp
fStencilLoadOp
=
GrLoadOp
:
:
kLoad
;
SkTArray
<
GrTextureProxy
*
true
>
fDeferredProxies
;
private
:
friend
class
GrDrawingManager
;
virtual
void
purgeOpsWithUninstantiatedProxies
(
)
=
0
;
virtual
void
gatherProxyIntervals
(
GrResourceAllocator
*
)
const
=
0
;
static
uint32_t
CreateUniqueID
(
)
;
enum
Flags
{
kClosed_Flag
=
0x01
kWasOutput_Flag
=
0x02
kTempMark_Flag
=
0x04
}
;
void
setFlag
(
uint32_t
flag
)
{
fFlags
|
=
flag
;
}
void
resetFlag
(
uint32_t
flag
)
{
fFlags
&
=
~
flag
;
}
bool
isSetFlag
(
uint32_t
flag
)
const
{
return
SkToBool
(
fFlags
&
flag
)
;
}
struct
TopoSortTraits
{
static
void
Output
(
GrOpList
*
opList
int
)
{
opList
-
>
setFlag
(
GrOpList
:
:
kWasOutput_Flag
)
;
}
static
bool
WasOutput
(
const
GrOpList
*
opList
)
{
return
opList
-
>
isSetFlag
(
GrOpList
:
:
kWasOutput_Flag
)
;
}
static
void
SetTempMark
(
GrOpList
*
opList
)
{
opList
-
>
setFlag
(
GrOpList
:
:
kTempMark_Flag
)
;
}
static
void
ResetTempMark
(
GrOpList
*
opList
)
{
opList
-
>
resetFlag
(
GrOpList
:
:
kTempMark_Flag
)
;
}
static
bool
IsTempMarked
(
const
GrOpList
*
opList
)
{
return
opList
-
>
isSetFlag
(
GrOpList
:
:
kTempMark_Flag
)
;
}
static
int
NumDependencies
(
const
GrOpList
*
opList
)
{
return
opList
-
>
fDependencies
.
count
(
)
;
}
static
GrOpList
*
Dependency
(
GrOpList
*
opList
int
index
)
{
return
opList
-
>
fDependencies
[
index
]
;
}
}
;
virtual
void
onPrepare
(
GrOpFlushState
*
flushState
)
=
0
;
virtual
bool
onExecute
(
GrOpFlushState
*
flushState
)
=
0
;
void
addDependency
(
GrOpList
*
dependedOn
)
;
uint32_t
fUniqueID
;
uint32_t
fFlags
;
SkSTArray
<
1
GrOpList
*
true
>
fDependencies
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
