#
ifndef
GrTextureProxy_DEFINED
#
define
GrTextureProxy_DEFINED
#
include
"
GrSamplerState
.
h
"
#
include
"
GrSurfaceProxy
.
h
"
class
GrCaps
;
class
GrDeferredProxyUploader
;
class
GrProxyProvider
;
class
GrResourceProvider
;
class
GrTextureOpList
;
class
GrTextureProxyPriv
;
class
GrTextureProxy
:
virtual
public
GrSurfaceProxy
{
public
:
GrTextureProxy
*
asTextureProxy
(
)
override
{
return
this
;
}
const
GrTextureProxy
*
asTextureProxy
(
)
const
override
{
return
this
;
}
bool
instantiate
(
GrResourceProvider
*
)
override
;
GrSamplerState
:
:
Filter
highestFilterMode
(
)
const
;
GrMipMapped
mipMapped
(
)
const
;
GrMipMapped
proxyMipMapped
(
)
const
{
return
fMipMapped
;
}
GrTextureType
textureType
(
)
const
{
return
this
-
>
backendFormat
(
)
.
textureType
(
)
;
}
bool
hasRestrictedSampling
(
)
const
{
return
GrTextureTypeHasRestrictedSampling
(
this
-
>
textureType
(
)
)
;
}
static
bool
ProxiesAreCompatibleAsDynamicState
(
const
GrTextureProxy
*
first
const
GrTextureProxy
*
second
)
;
const
GrUniqueKey
&
getUniqueKey
(
)
const
{
#
ifdef
SK_DEBUG
if
(
fTarget
&
&
fUniqueKey
.
isValid
(
)
)
{
SkASSERT
(
fTarget
-
>
getUniqueKey
(
)
.
isValid
(
)
)
;
SkASSERT
(
fUniqueKey
=
=
fTarget
-
>
getUniqueKey
(
)
)
;
}
#
endif
return
fUniqueKey
;
}
class
CacheAccess
;
inline
CacheAccess
cacheAccess
(
)
;
inline
const
CacheAccess
cacheAccess
(
)
const
;
GrTextureProxyPriv
texPriv
(
)
;
const
GrTextureProxyPriv
texPriv
(
)
const
;
protected
:
friend
class
GrSurfaceProxy
;
friend
class
GrProxyProvider
;
friend
class
GrTextureProxyPriv
;
GrTextureProxy
(
const
GrBackendFormat
&
const
GrSurfaceDesc
&
srcDesc
GrMipMapped
SkBackingFit
SkBudgeted
const
void
*
srcData
size_t
srcRowBytes
GrInternalSurfaceFlags
)
;
GrTextureProxy
(
const
GrBackendFormat
&
const
GrSurfaceDesc
&
srcDesc
GrSurfaceOrigin
GrMipMapped
SkBackingFit
SkBudgeted
GrInternalSurfaceFlags
)
;
GrTextureProxy
(
LazyInstantiateCallback
&
&
LazyInstantiationType
const
GrBackendFormat
&
const
GrSurfaceDesc
&
desc
GrSurfaceOrigin
GrMipMapped
SkBackingFit
SkBudgeted
GrInternalSurfaceFlags
)
;
GrTextureProxy
(
sk_sp
<
GrSurface
>
GrSurfaceOrigin
)
;
~
GrTextureProxy
(
)
override
;
sk_sp
<
GrSurface
>
createSurface
(
GrResourceProvider
*
)
const
override
;
private
:
GrMipMapped
fMipMapped
;
GrUniqueKey
fUniqueKey
;
GrProxyProvider
*
fProxyProvider
;
std
:
:
unique_ptr
<
GrDeferredProxyUploader
>
fDeferredUploader
;
size_t
onUninstantiatedGpuMemorySize
(
)
const
override
;
void
setUniqueKey
(
GrProxyProvider
*
const
GrUniqueKey
&
)
;
void
clearUniqueKey
(
)
;
SkDEBUGCODE
(
void
onValidateSurface
(
const
GrSurface
*
)
override
;
)
typedef
GrSurfaceProxy
INHERITED
;
}
;
#
endif
