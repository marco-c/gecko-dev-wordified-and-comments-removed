#
ifndef
GrTypesPriv_DEFINED
#
define
GrTypesPriv_DEFINED
#
include
<
chrono
>
#
include
"
GrSharedEnums
.
h
"
#
include
"
GrTypes
.
h
"
#
include
"
SkCanvas
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkImageInfoPriv
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkWeakRefCnt
.
h
"
class
GrCaps
;
#
ifdef
MOZ_SKIA
#
include
"
mozilla
/
TimeStamp
.
h
"
struct
GrStdSteadyClock
{
typedef
mozilla
:
:
TimeStamp
time_point
;
static
time_point
now
(
)
{
return
mozilla
:
:
TimeStamp
:
:
NowLoRes
(
)
;
}
}
;
static
inline
GrStdSteadyClock
:
:
time_point
operator
-
(
GrStdSteadyClock
:
:
time_point
t
std
:
:
chrono
:
:
milliseconds
ms
)
{
return
t
-
mozilla
:
:
TimeDuration
:
:
FromMilliseconds
(
ms
.
count
(
)
)
;
}
#
else
#
if
defined
(
__GLIBCXX__
)
&
&
(
__GLIBCXX__
<
20130000
)
using
GrStdSteadyClock
=
std
:
:
chrono
:
:
monotonic_clock
;
#
else
using
GrStdSteadyClock
=
std
:
:
chrono
:
:
steady_clock
;
#
endif
#
endif
enum
GrPixelConfig
{
kUnknown_GrPixelConfig
kAlpha_8_GrPixelConfig
kAlpha_8_as_Alpha_GrPixelConfig
kAlpha_8_as_Red_GrPixelConfig
kGray_8_GrPixelConfig
kGray_8_as_Lum_GrPixelConfig
kGray_8_as_Red_GrPixelConfig
kRGB_565_GrPixelConfig
kRGBA_4444_GrPixelConfig
kRGBA_8888_GrPixelConfig
kRGB_888_GrPixelConfig
kRGB_888X_GrPixelConfig
kRG_88_GrPixelConfig
kBGRA_8888_GrPixelConfig
kSRGBA_8888_GrPixelConfig
kSBGRA_8888_GrPixelConfig
kRGBA_1010102_GrPixelConfig
kRGBA_float_GrPixelConfig
kRG_float_GrPixelConfig
kAlpha_half_GrPixelConfig
kAlpha_half_as_Red_GrPixelConfig
kRGBA_half_GrPixelConfig
kRGB_ETC1_GrPixelConfig
kLast_GrPixelConfig
=
kRGB_ETC1_GrPixelConfig
}
;
static
const
int
kGrPixelConfigCnt
=
kLast_GrPixelConfig
+
1
;
#
if
SK_PMCOLOR_BYTE_ORDER
(
B
G
R
A
)
static
const
GrPixelConfig
kSkia8888_GrPixelConfig
=
kBGRA_8888_GrPixelConfig
;
#
elif
SK_PMCOLOR_BYTE_ORDER
(
R
G
B
A
)
static
const
GrPixelConfig
kSkia8888_GrPixelConfig
=
kRGBA_8888_GrPixelConfig
;
#
else
static
const
GrPixelConfig
kSkia8888_GrPixelConfig
=
kBGRA_8888_GrPixelConfig
;
#
endif
enum
class
GrPrimitiveType
{
kTriangles
kTriangleStrip
kPoints
kLines
kLineStrip
kLinesAdjacency
}
;
static
constexpr
int
kNumGrPrimitiveTypes
=
(
int
)
GrPrimitiveType
:
:
kLinesAdjacency
+
1
;
static
constexpr
bool
GrIsPrimTypeLines
(
GrPrimitiveType
type
)
{
return
GrPrimitiveType
:
:
kLines
=
=
type
|
|
GrPrimitiveType
:
:
kLineStrip
=
=
type
|
|
GrPrimitiveType
:
:
kLinesAdjacency
=
=
type
;
}
static
constexpr
bool
GrIsPrimTypeTris
(
GrPrimitiveType
type
)
{
return
GrPrimitiveType
:
:
kTriangles
=
=
type
|
|
GrPrimitiveType
:
:
kTriangleStrip
=
=
type
;
}
static
constexpr
bool
GrPrimTypeRequiresGeometryShaderSupport
(
GrPrimitiveType
type
)
{
return
GrPrimitiveType
:
:
kLinesAdjacency
=
=
type
;
}
enum
class
GrPrimitiveRestart
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
GrMaskFormat
{
kA8_GrMaskFormat
kA565_GrMaskFormat
kARGB_GrMaskFormat
kLast_GrMaskFormat
=
kARGB_GrMaskFormat
}
;
static
const
int
kMaskFormatCount
=
kLast_GrMaskFormat
+
1
;
static
inline
int
GrMaskFormatBytesPerPixel
(
GrMaskFormat
format
)
{
SkASSERT
(
format
<
kMaskFormatCount
)
;
static
const
int
sBytesPerPixel
[
]
=
{
1
2
4
}
;
static_assert
(
SK_ARRAY_COUNT
(
sBytesPerPixel
)
=
=
kMaskFormatCount
"
array_size_mismatch
"
)
;
static_assert
(
kA8_GrMaskFormat
=
=
0
"
enum_order_dependency
"
)
;
static_assert
(
kA565_GrMaskFormat
=
=
1
"
enum_order_dependency
"
)
;
static_assert
(
kARGB_GrMaskFormat
=
=
2
"
enum_order_dependency
"
)
;
return
sBytesPerPixel
[
(
int
)
format
]
;
}
enum
GrSurfaceFlags
{
kNone_GrSurfaceFlags
=
0x0
kRenderTarget_GrSurfaceFlag
=
0x1
kPerformInitialClear_GrSurfaceFlag
=
0x2
}
;
GR_MAKE_BITFIELD_OPS
(
GrSurfaceFlags
)
typedef
GrSurfaceFlags
GrSurfaceDescFlags
;
struct
GrSurfaceDesc
{
GrSurfaceDesc
(
)
:
fFlags
(
kNone_GrSurfaceFlags
)
fWidth
(
0
)
fHeight
(
0
)
fConfig
(
kUnknown_GrPixelConfig
)
fSampleCnt
(
1
)
{
}
GrSurfaceDescFlags
fFlags
;
int
fWidth
;
int
fHeight
;
GrPixelConfig
fConfig
;
int
fSampleCnt
;
}
;
enum
GrWrapOwnership
{
kBorrow_GrWrapOwnership
kAdopt_GrWrapOwnership
}
;
enum
class
GrWrapCacheable
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
class
GrBudgetedType
:
uint8_t
{
kBudgeted
kUnbudgetedUncacheable
kUnbudgetedCacheable
}
;
enum
GrClipType
{
kRect_ClipType
kPath_ClipType
}
;
enum
class
GrScissorTest
:
bool
{
kDisabled
=
false
kEnabled
=
true
}
;
struct
GrMipLevel
{
const
void
*
fPixels
=
nullptr
;
size_t
fRowBytes
=
0
;
}
;
enum
class
GrLoadOp
{
kLoad
kClear
kDiscard
}
;
enum
class
GrStoreOp
{
kStore
kDiscard
}
;
enum
class
GrAA
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
class
GrAAType
:
unsigned
{
kNone
kCoverage
kMSAA
kMixedSamples
}
;
static
inline
bool
GrAATypeIsHW
(
GrAAType
type
)
{
switch
(
type
)
{
case
GrAAType
:
:
kNone
:
return
false
;
case
GrAAType
:
:
kCoverage
:
return
false
;
case
GrAAType
:
:
kMSAA
:
return
true
;
case
GrAAType
:
:
kMixedSamples
:
return
true
;
}
SK_ABORT
(
"
Unknown
AA
Type
"
)
;
return
false
;
}
enum
class
GrFSAAType
{
kNone
kUnifiedMSAA
kMixedSamples
}
;
enum
class
GrAllowMixedSamples
:
bool
{
kNo
=
false
kYes
=
true
}
;
GrAAType
GrChooseAAType
(
GrAA
GrFSAAType
GrAllowMixedSamples
const
GrCaps
&
)
;
enum
class
GrQuadAAFlags
{
kLeft
=
SkCanvas
:
:
kLeft_QuadAAFlag
kTop
=
SkCanvas
:
:
kTop_QuadAAFlag
kRight
=
SkCanvas
:
:
kRight_QuadAAFlag
kBottom
=
SkCanvas
:
:
kBottom_QuadAAFlag
kNone
=
SkCanvas
:
:
kNone_QuadAAFlags
kAll
=
SkCanvas
:
:
kAll_QuadAAFlags
}
;
GR_MAKE_BITFIELD_CLASS_OPS
(
GrQuadAAFlags
)
static
inline
GrQuadAAFlags
SkToGrQuadAAFlags
(
unsigned
flags
)
{
return
static_cast
<
GrQuadAAFlags
>
(
flags
)
;
}
enum
GrSLType
{
kVoid_GrSLType
kBool_GrSLType
kByte_GrSLType
kByte2_GrSLType
kByte3_GrSLType
kByte4_GrSLType
kUByte_GrSLType
kUByte2_GrSLType
kUByte3_GrSLType
kUByte4_GrSLType
kShort_GrSLType
kShort2_GrSLType
kShort3_GrSLType
kShort4_GrSLType
kUShort_GrSLType
kUShort2_GrSLType
kUShort3_GrSLType
kUShort4_GrSLType
kFloat_GrSLType
kFloat2_GrSLType
kFloat3_GrSLType
kFloat4_GrSLType
kFloat2x2_GrSLType
kFloat3x3_GrSLType
kFloat4x4_GrSLType
kHalf_GrSLType
kHalf2_GrSLType
kHalf3_GrSLType
kHalf4_GrSLType
kHalf2x2_GrSLType
kHalf3x3_GrSLType
kHalf4x4_GrSLType
kInt_GrSLType
kInt2_GrSLType
kInt3_GrSLType
kInt4_GrSLType
kUint_GrSLType
kUint2_GrSLType
kTexture2DSampler_GrSLType
kTextureExternalSampler_GrSLType
kTexture2DRectSampler_GrSLType
kLast_GrSLType
=
kTexture2DRectSampler_GrSLType
}
;
static
const
int
kGrSLTypeCount
=
kLast_GrSLType
+
1
;
enum
class
GrTextureType
{
k2D
kRectangle
kExternal
}
;
enum
GrShaderType
{
kVertex_GrShaderType
kGeometry_GrShaderType
kFragment_GrShaderType
kLastkFragment_GrShaderType
=
kFragment_GrShaderType
}
;
static
const
int
kGrShaderTypeCount
=
kLastkFragment_GrShaderType
+
1
;
enum
GrShaderFlags
{
kNone_GrShaderFlags
=
0
kVertex_GrShaderFlag
=
1
<
<
kVertex_GrShaderType
kGeometry_GrShaderFlag
=
1
<
<
kGeometry_GrShaderType
kFragment_GrShaderFlag
=
1
<
<
kFragment_GrShaderType
}
;
GR_MAKE_BITFIELD_OPS
(
GrShaderFlags
)
enum
GrSLPrecision
:
int
{
kLow_GrSLPrecision
kMedium_GrSLPrecision
kHigh_GrSLPrecision
kDefault_GrSLPrecision
kLast_GrSLPrecision
=
kHigh_GrSLPrecision
}
;
static
const
int
kGrSLPrecisionCount
=
kLast_GrSLPrecision
+
1
;
static
inline
bool
GrSLTypeIsFloatType
(
GrSLType
type
)
{
switch
(
type
)
{
case
kFloat_GrSLType
:
case
kFloat2_GrSLType
:
case
kFloat3_GrSLType
:
case
kFloat4_GrSLType
:
case
kFloat2x2_GrSLType
:
case
kFloat3x3_GrSLType
:
case
kFloat4x4_GrSLType
:
case
kHalf_GrSLType
:
case
kHalf2_GrSLType
:
case
kHalf3_GrSLType
:
case
kHalf4_GrSLType
:
case
kHalf2x2_GrSLType
:
case
kHalf3x3_GrSLType
:
case
kHalf4x4_GrSLType
:
return
true
;
case
kVoid_GrSLType
:
case
kTexture2DSampler_GrSLType
:
case
kTextureExternalSampler_GrSLType
:
case
kTexture2DRectSampler_GrSLType
:
case
kBool_GrSLType
:
case
kByte_GrSLType
:
case
kByte2_GrSLType
:
case
kByte3_GrSLType
:
case
kByte4_GrSLType
:
case
kUByte_GrSLType
:
case
kUByte2_GrSLType
:
case
kUByte3_GrSLType
:
case
kUByte4_GrSLType
:
case
kShort_GrSLType
:
case
kShort2_GrSLType
:
case
kShort3_GrSLType
:
case
kShort4_GrSLType
:
case
kUShort_GrSLType
:
case
kUShort2_GrSLType
:
case
kUShort3_GrSLType
:
case
kUShort4_GrSLType
:
case
kInt_GrSLType
:
case
kInt2_GrSLType
:
case
kInt3_GrSLType
:
case
kInt4_GrSLType
:
case
kUint_GrSLType
:
case
kUint2_GrSLType
:
return
false
;
}
SK_ABORT
(
"
Unexpected
type
"
)
;
return
false
;
}
static
inline
int
GrSLTypeVecLength
(
GrSLType
type
)
{
switch
(
type
)
{
case
kFloat_GrSLType
:
case
kHalf_GrSLType
:
case
kBool_GrSLType
:
case
kByte_GrSLType
:
case
kUByte_GrSLType
:
case
kShort_GrSLType
:
case
kUShort_GrSLType
:
case
kInt_GrSLType
:
case
kUint_GrSLType
:
return
1
;
case
kFloat2_GrSLType
:
case
kHalf2_GrSLType
:
case
kByte2_GrSLType
:
case
kUByte2_GrSLType
:
case
kShort2_GrSLType
:
case
kUShort2_GrSLType
:
case
kInt2_GrSLType
:
case
kUint2_GrSLType
:
return
2
;
case
kFloat3_GrSLType
:
case
kHalf3_GrSLType
:
case
kByte3_GrSLType
:
case
kUByte3_GrSLType
:
case
kShort3_GrSLType
:
case
kUShort3_GrSLType
:
case
kInt3_GrSLType
:
return
3
;
case
kFloat4_GrSLType
:
case
kHalf4_GrSLType
:
case
kByte4_GrSLType
:
case
kUByte4_GrSLType
:
case
kShort4_GrSLType
:
case
kUShort4_GrSLType
:
case
kInt4_GrSLType
:
return
4
;
case
kFloat2x2_GrSLType
:
case
kFloat3x3_GrSLType
:
case
kFloat4x4_GrSLType
:
case
kHalf2x2_GrSLType
:
case
kHalf3x3_GrSLType
:
case
kHalf4x4_GrSLType
:
case
kVoid_GrSLType
:
case
kTexture2DSampler_GrSLType
:
case
kTextureExternalSampler_GrSLType
:
case
kTexture2DRectSampler_GrSLType
:
return
-
1
;
}
SK_ABORT
(
"
Unexpected
type
"
)
;
return
-
1
;
}
static
inline
GrSLType
GrSLCombinedSamplerTypeForTextureType
(
GrTextureType
type
)
{
switch
(
type
)
{
case
GrTextureType
:
:
k2D
:
return
kTexture2DSampler_GrSLType
;
case
GrTextureType
:
:
kRectangle
:
return
kTexture2DRectSampler_GrSLType
;
case
GrTextureType
:
:
kExternal
:
return
kTextureExternalSampler_GrSLType
;
}
SK_ABORT
(
"
Unexpected
texture
type
"
)
;
return
kTexture2DSampler_GrSLType
;
}
static
inline
bool
GrTextureTypeHasRestrictedSampling
(
GrTextureType
type
)
{
switch
(
type
)
{
case
GrTextureType
:
:
k2D
:
return
false
;
case
GrTextureType
:
:
kRectangle
:
return
true
;
case
GrTextureType
:
:
kExternal
:
return
true
;
}
SK_ABORT
(
"
Unexpected
texture
type
"
)
;
return
false
;
}
static
inline
bool
GrSLTypeIsCombinedSamplerType
(
GrSLType
type
)
{
switch
(
type
)
{
case
kTexture2DSampler_GrSLType
:
case
kTextureExternalSampler_GrSLType
:
case
kTexture2DRectSampler_GrSLType
:
return
true
;
case
kVoid_GrSLType
:
case
kFloat_GrSLType
:
case
kFloat2_GrSLType
:
case
kFloat3_GrSLType
:
case
kFloat4_GrSLType
:
case
kFloat2x2_GrSLType
:
case
kFloat3x3_GrSLType
:
case
kFloat4x4_GrSLType
:
case
kHalf_GrSLType
:
case
kHalf2_GrSLType
:
case
kHalf3_GrSLType
:
case
kHalf4_GrSLType
:
case
kHalf2x2_GrSLType
:
case
kHalf3x3_GrSLType
:
case
kHalf4x4_GrSLType
:
case
kInt_GrSLType
:
case
kInt2_GrSLType
:
case
kInt3_GrSLType
:
case
kInt4_GrSLType
:
case
kUint_GrSLType
:
case
kUint2_GrSLType
:
case
kBool_GrSLType
:
case
kByte_GrSLType
:
case
kByte2_GrSLType
:
case
kByte3_GrSLType
:
case
kByte4_GrSLType
:
case
kUByte_GrSLType
:
case
kUByte2_GrSLType
:
case
kUByte3_GrSLType
:
case
kUByte4_GrSLType
:
case
kShort_GrSLType
:
case
kShort2_GrSLType
:
case
kShort3_GrSLType
:
case
kShort4_GrSLType
:
case
kUShort_GrSLType
:
case
kUShort2_GrSLType
:
case
kUShort3_GrSLType
:
case
kUShort4_GrSLType
:
return
false
;
}
SK_ABORT
(
"
Unexpected
type
"
)
;
return
false
;
}
static
inline
bool
GrSLTypeAcceptsPrecision
(
GrSLType
type
)
{
switch
(
type
)
{
case
kTexture2DSampler_GrSLType
:
case
kTextureExternalSampler_GrSLType
:
case
kTexture2DRectSampler_GrSLType
:
return
true
;
case
kVoid_GrSLType
:
case
kBool_GrSLType
:
case
kByte_GrSLType
:
case
kByte2_GrSLType
:
case
kByte3_GrSLType
:
case
kByte4_GrSLType
:
case
kUByte_GrSLType
:
case
kUByte2_GrSLType
:
case
kUByte3_GrSLType
:
case
kUByte4_GrSLType
:
case
kShort_GrSLType
:
case
kShort2_GrSLType
:
case
kShort3_GrSLType
:
case
kShort4_GrSLType
:
case
kUShort_GrSLType
:
case
kUShort2_GrSLType
:
case
kUShort3_GrSLType
:
case
kUShort4_GrSLType
:
case
kFloat_GrSLType
:
case
kFloat2_GrSLType
:
case
kFloat3_GrSLType
:
case
kFloat4_GrSLType
:
case
kFloat2x2_GrSLType
:
case
kFloat3x3_GrSLType
:
case
kFloat4x4_GrSLType
:
case
kHalf_GrSLType
:
case
kHalf2_GrSLType
:
case
kHalf3_GrSLType
:
case
kHalf4_GrSLType
:
case
kHalf2x2_GrSLType
:
case
kHalf3x3_GrSLType
:
case
kHalf4x4_GrSLType
:
case
kInt_GrSLType
:
case
kInt2_GrSLType
:
case
kInt3_GrSLType
:
case
kInt4_GrSLType
:
case
kUint_GrSLType
:
case
kUint2_GrSLType
:
return
false
;
}
SK_ABORT
(
"
Unexpected
type
"
)
;
return
false
;
}
static
inline
bool
GrSLTypeTemporarilyAcceptsPrecision
(
GrSLType
type
)
{
switch
(
type
)
{
case
kShort_GrSLType
:
case
kUShort_GrSLType
:
case
kFloat_GrSLType
:
case
kFloat2_GrSLType
:
case
kFloat3_GrSLType
:
case
kFloat4_GrSLType
:
case
kFloat2x2_GrSLType
:
case
kFloat3x3_GrSLType
:
case
kFloat4x4_GrSLType
:
case
kHalf_GrSLType
:
case
kHalf2_GrSLType
:
case
kHalf3_GrSLType
:
case
kHalf4_GrSLType
:
case
kHalf2x2_GrSLType
:
case
kHalf3x3_GrSLType
:
case
kHalf4x4_GrSLType
:
case
kInt_GrSLType
:
case
kInt2_GrSLType
:
case
kInt3_GrSLType
:
case
kInt4_GrSLType
:
case
kUint_GrSLType
:
case
kUint2_GrSLType
:
case
kTexture2DSampler_GrSLType
:
case
kTextureExternalSampler_GrSLType
:
case
kTexture2DRectSampler_GrSLType
:
return
true
;
case
kVoid_GrSLType
:
case
kBool_GrSLType
:
case
kByte_GrSLType
:
case
kByte2_GrSLType
:
case
kByte3_GrSLType
:
case
kByte4_GrSLType
:
case
kUByte_GrSLType
:
case
kUByte2_GrSLType
:
case
kUByte3_GrSLType
:
case
kUByte4_GrSLType
:
case
kShort2_GrSLType
:
case
kShort3_GrSLType
:
case
kShort4_GrSLType
:
case
kUShort2_GrSLType
:
case
kUShort3_GrSLType
:
case
kUShort4_GrSLType
:
return
false
;
}
SK_ABORT
(
"
Unexpected
type
"
)
;
return
false
;
}
enum
GrVertexAttribType
{
kFloat_GrVertexAttribType
=
0
kFloat2_GrVertexAttribType
kFloat3_GrVertexAttribType
kFloat4_GrVertexAttribType
kHalf_GrVertexAttribType
kHalf2_GrVertexAttribType
kHalf3_GrVertexAttribType
kHalf4_GrVertexAttribType
kInt2_GrVertexAttribType
kInt3_GrVertexAttribType
kInt4_GrVertexAttribType
kByte_GrVertexAttribType
kByte2_GrVertexAttribType
kByte3_GrVertexAttribType
kByte4_GrVertexAttribType
kUByte_GrVertexAttribType
kUByte2_GrVertexAttribType
kUByte3_GrVertexAttribType
kUByte4_GrVertexAttribType
kUByte_norm_GrVertexAttribType
kUByte4_norm_GrVertexAttribType
kShort2_GrVertexAttribType
kShort4_GrVertexAttribType
kUShort2_GrVertexAttribType
kUShort2_norm_GrVertexAttribType
kInt_GrVertexAttribType
kUint_GrVertexAttribType
kLast_GrVertexAttribType
=
kUint_GrVertexAttribType
}
;
static
const
int
kGrVertexAttribTypeCount
=
kLast_GrVertexAttribType
+
1
;
static
const
int
kGrClipEdgeTypeCnt
=
(
int
)
GrClipEdgeType
:
:
kLast
+
1
;
static
inline
bool
GrProcessorEdgeTypeIsFill
(
const
GrClipEdgeType
edgeType
)
{
return
(
GrClipEdgeType
:
:
kFillAA
=
=
edgeType
|
|
GrClipEdgeType
:
:
kFillBW
=
=
edgeType
)
;
}
static
inline
bool
GrProcessorEdgeTypeIsInverseFill
(
const
GrClipEdgeType
edgeType
)
{
return
(
GrClipEdgeType
:
:
kInverseFillAA
=
=
edgeType
|
|
GrClipEdgeType
:
:
kInverseFillBW
=
=
edgeType
)
;
}
static
inline
bool
GrProcessorEdgeTypeIsAA
(
const
GrClipEdgeType
edgeType
)
{
return
(
GrClipEdgeType
:
:
kFillBW
!
=
edgeType
&
&
GrClipEdgeType
:
:
kInverseFillBW
!
=
edgeType
)
;
}
static
inline
GrClipEdgeType
GrInvertProcessorEdgeType
(
const
GrClipEdgeType
edgeType
)
{
switch
(
edgeType
)
{
case
GrClipEdgeType
:
:
kFillBW
:
return
GrClipEdgeType
:
:
kInverseFillBW
;
case
GrClipEdgeType
:
:
kFillAA
:
return
GrClipEdgeType
:
:
kInverseFillAA
;
case
GrClipEdgeType
:
:
kInverseFillBW
:
return
GrClipEdgeType
:
:
kFillBW
;
case
GrClipEdgeType
:
:
kInverseFillAA
:
return
GrClipEdgeType
:
:
kFillAA
;
case
GrClipEdgeType
:
:
kHairlineAA
:
SK_ABORT
(
"
Hairline
fill
isn
'
t
invertible
.
"
)
;
}
return
GrClipEdgeType
:
:
kFillAA
;
}
enum
GrIOType
{
kRead_GrIOType
kWrite_GrIOType
kRW_GrIOType
}
;
enum
class
GrGpuBufferType
{
kVertex
kIndex
kXferCpuToGpu
kXferGpuToCpu
}
;
static
const
int
kGrGpuBufferTypeCount
=
static_cast
<
int
>
(
GrGpuBufferType
:
:
kXferGpuToCpu
)
+
1
;
enum
GrAccessPattern
{
kDynamic_GrAccessPattern
kStatic_GrAccessPattern
kStream_GrAccessPattern
kLast_GrAccessPattern
=
kStream_GrAccessPattern
}
;
enum
class
GrInternalSurfaceFlags
{
kNone
=
0
kNoPendingIO
=
1
<
<
0
kSurfaceMask
=
kNoPendingIO
kReadOnly
=
1
<
<
1
kTextureMask
=
kReadOnly
kMixedSampled
=
1
<
<
2
kGLRTFBOIDIs0
=
1
<
<
3
kRenderTargetMask
=
kMixedSampled
|
kGLRTFBOIDIs0
}
;
GR_MAKE_BITFIELD_CLASS_OPS
(
GrInternalSurfaceFlags
)
#
ifdef
SK_DEBUG
#
define
GrCapsDebugf
(
caps
.
.
.
)
if
(
!
(
caps
)
-
>
suppressPrints
(
)
)
SkDebugf
(
__VA_ARGS__
)
#
else
#
define
GrCapsDebugf
(
caps
.
.
.
)
do
{
}
while
(
0
)
#
endif
enum
class
GrBackendObjectOwnership
:
bool
{
kBorrowed
=
false
kOwned
=
true
}
;
template
<
typename
T
>
T
*
const
*
unique_ptr_address_as_pointer_address
(
std
:
:
unique_ptr
<
T
>
const
*
up
)
{
static_assert
(
sizeof
(
T
*
)
=
=
sizeof
(
std
:
:
unique_ptr
<
T
>
)
"
unique_ptr
not
expected
size
.
"
)
;
return
reinterpret_cast
<
T
*
const
*
>
(
up
)
;
}
typedef
uint64_t
GrFence
;
enum
class
GpuPathRenderers
{
kNone
=
0
kDashLine
=
1
<
<
0
kStencilAndCover
=
1
<
<
1
kCoverageCounting
=
1
<
<
2
kAAHairline
=
1
<
<
3
kAAConvex
=
1
<
<
4
kAALinearizing
=
1
<
<
5
kSmall
=
1
<
<
6
kTessellating
=
1
<
<
7
kAll
=
(
kTessellating
|
(
kTessellating
-
1
)
)
}
;
enum
class
GrMipMapsStatus
{
kNotAllocated
kDirty
kValid
}
;
GR_MAKE_BITFIELD_CLASS_OPS
(
GpuPathRenderers
)
enum
class
GrSRGBEncoded
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
class
GrSRGBConversion
{
kNone
kSRGBToLinear
kLinearToSRGB
}
;
static
inline
GrSRGBEncoded
GrPixelConfigIsSRGBEncoded
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kSRGBA_8888_GrPixelConfig
:
case
kSBGRA_8888_GrPixelConfig
:
return
GrSRGBEncoded
:
:
kYes
;
case
kUnknown_GrPixelConfig
:
case
kAlpha_8_GrPixelConfig
:
case
kAlpha_8_as_Alpha_GrPixelConfig
:
case
kAlpha_8_as_Red_GrPixelConfig
:
case
kGray_8_GrPixelConfig
:
case
kGray_8_as_Lum_GrPixelConfig
:
case
kGray_8_as_Red_GrPixelConfig
:
case
kRGB_565_GrPixelConfig
:
case
kRGBA_4444_GrPixelConfig
:
case
kRGB_888_GrPixelConfig
:
case
kRGB_888X_GrPixelConfig
:
case
kRG_88_GrPixelConfig
:
case
kRGBA_8888_GrPixelConfig
:
case
kBGRA_8888_GrPixelConfig
:
case
kRGBA_1010102_GrPixelConfig
:
case
kRGBA_float_GrPixelConfig
:
case
kRG_float_GrPixelConfig
:
case
kAlpha_half_GrPixelConfig
:
case
kAlpha_half_as_Red_GrPixelConfig
:
case
kRGBA_half_GrPixelConfig
:
case
kRGB_ETC1_GrPixelConfig
:
return
GrSRGBEncoded
:
:
kNo
;
}
SK_ABORT
(
"
Invalid
pixel
config
"
)
;
return
GrSRGBEncoded
:
:
kNo
;
}
static
inline
bool
GrPixelConfigIsSRGB
(
GrPixelConfig
config
)
{
return
GrSRGBEncoded
:
:
kYes
=
=
GrPixelConfigIsSRGBEncoded
(
config
)
;
}
static
inline
size_t
GrBytesPerPixel
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kAlpha_8_GrPixelConfig
:
case
kAlpha_8_as_Alpha_GrPixelConfig
:
case
kAlpha_8_as_Red_GrPixelConfig
:
case
kGray_8_GrPixelConfig
:
case
kGray_8_as_Lum_GrPixelConfig
:
case
kGray_8_as_Red_GrPixelConfig
:
return
1
;
case
kRGB_565_GrPixelConfig
:
case
kRGBA_4444_GrPixelConfig
:
case
kRG_88_GrPixelConfig
:
case
kAlpha_half_GrPixelConfig
:
case
kAlpha_half_as_Red_GrPixelConfig
:
return
2
;
case
kRGBA_8888_GrPixelConfig
:
case
kRGB_888_GrPixelConfig
:
case
kRGB_888X_GrPixelConfig
:
case
kBGRA_8888_GrPixelConfig
:
case
kSRGBA_8888_GrPixelConfig
:
case
kSBGRA_8888_GrPixelConfig
:
case
kRGBA_1010102_GrPixelConfig
:
return
4
;
case
kRGBA_half_GrPixelConfig
:
return
8
;
case
kRGBA_float_GrPixelConfig
:
return
16
;
case
kRG_float_GrPixelConfig
:
return
8
;
case
kUnknown_GrPixelConfig
:
case
kRGB_ETC1_GrPixelConfig
:
return
0
;
}
SK_ABORT
(
"
Invalid
pixel
config
"
)
;
return
0
;
}
static
inline
bool
GrPixelConfigIsOpaque
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kRGB_565_GrPixelConfig
:
case
kRGB_888_GrPixelConfig
:
case
kRGB_888X_GrPixelConfig
:
case
kRG_88_GrPixelConfig
:
case
kGray_8_GrPixelConfig
:
case
kGray_8_as_Lum_GrPixelConfig
:
case
kGray_8_as_Red_GrPixelConfig
:
case
kRG_float_GrPixelConfig
:
case
kRGB_ETC1_GrPixelConfig
:
return
true
;
case
kAlpha_8_GrPixelConfig
:
case
kAlpha_8_as_Alpha_GrPixelConfig
:
case
kAlpha_8_as_Red_GrPixelConfig
:
case
kRGBA_4444_GrPixelConfig
:
case
kAlpha_half_GrPixelConfig
:
case
kAlpha_half_as_Red_GrPixelConfig
:
case
kRGBA_8888_GrPixelConfig
:
case
kBGRA_8888_GrPixelConfig
:
case
kSRGBA_8888_GrPixelConfig
:
case
kSBGRA_8888_GrPixelConfig
:
case
kRGBA_1010102_GrPixelConfig
:
case
kRGBA_half_GrPixelConfig
:
case
kRGBA_float_GrPixelConfig
:
case
kUnknown_GrPixelConfig
:
return
false
;
}
SK_ABORT
(
"
Invalid
pixel
config
"
)
;
return
false
;
}
static
inline
bool
GrPixelConfigIsAlphaOnly
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kAlpha_8_GrPixelConfig
:
case
kAlpha_8_as_Alpha_GrPixelConfig
:
case
kAlpha_8_as_Red_GrPixelConfig
:
case
kAlpha_half_GrPixelConfig
:
case
kAlpha_half_as_Red_GrPixelConfig
:
return
true
;
case
kUnknown_GrPixelConfig
:
case
kGray_8_GrPixelConfig
:
case
kGray_8_as_Lum_GrPixelConfig
:
case
kGray_8_as_Red_GrPixelConfig
:
case
kRGB_565_GrPixelConfig
:
case
kRGBA_4444_GrPixelConfig
:
case
kRGBA_8888_GrPixelConfig
:
case
kRGB_888_GrPixelConfig
:
case
kRGB_888X_GrPixelConfig
:
case
kRG_88_GrPixelConfig
:
case
kBGRA_8888_GrPixelConfig
:
case
kSRGBA_8888_GrPixelConfig
:
case
kSBGRA_8888_GrPixelConfig
:
case
kRGBA_1010102_GrPixelConfig
:
case
kRGBA_float_GrPixelConfig
:
case
kRG_float_GrPixelConfig
:
case
kRGBA_half_GrPixelConfig
:
case
kRGB_ETC1_GrPixelConfig
:
return
false
;
}
SK_ABORT
(
"
Invalid
pixel
config
.
"
)
;
return
false
;
}
static
inline
bool
GrPixelConfigIsFloatingPoint
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kUnknown_GrPixelConfig
:
case
kAlpha_8_GrPixelConfig
:
case
kAlpha_8_as_Alpha_GrPixelConfig
:
case
kAlpha_8_as_Red_GrPixelConfig
:
case
kGray_8_GrPixelConfig
:
case
kGray_8_as_Lum_GrPixelConfig
:
case
kGray_8_as_Red_GrPixelConfig
:
case
kRGB_565_GrPixelConfig
:
case
kRGBA_4444_GrPixelConfig
:
case
kRGB_888_GrPixelConfig
:
case
kRGB_888X_GrPixelConfig
:
case
kRG_88_GrPixelConfig
:
case
kRGBA_8888_GrPixelConfig
:
case
kBGRA_8888_GrPixelConfig
:
case
kSRGBA_8888_GrPixelConfig
:
case
kSBGRA_8888_GrPixelConfig
:
case
kRGBA_1010102_GrPixelConfig
:
case
kRGB_ETC1_GrPixelConfig
:
return
false
;
case
kRGBA_float_GrPixelConfig
:
case
kRG_float_GrPixelConfig
:
case
kAlpha_half_GrPixelConfig
:
case
kAlpha_half_as_Red_GrPixelConfig
:
case
kRGBA_half_GrPixelConfig
:
return
true
;
}
SK_ABORT
(
"
Invalid
pixel
config
.
"
)
;
return
false
;
}
static
inline
bool
GrPixelConfigIsCompressed
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kRGB_ETC1_GrPixelConfig
:
return
true
;
case
kUnknown_GrPixelConfig
:
case
kAlpha_8_GrPixelConfig
:
case
kAlpha_8_as_Alpha_GrPixelConfig
:
case
kAlpha_8_as_Red_GrPixelConfig
:
case
kGray_8_GrPixelConfig
:
case
kGray_8_as_Lum_GrPixelConfig
:
case
kGray_8_as_Red_GrPixelConfig
:
case
kRGB_565_GrPixelConfig
:
case
kRGBA_4444_GrPixelConfig
:
case
kRGB_888_GrPixelConfig
:
case
kRGB_888X_GrPixelConfig
:
case
kRG_88_GrPixelConfig
:
case
kRGBA_8888_GrPixelConfig
:
case
kBGRA_8888_GrPixelConfig
:
case
kSRGBA_8888_GrPixelConfig
:
case
kSBGRA_8888_GrPixelConfig
:
case
kRGBA_1010102_GrPixelConfig
:
case
kRGBA_float_GrPixelConfig
:
case
kRG_float_GrPixelConfig
:
case
kAlpha_half_GrPixelConfig
:
case
kAlpha_half_as_Red_GrPixelConfig
:
case
kRGBA_half_GrPixelConfig
:
return
false
;
}
SK_ABORT
(
"
Invalid
pixel
config
"
)
;
return
false
;
}
static
inline
GrPixelConfig
GrMakePixelConfigUncompressed
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kRGB_ETC1_GrPixelConfig
:
return
kRGBA_8888_GrPixelConfig
;
case
kUnknown_GrPixelConfig
:
case
kAlpha_8_GrPixelConfig
:
case
kAlpha_8_as_Alpha_GrPixelConfig
:
case
kAlpha_8_as_Red_GrPixelConfig
:
case
kGray_8_GrPixelConfig
:
case
kGray_8_as_Lum_GrPixelConfig
:
case
kGray_8_as_Red_GrPixelConfig
:
case
kRGB_565_GrPixelConfig
:
case
kRGBA_4444_GrPixelConfig
:
case
kRGB_888_GrPixelConfig
:
case
kRGB_888X_GrPixelConfig
:
case
kRG_88_GrPixelConfig
:
case
kRGBA_8888_GrPixelConfig
:
case
kBGRA_8888_GrPixelConfig
:
case
kSRGBA_8888_GrPixelConfig
:
case
kSBGRA_8888_GrPixelConfig
:
case
kRGBA_1010102_GrPixelConfig
:
case
kRGBA_float_GrPixelConfig
:
case
kRG_float_GrPixelConfig
:
case
kAlpha_half_GrPixelConfig
:
case
kAlpha_half_as_Red_GrPixelConfig
:
case
kRGBA_half_GrPixelConfig
:
return
config
;
}
SK_ABORT
(
"
Invalid
pixel
config
"
)
;
return
config
;
}
static
inline
size_t
GrCompressedFormatDataSize
(
GrPixelConfig
config
int
width
int
height
)
{
SkASSERT
(
GrPixelConfigIsCompressed
(
config
)
)
;
switch
(
config
)
{
case
kRGB_ETC1_GrPixelConfig
:
SkASSERT
(
(
width
&
3
)
=
=
0
)
;
SkASSERT
(
(
height
&
3
)
=
=
0
)
;
return
(
width
>
>
2
)
*
(
height
>
>
2
)
*
8
;
case
kUnknown_GrPixelConfig
:
case
kAlpha_8_GrPixelConfig
:
case
kAlpha_8_as_Alpha_GrPixelConfig
:
case
kAlpha_8_as_Red_GrPixelConfig
:
case
kGray_8_GrPixelConfig
:
case
kGray_8_as_Lum_GrPixelConfig
:
case
kGray_8_as_Red_GrPixelConfig
:
case
kRGB_565_GrPixelConfig
:
case
kRGBA_4444_GrPixelConfig
:
case
kRGB_888_GrPixelConfig
:
case
kRGB_888X_GrPixelConfig
:
case
kRG_88_GrPixelConfig
:
case
kRGBA_8888_GrPixelConfig
:
case
kBGRA_8888_GrPixelConfig
:
case
kSRGBA_8888_GrPixelConfig
:
case
kSBGRA_8888_GrPixelConfig
:
case
kRGBA_1010102_GrPixelConfig
:
case
kRGBA_float_GrPixelConfig
:
case
kRG_float_GrPixelConfig
:
case
kAlpha_half_GrPixelConfig
:
case
kAlpha_half_as_Red_GrPixelConfig
:
case
kRGBA_half_GrPixelConfig
:
SK_ABORT
(
"
Unknown
compressed
pixel
config
"
)
;
return
4
*
width
*
height
;
}
SK_ABORT
(
"
Invalid
pixel
config
"
)
;
return
4
*
width
*
height
;
}
static
inline
GrSLPrecision
GrSLSamplerPrecision
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kUnknown_GrPixelConfig
:
case
kAlpha_8_GrPixelConfig
:
case
kAlpha_8_as_Alpha_GrPixelConfig
:
case
kAlpha_8_as_Red_GrPixelConfig
:
case
kGray_8_GrPixelConfig
:
case
kGray_8_as_Lum_GrPixelConfig
:
case
kGray_8_as_Red_GrPixelConfig
:
case
kRGB_565_GrPixelConfig
:
case
kRGBA_4444_GrPixelConfig
:
case
kRGBA_8888_GrPixelConfig
:
case
kRGB_888_GrPixelConfig
:
case
kRGB_888X_GrPixelConfig
:
case
kRG_88_GrPixelConfig
:
case
kBGRA_8888_GrPixelConfig
:
case
kSRGBA_8888_GrPixelConfig
:
case
kSBGRA_8888_GrPixelConfig
:
case
kRGB_ETC1_GrPixelConfig
:
return
kLow_GrSLPrecision
;
case
kRGBA_float_GrPixelConfig
:
case
kRG_float_GrPixelConfig
:
return
kHigh_GrSLPrecision
;
case
kAlpha_half_GrPixelConfig
:
case
kAlpha_half_as_Red_GrPixelConfig
:
case
kRGBA_half_GrPixelConfig
:
case
kRGBA_1010102_GrPixelConfig
:
return
kMedium_GrSLPrecision
;
}
SK_ABORT
(
"
Unexpected
type
"
)
;
return
kHigh_GrSLPrecision
;
}
enum
class
GrColorType
{
kUnknown
kAlpha_8
kRGB_565
kABGR_4444
kRGBA_8888
kRGB_888x
kRG_88
kBGRA_8888
kRGBA_1010102
kGray_8
kAlpha_F16
kRGBA_F16
kRG_F32
kRGBA_F32
kRGB_ETC1
}
;
static
inline
SkColorType
GrColorTypeToSkColorType
(
GrColorType
ct
)
{
switch
(
ct
)
{
case
GrColorType
:
:
kUnknown
:
return
kUnknown_SkColorType
;
case
GrColorType
:
:
kAlpha_8
:
return
kAlpha_8_SkColorType
;
case
GrColorType
:
:
kRGB_565
:
return
kRGB_565_SkColorType
;
case
GrColorType
:
:
kABGR_4444
:
return
kARGB_4444_SkColorType
;
case
GrColorType
:
:
kRGBA_8888
:
return
kRGBA_8888_SkColorType
;
case
GrColorType
:
:
kRGB_888x
:
return
kRGB_888x_SkColorType
;
case
GrColorType
:
:
kRG_88
:
return
kUnknown_SkColorType
;
case
GrColorType
:
:
kBGRA_8888
:
return
kBGRA_8888_SkColorType
;
case
GrColorType
:
:
kRGBA_1010102
:
return
kRGBA_1010102_SkColorType
;
case
GrColorType
:
:
kGray_8
:
return
kGray_8_SkColorType
;
case
GrColorType
:
:
kAlpha_F16
:
return
kUnknown_SkColorType
;
case
GrColorType
:
:
kRGBA_F16
:
return
kRGBA_F16_SkColorType
;
case
GrColorType
:
:
kRG_F32
:
return
kUnknown_SkColorType
;
case
GrColorType
:
:
kRGBA_F32
:
return
kRGBA_F32_SkColorType
;
case
GrColorType
:
:
kRGB_ETC1
:
return
kUnknown_SkColorType
;
}
SK_ABORT
(
"
Invalid
GrColorType
"
)
;
return
kUnknown_SkColorType
;
}
static
inline
GrColorType
SkColorTypeToGrColorType
(
SkColorType
ct
)
{
switch
(
ct
)
{
case
kUnknown_SkColorType
:
return
GrColorType
:
:
kUnknown
;
case
kAlpha_8_SkColorType
:
return
GrColorType
:
:
kAlpha_8
;
case
kRGB_565_SkColorType
:
return
GrColorType
:
:
kRGB_565
;
case
kARGB_4444_SkColorType
:
return
GrColorType
:
:
kABGR_4444
;
case
kRGBA_8888_SkColorType
:
return
GrColorType
:
:
kRGBA_8888
;
case
kRGB_888x_SkColorType
:
return
GrColorType
:
:
kRGB_888x
;
case
kBGRA_8888_SkColorType
:
return
GrColorType
:
:
kBGRA_8888
;
case
kGray_8_SkColorType
:
return
GrColorType
:
:
kGray_8
;
case
kRGBA_F16Norm_SkColorType
:
return
GrColorType
:
:
kRGBA_F16
;
case
kRGBA_F16_SkColorType
:
return
GrColorType
:
:
kRGBA_F16
;
case
kRGBA_1010102_SkColorType
:
return
GrColorType
:
:
kRGBA_1010102
;
case
kRGB_101010x_SkColorType
:
return
GrColorType
:
:
kUnknown
;
case
kRGBA_F32_SkColorType
:
return
GrColorType
:
:
kRGBA_F32
;
}
SK_ABORT
(
"
Invalid
SkColorType
"
)
;
return
GrColorType
:
:
kUnknown
;
}
static
inline
uint32_t
GrColorTypeComponentFlags
(
GrColorType
ct
)
{
switch
(
ct
)
{
case
GrColorType
:
:
kUnknown
:
return
0
;
case
GrColorType
:
:
kAlpha_8
:
return
kAlpha_SkColorTypeComponentFlag
;
case
GrColorType
:
:
kRGB_565
:
return
kRGB_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kABGR_4444
:
return
kRGBA_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kRGBA_8888
:
return
kRGBA_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kRGB_888x
:
return
kRGB_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kRG_88
:
return
kRed_SkColorTypeComponentFlag
|
kGreen_SkColorTypeComponentFlag
;
case
GrColorType
:
:
kBGRA_8888
:
return
kRGBA_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kRGBA_1010102
:
return
kRGBA_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kGray_8
:
return
kGray_SkColorTypeComponentFlag
;
case
GrColorType
:
:
kAlpha_F16
:
return
kAlpha_SkColorTypeComponentFlag
;
case
GrColorType
:
:
kRGBA_F16
:
return
kRGBA_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kRG_F32
:
return
kRed_SkColorTypeComponentFlag
|
kGreen_SkColorTypeComponentFlag
;
case
GrColorType
:
:
kRGBA_F32
:
return
kRGBA_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kRGB_ETC1
:
return
kRGB_SkColorTypeComponentFlags
;
}
SK_ABORT
(
"
Invalid
GrColorType
"
)
;
return
kUnknown_SkColorType
;
}
static
inline
bool
GrColorTypeIsAlphaOnly
(
GrColorType
ct
)
{
return
kAlpha_SkColorTypeComponentFlag
=
=
GrColorTypeComponentFlags
(
ct
)
;
}
static
inline
bool
GrColorTypeHasAlpha
(
GrColorType
ct
)
{
return
kAlpha_SkColorTypeComponentFlag
&
GrColorTypeComponentFlags
(
ct
)
;
}
static
inline
int
GrColorTypeBytesPerPixel
(
GrColorType
ct
)
{
switch
(
ct
)
{
case
GrColorType
:
:
kUnknown
:
return
0
;
case
GrColorType
:
:
kRGB_ETC1
:
return
0
;
case
GrColorType
:
:
kAlpha_8
:
return
1
;
case
GrColorType
:
:
kRGB_565
:
return
2
;
case
GrColorType
:
:
kABGR_4444
:
return
2
;
case
GrColorType
:
:
kRGBA_8888
:
return
4
;
case
GrColorType
:
:
kRGB_888x
:
return
4
;
case
GrColorType
:
:
kRG_88
:
return
2
;
case
GrColorType
:
:
kBGRA_8888
:
return
4
;
case
GrColorType
:
:
kRGBA_1010102
:
return
4
;
case
GrColorType
:
:
kGray_8
:
return
1
;
case
GrColorType
:
:
kAlpha_F16
:
return
2
;
case
GrColorType
:
:
kRGBA_F16
:
return
8
;
case
GrColorType
:
:
kRG_F32
:
return
8
;
case
GrColorType
:
:
kRGBA_F32
:
return
16
;
}
SK_ABORT
(
"
Invalid
GrColorType
"
)
;
return
0
;
}
static
inline
GrColorType
GrPixelConfigToColorTypeAndEncoding
(
GrPixelConfig
config
GrSRGBEncoded
*
srgbEncoded
)
{
SkASSERT
(
srgbEncoded
)
;
switch
(
config
)
{
case
kUnknown_GrPixelConfig
:
return
GrColorType
:
:
kUnknown
;
case
kAlpha_8_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kAlpha_8
;
case
kGray_8_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kGray_8
;
case
kRGB_565_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kRGB_565
;
case
kRGBA_4444_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kABGR_4444
;
case
kRGBA_8888_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kRGBA_8888
;
case
kRGB_888_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kRGB_888x
;
case
kRGB_888X_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kRGB_888x
;
case
kRG_88_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kRG_88
;
case
kBGRA_8888_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kBGRA_8888
;
case
kSRGBA_8888_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kYes
;
return
GrColorType
:
:
kRGBA_8888
;
case
kSBGRA_8888_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kYes
;
return
GrColorType
:
:
kBGRA_8888
;
case
kRGBA_1010102_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kRGBA_1010102
;
case
kRGBA_float_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kRGBA_F32
;
case
kRG_float_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kRG_F32
;
case
kAlpha_half_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kAlpha_F16
;
case
kRGBA_half_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kRGBA_F16
;
case
kRGB_ETC1_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kRGB_ETC1
;
case
kAlpha_8_as_Alpha_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kAlpha_8
;
case
kAlpha_8_as_Red_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kAlpha_8
;
case
kAlpha_half_as_Red_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kAlpha_F16
;
case
kGray_8_as_Lum_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kGray_8
;
case
kGray_8_as_Red_GrPixelConfig
:
*
srgbEncoded
=
GrSRGBEncoded
:
:
kNo
;
return
GrColorType
:
:
kGray_8
;
}
SK_ABORT
(
"
Invalid
GrPixelConfig
"
)
;
return
GrColorType
:
:
kUnknown
;
}
static
inline
GrColorType
GrPixelConfigToColorType
(
GrPixelConfig
config
)
{
GrSRGBEncoded
bogusEncoded
;
return
GrPixelConfigToColorTypeAndEncoding
(
config
&
bogusEncoded
)
;
}
static
inline
GrPixelConfig
GrColorTypeToPixelConfig
(
GrColorType
config
GrSRGBEncoded
srgbEncoded
)
{
switch
(
config
)
{
case
GrColorType
:
:
kUnknown
:
return
kUnknown_GrPixelConfig
;
case
GrColorType
:
:
kAlpha_8
:
return
(
GrSRGBEncoded
:
:
kYes
=
=
srgbEncoded
)
?
kUnknown_GrPixelConfig
:
kAlpha_8_GrPixelConfig
;
case
GrColorType
:
:
kGray_8
:
return
(
GrSRGBEncoded
:
:
kYes
=
=
srgbEncoded
)
?
kUnknown_GrPixelConfig
:
kGray_8_GrPixelConfig
;
case
GrColorType
:
:
kRGB_565
:
return
(
GrSRGBEncoded
:
:
kYes
=
=
srgbEncoded
)
?
kUnknown_GrPixelConfig
:
kRGB_565_GrPixelConfig
;
case
GrColorType
:
:
kABGR_4444
:
return
(
GrSRGBEncoded
:
:
kYes
=
=
srgbEncoded
)
?
kUnknown_GrPixelConfig
:
kRGBA_4444_GrPixelConfig
;
case
GrColorType
:
:
kRGBA_8888
:
return
(
GrSRGBEncoded
:
:
kYes
=
=
srgbEncoded
)
?
kSRGBA_8888_GrPixelConfig
:
kRGBA_8888_GrPixelConfig
;
case
GrColorType
:
:
kRGB_888x
:
return
(
GrSRGBEncoded
:
:
kYes
=
=
srgbEncoded
)
?
kUnknown_GrPixelConfig
:
kRGB_888_GrPixelConfig
;
case
GrColorType
:
:
kRG_88
:
return
(
GrSRGBEncoded
:
:
kYes
=
=
srgbEncoded
)
?
kUnknown_GrPixelConfig
:
kRG_88_GrPixelConfig
;
case
GrColorType
:
:
kBGRA_8888
:
return
(
GrSRGBEncoded
:
:
kYes
=
=
srgbEncoded
)
?
kSBGRA_8888_GrPixelConfig
:
kBGRA_8888_GrPixelConfig
;
case
GrColorType
:
:
kRGBA_1010102
:
return
(
GrSRGBEncoded
:
:
kYes
=
=
srgbEncoded
)
?
kUnknown_GrPixelConfig
:
kRGBA_1010102_GrPixelConfig
;
case
GrColorType
:
:
kRGBA_F32
:
return
(
GrSRGBEncoded
:
:
kYes
=
=
srgbEncoded
)
?
kUnknown_GrPixelConfig
:
kRGBA_float_GrPixelConfig
;
case
GrColorType
:
:
kRG_F32
:
return
(
GrSRGBEncoded
:
:
kYes
=
=
srgbEncoded
)
?
kUnknown_GrPixelConfig
:
kRG_float_GrPixelConfig
;
case
GrColorType
:
:
kAlpha_F16
:
return
(
GrSRGBEncoded
:
:
kYes
=
=
srgbEncoded
)
?
kUnknown_GrPixelConfig
:
kAlpha_half_GrPixelConfig
;
case
GrColorType
:
:
kRGBA_F16
:
return
(
GrSRGBEncoded
:
:
kYes
=
=
srgbEncoded
)
?
kUnknown_GrPixelConfig
:
kRGBA_half_GrPixelConfig
;
case
GrColorType
:
:
kRGB_ETC1
:
return
(
GrSRGBEncoded
:
:
kYes
=
=
srgbEncoded
)
?
kUnknown_GrPixelConfig
:
kRGB_ETC1_GrPixelConfig
;
}
SK_ABORT
(
"
Invalid
GrColorType
"
)
;
return
kUnknown_GrPixelConfig
;
}
class
GrRefCntedCallback
:
public
SkRefCnt
{
public
:
using
Context
=
void
*
;
using
Callback
=
void
(
*
)
(
Context
)
;
GrRefCntedCallback
(
Callback
proc
Context
ctx
)
:
fReleaseProc
(
proc
)
fReleaseCtx
(
ctx
)
{
SkASSERT
(
proc
)
;
}
~
GrRefCntedCallback
(
)
override
{
fReleaseProc
?
fReleaseProc
(
fReleaseCtx
)
:
void
(
)
;
}
Context
context
(
)
const
{
return
fReleaseCtx
;
}
private
:
Callback
fReleaseProc
;
Context
fReleaseCtx
;
}
;
#
endif
