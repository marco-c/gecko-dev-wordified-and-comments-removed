#
ifndef
GrTypesPriv_DEFINED
#
define
GrTypesPriv_DEFINED
#
include
<
chrono
>
#
include
"
include
/
core
/
SkCanvas
.
h
"
#
include
"
include
/
core
/
SkImage
.
h
"
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
core
/
SkPath
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
gpu
/
GrTypes
.
h
"
#
include
"
include
/
private
/
GrSharedEnums
.
h
"
#
include
"
include
/
private
/
SkImageInfoPriv
.
h
"
#
include
"
include
/
private
/
SkWeakRefCnt
.
h
"
class
GrBackendFormat
;
class
GrCaps
;
#
ifdef
MOZ_SKIA
#
include
"
mozilla
/
TimeStamp
.
h
"
struct
GrStdSteadyClock
{
typedef
mozilla
:
:
TimeStamp
time_point
;
static
time_point
now
(
)
{
return
mozilla
:
:
TimeStamp
:
:
NowLoRes
(
)
;
}
}
;
static
inline
GrStdSteadyClock
:
:
time_point
operator
-
(
GrStdSteadyClock
:
:
time_point
t
std
:
:
chrono
:
:
milliseconds
ms
)
{
return
t
-
mozilla
:
:
TimeDuration
:
:
FromMilliseconds
(
ms
.
count
(
)
)
;
}
#
else
#
if
defined
(
__GLIBCXX__
)
&
&
(
__GLIBCXX__
<
20130000
)
using
GrStdSteadyClock
=
std
:
:
chrono
:
:
monotonic_clock
;
#
else
using
GrStdSteadyClock
=
std
:
:
chrono
:
:
steady_clock
;
#
endif
#
endif
enum
GrPixelConfig
{
kUnknown_GrPixelConfig
kAlpha_8_GrPixelConfig
kAlpha_8_as_Alpha_GrPixelConfig
kAlpha_8_as_Red_GrPixelConfig
kGray_8_GrPixelConfig
kGray_8_as_Lum_GrPixelConfig
kGray_8_as_Red_GrPixelConfig
kRGB_565_GrPixelConfig
kRGBA_4444_GrPixelConfig
kRGBA_8888_GrPixelConfig
kRGB_888_GrPixelConfig
kRGB_888X_GrPixelConfig
kRG_88_GrPixelConfig
kBGRA_8888_GrPixelConfig
kSRGBA_8888_GrPixelConfig
kRGBA_1010102_GrPixelConfig
kAlpha_half_GrPixelConfig
kAlpha_half_as_Lum_GrPixelConfig
kAlpha_half_as_Red_GrPixelConfig
kRGBA_half_GrPixelConfig
kRGBA_half_Clamped_GrPixelConfig
kRGB_ETC1_GrPixelConfig
kAlpha_16_GrPixelConfig
kRG_1616_GrPixelConfig
kRGBA_16161616_GrPixelConfig
kRG_half_GrPixelConfig
kLast_GrPixelConfig
=
kRG_half_GrPixelConfig
}
;
static
const
int
kGrPixelConfigCnt
=
kLast_GrPixelConfig
+
1
;
#
if
SK_PMCOLOR_BYTE_ORDER
(
B
G
R
A
)
static
const
GrPixelConfig
kSkia8888_GrPixelConfig
=
kBGRA_8888_GrPixelConfig
;
#
elif
SK_PMCOLOR_BYTE_ORDER
(
R
G
B
A
)
static
const
GrPixelConfig
kSkia8888_GrPixelConfig
=
kRGBA_8888_GrPixelConfig
;
#
else
static
const
GrPixelConfig
kSkia8888_GrPixelConfig
=
kBGRA_8888_GrPixelConfig
;
#
endif
enum
class
GrPrimitiveType
{
kTriangles
kTriangleStrip
kPoints
kLines
kLineStrip
kPath
}
;
static
constexpr
int
kNumGrPrimitiveTypes
=
(
int
)
GrPrimitiveType
:
:
kPath
+
1
;
static
constexpr
bool
GrIsPrimTypeLines
(
GrPrimitiveType
type
)
{
return
GrPrimitiveType
:
:
kLines
=
=
type
|
|
GrPrimitiveType
:
:
kLineStrip
=
=
type
;
}
static
constexpr
bool
GrIsPrimTypeTris
(
GrPrimitiveType
type
)
{
return
GrPrimitiveType
:
:
kTriangles
=
=
type
|
|
GrPrimitiveType
:
:
kTriangleStrip
=
=
type
;
}
enum
class
GrPrimitiveRestart
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
GrMaskFormat
{
kA8_GrMaskFormat
kA565_GrMaskFormat
kARGB_GrMaskFormat
kLast_GrMaskFormat
=
kARGB_GrMaskFormat
}
;
static
const
int
kMaskFormatCount
=
kLast_GrMaskFormat
+
1
;
static
inline
int
GrMaskFormatBytesPerPixel
(
GrMaskFormat
format
)
{
SkASSERT
(
format
<
kMaskFormatCount
)
;
static
const
int
sBytesPerPixel
[
]
=
{
1
2
4
}
;
static_assert
(
SK_ARRAY_COUNT
(
sBytesPerPixel
)
=
=
kMaskFormatCount
"
array_size_mismatch
"
)
;
static_assert
(
kA8_GrMaskFormat
=
=
0
"
enum_order_dependency
"
)
;
static_assert
(
kA565_GrMaskFormat
=
=
1
"
enum_order_dependency
"
)
;
static_assert
(
kARGB_GrMaskFormat
=
=
2
"
enum_order_dependency
"
)
;
return
sBytesPerPixel
[
(
int
)
format
]
;
}
struct
GrSurfaceDesc
{
GrSurfaceDesc
(
)
:
fWidth
(
0
)
fHeight
(
0
)
fConfig
(
kUnknown_GrPixelConfig
)
{
}
int
fWidth
;
int
fHeight
;
GrPixelConfig
fConfig
;
}
;
enum
GrWrapOwnership
{
kBorrow_GrWrapOwnership
kAdopt_GrWrapOwnership
}
;
enum
class
GrWrapCacheable
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
class
GrBudgetedType
:
uint8_t
{
kBudgeted
kUnbudgetedUncacheable
kUnbudgetedCacheable
}
;
enum
GrClipType
{
kRect_ClipType
kPath_ClipType
}
;
enum
class
GrScissorTest
:
bool
{
kDisabled
=
false
kEnabled
=
true
}
;
struct
GrMipLevel
{
const
void
*
fPixels
=
nullptr
;
size_t
fRowBytes
=
0
;
}
;
enum
class
GrLoadOp
{
kLoad
kClear
kDiscard
}
;
enum
class
GrStoreOp
{
kStore
kDiscard
}
;
enum
class
GrAA
:
bool
{
kNo
=
false
kYes
=
true
}
;
enum
class
GrFillRule
:
bool
{
kNonzero
kEvenOdd
}
;
inline
GrFillRule
GrFillRuleForSkPath
(
const
SkPath
&
path
)
{
switch
(
path
.
getFillType
(
)
)
{
case
SkPath
:
:
kWinding_FillType
:
case
SkPath
:
:
kInverseWinding_FillType
:
return
GrFillRule
:
:
kNonzero
;
case
SkPath
:
:
kEvenOdd_FillType
:
case
SkPath
:
:
kInverseEvenOdd_FillType
:
return
GrFillRule
:
:
kEvenOdd
;
}
SkUNREACHABLE
;
}
enum
class
GrAAType
:
unsigned
{
kNone
kCoverage
kMSAA
}
;
static
constexpr
bool
GrAATypeIsHW
(
GrAAType
type
)
{
switch
(
type
)
{
case
GrAAType
:
:
kNone
:
return
false
;
case
GrAAType
:
:
kCoverage
:
return
false
;
case
GrAAType
:
:
kMSAA
:
return
true
;
}
SkUNREACHABLE
;
}
enum
class
GrClampType
{
kAuto
kManual
kNone
}
;
enum
class
GrQuadAAFlags
{
kLeft
=
SkCanvas
:
:
kLeft_QuadAAFlag
kTop
=
SkCanvas
:
:
kTop_QuadAAFlag
kRight
=
SkCanvas
:
:
kRight_QuadAAFlag
kBottom
=
SkCanvas
:
:
kBottom_QuadAAFlag
kNone
=
SkCanvas
:
:
kNone_QuadAAFlags
kAll
=
SkCanvas
:
:
kAll_QuadAAFlags
}
;
GR_MAKE_BITFIELD_CLASS_OPS
(
GrQuadAAFlags
)
static
inline
GrQuadAAFlags
SkToGrQuadAAFlags
(
unsigned
flags
)
{
return
static_cast
<
GrQuadAAFlags
>
(
flags
)
;
}
enum
GrSLType
{
kVoid_GrSLType
kBool_GrSLType
kByte_GrSLType
kByte2_GrSLType
kByte3_GrSLType
kByte4_GrSLType
kUByte_GrSLType
kUByte2_GrSLType
kUByte3_GrSLType
kUByte4_GrSLType
kShort_GrSLType
kShort2_GrSLType
kShort3_GrSLType
kShort4_GrSLType
kUShort_GrSLType
kUShort2_GrSLType
kUShort3_GrSLType
kUShort4_GrSLType
kFloat_GrSLType
kFloat2_GrSLType
kFloat3_GrSLType
kFloat4_GrSLType
kFloat2x2_GrSLType
kFloat3x3_GrSLType
kFloat4x4_GrSLType
kHalf_GrSLType
kHalf2_GrSLType
kHalf3_GrSLType
kHalf4_GrSLType
kHalf2x2_GrSLType
kHalf3x3_GrSLType
kHalf4x4_GrSLType
kInt_GrSLType
kInt2_GrSLType
kInt3_GrSLType
kInt4_GrSLType
kUint_GrSLType
kUint2_GrSLType
kTexture2DSampler_GrSLType
kTextureExternalSampler_GrSLType
kTexture2DRectSampler_GrSLType
kTexture2D_GrSLType
kSampler_GrSLType
kLast_GrSLType
=
kSampler_GrSLType
}
;
static
const
int
kGrSLTypeCount
=
kLast_GrSLType
+
1
;
enum
class
GrTextureType
{
kNone
k2D
kRectangle
kExternal
}
;
enum
GrShaderType
{
kVertex_GrShaderType
kGeometry_GrShaderType
kFragment_GrShaderType
kLastkFragment_GrShaderType
=
kFragment_GrShaderType
}
;
static
const
int
kGrShaderTypeCount
=
kLastkFragment_GrShaderType
+
1
;
enum
GrShaderFlags
{
kNone_GrShaderFlags
=
0
kVertex_GrShaderFlag
=
1
<
<
kVertex_GrShaderType
kGeometry_GrShaderFlag
=
1
<
<
kGeometry_GrShaderType
kFragment_GrShaderFlag
=
1
<
<
kFragment_GrShaderType
}
;
GR_MAKE_BITFIELD_OPS
(
GrShaderFlags
)
static
constexpr
bool
GrSLTypeIsFloatType
(
GrSLType
type
)
{
switch
(
type
)
{
case
kFloat_GrSLType
:
case
kFloat2_GrSLType
:
case
kFloat3_GrSLType
:
case
kFloat4_GrSLType
:
case
kFloat2x2_GrSLType
:
case
kFloat3x3_GrSLType
:
case
kFloat4x4_GrSLType
:
case
kHalf_GrSLType
:
case
kHalf2_GrSLType
:
case
kHalf3_GrSLType
:
case
kHalf4_GrSLType
:
case
kHalf2x2_GrSLType
:
case
kHalf3x3_GrSLType
:
case
kHalf4x4_GrSLType
:
return
true
;
case
kVoid_GrSLType
:
case
kTexture2DSampler_GrSLType
:
case
kTextureExternalSampler_GrSLType
:
case
kTexture2DRectSampler_GrSLType
:
case
kBool_GrSLType
:
case
kByte_GrSLType
:
case
kByte2_GrSLType
:
case
kByte3_GrSLType
:
case
kByte4_GrSLType
:
case
kUByte_GrSLType
:
case
kUByte2_GrSLType
:
case
kUByte3_GrSLType
:
case
kUByte4_GrSLType
:
case
kShort_GrSLType
:
case
kShort2_GrSLType
:
case
kShort3_GrSLType
:
case
kShort4_GrSLType
:
case
kUShort_GrSLType
:
case
kUShort2_GrSLType
:
case
kUShort3_GrSLType
:
case
kUShort4_GrSLType
:
case
kInt_GrSLType
:
case
kInt2_GrSLType
:
case
kInt3_GrSLType
:
case
kInt4_GrSLType
:
case
kUint_GrSLType
:
case
kUint2_GrSLType
:
case
kTexture2D_GrSLType
:
case
kSampler_GrSLType
:
return
false
;
}
SkUNREACHABLE
;
}
static
constexpr
int
GrSLTypeVecLength
(
GrSLType
type
)
{
switch
(
type
)
{
case
kFloat_GrSLType
:
case
kHalf_GrSLType
:
case
kBool_GrSLType
:
case
kByte_GrSLType
:
case
kUByte_GrSLType
:
case
kShort_GrSLType
:
case
kUShort_GrSLType
:
case
kInt_GrSLType
:
case
kUint_GrSLType
:
return
1
;
case
kFloat2_GrSLType
:
case
kHalf2_GrSLType
:
case
kByte2_GrSLType
:
case
kUByte2_GrSLType
:
case
kShort2_GrSLType
:
case
kUShort2_GrSLType
:
case
kInt2_GrSLType
:
case
kUint2_GrSLType
:
return
2
;
case
kFloat3_GrSLType
:
case
kHalf3_GrSLType
:
case
kByte3_GrSLType
:
case
kUByte3_GrSLType
:
case
kShort3_GrSLType
:
case
kUShort3_GrSLType
:
case
kInt3_GrSLType
:
return
3
;
case
kFloat4_GrSLType
:
case
kHalf4_GrSLType
:
case
kByte4_GrSLType
:
case
kUByte4_GrSLType
:
case
kShort4_GrSLType
:
case
kUShort4_GrSLType
:
case
kInt4_GrSLType
:
return
4
;
case
kFloat2x2_GrSLType
:
case
kFloat3x3_GrSLType
:
case
kFloat4x4_GrSLType
:
case
kHalf2x2_GrSLType
:
case
kHalf3x3_GrSLType
:
case
kHalf4x4_GrSLType
:
case
kVoid_GrSLType
:
case
kTexture2DSampler_GrSLType
:
case
kTextureExternalSampler_GrSLType
:
case
kTexture2DRectSampler_GrSLType
:
case
kTexture2D_GrSLType
:
case
kSampler_GrSLType
:
return
-
1
;
}
SkUNREACHABLE
;
}
static
inline
GrSLType
GrSLCombinedSamplerTypeForTextureType
(
GrTextureType
type
)
{
switch
(
type
)
{
case
GrTextureType
:
:
k2D
:
return
kTexture2DSampler_GrSLType
;
case
GrTextureType
:
:
kRectangle
:
return
kTexture2DRectSampler_GrSLType
;
case
GrTextureType
:
:
kExternal
:
return
kTextureExternalSampler_GrSLType
;
default
:
SK_ABORT
(
"
Unexpected
texture
type
"
)
;
}
}
static
inline
bool
GrTextureTypeHasRestrictedSampling
(
GrTextureType
type
)
{
switch
(
type
)
{
case
GrTextureType
:
:
k2D
:
return
false
;
case
GrTextureType
:
:
kRectangle
:
return
true
;
case
GrTextureType
:
:
kExternal
:
return
true
;
default
:
SK_ABORT
(
"
Unexpected
texture
type
"
)
;
}
}
static
constexpr
bool
GrSLTypeIsCombinedSamplerType
(
GrSLType
type
)
{
switch
(
type
)
{
case
kTexture2DSampler_GrSLType
:
case
kTextureExternalSampler_GrSLType
:
case
kTexture2DRectSampler_GrSLType
:
return
true
;
case
kVoid_GrSLType
:
case
kFloat_GrSLType
:
case
kFloat2_GrSLType
:
case
kFloat3_GrSLType
:
case
kFloat4_GrSLType
:
case
kFloat2x2_GrSLType
:
case
kFloat3x3_GrSLType
:
case
kFloat4x4_GrSLType
:
case
kHalf_GrSLType
:
case
kHalf2_GrSLType
:
case
kHalf3_GrSLType
:
case
kHalf4_GrSLType
:
case
kHalf2x2_GrSLType
:
case
kHalf3x3_GrSLType
:
case
kHalf4x4_GrSLType
:
case
kInt_GrSLType
:
case
kInt2_GrSLType
:
case
kInt3_GrSLType
:
case
kInt4_GrSLType
:
case
kUint_GrSLType
:
case
kUint2_GrSLType
:
case
kBool_GrSLType
:
case
kByte_GrSLType
:
case
kByte2_GrSLType
:
case
kByte3_GrSLType
:
case
kByte4_GrSLType
:
case
kUByte_GrSLType
:
case
kUByte2_GrSLType
:
case
kUByte3_GrSLType
:
case
kUByte4_GrSLType
:
case
kShort_GrSLType
:
case
kShort2_GrSLType
:
case
kShort3_GrSLType
:
case
kShort4_GrSLType
:
case
kUShort_GrSLType
:
case
kUShort2_GrSLType
:
case
kUShort3_GrSLType
:
case
kUShort4_GrSLType
:
case
kTexture2D_GrSLType
:
case
kSampler_GrSLType
:
return
false
;
}
SkUNREACHABLE
;
}
enum
GrVertexAttribType
{
kFloat_GrVertexAttribType
=
0
kFloat2_GrVertexAttribType
kFloat3_GrVertexAttribType
kFloat4_GrVertexAttribType
kHalf_GrVertexAttribType
kHalf2_GrVertexAttribType
kHalf3_GrVertexAttribType
kHalf4_GrVertexAttribType
kInt2_GrVertexAttribType
kInt3_GrVertexAttribType
kInt4_GrVertexAttribType
kByte_GrVertexAttribType
kByte2_GrVertexAttribType
kByte3_GrVertexAttribType
kByte4_GrVertexAttribType
kUByte_GrVertexAttribType
kUByte2_GrVertexAttribType
kUByte3_GrVertexAttribType
kUByte4_GrVertexAttribType
kUByte_norm_GrVertexAttribType
kUByte4_norm_GrVertexAttribType
kShort2_GrVertexAttribType
kShort4_GrVertexAttribType
kUShort2_GrVertexAttribType
kUShort2_norm_GrVertexAttribType
kInt_GrVertexAttribType
kUint_GrVertexAttribType
kUShort_norm_GrVertexAttribType
kUShort4_norm_GrVertexAttribType
kLast_GrVertexAttribType
=
kUShort4_norm_GrVertexAttribType
}
;
static
const
int
kGrVertexAttribTypeCount
=
kLast_GrVertexAttribType
+
1
;
static
const
int
kGrClipEdgeTypeCnt
=
(
int
)
GrClipEdgeType
:
:
kLast
+
1
;
static
constexpr
bool
GrProcessorEdgeTypeIsFill
(
const
GrClipEdgeType
edgeType
)
{
return
(
GrClipEdgeType
:
:
kFillAA
=
=
edgeType
|
|
GrClipEdgeType
:
:
kFillBW
=
=
edgeType
)
;
}
static
constexpr
bool
GrProcessorEdgeTypeIsInverseFill
(
const
GrClipEdgeType
edgeType
)
{
return
(
GrClipEdgeType
:
:
kInverseFillAA
=
=
edgeType
|
|
GrClipEdgeType
:
:
kInverseFillBW
=
=
edgeType
)
;
}
static
constexpr
bool
GrProcessorEdgeTypeIsAA
(
const
GrClipEdgeType
edgeType
)
{
return
(
GrClipEdgeType
:
:
kFillBW
!
=
edgeType
&
&
GrClipEdgeType
:
:
kInverseFillBW
!
=
edgeType
)
;
}
static
inline
GrClipEdgeType
GrInvertProcessorEdgeType
(
const
GrClipEdgeType
edgeType
)
{
switch
(
edgeType
)
{
case
GrClipEdgeType
:
:
kFillBW
:
return
GrClipEdgeType
:
:
kInverseFillBW
;
case
GrClipEdgeType
:
:
kFillAA
:
return
GrClipEdgeType
:
:
kInverseFillAA
;
case
GrClipEdgeType
:
:
kInverseFillBW
:
return
GrClipEdgeType
:
:
kFillBW
;
case
GrClipEdgeType
:
:
kInverseFillAA
:
return
GrClipEdgeType
:
:
kFillAA
;
case
GrClipEdgeType
:
:
kHairlineAA
:
SK_ABORT
(
"
Hairline
fill
isn
'
t
invertible
.
"
)
;
}
return
GrClipEdgeType
:
:
kFillAA
;
}
enum
GrIOType
{
kRead_GrIOType
kWrite_GrIOType
kRW_GrIOType
}
;
enum
class
GrGpuBufferType
{
kVertex
kIndex
kXferCpuToGpu
kXferGpuToCpu
}
;
static
const
int
kGrGpuBufferTypeCount
=
static_cast
<
int
>
(
GrGpuBufferType
:
:
kXferGpuToCpu
)
+
1
;
enum
GrAccessPattern
{
kDynamic_GrAccessPattern
kStatic_GrAccessPattern
kStream_GrAccessPattern
kLast_GrAccessPattern
=
kStream_GrAccessPattern
}
;
enum
class
GrInternalSurfaceFlags
{
kNone
=
0
kReadOnly
=
1
<
<
0
kGLRTFBOIDIs0
=
1
<
<
1
kRequiresManualMSAAResolve
=
1
<
<
2
}
;
GR_MAKE_BITFIELD_CLASS_OPS
(
GrInternalSurfaceFlags
)
constexpr
static
int
kGrInternalTextureFlagsMask
=
static_cast
<
int
>
(
GrInternalSurfaceFlags
:
:
kReadOnly
)
;
constexpr
static
int
kGrInternalRenderTargetFlagsMask
=
static_cast
<
int
>
(
GrInternalSurfaceFlags
:
:
kGLRTFBOIDIs0
|
GrInternalSurfaceFlags
:
:
kRequiresManualMSAAResolve
)
;
constexpr
static
int
kGrInternalTextureRenderTargetFlagsMask
=
kGrInternalTextureFlagsMask
|
kGrInternalRenderTargetFlagsMask
;
#
ifdef
SK_DEBUG
#
define
GrCapsDebugf
(
caps
.
.
.
)
if
(
!
(
caps
)
-
>
suppressPrints
(
)
)
SkDebugf
(
__VA_ARGS__
)
#
else
#
define
GrCapsDebugf
(
caps
.
.
.
)
do
{
}
while
(
0
)
#
endif
enum
class
GrBackendObjectOwnership
:
bool
{
kBorrowed
=
false
kOwned
=
true
}
;
template
<
typename
T
>
T
*
const
*
unique_ptr_address_as_pointer_address
(
std
:
:
unique_ptr
<
T
>
const
*
up
)
{
static_assert
(
sizeof
(
T
*
)
=
=
sizeof
(
std
:
:
unique_ptr
<
T
>
)
"
unique_ptr
not
expected
size
.
"
)
;
return
reinterpret_cast
<
T
*
const
*
>
(
up
)
;
}
typedef
uint64_t
GrFence
;
enum
class
GpuPathRenderers
{
kNone
=
0
kDashLine
=
1
<
<
0
kStencilAndCover
=
1
<
<
1
kCoverageCounting
=
1
<
<
2
kAAHairline
=
1
<
<
3
kAAConvex
=
1
<
<
4
kAALinearizing
=
1
<
<
5
kSmall
=
1
<
<
6
kTessellating
=
1
<
<
7
kAll
=
(
kTessellating
|
(
kTessellating
-
1
)
)
kDefault
=
kAll
&
~
kCoverageCounting
}
;
enum
class
GrMipMapsStatus
{
kNotAllocated
kDirty
kValid
}
;
GR_MAKE_BITFIELD_CLASS_OPS
(
GpuPathRenderers
)
static
constexpr
GrPixelConfig
GrCompressionTypePixelConfig
(
SkImage
:
:
CompressionType
compression
)
{
switch
(
compression
)
{
case
SkImage
:
:
kETC1_CompressionType
:
return
kRGB_ETC1_GrPixelConfig
;
}
SkUNREACHABLE
;
}
static
constexpr
bool
GrPixelConfigIsCompressed
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kRGB_ETC1_GrPixelConfig
:
return
true
;
default
:
return
false
;
}
SkUNREACHABLE
;
}
static
inline
size_t
GrCompressedFormatDataSize
(
SkImage
:
:
CompressionType
compressionType
int
width
int
height
)
{
switch
(
compressionType
)
{
case
SkImage
:
:
kETC1_CompressionType
:
SkASSERT
(
(
width
&
3
)
=
=
0
)
;
SkASSERT
(
(
height
&
3
)
=
=
0
)
;
return
(
width
>
>
2
)
*
(
height
>
>
2
)
*
8
;
}
SK_ABORT
(
"
Invalid
pixel
config
"
)
;
}
enum
class
GrColorType
{
kUnknown
kAlpha_8
kBGR_565
kABGR_4444
kRGBA_8888
kRGBA_8888_SRGB
kRGB_888x
kRG_88
kBGRA_8888
kRGBA_1010102
kGray_8
kAlpha_F16
kRGBA_F16
kRGBA_F16_Clamped
kRGBA_F32
kAlpha_16
kRG_1616
kRG_F16
kRGBA_16161616
kAlpha_8xxx
kAlpha_F32xxx
kGray_8xxx
kLast
=
kGray_8xxx
}
;
static
const
int
kGrColorTypeCnt
=
static_cast
<
int
>
(
GrColorType
:
:
kLast
)
+
1
;
static
constexpr
SkColorType
GrColorTypeToSkColorType
(
GrColorType
ct
)
{
switch
(
ct
)
{
case
GrColorType
:
:
kUnknown
:
return
kUnknown_SkColorType
;
case
GrColorType
:
:
kAlpha_8
:
return
kAlpha_8_SkColorType
;
case
GrColorType
:
:
kBGR_565
:
return
kRGB_565_SkColorType
;
case
GrColorType
:
:
kABGR_4444
:
return
kARGB_4444_SkColorType
;
case
GrColorType
:
:
kRGBA_8888
:
return
kRGBA_8888_SkColorType
;
case
GrColorType
:
:
kRGBA_8888_SRGB
:
return
kRGBA_8888_SkColorType
;
case
GrColorType
:
:
kRGB_888x
:
return
kRGB_888x_SkColorType
;
case
GrColorType
:
:
kRG_88
:
return
kR8G8_unorm_SkColorType
;
case
GrColorType
:
:
kBGRA_8888
:
return
kBGRA_8888_SkColorType
;
case
GrColorType
:
:
kRGBA_1010102
:
return
kRGBA_1010102_SkColorType
;
case
GrColorType
:
:
kGray_8
:
return
kGray_8_SkColorType
;
case
GrColorType
:
:
kAlpha_F16
:
return
kA16_float_SkColorType
;
case
GrColorType
:
:
kRGBA_F16
:
return
kRGBA_F16_SkColorType
;
case
GrColorType
:
:
kRGBA_F16_Clamped
:
return
kRGBA_F16Norm_SkColorType
;
case
GrColorType
:
:
kRGBA_F32
:
return
kRGBA_F32_SkColorType
;
case
GrColorType
:
:
kAlpha_8xxx
:
return
kUnknown_SkColorType
;
case
GrColorType
:
:
kAlpha_F32xxx
:
return
kUnknown_SkColorType
;
case
GrColorType
:
:
kGray_8xxx
:
return
kUnknown_SkColorType
;
case
GrColorType
:
:
kAlpha_16
:
return
kA16_unorm_SkColorType
;
case
GrColorType
:
:
kRG_1616
:
return
kR16G16_unorm_SkColorType
;
case
GrColorType
:
:
kRGBA_16161616
:
return
kR16G16B16A16_unorm_SkColorType
;
case
GrColorType
:
:
kRG_F16
:
return
kR16G16_float_SkColorType
;
}
SkUNREACHABLE
;
}
static
constexpr
GrColorType
SkColorTypeToGrColorType
(
SkColorType
ct
)
{
switch
(
ct
)
{
case
kUnknown_SkColorType
:
return
GrColorType
:
:
kUnknown
;
case
kAlpha_8_SkColorType
:
return
GrColorType
:
:
kAlpha_8
;
case
kRGB_565_SkColorType
:
return
GrColorType
:
:
kBGR_565
;
case
kARGB_4444_SkColorType
:
return
GrColorType
:
:
kABGR_4444
;
case
kRGBA_8888_SkColorType
:
return
GrColorType
:
:
kRGBA_8888
;
case
kRGB_888x_SkColorType
:
return
GrColorType
:
:
kRGB_888x
;
case
kBGRA_8888_SkColorType
:
return
GrColorType
:
:
kBGRA_8888
;
case
kGray_8_SkColorType
:
return
GrColorType
:
:
kGray_8
;
case
kRGBA_F16Norm_SkColorType
:
return
GrColorType
:
:
kRGBA_F16_Clamped
;
case
kRGBA_F16_SkColorType
:
return
GrColorType
:
:
kRGBA_F16
;
case
kRGBA_1010102_SkColorType
:
return
GrColorType
:
:
kRGBA_1010102
;
case
kRGB_101010x_SkColorType
:
return
GrColorType
:
:
kUnknown
;
case
kRGBA_F32_SkColorType
:
return
GrColorType
:
:
kRGBA_F32
;
case
kR8G8_unorm_SkColorType
:
return
GrColorType
:
:
kRG_88
;
case
kA16_unorm_SkColorType
:
return
GrColorType
:
:
kAlpha_16
;
case
kR16G16_unorm_SkColorType
:
return
GrColorType
:
:
kRG_1616
;
case
kA16_float_SkColorType
:
return
GrColorType
:
:
kAlpha_F16
;
case
kR16G16_float_SkColorType
:
return
GrColorType
:
:
kRG_F16
;
case
kR16G16B16A16_unorm_SkColorType
:
return
GrColorType
:
:
kRGBA_16161616
;
}
SkUNREACHABLE
;
}
GrColorType
SkColorTypeAndFormatToGrColorType
(
const
GrCaps
*
caps
SkColorType
skCT
const
GrBackendFormat
&
format
)
;
static
constexpr
uint32_t
GrColorTypeComponentFlags
(
GrColorType
ct
)
{
switch
(
ct
)
{
case
GrColorType
:
:
kUnknown
:
return
0
;
case
GrColorType
:
:
kAlpha_8
:
return
kAlpha_SkColorTypeComponentFlag
;
case
GrColorType
:
:
kBGR_565
:
return
kRGB_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kABGR_4444
:
return
kRGBA_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kRGBA_8888
:
return
kRGBA_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kRGBA_8888_SRGB
:
return
kRGBA_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kRGB_888x
:
return
kRGB_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kRG_88
:
return
kRed_SkColorTypeComponentFlag
|
kGreen_SkColorTypeComponentFlag
;
case
GrColorType
:
:
kBGRA_8888
:
return
kRGBA_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kRGBA_1010102
:
return
kRGBA_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kGray_8
:
return
kGray_SkColorTypeComponentFlag
;
case
GrColorType
:
:
kAlpha_F16
:
return
kAlpha_SkColorTypeComponentFlag
;
case
GrColorType
:
:
kRGBA_F16
:
return
kRGBA_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kRGBA_F16_Clamped
:
return
kRGBA_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kRGBA_F32
:
return
kRGBA_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kAlpha_8xxx
:
return
kAlpha_SkColorTypeComponentFlag
;
case
GrColorType
:
:
kAlpha_F32xxx
:
return
kAlpha_SkColorTypeComponentFlag
;
case
GrColorType
:
:
kGray_8xxx
:
return
kGray_SkColorTypeComponentFlag
;
case
GrColorType
:
:
kAlpha_16
:
return
kAlpha_SkColorTypeComponentFlag
;
case
GrColorType
:
:
kRG_1616
:
return
kRed_SkColorTypeComponentFlag
|
kGreen_SkColorTypeComponentFlag
;
case
GrColorType
:
:
kRGBA_16161616
:
return
kRGBA_SkColorTypeComponentFlags
;
case
GrColorType
:
:
kRG_F16
:
return
kRed_SkColorTypeComponentFlag
|
kGreen_SkColorTypeComponentFlag
;
}
SkUNREACHABLE
;
}
enum
class
GrColorTypeEncoding
{
kUnorm
kSRGBUnorm
kFloat
}
;
struct
GrColorTypeDesc
{
public
:
static
constexpr
GrColorTypeDesc
MakeRGBA
(
int
rgba
GrColorTypeEncoding
e
)
{
return
{
rgba
rgba
rgba
rgba
0
e
}
;
}
static
constexpr
GrColorTypeDesc
MakeRGBA
(
int
rgb
int
a
GrColorTypeEncoding
e
)
{
return
{
rgb
rgb
rgb
a
0
e
}
;
}
static
constexpr
GrColorTypeDesc
MakeRGB
(
int
rgb
GrColorTypeEncoding
e
)
{
return
{
rgb
rgb
rgb
0
0
e
}
;
}
static
constexpr
GrColorTypeDesc
MakeRGB
(
int
r
int
g
int
b
GrColorTypeEncoding
e
)
{
return
{
r
g
b
0
0
e
}
;
}
static
constexpr
GrColorTypeDesc
MakeAlpha
(
int
a
GrColorTypeEncoding
e
)
{
return
{
0
0
0
a
0
e
}
;
}
static
constexpr
GrColorTypeDesc
MakeR
(
int
r
GrColorTypeEncoding
e
)
{
return
{
r
0
0
0
0
e
}
;
}
static
constexpr
GrColorTypeDesc
MakeRG
(
int
rg
GrColorTypeEncoding
e
)
{
return
{
rg
rg
0
0
0
e
}
;
}
static
constexpr
GrColorTypeDesc
MakeGray
(
int
grayBits
GrColorTypeEncoding
e
)
{
return
{
0
0
0
0
grayBits
e
}
;
}
static
constexpr
GrColorTypeDesc
MakeInvalid
(
)
{
return
{
}
;
}
constexpr
int
r
(
)
const
{
return
fRBits
;
}
constexpr
int
g
(
)
const
{
return
fGBits
;
}
constexpr
int
b
(
)
const
{
return
fBBits
;
}
constexpr
int
a
(
)
const
{
return
fABits
;
}
constexpr
int
operator
[
]
(
int
c
)
const
{
switch
(
c
)
{
case
0
:
return
this
-
>
r
(
)
;
case
1
:
return
this
-
>
g
(
)
;
case
2
:
return
this
-
>
b
(
)
;
case
3
:
return
this
-
>
a
(
)
;
}
SkUNREACHABLE
;
}
constexpr
int
gray
(
)
const
{
return
fGrayBits
;
}
constexpr
GrColorTypeEncoding
encoding
(
)
const
{
return
fEncoding
;
}
private
:
int
fRBits
=
0
;
int
fGBits
=
0
;
int
fBBits
=
0
;
int
fABits
=
0
;
int
fGrayBits
=
0
;
GrColorTypeEncoding
fEncoding
=
GrColorTypeEncoding
:
:
kUnorm
;
constexpr
GrColorTypeDesc
(
)
=
default
;
constexpr
GrColorTypeDesc
(
int
r
int
g
int
b
int
a
int
gray
GrColorTypeEncoding
encoding
)
:
fRBits
(
r
)
fGBits
(
g
)
fBBits
(
b
)
fABits
(
a
)
fGrayBits
(
gray
)
fEncoding
(
encoding
)
{
SkASSERT
(
r
>
=
0
&
&
g
>
=
0
&
&
b
>
=
0
&
&
a
>
=
0
&
&
gray
>
=
0
)
;
SkASSERT
(
!
gray
|
|
(
!
r
&
&
!
g
&
&
!
b
)
)
;
SkASSERT
(
r
|
|
g
|
|
b
|
|
a
|
|
gray
)
;
}
}
;
static
constexpr
GrColorTypeDesc
GrGetColorTypeDesc
(
GrColorType
ct
)
{
switch
(
ct
)
{
case
GrColorType
:
:
kUnknown
:
return
GrColorTypeDesc
:
:
MakeInvalid
(
)
;
case
GrColorType
:
:
kAlpha_8
:
return
GrColorTypeDesc
:
:
MakeAlpha
(
8
GrColorTypeEncoding
:
:
kUnorm
)
;
case
GrColorType
:
:
kBGR_565
:
return
GrColorTypeDesc
:
:
MakeRGB
(
5
6
5
GrColorTypeEncoding
:
:
kUnorm
)
;
case
GrColorType
:
:
kABGR_4444
:
return
GrColorTypeDesc
:
:
MakeRGBA
(
4
GrColorTypeEncoding
:
:
kUnorm
)
;
case
GrColorType
:
:
kRGBA_8888
:
return
GrColorTypeDesc
:
:
MakeRGBA
(
8
GrColorTypeEncoding
:
:
kUnorm
)
;
case
GrColorType
:
:
kRGBA_8888_SRGB
:
return
GrColorTypeDesc
:
:
MakeRGBA
(
8
GrColorTypeEncoding
:
:
kSRGBUnorm
)
;
case
GrColorType
:
:
kRGB_888x
:
return
GrColorTypeDesc
:
:
MakeRGB
(
8
GrColorTypeEncoding
:
:
kUnorm
)
;
case
GrColorType
:
:
kRG_88
:
return
GrColorTypeDesc
:
:
MakeRG
(
8
GrColorTypeEncoding
:
:
kUnorm
)
;
case
GrColorType
:
:
kBGRA_8888
:
return
GrColorTypeDesc
:
:
MakeRGBA
(
8
GrColorTypeEncoding
:
:
kUnorm
)
;
case
GrColorType
:
:
kRGBA_1010102
:
return
GrColorTypeDesc
:
:
MakeRGBA
(
10
2
GrColorTypeEncoding
:
:
kUnorm
)
;
case
GrColorType
:
:
kGray_8
:
return
GrColorTypeDesc
:
:
MakeGray
(
8
GrColorTypeEncoding
:
:
kUnorm
)
;
case
GrColorType
:
:
kAlpha_F16
:
return
GrColorTypeDesc
:
:
MakeAlpha
(
16
GrColorTypeEncoding
:
:
kFloat
)
;
case
GrColorType
:
:
kRGBA_F16
:
return
GrColorTypeDesc
:
:
MakeRGBA
(
16
GrColorTypeEncoding
:
:
kFloat
)
;
case
GrColorType
:
:
kRGBA_F16_Clamped
:
return
GrColorTypeDesc
:
:
MakeRGBA
(
16
GrColorTypeEncoding
:
:
kFloat
)
;
case
GrColorType
:
:
kRGBA_F32
:
return
GrColorTypeDesc
:
:
MakeRGBA
(
32
GrColorTypeEncoding
:
:
kFloat
)
;
case
GrColorType
:
:
kAlpha_8xxx
:
return
GrColorTypeDesc
:
:
MakeAlpha
(
8
GrColorTypeEncoding
:
:
kUnorm
)
;
case
GrColorType
:
:
kAlpha_F32xxx
:
return
GrColorTypeDesc
:
:
MakeAlpha
(
32
GrColorTypeEncoding
:
:
kFloat
)
;
case
GrColorType
:
:
kGray_8xxx
:
return
GrColorTypeDesc
:
:
MakeGray
(
8
GrColorTypeEncoding
:
:
kUnorm
)
;
case
GrColorType
:
:
kAlpha_16
:
return
GrColorTypeDesc
:
:
MakeAlpha
(
16
GrColorTypeEncoding
:
:
kUnorm
)
;
case
GrColorType
:
:
kRG_1616
:
return
GrColorTypeDesc
:
:
MakeRG
(
16
GrColorTypeEncoding
:
:
kUnorm
)
;
case
GrColorType
:
:
kRGBA_16161616
:
return
GrColorTypeDesc
:
:
MakeRGBA
(
16
GrColorTypeEncoding
:
:
kUnorm
)
;
case
GrColorType
:
:
kRG_F16
:
return
GrColorTypeDesc
:
:
MakeRG
(
16
GrColorTypeEncoding
:
:
kFloat
)
;
}
SkUNREACHABLE
;
}
static
constexpr
GrClampType
GrColorTypeClampType
(
GrColorType
colorType
)
{
if
(
GrGetColorTypeDesc
(
colorType
)
.
encoding
(
)
=
=
GrColorTypeEncoding
:
:
kUnorm
|
|
GrGetColorTypeDesc
(
colorType
)
.
encoding
(
)
=
=
GrColorTypeEncoding
:
:
kSRGBUnorm
)
{
return
GrClampType
:
:
kAuto
;
}
return
GrColorType
:
:
kRGBA_F16_Clamped
=
=
colorType
?
GrClampType
:
:
kManual
:
GrClampType
:
:
kNone
;
}
static
constexpr
bool
GrColorTypeIsWiderThan
(
GrColorType
colorType
int
n
)
{
SkASSERT
(
n
>
0
)
;
auto
desc
=
GrGetColorTypeDesc
(
colorType
)
;
return
(
desc
.
r
(
)
&
&
desc
.
r
(
)
>
n
)
|
|
(
desc
.
g
(
)
&
&
desc
.
g
(
)
>
n
)
|
|
(
desc
.
b
(
)
&
&
desc
.
b
(
)
>
n
)
|
|
(
desc
.
a
(
)
&
&
desc
.
a
(
)
>
n
)
|
|
(
desc
.
gray
(
)
&
&
desc
.
gray
(
)
>
n
)
;
}
static
constexpr
bool
GrColorTypeIsAlphaOnly
(
GrColorType
ct
)
{
return
kAlpha_SkColorTypeComponentFlag
=
=
GrColorTypeComponentFlags
(
ct
)
;
}
static
constexpr
bool
GrColorTypeHasAlpha
(
GrColorType
ct
)
{
return
kAlpha_SkColorTypeComponentFlag
&
GrColorTypeComponentFlags
(
ct
)
;
}
static
constexpr
size_t
GrColorTypeBytesPerPixel
(
GrColorType
ct
)
{
switch
(
ct
)
{
case
GrColorType
:
:
kUnknown
:
return
0
;
case
GrColorType
:
:
kAlpha_8
:
return
1
;
case
GrColorType
:
:
kBGR_565
:
return
2
;
case
GrColorType
:
:
kABGR_4444
:
return
2
;
case
GrColorType
:
:
kRGBA_8888
:
return
4
;
case
GrColorType
:
:
kRGBA_8888_SRGB
:
return
4
;
case
GrColorType
:
:
kRGB_888x
:
return
4
;
case
GrColorType
:
:
kRG_88
:
return
2
;
case
GrColorType
:
:
kBGRA_8888
:
return
4
;
case
GrColorType
:
:
kRGBA_1010102
:
return
4
;
case
GrColorType
:
:
kGray_8
:
return
1
;
case
GrColorType
:
:
kAlpha_F16
:
return
2
;
case
GrColorType
:
:
kRGBA_F16
:
return
8
;
case
GrColorType
:
:
kRGBA_F16_Clamped
:
return
8
;
case
GrColorType
:
:
kRGBA_F32
:
return
16
;
case
GrColorType
:
:
kAlpha_8xxx
:
return
4
;
case
GrColorType
:
:
kAlpha_F32xxx
:
return
16
;
case
GrColorType
:
:
kGray_8xxx
:
return
4
;
case
GrColorType
:
:
kAlpha_16
:
return
2
;
case
GrColorType
:
:
kRG_1616
:
return
4
;
case
GrColorType
:
:
kRGBA_16161616
:
return
8
;
case
GrColorType
:
:
kRG_F16
:
return
4
;
}
SkUNREACHABLE
;
}
static
constexpr
GrColorType
GrPixelConfigToColorType
(
GrPixelConfig
config
)
{
switch
(
config
)
{
case
kUnknown_GrPixelConfig
:
return
GrColorType
:
:
kUnknown
;
case
kAlpha_8_GrPixelConfig
:
return
GrColorType
:
:
kAlpha_8
;
case
kGray_8_GrPixelConfig
:
return
GrColorType
:
:
kGray_8
;
case
kRGB_565_GrPixelConfig
:
return
GrColorType
:
:
kBGR_565
;
case
kRGBA_4444_GrPixelConfig
:
return
GrColorType
:
:
kABGR_4444
;
case
kRGBA_8888_GrPixelConfig
:
return
GrColorType
:
:
kRGBA_8888
;
case
kRGB_888_GrPixelConfig
:
return
GrColorType
:
:
kRGB_888x
;
case
kRGB_888X_GrPixelConfig
:
return
GrColorType
:
:
kRGB_888x
;
case
kRG_88_GrPixelConfig
:
return
GrColorType
:
:
kRG_88
;
case
kBGRA_8888_GrPixelConfig
:
return
GrColorType
:
:
kBGRA_8888
;
case
kSRGBA_8888_GrPixelConfig
:
return
GrColorType
:
:
kRGBA_8888_SRGB
;
case
kRGBA_1010102_GrPixelConfig
:
return
GrColorType
:
:
kRGBA_1010102
;
case
kAlpha_half_GrPixelConfig
:
return
GrColorType
:
:
kAlpha_F16
;
case
kRGBA_half_GrPixelConfig
:
return
GrColorType
:
:
kRGBA_F16
;
case
kRGBA_half_Clamped_GrPixelConfig
:
return
GrColorType
:
:
kRGBA_F16_Clamped
;
case
kRGB_ETC1_GrPixelConfig
:
return
GrColorType
:
:
kRGB_888x
;
case
kAlpha_8_as_Alpha_GrPixelConfig
:
return
GrColorType
:
:
kAlpha_8
;
case
kAlpha_8_as_Red_GrPixelConfig
:
return
GrColorType
:
:
kAlpha_8
;
case
kAlpha_half_as_Lum_GrPixelConfig
:
case
kAlpha_half_as_Red_GrPixelConfig
:
return
GrColorType
:
:
kAlpha_F16
;
case
kGray_8_as_Lum_GrPixelConfig
:
return
GrColorType
:
:
kGray_8
;
case
kGray_8_as_Red_GrPixelConfig
:
return
GrColorType
:
:
kGray_8
;
case
kAlpha_16_GrPixelConfig
:
return
GrColorType
:
:
kAlpha_16
;
case
kRG_1616_GrPixelConfig
:
return
GrColorType
:
:
kRG_1616
;
case
kRGBA_16161616_GrPixelConfig
:
return
GrColorType
:
:
kRGBA_16161616
;
case
kRG_half_GrPixelConfig
:
return
GrColorType
:
:
kRG_F16
;
}
SkUNREACHABLE
;
}
static
constexpr
GrPixelConfig
GrColorTypeToPixelConfig
(
GrColorType
colorType
)
{
switch
(
colorType
)
{
case
GrColorType
:
:
kUnknown
:
return
kUnknown_GrPixelConfig
;
case
GrColorType
:
:
kAlpha_8
:
return
kAlpha_8_GrPixelConfig
;
case
GrColorType
:
:
kGray_8
:
return
kGray_8_GrPixelConfig
;
case
GrColorType
:
:
kBGR_565
:
return
kRGB_565_GrPixelConfig
;
case
GrColorType
:
:
kABGR_4444
:
return
kRGBA_4444_GrPixelConfig
;
case
GrColorType
:
:
kRGBA_8888
:
return
kRGBA_8888_GrPixelConfig
;
case
GrColorType
:
:
kRGBA_8888_SRGB
:
return
kSRGBA_8888_GrPixelConfig
;
case
GrColorType
:
:
kRGB_888x
:
return
kRGB_888_GrPixelConfig
;
case
GrColorType
:
:
kRG_88
:
return
kRG_88_GrPixelConfig
;
case
GrColorType
:
:
kBGRA_8888
:
return
kBGRA_8888_GrPixelConfig
;
case
GrColorType
:
:
kRGBA_1010102
:
return
kRGBA_1010102_GrPixelConfig
;
case
GrColorType
:
:
kRGBA_F32
:
return
kUnknown_GrPixelConfig
;
case
GrColorType
:
:
kAlpha_F16
:
return
kAlpha_half_GrPixelConfig
;
case
GrColorType
:
:
kRGBA_F16
:
return
kRGBA_half_GrPixelConfig
;
case
GrColorType
:
:
kRGBA_F16_Clamped
:
return
kRGBA_half_Clamped_GrPixelConfig
;
case
GrColorType
:
:
kAlpha_8xxx
:
return
kUnknown_GrPixelConfig
;
case
GrColorType
:
:
kAlpha_F32xxx
:
return
kUnknown_GrPixelConfig
;
case
GrColorType
:
:
kGray_8xxx
:
return
kUnknown_GrPixelConfig
;
case
GrColorType
:
:
kAlpha_16
:
return
kAlpha_16_GrPixelConfig
;
case
GrColorType
:
:
kRG_1616
:
return
kRG_1616_GrPixelConfig
;
case
GrColorType
:
:
kRGBA_16161616
:
return
kRGBA_16161616_GrPixelConfig
;
case
GrColorType
:
:
kRG_F16
:
return
kRG_half_GrPixelConfig
;
}
SkUNREACHABLE
;
}
class
GrRefCntedCallback
:
public
SkRefCnt
{
public
:
using
Context
=
void
*
;
using
Callback
=
void
(
*
)
(
Context
)
;
GrRefCntedCallback
(
Callback
proc
Context
ctx
)
:
fReleaseProc
(
proc
)
fReleaseCtx
(
ctx
)
{
SkASSERT
(
proc
)
;
}
~
GrRefCntedCallback
(
)
override
{
fReleaseProc
?
fReleaseProc
(
fReleaseCtx
)
:
void
(
)
;
}
Context
context
(
)
const
{
return
fReleaseCtx
;
}
private
:
Callback
fReleaseProc
;
Context
fReleaseCtx
;
}
;
#
if
GR_TEST_UTILS
|
|
defined
(
SK_ENABLE_DUMP_GPU
)
static
constexpr
const
char
*
GrBackendApiToStr
(
GrBackendApi
api
)
{
switch
(
api
)
{
case
GrBackendApi
:
:
kMetal
:
return
"
Metal
"
;
case
GrBackendApi
:
:
kDawn
:
return
"
Dawn
"
;
case
GrBackendApi
:
:
kOpenGL
:
return
"
OpenGL
"
;
case
GrBackendApi
:
:
kVulkan
:
return
"
Vulkan
"
;
case
GrBackendApi
:
:
kMock
:
return
"
Mock
"
;
}
SkUNREACHABLE
;
}
static
constexpr
const
char
*
GrColorTypeToStr
(
GrColorType
ct
)
{
switch
(
ct
)
{
case
GrColorType
:
:
kUnknown
:
return
"
kUnknown
"
;
case
GrColorType
:
:
kAlpha_8
:
return
"
kAlpha_8
"
;
case
GrColorType
:
:
kBGR_565
:
return
"
kRGB_565
"
;
case
GrColorType
:
:
kABGR_4444
:
return
"
kABGR_4444
"
;
case
GrColorType
:
:
kRGBA_8888
:
return
"
kRGBA_8888
"
;
case
GrColorType
:
:
kRGBA_8888_SRGB
:
return
"
kRGBA_8888_SRGB
"
;
case
GrColorType
:
:
kRGB_888x
:
return
"
kRGB_888x
"
;
case
GrColorType
:
:
kRG_88
:
return
"
kRG_88
"
;
case
GrColorType
:
:
kBGRA_8888
:
return
"
kBGRA_8888
"
;
case
GrColorType
:
:
kRGBA_1010102
:
return
"
kRGBA_1010102
"
;
case
GrColorType
:
:
kGray_8
:
return
"
kGray_8
"
;
case
GrColorType
:
:
kAlpha_F16
:
return
"
kAlpha_F16
"
;
case
GrColorType
:
:
kRGBA_F16
:
return
"
kRGBA_F16
"
;
case
GrColorType
:
:
kRGBA_F16_Clamped
:
return
"
kRGBA_F16_Clamped
"
;
case
GrColorType
:
:
kRGBA_F32
:
return
"
kRGBA_F32
"
;
case
GrColorType
:
:
kAlpha_8xxx
:
return
"
kAlpha_8xxx
"
;
case
GrColorType
:
:
kAlpha_F32xxx
:
return
"
kAlpha_F32xxx
"
;
case
GrColorType
:
:
kGray_8xxx
:
return
"
kGray_8xxx
"
;
case
GrColorType
:
:
kAlpha_16
:
return
"
kAlpha_16
"
;
case
GrColorType
:
:
kRG_1616
:
return
"
kRG_1616
"
;
case
GrColorType
:
:
kRGBA_16161616
:
return
"
kRGBA_16161616
"
;
case
GrColorType
:
:
kRG_F16
:
return
"
kRG_F16
"
;
}
SkUNREACHABLE
;
}
#
endif
#
endif
