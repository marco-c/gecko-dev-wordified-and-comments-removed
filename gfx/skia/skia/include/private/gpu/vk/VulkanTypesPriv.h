#
ifndef
skgpu_VulkanTypesPriv_DEFINED
#
define
skgpu_VulkanTypesPriv_DEFINED
#
include
"
include
/
gpu
/
vk
/
VulkanTypes
.
h
"
#
include
<
atomic
>
namespace
skgpu
{
class
VulkanMutableTextureState
{
public
:
VulkanMutableTextureState
(
VkImageLayout
layout
uint32_t
queueFamilyIndex
)
:
fLayout
(
layout
)
fQueueFamilyIndex
(
queueFamilyIndex
)
{
}
VulkanMutableTextureState
&
operator
=
(
const
VulkanMutableTextureState
&
that
)
{
fLayout
=
that
.
getImageLayout
(
)
;
fQueueFamilyIndex
=
that
.
getQueueFamilyIndex
(
)
;
return
*
this
;
}
void
setImageLayout
(
VkImageLayout
layout
)
{
fLayout
.
store
(
layout
)
;
}
VkImageLayout
getImageLayout
(
)
const
{
return
fLayout
.
load
(
)
;
}
void
setQueueFamilyIndex
(
uint32_t
queueFamilyIndex
)
{
fQueueFamilyIndex
.
store
(
queueFamilyIndex
)
;
}
uint32_t
getQueueFamilyIndex
(
)
const
{
return
fQueueFamilyIndex
.
load
(
)
;
}
private
:
std
:
:
atomic
<
VkImageLayout
>
fLayout
;
std
:
:
atomic
<
uint32_t
>
fQueueFamilyIndex
;
}
;
}
#
endif
