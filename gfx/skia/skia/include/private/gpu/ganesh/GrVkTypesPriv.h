#
ifndef
GrVkTypesPriv_DEFINED
#
define
GrVkTypesPriv_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
gpu
/
vk
/
GrVkTypes
.
h
"
namespace
skgpu
{
class
MutableTextureStateRef
;
}
struct
GrVkBackendSurfaceInfo
{
GrVkBackendSurfaceInfo
(
GrVkImageInfo
info
)
:
fImageInfo
(
info
)
{
}
void
cleanup
(
)
;
GrVkBackendSurfaceInfo
&
operator
=
(
const
GrVkBackendSurfaceInfo
&
)
=
delete
;
void
assign
(
const
GrVkBackendSurfaceInfo
&
bool
isValid
)
;
GrVkImageInfo
snapImageInfo
(
const
skgpu
:
:
MutableTextureStateRef
*
)
const
;
bool
isProtected
(
)
const
{
return
fImageInfo
.
fProtected
=
=
skgpu
:
:
Protected
:
:
kYes
;
}
#
if
GR_TEST_UTILS
bool
operator
=
=
(
const
GrVkBackendSurfaceInfo
&
that
)
const
;
#
endif
private
:
GrVkImageInfo
fImageInfo
;
}
;
struct
GrVkImageSpec
{
GrVkImageSpec
(
)
:
fImageTiling
(
VK_IMAGE_TILING_OPTIMAL
)
fFormat
(
VK_FORMAT_UNDEFINED
)
fImageUsageFlags
(
0
)
fSharingMode
(
VK_SHARING_MODE_EXCLUSIVE
)
{
}
GrVkImageSpec
(
const
GrVkSurfaceInfo
&
info
)
:
fImageTiling
(
info
.
fImageTiling
)
fFormat
(
info
.
fFormat
)
fImageUsageFlags
(
info
.
fImageUsageFlags
)
fYcbcrConversionInfo
(
info
.
fYcbcrConversionInfo
)
fSharingMode
(
info
.
fSharingMode
)
{
}
VkImageTiling
fImageTiling
;
VkFormat
fFormat
;
VkImageUsageFlags
fImageUsageFlags
;
GrVkYcbcrConversionInfo
fYcbcrConversionInfo
;
VkSharingMode
fSharingMode
;
}
;
GrVkSurfaceInfo
GrVkImageSpecToSurfaceInfo
(
const
GrVkImageSpec
&
vkSpec
uint32_t
sampleCount
uint32_t
levelCount
skgpu
:
:
Protected
isProtected
)
;
#
endif
