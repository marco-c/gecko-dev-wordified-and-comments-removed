#
ifndef
GrD3DTypesMinimal_DEFINED
#
define
GrD3DTypesMinimal_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
<
dxgiformat
.
h
>
#
include
"
include
/
gpu
/
ganesh
/
GrTypes
.
h
"
struct
ID3D12Resource
;
class
GrD3DResourceState
;
typedef
int
GrD3DResourceStateEnum
;
struct
GrD3DSurfaceInfo
;
struct
GrD3DTextureResourceInfo
;
struct
GrD3DTextureResourceSpec
;
struct
GrD3DFenceInfo
;
struct
GrD3DBackendSurfaceInfo
{
GrD3DBackendSurfaceInfo
(
const
GrD3DTextureResourceInfo
&
info
GrD3DResourceState
*
state
)
;
void
cleanup
(
)
;
GrD3DBackendSurfaceInfo
&
operator
=
(
const
GrD3DBackendSurfaceInfo
&
)
=
delete
;
void
assign
(
const
GrD3DBackendSurfaceInfo
&
bool
isValid
)
;
void
setResourceState
(
GrD3DResourceStateEnum
state
)
;
sk_sp
<
GrD3DResourceState
>
getGrD3DResourceState
(
)
const
;
GrD3DTextureResourceInfo
snapTextureResourceInfo
(
)
const
;
bool
isProtected
(
)
const
;
#
if
defined
(
GPU_TEST_UTILS
)
bool
operator
=
=
(
const
GrD3DBackendSurfaceInfo
&
that
)
const
;
#
endif
private
:
GrD3DTextureResourceInfo
*
fTextureResourceInfo
;
GrD3DResourceState
*
fResourceState
;
}
;
struct
GrD3DTextureResourceSpecHolder
{
public
:
GrD3DTextureResourceSpecHolder
(
const
GrD3DSurfaceInfo
&
)
;
void
cleanup
(
)
;
GrD3DSurfaceInfo
getSurfaceInfo
(
uint32_t
sampleCount
uint32_t
levelCount
skgpu
:
:
Protected
isProtected
)
const
;
private
:
GrD3DTextureResourceSpec
*
fSpec
;
}
;
#
endif
