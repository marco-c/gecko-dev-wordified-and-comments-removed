#
ifndef
GrContext_Base_DEFINED
#
define
GrContext_Base_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
gpu
/
GrTypes
.
h
"
#
include
"
include
/
private
/
base
/
SkAPI
.
h
"
#
include
<
cstdint
>
class
GrBaseContextPriv
;
class
GrCaps
;
class
GrContextThreadSafeProxy
;
class
GrDirectContext
;
class
GrImageContext
;
class
GrRecordingContext
;
enum
SkColorType
:
int
;
enum
class
SkTextureCompressionType
;
struct
GrContextOptions
;
class
GrBackendFormat
;
class
GrContext_Base
:
public
SkRefCnt
{
public
:
~
GrContext_Base
(
)
override
;
virtual
GrDirectContext
*
asDirectContext
(
)
{
return
nullptr
;
}
SK_API
GrBackendApi
backend
(
)
const
;
SK_API
GrBackendFormat
defaultBackendFormat
(
SkColorType
GrRenderable
)
const
;
SK_API
GrBackendFormat
compressedBackendFormat
(
SkTextureCompressionType
)
const
;
SK_API
int
maxSurfaceSampleCountForColorType
(
SkColorType
colorType
)
const
;
sk_sp
<
GrContextThreadSafeProxy
>
threadSafeProxy
(
)
;
GrBaseContextPriv
priv
(
)
;
const
GrBaseContextPriv
priv
(
)
const
;
protected
:
friend
class
GrBaseContextPriv
;
GrContext_Base
(
sk_sp
<
GrContextThreadSafeProxy
>
)
;
virtual
bool
init
(
)
;
uint32_t
contextID
(
)
const
;
bool
matches
(
GrContext_Base
*
candidate
)
const
{
return
candidate
&
&
candidate
-
>
contextID
(
)
=
=
this
-
>
contextID
(
)
;
}
const
GrContextOptions
&
options
(
)
const
;
const
GrCaps
*
caps
(
)
const
;
sk_sp
<
const
GrCaps
>
refCaps
(
)
const
;
virtual
GrImageContext
*
asImageContext
(
)
{
return
nullptr
;
}
virtual
GrRecordingContext
*
asRecordingContext
(
)
{
return
nullptr
;
}
sk_sp
<
GrContextThreadSafeProxy
>
fThreadSafeProxy
;
private
:
using
INHERITED
=
SkRefCnt
;
}
;
#
endif
