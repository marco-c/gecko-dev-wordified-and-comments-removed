#
ifndef
GrGLSL_DEFINED
#
define
GrGLSL_DEFINED
#
include
"
GrTypesPriv
.
h
"
#
include
"
SkString
.
h
"
class
GrShaderCaps
;
enum
GrGLSLGeneration
{
k110_GrGLSLGeneration
k130_GrGLSLGeneration
k140_GrGLSLGeneration
k150_GrGLSLGeneration
k330_GrGLSLGeneration
k400_GrGLSLGeneration
k420_GrGLSLGeneration
k310es_GrGLSLGeneration
k320es_GrGLSLGeneration
}
;
bool
GrGLSLSupportsNamedFragmentShaderOutputs
(
GrGLSLGeneration
)
;
void
GrGLSLAppendDefaultFloatPrecisionDeclaration
(
GrSLPrecision
const
GrShaderCaps
&
SkString
*
out
)
;
static
inline
const
char
*
GrGLSLPrecisionString
(
GrSLPrecision
p
)
{
switch
(
p
)
{
case
kLow_GrSLPrecision
:
return
"
lowp
"
;
case
kMedium_GrSLPrecision
:
return
"
mediump
"
;
case
kHigh_GrSLPrecision
:
return
"
highp
"
;
case
kDefault_GrSLPrecision
:
return
"
"
;
default
:
SkFAIL
(
"
Unexpected
precision
type
.
"
)
;
return
"
"
;
}
}
static
inline
const
char
*
GrGLSLTypeString
(
GrSLType
t
)
{
switch
(
t
)
{
case
kVoid_GrSLType
:
return
"
void
"
;
case
kFloat_GrSLType
:
return
"
float
"
;
case
kVec2f_GrSLType
:
return
"
vec2
"
;
case
kVec3f_GrSLType
:
return
"
vec3
"
;
case
kVec4f_GrSLType
:
return
"
vec4
"
;
case
kVec2i_GrSLType
:
return
"
ivec2
"
;
case
kVec3i_GrSLType
:
return
"
ivec3
"
;
case
kVec4i_GrSLType
:
return
"
ivec4
"
;
case
kMat22f_GrSLType
:
return
"
mat2
"
;
case
kMat33f_GrSLType
:
return
"
mat3
"
;
case
kMat44f_GrSLType
:
return
"
mat4
"
;
case
kTexture2DSampler_GrSLType
:
return
"
sampler2D
"
;
case
kITexture2DSampler_GrSLType
:
return
"
isampler2D
"
;
case
kTextureExternalSampler_GrSLType
:
return
"
samplerExternalOES
"
;
case
kTexture2DRectSampler_GrSLType
:
return
"
sampler2DRect
"
;
case
kBufferSampler_GrSLType
:
return
"
samplerBuffer
"
;
case
kBool_GrSLType
:
return
"
bool
"
;
case
kInt_GrSLType
:
return
"
int
"
;
case
kUint_GrSLType
:
return
"
uint
"
;
case
kTexture2D_GrSLType
:
return
"
texture2D
"
;
case
kSampler_GrSLType
:
return
"
sampler
"
;
case
kImageStorage2D_GrSLType
:
return
"
image2D
"
;
case
kIImageStorage2D_GrSLType
:
return
"
iimage2D
"
;
}
SkFAIL
(
"
Unknown
shader
var
type
.
"
)
;
return
"
"
;
}
template
<
typename
Self
>
class
GrGLSLExpr
{
public
:
bool
isOnes
(
)
const
{
return
kOnes_ExprType
=
=
fType
;
}
bool
isZeros
(
)
const
{
return
kZeros_ExprType
=
=
fType
;
}
const
char
*
c_str
(
)
const
{
if
(
kZeros_ExprType
=
=
fType
)
{
return
Self
:
:
ZerosStr
(
)
;
}
else
if
(
kOnes_ExprType
=
=
fType
)
{
return
Self
:
:
OnesStr
(
)
;
}
SkASSERT
(
!
fExpr
.
isEmpty
(
)
)
;
return
fExpr
.
c_str
(
)
;
}
bool
isValid
(
)
const
{
return
kFullExpr_ExprType
!
=
fType
|
|
!
fExpr
.
isEmpty
(
)
;
}
protected
:
GrGLSLExpr
(
)
:
fType
(
kFullExpr_ExprType
)
{
SkASSERT
(
!
this
-
>
isValid
(
)
)
;
}
explicit
GrGLSLExpr
(
int
v
)
{
if
(
v
=
=
0
)
{
fType
=
kZeros_ExprType
;
}
else
if
(
v
=
=
1
)
{
fType
=
kOnes_ExprType
;
}
else
{
fType
=
kFullExpr_ExprType
;
fExpr
.
appendf
(
Self
:
:
CastIntStr
(
)
v
)
;
}
}
GrGLSLExpr
(
const
char
expr
[
]
)
{
if
(
nullptr
=
=
expr
)
{
fType
=
kOnes_ExprType
;
}
else
{
fType
=
kFullExpr_ExprType
;
fExpr
=
expr
;
}
SkASSERT
(
this
-
>
isValid
(
)
)
;
}
GrGLSLExpr
(
const
SkString
&
expr
)
{
if
(
expr
.
isEmpty
(
)
)
{
fType
=
kOnes_ExprType
;
}
else
{
fType
=
kFullExpr_ExprType
;
fExpr
=
expr
;
}
SkASSERT
(
this
-
>
isValid
(
)
)
;
}
GrGLSLExpr
(
const
char
format
[
]
const
char
in0
[
]
)
:
fType
(
kFullExpr_ExprType
)
{
fExpr
.
appendf
(
format
in0
)
;
}
GrGLSLExpr
(
const
char
format
[
]
const
char
in0
[
]
const
char
in1
[
]
)
:
fType
(
kFullExpr_ExprType
)
{
fExpr
.
appendf
(
format
in0
in1
)
;
}
template
<
typename
T
>
static
Self
VectorCastImpl
(
const
T
&
other
)
;
template
<
typename
T0
typename
T1
>
static
Self
Mul
(
T0
in0
T1
in1
)
;
template
<
typename
T0
typename
T1
>
static
Self
Add
(
T0
in0
T1
in1
)
;
template
<
typename
T0
typename
T1
>
static
Self
Sub
(
T0
in0
T1
in1
)
;
template
<
typename
T
>
T
extractComponents
(
const
char
format
[
]
)
const
;
private
:
enum
ExprType
{
kZeros_ExprType
kOnes_ExprType
kFullExpr_ExprType
}
;
ExprType
fType
;
SkString
fExpr
;
}
;
class
GrGLSLExpr1
;
class
GrGLSLExpr4
;
class
GrGLSLExpr1
:
public
GrGLSLExpr
<
GrGLSLExpr1
>
{
public
:
GrGLSLExpr1
(
)
:
INHERITED
(
)
{
}
explicit
GrGLSLExpr1
(
int
v
)
:
INHERITED
(
v
)
{
}
GrGLSLExpr1
(
const
char
*
expr
)
:
INHERITED
(
expr
)
{
}
GrGLSLExpr1
(
const
SkString
&
expr
)
:
INHERITED
(
expr
)
{
}
static
GrGLSLExpr1
VectorCast
(
const
GrGLSLExpr1
&
expr
)
;
private
:
GrGLSLExpr1
(
const
char
format
[
]
const
char
in0
[
]
)
:
INHERITED
(
format
in0
)
{
}
GrGLSLExpr1
(
const
char
format
[
]
const
char
in0
[
]
const
char
in1
[
]
)
:
INHERITED
(
format
in0
in1
)
{
}
static
const
char
*
ZerosStr
(
)
;
static
const
char
*
OnesStr
(
)
;
static
const
char
*
CastStr
(
)
;
static
const
char
*
CastIntStr
(
)
;
friend
GrGLSLExpr1
operator
*
(
const
GrGLSLExpr1
&
in0
const
GrGLSLExpr1
&
in1
)
;
friend
GrGLSLExpr1
operator
+
(
const
GrGLSLExpr1
&
in0
const
GrGLSLExpr1
&
in1
)
;
friend
GrGLSLExpr1
operator
-
(
const
GrGLSLExpr1
&
in0
const
GrGLSLExpr1
&
in1
)
;
friend
class
GrGLSLExpr
<
GrGLSLExpr1
>
;
friend
class
GrGLSLExpr
<
GrGLSLExpr4
>
;
typedef
GrGLSLExpr
<
GrGLSLExpr1
>
INHERITED
;
}
;
class
GrGLSLExpr4
:
public
GrGLSLExpr
<
GrGLSLExpr4
>
{
public
:
GrGLSLExpr4
(
)
:
INHERITED
(
)
{
}
explicit
GrGLSLExpr4
(
int
v
)
:
INHERITED
(
v
)
{
}
GrGLSLExpr4
(
const
char
*
expr
)
:
INHERITED
(
expr
)
{
}
GrGLSLExpr4
(
const
SkString
&
expr
)
:
INHERITED
(
expr
)
{
}
typedef
GrGLSLExpr1
AExpr
;
AExpr
a
(
)
const
;
static
GrGLSLExpr4
VectorCast
(
const
GrGLSLExpr1
&
expr
)
;
static
GrGLSLExpr4
VectorCast
(
const
GrGLSLExpr4
&
expr
)
;
private
:
GrGLSLExpr4
(
const
char
format
[
]
const
char
in0
[
]
)
:
INHERITED
(
format
in0
)
{
}
GrGLSLExpr4
(
const
char
format
[
]
const
char
in0
[
]
const
char
in1
[
]
)
:
INHERITED
(
format
in0
in1
)
{
}
static
const
char
*
ZerosStr
(
)
;
static
const
char
*
OnesStr
(
)
;
static
const
char
*
CastStr
(
)
;
static
const
char
*
CastIntStr
(
)
;
friend
GrGLSLExpr4
operator
*
(
const
GrGLSLExpr1
&
in0
const
GrGLSLExpr4
&
in1
)
;
friend
GrGLSLExpr4
operator
+
(
const
GrGLSLExpr1
&
in0
const
GrGLSLExpr4
&
in1
)
;
friend
GrGLSLExpr4
operator
-
(
const
GrGLSLExpr1
&
in0
const
GrGLSLExpr4
&
in1
)
;
friend
GrGLSLExpr4
operator
*
(
const
GrGLSLExpr4
&
in0
const
GrGLSLExpr1
&
in1
)
;
friend
GrGLSLExpr4
operator
+
(
const
GrGLSLExpr4
&
in0
const
GrGLSLExpr1
&
in1
)
;
friend
GrGLSLExpr4
operator
-
(
const
GrGLSLExpr4
&
in0
const
GrGLSLExpr1
&
in1
)
;
friend
GrGLSLExpr4
operator
*
(
const
GrGLSLExpr4
&
in0
const
GrGLSLExpr4
&
in1
)
;
friend
GrGLSLExpr4
operator
+
(
const
GrGLSLExpr4
&
in0
const
GrGLSLExpr4
&
in1
)
;
friend
GrGLSLExpr4
operator
-
(
const
GrGLSLExpr4
&
in0
const
GrGLSLExpr4
&
in1
)
;
friend
class
GrGLSLExpr
<
GrGLSLExpr4
>
;
typedef
GrGLSLExpr
<
GrGLSLExpr4
>
INHERITED
;
}
;
void
GrGLSLMulVarBy4f
(
SkString
*
outAppend
const
char
*
vec4VarName
const
GrGLSLExpr4
&
mulFactor
)
;
#
include
"
GrGLSL_impl
.
h
"
#
endif
