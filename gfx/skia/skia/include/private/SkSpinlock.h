#
ifndef
SkSpinlock_DEFINED
#
define
SkSpinlock_DEFINED
#
include
"
SkTypes
.
h
"
#
include
<
atomic
>
class
SkSpinlock
{
public
:
constexpr
SkSpinlock
(
)
=
default
;
void
acquire
(
)
{
if
(
fLocked
.
exchange
(
true
std
:
:
memory_order_acquire
)
)
{
this
-
>
contendedAcquire
(
)
;
}
}
bool
tryAcquire
(
)
{
if
(
fLocked
.
exchange
(
true
std
:
:
memory_order_acquire
)
)
{
return
false
;
}
return
true
;
}
void
release
(
)
{
fLocked
.
store
(
false
std
:
:
memory_order_release
)
;
}
private
:
SK_API
void
contendedAcquire
(
)
;
std
:
:
atomic
<
bool
>
fLocked
{
false
}
;
}
;
#
endif
