#
ifndef
GrAuditTrail_DEFINED
#
define
GrAuditTrail_DEFINED
#
include
"
GrConfig
.
h
"
#
include
"
GrGpuResource
.
h
"
#
include
"
GrRenderTargetProxy
.
h
"
#
include
"
SkRect
.
h
"
#
include
"
SkString
.
h
"
#
include
"
SkTArray
.
h
"
#
include
"
SkTHash
.
h
"
class
GrOp
;
class
GrAuditTrail
{
public
:
GrAuditTrail
(
)
:
fClientID
(
kGrAuditTrailInvalidID
)
fEnabled
(
false
)
{
}
class
AutoEnable
{
public
:
AutoEnable
(
GrAuditTrail
*
auditTrail
)
:
fAuditTrail
(
auditTrail
)
{
SkASSERT
(
!
fAuditTrail
-
>
isEnabled
(
)
)
;
fAuditTrail
-
>
setEnabled
(
true
)
;
}
~
AutoEnable
(
)
{
SkASSERT
(
fAuditTrail
-
>
isEnabled
(
)
)
;
fAuditTrail
-
>
setEnabled
(
false
)
;
}
private
:
GrAuditTrail
*
fAuditTrail
;
}
;
class
AutoManageOpList
{
public
:
AutoManageOpList
(
GrAuditTrail
*
auditTrail
)
:
fAutoEnable
(
auditTrail
)
fAuditTrail
(
auditTrail
)
{
}
~
AutoManageOpList
(
)
{
fAuditTrail
-
>
fullReset
(
)
;
}
private
:
AutoEnable
fAutoEnable
;
GrAuditTrail
*
fAuditTrail
;
}
;
class
AutoCollectOps
{
public
:
AutoCollectOps
(
GrAuditTrail
*
auditTrail
int
clientID
)
:
fAutoEnable
(
auditTrail
)
fAuditTrail
(
auditTrail
)
{
fAuditTrail
-
>
setClientID
(
clientID
)
;
}
~
AutoCollectOps
(
)
{
fAuditTrail
-
>
setClientID
(
kGrAuditTrailInvalidID
)
;
}
private
:
AutoEnable
fAutoEnable
;
GrAuditTrail
*
fAuditTrail
;
}
;
void
pushFrame
(
const
char
*
framename
)
{
SkASSERT
(
fEnabled
)
;
fCurrentStackTrace
.
push_back
(
SkString
(
framename
)
)
;
}
void
addOp
(
const
GrOp
*
GrGpuResource
:
:
UniqueID
resourceID
GrRenderTargetProxy
:
:
UniqueID
proxyID
)
;
void
opsCombined
(
const
GrOp
*
consumer
const
GrOp
*
consumed
)
;
SkString
toJson
(
bool
prettyPrint
=
false
)
const
;
SkString
toJson
(
int
clientID
bool
prettyPrint
=
false
)
const
;
bool
isEnabled
(
)
{
return
fEnabled
;
}
void
setEnabled
(
bool
enabled
)
{
fEnabled
=
enabled
;
}
void
setClientID
(
int
clientID
)
{
fClientID
=
clientID
;
}
struct
OpInfo
{
bool
sameDecision
(
GrGpuResource
:
:
UniqueID
resourceUniqueID
GrSurfaceProxy
:
:
UniqueID
proxyUniqueID
)
const
{
return
(
fResourceUniqueID
=
=
resourceUniqueID
)
=
=
(
fProxyUniqueID
=
=
proxyUniqueID
)
;
}
struct
Op
{
int
fClientID
;
SkRect
fBounds
;
}
;
SkRect
fBounds
;
GrGpuResource
:
:
UniqueID
fResourceUniqueID
;
GrSurfaceProxy
:
:
UniqueID
fProxyUniqueID
;
SkTArray
<
Op
>
fOps
;
}
;
void
getBoundsByClientID
(
SkTArray
<
OpInfo
>
*
outInfo
int
clientID
)
;
void
getBoundsByOpListID
(
OpInfo
*
outInfo
int
opListID
)
;
void
fullReset
(
)
;
static
const
int
kGrAuditTrailInvalidID
;
private
:
struct
Op
{
SkString
toJson
(
)
const
;
SkString
fName
;
SkTArray
<
SkString
>
fStackTrace
;
SkRect
fBounds
;
int
fClientID
;
int
fOpListID
;
int
fChildID
;
}
;
typedef
SkTArray
<
std
:
:
unique_ptr
<
Op
>
true
>
OpPool
;
typedef
SkTArray
<
Op
*
>
Ops
;
struct
OpNode
{
OpNode
(
const
GrGpuResource
:
:
UniqueID
&
resourceID
const
GrSurfaceProxy
:
:
UniqueID
&
proxyID
)
:
fResourceUniqueID
(
resourceID
)
fProxyUniqueID
(
proxyID
)
{
}
SkString
toJson
(
)
const
;
SkRect
fBounds
;
Ops
fChildren
;
const
GrGpuResource
:
:
UniqueID
fResourceUniqueID
;
const
GrSurfaceProxy
:
:
UniqueID
fProxyUniqueID
;
}
;
typedef
SkTArray
<
std
:
:
unique_ptr
<
OpNode
>
true
>
OpList
;
void
copyOutFromOpList
(
OpInfo
*
outOpInfo
int
opListID
)
;
template
<
typename
T
>
static
void
JsonifyTArray
(
SkString
*
json
const
char
*
name
const
T
&
array
bool
addComma
)
;
OpPool
fOpPool
;
SkTHashMap
<
uint32_t
int
>
fIDLookup
;
SkTHashMap
<
int
Ops
*
>
fClientIDLookup
;
OpList
fOpList
;
SkTArray
<
SkString
>
fCurrentStackTrace
;
int
fClientID
;
bool
fEnabled
;
}
;
#
define
GR_AUDIT_TRAIL_INVOKE_GUARD
(
audit_trail
invoke
.
.
.
)
\
if
(
audit_trail
-
>
isEnabled
(
)
)
{
\
audit_trail
-
>
invoke
(
__VA_ARGS__
)
;
\
}
#
define
GR_AUDIT_TRAIL_AUTO_FRAME
(
audit_trail
framename
)
\
GR_AUDIT_TRAIL_INVOKE_GUARD
(
(
audit_trail
)
pushFrame
framename
)
;
#
define
GR_AUDIT_TRAIL_RESET
(
audit_trail
)
#
define
GR_AUDIT_TRAIL_ADD_OP
(
audit_trail
op
resource_id
proxy_id
)
\
GR_AUDIT_TRAIL_INVOKE_GUARD
(
audit_trail
addOp
op
resource_id
proxy_id
)
;
#
define
GR_AUDIT_TRAIL_OPS_RESULT_COMBINED
(
audit_trail
combineWith
op
)
\
GR_AUDIT_TRAIL_INVOKE_GUARD
(
audit_trail
opsCombined
combineWith
op
)
;
#
define
GR_AUDIT_TRAIL_OP_RESULT_NEW
(
audit_trail
op
)
#
endif
