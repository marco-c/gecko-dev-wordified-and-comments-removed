#
ifndef
SkOnce_DEFINED
#
define
SkOnce_DEFINED
#
include
"
include
/
private
/
base
/
SkThreadAnnotations
.
h
"
#
include
<
atomic
>
#
include
<
cstdint
>
#
include
<
utility
>
class
SkOnce
{
public
:
constexpr
SkOnce
(
)
=
default
;
template
<
typename
Fn
typename
.
.
.
Args
>
void
operator
(
)
(
Fn
&
&
fn
Args
&
&
.
.
.
args
)
{
auto
state
=
fState
.
load
(
std
:
:
memory_order_acquire
)
;
if
(
state
=
=
Done
)
{
return
;
}
if
(
state
=
=
NotStarted
&
&
fState
.
compare_exchange_strong
(
state
Claimed
std
:
:
memory_order_relaxed
std
:
:
memory_order_relaxed
)
)
{
fn
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
return
fState
.
store
(
Done
std
:
:
memory_order_release
)
;
}
SK_POTENTIALLY_BLOCKING_REGION_BEGIN
;
while
(
fState
.
load
(
std
:
:
memory_order_acquire
)
!
=
Done
)
{
}
SK_POTENTIALLY_BLOCKING_REGION_END
;
}
private
:
enum
State
:
uint8_t
{
NotStarted
Claimed
Done
}
;
std
:
:
atomic
<
uint8_t
>
fState
{
NotStarted
}
;
}
;
#
endif
