#
ifndef
SkAttributes_DEFINED
#
define
SkAttributes_DEFINED
#
include
"
include
/
private
/
base
/
SkFeatures
.
h
"
#
include
"
include
/
private
/
base
/
SkLoadUserConfig
.
h
"
#
if
defined
(
__clang__
)
|
|
defined
(
__GNUC__
)
#
define
SK_ATTRIBUTE
(
attr
)
__attribute__
(
(
attr
)
)
#
else
#
define
SK_ATTRIBUTE
(
attr
)
#
endif
#
if
!
defined
(
SK_UNUSED
)
#
if
!
defined
(
__clang__
)
&
&
defined
(
_MSC_VER
)
#
define
SK_UNUSED
__pragma
(
warning
(
suppress
:
4189
)
)
#
else
#
define
SK_UNUSED
SK_ATTRIBUTE
(
unused
)
#
endif
#
endif
#
if
!
defined
(
SK_WARN_UNUSED_RESULT
)
#
define
SK_WARN_UNUSED_RESULT
SK_ATTRIBUTE
(
warn_unused_result
)
#
endif
#
if
!
defined
(
SK_ALWAYS_INLINE
)
#
if
defined
(
SK_BUILD_FOR_WIN
)
#
define
SK_ALWAYS_INLINE
__forceinline
#
else
#
define
SK_ALWAYS_INLINE
SK_ATTRIBUTE
(
always_inline
)
inline
#
endif
#
endif
#
if
!
defined
(
SK_NEVER_INLINE
)
#
if
defined
(
SK_BUILD_FOR_WIN
)
#
define
SK_NEVER_INLINE
__declspec
(
noinline
)
#
else
#
define
SK_NEVER_INLINE
SK_ATTRIBUTE
(
noinline
)
#
endif
#
endif
#
if
!
defined
(
SK_PRINTF_LIKE
)
#
define
SK_PRINTF_LIKE
(
A
B
)
SK_ATTRIBUTE
(
format
(
printf
(
A
)
(
B
)
)
)
#
endif
#
if
!
defined
(
SK_NO_SANITIZE
)
#
define
SK_NO_SANITIZE
(
A
)
SK_ATTRIBUTE
(
no_sanitize
(
A
)
)
#
endif
#
if
!
defined
(
SK_TRIVIAL_ABI
)
#
define
SK_TRIVIAL_ABI
#
endif
#
endif
