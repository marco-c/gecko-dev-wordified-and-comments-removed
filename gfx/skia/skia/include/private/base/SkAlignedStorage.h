#
ifndef
SkAlignedStorage_DEFINED
#
define
SkAlignedStorage_DEFINED
#
include
<
cstddef
>
#
include
<
iterator
>
template
<
int
N
typename
T
>
class
SkAlignedSTStorage
{
public
:
SkAlignedSTStorage
(
)
{
}
SkAlignedSTStorage
(
SkAlignedSTStorage
&
&
)
=
delete
;
SkAlignedSTStorage
(
const
SkAlignedSTStorage
&
)
=
delete
;
SkAlignedSTStorage
&
operator
=
(
SkAlignedSTStorage
&
&
)
=
delete
;
SkAlignedSTStorage
&
operator
=
(
const
SkAlignedSTStorage
&
)
=
delete
;
void
*
get
(
)
{
return
fStorage
;
}
const
void
*
get
(
)
const
{
return
fStorage
;
}
std
:
:
byte
*
data
(
)
{
return
fStorage
;
}
const
std
:
:
byte
*
data
(
)
const
{
return
fStorage
;
}
size_t
size
(
)
const
{
return
std
:
:
size
(
fStorage
)
;
}
private
:
alignas
(
T
)
std
:
:
byte
fStorage
[
sizeof
(
T
)
*
N
]
;
}
;
#
endif
