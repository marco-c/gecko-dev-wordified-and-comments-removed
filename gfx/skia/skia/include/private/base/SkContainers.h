#
ifndef
SkContainers_DEFINED
#
define
SkContainers_DEFINED
#
include
"
include
/
private
/
base
/
SkAPI
.
h
"
#
include
"
include
/
private
/
base
/
SkSpan_impl
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
class
SK_SPI
SkContainerAllocator
{
public
:
SkContainerAllocator
(
size_t
sizeOfT
int
maxCapacity
)
:
fSizeOfT
{
sizeOfT
}
fMaxCapacity
{
maxCapacity
}
{
}
SkSpan
<
std
:
:
byte
>
allocate
(
int
capacity
double
growthFactor
=
1
.
0
)
;
private
:
friend
struct
SkContainerAllocatorTestingPeer
;
static
constexpr
int64_t
kCapacityMultiple
=
8
;
size_t
roundUpCapacity
(
int64_t
capacity
)
const
;
size_t
growthFactorCapacity
(
int
capacity
double
growthFactor
)
const
;
const
size_t
fSizeOfT
;
const
int64_t
fMaxCapacity
;
}
;
SkSpan
<
std
:
:
byte
>
sk_allocate_canfail
(
size_t
size
)
;
SkSpan
<
std
:
:
byte
>
sk_allocate_throw
(
size_t
size
)
;
SK_SPI
void
sk_report_container_overflow_and_die
(
)
;
#
endif
