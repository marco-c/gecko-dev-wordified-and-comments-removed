#
ifndef
SkMacros_DEFINED
#
define
SkMacros_DEFINED
#
include
"
include
/
private
/
base
/
SkTo
.
h
"
#
define
SK_MACRO_CONCAT
(
X
Y
)
SK_MACRO_CONCAT_IMPL_PRIV
(
X
Y
)
#
define
SK_MACRO_CONCAT_IMPL_PRIV
(
X
Y
)
X
#
#
Y
#
define
SK_MACRO_APPEND_LINE
(
name
)
SK_MACRO_CONCAT
(
name
__LINE__
)
#
define
SK_MACRO_APPEND_COUNTER
(
name
)
SK_MACRO_CONCAT
(
name
__COUNTER__
)
#
if
defined
(
__clang__
)
#
define
SK_BEGIN_REQUIRE_DENSE
_Pragma
(
"
GCC
diagnostic
push
"
)
\
_Pragma
(
"
GCC
diagnostic
error
\
"
-
Wpadded
\
"
"
)
#
define
SK_END_REQUIRE_DENSE
_Pragma
(
"
GCC
diagnostic
pop
"
)
#
else
#
define
SK_BEGIN_REQUIRE_DENSE
#
define
SK_END_REQUIRE_DENSE
#
endif
#
ifdef
MOZ_SKIA
#
ifdef
MOZ_ASAN
#
include
"
mozilla
/
MemoryChecking
.
h
"
#
define
SK_INTENTIONALLY_LEAKED
(
X
)
MOZ_LSAN_INTENTIONALLY_LEAK_OBJECT
(
X
)
#
else
#
define
SK_INTENTIONALLY_LEAKED
(
x
)
(
(
void
)
0
)
#
endif
#
else
#
if
defined
(
__clang__
)
&
&
defined
(
__has_feature
)
#
if
__has_feature
(
leak_sanitizer
)
|
|
__has_feature
(
address_sanitizer
)
extern
"
C
"
{
void
__lsan_ignore_object
(
const
void
*
p
)
;
}
#
define
SK_INTENTIONALLY_LEAKED
(
X
)
__lsan_ignore_object
(
X
)
#
else
#
define
SK_INTENTIONALLY_LEAKED
(
X
)
(
(
void
)
0
)
#
endif
#
else
#
define
SK_INTENTIONALLY_LEAKED
(
X
)
(
(
void
)
0
)
#
endif
#
endif
#
define
SK_INIT_TO_AVOID_WARNING
=
0
#
define
SK_MAKE_BITFIELD_OPS
(
X
)
\
inline
X
operator
~
(
X
a
)
{
\
using
U
=
std
:
:
underlying_type_t
<
X
>
;
\
return
(
X
)
(
~
static_cast
<
U
>
(
a
)
)
;
\
}
\
inline
X
operator
|
(
X
a
X
b
)
{
\
using
U
=
std
:
:
underlying_type_t
<
X
>
;
\
return
(
X
)
(
static_cast
<
U
>
(
a
)
|
static_cast
<
U
>
(
b
)
)
;
\
}
\
inline
X
&
operator
|
=
(
X
&
a
X
b
)
{
\
return
(
a
=
a
|
b
)
;
\
}
\
inline
X
operator
&
(
X
a
X
b
)
{
\
using
U
=
std
:
:
underlying_type_t
<
X
>
;
\
return
(
X
)
(
static_cast
<
U
>
(
a
)
&
static_cast
<
U
>
(
b
)
)
;
\
}
\
inline
X
&
operator
&
=
(
X
&
a
X
b
)
{
\
return
(
a
=
a
&
b
)
;
\
}
#
define
SK_DECL_BITFIELD_OPS_FRIENDS
(
X
)
\
friend
X
operator
~
(
X
a
)
;
\
friend
X
operator
|
(
X
a
X
b
)
;
\
friend
X
&
operator
|
=
(
X
&
a
X
b
)
;
\
\
friend
X
operator
&
(
X
a
X
b
)
;
\
friend
X
&
operator
&
=
(
X
&
a
X
b
)
;
template
<
typename
TFlags
>
class
SkTFlagsMask
{
public
:
constexpr
explicit
SkTFlagsMask
(
TFlags
value
)
:
SkTFlagsMask
(
static_cast
<
int
>
(
value
)
)
{
}
constexpr
explicit
SkTFlagsMask
(
int
value
)
:
fValue
(
value
)
{
}
constexpr
int
value
(
)
const
{
return
fValue
;
}
private
:
const
int
fValue
;
}
;
#
define
SK_MAKE_BITFIELD_CLASS_OPS
(
X
)
\
[
[
maybe_unused
]
]
constexpr
SkTFlagsMask
<
X
>
operator
~
(
X
a
)
{
\
return
SkTFlagsMask
<
X
>
(
~
static_cast
<
int
>
(
a
)
)
;
\
}
\
[
[
maybe_unused
]
]
constexpr
X
operator
|
(
X
a
X
b
)
{
\
return
static_cast
<
X
>
(
static_cast
<
int
>
(
a
)
|
static_cast
<
int
>
(
b
)
)
;
\
}
\
[
[
maybe_unused
]
]
inline
X
&
operator
|
=
(
X
&
a
X
b
)
{
\
return
(
a
=
a
|
b
)
;
\
}
\
[
[
maybe_unused
]
]
constexpr
bool
operator
&
(
X
a
X
b
)
{
\
return
SkToBool
(
static_cast
<
int
>
(
a
)
&
static_cast
<
int
>
(
b
)
)
;
\
}
\
[
[
maybe_unused
]
]
constexpr
SkTFlagsMask
<
X
>
operator
|
(
SkTFlagsMask
<
X
>
a
SkTFlagsMask
<
X
>
b
)
{
\
return
SkTFlagsMask
<
X
>
(
a
.
value
(
)
|
b
.
value
(
)
)
;
\
}
\
[
[
maybe_unused
]
]
constexpr
SkTFlagsMask
<
X
>
operator
|
(
SkTFlagsMask
<
X
>
a
X
b
)
{
\
return
SkTFlagsMask
<
X
>
(
a
.
value
(
)
|
static_cast
<
int
>
(
b
)
)
;
\
}
\
[
[
maybe_unused
]
]
constexpr
SkTFlagsMask
<
X
>
operator
|
(
X
a
SkTFlagsMask
<
X
>
b
)
{
\
return
SkTFlagsMask
<
X
>
(
static_cast
<
int
>
(
a
)
|
b
.
value
(
)
)
;
\
}
\
[
[
maybe_unused
]
]
constexpr
X
operator
&
(
SkTFlagsMask
<
X
>
a
SkTFlagsMask
<
X
>
b
)
{
\
return
static_cast
<
X
>
(
a
.
value
(
)
&
b
.
value
(
)
)
;
\
}
\
[
[
maybe_unused
]
]
constexpr
X
operator
&
(
SkTFlagsMask
<
X
>
a
X
b
)
{
\
return
static_cast
<
X
>
(
a
.
value
(
)
&
static_cast
<
int
>
(
b
)
)
;
\
}
\
[
[
maybe_unused
]
]
constexpr
X
operator
&
(
X
a
SkTFlagsMask
<
X
>
b
)
{
\
return
static_cast
<
X
>
(
static_cast
<
int
>
(
a
)
&
b
.
value
(
)
)
;
\
}
\
[
[
maybe_unused
]
]
inline
X
&
operator
&
=
(
X
&
a
SkTFlagsMask
<
X
>
b
)
{
\
return
(
a
=
a
&
b
)
;
\
}
\
#
define
SK_DECL_BITFIELD_CLASS_OPS_FRIENDS
(
X
)
\
friend
constexpr
SkTFlagsMask
<
X
>
operator
~
(
X
)
;
\
friend
constexpr
X
operator
|
(
X
X
)
;
\
friend
X
&
operator
|
=
(
X
&
X
)
;
\
friend
constexpr
bool
operator
&
(
X
X
)
;
\
friend
constexpr
SkTFlagsMask
<
X
>
operator
|
(
SkTFlagsMask
<
X
>
SkTFlagsMask
<
X
>
)
;
\
friend
constexpr
SkTFlagsMask
<
X
>
operator
|
(
SkTFlagsMask
<
X
>
X
)
;
\
friend
constexpr
SkTFlagsMask
<
X
>
operator
|
(
X
SkTFlagsMask
<
X
>
)
;
\
friend
constexpr
X
operator
&
(
SkTFlagsMask
<
X
>
SkTFlagsMask
<
X
>
)
;
\
friend
constexpr
X
operator
&
(
SkTFlagsMask
<
X
>
X
)
;
\
friend
constexpr
X
operator
&
(
X
SkTFlagsMask
<
X
>
)
;
\
friend
X
&
operator
&
=
(
X
&
SkTFlagsMask
<
X
>
)
#
endif
