#
ifndef
SkTypeTraits_DEFINED
#
define
SkTypeTraits_DEFINED
#
include
<
memory
>
#
include
<
type_traits
>
template
<
typename
typename
=
void
>
struct
sk_has_trivially_relocatable_member
:
std
:
:
false_type
{
}
;
template
<
typename
T
>
struct
sk_has_trivially_relocatable_member
<
T
std
:
:
void_t
<
typename
T
:
:
sk_is_trivially_relocatable
>
>
:
T
:
:
sk_is_trivially_relocatable
{
}
;
template
<
typename
T
>
struct
sk_is_trivially_relocatable
:
std
:
:
disjunction
<
std
:
:
is_trivially_copyable
<
T
>
sk_has_trivially_relocatable_member
<
T
>
>
{
}
;
template
<
typename
T
>
struct
sk_is_trivially_relocatable
<
std
:
:
unique_ptr
<
T
>
>
:
std
:
:
true_type
{
}
;
template
<
typename
T
>
inline
constexpr
bool
sk_is_trivially_relocatable_v
=
sk_is_trivially_relocatable
<
T
>
:
:
value
;
#
endif
