#
ifndef
SkAssert_DEFINED
#
define
SkAssert_DEFINED
#
include
"
include
/
private
/
base
/
SkAPI
.
h
"
#
include
"
include
/
private
/
base
/
SkDebug
.
h
"
[
[
noreturn
]
]
SK_API
extern
void
sk_abort_no_print
(
void
)
;
SK_API
extern
bool
sk_abort_is_enabled
(
)
;
#
if
defined
(
SK_BUILD_FOR_GOOGLE3
)
void
SkDebugfForDumpStackTrace
(
const
char
*
data
void
*
unused
)
;
namespace
base
{
void
DumpStackTrace
(
int
skip_count
void
w
(
const
char
*
void
*
)
void
*
arg
)
;
}
#
define
SK_DUMP_GOOGLE3_STACK
(
)
:
:
base
:
:
DumpStackTrace
(
0
SkDebugfForDumpStackTrace
nullptr
)
#
else
#
define
SK_DUMP_GOOGLE3_STACK
(
)
#
endif
#
if
!
defined
(
SK_ABORT
)
#
if
defined
(
SK_BUILD_FOR_WIN
)
#
define
SK_DUMP_LINE_FORMAT
"
%
s
(
%
d
)
"
#
else
#
define
SK_DUMP_LINE_FORMAT
"
%
s
:
%
d
"
#
endif
#
define
SK_ABORT
(
message
.
.
.
)
\
do
{
if
(
sk_abort_is_enabled
(
)
)
{
\
SkDebugf
(
SK_DUMP_LINE_FORMAT
"
:
fatal
error
:
\
"
"
message
"
\
"
\
n
"
\
__FILE__
__LINE__
#
#
__VA_ARGS__
)
;
\
SK_DUMP_GOOGLE3_STACK
(
)
;
\
sk_abort_no_print
(
)
;
\
}
}
while
(
false
)
#
endif
#
define
SkASSERT_RELEASE
(
cond
)
\
static_cast
<
void
>
(
(
cond
)
?
(
void
)
0
:
[
]
{
SK_ABORT
(
"
assert
(
%
s
)
"
#
cond
)
;
}
(
)
)
#
if
defined
(
SK_DEBUG
)
#
define
SkASSERT
(
cond
)
SkASSERT_RELEASE
(
cond
)
#
define
SkASSERTF
(
cond
fmt
.
.
.
)
static_cast
<
void
>
(
(
cond
)
?
(
void
)
0
:
[
&
]
{
\
SkDebugf
(
fmt
"
\
n
"
#
#
__VA_ARGS__
)
;
\
SK_ABORT
(
"
assert
(
%
s
)
"
#
cond
)
;
\
}
(
)
)
#
define
SkDEBUGFAIL
(
message
)
SK_ABORT
(
"
%
s
"
message
)
#
define
SkDEBUGFAILF
(
fmt
.
.
.
)
SK_ABORT
(
fmt
#
#
__VA_ARGS__
)
#
define
SkAssertResult
(
cond
)
SkASSERT
(
cond
)
#
else
#
define
SkASSERT
(
cond
)
static_cast
<
void
>
(
0
)
#
define
SkASSERTF
(
cond
fmt
.
.
.
)
static_cast
<
void
>
(
0
)
#
define
SkDEBUGFAIL
(
message
)
#
define
SkDEBUGFAILF
(
fmt
.
.
.
)
#
define
SkAssertResult
(
cond
)
if
(
cond
)
{
}
do
{
}
while
(
false
)
#
endif
#
if
!
defined
(
SkUNREACHABLE
)
#
if
defined
(
_MSC_VER
)
&
&
!
defined
(
__clang__
)
#
include
<
intrin
.
h
>
#
define
FAST_FAIL_INVALID_ARG
5
[
[
noreturn
]
]
static
inline
void
sk_fast_fail
(
)
{
__fastfail
(
FAST_FAIL_INVALID_ARG
)
;
}
#
define
SkUNREACHABLE
sk_fast_fail
(
)
#
else
#
define
SkUNREACHABLE
__builtin_trap
(
)
#
endif
#
endif
#
endif
