#
ifndef
SkMath_DEFINED
#
define
SkMath_DEFINED
#
include
"
include
/
private
/
base
/
SkAssert
.
h
"
#
include
"
include
/
private
/
base
/
SkCPUTypes
.
h
"
#
include
<
cstdint
>
#
include
<
climits
>
static
constexpr
int16_t
SK_MaxS16
=
INT16_MAX
;
static
constexpr
int16_t
SK_MinS16
=
-
SK_MaxS16
;
static
constexpr
int32_t
SK_MaxS32
=
INT32_MAX
;
static
constexpr
int32_t
SK_MinS32
=
-
SK_MaxS32
;
static
constexpr
int32_t
SK_NaN32
=
INT32_MIN
;
static
constexpr
int64_t
SK_MaxS64
=
INT64_MAX
;
static
constexpr
int64_t
SK_MinS64
=
-
SK_MaxS64
;
static
inline
int64_t
sk_64_mul
(
int64_t
a
int64_t
b
)
{
return
a
*
b
;
}
static
inline
constexpr
int32_t
SkLeftShift
(
int32_t
value
int32_t
shift
)
{
return
(
int32_t
)
(
(
uint32_t
)
value
<
<
shift
)
;
}
static
inline
constexpr
int64_t
SkLeftShift
(
int64_t
value
int32_t
shift
)
{
return
(
int64_t
)
(
(
uint64_t
)
value
<
<
shift
)
;
}
template
<
typename
T
>
constexpr
inline
bool
SkIsPow2
(
T
value
)
{
return
(
value
&
(
value
-
1
)
)
=
=
0
;
}
static
inline
unsigned
SkMul16ShiftRound
(
U16CPU
a
U16CPU
b
int
shift
)
{
SkASSERT
(
a
<
=
32767
)
;
SkASSERT
(
b
<
=
32767
)
;
SkASSERT
(
shift
>
0
&
&
shift
<
=
8
)
;
unsigned
prod
=
a
*
b
+
(
1
<
<
(
shift
-
1
)
)
;
return
(
prod
+
(
prod
>
>
shift
)
)
>
>
shift
;
}
static
inline
U8CPU
SkMulDiv255Round
(
U16CPU
a
U16CPU
b
)
{
return
SkMul16ShiftRound
(
a
b
8
)
;
}
#
endif
