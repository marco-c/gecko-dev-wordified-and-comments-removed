#
ifndef
SKSL_DEFINES
#
define
SKSL_DEFINES
#
include
<
cstdint
>
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
using
SKSL_INT
=
int64_t
;
using
SKSL_FLOAT
=
float
;
namespace
SkSL
{
class
Expression
;
class
Statement
;
using
ComponentArray
=
SkSTArray
<
4
int8_t
>
;
class
ExpressionArray
:
public
SkSTArray
<
2
std
:
:
unique_ptr
<
Expression
>
>
{
public
:
using
SkSTArray
:
:
SkSTArray
;
ExpressionArray
clone
(
)
const
;
}
;
using
StatementArray
=
SkSTArray
<
2
std
:
:
unique_ptr
<
Statement
>
>
;
static
constexpr
int
kDefaultInlineThreshold
=
50
;
static
constexpr
int
kVariableSlotLimit
=
100000
;
namespace
SwizzleComponent
{
enum
Type
:
int8_t
{
X
=
0
Y
=
1
Z
=
2
W
=
3
R
=
4
G
=
5
B
=
6
A
=
7
S
=
8
T
=
9
P
=
10
Q
=
11
UL
=
12
UT
=
13
UR
=
14
UB
=
15
ZERO
ONE
}
;
}
}
#
endif
