#
ifndef
SkImageChromium_DEFINED
#
define
SkImageChromium_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
private
/
base
/
SkAPI
.
h
"
class
GrBackendFormat
;
class
GrContextThreadSafeProxy
;
class
GrPromiseImageTexture
;
class
GrDirectContext
;
class
GrYUVABackendTextureInfo
;
class
SkColorSpace
;
class
SkImage
;
enum
SkAlphaType
:
int
;
enum
SkColorType
:
int
;
enum
GrSurfaceOrigin
:
int
;
namespace
skgpu
{
enum
class
Mipmapped
:
bool
;
}
struct
SkISize
;
namespace
SkImages
{
using
PromiseImageTextureContext
=
void
*
;
using
PromiseImageTextureFulfillProc
=
sk_sp
<
GrPromiseImageTexture
>
(
*
)
(
PromiseImageTextureContext
)
;
using
PromiseImageTextureReleaseProc
=
void
(
*
)
(
PromiseImageTextureContext
)
;
SK_API
sk_sp
<
SkImage
>
PromiseTextureFrom
(
sk_sp
<
GrContextThreadSafeProxy
>
gpuContextProxy
const
GrBackendFormat
&
backendFormat
SkISize
dimensions
skgpu
:
:
Mipmapped
mipmapped
GrSurfaceOrigin
origin
SkColorType
colorType
SkAlphaType
alphaType
sk_sp
<
SkColorSpace
>
colorSpace
PromiseImageTextureFulfillProc
textureFulfillProc
PromiseImageTextureReleaseProc
textureReleaseProc
PromiseImageTextureContext
textureContext
)
;
SK_API
sk_sp
<
SkImage
>
PromiseTextureFromYUVA
(
sk_sp
<
GrContextThreadSafeProxy
>
gpuContextProxy
const
GrYUVABackendTextureInfo
&
backendTextureInfo
sk_sp
<
SkColorSpace
>
imageColorSpace
PromiseImageTextureFulfillProc
textureFulfillProc
PromiseImageTextureReleaseProc
textureReleaseProc
PromiseImageTextureContext
textureContexts
[
]
)
;
SK_API
GrDirectContext
*
GetContext
(
const
SkImage
*
src
)
;
inline
GrDirectContext
*
GetContext
(
const
sk_sp
<
const
SkImage
>
&
src
)
{
return
GetContext
(
src
.
get
(
)
)
;
}
}
#
endif
