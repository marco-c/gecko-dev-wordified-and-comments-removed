#
ifndef
sktext_gpu_Slug_DEFINED
#
define
sktext_gpu_Slug_DEFINED
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
private
/
base
/
SkAPI
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
class
SkCanvas
;
class
SkData
;
class
SkPaint
;
class
SkReadBuffer
;
class
SkStrikeClient
;
class
SkTextBlob
;
class
SkWriteBuffer
;
struct
SkDeserialProcs
;
struct
SkPoint
;
namespace
sktext
:
:
gpu
{
class
SK_API
Slug
:
public
SkRefCnt
{
public
:
static
sk_sp
<
Slug
>
ConvertBlob
(
SkCanvas
*
canvas
const
SkTextBlob
&
blob
SkPoint
origin
const
SkPaint
&
paint
)
;
sk_sp
<
SkData
>
serialize
(
)
const
;
size_t
serialize
(
void
*
buffer
size_t
size
)
const
;
static
sk_sp
<
Slug
>
Deserialize
(
const
void
*
data
size_t
size
const
SkStrikeClient
*
client
=
nullptr
)
;
static
sk_sp
<
Slug
>
MakeFromBuffer
(
SkReadBuffer
&
buffer
)
;
static
void
AddDeserialProcs
(
SkDeserialProcs
*
procs
const
SkStrikeClient
*
client
=
nullptr
)
;
void
draw
(
SkCanvas
*
canvas
const
SkPaint
&
paint
)
const
;
virtual
SkRect
sourceBounds
(
)
const
=
0
;
virtual
SkRect
sourceBoundsWithOrigin
(
)
const
=
0
;
virtual
void
doFlatten
(
SkWriteBuffer
&
)
const
=
0
;
uint32_t
uniqueID
(
)
const
{
return
fUniqueID
;
}
private
:
static
uint32_t
NextUniqueID
(
)
;
const
uint32_t
fUniqueID
{
NextUniqueID
(
)
}
;
}
;
}
#
endif
