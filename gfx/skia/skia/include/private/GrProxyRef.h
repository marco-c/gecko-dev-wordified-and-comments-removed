#
ifndef
GrProxyRef_DEFINED
#
define
GrProxyRef_DEFINED
#
include
"
GrSurfaceProxy
.
h
"
#
include
"
GrTextureProxy
.
h
"
#
include
"
GrTypesPriv
.
h
"
template
<
typename
T
>
class
GrProxyRef
{
public
:
GrProxyRef
(
)
=
default
;
GrProxyRef
(
const
GrProxyRef
&
)
=
delete
;
GrProxyRef
&
operator
=
(
const
GrProxyRef
&
)
=
delete
;
GrProxyRef
(
sk_sp
<
T
>
proxy
GrIOType
ioType
)
{
this
-
>
setProxy
(
std
:
:
move
(
proxy
)
ioType
)
;
}
~
GrProxyRef
(
)
{
this
-
>
reset
(
)
;
}
void
setProxy
(
sk_sp
<
T
>
proxy
GrIOType
ioType
)
{
SkASSERT
(
!
fPendingIO
)
;
SkASSERT
(
SkToBool
(
fProxy
)
=
=
fOwnRef
)
;
SkSafeUnref
(
fProxy
)
;
if
(
!
proxy
)
{
fProxy
=
nullptr
;
fOwnRef
=
false
;
}
else
{
fProxy
=
proxy
.
release
(
)
;
fOwnRef
=
true
;
fIOType
=
ioType
;
}
}
T
*
get
(
)
const
{
return
fProxy
;
}
bool
ownsPendingIO
(
)
const
{
return
fPendingIO
;
}
GrIOType
ioType
(
)
const
{
return
fIOType
;
}
void
reset
(
)
{
if
(
fPendingIO
)
{
SkASSERT
(
fProxy
)
;
switch
(
fIOType
)
{
case
kRead_GrIOType
:
fProxy
-
>
completedRead
(
)
;
break
;
case
kWrite_GrIOType
:
fProxy
-
>
completedWrite
(
)
;
break
;
case
kRW_GrIOType
:
fProxy
-
>
completedRead
(
)
;
fProxy
-
>
completedWrite
(
)
;
break
;
}
fPendingIO
=
false
;
}
if
(
fOwnRef
)
{
SkASSERT
(
fProxy
)
;
fProxy
-
>
unref
(
)
;
fOwnRef
=
false
;
}
fProxy
=
nullptr
;
}
void
markPendingIO
(
)
const
{
SkASSERT
(
!
fPendingIO
)
;
SkASSERT
(
fProxy
)
;
fPendingIO
=
true
;
switch
(
fIOType
)
{
case
kRead_GrIOType
:
fProxy
-
>
addPendingRead
(
)
;
break
;
case
kWrite_GrIOType
:
fProxy
-
>
addPendingWrite
(
)
;
break
;
case
kRW_GrIOType
:
fProxy
-
>
addPendingRead
(
)
;
fProxy
-
>
addPendingWrite
(
)
;
break
;
}
}
void
removeRef
(
)
const
{
SkASSERT
(
fOwnRef
)
;
SkASSERT
(
fPendingIO
)
;
SkASSERT
(
fProxy
)
;
fProxy
-
>
unref
(
)
;
fOwnRef
=
false
;
}
void
pendingIOComplete
(
)
const
{
SkASSERT
(
fOwnRef
)
;
SkASSERT
(
fPendingIO
)
;
switch
(
fIOType
)
{
case
kRead_GrIOType
:
fProxy
-
>
completedRead
(
)
;
break
;
case
kWrite_GrIOType
:
fProxy
-
>
completedWrite
(
)
;
break
;
case
kRW_GrIOType
:
fProxy
-
>
completedRead
(
)
;
fProxy
-
>
completedWrite
(
)
;
break
;
}
fPendingIO
=
false
;
}
private
:
T
*
fProxy
=
nullptr
;
mutable
bool
fOwnRef
=
false
;
mutable
bool
fPendingIO
=
false
;
GrIOType
fIOType
=
kRead_GrIOType
;
}
;
using
GrSurfaceProxyRef
=
GrProxyRef
<
GrSurfaceProxy
>
;
using
GrTextureProxyRef
=
GrProxyRef
<
GrTextureProxy
>
;
#
endif
