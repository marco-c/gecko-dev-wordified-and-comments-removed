#
ifndef
GrRenderTargetProxy_DEFINED
#
define
GrRenderTargetProxy_DEFINED
#
include
"
GrRenderTarget
.
h
"
#
include
"
GrSurfaceProxy
.
h
"
#
include
"
GrTypes
.
h
"
class
GrResourceProvider
;
class
GrRenderTargetProxy
:
virtual
public
GrSurfaceProxy
{
public
:
GrRenderTargetProxy
*
asRenderTargetProxy
(
)
override
{
return
this
;
}
const
GrRenderTargetProxy
*
asRenderTargetProxy
(
)
const
override
{
return
this
;
}
GrRenderTarget
*
instantiate
(
GrResourceProvider
*
resourceProvider
)
;
bool
isStencilBufferMultisampled
(
)
const
{
return
fDesc
.
fSampleCnt
>
0
;
}
bool
isMixedSampled
(
)
const
{
return
fRenderTargetFlags
&
GrRenderTarget
:
:
Flags
:
:
kMixedSampled
;
}
bool
isUnifiedMultisampled
(
)
const
{
return
fDesc
.
fSampleCnt
>
0
&
&
!
this
-
>
isMixedSampled
(
)
;
}
int
numStencilSamples
(
)
const
{
return
fDesc
.
fSampleCnt
;
}
int
numColorSamples
(
)
const
{
return
this
-
>
isMixedSampled
(
)
?
0
:
fDesc
.
fSampleCnt
;
}
int
maxWindowRectangles
(
const
GrCaps
&
caps
)
const
;
GrRenderTarget
:
:
Flags
testingOnly_getFlags
(
)
const
;
bool
refsWrappedObjects
(
)
const
;
protected
:
friend
class
GrSurfaceProxy
;
GrRenderTargetProxy
(
const
GrCaps
&
const
GrSurfaceDesc
&
SkBackingFit
SkBudgeted
uint32_t
flags
)
;
GrRenderTargetProxy
(
sk_sp
<
GrSurface
>
)
;
private
:
size_t
onGpuMemorySize
(
)
const
override
;
GrRenderTarget
:
:
Flags
fRenderTargetFlags
;
typedef
GrSurfaceProxy
INHERITED
;
}
;
#
endif
