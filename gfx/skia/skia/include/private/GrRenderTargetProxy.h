#
ifndef
GrRenderTargetProxy_DEFINED
#
define
GrRenderTargetProxy_DEFINED
#
include
"
GrRenderTarget
.
h
"
#
include
"
GrRenderTargetPriv
.
h
"
#
include
"
GrSurfaceProxy
.
h
"
#
include
"
GrTypes
.
h
"
class
GrTextureProvider
;
class
GrRenderTargetProxy
:
public
GrSurfaceProxy
{
public
:
static
sk_sp
<
GrRenderTargetProxy
>
Make
(
const
GrCaps
&
const
GrSurfaceDesc
&
SkBackingFit
SkBudgeted
)
;
static
sk_sp
<
GrRenderTargetProxy
>
Make
(
const
GrCaps
&
sk_sp
<
GrRenderTarget
>
)
;
~
GrRenderTargetProxy
(
)
override
;
GrRenderTargetProxy
*
asRenderTargetProxy
(
)
override
{
return
this
;
}
const
GrRenderTargetProxy
*
asRenderTargetProxy
(
)
const
override
{
return
this
;
}
GrRenderTarget
*
instantiate
(
GrTextureProvider
*
texProvider
)
;
bool
isStencilBufferMultisampled
(
)
const
{
return
fDesc
.
fSampleCnt
>
0
;
}
bool
isMixedSampled
(
)
const
{
return
fFlags
&
GrRenderTargetPriv
:
:
Flags
:
:
kMixedSampled
;
}
bool
isUnifiedMultisampled
(
)
const
{
return
fDesc
.
fSampleCnt
>
0
&
&
!
this
-
>
isMixedSampled
(
)
;
}
int
numStencilSamples
(
)
const
{
return
fDesc
.
fSampleCnt
;
}
int
numColorSamples
(
)
const
{
return
this
-
>
isMixedSampled
(
)
?
0
:
fDesc
.
fSampleCnt
;
}
void
setLastDrawTarget
(
GrDrawTarget
*
dt
)
;
GrDrawTarget
*
getLastDrawTarget
(
)
{
return
fLastDrawTarget
;
}
GrRenderTargetPriv
:
:
Flags
testingOnly_getFlags
(
)
const
;
private
:
GrRenderTargetProxy
(
const
GrCaps
&
const
GrSurfaceDesc
&
SkBackingFit
SkBudgeted
)
;
GrRenderTargetProxy
(
const
GrCaps
&
sk_sp
<
GrRenderTarget
>
rt
)
;
sk_sp
<
GrRenderTarget
>
fTarget
;
GrRenderTargetPriv
:
:
Flags
fFlags
;
GrDrawTarget
*
fLastDrawTarget
;
typedef
GrSurfaceProxy
INHERITED
;
}
;
#
endif
