#
ifndef
GrRenderTargetProxy_DEFINED
#
define
GrRenderTargetProxy_DEFINED
#
include
"
GrSurfaceProxy
.
h
"
#
include
"
GrTypesPriv
.
h
"
class
GrResourceProvider
;
class
GrRenderTargetProxyPriv
;
class
GrRenderTargetProxy
:
virtual
public
GrSurfaceProxy
{
public
:
GrRenderTargetProxy
*
asRenderTargetProxy
(
)
override
{
return
this
;
}
const
GrRenderTargetProxy
*
asRenderTargetProxy
(
)
const
override
{
return
this
;
}
bool
instantiate
(
GrResourceProvider
*
)
override
;
GrFSAAType
fsaaType
(
)
const
{
if
(
fSampleCnt
<
=
1
)
{
SkASSERT
(
!
this
-
>
hasMixedSamples
(
)
)
;
return
GrFSAAType
:
:
kNone
;
}
return
this
-
>
hasMixedSamples
(
)
?
GrFSAAType
:
:
kMixedSamples
:
GrFSAAType
:
:
kUnifiedMSAA
;
}
void
setNeedsStencil
(
)
{
fNeedsStencil
=
true
;
}
bool
needsStencil
(
)
const
{
return
fNeedsStencil
;
}
int
numStencilSamples
(
)
const
{
return
fSampleCnt
;
}
int
numColorSamples
(
)
const
{
return
GrFSAAType
:
:
kMixedSamples
=
=
this
-
>
fsaaType
(
)
?
1
:
fSampleCnt
;
}
int
maxWindowRectangles
(
const
GrCaps
&
caps
)
const
;
bool
wrapsVkSecondaryCB
(
)
const
{
return
fWrapsVkSecondaryCB
=
=
WrapsVkSecondaryCB
:
:
kYes
;
}
bool
refsWrappedObjects
(
)
const
;
GrRenderTargetProxyPriv
rtPriv
(
)
;
const
GrRenderTargetProxyPriv
rtPriv
(
)
const
;
protected
:
friend
class
GrProxyProvider
;
friend
class
GrRenderTargetProxyPriv
;
GrRenderTargetProxy
(
const
GrCaps
&
const
GrBackendFormat
&
const
GrSurfaceDesc
&
GrSurfaceOrigin
SkBackingFit
SkBudgeted
GrInternalSurfaceFlags
)
;
enum
class
WrapsVkSecondaryCB
:
bool
{
kNo
=
false
kYes
=
true
}
;
GrRenderTargetProxy
(
LazyInstantiateCallback
&
&
LazyInstantiationType
lazyType
const
GrBackendFormat
&
const
GrSurfaceDesc
&
GrSurfaceOrigin
SkBackingFit
SkBudgeted
GrInternalSurfaceFlags
WrapsVkSecondaryCB
wrapsVkSecondaryCB
)
;
GrRenderTargetProxy
(
sk_sp
<
GrSurface
>
GrSurfaceOrigin
WrapsVkSecondaryCB
wrapsVkSecondaryCB
=
WrapsVkSecondaryCB
:
:
kNo
)
;
sk_sp
<
GrSurface
>
createSurface
(
GrResourceProvider
*
)
const
override
;
private
:
void
setHasMixedSamples
(
)
{
fSurfaceFlags
|
=
GrInternalSurfaceFlags
:
:
kMixedSampled
;
}
bool
hasMixedSamples
(
)
const
{
return
fSurfaceFlags
&
GrInternalSurfaceFlags
:
:
kMixedSampled
;
}
void
setGLRTFBOIDIs0
(
)
{
fSurfaceFlags
|
=
GrInternalSurfaceFlags
:
:
kGLRTFBOIDIs0
;
}
bool
glRTFBOIDIs0
(
)
const
{
return
fSurfaceFlags
&
GrInternalSurfaceFlags
:
:
kGLRTFBOIDIs0
;
}
size_t
onUninstantiatedGpuMemorySize
(
)
const
override
;
SkDEBUGCODE
(
void
onValidateSurface
(
const
GrSurface
*
)
override
;
)
int
fSampleCnt
;
bool
fNeedsStencil
;
WrapsVkSecondaryCB
fWrapsVkSecondaryCB
;
typedef
GrSurfaceProxy
INHERITED
;
}
;
#
endif
