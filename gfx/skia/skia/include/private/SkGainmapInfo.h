#
ifndef
SkGainmapInfo_DEFINED
#
define
SkGainmapInfo_DEFINED
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkColorSpace
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
class
SkData
;
struct
SkGainmapInfo
{
SkColor4f
fGainmapRatioMin
=
{
1
.
f
1
.
f
1
.
f
1
.
0
}
;
SkColor4f
fGainmapRatioMax
=
{
2
.
f
2
.
f
2
.
f
1
.
0
}
;
SkColor4f
fGainmapGamma
=
{
1
.
f
1
.
f
1
.
f
1
.
f
}
;
SkColor4f
fEpsilonSdr
=
{
0
.
f
0
.
f
0
.
f
1
.
0
}
;
SkColor4f
fEpsilonHdr
=
{
0
.
f
0
.
f
0
.
f
1
.
0
}
;
float
fDisplayRatioSdr
=
1
.
f
;
float
fDisplayRatioHdr
=
2
.
f
;
enum
class
BaseImageType
{
kSDR
kHDR
}
;
BaseImageType
fBaseImageType
=
BaseImageType
:
:
kSDR
;
enum
class
Type
{
kDefault
kApple
}
;
Type
fType
=
Type
:
:
kDefault
;
sk_sp
<
SkColorSpace
>
fGainmapMathColorSpace
=
nullptr
;
bool
isUltraHDRv1Compatible
(
)
const
;
static
bool
ParseVersion
(
const
SkData
*
data
)
;
static
bool
Parse
(
const
SkData
*
data
SkGainmapInfo
&
info
)
;
static
sk_sp
<
SkData
>
SerializeVersion
(
)
;
sk_sp
<
SkData
>
serialize
(
)
const
;
inline
bool
operator
=
=
(
const
SkGainmapInfo
&
other
)
const
{
return
fGainmapRatioMin
=
=
other
.
fGainmapRatioMin
&
&
fGainmapRatioMax
=
=
other
.
fGainmapRatioMax
&
&
fGainmapGamma
=
=
other
.
fGainmapGamma
&
&
fEpsilonSdr
=
=
other
.
fEpsilonSdr
&
&
fEpsilonHdr
=
=
other
.
fEpsilonHdr
&
&
fDisplayRatioSdr
=
=
other
.
fDisplayRatioSdr
&
&
fDisplayRatioHdr
=
=
other
.
fDisplayRatioHdr
&
&
fBaseImageType
=
=
other
.
fBaseImageType
&
&
fType
=
=
other
.
fType
&
&
SkColorSpace
:
:
Equals
(
fGainmapMathColorSpace
.
get
(
)
other
.
fGainmapMathColorSpace
.
get
(
)
)
;
}
inline
bool
operator
!
=
(
const
SkGainmapInfo
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
}
;
#
endif
