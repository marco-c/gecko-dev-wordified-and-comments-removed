#
ifndef
SkPoint_DEFINED
#
define
SkPoint_DEFINED
#
include
"
include
/
core
/
SkMath
.
h
"
#
include
"
include
/
core
/
SkScalar
.
h
"
#
include
"
include
/
private
/
SkSafe32
.
h
"
struct
SkIPoint
;
typedef
SkIPoint
SkIVector
;
struct
SkIPoint
{
int32_t
fX
;
int32_t
fY
;
static
constexpr
SkIPoint
Make
(
int32_t
x
int32_t
y
)
{
return
{
x
y
}
;
}
constexpr
int32_t
x
(
)
const
{
return
fX
;
}
constexpr
int32_t
y
(
)
const
{
return
fY
;
}
bool
isZero
(
)
const
{
return
(
fX
|
fY
)
=
=
0
;
}
void
set
(
int32_t
x
int32_t
y
)
{
fX
=
x
;
fY
=
y
;
}
SkIPoint
operator
-
(
)
const
{
return
{
-
fX
-
fY
}
;
}
void
operator
+
=
(
const
SkIVector
&
v
)
{
fX
=
Sk32_sat_add
(
fX
v
.
fX
)
;
fY
=
Sk32_sat_add
(
fY
v
.
fY
)
;
}
void
operator
-
=
(
const
SkIVector
&
v
)
{
fX
=
Sk32_sat_sub
(
fX
v
.
fX
)
;
fY
=
Sk32_sat_sub
(
fY
v
.
fY
)
;
}
bool
equals
(
int32_t
x
int32_t
y
)
const
{
return
fX
=
=
x
&
&
fY
=
=
y
;
}
friend
bool
operator
=
=
(
const
SkIPoint
&
a
const
SkIPoint
&
b
)
{
return
a
.
fX
=
=
b
.
fX
&
&
a
.
fY
=
=
b
.
fY
;
}
friend
bool
operator
!
=
(
const
SkIPoint
&
a
const
SkIPoint
&
b
)
{
return
a
.
fX
!
=
b
.
fX
|
|
a
.
fY
!
=
b
.
fY
;
}
friend
SkIVector
operator
-
(
const
SkIPoint
&
a
const
SkIPoint
&
b
)
{
return
{
Sk32_sat_sub
(
a
.
fX
b
.
fX
)
Sk32_sat_sub
(
a
.
fY
b
.
fY
)
}
;
}
friend
SkIPoint
operator
+
(
const
SkIPoint
&
a
const
SkIVector
&
b
)
{
return
{
Sk32_sat_add
(
a
.
fX
b
.
fX
)
Sk32_sat_add
(
a
.
fY
b
.
fY
)
}
;
}
}
;
struct
SkPoint
;
typedef
SkPoint
SkVector
;
struct
SK_API
SkPoint
{
SkScalar
fX
;
SkScalar
fY
;
static
constexpr
SkPoint
Make
(
SkScalar
x
SkScalar
y
)
{
return
{
x
y
}
;
}
SkScalar
x
(
)
const
{
return
fX
;
}
SkScalar
y
(
)
const
{
return
fY
;
}
bool
isZero
(
)
const
{
return
(
0
=
=
fX
)
&
(
0
=
=
fY
)
;
}
void
set
(
SkScalar
x
SkScalar
y
)
{
fX
=
x
;
fY
=
y
;
}
void
iset
(
int32_t
x
int32_t
y
)
{
fX
=
SkIntToScalar
(
x
)
;
fY
=
SkIntToScalar
(
y
)
;
}
void
iset
(
const
SkIPoint
&
p
)
{
fX
=
SkIntToScalar
(
p
.
fX
)
;
fY
=
SkIntToScalar
(
p
.
fY
)
;
}
void
setAbs
(
const
SkPoint
&
pt
)
{
fX
=
SkScalarAbs
(
pt
.
fX
)
;
fY
=
SkScalarAbs
(
pt
.
fY
)
;
}
static
void
Offset
(
SkPoint
points
[
]
int
count
const
SkVector
&
offset
)
{
Offset
(
points
count
offset
.
fX
offset
.
fY
)
;
}
static
void
Offset
(
SkPoint
points
[
]
int
count
SkScalar
dx
SkScalar
dy
)
{
for
(
int
i
=
0
;
i
<
count
;
+
+
i
)
{
points
[
i
]
.
offset
(
dx
dy
)
;
}
}
void
offset
(
SkScalar
dx
SkScalar
dy
)
{
fX
+
=
dx
;
fY
+
=
dy
;
}
SkScalar
length
(
)
const
{
return
SkPoint
:
:
Length
(
fX
fY
)
;
}
SkScalar
distanceToOrigin
(
)
const
{
return
this
-
>
length
(
)
;
}
bool
normalize
(
)
;
bool
setNormalize
(
SkScalar
x
SkScalar
y
)
;
bool
setLength
(
SkScalar
length
)
;
bool
setLength
(
SkScalar
x
SkScalar
y
SkScalar
length
)
;
void
scale
(
SkScalar
scale
SkPoint
*
dst
)
const
;
void
scale
(
SkScalar
value
)
{
this
-
>
scale
(
value
this
)
;
}
void
negate
(
)
{
fX
=
-
fX
;
fY
=
-
fY
;
}
SkPoint
operator
-
(
)
const
{
return
{
-
fX
-
fY
}
;
}
void
operator
+
=
(
const
SkVector
&
v
)
{
fX
+
=
v
.
fX
;
fY
+
=
v
.
fY
;
}
void
operator
-
=
(
const
SkVector
&
v
)
{
fX
-
=
v
.
fX
;
fY
-
=
v
.
fY
;
}
SkPoint
operator
*
(
SkScalar
scale
)
const
{
return
{
fX
*
scale
fY
*
scale
}
;
}
SkPoint
&
operator
*
=
(
SkScalar
scale
)
{
fX
*
=
scale
;
fY
*
=
scale
;
return
*
this
;
}
bool
isFinite
(
)
const
{
SkScalar
accum
=
0
;
accum
*
=
fX
;
accum
*
=
fY
;
SkASSERT
(
0
=
=
accum
|
|
SkScalarIsNaN
(
accum
)
)
;
return
!
SkScalarIsNaN
(
accum
)
;
}
bool
equals
(
SkScalar
x
SkScalar
y
)
const
{
return
fX
=
=
x
&
&
fY
=
=
y
;
}
friend
bool
operator
=
=
(
const
SkPoint
&
a
const
SkPoint
&
b
)
{
return
a
.
fX
=
=
b
.
fX
&
&
a
.
fY
=
=
b
.
fY
;
}
friend
bool
operator
!
=
(
const
SkPoint
&
a
const
SkPoint
&
b
)
{
return
a
.
fX
!
=
b
.
fX
|
|
a
.
fY
!
=
b
.
fY
;
}
friend
SkVector
operator
-
(
const
SkPoint
&
a
const
SkPoint
&
b
)
{
return
{
a
.
fX
-
b
.
fX
a
.
fY
-
b
.
fY
}
;
}
friend
SkPoint
operator
+
(
const
SkPoint
&
a
const
SkVector
&
b
)
{
return
{
a
.
fX
+
b
.
fX
a
.
fY
+
b
.
fY
}
;
}
static
SkScalar
Length
(
SkScalar
x
SkScalar
y
)
;
static
SkScalar
Normalize
(
SkVector
*
vec
)
;
static
SkScalar
Distance
(
const
SkPoint
&
a
const
SkPoint
&
b
)
{
return
Length
(
a
.
fX
-
b
.
fX
a
.
fY
-
b
.
fY
)
;
}
static
SkScalar
DotProduct
(
const
SkVector
&
a
const
SkVector
&
b
)
{
return
a
.
fX
*
b
.
fX
+
a
.
fY
*
b
.
fY
;
}
static
SkScalar
CrossProduct
(
const
SkVector
&
a
const
SkVector
&
b
)
{
return
a
.
fX
*
b
.
fY
-
a
.
fY
*
b
.
fX
;
}
SkScalar
cross
(
const
SkVector
&
vec
)
const
{
return
CrossProduct
(
*
this
vec
)
;
}
SkScalar
dot
(
const
SkVector
&
vec
)
const
{
return
DotProduct
(
*
this
vec
)
;
}
}
;
#
endif
