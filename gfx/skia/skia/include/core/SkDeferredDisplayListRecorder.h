#
ifndef
SkDeferredDisplayListRecorder_DEFINED
#
define
SkDeferredDisplayListRecorder_DEFINED
#
include
"
include
/
core
/
SkDeferredDisplayList
.
h
"
#
include
"
include
/
core
/
SkImage
.
h
"
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSurfaceCharacterization
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
class
GrBackendFormat
;
class
GrBackendTexture
;
class
GrRecordingContext
;
class
GrYUVABackendTextureInfo
;
class
SkCanvas
;
class
SkSurface
;
class
SK_API
SkDeferredDisplayListRecorder
{
public
:
SkDeferredDisplayListRecorder
(
const
SkSurfaceCharacterization
&
)
;
~
SkDeferredDisplayListRecorder
(
)
;
const
SkSurfaceCharacterization
&
characterization
(
)
const
{
return
fCharacterization
;
}
SkCanvas
*
getCanvas
(
)
;
sk_sp
<
SkDeferredDisplayList
>
detach
(
)
;
#
if
defined
(
SK_GANESH
)
using
PromiseImageTextureContext
=
SkImage
:
:
PromiseImageTextureContext
;
using
PromiseImageTextureFulfillProc
=
SkImage
:
:
PromiseImageTextureFulfillProc
;
using
PromiseImageTextureReleaseProc
=
SkImage
:
:
PromiseImageTextureReleaseProc
;
#
ifndef
SK_MAKE_PROMISE_TEXTURE_DISABLE_LEGACY_API
sk_sp
<
SkImage
>
makePromiseTexture
(
const
GrBackendFormat
&
backendFormat
int
width
int
height
GrMipmapped
mipmapped
GrSurfaceOrigin
origin
SkColorType
colorType
SkAlphaType
alphaType
sk_sp
<
SkColorSpace
>
colorSpace
PromiseImageTextureFulfillProc
textureFulfillProc
PromiseImageTextureReleaseProc
textureReleaseProc
PromiseImageTextureContext
textureContext
)
;
sk_sp
<
SkImage
>
makeYUVAPromiseTexture
(
const
GrYUVABackendTextureInfo
&
yuvaBackendTextureInfo
sk_sp
<
SkColorSpace
>
imageColorSpace
PromiseImageTextureFulfillProc
textureFulfillProc
PromiseImageTextureReleaseProc
textureReleaseProc
PromiseImageTextureContext
textureContexts
[
]
)
;
#
endif
#
endif
private
:
SkDeferredDisplayListRecorder
(
const
SkDeferredDisplayListRecorder
&
)
=
delete
;
SkDeferredDisplayListRecorder
&
operator
=
(
const
SkDeferredDisplayListRecorder
&
)
=
delete
;
bool
init
(
)
;
const
SkSurfaceCharacterization
fCharacterization
;
#
if
defined
(
SK_GANESH
)
sk_sp
<
GrRecordingContext
>
fContext
;
sk_sp
<
GrRenderTargetProxy
>
fTargetProxy
;
sk_sp
<
SkDeferredDisplayList
:
:
LazyProxyData
>
fLazyProxyData
;
sk_sp
<
SkSurface
>
fSurface
;
#
endif
}
;
#
endif
