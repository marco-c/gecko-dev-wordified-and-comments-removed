#
ifndef
SkColorSpace_DEFINED
#
define
SkColorSpace_DEFINED
#
include
"
.
.
/
private
/
SkOnce
.
h
"
#
include
"
SkMatrix44
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
<
memory
>
class
SkData
;
struct
skcms_ICCProfile
;
enum
SkGammaNamed
{
kLinear_SkGammaNamed
kSRGB_SkGammaNamed
k2Dot2Curve_SkGammaNamed
kNonStandard_SkGammaNamed
}
;
struct
SK_API
SkColorSpacePrimaries
{
float
fRX
;
float
fRY
;
float
fGX
;
float
fGY
;
float
fBX
;
float
fBY
;
float
fWX
;
float
fWY
;
bool
toXYZD50
(
SkMatrix44
*
toXYZD50
)
const
;
}
;
struct
SK_API
SkColorSpaceTransferFn
{
float
fG
;
float
fA
;
float
fB
;
float
fC
;
float
fD
;
float
fE
;
float
fF
;
}
;
class
SK_API
SkColorSpace
:
public
SkNVRefCnt
<
SkColorSpace
>
{
public
:
static
sk_sp
<
SkColorSpace
>
MakeSRGB
(
)
;
static
sk_sp
<
SkColorSpace
>
MakeSRGBLinear
(
)
;
enum
RenderTargetGamma
:
uint8_t
{
kLinear_RenderTargetGamma
kSRGB_RenderTargetGamma
}
;
enum
Gamut
{
kSRGB_Gamut
kAdobeRGB_Gamut
kDCIP3_D65_Gamut
kRec2020_Gamut
}
;
static
sk_sp
<
SkColorSpace
>
MakeRGB
(
RenderTargetGamma
gamma
Gamut
gamut
)
;
static
sk_sp
<
SkColorSpace
>
MakeRGB
(
RenderTargetGamma
gamma
const
SkMatrix44
&
toXYZD50
)
;
static
sk_sp
<
SkColorSpace
>
MakeRGB
(
const
SkColorSpaceTransferFn
&
coeffs
Gamut
gamut
)
;
static
sk_sp
<
SkColorSpace
>
MakeRGB
(
const
SkColorSpaceTransferFn
&
coeffs
const
SkMatrix44
&
toXYZD50
)
;
static
sk_sp
<
SkColorSpace
>
MakeRGB
(
SkGammaNamed
gammaNamed
const
SkMatrix44
&
toXYZD50
)
;
static
sk_sp
<
SkColorSpace
>
Make
(
const
skcms_ICCProfile
&
)
;
void
toProfile
(
skcms_ICCProfile
*
)
const
;
SkGammaNamed
gammaNamed
(
)
const
{
return
fGammaNamed
;
}
bool
gammaCloseToSRGB
(
)
const
{
return
kSRGB_SkGammaNamed
=
=
fGammaNamed
;
}
bool
gammaIsLinear
(
)
const
{
return
kLinear_SkGammaNamed
=
=
fGammaNamed
;
}
bool
isNumericalTransferFn
(
SkColorSpaceTransferFn
*
fn
)
const
;
bool
toXYZD50
(
SkMatrix44
*
toXYZD50
)
const
;
uint32_t
toXYZD50Hash
(
)
const
{
return
fToXYZD50Hash
;
}
sk_sp
<
SkColorSpace
>
makeLinearGamma
(
)
const
;
sk_sp
<
SkColorSpace
>
makeSRGBGamma
(
)
const
;
sk_sp
<
SkColorSpace
>
makeColorSpin
(
)
const
;
bool
isSRGB
(
)
const
;
sk_sp
<
SkData
>
serialize
(
)
const
;
size_t
writeToMemory
(
void
*
memory
)
const
;
static
sk_sp
<
SkColorSpace
>
Deserialize
(
const
void
*
data
size_t
length
)
;
static
bool
Equals
(
const
SkColorSpace
*
const
SkColorSpace
*
)
;
void
transferFn
(
float
gabcdef
[
7
]
)
const
;
void
invTransferFn
(
float
gabcdef
[
7
]
)
const
;
void
gamutTransformTo
(
const
SkColorSpace
*
dst
float
src_to_dst_row_major
[
9
]
)
const
;
uint32_t
transferFnHash
(
)
const
{
return
fTransferFnHash
;
}
uint64_t
hash
(
)
const
{
return
(
uint64_t
)
fTransferFnHash
<
<
32
|
fToXYZD50Hash
;
}
private
:
friend
class
SkColorSpaceSingletonFactory
;
SkColorSpace
(
SkGammaNamed
gammaNamed
const
float
transferFn
[
7
]
const
SkMatrix44
&
toXYZ
)
;
void
computeLazyDstFields
(
)
const
;
SkGammaNamed
fGammaNamed
;
uint32_t
fTransferFnHash
;
uint32_t
fToXYZD50Hash
;
float
fTransferFn
[
7
]
;
float
fToXYZD50_3x3
[
9
]
;
mutable
float
fInvTransferFn
[
7
]
;
mutable
float
fFromXYZD50_3x3
[
9
]
;
mutable
SkOnce
fLazyDstFieldsOnce
;
}
;
#
endif
