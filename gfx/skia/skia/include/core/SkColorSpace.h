#
ifndef
SkColorSpace_DEFINED
#
define
SkColorSpace_DEFINED
#
include
"
include
/
core
/
SkMatrix44
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
private
/
SkFixed
.
h
"
#
include
"
include
/
private
/
SkOnce
.
h
"
#
include
"
include
/
third_party
/
skcms
/
skcms
.
h
"
#
include
<
memory
>
class
SkData
;
struct
SK_API
SkColorSpacePrimaries
{
float
fRX
;
float
fRY
;
float
fGX
;
float
fGY
;
float
fBX
;
float
fBY
;
float
fWX
;
float
fWY
;
bool
toXYZD50
(
skcms_Matrix3x3
*
toXYZD50
)
const
;
}
;
namespace
SkNamedTransferFn
{
static
constexpr
skcms_TransferFunction
kSRGB
=
{
2
.
4f
(
float
)
(
1
/
1
.
055
)
(
float
)
(
0
.
055
/
1
.
055
)
(
float
)
(
1
/
12
.
92
)
0
.
04045f
0
.
0f
0
.
0f
}
;
static
constexpr
skcms_TransferFunction
k2Dot2
=
{
2
.
2f
1
.
0f
0
.
0f
0
.
0f
0
.
0f
0
.
0f
0
.
0f
}
;
static
constexpr
skcms_TransferFunction
kLinear
=
{
1
.
0f
1
.
0f
0
.
0f
0
.
0f
0
.
0f
0
.
0f
0
.
0f
}
;
static
constexpr
skcms_TransferFunction
kRec2020
=
{
2
.
22222f
0
.
909672f
0
.
0903276f
0
.
222222f
0
.
0812429f
0
0
}
;
static
constexpr
skcms_TransferFunction
kPQ
=
{
-
2
.
0f
-
107
/
128
.
0f
1
.
0f
32
/
2523
.
0f
2413
/
128
.
0f
-
2392
/
128
.
0f
8192
/
1305
.
0f
}
;
static
constexpr
skcms_TransferFunction
kHLG
=
{
-
3
.
0f
2
.
0f
2
.
0f
1
/
0
.
17883277f
0
.
28466892f
0
.
55991073f
0
.
0f
}
;
}
namespace
SkNamedGamut
{
static
constexpr
skcms_Matrix3x3
kSRGB
=
{
{
{
SkFixedToFloat
(
0x6FA2
)
SkFixedToFloat
(
0x6299
)
SkFixedToFloat
(
0x24A0
)
}
{
SkFixedToFloat
(
0x38F5
)
SkFixedToFloat
(
0xB785
)
SkFixedToFloat
(
0x0F84
)
}
{
SkFixedToFloat
(
0x0390
)
SkFixedToFloat
(
0x18DA
)
SkFixedToFloat
(
0xB6CF
)
}
}
}
;
static
constexpr
skcms_Matrix3x3
kAdobeRGB
=
{
{
{
SkFixedToFloat
(
0x9c18
)
SkFixedToFloat
(
0x348d
)
SkFixedToFloat
(
0x2631
)
}
{
SkFixedToFloat
(
0x4fa5
)
SkFixedToFloat
(
0xa02c
)
SkFixedToFloat
(
0x102f
)
}
{
SkFixedToFloat
(
0x04fc
)
SkFixedToFloat
(
0x0f95
)
SkFixedToFloat
(
0xbe9c
)
}
}
}
;
static
constexpr
skcms_Matrix3x3
kDCIP3
=
{
{
{
0
.
515102f
0
.
291965f
0
.
157153f
}
{
0
.
241182f
0
.
692236f
0
.
0665819f
}
{
-
0
.
00104941f
0
.
0418818f
0
.
784378f
}
}
}
;
static
constexpr
skcms_Matrix3x3
kRec2020
=
{
{
{
0
.
673459f
0
.
165661f
0
.
125100f
}
{
0
.
279033f
0
.
675338f
0
.
0456288f
}
{
-
0
.
00193139f
0
.
0299794f
0
.
797162f
}
}
}
;
static
constexpr
skcms_Matrix3x3
kXYZ
=
{
{
{
1
.
0f
0
.
0f
0
.
0f
}
{
0
.
0f
1
.
0f
0
.
0f
}
{
0
.
0f
0
.
0f
1
.
0f
}
}
}
;
}
class
SK_API
SkColorSpace
:
public
SkNVRefCnt
<
SkColorSpace
>
{
public
:
static
sk_sp
<
SkColorSpace
>
MakeSRGB
(
)
;
static
sk_sp
<
SkColorSpace
>
MakeSRGBLinear
(
)
;
static
sk_sp
<
SkColorSpace
>
MakeRGB
(
const
skcms_TransferFunction
&
transferFn
const
skcms_Matrix3x3
&
toXYZ
)
;
static
sk_sp
<
SkColorSpace
>
Make
(
const
skcms_ICCProfile
&
)
;
void
toProfile
(
skcms_ICCProfile
*
)
const
;
bool
gammaCloseToSRGB
(
)
const
;
bool
gammaIsLinear
(
)
const
;
bool
isNumericalTransferFn
(
skcms_TransferFunction
*
fn
)
const
;
bool
toXYZD50
(
SkMatrix44
*
toXYZD50
)
const
;
bool
toXYZD50
(
skcms_Matrix3x3
*
toXYZD50
)
const
;
uint32_t
toXYZD50Hash
(
)
const
{
return
fToXYZD50Hash
;
}
sk_sp
<
SkColorSpace
>
makeLinearGamma
(
)
const
;
sk_sp
<
SkColorSpace
>
makeSRGBGamma
(
)
const
;
sk_sp
<
SkColorSpace
>
makeColorSpin
(
)
const
;
bool
isSRGB
(
)
const
;
sk_sp
<
SkData
>
serialize
(
)
const
;
size_t
writeToMemory
(
void
*
memory
)
const
;
static
sk_sp
<
SkColorSpace
>
Deserialize
(
const
void
*
data
size_t
length
)
;
static
bool
Equals
(
const
SkColorSpace
*
const
SkColorSpace
*
)
;
void
transferFn
(
float
gabcdef
[
7
]
)
const
;
void
invTransferFn
(
float
gabcdef
[
7
]
)
const
;
void
gamutTransformTo
(
const
SkColorSpace
*
dst
float
src_to_dst_row_major
[
9
]
)
const
;
uint32_t
transferFnHash
(
)
const
{
return
fTransferFnHash
;
}
uint64_t
hash
(
)
const
{
return
(
uint64_t
)
fTransferFnHash
<
<
32
|
fToXYZD50Hash
;
}
private
:
friend
class
SkColorSpaceSingletonFactory
;
SkColorSpace
(
const
float
transferFn
[
7
]
const
skcms_Matrix3x3
&
toXYZ
)
;
void
computeLazyDstFields
(
)
const
;
uint32_t
fTransferFnHash
;
uint32_t
fToXYZD50Hash
;
float
fTransferFn
[
7
]
;
float
fToXYZD50_3x3
[
9
]
;
mutable
float
fInvTransferFn
[
7
]
;
mutable
float
fFromXYZD50_3x3
[
9
]
;
mutable
SkOnce
fLazyDstFieldsOnce
;
}
;
#
endif
