#
ifndef
SkColorSpace_DEFINED
#
define
SkColorSpace_DEFINED
#
include
"
SkMatrix44
.
h
"
#
include
"
SkRefCnt
.
h
"
class
SkData
;
enum
SkGammaNamed
{
kLinear_SkGammaNamed
kSRGB_SkGammaNamed
k2Dot2Curve_SkGammaNamed
kNonStandard_SkGammaNamed
}
;
struct
SK_API
SkColorSpacePrimaries
{
float
fRX
fRY
;
float
fGX
fGY
;
float
fBX
fBY
;
float
fWX
fWY
;
bool
toXYZD50
(
SkMatrix44
*
toXYZD50
)
const
;
}
;
struct
SK_API
SkColorSpaceTransferFn
{
float
fG
;
float
fA
;
float
fB
;
float
fC
;
float
fD
;
float
fE
;
float
fF
;
SkColorSpaceTransferFn
invert
(
)
const
;
float
operator
(
)
(
float
x
)
{
SkScalar
s
=
SkScalarSignAsScalar
(
x
)
;
x
=
sk_float_abs
(
x
)
;
if
(
x
>
=
fD
)
{
return
s
*
(
powf
(
fA
*
x
+
fB
fG
)
+
fE
)
;
}
else
{
return
s
*
(
fC
*
x
+
fF
)
;
}
}
}
;
class
SK_API
SkColorSpace
:
public
SkRefCnt
{
public
:
static
sk_sp
<
SkColorSpace
>
MakeSRGB
(
)
;
static
sk_sp
<
SkColorSpace
>
MakeSRGBLinear
(
)
;
enum
RenderTargetGamma
:
uint8_t
{
kLinear_RenderTargetGamma
kSRGB_RenderTargetGamma
}
;
enum
Gamut
{
kSRGB_Gamut
kAdobeRGB_Gamut
kDCIP3_D65_Gamut
kRec2020_Gamut
}
;
static
sk_sp
<
SkColorSpace
>
MakeRGB
(
RenderTargetGamma
gamma
Gamut
gamut
)
;
static
sk_sp
<
SkColorSpace
>
MakeRGB
(
RenderTargetGamma
gamma
const
SkMatrix44
&
toXYZD50
)
;
static
sk_sp
<
SkColorSpace
>
MakeRGB
(
const
SkColorSpaceTransferFn
&
coeffs
Gamut
gamut
)
;
static
sk_sp
<
SkColorSpace
>
MakeRGB
(
const
SkColorSpaceTransferFn
&
coeffs
const
SkMatrix44
&
toXYZD50
)
;
static
sk_sp
<
SkColorSpace
>
MakeRGB
(
SkGammaNamed
gammaNamed
const
SkMatrix44
&
toXYZD50
)
;
static
sk_sp
<
SkColorSpace
>
MakeICC
(
const
void
*
size_t
)
;
enum
Type
{
kRGB_Type
kCMYK_Type
kGray_Type
}
;
Type
type
(
)
const
;
SkGammaNamed
gammaNamed
(
)
const
;
bool
gammaCloseToSRGB
(
)
const
;
bool
gammaIsLinear
(
)
const
;
bool
isNumericalTransferFn
(
SkColorSpaceTransferFn
*
fn
)
const
;
bool
toXYZD50
(
SkMatrix44
*
toXYZD50
)
const
;
const
SkMatrix44
*
toXYZD50
(
)
const
;
const
SkMatrix44
*
fromXYZD50
(
)
const
;
uint32_t
toXYZD50Hash
(
)
const
;
virtual
sk_sp
<
SkColorSpace
>
makeLinearGamma
(
)
const
=
0
;
virtual
sk_sp
<
SkColorSpace
>
makeSRGBGamma
(
)
const
=
0
;
virtual
sk_sp
<
SkColorSpace
>
makeColorSpin
(
)
const
{
return
nullptr
;
}
bool
isSRGB
(
)
const
;
sk_sp
<
SkData
>
serialize
(
)
const
;
size_t
writeToMemory
(
void
*
memory
)
const
;
static
sk_sp
<
SkColorSpace
>
Deserialize
(
const
void
*
data
size_t
length
)
;
static
bool
Equals
(
const
SkColorSpace
*
src
const
SkColorSpace
*
dst
)
;
private
:
virtual
const
SkMatrix44
*
onToXYZD50
(
)
const
=
0
;
virtual
uint32_t
onToXYZD50Hash
(
)
const
=
0
;
virtual
const
SkMatrix44
*
onFromXYZD50
(
)
const
=
0
;
virtual
SkGammaNamed
onGammaNamed
(
)
const
=
0
;
virtual
bool
onGammaCloseToSRGB
(
)
const
=
0
;
virtual
bool
onGammaIsLinear
(
)
const
=
0
;
virtual
bool
onIsNumericalTransferFn
(
SkColorSpaceTransferFn
*
coeffs
)
const
=
0
;
virtual
bool
onIsCMYK
(
)
const
{
return
false
;
}
virtual
const
SkData
*
onProfileData
(
)
const
{
return
nullptr
;
}
using
INHERITED
=
SkRefCnt
;
}
;
enum
class
SkTransferFunctionBehavior
{
kRespect
kIgnore
}
;
#
endif
