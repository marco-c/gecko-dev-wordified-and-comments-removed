#
ifndef
SkColorSpace_DEFINED
#
define
SkColorSpace_DEFINED
#
include
"
SkMatrix44
.
h
"
#
include
"
SkRefCnt
.
h
"
class
SkData
;
struct
SK_API
SkColorSpacePrimaries
{
float
fRX
fRY
;
float
fGX
fGY
;
float
fBX
fBY
;
float
fWX
fWY
;
bool
toXYZD50
(
SkMatrix44
*
toXYZD50
)
const
;
}
;
struct
SK_API
SkColorSpaceTransferFn
{
float
fG
;
float
fA
;
float
fB
;
float
fC
;
float
fD
;
float
fE
;
float
fF
;
SkColorSpaceTransferFn
invert
(
)
const
;
}
;
class
SK_API
SkColorSpace
:
public
SkRefCnt
{
public
:
static
sk_sp
<
SkColorSpace
>
MakeSRGB
(
)
;
static
sk_sp
<
SkColorSpace
>
MakeSRGBLinear
(
)
;
enum
RenderTargetGamma
:
uint8_t
{
kLinear_RenderTargetGamma
kSRGB_RenderTargetGamma
}
;
enum
Gamut
{
kSRGB_Gamut
kAdobeRGB_Gamut
kDCIP3_D65_Gamut
kRec2020_Gamut
}
;
static
sk_sp
<
SkColorSpace
>
MakeRGB
(
RenderTargetGamma
gamma
Gamut
gamut
)
;
static
sk_sp
<
SkColorSpace
>
MakeRGB
(
RenderTargetGamma
gamma
const
SkMatrix44
&
toXYZD50
)
;
static
sk_sp
<
SkColorSpace
>
MakeRGB
(
const
SkColorSpaceTransferFn
&
coeffs
Gamut
gamut
)
;
static
sk_sp
<
SkColorSpace
>
MakeRGB
(
const
SkColorSpaceTransferFn
&
coeffs
const
SkMatrix44
&
toXYZD50
)
;
static
sk_sp
<
SkColorSpace
>
MakeICC
(
const
void
*
size_t
)
;
bool
gammaCloseToSRGB
(
)
const
;
bool
gammaIsLinear
(
)
const
;
bool
isNumericalTransferFn
(
SkColorSpaceTransferFn
*
fn
)
const
;
bool
toXYZD50
(
SkMatrix44
*
toXYZD50
)
const
;
bool
isSRGB
(
)
const
;
sk_sp
<
SkData
>
serialize
(
)
const
;
size_t
writeToMemory
(
void
*
memory
)
const
;
static
sk_sp
<
SkColorSpace
>
Deserialize
(
const
void
*
data
size_t
length
)
;
static
bool
Equals
(
const
SkColorSpace
*
src
const
SkColorSpace
*
dst
)
;
protected
:
SkColorSpace
(
)
{
}
}
;
enum
class
SkTransferFunctionBehavior
{
kRespect
kIgnore
}
;
#
endif
