#
ifndef
SkPicture_DEFINED
#
define
SkPicture_DEFINED
#
include
"
SkRefCnt
.
h
"
#
include
"
SkRect
.
h
"
#
include
"
SkTypes
.
h
"
class
SkBigPicture
;
class
SkCanvas
;
class
SkData
;
struct
SkDeserialProcs
;
class
SkImage
;
class
SkPictureData
;
class
SkReadBuffer
;
class
SkRefCntSet
;
struct
SkSerialProcs
;
class
SkStream
;
class
SkTypefacePlayback
;
class
SkWStream
;
class
SkWriteBuffer
;
struct
SkPictInfo
;
class
SK_API
SkPicture
:
public
SkRefCnt
{
public
:
static
sk_sp
<
SkPicture
>
MakeFromStream
(
SkStream
*
const
SkDeserialProcs
*
=
nullptr
)
;
static
sk_sp
<
SkPicture
>
MakeFromData
(
const
SkData
*
data
const
SkDeserialProcs
*
=
nullptr
)
;
static
sk_sp
<
SkPicture
>
MakeFromData
(
const
void
*
data
size_t
size
const
SkDeserialProcs
*
=
nullptr
)
;
static
sk_sp
<
SkPicture
>
MakeFromBuffer
(
SkReadBuffer
&
)
;
class
SK_API
AbortCallback
{
public
:
AbortCallback
(
)
{
}
virtual
~
AbortCallback
(
)
{
}
virtual
bool
abort
(
)
=
0
;
}
;
virtual
void
playback
(
SkCanvas
*
AbortCallback
*
=
nullptr
)
const
=
0
;
virtual
SkRect
cullRect
(
)
const
=
0
;
uint32_t
uniqueID
(
)
const
;
sk_sp
<
SkData
>
serialize
(
const
SkSerialProcs
*
=
nullptr
)
const
;
void
serialize
(
SkWStream
*
const
SkSerialProcs
*
=
nullptr
)
const
;
static
sk_sp
<
SkPicture
>
MakePlaceholder
(
SkRect
cull
)
;
void
flatten
(
SkWriteBuffer
&
)
const
;
virtual
int
approximateOpCount
(
)
const
=
0
;
virtual
size_t
approximateBytesUsed
(
)
const
=
0
;
virtual
const
SkBigPicture
*
asSkBigPicture
(
)
const
{
return
nullptr
;
}
private
:
SkPicture
(
)
;
friend
class
SkBigPicture
;
friend
class
SkEmptyPicture
;
template
<
typename
>
friend
class
SkMiniPicture
;
void
serialize
(
SkWStream
*
const
SkSerialProcs
*
SkRefCntSet
*
typefaces
)
const
;
static
sk_sp
<
SkPicture
>
MakeFromStream
(
SkStream
*
const
SkDeserialProcs
*
SkTypefacePlayback
*
)
;
friend
class
SkPictureData
;
static
bool
StreamIsSKP
(
SkStream
*
SkPictInfo
*
)
;
static
bool
BufferIsSKP
(
SkReadBuffer
*
SkPictInfo
*
)
;
friend
bool
SkPicture_StreamIsSKP
(
SkStream
*
SkPictInfo
*
)
;
friend
struct
SkPathCounter
;
static
const
uint32_t
MIN_PICTURE_VERSION
=
56
;
static
const
uint32_t
CURRENT_PICTURE_VERSION
=
61
;
static
bool
IsValidPictInfo
(
const
SkPictInfo
&
info
)
;
static
sk_sp
<
SkPicture
>
Forwardport
(
const
SkPictInfo
&
const
SkPictureData
*
SkReadBuffer
*
buffer
)
;
SkPictInfo
createHeader
(
)
const
;
SkPictureData
*
backport
(
)
const
;
mutable
uint32_t
fUniqueID
;
}
;
#
endif
