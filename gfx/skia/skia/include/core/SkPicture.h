#
ifndef
SkPicture_DEFINED
#
define
SkPicture_DEFINED
#
include
"
SkRefCnt
.
h
"
#
include
"
SkRect
.
h
"
#
include
"
SkTypes
.
h
"
class
GrContext
;
class
SkBigPicture
;
class
SkBitmap
;
class
SkCanvas
;
class
SkPath
;
class
SkPictureData
;
class
SkPixelSerializer
;
class
SkReadBuffer
;
class
SkRefCntSet
;
class
SkStream
;
class
SkTypefacePlayback
;
class
SkWStream
;
class
SkWriteBuffer
;
struct
SkPictInfo
;
class
SK_API
SkPicture
:
public
SkRefCnt
{
public
:
virtual
~
SkPicture
(
)
;
typedef
bool
(
*
InstallPixelRefProc
)
(
const
void
*
src
size_t
length
SkBitmap
*
dst
)
;
static
sk_sp
<
SkPicture
>
MakeFromStream
(
SkStream
*
InstallPixelRefProc
proc
)
;
static
sk_sp
<
SkPicture
>
MakeFromStream
(
SkStream
*
)
;
static
sk_sp
<
SkPicture
>
MakeFromBuffer
(
SkReadBuffer
&
)
;
class
SK_API
AbortCallback
{
public
:
AbortCallback
(
)
{
}
virtual
~
AbortCallback
(
)
{
}
virtual
bool
abort
(
)
=
0
;
}
;
virtual
void
playback
(
SkCanvas
*
AbortCallback
*
=
NULL
)
const
=
0
;
virtual
SkRect
cullRect
(
)
const
=
0
;
uint32_t
uniqueID
(
)
const
;
void
serialize
(
SkWStream
*
SkPixelSerializer
*
=
NULL
)
const
;
void
flatten
(
SkWriteBuffer
&
)
const
;
virtual
bool
willPlayBackBitmaps
(
)
const
=
0
;
virtual
int
approximateOpCount
(
)
const
=
0
;
virtual
bool
hasText
(
)
const
=
0
;
virtual
size_t
approximateBytesUsed
(
)
const
=
0
;
static
bool
InternalOnly_StreamIsSKP
(
SkStream
*
SkPictInfo
*
)
;
static
bool
InternalOnly_BufferIsSKP
(
SkReadBuffer
*
SkPictInfo
*
)
;
bool
suitableForGpuRasterization
(
GrContext
*
const
char
*
*
whyNot
=
NULL
)
const
;
struct
DeletionMessage
{
int32_t
fUniqueID
;
}
;
virtual
const
SkBigPicture
*
asSkBigPicture
(
)
const
{
return
NULL
;
}
static
void
SetPictureIOSecurityPrecautionsEnabled_Dangerous
(
bool
set
)
;
static
bool
PictureIOSecurityPrecautionsEnabled
(
)
;
#
ifdef
SK_SUPPORT_LEGACY_PICTURE_PTR
static
SkPicture
*
CreateFromStream
(
SkStream
*
stream
InstallPixelRefProc
proc
)
{
return
MakeFromStream
(
stream
proc
)
.
release
(
)
;
}
static
SkPicture
*
CreateFromStream
(
SkStream
*
stream
)
{
return
MakeFromStream
(
stream
)
.
release
(
)
;
}
static
SkPicture
*
CreateFromBuffer
(
SkReadBuffer
&
rbuf
)
{
return
MakeFromBuffer
(
rbuf
)
.
release
(
)
;
}
#
endif
private
:
SkPicture
(
)
;
friend
class
SkBigPicture
;
friend
class
SkEmptyPicture
;
template
<
typename
>
friend
class
SkMiniPicture
;
void
serialize
(
SkWStream
*
SkPixelSerializer
*
SkRefCntSet
*
typefaces
)
const
;
static
sk_sp
<
SkPicture
>
MakeFromStream
(
SkStream
*
InstallPixelRefProc
SkTypefacePlayback
*
)
;
friend
class
SkPictureData
;
virtual
int
numSlowPaths
(
)
const
=
0
;
friend
struct
SkPathCounter
;
static
const
uint32_t
MIN_PICTURE_VERSION
=
35
;
static
const
uint32_t
CURRENT_PICTURE_VERSION
=
44
;
static_assert
(
MIN_PICTURE_VERSION
<
=
41
"
Remove
kFontFileName
and
related
code
from
SkFontDescriptor
.
cpp
.
"
)
;
static_assert
(
MIN_PICTURE_VERSION
<
=
42
"
Remove
COMMENT
API
handlers
from
SkPicturePlayback
.
cpp
"
)
;
static_assert
(
MIN_PICTURE_VERSION
<
=
43
"
Remove
SkBitmapSourceDeserializer
.
"
)
;
static
bool
IsValidPictInfo
(
const
SkPictInfo
&
info
)
;
static
sk_sp
<
SkPicture
>
Forwardport
(
const
SkPictInfo
&
const
SkPictureData
*
)
;
SkPictInfo
createHeader
(
)
const
;
SkPictureData
*
backport
(
)
const
;
mutable
uint32_t
fUniqueID
;
}
;
#
endif
