#
ifndef
SkMaskFilter_DEFINED
#
define
SkMaskFilter_DEFINED
#
include
"
include
/
core
/
SkBlurTypes
.
h
"
#
include
"
include
/
core
/
SkCoverageMode
.
h
"
#
include
"
include
/
core
/
SkFlattenable
.
h
"
#
include
"
include
/
core
/
SkScalar
.
h
"
class
SkMatrix
;
struct
SkRect
;
class
SkString
;
class
SK_API
SkMaskFilter
:
public
SkFlattenable
{
public
:
static
sk_sp
<
SkMaskFilter
>
MakeBlur
(
SkBlurStyle
style
SkScalar
sigma
bool
respectCTM
=
true
)
;
static
sk_sp
<
SkMaskFilter
>
MakeCompose
(
sk_sp
<
SkMaskFilter
>
outer
sk_sp
<
SkMaskFilter
>
inner
)
;
static
sk_sp
<
SkMaskFilter
>
MakeCombine
(
sk_sp
<
SkMaskFilter
>
filterA
sk_sp
<
SkMaskFilter
>
filterB
SkCoverageMode
mode
)
;
sk_sp
<
SkMaskFilter
>
makeWithMatrix
(
const
SkMatrix
&
)
const
;
static
SkFlattenable
:
:
Type
GetFlattenableType
(
)
{
return
kSkMaskFilter_Type
;
}
SkFlattenable
:
:
Type
getFlattenableType
(
)
const
override
{
return
kSkMaskFilter_Type
;
}
static
sk_sp
<
SkMaskFilter
>
Deserialize
(
const
void
*
data
size_t
size
const
SkDeserialProcs
*
procs
=
nullptr
)
{
return
sk_sp
<
SkMaskFilter
>
(
static_cast
<
SkMaskFilter
*
>
(
SkFlattenable
:
:
Deserialize
(
kSkMaskFilter_Type
data
size
procs
)
.
release
(
)
)
)
;
}
private
:
static
void
RegisterFlattenables
(
)
;
friend
class
SkFlattenable
;
}
;
#
endif
