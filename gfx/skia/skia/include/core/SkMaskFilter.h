#
ifndef
SkMaskFilter_DEFINED
#
define
SkMaskFilter_DEFINED
#
include
"
SkBlurTypes
.
h
"
#
include
"
SkFlattenable
.
h
"
#
include
"
SkMask
.
h
"
#
include
"
SkPaint
.
h
"
#
include
"
SkStrokeRec
.
h
"
class
GrClip
;
class
GrContext
;
class
GrDrawContext
;
class
GrPaint
;
class
GrRenderTarget
;
class
GrTextureProvider
;
class
SkBitmap
;
class
SkBlitter
;
class
SkCachedData
;
class
SkMatrix
;
class
SkPath
;
class
SkRasterClip
;
class
SkRRect
;
class
SK_API
SkMaskFilter
:
public
SkFlattenable
{
public
:
virtual
SkMask
:
:
Format
getFormat
(
)
const
=
0
;
virtual
bool
filterMask
(
SkMask
*
dst
const
SkMask
&
src
const
SkMatrix
&
SkIPoint
*
margin
)
const
;
#
if
SK_SUPPORT_GPU
virtual
bool
asFragmentProcessor
(
GrFragmentProcessor
*
*
GrTexture
*
const
SkMatrix
&
ctm
)
const
;
virtual
bool
canFilterMaskGPU
(
const
SkRRect
&
devRRect
const
SkIRect
&
clipBounds
const
SkMatrix
&
ctm
SkRect
*
maskRect
)
const
;
virtual
bool
directFilterMaskGPU
(
GrTextureProvider
*
texProvider
GrDrawContext
*
drawContext
GrPaint
*
grp
const
GrClip
&
const
SkMatrix
&
viewMatrix
const
SkStrokeRec
&
strokeRec
const
SkPath
&
path
)
const
;
virtual
bool
directFilterRRectMaskGPU
(
GrContext
*
GrDrawContext
*
drawContext
GrPaint
*
grp
const
GrClip
&
const
SkMatrix
&
viewMatrix
const
SkStrokeRec
&
strokeRec
const
SkRRect
&
rrect
const
SkRRect
&
devRRect
)
const
;
virtual
bool
filterMaskGPU
(
GrTexture
*
src
const
SkMatrix
&
ctm
const
SkIRect
&
maskRect
GrTexture
*
*
result
)
const
;
#
endif
virtual
void
computeFastBounds
(
const
SkRect
&
src
SkRect
*
dest
)
const
;
struct
BlurRec
{
SkScalar
fSigma
;
SkBlurStyle
fStyle
;
SkBlurQuality
fQuality
;
}
;
virtual
bool
asABlur
(
BlurRec
*
)
const
;
SK_TO_STRING_PUREVIRT
(
)
SK_DEFINE_FLATTENABLE_TYPE
(
SkMaskFilter
)
protected
:
SkMaskFilter
(
)
{
}
enum
FilterReturn
{
kFalse_FilterReturn
kTrue_FilterReturn
kUnimplemented_FilterReturn
}
;
class
NinePatch
:
:
:
SkNoncopyable
{
public
:
NinePatch
(
)
:
fCache
(
nullptr
)
{
}
~
NinePatch
(
)
;
SkMask
fMask
;
SkIRect
fOuterRect
;
SkIPoint
fCenter
;
SkCachedData
*
fCache
;
}
;
virtual
FilterReturn
filterRectsToNine
(
const
SkRect
[
]
int
count
const
SkMatrix
&
const
SkIRect
&
clipBounds
NinePatch
*
)
const
;
virtual
FilterReturn
filterRRectToNine
(
const
SkRRect
&
const
SkMatrix
&
const
SkIRect
&
clipBounds
NinePatch
*
)
const
;
private
:
friend
class
SkDraw
;
bool
filterPath
(
const
SkPath
&
devPath
const
SkMatrix
&
ctm
const
SkRasterClip
&
SkBlitter
*
SkStrokeRec
:
:
InitStyle
)
const
;
bool
filterRRect
(
const
SkRRect
&
devRRect
const
SkMatrix
&
ctm
const
SkRasterClip
&
SkBlitter
*
)
const
;
typedef
SkFlattenable
INHERITED
;
}
;
#
endif
