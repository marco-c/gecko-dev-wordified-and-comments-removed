#
ifndef
SkMallocPixelRef_DEFINED
#
define
SkMallocPixelRef_DEFINED
#
include
"
SkPixelRef
.
h
"
class
SK_API
SkMallocPixelRef
:
public
SkPixelRef
{
public
:
static
SkMallocPixelRef
*
NewDirect
(
const
SkImageInfo
&
void
*
addr
size_t
rowBytes
SkColorTable
*
)
;
static
SkMallocPixelRef
*
NewAllocate
(
const
SkImageInfo
&
info
size_t
rowBytes
SkColorTable
*
)
;
static
SkMallocPixelRef
*
NewZeroed
(
const
SkImageInfo
&
info
size_t
rowBytes
SkColorTable
*
)
;
typedef
void
(
*
ReleaseProc
)
(
void
*
addr
void
*
context
)
;
static
SkMallocPixelRef
*
NewWithProc
(
const
SkImageInfo
&
info
size_t
rowBytes
SkColorTable
*
void
*
addr
ReleaseProc
proc
void
*
context
)
;
static
SkMallocPixelRef
*
NewWithData
(
const
SkImageInfo
&
info
size_t
rowBytes
SkColorTable
*
ctable
SkData
*
data
)
;
void
*
getAddr
(
)
const
{
return
fStorage
;
}
class
PRFactory
:
public
SkPixelRefFactory
{
public
:
SkPixelRef
*
create
(
const
SkImageInfo
&
size_t
rowBytes
SkColorTable
*
)
override
;
}
;
class
ZeroedPRFactory
:
public
SkPixelRefFactory
{
public
:
SkPixelRef
*
create
(
const
SkImageInfo
&
size_t
rowBytes
SkColorTable
*
)
override
;
}
;
protected
:
SkMallocPixelRef
(
const
SkImageInfo
&
void
*
addr
size_t
rb
SkColorTable
*
bool
ownPixels
)
;
virtual
~
SkMallocPixelRef
(
)
;
bool
onNewLockPixels
(
LockRec
*
)
override
;
void
onUnlockPixels
(
)
override
;
size_t
getAllocatedSizeInBytes
(
)
const
override
;
private
:
static
SkMallocPixelRef
*
NewUsing
(
void
*
(
*
alloc
)
(
size_t
)
const
SkImageInfo
&
size_t
rowBytes
SkColorTable
*
)
;
void
*
fStorage
;
SkColorTable
*
fCTable
;
size_t
fRB
;
ReleaseProc
fReleaseProc
;
void
*
fReleaseProcContext
;
SkMallocPixelRef
(
const
SkImageInfo
&
void
*
addr
size_t
rb
SkColorTable
*
ReleaseProc
proc
void
*
context
)
;
typedef
SkPixelRef
INHERITED
;
}
;
#
endif
