#
ifndef
SkSurface_DEFINED
#
define
SkSurface_DEFINED
#
include
"
SkRefCnt
.
h
"
#
include
"
SkImage
.
h
"
#
include
"
SkSurfaceProps
.
h
"
class
SkCanvas
;
class
SkPaint
;
class
GrContext
;
class
GrRenderTarget
;
class
SK_API
SkSurface
:
public
SkRefCnt
{
public
:
enum
Budgeted
{
kNo_Budgeted
kYes_Budgeted
}
;
static
SkSurface
*
NewRasterDirect
(
const
SkImageInfo
&
void
*
pixels
size_t
rowBytes
const
SkSurfaceProps
*
=
NULL
)
;
static
SkSurface
*
NewRasterDirectReleaseProc
(
const
SkImageInfo
&
void
*
pixels
size_t
rowBytes
void
(
*
releaseProc
)
(
void
*
pixels
void
*
context
)
void
*
context
const
SkSurfaceProps
*
=
NULL
)
;
static
SkSurface
*
NewRaster
(
const
SkImageInfo
&
const
SkSurfaceProps
*
=
NULL
)
;
static
SkSurface
*
NewRasterN32Premul
(
int
width
int
height
const
SkSurfaceProps
*
props
=
NULL
)
{
return
NewRaster
(
SkImageInfo
:
:
MakeN32Premul
(
width
height
)
props
)
;
}
static
SkSurface
*
NewRenderTargetDirect
(
GrRenderTarget
*
const
SkSurfaceProps
*
)
;
static
SkSurface
*
NewRenderTargetDirect
(
GrRenderTarget
*
target
)
{
return
NewRenderTargetDirect
(
target
NULL
)
;
}
static
SkSurface
*
NewFromBackendTexture
(
GrContext
*
const
GrBackendTextureDesc
&
const
SkSurfaceProps
*
)
;
static
SkSurface
*
NewWrappedRenderTarget
(
GrContext
*
ctx
const
GrBackendTextureDesc
&
desc
const
SkSurfaceProps
*
props
)
{
return
NewFromBackendTexture
(
ctx
desc
props
)
;
}
static
SkSurface
*
NewFromBackendRenderTarget
(
GrContext
*
const
GrBackendRenderTargetDesc
&
const
SkSurfaceProps
*
)
;
static
SkSurface
*
NewRenderTarget
(
GrContext
*
Budgeted
const
SkImageInfo
&
int
sampleCount
const
SkSurfaceProps
*
=
NULL
)
;
static
SkSurface
*
NewRenderTarget
(
GrContext
*
gr
Budgeted
b
const
SkImageInfo
&
info
)
{
return
NewRenderTarget
(
gr
b
info
0
NULL
)
;
}
int
width
(
)
const
{
return
fWidth
;
}
int
height
(
)
const
{
return
fHeight
;
}
uint32_t
generationID
(
)
;
enum
ContentChangeMode
{
kDiscard_ContentChangeMode
kRetain_ContentChangeMode
}
;
void
notifyContentWillChange
(
ContentChangeMode
mode
)
;
enum
BackendHandleAccess
{
kFlushRead_BackendHandleAccess
kFlushWrite_BackendHandleAccess
kDiscardWrite_BackendHandleAccess
}
;
static
const
BackendHandleAccess
kFlushRead_TextureHandleAccess
=
kFlushRead_BackendHandleAccess
;
static
const
BackendHandleAccess
kFlushWrite_TextureHandleAccess
=
kFlushWrite_BackendHandleAccess
;
static
const
BackendHandleAccess
kDiscardWrite_TextureHandleAccess
=
kDiscardWrite_BackendHandleAccess
;
GrBackendObject
getTextureHandle
(
BackendHandleAccess
)
;
bool
getRenderTargetHandle
(
GrBackendObject
*
BackendHandleAccess
)
;
SkCanvas
*
getCanvas
(
)
;
SkSurface
*
newSurface
(
const
SkImageInfo
&
)
;
SkImage
*
newImageSnapshot
(
Budgeted
=
kYes_Budgeted
)
;
void
draw
(
SkCanvas
*
SkScalar
x
SkScalar
y
const
SkPaint
*
)
;
const
void
*
peekPixels
(
SkImageInfo
*
info
size_t
*
rowBytes
)
;
bool
readPixels
(
const
SkImageInfo
&
dstInfo
void
*
dstPixels
size_t
dstRowBytes
int
srcX
int
srcY
)
;
const
SkSurfaceProps
&
props
(
)
const
{
return
fProps
;
}
protected
:
SkSurface
(
int
width
int
height
const
SkSurfaceProps
*
)
;
SkSurface
(
const
SkImageInfo
&
const
SkSurfaceProps
*
)
;
void
dirtyGenerationID
(
)
{
fGenerationID
=
0
;
}
private
:
const
SkSurfaceProps
fProps
;
const
int
fWidth
;
const
int
fHeight
;
uint32_t
fGenerationID
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
