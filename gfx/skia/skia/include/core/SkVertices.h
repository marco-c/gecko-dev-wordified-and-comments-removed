#
ifndef
SkVertices_DEFINED
#
define
SkVertices_DEFINED
#
include
"
SkColor
.
h
"
#
include
"
SkData
.
h
"
#
include
"
SkPoint
.
h
"
#
include
"
SkRect
.
h
"
#
include
"
SkRefCnt
.
h
"
class
SkVertices
:
public
SkNVRefCnt
<
SkVertices
>
{
public
:
enum
VertexMode
{
kTriangles_VertexMode
kTriangleStrip_VertexMode
kTriangleFan_VertexMode
}
;
static
sk_sp
<
SkVertices
>
MakeCopy
(
VertexMode
mode
int
vertexCount
const
SkPoint
positions
[
]
const
SkPoint
texs
[
]
const
SkColor
colors
[
]
int
indexCount
const
uint16_t
indices
[
]
)
;
static
sk_sp
<
SkVertices
>
MakeCopy
(
VertexMode
mode
int
vertexCount
const
SkPoint
positions
[
]
const
SkPoint
texs
[
]
const
SkColor
colors
[
]
)
{
return
MakeCopy
(
mode
vertexCount
positions
texs
colors
0
nullptr
)
;
}
struct
Sizes
;
enum
BuilderFlags
{
kHasTexCoords_BuilderFlag
=
1
<
<
0
kHasColors_BuilderFlag
=
1
<
<
1
}
;
class
Builder
{
public
:
Builder
(
VertexMode
mode
int
vertexCount
int
indexCount
uint32_t
flags
)
;
bool
isValid
(
)
const
{
return
fVertices
!
=
nullptr
;
}
int
vertexCount
(
)
const
;
int
indexCount
(
)
const
;
SkPoint
*
positions
(
)
;
SkPoint
*
texCoords
(
)
;
SkColor
*
colors
(
)
;
uint16_t
*
indices
(
)
;
sk_sp
<
SkVertices
>
detach
(
)
;
private
:
Builder
(
VertexMode
mode
int
vertexCount
int
indexCount
const
Sizes
&
)
;
void
init
(
VertexMode
mode
int
vertexCount
int
indexCount
const
Sizes
&
)
;
sk_sp
<
SkVertices
>
fVertices
;
friend
class
SkVertices
;
}
;
uint32_t
uniqueID
(
)
const
{
return
fUniqueID
;
}
VertexMode
mode
(
)
const
{
return
fMode
;
}
const
SkRect
&
bounds
(
)
const
{
return
fBounds
;
}
bool
hasColors
(
)
const
{
return
SkToBool
(
this
-
>
colors
(
)
)
;
}
bool
hasTexCoords
(
)
const
{
return
SkToBool
(
this
-
>
texCoords
(
)
)
;
}
bool
hasIndices
(
)
const
{
return
SkToBool
(
this
-
>
indices
(
)
)
;
}
int
vertexCount
(
)
const
{
return
fVertexCnt
;
}
const
SkPoint
*
positions
(
)
const
{
return
fPositions
;
}
const
SkPoint
*
texCoords
(
)
const
{
return
fTexs
;
}
const
SkColor
*
colors
(
)
const
{
return
fColors
;
}
int
indexCount
(
)
const
{
return
fIndexCnt
;
}
const
uint16_t
*
indices
(
)
const
{
return
fIndices
;
}
size_t
approximateSize
(
)
const
;
static
sk_sp
<
SkVertices
>
Decode
(
const
void
*
buffer
size_t
length
)
;
sk_sp
<
SkData
>
encode
(
)
const
;
private
:
SkVertices
(
)
{
}
friend
class
SkNVRefCnt
<
SkVertices
>
;
void
operator
delete
(
void
*
p
)
{
:
:
operator
delete
(
p
)
;
}
static
sk_sp
<
SkVertices
>
Alloc
(
int
vCount
int
iCount
uint32_t
builderFlags
size_t
*
arraySize
)
;
uint32_t
fUniqueID
;
SkPoint
*
fPositions
;
SkPoint
*
fTexs
;
SkColor
*
fColors
;
uint16_t
*
fIndices
;
SkRect
fBounds
;
int
fVertexCnt
;
int
fIndexCnt
;
VertexMode
fMode
;
}
;
#
endif
