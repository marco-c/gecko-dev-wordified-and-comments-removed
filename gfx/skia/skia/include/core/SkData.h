#
ifndef
SkData_DEFINED
#
define
SkData_DEFINED
#
include
<
stdio
.
h
>
#
include
"
SkRefCnt
.
h
"
class
SkStream
;
class
SK_API
SkData
:
public
SkRefCnt
{
public
:
size_t
size
(
)
const
{
return
fSize
;
}
bool
isEmpty
(
)
const
{
return
0
=
=
fSize
;
}
const
void
*
data
(
)
const
{
return
fPtr
;
}
const
uint8_t
*
bytes
(
)
const
{
return
reinterpret_cast
<
const
uint8_t
*
>
(
fPtr
)
;
}
void
*
writable_data
(
)
{
if
(
fSize
)
{
SkASSERT
(
this
-
>
unique
(
)
)
;
}
return
fPtr
;
}
size_t
copyRange
(
size_t
offset
size_t
length
void
*
buffer
)
const
;
bool
equals
(
const
SkData
*
other
)
const
;
typedef
void
(
*
ReleaseProc
)
(
const
void
*
ptr
void
*
context
)
;
static
SkData
*
NewWithCopy
(
const
void
*
data
size_t
length
)
;
static
SkData
*
NewUninitialized
(
size_t
length
)
;
static
SkData
*
NewWithCString
(
const
char
cstr
[
]
)
;
static
SkData
*
NewWithProc
(
const
void
*
ptr
size_t
length
ReleaseProc
proc
void
*
context
)
;
static
SkData
*
NewWithoutCopy
(
const
void
*
data
size_t
length
)
{
return
NewWithProc
(
data
length
DummyReleaseProc
NULL
)
;
}
static
SkData
*
NewFromMalloc
(
const
void
*
data
size_t
length
)
;
static
SkData
*
NewFromFileName
(
const
char
path
[
]
)
;
static
SkData
*
NewFromFILE
(
FILE
*
f
)
;
static
SkData
*
NewFromFD
(
int
fd
)
;
static
SkData
*
NewFromStream
(
SkStream
*
size_t
size
)
;
static
SkData
*
NewSubset
(
const
SkData
*
src
size_t
offset
size_t
length
)
;
static
SkData
*
NewEmpty
(
)
;
private
:
ReleaseProc
fReleaseProc
;
void
*
fReleaseProcContext
;
void
*
fPtr
;
size_t
fSize
;
SkData
(
const
void
*
ptr
size_t
size
ReleaseProc
void
*
context
)
;
explicit
SkData
(
size_t
size
)
;
virtual
~
SkData
(
)
;
void
*
operator
new
(
size_t
size
)
{
return
sk_malloc_throw
(
size
)
;
}
void
*
operator
new
(
size_t
void
*
p
)
{
return
p
;
}
void
operator
delete
(
void
*
p
)
{
sk_free
(
p
)
;
}
friend
SkData
*
sk_new_empty_data
(
)
;
static
SkData
*
PrivateNewWithCopy
(
const
void
*
srcOrNull
size_t
length
)
;
static
void
DummyReleaseProc
(
const
void
*
void
*
)
{
}
typedef
SkRefCnt
INHERITED
;
}
;
typedef
SkAutoTUnref
<
SkData
>
SkAutoDataUnref
;
#
endif
