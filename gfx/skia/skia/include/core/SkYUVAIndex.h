#
ifndef
SkYUVAIndex_DEFINED
#
define
SkYUVAIndex_DEFINED
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
struct
SK_API
SkYUVAIndex
{
bool
operator
=
=
(
const
SkYUVAIndex
&
that
)
const
{
return
this
-
>
fIndex
=
=
that
.
fIndex
&
&
this
-
>
fChannel
=
=
that
.
fChannel
;
}
bool
operator
!
=
(
const
SkYUVAIndex
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
enum
Index
{
kY_Index
=
0
kU_Index
=
1
kV_Index
=
2
kA_Index
=
3
kLast_Index
=
kA_Index
}
;
static
constexpr
int
kIndexCount
=
kLast_Index
+
1
;
int
fIndex
;
SkColorChannel
fChannel
;
static
bool
AreValidIndices
(
const
SkYUVAIndex
yuvaIndices
[
4
]
int
*
numPlanes
)
{
int
maxSlotUsed
=
-
1
;
bool
used
[
4
]
=
{
false
false
false
false
}
;
bool
valid
=
true
;
for
(
int
i
=
0
;
i
<
4
;
+
+
i
)
{
if
(
yuvaIndices
[
i
]
.
fIndex
<
0
)
{
if
(
SkYUVAIndex
:
:
kA_Index
!
=
i
)
{
valid
=
false
;
}
}
else
if
(
yuvaIndices
[
i
]
.
fIndex
>
3
)
{
valid
=
false
;
}
else
{
maxSlotUsed
=
SkTMax
(
yuvaIndices
[
i
]
.
fIndex
maxSlotUsed
)
;
used
[
i
]
=
true
;
}
}
for
(
int
i
=
0
;
i
<
=
maxSlotUsed
;
+
+
i
)
{
if
(
!
used
[
i
]
)
{
valid
=
false
;
}
}
*
numPlanes
=
maxSlotUsed
+
1
;
return
valid
;
}
}
;
#
endif
