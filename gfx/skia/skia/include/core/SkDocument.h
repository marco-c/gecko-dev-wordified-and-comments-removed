#
ifndef
SkDocument_DEFINED
#
define
SkDocument_DEFINED
#
include
"
SkBitmap
.
h
"
#
include
"
SkPicture
.
h
"
#
include
"
SkRect
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkString
.
h
"
#
include
"
SkTime
.
h
"
class
SkCanvas
;
class
SkPixelSerializer
;
class
SkWStream
;
#
define
SK_ScalarDefaultRasterDPI
72
.
0f
class
SK_API
SkDocument
:
public
SkRefCnt
{
public
:
static
SkDocument
*
CreatePDF
(
SkWStream
*
SkScalar
dpi
=
SK_ScalarDefaultRasterDPI
)
;
static
SkDocument
*
CreatePDF
(
SkWStream
*
SkScalar
dpi
SkPixelSerializer
*
jpegEncoder
)
;
static
SkDocument
*
CreatePDF
(
const
char
outputFilePath
[
]
SkScalar
dpi
=
SK_ScalarDefaultRasterDPI
)
;
static
SkDocument
*
CreateXPS
(
SkWStream
*
stream
SkScalar
dpi
=
SK_ScalarDefaultRasterDPI
)
;
static
SkDocument
*
CreateXPS
(
const
char
path
[
]
SkScalar
dpi
=
SK_ScalarDefaultRasterDPI
)
;
SkCanvas
*
beginPage
(
SkScalar
width
SkScalar
height
const
SkRect
*
content
=
NULL
)
;
void
endPage
(
)
;
bool
close
(
)
;
void
abort
(
)
;
struct
Attribute
{
SkString
fKey
fValue
;
Attribute
(
const
SkString
&
k
const
SkString
&
v
)
:
fKey
(
k
)
fValue
(
v
)
{
}
}
;
virtual
void
setMetadata
(
const
SkDocument
:
:
Attribute
[
]
int
const
SkTime
:
:
DateTime
*
const
SkTime
:
:
DateTime
*
)
{
}
protected
:
SkDocument
(
SkWStream
*
void
(
*
)
(
SkWStream
*
bool
aborted
)
)
;
virtual
~
SkDocument
(
)
;
virtual
SkCanvas
*
onBeginPage
(
SkScalar
width
SkScalar
height
const
SkRect
&
content
)
=
0
;
virtual
void
onEndPage
(
)
=
0
;
virtual
bool
onClose
(
SkWStream
*
)
=
0
;
virtual
void
onAbort
(
)
=
0
;
SkWStream
*
getStream
(
)
{
return
fStream
;
}
enum
State
{
kBetweenPages_State
kInPage_State
kClosed_State
}
;
State
getState
(
)
const
{
return
fState
;
}
private
:
SkWStream
*
fStream
;
void
(
*
fDoneProc
)
(
SkWStream
*
bool
aborted
)
;
State
fState
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
