#
ifndef
SkDrawLooper_DEFINED
#
define
SkDrawLooper_DEFINED
#
include
"
include
/
core
/
SkBlurTypes
.
h
"
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkFlattenable
.
h
"
#
include
"
include
/
core
/
SkPoint
.
h
"
#
include
<
functional
>
class
SkArenaAlloc
;
class
SkCanvas
;
class
SkPaint
;
struct
SkRect
;
class
SkString
;
class
SK_API
SkDrawLooper
:
public
SkFlattenable
{
public
:
class
SK_API
Context
{
public
:
Context
(
)
{
}
virtual
~
Context
(
)
{
}
struct
Info
{
SkVector
fTranslate
;
bool
fApplyPostCTM
;
void
applyToCTM
(
SkMatrix
*
ctm
)
const
;
void
applyToCanvas
(
SkCanvas
*
)
const
;
}
;
virtual
bool
next
(
Info
*
SkPaint
*
)
=
0
;
private
:
Context
(
const
Context
&
)
=
delete
;
Context
&
operator
=
(
const
Context
&
)
=
delete
;
}
;
virtual
Context
*
makeContext
(
SkArenaAlloc
*
)
const
=
0
;
bool
canComputeFastBounds
(
const
SkPaint
&
paint
)
const
;
void
computeFastBounds
(
const
SkPaint
&
paint
const
SkRect
&
src
SkRect
*
dst
)
const
;
struct
BlurShadowRec
{
SkScalar
fSigma
;
SkVector
fOffset
;
SkColor
fColor
;
SkBlurStyle
fStyle
;
}
;
virtual
bool
asABlurShadow
(
BlurShadowRec
*
)
const
;
static
SkFlattenable
:
:
Type
GetFlattenableType
(
)
{
return
kSkDrawLooper_Type
;
}
SkFlattenable
:
:
Type
getFlattenableType
(
)
const
override
{
return
kSkDrawLooper_Type
;
}
static
sk_sp
<
SkDrawLooper
>
Deserialize
(
const
void
*
data
size_t
size
const
SkDeserialProcs
*
procs
=
nullptr
)
{
return
sk_sp
<
SkDrawLooper
>
(
static_cast
<
SkDrawLooper
*
>
(
SkFlattenable
:
:
Deserialize
(
kSkDrawLooper_Type
data
size
procs
)
.
release
(
)
)
)
;
}
void
apply
(
SkCanvas
*
canvas
const
SkPaint
&
paint
std
:
:
function
<
void
(
SkCanvas
*
const
SkPaint
&
)
>
)
;
protected
:
SkDrawLooper
(
)
{
}
private
:
typedef
SkFlattenable
INHERITED
;
}
;
#
endif
