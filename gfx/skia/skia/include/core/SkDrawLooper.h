#
ifndef
SkDrawLooper_DEFINED
#
define
SkDrawLooper_DEFINED
#
include
"
SkBlurTypes
.
h
"
#
include
"
SkFlattenable
.
h
"
#
include
"
SkPoint
.
h
"
#
include
"
SkColor
.
h
"
class
SkArenaAlloc
;
class
SkCanvas
;
class
SkColorSpaceXformer
;
class
SkPaint
;
struct
SkRect
;
class
SkString
;
class
SK_API
SkDrawLooper
:
public
SkFlattenable
{
public
:
class
SK_API
Context
:
:
:
SkNoncopyable
{
public
:
Context
(
)
{
}
virtual
~
Context
(
)
{
}
virtual
bool
next
(
SkCanvas
*
canvas
SkPaint
*
paint
)
=
0
;
}
;
virtual
Context
*
makeContext
(
SkCanvas
*
SkArenaAlloc
*
)
const
=
0
;
bool
canComputeFastBounds
(
const
SkPaint
&
paint
)
const
;
void
computeFastBounds
(
const
SkPaint
&
paint
const
SkRect
&
src
SkRect
*
dst
)
const
;
struct
BlurShadowRec
{
SkScalar
fSigma
;
SkVector
fOffset
;
SkColor
fColor
;
SkBlurStyle
fStyle
;
SkBlurQuality
fQuality
;
}
;
virtual
bool
asABlurShadow
(
BlurShadowRec
*
)
const
;
SK_TO_STRING_PUREVIRT
(
)
SK_DEFINE_FLATTENABLE_TYPE
(
SkDrawLooper
)
protected
:
sk_sp
<
SkDrawLooper
>
makeColorSpace
(
SkColorSpaceXformer
*
xformer
)
const
{
return
this
-
>
onMakeColorSpace
(
xformer
)
;
}
virtual
sk_sp
<
SkDrawLooper
>
onMakeColorSpace
(
SkColorSpaceXformer
*
)
const
=
0
;
SkDrawLooper
(
)
{
}
private
:
friend
class
SkColorSpaceXformer
;
typedef
SkFlattenable
INHERITED
;
}
;
#
endif
