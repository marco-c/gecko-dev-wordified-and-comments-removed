#
ifndef
SkPathEffect_DEFINED
#
define
SkPathEffect_DEFINED
#
include
"
SkFlattenable
.
h
"
#
include
"
SkPath
.
h
"
#
include
"
SkPoint
.
h
"
#
include
"
SkRect
.
h
"
class
SkPath
;
class
SkStrokeRec
;
class
SK_API
SkPathEffect
:
public
SkFlattenable
{
public
:
static
sk_sp
<
SkPathEffect
>
MakeSum
(
sk_sp
<
SkPathEffect
>
first
sk_sp
<
SkPathEffect
>
second
)
;
static
sk_sp
<
SkPathEffect
>
MakeCompose
(
sk_sp
<
SkPathEffect
>
outer
sk_sp
<
SkPathEffect
>
inner
)
;
bool
filterPath
(
SkPath
*
dst
const
SkPath
&
src
SkStrokeRec
*
const
SkRect
*
cullR
)
const
;
void
computeFastBounds
(
SkRect
*
dst
const
SkRect
&
src
)
const
;
class
PointData
{
public
:
PointData
(
)
:
fFlags
(
0
)
fPoints
(
nullptr
)
fNumPoints
(
0
)
{
fSize
.
set
(
SK_Scalar1
SK_Scalar1
)
;
}
~
PointData
(
)
{
delete
[
]
fPoints
;
}
enum
PointFlags
{
kCircles_PointFlag
=
0x01
kUsePath_PointFlag
=
0x02
kUseClip_PointFlag
=
0x04
}
;
uint32_t
fFlags
;
SkPoint
*
fPoints
;
int
fNumPoints
;
SkVector
fSize
;
SkRect
fClipRect
;
SkPath
fPath
;
SkPath
fFirst
;
SkPath
fLast
;
}
;
bool
asPoints
(
PointData
*
results
const
SkPath
&
src
const
SkStrokeRec
&
const
SkMatrix
&
const
SkRect
*
cullR
)
const
;
enum
DashType
{
kNone_DashType
kDash_DashType
}
;
struct
DashInfo
{
DashInfo
(
)
:
fIntervals
(
nullptr
)
fCount
(
0
)
fPhase
(
0
)
{
}
DashInfo
(
SkScalar
*
intervals
int32_t
count
SkScalar
phase
)
:
fIntervals
(
intervals
)
fCount
(
count
)
fPhase
(
phase
)
{
}
SkScalar
*
fIntervals
;
int32_t
fCount
;
SkScalar
fPhase
;
}
;
DashType
asADash
(
DashInfo
*
info
)
const
;
static
void
RegisterFlattenables
(
)
;
static
SkFlattenable
:
:
Type
GetFlattenableType
(
)
{
return
kSkPathEffect_Type
;
}
SkFlattenable
:
:
Type
getFlattenableType
(
)
const
override
{
return
kSkPathEffect_Type
;
}
static
sk_sp
<
SkPathEffect
>
Deserialize
(
const
void
*
data
size_t
size
const
SkDeserialProcs
*
procs
=
nullptr
)
{
return
sk_sp
<
SkPathEffect
>
(
static_cast
<
SkPathEffect
*
>
(
SkFlattenable
:
:
Deserialize
(
kSkPathEffect_Type
data
size
procs
)
.
release
(
)
)
)
;
}
protected
:
SkPathEffect
(
)
{
}
virtual
bool
onFilterPath
(
SkPath
*
const
SkPath
&
SkStrokeRec
*
const
SkRect
*
)
const
=
0
;
virtual
SkRect
onComputeFastBounds
(
const
SkRect
&
src
)
const
{
return
src
;
}
virtual
bool
onAsPoints
(
PointData
*
const
SkPath
&
const
SkStrokeRec
&
const
SkMatrix
&
const
SkRect
*
)
const
{
return
false
;
}
virtual
DashType
onAsADash
(
DashInfo
*
)
const
{
return
kNone_DashType
;
}
private
:
SkPathEffect
(
const
SkPathEffect
&
)
;
SkPathEffect
&
operator
=
(
const
SkPathEffect
&
)
;
typedef
SkFlattenable
INHERITED
;
}
;
#
endif
