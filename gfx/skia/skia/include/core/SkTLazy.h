#
ifndef
SkTLazy_DEFINED
#
define
SkTLazy_DEFINED
#
include
"
.
.
/
private
/
SkTemplates
.
h
"
#
include
"
SkTypes
.
h
"
#
include
<
new
>
#
include
<
utility
>
template
<
typename
T
>
class
SkTLazy
{
public
:
SkTLazy
(
)
:
fPtr
(
nullptr
)
{
}
explicit
SkTLazy
(
const
T
*
src
)
:
fPtr
(
src
?
new
(
fStorage
.
get
(
)
)
T
(
*
src
)
:
nullptr
)
{
}
SkTLazy
(
const
SkTLazy
&
that
)
:
fPtr
(
nullptr
)
{
*
this
=
that
;
}
SkTLazy
(
SkTLazy
&
&
that
)
:
fPtr
(
nullptr
)
{
*
this
=
std
:
:
move
(
that
)
;
}
~
SkTLazy
(
)
{
if
(
this
-
>
isValid
(
)
)
{
fPtr
-
>
~
T
(
)
;
}
}
SkTLazy
&
operator
=
(
const
SkTLazy
&
that
)
{
if
(
that
.
isValid
(
)
)
{
this
-
>
set
(
*
that
.
get
(
)
)
;
}
else
{
this
-
>
reset
(
)
;
}
return
*
this
;
}
SkTLazy
&
operator
=
(
SkTLazy
&
&
that
)
{
if
(
that
.
isValid
(
)
)
{
this
-
>
set
(
std
:
:
move
(
*
that
.
get
(
)
)
)
;
}
else
{
this
-
>
reset
(
)
;
}
return
*
this
;
}
template
<
typename
.
.
.
Args
>
T
*
init
(
Args
&
&
.
.
.
args
)
{
if
(
this
-
>
isValid
(
)
)
{
fPtr
-
>
~
T
(
)
;
}
fPtr
=
new
(
SkTCast
<
T
*
>
(
fStorage
.
get
(
)
)
)
T
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
return
fPtr
;
}
T
*
set
(
const
T
&
src
)
{
if
(
this
-
>
isValid
(
)
)
{
*
fPtr
=
src
;
}
else
{
fPtr
=
new
(
SkTCast
<
T
*
>
(
fStorage
.
get
(
)
)
)
T
(
src
)
;
}
return
fPtr
;
}
T
*
set
(
T
&
&
src
)
{
if
(
this
-
>
isValid
(
)
)
{
*
fPtr
=
std
:
:
move
(
src
)
;
}
else
{
fPtr
=
new
(
SkTCast
<
T
*
>
(
fStorage
.
get
(
)
)
)
T
(
std
:
:
move
(
src
)
)
;
}
return
fPtr
;
}
void
reset
(
)
{
if
(
this
-
>
isValid
(
)
)
{
fPtr
-
>
~
T
(
)
;
fPtr
=
nullptr
;
}
}
bool
isValid
(
)
const
{
return
SkToBool
(
fPtr
)
;
}
T
*
get
(
)
const
{
SkASSERT
(
this
-
>
isValid
(
)
)
;
return
fPtr
;
}
T
*
getMaybeNull
(
)
const
{
return
fPtr
;
}
private
:
SkAlignedSTStorage
<
1
T
>
fStorage
;
T
*
fPtr
;
}
;
template
<
typename
T
>
class
SkTCopyOnFirstWrite
{
public
:
SkTCopyOnFirstWrite
(
const
T
&
initial
)
:
fObj
(
&
initial
)
{
}
SkTCopyOnFirstWrite
(
const
T
*
initial
)
:
fObj
(
initial
)
{
}
SkTCopyOnFirstWrite
(
)
:
fObj
(
nullptr
)
{
}
void
init
(
const
T
&
initial
)
{
SkASSERT
(
nullptr
=
=
fObj
)
;
SkASSERT
(
!
fLazy
.
isValid
(
)
)
;
fObj
=
&
initial
;
}
T
*
writable
(
)
{
SkASSERT
(
fObj
)
;
if
(
!
fLazy
.
isValid
(
)
)
{
fLazy
.
set
(
*
fObj
)
;
fObj
=
fLazy
.
get
(
)
;
}
return
const_cast
<
T
*
>
(
fObj
)
;
}
const
T
*
operator
-
>
(
)
const
{
return
fObj
;
}
operator
const
T
*
(
)
const
{
return
fObj
;
}
const
T
&
operator
*
(
)
const
{
return
*
fObj
;
}
private
:
const
T
*
fObj
;
SkTLazy
<
T
>
fLazy
;
}
;
#
endif
