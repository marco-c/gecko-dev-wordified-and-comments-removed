#
ifndef
SkImage_DEFINED
#
define
SkImage_DEFINED
#
include
"
SkFilterQuality
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkImageEncoder
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkScalar
.
h
"
#
include
"
SkShader
.
h
"
class
SkData
;
class
SkCanvas
;
class
SkColorTable
;
class
SkCrossContextImageData
;
class
SkImageGenerator
;
class
SkPaint
;
class
SkPicture
;
class
SkPixelSerializer
;
class
SkString
;
class
SkSurface
;
class
GrContext
;
class
GrContextThreadSafeProxy
;
class
GrTexture
;
class
SK_API
SkImage
:
public
SkRefCnt
{
public
:
typedef
SkImageInfo
Info
;
typedef
void
*
ReleaseContext
;
static
sk_sp
<
SkImage
>
MakeRasterCopy
(
const
SkPixmap
&
)
;
static
sk_sp
<
SkImage
>
MakeRasterData
(
const
Info
&
sk_sp
<
SkData
>
pixels
size_t
rowBytes
)
;
typedef
void
(
*
RasterReleaseProc
)
(
const
void
*
pixels
ReleaseContext
)
;
static
sk_sp
<
SkImage
>
MakeFromRaster
(
const
SkPixmap
&
RasterReleaseProc
ReleaseContext
)
;
static
sk_sp
<
SkImage
>
MakeFromBitmap
(
const
SkBitmap
&
)
;
static
sk_sp
<
SkImage
>
MakeFromGenerator
(
std
:
:
unique_ptr
<
SkImageGenerator
>
const
SkIRect
*
subset
=
nullptr
)
;
static
sk_sp
<
SkImage
>
MakeFromEncoded
(
sk_sp
<
SkData
>
encoded
const
SkIRect
*
subset
=
nullptr
)
;
static
sk_sp
<
SkImage
>
MakeFromTexture
(
GrContext
*
ctx
const
GrBackendTextureDesc
&
desc
)
{
return
MakeFromTexture
(
ctx
desc
kPremul_SkAlphaType
nullptr
nullptr
nullptr
)
;
}
static
sk_sp
<
SkImage
>
MakeFromTexture
(
GrContext
*
ctx
const
GrBackendTextureDesc
&
de
SkAlphaType
at
)
{
return
MakeFromTexture
(
ctx
de
at
nullptr
nullptr
nullptr
)
;
}
typedef
void
(
*
TextureReleaseProc
)
(
ReleaseContext
)
;
static
sk_sp
<
SkImage
>
MakeFromTexture
(
GrContext
*
ctx
const
GrBackendTextureDesc
&
desc
SkAlphaType
at
TextureReleaseProc
trp
ReleaseContext
rc
)
{
return
MakeFromTexture
(
ctx
desc
at
nullptr
trp
rc
)
;
}
static
sk_sp
<
SkImage
>
MakeFromTexture
(
GrContext
*
const
GrBackendTextureDesc
&
SkAlphaType
sk_sp
<
SkColorSpace
>
TextureReleaseProc
ReleaseContext
)
;
static
sk_sp
<
SkImage
>
MakeFromAdoptedTexture
(
GrContext
*
const
GrBackendTextureDesc
&
SkAlphaType
=
kPremul_SkAlphaType
sk_sp
<
SkColorSpace
>
=
nullptr
)
;
static
sk_sp
<
SkImage
>
MakeFromYUVTexturesCopy
(
GrContext
*
SkYUVColorSpace
const
GrBackendObject
yuvTextureHandles
[
3
]
const
SkISize
yuvSizes
[
3
]
GrSurfaceOrigin
sk_sp
<
SkColorSpace
>
=
nullptr
)
;
static
sk_sp
<
SkImage
>
MakeFromNV12TexturesCopy
(
GrContext
*
SkYUVColorSpace
const
GrBackendObject
nv12TextureHandles
[
2
]
const
SkISize
nv12Sizes
[
2
]
GrSurfaceOrigin
sk_sp
<
SkColorSpace
>
=
nullptr
)
;
enum
class
BitDepth
{
kU8
kF16
}
;
static
sk_sp
<
SkImage
>
MakeFromPicture
(
sk_sp
<
SkPicture
>
const
SkISize
&
dimensions
const
SkMatrix
*
const
SkPaint
*
BitDepth
sk_sp
<
SkColorSpace
>
)
;
int
width
(
)
const
{
return
fWidth
;
}
int
height
(
)
const
{
return
fHeight
;
}
SkISize
dimensions
(
)
const
{
return
SkISize
:
:
Make
(
fWidth
fHeight
)
;
}
SkIRect
bounds
(
)
const
{
return
SkIRect
:
:
MakeWH
(
fWidth
fHeight
)
;
}
uint32_t
uniqueID
(
)
const
{
return
fUniqueID
;
}
SkAlphaType
alphaType
(
)
const
;
SkColorSpace
*
colorSpace
(
)
const
;
sk_sp
<
SkColorSpace
>
refColorSpace
(
)
const
;
bool
isAlphaOnly
(
)
const
;
bool
isOpaque
(
)
const
{
return
SkAlphaTypeIsOpaque
(
this
-
>
alphaType
(
)
)
;
}
bool
readYUV8Planes
(
const
SkISize
[
3
]
void
*
const
planes
[
3
]
const
size_t
rowBytes
[
3
]
SkYUVColorSpace
)
const
;
sk_sp
<
SkShader
>
makeShader
(
SkShader
:
:
TileMode
SkShader
:
:
TileMode
const
SkMatrix
*
localMatrix
=
nullptr
)
const
;
bool
peekPixels
(
SkPixmap
*
pixmap
)
const
;
GrTexture
*
getTexture
(
)
const
;
bool
isTextureBacked
(
)
const
;
GrBackendObject
getTextureHandle
(
bool
flushPendingGrContextIO
GrSurfaceOrigin
*
origin
=
nullptr
)
const
;
enum
CachingHint
{
kAllow_CachingHint
kDisallow_CachingHint
}
;
bool
readPixels
(
const
SkImageInfo
&
dstInfo
void
*
dstPixels
size_t
dstRowBytes
int
srcX
int
srcY
CachingHint
=
kAllow_CachingHint
)
const
;
bool
readPixels
(
const
SkPixmap
&
dst
int
srcX
int
srcY
CachingHint
=
kAllow_CachingHint
)
const
;
bool
scalePixels
(
const
SkPixmap
&
dst
SkFilterQuality
CachingHint
=
kAllow_CachingHint
)
const
;
SkData
*
encode
(
SkEncodedImageFormat
int
quality
)
const
;
SkData
*
encode
(
SkPixelSerializer
*
=
nullptr
)
const
;
SkData
*
refEncoded
(
)
const
;
const
char
*
toString
(
SkString
*
)
const
;
sk_sp
<
SkImage
>
makeSubset
(
const
SkIRect
&
subset
)
const
;
sk_sp
<
SkImage
>
makeTextureImage
(
GrContext
*
SkColorSpace
*
dstColorSpace
)
const
;
static
sk_sp
<
SkImage
>
MakeFromCrossContextImageData
(
GrContext
*
std
:
:
unique_ptr
<
SkCrossContextImageData
>
)
;
sk_sp
<
SkImage
>
makeNonTextureImage
(
)
const
;
sk_sp
<
SkImage
>
makeWithFilter
(
const
SkImageFilter
*
filter
const
SkIRect
&
subset
const
SkIRect
&
clipBounds
SkIRect
*
outSubset
SkIPoint
*
offset
)
const
;
struct
DeferredTextureImageUsageParams
{
DeferredTextureImageUsageParams
(
const
SkMatrix
matrix
const
SkFilterQuality
quality
int
preScaleMipLevel
)
:
fMatrix
(
matrix
)
fQuality
(
quality
)
fPreScaleMipLevel
(
preScaleMipLevel
)
{
}
SkMatrix
fMatrix
;
SkFilterQuality
fQuality
;
int
fPreScaleMipLevel
;
}
;
size_t
getDeferredTextureImageData
(
const
GrContextThreadSafeProxy
&
const
DeferredTextureImageUsageParams
[
]
int
paramCnt
void
*
buffer
SkColorSpace
*
dstColorSpace
=
nullptr
)
const
;
static
sk_sp
<
SkImage
>
MakeFromDeferredTextureImageData
(
GrContext
*
const
void
*
SkBudgeted
)
;
enum
LegacyBitmapMode
{
kRO_LegacyBitmapMode
kRW_LegacyBitmapMode
}
;
bool
asLegacyBitmap
(
SkBitmap
*
LegacyBitmapMode
)
const
;
bool
isLazyGenerated
(
)
const
;
sk_sp
<
SkImage
>
makeColorSpace
(
sk_sp
<
SkColorSpace
>
target
SkTransferFunctionBehavior
premulBehavior
)
const
;
protected
:
SkImage
(
int
width
int
height
uint32_t
uniqueID
)
;
private
:
static
sk_sp
<
SkImage
>
MakeTextureFromMipMap
(
GrContext
*
const
SkImageInfo
&
const
GrMipLevel
*
texels
int
mipLevelCount
SkBudgeted
SkDestinationSurfaceColorMode
)
;
const
int
fWidth
;
const
int
fHeight
;
const
uint32_t
fUniqueID
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
