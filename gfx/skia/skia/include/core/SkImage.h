#
ifndef
SkImage_DEFINED
#
define
SkImage_DEFINED
#
include
"
GrTypes
.
h
"
#
include
"
SkFilterQuality
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkImageEncoder
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkScalar
.
h
"
#
include
"
SkShader
.
h
"
#
if
defined
(
SK_BUILD_FOR_ANDROID
)
&
&
__ANDROID_API__
>
=
26
#
include
<
android
/
hardware_buffer
.
h
>
#
endif
class
SkData
;
class
SkCanvas
;
class
SkImageFilter
;
class
SkImageGenerator
;
class
SkPaint
;
class
SkPicture
;
class
SkString
;
class
SkSurface
;
class
GrBackendTexture
;
class
GrContext
;
class
GrContextThreadSafeProxy
;
class
GrTexture
;
struct
SkYUVAIndex
;
class
SK_API
SkImage
:
public
SkRefCnt
{
public
:
typedef
void
*
ReleaseContext
;
static
sk_sp
<
SkImage
>
MakeRasterCopy
(
const
SkPixmap
&
pixmap
)
;
static
sk_sp
<
SkImage
>
MakeRasterData
(
const
SkImageInfo
&
info
sk_sp
<
SkData
>
pixels
size_t
rowBytes
)
;
typedef
void
(
*
RasterReleaseProc
)
(
const
void
*
pixels
ReleaseContext
)
;
static
sk_sp
<
SkImage
>
MakeFromRaster
(
const
SkPixmap
&
pixmap
RasterReleaseProc
rasterReleaseProc
ReleaseContext
releaseContext
)
;
static
sk_sp
<
SkImage
>
MakeFromBitmap
(
const
SkBitmap
&
bitmap
)
;
static
sk_sp
<
SkImage
>
MakeFromGenerator
(
std
:
:
unique_ptr
<
SkImageGenerator
>
imageGenerator
const
SkIRect
*
subset
=
nullptr
)
;
static
sk_sp
<
SkImage
>
MakeFromEncoded
(
sk_sp
<
SkData
>
encoded
const
SkIRect
*
subset
=
nullptr
)
;
typedef
void
(
*
TextureReleaseProc
)
(
ReleaseContext
releaseContext
)
;
static
sk_sp
<
SkImage
>
MakeFromTexture
(
GrContext
*
context
const
GrBackendTexture
&
backendTexture
GrSurfaceOrigin
origin
SkColorType
colorType
SkAlphaType
alphaType
sk_sp
<
SkColorSpace
>
colorSpace
)
{
return
MakeFromTexture
(
context
backendTexture
origin
colorType
alphaType
colorSpace
nullptr
nullptr
)
;
}
static
sk_sp
<
SkImage
>
MakeFromTexture
(
GrContext
*
context
const
GrBackendTexture
&
backendTexture
GrSurfaceOrigin
origin
SkColorType
colorType
SkAlphaType
alphaType
sk_sp
<
SkColorSpace
>
colorSpace
TextureReleaseProc
textureReleaseProc
ReleaseContext
releaseContext
)
;
static
sk_sp
<
SkImage
>
MakeCrossContextFromEncoded
(
GrContext
*
context
sk_sp
<
SkData
>
data
bool
buildMips
SkColorSpace
*
dstColorSpace
bool
limitToMaxTextureSize
=
false
)
;
static
sk_sp
<
SkImage
>
MakeCrossContextFromPixmap
(
GrContext
*
context
const
SkPixmap
&
pixmap
bool
buildMips
SkColorSpace
*
dstColorSpace
bool
limitToMaxTextureSize
=
false
)
;
static
sk_sp
<
SkImage
>
MakeFromAdoptedTexture
(
GrContext
*
context
const
GrBackendTexture
&
backendTexture
GrSurfaceOrigin
surfaceOrigin
SkColorType
colorType
SkAlphaType
alphaType
=
kPremul_SkAlphaType
sk_sp
<
SkColorSpace
>
colorSpace
=
nullptr
)
;
static
sk_sp
<
SkImage
>
MakeFromYUVATexturesCopy
(
GrContext
*
context
SkYUVColorSpace
yuvColorSpace
const
GrBackendTexture
yuvaTextures
[
]
const
SkYUVAIndex
yuvaIndices
[
4
]
SkISize
imageSize
GrSurfaceOrigin
imageOrigin
sk_sp
<
SkColorSpace
>
imageColorSpace
=
nullptr
)
;
static
sk_sp
<
SkImage
>
MakeFromYUVATexturesCopyWithExternalBackend
(
GrContext
*
context
SkYUVColorSpace
yuvColorSpace
const
GrBackendTexture
yuvaTextures
[
]
const
SkYUVAIndex
yuvaIndices
[
4
]
SkISize
imageSize
GrSurfaceOrigin
imageOrigin
const
GrBackendTexture
&
backendTexture
sk_sp
<
SkColorSpace
>
imageColorSpace
=
nullptr
)
;
static
sk_sp
<
SkImage
>
MakeFromYUVTexturesCopy
(
GrContext
*
context
SkYUVColorSpace
yuvColorSpace
const
GrBackendTexture
yuvTextures
[
3
]
GrSurfaceOrigin
imageOrigin
sk_sp
<
SkColorSpace
>
imageColorSpace
=
nullptr
)
;
static
sk_sp
<
SkImage
>
MakeFromYUVTexturesCopyWithExternalBackend
(
GrContext
*
context
SkYUVColorSpace
yuvColorSpace
const
GrBackendTexture
yuvTextures
[
3
]
GrSurfaceOrigin
imageOrigin
const
GrBackendTexture
&
backendTexture
sk_sp
<
SkColorSpace
>
imageColorSpace
=
nullptr
)
;
static
sk_sp
<
SkImage
>
MakeFromNV12TexturesCopy
(
GrContext
*
context
SkYUVColorSpace
yuvColorSpace
const
GrBackendTexture
nv12Textures
[
2
]
GrSurfaceOrigin
imageOrigin
sk_sp
<
SkColorSpace
>
imageColorSpace
=
nullptr
)
;
static
sk_sp
<
SkImage
>
MakeFromNV12TexturesCopyWithExternalBackend
(
GrContext
*
context
SkYUVColorSpace
yuvColorSpace
const
GrBackendTexture
nv12Textures
[
2
]
GrSurfaceOrigin
imageOrigin
const
GrBackendTexture
&
backendTexture
sk_sp
<
SkColorSpace
>
imageColorSpace
=
nullptr
)
;
enum
class
BitDepth
{
kU8
kF16
}
;
static
sk_sp
<
SkImage
>
MakeFromPicture
(
sk_sp
<
SkPicture
>
picture
const
SkISize
&
dimensions
const
SkMatrix
*
matrix
const
SkPaint
*
paint
BitDepth
bitDepth
sk_sp
<
SkColorSpace
>
colorSpace
)
;
#
if
defined
(
SK_BUILD_FOR_ANDROID
)
&
&
__ANDROID_API__
>
=
26
static
sk_sp
<
SkImage
>
MakeFromAHardwareBuffer
(
AHardwareBuffer
*
hardwareBuffer
SkAlphaType
alphaType
=
kPremul_SkAlphaType
sk_sp
<
SkColorSpace
>
colorSpace
=
nullptr
GrSurfaceOrigin
surfaceOrigin
=
kTopLeft_GrSurfaceOrigin
)
;
#
endif
int
width
(
)
const
{
return
fWidth
;
}
int
height
(
)
const
{
return
fHeight
;
}
SkISize
dimensions
(
)
const
{
return
SkISize
:
:
Make
(
fWidth
fHeight
)
;
}
SkIRect
bounds
(
)
const
{
return
SkIRect
:
:
MakeWH
(
fWidth
fHeight
)
;
}
uint32_t
uniqueID
(
)
const
{
return
fUniqueID
;
}
SkAlphaType
alphaType
(
)
const
;
SkColorType
colorType
(
)
const
;
SkColorSpace
*
colorSpace
(
)
const
;
sk_sp
<
SkColorSpace
>
refColorSpace
(
)
const
;
bool
isAlphaOnly
(
)
const
;
bool
isOpaque
(
)
const
{
return
SkAlphaTypeIsOpaque
(
this
-
>
alphaType
(
)
)
;
}
sk_sp
<
SkShader
>
makeShader
(
SkShader
:
:
TileMode
tileMode1
SkShader
:
:
TileMode
tileMode2
const
SkMatrix
*
localMatrix
=
nullptr
)
const
;
sk_sp
<
SkShader
>
makeShader
(
const
SkMatrix
*
localMatrix
=
nullptr
)
const
{
return
this
-
>
makeShader
(
SkShader
:
:
kClamp_TileMode
SkShader
:
:
kClamp_TileMode
localMatrix
)
;
}
bool
peekPixels
(
SkPixmap
*
pixmap
)
const
;
GrTexture
*
getTexture
(
)
const
;
bool
isTextureBacked
(
)
const
;
bool
isValid
(
GrContext
*
context
)
const
;
GrBackendTexture
getBackendTexture
(
bool
flushPendingGrContextIO
GrSurfaceOrigin
*
origin
=
nullptr
)
const
;
enum
CachingHint
{
kAllow_CachingHint
kDisallow_CachingHint
}
;
bool
readPixels
(
const
SkImageInfo
&
dstInfo
void
*
dstPixels
size_t
dstRowBytes
int
srcX
int
srcY
CachingHint
cachingHint
=
kAllow_CachingHint
)
const
;
bool
readPixels
(
const
SkPixmap
&
dst
int
srcX
int
srcY
CachingHint
cachingHint
=
kAllow_CachingHint
)
const
;
bool
scalePixels
(
const
SkPixmap
&
dst
SkFilterQuality
filterQuality
CachingHint
cachingHint
=
kAllow_CachingHint
)
const
;
sk_sp
<
SkData
>
encodeToData
(
SkEncodedImageFormat
encodedImageFormat
int
quality
)
const
;
sk_sp
<
SkData
>
encodeToData
(
)
const
;
sk_sp
<
SkData
>
refEncodedData
(
)
const
;
sk_sp
<
SkImage
>
makeSubset
(
const
SkIRect
&
subset
)
const
;
sk_sp
<
SkImage
>
makeTextureImage
(
GrContext
*
context
SkColorSpace
*
dstColorSpace
GrMipMapped
mipMapped
=
GrMipMapped
:
:
kNo
)
const
;
sk_sp
<
SkImage
>
makeNonTextureImage
(
)
const
;
sk_sp
<
SkImage
>
makeRasterImage
(
)
const
;
sk_sp
<
SkImage
>
makeWithFilter
(
const
SkImageFilter
*
filter
const
SkIRect
&
subset
const
SkIRect
&
clipBounds
SkIRect
*
outSubset
SkIPoint
*
offset
)
const
;
typedef
std
:
:
function
<
void
(
GrBackendTexture
)
>
BackendTextureReleaseProc
;
static
bool
MakeBackendTextureFromSkImage
(
GrContext
*
context
sk_sp
<
SkImage
>
image
GrBackendTexture
*
backendTexture
BackendTextureReleaseProc
*
backendTextureReleaseProc
)
;
enum
LegacyBitmapMode
{
kRO_LegacyBitmapMode
}
;
bool
asLegacyBitmap
(
SkBitmap
*
bitmap
LegacyBitmapMode
legacyBitmapMode
=
kRO_LegacyBitmapMode
)
const
;
bool
isLazyGenerated
(
)
const
;
sk_sp
<
SkImage
>
makeColorSpace
(
sk_sp
<
SkColorSpace
>
target
)
const
;
private
:
SkImage
(
int
width
int
height
uint32_t
uniqueID
)
;
friend
class
SkImage_Base
;
const
int
fWidth
;
const
int
fHeight
;
const
uint32_t
fUniqueID
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
