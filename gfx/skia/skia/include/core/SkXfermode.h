#
ifndef
SkXfermode_DEFINED
#
define
SkXfermode_DEFINED
#
include
"
SkBlendMode
.
h
"
#
include
"
SkColor
.
h
"
#
include
"
SkFlattenable
.
h
"
class
GrFragmentProcessor
;
class
GrTexture
;
class
GrXPFactory
;
class
SkRasterPipeline
;
class
SkString
;
struct
SkArithmeticParams
;
struct
SkPM4f
;
typedef
SkPM4f
(
*
SkXfermodeProc4f
)
(
const
SkPM4f
&
src
const
SkPM4f
&
dst
)
;
class
SK_API
SkXfermode
:
public
SkFlattenable
{
public
:
virtual
void
xfer32
(
SkPMColor
dst
[
]
const
SkPMColor
src
[
]
int
count
const
SkAlpha
aa
[
]
)
const
;
virtual
void
xfer16
(
uint16_t
dst
[
]
const
SkPMColor
src
[
]
int
count
const
SkAlpha
aa
[
]
)
const
;
virtual
void
xferA8
(
SkAlpha
dst
[
]
const
SkPMColor
src
[
]
int
count
const
SkAlpha
aa
[
]
)
const
;
enum
Coeff
{
kZero_Coeff
kOne_Coeff
kSC_Coeff
kISC_Coeff
kDC_Coeff
kIDC_Coeff
kSA_Coeff
kISA_Coeff
kDA_Coeff
kIDA_Coeff
kCoeffCount
}
;
enum
Mode
{
kClear_Mode
kSrc_Mode
kDst_Mode
kSrcOver_Mode
kDstOver_Mode
kSrcIn_Mode
kDstIn_Mode
kSrcOut_Mode
kDstOut_Mode
kSrcATop_Mode
kDstATop_Mode
kXor_Mode
kPlus_Mode
kModulate_Mode
kScreen_Mode
kLastCoeffMode
=
kScreen_Mode
kOverlay_Mode
kDarken_Mode
kLighten_Mode
kColorDodge_Mode
kColorBurn_Mode
kHardLight_Mode
kSoftLight_Mode
kDifference_Mode
kExclusion_Mode
kMultiply_Mode
kLastSeparableMode
=
kMultiply_Mode
kHue_Mode
kSaturation_Mode
kColor_Mode
kLuminosity_Mode
kLastMode
=
kLuminosity_Mode
}
;
static
const
char
*
ModeName
(
Mode
)
;
static
const
char
*
ModeName
(
SkBlendMode
mode
)
{
return
ModeName
(
Mode
(
mode
)
)
;
}
virtual
bool
asMode
(
Mode
*
mode
)
const
;
static
bool
AsMode
(
const
SkXfermode
*
Mode
*
mode
)
;
static
bool
AsMode
(
const
sk_sp
<
SkXfermode
>
&
xfer
Mode
*
mode
)
{
return
AsMode
(
xfer
.
get
(
)
mode
)
;
}
static
bool
IsMode
(
const
SkXfermode
*
xfer
Mode
mode
)
;
static
bool
IsMode
(
const
sk_sp
<
SkXfermode
>
&
xfer
Mode
mode
)
{
return
IsMode
(
xfer
.
get
(
)
mode
)
;
}
static
sk_sp
<
SkXfermode
>
Make
(
Mode
)
;
#
ifdef
SK_SUPPORT_LEGACY_XFERMODE_PTR
static
SkXfermode
*
Create
(
Mode
mode
)
{
return
Make
(
mode
)
.
release
(
)
;
}
SK_ATTR_DEPRECATED
(
"
use
AsMode
(
.
.
.
)
"
)
static
bool
IsMode
(
const
SkXfermode
*
xfer
Mode
*
mode
)
{
return
AsMode
(
xfer
mode
)
;
}
#
endif
static
SkXfermode
*
Peek
(
SkBlendMode
mode
)
{
sk_sp
<
SkXfermode
>
xfer
=
Make
(
mode
)
;
if
(
!
xfer
)
{
SkASSERT
(
SkBlendMode
:
:
kSrcOver
=
=
mode
)
;
return
nullptr
;
}
SkASSERT
(
!
xfer
-
>
unique
(
)
)
;
return
xfer
.
get
(
)
;
}
static
sk_sp
<
SkXfermode
>
Make
(
SkBlendMode
bm
)
{
return
Make
(
(
Mode
)
bm
)
;
}
SkBlendMode
blend
(
)
const
{
Mode
mode
;
SkAssertResult
(
this
-
>
asMode
(
&
mode
)
)
;
return
(
SkBlendMode
)
mode
;
}
static
SkXfermodeProc
GetProc
(
Mode
mode
)
;
static
SkXfermodeProc4f
GetProc4f
(
Mode
)
;
virtual
SkXfermodeProc4f
getProc4f
(
)
const
;
bool
appendStages
(
SkRasterPipeline
*
)
const
;
static
bool
ModeAsCoeff
(
Mode
mode
Coeff
*
src
Coeff
*
dst
)
;
virtual
bool
supportsCoverageAsAlpha
(
)
const
;
static
bool
SupportsCoverageAsAlpha
(
const
SkXfermode
*
xfer
)
;
static
bool
SupportsCoverageAsAlpha
(
const
sk_sp
<
SkXfermode
>
&
xfer
)
{
return
SupportsCoverageAsAlpha
(
xfer
.
get
(
)
)
;
}
enum
SrcColorOpacity
{
kOpaque_SrcColorOpacity
=
0
kTransparentBlack_SrcColorOpacity
=
1
kTransparentAlpha_SrcColorOpacity
=
2
kUnknown_SrcColorOpacity
=
3
}
;
virtual
bool
isOpaque
(
SrcColorOpacity
opacityType
)
const
;
static
bool
IsOpaque
(
const
SkXfermode
*
xfer
SrcColorOpacity
opacityType
)
;
static
bool
IsOpaque
(
const
sk_sp
<
SkXfermode
>
&
xfer
SrcColorOpacity
opacityType
)
{
return
IsOpaque
(
xfer
.
get
(
)
opacityType
)
;
}
static
bool
IsOpaque
(
SkBlendMode
SrcColorOpacity
)
;
#
if
SK_SUPPORT_GPU
virtual
sk_sp
<
GrFragmentProcessor
>
makeFragmentProcessorForImageFilter
(
sk_sp
<
GrFragmentProcessor
>
dst
)
const
;
virtual
sk_sp
<
GrXPFactory
>
asXPFactory
(
)
const
;
#
endif
SK_TO_STRING_PUREVIRT
(
)
SK_DECLARE_FLATTENABLE_REGISTRAR_GROUP
(
)
SK_DEFINE_FLATTENABLE_TYPE
(
SkXfermode
)
enum
D32Flags
{
kSrcIsOpaque_D32Flag
=
1
<
<
0
kSrcIsSingle_D32Flag
=
1
<
<
1
kDstIsSRGB_D32Flag
=
1
<
<
2
}
;
typedef
void
(
*
D32Proc
)
(
const
SkXfermode
*
uint32_t
dst
[
]
const
SkPM4f
src
[
]
int
count
const
SkAlpha
coverage
[
]
)
;
static
D32Proc
GetD32Proc
(
SkXfermode
*
uint32_t
flags
)
;
static
D32Proc
GetD32Proc
(
const
sk_sp
<
SkXfermode
>
&
xfer
uint32_t
flags
)
{
return
GetD32Proc
(
xfer
.
get
(
)
flags
)
;
}
enum
F16Flags
{
kSrcIsOpaque_F16Flag
=
1
<
<
0
kSrcIsSingle_F16Flag
=
1
<
<
1
}
;
typedef
void
(
*
F16Proc
)
(
const
SkXfermode
*
uint64_t
dst
[
]
const
SkPM4f
src
[
]
int
count
const
SkAlpha
coverage
[
]
)
;
static
F16Proc
GetF16Proc
(
SkXfermode
*
uint32_t
flags
)
;
static
F16Proc
GetF16Proc
(
const
sk_sp
<
SkXfermode
>
&
xfer
uint32_t
flags
)
{
return
GetF16Proc
(
xfer
.
get
(
)
flags
)
;
}
enum
LCDFlags
{
kSrcIsOpaque_LCDFlag
=
1
<
<
0
kSrcIsSingle_LCDFlag
=
1
<
<
1
kDstIsSRGB_LCDFlag
=
1
<
<
2
}
;
typedef
void
(
*
LCD32Proc
)
(
uint32_t
*
dst
const
SkPM4f
*
src
int
count
const
uint16_t
lcd
[
]
)
;
typedef
void
(
*
LCDF16Proc
)
(
uint64_t
*
dst
const
SkPM4f
*
src
int
count
const
uint16_t
lcd
[
]
)
;
static
LCD32Proc
GetLCD32Proc
(
uint32_t
flags
)
;
static
LCDF16Proc
GetLCDF16Proc
(
uint32_t
)
{
return
nullptr
;
}
virtual
bool
isArithmetic
(
SkArithmeticParams
*
)
const
{
return
false
;
}
protected
:
SkXfermode
(
)
{
}
virtual
SkPMColor
xferColor
(
SkPMColor
src
SkPMColor
dst
)
const
;
virtual
D32Proc
onGetD32Proc
(
uint32_t
flags
)
const
;
virtual
F16Proc
onGetF16Proc
(
uint32_t
flags
)
const
;
virtual
bool
onAppendStages
(
SkRasterPipeline
*
)
const
;
private
:
enum
{
kModeCount
=
kLastMode
+
1
}
;
typedef
SkFlattenable
INHERITED
;
}
;
#
endif
