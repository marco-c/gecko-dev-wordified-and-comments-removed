#
ifndef
SkImageGenerator_DEFINED
#
define
SkImageGenerator_DEFINED
#
include
"
SkBitmap
.
h
"
#
include
"
SkColor
.
h
"
#
include
"
SkImage
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkYUVSizeInfo
.
h
"
class
GrContext
;
class
GrContextThreadSafeProxy
;
class
GrTextureProxy
;
class
GrSamplerState
;
class
SkBitmap
;
class
SkData
;
class
SkMatrix
;
class
SkPaint
;
class
SkPicture
;
class
SK_API
SkImageGenerator
:
public
SkNoncopyable
{
public
:
virtual
~
SkImageGenerator
(
)
{
}
uint32_t
uniqueID
(
)
const
{
return
fUniqueID
;
}
SkData
*
refEncodedData
(
)
{
return
this
-
>
onRefEncodedData
(
)
;
}
const
SkImageInfo
&
getInfo
(
)
const
{
return
fInfo
;
}
bool
isValid
(
GrContext
*
context
)
const
{
return
this
-
>
onIsValid
(
context
)
;
}
struct
Options
{
Options
(
)
:
fBehavior
(
SkTransferFunctionBehavior
:
:
kIgnore
)
{
}
SkTransferFunctionBehavior
fBehavior
;
}
;
bool
getPixels
(
const
SkImageInfo
&
info
void
*
pixels
size_t
rowBytes
const
Options
*
options
)
;
bool
getPixels
(
const
SkImageInfo
&
info
void
*
pixels
size_t
rowBytes
)
;
bool
queryYUV8
(
SkYUVSizeInfo
*
sizeInfo
SkYUVColorSpace
*
colorSpace
)
const
;
bool
getYUV8Planes
(
const
SkYUVSizeInfo
&
sizeInfo
void
*
planes
[
3
]
)
;
#
if
SK_SUPPORT_GPU
sk_sp
<
GrTextureProxy
>
generateTexture
(
GrContext
*
const
SkImageInfo
&
info
const
SkIPoint
&
origin
SkTransferFunctionBehavior
behavior
bool
willNeedMipMaps
)
;
#
endif
static
std
:
:
unique_ptr
<
SkImageGenerator
>
MakeFromEncoded
(
sk_sp
<
SkData
>
)
;
static
std
:
:
unique_ptr
<
SkImageGenerator
>
MakeFromPicture
(
const
SkISize
&
sk_sp
<
SkPicture
>
const
SkMatrix
*
const
SkPaint
*
SkImage
:
:
BitDepth
sk_sp
<
SkColorSpace
>
)
;
protected
:
enum
{
kNeedNewImageUniqueID
=
0
}
;
SkImageGenerator
(
const
SkImageInfo
&
info
uint32_t
uniqueId
=
kNeedNewImageUniqueID
)
;
virtual
SkData
*
onRefEncodedData
(
)
{
return
nullptr
;
}
virtual
bool
onGetPixels
(
const
SkImageInfo
&
void
*
size_t
const
Options
&
)
{
return
false
;
}
virtual
bool
onIsValid
(
GrContext
*
)
const
{
return
true
;
}
virtual
bool
onQueryYUV8
(
SkYUVSizeInfo
*
SkYUVColorSpace
*
)
const
{
return
false
;
}
virtual
bool
onGetYUV8Planes
(
const
SkYUVSizeInfo
&
void
*
[
3
]
)
{
return
false
;
}
#
if
SK_SUPPORT_GPU
enum
class
TexGenType
{
kNone
kCheap
kExpensive
}
;
virtual
TexGenType
onCanGenerateTexture
(
)
const
{
return
TexGenType
:
:
kNone
;
}
virtual
sk_sp
<
GrTextureProxy
>
onGenerateTexture
(
GrContext
*
const
SkImageInfo
&
const
SkIPoint
&
SkTransferFunctionBehavior
bool
willNeedMipMaps
)
;
#
endif
private
:
const
SkImageInfo
fInfo
;
const
uint32_t
fUniqueID
;
friend
class
SkImage_Lazy
;
static
std
:
:
unique_ptr
<
SkImageGenerator
>
MakeFromEncodedImpl
(
sk_sp
<
SkData
>
)
;
}
;
#
endif
