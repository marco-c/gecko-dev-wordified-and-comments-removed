#
ifndef
SkImageGenerator_DEFINED
#
define
SkImageGenerator_DEFINED
#
include
"
include
/
core
/
SkBitmap
.
h
"
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkImage
.
h
"
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
core
/
SkYUVAIndex
.
h
"
#
include
"
include
/
core
/
SkYUVASizeInfo
.
h
"
class
GrRecordingContext
;
class
GrTextureProxy
;
class
GrSamplerState
;
class
SkBitmap
;
class
SkData
;
class
SkMatrix
;
class
SkPaint
;
class
SkPicture
;
class
SK_API
SkImageGenerator
{
public
:
virtual
~
SkImageGenerator
(
)
{
}
uint32_t
uniqueID
(
)
const
{
return
fUniqueID
;
}
sk_sp
<
SkData
>
refEncodedData
(
)
{
return
this
-
>
onRefEncodedData
(
)
;
}
const
SkImageInfo
&
getInfo
(
)
const
{
return
fInfo
;
}
bool
isValid
(
GrContext
*
context
)
const
{
return
this
-
>
onIsValid
(
context
)
;
}
bool
getPixels
(
const
SkImageInfo
&
info
void
*
pixels
size_t
rowBytes
)
;
bool
queryYUVA8
(
SkYUVASizeInfo
*
sizeInfo
SkYUVAIndex
yuvaIndices
[
SkYUVAIndex
:
:
kIndexCount
]
SkYUVColorSpace
*
colorSpace
)
const
;
bool
getYUVA8Planes
(
const
SkYUVASizeInfo
&
sizeInfo
const
SkYUVAIndex
yuvaIndices
[
SkYUVAIndex
:
:
kIndexCount
]
void
*
planes
[
]
)
;
#
if
SK_SUPPORT_GPU
sk_sp
<
GrTextureProxy
>
generateTexture
(
GrRecordingContext
*
const
SkImageInfo
&
info
const
SkIPoint
&
origin
bool
willNeedMipMaps
)
;
#
endif
static
std
:
:
unique_ptr
<
SkImageGenerator
>
MakeFromEncoded
(
sk_sp
<
SkData
>
)
;
static
std
:
:
unique_ptr
<
SkImageGenerator
>
MakeFromPicture
(
const
SkISize
&
sk_sp
<
SkPicture
>
const
SkMatrix
*
const
SkPaint
*
SkImage
:
:
BitDepth
sk_sp
<
SkColorSpace
>
)
;
protected
:
static
constexpr
int
kNeedNewImageUniqueID
=
0
;
SkImageGenerator
(
const
SkImageInfo
&
info
uint32_t
uniqueId
=
kNeedNewImageUniqueID
)
;
virtual
sk_sp
<
SkData
>
onRefEncodedData
(
)
{
return
nullptr
;
}
struct
Options
{
}
;
virtual
bool
onGetPixels
(
const
SkImageInfo
&
void
*
size_t
const
Options
&
)
{
return
false
;
}
virtual
bool
onIsValid
(
GrContext
*
)
const
{
return
true
;
}
virtual
bool
onQueryYUVA8
(
SkYUVASizeInfo
*
SkYUVAIndex
[
SkYUVAIndex
:
:
kIndexCount
]
SkYUVColorSpace
*
)
const
{
return
false
;
}
virtual
bool
onGetYUVA8Planes
(
const
SkYUVASizeInfo
&
const
SkYUVAIndex
[
SkYUVAIndex
:
:
kIndexCount
]
void
*
[
4
]
)
{
return
false
;
}
#
if
SK_SUPPORT_GPU
enum
class
TexGenType
{
kNone
kCheap
kExpensive
}
;
virtual
TexGenType
onCanGenerateTexture
(
)
const
{
return
TexGenType
:
:
kNone
;
}
virtual
sk_sp
<
GrTextureProxy
>
onGenerateTexture
(
GrRecordingContext
*
const
SkImageInfo
&
const
SkIPoint
&
bool
willNeedMipMaps
)
;
#
endif
private
:
const
SkImageInfo
fInfo
;
const
uint32_t
fUniqueID
;
friend
class
SkImage_Lazy
;
static
std
:
:
unique_ptr
<
SkImageGenerator
>
MakeFromEncodedImpl
(
sk_sp
<
SkData
>
)
;
SkImageGenerator
(
SkImageGenerator
&
&
)
=
delete
;
SkImageGenerator
(
const
SkImageGenerator
&
)
=
delete
;
SkImageGenerator
&
operator
=
(
SkImageGenerator
&
&
)
=
delete
;
SkImageGenerator
&
operator
=
(
const
SkImageGenerator
&
)
=
delete
;
}
;
#
endif
