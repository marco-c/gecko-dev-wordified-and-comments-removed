#
ifndef
SkOSFile_DEFINED
#
define
SkOSFile_DEFINED
#
include
<
stdio
.
h
>
#
include
"
SkString
.
h
"
enum
SkFILE_Flags
{
kRead_SkFILE_Flag
=
0x01
kWrite_SkFILE_Flag
=
0x02
}
;
#
ifdef
_WIN32
const
static
char
SkPATH_SEPARATOR
=
'
\
\
'
;
#
else
const
static
char
SkPATH_SEPARATOR
=
'
/
'
;
#
endif
FILE
*
sk_fopen
(
const
char
path
[
]
SkFILE_Flags
)
;
void
sk_fclose
(
FILE
*
)
;
size_t
sk_fgetsize
(
FILE
*
)
;
bool
sk_frewind
(
FILE
*
)
;
size_t
sk_fread
(
void
*
buffer
size_t
byteCount
FILE
*
)
;
size_t
sk_fwrite
(
const
void
*
buffer
size_t
byteCount
FILE
*
)
;
char
*
sk_fgets
(
char
*
str
int
size
FILE
*
f
)
;
void
sk_fflush
(
FILE
*
)
;
void
sk_fsync
(
FILE
*
)
;
bool
sk_fseek
(
FILE
*
size_t
)
;
bool
sk_fmove
(
FILE
*
long
)
;
size_t
sk_ftell
(
FILE
*
)
;
void
*
sk_fmmap
(
FILE
*
f
size_t
*
length
)
;
void
*
sk_fdmmap
(
int
fd
size_t
*
length
)
;
void
sk_fmunmap
(
const
void
*
addr
size_t
length
)
;
bool
sk_fidentical
(
FILE
*
a
FILE
*
b
)
;
int
sk_fileno
(
FILE
*
f
)
;
bool
sk_exists
(
const
char
*
path
SkFILE_Flags
=
(
SkFILE_Flags
)
0
)
;
bool
sk_isdir
(
const
char
*
path
)
;
int
sk_feof
(
FILE
*
)
;
bool
sk_mkdir
(
const
char
*
path
)
;
class
SkOSFile
{
public
:
class
Iter
{
public
:
Iter
(
)
;
Iter
(
const
char
path
[
]
const
char
suffix
[
]
=
NULL
)
;
~
Iter
(
)
;
void
reset
(
const
char
path
[
]
const
char
suffix
[
]
=
NULL
)
;
bool
next
(
SkString
*
name
bool
getDir
=
false
)
;
static
const
size_t
kStorageSize
=
40
;
private
:
SkAlignedSStorage
<
kStorageSize
>
fSelf
;
}
;
}
;
class
SkOSPath
{
public
:
static
SkString
Join
(
const
char
*
rootPath
const
char
*
relativePath
)
;
static
SkString
Basename
(
const
char
*
fullPath
)
;
static
SkString
Dirname
(
const
char
*
fullPath
)
;
}
;
#
endif
