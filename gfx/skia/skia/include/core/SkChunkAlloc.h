#
ifndef
SkChunkAlloc_DEFINED
#
define
SkChunkAlloc_DEFINED
#
include
"
SkTypes
.
h
"
class
SkChunkAlloc
:
SkNoncopyable
{
public
:
SkChunkAlloc
(
size_t
minSize
)
;
~
SkChunkAlloc
(
)
;
void
reset
(
)
;
void
rewind
(
)
;
enum
AllocFailType
{
kReturnNil_AllocFailType
kThrow_AllocFailType
}
;
void
*
alloc
(
size_t
bytes
AllocFailType
)
;
void
*
allocThrow
(
size_t
bytes
)
{
return
this
-
>
alloc
(
bytes
kThrow_AllocFailType
)
;
}
size_t
unalloc
(
void
*
ptr
)
;
size_t
totalCapacity
(
)
const
{
return
fTotalCapacity
;
}
size_t
totalUsed
(
)
const
{
return
fTotalUsed
;
}
SkDEBUGCODE
(
int
blockCount
(
)
const
{
return
fBlockCount
;
}
)
SkDEBUGCODE
(
size_t
totalLost
(
)
const
{
return
fTotalLost
;
}
)
bool
contains
(
const
void
*
addr
)
const
;
private
:
struct
Block
;
Block
*
fBlock
;
size_t
fMinSize
;
size_t
fChunkSize
;
size_t
fTotalCapacity
;
size_t
fTotalUsed
;
SkDEBUGCODE
(
int
fBlockCount
;
)
SkDEBUGCODE
(
size_t
fTotalLost
;
)
Block
*
newBlock
(
size_t
bytes
AllocFailType
ftype
)
;
Block
*
addBlockIfNecessary
(
size_t
bytes
AllocFailType
ftype
)
;
SkDEBUGCODE
(
void
validate
(
)
;
)
}
;
#
endif
