#
ifndef
SkBitmap_DEFINED
#
define
SkBitmap_DEFINED
#
include
"
SkColor
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkPixmap
.
h
"
#
include
"
SkPoint
.
h
"
#
include
"
SkRefCnt
.
h
"
struct
SkMask
;
struct
SkIRect
;
struct
SkRect
;
class
SkPaint
;
class
SkPixelRef
;
class
SkString
;
class
SK_API
SkBitmap
{
public
:
class
SK_API
Allocator
;
SkBitmap
(
)
;
SkBitmap
(
const
SkBitmap
&
src
)
;
SkBitmap
(
SkBitmap
&
&
src
)
;
~
SkBitmap
(
)
;
SkBitmap
&
operator
=
(
const
SkBitmap
&
src
)
;
SkBitmap
&
operator
=
(
SkBitmap
&
&
src
)
;
void
swap
(
SkBitmap
&
other
)
;
const
SkPixmap
&
pixmap
(
)
const
{
return
fPixmap
;
}
const
SkImageInfo
&
info
(
)
const
{
return
fPixmap
.
info
(
)
;
}
int
width
(
)
const
{
return
fPixmap
.
width
(
)
;
}
int
height
(
)
const
{
return
fPixmap
.
height
(
)
;
}
SkColorType
colorType
(
)
const
{
return
fPixmap
.
colorType
(
)
;
}
SkAlphaType
alphaType
(
)
const
{
return
fPixmap
.
alphaType
(
)
;
}
SkColorSpace
*
colorSpace
(
)
const
{
return
fPixmap
.
colorSpace
(
)
;
}
sk_sp
<
SkColorSpace
>
refColorSpace
(
)
const
{
return
fPixmap
.
info
(
)
.
refColorSpace
(
)
;
}
int
bytesPerPixel
(
)
const
{
return
fPixmap
.
info
(
)
.
bytesPerPixel
(
)
;
}
int
rowBytesAsPixels
(
)
const
{
return
fPixmap
.
rowBytesAsPixels
(
)
;
}
int
shiftPerPixel
(
)
const
{
return
fPixmap
.
shiftPerPixel
(
)
;
}
bool
empty
(
)
const
{
return
fPixmap
.
info
(
)
.
isEmpty
(
)
;
}
bool
isNull
(
)
const
{
return
nullptr
=
=
fPixelRef
;
}
bool
drawsNothing
(
)
const
{
return
this
-
>
empty
(
)
|
|
this
-
>
isNull
(
)
;
}
size_t
rowBytes
(
)
const
{
return
fPixmap
.
rowBytes
(
)
;
}
bool
setAlphaType
(
SkAlphaType
alphaType
)
;
void
*
getPixels
(
)
const
{
return
fPixmap
.
writable_addr
(
)
;
}
size_t
computeByteSize
(
)
const
{
return
fPixmap
.
computeByteSize
(
)
;
}
bool
isImmutable
(
)
const
;
void
setImmutable
(
)
;
bool
isOpaque
(
)
const
{
return
SkAlphaTypeIsOpaque
(
this
-
>
alphaType
(
)
)
;
}
bool
isVolatile
(
)
const
;
void
setIsVolatile
(
bool
isVolatile
)
;
void
reset
(
)
;
static
bool
ComputeIsOpaque
(
const
SkBitmap
&
bm
)
{
return
bm
.
pixmap
(
)
.
computeIsOpaque
(
)
;
}
void
getBounds
(
SkRect
*
bounds
)
const
;
void
getBounds
(
SkIRect
*
bounds
)
const
;
SkIRect
bounds
(
)
const
{
return
fPixmap
.
info
(
)
.
bounds
(
)
;
}
SkISize
dimensions
(
)
const
{
return
fPixmap
.
info
(
)
.
dimensions
(
)
;
}
SkIRect
getSubset
(
)
const
{
SkIPoint
origin
=
this
-
>
pixelRefOrigin
(
)
;
return
SkIRect
:
:
MakeXYWH
(
origin
.
x
(
)
origin
.
y
(
)
this
-
>
width
(
)
this
-
>
height
(
)
)
;
}
bool
setInfo
(
const
SkImageInfo
&
imageInfo
size_t
rowBytes
=
0
)
;
enum
AllocFlags
{
kZeroPixels_AllocFlag
=
1
<
<
0
}
;
bool
SK_WARN_UNUSED_RESULT
tryAllocPixelsFlags
(
const
SkImageInfo
&
info
uint32_t
flags
)
;
void
allocPixelsFlags
(
const
SkImageInfo
&
info
uint32_t
flags
)
{
SkASSERT_RELEASE
(
this
-
>
tryAllocPixelsFlags
(
info
flags
)
)
;
}
bool
SK_WARN_UNUSED_RESULT
tryAllocPixels
(
const
SkImageInfo
&
info
size_t
rowBytes
)
;
void
allocPixels
(
const
SkImageInfo
&
info
size_t
rowBytes
)
{
SkASSERT_RELEASE
(
this
-
>
tryAllocPixels
(
info
rowBytes
)
)
;
}
bool
SK_WARN_UNUSED_RESULT
tryAllocPixels
(
const
SkImageInfo
&
info
)
{
return
this
-
>
tryAllocPixels
(
info
info
.
minRowBytes
(
)
)
;
}
void
allocPixels
(
const
SkImageInfo
&
info
)
{
this
-
>
allocPixels
(
info
info
.
minRowBytes
(
)
)
;
}
bool
SK_WARN_UNUSED_RESULT
tryAllocN32Pixels
(
int
width
int
height
bool
isOpaque
=
false
)
{
SkImageInfo
info
=
SkImageInfo
:
:
MakeN32
(
width
height
isOpaque
?
kOpaque_SkAlphaType
:
kPremul_SkAlphaType
)
;
return
this
-
>
tryAllocPixels
(
info
)
;
}
void
allocN32Pixels
(
int
width
int
height
bool
isOpaque
=
false
)
{
SkImageInfo
info
=
SkImageInfo
:
:
MakeN32
(
width
height
isOpaque
?
kOpaque_SkAlphaType
:
kPremul_SkAlphaType
)
;
this
-
>
allocPixels
(
info
)
;
}
bool
installPixels
(
const
SkImageInfo
&
info
void
*
pixels
size_t
rowBytes
void
(
*
releaseProc
)
(
void
*
addr
void
*
context
)
void
*
context
)
;
bool
installPixels
(
const
SkImageInfo
&
info
void
*
pixels
size_t
rowBytes
)
{
return
this
-
>
installPixels
(
info
pixels
rowBytes
nullptr
nullptr
)
;
}
bool
installPixels
(
const
SkPixmap
&
pixmap
)
;
bool
installMaskPixels
(
const
SkMask
&
mask
)
;
void
setPixels
(
void
*
pixels
)
;
bool
SK_WARN_UNUSED_RESULT
tryAllocPixels
(
)
{
return
this
-
>
tryAllocPixels
(
(
Allocator
*
)
nullptr
)
;
}
void
allocPixels
(
)
{
this
-
>
allocPixels
(
(
Allocator
*
)
nullptr
)
;
}
bool
SK_WARN_UNUSED_RESULT
tryAllocPixels
(
Allocator
*
allocator
)
;
void
allocPixels
(
Allocator
*
allocator
)
{
SkASSERT_RELEASE
(
this
-
>
tryAllocPixels
(
allocator
)
)
;
}
SkPixelRef
*
pixelRef
(
)
const
{
return
fPixelRef
.
get
(
)
;
}
SkIPoint
pixelRefOrigin
(
)
const
;
void
setPixelRef
(
sk_sp
<
SkPixelRef
>
pixelRef
int
dx
int
dy
)
;
bool
readyToDraw
(
)
const
{
return
this
-
>
getPixels
(
)
!
=
nullptr
;
}
uint32_t
getGenerationID
(
)
const
;
void
notifyPixelsChanged
(
)
const
;
void
eraseColor
(
SkColor
c
)
const
;
void
eraseARGB
(
U8CPU
a
U8CPU
r
U8CPU
g
U8CPU
b
)
const
{
this
-
>
eraseColor
(
SkColorSetARGB
(
a
r
g
b
)
)
;
}
SK_ATTR_DEPRECATED
(
"
use
eraseARGB
or
eraseColor
"
)
void
eraseRGB
(
U8CPU
r
U8CPU
g
U8CPU
b
)
const
{
this
-
>
eraseARGB
(
0xFF
r
g
b
)
;
}
void
erase
(
SkColor
c
const
SkIRect
&
area
)
const
;
void
eraseArea
(
const
SkIRect
&
area
SkColor
c
)
const
{
this
-
>
erase
(
c
area
)
;
}
SkColor
getColor
(
int
x
int
y
)
const
{
return
this
-
>
pixmap
(
)
.
getColor
(
x
y
)
;
}
void
*
getAddr
(
int
x
int
y
)
const
;
inline
uint32_t
*
getAddr32
(
int
x
int
y
)
const
;
inline
uint16_t
*
getAddr16
(
int
x
int
y
)
const
;
inline
uint8_t
*
getAddr8
(
int
x
int
y
)
const
;
bool
extractSubset
(
SkBitmap
*
dst
const
SkIRect
&
subset
)
const
;
bool
readPixels
(
const
SkImageInfo
&
dstInfo
void
*
dstPixels
size_t
dstRowBytes
int
srcX
int
srcY
SkTransferFunctionBehavior
behavior
)
const
;
bool
readPixels
(
const
SkImageInfo
&
dstInfo
void
*
dstPixels
size_t
dstRowBytes
int
srcX
int
srcY
)
const
{
return
this
-
>
readPixels
(
dstInfo
dstPixels
dstRowBytes
srcX
srcY
SkTransferFunctionBehavior
:
:
kRespect
)
;
}
bool
readPixels
(
const
SkPixmap
&
dst
int
srcX
int
srcY
)
const
;
bool
readPixels
(
const
SkPixmap
&
dst
)
const
{
return
this
-
>
readPixels
(
dst
0
0
)
;
}
bool
writePixels
(
const
SkPixmap
&
src
int
dstX
int
dstY
)
{
return
this
-
>
writePixels
(
src
dstX
dstY
SkTransferFunctionBehavior
:
:
kRespect
)
;
}
bool
writePixels
(
const
SkPixmap
&
src
)
{
return
this
-
>
writePixels
(
src
0
0
)
;
}
bool
writePixels
(
const
SkPixmap
&
src
int
x
int
y
SkTransferFunctionBehavior
behavior
)
;
#
ifdef
SK_BUILD_FOR_ANDROID_FRAMEWORK
bool
hasHardwareMipMap
(
)
const
{
return
(
fFlags
&
kHasHardwareMipMap_Flag
)
!
=
0
;
}
void
setHasHardwareMipMap
(
bool
hasHardwareMipMap
)
{
if
(
hasHardwareMipMap
)
{
fFlags
|
=
kHasHardwareMipMap_Flag
;
}
else
{
fFlags
&
=
~
kHasHardwareMipMap_Flag
;
}
}
#
endif
bool
extractAlpha
(
SkBitmap
*
dst
)
const
{
return
this
-
>
extractAlpha
(
dst
nullptr
nullptr
nullptr
)
;
}
bool
extractAlpha
(
SkBitmap
*
dst
const
SkPaint
*
paint
SkIPoint
*
offset
)
const
{
return
this
-
>
extractAlpha
(
dst
paint
nullptr
offset
)
;
}
bool
extractAlpha
(
SkBitmap
*
dst
const
SkPaint
*
paint
Allocator
*
allocator
SkIPoint
*
offset
)
const
;
bool
peekPixels
(
SkPixmap
*
pixmap
)
const
;
SkDEBUGCODE
(
void
validate
(
)
const
;
)
class
Allocator
:
public
SkRefCnt
{
public
:
virtual
bool
allocPixelRef
(
SkBitmap
*
bitmap
)
=
0
;
private
:
typedef
SkRefCnt
INHERITED
;
}
;
class
HeapAllocator
:
public
Allocator
{
public
:
bool
allocPixelRef
(
SkBitmap
*
bitmap
)
override
;
}
;
SK_TO_STRING_NONVIRT
(
)
private
:
enum
Flags
{
kImageIsVolatile_Flag
=
0x02
#
ifdef
SK_BUILD_FOR_ANDROID
kHasHardwareMipMap_Flag
=
0x08
#
endif
}
;
sk_sp
<
SkPixelRef
>
fPixelRef
;
SkPixmap
fPixmap
;
uint8_t
fFlags
;
friend
class
SkReadBuffer
;
}
;
inline
uint32_t
*
SkBitmap
:
:
getAddr32
(
int
x
int
y
)
const
{
SkASSERT
(
fPixmap
.
addr
(
)
)
;
return
fPixmap
.
writable_addr32
(
x
y
)
;
}
inline
uint16_t
*
SkBitmap
:
:
getAddr16
(
int
x
int
y
)
const
{
SkASSERT
(
fPixmap
.
addr
(
)
)
;
return
fPixmap
.
writable_addr16
(
x
y
)
;
}
inline
uint8_t
*
SkBitmap
:
:
getAddr8
(
int
x
int
y
)
const
{
SkASSERT
(
fPixmap
.
addr
(
)
)
;
return
fPixmap
.
writable_addr8
(
x
y
)
;
}
#
endif
