#
ifndef
SkColor_DEFINED
#
define
SkColor_DEFINED
#
include
"
SkScalar
.
h
"
#
include
"
SkTypes
.
h
"
typedef
uint8_t
SkAlpha
;
typedef
uint32_t
SkColor
;
static
constexpr
inline
SkColor
SkColorSetARGB
(
U8CPU
a
U8CPU
r
U8CPU
g
U8CPU
b
)
{
return
SkASSERT
(
a
<
=
255
&
&
r
<
=
255
&
&
g
<
=
255
&
&
b
<
=
255
)
(
a
<
<
24
)
|
(
r
<
<
16
)
|
(
g
<
<
8
)
|
(
b
<
<
0
)
;
}
#
define
SkColorSetARGBInline
SkColorSetARGB
#
define
SkColorSetARGBMacro
SkColorSetARGB
#
define
SkColorSetRGB
(
r
g
b
)
SkColorSetARGB
(
0xFF
r
g
b
)
#
define
SkColorGetA
(
color
)
(
(
(
color
)
>
>
24
)
&
0xFF
)
#
define
SkColorGetR
(
color
)
(
(
(
color
)
>
>
16
)
&
0xFF
)
#
define
SkColorGetG
(
color
)
(
(
(
color
)
>
>
8
)
&
0xFF
)
#
define
SkColorGetB
(
color
)
(
(
(
color
)
>
>
0
)
&
0xFF
)
static
constexpr
inline
SkColor
SkColorSetA
(
SkColor
c
U8CPU
a
)
{
return
(
c
&
0x00FFFFFF
)
|
(
a
<
<
24
)
;
}
#
define
SK_AlphaTRANSPARENT
static_cast
<
SkAlpha
>
(
0x00
)
#
define
SK_AlphaOPAQUE
static_cast
<
SkAlpha
>
(
0xFF
)
#
define
SK_ColorTRANSPARENT
static_cast
<
SkColor
>
(
0x00000000
)
#
define
SK_ColorBLACK
static_cast
<
SkColor
>
(
0xFF000000
)
#
define
SK_ColorDKGRAY
static_cast
<
SkColor
>
(
0xFF444444
)
#
define
SK_ColorGRAY
static_cast
<
SkColor
>
(
0xFF888888
)
#
define
SK_ColorLTGRAY
static_cast
<
SkColor
>
(
0xFFCCCCCC
)
#
define
SK_ColorWHITE
static_cast
<
SkColor
>
(
0xFFFFFFFF
)
#
define
SK_ColorRED
static_cast
<
SkColor
>
(
0xFFFF0000
)
#
define
SK_ColorGREEN
static_cast
<
SkColor
>
(
0xFF00FF00
)
#
define
SK_ColorBLUE
static_cast
<
SkColor
>
(
0xFF0000FF
)
#
define
SK_ColorYELLOW
static_cast
<
SkColor
>
(
0xFFFFFF00
)
#
define
SK_ColorCYAN
static_cast
<
SkColor
>
(
0xFF00FFFF
)
#
define
SK_ColorMAGENTA
static_cast
<
SkColor
>
(
0xFFFF00FF
)
SK_API
void
SkRGBToHSV
(
U8CPU
red
U8CPU
green
U8CPU
blue
SkScalar
hsv
[
3
]
)
;
static
inline
void
SkColorToHSV
(
SkColor
color
SkScalar
hsv
[
3
]
)
{
SkRGBToHSV
(
SkColorGetR
(
color
)
SkColorGetG
(
color
)
SkColorGetB
(
color
)
hsv
)
;
}
SK_API
SkColor
SkHSVToColor
(
U8CPU
alpha
const
SkScalar
hsv
[
3
]
)
;
static
inline
SkColor
SkHSVToColor
(
const
SkScalar
hsv
[
3
]
)
{
return
SkHSVToColor
(
0xFF
hsv
)
;
}
typedef
uint32_t
SkPMColor
;
SK_API
SkPMColor
SkPreMultiplyARGB
(
U8CPU
a
U8CPU
r
U8CPU
g
U8CPU
b
)
;
SK_API
SkPMColor
SkPreMultiplyColor
(
SkColor
c
)
;
struct
SkPM4f
;
struct
SK_API
SkColor4f
{
float
fR
;
float
fG
;
float
fB
;
float
fA
;
bool
operator
=
=
(
const
SkColor4f
&
other
)
const
{
return
fA
=
=
other
.
fA
&
&
fR
=
=
other
.
fR
&
&
fG
=
=
other
.
fG
&
&
fB
=
=
other
.
fB
;
}
bool
operator
!
=
(
const
SkColor4f
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
const
float
*
vec
(
)
const
{
return
&
fR
;
}
float
*
vec
(
)
{
return
&
fR
;
}
static
SkColor4f
Pin
(
float
r
float
g
float
b
float
a
)
;
static
SkColor4f
FromColor
(
SkColor
)
;
SkColor
toSkColor
(
)
const
;
SkColor4f
pin
(
)
const
{
return
Pin
(
fR
fG
fB
fA
)
;
}
SkPM4f
premul
(
)
const
;
}
;
#
endif
