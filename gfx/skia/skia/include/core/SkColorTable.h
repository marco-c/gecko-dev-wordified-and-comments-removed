#
ifndef
SkColorTable_DEFINED
#
define
SkColorTable_DEFINED
#
include
"
.
.
/
private
/
SkOnce
.
h
"
#
include
"
SkColor
.
h
"
#
include
"
SkFlattenable
.
h
"
#
include
"
SkImageInfo
.
h
"
class
SK_API
SkColorTable
:
public
SkRefCnt
{
public
:
static
sk_sp
<
SkColorTable
>
Make
(
const
SkPMColor
colors
[
]
int
count
)
;
SkColorTable
(
const
SkPMColor
colors
[
]
int
count
)
;
~
SkColorTable
(
)
override
;
int
count
(
)
const
{
return
fCount
;
}
SkPMColor
operator
[
]
(
int
index
)
const
{
SkASSERT
(
fColors
!
=
NULL
&
&
(
unsigned
)
index
<
(
unsigned
)
fCount
)
;
return
fColors
[
index
]
;
}
const
SkPMColor
*
readColors
(
)
const
{
return
fColors
;
}
const
uint16_t
*
read16BitCache
(
)
const
;
void
writeToBuffer
(
SkWriteBuffer
&
)
const
;
static
sk_sp
<
SkColorTable
>
Create
(
SkReadBuffer
&
)
;
private
:
enum
AllocatedWithMalloc
{
kAllocatedWithMalloc
}
;
SkColorTable
(
SkPMColor
*
colors
int
count
AllocatedWithMalloc
)
;
SkPMColor
*
fColors
;
mutable
uint16_t
*
f16BitCache
=
nullptr
;
mutable
SkOnce
f16BitCacheOnce
;
int
fCount
;
void
init
(
const
SkPMColor
*
colors
int
count
)
;
friend
class
SkImageGenerator
;
friend
class
SkBitmapRegionCodec
;
void
dangerous_overwriteColors
(
const
SkPMColor
newColors
[
]
int
count
)
{
if
(
count
<
0
|
|
count
>
fCount
)
{
sk_throw
(
)
;
}
memcpy
(
fColors
newColors
count
*
sizeof
(
SkPMColor
)
)
;
fCount
=
count
;
}
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
