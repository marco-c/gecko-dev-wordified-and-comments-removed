#
ifndef
SkDeferredDisplayList_DEFINED
#
define
SkDeferredDisplayList_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSurfaceCharacterization
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
class
SkDeferredDisplayListPriv
;
#
if
defined
(
SK_GANESH
)
#
include
"
include
/
gpu
/
GrRecordingContext
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
<
map
>
class
GrRenderTask
;
class
GrRenderTargetProxy
;
#
else
using
GrRenderTargetProxy
=
SkRefCnt
;
#
endif
class
SkDeferredDisplayList
:
public
SkNVRefCnt
<
SkDeferredDisplayList
>
{
public
:
SK_API
~
SkDeferredDisplayList
(
)
;
SK_API
const
SkSurfaceCharacterization
&
characterization
(
)
const
{
return
fCharacterization
;
}
#
if
defined
(
SK_GANESH
)
class
SK_API
ProgramIterator
{
public
:
ProgramIterator
(
GrDirectContext
*
SkDeferredDisplayList
*
)
;
~
ProgramIterator
(
)
;
bool
compile
(
)
;
bool
done
(
)
const
;
void
next
(
)
;
private
:
GrDirectContext
*
fDContext
;
const
SkTArray
<
GrRecordingContext
:
:
ProgramData
>
&
fProgramData
;
int
fIndex
;
}
;
#
endif
SkDeferredDisplayListPriv
priv
(
)
;
const
SkDeferredDisplayListPriv
priv
(
)
const
;
private
:
friend
class
GrDrawingManager
;
friend
class
SkDeferredDisplayListRecorder
;
friend
class
SkDeferredDisplayListPriv
;
class
LazyProxyData
:
public
SkRefCnt
{
#
if
defined
(
SK_GANESH
)
public
:
GrRenderTargetProxy
*
fReplayDest
=
nullptr
;
#
endif
}
;
SK_API
SkDeferredDisplayList
(
const
SkSurfaceCharacterization
&
characterization
sk_sp
<
GrRenderTargetProxy
>
fTargetProxy
sk_sp
<
LazyProxyData
>
)
;
#
if
defined
(
SK_GANESH
)
const
SkTArray
<
GrRecordingContext
:
:
ProgramData
>
&
programData
(
)
const
{
return
fProgramData
;
}
#
endif
const
SkSurfaceCharacterization
fCharacterization
;
#
if
defined
(
SK_GANESH
)
GrRecordingContext
:
:
OwnedArenas
fArenas
;
SkTArray
<
sk_sp
<
GrRenderTask
>
>
fRenderTasks
;
SkTArray
<
GrRecordingContext
:
:
ProgramData
>
fProgramData
;
sk_sp
<
GrRenderTargetProxy
>
fTargetProxy
;
sk_sp
<
LazyProxyData
>
fLazyProxyData
;
#
endif
}
;
#
endif
