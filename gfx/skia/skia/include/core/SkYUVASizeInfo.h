#
ifndef
SkYUVASizeInfo_DEFINED
#
define
SkYUVASizeInfo_DEFINED
#
include
"
SkEncodedOrigin
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkSize
.
h
"
struct
SK_API
SkYUVASizeInfo
{
static
constexpr
auto
kMaxCount
=
4
;
SkISize
fSizes
[
kMaxCount
]
;
size_t
fWidthBytes
[
kMaxCount
]
;
SkEncodedOrigin
fOrigin
=
kDefault_SkEncodedOrigin
;
bool
operator
=
=
(
const
SkYUVASizeInfo
&
that
)
const
{
for
(
int
i
=
0
;
i
<
kMaxCount
;
+
+
i
)
{
SkASSERT
(
(
!
fSizes
[
i
]
.
isEmpty
(
)
&
&
fWidthBytes
[
i
]
)
|
|
(
fSizes
[
i
]
.
isEmpty
(
)
&
&
!
fWidthBytes
[
i
]
)
)
;
if
(
fSizes
[
i
]
!
=
that
.
fSizes
[
i
]
|
|
fWidthBytes
[
i
]
!
=
that
.
fWidthBytes
[
i
]
)
{
return
false
;
}
}
return
true
;
}
size_t
computeTotalBytes
(
)
const
{
size_t
totalBytes
=
0
;
for
(
int
i
=
0
;
i
<
kMaxCount
;
+
+
i
)
{
SkASSERT
(
(
!
fSizes
[
i
]
.
isEmpty
(
)
&
&
fWidthBytes
[
i
]
)
|
|
(
fSizes
[
i
]
.
isEmpty
(
)
&
&
!
fWidthBytes
[
i
]
)
)
;
totalBytes
+
=
fWidthBytes
[
i
]
*
fSizes
[
i
]
.
height
(
)
;
}
return
totalBytes
;
}
void
computePlanes
(
void
*
base
void
*
planes
[
kMaxCount
]
)
const
;
}
;
#
endif
