#
ifndef
SkArc_DEFINED
#
define
SkArc_DEFINED
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
include
/
core
/
SkScalar
.
h
"
struct
SkArc
{
enum
class
Type
:
bool
{
kArc
kWedge
}
;
SkArc
(
)
=
default
;
SkArc
(
const
SkArc
&
arc
)
=
default
;
SkArc
&
operator
=
(
const
SkArc
&
arc
)
=
default
;
const
SkRect
&
oval
(
)
const
{
return
fOval
;
}
SkScalar
startAngle
(
)
const
{
return
fStartAngle
;
}
SkScalar
sweepAngle
(
)
const
{
return
fSweepAngle
;
}
bool
isWedge
(
)
const
{
return
fType
=
=
Type
:
:
kWedge
;
}
friend
bool
operator
=
=
(
const
SkArc
&
a
const
SkArc
&
b
)
{
return
a
.
fOval
=
=
b
.
fOval
&
&
a
.
fStartAngle
=
=
b
.
fStartAngle
&
&
a
.
fSweepAngle
=
=
b
.
fSweepAngle
&
&
a
.
fType
=
=
b
.
fType
;
}
friend
bool
operator
!
=
(
const
SkArc
&
a
const
SkArc
&
b
)
{
return
!
(
a
=
=
b
)
;
}
static
SkArc
Make
(
const
SkRect
&
oval
SkScalar
startAngleDegrees
SkScalar
sweepAngleDegrees
Type
type
)
{
return
SkArc
(
oval
startAngleDegrees
sweepAngleDegrees
type
)
;
}
static
SkArc
Make
(
const
SkRect
&
oval
SkScalar
startAngleDegrees
SkScalar
sweepAngleDegrees
bool
useCenter
)
{
return
SkArc
(
oval
startAngleDegrees
sweepAngleDegrees
useCenter
?
Type
:
:
kWedge
:
Type
:
:
kArc
)
;
}
SkRect
fOval
=
SkRect
:
:
MakeEmpty
(
)
;
SkScalar
fStartAngle
=
0
;
SkScalar
fSweepAngle
=
0
;
Type
fType
=
Type
:
:
kArc
;
private
:
SkArc
(
const
SkRect
&
oval
SkScalar
startAngle
SkScalar
sweepAngle
Type
type
)
:
fOval
(
oval
)
fStartAngle
(
startAngle
)
fSweepAngle
(
sweepAngle
)
fType
(
type
)
{
}
}
;
#
endif
