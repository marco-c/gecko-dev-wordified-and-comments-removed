#
ifndef
SkMatrix_DEFINED
#
define
SkMatrix_DEFINED
#
include
"
SkRect
.
h
"
struct
SkRSXform
;
struct
SkPoint3
;
class
SkString
;
SK_BEGIN_REQUIRE_DENSE
class
SK_API
SkMatrix
{
public
:
static
SkMatrix
SK_WARN_UNUSED_RESULT
MakeScale
(
SkScalar
sx
SkScalar
sy
)
{
SkMatrix
m
;
m
.
setScale
(
sx
sy
)
;
return
m
;
}
static
SkMatrix
SK_WARN_UNUSED_RESULT
MakeScale
(
SkScalar
scale
)
{
SkMatrix
m
;
m
.
setScale
(
scale
scale
)
;
return
m
;
}
static
SkMatrix
SK_WARN_UNUSED_RESULT
MakeTrans
(
SkScalar
dx
SkScalar
dy
)
{
SkMatrix
m
;
m
.
setTranslate
(
dx
dy
)
;
return
m
;
}
static
SkMatrix
SK_WARN_UNUSED_RESULT
MakeAll
(
SkScalar
scaleX
SkScalar
skewX
SkScalar
transX
SkScalar
skewY
SkScalar
scaleY
SkScalar
transY
SkScalar
pers0
SkScalar
pers1
SkScalar
pers2
)
{
SkMatrix
m
;
m
.
setAll
(
scaleX
skewX
transX
skewY
scaleY
transY
pers0
pers1
pers2
)
;
return
m
;
}
enum
TypeMask
{
kIdentity_Mask
=
0
kTranslate_Mask
=
0x01
kScale_Mask
=
0x02
kAffine_Mask
=
0x04
kPerspective_Mask
=
0x08
}
;
TypeMask
getType
(
)
const
{
if
(
fTypeMask
&
kUnknown_Mask
)
{
fTypeMask
=
this
-
>
computeTypeMask
(
)
;
}
return
(
TypeMask
)
(
fTypeMask
&
0xF
)
;
}
bool
isIdentity
(
)
const
{
return
this
-
>
getType
(
)
=
=
0
;
}
bool
isScaleTranslate
(
)
const
{
return
!
(
this
-
>
getType
(
)
&
~
(
kScale_Mask
|
kTranslate_Mask
)
)
;
}
bool
isTranslate
(
)
const
{
return
!
(
this
-
>
getType
(
)
&
~
(
kTranslate_Mask
)
)
;
}
bool
rectStaysRect
(
)
const
{
if
(
fTypeMask
&
kUnknown_Mask
)
{
fTypeMask
=
this
-
>
computeTypeMask
(
)
;
}
return
(
fTypeMask
&
kRectStaysRect_Mask
)
!
=
0
;
}
bool
preservesAxisAlignment
(
)
const
{
return
this
-
>
rectStaysRect
(
)
;
}
bool
hasPerspective
(
)
const
{
return
SkToBool
(
this
-
>
getPerspectiveTypeMaskOnly
(
)
&
kPerspective_Mask
)
;
}
bool
isSimilarity
(
SkScalar
tol
=
SK_ScalarNearlyZero
)
const
;
bool
preservesRightAngles
(
SkScalar
tol
=
SK_ScalarNearlyZero
)
const
;
enum
{
kMScaleX
kMSkewX
kMTransX
kMSkewY
kMScaleY
kMTransY
kMPersp0
kMPersp1
kMPersp2
}
;
enum
{
kAScaleX
kASkewY
kASkewX
kAScaleY
kATransX
kATransY
}
;
SkScalar
operator
[
]
(
int
index
)
const
{
SkASSERT
(
(
unsigned
)
index
<
9
)
;
return
fMat
[
index
]
;
}
SkScalar
get
(
int
index
)
const
{
SkASSERT
(
(
unsigned
)
index
<
9
)
;
return
fMat
[
index
]
;
}
SkScalar
getScaleX
(
)
const
{
return
fMat
[
kMScaleX
]
;
}
SkScalar
getScaleY
(
)
const
{
return
fMat
[
kMScaleY
]
;
}
SkScalar
getSkewY
(
)
const
{
return
fMat
[
kMSkewY
]
;
}
SkScalar
getSkewX
(
)
const
{
return
fMat
[
kMSkewX
]
;
}
SkScalar
getTranslateX
(
)
const
{
return
fMat
[
kMTransX
]
;
}
SkScalar
getTranslateY
(
)
const
{
return
fMat
[
kMTransY
]
;
}
SkScalar
getPerspX
(
)
const
{
return
fMat
[
kMPersp0
]
;
}
SkScalar
getPerspY
(
)
const
{
return
fMat
[
kMPersp1
]
;
}
SkScalar
&
operator
[
]
(
int
index
)
{
SkASSERT
(
(
unsigned
)
index
<
9
)
;
this
-
>
setTypeMask
(
kUnknown_Mask
)
;
return
fMat
[
index
]
;
}
void
set
(
int
index
SkScalar
value
)
{
SkASSERT
(
(
unsigned
)
index
<
9
)
;
fMat
[
index
]
=
value
;
this
-
>
setTypeMask
(
kUnknown_Mask
)
;
}
void
setScaleX
(
SkScalar
v
)
{
this
-
>
set
(
kMScaleX
v
)
;
}
void
setScaleY
(
SkScalar
v
)
{
this
-
>
set
(
kMScaleY
v
)
;
}
void
setSkewY
(
SkScalar
v
)
{
this
-
>
set
(
kMSkewY
v
)
;
}
void
setSkewX
(
SkScalar
v
)
{
this
-
>
set
(
kMSkewX
v
)
;
}
void
setTranslateX
(
SkScalar
v
)
{
this
-
>
set
(
kMTransX
v
)
;
}
void
setTranslateY
(
SkScalar
v
)
{
this
-
>
set
(
kMTransY
v
)
;
}
void
setPerspX
(
SkScalar
v
)
{
this
-
>
set
(
kMPersp0
v
)
;
}
void
setPerspY
(
SkScalar
v
)
{
this
-
>
set
(
kMPersp1
v
)
;
}
void
setAll
(
SkScalar
scaleX
SkScalar
skewX
SkScalar
transX
SkScalar
skewY
SkScalar
scaleY
SkScalar
transY
SkScalar
persp0
SkScalar
persp1
SkScalar
persp2
)
{
fMat
[
kMScaleX
]
=
scaleX
;
fMat
[
kMSkewX
]
=
skewX
;
fMat
[
kMTransX
]
=
transX
;
fMat
[
kMSkewY
]
=
skewY
;
fMat
[
kMScaleY
]
=
scaleY
;
fMat
[
kMTransY
]
=
transY
;
fMat
[
kMPersp0
]
=
persp0
;
fMat
[
kMPersp1
]
=
persp1
;
fMat
[
kMPersp2
]
=
persp2
;
this
-
>
setTypeMask
(
kUnknown_Mask
)
;
}
void
get9
(
SkScalar
buffer
[
9
]
)
const
{
memcpy
(
buffer
fMat
9
*
sizeof
(
SkScalar
)
)
;
}
void
set9
(
const
SkScalar
buffer
[
9
]
)
;
void
reset
(
)
;
void
setIdentity
(
)
{
this
-
>
reset
(
)
;
}
void
setTranslate
(
SkScalar
dx
SkScalar
dy
)
;
void
setTranslate
(
const
SkVector
&
v
)
{
this
-
>
setTranslate
(
v
.
fX
v
.
fY
)
;
}
void
setScale
(
SkScalar
sx
SkScalar
sy
SkScalar
px
SkScalar
py
)
;
void
setScale
(
SkScalar
sx
SkScalar
sy
)
;
void
setRotate
(
SkScalar
degrees
SkScalar
px
SkScalar
py
)
;
void
setRotate
(
SkScalar
degrees
)
;
void
setSinCos
(
SkScalar
sinValue
SkScalar
cosValue
SkScalar
px
SkScalar
py
)
;
void
setSinCos
(
SkScalar
sinValue
SkScalar
cosValue
)
;
SkMatrix
&
setRSXform
(
const
SkRSXform
&
rsxForm
)
;
void
setSkew
(
SkScalar
kx
SkScalar
ky
SkScalar
px
SkScalar
py
)
;
void
setSkew
(
SkScalar
kx
SkScalar
ky
)
;
void
setConcat
(
const
SkMatrix
&
a
const
SkMatrix
&
b
)
;
void
preTranslate
(
SkScalar
dx
SkScalar
dy
)
;
void
preScale
(
SkScalar
sx
SkScalar
sy
SkScalar
px
SkScalar
py
)
;
void
preScale
(
SkScalar
sx
SkScalar
sy
)
;
void
preRotate
(
SkScalar
degrees
SkScalar
px
SkScalar
py
)
;
void
preRotate
(
SkScalar
degrees
)
;
void
preSkew
(
SkScalar
kx
SkScalar
ky
SkScalar
px
SkScalar
py
)
;
void
preSkew
(
SkScalar
kx
SkScalar
ky
)
;
void
preConcat
(
const
SkMatrix
&
other
)
;
void
postTranslate
(
SkScalar
dx
SkScalar
dy
)
;
void
postScale
(
SkScalar
sx
SkScalar
sy
SkScalar
px
SkScalar
py
)
;
void
postScale
(
SkScalar
sx
SkScalar
sy
)
;
bool
postIDiv
(
int
divx
int
divy
)
;
void
postRotate
(
SkScalar
degrees
SkScalar
px
SkScalar
py
)
;
void
postRotate
(
SkScalar
degrees
)
;
void
postSkew
(
SkScalar
kx
SkScalar
ky
SkScalar
px
SkScalar
py
)
;
void
postSkew
(
SkScalar
kx
SkScalar
ky
)
;
void
postConcat
(
const
SkMatrix
&
other
)
;
enum
ScaleToFit
{
kFill_ScaleToFit
kStart_ScaleToFit
kCenter_ScaleToFit
kEnd_ScaleToFit
}
;
bool
setRectToRect
(
const
SkRect
&
src
const
SkRect
&
dst
ScaleToFit
stf
)
;
static
SkMatrix
MakeRectToRect
(
const
SkRect
&
src
const
SkRect
&
dst
ScaleToFit
stf
)
{
SkMatrix
m
;
m
.
setRectToRect
(
src
dst
stf
)
;
return
m
;
}
bool
setPolyToPoly
(
const
SkPoint
src
[
]
const
SkPoint
dst
[
]
int
count
)
;
bool
SK_WARN_UNUSED_RESULT
invert
(
SkMatrix
*
inverse
)
const
{
if
(
this
-
>
isIdentity
(
)
)
{
if
(
inverse
)
{
inverse
-
>
reset
(
)
;
}
return
true
;
}
return
this
-
>
invertNonIdentity
(
inverse
)
;
}
static
void
SetAffineIdentity
(
SkScalar
affine
[
6
]
)
;
bool
SK_WARN_UNUSED_RESULT
asAffine
(
SkScalar
affine
[
6
]
)
const
;
void
setAffine
(
const
SkScalar
affine
[
6
]
)
;
void
mapPoints
(
SkPoint
dst
[
]
const
SkPoint
src
[
]
int
count
)
const
{
SkASSERT
(
(
dst
&
&
src
&
&
count
>
0
)
|
|
0
=
=
count
)
;
SkASSERT
(
src
=
=
dst
|
|
&
dst
[
count
]
<
=
&
src
[
0
]
|
|
&
src
[
count
]
<
=
&
dst
[
0
]
)
;
this
-
>
getMapPtsProc
(
)
(
*
this
dst
src
count
)
;
}
void
mapPoints
(
SkPoint
pts
[
]
int
count
)
const
{
this
-
>
mapPoints
(
pts
pts
count
)
;
}
void
mapHomogeneousPoints
(
SkPoint3
dst
[
]
const
SkPoint3
src
[
]
int
count
)
const
;
void
mapXY
(
SkScalar
x
SkScalar
y
SkPoint
*
result
)
const
{
SkASSERT
(
result
)
;
this
-
>
getMapXYProc
(
)
(
*
this
x
y
result
)
;
}
SkPoint
mapXY
(
SkScalar
x
SkScalar
y
)
const
{
SkPoint
result
;
this
-
>
getMapXYProc
(
)
(
*
this
x
y
&
result
)
;
return
result
;
}
void
mapVectors
(
SkVector
dst
[
]
const
SkVector
src
[
]
int
count
)
const
;
void
mapVectors
(
SkVector
vecs
[
]
int
count
)
const
{
this
-
>
mapVectors
(
vecs
vecs
count
)
;
}
void
mapVector
(
SkScalar
dx
SkScalar
dy
SkVector
*
result
)
const
{
SkVector
vec
=
{
dx
dy
}
;
this
-
>
mapVectors
(
result
&
vec
1
)
;
}
SkVector
mapVector
(
SkScalar
dx
SkScalar
dy
)
const
{
SkVector
vec
=
{
dx
dy
}
;
this
-
>
mapVectors
(
&
vec
&
vec
1
)
;
return
vec
;
}
bool
mapRect
(
SkRect
*
dst
const
SkRect
&
src
)
const
;
bool
mapRect
(
SkRect
*
rect
)
const
{
return
this
-
>
mapRect
(
rect
*
rect
)
;
}
void
mapRectToQuad
(
SkPoint
dst
[
4
]
const
SkRect
&
rect
)
const
{
rect
.
toQuad
(
dst
)
;
this
-
>
mapPoints
(
dst
4
)
;
}
void
mapRectScaleTranslate
(
SkRect
*
dst
const
SkRect
&
src
)
const
;
SkScalar
mapRadius
(
SkScalar
radius
)
const
;
bool
isFixedStepInX
(
)
const
;
SkVector
fixedStepInX
(
SkScalar
y
)
const
;
bool
cheapEqualTo
(
const
SkMatrix
&
m
)
const
{
return
0
=
=
memcmp
(
fMat
m
.
fMat
sizeof
(
fMat
)
)
;
}
friend
SK_API
bool
operator
=
=
(
const
SkMatrix
&
a
const
SkMatrix
&
b
)
;
friend
SK_API
bool
operator
!
=
(
const
SkMatrix
&
a
const
SkMatrix
&
b
)
{
return
!
(
a
=
=
b
)
;
}
void
dump
(
)
const
;
void
toString
(
SkString
*
str
)
const
;
SkScalar
getMinScale
(
)
const
;
SkScalar
getMaxScale
(
)
const
;
bool
SK_WARN_UNUSED_RESULT
getMinMaxScales
(
SkScalar
scaleFactors
[
2
]
)
const
;
bool
decomposeScale
(
SkSize
*
scale
SkMatrix
*
remaining
=
nullptr
)
const
;
static
const
SkMatrix
&
I
(
)
;
static
const
SkMatrix
&
InvalidMatrix
(
)
;
static
SkMatrix
Concat
(
const
SkMatrix
&
a
const
SkMatrix
&
b
)
{
SkMatrix
result
;
result
.
setConcat
(
a
b
)
;
return
result
;
}
void
dirtyMatrixTypeCache
(
)
{
this
-
>
setTypeMask
(
kUnknown_Mask
)
;
}
void
setScaleTranslate
(
SkScalar
sx
SkScalar
sy
SkScalar
tx
SkScalar
ty
)
{
fMat
[
kMScaleX
]
=
sx
;
fMat
[
kMSkewX
]
=
0
;
fMat
[
kMTransX
]
=
tx
;
fMat
[
kMSkewY
]
=
0
;
fMat
[
kMScaleY
]
=
sy
;
fMat
[
kMTransY
]
=
ty
;
fMat
[
kMPersp0
]
=
0
;
fMat
[
kMPersp1
]
=
0
;
fMat
[
kMPersp2
]
=
1
;
unsigned
mask
=
0
;
if
(
sx
!
=
1
|
|
sy
!
=
1
)
{
mask
|
=
kScale_Mask
;
}
if
(
tx
|
|
ty
)
{
mask
|
=
kTranslate_Mask
;
}
this
-
>
setTypeMask
(
mask
|
kRectStaysRect_Mask
)
;
}
bool
isFinite
(
)
const
{
return
SkScalarsAreFinite
(
fMat
9
)
;
}
private
:
enum
{
kRectStaysRect_Mask
=
0x10
kOnlyPerspectiveValid_Mask
=
0x40
kUnknown_Mask
=
0x80
kORableMasks
=
kTranslate_Mask
|
kScale_Mask
|
kAffine_Mask
|
kPerspective_Mask
kAllMasks
=
kTranslate_Mask
|
kScale_Mask
|
kAffine_Mask
|
kPerspective_Mask
|
kRectStaysRect_Mask
}
;
SkScalar
fMat
[
9
]
;
mutable
uint32_t
fTypeMask
;
static
void
ComputeInv
(
SkScalar
dst
[
9
]
const
SkScalar
src
[
9
]
double
invDet
bool
isPersp
)
;
uint8_t
computeTypeMask
(
)
const
;
uint8_t
computePerspectiveTypeMask
(
)
const
;
void
setTypeMask
(
int
mask
)
{
SkASSERT
(
kUnknown_Mask
=
=
mask
|
|
(
mask
&
kAllMasks
)
=
=
mask
|
|
(
(
kUnknown_Mask
|
kOnlyPerspectiveValid_Mask
)
&
mask
)
=
=
(
kUnknown_Mask
|
kOnlyPerspectiveValid_Mask
)
)
;
fTypeMask
=
SkToU8
(
mask
)
;
}
void
orTypeMask
(
int
mask
)
{
SkASSERT
(
(
mask
&
kORableMasks
)
=
=
mask
)
;
fTypeMask
=
SkToU8
(
fTypeMask
|
mask
)
;
}
void
clearTypeMask
(
int
mask
)
{
SkASSERT
(
(
mask
&
kAllMasks
)
=
=
mask
)
;
fTypeMask
=
fTypeMask
&
~
mask
;
}
TypeMask
getPerspectiveTypeMaskOnly
(
)
const
{
if
(
(
fTypeMask
&
kUnknown_Mask
)
&
&
!
(
fTypeMask
&
kOnlyPerspectiveValid_Mask
)
)
{
fTypeMask
=
this
-
>
computePerspectiveTypeMask
(
)
;
}
return
(
TypeMask
)
(
fTypeMask
&
0xF
)
;
}
bool
isTriviallyIdentity
(
)
const
{
if
(
fTypeMask
&
kUnknown_Mask
)
{
return
false
;
}
return
(
(
fTypeMask
&
0xF
)
=
=
0
)
;
}
inline
void
updateTranslateMask
(
)
{
if
(
(
fMat
[
kMTransX
]
!
=
0
)
|
(
fMat
[
kMTransY
]
!
=
0
)
)
{
fTypeMask
|
=
kTranslate_Mask
;
}
else
{
fTypeMask
&
=
~
kTranslate_Mask
;
}
}
typedef
void
(
*
MapXYProc
)
(
const
SkMatrix
&
mat
SkScalar
x
SkScalar
y
SkPoint
*
result
)
;
static
MapXYProc
GetMapXYProc
(
TypeMask
mask
)
{
SkASSERT
(
(
mask
&
~
kAllMasks
)
=
=
0
)
;
return
gMapXYProcs
[
mask
&
kAllMasks
]
;
}
MapXYProc
getMapXYProc
(
)
const
{
return
GetMapXYProc
(
this
-
>
getType
(
)
)
;
}
typedef
void
(
*
MapPtsProc
)
(
const
SkMatrix
&
mat
SkPoint
dst
[
]
const
SkPoint
src
[
]
int
count
)
;
static
MapPtsProc
GetMapPtsProc
(
TypeMask
mask
)
{
SkASSERT
(
(
mask
&
~
kAllMasks
)
=
=
0
)
;
return
gMapPtsProcs
[
mask
&
kAllMasks
]
;
}
MapPtsProc
getMapPtsProc
(
)
const
{
return
GetMapPtsProc
(
this
-
>
getType
(
)
)
;
}
bool
SK_WARN_UNUSED_RESULT
invertNonIdentity
(
SkMatrix
*
inverse
)
const
;
static
bool
Poly2Proc
(
const
SkPoint
[
]
SkMatrix
*
const
SkPoint
&
scale
)
;
static
bool
Poly3Proc
(
const
SkPoint
[
]
SkMatrix
*
const
SkPoint
&
scale
)
;
static
bool
Poly4Proc
(
const
SkPoint
[
]
SkMatrix
*
const
SkPoint
&
scale
)
;
static
void
Identity_xy
(
const
SkMatrix
&
SkScalar
SkScalar
SkPoint
*
)
;
static
void
Trans_xy
(
const
SkMatrix
&
SkScalar
SkScalar
SkPoint
*
)
;
static
void
Scale_xy
(
const
SkMatrix
&
SkScalar
SkScalar
SkPoint
*
)
;
static
void
ScaleTrans_xy
(
const
SkMatrix
&
SkScalar
SkScalar
SkPoint
*
)
;
static
void
Rot_xy
(
const
SkMatrix
&
SkScalar
SkScalar
SkPoint
*
)
;
static
void
RotTrans_xy
(
const
SkMatrix
&
SkScalar
SkScalar
SkPoint
*
)
;
static
void
Persp_xy
(
const
SkMatrix
&
SkScalar
SkScalar
SkPoint
*
)
;
static
const
MapXYProc
gMapXYProcs
[
]
;
static
void
Identity_pts
(
const
SkMatrix
&
SkPoint
[
]
const
SkPoint
[
]
int
)
;
static
void
Trans_pts
(
const
SkMatrix
&
SkPoint
dst
[
]
const
SkPoint
[
]
int
)
;
static
void
Scale_pts
(
const
SkMatrix
&
SkPoint
dst
[
]
const
SkPoint
[
]
int
)
;
static
void
ScaleTrans_pts
(
const
SkMatrix
&
SkPoint
dst
[
]
const
SkPoint
[
]
int
count
)
;
static
void
Persp_pts
(
const
SkMatrix
&
SkPoint
dst
[
]
const
SkPoint
[
]
int
)
;
static
void
Affine_vpts
(
const
SkMatrix
&
SkPoint
dst
[
]
const
SkPoint
[
]
int
)
;
static
const
MapPtsProc
gMapPtsProcs
[
]
;
size_t
writeToMemory
(
void
*
buffer
)
const
;
size_t
readFromMemory
(
const
void
*
buffer
size_t
length
)
;
friend
class
SkPerspIter
;
friend
class
SkMatrixPriv
;
friend
class
SkReader32
;
friend
class
SerializationTest
;
}
;
SK_END_REQUIRE_DENSE
#
endif
