#
ifndef
SkBitmapDevice_DEFINED
#
define
SkBitmapDevice_DEFINED
#
include
"
SkBitmap
.
h
"
#
include
"
SkCanvas
.
h
"
#
include
"
SkColor
.
h
"
#
include
"
SkDevice
.
h
"
#
include
"
SkImageInfo
.
h
"
#
include
"
SkRect
.
h
"
#
include
"
SkScalar
.
h
"
#
include
"
SkSize
.
h
"
#
include
"
SkSurfaceProps
.
h
"
#
include
"
SkTypes
.
h
"
class
SkDraw
;
class
SkImageFilterCache
;
class
SkMatrix
;
class
SkPaint
;
class
SkPath
;
class
SkPixelRef
;
class
SkPixmap
;
class
SkRRect
;
class
SkSurface
;
class
SkXfermode
;
struct
SkPoint
;
class
SK_API
SkBitmapDevice
:
public
SkBaseDevice
{
public
:
SkBitmapDevice
(
const
SkBitmap
&
bitmap
)
;
static
SkBitmapDevice
*
Create
(
const
SkImageInfo
&
info
)
;
SkBitmapDevice
(
const
SkBitmap
&
bitmap
const
SkSurfaceProps
&
surfaceProps
)
;
static
SkBitmapDevice
*
Create
(
const
SkImageInfo
&
const
SkSurfaceProps
&
)
;
protected
:
bool
onShouldDisableLCD
(
const
SkPaint
&
)
const
override
;
void
drawPaint
(
const
SkDraw
&
const
SkPaint
&
paint
)
override
;
virtual
void
drawPoints
(
const
SkDraw
&
SkCanvas
:
:
PointMode
mode
size_t
count
const
SkPoint
[
]
const
SkPaint
&
paint
)
override
;
virtual
void
drawRect
(
const
SkDraw
&
const
SkRect
&
r
const
SkPaint
&
paint
)
override
;
virtual
void
drawOval
(
const
SkDraw
&
const
SkRect
&
oval
const
SkPaint
&
paint
)
override
;
virtual
void
drawRRect
(
const
SkDraw
&
const
SkRRect
&
rr
const
SkPaint
&
paint
)
override
;
virtual
void
drawPath
(
const
SkDraw
&
const
SkPath
&
path
const
SkPaint
&
paint
const
SkMatrix
*
prePathMatrix
=
NULL
bool
pathIsMutable
=
false
)
override
;
virtual
void
drawBitmap
(
const
SkDraw
&
const
SkBitmap
&
bitmap
const
SkMatrix
&
matrix
const
SkPaint
&
paint
)
override
;
virtual
void
drawSprite
(
const
SkDraw
&
const
SkBitmap
&
bitmap
int
x
int
y
const
SkPaint
&
paint
)
override
;
void
drawBitmapRect
(
const
SkDraw
&
const
SkBitmap
&
const
SkRect
*
const
SkRect
&
const
SkPaint
&
SkCanvas
:
:
SrcRectConstraint
)
override
;
virtual
void
drawText
(
const
SkDraw
&
const
void
*
text
size_t
len
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
override
;
virtual
void
drawPosText
(
const
SkDraw
&
const
void
*
text
size_t
len
const
SkScalar
pos
[
]
int
scalarsPerPos
const
SkPoint
&
offset
const
SkPaint
&
paint
)
override
;
virtual
void
drawVertices
(
const
SkDraw
&
SkCanvas
:
:
VertexMode
int
vertexCount
const
SkPoint
verts
[
]
const
SkPoint
texs
[
]
const
SkColor
colors
[
]
SkXfermode
*
xmode
const
uint16_t
indices
[
]
int
indexCount
const
SkPaint
&
paint
)
override
;
virtual
void
drawDevice
(
const
SkDraw
&
SkBaseDevice
*
int
x
int
y
const
SkPaint
&
)
override
;
void
drawSpecial
(
const
SkDraw
&
SkSpecialImage
*
int
x
int
y
const
SkPaint
&
)
override
;
sk_sp
<
SkSpecialImage
>
makeSpecial
(
const
SkBitmap
&
)
override
;
sk_sp
<
SkSpecialImage
>
makeSpecial
(
const
SkImage
*
)
override
;
sk_sp
<
SkSpecialImage
>
snapSpecial
(
)
override
;
#
ifdef
SK_SUPPORT_LEGACY_ACCESSBITMAP
const
SkBitmap
&
onAccessBitmap
(
)
override
;
#
else
const
SkBitmap
&
onAccessBitmap
(
)
;
#
endif
SkPixelRef
*
getPixelRef
(
)
const
{
return
fBitmap
.
pixelRef
(
)
;
}
SkPixelRef
*
setPixelRef
(
SkPixelRef
*
pr
)
{
fBitmap
.
setPixelRef
(
pr
)
;
return
pr
;
}
bool
onReadPixels
(
const
SkImageInfo
&
void
*
size_t
int
x
int
y
)
override
;
bool
onWritePixels
(
const
SkImageInfo
&
const
void
*
size_t
int
int
)
override
;
bool
onPeekPixels
(
SkPixmap
*
)
override
;
bool
onAccessPixels
(
SkPixmap
*
)
override
;
private
:
friend
class
SkCanvas
;
friend
struct
DeviceCM
;
friend
class
SkDraw
;
friend
class
SkDrawIter
;
friend
class
SkDeviceFilteredPaint
;
friend
class
SkSurface_Raster
;
void
replaceBitmapBackendForRasterSurface
(
const
SkBitmap
&
)
override
;
SkBaseDevice
*
onCreateDevice
(
const
CreateInfo
&
const
SkPaint
*
)
override
;
sk_sp
<
SkSurface
>
makeSurface
(
const
SkImageInfo
&
const
SkSurfaceProps
&
)
override
;
SkImageFilterCache
*
getImageFilterCache
(
)
override
;
SkBitmap
fBitmap
;
void
setNewSize
(
const
SkISize
&
)
;
typedef
SkBaseDevice
INHERITED
;
}
;
#
endif
