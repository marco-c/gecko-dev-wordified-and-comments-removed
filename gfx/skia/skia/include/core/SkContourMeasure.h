#
ifndef
SkContourMeasure_DEFINED
#
define
SkContourMeasure_DEFINED
#
include
"
include
/
core
/
SkPoint
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkScalar
.
h
"
#
include
"
include
/
private
/
base
/
SkAPI
.
h
"
#
include
"
include
/
private
/
base
/
SkTDArray
.
h
"
#
include
<
memory
>
class
SkMatrix
;
class
SkPath
;
class
SK_API
SkContourMeasure
:
public
SkRefCnt
{
public
:
SkScalar
length
(
)
const
{
return
fLength
;
}
[
[
nodiscard
]
]
bool
getPosTan
(
SkScalar
distance
SkPoint
*
position
SkVector
*
tangent
)
const
;
enum
MatrixFlags
{
kGetPosition_MatrixFlag
=
0x01
kGetTangent_MatrixFlag
=
0x02
kGetPosAndTan_MatrixFlag
=
kGetPosition_MatrixFlag
|
kGetTangent_MatrixFlag
}
;
[
[
nodiscard
]
]
bool
getMatrix
(
SkScalar
distance
SkMatrix
*
matrix
MatrixFlags
flags
=
kGetPosAndTan_MatrixFlag
)
const
;
[
[
nodiscard
]
]
bool
getSegment
(
SkScalar
startD
SkScalar
stopD
SkPath
*
dst
bool
startWithMoveTo
)
const
;
bool
isClosed
(
)
const
{
return
fIsClosed
;
}
private
:
struct
Segment
{
SkScalar
fDistance
;
unsigned
fPtIndex
;
unsigned
fTValue
:
30
;
unsigned
fType
:
2
;
SkScalar
getScalarT
(
)
const
;
static
const
Segment
*
Next
(
const
Segment
*
seg
)
{
unsigned
ptIndex
=
seg
-
>
fPtIndex
;
do
{
+
+
seg
;
}
while
(
seg
-
>
fPtIndex
=
=
ptIndex
)
;
return
seg
;
}
}
;
const
SkTDArray
<
Segment
>
fSegments
;
const
SkTDArray
<
SkPoint
>
fPts
;
const
SkScalar
fLength
;
const
bool
fIsClosed
;
SkContourMeasure
(
SkTDArray
<
Segment
>
&
&
segs
SkTDArray
<
SkPoint
>
&
&
pts
SkScalar
length
bool
isClosed
)
;
~
SkContourMeasure
(
)
override
{
}
const
Segment
*
distanceToSegment
(
SkScalar
distance
SkScalar
*
t
)
const
;
friend
class
SkContourMeasureIter
;
friend
class
SkPathMeasurePriv
;
}
;
class
SK_API
SkContourMeasureIter
{
public
:
SkContourMeasureIter
(
)
;
SkContourMeasureIter
(
const
SkPath
&
path
bool
forceClosed
SkScalar
resScale
=
1
)
;
~
SkContourMeasureIter
(
)
;
SkContourMeasureIter
(
SkContourMeasureIter
&
&
)
;
SkContourMeasureIter
&
operator
=
(
SkContourMeasureIter
&
&
)
;
void
reset
(
const
SkPath
&
path
bool
forceClosed
SkScalar
resScale
=
1
)
;
sk_sp
<
SkContourMeasure
>
next
(
)
;
private
:
class
Impl
;
std
:
:
unique_ptr
<
Impl
>
fImpl
;
}
;
#
endif
