#
ifndef
SkFlattenable_DEFINED
#
define
SkFlattenable_DEFINED
#
include
"
SkRefCnt
.
h
"
class
SkData
;
class
SkReadBuffer
;
class
SkWriteBuffer
;
struct
SkSerialProcs
;
struct
SkDeserialProcs
;
class
SK_API
SkFlattenable
:
public
SkRefCnt
{
public
:
enum
Type
{
kSkColorFilter_Type
kSkDrawable_Type
kSkDrawLooper_Type
kSkImageFilter_Type
kSkMaskFilter_Type
kSkPathEffect_Type
kSkPixelRef_Type
kSkUnused_Type4
kSkShaderBase_Type
kSkUnused_Type
kSkUnused_Type2
kSkNormalSource_Type
}
;
typedef
sk_sp
<
SkFlattenable
>
(
*
Factory
)
(
SkReadBuffer
&
)
;
SkFlattenable
(
)
{
}
virtual
Factory
getFactory
(
)
const
=
0
;
virtual
const
char
*
getTypeName
(
)
const
{
#
ifdef
SK_DISABLE_READBUFFER
SkASSERT
(
false
)
;
return
nullptr
;
#
else
return
FactoryToName
(
getFactory
(
)
)
;
#
endif
}
static
Factory
NameToFactory
(
const
char
name
[
]
)
;
static
const
char
*
FactoryToName
(
Factory
)
;
static
bool
NameToType
(
const
char
name
[
]
Type
*
type
)
;
static
void
Register
(
const
char
name
[
]
Factory
Type
)
;
virtual
void
flatten
(
SkWriteBuffer
&
)
const
{
}
virtual
Type
getFlattenableType
(
)
const
=
0
;
sk_sp
<
SkData
>
serialize
(
const
SkSerialProcs
*
=
nullptr
)
const
;
size_t
serialize
(
void
*
memory
size_t
memory_size
const
SkSerialProcs
*
=
nullptr
)
const
;
static
sk_sp
<
SkFlattenable
>
Deserialize
(
Type
const
void
*
data
size_t
length
const
SkDeserialProcs
*
procs
=
nullptr
)
;
protected
:
class
PrivateInitializer
{
public
:
static
void
InitCore
(
)
;
static
void
InitEffects
(
)
;
static
void
InitImageFilters
(
)
;
}
;
private
:
static
void
InitializeFlattenablesIfNeeded
(
)
;
static
void
Finalize
(
)
;
friend
class
SkGraphics
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
