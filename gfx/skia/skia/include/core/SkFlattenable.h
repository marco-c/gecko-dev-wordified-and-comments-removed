#
ifndef
SkFlattenable_DEFINED
#
define
SkFlattenable_DEFINED
#
include
"
SkRefCnt
.
h
"
class
SkData
;
class
SkReadBuffer
;
class
SkWriteBuffer
;
struct
SkSerialProcs
;
struct
SkDeserialProcs
;
#
define
SK_DECLARE_FLATTENABLE_REGISTRAR_GROUP
(
)
static
void
InitializeFlattenables
(
)
;
#
define
SK_DEFINE_FLATTENABLE_REGISTRAR_GROUP_START
(
flattenable
)
\
void
flattenable
:
:
InitializeFlattenables
(
)
{
#
define
SK_DEFINE_FLATTENABLE_REGISTRAR_GROUP_END
\
}
#
define
SK_DEFINE_FLATTENABLE_REGISTRAR_ENTRY
(
flattenable
)
\
SkFlattenable
:
:
Register
(
#
flattenable
flattenable
:
:
CreateProc
\
flattenable
:
:
GetFlattenableType
(
)
)
;
#
define
SK_DECLARE_PUBLIC_FLATTENABLE_DESERIALIZATION_PROCS
(
flattenable
)
\
private
:
\
static
sk_sp
<
SkFlattenable
>
CreateProc
(
SkReadBuffer
&
)
;
\
friend
class
SkFlattenable
:
:
PrivateInitializer
;
\
public
:
\
Factory
getFactory
(
)
const
override
{
return
CreateProc
;
}
#
define
SK_DEFINE_FLATTENABLE_TYPE
(
flattenable
)
\
static
Type
GetFlattenableType
(
)
{
\
return
k
#
#
flattenable
#
#
_Type
;
\
}
\
Type
getFlattenableType
(
)
const
override
{
\
return
k
#
#
flattenable
#
#
_Type
;
\
}
\
static
sk_sp
<
flattenable
>
Deserialize
(
const
void
*
data
size_t
size
\
const
SkDeserialProcs
*
procs
=
nullptr
)
{
\
return
sk_sp
<
flattenable
>
(
static_cast
<
flattenable
*
>
(
\
SkFlattenable
:
:
Deserialize
(
\
k
#
#
flattenable
#
#
_Type
data
size
procs
)
.
release
(
)
)
)
;
\
}
class
SK_API
SkFlattenable
:
public
SkRefCnt
{
public
:
enum
Type
{
kSkColorFilter_Type
kSkDrawable_Type
kSkDrawLooper_Type
kSkImageFilter_Type
kSkMaskFilter_Type
kSkPathEffect_Type
kSkPixelRef_Type
kSkUnused_Type4
kSkShaderBase_Type
kSkUnused_Type
kSkUnused_Type2
kSkUnused_Type3
}
;
typedef
sk_sp
<
SkFlattenable
>
(
*
Factory
)
(
SkReadBuffer
&
)
;
SkFlattenable
(
)
{
}
virtual
Factory
getFactory
(
)
const
=
0
;
virtual
const
char
*
getTypeName
(
)
const
{
return
FactoryToName
(
getFactory
(
)
)
;
}
static
Factory
NameToFactory
(
const
char
name
[
]
)
;
static
const
char
*
FactoryToName
(
Factory
)
;
static
bool
NameToType
(
const
char
name
[
]
Type
*
type
)
;
static
void
Register
(
const
char
name
[
]
Factory
Type
)
;
virtual
void
flatten
(
SkWriteBuffer
&
)
const
{
}
virtual
Type
getFlattenableType
(
)
const
=
0
;
sk_sp
<
SkData
>
serialize
(
const
SkSerialProcs
*
=
nullptr
)
const
;
static
sk_sp
<
SkFlattenable
>
Deserialize
(
Type
const
void
*
data
size_t
length
const
SkDeserialProcs
*
procs
=
nullptr
)
;
protected
:
class
PrivateInitializer
{
public
:
static
void
InitCore
(
)
;
static
void
InitEffects
(
)
;
}
;
private
:
static
void
InitializeFlattenablesIfNeeded
(
)
;
static
void
Finalize
(
)
;
friend
class
SkGraphics
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
