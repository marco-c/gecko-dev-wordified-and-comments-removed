#
ifndef
SkFlattenable_DEFINED
#
define
SkFlattenable_DEFINED
#
include
"
SkRefCnt
.
h
"
class
SkReadBuffer
;
class
SkWriteBuffer
;
class
SkPrivateEffectInitializer
;
#
define
SK_DECLARE_FLATTENABLE_REGISTRAR_GROUP
(
)
static
void
InitializeFlattenables
(
)
;
#
define
SK_DEFINE_FLATTENABLE_REGISTRAR_GROUP_START
(
flattenable
)
\
void
flattenable
:
:
InitializeFlattenables
(
)
{
#
define
SK_DEFINE_FLATTENABLE_REGISTRAR_GROUP_END
\
}
#
define
SK_DEFINE_FLATTENABLE_REGISTRAR_ENTRY
(
flattenable
)
\
SkFlattenable
:
:
Register
(
#
flattenable
flattenable
:
:
CreateProc
\
flattenable
:
:
GetFlattenableType
(
)
)
;
#
define
SK_DECLARE_PUBLIC_FLATTENABLE_DESERIALIZATION_PROCS
(
flattenable
)
\
private
:
\
static
sk_sp
<
SkFlattenable
>
CreateProc
(
SkReadBuffer
&
)
;
\
friend
class
SkFlattenable
:
:
PrivateInitializer
;
\
public
:
\
Factory
getFactory
(
)
const
override
{
return
CreateProc
;
}
#
define
SK_DEFINE_FLATTENABLE_TYPE
(
flattenable
)
\
static
Type
GetFlattenableType
(
)
{
\
return
k
#
#
flattenable
#
#
_Type
;
\
}
class
SK_API
SkFlattenable
:
public
SkRefCnt
{
public
:
enum
Type
{
kSkColorFilter_Type
kSkDrawable_Type
kSkDrawLooper_Type
kSkImageFilter_Type
kSkMaskFilter_Type
kSkPathEffect_Type
kSkPixelRef_Type
kSkRasterizer_Type
kSkShader_Type
kSkUnused_Type
kSkXfermode_Type
kSkNormalSource_Type
}
;
typedef
sk_sp
<
SkFlattenable
>
(
*
Factory
)
(
SkReadBuffer
&
)
;
SkFlattenable
(
)
{
}
virtual
Factory
getFactory
(
)
const
=
0
;
virtual
const
char
*
getTypeName
(
)
const
{
return
FactoryToName
(
getFactory
(
)
)
;
}
static
Factory
NameToFactory
(
const
char
name
[
]
)
;
static
const
char
*
FactoryToName
(
Factory
)
;
static
bool
NameToType
(
const
char
name
[
]
Type
*
type
)
;
static
void
Register
(
const
char
name
[
]
Factory
Type
)
;
virtual
void
flatten
(
SkWriteBuffer
&
)
const
{
}
protected
:
class
PrivateInitializer
{
public
:
static
void
InitCore
(
)
;
static
void
InitEffects
(
)
;
}
;
private
:
static
void
InitializeFlattenablesIfNeeded
(
)
;
friend
class
SkGraphics
;
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
