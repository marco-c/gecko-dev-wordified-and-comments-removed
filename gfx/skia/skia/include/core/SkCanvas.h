#
ifndef
SkCanvas_DEFINED
#
define
SkCanvas_DEFINED
#
include
"
SkTypes
.
h
"
#
include
"
SkBlendMode
.
h
"
#
include
"
SkBitmap
.
h
"
#
include
"
SkClipOp
.
h
"
#
include
"
SkDeque
.
h
"
#
include
"
SkImage
.
h
"
#
include
"
SkPaint
.
h
"
#
include
"
SkRefCnt
.
h
"
#
include
"
SkRegion
.
h
"
#
include
"
SkSurfaceProps
.
h
"
#
include
"
SkXfermode
.
h
"
#
include
"
SkLights
.
h
"
#
include
"
.
.
/
private
/
SkShadowParams
.
h
"
class
GrContext
;
class
GrDrawContext
;
class
SkBaseDevice
;
class
SkCanvasClipVisitor
;
class
SkClipStack
;
class
SkData
;
class
SkDraw
;
class
SkDrawable
;
class
SkDrawFilter
;
class
SkImageFilter
;
class
SkMetaData
;
class
SkPath
;
class
SkPicture
;
class
SkPixmap
;
class
SkRasterClip
;
class
SkRRect
;
struct
SkRSXform
;
class
SkSurface
;
class
SkSurface_Base
;
class
SkTextBlob
;
class
SK_API
SkCanvas
:
public
SkRefCnt
{
enum
PrivateSaveLayerFlags
{
kDontClipToLayer_PrivateSaveLayerFlag
=
1U
<
<
31
}
;
public
:
#
ifdef
SK_SUPPORT_LEGACY_CLIP_REGIONOPS
typedef
SkRegion
:
:
Op
ClipOp
;
static
const
ClipOp
kDifference_Op
=
SkRegion
:
:
kDifference_Op
;
static
const
ClipOp
kIntersect_Op
=
SkRegion
:
:
kIntersect_Op
;
static
const
ClipOp
kUnion_Op
=
SkRegion
:
:
kUnion_Op
;
static
const
ClipOp
kXOR_Op
=
SkRegion
:
:
kXOR_Op
;
static
const
ClipOp
kReverseDifference_Op
=
SkRegion
:
:
kReverseDifference_Op
;
static
const
ClipOp
kReplace_Op
=
SkRegion
:
:
kReplace_Op
;
#
else
typedef
SkClipOp
ClipOp
;
static
const
ClipOp
kDifference_Op
=
kDifference_SkClipOp
;
static
const
ClipOp
kIntersect_Op
=
kIntersect_SkClipOp
;
static
const
ClipOp
kUnion_Op
=
kUnion_SkClipOp
;
static
const
ClipOp
kXOR_Op
=
kXOR_SkClipOp
;
static
const
ClipOp
kReverseDifference_Op
=
kReverseDifference_SkClipOp
;
static
const
ClipOp
kReplace_Op
=
kReplace_SkClipOp
;
#
endif
static
SkCanvas
*
NewRasterDirect
(
const
SkImageInfo
&
void
*
size_t
)
;
static
SkCanvas
*
NewRasterDirectN32
(
int
width
int
height
SkPMColor
*
pixels
size_t
rowBytes
)
{
return
NewRasterDirect
(
SkImageInfo
:
:
MakeN32Premul
(
width
height
)
pixels
rowBytes
)
;
}
SkCanvas
(
)
;
SkCanvas
(
int
width
int
height
const
SkSurfaceProps
*
=
NULL
)
;
explicit
SkCanvas
(
SkBaseDevice
*
device
)
;
explicit
SkCanvas
(
const
SkBitmap
&
bitmap
)
;
SkCanvas
(
const
SkBitmap
&
bitmap
const
SkSurfaceProps
&
props
)
;
virtual
~
SkCanvas
(
)
;
SkMetaData
&
getMetaData
(
)
;
SkImageInfo
imageInfo
(
)
const
;
bool
getProps
(
SkSurfaceProps
*
)
const
;
void
flush
(
)
;
virtual
SkISize
getBaseLayerSize
(
)
const
;
SkISize
getDeviceSize
(
)
const
{
return
this
-
>
getBaseLayerSize
(
)
;
}
#
ifndef
SK_SUPPORT_LEGACY_GETDEVICE
protected
:
#
endif
SkBaseDevice
*
getDevice
(
)
const
;
public
:
SkBaseDevice
*
getDevice_just_for_deprecated_compatibility_testing
(
)
const
{
return
this
-
>
getDevice
(
)
;
}
#
ifndef
SK_SUPPORT_LEGACY_GETTOPDEVICE
private
:
#
endif
SkBaseDevice
*
getTopDevice
(
bool
updateMatrixClip
=
false
)
const
;
public
:
sk_sp
<
SkSurface
>
makeSurface
(
const
SkImageInfo
&
const
SkSurfaceProps
*
=
nullptr
)
;
#
ifdef
SK_SUPPORT_LEGACY_NEW_SURFACE_API
SkSurface
*
newSurface
(
const
SkImageInfo
&
info
const
SkSurfaceProps
*
props
=
NULL
)
;
#
endif
GrContext
*
getGrContext
(
)
;
void
*
accessTopLayerPixels
(
SkImageInfo
*
info
size_t
*
rowBytes
SkIPoint
*
origin
=
NULL
)
;
bool
peekPixels
(
SkPixmap
*
)
;
#
ifdef
SK_SUPPORT_LEGACY_PEEKPIXELS_PARMS
const
void
*
peekPixels
(
SkImageInfo
*
info
size_t
*
rowBytes
)
;
#
endif
bool
readPixels
(
const
SkImageInfo
&
dstInfo
void
*
dstPixels
size_t
dstRowBytes
int
srcX
int
srcY
)
;
bool
readPixels
(
SkBitmap
*
bitmap
int
srcX
int
srcY
)
;
bool
readPixels
(
const
SkIRect
&
srcRect
SkBitmap
*
bitmap
)
;
bool
writePixels
(
const
SkImageInfo
&
const
void
*
pixels
size_t
rowBytes
int
x
int
y
)
;
bool
writePixels
(
const
SkBitmap
&
bitmap
int
x
int
y
)
;
int
save
(
)
;
int
saveLayer
(
const
SkRect
*
bounds
const
SkPaint
*
paint
)
;
int
saveLayer
(
const
SkRect
&
bounds
const
SkPaint
*
paint
)
{
return
this
-
>
saveLayer
(
&
bounds
paint
)
;
}
int
saveLayerPreserveLCDTextRequests
(
const
SkRect
*
bounds
const
SkPaint
*
paint
)
;
int
saveLayerAlpha
(
const
SkRect
*
bounds
U8CPU
alpha
)
;
enum
{
kIsOpaque_SaveLayerFlag
=
1
<
<
0
kPreserveLCDText_SaveLayerFlag
=
1
<
<
1
#
ifdef
SK_SUPPORT_LEGACY_CLIPTOLAYERFLAG
kDontClipToLayer_Legacy_SaveLayerFlag
=
kDontClipToLayer_PrivateSaveLayerFlag
#
endif
}
;
typedef
uint32_t
SaveLayerFlags
;
struct
SaveLayerRec
{
SaveLayerRec
(
)
:
fBounds
(
nullptr
)
fPaint
(
nullptr
)
fBackdrop
(
nullptr
)
fSaveLayerFlags
(
0
)
{
}
SaveLayerRec
(
const
SkRect
*
bounds
const
SkPaint
*
paint
SaveLayerFlags
saveLayerFlags
=
0
)
:
fBounds
(
bounds
)
fPaint
(
paint
)
fBackdrop
(
nullptr
)
fSaveLayerFlags
(
saveLayerFlags
)
{
}
SaveLayerRec
(
const
SkRect
*
bounds
const
SkPaint
*
paint
const
SkImageFilter
*
backdrop
SaveLayerFlags
saveLayerFlags
)
:
fBounds
(
bounds
)
fPaint
(
paint
)
fBackdrop
(
backdrop
)
fSaveLayerFlags
(
saveLayerFlags
)
{
}
const
SkRect
*
fBounds
;
const
SkPaint
*
fPaint
;
const
SkImageFilter
*
fBackdrop
;
SaveLayerFlags
fSaveLayerFlags
;
}
;
int
saveLayer
(
const
SaveLayerRec
&
)
;
void
restore
(
)
;
int
getSaveCount
(
)
const
;
void
restoreToCount
(
int
saveCount
)
;
void
translate
(
SkScalar
dx
SkScalar
dy
)
;
void
scale
(
SkScalar
sx
SkScalar
sy
)
;
void
rotate
(
SkScalar
degrees
)
;
void
rotate
(
SkScalar
degrees
SkScalar
px
SkScalar
py
)
;
void
skew
(
SkScalar
sx
SkScalar
sy
)
;
void
concat
(
const
SkMatrix
&
matrix
)
;
void
setMatrix
(
const
SkMatrix
&
matrix
)
;
void
resetMatrix
(
)
;
#
ifdef
SK_EXPERIMENTAL_SHADOWING
void
translateZ
(
SkScalar
z
)
;
void
setLights
(
sk_sp
<
SkLights
>
lights
)
;
sk_sp
<
SkLights
>
getLights
(
)
const
;
#
endif
void
clipRect
(
const
SkRect
&
rect
ClipOp
bool
doAntiAlias
)
;
void
clipRect
(
const
SkRect
&
rect
ClipOp
op
)
{
this
-
>
clipRect
(
rect
op
false
)
;
}
void
clipRect
(
const
SkRect
&
rect
bool
doAntiAlias
=
false
)
{
this
-
>
clipRect
(
rect
kIntersect_Op
doAntiAlias
)
;
}
void
clipRRect
(
const
SkRRect
&
rrect
ClipOp
op
bool
doAntiAlias
)
;
void
clipRRect
(
const
SkRRect
&
rrect
ClipOp
op
)
{
this
-
>
clipRRect
(
rrect
op
false
)
;
}
void
clipRRect
(
const
SkRRect
&
rrect
bool
doAntiAlias
=
false
)
{
this
-
>
clipRRect
(
rrect
kIntersect_Op
doAntiAlias
)
;
}
void
clipPath
(
const
SkPath
&
path
ClipOp
op
bool
doAntiAlias
)
;
void
clipPath
(
const
SkPath
&
path
ClipOp
op
)
{
this
-
>
clipPath
(
path
op
false
)
;
}
void
clipPath
(
const
SkPath
&
path
bool
doAntiAlias
=
false
)
{
this
-
>
clipPath
(
path
kIntersect_Op
doAntiAlias
)
;
}
void
setAllowSimplifyClip
(
bool
allow
)
{
fAllowSimplifyClip
=
allow
;
}
void
clipRegion
(
const
SkRegion
&
deviceRgn
ClipOp
op
=
kIntersect_Op
)
;
bool
quickReject
(
const
SkRect
&
rect
)
const
;
bool
quickReject
(
const
SkPath
&
path
)
const
;
virtual
bool
getClipBounds
(
SkRect
*
bounds
)
const
;
virtual
bool
getClipDeviceBounds
(
SkIRect
*
bounds
)
const
;
void
drawARGB
(
U8CPU
a
U8CPU
r
U8CPU
g
U8CPU
b
SkBlendMode
mode
=
SkBlendMode
:
:
kSrcOver
)
;
#
ifdef
SK_SUPPORT_LEGACY_XFERMODE_OBJECT
void
drawARGB
(
U8CPU
a
U8CPU
r
U8CPU
g
U8CPU
b
SkXfermode
:
:
Mode
mode
)
{
this
-
>
drawARGB
(
a
r
g
b
(
SkBlendMode
)
mode
)
;
}
#
endif
void
drawColor
(
SkColor
color
SkBlendMode
mode
=
SkBlendMode
:
:
kSrcOver
)
;
#
ifdef
SK_SUPPORT_LEGACY_XFERMODE_OBJECT
void
drawColor
(
SkColor
color
SkXfermode
:
:
Mode
mode
)
{
this
-
>
drawColor
(
color
(
SkBlendMode
)
mode
)
;
}
#
endif
void
clear
(
SkColor
color
)
{
this
-
>
drawColor
(
color
SkBlendMode
:
:
kSrc
)
;
}
void
discard
(
)
{
this
-
>
onDiscard
(
)
;
}
void
drawPaint
(
const
SkPaint
&
paint
)
;
enum
PointMode
{
kPoints_PointMode
kLines_PointMode
kPolygon_PointMode
}
;
void
drawPoints
(
PointMode
mode
size_t
count
const
SkPoint
pts
[
]
const
SkPaint
&
paint
)
;
void
drawPoint
(
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
;
void
drawPoint
(
SkScalar
x
SkScalar
y
SkColor
color
)
;
void
drawLine
(
SkScalar
x0
SkScalar
y0
SkScalar
x1
SkScalar
y1
const
SkPaint
&
paint
)
;
void
drawRect
(
const
SkRect
&
rect
const
SkPaint
&
paint
)
;
void
drawIRect
(
const
SkIRect
&
rect
const
SkPaint
&
paint
)
{
SkRect
r
;
r
.
set
(
rect
)
;
this
-
>
drawRect
(
r
paint
)
;
}
void
drawRectCoords
(
SkScalar
left
SkScalar
top
SkScalar
right
SkScalar
bottom
const
SkPaint
&
paint
)
;
void
drawRegion
(
const
SkRegion
&
region
const
SkPaint
&
paint
)
;
void
drawOval
(
const
SkRect
&
oval
const
SkPaint
&
)
;
void
drawRRect
(
const
SkRRect
&
rrect
const
SkPaint
&
paint
)
;
void
drawDRRect
(
const
SkRRect
&
outer
const
SkRRect
&
inner
const
SkPaint
&
)
;
void
drawCircle
(
SkScalar
cx
SkScalar
cy
SkScalar
radius
const
SkPaint
&
paint
)
;
void
drawArc
(
const
SkRect
&
oval
SkScalar
startAngle
SkScalar
sweepAngle
bool
useCenter
const
SkPaint
&
paint
)
;
void
drawRoundRect
(
const
SkRect
&
rect
SkScalar
rx
SkScalar
ry
const
SkPaint
&
paint
)
;
void
drawPath
(
const
SkPath
&
path
const
SkPaint
&
paint
)
;
void
drawImage
(
const
SkImage
*
image
SkScalar
left
SkScalar
top
const
SkPaint
*
paint
=
NULL
)
;
void
drawImage
(
const
sk_sp
<
SkImage
>
&
image
SkScalar
left
SkScalar
top
const
SkPaint
*
paint
=
NULL
)
{
this
-
>
drawImage
(
image
.
get
(
)
left
top
paint
)
;
}
enum
SrcRectConstraint
{
kStrict_SrcRectConstraint
kFast_SrcRectConstraint
}
;
void
drawImageRect
(
const
SkImage
*
image
const
SkRect
&
src
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
=
kStrict_SrcRectConstraint
)
;
void
drawImageRect
(
const
SkImage
*
image
const
SkIRect
&
isrc
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
=
kStrict_SrcRectConstraint
)
;
void
drawImageRect
(
const
SkImage
*
image
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
=
kStrict_SrcRectConstraint
)
;
void
drawImageRect
(
const
sk_sp
<
SkImage
>
&
image
const
SkRect
&
src
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
=
kStrict_SrcRectConstraint
)
{
this
-
>
drawImageRect
(
image
.
get
(
)
src
dst
paint
constraint
)
;
}
void
drawImageRect
(
const
sk_sp
<
SkImage
>
&
image
const
SkIRect
&
isrc
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
cons
=
kStrict_SrcRectConstraint
)
{
this
-
>
drawImageRect
(
image
.
get
(
)
isrc
dst
paint
cons
)
;
}
void
drawImageRect
(
const
sk_sp
<
SkImage
>
&
image
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
cons
=
kStrict_SrcRectConstraint
)
{
this
-
>
drawImageRect
(
image
.
get
(
)
dst
paint
cons
)
;
}
void
drawImageNine
(
const
SkImage
*
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
*
paint
=
nullptr
)
;
void
drawImageNine
(
const
sk_sp
<
SkImage
>
&
image
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
*
paint
=
nullptr
)
{
this
-
>
drawImageNine
(
image
.
get
(
)
center
dst
paint
)
;
}
void
drawBitmap
(
const
SkBitmap
&
bitmap
SkScalar
left
SkScalar
top
const
SkPaint
*
paint
=
NULL
)
;
void
drawBitmapRect
(
const
SkBitmap
&
bitmap
const
SkRect
&
src
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
=
kStrict_SrcRectConstraint
)
;
void
drawBitmapRect
(
const
SkBitmap
&
bitmap
const
SkIRect
&
isrc
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
=
kStrict_SrcRectConstraint
)
;
void
drawBitmapRect
(
const
SkBitmap
&
bitmap
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
=
kStrict_SrcRectConstraint
)
;
void
drawBitmapNine
(
const
SkBitmap
&
bitmap
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
*
paint
=
NULL
)
;
struct
Lattice
{
enum
Flags
:
uint8_t
{
kTransparent_Flags
=
1
<
<
0
}
;
const
int
*
fXDivs
;
const
int
*
fYDivs
;
const
Flags
*
fFlags
;
int
fXCount
;
int
fYCount
;
const
SkIRect
*
fBounds
;
}
;
void
drawBitmapLattice
(
const
SkBitmap
&
bitmap
const
Lattice
&
lattice
const
SkRect
&
dst
const
SkPaint
*
paint
=
nullptr
)
;
void
drawImageLattice
(
const
SkImage
*
image
const
Lattice
&
lattice
const
SkRect
&
dst
const
SkPaint
*
paint
=
nullptr
)
;
void
drawText
(
const
void
*
text
size_t
byteLength
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
;
void
drawPosText
(
const
void
*
text
size_t
byteLength
const
SkPoint
pos
[
]
const
SkPaint
&
paint
)
;
void
drawPosTextH
(
const
void
*
text
size_t
byteLength
const
SkScalar
xpos
[
]
SkScalar
constY
const
SkPaint
&
paint
)
;
void
drawTextOnPathHV
(
const
void
*
text
size_t
byteLength
const
SkPath
&
path
SkScalar
hOffset
SkScalar
vOffset
const
SkPaint
&
paint
)
;
void
drawTextOnPath
(
const
void
*
text
size_t
byteLength
const
SkPath
&
path
const
SkMatrix
*
matrix
const
SkPaint
&
paint
)
;
void
drawTextRSXform
(
const
void
*
text
size_t
byteLength
const
SkRSXform
[
]
const
SkRect
*
cullRect
const
SkPaint
&
paint
)
;
void
drawTextBlob
(
const
SkTextBlob
*
blob
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
;
void
drawTextBlob
(
const
sk_sp
<
SkTextBlob
>
&
blob
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
{
this
-
>
drawTextBlob
(
blob
.
get
(
)
x
y
paint
)
;
}
void
drawPicture
(
const
SkPicture
*
picture
)
{
this
-
>
drawPicture
(
picture
NULL
NULL
)
;
}
void
drawPicture
(
const
sk_sp
<
SkPicture
>
&
picture
)
{
this
-
>
drawPicture
(
picture
.
get
(
)
)
;
}
void
drawPicture
(
const
SkPicture
*
const
SkMatrix
*
matrix
const
SkPaint
*
paint
)
;
void
drawPicture
(
const
sk_sp
<
SkPicture
>
&
picture
const
SkMatrix
*
matrix
const
SkPaint
*
paint
)
{
this
-
>
drawPicture
(
picture
.
get
(
)
matrix
paint
)
;
}
#
ifdef
SK_EXPERIMENTAL_SHADOWING
void
drawShadowedPicture
(
const
SkPicture
*
const
SkMatrix
*
matrix
const
SkPaint
*
paint
const
SkShadowParams
&
params
)
;
void
drawShadowedPicture
(
const
sk_sp
<
SkPicture
>
&
picture
const
SkMatrix
*
matrix
const
SkPaint
*
paint
const
SkShadowParams
&
params
)
{
this
-
>
drawShadowedPicture
(
picture
.
get
(
)
matrix
paint
params
)
;
}
#
endif
enum
VertexMode
{
kTriangles_VertexMode
kTriangleStrip_VertexMode
kTriangleFan_VertexMode
}
;
void
drawVertices
(
VertexMode
vmode
int
vertexCount
const
SkPoint
vertices
[
]
const
SkPoint
texs
[
]
const
SkColor
colors
[
]
SkXfermode
*
xmode
const
uint16_t
indices
[
]
int
indexCount
const
SkPaint
&
paint
)
;
void
drawVertices
(
VertexMode
vmode
int
vertexCount
const
SkPoint
vertices
[
]
const
SkPoint
texs
[
]
const
SkColor
colors
[
]
const
sk_sp
<
SkXfermode
>
&
xmode
const
uint16_t
indices
[
]
int
indexCount
const
SkPaint
&
paint
)
{
this
-
>
drawVertices
(
vmode
vertexCount
vertices
texs
colors
xmode
.
get
(
)
indices
indexCount
paint
)
;
}
void
drawPatch
(
const
SkPoint
cubics
[
12
]
const
SkColor
colors
[
4
]
const
SkPoint
texCoords
[
4
]
SkXfermode
*
xmode
const
SkPaint
&
paint
)
;
void
drawPatch
(
const
SkPoint
cubics
[
12
]
const
SkColor
colors
[
4
]
const
SkPoint
texCoords
[
4
]
const
sk_sp
<
SkXfermode
>
&
xmode
const
SkPaint
&
paint
)
{
this
-
>
drawPatch
(
cubics
colors
texCoords
xmode
.
get
(
)
paint
)
;
}
void
drawAtlas
(
const
SkImage
*
atlas
const
SkRSXform
xform
[
]
const
SkRect
tex
[
]
const
SkColor
colors
[
]
int
count
SkXfermode
:
:
Mode
const
SkRect
*
cullRect
const
SkPaint
*
paint
)
;
void
drawAtlas
(
const
SkImage
*
atlas
const
SkRSXform
xform
[
]
const
SkRect
tex
[
]
int
count
const
SkRect
*
cullRect
const
SkPaint
*
paint
)
{
this
-
>
drawAtlas
(
atlas
xform
tex
NULL
count
SkXfermode
:
:
kDst_Mode
cullRect
paint
)
;
}
void
drawAtlas
(
const
sk_sp
<
SkImage
>
&
atlas
const
SkRSXform
xform
[
]
const
SkRect
tex
[
]
const
SkColor
colors
[
]
int
count
SkXfermode
:
:
Mode
mode
const
SkRect
*
cull
const
SkPaint
*
paint
)
{
this
-
>
drawAtlas
(
atlas
.
get
(
)
xform
tex
colors
count
mode
cull
paint
)
;
}
void
drawAtlas
(
const
sk_sp
<
SkImage
>
&
atlas
const
SkRSXform
xform
[
]
const
SkRect
tex
[
]
int
count
const
SkRect
*
cullRect
const
SkPaint
*
paint
)
{
this
-
>
drawAtlas
(
atlas
.
get
(
)
xform
tex
nullptr
count
SkXfermode
:
:
kDst_Mode
cullRect
paint
)
;
}
void
drawDrawable
(
SkDrawable
*
drawable
const
SkMatrix
*
=
NULL
)
;
void
drawDrawable
(
SkDrawable
*
SkScalar
x
SkScalar
y
)
;
void
drawAnnotation
(
const
SkRect
&
const
char
key
[
]
SkData
*
value
)
;
void
drawAnnotation
(
const
SkRect
&
rect
const
char
key
[
]
const
sk_sp
<
SkData
>
&
value
)
{
this
-
>
drawAnnotation
(
rect
key
value
.
get
(
)
)
;
}
#
ifdef
SK_INTERNAL
#
ifndef
SK_SUPPORT_LEGACY_DRAWFILTER
#
define
SK_SUPPORT_LEGACY_DRAWFILTER
#
endif
#
endif
#
ifdef
SK_SUPPORT_LEGACY_DRAWFILTER
SK_ATTR_EXTERNALLY_DEPRECATED
(
"
getDrawFilter
use
is
deprecated
"
)
SkDrawFilter
*
getDrawFilter
(
)
const
;
SK_ATTR_EXTERNALLY_DEPRECATED
(
"
setDrawFilter
use
is
deprecated
"
)
virtual
SkDrawFilter
*
setDrawFilter
(
SkDrawFilter
*
filter
)
;
#
endif
virtual
bool
isClipEmpty
(
)
const
;
virtual
bool
isClipRect
(
)
const
;
const
SkMatrix
&
getTotalMatrix
(
)
const
;
const
SkClipStack
*
getClipStack
(
)
const
{
return
fClipStack
;
}
typedef
SkCanvasClipVisitor
ClipVisitor
;
void
replayClips
(
ClipVisitor
*
)
const
;
GrDrawContext
*
internal_private_accessTopLayerDrawContext
(
)
;
static
void
Internal_Private_SetIgnoreSaveLayerBounds
(
bool
)
;
static
bool
Internal_Private_GetIgnoreSaveLayerBounds
(
)
;
static
void
Internal_Private_SetTreatSpriteAsBitmap
(
bool
)
;
static
bool
Internal_Private_GetTreatSpriteAsBitmap
(
)
;
void
legacy_drawImageRect
(
const
SkImage
*
image
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
=
kStrict_SrcRectConstraint
)
;
void
legacy_drawBitmapRect
(
const
SkBitmap
&
bitmap
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
=
kStrict_SrcRectConstraint
)
;
void
temporary_internal_describeTopLayer
(
SkMatrix
*
matrix
SkIRect
*
clip_bounds
)
;
protected
:
#
ifdef
SK_EXPERIMENTAL_SHADOWING
SkScalar
getZ
(
)
const
;
sk_sp
<
SkLights
>
fLights
;
#
endif
virtual
sk_sp
<
SkSurface
>
onNewSurface
(
const
SkImageInfo
&
const
SkSurfaceProps
&
)
;
virtual
bool
onPeekPixels
(
SkPixmap
*
)
;
virtual
bool
onAccessTopLayerPixels
(
SkPixmap
*
)
;
virtual
SkImageInfo
onImageInfo
(
)
const
;
virtual
bool
onGetProps
(
SkSurfaceProps
*
)
const
;
virtual
void
onFlush
(
)
;
enum
SaveLayerStrategy
{
kFullLayer_SaveLayerStrategy
kNoLayer_SaveLayerStrategy
}
;
virtual
void
willSave
(
)
{
}
virtual
SaveLayerStrategy
getSaveLayerStrategy
(
const
SaveLayerRec
&
)
{
return
kFullLayer_SaveLayerStrategy
;
}
virtual
void
willRestore
(
)
{
}
virtual
void
didRestore
(
)
{
}
virtual
void
didConcat
(
const
SkMatrix
&
)
{
}
virtual
void
didSetMatrix
(
const
SkMatrix
&
)
{
}
virtual
void
didTranslate
(
SkScalar
dx
SkScalar
dy
)
{
this
-
>
didConcat
(
SkMatrix
:
:
MakeTrans
(
dx
dy
)
)
;
}
#
ifdef
SK_EXPERIMENTAL_SHADOWING
virtual
void
didTranslateZ
(
SkScalar
)
{
}
#
endif
virtual
void
onDrawAnnotation
(
const
SkRect
&
const
char
key
[
]
SkData
*
value
)
;
virtual
void
onDrawDRRect
(
const
SkRRect
&
const
SkRRect
&
const
SkPaint
&
)
;
virtual
void
onDrawText
(
const
void
*
text
size_t
byteLength
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
;
virtual
void
onDrawPosText
(
const
void
*
text
size_t
byteLength
const
SkPoint
pos
[
]
const
SkPaint
&
paint
)
;
virtual
void
onDrawPosTextH
(
const
void
*
text
size_t
byteLength
const
SkScalar
xpos
[
]
SkScalar
constY
const
SkPaint
&
paint
)
;
virtual
void
onDrawTextOnPath
(
const
void
*
text
size_t
byteLength
const
SkPath
&
path
const
SkMatrix
*
matrix
const
SkPaint
&
paint
)
;
virtual
void
onDrawTextRSXform
(
const
void
*
text
size_t
byteLength
const
SkRSXform
[
]
const
SkRect
*
cullRect
const
SkPaint
&
paint
)
;
virtual
void
onDrawTextBlob
(
const
SkTextBlob
*
blob
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
;
virtual
void
onDrawPatch
(
const
SkPoint
cubics
[
12
]
const
SkColor
colors
[
4
]
const
SkPoint
texCoords
[
4
]
SkXfermode
*
xmode
const
SkPaint
&
paint
)
;
virtual
void
onDrawDrawable
(
SkDrawable
*
const
SkMatrix
*
)
;
virtual
void
onDrawPaint
(
const
SkPaint
&
)
;
virtual
void
onDrawRect
(
const
SkRect
&
const
SkPaint
&
)
;
virtual
void
onDrawRegion
(
const
SkRegion
&
region
const
SkPaint
&
paint
)
;
virtual
void
onDrawOval
(
const
SkRect
&
const
SkPaint
&
)
;
virtual
void
onDrawArc
(
const
SkRect
&
SkScalar
startAngle
SkScalar
sweepAngle
bool
useCenter
const
SkPaint
&
)
;
virtual
void
onDrawRRect
(
const
SkRRect
&
const
SkPaint
&
)
;
virtual
void
onDrawPoints
(
PointMode
size_t
count
const
SkPoint
pts
[
]
const
SkPaint
&
)
;
virtual
void
onDrawVertices
(
VertexMode
int
vertexCount
const
SkPoint
vertices
[
]
const
SkPoint
texs
[
]
const
SkColor
colors
[
]
SkXfermode
*
const
uint16_t
indices
[
]
int
indexCount
const
SkPaint
&
)
;
virtual
void
onDrawAtlas
(
const
SkImage
*
const
SkRSXform
[
]
const
SkRect
[
]
const
SkColor
[
]
int
count
SkXfermode
:
:
Mode
const
SkRect
*
cull
const
SkPaint
*
)
;
virtual
void
onDrawPath
(
const
SkPath
&
const
SkPaint
&
)
;
virtual
void
onDrawImage
(
const
SkImage
*
SkScalar
dx
SkScalar
dy
const
SkPaint
*
)
;
virtual
void
onDrawImageRect
(
const
SkImage
*
const
SkRect
*
const
SkRect
&
const
SkPaint
*
SrcRectConstraint
)
;
virtual
void
onDrawImageNine
(
const
SkImage
*
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
*
)
;
virtual
void
onDrawImageLattice
(
const
SkImage
*
const
Lattice
&
lattice
const
SkRect
&
dst
const
SkPaint
*
)
;
virtual
void
onDrawBitmap
(
const
SkBitmap
&
SkScalar
dx
SkScalar
dy
const
SkPaint
*
)
;
virtual
void
onDrawBitmapRect
(
const
SkBitmap
&
const
SkRect
*
const
SkRect
&
const
SkPaint
*
SrcRectConstraint
)
;
virtual
void
onDrawBitmapNine
(
const
SkBitmap
&
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
*
)
;
virtual
void
onDrawBitmapLattice
(
const
SkBitmap
&
const
Lattice
&
lattice
const
SkRect
&
dst
const
SkPaint
*
)
;
enum
ClipEdgeStyle
{
kHard_ClipEdgeStyle
kSoft_ClipEdgeStyle
}
;
virtual
void
onClipRect
(
const
SkRect
&
rect
ClipOp
ClipEdgeStyle
)
;
virtual
void
onClipRRect
(
const
SkRRect
&
rrect
ClipOp
ClipEdgeStyle
)
;
virtual
void
onClipPath
(
const
SkPath
&
path
ClipOp
ClipEdgeStyle
)
;
virtual
void
onClipRegion
(
const
SkRegion
&
deviceRgn
ClipOp
)
;
virtual
void
onDiscard
(
)
;
virtual
void
onDrawPicture
(
const
SkPicture
*
const
SkMatrix
*
const
SkPaint
*
)
;
#
ifdef
SK_EXPERIMENTAL_SHADOWING
virtual
void
onDrawShadowedPicture
(
const
SkPicture
*
const
SkMatrix
*
const
SkPaint
*
const
SkShadowParams
&
params
)
;
#
endif
virtual
SkCanvas
*
canvasForDrawIter
(
)
;
bool
clipRectBounds
(
const
SkRect
*
bounds
SaveLayerFlags
SkIRect
*
intersection
const
SkImageFilter
*
imageFilter
=
NULL
)
;
private
:
class
LayerIter
{
public
:
LayerIter
(
SkCanvas
*
)
;
~
LayerIter
(
)
;
bool
done
(
)
const
{
return
fDone
;
}
void
next
(
)
;
SkBaseDevice
*
device
(
)
const
;
const
SkMatrix
&
matrix
(
)
const
;
const
SkRasterClip
&
clip
(
)
const
;
const
SkPaint
&
paint
(
)
const
;
int
x
(
)
const
;
int
y
(
)
const
;
private
:
intptr_t
fStorage
[
32
]
;
class
SkDrawIter
*
fImpl
;
SkPaint
fDefaultPaint
;
bool
fDone
;
}
;
static
bool
BoundsAffectsClip
(
SaveLayerFlags
)
;
static
SaveLayerFlags
LegacySaveFlagsToSaveLayerFlags
(
uint32_t
legacySaveFlags
)
;
static
void
DrawDeviceWithFilter
(
SkBaseDevice
*
src
const
SkImageFilter
*
filter
SkBaseDevice
*
dst
const
SkMatrix
&
ctm
const
SkClipStack
*
clipStack
)
;
enum
ShaderOverrideOpacity
{
kNone_ShaderOverrideOpacity
kOpaque_ShaderOverrideOpacity
kNotOpaque_ShaderOverrideOpacity
}
;
void
predrawNotify
(
bool
willOverwritesEntireSurface
=
false
)
;
void
predrawNotify
(
const
SkRect
*
rect
const
SkPaint
*
paint
ShaderOverrideOpacity
)
;
void
predrawNotify
(
const
SkRect
*
rect
const
SkPaint
*
paint
bool
shaderOverrideIsOpaque
)
{
this
-
>
predrawNotify
(
rect
paint
shaderOverrideIsOpaque
?
kOpaque_ShaderOverrideOpacity
:
kNotOpaque_ShaderOverrideOpacity
)
;
}
class
MCRec
;
SkAutoTUnref
<
SkClipStack
>
fClipStack
;
SkDeque
fMCStack
;
MCRec
*
fMCRec
;
enum
{
kMCRecSize
=
128
kMCRecCount
=
32
kDeviceCMSize
=
176
}
;
intptr_t
fMCRecStorage
[
kMCRecSize
*
kMCRecCount
/
sizeof
(
intptr_t
)
]
;
intptr_t
fDeviceCMStorage
[
kDeviceCMSize
/
sizeof
(
intptr_t
)
]
;
const
SkSurfaceProps
fProps
;
int
fSaveCount
;
SkMetaData
*
fMetaData
;
SkSurface_Base
*
fSurfaceBase
;
SkSurface_Base
*
getSurfaceBase
(
)
const
{
return
fSurfaceBase
;
}
void
setSurfaceBase
(
SkSurface_Base
*
sb
)
{
fSurfaceBase
=
sb
;
}
friend
class
SkSurface_Base
;
friend
class
SkSurface_Gpu
;
bool
fDeviceCMDirty
;
void
updateDeviceCMCache
(
)
;
void
doSave
(
)
;
void
checkForDeferredSave
(
)
;
void
internalSetMatrix
(
const
SkMatrix
&
)
;
friend
class
SkDrawIter
;
friend
class
AutoDrawLooper
;
friend
class
SkLua
;
friend
class
SkDebugCanvas
;
friend
class
SkSurface_Raster
;
friend
class
SkRecorder
;
friend
class
SkLiteRecorder
;
friend
class
SkNoSaveLayerCanvas
;
friend
class
SkPictureImageFilter
;
friend
class
SkPictureRecord
;
friend
class
SkPicturePlayback
;
enum
InitFlags
{
kDefault_InitFlags
=
0
kConservativeRasterClip_InitFlag
=
1
<
<
0
}
;
SkCanvas
(
const
SkIRect
&
bounds
InitFlags
)
;
SkCanvas
(
SkBaseDevice
*
device
InitFlags
)
;
void
resetForNextPicture
(
const
SkIRect
&
bounds
)
;
friend
class
SkCanvasStateUtils
;
void
setupDevice
(
SkBaseDevice
*
)
;
SkBaseDevice
*
init
(
SkBaseDevice
*
InitFlags
)
;
SkIRect
getTopLayerBounds
(
)
const
;
void
internalDrawBitmapRect
(
const
SkBitmap
&
bitmap
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
)
;
void
internalDrawPaint
(
const
SkPaint
&
paint
)
;
void
internalSaveLayer
(
const
SaveLayerRec
&
SaveLayerStrategy
)
;
void
internalDrawDevice
(
SkBaseDevice
*
int
x
int
y
const
SkPaint
*
)
;
void
internalSave
(
)
;
void
internalRestore
(
)
;
static
void
DrawRect
(
const
SkDraw
&
draw
const
SkPaint
&
paint
const
SkRect
&
r
SkScalar
textSize
)
;
static
void
DrawTextDecorations
(
const
SkDraw
&
draw
const
SkPaint
&
paint
const
char
text
[
]
size_t
byteLength
SkScalar
x
SkScalar
y
)
;
const
SkRegion
&
internal_private_getTotalClip
(
)
const
;
bool
wouldOverwriteEntireSurface
(
const
SkRect
*
const
SkPaint
*
ShaderOverrideOpacity
)
const
;
bool
canDrawBitmapAsSprite
(
SkScalar
x
SkScalar
y
int
w
int
h
const
SkPaint
&
)
;
bool
fIsScaleTranslate
;
SkRect
fDeviceClipBounds
;
bool
fAllowSoftClip
;
bool
fAllowSimplifyClip
;
const
bool
fConservativeRasterClip
;
class
AutoValidateClip
:
:
:
SkNoncopyable
{
public
:
explicit
AutoValidateClip
(
SkCanvas
*
canvas
)
:
fCanvas
(
canvas
)
{
fCanvas
-
>
validateClip
(
)
;
}
~
AutoValidateClip
(
)
{
fCanvas
-
>
validateClip
(
)
;
}
private
:
const
SkCanvas
*
fCanvas
;
}
;
#
ifdef
SK_DEBUG
void
validateClip
(
)
const
;
#
else
void
validateClip
(
)
const
{
}
#
endif
typedef
SkRefCnt
INHERITED
;
}
;
class
SkAutoCanvasRestore
:
SkNoncopyable
{
public
:
SkAutoCanvasRestore
(
SkCanvas
*
canvas
bool
doSave
)
:
fCanvas
(
canvas
)
fSaveCount
(
0
)
{
if
(
fCanvas
)
{
fSaveCount
=
canvas
-
>
getSaveCount
(
)
;
if
(
doSave
)
{
canvas
-
>
save
(
)
;
}
}
}
~
SkAutoCanvasRestore
(
)
{
if
(
fCanvas
)
{
fCanvas
-
>
restoreToCount
(
fSaveCount
)
;
}
}
void
restore
(
)
{
if
(
fCanvas
)
{
fCanvas
-
>
restoreToCount
(
fSaveCount
)
;
fCanvas
=
NULL
;
}
}
private
:
SkCanvas
*
fCanvas
;
int
fSaveCount
;
}
;
#
define
SkAutoCanvasRestore
(
.
.
.
)
SK_REQUIRE_LOCAL_VAR
(
SkAutoCanvasRestore
)
class
SkCanvasClipVisitor
{
public
:
virtual
~
SkCanvasClipVisitor
(
)
;
virtual
void
clipRect
(
const
SkRect
&
SkCanvas
:
:
ClipOp
bool
antialias
)
=
0
;
virtual
void
clipRRect
(
const
SkRRect
&
SkCanvas
:
:
ClipOp
bool
antialias
)
=
0
;
virtual
void
clipPath
(
const
SkPath
&
SkCanvas
:
:
ClipOp
bool
antialias
)
=
0
;
}
;
#
endif
