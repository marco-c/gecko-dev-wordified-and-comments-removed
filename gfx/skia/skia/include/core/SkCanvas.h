#
ifndef
SkCanvas_DEFINED
#
define
SkCanvas_DEFINED
#
include
"
include
/
core
/
SkArc
.
h
"
#
include
"
include
/
core
/
SkBlendMode
.
h
"
#
include
"
include
/
core
/
SkClipOp
.
h
"
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkFontTypes
.
h
"
#
include
"
include
/
core
/
SkImageFilter
.
h
"
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
core
/
SkM44
.
h
"
#
include
"
include
/
core
/
SkMatrix
.
h
"
#
include
"
include
/
core
/
SkPaint
.
h
"
#
include
"
include
/
core
/
SkPoint
.
h
"
#
include
"
include
/
core
/
SkRasterHandleAllocator
.
h
"
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkSamplingOptions
.
h
"
#
include
"
include
/
core
/
SkScalar
.
h
"
#
include
"
include
/
core
/
SkSize
.
h
"
#
include
"
include
/
core
/
SkSpan
.
h
"
#
include
"
include
/
core
/
SkString
.
h
"
#
include
"
include
/
core
/
SkSurfaceProps
.
h
"
#
include
"
include
/
core
/
SkTileMode
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
private
/
base
/
SkCPUTypes
.
h
"
#
include
"
include
/
private
/
base
/
SkDeque
.
h
"
#
include
"
include
/
private
/
base
/
SkTArray
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
cstring
>
#
include
<
memory
>
#
include
<
optional
>
#
ifndef
SK_SUPPORT_LEGACY_GETTOTALMATRIX
#
define
SK_SUPPORT_LEGACY_GETTOTALMATRIX
#
endif
namespace
sktext
{
class
GlyphRunBuilder
;
class
GlyphRunList
;
}
class
AutoLayerForImageFilter
;
class
GrRecordingContext
;
class
SkBitmap
;
class
SkBlender
;
class
SkBlurMaskFilterImpl
;
class
SkColorSpace
;
class
SkData
;
class
SkDevice
;
class
SkDrawable
;
class
SkFont
;
class
SkImage
;
class
SkMesh
;
class
SkPaintFilterCanvas
;
class
SkPath
;
class
SkPicture
;
class
SkPixmap
;
class
SkRRect
;
class
SkRegion
;
class
SkShader
;
class
SkSpecialImage
;
class
SkSurface
;
class
SkSurface_Base
;
class
SkTextBlob
;
class
SkVertices
;
struct
SkDrawShadowRec
;
struct
SkRSXform
;
template
<
typename
E
>
class
SkEnumBitMask
;
namespace
skgpu
:
:
graphite
{
class
Recorder
;
}
namespace
sktext
:
:
gpu
{
class
Slug
;
}
namespace
SkRecords
{
class
Draw
;
}
namespace
skiatest
{
template
<
typename
Key
>
class
TestCanvas
;
}
class
SK_API
SkCanvas
{
public
:
static
std
:
:
unique_ptr
<
SkCanvas
>
MakeRasterDirect
(
const
SkImageInfo
&
info
void
*
pixels
size_t
rowBytes
const
SkSurfaceProps
*
props
=
nullptr
)
;
static
std
:
:
unique_ptr
<
SkCanvas
>
MakeRasterDirectN32
(
int
width
int
height
SkPMColor
*
pixels
size_t
rowBytes
)
{
return
MakeRasterDirect
(
SkImageInfo
:
:
MakeN32Premul
(
width
height
)
pixels
rowBytes
)
;
}
SkCanvas
(
)
;
SkCanvas
(
int
width
int
height
const
SkSurfaceProps
*
props
=
nullptr
)
;
explicit
SkCanvas
(
sk_sp
<
SkDevice
>
device
)
;
explicit
SkCanvas
(
const
SkBitmap
&
bitmap
)
;
#
ifdef
SK_BUILD_FOR_ANDROID_FRAMEWORK
enum
class
ColorBehavior
{
kLegacy
}
;
SkCanvas
(
const
SkBitmap
&
bitmap
ColorBehavior
behavior
)
;
#
endif
SkCanvas
(
const
SkBitmap
&
bitmap
const
SkSurfaceProps
&
props
)
;
virtual
~
SkCanvas
(
)
;
SkImageInfo
imageInfo
(
)
const
;
bool
getProps
(
SkSurfaceProps
*
props
)
const
;
SkSurfaceProps
getBaseProps
(
)
const
;
SkSurfaceProps
getTopProps
(
)
const
;
virtual
SkISize
getBaseLayerSize
(
)
const
;
sk_sp
<
SkSurface
>
makeSurface
(
const
SkImageInfo
&
info
const
SkSurfaceProps
*
props
=
nullptr
)
;
virtual
GrRecordingContext
*
recordingContext
(
)
const
;
virtual
skgpu
:
:
graphite
:
:
Recorder
*
recorder
(
)
const
;
SkSurface
*
getSurface
(
)
const
;
void
*
accessTopLayerPixels
(
SkImageInfo
*
info
size_t
*
rowBytes
SkIPoint
*
origin
=
nullptr
)
;
SkRasterHandleAllocator
:
:
Handle
accessTopRasterHandle
(
)
const
;
bool
peekPixels
(
SkPixmap
*
pixmap
)
;
bool
readPixels
(
const
SkImageInfo
&
dstInfo
void
*
dstPixels
size_t
dstRowBytes
int
srcX
int
srcY
)
;
bool
readPixels
(
const
SkPixmap
&
pixmap
int
srcX
int
srcY
)
;
bool
readPixels
(
const
SkBitmap
&
bitmap
int
srcX
int
srcY
)
;
bool
writePixels
(
const
SkImageInfo
&
info
const
void
*
pixels
size_t
rowBytes
int
x
int
y
)
;
bool
writePixels
(
const
SkBitmap
&
bitmap
int
x
int
y
)
;
int
save
(
)
;
int
saveLayer
(
const
SkRect
*
bounds
const
SkPaint
*
paint
)
;
int
saveLayer
(
const
SkRect
&
bounds
const
SkPaint
*
paint
)
{
return
this
-
>
saveLayer
(
&
bounds
paint
)
;
}
int
saveLayerAlphaf
(
const
SkRect
*
bounds
float
alpha
)
;
int
saveLayerAlpha
(
const
SkRect
*
bounds
U8CPU
alpha
)
{
return
this
-
>
saveLayerAlphaf
(
bounds
alpha
*
(
1
.
0f
/
255
)
)
;
}
enum
SaveLayerFlagsSet
{
kPreserveLCDText_SaveLayerFlag
=
1
<
<
1
kInitWithPrevious_SaveLayerFlag
=
1
<
<
2
kF16ColorType
=
1
<
<
4
}
;
using
SaveLayerFlags
=
uint32_t
;
using
FilterSpan
=
SkSpan
<
sk_sp
<
SkImageFilter
>
>
;
static
constexpr
int
kMaxFiltersPerLayer
=
16
;
struct
SaveLayerRec
{
SaveLayerRec
(
)
{
}
SaveLayerRec
(
const
SkRect
*
bounds
const
SkPaint
*
paint
SaveLayerFlags
saveLayerFlags
=
0
)
:
SaveLayerRec
(
bounds
paint
nullptr
nullptr
1
.
f
SkTileMode
:
:
kClamp
saveLayerFlags
{
}
)
{
}
SaveLayerRec
(
const
SkRect
*
bounds
const
SkPaint
*
paint
const
SkImageFilter
*
backdrop
SaveLayerFlags
saveLayerFlags
)
:
SaveLayerRec
(
bounds
paint
backdrop
nullptr
1
.
f
SkTileMode
:
:
kClamp
saveLayerFlags
{
}
)
{
}
SaveLayerRec
(
const
SkRect
*
bounds
const
SkPaint
*
paint
const
SkImageFilter
*
backdrop
const
SkColorSpace
*
colorSpace
SaveLayerFlags
saveLayerFlags
)
:
SaveLayerRec
(
bounds
paint
backdrop
colorSpace
1
.
f
SkTileMode
:
:
kClamp
saveLayerFlags
{
}
)
{
}
SaveLayerRec
(
const
SkRect
*
bounds
const
SkPaint
*
paint
const
SkImageFilter
*
backdrop
SkTileMode
backdropTileMode
const
SkColorSpace
*
colorSpace
SaveLayerFlags
saveLayerFlags
)
:
SaveLayerRec
(
bounds
paint
backdrop
colorSpace
1
.
f
backdropTileMode
saveLayerFlags
{
}
)
{
}
const
SkRect
*
fBounds
=
nullptr
;
const
SkPaint
*
fPaint
=
nullptr
;
FilterSpan
fFilters
=
{
}
;
const
SkImageFilter
*
fBackdrop
=
nullptr
;
SkTileMode
fBackdropTileMode
=
SkTileMode
:
:
kClamp
;
const
SkColorSpace
*
fColorSpace
=
nullptr
;
SaveLayerFlags
fSaveLayerFlags
=
0
;
private
:
friend
class
SkCanvas
;
friend
class
SkCanvasPriv
;
SaveLayerRec
(
const
SkRect
*
bounds
const
SkPaint
*
paint
const
SkImageFilter
*
backdrop
const
SkColorSpace
*
colorSpace
SkScalar
backdropScale
SkTileMode
backdropTileMode
SaveLayerFlags
saveLayerFlags
FilterSpan
filters
)
:
fBounds
(
bounds
)
fPaint
(
paint
)
fFilters
(
filters
)
fBackdrop
(
backdrop
)
fBackdropTileMode
(
backdropTileMode
)
fColorSpace
(
colorSpace
)
fSaveLayerFlags
(
saveLayerFlags
)
fExperimentalBackdropScale
(
backdropScale
)
{
SkASSERT
(
fFilters
.
empty
(
)
|
|
!
paint
|
|
!
paint
-
>
getImageFilter
(
)
)
;
SkASSERT
(
fFilters
.
size
(
)
<
=
kMaxFiltersPerLayer
)
;
}
SkScalar
fExperimentalBackdropScale
=
1
.
f
;
}
;
int
saveLayer
(
const
SaveLayerRec
&
layerRec
)
;
void
restore
(
)
;
int
getSaveCount
(
)
const
;
void
restoreToCount
(
int
saveCount
)
;
void
translate
(
SkScalar
dx
SkScalar
dy
)
;
void
scale
(
SkScalar
sx
SkScalar
sy
)
;
void
rotate
(
SkScalar
degrees
)
;
void
rotate
(
SkScalar
degrees
SkScalar
px
SkScalar
py
)
;
void
skew
(
SkScalar
sx
SkScalar
sy
)
;
void
concat
(
const
SkMatrix
&
matrix
)
;
void
concat
(
const
SkM44
&
)
;
void
setMatrix
(
const
SkM44
&
matrix
)
;
void
setMatrix
(
const
SkMatrix
&
matrix
)
;
void
resetMatrix
(
)
;
void
clipRect
(
const
SkRect
&
rect
SkClipOp
op
bool
doAntiAlias
)
;
void
clipRect
(
const
SkRect
&
rect
SkClipOp
op
)
{
this
-
>
clipRect
(
rect
op
false
)
;
}
void
clipRect
(
const
SkRect
&
rect
bool
doAntiAlias
=
false
)
{
this
-
>
clipRect
(
rect
SkClipOp
:
:
kIntersect
doAntiAlias
)
;
}
void
clipIRect
(
const
SkIRect
&
irect
SkClipOp
op
=
SkClipOp
:
:
kIntersect
)
{
this
-
>
clipRect
(
SkRect
:
:
Make
(
irect
)
op
false
)
;
}
void
androidFramework_setDeviceClipRestriction
(
const
SkIRect
&
rect
)
;
void
clipRRect
(
const
SkRRect
&
rrect
SkClipOp
op
bool
doAntiAlias
)
;
void
clipRRect
(
const
SkRRect
&
rrect
SkClipOp
op
)
{
this
-
>
clipRRect
(
rrect
op
false
)
;
}
void
clipRRect
(
const
SkRRect
&
rrect
bool
doAntiAlias
=
false
)
{
this
-
>
clipRRect
(
rrect
SkClipOp
:
:
kIntersect
doAntiAlias
)
;
}
void
clipPath
(
const
SkPath
&
path
SkClipOp
op
bool
doAntiAlias
)
;
void
clipPath
(
const
SkPath
&
path
SkClipOp
op
)
{
this
-
>
clipPath
(
path
op
false
)
;
}
void
clipPath
(
const
SkPath
&
path
bool
doAntiAlias
=
false
)
{
this
-
>
clipPath
(
path
SkClipOp
:
:
kIntersect
doAntiAlias
)
;
}
void
clipShader
(
sk_sp
<
SkShader
>
SkClipOp
=
SkClipOp
:
:
kIntersect
)
;
void
clipRegion
(
const
SkRegion
&
deviceRgn
SkClipOp
op
=
SkClipOp
:
:
kIntersect
)
;
bool
quickReject
(
const
SkRect
&
rect
)
const
;
bool
quickReject
(
const
SkPath
&
path
)
const
;
SkRect
getLocalClipBounds
(
)
const
;
bool
getLocalClipBounds
(
SkRect
*
bounds
)
const
{
*
bounds
=
this
-
>
getLocalClipBounds
(
)
;
return
!
bounds
-
>
isEmpty
(
)
;
}
SkIRect
getDeviceClipBounds
(
)
const
;
bool
getDeviceClipBounds
(
SkIRect
*
bounds
)
const
{
*
bounds
=
this
-
>
getDeviceClipBounds
(
)
;
return
!
bounds
-
>
isEmpty
(
)
;
}
void
drawColor
(
SkColor
color
SkBlendMode
mode
=
SkBlendMode
:
:
kSrcOver
)
{
this
-
>
drawColor
(
SkColor4f
:
:
FromColor
(
color
)
mode
)
;
}
void
drawColor
(
const
SkColor4f
&
color
SkBlendMode
mode
=
SkBlendMode
:
:
kSrcOver
)
;
void
clear
(
SkColor
color
)
{
this
-
>
clear
(
SkColor4f
:
:
FromColor
(
color
)
)
;
}
void
clear
(
const
SkColor4f
&
color
)
{
this
-
>
drawColor
(
color
SkBlendMode
:
:
kSrc
)
;
}
void
discard
(
)
{
this
-
>
onDiscard
(
)
;
}
void
drawPaint
(
const
SkPaint
&
paint
)
;
enum
PointMode
{
kPoints_PointMode
kLines_PointMode
kPolygon_PointMode
}
;
void
drawPoints
(
PointMode
mode
size_t
count
const
SkPoint
pts
[
]
const
SkPaint
&
paint
)
;
void
drawPoint
(
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
;
void
drawPoint
(
SkPoint
p
const
SkPaint
&
paint
)
{
this
-
>
drawPoint
(
p
.
x
(
)
p
.
y
(
)
paint
)
;
}
void
drawLine
(
SkScalar
x0
SkScalar
y0
SkScalar
x1
SkScalar
y1
const
SkPaint
&
paint
)
;
void
drawLine
(
SkPoint
p0
SkPoint
p1
const
SkPaint
&
paint
)
{
this
-
>
drawLine
(
p0
.
x
(
)
p0
.
y
(
)
p1
.
x
(
)
p1
.
y
(
)
paint
)
;
}
void
drawRect
(
const
SkRect
&
rect
const
SkPaint
&
paint
)
;
void
drawIRect
(
const
SkIRect
&
rect
const
SkPaint
&
paint
)
{
SkRect
r
;
r
.
set
(
rect
)
;
this
-
>
drawRect
(
r
paint
)
;
}
void
drawRegion
(
const
SkRegion
&
region
const
SkPaint
&
paint
)
;
void
drawOval
(
const
SkRect
&
oval
const
SkPaint
&
paint
)
;
void
drawRRect
(
const
SkRRect
&
rrect
const
SkPaint
&
paint
)
;
void
drawDRRect
(
const
SkRRect
&
outer
const
SkRRect
&
inner
const
SkPaint
&
paint
)
;
void
drawCircle
(
SkScalar
cx
SkScalar
cy
SkScalar
radius
const
SkPaint
&
paint
)
;
void
drawCircle
(
SkPoint
center
SkScalar
radius
const
SkPaint
&
paint
)
{
this
-
>
drawCircle
(
center
.
x
(
)
center
.
y
(
)
radius
paint
)
;
}
void
drawArc
(
const
SkRect
&
oval
SkScalar
startAngle
SkScalar
sweepAngle
bool
useCenter
const
SkPaint
&
paint
)
;
void
drawArc
(
const
SkArc
&
arc
const
SkPaint
&
paint
)
{
this
-
>
drawArc
(
arc
.
fOval
arc
.
fStartAngle
arc
.
fSweepAngle
arc
.
isWedge
(
)
paint
)
;
}
void
drawRoundRect
(
const
SkRect
&
rect
SkScalar
rx
SkScalar
ry
const
SkPaint
&
paint
)
;
void
drawPath
(
const
SkPath
&
path
const
SkPaint
&
paint
)
;
void
drawImage
(
const
SkImage
*
image
SkScalar
left
SkScalar
top
)
{
this
-
>
drawImage
(
image
left
top
SkSamplingOptions
(
)
nullptr
)
;
}
void
drawImage
(
const
sk_sp
<
SkImage
>
&
image
SkScalar
left
SkScalar
top
)
{
this
-
>
drawImage
(
image
.
get
(
)
left
top
SkSamplingOptions
(
)
nullptr
)
;
}
enum
SrcRectConstraint
{
kStrict_SrcRectConstraint
kFast_SrcRectConstraint
}
;
void
drawImage
(
const
SkImage
*
SkScalar
x
SkScalar
y
const
SkSamplingOptions
&
const
SkPaint
*
=
nullptr
)
;
void
drawImage
(
const
sk_sp
<
SkImage
>
&
image
SkScalar
x
SkScalar
y
const
SkSamplingOptions
&
sampling
const
SkPaint
*
paint
=
nullptr
)
{
this
-
>
drawImage
(
image
.
get
(
)
x
y
sampling
paint
)
;
}
void
drawImageRect
(
const
SkImage
*
const
SkRect
&
src
const
SkRect
&
dst
const
SkSamplingOptions
&
const
SkPaint
*
SrcRectConstraint
)
;
void
drawImageRect
(
const
SkImage
*
const
SkRect
&
dst
const
SkSamplingOptions
&
const
SkPaint
*
=
nullptr
)
;
void
drawImageRect
(
const
sk_sp
<
SkImage
>
&
image
const
SkRect
&
src
const
SkRect
&
dst
const
SkSamplingOptions
&
sampling
const
SkPaint
*
paint
SrcRectConstraint
constraint
)
{
this
-
>
drawImageRect
(
image
.
get
(
)
src
dst
sampling
paint
constraint
)
;
}
void
drawImageRect
(
const
sk_sp
<
SkImage
>
&
image
const
SkRect
&
dst
const
SkSamplingOptions
&
sampling
const
SkPaint
*
paint
=
nullptr
)
{
this
-
>
drawImageRect
(
image
.
get
(
)
dst
sampling
paint
)
;
}
void
drawImageNine
(
const
SkImage
*
image
const
SkIRect
&
center
const
SkRect
&
dst
SkFilterMode
filter
const
SkPaint
*
paint
=
nullptr
)
;
struct
Lattice
{
enum
RectType
:
uint8_t
{
kDefault
=
0
kTransparent
kFixedColor
}
;
const
int
*
fXDivs
;
const
int
*
fYDivs
;
const
RectType
*
fRectTypes
;
int
fXCount
;
int
fYCount
;
const
SkIRect
*
fBounds
;
const
SkColor
*
fColors
;
}
;
void
drawImageLattice
(
const
SkImage
*
image
const
Lattice
&
lattice
const
SkRect
&
dst
SkFilterMode
filter
const
SkPaint
*
paint
=
nullptr
)
;
void
drawImageLattice
(
const
SkImage
*
image
const
Lattice
&
lattice
const
SkRect
&
dst
)
{
this
-
>
drawImageLattice
(
image
lattice
dst
SkFilterMode
:
:
kNearest
nullptr
)
;
}
enum
QuadAAFlags
:
unsigned
{
kLeft_QuadAAFlag
=
0b0001
kTop_QuadAAFlag
=
0b0010
kRight_QuadAAFlag
=
0b0100
kBottom_QuadAAFlag
=
0b1000
kNone_QuadAAFlags
=
0b0000
kAll_QuadAAFlags
=
0b1111
}
;
struct
SK_API
ImageSetEntry
{
ImageSetEntry
(
sk_sp
<
const
SkImage
>
image
const
SkRect
&
srcRect
const
SkRect
&
dstRect
int
matrixIndex
float
alpha
unsigned
aaFlags
bool
hasClip
)
;
ImageSetEntry
(
sk_sp
<
const
SkImage
>
image
const
SkRect
&
srcRect
const
SkRect
&
dstRect
float
alpha
unsigned
aaFlags
)
;
ImageSetEntry
(
)
;
~
ImageSetEntry
(
)
;
ImageSetEntry
(
const
ImageSetEntry
&
)
;
ImageSetEntry
&
operator
=
(
const
ImageSetEntry
&
)
;
sk_sp
<
const
SkImage
>
fImage
;
SkRect
fSrcRect
;
SkRect
fDstRect
;
int
fMatrixIndex
=
-
1
;
float
fAlpha
=
1
.
f
;
unsigned
fAAFlags
=
kNone_QuadAAFlags
;
bool
fHasClip
=
false
;
}
;
void
experimental_DrawEdgeAAQuad
(
const
SkRect
&
rect
const
SkPoint
clip
[
4
]
QuadAAFlags
aaFlags
const
SkColor4f
&
color
SkBlendMode
mode
)
;
void
experimental_DrawEdgeAAQuad
(
const
SkRect
&
rect
const
SkPoint
clip
[
4
]
QuadAAFlags
aaFlags
SkColor
color
SkBlendMode
mode
)
{
this
-
>
experimental_DrawEdgeAAQuad
(
rect
clip
aaFlags
SkColor4f
:
:
FromColor
(
color
)
mode
)
;
}
void
experimental_DrawEdgeAAImageSet
(
const
ImageSetEntry
imageSet
[
]
int
cnt
const
SkPoint
dstClips
[
]
const
SkMatrix
preViewMatrices
[
]
const
SkSamplingOptions
&
const
SkPaint
*
paint
=
nullptr
SrcRectConstraint
constraint
=
kStrict_SrcRectConstraint
)
;
void
drawSimpleText
(
const
void
*
text
size_t
byteLength
SkTextEncoding
encoding
SkScalar
x
SkScalar
y
const
SkFont
&
font
const
SkPaint
&
paint
)
;
void
drawString
(
const
char
str
[
]
SkScalar
x
SkScalar
y
const
SkFont
&
font
const
SkPaint
&
paint
)
{
this
-
>
drawSimpleText
(
str
strlen
(
str
)
SkTextEncoding
:
:
kUTF8
x
y
font
paint
)
;
}
void
drawString
(
const
SkString
&
str
SkScalar
x
SkScalar
y
const
SkFont
&
font
const
SkPaint
&
paint
)
{
this
-
>
drawSimpleText
(
str
.
c_str
(
)
str
.
size
(
)
SkTextEncoding
:
:
kUTF8
x
y
font
paint
)
;
}
void
drawGlyphs
(
int
count
const
SkGlyphID
glyphs
[
]
const
SkPoint
positions
[
]
const
uint32_t
clusters
[
]
int
textByteCount
const
char
utf8text
[
]
SkPoint
origin
const
SkFont
&
font
const
SkPaint
&
paint
)
;
void
drawGlyphs
(
int
count
const
SkGlyphID
glyphs
[
]
const
SkPoint
positions
[
]
SkPoint
origin
const
SkFont
&
font
const
SkPaint
&
paint
)
;
void
drawGlyphs
(
int
count
const
SkGlyphID
glyphs
[
]
const
SkRSXform
xforms
[
]
SkPoint
origin
const
SkFont
&
font
const
SkPaint
&
paint
)
;
void
drawTextBlob
(
const
SkTextBlob
*
blob
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
;
void
drawTextBlob
(
const
sk_sp
<
SkTextBlob
>
&
blob
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
{
this
-
>
drawTextBlob
(
blob
.
get
(
)
x
y
paint
)
;
}
void
drawPicture
(
const
SkPicture
*
picture
)
{
this
-
>
drawPicture
(
picture
nullptr
nullptr
)
;
}
void
drawPicture
(
const
sk_sp
<
SkPicture
>
&
picture
)
{
this
-
>
drawPicture
(
picture
.
get
(
)
)
;
}
void
drawPicture
(
const
SkPicture
*
picture
const
SkMatrix
*
matrix
const
SkPaint
*
paint
)
;
void
drawPicture
(
const
sk_sp
<
SkPicture
>
&
picture
const
SkMatrix
*
matrix
const
SkPaint
*
paint
)
{
this
-
>
drawPicture
(
picture
.
get
(
)
matrix
paint
)
;
}
void
drawVertices
(
const
SkVertices
*
vertices
SkBlendMode
mode
const
SkPaint
&
paint
)
;
void
drawVertices
(
const
sk_sp
<
SkVertices
>
&
vertices
SkBlendMode
mode
const
SkPaint
&
paint
)
;
void
drawMesh
(
const
SkMesh
&
mesh
sk_sp
<
SkBlender
>
blender
const
SkPaint
&
paint
)
;
void
drawPatch
(
const
SkPoint
cubics
[
12
]
const
SkColor
colors
[
4
]
const
SkPoint
texCoords
[
4
]
SkBlendMode
mode
const
SkPaint
&
paint
)
;
void
drawAtlas
(
const
SkImage
*
atlas
const
SkRSXform
xform
[
]
const
SkRect
tex
[
]
const
SkColor
colors
[
]
int
count
SkBlendMode
mode
const
SkSamplingOptions
&
sampling
const
SkRect
*
cullRect
const
SkPaint
*
paint
)
;
void
drawDrawable
(
SkDrawable
*
drawable
const
SkMatrix
*
matrix
=
nullptr
)
;
void
drawDrawable
(
SkDrawable
*
drawable
SkScalar
x
SkScalar
y
)
;
void
drawAnnotation
(
const
SkRect
&
rect
const
char
key
[
]
SkData
*
value
)
;
void
drawAnnotation
(
const
SkRect
&
rect
const
char
key
[
]
const
sk_sp
<
SkData
>
&
value
)
{
this
-
>
drawAnnotation
(
rect
key
value
.
get
(
)
)
;
}
virtual
bool
isClipEmpty
(
)
const
;
virtual
bool
isClipRect
(
)
const
;
SkM44
getLocalToDevice
(
)
const
;
SkMatrix
getLocalToDeviceAs3x3
(
)
const
{
return
this
-
>
getLocalToDevice
(
)
.
asM33
(
)
;
}
#
ifdef
SK_SUPPORT_LEGACY_GETTOTALMATRIX
SkMatrix
getTotalMatrix
(
)
const
;
#
endif
void
temporary_internal_getRgnClip
(
SkRegion
*
region
)
;
void
private_draw_shadow_rec
(
const
SkPath
&
const
SkDrawShadowRec
&
)
;
protected
:
virtual
sk_sp
<
SkSurface
>
onNewSurface
(
const
SkImageInfo
&
info
const
SkSurfaceProps
&
props
)
;
virtual
bool
onPeekPixels
(
SkPixmap
*
pixmap
)
;
virtual
bool
onAccessTopLayerPixels
(
SkPixmap
*
pixmap
)
;
virtual
SkImageInfo
onImageInfo
(
)
const
;
virtual
bool
onGetProps
(
SkSurfaceProps
*
props
bool
top
)
const
;
enum
SaveLayerStrategy
{
kFullLayer_SaveLayerStrategy
kNoLayer_SaveLayerStrategy
}
;
virtual
void
willSave
(
)
{
}
virtual
SaveLayerStrategy
getSaveLayerStrategy
(
const
SaveLayerRec
&
)
{
return
kFullLayer_SaveLayerStrategy
;
}
virtual
bool
onDoSaveBehind
(
const
SkRect
*
)
{
return
true
;
}
virtual
void
willRestore
(
)
{
}
virtual
void
didRestore
(
)
{
}
virtual
void
didConcat44
(
const
SkM44
&
)
{
}
virtual
void
didSetM44
(
const
SkM44
&
)
{
}
virtual
void
didTranslate
(
SkScalar
SkScalar
)
{
}
virtual
void
didScale
(
SkScalar
SkScalar
)
{
}
virtual
void
onDrawPaint
(
const
SkPaint
&
paint
)
;
virtual
void
onDrawBehind
(
const
SkPaint
&
paint
)
;
virtual
void
onDrawRect
(
const
SkRect
&
rect
const
SkPaint
&
paint
)
;
virtual
void
onDrawRRect
(
const
SkRRect
&
rrect
const
SkPaint
&
paint
)
;
virtual
void
onDrawDRRect
(
const
SkRRect
&
outer
const
SkRRect
&
inner
const
SkPaint
&
paint
)
;
virtual
void
onDrawOval
(
const
SkRect
&
rect
const
SkPaint
&
paint
)
;
virtual
void
onDrawArc
(
const
SkRect
&
rect
SkScalar
startAngle
SkScalar
sweepAngle
bool
useCenter
const
SkPaint
&
paint
)
;
virtual
void
onDrawPath
(
const
SkPath
&
path
const
SkPaint
&
paint
)
;
virtual
void
onDrawRegion
(
const
SkRegion
&
region
const
SkPaint
&
paint
)
;
virtual
void
onDrawTextBlob
(
const
SkTextBlob
*
blob
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
;
virtual
void
onDrawGlyphRunList
(
const
sktext
:
:
GlyphRunList
&
glyphRunList
const
SkPaint
&
paint
)
;
virtual
void
onDrawPatch
(
const
SkPoint
cubics
[
12
]
const
SkColor
colors
[
4
]
const
SkPoint
texCoords
[
4
]
SkBlendMode
mode
const
SkPaint
&
paint
)
;
virtual
void
onDrawPoints
(
PointMode
mode
size_t
count
const
SkPoint
pts
[
]
const
SkPaint
&
paint
)
;
virtual
void
onDrawImage2
(
const
SkImage
*
SkScalar
dx
SkScalar
dy
const
SkSamplingOptions
&
const
SkPaint
*
)
;
virtual
void
onDrawImageRect2
(
const
SkImage
*
const
SkRect
&
src
const
SkRect
&
dst
const
SkSamplingOptions
&
const
SkPaint
*
SrcRectConstraint
)
;
virtual
void
onDrawImageLattice2
(
const
SkImage
*
const
Lattice
&
const
SkRect
&
dst
SkFilterMode
const
SkPaint
*
)
;
virtual
void
onDrawAtlas2
(
const
SkImage
*
const
SkRSXform
[
]
const
SkRect
src
[
]
const
SkColor
[
]
int
count
SkBlendMode
const
SkSamplingOptions
&
const
SkRect
*
cull
const
SkPaint
*
)
;
virtual
void
onDrawEdgeAAImageSet2
(
const
ImageSetEntry
imageSet
[
]
int
count
const
SkPoint
dstClips
[
]
const
SkMatrix
preViewMatrices
[
]
const
SkSamplingOptions
&
const
SkPaint
*
SrcRectConstraint
)
;
virtual
void
onDrawVerticesObject
(
const
SkVertices
*
vertices
SkBlendMode
mode
const
SkPaint
&
paint
)
;
virtual
void
onDrawMesh
(
const
SkMesh
&
sk_sp
<
SkBlender
>
const
SkPaint
&
)
;
virtual
void
onDrawAnnotation
(
const
SkRect
&
rect
const
char
key
[
]
SkData
*
value
)
;
virtual
void
onDrawShadowRec
(
const
SkPath
&
const
SkDrawShadowRec
&
)
;
virtual
void
onDrawDrawable
(
SkDrawable
*
drawable
const
SkMatrix
*
matrix
)
;
virtual
void
onDrawPicture
(
const
SkPicture
*
picture
const
SkMatrix
*
matrix
const
SkPaint
*
paint
)
;
virtual
void
onDrawEdgeAAQuad
(
const
SkRect
&
rect
const
SkPoint
clip
[
4
]
QuadAAFlags
aaFlags
const
SkColor4f
&
color
SkBlendMode
mode
)
;
enum
ClipEdgeStyle
{
kHard_ClipEdgeStyle
kSoft_ClipEdgeStyle
}
;
virtual
void
onClipRect
(
const
SkRect
&
rect
SkClipOp
op
ClipEdgeStyle
edgeStyle
)
;
virtual
void
onClipRRect
(
const
SkRRect
&
rrect
SkClipOp
op
ClipEdgeStyle
edgeStyle
)
;
virtual
void
onClipPath
(
const
SkPath
&
path
SkClipOp
op
ClipEdgeStyle
edgeStyle
)
;
virtual
void
onClipShader
(
sk_sp
<
SkShader
>
SkClipOp
)
;
virtual
void
onClipRegion
(
const
SkRegion
&
deviceRgn
SkClipOp
op
)
;
virtual
void
onResetClip
(
)
;
virtual
void
onDiscard
(
)
;
virtual
sk_sp
<
sktext
:
:
gpu
:
:
Slug
>
onConvertGlyphRunListToSlug
(
const
sktext
:
:
GlyphRunList
&
glyphRunList
const
SkPaint
&
paint
)
;
virtual
void
onDrawSlug
(
const
sktext
:
:
gpu
:
:
Slug
*
slug
const
SkPaint
&
paint
)
;
private
:
enum
class
PredrawFlags
:
unsigned
{
kNone
=
0
kOpaqueShaderOverride
=
1
kNonOpaqueShaderOverride
=
2
kCheckForOverwrite
=
4
kSkipMaskFilterAutoLayer
=
8
}
;
friend
constexpr
SkEnumBitMask
<
PredrawFlags
>
operator
|
(
PredrawFlags
PredrawFlags
)
;
friend
constexpr
SkEnumBitMask
<
PredrawFlags
>
operator
&
(
PredrawFlags
PredrawFlags
)
;
friend
constexpr
SkEnumBitMask
<
PredrawFlags
>
operator
^
(
PredrawFlags
PredrawFlags
)
;
friend
constexpr
SkEnumBitMask
<
PredrawFlags
>
operator
~
(
PredrawFlags
)
;
[
[
nodiscard
]
]
bool
predrawNotify
(
bool
willOverwritesEntireSurface
=
false
)
;
[
[
nodiscard
]
]
bool
predrawNotify
(
const
SkRect
*
const
SkPaint
*
SkEnumBitMask
<
PredrawFlags
>
)
;
std
:
:
optional
<
AutoLayerForImageFilter
>
aboutToDraw
(
const
SkPaint
&
paint
const
SkRect
*
rawBounds
SkEnumBitMask
<
PredrawFlags
>
flags
)
;
std
:
:
optional
<
AutoLayerForImageFilter
>
aboutToDraw
(
const
SkPaint
&
paint
const
SkRect
*
rawBounds
=
nullptr
)
;
SkDevice
*
rootDevice
(
)
const
{
SkASSERT
(
fRootDevice
)
;
return
fRootDevice
.
get
(
)
;
}
SkDevice
*
topDevice
(
)
const
;
struct
Layer
{
sk_sp
<
SkDevice
>
fDevice
;
skia_private
:
:
STArray
<
1
sk_sp
<
SkImageFilter
>
>
fImageFilters
;
SkPaint
fPaint
;
bool
fIsCoverage
;
bool
fDiscard
;
bool
fIncludesPadding
;
Layer
(
sk_sp
<
SkDevice
>
device
FilterSpan
imageFilters
const
SkPaint
&
paint
bool
isCoverage
bool
includesPadding
)
;
}
;
struct
BackImage
{
BackImage
(
sk_sp
<
SkSpecialImage
>
SkIPoint
)
;
BackImage
(
const
BackImage
&
)
;
BackImage
(
BackImage
&
&
)
;
BackImage
&
operator
=
(
const
BackImage
&
)
;
~
BackImage
(
)
;
sk_sp
<
SkSpecialImage
>
fImage
;
SkIPoint
fLoc
;
}
;
class
MCRec
{
public
:
std
:
:
unique_ptr
<
Layer
>
fLayer
;
SkDevice
*
fDevice
;
std
:
:
unique_ptr
<
BackImage
>
fBackImage
;
SkM44
fMatrix
;
int
fDeferredSaveCount
=
0
;
MCRec
(
SkDevice
*
device
)
;
MCRec
(
const
MCRec
*
prev
)
;
~
MCRec
(
)
;
void
newLayer
(
sk_sp
<
SkDevice
>
layerDevice
FilterSpan
filters
const
SkPaint
&
restorePaint
bool
layerIsCoverage
bool
includesPadding
)
;
void
reset
(
SkDevice
*
device
)
;
}
;
#
if
defined
(
SK_CANVAS_SAVE_RESTORE_PREALLOC_COUNT
)
static
constexpr
int
kMCRecCount
=
SK_CANVAS_SAVE_RESTORE_PREALLOC_COUNT
;
#
else
static
constexpr
int
kMCRecCount
=
32
;
#
endif
alignas
(
MCRec
)
std
:
:
byte
fMCRecStorage
[
sizeof
(
MCRec
)
*
kMCRecCount
]
;
SkDeque
fMCStack
;
MCRec
*
fMCRec
;
sk_sp
<
SkDevice
>
fRootDevice
;
const
SkSurfaceProps
fProps
;
int
fSaveCount
;
std
:
:
unique_ptr
<
SkRasterHandleAllocator
>
fAllocator
;
SkSurface_Base
*
fSurfaceBase
;
SkSurface_Base
*
getSurfaceBase
(
)
const
{
return
fSurfaceBase
;
}
void
setSurfaceBase
(
SkSurface_Base
*
sb
)
{
fSurfaceBase
=
sb
;
}
friend
class
SkSurface_Base
;
friend
class
SkSurface_Ganesh
;
SkIRect
fClipRestrictionRect
=
SkIRect
:
:
MakeEmpty
(
)
;
int
fClipRestrictionSaveCount
=
-
1
;
void
doSave
(
)
;
void
checkForDeferredSave
(
)
;
void
internalSetMatrix
(
const
SkM44
&
)
;
friend
class
SkAndroidFrameworkUtils
;
friend
class
SkCanvasPriv
;
friend
class
AutoLayerForImageFilter
;
friend
class
SkSurface_Raster
;
friend
class
SkNoDrawCanvas
;
friend
class
SkNWayCanvas
;
friend
class
SkPictureRecord
;
friend
class
SkOverdrawCanvas
;
friend
class
SkRasterHandleAllocator
;
friend
class
SkRecords
:
:
Draw
;
template
<
typename
Key
>
friend
class
skiatest
:
:
TestCanvas
;
protected
:
SkCanvas
(
const
SkIRect
&
bounds
)
;
private
:
SkCanvas
(
const
SkBitmap
&
std
:
:
unique_ptr
<
SkRasterHandleAllocator
>
SkRasterHandleAllocator
:
:
Handle
const
SkSurfaceProps
*
props
)
;
SkCanvas
(
SkCanvas
&
&
)
=
delete
;
SkCanvas
(
const
SkCanvas
&
)
=
delete
;
SkCanvas
&
operator
=
(
SkCanvas
&
&
)
=
delete
;
SkCanvas
&
operator
=
(
const
SkCanvas
&
)
=
delete
;
friend
class
sktext
:
:
gpu
:
:
Slug
;
friend
class
SkPicturePlayback
;
sk_sp
<
sktext
:
:
gpu
:
:
Slug
>
convertBlobToSlug
(
const
SkTextBlob
&
blob
SkPoint
origin
const
SkPaint
&
paint
)
;
void
drawSlug
(
const
sktext
:
:
gpu
:
:
Slug
*
slug
const
SkPaint
&
paint
)
;
int
only_axis_aligned_saveBehind
(
const
SkRect
*
subset
)
;
void
drawClippedToSaveBehind
(
const
SkPaint
&
)
;
void
resetForNextPicture
(
const
SkIRect
&
bounds
)
;
friend
class
SkCanvasStateUtils
;
void
init
(
sk_sp
<
SkDevice
>
)
;
bool
internalQuickReject
(
const
SkRect
&
bounds
const
SkPaint
&
paint
const
SkMatrix
*
matrix
=
nullptr
)
;
void
internalDrawPaint
(
const
SkPaint
&
paint
)
;
void
internalSaveLayer
(
const
SaveLayerRec
&
SaveLayerStrategy
bool
coverageOnly
=
false
)
;
void
internalSaveBehind
(
const
SkRect
*
)
;
void
internalConcat44
(
const
SkM44
&
)
;
void
internalSave
(
)
;
void
internalRestore
(
)
;
enum
class
DeviceCompatibleWithFilter
:
int
{
kUnknown
kYes
kYesWithPadding
}
;
void
internalDrawDeviceWithFilter
(
SkDevice
*
src
SkDevice
*
dst
FilterSpan
filters
const
SkPaint
&
paint
DeviceCompatibleWithFilter
compat
const
SkColorInfo
&
filterColorInfo
SkScalar
scaleFactor
=
1
.
f
SkTileMode
srcTileMode
=
SkTileMode
:
:
kDecal
bool
srcIsCoverageLayer
=
false
)
;
bool
wouldOverwriteEntireSurface
(
const
SkRect
*
const
SkPaint
*
SkEnumBitMask
<
PredrawFlags
>
)
const
;
bool
androidFramework_isClipAA
(
)
const
;
void
internal_private_resetClip
(
)
;
virtual
SkPaintFilterCanvas
*
internal_private_asPaintFilterCanvas
(
)
const
{
return
nullptr
;
}
SkRect
fQuickRejectBounds
;
SkRect
computeDeviceClipBounds
(
bool
outsetForAA
=
true
)
const
;
const
SkBlurMaskFilterImpl
*
canAttemptBlurredRRectDraw
(
const
SkPaint
&
)
const
;
std
:
:
optional
<
AutoLayerForImageFilter
>
attemptBlurredRRectDraw
(
const
SkRRect
&
const
SkBlurMaskFilterImpl
*
const
SkPaint
&
SkEnumBitMask
<
PredrawFlags
>
)
;
class
AutoUpdateQRBounds
;
void
validateClip
(
)
const
;
std
:
:
unique_ptr
<
sktext
:
:
GlyphRunBuilder
>
fScratchGlyphRunBuilder
;
}
;
class
SkAutoCanvasRestore
{
public
:
SkAutoCanvasRestore
(
SkCanvas
*
canvas
bool
doSave
)
:
fCanvas
(
canvas
)
fSaveCount
(
0
)
{
if
(
fCanvas
)
{
fSaveCount
=
canvas
-
>
getSaveCount
(
)
;
if
(
doSave
)
{
canvas
-
>
save
(
)
;
}
}
}
~
SkAutoCanvasRestore
(
)
{
if
(
fCanvas
)
{
fCanvas
-
>
restoreToCount
(
fSaveCount
)
;
}
}
void
restore
(
)
{
if
(
fCanvas
)
{
fCanvas
-
>
restoreToCount
(
fSaveCount
)
;
fCanvas
=
nullptr
;
}
}
private
:
SkCanvas
*
fCanvas
;
int
fSaveCount
;
SkAutoCanvasRestore
(
SkAutoCanvasRestore
&
&
)
=
delete
;
SkAutoCanvasRestore
(
const
SkAutoCanvasRestore
&
)
=
delete
;
SkAutoCanvasRestore
&
operator
=
(
SkAutoCanvasRestore
&
&
)
=
delete
;
SkAutoCanvasRestore
&
operator
=
(
const
SkAutoCanvasRestore
&
)
=
delete
;
}
;
#
endif
