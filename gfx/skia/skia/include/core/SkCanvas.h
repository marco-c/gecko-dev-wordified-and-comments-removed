#
ifndef
SkCanvas_DEFINED
#
define
SkCanvas_DEFINED
#
include
"
include
/
core
/
SkBlendMode
.
h
"
#
include
"
include
/
core
/
SkClipOp
.
h
"
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkDeque
.
h
"
#
include
"
include
/
core
/
SkFontTypes
.
h
"
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
core
/
SkMatrix
.
h
"
#
include
"
include
/
core
/
SkPaint
.
h
"
#
include
"
include
/
core
/
SkPoint
.
h
"
#
include
"
include
/
core
/
SkRasterHandleAllocator
.
h
"
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkScalar
.
h
"
#
include
"
include
/
core
/
SkSize
.
h
"
#
include
"
include
/
core
/
SkString
.
h
"
#
include
"
include
/
core
/
SkSurfaceProps
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
core
/
SkVertices
.
h
"
#
include
"
include
/
private
/
SkMacros
.
h
"
#
include
<
cstring
>
#
include
<
memory
>
class
GrContext
;
class
GrRenderTargetContext
;
class
SkBaseDevice
;
class
SkBitmap
;
class
SkData
;
class
SkDrawable
;
struct
SkDrawShadowRec
;
class
SkFont
;
class
SkGlyphRunBuilder
;
class
SkImage
;
class
SkImageFilter
;
class
SkPaintFilterCanvas
;
class
SkPath
;
class
SkPicture
;
class
SkPixmap
;
class
SkRegion
;
class
SkRRect
;
struct
SkRSXform
;
class
SkSurface
;
class
SkSurface_Base
;
class
SkTextBlob
;
class
SK_API
SkCanvas
{
enum
PrivateSaveLayerFlags
{
kDontClipToLayer_PrivateSaveLayerFlag
=
1U
<
<
31
}
;
public
:
static
std
:
:
unique_ptr
<
SkCanvas
>
MakeRasterDirect
(
const
SkImageInfo
&
info
void
*
pixels
size_t
rowBytes
const
SkSurfaceProps
*
props
=
nullptr
)
;
static
std
:
:
unique_ptr
<
SkCanvas
>
MakeRasterDirectN32
(
int
width
int
height
SkPMColor
*
pixels
size_t
rowBytes
)
{
return
MakeRasterDirect
(
SkImageInfo
:
:
MakeN32Premul
(
width
height
)
pixels
rowBytes
)
;
}
SkCanvas
(
)
;
SkCanvas
(
int
width
int
height
const
SkSurfaceProps
*
props
=
nullptr
)
;
explicit
SkCanvas
(
sk_sp
<
SkBaseDevice
>
device
)
;
explicit
SkCanvas
(
const
SkBitmap
&
bitmap
)
;
#
ifdef
SK_BUILD_FOR_ANDROID_FRAMEWORK
enum
class
ColorBehavior
{
kLegacy
}
;
SkCanvas
(
const
SkBitmap
&
bitmap
ColorBehavior
behavior
)
;
#
endif
SkCanvas
(
const
SkBitmap
&
bitmap
const
SkSurfaceProps
&
props
)
;
virtual
~
SkCanvas
(
)
;
SkImageInfo
imageInfo
(
)
const
;
bool
getProps
(
SkSurfaceProps
*
props
)
const
;
void
flush
(
)
;
virtual
SkISize
getBaseLayerSize
(
)
const
;
sk_sp
<
SkSurface
>
makeSurface
(
const
SkImageInfo
&
info
const
SkSurfaceProps
*
props
=
nullptr
)
;
virtual
GrContext
*
getGrContext
(
)
;
void
*
accessTopLayerPixels
(
SkImageInfo
*
info
size_t
*
rowBytes
SkIPoint
*
origin
=
nullptr
)
;
SkRasterHandleAllocator
:
:
Handle
accessTopRasterHandle
(
)
const
;
bool
peekPixels
(
SkPixmap
*
pixmap
)
;
bool
readPixels
(
const
SkImageInfo
&
dstInfo
void
*
dstPixels
size_t
dstRowBytes
int
srcX
int
srcY
)
;
bool
readPixels
(
const
SkPixmap
&
pixmap
int
srcX
int
srcY
)
;
bool
readPixels
(
const
SkBitmap
&
bitmap
int
srcX
int
srcY
)
;
bool
writePixels
(
const
SkImageInfo
&
info
const
void
*
pixels
size_t
rowBytes
int
x
int
y
)
;
bool
writePixels
(
const
SkBitmap
&
bitmap
int
x
int
y
)
;
int
save
(
)
;
int
saveLayer
(
const
SkRect
*
bounds
const
SkPaint
*
paint
)
;
int
saveLayer
(
const
SkRect
&
bounds
const
SkPaint
*
paint
)
{
return
this
-
>
saveLayer
(
&
bounds
paint
)
;
}
int
saveLayerAlpha
(
const
SkRect
*
bounds
U8CPU
alpha
)
;
enum
SaveLayerFlagsSet
{
kPreserveLCDText_SaveLayerFlag
=
1
<
<
1
kInitWithPrevious_SaveLayerFlag
=
1
<
<
2
kMaskAgainstCoverage_EXPERIMENTAL_DONT_USE_SaveLayerFlag
=
1
<
<
3
kF16ColorType
=
1
<
<
4
#
ifdef
SK_SUPPORT_LEGACY_CLIPTOLAYERFLAG
kDontClipToLayer_Legacy_SaveLayerFlag
=
kDontClipToLayer_PrivateSaveLayerFlag
#
endif
}
;
typedef
uint32_t
SaveLayerFlags
;
struct
SaveLayerRec
{
SaveLayerRec
(
)
{
}
SaveLayerRec
(
const
SkRect
*
bounds
const
SkPaint
*
paint
SaveLayerFlags
saveLayerFlags
=
0
)
:
fBounds
(
bounds
)
fPaint
(
paint
)
fSaveLayerFlags
(
saveLayerFlags
)
{
}
SaveLayerRec
(
const
SkRect
*
bounds
const
SkPaint
*
paint
const
SkImageFilter
*
backdrop
SaveLayerFlags
saveLayerFlags
)
:
fBounds
(
bounds
)
fPaint
(
paint
)
fBackdrop
(
backdrop
)
fSaveLayerFlags
(
saveLayerFlags
)
{
}
SaveLayerRec
(
const
SkRect
*
bounds
const
SkPaint
*
paint
const
SkImageFilter
*
backdrop
const
SkImage
*
clipMask
const
SkMatrix
*
clipMatrix
SaveLayerFlags
saveLayerFlags
)
:
fBounds
(
bounds
)
fPaint
(
paint
)
fBackdrop
(
backdrop
)
fClipMask
(
clipMask
)
fClipMatrix
(
clipMatrix
)
fSaveLayerFlags
(
saveLayerFlags
)
{
}
const
SkRect
*
fBounds
=
nullptr
;
const
SkPaint
*
fPaint
=
nullptr
;
const
SkImageFilter
*
fBackdrop
=
nullptr
;
const
SkImage
*
fClipMask
=
nullptr
;
const
SkMatrix
*
fClipMatrix
=
nullptr
;
SaveLayerFlags
fSaveLayerFlags
=
0
;
}
;
int
saveLayer
(
const
SaveLayerRec
&
layerRec
)
;
void
restore
(
)
;
int
getSaveCount
(
)
const
;
void
restoreToCount
(
int
saveCount
)
;
void
translate
(
SkScalar
dx
SkScalar
dy
)
;
void
scale
(
SkScalar
sx
SkScalar
sy
)
;
void
rotate
(
SkScalar
degrees
)
;
void
rotate
(
SkScalar
degrees
SkScalar
px
SkScalar
py
)
;
void
skew
(
SkScalar
sx
SkScalar
sy
)
;
void
concat
(
const
SkMatrix
&
matrix
)
;
void
setMatrix
(
const
SkMatrix
&
matrix
)
;
void
resetMatrix
(
)
;
void
clipRect
(
const
SkRect
&
rect
SkClipOp
op
bool
doAntiAlias
)
;
void
clipRect
(
const
SkRect
&
rect
SkClipOp
op
)
{
this
-
>
clipRect
(
rect
op
false
)
;
}
void
clipRect
(
const
SkRect
&
rect
bool
doAntiAlias
=
false
)
{
this
-
>
clipRect
(
rect
SkClipOp
:
:
kIntersect
doAntiAlias
)
;
}
void
androidFramework_setDeviceClipRestriction
(
const
SkIRect
&
rect
)
;
void
clipRRect
(
const
SkRRect
&
rrect
SkClipOp
op
bool
doAntiAlias
)
;
void
clipRRect
(
const
SkRRect
&
rrect
SkClipOp
op
)
{
this
-
>
clipRRect
(
rrect
op
false
)
;
}
void
clipRRect
(
const
SkRRect
&
rrect
bool
doAntiAlias
=
false
)
{
this
-
>
clipRRect
(
rrect
SkClipOp
:
:
kIntersect
doAntiAlias
)
;
}
void
clipPath
(
const
SkPath
&
path
SkClipOp
op
bool
doAntiAlias
)
;
void
clipPath
(
const
SkPath
&
path
SkClipOp
op
)
{
this
-
>
clipPath
(
path
op
false
)
;
}
void
clipPath
(
const
SkPath
&
path
bool
doAntiAlias
=
false
)
{
this
-
>
clipPath
(
path
SkClipOp
:
:
kIntersect
doAntiAlias
)
;
}
void
setAllowSimplifyClip
(
bool
allow
)
{
fAllowSimplifyClip
=
allow
;
}
void
clipRegion
(
const
SkRegion
&
deviceRgn
SkClipOp
op
=
SkClipOp
:
:
kIntersect
)
;
bool
quickReject
(
const
SkRect
&
rect
)
const
;
bool
quickReject
(
const
SkPath
&
path
)
const
;
SkRect
getLocalClipBounds
(
)
const
;
bool
getLocalClipBounds
(
SkRect
*
bounds
)
const
{
*
bounds
=
this
-
>
getLocalClipBounds
(
)
;
return
!
bounds
-
>
isEmpty
(
)
;
}
SkIRect
getDeviceClipBounds
(
)
const
;
bool
getDeviceClipBounds
(
SkIRect
*
bounds
)
const
{
*
bounds
=
this
-
>
getDeviceClipBounds
(
)
;
return
!
bounds
-
>
isEmpty
(
)
;
}
void
drawColor
(
SkColor
color
SkBlendMode
mode
=
SkBlendMode
:
:
kSrcOver
)
;
void
clear
(
SkColor
color
)
{
this
-
>
drawColor
(
color
SkBlendMode
:
:
kSrc
)
;
}
void
discard
(
)
{
this
-
>
onDiscard
(
)
;
}
void
drawPaint
(
const
SkPaint
&
paint
)
;
enum
PointMode
{
kPoints_PointMode
kLines_PointMode
kPolygon_PointMode
}
;
void
drawPoints
(
PointMode
mode
size_t
count
const
SkPoint
pts
[
]
const
SkPaint
&
paint
)
;
void
drawPoint
(
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
;
void
drawPoint
(
SkPoint
p
const
SkPaint
&
paint
)
{
this
-
>
drawPoint
(
p
.
x
(
)
p
.
y
(
)
paint
)
;
}
void
drawLine
(
SkScalar
x0
SkScalar
y0
SkScalar
x1
SkScalar
y1
const
SkPaint
&
paint
)
;
void
drawLine
(
SkPoint
p0
SkPoint
p1
const
SkPaint
&
paint
)
{
this
-
>
drawLine
(
p0
.
x
(
)
p0
.
y
(
)
p1
.
x
(
)
p1
.
y
(
)
paint
)
;
}
void
drawRect
(
const
SkRect
&
rect
const
SkPaint
&
paint
)
;
void
drawIRect
(
const
SkIRect
&
rect
const
SkPaint
&
paint
)
{
SkRect
r
;
r
.
set
(
rect
)
;
this
-
>
drawRect
(
r
paint
)
;
}
void
drawRegion
(
const
SkRegion
&
region
const
SkPaint
&
paint
)
;
void
drawOval
(
const
SkRect
&
oval
const
SkPaint
&
paint
)
;
void
drawRRect
(
const
SkRRect
&
rrect
const
SkPaint
&
paint
)
;
void
drawDRRect
(
const
SkRRect
&
outer
const
SkRRect
&
inner
const
SkPaint
&
paint
)
;
void
drawCircle
(
SkScalar
cx
SkScalar
cy
SkScalar
radius
const
SkPaint
&
paint
)
;
void
drawCircle
(
SkPoint
center
SkScalar
radius
const
SkPaint
&
paint
)
{
this
-
>
drawCircle
(
center
.
x
(
)
center
.
y
(
)
radius
paint
)
;
}
void
drawArc
(
const
SkRect
&
oval
SkScalar
startAngle
SkScalar
sweepAngle
bool
useCenter
const
SkPaint
&
paint
)
;
void
drawRoundRect
(
const
SkRect
&
rect
SkScalar
rx
SkScalar
ry
const
SkPaint
&
paint
)
;
void
drawPath
(
const
SkPath
&
path
const
SkPaint
&
paint
)
;
void
drawImage
(
const
SkImage
*
image
SkScalar
left
SkScalar
top
const
SkPaint
*
paint
=
nullptr
)
;
void
drawImage
(
const
sk_sp
<
SkImage
>
&
image
SkScalar
left
SkScalar
top
const
SkPaint
*
paint
=
nullptr
)
{
this
-
>
drawImage
(
image
.
get
(
)
left
top
paint
)
;
}
enum
SrcRectConstraint
{
kStrict_SrcRectConstraint
kFast_SrcRectConstraint
}
;
void
drawImageRect
(
const
SkImage
*
image
const
SkRect
&
src
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
=
kStrict_SrcRectConstraint
)
;
void
drawImageRect
(
const
SkImage
*
image
const
SkIRect
&
isrc
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
=
kStrict_SrcRectConstraint
)
;
void
drawImageRect
(
const
SkImage
*
image
const
SkRect
&
dst
const
SkPaint
*
paint
)
;
void
drawImageRect
(
const
sk_sp
<
SkImage
>
&
image
const
SkRect
&
src
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
=
kStrict_SrcRectConstraint
)
{
this
-
>
drawImageRect
(
image
.
get
(
)
src
dst
paint
constraint
)
;
}
void
drawImageRect
(
const
sk_sp
<
SkImage
>
&
image
const
SkIRect
&
isrc
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
=
kStrict_SrcRectConstraint
)
{
this
-
>
drawImageRect
(
image
.
get
(
)
isrc
dst
paint
constraint
)
;
}
void
drawImageRect
(
const
sk_sp
<
SkImage
>
&
image
const
SkRect
&
dst
const
SkPaint
*
paint
)
{
this
-
>
drawImageRect
(
image
.
get
(
)
dst
paint
)
;
}
void
drawImageNine
(
const
SkImage
*
image
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
*
paint
=
nullptr
)
;
void
drawImageNine
(
const
sk_sp
<
SkImage
>
&
image
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
*
paint
=
nullptr
)
{
this
-
>
drawImageNine
(
image
.
get
(
)
center
dst
paint
)
;
}
void
drawBitmap
(
const
SkBitmap
&
bitmap
SkScalar
left
SkScalar
top
const
SkPaint
*
paint
=
nullptr
)
;
void
drawBitmapRect
(
const
SkBitmap
&
bitmap
const
SkRect
&
src
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
=
kStrict_SrcRectConstraint
)
;
void
drawBitmapRect
(
const
SkBitmap
&
bitmap
const
SkIRect
&
isrc
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
=
kStrict_SrcRectConstraint
)
;
void
drawBitmapRect
(
const
SkBitmap
&
bitmap
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
=
kStrict_SrcRectConstraint
)
;
void
drawBitmapNine
(
const
SkBitmap
&
bitmap
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
*
paint
=
nullptr
)
;
struct
Lattice
{
enum
RectType
:
uint8_t
{
kDefault
=
0
kTransparent
kFixedColor
}
;
const
int
*
fXDivs
;
const
int
*
fYDivs
;
const
RectType
*
fRectTypes
;
int
fXCount
;
int
fYCount
;
const
SkIRect
*
fBounds
;
const
SkColor
*
fColors
;
}
;
void
drawBitmapLattice
(
const
SkBitmap
&
bitmap
const
Lattice
&
lattice
const
SkRect
&
dst
const
SkPaint
*
paint
=
nullptr
)
;
void
drawImageLattice
(
const
SkImage
*
image
const
Lattice
&
lattice
const
SkRect
&
dst
const
SkPaint
*
paint
=
nullptr
)
;
enum
QuadAAFlags
:
unsigned
{
kLeft_QuadAAFlag
=
0b0001
kTop_QuadAAFlag
=
0b0010
kRight_QuadAAFlag
=
0b0100
kBottom_QuadAAFlag
=
0b1000
kNone_QuadAAFlags
=
0b0000
kAll_QuadAAFlags
=
0b1111
}
;
struct
SK_API
ImageSetEntry
{
ImageSetEntry
(
sk_sp
<
const
SkImage
>
image
const
SkRect
&
srcRect
const
SkRect
&
dstRect
int
matrixIndex
float
alpha
unsigned
aaFlags
bool
hasClip
)
;
ImageSetEntry
(
sk_sp
<
const
SkImage
>
image
const
SkRect
&
srcRect
const
SkRect
&
dstRect
float
alpha
unsigned
aaFlags
)
;
ImageSetEntry
(
)
;
~
ImageSetEntry
(
)
;
ImageSetEntry
(
const
ImageSetEntry
&
)
;
ImageSetEntry
&
operator
=
(
const
ImageSetEntry
&
)
;
sk_sp
<
const
SkImage
>
fImage
;
SkRect
fSrcRect
;
SkRect
fDstRect
;
int
fMatrixIndex
=
-
1
;
float
fAlpha
=
1
.
f
;
unsigned
fAAFlags
=
kNone_QuadAAFlags
;
bool
fHasClip
=
false
;
}
;
void
experimental_DrawEdgeAAQuad
(
const
SkRect
&
rect
const
SkPoint
clip
[
4
]
QuadAAFlags
aaFlags
const
SkColor4f
&
color
SkBlendMode
mode
)
;
void
experimental_DrawEdgeAAQuad
(
const
SkRect
&
rect
const
SkPoint
clip
[
4
]
QuadAAFlags
aaFlags
SkColor
color
SkBlendMode
mode
)
{
this
-
>
experimental_DrawEdgeAAQuad
(
rect
clip
aaFlags
SkColor4f
:
:
FromColor
(
color
)
mode
)
;
}
void
experimental_DrawEdgeAAImageSet
(
const
ImageSetEntry
imageSet
[
]
int
cnt
const
SkPoint
dstClips
[
]
const
SkMatrix
preViewMatrices
[
]
const
SkPaint
*
paint
=
nullptr
SrcRectConstraint
constraint
=
kStrict_SrcRectConstraint
)
;
void
drawSimpleText
(
const
void
*
text
size_t
byteLength
SkTextEncoding
encoding
SkScalar
x
SkScalar
y
const
SkFont
&
font
const
SkPaint
&
paint
)
;
void
drawString
(
const
char
str
[
]
SkScalar
x
SkScalar
y
const
SkFont
&
font
const
SkPaint
&
paint
)
{
this
-
>
drawSimpleText
(
str
strlen
(
str
)
SkTextEncoding
:
:
kUTF8
x
y
font
paint
)
;
}
void
drawString
(
const
SkString
&
str
SkScalar
x
SkScalar
y
const
SkFont
&
font
const
SkPaint
&
paint
)
{
this
-
>
drawSimpleText
(
str
.
c_str
(
)
str
.
size
(
)
SkTextEncoding
:
:
kUTF8
x
y
font
paint
)
;
}
void
drawTextBlob
(
const
SkTextBlob
*
blob
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
;
void
drawTextBlob
(
const
sk_sp
<
SkTextBlob
>
&
blob
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
{
this
-
>
drawTextBlob
(
blob
.
get
(
)
x
y
paint
)
;
}
void
drawPicture
(
const
SkPicture
*
picture
)
{
this
-
>
drawPicture
(
picture
nullptr
nullptr
)
;
}
void
drawPicture
(
const
sk_sp
<
SkPicture
>
&
picture
)
{
this
-
>
drawPicture
(
picture
.
get
(
)
)
;
}
void
drawPicture
(
const
SkPicture
*
picture
const
SkMatrix
*
matrix
const
SkPaint
*
paint
)
;
void
drawPicture
(
const
sk_sp
<
SkPicture
>
&
picture
const
SkMatrix
*
matrix
const
SkPaint
*
paint
)
{
this
-
>
drawPicture
(
picture
.
get
(
)
matrix
paint
)
;
}
void
drawVertices
(
const
SkVertices
*
vertices
SkBlendMode
mode
const
SkPaint
&
paint
)
;
void
drawVertices
(
const
sk_sp
<
SkVertices
>
&
vertices
SkBlendMode
mode
const
SkPaint
&
paint
)
;
void
drawVertices
(
const
SkVertices
*
vertices
const
SkVertices
:
:
Bone
bones
[
]
int
boneCount
SkBlendMode
mode
const
SkPaint
&
paint
)
;
void
drawVertices
(
const
sk_sp
<
SkVertices
>
&
vertices
const
SkVertices
:
:
Bone
bones
[
]
int
boneCount
SkBlendMode
mode
const
SkPaint
&
paint
)
;
void
drawPatch
(
const
SkPoint
cubics
[
12
]
const
SkColor
colors
[
4
]
const
SkPoint
texCoords
[
4
]
SkBlendMode
mode
const
SkPaint
&
paint
)
;
void
drawPatch
(
const
SkPoint
cubics
[
12
]
const
SkColor
colors
[
4
]
const
SkPoint
texCoords
[
4
]
const
SkPaint
&
paint
)
{
this
-
>
drawPatch
(
cubics
colors
texCoords
SkBlendMode
:
:
kModulate
paint
)
;
}
void
drawAtlas
(
const
SkImage
*
atlas
const
SkRSXform
xform
[
]
const
SkRect
tex
[
]
const
SkColor
colors
[
]
int
count
SkBlendMode
mode
const
SkRect
*
cullRect
const
SkPaint
*
paint
)
;
void
drawAtlas
(
const
sk_sp
<
SkImage
>
&
atlas
const
SkRSXform
xform
[
]
const
SkRect
tex
[
]
const
SkColor
colors
[
]
int
count
SkBlendMode
mode
const
SkRect
*
cullRect
const
SkPaint
*
paint
)
{
this
-
>
drawAtlas
(
atlas
.
get
(
)
xform
tex
colors
count
mode
cullRect
paint
)
;
}
void
drawAtlas
(
const
SkImage
*
atlas
const
SkRSXform
xform
[
]
const
SkRect
tex
[
]
int
count
const
SkRect
*
cullRect
const
SkPaint
*
paint
)
{
this
-
>
drawAtlas
(
atlas
xform
tex
nullptr
count
SkBlendMode
:
:
kDst
cullRect
paint
)
;
}
void
drawAtlas
(
const
sk_sp
<
SkImage
>
&
atlas
const
SkRSXform
xform
[
]
const
SkRect
tex
[
]
int
count
const
SkRect
*
cullRect
const
SkPaint
*
paint
)
{
this
-
>
drawAtlas
(
atlas
.
get
(
)
xform
tex
nullptr
count
SkBlendMode
:
:
kDst
cullRect
paint
)
;
}
void
drawDrawable
(
SkDrawable
*
drawable
const
SkMatrix
*
matrix
=
nullptr
)
;
void
drawDrawable
(
SkDrawable
*
drawable
SkScalar
x
SkScalar
y
)
;
void
drawAnnotation
(
const
SkRect
&
rect
const
char
key
[
]
SkData
*
value
)
;
void
drawAnnotation
(
const
SkRect
&
rect
const
char
key
[
]
const
sk_sp
<
SkData
>
&
value
)
{
this
-
>
drawAnnotation
(
rect
key
value
.
get
(
)
)
;
}
virtual
bool
isClipEmpty
(
)
const
;
virtual
bool
isClipRect
(
)
const
;
const
SkMatrix
&
getTotalMatrix
(
)
const
;
virtual
GrRenderTargetContext
*
internal_private_accessTopLayerRenderTargetContext
(
)
;
SkIRect
internal_private_getTopLayerBounds
(
)
const
{
return
getTopLayerBounds
(
)
;
}
void
legacy_drawImageRect
(
const
SkImage
*
image
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
=
kStrict_SrcRectConstraint
)
;
void
legacy_drawBitmapRect
(
const
SkBitmap
&
bitmap
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
=
kStrict_SrcRectConstraint
)
;
void
temporary_internal_getRgnClip
(
SkRegion
*
region
)
;
void
private_draw_shadow_rec
(
const
SkPath
&
const
SkDrawShadowRec
&
)
;
protected
:
virtual
sk_sp
<
SkSurface
>
onNewSurface
(
const
SkImageInfo
&
info
const
SkSurfaceProps
&
props
)
;
virtual
bool
onPeekPixels
(
SkPixmap
*
pixmap
)
;
virtual
bool
onAccessTopLayerPixels
(
SkPixmap
*
pixmap
)
;
virtual
SkImageInfo
onImageInfo
(
)
const
;
virtual
bool
onGetProps
(
SkSurfaceProps
*
props
)
const
;
virtual
void
onFlush
(
)
;
enum
SaveLayerStrategy
{
kFullLayer_SaveLayerStrategy
kNoLayer_SaveLayerStrategy
}
;
virtual
void
willSave
(
)
{
}
virtual
SaveLayerStrategy
getSaveLayerStrategy
(
const
SaveLayerRec
&
)
{
return
kFullLayer_SaveLayerStrategy
;
}
virtual
bool
onDoSaveBehind
(
const
SkRect
*
)
{
return
true
;
}
virtual
void
willRestore
(
)
{
}
virtual
void
didRestore
(
)
{
}
virtual
void
didConcat
(
const
SkMatrix
&
)
{
}
virtual
void
didSetMatrix
(
const
SkMatrix
&
)
{
}
virtual
void
didTranslate
(
SkScalar
dx
SkScalar
dy
)
{
this
-
>
didConcat
(
SkMatrix
:
:
MakeTrans
(
dx
dy
)
)
;
}
virtual
void
onDrawPaint
(
const
SkPaint
&
paint
)
;
virtual
void
onDrawBehind
(
const
SkPaint
&
paint
)
;
virtual
void
onDrawRect
(
const
SkRect
&
rect
const
SkPaint
&
paint
)
;
virtual
void
onDrawRRect
(
const
SkRRect
&
rrect
const
SkPaint
&
paint
)
;
virtual
void
onDrawDRRect
(
const
SkRRect
&
outer
const
SkRRect
&
inner
const
SkPaint
&
paint
)
;
virtual
void
onDrawOval
(
const
SkRect
&
rect
const
SkPaint
&
paint
)
;
virtual
void
onDrawArc
(
const
SkRect
&
rect
SkScalar
startAngle
SkScalar
sweepAngle
bool
useCenter
const
SkPaint
&
paint
)
;
virtual
void
onDrawPath
(
const
SkPath
&
path
const
SkPaint
&
paint
)
;
virtual
void
onDrawRegion
(
const
SkRegion
&
region
const
SkPaint
&
paint
)
;
virtual
void
onDrawTextBlob
(
const
SkTextBlob
*
blob
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
;
virtual
void
onDrawPatch
(
const
SkPoint
cubics
[
12
]
const
SkColor
colors
[
4
]
const
SkPoint
texCoords
[
4
]
SkBlendMode
mode
const
SkPaint
&
paint
)
;
virtual
void
onDrawPoints
(
PointMode
mode
size_t
count
const
SkPoint
pts
[
]
const
SkPaint
&
paint
)
;
virtual
void
onDrawVerticesObject
(
const
SkVertices
*
vertices
SkBlendMode
mode
const
SkPaint
&
paint
)
{
this
-
>
onDrawVerticesObject
(
vertices
nullptr
0
mode
paint
)
;
}
virtual
void
onDrawVerticesObject
(
const
SkVertices
*
vertices
const
SkVertices
:
:
Bone
bones
[
]
int
boneCount
SkBlendMode
mode
const
SkPaint
&
paint
)
;
virtual
void
onDrawImage
(
const
SkImage
*
image
SkScalar
dx
SkScalar
dy
const
SkPaint
*
paint
)
;
virtual
void
onDrawImageRect
(
const
SkImage
*
image
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
)
;
virtual
void
onDrawImageNine
(
const
SkImage
*
image
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
*
paint
)
;
virtual
void
onDrawImageLattice
(
const
SkImage
*
image
const
Lattice
&
lattice
const
SkRect
&
dst
const
SkPaint
*
paint
)
;
virtual
void
onDrawBitmap
(
const
SkBitmap
&
bitmap
SkScalar
dx
SkScalar
dy
const
SkPaint
*
paint
)
;
virtual
void
onDrawBitmapRect
(
const
SkBitmap
&
bitmap
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
constraint
)
;
virtual
void
onDrawBitmapNine
(
const
SkBitmap
&
bitmap
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
*
paint
)
;
virtual
void
onDrawBitmapLattice
(
const
SkBitmap
&
bitmap
const
Lattice
&
lattice
const
SkRect
&
dst
const
SkPaint
*
paint
)
;
virtual
void
onDrawAtlas
(
const
SkImage
*
atlas
const
SkRSXform
xform
[
]
const
SkRect
rect
[
]
const
SkColor
colors
[
]
int
count
SkBlendMode
mode
const
SkRect
*
cull
const
SkPaint
*
paint
)
;
virtual
void
onDrawAnnotation
(
const
SkRect
&
rect
const
char
key
[
]
SkData
*
value
)
;
virtual
void
onDrawShadowRec
(
const
SkPath
&
const
SkDrawShadowRec
&
)
;
virtual
void
onDrawDrawable
(
SkDrawable
*
drawable
const
SkMatrix
*
matrix
)
;
virtual
void
onDrawPicture
(
const
SkPicture
*
picture
const
SkMatrix
*
matrix
const
SkPaint
*
paint
)
;
virtual
void
onDrawEdgeAAQuad
(
const
SkRect
&
rect
const
SkPoint
clip
[
4
]
QuadAAFlags
aaFlags
const
SkColor4f
&
color
SkBlendMode
mode
)
;
virtual
void
onDrawEdgeAAImageSet
(
const
ImageSetEntry
imageSet
[
]
int
count
const
SkPoint
dstClips
[
]
const
SkMatrix
preViewMatrices
[
]
const
SkPaint
*
paint
SrcRectConstraint
constraint
)
;
enum
ClipEdgeStyle
{
kHard_ClipEdgeStyle
kSoft_ClipEdgeStyle
}
;
virtual
void
onClipRect
(
const
SkRect
&
rect
SkClipOp
op
ClipEdgeStyle
edgeStyle
)
;
virtual
void
onClipRRect
(
const
SkRRect
&
rrect
SkClipOp
op
ClipEdgeStyle
edgeStyle
)
;
virtual
void
onClipPath
(
const
SkPath
&
path
SkClipOp
op
ClipEdgeStyle
edgeStyle
)
;
virtual
void
onClipRegion
(
const
SkRegion
&
deviceRgn
SkClipOp
op
)
;
virtual
void
onDiscard
(
)
;
bool
clipRectBounds
(
const
SkRect
*
bounds
SaveLayerFlags
flags
SkIRect
*
intersection
const
SkImageFilter
*
imageFilter
=
nullptr
)
;
SkBaseDevice
*
getTopDevice
(
)
const
;
private
:
class
LayerIter
{
public
:
LayerIter
(
SkCanvas
*
)
;
~
LayerIter
(
)
;
bool
done
(
)
const
{
return
fDone
;
}
void
next
(
)
;
SkBaseDevice
*
device
(
)
const
;
const
SkMatrix
&
matrix
(
)
const
;
SkIRect
clipBounds
(
)
const
;
const
SkPaint
&
paint
(
)
const
;
int
x
(
)
const
;
int
y
(
)
const
;
private
:
intptr_t
fStorage
[
32
]
;
class
SkDrawIter
*
fImpl
;
SkPaint
fDefaultPaint
;
bool
fDone
;
}
;
static
bool
BoundsAffectsClip
(
SaveLayerFlags
)
;
static
void
DrawDeviceWithFilter
(
SkBaseDevice
*
src
const
SkImageFilter
*
filter
SkBaseDevice
*
dst
const
SkIPoint
&
dstOrigin
const
SkMatrix
&
ctm
)
;
enum
ShaderOverrideOpacity
{
kNone_ShaderOverrideOpacity
kOpaque_ShaderOverrideOpacity
kNotOpaque_ShaderOverrideOpacity
}
;
void
predrawNotify
(
bool
willOverwritesEntireSurface
=
false
)
;
void
predrawNotify
(
const
SkRect
*
rect
const
SkPaint
*
paint
ShaderOverrideOpacity
)
;
void
predrawNotify
(
const
SkRect
*
rect
const
SkPaint
*
paint
bool
shaderOverrideIsOpaque
)
{
this
-
>
predrawNotify
(
rect
paint
shaderOverrideIsOpaque
?
kOpaque_ShaderOverrideOpacity
:
kNotOpaque_ShaderOverrideOpacity
)
;
}
SkBaseDevice
*
getDevice
(
)
const
;
class
MCRec
;
SkDeque
fMCStack
;
MCRec
*
fMCRec
;
static
constexpr
int
kMCRecSize
=
128
;
static
constexpr
int
kMCRecCount
=
32
;
static
constexpr
int
kDeviceCMSize
=
224
;
intptr_t
fMCRecStorage
[
kMCRecSize
*
kMCRecCount
/
sizeof
(
intptr_t
)
]
;
intptr_t
fDeviceCMStorage
[
kDeviceCMSize
/
sizeof
(
intptr_t
)
]
;
const
SkSurfaceProps
fProps
;
int
fSaveCount
;
std
:
:
unique_ptr
<
SkRasterHandleAllocator
>
fAllocator
;
SkSurface_Base
*
fSurfaceBase
;
SkSurface_Base
*
getSurfaceBase
(
)
const
{
return
fSurfaceBase
;
}
void
setSurfaceBase
(
SkSurface_Base
*
sb
)
{
fSurfaceBase
=
sb
;
}
friend
class
SkSurface_Base
;
friend
class
SkSurface_Gpu
;
SkIRect
fClipRestrictionRect
=
SkIRect
:
:
MakeEmpty
(
)
;
void
doSave
(
)
;
void
checkForDeferredSave
(
)
;
void
internalSetMatrix
(
const
SkMatrix
&
)
;
friend
class
SkAndroidFrameworkUtils
;
friend
class
SkCanvasPriv
;
friend
class
SkDrawIter
;
friend
class
AutoLayerForImageFilter
;
friend
class
DebugCanvas
;
friend
class
SkSurface_Raster
;
friend
class
SkNoDrawCanvas
;
friend
class
SkPictureRecord
;
friend
class
SkOverdrawCanvas
;
friend
class
SkRasterHandleAllocator
;
protected
:
SkCanvas
(
const
SkIRect
&
bounds
)
;
private
:
SkCanvas
(
const
SkBitmap
&
std
:
:
unique_ptr
<
SkRasterHandleAllocator
>
SkRasterHandleAllocator
:
:
Handle
)
;
SkCanvas
(
SkCanvas
&
&
)
=
delete
;
SkCanvas
(
const
SkCanvas
&
)
=
delete
;
SkCanvas
&
operator
=
(
SkCanvas
&
&
)
=
delete
;
SkCanvas
&
operator
=
(
const
SkCanvas
&
)
=
delete
;
int
only_axis_aligned_saveBehind
(
const
SkRect
*
subset
)
;
void
drawClippedToSaveBehind
(
const
SkPaint
&
)
;
void
resetForNextPicture
(
const
SkIRect
&
bounds
)
;
friend
class
SkCanvasStateUtils
;
void
setupDevice
(
SkBaseDevice
*
)
;
void
init
(
sk_sp
<
SkBaseDevice
>
)
;
SkIRect
getTopLayerBounds
(
)
const
;
void
internalDrawBitmapRect
(
const
SkBitmap
&
bitmap
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
*
paint
SrcRectConstraint
)
;
void
internalDrawPaint
(
const
SkPaint
&
paint
)
;
void
internalSaveLayer
(
const
SaveLayerRec
&
SaveLayerStrategy
)
;
void
internalSaveBehind
(
const
SkRect
*
)
;
void
internalDrawDevice
(
SkBaseDevice
*
int
x
int
y
const
SkPaint
*
SkImage
*
clipImage
const
SkMatrix
&
clipMatrix
)
;
void
internalSave
(
)
;
void
internalRestore
(
)
;
bool
wouldOverwriteEntireSurface
(
const
SkRect
*
const
SkPaint
*
ShaderOverrideOpacity
)
const
;
bool
canDrawBitmapAsSprite
(
SkScalar
x
SkScalar
y
int
w
int
h
const
SkPaint
&
)
;
bool
androidFramework_isClipAA
(
)
const
;
virtual
SkPaintFilterCanvas
*
internal_private_asPaintFilterCanvas
(
)
const
{
return
nullptr
;
}
bool
fIsScaleTranslate
;
SkRect
fDeviceClipBounds
;
bool
fAllowSoftClip
;
bool
fAllowSimplifyClip
;
class
AutoValidateClip
{
public
:
explicit
AutoValidateClip
(
SkCanvas
*
canvas
)
:
fCanvas
(
canvas
)
{
fCanvas
-
>
validateClip
(
)
;
}
~
AutoValidateClip
(
)
{
fCanvas
-
>
validateClip
(
)
;
}
private
:
const
SkCanvas
*
fCanvas
;
AutoValidateClip
(
AutoValidateClip
&
&
)
=
delete
;
AutoValidateClip
(
const
AutoValidateClip
&
)
=
delete
;
AutoValidateClip
&
operator
=
(
AutoValidateClip
&
&
)
=
delete
;
AutoValidateClip
&
operator
=
(
const
AutoValidateClip
&
)
=
delete
;
}
;
#
ifdef
SK_DEBUG
void
validateClip
(
)
const
;
#
else
void
validateClip
(
)
const
{
}
#
endif
std
:
:
unique_ptr
<
SkGlyphRunBuilder
>
fScratchGlyphRunBuilder
;
typedef
SkRefCnt
INHERITED
;
}
;
class
SkAutoCanvasRestore
{
public
:
SkAutoCanvasRestore
(
SkCanvas
*
canvas
bool
doSave
)
:
fCanvas
(
canvas
)
fSaveCount
(
0
)
{
if
(
fCanvas
)
{
fSaveCount
=
canvas
-
>
getSaveCount
(
)
;
if
(
doSave
)
{
canvas
-
>
save
(
)
;
}
}
}
~
SkAutoCanvasRestore
(
)
{
if
(
fCanvas
)
{
fCanvas
-
>
restoreToCount
(
fSaveCount
)
;
}
}
void
restore
(
)
{
if
(
fCanvas
)
{
fCanvas
-
>
restoreToCount
(
fSaveCount
)
;
fCanvas
=
nullptr
;
}
}
private
:
SkCanvas
*
fCanvas
;
int
fSaveCount
;
SkAutoCanvasRestore
(
SkAutoCanvasRestore
&
&
)
=
delete
;
SkAutoCanvasRestore
(
const
SkAutoCanvasRestore
&
)
=
delete
;
SkAutoCanvasRestore
&
operator
=
(
SkAutoCanvasRestore
&
&
)
=
delete
;
SkAutoCanvasRestore
&
operator
=
(
const
SkAutoCanvasRestore
&
)
=
delete
;
}
;
#
define
SkAutoCanvasRestore
(
.
.
.
)
SK_REQUIRE_LOCAL_VAR
(
SkAutoCanvasRestore
)
#
endif
