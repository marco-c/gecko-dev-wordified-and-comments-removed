#
ifndef
SkPathBuilder_DEFINED
#
define
SkPathBuilder_DEFINED
#
include
"
include
/
core
/
SkPath
.
h
"
#
include
"
include
/
core
/
SkPathTypes
.
h
"
#
include
"
include
/
core
/
SkPoint
.
h
"
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
"
include
/
core
/
SkScalar
.
h
"
#
include
"
include
/
core
/
SkTypes
.
h
"
#
include
"
include
/
private
/
SkPathRef
.
h
"
#
include
"
include
/
private
/
base
/
SkTo
.
h
"
#
include
<
initializer_list
>
class
SkRRect
;
class
SK_API
SkPathBuilder
{
public
:
SkPathBuilder
(
)
;
SkPathBuilder
(
SkPathFillType
)
;
SkPathBuilder
(
const
SkPath
&
)
;
SkPathBuilder
(
const
SkPathBuilder
&
)
=
default
;
~
SkPathBuilder
(
)
;
SkPathBuilder
&
operator
=
(
const
SkPath
&
)
;
SkPathBuilder
&
operator
=
(
const
SkPathBuilder
&
)
=
default
;
SkPathFillType
fillType
(
)
const
{
return
fFillType
;
}
SkRect
computeBounds
(
)
const
;
SkPath
snapshot
(
)
const
;
SkPath
detach
(
)
;
SkPathBuilder
&
setFillType
(
SkPathFillType
ft
)
{
fFillType
=
ft
;
return
*
this
;
}
SkPathBuilder
&
setIsVolatile
(
bool
isVolatile
)
{
fIsVolatile
=
isVolatile
;
return
*
this
;
}
SkPathBuilder
&
reset
(
)
;
SkPathBuilder
&
moveTo
(
SkPoint
pt
)
;
SkPathBuilder
&
moveTo
(
SkScalar
x
SkScalar
y
)
{
return
this
-
>
moveTo
(
SkPoint
:
:
Make
(
x
y
)
)
;
}
SkPathBuilder
&
lineTo
(
SkPoint
pt
)
;
SkPathBuilder
&
lineTo
(
SkScalar
x
SkScalar
y
)
{
return
this
-
>
lineTo
(
SkPoint
:
:
Make
(
x
y
)
)
;
}
SkPathBuilder
&
quadTo
(
SkPoint
pt1
SkPoint
pt2
)
;
SkPathBuilder
&
quadTo
(
SkScalar
x1
SkScalar
y1
SkScalar
x2
SkScalar
y2
)
{
return
this
-
>
quadTo
(
SkPoint
:
:
Make
(
x1
y1
)
SkPoint
:
:
Make
(
x2
y2
)
)
;
}
SkPathBuilder
&
quadTo
(
const
SkPoint
pts
[
2
]
)
{
return
this
-
>
quadTo
(
pts
[
0
]
pts
[
1
]
)
;
}
SkPathBuilder
&
conicTo
(
SkPoint
pt1
SkPoint
pt2
SkScalar
w
)
;
SkPathBuilder
&
conicTo
(
SkScalar
x1
SkScalar
y1
SkScalar
x2
SkScalar
y2
SkScalar
w
)
{
return
this
-
>
conicTo
(
SkPoint
:
:
Make
(
x1
y1
)
SkPoint
:
:
Make
(
x2
y2
)
w
)
;
}
SkPathBuilder
&
conicTo
(
const
SkPoint
pts
[
2
]
SkScalar
w
)
{
return
this
-
>
conicTo
(
pts
[
0
]
pts
[
1
]
w
)
;
}
SkPathBuilder
&
cubicTo
(
SkPoint
pt1
SkPoint
pt2
SkPoint
pt3
)
;
SkPathBuilder
&
cubicTo
(
SkScalar
x1
SkScalar
y1
SkScalar
x2
SkScalar
y2
SkScalar
x3
SkScalar
y3
)
{
return
this
-
>
cubicTo
(
SkPoint
:
:
Make
(
x1
y1
)
SkPoint
:
:
Make
(
x2
y2
)
SkPoint
:
:
Make
(
x3
y3
)
)
;
}
SkPathBuilder
&
cubicTo
(
const
SkPoint
pts
[
3
]
)
{
return
this
-
>
cubicTo
(
pts
[
0
]
pts
[
1
]
pts
[
2
]
)
;
}
SkPathBuilder
&
close
(
)
;
SkPathBuilder
&
polylineTo
(
const
SkPoint
pts
[
]
int
count
)
;
SkPathBuilder
&
polylineTo
(
const
std
:
:
initializer_list
<
SkPoint
>
&
list
)
{
return
this
-
>
polylineTo
(
list
.
begin
(
)
SkToInt
(
list
.
size
(
)
)
)
;
}
SkPathBuilder
&
rLineTo
(
SkPoint
pt
)
;
SkPathBuilder
&
rLineTo
(
SkScalar
x
SkScalar
y
)
{
return
this
-
>
rLineTo
(
{
x
y
}
)
;
}
SkPathBuilder
&
rQuadTo
(
SkPoint
pt1
SkPoint
pt2
)
;
SkPathBuilder
&
rQuadTo
(
SkScalar
x1
SkScalar
y1
SkScalar
x2
SkScalar
y2
)
{
return
this
-
>
rQuadTo
(
{
x1
y1
}
{
x2
y2
}
)
;
}
SkPathBuilder
&
rConicTo
(
SkPoint
p1
SkPoint
p2
SkScalar
w
)
;
SkPathBuilder
&
rConicTo
(
SkScalar
x1
SkScalar
y1
SkScalar
x2
SkScalar
y2
SkScalar
w
)
{
return
this
-
>
rConicTo
(
{
x1
y1
}
{
x2
y2
}
w
)
;
}
SkPathBuilder
&
rCubicTo
(
SkPoint
pt1
SkPoint
pt2
SkPoint
pt3
)
;
SkPathBuilder
&
rCubicTo
(
SkScalar
x1
SkScalar
y1
SkScalar
x2
SkScalar
y2
SkScalar
x3
SkScalar
y3
)
{
return
this
-
>
rCubicTo
(
{
x1
y1
}
{
x2
y2
}
{
x3
y3
}
)
;
}
SkPathBuilder
&
arcTo
(
const
SkRect
&
oval
SkScalar
startAngleDeg
SkScalar
sweepAngleDeg
bool
forceMoveTo
)
;
SkPathBuilder
&
arcTo
(
SkPoint
p1
SkPoint
p2
SkScalar
radius
)
;
enum
ArcSize
{
kSmall_ArcSize
kLarge_ArcSize
}
;
SkPathBuilder
&
arcTo
(
SkPoint
r
SkScalar
xAxisRotate
ArcSize
largeArc
SkPathDirection
sweep
SkPoint
xy
)
;
SkPathBuilder
&
addArc
(
const
SkRect
&
oval
SkScalar
startAngleDeg
SkScalar
sweepAngleDeg
)
;
SkPathBuilder
&
addRect
(
const
SkRect
&
SkPathDirection
unsigned
startIndex
)
;
SkPathBuilder
&
addOval
(
const
SkRect
&
SkPathDirection
unsigned
startIndex
)
;
SkPathBuilder
&
addRRect
(
const
SkRRect
&
SkPathDirection
unsigned
startIndex
)
;
SkPathBuilder
&
addRect
(
const
SkRect
&
rect
SkPathDirection
dir
=
SkPathDirection
:
:
kCW
)
{
return
this
-
>
addRect
(
rect
dir
0
)
;
}
SkPathBuilder
&
addOval
(
const
SkRect
&
rect
SkPathDirection
dir
=
SkPathDirection
:
:
kCW
)
{
return
this
-
>
addOval
(
rect
dir
1
)
;
}
SkPathBuilder
&
addRRect
(
const
SkRRect
&
rrect
SkPathDirection
dir
=
SkPathDirection
:
:
kCW
)
{
return
this
-
>
addRRect
(
rrect
dir
dir
=
=
SkPathDirection
:
:
kCW
?
6
:
7
)
;
}
SkPathBuilder
&
addCircle
(
SkScalar
center_x
SkScalar
center_y
SkScalar
radius
SkPathDirection
dir
=
SkPathDirection
:
:
kCW
)
;
SkPathBuilder
&
addPolygon
(
const
SkPoint
pts
[
]
int
count
bool
isClosed
)
;
SkPathBuilder
&
addPolygon
(
const
std
:
:
initializer_list
<
SkPoint
>
&
list
bool
isClosed
)
{
return
this
-
>
addPolygon
(
list
.
begin
(
)
SkToInt
(
list
.
size
(
)
)
isClosed
)
;
}
SkPathBuilder
&
addPath
(
const
SkPath
&
)
;
void
incReserve
(
int
extraPtCount
int
extraVerbCount
)
;
void
incReserve
(
int
extraPtCount
)
{
this
-
>
incReserve
(
extraPtCount
extraPtCount
)
;
}
SkPathBuilder
&
offset
(
SkScalar
dx
SkScalar
dy
)
;
SkPathBuilder
&
toggleInverseFillType
(
)
{
fFillType
=
(
SkPathFillType
)
(
(
unsigned
)
fFillType
^
2
)
;
return
*
this
;
}
private
:
SkPathRef
:
:
PointsArray
fPts
;
SkPathRef
:
:
VerbsArray
fVerbs
;
SkPathRef
:
:
ConicWeightsArray
fConicWeights
;
SkPathFillType
fFillType
;
bool
fIsVolatile
;
unsigned
fSegmentMask
;
SkPoint
fLastMovePoint
;
int
fLastMoveIndex
;
bool
fNeedsMoveVerb
;
enum
IsA
{
kIsA_JustMoves
kIsA_MoreThanMoves
kIsA_Oval
kIsA_RRect
}
;
IsA
fIsA
=
kIsA_JustMoves
;
int
fIsAStart
=
-
1
;
bool
fIsACCW
=
false
;
int
countVerbs
(
)
const
{
return
fVerbs
.
size
(
)
;
}
void
ensureMove
(
)
{
fIsA
=
kIsA_MoreThanMoves
;
if
(
fNeedsMoveVerb
)
{
this
-
>
moveTo
(
fLastMovePoint
)
;
}
}
SkPath
make
(
sk_sp
<
SkPathRef
>
)
const
;
SkPathBuilder
&
privateReverseAddPath
(
const
SkPath
&
)
;
friend
class
SkPathPriv
;
}
;
#
endif
