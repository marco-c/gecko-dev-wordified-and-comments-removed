#
ifndef
SkPictureRecorder_DEFINED
#
define
SkPictureRecorder_DEFINED
#
include
"
.
.
/
private
/
SkMiniRecorder
.
h
"
#
include
"
SkBBHFactory
.
h
"
#
include
"
SkPicture
.
h
"
#
include
"
SkRefCnt
.
h
"
#
ifdef
SK_BUILD_FOR_ANDROID_FRAMEWORK
namespace
android
{
class
Picture
;
}
;
#
endif
class
SkCanvas
;
class
SkDrawable
;
class
SkPictureRecord
;
class
SkRecord
;
class
SkRecorder
;
class
SK_API
SkPictureRecorder
:
SkNoncopyable
{
public
:
SkPictureRecorder
(
)
;
~
SkPictureRecorder
(
)
;
enum
RecordFlags
{
kComputeSaveLayerInfo_RecordFlag
=
0x01
kPlaybackDrawPicture_RecordFlag
=
0x02
}
;
SkCanvas
*
beginRecording
(
const
SkRect
&
bounds
SkBBHFactory
*
bbhFactory
=
NULL
uint32_t
recordFlags
=
0
)
;
SkCanvas
*
beginRecording
(
SkScalar
width
SkScalar
height
SkBBHFactory
*
bbhFactory
=
NULL
uint32_t
recordFlags
=
0
)
{
return
this
-
>
beginRecording
(
SkRect
:
:
MakeWH
(
width
height
)
bbhFactory
recordFlags
)
;
}
SkCanvas
*
getRecordingCanvas
(
)
;
SkPicture
*
SK_WARN_UNUSED_RESULT
endRecordingAsPicture
(
)
;
SkPicture
*
SK_WARN_UNUSED_RESULT
endRecordingAsPicture
(
const
SkRect
&
cullRect
)
;
SkDrawable
*
SK_WARN_UNUSED_RESULT
endRecordingAsDrawable
(
)
;
SkPicture
*
SK_WARN_UNUSED_RESULT
endRecording
(
)
{
return
this
-
>
endRecordingAsPicture
(
)
;
}
private
:
void
reset
(
)
;
#
ifdef
SK_BUILD_FOR_ANDROID_FRAMEWORK
friend
class
android
:
:
Picture
;
#
endif
friend
class
SkPictureRecorderReplayTester
;
void
partialReplay
(
SkCanvas
*
canvas
)
const
;
bool
fActivelyRecording
;
uint32_t
fFlags
;
SkRect
fCullRect
;
SkAutoTUnref
<
SkBBoxHierarchy
>
fBBH
;
SkAutoTUnref
<
SkRecorder
>
fRecorder
;
SkAutoTUnref
<
SkRecord
>
fRecord
;
SkMiniRecorder
fMiniRecorder
;
typedef
SkNoncopyable
INHERITED
;
}
;
#
endif
