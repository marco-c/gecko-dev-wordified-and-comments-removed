#
ifndef
SkPaint_DEFINED
#
define
SkPaint_DEFINED
#
include
"
.
.
/
private
/
SkTo
.
h
"
#
include
"
SkBlendMode
.
h
"
#
include
"
SkColor
.
h
"
#
include
"
SkFilterQuality
.
h
"
#
include
"
SkMatrix
.
h
"
#
include
"
SkRefCnt
.
h
"
class
GrTextBlob
;
class
SkAutoDescriptor
;
class
SkColorFilter
;
class
SkColorSpace
;
class
SkData
;
class
SkDescriptor
;
class
SkDrawLooper
;
class
SkGlyph
;
class
SkGlyphRunBuilder
;
class
SkGlyphRun
;
class
SkGlyphRunListPainter
;
struct
SkRect
;
class
SkGlyphCache
;
class
SkImageFilter
;
class
SkMaskFilter
;
class
SkPath
;
class
SkPathEffect
;
struct
SkPoint
;
class
SkRunFont
;
class
SkShader
;
class
SkSurfaceProps
;
class
SkTextBlob
;
class
SkTextBlobRunIterator
;
class
SkTypeface
;
class
SK_API
SkPaint
{
public
:
SkPaint
(
)
;
SkPaint
(
const
SkPaint
&
paint
)
;
SkPaint
(
SkPaint
&
&
paint
)
;
~
SkPaint
(
)
;
SkPaint
&
operator
=
(
const
SkPaint
&
paint
)
;
SkPaint
&
operator
=
(
SkPaint
&
&
paint
)
;
SK_API
friend
bool
operator
=
=
(
const
SkPaint
&
a
const
SkPaint
&
b
)
;
friend
bool
operator
!
=
(
const
SkPaint
&
a
const
SkPaint
&
b
)
{
return
!
(
a
=
=
b
)
;
}
uint32_t
getHash
(
)
const
;
void
reset
(
)
;
enum
Hinting
{
kNo_Hinting
=
0
kSlight_Hinting
=
1
kNormal_Hinting
=
2
kFull_Hinting
=
3
}
;
Hinting
getHinting
(
)
const
{
return
static_cast
<
Hinting
>
(
fBitfields
.
fHinting
)
;
}
void
setHinting
(
Hinting
hintingLevel
)
;
enum
Flags
{
kAntiAlias_Flag
=
0x01
kDither_Flag
=
0x04
kFakeBoldText_Flag
=
0x20
kLinearText_Flag
=
0x40
kSubpixelText_Flag
=
0x80
kLCDRenderText_Flag
=
0x200
kEmbeddedBitmapText_Flag
=
0x400
kAutoHinting_Flag
=
0x800
kVerticalText_Flag
=
0x1000
kAllFlags
=
0xFFFF
}
;
#
ifdef
SK_BUILD_FOR_ANDROID_FRAMEWORK
enum
ReserveFlags
{
kUnderlineText_ReserveFlag
=
0x08
kStrikeThruText_ReserveFlag
=
0x10
}
;
#
endif
uint32_t
getFlags
(
)
const
{
return
fBitfields
.
fFlags
;
}
void
setFlags
(
uint32_t
flags
)
;
bool
isAntiAlias
(
)
const
{
return
SkToBool
(
this
-
>
getFlags
(
)
&
kAntiAlias_Flag
)
;
}
void
setAntiAlias
(
bool
aa
)
;
bool
isDither
(
)
const
{
return
SkToBool
(
this
-
>
getFlags
(
)
&
kDither_Flag
)
;
}
void
setDither
(
bool
dither
)
;
bool
isLinearText
(
)
const
{
return
SkToBool
(
this
-
>
getFlags
(
)
&
kLinearText_Flag
)
;
}
void
setLinearText
(
bool
linearText
)
;
bool
isSubpixelText
(
)
const
{
return
SkToBool
(
this
-
>
getFlags
(
)
&
kSubpixelText_Flag
)
;
}
void
setSubpixelText
(
bool
subpixelText
)
;
bool
isLCDRenderText
(
)
const
{
return
SkToBool
(
this
-
>
getFlags
(
)
&
kLCDRenderText_Flag
)
;
}
void
setLCDRenderText
(
bool
lcdText
)
;
bool
isEmbeddedBitmapText
(
)
const
{
return
SkToBool
(
this
-
>
getFlags
(
)
&
kEmbeddedBitmapText_Flag
)
;
}
void
setEmbeddedBitmapText
(
bool
useEmbeddedBitmapText
)
;
bool
isAutohinted
(
)
const
{
return
SkToBool
(
this
-
>
getFlags
(
)
&
kAutoHinting_Flag
)
;
}
void
setAutohinted
(
bool
useAutohinter
)
;
bool
isVerticalText
(
)
const
{
return
SkToBool
(
this
-
>
getFlags
(
)
&
kVerticalText_Flag
)
;
}
void
setVerticalText
(
bool
verticalText
)
;
bool
isFakeBoldText
(
)
const
{
return
SkToBool
(
this
-
>
getFlags
(
)
&
kFakeBoldText_Flag
)
;
}
void
setFakeBoldText
(
bool
fakeBoldText
)
;
bool
isDevKernText
(
)
const
{
return
false
;
}
void
setDevKernText
(
bool
)
{
}
SkFilterQuality
getFilterQuality
(
)
const
{
return
(
SkFilterQuality
)
fBitfields
.
fFilterQuality
;
}
void
setFilterQuality
(
SkFilterQuality
quality
)
;
enum
Style
{
kFill_Style
kStroke_Style
kStrokeAndFill_Style
}
;
static
constexpr
int
kStyleCount
=
kStrokeAndFill_Style
+
1
;
Style
getStyle
(
)
const
{
return
(
Style
)
fBitfields
.
fStyle
;
}
void
setStyle
(
Style
style
)
;
SkColor
getColor
(
)
const
{
return
fColor4f
.
toSkColor
(
)
;
}
SkColor4f
getColor4f
(
)
const
{
return
fColor4f
;
}
void
setColor
(
SkColor
color
)
;
void
setColor4f
(
const
SkColor4f
&
color
SkColorSpace
*
colorSpace
)
;
uint8_t
getAlpha
(
)
const
{
return
sk_float_round2int
(
fColor4f
.
fA
*
255
)
;
}
void
setAlpha
(
U8CPU
a
)
;
void
setARGB
(
U8CPU
a
U8CPU
r
U8CPU
g
U8CPU
b
)
;
SkScalar
getStrokeWidth
(
)
const
{
return
fWidth
;
}
void
setStrokeWidth
(
SkScalar
width
)
;
SkScalar
getStrokeMiter
(
)
const
{
return
fMiterLimit
;
}
void
setStrokeMiter
(
SkScalar
miter
)
;
enum
Cap
{
kButt_Cap
kRound_Cap
kSquare_Cap
kLast_Cap
=
kSquare_Cap
kDefault_Cap
=
kButt_Cap
}
;
static
constexpr
int
kCapCount
=
kLast_Cap
+
1
;
enum
Join
{
kMiter_Join
kRound_Join
kBevel_Join
kLast_Join
=
kBevel_Join
kDefault_Join
=
kMiter_Join
}
;
static
constexpr
int
kJoinCount
=
kLast_Join
+
1
;
Cap
getStrokeCap
(
)
const
{
return
(
Cap
)
fBitfields
.
fCapType
;
}
void
setStrokeCap
(
Cap
cap
)
;
Join
getStrokeJoin
(
)
const
{
return
(
Join
)
fBitfields
.
fJoinType
;
}
void
setStrokeJoin
(
Join
join
)
;
bool
getFillPath
(
const
SkPath
&
src
SkPath
*
dst
const
SkRect
*
cullRect
SkScalar
resScale
=
1
)
const
;
bool
getFillPath
(
const
SkPath
&
src
SkPath
*
dst
)
const
{
return
this
-
>
getFillPath
(
src
dst
nullptr
1
)
;
}
SkShader
*
getShader
(
)
const
{
return
fShader
.
get
(
)
;
}
sk_sp
<
SkShader
>
refShader
(
)
const
;
void
setShader
(
sk_sp
<
SkShader
>
shader
)
;
SkColorFilter
*
getColorFilter
(
)
const
{
return
fColorFilter
.
get
(
)
;
}
sk_sp
<
SkColorFilter
>
refColorFilter
(
)
const
;
void
setColorFilter
(
sk_sp
<
SkColorFilter
>
colorFilter
)
;
SkBlendMode
getBlendMode
(
)
const
{
return
(
SkBlendMode
)
fBlendMode
;
}
bool
isSrcOver
(
)
const
{
return
(
SkBlendMode
)
fBlendMode
=
=
SkBlendMode
:
:
kSrcOver
;
}
void
setBlendMode
(
SkBlendMode
mode
)
{
fBlendMode
=
(
unsigned
)
mode
;
}
SkPathEffect
*
getPathEffect
(
)
const
{
return
fPathEffect
.
get
(
)
;
}
sk_sp
<
SkPathEffect
>
refPathEffect
(
)
const
;
void
setPathEffect
(
sk_sp
<
SkPathEffect
>
pathEffect
)
;
SkMaskFilter
*
getMaskFilter
(
)
const
{
return
fMaskFilter
.
get
(
)
;
}
sk_sp
<
SkMaskFilter
>
refMaskFilter
(
)
const
;
void
setMaskFilter
(
sk_sp
<
SkMaskFilter
>
maskFilter
)
;
SkTypeface
*
getTypeface
(
)
const
{
return
fTypeface
.
get
(
)
;
}
sk_sp
<
SkTypeface
>
refTypeface
(
)
const
;
void
setTypeface
(
sk_sp
<
SkTypeface
>
typeface
)
;
SkImageFilter
*
getImageFilter
(
)
const
{
return
fImageFilter
.
get
(
)
;
}
sk_sp
<
SkImageFilter
>
refImageFilter
(
)
const
;
void
setImageFilter
(
sk_sp
<
SkImageFilter
>
imageFilter
)
;
SkDrawLooper
*
getDrawLooper
(
)
const
{
return
fDrawLooper
.
get
(
)
;
}
sk_sp
<
SkDrawLooper
>
refDrawLooper
(
)
const
;
SkDrawLooper
*
getLooper
(
)
const
{
return
fDrawLooper
.
get
(
)
;
}
void
setDrawLooper
(
sk_sp
<
SkDrawLooper
>
drawLooper
)
;
void
setLooper
(
sk_sp
<
SkDrawLooper
>
drawLooper
)
;
enum
Align
{
kLeft_Align
kCenter_Align
kRight_Align
}
;
static
constexpr
int
kAlignCount
=
3
;
Align
getTextAlign
(
)
const
{
return
(
Align
)
fBitfields
.
fTextAlign
;
}
void
setTextAlign
(
Align
align
)
;
SkScalar
getTextSize
(
)
const
{
return
fTextSize
;
}
void
setTextSize
(
SkScalar
textSize
)
;
SkScalar
getTextScaleX
(
)
const
{
return
fTextScaleX
;
}
void
setTextScaleX
(
SkScalar
scaleX
)
;
SkScalar
getTextSkewX
(
)
const
{
return
fTextSkewX
;
}
void
setTextSkewX
(
SkScalar
skewX
)
;
enum
TextEncoding
{
kUTF8_TextEncoding
kUTF16_TextEncoding
kUTF32_TextEncoding
kGlyphID_TextEncoding
}
;
TextEncoding
getTextEncoding
(
)
const
{
return
(
TextEncoding
)
fBitfields
.
fTextEncoding
;
}
void
setTextEncoding
(
TextEncoding
encoding
)
;
struct
FontMetrics
{
enum
FontMetricsFlags
{
kUnderlineThicknessIsValid_Flag
=
1
<
<
0
kUnderlinePositionIsValid_Flag
=
1
<
<
1
kStrikeoutThicknessIsValid_Flag
=
1
<
<
2
kStrikeoutPositionIsValid_Flag
=
1
<
<
3
}
;
uint32_t
fFlags
;
SkScalar
fTop
;
SkScalar
fAscent
;
SkScalar
fDescent
;
SkScalar
fBottom
;
SkScalar
fLeading
;
SkScalar
fAvgCharWidth
;
SkScalar
fMaxCharWidth
;
SkScalar
fXMin
;
SkScalar
fXMax
;
SkScalar
fXHeight
;
SkScalar
fCapHeight
;
SkScalar
fUnderlineThickness
;
SkScalar
fUnderlinePosition
;
SkScalar
fStrikeoutThickness
;
SkScalar
fStrikeoutPosition
;
bool
hasUnderlineThickness
(
SkScalar
*
thickness
)
const
{
if
(
SkToBool
(
fFlags
&
kUnderlineThicknessIsValid_Flag
)
)
{
*
thickness
=
fUnderlineThickness
;
return
true
;
}
return
false
;
}
bool
hasUnderlinePosition
(
SkScalar
*
position
)
const
{
if
(
SkToBool
(
fFlags
&
kUnderlinePositionIsValid_Flag
)
)
{
*
position
=
fUnderlinePosition
;
return
true
;
}
return
false
;
}
bool
hasStrikeoutThickness
(
SkScalar
*
thickness
)
const
{
if
(
SkToBool
(
fFlags
&
kStrikeoutThicknessIsValid_Flag
)
)
{
*
thickness
=
fStrikeoutThickness
;
return
true
;
}
return
false
;
}
bool
hasStrikeoutPosition
(
SkScalar
*
position
)
const
{
if
(
SkToBool
(
fFlags
&
kStrikeoutPositionIsValid_Flag
)
)
{
*
position
=
fStrikeoutPosition
;
return
true
;
}
return
false
;
}
}
;
SkScalar
getFontMetrics
(
FontMetrics
*
metrics
SkScalar
scale
=
0
)
const
;
SkScalar
getFontSpacing
(
)
const
{
return
this
-
>
getFontMetrics
(
nullptr
0
)
;
}
int
textToGlyphs
(
const
void
*
text
size_t
byteLength
SkGlyphID
glyphs
[
]
)
const
;
bool
containsText
(
const
void
*
text
size_t
byteLength
)
const
;
void
glyphsToUnichars
(
const
SkGlyphID
glyphs
[
]
int
count
SkUnichar
text
[
]
)
const
;
int
countText
(
const
void
*
text
size_t
byteLength
)
const
;
SkScalar
measureText
(
const
void
*
text
size_t
length
SkRect
*
bounds
)
const
;
SkScalar
measureText
(
const
void
*
text
size_t
length
)
const
{
return
this
-
>
measureText
(
text
length
nullptr
)
;
}
size_t
breakText
(
const
void
*
text
size_t
length
SkScalar
maxWidth
SkScalar
*
measuredWidth
=
nullptr
)
const
;
int
getTextWidths
(
const
void
*
text
size_t
byteLength
SkScalar
widths
[
]
SkRect
bounds
[
]
=
nullptr
)
const
;
void
getTextPath
(
const
void
*
text
size_t
length
SkScalar
x
SkScalar
y
SkPath
*
path
)
const
;
void
getPosTextPath
(
const
void
*
text
size_t
length
const
SkPoint
pos
[
]
SkPath
*
path
)
const
;
int
getTextIntercepts
(
const
void
*
text
size_t
length
SkScalar
x
SkScalar
y
const
SkScalar
bounds
[
2
]
SkScalar
*
intervals
)
const
;
int
getPosTextIntercepts
(
const
void
*
text
size_t
length
const
SkPoint
pos
[
]
const
SkScalar
bounds
[
2
]
SkScalar
*
intervals
)
const
;
int
getPosTextHIntercepts
(
const
void
*
text
size_t
length
const
SkScalar
xpos
[
]
SkScalar
constY
const
SkScalar
bounds
[
2
]
SkScalar
*
intervals
)
const
;
int
getTextBlobIntercepts
(
const
SkTextBlob
*
blob
const
SkScalar
bounds
[
2
]
SkScalar
*
intervals
)
const
;
SkRect
getFontBounds
(
)
const
;
bool
nothingToDraw
(
)
const
;
bool
canComputeFastBounds
(
)
const
;
const
SkRect
&
computeFastBounds
(
const
SkRect
&
orig
SkRect
*
storage
)
const
{
SkASSERT
(
orig
.
isSorted
(
)
)
;
SkPaint
:
:
Style
style
=
this
-
>
getStyle
(
)
;
if
(
kFill_Style
=
=
style
)
{
uintptr_t
effects
=
reinterpret_cast
<
uintptr_t
>
(
this
-
>
getLooper
(
)
)
;
effects
|
=
reinterpret_cast
<
uintptr_t
>
(
this
-
>
getMaskFilter
(
)
)
;
effects
|
=
reinterpret_cast
<
uintptr_t
>
(
this
-
>
getPathEffect
(
)
)
;
effects
|
=
reinterpret_cast
<
uintptr_t
>
(
this
-
>
getImageFilter
(
)
)
;
if
(
!
effects
)
{
return
orig
;
}
}
return
this
-
>
doComputeFastBounds
(
orig
storage
style
)
;
}
const
SkRect
&
computeFastStrokeBounds
(
const
SkRect
&
orig
SkRect
*
storage
)
const
{
return
this
-
>
doComputeFastBounds
(
orig
storage
kStroke_Style
)
;
}
const
SkRect
&
doComputeFastBounds
(
const
SkRect
&
orig
SkRect
*
storage
Style
style
)
const
;
private
:
friend
class
SkGlyphRun
;
friend
class
SkGlyphRunBuilder
;
SkPaint
(
const
SkPaint
&
const
SkRunFont
&
)
;
typedef
const
SkGlyph
&
(
*
GlyphCacheProc
)
(
SkGlyphCache
*
const
char
*
*
const
char
*
)
;
sk_sp
<
SkTypeface
>
fTypeface
;
sk_sp
<
SkPathEffect
>
fPathEffect
;
sk_sp
<
SkShader
>
fShader
;
sk_sp
<
SkMaskFilter
>
fMaskFilter
;
sk_sp
<
SkColorFilter
>
fColorFilter
;
sk_sp
<
SkDrawLooper
>
fDrawLooper
;
sk_sp
<
SkImageFilter
>
fImageFilter
;
SkScalar
fTextSize
;
SkScalar
fTextScaleX
;
SkScalar
fTextSkewX
;
SkColor4f
fColor4f
;
SkScalar
fWidth
;
SkScalar
fMiterLimit
;
uint32_t
fBlendMode
;
union
{
struct
{
unsigned
fFlags
:
16
;
unsigned
fTextAlign
:
2
;
unsigned
fCapType
:
2
;
unsigned
fJoinType
:
2
;
unsigned
fStyle
:
2
;
unsigned
fTextEncoding
:
2
;
unsigned
fHinting
:
2
;
unsigned
fFilterQuality
:
2
;
}
fBitfields
;
uint32_t
fBitfieldsUInt
;
}
;
static
GlyphCacheProc
GetGlyphCacheProc
(
TextEncoding
encoding
bool
needFullMetrics
)
;
SkScalar
measure_text
(
SkGlyphCache
*
const
char
*
text
size_t
length
int
*
count
SkRect
*
bounds
)
const
;
SkColor
computeLuminanceColor
(
)
const
;
static
constexpr
int
kCanonicalTextSizeForPaths
=
64
;
static
bool
TooBigToUseCache
(
const
SkMatrix
&
ctm
const
SkMatrix
&
textM
SkScalar
maxLimit
)
;
SkScalar
setupForAsPaths
(
)
;
static
SkScalar
MaxCacheSize2
(
SkScalar
maxLimit
)
;
friend
class
GrTextBlob
;
friend
class
GrTextContext
;
friend
class
GrGLPathRendering
;
friend
class
GrPathRendering
;
friend
class
SkAutoGlyphCacheNoGamma
;
friend
class
SkCanonicalizePaint
;
friend
class
SkCanvas
;
friend
class
SkDraw
;
friend
class
SkGlyphRunListPainter
;
friend
class
SkPaintPriv
;
friend
class
SkPDFDevice
;
friend
class
SkScalerContext
;
friend
class
SkTextBaseIter
;
friend
class
SkTextBlobCacheDiffCanvas
;
}
;
#
endif
