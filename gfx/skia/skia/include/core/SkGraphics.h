#
ifndef
SkGraphics_DEFINED
#
define
SkGraphics_DEFINED
#
include
"
include
/
core
/
SkRefCnt
.
h
"
#
include
<
memory
>
class
SkData
;
class
SkImageGenerator
;
class
SkOpenTypeSVGDecoder
;
class
SkPath
;
class
SkTraceMemoryDump
;
class
SK_API
SkGraphics
{
public
:
static
void
Init
(
)
;
static
size_t
GetFontCacheLimit
(
)
;
static
size_t
SetFontCacheLimit
(
size_t
bytes
)
;
static
size_t
GetFontCacheUsed
(
)
;
static
int
GetFontCacheCountUsed
(
)
;
static
int
GetFontCacheCountLimit
(
)
;
static
int
SetFontCacheCountLimit
(
int
count
)
;
static
void
PurgeFontCache
(
)
;
static
size_t
GetResourceCacheTotalBytesUsed
(
)
;
static
size_t
GetResourceCacheTotalByteLimit
(
)
;
static
size_t
SetResourceCacheTotalByteLimit
(
size_t
newLimit
)
;
static
void
PurgeResourceCache
(
)
;
static
size_t
GetResourceCacheSingleAllocationByteLimit
(
)
;
static
size_t
SetResourceCacheSingleAllocationByteLimit
(
size_t
newLimit
)
;
static
void
DumpMemoryStatistics
(
SkTraceMemoryDump
*
dump
)
;
static
void
PurgeAllCaches
(
)
;
typedef
std
:
:
unique_ptr
<
SkImageGenerator
>
(
*
ImageGeneratorFromEncodedDataFactory
)
(
sk_sp
<
SkData
>
)
;
static
ImageGeneratorFromEncodedDataFactory
SetImageGeneratorFromEncodedDataFactory
(
ImageGeneratorFromEncodedDataFactory
)
;
using
OpenTypeSVGDecoderFactory
=
std
:
:
unique_ptr
<
SkOpenTypeSVGDecoder
>
(
*
)
(
const
uint8_t
*
svg
size_t
length
)
;
static
OpenTypeSVGDecoderFactory
SetOpenTypeSVGDecoderFactory
(
OpenTypeSVGDecoderFactory
)
;
static
OpenTypeSVGDecoderFactory
GetOpenTypeSVGDecoderFactory
(
)
;
static
void
AllowJIT
(
)
;
typedef
bool
(
*
PathAnalyticAADeciderProc
)
(
const
SkPath
&
)
;
static
void
SetPathAnalyticAADecider
(
PathAnalyticAADeciderProc
)
;
}
;
class
SkAutoGraphics
{
public
:
SkAutoGraphics
(
)
{
SkGraphics
:
:
Init
(
)
;
}
}
;
#
endif
