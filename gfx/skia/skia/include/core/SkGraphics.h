#
ifndef
SkGraphics_DEFINED
#
define
SkGraphics_DEFINED
#
include
"
SkRefCnt
.
h
"
class
SkData
;
class
SkImageGenerator
;
class
SkTraceMemoryDump
;
class
SK_API
SkGraphics
{
public
:
static
void
Init
(
)
;
static
void
Term
(
)
{
}
static
void
GetVersion
(
int32_t
*
major
int32_t
*
minor
int32_t
*
patch
)
;
static
size_t
GetFontCacheLimit
(
)
;
static
size_t
SetFontCacheLimit
(
size_t
bytes
)
;
static
size_t
GetFontCacheUsed
(
)
;
static
int
GetFontCacheCountUsed
(
)
;
static
int
GetFontCacheCountLimit
(
)
;
static
int
SetFontCacheCountLimit
(
int
count
)
;
static
void
PurgeFontCache
(
)
;
static
size_t
GetResourceCacheTotalBytesUsed
(
)
;
static
size_t
GetResourceCacheTotalByteLimit
(
)
;
static
size_t
SetResourceCacheTotalByteLimit
(
size_t
newLimit
)
;
static
void
PurgeResourceCache
(
)
;
static
size_t
GetResourceCacheSingleAllocationByteLimit
(
)
;
static
size_t
SetResourceCacheSingleAllocationByteLimit
(
size_t
newLimit
)
;
static
void
DumpMemoryStatistics
(
SkTraceMemoryDump
*
dump
)
;
static
void
PurgeAllCaches
(
)
;
static
void
SetFlags
(
const
char
*
flags
)
;
static
size_t
GetTLSFontCacheLimit
(
)
;
static
void
SetTLSFontCacheLimit
(
size_t
bytes
)
;
typedef
std
:
:
unique_ptr
<
SkImageGenerator
>
(
*
ImageGeneratorFromEncodedDataFactory
)
(
sk_sp
<
SkData
>
)
;
static
ImageGeneratorFromEncodedDataFactory
SetImageGeneratorFromEncodedDataFactory
(
ImageGeneratorFromEncodedDataFactory
)
;
}
;
class
SkAutoGraphics
{
public
:
SkAutoGraphics
(
)
{
SkGraphics
:
:
Init
(
)
;
}
}
;
#
endif
