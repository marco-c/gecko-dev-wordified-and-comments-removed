#
ifndef
SkTime_DEFINED
#
define
SkTime_DEFINED
#
include
"
SkTypes
.
h
"
class
SkString
;
class
SkTime
{
public
:
struct
DateTime
{
int16_t
fTimeZoneMinutes
;
uint16_t
fYear
;
uint8_t
fMonth
;
uint8_t
fDayOfWeek
;
uint8_t
fDay
;
uint8_t
fHour
;
uint8_t
fMinute
;
uint8_t
fSecond
;
void
toISO8601
(
SkString
*
dst
)
const
;
}
;
static
void
GetDateTime
(
DateTime
*
)
;
static
SkMSec
GetMSecs
(
)
{
return
(
SkMSec
)
(
GetNSecs
(
)
*
1e
-
6
)
;
}
static
double
GetNSecs
(
)
;
}
;
#
define
SK_TIME_FACTOR
1
class
SkAutoTime
{
public
:
SkAutoTime
(
const
char
*
label
=
NULL
SkMSec
minToDump
=
0
)
:
fLabel
(
label
)
{
fNow
=
SkTime
:
:
GetMSecs
(
)
;
fMinToDump
=
minToDump
;
}
~
SkAutoTime
(
)
{
SkMSec
dur
=
SkTime
:
:
GetMSecs
(
)
-
fNow
;
if
(
dur
>
=
fMinToDump
)
{
SkDebugf
(
"
%
s
%
d
\
n
"
fLabel
?
fLabel
:
"
"
dur
)
;
}
}
private
:
const
char
*
fLabel
;
SkMSec
fNow
;
SkMSec
fMinToDump
;
}
;
#
define
SkAutoTime
(
.
.
.
)
SK_REQUIRE_LOCAL_VAR
(
SkAutoTime
)
#
endif
