#
ifndef
SkStream_DEFINED
#
define
SkStream_DEFINED
#
include
"
SkRefCnt
.
h
"
#
include
"
SkScalar
.
h
"
class
SkData
;
class
SkStream
;
class
SkStreamRewindable
;
class
SkStreamSeekable
;
class
SkStreamAsset
;
class
SkStreamMemory
;
class
SK_API
SkStream
:
public
SkNoncopyable
{
public
:
virtual
~
SkStream
(
)
{
}
static
SkStreamAsset
*
NewFromFile
(
const
char
path
[
]
)
;
virtual
size_t
read
(
void
*
buffer
size_t
size
)
=
0
;
size_t
skip
(
size_t
size
)
{
return
this
-
>
read
(
NULL
size
)
;
}
virtual
bool
peek
(
void
*
size_t
)
const
{
return
false
;
}
virtual
bool
isAtEnd
(
)
const
=
0
;
int8_t
readS8
(
)
;
int16_t
readS16
(
)
;
int32_t
readS32
(
)
;
uint8_t
readU8
(
)
{
return
(
uint8_t
)
this
-
>
readS8
(
)
;
}
uint16_t
readU16
(
)
{
return
(
uint16_t
)
this
-
>
readS16
(
)
;
}
uint32_t
readU32
(
)
{
return
(
uint32_t
)
this
-
>
readS32
(
)
;
}
bool
readBool
(
)
{
return
this
-
>
readU8
(
)
!
=
0
;
}
SkScalar
readScalar
(
)
;
size_t
readPackedUInt
(
)
;
virtual
bool
rewind
(
)
{
return
false
;
}
virtual
SkStreamRewindable
*
duplicate
(
)
const
{
return
NULL
;
}
virtual
bool
hasPosition
(
)
const
{
return
false
;
}
virtual
size_t
getPosition
(
)
const
{
return
0
;
}
virtual
bool
seek
(
size_t
)
{
return
false
;
}
virtual
bool
move
(
long
)
{
return
false
;
}
virtual
SkStreamSeekable
*
fork
(
)
const
{
return
NULL
;
}
virtual
bool
hasLength
(
)
const
{
return
false
;
}
virtual
size_t
getLength
(
)
const
{
return
0
;
}
virtual
const
void
*
getMemoryBase
(
)
{
return
NULL
;
}
}
;
class
SK_API
SkStreamRewindable
:
public
SkStream
{
public
:
bool
rewind
(
)
override
=
0
;
SkStreamRewindable
*
duplicate
(
)
const
override
=
0
;
}
;
class
SK_API
SkStreamSeekable
:
public
SkStreamRewindable
{
public
:
SkStreamSeekable
*
duplicate
(
)
const
override
=
0
;
bool
hasPosition
(
)
const
override
{
return
true
;
}
size_t
getPosition
(
)
const
override
=
0
;
bool
seek
(
size_t
position
)
override
=
0
;
bool
move
(
long
offset
)
override
=
0
;
SkStreamSeekable
*
fork
(
)
const
override
=
0
;
}
;
class
SK_API
SkStreamAsset
:
public
SkStreamSeekable
{
public
:
SkStreamAsset
*
duplicate
(
)
const
override
=
0
;
SkStreamAsset
*
fork
(
)
const
override
=
0
;
bool
hasLength
(
)
const
override
{
return
true
;
}
size_t
getLength
(
)
const
override
=
0
;
}
;
class
SK_API
SkStreamMemory
:
public
SkStreamAsset
{
public
:
SkStreamMemory
*
duplicate
(
)
const
override
=
0
;
SkStreamMemory
*
fork
(
)
const
override
=
0
;
const
void
*
getMemoryBase
(
)
override
=
0
;
}
;
class
SK_API
SkWStream
:
SkNoncopyable
{
public
:
virtual
~
SkWStream
(
)
;
virtual
bool
write
(
const
void
*
buffer
size_t
size
)
=
0
;
virtual
void
newline
(
)
;
virtual
void
flush
(
)
;
virtual
size_t
bytesWritten
(
)
const
=
0
;
bool
write8
(
U8CPU
)
;
bool
write16
(
U16CPU
)
;
bool
write32
(
uint32_t
)
;
bool
writeText
(
const
char
text
[
]
)
;
bool
writeDecAsText
(
int32_t
)
;
bool
writeBigDecAsText
(
int64_t
int
minDigits
=
0
)
;
bool
writeHexAsText
(
uint32_t
int
minDigits
=
0
)
;
bool
writeScalarAsText
(
SkScalar
)
;
bool
writeBool
(
bool
v
)
{
return
this
-
>
write8
(
v
)
;
}
bool
writeScalar
(
SkScalar
)
;
bool
writePackedUInt
(
size_t
)
;
bool
writeStream
(
SkStream
*
input
size_t
length
)
;
static
int
SizeOfPackedUInt
(
size_t
value
)
;
}
;
#
include
"
SkString
.
h
"
#
include
<
stdio
.
h
>
class
SK_API
SkFILEStream
:
public
SkStreamAsset
{
public
:
explicit
SkFILEStream
(
const
char
path
[
]
=
NULL
)
;
enum
Ownership
{
kCallerPasses_Ownership
kCallerRetains_Ownership
}
;
explicit
SkFILEStream
(
FILE
*
file
Ownership
ownership
=
kCallerPasses_Ownership
)
;
virtual
~
SkFILEStream
(
)
;
bool
isValid
(
)
const
{
return
fFILE
!
=
NULL
;
}
void
setPath
(
const
char
path
[
]
)
;
size_t
read
(
void
*
buffer
size_t
size
)
override
;
bool
isAtEnd
(
)
const
override
;
bool
rewind
(
)
override
;
SkStreamAsset
*
duplicate
(
)
const
override
;
size_t
getPosition
(
)
const
override
;
bool
seek
(
size_t
position
)
override
;
bool
move
(
long
offset
)
override
;
SkStreamAsset
*
fork
(
)
const
override
;
size_t
getLength
(
)
const
override
;
const
void
*
getMemoryBase
(
)
override
;
private
:
FILE
*
fFILE
;
SkString
fName
;
Ownership
fOwnership
;
mutable
SkAutoTUnref
<
SkData
>
fData
;
typedef
SkStreamAsset
INHERITED
;
}
;
class
SK_API
SkMemoryStream
:
public
SkStreamMemory
{
public
:
SkMemoryStream
(
)
;
SkMemoryStream
(
size_t
length
)
;
SkMemoryStream
(
const
void
*
data
size_t
length
bool
copyData
=
false
)
;
SkMemoryStream
(
SkData
*
)
;
virtual
~
SkMemoryStream
(
)
;
virtual
void
setMemory
(
const
void
*
data
size_t
length
bool
copyData
=
false
)
;
void
setMemoryOwned
(
const
void
*
data
size_t
length
)
;
SkData
*
copyToData
(
)
const
;
SkData
*
setData
(
SkData
*
)
;
void
skipToAlign4
(
)
;
const
void
*
getAtPos
(
)
;
size_t
read
(
void
*
buffer
size_t
size
)
override
;
bool
isAtEnd
(
)
const
override
;
bool
peek
(
void
*
buffer
size_t
size
)
const
override
;
bool
rewind
(
)
override
;
SkMemoryStream
*
duplicate
(
)
const
override
;
size_t
getPosition
(
)
const
override
;
bool
seek
(
size_t
position
)
override
;
bool
move
(
long
offset
)
override
;
SkMemoryStream
*
fork
(
)
const
override
;
size_t
getLength
(
)
const
override
;
const
void
*
getMemoryBase
(
)
override
;
private
:
SkData
*
fData
;
size_t
fOffset
;
typedef
SkStreamMemory
INHERITED
;
}
;
class
SK_API
SkFILEWStream
:
public
SkWStream
{
public
:
SkFILEWStream
(
const
char
path
[
]
)
;
virtual
~
SkFILEWStream
(
)
;
bool
isValid
(
)
const
{
return
fFILE
!
=
NULL
;
}
bool
write
(
const
void
*
buffer
size_t
size
)
override
;
void
flush
(
)
override
;
size_t
bytesWritten
(
)
const
override
;
private
:
FILE
*
fFILE
;
typedef
SkWStream
INHERITED
;
}
;
class
SkMemoryWStream
:
public
SkWStream
{
public
:
SkMemoryWStream
(
void
*
buffer
size_t
size
)
;
bool
write
(
const
void
*
buffer
size_t
size
)
override
;
size_t
bytesWritten
(
)
const
override
{
return
fBytesWritten
;
}
private
:
char
*
fBuffer
;
size_t
fMaxLength
;
size_t
fBytesWritten
;
typedef
SkWStream
INHERITED
;
}
;
class
SK_API
SkDynamicMemoryWStream
:
public
SkWStream
{
public
:
SkDynamicMemoryWStream
(
)
;
virtual
~
SkDynamicMemoryWStream
(
)
;
bool
write
(
const
void
*
buffer
size_t
size
)
override
;
size_t
bytesWritten
(
)
const
override
{
return
fBytesWritten
;
}
bool
write
(
const
void
*
buffer
size_t
offset
size_t
size
)
;
bool
read
(
void
*
buffer
size_t
offset
size_t
size
)
;
size_t
getOffset
(
)
const
{
return
fBytesWritten
;
}
void
copyTo
(
void
*
dst
)
const
;
void
writeToStream
(
SkWStream
*
dst
)
const
;
SkData
*
copyToData
(
)
const
;
SkStreamAsset
*
detachAsStream
(
)
;
void
reset
(
)
;
void
padToAlign4
(
)
;
private
:
struct
Block
;
Block
*
fHead
;
Block
*
fTail
;
size_t
fBytesWritten
;
mutable
SkData
*
fCopy
;
void
invalidateCopy
(
)
;
friend
class
SkBlockMemoryStream
;
friend
class
SkBlockMemoryRefCnt
;
typedef
SkWStream
INHERITED
;
}
;
class
SK_API
SkDebugWStream
:
public
SkWStream
{
public
:
SkDebugWStream
(
)
:
fBytesWritten
(
0
)
{
}
bool
write
(
const
void
*
buffer
size_t
size
)
override
;
void
newline
(
)
override
;
size_t
bytesWritten
(
)
const
override
{
return
fBytesWritten
;
}
private
:
size_t
fBytesWritten
;
typedef
SkWStream
INHERITED
;
}
;
typedef
SkFILEStream
SkURLStream
;
#
endif
