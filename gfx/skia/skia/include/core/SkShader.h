#
ifndef
SkShader_DEFINED
#
define
SkShader_DEFINED
#
include
"
include
/
core
/
SkBlendMode
.
h
"
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkFlattenable
.
h
"
#
include
"
include
/
core
/
SkImageInfo
.
h
"
#
include
"
include
/
core
/
SkMatrix
.
h
"
#
include
"
include
/
core
/
SkTileMode
.
h
"
class
SkArenaAlloc
;
class
SkBitmap
;
class
SkBlender
;
class
SkColorFilter
;
class
SkColorSpace
;
class
SkImage
;
class
SkPath
;
class
SkPicture
;
class
SkRasterPipeline
;
class
GrFragmentProcessor
;
class
SK_API
SkShader
:
public
SkFlattenable
{
public
:
virtual
bool
isOpaque
(
)
const
{
return
false
;
}
SkImage
*
isAImage
(
SkMatrix
*
localMatrix
SkTileMode
xy
[
2
]
)
const
;
bool
isAImage
(
)
const
{
return
this
-
>
isAImage
(
nullptr
(
SkTileMode
*
)
nullptr
)
!
=
nullptr
;
}
sk_sp
<
SkShader
>
makeWithLocalMatrix
(
const
SkMatrix
&
)
const
;
sk_sp
<
SkShader
>
makeWithColorFilter
(
sk_sp
<
SkColorFilter
>
)
const
;
private
:
SkShader
(
)
=
default
;
friend
class
SkShaderBase
;
using
INHERITED
=
SkFlattenable
;
}
;
class
SK_API
SkShaders
{
public
:
static
sk_sp
<
SkShader
>
Empty
(
)
;
static
sk_sp
<
SkShader
>
Color
(
SkColor
)
;
static
sk_sp
<
SkShader
>
Color
(
const
SkColor4f
&
sk_sp
<
SkColorSpace
>
)
;
static
sk_sp
<
SkShader
>
Blend
(
SkBlendMode
mode
sk_sp
<
SkShader
>
dst
sk_sp
<
SkShader
>
src
)
;
static
sk_sp
<
SkShader
>
Blend
(
sk_sp
<
SkBlender
>
sk_sp
<
SkShader
>
dst
sk_sp
<
SkShader
>
src
)
;
static
sk_sp
<
SkShader
>
CoordClamp
(
sk_sp
<
SkShader
>
const
SkRect
&
subset
)
;
private
:
SkShaders
(
)
=
delete
;
}
;
#
endif
