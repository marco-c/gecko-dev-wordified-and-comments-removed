#
ifndef
SkColorFilter_DEFINED
#
define
SkColorFilter_DEFINED
#
include
"
include
/
core
/
SkBlendMode
.
h
"
#
include
"
include
/
core
/
SkColor
.
h
"
#
include
"
include
/
core
/
SkFlattenable
.
h
"
#
include
"
include
/
core
/
SkRefCnt
.
h
"
class
GrColorInfo
;
class
GrFragmentProcessor
;
class
GrRecordingContext
;
class
SkBitmap
;
class
SkColorMatrix
;
class
SkColorSpace
;
struct
SkStageRec
;
class
SkString
;
class
SK_API
SkColorFilter
:
public
SkFlattenable
{
public
:
bool
asColorMode
(
SkColor
*
color
SkBlendMode
*
mode
)
const
{
return
this
-
>
onAsAColorMode
(
color
mode
)
;
}
bool
asAColorMode
(
SkColor
*
color
SkBlendMode
*
mode
)
const
{
return
this
-
>
onAsAColorMode
(
color
mode
)
;
}
bool
asAColorMatrix
(
float
matrix
[
20
]
)
const
{
return
this
-
>
onAsAColorMatrix
(
matrix
)
;
}
bool
appendStages
(
const
SkStageRec
&
rec
bool
shaderIsOpaque
)
const
;
enum
Flags
{
kAlphaUnchanged_Flag
=
1
<
<
0
}
;
virtual
uint32_t
getFlags
(
)
const
{
return
0
;
}
SkColor
filterColor
(
SkColor
)
const
;
SkColor4f
filterColor4f
(
const
SkColor4f
&
srcColor
SkColorSpace
*
srcCS
SkColorSpace
*
dstCS
)
const
;
sk_sp
<
SkColorFilter
>
makeComposed
(
sk_sp
<
SkColorFilter
>
inner
)
const
;
#
if
SK_SUPPORT_GPU
virtual
std
:
:
unique_ptr
<
GrFragmentProcessor
>
asFragmentProcessor
(
GrRecordingContext
*
const
GrColorInfo
&
dstColorInfo
)
const
;
#
endif
bool
affectsTransparentBlack
(
)
const
{
return
this
-
>
filterColor
(
SK_ColorTRANSPARENT
)
!
=
SK_ColorTRANSPARENT
;
}
static
void
RegisterFlattenables
(
)
;
static
SkFlattenable
:
:
Type
GetFlattenableType
(
)
{
return
kSkColorFilter_Type
;
}
SkFlattenable
:
:
Type
getFlattenableType
(
)
const
override
{
return
kSkColorFilter_Type
;
}
static
sk_sp
<
SkColorFilter
>
Deserialize
(
const
void
*
data
size_t
size
const
SkDeserialProcs
*
procs
=
nullptr
)
{
return
sk_sp
<
SkColorFilter
>
(
static_cast
<
SkColorFilter
*
>
(
SkFlattenable
:
:
Deserialize
(
kSkColorFilter_Type
data
size
procs
)
.
release
(
)
)
)
;
}
protected
:
SkColorFilter
(
)
{
}
virtual
bool
onAsAColorMatrix
(
float
[
20
]
)
const
;
virtual
bool
onAsAColorMode
(
SkColor
*
color
SkBlendMode
*
bmode
)
const
;
private
:
virtual
int
privateComposedFilterCount
(
)
const
{
return
1
;
}
virtual
bool
onAppendStages
(
const
SkStageRec
&
rec
bool
shaderIsOpaque
)
const
=
0
;
friend
class
SkComposeColorFilter
;
typedef
SkFlattenable
INHERITED
;
}
;
class
SK_API
SkColorFilters
{
public
:
static
sk_sp
<
SkColorFilter
>
Compose
(
sk_sp
<
SkColorFilter
>
outer
sk_sp
<
SkColorFilter
>
inner
)
{
return
outer
?
outer
-
>
makeComposed
(
inner
)
:
inner
;
}
static
sk_sp
<
SkColorFilter
>
Blend
(
SkColor
c
SkBlendMode
mode
)
;
static
sk_sp
<
SkColorFilter
>
Matrix
(
const
SkColorMatrix
&
)
;
static
sk_sp
<
SkColorFilter
>
Matrix
(
const
float
rowMajor
[
20
]
)
;
static
sk_sp
<
SkColorFilter
>
HSLAMatrix
(
const
float
rowMajor
[
20
]
)
;
static
sk_sp
<
SkColorFilter
>
LinearToSRGBGamma
(
)
;
static
sk_sp
<
SkColorFilter
>
SRGBToLinearGamma
(
)
;
static
sk_sp
<
SkColorFilter
>
Lerp
(
float
t
sk_sp
<
SkColorFilter
>
dst
sk_sp
<
SkColorFilter
>
src
)
;
private
:
SkColorFilters
(
)
=
delete
;
}
;
#
endif
