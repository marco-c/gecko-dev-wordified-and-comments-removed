#
ifndef
SkColorFilter_DEFINED
#
define
SkColorFilter_DEFINED
#
include
"
SkColor
.
h
"
#
include
"
SkFlattenable
.
h
"
#
include
"
SkTDArray
.
h
"
#
include
"
SkXfermode
.
h
"
class
GrContext
;
class
GrFragmentProcessor
;
class
SkBitmap
;
class
SK_API
SkColorFilter
:
public
SkFlattenable
{
public
:
virtual
bool
asColorMode
(
SkColor
*
color
SkXfermode
:
:
Mode
*
mode
)
const
;
virtual
bool
asColorMatrix
(
SkScalar
matrix
[
20
]
)
const
;
virtual
bool
asComponentTable
(
SkBitmap
*
table
)
const
;
virtual
void
filterSpan
(
const
SkPMColor
src
[
]
int
count
SkPMColor
result
[
]
)
const
=
0
;
enum
Flags
{
kAlphaUnchanged_Flag
=
0x01
}
;
virtual
uint32_t
getFlags
(
)
const
{
return
0
;
}
virtual
SkColorFilter
*
newComposed
(
const
SkColorFilter
*
)
const
{
return
NULL
;
}
SkColor
filterColor
(
SkColor
)
const
;
static
SkColorFilter
*
CreateModeFilter
(
SkColor
c
SkXfermode
:
:
Mode
mode
)
;
static
SkColorFilter
*
CreateComposeFilter
(
SkColorFilter
*
outer
SkColorFilter
*
inner
)
;
virtual
const
GrFragmentProcessor
*
asFragmentProcessor
(
GrContext
*
)
const
{
return
nullptr
;
}
bool
affectsTransparentBlack
(
)
const
{
return
this
-
>
filterColor
(
0
)
!
=
0
;
}
SK_TO_STRING_PUREVIRT
(
)
SK_DECLARE_FLATTENABLE_REGISTRAR_GROUP
(
)
SK_DEFINE_FLATTENABLE_TYPE
(
SkColorFilter
)
protected
:
SkColorFilter
(
)
{
}
private
:
virtual
int
privateComposedFilterCount
(
)
const
{
return
1
;
}
friend
class
SkComposeColorFilter
;
typedef
SkFlattenable
INHERITED
;
}
;
#
endif
