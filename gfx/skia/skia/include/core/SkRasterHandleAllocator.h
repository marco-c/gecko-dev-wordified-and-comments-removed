#
ifndef
SkRasterHandleAllocator_DEFINED
#
define
SkRasterHandleAllocator_DEFINED
#
include
"
SkImageInfo
.
h
"
class
SkBitmap
;
class
SkCanvas
;
class
SkMatrix
;
class
SK_API
SkRasterHandleAllocator
{
public
:
virtual
~
SkRasterHandleAllocator
(
)
{
}
typedef
void
*
Handle
;
struct
Rec
{
void
(
*
fReleaseProc
)
(
void
*
pixels
void
*
ctx
)
;
void
*
fReleaseCtx
;
void
*
fPixels
;
size_t
fRowBytes
;
Handle
fHandle
;
}
;
virtual
bool
allocHandle
(
const
SkImageInfo
&
Rec
*
)
=
0
;
virtual
void
updateHandle
(
Handle
const
SkMatrix
&
const
SkIRect
&
)
=
0
;
static
std
:
:
unique_ptr
<
SkCanvas
>
MakeCanvas
(
std
:
:
unique_ptr
<
SkRasterHandleAllocator
>
const
SkImageInfo
&
const
Rec
*
rec
=
nullptr
)
;
private
:
friend
class
SkBitmapDevice
;
Handle
allocBitmap
(
const
SkImageInfo
&
SkBitmap
*
)
;
}
;
#
endif
