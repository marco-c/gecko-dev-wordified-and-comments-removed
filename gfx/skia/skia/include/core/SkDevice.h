#
ifndef
SkDevice_DEFINED
#
define
SkDevice_DEFINED
#
include
"
SkRefCnt
.
h
"
#
include
"
SkCanvas
.
h
"
#
include
"
SkColor
.
h
"
#
include
"
SkSurfaceProps
.
h
"
class
SkBitmap
;
class
SkClipStack
;
class
SkDraw
;
class
SkDrawFilter
;
class
SkImageFilterCache
;
struct
SkIRect
;
class
SkMatrix
;
class
SkMetaData
;
class
SkRegion
;
class
SkSpecialImage
;
class
GrRenderTarget
;
class
SK_API
SkBaseDevice
:
public
SkRefCnt
{
public
:
explicit
SkBaseDevice
(
const
SkImageInfo
&
const
SkSurfaceProps
&
)
;
virtual
~
SkBaseDevice
(
)
;
SkMetaData
&
getMetaData
(
)
;
const
SkImageInfo
&
imageInfo
(
)
const
{
return
fInfo
;
}
const
SkSurfaceProps
&
surfaceProps
(
)
const
{
return
fSurfaceProps
;
}
void
getGlobalBounds
(
SkIRect
*
bounds
)
const
{
SkASSERT
(
bounds
)
;
const
SkIPoint
&
origin
=
this
-
>
getOrigin
(
)
;
bounds
-
>
setXYWH
(
origin
.
x
(
)
origin
.
y
(
)
this
-
>
width
(
)
this
-
>
height
(
)
)
;
}
SkIRect
getGlobalBounds
(
)
const
{
SkIRect
bounds
;
this
-
>
getGlobalBounds
(
&
bounds
)
;
return
bounds
;
}
int
width
(
)
const
{
return
this
-
>
imageInfo
(
)
.
width
(
)
;
}
int
height
(
)
const
{
return
this
-
>
imageInfo
(
)
.
height
(
)
;
}
bool
isOpaque
(
)
const
{
return
this
-
>
imageInfo
(
)
.
isOpaque
(
)
;
}
#
ifdef
SK_SUPPORT_LEGACY_ACCESSBITMAP
const
SkBitmap
&
accessBitmap
(
bool
changePixels
)
;
#
endif
bool
writePixels
(
const
SkImageInfo
&
const
void
*
size_t
rowBytes
int
x
int
y
)
;
bool
accessPixels
(
SkPixmap
*
pmap
)
;
bool
peekPixels
(
SkPixmap
*
)
;
const
SkIPoint
&
getOrigin
(
)
const
{
return
fOrigin
;
}
protected
:
enum
TileUsage
{
kPossible_TileUsage
kNever_TileUsage
}
;
struct
TextFlags
{
uint32_t
fFlags
;
}
;
uint32_t
filterTextFlags
(
const
SkPaint
&
)
const
;
virtual
bool
onShouldDisableLCD
(
const
SkPaint
&
)
const
{
return
false
;
}
virtual
void
drawPaint
(
const
SkDraw
&
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawPoints
(
const
SkDraw
&
SkCanvas
:
:
PointMode
mode
size_t
count
const
SkPoint
[
]
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawRect
(
const
SkDraw
&
const
SkRect
&
r
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawRegion
(
const
SkDraw
&
const
SkRegion
&
r
const
SkPaint
&
paint
)
;
virtual
void
drawOval
(
const
SkDraw
&
const
SkRect
&
oval
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawArc
(
const
SkDraw
&
const
SkRect
&
oval
SkScalar
startAngle
SkScalar
sweepAngle
bool
useCenter
const
SkPaint
&
paint
)
;
virtual
void
drawRRect
(
const
SkDraw
&
const
SkRRect
&
rr
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawDRRect
(
const
SkDraw
&
const
SkRRect
&
outer
const
SkRRect
&
inner
const
SkPaint
&
)
;
virtual
void
drawPath
(
const
SkDraw
&
const
SkPath
&
path
const
SkPaint
&
paint
const
SkMatrix
*
prePathMatrix
=
NULL
bool
pathIsMutable
=
false
)
=
0
;
virtual
void
drawBitmap
(
const
SkDraw
&
const
SkBitmap
&
bitmap
const
SkMatrix
&
matrix
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawSprite
(
const
SkDraw
&
const
SkBitmap
&
bitmap
int
x
int
y
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawBitmapRect
(
const
SkDraw
&
const
SkBitmap
&
const
SkRect
*
srcOrNull
const
SkRect
&
dst
const
SkPaint
&
paint
SkCanvas
:
:
SrcRectConstraint
)
=
0
;
virtual
void
drawBitmapNine
(
const
SkDraw
&
const
SkBitmap
&
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
&
)
;
virtual
void
drawBitmapLattice
(
const
SkDraw
&
const
SkBitmap
&
const
SkCanvas
:
:
Lattice
&
const
SkRect
&
dst
const
SkPaint
&
)
;
virtual
void
drawImage
(
const
SkDraw
&
const
SkImage
*
SkScalar
x
SkScalar
y
const
SkPaint
&
)
;
virtual
void
drawImageRect
(
const
SkDraw
&
const
SkImage
*
const
SkRect
*
src
const
SkRect
&
dst
const
SkPaint
&
SkCanvas
:
:
SrcRectConstraint
)
;
virtual
void
drawImageNine
(
const
SkDraw
&
const
SkImage
*
const
SkIRect
&
center
const
SkRect
&
dst
const
SkPaint
&
)
;
virtual
void
drawImageLattice
(
const
SkDraw
&
const
SkImage
*
const
SkCanvas
:
:
Lattice
&
const
SkRect
&
dst
const
SkPaint
&
)
;
virtual
void
drawText
(
const
SkDraw
&
const
void
*
text
size_t
len
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawPosText
(
const
SkDraw
&
const
void
*
text
size_t
len
const
SkScalar
pos
[
]
int
scalarsPerPos
const
SkPoint
&
offset
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawVertices
(
const
SkDraw
&
SkCanvas
:
:
VertexMode
int
vertexCount
const
SkPoint
verts
[
]
const
SkPoint
texs
[
]
const
SkColor
colors
[
]
SkXfermode
*
xmode
const
uint16_t
indices
[
]
int
indexCount
const
SkPaint
&
paint
)
=
0
;
virtual
void
drawTextBlob
(
const
SkDraw
&
const
SkTextBlob
*
SkScalar
x
SkScalar
y
const
SkPaint
&
paint
SkDrawFilter
*
drawFilter
)
;
virtual
void
drawPatch
(
const
SkDraw
&
const
SkPoint
cubics
[
12
]
const
SkColor
colors
[
4
]
const
SkPoint
texCoords
[
4
]
SkXfermode
*
xmode
const
SkPaint
&
paint
)
;
virtual
void
drawAtlas
(
const
SkDraw
&
const
SkImage
*
atlas
const
SkRSXform
[
]
const
SkRect
[
]
const
SkColor
[
]
int
count
SkXfermode
:
:
Mode
const
SkPaint
&
)
;
virtual
void
drawAnnotation
(
const
SkDraw
&
const
SkRect
&
const
char
[
]
SkData
*
)
{
}
virtual
void
drawDevice
(
const
SkDraw
&
SkBaseDevice
*
int
x
int
y
const
SkPaint
&
)
=
0
;
virtual
void
drawTextOnPath
(
const
SkDraw
&
const
void
*
text
size_t
len
const
SkPath
&
const
SkMatrix
*
const
SkPaint
&
)
;
virtual
void
drawTextRSXform
(
const
SkDraw
&
const
void
*
text
size_t
len
const
SkRSXform
[
]
const
SkPaint
&
)
;
virtual
void
drawSpecial
(
const
SkDraw
&
SkSpecialImage
*
int
x
int
y
const
SkPaint
&
)
;
virtual
sk_sp
<
SkSpecialImage
>
makeSpecial
(
const
SkBitmap
&
)
;
virtual
sk_sp
<
SkSpecialImage
>
makeSpecial
(
const
SkImage
*
)
;
virtual
sk_sp
<
SkSpecialImage
>
snapSpecial
(
)
;
bool
readPixels
(
const
SkImageInfo
&
void
*
dst
size_t
rowBytes
int
x
int
y
)
;
#
ifdef
SK_SUPPORT_LEGACY_ACCESSBITMAP
virtual
const
SkBitmap
&
onAccessBitmap
(
)
{
SkASSERT
(
0
)
;
return
fLegacyBitmap
;
}
#
endif
virtual
GrContext
*
context
(
)
const
{
return
nullptr
;
}
protected
:
virtual
sk_sp
<
SkSurface
>
makeSurface
(
const
SkImageInfo
&
const
SkSurfaceProps
&
)
;
virtual
bool
onPeekPixels
(
SkPixmap
*
)
{
return
false
;
}
virtual
bool
onReadPixels
(
const
SkImageInfo
&
void
*
size_t
int
x
int
y
)
;
virtual
bool
onWritePixels
(
const
SkImageInfo
&
const
void
*
size_t
int
x
int
y
)
;
virtual
bool
onAccessPixels
(
SkPixmap
*
)
{
return
false
;
}
struct
CreateInfo
{
static
SkPixelGeometry
AdjustGeometry
(
const
SkImageInfo
&
TileUsage
SkPixelGeometry
bool
preserveLCDText
)
;
CreateInfo
(
const
SkImageInfo
&
info
TileUsage
tileUsage
SkPixelGeometry
geo
)
:
fInfo
(
info
)
fTileUsage
(
tileUsage
)
fPixelGeometry
(
AdjustGeometry
(
info
tileUsage
geo
false
)
)
{
}
CreateInfo
(
const
SkImageInfo
&
info
TileUsage
tileUsage
SkPixelGeometry
geo
bool
preserveLCDText
)
:
fInfo
(
info
)
fTileUsage
(
tileUsage
)
fPixelGeometry
(
AdjustGeometry
(
info
tileUsage
geo
preserveLCDText
)
)
{
}
const
SkImageInfo
fInfo
;
const
TileUsage
fTileUsage
;
const
SkPixelGeometry
fPixelGeometry
;
}
;
virtual
SkBaseDevice
*
onCreateDevice
(
const
CreateInfo
&
const
SkPaint
*
)
{
return
NULL
;
}
static
void
LogDrawScaleFactor
(
const
SkMatrix
&
SkFilterQuality
)
;
private
:
friend
class
SkCanvas
;
friend
struct
DeviceCM
;
friend
class
SkDraw
;
friend
class
SkDrawIter
;
friend
class
SkDeviceFilteredPaint
;
friend
class
SkNoPixelsBitmapDevice
;
friend
class
SkSurface_Raster
;
friend
class
DeviceTestingAccess
;
virtual
void
replaceBitmapBackendForRasterSurface
(
const
SkBitmap
&
)
{
}
virtual
bool
forceConservativeRasterClip
(
)
const
{
return
false
;
}
virtual
GrDrawContext
*
accessDrawContext
(
)
{
return
nullptr
;
}
void
setOrigin
(
int
x
int
y
)
{
fOrigin
.
set
(
x
y
)
;
}
virtual
void
flush
(
)
{
}
virtual
SkImageFilterCache
*
getImageFilterCache
(
)
{
return
NULL
;
}
friend
class
SkBitmapDevice
;
void
privateResize
(
int
w
int
h
)
{
*
const_cast
<
SkImageInfo
*
>
(
&
fInfo
)
=
fInfo
.
makeWH
(
w
h
)
;
}
SkIPoint
fOrigin
;
SkMetaData
*
fMetaData
;
const
SkImageInfo
fInfo
;
const
SkSurfaceProps
fSurfaceProps
;
#
ifdef
SK_SUPPORT_LEGACY_ACCESSBITMAP
SkBitmap
fLegacyBitmap
;
#
endif
typedef
SkRefCnt
INHERITED
;
}
;
#
endif
