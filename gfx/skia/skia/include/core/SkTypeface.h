#
ifndef
SkTypeface_DEFINED
#
define
SkTypeface_DEFINED
#
include
"
include
/
core
/
SkFontArguments
.
h
"
#
include
"
include
/
core
/
SkFontParameters
.
h
"
#
include
"
include
/
core
/
SkFontStyle
.
h
"
#
include
"
include
/
core
/
SkFontTypes
.
h
"
#
include
"
include
/
core
/
SkRect
.
h
"
#
include
"
include
/
core
/
SkString
.
h
"
#
include
"
include
/
private
/
SkOnce
.
h
"
#
include
"
include
/
private
/
SkWeakRefCnt
.
h
"
class
SkData
;
class
SkDescriptor
;
class
SkFontData
;
class
SkFontDescriptor
;
class
SkScalerContext
;
class
SkStream
;
class
SkStreamAsset
;
class
SkWStream
;
struct
SkAdvancedTypefaceMetrics
;
struct
SkScalerContextEffects
;
struct
SkScalerContextRec
;
typedef
uint32_t
SkFontID
;
typedef
uint32_t
SkFontTableTag
;
class
SK_API
SkTypeface
:
public
SkWeakRefCnt
{
public
:
SkFontStyle
fontStyle
(
)
const
{
return
fStyle
;
}
bool
isBold
(
)
const
{
return
fStyle
.
weight
(
)
>
=
SkFontStyle
:
:
kSemiBold_Weight
;
}
bool
isItalic
(
)
const
{
return
fStyle
.
slant
(
)
!
=
SkFontStyle
:
:
kUpright_Slant
;
}
bool
isFixedPitch
(
)
const
{
return
fIsFixedPitch
;
}
int
getVariationDesignPosition
(
SkFontArguments
:
:
VariationPosition
:
:
Coordinate
coordinates
[
]
int
coordinateCount
)
const
;
int
getVariationDesignParameters
(
SkFontParameters
:
:
Variation
:
:
Axis
parameters
[
]
int
parameterCount
)
const
;
SkFontID
uniqueID
(
)
const
{
return
fUniqueID
;
}
static
SkFontID
UniqueID
(
const
SkTypeface
*
face
)
;
static
bool
Equal
(
const
SkTypeface
*
facea
const
SkTypeface
*
faceb
)
;
static
sk_sp
<
SkTypeface
>
MakeDefault
(
)
;
static
sk_sp
<
SkTypeface
>
MakeFromName
(
const
char
familyName
[
]
SkFontStyle
fontStyle
)
;
static
sk_sp
<
SkTypeface
>
MakeFromFile
(
const
char
path
[
]
int
index
=
0
)
;
static
sk_sp
<
SkTypeface
>
MakeFromStream
(
std
:
:
unique_ptr
<
SkStreamAsset
>
stream
int
index
=
0
)
;
static
sk_sp
<
SkTypeface
>
MakeFromData
(
sk_sp
<
SkData
>
int
index
=
0
)
;
static
sk_sp
<
SkTypeface
>
MakeFromFontData
(
std
:
:
unique_ptr
<
SkFontData
>
)
;
sk_sp
<
SkTypeface
>
makeClone
(
const
SkFontArguments
&
)
const
;
enum
class
SerializeBehavior
{
kDoIncludeData
kDontIncludeData
kIncludeDataIfLocal
}
;
void
serialize
(
SkWStream
*
SerializeBehavior
=
SerializeBehavior
:
:
kIncludeDataIfLocal
)
const
;
sk_sp
<
SkData
>
serialize
(
SerializeBehavior
=
SerializeBehavior
:
:
kIncludeDataIfLocal
)
const
;
static
sk_sp
<
SkTypeface
>
MakeDeserialize
(
SkStream
*
)
;
void
unicharsToGlyphs
(
const
SkUnichar
uni
[
]
int
count
SkGlyphID
glyphs
[
]
)
const
;
SkGlyphID
unicharToGlyph
(
SkUnichar
unichar
)
const
;
int
countGlyphs
(
)
const
;
int
countTables
(
)
const
;
int
getTableTags
(
SkFontTableTag
tags
[
]
)
const
;
size_t
getTableSize
(
SkFontTableTag
)
const
;
size_t
getTableData
(
SkFontTableTag
tag
size_t
offset
size_t
length
void
*
data
)
const
;
sk_sp
<
SkData
>
copyTableData
(
SkFontTableTag
tag
)
const
;
int
getUnitsPerEm
(
)
const
;
bool
getKerningPairAdjustments
(
const
SkGlyphID
glyphs
[
]
int
count
int32_t
adjustments
[
]
)
const
;
struct
LocalizedString
{
SkString
fString
;
SkString
fLanguage
;
}
;
class
LocalizedStrings
{
public
:
LocalizedStrings
(
)
=
default
;
virtual
~
LocalizedStrings
(
)
{
}
virtual
bool
next
(
LocalizedString
*
localizedString
)
=
0
;
void
unref
(
)
{
delete
this
;
}
private
:
LocalizedStrings
(
const
LocalizedStrings
&
)
=
delete
;
LocalizedStrings
&
operator
=
(
const
LocalizedStrings
&
)
=
delete
;
}
;
LocalizedStrings
*
createFamilyNameIterator
(
)
const
;
void
getFamilyName
(
SkString
*
name
)
const
;
std
:
:
unique_ptr
<
SkStreamAsset
>
openStream
(
int
*
ttcIndex
)
const
;
std
:
:
unique_ptr
<
SkFontData
>
makeFontData
(
)
const
;
std
:
:
unique_ptr
<
SkScalerContext
>
createScalerContext
(
const
SkScalerContextEffects
&
const
SkDescriptor
*
bool
allowFailure
=
false
)
const
;
SkRect
getBounds
(
)
const
;
virtual
bool
hasColorGlyphs
(
)
const
{
return
false
;
}
void
filterRec
(
SkScalerContextRec
*
rec
)
const
{
this
-
>
onFilterRec
(
rec
)
;
}
void
getFontDescriptor
(
SkFontDescriptor
*
desc
bool
*
isLocal
)
const
{
this
-
>
onGetFontDescriptor
(
desc
isLocal
)
;
}
void
*
internal_private_getCTFontRef
(
)
const
{
return
this
-
>
onGetCTFontRef
(
)
;
}
protected
:
SkTypeface
(
const
SkFontStyle
&
style
bool
isFixedPitch
=
false
)
;
virtual
~
SkTypeface
(
)
;
virtual
sk_sp
<
SkTypeface
>
onMakeClone
(
const
SkFontArguments
&
)
const
=
0
;
void
setIsFixedPitch
(
bool
isFixedPitch
)
{
fIsFixedPitch
=
isFixedPitch
;
}
void
setFontStyle
(
SkFontStyle
style
)
{
fStyle
=
style
;
}
virtual
SkScalerContext
*
onCreateScalerContext
(
const
SkScalerContextEffects
&
const
SkDescriptor
*
)
const
=
0
;
virtual
void
onFilterRec
(
SkScalerContextRec
*
)
const
=
0
;
friend
class
SkScalerContext
;
virtual
std
:
:
unique_ptr
<
SkAdvancedTypefaceMetrics
>
onGetAdvancedMetrics
(
)
const
=
0
;
virtual
void
getPostScriptGlyphNames
(
SkString
*
)
const
=
0
;
virtual
void
getGlyphToUnicodeMap
(
SkUnichar
*
dstArray
)
const
=
0
;
virtual
std
:
:
unique_ptr
<
SkStreamAsset
>
onOpenStream
(
int
*
ttcIndex
)
const
=
0
;
virtual
std
:
:
unique_ptr
<
SkFontData
>
onMakeFontData
(
)
const
;
virtual
int
onGetVariationDesignPosition
(
SkFontArguments
:
:
VariationPosition
:
:
Coordinate
coordinates
[
]
int
coordinateCount
)
const
=
0
;
virtual
int
onGetVariationDesignParameters
(
SkFontParameters
:
:
Variation
:
:
Axis
parameters
[
]
int
parameterCount
)
const
=
0
;
virtual
void
onGetFontDescriptor
(
SkFontDescriptor
*
bool
*
isLocal
)
const
=
0
;
virtual
void
onCharsToGlyphs
(
const
SkUnichar
*
chars
int
count
SkGlyphID
glyphs
[
]
)
const
=
0
;
virtual
int
onCountGlyphs
(
)
const
=
0
;
virtual
int
onGetUPEM
(
)
const
=
0
;
virtual
bool
onGetKerningPairAdjustments
(
const
SkGlyphID
glyphs
[
]
int
count
int32_t
adjustments
[
]
)
const
;
virtual
void
onGetFamilyName
(
SkString
*
familyName
)
const
=
0
;
virtual
LocalizedStrings
*
onCreateFamilyNameIterator
(
)
const
=
0
;
virtual
int
onGetTableTags
(
SkFontTableTag
tags
[
]
)
const
=
0
;
virtual
size_t
onGetTableData
(
SkFontTableTag
size_t
offset
size_t
length
void
*
data
)
const
=
0
;
virtual
sk_sp
<
SkData
>
onCopyTableData
(
SkFontTableTag
)
const
;
virtual
bool
onComputeBounds
(
SkRect
*
)
const
;
virtual
void
*
onGetCTFontRef
(
)
const
{
return
nullptr
;
}
private
:
std
:
:
unique_ptr
<
SkAdvancedTypefaceMetrics
>
getAdvancedMetrics
(
)
const
;
friend
class
SkRandomTypeface
;
friend
class
SkPDFFont
;
enum
Style
{
kNormal
=
0
kBold
=
0x01
kItalic
=
0x02
kBoldItalic
=
0x03
}
;
static
SkFontStyle
FromOldStyle
(
Style
oldStyle
)
;
static
SkTypeface
*
GetDefaultTypeface
(
Style
style
=
SkTypeface
:
:
kNormal
)
;
friend
class
SkFontPriv
;
friend
class
SkPaintPriv
;
friend
class
SkFont
;
private
:
SkFontID
fUniqueID
;
SkFontStyle
fStyle
;
mutable
SkRect
fBounds
;
mutable
SkOnce
fBoundsOnce
;
bool
fIsFixedPitch
;
typedef
SkWeakRefCnt
INHERITED
;
}
;
#
endif
