from
__future__
import
absolute_import
print_function
unicode_literals
import
buildconfig
import
os
from
StringIO
import
StringIO
from
mozbuild
.
preprocessor
import
Preprocessor
def
generate_symbols_file
(
output
input
)
:
    
'
'
'
'
'
'
    
input
=
os
.
path
.
abspath
(
input
)
    
pp
=
Preprocessor
(
)
    
pp
.
context
.
update
(
buildconfig
.
defines
)
    
if
buildconfig
.
substs
[
'
MOZ_DEBUG
'
]
:
        
pp
.
context
[
'
DEBUG
'
]
=
'
1
'
    
if
buildconfig
.
substs
[
'
OS_TARGET
'
]
=
=
'
WINNT
'
:
        
pp
.
context
[
'
DATA
'
]
=
'
DATA
'
    
else
:
        
pp
.
context
[
'
DATA
'
]
=
'
'
    
pp
.
out
=
StringIO
(
)
    
pp
.
do_filter
(
'
substitution
'
)
    
pp
.
do_include
(
input
)
    
symbols
=
[
s
.
strip
(
)
for
s
in
pp
.
out
.
getvalue
(
)
.
splitlines
(
)
if
s
.
strip
(
)
]
    
if
buildconfig
.
substs
[
'
GCC_USE_GNU_LD
'
]
:
        
output
.
write
(
'
{
\
nglobal
:
\
n
%
s
;
\
nlocal
:
\
n
*
;
\
n
}
;
'
                     
%
'
;
\
n
'
.
join
(
symbols
)
)
    
elif
buildconfig
.
substs
[
'
OS_TARGET
'
]
=
=
'
Darwin
'
:
        
output
.
write
(
'
'
.
join
(
'
_
%
s
\
n
'
%
s
for
s
in
symbols
)
)
    
elif
buildconfig
.
substs
[
'
OS_TARGET
'
]
=
=
'
WINNT
'
:
        
libname
ext
=
os
.
path
.
splitext
(
os
.
path
.
basename
(
output
.
name
)
)
        
assert
ext
=
=
'
.
symbols
'
        
output
.
write
(
'
LIBRARY
%
s
\
nEXPORTS
\
n
%
s
\
n
'
                     
%
(
libname
'
\
n
'
.
join
(
symbols
)
)
)
    
return
set
(
pp
.
includes
)
