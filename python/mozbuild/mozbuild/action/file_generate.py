from
__future__
import
absolute_import
print_function
import
argparse
import
imp
import
os
import
sys
import
traceback
from
mozbuild
.
pythonutil
import
iter_modules_in_path
from
mozbuild
.
makeutil
import
Makefile
from
mozbuild
.
util
import
FileAvoidWrite
import
buildconfig
def
main
(
argv
)
:
    
parser
=
argparse
.
ArgumentParser
(
'
Generate
a
file
from
a
Python
script
'
                                     
add_help
=
False
)
    
parser
.
add_argument
(
'
-
-
locale
'
metavar
=
'
locale
'
type
=
str
                        
help
=
'
The
locale
in
use
.
'
)
    
parser
.
add_argument
(
'
python_script
'
metavar
=
'
python
-
script
'
type
=
str
                        
help
=
'
The
Python
script
to
run
'
)
    
parser
.
add_argument
(
'
method_name
'
metavar
=
'
method
-
name
'
type
=
str
                        
help
=
'
The
method
of
the
script
to
invoke
'
)
    
parser
.
add_argument
(
'
output_file
'
metavar
=
'
output
-
file
'
type
=
str
                        
help
=
'
The
file
to
generate
'
)
    
parser
.
add_argument
(
'
dep_file
'
metavar
=
'
dep
-
file
'
type
=
str
                        
help
=
'
File
to
write
any
additional
make
dependencies
to
'
)
    
parser
.
add_argument
(
'
dep_target
'
metavar
=
'
dep
-
target
'
type
=
str
                        
help
=
'
Make
target
to
use
in
the
dependencies
file
'
)
    
parser
.
add_argument
(
'
additional_arguments
'
metavar
=
'
arg
'
                        
nargs
=
argparse
.
REMAINDER
                        
help
=
"
Additional
arguments
to
the
script
'
s
main
(
)
method
"
)
    
args
=
parser
.
parse_args
(
argv
)
    
kwargs
=
{
}
    
if
args
.
locale
:
        
kwargs
[
'
locale
'
]
=
args
.
locale
    
script
=
args
.
python_script
    
sys
.
path
.
append
(
os
.
path
.
dirname
(
script
)
)
    
with
open
(
script
'
r
'
)
as
fh
:
        
module
=
imp
.
load_module
(
'
script
'
fh
script
                                 
(
'
.
py
'
'
r
'
imp
.
PY_SOURCE
)
)
    
method
=
args
.
method_name
    
if
not
hasattr
(
module
method
)
:
        
print
(
'
Error
:
script
"
{
0
}
"
is
missing
a
{
1
}
method
'
.
format
(
script
method
)
              
file
=
sys
.
stderr
)
        
return
1
    
ret
=
1
    
try
:
        
with
FileAvoidWrite
(
args
.
output_file
mode
=
'
rb
'
)
as
output
:
            
ret
=
module
.
__dict__
[
method
]
(
output
*
args
.
additional_arguments
*
*
kwargs
)
            
if
isinstance
(
ret
set
)
:
                
deps
=
ret
                
ret
=
None
            
else
:
                
deps
=
set
(
)
            
if
not
ret
:
                
deps
|
=
set
(
iter_modules_in_path
(
buildconfig
.
topsrcdir
                                                 
buildconfig
.
topobjdir
)
)
                
deps
|
=
set
(
buildconfig
.
get_dependencies
(
)
)
                
mk
=
Makefile
(
)
                
mk
.
create_rule
(
[
args
.
dep_target
]
)
.
add_dependencies
(
deps
)
                
with
FileAvoidWrite
(
args
.
dep_file
)
as
dep_file
:
                    
mk
.
dump
(
dep_file
)
        
try
:
            
os
.
utime
(
args
.
output_file
None
)
        
except
:
            
print
(
'
Error
processing
file
"
{
0
}
"
'
.
format
(
args
.
output_file
)
                  
file
=
sys
.
stderr
)
            
traceback
.
print_exc
(
)
    
except
IOError
as
e
:
        
print
(
'
Error
opening
file
"
{
0
}
"
'
.
format
(
e
.
filename
)
file
=
sys
.
stderr
)
        
traceback
.
print_exc
(
)
        
return
1
    
return
ret
if
__name__
=
=
'
__main__
'
:
    
sys
.
exit
(
main
(
sys
.
argv
[
1
:
]
)
)
