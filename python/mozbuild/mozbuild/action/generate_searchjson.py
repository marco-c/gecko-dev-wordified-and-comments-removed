from
__future__
import
absolute_import
import
sys
import
json
import
copy
engines
=
[
]
locale
=
sys
.
argv
[
2
]
output_file
=
sys
.
argv
[
3
]
output
=
open
(
output_file
'
w
'
)
with
open
(
sys
.
argv
[
1
]
)
as
f
:
    
searchinfo
=
json
.
load
(
f
)
if
locale
in
searchinfo
[
"
locales
"
]
:
    
localeSearchInfo
=
searchinfo
[
"
locales
"
]
[
locale
]
else
:
    
localeSearchInfo
=
{
}
    
localeSearchInfo
[
"
default
"
]
=
searchinfo
[
"
default
"
]
def
validateDefault
(
key
)
:
    
if
key
not
in
searchinfo
[
"
default
"
]
:
        
print
>
>
sys
.
stderr
"
Error
:
Missing
default
%
s
in
list
.
json
"
%
(
key
)
        
sys
.
exit
(
1
)
validateDefault
(
"
searchDefault
"
)
validateDefault
(
"
visibleDefaultEngines
"
)
if
"
searchDefault
"
not
in
localeSearchInfo
[
"
default
"
]
:
    
localeSearchInfo
[
"
default
"
]
[
"
searchDefault
"
]
=
searchinfo
[
"
default
"
]
[
"
searchDefault
"
]
if
(
    
"
searchOrder
"
not
in
localeSearchInfo
[
"
default
"
]
    
and
"
searchOrder
"
in
searchinfo
[
"
default
"
]
)
:
    
localeSearchInfo
[
"
default
"
]
[
"
searchOrder
"
]
=
searchinfo
[
"
default
"
]
[
"
searchOrder
"
]
if
"
regionOverrides
"
in
searchinfo
:
    
regionOverrides
=
searchinfo
[
"
regionOverrides
"
]
    
for
region
in
regionOverrides
:
        
enginesToOverride
=
set
(
regionOverrides
[
region
]
.
keys
(
)
)
        
if
region
in
localeSearchInfo
and
"
visibleDefaultEngines
"
in
localeSearchInfo
[
region
]
:
            
visibleDefaultEngines
=
localeSearchInfo
[
region
]
[
"
visibleDefaultEngines
"
]
        
else
:
            
visibleDefaultEngines
=
localeSearchInfo
[
"
default
"
]
[
"
visibleDefaultEngines
"
]
        
if
set
(
visibleDefaultEngines
)
&
enginesToOverride
:
            
if
region
not
in
localeSearchInfo
:
                
localeSearchInfo
[
region
]
=
{
}
            
localeSearchInfo
[
region
]
[
"
visibleDefaultEngines
"
]
=
copy
.
deepcopy
(
                
visibleDefaultEngines
)
            
for
i
engine
in
enumerate
(
localeSearchInfo
[
region
]
[
"
visibleDefaultEngines
"
]
)
:
                
if
engine
in
regionOverrides
[
region
]
:
                    
localeSearchInfo
[
region
]
[
"
visibleDefaultEngines
"
]
[
i
]
=
\
                        
regionOverrides
[
region
]
[
engine
]
output
.
write
(
json
.
dumps
(
localeSearchInfo
ensure_ascii
=
False
)
.
encode
(
'
utf8
'
)
)
output
.
close
(
)
