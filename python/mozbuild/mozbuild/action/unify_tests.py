import
argparse
import
buildconfig
import
os
import
mozpack
.
path
as
mozpath
from
mozpack
.
files
import
FileFinder
from
mozpack
.
copier
import
FileCopier
from
mozpack
.
errors
import
errors
from
mozpack
.
unify
import
UnifiedFinder
class
UnifiedTestFinder
(
UnifiedFinder
)
:
    
def
unify_file
(
self
path
file1
file2
)
:
        
unified
=
super
(
UnifiedTestFinder
self
)
.
unify_file
(
path
file1
file2
)
        
basename
=
mozpath
.
basename
(
path
)
        
if
basename
in
(
"
mozinfo
.
json
"
"
wptrunner
.
local
.
ini
"
)
:
            
assert
not
unified
            
errors
.
ignore_errors
(
)
            
self
.
_report_difference
(
path
file1
file2
)
            
errors
.
ignore_errors
(
False
)
            
return
file1
        
elif
basename
=
=
"
dump_syms_mac
"
:
            
assert
file1
.
open
(
)
.
read
(
)
=
=
file2
.
open
(
)
.
read
(
)
            
return
file1
        
return
unified
def
main
(
)
:
    
parser
=
argparse
.
ArgumentParser
(
        
description
=
"
Merge
two
directories
creating
Universal
binaries
for
"
        
"
executables
and
libraries
they
contain
.
"
    
)
    
parser
.
add_argument
(
"
dir1
"
help
=
"
Directory
"
)
    
parser
.
add_argument
(
"
dir2
"
help
=
"
Directory
to
merge
"
)
    
options
=
parser
.
parse_args
(
)
    
buildconfig
.
substs
[
"
OS_ARCH
"
]
=
"
Darwin
"
    
buildconfig
.
substs
[
"
LIPO
"
]
=
os
.
environ
.
get
(
"
LIPO
"
)
    
dir1_finder
=
FileFinder
(
options
.
dir1
find_executables
=
True
find_dotfiles
=
True
)
    
dir2_finder
=
FileFinder
(
options
.
dir2
find_executables
=
True
find_dotfiles
=
True
)
    
finder
=
UnifiedTestFinder
(
dir1_finder
dir2_finder
)
    
copier
=
FileCopier
(
)
    
with
errors
.
accumulate
(
)
:
        
for
p
f
in
finder
:
            
copier
.
add
(
p
f
)
    
copier
.
copy
(
options
.
dir1
skip_if_older
=
False
)
if
__name__
=
=
"
__main__
"
:
    
main
(
)
