from
__future__
import
absolute_import
print_function
unicode_literals
import
argparse
import
errno
import
os
import
shutil
import
sys
import
zipfile
from
mozpack
.
files
import
FileFinder
import
mozpack
.
path
as
mozpath
from
mozbuild
.
util
import
ensureParentDir
def
explode
(
aar
destdir
)
:
    
name
_
=
os
.
path
.
splitext
(
os
.
path
.
basename
(
aar
)
)
    
destdir
=
mozpath
.
join
(
destdir
name
)
    
if
os
.
path
.
exists
(
destdir
)
:
        
shutil
.
rmtree
(
destdir
)
    
ensureParentDir
(
destdir
)
    
with
zipfile
.
ZipFile
(
aar
)
as
zf
:
        
zf
.
extractall
(
destdir
)
    
classes_jar
=
mozpath
.
join
(
destdir
name
+
'
-
classes
.
jar
'
)
    
os
.
rename
(
mozpath
.
join
(
destdir
'
classes
.
jar
'
)
classes_jar
)
    
finder
=
FileFinder
(
mozpath
.
join
(
destdir
'
libs
'
)
find_executables
=
False
)
    
for
p
_
in
finder
.
find
(
'
*
.
jar
'
)
:
        
jar
=
mozpath
.
join
(
finder
.
base
name
+
'
-
'
+
p
)
        
os
.
rename
(
mozpath
.
join
(
finder
.
base
p
)
jar
)
    
assets
=
mozpath
.
join
(
destdir
'
assets
'
)
    
try
:
        
os
.
rmdir
(
assets
)
    
except
OSError
e
:
        
if
e
.
errno
in
(
errno
.
ENOTEMPTY
errno
.
ENOENT
)
:
            
pass
        
else
:
            
raise
    
return
True
def
main
(
argv
)
:
    
parser
=
argparse
.
ArgumentParser
(
        
description
=
'
Explode
Android
AAR
file
.
'
)
    
parser
.
add_argument
(
'
-
-
destdir
'
required
=
True
help
=
'
Destination
directory
.
'
)
    
parser
.
add_argument
(
'
aars
'
nargs
=
'
+
'
help
=
'
Path
to
AAR
file
(
s
)
.
'
)
    
args
=
parser
.
parse_args
(
argv
)
    
for
aar
in
args
.
aars
:
        
if
not
explode
(
aar
args
.
destdir
)
:
            
return
1
    
return
0
if
__name__
=
=
'
__main__
'
:
    
sys
.
exit
(
main
(
sys
.
argv
[
1
:
]
)
)
