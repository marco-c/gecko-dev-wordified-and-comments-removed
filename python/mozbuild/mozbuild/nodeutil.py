from
__future__
import
absolute_import
import
os
import
subprocess
import
platform
from
mozboot
.
util
import
get_state_dir
import
which
from
distutils
.
version
import
(
    
StrictVersion
)
NODE_MIN_VERSION
=
StrictVersion
(
"
8
.
11
.
0
"
)
NPM_MIN_VERSION
=
StrictVersion
(
"
5
.
6
.
0
"
)
def
find_node_paths
(
)
:
    
"
"
"
Determines
the
possible
paths
for
node
executables
.
    
Returns
a
list
of
paths
which
includes
the
build
state
directory
.
    
"
"
"
    
mozbuild_state_dir
_
=
get_state_dir
(
)
    
if
platform
.
system
(
)
=
=
"
Windows
"
:
        
mozbuild_node_path
=
os
.
path
.
join
(
mozbuild_state_dir
'
node
'
)
    
else
:
        
mozbuild_node_path
=
os
.
path
.
join
(
mozbuild_state_dir
'
node
'
'
bin
'
)
    
paths
=
[
mozbuild_node_path
]
+
os
.
environ
.
get
(
'
PATH
'
)
.
split
(
os
.
pathsep
)
    
if
platform
.
system
(
)
=
=
"
Windows
"
:
        
paths
+
=
[
            
"
%
s
\
\
nodejs
"
%
os
.
environ
.
get
(
"
SystemDrive
"
)
            
os
.
path
.
join
(
os
.
environ
.
get
(
"
ProgramFiles
"
)
"
nodejs
"
)
            
os
.
path
.
join
(
os
.
environ
.
get
(
"
PROGRAMW6432
"
)
"
nodejs
"
)
            
os
.
path
.
join
(
os
.
environ
.
get
(
"
PROGRAMFILES
"
)
"
nodejs
"
)
        
]
    
return
paths
def
check_executable_version
(
exe
wrap_call_with_node
=
False
)
:
    
"
"
"
Determine
the
version
of
a
Node
executable
by
invoking
it
.
    
May
raise
subprocess
.
CalledProcessError
or
ValueError
on
failure
.
    
"
"
"
    
out
=
None
    
if
wrap_call_with_node
:
        
binary
_
=
find_node_executable
(
)
        
if
binary
:
            
out
=
subprocess
.
check_output
(
[
binary
exe
"
-
-
version
"
]
)
.
lstrip
(
'
v
'
)
.
rstrip
(
)
    
if
not
out
:
        
out
=
subprocess
.
check_output
(
[
exe
"
-
-
version
"
]
)
.
lstrip
(
'
v
'
)
.
rstrip
(
)
    
return
StrictVersion
(
out
)
def
simple_which
(
filename
path
=
None
)
:
    
exts
=
[
"
.
cmd
"
"
.
exe
"
"
"
]
if
platform
.
system
(
)
=
=
"
Windows
"
else
[
"
"
]
    
for
ext
in
exts
:
        
try
:
            
return
which
.
which
(
filename
+
ext
path
)
        
except
which
.
WhichError
:
            
pass
    
return
None
def
find_node_executable
(
nodejs_exe
=
os
.
environ
.
get
(
'
NODEJS
'
)
min_version
=
NODE_MIN_VERSION
)
:
    
"
"
"
Find
a
Node
executable
from
the
mozbuild
directory
.
    
Returns
a
tuple
containing
the
the
path
to
an
executable
binary
and
a
    
version
tuple
.
Both
tuple
entries
will
be
None
if
a
Node
executable
    
could
not
be
resolved
.
    
"
"
"
    
if
nodejs_exe
:
        
try
:
            
version
=
check_executable_version
(
nodejs_exe
)
        
except
(
subprocess
.
CalledProcessError
ValueError
)
:
            
return
None
None
        
if
version
>
=
min_version
:
            
return
nodejs_exe
version
.
version
        
return
None
None
    
return
find_executable
(
[
'
nodejs
'
'
node
'
]
min_version
)
def
find_npm_executable
(
min_version
=
NPM_MIN_VERSION
)
:
    
"
"
"
Find
a
Node
executable
from
the
mozbuild
directory
.
    
Returns
a
tuple
containing
the
the
path
to
an
executable
binary
and
a
    
version
tuple
.
Both
tuple
entries
will
be
None
if
a
Node
executable
    
could
not
be
resolved
.
    
"
"
"
    
return
find_executable
(
[
"
npm
"
]
min_version
True
)
def
find_executable
(
names
min_version
use_node_for_version_check
=
False
)
:
    
paths
=
find_node_paths
(
)
    
found_exe
=
None
    
for
name
in
names
:
        
try
:
            
exe
=
simple_which
(
name
paths
)
        
except
which
.
WhichError
:
            
continue
        
if
not
exe
:
            
continue
        
if
not
found_exe
:
            
found_exe
=
exe
        
try
:
            
version
=
check_executable_version
(
exe
use_node_for_version_check
)
        
except
(
subprocess
.
CalledProcessError
ValueError
)
:
            
continue
        
if
version
>
=
min_version
:
            
return
exe
version
.
version
    
return
found_exe
None
