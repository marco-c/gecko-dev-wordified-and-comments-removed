from
__future__
import
absolute_import
print_function
unicode_literals
import
os
import
shutil
import
subprocess
import
tempfile
from
buildconfig
import
topsrcdir
from
unittest
.
mock
import
Mock
from
mozbuild
.
vendor
.
vendor_python
import
VendorPython
import
mozunit
def
test_up_to_date_vendor
(
)
:
    
with
tempfile
.
TemporaryDirectory
(
)
as
work_dir
:
        
subprocess
.
check_call
(
[
"
hg
"
"
init
"
work_dir
]
)
        
os
.
makedirs
(
os
.
path
.
join
(
work_dir
"
build
"
)
)
        
os
.
makedirs
(
os
.
path
.
join
(
work_dir
"
third_party
"
)
)
        
with
open
(
            
os
.
path
.
join
(
work_dir
"
build
"
"
common_virtualenv_packages
.
txt
"
)
"
a
"
        
)
as
file
:
            
file
.
write
(
"
vendored
:
third_party
/
python
/
Click
\
n
"
)
            
file
.
write
(
"
vendored
:
third_party
/
python
/
pip
\
n
"
)
            
file
.
write
(
"
vendored
:
third_party
/
python
/
pip_tools
\
n
"
)
            
file
.
write
(
"
vendored
:
third_party
/
python
/
setuptools
\
n
"
)
            
file
.
write
(
"
vendored
:
third_party
/
python
/
wheel
\
n
"
)
        
existing_vendored
=
os
.
path
.
join
(
topsrcdir
"
third_party
"
"
python
"
)
        
work_vendored
=
os
.
path
.
join
(
work_dir
"
third_party
"
"
python
"
)
        
shutil
.
copytree
(
existing_vendored
work_vendored
)
        
existing_mach
=
os
.
path
.
join
(
topsrcdir
"
python
"
"
mach
"
)
        
work_mach
=
os
.
path
.
join
(
work_dir
"
python
"
"
mach
"
)
        
shutil
.
copytree
(
existing_mach
work_mach
)
        
vendor
=
VendorPython
(
            
work_dir
None
Mock
(
)
topobjdir
=
os
.
path
.
join
(
work_dir
"
obj
"
)
        
)
        
vendor
.
vendor
(
)
        
subprocess
.
check_call
(
            
[
                
"
diff
"
                
"
-
r
"
                
existing_vendored
                
work_vendored
                
"
-
-
exclude
=
__pycache__
"
            
]
        
)
if
__name__
=
=
"
__main__
"
:
    
mozunit
.
main
(
)
