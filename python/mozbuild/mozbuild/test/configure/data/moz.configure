option
(
"
-
-
enable
-
simple
"
help
=
"
Enable
simple
"
)
option
(
"
-
-
enable
-
with
-
env
"
env
=
"
MOZ_WITH_ENV
"
help
=
"
Enable
with
env
"
)
option
(
"
-
-
enable
-
values
"
nargs
=
"
*
"
metavar
=
"
V
"
help
=
"
Enable
values
V
"
)
option
(
"
-
-
enable
-
others
"
nargs
=
"
+
"
metavar
=
"
V
"
help
=
"
Enable
other
values
V
"
)
option
(
"
-
-
enable
-
triplet
"
nargs
=
3
metavar
=
"
V
"
help
=
"
Enable
triplet
V
"
)
set_config
(
"
TRIPLET
"
depends
(
"
-
-
enable
-
triplet
"
)
(
lambda
x
:
x
and
x
[
0
]
)
)
option
(
"
-
-
enable
-
choices
"
nargs
=
"
*
"
choices
=
(
"
a
"
"
b
"
"
c
"
)
help
=
"
Enable
choices
"
)
option
(
"
-
-
enable
-
optional
-
choices
"
nargs
=
"
?
"
choices
=
(
"
a
"
"
b
"
"
c
"
)
help
=
"
Enable
optional
choices
"
)
option
(
"
-
-
enable
-
multiple
-
choices
"
nargs
=
"
+
"
choices
=
(
"
a
"
"
b
"
"
c
"
)
help
=
"
Enable
multiple
choices
"
)
option
(
"
-
-
without
-
thing
"
help
=
"
Build
without
thing
"
)
option
(
"
-
-
with
-
stuff
"
default
=
False
help
=
"
Build
with
stuff
"
)
option
(
"
-
-
option
"
env
=
"
MOZ_OPTION
"
help
=
"
Option
"
)
option
(
env
=
"
CC
"
nargs
=
1
help
=
"
C
Compiler
"
)
depends
(
"
-
-
enable
-
simple
"
)
def
simple
(
simple
)
:
if
simple
:
return
simple
set_config
(
"
ENABLED_SIMPLE
"
simple
)
depends
(
"
-
-
enable
-
simple
"
)
def
simple
(
simple
)
:
return
simple
set_config
(
"
SIMPLE
"
simple
)
depends
(
"
-
-
enable
-
with
-
env
"
)
def
with_env
(
with_env
)
:
return
with_env
set_config
(
"
WITH_ENV
"
with_env
)
depends
(
"
-
-
disable
-
values
"
)
def
with_env2
(
values
)
:
return
values
set_config
(
"
VALUES
"
with_env2
)
depends
(
"
CC
"
)
def
is_gcc
(
cc
)
:
return
cc
and
"
gcc
"
in
cc
[
0
]
set_config
(
"
IS_GCC
"
is_gcc
)
depends
(
with_env2
)
def
with_env3
(
values
)
:
return
values
set_config
(
"
VALUES2
"
with_env3
)
depends
(
with_env3
)
def
with_env4
(
values
)
:
return
values
depends
(
with_env4
)
def
with_env5
(
values
)
:
return
values
set_config
(
"
VALUES3
"
with_env5
)
depends
(
"
-
-
enable
-
simple
"
)
def
simple
(
simple
)
:
return
"
simple
"
if
simple
else
"
not
-
simple
"
option
(
"
-
-
with
-
returned
-
default
"
default
=
simple
help
=
"
Returned
default
"
)
depends
(
"
-
-
with
-
returned
-
default
"
)
def
default
(
value
)
:
return
value
set_config
(
"
DEFAULTED
"
default
)
depends
(
"
-
-
enable
-
simple
"
)
def
other_default
(
simple
)
:
return
bool
(
simple
)
option
(
"
-
-
with
-
other
-
default
"
default
=
other_default
help
=
"
{
With
|
Without
}
other
default
"
)
depends
(
"
-
-
enable
-
values
"
)
def
choices
(
values
)
:
if
len
(
values
)
:
return
{
"
alpha
"
:
(
"
a
"
"
b
"
"
c
"
)
"
numeric
"
:
(
"
0
"
"
1
"
"
2
"
)
}
.
get
(
values
[
0
]
)
option
(
"
-
-
returned
-
choices
"
choices
=
choices
help
=
"
Choices
"
)
depends
(
"
-
-
returned
-
choices
"
)
def
returned_choices
(
values
)
:
return
values
set_config
(
"
CHOICES
"
returned_choices
)
depends
(
"
-
-
enable
-
others
"
)
def
other_choices
(
values
)
:
return
values
set_config
(
"
OTHER_CHOICES
"
other_choices
)
option
(
"
-
-
disable
-
foo
"
nargs
=
"
*
"
choices
=
(
"
x
"
"
y
"
)
help
=
"
{
Enable
|
Disable
}
Foo
"
)
depends
(
"
-
-
without
-
thing
"
"
-
-
with
-
stuff
"
with_env4
"
-
-
option
"
"
-
-
enable
-
choices
"
"
-
-
enable
-
multiple
-
choices
"
"
-
-
enable
-
optional
-
choices
"
"
-
-
with
-
other
-
default
"
"
-
-
disable
-
foo
"
)
def
remainder
(
*
args
)
:
return
args
set_config
(
"
REMAINDER
"
remainder
)
include
(
"
included
.
configure
"
)
option
(
"
-
-
enable
-
include
"
nargs
=
1
metavar
=
"
I
"
help
=
"
Include
I
"
)
depends
(
"
-
-
enable
-
include
"
)
def
include_path
(
path
)
:
return
path
[
0
]
if
path
else
None
include
(
include_path
)
option
(
"
-
-
with
-
imports
"
nargs
=
"
?
"
metavar
=
"
I
"
help
=
"
Imports
I
"
)
depends
(
"
-
-
with
-
imports
"
)
def
with_imports
(
value
)
:
if
len
(
value
)
:
return
hasattr
(
os
.
path
"
abspath
"
)
set_config
(
"
HAS_ABSPATH
"
with_imports
)
depends
(
"
-
-
with
-
imports
"
)
imports
(
"
os
.
path
"
)
def
with_imports
(
value
)
:
if
len
(
value
)
:
return
hasattr
(
os
.
path
"
getatime
"
)
set_config
(
"
HAS_GETATIME
"
with_imports
)
depends
(
"
-
-
with
-
imports
"
)
def
with_imports
(
value
)
:
if
len
(
value
)
:
return
hasattr
(
os
.
path
"
getatime
"
)
set_config
(
"
HAS_GETATIME2
"
with_imports
)
indirectly_define_option
(
"
-
-
indirect
-
option
"
help
=
"
Indirectly
defined
option
"
)
depends
(
"
-
-
indirect
-
option
"
)
def
indirect_option
(
option
)
:
return
option
