template
def
simple_decorator
(
func
)
:
return
func
template
def
wrapper_decorator
(
func
)
:
def
wrapper
(
*
args
*
*
kwargs
)
:
return
func
(
*
args
*
*
kwargs
)
return
wrapper
template
def
function_decorator
(
*
args
*
*
kwargs
)
:
def
wrapper_decorator
(
func
)
:
def
wrapper
(
*
args
*
*
kwargs
)
:
return
func
(
*
args
*
*
kwargs
)
return
wrapper
return
wrapper_decorator
depends
(
'
-
-
help
'
)
simple_decorator
def
foo
(
help
)
:
global
FOO
FOO
=
1
depends
(
'
-
-
help
'
)
wrapper_decorator
def
bar
(
help
)
:
global
BAR
BAR
=
1
depends
(
'
-
-
help
'
)
function_decorator
(
'
a
'
'
b
'
'
c
'
)
def
qux
(
help
)
:
global
QUX
QUX
=
1
