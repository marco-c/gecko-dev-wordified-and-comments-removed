from
mach
.
decorators
import
Command
CommandArgument
Command
(
"
throw_nested_explicit
"
category
=
"
testing
"
)
CommandArgument
(
"
-
-
inner
-
message
"
"
-
i
"
default
=
"
Inner
exception
message
"
)
CommandArgument
(
"
-
-
outer
-
message
"
"
-
o
"
default
=
"
Outer
exception
message
"
)
def
throw_nested_explicit
(
command_context
inner_message
outer_message
)
:
    
"
"
"
Throws
a
nested
exception
using
explicit
'
raise
.
.
.
from
.
.
.
'
syntax
.
"
"
"
    
try
:
        
raise
ValueError
(
inner_message
)
    
except
Exception
as
e
:
        
raise
RuntimeError
(
outer_message
)
from
e
Command
(
"
throw_nested_implicit
"
category
=
"
testing
"
)
CommandArgument
(
"
-
-
inner
-
message
"
"
-
i
"
default
=
"
Inner
exception
message
"
)
CommandArgument
(
"
-
-
outer
-
message
"
"
-
o
"
default
=
"
Outer
exception
message
"
)
def
throw_nested_implicit
(
command_context
inner_message
outer_message
)
:
    
"
"
"
Throws
a
nested
exception
through
implicit
chaining
.
"
"
"
    
try
:
        
raise
ValueError
(
inner_message
)
    
except
Exception
:
        
raise
RuntimeError
(
outer_message
)
Command
(
"
throw_nested_suppressed
"
category
=
"
testing
"
)
CommandArgument
(
"
-
-
inner
-
message
"
"
-
i
"
default
=
"
Inner
exception
message
"
)
CommandArgument
(
"
-
-
outer
-
message
"
"
-
o
"
default
=
"
Outer
exception
message
"
)
def
throw_nested_suppressed
(
command_context
inner_message
outer_message
)
:
    
"
"
"
Throws
a
nested
exception
but
suppresses
the
chain
.
"
"
"
    
try
:
        
raise
ValueError
(
inner_message
)
    
except
Exception
:
        
raise
RuntimeError
(
outer_message
)
from
None
Command
(
"
throw_simple
"
category
=
"
testing
"
)
CommandArgument
(
"
-
-
message
"
"
-
m
"
default
=
"
Simple
exception
message
"
)
def
throw_simple
(
command_context
message
)
:
    
"
"
"
Throws
a
simple
exception
with
no
chaining
.
"
"
"
    
raise
RuntimeError
(
message
)
