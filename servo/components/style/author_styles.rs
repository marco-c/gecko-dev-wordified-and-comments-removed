use
crate
:
:
context
:
:
QuirksMode
;
use
crate
:
:
dom
:
:
TElement
;
use
crate
:
:
invalidation
:
:
media_queries
:
:
ToMediaListKey
;
use
crate
:
:
media_queries
:
:
Device
;
use
crate
:
:
shared_lock
:
:
SharedRwLockReadGuard
;
use
crate
:
:
stylesheet_set
:
:
AuthorStylesheetSet
;
use
crate
:
:
stylesheets
:
:
StylesheetInDocument
;
use
crate
:
:
stylist
:
:
CascadeData
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
gecko_bindings
:
:
sugar
:
:
ownership
:
:
{
HasBoxFFI
HasFFI
HasSimpleFFI
}
;
pub
struct
AuthorStyles
<
S
>
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
pub
stylesheets
:
AuthorStylesheetSet
<
S
>
pub
data
:
CascadeData
pub
quirks_mode
:
QuirksMode
}
impl
<
S
>
AuthorStyles
<
S
>
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
#
[
inline
]
pub
fn
new
(
)
-
>
Self
{
Self
{
stylesheets
:
AuthorStylesheetSet
:
:
new
(
)
data
:
CascadeData
:
:
new
(
)
quirks_mode
:
QuirksMode
:
:
NoQuirks
}
}
#
[
inline
]
pub
fn
flush
<
E
>
(
&
mut
self
device
:
&
Device
quirks_mode
:
QuirksMode
guard
:
&
SharedRwLockReadGuard
)
where
E
:
TElement
S
:
ToMediaListKey
{
let
flusher
=
self
.
stylesheets
.
flush
:
:
<
E
>
(
None
None
)
;
if
flusher
.
sheets
.
dirty
(
)
{
self
.
quirks_mode
=
quirks_mode
;
}
let
_
=
self
.
data
.
rebuild
(
device
quirks_mode
flusher
.
sheets
guard
)
;
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
unsafe
impl
HasFFI
for
AuthorStyles
<
:
:
gecko
:
:
data
:
:
GeckoStyleSheet
>
{
type
FFIType
=
:
:
gecko_bindings
:
:
bindings
:
:
RawServoAuthorStyles
;
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
unsafe
impl
HasSimpleFFI
for
AuthorStyles
<
:
:
gecko
:
:
data
:
:
GeckoStyleSheet
>
{
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
unsafe
impl
HasBoxFFI
for
AuthorStyles
<
:
:
gecko
:
:
data
:
:
GeckoStyleSheet
>
{
}
