use
crate
:
:
Atom
;
use
crate
:
:
selector_map
:
:
PrecomputedHashMap
;
use
super
:
:
syntax
:
:
Descriptor
;
use
super
:
:
rule
:
:
InitialValue
;
#
[
derive
(
Debug
Clone
MallocSizeOf
)
]
pub
struct
PropertyRegistration
{
pub
syntax
:
Descriptor
pub
inherits
:
bool
#
[
ignore_malloc_size_of
=
"
Arc
"
]
pub
initial_value
:
Option
<
InitialValue
>
}
#
[
derive
(
Default
)
]
pub
struct
ScriptRegistry
{
properties
:
PrecomputedHashMap
<
Atom
PropertyRegistration
>
}
impl
ScriptRegistry
{
#
[
inline
]
pub
fn
get
(
&
self
name
:
&
Atom
)
-
>
Option
<
&
PropertyRegistration
>
{
self
.
properties
.
get
(
name
)
}
#
[
inline
]
pub
fn
register
(
&
mut
self
name
:
Atom
registration
:
PropertyRegistration
)
{
let
old
=
self
.
properties
.
insert
(
name
registration
)
;
debug_assert
!
(
old
.
is_none
(
)
"
Already
registered
?
Should
be
an
error
"
)
;
}
}
