use
std
:
:
sync
:
:
Arc
;
use
selectors
:
:
tree
:
:
TNode
;
use
selectors
:
:
matching
:
:
DeclarationBlock
;
use
node
:
:
TElementAttributes
;
use
properties
:
:
PropertyDeclaration
;
use
selector_matching
:
:
Stylist
;
use
util
:
:
smallvec
:
:
VecLike
;
#
[
derive
(
Copy
Clone
PartialEq
Eq
)
]
pub
enum
UnsignedIntegerAttribute
{
ColSpan
}
pub
trait
PresentationalHintSynthesis
{
fn
synthesize_presentational_hints_for_legacy_attributes
<
'
a
N
V
>
(
&
self
node
:
&
N
matching_rules_list
:
&
mut
V
shareable
:
&
mut
bool
)
where
N
:
TNode
<
'
a
>
N
:
:
Element
:
TElementAttributes
<
'
a
>
V
:
VecLike
<
DeclarationBlock
<
Vec
<
PropertyDeclaration
>
>
>
;
}
impl
PresentationalHintSynthesis
for
Stylist
{
fn
synthesize_presentational_hints_for_legacy_attributes
<
'
a
N
V
>
(
&
self
node
:
&
N
matching_rules_list
:
&
mut
V
shareable
:
&
mut
bool
)
where
N
:
TNode
<
'
a
>
N
:
:
Element
:
TElementAttributes
<
'
a
>
V
:
VecLike
<
DeclarationBlock
<
Vec
<
PropertyDeclaration
>
>
>
{
let
element
=
node
.
as_element
(
)
;
let
length
=
matching_rules_list
.
len
(
)
;
element
.
synthesize_presentational_hints_for_legacy_attributes
(
matching_rules_list
)
;
if
matching_rules_list
.
len
(
)
!
=
length
{
*
shareable
=
false
;
}
}
}
#
[
inline
]
pub
fn
from_declaration
(
rule
:
PropertyDeclaration
)
-
>
DeclarationBlock
<
Vec
<
PropertyDeclaration
>
>
{
DeclarationBlock
:
:
from_declarations
(
Arc
:
:
new
(
vec
!
[
rule
]
)
)
}
