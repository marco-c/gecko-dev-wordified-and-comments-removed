use
node
:
:
{
TElement
TElementAttributes
TNode
}
;
use
properties
:
:
common_types
:
:
specified
:
:
CSSColor
;
use
properties
:
:
DeclaredValue
:
:
SpecifiedValue
;
use
properties
:
:
PropertyDeclaration
:
:
*
;
use
properties
:
:
{
CSSFloat
specified
}
;
use
selector_matching
:
:
{
DeclarationBlock
Stylist
}
;
use
cssparser
:
:
Color
;
use
servo_util
:
:
geometry
:
:
Au
;
use
servo_util
:
:
smallvec
:
:
VecLike
;
use
servo_util
:
:
str
:
:
LengthOrPercentageOrAuto
;
#
[
deriving
(
Copy
PartialEq
Eq
)
]
pub
enum
LengthAttribute
{
Width
}
#
[
deriving
(
Copy
PartialEq
Eq
)
]
pub
enum
IntegerAttribute
{
Size
Cols
Rows
}
#
[
deriving
(
Copy
PartialEq
Eq
)
]
pub
enum
UnsignedIntegerAttribute
{
Border
ColSpan
}
#
[
deriving
(
Copy
PartialEq
Eq
)
]
pub
enum
SimpleColorAttribute
{
BgColor
}
pub
trait
PresentationalHintSynthesis
{
fn
synthesize_presentational_hints_for_legacy_attributes
<
'
a
E
N
V
>
(
&
self
node
:
&
N
matching_rules_list
:
&
mut
V
shareable
:
&
mut
bool
)
where
E
:
TElement
<
'
a
>
+
TElementAttributes
N
:
TNode
<
'
a
E
>
V
:
VecLike
<
DeclarationBlock
>
;
fn
synthesize_presentational_hint_for_legacy_background_color_attribute
<
'
a
E
V
>
(
&
self
element
:
E
matching_rules_list
:
&
mut
V
shareable
:
&
mut
bool
)
where
E
:
TElement
<
'
a
>
+
TElementAttributes
V
:
VecLike
<
DeclarationBlock
>
;
fn
synthesize_presentational_hint_for_legacy_border_attribute
<
'
a
E
V
>
(
&
self
element
:
E
matching_rules_list
:
&
mut
V
shareable
:
&
mut
bool
)
where
E
:
TElement
<
'
a
>
+
TElementAttributes
V
:
VecLike
<
DeclarationBlock
>
;
}
impl
PresentationalHintSynthesis
for
Stylist
{
fn
synthesize_presentational_hints_for_legacy_attributes
<
'
a
E
N
V
>
(
&
self
node
:
&
N
matching_rules_list
:
&
mut
V
shareable
:
&
mut
bool
)
where
E
:
TElement
<
'
a
>
+
TElementAttributes
N
:
TNode
<
'
a
E
>
V
:
VecLike
<
DeclarationBlock
>
{
let
element
=
node
.
as_element
(
)
;
match
element
.
get_local_name
(
)
{
name
if
*
name
=
=
atom
!
(
"
td
"
)
=
>
{
match
element
.
get_length_attribute
(
LengthAttribute
:
:
Width
)
{
LengthOrPercentageOrAuto
:
:
Auto
=
>
{
}
LengthOrPercentageOrAuto
:
:
Percentage
(
percentage
)
=
>
{
let
width_value
=
specified
:
:
LengthOrPercentageOrAuto
:
:
Percentage
(
percentage
)
;
matching_rules_list
.
vec_push
(
DeclarationBlock
:
:
from_declaration
(
WidthDeclaration
(
SpecifiedValue
(
width_value
)
)
)
)
;
*
shareable
=
false
}
LengthOrPercentageOrAuto
:
:
Length
(
length
)
=
>
{
let
width_value
=
specified
:
:
LengthOrPercentageOrAuto
:
:
Length
(
specified
:
:
Length
:
:
Au
(
length
)
)
;
matching_rules_list
.
vec_push
(
DeclarationBlock
:
:
from_declaration
(
WidthDeclaration
(
SpecifiedValue
(
width_value
)
)
)
)
;
*
shareable
=
false
}
}
self
.
synthesize_presentational_hint_for_legacy_background_color_attribute
(
element
matching_rules_list
shareable
)
;
self
.
synthesize_presentational_hint_for_legacy_border_attribute
(
element
matching_rules_list
shareable
)
;
}
name
if
*
name
=
=
atom
!
(
"
table
"
)
=
>
{
self
.
synthesize_presentational_hint_for_legacy_background_color_attribute
(
element
matching_rules_list
shareable
)
;
self
.
synthesize_presentational_hint_for_legacy_border_attribute
(
element
matching_rules_list
shareable
)
;
}
name
if
*
name
=
=
atom
!
(
"
body
"
)
|
|
*
name
=
=
atom
!
(
"
tr
"
)
|
|
*
name
=
=
atom
!
(
"
thead
"
)
|
|
*
name
=
=
atom
!
(
"
tbody
"
)
|
|
*
name
=
=
atom
!
(
"
tfoot
"
)
=
>
{
self
.
synthesize_presentational_hint_for_legacy_background_color_attribute
(
element
matching_rules_list
shareable
)
;
}
name
if
*
name
=
=
atom
!
(
"
input
"
)
=
>
{
match
element
.
get_integer_attribute
(
IntegerAttribute
:
:
Size
)
{
Some
(
value
)
if
value
!
=
0
=
>
{
let
value
=
match
element
.
get_attr
(
&
ns
!
(
"
"
)
&
atom
!
(
"
type
"
)
)
{
Some
(
"
text
"
)
|
Some
(
"
password
"
)
=
>
{
specified
:
:
Length
:
:
ServoCharacterWidth
(
value
)
}
_
=
>
specified
:
:
Length
:
:
Au
(
Au
:
:
from_px
(
value
as
int
)
)
}
;
matching_rules_list
.
vec_push
(
DeclarationBlock
:
:
from_declaration
(
WidthDeclaration
(
SpecifiedValue
(
specified
:
:
LengthOrPercentageOrAuto
:
:
Length
(
value
)
)
)
)
)
;
*
shareable
=
false
}
Some
(
_
)
|
None
=
>
{
}
}
}
name
if
*
name
=
=
atom
!
(
"
textarea
"
)
=
>
{
match
element
.
get_integer_attribute
(
IntegerAttribute
:
:
Cols
)
{
Some
(
value
)
if
value
!
=
0
=
>
{
let
value
=
specified
:
:
Length
:
:
ServoCharacterWidth
(
value
)
;
matching_rules_list
.
vec_push
(
DeclarationBlock
:
:
from_declaration
(
WidthDeclaration
(
SpecifiedValue
(
specified
:
:
LengthOrPercentageOrAuto
:
:
Length
(
value
)
)
)
)
)
;
*
shareable
=
false
}
Some
(
_
)
|
None
=
>
{
}
}
match
element
.
get_integer_attribute
(
IntegerAttribute
:
:
Rows
)
{
Some
(
value
)
if
value
!
=
0
=
>
{
let
value
=
specified
:
:
Length
:
:
Em
(
value
as
CSSFloat
)
;
matching_rules_list
.
vec_push
(
DeclarationBlock
:
:
from_declaration
(
HeightDeclaration
(
SpecifiedValue
(
specified
:
:
LengthOrPercentageOrAuto
:
:
Length
(
value
)
)
)
)
)
;
*
shareable
=
false
}
Some
(
_
)
|
None
=
>
{
}
}
}
_
=
>
{
}
}
}
fn
synthesize_presentational_hint_for_legacy_background_color_attribute
<
'
a
E
V
>
(
&
self
element
:
E
matching_rules_list
:
&
mut
V
shareable
:
&
mut
bool
)
where
E
:
TElement
<
'
a
>
+
TElementAttributes
V
:
VecLike
<
DeclarationBlock
>
{
match
element
.
get_simple_color_attribute
(
SimpleColorAttribute
:
:
BgColor
)
{
None
=
>
{
}
Some
(
color
)
=
>
{
matching_rules_list
.
vec_push
(
DeclarationBlock
:
:
from_declaration
(
BackgroundColorDeclaration
(
SpecifiedValue
(
CSSColor
{
parsed
:
Color
:
:
RGBA
(
color
)
authored
:
None
}
)
)
)
)
;
*
shareable
=
false
}
}
}
fn
synthesize_presentational_hint_for_legacy_border_attribute
<
'
a
E
V
>
(
&
self
element
:
E
matching_rules_list
:
&
mut
V
shareable
:
&
mut
bool
)
where
E
:
TElement
<
'
a
>
+
TElementAttributes
V
:
VecLike
<
DeclarationBlock
>
{
match
element
.
get_unsigned_integer_attribute
(
UnsignedIntegerAttribute
:
:
Border
)
{
None
=
>
{
}
Some
(
length
)
=
>
{
let
width_value
=
specified
:
:
Length
:
:
Au
(
Au
:
:
from_px
(
length
as
int
)
)
;
matching_rules_list
.
vec_push
(
DeclarationBlock
:
:
from_declaration
(
BorderTopWidthDeclaration
(
SpecifiedValue
(
width_value
)
)
)
)
;
matching_rules_list
.
vec_push
(
DeclarationBlock
:
:
from_declaration
(
BorderLeftWidthDeclaration
(
SpecifiedValue
(
width_value
)
)
)
)
;
matching_rules_list
.
vec_push
(
DeclarationBlock
:
:
from_declaration
(
BorderBottomWidthDeclaration
(
SpecifiedValue
(
width_value
)
)
)
)
;
matching_rules_list
.
vec_push
(
DeclarationBlock
:
:
from_declaration
(
BorderRightWidthDeclaration
(
SpecifiedValue
(
width_value
)
)
)
)
;
*
shareable
=
false
}
}
}
}
