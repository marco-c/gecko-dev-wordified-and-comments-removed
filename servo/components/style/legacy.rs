use
std
:
:
sync
:
:
Arc
;
use
selectors
:
:
tree
:
:
{
TElement
TNode
}
;
use
selectors
:
:
matching
:
:
DeclarationBlock
;
use
node
:
:
TElementAttributes
;
use
values
:
:
{
CSSFloat
specified
}
;
use
properties
:
:
DeclaredValue
:
:
SpecifiedValue
;
use
properties
:
:
PropertyDeclaration
;
use
properties
:
:
longhands
:
:
{
self
border_spacing
}
;
use
selector_matching
:
:
Stylist
;
use
selectors
:
:
smallvec
:
:
VecLike
;
use
util
:
:
geometry
:
:
Au
;
use
util
:
:
str
:
:
LengthOrPercentageOrAuto
;
#
[
derive
(
Copy
Clone
PartialEq
Eq
)
]
pub
enum
LengthAttribute
{
Width
}
#
[
derive
(
Copy
Clone
PartialEq
Eq
)
]
pub
enum
IntegerAttribute
{
Size
Cols
Rows
}
#
[
derive
(
Copy
Clone
PartialEq
Eq
)
]
pub
enum
UnsignedIntegerAttribute
{
Border
CellSpacing
ColSpan
}
pub
trait
PresentationalHintSynthesis
{
fn
synthesize_presentational_hints_for_legacy_attributes
<
'
a
N
V
>
(
&
self
node
:
&
N
matching_rules_list
:
&
mut
V
shareable
:
&
mut
bool
)
where
N
:
TNode
<
'
a
>
N
:
:
Element
:
TElementAttributes
V
:
VecLike
<
DeclarationBlock
<
Vec
<
PropertyDeclaration
>
>
>
;
fn
synthesize_presentational_hint_for_legacy_border_attribute
<
'
a
E
V
>
(
&
self
element
:
E
matching_rules_list
:
&
mut
V
shareable
:
&
mut
bool
)
where
E
:
TElement
<
'
a
>
+
TElementAttributes
V
:
VecLike
<
DeclarationBlock
<
Vec
<
PropertyDeclaration
>
>
>
;
}
impl
PresentationalHintSynthesis
for
Stylist
{
fn
synthesize_presentational_hints_for_legacy_attributes
<
'
a
N
V
>
(
&
self
node
:
&
N
matching_rules_list
:
&
mut
V
shareable
:
&
mut
bool
)
where
N
:
TNode
<
'
a
>
N
:
:
Element
:
TElementAttributes
V
:
VecLike
<
DeclarationBlock
<
Vec
<
PropertyDeclaration
>
>
>
{
let
element
=
node
.
as_element
(
)
;
let
length
=
matching_rules_list
.
vec_len
(
)
;
element
.
synthesize_presentational_hints_for_legacy_attributes
(
matching_rules_list
)
;
if
matching_rules_list
.
vec_len
(
)
!
=
length
{
*
shareable
=
false
;
}
match
element
.
get_local_name
(
)
{
name
if
*
name
=
=
atom
!
(
"
td
"
)
=
>
{
match
element
.
get_length_attribute
(
LengthAttribute
:
:
Width
)
{
LengthOrPercentageOrAuto
:
:
Auto
=
>
{
}
LengthOrPercentageOrAuto
:
:
Percentage
(
percentage
)
=
>
{
let
width_value
=
specified
:
:
LengthOrPercentageOrAuto
:
:
Percentage
(
percentage
)
;
matching_rules_list
.
vec_push
(
from_declaration
(
PropertyDeclaration
:
:
Width
(
SpecifiedValue
(
width_value
)
)
)
)
;
*
shareable
=
false
}
LengthOrPercentageOrAuto
:
:
Length
(
length
)
=
>
{
let
width_value
=
specified
:
:
LengthOrPercentageOrAuto
:
:
Length
(
specified
:
:
Length
:
:
Absolute
(
length
)
)
;
matching_rules_list
.
vec_push
(
from_declaration
(
PropertyDeclaration
:
:
Width
(
SpecifiedValue
(
width_value
)
)
)
)
;
*
shareable
=
false
}
}
self
.
synthesize_presentational_hint_for_legacy_border_attribute
(
element
matching_rules_list
shareable
)
;
}
name
if
*
name
=
=
atom
!
(
"
table
"
)
=
>
{
self
.
synthesize_presentational_hint_for_legacy_border_attribute
(
element
matching_rules_list
shareable
)
;
match
element
.
get_unsigned_integer_attribute
(
UnsignedIntegerAttribute
:
:
CellSpacing
)
{
None
=
>
{
}
Some
(
length
)
=
>
{
let
width_value
=
specified
:
:
Length
:
:
Absolute
(
Au
:
:
from_px
(
length
as
isize
)
)
;
matching_rules_list
.
vec_push
(
from_declaration
(
PropertyDeclaration
:
:
BorderSpacing
(
SpecifiedValue
(
border_spacing
:
:
SpecifiedValue
{
horizontal
:
width_value
vertical
:
width_value
}
)
)
)
)
;
*
shareable
=
false
}
}
}
name
if
*
name
=
=
atom
!
(
"
input
"
)
=
>
{
match
element
.
get_attr
(
&
ns
!
(
"
"
)
&
atom
!
(
"
type
"
)
)
{
Some
(
"
text
"
)
|
Some
(
"
password
"
)
=
>
{
match
element
.
get_integer_attribute
(
IntegerAttribute
:
:
Size
)
{
Some
(
value
)
if
value
!
=
0
=
>
{
let
value
=
specified
:
:
Length
:
:
ServoCharacterWidth
(
specified
:
:
CharacterWidth
(
value
)
)
;
matching_rules_list
.
vec_push
(
from_declaration
(
PropertyDeclaration
:
:
Width
(
SpecifiedValue
(
specified
:
:
LengthOrPercentageOrAuto
:
:
Length
(
value
)
)
)
)
)
;
*
shareable
=
false
}
Some
(
_
)
|
None
=
>
{
}
}
}
_
=
>
{
}
}
;
}
name
if
*
name
=
=
atom
!
(
"
textarea
"
)
=
>
{
match
element
.
get_integer_attribute
(
IntegerAttribute
:
:
Cols
)
{
Some
(
value
)
if
value
!
=
0
=
>
{
let
value
=
specified
:
:
Length
:
:
ServoCharacterWidth
(
specified
:
:
CharacterWidth
(
value
)
)
;
matching_rules_list
.
vec_push
(
from_declaration
(
PropertyDeclaration
:
:
Width
(
SpecifiedValue
(
specified
:
:
LengthOrPercentageOrAuto
:
:
Length
(
value
)
)
)
)
)
;
*
shareable
=
false
}
Some
(
_
)
|
None
=
>
{
}
}
match
element
.
get_integer_attribute
(
IntegerAttribute
:
:
Rows
)
{
Some
(
value
)
if
value
!
=
0
=
>
{
let
value
=
specified
:
:
Length
:
:
FontRelative
(
specified
:
:
FontRelativeLength
:
:
Em
(
value
as
CSSFloat
)
)
;
matching_rules_list
.
vec_push
(
from_declaration
(
PropertyDeclaration
:
:
Height
(
SpecifiedValue
(
longhands
:
:
height
:
:
SpecifiedValue
(
specified
:
:
LengthOrPercentageOrAuto
:
:
Length
(
value
)
)
)
)
)
)
;
*
shareable
=
false
}
Some
(
_
)
|
None
=
>
{
}
}
}
_
=
>
{
}
}
}
fn
synthesize_presentational_hint_for_legacy_border_attribute
<
'
a
E
V
>
(
&
self
element
:
E
matching_rules_list
:
&
mut
V
shareable
:
&
mut
bool
)
where
E
:
TElement
<
'
a
>
+
TElementAttributes
V
:
VecLike
<
DeclarationBlock
<
Vec
<
PropertyDeclaration
>
>
>
{
match
element
.
get_unsigned_integer_attribute
(
UnsignedIntegerAttribute
:
:
Border
)
{
None
=
>
{
}
Some
(
length
)
=
>
{
let
width_value
=
specified
:
:
Length
:
:
Absolute
(
Au
:
:
from_px
(
length
as
isize
)
)
;
matching_rules_list
.
vec_push
(
from_declaration
(
PropertyDeclaration
:
:
BorderTopWidth
(
SpecifiedValue
(
longhands
:
:
border_top_width
:
:
SpecifiedValue
(
width_value
)
)
)
)
)
;
matching_rules_list
.
vec_push
(
from_declaration
(
PropertyDeclaration
:
:
BorderLeftWidth
(
SpecifiedValue
(
longhands
:
:
border_left_width
:
:
SpecifiedValue
(
width_value
)
)
)
)
)
;
matching_rules_list
.
vec_push
(
from_declaration
(
PropertyDeclaration
:
:
BorderBottomWidth
(
SpecifiedValue
(
longhands
:
:
border_bottom_width
:
:
SpecifiedValue
(
width_value
)
)
)
)
)
;
matching_rules_list
.
vec_push
(
from_declaration
(
PropertyDeclaration
:
:
BorderRightWidth
(
SpecifiedValue
(
longhands
:
:
border_right_width
:
:
SpecifiedValue
(
width_value
)
)
)
)
)
;
*
shareable
=
false
}
}
}
}
#
[
inline
]
pub
fn
from_declaration
(
rule
:
PropertyDeclaration
)
-
>
DeclarationBlock
<
Vec
<
PropertyDeclaration
>
>
{
DeclarationBlock
:
:
from_declarations
(
Arc
:
:
new
(
vec
!
[
rule
]
)
)
}
