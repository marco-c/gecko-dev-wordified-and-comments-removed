use
dom
:
:
PresentationalHintsSynthetizer
;
use
element_state
:
:
*
;
use
error_reporting
:
:
StdoutErrorReporter
;
use
keyframes
:
:
KeyframesAnimation
;
use
media_queries
:
:
{
Device
MediaType
}
;
use
properties
:
:
{
self
PropertyDeclaration
PropertyDeclarationBlock
ComputedValues
Importance
}
;
use
quickersort
:
:
sort_by
;
use
restyle_hints
:
:
{
RestyleHint
DependencySet
}
;
use
selector_impl
:
:
{
ElementExt
TheSelectorImpl
PseudoElement
}
;
use
selectors
:
:
Element
;
use
selectors
:
:
bloom
:
:
BloomFilter
;
use
selectors
:
:
matching
:
:
{
AFFECTED_BY_STYLE_ATTRIBUTE
AFFECTED_BY_PRESENTATIONAL_HINTS
}
;
use
selectors
:
:
matching
:
:
{
MatchingReason
StyleRelations
matches_complex_selector
}
;
use
selectors
:
:
parser
:
:
{
Selector
SimpleSelector
LocalName
ComplexSelector
}
;
use
sink
:
:
Push
;
use
smallvec
:
:
VecLike
;
use
std
:
:
borrow
:
:
Borrow
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
fmt
;
use
std
:
:
hash
:
:
BuildHasherDefault
;
use
std
:
:
hash
:
:
Hash
;
use
std
:
:
slice
;
use
std
:
:
sync
:
:
Arc
;
use
string_cache
:
:
Atom
;
use
style_traits
:
:
viewport
:
:
ViewportConstraints
;
use
stylesheets
:
:
{
CSSRule
CSSRuleIteratorExt
Origin
Stylesheet
UserAgentStylesheets
}
;
use
viewport
:
:
{
MaybeNew
ViewportRuleCascade
}
;
pub
type
FnvHashMap
<
K
V
>
=
HashMap
<
K
V
BuildHasherDefault
<
:
:
fnv
:
:
FnvHasher
>
>
;
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
struct
Stylist
{
pub
device
:
Device
viewport_constraints
:
Option
<
ViewportConstraints
>
quirks_mode
:
bool
is_device_dirty
:
bool
element_map
:
PerPseudoElementSelectorMap
pseudos_map
:
FnvHashMap
<
PseudoElement
PerPseudoElementSelectorMap
>
animations
:
FnvHashMap
<
Atom
KeyframesAnimation
>
precomputed_pseudo_element_decls
:
FnvHashMap
<
PseudoElement
Vec
<
ApplicableDeclarationBlock
>
>
rules_source_order
:
usize
state_deps
:
DependencySet
sibling_affecting_selectors
:
Vec
<
Selector
<
TheSelectorImpl
>
>
non_common_style_affecting_attributes_selectors
:
Vec
<
Selector
<
TheSelectorImpl
>
>
}
impl
Stylist
{
#
[
inline
]
pub
fn
new
(
device
:
Device
)
-
>
Self
{
let
mut
stylist
=
Stylist
{
viewport_constraints
:
None
device
:
device
is_device_dirty
:
true
quirks_mode
:
false
element_map
:
PerPseudoElementSelectorMap
:
:
new
(
)
pseudos_map
:
Default
:
:
default
(
)
animations
:
Default
:
:
default
(
)
precomputed_pseudo_element_decls
:
Default
:
:
default
(
)
rules_source_order
:
0
state_deps
:
DependencySet
:
:
new
(
)
sibling_affecting_selectors
:
vec
!
[
]
non_common_style_affecting_attributes_selectors
:
vec
!
[
]
}
;
TheSelectorImpl
:
:
each_eagerly_cascaded_pseudo_element
(
|
pseudo
|
{
stylist
.
pseudos_map
.
insert
(
pseudo
PerPseudoElementSelectorMap
:
:
new
(
)
)
;
}
)
;
stylist
}
pub
fn
update
(
&
mut
self
doc_stylesheets
:
&
[
Arc
<
Stylesheet
>
]
ua_stylesheets
:
Option
<
&
UserAgentStylesheets
>
stylesheets_changed
:
bool
)
-
>
bool
{
if
!
(
self
.
is_device_dirty
|
|
stylesheets_changed
)
{
return
false
;
}
self
.
element_map
=
PerPseudoElementSelectorMap
:
:
new
(
)
;
self
.
pseudos_map
=
Default
:
:
default
(
)
;
self
.
animations
=
Default
:
:
default
(
)
;
TheSelectorImpl
:
:
each_eagerly_cascaded_pseudo_element
(
|
pseudo
|
{
self
.
pseudos_map
.
insert
(
pseudo
PerPseudoElementSelectorMap
:
:
new
(
)
)
;
}
)
;
self
.
precomputed_pseudo_element_decls
=
Default
:
:
default
(
)
;
self
.
rules_source_order
=
0
;
self
.
state_deps
.
clear
(
)
;
self
.
sibling_affecting_selectors
.
clear
(
)
;
self
.
non_common_style_affecting_attributes_selectors
.
clear
(
)
;
if
let
Some
(
ua_stylesheets
)
=
ua_stylesheets
{
for
stylesheet
in
&
ua_stylesheets
.
user_or_user_agent_stylesheets
{
self
.
add_stylesheet
(
&
stylesheet
)
;
}
if
self
.
quirks_mode
{
self
.
add_stylesheet
(
&
ua_stylesheets
.
quirks_mode_stylesheet
)
;
}
}
for
ref
stylesheet
in
doc_stylesheets
.
iter
(
)
{
self
.
add_stylesheet
(
stylesheet
)
;
}
self
.
is_device_dirty
=
false
;
true
}
fn
add_stylesheet
(
&
mut
self
stylesheet
:
&
Stylesheet
)
{
if
!
stylesheet
.
is_effective_for_device
(
&
self
.
device
)
{
return
;
}
let
mut
rules_source_order
=
self
.
rules_source_order
;
for
rule
in
stylesheet
.
effective_rules
(
&
self
.
device
)
{
match
*
rule
{
CSSRule
:
:
Style
(
ref
style_rule
)
=
>
{
for
selector
in
&
style_rule
.
selectors
{
let
map
=
if
let
Some
(
ref
pseudo
)
=
selector
.
pseudo_element
{
self
.
pseudos_map
.
entry
(
pseudo
.
clone
(
)
)
.
or_insert_with
(
PerPseudoElementSelectorMap
:
:
new
)
.
borrow_for_origin
(
&
stylesheet
.
origin
)
}
else
{
self
.
element_map
.
borrow_for_origin
(
&
stylesheet
.
origin
)
}
;
map
.
insert
(
Rule
{
selector
:
selector
.
complex_selector
.
clone
(
)
declarations
:
style_rule
.
declarations
.
clone
(
)
specificity
:
selector
.
specificity
source_order
:
rules_source_order
}
)
;
}
rules_source_order
+
=
1
;
for
selector
in
&
style_rule
.
selectors
{
self
.
state_deps
.
note_selector
(
&
selector
.
complex_selector
)
;
if
selector
.
affects_siblings
(
)
{
self
.
sibling_affecting_selectors
.
push
(
selector
.
clone
(
)
)
;
}
if
selector
.
matches_non_common_style_affecting_attribute
(
)
{
self
.
non_common_style_affecting_attributes_selectors
.
push
(
selector
.
clone
(
)
)
;
}
}
self
.
rules_source_order
=
rules_source_order
;
}
CSSRule
:
:
Keyframes
(
ref
keyframes_rule
)
=
>
{
debug
!
(
"
Found
valid
keyframes
rule
:
{
:
?
}
"
keyframes_rule
)
;
if
let
Some
(
animation
)
=
KeyframesAnimation
:
:
from_keyframes
(
&
keyframes_rule
.
keyframes
)
{
debug
!
(
"
Found
valid
keyframe
animation
:
{
:
?
}
"
animation
)
;
self
.
animations
.
insert
(
keyframes_rule
.
name
.
clone
(
)
animation
)
;
}
else
{
self
.
animations
.
remove
(
&
keyframes_rule
.
name
)
;
}
}
_
=
>
{
}
}
}
debug
!
(
"
Stylist
stats
:
"
)
;
debug
!
(
"
-
Got
{
}
sibling
-
affecting
selectors
"
self
.
sibling_affecting_selectors
.
len
(
)
)
;
debug
!
(
"
-
Got
{
}
non
-
common
-
style
-
attribute
-
affecting
selectors
"
self
.
non_common_style_affecting_attributes_selectors
.
len
(
)
)
;
debug
!
(
"
-
Got
{
}
deps
for
style
-
hint
calculation
"
self
.
state_deps
.
len
(
)
)
;
TheSelectorImpl
:
:
each_precomputed_pseudo_element
(
|
pseudo
|
{
if
let
Some
(
map
)
=
self
.
pseudos_map
.
remove
(
&
pseudo
)
{
let
mut
declarations
=
vec
!
[
]
;
map
.
user_agent
.
get_universal_rules
(
&
mut
declarations
)
;
self
.
precomputed_pseudo_element_decls
.
insert
(
pseudo
declarations
)
;
}
}
)
}
pub
fn
precomputed_values_for_pseudo
(
&
self
pseudo
:
&
PseudoElement
parent
:
Option
<
&
Arc
<
ComputedValues
>
>
)
-
>
Option
<
Arc
<
ComputedValues
>
>
{
debug_assert
!
(
TheSelectorImpl
:
:
pseudo_element_cascade_type
(
pseudo
)
.
is_precomputed
(
)
)
;
if
let
Some
(
declarations
)
=
self
.
precomputed_pseudo_element_decls
.
get
(
pseudo
)
{
let
(
computed
_
)
=
properties
:
:
cascade
(
self
.
device
.
au_viewport_size
(
)
&
declarations
false
parent
.
map
(
|
p
|
&
*
*
p
)
None
None
Box
:
:
new
(
StdoutErrorReporter
)
)
;
Some
(
Arc
:
:
new
(
computed
)
)
}
else
{
parent
.
map
(
|
p
|
p
.
clone
(
)
)
}
}
pub
fn
lazily_compute_pseudo_element_style
<
E
>
(
&
self
element
:
&
E
pseudo
:
&
PseudoElement
parent
:
&
Arc
<
ComputedValues
>
)
-
>
Option
<
Arc
<
ComputedValues
>
>
where
E
:
Element
<
Impl
=
TheSelectorImpl
>
+
fmt
:
:
Debug
+
PresentationalHintsSynthetizer
{
debug_assert
!
(
TheSelectorImpl
:
:
pseudo_element_cascade_type
(
pseudo
)
.
is_lazy
(
)
)
;
if
self
.
pseudos_map
.
get
(
pseudo
)
.
is_none
(
)
{
return
None
;
}
let
mut
declarations
=
vec
!
[
]
;
self
.
push_applicable_declarations
(
element
None
None
Some
(
pseudo
)
&
mut
declarations
MatchingReason
:
:
ForStyling
)
;
let
(
computed
_
)
=
properties
:
:
cascade
(
self
.
device
.
au_viewport_size
(
)
&
declarations
false
Some
(
&
*
*
parent
)
None
None
Box
:
:
new
(
StdoutErrorReporter
)
)
;
Some
(
Arc
:
:
new
(
computed
)
)
}
pub
fn
set_device
(
&
mut
self
mut
device
:
Device
stylesheets
:
&
[
Arc
<
Stylesheet
>
]
)
{
let
cascaded_rule
=
stylesheets
.
iter
(
)
.
flat_map
(
|
s
|
s
.
effective_rules
(
&
self
.
device
)
.
viewport
(
)
)
.
cascade
(
)
;
self
.
viewport_constraints
=
ViewportConstraints
:
:
maybe_new
(
device
.
viewport_size
&
cascaded_rule
)
;
if
let
Some
(
ref
constraints
)
=
self
.
viewport_constraints
{
device
=
Device
:
:
new
(
MediaType
:
:
Screen
constraints
.
size
)
;
}
self
.
is_device_dirty
|
=
stylesheets
.
iter
(
)
.
any
(
|
stylesheet
|
{
stylesheet
.
rules
(
)
.
media
(
)
.
any
(
|
media_rule
|
media_rule
.
evaluate
(
&
self
.
device
)
!
=
media_rule
.
evaluate
(
&
device
)
)
}
)
;
self
.
device
=
device
;
}
pub
fn
viewport_constraints
(
&
self
)
-
>
&
Option
<
ViewportConstraints
>
{
&
self
.
viewport_constraints
}
pub
fn
set_quirks_mode
(
&
mut
self
enabled
:
bool
)
{
self
.
quirks_mode
=
enabled
;
}
pub
fn
push_applicable_declarations
<
E
V
>
(
&
self
element
:
&
E
parent_bf
:
Option
<
&
BloomFilter
>
style_attribute
:
Option
<
&
Arc
<
PropertyDeclarationBlock
>
>
pseudo_element
:
Option
<
&
PseudoElement
>
applicable_declarations
:
&
mut
V
reason
:
MatchingReason
)
-
>
StyleRelations
where
E
:
Element
<
Impl
=
TheSelectorImpl
>
+
fmt
:
:
Debug
+
PresentationalHintsSynthetizer
V
:
Push
<
ApplicableDeclarationBlock
>
+
VecLike
<
ApplicableDeclarationBlock
>
{
assert
!
(
!
self
.
is_device_dirty
)
;
assert
!
(
style_attribute
.
is_none
(
)
|
|
pseudo_element
.
is_none
(
)
"
Style
attributes
do
not
apply
to
pseudo
-
elements
"
)
;
debug_assert
!
(
pseudo_element
.
is_none
(
)
|
|
!
TheSelectorImpl
:
:
pseudo_element_cascade_type
(
pseudo_element
.
as_ref
(
)
.
unwrap
(
)
)
.
is_precomputed
(
)
)
;
let
map
=
match
pseudo_element
{
Some
(
ref
pseudo
)
=
>
self
.
pseudos_map
.
get
(
pseudo
)
.
unwrap
(
)
None
=
>
&
self
.
element_map
}
;
let
mut
relations
=
StyleRelations
:
:
empty
(
)
;
debug
!
(
"
Determining
if
style
is
shareable
:
pseudo
:
{
}
"
pseudo_element
.
is_some
(
)
)
;
map
.
user_agent
.
get_all_matching_rules
(
element
parent_bf
applicable_declarations
&
mut
relations
reason
Importance
:
:
Normal
)
;
debug
!
(
"
UA
normal
:
{
:
?
}
"
relations
)
;
let
length
=
applicable_declarations
.
len
(
)
;
element
.
synthesize_presentational_hints_for_legacy_attributes
(
applicable_declarations
)
;
if
applicable_declarations
.
len
(
)
!
=
length
{
relations
|
=
AFFECTED_BY_PRESENTATIONAL_HINTS
;
}
debug
!
(
"
preshints
:
{
:
?
}
"
relations
)
;
map
.
user
.
get_all_matching_rules
(
element
parent_bf
applicable_declarations
&
mut
relations
reason
Importance
:
:
Normal
)
;
debug
!
(
"
user
normal
:
{
:
?
}
"
relations
)
;
map
.
author
.
get_all_matching_rules
(
element
parent_bf
applicable_declarations
&
mut
relations
reason
Importance
:
:
Normal
)
;
debug
!
(
"
author
normal
:
{
:
?
}
"
relations
)
;
if
let
Some
(
sa
)
=
style_attribute
{
if
sa
.
any_normal
(
)
{
relations
|
=
AFFECTED_BY_STYLE_ATTRIBUTE
;
Push
:
:
push
(
applicable_declarations
ApplicableDeclarationBlock
:
:
from_declarations
(
sa
.
clone
(
)
Importance
:
:
Normal
)
)
;
}
}
debug
!
(
"
style
attr
:
{
:
?
}
"
relations
)
;
map
.
author
.
get_all_matching_rules
(
element
parent_bf
applicable_declarations
&
mut
relations
reason
Importance
:
:
Important
)
;
debug
!
(
"
author
important
:
{
:
?
}
"
relations
)
;
if
let
Some
(
sa
)
=
style_attribute
{
if
sa
.
any_important
(
)
{
relations
|
=
AFFECTED_BY_STYLE_ATTRIBUTE
;
Push
:
:
push
(
applicable_declarations
ApplicableDeclarationBlock
:
:
from_declarations
(
sa
.
clone
(
)
Importance
:
:
Important
)
)
;
}
}
debug
!
(
"
style
attr
important
:
{
:
?
}
"
relations
)
;
map
.
user
.
get_all_matching_rules
(
element
parent_bf
applicable_declarations
&
mut
relations
reason
Importance
:
:
Important
)
;
debug
!
(
"
user
important
:
{
:
?
}
"
relations
)
;
map
.
user_agent
.
get_all_matching_rules
(
element
parent_bf
applicable_declarations
&
mut
relations
reason
Importance
:
:
Important
)
;
debug
!
(
"
UA
important
:
{
:
?
}
"
relations
)
;
debug
!
(
"
push_applicable_declarations
:
shareable
:
{
:
?
}
"
relations
)
;
relations
}
#
[
inline
]
pub
fn
is_device_dirty
(
&
self
)
-
>
bool
{
self
.
is_device_dirty
}
#
[
inline
]
pub
fn
animations
(
&
self
)
-
>
&
FnvHashMap
<
Atom
KeyframesAnimation
>
{
&
self
.
animations
}
pub
fn
match_same_not_common_style_affecting_attributes_rules
<
E
>
(
&
self
element
:
&
E
candidate
:
&
E
)
-
>
bool
where
E
:
ElementExt
{
use
selectors
:
:
matching
:
:
StyleRelations
;
use
selectors
:
:
matching
:
:
matches_complex_selector
;
for
ref
selector
in
self
.
non_common_style_affecting_attributes_selectors
.
iter
(
)
{
let
element_matches
=
matches_complex_selector
(
&
selector
.
complex_selector
element
None
&
mut
StyleRelations
:
:
empty
(
)
MatchingReason
:
:
Other
)
;
let
candidate_matches
=
matches_complex_selector
(
&
selector
.
complex_selector
candidate
None
&
mut
StyleRelations
:
:
empty
(
)
MatchingReason
:
:
Other
)
;
if
element_matches
!
=
candidate_matches
{
return
false
;
}
}
true
}
pub
fn
match_same_sibling_affecting_rules
<
E
>
(
&
self
element
:
&
E
candidate
:
&
E
)
-
>
bool
where
E
:
ElementExt
{
use
selectors
:
:
matching
:
:
StyleRelations
;
use
selectors
:
:
matching
:
:
matches_complex_selector
;
for
ref
selector
in
self
.
sibling_affecting_selectors
.
iter
(
)
{
let
element_matches
=
matches_complex_selector
(
&
selector
.
complex_selector
element
None
&
mut
StyleRelations
:
:
empty
(
)
MatchingReason
:
:
Other
)
;
let
candidate_matches
=
matches_complex_selector
(
&
selector
.
complex_selector
candidate
None
&
mut
StyleRelations
:
:
empty
(
)
MatchingReason
:
:
Other
)
;
if
element_matches
!
=
candidate_matches
{
debug
!
(
"
match_same_sibling_affecting_rules
:
Failure
due
to
{
:
?
}
"
selector
.
complex_selector
)
;
return
false
;
}
}
true
}
pub
fn
compute_restyle_hint
<
E
>
(
&
self
element
:
&
E
snapshot
:
&
E
:
:
Snapshot
current_state
:
ElementState
)
-
>
RestyleHint
where
E
:
ElementExt
+
Clone
{
self
.
state_deps
.
compute_hint
(
element
snapshot
current_state
)
}
}
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
struct
PerPseudoElementSelectorMap
{
user_agent
:
SelectorMap
author
:
SelectorMap
user
:
SelectorMap
}
impl
PerPseudoElementSelectorMap
{
#
[
inline
]
fn
new
(
)
-
>
Self
{
PerPseudoElementSelectorMap
{
user_agent
:
SelectorMap
:
:
new
(
)
author
:
SelectorMap
:
:
new
(
)
user
:
SelectorMap
:
:
new
(
)
}
}
#
[
inline
]
fn
borrow_for_origin
(
&
mut
self
origin
:
&
Origin
)
-
>
&
mut
SelectorMap
{
match
*
origin
{
Origin
:
:
UserAgent
=
>
&
mut
self
.
user_agent
Origin
:
:
Author
=
>
&
mut
self
.
author
Origin
:
:
User
=
>
&
mut
self
.
user
}
}
}
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
struct
SelectorMap
{
pub
id_hash
:
FnvHashMap
<
Atom
Vec
<
Rule
>
>
pub
class_hash
:
FnvHashMap
<
Atom
Vec
<
Rule
>
>
pub
local_name_hash
:
FnvHashMap
<
Atom
Vec
<
Rule
>
>
pub
lower_local_name_hash
:
FnvHashMap
<
Atom
Vec
<
Rule
>
>
pub
other_rules
:
Vec
<
Rule
>
pub
empty
:
bool
}
#
[
inline
]
fn
sort_by_key
<
T
F
:
Fn
(
&
T
)
-
>
K
K
:
Ord
>
(
v
:
&
mut
[
T
]
f
:
F
)
{
sort_by
(
v
&
|
a
b
|
f
(
a
)
.
cmp
(
&
f
(
b
)
)
)
}
impl
SelectorMap
{
pub
fn
new
(
)
-
>
Self
{
SelectorMap
{
id_hash
:
HashMap
:
:
default
(
)
class_hash
:
HashMap
:
:
default
(
)
local_name_hash
:
HashMap
:
:
default
(
)
lower_local_name_hash
:
HashMap
:
:
default
(
)
other_rules
:
Vec
:
:
new
(
)
empty
:
true
}
}
pub
fn
get_all_matching_rules
<
E
V
>
(
&
self
element
:
&
E
parent_bf
:
Option
<
&
BloomFilter
>
matching_rules_list
:
&
mut
V
relations
:
&
mut
StyleRelations
reason
:
MatchingReason
importance
:
Importance
)
where
E
:
Element
<
Impl
=
TheSelectorImpl
>
V
:
VecLike
<
ApplicableDeclarationBlock
>
{
if
self
.
empty
{
return
}
let
init_len
=
matching_rules_list
.
len
(
)
;
if
let
Some
(
id
)
=
element
.
get_id
(
)
{
SelectorMap
:
:
get_matching_rules_from_hash
(
element
parent_bf
&
self
.
id_hash
&
id
matching_rules_list
relations
reason
importance
)
}
element
.
each_class
(
|
class
|
{
SelectorMap
:
:
get_matching_rules_from_hash
(
element
parent_bf
&
self
.
class_hash
class
matching_rules_list
relations
reason
importance
)
;
}
)
;
let
local_name_hash
=
if
element
.
is_html_element_in_html_document
(
)
{
&
self
.
lower_local_name_hash
}
else
{
&
self
.
local_name_hash
}
;
SelectorMap
:
:
get_matching_rules_from_hash
(
element
parent_bf
local_name_hash
element
.
get_local_name
(
)
matching_rules_list
relations
reason
importance
)
;
SelectorMap
:
:
get_matching_rules
(
element
parent_bf
&
self
.
other_rules
matching_rules_list
relations
reason
importance
)
;
sort_by_key
(
&
mut
matching_rules_list
[
init_len
.
.
]
|
rule
|
(
rule
.
specificity
rule
.
source_order
)
)
;
}
pub
fn
get_universal_rules
<
V
>
(
&
self
matching_rules_list
:
&
mut
V
)
where
V
:
VecLike
<
ApplicableDeclarationBlock
>
{
if
self
.
empty
{
return
}
let
init_len
=
matching_rules_list
.
len
(
)
;
for
rule
in
self
.
other_rules
.
iter
(
)
{
if
rule
.
selector
.
compound_selector
.
is_empty
(
)
&
&
rule
.
selector
.
next
.
is_none
(
)
{
if
rule
.
declarations
.
any_normal
(
)
{
matching_rules_list
.
push
(
rule
.
to_applicable_declaration_block
(
Importance
:
:
Normal
)
)
;
}
if
rule
.
declarations
.
any_important
(
)
{
matching_rules_list
.
push
(
rule
.
to_applicable_declaration_block
(
Importance
:
:
Important
)
)
;
}
}
}
sort_by_key
(
&
mut
matching_rules_list
[
init_len
.
.
]
|
rule
|
(
rule
.
specificity
rule
.
source_order
)
)
;
}
fn
get_matching_rules_from_hash
<
E
Str
BorrowedStr
:
?
Sized
Vector
>
(
element
:
&
E
parent_bf
:
Option
<
&
BloomFilter
>
hash
:
&
FnvHashMap
<
Str
Vec
<
Rule
>
>
key
:
&
BorrowedStr
matching_rules
:
&
mut
Vector
relations
:
&
mut
StyleRelations
reason
:
MatchingReason
importance
:
Importance
)
where
E
:
Element
<
Impl
=
TheSelectorImpl
>
Str
:
Borrow
<
BorrowedStr
>
+
Eq
+
Hash
BorrowedStr
:
Eq
+
Hash
Vector
:
VecLike
<
ApplicableDeclarationBlock
>
{
if
let
Some
(
rules
)
=
hash
.
get
(
key
)
{
SelectorMap
:
:
get_matching_rules
(
element
parent_bf
rules
matching_rules
relations
reason
importance
)
}
}
fn
get_matching_rules
<
E
V
>
(
element
:
&
E
parent_bf
:
Option
<
&
BloomFilter
>
rules
:
&
[
Rule
]
matching_rules
:
&
mut
V
relations
:
&
mut
StyleRelations
reason
:
MatchingReason
importance
:
Importance
)
where
E
:
Element
<
Impl
=
TheSelectorImpl
>
V
:
VecLike
<
ApplicableDeclarationBlock
>
{
for
rule
in
rules
.
iter
(
)
{
let
block
=
&
rule
.
declarations
;
let
any_declaration_for_importance
=
if
importance
.
important
(
)
{
block
.
any_important
(
)
}
else
{
block
.
any_normal
(
)
}
;
if
any_declaration_for_importance
&
&
matches_complex_selector
(
&
*
rule
.
selector
element
parent_bf
relations
reason
)
{
matching_rules
.
push
(
rule
.
to_applicable_declaration_block
(
importance
)
)
;
}
}
}
pub
fn
insert
(
&
mut
self
rule
:
Rule
)
{
self
.
empty
=
false
;
if
let
Some
(
id_name
)
=
SelectorMap
:
:
get_id_name
(
&
rule
)
{
find_push
(
&
mut
self
.
id_hash
id_name
rule
)
;
return
;
}
if
let
Some
(
class_name
)
=
SelectorMap
:
:
get_class_name
(
&
rule
)
{
find_push
(
&
mut
self
.
class_hash
class_name
rule
)
;
return
;
}
if
let
Some
(
LocalName
{
name
lower_name
}
)
=
SelectorMap
:
:
get_local_name
(
&
rule
)
{
find_push
(
&
mut
self
.
local_name_hash
name
rule
.
clone
(
)
)
;
find_push
(
&
mut
self
.
lower_local_name_hash
lower_name
rule
)
;
return
;
}
self
.
other_rules
.
push
(
rule
)
;
}
pub
fn
get_id_name
(
rule
:
&
Rule
)
-
>
Option
<
Atom
>
{
for
ss
in
&
rule
.
selector
.
compound_selector
{
if
let
SimpleSelector
:
:
ID
(
ref
id
)
=
*
ss
{
return
Some
(
id
.
clone
(
)
)
;
}
}
None
}
pub
fn
get_class_name
(
rule
:
&
Rule
)
-
>
Option
<
Atom
>
{
for
ss
in
&
rule
.
selector
.
compound_selector
{
if
let
SimpleSelector
:
:
Class
(
ref
class
)
=
*
ss
{
return
Some
(
class
.
clone
(
)
)
;
}
}
None
}
pub
fn
get_local_name
(
rule
:
&
Rule
)
-
>
Option
<
LocalName
<
TheSelectorImpl
>
>
{
for
ss
in
&
rule
.
selector
.
compound_selector
{
if
let
SimpleSelector
:
:
LocalName
(
ref
n
)
=
*
ss
{
return
Some
(
LocalName
{
name
:
n
.
name
.
clone
(
)
lower_name
:
n
.
lower_name
.
clone
(
)
}
)
}
}
None
}
}
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
derive
(
Clone
)
]
pub
struct
Rule
{
pub
selector
:
Arc
<
ComplexSelector
<
TheSelectorImpl
>
>
pub
declarations
:
Arc
<
PropertyDeclarationBlock
>
pub
source_order
:
usize
pub
specificity
:
u32
}
impl
Rule
{
fn
to_applicable_declaration_block
(
&
self
importance
:
Importance
)
-
>
ApplicableDeclarationBlock
{
ApplicableDeclarationBlock
{
mixed_declarations
:
self
.
declarations
.
clone
(
)
importance
:
importance
source_order
:
self
.
source_order
specificity
:
self
.
specificity
}
}
}
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
derive
(
Debug
Clone
)
]
pub
struct
ApplicableDeclarationBlock
{
pub
mixed_declarations
:
Arc
<
PropertyDeclarationBlock
>
pub
importance
:
Importance
pub
source_order
:
usize
pub
specificity
:
u32
}
impl
ApplicableDeclarationBlock
{
#
[
inline
]
pub
fn
from_declarations
(
declarations
:
Arc
<
PropertyDeclarationBlock
>
importance
:
Importance
)
-
>
Self
{
ApplicableDeclarationBlock
{
mixed_declarations
:
declarations
importance
:
importance
source_order
:
0
specificity
:
0
}
}
pub
fn
iter
(
&
self
)
-
>
ApplicableDeclarationBlockIter
{
ApplicableDeclarationBlockIter
{
iter
:
self
.
mixed_declarations
.
declarations
.
iter
(
)
importance
:
self
.
importance
}
}
}
pub
struct
ApplicableDeclarationBlockIter
<
'
a
>
{
iter
:
slice
:
:
Iter
<
'
a
(
PropertyDeclaration
Importance
)
>
importance
:
Importance
}
impl
<
'
a
>
Iterator
for
ApplicableDeclarationBlockIter
<
'
a
>
{
type
Item
=
&
'
a
PropertyDeclaration
;
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
while
let
Some
(
&
(
ref
declaration
importance
)
)
=
self
.
iter
.
next
(
)
{
if
importance
=
=
self
.
importance
{
return
Some
(
declaration
)
}
}
None
}
}
impl
<
'
a
>
DoubleEndedIterator
for
ApplicableDeclarationBlockIter
<
'
a
>
{
#
[
inline
]
fn
next_back
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
while
let
Some
(
&
(
ref
declaration
importance
)
)
=
self
.
iter
.
next_back
(
)
{
if
importance
=
=
self
.
importance
{
return
Some
(
declaration
)
}
}
None
}
}
fn
find_push
<
Str
:
Eq
+
Hash
>
(
map
:
&
mut
FnvHashMap
<
Str
Vec
<
Rule
>
>
key
:
Str
value
:
Rule
)
{
map
.
entry
(
key
)
.
or_insert_with
(
Vec
:
:
new
)
.
push
(
value
)
}
