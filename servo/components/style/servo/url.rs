use
cssparser
:
:
CssStringWriter
;
use
parser
:
:
ParserContext
;
use
servo_url
:
:
ServoUrl
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
std
:
:
sync
:
:
Arc
;
use
style_traits
:
:
{
ToCss
ParseError
}
;
#
[
derive
(
Clone
Debug
HeapSizeOf
Serialize
Deserialize
)
]
pub
struct
SpecifiedUrl
{
original
:
Option
<
Arc
<
String
>
>
resolved
:
Option
<
ServoUrl
>
}
impl
SpecifiedUrl
{
pub
fn
parse_from_string
<
'
a
>
(
url
:
String
context
:
&
ParserContext
)
-
>
Result
<
Self
ParseError
<
'
a
>
>
{
let
serialization
=
Arc
:
:
new
(
url
)
;
let
resolved
=
context
.
url_data
.
join
(
&
serialization
)
.
ok
(
)
;
Ok
(
SpecifiedUrl
{
original
:
Some
(
serialization
)
resolved
:
resolved
}
)
}
pub
fn
is_invalid
(
&
self
)
-
>
bool
{
self
.
resolved
.
is_none
(
)
}
pub
fn
is_fragment
(
&
self
)
-
>
bool
{
error
!
(
"
Can
'
t
determine
whether
the
url
is
a
fragment
.
"
)
;
false
}
pub
fn
url
(
&
self
)
-
>
Option
<
&
ServoUrl
>
{
self
.
resolved
.
as_ref
(
)
}
pub
fn
as_str
(
&
self
)
-
>
&
str
{
match
self
.
resolved
{
Some
(
ref
url
)
=
>
url
.
as_str
(
)
None
=
>
"
"
}
}
pub
fn
for_cascade
(
url
:
ServoUrl
)
-
>
Self
{
SpecifiedUrl
{
original
:
None
resolved
:
Some
(
url
)
}
}
pub
fn
new_for_testing
(
url
:
&
str
)
-
>
Self
{
SpecifiedUrl
{
original
:
Some
(
Arc
:
:
new
(
url
.
into
(
)
)
)
resolved
:
ServoUrl
:
:
parse
(
url
)
.
ok
(
)
}
}
}
impl
PartialEq
for
SpecifiedUrl
{
fn
eq
(
&
self
other
:
&
Self
)
-
>
bool
{
self
.
resolved
=
=
other
.
resolved
}
}
impl
ToCss
for
SpecifiedUrl
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
try
!
(
dest
.
write_str
(
"
url
(
\
"
"
)
)
;
let
string
=
match
self
.
original
{
Some
(
ref
original
)
=
>
&
*
*
original
None
=
>
match
self
.
resolved
{
Some
(
ref
url
)
=
>
url
.
as_str
(
)
None
=
>
"
about
:
invalid
"
}
}
;
try
!
(
CssStringWriter
:
:
new
(
dest
)
.
write_str
(
string
)
)
;
dest
.
write_str
(
"
\
"
)
"
)
}
}
