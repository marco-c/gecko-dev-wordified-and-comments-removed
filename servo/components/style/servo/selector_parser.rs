#
!
[
deny
(
missing_docs
)
]
use
{
Atom
CaseSensitivityExt
LocalName
Namespace
Prefix
}
;
use
attr
:
:
{
AttrIdentifier
AttrValue
}
;
use
cssparser
:
:
{
serialize_identifier
CowRcStr
Parser
as
CssParser
SourceLocation
ToCss
}
;
use
dom
:
:
{
OpaqueNode
TElement
TNode
}
;
use
element_state
:
:
{
DocumentState
ElementState
}
;
use
fnv
:
:
FnvHashMap
;
use
invalidation
:
:
element
:
:
document_state
:
:
InvalidationMatchingData
;
use
invalidation
:
:
element
:
:
element_wrapper
:
:
ElementSnapshot
;
use
properties
:
:
{
CascadeFlags
ComputedValues
PropertyFlags
}
;
use
properties
:
:
longhands
:
:
display
:
:
computed_value
:
:
T
as
Display
;
use
selector_parser
:
:
{
AttrValue
as
SelectorAttrValue
PseudoElementCascadeType
SelectorParser
}
;
use
selectors
:
:
attr
:
:
{
AttrSelectorOperation
CaseSensitivity
NamespaceConstraint
}
;
use
selectors
:
:
parser
:
:
{
SelectorParseErrorKind
Visit
}
;
use
selectors
:
:
visitor
:
:
SelectorVisitor
;
use
std
:
:
fmt
;
use
std
:
:
mem
;
use
std
:
:
ops
:
:
{
Deref
DerefMut
}
;
use
style_traits
:
:
{
ParseError
StyleParseErrorKind
}
;
#
[
derive
(
Clone
Debug
Eq
Hash
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
MallocSizeOf
)
)
]
#
[
allow
(
missing_docs
)
]
#
[
repr
(
usize
)
]
pub
enum
PseudoElement
{
After
=
0
Before
Selection
DetailsSummary
DetailsContent
ServoText
ServoInputText
ServoTableWrapper
ServoAnonymousTableWrapper
ServoAnonymousTable
ServoAnonymousTableRow
ServoAnonymousTableCell
ServoAnonymousBlock
ServoInlineBlockWrapper
ServoInlineAbsolute
}
pub
const
PSEUDO_COUNT
:
usize
=
PseudoElement
:
:
ServoInlineAbsolute
as
usize
+
1
;
impl
:
:
selectors
:
:
parser
:
:
PseudoElement
for
PseudoElement
{
type
Impl
=
SelectorImpl
;
fn
supports_pseudo_class
(
&
self
_
:
&
NonTSPseudoClass
)
-
>
bool
{
false
}
}
impl
ToCss
for
PseudoElement
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
use
self
:
:
PseudoElement
:
:
*
;
dest
.
write_str
(
match
*
self
{
After
=
>
"
:
:
after
"
Before
=
>
"
:
:
before
"
Selection
=
>
"
:
:
selection
"
DetailsSummary
=
>
"
:
:
-
servo
-
details
-
summary
"
DetailsContent
=
>
"
:
:
-
servo
-
details
-
content
"
ServoText
=
>
"
:
:
-
servo
-
text
"
ServoInputText
=
>
"
:
:
-
servo
-
input
-
text
"
ServoTableWrapper
=
>
"
:
:
-
servo
-
table
-
wrapper
"
ServoAnonymousTableWrapper
=
>
"
:
:
-
servo
-
anonymous
-
table
-
wrapper
"
ServoAnonymousTable
=
>
"
:
:
-
servo
-
anonymous
-
table
"
ServoAnonymousTableRow
=
>
"
:
:
-
servo
-
anonymous
-
table
-
row
"
ServoAnonymousTableCell
=
>
"
:
:
-
servo
-
anonymous
-
table
-
cell
"
ServoAnonymousBlock
=
>
"
:
:
-
servo
-
anonymous
-
block
"
ServoInlineBlockWrapper
=
>
"
:
:
-
servo
-
inline
-
block
-
wrapper
"
ServoInlineAbsolute
=
>
"
:
:
-
servo
-
inline
-
absolute
"
}
)
}
}
pub
const
EAGER_PSEUDO_COUNT
:
usize
=
3
;
impl
PseudoElement
{
#
[
inline
]
pub
fn
eager_index
(
&
self
)
-
>
usize
{
debug_assert
!
(
self
.
is_eager
(
)
)
;
self
.
clone
(
)
as
usize
}
#
[
inline
]
pub
fn
index
(
&
self
)
-
>
usize
{
self
.
clone
(
)
as
usize
}
pub
fn
pseudo_none_array
<
T
>
(
)
-
>
[
Option
<
T
>
;
PSEUDO_COUNT
]
{
Default
:
:
default
(
)
}
#
[
inline
]
pub
fn
from_eager_index
(
i
:
usize
)
-
>
Self
{
assert
!
(
i
<
EAGER_PSEUDO_COUNT
)
;
let
result
:
PseudoElement
=
unsafe
{
mem
:
:
transmute
(
i
)
}
;
debug_assert
!
(
result
.
is_eager
(
)
)
;
result
}
#
[
inline
]
pub
fn
is_before_or_after
(
&
self
)
-
>
bool
{
self
.
is_before
(
)
|
|
self
.
is_after
(
)
}
#
[
inline
]
pub
fn
is_before
(
&
self
)
-
>
bool
{
*
self
=
=
PseudoElement
:
:
Before
}
#
[
inline
]
pub
fn
is_after
(
&
self
)
-
>
bool
{
*
self
=
=
PseudoElement
:
:
After
}
#
[
inline
]
pub
fn
is_first_letter
(
&
self
)
-
>
bool
{
false
}
#
[
inline
]
pub
fn
is_first_line
(
&
self
)
-
>
bool
{
false
}
#
[
inline
]
pub
fn
is_eager
(
&
self
)
-
>
bool
{
self
.
cascade_type
(
)
=
=
PseudoElementCascadeType
:
:
Eager
}
#
[
inline
]
pub
fn
is_lazy
(
&
self
)
-
>
bool
{
self
.
cascade_type
(
)
=
=
PseudoElementCascadeType
:
:
Lazy
}
pub
fn
is_anon_box
(
&
self
)
-
>
bool
{
self
.
is_precomputed
(
)
}
#
[
inline
]
pub
fn
skip_item_display_fixup
(
&
self
)
-
>
bool
{
!
self
.
is_before_or_after
(
)
}
#
[
inline
]
pub
fn
is_precomputed
(
&
self
)
-
>
bool
{
self
.
cascade_type
(
)
=
=
PseudoElementCascadeType
:
:
Precomputed
}
#
[
inline
]
pub
fn
cascade_type
(
&
self
)
-
>
PseudoElementCascadeType
{
match
*
self
{
PseudoElement
:
:
After
|
PseudoElement
:
:
Before
|
PseudoElement
:
:
Selection
=
>
{
PseudoElementCascadeType
:
:
Eager
}
PseudoElement
:
:
DetailsSummary
=
>
PseudoElementCascadeType
:
:
Lazy
PseudoElement
:
:
DetailsContent
|
PseudoElement
:
:
ServoText
|
PseudoElement
:
:
ServoInputText
|
PseudoElement
:
:
ServoTableWrapper
|
PseudoElement
:
:
ServoAnonymousTableWrapper
|
PseudoElement
:
:
ServoAnonymousTable
|
PseudoElement
:
:
ServoAnonymousTableRow
|
PseudoElement
:
:
ServoAnonymousTableCell
|
PseudoElement
:
:
ServoAnonymousBlock
|
PseudoElement
:
:
ServoInlineBlockWrapper
|
PseudoElement
:
:
ServoInlineAbsolute
=
>
PseudoElementCascadeType
:
:
Precomputed
}
}
pub
fn
cascade_flags
(
&
self
)
-
>
CascadeFlags
{
match
*
self
{
PseudoElement
:
:
After
|
PseudoElement
:
:
Before
|
PseudoElement
:
:
Selection
|
PseudoElement
:
:
DetailsContent
|
PseudoElement
:
:
DetailsSummary
=
>
CascadeFlags
:
:
empty
(
)
PseudoElement
:
:
ServoAnonymousTableCell
|
PseudoElement
:
:
ServoAnonymousTableRow
|
PseudoElement
:
:
ServoText
|
PseudoElement
:
:
ServoInputText
=
>
CascadeFlags
:
:
empty
(
)
PseudoElement
:
:
ServoAnonymousTable
|
PseudoElement
:
:
ServoAnonymousTableWrapper
|
PseudoElement
:
:
ServoTableWrapper
|
PseudoElement
:
:
ServoAnonymousBlock
|
PseudoElement
:
:
ServoInlineBlockWrapper
|
PseudoElement
:
:
ServoInlineAbsolute
=
>
CascadeFlags
:
:
INHERIT_ALL
}
}
pub
fn
canonical
(
&
self
)
-
>
PseudoElement
{
self
.
clone
(
)
}
pub
fn
pseudo_info
(
&
self
)
{
(
)
}
#
[
inline
]
pub
fn
property_restriction
(
&
self
)
-
>
Option
<
PropertyFlags
>
{
None
}
pub
fn
should_exist
(
&
self
style
:
&
ComputedValues
)
-
>
bool
{
let
display
=
style
.
get_box
(
)
.
clone_display
(
)
;
if
display
=
=
Display
:
:
None
{
return
false
;
}
if
self
.
is_before_or_after
(
)
&
&
style
.
ineffective_content_property
(
)
{
return
false
;
}
true
}
}
pub
type
PseudoClassStringArg
=
Box
<
str
>
;
#
[
derive
(
Clone
Debug
Eq
Hash
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
MallocSizeOf
)
)
]
#
[
allow
(
missing_docs
)
]
pub
enum
NonTSPseudoClass
{
Active
AnyLink
Checked
Disabled
Enabled
Focus
Fullscreen
Hover
Indeterminate
Lang
(
PseudoClassStringArg
)
Link
PlaceholderShown
ReadWrite
ReadOnly
ServoNonZeroBorder
ServoCaseSensitiveTypeAttr
(
Atom
)
Target
Visited
}
impl
:
:
selectors
:
:
parser
:
:
NonTSPseudoClass
for
NonTSPseudoClass
{
type
Impl
=
SelectorImpl
;
#
[
inline
]
fn
is_active_or_hover
(
&
self
)
-
>
bool
{
matches
!
(
*
self
NonTSPseudoClass
:
:
Active
|
NonTSPseudoClass
:
:
Hover
)
}
}
impl
ToCss
for
NonTSPseudoClass
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
use
self
:
:
NonTSPseudoClass
:
:
*
;
match
*
self
{
Lang
(
ref
lang
)
=
>
{
dest
.
write_str
(
"
:
lang
(
"
)
?
;
serialize_identifier
(
lang
dest
)
?
;
return
dest
.
write_str
(
"
)
"
)
;
}
ServoCaseSensitiveTypeAttr
(
ref
value
)
=
>
{
dest
.
write_str
(
"
:
-
servo
-
case
-
sensitive
-
type
-
attr
(
"
)
?
;
serialize_identifier
(
value
dest
)
?
;
return
dest
.
write_str
(
"
)
"
)
;
}
_
=
>
{
}
}
dest
.
write_str
(
match
*
self
{
Active
=
>
"
:
active
"
AnyLink
=
>
"
:
any
-
link
"
Checked
=
>
"
:
checked
"
Disabled
=
>
"
:
disabled
"
Enabled
=
>
"
:
enabled
"
Focus
=
>
"
:
focus
"
Fullscreen
=
>
"
:
fullscreen
"
Hover
=
>
"
:
hover
"
Indeterminate
=
>
"
:
indeterminate
"
Link
=
>
"
:
link
"
PlaceholderShown
=
>
"
:
placeholder
-
shown
"
ReadWrite
=
>
"
:
read
-
write
"
ReadOnly
=
>
"
:
read
-
only
"
ServoNonZeroBorder
=
>
"
:
-
servo
-
nonzero
-
border
"
Target
=
>
"
:
target
"
Visited
=
>
"
:
visited
"
Lang
(
_
)
|
ServoCaseSensitiveTypeAttr
(
_
)
=
>
unreachable
!
(
)
}
)
}
}
impl
Visit
for
NonTSPseudoClass
{
type
Impl
=
SelectorImpl
;
fn
visit
<
V
>
(
&
self
_
:
&
mut
V
)
-
>
bool
where
V
:
SelectorVisitor
<
Impl
=
Self
:
:
Impl
>
{
true
}
}
impl
NonTSPseudoClass
{
pub
fn
state_flag
(
&
self
)
-
>
ElementState
{
use
element_state
:
:
ElementState
;
use
self
:
:
NonTSPseudoClass
:
:
*
;
match
*
self
{
Active
=
>
ElementState
:
:
IN_ACTIVE_STATE
Focus
=
>
ElementState
:
:
IN_FOCUS_STATE
Fullscreen
=
>
ElementState
:
:
IN_FULLSCREEN_STATE
Hover
=
>
ElementState
:
:
IN_HOVER_STATE
Enabled
=
>
ElementState
:
:
IN_ENABLED_STATE
Disabled
=
>
ElementState
:
:
IN_DISABLED_STATE
Checked
=
>
ElementState
:
:
IN_CHECKED_STATE
Indeterminate
=
>
ElementState
:
:
IN_INDETERMINATE_STATE
ReadOnly
|
ReadWrite
=
>
ElementState
:
:
IN_READ_WRITE_STATE
PlaceholderShown
=
>
ElementState
:
:
IN_PLACEHOLDER_SHOWN_STATE
Target
=
>
ElementState
:
:
IN_TARGET_STATE
AnyLink
|
Lang
(
_
)
|
Link
|
Visited
|
ServoNonZeroBorder
|
ServoCaseSensitiveTypeAttr
(
_
)
=
>
ElementState
:
:
empty
(
)
}
}
pub
fn
document_state_flag
(
&
self
)
-
>
DocumentState
{
DocumentState
:
:
empty
(
)
}
pub
fn
needs_cache_revalidation
(
&
self
)
-
>
bool
{
self
.
state_flag
(
)
.
is_empty
(
)
}
pub
fn
is_attr_based
(
&
self
)
-
>
bool
{
matches
!
(
*
self
NonTSPseudoClass
:
:
Lang
(
.
.
)
)
}
}
#
[
derive
(
Clone
Debug
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
MallocSizeOf
)
)
]
pub
struct
SelectorImpl
;
impl
:
:
selectors
:
:
SelectorImpl
for
SelectorImpl
{
type
PseudoElement
=
PseudoElement
;
type
NonTSPseudoClass
=
NonTSPseudoClass
;
type
ExtraMatchingData
=
InvalidationMatchingData
;
type
AttrValue
=
String
;
type
Identifier
=
Atom
;
type
ClassName
=
Atom
;
type
LocalName
=
LocalName
;
type
NamespacePrefix
=
Prefix
;
type
NamespaceUrl
=
Namespace
;
type
BorrowedLocalName
=
LocalName
;
type
BorrowedNamespaceUrl
=
Namespace
;
}
impl
<
'
a
'
i
>
:
:
selectors
:
:
Parser
<
'
i
>
for
SelectorParser
<
'
a
>
{
type
Impl
=
SelectorImpl
;
type
Error
=
StyleParseErrorKind
<
'
i
>
;
fn
parse_non_ts_pseudo_class
(
&
self
location
:
SourceLocation
name
:
CowRcStr
<
'
i
>
)
-
>
Result
<
NonTSPseudoClass
ParseError
<
'
i
>
>
{
use
self
:
:
NonTSPseudoClass
:
:
*
;
let
pseudo_class
=
match_ignore_ascii_case
!
{
&
name
"
active
"
=
>
Active
"
any
-
link
"
=
>
AnyLink
"
checked
"
=
>
Checked
"
disabled
"
=
>
Disabled
"
enabled
"
=
>
Enabled
"
focus
"
=
>
Focus
"
fullscreen
"
=
>
Fullscreen
"
hover
"
=
>
Hover
"
indeterminate
"
=
>
Indeterminate
"
link
"
=
>
Link
"
placeholder
-
shown
"
=
>
PlaceholderShown
"
read
-
write
"
=
>
ReadWrite
"
read
-
only
"
=
>
ReadOnly
"
target
"
=
>
Target
"
visited
"
=
>
Visited
"
-
servo
-
nonzero
-
border
"
=
>
{
if
!
self
.
in_user_agent_stylesheet
(
)
{
return
Err
(
location
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
"
-
servo
-
nonzero
-
border
"
.
into
(
)
)
)
)
}
ServoNonZeroBorder
}
_
=
>
return
Err
(
location
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
name
.
clone
(
)
)
)
)
}
;
Ok
(
pseudo_class
)
}
fn
parse_non_ts_functional_pseudo_class
<
'
t
>
(
&
self
name
:
CowRcStr
<
'
i
>
parser
:
&
mut
CssParser
<
'
i
'
t
>
)
-
>
Result
<
NonTSPseudoClass
ParseError
<
'
i
>
>
{
use
self
:
:
NonTSPseudoClass
:
:
*
;
let
pseudo_class
=
match_ignore_ascii_case
!
{
&
name
"
lang
"
=
>
{
Lang
(
parser
.
expect_ident_or_string
(
)
?
.
as_ref
(
)
.
into
(
)
)
}
"
-
servo
-
case
-
sensitive
-
type
-
attr
"
=
>
{
if
!
self
.
in_user_agent_stylesheet
(
)
{
return
Err
(
parser
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
name
.
clone
(
)
)
)
)
;
}
ServoCaseSensitiveTypeAttr
(
Atom
:
:
from
(
parser
.
expect_ident
(
)
?
.
as_ref
(
)
)
)
}
_
=
>
return
Err
(
parser
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
name
.
clone
(
)
)
)
)
}
;
Ok
(
pseudo_class
)
}
fn
parse_pseudo_element
(
&
self
location
:
SourceLocation
name
:
CowRcStr
<
'
i
>
)
-
>
Result
<
PseudoElement
ParseError
<
'
i
>
>
{
use
self
:
:
PseudoElement
:
:
*
;
let
pseudo_element
=
match_ignore_ascii_case
!
{
&
name
"
before
"
=
>
Before
"
after
"
=
>
After
"
selection
"
=
>
Selection
"
-
servo
-
details
-
summary
"
=
>
{
if
!
self
.
in_user_agent_stylesheet
(
)
{
return
Err
(
location
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
name
.
clone
(
)
)
)
)
}
DetailsSummary
}
"
-
servo
-
details
-
content
"
=
>
{
if
!
self
.
in_user_agent_stylesheet
(
)
{
return
Err
(
location
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
name
.
clone
(
)
)
)
)
}
DetailsContent
}
"
-
servo
-
text
"
=
>
{
if
!
self
.
in_user_agent_stylesheet
(
)
{
return
Err
(
location
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
name
.
clone
(
)
)
)
)
}
ServoText
}
"
-
servo
-
input
-
text
"
=
>
{
if
!
self
.
in_user_agent_stylesheet
(
)
{
return
Err
(
location
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
name
.
clone
(
)
)
)
)
}
ServoInputText
}
"
-
servo
-
table
-
wrapper
"
=
>
{
if
!
self
.
in_user_agent_stylesheet
(
)
{
return
Err
(
location
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
name
.
clone
(
)
)
)
)
}
ServoTableWrapper
}
"
-
servo
-
anonymous
-
table
-
wrapper
"
=
>
{
if
!
self
.
in_user_agent_stylesheet
(
)
{
return
Err
(
location
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
name
.
clone
(
)
)
)
)
}
ServoAnonymousTableWrapper
}
"
-
servo
-
anonymous
-
table
"
=
>
{
if
!
self
.
in_user_agent_stylesheet
(
)
{
return
Err
(
location
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
name
.
clone
(
)
)
)
)
}
ServoAnonymousTable
}
"
-
servo
-
anonymous
-
table
-
row
"
=
>
{
if
!
self
.
in_user_agent_stylesheet
(
)
{
return
Err
(
location
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
name
.
clone
(
)
)
)
)
}
ServoAnonymousTableRow
}
"
-
servo
-
anonymous
-
table
-
cell
"
=
>
{
if
!
self
.
in_user_agent_stylesheet
(
)
{
return
Err
(
location
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
name
.
clone
(
)
)
)
)
}
ServoAnonymousTableCell
}
"
-
servo
-
anonymous
-
block
"
=
>
{
if
!
self
.
in_user_agent_stylesheet
(
)
{
return
Err
(
location
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
name
.
clone
(
)
)
)
)
}
ServoAnonymousBlock
}
"
-
servo
-
inline
-
block
-
wrapper
"
=
>
{
if
!
self
.
in_user_agent_stylesheet
(
)
{
return
Err
(
location
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
name
.
clone
(
)
)
)
)
}
ServoInlineBlockWrapper
}
"
-
servo
-
input
-
absolute
"
=
>
{
if
!
self
.
in_user_agent_stylesheet
(
)
{
return
Err
(
location
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
name
.
clone
(
)
)
)
)
}
ServoInlineAbsolute
}
_
=
>
return
Err
(
location
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
name
.
clone
(
)
)
)
)
}
;
Ok
(
pseudo_element
)
}
fn
default_namespace
(
&
self
)
-
>
Option
<
Namespace
>
{
self
.
namespaces
.
default
.
as_ref
(
)
.
map
(
|
ns
|
ns
.
clone
(
)
)
}
fn
namespace_for_prefix
(
&
self
prefix
:
&
Prefix
)
-
>
Option
<
Namespace
>
{
self
.
namespaces
.
prefixes
.
get
(
prefix
)
.
cloned
(
)
}
}
impl
SelectorImpl
{
#
[
inline
]
pub
fn
each_eagerly_cascaded_pseudo_element
<
F
>
(
mut
fun
:
F
)
where
F
:
FnMut
(
PseudoElement
)
{
for
i
in
0
.
.
EAGER_PSEUDO_COUNT
{
fun
(
PseudoElement
:
:
from_eager_index
(
i
)
)
;
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
SnapshotMap
(
FnvHashMap
<
OpaqueNode
ServoElementSnapshot
>
)
;
impl
SnapshotMap
{
pub
fn
new
(
)
-
>
Self
{
SnapshotMap
(
FnvHashMap
:
:
default
(
)
)
}
pub
fn
get
<
T
:
TElement
>
(
&
self
el
:
&
T
)
-
>
Option
<
&
ServoElementSnapshot
>
{
self
.
0
.
get
(
&
el
.
as_node
(
)
.
opaque
(
)
)
}
}
impl
Deref
for
SnapshotMap
{
type
Target
=
FnvHashMap
<
OpaqueNode
ServoElementSnapshot
>
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
self
.
0
}
}
impl
DerefMut
for
SnapshotMap
{
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
Self
:
:
Target
{
&
mut
self
.
0
}
}
#
[
derive
(
Debug
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
MallocSizeOf
)
)
]
pub
struct
ServoElementSnapshot
{
pub
state
:
Option
<
ElementState
>
pub
attrs
:
Option
<
Vec
<
(
AttrIdentifier
AttrValue
)
>
>
pub
is_html_element_in_html_document
:
bool
pub
class_changed
:
bool
pub
id_changed
:
bool
pub
other_attributes_changed
:
bool
}
impl
ServoElementSnapshot
{
pub
fn
new
(
is_html_element_in_html_document
:
bool
)
-
>
Self
{
ServoElementSnapshot
{
state
:
None
attrs
:
None
is_html_element_in_html_document
:
is_html_element_in_html_document
class_changed
:
false
id_changed
:
false
other_attributes_changed
:
false
}
}
pub
fn
id_changed
(
&
self
)
-
>
bool
{
self
.
id_changed
}
pub
fn
class_changed
(
&
self
)
-
>
bool
{
self
.
class_changed
}
pub
fn
other_attr_changed
(
&
self
)
-
>
bool
{
self
.
other_attributes_changed
}
fn
get_attr
(
&
self
namespace
:
&
Namespace
name
:
&
LocalName
)
-
>
Option
<
&
AttrValue
>
{
self
.
attrs
.
as_ref
(
)
.
unwrap
(
)
.
iter
(
)
.
find
(
|
&
&
(
ref
ident
_
)
|
ident
.
local_name
=
=
*
name
&
&
ident
.
namespace
=
=
*
namespace
)
.
map
(
|
&
(
_
ref
v
)
|
v
)
}
fn
any_attr_ignore_ns
<
F
>
(
&
self
name
:
&
LocalName
mut
f
:
F
)
-
>
bool
where
F
:
FnMut
(
&
AttrValue
)
-
>
bool
{
self
.
attrs
.
as_ref
(
)
.
unwrap
(
)
.
iter
(
)
.
any
(
|
&
(
ref
ident
ref
v
)
|
ident
.
local_name
=
=
*
name
&
&
f
(
v
)
)
}
}
impl
ElementSnapshot
for
ServoElementSnapshot
{
fn
state
(
&
self
)
-
>
Option
<
ElementState
>
{
self
.
state
.
clone
(
)
}
fn
has_attrs
(
&
self
)
-
>
bool
{
self
.
attrs
.
is_some
(
)
}
fn
id_attr
(
&
self
)
-
>
Option
<
&
Atom
>
{
self
.
get_attr
(
&
ns
!
(
)
&
local_name
!
(
"
id
"
)
)
.
map
(
|
v
|
v
.
as_atom
(
)
)
}
fn
has_class
(
&
self
name
:
&
Atom
case_sensitivity
:
CaseSensitivity
)
-
>
bool
{
self
.
get_attr
(
&
ns
!
(
)
&
local_name
!
(
"
class
"
)
)
.
map_or
(
false
|
v
|
{
v
.
as_tokens
(
)
.
iter
(
)
.
any
(
|
atom
|
case_sensitivity
.
eq_atom
(
atom
name
)
)
}
)
}
fn
each_class
<
F
>
(
&
self
mut
callback
:
F
)
where
F
:
FnMut
(
&
Atom
)
{
if
let
Some
(
v
)
=
self
.
get_attr
(
&
ns
!
(
)
&
local_name
!
(
"
class
"
)
)
{
for
class
in
v
.
as_tokens
(
)
{
callback
(
class
)
;
}
}
}
fn
lang_attr
(
&
self
)
-
>
Option
<
SelectorAttrValue
>
{
self
.
get_attr
(
&
ns
!
(
xml
)
&
local_name
!
(
"
lang
"
)
)
.
or_else
(
|
|
self
.
get_attr
(
&
ns
!
(
)
&
local_name
!
(
"
lang
"
)
)
)
.
map
(
|
v
|
String
:
:
from
(
v
as
&
str
)
)
}
}
impl
ServoElementSnapshot
{
pub
fn
attr_matches
(
&
self
ns
:
&
NamespaceConstraint
<
&
Namespace
>
local_name
:
&
LocalName
operation
:
&
AttrSelectorOperation
<
&
String
>
)
-
>
bool
{
match
*
ns
{
NamespaceConstraint
:
:
Specific
(
ref
ns
)
=
>
self
.
get_attr
(
ns
local_name
)
.
map_or
(
false
|
value
|
value
.
eval_selector
(
operation
)
)
NamespaceConstraint
:
:
Any
=
>
{
self
.
any_attr_ignore_ns
(
local_name
|
value
|
value
.
eval_selector
(
operation
)
)
}
}
}
}
pub
fn
extended_filtering
(
tag
:
&
str
range
:
&
str
)
-
>
bool
{
range
.
split
(
'
'
)
.
any
(
|
lang_range
|
{
let
mut
range_subtags
=
lang_range
.
split
(
'
\
x2d
'
)
;
let
mut
tag_subtags
=
tag
.
split
(
'
\
x2d
'
)
;
if
let
(
Some
(
range_subtag
)
Some
(
tag_subtag
)
)
=
(
range_subtags
.
next
(
)
tag_subtags
.
next
(
)
)
{
if
!
(
range_subtag
.
eq_ignore_ascii_case
(
tag_subtag
)
|
|
range_subtag
.
eq_ignore_ascii_case
(
"
*
"
)
)
{
return
false
;
}
}
let
mut
current_tag_subtag
=
tag_subtags
.
next
(
)
;
for
range_subtag
in
range_subtags
{
if
range_subtag
=
=
"
*
"
{
continue
;
}
match
current_tag_subtag
.
clone
(
)
{
Some
(
tag_subtag
)
=
>
{
if
range_subtag
.
eq_ignore_ascii_case
(
tag_subtag
)
{
current_tag_subtag
=
tag_subtags
.
next
(
)
;
continue
;
}
if
tag_subtag
.
len
(
)
=
=
1
{
return
false
;
}
current_tag_subtag
=
tag_subtags
.
next
(
)
;
if
current_tag_subtag
.
is_none
(
)
{
return
false
;
}
}
None
=
>
{
return
false
;
}
}
}
true
}
)
}
