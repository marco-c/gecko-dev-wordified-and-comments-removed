use
crate
:
:
color
:
:
AbsoluteColor
;
use
crate
:
:
context
:
:
QuirksMode
;
use
crate
:
:
custom_properties
:
:
CssEnvironment
;
use
crate
:
:
media_queries
:
:
media_feature
:
:
{
AllowsRanges
ParsingRequirements
}
;
use
crate
:
:
media_queries
:
:
media_feature
:
:
{
Evaluator
MediaFeatureDescription
}
;
use
crate
:
:
media_queries
:
:
media_feature_expression
:
:
RangeOrOperator
;
use
crate
:
:
media_queries
:
:
MediaType
;
use
crate
:
:
properties
:
:
ComputedValues
;
use
crate
:
:
values
:
:
computed
:
:
CSSPixelLength
;
use
crate
:
:
values
:
:
specified
:
:
color
:
:
{
ColorSchemeFlags
ForcedColors
}
;
use
crate
:
:
values
:
:
specified
:
:
font
:
:
FONT_MEDIUM_PX
;
use
crate
:
:
values
:
:
KeyframesName
;
use
app_units
:
:
Au
;
use
euclid
:
:
default
:
:
Size2D
as
UntypedSize2D
;
use
euclid
:
:
{
Scale
SideOffsets2D
Size2D
}
;
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicBool
AtomicU32
Ordering
}
;
use
style_traits
:
:
{
CSSPixel
DevicePixel
}
;
#
[
derive
(
Debug
MallocSizeOf
)
]
pub
struct
Device
{
media_type
:
MediaType
viewport_size
:
Size2D
<
f32
CSSPixel
>
device_pixel_ratio
:
Scale
<
f32
CSSPixel
DevicePixel
>
#
[
ignore_malloc_size_of
=
"
Pure
stack
type
"
]
quirks_mode
:
QuirksMode
#
[
ignore_malloc_size_of
=
"
Pure
stack
type
"
]
root_font_size
:
AtomicU32
#
[
ignore_malloc_size_of
=
"
Pure
stack
type
"
]
used_root_font_size
:
AtomicBool
#
[
ignore_malloc_size_of
=
"
Pure
stack
type
"
]
used_viewport_units
:
AtomicBool
environment
:
CssEnvironment
}
impl
Device
{
pub
fn
new
(
media_type
:
MediaType
quirks_mode
:
QuirksMode
viewport_size
:
Size2D
<
f32
CSSPixel
>
device_pixel_ratio
:
Scale
<
f32
CSSPixel
DevicePixel
>
)
-
>
Device
{
Device
{
media_type
viewport_size
device_pixel_ratio
quirks_mode
root_font_size
:
AtomicU32
:
:
new
(
FONT_MEDIUM_PX
.
to_bits
(
)
)
used_root_font_size
:
AtomicBool
:
:
new
(
false
)
used_viewport_units
:
AtomicBool
:
:
new
(
false
)
environment
:
CssEnvironment
}
}
#
[
inline
]
pub
fn
environment
(
&
self
)
-
>
&
CssEnvironment
{
&
self
.
environment
}
pub
fn
default_computed_values
(
&
self
)
-
>
&
ComputedValues
{
ComputedValues
:
:
initial_values
(
)
}
pub
fn
root_font_size
(
&
self
)
-
>
CSSPixelLength
{
self
.
used_root_font_size
.
store
(
true
Ordering
:
:
Relaxed
)
;
CSSPixelLength
:
:
new
(
f32
:
:
from_bits
(
self
.
root_font_size
.
load
(
Ordering
:
:
Relaxed
)
)
)
}
pub
fn
set_root_font_size
(
&
self
size
:
CSSPixelLength
)
{
self
.
root_font_size
.
store
(
size
.
px
(
)
.
to_bits
(
)
Ordering
:
:
Relaxed
)
}
pub
fn
quirks_mode
(
&
self
)
-
>
QuirksMode
{
self
.
quirks_mode
}
pub
fn
set_body_text_color
(
&
self
_color
:
AbsoluteColor
)
{
}
pub
fn
animation_name_may_be_referenced
(
&
self
_
:
&
KeyframesName
)
-
>
bool
{
true
}
pub
fn
used_root_font_size
(
&
self
)
-
>
bool
{
self
.
used_root_font_size
.
load
(
Ordering
:
:
Relaxed
)
}
#
[
inline
]
pub
fn
au_viewport_size
(
&
self
)
-
>
UntypedSize2D
<
Au
>
{
Size2D
:
:
new
(
Au
:
:
from_f32_px
(
self
.
viewport_size
.
width
)
Au
:
:
from_f32_px
(
self
.
viewport_size
.
height
)
)
}
pub
fn
au_viewport_size_for_viewport_unit_resolution
(
&
self
)
-
>
UntypedSize2D
<
Au
>
{
self
.
used_viewport_units
.
store
(
true
Ordering
:
:
Relaxed
)
;
self
.
au_viewport_size
(
)
}
pub
fn
used_viewport_units
(
&
self
)
-
>
bool
{
self
.
used_viewport_units
.
load
(
Ordering
:
:
Relaxed
)
}
pub
fn
device_pixel_ratio
(
&
self
)
-
>
Scale
<
f32
CSSPixel
DevicePixel
>
{
self
.
device_pixel_ratio
}
pub
fn
media_type
(
&
self
)
-
>
MediaType
{
self
.
media_type
.
clone
(
)
}
pub
fn
forced_colors
(
&
self
)
-
>
ForcedColors
{
ForcedColors
:
:
None
}
pub
fn
default_background_color
(
&
self
)
-
>
AbsoluteColor
{
AbsoluteColor
:
:
WHITE
}
pub
fn
default_color
(
&
self
)
-
>
AbsoluteColor
{
AbsoluteColor
:
:
BLACK
}
pub
(
crate
)
fn
is_dark_color_scheme
(
&
self
_
:
ColorSchemeFlags
)
-
>
bool
{
false
}
pub
fn
safe_area_insets
(
&
self
)
-
>
SideOffsets2D
<
f32
CSSPixel
>
{
SideOffsets2D
:
:
zero
(
)
}
}
fn
eval_width
(
device
:
&
Device
value
:
Option
<
CSSPixelLength
>
range_or_operator
:
Option
<
RangeOrOperator
>
)
-
>
bool
{
RangeOrOperator
:
:
evaluate
(
range_or_operator
value
.
map
(
Au
:
:
from
)
device
.
au_viewport_size
(
)
.
width
)
}
#
[
derive
(
Clone
Copy
Debug
FromPrimitive
Parse
ToCss
)
]
#
[
repr
(
u8
)
]
enum
Scan
{
Progressive
Interlace
}
fn
eval_scan
(
_
:
&
Device
_
:
Option
<
Scan
>
)
-
>
bool
{
false
}
lazy_static
!
{
/
/
/
A
list
with
all
the
media
features
that
Servo
supports
.
pub
static
ref
MEDIA_FEATURES
:
[
MediaFeatureDescription
;
2
]
=
[
feature
!
(
atom
!
(
"
width
"
)
AllowsRanges
:
:
Yes
Evaluator
:
:
Length
(
eval_width
)
ParsingRequirements
:
:
empty
(
)
)
feature
!
(
atom
!
(
"
scan
"
)
AllowsRanges
:
:
No
keyword_evaluator
!
(
eval_scan
Scan
)
ParsingRequirements
:
:
empty
(
)
)
]
;
}
