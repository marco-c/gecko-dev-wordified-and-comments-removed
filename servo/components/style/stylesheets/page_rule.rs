use
crate
:
:
properties
:
:
PropertyDeclarationBlock
;
use
crate
:
:
shared_lock
:
:
{
DeepCloneParams
DeepCloneWithLock
Locked
}
;
use
crate
:
:
shared_lock
:
:
{
SharedRwLock
SharedRwLockReadGuard
ToCssWithGuard
}
;
use
crate
:
:
str
:
:
CssStringWriter
;
use
cssparser
:
:
SourceLocation
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
malloc_size_of
:
:
{
MallocSizeOf
MallocSizeOfOps
MallocUnconditionalShallowSizeOf
}
;
use
servo_arc
:
:
Arc
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
#
[
derive
(
Debug
ToShmem
)
]
pub
struct
PageRule
{
pub
block
:
Arc
<
Locked
<
PropertyDeclarationBlock
>
>
pub
source_location
:
SourceLocation
}
impl
PageRule
{
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
fn
size_of
(
&
self
guard
:
&
SharedRwLockReadGuard
ops
:
&
mut
MallocSizeOfOps
)
-
>
usize
{
self
.
block
.
unconditional_shallow_size_of
(
ops
)
+
self
.
block
.
read_with
(
guard
)
.
size_of
(
ops
)
}
}
impl
ToCssWithGuard
for
PageRule
{
fn
to_css
(
&
self
guard
:
&
SharedRwLockReadGuard
dest
:
&
mut
CssStringWriter
)
-
>
fmt
:
:
Result
{
dest
.
write_str
(
"
page
{
"
)
?
;
let
declaration_block
=
self
.
block
.
read_with
(
guard
)
;
declaration_block
.
to_css
(
dest
)
?
;
if
!
declaration_block
.
declarations
(
)
.
is_empty
(
)
{
dest
.
write_str
(
"
"
)
?
;
}
dest
.
write_str
(
"
}
"
)
}
}
impl
DeepCloneWithLock
for
PageRule
{
fn
deep_clone_with_lock
(
&
self
lock
:
&
SharedRwLock
guard
:
&
SharedRwLockReadGuard
_params
:
&
DeepCloneParams
)
-
>
Self
{
PageRule
{
block
:
Arc
:
:
new
(
lock
.
wrap
(
self
.
block
.
read_with
(
&
guard
)
.
clone
(
)
)
)
source_location
:
self
.
source_location
.
clone
(
)
}
}
}
