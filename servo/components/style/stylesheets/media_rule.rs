use
crate
:
:
media_queries
:
:
MediaList
;
use
crate
:
:
shared_lock
:
:
{
DeepCloneParams
DeepCloneWithLock
Locked
}
;
use
crate
:
:
shared_lock
:
:
{
SharedRwLock
SharedRwLockReadGuard
ToCssWithGuard
}
;
use
crate
:
:
str
:
:
CssStringWriter
;
use
crate
:
:
stylesheets
:
:
CssRules
;
use
cssparser
:
:
SourceLocation
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
malloc_size_of
:
:
{
MallocSizeOfOps
MallocUnconditionalShallowSizeOf
}
;
use
servo_arc
:
:
Arc
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
#
[
derive
(
Debug
)
]
pub
struct
MediaRule
{
pub
media_queries
:
Arc
<
Locked
<
MediaList
>
>
pub
rules
:
Arc
<
Locked
<
CssRules
>
>
pub
source_location
:
SourceLocation
}
impl
MediaRule
{
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
fn
size_of
(
&
self
guard
:
&
SharedRwLockReadGuard
ops
:
&
mut
MallocSizeOfOps
)
-
>
usize
{
self
.
rules
.
unconditional_shallow_size_of
(
ops
)
+
self
.
rules
.
read_with
(
guard
)
.
size_of
(
guard
ops
)
}
}
impl
ToCssWithGuard
for
MediaRule
{
fn
to_css
(
&
self
guard
:
&
SharedRwLockReadGuard
dest
:
&
mut
CssStringWriter
)
-
>
fmt
:
:
Result
{
dest
.
write_str
(
"
media
"
)
?
;
self
.
media_queries
.
read_with
(
guard
)
.
to_css
(
&
mut
CssWriter
:
:
new
(
dest
)
)
?
;
self
.
rules
.
read_with
(
guard
)
.
to_css_block
(
guard
dest
)
}
}
impl
DeepCloneWithLock
for
MediaRule
{
fn
deep_clone_with_lock
(
&
self
lock
:
&
SharedRwLock
guard
:
&
SharedRwLockReadGuard
params
:
&
DeepCloneParams
)
-
>
Self
{
let
media_queries
=
self
.
media_queries
.
read_with
(
guard
)
;
let
rules
=
self
.
rules
.
read_with
(
guard
)
;
MediaRule
{
media_queries
:
Arc
:
:
new
(
lock
.
wrap
(
media_queries
.
clone
(
)
)
)
rules
:
Arc
:
:
new
(
lock
.
wrap
(
rules
.
deep_clone_with_lock
(
lock
guard
params
)
)
)
source_location
:
self
.
source_location
.
clone
(
)
}
}
}
