use
crate
:
:
applicable_declarations
:
:
ScopeProximity
;
use
crate
:
:
dom
:
:
TElement
;
use
crate
:
:
parser
:
:
ParserContext
;
use
crate
:
:
selector_parser
:
:
{
SelectorImpl
SelectorParser
}
;
use
crate
:
:
shared_lock
:
:
{
DeepCloneParams
DeepCloneWithLock
Locked
SharedRwLock
SharedRwLockReadGuard
ToCssWithGuard
}
;
use
crate
:
:
str
:
:
CssStringWriter
;
use
crate
:
:
stylesheets
:
:
CssRules
;
use
cssparser
:
:
{
Parser
SourceLocation
ToCss
}
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
malloc_size_of
:
:
{
MallocSizeOfOps
MallocUnconditionalShallowSizeOf
MallocUnconditionalSizeOf
}
;
use
selectors
:
:
context
:
:
MatchingContext
;
use
selectors
:
:
matching
:
:
matches_selector
;
use
selectors
:
:
parser
:
:
{
AncestorHashes
ParseRelative
Selector
SelectorList
}
;
use
selectors
:
:
OpaqueElement
;
use
servo_arc
:
:
Arc
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
CssWriter
;
#
[
derive
(
Debug
ToShmem
)
]
pub
struct
ScopeRule
{
pub
bounds
:
ScopeBounds
pub
rules
:
Arc
<
Locked
<
CssRules
>
>
pub
source_location
:
SourceLocation
}
impl
DeepCloneWithLock
for
ScopeRule
{
fn
deep_clone_with_lock
(
&
self
lock
:
&
SharedRwLock
guard
:
&
SharedRwLockReadGuard
params
:
&
DeepCloneParams
)
-
>
Self
{
let
rules
=
self
.
rules
.
read_with
(
guard
)
;
Self
{
bounds
:
self
.
bounds
.
clone
(
)
rules
:
Arc
:
:
new
(
lock
.
wrap
(
rules
.
deep_clone_with_lock
(
lock
guard
params
)
)
)
source_location
:
self
.
source_location
.
clone
(
)
}
}
}
impl
ToCssWithGuard
for
ScopeRule
{
fn
to_css
(
&
self
guard
:
&
SharedRwLockReadGuard
dest
:
&
mut
CssStringWriter
)
-
>
fmt
:
:
Result
{
dest
.
write_str
(
"
scope
"
)
?
;
{
let
mut
writer
=
CssWriter
:
:
new
(
dest
)
;
if
let
Some
(
start
)
=
self
.
bounds
.
start
.
as_ref
(
)
{
writer
.
write_str
(
"
(
"
)
?
;
start
.
to_css
(
&
mut
writer
)
?
;
writer
.
write_char
(
'
)
'
)
?
;
}
if
let
Some
(
end
)
=
self
.
bounds
.
end
.
as_ref
(
)
{
writer
.
write_str
(
"
to
(
"
)
?
;
end
.
to_css
(
&
mut
writer
)
?
;
writer
.
write_char
(
'
)
'
)
?
;
}
}
self
.
rules
.
read_with
(
guard
)
.
to_css_block
(
guard
dest
)
}
}
impl
ScopeRule
{
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
fn
size_of
(
&
self
guard
:
&
SharedRwLockReadGuard
ops
:
&
mut
MallocSizeOfOps
)
-
>
usize
{
self
.
rules
.
unconditional_shallow_size_of
(
ops
)
+
self
.
rules
.
read_with
(
guard
)
.
size_of
(
guard
ops
)
+
self
.
bounds
.
size_of
(
ops
)
}
}
#
[
derive
(
Debug
Clone
ToShmem
)
]
pub
struct
ScopeBounds
{
pub
start
:
Option
<
SelectorList
<
SelectorImpl
>
>
pub
end
:
Option
<
SelectorList
<
SelectorImpl
>
>
}
impl
ScopeBounds
{
#
[
cfg
(
feature
=
"
gecko
"
)
]
fn
size_of
(
&
self
ops
:
&
mut
MallocSizeOfOps
)
-
>
usize
{
fn
bound_size_of
(
bound
:
&
Option
<
SelectorList
<
SelectorImpl
>
>
ops
:
&
mut
MallocSizeOfOps
)
-
>
usize
{
bound
.
as_ref
(
)
.
map
(
|
list
|
list
.
unconditional_size_of
(
ops
)
)
.
unwrap_or
(
0
)
}
bound_size_of
(
&
self
.
start
ops
)
+
bound_size_of
(
&
self
.
end
ops
)
}
}
fn
parse_scope
<
'
a
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
a
'
_
>
in_style_rule
:
bool
for_end
:
bool
)
-
>
Option
<
SelectorList
<
SelectorImpl
>
>
{
input
.
try_parse
(
|
input
|
{
if
for_end
{
input
.
expect_ident_matching
(
"
to
"
)
?
;
}
input
.
expect_parenthesis_block
(
)
?
;
input
.
parse_nested_block
(
|
input
|
{
if
input
.
is_exhausted
(
)
{
return
Ok
(
None
)
;
}
let
selector_parser
=
SelectorParser
{
stylesheet_origin
:
context
.
stylesheet_origin
namespaces
:
&
context
.
namespaces
url_data
:
context
.
url_data
for_supports_rule
:
false
}
;
let
parse_relative
=
if
for_end
{
ParseRelative
:
:
ForScope
}
else
if
in_style_rule
{
ParseRelative
:
:
ForNesting
}
else
{
ParseRelative
:
:
No
}
;
Ok
(
Some
(
SelectorList
:
:
parse_forgiving
(
&
selector_parser
input
parse_relative
)
?
)
)
}
)
}
)
.
ok
(
)
.
flatten
(
)
}
impl
ScopeBounds
{
pub
fn
parse
<
'
a
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
a
'
_
>
in_style_rule
:
bool
)
-
>
Self
{
let
start
=
parse_scope
(
context
input
in_style_rule
false
)
;
let
end
=
parse_scope
(
context
input
in_style_rule
true
)
;
Self
{
start
end
}
}
}
#
[
derive
(
Debug
Clone
MallocSizeOf
)
]
pub
enum
ImplicitScopeRoot
{
InLightTree
(
OpaqueElement
)
InShadowTree
(
OpaqueElement
)
ShadowHost
(
OpaqueElement
)
Constructed
}
impl
ImplicitScopeRoot
{
pub
fn
matches_shadow_host
(
&
self
)
-
>
bool
{
match
self
{
Self
:
:
InLightTree
(
.
.
)
|
Self
:
:
InShadowTree
(
.
.
)
=
>
false
Self
:
:
ShadowHost
(
.
.
)
|
Self
:
:
Constructed
=
>
true
}
}
pub
fn
element
(
&
self
current_host
:
Option
<
OpaqueElement
>
)
-
>
Option
<
OpaqueElement
>
{
match
self
{
Self
:
:
InLightTree
(
e
)
|
Self
:
:
InShadowTree
(
e
)
|
Self
:
:
ShadowHost
(
e
)
=
>
Some
(
*
e
)
Self
:
:
Constructed
=
>
current_host
}
}
}
pub
enum
ScopeTarget
<
'
a
>
{
Selector
(
&
'
a
SelectorList
<
SelectorImpl
>
&
'
a
[
AncestorHashes
]
)
Element
(
OpaqueElement
)
}
impl
<
'
a
>
ScopeTarget
<
'
a
>
{
pub
fn
check
<
E
:
TElement
>
(
&
self
element
:
E
scope
:
Option
<
OpaqueElement
>
context
:
&
mut
MatchingContext
<
E
:
:
Impl
>
)
-
>
bool
{
match
self
{
Self
:
:
Selector
(
list
hashes_list
)
=
>
{
context
.
nest_for_scope_condition
(
scope
|
context
|
{
for
(
selector
hashes
)
in
list
.
slice
(
)
.
iter
(
)
.
zip
(
hashes_list
.
iter
(
)
)
{
if
matches_selector
(
selector
0
Some
(
hashes
)
&
element
context
)
{
return
true
;
}
}
false
}
)
}
Self
:
:
Element
(
e
)
=
>
element
.
opaque
(
)
=
=
*
e
}
}
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
struct
ScopeRootCandidate
{
pub
root
:
OpaqueElement
pub
proximity
:
ScopeProximity
}
pub
fn
collect_scope_roots
<
E
>
(
element
:
E
ceiling
:
Option
<
OpaqueElement
>
context
:
&
mut
MatchingContext
<
E
:
:
Impl
>
target
:
&
ScopeTarget
matches_shadow_host
:
bool
)
-
>
Vec
<
ScopeRootCandidate
>
where
E
:
TElement
{
let
mut
result
=
vec
!
[
]
;
let
mut
parent
=
Some
(
element
)
;
let
mut
proximity
=
0usize
;
while
let
Some
(
p
)
=
parent
{
if
ceiling
=
=
Some
(
p
.
opaque
(
)
)
{
break
;
}
if
target
.
check
(
p
ceiling
context
)
{
result
.
push
(
ScopeRootCandidate
{
root
:
p
.
opaque
(
)
proximity
:
ScopeProximity
:
:
new
(
proximity
)
}
)
;
}
parent
=
p
.
parent_element
(
)
;
proximity
+
=
1
;
if
parent
.
is_none
(
)
&
&
matches_shadow_host
{
parent
=
p
.
containing_shadow_host
(
)
;
}
}
result
}
pub
fn
element_is_outside_of_scope
<
E
>
(
selector
:
&
Selector
<
E
:
:
Impl
>
hashes
:
&
AncestorHashes
element
:
E
root
:
OpaqueElement
context
:
&
mut
MatchingContext
<
E
:
:
Impl
>
root_may_be_shadow_host
:
bool
)
-
>
bool
where
E
:
TElement
{
let
mut
parent
=
Some
(
element
)
;
context
.
nest_for_scope_condition
(
Some
(
root
)
|
context
|
{
while
let
Some
(
p
)
=
parent
{
if
matches_selector
(
selector
0
Some
(
hashes
)
&
p
context
)
{
return
true
;
}
if
p
.
opaque
(
)
=
=
root
{
break
;
}
parent
=
p
.
parent_element
(
)
;
if
parent
.
is_none
(
)
&
&
root_may_be_shadow_host
{
if
let
Some
(
host
)
=
p
.
containing_shadow_host
(
)
{
return
host
.
opaque
(
)
=
=
root
;
}
}
}
return
false
;
}
)
}
