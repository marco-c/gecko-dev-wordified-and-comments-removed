use
cssparser
:
:
SourceLocation
;
use
media_queries
:
:
MediaList
;
use
shared_lock
:
:
{
DeepCloneWithLock
DeepCloneParams
SharedRwLock
SharedRwLockReadGuard
ToCssWithGuard
}
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
str
:
:
CssStringWriter
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
use
stylesheets
:
:
{
StylesheetContents
StylesheetInDocument
}
;
use
values
:
:
CssUrl
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
derive
(
Debug
)
]
pub
struct
ImportSheet
(
pub
:
:
gecko
:
:
data
:
:
GeckoStyleSheet
)
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
impl
DeepCloneWithLock
for
ImportSheet
{
fn
deep_clone_with_lock
(
&
self
_lock
:
&
SharedRwLock
_guard
:
&
SharedRwLockReadGuard
params
:
&
DeepCloneParams
)
-
>
Self
{
use
gecko
:
:
data
:
:
GeckoStyleSheet
;
use
gecko_bindings
:
:
bindings
;
let
clone
=
unsafe
{
bindings
:
:
Gecko_StyleSheet_Clone
(
self
.
0
.
raw
(
)
as
*
const
_
params
.
reference_sheet
)
}
;
ImportSheet
(
unsafe
{
GeckoStyleSheet
:
:
from_addrefed
(
clone
)
}
)
}
}
#
[
cfg
(
feature
=
"
servo
"
)
]
#
[
derive
(
Debug
)
]
pub
struct
ImportSheet
(
pub
:
:
servo_arc
:
:
Arc
<
:
:
stylesheets
:
:
Stylesheet
>
)
;
impl
StylesheetInDocument
for
ImportSheet
{
fn
media
<
'
a
>
(
&
'
a
self
guard
:
&
'
a
SharedRwLockReadGuard
)
-
>
Option
<
&
'
a
MediaList
>
{
self
.
0
.
media
(
guard
)
}
fn
contents
(
&
self
guard
:
&
SharedRwLockReadGuard
)
-
>
&
StylesheetContents
{
self
.
0
.
contents
(
guard
)
}
fn
enabled
(
&
self
)
-
>
bool
{
self
.
0
.
enabled
(
)
}
}
#
[
cfg
(
feature
=
"
servo
"
)
]
impl
DeepCloneWithLock
for
ImportSheet
{
fn
deep_clone_with_lock
(
&
self
_lock
:
&
SharedRwLock
_guard
:
&
SharedRwLockReadGuard
_params
:
&
DeepCloneParams
)
-
>
Self
{
use
servo_arc
:
:
Arc
;
ImportSheet
(
Arc
:
:
new
(
(
&
*
self
.
0
)
.
clone
(
)
)
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
ImportRule
{
pub
url
:
CssUrl
pub
stylesheet
:
ImportSheet
pub
source_location
:
SourceLocation
}
impl
DeepCloneWithLock
for
ImportRule
{
fn
deep_clone_with_lock
(
&
self
lock
:
&
SharedRwLock
guard
:
&
SharedRwLockReadGuard
params
:
&
DeepCloneParams
)
-
>
Self
{
ImportRule
{
url
:
self
.
url
.
clone
(
)
stylesheet
:
self
.
stylesheet
.
deep_clone_with_lock
(
lock
guard
params
)
source_location
:
self
.
source_location
.
clone
(
)
}
}
}
impl
ToCssWithGuard
for
ImportRule
{
fn
to_css
(
&
self
guard
:
&
SharedRwLockReadGuard
dest
:
&
mut
CssStringWriter
)
-
>
fmt
:
:
Result
{
dest
.
write_str
(
"
import
"
)
?
;
self
.
url
.
to_css
(
&
mut
CssWriter
:
:
new
(
dest
)
)
?
;
match
self
.
stylesheet
.
media
(
guard
)
{
Some
(
media
)
if
!
media
.
is_empty
(
)
=
>
{
dest
.
write_str
(
"
"
)
?
;
media
.
to_css
(
&
mut
CssWriter
:
:
new
(
dest
)
)
?
;
}
_
=
>
{
}
}
;
dest
.
write_str
(
"
;
"
)
}
}
