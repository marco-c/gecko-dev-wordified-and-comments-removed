use
servo_arc
:
:
{
Arc
RawOffsetArc
}
;
use
shared_lock
:
:
{
DeepCloneParams
DeepCloneWithLock
Locked
SharedRwLock
SharedRwLockReadGuard
}
;
use
stylesheets
:
:
{
CssRule
RulesMutateError
}
;
use
stylesheets
:
:
loader
:
:
StylesheetLoader
;
use
stylesheets
:
:
memory
:
:
{
MallocSizeOfFn
MallocSizeOfWithGuard
}
;
use
stylesheets
:
:
rule_parser
:
:
State
;
use
stylesheets
:
:
stylesheet
:
:
StylesheetContents
;
#
[
derive
(
Debug
)
]
pub
struct
CssRules
(
pub
Vec
<
CssRule
>
)
;
impl
CssRules
{
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
0
.
is_empty
(
)
}
}
impl
DeepCloneWithLock
for
CssRules
{
fn
deep_clone_with_lock
(
&
self
lock
:
&
SharedRwLock
guard
:
&
SharedRwLockReadGuard
params
:
&
DeepCloneParams
)
-
>
Self
{
CssRules
(
self
.
0
.
iter
(
)
.
map
(
|
x
|
{
x
.
deep_clone_with_lock
(
lock
guard
params
)
}
)
.
collect
(
)
)
}
}
impl
MallocSizeOfWithGuard
for
CssRules
{
fn
malloc_size_of_children
(
&
self
guard
:
&
SharedRwLockReadGuard
malloc_size_of
:
MallocSizeOfFn
)
-
>
usize
{
self
.
0
.
malloc_size_of_children
(
guard
malloc_size_of
)
}
}
impl
CssRules
{
pub
fn
new
(
rules
:
Vec
<
CssRule
>
shared_lock
:
&
SharedRwLock
)
-
>
Arc
<
Locked
<
CssRules
>
>
{
Arc
:
:
new
(
shared_lock
.
wrap
(
CssRules
(
rules
)
)
)
}
fn
only_ns_or_import
(
&
self
)
-
>
bool
{
self
.
0
.
iter
(
)
.
all
(
|
r
|
{
match
*
r
{
CssRule
:
:
Namespace
(
.
.
)
|
CssRule
:
:
Import
(
.
.
)
=
>
true
_
=
>
false
}
}
)
}
pub
fn
remove_rule
(
&
mut
self
index
:
usize
)
-
>
Result
<
(
)
RulesMutateError
>
{
if
index
>
=
self
.
0
.
len
(
)
{
return
Err
(
RulesMutateError
:
:
IndexSize
)
;
}
{
let
ref
rule
=
self
.
0
[
index
]
;
if
let
CssRule
:
:
Namespace
(
.
.
)
=
*
rule
{
if
!
self
.
only_ns_or_import
(
)
{
return
Err
(
RulesMutateError
:
:
InvalidState
)
;
}
}
}
self
.
0
.
remove
(
index
)
;
Ok
(
(
)
)
}
}
pub
trait
CssRulesHelpers
{
fn
insert_rule
(
&
self
lock
:
&
SharedRwLock
rule
:
&
str
parent_stylesheet_contents
:
&
StylesheetContents
index
:
usize
nested
:
bool
loader
:
Option
<
&
StylesheetLoader
>
)
-
>
Result
<
CssRule
RulesMutateError
>
;
}
impl
CssRulesHelpers
for
RawOffsetArc
<
Locked
<
CssRules
>
>
{
fn
insert_rule
(
&
self
lock
:
&
SharedRwLock
rule
:
&
str
parent_stylesheet_contents
:
&
StylesheetContents
index
:
usize
nested
:
bool
loader
:
Option
<
&
StylesheetLoader
>
)
-
>
Result
<
CssRule
RulesMutateError
>
{
let
state
=
{
let
read_guard
=
lock
.
read
(
)
;
let
rules
=
self
.
read_with
(
&
read_guard
)
;
if
index
>
rules
.
0
.
len
(
)
{
return
Err
(
RulesMutateError
:
:
IndexSize
)
;
}
if
nested
{
None
}
else
if
index
=
=
0
{
Some
(
State
:
:
Start
)
}
else
{
rules
.
0
.
get
(
index
-
1
)
.
map
(
CssRule
:
:
rule_state
)
}
}
;
let
(
new_rule
new_state
)
=
CssRule
:
:
parse
(
&
rule
parent_stylesheet_contents
lock
state
loader
)
?
;
{
let
mut
write_guard
=
lock
.
write
(
)
;
let
mut
rules
=
self
.
write_with
(
&
mut
write_guard
)
;
let
rev_state
=
rules
.
0
.
get
(
index
)
.
map_or
(
State
:
:
Body
CssRule
:
:
rule_state
)
;
if
new_state
>
rev_state
{
return
Err
(
RulesMutateError
:
:
HierarchyRequest
)
;
}
if
let
CssRule
:
:
Namespace
(
.
.
)
=
new_rule
{
if
!
rules
.
only_ns_or_import
(
)
{
return
Err
(
RulesMutateError
:
:
InvalidState
)
;
}
}
rules
.
0
.
insert
(
index
new_rule
.
clone
(
)
)
;
}
Ok
(
new_rule
)
}
}
