use
shared_lock
:
:
SharedRwLockReadGuard
;
use
std
:
:
os
:
:
raw
:
:
c_void
;
pub
type
MallocSizeOfFn
=
unsafe
extern
"
C
"
fn
(
ptr
:
*
const
c_void
)
-
>
usize
;
pub
unsafe
fn
do_malloc_size_of
<
T
>
(
malloc_size_of
:
MallocSizeOfFn
ptr
:
*
const
T
)
-
>
usize
{
use
std
:
:
mem
:
:
align_of
;
if
ptr
as
usize
<
=
align_of
:
:
<
T
>
(
)
{
0
}
else
{
malloc_size_of
(
ptr
as
*
const
c_void
)
}
}
pub
trait
MallocSizeOf
{
fn
malloc_size_of_children
(
&
self
malloc_size_of
:
MallocSizeOfFn
)
-
>
usize
;
}
pub
trait
MallocSizeOfWithGuard
{
fn
malloc_size_of_children
(
&
self
guard
:
&
SharedRwLockReadGuard
malloc_size_of
:
MallocSizeOfFn
)
-
>
usize
;
}
impl
<
A
:
MallocSizeOf
B
:
MallocSizeOf
>
MallocSizeOf
for
(
A
B
)
{
fn
malloc_size_of_children
(
&
self
malloc_size_of
:
MallocSizeOfFn
)
-
>
usize
{
self
.
0
.
malloc_size_of_children
(
malloc_size_of
)
+
self
.
1
.
malloc_size_of_children
(
malloc_size_of
)
}
}
impl
<
T
:
MallocSizeOf
>
MallocSizeOf
for
Vec
<
T
>
{
fn
malloc_size_of_children
(
&
self
malloc_size_of
:
MallocSizeOfFn
)
-
>
usize
{
self
.
iter
(
)
.
fold
(
unsafe
{
do_malloc_size_of
(
malloc_size_of
self
.
as_ptr
(
)
)
}
|
n
elem
|
n
+
elem
.
malloc_size_of_children
(
malloc_size_of
)
)
}
}
impl
<
T
:
MallocSizeOfWithGuard
>
MallocSizeOfWithGuard
for
Vec
<
T
>
{
fn
malloc_size_of_children
(
&
self
guard
:
&
SharedRwLockReadGuard
malloc_size_of
:
MallocSizeOfFn
)
-
>
usize
{
self
.
iter
(
)
.
fold
(
unsafe
{
do_malloc_size_of
(
malloc_size_of
self
.
as_ptr
(
)
)
}
|
n
elem
|
n
+
elem
.
malloc_size_of_children
(
guard
malloc_size_of
)
)
}
}
