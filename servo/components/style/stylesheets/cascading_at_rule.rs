use
crate
:
:
stylesheets
:
:
Origin
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
#
[
inline
]
fn
cascade_precendence
(
origin
:
Origin
important
:
bool
)
-
>
u8
{
match
(
origin
important
)
{
(
Origin
:
:
UserAgent
true
)
=
>
1
(
Origin
:
:
User
true
)
=
>
2
(
Origin
:
:
Author
true
)
=
>
3
(
Origin
:
:
Author
false
)
=
>
4
(
Origin
:
:
User
false
)
=
>
5
(
Origin
:
:
UserAgent
false
)
=
>
6
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
ToShmem
)
]
pub
struct
DescriptorDeclaration
<
T
>
{
pub
origin
:
Origin
pub
descriptor
:
T
pub
important
:
bool
}
impl
<
T
>
DescriptorDeclaration
<
T
>
{
#
[
allow
(
missing_docs
)
]
pub
fn
new
(
origin
:
Origin
descriptor
:
T
important
:
bool
)
-
>
Self
{
Self
{
origin
descriptor
important
}
}
pub
fn
higher_or_equal_precendence
(
&
self
other
:
&
Self
)
-
>
bool
{
let
self_precedence
=
cascade_precendence
(
self
.
origin
self
.
important
)
;
let
other_precedence
=
cascade_precendence
(
other
.
origin
other
.
important
)
;
self_precedence
<
=
other_precedence
}
}
impl
<
T
>
ToCss
for
DescriptorDeclaration
<
T
>
where
T
:
ToCss
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
self
.
descriptor
.
to_css
(
dest
)
?
;
if
self
.
important
{
dest
.
write_str
(
"
!
important
"
)
?
;
}
dest
.
write_char
(
'
;
'
)
}
}
