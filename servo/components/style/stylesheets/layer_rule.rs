use
crate
:
:
parser
:
:
{
Parse
ParserContext
}
;
use
crate
:
:
shared_lock
:
:
{
DeepCloneParams
DeepCloneWithLock
Locked
}
;
use
crate
:
:
shared_lock
:
:
{
SharedRwLock
SharedRwLockReadGuard
ToCssWithGuard
}
;
use
crate
:
:
values
:
:
AtomIdent
;
use
super
:
:
CssRules
;
use
cssparser
:
:
{
Parser
SourceLocation
ToCss
as
CssParserToCss
Token
}
;
use
servo_arc
:
:
Arc
;
use
smallvec
:
:
SmallVec
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ParseError
ToCss
}
;
#
[
derive
(
Clone
Copy
Debug
Eq
Hash
MallocSizeOf
PartialEq
PartialOrd
Ord
)
]
pub
struct
LayerOrder
(
u16
)
;
impl
LayerOrder
{
pub
const
fn
root
(
)
-
>
Self
{
Self
(
std
:
:
u16
:
:
MAX
)
}
pub
const
fn
first
(
)
-
>
Self
{
Self
(
0
)
}
#
[
inline
]
pub
fn
inc
(
&
mut
self
)
{
if
self
.
0
!
=
std
:
:
u16
:
:
MAX
{
self
.
0
+
=
1
;
}
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
MallocSizeOf
PartialEq
PartialOrd
Ord
)
]
pub
struct
LayerId
(
pub
u32
)
;
impl
LayerId
{
pub
const
fn
root
(
)
-
>
Self
{
Self
(
0
)
}
}
#
[
derive
(
Clone
Debug
Eq
Hash
MallocSizeOf
PartialEq
ToShmem
)
]
pub
struct
LayerName
(
pub
SmallVec
<
[
AtomIdent
;
1
]
>
)
;
impl
LayerName
{
pub
fn
new_empty
(
)
-
>
Self
{
Self
(
Default
:
:
default
(
)
)
}
pub
fn
new_anonymous
(
)
-
>
Self
{
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicUsize
Ordering
}
;
static
NEXT_ANONYMOUS_LAYER_NAME
:
AtomicUsize
=
AtomicUsize
:
:
new
(
0
)
;
let
mut
name
=
SmallVec
:
:
new
(
)
;
let
next_id
=
NEXT_ANONYMOUS_LAYER_NAME
.
fetch_add
(
1
Ordering
:
:
Relaxed
)
;
name
.
push
(
AtomIdent
:
:
from
(
&
*
format
!
(
"
-
moz
-
anon
-
layer
(
{
}
)
"
next_id
)
)
)
;
LayerName
(
name
)
}
pub
fn
layer_names
(
&
self
)
-
>
&
[
AtomIdent
]
{
&
self
.
0
}
}
impl
Parse
for
LayerName
{
fn
parse
<
'
i
'
t
>
(
_
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
let
mut
result
=
SmallVec
:
:
new
(
)
;
result
.
push
(
AtomIdent
:
:
from
(
&
*
*
input
.
expect_ident
(
)
?
)
)
;
loop
{
let
next_name
=
input
.
try_parse
(
|
input
|
-
>
Result
<
AtomIdent
ParseError
<
'
i
>
>
{
match
input
.
next_including_whitespace
(
)
?
{
Token
:
:
Delim
(
'
.
'
)
=
>
{
}
other
=
>
{
let
t
=
other
.
clone
(
)
;
return
Err
(
input
.
new_unexpected_token_error
(
t
)
)
;
}
}
let
name
=
match
input
.
next_including_whitespace
(
)
?
{
Token
:
:
Ident
(
ref
ident
)
=
>
ident
other
=
>
{
let
t
=
other
.
clone
(
)
;
return
Err
(
input
.
new_unexpected_token_error
(
t
)
)
;
}
}
;
Ok
(
AtomIdent
:
:
from
(
&
*
*
name
)
)
}
)
;
match
next_name
{
Ok
(
name
)
=
>
result
.
push
(
name
)
Err
(
.
.
)
=
>
break
}
}
Ok
(
LayerName
(
result
)
)
}
}
impl
ToCss
for
LayerName
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
let
mut
first
=
true
;
for
name
in
self
.
0
.
iter
(
)
{
if
!
first
{
dest
.
write_char
(
'
.
'
)
?
;
}
first
=
false
;
name
.
to_css
(
dest
)
?
;
}
Ok
(
(
)
)
}
}
#
[
derive
(
Debug
ToShmem
)
]
pub
enum
LayerRuleKind
{
Block
{
name
:
Option
<
LayerName
>
rules
:
Arc
<
Locked
<
CssRules
>
>
}
Statement
{
names
:
Vec
<
LayerName
>
}
}
#
[
derive
(
Debug
ToShmem
)
]
pub
struct
LayerRule
{
pub
kind
:
LayerRuleKind
pub
source_location
:
SourceLocation
}
impl
ToCssWithGuard
for
LayerRule
{
fn
to_css
(
&
self
guard
:
&
SharedRwLockReadGuard
dest
:
&
mut
crate
:
:
str
:
:
CssStringWriter
)
-
>
fmt
:
:
Result
{
dest
.
write_str
(
"
layer
"
)
?
;
match
self
.
kind
{
LayerRuleKind
:
:
Block
{
ref
name
ref
rules
}
=
>
{
if
let
Some
(
ref
name
)
=
*
name
{
dest
.
write_char
(
'
'
)
?
;
name
.
to_css
(
&
mut
CssWriter
:
:
new
(
dest
)
)
?
;
}
rules
.
read_with
(
guard
)
.
to_css_block
(
guard
dest
)
}
LayerRuleKind
:
:
Statement
{
ref
names
}
=
>
{
let
mut
writer
=
CssWriter
:
:
new
(
dest
)
;
let
mut
first
=
true
;
for
name
in
&
*
*
names
{
if
first
{
writer
.
write_char
(
'
'
)
?
;
}
else
{
writer
.
write_str
(
"
"
)
?
;
}
first
=
false
;
name
.
to_css
(
&
mut
writer
)
?
;
}
dest
.
write_char
(
'
;
'
)
}
}
}
}
impl
DeepCloneWithLock
for
LayerRule
{
fn
deep_clone_with_lock
(
&
self
lock
:
&
SharedRwLock
guard
:
&
SharedRwLockReadGuard
params
:
&
DeepCloneParams
)
-
>
Self
{
Self
{
kind
:
match
self
.
kind
{
LayerRuleKind
:
:
Block
{
ref
name
ref
rules
}
=
>
LayerRuleKind
:
:
Block
{
name
:
name
.
clone
(
)
rules
:
Arc
:
:
new
(
lock
.
wrap
(
rules
.
read_with
(
guard
)
.
deep_clone_with_lock
(
lock
guard
params
)
)
)
}
LayerRuleKind
:
:
Statement
{
ref
names
}
=
>
LayerRuleKind
:
:
Statement
{
names
:
names
.
clone
(
)
}
}
source_location
:
self
.
source_location
.
clone
(
)
}
}
}
