mod
counter_style_rule
;
mod
document_rule
;
mod
font_face_rule
;
pub
mod
font_feature_values_rule
;
pub
mod
import_rule
;
pub
mod
keyframes_rule
;
mod
loader
;
mod
media_rule
;
mod
namespace_rule
;
pub
mod
origin
;
mod
page_rule
;
mod
rule_list
;
mod
rule_parser
;
mod
rules_iterator
;
mod
style_rule
;
mod
stylesheet
;
pub
mod
supports_rule
;
pub
mod
viewport_rule
;
use
cssparser
:
:
{
parse_one_rule
Parser
ParserInput
}
;
use
error_reporting
:
:
NullReporter
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
malloc_size_of
:
:
{
MallocSizeOfOps
MallocUnconditionalShallowSizeOf
}
;
use
parser
:
:
{
ParserContext
ParserErrorContext
}
;
use
servo_arc
:
:
Arc
;
use
shared_lock
:
:
{
DeepCloneParams
DeepCloneWithLock
Locked
SharedRwLock
SharedRwLockReadGuard
ToCssWithGuard
}
;
use
std
:
:
fmt
;
use
style_traits
:
:
PARSING_MODE_DEFAULT
;
pub
use
self
:
:
counter_style_rule
:
:
CounterStyleRule
;
pub
use
self
:
:
document_rule
:
:
DocumentRule
;
pub
use
self
:
:
font_face_rule
:
:
FontFaceRule
;
pub
use
self
:
:
font_feature_values_rule
:
:
FontFeatureValuesRule
;
pub
use
self
:
:
import_rule
:
:
ImportRule
;
pub
use
self
:
:
keyframes_rule
:
:
KeyframesRule
;
pub
use
self
:
:
loader
:
:
StylesheetLoader
;
pub
use
self
:
:
media_rule
:
:
MediaRule
;
pub
use
self
:
:
namespace_rule
:
:
NamespaceRule
;
pub
use
self
:
:
origin
:
:
{
Origin
OriginSet
OriginSetIterator
PerOrigin
PerOriginIter
}
;
pub
use
self
:
:
page_rule
:
:
PageRule
;
pub
use
self
:
:
rule_parser
:
:
{
State
TopLevelRuleParser
}
;
pub
use
self
:
:
rule_list
:
:
{
CssRules
CssRulesHelpers
}
;
pub
use
self
:
:
rules_iterator
:
:
{
AllRules
EffectiveRules
NestedRuleIterationCondition
RulesIterator
}
;
pub
use
self
:
:
stylesheet
:
:
{
Namespaces
Stylesheet
DocumentStyleSheet
}
;
pub
use
self
:
:
stylesheet
:
:
{
StylesheetContents
StylesheetInDocument
UserAgentStylesheets
}
;
pub
use
self
:
:
style_rule
:
:
StyleRule
;
pub
use
self
:
:
supports_rule
:
:
SupportsRule
;
pub
use
self
:
:
viewport_rule
:
:
ViewportRule
;
#
[
cfg
(
not
(
feature
=
"
gecko
"
)
)
]
pub
type
UrlExtraData
=
:
:
servo_url
:
:
ServoUrl
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
type
UrlExtraData
=
:
:
gecko_bindings
:
:
sugar
:
:
refptr
:
:
RefPtr
<
:
:
gecko_bindings
:
:
structs
:
:
URLExtraData
>
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
impl
UrlExtraData
{
pub
fn
as_str
(
&
self
)
-
>
&
str
{
"
(
stylo
:
not
supported
)
"
}
pub
fn
is_chrome
(
&
self
)
-
>
bool
{
self
.
mIsChrome
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
impl
Eq
for
UrlExtraData
{
}
#
[
derive
(
Clone
Debug
)
]
#
[
allow
(
missing_docs
)
]
pub
enum
CssRule
{
Namespace
(
Arc
<
Locked
<
NamespaceRule
>
>
)
Import
(
Arc
<
Locked
<
ImportRule
>
>
)
Style
(
Arc
<
Locked
<
StyleRule
>
>
)
Media
(
Arc
<
Locked
<
MediaRule
>
>
)
FontFace
(
Arc
<
Locked
<
FontFaceRule
>
>
)
FontFeatureValues
(
Arc
<
Locked
<
FontFeatureValuesRule
>
>
)
CounterStyle
(
Arc
<
Locked
<
CounterStyleRule
>
>
)
Viewport
(
Arc
<
Locked
<
ViewportRule
>
>
)
Keyframes
(
Arc
<
Locked
<
KeyframesRule
>
>
)
Supports
(
Arc
<
Locked
<
SupportsRule
>
>
)
Page
(
Arc
<
Locked
<
PageRule
>
>
)
Document
(
Arc
<
Locked
<
DocumentRule
>
>
)
}
impl
CssRule
{
#
[
cfg
(
feature
=
"
gecko
"
)
]
fn
size_of
(
&
self
guard
:
&
SharedRwLockReadGuard
ops
:
&
mut
MallocSizeOfOps
)
-
>
usize
{
match
*
self
{
CssRule
:
:
Namespace
(
_
)
=
>
0
CssRule
:
:
Import
(
_
)
=
>
0
CssRule
:
:
Style
(
ref
lock
)
=
>
lock
.
unconditional_shallow_size_of
(
ops
)
+
lock
.
read_with
(
guard
)
.
size_of
(
guard
ops
)
CssRule
:
:
Media
(
ref
lock
)
=
>
lock
.
unconditional_shallow_size_of
(
ops
)
+
lock
.
read_with
(
guard
)
.
size_of
(
guard
ops
)
CssRule
:
:
FontFace
(
_
)
=
>
0
CssRule
:
:
FontFeatureValues
(
_
)
=
>
0
CssRule
:
:
CounterStyle
(
_
)
=
>
0
CssRule
:
:
Viewport
(
_
)
=
>
0
CssRule
:
:
Keyframes
(
_
)
=
>
0
CssRule
:
:
Supports
(
ref
lock
)
=
>
lock
.
unconditional_shallow_size_of
(
ops
)
+
lock
.
read_with
(
guard
)
.
size_of
(
guard
ops
)
CssRule
:
:
Page
(
ref
lock
)
=
>
lock
.
unconditional_shallow_size_of
(
ops
)
+
lock
.
read_with
(
guard
)
.
size_of
(
guard
ops
)
CssRule
:
:
Document
(
ref
lock
)
=
>
lock
.
unconditional_shallow_size_of
(
ops
)
+
lock
.
read_with
(
guard
)
.
size_of
(
guard
ops
)
}
}
}
#
[
allow
(
missing_docs
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
enum
CssRuleType
{
Style
=
1
Charset
=
2
Import
=
3
Media
=
4
FontFace
=
5
Page
=
6
Keyframes
=
7
Keyframe
=
8
Margin
=
9
Namespace
=
10
CounterStyle
=
11
Supports
=
12
Document
=
13
FontFeatureValues
=
14
Viewport
=
15
}
#
[
allow
(
missing_docs
)
]
pub
enum
SingleRuleParseError
{
Syntax
Hierarchy
}
#
[
allow
(
missing_docs
)
]
pub
enum
RulesMutateError
{
Syntax
IndexSize
HierarchyRequest
InvalidState
}
impl
From
<
SingleRuleParseError
>
for
RulesMutateError
{
fn
from
(
other
:
SingleRuleParseError
)
-
>
Self
{
match
other
{
SingleRuleParseError
:
:
Syntax
=
>
RulesMutateError
:
:
Syntax
SingleRuleParseError
:
:
Hierarchy
=
>
RulesMutateError
:
:
HierarchyRequest
}
}
}
impl
CssRule
{
pub
fn
rule_type
(
&
self
)
-
>
CssRuleType
{
match
*
self
{
CssRule
:
:
Style
(
_
)
=
>
CssRuleType
:
:
Style
CssRule
:
:
Import
(
_
)
=
>
CssRuleType
:
:
Import
CssRule
:
:
Media
(
_
)
=
>
CssRuleType
:
:
Media
CssRule
:
:
FontFace
(
_
)
=
>
CssRuleType
:
:
FontFace
CssRule
:
:
FontFeatureValues
(
_
)
=
>
CssRuleType
:
:
FontFeatureValues
CssRule
:
:
CounterStyle
(
_
)
=
>
CssRuleType
:
:
CounterStyle
CssRule
:
:
Keyframes
(
_
)
=
>
CssRuleType
:
:
Keyframes
CssRule
:
:
Namespace
(
_
)
=
>
CssRuleType
:
:
Namespace
CssRule
:
:
Viewport
(
_
)
=
>
CssRuleType
:
:
Viewport
CssRule
:
:
Supports
(
_
)
=
>
CssRuleType
:
:
Supports
CssRule
:
:
Page
(
_
)
=
>
CssRuleType
:
:
Page
CssRule
:
:
Document
(
_
)
=
>
CssRuleType
:
:
Document
}
}
fn
rule_state
(
&
self
)
-
>
State
{
match
*
self
{
CssRule
:
:
Import
(
.
.
)
=
>
State
:
:
Imports
CssRule
:
:
Namespace
(
.
.
)
=
>
State
:
:
Namespaces
_
=
>
State
:
:
Body
}
}
pub
fn
parse
(
css
:
&
str
parent_stylesheet_contents
:
&
StylesheetContents
shared_lock
:
&
SharedRwLock
state
:
Option
<
State
>
loader
:
Option
<
&
StylesheetLoader
>
)
-
>
Result
<
(
Self
State
)
SingleRuleParseError
>
{
let
url_data
=
parent_stylesheet_contents
.
url_data
.
read
(
)
;
let
error_reporter
=
NullReporter
;
let
context
=
ParserContext
:
:
new
(
parent_stylesheet_contents
.
origin
&
url_data
None
PARSING_MODE_DEFAULT
parent_stylesheet_contents
.
quirks_mode
)
;
let
mut
input
=
ParserInput
:
:
new
(
css
)
;
let
mut
input
=
Parser
:
:
new
(
&
mut
input
)
;
let
mut
guard
=
parent_stylesheet_contents
.
namespaces
.
write
(
)
;
let
state
=
state
.
unwrap_or
(
State
:
:
Body
)
;
let
mut
rule_parser
=
TopLevelRuleParser
{
stylesheet_origin
:
parent_stylesheet_contents
.
origin
context
:
context
error_context
:
ParserErrorContext
{
error_reporter
:
&
error_reporter
}
shared_lock
:
&
shared_lock
loader
:
loader
state
:
state
had_hierarchy_error
:
false
namespaces
:
&
mut
*
guard
}
;
parse_one_rule
(
&
mut
input
&
mut
rule_parser
)
.
map
(
|
result
|
(
result
rule_parser
.
state
)
)
.
map_err
(
|
_
|
{
if
rule_parser
.
take_had_hierarchy_error
(
)
{
SingleRuleParseError
:
:
Hierarchy
}
else
{
SingleRuleParseError
:
:
Syntax
}
}
)
}
}
impl
DeepCloneWithLock
for
CssRule
{
fn
deep_clone_with_lock
(
&
self
lock
:
&
SharedRwLock
guard
:
&
SharedRwLockReadGuard
params
:
&
DeepCloneParams
)
-
>
CssRule
{
match
*
self
{
CssRule
:
:
Namespace
(
ref
arc
)
=
>
{
let
rule
=
arc
.
read_with
(
guard
)
;
CssRule
:
:
Namespace
(
Arc
:
:
new
(
lock
.
wrap
(
rule
.
clone
(
)
)
)
)
}
CssRule
:
:
Import
(
ref
arc
)
=
>
{
let
rule
=
arc
.
read_with
(
guard
)
.
deep_clone_with_lock
(
lock
guard
params
)
;
CssRule
:
:
Import
(
Arc
:
:
new
(
lock
.
wrap
(
rule
)
)
)
}
CssRule
:
:
Style
(
ref
arc
)
=
>
{
let
rule
=
arc
.
read_with
(
guard
)
;
CssRule
:
:
Style
(
Arc
:
:
new
(
lock
.
wrap
(
rule
.
deep_clone_with_lock
(
lock
guard
params
)
)
)
)
}
CssRule
:
:
Media
(
ref
arc
)
=
>
{
let
rule
=
arc
.
read_with
(
guard
)
;
CssRule
:
:
Media
(
Arc
:
:
new
(
lock
.
wrap
(
rule
.
deep_clone_with_lock
(
lock
guard
params
)
)
)
)
}
CssRule
:
:
FontFace
(
ref
arc
)
=
>
{
let
rule
=
arc
.
read_with
(
guard
)
;
CssRule
:
:
FontFace
(
Arc
:
:
new
(
lock
.
wrap
(
rule
.
clone_conditionally_gecko_or_servo
(
)
)
)
)
}
CssRule
:
:
FontFeatureValues
(
ref
arc
)
=
>
{
let
rule
=
arc
.
read_with
(
guard
)
;
CssRule
:
:
FontFeatureValues
(
Arc
:
:
new
(
lock
.
wrap
(
rule
.
clone
(
)
)
)
)
}
CssRule
:
:
CounterStyle
(
ref
arc
)
=
>
{
let
rule
=
arc
.
read_with
(
guard
)
;
CssRule
:
:
CounterStyle
(
Arc
:
:
new
(
lock
.
wrap
(
rule
.
clone_conditionally_gecko_or_servo
(
)
)
)
)
}
CssRule
:
:
Viewport
(
ref
arc
)
=
>
{
let
rule
=
arc
.
read_with
(
guard
)
;
CssRule
:
:
Viewport
(
Arc
:
:
new
(
lock
.
wrap
(
rule
.
clone
(
)
)
)
)
}
CssRule
:
:
Keyframes
(
ref
arc
)
=
>
{
let
rule
=
arc
.
read_with
(
guard
)
;
CssRule
:
:
Keyframes
(
Arc
:
:
new
(
lock
.
wrap
(
rule
.
deep_clone_with_lock
(
lock
guard
params
)
)
)
)
}
CssRule
:
:
Supports
(
ref
arc
)
=
>
{
let
rule
=
arc
.
read_with
(
guard
)
;
CssRule
:
:
Supports
(
Arc
:
:
new
(
lock
.
wrap
(
rule
.
deep_clone_with_lock
(
lock
guard
params
)
)
)
)
}
CssRule
:
:
Page
(
ref
arc
)
=
>
{
let
rule
=
arc
.
read_with
(
guard
)
;
CssRule
:
:
Page
(
Arc
:
:
new
(
lock
.
wrap
(
rule
.
deep_clone_with_lock
(
lock
guard
params
)
)
)
)
}
CssRule
:
:
Document
(
ref
arc
)
=
>
{
let
rule
=
arc
.
read_with
(
guard
)
;
CssRule
:
:
Document
(
Arc
:
:
new
(
lock
.
wrap
(
rule
.
deep_clone_with_lock
(
lock
guard
params
)
)
)
)
}
}
}
}
impl
ToCssWithGuard
for
CssRule
{
fn
to_css
<
W
>
(
&
self
guard
:
&
SharedRwLockReadGuard
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
match
*
self
{
CssRule
:
:
Namespace
(
ref
lock
)
=
>
lock
.
read_with
(
guard
)
.
to_css
(
guard
dest
)
CssRule
:
:
Import
(
ref
lock
)
=
>
lock
.
read_with
(
guard
)
.
to_css
(
guard
dest
)
CssRule
:
:
Style
(
ref
lock
)
=
>
lock
.
read_with
(
guard
)
.
to_css
(
guard
dest
)
CssRule
:
:
FontFace
(
ref
lock
)
=
>
lock
.
read_with
(
guard
)
.
to_css
(
guard
dest
)
CssRule
:
:
FontFeatureValues
(
ref
lock
)
=
>
lock
.
read_with
(
guard
)
.
to_css
(
guard
dest
)
CssRule
:
:
CounterStyle
(
ref
lock
)
=
>
lock
.
read_with
(
guard
)
.
to_css
(
guard
dest
)
CssRule
:
:
Viewport
(
ref
lock
)
=
>
lock
.
read_with
(
guard
)
.
to_css
(
guard
dest
)
CssRule
:
:
Keyframes
(
ref
lock
)
=
>
lock
.
read_with
(
guard
)
.
to_css
(
guard
dest
)
CssRule
:
:
Media
(
ref
lock
)
=
>
lock
.
read_with
(
guard
)
.
to_css
(
guard
dest
)
CssRule
:
:
Supports
(
ref
lock
)
=
>
lock
.
read_with
(
guard
)
.
to_css
(
guard
dest
)
CssRule
:
:
Page
(
ref
lock
)
=
>
lock
.
read_with
(
guard
)
.
to_css
(
guard
dest
)
CssRule
:
:
Document
(
ref
lock
)
=
>
lock
.
read_with
(
guard
)
.
to_css
(
guard
dest
)
}
}
}
