use
matching
:
:
{
common_style_affecting_attributes
CommonStyleAffectingAttributeMode
}
;
use
restyle_hints
;
use
selectors
:
:
Element
;
use
selectors
:
:
parser
:
:
{
AttrSelector
SelectorImpl
}
;
pub
type
AttrValue
=
<
TheSelectorImpl
as
SelectorImpl
>
:
:
AttrValue
;
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
use
servo_selector_impl
:
:
*
;
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
use
servo_selector_impl
:
:
{
ServoSelectorImpl
as
TheSelectorImpl
ServoElementSnapshot
as
ElementSnapshot
}
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
use
gecko
:
:
selector_impl
:
:
*
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
use
gecko
:
:
selector_impl
:
:
{
GeckoSelectorImpl
as
TheSelectorImpl
}
;
#
[
derive
(
Debug
Clone
PartialEq
Eq
)
]
pub
enum
PseudoElementCascadeType
{
Eager
Lazy
Precomputed
}
impl
PseudoElementCascadeType
{
#
[
inline
]
pub
fn
is_eager
(
&
self
)
-
>
bool
{
*
self
=
=
PseudoElementCascadeType
:
:
Eager
}
#
[
inline
]
pub
fn
is_lazy
(
&
self
)
-
>
bool
{
*
self
=
=
PseudoElementCascadeType
:
:
Lazy
}
#
[
inline
]
pub
fn
is_precomputed
(
&
self
)
-
>
bool
{
*
self
=
=
PseudoElementCascadeType
:
:
Precomputed
}
}
pub
trait
ElementExt
:
Element
<
Impl
=
TheSelectorImpl
>
{
type
Snapshot
:
restyle_hints
:
:
ElementSnapshot
+
'
static
;
fn
is_link
(
&
self
)
-
>
bool
;
}
impl
TheSelectorImpl
{
#
[
inline
]
pub
fn
each_eagerly_cascaded_pseudo_element
<
F
>
(
mut
fun
:
F
)
where
F
:
FnMut
(
PseudoElement
)
{
Self
:
:
each_pseudo_element
(
|
pseudo
|
{
if
Self
:
:
pseudo_element_cascade_type
(
&
pseudo
)
.
is_eager
(
)
{
fun
(
pseudo
)
}
}
)
}
#
[
inline
]
pub
fn
each_precomputed_pseudo_element
<
F
>
(
mut
fun
:
F
)
where
F
:
FnMut
(
PseudoElement
)
{
Self
:
:
each_pseudo_element
(
|
pseudo
|
{
if
Self
:
:
pseudo_element_cascade_type
(
&
pseudo
)
.
is_precomputed
(
)
{
fun
(
pseudo
)
}
}
)
}
}
pub
fn
attr_exists_selector_is_shareable
(
attr_selector
:
&
AttrSelector
<
TheSelectorImpl
>
)
-
>
bool
{
common_style_affecting_attributes
(
)
.
iter
(
)
.
any
(
|
common_attr_info
|
{
common_attr_info
.
attr_name
=
=
attr_selector
.
name
&
&
match
common_attr_info
.
mode
{
CommonStyleAffectingAttributeMode
:
:
IsPresent
(
_
)
=
>
true
CommonStyleAffectingAttributeMode
:
:
IsEqual
(
.
.
)
=
>
false
}
}
)
}
pub
fn
attr_equals_selector_is_shareable
(
attr_selector
:
&
AttrSelector
<
TheSelectorImpl
>
value
:
&
AttrValue
)
-
>
bool
{
atom
!
(
"
dir
"
)
=
=
*
value
|
|
common_style_affecting_attributes
(
)
.
iter
(
)
.
any
(
|
common_attr_info
|
{
common_attr_info
.
attr_name
=
=
attr_selector
.
name
&
&
match
common_attr_info
.
mode
{
CommonStyleAffectingAttributeMode
:
:
IsEqual
(
ref
target_value
_
)
=
>
{
*
target_value
=
=
*
value
}
CommonStyleAffectingAttributeMode
:
:
IsPresent
(
_
)
=
>
false
}
}
)
}
