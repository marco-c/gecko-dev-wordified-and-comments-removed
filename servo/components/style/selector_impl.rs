use
element_state
:
:
ElementState
;
use
selectors
:
:
Element
;
use
selectors
:
:
parser
:
:
SelectorImpl
;
use
std
:
:
fmt
:
:
Debug
;
use
stylesheets
:
:
Stylesheet
;
pub
type
AttrString
=
<
TheSelectorImpl
as
SelectorImpl
>
:
:
AttrString
;
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
use
servo_selector_impl
:
:
ServoSelectorImpl
;
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
use
servo_selector_impl
:
:
{
ServoSelectorImpl
as
TheSelectorImpl
PseudoElement
NonTSPseudoClass
}
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
use
gecko_selector_impl
:
:
{
GeckoSelectorImpl
as
TheSelectorImpl
PseudoElement
NonTSPseudoClass
}
;
#
[
derive
(
Debug
Clone
PartialEq
Eq
)
]
pub
enum
PseudoElementCascadeType
{
Eager
Lazy
Precomputed
}
impl
PseudoElementCascadeType
{
#
[
inline
]
pub
fn
is_eager
(
&
self
)
-
>
bool
{
*
self
=
=
PseudoElementCascadeType
:
:
Eager
}
#
[
inline
]
pub
fn
is_lazy
(
&
self
)
-
>
bool
{
*
self
=
=
PseudoElementCascadeType
:
:
Lazy
}
#
[
inline
]
pub
fn
is_precomputed
(
&
self
)
-
>
bool
{
*
self
=
=
PseudoElementCascadeType
:
:
Precomputed
}
}
pub
trait
ElementExt
:
Element
<
Impl
=
TheSelectorImpl
AttrString
=
<
TheSelectorImpl
as
SelectorImpl
>
:
:
AttrString
>
{
fn
is_link
(
&
self
)
-
>
bool
;
}
pub
trait
SelectorImplExt
:
SelectorImpl
+
Clone
+
Debug
+
Sized
+
'
static
{
fn
pseudo_element_cascade_type
(
pseudo
:
&
Self
:
:
PseudoElement
)
-
>
PseudoElementCascadeType
;
fn
each_pseudo_element
<
F
>
(
mut
fun
:
F
)
where
F
:
FnMut
(
Self
:
:
PseudoElement
)
;
#
[
inline
]
fn
each_eagerly_cascaded_pseudo_element
<
F
>
(
mut
fun
:
F
)
where
F
:
FnMut
(
<
Self
as
SelectorImpl
>
:
:
PseudoElement
)
{
Self
:
:
each_pseudo_element
(
|
pseudo
|
{
if
Self
:
:
pseudo_element_cascade_type
(
&
pseudo
)
.
is_eager
(
)
{
fun
(
pseudo
)
}
}
)
}
#
[
inline
]
fn
each_precomputed_pseudo_element
<
F
>
(
mut
fun
:
F
)
where
F
:
FnMut
(
<
Self
as
SelectorImpl
>
:
:
PseudoElement
)
{
Self
:
:
each_pseudo_element
(
|
pseudo
|
{
if
Self
:
:
pseudo_element_cascade_type
(
&
pseudo
)
.
is_precomputed
(
)
{
fun
(
pseudo
)
}
}
)
}
fn
pseudo_is_before_or_after
(
pseudo
:
&
Self
:
:
PseudoElement
)
-
>
bool
;
fn
pseudo_class_state_flag
(
pc
:
&
Self
:
:
NonTSPseudoClass
)
-
>
ElementState
;
fn
get_user_or_user_agent_stylesheets
(
)
-
>
&
'
static
[
Stylesheet
]
;
fn
get_quirks_mode_stylesheet
(
)
-
>
Option
<
&
'
static
Stylesheet
>
;
}
