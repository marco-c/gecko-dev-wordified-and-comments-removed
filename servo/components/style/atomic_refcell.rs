#
!
[
allow
(
unsafe_code
)
]
use
owning_ref
:
:
{
OwningRef
StableAddress
}
;
use
parking_lot
:
:
{
RwLock
RwLockReadGuard
RwLockWriteGuard
}
;
use
std
:
:
ops
:
:
{
Deref
DerefMut
}
;
pub
struct
AtomicRefCell
<
T
>
(
RwLock
<
T
>
)
;
pub
struct
AtomicRef
<
'
a
T
:
'
a
>
(
RwLockReadGuard
<
'
a
T
>
)
;
unsafe
impl
<
'
a
T
>
StableAddress
for
AtomicRef
<
'
a
T
>
{
}
impl
<
'
a
T
>
Deref
for
AtomicRef
<
'
a
T
>
{
type
Target
=
T
;
fn
deref
(
&
self
)
-
>
&
T
{
self
.
0
.
deref
(
)
}
}
pub
struct
AtomicRefMut
<
'
a
T
:
'
a
>
(
RwLockWriteGuard
<
'
a
T
>
)
;
unsafe
impl
<
'
a
T
>
StableAddress
for
AtomicRefMut
<
'
a
T
>
{
}
impl
<
'
a
T
>
Deref
for
AtomicRefMut
<
'
a
T
>
{
type
Target
=
T
;
fn
deref
(
&
self
)
-
>
&
T
{
self
.
0
.
deref
(
)
}
}
impl
<
'
a
T
>
DerefMut
for
AtomicRefMut
<
'
a
T
>
{
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
T
{
self
.
0
.
deref_mut
(
)
}
}
impl
<
T
>
AtomicRefCell
<
T
>
{
pub
fn
new
(
value
:
T
)
-
>
Self
{
AtomicRefCell
(
RwLock
:
:
new
(
value
)
)
}
pub
fn
borrow
(
&
self
)
-
>
AtomicRef
<
T
>
{
AtomicRef
(
self
.
0
.
try_read
(
)
.
expect
(
"
already
mutably
borrowed
"
)
)
}
pub
fn
borrow_mut
(
&
self
)
-
>
AtomicRefMut
<
T
>
{
AtomicRefMut
(
self
.
0
.
try_write
(
)
.
expect
(
"
already
borrowed
"
)
)
}
}
impl
<
T
:
Default
>
Default
for
AtomicRefCell
<
T
>
{
fn
default
(
)
-
>
Self
{
Self
:
:
new
(
T
:
:
default
(
)
)
}
}
pub
type
MappedAtomicRef
<
'
a
T
:
'
a
U
:
'
a
>
=
OwningRef
<
AtomicRef
<
'
a
T
>
U
>
;
pub
trait
Map
<
'
a
Base
Curr
>
{
fn
map
<
New
F
>
(
self
f
:
F
)
-
>
MappedAtomicRef
<
'
a
Base
New
>
where
F
:
FnOnce
(
&
Curr
)
-
>
&
New
;
}
impl
<
'
a
Base
>
Map
<
'
a
Base
Base
>
for
AtomicRef
<
'
a
Base
>
{
fn
map
<
New
F
>
(
self
f
:
F
)
-
>
MappedAtomicRef
<
'
a
Base
New
>
where
F
:
FnOnce
(
&
Base
)
-
>
&
New
{
OwningRef
:
:
new
(
self
)
.
map
(
f
)
}
}
impl
<
'
a
Base
Curr
>
Map
<
'
a
Base
Curr
>
for
MappedAtomicRef
<
'
a
Base
Curr
>
{
fn
map
<
New
F
>
(
self
f
:
F
)
-
>
MappedAtomicRef
<
'
a
Base
New
>
where
F
:
FnOnce
(
&
Curr
)
-
>
&
New
{
self
.
map
(
f
)
}
}
impl
<
'
a
Base
>
AtomicRef
<
'
a
Base
>
{
pub
fn
map
<
Curr
New
M
F
>
(
orig
:
M
f
:
F
)
-
>
MappedAtomicRef
<
'
a
Base
New
>
where
F
:
FnOnce
(
&
Curr
)
-
>
&
New
M
:
Map
<
'
a
Base
Curr
>
{
orig
.
map
(
f
)
}
}
