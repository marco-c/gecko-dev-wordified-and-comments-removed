use
parking_lot
:
:
{
RwLock
RwLockReadGuard
RwLockWriteGuard
}
;
pub
struct
AtomicRefCell
<
T
>
(
RwLock
<
T
>
)
;
pub
type
AtomicRef
<
'
a
T
>
=
RwLockReadGuard
<
'
a
T
>
;
pub
type
AtomicRefMut
<
'
a
T
>
=
RwLockWriteGuard
<
'
a
T
>
;
impl
<
T
>
AtomicRefCell
<
T
>
{
pub
fn
new
(
value
:
T
)
-
>
Self
{
AtomicRefCell
(
RwLock
:
:
new
(
value
)
)
}
pub
fn
borrow
(
&
self
)
-
>
AtomicRef
<
T
>
{
self
.
0
.
try_read
(
)
.
expect
(
"
already
mutably
borrowed
"
)
}
pub
fn
borrow_mut
(
&
self
)
-
>
AtomicRefMut
<
T
>
{
self
.
0
.
try_write
(
)
.
expect
(
"
already
borrowed
"
)
}
}
impl
<
T
:
Default
>
Default
for
AtomicRefCell
<
T
>
{
fn
default
(
)
-
>
Self
{
Self
:
:
new
(
T
:
:
default
(
)
)
}
}
