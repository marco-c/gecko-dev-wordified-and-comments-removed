use
applicable_declarations
:
:
{
ApplicableDeclarationBlock
ApplicableDeclarationList
}
;
use
dom
:
:
{
TElement
TShadowRoot
}
;
use
properties
:
:
{
AnimationRules
PropertyDeclarationBlock
}
;
use
rule_tree
:
:
{
CascadeLevel
ShadowCascadeOrder
}
;
use
selector_map
:
:
SelectorMap
;
use
selector_parser
:
:
PseudoElement
;
use
selectors
:
:
matching
:
:
{
ElementSelectorFlags
MatchingContext
}
;
use
servo_arc
:
:
ArcBorrow
;
use
shared_lock
:
:
Locked
;
use
smallvec
:
:
SmallVec
;
use
stylesheets
:
:
Origin
;
use
stylist
:
:
{
AuthorStylesEnabled
Rule
RuleInclusion
Stylist
}
;
pub
struct
RuleCollector
<
'
a
'
b
:
'
a
E
F
:
'
a
>
where
E
:
TElement
{
element
:
E
rule_hash_target
:
E
stylist
:
&
'
a
Stylist
pseudo_element
:
Option
<
&
'
a
PseudoElement
>
style_attribute
:
Option
<
ArcBorrow
<
'
a
Locked
<
PropertyDeclarationBlock
>
>
>
smil_override
:
Option
<
ArcBorrow
<
'
a
Locked
<
PropertyDeclarationBlock
>
>
>
animation_rules
:
AnimationRules
rule_inclusion
:
RuleInclusion
rules
:
&
'
a
mut
ApplicableDeclarationList
context
:
&
'
a
mut
MatchingContext
<
'
b
E
:
:
Impl
>
flags_setter
:
&
'
a
mut
F
shadow_cascade_order
:
ShadowCascadeOrder
matches_user_and_author_rules
:
bool
matches_document_author_rules
:
bool
}
impl
<
'
a
'
b
:
'
a
E
F
:
'
a
>
RuleCollector
<
'
a
'
b
E
F
>
where
E
:
TElement
F
:
FnMut
(
&
E
ElementSelectorFlags
)
{
pub
fn
new
(
stylist
:
&
'
a
Stylist
element
:
E
pseudo_element
:
Option
<
&
'
a
PseudoElement
>
style_attribute
:
Option
<
ArcBorrow
<
'
a
Locked
<
PropertyDeclarationBlock
>
>
>
smil_override
:
Option
<
ArcBorrow
<
'
a
Locked
<
PropertyDeclarationBlock
>
>
>
animation_rules
:
AnimationRules
rule_inclusion
:
RuleInclusion
rules
:
&
'
a
mut
ApplicableDeclarationList
context
:
&
'
a
mut
MatchingContext
<
'
b
E
:
:
Impl
>
flags_setter
:
&
'
a
mut
F
)
-
>
Self
{
let
rule_hash_target
=
element
.
rule_hash_target
(
)
;
let
matches_user_and_author_rules
=
rule_hash_target
.
matches_user_and_author_rules
(
)
;
debug_assert
!
(
cfg
!
(
feature
=
"
gecko
"
)
|
|
style_attribute
.
is_none
(
)
|
|
pseudo_element
.
is_none
(
)
"
Style
attributes
do
not
apply
to
pseudo
-
elements
"
)
;
debug_assert
!
(
pseudo_element
.
map_or
(
true
|
p
|
!
p
.
is_precomputed
(
)
)
)
;
Self
{
element
rule_hash_target
stylist
pseudo_element
style_attribute
smil_override
animation_rules
rule_inclusion
context
flags_setter
rules
matches_user_and_author_rules
shadow_cascade_order
:
0
matches_document_author_rules
:
matches_user_and_author_rules
}
}
fn
collect_stylist_rules
(
&
mut
self
origin
:
Origin
)
{
let
cascade_level
=
match
origin
{
Origin
:
:
UserAgent
=
>
CascadeLevel
:
:
UANormal
Origin
:
:
User
=
>
CascadeLevel
:
:
UserNormal
Origin
:
:
Author
=
>
CascadeLevel
:
:
SameTreeAuthorNormal
}
;
let
cascade_data
=
self
.
stylist
.
cascade_data
(
)
.
borrow_for_origin
(
origin
)
;
let
map
=
match
cascade_data
.
normal_rules
(
self
.
pseudo_element
)
{
Some
(
m
)
=
>
m
None
=
>
return
}
;
map
.
get_all_matching_rules
(
self
.
element
self
.
rule_hash_target
self
.
rules
self
.
context
self
.
flags_setter
cascade_level
0
)
;
}
fn
collect_user_agent_rules
(
&
mut
self
)
{
self
.
collect_stylist_rules
(
Origin
:
:
UserAgent
)
;
}
fn
collect_user_rules
(
&
mut
self
)
{
if
!
self
.
matches_user_and_author_rules
{
return
;
}
self
.
collect_stylist_rules
(
Origin
:
:
User
)
;
}
fn
collect_presentational_hints
(
&
mut
self
)
{
if
self
.
pseudo_element
.
is_some
(
)
{
return
;
}
let
length_before_preshints
=
self
.
rules
.
len
(
)
;
self
.
element
.
synthesize_presentational_hints_for_legacy_attributes
(
self
.
context
.
visited_handling
(
)
self
.
rules
)
;
if
cfg
!
(
debug_assertions
)
{
if
self
.
rules
.
len
(
)
!
=
length_before_preshints
{
for
declaration
in
&
self
.
rules
[
length_before_preshints
.
.
]
{
assert_eq
!
(
declaration
.
level
(
)
CascadeLevel
:
:
PresHints
)
;
}
}
}
}
fn
collect_rules_in_shadow_tree
(
&
mut
self
shadow_host
:
E
map
:
&
SelectorMap
<
Rule
>
cascade_level
:
CascadeLevel
)
{
debug_assert
!
(
shadow_host
.
shadow_root
(
)
.
is_some
(
)
)
;
let
element
=
self
.
element
;
let
rule_hash_target
=
self
.
rule_hash_target
;
let
rules
=
&
mut
self
.
rules
;
let
flags_setter
=
&
mut
self
.
flags_setter
;
let
shadow_cascade_order
=
self
.
shadow_cascade_order
;
self
.
context
.
with_shadow_host
(
Some
(
shadow_host
)
|
context
|
{
map
.
get_all_matching_rules
(
element
rule_hash_target
rules
context
flags_setter
cascade_level
shadow_cascade_order
)
;
}
)
;
self
.
shadow_cascade_order
+
=
1
;
}
fn
collect_slotted_rules
(
&
mut
self
)
{
let
mut
slots
=
SmallVec
:
:
<
[
_
;
3
]
>
:
:
new
(
)
;
let
mut
current
=
self
.
rule_hash_target
.
assigned_slot
(
)
;
while
let
Some
(
slot
)
=
current
{
debug_assert
!
(
self
.
matches_user_and_author_rules
"
We
should
not
slot
NAC
anywhere
"
)
;
slots
.
push
(
slot
)
;
current
=
slot
.
assigned_slot
(
)
;
}
for
slot
in
slots
.
iter
(
)
.
rev
(
)
{
let
shadow
=
slot
.
containing_shadow
(
)
.
unwrap
(
)
;
let
data
=
match
shadow
.
style_data
(
)
{
Some
(
d
)
=
>
d
None
=
>
continue
}
;
let
slotted_rules
=
match
data
.
slotted_rules
(
self
.
pseudo_element
)
{
Some
(
r
)
=
>
r
None
=
>
continue
}
;
self
.
collect_rules_in_shadow_tree
(
shadow
.
host
(
)
slotted_rules
CascadeLevel
:
:
InnerShadowNormal
)
;
}
}
fn
collect_normal_rules_from_containing_shadow_tree
(
&
mut
self
)
{
if
!
self
.
matches_user_and_author_rules
{
return
;
}
let
mut
current_containing_shadow
=
self
.
rule_hash_target
.
containing_shadow
(
)
;
while
let
Some
(
containing_shadow
)
=
current_containing_shadow
{
let
cascade_data
=
containing_shadow
.
style_data
(
)
;
let
host
=
containing_shadow
.
host
(
)
;
if
let
Some
(
map
)
=
cascade_data
.
and_then
(
|
data
|
data
.
normal_rules
(
self
.
pseudo_element
)
)
{
self
.
collect_rules_in_shadow_tree
(
host
map
CascadeLevel
:
:
SameTreeAuthorNormal
)
;
}
let
host_is_svg_use_element
=
host
.
is_svg_element
(
)
&
&
host
.
local_name
(
)
=
=
&
*
local_name
!
(
"
use
"
)
;
if
!
host_is_svg_use_element
{
self
.
matches_document_author_rules
=
false
;
break
;
}
debug_assert
!
(
cascade_data
.
is_none
(
)
"
We
allow
no
stylesheets
in
<
svg
:
use
>
subtrees
"
)
;
current_containing_shadow
=
host
.
containing_shadow
(
)
;
self
.
matches_document_author_rules
=
current_containing_shadow
.
is_none
(
)
;
}
}
fn
collect_host_rules
(
&
mut
self
)
{
let
shadow
=
match
self
.
rule_hash_target
.
shadow_root
(
)
{
Some
(
s
)
=
>
s
None
=
>
return
}
;
debug_assert
!
(
self
.
matches_user_and_author_rules
"
NAC
should
not
be
a
shadow
host
"
)
;
let
style_data
=
match
shadow
.
style_data
(
)
{
Some
(
d
)
=
>
d
None
=
>
return
}
;
let
host_rules
=
match
style_data
.
host_rules
(
self
.
pseudo_element
)
{
Some
(
rules
)
=
>
rules
None
=
>
return
}
;
let
rule_hash_target
=
self
.
rule_hash_target
;
self
.
collect_rules_in_shadow_tree
(
rule_hash_target
host_rules
CascadeLevel
:
:
InnerShadowNormal
)
;
}
fn
collect_document_author_rules
(
&
mut
self
)
{
if
!
self
.
matches_document_author_rules
{
return
;
}
self
.
collect_stylist_rules
(
Origin
:
:
Author
)
;
}
fn
collect_xbl_rules
(
&
mut
self
)
{
let
element
=
self
.
element
;
let
cut_xbl_binding_inheritance
=
element
.
each_xbl_cascade_data
(
|
cascade_data
quirks_mode
|
{
let
map
=
match
cascade_data
.
normal_rules
(
self
.
pseudo_element
)
{
Some
(
m
)
=
>
m
None
=
>
return
}
;
let
mut
matching_context
=
MatchingContext
:
:
new
(
self
.
context
.
matching_mode
(
)
self
.
context
.
bloom_filter
self
.
context
.
nth_index_cache
.
as_mut
(
)
.
map
(
|
s
|
&
mut
*
*
s
)
quirks_mode
)
;
matching_context
.
pseudo_element_matching_fn
=
self
.
context
.
pseudo_element_matching_fn
;
map
.
get_all_matching_rules
(
self
.
element
self
.
rule_hash_target
self
.
rules
&
mut
matching_context
self
.
flags_setter
CascadeLevel
:
:
SameTreeAuthorNormal
self
.
shadow_cascade_order
)
;
}
)
;
self
.
matches_document_author_rules
&
=
!
cut_xbl_binding_inheritance
;
}
fn
collect_style_attribute_and_animation_rules
(
&
mut
self
)
{
if
let
Some
(
sa
)
=
self
.
style_attribute
{
self
.
rules
.
push
(
ApplicableDeclarationBlock
:
:
from_declarations
(
sa
.
clone_arc
(
)
CascadeLevel
:
:
StyleAttributeNormal
)
)
;
}
if
let
Some
(
so
)
=
self
.
smil_override
{
self
.
rules
.
push
(
ApplicableDeclarationBlock
:
:
from_declarations
(
so
.
clone_arc
(
)
CascadeLevel
:
:
SMILOverride
)
)
;
}
if
let
Some
(
anim
)
=
self
.
animation_rules
.
0
.
take
(
)
{
self
.
rules
.
push
(
ApplicableDeclarationBlock
:
:
from_declarations
(
anim
CascadeLevel
:
:
Animations
)
)
;
}
if
let
Some
(
anim
)
=
self
.
animation_rules
.
1
.
take
(
)
{
self
.
rules
.
push
(
ApplicableDeclarationBlock
:
:
from_declarations
(
anim
CascadeLevel
:
:
Transitions
)
)
;
}
}
pub
fn
collect_all
(
mut
self
)
{
self
.
collect_user_agent_rules
(
)
;
self
.
collect_user_rules
(
)
;
if
self
.
rule_inclusion
=
=
RuleInclusion
:
:
DefaultOnly
{
return
;
}
self
.
collect_presentational_hints
(
)
;
if
self
.
stylist
.
author_styles_enabled
(
)
=
=
AuthorStylesEnabled
:
:
No
{
return
;
}
self
.
collect_host_rules
(
)
;
self
.
collect_slotted_rules
(
)
;
self
.
collect_normal_rules_from_containing_shadow_tree
(
)
;
self
.
collect_xbl_rules
(
)
;
self
.
collect_document_author_rules
(
)
;
self
.
collect_style_attribute_and_animation_rules
(
)
;
}
}
