use
dom
:
:
TNode
;
use
traversal
:
:
DomTraversalContext
;
pub
fn
traverse_dom
<
N
C
>
(
root
:
N
shared
:
&
C
:
:
SharedContext
)
where
N
:
TNode
C
:
DomTraversalContext
<
N
>
{
fn
doit
<
'
a
N
C
>
(
context
:
&
'
a
C
node
:
N
)
where
N
:
TNode
C
:
DomTraversalContext
<
N
>
{
debug_assert
!
(
context
.
should_process
(
node
)
)
;
context
.
process_preorder
(
node
)
;
for
kid
in
node
.
children
(
)
{
context
.
pre_process_child_hook
(
node
kid
)
;
if
context
.
should_process
(
kid
)
{
doit
:
:
<
N
C
>
(
context
kid
)
;
}
}
context
.
process_postorder
(
node
)
;
}
let
context
=
C
:
:
new
(
shared
root
.
opaque
(
)
)
;
if
context
.
should_process
(
root
)
{
doit
:
:
<
N
C
>
(
&
context
root
)
;
}
}
