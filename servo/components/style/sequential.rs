use
dom
:
:
TNode
;
use
traversal
:
:
{
DomTraversalContext
PerLevelTraversalData
}
;
pub
fn
traverse_dom
<
N
C
>
(
root
:
N
shared
:
&
C
:
:
SharedContext
)
where
N
:
TNode
C
:
DomTraversalContext
<
N
>
{
fn
doit
<
'
a
N
C
>
(
context
:
&
'
a
C
node
:
N
data
:
&
mut
PerLevelTraversalData
)
where
N
:
TNode
C
:
DomTraversalContext
<
N
>
{
context
.
process_preorder
(
node
data
)
;
if
let
Some
(
el
)
=
node
.
as_element
(
)
{
if
let
Some
(
ref
mut
depth
)
=
data
.
current_dom_depth
{
*
depth
+
=
1
;
}
C
:
:
traverse_children
(
el
|
kid
|
doit
:
:
<
N
C
>
(
context
kid
data
)
)
;
if
let
Some
(
ref
mut
depth
)
=
data
.
current_dom_depth
{
*
depth
-
=
1
;
}
}
if
context
.
needs_postorder_traversal
(
)
{
context
.
process_postorder
(
node
)
;
}
}
let
mut
data
=
PerLevelTraversalData
{
current_dom_depth
:
None
}
;
let
context
=
C
:
:
new
(
shared
root
.
opaque
(
)
)
;
doit
:
:
<
N
C
>
(
&
context
root
&
mut
data
)
;
context
.
local_context
(
)
.
style_sharing_candidate_cache
.
borrow_mut
(
)
.
clear
(
)
;
}
