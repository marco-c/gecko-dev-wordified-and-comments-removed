use
dom
:
:
TRestyleDamage
;
use
gecko_bindings
:
:
bindings
;
use
gecko_bindings
:
:
structs
:
:
{
nsChangeHint
nsStyleContext
}
;
use
gecko_bindings
:
:
sugar
:
:
ownership
:
:
FFIArcHelpers
;
use
properties
:
:
ComputedValues
;
use
std
:
:
ops
:
:
BitOr
;
use
std
:
:
sync
:
:
Arc
;
#
[
derive
(
Clone
Copy
Debug
PartialEq
)
]
pub
struct
GeckoRestyleDamage
(
nsChangeHint
)
;
impl
GeckoRestyleDamage
{
pub
fn
as_change_hint
(
&
self
)
-
>
nsChangeHint
{
self
.
0
}
}
impl
TRestyleDamage
for
GeckoRestyleDamage
{
type
PreExistingComputedValues
=
nsStyleContext
;
fn
empty
(
)
-
>
Self
{
use
std
:
:
mem
;
GeckoRestyleDamage
(
unsafe
{
mem
:
:
transmute
(
0u32
)
}
)
}
fn
compute
(
source
:
&
nsStyleContext
new_style
:
&
Arc
<
ComputedValues
>
)
-
>
Self
{
let
context
=
source
as
*
const
nsStyleContext
as
*
mut
nsStyleContext
;
let
hint
=
unsafe
{
bindings
:
:
Gecko_CalcStyleDifference
(
context
new_style
.
as_borrowed_opt
(
)
.
unwrap
(
)
)
}
;
GeckoRestyleDamage
(
hint
)
}
fn
rebuild_and_reflow
(
)
-
>
Self
{
GeckoRestyleDamage
(
nsChangeHint
:
:
nsChangeHint_ReconstructFrame
)
}
}
impl
BitOr
for
GeckoRestyleDamage
{
type
Output
=
Self
;
fn
bitor
(
self
other
:
Self
)
-
>
Self
{
use
std
:
:
mem
;
GeckoRestyleDamage
(
unsafe
{
mem
:
:
transmute
(
self
.
0
as
u32
|
other
.
0
as
u32
)
}
)
}
}
