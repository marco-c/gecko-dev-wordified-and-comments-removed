use
gecko_bindings
:
:
bindings
;
use
gecko_bindings
:
:
structs
;
use
gecko_bindings
:
:
structs
:
:
{
nsChangeHint
nsStyleContext
}
;
use
gecko_bindings
:
:
sugar
:
:
ownership
:
:
FFIArcHelpers
;
use
matching
:
:
{
StyleChange
StyleDifference
}
;
use
properties
:
:
ComputedValues
;
use
std
:
:
ops
:
:
{
BitAnd
BitOr
BitOrAssign
Not
}
;
use
stylearc
:
:
Arc
;
#
[
derive
(
Clone
Copy
Debug
PartialEq
)
]
pub
struct
GeckoRestyleDamage
(
nsChangeHint
)
;
impl
GeckoRestyleDamage
{
pub
fn
new
(
raw
:
nsChangeHint
)
-
>
Self
{
GeckoRestyleDamage
(
raw
)
}
pub
fn
as_change_hint
(
&
self
)
-
>
nsChangeHint
{
self
.
0
}
pub
fn
empty
(
)
-
>
Self
{
GeckoRestyleDamage
(
nsChangeHint
(
0
)
)
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
0
=
=
nsChangeHint
(
0
)
}
pub
fn
compute_style_difference
(
source
:
&
nsStyleContext
new_style
:
&
Arc
<
ComputedValues
>
)
-
>
StyleDifference
{
let
context
=
source
as
*
const
nsStyleContext
as
*
mut
nsStyleContext
;
let
mut
any_style_changed
:
bool
=
false
;
let
hint
=
unsafe
{
bindings
:
:
Gecko_CalcStyleDifference
(
context
new_style
.
as_borrowed_opt
(
)
.
unwrap
(
)
&
mut
any_style_changed
)
}
;
let
change
=
if
any_style_changed
{
StyleChange
:
:
Changed
}
else
{
StyleChange
:
:
Unchanged
}
;
StyleDifference
:
:
new
(
GeckoRestyleDamage
(
hint
)
change
)
}
pub
fn
contains
(
self
other
:
Self
)
-
>
bool
{
self
&
other
=
=
other
}
pub
fn
reconstruct
(
)
-
>
Self
{
GeckoRestyleDamage
(
structs
:
:
nsChangeHint_nsChangeHint_ReconstructFrame
)
}
pub
fn
handled_for_descendants
(
self
)
-
>
Self
{
let
hint
=
unsafe
{
bindings
:
:
Gecko_HintsHandledForDescendants
(
self
.
0
)
}
;
GeckoRestyleDamage
(
hint
)
}
}
impl
Default
for
GeckoRestyleDamage
{
fn
default
(
)
-
>
Self
{
Self
:
:
empty
(
)
}
}
impl
BitOr
for
GeckoRestyleDamage
{
type
Output
=
Self
;
fn
bitor
(
self
other
:
Self
)
-
>
Self
{
GeckoRestyleDamage
(
self
.
0
|
other
.
0
)
}
}
impl
BitOrAssign
for
GeckoRestyleDamage
{
fn
bitor_assign
(
&
mut
self
other
:
Self
)
{
*
self
=
*
self
|
other
;
}
}
impl
BitAnd
for
GeckoRestyleDamage
{
type
Output
=
Self
;
fn
bitand
(
self
other
:
Self
)
-
>
Self
{
GeckoRestyleDamage
(
nsChangeHint
(
(
self
.
0
)
.
0
&
(
other
.
0
)
.
0
)
)
}
}
impl
Not
for
GeckoRestyleDamage
{
type
Output
=
Self
;
fn
not
(
self
)
-
>
Self
{
GeckoRestyleDamage
(
nsChangeHint
(
!
(
self
.
0
)
.
0
)
)
}
}
