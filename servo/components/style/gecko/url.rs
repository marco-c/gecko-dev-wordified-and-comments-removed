use
gecko_bindings
:
:
structs
:
:
{
ServoBundledURI
URLExtraData
}
;
use
gecko_bindings
:
:
structs
:
:
mozilla
:
:
css
:
:
URLValueData
;
use
gecko_bindings
:
:
structs
:
:
root
:
:
mozilla
:
:
css
:
:
ImageValue
;
use
gecko_bindings
:
:
structs
:
:
root
:
:
nsStyleImageRequest
;
use
gecko_bindings
:
:
sugar
:
:
refptr
:
:
RefPtr
;
use
parser
:
:
ParserContext
;
use
servo_arc
:
:
Arc
;
use
std
:
:
fmt
;
use
style_traits
:
:
{
ToCss
ParseError
}
;
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
)
]
pub
struct
SpecifiedUrl
{
#
[
ignore_malloc_size_of
=
"
XXX
:
do
this
once
bug
1397971
lands
"
]
serialization
:
Arc
<
String
>
#
[
ignore_malloc_size_of
=
"
RefPtr
is
tricky
and
there
aren
'
t
many
of
these
in
practise
"
]
pub
extra_data
:
RefPtr
<
URLExtraData
>
#
[
ignore_malloc_size_of
=
"
XXX
:
do
this
once
bug
1397971
lands
"
]
pub
image_value
:
Option
<
RefPtr
<
ImageValue
>
>
}
trivial_to_computed_value
!
(
SpecifiedUrl
)
;
impl
SpecifiedUrl
{
pub
fn
parse_from_string
<
'
a
>
(
url
:
String
context
:
&
ParserContext
)
-
>
Result
<
Self
ParseError
<
'
a
>
>
{
Ok
(
SpecifiedUrl
{
serialization
:
Arc
:
:
new
(
url
)
extra_data
:
context
.
url_data
.
clone
(
)
image_value
:
None
}
)
}
pub
fn
is_invalid
(
&
self
)
-
>
bool
{
false
}
pub
unsafe
fn
from_url_value_data
(
url
:
&
URLValueData
)
-
>
Result
<
SpecifiedUrl
(
)
>
{
Ok
(
SpecifiedUrl
{
serialization
:
Arc
:
:
new
(
url
.
mString
.
to_string
(
)
)
extra_data
:
url
.
mExtraData
.
to_safe
(
)
image_value
:
None
}
)
}
pub
unsafe
fn
from_image_request
(
image_request
:
&
nsStyleImageRequest
)
-
>
Result
<
SpecifiedUrl
(
)
>
{
if
image_request
.
mImageValue
.
mRawPtr
.
is_null
(
)
{
return
Err
(
(
)
)
;
}
let
image_value
=
image_request
.
mImageValue
.
mRawPtr
.
as_ref
(
)
.
unwrap
(
)
;
let
ref
url_value_data
=
image_value
.
_base
;
let
mut
result
=
try
!
(
Self
:
:
from_url_value_data
(
url_value_data
)
)
;
result
.
build_image_value
(
)
;
Ok
(
result
)
}
pub
fn
is_fragment
(
&
self
)
-
>
bool
{
self
.
as_str
(
)
.
chars
(
)
.
next
(
)
.
map_or
(
false
|
c
|
c
=
=
'
#
'
)
}
pub
fn
as_str
(
&
self
)
-
>
&
str
{
&
*
self
.
serialization
}
pub
fn
as_slice_components
(
&
self
)
-
>
(
*
const
u8
usize
)
{
(
self
.
serialization
.
as_str
(
)
.
as_ptr
(
)
self
.
serialization
.
as_str
(
)
.
len
(
)
)
}
pub
fn
for_ffi
(
&
self
)
-
>
ServoBundledURI
{
let
(
ptr
len
)
=
self
.
as_slice_components
(
)
;
ServoBundledURI
{
mURLString
:
ptr
mURLStringLength
:
len
as
u32
mExtraData
:
self
.
extra_data
.
get
(
)
}
}
pub
fn
build_image_value
(
&
mut
self
)
{
use
gecko_bindings
:
:
bindings
:
:
Gecko_ImageValue_Create
;
debug_assert_eq
!
(
self
.
image_value
None
)
;
self
.
image_value
=
{
unsafe
{
let
ptr
=
Gecko_ImageValue_Create
(
self
.
for_ffi
(
)
)
;
debug_assert
!
(
!
ptr
.
is_null
(
)
)
;
Some
(
RefPtr
:
:
from_addrefed
(
ptr
)
)
}
}
}
}
impl
ToCss
for
SpecifiedUrl
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
dest
.
write_str
(
"
url
(
"
)
?
;
self
.
serialization
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
)
"
)
}
}
