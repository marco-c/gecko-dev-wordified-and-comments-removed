use
crate
:
:
gecko_bindings
:
:
structs
:
:
{
self
PseudoStyleType
}
;
use
crate
:
:
properties
:
:
longhands
:
:
display
:
:
computed_value
:
:
T
as
Display
;
use
crate
:
:
properties
:
:
{
ComputedValues
PropertyFlags
}
;
use
crate
:
:
selector_parser
:
:
{
PseudoElementCascadeType
SelectorImpl
}
;
use
crate
:
:
str
:
:
{
starts_with_ignore_ascii_case
string_as_ascii_lowercase
}
;
use
crate
:
:
string_cache
:
:
Atom
;
use
crate
:
:
values
:
:
serialize_atom_identifier
;
use
crate
:
:
values
:
:
AtomIdent
;
use
cssparser
:
:
{
ToCss
Parser
}
;
use
static_prefs
:
:
pref
;
use
std
:
:
fmt
;
use
style_traits
:
:
ParseError
;
include
!
(
concat
!
(
env
!
(
"
OUT_DIR
"
)
"
/
gecko
/
pseudo_element_definition
.
rs
"
)
)
;
pub
enum
Target
{
Selector
Cssom
}
#
[
derive
(
Clone
Debug
Eq
Hash
MallocSizeOf
PartialEq
ToShmem
)
]
pub
struct
PtNameAndClassSelector
(
thin_vec
:
:
ThinVec
<
Atom
>
)
;
impl
PtNameAndClassSelector
{
pub
fn
from_name
(
name
:
Atom
)
-
>
Self
{
Self
(
thin_vec
!
[
name
]
)
}
pub
fn
name
(
&
self
)
-
>
&
Atom
{
debug_assert
!
(
!
self
.
0
.
is_empty
(
)
)
;
self
.
0
.
first
(
)
.
expect
(
"
Shouldn
'
t
be
empty
"
)
}
pub
fn
classes
(
&
self
)
-
>
&
[
Atom
]
{
debug_assert
!
(
!
self
.
0
.
is_empty
(
)
)
;
&
self
.
0
[
1
.
.
]
}
pub
fn
parse
<
'
i
'
t
>
(
input
:
&
mut
Parser
<
'
i
'
t
>
target
:
Target
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
use
crate
:
:
values
:
:
CustomIdent
;
use
cssparser
:
:
Token
;
use
style_traits
:
:
StyleParseErrorKind
;
let
parse_pt_name
=
|
input
:
&
mut
Parser
<
'
i
'
_
>
|
{
if
matches
!
(
target
Target
:
:
Selector
)
&
&
input
.
try_parse
(
|
i
|
i
.
expect_delim
(
'
*
'
)
)
.
is_ok
(
)
{
Ok
(
atom
!
(
"
*
"
)
)
}
else
{
CustomIdent
:
:
parse
(
input
&
[
]
)
.
map
(
|
c
|
c
.
0
)
}
}
;
let
name
=
input
.
try_parse
(
parse_pt_name
)
;
if
matches
!
(
target
Target
:
:
Cssom
)
{
return
name
.
map
(
Self
:
:
from_name
)
;
}
let
parse_pt_class
=
|
input
:
&
mut
Parser
<
'
i
'
_
>
|
{
let
location
=
input
.
current_source_location
(
)
;
match
input
.
next_including_whitespace
(
)
?
{
Token
:
:
Delim
(
'
.
'
)
=
>
(
)
t
=
>
return
Err
(
location
.
new_unexpected_token_error
(
t
.
clone
(
)
)
)
}
if
let
Ok
(
token
)
=
input
.
try_parse
(
|
i
|
i
.
expect_whitespace
(
)
)
{
return
Err
(
input
.
new_unexpected_token_error
(
Token
:
:
WhiteSpace
(
token
)
)
)
;
}
CustomIdent
:
:
parse
(
input
&
[
]
)
.
map
(
|
c
|
c
.
0
)
}
;
if
name
.
is_err
(
)
{
input
.
skip_whitespace
(
)
;
}
let
mut
classes
=
thin_vec
:
:
ThinVec
:
:
new
(
)
;
while
let
Ok
(
class
)
=
input
.
try_parse
(
parse_pt_class
)
{
classes
.
push
(
class
)
;
}
if
name
.
is_err
(
)
&
&
classes
.
is_empty
(
)
{
return
Err
(
input
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
}
let
mut
result
=
thin_vec
!
[
name
.
unwrap_or
(
atom
!
(
"
*
"
)
)
]
;
result
.
append
(
&
mut
classes
)
;
Ok
(
Self
(
result
)
)
}
}
impl
ToCss
for
PtNameAndClassSelector
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
let
name
=
self
.
name
(
)
;
if
name
=
=
&
atom
!
(
"
*
"
)
{
dest
.
write_char
(
'
*
'
)
?
;
}
else
{
serialize_atom_identifier
(
name
dest
)
?
;
}
for
class
in
self
.
classes
(
)
{
dest
.
write_char
(
'
.
'
)
?
;
serialize_atom_identifier
(
class
dest
)
?
;
}
Ok
(
(
)
)
}
}
impl
:
:
selectors
:
:
parser
:
:
PseudoElement
for
PseudoElement
{
type
Impl
=
SelectorImpl
;
#
[
inline
]
fn
valid_after_slotted
(
&
self
)
-
>
bool
{
matches
!
(
*
self
Self
:
:
Before
|
Self
:
:
After
|
Self
:
:
Marker
|
Self
:
:
Placeholder
|
Self
:
:
FileSelectorButton
|
Self
:
:
DetailsContent
)
}
#
[
inline
]
fn
accepts_state_pseudo_classes
(
&
self
)
-
>
bool
{
self
.
supports_user_action_state
(
)
|
|
self
.
is_in_pseudo_element_tree
(
)
}
#
[
inline
]
fn
specificity_count
(
&
self
)
-
>
u32
{
self
.
specificity_count
(
)
}
#
[
inline
]
fn
is_in_pseudo_element_tree
(
&
self
)
-
>
bool
{
self
.
is_named_view_transition
(
)
}
#
[
inline
]
fn
is_element_backed
(
&
self
)
-
>
bool
{
self
.
is_named_view_transition
(
)
|
|
*
self
=
=
PseudoElement
:
:
DetailsContent
}
}
impl
PseudoElement
{
pub
fn
cascade_type
(
&
self
)
-
>
PseudoElementCascadeType
{
if
self
.
is_eager
(
)
{
debug_assert
!
(
!
self
.
is_anon_box
(
)
)
;
return
PseudoElementCascadeType
:
:
Eager
;
}
if
self
.
is_precomputed
(
)
{
return
PseudoElementCascadeType
:
:
Precomputed
;
}
PseudoElementCascadeType
:
:
Lazy
}
#
[
inline
]
pub
fn
eager_index
(
&
self
)
-
>
usize
{
EAGER_PSEUDOS
.
iter
(
)
.
position
(
|
p
|
p
=
=
self
)
.
expect
(
"
Not
an
eager
pseudo
"
)
}
#
[
inline
]
pub
fn
from_eager_index
(
i
:
usize
)
-
>
Self
{
EAGER_PSEUDOS
[
i
]
.
clone
(
)
}
#
[
inline
]
pub
fn
animations_stored_in_parent
(
&
self
)
-
>
bool
{
matches
!
(
*
self
Self
:
:
Before
|
Self
:
:
After
|
Self
:
:
Marker
)
}
#
[
inline
]
pub
fn
is_before_or_after
(
&
self
)
-
>
bool
{
matches
!
(
*
self
Self
:
:
Before
|
Self
:
:
After
)
}
#
[
inline
]
pub
fn
is_before
(
&
self
)
-
>
bool
{
*
self
=
=
PseudoElement
:
:
Before
}
#
[
inline
]
pub
fn
is_after
(
&
self
)
-
>
bool
{
*
self
=
=
PseudoElement
:
:
After
}
#
[
inline
]
pub
fn
is_marker
(
&
self
)
-
>
bool
{
*
self
=
=
PseudoElement
:
:
Marker
}
#
[
inline
]
pub
fn
is_selection
(
&
self
)
-
>
bool
{
*
self
=
=
PseudoElement
:
:
Selection
}
#
[
inline
]
pub
fn
is_first_letter
(
&
self
)
-
>
bool
{
*
self
=
=
PseudoElement
:
:
FirstLetter
}
#
[
inline
]
pub
fn
is_first_line
(
&
self
)
-
>
bool
{
*
self
=
=
PseudoElement
:
:
FirstLine
}
#
[
inline
]
pub
fn
is_color_swatch
(
&
self
)
-
>
bool
{
*
self
=
=
PseudoElement
:
:
MozColorSwatch
}
#
[
inline
]
pub
fn
is_lazy
(
&
self
)
-
>
bool
{
!
self
.
is_eager
(
)
&
&
!
self
.
is_precomputed
(
)
}
pub
fn
highlight_name
(
&
self
)
-
>
Option
<
&
AtomIdent
>
{
match
*
self
{
Self
:
:
Highlight
(
ref
name
)
=
>
Some
(
name
)
_
=
>
None
}
}
pub
fn
is_highlight
(
&
self
)
-
>
bool
{
matches
!
(
*
self
Self
:
:
Highlight
(
_
)
)
}
#
[
inline
]
pub
fn
is_target_text
(
&
self
)
-
>
bool
{
*
self
=
=
PseudoElement
:
:
TargetText
}
pub
fn
is_named_view_transition
(
&
self
)
-
>
bool
{
matches
!
(
*
self
Self
:
:
ViewTransitionGroup
(
.
.
)
|
Self
:
:
ViewTransitionImagePair
(
.
.
)
|
Self
:
:
ViewTransitionOld
(
.
.
)
|
Self
:
:
ViewTransitionNew
(
.
.
)
)
}
pub
fn
specificity_count
(
&
self
)
-
>
u32
{
match
*
self
{
Self
:
:
ViewTransitionGroup
(
ref
name
)
|
Self
:
:
ViewTransitionImagePair
(
ref
name
)
|
Self
:
:
ViewTransitionOld
(
ref
name
)
|
Self
:
:
ViewTransitionNew
(
ref
name
)
=
>
{
(
name
.
name
(
)
!
=
&
atom
!
(
"
*
"
)
)
as
u32
}
_
=
>
1
}
}
pub
fn
supports_user_action_state
(
&
self
)
-
>
bool
{
(
self
.
flags
(
)
&
structs
:
:
CSS_PSEUDO_ELEMENT_SUPPORTS_USER_ACTION_STATE
)
!
=
0
}
pub
fn
enabled_in_content
(
&
self
)
-
>
bool
{
match
*
self
{
Self
:
:
Highlight
(
.
.
)
=
>
pref
!
(
"
dom
.
customHighlightAPI
.
enabled
"
)
Self
:
:
TargetText
=
>
pref
!
(
"
dom
.
text_fragments
.
enabled
"
)
Self
:
:
SliderFill
|
Self
:
:
SliderTrack
|
Self
:
:
SliderThumb
=
>
{
pref
!
(
"
layout
.
css
.
modern
-
range
-
pseudos
.
enabled
"
)
}
Self
:
:
DetailsContent
=
>
{
pref
!
(
"
layout
.
css
.
details
-
content
.
enabled
"
)
}
Self
:
:
ViewTransition
|
Self
:
:
ViewTransitionGroup
(
.
.
)
|
Self
:
:
ViewTransitionImagePair
(
.
.
)
|
Self
:
:
ViewTransitionOld
(
.
.
)
|
Self
:
:
ViewTransitionNew
(
.
.
)
=
>
pref
!
(
"
dom
.
viewTransitions
.
enabled
"
)
_
=
>
(
self
.
flags
(
)
&
structs
:
:
CSS_PSEUDO_ELEMENT_ENABLED_IN_UA_SHEETS_AND_CHROME
)
=
=
0
}
}
pub
fn
enabled_in_ua_sheets
(
&
self
)
-
>
bool
{
(
self
.
flags
(
)
&
structs
:
:
CSS_PSEUDO_ELEMENT_ENABLED_IN_UA_SHEETS
)
!
=
0
}
pub
fn
enabled_in_chrome
(
&
self
)
-
>
bool
{
(
self
.
flags
(
)
&
structs
:
:
CSS_PSEUDO_ELEMENT_ENABLED_IN_CHROME
)
!
=
0
}
#
[
inline
]
pub
fn
skip_item_display_fixup
(
&
self
)
-
>
bool
{
(
self
.
flags
(
)
&
structs
:
:
CSS_PSEUDO_ELEMENT_IS_FLEX_OR_GRID_ITEM
)
=
=
0
}
#
[
inline
]
pub
fn
is_precomputed
(
&
self
)
-
>
bool
{
self
.
is_anon_box
(
)
&
&
!
self
.
is_tree_pseudo_element
(
)
}
#
[
inline
]
pub
fn
property_restriction
(
&
self
)
-
>
Option
<
PropertyFlags
>
{
Some
(
match
*
self
{
PseudoElement
:
:
FirstLetter
=
>
PropertyFlags
:
:
APPLIES_TO_FIRST_LETTER
PseudoElement
:
:
FirstLine
=
>
PropertyFlags
:
:
APPLIES_TO_FIRST_LINE
PseudoElement
:
:
Placeholder
=
>
PropertyFlags
:
:
APPLIES_TO_PLACEHOLDER
PseudoElement
:
:
Cue
=
>
PropertyFlags
:
:
APPLIES_TO_CUE
PseudoElement
:
:
Marker
if
static_prefs
:
:
pref
!
(
"
layout
.
css
.
marker
.
restricted
"
)
=
>
{
PropertyFlags
:
:
APPLIES_TO_MARKER
}
_
=
>
return
None
}
)
}
pub
fn
should_exist
(
&
self
style
:
&
ComputedValues
)
-
>
bool
{
debug_assert
!
(
self
.
is_eager
(
)
)
;
if
style
.
get_box
(
)
.
clone_display
(
)
=
=
Display
:
:
None
{
return
false
;
}
if
self
.
is_before_or_after
(
)
&
&
style
.
ineffective_content_property
(
)
{
return
false
;
}
true
}
pub
fn
parse_ignore_enabled_state
<
'
i
'
t
>
(
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
use
crate
:
:
gecko
:
:
selector_parser
;
use
cssparser
:
:
Token
;
use
selectors
:
:
parser
:
:
{
is_css2_pseudo_element
SelectorParseErrorKind
}
;
use
style_traits
:
:
StyleParseErrorKind
;
input
.
expect_colon
(
)
?
;
let
location
=
input
.
current_source_location
(
)
;
let
next
=
input
.
next_including_whitespace
(
)
?
;
if
!
matches
!
(
next
Token
:
:
Colon
)
{
let
name
=
match
next
{
Token
:
:
Ident
(
name
)
if
is_css2_pseudo_element
(
&
name
)
=
>
name
_
=
>
return
Err
(
input
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
}
;
return
PseudoElement
:
:
from_slice
(
&
name
false
)
.
ok_or
(
location
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnsupportedPseudoClassOrElement
(
name
.
clone
(
)
)
)
)
}
match
input
.
next_including_whitespace
(
)
?
.
clone
(
)
{
Token
:
:
Ident
(
name
)
=
>
{
PseudoElement
:
:
from_slice
(
&
name
false
)
.
ok_or
(
input
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnsupportedPseudoClassOrElement
(
name
)
)
)
}
Token
:
:
Function
(
name
)
=
>
{
input
.
parse_nested_block
(
|
input
|
{
selector_parser
:
:
parse_functional_pseudo_element_with_name
(
name
input
Target
:
:
Cssom
)
}
)
}
t
=
>
return
Err
(
input
.
new_unexpected_token_error
(
t
)
)
}
}
}
