use
context
:
:
StyleSystemOptions
;
use
gecko_bindings
:
:
bindings
:
:
{
Gecko_RegisterProfilerThread
Gecko_UnregisterProfilerThread
}
;
use
num_cpus
;
use
rayon
;
use
shared_lock
:
:
SharedRwLock
;
use
std
:
:
cmp
;
use
std
:
:
env
;
use
std
:
:
ffi
:
:
CString
;
pub
struct
GlobalStyleData
{
pub
num_threads
:
usize
pub
style_thread_pool
:
Option
<
rayon
:
:
ThreadPool
>
pub
shared_lock
:
SharedRwLock
pub
options
:
StyleSystemOptions
}
fn
thread_name
(
index
:
usize
)
-
>
String
{
format
!
(
"
StyleThread
#
{
}
"
index
)
}
fn
thread_startup
(
index
:
usize
)
{
let
name
=
thread_name
(
index
)
;
let
name
=
CString
:
:
new
(
name
)
.
unwrap
(
)
;
unsafe
{
Gecko_RegisterProfilerThread
(
name
.
as_ptr
(
)
)
;
}
}
fn
thread_shutdown
(
_
:
usize
)
{
unsafe
{
Gecko_UnregisterProfilerThread
(
)
;
}
}
lazy_static
!
{
/
/
/
Global
style
data
pub
static
ref
GLOBAL_STYLE_DATA
:
GlobalStyleData
=
{
let
stylo_threads
=
env
:
:
var
(
"
STYLO_THREADS
"
)
.
map
(
|
s
|
s
.
parse
:
:
<
usize
>
(
)
.
expect
(
"
invalid
STYLO_THREADS
value
"
)
)
;
let
num_threads
=
match
stylo_threads
{
Ok
(
num
)
=
>
num
_
=
>
cmp
:
:
max
(
num_cpus
:
:
get
(
)
*
3
/
4
1
)
}
;
let
pool
=
if
num_threads
<
=
1
{
None
}
else
{
let
configuration
=
rayon
:
:
Configuration
:
:
new
(
)
.
num_threads
(
num_threads
)
.
thread_name
(
thread_name
)
.
start_handler
(
thread_startup
)
.
exit_handler
(
thread_shutdown
)
;
let
pool
=
rayon
:
:
ThreadPool
:
:
new
(
configuration
)
.
ok
(
)
;
pool
}
;
GlobalStyleData
{
num_threads
:
num_threads
style_thread_pool
:
pool
shared_lock
:
SharedRwLock
:
:
new
(
)
options
:
StyleSystemOptions
:
:
default
(
)
}
}
;
}
