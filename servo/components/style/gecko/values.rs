#
!
[
allow
(
unsafe_code
)
]
use
crate
:
:
counter_style
:
:
{
Symbol
Symbols
}
;
use
crate
:
:
gecko_bindings
:
:
bindings
;
use
crate
:
:
gecko_bindings
:
:
structs
:
:
CounterStylePtr
;
use
crate
:
:
values
:
:
generics
:
:
CounterStyle
;
use
crate
:
:
values
:
:
Either
;
use
crate
:
:
Atom
;
use
app_units
:
:
Au
;
use
cssparser
:
:
RGBA
;
use
std
:
:
cmp
:
:
max
;
pub
fn
convert_rgba_to_nscolor
(
rgba
:
&
RGBA
)
-
>
u32
{
u32
:
:
from_le_bytes
(
[
rgba
.
red
rgba
.
green
rgba
.
blue
(
rgba
.
alpha
*
255
.
0
)
.
round
(
)
as
u8
]
)
}
pub
fn
convert_nscolor_to_rgba
(
color
:
u32
)
-
>
RGBA
{
let
[
r
g
b
a
]
=
color
.
to_le_bytes
(
)
;
RGBA
:
:
new
(
r
g
b
a
as
f32
/
255
.
0
)
}
#
[
inline
]
pub
fn
round_border_to_device_pixels
(
width
:
Au
au_per_device_px
:
Au
)
-
>
Au
{
if
width
=
=
Au
(
0
)
{
Au
(
0
)
}
else
{
max
(
au_per_device_px
Au
(
width
.
0
/
au_per_device_px
.
0
*
au_per_device_px
.
0
)
)
}
}
impl
CounterStyle
{
#
[
inline
]
pub
fn
to_gecko_value
(
&
self
gecko_value
:
&
mut
CounterStylePtr
)
{
unsafe
{
bindings
:
:
Gecko_CounterStyle_ToPtr
(
self
gecko_value
)
}
}
pub
fn
from_gecko_value
(
gecko_value
:
&
CounterStylePtr
)
-
>
Either
<
Self
String
>
{
use
crate
:
:
values
:
:
CustomIdent
;
let
name
=
unsafe
{
bindings
:
:
Gecko_CounterStyle_GetName
(
gecko_value
)
}
;
if
!
name
.
is_null
(
)
{
let
name
=
unsafe
{
Atom
:
:
from_raw
(
name
)
}
;
debug_assert_ne
!
(
name
atom
!
(
"
none
"
)
)
;
Either
:
:
First
(
CounterStyle
:
:
Name
(
CustomIdent
(
name
)
)
)
}
else
{
let
anonymous
=
unsafe
{
bindings
:
:
Gecko_CounterStyle_GetAnonymous
(
gecko_value
)
.
as_ref
(
)
}
.
unwrap
(
)
;
let
symbols
=
&
anonymous
.
mSymbols
;
if
anonymous
.
mSingleString
{
debug_assert_eq
!
(
symbols
.
len
(
)
1
)
;
Either
:
:
Second
(
symbols
[
0
]
.
to_string
(
)
)
}
else
{
let
symbol_type
=
anonymous
.
mSymbolsType
;
let
symbols
=
symbols
.
iter
(
)
.
map
(
|
gecko_symbol
|
Symbol
:
:
String
(
gecko_symbol
.
to_string
(
)
.
into
(
)
)
)
.
collect
(
)
;
Either
:
:
First
(
CounterStyle
:
:
Symbols
(
symbol_type
Symbols
(
symbols
)
)
)
}
}
}
}
