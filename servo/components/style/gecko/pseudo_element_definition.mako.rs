#
[
derive
(
Clone
Debug
Eq
Hash
MallocSizeOf
PartialEq
ToShmem
)
]
pub
enum
PseudoElement
{
%
for
pseudo
in
PSEUDOS
:
%
if
pseudo
.
is_tree_pseudo_element
(
)
:
{
pseudo
.
capitalized_pseudo
(
)
}
(
thin_vec
:
:
ThinVec
<
Atom
>
)
%
elif
pseudo
.
pseudo_ident
=
=
"
highlight
"
:
{
pseudo
.
capitalized_pseudo
(
)
}
(
AtomIdent
)
%
else
:
{
pseudo
.
capitalized_pseudo
(
)
}
%
endif
%
endfor
UnknownWebkit
(
Atom
)
}
<
%
EAGER_PSEUDOS
=
[
"
Before
"
"
After
"
"
FirstLine
"
"
FirstLetter
"
]
%
>
<
%
TREE_PSEUDOS
=
[
pseudo
for
pseudo
in
PSEUDOS
if
pseudo
.
is_tree_pseudo_element
(
)
]
%
>
<
%
SIMPLE_PSEUDOS
=
[
pseudo
for
pseudo
in
PSEUDOS
if
pseudo
.
is_simple_pseudo_element
(
)
]
%
>
pub
const
EAGER_PSEUDO_COUNT
:
usize
=
{
len
(
EAGER_PSEUDOS
)
}
;
pub
const
SIMPLE_PSEUDO_COUNT
:
usize
=
{
len
(
SIMPLE_PSEUDOS
)
}
;
pub
const
TREE_PSEUDO_COUNT
:
usize
=
{
len
(
TREE_PSEUDOS
)
}
;
pub
const
PSEUDO_COUNT
:
usize
=
{
len
(
PSEUDOS
)
}
;
pub
const
EAGER_PSEUDOS
:
[
PseudoElement
;
EAGER_PSEUDO_COUNT
]
=
[
%
for
eager_pseudo_name
in
EAGER_PSEUDOS
:
PseudoElement
:
:
{
eager_pseudo_name
}
%
endfor
]
;
<
%
def
name
=
"
pseudo_element_variant
(
pseudo
tree_arg
=
'
.
.
'
)
"
>
\
PseudoElement
:
:
{
pseudo
.
capitalized_pseudo
(
)
}
{
"
(
{
}
)
"
.
format
(
tree_arg
)
if
not
pseudo
.
is_simple_pseudo_element
(
)
else
"
"
}
\
<
/
%
def
>
impl
PseudoElement
{
#
[
inline
]
pub
fn
index
(
&
self
)
-
>
usize
{
match
*
self
{
%
for
i
pseudo
in
enumerate
(
PSEUDOS
)
:
{
pseudo_element_variant
(
pseudo
)
}
=
>
{
i
}
%
endfor
PseudoElement
:
:
UnknownWebkit
(
.
.
)
=
>
unreachable
!
(
)
}
}
pub
fn
pseudo_none_array
<
T
>
(
)
-
>
[
Option
<
T
>
;
PSEUDO_COUNT
]
{
[
{
"
\
n
"
.
join
(
[
"
None
"
for
pseudo
in
PSEUDOS
]
)
}
]
}
#
[
inline
]
pub
fn
is_anon_box
(
&
self
)
-
>
bool
{
match
*
self
{
%
for
pseudo
in
PSEUDOS
:
%
if
pseudo
.
is_anon_box
(
)
:
{
pseudo_element_variant
(
pseudo
)
}
=
>
true
%
endif
%
endfor
_
=
>
false
}
}
#
[
inline
]
pub
fn
is_eager
(
&
self
)
-
>
bool
{
matches
!
(
*
self
{
"
|
"
.
join
(
map
(
lambda
name
:
"
PseudoElement
:
:
{
}
"
.
format
(
name
)
EAGER_PSEUDOS
)
)
}
)
}
#
[
inline
]
pub
fn
is_tree_pseudo_element
(
&
self
)
-
>
bool
{
match
*
self
{
%
for
pseudo
in
TREE_PSEUDOS
:
{
pseudo_element_variant
(
pseudo
)
}
=
>
true
%
endfor
_
=
>
false
}
}
#
[
inline
]
pub
fn
is_unknown_webkit_pseudo_element
(
&
self
)
-
>
bool
{
matches
!
(
*
self
PseudoElement
:
:
UnknownWebkit
(
.
.
)
)
}
pub
fn
flags
(
&
self
)
-
>
u32
{
match
*
self
{
%
for
pseudo
in
PSEUDOS
:
{
pseudo_element_variant
(
pseudo
)
}
=
>
%
if
pseudo
.
is_tree_pseudo_element
(
)
:
structs
:
:
CSS_PSEUDO_ELEMENT_ENABLED_IN_UA_SHEETS_AND_CHROME
%
elif
pseudo
.
is_anon_box
(
)
:
structs
:
:
CSS_PSEUDO_ELEMENT_ENABLED_IN_UA_SHEETS
%
else
:
structs
:
:
SERVO_CSS_PSEUDO_ELEMENT_FLAGS_
{
pseudo
.
pseudo_ident
}
%
endif
%
endfor
PseudoElement
:
:
UnknownWebkit
(
.
.
)
=
>
0
}
}
#
[
inline
]
pub
fn
from_pseudo_type
(
type_
:
PseudoStyleType
functional_pseudo_parameter
:
Option
<
AtomIdent
>
)
-
>
Option
<
Self
>
{
match
type_
{
%
for
pseudo
in
PSEUDOS
:
%
if
pseudo
.
is_simple_pseudo_element
(
)
:
PseudoStyleType
:
:
{
pseudo
.
pseudo_ident
}
=
>
{
debug_assert
!
(
functional_pseudo_parameter
.
is_none
(
)
)
;
Some
(
{
pseudo_element_variant
(
pseudo
)
}
)
}
%
endif
%
endfor
PseudoStyleType
:
:
highlight
=
>
{
match
functional_pseudo_parameter
{
Some
(
p
)
=
>
Some
(
PseudoElement
:
:
Highlight
(
p
)
)
None
=
>
None
}
}
_
=
>
None
}
}
#
[
inline
]
pub
fn
pseudo_type
(
&
self
)
-
>
PseudoStyleType
{
match
*
self
{
%
for
pseudo
in
PSEUDOS
:
%
if
pseudo
.
is_tree_pseudo_element
(
)
:
PseudoElement
:
:
{
pseudo
.
capitalized_pseudo
(
)
}
(
.
.
)
=
>
PseudoStyleType
:
:
XULTree
%
elif
pseudo
.
pseudo_ident
=
=
"
highlight
"
:
PseudoElement
:
:
{
pseudo
.
capitalized_pseudo
(
)
}
(
.
.
)
=
>
PseudoStyleType
:
:
{
pseudo
.
pseudo_ident
}
%
else
:
PseudoElement
:
:
{
pseudo
.
capitalized_pseudo
(
)
}
=
>
PseudoStyleType
:
:
{
pseudo
.
pseudo_ident
}
%
endif
%
endfor
PseudoElement
:
:
UnknownWebkit
(
.
.
)
=
>
unreachable
!
(
)
}
}
#
[
inline
]
pub
fn
tree_pseudo_args
(
&
self
)
-
>
Option
<
<
&
[
Atom
]
>
{
match
*
self
{
%
for
pseudo
in
TREE_PSEUDOS
:
PseudoElement
:
:
{
pseudo
.
capitalized_pseudo
(
)
}
(
ref
args
)
=
>
Some
(
args
)
%
endfor
_
=
>
None
}
}
#
[
inline
]
pub
fn
from_tree_pseudo_atom
(
atom
:
&
Atom
args
:
Box
<
[
Atom
]
>
)
-
>
Option
<
Self
>
{
%
for
pseudo
in
PSEUDOS
:
%
if
pseudo
.
is_tree_pseudo_element
(
)
:
if
atom
=
=
&
atom
!
(
"
{
pseudo
.
value
}
"
)
{
return
Some
(
PseudoElement
:
:
{
pseudo
.
capitalized_pseudo
(
)
}
(
args
.
into
(
)
)
)
;
}
%
endif
%
endfor
None
}
#
[
inline
]
pub
fn
from_slice
(
name
:
&
str
allow_unkown_webkit
:
bool
)
-
>
Option
<
Self
>
{
ascii_case_insensitive_phf_map
!
{
pseudo
-
>
PseudoElement
=
{
%
for
pseudo
in
SIMPLE_PSEUDOS
:
"
{
pseudo
.
value
[
1
:
]
}
"
=
>
{
pseudo_element_variant
(
pseudo
)
}
%
endfor
/
/
Alias
some
legacy
prefixed
pseudos
to
their
standardized
name
at
parse
time
:
"
-
moz
-
selection
"
=
>
PseudoElement
:
:
Selection
"
-
moz
-
placeholder
"
=
>
PseudoElement
:
:
Placeholder
"
-
moz
-
list
-
bullet
"
=
>
PseudoElement
:
:
Marker
"
-
moz
-
list
-
number
"
=
>
PseudoElement
:
:
Marker
}
}
if
let
Some
(
p
)
=
pseudo
:
:
get
(
name
)
{
return
Some
(
p
.
clone
(
)
)
;
}
if
starts_with_ignore_ascii_case
(
name
"
-
moz
-
tree
-
"
)
{
return
PseudoElement
:
:
tree_pseudo_element
(
name
Default
:
:
default
(
)
)
}
const
WEBKIT_PREFIX
:
&
str
=
"
-
webkit
-
"
;
if
allow_unkown_webkit
&
&
starts_with_ignore_ascii_case
(
name
WEBKIT_PREFIX
)
{
let
part
=
string_as_ascii_lowercase
(
&
name
[
WEBKIT_PREFIX
.
len
(
)
.
.
]
)
;
return
Some
(
PseudoElement
:
:
UnknownWebkit
(
part
.
into
(
)
)
)
;
}
None
}
#
[
inline
]
pub
fn
tree_pseudo_element
(
name
:
&
str
args
:
thin_vec
:
:
ThinVec
<
Atom
>
)
-
>
Option
<
Self
>
{
debug_assert
!
(
starts_with_ignore_ascii_case
(
name
"
-
moz
-
tree
-
"
)
)
;
let
tree_part
=
&
name
[
10
.
.
]
;
%
for
pseudo
in
TREE_PSEUDOS
:
if
tree_part
.
eq_ignore_ascii_case
(
"
{
pseudo
.
value
[
11
:
]
}
"
)
{
return
Some
(
{
pseudo_element_variant
(
pseudo
"
args
"
)
}
)
;
}
%
endfor
None
}
}
impl
ToCss
for
PseudoElement
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
dest
.
write_char
(
'
:
'
)
?
;
match
*
self
{
%
for
pseudo
in
(
p
for
p
in
PSEUDOS
if
p
.
pseudo_ident
!
=
"
highlight
"
)
:
{
pseudo_element_variant
(
pseudo
)
}
=
>
dest
.
write_str
(
"
{
pseudo
.
value
}
"
)
?
%
endfor
PseudoElement
:
:
Highlight
(
ref
name
)
=
>
{
dest
.
write_str
(
"
:
highlight
(
"
)
?
;
serialize_atom_identifier
(
name
dest
)
?
;
dest
.
write_char
(
'
)
'
)
?
;
}
PseudoElement
:
:
UnknownWebkit
(
ref
atom
)
=
>
{
dest
.
write_str
(
"
:
-
webkit
-
"
)
?
;
serialize_atom_identifier
(
atom
dest
)
?
;
}
}
if
let
Some
(
args
)
=
self
.
tree_pseudo_args
(
)
{
if
!
args
.
is_empty
(
)
{
dest
.
write_char
(
'
(
'
)
?
;
let
mut
iter
=
args
.
iter
(
)
;
if
let
Some
(
first
)
=
iter
.
next
(
)
{
serialize_atom_identifier
(
&
first
dest
)
?
;
for
item
in
iter
{
dest
.
write_str
(
"
"
)
?
;
serialize_atom_identifier
(
item
dest
)
?
;
}
}
dest
.
write_char
(
'
)
'
)
?
;
}
}
Ok
(
(
)
)
}
}
