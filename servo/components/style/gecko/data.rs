use
animation
:
:
Animation
;
use
atomic_refcell
:
:
{
AtomicRef
AtomicRefCell
AtomicRefMut
}
;
use
dom
:
:
OpaqueNode
;
use
gecko_bindings
:
:
bindings
:
:
RawServoStyleSet
;
use
gecko_bindings
:
:
structs
:
:
RawGeckoPresContextOwned
;
use
gecko_bindings
:
:
sugar
:
:
ownership
:
:
{
HasBoxFFI
HasFFI
HasSimpleFFI
}
;
use
media_queries
:
:
Device
;
use
parking_lot
:
:
RwLock
;
use
properties
:
:
ComputedValues
;
use
shared_lock
:
:
{
Locked
StylesheetGuards
SharedRwLockReadGuard
}
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
sync
:
:
mpsc
:
:
{
Receiver
Sender
channel
}
;
use
stylearc
:
:
Arc
;
use
stylesheet_set
:
:
StylesheetSet
;
use
stylesheets
:
:
{
FontFaceRule
Origin
Stylesheet
}
;
use
stylist
:
:
{
ExtraStyleData
Stylist
}
;
pub
struct
PerDocumentStyleDataImpl
{
pub
stylist
:
Arc
<
Stylist
>
pub
stylesheets
:
StylesheetSet
pub
new_animations_sender
:
Sender
<
Animation
>
pub
new_animations_receiver
:
Receiver
<
Animation
>
pub
running_animations
:
Arc
<
RwLock
<
HashMap
<
OpaqueNode
Vec
<
Animation
>
>
>
>
pub
expired_animations
:
Arc
<
RwLock
<
HashMap
<
OpaqueNode
Vec
<
Animation
>
>
>
>
pub
font_faces
:
Vec
<
(
Arc
<
Locked
<
FontFaceRule
>
>
Origin
)
>
}
pub
struct
PerDocumentStyleData
(
AtomicRefCell
<
PerDocumentStyleDataImpl
>
)
;
impl
PerDocumentStyleData
{
pub
fn
new
(
pres_context
:
RawGeckoPresContextOwned
)
-
>
Self
{
let
device
=
Device
:
:
new
(
pres_context
)
;
let
(
new_anims_sender
new_anims_receiver
)
=
channel
(
)
;
PerDocumentStyleData
(
AtomicRefCell
:
:
new
(
PerDocumentStyleDataImpl
{
stylist
:
Arc
:
:
new
(
Stylist
:
:
new
(
device
)
)
stylesheets
:
StylesheetSet
:
:
new
(
)
new_animations_sender
:
new_anims_sender
new_animations_receiver
:
new_anims_receiver
running_animations
:
Arc
:
:
new
(
RwLock
:
:
new
(
HashMap
:
:
new
(
)
)
)
expired_animations
:
Arc
:
:
new
(
RwLock
:
:
new
(
HashMap
:
:
new
(
)
)
)
font_faces
:
vec
!
[
]
}
)
)
}
pub
fn
borrow
(
&
self
)
-
>
AtomicRef
<
PerDocumentStyleDataImpl
>
{
self
.
0
.
borrow
(
)
}
pub
fn
borrow_mut
(
&
self
)
-
>
AtomicRefMut
<
PerDocumentStyleDataImpl
>
{
self
.
0
.
borrow_mut
(
)
}
}
impl
PerDocumentStyleDataImpl
{
pub
fn
reset_device
(
&
mut
self
guard
:
&
SharedRwLockReadGuard
)
{
{
let
mut
stylist
=
Arc
:
:
get_mut
(
&
mut
self
.
stylist
)
.
unwrap
(
)
;
Arc
:
:
get_mut
(
&
mut
stylist
.
device
)
.
unwrap
(
)
.
reset
(
)
;
}
self
.
stylesheets
.
force_dirty
(
)
;
self
.
flush_stylesheets
(
guard
)
;
}
pub
fn
flush_stylesheets
(
&
mut
self
guard
:
&
SharedRwLockReadGuard
)
{
if
!
self
.
stylesheets
.
has_changed
(
)
{
return
;
}
let
mut
stylist
=
Arc
:
:
get_mut
(
&
mut
self
.
stylist
)
.
unwrap
(
)
;
let
mut
extra_data
=
ExtraStyleData
{
font_faces
:
&
mut
self
.
font_faces
}
;
let
author_style_disabled
=
self
.
stylesheets
.
author_style_disabled
(
)
;
let
mut
stylesheets
=
Vec
:
:
<
Arc
<
Stylesheet
>
>
:
:
new
(
)
;
self
.
stylesheets
.
flush
(
&
mut
stylesheets
)
;
stylist
.
update
(
stylesheets
.
as_slice
(
)
&
StylesheetGuards
:
:
same
(
guard
)
None
true
author_style_disabled
&
mut
extra_data
)
;
}
pub
fn
default_computed_values
(
&
self
)
-
>
&
Arc
<
ComputedValues
>
{
self
.
stylist
.
device
.
default_computed_values_arc
(
)
}
}
unsafe
impl
HasFFI
for
PerDocumentStyleData
{
type
FFIType
=
RawServoStyleSet
;
}
unsafe
impl
HasSimpleFFI
for
PerDocumentStyleData
{
}
unsafe
impl
HasBoxFFI
for
PerDocumentStyleData
{
}
