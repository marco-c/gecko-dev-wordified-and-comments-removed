use
crate
:
:
context
:
:
{
SharedStyleContext
StyleContext
}
;
use
crate
:
:
dom
:
:
{
TElement
TNode
}
;
use
crate
:
:
gecko
:
:
wrapper
:
:
{
GeckoElement
GeckoNode
}
;
use
crate
:
:
traversal
:
:
{
recalc_style_at
DomTraversal
PerLevelTraversalData
}
;
pub
struct
RecalcStyleOnly
<
'
a
>
{
shared
:
SharedStyleContext
<
'
a
>
}
impl
<
'
a
>
RecalcStyleOnly
<
'
a
>
{
pub
fn
new
(
shared
:
SharedStyleContext
<
'
a
>
)
-
>
Self
{
RecalcStyleOnly
{
shared
:
shared
}
}
}
impl
<
'
recalc
'
le
>
DomTraversal
<
GeckoElement
<
'
le
>
>
for
RecalcStyleOnly
<
'
recalc
>
{
fn
process_preorder
<
F
>
(
&
self
traversal_data
:
&
PerLevelTraversalData
context
:
&
mut
StyleContext
<
GeckoElement
<
'
le
>
>
node
:
GeckoNode
<
'
le
>
note_child
:
F
)
where
F
:
FnMut
(
GeckoNode
<
'
le
>
)
{
if
let
Some
(
el
)
=
node
.
as_element
(
)
{
let
mut
data
=
unsafe
{
el
.
ensure_data
(
)
}
;
recalc_style_at
(
self
traversal_data
context
el
&
mut
data
note_child
)
;
}
}
fn
process_postorder
(
&
self
_
:
&
mut
StyleContext
<
GeckoElement
<
'
le
>
>
_
:
GeckoNode
<
'
le
>
)
{
unreachable
!
(
)
;
}
fn
needs_postorder_traversal
(
)
-
>
bool
{
false
}
fn
shared_context
(
&
self
)
-
>
&
SharedStyleContext
{
&
self
.
shared
}
}
