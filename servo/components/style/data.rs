use
properties
:
:
ComputedValues
;
use
selector_impl
:
:
PseudoElement
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
hash
:
:
BuildHasherDefault
;
use
std
:
:
mem
;
use
std
:
:
ops
:
:
{
Deref
DerefMut
}
;
use
std
:
:
sync
:
:
Arc
;
type
PseudoStylesInner
=
HashMap
<
PseudoElement
Arc
<
ComputedValues
>
BuildHasherDefault
<
:
:
fnv
:
:
FnvHasher
>
>
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
PseudoStyles
(
PseudoStylesInner
)
;
impl
PseudoStyles
{
pub
fn
empty
(
)
-
>
Self
{
PseudoStyles
(
HashMap
:
:
with_hasher
(
Default
:
:
default
(
)
)
)
}
}
impl
Deref
for
PseudoStyles
{
type
Target
=
PseudoStylesInner
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
self
.
0
}
}
impl
DerefMut
for
PseudoStyles
{
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
Self
:
:
Target
{
&
mut
self
.
0
}
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
NodeStyles
{
pub
primary
:
Arc
<
ComputedValues
>
pub
pseudos
:
PseudoStyles
}
impl
NodeStyles
{
pub
fn
new
(
primary
:
Arc
<
ComputedValues
>
)
-
>
Self
{
NodeStyles
{
primary
:
primary
pseudos
:
PseudoStyles
:
:
empty
(
)
}
}
}
#
[
derive
(
Debug
)
]
enum
NodeDataStyles
{
Uninitialized
Previous
(
Option
<
NodeStyles
>
)
Current
(
NodeStyles
)
}
impl
NodeDataStyles
{
fn
is_previous
(
&
self
)
-
>
bool
{
use
self
:
:
NodeDataStyles
:
:
*
;
match
*
self
{
Previous
(
_
)
=
>
true
_
=
>
false
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
RestyleData
{
pub
_dummy
:
u64
}
impl
RestyleData
{
fn
new
(
)
-
>
Self
{
RestyleData
{
_dummy
:
42
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
NodeData
{
styles
:
NodeDataStyles
pub
restyle
:
Option
<
RestyleData
>
}
impl
NodeData
{
pub
fn
new
(
)
-
>
Self
{
NodeData
{
styles
:
NodeDataStyles
:
:
Uninitialized
restyle
:
None
}
}
pub
fn
has_current_styles
(
&
self
)
-
>
bool
{
match
self
.
styles
{
NodeDataStyles
:
:
Current
(
_
)
=
>
true
_
=
>
false
}
}
pub
fn
get_current_styles
(
&
self
)
-
>
Option
<
&
NodeStyles
>
{
match
self
.
styles
{
NodeDataStyles
:
:
Current
(
ref
s
)
=
>
Some
(
s
)
_
=
>
None
}
}
pub
fn
current_styles
(
&
self
)
-
>
&
NodeStyles
{
self
.
get_current_styles
(
)
.
expect
(
"
Calling
current_styles
before
or
during
styling
"
)
}
#
[
cfg
(
not
(
feature
=
"
gecko
"
)
)
]
pub
fn
current_pseudos_mut
(
&
mut
self
)
-
>
&
mut
PseudoStyles
{
match
self
.
styles
{
NodeDataStyles
:
:
Current
(
ref
mut
s
)
=
>
&
mut
s
.
pseudos
_
=
>
panic
!
(
"
Calling
current_pseudos_mut
before
or
during
styling
"
)
}
}
pub
fn
previous_styles
(
&
self
)
-
>
Option
<
&
NodeStyles
>
{
match
self
.
styles
{
NodeDataStyles
:
:
Previous
(
ref
s
)
=
>
s
.
as_ref
(
)
_
=
>
panic
!
(
"
Calling
previous_styles
without
having
gathered
it
"
)
}
}
pub
fn
previous_styles_mut
(
&
mut
self
)
-
>
Option
<
&
mut
NodeStyles
>
{
match
self
.
styles
{
NodeDataStyles
:
:
Previous
(
ref
mut
s
)
=
>
s
.
as_mut
(
)
_
=
>
panic
!
(
"
Calling
previous_styles
without
having
gathered
it
"
)
}
}
pub
fn
gather_previous_styles
<
F
>
(
&
mut
self
f
:
F
)
where
F
:
FnOnce
(
)
-
>
Option
<
NodeStyles
>
{
use
self
:
:
NodeDataStyles
:
:
*
;
self
.
styles
=
match
mem
:
:
replace
(
&
mut
self
.
styles
Uninitialized
)
{
Uninitialized
=
>
Previous
(
f
(
)
)
Current
(
x
)
=
>
Previous
(
Some
(
x
)
)
_
=
>
panic
!
(
"
Already
have
previous
styles
"
)
}
;
}
pub
fn
ensure_restyle_data
(
&
mut
self
)
{
if
self
.
restyle
.
is_none
(
)
{
self
.
restyle
=
Some
(
RestyleData
:
:
new
(
)
)
;
}
}
pub
fn
style_text_node
(
&
mut
self
style
:
Arc
<
ComputedValues
>
)
{
debug_assert
!
(
self
.
restyle
.
is_none
(
)
)
;
self
.
styles
=
NodeDataStyles
:
:
Current
(
NodeStyles
:
:
new
(
style
)
)
;
}
pub
fn
finish_styling
(
&
mut
self
styles
:
NodeStyles
)
{
debug_assert
!
(
self
.
styles
.
is_previous
(
)
)
;
self
.
styles
=
NodeDataStyles
:
:
Current
(
styles
)
;
self
.
restyle
=
None
;
}
}
