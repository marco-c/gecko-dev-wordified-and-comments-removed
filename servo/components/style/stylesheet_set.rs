use
dom
:
:
TElement
;
use
invalidation
:
:
stylesheets
:
:
StylesheetInvalidationSet
;
use
media_queries
:
:
Device
;
use
shared_lock
:
:
SharedRwLockReadGuard
;
use
std
:
:
slice
;
use
stylesheets
:
:
{
OriginSet
PerOrigin
StylesheetInDocument
}
;
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
struct
StylesheetSetEntry
<
S
>
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
sheet
:
S
}
#
[
derive
(
Clone
)
]
pub
struct
StylesheetIterator
<
'
a
S
>
(
slice
:
:
Iter
<
'
a
StylesheetSetEntry
<
S
>
>
)
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
;
impl
<
'
a
S
>
Iterator
for
StylesheetIterator
<
'
a
S
>
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
type
Item
=
&
'
a
S
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
0
.
next
(
)
.
map
(
|
entry
|
&
entry
.
sheet
)
}
}
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
struct
StylesheetSet
<
S
>
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
entries
:
Vec
<
StylesheetSetEntry
<
S
>
>
invalidation_data
:
PerOrigin
<
InvalidationData
>
author_style_disabled
:
bool
}
impl
<
S
>
StylesheetSet
<
S
>
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
pub
fn
new
(
)
-
>
Self
{
StylesheetSet
{
entries
:
vec
!
[
]
invalidation_data
:
Default
:
:
default
(
)
author_style_disabled
:
false
}
}
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
entries
.
len
(
)
}
pub
fn
get
(
&
self
index
:
usize
)
-
>
Option
<
&
S
>
{
self
.
entries
.
get
(
index
)
.
map
(
|
s
|
&
s
.
sheet
)
}
pub
fn
author_style_disabled
(
&
self
)
-
>
bool
{
self
.
author_style_disabled
}
fn
remove_stylesheet_if_present
(
&
mut
self
sheet
:
&
S
)
{
self
.
entries
.
retain
(
|
entry
|
entry
.
sheet
!
=
*
sheet
)
;
}
fn
collect_invalidations_for
(
&
mut
self
device
:
Option
<
&
Device
>
sheet
:
&
S
guard
:
&
SharedRwLockReadGuard
)
{
let
origin
=
sheet
.
contents
(
guard
)
.
origin
;
let
data
=
self
.
invalidation_data
.
borrow_mut_for_origin
(
&
origin
)
;
if
let
Some
(
device
)
=
device
{
data
.
invalidations
.
collect_invalidations_for
(
device
sheet
guard
)
;
}
data
.
dirty
=
true
;
}
pub
fn
append_stylesheet
(
&
mut
self
device
:
Option
<
&
Device
>
sheet
:
S
guard
:
&
SharedRwLockReadGuard
)
{
debug
!
(
"
StylesheetSet
:
:
append_stylesheet
"
)
;
self
.
remove_stylesheet_if_present
(
&
sheet
)
;
self
.
collect_invalidations_for
(
device
&
sheet
guard
)
;
self
.
entries
.
push
(
StylesheetSetEntry
{
sheet
}
)
;
}
pub
fn
prepend_stylesheet
(
&
mut
self
device
:
Option
<
&
Device
>
sheet
:
S
guard
:
&
SharedRwLockReadGuard
)
{
debug
!
(
"
StylesheetSet
:
:
prepend_stylesheet
"
)
;
self
.
remove_stylesheet_if_present
(
&
sheet
)
;
self
.
collect_invalidations_for
(
device
&
sheet
guard
)
;
self
.
entries
.
insert
(
0
StylesheetSetEntry
{
sheet
}
)
;
}
pub
fn
insert_stylesheet_before
(
&
mut
self
device
:
Option
<
&
Device
>
sheet
:
S
before_sheet
:
S
guard
:
&
SharedRwLockReadGuard
)
{
debug
!
(
"
StylesheetSet
:
:
insert_stylesheet_before
"
)
;
self
.
remove_stylesheet_if_present
(
&
sheet
)
;
let
index
=
self
.
entries
.
iter
(
)
.
position
(
|
entry
|
{
entry
.
sheet
=
=
before_sheet
}
)
.
expect
(
"
before_sheet
stylesheet
not
found
"
)
;
self
.
collect_invalidations_for
(
device
&
sheet
guard
)
;
self
.
entries
.
insert
(
index
StylesheetSetEntry
{
sheet
}
)
;
}
pub
fn
remove_stylesheet
(
&
mut
self
device
:
Option
<
&
Device
>
sheet
:
S
guard
:
&
SharedRwLockReadGuard
)
{
debug
!
(
"
StylesheetSet
:
:
remove_stylesheet
"
)
;
self
.
remove_stylesheet_if_present
(
&
sheet
)
;
self
.
collect_invalidations_for
(
device
&
sheet
guard
)
;
}
pub
fn
set_author_style_disabled
(
&
mut
self
disabled
:
bool
)
{
debug
!
(
"
StylesheetSet
:
:
set_author_style_disabled
"
)
;
if
self
.
author_style_disabled
=
=
disabled
{
return
;
}
self
.
author_style_disabled
=
disabled
;
self
.
invalidation_data
.
author
.
invalidations
.
invalidate_fully
(
)
;
self
.
invalidation_data
.
author
.
dirty
=
true
;
}
pub
fn
has_changed
(
&
self
)
-
>
bool
{
self
.
invalidation_data
.
iter_origins
(
)
.
any
(
|
(
d
_
)
|
d
.
dirty
)
}
pub
fn
flush
<
E
>
(
&
mut
self
document_element
:
Option
<
E
>
)
-
>
(
StylesheetIterator
<
S
>
OriginSet
)
where
E
:
TElement
{
debug
!
(
"
StylesheetSet
:
:
flush
"
)
;
let
mut
origins
=
OriginSet
:
:
empty
(
)
;
for
(
data
origin
)
in
self
.
invalidation_data
.
iter_mut_origins
(
)
{
if
data
.
dirty
{
data
.
invalidations
.
flush
(
document_element
)
;
data
.
dirty
=
false
;
origins
|
=
origin
;
}
}
(
self
.
iter
(
)
origins
)
}
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
fn
flush_without_invalidation
(
&
mut
self
)
-
>
(
StylesheetIterator
<
S
>
OriginSet
)
{
debug
!
(
"
StylesheetSet
:
:
flush_without_invalidation
"
)
;
let
mut
origins
=
OriginSet
:
:
empty
(
)
;
for
(
data
origin
)
in
self
.
invalidation_data
.
iter_mut_origins
(
)
{
if
data
.
dirty
{
data
.
invalidations
.
clear
(
)
;
data
.
dirty
=
false
;
origins
|
=
origin
;
}
}
(
self
.
iter
(
)
origins
)
}
pub
fn
iter
(
&
self
)
-
>
StylesheetIterator
<
S
>
{
StylesheetIterator
(
self
.
entries
.
iter
(
)
)
}
pub
fn
force_dirty
(
&
mut
self
origins
:
OriginSet
)
{
for
origin
in
origins
.
iter
(
)
{
let
data
=
self
.
invalidation_data
.
borrow_mut_for_origin
(
&
origin
)
;
data
.
invalidations
.
invalidate_fully
(
)
;
data
.
dirty
=
true
;
}
}
}
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
struct
InvalidationData
{
invalidations
:
StylesheetInvalidationSet
dirty
:
bool
}
impl
Default
for
InvalidationData
{
fn
default
(
)
-
>
Self
{
InvalidationData
{
invalidations
:
StylesheetInvalidationSet
:
:
new
(
)
dirty
:
false
}
}
}
