use
dom
:
:
TElement
;
use
invalidation
:
:
stylesheets
:
:
StylesheetInvalidationSet
;
use
shared_lock
:
:
SharedRwLockReadGuard
;
use
std
:
:
slice
;
use
stylesheets
:
:
StylesheetInDocument
;
use
stylist
:
:
Stylist
;
pub
struct
StylesheetSetEntry
<
S
>
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
sheet
:
S
}
#
[
derive
(
Clone
)
]
pub
struct
StylesheetIterator
<
'
a
S
>
(
slice
:
:
Iter
<
'
a
StylesheetSetEntry
<
S
>
>
)
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
;
impl
<
'
a
S
>
Iterator
for
StylesheetIterator
<
'
a
S
>
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
type
Item
=
&
'
a
S
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
0
.
next
(
)
.
map
(
|
entry
|
&
entry
.
sheet
)
}
}
pub
struct
StylesheetSet
<
S
>
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
entries
:
Vec
<
StylesheetSetEntry
<
S
>
>
dirty
:
bool
author_style_disabled
:
bool
invalidations
:
StylesheetInvalidationSet
}
impl
<
S
>
StylesheetSet
<
S
>
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
pub
fn
new
(
)
-
>
Self
{
StylesheetSet
{
entries
:
vec
!
[
]
dirty
:
false
author_style_disabled
:
false
invalidations
:
StylesheetInvalidationSet
:
:
new
(
)
}
}
pub
fn
author_style_disabled
(
&
self
)
-
>
bool
{
self
.
author_style_disabled
}
fn
remove_stylesheet_if_present
(
&
mut
self
sheet
:
&
S
)
{
self
.
entries
.
retain
(
|
entry
|
entry
.
sheet
!
=
*
sheet
)
;
}
pub
fn
append_stylesheet
(
&
mut
self
stylist
:
&
Stylist
sheet
:
S
guard
:
&
SharedRwLockReadGuard
)
{
debug
!
(
"
StylesheetSet
:
:
append_stylesheet
"
)
;
self
.
remove_stylesheet_if_present
(
&
sheet
)
;
self
.
invalidations
.
collect_invalidations_for
(
stylist
&
sheet
guard
)
;
self
.
dirty
=
true
;
self
.
entries
.
push
(
StylesheetSetEntry
{
sheet
}
)
;
}
pub
fn
prepend_stylesheet
(
&
mut
self
stylist
:
&
Stylist
sheet
:
S
guard
:
&
SharedRwLockReadGuard
)
{
debug
!
(
"
StylesheetSet
:
:
prepend_stylesheet
"
)
;
self
.
remove_stylesheet_if_present
(
&
sheet
)
;
self
.
invalidations
.
collect_invalidations_for
(
stylist
&
sheet
guard
)
;
self
.
entries
.
insert
(
0
StylesheetSetEntry
{
sheet
}
)
;
self
.
dirty
=
true
;
}
pub
fn
insert_stylesheet_before
(
&
mut
self
stylist
:
&
Stylist
sheet
:
S
before_sheet
:
S
guard
:
&
SharedRwLockReadGuard
)
{
debug
!
(
"
StylesheetSet
:
:
insert_stylesheet_before
"
)
;
self
.
remove_stylesheet_if_present
(
&
sheet
)
;
let
index
=
self
.
entries
.
iter
(
)
.
position
(
|
entry
|
{
entry
.
sheet
=
=
before_sheet
}
)
.
expect
(
"
before_sheet
stylesheet
not
found
"
)
;
self
.
invalidations
.
collect_invalidations_for
(
stylist
&
sheet
guard
)
;
self
.
entries
.
insert
(
index
StylesheetSetEntry
{
sheet
}
)
;
self
.
dirty
=
true
;
}
pub
fn
remove_stylesheet
(
&
mut
self
sheet
:
S
)
{
debug
!
(
"
StylesheetSet
:
:
remove_stylesheet
"
)
;
self
.
remove_stylesheet_if_present
(
&
sheet
)
;
self
.
dirty
=
true
;
self
.
invalidations
.
invalidate_fully
(
)
;
}
pub
fn
set_author_style_disabled
(
&
mut
self
disabled
:
bool
)
{
debug
!
(
"
StylesheetSet
:
:
set_author_style_disabled
"
)
;
if
self
.
author_style_disabled
=
=
disabled
{
return
;
}
self
.
author_style_disabled
=
disabled
;
self
.
dirty
=
true
;
self
.
invalidations
.
invalidate_fully
(
)
;
}
pub
fn
has_changed
(
&
self
)
-
>
bool
{
self
.
dirty
}
pub
fn
flush
<
E
>
(
&
mut
self
document_element
:
Option
<
E
>
)
-
>
StylesheetIterator
<
S
>
where
E
:
TElement
{
debug
!
(
"
StylesheetSet
:
:
flush
"
)
;
debug_assert
!
(
self
.
dirty
)
;
self
.
dirty
=
false
;
self
.
invalidations
.
flush
(
document_element
)
;
self
.
iter
(
)
}
pub
fn
iter
(
&
self
)
-
>
StylesheetIterator
<
S
>
{
StylesheetIterator
(
self
.
entries
.
iter
(
)
)
}
pub
fn
force_dirty
(
&
mut
self
)
{
self
.
dirty
=
true
;
self
.
invalidations
.
invalidate_fully
(
)
;
}
}
