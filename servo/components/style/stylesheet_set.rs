use
arc_ptr_eq
;
use
std
:
:
sync
:
:
Arc
;
use
stylesheets
:
:
Stylesheet
;
pub
struct
StylesheetSet
{
stylesheets
:
Vec
<
Arc
<
Stylesheet
>
>
dirty
:
bool
author_style_disabled
:
bool
}
impl
StylesheetSet
{
pub
fn
new
(
)
-
>
Self
{
StylesheetSet
{
stylesheets
:
vec
!
[
]
dirty
:
false
author_style_disabled
:
false
}
}
pub
fn
author_style_disabled
(
&
self
)
-
>
bool
{
self
.
author_style_disabled
}
fn
remove_stylesheet_if_present
(
&
mut
self
sheet
:
&
Arc
<
Stylesheet
>
)
{
self
.
stylesheets
.
retain
(
|
x
|
!
arc_ptr_eq
(
x
sheet
)
)
;
}
pub
fn
append_stylesheet
(
&
mut
self
sheet
:
&
Arc
<
Stylesheet
>
)
{
self
.
remove_stylesheet_if_present
(
sheet
)
;
self
.
stylesheets
.
push
(
sheet
.
clone
(
)
)
;
self
.
dirty
=
true
;
}
pub
fn
prepend_stylesheet
(
&
mut
self
sheet
:
&
Arc
<
Stylesheet
>
)
{
self
.
remove_stylesheet_if_present
(
sheet
)
;
self
.
stylesheets
.
insert
(
0
sheet
.
clone
(
)
)
;
self
.
dirty
=
true
;
}
pub
fn
insert_stylesheet_before
(
&
mut
self
sheet
:
&
Arc
<
Stylesheet
>
before
:
&
Arc
<
Stylesheet
>
)
{
self
.
remove_stylesheet_if_present
(
sheet
)
;
let
index
=
self
.
stylesheets
.
iter
(
)
.
position
(
|
x
|
{
arc_ptr_eq
(
x
before
)
}
)
.
expect
(
"
before
stylesheet
not
found
"
)
;
self
.
stylesheets
.
insert
(
index
sheet
.
clone
(
)
)
;
self
.
dirty
=
true
;
}
pub
fn
remove_stylesheet
(
&
mut
self
sheet
:
&
Arc
<
Stylesheet
>
)
{
self
.
remove_stylesheet_if_present
(
sheet
)
;
self
.
dirty
=
true
;
}
pub
fn
set_author_style_disabled
(
&
mut
self
disabled
:
bool
)
{
if
self
.
author_style_disabled
=
=
disabled
{
return
;
}
self
.
author_style_disabled
=
disabled
;
self
.
dirty
=
true
;
}
pub
fn
has_changed
(
&
self
)
-
>
bool
{
self
.
dirty
}
pub
fn
flush
(
&
mut
self
)
-
>
&
[
Arc
<
Stylesheet
>
]
{
self
.
dirty
=
false
;
&
self
.
stylesheets
}
pub
fn
force_dirty
(
&
mut
self
)
{
self
.
dirty
=
true
;
}
}
