use
std
:
:
slice
;
use
stylearc
:
:
Arc
;
use
stylesheets
:
:
Stylesheet
;
pub
struct
StylesheetSetEntry
{
unique_id
:
u32
sheet
:
Arc
<
Stylesheet
>
}
#
[
derive
(
Clone
)
]
pub
struct
StylesheetIterator
<
'
a
>
(
slice
:
:
Iter
<
'
a
StylesheetSetEntry
>
)
;
impl
<
'
a
>
Iterator
for
StylesheetIterator
<
'
a
>
{
type
Item
=
&
'
a
Arc
<
Stylesheet
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
0
.
next
(
)
.
map
(
|
entry
|
&
entry
.
sheet
)
}
}
pub
struct
StylesheetSet
{
entries
:
Vec
<
StylesheetSetEntry
>
dirty
:
bool
author_style_disabled
:
bool
}
impl
StylesheetSet
{
pub
fn
new
(
)
-
>
Self
{
StylesheetSet
{
entries
:
vec
!
[
]
dirty
:
false
author_style_disabled
:
false
}
}
pub
fn
author_style_disabled
(
&
self
)
-
>
bool
{
self
.
author_style_disabled
}
fn
remove_stylesheet_if_present
(
&
mut
self
unique_id
:
u32
)
{
self
.
entries
.
retain
(
|
x
|
x
.
unique_id
!
=
unique_id
)
;
}
pub
fn
append_stylesheet
(
&
mut
self
sheet
:
&
Arc
<
Stylesheet
>
unique_id
:
u32
)
{
self
.
remove_stylesheet_if_present
(
unique_id
)
;
self
.
entries
.
push
(
StylesheetSetEntry
{
unique_id
:
unique_id
sheet
:
sheet
.
clone
(
)
}
)
;
self
.
dirty
=
true
;
}
pub
fn
prepend_stylesheet
(
&
mut
self
sheet
:
&
Arc
<
Stylesheet
>
unique_id
:
u32
)
{
self
.
remove_stylesheet_if_present
(
unique_id
)
;
self
.
entries
.
insert
(
0
StylesheetSetEntry
{
unique_id
:
unique_id
sheet
:
sheet
.
clone
(
)
}
)
;
self
.
dirty
=
true
;
}
pub
fn
insert_stylesheet_before
(
&
mut
self
sheet
:
&
Arc
<
Stylesheet
>
unique_id
:
u32
before_unique_id
:
u32
)
{
self
.
remove_stylesheet_if_present
(
unique_id
)
;
let
index
=
self
.
entries
.
iter
(
)
.
position
(
|
x
|
{
x
.
unique_id
=
=
before_unique_id
}
)
.
expect
(
"
before_unique_id
stylesheet
not
found
"
)
;
self
.
entries
.
insert
(
index
StylesheetSetEntry
{
unique_id
:
unique_id
sheet
:
sheet
.
clone
(
)
}
)
;
self
.
dirty
=
true
;
}
pub
fn
remove_stylesheet
(
&
mut
self
unique_id
:
u32
)
{
self
.
remove_stylesheet_if_present
(
unique_id
)
;
self
.
dirty
=
true
;
}
pub
fn
set_author_style_disabled
(
&
mut
self
disabled
:
bool
)
{
if
self
.
author_style_disabled
=
=
disabled
{
return
;
}
self
.
author_style_disabled
=
disabled
;
self
.
dirty
=
true
;
}
pub
fn
has_changed
(
&
self
)
-
>
bool
{
self
.
dirty
}
pub
fn
flush
(
&
mut
self
)
-
>
StylesheetIterator
{
self
.
dirty
=
false
;
StylesheetIterator
(
self
.
entries
.
iter
(
)
)
}
pub
fn
force_dirty
(
&
mut
self
)
{
self
.
dirty
=
true
;
}
}
