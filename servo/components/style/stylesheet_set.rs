use
dom
:
:
TElement
;
use
invalidation
:
:
stylesheets
:
:
StylesheetInvalidationSet
;
use
media_queries
:
:
Device
;
use
shared_lock
:
:
SharedRwLockReadGuard
;
use
std
:
:
slice
;
use
stylesheets
:
:
{
Origin
OriginSet
PerOrigin
StylesheetInDocument
}
;
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
struct
StylesheetSetEntry
<
S
>
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
sheet
:
S
dirty
:
bool
}
impl
<
S
>
StylesheetSetEntry
<
S
>
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
fn
new
(
sheet
:
S
)
-
>
Self
{
Self
{
sheet
dirty
:
true
}
}
}
#
[
derive
(
Clone
)
]
pub
struct
StylesheetIterator
<
'
a
S
>
(
slice
:
:
Iter
<
'
a
StylesheetSetEntry
<
S
>
>
)
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
;
impl
<
'
a
S
>
Iterator
for
StylesheetIterator
<
'
a
S
>
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
type
Item
=
&
'
a
S
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
0
.
next
(
)
.
map
(
|
entry
|
&
entry
.
sheet
)
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
Ord
PartialEq
PartialOrd
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
enum
OriginValidity
{
Valid
=
0
CascadeInvalid
=
1
FullyInvalid
=
2
}
impl
Default
for
OriginValidity
{
fn
default
(
)
-
>
Self
{
OriginValidity
:
:
Valid
}
}
pub
struct
StylesheetFlusher
<
'
a
'
b
S
>
where
'
b
:
'
a
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
iter
:
slice
:
:
IterMut
<
'
a
StylesheetSetEntry
<
S
>
>
guard
:
&
'
a
SharedRwLockReadGuard
<
'
b
>
origins_dirty
:
OriginSet
origin_data_validity
:
PerOrigin
<
OriginValidity
>
author_style_disabled
:
bool
had_invalidations
:
bool
}
pub
enum
SheetRebuildKind
{
Full
CascadeOnly
}
impl
SheetRebuildKind
{
pub
fn
should_rebuild_invalidation
(
&
self
)
-
>
bool
{
matches
!
(
*
self
SheetRebuildKind
:
:
Full
)
}
}
impl
<
'
a
'
b
S
>
StylesheetFlusher
<
'
a
'
b
S
>
where
'
b
:
'
a
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
pub
fn
origin_validity
(
&
self
origin
:
Origin
)
-
>
OriginValidity
{
*
self
.
origin_data_validity
.
borrow_for_origin
(
&
origin
)
}
pub
fn
nothing_to_do
(
&
self
)
-
>
bool
{
self
.
origins_dirty
.
is_empty
(
)
}
pub
fn
had_invalidations
(
&
self
)
-
>
bool
{
self
.
had_invalidations
}
}
#
[
cfg
(
debug_assertions
)
]
impl
<
'
a
'
b
S
>
Drop
for
StylesheetFlusher
<
'
a
'
b
S
>
where
'
b
:
'
a
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
fn
drop
(
&
mut
self
)
{
debug_assert
!
(
self
.
iter
.
next
(
)
.
is_none
(
)
"
You
'
re
supposed
to
fully
consume
the
flusher
"
)
;
}
}
impl
<
'
a
'
b
S
>
Iterator
for
StylesheetFlusher
<
'
a
'
b
S
>
where
'
b
:
'
a
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
type
Item
=
(
&
'
a
S
SheetRebuildKind
)
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
use
std
:
:
mem
;
loop
{
let
potential_sheet
=
match
self
.
iter
.
next
(
)
{
None
=
>
return
None
Some
(
s
)
=
>
s
}
;
let
dirty
=
mem
:
:
replace
(
&
mut
potential_sheet
.
dirty
false
)
;
if
dirty
{
return
Some
(
(
&
potential_sheet
.
sheet
SheetRebuildKind
:
:
Full
)
)
}
let
origin
=
potential_sheet
.
sheet
.
contents
(
self
.
guard
)
.
origin
;
if
!
self
.
origins_dirty
.
contains
(
origin
.
into
(
)
)
{
continue
;
}
if
self
.
author_style_disabled
&
&
matches
!
(
origin
Origin
:
:
Author
)
{
continue
;
}
let
rebuild_kind
=
match
self
.
origin_validity
(
origin
)
{
OriginValidity
:
:
Valid
=
>
continue
OriginValidity
:
:
CascadeInvalid
=
>
SheetRebuildKind
:
:
CascadeOnly
OriginValidity
:
:
FullyInvalid
=
>
SheetRebuildKind
:
:
Full
}
;
return
Some
(
(
&
potential_sheet
.
sheet
rebuild_kind
)
)
;
}
}
}
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
struct
StylesheetSet
<
S
>
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
entries
:
Vec
<
StylesheetSetEntry
<
S
>
>
invalidations
:
StylesheetInvalidationSet
origins_dirty
:
OriginSet
origin_data_validity
:
PerOrigin
<
OriginValidity
>
author_style_disabled
:
bool
}
impl
<
S
>
StylesheetSet
<
S
>
where
S
:
StylesheetInDocument
+
PartialEq
+
'
static
{
pub
fn
new
(
)
-
>
Self
{
StylesheetSet
{
entries
:
vec
!
[
]
invalidations
:
StylesheetInvalidationSet
:
:
new
(
)
origins_dirty
:
OriginSet
:
:
empty
(
)
origin_data_validity
:
Default
:
:
default
(
)
author_style_disabled
:
false
}
}
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
entries
.
len
(
)
}
pub
fn
get
(
&
self
index
:
usize
)
-
>
Option
<
&
S
>
{
self
.
entries
.
get
(
index
)
.
map
(
|
s
|
&
s
.
sheet
)
}
pub
fn
author_style_disabled
(
&
self
)
-
>
bool
{
self
.
author_style_disabled
}
fn
remove_stylesheet_if_present
(
&
mut
self
sheet
:
&
S
)
{
self
.
entries
.
retain
(
|
entry
|
entry
.
sheet
!
=
*
sheet
)
;
}
fn
collect_invalidations_for
(
&
mut
self
device
:
Option
<
&
Device
>
sheet
:
&
S
guard
:
&
SharedRwLockReadGuard
)
{
if
let
Some
(
device
)
=
device
{
self
.
invalidations
.
collect_invalidations_for
(
device
sheet
guard
)
;
}
self
.
origins_dirty
|
=
sheet
.
contents
(
guard
)
.
origin
;
}
fn
set_data_validity_at_least
(
&
mut
self
origin
:
Origin
validity
:
OriginValidity
)
{
use
std
:
:
cmp
;
debug_assert
!
(
self
.
origins_dirty
.
contains
(
origin
.
into
(
)
)
"
data_validity
should
be
a
subset
of
origins_dirty
"
)
;
let
existing_validity
=
self
.
origin_data_validity
.
borrow_mut_for_origin
(
&
origin
)
;
*
existing_validity
=
cmp
:
:
max
(
*
existing_validity
validity
)
;
}
pub
fn
append_stylesheet
(
&
mut
self
device
:
Option
<
&
Device
>
sheet
:
S
guard
:
&
SharedRwLockReadGuard
)
{
debug
!
(
"
StylesheetSet
:
:
append_stylesheet
"
)
;
self
.
remove_stylesheet_if_present
(
&
sheet
)
;
self
.
collect_invalidations_for
(
device
&
sheet
guard
)
;
self
.
entries
.
push
(
StylesheetSetEntry
:
:
new
(
sheet
)
)
;
}
pub
fn
prepend_stylesheet
(
&
mut
self
device
:
Option
<
&
Device
>
sheet
:
S
guard
:
&
SharedRwLockReadGuard
)
{
debug
!
(
"
StylesheetSet
:
:
prepend_stylesheet
"
)
;
self
.
remove_stylesheet_if_present
(
&
sheet
)
;
self
.
collect_invalidations_for
(
device
&
sheet
guard
)
;
self
.
set_data_validity_at_least
(
sheet
.
contents
(
guard
)
.
origin
OriginValidity
:
:
CascadeInvalid
)
;
self
.
entries
.
insert
(
0
StylesheetSetEntry
:
:
new
(
sheet
)
)
;
}
pub
fn
insert_stylesheet_before
(
&
mut
self
device
:
Option
<
&
Device
>
sheet
:
S
before_sheet
:
S
guard
:
&
SharedRwLockReadGuard
)
{
debug
!
(
"
StylesheetSet
:
:
insert_stylesheet_before
"
)
;
self
.
remove_stylesheet_if_present
(
&
sheet
)
;
let
index
=
self
.
entries
.
iter
(
)
.
position
(
|
entry
|
{
entry
.
sheet
=
=
before_sheet
}
)
.
expect
(
"
before_sheet
stylesheet
not
found
"
)
;
self
.
collect_invalidations_for
(
device
&
sheet
guard
)
;
self
.
set_data_validity_at_least
(
sheet
.
contents
(
guard
)
.
origin
OriginValidity
:
:
CascadeInvalid
)
;
self
.
entries
.
insert
(
index
StylesheetSetEntry
:
:
new
(
sheet
)
)
;
}
pub
fn
remove_stylesheet
(
&
mut
self
device
:
Option
<
&
Device
>
sheet
:
S
guard
:
&
SharedRwLockReadGuard
)
{
debug
!
(
"
StylesheetSet
:
:
remove_stylesheet
"
)
;
self
.
remove_stylesheet_if_present
(
&
sheet
)
;
self
.
collect_invalidations_for
(
device
&
sheet
guard
)
;
self
.
set_data_validity_at_least
(
sheet
.
contents
(
guard
)
.
origin
OriginValidity
:
:
FullyInvalid
)
;
}
pub
fn
set_author_style_disabled
(
&
mut
self
disabled
:
bool
)
{
debug
!
(
"
StylesheetSet
:
:
set_author_style_disabled
"
)
;
if
self
.
author_style_disabled
=
=
disabled
{
return
;
}
self
.
author_style_disabled
=
disabled
;
self
.
invalidations
.
invalidate_fully
(
)
;
self
.
origins_dirty
|
=
Origin
:
:
Author
;
}
pub
fn
has_changed
(
&
self
)
-
>
bool
{
!
self
.
origins_dirty
.
is_empty
(
)
}
pub
fn
flush
<
'
a
'
b
E
>
(
&
'
a
mut
self
document_element
:
Option
<
E
>
guard
:
&
'
a
SharedRwLockReadGuard
<
'
b
>
)
-
>
StylesheetFlusher
<
'
a
'
b
S
>
where
E
:
TElement
{
use
std
:
:
mem
;
debug
!
(
"
StylesheetSet
:
:
flush
"
)
;
let
had_invalidations
=
self
.
invalidations
.
flush
(
document_element
)
;
let
origins_dirty
=
mem
:
:
replace
(
&
mut
self
.
origins_dirty
OriginSet
:
:
empty
(
)
)
;
let
origin_data_validity
=
mem
:
:
replace
(
&
mut
self
.
origin_data_validity
Default
:
:
default
(
)
)
;
StylesheetFlusher
{
iter
:
self
.
entries
.
iter_mut
(
)
author_style_disabled
:
self
.
author_style_disabled
had_invalidations
origins_dirty
origin_data_validity
guard
}
}
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
fn
flush_without_invalidation
(
&
mut
self
)
-
>
OriginSet
{
use
std
:
:
mem
;
debug
!
(
"
StylesheetSet
:
:
flush_without_invalidation
"
)
;
self
.
invalidations
.
clear
(
)
;
mem
:
:
replace
(
&
mut
self
.
origins_dirty
OriginSet
:
:
empty
(
)
)
}
pub
fn
iter
(
&
self
)
-
>
StylesheetIterator
<
S
>
{
StylesheetIterator
(
self
.
entries
.
iter
(
)
)
}
pub
fn
force_dirty
(
&
mut
self
origins
:
OriginSet
)
{
self
.
invalidations
.
invalidate_fully
(
)
;
self
.
origins_dirty
|
=
origins
;
for
origin
in
origins
.
iter
(
)
{
self
.
set_data_validity_at_least
(
origin
OriginValidity
:
:
FullyInvalid
)
;
}
}
}
