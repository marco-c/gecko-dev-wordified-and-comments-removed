#
!
[
deny
(
missing_docs
)
]
use
std
:
:
{
iter
slice
}
;
pub
struct
LRUCache
<
K
>
{
entries
:
Vec
<
K
>
cache_size
:
usize
}
pub
type
LRUCacheIterator
<
'
a
K
>
=
iter
:
:
Rev
<
slice
:
:
Iter
<
'
a
K
>
>
;
pub
type
LRUCacheMutIterator
<
'
a
K
>
=
iter
:
:
Rev
<
slice
:
:
IterMut
<
'
a
K
>
>
;
impl
<
K
:
PartialEq
>
LRUCache
<
K
>
{
pub
fn
new
(
size
:
usize
)
-
>
Self
{
LRUCache
{
entries
:
vec
!
[
]
cache_size
:
size
}
}
#
[
inline
]
pub
fn
touch
(
&
mut
self
pos
:
usize
)
{
let
last_index
=
self
.
entries
.
len
(
)
-
1
;
if
pos
!
=
last_index
{
let
entry
=
self
.
entries
.
remove
(
pos
)
;
self
.
entries
.
push
(
entry
)
;
}
}
pub
fn
iter
(
&
self
)
-
>
LRUCacheIterator
<
K
>
{
self
.
entries
.
iter
(
)
.
rev
(
)
}
pub
fn
iter_mut
(
&
mut
self
)
-
>
LRUCacheMutIterator
<
K
>
{
self
.
entries
.
iter_mut
(
)
.
rev
(
)
}
pub
fn
insert
(
&
mut
self
key
:
K
)
{
if
self
.
entries
.
len
(
)
=
=
self
.
cache_size
{
self
.
entries
.
remove
(
0
)
;
}
self
.
entries
.
push
(
key
)
;
}
pub
fn
evict_all
(
&
mut
self
)
{
self
.
entries
.
clear
(
)
;
}
}
