use
Atom
;
use
applicable_declarations
:
:
ApplicableDeclarationBlock
;
use
atomic_refcell
:
:
{
AtomicRefCell
AtomicRefMut
}
;
use
bloom
:
:
StyleBloom
;
use
context
:
:
{
SelectorFlagsMap
SharedStyleContext
StyleContext
}
;
use
dom
:
:
{
TElement
SendElement
}
;
use
matching
:
:
MatchMethods
;
use
owning_ref
:
:
OwningHandle
;
use
properties
:
:
ComputedValues
;
use
rule_tree
:
:
StrongRuleNode
;
use
selectors
:
:
NthIndexCache
;
use
selectors
:
:
matching
:
:
{
ElementSelectorFlags
VisitedHandlingMode
}
;
use
servo_arc
:
:
{
Arc
NonZeroPtrMut
}
;
use
smallbitvec
:
:
SmallBitVec
;
use
smallvec
:
:
SmallVec
;
use
std
:
:
marker
:
:
PhantomData
;
use
std
:
:
mem
;
use
std
:
:
ops
:
:
Deref
;
use
style_resolver
:
:
{
PrimaryStyle
ResolvedElementStyles
}
;
use
stylist
:
:
Stylist
;
use
uluru
:
:
{
LRUCache
Entry
}
;
mod
checks
;
pub
const
SHARING_CACHE_SIZE
:
usize
=
31
;
const
SHARING_CACHE_BACKING_STORE_SIZE
:
usize
=
SHARING_CACHE_SIZE
+
1
;
#
[
derive
(
Clone
Copy
PartialEq
)
]
pub
enum
StyleSharingBehavior
{
Allow
Disallow
}
#
[
derive
(
Clone
Debug
Eq
PartialEq
)
]
pub
struct
OpaqueComputedValues
(
NonZeroPtrMut
<
(
)
>
)
;
impl
OpaqueComputedValues
{
fn
from
(
cv
:
&
ComputedValues
)
-
>
Self
{
let
p
=
NonZeroPtrMut
:
:
new
(
cv
as
*
const
ComputedValues
as
*
const
(
)
as
*
mut
(
)
)
;
OpaqueComputedValues
(
p
)
}
fn
eq
(
&
self
cv
:
&
ComputedValues
)
-
>
bool
{
Self
:
:
from
(
cv
)
=
=
*
self
}
}
#
[
derive
(
Debug
Default
)
]
pub
struct
ValidationData
{
class_list
:
Option
<
SmallVec
<
[
Atom
;
5
]
>
>
pres_hints
:
Option
<
SmallVec
<
[
ApplicableDeclarationBlock
;
5
]
>
>
parent_style_identity
:
Option
<
OpaqueComputedValues
>
revalidation_match_results
:
Option
<
SmallBitVec
>
}
impl
ValidationData
{
pub
fn
take
(
&
mut
self
)
-
>
Self
{
mem
:
:
replace
(
self
Self
:
:
default
(
)
)
}
pub
fn
pres_hints
<
E
>
(
&
mut
self
element
:
E
)
-
>
&
[
ApplicableDeclarationBlock
]
where
E
:
TElement
{
if
self
.
pres_hints
.
is_none
(
)
{
let
mut
pres_hints
=
SmallVec
:
:
new
(
)
;
element
.
synthesize_presentational_hints_for_legacy_attributes
(
VisitedHandlingMode
:
:
AllLinksUnvisited
&
mut
pres_hints
)
;
self
.
pres_hints
=
Some
(
pres_hints
)
;
}
&
*
self
.
pres_hints
.
as_ref
(
)
.
unwrap
(
)
}
pub
fn
class_list
<
E
>
(
&
mut
self
element
:
E
)
-
>
&
[
Atom
]
where
E
:
TElement
{
if
self
.
class_list
.
is_none
(
)
{
let
mut
class_list
=
SmallVec
:
:
<
[
Atom
;
5
]
>
:
:
new
(
)
;
element
.
each_class
(
|
c
|
class_list
.
push
(
c
.
clone
(
)
)
)
;
if
!
class_list
.
spilled
(
)
{
class_list
.
sort_by
(
|
a
b
|
a
.
get_hash
(
)
.
cmp
(
&
b
.
get_hash
(
)
)
)
;
}
self
.
class_list
=
Some
(
class_list
)
;
}
&
*
self
.
class_list
.
as_ref
(
)
.
unwrap
(
)
}
pub
fn
parent_style_identity
<
E
>
(
&
mut
self
el
:
E
)
-
>
OpaqueComputedValues
where
E
:
TElement
{
if
self
.
parent_style_identity
.
is_none
(
)
{
let
parent
=
el
.
inheritance_parent
(
)
.
unwrap
(
)
;
self
.
parent_style_identity
=
Some
(
OpaqueComputedValues
:
:
from
(
parent
.
borrow_data
(
)
.
unwrap
(
)
.
styles
.
primary
(
)
)
)
;
}
self
.
parent_style_identity
.
as_ref
(
)
.
unwrap
(
)
.
clone
(
)
}
#
[
inline
]
fn
revalidation_match_results
<
E
F
>
(
&
mut
self
element
:
E
stylist
:
&
Stylist
bloom
:
&
StyleBloom
<
E
>
nth_index_cache
:
&
mut
NthIndexCache
bloom_known_valid
:
bool
flags_setter
:
&
mut
F
)
-
>
&
SmallBitVec
where
E
:
TElement
F
:
FnMut
(
&
E
ElementSelectorFlags
)
{
if
self
.
revalidation_match_results
.
is_none
(
)
{
let
bloom_to_use
=
if
bloom_known_valid
{
debug_assert_eq
!
(
bloom
.
current_parent
(
)
element
.
traversal_parent
(
)
)
;
Some
(
bloom
.
filter
(
)
)
}
else
{
if
bloom
.
current_parent
(
)
=
=
element
.
traversal_parent
(
)
{
Some
(
bloom
.
filter
(
)
)
}
else
{
None
}
}
;
self
.
revalidation_match_results
=
Some
(
stylist
.
match_revalidation_selectors
(
element
bloom_to_use
nth_index_cache
flags_setter
)
)
;
}
self
.
revalidation_match_results
.
as_ref
(
)
.
unwrap
(
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
StyleSharingCandidate
<
E
:
TElement
>
{
element
:
E
validation_data
:
ValidationData
}
struct
FakeCandidate
{
_element
:
usize
_validation_data
:
ValidationData
}
impl
<
E
:
TElement
>
Deref
for
StyleSharingCandidate
<
E
>
{
type
Target
=
E
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
self
.
element
}
}
impl
<
E
:
TElement
>
StyleSharingCandidate
<
E
>
{
fn
class_list
(
&
mut
self
)
-
>
&
[
Atom
]
{
self
.
validation_data
.
class_list
(
self
.
element
)
}
fn
pres_hints
(
&
mut
self
)
-
>
&
[
ApplicableDeclarationBlock
]
{
self
.
validation_data
.
pres_hints
(
self
.
element
)
}
fn
parent_style_identity
(
&
mut
self
)
-
>
OpaqueComputedValues
{
self
.
validation_data
.
parent_style_identity
(
self
.
element
)
}
fn
revalidation_match_results
(
&
mut
self
stylist
:
&
Stylist
bloom
:
&
StyleBloom
<
E
>
nth_index_cache
:
&
mut
NthIndexCache
)
-
>
&
SmallBitVec
{
self
.
validation_data
.
revalidation_match_results
(
self
.
element
stylist
bloom
nth_index_cache
false
&
mut
|
_
_
|
{
}
)
}
}
impl
<
E
:
TElement
>
PartialEq
<
StyleSharingCandidate
<
E
>
>
for
StyleSharingCandidate
<
E
>
{
fn
eq
(
&
self
other
:
&
Self
)
-
>
bool
{
self
.
element
=
=
other
.
element
}
}
pub
struct
StyleSharingTarget
<
E
:
TElement
>
{
element
:
E
validation_data
:
ValidationData
}
impl
<
E
:
TElement
>
Deref
for
StyleSharingTarget
<
E
>
{
type
Target
=
E
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
self
.
element
}
}
impl
<
E
:
TElement
>
StyleSharingTarget
<
E
>
{
pub
fn
new
(
element
:
E
)
-
>
Self
{
Self
{
element
:
element
validation_data
:
ValidationData
:
:
default
(
)
}
}
fn
class_list
(
&
mut
self
)
-
>
&
[
Atom
]
{
self
.
validation_data
.
class_list
(
self
.
element
)
}
fn
pres_hints
(
&
mut
self
)
-
>
&
[
ApplicableDeclarationBlock
]
{
self
.
validation_data
.
pres_hints
(
self
.
element
)
}
fn
parent_style_identity
(
&
mut
self
)
-
>
OpaqueComputedValues
{
self
.
validation_data
.
parent_style_identity
(
self
.
element
)
}
fn
revalidation_match_results
(
&
mut
self
stylist
:
&
Stylist
bloom
:
&
StyleBloom
<
E
>
nth_index_cache
:
&
mut
NthIndexCache
selector_flags_map
:
&
mut
SelectorFlagsMap
<
E
>
)
-
>
&
SmallBitVec
{
let
element
=
self
.
element
;
let
mut
set_selector_flags
=
|
el
:
&
E
flags
:
ElementSelectorFlags
|
{
element
.
apply_selector_flags
(
selector_flags_map
el
flags
)
;
}
;
self
.
validation_data
.
revalidation_match_results
(
self
.
element
stylist
bloom
nth_index_cache
true
&
mut
set_selector_flags
)
}
pub
fn
share_style_if_possible
(
&
mut
self
context
:
&
mut
StyleContext
<
E
>
)
-
>
Option
<
ResolvedElementStyles
>
{
let
cache
=
&
mut
context
.
thread_local
.
sharing_cache
;
let
shared_context
=
&
context
.
shared
;
let
selector_flags_map
=
&
mut
context
.
thread_local
.
selector_flags
;
let
bloom_filter
=
&
context
.
thread_local
.
bloom_filter
;
let
nth_index_cache
=
&
mut
context
.
thread_local
.
nth_index_cache
;
if
cache
.
dom_depth
!
=
bloom_filter
.
matching_depth
(
)
{
debug
!
(
"
Can
'
t
share
style
because
DOM
depth
changed
from
{
:
?
}
to
{
:
?
}
element
:
{
:
?
}
"
cache
.
dom_depth
bloom_filter
.
matching_depth
(
)
self
.
element
)
;
return
None
;
}
debug_assert_eq
!
(
bloom_filter
.
current_parent
(
)
self
.
element
.
traversal_parent
(
)
)
;
cache
.
share_style_if_possible
(
shared_context
selector_flags_map
bloom_filter
nth_index_cache
self
)
}
pub
fn
take_validation_data
(
&
mut
self
)
-
>
ValidationData
{
self
.
validation_data
.
take
(
)
}
}
struct
SharingCacheBase
<
Candidate
>
{
entries
:
LRUCache
<
[
Entry
<
Candidate
>
;
SHARING_CACHE_BACKING_STORE_SIZE
]
>
}
impl
<
Candidate
>
Default
for
SharingCacheBase
<
Candidate
>
{
fn
default
(
)
-
>
Self
{
Self
{
entries
:
LRUCache
:
:
default
(
)
}
}
}
impl
<
Candidate
>
SharingCacheBase
<
Candidate
>
{
fn
clear
(
&
mut
self
)
{
self
.
entries
.
evict_all
(
)
;
}
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
entries
.
num_entries
(
)
=
=
0
}
}
impl
<
E
:
TElement
>
SharingCache
<
E
>
{
fn
insert
(
&
mut
self
element
:
E
validation_data_holder
:
Option
<
&
mut
StyleSharingTarget
<
E
>
>
)
{
let
validation_data
=
match
validation_data_holder
{
Some
(
v
)
=
>
v
.
take_validation_data
(
)
None
=
>
ValidationData
:
:
default
(
)
}
;
self
.
entries
.
insert
(
StyleSharingCandidate
{
element
validation_data
}
)
;
}
}
type
SharingCache
<
E
>
=
SharingCacheBase
<
StyleSharingCandidate
<
E
>
>
;
type
TypelessSharingCache
=
SharingCacheBase
<
FakeCandidate
>
;
type
StoredSharingCache
=
Arc
<
AtomicRefCell
<
TypelessSharingCache
>
>
;
thread_local
!
(
static
SHARING_CACHE_KEY
:
StoredSharingCache
=
Arc
:
:
new
(
AtomicRefCell
:
:
new
(
TypelessSharingCache
:
:
default
(
)
)
)
)
;
pub
struct
StyleSharingCache
<
E
:
TElement
>
{
cache_typeless
:
OwningHandle
<
StoredSharingCache
AtomicRefMut
<
'
static
TypelessSharingCache
>
>
marker
:
PhantomData
<
SendElement
<
E
>
>
dom_depth
:
usize
}
impl
<
E
:
TElement
>
Drop
for
StyleSharingCache
<
E
>
{
fn
drop
(
&
mut
self
)
{
self
.
clear
(
)
;
}
}
impl
<
E
:
TElement
>
StyleSharingCache
<
E
>
{
#
[
allow
(
dead_code
)
]
fn
cache
(
&
self
)
-
>
&
SharingCache
<
E
>
{
let
base
:
&
TypelessSharingCache
=
&
*
self
.
cache_typeless
;
unsafe
{
mem
:
:
transmute
(
base
)
}
}
fn
cache_mut
(
&
mut
self
)
-
>
&
mut
SharingCache
<
E
>
{
let
base
:
&
mut
TypelessSharingCache
=
&
mut
*
self
.
cache_typeless
;
unsafe
{
mem
:
:
transmute
(
base
)
}
}
#
[
inline
(
never
)
]
pub
fn
new
(
)
-
>
Self
{
assert_eq
!
(
mem
:
:
size_of
:
:
<
SharingCache
<
E
>
>
(
)
mem
:
:
size_of
:
:
<
TypelessSharingCache
>
(
)
)
;
assert_eq
!
(
mem
:
:
align_of
:
:
<
SharingCache
<
E
>
>
(
)
mem
:
:
align_of
:
:
<
TypelessSharingCache
>
(
)
)
;
let
cache_arc
=
SHARING_CACHE_KEY
.
with
(
|
c
|
c
.
clone
(
)
)
;
let
cache
=
OwningHandle
:
:
new_with_fn
(
cache_arc
|
x
|
unsafe
{
x
.
as_ref
(
)
}
.
unwrap
(
)
.
borrow_mut
(
)
)
;
debug_assert
!
(
cache
.
is_empty
(
)
)
;
StyleSharingCache
{
cache_typeless
:
cache
marker
:
PhantomData
dom_depth
:
0
}
}
pub
fn
insert_if_possible
(
&
mut
self
element
:
&
E
style
:
&
PrimaryStyle
validation_data_holder
:
Option
<
&
mut
StyleSharingTarget
<
E
>
>
dom_depth
:
usize
)
{
let
parent
=
match
element
.
traversal_parent
(
)
{
Some
(
element
)
=
>
element
None
=
>
{
debug
!
(
"
Failing
to
insert
to
the
cache
:
no
parent
element
"
)
;
return
;
}
}
;
if
element
.
is_native_anonymous
(
)
{
debug
!
(
"
Failing
to
insert
into
the
cache
:
NAC
"
)
;
return
;
}
if
element
.
has_animations
(
)
{
debug
!
(
"
Failing
to
insert
to
the
cache
:
running
animations
"
)
;
return
;
}
let
box_style
=
style
.
style
(
)
.
get_box
(
)
;
if
box_style
.
specifies_transitions
(
)
{
debug
!
(
"
Failing
to
insert
to
the
cache
:
transitions
"
)
;
return
;
}
if
box_style
.
specifies_animations
(
)
{
debug
!
(
"
Failing
to
insert
to
the
cache
:
animations
"
)
;
return
;
}
debug
!
(
"
Inserting
into
cache
:
{
:
?
}
with
parent
{
:
?
}
"
element
parent
)
;
if
self
.
dom_depth
!
=
dom_depth
{
debug
!
(
"
Clearing
cache
because
depth
changed
from
{
:
?
}
to
{
:
?
}
element
:
{
:
?
}
"
self
.
dom_depth
dom_depth
element
)
;
self
.
clear
(
)
;
self
.
dom_depth
=
dom_depth
;
}
self
.
cache_mut
(
)
.
insert
(
*
element
validation_data_holder
)
;
}
pub
fn
clear
(
&
mut
self
)
{
self
.
cache_mut
(
)
.
clear
(
)
;
}
fn
share_style_if_possible
(
&
mut
self
shared_context
:
&
SharedStyleContext
selector_flags_map
:
&
mut
SelectorFlagsMap
<
E
>
bloom_filter
:
&
StyleBloom
<
E
>
nth_index_cache
:
&
mut
NthIndexCache
target
:
&
mut
StyleSharingTarget
<
E
>
)
-
>
Option
<
ResolvedElementStyles
>
{
if
shared_context
.
options
.
disable_style_sharing_cache
{
debug
!
(
"
{
:
?
}
Cannot
share
style
:
style
sharing
cache
disabled
"
target
.
element
)
;
return
None
;
}
if
target
.
inheritance_parent
(
)
.
is_none
(
)
{
debug
!
(
"
{
:
?
}
Cannot
share
style
:
element
has
no
parent
"
target
.
element
)
;
return
None
;
}
if
target
.
is_native_anonymous
(
)
{
debug
!
(
"
{
:
?
}
Cannot
share
style
:
NAC
"
target
.
element
)
;
return
None
;
}
self
.
cache_mut
(
)
.
entries
.
lookup
(
|
candidate
|
{
Self
:
:
test_candidate
(
target
candidate
&
shared_context
bloom_filter
nth_index_cache
selector_flags_map
)
}
)
}
fn
test_candidate
(
target
:
&
mut
StyleSharingTarget
<
E
>
candidate
:
&
mut
StyleSharingCandidate
<
E
>
shared
:
&
SharedStyleContext
bloom
:
&
StyleBloom
<
E
>
nth_index_cache
:
&
mut
NthIndexCache
selector_flags_map
:
&
mut
SelectorFlagsMap
<
E
>
)
-
>
Option
<
ResolvedElementStyles
>
{
debug_assert
!
(
!
target
.
is_native_anonymous
(
)
)
;
if
!
checks
:
:
parents_allow_sharing
(
target
candidate
)
{
trace
!
(
"
Miss
:
Parent
"
)
;
return
None
;
}
if
target
.
element
.
style_scope
(
)
!
=
candidate
.
element
.
style_scope
(
)
{
trace
!
(
"
Miss
:
Different
style
scopes
"
)
;
return
None
;
}
if
target
.
element
.
assigned_slot
(
)
!
=
candidate
.
element
.
assigned_slot
(
)
{
trace
!
(
"
Miss
:
Different
style
scopes
"
)
;
return
None
;
}
if
*
target
.
get_local_name
(
)
!
=
*
candidate
.
element
.
get_local_name
(
)
{
trace
!
(
"
Miss
:
Local
Name
"
)
;
return
None
;
}
if
*
target
.
get_namespace
(
)
!
=
*
candidate
.
element
.
get_namespace
(
)
{
trace
!
(
"
Miss
:
Namespace
"
)
;
return
None
;
}
if
target
.
is_link
(
)
!
=
candidate
.
element
.
is_link
(
)
{
trace
!
(
"
Miss
:
Link
"
)
;
return
None
;
}
if
target
.
matches_user_and_author_rules
(
)
!
=
candidate
.
element
.
matches_user_and_author_rules
(
)
{
trace
!
(
"
Miss
:
User
and
Author
Rules
"
)
;
return
None
;
}
if
target
.
element
.
get_state
(
)
!
=
candidate
.
get_state
(
)
{
trace
!
(
"
Miss
:
User
and
Author
State
"
)
;
return
None
;
}
let
may_match_different_id_rules
=
checks
:
:
may_match_different_id_rules
(
shared
target
.
element
candidate
.
element
)
;
if
may_match_different_id_rules
{
trace
!
(
"
Miss
:
ID
Attr
"
)
;
return
None
;
}
if
!
checks
:
:
have_same_style_attribute
(
target
candidate
)
{
trace
!
(
"
Miss
:
Style
Attr
"
)
;
return
None
;
}
if
!
checks
:
:
have_same_class
(
target
candidate
)
{
trace
!
(
"
Miss
:
Class
"
)
;
return
None
;
}
if
!
checks
:
:
have_same_presentational_hints
(
target
candidate
)
{
trace
!
(
"
Miss
:
Pres
Hints
"
)
;
return
None
;
}
if
!
checks
:
:
revalidate
(
target
candidate
shared
bloom
nth_index_cache
selector_flags_map
)
{
trace
!
(
"
Miss
:
Revalidation
"
)
;
return
None
;
}
debug_assert
!
(
target
.
has_current_styles_for_traversal
(
&
candidate
.
element
.
borrow_data
(
)
.
unwrap
(
)
shared
.
traversal_flags
)
)
;
debug
!
(
"
Sharing
allowed
between
{
:
?
}
and
{
:
?
}
"
target
.
element
candidate
.
element
)
;
Some
(
candidate
.
element
.
borrow_data
(
)
.
unwrap
(
)
.
share_styles
(
)
)
}
pub
fn
lookup_by_rules
(
&
mut
self
shared_context
:
&
SharedStyleContext
inherited
:
&
ComputedValues
rules
:
&
StrongRuleNode
visited_rules
:
Option
<
&
StrongRuleNode
>
target
:
E
)
-
>
Option
<
PrimaryStyle
>
{
if
shared_context
.
options
.
disable_style_sharing_cache
{
return
None
;
}
self
.
cache_mut
(
)
.
entries
.
lookup
(
|
candidate
|
{
debug_assert_ne
!
(
candidate
.
element
target
)
;
if
!
candidate
.
parent_style_identity
(
)
.
eq
(
inherited
)
{
return
None
;
}
let
data
=
candidate
.
element
.
borrow_data
(
)
.
unwrap
(
)
;
let
style
=
data
.
styles
.
primary
(
)
;
if
style
.
rules
.
as_ref
(
)
!
=
Some
(
&
rules
)
{
return
None
;
}
if
style
.
visited_rules
(
)
!
=
visited_rules
{
return
None
;
}
if
target
.
is_visited_link
(
)
!
=
candidate
.
element
.
is_visited_link
(
)
{
return
None
;
}
Some
(
data
.
share_primary_style
(
)
)
}
)
}
}
