use
Atom
;
use
bit_vec
:
:
BitVec
;
use
cache
:
:
{
LRUCache
LRUCacheMutIterator
}
;
use
context
:
:
{
SelectorFlagsMap
SharedStyleContext
StyleContext
}
;
use
data
:
:
{
ComputedStyle
ElementData
ElementStyles
}
;
use
dom
:
:
{
TElement
SendElement
}
;
use
matching
:
:
{
ChildCascadeRequirement
MatchMethods
}
;
use
properties
:
:
ComputedValues
;
use
selectors
:
:
bloom
:
:
BloomFilter
;
use
selectors
:
:
matching
:
:
{
ElementSelectorFlags
StyleRelations
}
;
use
smallvec
:
:
SmallVec
;
use
std
:
:
ops
:
:
Deref
;
use
stylist
:
:
{
ApplicableDeclarationBlock
Stylist
}
;
mod
checks
;
pub
const
STYLE_SHARING_CANDIDATE_CACHE_SIZE
:
usize
=
8
;
#
[
derive
(
Clone
Copy
PartialEq
)
]
pub
enum
StyleSharingBehavior
{
Allow
Disallow
}
#
[
derive
(
Debug
)
]
pub
struct
ValidationData
{
class_list
:
Option
<
SmallVec
<
[
Atom
;
5
]
>
>
pres_hints
:
Option
<
SmallVec
<
[
ApplicableDeclarationBlock
;
5
]
>
>
revalidation_match_results
:
Option
<
BitVec
>
}
impl
ValidationData
{
pub
fn
new
(
)
-
>
Self
{
Self
{
class_list
:
None
pres_hints
:
None
revalidation_match_results
:
None
}
}
pub
fn
take
(
&
mut
self
)
-
>
Self
{
Self
{
class_list
:
self
.
class_list
.
take
(
)
pres_hints
:
self
.
pres_hints
.
take
(
)
revalidation_match_results
:
self
.
revalidation_match_results
.
take
(
)
}
}
pub
fn
pres_hints
<
E
>
(
&
mut
self
element
:
E
)
-
>
&
[
ApplicableDeclarationBlock
]
where
E
:
TElement
{
if
self
.
pres_hints
.
is_none
(
)
{
let
mut
pres_hints
=
SmallVec
:
:
new
(
)
;
element
.
synthesize_presentational_hints_for_legacy_attributes
(
&
mut
pres_hints
)
;
self
.
pres_hints
=
Some
(
pres_hints
)
;
}
&
*
self
.
pres_hints
.
as_ref
(
)
.
unwrap
(
)
}
pub
fn
class_list
<
E
>
(
&
mut
self
element
:
E
)
-
>
&
[
Atom
]
where
E
:
TElement
{
if
self
.
class_list
.
is_none
(
)
{
let
mut
class_list
=
SmallVec
:
:
new
(
)
;
element
.
each_class
(
|
c
|
class_list
.
push
(
c
.
clone
(
)
)
)
;
self
.
class_list
=
Some
(
class_list
)
;
}
&
*
self
.
class_list
.
as_ref
(
)
.
unwrap
(
)
}
fn
revalidation_match_results
<
E
F
>
(
&
mut
self
element
:
E
stylist
:
&
Stylist
bloom
:
&
BloomFilter
flags_setter
:
&
mut
F
)
-
>
&
BitVec
where
E
:
TElement
F
:
FnMut
(
&
E
ElementSelectorFlags
)
{
if
self
.
revalidation_match_results
.
is_none
(
)
{
self
.
revalidation_match_results
=
Some
(
stylist
.
match_revalidation_selectors
(
&
element
bloom
flags_setter
)
)
;
}
self
.
revalidation_match_results
.
as_ref
(
)
.
unwrap
(
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
StyleSharingCandidate
<
E
:
TElement
>
{
element
:
SendElement
<
E
>
validation_data
:
ValidationData
}
impl
<
E
:
TElement
>
StyleSharingCandidate
<
E
>
{
fn
class_list
(
&
mut
self
)
-
>
&
[
Atom
]
{
self
.
validation_data
.
class_list
(
*
self
.
element
)
}
fn
pres_hints
(
&
mut
self
)
-
>
&
[
ApplicableDeclarationBlock
]
{
self
.
validation_data
.
pres_hints
(
*
self
.
element
)
}
fn
revalidation_match_results
(
&
mut
self
stylist
:
&
Stylist
bloom
:
&
BloomFilter
)
-
>
&
BitVec
{
self
.
validation_data
.
revalidation_match_results
(
*
self
.
element
stylist
bloom
&
mut
|
_
_
|
{
}
)
}
}
impl
<
E
:
TElement
>
PartialEq
<
StyleSharingCandidate
<
E
>
>
for
StyleSharingCandidate
<
E
>
{
fn
eq
(
&
self
other
:
&
Self
)
-
>
bool
{
self
.
element
=
=
other
.
element
}
}
pub
struct
StyleSharingTarget
<
E
:
TElement
>
{
element
:
E
validation_data
:
ValidationData
}
impl
<
E
:
TElement
>
Deref
for
StyleSharingTarget
<
E
>
{
type
Target
=
E
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
self
.
element
}
}
impl
<
E
:
TElement
>
StyleSharingTarget
<
E
>
{
pub
fn
new
(
element
:
E
)
-
>
Self
{
Self
{
element
:
element
validation_data
:
ValidationData
:
:
new
(
)
}
}
fn
class_list
(
&
mut
self
)
-
>
&
[
Atom
]
{
self
.
validation_data
.
class_list
(
self
.
element
)
}
fn
pres_hints
(
&
mut
self
)
-
>
&
[
ApplicableDeclarationBlock
]
{
self
.
validation_data
.
pres_hints
(
self
.
element
)
}
fn
revalidation_match_results
(
&
mut
self
stylist
:
&
Stylist
bloom
:
&
BloomFilter
selector_flags_map
:
&
mut
SelectorFlagsMap
<
E
>
)
-
>
&
BitVec
{
let
element
=
self
.
element
;
let
mut
set_selector_flags
=
|
el
:
&
E
flags
:
ElementSelectorFlags
|
{
element
.
apply_selector_flags
(
selector_flags_map
el
flags
)
;
}
;
self
.
validation_data
.
revalidation_match_results
(
self
.
element
stylist
bloom
&
mut
set_selector_flags
)
}
pub
fn
share_style_if_possible
(
mut
self
context
:
&
mut
StyleContext
<
E
>
data
:
&
mut
ElementData
)
-
>
StyleSharingResult
{
use
std
:
:
mem
;
let
shared_context
=
&
context
.
shared
;
let
selector_flags_map
=
&
mut
context
.
thread_local
.
selector_flags
;
let
bloom_filter
=
context
.
thread_local
.
bloom_filter
.
filter
(
)
;
let
result
=
context
.
thread_local
.
style_sharing_candidate_cache
.
share_style_if_possible
(
shared_context
selector_flags_map
bloom_filter
&
mut
self
data
)
;
mem
:
:
swap
(
&
mut
self
.
validation_data
&
mut
context
.
thread_local
.
current_element_info
.
as_mut
(
)
.
unwrap
(
)
.
validation_data
)
;
result
}
}
#
[
derive
(
Clone
Debug
)
]
pub
enum
CacheMiss
{
Parent
NativeAnonymousContent
LocalName
Namespace
Link
UserAndAuthorRules
State
IdAttr
StyleAttr
Class
PresHints
Revalidation
}
pub
enum
StyleSharingResult
{
CannotShare
StyleWasShared
(
usize
ChildCascadeRequirement
)
}
pub
struct
StyleSharingCandidateCache
<
E
:
TElement
>
{
cache
:
LRUCache
<
StyleSharingCandidate
<
E
>
>
}
impl
<
E
:
TElement
>
StyleSharingCandidateCache
<
E
>
{
pub
fn
new
(
)
-
>
Self
{
StyleSharingCandidateCache
{
cache
:
LRUCache
:
:
new
(
STYLE_SHARING_CANDIDATE_CACHE_SIZE
)
}
}
pub
fn
num_entries
(
&
self
)
-
>
usize
{
self
.
cache
.
num_entries
(
)
}
fn
iter_mut
(
&
mut
self
)
-
>
LRUCacheMutIterator
<
StyleSharingCandidate
<
E
>
>
{
self
.
cache
.
iter_mut
(
)
}
pub
fn
insert_if_possible
(
&
mut
self
element
:
&
E
style
:
&
ComputedValues
relations
:
StyleRelations
mut
validation_data
:
ValidationData
)
{
use
selectors
:
:
matching
:
:
AFFECTED_BY_PRESENTATIONAL_HINTS
;
let
parent
=
match
element
.
parent_element
(
)
{
Some
(
element
)
=
>
element
None
=
>
{
debug
!
(
"
Failing
to
insert
to
the
cache
:
no
parent
element
"
)
;
return
;
}
}
;
if
element
.
is_native_anonymous
(
)
{
debug
!
(
"
Failing
to
insert
into
the
cache
:
NAC
"
)
;
return
;
}
if
!
checks
:
:
relations_are_shareable
(
&
relations
)
{
debug
!
(
"
Failing
to
insert
to
the
cache
:
{
:
?
}
"
relations
)
;
return
;
}
let
box_style
=
style
.
get_box
(
)
;
if
box_style
.
specifies_transitions
(
)
{
debug
!
(
"
Failing
to
insert
to
the
cache
:
transitions
"
)
;
return
;
}
if
box_style
.
specifies_animations
(
)
{
debug
!
(
"
Failing
to
insert
to
the
cache
:
animations
"
)
;
return
;
}
if
!
relations
.
intersects
(
AFFECTED_BY_PRESENTATIONAL_HINTS
)
{
debug_assert
!
(
validation_data
.
pres_hints
.
as_ref
(
)
.
map_or
(
true
|
v
|
v
.
is_empty
(
)
)
)
;
validation_data
.
pres_hints
=
Some
(
SmallVec
:
:
new
(
)
)
;
}
debug
!
(
"
Inserting
into
cache
:
{
:
?
}
with
parent
{
:
?
}
"
element
parent
)
;
self
.
cache
.
insert
(
StyleSharingCandidate
{
element
:
unsafe
{
SendElement
:
:
new
(
*
element
)
}
validation_data
:
validation_data
}
)
;
}
pub
fn
touch
(
&
mut
self
index
:
usize
)
{
self
.
cache
.
touch
(
index
)
;
}
pub
fn
clear
(
&
mut
self
)
{
self
.
cache
.
evict_all
(
)
}
fn
share_style_if_possible
(
&
mut
self
shared_context
:
&
SharedStyleContext
selector_flags_map
:
&
mut
SelectorFlagsMap
<
E
>
bloom_filter
:
&
BloomFilter
target
:
&
mut
StyleSharingTarget
<
E
>
data
:
&
mut
ElementData
)
-
>
StyleSharingResult
{
if
shared_context
.
options
.
disable_style_sharing_cache
{
debug
!
(
"
{
:
?
}
Cannot
share
style
:
style
sharing
cache
disabled
"
target
.
element
)
;
return
StyleSharingResult
:
:
CannotShare
}
if
target
.
parent_element
(
)
.
is_none
(
)
{
debug
!
(
"
{
:
?
}
Cannot
share
style
:
element
has
no
parent
"
target
.
element
)
;
return
StyleSharingResult
:
:
CannotShare
}
if
target
.
is_native_anonymous
(
)
{
debug
!
(
"
{
:
?
}
Cannot
share
style
:
NAC
"
target
.
element
)
;
return
StyleSharingResult
:
:
CannotShare
;
}
if
target
.
style_attribute
(
)
.
is_some
(
)
{
debug
!
(
"
{
:
?
}
Cannot
share
style
:
element
has
style
attribute
"
target
.
element
)
;
return
StyleSharingResult
:
:
CannotShare
}
if
target
.
get_id
(
)
.
is_some
(
)
{
debug
!
(
"
{
:
?
}
Cannot
share
style
:
element
has
id
"
target
.
element
)
;
return
StyleSharingResult
:
:
CannotShare
}
let
mut
should_clear_cache
=
false
;
for
(
i
candidate
)
in
self
.
iter_mut
(
)
.
enumerate
(
)
{
let
sharing_result
=
Self
:
:
test_candidate
(
target
candidate
&
shared_context
bloom_filter
selector_flags_map
)
;
match
sharing_result
{
Ok
(
shared_style
)
=
>
{
debug_assert_eq
!
(
data
.
has_styles
(
)
data
.
has_restyle
(
)
)
;
let
old_values
=
data
.
get_styles_mut
(
)
.
and_then
(
|
s
|
s
.
primary
.
values
.
take
(
)
)
;
let
child_cascade_requirement
=
target
.
accumulate_damage
(
&
shared_context
data
.
get_restyle_mut
(
)
old_values
.
as_ref
(
)
.
map
(
|
v
|
&
*
*
v
)
shared_style
.
values
(
)
None
)
;
let
styles
=
ElementStyles
:
:
new
(
shared_style
)
;
data
.
set_styles
(
styles
)
;
return
StyleSharingResult
:
:
StyleWasShared
(
i
child_cascade_requirement
)
}
Err
(
miss
)
=
>
{
debug
!
(
"
Cache
miss
:
{
:
?
}
"
miss
)
;
match
miss
{
CacheMiss
:
:
Parent
=
>
{
should_clear_cache
=
true
;
break
;
}
CacheMiss
:
:
PresHints
|
CacheMiss
:
:
Revalidation
=
>
break
_
=
>
{
}
}
}
}
}
debug
!
(
"
{
:
?
}
Cannot
share
style
:
{
}
cache
entries
"
target
.
element
self
.
cache
.
num_entries
(
)
)
;
if
should_clear_cache
{
self
.
clear
(
)
;
}
StyleSharingResult
:
:
CannotShare
}
fn
test_candidate
(
target
:
&
mut
StyleSharingTarget
<
E
>
candidate
:
&
mut
StyleSharingCandidate
<
E
>
shared
:
&
SharedStyleContext
bloom
:
&
BloomFilter
selector_flags_map
:
&
mut
SelectorFlagsMap
<
E
>
)
-
>
Result
<
ComputedStyle
CacheMiss
>
{
macro_rules
!
miss
{
(
miss
:
ident
)
=
>
{
return
Err
(
CacheMiss
:
:
miss
)
;
}
}
let
parent
=
target
.
parent_element
(
)
;
let
candidate_parent
=
candidate
.
element
.
parent_element
(
)
;
if
parent
!
=
candidate_parent
&
&
!
checks
:
:
same_computed_values
(
parent
candidate_parent
)
{
miss
!
(
Parent
)
}
if
target
.
is_native_anonymous
(
)
{
debug_assert
!
(
!
candidate
.
element
.
is_native_anonymous
(
)
"
Why
inserting
NAC
into
the
cache
?
"
)
;
miss
!
(
NativeAnonymousContent
)
}
if
*
target
.
get_local_name
(
)
!
=
*
candidate
.
element
.
get_local_name
(
)
{
miss
!
(
LocalName
)
}
if
*
target
.
get_namespace
(
)
!
=
*
candidate
.
element
.
get_namespace
(
)
{
miss
!
(
Namespace
)
}
if
target
.
is_link
(
)
!
=
candidate
.
element
.
is_link
(
)
{
miss
!
(
Link
)
}
if
target
.
matches_user_and_author_rules
(
)
!
=
candidate
.
element
.
matches_user_and_author_rules
(
)
{
miss
!
(
UserAndAuthorRules
)
}
if
!
checks
:
:
have_same_state_ignoring_visitedness
(
target
.
element
candidate
)
{
miss
!
(
State
)
}
if
target
.
get_id
(
)
!
=
candidate
.
element
.
get_id
(
)
{
miss
!
(
IdAttr
)
}
if
target
.
style_attribute
(
)
.
is_some
(
)
{
miss
!
(
StyleAttr
)
}
if
!
checks
:
:
have_same_class
(
target
candidate
)
{
miss
!
(
Class
)
}
if
!
checks
:
:
have_same_presentational_hints
(
target
candidate
)
{
miss
!
(
PresHints
)
}
if
!
checks
:
:
revalidate
(
target
candidate
shared
bloom
selector_flags_map
)
{
miss
!
(
Revalidation
)
}
let
data
=
candidate
.
element
.
borrow_data
(
)
.
unwrap
(
)
;
debug_assert
!
(
target
.
has_current_styles
(
&
data
)
)
;
debug
!
(
"
Sharing
style
between
{
:
?
}
and
{
:
?
}
"
target
.
element
candidate
.
element
)
;
Ok
(
data
.
styles
(
)
.
primary
.
clone
(
)
)
}
}
