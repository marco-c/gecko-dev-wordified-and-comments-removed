use
context
:
:
{
CurrentElementInfo
SelectorFlagsMap
SharedStyleContext
}
;
use
dom
:
:
TElement
;
use
matching
:
:
MatchMethods
;
use
selectors
:
:
bloom
:
:
BloomFilter
;
use
selectors
:
:
matching
:
:
{
ElementSelectorFlags
StyleRelations
}
;
use
sharing
:
:
StyleSharingCandidate
;
use
sink
:
:
ForgetfulSink
;
use
stylearc
:
:
Arc
;
#
[
inline
]
pub
fn
relations_are_shareable
(
relations
:
&
StyleRelations
)
-
>
bool
{
use
selectors
:
:
matching
:
:
*
;
!
relations
.
intersects
(
AFFECTED_BY_ID_SELECTOR
|
AFFECTED_BY_PSEUDO_ELEMENTS
|
AFFECTED_BY_STYLE_ATTRIBUTE
|
AFFECTED_BY_PRESENTATIONAL_HINTS
)
}
pub
fn
same_computed_values
<
E
>
(
first
:
Option
<
E
>
second
:
Option
<
E
>
)
-
>
bool
where
E
:
TElement
{
let
(
a
b
)
=
match
(
first
second
)
{
(
Some
(
f
)
Some
(
s
)
)
=
>
(
f
s
)
_
=
>
return
false
}
;
let
eq
=
Arc
:
:
ptr_eq
(
a
.
borrow_data
(
)
.
unwrap
(
)
.
styles
(
)
.
primary
.
values
(
)
b
.
borrow_data
(
)
.
unwrap
(
)
.
styles
(
)
.
primary
.
values
(
)
)
;
eq
}
pub
fn
has_presentational_hints
<
E
>
(
element
:
E
)
-
>
bool
where
E
:
TElement
{
let
mut
hints
=
ForgetfulSink
:
:
new
(
)
;
element
.
synthesize_presentational_hints_for_legacy_attributes
(
&
mut
hints
)
;
!
hints
.
is_empty
(
)
}
pub
fn
have_same_class
<
E
>
(
element
:
E
candidate
:
&
mut
StyleSharingCandidate
<
E
>
)
-
>
bool
where
E
:
TElement
{
let
mut
element_class_attributes
=
vec
!
[
]
;
element
.
each_class
(
|
c
|
element_class_attributes
.
push
(
c
.
clone
(
)
)
)
;
if
candidate
.
class_attributes
.
is_none
(
)
{
let
mut
attrs
=
vec
!
[
]
;
candidate
.
element
.
each_class
(
|
c
|
attrs
.
push
(
c
.
clone
(
)
)
)
;
candidate
.
class_attributes
=
Some
(
attrs
)
}
element_class_attributes
=
=
*
candidate
.
class_attributes
.
as_ref
(
)
.
unwrap
(
)
}
#
[
inline
]
pub
fn
revalidate
<
E
>
(
element
:
E
candidate
:
&
mut
StyleSharingCandidate
<
E
>
shared_context
:
&
SharedStyleContext
bloom
:
&
BloomFilter
info
:
&
mut
CurrentElementInfo
selector_flags_map
:
&
mut
SelectorFlagsMap
<
E
>
)
-
>
bool
where
E
:
TElement
{
let
stylist
=
&
shared_context
.
stylist
;
if
info
.
revalidation_match_results
.
is_none
(
)
{
let
mut
set_selector_flags
=
|
el
:
&
E
flags
:
ElementSelectorFlags
|
{
element
.
apply_selector_flags
(
selector_flags_map
el
flags
)
;
}
;
info
.
revalidation_match_results
=
Some
(
stylist
.
match_revalidation_selectors
(
&
element
bloom
&
mut
set_selector_flags
)
)
;
}
if
candidate
.
revalidation_match_results
.
is_none
(
)
{
let
results
=
stylist
.
match_revalidation_selectors
(
&
*
candidate
.
element
bloom
&
mut
|
_
_
|
{
}
)
;
candidate
.
revalidation_match_results
=
Some
(
results
)
;
}
let
for_element
=
info
.
revalidation_match_results
.
as_ref
(
)
.
unwrap
(
)
;
let
for_candidate
=
candidate
.
revalidation_match_results
.
as_ref
(
)
.
unwrap
(
)
;
debug_assert_eq
!
(
for_element
.
len
(
)
for_candidate
.
len
(
)
)
;
for_element
=
=
for_candidate
}
