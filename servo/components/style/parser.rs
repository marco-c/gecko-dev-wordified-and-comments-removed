#
!
[
deny
(
missing_docs
)
]
use
cssparser
:
:
{
Parser
SourcePosition
}
;
use
error_reporting
:
:
ParseErrorReporter
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
gecko_bindings
:
:
sugar
:
:
refptr
:
:
{
GeckoArcPrincipal
GeckoArcURI
}
;
use
servo_url
:
:
ServoUrl
;
use
stylesheets
:
:
{
MemoryHoleReporter
Origin
}
;
#
[
cfg
(
not
(
feature
=
"
gecko
"
)
)
]
pub
struct
ParserContextExtraData
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
struct
ParserContextExtraData
{
pub
base
:
Option
<
GeckoArcURI
>
pub
referrer
:
Option
<
GeckoArcURI
>
pub
principal
:
Option
<
GeckoArcPrincipal
>
}
#
[
cfg
(
not
(
feature
=
"
gecko
"
)
)
]
impl
Default
for
ParserContextExtraData
{
fn
default
(
)
-
>
Self
{
ParserContextExtraData
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
impl
Default
for
ParserContextExtraData
{
fn
default
(
)
-
>
Self
{
ParserContextExtraData
{
base
:
None
referrer
:
None
principal
:
None
}
}
}
pub
struct
ParserContext
<
'
a
>
{
pub
stylesheet_origin
:
Origin
pub
base_url
:
&
'
a
ServoUrl
pub
error_reporter
:
Box
<
ParseErrorReporter
+
Send
>
pub
extra_data
:
ParserContextExtraData
}
impl
<
'
a
>
ParserContext
<
'
a
>
{
pub
fn
new_with_extra_data
(
stylesheet_origin
:
Origin
base_url
:
&
'
a
ServoUrl
error_reporter
:
Box
<
ParseErrorReporter
+
Send
>
extra_data
:
ParserContextExtraData
)
-
>
ParserContext
<
'
a
>
{
ParserContext
{
stylesheet_origin
:
stylesheet_origin
base_url
:
base_url
error_reporter
:
error_reporter
extra_data
:
extra_data
}
}
pub
fn
new
(
stylesheet_origin
:
Origin
base_url
:
&
'
a
ServoUrl
error_reporter
:
Box
<
ParseErrorReporter
+
Send
>
)
-
>
ParserContext
<
'
a
>
{
let
extra_data
=
ParserContextExtraData
:
:
default
(
)
;
Self
:
:
new_with_extra_data
(
stylesheet_origin
base_url
error_reporter
extra_data
)
}
pub
fn
new_for_cssom
(
base_url
:
&
'
a
ServoUrl
)
-
>
ParserContext
<
'
a
>
{
Self
:
:
new
(
Origin
:
:
User
base_url
Box
:
:
new
(
MemoryHoleReporter
)
)
}
}
pub
fn
log_css_error
(
input
:
&
mut
Parser
position
:
SourcePosition
message
:
&
str
parsercontext
:
&
ParserContext
)
{
parsercontext
.
error_reporter
.
report_error
(
input
position
message
)
;
}
pub
trait
Parse
:
Sized
{
fn
parse
(
context
:
&
ParserContext
input
:
&
mut
Parser
)
-
>
Result
<
Self
(
)
>
;
}
