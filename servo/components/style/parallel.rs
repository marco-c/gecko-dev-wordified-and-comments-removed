#
!
[
deny
(
missing_docs
)
]
use
arrayvec
:
:
ArrayVec
;
use
context
:
:
TraversalStatistics
;
use
dom
:
:
{
OpaqueNode
SendNode
TElement
TNode
}
;
use
rayon
;
use
scoped_tls
:
:
ScopedTLS
;
use
smallvec
:
:
SmallVec
;
use
std
:
:
borrow
:
:
Borrow
;
use
std
:
:
mem
;
use
time
;
use
traversal
:
:
{
DomTraversal
PerLevelTraversalData
PreTraverseToken
}
;
pub
const
WORK_UNIT_MAX
:
usize
=
16
;
type
WorkUnit
<
N
>
=
ArrayVec
<
[
SendNode
<
N
>
;
WORK_UNIT_MAX
]
>
;
#
[
allow
(
unsafe_code
)
]
pub
fn
traverse_dom
<
E
D
>
(
traversal
:
&
D
root
:
E
token
:
PreTraverseToken
pool
:
&
rayon
:
:
ThreadPool
)
where
E
:
TElement
D
:
DomTraversal
<
E
>
{
let
dump_stats
=
traversal
.
shared_context
(
)
.
options
.
dump_style_statistics
;
let
start_time
=
if
dump_stats
{
Some
(
time
:
:
precise_time_s
(
)
)
}
else
{
None
}
;
let
mut
nodes
=
SmallVec
:
:
<
[
SendNode
<
E
:
:
ConcreteNode
>
;
8
]
>
:
:
new
(
)
;
debug_assert
!
(
traversal
.
is_parallel
(
)
)
;
let
depth
=
if
token
.
traverse_unstyled_children_only
(
)
{
debug_assert
!
(
!
D
:
:
needs_postorder_traversal
(
)
)
;
for
kid
in
root
.
as_node
(
)
.
traversal_children
(
)
{
if
kid
.
as_element
(
)
.
map_or
(
false
|
el
|
el
.
get_data
(
)
.
is_none
(
)
)
{
nodes
.
push
(
unsafe
{
SendNode
:
:
new
(
kid
)
}
)
;
}
}
root
.
depth
(
)
+
1
}
else
{
nodes
.
push
(
unsafe
{
SendNode
:
:
new
(
root
.
as_node
(
)
)
}
)
;
root
.
depth
(
)
}
;
if
nodes
.
is_empty
(
)
{
return
;
}
let
traversal_data
=
PerLevelTraversalData
{
current_dom_depth
:
depth
}
;
let
tls
=
ScopedTLS
:
:
<
D
:
:
ThreadLocalContext
>
:
:
new
(
pool
)
;
let
root
=
root
.
as_node
(
)
.
opaque
(
)
;
pool
.
install
(
|
|
{
rayon
:
:
scope
(
|
scope
|
{
let
nodes
=
nodes
;
traverse_nodes
(
&
*
nodes
DispatchMode
:
:
TailCall
root
traversal_data
scope
pool
traversal
&
tls
)
;
}
)
;
}
)
;
if
dump_stats
{
let
slots
=
unsafe
{
tls
.
unsafe_get
(
)
}
;
let
mut
aggregate
=
slots
.
iter
(
)
.
fold
(
TraversalStatistics
:
:
default
(
)
|
acc
t
|
{
match
*
t
.
borrow
(
)
{
None
=
>
acc
Some
(
ref
cx
)
=
>
&
cx
.
borrow
(
)
.
statistics
+
&
acc
}
}
)
;
aggregate
.
finish
(
traversal
start_time
.
unwrap
(
)
)
;
if
aggregate
.
is_large_traversal
(
)
{
println
!
(
"
{
}
"
aggregate
)
;
}
}
}
#
[
inline
(
never
)
]
fn
create_thread_local_context
<
'
scope
E
D
>
(
traversal
:
&
'
scope
D
slot
:
&
mut
Option
<
D
:
:
ThreadLocalContext
>
)
where
E
:
TElement
+
'
scope
D
:
DomTraversal
<
E
>
{
*
slot
=
Some
(
traversal
.
create_thread_local_context
(
)
)
}
#
[
inline
(
always
)
]
#
[
allow
(
unsafe_code
)
]
fn
top_down_dom
<
'
a
'
scope
E
D
>
(
nodes
:
&
'
a
[
SendNode
<
E
:
:
ConcreteNode
>
]
root
:
OpaqueNode
mut
traversal_data
:
PerLevelTraversalData
scope
:
&
'
a
rayon
:
:
Scope
<
'
scope
>
pool
:
&
'
scope
rayon
:
:
ThreadPool
traversal
:
&
'
scope
D
tls
:
&
'
scope
ScopedTLS
<
'
scope
D
:
:
ThreadLocalContext
>
)
where
E
:
TElement
+
'
scope
D
:
DomTraversal
<
E
>
{
debug_assert
!
(
nodes
.
len
(
)
<
=
WORK_UNIT_MAX
)
;
let
mut
discovered_child_nodes
=
SmallVec
:
:
<
[
SendNode
<
E
:
:
ConcreteNode
>
;
128
]
>
:
:
new
(
)
;
{
let
mut
tlc
=
tls
.
ensure
(
|
slot
:
&
mut
Option
<
D
:
:
ThreadLocalContext
>
|
create_thread_local_context
(
traversal
slot
)
)
;
for
n
in
nodes
{
if
!
discovered_child_nodes
.
is_empty
(
)
{
let
children
=
mem
:
:
replace
(
&
mut
discovered_child_nodes
Default
:
:
default
(
)
)
;
let
mut
traversal_data_copy
=
traversal_data
.
clone
(
)
;
traversal_data_copy
.
current_dom_depth
+
=
1
;
traverse_nodes
(
&
*
children
DispatchMode
:
:
NotTailCall
root
traversal_data_copy
scope
pool
traversal
tls
)
;
}
let
node
=
*
*
n
;
let
mut
children_to_process
=
0isize
;
traversal
.
process_preorder
(
&
traversal_data
&
mut
*
tlc
node
)
;
if
let
Some
(
el
)
=
node
.
as_element
(
)
{
traversal
.
traverse_children
(
&
mut
*
tlc
el
|
_tlc
kid
|
{
children_to_process
+
=
1
;
discovered_child_nodes
.
push
(
unsafe
{
SendNode
:
:
new
(
kid
)
}
)
}
)
;
}
traversal
.
handle_postorder_traversal
(
&
mut
*
tlc
root
node
children_to_process
)
;
}
}
if
!
discovered_child_nodes
.
is_empty
(
)
{
traversal_data
.
current_dom_depth
+
=
1
;
traverse_nodes
(
&
discovered_child_nodes
DispatchMode
:
:
TailCall
root
traversal_data
scope
pool
traversal
tls
)
;
}
}
#
[
derive
(
Clone
Copy
PartialEq
)
]
enum
DispatchMode
{
TailCall
NotTailCall
}
impl
DispatchMode
{
fn
is_tail_call
(
&
self
)
-
>
bool
{
matches
!
(
*
self
DispatchMode
:
:
TailCall
)
}
}
#
[
inline
]
fn
traverse_nodes
<
'
a
'
scope
E
D
>
(
nodes
:
&
[
SendNode
<
E
:
:
ConcreteNode
>
]
mode
:
DispatchMode
root
:
OpaqueNode
traversal_data
:
PerLevelTraversalData
scope
:
&
'
a
rayon
:
:
Scope
<
'
scope
>
pool
:
&
'
scope
rayon
:
:
ThreadPool
traversal
:
&
'
scope
D
tls
:
&
'
scope
ScopedTLS
<
'
scope
D
:
:
ThreadLocalContext
>
)
where
E
:
TElement
+
'
scope
D
:
DomTraversal
<
E
>
{
debug_assert
!
(
!
nodes
.
is_empty
(
)
)
;
let
may_dispatch_tail
=
mode
.
is_tail_call
(
)
&
&
!
pool
.
current_thread_has_pending_tasks
(
)
.
unwrap
(
)
;
if
nodes
.
len
(
)
<
=
WORK_UNIT_MAX
{
let
work
=
nodes
.
iter
(
)
.
cloned
(
)
.
collect
:
:
<
WorkUnit
<
E
:
:
ConcreteNode
>
>
(
)
;
if
may_dispatch_tail
{
top_down_dom
(
&
work
root
traversal_data
scope
pool
traversal
tls
)
;
}
else
{
scope
.
spawn
(
move
|
scope
|
{
let
work
=
work
;
top_down_dom
(
&
work
root
traversal_data
scope
pool
traversal
tls
)
;
}
)
;
}
}
else
{
for
chunk
in
nodes
.
chunks
(
WORK_UNIT_MAX
)
{
let
nodes
=
chunk
.
iter
(
)
.
cloned
(
)
.
collect
:
:
<
WorkUnit
<
E
:
:
ConcreteNode
>
>
(
)
;
let
traversal_data_copy
=
traversal_data
.
clone
(
)
;
scope
.
spawn
(
move
|
scope
|
{
let
n
=
nodes
;
top_down_dom
(
&
*
n
root
traversal_data_copy
scope
pool
traversal
tls
)
}
)
;
}
}
}
