use
legacy
:
:
{
IntegerAttribute
LengthAttribute
}
;
use
selectors
:
:
AttrSelector
;
use
servo_util
:
:
str
:
:
LengthOrPercentageOrAuto
;
use
string_cache
:
:
{
Atom
Namespace
}
;
pub
trait
TNode
<
'
a
E
:
TElement
<
'
a
>
>
:
Clone
+
Copy
{
fn
parent_node
(
self
)
-
>
Option
<
Self
>
;
fn
first_child
(
self
)
-
>
Option
<
Self
>
;
fn
prev_sibling
(
self
)
-
>
Option
<
Self
>
;
fn
next_sibling
(
self
)
-
>
Option
<
Self
>
;
fn
is_document
(
self
)
-
>
bool
;
fn
is_element
(
self
)
-
>
bool
;
fn
as_element
(
self
)
-
>
E
;
fn
match_attr
(
self
attr
:
&
AttrSelector
test
:
|
&
str
|
-
>
bool
)
-
>
bool
;
fn
is_html_element_in_html_document
(
self
)
-
>
bool
;
fn
is_dirty
(
self
)
-
>
bool
;
unsafe
fn
set_dirty
(
self
value
:
bool
)
;
fn
has_dirty_descendants
(
self
)
-
>
bool
;
unsafe
fn
set_dirty_descendants
(
self
value
:
bool
)
;
}
pub
trait
TElement
<
'
a
>
:
Copy
{
fn
get_attr
(
self
namespace
:
&
Namespace
attr
:
&
Atom
)
-
>
Option
<
&
'
a
str
>
;
fn
get_attrs
(
self
attr
:
&
Atom
)
-
>
Vec
<
&
'
a
str
>
;
fn
get_link
(
self
)
-
>
Option
<
&
'
a
str
>
;
fn
get_local_name
(
self
)
-
>
&
'
a
Atom
;
fn
get_namespace
(
self
)
-
>
&
'
a
Namespace
;
fn
get_hover_state
(
self
)
-
>
bool
;
fn
get_id
(
self
)
-
>
Option
<
Atom
>
;
fn
get_disabled_state
(
self
)
-
>
bool
;
fn
get_enabled_state
(
self
)
-
>
bool
;
fn
has_class
(
self
name
:
&
Atom
)
-
>
bool
;
fn
each_class
(
self
callback
:
|
&
Atom
|
)
;
}
pub
trait
TElementAttributes
:
Copy
{
fn
get_length_attribute
(
self
attribute
:
LengthAttribute
)
-
>
LengthOrPercentageOrAuto
;
fn
get_integer_attribute
(
self
attribute
:
IntegerAttribute
)
-
>
Option
<
i32
>
;
}
