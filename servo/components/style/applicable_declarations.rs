use
crate
:
:
properties
:
:
PropertyDeclarationBlock
;
use
crate
:
:
rule_tree
:
:
{
CascadeLevel
StyleSource
}
;
use
crate
:
:
shared_lock
:
:
Locked
;
use
servo_arc
:
:
Arc
;
use
smallvec
:
:
SmallVec
;
pub
type
ApplicableDeclarationList
=
SmallVec
<
[
ApplicableDeclarationBlock
;
16
]
>
;
#
[
derive
(
Clone
Copy
Eq
MallocSizeOf
PartialEq
Debug
)
]
struct
ApplicableDeclarationBits
{
source_order
:
u32
cascade_level
:
CascadeLevel
}
impl
ApplicableDeclarationBits
{
fn
new
(
source_order
:
u32
cascade_level
:
CascadeLevel
)
-
>
Self
{
Self
{
source_order
cascade_level
}
}
fn
source_order
(
&
self
)
-
>
u32
{
self
.
source_order
}
fn
level
(
&
self
)
-
>
CascadeLevel
{
self
.
cascade_level
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
)
]
pub
struct
ApplicableDeclarationBlock
{
#
[
ignore_malloc_size_of
=
"
Arc
"
]
pub
source
:
StyleSource
bits
:
ApplicableDeclarationBits
pub
specificity
:
u32
}
impl
ApplicableDeclarationBlock
{
#
[
inline
]
pub
fn
from_declarations
(
declarations
:
Arc
<
Locked
<
PropertyDeclarationBlock
>
>
level
:
CascadeLevel
)
-
>
Self
{
ApplicableDeclarationBlock
{
source
:
StyleSource
:
:
from_declarations
(
declarations
)
bits
:
ApplicableDeclarationBits
:
:
new
(
0
level
)
specificity
:
0
}
}
#
[
inline
]
pub
fn
new
(
source
:
StyleSource
order
:
u32
level
:
CascadeLevel
specificity
:
u32
)
-
>
Self
{
ApplicableDeclarationBlock
{
source
bits
:
ApplicableDeclarationBits
:
:
new
(
order
level
)
specificity
}
}
#
[
inline
]
pub
fn
source_order
(
&
self
)
-
>
u32
{
self
.
bits
.
source_order
(
)
}
#
[
inline
]
pub
fn
level
(
&
self
)
-
>
CascadeLevel
{
self
.
bits
.
level
(
)
}
#
[
inline
]
pub
fn
for_rule_tree
(
self
)
-
>
(
StyleSource
CascadeLevel
)
{
let
level
=
self
.
level
(
)
;
(
self
.
source
level
)
}
}
