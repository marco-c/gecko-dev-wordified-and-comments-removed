use
crate
:
:
properties
:
:
PropertyDeclarationBlock
;
use
crate
:
:
rule_tree
:
:
{
CascadeLevel
StyleSource
}
;
use
crate
:
:
stylesheets
:
:
layer_rule
:
:
LayerOrder
;
use
crate
:
:
shared_lock
:
:
Locked
;
use
servo_arc
:
:
Arc
;
use
smallvec
:
:
SmallVec
;
pub
type
ApplicableDeclarationList
=
SmallVec
<
[
ApplicableDeclarationBlock
;
16
]
>
;
const
SOURCE_ORDER_SHIFT
:
usize
=
0
;
const
SOURCE_ORDER_BITS
:
usize
=
24
;
const
SOURCE_ORDER_MAX
:
u32
=
(
1
<
<
SOURCE_ORDER_BITS
)
-
1
;
const
SOURCE_ORDER_MASK
:
u32
=
SOURCE_ORDER_MAX
<
<
SOURCE_ORDER_SHIFT
;
const
CASCADE_LEVEL_SHIFT
:
usize
=
SOURCE_ORDER_BITS
;
#
[
derive
(
Clone
Copy
Debug
Eq
MallocSizeOf
PartialEq
)
]
struct
ApplicableDeclarationBits
(
u32
)
;
impl
ApplicableDeclarationBits
{
fn
new
(
source_order
:
u32
cascade_level
:
CascadeLevel
)
-
>
Self
{
Self
(
(
source_order
&
SOURCE_ORDER_MASK
)
|
(
(
cascade_level
.
to_byte_lossy
(
)
as
u32
)
<
<
CASCADE_LEVEL_SHIFT
)
)
}
fn
source_order
(
&
self
)
-
>
u32
{
self
.
0
&
SOURCE_ORDER_MASK
}
fn
level
(
&
self
)
-
>
CascadeLevel
{
CascadeLevel
:
:
from_byte
(
(
self
.
0
>
>
CASCADE_LEVEL_SHIFT
)
as
u8
)
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
)
]
pub
struct
ApplicableDeclarationBlock
{
#
[
ignore_malloc_size_of
=
"
Arc
"
]
pub
source
:
StyleSource
bits
:
ApplicableDeclarationBits
pub
specificity
:
u32
pub
layer_order
:
LayerOrder
}
impl
ApplicableDeclarationBlock
{
#
[
inline
]
pub
fn
from_declarations
(
declarations
:
Arc
<
Locked
<
PropertyDeclarationBlock
>
>
level
:
CascadeLevel
)
-
>
Self
{
ApplicableDeclarationBlock
{
source
:
StyleSource
:
:
from_declarations
(
declarations
)
bits
:
ApplicableDeclarationBits
:
:
new
(
0
level
)
specificity
:
0
layer_order
:
LayerOrder
:
:
first
(
)
}
}
#
[
inline
]
pub
fn
new
(
source
:
StyleSource
source_order
:
u32
level
:
CascadeLevel
specificity
:
u32
layer_order
:
LayerOrder
)
-
>
Self
{
ApplicableDeclarationBlock
{
source
bits
:
ApplicableDeclarationBits
:
:
new
(
source_order
level
)
specificity
layer_order
}
}
#
[
inline
]
pub
fn
source_order
(
&
self
)
-
>
u32
{
self
.
bits
.
source_order
(
)
}
#
[
inline
]
pub
fn
level
(
&
self
)
-
>
CascadeLevel
{
self
.
bits
.
level
(
)
}
#
[
inline
]
pub
fn
for_rule_tree
(
self
)
-
>
(
StyleSource
CascadeLevel
)
{
let
level
=
self
.
level
(
)
;
(
self
.
source
level
)
}
}
