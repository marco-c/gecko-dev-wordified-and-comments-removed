use
properties
:
:
{
NonCustomPropertyId
NON_CUSTOM_PROPERTY_ID_COUNT
}
;
use
std
:
:
sync
:
:
atomic
:
:
AtomicUsize
;
use
std
:
:
sync
:
:
atomic
:
:
Ordering
;
#
[
cfg
(
target_pointer_width
=
"
64
"
)
]
const
BITS_PER_ENTRY
:
usize
=
64
;
#
[
cfg
(
target_pointer_width
=
"
32
"
)
]
const
BITS_PER_ENTRY
:
usize
=
32
;
#
[
derive
(
Default
)
]
pub
struct
NonCustomPropertyUseCounters
{
storage
:
[
AtomicUsize
;
(
NON_CUSTOM_PROPERTY_ID_COUNT
-
1
+
BITS_PER_ENTRY
)
/
BITS_PER_ENTRY
]
}
impl
NonCustomPropertyUseCounters
{
#
[
inline
(
always
)
]
fn
bucket_and_pattern
(
id
:
NonCustomPropertyId
)
-
>
(
usize
usize
)
{
let
bit
=
id
.
bit
(
)
;
let
bucket
=
bit
/
BITS_PER_ENTRY
;
let
bit_in_bucket
=
bit
%
BITS_PER_ENTRY
;
(
bucket
1
<
<
bit_in_bucket
)
}
#
[
inline
]
pub
fn
record
(
&
self
id
:
NonCustomPropertyId
)
{
let
(
bucket
pattern
)
=
Self
:
:
bucket_and_pattern
(
id
)
;
self
.
storage
[
bucket
]
.
fetch_or
(
pattern
Ordering
:
:
Relaxed
)
;
}
#
[
inline
]
pub
fn
recorded
(
&
self
id
:
NonCustomPropertyId
)
-
>
bool
{
let
(
bucket
pattern
)
=
Self
:
:
bucket_and_pattern
(
id
)
;
self
.
storage
[
bucket
]
.
load
(
Ordering
:
:
Relaxed
)
&
pattern
!
=
0
}
}
#
[
derive
(
Default
)
]
pub
struct
UseCounters
{
pub
non_custom_properties
:
NonCustomPropertyUseCounters
}
