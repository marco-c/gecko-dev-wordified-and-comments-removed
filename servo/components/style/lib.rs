#
!
[
cfg_attr
(
feature
=
"
servo
"
feature
(
proc_macro
)
)
]
#
!
[
deny
(
warnings
)
]
#
!
[
deny
(
missing_docs
)
]
#
!
[
allow
(
unused_unsafe
)
]
#
!
[
recursion_limit
=
"
500
"
]
extern
crate
app_units
;
#
[
allow
(
unused_extern_crates
)
]
#
[
macro_use
]
extern
crate
bitflags
;
#
[
macro_use
]
#
[
no_link
]
extern
crate
cfg_if
;
extern
crate
core
;
#
[
macro_use
]
extern
crate
cssparser
;
extern
crate
encoding
;
extern
crate
euclid
;
extern
crate
fnv
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
macro_use
]
pub
mod
gecko_string_cache
;
extern
crate
heapsize
;
#
[
cfg
(
feature
=
"
servo
"
)
]
#
[
macro_use
]
extern
crate
heapsize_derive
;
#
[
cfg
(
feature
=
"
servo
"
)
]
#
[
macro_use
]
extern
crate
html5ever_atoms
;
#
[
allow
(
unused_extern_crates
)
]
#
[
macro_use
]
extern
crate
lazy_static
;
#
[
macro_use
]
extern
crate
log
;
#
[
allow
(
unused_extern_crates
)
]
#
[
macro_use
]
extern
crate
matches
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
extern
crate
nsstring_vendor
as
nsstring
;
extern
crate
num_integer
;
extern
crate
num_traits
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
extern
crate
num_cpus
;
extern
crate
ordered_float
;
extern
crate
owning_ref
;
extern
crate
parking_lot
;
extern
crate
phf
;
extern
crate
quickersort
;
extern
crate
rayon
;
extern
crate
rustc_serialize
;
extern
crate
selectors
;
#
[
cfg
(
feature
=
"
servo
"
)
]
extern
crate
serde
;
#
[
cfg
(
feature
=
"
servo
"
)
]
#
[
macro_use
]
extern
crate
serde_derive
;
#
[
cfg
(
feature
=
"
servo
"
)
]
#
[
macro_use
]
extern
crate
servo_atoms
;
extern
crate
servo_config
;
extern
crate
servo_url
;
extern
crate
smallvec
;
#
[
macro_use
]
extern
crate
style_traits
;
extern
crate
time
;
#
[
allow
(
unused_extern_crates
)
]
extern
crate
unicode_segmentation
;
pub
mod
animation
;
pub
mod
atomic_refcell
;
#
[
allow
(
missing_docs
)
]
pub
mod
attr
;
pub
mod
bezier
;
pub
mod
bloom
;
pub
mod
cache
;
pub
mod
cascade_info
;
pub
mod
context
;
pub
mod
custom_properties
;
pub
mod
data
;
pub
mod
dom
;
pub
mod
element_state
;
pub
mod
error_reporting
;
pub
mod
font_face
;
pub
mod
font_metrics
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
allow
(
unsafe_code
)
]
pub
mod
gecko
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
allow
(
unsafe_code
)
]
pub
mod
gecko_bindings
;
pub
mod
keyframes
;
#
[
allow
(
missing_docs
)
]
pub
mod
logical_geometry
;
pub
mod
matching
;
#
[
allow
(
missing_docs
)
]
pub
mod
media_queries
;
pub
mod
owning_handle
;
pub
mod
parallel
;
pub
mod
parser
;
pub
mod
restyle_hints
;
pub
mod
rule_tree
;
pub
mod
scoped_tls
;
pub
mod
selector_parser
;
pub
mod
stylist
;
#
[
cfg
(
feature
=
"
servo
"
)
]
#
[
allow
(
unsafe_code
)
]
pub
mod
servo
;
pub
mod
sequential
;
pub
mod
sink
;
pub
mod
str
;
pub
mod
stylesheets
;
pub
mod
thread_state
;
pub
mod
timer
;
pub
mod
traversal
;
#
[
macro_use
]
#
[
allow
(
non_camel_case_types
)
]
pub
mod
values
;
pub
mod
viewport
;
use
std
:
:
fmt
;
use
std
:
:
sync
:
:
Arc
;
use
style_traits
:
:
ToCss
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
use
gecko_string_cache
as
string_cache
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
use
gecko_string_cache
:
:
Atom
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
use
gecko_string_cache
:
:
Namespace
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
use
gecko_string_cache
:
:
Atom
as
Prefix
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
use
gecko_string_cache
:
:
Atom
as
LocalName
;
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
use
servo_atoms
:
:
Atom
;
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
use
html5ever_atoms
:
:
Prefix
;
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
use
html5ever_atoms
:
:
LocalName
;
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
use
html5ever_atoms
:
:
Namespace
;
#
[
macro_use
]
#
[
allow
(
unsafe_code
)
]
#
[
deny
(
missing_docs
)
]
pub
mod
properties
{
include
!
(
concat
!
(
env
!
(
"
OUT_DIR
"
)
"
/
properties
.
rs
"
)
)
;
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
allow
(
unsafe_code
missing_docs
)
]
pub
mod
gecko_properties
{
include
!
(
concat
!
(
env
!
(
"
OUT_DIR
"
)
"
/
gecko_properties
.
rs
"
)
)
;
}
macro_rules
!
reexport_computed_values
{
(
(
name
:
ident
)
+
)
=
>
{
/
/
/
Types
for
[
computed
values
]
[
computed
]
.
/
/
/
/
/
/
[
computed
]
:
https
:
/
/
drafts
.
csswg
.
org
/
css
-
cascade
/
#
computed
pub
mod
computed_values
{
(
pub
use
properties
:
:
longhands
:
:
name
:
:
computed_value
as
name
;
)
+
/
/
Don
'
t
use
a
side
-
specific
name
needlessly
:
pub
use
properties
:
:
longhands
:
:
border_top_style
:
:
computed_value
as
border_style
;
}
}
}
longhand_properties_idents
!
(
reexport_computed_values
)
;
#
[
inline
]
pub
fn
arc_ptr_eq
<
T
:
'
static
>
(
a
:
&
Arc
<
T
>
b
:
&
Arc
<
T
>
)
-
>
bool
{
let
a
:
&
T
=
&
*
*
a
;
let
b
:
&
T
=
&
*
*
b
;
(
a
as
*
const
T
)
=
=
(
b
as
*
const
T
)
}
pub
fn
serialize_comma_separated_list
<
W
T
>
(
dest
:
&
mut
W
list
:
&
[
T
]
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
T
:
ToCss
{
if
list
.
is_empty
(
)
{
return
Ok
(
(
)
)
;
}
try
!
(
list
[
0
]
.
to_css
(
dest
)
)
;
for
item
in
list
.
iter
(
)
.
skip
(
1
)
{
try
!
(
write
!
(
dest
"
"
)
)
;
try
!
(
item
.
to_css
(
dest
)
)
;
}
Ok
(
(
)
)
}
