#
!
[
deny
(
missing_docs
)
]
use
crate
:
:
context
:
:
SharedStyleContext
;
use
crate
:
:
Atom
;
use
crate
:
:
values
:
:
computed
:
:
Length
;
#
[
derive
(
Clone
Debug
Default
PartialEq
)
]
pub
struct
FontMetrics
{
pub
x_height
:
Option
<
Length
>
pub
zero_advance_measure
:
Option
<
Length
>
}
#
[
derive
(
Clone
Debug
PartialEq
)
]
pub
enum
FontMetricsOrientation
{
MatchContext
Horizontal
}
pub
trait
FontMetricsProvider
{
fn
query
(
&
self
_context
:
&
crate
:
:
values
:
:
computed
:
:
Context
_base_size
:
crate
:
:
values
:
:
specified
:
:
length
:
:
FontBaseSize
_orientation
:
FontMetricsOrientation
)
-
>
FontMetrics
{
Default
:
:
default
(
)
}
fn
get_size
(
&
self
font_name
:
&
Atom
font_family
:
crate
:
:
values
:
:
computed
:
:
font
:
:
GenericFontFamily
)
-
>
Length
;
fn
create_from
(
context
:
&
SharedStyleContext
)
-
>
Self
where
Self
:
Sized
;
}
#
[
derive
(
Debug
)
]
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
struct
ServoMetricsProvider
;
#
[
cfg
(
feature
=
"
servo
"
)
]
impl
FontMetricsProvider
for
ServoMetricsProvider
{
fn
create_from
(
_
:
&
SharedStyleContext
)
-
>
Self
{
ServoMetricsProvider
}
fn
get_size
(
&
self
_
:
&
Atom
_
:
crate
:
:
values
:
:
computed
:
:
font
:
:
GenericFontFamily
)
-
>
Length
{
unreachable
!
(
"
Dummy
provider
should
never
be
used
to
compute
font
size
"
)
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
fn
get_metrics_provider_for_product
(
)
-
>
crate
:
:
gecko
:
:
wrapper
:
:
GeckoFontMetricsProvider
{
crate
:
:
gecko
:
:
wrapper
:
:
GeckoFontMetricsProvider
:
:
new
(
)
}
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
fn
get_metrics_provider_for_product
(
)
-
>
ServoMetricsProvider
{
ServoMetricsProvider
}
