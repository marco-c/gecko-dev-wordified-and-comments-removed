#
!
[
deny
(
missing_docs
)
]
use
app_units
:
:
Au
;
use
crate
:
:
context
:
:
SharedStyleContext
;
use
crate
:
:
logical_geometry
:
:
WritingMode
;
use
crate
:
:
media_queries
:
:
Device
;
use
crate
:
:
properties
:
:
style_structs
:
:
Font
;
use
crate
:
:
Atom
;
#
[
derive
(
Clone
Debug
PartialEq
)
]
pub
struct
FontMetrics
{
pub
x_height
:
Au
pub
zero_advance_measure
:
Au
}
#
[
derive
(
Clone
Debug
PartialEq
)
]
pub
enum
FontMetricsQueryResult
{
Available
(
FontMetrics
)
NotAvailable
}
pub
trait
FontMetricsProvider
{
fn
query
(
&
self
_font
:
&
Font
_font_size
:
Au
_wm
:
WritingMode
_in_media_query
:
bool
_device
:
&
Device
)
-
>
FontMetricsQueryResult
{
FontMetricsQueryResult
:
:
NotAvailable
}
fn
get_size
(
&
self
font_name
:
&
Atom
font_family
:
u8
)
-
>
Au
;
fn
create_from
(
context
:
&
SharedStyleContext
)
-
>
Self
where
Self
:
Sized
;
}
#
[
derive
(
Debug
)
]
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
struct
ServoMetricsProvider
;
#
[
cfg
(
feature
=
"
servo
"
)
]
impl
FontMetricsProvider
for
ServoMetricsProvider
{
fn
create_from
(
_
:
&
SharedStyleContext
)
-
>
Self
{
ServoMetricsProvider
}
fn
get_size
(
&
self
_font_name
:
&
Atom
_font_family
:
u8
)
-
>
Au
{
unreachable
!
(
"
Dummy
provider
should
never
be
used
to
compute
font
size
"
)
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
fn
get_metrics_provider_for_product
(
)
-
>
crate
:
:
gecko
:
:
wrapper
:
:
GeckoFontMetricsProvider
{
crate
:
:
gecko
:
:
wrapper
:
:
GeckoFontMetricsProvider
:
:
new
(
)
}
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
fn
get_metrics_provider_for_product
(
)
-
>
ServoMetricsProvider
{
ServoMetricsProvider
}
