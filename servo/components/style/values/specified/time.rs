use
cssparser
:
:
{
Parser
Token
}
;
use
parser
:
:
{
Parse
ParserContext
}
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ParseError
StyleParseErrorKind
ToCss
}
;
use
style_traits
:
:
values
:
:
specified
:
:
AllowedNumericType
;
use
values
:
:
CSSFloat
;
use
values
:
:
computed
:
:
{
Context
ToComputedValue
}
;
use
values
:
:
computed
:
:
time
:
:
Time
as
ComputedTime
;
use
values
:
:
specified
:
:
calc
:
:
CalcNode
;
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
)
]
pub
struct
Time
{
seconds
:
CSSFloat
unit
:
TimeUnit
was_calc
:
bool
}
#
[
derive
(
Clone
Copy
Debug
Eq
MallocSizeOf
PartialEq
)
]
pub
enum
TimeUnit
{
Second
Millisecond
}
impl
Time
{
pub
fn
from_seconds
(
seconds
:
CSSFloat
)
-
>
Self
{
Time
{
seconds
unit
:
TimeUnit
:
:
Second
was_calc
:
false
}
}
pub
fn
zero
(
)
-
>
Self
{
Self
:
:
from_seconds
(
0
.
0
)
}
pub
fn
seconds
(
self
)
-
>
CSSFloat
{
self
.
seconds
}
pub
fn
parse_dimension
(
value
:
CSSFloat
unit
:
&
str
was_calc
:
bool
)
-
>
Result
<
Time
(
)
>
{
let
(
seconds
unit
)
=
match_ignore_ascii_case
!
{
unit
"
s
"
=
>
(
value
TimeUnit
:
:
Second
)
"
ms
"
=
>
(
value
/
1000
.
0
TimeUnit
:
:
Millisecond
)
_
=
>
return
Err
(
(
)
)
}
;
Ok
(
Time
{
seconds
unit
was_calc
}
)
}
pub
fn
from_calc
(
seconds
:
CSSFloat
)
-
>
Self
{
Time
{
seconds
:
seconds
unit
:
TimeUnit
:
:
Second
was_calc
:
true
}
}
fn
parse_with_clamping_mode
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
clamping_mode
:
AllowedNumericType
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
use
style_traits
:
:
ParsingMode
;
let
location
=
input
.
current_source_location
(
)
;
match
input
.
next
(
)
{
Ok
(
&
Token
:
:
Dimension
{
value
ref
unit
.
.
}
)
if
clamping_mode
.
is_ok
(
ParsingMode
:
:
DEFAULT
value
)
=
>
{
return
Time
:
:
parse_dimension
(
value
unit
false
)
.
map_err
(
|
(
)
|
location
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
;
}
Ok
(
&
Token
:
:
Function
(
ref
name
)
)
if
name
.
eq_ignore_ascii_case
(
"
calc
"
)
=
>
{
}
Ok
(
t
)
=
>
return
Err
(
location
.
new_unexpected_token_error
(
t
.
clone
(
)
)
)
Err
(
e
)
=
>
return
Err
(
e
.
into
(
)
)
}
match
input
.
parse_nested_block
(
|
i
|
CalcNode
:
:
parse_time
(
context
i
)
)
{
Ok
(
time
)
if
clamping_mode
.
is_ok
(
ParsingMode
:
:
DEFAULT
time
.
seconds
)
=
>
Ok
(
time
)
_
=
>
Err
(
input
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
}
}
pub
fn
parse_non_negative
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
Self
:
:
parse_with_clamping_mode
(
context
input
AllowedNumericType
:
:
NonNegative
)
}
}
impl
ToComputedValue
for
Time
{
type
ComputedValue
=
ComputedTime
;
fn
to_computed_value
(
&
self
_context
:
&
Context
)
-
>
Self
:
:
ComputedValue
{
ComputedTime
:
:
from_seconds
(
self
.
seconds
(
)
)
}
fn
from_computed_value
(
computed
:
&
Self
:
:
ComputedValue
)
-
>
Self
{
Time
{
seconds
:
computed
.
seconds
(
)
unit
:
TimeUnit
:
:
Second
was_calc
:
false
}
}
}
impl
Parse
for
Time
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
Self
:
:
parse_with_clamping_mode
(
context
input
AllowedNumericType
:
:
All
)
}
}
impl
ToCss
for
Time
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
if
self
.
was_calc
{
dest
.
write_str
(
"
calc
(
"
)
?
;
}
match
self
.
unit
{
TimeUnit
:
:
Second
=
>
{
self
.
seconds
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
s
"
)
?
;
}
TimeUnit
:
:
Millisecond
=
>
{
(
self
.
seconds
*
1000
.
)
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
ms
"
)
?
;
}
}
if
self
.
was_calc
{
dest
.
write_str
(
"
)
"
)
?
;
}
Ok
(
(
)
)
}
}
