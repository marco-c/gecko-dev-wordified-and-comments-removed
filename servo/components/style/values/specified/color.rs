use
super
:
:
AllowQuirks
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
crate
:
:
gecko_bindings
:
:
structs
:
:
nscolor
;
use
crate
:
:
parser
:
:
{
Parse
ParserContext
}
;
use
crate
:
:
values
:
:
computed
:
:
{
Color
as
ComputedColor
Context
ToComputedValue
}
;
use
crate
:
:
values
:
:
generics
:
:
color
:
:
{
GenericCaretColor
GenericColorOrAuto
}
;
use
crate
:
:
values
:
:
specified
:
:
calc
:
:
CalcNode
;
use
crate
:
:
values
:
:
specified
:
:
Percentage
;
use
crate
:
:
values
:
:
CustomIdent
;
use
cssparser
:
:
{
AngleOrNumber
Color
as
CSSParserColor
Parser
Token
RGBA
}
;
use
cssparser
:
:
{
BasicParseErrorKind
NumberOrPercentage
ParseErrorKind
}
;
use
itoa
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
std
:
:
io
:
:
Write
as
IoWrite
;
use
style_traits
:
:
{
CssType
CssWriter
KeywordsCollectFn
ParseError
StyleParseErrorKind
}
;
use
style_traits
:
:
{
SpecifiedValueInfo
ToCss
ValueParseErrorKind
}
;
#
[
derive
(
Clone
Copy
Debug
Eq
MallocSizeOf
Parse
PartialEq
ToCss
ToShmem
)
]
pub
enum
ColorSpaceKind
{
Srgb
Xyz
Lab
Lch
}
#
[
derive
(
Clone
Copy
Debug
Eq
MallocSizeOf
Parse
PartialEq
ToCss
ToShmem
)
]
pub
enum
HueAdjuster
{
Shorter
Longer
Increasing
Decreasing
Specified
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
ToShmem
)
]
#
[
allow
(
missing_docs
)
]
pub
struct
ColorMix
{
pub
color_space
:
ColorSpaceKind
pub
left
:
Color
pub
left_percentage
:
Percentage
pub
right
:
Color
pub
right_percentage
:
Percentage
pub
hue_adjuster
:
HueAdjuster
}
impl
Parse
for
ColorMix
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
let
enabled
=
context
.
chrome_rules_enabled
(
)
|
|
static_prefs
:
:
pref
!
(
"
layout
.
css
.
color
-
mix
.
enabled
"
)
;
if
!
enabled
{
return
Err
(
input
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
;
}
let
color_spaces_enabled
=
context
.
chrome_rules_enabled
(
)
|
|
static_prefs
:
:
pref
!
(
"
layout
.
css
.
color
-
mix
.
color
-
spaces
.
enabled
"
)
;
input
.
expect_function_matching
(
"
color
-
mix
"
)
?
;
input
.
parse_nested_block
(
|
input
|
{
input
.
expect_ident_matching
(
"
in
"
)
?
;
let
color_space
=
if
color_spaces_enabled
{
ColorSpaceKind
:
:
parse
(
input
)
?
}
else
{
input
.
expect_ident_matching
(
"
srgb
"
)
?
;
ColorSpaceKind
:
:
Srgb
}
;
input
.
expect_comma
(
)
?
;
let
left
=
Color
:
:
parse
(
context
input
)
?
;
let
left_percentage
=
input
.
try_parse
(
|
input
|
Percentage
:
:
parse
(
context
input
)
)
.
ok
(
)
;
input
.
expect_comma
(
)
?
;
let
right
=
Color
:
:
parse
(
context
input
)
?
;
let
right_percentage
=
input
.
try_parse
(
|
input
|
Percentage
:
:
parse
(
context
input
)
)
.
unwrap_or_else
(
|
_
|
{
Percentage
:
:
new
(
1
.
0
-
left_percentage
.
map_or
(
0
.
5
|
p
|
p
.
get
(
)
)
)
}
)
;
let
left_percentage
=
left_percentage
.
unwrap_or_else
(
|
|
Percentage
:
:
new
(
1
.
0
-
right_percentage
.
get
(
)
)
)
;
let
hue_adjuster
=
input
.
try_parse
(
|
input
|
HueAdjuster
:
:
parse
(
input
)
)
.
unwrap_or
(
HueAdjuster
:
:
Shorter
)
;
Ok
(
ColorMix
{
color_space
left
left_percentage
right
right_percentage
hue_adjuster
}
)
}
)
}
}
impl
ToCss
for
ColorMix
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
fn
can_omit
(
percent
:
&
Percentage
other
:
&
Percentage
is_left
:
bool
)
-
>
bool
{
if
percent
.
is_calc
(
)
{
return
false
;
}
if
percent
.
get
(
)
=
=
0
.
5
{
return
other
.
get
(
)
=
=
0
.
5
;
}
if
is_left
{
return
false
;
}
(
1
.
0
-
percent
.
get
(
)
-
other
.
get
(
)
)
.
abs
(
)
<
=
f32
:
:
EPSILON
}
dest
.
write_str
(
"
color
-
mix
(
in
"
)
?
;
self
.
color_space
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
"
)
?
;
self
.
left
.
to_css
(
dest
)
?
;
if
!
can_omit
(
&
self
.
left_percentage
&
self
.
right_percentage
true
)
{
dest
.
write_str
(
"
"
)
?
;
self
.
left_percentage
.
to_css
(
dest
)
?
;
}
dest
.
write_str
(
"
"
)
?
;
self
.
right
.
to_css
(
dest
)
?
;
if
!
can_omit
(
&
self
.
right_percentage
&
self
.
left_percentage
false
)
{
dest
.
write_str
(
"
"
)
?
;
self
.
right_percentage
.
to_css
(
dest
)
?
;
}
if
self
.
hue_adjuster
!
=
HueAdjuster
:
:
Shorter
{
dest
.
write_str
(
"
"
)
?
;
self
.
hue_adjuster
.
to_css
(
dest
)
?
;
}
dest
.
write_str
(
"
)
"
)
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
ToShmem
)
]
pub
enum
Color
{
CurrentColor
Numeric
{
parsed
:
RGBA
authored
:
Option
<
Box
<
str
>
>
}
Complex
(
ComputedColor
)
#
[
cfg
(
feature
=
"
gecko
"
)
]
System
(
SystemColor
)
ColorMix
(
Box
<
ColorMix
>
)
#
[
cfg
(
feature
=
"
gecko
"
)
]
InheritFromBodyQuirk
}
#
[
allow
(
missing_docs
)
]
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
Parse
PartialEq
ToCss
ToShmem
)
]
#
[
repr
(
u8
)
]
pub
enum
SystemColor
{
#
[
css
(
skip
)
]
WindowBackground
#
[
css
(
skip
)
]
WindowForeground
#
[
css
(
skip
)
]
WidgetBackground
#
[
css
(
skip
)
]
WidgetForeground
#
[
css
(
skip
)
]
WidgetSelectBackground
#
[
css
(
skip
)
]
WidgetSelectForeground
#
[
css
(
skip
)
]
Widget3DHighlight
#
[
css
(
skip
)
]
Widget3DShadow
#
[
css
(
skip
)
]
TextBackground
#
[
css
(
skip
)
]
TextForeground
#
[
parse
(
condition
=
"
ParserContext
:
:
in_ua_or_chrome_sheet
"
)
]
TextSelectBackgroundDisabled
#
[
parse
(
condition
=
"
ParserContext
:
:
in_ua_or_chrome_sheet
"
)
]
TextSelectBackgroundAttention
#
[
css
(
skip
)
]
TextHighlightBackground
#
[
css
(
skip
)
]
TextHighlightForeground
#
[
css
(
skip
)
]
IMERawInputBackground
#
[
css
(
skip
)
]
IMERawInputForeground
#
[
css
(
skip
)
]
IMERawInputUnderline
#
[
css
(
skip
)
]
IMESelectedRawTextBackground
#
[
css
(
skip
)
]
IMESelectedRawTextForeground
#
[
css
(
skip
)
]
IMESelectedRawTextUnderline
#
[
css
(
skip
)
]
IMEConvertedTextBackground
#
[
css
(
skip
)
]
IMEConvertedTextForeground
#
[
css
(
skip
)
]
IMEConvertedTextUnderline
#
[
css
(
skip
)
]
IMESelectedConvertedTextBackground
#
[
css
(
skip
)
]
IMESelectedConvertedTextForeground
#
[
css
(
skip
)
]
IMESelectedConvertedTextUnderline
#
[
css
(
skip
)
]
SpellCheckerUnderline
#
[
css
(
skip
)
]
ThemedScrollbar
#
[
css
(
skip
)
]
ThemedScrollbarInactive
#
[
css
(
skip
)
]
ThemedScrollbarThumb
#
[
css
(
skip
)
]
ThemedScrollbarThumbHover
#
[
css
(
skip
)
]
ThemedScrollbarThumbActive
#
[
css
(
skip
)
]
ThemedScrollbarThumbInactive
Activeborder
Activecaption
Appworkspace
Background
Buttonface
Buttonhighlight
Buttonshadow
Buttontext
Captiontext
#
[
parse
(
aliases
=
"
-
moz
-
field
"
)
]
Field
#
[
parse
(
condition
=
"
ParserContext
:
:
in_ua_or_chrome_sheet
"
)
]
MozDisabledfield
#
[
parse
(
aliases
=
"
-
moz
-
fieldtext
"
)
]
Fieldtext
Graytext
Highlight
Highlighttext
Inactiveborder
Inactivecaption
Inactivecaptiontext
Infobackground
Infotext
Menu
Menutext
Scrollbar
Threeddarkshadow
Threedface
Threedhighlight
Threedlightshadow
Threedshadow
Window
Windowframe
Windowtext
MozButtondefault
#
[
parse
(
aliases
=
"
-
moz
-
default
-
color
"
)
]
Canvastext
#
[
parse
(
aliases
=
"
-
moz
-
default
-
background
-
color
"
)
]
Canvas
MozDialog
MozDialogtext
MozDragtargetzone
#
[
parse
(
aliases
=
"
-
moz
-
html
-
cellhighlight
"
)
]
MozCellhighlight
#
[
parse
(
aliases
=
"
-
moz
-
html
-
cellhighlighttext
"
)
]
MozCellhighlighttext
Selecteditem
Selecteditemtext
MozButtonhoverface
MozButtonhovertext
MozMenuhover
MozMenuhovertext
MozMenubartext
MozMenubarhovertext
MozEventreerow
MozOddtreerow
#
[
parse
(
condition
=
"
ParserContext
:
:
in_ua_or_chrome_sheet
"
)
]
MozButtonactivetext
#
[
parse
(
condition
=
"
ParserContext
:
:
in_ua_or_chrome_sheet
"
)
]
MozButtonactiveface
#
[
parse
(
condition
=
"
ParserContext
:
:
in_ua_or_chrome_sheet
"
)
]
MozButtondisabledface
MozMacChromeActive
MozMacChromeInactive
MozMacDefaultbuttontext
MozMacFocusring
MozMacMenuselect
MozMacMenushadow
MozMacMenutextdisable
MozMacMenutextselect
MozMacDisabledtoolbartext
MozMacSecondaryhighlight
MozMacVibrantTitlebarLight
MozMacVibrantTitlebarDark
MozMacMenupopup
MozMacMenuitem
MozMacActiveMenuitem
MozMacSourceList
MozMacSourceListSelection
MozMacActiveSourceListSelection
MozMacTooltip
#
[
parse
(
condition
=
"
ParserContext
:
:
in_ua_or_chrome_sheet
"
)
]
MozAccentColor
#
[
parse
(
condition
=
"
ParserContext
:
:
in_ua_or_chrome_sheet
"
)
]
MozAccentColorForeground
MozWinMediatext
MozWinCommunicationstext
MozNativehyperlinktext
#
[
css
(
skip
)
]
MozNativevisitedhyperlinktext
#
[
parse
(
aliases
=
"
-
moz
-
hyperlinktext
"
)
]
Linktext
#
[
parse
(
aliases
=
"
-
moz
-
activehyperlinktext
"
)
]
Activetext
#
[
parse
(
aliases
=
"
-
moz
-
visitedhyperlinktext
"
)
]
Visitedtext
MozComboboxtext
MozCombobox
#
[
parse
(
condition
=
"
ParserContext
:
:
in_ua_or_chrome_sheet
"
)
]
MozColheadertext
#
[
parse
(
condition
=
"
ParserContext
:
:
in_ua_or_chrome_sheet
"
)
]
MozColheaderhovertext
#
[
parse
(
condition
=
"
ParserContext
:
:
in_ua_or_chrome_sheet
"
)
]
MozGtkTitlebarText
#
[
parse
(
condition
=
"
ParserContext
:
:
in_ua_or_chrome_sheet
"
)
]
MozGtkTitlebarInactiveText
#
[
css
(
skip
)
]
End
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
impl
SystemColor
{
#
[
inline
]
fn
compute
(
&
self
cx
:
&
Context
)
-
>
ComputedColor
{
use
crate
:
:
gecko_bindings
:
:
bindings
;
let
colors
=
&
cx
.
device
(
)
.
pref_sheet_prefs
(
)
.
mColors
;
let
style_color_scheme
=
cx
.
style
(
)
.
get_inherited_ui
(
)
.
clone_color_scheme
(
)
;
convert_nscolor_to_computedcolor
(
match
*
self
{
SystemColor
:
:
Canvastext
=
>
colors
.
mDefault
SystemColor
:
:
Canvas
=
>
colors
.
mDefaultBackground
SystemColor
:
:
Linktext
=
>
colors
.
mLink
SystemColor
:
:
Activetext
=
>
colors
.
mActiveLink
SystemColor
:
:
Visitedtext
=
>
colors
.
mVisitedLink
_
=
>
{
let
color
=
unsafe
{
bindings
:
:
Gecko_GetLookAndFeelSystemColor
(
*
self
as
i32
cx
.
device
(
)
.
document
(
)
&
style_color_scheme
)
}
;
if
color
=
=
bindings
:
:
NS_SAME_AS_FOREGROUND_COLOR
{
return
ComputedColor
:
:
currentcolor
(
)
;
}
color
}
}
)
}
}
impl
From
<
RGBA
>
for
Color
{
fn
from
(
value
:
RGBA
)
-
>
Self
{
Color
:
:
rgba
(
value
)
}
}
struct
ColorComponentParser
<
'
a
'
b
:
'
a
>
(
&
'
a
ParserContext
<
'
b
>
)
;
impl
<
'
a
'
b
:
'
a
'
i
:
'
a
>
:
:
cssparser
:
:
ColorComponentParser
<
'
i
>
for
ColorComponentParser
<
'
a
'
b
>
{
type
Error
=
StyleParseErrorKind
<
'
i
>
;
fn
parse_angle_or_number
<
'
t
>
(
&
self
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
AngleOrNumber
ParseError
<
'
i
>
>
{
use
crate
:
:
values
:
:
specified
:
:
Angle
;
let
location
=
input
.
current_source_location
(
)
;
let
token
=
input
.
next
(
)
?
.
clone
(
)
;
match
token
{
Token
:
:
Dimension
{
value
ref
unit
.
.
}
=
>
{
let
angle
=
Angle
:
:
parse_dimension
(
value
unit
false
)
;
let
degrees
=
match
angle
{
Ok
(
angle
)
=
>
angle
.
degrees
(
)
Err
(
(
)
)
=
>
return
Err
(
location
.
new_unexpected_token_error
(
token
.
clone
(
)
)
)
}
;
Ok
(
AngleOrNumber
:
:
Angle
{
degrees
}
)
}
Token
:
:
Number
{
value
.
.
}
=
>
Ok
(
AngleOrNumber
:
:
Number
{
value
}
)
Token
:
:
Function
(
ref
name
)
=
>
{
let
function
=
CalcNode
:
:
math_function
(
name
location
)
?
;
CalcNode
:
:
parse_angle_or_number
(
self
.
0
input
function
)
}
t
=
>
return
Err
(
location
.
new_unexpected_token_error
(
t
)
)
}
}
fn
parse_percentage
<
'
t
>
(
&
self
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
f32
ParseError
<
'
i
>
>
{
Ok
(
Percentage
:
:
parse
(
self
.
0
input
)
?
.
get
(
)
)
}
fn
parse_number
<
'
t
>
(
&
self
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
f32
ParseError
<
'
i
>
>
{
use
crate
:
:
values
:
:
specified
:
:
Number
;
Ok
(
Number
:
:
parse
(
self
.
0
input
)
?
.
get
(
)
)
}
fn
parse_number_or_percentage
<
'
t
>
(
&
self
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
NumberOrPercentage
ParseError
<
'
i
>
>
{
let
location
=
input
.
current_source_location
(
)
;
match
*
input
.
next
(
)
?
{
Token
:
:
Number
{
value
.
.
}
=
>
Ok
(
NumberOrPercentage
:
:
Number
{
value
}
)
Token
:
:
Percentage
{
unit_value
.
.
}
=
>
{
Ok
(
NumberOrPercentage
:
:
Percentage
{
unit_value
}
)
}
Token
:
:
Function
(
ref
name
)
=
>
{
let
function
=
CalcNode
:
:
math_function
(
name
location
)
?
;
CalcNode
:
:
parse_number_or_percentage
(
self
.
0
input
function
)
}
ref
t
=
>
return
Err
(
location
.
new_unexpected_token_error
(
t
.
clone
(
)
)
)
}
}
}
impl
Parse
for
Color
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
let
start
=
input
.
state
(
)
;
let
authored
=
input
.
expect_ident_cloned
(
)
.
ok
(
)
;
input
.
reset
(
&
start
)
;
let
compontent_parser
=
ColorComponentParser
(
&
*
context
)
;
match
input
.
try_parse
(
|
i
|
CSSParserColor
:
:
parse_with
(
&
compontent_parser
i
)
)
{
Ok
(
value
)
=
>
Ok
(
match
value
{
CSSParserColor
:
:
CurrentColor
=
>
Color
:
:
CurrentColor
CSSParserColor
:
:
RGBA
(
rgba
)
=
>
Color
:
:
Numeric
{
parsed
:
rgba
authored
:
authored
.
map
(
|
s
|
s
.
to_ascii_lowercase
(
)
.
into_boxed_str
(
)
)
}
}
)
Err
(
e
)
=
>
{
#
[
cfg
(
feature
=
"
gecko
"
)
]
{
if
let
Ok
(
system
)
=
input
.
try_parse
(
|
i
|
SystemColor
:
:
parse
(
context
i
)
)
{
return
Ok
(
Color
:
:
System
(
system
)
)
;
}
}
if
let
Ok
(
mix
)
=
input
.
try_parse
(
|
i
|
ColorMix
:
:
parse
(
context
i
)
)
{
return
Ok
(
Color
:
:
ColorMix
(
Box
:
:
new
(
mix
)
)
)
;
}
match
e
.
kind
{
ParseErrorKind
:
:
Basic
(
BasicParseErrorKind
:
:
UnexpectedToken
(
t
)
)
=
>
{
Err
(
e
.
location
.
new_custom_error
(
StyleParseErrorKind
:
:
ValueError
(
ValueParseErrorKind
:
:
InvalidColor
(
t
)
)
)
)
}
_
=
>
Err
(
e
)
}
}
}
}
}
impl
ToCss
for
Color
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
match
*
self
{
Color
:
:
CurrentColor
=
>
CSSParserColor
:
:
CurrentColor
.
to_css
(
dest
)
Color
:
:
Numeric
{
authored
:
Some
(
ref
authored
)
.
.
}
=
>
dest
.
write_str
(
authored
)
Color
:
:
Numeric
{
parsed
:
ref
rgba
.
.
}
=
>
rgba
.
to_css
(
dest
)
Color
:
:
Complex
(
_
)
=
>
Ok
(
(
)
)
Color
:
:
ColorMix
(
ref
mix
)
=
>
mix
.
to_css
(
dest
)
#
[
cfg
(
feature
=
"
gecko
"
)
]
Color
:
:
System
(
system
)
=
>
system
.
to_css
(
dest
)
#
[
cfg
(
feature
=
"
gecko
"
)
]
Color
:
:
InheritFromBodyQuirk
=
>
Ok
(
(
)
)
}
}
}
fn
parse_hash_color
(
value
:
&
[
u8
]
)
-
>
Result
<
RGBA
(
)
>
{
CSSParserColor
:
:
parse_hash
(
value
)
.
map
(
|
color
|
match
color
{
CSSParserColor
:
:
RGBA
(
rgba
)
=
>
rgba
CSSParserColor
:
:
CurrentColor
=
>
unreachable
!
(
"
parse_hash
should
never
return
currentcolor
"
)
}
)
}
impl
Color
{
pub
fn
is_system
(
&
self
)
-
>
bool
{
matches
!
(
self
Color
:
:
System
(
.
.
)
)
}
#
[
inline
]
pub
fn
currentcolor
(
)
-
>
Color
{
Color
:
:
CurrentColor
}
#
[
inline
]
pub
fn
transparent
(
)
-
>
Color
{
Color
:
:
rgba
(
RGBA
:
:
transparent
(
)
)
}
#
[
inline
]
pub
fn
rgba
(
rgba
:
RGBA
)
-
>
Self
{
Color
:
:
Numeric
{
parsed
:
rgba
authored
:
None
}
}
pub
fn
parse_quirky
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
allow_quirks
:
AllowQuirks
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
input
.
try_parse
(
|
i
|
Self
:
:
parse
(
context
i
)
)
.
or_else
(
|
e
|
{
if
!
allow_quirks
.
allowed
(
context
.
quirks_mode
)
{
return
Err
(
e
)
;
}
Color
:
:
parse_quirky_color
(
input
)
.
map
(
Color
:
:
rgba
)
.
map_err
(
|
_
|
e
)
}
)
}
fn
parse_quirky_color
<
'
i
'
t
>
(
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
RGBA
ParseError
<
'
i
>
>
{
let
location
=
input
.
current_source_location
(
)
;
let
(
value
unit
)
=
match
*
input
.
next
(
)
?
{
Token
:
:
Number
{
int_value
:
Some
(
integer
)
.
.
}
=
>
(
integer
None
)
Token
:
:
Dimension
{
int_value
:
Some
(
integer
)
ref
unit
.
.
}
=
>
(
integer
Some
(
unit
)
)
Token
:
:
Ident
(
ref
ident
)
=
>
{
if
ident
.
len
(
)
!
=
3
&
&
ident
.
len
(
)
!
=
6
{
return
Err
(
location
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
;
}
return
parse_hash_color
(
ident
.
as_bytes
(
)
)
.
map_err
(
|
(
)
|
{
location
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
}
)
;
}
ref
t
=
>
{
return
Err
(
location
.
new_unexpected_token_error
(
t
.
clone
(
)
)
)
;
}
}
;
if
value
<
0
{
return
Err
(
location
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
;
}
let
length
=
if
value
<
=
9
{
1
}
else
if
value
<
=
99
{
2
}
else
if
value
<
=
999
{
3
}
else
if
value
<
=
9999
{
4
}
else
if
value
<
=
99999
{
5
}
else
if
value
<
=
999999
{
6
}
else
{
return
Err
(
location
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
;
}
;
let
total
=
length
+
unit
.
as_ref
(
)
.
map_or
(
0
|
d
|
d
.
len
(
)
)
;
if
total
>
6
{
return
Err
(
location
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
;
}
let
mut
serialization
=
[
b
'
0
'
;
6
]
;
let
space_padding
=
6
-
total
;
let
mut
written
=
space_padding
;
written
+
=
itoa
:
:
write
(
&
mut
serialization
[
written
.
.
]
value
)
.
unwrap
(
)
;
if
let
Some
(
unit
)
=
unit
{
written
+
=
(
&
mut
serialization
[
written
.
.
]
)
.
write
(
unit
.
as_bytes
(
)
)
.
unwrap
(
)
;
}
debug_assert_eq
!
(
written
6
)
;
parse_hash_color
(
&
serialization
)
.
map_err
(
|
(
)
|
location
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
fn
convert_nscolor_to_computedcolor
(
color
:
nscolor
)
-
>
ComputedColor
{
use
crate
:
:
gecko
:
:
values
:
:
convert_nscolor_to_rgba
;
ComputedColor
:
:
rgba
(
convert_nscolor_to_rgba
(
color
)
)
}
impl
Color
{
pub
fn
to_computed_color
(
&
self
context
:
Option
<
&
Context
>
)
-
>
Option
<
ComputedColor
>
{
Some
(
match
*
self
{
Color
:
:
CurrentColor
=
>
ComputedColor
:
:
currentcolor
(
)
Color
:
:
Numeric
{
ref
parsed
.
.
}
=
>
ComputedColor
:
:
rgba
(
*
parsed
)
Color
:
:
Complex
(
ref
complex
)
=
>
*
complex
Color
:
:
ColorMix
(
ref
mix
)
=
>
{
use
crate
:
:
values
:
:
animated
:
:
color
:
:
Color
as
AnimatedColor
;
use
crate
:
:
values
:
:
animated
:
:
ToAnimatedValue
;
let
left
=
mix
.
left
.
to_computed_color
(
context
)
?
.
to_animated_value
(
)
;
let
right
=
mix
.
right
.
to_computed_color
(
context
)
?
.
to_animated_value
(
)
;
ToAnimatedValue
:
:
from_animated_value
(
AnimatedColor
:
:
mix
(
mix
.
color_space
&
left
mix
.
left_percentage
.
get
(
)
&
right
mix
.
right_percentage
.
get
(
)
mix
.
hue_adjuster
)
)
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
Color
:
:
System
(
system
)
=
>
system
.
compute
(
context
?
)
#
[
cfg
(
feature
=
"
gecko
"
)
]
Color
:
:
InheritFromBodyQuirk
=
>
ComputedColor
:
:
rgba
(
context
?
.
device
(
)
.
body_text_color
(
)
)
}
)
}
}
impl
ToComputedValue
for
Color
{
type
ComputedValue
=
ComputedColor
;
fn
to_computed_value
(
&
self
context
:
&
Context
)
-
>
ComputedColor
{
self
.
to_computed_color
(
Some
(
context
)
)
.
unwrap
(
)
}
fn
from_computed_value
(
computed
:
&
ComputedColor
)
-
>
Self
{
if
computed
.
is_numeric
(
)
{
return
Color
:
:
rgba
(
computed
.
color
)
;
}
if
computed
.
is_currentcolor
(
)
{
return
Color
:
:
currentcolor
(
)
;
}
Color
:
:
Complex
(
*
computed
)
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToCss
ToShmem
)
]
pub
struct
MozFontSmoothingBackgroundColor
(
pub
Color
)
;
impl
Parse
for
MozFontSmoothingBackgroundColor
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
Color
:
:
parse
(
context
input
)
.
map
(
MozFontSmoothingBackgroundColor
)
}
}
impl
ToComputedValue
for
MozFontSmoothingBackgroundColor
{
type
ComputedValue
=
RGBA
;
fn
to_computed_value
(
&
self
context
:
&
Context
)
-
>
RGBA
{
self
.
0
.
to_computed_value
(
context
)
.
to_rgba
(
RGBA
:
:
transparent
(
)
)
}
fn
from_computed_value
(
computed
:
&
RGBA
)
-
>
Self
{
MozFontSmoothingBackgroundColor
(
Color
:
:
rgba
(
*
computed
)
)
}
}
impl
SpecifiedValueInfo
for
Color
{
const
SUPPORTED_TYPES
:
u8
=
CssType
:
:
COLOR
;
fn
collect_completion_keywords
(
f
:
KeywordsCollectFn
)
{
f
(
&
[
"
rgb
"
"
rgba
"
"
hsl
"
"
hsla
"
"
currentColor
"
"
transparent
"
]
)
;
}
}
#
[
cfg_attr
(
feature
=
"
gecko
"
derive
(
MallocSizeOf
)
)
]
#
[
derive
(
Clone
Debug
PartialEq
SpecifiedValueInfo
ToCss
ToShmem
)
]
pub
struct
ColorPropertyValue
(
pub
Color
)
;
impl
ToComputedValue
for
ColorPropertyValue
{
type
ComputedValue
=
RGBA
;
#
[
inline
]
fn
to_computed_value
(
&
self
context
:
&
Context
)
-
>
RGBA
{
self
.
0
.
to_computed_value
(
context
)
.
to_rgba
(
context
.
builder
.
get_parent_inherited_text
(
)
.
clone_color
(
)
)
}
#
[
inline
]
fn
from_computed_value
(
computed
:
&
RGBA
)
-
>
Self
{
ColorPropertyValue
(
Color
:
:
rgba
(
*
computed
)
.
into
(
)
)
}
}
impl
Parse
for
ColorPropertyValue
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
Color
:
:
parse_quirky
(
context
input
AllowQuirks
:
:
Yes
)
.
map
(
ColorPropertyValue
)
}
}
pub
type
ColorOrAuto
=
GenericColorOrAuto
<
Color
>
;
pub
type
CaretColor
=
GenericCaretColor
<
Color
>
;
impl
Parse
for
CaretColor
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
ColorOrAuto
:
:
parse
(
context
input
)
.
map
(
GenericCaretColor
)
}
}
bitflags
!
{
/
/
/
Various
flags
to
represent
the
color
-
scheme
property
in
an
efficient
/
/
/
way
.
#
[
derive
(
Default
MallocSizeOf
SpecifiedValueInfo
ToComputedValue
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
)
]
#
[
value_info
(
other_values
=
"
light
dark
only
"
)
]
pub
struct
ColorSchemeFlags
:
u8
{
/
/
/
Whether
the
author
specified
light
.
const
LIGHT
=
1
<
<
0
;
/
/
/
Whether
the
author
specified
dark
.
const
DARK
=
1
<
<
1
;
/
/
/
Whether
the
author
specified
only
.
const
ONLY
=
1
<
<
2
;
}
}
#
[
derive
(
Clone
Debug
Default
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
)
]
#
[
value_info
(
other_values
=
"
normal
"
)
]
pub
struct
ColorScheme
{
#
[
ignore_malloc_size_of
=
"
Arc
"
]
idents
:
crate
:
:
ArcSlice
<
CustomIdent
>
bits
:
ColorSchemeFlags
}
impl
ColorScheme
{
pub
fn
normal
(
)
-
>
Self
{
Self
{
idents
:
Default
:
:
default
(
)
bits
:
ColorSchemeFlags
:
:
empty
(
)
}
}
}
impl
Parse
for
ColorScheme
{
fn
parse
<
'
i
'
t
>
(
_
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
let
mut
idents
=
vec
!
[
]
;
let
mut
bits
=
ColorSchemeFlags
:
:
empty
(
)
;
let
mut
location
=
input
.
current_source_location
(
)
;
while
let
Ok
(
ident
)
=
input
.
try_parse
(
|
i
|
i
.
expect_ident_cloned
(
)
)
{
let
mut
is_only
=
false
;
match_ignore_ascii_case
!
{
&
ident
"
normal
"
=
>
{
if
idents
.
is_empty
(
)
&
&
bits
.
is_empty
(
)
{
return
Ok
(
Self
:
:
normal
(
)
)
;
}
return
Err
(
input
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
;
}
"
light
"
=
>
bits
.
insert
(
ColorSchemeFlags
:
:
LIGHT
)
"
dark
"
=
>
bits
.
insert
(
ColorSchemeFlags
:
:
DARK
)
"
only
"
=
>
{
if
bits
.
intersects
(
ColorSchemeFlags
:
:
ONLY
)
{
return
Err
(
input
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
;
}
bits
.
insert
(
ColorSchemeFlags
:
:
ONLY
)
;
is_only
=
true
;
}
_
=
>
{
}
}
;
if
is_only
{
if
!
idents
.
is_empty
(
)
{
break
;
}
}
else
{
idents
.
push
(
CustomIdent
:
:
from_ident
(
location
&
ident
&
[
]
)
?
)
;
}
location
=
input
.
current_source_location
(
)
;
}
if
idents
.
is_empty
(
)
{
return
Err
(
input
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
;
}
Ok
(
Self
{
idents
:
crate
:
:
ArcSlice
:
:
from_iter
(
idents
.
into_iter
(
)
)
bits
}
)
}
}
impl
ToCss
for
ColorScheme
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
if
self
.
idents
.
is_empty
(
)
{
debug_assert
!
(
self
.
bits
.
is_empty
(
)
)
;
return
dest
.
write_str
(
"
normal
"
)
;
}
let
mut
first
=
true
;
for
ident
in
self
.
idents
.
iter
(
)
{
if
!
first
{
dest
.
write_char
(
'
'
)
?
;
}
first
=
false
;
ident
.
to_css
(
dest
)
?
;
}
if
self
.
bits
.
intersects
(
ColorSchemeFlags
:
:
ONLY
)
{
dest
.
write_str
(
"
only
"
)
?
;
}
Ok
(
(
)
)
}
}
