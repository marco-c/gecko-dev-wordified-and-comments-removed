use
crate
:
:
parser
:
:
{
Parse
ParserContext
}
;
use
crate
:
:
values
:
:
generics
:
:
flex
:
:
FlexBasis
as
GenericFlexBasis
;
use
crate
:
:
values
:
:
specified
:
:
Size
;
use
cssparser
:
:
Parser
;
use
style_traits
:
:
ParseError
;
pub
type
FlexBasis
=
GenericFlexBasis
<
Size
>
;
impl
Parse
for
FlexBasis
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
if
let
Ok
(
width
)
=
input
.
try
(
|
i
|
Size
:
:
parse
(
context
i
)
)
{
return
Ok
(
GenericFlexBasis
:
:
Width
(
width
)
)
;
}
try_match_ident_ignore_ascii_case
!
{
input
"
content
"
=
>
Ok
(
GenericFlexBasis
:
:
Content
)
}
}
}
impl
FlexBasis
{
#
[
inline
]
pub
fn
auto
(
)
-
>
Self
{
GenericFlexBasis
:
:
Width
(
Size
:
:
auto
(
)
)
}
#
[
inline
]
pub
fn
zero_percent
(
)
-
>
Self
{
GenericFlexBasis
:
:
Width
(
Size
:
:
zero_percent
(
)
)
}
}
