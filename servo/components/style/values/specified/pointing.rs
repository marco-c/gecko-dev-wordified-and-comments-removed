use
cssparser
:
:
Parser
;
use
parser
:
:
{
Parse
ParserContext
}
;
use
style_traits
:
:
ParseError
;
use
style_traits
:
:
cursor
:
:
CursorKind
;
use
values
:
:
generics
:
:
pointing
:
:
CaretColor
as
GenericCaretColor
;
use
values
:
:
specified
:
:
color
:
:
Color
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
values
:
:
specified
:
:
url
:
:
SpecifiedUrl
;
#
[
cfg
(
feature
=
"
servo
"
)
]
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
ToComputedValue
ToCss
)
]
pub
struct
Cursor
(
pub
CursorKind
)
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
ToComputedValue
)
]
pub
struct
Cursor
{
pub
images
:
Box
<
[
CursorImage
]
>
pub
keyword
:
CursorKind
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
ToComputedValue
)
]
pub
struct
CursorImage
{
pub
url
:
SpecifiedUrl
pub
hotspot
:
Option
<
(
f32
f32
)
>
}
pub
type
CaretColor
=
GenericCaretColor
<
Color
>
;
impl
Parse
for
CaretColor
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
if
input
.
try
(
|
i
|
i
.
expect_ident_matching
(
"
auto
"
)
)
.
is_ok
(
)
{
return
Ok
(
GenericCaretColor
:
:
Auto
)
;
}
Ok
(
GenericCaretColor
:
:
Color
(
Color
:
:
parse
(
context
input
)
?
)
)
}
}
