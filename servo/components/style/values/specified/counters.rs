#
[
cfg
(
feature
=
"
servo
"
)
]
use
computed_values
:
:
list_style_type
:
:
T
as
ListStyleType
;
use
cssparser
:
:
{
Token
Parser
}
;
use
parser
:
:
{
Parse
ParserContext
}
;
use
style_traits
:
:
{
ParseError
StyleParseErrorKind
}
;
use
values
:
:
CustomIdent
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
values
:
:
generics
:
:
CounterStyleOrNone
;
use
values
:
:
generics
:
:
counters
:
:
CounterIncrement
as
GenericCounterIncrement
;
use
values
:
:
generics
:
:
counters
:
:
CounterReset
as
GenericCounterReset
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
values
:
:
specified
:
:
Attr
;
use
values
:
:
specified
:
:
Integer
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
values
:
:
specified
:
:
url
:
:
SpecifiedUrl
;
pub
type
CounterIncrement
=
GenericCounterIncrement
<
Integer
>
;
impl
Parse
for
CounterIncrement
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
Ok
(
Self
:
:
new
(
parse_counters
(
context
input
1
)
?
)
)
}
}
pub
type
CounterReset
=
GenericCounterReset
<
Integer
>
;
impl
Parse
for
CounterReset
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
Ok
(
Self
:
:
new
(
parse_counters
(
context
input
0
)
?
)
)
}
}
fn
parse_counters
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
default_value
:
i32
)
-
>
Result
<
Vec
<
(
CustomIdent
Integer
)
>
ParseError
<
'
i
>
>
{
if
input
.
try
(
|
input
|
input
.
expect_ident_matching
(
"
none
"
)
)
.
is_ok
(
)
{
return
Ok
(
vec
!
[
]
)
;
}
let
mut
counters
=
Vec
:
:
new
(
)
;
loop
{
let
location
=
input
.
current_source_location
(
)
;
let
counter_name
=
match
input
.
next
(
)
{
Ok
(
&
Token
:
:
Ident
(
ref
ident
)
)
=
>
CustomIdent
:
:
from_ident
(
location
ident
&
[
"
none
"
]
)
?
Ok
(
t
)
=
>
return
Err
(
location
.
new_unexpected_token_error
(
t
.
clone
(
)
)
)
Err
(
_
)
=
>
break
}
;
let
counter_delta
=
input
.
try
(
|
input
|
Integer
:
:
parse
(
context
input
)
)
.
unwrap_or
(
Integer
:
:
new
(
default_value
)
)
;
counters
.
push
(
(
counter_name
counter_delta
)
)
}
if
!
counters
.
is_empty
(
)
{
Ok
(
counters
)
}
else
{
Err
(
input
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
}
}
#
[
cfg
(
feature
=
"
servo
"
)
]
type
CounterStyleType
=
ListStyleType
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
type
CounterStyleType
=
CounterStyleOrNone
;
#
[
derive
(
Clone
Debug
Eq
MallocSizeOf
PartialEq
ToComputedValue
ToCss
)
]
pub
enum
Content
{
Normal
None
#
[
cfg
(
feature
=
"
gecko
"
)
]
MozAltContent
Items
(
#
[
css
(
iterable
)
]
Box
<
[
ContentItem
]
>
)
}
#
[
derive
(
Clone
Debug
Eq
MallocSizeOf
PartialEq
ToComputedValue
ToCss
)
]
pub
enum
ContentItem
{
String
(
Box
<
str
>
)
#
[
css
(
comma
function
)
]
Counter
(
CustomIdent
CounterStyleType
)
#
[
css
(
comma
function
)
]
Counters
(
CustomIdent
Box
<
str
>
CounterStyleType
)
OpenQuote
CloseQuote
NoOpenQuote
NoCloseQuote
#
[
cfg
(
feature
=
"
gecko
"
)
]
Attr
(
Attr
)
#
[
cfg
(
feature
=
"
gecko
"
)
]
Url
(
SpecifiedUrl
)
}
