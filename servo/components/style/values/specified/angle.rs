use
cssparser
:
:
{
Parser
Token
}
;
use
parser
:
:
{
ParserContext
Parse
}
;
#
[
allow
(
unused_imports
)
]
use
std
:
:
ascii
:
:
AsciiExt
;
use
std
:
:
fmt
;
use
style_traits
:
:
{
ToCss
ParseError
}
;
use
values
:
:
CSSFloat
;
use
values
:
:
computed
:
:
{
Context
ToComputedValue
}
;
use
values
:
:
computed
:
:
angle
:
:
Angle
as
ComputedAngle
;
use
values
:
:
specified
:
:
calc
:
:
CalcNode
;
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
Serialize
)
)
]
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
)
]
pub
struct
Angle
{
value
:
ComputedAngle
was_calc
:
bool
}
impl
ToCss
for
Angle
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
if
self
.
was_calc
{
dest
.
write_str
(
"
calc
(
"
)
?
;
}
self
.
value
.
to_css
(
dest
)
?
;
if
self
.
was_calc
{
dest
.
write_str
(
"
)
"
)
?
;
}
Ok
(
(
)
)
}
}
impl
ToComputedValue
for
Angle
{
type
ComputedValue
=
ComputedAngle
;
fn
to_computed_value
(
&
self
_context
:
&
Context
)
-
>
Self
:
:
ComputedValue
{
self
.
value
}
fn
from_computed_value
(
computed
:
&
Self
:
:
ComputedValue
)
-
>
Self
{
Angle
{
value
:
*
computed
was_calc
:
false
}
}
}
impl
Angle
{
pub
fn
from_degrees
(
value
:
CSSFloat
was_calc
:
bool
)
-
>
Self
{
Angle
{
value
:
ComputedAngle
:
:
Deg
(
value
)
was_calc
}
}
pub
fn
from_gradians
(
value
:
CSSFloat
was_calc
:
bool
)
-
>
Self
{
Angle
{
value
:
ComputedAngle
:
:
Grad
(
value
)
was_calc
}
}
pub
fn
from_turns
(
value
:
CSSFloat
was_calc
:
bool
)
-
>
Self
{
Angle
{
value
:
ComputedAngle
:
:
Turn
(
value
)
was_calc
}
}
pub
fn
from_radians
(
value
:
CSSFloat
was_calc
:
bool
)
-
>
Self
{
Angle
{
value
:
ComputedAngle
:
:
Rad
(
value
)
was_calc
}
}
#
[
inline
]
pub
fn
radians
(
self
)
-
>
f32
{
self
.
value
.
radians
(
)
}
pub
fn
zero
(
)
-
>
Self
{
Self
:
:
from_degrees
(
0
.
0
false
)
}
pub
fn
from_calc
(
radians
:
CSSFloat
)
-
>
Self
{
Angle
{
value
:
ComputedAngle
:
:
Rad
(
radians
)
was_calc
:
true
}
}
}
impl
AsRef
<
ComputedAngle
>
for
Angle
{
#
[
inline
]
fn
as_ref
(
&
self
)
-
>
&
ComputedAngle
{
&
self
.
value
}
}
enum
AllowUnitlessZeroAngle
{
Yes
No
}
impl
Parse
for
Angle
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
Self
:
:
parse_internal
(
context
input
AllowUnitlessZeroAngle
:
:
No
)
}
}
impl
Angle
{
pub
fn
parse_dimension
(
value
:
CSSFloat
unit
:
&
str
from_calc
:
bool
)
-
>
Result
<
Angle
(
)
>
{
let
angle
=
match_ignore_ascii_case
!
{
unit
"
deg
"
=
>
Angle
:
:
from_degrees
(
value
from_calc
)
"
grad
"
=
>
Angle
:
:
from_gradians
(
value
from_calc
)
"
turn
"
=
>
Angle
:
:
from_turns
(
value
from_calc
)
"
rad
"
=
>
Angle
:
:
from_radians
(
value
from_calc
)
_
=
>
return
Err
(
(
)
)
}
;
Ok
(
angle
)
}
pub
fn
parse_with_unitless
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
Self
:
:
parse_internal
(
context
input
AllowUnitlessZeroAngle
:
:
Yes
)
}
fn
parse_internal
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
allow_unitless_zero
:
AllowUnitlessZeroAngle
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
let
token
=
input
.
next
(
)
?
.
clone
(
)
;
match
token
{
Token
:
:
Dimension
{
value
ref
unit
.
.
}
=
>
{
Angle
:
:
parse_dimension
(
value
unit
false
)
}
Token
:
:
Number
{
value
.
.
}
if
value
=
=
0
.
=
>
{
match
allow_unitless_zero
{
AllowUnitlessZeroAngle
:
:
Yes
=
>
Ok
(
Angle
:
:
zero
(
)
)
AllowUnitlessZeroAngle
:
:
No
=
>
Err
(
(
)
)
}
}
Token
:
:
Function
(
ref
name
)
if
name
.
eq_ignore_ascii_case
(
"
calc
"
)
=
>
{
return
input
.
parse_nested_block
(
|
i
|
CalcNode
:
:
parse_angle
(
context
i
)
)
}
_
=
>
Err
(
(
)
)
}
.
map_err
(
|
(
)
|
input
.
new_unexpected_token_error
(
token
.
clone
(
)
)
)
}
}
