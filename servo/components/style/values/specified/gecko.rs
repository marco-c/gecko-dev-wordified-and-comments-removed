use
crate
:
:
parser
:
:
{
Parse
ParserContext
}
;
use
crate
:
:
values
:
:
computed
:
:
{
self
Length
LengthPercentage
}
;
use
crate
:
:
values
:
:
generics
:
:
rect
:
:
Rect
;
use
cssparser
:
:
{
Parser
Token
}
;
use
std
:
:
fmt
;
use
style_traits
:
:
values
:
:
SequenceWriter
;
use
style_traits
:
:
{
CssWriter
ParseError
StyleParseErrorKind
ToCss
}
;
fn
parse_pixel_or_percent
<
'
i
'
t
>
(
_context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
LengthPercentage
ParseError
<
'
i
>
>
{
let
location
=
input
.
current_source_location
(
)
;
let
token
=
input
.
next
(
)
?
;
let
value
=
match
*
token
{
Token
:
:
Dimension
{
value
ref
unit
.
.
}
=
>
{
match_ignore_ascii_case
!
{
unit
"
px
"
=
>
Ok
(
LengthPercentage
:
:
new_length
(
Length
:
:
new
(
value
)
)
)
_
=
>
Err
(
(
)
)
}
}
Token
:
:
Percentage
{
unit_value
.
.
}
=
>
Ok
(
LengthPercentage
:
:
new_percent
(
computed
:
:
Percentage
(
unit_value
)
)
)
_
=
>
Err
(
(
)
)
}
;
value
.
map_err
(
|
(
)
|
location
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
}
#
[
repr
(
transparent
)
]
pub
struct
IntersectionObserverRootMargin
(
pub
Rect
<
LengthPercentage
>
)
;
impl
Parse
for
IntersectionObserverRootMargin
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
use
crate
:
:
Zero
;
if
input
.
is_exhausted
(
)
{
return
Ok
(
IntersectionObserverRootMargin
(
Rect
:
:
all
(
LengthPercentage
:
:
zero
(
)
)
)
)
;
}
let
rect
=
Rect
:
:
parse_with
(
context
input
parse_pixel_or_percent
)
?
;
Ok
(
IntersectionObserverRootMargin
(
rect
)
)
}
}
impl
ToCss
for
IntersectionObserverRootMargin
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
let
mut
writer
=
SequenceWriter
:
:
new
(
dest
"
"
)
;
let
rect
=
&
self
.
0
;
writer
.
item
(
&
rect
.
0
)
?
;
writer
.
item
(
&
rect
.
1
)
?
;
writer
.
item
(
&
rect
.
2
)
?
;
writer
.
item
(
&
rect
.
3
)
}
}
