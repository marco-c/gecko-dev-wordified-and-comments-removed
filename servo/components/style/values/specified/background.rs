use
cssparser
:
:
Parser
;
use
parser
:
:
{
Parse
ParserContext
}
;
use
selectors
:
:
parser
:
:
SelectorParseErrorKind
;
use
style_traits
:
:
ParseError
;
use
values
:
:
generics
:
:
background
:
:
BackgroundSize
as
GenericBackgroundSize
;
use
values
:
:
specified
:
:
length
:
:
NonNegativeLengthOrPercentageOrAuto
;
pub
type
BackgroundSize
=
GenericBackgroundSize
<
NonNegativeLengthOrPercentageOrAuto
>
;
impl
Parse
for
BackgroundSize
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
if
let
Ok
(
width
)
=
input
.
try
(
|
i
|
NonNegativeLengthOrPercentageOrAuto
:
:
parse
(
context
i
)
)
{
let
height
=
input
.
try
(
|
i
|
NonNegativeLengthOrPercentageOrAuto
:
:
parse
(
context
i
)
)
.
unwrap_or
(
NonNegativeLengthOrPercentageOrAuto
:
:
auto
(
)
)
;
return
Ok
(
GenericBackgroundSize
:
:
Explicit
{
width
height
}
)
;
}
Ok
(
try_match_ident_ignore_ascii_case
!
{
input
"
cover
"
=
>
GenericBackgroundSize
:
:
Cover
"
contain
"
=
>
GenericBackgroundSize
:
:
Contain
}
)
}
}
impl
BackgroundSize
{
pub
fn
auto
(
)
-
>
Self
{
GenericBackgroundSize
:
:
Explicit
{
width
:
NonNegativeLengthOrPercentageOrAuto
:
:
auto
(
)
height
:
NonNegativeLengthOrPercentageOrAuto
:
:
auto
(
)
}
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
MallocSizeOf
Parse
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
)
]
#
[
allow
(
missing_docs
)
]
pub
enum
BackgroundRepeatKeyword
{
Repeat
Space
Round
NoRepeat
}
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToCss
)
]
pub
enum
BackgroundRepeat
{
RepeatX
RepeatY
Keywords
(
BackgroundRepeatKeyword
Option
<
BackgroundRepeatKeyword
>
)
}
impl
BackgroundRepeat
{
#
[
inline
]
pub
fn
repeat
(
)
-
>
Self
{
BackgroundRepeat
:
:
Keywords
(
BackgroundRepeatKeyword
:
:
Repeat
None
)
}
}
impl
Parse
for
BackgroundRepeat
{
fn
parse
<
'
i
'
t
>
(
_context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
let
ident
=
input
.
expect_ident_cloned
(
)
?
;
match_ignore_ascii_case
!
{
&
ident
"
repeat
-
x
"
=
>
return
Ok
(
BackgroundRepeat
:
:
RepeatX
)
"
repeat
-
y
"
=
>
return
Ok
(
BackgroundRepeat
:
:
RepeatY
)
_
=
>
{
}
}
let
horizontal
=
match
BackgroundRepeatKeyword
:
:
from_ident
(
&
ident
)
{
Ok
(
h
)
=
>
h
Err
(
(
)
)
=
>
{
return
Err
(
input
.
new_custom_error
(
SelectorParseErrorKind
:
:
UnexpectedIdent
(
ident
.
clone
(
)
)
)
)
;
}
}
;
let
vertical
=
input
.
try
(
BackgroundRepeatKeyword
:
:
parse
)
.
ok
(
)
;
Ok
(
BackgroundRepeat
:
:
Keywords
(
horizontal
vertical
)
)
}
}
