use
crate
:
:
parser
:
:
{
Parse
ParserContext
}
;
use
crate
:
:
values
:
:
specified
:
:
SVGPathData
;
use
cssparser
:
:
Parser
;
use
style_traits
:
:
{
ParseError
StyleParseErrorKind
}
;
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedZero
ToComputedValue
ToCss
ToShmem
)
]
pub
enum
OffsetPath
{
#
[
css
(
function
)
]
Path
(
SVGPathData
)
#
[
animation
(
error
)
]
None
}
impl
OffsetPath
{
#
[
inline
]
pub
fn
none
(
)
-
>
Self
{
OffsetPath
:
:
None
}
}
impl
Parse
for
OffsetPath
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
if
input
.
try
(
|
i
|
i
.
expect_ident_matching
(
"
none
"
)
)
.
is_ok
(
)
{
return
Ok
(
OffsetPath
:
:
none
(
)
)
;
}
let
location
=
input
.
current_source_location
(
)
;
let
function
=
input
.
expect_function
(
)
?
.
clone
(
)
;
input
.
parse_nested_block
(
move
|
i
|
{
match_ignore_ascii_case
!
{
&
function
/
/
Bug
1186329
:
Implement
the
parser
for
ray
(
)
<
basic
-
shape
>
<
geometry
-
box
>
/
/
and
<
url
>
.
"
path
"
=
>
SVGPathData
:
:
parse
(
context
i
)
.
map
(
OffsetPath
:
:
Path
)
_
=
>
{
Err
(
location
.
new_custom_error
(
StyleParseErrorKind
:
:
UnexpectedFunction
(
function
.
clone
(
)
)
)
)
}
}
}
)
}
}
