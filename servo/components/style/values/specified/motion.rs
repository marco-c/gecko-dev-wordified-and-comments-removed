use
crate
:
:
parser
:
:
{
Parse
ParserContext
}
;
use
crate
:
:
values
:
:
computed
:
:
motion
:
:
OffsetRotate
as
ComputedOffsetRotate
;
use
crate
:
:
values
:
:
computed
:
:
{
Context
ToComputedValue
}
;
use
crate
:
:
values
:
:
specified
:
:
{
Angle
SVGPathData
}
;
use
crate
:
:
Zero
;
use
cssparser
:
:
Parser
;
use
style_traits
:
:
{
ParseError
StyleParseErrorKind
}
;
/
/
/
cbindgen
:
derive
-
tagged
-
enum
-
copy
-
constructor
=
true
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedZero
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
OffsetPath
{
#
[
css
(
function
)
]
Path
(
SVGPathData
)
#
[
animation
(
error
)
]
None
}
impl
OffsetPath
{
#
[
inline
]
pub
fn
none
(
)
-
>
Self
{
OffsetPath
:
:
None
}
}
impl
Parse
for
OffsetPath
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
if
input
.
try
(
|
i
|
i
.
expect_ident_matching
(
"
none
"
)
)
.
is_ok
(
)
{
return
Ok
(
OffsetPath
:
:
none
(
)
)
;
}
let
location
=
input
.
current_source_location
(
)
;
let
function
=
input
.
expect_function
(
)
?
.
clone
(
)
;
input
.
parse_nested_block
(
move
|
i
|
{
match_ignore_ascii_case
!
{
&
function
/
/
Bug
1186329
:
Implement
the
parser
for
ray
(
)
<
basic
-
shape
>
<
geometry
-
box
>
/
/
and
<
url
>
.
"
path
"
=
>
SVGPathData
:
:
parse
(
context
i
)
.
map
(
OffsetPath
:
:
Path
)
_
=
>
{
Err
(
location
.
new_custom_error
(
StyleParseErrorKind
:
:
UnexpectedFunction
(
function
.
clone
(
)
)
)
)
}
}
}
)
}
}
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
Parse
PartialEq
SpecifiedValueInfo
ToCss
ToShmem
)
]
#
[
repr
(
u8
)
]
pub
enum
OffsetRotateDirection
{
#
[
css
(
skip
)
]
None
Auto
Reverse
}
impl
OffsetRotateDirection
{
#
[
inline
]
fn
is_none
(
&
self
)
-
>
bool
{
*
self
=
=
OffsetRotateDirection
:
:
None
}
}
#
[
inline
]
fn
direction_specified_and_angle_is_zero
(
direction
:
&
OffsetRotateDirection
angle
:
&
Angle
)
-
>
bool
{
!
direction
.
is_none
(
)
&
&
angle
.
is_zero
(
)
}
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToCss
ToShmem
)
]
pub
struct
OffsetRotate
{
#
[
css
(
skip_if
=
"
OffsetRotateDirection
:
:
is_none
"
)
]
direction
:
OffsetRotateDirection
#
[
css
(
contextual_skip_if
=
"
direction_specified_and_angle_is_zero
"
)
]
angle
:
Angle
}
impl
Parse
for
OffsetRotate
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
let
location
=
input
.
current_source_location
(
)
;
let
mut
direction
=
input
.
try
(
OffsetRotateDirection
:
:
parse
)
;
let
angle
=
input
.
try
(
|
i
|
Angle
:
:
parse
(
context
i
)
)
;
if
direction
.
is_err
(
)
{
direction
=
input
.
try
(
OffsetRotateDirection
:
:
parse
)
;
}
if
direction
.
is_err
(
)
&
&
angle
.
is_err
(
)
{
return
Err
(
location
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
;
}
Ok
(
OffsetRotate
{
direction
:
direction
.
unwrap_or
(
OffsetRotateDirection
:
:
None
)
angle
:
angle
.
unwrap_or
(
Zero
:
:
zero
(
)
)
}
)
}
}
impl
ToComputedValue
for
OffsetRotate
{
type
ComputedValue
=
ComputedOffsetRotate
;
#
[
inline
]
fn
to_computed_value
(
&
self
context
:
&
Context
)
-
>
Self
:
:
ComputedValue
{
use
crate
:
:
values
:
:
computed
:
:
Angle
as
ComputedAngle
;
ComputedOffsetRotate
{
auto
:
!
self
.
direction
.
is_none
(
)
angle
:
if
self
.
direction
=
=
OffsetRotateDirection
:
:
Reverse
{
self
.
angle
.
to_computed_value
(
context
)
+
ComputedAngle
:
:
from_degrees
(
180
.
0
)
}
else
{
self
.
angle
.
to_computed_value
(
context
)
}
}
}
#
[
inline
]
fn
from_computed_value
(
computed
:
&
Self
:
:
ComputedValue
)
-
>
Self
{
OffsetRotate
{
direction
:
if
computed
.
auto
{
OffsetRotateDirection
:
:
Auto
}
else
{
OffsetRotateDirection
:
:
None
}
angle
:
ToComputedValue
:
:
from_computed_value
(
&
computed
.
angle
)
}
}
}
