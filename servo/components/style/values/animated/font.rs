use
super
:
:
{
Animate
Procedure
ToAnimatedZero
}
;
use
crate
:
:
values
:
:
computed
:
:
font
:
:
FontVariationSettings
;
use
crate
:
:
values
:
:
distance
:
:
{
ComputeSquaredDistance
SquaredDistance
}
;
use
crate
:
:
values
:
:
generics
:
:
font
:
:
FontSettings
as
GenericFontSettings
;
impl
Animate
for
FontVariationSettings
{
#
[
inline
]
fn
animate
(
&
self
other
:
&
Self
procedure
:
Procedure
)
-
>
Result
<
Self
(
)
>
{
if
self
.
0
.
len
(
)
=
=
other
.
0
.
len
(
)
{
self
.
0
.
iter
(
)
.
zip
(
other
.
0
.
iter
(
)
)
.
map
(
|
(
st
ot
)
|
st
.
animate
(
&
ot
procedure
)
)
.
collect
:
:
<
Result
<
Vec
<
_
>
(
)
>
>
(
)
.
map
(
|
v
|
GenericFontSettings
(
v
.
into_boxed_slice
(
)
)
)
}
else
{
Err
(
(
)
)
}
}
}
impl
ComputeSquaredDistance
for
FontVariationSettings
{
#
[
inline
]
fn
compute_squared_distance
(
&
self
other
:
&
Self
)
-
>
Result
<
SquaredDistance
(
)
>
{
if
self
.
0
.
len
(
)
=
=
other
.
0
.
len
(
)
{
self
.
0
.
iter
(
)
.
zip
(
other
.
0
.
iter
(
)
)
.
map
(
|
(
st
ot
)
|
st
.
compute_squared_distance
(
&
ot
)
)
.
sum
(
)
}
else
{
Err
(
(
)
)
}
}
}
impl
ToAnimatedZero
for
FontVariationSettings
{
#
[
inline
]
fn
to_animated_zero
(
&
self
)
-
>
Result
<
Self
(
)
>
{
Err
(
(
)
)
}
}
