use
super
:
:
{
Animate
Procedure
}
;
use
crate
:
:
values
:
:
computed
:
:
length
:
:
LengthPercentage
;
use
crate
:
:
values
:
:
computed
:
:
Percentage
;
use
style_traits
:
:
values
:
:
specified
:
:
AllowedNumericType
;
impl
Animate
for
LengthPercentage
{
#
[
inline
]
fn
animate
(
&
self
other
:
&
Self
procedure
:
Procedure
)
-
>
Result
<
Self
(
)
>
{
let
animate_percentage_half
=
|
this
:
Option
<
Percentage
>
other
:
Option
<
Percentage
>
|
{
if
this
.
is_none
(
)
&
&
other
.
is_none
(
)
{
return
Ok
(
None
)
;
}
let
this
=
this
.
unwrap_or_default
(
)
;
let
other
=
other
.
unwrap_or_default
(
)
;
Ok
(
Some
(
this
.
animate
(
&
other
procedure
)
?
)
)
}
;
let
length
=
self
.
unclamped_length
(
)
.
animate
(
&
other
.
unclamped_length
(
)
procedure
)
?
;
let
percentage
=
animate_percentage_half
(
self
.
specified_percentage
(
)
other
.
specified_percentage
(
)
)
?
;
Ok
(
LengthPercentage
:
:
new_calc
(
length
percentage
AllowedNumericType
:
:
All
)
)
}
}
