use
super
:
:
{
Animate
Procedure
ToAnimatedValue
}
;
use
crate
:
:
values
:
:
computed
:
:
length
:
:
LengthPercentage
;
use
crate
:
:
values
:
:
computed
:
:
MaxLength
as
ComputedMaxLength
;
use
crate
:
:
values
:
:
computed
:
:
MozLength
as
ComputedMozLength
;
use
crate
:
:
values
:
:
computed
:
:
Percentage
;
impl
Animate
for
LengthPercentage
{
#
[
inline
]
fn
animate
(
&
self
other
:
&
Self
procedure
:
Procedure
)
-
>
Result
<
Self
(
)
>
{
let
animate_percentage_half
=
|
this
:
Option
<
Percentage
>
other
:
Option
<
Percentage
>
|
{
if
this
.
is_none
(
)
&
&
other
.
is_none
(
)
{
return
Ok
(
None
)
;
}
let
this
=
this
.
unwrap_or_default
(
)
;
let
other
=
other
.
unwrap_or_default
(
)
;
Ok
(
Some
(
this
.
animate
(
&
other
procedure
)
?
)
)
}
;
let
length
=
self
.
unclamped_length
(
)
.
animate
(
&
other
.
unclamped_length
(
)
procedure
)
?
;
let
percentage
=
animate_percentage_half
(
self
.
specified_percentage
(
)
other
.
specified_percentage
(
)
)
?
;
let
is_calc
=
self
.
was_calc
|
|
other
.
was_calc
|
|
self
.
has_percentage
!
=
other
.
has_percentage
;
Ok
(
Self
:
:
with_clamping_mode
(
length
percentage
self
.
clamping_mode
is_calc
)
)
}
}
impl
ToAnimatedValue
for
ComputedMaxLength
{
type
AnimatedValue
=
Self
;
#
[
inline
]
fn
to_animated_value
(
self
)
-
>
Self
{
self
}
#
[
inline
]
fn
from_animated_value
(
animated
:
Self
:
:
AnimatedValue
)
-
>
Self
{
use
crate
:
:
values
:
:
computed
:
:
LengthPercentageOrNone
;
use
crate
:
:
values
:
:
generics
:
:
length
:
:
MaxLength
as
GenericMaxLength
;
match
animated
{
GenericMaxLength
:
:
LengthPercentageOrNone
(
lpn
)
=
>
{
let
result
=
match
lpn
{
LengthPercentageOrNone
:
:
LengthPercentage
(
len
)
=
>
{
LengthPercentageOrNone
:
:
LengthPercentage
(
len
.
clamp_to_non_negative
(
)
)
}
LengthPercentageOrNone
:
:
None
=
>
lpn
}
;
GenericMaxLength
:
:
LengthPercentageOrNone
(
result
)
}
_
=
>
animated
}
}
}
impl
ToAnimatedValue
for
ComputedMozLength
{
type
AnimatedValue
=
Self
;
#
[
inline
]
fn
to_animated_value
(
self
)
-
>
Self
{
self
}
#
[
inline
]
fn
from_animated_value
(
animated
:
Self
:
:
AnimatedValue
)
-
>
Self
{
use
crate
:
:
values
:
:
generics
:
:
length
:
:
MozLength
as
GenericMozLength
;
match
animated
{
GenericMozLength
:
:
LengthPercentageOrAuto
(
lpa
)
=
>
{
GenericMozLength
:
:
LengthPercentageOrAuto
(
lpa
.
clamp_to_non_negative
(
)
)
}
_
=
>
animated
}
}
}
