use
super
:
:
{
Animate
Procedure
}
;
use
crate
:
:
values
:
:
distance
:
:
{
ComputeSquaredDistance
SquaredDistance
}
;
use
crate
:
:
values
:
:
generics
:
:
svg
:
:
SVGStrokeDashArray
;
impl
<
L
>
Animate
for
SVGStrokeDashArray
<
L
>
where
L
:
Clone
+
Animate
{
#
[
inline
]
fn
animate
(
&
self
other
:
&
Self
procedure
:
Procedure
)
-
>
Result
<
Self
(
)
>
{
if
matches
!
(
procedure
Procedure
:
:
Add
|
Procedure
:
:
Accumulate
{
.
.
}
)
{
return
Err
(
(
)
)
;
}
match
(
self
other
)
{
(
&
SVGStrokeDashArray
:
:
Values
(
ref
this
)
&
SVGStrokeDashArray
:
:
Values
(
ref
other
)
)
=
>
Ok
(
SVGStrokeDashArray
:
:
Values
(
super
:
:
lists
:
:
repeatable_list
:
:
animate
(
this
other
procedure
)
?
)
)
_
=
>
Err
(
(
)
)
}
}
}
impl
<
L
>
ComputeSquaredDistance
for
SVGStrokeDashArray
<
L
>
where
L
:
ComputeSquaredDistance
{
#
[
inline
]
fn
compute_squared_distance
(
&
self
other
:
&
Self
)
-
>
Result
<
SquaredDistance
(
)
>
{
match
(
self
other
)
{
(
&
SVGStrokeDashArray
:
:
Values
(
ref
this
)
&
SVGStrokeDashArray
:
:
Values
(
ref
other
)
)
=
>
{
super
:
:
lists
:
:
repeatable_list
:
:
squared_distance
(
this
other
)
}
_
=
>
Err
(
(
)
)
}
}
}
