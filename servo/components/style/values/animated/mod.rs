use
app_units
:
:
Au
;
use
values
:
:
computed
:
:
Angle
as
ComputedAngle
;
use
values
:
:
specified
:
:
url
:
:
SpecifiedUrl
;
pub
mod
effects
;
pub
trait
ToAnimatedValue
{
type
AnimatedValue
;
fn
to_animated_value
(
self
)
-
>
Self
:
:
AnimatedValue
;
fn
from_animated_value
(
animated
:
Self
:
:
AnimatedValue
)
-
>
Self
;
}
impl
<
T
>
ToAnimatedValue
for
Option
<
T
>
where
T
:
ToAnimatedValue
{
type
AnimatedValue
=
Option
<
<
T
as
ToAnimatedValue
>
:
:
AnimatedValue
>
;
#
[
inline
]
fn
to_animated_value
(
self
)
-
>
Self
:
:
AnimatedValue
{
self
.
map
(
T
:
:
to_animated_value
)
}
#
[
inline
]
fn
from_animated_value
(
animated
:
Self
:
:
AnimatedValue
)
-
>
Self
{
animated
.
map
(
T
:
:
from_animated_value
)
}
}
impl
<
T
>
ToAnimatedValue
for
Vec
<
T
>
where
T
:
ToAnimatedValue
{
type
AnimatedValue
=
Vec
<
<
T
as
ToAnimatedValue
>
:
:
AnimatedValue
>
;
#
[
inline
]
fn
to_animated_value
(
self
)
-
>
Self
:
:
AnimatedValue
{
self
.
into_iter
(
)
.
map
(
T
:
:
to_animated_value
)
.
collect
(
)
}
#
[
inline
]
fn
from_animated_value
(
animated
:
Self
:
:
AnimatedValue
)
-
>
Self
{
animated
.
into_iter
(
)
.
map
(
T
:
:
from_animated_value
)
.
collect
(
)
}
}
pub
trait
AnimatedValueAsComputed
{
}
impl
AnimatedValueAsComputed
for
Au
{
}
impl
AnimatedValueAsComputed
for
ComputedAngle
{
}
impl
AnimatedValueAsComputed
for
SpecifiedUrl
{
}
impl
AnimatedValueAsComputed
for
bool
{
}
impl
AnimatedValueAsComputed
for
f32
{
}
impl
<
T
>
ToAnimatedValue
for
T
where
T
:
AnimatedValueAsComputed
{
type
AnimatedValue
=
Self
;
#
[
inline
]
fn
to_animated_value
(
self
)
-
>
Self
{
self
}
#
[
inline
]
fn
from_animated_value
(
animated
:
Self
:
:
AnimatedValue
)
-
>
Self
{
animated
}
}
pub
trait
ToAnimatedZero
:
Sized
{
fn
to_animated_zero
(
&
self
)
-
>
Result
<
Self
(
)
>
;
}
impl
ToAnimatedZero
for
Au
{
#
[
inline
]
fn
to_animated_zero
(
&
self
)
-
>
Result
<
Self
(
)
>
{
Ok
(
Au
(
0
)
)
}
}
impl
ToAnimatedZero
for
f32
{
#
[
inline
]
fn
to_animated_zero
(
&
self
)
-
>
Result
<
Self
(
)
>
{
Ok
(
0
.
)
}
}
impl
ToAnimatedZero
for
f64
{
#
[
inline
]
fn
to_animated_zero
(
&
self
)
-
>
Result
<
Self
(
)
>
{
Ok
(
0
.
)
}
}
impl
ToAnimatedZero
for
i32
{
#
[
inline
]
fn
to_animated_zero
(
&
self
)
-
>
Result
<
Self
(
)
>
{
Ok
(
0
)
}
}
