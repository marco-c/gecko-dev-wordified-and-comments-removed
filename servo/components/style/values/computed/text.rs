#
[
cfg
(
feature
=
"
servo
"
)
]
use
crate
:
:
properties
:
:
StyleBuilder
;
use
crate
:
:
values
:
:
computed
:
:
length
:
:
{
Length
LengthOrPercentage
}
;
use
crate
:
:
values
:
:
computed
:
:
{
NonNegativeLength
NonNegativeNumber
}
;
use
crate
:
:
values
:
:
generics
:
:
text
:
:
InitialLetter
as
GenericInitialLetter
;
use
crate
:
:
values
:
:
generics
:
:
text
:
:
LineHeight
as
GenericLineHeight
;
use
crate
:
:
values
:
:
generics
:
:
text
:
:
MozTabSize
as
GenericMozTabSize
;
use
crate
:
:
values
:
:
generics
:
:
text
:
:
Spacing
;
use
crate
:
:
values
:
:
specified
:
:
text
:
:
{
TextEmphasisFillMode
TextEmphasisShapeKeyword
TextOverflowSide
}
;
use
crate
:
:
values
:
:
{
CSSFloat
CSSInteger
}
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
pub
use
crate
:
:
values
:
:
specified
:
:
OverflowWrap
;
pub
use
crate
:
:
values
:
:
specified
:
:
TextAlignKeyword
as
TextAlign
;
pub
use
crate
:
:
values
:
:
specified
:
:
TextEmphasisPosition
;
pub
type
InitialLetter
=
GenericInitialLetter
<
CSSFloat
CSSInteger
>
;
pub
type
LetterSpacing
=
Spacing
<
Length
>
;
pub
type
WordSpacing
=
Spacing
<
LengthOrPercentage
>
;
pub
type
LineHeight
=
GenericLineHeight
<
NonNegativeNumber
NonNegativeLength
>
;
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
)
]
pub
struct
TextOverflow
{
pub
first
:
TextOverflowSide
pub
second
:
TextOverflowSide
pub
sides_are_logical
:
bool
}
impl
TextOverflow
{
pub
fn
get_initial_value
(
)
-
>
TextOverflow
{
TextOverflow
{
first
:
TextOverflowSide
:
:
Clip
second
:
TextOverflowSide
:
:
Clip
sides_are_logical
:
true
}
}
}
impl
ToCss
for
TextOverflow
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
if
self
.
sides_are_logical
{
debug_assert_eq
!
(
self
.
first
TextOverflowSide
:
:
Clip
)
;
self
.
second
.
to_css
(
dest
)
?
;
}
else
{
self
.
first
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
"
)
?
;
self
.
second
.
to_css
(
dest
)
?
;
}
Ok
(
(
)
)
}
}
#
[
derive
(
Clone
Copy
Debug
Default
MallocSizeOf
PartialEq
)
]
pub
struct
TextDecorationsInEffect
{
pub
underline
:
bool
pub
overline
:
bool
pub
line_through
:
bool
}
impl
TextDecorationsInEffect
{
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
fn
from_style
(
style
:
&
StyleBuilder
)
-
>
Self
{
use
crate
:
:
values
:
:
computed
:
:
Display
;
let
mut
result
=
match
style
.
get_box
(
)
.
clone_display
(
)
{
Display
:
:
InlineBlock
|
Display
:
:
InlineTable
=
>
Self
:
:
default
(
)
_
=
>
style
.
get_parent_inherited_text
(
)
.
text_decorations_in_effect
.
clone
(
)
}
;
let
text_style
=
style
.
get_text
(
)
;
result
.
underline
|
=
text_style
.
has_underline
(
)
;
result
.
overline
|
=
text_style
.
has_overline
(
)
;
result
.
line_through
|
=
text_style
.
has_line_through
(
)
;
result
}
}
pub
type
MozTabSize
=
GenericMozTabSize
<
NonNegativeNumber
NonNegativeLength
>
;
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
ToCss
)
]
pub
enum
TextEmphasisStyle
{
Keyword
(
TextEmphasisKeywordValue
)
None
String
(
String
)
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
ToCss
)
]
pub
struct
TextEmphasisKeywordValue
{
pub
fill
:
TextEmphasisFillMode
pub
shape
:
TextEmphasisShapeKeyword
}
