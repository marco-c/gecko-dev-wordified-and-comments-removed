use
crate
:
:
values
:
:
computed
:
:
length
:
:
{
Length
LengthPercentage
}
;
use
crate
:
:
values
:
:
generics
:
:
text
:
:
{
GenericHyphenateLimitChars
GenericInitialLetter
GenericTextDecorationLength
GenericTextDecorationTrim
GenericTextIndent
}
;
use
crate
:
:
values
:
:
generics
:
:
NumberOrAuto
;
use
crate
:
:
values
:
:
specified
:
:
text
as
specified
;
use
crate
:
:
values
:
:
specified
:
:
text
:
:
{
TextEmphasisFillMode
TextEmphasisShapeKeyword
}
;
use
crate
:
:
values
:
:
{
CSSFloat
CSSInteger
}
;
use
crate
:
:
Zero
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
pub
use
crate
:
:
values
:
:
specified
:
:
text
:
:
{
HyphenateCharacter
LineBreak
MozControlCharacterVisibility
OverflowWrap
RubyPosition
TextAlignLast
TextDecorationLine
TextDecorationSkipInk
TextEmphasisPosition
TextJustify
TextOverflow
TextTransform
TextUnderlinePosition
WordBreak
}
;
pub
type
InitialLetter
=
GenericInitialLetter
<
CSSFloat
CSSInteger
>
;
pub
type
TextDecorationLength
=
GenericTextDecorationLength
<
LengthPercentage
>
;
pub
type
TextDecorationTrim
=
GenericTextDecorationTrim
<
Length
>
;
pub
type
TextAlign
=
specified
:
:
TextAlignKeyword
;
pub
type
TextIndent
=
GenericTextIndent
<
LengthPercentage
>
;
pub
type
HyphenateLimitChars
=
GenericHyphenateLimitChars
<
CSSInteger
>
;
impl
HyphenateLimitChars
{
#
[
inline
]
pub
fn
auto
(
)
-
>
Self
{
Self
{
total_word_length
:
NumberOrAuto
:
:
Auto
pre_hyphen_length
:
NumberOrAuto
:
:
Auto
post_hyphen_length
:
NumberOrAuto
:
:
Auto
}
}
}
#
[
repr
(
transparent
)
]
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
ToAnimatedValue
ToAnimatedZero
ToResolvedValue
)
]
pub
struct
GenericLetterSpacing
<
L
>
(
pub
L
)
;
pub
type
LetterSpacing
=
GenericLetterSpacing
<
LengthPercentage
>
;
impl
LetterSpacing
{
#
[
inline
]
pub
fn
normal
(
)
-
>
Self
{
Self
(
LengthPercentage
:
:
zero
(
)
)
}
}
impl
ToCss
for
LetterSpacing
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
if
self
.
0
.
is_zero
(
)
{
return
dest
.
write_str
(
"
normal
"
)
;
}
self
.
0
.
to_css
(
dest
)
}
}
pub
type
WordSpacing
=
LengthPercentage
;
impl
WordSpacing
{
#
[
inline
]
pub
fn
normal
(
)
-
>
Self
{
LengthPercentage
:
:
zero
(
)
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
ToCss
ToResolvedValue
)
]
#
[
allow
(
missing_docs
)
]
#
[
repr
(
C
u8
)
]
pub
enum
TextEmphasisStyle
{
Keyword
{
#
[
css
(
skip_if
=
"
TextEmphasisFillMode
:
:
is_filled
"
)
]
fill
:
TextEmphasisFillMode
shape
:
TextEmphasisShapeKeyword
}
None
String
(
crate
:
:
OwnedStr
)
}
