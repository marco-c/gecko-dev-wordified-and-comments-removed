use
app_units
:
:
Au
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
ToCss
CssWriter
}
;
use
values
:
:
animated
:
:
ToAnimatedZero
;
use
values
:
:
computed
:
:
{
Context
Number
NumberOrPercentage
ToComputedValue
}
;
use
values
:
:
computed
:
:
length
:
:
{
LengthOrPercentage
NonNegativeLength
}
;
use
values
:
:
generics
:
:
border
:
:
BorderCornerRadius
as
GenericBorderCornerRadius
;
use
values
:
:
generics
:
:
border
:
:
BorderImageSideWidth
as
GenericBorderImageSideWidth
;
use
values
:
:
generics
:
:
border
:
:
BorderImageSlice
as
GenericBorderImageSlice
;
use
values
:
:
generics
:
:
border
:
:
BorderRadius
as
GenericBorderRadius
;
use
values
:
:
generics
:
:
border
:
:
BorderSpacing
as
GenericBorderSpacing
;
use
values
:
:
generics
:
:
rect
:
:
Rect
;
use
values
:
:
generics
:
:
size
:
:
Size
;
use
values
:
:
specified
:
:
border
:
:
{
BorderImageRepeat
as
SpecifiedBorderImageRepeat
BorderImageRepeatKeyword
}
;
pub
type
BorderImageWidth
=
Rect
<
BorderImageSideWidth
>
;
pub
type
BorderImageSideWidth
=
GenericBorderImageSideWidth
<
LengthOrPercentage
Number
>
;
pub
type
BorderImageSlice
=
GenericBorderImageSlice
<
NumberOrPercentage
>
;
pub
type
BorderRadius
=
GenericBorderRadius
<
LengthOrPercentage
>
;
pub
type
BorderCornerRadius
=
GenericBorderCornerRadius
<
LengthOrPercentage
>
;
pub
type
BorderSpacing
=
GenericBorderSpacing
<
NonNegativeLength
>
;
impl
BorderImageSideWidth
{
#
[
inline
]
pub
fn
one
(
)
-
>
Self
{
GenericBorderImageSideWidth
:
:
Number
(
1
.
)
}
}
impl
BorderSpacing
{
pub
fn
zero
(
)
-
>
Self
{
GenericBorderSpacing
(
Size
:
:
new
(
NonNegativeLength
:
:
zero
(
)
NonNegativeLength
:
:
zero
(
)
)
)
}
pub
fn
horizontal
(
&
self
)
-
>
Au
{
Au
:
:
from
(
*
self
.
0
.
width
(
)
)
}
pub
fn
vertical
(
&
self
)
-
>
Au
{
Au
:
:
from
(
*
self
.
0
.
height
(
)
)
}
}
impl
BorderCornerRadius
{
pub
fn
zero
(
)
-
>
Self
{
GenericBorderCornerRadius
(
Size
:
:
new
(
LengthOrPercentage
:
:
zero
(
)
LengthOrPercentage
:
:
zero
(
)
)
)
}
}
impl
ToAnimatedZero
for
BorderSpacing
{
#
[
inline
]
fn
to_animated_zero
(
&
self
)
-
>
Result
<
Self
(
)
>
{
Err
(
(
)
)
}
}
impl
ToAnimatedZero
for
BorderCornerRadius
{
#
[
inline
]
fn
to_animated_zero
(
&
self
)
-
>
Result
<
Self
(
)
>
{
Err
(
(
)
)
}
}
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
)
]
pub
struct
BorderImageRepeat
(
pub
BorderImageRepeatKeyword
pub
BorderImageRepeatKeyword
)
;
impl
BorderImageRepeat
{
pub
fn
stretch
(
)
-
>
Self
{
BorderImageRepeat
(
BorderImageRepeatKeyword
:
:
Stretch
BorderImageRepeatKeyword
:
:
Stretch
)
}
}
impl
ToCss
for
BorderImageRepeat
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
self
.
0
.
to_css
(
dest
)
?
;
if
self
.
0
!
=
self
.
1
{
dest
.
write_str
(
"
"
)
?
;
self
.
1
.
to_css
(
dest
)
?
;
}
Ok
(
(
)
)
}
}
impl
ToComputedValue
for
SpecifiedBorderImageRepeat
{
type
ComputedValue
=
BorderImageRepeat
;
#
[
inline
]
fn
to_computed_value
(
&
self
_
:
&
Context
)
-
>
Self
:
:
ComputedValue
{
BorderImageRepeat
(
self
.
0
self
.
1
.
unwrap_or
(
self
.
0
)
)
}
#
[
inline
]
fn
from_computed_value
(
computed
:
&
Self
:
:
ComputedValue
)
-
>
Self
{
SpecifiedBorderImageRepeat
(
computed
.
0
Some
(
computed
.
1
)
)
}
}
