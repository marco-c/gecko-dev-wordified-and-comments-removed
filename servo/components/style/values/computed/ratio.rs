use
crate
:
:
values
:
:
computed
:
:
NonNegativeNumber
;
use
crate
:
:
values
:
:
generics
:
:
ratio
:
:
Ratio
as
GenericRatio
;
use
crate
:
:
{
One
Zero
}
;
use
std
:
:
cmp
:
:
{
Ordering
PartialOrd
}
;
pub
type
Ratio
=
GenericRatio
<
NonNegativeNumber
>
;
impl
PartialOrd
for
Ratio
{
fn
partial_cmp
(
&
self
other
:
&
Self
)
-
>
Option
<
Ordering
>
{
f64
:
:
partial_cmp
(
&
(
(
self
.
0
)
.
0
as
f64
*
(
other
.
1
)
.
0
as
f64
)
&
(
(
self
.
1
)
.
0
as
f64
*
(
other
.
0
)
.
0
as
f64
)
)
}
}
impl
Ratio
{
pub
fn
new
(
a
:
f32
b
:
f32
)
-
>
Self
{
GenericRatio
(
a
.
into
(
)
b
.
into
(
)
)
}
pub
fn
used_value
(
self
)
-
>
Self
{
if
self
.
0
.
is_zero
(
)
&
&
self
.
1
.
is_zero
(
)
{
Ratio
:
:
new
(
One
:
:
one
(
)
Zero
:
:
zero
(
)
)
}
else
{
self
}
}
}
