use
std
:
:
fmt
;
use
style_traits
:
:
ToCss
;
use
values
:
:
computed
:
:
LengthOrPercentage
;
use
values
:
:
computed
:
:
position
:
:
Position
;
use
values
:
:
generics
:
:
basic_shape
:
:
{
BorderRadius
as
GenericBorderRadius
ShapeRadius
as
GenericShapeRadius
}
;
use
values
:
:
generics
:
:
basic_shape
:
:
{
InsetRect
as
GenericInsetRect
Polygon
as
GenericPolygon
ShapeSource
}
;
pub
use
values
:
:
generics
:
:
basic_shape
:
:
FillRule
;
pub
use
values
:
:
specified
:
:
basic_shape
:
:
{
self
GeometryBox
ShapeBox
}
;
pub
type
ShapeWithGeometryBox
=
ShapeSource
<
BasicShape
GeometryBox
>
;
pub
type
ShapeWithShapeBox
=
ShapeSource
<
BasicShape
ShapeBox
>
;
#
[
derive
(
Clone
PartialEq
Debug
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
allow
(
missing_docs
)
]
pub
enum
BasicShape
{
Inset
(
InsetRect
)
Circle
(
Circle
)
Ellipse
(
Ellipse
)
Polygon
(
Polygon
)
}
impl
ToCss
for
BasicShape
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
match
*
self
{
BasicShape
:
:
Inset
(
ref
rect
)
=
>
rect
.
to_css
(
dest
)
BasicShape
:
:
Circle
(
ref
circle
)
=
>
circle
.
to_css
(
dest
)
BasicShape
:
:
Ellipse
(
ref
e
)
=
>
e
.
to_css
(
dest
)
BasicShape
:
:
Polygon
(
ref
poly
)
=
>
poly
.
to_css
(
dest
)
}
}
}
pub
type
InsetRect
=
GenericInsetRect
<
LengthOrPercentage
>
;
#
[
derive
(
Clone
PartialEq
Copy
Debug
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
allow
(
missing_docs
)
]
pub
struct
Circle
{
pub
radius
:
ShapeRadius
pub
position
:
Position
}
impl
ToCss
for
Circle
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
try
!
(
self
.
radius
.
to_css
(
dest
)
)
;
try
!
(
dest
.
write_str
(
"
at
"
)
)
;
self
.
position
.
to_css
(
dest
)
}
}
#
[
derive
(
Clone
PartialEq
Copy
Debug
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
allow
(
missing_docs
)
]
pub
struct
Ellipse
{
pub
semiaxis_x
:
ShapeRadius
pub
semiaxis_y
:
ShapeRadius
pub
position
:
Position
}
impl
ToCss
for
Ellipse
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
try
!
(
dest
.
write_str
(
"
ellipse
(
"
)
)
;
if
(
self
.
semiaxis_x
self
.
semiaxis_y
)
!
=
Default
:
:
default
(
)
{
try
!
(
self
.
semiaxis_x
.
to_css
(
dest
)
)
;
try
!
(
dest
.
write_str
(
"
"
)
)
;
try
!
(
self
.
semiaxis_y
.
to_css
(
dest
)
)
;
try
!
(
dest
.
write_str
(
"
"
)
)
;
}
try
!
(
dest
.
write_str
(
"
at
"
)
)
;
try
!
(
self
.
position
.
to_css
(
dest
)
)
;
dest
.
write_str
(
"
)
"
)
}
}
pub
type
Polygon
=
GenericPolygon
<
LengthOrPercentage
>
;
pub
type
BorderRadius
=
GenericBorderRadius
<
LengthOrPercentage
>
;
pub
type
ShapeRadius
=
GenericShapeRadius
<
LengthOrPercentage
>
;
impl
Copy
for
ShapeRadius
{
}
