use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
use
values
:
:
computed
:
:
{
Image
LengthOrPercentage
}
;
use
values
:
:
computed
:
:
url
:
:
ComputedUrl
;
use
values
:
:
generics
:
:
basic_shape
as
generic
;
pub
type
ClippingShape
=
generic
:
:
ClippingShape
<
BasicShape
ComputedUrl
>
;
pub
type
FloatAreaShape
=
generic
:
:
FloatAreaShape
<
BasicShape
Image
>
;
pub
type
BasicShape
=
generic
:
:
BasicShape
<
LengthOrPercentage
LengthOrPercentage
LengthOrPercentage
>
;
pub
type
InsetRect
=
generic
:
:
InsetRect
<
LengthOrPercentage
>
;
pub
type
Circle
=
generic
:
:
Circle
<
LengthOrPercentage
LengthOrPercentage
LengthOrPercentage
>
;
pub
type
Ellipse
=
generic
:
:
Ellipse
<
LengthOrPercentage
LengthOrPercentage
LengthOrPercentage
>
;
pub
type
ShapeRadius
=
generic
:
:
ShapeRadius
<
LengthOrPercentage
>
;
impl
ToCss
for
Circle
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
dest
.
write_str
(
"
circle
(
"
)
?
;
self
.
radius
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
at
"
)
?
;
self
.
position
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
)
"
)
}
}
impl
ToCss
for
Ellipse
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
dest
.
write_str
(
"
ellipse
(
"
)
?
;
if
(
self
.
semiaxis_x
self
.
semiaxis_y
)
!
=
Default
:
:
default
(
)
{
self
.
semiaxis_x
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
"
)
?
;
self
.
semiaxis_y
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
"
)
?
;
}
dest
.
write_str
(
"
at
"
)
?
;
self
.
position
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
)
"
)
}
}
