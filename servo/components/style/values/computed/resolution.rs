use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
use
values
:
:
computed
:
:
{
Context
ToComputedValue
}
;
use
values
:
:
specified
;
use
values
:
:
CSSFloat
;
pub
struct
Resolution
(
CSSFloat
)
;
impl
Resolution
{
#
[
inline
]
pub
fn
dppx
(
&
self
)
-
>
CSSFloat
{
self
.
0
}
#
[
inline
]
pub
fn
from_dppx
(
dppx
:
CSSFloat
)
-
>
Self
{
Resolution
(
dppx
)
}
}
impl
ToComputedValue
for
specified
:
:
Resolution
{
type
ComputedValue
=
Resolution
;
#
[
inline
]
fn
to_computed_value
(
&
self
_
:
&
Context
)
-
>
Self
:
:
ComputedValue
{
Resolution
(
self
.
to_dppx
(
)
)
}
#
[
inline
]
fn
from_computed_value
(
computed
:
&
Self
:
:
ComputedValue
)
-
>
Self
{
specified
:
:
Resolution
:
:
Dppx
(
computed
.
dppx
(
)
)
}
}
impl
ToCss
for
Resolution
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
self
.
dppx
(
)
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
dppx
"
)
}
}
