use
crate
:
:
values
:
:
animated
:
:
color
:
:
AnimatedRGBA
;
use
crate
:
:
values
:
:
animated
:
:
ToAnimatedValue
;
use
crate
:
:
values
:
:
computed
:
:
percentage
:
:
Percentage
;
use
crate
:
:
values
:
:
generics
:
:
color
:
:
{
GenericCaretColor
GenericColor
GenericColorOrAuto
}
;
use
cssparser
:
:
{
Color
as
CSSParserColor
RGBA
}
;
use
std
:
:
fmt
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
pub
use
crate
:
:
values
:
:
specified
:
:
color
:
:
{
ColorScheme
PrintColorAdjust
}
;
pub
type
ColorPropertyValue
=
RGBA
;
pub
type
MozFontSmoothingBackgroundColor
=
RGBA
;
pub
type
Color
=
GenericColor
<
RGBA
Percentage
>
;
impl
ToCss
for
Color
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
match
*
self
{
Self
:
:
Numeric
(
ref
c
)
=
>
c
.
to_css
(
dest
)
Self
:
:
CurrentColor
=
>
cssparser
:
:
ToCss
:
:
to_css
(
&
CSSParserColor
:
:
CurrentColor
dest
)
Self
:
:
ColorMix
(
ref
m
)
=
>
m
.
to_css
(
dest
)
}
}
}
impl
Color
{
pub
fn
transparent
(
)
-
>
Color
{
Color
:
:
rgba
(
RGBA
:
:
transparent
(
)
)
}
pub
fn
black
(
)
-
>
Color
{
Color
:
:
rgba
(
RGBA
:
:
new
(
0
0
0
1
.
0
)
)
}
pub
fn
white
(
)
-
>
Color
{
Color
:
:
rgba
(
RGBA
:
:
new
(
255
255
255
1
.
0
)
)
}
pub
fn
into_rgba
(
mut
self
current_color
:
RGBA
)
-
>
RGBA
{
self
.
simplify
(
Some
(
&
current_color
)
)
;
*
self
.
as_numeric
(
)
.
unwrap
(
)
}
}
impl
ToAnimatedValue
for
RGBA
{
type
AnimatedValue
=
AnimatedRGBA
;
#
[
inline
]
fn
to_animated_value
(
self
)
-
>
Self
:
:
AnimatedValue
{
AnimatedRGBA
:
:
new
(
self
.
red_f32
(
)
self
.
green_f32
(
)
self
.
blue_f32
(
)
self
.
alpha_f32
(
)
)
}
#
[
inline
]
fn
from_animated_value
(
animated
:
Self
:
:
AnimatedValue
)
-
>
Self
{
RGBA
:
:
from_floats
(
animated
.
red
animated
.
green
animated
.
blue
animated
.
alpha
)
}
}
pub
type
ColorOrAuto
=
GenericColorOrAuto
<
Color
>
;
pub
type
CaretColor
=
GenericCaretColor
<
Color
>
;
