use
crate
:
:
color
:
:
AbsoluteColor
;
use
crate
:
:
values
:
:
animated
:
:
ToAnimatedZero
;
use
crate
:
:
values
:
:
computed
:
:
percentage
:
:
Percentage
;
use
crate
:
:
values
:
:
generics
:
:
color
:
:
{
GenericCaretColor
GenericColor
GenericColorOrAuto
}
;
use
cssparser
:
:
Color
as
CSSParserColor
;
use
std
:
:
fmt
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
pub
use
crate
:
:
values
:
:
specified
:
:
color
:
:
{
ColorScheme
ForcedColorAdjust
PrintColorAdjust
}
;
pub
type
ColorPropertyValue
=
AbsoluteColor
;
pub
type
MozFontSmoothingBackgroundColor
=
AbsoluteColor
;
pub
type
Color
=
GenericColor
<
Percentage
>
;
impl
ToCss
for
Color
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
match
*
self
{
Self
:
:
Absolute
(
ref
c
)
=
>
c
.
to_css
(
dest
)
Self
:
:
CurrentColor
=
>
cssparser
:
:
ToCss
:
:
to_css
(
&
CSSParserColor
:
:
CurrentColor
dest
)
Self
:
:
ColorMix
(
ref
m
)
=
>
m
.
to_css
(
dest
)
}
}
}
impl
Color
{
pub
fn
transparent
(
)
-
>
Color
{
Color
:
:
Absolute
(
AbsoluteColor
:
:
transparent
(
)
)
}
pub
fn
black
(
)
-
>
Color
{
Color
:
:
Absolute
(
AbsoluteColor
:
:
black
(
)
)
}
pub
fn
white
(
)
-
>
Color
{
Color
:
:
Absolute
(
AbsoluteColor
:
:
white
(
)
)
}
pub
fn
resolve_into_absolute
(
mut
self
current_color
:
&
AbsoluteColor
)
-
>
AbsoluteColor
{
self
.
simplify
(
Some
(
&
current_color
)
)
;
*
self
.
as_absolute
(
)
.
unwrap
(
)
}
}
impl
ToAnimatedZero
for
AbsoluteColor
{
fn
to_animated_zero
(
&
self
)
-
>
Result
<
Self
(
)
>
{
Ok
(
Self
:
:
transparent
(
)
)
}
}
pub
type
ColorOrAuto
=
GenericColorOrAuto
<
Color
>
;
pub
type
CaretColor
=
GenericCaretColor
<
Color
>
;
