use
std
:
:
fmt
;
use
style_traits
:
:
ToCss
;
use
values
:
:
computed
:
:
LengthOrPercentage
;
use
values
:
:
generics
:
:
position
:
:
{
Position
as
GenericPosition
PositionWithKeyword
}
;
use
values
:
:
generics
:
:
position
:
:
HorizontalPosition
as
GenericHorizontalPosition
;
use
values
:
:
generics
:
:
position
:
:
VerticalPosition
as
GenericVerticalPosition
;
pub
type
Position
=
PositionWithKeyword
<
LengthOrPercentage
>
;
impl
Copy
for
Position
{
}
pub
type
OriginPosition
=
GenericPosition
<
LengthOrPercentage
LengthOrPercentage
>
;
impl
Copy
for
OriginPosition
{
}
impl
OriginPosition
{
#
[
inline
]
pub
fn
center
(
)
-
>
OriginPosition
{
GenericPosition
{
horizontal
:
LengthOrPercentage
:
:
Percentage
(
0
.
5
)
vertical
:
LengthOrPercentage
:
:
Percentage
(
0
.
5
)
}
}
}
impl
Position
{
#
[
inline
]
pub
fn
zero
(
)
-
>
Self
{
Position
{
horizontal
:
GenericHorizontalPosition
(
LengthOrPercentage
:
:
zero
(
)
)
vertical
:
GenericVerticalPosition
(
LengthOrPercentage
:
:
zero
(
)
)
}
}
}
impl
ToCss
for
Position
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
self
.
horizontal
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
"
)
?
;
self
.
vertical
.
to_css
(
dest
)
}
}
pub
type
HorizontalPosition
=
GenericHorizontalPosition
<
LengthOrPercentage
>
;
impl
Copy
for
HorizontalPosition
{
}
impl
HorizontalPosition
{
#
[
inline
]
pub
fn
zero
(
)
-
>
HorizontalPosition
{
GenericHorizontalPosition
(
LengthOrPercentage
:
:
Percentage
(
0
.
0
)
)
}
}
pub
type
VerticalPosition
=
GenericVerticalPosition
<
LengthOrPercentage
>
;
impl
Copy
for
VerticalPosition
{
}
impl
VerticalPosition
{
#
[
inline
]
pub
fn
zero
(
)
-
>
VerticalPosition
{
GenericVerticalPosition
(
LengthOrPercentage
:
:
Percentage
(
0
.
0
)
)
}
}
