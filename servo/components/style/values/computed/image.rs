use
crate
:
:
values
:
:
computed
:
:
percentage
:
:
Percentage
;
use
crate
:
:
values
:
:
computed
:
:
position
:
:
Position
;
use
crate
:
:
values
:
:
computed
:
:
url
:
:
ComputedImageUrl
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
crate
:
:
values
:
:
computed
:
:
NumberOrPercentage
;
use
crate
:
:
values
:
:
computed
:
:
{
Angle
Color
Context
}
;
use
crate
:
:
values
:
:
computed
:
:
{
AngleOrPercentage
LengthPercentage
NonNegativeLength
NonNegativeLengthPercentage
Resolution
ToComputedValue
}
;
use
crate
:
:
values
:
:
generics
:
:
image
:
:
{
self
as
generic
GradientCompatMode
}
;
use
crate
:
:
values
:
:
specified
:
:
image
as
specified
;
use
crate
:
:
values
:
:
specified
:
:
position
:
:
{
HorizontalPositionKeyword
VerticalPositionKeyword
}
;
use
std
:
:
f32
:
:
consts
:
:
PI
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
pub
use
specified
:
:
ImageRendering
;
pub
type
Image
=
generic
:
:
GenericImage
<
Gradient
MozImageRect
ComputedImageUrl
Color
Percentage
Resolution
>
;
size_of_test
!
(
Image
16
)
;
pub
type
Gradient
=
generic
:
:
GenericGradient
<
LineDirection
LengthPercentage
NonNegativeLength
NonNegativeLengthPercentage
Position
Angle
AngleOrPercentage
Color
>
;
pub
type
CrossFade
=
generic
:
:
CrossFade
<
Image
Color
Percentage
>
;
pub
type
EndingShape
=
generic
:
:
GenericEndingShape
<
NonNegativeLength
NonNegativeLengthPercentage
>
;
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
ToResolvedValue
)
]
#
[
repr
(
C
u8
)
]
pub
enum
LineDirection
{
Angle
(
Angle
)
Horizontal
(
HorizontalPositionKeyword
)
Vertical
(
VerticalPositionKeyword
)
Corner
(
HorizontalPositionKeyword
VerticalPositionKeyword
)
}
pub
type
ImageSet
=
generic
:
:
GenericImageSet
<
Image
Resolution
>
;
impl
ToComputedValue
for
specified
:
:
ImageSet
{
type
ComputedValue
=
ImageSet
;
fn
to_computed_value
(
&
self
context
:
&
Context
)
-
>
Self
:
:
ComputedValue
{
let
items
=
self
.
items
.
to_computed_value
(
context
)
;
let
dpr
=
context
.
device
(
)
.
device_pixel_ratio
(
)
.
get
(
)
;
let
mut
supported_image
=
false
;
let
mut
selected_index
=
0
;
let
mut
selected_resolution
=
items
[
0
]
.
resolution
.
dppx
(
)
;
for
(
i
item
)
in
items
.
iter
(
)
.
enumerate
(
)
{
if
item
.
has_mime_type
&
&
!
context
.
device
(
)
.
is_supported_mime_type
(
&
item
.
mime_type
)
{
continue
;
}
let
candidate_resolution
=
item
.
resolution
.
dppx
(
)
;
let
better_candidate
=
|
|
{
if
selected_resolution
<
dpr
&
&
candidate_resolution
>
selected_resolution
{
return
true
;
}
if
candidate_resolution
<
selected_resolution
&
&
candidate_resolution
>
=
dpr
{
return
true
;
}
false
}
;
if
!
supported_image
|
|
better_candidate
(
)
{
supported_image
=
true
;
selected_index
=
i
;
selected_resolution
=
candidate_resolution
;
}
}
ImageSet
{
selected_index
items
}
}
fn
from_computed_value
(
computed
:
&
Self
:
:
ComputedValue
)
-
>
Self
{
Self
{
selected_index
:
0
items
:
ToComputedValue
:
:
from_computed_value
(
&
computed
.
items
)
}
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
type
MozImageRect
=
generic
:
:
GenericMozImageRect
<
NumberOrPercentage
ComputedImageUrl
>
;
#
[
cfg
(
not
(
feature
=
"
gecko
"
)
)
]
pub
type
MozImageRect
=
specified
:
:
MozImageRect
;
impl
generic
:
:
LineDirection
for
LineDirection
{
fn
points_downwards
(
&
self
compat_mode
:
GradientCompatMode
)
-
>
bool
{
match
*
self
{
LineDirection
:
:
Angle
(
angle
)
=
>
angle
.
radians
(
)
=
=
PI
LineDirection
:
:
Vertical
(
VerticalPositionKeyword
:
:
Bottom
)
=
>
{
compat_mode
=
=
GradientCompatMode
:
:
Modern
}
LineDirection
:
:
Vertical
(
VerticalPositionKeyword
:
:
Top
)
=
>
{
compat_mode
!
=
GradientCompatMode
:
:
Modern
}
_
=
>
false
}
}
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
compat_mode
:
GradientCompatMode
)
-
>
fmt
:
:
Result
where
W
:
Write
{
match
*
self
{
LineDirection
:
:
Angle
(
ref
angle
)
=
>
angle
.
to_css
(
dest
)
LineDirection
:
:
Horizontal
(
x
)
=
>
{
if
compat_mode
=
=
GradientCompatMode
:
:
Modern
{
dest
.
write_str
(
"
to
"
)
?
;
}
x
.
to_css
(
dest
)
}
LineDirection
:
:
Vertical
(
y
)
=
>
{
if
compat_mode
=
=
GradientCompatMode
:
:
Modern
{
dest
.
write_str
(
"
to
"
)
?
;
}
y
.
to_css
(
dest
)
}
LineDirection
:
:
Corner
(
x
y
)
=
>
{
if
compat_mode
=
=
GradientCompatMode
:
:
Modern
{
dest
.
write_str
(
"
to
"
)
?
;
}
x
.
to_css
(
dest
)
?
;
dest
.
write_char
(
'
'
)
?
;
y
.
to_css
(
dest
)
}
}
}
}
impl
ToComputedValue
for
specified
:
:
LineDirection
{
type
ComputedValue
=
LineDirection
;
fn
to_computed_value
(
&
self
context
:
&
Context
)
-
>
Self
:
:
ComputedValue
{
match
*
self
{
specified
:
:
LineDirection
:
:
Angle
(
ref
angle
)
=
>
{
LineDirection
:
:
Angle
(
angle
.
to_computed_value
(
context
)
)
}
specified
:
:
LineDirection
:
:
Horizontal
(
x
)
=
>
LineDirection
:
:
Horizontal
(
x
)
specified
:
:
LineDirection
:
:
Vertical
(
y
)
=
>
LineDirection
:
:
Vertical
(
y
)
specified
:
:
LineDirection
:
:
Corner
(
x
y
)
=
>
LineDirection
:
:
Corner
(
x
y
)
}
}
fn
from_computed_value
(
computed
:
&
Self
:
:
ComputedValue
)
-
>
Self
{
match
*
computed
{
LineDirection
:
:
Angle
(
ref
angle
)
=
>
{
specified
:
:
LineDirection
:
:
Angle
(
ToComputedValue
:
:
from_computed_value
(
angle
)
)
}
LineDirection
:
:
Horizontal
(
x
)
=
>
specified
:
:
LineDirection
:
:
Horizontal
(
x
)
LineDirection
:
:
Vertical
(
y
)
=
>
specified
:
:
LineDirection
:
:
Vertical
(
y
)
LineDirection
:
:
Corner
(
x
y
)
=
>
specified
:
:
LineDirection
:
:
Corner
(
x
y
)
}
}
}
