use
values
:
:
CustomIdent
;
use
values
:
:
computed
:
:
{
Context
ToComputedValue
}
;
use
values
:
:
generics
:
:
counters
:
:
CounterIntegerList
;
use
values
:
:
specified
:
:
{
CounterIncrement
as
SpecifiedCounterIncrement
CounterReset
as
SpecifiedCounterReset
}
;
type
ComputedIntegerList
=
CounterIntegerList
<
i32
>
;
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
ToCss
)
]
pub
struct
CounterIncrement
(
pub
ComputedIntegerList
)
;
impl
CounterIncrement
{
#
[
inline
]
pub
fn
none
(
)
-
>
CounterIncrement
{
CounterIncrement
(
ComputedIntegerList
:
:
new
(
Vec
:
:
new
(
)
)
)
}
pub
fn
new
(
vec
:
Vec
<
(
CustomIdent
i32
)
>
)
-
>
CounterIncrement
{
CounterIncrement
(
ComputedIntegerList
:
:
new
(
vec
)
)
}
pub
fn
get_values
(
&
self
)
-
>
&
[
(
CustomIdent
i32
)
]
{
self
.
0
.
get_values
(
)
}
}
impl
ToComputedValue
for
SpecifiedCounterIncrement
{
type
ComputedValue
=
CounterIncrement
;
fn
to_computed_value
(
&
self
context
:
&
Context
)
-
>
Self
:
:
ComputedValue
{
CounterIncrement
(
self
.
0
.
to_computed_value
(
context
)
)
}
fn
from_computed_value
(
computed
:
&
Self
:
:
ComputedValue
)
-
>
Self
{
SpecifiedCounterIncrement
(
ToComputedValue
:
:
from_computed_value
(
&
computed
.
0
)
)
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
ToCss
)
]
pub
struct
CounterReset
(
pub
ComputedIntegerList
)
;
impl
CounterReset
{
#
[
inline
]
pub
fn
none
(
)
-
>
CounterReset
{
CounterReset
(
ComputedIntegerList
:
:
new
(
Vec
:
:
new
(
)
)
)
}
pub
fn
new
(
vec
:
Vec
<
(
CustomIdent
i32
)
>
)
-
>
CounterReset
{
CounterReset
(
ComputedIntegerList
:
:
new
(
vec
)
)
}
pub
fn
get_values
(
&
self
)
-
>
&
[
(
CustomIdent
i32
)
]
{
self
.
0
.
get_values
(
)
}
}
impl
ToComputedValue
for
SpecifiedCounterReset
{
type
ComputedValue
=
CounterReset
;
fn
to_computed_value
(
&
self
context
:
&
Context
)
-
>
Self
:
:
ComputedValue
{
CounterReset
(
self
.
0
.
to_computed_value
(
context
)
)
}
fn
from_computed_value
(
computed
:
&
Self
:
:
ComputedValue
)
-
>
Self
{
SpecifiedCounterReset
(
ToComputedValue
:
:
from_computed_value
(
&
computed
.
0
)
)
}
}
