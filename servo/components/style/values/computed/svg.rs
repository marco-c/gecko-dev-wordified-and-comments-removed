use
app_units
:
:
Au
;
use
values
:
:
{
Either
RGBA
}
;
use
values
:
:
computed
:
:
{
LengthOrPercentageOrNumber
Opacity
}
;
use
values
:
:
generics
:
:
svg
as
generic
;
pub
type
SVGPaint
=
generic
:
:
SVGPaint
<
RGBA
>
;
pub
type
SVGPaintKind
=
generic
:
:
SVGPaintKind
<
RGBA
>
;
impl
Default
for
SVGPaint
{
fn
default
(
)
-
>
Self
{
SVGPaint
{
kind
:
generic
:
:
SVGPaintKind
:
:
None
fallback
:
None
}
}
}
impl
SVGPaint
{
pub
fn
black
(
)
-
>
Self
{
let
rgba
=
RGBA
:
:
from_floats
(
0
.
0
.
0
.
1
.
)
;
SVGPaint
{
kind
:
generic
:
:
SVGPaintKind
:
:
Color
(
rgba
)
fallback
:
None
}
}
}
pub
type
SVGLength
=
generic
:
:
SVGLength
<
LengthOrPercentageOrNumber
>
;
impl
From
<
Au
>
for
SVGLength
{
fn
from
(
length
:
Au
)
-
>
Self
{
generic
:
:
SVGLength
:
:
Length
(
Either
:
:
Second
(
length
.
into
(
)
)
)
}
}
pub
type
SVGStrokeDashArray
=
generic
:
:
SVGStrokeDashArray
<
LengthOrPercentageOrNumber
>
;
impl
Default
for
SVGStrokeDashArray
{
fn
default
(
)
-
>
Self
{
generic
:
:
SVGStrokeDashArray
:
:
Values
(
vec
!
[
]
)
}
}
pub
type
SVGOpacity
=
generic
:
:
SVGOpacity
<
Opacity
>
;
impl
Default
for
SVGOpacity
{
fn
default
(
)
-
>
Self
{
generic
:
:
SVGOpacity
:
:
Opacity
(
1
.
)
}
}
