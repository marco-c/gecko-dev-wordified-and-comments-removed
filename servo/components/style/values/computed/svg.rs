use
crate
:
:
values
:
:
computed
:
:
color
:
:
Color
;
use
crate
:
:
values
:
:
computed
:
:
url
:
:
ComputedUrl
;
use
crate
:
:
values
:
:
computed
:
:
{
LengthPercentage
NonNegativeLengthPercentage
}
;
use
crate
:
:
values
:
:
computed
:
:
{
NonNegativeNumber
Number
Opacity
}
;
use
crate
:
:
values
:
:
generics
:
:
svg
as
generic
;
use
crate
:
:
values
:
:
RGBA
;
pub
use
crate
:
:
values
:
:
specified
:
:
SVGPaintOrder
;
pub
use
crate
:
:
values
:
:
specified
:
:
MozContextProperties
;
pub
type
SVGPaint
=
generic
:
:
SVGPaint
<
Color
ComputedUrl
>
;
pub
type
SVGPaintKind
=
generic
:
:
SVGPaintKind
<
Color
ComputedUrl
>
;
impl
Default
for
SVGPaint
{
fn
default
(
)
-
>
Self
{
SVGPaint
{
kind
:
generic
:
:
SVGPaintKind
:
:
None
fallback
:
None
}
}
}
impl
SVGPaint
{
pub
fn
black
(
)
-
>
Self
{
let
rgba
=
RGBA
:
:
from_floats
(
0
.
0
.
0
.
1
.
)
.
into
(
)
;
SVGPaint
{
kind
:
generic
:
:
SVGPaintKind
:
:
Color
(
rgba
)
fallback
:
None
}
}
}
pub
type
SvgLengthPercentageOrNumber
=
generic
:
:
SvgLengthPercentageOrNumber
<
LengthPercentage
Number
>
;
pub
type
SVGLength
=
generic
:
:
SVGLength
<
SvgLengthPercentageOrNumber
>
;
impl
SVGLength
{
pub
fn
zero
(
)
-
>
Self
{
generic
:
:
SVGLength
:
:
Length
(
generic
:
:
SvgLengthPercentageOrNumber
:
:
LengthPercentage
(
LengthPercentage
:
:
zero
(
)
)
)
}
}
pub
type
NonNegativeSvgLengthPercentageOrNumber
=
generic
:
:
SvgLengthPercentageOrNumber
<
NonNegativeLengthPercentage
NonNegativeNumber
>
;
impl
Into
<
NonNegativeSvgLengthPercentageOrNumber
>
for
SvgLengthPercentageOrNumber
{
fn
into
(
self
)
-
>
NonNegativeSvgLengthPercentageOrNumber
{
match
self
{
generic
:
:
SvgLengthPercentageOrNumber
:
:
LengthPercentage
(
lop
)
=
>
{
generic
:
:
SvgLengthPercentageOrNumber
:
:
LengthPercentage
(
lop
.
into
(
)
)
}
generic
:
:
SvgLengthPercentageOrNumber
:
:
Number
(
num
)
=
>
{
generic
:
:
SvgLengthPercentageOrNumber
:
:
Number
(
num
.
into
(
)
)
}
}
}
}
pub
type
SVGWidth
=
generic
:
:
SVGLength
<
NonNegativeSvgLengthPercentageOrNumber
>
;
impl
SVGWidth
{
pub
fn
one
(
)
-
>
Self
{
use
crate
:
:
values
:
:
generics
:
:
NonNegative
;
generic
:
:
SVGLength
:
:
Length
(
generic
:
:
SvgLengthPercentageOrNumber
:
:
LengthPercentage
(
NonNegative
(
LengthPercentage
:
:
one
(
)
)
)
)
}
}
pub
type
SVGStrokeDashArray
=
generic
:
:
SVGStrokeDashArray
<
NonNegativeSvgLengthPercentageOrNumber
>
;
impl
Default
for
SVGStrokeDashArray
{
fn
default
(
)
-
>
Self
{
generic
:
:
SVGStrokeDashArray
:
:
Values
(
vec
!
[
]
)
}
}
pub
type
SVGOpacity
=
generic
:
:
SVGOpacity
<
Opacity
>
;
impl
Default
for
SVGOpacity
{
fn
default
(
)
-
>
Self
{
generic
:
:
SVGOpacity
:
:
Opacity
(
1
.
)
}
}
