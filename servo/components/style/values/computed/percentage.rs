use
properties
:
:
animated_properties
:
:
Animatable
;
use
std
:
:
fmt
;
use
style_traits
:
:
ToCss
;
use
values
:
:
CSSFloat
;
use
values
:
:
animated
:
:
ToAnimatedZero
;
#
[
derive
(
Clone
ComputeSquaredDistance
Copy
Debug
Default
HasViewportPercentage
PartialEq
PartialOrd
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
HeapSizeOf
Serialize
)
)
]
pub
struct
Percentage
(
pub
CSSFloat
)
;
impl
Percentage
{
#
[
inline
]
pub
fn
zero
(
)
-
>
Self
{
Percentage
(
0
.
)
}
#
[
inline
]
pub
fn
hundred
(
)
-
>
Self
{
Percentage
(
1
.
)
}
#
[
inline
]
pub
fn
abs
(
&
self
)
-
>
Self
{
Percentage
(
self
.
0
.
abs
(
)
)
}
}
impl
Animatable
for
Percentage
{
#
[
inline
]
fn
add_weighted
(
&
self
other
:
&
Self
self_portion
:
f64
other_portion
:
f64
)
-
>
Result
<
Self
(
)
>
{
Ok
(
Percentage
(
(
self
.
0
as
f64
*
self_portion
+
other
.
0
as
f64
*
other_portion
)
as
f32
)
)
}
}
impl
ToAnimatedZero
for
Percentage
{
#
[
inline
]
fn
to_animated_zero
(
&
self
)
-
>
Result
<
Self
(
)
>
{
Ok
(
Percentage
(
0
.
)
)
}
}
impl
ToCss
for
Percentage
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
write
!
(
dest
"
{
}
%
"
self
.
0
*
100
.
)
}
}
