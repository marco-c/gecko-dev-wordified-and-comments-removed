use
app_units
:
:
Au
;
use
cssparser
:
:
Parser
;
use
parser
:
:
{
Parse
ParserContext
}
;
use
std
:
:
fmt
;
use
style_traits
:
:
{
ParseError
StyleParseErrorKind
ToCss
}
;
use
values
:
:
animated
:
:
ToAnimatedValue
;
use
values
:
:
computed
:
:
{
Context
NonNegativeLength
ToComputedValue
}
;
use
values
:
:
specified
:
:
font
as
specified
;
use
values
:
:
specified
:
:
length
:
:
{
FontBaseSize
NoCalcLength
}
;
pub
use
values
:
:
computed
:
:
Length
as
MozScriptMinSize
;
pub
use
values
:
:
specified
:
:
font
:
:
XTextZoom
;
#
[
derive
(
Clone
ComputeSquaredDistance
Copy
Debug
Eq
Hash
MallocSizeOf
PartialEq
ToCss
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
Serialize
)
)
]
pub
struct
FontWeight
(
pub
u16
)
;
#
[
derive
(
Animate
ComputeSquaredDistance
MallocSizeOf
ToAnimatedZero
)
]
#
[
derive
(
Clone
Copy
Debug
PartialEq
)
]
pub
struct
FontSize
{
pub
size
:
NonNegativeLength
pub
keyword_info
:
Option
<
KeywordInfo
>
}
#
[
derive
(
Animate
ComputeSquaredDistance
MallocSizeOf
ToAnimatedValue
ToAnimatedZero
)
]
#
[
derive
(
Clone
Copy
Debug
PartialEq
)
]
pub
struct
KeywordInfo
{
pub
kw
:
specified
:
:
KeywordSize
pub
factor
:
f32
pub
offset
:
NonNegativeLength
}
impl
KeywordInfo
{
pub
fn
to_computed_value
(
&
self
context
:
&
Context
)
-
>
NonNegativeLength
{
let
base
=
context
.
maybe_zoom_text
(
self
.
kw
.
to_computed_value
(
context
)
)
;
base
.
scale_by
(
self
.
factor
)
+
context
.
maybe_zoom_text
(
self
.
offset
)
}
pub
fn
compose
(
self
factor
:
f32
offset
:
NonNegativeLength
)
-
>
Self
{
KeywordInfo
{
kw
:
self
.
kw
factor
:
self
.
factor
*
factor
offset
:
self
.
offset
.
scale_by
(
factor
)
+
offset
}
}
pub
fn
medium
(
)
-
>
Self
{
specified
:
:
KeywordSize
:
:
Medium
.
into
(
)
}
}
impl
From
<
specified
:
:
KeywordSize
>
for
KeywordInfo
{
fn
from
(
x
:
specified
:
:
KeywordSize
)
-
>
Self
{
KeywordInfo
{
kw
:
x
factor
:
1
.
offset
:
Au
(
0
)
.
into
(
)
}
}
}
impl
FontWeight
{
pub
fn
normal
(
)
-
>
Self
{
FontWeight
(
400
)
}
pub
fn
bold
(
)
-
>
Self
{
FontWeight
(
700
)
}
pub
fn
from_int
(
n
:
i32
)
-
>
Result
<
Self
(
)
>
{
if
n
>
=
100
&
&
n
<
=
900
&
&
n
%
100
=
=
0
{
Ok
(
FontWeight
(
n
as
u16
)
)
}
else
{
Err
(
(
)
)
}
}
pub
fn
from_gecko_weight
(
weight
:
u16
)
-
>
Self
{
FontWeight
(
weight
)
}
pub
fn
is_bold
(
&
self
)
-
>
bool
{
self
.
0
>
500
}
pub
fn
bolder
(
self
)
-
>
Self
{
if
self
.
0
<
400
{
FontWeight
(
400
)
}
else
if
self
.
0
<
600
{
FontWeight
(
700
)
}
else
{
FontWeight
(
900
)
}
}
pub
fn
lighter
(
self
)
-
>
Self
{
if
self
.
0
<
600
{
FontWeight
(
100
)
}
else
if
self
.
0
<
800
{
FontWeight
(
400
)
}
else
{
FontWeight
(
700
)
}
}
}
impl
Parse
for
FontWeight
{
fn
parse
<
'
i
'
t
>
(
_
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
FontWeight
ParseError
<
'
i
>
>
{
FontWeight
:
:
from_int
(
input
.
expect_integer
(
)
?
)
.
map_err
(
|
_
|
input
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
}
}
impl
FontSize
{
pub
fn
size
(
self
)
-
>
Au
{
self
.
size
.
into
(
)
}
}
impl
ToCss
for
FontSize
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
self
.
size
.
to_css
(
dest
)
}
}
impl
ToAnimatedValue
for
FontSize
{
type
AnimatedValue
=
NonNegativeLength
;
#
[
inline
]
fn
to_animated_value
(
self
)
-
>
Self
:
:
AnimatedValue
{
self
.
size
}
#
[
inline
]
fn
from_animated_value
(
animated
:
Self
:
:
AnimatedValue
)
-
>
Self
{
FontSize
{
size
:
animated
.
clamp
(
)
keyword_info
:
None
}
}
}
impl
ToComputedValue
for
specified
:
:
MozScriptMinSize
{
type
ComputedValue
=
MozScriptMinSize
;
fn
to_computed_value
(
&
self
cx
:
&
Context
)
-
>
MozScriptMinSize
{
let
base_size
=
FontBaseSize
:
:
InheritedStyle
;
match
self
.
0
{
NoCalcLength
:
:
FontRelative
(
value
)
=
>
{
value
.
to_computed_value
(
cx
base_size
)
}
NoCalcLength
:
:
ServoCharacterWidth
(
value
)
=
>
{
value
.
to_computed_value
(
base_size
.
resolve
(
cx
)
)
}
ref
l
=
>
{
l
.
to_computed_value
(
cx
)
}
}
}
fn
from_computed_value
(
other
:
&
MozScriptMinSize
)
-
>
Self
{
specified
:
:
MozScriptMinSize
(
ToComputedValue
:
:
from_computed_value
(
other
)
)
}
}
