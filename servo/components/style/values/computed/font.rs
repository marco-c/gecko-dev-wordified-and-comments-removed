use
app_units
:
:
Au
;
use
std
:
:
fmt
;
use
style_traits
:
:
ToCss
;
use
values
:
:
animated
:
:
ToAnimatedValue
;
use
values
:
:
computed
:
:
NonNegativeLength
;
use
values
:
:
specified
:
:
font
as
specified
;
pub
use
values
:
:
specified
:
:
font
:
:
XTextZoom
;
#
[
derive
(
Animate
ComputeSquaredDistance
MallocSizeOf
ToAnimatedZero
)
]
#
[
derive
(
Clone
Copy
Debug
PartialEq
)
]
pub
struct
FontSize
{
pub
size
:
NonNegativeLength
pub
keyword_info
:
Option
<
KeywordInfo
>
}
#
[
derive
(
Animate
ComputeSquaredDistance
MallocSizeOf
ToAnimatedValue
ToAnimatedZero
)
]
#
[
derive
(
Clone
Copy
Debug
PartialEq
)
]
pub
struct
KeywordInfo
{
pub
kw
:
specified
:
:
KeywordSize
pub
factor
:
f32
pub
offset
:
NonNegativeLength
}
impl
KeywordInfo
{
pub
fn
compose
(
self
factor
:
f32
offset
:
NonNegativeLength
)
-
>
Self
{
KeywordInfo
{
kw
:
self
.
kw
factor
:
self
.
factor
*
factor
offset
:
self
.
offset
.
scale_by
(
factor
)
+
offset
}
}
pub
fn
medium
(
)
-
>
Self
{
specified
:
:
KeywordSize
:
:
Medium
.
into
(
)
}
}
impl
From
<
specified
:
:
KeywordSize
>
for
KeywordInfo
{
fn
from
(
x
:
specified
:
:
KeywordSize
)
-
>
Self
{
KeywordInfo
{
kw
:
x
factor
:
1
.
offset
:
Au
(
0
)
.
into
(
)
}
}
}
impl
FontSize
{
pub
fn
size
(
self
)
-
>
Au
{
self
.
size
.
into
(
)
}
}
impl
ToCss
for
FontSize
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
self
.
size
.
to_css
(
dest
)
}
}
impl
ToAnimatedValue
for
FontSize
{
type
AnimatedValue
=
NonNegativeLength
;
#
[
inline
]
fn
to_animated_value
(
self
)
-
>
Self
:
:
AnimatedValue
{
self
.
size
}
#
[
inline
]
fn
from_animated_value
(
animated
:
Self
:
:
AnimatedValue
)
-
>
Self
{
FontSize
{
size
:
animated
.
clamp
(
)
keyword_info
:
None
}
}
}
