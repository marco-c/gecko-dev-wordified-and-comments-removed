use
values
:
:
computed
:
:
{
Angle
Number
}
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
values
:
:
computed
:
:
color
:
:
Color
;
use
values
:
:
computed
:
:
length
:
:
Length
;
use
values
:
:
generics
:
:
effects
:
:
Filter
as
GenericFilter
;
use
values
:
:
generics
:
:
effects
:
:
FilterList
as
GenericFilterList
;
pub
type
FilterList
=
GenericFilterList
<
Filter
>
;
pub
type
Filter
=
GenericFilter
<
Angle
Number
Length
DropShadow
>
;
#
[
cfg
(
not
(
feature
=
"
gecko
"
)
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
HeapSizeOf
Serialize
)
)
]
#
[
derive
(
Clone
Debug
PartialEq
ToCss
)
]
pub
enum
DropShadow
{
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
derive
(
Clone
Debug
PartialEq
ToCss
)
]
pub
struct
DropShadow
{
pub
color
:
Color
pub
horizontal
:
Length
pub
vertical
:
Length
pub
blur
:
Length
}
impl
FilterList
{
pub
fn
opacity
(
&
self
)
-
>
Number
{
let
mut
opacity
=
0
.
;
for
filter
in
&
*
self
.
0
{
if
let
GenericFilter
:
:
Opacity
(
factor
)
=
*
filter
{
opacity
*
=
factor
}
}
opacity
}
}
