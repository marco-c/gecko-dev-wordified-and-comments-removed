use
crate
:
:
parser
:
:
ParserContext
;
use
crate
:
:
values
:
:
generics
:
:
Optional
;
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
Serialize
Deserialize
)
]
#
[
repr
(
C
)
]
pub
struct
LinearStop
<
Number
Percentage
>
{
pub
output
:
Number
#
[
css
(
skip_if
=
"
Optional
:
:
is_none
"
)
]
pub
input_start
:
Optional
<
Percentage
>
#
[
css
(
skip_if
=
"
Optional
:
:
is_none
"
)
]
pub
input_end
:
Optional
<
Percentage
>
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
Serialize
Deserialize
)
]
#
[
value_info
(
ty
=
"
TIMING_FUNCTION
"
)
]
#
[
repr
(
u8
C
)
]
/
/
/
cbindgen
:
private
-
default
-
tagged
-
enum
-
constructor
=
false
pub
enum
TimingFunction
<
Integer
Number
Percentage
>
{
Keyword
(
TimingKeyword
)
#
[
allow
(
missing_docs
)
]
#
[
css
(
comma
function
)
]
CubicBezier
{
x1
:
Number
y1
:
Number
x2
:
Number
y2
:
Number
}
#
[
css
(
comma
function
)
]
#
[
value_info
(
other_values
=
"
step
-
start
step
-
end
"
)
]
Steps
(
Integer
#
[
css
(
skip_if
=
"
is_end
"
)
]
StepPosition
)
#
[
css
(
comma
function
=
"
linear
"
)
]
LinearFunction
(
#
[
css
(
iterable
)
]
crate
:
:
OwnedSlice
<
LinearStop
<
Number
Percentage
>
>
)
}
#
[
allow
(
missing_docs
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
Serialize
)
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
MallocSizeOf
Parse
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
Serialize
Deserialize
)
]
#
[
repr
(
u8
)
]
pub
enum
TimingKeyword
{
Linear
Ease
EaseIn
EaseOut
EaseInOut
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
fn
step_position_jump_enabled
(
_context
:
&
ParserContext
)
-
>
bool
{
static_prefs
:
:
pref
!
(
"
layout
.
css
.
step
-
position
-
jump
.
enabled
"
)
}
#
[
cfg
(
feature
=
"
servo
"
)
]
fn
step_position_jump_enabled
(
_context
:
&
ParserContext
)
-
>
bool
{
false
}
#
[
allow
(
missing_docs
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
Serialize
)
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
MallocSizeOf
Parse
PartialEq
ToComputedValue
ToCss
ToResolvedValue
ToShmem
Serialize
Deserialize
)
]
#
[
repr
(
u8
)
]
pub
enum
StepPosition
{
#
[
parse
(
condition
=
"
step_position_jump_enabled
"
)
]
JumpStart
#
[
parse
(
condition
=
"
step_position_jump_enabled
"
)
]
JumpEnd
#
[
parse
(
condition
=
"
step_position_jump_enabled
"
)
]
JumpNone
#
[
parse
(
condition
=
"
step_position_jump_enabled
"
)
]
JumpBoth
Start
End
}
#
[
inline
]
fn
is_end
(
position
:
&
StepPosition
)
-
>
bool
{
*
position
=
=
StepPosition
:
:
JumpEnd
|
|
*
position
=
=
StepPosition
:
:
End
}
impl
<
Integer
Number
Percentage
>
TimingFunction
<
Integer
Number
Percentage
>
{
#
[
inline
]
pub
fn
ease
(
)
-
>
Self
{
TimingFunction
:
:
Keyword
(
TimingKeyword
:
:
Ease
)
}
}
