use
values
:
:
CSSFloat
;
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToCss
)
]
#
[
value_info
(
ty
=
"
TIMING_FUNCTION
"
)
]
pub
enum
TimingFunction
<
Integer
Number
>
{
Keyword
(
TimingKeyword
)
#
[
allow
(
missing_docs
)
]
#
[
css
(
comma
function
)
]
CubicBezier
{
x1
:
Number
y1
:
Number
x2
:
Number
y2
:
Number
}
#
[
css
(
comma
function
)
]
#
[
value_info
(
other_values
=
"
step
-
start
step
-
end
"
)
]
Steps
(
Integer
#
[
css
(
skip_if
=
"
is_end
"
)
]
StepPosition
)
}
#
[
allow
(
missing_docs
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
Serialize
)
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
MallocSizeOf
Parse
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
)
]
pub
enum
TimingKeyword
{
Linear
Ease
EaseIn
EaseOut
EaseInOut
}
#
[
allow
(
missing_docs
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
Serialize
)
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
MallocSizeOf
Parse
PartialEq
ToComputedValue
ToCss
)
]
pub
enum
StepPosition
{
Start
End
}
#
[
inline
]
fn
is_end
(
position
:
&
StepPosition
)
-
>
bool
{
*
position
=
=
StepPosition
:
:
End
}
impl
<
Integer
Number
>
TimingFunction
<
Integer
Number
>
{
#
[
inline
]
pub
fn
ease
(
)
-
>
Self
{
TimingFunction
:
:
Keyword
(
TimingKeyword
:
:
Ease
)
}
}
impl
TimingKeyword
{
#
[
inline
]
pub
fn
to_bezier
(
self
)
-
>
(
CSSFloat
CSSFloat
CSSFloat
CSSFloat
)
{
match
self
{
TimingKeyword
:
:
Linear
=
>
(
0
.
0
.
1
.
1
.
)
TimingKeyword
:
:
Ease
=
>
(
0
.
25
0
.
1
0
.
25
1
.
)
TimingKeyword
:
:
EaseIn
=
>
(
0
.
42
0
.
1
.
1
.
)
TimingKeyword
:
:
EaseOut
=
>
(
0
.
0
.
0
.
58
1
.
)
TimingKeyword
:
:
EaseInOut
=
>
(
0
.
42
0
.
0
.
58
1
.
)
}
}
}
