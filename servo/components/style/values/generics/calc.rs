use
num_traits
:
:
Zero
;
use
smallvec
:
:
SmallVec
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
std
:
:
ops
:
:
{
Add
Mul
Neg
Rem
Sub
}
;
use
std
:
:
{
cmp
mem
}
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
#
[
derive
(
Clone
Copy
Debug
Deserialize
MallocSizeOf
PartialEq
Serialize
ToAnimatedZero
ToResolvedValue
ToShmem
)
]
#
[
repr
(
u8
)
]
pub
enum
MinMaxOp
{
Min
Max
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
MallocSizeOf
PartialEq
Serialize
ToAnimatedZero
ToResolvedValue
ToShmem
)
]
#
[
repr
(
u8
)
]
pub
enum
ModRemOp
{
Mod
Rem
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
MallocSizeOf
PartialEq
Serialize
ToAnimatedZero
ToResolvedValue
ToShmem
)
]
#
[
repr
(
u8
)
]
pub
enum
RoundingStrategy
{
Nearest
Up
Down
ToZero
}
#
[
derive
(
Clone
Copy
Debug
Eq
Ord
PartialEq
PartialOrd
)
]
#
[
allow
(
missing_docs
)
]
pub
enum
SortKey
{
Number
Percentage
Cap
Ch
Cqb
Cqh
Cqi
Cqmax
Cqmin
Cqw
Deg
Dppx
Dvb
Dvh
Dvi
Dvmax
Dvmin
Dvw
Em
Ex
Ic
Lvb
Lvh
Lvi
Lvmax
Lvmin
Lvw
Px
Rem
Sec
Svb
Svh
Svi
Svmax
Svmin
Svw
Vb
Vh
Vi
Vmax
Vmin
Vw
Other
}
/
/
/
cbindgen
:
destructor
-
attributes
=
MOZ_NEVER_INLINE
/
/
/
cbindgen
:
copy
-
constructor
-
attributes
=
MOZ_NEVER_INLINE
/
/
/
cbindgen
:
eq
-
attributes
=
MOZ_NEVER_INLINE
#
[
repr
(
u8
)
]
#
[
derive
(
Clone
Debug
Deserialize
MallocSizeOf
PartialEq
Serialize
ToAnimatedZero
ToResolvedValue
ToShmem
)
]
pub
enum
GenericCalcNode
<
L
>
{
Leaf
(
L
)
Negate
(
Box
<
GenericCalcNode
<
L
>
>
)
Invert
(
Box
<
GenericCalcNode
<
L
>
>
)
Sum
(
crate
:
:
OwnedSlice
<
GenericCalcNode
<
L
>
>
)
Product
(
crate
:
:
OwnedSlice
<
GenericCalcNode
<
L
>
>
)
MinMax
(
crate
:
:
OwnedSlice
<
GenericCalcNode
<
L
>
>
MinMaxOp
)
Clamp
{
min
:
Box
<
GenericCalcNode
<
L
>
>
center
:
Box
<
GenericCalcNode
<
L
>
>
max
:
Box
<
GenericCalcNode
<
L
>
>
}
Round
{
strategy
:
RoundingStrategy
value
:
Box
<
GenericCalcNode
<
L
>
>
step
:
Box
<
GenericCalcNode
<
L
>
>
}
ModRem
{
dividend
:
Box
<
GenericCalcNode
<
L
>
>
divisor
:
Box
<
GenericCalcNode
<
L
>
>
op
:
ModRemOp
}
Hypot
(
crate
:
:
OwnedSlice
<
GenericCalcNode
<
L
>
>
)
Abs
(
Box
<
GenericCalcNode
<
L
>
>
)
Sign
(
Box
<
GenericCalcNode
<
L
>
>
)
}
pub
use
self
:
:
GenericCalcNode
as
CalcNode
;
bitflags
!
{
/
/
/
Expected
units
we
allow
parsing
within
a
calc
(
)
expression
.
/
/
/
/
/
/
This
is
used
as
a
hint
for
the
parser
to
fast
-
reject
invalid
/
/
/
expressions
.
Numbers
are
always
allowed
because
they
multiply
other
/
/
/
units
.
pub
struct
CalcUnits
:
u8
{
/
/
/
<
length
>
const
LENGTH
=
1
<
<
0
;
/
/
/
<
percentage
>
const
PERCENTAGE
=
1
<
<
1
;
/
/
/
<
angle
>
const
ANGLE
=
1
<
<
2
;
/
/
/
<
time
>
const
TIME
=
1
<
<
3
;
/
/
/
<
resolution
>
const
RESOLUTION
=
1
<
<
4
;
/
/
/
<
length
-
percentage
>
const
LENGTH_PERCENTAGE
=
Self
:
:
LENGTH
.
bits
|
Self
:
:
PERCENTAGE
.
bits
;
/
/
NOTE
:
When
you
add
to
this
make
sure
to
make
Atan2
deal
with
these
.
/
/
/
Allow
all
units
.
const
ALL
=
Self
:
:
LENGTH
.
bits
|
Self
:
:
PERCENTAGE
.
bits
|
Self
:
:
ANGLE
.
bits
|
Self
:
:
TIME
.
bits
|
Self
:
:
RESOLUTION
.
bits
;
}
}
impl
CalcUnits
{
#
[
inline
]
fn
is_single_unit
(
&
self
)
-
>
bool
{
self
.
bits
(
)
=
=
0
|
|
self
.
bits
(
)
&
(
self
.
bits
(
)
-
1
)
=
=
0
}
#
[
inline
]
fn
can_sum_with
(
&
self
other
:
Self
)
-
>
bool
{
match
*
self
{
Self
:
:
LENGTH
=
>
other
.
intersects
(
Self
:
:
LENGTH
|
Self
:
:
PERCENTAGE
)
Self
:
:
PERCENTAGE
=
>
other
.
intersects
(
Self
:
:
LENGTH
|
Self
:
:
PERCENTAGE
)
Self
:
:
LENGTH_PERCENTAGE
=
>
other
.
intersects
(
Self
:
:
LENGTH
|
Self
:
:
PERCENTAGE
)
u
=
>
u
.
is_single_unit
(
)
&
&
other
=
=
u
}
}
}
pub
enum
PositivePercentageBasis
{
Unknown
Yes
}
macro_rules
!
compare_helpers
{
(
)
=
>
{
/
/
/
Return
whether
a
leaf
is
greater
than
another
.
#
[
allow
(
unused
)
]
fn
gt
(
&
self
other
:
&
Self
basis_positive
:
PositivePercentageBasis
)
-
>
bool
{
self
.
compare
(
other
basis_positive
)
=
=
Some
(
cmp
:
:
Ordering
:
:
Greater
)
}
/
/
/
Return
whether
a
leaf
is
less
than
another
.
fn
lt
(
&
self
other
:
&
Self
basis_positive
:
PositivePercentageBasis
)
-
>
bool
{
self
.
compare
(
other
basis_positive
)
=
=
Some
(
cmp
:
:
Ordering
:
:
Less
)
}
/
/
/
Return
whether
a
leaf
is
smaller
or
equal
than
another
.
fn
lte
(
&
self
other
:
&
Self
basis_positive
:
PositivePercentageBasis
)
-
>
bool
{
match
self
.
compare
(
other
basis_positive
)
{
Some
(
cmp
:
:
Ordering
:
:
Less
)
=
>
true
Some
(
cmp
:
:
Ordering
:
:
Equal
)
=
>
true
Some
(
cmp
:
:
Ordering
:
:
Greater
)
=
>
false
None
=
>
false
}
}
}
;
}
pub
trait
CalcNodeLeaf
:
Clone
+
Sized
+
PartialEq
+
ToCss
{
fn
unit
(
&
self
)
-
>
CalcUnits
;
fn
unitless_value
(
&
self
)
-
>
f32
;
fn
is_same_unit_as
(
&
self
other
:
&
Self
)
-
>
bool
{
std
:
:
mem
:
:
discriminant
(
self
)
=
=
std
:
:
mem
:
:
discriminant
(
other
)
}
fn
compare
(
&
self
other
:
&
Self
base_is_positive
:
PositivePercentageBasis
)
-
>
Option
<
cmp
:
:
Ordering
>
;
compare_helpers
!
(
)
;
fn
new_number
(
value
:
f32
)
-
>
Self
;
fn
as_number
(
&
self
)
-
>
Option
<
f32
>
;
fn
is_negative
(
&
self
)
-
>
bool
{
self
.
unitless_value
(
)
.
is_sign_negative
(
)
}
fn
is_infinite
(
&
self
)
-
>
bool
{
self
.
unitless_value
(
)
.
is_infinite
(
)
}
fn
is_zero
(
&
self
)
-
>
bool
{
self
.
unitless_value
(
)
.
is_zero
(
)
}
fn
is_nan
(
&
self
)
-
>
bool
{
self
.
unitless_value
(
)
.
is_nan
(
)
}
fn
try_sum_in_place
(
&
mut
self
other
:
&
Self
)
-
>
Result
<
(
)
(
)
>
;
fn
try_product_in_place
(
&
mut
self
other
:
&
mut
Self
)
-
>
bool
;
fn
try_op
<
O
>
(
&
self
other
:
&
Self
op
:
O
)
-
>
Result
<
Self
(
)
>
where
O
:
Fn
(
f32
f32
)
-
>
f32
;
fn
map
(
&
mut
self
op
:
impl
FnMut
(
f32
)
-
>
f32
)
;
fn
negate
(
&
mut
self
)
{
self
.
map
(
std
:
:
ops
:
:
Neg
:
:
neg
)
;
}
fn
simplify
(
&
mut
self
)
;
fn
sort_key
(
&
self
)
-
>
SortKey
;
fn
sign_from
(
leaf
:
&
impl
CalcNodeLeaf
)
-
>
Self
{
Self
:
:
new_number
(
if
leaf
.
is_nan
(
)
{
f32
:
:
NAN
}
else
if
leaf
.
is_zero
(
)
{
leaf
.
unitless_value
(
)
}
else
if
leaf
.
is_negative
(
)
{
-
1
.
0
}
else
{
1
.
0
}
)
}
}
enum
ArgumentLevel
{
CalculationRoot
ArgumentRoot
Nested
}
impl
<
L
:
CalcNodeLeaf
>
CalcNode
<
L
>
{
fn
dummy
(
)
-
>
Self
{
Self
:
:
MinMax
(
Default
:
:
default
(
)
MinMaxOp
:
:
Max
)
}
fn
coerce_to_value
(
&
mut
self
value
:
f32
)
{
self
.
map
(
|
_
|
value
)
;
}
#
[
inline
]
pub
fn
is_product_distributive
(
&
self
)
-
>
bool
{
match
self
{
Self
:
:
Leaf
(
_
)
=
>
true
Self
:
:
Sum
(
children
)
=
>
children
.
iter
(
)
.
all
(
|
c
|
c
.
is_product_distributive
(
)
)
_
=
>
false
}
}
pub
fn
unit
(
&
self
)
-
>
Result
<
CalcUnits
(
)
>
{
Ok
(
match
self
{
CalcNode
:
:
Leaf
(
l
)
=
>
l
.
unit
(
)
CalcNode
:
:
Negate
(
child
)
|
CalcNode
:
:
Invert
(
child
)
|
CalcNode
:
:
Abs
(
child
)
=
>
{
child
.
unit
(
)
?
}
CalcNode
:
:
Sum
(
children
)
=
>
{
let
mut
unit
=
children
.
first
(
)
.
unwrap
(
)
.
unit
(
)
?
;
for
child
in
children
.
iter
(
)
.
skip
(
1
)
{
let
child_unit
=
child
.
unit
(
)
?
;
if
!
child_unit
.
can_sum_with
(
unit
)
{
return
Err
(
(
)
)
;
}
unit
|
=
child_unit
;
}
unit
}
CalcNode
:
:
Product
(
children
)
=
>
{
let
mut
unit
=
None
;
for
child
in
children
.
iter
(
)
{
let
child_unit
=
child
.
unit
(
)
?
;
if
child_unit
.
is_empty
(
)
{
continue
;
}
if
unit
.
is_some
(
)
{
return
Err
(
(
)
)
;
}
unit
=
Some
(
child_unit
)
;
}
unit
.
unwrap_or
(
CalcUnits
:
:
empty
(
)
)
}
CalcNode
:
:
MinMax
(
children
_
)
|
CalcNode
:
:
Hypot
(
children
)
=
>
{
let
mut
unit
=
children
.
first
(
)
.
unwrap
(
)
.
unit
(
)
?
;
for
child
in
children
.
iter
(
)
.
skip
(
1
)
{
let
child_unit
=
child
.
unit
(
)
?
;
if
!
child_unit
.
can_sum_with
(
unit
)
{
return
Err
(
(
)
)
;
}
unit
|
=
child_unit
;
}
unit
}
CalcNode
:
:
Clamp
{
min
center
max
}
=
>
{
let
min_unit
=
min
.
unit
(
)
?
;
let
center_unit
=
center
.
unit
(
)
?
;
if
!
min_unit
.
can_sum_with
(
center_unit
)
{
return
Err
(
(
)
)
;
}
let
max_unit
=
max
.
unit
(
)
?
;
if
!
center_unit
.
can_sum_with
(
max_unit
)
{
return
Err
(
(
)
)
;
}
min_unit
|
center_unit
|
max_unit
}
CalcNode
:
:
Round
{
value
step
.
.
}
=
>
{
let
value_unit
=
value
.
unit
(
)
?
;
let
step_unit
=
step
.
unit
(
)
?
;
if
!
step_unit
.
can_sum_with
(
value_unit
)
{
return
Err
(
(
)
)
;
}
value_unit
|
step_unit
}
CalcNode
:
:
ModRem
{
dividend
divisor
.
.
}
=
>
{
let
dividend_unit
=
dividend
.
unit
(
)
?
;
let
divisor_unit
=
divisor
.
unit
(
)
?
;
if
!
divisor_unit
.
can_sum_with
(
dividend_unit
)
{
return
Err
(
(
)
)
;
}
dividend_unit
|
divisor_unit
}
CalcNode
:
:
Sign
(
_
)
=
>
{
CalcUnits
:
:
empty
(
)
}
}
)
}
pub
fn
negate
(
&
mut
self
)
{
fn
wrap_self_in_negate
<
L
:
CalcNodeLeaf
>
(
s
:
&
mut
CalcNode
<
L
>
)
{
let
result
=
mem
:
:
replace
(
s
CalcNode
:
:
dummy
(
)
)
;
*
s
=
CalcNode
:
:
Negate
(
Box
:
:
new
(
result
)
)
;
}
match
*
self
{
CalcNode
:
:
Leaf
(
ref
mut
leaf
)
=
>
leaf
.
negate
(
)
CalcNode
:
:
Negate
(
ref
mut
value
)
=
>
{
let
result
=
mem
:
:
replace
(
value
.
as_mut
(
)
Self
:
:
dummy
(
)
)
;
*
self
=
result
;
}
CalcNode
:
:
Invert
(
_
)
=
>
{
wrap_self_in_negate
(
self
)
}
CalcNode
:
:
Sum
(
ref
mut
children
)
=
>
{
for
child
in
children
.
iter_mut
(
)
{
child
.
negate
(
)
;
}
}
CalcNode
:
:
Product
(
_
)
=
>
{
wrap_self_in_negate
(
self
)
;
}
CalcNode
:
:
MinMax
(
ref
mut
children
ref
mut
op
)
=
>
{
for
child
in
children
.
iter_mut
(
)
{
child
.
negate
(
)
;
}
*
op
=
match
*
op
{
MinMaxOp
:
:
Min
=
>
MinMaxOp
:
:
Max
MinMaxOp
:
:
Max
=
>
MinMaxOp
:
:
Min
}
;
}
CalcNode
:
:
Clamp
{
ref
mut
min
ref
mut
center
ref
mut
max
}
=
>
{
if
min
.
lte
(
max
PositivePercentageBasis
:
:
Unknown
)
{
min
.
negate
(
)
;
center
.
negate
(
)
;
max
.
negate
(
)
;
mem
:
:
swap
(
min
max
)
;
}
else
{
wrap_self_in_negate
(
self
)
;
}
}
CalcNode
:
:
Round
{
ref
mut
value
ref
mut
step
.
.
}
=
>
{
value
.
negate
(
)
;
step
.
negate
(
)
;
}
CalcNode
:
:
ModRem
{
ref
mut
dividend
ref
mut
divisor
.
.
}
=
>
{
dividend
.
negate
(
)
;
divisor
.
negate
(
)
;
}
CalcNode
:
:
Hypot
(
ref
mut
children
)
=
>
{
for
child
in
children
.
iter_mut
(
)
{
child
.
negate
(
)
;
}
}
CalcNode
:
:
Abs
(
ref
mut
child
)
|
CalcNode
:
:
Sign
(
ref
mut
child
)
=
>
{
child
.
negate
(
)
;
}
}
}
fn
sort_key
(
&
self
)
-
>
SortKey
{
match
*
self
{
Self
:
:
Leaf
(
ref
l
)
=
>
l
.
sort_key
(
)
_
=
>
SortKey
:
:
Other
}
}
pub
fn
as_leaf
(
&
self
)
-
>
Option
<
&
L
>
{
match
*
self
{
Self
:
:
Leaf
(
ref
l
)
=
>
Some
(
l
)
_
=
>
None
}
}
fn
try_sum_in_place
(
&
mut
self
other
:
&
Self
)
-
>
Result
<
(
)
(
)
>
{
match
(
self
other
)
{
(
&
mut
CalcNode
:
:
Leaf
(
ref
mut
one
)
&
CalcNode
:
:
Leaf
(
ref
other
)
)
=
>
{
one
.
try_sum_in_place
(
other
)
}
_
=
>
Err
(
(
)
)
}
}
pub
fn
try_product_in_place
(
&
mut
self
other
:
&
mut
Self
)
-
>
bool
{
if
let
Ok
(
resolved
)
=
other
.
resolve
(
)
{
if
let
Some
(
number
)
=
resolved
.
as_number
(
)
{
if
number
=
=
1
.
0
{
return
true
;
}
if
self
.
is_product_distributive
(
)
{
self
.
map
(
|
v
|
v
*
number
)
;
return
true
;
}
}
}
if
let
Ok
(
resolved
)
=
self
.
resolve
(
)
{
if
let
Some
(
number
)
=
resolved
.
as_number
(
)
{
if
number
=
=
1
.
0
{
std
:
:
mem
:
:
swap
(
self
other
)
;
return
true
;
}
if
other
.
is_product_distributive
(
)
{
other
.
map
(
|
v
|
v
*
number
)
;
std
:
:
mem
:
:
swap
(
self
other
)
;
return
true
;
}
}
}
false
}
fn
try_op
<
O
>
(
&
self
other
:
&
Self
op
:
O
)
-
>
Result
<
Self
(
)
>
where
O
:
Fn
(
f32
f32
)
-
>
f32
{
match
(
self
other
)
{
(
&
CalcNode
:
:
Leaf
(
ref
one
)
&
CalcNode
:
:
Leaf
(
ref
other
)
)
=
>
{
Ok
(
CalcNode
:
:
Leaf
(
one
.
try_op
(
other
op
)
?
)
)
}
_
=
>
Err
(
(
)
)
}
}
pub
fn
map
(
&
mut
self
mut
op
:
impl
FnMut
(
f32
)
-
>
f32
)
{
fn
map_internal
<
L
:
CalcNodeLeaf
>
(
node
:
&
mut
CalcNode
<
L
>
op
:
&
mut
impl
FnMut
(
f32
)
-
>
f32
)
{
match
node
{
CalcNode
:
:
Leaf
(
l
)
=
>
l
.
map
(
op
)
CalcNode
:
:
Negate
(
v
)
|
CalcNode
:
:
Invert
(
v
)
=
>
map_internal
(
v
op
)
CalcNode
:
:
Sum
(
children
)
|
CalcNode
:
:
Product
(
children
)
=
>
{
for
node
in
&
mut
*
*
children
{
map_internal
(
node
op
)
;
}
}
CalcNode
:
:
MinMax
(
children
_
)
=
>
{
for
node
in
&
mut
*
*
children
{
map_internal
(
node
op
)
;
}
}
CalcNode
:
:
Clamp
{
min
center
max
}
=
>
{
map_internal
(
min
op
)
;
map_internal
(
center
op
)
;
map_internal
(
max
op
)
;
}
CalcNode
:
:
Round
{
value
step
.
.
}
=
>
{
map_internal
(
value
op
)
;
map_internal
(
step
op
)
;
}
CalcNode
:
:
ModRem
{
dividend
divisor
.
.
}
=
>
{
map_internal
(
dividend
op
)
;
map_internal
(
divisor
op
)
;
}
CalcNode
:
:
Hypot
(
children
)
=
>
{
for
node
in
&
mut
*
*
children
{
map_internal
(
node
op
)
;
}
}
CalcNode
:
:
Abs
(
child
)
|
CalcNode
:
:
Sign
(
child
)
=
>
{
map_internal
(
child
op
)
;
}
}
}
map_internal
(
self
&
mut
op
)
;
}
pub
fn
map_leaves
<
O
F
>
(
&
self
mut
map
:
F
)
-
>
CalcNode
<
O
>
where
O
:
CalcNodeLeaf
F
:
FnMut
(
&
L
)
-
>
O
{
self
.
map_leaves_internal
(
&
mut
map
)
}
fn
map_leaves_internal
<
O
F
>
(
&
self
map
:
&
mut
F
)
-
>
CalcNode
<
O
>
where
O
:
CalcNodeLeaf
F
:
FnMut
(
&
L
)
-
>
O
{
fn
map_children
<
L
O
F
>
(
children
:
&
[
CalcNode
<
L
>
]
map
:
&
mut
F
)
-
>
crate
:
:
OwnedSlice
<
CalcNode
<
O
>
>
where
L
:
CalcNodeLeaf
O
:
CalcNodeLeaf
F
:
FnMut
(
&
L
)
-
>
O
{
children
.
iter
(
)
.
map
(
|
c
|
c
.
map_leaves_internal
(
map
)
)
.
collect
(
)
}
match
*
self
{
Self
:
:
Leaf
(
ref
l
)
=
>
CalcNode
:
:
Leaf
(
map
(
l
)
)
Self
:
:
Negate
(
ref
c
)
=
>
CalcNode
:
:
Negate
(
Box
:
:
new
(
c
.
map_leaves_internal
(
map
)
)
)
Self
:
:
Invert
(
ref
c
)
=
>
CalcNode
:
:
Invert
(
Box
:
:
new
(
c
.
map_leaves_internal
(
map
)
)
)
Self
:
:
Sum
(
ref
c
)
=
>
CalcNode
:
:
Sum
(
map_children
(
c
map
)
)
Self
:
:
Product
(
ref
c
)
=
>
CalcNode
:
:
Product
(
map_children
(
c
map
)
)
Self
:
:
MinMax
(
ref
c
op
)
=
>
CalcNode
:
:
MinMax
(
map_children
(
c
map
)
op
)
Self
:
:
Clamp
{
ref
min
ref
center
ref
max
}
=
>
{
let
min
=
Box
:
:
new
(
min
.
map_leaves_internal
(
map
)
)
;
let
center
=
Box
:
:
new
(
center
.
map_leaves_internal
(
map
)
)
;
let
max
=
Box
:
:
new
(
max
.
map_leaves_internal
(
map
)
)
;
CalcNode
:
:
Clamp
{
min
center
max
}
}
Self
:
:
Round
{
strategy
ref
value
ref
step
}
=
>
{
let
value
=
Box
:
:
new
(
value
.
map_leaves_internal
(
map
)
)
;
let
step
=
Box
:
:
new
(
step
.
map_leaves_internal
(
map
)
)
;
CalcNode
:
:
Round
{
strategy
value
step
}
}
Self
:
:
ModRem
{
ref
dividend
ref
divisor
op
}
=
>
{
let
dividend
=
Box
:
:
new
(
dividend
.
map_leaves_internal
(
map
)
)
;
let
divisor
=
Box
:
:
new
(
divisor
.
map_leaves_internal
(
map
)
)
;
CalcNode
:
:
ModRem
{
dividend
divisor
op
}
}
Self
:
:
Hypot
(
ref
c
)
=
>
CalcNode
:
:
Hypot
(
map_children
(
c
map
)
)
Self
:
:
Abs
(
ref
c
)
=
>
CalcNode
:
:
Abs
(
Box
:
:
new
(
c
.
map_leaves_internal
(
map
)
)
)
Self
:
:
Sign
(
ref
c
)
=
>
CalcNode
:
:
Sign
(
Box
:
:
new
(
c
.
map_leaves_internal
(
map
)
)
)
}
}
pub
fn
resolve
(
&
self
)
-
>
Result
<
L
(
)
>
{
self
.
resolve_map
(
|
l
|
Ok
(
l
.
clone
(
)
)
)
}
pub
fn
resolve_map
<
F
>
(
&
self
mut
leaf_to_output_fn
:
F
)
-
>
Result
<
L
(
)
>
where
F
:
FnMut
(
&
L
)
-
>
Result
<
L
(
)
>
{
self
.
resolve_internal
(
&
mut
leaf_to_output_fn
)
}
fn
resolve_internal
<
F
>
(
&
self
leaf_to_output_fn
:
&
mut
F
)
-
>
Result
<
L
(
)
>
where
F
:
FnMut
(
&
L
)
-
>
Result
<
L
(
)
>
{
match
self
{
Self
:
:
Leaf
(
l
)
=
>
leaf_to_output_fn
(
l
)
Self
:
:
Negate
(
child
)
=
>
{
let
mut
result
=
child
.
resolve_internal
(
leaf_to_output_fn
)
?
;
result
.
map
(
|
v
|
v
.
neg
(
)
)
;
Ok
(
result
)
}
Self
:
:
Invert
(
child
)
=
>
{
let
mut
result
=
child
.
resolve_internal
(
leaf_to_output_fn
)
?
;
result
.
map
(
|
v
|
1
.
0
/
v
)
;
Ok
(
result
)
}
Self
:
:
Sum
(
children
)
=
>
{
let
mut
result
=
children
[
0
]
.
resolve_internal
(
leaf_to_output_fn
)
?
;
for
child
in
children
.
iter
(
)
.
skip
(
1
)
{
let
right
=
child
.
resolve_internal
(
leaf_to_output_fn
)
?
;
result
=
result
.
try_op
(
&
right
|
left
right
|
left
+
right
)
?
;
}
Ok
(
result
)
}
Self
:
:
Product
(
children
)
=
>
{
let
mut
result
=
children
[
0
]
.
resolve_internal
(
leaf_to_output_fn
)
?
;
for
child
in
children
.
iter
(
)
.
skip
(
1
)
{
let
right
=
child
.
resolve_internal
(
leaf_to_output_fn
)
?
;
match
result
.
as_number
(
)
{
Some
(
left
)
=
>
{
result
=
right
;
result
.
map
(
|
v
|
v
*
left
)
;
}
None
=
>
{
match
right
.
as_number
(
)
{
Some
(
right
)
=
>
{
result
.
map
(
|
v
|
v
*
right
)
;
}
None
=
>
{
return
Err
(
(
)
)
;
}
}
}
}
}
Ok
(
result
)
}
Self
:
:
MinMax
(
children
op
)
=
>
{
let
mut
result
=
children
[
0
]
.
resolve_internal
(
leaf_to_output_fn
)
?
;
if
result
.
is_nan
(
)
{
return
Ok
(
result
)
;
}
for
child
in
children
.
iter
(
)
.
skip
(
1
)
{
let
candidate
=
child
.
resolve_internal
(
leaf_to_output_fn
)
?
;
if
!
result
.
is_same_unit_as
(
&
candidate
)
{
return
Err
(
(
)
)
;
}
if
candidate
.
is_nan
(
)
{
result
=
candidate
;
break
;
}
let
candidate_wins
=
match
op
{
MinMaxOp
:
:
Min
=
>
candidate
.
lt
(
&
result
PositivePercentageBasis
:
:
Yes
)
MinMaxOp
:
:
Max
=
>
candidate
.
gt
(
&
result
PositivePercentageBasis
:
:
Yes
)
}
;
if
candidate_wins
{
result
=
candidate
;
}
}
Ok
(
result
)
}
Self
:
:
Clamp
{
min
center
max
}
=
>
{
let
min
=
min
.
resolve_internal
(
leaf_to_output_fn
)
?
;
let
center
=
center
.
resolve_internal
(
leaf_to_output_fn
)
?
;
let
max
=
max
.
resolve_internal
(
leaf_to_output_fn
)
?
;
if
!
min
.
is_same_unit_as
(
&
center
)
|
|
!
max
.
is_same_unit_as
(
&
center
)
{
return
Err
(
(
)
)
;
}
if
min
.
is_nan
(
)
{
return
Ok
(
min
)
;
}
if
center
.
is_nan
(
)
{
return
Ok
(
center
)
;
}
if
max
.
is_nan
(
)
{
return
Ok
(
max
)
;
}
let
mut
result
=
center
;
if
result
.
gt
(
&
max
PositivePercentageBasis
:
:
Yes
)
{
result
=
max
;
}
if
result
.
lt
(
&
min
PositivePercentageBasis
:
:
Yes
)
{
result
=
min
}
Ok
(
result
)
}
Self
:
:
Round
{
strategy
value
step
}
=
>
{
let
mut
value
=
value
.
resolve_internal
(
leaf_to_output_fn
)
?
;
let
step
=
step
.
resolve_internal
(
leaf_to_output_fn
)
?
;
if
!
value
.
is_same_unit_as
(
&
step
)
{
return
Err
(
(
)
)
;
}
let
step
=
step
.
unitless_value
(
)
;
value
.
map
(
|
value
|
{
if
step
.
is_zero
(
)
{
return
f32
:
:
NAN
;
}
if
value
.
is_infinite
(
)
{
if
step
.
is_infinite
(
)
{
return
f32
:
:
NAN
;
}
return
value
;
}
if
step
.
is_infinite
(
)
{
match
strategy
{
RoundingStrategy
:
:
Nearest
|
RoundingStrategy
:
:
ToZero
=
>
{
return
if
value
.
is_sign_negative
(
)
{
-
0
.
0
}
else
{
0
.
0
}
}
RoundingStrategy
:
:
Up
=
>
{
return
if
!
value
.
is_sign_negative
(
)
&
&
!
value
.
is_zero
(
)
{
f32
:
:
INFINITY
}
else
if
!
value
.
is_sign_negative
(
)
&
&
value
.
is_zero
(
)
{
value
}
else
{
-
0
.
0
}
}
RoundingStrategy
:
:
Down
=
>
{
return
if
value
.
is_sign_negative
(
)
&
&
!
value
.
is_zero
(
)
{
-
f32
:
:
INFINITY
}
else
if
value
.
is_sign_negative
(
)
&
&
value
.
is_zero
(
)
{
value
}
else
{
0
.
0
}
}
}
}
let
div
=
value
/
step
;
let
lower_bound
=
div
.
floor
(
)
*
step
;
let
upper_bound
=
div
.
ceil
(
)
*
step
;
match
strategy
{
RoundingStrategy
:
:
Nearest
=
>
{
if
value
-
lower_bound
<
upper_bound
-
value
{
lower_bound
}
else
{
upper_bound
}
}
RoundingStrategy
:
:
Up
=
>
upper_bound
RoundingStrategy
:
:
Down
=
>
lower_bound
RoundingStrategy
:
:
ToZero
=
>
{
if
lower_bound
.
abs
(
)
<
upper_bound
.
abs
(
)
{
lower_bound
}
else
{
upper_bound
}
}
}
}
)
;
Ok
(
value
)
}
Self
:
:
ModRem
{
dividend
divisor
op
}
=
>
{
let
mut
dividend
=
dividend
.
resolve_internal
(
leaf_to_output_fn
)
?
;
let
divisor
=
divisor
.
resolve_internal
(
leaf_to_output_fn
)
?
;
if
!
dividend
.
is_same_unit_as
(
&
divisor
)
{
return
Err
(
(
)
)
;
}
let
divisor
=
divisor
.
unitless_value
(
)
;
dividend
.
map
(
|
dividend
|
{
if
matches
!
(
op
ModRemOp
:
:
Mod
)
&
&
divisor
.
is_infinite
(
)
&
&
dividend
.
is_sign_negative
(
)
!
=
divisor
.
is_sign_negative
(
)
{
f32
:
:
NAN
}
else
{
match
op
{
ModRemOp
:
:
Mod
=
>
dividend
-
divisor
*
(
dividend
/
divisor
)
.
floor
(
)
ModRemOp
:
:
Rem
=
>
dividend
-
divisor
*
(
dividend
/
divisor
)
.
trunc
(
)
}
}
}
)
;
Ok
(
dividend
)
}
Self
:
:
Hypot
(
children
)
=
>
{
let
mut
result
=
children
[
0
]
.
resolve_internal
(
leaf_to_output_fn
)
?
;
result
.
map
(
|
v
|
v
.
powi
(
2
)
)
;
for
child
in
children
.
iter
(
)
.
skip
(
1
)
{
let
child_value
=
child
.
resolve_internal
(
leaf_to_output_fn
)
?
;
if
!
result
.
is_same_unit_as
(
&
child_value
)
{
return
Err
(
(
)
)
;
}
result
.
map
(
|
v
|
v
+
child_value
.
unitless_value
(
)
.
powi
(
2
)
)
;
}
result
.
map
(
|
v
|
v
.
sqrt
(
)
)
;
Ok
(
result
)
}
Self
:
:
Abs
(
ref
c
)
=
>
{
let
mut
result
=
c
.
resolve_internal
(
leaf_to_output_fn
)
?
;
if
!
result
.
is_zero
(
)
{
result
.
map
(
|
v
|
v
.
abs
(
)
)
;
}
Ok
(
result
)
}
Self
:
:
Sign
(
ref
c
)
=
>
{
let
result
=
c
.
resolve_internal
(
leaf_to_output_fn
)
?
;
Ok
(
L
:
:
sign_from
(
&
result
)
)
}
}
}
fn
is_negative_leaf
(
&
self
)
-
>
bool
{
match
*
self
{
Self
:
:
Leaf
(
ref
l
)
=
>
l
.
is_negative
(
)
_
=
>
false
}
}
fn
is_zero_leaf
(
&
self
)
-
>
bool
{
match
*
self
{
Self
:
:
Leaf
(
ref
l
)
=
>
l
.
is_zero
(
)
_
=
>
false
}
}
fn
is_infinite_leaf
(
&
self
)
-
>
bool
{
match
*
self
{
Self
:
:
Leaf
(
ref
l
)
=
>
l
.
is_infinite
(
)
_
=
>
false
}
}
pub
fn
visit_depth_first
(
&
mut
self
mut
f
:
impl
FnMut
(
&
mut
Self
)
)
{
self
.
visit_depth_first_internal
(
&
mut
f
)
}
fn
visit_depth_first_internal
(
&
mut
self
f
:
&
mut
impl
FnMut
(
&
mut
Self
)
)
{
match
*
self
{
Self
:
:
Clamp
{
ref
mut
min
ref
mut
center
ref
mut
max
}
=
>
{
min
.
visit_depth_first_internal
(
f
)
;
center
.
visit_depth_first_internal
(
f
)
;
max
.
visit_depth_first_internal
(
f
)
;
}
Self
:
:
Round
{
ref
mut
value
ref
mut
step
.
.
}
=
>
{
value
.
visit_depth_first_internal
(
f
)
;
step
.
visit_depth_first_internal
(
f
)
;
}
Self
:
:
ModRem
{
ref
mut
dividend
ref
mut
divisor
.
.
}
=
>
{
dividend
.
visit_depth_first_internal
(
f
)
;
divisor
.
visit_depth_first_internal
(
f
)
;
}
Self
:
:
Sum
(
ref
mut
children
)
|
Self
:
:
Product
(
ref
mut
children
)
|
Self
:
:
MinMax
(
ref
mut
children
_
)
|
Self
:
:
Hypot
(
ref
mut
children
)
=
>
{
for
child
in
&
mut
*
*
children
{
child
.
visit_depth_first_internal
(
f
)
;
}
}
Self
:
:
Negate
(
ref
mut
value
)
|
Self
:
:
Invert
(
ref
mut
value
)
=
>
{
value
.
visit_depth_first_internal
(
f
)
;
}
Self
:
:
Abs
(
ref
mut
value
)
|
Self
:
:
Sign
(
ref
mut
value
)
=
>
{
value
.
visit_depth_first_internal
(
f
)
;
}
Self
:
:
Leaf
(
.
.
)
=
>
{
}
}
f
(
self
)
;
}
pub
fn
simplify_and_sort_direct_children
(
&
mut
self
)
{
macro_rules
!
replace_self_with
{
(
slot
:
expr
)
=
>
{
{
let
result
=
mem
:
:
replace
(
slot
Self
:
:
dummy
(
)
)
;
*
self
=
result
;
}
}
;
}
macro_rules
!
value_or_stop
{
(
op
:
expr
)
=
>
{
{
match
op
{
Ok
(
value
)
=
>
value
Err
(
_
)
=
>
return
}
}
}
;
}
match
*
self
{
Self
:
:
Clamp
{
ref
mut
min
ref
mut
center
ref
mut
max
}
=
>
{
let
min_cmp_center
=
match
min
.
compare
(
&
center
PositivePercentageBasis
:
:
Unknown
)
{
Some
(
o
)
=
>
o
None
=
>
return
}
;
if
matches
!
(
min_cmp_center
cmp
:
:
Ordering
:
:
Greater
)
{
replace_self_with
!
(
&
mut
*
*
min
)
;
return
;
}
let
max_cmp_center
=
match
max
.
compare
(
&
center
PositivePercentageBasis
:
:
Unknown
)
{
Some
(
o
)
=
>
o
None
=
>
return
}
;
if
matches
!
(
max_cmp_center
cmp
:
:
Ordering
:
:
Less
)
{
let
max_cmp_min
=
match
max
.
compare
(
&
min
PositivePercentageBasis
:
:
Unknown
)
{
Some
(
o
)
=
>
o
None
=
>
{
debug_assert
!
(
false
"
We
compared
center
with
min
and
max
how
are
\
min
/
max
not
comparable
with
each
other
?
"
)
;
return
;
}
}
;
if
matches
!
(
max_cmp_min
cmp
:
:
Ordering
:
:
Less
)
{
replace_self_with
!
(
&
mut
*
*
min
)
;
return
;
}
replace_self_with
!
(
&
mut
*
*
max
)
;
return
;
}
replace_self_with
!
(
&
mut
*
*
center
)
;
}
Self
:
:
Round
{
strategy
ref
mut
value
ref
mut
step
}
=
>
{
if
step
.
is_zero_leaf
(
)
{
value
.
coerce_to_value
(
f32
:
:
NAN
)
;
replace_self_with
!
(
&
mut
*
*
value
)
;
return
;
}
if
value
.
is_infinite_leaf
(
)
&
&
step
.
is_infinite_leaf
(
)
{
value
.
coerce_to_value
(
f32
:
:
NAN
)
;
replace_self_with
!
(
&
mut
*
*
value
)
;
return
;
}
if
value
.
is_infinite_leaf
(
)
{
replace_self_with
!
(
&
mut
*
*
value
)
;
return
;
}
if
step
.
is_infinite_leaf
(
)
{
match
strategy
{
RoundingStrategy
:
:
Nearest
|
RoundingStrategy
:
:
ToZero
=
>
{
value
.
coerce_to_value
(
0
.
0
)
;
replace_self_with
!
(
&
mut
*
*
value
)
;
return
;
}
RoundingStrategy
:
:
Up
=
>
{
if
!
value
.
is_negative_leaf
(
)
&
&
!
value
.
is_zero_leaf
(
)
{
value
.
coerce_to_value
(
f32
:
:
INFINITY
)
;
replace_self_with
!
(
&
mut
*
*
value
)
;
return
;
}
else
if
!
value
.
is_negative_leaf
(
)
&
&
value
.
is_zero_leaf
(
)
{
replace_self_with
!
(
&
mut
*
*
value
)
;
return
;
}
else
{
value
.
coerce_to_value
(
0
.
0
)
;
replace_self_with
!
(
&
mut
*
*
value
)
;
return
;
}
}
RoundingStrategy
:
:
Down
=
>
{
if
value
.
is_negative_leaf
(
)
&
&
!
value
.
is_zero_leaf
(
)
{
value
.
coerce_to_value
(
f32
:
:
INFINITY
)
;
replace_self_with
!
(
&
mut
*
*
value
)
;
return
;
}
else
if
value
.
is_negative_leaf
(
)
&
&
value
.
is_zero_leaf
(
)
{
replace_self_with
!
(
&
mut
*
*
value
)
;
return
;
}
else
{
value
.
coerce_to_value
(
0
.
0
)
;
replace_self_with
!
(
&
mut
*
*
value
)
;
return
;
}
}
}
}
if
step
.
is_negative_leaf
(
)
{
step
.
negate
(
)
;
}
let
remainder
=
value_or_stop
!
(
value
.
try_op
(
step
Rem
:
:
rem
)
)
;
let
(
mut
lower_bound
mut
upper_bound
)
=
if
value
.
is_negative_leaf
(
)
{
let
upper_bound
=
value_or_stop
!
(
value
.
try_op
(
&
remainder
Sub
:
:
sub
)
)
;
let
lower_bound
=
value_or_stop
!
(
upper_bound
.
try_op
(
&
step
Sub
:
:
sub
)
)
;
(
lower_bound
upper_bound
)
}
else
{
let
lower_bound
=
value_or_stop
!
(
value
.
try_op
(
&
remainder
Sub
:
:
sub
)
)
;
let
upper_bound
=
value_or_stop
!
(
lower_bound
.
try_op
(
&
step
Add
:
:
add
)
)
;
(
lower_bound
upper_bound
)
}
;
match
strategy
{
RoundingStrategy
:
:
Nearest
=
>
{
let
lower_diff
=
value_or_stop
!
(
value
.
try_op
(
&
lower_bound
Sub
:
:
sub
)
)
;
let
upper_diff
=
value_or_stop
!
(
upper_bound
.
try_op
(
value
Sub
:
:
sub
)
)
;
if
lower_diff
.
lt
(
&
upper_diff
PositivePercentageBasis
:
:
Unknown
)
{
replace_self_with
!
(
&
mut
lower_bound
)
;
}
else
{
replace_self_with
!
(
&
mut
upper_bound
)
;
}
}
RoundingStrategy
:
:
Up
=
>
{
replace_self_with
!
(
&
mut
upper_bound
)
;
}
RoundingStrategy
:
:
Down
=
>
{
replace_self_with
!
(
&
mut
lower_bound
)
;
}
RoundingStrategy
:
:
ToZero
=
>
{
let
mut
lower_diff
=
lower_bound
.
clone
(
)
;
let
mut
upper_diff
=
upper_bound
.
clone
(
)
;
if
lower_diff
.
is_negative_leaf
(
)
{
lower_diff
.
negate
(
)
;
}
if
upper_diff
.
is_negative_leaf
(
)
{
upper_diff
.
negate
(
)
;
}
if
lower_diff
.
lt
(
&
upper_diff
PositivePercentageBasis
:
:
Unknown
)
{
replace_self_with
!
(
&
mut
lower_bound
)
;
}
else
{
replace_self_with
!
(
&
mut
upper_bound
)
;
}
}
}
;
}
Self
:
:
ModRem
{
ref
dividend
ref
divisor
op
}
=
>
{
let
mut
result
=
dividend
.
clone
(
)
;
if
matches
!
(
op
ModRemOp
:
:
Mod
)
&
&
divisor
.
is_infinite_leaf
(
)
&
&
dividend
.
is_negative_leaf
(
)
!
=
divisor
.
is_negative_leaf
(
)
{
result
.
coerce_to_value
(
f32
:
:
NAN
)
;
replace_self_with
!
(
&
mut
*
result
)
;
return
;
}
let
mut
result
=
value_or_stop
!
(
match
op
{
ModRemOp
:
:
Mod
=
>
{
dividend
.
try_op
(
divisor
|
a
b
|
a
-
b
*
(
a
/
b
)
.
floor
(
)
)
}
ModRemOp
:
:
Rem
=
>
{
dividend
.
try_op
(
divisor
|
a
b
|
a
-
b
*
(
a
/
b
)
.
trunc
(
)
)
}
}
)
;
replace_self_with
!
(
&
mut
result
)
;
}
Self
:
:
MinMax
(
ref
mut
children
op
)
=
>
{
let
winning_order
=
match
op
{
MinMaxOp
:
:
Min
=
>
cmp
:
:
Ordering
:
:
Less
MinMaxOp
:
:
Max
=
>
cmp
:
:
Ordering
:
:
Greater
}
;
let
mut
result
=
0
;
for
i
in
1
.
.
children
.
len
(
)
{
let
o
=
match
children
[
i
]
.
compare
(
&
children
[
result
]
PositivePercentageBasis
:
:
Unknown
)
{
None
=
>
return
Some
(
o
)
=
>
o
}
;
if
o
=
=
winning_order
{
result
=
i
;
}
}
replace_self_with
!
(
&
mut
children
[
result
]
)
;
}
Self
:
:
Sum
(
ref
mut
children_slot
)
=
>
{
let
mut
sums_to_merge
=
SmallVec
:
:
<
[
_
;
3
]
>
:
:
new
(
)
;
let
mut
extra_kids
=
0
;
for
(
i
child
)
in
children_slot
.
iter
(
)
.
enumerate
(
)
{
if
let
Self
:
:
Sum
(
ref
children
)
=
*
child
{
extra_kids
+
=
children
.
len
(
)
;
sums_to_merge
.
push
(
i
)
;
}
}
if
children_slot
.
len
(
)
=
=
1
{
replace_self_with
!
(
&
mut
children_slot
[
0
]
)
;
return
;
}
let
mut
children
=
mem
:
:
take
(
children_slot
)
.
into_vec
(
)
;
if
!
sums_to_merge
.
is_empty
(
)
{
children
.
reserve
(
extra_kids
-
sums_to_merge
.
len
(
)
)
;
for
i
in
sums_to_merge
.
drain
(
.
.
)
.
rev
(
)
{
let
kid_children
=
match
children
.
swap_remove
(
i
)
{
Self
:
:
Sum
(
c
)
=
>
c
_
=
>
unreachable
!
(
)
}
;
children
.
extend
(
kid_children
.
into_vec
(
)
)
;
}
}
debug_assert
!
(
children
.
len
(
)
>
=
2
"
Should
still
have
multiple
kids
!
"
)
;
children
.
sort_unstable_by_key
(
|
c
|
c
.
sort_key
(
)
)
;
children
.
dedup_by
(
|
a
b
|
b
.
try_sum_in_place
(
a
)
.
is_ok
(
)
)
;
if
children
.
len
(
)
=
=
1
{
replace_self_with
!
(
&
mut
children
[
0
]
)
;
}
else
{
*
children_slot
=
children
.
into_boxed_slice
(
)
.
into
(
)
;
}
}
Self
:
:
Product
(
ref
mut
children_slot
)
=
>
{
let
mut
products_to_merge
=
SmallVec
:
:
<
[
_
;
3
]
>
:
:
new
(
)
;
let
mut
extra_kids
=
0
;
for
(
i
child
)
in
children_slot
.
iter
(
)
.
enumerate
(
)
{
if
let
Self
:
:
Product
(
ref
children
)
=
*
child
{
extra_kids
+
=
children
.
len
(
)
;
products_to_merge
.
push
(
i
)
;
}
}
if
children_slot
.
len
(
)
=
=
1
{
replace_self_with
!
(
&
mut
children_slot
[
0
]
)
;
return
;
}
let
mut
children
=
mem
:
:
take
(
children_slot
)
.
into_vec
(
)
;
if
!
products_to_merge
.
is_empty
(
)
{
children
.
reserve
(
extra_kids
-
products_to_merge
.
len
(
)
)
;
for
i
in
products_to_merge
.
drain
(
.
.
)
.
rev
(
)
{
let
kid_children
=
match
children
.
swap_remove
(
i
)
{
Self
:
:
Product
(
c
)
=
>
c
_
=
>
unreachable
!
(
)
}
;
children
.
extend
(
kid_children
.
into_vec
(
)
)
;
}
}
debug_assert
!
(
children
.
len
(
)
>
=
2
"
Should
still
have
multiple
kids
!
"
)
;
children
.
dedup_by
(
|
right
left
|
left
.
try_product_in_place
(
right
)
)
;
if
children
.
len
(
)
=
=
1
{
replace_self_with
!
(
&
mut
children
[
0
]
)
;
}
else
{
*
children_slot
=
children
.
into_boxed_slice
(
)
.
into
(
)
;
}
}
Self
:
:
Hypot
(
ref
children
)
=
>
{
let
mut
result
=
value_or_stop
!
(
children
[
0
]
.
try_op
(
&
children
[
0
]
Mul
:
:
mul
)
)
;
for
child
in
children
.
iter
(
)
.
skip
(
1
)
{
let
square
=
value_or_stop
!
(
child
.
try_op
(
&
child
Mul
:
:
mul
)
)
;
result
=
value_or_stop
!
(
result
.
try_op
(
&
square
Add
:
:
add
)
)
;
}
result
=
value_or_stop
!
(
result
.
try_op
(
&
result
|
a
_
|
a
.
sqrt
(
)
)
)
;
replace_self_with
!
(
&
mut
result
)
;
}
Self
:
:
Abs
(
ref
mut
child
)
=
>
{
if
let
CalcNode
:
:
Leaf
(
leaf
)
=
child
.
as_mut
(
)
{
leaf
.
map
(
|
v
|
if
v
.
is_zero
(
)
{
v
}
else
{
v
.
abs
(
)
}
)
;
replace_self_with
!
(
&
mut
*
*
child
)
;
}
}
Self
:
:
Sign
(
ref
mut
child
)
=
>
{
if
let
CalcNode
:
:
Leaf
(
leaf
)
=
child
.
as_mut
(
)
{
let
mut
result
=
Self
:
:
Leaf
(
L
:
:
sign_from
(
leaf
)
)
;
replace_self_with
!
(
&
mut
result
)
;
}
}
Self
:
:
Negate
(
ref
mut
child
)
=
>
{
match
&
mut
*
*
child
{
CalcNode
:
:
Leaf
(
_
)
=
>
{
child
.
negate
(
)
;
replace_self_with
!
(
&
mut
*
*
child
)
;
}
CalcNode
:
:
Negate
(
value
)
=
>
{
replace_self_with
!
(
&
mut
*
*
value
)
;
}
_
=
>
{
}
}
}
Self
:
:
Invert
(
ref
mut
child
)
=
>
{
match
&
mut
*
*
child
{
CalcNode
:
:
Leaf
(
leaf
)
=
>
{
if
leaf
.
unit
(
)
.
is_empty
(
)
{
child
.
map
(
|
v
|
1
.
0
/
v
)
;
replace_self_with
!
(
&
mut
*
*
child
)
;
}
}
CalcNode
:
:
Invert
(
value
)
=
>
{
replace_self_with
!
(
&
mut
*
*
value
)
;
}
_
=
>
{
}
}
}
Self
:
:
Leaf
(
ref
mut
l
)
=
>
{
l
.
simplify
(
)
;
}
}
}
pub
fn
simplify_and_sort
(
&
mut
self
)
{
self
.
visit_depth_first
(
|
node
|
node
.
simplify_and_sort_direct_children
(
)
)
}
fn
to_css_impl
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
level
:
ArgumentLevel
)
-
>
fmt
:
:
Result
where
W
:
Write
{
let
write_closing_paren
=
match
*
self
{
Self
:
:
MinMax
(
_
op
)
=
>
{
dest
.
write_str
(
match
op
{
MinMaxOp
:
:
Max
=
>
"
max
(
"
MinMaxOp
:
:
Min
=
>
"
min
(
"
}
)
?
;
true
}
Self
:
:
Clamp
{
.
.
}
=
>
{
dest
.
write_str
(
"
clamp
(
"
)
?
;
true
}
Self
:
:
Round
{
strategy
.
.
}
=
>
{
match
strategy
{
RoundingStrategy
:
:
Nearest
=
>
dest
.
write_str
(
"
round
(
"
)
RoundingStrategy
:
:
Up
=
>
dest
.
write_str
(
"
round
(
up
"
)
RoundingStrategy
:
:
Down
=
>
dest
.
write_str
(
"
round
(
down
"
)
RoundingStrategy
:
:
ToZero
=
>
dest
.
write_str
(
"
round
(
to
-
zero
"
)
}
?
;
true
}
Self
:
:
ModRem
{
op
.
.
}
=
>
{
dest
.
write_str
(
match
op
{
ModRemOp
:
:
Mod
=
>
"
mod
(
"
ModRemOp
:
:
Rem
=
>
"
rem
(
"
}
)
?
;
true
}
Self
:
:
Hypot
(
_
)
=
>
{
dest
.
write_str
(
"
hypot
(
"
)
?
;
true
}
Self
:
:
Abs
(
_
)
=
>
{
dest
.
write_str
(
"
abs
(
"
)
?
;
true
}
Self
:
:
Sign
(
_
)
=
>
{
dest
.
write_str
(
"
sign
(
"
)
?
;
true
}
Self
:
:
Negate
(
_
)
=
>
{
debug_assert
!
(
false
"
We
never
serialize
Negate
nodes
as
they
are
handled
inside
Sum
nodes
.
"
)
;
dest
.
write_str
(
"
(
-
1
*
"
)
?
;
true
}
Self
:
:
Invert
(
_
)
=
>
{
dest
.
write_str
(
"
(
1
/
"
)
?
;
true
}
Self
:
:
Sum
(
_
)
|
Self
:
:
Product
(
_
)
=
>
match
level
{
ArgumentLevel
:
:
CalculationRoot
=
>
{
dest
.
write_str
(
"
calc
(
"
)
?
;
true
}
ArgumentLevel
:
:
ArgumentRoot
=
>
false
ArgumentLevel
:
:
Nested
=
>
{
dest
.
write_str
(
"
(
"
)
?
;
true
}
}
Self
:
:
Leaf
(
_
)
=
>
match
level
{
ArgumentLevel
:
:
CalculationRoot
=
>
{
dest
.
write_str
(
"
calc
(
"
)
?
;
true
}
ArgumentLevel
:
:
ArgumentRoot
|
ArgumentLevel
:
:
Nested
=
>
false
}
}
;
match
*
self
{
Self
:
:
MinMax
(
ref
children
_
)
|
Self
:
:
Hypot
(
ref
children
)
=
>
{
let
mut
first
=
true
;
for
child
in
&
*
*
children
{
if
!
first
{
dest
.
write_str
(
"
"
)
?
;
}
first
=
false
;
child
.
to_css_impl
(
dest
ArgumentLevel
:
:
ArgumentRoot
)
?
;
}
}
Self
:
:
Negate
(
ref
value
)
|
Self
:
:
Invert
(
ref
value
)
=
>
{
value
.
to_css_impl
(
dest
ArgumentLevel
:
:
Nested
)
?
}
Self
:
:
Sum
(
ref
children
)
=
>
{
let
mut
first
=
true
;
for
child
in
&
*
*
children
{
if
!
first
{
match
child
{
Self
:
:
Leaf
(
l
)
=
>
{
if
l
.
is_negative
(
)
{
dest
.
write_str
(
"
-
"
)
?
;
let
mut
negated
=
l
.
clone
(
)
;
negated
.
negate
(
)
;
negated
.
to_css
(
dest
)
?
;
}
else
{
dest
.
write_str
(
"
+
"
)
?
;
l
.
to_css
(
dest
)
?
;
}
}
Self
:
:
Negate
(
n
)
=
>
{
dest
.
write_str
(
"
-
"
)
?
;
n
.
to_css_impl
(
dest
ArgumentLevel
:
:
Nested
)
?
;
}
_
=
>
{
dest
.
write_str
(
"
+
"
)
?
;
child
.
to_css_impl
(
dest
ArgumentLevel
:
:
Nested
)
?
;
}
}
}
else
{
first
=
false
;
child
.
to_css_impl
(
dest
ArgumentLevel
:
:
Nested
)
?
;
}
}
}
Self
:
:
Product
(
ref
children
)
=
>
{
let
mut
first
=
true
;
for
child
in
&
*
*
children
{
if
!
first
{
match
child
{
Self
:
:
Invert
(
n
)
=
>
{
dest
.
write_str
(
"
/
"
)
?
;
n
.
to_css_impl
(
dest
ArgumentLevel
:
:
Nested
)
?
;
}
_
=
>
{
dest
.
write_str
(
"
*
"
)
?
;
child
.
to_css_impl
(
dest
ArgumentLevel
:
:
Nested
)
?
;
}
}
}
else
{
first
=
false
;
child
.
to_css_impl
(
dest
ArgumentLevel
:
:
Nested
)
?
;
}
}
}
Self
:
:
Clamp
{
ref
min
ref
center
ref
max
}
=
>
{
min
.
to_css_impl
(
dest
ArgumentLevel
:
:
ArgumentRoot
)
?
;
dest
.
write_str
(
"
"
)
?
;
center
.
to_css_impl
(
dest
ArgumentLevel
:
:
ArgumentRoot
)
?
;
dest
.
write_str
(
"
"
)
?
;
max
.
to_css_impl
(
dest
ArgumentLevel
:
:
ArgumentRoot
)
?
;
}
Self
:
:
Round
{
ref
value
ref
step
.
.
}
=
>
{
value
.
to_css_impl
(
dest
ArgumentLevel
:
:
ArgumentRoot
)
?
;
dest
.
write_str
(
"
"
)
?
;
step
.
to_css_impl
(
dest
ArgumentLevel
:
:
ArgumentRoot
)
?
;
}
Self
:
:
ModRem
{
ref
dividend
ref
divisor
.
.
}
=
>
{
dividend
.
to_css_impl
(
dest
ArgumentLevel
:
:
ArgumentRoot
)
?
;
dest
.
write_str
(
"
"
)
?
;
divisor
.
to_css_impl
(
dest
ArgumentLevel
:
:
ArgumentRoot
)
?
;
}
Self
:
:
Abs
(
ref
v
)
|
Self
:
:
Sign
(
ref
v
)
=
>
{
v
.
to_css_impl
(
dest
ArgumentLevel
:
:
ArgumentRoot
)
?
}
Self
:
:
Leaf
(
ref
l
)
=
>
l
.
to_css
(
dest
)
?
}
if
write_closing_paren
{
dest
.
write_char
(
'
)
'
)
?
;
}
Ok
(
(
)
)
}
fn
compare
(
&
self
other
:
&
Self
basis_positive
:
PositivePercentageBasis
)
-
>
Option
<
cmp
:
:
Ordering
>
{
match
(
self
other
)
{
(
&
CalcNode
:
:
Leaf
(
ref
one
)
&
CalcNode
:
:
Leaf
(
ref
other
)
)
=
>
{
one
.
compare
(
other
basis_positive
)
}
_
=
>
None
}
}
compare_helpers
!
(
)
;
}
impl
<
L
:
CalcNodeLeaf
>
ToCss
for
CalcNode
<
L
>
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
self
.
to_css_impl
(
dest
ArgumentLevel
:
:
CalculationRoot
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
#
[
test
]
fn
can_sum_with_checks
(
)
{
assert
!
(
CalcUnits
:
:
LENGTH
.
can_sum_with
(
CalcUnits
:
:
LENGTH
)
)
;
assert
!
(
CalcUnits
:
:
LENGTH
.
can_sum_with
(
CalcUnits
:
:
PERCENTAGE
)
)
;
assert
!
(
CalcUnits
:
:
LENGTH
.
can_sum_with
(
CalcUnits
:
:
LENGTH_PERCENTAGE
)
)
;
assert
!
(
CalcUnits
:
:
PERCENTAGE
.
can_sum_with
(
CalcUnits
:
:
LENGTH
)
)
;
assert
!
(
CalcUnits
:
:
PERCENTAGE
.
can_sum_with
(
CalcUnits
:
:
PERCENTAGE
)
)
;
assert
!
(
CalcUnits
:
:
PERCENTAGE
.
can_sum_with
(
CalcUnits
:
:
LENGTH_PERCENTAGE
)
)
;
assert
!
(
CalcUnits
:
:
LENGTH_PERCENTAGE
.
can_sum_with
(
CalcUnits
:
:
LENGTH
)
)
;
assert
!
(
CalcUnits
:
:
LENGTH_PERCENTAGE
.
can_sum_with
(
CalcUnits
:
:
PERCENTAGE
)
)
;
assert
!
(
CalcUnits
:
:
LENGTH_PERCENTAGE
.
can_sum_with
(
CalcUnits
:
:
LENGTH_PERCENTAGE
)
)
;
assert
!
(
!
CalcUnits
:
:
ANGLE
.
can_sum_with
(
CalcUnits
:
:
TIME
)
)
;
assert
!
(
CalcUnits
:
:
ANGLE
.
can_sum_with
(
CalcUnits
:
:
ANGLE
)
)
;
assert
!
(
!
(
CalcUnits
:
:
ANGLE
|
CalcUnits
:
:
TIME
)
.
can_sum_with
(
CalcUnits
:
:
ANGLE
)
)
;
assert
!
(
!
CalcUnits
:
:
ANGLE
.
can_sum_with
(
CalcUnits
:
:
ANGLE
|
CalcUnits
:
:
TIME
)
)
;
assert
!
(
!
(
CalcUnits
:
:
ANGLE
|
CalcUnits
:
:
TIME
)
.
can_sum_with
(
CalcUnits
:
:
ANGLE
|
CalcUnits
:
:
TIME
)
)
;
}
}
