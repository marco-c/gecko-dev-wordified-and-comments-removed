use
crate
:
:
values
:
:
specified
:
:
SVGPathData
;
#
[
allow
(
missing_docs
)
]
#
[
derive
(
Clone
Copy
Debug
Deserialize
MallocSizeOf
Parse
PartialEq
Serialize
SpecifiedValueInfo
ToAnimatedZero
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
u8
)
]
pub
enum
RaySize
{
ClosestSide
ClosestCorner
FarthestSide
FarthestCorner
Sides
}
impl
RaySize
{
#
[
inline
]
pub
fn
is_default
(
&
self
)
-
>
bool
{
*
self
=
=
RaySize
:
:
ClosestSide
}
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Debug
Deserialize
MallocSizeOf
PartialEq
Serialize
SpecifiedValueInfo
ToAnimatedZero
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
)
]
pub
struct
RayFunction
<
Angle
>
{
pub
angle
:
Angle
#
[
animation
(
constant
)
]
#
[
css
(
skip_if
=
"
RaySize
:
:
is_default
"
)
]
pub
size
:
RaySize
#
[
animation
(
constant
)
]
#
[
css
(
represents_keyword
)
]
pub
contain
:
bool
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Debug
Deserialize
MallocSizeOf
PartialEq
Serialize
SpecifiedValueInfo
ToAnimatedZero
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericOffsetPath
<
Angle
>
{
#
[
css
(
function
)
]
Path
(
SVGPathData
)
#
[
css
(
function
)
]
Ray
(
RayFunction
<
Angle
>
)
#
[
animation
(
error
)
]
None
}
pub
use
self
:
:
GenericOffsetPath
as
OffsetPath
;
impl
<
Angle
>
OffsetPath
<
Angle
>
{
#
[
inline
]
pub
fn
none
(
)
-
>
Self
{
OffsetPath
:
:
None
}
}
