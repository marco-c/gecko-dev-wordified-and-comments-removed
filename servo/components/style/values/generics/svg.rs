use
crate
:
:
parser
:
:
{
Parse
ParserContext
}
;
use
crate
:
:
values
:
:
{
Either
None_
}
;
use
cssparser
:
:
Parser
;
use
style_traits
:
:
{
ParseError
StyleParseErrorKind
}
;
#
[
animation
(
no_bound
(
UrlPaintServer
)
)
]
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToComputedValue
ToCss
)
]
pub
struct
SVGPaint
<
ColorType
UrlPaintServer
>
{
pub
kind
:
SVGPaintKind
<
ColorType
UrlPaintServer
>
pub
fallback
:
Option
<
Either
<
ColorType
None_
>
>
}
#
[
animation
(
no_bound
(
UrlPaintServer
)
)
]
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToComputedValue
ToCss
)
]
pub
enum
SVGPaintKind
<
ColorType
UrlPaintServer
>
{
#
[
animation
(
error
)
]
None
Color
(
ColorType
)
#
[
animation
(
error
)
]
PaintServer
(
UrlPaintServer
)
ContextFill
ContextStroke
}
impl
<
ColorType
UrlPaintServer
>
SVGPaintKind
<
ColorType
UrlPaintServer
>
{
fn
parse_ident
<
'
i
'
t
>
(
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
try_match_ident_ignore_ascii_case
!
{
input
"
none
"
=
>
Ok
(
SVGPaintKind
:
:
None
)
"
context
-
fill
"
=
>
Ok
(
SVGPaintKind
:
:
ContextFill
)
"
context
-
stroke
"
=
>
Ok
(
SVGPaintKind
:
:
ContextStroke
)
}
}
}
fn
parse_fallback
<
'
i
'
t
ColorType
:
Parse
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Option
<
Either
<
ColorType
None_
>
>
{
if
input
.
try
(
|
i
|
i
.
expect_ident_matching
(
"
none
"
)
)
.
is_ok
(
)
{
Some
(
Either
:
:
Second
(
None_
)
)
}
else
{
if
let
Ok
(
color
)
=
input
.
try
(
|
i
|
ColorType
:
:
parse
(
context
i
)
)
{
Some
(
Either
:
:
First
(
color
)
)
}
else
{
None
}
}
}
impl
<
ColorType
:
Parse
UrlPaintServer
:
Parse
>
Parse
for
SVGPaint
<
ColorType
UrlPaintServer
>
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
if
let
Ok
(
url
)
=
input
.
try
(
|
i
|
UrlPaintServer
:
:
parse
(
context
i
)
)
{
Ok
(
SVGPaint
{
kind
:
SVGPaintKind
:
:
PaintServer
(
url
)
fallback
:
parse_fallback
(
context
input
)
}
)
}
else
if
let
Ok
(
kind
)
=
input
.
try
(
SVGPaintKind
:
:
parse_ident
)
{
if
let
SVGPaintKind
:
:
None
=
kind
{
Ok
(
SVGPaint
{
kind
:
kind
fallback
:
None
}
)
}
else
{
Ok
(
SVGPaint
{
kind
:
kind
fallback
:
parse_fallback
(
context
input
)
}
)
}
}
else
if
let
Ok
(
color
)
=
input
.
try
(
|
i
|
ColorType
:
:
parse
(
context
i
)
)
{
Ok
(
SVGPaint
{
kind
:
SVGPaintKind
:
:
Color
(
color
)
fallback
:
None
}
)
}
else
{
Err
(
input
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
}
}
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToComputedValue
ToCss
)
]
pub
enum
SVGLength
<
L
>
{
LengthPercentage
(
L
)
#
[
animation
(
error
)
]
ContextValue
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToComputedValue
ToCss
)
]
pub
enum
SVGStrokeDashArray
<
L
>
{
#
[
css
(
comma
)
]
Values
(
#
[
css
(
if_empty
=
"
none
"
iterable
)
]
Vec
<
L
>
)
ContextValue
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
Parse
SpecifiedValueInfo
ToAnimatedZero
ToComputedValue
ToCss
)
]
pub
enum
SVGOpacity
<
OpacityType
>
{
Opacity
(
OpacityType
)
#
[
animation
(
error
)
]
ContextFillOpacity
#
[
animation
(
error
)
]
ContextStrokeOpacity
}
