use
cssparser
:
:
Parser
;
use
parser
:
:
{
Parse
ParserContext
}
;
use
std
:
:
fmt
;
use
style_traits
:
:
{
ParseError
StyleParseError
ToCss
}
;
use
values
:
:
specified
:
:
url
:
:
SpecifiedUrl
;
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
derive
(
Clone
Debug
PartialEq
ToAnimatedValue
ToComputedValue
ToCss
)
]
pub
struct
SVGPaint
<
ColorType
>
{
pub
kind
:
SVGPaintKind
<
ColorType
>
pub
fallback
:
Option
<
ColorType
>
}
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
derive
(
Clone
Debug
PartialEq
ToAnimatedValue
ToComputedValue
ToCss
)
]
pub
enum
SVGPaintKind
<
ColorType
>
{
None
Color
(
ColorType
)
PaintServer
(
SpecifiedUrl
)
ContextFill
ContextStroke
}
impl
<
ColorType
>
SVGPaintKind
<
ColorType
>
{
fn
parse_ident
<
'
i
'
t
>
(
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
try_match_ident_ignore_ascii_case
!
{
input
.
expect_ident
(
)
?
"
none
"
=
>
Ok
(
SVGPaintKind
:
:
None
)
"
context
-
fill
"
=
>
Ok
(
SVGPaintKind
:
:
ContextFill
)
"
context
-
stroke
"
=
>
Ok
(
SVGPaintKind
:
:
ContextStroke
)
}
}
}
fn
parse_fallback
<
'
i
'
t
ColorType
:
Parse
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Option
<
ColorType
>
{
if
input
.
try
(
|
i
|
i
.
expect_ident_matching
(
"
none
"
)
)
.
is_ok
(
)
{
None
}
else
{
input
.
try
(
|
i
|
ColorType
:
:
parse
(
context
i
)
)
.
ok
(
)
}
}
impl
<
ColorType
:
Parse
>
Parse
for
SVGPaint
<
ColorType
>
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
if
let
Ok
(
url
)
=
input
.
try
(
|
i
|
SpecifiedUrl
:
:
parse
(
context
i
)
)
{
Ok
(
SVGPaint
{
kind
:
SVGPaintKind
:
:
PaintServer
(
url
)
fallback
:
parse_fallback
(
context
input
)
}
)
}
else
if
let
Ok
(
kind
)
=
input
.
try
(
SVGPaintKind
:
:
parse_ident
)
{
if
let
SVGPaintKind
:
:
None
=
kind
{
Ok
(
SVGPaint
{
kind
:
kind
fallback
:
None
}
)
}
else
{
Ok
(
SVGPaint
{
kind
:
kind
fallback
:
parse_fallback
(
context
input
)
}
)
}
}
else
if
let
Ok
(
color
)
=
input
.
try
(
|
i
|
ColorType
:
:
parse
(
context
i
)
)
{
Ok
(
SVGPaint
{
kind
:
SVGPaintKind
:
:
Color
(
color
)
fallback
:
None
}
)
}
else
{
Err
(
StyleParseError
:
:
UnspecifiedError
.
into
(
)
)
}
}
}
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
derive
(
Clone
Copy
Debug
PartialEq
HasViewportPercentage
ToAnimatedValue
ToComputedValue
ToCss
)
]
pub
enum
SVGLength
<
LengthType
>
{
Length
(
LengthType
)
ContextValue
}
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
derive
(
Clone
Debug
PartialEq
HasViewportPercentage
ToAnimatedValue
ToComputedValue
)
]
pub
enum
SVGStrokeDashArray
<
LengthType
>
{
Values
(
Vec
<
LengthType
>
)
ContextValue
}
impl
<
LengthType
>
ToCss
for
SVGStrokeDashArray
<
LengthType
>
where
LengthType
:
ToCss
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
match
self
{
&
SVGStrokeDashArray
:
:
Values
(
ref
values
)
=
>
{
let
mut
iter
=
values
.
iter
(
)
;
if
let
Some
(
first
)
=
iter
.
next
(
)
{
first
.
to_css
(
dest
)
?
;
for
item
in
iter
{
dest
.
write_str
(
"
"
)
?
;
item
.
to_css
(
dest
)
?
;
}
Ok
(
(
)
)
}
else
{
dest
.
write_str
(
"
none
"
)
}
}
&
SVGStrokeDashArray
:
:
ContextValue
=
>
{
dest
.
write_str
(
"
context
-
value
"
)
}
}
}
}
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
derive
(
Clone
Copy
Debug
PartialEq
HasViewportPercentage
ToComputedValue
ToCss
)
]
pub
enum
SVGOpacity
<
OpacityType
>
{
Opacity
(
OpacityType
)
ContextFillOpacity
ContextStrokeOpacity
}
