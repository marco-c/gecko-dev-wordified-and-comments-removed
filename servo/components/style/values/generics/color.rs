#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
ToAnimatedValue
)
]
pub
struct
ComplexColorRatios
{
pub
bg
:
f32
pub
fg
:
f32
}
impl
ComplexColorRatios
{
pub
const
NUMERIC
:
ComplexColorRatios
=
ComplexColorRatios
{
bg
:
1
.
fg
:
0
.
}
;
pub
const
FOREGROUND
:
ComplexColorRatios
=
ComplexColorRatios
{
bg
:
0
.
fg
:
1
.
}
;
}
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
ToAnimatedValue
)
]
pub
enum
Color
<
RGBA
>
{
Numeric
(
RGBA
)
Foreground
Complex
(
RGBA
ComplexColorRatios
)
}
impl
<
RGBA
>
Color
<
RGBA
>
{
pub
fn
with_ratios
(
color
:
RGBA
ratios
:
ComplexColorRatios
)
-
>
Self
{
if
ratios
=
=
ComplexColorRatios
:
:
NUMERIC
{
Color
:
:
Numeric
(
color
)
}
else
if
ratios
=
=
ComplexColorRatios
:
:
FOREGROUND
{
Color
:
:
Foreground
}
else
{
Color
:
:
Complex
(
color
ratios
)
}
}
pub
fn
rgba
(
color
:
RGBA
)
-
>
Self
{
Color
:
:
Numeric
(
color
)
}
pub
fn
currentcolor
(
)
-
>
Self
{
Color
:
:
Foreground
}
pub
fn
is_numeric
(
&
self
)
-
>
bool
{
matches
!
(
*
self
Color
:
:
Numeric
(
.
.
)
)
}
pub
fn
is_currentcolor
(
&
self
)
-
>
bool
{
matches
!
(
*
self
Color
:
:
Foreground
)
}
}
impl
<
RGBA
>
From
<
RGBA
>
for
Color
<
RGBA
>
{
fn
from
(
color
:
RGBA
)
-
>
Self
{
Self
:
:
rgba
(
color
)
}
}
