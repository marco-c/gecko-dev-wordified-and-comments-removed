#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
ToAnimatedValue
ToShmem
)
]
#
[
repr
(
C
)
]
pub
struct
ComplexColorRatios
{
pub
bg
:
f32
pub
fg
:
f32
}
impl
ComplexColorRatios
{
pub
const
NUMERIC
:
ComplexColorRatios
=
ComplexColorRatios
{
bg
:
1
.
fg
:
0
.
}
;
pub
const
CURRENT_COLOR
:
ComplexColorRatios
=
ComplexColorRatios
{
bg
:
0
.
fg
:
1
.
}
;
}
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
ToAnimatedValue
ToShmem
)
]
#
[
repr
(
C
)
]
pub
struct
GenericColor
<
RGBA
>
{
pub
color
:
RGBA
pub
ratios
:
ComplexColorRatios
}
pub
use
self
:
:
GenericColor
as
Color
;
impl
Color
<
cssparser
:
:
RGBA
>
{
pub
fn
currentcolor
(
)
-
>
Self
{
Color
{
color
:
cssparser
:
:
RGBA
:
:
transparent
(
)
ratios
:
ComplexColorRatios
:
:
CURRENT_COLOR
}
}
}
impl
<
RGBA
>
Color
<
RGBA
>
{
pub
fn
new
(
color
:
RGBA
ratios
:
ComplexColorRatios
)
-
>
Self
{
Self
{
color
ratios
}
}
pub
fn
rgba
(
color
:
RGBA
)
-
>
Self
{
Self
{
color
ratios
:
ComplexColorRatios
:
:
NUMERIC
}
}
pub
fn
is_numeric
(
&
self
)
-
>
bool
{
self
.
ratios
=
=
ComplexColorRatios
:
:
NUMERIC
}
pub
fn
is_currentcolor
(
&
self
)
-
>
bool
{
self
.
ratios
=
=
ComplexColorRatios
:
:
CURRENT_COLOR
}
}
impl
<
RGBA
>
From
<
RGBA
>
for
Color
<
RGBA
>
{
fn
from
(
color
:
RGBA
)
-
>
Self
{
Self
:
:
rgba
(
color
)
}
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
Parse
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToComputedValue
ToCss
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericColorOrAuto
<
C
>
{
Color
(
C
)
Auto
}
pub
use
self
:
:
GenericColorOrAuto
as
ColorOrAuto
;
