use
crate
:
:
parser
:
:
{
Parse
ParserContext
}
;
use
cssparser
:
:
Parser
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ParseError
ToCss
}
;
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToComputedValue
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
)
]
pub
struct
Rect
<
T
>
(
pub
T
pub
T
pub
T
pub
T
)
;
impl
<
T
>
Rect
<
T
>
{
pub
fn
new
(
first
:
T
second
:
T
third
:
T
fourth
:
T
)
-
>
Self
{
Rect
(
first
second
third
fourth
)
}
}
impl
<
T
>
Rect
<
T
>
where
T
:
Clone
{
pub
fn
all
(
v
:
T
)
-
>
Self
{
Rect
:
:
new
(
v
.
clone
(
)
v
.
clone
(
)
v
.
clone
(
)
v
)
}
pub
fn
parse_with
<
'
i
'
t
Parse
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
parse
:
Parse
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
where
Parse
:
Fn
(
&
ParserContext
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
T
ParseError
<
'
i
>
>
{
let
first
=
parse
(
context
input
)
?
;
let
second
=
if
let
Ok
(
second
)
=
input
.
try
(
|
i
|
parse
(
context
i
)
)
{
second
}
else
{
return
Ok
(
Self
:
:
new
(
first
.
clone
(
)
first
.
clone
(
)
first
.
clone
(
)
first
)
)
;
}
;
let
third
=
if
let
Ok
(
third
)
=
input
.
try
(
|
i
|
parse
(
context
i
)
)
{
third
}
else
{
return
Ok
(
Self
:
:
new
(
first
.
clone
(
)
second
.
clone
(
)
first
second
)
)
;
}
;
let
fourth
=
if
let
Ok
(
fourth
)
=
input
.
try
(
|
i
|
parse
(
context
i
)
)
{
fourth
}
else
{
return
Ok
(
Self
:
:
new
(
first
second
.
clone
(
)
third
second
)
)
;
}
;
Ok
(
Self
:
:
new
(
first
second
third
fourth
)
)
}
}
impl
<
T
>
Parse
for
Rect
<
T
>
where
T
:
Clone
+
Parse
{
#
[
inline
]
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
Self
:
:
parse_with
(
context
input
T
:
:
parse
)
}
}
impl
<
T
>
ToCss
for
Rect
<
T
>
where
T
:
PartialEq
+
ToCss
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
self
.
0
.
to_css
(
dest
)
?
;
let
same_vertical
=
self
.
0
=
=
self
.
2
;
let
same_horizontal
=
self
.
1
=
=
self
.
3
;
if
same_vertical
&
&
same_horizontal
&
&
self
.
0
=
=
self
.
1
{
return
Ok
(
(
)
)
;
}
dest
.
write_str
(
"
"
)
?
;
self
.
1
.
to_css
(
dest
)
?
;
if
same_vertical
&
&
same_horizontal
{
return
Ok
(
(
)
)
;
}
dest
.
write_str
(
"
"
)
?
;
self
.
2
.
to_css
(
dest
)
?
;
if
same_horizontal
{
return
Ok
(
(
)
)
;
}
dest
.
write_str
(
"
"
)
?
;
self
.
3
.
to_css
(
dest
)
}
}
