use
crate
:
:
One
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
Deserialize
MallocSizeOf
PartialEq
Serialize
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToComputedValue
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
)
]
pub
struct
GenericPosition
<
H
V
>
{
pub
horizontal
:
H
pub
vertical
:
V
}
impl
<
H
V
>
PositionComponent
for
Position
<
H
V
>
where
H
:
PositionComponent
V
:
PositionComponent
{
#
[
inline
]
fn
is_center
(
&
self
)
-
>
bool
{
self
.
horizontal
.
is_center
(
)
&
&
self
.
vertical
.
is_center
(
)
}
}
pub
use
self
:
:
GenericPosition
as
Position
;
impl
<
H
V
>
Position
<
H
V
>
{
pub
fn
new
(
horizontal
:
H
vertical
:
V
)
-
>
Self
{
Self
{
horizontal
vertical
}
}
}
pub
trait
PositionComponent
{
fn
is_center
(
&
self
)
-
>
bool
;
}
/
/
/
cbindgen
:
private
-
default
-
tagged
-
enum
-
constructor
=
false
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
Deserialize
MallocSizeOf
Parse
PartialEq
Serialize
SpecifiedValueInfo
ToAnimatedZero
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericPositionOrAuto
<
Pos
>
{
Position
(
Pos
)
Auto
}
pub
use
self
:
:
GenericPositionOrAuto
as
PositionOrAuto
;
impl
<
Pos
>
PositionOrAuto
<
Pos
>
{
#
[
inline
]
pub
fn
auto
(
)
-
>
Self
{
PositionOrAuto
:
:
Auto
}
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
Parse
SpecifiedValueInfo
ToAnimatedZero
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericZIndex
<
I
>
{
Integer
(
I
)
Auto
}
pub
use
self
:
:
GenericZIndex
as
ZIndex
;
impl
<
Integer
>
ZIndex
<
Integer
>
{
#
[
inline
]
pub
fn
auto
(
)
-
>
Self
{
ZIndex
:
:
Auto
}
#
[
inline
]
pub
fn
is_auto
(
self
)
-
>
bool
{
matches
!
(
self
ZIndex
:
:
Auto
)
}
#
[
inline
]
pub
fn
integer_or
(
self
auto
:
Integer
)
-
>
Integer
{
match
self
{
ZIndex
:
:
Integer
(
n
)
=
>
n
ZIndex
:
:
Auto
=
>
auto
}
}
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedZero
ToComputedValue
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
)
]
pub
struct
Ratio
<
N
>
(
pub
N
pub
N
)
;
impl
<
N
>
ToCss
for
Ratio
<
N
>
where
N
:
ToCss
+
One
+
std
:
:
cmp
:
:
PartialEq
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
self
.
0
.
to_css
(
dest
)
?
;
if
!
self
.
1
.
is_one
(
)
{
dest
.
write_str
(
"
/
"
)
?
;
self
.
1
.
to_css
(
dest
)
?
;
}
Ok
(
(
)
)
}
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedZero
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericAspectRatio
<
N
>
{
Ratio
(
#
[
css
(
field_bound
)
]
Ratio
<
N
>
)
Auto
}
pub
use
self
:
:
GenericAspectRatio
as
AspectRatio
;
impl
<
R
>
AspectRatio
<
R
>
{
#
[
inline
]
pub
fn
auto
(
)
-
>
Self
{
AspectRatio
:
:
Auto
}
}
