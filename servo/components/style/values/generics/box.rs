use
crate
:
:
values
:
:
animated
:
:
ToAnimatedZero
;
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToShmem
)
]
pub
enum
VerticalAlign
<
LengthPercentage
>
{
Baseline
Sub
Super
Top
TextTop
Middle
Bottom
TextBottom
#
[
cfg
(
feature
=
"
gecko
"
)
]
MozMiddleWithBaseline
Length
(
LengthPercentage
)
}
impl
<
L
>
VerticalAlign
<
L
>
{
#
[
inline
]
pub
fn
baseline
(
)
-
>
Self
{
VerticalAlign
:
:
Baseline
}
}
impl
<
L
>
ToAnimatedZero
for
VerticalAlign
<
L
>
{
fn
to_animated_zero
(
&
self
)
-
>
Result
<
Self
(
)
>
{
Err
(
(
)
)
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToShmem
)
]
pub
enum
AnimationIterationCount
<
Number
>
{
Number
(
Number
)
Infinite
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
Parse
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToComputedValue
ToCss
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericPerspective
<
NonNegativeLength
>
{
Length
(
NonNegativeLength
)
None
}
pub
use
self
:
:
GenericPerspective
as
Perspective
;
impl
<
L
>
Perspective
<
L
>
{
#
[
inline
]
pub
fn
none
(
)
-
>
Self
{
Perspective
:
:
None
}
}
