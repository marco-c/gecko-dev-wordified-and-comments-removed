use
crate
:
:
values
:
:
animated
:
:
ToAnimatedZero
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
FromPrimitive
MallocSizeOf
Parse
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
u8
)
]
#
[
allow
(
missing_docs
)
]
pub
enum
VerticalAlignKeyword
{
Baseline
Sub
Super
Top
TextTop
Middle
Bottom
TextBottom
#
[
cfg
(
feature
=
"
gecko
"
)
]
MozMiddleWithBaseline
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericVerticalAlign
<
LengthPercentage
>
{
Keyword
(
VerticalAlignKeyword
)
Length
(
LengthPercentage
)
}
pub
use
self
:
:
GenericVerticalAlign
as
VerticalAlign
;
impl
<
L
>
VerticalAlign
<
L
>
{
#
[
inline
]
pub
fn
baseline
(
)
-
>
Self
{
VerticalAlign
:
:
Keyword
(
VerticalAlignKeyword
:
:
Baseline
)
}
}
impl
<
L
>
ToAnimatedZero
for
VerticalAlign
<
L
>
{
fn
to_animated_zero
(
&
self
)
-
>
Result
<
Self
(
)
>
{
Err
(
(
)
)
}
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToAnimatedValue
ToAnimatedZero
ToResolvedValue
ToShmem
)
]
#
[
value_info
(
other_values
=
"
auto
"
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericContainIntrinsicSize
<
L
>
{
None
Length
(
L
)
AutoLength
(
L
)
}
pub
use
self
:
:
GenericContainIntrinsicSize
as
ContainIntrinsicSize
;
impl
<
L
:
ToCss
>
ToCss
for
ContainIntrinsicSize
<
L
>
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
match
*
self
{
Self
:
:
None
=
>
dest
.
write_str
(
"
none
"
)
Self
:
:
Length
(
ref
l
)
=
>
l
.
to_css
(
dest
)
Self
:
:
AutoLength
(
ref
l
)
=
>
{
dest
.
write_str
(
"
auto
"
)
?
;
l
.
to_css
(
dest
)
}
}
}
}
#
[
derive
(
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToAnimatedValue
ToAnimatedZero
ToResolvedValue
ToShmem
)
]
#
[
repr
(
transparent
)
]
#
[
value_info
(
other_values
=
"
auto
"
)
]
pub
struct
GenericLineClamp
<
I
>
(
pub
I
)
;
pub
use
self
:
:
GenericLineClamp
as
LineClamp
;
impl
<
I
:
crate
:
:
Zero
>
LineClamp
<
I
>
{
pub
fn
none
(
)
-
>
Self
{
Self
(
crate
:
:
Zero
:
:
zero
(
)
)
}
pub
fn
is_none
(
&
self
)
-
>
bool
{
self
.
0
.
is_zero
(
)
}
}
impl
<
I
:
crate
:
:
Zero
+
ToCss
>
ToCss
for
LineClamp
<
I
>
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
if
self
.
is_none
(
)
{
return
dest
.
write_str
(
"
none
"
)
;
}
self
.
0
.
to_css
(
dest
)
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
pub
enum
GenericAnimationIterationCount
<
Number
>
{
Number
(
Number
)
Infinite
}
pub
use
self
:
:
GenericAnimationIterationCount
as
AnimationIterationCount
;
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
Parse
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericPerspective
<
NonNegativeLength
>
{
Length
(
NonNegativeLength
)
None
}
pub
use
self
:
:
GenericPerspective
as
Perspective
;
impl
<
L
>
Perspective
<
L
>
{
#
[
inline
]
pub
fn
none
(
)
-
>
Self
{
Perspective
:
:
None
}
}
