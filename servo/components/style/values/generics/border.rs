use
std
:
:
fmt
;
use
style_traits
:
:
ToCss
;
use
values
:
:
generics
:
:
rect
:
:
Rect
;
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
derive
(
Clone
Copy
Debug
HasViewportPercentage
PartialEq
ToComputedValue
)
]
pub
enum
BorderImageWidthSide
<
LengthOrPercentage
Number
>
{
Length
(
LengthOrPercentage
)
Number
(
Number
)
Auto
}
#
[
derive
(
Clone
Copy
Debug
HasViewportPercentage
PartialEq
ToComputedValue
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
struct
BorderImageSlice
<
NumberOrPercentage
>
{
pub
offsets
:
Rect
<
NumberOrPercentage
>
pub
fill
:
bool
}
impl
<
L
N
>
ToCss
for
BorderImageWidthSide
<
L
N
>
where
L
:
ToCss
N
:
ToCss
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
match
*
self
{
BorderImageWidthSide
:
:
Length
(
ref
length
)
=
>
length
.
to_css
(
dest
)
BorderImageWidthSide
:
:
Number
(
ref
number
)
=
>
number
.
to_css
(
dest
)
BorderImageWidthSide
:
:
Auto
=
>
dest
.
write_str
(
"
auto
"
)
}
}
}
impl
<
N
>
From
<
N
>
for
BorderImageSlice
<
N
>
where
N
:
Clone
{
#
[
inline
]
fn
from
(
value
:
N
)
-
>
Self
{
Self
{
offsets
:
value
.
into
(
)
fill
:
false
}
}
}
impl
<
N
>
ToCss
for
BorderImageSlice
<
N
>
where
N
:
PartialEq
+
ToCss
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
self
.
offsets
.
to_css
(
dest
)
?
;
if
self
.
fill
{
dest
.
write_str
(
"
fill
"
)
?
;
}
Ok
(
(
)
)
}
}
