use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
use
values
:
:
generics
:
:
rect
:
:
Rect
;
use
values
:
:
generics
:
:
size
:
:
Size
;
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
ToComputedValue
ToCss
)
]
pub
enum
BorderImageSideWidth
<
LengthOrPercentage
Number
>
{
Length
(
LengthOrPercentage
)
Number
(
Number
)
Auto
}
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
ToComputedValue
)
]
pub
struct
BorderImageSlice
<
NumberOrPercentage
>
{
pub
offsets
:
Rect
<
NumberOrPercentage
>
pub
fill
:
bool
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
)
]
#
[
derive
(
MallocSizeOf
PartialEq
ToComputedValue
ToCss
)
]
pub
struct
BorderCornerRadius
<
L
>
(
#
[
css
(
field_bound
)
]
pub
Size
<
L
>
)
;
impl
<
L
>
BorderCornerRadius
<
L
>
{
pub
fn
new
(
w
:
L
h
:
L
)
-
>
Self
{
BorderCornerRadius
(
Size
:
:
new
(
w
h
)
)
}
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
)
]
#
[
derive
(
PartialEq
ToAnimatedValue
ToAnimatedZero
ToComputedValue
ToCss
)
]
pub
struct
BorderSpacing
<
L
>
(
#
[
css
(
field_bound
)
]
pub
Size
<
L
>
)
;
impl
<
L
>
BorderSpacing
<
L
>
{
pub
fn
new
(
w
:
L
h
:
L
)
-
>
Self
{
BorderSpacing
(
Size
:
:
new
(
w
h
)
)
}
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
)
]
#
[
derive
(
MallocSizeOf
PartialEq
ToComputedValue
)
]
pub
struct
BorderRadius
<
LengthOrPercentage
>
{
pub
top_left
:
BorderCornerRadius
<
LengthOrPercentage
>
pub
top_right
:
BorderCornerRadius
<
LengthOrPercentage
>
pub
bottom_right
:
BorderCornerRadius
<
LengthOrPercentage
>
pub
bottom_left
:
BorderCornerRadius
<
LengthOrPercentage
>
}
impl
<
N
>
From
<
N
>
for
BorderImageSlice
<
N
>
where
N
:
Clone
{
#
[
inline
]
fn
from
(
value
:
N
)
-
>
Self
{
Self
{
offsets
:
Rect
:
:
all
(
value
)
fill
:
false
}
}
}
impl
<
N
>
ToCss
for
BorderImageSlice
<
N
>
where
N
:
PartialEq
+
ToCss
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
self
.
offsets
.
to_css
(
dest
)
?
;
if
self
.
fill
{
dest
.
write_str
(
"
fill
"
)
?
;
}
Ok
(
(
)
)
}
}
impl
<
L
>
BorderRadius
<
L
>
{
#
[
inline
]
pub
fn
new
(
tl
:
BorderCornerRadius
<
L
>
tr
:
BorderCornerRadius
<
L
>
br
:
BorderCornerRadius
<
L
>
bl
:
BorderCornerRadius
<
L
>
)
-
>
Self
{
BorderRadius
{
top_left
:
tl
top_right
:
tr
bottom_right
:
br
bottom_left
:
bl
}
}
}
impl
<
L
>
BorderRadius
<
L
>
where
L
:
PartialEq
+
ToCss
{
pub
fn
serialize_rects
<
W
>
(
widths
:
Rect
<
&
L
>
heights
:
Rect
<
&
L
>
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
widths
.
to_css
(
dest
)
?
;
if
widths
.
0
!
=
heights
.
0
|
|
widths
.
1
!
=
heights
.
1
|
|
widths
.
2
!
=
heights
.
2
|
|
widths
.
3
!
=
heights
.
3
{
dest
.
write_str
(
"
/
"
)
?
;
heights
.
to_css
(
dest
)
?
;
}
Ok
(
(
)
)
}
}
impl
<
L
>
ToCss
for
BorderRadius
<
L
>
where
L
:
PartialEq
+
ToCss
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
let
BorderRadius
{
top_left
:
BorderCornerRadius
(
ref
tl
)
top_right
:
BorderCornerRadius
(
ref
tr
)
bottom_right
:
BorderCornerRadius
(
ref
br
)
bottom_left
:
BorderCornerRadius
(
ref
bl
)
}
=
*
self
;
let
widths
=
Rect
:
:
new
(
&
tl
.
0
.
width
&
tr
.
0
.
width
&
br
.
0
.
width
&
bl
.
0
.
width
)
;
let
heights
=
Rect
:
:
new
(
&
tl
.
0
.
height
&
tr
.
0
.
height
&
br
.
0
.
height
&
bl
.
0
.
height
)
;
Self
:
:
serialize_rects
(
widths
heights
dest
)
}
}
