use
std
:
:
fmt
;
use
style_traits
:
:
ToCss
;
use
values
:
:
CustomIdent
;
#
[
derive
(
Clone
Debug
PartialEq
ToComputedValue
)
]
pub
struct
CounterIncrement
<
Integer
>
(
Box
<
[
(
CustomIdent
Integer
)
]
)
;
impl
<
I
>
CounterIncrement
<
I
>
{
#
[
inline
]
pub
fn
none
(
)
-
>
Self
{
CounterIncrement
(
vec
!
[
]
.
into_boxed_slice
(
)
)
}
}
impl
<
I
>
ToCss
for
CounterIncrement
<
I
>
where
I
:
ToCss
{
#
[
inline
]
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
if
self
.
0
.
is_empty
(
)
{
return
dest
.
write_str
(
"
none
"
)
;
}
for
(
&
(
ref
name
ref
value
)
i
)
in
self
.
0
.
iter
(
)
.
enumerate
(
)
{
if
i
!
=
0
{
dest
.
write_str
(
"
"
)
?
;
}
name
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
"
)
?
;
value
.
to_css
(
dest
)
?
;
}
Ok
(
(
)
)
}
}
