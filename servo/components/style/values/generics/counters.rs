use
std
:
:
ops
:
:
Deref
;
use
values
:
:
CustomIdent
;
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
)
]
pub
struct
CounterPair
<
Integer
>
{
pub
name
:
CustomIdent
pub
value
:
Integer
}
#
[
derive
(
Clone
Debug
Default
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
)
]
pub
struct
CounterIncrement
<
I
>
(
Counters
<
I
>
)
;
impl
<
I
>
CounterIncrement
<
I
>
{
#
[
inline
]
pub
fn
new
(
counters
:
Vec
<
CounterPair
<
I
>
>
)
-
>
Self
{
CounterIncrement
(
Counters
(
counters
.
into_boxed_slice
(
)
)
)
}
}
impl
<
I
>
Deref
for
CounterIncrement
<
I
>
{
type
Target
=
[
CounterPair
<
I
>
]
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
(
self
.
0
)
.
0
}
}
#
[
derive
(
Clone
Debug
Default
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
)
]
pub
struct
CounterReset
<
I
>
(
Counters
<
I
>
)
;
impl
<
I
>
CounterReset
<
I
>
{
#
[
inline
]
pub
fn
new
(
counters
:
Vec
<
CounterPair
<
I
>
>
)
-
>
Self
{
CounterReset
(
Counters
(
counters
.
into_boxed_slice
(
)
)
)
}
}
impl
<
I
>
Deref
for
CounterReset
<
I
>
{
type
Target
=
[
CounterPair
<
I
>
]
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
(
self
.
0
)
.
0
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
)
]
pub
struct
Counters
<
I
>
(
#
[
css
(
iterable
if_empty
=
"
none
"
)
]
Box
<
[
CounterPair
<
I
>
]
>
)
;
impl
<
I
>
Default
for
Counters
<
I
>
{
#
[
inline
]
fn
default
(
)
-
>
Self
{
Counters
(
vec
!
[
]
.
into_boxed_slice
(
)
)
}
}
