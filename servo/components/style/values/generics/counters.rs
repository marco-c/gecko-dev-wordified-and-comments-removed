#
[
cfg
(
feature
=
"
servo
"
)
]
use
crate
:
:
computed_values
:
:
list_style_type
:
:
T
as
ListStyleType
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
crate
:
:
values
:
:
generics
:
:
CounterStyle
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
crate
:
:
values
:
:
specified
:
:
Attr
;
use
crate
:
:
values
:
:
CustomIdent
;
use
std
:
:
ops
:
:
Deref
;
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
pub
struct
CounterPair
<
Integer
>
{
pub
name
:
CustomIdent
pub
value
:
Integer
}
#
[
derive
(
Clone
Debug
Default
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
pub
struct
CounterIncrement
<
I
>
(
pub
Counters
<
I
>
)
;
impl
<
I
>
CounterIncrement
<
I
>
{
#
[
inline
]
pub
fn
new
(
counters
:
Vec
<
CounterPair
<
I
>
>
)
-
>
Self
{
CounterIncrement
(
Counters
(
counters
.
into_boxed_slice
(
)
)
)
}
}
impl
<
I
>
Deref
for
CounterIncrement
<
I
>
{
type
Target
=
[
CounterPair
<
I
>
]
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
(
self
.
0
)
.
0
}
}
#
[
derive
(
Clone
Debug
Default
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
pub
struct
CounterSetOrReset
<
I
>
(
pub
Counters
<
I
>
)
;
impl
<
I
>
CounterSetOrReset
<
I
>
{
#
[
inline
]
pub
fn
new
(
counters
:
Vec
<
CounterPair
<
I
>
>
)
-
>
Self
{
CounterSetOrReset
(
Counters
(
counters
.
into_boxed_slice
(
)
)
)
}
}
impl
<
I
>
Deref
for
CounterSetOrReset
<
I
>
{
type
Target
=
[
CounterPair
<
I
>
]
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
(
self
.
0
)
.
0
}
}
#
[
derive
(
Clone
Debug
Default
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
pub
struct
Counters
<
I
>
(
#
[
css
(
iterable
if_empty
=
"
none
"
)
]
Box
<
[
CounterPair
<
I
>
]
>
)
;
impl
<
I
>
Counters
<
I
>
{
#
[
inline
]
pub
fn
into_vec
(
self
)
-
>
Vec
<
CounterPair
<
I
>
>
{
self
.
0
.
into_vec
(
)
}
}
#
[
cfg
(
feature
=
"
servo
"
)
]
type
CounterStyleType
=
ListStyleType
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
type
CounterStyleType
=
CounterStyle
;
#
[
cfg
(
feature
=
"
servo
"
)
]
#
[
inline
]
fn
is_decimal
(
counter_type
:
&
CounterStyleType
)
-
>
bool
{
*
counter_type
=
=
ListStyleType
:
:
Decimal
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
inline
]
fn
is_decimal
(
counter_type
:
&
CounterStyleType
)
-
>
bool
{
*
counter_type
=
=
CounterStyle
:
:
decimal
(
)
}
#
[
derive
(
Clone
Debug
Eq
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
pub
enum
Content
<
ImageUrl
>
{
Normal
None
#
[
cfg
(
feature
=
"
gecko
"
)
]
MozAltContent
Items
(
#
[
css
(
iterable
)
]
Box
<
[
ContentItem
<
ImageUrl
>
]
>
)
}
impl
<
ImageUrl
>
Content
<
ImageUrl
>
{
#
[
inline
]
pub
fn
normal
(
)
-
>
Self
{
Content
:
:
Normal
}
}
#
[
derive
(
Clone
Debug
Eq
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
pub
enum
ContentItem
<
ImageUrl
>
{
String
(
Box
<
str
>
)
#
[
css
(
comma
function
)
]
Counter
(
CustomIdent
#
[
css
(
skip_if
=
"
is_decimal
"
)
]
CounterStyleType
)
#
[
css
(
comma
function
)
]
Counters
(
CustomIdent
Box
<
str
>
#
[
css
(
skip_if
=
"
is_decimal
"
)
]
CounterStyleType
)
OpenQuote
CloseQuote
NoOpenQuote
NoCloseQuote
#
[
cfg
(
feature
=
"
gecko
"
)
]
Attr
(
Attr
)
Url
(
ImageUrl
)
}
