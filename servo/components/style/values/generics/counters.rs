use
std
:
:
fmt
;
use
std
:
:
fmt
:
:
Write
;
use
std
:
:
ops
:
:
Deref
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
use
values
:
:
CustomIdent
;
#
[
derive
(
Clone
Debug
Default
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
)
]
pub
struct
CounterIncrement
<
I
>
(
Counters
<
I
>
)
;
impl
<
I
>
CounterIncrement
<
I
>
{
#
[
inline
]
pub
fn
new
(
counters
:
Vec
<
(
CustomIdent
I
)
>
)
-
>
Self
{
CounterIncrement
(
Counters
(
counters
.
into_boxed_slice
(
)
)
)
}
}
impl
<
I
>
Deref
for
CounterIncrement
<
I
>
{
type
Target
=
[
(
CustomIdent
I
)
]
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
(
self
.
0
)
.
0
}
}
#
[
derive
(
Clone
Debug
Default
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
)
]
pub
struct
CounterReset
<
I
>
(
Counters
<
I
>
)
;
impl
<
I
>
CounterReset
<
I
>
{
#
[
inline
]
pub
fn
new
(
counters
:
Vec
<
(
CustomIdent
I
)
>
)
-
>
Self
{
CounterReset
(
Counters
(
counters
.
into_boxed_slice
(
)
)
)
}
}
impl
<
I
>
Deref
for
CounterReset
<
I
>
{
type
Target
=
[
(
CustomIdent
I
)
]
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
(
self
.
0
)
.
0
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
)
]
pub
struct
Counters
<
I
>
(
Box
<
[
(
CustomIdent
I
)
]
>
)
;
impl
<
I
>
Default
for
Counters
<
I
>
{
#
[
inline
]
fn
default
(
)
-
>
Self
{
Counters
(
vec
!
[
]
.
into_boxed_slice
(
)
)
}
}
impl
<
I
>
ToCss
for
Counters
<
I
>
where
I
:
ToCss
{
#
[
inline
]
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
if
self
.
0
.
is_empty
(
)
{
return
dest
.
write_str
(
"
none
"
)
;
}
let
mut
first
=
true
;
for
&
(
ref
name
ref
value
)
in
&
*
self
.
0
{
if
!
first
{
dest
.
write_str
(
"
"
)
?
;
}
first
=
false
;
name
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
"
)
?
;
value
.
to_css
(
dest
)
?
;
}
Ok
(
(
)
)
}
}
