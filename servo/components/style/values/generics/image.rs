use
crate
:
:
custom_properties
;
use
crate
:
:
values
:
:
serialize_atom_identifier
;
use
crate
:
:
Atom
;
use
servo_arc
:
:
Arc
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
#
[
derive
(
Clone
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToResolvedValue
ToShmem
)
]
pub
enum
Image
<
Gradient
MozImageRect
ImageUrl
>
{
Url
(
ImageUrl
)
Gradient
(
Box
<
Gradient
>
)
Rect
(
Box
<
MozImageRect
>
)
#
[
css
(
function
=
"
-
moz
-
element
"
)
]
Element
(
Atom
)
#
[
cfg
(
feature
=
"
servo
"
)
]
PaintWorklet
(
PaintWorklet
)
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
ToComputedValue
ToResolvedValue
ToShmem
)
]
pub
struct
Gradient
<
LineDirection
Length
LengthPercentage
Position
Color
>
{
pub
kind
:
GradientKind
<
LineDirection
Length
LengthPercentage
Position
>
pub
items
:
Vec
<
GradientItem
<
Color
LengthPercentage
>
>
pub
repeating
:
bool
pub
compat_mode
:
CompatMode
}
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
ToComputedValue
ToResolvedValue
ToShmem
)
]
pub
enum
CompatMode
{
Modern
WebKit
Moz
}
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
ToComputedValue
ToResolvedValue
ToShmem
)
]
pub
enum
GradientKind
<
LineDirection
Length
LengthPercentage
Position
>
{
Linear
(
LineDirection
)
Radial
(
EndingShape
<
Length
LengthPercentage
>
Position
)
}
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
pub
enum
EndingShape
<
Length
LengthPercentage
>
{
Circle
(
Circle
<
Length
>
)
Ellipse
(
Ellipse
<
LengthPercentage
>
)
}
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
ToComputedValue
ToResolvedValue
ToShmem
)
]
pub
enum
Circle
<
Length
>
{
Radius
(
Length
)
Extent
(
ShapeExtent
)
}
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
pub
enum
Ellipse
<
LengthPercentage
>
{
Radii
(
LengthPercentage
LengthPercentage
)
Extent
(
ShapeExtent
)
}
#
[
allow
(
missing_docs
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
Serialize
)
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
MallocSizeOf
Parse
PartialEq
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
pub
enum
ShapeExtent
{
ClosestSide
FarthestSide
ClosestCorner
FarthestCorner
Contain
Cover
}
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericGradientItem
<
Color
LengthPercentage
>
{
SimpleColorStop
(
Color
)
ComplexColorStop
{
color
:
Color
position
:
LengthPercentage
}
InterpolationHint
(
LengthPercentage
)
}
pub
use
self
:
:
GenericGradientItem
as
GradientItem
;
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
pub
struct
ColorStop
<
Color
LengthPercentage
>
{
pub
color
:
Color
pub
position
:
Option
<
LengthPercentage
>
}
impl
<
Color
LengthPercentage
>
ColorStop
<
Color
LengthPercentage
>
{
#
[
inline
]
pub
fn
into_item
(
self
)
-
>
GradientItem
<
Color
LengthPercentage
>
{
match
self
.
position
{
Some
(
position
)
=
>
GradientItem
:
:
ComplexColorStop
{
color
:
self
.
color
position
}
None
=
>
GradientItem
:
:
SimpleColorStop
(
self
.
color
)
}
}
}
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
MallocSizeOf
)
)
]
#
[
derive
(
Clone
Debug
PartialEq
ToComputedValue
ToResolvedValue
ToShmem
)
]
pub
struct
PaintWorklet
{
pub
name
:
Atom
#
[
cfg_attr
(
feature
=
"
servo
"
ignore_malloc_size_of
=
"
Arc
"
)
]
pub
arguments
:
Vec
<
Arc
<
custom_properties
:
:
SpecifiedValue
>
>
}
impl
:
:
style_traits
:
:
SpecifiedValueInfo
for
PaintWorklet
{
}
impl
ToCss
for
PaintWorklet
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
dest
.
write_str
(
"
paint
(
"
)
?
;
serialize_atom_identifier
(
&
self
.
name
dest
)
?
;
for
argument
in
&
self
.
arguments
{
dest
.
write_str
(
"
"
)
?
;
argument
.
to_css
(
dest
)
?
;
}
dest
.
write_str
(
"
)
"
)
}
}
#
[
allow
(
missing_docs
)
]
#
[
css
(
comma
function
)
]
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
pub
struct
MozImageRect
<
NumberOrPercentage
MozImageRectUrl
>
{
pub
url
:
MozImageRectUrl
pub
top
:
NumberOrPercentage
pub
right
:
NumberOrPercentage
pub
bottom
:
NumberOrPercentage
pub
left
:
NumberOrPercentage
}
impl
<
G
R
U
>
fmt
:
:
Debug
for
Image
<
G
R
U
>
where
G
:
ToCss
R
:
ToCss
U
:
ToCss
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
self
.
to_css
(
&
mut
CssWriter
:
:
new
(
f
)
)
}
}
impl
<
G
R
U
>
ToCss
for
Image
<
G
R
U
>
where
G
:
ToCss
R
:
ToCss
U
:
ToCss
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
match
*
self
{
Image
:
:
Url
(
ref
url
)
=
>
url
.
to_css
(
dest
)
Image
:
:
Gradient
(
ref
gradient
)
=
>
gradient
.
to_css
(
dest
)
Image
:
:
Rect
(
ref
rect
)
=
>
rect
.
to_css
(
dest
)
#
[
cfg
(
feature
=
"
servo
"
)
]
Image
:
:
PaintWorklet
(
ref
paint_worklet
)
=
>
paint_worklet
.
to_css
(
dest
)
Image
:
:
Element
(
ref
selector
)
=
>
{
dest
.
write_str
(
"
-
moz
-
element
(
#
"
)
?
;
serialize_atom_identifier
(
selector
dest
)
?
;
dest
.
write_str
(
"
)
"
)
}
}
}
}
impl
<
D
L
LoP
P
C
>
ToCss
for
Gradient
<
D
L
LoP
P
C
>
where
D
:
LineDirection
L
:
ToCss
LoP
:
ToCss
P
:
ToCss
C
:
ToCss
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
match
self
.
compat_mode
{
CompatMode
:
:
WebKit
=
>
dest
.
write_str
(
"
-
webkit
-
"
)
?
CompatMode
:
:
Moz
=
>
dest
.
write_str
(
"
-
moz
-
"
)
?
_
=
>
{
}
}
if
self
.
repeating
{
dest
.
write_str
(
"
repeating
-
"
)
?
;
}
dest
.
write_str
(
self
.
kind
.
label
(
)
)
?
;
dest
.
write_str
(
"
-
gradient
(
"
)
?
;
let
mut
skip_comma
=
match
self
.
kind
{
GradientKind
:
:
Linear
(
ref
direction
)
if
direction
.
points_downwards
(
self
.
compat_mode
)
=
>
{
true
}
GradientKind
:
:
Linear
(
ref
direction
)
=
>
{
direction
.
to_css
(
dest
self
.
compat_mode
)
?
;
false
}
GradientKind
:
:
Radial
(
ref
shape
ref
position
)
=
>
{
let
omit_shape
=
match
*
shape
{
EndingShape
:
:
Ellipse
(
Ellipse
:
:
Extent
(
ShapeExtent
:
:
Cover
)
)
|
EndingShape
:
:
Ellipse
(
Ellipse
:
:
Extent
(
ShapeExtent
:
:
FarthestCorner
)
)
=
>
true
_
=
>
false
}
;
if
self
.
compat_mode
=
=
CompatMode
:
:
Modern
{
if
!
omit_shape
{
shape
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
"
)
?
;
}
dest
.
write_str
(
"
at
"
)
?
;
position
.
to_css
(
dest
)
?
;
}
else
{
position
.
to_css
(
dest
)
?
;
if
!
omit_shape
{
dest
.
write_str
(
"
"
)
?
;
shape
.
to_css
(
dest
)
?
;
}
}
false
}
}
;
for
item
in
&
self
.
items
{
if
!
skip_comma
{
dest
.
write_str
(
"
"
)
?
;
}
skip_comma
=
false
;
item
.
to_css
(
dest
)
?
;
}
dest
.
write_str
(
"
)
"
)
}
}
impl
<
D
L
LoP
P
>
GradientKind
<
D
L
LoP
P
>
{
fn
label
(
&
self
)
-
>
&
str
{
match
*
self
{
GradientKind
:
:
Linear
(
.
.
)
=
>
"
linear
"
GradientKind
:
:
Radial
(
.
.
)
=
>
"
radial
"
}
}
}
pub
trait
LineDirection
{
fn
points_downwards
(
&
self
compat_mode
:
CompatMode
)
-
>
bool
;
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
compat_mode
:
CompatMode
)
-
>
fmt
:
:
Result
where
W
:
Write
;
}
impl
<
L
>
ToCss
for
Circle
<
L
>
where
L
:
ToCss
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
match
*
self
{
Circle
:
:
Extent
(
ShapeExtent
:
:
FarthestCorner
)
|
Circle
:
:
Extent
(
ShapeExtent
:
:
Cover
)
=
>
{
dest
.
write_str
(
"
circle
"
)
}
Circle
:
:
Extent
(
keyword
)
=
>
{
dest
.
write_str
(
"
circle
"
)
?
;
keyword
.
to_css
(
dest
)
}
Circle
:
:
Radius
(
ref
length
)
=
>
length
.
to_css
(
dest
)
}
}
}
