use
crate
:
:
values
:
:
animated
:
:
{
lists
Animate
Procedure
ToAnimatedZero
}
;
use
crate
:
:
values
:
:
distance
:
:
{
ComputeSquaredDistance
SquaredDistance
}
;
use
crate
:
:
values
:
:
generics
:
:
border
:
:
GenericBorderRadius
;
use
crate
:
:
values
:
:
generics
:
:
position
:
:
GenericPositionOrAuto
;
use
crate
:
:
values
:
:
generics
:
:
rect
:
:
Rect
;
use
crate
:
:
values
:
:
specified
:
:
SVGPathData
;
use
crate
:
:
Zero
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
#
[
allow
(
missing_docs
)
]
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
Parse
SpecifiedValueInfo
ToAnimatedValue
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
u8
)
]
pub
enum
ShapeGeometryBox
{
#
[
css
(
skip
)
]
ElementDependent
FillBox
StrokeBox
ViewBox
ShapeBox
(
ShapeBox
)
}
impl
Default
for
ShapeGeometryBox
{
fn
default
(
)
-
>
Self
{
Self
:
:
ElementDependent
}
}
#
[
allow
(
missing_docs
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
Serialize
)
)
]
#
[
derive
(
Animate
Clone
Copy
ComputeSquaredDistance
Debug
Eq
MallocSizeOf
Parse
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
u8
)
]
pub
enum
ShapeBox
{
MarginBox
BorderBox
PaddingBox
ContentBox
}
impl
Default
for
ShapeBox
{
fn
default
(
)
-
>
Self
{
ShapeBox
:
:
MarginBox
}
}
#
[
allow
(
missing_docs
)
]
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
animation
(
no_bound
(
U
)
)
]
#
[
repr
(
u8
)
]
pub
enum
GenericClipPath
<
BasicShape
U
>
{
#
[
animation
(
error
)
]
None
#
[
animation
(
error
)
]
Url
(
U
)
Shape
(
Box
<
BasicShape
>
#
[
css
(
skip_if
=
"
is_default
"
)
]
ShapeGeometryBox
)
#
[
animation
(
error
)
]
Box
(
ShapeGeometryBox
)
}
pub
use
self
:
:
GenericClipPath
as
ClipPath
;
#
[
allow
(
missing_docs
)
]
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
animation
(
no_bound
(
I
)
)
]
#
[
repr
(
u8
)
]
pub
enum
GenericShapeOutside
<
BasicShape
I
>
{
#
[
animation
(
error
)
]
None
#
[
animation
(
error
)
]
Image
(
I
)
Shape
(
Box
<
BasicShape
>
#
[
css
(
skip_if
=
"
is_default
"
)
]
ShapeBox
)
#
[
animation
(
error
)
]
Box
(
ShapeBox
)
}
pub
use
self
:
:
GenericShapeOutside
as
ShapeOutside
;
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Debug
Deserialize
MallocSizeOf
PartialEq
Serialize
SpecifiedValueInfo
ToAnimatedValue
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericBasicShape
<
Position
LengthPercentage
NonNegativeLengthPercentage
BasicShapeRect
>
{
Rect
(
BasicShapeRect
)
Circle
(
#
[
css
(
field_bound
)
]
#
[
shmem
(
field_bound
)
]
Circle
<
Position
NonNegativeLengthPercentage
>
)
Ellipse
(
#
[
css
(
field_bound
)
]
#
[
shmem
(
field_bound
)
]
Ellipse
<
Position
NonNegativeLengthPercentage
>
)
Polygon
(
GenericPolygon
<
LengthPercentage
>
)
Path
(
Path
)
}
pub
use
self
:
:
GenericBasicShape
as
BasicShape
;
#
[
allow
(
missing_docs
)
]
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Debug
Deserialize
MallocSizeOf
PartialEq
Serialize
SpecifiedValueInfo
ToAnimatedValue
ToComputedValue
ToResolvedValue
ToShmem
)
]
#
[
css
(
function
=
"
inset
"
)
]
#
[
repr
(
C
)
]
pub
struct
GenericInsetRect
<
LengthPercentage
NonNegativeLengthPercentage
>
{
pub
rect
:
Rect
<
LengthPercentage
>
#
[
shmem
(
field_bound
)
]
pub
round
:
GenericBorderRadius
<
NonNegativeLengthPercentage
>
}
pub
use
self
:
:
GenericInsetRect
as
InsetRect
;
#
[
allow
(
missing_docs
)
]
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
Deserialize
MallocSizeOf
PartialEq
Serialize
SpecifiedValueInfo
ToAnimatedValue
ToComputedValue
ToResolvedValue
ToShmem
)
]
#
[
css
(
function
)
]
#
[
repr
(
C
)
]
pub
struct
Circle
<
Position
NonNegativeLengthPercentage
>
{
pub
position
:
GenericPositionOrAuto
<
Position
>
pub
radius
:
GenericShapeRadius
<
NonNegativeLengthPercentage
>
}
#
[
allow
(
missing_docs
)
]
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
Deserialize
MallocSizeOf
PartialEq
Serialize
SpecifiedValueInfo
ToAnimatedValue
ToComputedValue
ToResolvedValue
ToShmem
)
]
#
[
css
(
function
)
]
#
[
repr
(
C
)
]
pub
struct
Ellipse
<
Position
NonNegativeLengthPercentage
>
{
pub
position
:
GenericPositionOrAuto
<
Position
>
pub
semiaxis_x
:
GenericShapeRadius
<
NonNegativeLengthPercentage
>
pub
semiaxis_y
:
GenericShapeRadius
<
NonNegativeLengthPercentage
>
}
#
[
allow
(
missing_docs
)
]
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
Deserialize
MallocSizeOf
Parse
PartialEq
Serialize
SpecifiedValueInfo
ToAnimatedValue
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericShapeRadius
<
NonNegativeLengthPercentage
>
{
Length
(
NonNegativeLengthPercentage
)
#
[
animation
(
error
)
]
ClosestSide
#
[
animation
(
error
)
]
FarthestSide
}
pub
use
self
:
:
GenericShapeRadius
as
ShapeRadius
;
#
[
derive
(
Clone
Debug
Deserialize
MallocSizeOf
PartialEq
Serialize
SpecifiedValueInfo
ToAnimatedValue
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
css
(
comma
function
=
"
polygon
"
)
]
#
[
repr
(
C
)
]
pub
struct
GenericPolygon
<
LengthPercentage
>
{
#
[
css
(
skip_if
=
"
is_default
"
)
]
pub
fill
:
FillRule
#
[
css
(
iterable
)
]
pub
coordinates
:
crate
:
:
OwnedSlice
<
PolygonCoord
<
LengthPercentage
>
>
}
pub
use
self
:
:
GenericPolygon
as
Polygon
;
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Debug
Deserialize
MallocSizeOf
PartialEq
Serialize
SpecifiedValueInfo
ToAnimatedValue
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
)
]
pub
struct
PolygonCoord
<
LengthPercentage
>
(
pub
LengthPercentage
pub
LengthPercentage
)
;
#
[
allow
(
missing_docs
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
Serialize
)
)
]
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
Deserialize
Eq
MallocSizeOf
Parse
PartialEq
Serialize
SpecifiedValueInfo
ToAnimatedValue
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
u8
)
]
pub
enum
FillRule
{
Nonzero
Evenodd
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Debug
Deserialize
MallocSizeOf
PartialEq
Serialize
SpecifiedValueInfo
ToAnimatedValue
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
css
(
comma
function
=
"
path
"
)
]
#
[
repr
(
C
)
]
pub
struct
Path
{
#
[
css
(
skip_if
=
"
is_default
"
)
]
pub
fill
:
FillRule
pub
path
:
SVGPathData
}
impl
<
B
U
>
ToAnimatedZero
for
ClipPath
<
B
U
>
{
fn
to_animated_zero
(
&
self
)
-
>
Result
<
Self
(
)
>
{
Err
(
(
)
)
}
}
impl
<
B
U
>
ToAnimatedZero
for
ShapeOutside
<
B
U
>
{
fn
to_animated_zero
(
&
self
)
-
>
Result
<
Self
(
)
>
{
Err
(
(
)
)
}
}
impl
<
Length
NonNegativeLength
>
ToCss
for
InsetRect
<
Length
NonNegativeLength
>
where
Length
:
ToCss
+
PartialEq
NonNegativeLength
:
ToCss
+
PartialEq
+
Zero
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
dest
.
write_str
(
"
inset
(
"
)
?
;
self
.
rect
.
to_css
(
dest
)
?
;
if
!
self
.
round
.
is_zero
(
)
{
dest
.
write_str
(
"
round
"
)
?
;
self
.
round
.
to_css
(
dest
)
?
;
}
dest
.
write_char
(
'
)
'
)
}
}
impl
<
Position
NonNegativeLengthPercentage
>
ToCss
for
Circle
<
Position
NonNegativeLengthPercentage
>
where
Position
:
ToCss
NonNegativeLengthPercentage
:
ToCss
+
PartialEq
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
let
has_radius
=
self
.
radius
!
=
Default
:
:
default
(
)
;
dest
.
write_str
(
"
circle
(
"
)
?
;
if
has_radius
{
self
.
radius
.
to_css
(
dest
)
?
;
}
if
!
matches
!
(
self
.
position
GenericPositionOrAuto
:
:
Auto
)
{
if
has_radius
{
dest
.
write_char
(
'
'
)
?
;
}
dest
.
write_str
(
"
at
"
)
?
;
self
.
position
.
to_css
(
dest
)
?
;
}
dest
.
write_char
(
'
)
'
)
}
}
impl
<
Position
NonNegativeLengthPercentage
>
ToCss
for
Ellipse
<
Position
NonNegativeLengthPercentage
>
where
Position
:
ToCss
NonNegativeLengthPercentage
:
ToCss
+
PartialEq
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
let
has_radii
=
self
.
semiaxis_x
!
=
Default
:
:
default
(
)
|
|
self
.
semiaxis_y
!
=
Default
:
:
default
(
)
;
dest
.
write_str
(
"
ellipse
(
"
)
?
;
if
has_radii
{
self
.
semiaxis_x
.
to_css
(
dest
)
?
;
dest
.
write_char
(
'
'
)
?
;
self
.
semiaxis_y
.
to_css
(
dest
)
?
;
}
if
!
matches
!
(
self
.
position
GenericPositionOrAuto
:
:
Auto
)
{
if
has_radii
{
dest
.
write_char
(
'
'
)
?
;
}
dest
.
write_str
(
"
at
"
)
?
;
self
.
position
.
to_css
(
dest
)
?
;
}
dest
.
write_char
(
'
)
'
)
}
}
impl
<
L
>
Default
for
ShapeRadius
<
L
>
{
#
[
inline
]
fn
default
(
)
-
>
Self
{
ShapeRadius
:
:
ClosestSide
}
}
impl
<
L
>
Animate
for
Polygon
<
L
>
where
L
:
Animate
{
fn
animate
(
&
self
other
:
&
Self
procedure
:
Procedure
)
-
>
Result
<
Self
(
)
>
{
if
self
.
fill
!
=
other
.
fill
{
return
Err
(
(
)
)
;
}
let
coordinates
=
lists
:
:
by_computed_value
:
:
animate
(
&
self
.
coordinates
&
other
.
coordinates
procedure
)
?
;
Ok
(
Polygon
{
fill
:
self
.
fill
coordinates
}
)
}
}
impl
<
L
>
ComputeSquaredDistance
for
Polygon
<
L
>
where
L
:
ComputeSquaredDistance
{
fn
compute_squared_distance
(
&
self
other
:
&
Self
)
-
>
Result
<
SquaredDistance
(
)
>
{
if
self
.
fill
!
=
other
.
fill
{
return
Err
(
(
)
)
;
}
lists
:
:
by_computed_value
:
:
squared_distance
(
&
self
.
coordinates
&
other
.
coordinates
)
}
}
impl
Default
for
FillRule
{
#
[
inline
]
fn
default
(
)
-
>
Self
{
FillRule
:
:
Nonzero
}
}
#
[
inline
]
fn
is_default
<
T
:
Default
+
PartialEq
>
(
fill
:
&
T
)
-
>
bool
{
*
fill
=
=
Default
:
:
default
(
)
}
