use
app_units
:
:
Au
;
use
byteorder
:
:
{
BigEndian
ReadBytesExt
}
;
use
cssparser
:
:
Parser
;
use
num_traits
:
:
One
;
use
parser
:
:
{
Parse
ParserContext
}
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
std
:
:
io
:
:
Cursor
;
use
style_traits
:
:
{
CssWriter
KeywordsCollectFn
ParseError
}
;
use
style_traits
:
:
{
SpecifiedValueInfo
StyleParseErrorKind
ToCss
}
;
use
values
:
:
distance
:
:
{
ComputeSquaredDistance
SquaredDistance
}
;
#
[
derive
(
Clone
Debug
Eq
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
)
]
pub
struct
FeatureTagValue
<
Integer
>
{
pub
tag
:
FontTag
pub
value
:
Integer
}
impl
<
Integer
>
ToCss
for
FeatureTagValue
<
Integer
>
where
Integer
:
One
+
ToCss
+
PartialEq
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
self
.
tag
.
to_css
(
dest
)
?
;
if
self
.
value
!
=
Integer
:
:
one
(
)
{
dest
.
write_char
(
'
'
)
?
;
self
.
value
.
to_css
(
dest
)
?
;
}
Ok
(
(
)
)
}
}
#
[
derive
(
Animate
Clone
Debug
Eq
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
)
]
pub
struct
VariationValue
<
Number
>
{
#
[
animation
(
constant
)
]
pub
tag
:
FontTag
pub
value
:
Number
}
impl
<
Number
>
ComputeSquaredDistance
for
VariationValue
<
Number
>
where
Number
:
ComputeSquaredDistance
{
#
[
inline
]
fn
compute_squared_distance
(
&
self
other
:
&
Self
)
-
>
Result
<
SquaredDistance
(
)
>
{
if
self
.
tag
!
=
other
.
tag
{
return
Err
(
(
)
)
;
}
self
.
value
.
compute_squared_distance
(
&
other
.
value
)
}
}
#
[
css
(
comma
)
]
#
[
derive
(
Clone
Debug
Eq
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
)
]
pub
struct
FontSettings
<
T
>
(
#
[
css
(
if_empty
=
"
normal
"
iterable
)
]
pub
Box
<
[
T
]
>
)
;
impl
<
T
>
FontSettings
<
T
>
{
#
[
inline
]
pub
fn
normal
(
)
-
>
Self
{
FontSettings
(
vec
!
[
]
.
into_boxed_slice
(
)
)
}
}
impl
<
T
:
Parse
>
Parse
for
FontSettings
<
T
>
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
if
input
.
try
(
|
i
|
i
.
expect_ident_matching
(
"
normal
"
)
)
.
is_ok
(
)
{
return
Ok
(
Self
:
:
normal
(
)
)
;
}
Ok
(
FontSettings
(
input
.
parse_comma_separated
(
|
i
|
T
:
:
parse
(
context
i
)
)
?
.
into_boxed_slice
(
)
)
)
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
)
]
pub
struct
FontTag
(
pub
u32
)
;
impl
ToCss
for
FontTag
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
use
byteorder
:
:
{
BigEndian
ByteOrder
}
;
use
std
:
:
str
;
let
mut
raw
=
[
0u8
;
4
]
;
BigEndian
:
:
write_u32
(
&
mut
raw
self
.
0
)
;
str
:
:
from_utf8
(
&
raw
)
.
unwrap_or_default
(
)
.
to_css
(
dest
)
}
}
impl
Parse
for
FontTag
{
fn
parse
<
'
i
'
t
>
(
_context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
let
location
=
input
.
current_source_location
(
)
;
let
tag
=
input
.
expect_string
(
)
?
;
if
tag
.
len
(
)
!
=
4
|
|
tag
.
as_bytes
(
)
.
iter
(
)
.
any
(
|
c
|
*
c
<
b
'
'
|
|
*
c
>
b
'
~
'
)
{
return
Err
(
location
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
;
}
let
mut
raw
=
Cursor
:
:
new
(
tag
.
as_bytes
(
)
)
;
Ok
(
FontTag
(
raw
.
read_u32
:
:
<
BigEndian
>
(
)
.
unwrap
(
)
)
)
}
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
ToAnimatedValue
ToAnimatedZero
ToCss
)
]
pub
struct
KeywordInfo
<
Length
>
{
pub
kw
:
KeywordSize
#
[
css
(
skip
)
]
pub
factor
:
f32
#
[
css
(
skip
)
]
pub
offset
:
Length
}
impl
<
L
>
KeywordInfo
<
L
>
where
Au
:
Into
<
L
>
{
pub
fn
medium
(
)
-
>
Self
{
KeywordSize
:
:
Medium
.
into
(
)
}
}
impl
<
L
>
From
<
KeywordSize
>
for
KeywordInfo
<
L
>
where
Au
:
Into
<
L
>
{
fn
from
(
x
:
KeywordSize
)
-
>
Self
{
KeywordInfo
{
kw
:
x
factor
:
1
.
offset
:
Au
(
0
)
.
into
(
)
}
}
}
impl
<
L
>
SpecifiedValueInfo
for
KeywordInfo
<
L
>
{
fn
collect_completion_keywords
(
f
:
KeywordsCollectFn
)
{
<
KeywordSize
as
SpecifiedValueInfo
>
:
:
collect_completion_keywords
(
f
)
;
}
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
Parse
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToCss
)
]
#
[
allow
(
missing_docs
)
]
pub
enum
KeywordSize
{
#
[
css
(
keyword
=
"
xx
-
small
"
)
]
XXSmall
XSmall
Small
Medium
Large
XLarge
#
[
css
(
keyword
=
"
xx
-
large
"
)
]
XXLarge
#
[
css
(
skip
)
]
XXXLarge
}
impl
KeywordSize
{
#
[
inline
]
pub
fn
html_size
(
self
)
-
>
u8
{
self
as
u8
}
}
impl
Default
for
KeywordSize
{
fn
default
(
)
-
>
Self
{
KeywordSize
:
:
Medium
}
}
#
[
allow
(
missing_docs
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
Serialize
)
)
]
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
)
]
pub
enum
FontStyle
<
Angle
>
{
#
[
animation
(
error
)
]
Normal
#
[
animation
(
error
)
]
Italic
#
[
value_info
(
starts_with_keyword
)
]
Oblique
(
Angle
)
}
