use
crate
:
:
values
:
:
generics
:
:
length
:
:
GenericLengthPercentageOrAuto
;
use
crate
:
:
values
:
:
specified
:
:
animation
:
:
{
ScrollAxis
ScrollFunction
TimelineName
}
;
use
crate
:
:
Zero
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericAnimationDuration
<
T
>
{
Auto
Time
(
T
)
}
pub
use
self
:
:
GenericAnimationDuration
as
AnimationDuration
;
impl
<
T
>
AnimationDuration
<
T
>
{
pub
fn
auto
(
)
-
>
Self
{
Self
:
:
Auto
}
pub
fn
is_auto
(
&
self
)
-
>
bool
{
matches
!
(
*
self
Self
:
:
Auto
)
}
}
impl
<
T
:
Zero
>
Zero
for
AnimationDuration
<
T
>
{
fn
zero
(
)
-
>
Self
{
Self
:
:
Time
(
T
:
:
zero
(
)
)
}
fn
is_zero
(
&
self
)
-
>
bool
{
match
*
self
{
Self
:
:
Time
(
ref
t
)
=
>
t
.
is_zero
(
)
_
=
>
false
}
}
}
impl
<
T
:
ToCss
+
Zero
>
ToCss
for
AnimationDuration
<
T
>
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
match
*
self
{
Self
:
:
Auto
=
>
{
if
static_prefs
:
:
pref
!
(
"
layout
.
css
.
scroll
-
driven
-
animations
.
enabled
"
)
{
dest
.
write_str
(
"
auto
"
)
}
else
{
Self
:
:
Time
(
T
:
:
zero
(
)
)
.
to_css
(
dest
)
}
}
Self
:
:
Time
(
ref
t
)
=
>
t
.
to_css
(
dest
)
}
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
css
(
function
=
"
view
"
)
]
#
[
repr
(
C
)
]
pub
struct
GenericViewFunction
<
LengthPercent
>
{
#
[
css
(
skip_if
=
"
ScrollAxis
:
:
is_default
"
)
]
pub
axis
:
ScrollAxis
#
[
css
(
skip_if
=
"
GenericViewTimelineInset
:
:
is_auto
"
)
]
#
[
css
(
field_bound
)
]
pub
inset
:
GenericViewTimelineInset
<
LengthPercent
>
}
pub
use
self
:
:
GenericViewFunction
as
ViewFunction
;
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericAnimationTimeline
<
LengthPercent
>
{
Auto
Timeline
(
TimelineName
)
Scroll
(
ScrollFunction
)
View
(
#
[
css
(
field_bound
)
]
GenericViewFunction
<
LengthPercent
>
)
}
pub
use
self
:
:
GenericAnimationTimeline
as
AnimationTimeline
;
impl
<
LengthPercent
>
AnimationTimeline
<
LengthPercent
>
{
pub
fn
auto
(
)
-
>
Self
{
Self
:
:
Auto
}
pub
fn
is_auto
(
&
self
)
-
>
bool
{
matches
!
(
self
Self
:
:
Auto
)
}
}
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
)
]
pub
struct
GenericViewTimelineInset
<
LengthPercent
>
{
pub
start
:
GenericLengthPercentageOrAuto
<
LengthPercent
>
pub
end
:
GenericLengthPercentageOrAuto
<
LengthPercent
>
}
pub
use
self
:
:
GenericViewTimelineInset
as
ViewTimelineInset
;
impl
<
LengthPercent
>
ViewTimelineInset
<
LengthPercent
>
{
#
[
inline
]
fn
is_auto
(
&
self
)
-
>
bool
{
self
.
start
.
is_auto
(
)
&
&
self
.
end
.
is_auto
(
)
}
}
impl
<
LengthPercent
>
ToCss
for
ViewTimelineInset
<
LengthPercent
>
where
LengthPercent
:
PartialEq
+
ToCss
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
self
.
start
.
to_css
(
dest
)
?
;
if
self
.
end
!
=
self
.
start
{
dest
.
write_char
(
'
'
)
?
;
self
.
end
.
to_css
(
dest
)
?
;
}
Ok
(
(
)
)
}
}
impl
<
LengthPercent
>
Default
for
ViewTimelineInset
<
LengthPercent
>
{
fn
default
(
)
-
>
Self
{
Self
{
start
:
GenericLengthPercentageOrAuto
:
:
auto
(
)
end
:
GenericLengthPercentageOrAuto
:
:
auto
(
)
}
}
}
