use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
cursor
:
:
CursorKind
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
)
]
pub
struct
Cursor
<
Image
>
{
pub
images
:
Box
<
[
Image
]
>
pub
keyword
:
CursorKind
}
impl
<
Image
>
Cursor
<
Image
>
{
#
[
inline
]
pub
fn
auto
(
)
-
>
Self
{
Self
{
images
:
vec
!
[
]
.
into_boxed_slice
(
)
keyword
:
CursorKind
:
:
Auto
}
}
}
impl
<
Image
:
ToCss
>
ToCss
for
Cursor
<
Image
>
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
for
image
in
&
*
self
.
images
{
image
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
"
)
?
;
}
self
.
keyword
.
to_css
(
dest
)
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
)
]
pub
struct
CursorImage
<
ImageUrl
Number
>
{
pub
url
:
ImageUrl
pub
hotspot
:
Option
<
(
Number
Number
)
>
}
impl
<
ImageUrl
:
ToCss
Number
:
ToCss
>
ToCss
for
CursorImage
<
ImageUrl
Number
>
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
self
.
url
.
to_css
(
dest
)
?
;
if
let
Some
(
(
ref
x
ref
y
)
)
=
self
.
hotspot
{
dest
.
write_str
(
"
"
)
?
;
x
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
"
)
?
;
y
.
to_css
(
dest
)
?
;
}
Ok
(
(
)
)
}
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToComputedValue
ToCss
)
]
pub
enum
ScrollbarColor
<
Color
>
{
Auto
Colors
{
thumb
:
Color
track
:
Color
}
}
impl
<
Color
>
Default
for
ScrollbarColor
<
Color
>
{
#
[
inline
]
fn
default
(
)
-
>
Self
{
ScrollbarColor
:
:
Auto
}
}
