use
cssparser
:
:
Parser
;
use
parser
:
:
{
Parse
ParserContext
}
;
use
std
:
:
{
fmt
mem
usize
}
;
use
style_traits
:
:
{
ToCss
ParseError
StyleParseError
}
;
use
values
:
:
{
CSSFloat
CustomIdent
}
;
use
values
:
:
computed
:
:
{
self
ComputedValueAsSpecified
Context
ToComputedValue
}
;
use
values
:
:
specified
:
:
Integer
;
use
values
:
:
specified
:
:
grid
:
:
parse_line_names
;
#
[
derive
(
PartialEq
Clone
Debug
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
struct
GridLine
{
pub
is_span
:
bool
pub
ident
:
Option
<
CustomIdent
>
pub
line_num
:
Option
<
Integer
>
}
impl
GridLine
{
pub
fn
is_auto
(
&
self
)
-
>
bool
{
self
.
ident
.
is_none
(
)
&
&
self
.
line_num
.
is_none
(
)
&
&
!
self
.
is_span
}
}
impl
Default
for
GridLine
{
fn
default
(
)
-
>
Self
{
GridLine
{
is_span
:
false
ident
:
None
line_num
:
None
}
}
}
impl
ToCss
for
GridLine
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
if
self
.
is_auto
(
)
{
return
dest
.
write_str
(
"
auto
"
)
}
if
self
.
is_span
{
dest
.
write_str
(
"
span
"
)
?
;
}
if
let
Some
(
i
)
=
self
.
line_num
{
write
!
(
dest
"
{
}
"
i
.
value
(
)
)
?
;
}
if
let
Some
(
ref
s
)
=
self
.
ident
{
dest
.
write_str
(
"
"
)
?
;
s
.
to_css
(
dest
)
?
;
}
Ok
(
(
)
)
}
}
impl
Parse
for
GridLine
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
let
mut
grid_line
=
Default
:
:
default
(
)
;
if
input
.
try
(
|
i
|
i
.
expect_ident_matching
(
"
auto
"
)
)
.
is_ok
(
)
{
return
Ok
(
grid_line
)
}
let
mut
val_before_span
=
false
;
for
_
in
0
.
.
3
{
if
input
.
try
(
|
i
|
i
.
expect_ident_matching
(
"
span
"
)
)
.
is_ok
(
)
{
if
grid_line
.
is_span
{
return
Err
(
StyleParseError
:
:
UnspecifiedError
.
into
(
)
)
}
if
grid_line
.
line_num
.
is_some
(
)
|
|
grid_line
.
ident
.
is_some
(
)
{
val_before_span
=
true
;
}
grid_line
.
is_span
=
true
;
}
else
if
let
Ok
(
i
)
=
input
.
try
(
|
i
|
Integer
:
:
parse
(
context
i
)
)
{
if
i
.
value
(
)
=
=
0
|
|
val_before_span
|
|
grid_line
.
line_num
.
is_some
(
)
{
return
Err
(
StyleParseError
:
:
UnspecifiedError
.
into
(
)
)
}
grid_line
.
line_num
=
Some
(
i
)
;
}
else
if
let
Ok
(
name
)
=
input
.
try
(
|
i
|
i
.
expect_ident
(
)
)
{
if
val_before_span
|
|
grid_line
.
ident
.
is_some
(
)
{
return
Err
(
StyleParseError
:
:
UnspecifiedError
.
into
(
)
)
;
}
grid_line
.
ident
=
Some
(
CustomIdent
:
:
from_ident
(
name
&
[
]
)
?
)
;
}
else
{
break
}
}
if
grid_line
.
is_auto
(
)
{
return
Err
(
StyleParseError
:
:
UnspecifiedError
.
into
(
)
)
}
if
grid_line
.
is_span
{
if
let
Some
(
i
)
=
grid_line
.
line_num
{
if
i
.
value
(
)
<
=
0
{
return
Err
(
StyleParseError
:
:
UnspecifiedError
.
into
(
)
)
}
}
else
if
grid_line
.
ident
.
is_some
(
)
{
grid_line
.
line_num
=
Some
(
Integer
:
:
new
(
1
)
)
;
}
else
{
return
Err
(
StyleParseError
:
:
UnspecifiedError
.
into
(
)
)
}
}
Ok
(
grid_line
)
}
}
impl
ComputedValueAsSpecified
for
GridLine
{
}
no_viewport_percentage
!
(
GridLine
)
;
define_css_keyword_enum
!
{
TrackKeyword
:
"
auto
"
=
>
Auto
"
max
-
content
"
=
>
MaxContent
"
min
-
content
"
=
>
MinContent
}
#
[
derive
(
Clone
PartialEq
Debug
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
enum
TrackBreadth
<
L
>
{
Breadth
(
L
)
Flex
(
CSSFloat
)
Keyword
(
TrackKeyword
)
}
impl
<
L
>
TrackBreadth
<
L
>
{
#
[
inline
]
pub
fn
is_fixed
(
&
self
)
-
>
bool
{
match
*
self
{
TrackBreadth
:
:
Breadth
(
ref
_lop
)
=
>
true
_
=
>
false
}
}
}
impl
<
L
:
ToCss
>
ToCss
for
TrackBreadth
<
L
>
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
match
*
self
{
TrackBreadth
:
:
Breadth
(
ref
lop
)
=
>
lop
.
to_css
(
dest
)
TrackBreadth
:
:
Flex
(
ref
value
)
=
>
write
!
(
dest
"
{
}
fr
"
value
)
TrackBreadth
:
:
Keyword
(
ref
k
)
=
>
k
.
to_css
(
dest
)
}
}
}
impl
<
L
:
ToComputedValue
>
ToComputedValue
for
TrackBreadth
<
L
>
{
type
ComputedValue
=
TrackBreadth
<
L
:
:
ComputedValue
>
;
#
[
inline
]
fn
to_computed_value
(
&
self
context
:
&
Context
)
-
>
Self
:
:
ComputedValue
{
match
*
self
{
TrackBreadth
:
:
Breadth
(
ref
lop
)
=
>
TrackBreadth
:
:
Breadth
(
lop
.
to_computed_value
(
context
)
)
TrackBreadth
:
:
Flex
(
fr
)
=
>
TrackBreadth
:
:
Flex
(
fr
)
TrackBreadth
:
:
Keyword
(
k
)
=
>
TrackBreadth
:
:
Keyword
(
k
)
}
}
#
[
inline
]
fn
from_computed_value
(
computed
:
&
Self
:
:
ComputedValue
)
-
>
Self
{
match
*
computed
{
TrackBreadth
:
:
Breadth
(
ref
lop
)
=
>
TrackBreadth
:
:
Breadth
(
ToComputedValue
:
:
from_computed_value
(
lop
)
)
TrackBreadth
:
:
Flex
(
fr
)
=
>
TrackBreadth
:
:
Flex
(
fr
)
TrackBreadth
:
:
Keyword
(
k
)
=
>
TrackBreadth
:
:
Keyword
(
k
)
}
}
}
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
derive
(
Clone
Debug
HasViewportPercentage
PartialEq
ToCss
)
]
pub
enum
TrackSize
<
L
>
{
Breadth
(
TrackBreadth
<
L
>
)
#
[
css
(
comma
function
)
]
Minmax
(
TrackBreadth
<
L
>
TrackBreadth
<
L
>
)
#
[
css
(
function
)
]
FitContent
(
L
)
}
impl
<
L
>
TrackSize
<
L
>
{
pub
fn
is_fixed
(
&
self
)
-
>
bool
{
match
*
self
{
TrackSize
:
:
Breadth
(
ref
breadth
)
=
>
breadth
.
is_fixed
(
)
TrackSize
:
:
Minmax
(
ref
breadth_1
ref
breadth_2
)
=
>
{
if
breadth_1
.
is_fixed
(
)
{
return
true
}
match
*
breadth_1
{
TrackBreadth
:
:
Flex
(
_
)
=
>
false
_
=
>
breadth_2
.
is_fixed
(
)
}
}
TrackSize
:
:
FitContent
(
_
)
=
>
false
}
}
}
impl
<
L
>
Default
for
TrackSize
<
L
>
{
fn
default
(
)
-
>
Self
{
TrackSize
:
:
Breadth
(
TrackBreadth
:
:
Keyword
(
TrackKeyword
:
:
Auto
)
)
}
}
impl
<
L
:
PartialEq
>
TrackSize
<
L
>
{
pub
fn
is_default
(
&
self
)
-
>
bool
{
*
self
=
=
TrackSize
:
:
default
(
)
}
}
impl
<
L
:
ToComputedValue
>
ToComputedValue
for
TrackSize
<
L
>
{
type
ComputedValue
=
TrackSize
<
L
:
:
ComputedValue
>
;
#
[
inline
]
fn
to_computed_value
(
&
self
context
:
&
Context
)
-
>
Self
:
:
ComputedValue
{
match
*
self
{
TrackSize
:
:
Breadth
(
ref
b
)
=
>
match
*
b
{
TrackBreadth
:
:
Flex
(
f
)
=
>
TrackSize
:
:
Minmax
(
TrackBreadth
:
:
Keyword
(
TrackKeyword
:
:
Auto
)
TrackBreadth
:
:
Flex
(
f
)
)
_
=
>
TrackSize
:
:
Breadth
(
b
.
to_computed_value
(
context
)
)
}
TrackSize
:
:
Minmax
(
ref
b_1
ref
b_2
)
=
>
TrackSize
:
:
Minmax
(
b_1
.
to_computed_value
(
context
)
b_2
.
to_computed_value
(
context
)
)
TrackSize
:
:
FitContent
(
ref
lop
)
=
>
TrackSize
:
:
FitContent
(
lop
.
to_computed_value
(
context
)
)
}
}
#
[
inline
]
fn
from_computed_value
(
computed
:
&
Self
:
:
ComputedValue
)
-
>
Self
{
match
*
computed
{
TrackSize
:
:
Breadth
(
ref
b
)
=
>
TrackSize
:
:
Breadth
(
ToComputedValue
:
:
from_computed_value
(
b
)
)
TrackSize
:
:
Minmax
(
ref
b_1
ref
b_2
)
=
>
TrackSize
:
:
Minmax
(
ToComputedValue
:
:
from_computed_value
(
b_1
)
ToComputedValue
:
:
from_computed_value
(
b_2
)
)
TrackSize
:
:
FitContent
(
ref
lop
)
=
>
TrackSize
:
:
FitContent
(
ToComputedValue
:
:
from_computed_value
(
lop
)
)
}
}
}
pub
fn
concat_serialize_idents
<
W
>
(
prefix
:
&
str
suffix
:
&
str
slice
:
&
[
CustomIdent
]
sep
:
&
str
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
if
let
Some
(
(
ref
first
rest
)
)
=
slice
.
split_first
(
)
{
dest
.
write_str
(
prefix
)
?
;
first
.
to_css
(
dest
)
?
;
for
thing
in
rest
{
dest
.
write_str
(
sep
)
?
;
thing
.
to_css
(
dest
)
?
;
}
dest
.
write_str
(
suffix
)
?
;
}
Ok
(
(
)
)
}
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
derive
(
Clone
Copy
Debug
PartialEq
ToCss
)
]
pub
enum
RepeatCount
{
Number
(
Integer
)
AutoFill
AutoFit
}
impl
Parse
for
RepeatCount
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
if
let
Ok
(
i
)
=
input
.
try
(
|
i
|
Integer
:
:
parse
(
context
i
)
)
{
if
i
.
value
(
)
>
0
{
Ok
(
RepeatCount
:
:
Number
(
i
)
)
}
else
{
Err
(
StyleParseError
:
:
UnspecifiedError
.
into
(
)
)
}
}
else
{
try_match_ident_ignore_ascii_case
!
{
input
.
expect_ident
(
)
?
"
auto
-
fill
"
=
>
Ok
(
RepeatCount
:
:
AutoFill
)
"
auto
-
fit
"
=
>
Ok
(
RepeatCount
:
:
AutoFit
)
}
}
}
}
impl
ComputedValueAsSpecified
for
RepeatCount
{
}
no_viewport_percentage
!
(
RepeatCount
)
;
#
[
derive
(
Clone
PartialEq
Debug
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
struct
TrackRepeat
<
L
>
{
pub
count
:
RepeatCount
pub
line_names
:
Vec
<
Vec
<
CustomIdent
>
>
pub
track_sizes
:
Vec
<
TrackSize
<
L
>
>
}
impl
<
L
:
ToCss
>
ToCss
for
TrackRepeat
<
L
>
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
let
repeat_count
=
match
self
.
count
{
RepeatCount
:
:
Number
(
integer
)
=
>
integer
.
value
(
)
_
=
>
{
dest
.
write_str
(
"
repeat
(
"
)
?
;
self
.
count
.
to_css
(
dest
)
?
;
dest
.
write_str
(
"
"
)
?
;
1
}
}
;
for
i
in
0
.
.
repeat_count
{
if
i
!
=
0
{
dest
.
write_str
(
"
"
)
?
;
}
let
mut
line_names_iter
=
self
.
line_names
.
iter
(
)
;
for
(
i
(
ref
size
ref
names
)
)
in
self
.
track_sizes
.
iter
(
)
.
zip
(
&
mut
line_names_iter
)
.
enumerate
(
)
{
if
i
>
0
{
dest
.
write_str
(
"
"
)
?
;
}
concat_serialize_idents
(
"
[
"
"
]
"
names
"
"
dest
)
?
;
size
.
to_css
(
dest
)
?
;
}
if
let
Some
(
line_names_last
)
=
line_names_iter
.
next
(
)
{
concat_serialize_idents
(
"
[
"
"
]
"
line_names_last
"
"
dest
)
?
;
}
}
match
self
.
count
{
RepeatCount
:
:
AutoFill
|
RepeatCount
:
:
AutoFit
=
>
{
dest
.
write_str
(
"
)
"
)
?
;
}
_
=
>
{
}
}
Ok
(
(
)
)
}
}
impl
<
L
:
ToComputedValue
>
ToComputedValue
for
TrackRepeat
<
L
>
{
type
ComputedValue
=
TrackRepeat
<
L
:
:
ComputedValue
>
;
#
[
inline
]
fn
to_computed_value
(
&
self
context
:
&
Context
)
-
>
Self
:
:
ComputedValue
{
if
let
RepeatCount
:
:
Number
(
num
)
=
self
.
count
{
let
mut
line_names
=
vec
!
[
]
;
let
mut
track_sizes
=
vec
!
[
]
;
let
mut
prev_names
=
vec
!
[
]
;
for
_
in
0
.
.
num
.
value
(
)
{
let
mut
names_iter
=
self
.
line_names
.
iter
(
)
;
for
(
size
names
)
in
self
.
track_sizes
.
iter
(
)
.
zip
(
&
mut
names_iter
)
{
prev_names
.
extend_from_slice
(
&
names
)
;
line_names
.
push
(
mem
:
:
replace
(
&
mut
prev_names
vec
!
[
]
)
)
;
track_sizes
.
push
(
size
.
to_computed_value
(
context
)
)
;
}
if
let
Some
(
names
)
=
names_iter
.
next
(
)
{
prev_names
.
extend_from_slice
(
&
names
)
;
}
}
line_names
.
push
(
prev_names
)
;
TrackRepeat
{
count
:
self
.
count
track_sizes
:
track_sizes
line_names
:
line_names
}
}
else
{
TrackRepeat
{
count
:
self
.
count
track_sizes
:
self
.
track_sizes
.
iter
(
)
.
map
(
|
l
|
l
.
to_computed_value
(
context
)
)
.
collect
(
)
line_names
:
self
.
line_names
.
clone
(
)
}
}
}
#
[
inline
]
fn
from_computed_value
(
computed
:
&
Self
:
:
ComputedValue
)
-
>
Self
{
TrackRepeat
{
count
:
computed
.
count
track_sizes
:
computed
.
track_sizes
.
iter
(
)
.
map
(
ToComputedValue
:
:
from_computed_value
)
.
collect
(
)
line_names
:
computed
.
line_names
.
clone
(
)
}
}
}
#
[
derive
(
Clone
Copy
PartialEq
Debug
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
enum
TrackListType
{
Auto
(
u16
)
Normal
Explicit
}
#
[
derive
(
Clone
PartialEq
Debug
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
struct
TrackList
<
T
>
{
pub
list_type
:
TrackListType
pub
values
:
Vec
<
T
>
pub
line_names
:
Vec
<
Vec
<
CustomIdent
>
>
pub
auto_repeat
:
Option
<
TrackRepeat
<
computed
:
:
LengthOrPercentage
>
>
}
impl
<
T
:
ToCss
>
ToCss
for
TrackList
<
T
>
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
let
auto_idx
=
match
self
.
list_type
{
TrackListType
:
:
Auto
(
i
)
=
>
i
as
usize
_
=
>
usize
:
:
MAX
}
;
let
mut
values_iter
=
self
.
values
.
iter
(
)
.
peekable
(
)
;
let
mut
line_names_iter
=
self
.
line_names
.
iter
(
)
.
peekable
(
)
;
for
idx
in
0
.
.
{
let
names
=
line_names_iter
.
next
(
)
.
unwrap
(
)
;
concat_serialize_idents
(
"
[
"
"
]
"
names
"
"
dest
)
?
;
match
self
.
auto_repeat
{
Some
(
ref
repeat
)
if
idx
=
=
auto_idx
=
>
{
if
!
names
.
is_empty
(
)
{
dest
.
write_str
(
"
"
)
?
;
}
repeat
.
to_css
(
dest
)
?
;
}
_
=
>
match
values_iter
.
next
(
)
{
Some
(
value
)
=
>
{
if
!
names
.
is_empty
(
)
{
dest
.
write_str
(
"
"
)
?
;
}
value
.
to_css
(
dest
)
?
;
}
None
=
>
break
}
}
if
values_iter
.
peek
(
)
.
is_some
(
)
|
|
line_names_iter
.
peek
(
)
.
map_or
(
false
|
v
|
!
v
.
is_empty
(
)
)
{
dest
.
write_str
(
"
"
)
?
;
}
}
Ok
(
(
)
)
}
}
#
[
derive
(
Clone
PartialEq
Debug
Default
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
struct
LineNameList
{
pub
names
:
Vec
<
Vec
<
CustomIdent
>
>
pub
fill_idx
:
Option
<
u32
>
}
impl
Parse
for
LineNameList
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
input
.
expect_ident_matching
(
"
subgrid
"
)
?
;
let
mut
line_names
=
vec
!
[
]
;
let
mut
fill_idx
=
None
;
loop
{
let
repeat_parse_result
=
input
.
try
(
|
input
|
{
input
.
expect_function_matching
(
"
repeat
"
)
?
;
input
.
parse_nested_block
(
|
input
|
{
let
count
=
RepeatCount
:
:
parse
(
context
input
)
?
;
input
.
expect_comma
(
)
?
;
let
mut
names_list
=
vec
!
[
]
;
names_list
.
push
(
parse_line_names
(
input
)
?
)
;
while
let
Ok
(
names
)
=
input
.
try
(
parse_line_names
)
{
names_list
.
push
(
names
)
;
}
Ok
(
(
names_list
count
)
)
}
)
}
)
;
if
let
Ok
(
(
mut
names_list
count
)
)
=
repeat_parse_result
{
match
count
{
RepeatCount
:
:
Number
(
num
)
=
>
line_names
.
extend
(
names_list
.
iter
(
)
.
cloned
(
)
.
cycle
(
)
.
take
(
num
.
value
(
)
as
usize
*
names_list
.
len
(
)
)
)
RepeatCount
:
:
AutoFill
if
fill_idx
.
is_none
(
)
=
>
{
if
names_list
.
len
(
)
!
=
1
{
return
Err
(
StyleParseError
:
:
UnspecifiedError
.
into
(
)
)
;
}
let
names
=
names_list
.
pop
(
)
.
unwrap
(
)
;
line_names
.
push
(
names
)
;
fill_idx
=
Some
(
line_names
.
len
(
)
as
u32
-
1
)
;
}
_
=
>
return
Err
(
StyleParseError
:
:
UnspecifiedError
.
into
(
)
)
}
}
else
if
let
Ok
(
names
)
=
input
.
try
(
parse_line_names
)
{
line_names
.
push
(
names
)
;
}
else
{
break
}
}
Ok
(
LineNameList
{
names
:
line_names
fill_idx
:
fill_idx
}
)
}
}
impl
ToCss
for
LineNameList
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
dest
.
write_str
(
"
subgrid
"
)
?
;
let
fill_idx
=
self
.
fill_idx
.
map
(
|
v
|
v
as
usize
)
.
unwrap_or
(
usize
:
:
MAX
)
;
for
(
i
names
)
in
self
.
names
.
iter
(
)
.
enumerate
(
)
{
if
i
=
=
fill_idx
{
dest
.
write_str
(
"
repeat
(
auto
-
fill
"
)
?
;
}
dest
.
write_str
(
"
[
"
)
?
;
if
let
Some
(
(
ref
first
rest
)
)
=
names
.
split_first
(
)
{
first
.
to_css
(
dest
)
?
;
for
name
in
rest
{
dest
.
write_str
(
"
"
)
?
;
name
.
to_css
(
dest
)
?
;
}
}
dest
.
write_str
(
"
]
"
)
?
;
if
i
=
=
fill_idx
{
dest
.
write_str
(
"
)
"
)
?
;
}
}
Ok
(
(
)
)
}
}
impl
ComputedValueAsSpecified
for
LineNameList
{
}
no_viewport_percentage
!
(
LineNameList
)
;
#
[
derive
(
Clone
PartialEq
Debug
ToCss
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
enum
GridTemplateComponent
<
L
>
{
None
TrackList
(
TrackList
<
L
>
)
Subgrid
(
LineNameList
)
}
