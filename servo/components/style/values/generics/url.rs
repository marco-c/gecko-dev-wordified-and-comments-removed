use
cssparser
:
:
Parser
;
use
parser
:
:
{
Parse
ParserContext
}
;
use
style_traits
:
:
ParseError
;
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToComputedValue
ToCss
)
]
pub
enum
UrlOrNone
<
Url
>
{
None
Url
(
Url
)
}
impl
<
Url
>
UrlOrNone
<
Url
>
{
pub
fn
none
(
)
-
>
Self
{
UrlOrNone
:
:
None
}
}
impl
<
Url
>
Parse
for
UrlOrNone
<
Url
>
where
Url
:
Parse
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
UrlOrNone
<
Url
>
ParseError
<
'
i
>
>
{
if
let
Ok
(
url
)
=
input
.
try
(
|
input
|
Url
:
:
parse
(
context
input
)
)
{
return
Ok
(
UrlOrNone
:
:
Url
(
url
)
)
;
}
input
.
expect_ident_matching
(
"
none
"
)
?
;
Ok
(
UrlOrNone
:
:
None
)
}
}
