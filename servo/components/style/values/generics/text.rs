use
crate
:
:
parser
:
:
ParserContext
;
use
crate
:
:
values
:
:
animated
:
:
ToAnimatedZero
;
use
cssparser
:
:
Parser
;
use
style_traits
:
:
ParseError
;
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
)
]
pub
enum
InitialLetter
<
Number
Integer
>
{
Normal
Specified
(
Number
Option
<
Integer
>
)
}
impl
<
N
I
>
InitialLetter
<
N
I
>
{
#
[
inline
]
pub
fn
normal
(
)
-
>
Self
{
InitialLetter
:
:
Normal
}
}
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToCss
)
]
pub
enum
Spacing
<
Value
>
{
Normal
Value
(
Value
)
}
impl
<
Value
>
Spacing
<
Value
>
{
#
[
inline
]
pub
fn
normal
(
)
-
>
Self
{
Spacing
:
:
Normal
}
#
[
inline
]
pub
fn
parse_with
<
'
i
'
t
F
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
parse
:
F
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
where
F
:
FnOnce
(
&
ParserContext
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Value
ParseError
<
'
i
>
>
{
if
input
.
try
(
|
i
|
i
.
expect_ident_matching
(
"
normal
"
)
)
.
is_ok
(
)
{
return
Ok
(
Spacing
:
:
Normal
)
;
}
parse
(
context
input
)
.
map
(
Spacing
:
:
Value
)
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
fn
line_height_moz_block_height_enabled
(
context
:
&
ParserContext
)
-
>
bool
{
use
crate
:
:
gecko_bindings
:
:
structs
;
context
.
in_ua_sheet
(
)
|
|
unsafe
{
structs
:
:
StaticPrefs_sVarCache_layout_css_line_height_moz_block_height_content_enabled
}
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToCss
Parse
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericLineHeight
<
N
L
>
{
Normal
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
parse
(
condition
=
"
line_height_moz_block_height_enabled
"
)
]
MozBlockHeight
Number
(
N
)
Length
(
L
)
}
pub
use
self
:
:
GenericLineHeight
as
LineHeight
;
impl
<
N
L
>
ToAnimatedZero
for
LineHeight
<
N
L
>
{
#
[
inline
]
fn
to_animated_zero
(
&
self
)
-
>
Result
<
Self
(
)
>
{
Err
(
(
)
)
}
}
impl
<
N
L
>
LineHeight
<
N
L
>
{
#
[
inline
]
pub
fn
normal
(
)
-
>
Self
{
LineHeight
:
:
Normal
}
}
