use
crate
:
:
parser
:
:
ParserContext
;
use
cssparser
:
:
Parser
;
use
style_traits
:
:
ParseError
;
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
pub
enum
InitialLetter
<
Number
Integer
>
{
Normal
Specified
(
Number
Option
<
Integer
>
)
}
impl
<
N
I
>
InitialLetter
<
N
I
>
{
#
[
inline
]
pub
fn
normal
(
)
-
>
Self
{
InitialLetter
:
:
Normal
}
}
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToCss
ToShmem
)
]
pub
enum
Spacing
<
Value
>
{
Normal
Value
(
Value
)
}
impl
<
Value
>
Spacing
<
Value
>
{
#
[
inline
]
pub
fn
normal
(
)
-
>
Self
{
Spacing
:
:
Normal
}
#
[
inline
]
pub
fn
parse_with
<
'
i
'
t
F
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
parse
:
F
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
where
F
:
FnOnce
(
&
ParserContext
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Value
ParseError
<
'
i
>
>
{
if
input
.
try_parse
(
|
i
|
i
.
expect_ident_matching
(
"
normal
"
)
)
.
is_ok
(
)
{
return
Ok
(
Spacing
:
:
Normal
)
;
}
parse
(
context
input
)
.
map
(
Spacing
:
:
Value
)
}
}
#
[
repr
(
C
u8
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
Serialize
)
)
]
#
[
derive
(
Animate
Clone
Copy
ComputeSquaredDistance
ToAnimatedZero
Debug
Eq
MallocSizeOf
Parse
PartialEq
SpecifiedValueInfo
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
allow
(
missing_docs
)
]
pub
enum
GenericTextDecorationLength
<
L
>
{
LengthPercentage
(
L
)
Auto
FromFont
}
