use
crate
:
:
values
:
:
generics
:
:
length
:
:
LengthPercentageOrAuto
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToComputedValue
)
]
pub
enum
BackgroundSize
<
LengthPercentage
>
{
Explicit
{
width
:
LengthPercentageOrAuto
<
LengthPercentage
>
height
:
LengthPercentageOrAuto
<
LengthPercentage
>
}
#
[
animation
(
error
)
]
Cover
#
[
animation
(
error
)
]
Contain
}
impl
<
LengthPercentage
>
ToCss
for
BackgroundSize
<
LengthPercentage
>
where
LengthPercentage
:
ToCss
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
match
self
{
BackgroundSize
:
:
Explicit
{
width
height
}
=
>
{
width
.
to_css
(
dest
)
?
;
if
!
width
.
is_auto
(
)
|
|
!
height
.
is_auto
(
)
{
dest
.
write_str
(
"
"
)
?
;
height
.
to_css
(
dest
)
?
;
}
Ok
(
(
)
)
}
BackgroundSize
:
:
Cover
=
>
dest
.
write_str
(
"
cover
"
)
BackgroundSize
:
:
Contain
=
>
dest
.
write_str
(
"
contain
"
)
}
}
}
