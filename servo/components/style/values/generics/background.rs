use
crate
:
:
values
:
:
generics
:
:
length
:
:
{
GenericLengthPercentageOrAuto
LengthPercentageOrAuto
}
;
fn
width_and_height_are_auto
<
L
>
(
width
:
&
LengthPercentageOrAuto
<
L
>
height
:
&
LengthPercentageOrAuto
<
L
>
)
-
>
bool
{
width
.
is_auto
(
)
&
&
height
.
is_auto
(
)
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericBackgroundSize
<
LengthPercent
>
{
ExplicitSize
{
width
:
GenericLengthPercentageOrAuto
<
LengthPercent
>
#
[
css
(
contextual_skip_if
=
"
width_and_height_are_auto
"
)
]
height
:
GenericLengthPercentageOrAuto
<
LengthPercent
>
}
#
[
animation
(
error
)
]
Cover
#
[
animation
(
error
)
]
Contain
}
pub
use
self
:
:
GenericBackgroundSize
as
BackgroundSize
;
impl
<
LengthPercentage
>
BackgroundSize
<
LengthPercentage
>
{
pub
fn
auto
(
)
-
>
Self
{
GenericBackgroundSize
:
:
ExplicitSize
{
width
:
LengthPercentageOrAuto
:
:
Auto
height
:
LengthPercentageOrAuto
:
:
Auto
}
}
}
