use
std
:
:
fmt
;
use
style_traits
:
:
ToCss
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
values
:
:
specified
:
:
url
:
:
SpecifiedUrl
;
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
HeapSizeOf
Serialize
)
)
]
#
[
derive
(
Clone
Debug
HasViewportPercentage
PartialEq
ToComputedValue
)
]
pub
struct
FilterList
<
Filter
>
(
pub
Box
<
[
Filter
]
>
)
;
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
HeapSizeOf
Serialize
)
)
]
#
[
derive
(
Clone
Debug
HasViewportPercentage
PartialEq
ToComputedValue
ToCss
)
]
pub
enum
Filter
<
Angle
Factor
Length
DropShadow
>
{
#
[
css
(
function
)
]
Blur
(
Length
)
#
[
css
(
function
)
]
Brightness
(
Factor
)
#
[
css
(
function
)
]
Contrast
(
Factor
)
#
[
css
(
function
)
]
Grayscale
(
Factor
)
#
[
css
(
function
)
]
HueRotate
(
Angle
)
#
[
css
(
function
)
]
Invert
(
Factor
)
#
[
css
(
function
)
]
Opacity
(
Factor
)
#
[
css
(
function
)
]
Saturate
(
Factor
)
#
[
css
(
function
)
]
Sepia
(
Factor
)
#
[
css
(
function
)
]
DropShadow
(
DropShadow
)
#
[
cfg
(
feature
=
"
gecko
"
)
]
Url
(
SpecifiedUrl
)
}
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
derive
(
Clone
Debug
HasViewportPercentage
PartialEq
ToCss
)
]
pub
struct
SimpleShadow
<
Color
SizeLength
ShapeLength
>
{
pub
color
:
Color
pub
horizontal
:
SizeLength
pub
vertical
:
SizeLength
pub
blur
:
ShapeLength
}
impl
<
F
>
FilterList
<
F
>
{
#
[
inline
]
pub
fn
none
(
)
-
>
Self
{
FilterList
(
vec
!
[
]
.
into_boxed_slice
(
)
)
}
}
impl
<
F
>
From
<
Vec
<
F
>
>
for
FilterList
<
F
>
{
#
[
inline
]
fn
from
(
vec
:
Vec
<
F
>
)
-
>
Self
{
FilterList
(
vec
.
into_boxed_slice
(
)
)
}
}
impl
<
F
>
ToCss
for
FilterList
<
F
>
where
F
:
ToCss
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
if
let
Some
(
(
first
rest
)
)
=
self
.
0
.
split_first
(
)
{
first
.
to_css
(
dest
)
?
;
for
filter
in
rest
{
dest
.
write_str
(
"
"
)
?
;
filter
.
to_css
(
dest
)
?
;
}
Ok
(
(
)
)
}
else
{
dest
.
write_str
(
"
none
"
)
}
}
}
