use
crate
:
:
parser
:
:
{
Parse
ParserContext
}
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
crate
:
:
Zero
;
use
cssparser
:
:
Parser
;
use
style_traits
:
:
ParseError
;
use
style_traits
:
:
ToCss
;
use
crate
:
:
values
:
:
generics
:
:
position
:
:
GenericAnchorFunction
;
#
[
allow
(
missing_docs
)
]
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
Serialize
)
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericLengthPercentageOrAuto
<
LengthPercent
>
{
LengthPercentage
(
LengthPercent
)
Auto
}
pub
use
self
:
:
GenericLengthPercentageOrAuto
as
LengthPercentageOrAuto
;
impl
<
LengthPercentage
>
LengthPercentageOrAuto
<
LengthPercentage
>
{
#
[
inline
]
pub
fn
auto
(
)
-
>
Self
{
LengthPercentageOrAuto
:
:
Auto
}
#
[
inline
]
pub
fn
is_auto
(
&
self
)
-
>
bool
{
matches
!
(
*
self
LengthPercentageOrAuto
:
:
Auto
)
}
pub
fn
parse_with
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
parser
:
impl
FnOnce
(
&
ParserContext
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
LengthPercentage
ParseError
<
'
i
>
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
if
input
.
try_parse
(
|
i
|
i
.
expect_ident_matching
(
"
auto
"
)
)
.
is_ok
(
)
{
return
Ok
(
LengthPercentageOrAuto
:
:
Auto
)
;
}
Ok
(
LengthPercentageOrAuto
:
:
LengthPercentage
(
parser
(
context
input
)
?
)
)
}
}
impl
<
LengthPercentage
>
LengthPercentageOrAuto
<
LengthPercentage
>
where
LengthPercentage
:
Clone
{
#
[
inline
]
pub
fn
auto_is
(
&
self
f
:
impl
FnOnce
(
)
-
>
LengthPercentage
)
-
>
LengthPercentage
{
match
self
{
LengthPercentageOrAuto
:
:
LengthPercentage
(
length
)
=
>
length
.
clone
(
)
LengthPercentageOrAuto
:
:
Auto
=
>
f
(
)
}
}
#
[
inline
]
pub
fn
non_auto
(
&
self
)
-
>
Option
<
LengthPercentage
>
{
match
self
{
LengthPercentageOrAuto
:
:
LengthPercentage
(
length
)
=
>
Some
(
length
.
clone
(
)
)
LengthPercentageOrAuto
:
:
Auto
=
>
None
}
}
pub
fn
map
<
T
>
(
&
self
f
:
impl
FnOnce
(
LengthPercentage
)
-
>
T
)
-
>
LengthPercentageOrAuto
<
T
>
{
match
self
{
LengthPercentageOrAuto
:
:
LengthPercentage
(
l
)
=
>
{
LengthPercentageOrAuto
:
:
LengthPercentage
(
f
(
l
.
clone
(
)
)
)
}
LengthPercentageOrAuto
:
:
Auto
=
>
LengthPercentageOrAuto
:
:
Auto
}
}
}
impl
<
LengthPercentage
:
Zero
>
Zero
for
LengthPercentageOrAuto
<
LengthPercentage
>
{
fn
zero
(
)
-
>
Self
{
LengthPercentageOrAuto
:
:
LengthPercentage
(
Zero
:
:
zero
(
)
)
}
fn
is_zero
(
&
self
)
-
>
bool
{
match
*
self
{
LengthPercentageOrAuto
:
:
LengthPercentage
(
ref
l
)
=
>
l
.
is_zero
(
)
LengthPercentageOrAuto
:
:
Auto
=
>
false
}
}
}
impl
<
LengthPercentage
:
Parse
>
Parse
for
LengthPercentageOrAuto
<
LengthPercentage
>
{
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
Self
:
:
parse_with
(
context
input
LengthPercentage
:
:
parse
)
}
}
#
[
allow
(
missing_docs
)
]
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericSize
<
LengthPercent
>
{
LengthPercentage
(
LengthPercent
)
Auto
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
animation
(
error
)
]
MaxContent
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
animation
(
error
)
]
MinContent
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
animation
(
error
)
]
FitContent
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
animation
(
error
)
]
MozAvailable
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
animation
(
error
)
]
WebkitFillAvailable
#
[
animation
(
error
)
]
Stretch
#
[
animation
(
error
)
]
#
[
css
(
function
=
"
fit
-
content
"
)
]
FitContentFunction
(
LengthPercent
)
}
pub
use
self
:
:
GenericSize
as
Size
;
impl
<
LengthPercentage
>
Size
<
LengthPercentage
>
{
#
[
inline
]
pub
fn
auto
(
)
-
>
Self
{
Size
:
:
Auto
}
#
[
inline
]
pub
fn
is_auto
(
&
self
)
-
>
bool
{
matches
!
(
*
self
Size
:
:
Auto
)
}
}
#
[
allow
(
missing_docs
)
]
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericMaxSize
<
LengthPercent
>
{
LengthPercentage
(
LengthPercent
)
None
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
animation
(
error
)
]
MaxContent
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
animation
(
error
)
]
MinContent
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
animation
(
error
)
]
FitContent
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
animation
(
error
)
]
MozAvailable
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
animation
(
error
)
]
WebkitFillAvailable
#
[
animation
(
error
)
]
Stretch
#
[
animation
(
error
)
]
#
[
css
(
function
=
"
fit
-
content
"
)
]
FitContentFunction
(
LengthPercent
)
}
pub
use
self
:
:
GenericMaxSize
as
MaxSize
;
impl
<
LengthPercentage
>
MaxSize
<
LengthPercentage
>
{
#
[
inline
]
pub
fn
none
(
)
-
>
Self
{
MaxSize
:
:
None
}
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
Parse
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
pub
enum
GenericLengthOrNumber
<
L
N
>
{
Number
(
N
)
Length
(
L
)
}
pub
use
self
:
:
GenericLengthOrNumber
as
LengthOrNumber
;
impl
<
L
N
:
Zero
>
Zero
for
LengthOrNumber
<
L
N
>
{
fn
zero
(
)
-
>
Self
{
LengthOrNumber
:
:
Number
(
Zero
:
:
zero
(
)
)
}
fn
is_zero
(
&
self
)
-
>
bool
{
match
*
self
{
LengthOrNumber
:
:
Number
(
ref
n
)
=
>
n
.
is_zero
(
)
LengthOrNumber
:
:
Length
(
.
.
)
=
>
false
}
}
}
#
[
derive
(
Animate
Clone
ComputeSquaredDistance
Copy
Debug
MallocSizeOf
Parse
PartialEq
SpecifiedValueInfo
ToAnimatedValue
ToAnimatedZero
ToComputedValue
ToCss
ToResolvedValue
ToShmem
)
]
#
[
repr
(
C
u8
)
]
#
[
allow
(
missing_docs
)
]
pub
enum
GenericLengthPercentageOrNormal
<
LengthPercent
>
{
LengthPercentage
(
LengthPercent
)
Normal
}
pub
use
self
:
:
GenericLengthPercentageOrNormal
as
LengthPercentageOrNormal
;
impl
<
LengthPercent
>
LengthPercentageOrNormal
<
LengthPercent
>
{
#
[
inline
]
pub
fn
normal
(
)
-
>
Self
{
LengthPercentageOrNormal
:
:
Normal
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
SpecifiedValueInfo
ToCss
ToShmem
ToComputedValue
ToResolvedValue
)
]
#
[
repr
(
C
)
]
pub
enum
GenericInset
<
P
LP
>
where
P
:
ToCss
LP
:
ToCss
{
LengthPercentage
(
LP
)
Auto
AnchorFunction
(
Box
<
GenericAnchorFunction
<
P
LP
>
>
)
}
impl
<
P
LP
>
GenericInset
<
P
LP
>
where
P
:
ToCss
LP
:
ToCss
{
#
[
inline
]
pub
fn
auto
(
)
-
>
Self
{
Self
:
:
Auto
}
}
pub
use
self
:
:
GenericInset
as
Inset
;
