use
super
:
:
{
Context
ToResolvedValue
}
;
use
crate
:
:
values
:
:
computed
;
use
crate
:
:
values
:
:
generics
:
:
color
as
generics
;
impl
ToResolvedValue
for
computed
:
:
Color
{
type
ResolvedValue
=
cssparser
:
:
RGBA
;
#
[
inline
]
fn
to_resolved_value
(
self
context
:
&
Context
)
-
>
Self
:
:
ResolvedValue
{
context
.
style
.
resolve_color
(
self
)
}
#
[
inline
]
fn
from_resolved_value
(
resolved
:
Self
:
:
ResolvedValue
)
-
>
Self
{
generics
:
:
Color
:
:
rgba
(
resolved
)
}
}
impl
ToResolvedValue
for
computed
:
:
ColorOrAuto
{
type
ResolvedValue
=
cssparser
:
:
RGBA
;
#
[
inline
]
fn
to_resolved_value
(
self
context
:
&
Context
)
-
>
Self
:
:
ResolvedValue
{
let
color
=
match
self
{
generics
:
:
ColorOrAuto
:
:
Color
(
color
)
=
>
color
generics
:
:
ColorOrAuto
:
:
Auto
=
>
generics
:
:
Color
:
:
currentcolor
(
)
}
;
color
.
to_resolved_value
(
context
)
}
#
[
inline
]
fn
from_resolved_value
(
resolved
:
Self
:
:
ResolvedValue
)
-
>
Self
{
generics
:
:
ColorOrAuto
:
:
Color
(
computed
:
:
Color
:
:
from_resolved_value
(
resolved
)
)
}
}
