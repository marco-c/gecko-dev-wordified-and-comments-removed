use
super
:
:
{
Context
ToResolvedValue
}
;
use
selectors
:
:
parser
:
:
PseudoElement
;
use
crate
:
:
values
:
:
computed
;
impl
ToResolvedValue
for
computed
:
:
Content
{
type
ResolvedValue
=
Self
;
#
[
inline
]
fn
to_resolved_value
(
self
context
:
&
Context
)
-
>
Self
{
let
(
is_before_or_after
is_marker
)
=
match
context
.
style
.
pseudo
(
)
{
Some
(
ref
pseudo
)
=
>
(
pseudo
.
is_before_or_after
(
)
pseudo
.
is_marker
(
)
)
None
=
>
(
false
false
)
}
;
match
self
{
Self
:
:
Normal
if
is_before_or_after
=
>
Self
:
:
None
Self
:
:
None
if
!
is_before_or_after
&
&
!
is_marker
=
>
Self
:
:
Normal
other
=
>
other
}
}
#
[
inline
]
fn
from_resolved_value
(
resolved
:
Self
)
-
>
Self
{
resolved
}
}
