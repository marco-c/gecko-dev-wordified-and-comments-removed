#
!
[
allow
(
unsafe_code
)
]
use
std
:
:
mem
:
:
ManuallyDrop
;
use
std
:
:
ops
:
:
Deref
;
use
std
:
:
ptr
;
pub
(
super
)
struct
UnsafeBox
<
T
>
{
inner
:
ManuallyDrop
<
Box
<
T
>
>
}
impl
<
T
>
UnsafeBox
<
T
>
{
pub
(
super
)
fn
from_box
(
value
:
Box
<
T
>
)
-
>
Self
{
Self
{
inner
:
ManuallyDrop
:
:
new
(
value
)
}
}
pub
(
super
)
unsafe
fn
from_raw
(
ptr
:
*
mut
T
)
-
>
Self
{
Self
{
inner
:
ManuallyDrop
:
:
new
(
Box
:
:
from_raw
(
ptr
)
)
}
}
pub
(
super
)
unsafe
fn
clone
(
this
:
&
Self
)
-
>
Self
{
Self
{
inner
:
ptr
:
:
read
(
&
this
.
inner
)
}
}
pub
(
super
)
unsafe
fn
drop
(
this
:
&
mut
Self
)
{
ManuallyDrop
:
:
drop
(
&
mut
this
.
inner
)
}
}
impl
<
T
>
Deref
for
UnsafeBox
<
T
>
{
type
Target
=
T
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
self
.
inner
}
}
