#
!
[
deny
(
missing_docs
)
]
use
cssparser
:
:
{
DeclarationListParser
parse_important
}
;
use
cssparser
:
:
{
Parser
AtRuleParser
DeclarationParser
Delimiter
}
;
use
error_reporting
:
:
ParseErrorReporter
;
use
parser
:
:
{
ParserContext
ParserContextExtraData
log_css_error
}
;
use
servo_url
:
:
ServoUrl
;
use
std
:
:
boxed
:
:
Box
as
StdBox
;
use
std
:
:
fmt
;
use
style_traits
:
:
ToCss
;
use
stylesheets
:
:
Origin
;
use
super
:
:
*
;
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
derive
(
Debug
Copy
Clone
PartialEq
Eq
Hash
)
]
pub
enum
Importance
{
Normal
Important
}
impl
Importance
{
pub
fn
important
(
self
)
-
>
bool
{
match
self
{
Importance
:
:
Normal
=
>
false
Importance
:
:
Important
=
>
true
}
}
}
impl
Default
for
Importance
{
#
[
inline
]
fn
default
(
)
-
>
Self
{
Importance
:
:
Normal
}
}
#
[
derive
(
Debug
PartialEq
Clone
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
struct
PropertyDeclarationBlock
{
#
[
cfg_attr
(
feature
=
"
servo
"
ignore_heap_size_of
=
"
#
7038
"
)
]
pub
declarations
:
Vec
<
(
PropertyDeclaration
Importance
)
>
pub
important_count
:
u32
}
impl
PropertyDeclarationBlock
{
pub
fn
any_important
(
&
self
)
-
>
bool
{
self
.
important_count
>
0
}
pub
fn
any_normal
(
&
self
)
-
>
bool
{
self
.
declarations
.
len
(
)
>
self
.
important_count
as
usize
}
pub
fn
get
(
&
self
property
:
PropertyDeclarationId
)
-
>
Option
<
&
(
PropertyDeclaration
Importance
)
>
{
self
.
declarations
.
iter
(
)
.
find
(
|
&
&
(
ref
decl
_
)
|
decl
.
id
(
)
=
=
property
)
}
pub
fn
property_value_to_css
<
W
>
(
&
self
property
:
&
PropertyId
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
match
property
.
as_shorthand
(
)
{
Ok
(
shorthand
)
=
>
{
let
mut
list
=
Vec
:
:
new
(
)
;
let
mut
important_count
=
0
;
for
&
longhand
in
shorthand
.
longhands
(
)
{
let
declaration
=
self
.
get
(
PropertyDeclarationId
:
:
Longhand
(
longhand
)
)
;
match
declaration
{
Some
(
&
(
ref
declaration
importance
)
)
=
>
{
list
.
push
(
declaration
)
;
if
importance
.
important
(
)
{
important_count
+
=
1
;
}
}
None
=
>
return
Ok
(
(
)
)
}
}
if
important_count
>
0
&
&
important_count
!
=
list
.
len
(
)
{
return
Ok
(
(
)
)
;
}
match
shorthand
.
get_shorthand_appendable_value
(
list
)
{
Some
(
appendable_value
)
=
>
append_declaration_value
(
dest
appendable_value
)
None
=
>
return
Ok
(
(
)
)
}
}
Err
(
longhand_or_custom
)
=
>
{
if
let
Some
(
&
(
ref
value
_importance
)
)
=
self
.
get
(
longhand_or_custom
)
{
value
.
to_css
(
dest
)
}
else
{
Ok
(
(
)
)
}
}
}
}
pub
fn
property_priority
(
&
self
property
:
&
PropertyId
)
-
>
Importance
{
match
property
.
as_shorthand
(
)
{
Ok
(
shorthand
)
=
>
{
if
shorthand
.
longhands
(
)
.
iter
(
)
.
all
(
|
&
l
|
{
self
.
get
(
PropertyDeclarationId
:
:
Longhand
(
l
)
)
.
map_or
(
false
|
&
(
_
importance
)
|
importance
.
important
(
)
)
}
)
{
Importance
:
:
Important
}
else
{
Importance
:
:
Normal
}
}
Err
(
longhand_or_custom
)
=
>
{
self
.
get
(
longhand_or_custom
)
.
map_or
(
Importance
:
:
Normal
|
&
(
_
importance
)
|
importance
)
}
}
}
pub
fn
set_parsed_declaration
(
&
mut
self
declaration
:
PropertyDeclaration
importance
:
Importance
)
{
for
slot
in
&
mut
*
self
.
declarations
{
if
slot
.
0
.
id
(
)
=
=
declaration
.
id
(
)
{
match
(
slot
.
1
importance
)
{
(
Importance
:
:
Normal
Importance
:
:
Important
)
=
>
{
self
.
important_count
+
=
1
;
}
(
Importance
:
:
Important
Importance
:
:
Normal
)
=
>
{
self
.
important_count
-
=
1
;
}
_
=
>
{
}
}
*
slot
=
(
declaration
importance
)
;
return
}
}
self
.
declarations
.
push
(
(
declaration
importance
)
)
;
if
importance
.
important
(
)
{
self
.
important_count
+
=
1
;
}
}
pub
fn
set_importance
(
&
mut
self
property
:
&
PropertyId
new_importance
:
Importance
)
-
>
bool
{
let
mut
updated_at_least_one
=
false
;
for
&
mut
(
ref
declaration
ref
mut
importance
)
in
&
mut
self
.
declarations
{
if
declaration
.
id
(
)
.
is_or_is_longhand_of
(
property
)
{
match
(
*
importance
new_importance
)
{
(
Importance
:
:
Normal
Importance
:
:
Important
)
=
>
{
self
.
important_count
+
=
1
;
}
(
Importance
:
:
Important
Importance
:
:
Normal
)
=
>
{
self
.
important_count
-
=
1
;
}
_
=
>
{
continue
;
}
}
updated_at_least_one
=
true
;
*
importance
=
new_importance
;
}
}
updated_at_least_one
}
pub
fn
remove_property
(
&
mut
self
property
:
&
PropertyId
)
-
>
bool
{
let
important_count
=
&
mut
self
.
important_count
;
let
mut
removed_at_least_one
=
false
;
self
.
declarations
.
retain
(
|
&
(
ref
declaration
importance
)
|
{
let
remove
=
declaration
.
id
(
)
.
is_or_is_longhand_of
(
property
)
;
if
remove
{
removed_at_least_one
=
true
;
if
importance
.
important
(
)
{
*
important_count
-
=
1
}
}
!
remove
}
)
;
removed_at_least_one
}
pub
fn
single_value_to_css
<
W
>
(
&
self
property
:
&
PropertyId
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
match
property
.
as_shorthand
(
)
{
Err
(
_longhand_or_custom
)
=
>
{
if
self
.
declarations
.
len
(
)
=
=
1
{
self
.
declarations
[
0
]
.
0
.
to_css
(
dest
)
}
else
{
Err
(
fmt
:
:
Error
)
}
}
Ok
(
shorthand
)
=
>
{
fn
get_declaration
(
dec
:
&
(
PropertyDeclaration
Importance
)
)
-
>
&
PropertyDeclaration
{
&
dec
.
0
}
if
!
self
.
declarations
.
iter
(
)
.
all
(
|
decl
|
decl
.
0
.
shorthands
(
)
.
contains
(
&
shorthand
)
)
{
return
Err
(
fmt
:
:
Error
)
}
let
iter
=
self
.
declarations
.
iter
(
)
.
map
(
get_declaration
as
fn
(
_
)
-
>
_
)
;
match
shorthand
.
get_shorthand_appendable_value
(
iter
)
{
Some
(
AppendableValue
:
:
Css
(
css
)
)
=
>
dest
.
write_str
(
css
)
Some
(
AppendableValue
:
:
DeclarationsForShorthand
(
_
decls
)
)
=
>
{
shorthand
.
longhands_to_css
(
decls
dest
)
}
_
=
>
Ok
(
(
)
)
}
}
}
}
}
impl
ToCss
for
PropertyDeclarationBlock
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
let
mut
is_first_serialization
=
true
;
let
mut
already_serialized
=
Vec
:
:
new
(
)
;
for
&
(
ref
declaration
importance
)
in
&
*
self
.
declarations
{
let
property
=
declaration
.
id
(
)
;
if
already_serialized
.
contains
(
&
property
)
{
continue
;
}
let
shorthands
=
declaration
.
shorthands
(
)
;
if
!
shorthands
.
is_empty
(
)
{
let
mut
longhands
=
self
.
declarations
.
iter
(
)
.
filter
(
|
d
|
!
already_serialized
.
contains
(
&
d
.
0
.
id
(
)
)
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
;
for
&
shorthand
in
shorthands
{
let
properties
=
shorthand
.
longhands
(
)
;
let
mut
current_longhands
=
Vec
:
:
new
(
)
;
let
mut
important_count
=
0
;
for
&
&
(
ref
longhand
longhand_importance
)
in
longhands
.
iter
(
)
{
if
longhand
.
id
(
)
.
is_longhand_of
(
shorthand
)
{
current_longhands
.
push
(
longhand
)
;
if
longhand_importance
.
important
(
)
{
important_count
+
=
1
;
}
}
}
if
current_longhands
.
is_empty
(
)
|
|
current_longhands
.
len
(
)
!
=
properties
.
len
(
)
{
continue
;
}
let
is_important
=
important_count
>
0
;
if
is_important
&
&
important_count
!
=
current_longhands
.
len
(
)
{
continue
;
}
let
importance
=
if
is_important
{
Importance
:
:
Important
}
else
{
Importance
:
:
Normal
}
;
let
mut
value
=
String
:
:
new
(
)
;
match
shorthand
.
get_shorthand_appendable_value
(
current_longhands
.
iter
(
)
.
cloned
(
)
)
{
None
=
>
continue
Some
(
appendable_value
)
=
>
{
try
!
(
append_declaration_value
(
&
mut
value
appendable_value
)
)
;
}
}
if
value
.
is_empty
(
)
{
continue
}
try
!
(
append_serialization
:
:
<
W
Cloned
<
slice
:
:
Iter
<
_
>
>
_
>
(
dest
&
shorthand
AppendableValue
:
:
Css
(
&
value
)
importance
&
mut
is_first_serialization
)
)
;
for
current_longhand
in
current_longhands
{
already_serialized
.
push
(
current_longhand
.
id
(
)
)
;
let
index_to_remove
=
longhands
.
iter
(
)
.
position
(
|
l
|
l
.
0
=
=
*
current_longhand
)
;
if
let
Some
(
index
)
=
index_to_remove
{
longhands
.
remove
(
index
)
;
}
}
}
}
if
already_serialized
.
contains
(
&
property
)
{
continue
;
}
use
std
:
:
iter
:
:
Cloned
;
use
std
:
:
slice
;
try
!
(
append_serialization
:
:
<
W
Cloned
<
slice
:
:
Iter
<
&
PropertyDeclaration
>
>
_
>
(
dest
&
property
AppendableValue
:
:
Declaration
(
declaration
)
importance
&
mut
is_first_serialization
)
)
;
already_serialized
.
push
(
property
)
;
}
Ok
(
(
)
)
}
}
pub
enum
AppendableValue
<
'
a
I
>
where
I
:
Iterator
<
Item
=
&
'
a
PropertyDeclaration
>
{
Declaration
(
&
'
a
PropertyDeclaration
)
DeclarationsForShorthand
(
ShorthandId
I
)
Css
(
&
'
a
str
)
}
fn
handle_first_serialization
<
W
>
(
dest
:
&
mut
W
is_first_serialization
:
&
mut
bool
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
if
!
*
is_first_serialization
{
try
!
(
write
!
(
dest
"
"
)
)
;
}
else
{
*
is_first_serialization
=
false
;
}
Ok
(
(
)
)
}
pub
fn
append_declaration_value
<
'
a
W
I
>
(
dest
:
&
mut
W
appendable_value
:
AppendableValue
<
'
a
I
>
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
I
:
Iterator
<
Item
=
&
'
a
PropertyDeclaration
>
{
match
appendable_value
{
AppendableValue
:
:
Css
(
css
)
=
>
{
try
!
(
write
!
(
dest
"
{
}
"
css
)
)
}
AppendableValue
:
:
Declaration
(
decl
)
=
>
{
try
!
(
decl
.
to_css
(
dest
)
)
;
}
AppendableValue
:
:
DeclarationsForShorthand
(
shorthand
decls
)
=
>
{
try
!
(
shorthand
.
longhands_to_css
(
decls
dest
)
)
;
}
}
Ok
(
(
)
)
}
pub
fn
append_serialization
<
'
a
W
I
N
>
(
dest
:
&
mut
W
property_name
:
&
N
appendable_value
:
AppendableValue
<
'
a
I
>
importance
:
Importance
is_first_serialization
:
&
mut
bool
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
I
:
Iterator
<
Item
=
&
'
a
PropertyDeclaration
>
N
:
ToCss
{
try
!
(
handle_first_serialization
(
dest
is_first_serialization
)
)
;
try
!
(
property_name
.
to_css
(
dest
)
)
;
try
!
(
dest
.
write_char
(
'
:
'
)
)
;
match
&
appendable_value
{
&
AppendableValue
:
:
Css
(
_
)
=
>
{
try
!
(
write
!
(
dest
"
"
)
)
}
&
AppendableValue
:
:
Declaration
(
decl
)
=
>
{
if
!
decl
.
value_is_unparsed
(
)
{
try
!
(
write
!
(
dest
"
"
)
)
;
}
}
&
AppendableValue
:
:
DeclarationsForShorthand
(
.
.
)
=
>
unreachable
!
(
)
}
try
!
(
append_declaration_value
(
dest
appendable_value
)
)
;
if
importance
.
important
(
)
{
try
!
(
write
!
(
dest
"
!
important
"
)
)
;
}
write
!
(
dest
"
;
"
)
}
pub
fn
parse_style_attribute
(
input
:
&
str
base_url
:
&
ServoUrl
error_reporter
:
StdBox
<
ParseErrorReporter
+
Send
>
extra_data
:
ParserContextExtraData
)
-
>
PropertyDeclarationBlock
{
let
context
=
ParserContext
:
:
new_with_extra_data
(
Origin
:
:
Author
base_url
error_reporter
extra_data
)
;
parse_property_declaration_list
(
&
context
&
mut
Parser
:
:
new
(
input
)
)
}
pub
fn
parse_one_declaration
(
id
:
PropertyId
input
:
&
str
base_url
:
&
ServoUrl
error_reporter
:
StdBox
<
ParseErrorReporter
+
Send
>
extra_data
:
ParserContextExtraData
)
-
>
Result
<
Vec
<
(
PropertyDeclaration
Importance
)
>
(
)
>
{
let
context
=
ParserContext
:
:
new_with_extra_data
(
Origin
:
:
Author
base_url
error_reporter
extra_data
)
;
Parser
:
:
new
(
input
)
.
parse_entirely
(
|
parser
|
{
let
mut
results
=
vec
!
[
]
;
match
PropertyDeclaration
:
:
parse
(
id
&
context
parser
&
mut
results
false
)
{
PropertyDeclarationParseResult
:
:
ValidOrIgnoredDeclaration
=
>
Ok
(
results
)
_
=
>
Err
(
(
)
)
}
}
)
}
struct
PropertyDeclarationParser
<
'
a
'
b
:
'
a
>
{
context
:
&
'
a
ParserContext
<
'
b
>
declarations
:
Vec
<
(
PropertyDeclaration
Importance
)
>
}
impl
<
'
a
'
b
>
AtRuleParser
for
PropertyDeclarationParser
<
'
a
'
b
>
{
type
Prelude
=
(
)
;
type
AtRule
=
(
u32
Importance
)
;
}
impl
<
'
a
'
b
>
DeclarationParser
for
PropertyDeclarationParser
<
'
a
'
b
>
{
type
Declaration
=
(
u32
Importance
)
;
fn
parse_value
(
&
mut
self
name
:
&
str
input
:
&
mut
Parser
)
-
>
Result
<
(
u32
Importance
)
(
)
>
{
let
id
=
try
!
(
PropertyId
:
:
parse
(
name
.
into
(
)
)
)
;
let
old_len
=
self
.
declarations
.
len
(
)
;
let
parse_result
=
input
.
parse_until_before
(
Delimiter
:
:
Bang
|
input
|
{
match
PropertyDeclaration
:
:
parse
(
id
self
.
context
input
&
mut
self
.
declarations
false
)
{
PropertyDeclarationParseResult
:
:
ValidOrIgnoredDeclaration
=
>
Ok
(
(
)
)
_
=
>
Err
(
(
)
)
}
}
)
;
if
let
Err
(
_
)
=
parse_result
{
self
.
declarations
.
truncate
(
old_len
)
;
return
Err
(
(
)
)
}
let
importance
=
match
input
.
try
(
parse_important
)
{
Ok
(
(
)
)
=
>
Importance
:
:
Important
Err
(
(
)
)
=
>
Importance
:
:
Normal
}
;
if
!
input
.
is_exhausted
(
)
{
self
.
declarations
.
truncate
(
old_len
)
;
return
Err
(
(
)
)
}
for
decl
in
&
mut
self
.
declarations
[
old_len
.
.
]
{
decl
.
1
=
importance
}
Ok
(
(
(
self
.
declarations
.
len
(
)
-
old_len
)
as
u32
importance
)
)
}
}
pub
fn
parse_property_declaration_list
(
context
:
&
ParserContext
input
:
&
mut
Parser
)
-
>
PropertyDeclarationBlock
{
let
mut
important_count
=
0
;
let
parser
=
PropertyDeclarationParser
{
context
:
context
declarations
:
vec
!
[
]
}
;
let
mut
iter
=
DeclarationListParser
:
:
new
(
input
parser
)
;
while
let
Some
(
declaration
)
=
iter
.
next
(
)
{
match
declaration
{
Ok
(
(
count
importance
)
)
=
>
{
if
importance
.
important
(
)
{
important_count
+
=
count
;
}
}
Err
(
range
)
=
>
{
let
pos
=
range
.
start
;
let
message
=
format
!
(
"
Unsupported
property
declaration
:
'
{
}
'
"
iter
.
input
.
slice
(
range
)
)
;
log_css_error
(
iter
.
input
pos
&
*
message
&
context
)
;
}
}
}
let
mut
block
=
PropertyDeclarationBlock
{
declarations
:
iter
.
parser
.
declarations
important_count
:
important_count
}
;
super
:
:
deduplicate_property_declarations
(
&
mut
block
)
;
block
}
