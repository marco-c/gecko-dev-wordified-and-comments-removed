#
!
[
deny
(
missing_docs
)
]
use
context
:
:
QuirksMode
;
use
cssparser
:
:
{
DeclarationListParser
parse_important
ParserInput
CowRcStr
}
;
use
cssparser
:
:
{
Parser
AtRuleParser
DeclarationParser
Delimiter
ParseErrorKind
}
;
use
custom_properties
:
:
CustomPropertiesBuilder
;
use
error_reporting
:
:
{
ParseErrorReporter
ContextualParseError
}
;
use
parser
:
:
{
ParserContext
ParserErrorContext
}
;
use
properties
:
:
animated_properties
:
:
AnimationValue
;
use
shared_lock
:
:
Locked
;
use
smallbitvec
:
:
{
self
SmallBitVec
}
;
use
smallvec
:
:
SmallVec
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
std
:
:
iter
:
:
{
DoubleEndedIterator
Zip
}
;
use
std
:
:
slice
:
:
Iter
;
use
str
:
:
{
CssString
CssStringBorrow
CssStringWriter
}
;
use
style_traits
:
:
{
CssWriter
ParseError
ParsingMode
StyleParseErrorKind
ToCss
}
;
use
stylesheets
:
:
{
CssRuleType
Origin
UrlExtraData
}
;
use
super
:
:
*
;
use
values
:
:
computed
:
:
Context
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
properties
:
:
animated_properties
:
:
AnimationValueMap
;
pub
struct
AnimationRules
(
pub
Option
<
Arc
<
Locked
<
PropertyDeclarationBlock
>
>
>
pub
Option
<
Arc
<
Locked
<
PropertyDeclarationBlock
>
>
>
)
;
impl
AnimationRules
{
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
0
.
is_none
(
)
&
&
self
.
1
.
is_none
(
)
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
Hash
MallocSizeOf
PartialEq
)
]
pub
enum
DeclarationSource
{
Parsing
CssOm
}
#
[
derive
(
Clone
Copy
Debug
Eq
Hash
MallocSizeOf
PartialEq
)
]
pub
enum
Importance
{
Normal
Important
}
impl
Importance
{
pub
fn
important
(
self
)
-
>
bool
{
match
self
{
Importance
:
:
Normal
=
>
false
Importance
:
:
Important
=
>
true
}
}
}
#
[
cfg_attr
(
feature
=
"
gecko
"
derive
(
MallocSizeOf
)
)
]
#
[
derive
(
Clone
)
]
pub
struct
PropertyDeclarationBlock
{
declarations
:
Vec
<
PropertyDeclaration
>
declarations_importance
:
SmallBitVec
longhands
:
LonghandIdSet
}
pub
struct
DeclarationImportanceIterator
<
'
a
>
{
iter
:
Zip
<
Iter
<
'
a
PropertyDeclaration
>
smallbitvec
:
:
Iter
<
'
a
>
>
}
impl
<
'
a
>
DeclarationImportanceIterator
<
'
a
>
{
pub
fn
new
(
declarations
:
&
'
a
[
PropertyDeclaration
]
important
:
&
'
a
SmallBitVec
)
-
>
Self
{
DeclarationImportanceIterator
{
iter
:
declarations
.
iter
(
)
.
zip
(
important
.
iter
(
)
)
}
}
}
impl
<
'
a
>
Iterator
for
DeclarationImportanceIterator
<
'
a
>
{
type
Item
=
(
&
'
a
PropertyDeclaration
Importance
)
;
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next
(
)
.
map
(
|
(
decl
important
)
|
(
decl
if
important
{
Importance
:
:
Important
}
else
{
Importance
:
:
Normal
}
)
)
}
#
[
inline
]
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
iter
.
size_hint
(
)
}
}
impl
<
'
a
>
DoubleEndedIterator
for
DeclarationImportanceIterator
<
'
a
>
{
#
[
inline
(
always
)
]
fn
next_back
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next_back
(
)
.
map
(
|
(
decl
important
)
|
(
decl
if
important
{
Importance
:
:
Important
}
else
{
Importance
:
:
Normal
}
)
)
}
}
pub
struct
NormalDeclarationIterator
<
'
a
>
(
DeclarationImportanceIterator
<
'
a
>
)
;
impl
<
'
a
>
NormalDeclarationIterator
<
'
a
>
{
#
[
inline
]
pub
fn
new
(
declarations
:
&
'
a
[
PropertyDeclaration
]
important
:
&
'
a
SmallBitVec
)
-
>
Self
{
NormalDeclarationIterator
(
DeclarationImportanceIterator
:
:
new
(
declarations
important
)
)
}
}
impl
<
'
a
>
Iterator
for
NormalDeclarationIterator
<
'
a
>
{
type
Item
=
&
'
a
PropertyDeclaration
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
loop
{
let
(
decl
importance
)
=
self
.
0
.
iter
.
next
(
)
?
;
if
!
importance
{
return
Some
(
decl
)
;
}
}
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
0
.
iter
.
size_hint
(
)
}
}
pub
struct
AnimationValueIterator
<
'
a
'
cx
'
cx_a
:
'
cx
>
{
iter
:
NormalDeclarationIterator
<
'
a
>
context
:
&
'
cx
mut
Context
<
'
cx_a
>
default_values
:
&
'
a
ComputedValues
extra_custom_properties
:
Option
<
&
'
a
Arc
<
:
:
custom_properties
:
:
CustomPropertiesMap
>
>
}
impl
<
'
a
'
cx
'
cx_a
:
'
cx
>
AnimationValueIterator
<
'
a
'
cx
'
cx_a
>
{
fn
new
(
declarations
:
&
'
a
PropertyDeclarationBlock
context
:
&
'
cx
mut
Context
<
'
cx_a
>
default_values
:
&
'
a
ComputedValues
extra_custom_properties
:
Option
<
&
'
a
Arc
<
:
:
custom_properties
:
:
CustomPropertiesMap
>
>
)
-
>
AnimationValueIterator
<
'
a
'
cx
'
cx_a
>
{
AnimationValueIterator
{
iter
:
declarations
.
normal_declaration_iter
(
)
context
default_values
extra_custom_properties
}
}
}
impl
<
'
a
'
cx
'
cx_a
:
'
cx
>
Iterator
for
AnimationValueIterator
<
'
a
'
cx
'
cx_a
>
{
type
Item
=
AnimationValue
;
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
loop
{
let
decl
=
self
.
iter
.
next
(
)
?
;
let
animation
=
AnimationValue
:
:
from_declaration
(
decl
&
mut
self
.
context
self
.
extra_custom_properties
self
.
default_values
)
;
if
let
Some
(
anim
)
=
animation
{
return
Some
(
anim
)
;
}
}
}
}
impl
fmt
:
:
Debug
for
PropertyDeclarationBlock
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
self
.
declarations
.
fmt
(
f
)
}
}
impl
PropertyDeclarationBlock
{
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
declarations
.
len
(
)
}
pub
fn
new
(
)
-
>
Self
{
PropertyDeclarationBlock
{
declarations
:
Vec
:
:
new
(
)
declarations_importance
:
SmallBitVec
:
:
new
(
)
longhands
:
LonghandIdSet
:
:
new
(
)
}
}
pub
fn
with_one
(
declaration
:
PropertyDeclaration
importance
:
Importance
)
-
>
Self
{
let
mut
longhands
=
LonghandIdSet
:
:
new
(
)
;
if
let
PropertyDeclarationId
:
:
Longhand
(
id
)
=
declaration
.
id
(
)
{
longhands
.
insert
(
id
)
;
}
PropertyDeclarationBlock
{
declarations
:
vec
!
[
declaration
]
declarations_importance
:
SmallBitVec
:
:
from_elem
(
1
importance
.
important
(
)
)
longhands
:
longhands
}
}
pub
fn
declarations
(
&
self
)
-
>
&
[
PropertyDeclaration
]
{
&
self
.
declarations
}
pub
fn
declarations_importance
(
&
self
)
-
>
&
SmallBitVec
{
&
self
.
declarations_importance
}
pub
fn
declaration_importance_iter
(
&
self
)
-
>
DeclarationImportanceIterator
{
DeclarationImportanceIterator
:
:
new
(
&
self
.
declarations
&
self
.
declarations_importance
)
}
pub
fn
normal_declaration_iter
(
&
self
)
-
>
NormalDeclarationIterator
{
NormalDeclarationIterator
:
:
new
(
&
self
.
declarations
&
self
.
declarations_importance
)
}
pub
fn
to_animation_value_iter
<
'
a
'
cx
'
cx_a
:
'
cx
>
(
&
'
a
self
context
:
&
'
cx
mut
Context
<
'
cx_a
>
default_values
:
&
'
a
ComputedValues
extra_custom_properties
:
Option
<
&
'
a
Arc
<
:
:
custom_properties
:
:
CustomPropertiesMap
>
>
)
-
>
AnimationValueIterator
<
'
a
'
cx
'
cx_a
>
{
AnimationValueIterator
:
:
new
(
self
context
default_values
extra_custom_properties
)
}
pub
fn
any_important
(
&
self
)
-
>
bool
{
!
self
.
declarations_importance
.
all_false
(
)
}
pub
fn
any_normal
(
&
self
)
-
>
bool
{
!
self
.
declarations_importance
.
all_true
(
)
}
pub
fn
contains
(
&
self
id
:
LonghandId
)
-
>
bool
{
self
.
longhands
.
contains
(
id
)
}
#
[
inline
]
pub
fn
contains_any_reset
(
&
self
)
-
>
bool
{
self
.
longhands
.
contains_any_reset
(
)
}
pub
fn
get
(
&
self
property
:
PropertyDeclarationId
)
-
>
Option
<
(
&
PropertyDeclaration
Importance
)
>
{
self
.
declarations
.
iter
(
)
.
enumerate
(
)
.
find
(
|
&
(
_
decl
)
|
decl
.
id
(
)
=
=
property
)
.
map
(
|
(
i
decl
)
|
{
let
importance
=
if
self
.
declarations_importance
.
get
(
i
as
u32
)
{
Importance
:
:
Important
}
else
{
Importance
:
:
Normal
}
;
(
decl
importance
)
}
)
}
fn
shorthand_to_css
(
&
self
shorthand
:
ShorthandId
dest
:
&
mut
CssStringWriter
)
-
>
fmt
:
:
Result
{
let
mut
list
=
SmallVec
:
:
<
[
&
_
;
10
]
>
:
:
new
(
)
;
let
mut
important_count
=
0
;
for
&
longhand
in
shorthand
.
longhands
(
)
{
let
declaration
=
self
.
get
(
PropertyDeclarationId
:
:
Longhand
(
longhand
)
)
;
match
declaration
{
Some
(
(
declaration
importance
)
)
=
>
{
list
.
push
(
declaration
)
;
if
importance
.
important
(
)
{
important_count
+
=
1
;
}
}
None
=
>
return
Ok
(
(
)
)
}
}
if
important_count
>
0
&
&
important_count
!
=
list
.
len
(
)
{
return
Ok
(
(
)
)
;
}
match
shorthand
.
get_shorthand_appendable_value
(
list
.
iter
(
)
.
cloned
(
)
)
{
Some
(
appendable_value
)
=
>
{
append_declaration_value
(
dest
appendable_value
)
}
None
=
>
return
Ok
(
(
)
)
}
}
pub
fn
property_value_to_css
(
&
self
property
:
&
PropertyId
dest
:
&
mut
CssStringWriter
)
-
>
fmt
:
:
Result
{
let
longhand_or_custom
=
match
property
.
as_shorthand
(
)
{
Ok
(
shorthand
)
=
>
return
self
.
shorthand_to_css
(
shorthand
dest
)
Err
(
longhand_or_custom
)
=
>
longhand_or_custom
}
;
if
let
Some
(
(
value
_importance
)
)
=
self
.
get
(
longhand_or_custom
)
{
value
.
to_css
(
dest
)
}
else
{
Ok
(
(
)
)
}
}
pub
fn
property_priority
(
&
self
property
:
&
PropertyId
)
-
>
Importance
{
match
property
.
as_shorthand
(
)
{
Ok
(
shorthand
)
=
>
{
if
shorthand
.
longhands
(
)
.
iter
(
)
.
all
(
|
&
l
|
{
self
.
get
(
PropertyDeclarationId
:
:
Longhand
(
l
)
)
.
map_or
(
false
|
(
_
importance
)
|
importance
.
important
(
)
)
}
)
{
Importance
:
:
Important
}
else
{
Importance
:
:
Normal
}
}
Err
(
longhand_or_custom
)
=
>
{
self
.
get
(
longhand_or_custom
)
.
map_or
(
Importance
:
:
Normal
|
(
_
importance
)
|
importance
)
}
}
}
pub
fn
extend
(
&
mut
self
mut
drain
:
SourcePropertyDeclarationDrain
importance
:
Importance
source
:
DeclarationSource
)
-
>
bool
{
match
source
{
DeclarationSource
:
:
Parsing
=
>
{
let
all_shorthand_len
=
match
drain
.
all_shorthand
{
AllShorthand
:
:
NotSet
=
>
0
AllShorthand
:
:
CSSWideKeyword
(
_
)
|
AllShorthand
:
:
WithVariables
(
_
)
=
>
ShorthandId
:
:
All
.
longhands
(
)
.
len
(
)
}
;
let
push_calls_count
=
drain
.
declarations
.
len
(
)
+
all_shorthand_len
;
self
.
declarations
.
reserve
(
push_calls_count
)
;
}
DeclarationSource
:
:
CssOm
=
>
{
}
}
let
mut
changed
=
false
;
for
decl
in
&
mut
drain
.
declarations
{
changed
|
=
self
.
push
(
decl
importance
source
)
;
}
match
drain
.
all_shorthand
{
AllShorthand
:
:
NotSet
=
>
{
}
AllShorthand
:
:
CSSWideKeyword
(
keyword
)
=
>
{
for
&
id
in
ShorthandId
:
:
All
.
longhands
(
)
{
let
decl
=
PropertyDeclaration
:
:
CSSWideKeyword
(
WideKeywordDeclaration
{
id
keyword
}
)
;
changed
|
=
self
.
push
(
decl
importance
source
)
;
}
}
AllShorthand
:
:
WithVariables
(
unparsed
)
=
>
{
for
&
id
in
ShorthandId
:
:
All
.
longhands
(
)
{
let
decl
=
PropertyDeclaration
:
:
WithVariables
(
VariableDeclaration
{
id
value
:
unparsed
.
clone
(
)
}
)
;
changed
|
=
self
.
push
(
decl
importance
source
)
;
}
}
}
changed
}
pub
fn
push
(
&
mut
self
declaration
:
PropertyDeclaration
importance
:
Importance
source
:
DeclarationSource
)
-
>
bool
{
let
longhand_id
=
match
declaration
.
id
(
)
{
PropertyDeclarationId
:
:
Longhand
(
id
)
=
>
Some
(
id
)
PropertyDeclarationId
:
:
Custom
(
.
.
)
=
>
None
}
;
let
definitely_new
=
longhand_id
.
map_or
(
false
|
id
|
{
!
self
.
longhands
.
contains
(
id
)
}
)
;
if
!
definitely_new
{
let
mut
index_to_remove
=
None
;
for
(
i
slot
)
in
self
.
declarations
.
iter_mut
(
)
.
enumerate
(
)
{
if
slot
.
id
(
)
!
=
declaration
.
id
(
)
{
continue
;
}
let
important
=
self
.
declarations_importance
.
get
(
i
as
u32
)
;
match
(
important
importance
.
important
(
)
)
{
(
false
true
)
=
>
{
}
(
true
false
)
=
>
{
if
!
matches
!
(
source
DeclarationSource
:
:
CssOm
)
{
return
false
}
}
_
=
>
if
*
slot
=
=
declaration
{
return
false
;
}
}
match
source
{
DeclarationSource
:
:
CssOm
=
>
{
*
slot
=
declaration
;
self
.
declarations_importance
.
set
(
i
as
u32
importance
.
important
(
)
)
;
return
true
;
}
DeclarationSource
:
:
Parsing
=
>
{
if
let
PropertyDeclaration
:
:
Display
(
old_display
)
=
*
slot
{
use
properties
:
:
longhands
:
:
display
:
:
computed_value
:
:
T
as
display
;
if
let
PropertyDeclaration
:
:
Display
(
new_display
)
=
declaration
{
if
display
:
:
should_ignore_parsed_value
(
old_display
new_display
)
{
return
false
;
}
}
}
index_to_remove
=
Some
(
i
)
;
break
;
}
}
}
if
let
Some
(
index
)
=
index_to_remove
{
self
.
declarations
.
remove
(
index
)
;
self
.
declarations_importance
.
remove
(
index
as
u32
)
;
self
.
declarations
.
push
(
declaration
)
;
self
.
declarations_importance
.
push
(
importance
.
important
(
)
)
;
return
true
;
}
}
if
let
Some
(
id
)
=
longhand_id
{
self
.
longhands
.
insert
(
id
)
;
}
self
.
declarations
.
push
(
declaration
)
;
self
.
declarations_importance
.
push
(
importance
.
important
(
)
)
;
true
}
pub
fn
set_importance
(
&
mut
self
property
:
&
PropertyId
new_importance
:
Importance
)
-
>
bool
{
let
mut
updated_at_least_one
=
false
;
for
(
i
declaration
)
in
self
.
declarations
.
iter
(
)
.
enumerate
(
)
{
if
declaration
.
id
(
)
.
is_or_is_longhand_of
(
property
)
{
let
is_important
=
new_importance
.
important
(
)
;
if
self
.
declarations_importance
.
get
(
i
as
u32
)
!
=
is_important
{
self
.
declarations_importance
.
set
(
i
as
u32
is_important
)
;
updated_at_least_one
=
true
;
}
}
}
updated_at_least_one
}
pub
fn
remove_property
(
&
mut
self
property
:
&
PropertyId
)
-
>
bool
{
let
longhand_id
=
property
.
longhand_id
(
)
;
if
let
Some
(
id
)
=
longhand_id
{
if
!
self
.
longhands
.
contains
(
id
)
{
return
false
}
}
let
mut
removed_at_least_one
=
false
;
let
longhands
=
&
mut
self
.
longhands
;
let
declarations_importance
=
&
mut
self
.
declarations_importance
;
let
mut
i
=
0
;
self
.
declarations
.
retain
(
|
declaration
|
{
let
id
=
declaration
.
id
(
)
;
let
remove
=
id
.
is_or_is_longhand_of
(
property
)
;
if
remove
{
removed_at_least_one
=
true
;
if
let
PropertyDeclarationId
:
:
Longhand
(
id
)
=
id
{
longhands
.
remove
(
id
)
;
}
declarations_importance
.
remove
(
i
)
;
}
else
{
i
+
=
1
;
}
!
remove
}
)
;
if
longhand_id
.
is_some
(
)
{
debug_assert
!
(
removed_at_least_one
)
;
}
removed_at_least_one
}
pub
fn
single_value_to_css
(
&
self
property
:
&
PropertyId
dest
:
&
mut
CssStringWriter
computed_values
:
Option
<
&
ComputedValues
>
custom_properties_block
:
Option
<
&
PropertyDeclarationBlock
>
)
-
>
fmt
:
:
Result
{
if
let
Ok
(
shorthand
)
=
property
.
as_shorthand
(
)
{
return
self
.
shorthand_to_css
(
shorthand
dest
)
;
}
let
declaration
=
match
self
.
declarations
.
get
(
0
)
{
Some
(
d
)
=
>
d
None
=
>
return
Err
(
fmt
:
:
Error
)
}
;
let
custom_properties
=
if
let
Some
(
cv
)
=
computed_values
{
if
let
Some
(
block
)
=
custom_properties_block
{
block
.
cascade_custom_properties
(
cv
.
custom_properties
(
)
)
}
else
{
cv
.
custom_properties
(
)
.
cloned
(
)
}
}
else
{
None
}
;
match
(
declaration
computed_values
)
{
(
&
PropertyDeclaration
:
:
WithVariables
(
ref
declaration
)
Some
(
ref
_computed_values
)
)
=
>
{
declaration
.
value
.
substitute_variables
(
declaration
.
id
custom_properties
.
as_ref
(
)
QuirksMode
:
:
NoQuirks
)
.
to_css
(
dest
)
}
(
ref
d
_
)
=
>
d
.
to_css
(
dest
)
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
fn
from_animation_value_map
(
animation_value_map
:
&
AnimationValueMap
)
-
>
Self
{
let
len
=
animation_value_map
.
len
(
)
;
let
mut
declarations
=
Vec
:
:
with_capacity
(
len
)
;
let
mut
longhands
=
LonghandIdSet
:
:
new
(
)
;
for
(
property
animation_value
)
in
animation_value_map
.
iter
(
)
{
longhands
.
insert
(
*
property
)
;
declarations
.
push
(
animation_value
.
uncompute
(
)
)
;
}
PropertyDeclarationBlock
{
declarations
longhands
declarations_importance
:
SmallBitVec
:
:
from_elem
(
len
as
u32
false
)
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
fn
has_css_wide_keyword
(
&
self
property
:
&
PropertyId
)
-
>
bool
{
if
let
Some
(
id
)
=
property
.
longhand_id
(
)
{
if
!
self
.
longhands
.
contains
(
id
)
{
return
false
}
}
self
.
declarations
.
iter
(
)
.
any
(
|
decl
|
decl
.
id
(
)
.
is_or_is_longhand_of
(
property
)
&
&
decl
.
get_css_wide_keyword
(
)
.
is_some
(
)
)
}
pub
fn
cascade_custom_properties_with_context
(
&
self
context
:
&
Context
)
-
>
Option
<
Arc
<
:
:
custom_properties
:
:
CustomPropertiesMap
>
>
{
self
.
cascade_custom_properties
(
context
.
style
(
)
.
custom_properties
(
)
)
}
pub
fn
cascade_custom_properties
(
&
self
inherited_custom_properties
:
Option
<
&
Arc
<
:
:
custom_properties
:
:
CustomPropertiesMap
>
>
)
-
>
Option
<
Arc
<
:
:
custom_properties
:
:
CustomPropertiesMap
>
>
{
let
mut
builder
=
CustomPropertiesBuilder
:
:
new
(
inherited_custom_properties
)
;
for
declaration
in
self
.
normal_declaration_iter
(
)
{
if
let
PropertyDeclaration
:
:
Custom
(
ref
declaration
)
=
*
declaration
{
builder
.
cascade
(
&
declaration
.
name
declaration
.
value
.
borrow
(
)
)
;
}
}
builder
.
build
(
)
}
}
impl
PropertyDeclarationBlock
{
pub
fn
to_css
(
&
self
dest
:
&
mut
CssStringWriter
)
-
>
fmt
:
:
Result
{
let
mut
is_first_serialization
=
true
;
let
mut
already_serialized
=
PropertyDeclarationIdSet
:
:
new
(
)
;
for
(
declaration
importance
)
in
self
.
declaration_importance_iter
(
)
{
let
property
=
declaration
.
id
(
)
;
if
already_serialized
.
contains
(
property
)
{
continue
;
}
for
&
shorthand
in
declaration
.
shorthands
(
)
{
let
properties
=
shorthand
.
longhands
(
)
;
let
mut
current_longhands
=
SmallVec
:
:
<
[
_
;
10
]
>
:
:
new
(
)
;
let
mut
important_count
=
0
;
let
mut
found_system
=
None
;
let
is_system_font
=
shorthand
=
=
ShorthandId
:
:
Font
&
&
self
.
declarations
.
iter
(
)
.
any
(
|
l
|
{
!
already_serialized
.
contains
(
l
.
id
(
)
)
&
&
l
.
get_system
(
)
.
is_some
(
)
}
)
;
if
is_system_font
{
for
(
longhand
importance
)
in
self
.
declaration_importance_iter
(
)
{
if
longhand
.
get_system
(
)
.
is_some
(
)
|
|
longhand
.
is_default_line_height
(
)
{
current_longhands
.
push
(
longhand
)
;
if
found_system
.
is_none
(
)
{
found_system
=
longhand
.
get_system
(
)
;
}
if
importance
.
important
(
)
{
important_count
+
=
1
;
}
}
}
}
else
{
for
(
longhand
importance
)
in
self
.
declaration_importance_iter
(
)
{
if
longhand
.
id
(
)
.
is_longhand_of
(
shorthand
)
{
current_longhands
.
push
(
longhand
)
;
if
importance
.
important
(
)
{
important_count
+
=
1
;
}
}
}
if
current_longhands
.
len
(
)
!
=
properties
.
len
(
)
{
continue
;
}
}
let
is_important
=
important_count
>
0
;
if
is_important
&
&
important_count
!
=
current_longhands
.
len
(
)
{
continue
;
}
let
importance
=
if
is_important
{
Importance
:
:
Important
}
else
{
Importance
:
:
Normal
}
;
let
appendable_value
=
match
shorthand
.
get_shorthand_appendable_value
(
current_longhands
.
iter
(
)
.
cloned
(
)
)
{
None
=
>
continue
Some
(
appendable_value
)
=
>
appendable_value
}
;
let
mut
v
=
CssString
:
:
new
(
)
;
let
value
=
match
(
appendable_value
found_system
)
{
(
AppendableValue
:
:
Css
{
css
with_variables
}
_
)
=
>
{
debug_assert
!
(
!
css
.
is_empty
(
)
)
;
AppendableValue
:
:
Css
{
css
:
css
with_variables
:
with_variables
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
(
_
Some
(
sys
)
)
=
>
{
sys
.
to_css
(
&
mut
CssWriter
:
:
new
(
&
mut
v
)
)
?
;
AppendableValue
:
:
Css
{
css
:
CssStringBorrow
:
:
from
(
&
v
)
with_variables
:
false
}
}
(
other
_
)
=
>
{
append_declaration_value
(
&
mut
v
other
)
?
;
if
v
.
is_empty
(
)
{
continue
;
}
AppendableValue
:
:
Css
{
css
:
CssStringBorrow
:
:
from
(
&
v
)
with_variables
:
false
}
}
}
;
if
shorthand
.
flags
(
)
.
contains
(
PropertyFlags
:
:
SHORTHAND_ALIAS_PROPERTY
)
{
append_serialization
:
:
<
Cloned
<
slice
:
:
Iter
<
_
>
>
_
>
(
dest
&
property
value
importance
&
mut
is_first_serialization
)
?
;
}
else
{
append_serialization
:
:
<
Cloned
<
slice
:
:
Iter
<
_
>
>
_
>
(
dest
&
shorthand
value
importance
&
mut
is_first_serialization
)
?
;
}
for
current_longhand
in
&
current_longhands
{
already_serialized
.
insert
(
current_longhand
.
id
(
)
)
;
}
break
;
}
if
already_serialized
.
contains
(
property
)
{
continue
;
}
use
std
:
:
iter
:
:
Cloned
;
use
std
:
:
slice
;
append_serialization
:
:
<
Cloned
<
slice
:
:
Iter
<
_
>
>
_
>
(
dest
&
property
AppendableValue
:
:
Declaration
(
declaration
)
importance
&
mut
is_first_serialization
)
?
;
already_serialized
.
insert
(
property
)
;
}
Ok
(
(
)
)
}
}
pub
enum
AppendableValue
<
'
a
I
>
where
I
:
Iterator
<
Item
=
&
'
a
PropertyDeclaration
>
{
Declaration
(
&
'
a
PropertyDeclaration
)
DeclarationsForShorthand
(
ShorthandId
I
)
Css
{
css
:
CssStringBorrow
<
'
a
>
with_variables
:
bool
}
}
fn
handle_first_serialization
<
W
>
(
dest
:
&
mut
W
is_first_serialization
:
&
mut
bool
)
-
>
fmt
:
:
Result
where
W
:
Write
{
if
!
*
is_first_serialization
{
dest
.
write_str
(
"
"
)
}
else
{
*
is_first_serialization
=
false
;
Ok
(
(
)
)
}
}
pub
fn
append_declaration_value
<
'
a
I
>
(
dest
:
&
mut
CssStringWriter
appendable_value
:
AppendableValue
<
'
a
I
>
)
-
>
fmt
:
:
Result
where
I
:
Iterator
<
Item
=
&
'
a
PropertyDeclaration
>
{
match
appendable_value
{
AppendableValue
:
:
Css
{
css
.
.
}
=
>
{
css
.
append_to
(
dest
)
}
AppendableValue
:
:
Declaration
(
decl
)
=
>
{
decl
.
to_css
(
dest
)
}
AppendableValue
:
:
DeclarationsForShorthand
(
shorthand
decls
)
=
>
{
shorthand
.
longhands_to_css
(
decls
&
mut
CssWriter
:
:
new
(
dest
)
)
}
}
}
pub
fn
append_serialization
<
'
a
I
N
>
(
dest
:
&
mut
CssStringWriter
property_name
:
&
N
appendable_value
:
AppendableValue
<
'
a
I
>
importance
:
Importance
is_first_serialization
:
&
mut
bool
)
-
>
fmt
:
:
Result
where
I
:
Iterator
<
Item
=
&
'
a
PropertyDeclaration
>
N
:
ToCss
{
handle_first_serialization
(
dest
is_first_serialization
)
?
;
property_name
.
to_css
(
&
mut
CssWriter
:
:
new
(
dest
)
)
?
;
dest
.
write_char
(
'
:
'
)
?
;
match
appendable_value
{
AppendableValue
:
:
Declaration
(
decl
)
=
>
{
if
!
decl
.
value_is_unparsed
(
)
{
dest
.
write_str
(
"
"
)
?
}
}
AppendableValue
:
:
Css
{
with_variables
.
.
}
=
>
{
if
!
with_variables
{
dest
.
write_str
(
"
"
)
?
}
}
AppendableValue
:
:
DeclarationsForShorthand
(
.
.
)
=
>
unreachable
!
(
)
}
append_declaration_value
(
dest
appendable_value
)
?
;
if
importance
.
important
(
)
{
dest
.
write_str
(
"
!
important
"
)
?
;
}
dest
.
write_char
(
'
;
'
)
}
pub
fn
parse_style_attribute
<
R
>
(
input
:
&
str
url_data
:
&
UrlExtraData
error_reporter
:
&
R
quirks_mode
:
QuirksMode
)
-
>
PropertyDeclarationBlock
where
R
:
ParseErrorReporter
{
let
context
=
ParserContext
:
:
new
(
Origin
:
:
Author
url_data
Some
(
CssRuleType
:
:
Style
)
ParsingMode
:
:
DEFAULT
quirks_mode
)
;
let
error_context
=
ParserErrorContext
{
error_reporter
:
error_reporter
}
;
let
mut
input
=
ParserInput
:
:
new
(
input
)
;
parse_property_declaration_list
(
&
context
&
error_context
&
mut
Parser
:
:
new
(
&
mut
input
)
)
}
pub
fn
parse_one_declaration_into
<
R
>
(
declarations
:
&
mut
SourcePropertyDeclaration
id
:
PropertyId
input
:
&
str
url_data
:
&
UrlExtraData
error_reporter
:
&
R
parsing_mode
:
ParsingMode
quirks_mode
:
QuirksMode
)
-
>
Result
<
(
)
(
)
>
where
R
:
ParseErrorReporter
{
let
context
=
ParserContext
:
:
new
(
Origin
:
:
Author
url_data
Some
(
CssRuleType
:
:
Style
)
parsing_mode
quirks_mode
)
;
let
mut
input
=
ParserInput
:
:
new
(
input
)
;
let
mut
parser
=
Parser
:
:
new
(
&
mut
input
)
;
let
start_position
=
parser
.
position
(
)
;
parser
.
parse_entirely
(
|
parser
|
{
let
name
=
id
.
name
(
)
.
into
(
)
;
PropertyDeclaration
:
:
parse_into
(
declarations
id
name
&
context
parser
)
.
map_err
(
|
e
|
e
.
into
(
)
)
}
)
.
map_err
(
|
err
|
{
let
location
=
err
.
location
;
let
error
=
ContextualParseError
:
:
UnsupportedPropertyDeclaration
(
parser
.
slice_from
(
start_position
)
err
)
;
let
error_context
=
ParserErrorContext
{
error_reporter
:
error_reporter
}
;
context
.
log_css_error
(
&
error_context
location
error
)
;
}
)
}
struct
PropertyDeclarationParser
<
'
a
'
b
:
'
a
>
{
context
:
&
'
a
ParserContext
<
'
b
>
declarations
:
&
'
a
mut
SourcePropertyDeclaration
}
impl
<
'
a
'
b
'
i
>
AtRuleParser
<
'
i
>
for
PropertyDeclarationParser
<
'
a
'
b
>
{
type
PreludeNoBlock
=
(
)
;
type
PreludeBlock
=
(
)
;
type
AtRule
=
Importance
;
type
Error
=
StyleParseErrorKind
<
'
i
>
;
}
fn
is_non_mozilla_vendor_identifier
(
name
:
&
str
)
-
>
bool
{
(
name
.
starts_with
(
"
-
"
)
&
&
!
name
.
starts_with
(
"
-
moz
-
"
)
)
|
|
name
.
starts_with
(
"
_
"
)
}
impl
<
'
a
'
b
'
i
>
DeclarationParser
<
'
i
>
for
PropertyDeclarationParser
<
'
a
'
b
>
{
type
Declaration
=
Importance
;
type
Error
=
StyleParseErrorKind
<
'
i
>
;
fn
parse_value
<
'
t
>
(
&
mut
self
name
:
CowRcStr
<
'
i
>
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Importance
ParseError
<
'
i
>
>
{
let
id
=
match
PropertyId
:
:
parse
(
&
name
)
{
Ok
(
id
)
=
>
id
Err
(
.
.
)
=
>
{
return
Err
(
input
.
new_custom_error
(
if
is_non_mozilla_vendor_identifier
(
&
name
)
{
StyleParseErrorKind
:
:
UnknownVendorProperty
}
else
{
StyleParseErrorKind
:
:
UnknownProperty
(
name
)
}
)
)
;
}
}
;
input
.
parse_until_before
(
Delimiter
:
:
Bang
|
input
|
{
PropertyDeclaration
:
:
parse_into
(
self
.
declarations
id
name
self
.
context
input
)
}
)
?
;
let
importance
=
match
input
.
try
(
parse_important
)
{
Ok
(
(
)
)
=
>
Importance
:
:
Important
Err
(
_
)
=
>
Importance
:
:
Normal
}
;
input
.
expect_exhausted
(
)
?
;
Ok
(
importance
)
}
}
pub
fn
parse_property_declaration_list
<
R
>
(
context
:
&
ParserContext
error_context
:
&
ParserErrorContext
<
R
>
input
:
&
mut
Parser
)
-
>
PropertyDeclarationBlock
where
R
:
ParseErrorReporter
{
let
mut
declarations
=
SourcePropertyDeclaration
:
:
new
(
)
;
let
mut
block
=
PropertyDeclarationBlock
:
:
new
(
)
;
let
parser
=
PropertyDeclarationParser
{
context
:
context
declarations
:
&
mut
declarations
}
;
let
mut
iter
=
DeclarationListParser
:
:
new
(
input
parser
)
;
while
let
Some
(
declaration
)
=
iter
.
next
(
)
{
match
declaration
{
Ok
(
importance
)
=
>
{
block
.
extend
(
iter
.
parser
.
declarations
.
drain
(
)
importance
DeclarationSource
:
:
Parsing
)
;
}
Err
(
(
error
slice
)
)
=
>
{
iter
.
parser
.
declarations
.
clear
(
)
;
if
let
ParseErrorKind
:
:
Custom
(
StyleParseErrorKind
:
:
UnknownVendorProperty
)
=
error
.
kind
{
continue
;
}
let
location
=
error
.
location
;
let
error
=
ContextualParseError
:
:
UnsupportedPropertyDeclaration
(
slice
error
)
;
context
.
log_css_error
(
error_context
location
error
)
;
}
}
}
block
}
