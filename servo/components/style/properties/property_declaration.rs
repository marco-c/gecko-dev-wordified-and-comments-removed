use
super
:
:
{
LonghandId
NonCustomPropertyId
PropertyId
ShorthandId
}
;
use
crate
:
:
custom_properties
:
:
Name
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
crate
:
:
gecko_bindings
:
:
structs
:
:
{
nsCSSPropertyID
AnimatedPropertyID
}
;
use
crate
:
:
logical_geometry
:
:
WritingMode
;
use
crate
:
:
values
:
:
serialize_atom_name
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
crate
:
:
Atom
;
use
std
:
:
{
borrow
:
:
Cow
fmt
:
:
{
self
Write
}
}
;
use
style_traits
:
:
{
CssWriter
ToCss
}
;
#
[
derive
(
Clone
Debug
PartialEq
Eq
Hash
)
]
pub
enum
OwnedPropertyDeclarationId
{
Longhand
(
LonghandId
)
Custom
(
Name
)
}
impl
OwnedPropertyDeclarationId
{
#
[
inline
]
pub
fn
is_logical
(
&
self
)
-
>
bool
{
self
.
as_borrowed
(
)
.
is_logical
(
)
}
#
[
inline
]
pub
fn
is_animatable
(
&
self
)
-
>
bool
{
match
self
{
Self
:
:
Longhand
(
id
)
=
>
id
.
is_animatable
(
)
Self
:
:
Custom
(
_
)
=
>
false
}
}
#
[
inline
]
pub
fn
as_borrowed
(
&
self
)
-
>
PropertyDeclarationId
{
match
self
{
Self
:
:
Longhand
(
id
)
=
>
PropertyDeclarationId
:
:
Longhand
(
*
id
)
Self
:
:
Custom
(
name
)
=
>
PropertyDeclarationId
:
:
Custom
(
name
)
}
}
#
[
inline
]
pub
fn
is_transitionable
(
&
self
)
-
>
bool
{
match
self
{
Self
:
:
Longhand
(
longhand
)
=
>
NonCustomPropertyId
:
:
from
(
*
longhand
)
.
is_transitionable
(
)
Self
:
:
Custom
(
_
)
=
>
false
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
inline
]
pub
fn
from_gecko_animated_property_id
(
property
:
&
AnimatedPropertyID
)
-
>
Result
<
Self
(
)
>
{
if
property
.
mID
=
=
nsCSSPropertyID
:
:
eCSSPropertyExtra_variable
{
if
property
.
mCustomName
.
mRawPtr
.
is_null
(
)
{
Err
(
(
)
)
}
else
{
Ok
(
Self
:
:
Custom
(
unsafe
{
Atom
:
:
from_raw
(
property
.
mCustomName
.
mRawPtr
)
}
)
)
}
}
else
if
let
Ok
(
longhand
)
=
LonghandId
:
:
from_nscsspropertyid
(
property
.
mID
)
{
Ok
(
Self
:
:
Longhand
(
longhand
)
)
}
else
{
Err
(
(
)
)
}
}
}
#
[
derive
(
Clone
Copy
Debug
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
MallocSizeOf
)
)
]
pub
enum
PropertyDeclarationId
<
'
a
>
{
Longhand
(
LonghandId
)
Custom
(
&
'
a
Name
)
}
impl
<
'
a
>
ToCss
for
PropertyDeclarationId
<
'
a
>
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
Write
{
match
*
self
{
PropertyDeclarationId
:
:
Longhand
(
id
)
=
>
dest
.
write_str
(
id
.
name
(
)
)
PropertyDeclarationId
:
:
Custom
(
name
)
=
>
{
dest
.
write_str
(
"
-
-
"
)
?
;
serialize_atom_name
(
name
dest
)
}
}
}
}
impl
<
'
a
>
PropertyDeclarationId
<
'
a
>
{
pub
fn
to_owned
(
&
self
)
-
>
OwnedPropertyDeclarationId
{
match
self
{
PropertyDeclarationId
:
:
Longhand
(
id
)
=
>
OwnedPropertyDeclarationId
:
:
Longhand
(
*
id
)
PropertyDeclarationId
:
:
Custom
(
name
)
=
>
{
OwnedPropertyDeclarationId
:
:
Custom
(
(
*
name
)
.
clone
(
)
)
}
}
}
pub
fn
is_or_is_longhand_of
(
&
self
other
:
&
PropertyId
)
-
>
bool
{
match
*
self
{
PropertyDeclarationId
:
:
Longhand
(
id
)
=
>
match
*
other
{
PropertyId
:
:
NonCustom
(
non_custom_id
)
=
>
id
.
is_or_is_longhand_of
(
non_custom_id
)
PropertyId
:
:
Custom
(
_
)
=
>
false
}
PropertyDeclarationId
:
:
Custom
(
name
)
=
>
{
matches
!
(
*
other
PropertyId
:
:
Custom
(
ref
other_name
)
if
name
=
=
other_name
)
}
}
}
pub
fn
is_longhand_of
(
&
self
shorthand
:
ShorthandId
)
-
>
bool
{
match
*
self
{
PropertyDeclarationId
:
:
Longhand
(
ref
id
)
=
>
id
.
is_longhand_of
(
shorthand
)
_
=
>
false
}
}
pub
fn
name
(
&
self
)
-
>
Cow
<
'
static
str
>
{
match
*
self
{
PropertyDeclarationId
:
:
Longhand
(
id
)
=
>
id
.
name
(
)
.
into
(
)
PropertyDeclarationId
:
:
Custom
(
name
)
=
>
{
let
mut
s
=
String
:
:
new
(
)
;
write
!
(
&
mut
s
"
-
-
{
}
"
name
)
.
unwrap
(
)
;
s
.
into
(
)
}
}
}
#
[
inline
]
pub
fn
as_longhand
(
&
self
)
-
>
Option
<
LonghandId
>
{
match
*
self
{
PropertyDeclarationId
:
:
Longhand
(
id
)
=
>
Some
(
id
)
_
=
>
None
}
}
#
[
inline
]
pub
fn
is_logical
(
&
self
)
-
>
bool
{
match
self
{
PropertyDeclarationId
:
:
Longhand
(
id
)
=
>
id
.
is_logical
(
)
PropertyDeclarationId
:
:
Custom
(
_
)
=
>
false
}
}
#
[
inline
]
pub
fn
to_physical
(
&
self
wm
:
WritingMode
)
-
>
Self
{
match
self
{
PropertyDeclarationId
:
:
Longhand
(
id
)
=
>
{
PropertyDeclarationId
:
:
Longhand
(
id
.
to_physical
(
wm
)
)
}
PropertyDeclarationId
:
:
Custom
(
_
)
=
>
self
.
clone
(
)
}
}
#
[
inline
]
pub
fn
is_animatable
(
&
self
)
-
>
bool
{
match
self
{
PropertyDeclarationId
:
:
Longhand
(
id
)
=
>
id
.
is_animatable
(
)
PropertyDeclarationId
:
:
Custom
(
_
)
=
>
false
}
}
#
[
inline
]
pub
fn
is_discrete_animatable
(
&
self
)
-
>
bool
{
match
self
{
Self
:
:
Longhand
(
longhand
)
=
>
longhand
.
is_discrete_animatable
(
)
Self
:
:
Custom
(
_
)
=
>
false
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
inline
]
pub
fn
to_nscsspropertyid
(
self
)
-
>
nsCSSPropertyID
{
match
self
{
PropertyDeclarationId
:
:
Longhand
(
id
)
=
>
id
.
to_nscsspropertyid
(
)
PropertyDeclarationId
:
:
Custom
(
_
)
=
>
nsCSSPropertyID
:
:
eCSSPropertyExtra_variable
}
}
}
