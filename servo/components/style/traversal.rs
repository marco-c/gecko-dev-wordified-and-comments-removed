#
!
[
deny
(
missing_docs
)
]
use
atomic_refcell
:
:
{
AtomicRefCell
AtomicRefMut
}
;
use
context
:
:
{
SharedStyleContext
StyleContext
ThreadLocalStyleContext
}
;
use
data
:
:
{
ElementData
ElementStyles
RestyleKind
StoredRestyleHint
}
;
use
dom
:
:
{
NodeInfo
TElement
TNode
}
;
use
matching
:
:
{
MatchMethods
StyleSharingResult
}
;
use
restyle_hints
:
:
{
RESTYLE_DESCENDANTS
RESTYLE_SELF
}
;
use
selector_parser
:
:
RestyleDamage
;
use
servo_config
:
:
opts
;
use
std
:
:
borrow
:
:
BorrowMut
;
use
std
:
:
mem
;
use
stylist
:
:
Stylist
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
PerLevelTraversalData
{
pub
current_dom_depth
:
Option
<
usize
>
}
pub
struct
PreTraverseToken
{
traverse
:
bool
unstyled_children_only
:
bool
}
impl
PreTraverseToken
{
pub
fn
should_traverse
(
&
self
)
-
>
bool
{
self
.
traverse
}
pub
fn
traverse_unstyled_children_only
(
&
self
)
-
>
bool
{
self
.
unstyled_children_only
}
}
pub
enum
LogBehavior
{
MayLog
DontLog
}
use
self
:
:
LogBehavior
:
:
*
;
impl
LogBehavior
{
fn
allow
(
&
self
)
-
>
bool
{
matches
!
(
*
self
MayLog
)
}
}
#
[
derive
(
Debug
Copy
Clone
)
]
pub
enum
TraversalDriver
{
Parallel
Sequential
}
impl
TraversalDriver
{
#
[
inline
]
pub
fn
is_parallel
(
&
self
)
-
>
bool
{
matches
!
(
*
self
TraversalDriver
:
:
Parallel
)
}
}
pub
trait
DomTraversal
<
E
:
TElement
>
:
Sync
{
type
ThreadLocalContext
:
Send
+
BorrowMut
<
ThreadLocalStyleContext
<
E
>
>
;
fn
process_preorder
(
&
self
data
:
&
mut
PerLevelTraversalData
thread_local
:
&
mut
Self
:
:
ThreadLocalContext
node
:
E
:
:
ConcreteNode
)
;
fn
process_postorder
(
&
self
thread_local
:
&
mut
Self
:
:
ThreadLocalContext
node
:
E
:
:
ConcreteNode
)
;
fn
needs_postorder_traversal
(
)
-
>
bool
{
true
}
fn
pre_traverse
(
root
:
E
stylist
:
&
Stylist
unstyled_children_only
:
bool
)
-
>
PreTraverseToken
{
if
unstyled_children_only
{
return
PreTraverseToken
{
traverse
:
true
unstyled_children_only
:
true
}
;
}
if
let
Some
(
mut
data
)
=
root
.
mutate_data
(
)
{
if
let
Some
(
r
)
=
data
.
get_restyle_mut
(
)
{
debug_assert
!
(
root
.
next_sibling_element
(
)
.
is_none
(
)
)
;
let
_later_siblings
=
r
.
expand_snapshot
(
root
stylist
)
;
}
}
PreTraverseToken
{
traverse
:
Self
:
:
node_needs_traversal
(
root
.
as_node
(
)
)
unstyled_children_only
:
false
}
}
fn
text_node_needs_traversal
(
node
:
E
:
:
ConcreteNode
)
-
>
bool
{
debug_assert
!
(
node
.
is_text_node
(
)
)
;
false
}
fn
node_needs_traversal
(
node
:
E
:
:
ConcreteNode
)
-
>
bool
{
if
cfg
!
(
feature
=
"
servo
"
)
&
&
opts
:
:
get
(
)
.
nonincremental_layout
{
return
true
;
}
match
node
.
as_element
(
)
{
None
=
>
Self
:
:
text_node_needs_traversal
(
node
)
Some
(
el
)
=
>
{
if
el
.
has_dirty_descendants
(
)
{
return
true
;
}
let
data
=
match
el
.
borrow_data
(
)
{
Some
(
d
)
=
>
d
None
=
>
return
true
}
;
if
!
data
.
has_styles
(
)
{
return
true
;
}
if
let
Some
(
r
)
=
data
.
get_restyle
(
)
{
if
!
r
.
hint
.
is_empty
(
)
|
|
r
.
recascade
{
return
true
;
}
}
if
cfg
!
(
feature
=
"
servo
"
)
&
&
data
.
get_restyle
(
)
.
map_or
(
false
|
r
|
r
.
damage
!
=
RestyleDamage
:
:
empty
(
)
)
{
return
true
;
}
false
}
}
}
fn
should_traverse_children
(
&
self
thread_local
:
&
mut
ThreadLocalStyleContext
<
E
>
parent
:
E
parent_data
:
&
ElementData
log
:
LogBehavior
)
-
>
bool
{
debug_assert
!
(
cfg
!
(
feature
=
"
gecko
"
)
|
|
parent_data
.
has_current_styles
(
)
)
;
if
parent_data
.
styles
(
)
.
is_display_none
(
)
{
if
log
.
allow
(
)
{
debug
!
(
"
Parent
{
:
?
}
is
display
:
none
culling
traversal
"
parent
)
;
}
return
false
;
}
if
cfg
!
(
feature
=
"
gecko
"
)
&
&
thread_local
.
is_initial_style
(
)
&
&
parent_data
.
styles
(
)
.
primary
.
values
.
has_moz_binding
(
)
{
if
log
.
allow
(
)
{
debug
!
(
"
Parent
{
:
?
}
has
XBL
binding
deferring
traversal
"
parent
)
;
}
return
false
;
}
return
true
;
}
fn
traverse_children
<
F
>
(
&
self
thread_local
:
&
mut
Self
:
:
ThreadLocalContext
parent
:
E
mut
f
:
F
)
where
F
:
FnMut
(
&
mut
Self
:
:
ThreadLocalContext
E
:
:
ConcreteNode
)
{
let
should_traverse
=
self
.
should_traverse_children
(
thread_local
.
borrow_mut
(
)
parent
&
parent
.
borrow_data
(
)
.
unwrap
(
)
MayLog
)
;
thread_local
.
borrow_mut
(
)
.
end_element
(
parent
)
;
if
!
should_traverse
{
return
;
}
for
kid
in
parent
.
as_node
(
)
.
children
(
)
{
if
Self
:
:
node_needs_traversal
(
kid
)
{
let
el
=
kid
.
as_element
(
)
;
if
el
.
as_ref
(
)
.
and_then
(
|
el
|
el
.
borrow_data
(
)
)
.
map_or
(
false
|
d
|
d
.
has_styles
(
)
)
{
unsafe
{
parent
.
set_dirty_descendants
(
)
;
}
}
f
(
thread_local
kid
)
;
}
}
}
unsafe
fn
ensure_element_data
(
element
:
&
E
)
-
>
&
AtomicRefCell
<
ElementData
>
;
unsafe
fn
clear_element_data
(
element
:
&
E
)
;
fn
shared_context
(
&
self
)
-
>
&
SharedStyleContext
;
fn
create_thread_local_context
(
&
self
)
-
>
Self
:
:
ThreadLocalContext
;
fn
is_parallel
(
&
self
)
-
>
bool
;
}
fn
resolve_style_internal
<
E
F
>
(
context
:
&
StyleContext
<
E
>
element
:
E
ensure_data
:
&
F
)
-
>
Option
<
E
>
where
E
:
TElement
F
:
Fn
(
E
)
{
ensure_data
(
element
)
;
let
mut
data
=
element
.
mutate_data
(
)
.
unwrap
(
)
;
let
mut
display_none_root
=
None
;
if
data
.
get_styles
(
)
.
is_none
(
)
{
if
let
Some
(
parent
)
=
element
.
parent_element
(
)
{
display_none_root
=
resolve_style_internal
(
context
parent
ensure_data
)
;
}
let
match_results
=
element
.
match_element
(
context
None
)
;
let
shareable
=
match_results
.
primary_is_shareable
(
)
;
element
.
cascade_node
(
context
&
mut
data
element
.
parent_element
(
)
match_results
.
primary
match_results
.
per_pseudo
shareable
)
;
unsafe
{
element
.
set_dirty_descendants
(
)
}
;
}
if
display_none_root
.
is_none
(
)
&
&
data
.
styles
(
)
.
is_display_none
(
)
{
display_none_root
=
Some
(
element
)
;
}
return
display_none_root
}
pub
fn
resolve_style
<
E
F
G
H
>
(
context
:
&
StyleContext
<
E
>
element
:
E
ensure_data
:
&
F
clear_data
:
&
G
callback
:
H
)
where
E
:
TElement
F
:
Fn
(
E
)
G
:
Fn
(
E
)
H
:
FnOnce
(
&
ElementStyles
)
{
let
display_none_root
=
resolve_style_internal
(
context
element
ensure_data
)
;
callback
(
element
.
borrow_data
(
)
.
unwrap
(
)
.
styles
(
)
)
;
let
in_doc
=
element
.
as_node
(
)
.
is_in_doc
(
)
;
if
!
in_doc
|
|
display_none_root
.
is_some
(
)
{
let
mut
curr
=
element
;
loop
{
unsafe
{
curr
.
unset_dirty_descendants
(
)
;
}
if
in_doc
&
&
curr
=
=
display_none_root
.
unwrap
(
)
{
break
;
}
clear_data
(
curr
)
;
curr
=
match
curr
.
parent_element
(
)
{
Some
(
parent
)
=
>
parent
None
=
>
break
}
;
}
}
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
pub
fn
recalc_style_at
<
E
D
>
(
traversal
:
&
D
traversal_data
:
&
mut
PerLevelTraversalData
context
:
&
mut
StyleContext
<
E
>
element
:
E
mut
data
:
&
mut
AtomicRefMut
<
ElementData
>
)
where
E
:
TElement
D
:
DomTraversal
<
E
>
{
context
.
thread_local
.
begin_element
(
element
&
data
)
;
context
.
thread_local
.
statistics
.
elements_traversed
+
=
1
;
debug_assert
!
(
data
.
get_restyle
(
)
.
map_or
(
true
|
r
|
r
.
snapshot
.
is_none
(
)
)
"
Snapshots
should
be
expanded
by
the
caller
"
)
;
let
compute_self
=
!
data
.
has_current_styles
(
)
;
let
mut
inherited_style_changed
=
false
;
debug
!
(
"
recalc_style_at
:
{
:
?
}
(
compute_self
=
{
:
?
}
dirty_descendants
=
{
:
?
}
data
=
{
:
?
}
)
"
element
compute_self
element
.
has_dirty_descendants
(
)
data
)
;
if
compute_self
{
inherited_style_changed
=
compute_style
(
traversal
traversal_data
context
element
&
mut
data
)
;
}
let
empty_hint
=
StoredRestyleHint
:
:
empty
(
)
;
let
propagated_hint
=
match
data
.
get_restyle_mut
(
)
{
None
=
>
empty_hint
Some
(
r
)
=
>
{
r
.
recascade
=
false
;
mem
:
:
replace
(
&
mut
r
.
hint
empty_hint
)
.
propagate
(
)
}
}
;
debug_assert
!
(
data
.
has_current_styles
(
)
)
;
trace
!
(
"
propagated_hint
=
{
:
?
}
inherited_style_changed
=
{
:
?
}
"
propagated_hint
inherited_style_changed
)
;
if
traversal
.
should_traverse_children
(
&
mut
context
.
thread_local
element
&
data
DontLog
)
&
&
(
element
.
has_dirty_descendants
(
)
|
|
!
propagated_hint
.
is_empty
(
)
|
|
inherited_style_changed
)
{
preprocess_children
(
traversal
element
propagated_hint
inherited_style_changed
)
;
}
if
data
.
styles
(
)
.
is_display_none
(
)
{
unsafe
{
element
.
unset_dirty_descendants
(
)
;
}
}
}
fn
compute_style
<
E
D
>
(
_traversal
:
&
D
traversal_data
:
&
mut
PerLevelTraversalData
context
:
&
mut
StyleContext
<
E
>
element
:
E
mut
data
:
&
mut
AtomicRefMut
<
ElementData
>
)
-
>
bool
where
E
:
TElement
D
:
DomTraversal
<
E
>
{
context
.
thread_local
.
statistics
.
elements_styled
+
=
1
;
let
shared_context
=
context
.
shared
;
let
cascade_input
=
match
data
.
restyle_kind
(
)
{
RestyleKind
:
:
MatchAndCascade
=
>
{
let
sharing_result
=
unsafe
{
element
.
share_style_if_possible
(
&
mut
context
.
thread_local
.
style_sharing_candidate_cache
shared_context
&
mut
data
)
}
;
match
sharing_result
{
StyleSharingResult
:
:
StyleWasShared
(
index
)
=
>
{
context
.
thread_local
.
statistics
.
styles_shared
+
=
1
;
context
.
thread_local
.
style_sharing_candidate_cache
.
touch
(
index
)
;
None
}
StyleSharingResult
:
:
CannotShare
=
>
{
let
dom_depth
=
context
.
thread_local
.
bloom_filter
.
insert_parents_recovering
(
element
traversal_data
.
current_dom_depth
)
;
traversal_data
.
current_dom_depth
=
Some
(
dom_depth
)
;
context
.
thread_local
.
bloom_filter
.
assert_complete
(
element
)
;
context
.
thread_local
.
statistics
.
elements_matched
+
=
1
;
let
filter
=
context
.
thread_local
.
bloom_filter
.
filter
(
)
;
Some
(
element
.
match_element
(
context
Some
(
filter
)
)
)
}
}
}
RestyleKind
:
:
CascadeWithReplacements
(
hint
)
=
>
{
Some
(
element
.
cascade_with_replacements
(
hint
context
&
mut
data
)
)
}
RestyleKind
:
:
CascadeOnly
=
>
{
Some
(
element
.
match_results_from_current_style
(
&
*
data
)
)
}
}
;
if
let
Some
(
match_results
)
=
cascade_input
{
let
shareable
=
match_results
.
primary_is_shareable
(
)
;
unsafe
{
element
.
cascade_node
(
context
&
mut
data
element
.
parent_element
(
)
match_results
.
primary
match_results
.
per_pseudo
shareable
)
;
}
if
shareable
{
context
.
thread_local
.
style_sharing_candidate_cache
.
insert_if_possible
(
&
element
&
data
.
styles
(
)
.
primary
.
values
match_results
.
relations
)
;
}
}
let
display_none
=
data
.
styles
(
)
.
is_display_none
(
)
;
if
display_none
{
debug
!
(
"
New
element
style
is
display
:
none
-
clearing
data
from
descendants
.
"
)
;
clear_descendant_data
(
element
&
|
e
|
unsafe
{
D
:
:
clear_element_data
(
&
e
)
}
)
;
}
let
inherited_styles_changed
=
true
;
inherited_styles_changed
}
fn
preprocess_children
<
E
D
>
(
traversal
:
&
D
element
:
E
mut
propagated_hint
:
StoredRestyleHint
parent_inherited_style_changed
:
bool
)
where
E
:
TElement
D
:
DomTraversal
<
E
>
{
for
child
in
element
.
as_node
(
)
.
children
(
)
{
let
child
=
match
child
.
as_element
(
)
{
Some
(
el
)
=
>
el
None
=
>
continue
}
;
let
mut
child_data
=
unsafe
{
D
:
:
ensure_element_data
(
&
child
)
.
borrow_mut
(
)
}
;
if
!
child_data
.
has_styles
(
)
{
continue
;
}
if
propagated_hint
.
is_empty
(
)
&
&
!
parent_inherited_style_changed
&
&
!
child_data
.
has_restyle
(
)
{
continue
;
}
let
mut
restyle_data
=
child_data
.
ensure_restyle
(
)
;
if
!
propagated_hint
.
is_empty
(
)
{
restyle_data
.
hint
.
insert
(
&
propagated_hint
)
;
}
let
stylist
=
&
traversal
.
shared_context
(
)
.
stylist
;
let
later_siblings
=
restyle_data
.
expand_snapshot
(
child
stylist
)
;
if
later_siblings
{
propagated_hint
.
insert
(
&
(
RESTYLE_SELF
|
RESTYLE_DESCENDANTS
)
.
into
(
)
)
;
}
if
parent_inherited_style_changed
{
restyle_data
.
recascade
=
true
;
}
}
}
pub
fn
clear_descendant_data
<
E
:
TElement
F
:
Fn
(
E
)
>
(
el
:
E
clear_data
:
&
F
)
{
for
kid
in
el
.
as_node
(
)
.
children
(
)
{
if
let
Some
(
kid
)
=
kid
.
as_element
(
)
{
if
kid
.
get_data
(
)
.
is_some
(
)
{
clear_data
(
kid
)
;
clear_descendant_data
(
kid
clear_data
)
;
}
}
}
unsafe
{
el
.
unset_dirty_descendants
(
)
;
}
}
