use
context
:
:
{
ElementCascadeInputs
StyleContext
SharedStyleContext
}
;
use
data
:
:
{
ElementData
ElementStyles
}
;
use
dom
:
:
{
NodeInfo
OpaqueNode
TElement
TNode
}
;
use
invalidation
:
:
element
:
:
restyle_hints
:
:
{
RECASCADE_SELF
RECASCADE_DESCENDANTS
RestyleHint
}
;
use
matching
:
:
{
ChildCascadeRequirement
MatchMethods
}
;
use
sharing
:
:
StyleSharingTarget
;
use
smallvec
:
:
SmallVec
;
use
style_resolver
:
:
StyleResolverForElement
;
use
stylist
:
:
RuleInclusion
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
PerLevelTraversalData
{
pub
current_dom_depth
:
usize
}
bitflags
!
{
/
/
/
Flags
that
control
the
traversal
process
.
pub
flags
TraversalFlags
:
u8
{
/
/
/
Traverse
only
unstyled
children
.
const
UNSTYLED_CHILDREN_ONLY
=
0x01
/
/
/
Traverse
only
elements
for
animation
restyles
.
const
ANIMATION_ONLY
=
0x02
/
/
/
Traverse
without
generating
any
change
hints
.
const
FOR_RECONSTRUCT
=
0x04
/
/
/
Traverse
triggered
by
CSS
rule
changes
.
/
/
/
/
/
/
Traverse
and
update
all
elements
with
CSS
animations
since
/
/
/
keyframes
rules
may
have
changed
const
FOR_CSS_RULE_CHANGES
=
0x08
}
}
impl
TraversalFlags
{
pub
fn
for_animation_only
(
&
self
)
-
>
bool
{
self
.
contains
(
ANIMATION_ONLY
)
}
pub
fn
for_unstyled_children_only
(
&
self
)
-
>
bool
{
self
.
contains
(
UNSTYLED_CHILDREN_ONLY
)
}
pub
fn
for_reconstruct
(
&
self
)
-
>
bool
{
self
.
contains
(
FOR_RECONSTRUCT
)
}
pub
fn
for_css_rule_changes
(
&
self
)
-
>
bool
{
self
.
contains
(
FOR_CSS_RULE_CHANGES
)
}
}
pub
struct
PreTraverseToken
{
traverse
:
bool
unstyled_children_only
:
bool
}
impl
PreTraverseToken
{
pub
fn
should_traverse
(
&
self
)
-
>
bool
{
self
.
traverse
}
pub
fn
traverse_unstyled_children_only
(
&
self
)
-
>
bool
{
self
.
unstyled_children_only
}
}
#
[
derive
(
Debug
Copy
Clone
)
]
pub
enum
TraversalDriver
{
Parallel
Sequential
}
impl
TraversalDriver
{
#
[
inline
]
pub
fn
is_parallel
(
&
self
)
-
>
bool
{
matches
!
(
*
self
TraversalDriver
:
:
Parallel
)
}
}
#
[
cfg
(
feature
=
"
servo
"
)
]
fn
is_servo_nonincremental_layout
(
)
-
>
bool
{
use
servo_config
:
:
opts
;
opts
:
:
get
(
)
.
nonincremental_layout
}
#
[
cfg
(
not
(
feature
=
"
servo
"
)
)
]
fn
is_servo_nonincremental_layout
(
)
-
>
bool
{
false
}
pub
trait
DomTraversal
<
E
:
TElement
>
:
Sync
{
fn
process_preorder
<
F
>
(
&
self
data
:
&
PerLevelTraversalData
context
:
&
mut
StyleContext
<
E
>
node
:
E
:
:
ConcreteNode
note_child
:
F
)
where
F
:
FnMut
(
E
:
:
ConcreteNode
)
;
fn
process_postorder
(
&
self
contect
:
&
mut
StyleContext
<
E
>
node
:
E
:
:
ConcreteNode
)
;
fn
needs_postorder_traversal
(
)
-
>
bool
{
true
}
fn
handle_postorder_traversal
(
&
self
context
:
&
mut
StyleContext
<
E
>
root
:
OpaqueNode
mut
node
:
E
:
:
ConcreteNode
children_to_process
:
isize
)
{
if
!
Self
:
:
needs_postorder_traversal
(
)
{
return
;
}
if
children_to_process
=
=
0
{
loop
{
self
.
process_postorder
(
context
node
)
;
if
node
.
opaque
(
)
=
=
root
{
break
;
}
let
parent
=
node
.
traversal_parent
(
)
.
unwrap
(
)
;
let
remaining
=
parent
.
did_process_child
(
)
;
if
remaining
!
=
0
{
break
}
node
=
parent
.
as_node
(
)
;
}
}
else
{
node
.
as_element
(
)
.
unwrap
(
)
.
store_children_to_process
(
children_to_process
)
;
}
}
fn
pre_traverse
(
root
:
E
shared_context
:
&
SharedStyleContext
traversal_flags
:
TraversalFlags
)
-
>
PreTraverseToken
{
debug_assert
!
(
!
(
traversal_flags
.
for_reconstruct
(
)
&
&
traversal_flags
.
for_unstyled_children_only
(
)
)
"
must
not
specify
FOR_RECONSTRUCT
in
combination
with
\
UNSTYLED_CHILDREN_ONLY
"
)
;
if
traversal_flags
.
for_unstyled_children_only
(
)
{
if
root
.
borrow_data
(
)
.
map_or
(
true
|
d
|
d
.
has_styles
(
)
&
&
d
.
styles
.
is_display_none
(
)
)
{
return
PreTraverseToken
{
traverse
:
false
unstyled_children_only
:
false
}
;
}
return
PreTraverseToken
{
traverse
:
true
unstyled_children_only
:
true
}
;
}
let
flags
=
shared_context
.
traversal_flags
;
let
data
=
root
.
mutate_data
(
)
;
let
should_traverse
=
if
data
.
as_ref
(
)
.
map_or
(
true
|
d
|
!
d
.
has_styles
(
)
)
{
!
flags
.
for_animation_only
(
)
}
else
{
let
mut
data
=
data
.
unwrap
(
)
;
if
!
flags
.
for_animation_only
(
)
{
data
.
invalidate_style_if_needed
(
root
shared_context
)
;
}
let
parent
=
root
.
traversal_parent
(
)
;
let
parent_data
=
match
parent
{
None
=
>
None
Some
(
ref
x
)
=
>
Some
(
x
.
borrow_data
(
)
.
unwrap
(
)
)
}
;
let
parent_data_borrow
=
parent_data
.
as_ref
(
)
.
map
(
|
x
|
&
*
*
x
)
;
Self
:
:
element_needs_traversal
(
root
flags
&
*
data
parent_data_borrow
)
}
;
PreTraverseToken
{
traverse
:
should_traverse
unstyled_children_only
:
false
}
}
fn
text_node_needs_traversal
(
node
:
E
:
:
ConcreteNode
_parent_data
:
&
ElementData
)
-
>
bool
{
debug_assert
!
(
node
.
is_text_node
(
)
)
;
false
}
fn
element_needs_traversal
(
el
:
E
traversal_flags
:
TraversalFlags
data
:
&
ElementData
parent_data
:
Option
<
&
ElementData
>
)
-
>
bool
{
debug_assert
!
(
data
.
has_styles
(
)
"
Caller
should
check
this
"
)
;
if
is_servo_nonincremental_layout
(
)
{
return
true
;
}
if
traversal_flags
.
for_reconstruct
(
)
{
return
true
;
}
if
el
.
is_native_anonymous
(
)
{
if
let
Some
(
parent_data
)
=
parent_data
{
let
going_to_reframe
=
parent_data
.
restyle
.
reconstructed_self_or_ancestor
(
)
;
let
mut
is_before_or_after_pseudo
=
false
;
if
let
Some
(
pseudo
)
=
el
.
implemented_pseudo_element
(
)
{
if
pseudo
.
is_before_or_after
(
)
{
is_before_or_after_pseudo
=
true
;
let
still_match
=
parent_data
.
styles
.
pseudos
.
get
(
&
pseudo
)
.
is_some
(
)
;
if
!
still_match
{
debug_assert
!
(
going_to_reframe
"
We
'
re
removing
a
pseudo
so
we
\
should
reframe
!
"
)
;
return
false
;
}
}
}
if
going_to_reframe
&
&
!
is_before_or_after_pseudo
{
debug
!
(
"
Element
{
:
?
}
is
in
doomed
NAC
subtree
\
culling
traversal
"
el
)
;
return
false
;
}
}
}
if
traversal_flags
.
for_animation_only
(
)
{
return
el
.
has_animation_only_dirty_descendants
(
)
|
|
data
.
restyle
.
hint
.
has_animation_hint_or_recascade
(
)
;
}
if
el
.
has_dirty_descendants
(
)
{
return
true
;
}
if
!
data
.
restyle
.
hint
.
is_empty
(
)
{
return
true
;
}
if
(
cfg
!
(
feature
=
"
servo
"
)
|
|
traversal_flags
.
for_reconstruct
(
)
)
&
&
!
data
.
restyle
.
damage
.
is_empty
(
)
{
return
true
;
}
trace
!
(
"
{
:
?
}
doesn
'
t
need
traversal
"
el
)
;
false
}
fn
should_cull_subtree
(
&
self
context
:
&
mut
StyleContext
<
E
>
parent
:
E
parent_data
:
&
ElementData
)
-
>
bool
{
debug_assert
!
(
cfg
!
(
feature
=
"
gecko
"
)
|
|
parent
.
has_current_styles
(
parent_data
)
)
;
if
parent_data
.
styles
.
is_display_none
(
)
{
debug
!
(
"
Parent
{
:
?
}
is
display
:
none
culling
traversal
"
parent
)
;
return
true
;
}
if
cfg
!
(
feature
=
"
gecko
"
)
&
&
context
.
thread_local
.
is_initial_style
(
)
&
&
parent_data
.
styles
.
primary
(
)
.
has_moz_binding
(
)
{
debug
!
(
"
Parent
{
:
?
}
has
XBL
binding
deferring
traversal
"
parent
)
;
return
true
;
}
return
false
;
}
fn
shared_context
(
&
self
)
-
>
&
SharedStyleContext
;
fn
is_parallel
(
&
self
)
-
>
bool
;
}
pub
fn
resolve_style
<
E
>
(
context
:
&
mut
StyleContext
<
E
>
element
:
E
rule_inclusion
:
RuleInclusion
)
-
>
ElementStyles
where
E
:
TElement
{
use
style_resolver
:
:
StyleResolverForElement
;
debug_assert
!
(
rule_inclusion
=
=
RuleInclusion
:
:
DefaultOnly
|
|
element
.
borrow_data
(
)
.
map_or
(
true
|
d
|
!
d
.
has_styles
(
)
)
"
Why
are
we
here
?
"
)
;
let
mut
ancestors_requiring_style_resolution
=
SmallVec
:
:
<
[
E
;
16
]
>
:
:
new
(
)
;
context
.
thread_local
.
bloom_filter
.
clear
(
)
;
let
mut
style
=
None
;
let
mut
ancestor
=
element
.
traversal_parent
(
)
;
while
let
Some
(
current
)
=
ancestor
{
if
rule_inclusion
=
=
RuleInclusion
:
:
All
{
if
let
Some
(
data
)
=
current
.
borrow_data
(
)
{
if
let
Some
(
ancestor_style
)
=
data
.
styles
.
get_primary
(
)
{
style
=
Some
(
ancestor_style
.
clone
(
)
)
;
break
;
}
}
}
ancestors_requiring_style_resolution
.
push
(
current
)
;
ancestor
=
current
.
traversal_parent
(
)
;
}
if
let
Some
(
ancestor
)
=
ancestor
{
context
.
thread_local
.
bloom_filter
.
rebuild
(
ancestor
)
;
context
.
thread_local
.
bloom_filter
.
push
(
ancestor
)
;
}
let
mut
layout_parent_style
=
style
.
clone
(
)
;
while
let
Some
(
style
)
=
layout_parent_style
.
take
(
)
{
if
!
style
.
is_display_contents
(
)
{
layout_parent_style
=
Some
(
style
)
;
break
;
}
ancestor
=
ancestor
.
unwrap
(
)
.
traversal_parent
(
)
;
layout_parent_style
=
ancestor
.
map
(
|
a
|
{
a
.
borrow_data
(
)
.
unwrap
(
)
.
styles
.
primary
(
)
.
clone
(
)
}
)
;
}
for
ancestor
in
ancestors_requiring_style_resolution
.
iter
(
)
.
rev
(
)
{
context
.
thread_local
.
bloom_filter
.
assert_complete
(
*
ancestor
)
;
let
primary_style
=
StyleResolverForElement
:
:
new
(
*
ancestor
context
rule_inclusion
)
.
resolve_primary_style
(
style
.
as_ref
(
)
.
map
(
|
s
|
&
*
*
s
)
layout_parent_style
.
as_ref
(
)
.
map
(
|
s
|
&
*
*
*
s
)
)
;
let
is_display_contents
=
primary_style
.
style
.
is_display_contents
(
)
;
style
=
Some
(
primary_style
.
style
)
;
if
!
is_display_contents
{
layout_parent_style
=
style
.
clone
(
)
;
}
context
.
thread_local
.
bloom_filter
.
push
(
*
ancestor
)
;
}
context
.
thread_local
.
bloom_filter
.
assert_complete
(
element
)
;
StyleResolverForElement
:
:
new
(
element
context
rule_inclusion
)
.
resolve_style
(
style
.
as_ref
(
)
.
map
(
|
s
|
&
*
*
s
)
layout_parent_style
.
as_ref
(
)
.
map
(
|
s
|
&
*
*
*
s
)
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
pub
fn
recalc_style_at
<
E
D
F
>
(
traversal
:
&
D
traversal_data
:
&
PerLevelTraversalData
context
:
&
mut
StyleContext
<
E
>
element
:
E
data
:
&
mut
ElementData
note_child
:
F
)
where
E
:
TElement
D
:
DomTraversal
<
E
>
F
:
FnMut
(
E
:
:
ConcreteNode
)
{
context
.
thread_local
.
begin_element
(
element
data
)
;
context
.
thread_local
.
statistics
.
elements_traversed
+
=
1
;
debug_assert
!
(
context
.
shared
.
traversal_flags
.
for_animation_only
(
)
|
|
!
element
.
has_snapshot
(
)
|
|
element
.
handled_snapshot
(
)
"
Should
'
ve
handled
snapshots
here
already
"
)
;
let
compute_self
=
!
element
.
has_current_styles_for_traversal
(
data
context
.
shared
.
traversal_flags
)
;
let
mut
hint
=
RestyleHint
:
:
empty
(
)
;
debug
!
(
"
recalc_style_at
:
{
:
?
}
(
compute_self
=
{
:
?
}
\
dirty_descendants
=
{
:
?
}
data
=
{
:
?
}
)
"
element
compute_self
element
.
has_dirty_descendants
(
)
data
)
;
if
compute_self
{
match
compute_style
(
traversal_data
context
element
data
)
{
ChildCascadeRequirement
:
:
MustCascadeChildren
=
>
{
hint
|
=
RECASCADE_SELF
;
}
ChildCascadeRequirement
:
:
MustCascadeDescendants
=
>
{
hint
|
=
RECASCADE_SELF
|
RECASCADE_DESCENDANTS
;
}
ChildCascadeRequirement
:
:
CanSkipCascade
=
>
{
}
}
;
if
element
.
is_native_anonymous
(
)
{
hint
|
=
RECASCADE_SELF
;
}
if
data
.
styles
.
is_display_none
(
)
{
debug
!
(
"
{
:
?
}
style
is
display
:
none
-
clearing
data
from
descendants
.
"
element
)
;
clear_descendant_data
(
element
)
}
}
let
mut
propagated_hint
=
{
debug_assert
!
(
context
.
shared
.
traversal_flags
.
for_animation_only
(
)
|
|
!
data
.
restyle
.
hint
.
has_animation_hint
(
)
"
animation
restyle
hint
should
be
handled
during
\
animation
-
only
restyles
"
)
;
data
.
restyle
.
hint
.
propagate
(
&
context
.
shared
.
traversal_flags
)
}
;
propagated_hint
.
insert
(
hint
)
;
trace
!
(
"
propagated_hint
=
{
:
?
}
\
is_display_none
=
{
:
?
}
implementing_pseudo
=
{
:
?
}
"
propagated_hint
data
.
styles
.
is_display_none
(
)
element
.
implemented_pseudo_element
(
)
)
;
debug_assert
!
(
element
.
has_current_styles_for_traversal
(
data
context
.
shared
.
traversal_flags
)
"
Should
have
computed
style
or
haven
'
t
yet
valid
computed
\
style
in
case
of
animation
-
only
restyle
"
)
;
let
flags
=
context
.
shared
.
traversal_flags
;
let
has_dirty_descendants_for_this_restyle
=
if
flags
.
for_animation_only
(
)
{
element
.
has_animation_only_dirty_descendants
(
)
}
else
{
element
.
has_dirty_descendants
(
)
}
;
if
flags
.
for_animation_only
(
)
{
unsafe
{
element
.
unset_animation_only_dirty_descendants
(
)
;
}
}
let
mut
traverse_children
=
has_dirty_descendants_for_this_restyle
|
|
!
propagated_hint
.
is_empty
(
)
|
|
context
.
thread_local
.
is_initial_style
(
)
|
|
data
.
restyle
.
reconstructed_self
(
)
|
|
flags
.
for_reconstruct
(
)
|
|
is_servo_nonincremental_layout
(
)
;
traverse_children
=
traverse_children
&
&
!
traversal
.
should_cull_subtree
(
context
element
&
data
)
;
if
traverse_children
{
note_children
:
:
<
E
D
F
>
(
context
element
data
propagated_hint
data
.
restyle
.
reconstructed_self_or_ancestor
(
)
note_child
)
;
}
if
context
.
shared
.
traversal_flags
.
for_reconstruct
(
)
{
data
.
clear_restyle_state
(
)
;
}
if
data
.
styles
.
is_display_none
(
)
|
|
context
.
shared
.
traversal_flags
.
for_reconstruct
(
)
{
unsafe
{
element
.
unset_dirty_descendants
(
)
;
}
}
context
.
thread_local
.
end_element
(
element
)
;
}
fn
compute_style
<
E
>
(
traversal_data
:
&
PerLevelTraversalData
context
:
&
mut
StyleContext
<
E
>
element
:
E
data
:
&
mut
ElementData
)
-
>
ChildCascadeRequirement
where
E
:
TElement
{
use
data
:
:
RestyleKind
:
:
*
;
use
sharing
:
:
StyleSharingResult
:
:
*
;
context
.
thread_local
.
statistics
.
elements_styled
+
=
1
;
let
kind
=
data
.
restyle_kind
(
context
.
shared
)
;
debug
!
(
"
compute_style
:
{
:
?
}
(
kind
=
{
:
?
}
)
"
element
kind
)
;
if
data
.
has_styles
(
)
{
data
.
restyle
.
set_restyled
(
)
;
}
let
mut
important_rules_changed
=
false
;
let
new_styles
=
match
kind
{
MatchAndCascade
=
>
{
debug_assert
!
(
!
context
.
shared
.
traversal_flags
.
for_animation_only
(
)
"
MatchAndCascade
shouldn
'
t
be
processed
during
\
animation
-
only
traversal
"
)
;
context
.
thread_local
.
bloom_filter
.
insert_parents_recovering
(
element
traversal_data
.
current_dom_depth
)
;
context
.
thread_local
.
bloom_filter
.
assert_complete
(
element
)
;
important_rules_changed
=
true
;
let
mut
target
=
StyleSharingTarget
:
:
new
(
element
)
;
match
target
.
share_style_if_possible
(
context
)
{
StyleWasShared
(
index
styles
)
=
>
{
context
.
thread_local
.
statistics
.
styles_shared
+
=
1
;
context
.
thread_local
.
style_sharing_candidate_cache
.
touch
(
index
)
;
styles
}
CannotShare
=
>
{
context
.
thread_local
.
statistics
.
elements_matched
+
=
1
;
let
new_styles
=
StyleResolverForElement
:
:
new
(
element
context
RuleInclusion
:
:
All
)
.
resolve_style_with_default_parents
(
)
;
context
.
thread_local
.
style_sharing_candidate_cache
.
insert_if_possible
(
&
element
new_styles
.
primary
(
)
target
.
take_validation_data
(
)
context
.
thread_local
.
bloom_filter
.
matching_depth
(
)
)
;
new_styles
}
}
}
CascadeWithReplacements
(
flags
)
=
>
{
let
mut
cascade_inputs
=
ElementCascadeInputs
:
:
new_from_element_data
(
data
)
;
important_rules_changed
=
element
.
replace_rules
(
flags
context
&
mut
cascade_inputs
)
;
StyleResolverForElement
:
:
new
(
element
context
RuleInclusion
:
:
All
)
.
cascade_styles_with_default_parents
(
cascade_inputs
)
}
CascadeOnly
=
>
{
let
cascade_inputs
=
ElementCascadeInputs
:
:
new_from_element_data
(
data
)
;
StyleResolverForElement
:
:
new
(
element
context
RuleInclusion
:
:
All
)
.
cascade_styles_with_default_parents
(
cascade_inputs
)
}
}
;
element
.
finish_restyle
(
context
data
new_styles
important_rules_changed
)
}
fn
note_children
<
E
D
F
>
(
context
:
&
mut
StyleContext
<
E
>
element
:
E
data
:
&
ElementData
propagated_hint
:
RestyleHint
reconstructed_ancestor
:
bool
mut
note_child
:
F
)
where
E
:
TElement
D
:
DomTraversal
<
E
>
F
:
FnMut
(
E
:
:
ConcreteNode
)
{
trace
!
(
"
note_children
:
{
:
?
}
"
element
)
;
let
flags
=
context
.
shared
.
traversal_flags
;
for
child_node
in
element
.
as_node
(
)
.
traversal_children
(
)
{
let
child
=
match
child_node
.
as_element
(
)
{
Some
(
el
)
=
>
el
None
=
>
{
if
is_servo_nonincremental_layout
(
)
|
|
D
:
:
text_node_needs_traversal
(
child_node
data
)
{
note_child
(
child_node
)
;
}
continue
;
}
}
;
let
child_data
=
child
.
mutate_data
(
)
;
if
child_data
.
as_ref
(
)
.
map_or
(
true
|
d
|
!
d
.
has_styles
(
)
)
{
if
!
flags
.
for_animation_only
(
)
{
note_child
(
child_node
)
;
}
continue
;
}
let
mut
child_data
=
child_data
.
unwrap
(
)
;
trace
!
(
"
>
{
:
?
}
-
>
{
:
?
}
+
{
:
?
}
pseudo
:
{
:
?
}
"
child
child_data
.
restyle
.
hint
propagated_hint
child
.
implemented_pseudo_element
(
)
)
;
if
reconstructed_ancestor
{
child_data
.
restyle
.
set_reconstructed_ancestor
(
)
;
}
child_data
.
restyle
.
hint
.
insert
(
propagated_hint
)
;
if
!
flags
.
for_animation_only
(
)
{
child_data
.
invalidate_style_if_needed
(
child
&
context
.
shared
)
;
}
if
D
:
:
element_needs_traversal
(
child
flags
&
*
child_data
Some
(
data
)
)
{
note_child
(
child_node
)
;
if
!
context
.
shared
.
traversal_flags
.
for_reconstruct
(
)
{
if
context
.
shared
.
traversal_flags
.
for_animation_only
(
)
{
unsafe
{
element
.
set_animation_only_dirty_descendants
(
)
;
}
}
else
{
unsafe
{
element
.
set_dirty_descendants
(
)
;
}
}
}
}
}
}
pub
fn
clear_descendant_data
<
E
>
(
el
:
E
)
where
E
:
TElement
{
for
kid
in
el
.
as_node
(
)
.
traversal_children
(
)
{
if
let
Some
(
kid
)
=
kid
.
as_element
(
)
{
if
kid
.
get_data
(
)
.
is_some
(
)
{
unsafe
{
kid
.
clear_data
(
)
}
;
clear_descendant_data
(
kid
)
;
}
}
}
unsafe
{
el
.
unset_dirty_descendants
(
)
;
el
.
unset_animation_only_dirty_descendants
(
)
;
}
}
