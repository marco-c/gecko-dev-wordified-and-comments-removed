use
atomic_refcell
:
:
{
AtomicRefCell
AtomicRefMut
}
;
use
bloom
:
:
StyleBloom
;
use
context
:
:
{
LocalStyleContext
SharedStyleContext
StyleContext
}
;
use
data
:
:
{
ElementData
RestyleData
StoredRestyleHint
}
;
use
dom
:
:
{
OpaqueNode
StylingMode
TElement
TNode
}
;
use
matching
:
:
{
MatchMethods
StyleSharingResult
}
;
use
restyle_hints
:
:
{
RESTYLE_DESCENDANTS
RESTYLE_LATER_SIBLINGS
RESTYLE_SELF
}
;
use
selectors
:
:
matching
:
:
StyleRelations
;
use
std
:
:
cell
:
:
RefCell
;
use
std
:
:
marker
:
:
PhantomData
;
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicUsize
ATOMIC_USIZE_INIT
Ordering
}
;
use
util
:
:
opts
;
pub
type
Generation
=
u32
;
pub
static
STYLE_SHARING_CACHE_HITS
:
AtomicUsize
=
ATOMIC_USIZE_INIT
;
pub
static
STYLE_SHARING_CACHE_MISSES
:
AtomicUsize
=
ATOMIC_USIZE_INIT
;
thread_local
!
(
static
STYLE_BLOOM
:
RefCell
<
Option
<
StyleBloom
>
>
=
RefCell
:
:
new
(
None
)
)
;
pub
fn
take_thread_local_bloom_filter
(
context
:
&
SharedStyleContext
)
-
>
StyleBloom
{
debug
!
(
"
{
}
taking
bf
"
:
:
tid
:
:
tid
(
)
)
;
STYLE_BLOOM
.
with
(
|
style_bloom
|
{
style_bloom
.
borrow_mut
(
)
.
take
(
)
.
unwrap_or_else
(
|
|
StyleBloom
:
:
new
(
context
.
generation
)
)
}
)
}
pub
fn
put_thread_local_bloom_filter
(
bf
:
StyleBloom
)
{
debug
!
(
"
[
{
}
]
putting
bloom
filter
back
"
:
:
tid
:
:
tid
(
)
)
;
STYLE_BLOOM
.
with
(
move
|
style_bloom
|
{
debug_assert
!
(
style_bloom
.
borrow
(
)
.
is_none
(
)
"
Putting
into
a
never
-
taken
thread
-
local
bloom
filter
"
)
;
*
style_bloom
.
borrow_mut
(
)
=
Some
(
bf
)
;
}
)
}
pub
fn
remove_from_bloom_filter
<
'
a
E
C
>
(
context
:
&
C
root
:
OpaqueNode
element
:
E
)
where
E
:
TElement
C
:
StyleContext
<
'
a
>
{
debug
!
(
"
[
{
}
]
remove_from_bloom_filter
"
:
:
tid
:
:
tid
(
)
)
;
let
bf
=
STYLE_BLOOM
.
with
(
|
style_bloom
|
{
style_bloom
.
borrow_mut
(
)
.
take
(
)
}
)
;
if
let
Some
(
mut
bf
)
=
bf
{
if
context
.
shared_context
(
)
.
generation
=
=
bf
.
generation
(
)
{
bf
.
maybe_pop
(
element
)
;
if
element
.
as_node
(
)
.
opaque
(
)
!
=
root
{
put_thread_local_bloom_filter
(
bf
)
;
}
}
}
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
PerLevelTraversalData
{
pub
current_dom_depth
:
Option
<
usize
>
}
pub
trait
DomTraversalContext
<
N
:
TNode
>
{
type
SharedContext
:
Sync
+
'
static
;
fn
new
<
'
a
>
(
&
'
a
Self
:
:
SharedContext
OpaqueNode
)
-
>
Self
;
fn
process_preorder
(
&
self
node
:
N
data
:
&
mut
PerLevelTraversalData
)
;
fn
process_postorder
(
&
self
node
:
N
)
;
fn
needs_postorder_traversal
(
&
self
)
-
>
bool
{
true
}
fn
should_traverse_child
(
child
:
N
)
-
>
bool
;
fn
traverse_children
<
F
:
FnMut
(
N
)
>
(
parent
:
N
:
:
ConcreteElement
mut
f
:
F
)
{
use
dom
:
:
StylingMode
:
:
Restyle
;
if
parent
.
is_display_none
(
)
{
return
;
}
for
kid
in
parent
.
as_node
(
)
.
children
(
)
{
if
Self
:
:
should_traverse_child
(
kid
)
{
if
kid
.
as_element
(
)
.
map_or
(
false
|
el
|
el
.
styling_mode
(
)
=
=
Restyle
)
{
unsafe
{
parent
.
set_dirty_descendants
(
)
;
}
}
f
(
kid
)
;
}
}
}
unsafe
fn
ensure_element_data
(
element
:
&
N
:
:
ConcreteElement
)
-
>
&
AtomicRefCell
<
ElementData
>
;
unsafe
fn
clear_element_data
(
element
:
&
N
:
:
ConcreteElement
)
;
fn
local_context
(
&
self
)
-
>
&
LocalStyleContext
;
}
#
[
inline
]
pub
fn
relations_are_shareable
(
relations
:
&
StyleRelations
)
-
>
bool
{
use
selectors
:
:
matching
:
:
*
;
!
relations
.
intersects
(
AFFECTED_BY_ID_SELECTOR
|
AFFECTED_BY_PSEUDO_ELEMENTS
|
AFFECTED_BY_STATE
|
AFFECTED_BY_NON_COMMON_STYLE_AFFECTING_ATTRIBUTE_SELECTOR
|
AFFECTED_BY_STYLE_ATTRIBUTE
|
AFFECTED_BY_PRESENTATIONAL_HINTS
)
}
pub
fn
style_element_in_display_none_subtree
<
'
a
E
C
F
>
(
element
:
E
init_data
:
&
F
context
:
&
'
a
C
)
-
>
E
where
E
:
TElement
C
:
StyleContext
<
'
a
>
F
:
Fn
(
E
)
{
if
element
.
get_data
(
)
.
is_some
(
)
{
debug_assert
!
(
element
.
is_display_none
(
)
)
;
return
element
;
}
let
parent
=
element
.
parent_element
(
)
.
unwrap
(
)
;
let
display_none_root
=
style_element_in_display_none_subtree
(
parent
init_data
context
)
;
init_data
(
element
)
;
let
mut
data
=
element
.
mutate_data
(
)
.
unwrap
(
)
;
let
match_results
=
element
.
match_element
(
context
None
)
;
unsafe
{
let
shareable
=
match_results
.
primary_is_shareable
(
)
;
element
.
cascade_node
(
context
&
mut
data
Some
(
parent
)
match_results
.
primary
match_results
.
per_pseudo
shareable
)
;
}
display_none_root
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
pub
fn
recalc_style_at
<
'
a
E
C
D
>
(
context
:
&
'
a
C
data
:
&
mut
PerLevelTraversalData
element
:
E
)
where
E
:
TElement
C
:
StyleContext
<
'
a
>
D
:
DomTraversalContext
<
E
:
:
ConcreteNode
>
{
let
mode
=
element
.
styling_mode
(
)
;
let
should_compute
=
element
.
borrow_data
(
)
.
map_or
(
true
|
d
|
d
.
get_current_styles
(
)
.
is_none
(
)
)
;
debug
!
(
"
recalc_style_at
:
{
:
?
}
(
should_compute
=
{
:
?
}
mode
=
{
:
?
}
data
=
{
:
?
}
)
"
element
should_compute
mode
element
.
borrow_data
(
)
)
;
let
(
computed_display_none
propagated_hint
)
=
if
should_compute
{
compute_style
:
:
<
_
_
D
>
(
context
data
element
)
}
else
{
(
false
StoredRestyleHint
:
:
empty
(
)
)
}
;
let
will_traverse_children
=
!
computed_display_none
&
&
(
mode
=
=
StylingMode
:
:
Restyle
|
|
mode
=
=
StylingMode
:
:
Traverse
)
;
if
will_traverse_children
{
preprocess_children
:
:
<
_
_
D
>
(
context
element
propagated_hint
mode
=
=
StylingMode
:
:
Restyle
)
;
}
}
fn
compute_style
<
'
a
E
C
D
>
(
context
:
&
'
a
C
data
:
&
mut
PerLevelTraversalData
element
:
E
)
-
>
(
bool
StoredRestyleHint
)
where
E
:
TElement
C
:
StyleContext
<
'
a
>
D
:
DomTraversalContext
<
E
:
:
ConcreteNode
>
{
let
shared_context
=
context
.
shared_context
(
)
;
let
mut
bf
=
take_thread_local_bloom_filter
(
shared_context
)
;
let
dom_depth
=
bf
.
insert_parents_recovering
(
element
data
.
current_dom_depth
shared_context
.
generation
)
;
data
.
current_dom_depth
=
Some
(
dom_depth
)
;
bf
.
assert_complete
(
element
)
;
let
mut
data
=
unsafe
{
D
:
:
ensure_element_data
(
&
element
)
.
borrow_mut
(
)
}
;
debug_assert
!
(
!
data
.
is_persistent
(
)
)
;
let
style_sharing_candidate_cache
=
&
mut
context
.
local_context
(
)
.
style_sharing_candidate_cache
.
borrow_mut
(
)
;
let
sharing_result
=
if
element
.
parent_element
(
)
.
is_none
(
)
{
StyleSharingResult
:
:
CannotShare
}
else
{
unsafe
{
element
.
share_style_if_possible
(
style_sharing_candidate_cache
shared_context
&
mut
data
)
}
}
;
match
sharing_result
{
StyleSharingResult
:
:
CannotShare
=
>
{
let
match_results
;
let
shareable_element
=
{
if
opts
:
:
get
(
)
.
style_sharing_stats
{
STYLE_SHARING_CACHE_MISSES
.
fetch_add
(
1
Ordering
:
:
Relaxed
)
;
}
match_results
=
element
.
match_element
(
context
Some
(
bf
.
filter
(
)
)
)
;
if
match_results
.
primary_is_shareable
(
)
{
Some
(
element
)
}
else
{
None
}
}
;
let
relations
=
match_results
.
relations
;
unsafe
{
let
shareable
=
match_results
.
primary_is_shareable
(
)
;
element
.
cascade_node
(
context
&
mut
data
element
.
parent_element
(
)
match_results
.
primary
match_results
.
per_pseudo
shareable
)
;
}
if
let
Some
(
element
)
=
shareable_element
{
style_sharing_candidate_cache
.
insert_if_possible
(
&
element
&
data
.
current_styles
(
)
.
primary
.
values
relations
)
;
}
}
StyleSharingResult
:
:
StyleWasShared
(
index
)
=
>
{
if
opts
:
:
get
(
)
.
style_sharing_stats
{
STYLE_SHARING_CACHE_HITS
.
fetch_add
(
1
Ordering
:
:
Relaxed
)
;
}
style_sharing_candidate_cache
.
touch
(
index
)
;
}
}
let
display_none
=
data
.
current_styles
(
)
.
is_display_none
(
)
;
if
display_none
{
debug
!
(
"
New
element
style
is
display
:
none
-
clearing
data
from
descendants
.
"
)
;
clear_descendant_data
(
element
&
|
e
|
unsafe
{
D
:
:
clear_element_data
(
&
e
)
}
)
;
}
put_thread_local_bloom_filter
(
bf
)
;
(
display_none
data
.
as_restyle
(
)
.
map_or
(
StoredRestyleHint
:
:
empty
(
)
|
r
|
r
.
hint
.
propagate
(
)
)
)
}
fn
preprocess_children
<
'
a
E
C
D
>
(
context
:
&
'
a
C
element
:
E
mut
propagated_hint
:
StoredRestyleHint
restyled_parent
:
bool
)
where
E
:
TElement
C
:
StyleContext
<
'
a
>
D
:
DomTraversalContext
<
E
:
:
ConcreteNode
>
{
for
child
in
element
.
as_node
(
)
.
children
(
)
{
let
child
=
match
child
.
as_element
(
)
{
Some
(
el
)
=
>
el
None
=
>
continue
}
;
let
mut
child_data
=
unsafe
{
LazyRestyleData
:
:
<
E
D
>
:
:
new
(
&
child
)
}
;
if
!
propagated_hint
.
is_empty
(
)
{
child_data
.
ensure
(
)
.
map
(
|
d
|
d
.
hint
.
insert
(
&
propagated_hint
)
)
;
}
if
child_data
.
has_snapshot
(
)
{
let
mut
restyle_data
=
child_data
.
ensure
(
)
.
unwrap
(
)
;
let
mut
hint
=
context
.
shared_context
(
)
.
stylist
.
compute_restyle_hint
(
&
child
restyle_data
.
snapshot
.
as_ref
(
)
.
unwrap
(
)
child
.
get_state
(
)
)
;
if
hint
.
contains
(
RESTYLE_LATER_SIBLINGS
)
{
hint
.
remove
(
RESTYLE_LATER_SIBLINGS
)
;
propagated_hint
.
insert
(
&
(
RESTYLE_SELF
|
RESTYLE_DESCENDANTS
)
.
into
(
)
)
;
}
if
!
hint
.
is_empty
(
)
{
restyle_data
.
hint
.
insert
(
&
hint
.
into
(
)
)
;
}
}
if
restyled_parent
{
child_data
.
ensure
(
)
;
}
}
}
pub
fn
clear_descendant_data
<
E
:
TElement
F
:
Fn
(
E
)
>
(
el
:
E
clear_data
:
&
F
)
{
for
kid
in
el
.
as_node
(
)
.
children
(
)
{
if
let
Some
(
kid
)
=
kid
.
as_element
(
)
{
if
kid
.
get_data
(
)
.
is_some
(
)
{
clear_data
(
kid
)
;
clear_descendant_data
(
kid
clear_data
)
;
}
}
}
unsafe
{
el
.
unset_dirty_descendants
(
)
;
}
}
struct
LazyRestyleData
<
'
b
E
:
TElement
+
'
b
D
:
DomTraversalContext
<
E
:
:
ConcreteNode
>
>
{
data
:
Option
<
AtomicRefMut
<
'
b
ElementData
>
>
element
:
&
'
b
E
phantom
:
PhantomData
<
D
>
}
impl
<
'
b
E
:
TElement
D
:
DomTraversalContext
<
E
:
:
ConcreteNode
>
>
LazyRestyleData
<
'
b
E
D
>
{
unsafe
fn
new
(
element
:
&
'
b
E
)
-
>
Self
{
LazyRestyleData
{
data
:
None
element
:
element
phantom
:
PhantomData
}
}
fn
ensure
(
&
mut
self
)
-
>
Option
<
&
mut
RestyleData
>
{
if
self
.
data
.
is_none
(
)
{
let
mut
d
=
unsafe
{
D
:
:
ensure_element_data
(
self
.
element
)
.
borrow_mut
(
)
}
;
d
.
restyle
(
)
;
self
.
data
=
Some
(
d
)
;
}
self
.
data
.
as_mut
(
)
.
unwrap
(
)
.
as_restyle_mut
(
)
}
fn
has_snapshot
(
&
self
)
-
>
bool
{
let
raw_data
=
self
.
element
.
get_data
(
)
;
if
raw_data
.
is_none
(
)
{
debug_assert
!
(
self
.
data
.
is_none
(
)
)
;
return
false
;
}
let
maybe_tmp_borrow
;
let
borrow_ref
=
match
self
.
data
{
Some
(
ref
d
)
=
>
d
None
=
>
{
maybe_tmp_borrow
=
raw_data
.
unwrap
(
)
.
borrow_mut
(
)
;
&
maybe_tmp_borrow
}
}
;
borrow_ref
.
as_restyle
(
)
.
map_or
(
false
|
d
|
d
.
snapshot
.
is_some
(
)
)
}
}
