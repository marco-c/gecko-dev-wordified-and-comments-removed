use
atomic_refcell
:
:
AtomicRefCell
;
use
context
:
:
{
ElementCascadeInputs
StyleContext
SharedStyleContext
ThreadLocalStyleContext
}
;
use
data
:
:
{
ElementData
ElementStyles
}
;
use
dom
:
:
{
DirtyDescendants
NodeInfo
OpaqueNode
TElement
TNode
}
;
use
invalidation
:
:
element
:
:
restyle_hints
:
:
{
RECASCADE_SELF
RECASCADE_DESCENDANTS
RestyleHint
}
;
use
matching
:
:
{
ChildCascadeRequirement
MatchMethods
}
;
use
sharing
:
:
{
StyleSharingBehavior
StyleSharingTarget
}
;
#
[
cfg
(
feature
=
"
servo
"
)
]
use
servo_config
:
:
opts
;
use
smallvec
:
:
SmallVec
;
use
std
:
:
borrow
:
:
BorrowMut
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
PerLevelTraversalData
{
pub
current_dom_depth
:
usize
}
bitflags
!
{
/
/
/
Flags
that
control
the
traversal
process
.
pub
flags
TraversalFlags
:
u8
{
/
/
/
Traverse
only
unstyled
children
.
const
UNSTYLED_CHILDREN_ONLY
=
0x01
/
/
/
Traverse
only
elements
for
animation
restyles
.
const
ANIMATION_ONLY
=
0x02
/
/
/
Traverse
without
generating
any
change
hints
.
const
FOR_RECONSTRUCT
=
0x04
/
/
/
Traverse
triggered
by
CSS
rule
changes
.
/
/
/
Traverse
and
update
all
elements
with
CSS
animations
since
/
/
/
keyframes
rules
may
have
changed
const
FOR_CSS_RULE_CHANGES
=
0x08
/
/
/
Only
include
user
agent
style
sheets
when
selector
matching
.
const
FOR_DEFAULT_STYLES
=
0x10
}
}
impl
TraversalFlags
{
pub
fn
for_animation_only
(
&
self
)
-
>
bool
{
self
.
contains
(
ANIMATION_ONLY
)
}
pub
fn
for_unstyled_children_only
(
&
self
)
-
>
bool
{
self
.
contains
(
UNSTYLED_CHILDREN_ONLY
)
}
pub
fn
for_reconstruct
(
&
self
)
-
>
bool
{
self
.
contains
(
FOR_RECONSTRUCT
)
}
pub
fn
for_css_rule_changes
(
&
self
)
-
>
bool
{
self
.
contains
(
FOR_CSS_RULE_CHANGES
)
}
pub
fn
for_default_styles
(
&
self
)
-
>
bool
{
self
.
contains
(
FOR_DEFAULT_STYLES
)
}
}
pub
struct
PreTraverseToken
{
traverse
:
bool
unstyled_children_only
:
bool
}
impl
PreTraverseToken
{
pub
fn
should_traverse
(
&
self
)
-
>
bool
{
self
.
traverse
}
pub
fn
traverse_unstyled_children_only
(
&
self
)
-
>
bool
{
self
.
unstyled_children_only
}
}
pub
enum
LogBehavior
{
MayLog
DontLog
}
use
self
:
:
LogBehavior
:
:
*
;
impl
LogBehavior
{
fn
allow
(
&
self
)
-
>
bool
{
matches
!
(
*
self
MayLog
)
}
}
#
[
derive
(
Debug
Copy
Clone
)
]
pub
enum
TraversalDriver
{
Parallel
Sequential
}
impl
TraversalDriver
{
#
[
inline
]
pub
fn
is_parallel
(
&
self
)
-
>
bool
{
matches
!
(
*
self
TraversalDriver
:
:
Parallel
)
}
}
#
[
cfg
(
feature
=
"
servo
"
)
]
fn
is_servo_nonincremental_layout
(
)
-
>
bool
{
opts
:
:
get
(
)
.
nonincremental_layout
}
#
[
cfg
(
not
(
feature
=
"
servo
"
)
)
]
fn
is_servo_nonincremental_layout
(
)
-
>
bool
{
false
}
pub
trait
DomTraversal
<
E
:
TElement
>
:
Sync
{
type
ThreadLocalContext
:
Send
+
BorrowMut
<
ThreadLocalStyleContext
<
E
>
>
;
fn
process_preorder
(
&
self
data
:
&
PerLevelTraversalData
thread_local
:
&
mut
Self
:
:
ThreadLocalContext
node
:
E
:
:
ConcreteNode
)
;
fn
process_postorder
(
&
self
thread_local
:
&
mut
Self
:
:
ThreadLocalContext
node
:
E
:
:
ConcreteNode
)
;
fn
needs_postorder_traversal
(
)
-
>
bool
{
true
}
fn
handle_postorder_traversal
(
&
self
thread_local
:
&
mut
Self
:
:
ThreadLocalContext
root
:
OpaqueNode
mut
node
:
E
:
:
ConcreteNode
children_to_process
:
isize
)
{
if
!
Self
:
:
needs_postorder_traversal
(
)
{
return
;
}
if
children_to_process
=
=
0
{
loop
{
self
.
process_postorder
(
thread_local
node
)
;
if
node
.
opaque
(
)
=
=
root
{
break
;
}
let
parent
=
node
.
traversal_parent
(
)
.
unwrap
(
)
;
let
remaining
=
parent
.
did_process_child
(
)
;
if
remaining
!
=
0
{
break
}
node
=
parent
.
as_node
(
)
;
}
}
else
{
node
.
as_element
(
)
.
unwrap
(
)
.
store_children_to_process
(
children_to_process
)
;
}
}
fn
pre_traverse
(
root
:
E
shared_context
:
&
SharedStyleContext
traversal_flags
:
TraversalFlags
)
-
>
PreTraverseToken
{
debug_assert
!
(
!
(
traversal_flags
.
for_reconstruct
(
)
&
&
traversal_flags
.
for_unstyled_children_only
(
)
)
"
must
not
specify
FOR_RECONSTRUCT
in
combination
with
UNSTYLED_CHILDREN_ONLY
"
)
;
if
traversal_flags
.
for_unstyled_children_only
(
)
{
if
root
.
borrow_data
(
)
.
map_or
(
true
|
d
|
d
.
has_styles
(
)
&
&
d
.
styles
.
is_display_none
(
)
)
{
return
PreTraverseToken
{
traverse
:
false
unstyled_children_only
:
false
}
;
}
return
PreTraverseToken
{
traverse
:
true
unstyled_children_only
:
true
}
;
}
if
let
Some
(
mut
data
)
=
root
.
mutate_data
(
)
{
data
.
invalidate_style_if_needed
(
root
shared_context
)
;
}
PreTraverseToken
{
traverse
:
Self
:
:
node_needs_traversal
(
root
.
as_node
(
)
traversal_flags
)
unstyled_children_only
:
false
}
}
fn
text_node_needs_traversal
(
node
:
E
:
:
ConcreteNode
)
-
>
bool
{
debug_assert
!
(
node
.
is_text_node
(
)
)
;
false
}
fn
node_needs_traversal
(
node
:
E
:
:
ConcreteNode
traversal_flags
:
TraversalFlags
)
-
>
bool
{
if
is_servo_nonincremental_layout
(
)
{
return
true
;
}
if
traversal_flags
.
for_reconstruct
(
)
{
return
true
;
}
let
el
=
match
node
.
as_element
(
)
{
None
=
>
return
Self
:
:
text_node_needs_traversal
(
node
)
Some
(
el
)
=
>
el
}
;
if
el
.
is_native_anonymous
(
)
{
if
let
Some
(
parent
)
=
el
.
traversal_parent
(
)
{
let
parent_data
=
parent
.
borrow_data
(
)
.
unwrap
(
)
;
let
going_to_reframe
=
parent_data
.
restyle
.
reconstructed_self_or_ancestor
(
)
;
let
mut
is_before_or_after_pseudo
=
false
;
if
let
Some
(
pseudo
)
=
el
.
implemented_pseudo_element
(
)
{
if
pseudo
.
is_before_or_after
(
)
{
is_before_or_after_pseudo
=
true
;
let
still_match
=
parent_data
.
styles
.
pseudos
.
get
(
&
pseudo
)
.
is_some
(
)
;
if
!
still_match
{
debug_assert
!
(
going_to_reframe
"
We
'
re
removing
a
pseudo
so
we
\
should
reframe
!
"
)
;
return
false
;
}
}
}
if
going_to_reframe
&
&
!
is_before_or_after_pseudo
{
debug
!
(
"
Element
{
:
?
}
is
in
doomed
NAC
subtree
\
culling
traversal
"
el
)
;
return
false
;
}
}
}
if
traversal_flags
.
for_animation_only
(
)
{
let
data
=
match
el
.
borrow_data
(
)
{
Some
(
d
)
=
>
d
None
=
>
return
false
}
;
if
!
data
.
has_styles
(
)
{
return
false
;
}
if
el
.
has_animation_only_dirty_descendants
(
)
{
return
true
;
}
return
data
.
restyle
.
hint
.
has_animation_hint
(
)
|
|
data
.
restyle
.
hint
.
has_recascade_self
(
)
;
}
if
el
.
has_dirty_descendants
(
)
{
return
true
;
}
let
data
=
match
el
.
borrow_data
(
)
{
Some
(
d
)
=
>
d
None
=
>
return
true
}
;
if
!
data
.
has_styles
(
)
{
return
true
;
}
if
!
data
.
restyle
.
hint
.
is_empty
(
)
{
return
true
;
}
if
(
cfg
!
(
feature
=
"
servo
"
)
|
|
traversal_flags
.
for_reconstruct
(
)
)
&
&
!
data
.
restyle
.
damage
.
is_empty
(
)
{
return
true
;
}
trace
!
(
"
{
:
?
}
doesn
'
t
need
traversal
"
el
)
;
false
}
fn
should_traverse_children
(
&
self
thread_local
:
&
mut
ThreadLocalStyleContext
<
E
>
parent
:
E
parent_data
:
&
ElementData
log
:
LogBehavior
)
-
>
bool
{
debug_assert
!
(
cfg
!
(
feature
=
"
gecko
"
)
|
|
parent
.
has_current_styles
(
parent_data
)
)
;
if
parent_data
.
styles
.
is_display_none
(
)
{
if
log
.
allow
(
)
{
debug
!
(
"
Parent
{
:
?
}
is
display
:
none
culling
traversal
"
parent
)
;
}
return
false
;
}
if
cfg
!
(
feature
=
"
gecko
"
)
&
&
thread_local
.
is_initial_style
(
)
&
&
parent_data
.
styles
.
primary
(
)
.
has_moz_binding
(
)
{
if
log
.
allow
(
)
{
debug
!
(
"
Parent
{
:
?
}
has
XBL
binding
deferring
traversal
"
parent
)
;
}
return
false
;
}
return
true
;
}
fn
traverse_children
<
F
>
(
&
self
thread_local
:
&
mut
Self
:
:
ThreadLocalContext
parent
:
E
mut
f
:
F
)
where
F
:
FnMut
(
&
mut
Self
:
:
ThreadLocalContext
E
:
:
ConcreteNode
)
{
let
should_traverse
=
self
.
should_traverse_children
(
thread_local
.
borrow_mut
(
)
parent
&
parent
.
borrow_data
(
)
.
unwrap
(
)
MayLog
)
;
thread_local
.
borrow_mut
(
)
.
end_element
(
parent
)
;
if
!
should_traverse
{
return
;
}
for
kid
in
parent
.
as_node
(
)
.
traversal_children
(
)
{
if
Self
:
:
node_needs_traversal
(
kid
self
.
shared_context
(
)
.
traversal_flags
)
{
if
!
self
.
shared_context
(
)
.
traversal_flags
.
for_reconstruct
(
)
{
let
el
=
kid
.
as_element
(
)
;
if
el
.
as_ref
(
)
.
and_then
(
|
el
|
el
.
borrow_data
(
)
)
.
map_or
(
false
|
d
|
d
.
has_styles
(
)
)
{
if
self
.
shared_context
(
)
.
traversal_flags
.
for_animation_only
(
)
{
unsafe
{
parent
.
set_animation_only_dirty_descendants
(
)
;
}
}
else
{
unsafe
{
parent
.
set_dirty_descendants
(
)
;
}
}
}
}
f
(
thread_local
kid
)
;
}
}
}
unsafe
fn
ensure_element_data
(
element
:
&
E
)
-
>
&
AtomicRefCell
<
ElementData
>
;
unsafe
fn
clear_element_data
(
element
:
&
E
)
;
fn
shared_context
(
&
self
)
-
>
&
SharedStyleContext
;
fn
create_thread_local_context
(
&
self
)
-
>
Self
:
:
ThreadLocalContext
;
fn
is_parallel
(
&
self
)
-
>
bool
;
}
fn
resolve_style_internal
<
E
F
>
(
context
:
&
mut
StyleContext
<
E
>
element
:
E
ensure_data
:
&
F
)
-
>
Option
<
E
>
where
E
:
TElement
F
:
Fn
(
E
)
{
ensure_data
(
element
)
;
let
mut
data
=
element
.
mutate_data
(
)
.
unwrap
(
)
;
let
mut
display_none_root
=
None
;
if
!
data
.
has_styles
(
)
{
let
parent
=
element
.
traversal_parent
(
)
;
if
let
Some
(
p
)
=
parent
{
display_none_root
=
resolve_style_internal
(
context
p
ensure_data
)
;
}
if
context
.
thread_local
.
bloom_filter
.
is_empty
(
)
{
context
.
thread_local
.
bloom_filter
.
rebuild
(
element
)
;
}
else
{
context
.
thread_local
.
bloom_filter
.
push
(
parent
.
unwrap
(
)
)
;
context
.
thread_local
.
bloom_filter
.
assert_complete
(
element
)
;
}
context
.
thread_local
.
begin_element
(
element
&
data
)
;
element
.
match_and_cascade
(
context
&
mut
data
StyleSharingBehavior
:
:
Disallow
)
;
context
.
thread_local
.
end_element
(
element
)
;
if
!
context
.
shared
.
traversal_flags
.
for_default_styles
(
)
{
unsafe
{
element
.
note_descendants
:
:
<
DirtyDescendants
>
(
)
}
;
}
}
if
display_none_root
.
is_none
(
)
&
&
data
.
styles
.
is_display_none
(
)
{
display_none_root
=
Some
(
element
)
;
}
return
display_none_root
}
pub
fn
resolve_style
<
E
F
G
H
>
(
context
:
&
mut
StyleContext
<
E
>
element
:
E
ensure_data
:
&
F
clear_data
:
&
G
callback
:
H
)
where
E
:
TElement
F
:
Fn
(
E
)
G
:
Fn
(
E
)
H
:
FnOnce
(
&
ElementStyles
)
{
context
.
thread_local
.
bloom_filter
.
clear
(
)
;
let
display_none_root
=
resolve_style_internal
(
context
element
ensure_data
)
;
callback
(
&
element
.
borrow_data
(
)
.
unwrap
(
)
.
styles
)
;
let
in_doc
=
element
.
as_node
(
)
.
is_in_doc
(
)
;
if
!
in_doc
|
|
display_none_root
.
is_some
(
)
{
let
mut
curr
=
element
;
loop
{
unsafe
{
curr
.
unset_dirty_descendants
(
)
;
curr
.
unset_animation_only_dirty_descendants
(
)
;
}
if
in_doc
&
&
curr
=
=
display_none_root
.
unwrap
(
)
{
break
;
}
clear_data
(
curr
)
;
curr
=
match
curr
.
traversal_parent
(
)
{
Some
(
parent
)
=
>
parent
None
=
>
break
}
;
}
}
}
pub
fn
resolve_default_style
<
E
F
G
H
>
(
context
:
&
mut
StyleContext
<
E
>
element
:
E
ensure_data
:
&
F
set_data
:
&
G
callback
:
H
)
where
E
:
TElement
F
:
Fn
(
E
)
G
:
Fn
(
E
Option
<
ElementData
>
)
-
>
Option
<
ElementData
>
H
:
FnOnce
(
&
ElementStyles
)
{
let
mut
old_data
:
SmallVec
<
[
(
E
Option
<
ElementData
>
)
;
8
]
>
=
SmallVec
:
:
new
(
)
;
{
let
mut
e
=
element
;
loop
{
old_data
.
push
(
(
e
set_data
(
e
None
)
)
)
;
match
e
.
traversal_parent
(
)
{
Some
(
parent
)
=
>
e
=
parent
None
=
>
break
}
}
}
resolve_style_internal
(
context
element
ensure_data
)
;
callback
(
&
element
.
borrow_data
(
)
.
unwrap
(
)
.
styles
)
;
for
entry
in
old_data
{
set_data
(
entry
.
0
entry
.
1
)
;
}
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
pub
fn
recalc_style_at
<
E
D
>
(
traversal
:
&
D
traversal_data
:
&
PerLevelTraversalData
context
:
&
mut
StyleContext
<
E
>
element
:
E
data
:
&
mut
ElementData
)
where
E
:
TElement
D
:
DomTraversal
<
E
>
{
context
.
thread_local
.
begin_element
(
element
data
)
;
context
.
thread_local
.
statistics
.
elements_traversed
+
=
1
;
debug_assert
!
(
!
element
.
has_snapshot
(
)
|
|
element
.
handled_snapshot
(
)
"
Should
'
ve
handled
snapshots
here
already
"
)
;
let
compute_self
=
!
element
.
has_current_styles
(
data
)
;
let
mut
hint
=
RestyleHint
:
:
empty
(
)
;
debug
!
(
"
recalc_style_at
:
{
:
?
}
(
compute_self
=
{
:
?
}
dirty_descendants
=
{
:
?
}
data
=
{
:
?
}
)
"
element
compute_self
element
.
has_dirty_descendants
(
)
data
)
;
if
compute_self
{
match
compute_style
(
traversal
traversal_data
context
element
data
)
{
ChildCascadeRequirement
:
:
MustCascadeChildren
=
>
{
hint
|
=
RECASCADE_SELF
;
}
ChildCascadeRequirement
:
:
MustCascadeDescendants
=
>
{
hint
|
=
RECASCADE_SELF
|
RECASCADE_DESCENDANTS
;
}
ChildCascadeRequirement
:
:
CanSkipCascade
=
>
{
}
}
;
if
element
.
is_native_anonymous
(
)
{
hint
|
=
RECASCADE_SELF
;
}
if
data
.
styles
.
is_display_none
(
)
{
debug
!
(
"
{
:
?
}
style
is
display
:
none
-
clearing
data
from
descendants
.
"
element
)
;
clear_descendant_data
(
element
&
|
e
|
unsafe
{
D
:
:
clear_element_data
(
&
e
)
}
)
;
}
}
let
mut
propagated_hint
=
{
debug_assert
!
(
context
.
shared
.
traversal_flags
.
for_animation_only
(
)
|
|
!
data
.
restyle
.
hint
.
has_animation_hint
(
)
"
animation
restyle
hint
should
be
handled
during
\
animation
-
only
restyles
"
)
;
data
.
restyle
.
hint
.
propagate
(
&
context
.
shared
.
traversal_flags
)
}
;
propagated_hint
.
insert
(
hint
)
;
trace
!
(
"
propagated_hint
=
{
:
?
}
\
is_display_none
=
{
:
?
}
implementing_pseudo
=
{
:
?
}
"
propagated_hint
data
.
styles
.
is_display_none
(
)
element
.
implemented_pseudo_element
(
)
)
;
debug_assert
!
(
element
.
has_current_styles
(
data
)
|
|
context
.
shared
.
traversal_flags
.
for_animation_only
(
)
"
Should
have
computed
style
or
haven
'
t
yet
valid
computed
\
style
in
case
of
animation
-
only
restyle
"
)
;
let
has_dirty_descendants_for_this_restyle
=
if
context
.
shared
.
traversal_flags
.
for_animation_only
(
)
{
element
.
has_animation_only_dirty_descendants
(
)
}
else
{
element
.
has_dirty_descendants
(
)
}
;
if
traversal
.
should_traverse_children
(
&
mut
context
.
thread_local
element
&
data
DontLog
)
&
&
(
has_dirty_descendants_for_this_restyle
|
|
!
propagated_hint
.
is_empty
(
)
)
{
let
reconstructed_ancestor
=
data
.
restyle
.
reconstructed_self_or_ancestor
(
)
;
preprocess_children
:
:
<
E
D
>
(
context
element
propagated_hint
reconstructed_ancestor
)
}
if
context
.
shared
.
traversal_flags
.
for_reconstruct
(
)
{
data
.
clear_restyle_state
(
)
;
}
if
context
.
shared
.
traversal_flags
.
for_animation_only
(
)
{
unsafe
{
element
.
unset_animation_only_dirty_descendants
(
)
;
}
}
if
data
.
styles
.
is_display_none
(
)
|
|
context
.
shared
.
traversal_flags
.
for_reconstruct
(
)
{
unsafe
{
element
.
unset_dirty_descendants
(
)
;
}
}
}
fn
compute_style
<
E
D
>
(
_traversal
:
&
D
traversal_data
:
&
PerLevelTraversalData
context
:
&
mut
StyleContext
<
E
>
element
:
E
data
:
&
mut
ElementData
)
-
>
ChildCascadeRequirement
where
E
:
TElement
D
:
DomTraversal
<
E
>
{
use
data
:
:
RestyleKind
:
:
*
;
use
sharing
:
:
StyleSharingResult
:
:
*
;
context
.
thread_local
.
statistics
.
elements_styled
+
=
1
;
let
kind
=
data
.
restyle_kind
(
context
.
shared
)
;
debug
!
(
"
compute_style
:
{
:
?
}
(
kind
=
{
:
?
}
)
"
element
kind
)
;
if
data
.
has_styles
(
)
{
data
.
restyle
.
set_restyled
(
)
;
}
match
kind
{
MatchAndCascade
=
>
{
debug_assert
!
(
!
context
.
shared
.
traversal_flags
.
for_animation_only
(
)
"
MatchAndCascade
shouldn
'
t
be
processed
during
\
animation
-
only
traversal
"
)
;
context
.
thread_local
.
bloom_filter
.
insert_parents_recovering
(
element
traversal_data
.
current_dom_depth
)
;
context
.
thread_local
.
bloom_filter
.
assert_complete
(
element
)
;
let
target
=
StyleSharingTarget
:
:
new
(
element
)
;
let
sharing_result
=
target
.
share_style_if_possible
(
context
data
)
;
if
let
StyleWasShared
(
index
had_damage
)
=
sharing_result
{
context
.
thread_local
.
statistics
.
styles_shared
+
=
1
;
context
.
thread_local
.
style_sharing_candidate_cache
.
touch
(
index
)
;
return
had_damage
;
}
context
.
thread_local
.
statistics
.
elements_matched
+
=
1
;
element
.
match_and_cascade
(
context
data
StyleSharingBehavior
:
:
Allow
)
}
CascadeWithReplacements
(
flags
)
=
>
{
context
.
thread_local
.
current_element_info
.
as_mut
(
)
.
unwrap
(
)
.
cascade_inputs
=
ElementCascadeInputs
:
:
new_from_element_data
(
data
)
;
let
important_rules_changed
=
element
.
replace_rules
(
flags
context
)
;
element
.
cascade_primary_and_pseudos
(
context
data
important_rules_changed
)
}
CascadeOnly
=
>
{
context
.
thread_local
.
current_element_info
.
as_mut
(
)
.
unwrap
(
)
.
cascade_inputs
=
ElementCascadeInputs
:
:
new_from_element_data
(
data
)
;
element
.
cascade_primary_and_pseudos
(
context
data
false
)
}
}
}
fn
preprocess_children
<
E
D
>
(
context
:
&
mut
StyleContext
<
E
>
element
:
E
propagated_hint
:
RestyleHint
reconstructed_ancestor
:
bool
)
where
E
:
TElement
D
:
DomTraversal
<
E
>
{
trace
!
(
"
preprocess_children
:
{
:
?
}
"
element
)
;
for
child
in
element
.
as_node
(
)
.
traversal_children
(
)
{
let
child
=
match
child
.
as_element
(
)
{
Some
(
el
)
=
>
el
None
=
>
continue
}
;
if
child
.
borrow_data
(
)
.
map_or
(
true
|
d
|
!
d
.
has_styles
(
)
)
{
continue
;
}
let
mut
child_data
=
unsafe
{
D
:
:
ensure_element_data
(
&
child
)
.
borrow_mut
(
)
}
;
trace
!
(
"
>
{
:
?
}
-
>
{
:
?
}
+
{
:
?
}
pseudo
:
{
:
?
}
"
child
child_data
.
restyle
.
hint
propagated_hint
child
.
implemented_pseudo_element
(
)
)
;
if
reconstructed_ancestor
{
child_data
.
restyle
.
set_reconstructed_ancestor
(
)
;
}
child_data
.
restyle
.
hint
.
insert
(
propagated_hint
)
;
child_data
.
invalidate_style_if_needed
(
child
&
context
.
shared
)
;
}
}
pub
fn
clear_descendant_data
<
E
:
TElement
F
:
Fn
(
E
)
>
(
el
:
E
clear_data
:
&
F
)
{
for
kid
in
el
.
as_node
(
)
.
traversal_children
(
)
{
if
let
Some
(
kid
)
=
kid
.
as_element
(
)
{
if
kid
.
get_data
(
)
.
is_some
(
)
{
clear_data
(
kid
)
;
clear_descendant_data
(
kid
clear_data
)
;
}
}
}
unsafe
{
el
.
unset_dirty_descendants
(
)
;
el
.
unset_animation_only_dirty_descendants
(
)
;
}
}
