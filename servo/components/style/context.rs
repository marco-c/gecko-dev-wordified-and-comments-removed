#
!
[
deny
(
missing_docs
)
]
use
animation
:
:
Animation
;
use
app_units
:
:
Au
;
use
bloom
:
:
StyleBloom
;
use
data
:
:
ElementData
;
use
dom
:
:
{
OpaqueNode
TNode
TElement
}
;
use
error_reporting
:
:
ParseErrorReporter
;
use
euclid
:
:
Size2D
;
use
matching
:
:
StyleSharingCandidateCache
;
use
parking_lot
:
:
RwLock
;
use
properties
:
:
ComputedValues
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
sync
:
:
{
Arc
Mutex
}
;
use
std
:
:
sync
:
:
mpsc
:
:
Sender
;
use
stylist
:
:
Stylist
;
use
timer
:
:
Timer
;
pub
struct
ThreadLocalStyleContextCreationInfo
{
new_animations_sender
:
Sender
<
Animation
>
}
impl
ThreadLocalStyleContextCreationInfo
{
pub
fn
new
(
animations_sender
:
Sender
<
Animation
>
)
-
>
Self
{
ThreadLocalStyleContextCreationInfo
{
new_animations_sender
:
animations_sender
}
}
}
#
[
derive
(
PartialEq
Eq
Copy
Clone
Hash
Debug
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
enum
QuirksMode
{
Quirks
LimitedQuirks
NoQuirks
}
pub
struct
SharedStyleContext
{
pub
viewport_size
:
Size2D
<
Au
>
pub
screen_size_changed
:
bool
pub
stylist
:
Arc
<
Stylist
>
pub
goal
:
ReflowGoal
pub
running_animations
:
Arc
<
RwLock
<
HashMap
<
OpaqueNode
Vec
<
Animation
>
>
>
>
pub
expired_animations
:
Arc
<
RwLock
<
HashMap
<
OpaqueNode
Vec
<
Animation
>
>
>
>
pub
error_reporter
:
Box
<
ParseErrorReporter
+
Sync
>
pub
local_context_creation_data
:
Mutex
<
ThreadLocalStyleContextCreationInfo
>
pub
timer
:
Timer
pub
quirks_mode
:
QuirksMode
pub
default_computed_values
:
Arc
<
ComputedValues
>
}
struct
CurrentElementInfo
{
element
:
OpaqueNode
is_initial_style
:
bool
}
pub
struct
ThreadLocalStyleContext
<
E
:
TElement
>
{
pub
style_sharing_candidate_cache
:
StyleSharingCandidateCache
<
E
>
pub
bloom_filter
:
StyleBloom
<
E
>
pub
new_animations_sender
:
Sender
<
Animation
>
current_element_info
:
Option
<
CurrentElementInfo
>
}
impl
<
E
:
TElement
>
ThreadLocalStyleContext
<
E
>
{
pub
fn
new
(
shared
:
&
SharedStyleContext
)
-
>
Self
{
ThreadLocalStyleContext
{
style_sharing_candidate_cache
:
StyleSharingCandidateCache
:
:
new
(
)
bloom_filter
:
StyleBloom
:
:
new
(
)
new_animations_sender
:
shared
.
local_context_creation_data
.
lock
(
)
.
unwrap
(
)
.
new_animations_sender
.
clone
(
)
current_element_info
:
None
}
}
pub
fn
begin_element
(
&
mut
self
element
:
E
data
:
&
ElementData
)
{
debug_assert
!
(
self
.
current_element_info
.
is_none
(
)
)
;
self
.
current_element_info
=
Some
(
CurrentElementInfo
{
element
:
element
.
as_node
(
)
.
opaque
(
)
is_initial_style
:
!
data
.
has_styles
(
)
}
)
;
}
pub
fn
end_element
(
&
mut
self
element
:
E
)
{
debug_assert
!
(
self
.
current_element_info
.
is_some
(
)
)
;
debug_assert
!
(
self
.
current_element_info
.
as_ref
(
)
.
unwrap
(
)
.
element
=
=
element
.
as_node
(
)
.
opaque
(
)
)
;
self
.
current_element_info
=
None
;
}
pub
fn
is_initial_style
(
&
self
)
-
>
bool
{
self
.
current_element_info
.
as_ref
(
)
.
unwrap
(
)
.
is_initial_style
}
}
#
[
cfg
(
debug_assertions
)
]
impl
<
E
:
TElement
>
Drop
for
ThreadLocalStyleContext
<
E
>
{
fn
drop
(
&
mut
self
)
{
debug_assert
!
(
self
.
current_element_info
.
is_none
(
)
)
;
}
}
pub
struct
StyleContext
<
'
a
E
:
TElement
+
'
a
>
{
pub
shared
:
&
'
a
SharedStyleContext
pub
thread_local
:
&
'
a
mut
ThreadLocalStyleContext
<
E
>
}
#
[
derive
(
PartialEq
Copy
Clone
Debug
)
]
pub
enum
ReflowGoal
{
ForDisplay
ForScriptQuery
}
