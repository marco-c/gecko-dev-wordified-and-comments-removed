#
[
cfg
(
feature
=
"
servo
"
)
]
use
animation
:
:
Animation
;
use
app_units
:
:
Au
;
use
bloom
:
:
StyleBloom
;
use
data
:
:
{
EagerPseudoStyles
ElementData
}
;
use
dom
:
:
{
TElement
SendElement
}
;
#
[
cfg
(
feature
=
"
servo
"
)
]
use
dom
:
:
OpaqueNode
;
use
euclid
:
:
Size2D
;
use
euclid
:
:
TypedScale
;
use
fnv
:
:
FnvHashMap
;
use
font_metrics
:
:
FontMetricsProvider
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
gecko_bindings
:
:
structs
;
use
parallel
:
:
{
STACK_SAFETY_MARGIN_KB
STYLE_THREAD_STACK_SIZE_KB
}
;
#
[
cfg
(
feature
=
"
servo
"
)
]
use
parking_lot
:
:
RwLock
;
use
properties
:
:
ComputedValues
;
#
[
cfg
(
feature
=
"
servo
"
)
]
use
properties
:
:
PropertyId
;
use
rule_cache
:
:
RuleCache
;
use
rule_tree
:
:
StrongRuleNode
;
use
selector_parser
:
:
{
EAGER_PSEUDO_COUNT
SnapshotMap
}
;
use
selectors
:
:
NthIndexCache
;
use
selectors
:
:
matching
:
:
ElementSelectorFlags
;
use
servo_arc
:
:
Arc
;
#
[
cfg
(
feature
=
"
servo
"
)
]
use
servo_atoms
:
:
Atom
;
use
shared_lock
:
:
StylesheetGuards
;
use
sharing
:
:
StyleSharingCache
;
use
std
:
:
fmt
;
use
std
:
:
ops
;
#
[
cfg
(
feature
=
"
servo
"
)
]
use
std
:
:
sync
:
:
Mutex
;
#
[
cfg
(
feature
=
"
servo
"
)
]
use
std
:
:
sync
:
:
mpsc
:
:
Sender
;
use
style_traits
:
:
CSSPixel
;
use
style_traits
:
:
DevicePixel
;
#
[
cfg
(
feature
=
"
servo
"
)
]
use
style_traits
:
:
SpeculativePainter
;
use
stylist
:
:
Stylist
;
use
thread_state
:
:
{
self
ThreadState
}
;
use
time
;
use
timer
:
:
Timer
;
use
traversal
:
:
DomTraversal
;
use
traversal_flags
:
:
TraversalFlags
;
use
uluru
:
:
{
Entry
LRUCache
}
;
pub
use
selectors
:
:
matching
:
:
QuirksMode
;
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
struct
ThreadLocalStyleContextCreationInfo
{
new_animations_sender
:
Sender
<
Animation
>
}
#
[
cfg
(
feature
=
"
servo
"
)
]
impl
ThreadLocalStyleContextCreationInfo
{
pub
fn
new
(
animations_sender
:
Sender
<
Animation
>
)
-
>
Self
{
ThreadLocalStyleContextCreationInfo
{
new_animations_sender
:
animations_sender
}
}
}
#
[
derive
(
Clone
)
]
pub
struct
StyleSystemOptions
{
pub
disable_style_sharing_cache
:
bool
pub
dump_style_statistics
:
bool
pub
style_statistics_threshold
:
usize
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
fn
get_env_bool
(
name
:
&
str
)
-
>
bool
{
use
std
:
:
env
;
match
env
:
:
var
(
name
)
{
Ok
(
s
)
=
>
!
s
.
is_empty
(
)
Err
(
_
)
=
>
false
}
}
const
DEFAULT_STATISTICS_THRESHOLD
:
usize
=
50
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
fn
get_env_usize
(
name
:
&
str
)
-
>
Option
<
usize
>
{
use
std
:
:
env
;
env
:
:
var
(
name
)
.
ok
(
)
.
map
(
|
s
|
{
s
.
parse
:
:
<
usize
>
(
)
.
expect
(
"
Couldn
'
t
parse
environmental
variable
as
usize
"
)
}
)
}
impl
Default
for
StyleSystemOptions
{
#
[
cfg
(
feature
=
"
servo
"
)
]
fn
default
(
)
-
>
Self
{
use
servo_config
:
:
opts
;
StyleSystemOptions
{
disable_style_sharing_cache
:
opts
:
:
get
(
)
.
disable_share_style_cache
dump_style_statistics
:
opts
:
:
get
(
)
.
style_sharing_stats
style_statistics_threshold
:
DEFAULT_STATISTICS_THRESHOLD
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
fn
default
(
)
-
>
Self
{
StyleSystemOptions
{
disable_style_sharing_cache
:
get_env_bool
(
"
DISABLE_STYLE_SHARING_CACHE
"
)
dump_style_statistics
:
get_env_bool
(
"
DUMP_STYLE_STATISTICS
"
)
style_statistics_threshold
:
get_env_usize
(
"
STYLE_STATISTICS_THRESHOLD
"
)
.
unwrap_or
(
DEFAULT_STATISTICS_THRESHOLD
)
}
}
}
impl
StyleSystemOptions
{
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
fn
is_nightly
(
&
self
)
-
>
bool
{
false
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
#
[
inline
]
pub
fn
is_nightly
(
&
self
)
-
>
bool
{
structs
:
:
GECKO_IS_NIGHTLY
}
}
pub
struct
SharedStyleContext
<
'
a
>
{
pub
stylist
:
&
'
a
Stylist
pub
visited_styles_enabled
:
bool
pub
options
:
StyleSystemOptions
pub
guards
:
StylesheetGuards
<
'
a
>
pub
timer
:
Timer
pub
traversal_flags
:
TraversalFlags
pub
snapshot_map
:
&
'
a
SnapshotMap
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
running_animations
:
Arc
<
RwLock
<
FnvHashMap
<
OpaqueNode
Vec
<
Animation
>
>
>
>
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
expired_animations
:
Arc
<
RwLock
<
FnvHashMap
<
OpaqueNode
Vec
<
Animation
>
>
>
>
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
registered_speculative_painters
:
&
'
a
RegisteredSpeculativePainters
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
local_context_creation_data
:
Mutex
<
ThreadLocalStyleContextCreationInfo
>
}
impl
<
'
a
>
SharedStyleContext
<
'
a
>
{
pub
fn
viewport_size
(
&
self
)
-
>
Size2D
<
Au
>
{
self
.
stylist
.
device
(
)
.
au_viewport_size
(
)
}
pub
fn
device_pixel_ratio
(
&
self
)
-
>
TypedScale
<
f32
CSSPixel
DevicePixel
>
{
self
.
stylist
.
device
(
)
.
device_pixel_ratio
(
)
}
pub
fn
quirks_mode
(
&
self
)
-
>
QuirksMode
{
self
.
stylist
.
quirks_mode
(
)
}
}
#
[
derive
(
Clone
Debug
Default
)
]
pub
struct
CascadeInputs
{
pub
rules
:
Option
<
StrongRuleNode
>
pub
visited_rules
:
Option
<
StrongRuleNode
>
}
impl
CascadeInputs
{
pub
fn
new_from_style
(
style
:
&
ComputedValues
)
-
>
Self
{
CascadeInputs
{
rules
:
style
.
rules
.
clone
(
)
visited_rules
:
style
.
visited_style
(
)
.
and_then
(
|
v
|
v
.
rules
.
clone
(
)
)
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
EagerPseudoCascadeInputs
(
Option
<
[
Option
<
CascadeInputs
>
;
EAGER_PSEUDO_COUNT
]
>
)
;
impl
Clone
for
EagerPseudoCascadeInputs
{
fn
clone
(
&
self
)
-
>
Self
{
if
self
.
0
.
is_none
(
)
{
return
EagerPseudoCascadeInputs
(
None
)
}
let
self_inputs
=
self
.
0
.
as_ref
(
)
.
unwrap
(
)
;
let
mut
inputs
:
[
Option
<
CascadeInputs
>
;
EAGER_PSEUDO_COUNT
]
=
Default
:
:
default
(
)
;
for
i
in
0
.
.
EAGER_PSEUDO_COUNT
{
inputs
[
i
]
=
self_inputs
[
i
]
.
clone
(
)
;
}
EagerPseudoCascadeInputs
(
Some
(
inputs
)
)
}
}
impl
EagerPseudoCascadeInputs
{
fn
new_from_style
(
styles
:
&
EagerPseudoStyles
)
-
>
Self
{
EagerPseudoCascadeInputs
(
styles
.
as_optional_array
(
)
.
map
(
|
styles
|
{
let
mut
inputs
:
[
Option
<
CascadeInputs
>
;
EAGER_PSEUDO_COUNT
]
=
Default
:
:
default
(
)
;
for
i
in
0
.
.
EAGER_PSEUDO_COUNT
{
inputs
[
i
]
=
styles
[
i
]
.
as_ref
(
)
.
map
(
|
s
|
CascadeInputs
:
:
new_from_style
(
s
)
)
;
}
inputs
}
)
)
}
pub
fn
into_array
(
self
)
-
>
Option
<
[
Option
<
CascadeInputs
>
;
EAGER_PSEUDO_COUNT
]
>
{
self
.
0
}
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
ElementCascadeInputs
{
pub
primary
:
CascadeInputs
pub
pseudos
:
EagerPseudoCascadeInputs
}
impl
ElementCascadeInputs
{
#
[
inline
]
pub
fn
new_from_element_data
(
data
:
&
ElementData
)
-
>
Self
{
debug_assert
!
(
data
.
has_styles
(
)
)
;
ElementCascadeInputs
{
primary
:
CascadeInputs
:
:
new_from_style
(
data
.
styles
.
primary
(
)
)
pseudos
:
EagerPseudoCascadeInputs
:
:
new_from_style
(
&
data
.
styles
.
pseudos
)
}
}
}
#
[
derive
(
Default
)
]
pub
struct
PerThreadTraversalStatistics
{
pub
elements_traversed
:
u32
pub
elements_styled
:
u32
pub
elements_matched
:
u32
pub
styles_shared
:
u32
pub
styles_reused
:
u32
}
impl
<
'
a
>
ops
:
:
Add
for
&
'
a
PerThreadTraversalStatistics
{
type
Output
=
PerThreadTraversalStatistics
;
fn
add
(
self
other
:
Self
)
-
>
PerThreadTraversalStatistics
{
PerThreadTraversalStatistics
{
elements_traversed
:
self
.
elements_traversed
+
other
.
elements_traversed
elements_styled
:
self
.
elements_styled
+
other
.
elements_styled
elements_matched
:
self
.
elements_matched
+
other
.
elements_matched
styles_shared
:
self
.
styles_shared
+
other
.
styles_shared
styles_reused
:
self
.
styles_reused
+
other
.
styles_reused
}
}
}
#
[
derive
(
Default
)
]
pub
struct
TraversalStatistics
{
pub
aggregated
:
PerThreadTraversalStatistics
pub
selectors
:
u32
pub
revalidation_selectors
:
u32
pub
dependency_selectors
:
u32
pub
declarations
:
u32
pub
stylist_rebuilds
:
u32
pub
traversal_time_ms
:
f64
pub
is_parallel
:
bool
pub
is_large
:
bool
}
impl
fmt
:
:
Display
for
TraversalStatistics
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
debug_assert
!
(
self
.
traversal_time_ms
!
=
0
.
0
"
should
have
set
traversal
time
"
)
;
writeln
!
(
f
"
[
PERF
]
perf
block
start
"
)
?
;
writeln
!
(
f
"
[
PERF
]
traversal
{
}
"
if
self
.
is_parallel
{
"
parallel
"
}
else
{
"
sequential
"
}
)
?
;
writeln
!
(
f
"
[
PERF
]
elements_traversed
{
}
"
self
.
aggregated
.
elements_traversed
)
?
;
writeln
!
(
f
"
[
PERF
]
elements_styled
{
}
"
self
.
aggregated
.
elements_styled
)
?
;
writeln
!
(
f
"
[
PERF
]
elements_matched
{
}
"
self
.
aggregated
.
elements_matched
)
?
;
writeln
!
(
f
"
[
PERF
]
styles_shared
{
}
"
self
.
aggregated
.
styles_shared
)
?
;
writeln
!
(
f
"
[
PERF
]
styles_reused
{
}
"
self
.
aggregated
.
styles_reused
)
?
;
writeln
!
(
f
"
[
PERF
]
selectors
{
}
"
self
.
selectors
)
?
;
writeln
!
(
f
"
[
PERF
]
revalidation_selectors
{
}
"
self
.
revalidation_selectors
)
?
;
writeln
!
(
f
"
[
PERF
]
dependency_selectors
{
}
"
self
.
dependency_selectors
)
?
;
writeln
!
(
f
"
[
PERF
]
declarations
{
}
"
self
.
declarations
)
?
;
writeln
!
(
f
"
[
PERF
]
stylist_rebuilds
{
}
"
self
.
stylist_rebuilds
)
?
;
writeln
!
(
f
"
[
PERF
]
traversal_time_ms
{
}
"
self
.
traversal_time_ms
)
?
;
writeln
!
(
f
"
[
PERF
]
perf
block
end
"
)
}
}
impl
TraversalStatistics
{
pub
fn
new
<
E
D
>
(
aggregated
:
PerThreadTraversalStatistics
traversal
:
&
D
parallel
:
bool
start
:
f64
)
-
>
TraversalStatistics
where
E
:
TElement
D
:
DomTraversal
<
E
>
{
let
threshold
=
traversal
.
shared_context
(
)
.
options
.
style_statistics_threshold
;
let
stylist
=
traversal
.
shared_context
(
)
.
stylist
;
let
is_large
=
aggregated
.
elements_traversed
as
usize
>
=
threshold
;
TraversalStatistics
{
aggregated
selectors
:
stylist
.
num_selectors
(
)
as
u32
revalidation_selectors
:
stylist
.
num_revalidation_selectors
(
)
as
u32
dependency_selectors
:
stylist
.
num_invalidations
(
)
as
u32
declarations
:
stylist
.
num_declarations
(
)
as
u32
stylist_rebuilds
:
stylist
.
num_rebuilds
(
)
as
u32
traversal_time_ms
:
(
time
:
:
precise_time_s
(
)
-
start
)
*
1000
.
0
is_parallel
:
parallel
is_large
}
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
bitflags
!
{
/
/
/
Represents
which
tasks
are
performed
in
a
SequentialTask
of
/
/
/
UpdateAnimations
which
is
a
result
of
normal
restyle
.
pub
struct
UpdateAnimationsTasks
:
u8
{
/
/
/
Update
CSS
Animations
.
const
CSS_ANIMATIONS
=
structs
:
:
UpdateAnimationsTasks_CSSAnimations
;
/
/
/
Update
CSS
Transitions
.
const
CSS_TRANSITIONS
=
structs
:
:
UpdateAnimationsTasks_CSSTransitions
;
/
/
/
Update
effect
properties
.
const
EFFECT_PROPERTIES
=
structs
:
:
UpdateAnimationsTasks_EffectProperties
;
/
/
/
Update
animation
cacade
results
for
animations
running
on
the
compositor
.
const
CASCADE_RESULTS
=
structs
:
:
UpdateAnimationsTasks_CascadeResults
;
/
/
/
Display
property
was
changed
from
none
.
/
/
/
Script
animations
keep
alive
on
display
:
none
elements
so
we
need
to
trigger
/
/
/
the
second
animation
restyles
for
the
script
animations
in
the
case
where
/
/
/
the
display
property
was
changed
from
'
none
'
to
others
.
const
DISPLAY_CHANGED_FROM_NONE
=
structs
:
:
UpdateAnimationsTasks_DisplayChangedFromNone
;
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
bitflags
!
{
/
/
/
Represents
which
tasks
are
performed
in
a
SequentialTask
as
a
result
of
/
/
/
animation
-
only
restyle
.
pub
struct
PostAnimationTasks
:
u8
{
/
/
/
Display
property
was
changed
from
none
in
animation
-
only
restyle
so
/
/
/
that
we
need
to
resolve
styles
for
descendants
in
a
subsequent
/
/
/
normal
restyle
.
const
DISPLAY_CHANGED_FROM_NONE_FOR_SMIL
=
0x01
;
}
}
pub
enum
SequentialTask
<
E
:
TElement
>
{
Unused
(
SendElement
<
E
>
)
#
[
cfg
(
feature
=
"
gecko
"
)
]
UpdateAnimations
{
el
:
SendElement
<
E
>
before_change_style
:
Option
<
Arc
<
ComputedValues
>
>
tasks
:
UpdateAnimationsTasks
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
PostAnimation
{
el
:
SendElement
<
E
>
tasks
:
PostAnimationTasks
}
}
impl
<
E
:
TElement
>
SequentialTask
<
E
>
{
pub
fn
execute
(
self
)
{
use
self
:
:
SequentialTask
:
:
*
;
debug_assert_eq
!
(
thread_state
:
:
get
(
)
ThreadState
:
:
LAYOUT
)
;
match
self
{
Unused
(
_
)
=
>
unreachable
!
(
)
#
[
cfg
(
feature
=
"
gecko
"
)
]
UpdateAnimations
{
el
before_change_style
tasks
}
=
>
{
el
.
update_animations
(
before_change_style
tasks
)
;
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
PostAnimation
{
el
tasks
}
=
>
{
el
.
process_post_animation
(
tasks
)
;
}
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
fn
update_animations
(
el
:
E
before_change_style
:
Option
<
Arc
<
ComputedValues
>
>
tasks
:
UpdateAnimationsTasks
)
-
>
Self
{
use
self
:
:
SequentialTask
:
:
*
;
UpdateAnimations
{
el
:
unsafe
{
SendElement
:
:
new
(
el
)
}
before_change_style
tasks
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
fn
process_post_animation
(
el
:
E
tasks
:
PostAnimationTasks
)
-
>
Self
{
use
self
:
:
SequentialTask
:
:
*
;
PostAnimation
{
el
:
unsafe
{
SendElement
:
:
new
(
el
)
}
tasks
}
}
}
type
CacheItem
<
E
>
=
(
SendElement
<
E
>
ElementSelectorFlags
)
;
pub
struct
SelectorFlagsMap
<
E
:
TElement
>
{
map
:
FnvHashMap
<
SendElement
<
E
>
ElementSelectorFlags
>
cache
:
LRUCache
<
[
Entry
<
CacheItem
<
E
>
>
;
4
+
1
]
>
}
#
[
cfg
(
debug_assertions
)
]
impl
<
E
:
TElement
>
Drop
for
SelectorFlagsMap
<
E
>
{
fn
drop
(
&
mut
self
)
{
debug_assert
!
(
self
.
map
.
is_empty
(
)
)
;
}
}
impl
<
E
:
TElement
>
SelectorFlagsMap
<
E
>
{
pub
fn
new
(
)
-
>
Self
{
SelectorFlagsMap
{
map
:
FnvHashMap
:
:
default
(
)
cache
:
LRUCache
:
:
default
(
)
}
}
pub
fn
insert_flags
(
&
mut
self
element
:
E
flags
:
ElementSelectorFlags
)
{
let
el
=
unsafe
{
SendElement
:
:
new
(
element
)
}
;
if
let
Some
(
item
)
=
self
.
cache
.
find
(
|
x
|
x
.
0
=
=
el
)
{
if
!
item
.
1
.
contains
(
flags
)
{
item
.
1
.
insert
(
flags
)
;
self
.
map
.
get_mut
(
&
el
)
.
unwrap
(
)
.
insert
(
flags
)
;
}
return
;
}
let
f
=
self
.
map
.
entry
(
el
)
.
or_insert
(
ElementSelectorFlags
:
:
empty
(
)
)
;
*
f
|
=
flags
;
self
.
cache
.
insert
(
(
unsafe
{
SendElement
:
:
new
(
element
)
}
*
f
)
)
}
fn
apply_flags
(
&
mut
self
)
{
debug_assert_eq
!
(
thread_state
:
:
get
(
)
ThreadState
:
:
LAYOUT
)
;
self
.
cache
.
evict_all
(
)
;
for
(
el
flags
)
in
self
.
map
.
drain
(
)
{
unsafe
{
el
.
set_selector_flags
(
flags
)
;
}
}
}
}
pub
struct
SequentialTaskList
<
E
>
(
Vec
<
SequentialTask
<
E
>
>
)
where
E
:
TElement
;
impl
<
E
>
ops
:
:
Deref
for
SequentialTaskList
<
E
>
where
E
:
TElement
{
type
Target
=
Vec
<
SequentialTask
<
E
>
>
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
self
.
0
}
}
impl
<
E
>
ops
:
:
DerefMut
for
SequentialTaskList
<
E
>
where
E
:
TElement
{
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
Self
:
:
Target
{
&
mut
self
.
0
}
}
impl
<
E
>
Drop
for
SequentialTaskList
<
E
>
where
E
:
TElement
{
fn
drop
(
&
mut
self
)
{
debug_assert_eq
!
(
thread_state
:
:
get
(
)
ThreadState
:
:
LAYOUT
)
;
for
task
in
self
.
0
.
drain
(
.
.
)
{
task
.
execute
(
)
}
}
}
pub
struct
StackLimitChecker
{
lower_limit
:
usize
}
impl
StackLimitChecker
{
#
[
inline
(
never
)
]
pub
fn
new
(
stack_size_limit
:
usize
)
-
>
Self
{
StackLimitChecker
{
lower_limit
:
StackLimitChecker
:
:
get_sp
(
)
-
stack_size_limit
}
}
#
[
inline
(
never
)
]
pub
fn
limit_exceeded
(
&
self
)
-
>
bool
{
let
curr_sp
=
StackLimitChecker
:
:
get_sp
(
)
;
if
cfg
!
(
debug_assertions
)
{
let
stack_bottom
=
self
.
lower_limit
-
STACK_SAFETY_MARGIN_KB
*
1024
;
debug_assert
!
(
stack_bottom
<
curr_sp
)
;
let
distance_to_stack_bottom
=
curr_sp
-
stack_bottom
;
let
max_allowable_distance
=
(
STYLE_THREAD_STACK_SIZE_KB
+
10
)
*
1024
;
debug_assert
!
(
distance_to_stack_bottom
<
=
max_allowable_distance
)
;
}
curr_sp
<
=
self
.
lower_limit
}
#
[
inline
(
always
)
]
fn
get_sp
(
)
-
>
usize
{
let
mut
foo
:
usize
=
42
;
(
&
mut
foo
as
*
mut
usize
)
as
usize
}
}
pub
struct
ThreadLocalStyleContext
<
E
:
TElement
>
{
pub
sharing_cache
:
StyleSharingCache
<
E
>
pub
rule_cache
:
RuleCache
pub
bloom_filter
:
StyleBloom
<
E
>
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
new_animations_sender
:
Sender
<
Animation
>
pub
tasks
:
SequentialTaskList
<
E
>
pub
selector_flags
:
SelectorFlagsMap
<
E
>
pub
statistics
:
PerThreadTraversalStatistics
pub
font_metrics_provider
:
E
:
:
FontMetricsProvider
pub
stack_limit_checker
:
StackLimitChecker
pub
nth_index_cache
:
NthIndexCache
}
impl
<
E
:
TElement
>
ThreadLocalStyleContext
<
E
>
{
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
fn
new
(
shared
:
&
SharedStyleContext
)
-
>
Self
{
ThreadLocalStyleContext
{
sharing_cache
:
StyleSharingCache
:
:
new
(
)
rule_cache
:
RuleCache
:
:
new
(
)
bloom_filter
:
StyleBloom
:
:
new
(
)
new_animations_sender
:
shared
.
local_context_creation_data
.
lock
(
)
.
unwrap
(
)
.
new_animations_sender
.
clone
(
)
tasks
:
SequentialTaskList
(
Vec
:
:
new
(
)
)
selector_flags
:
SelectorFlagsMap
:
:
new
(
)
statistics
:
PerThreadTraversalStatistics
:
:
default
(
)
font_metrics_provider
:
E
:
:
FontMetricsProvider
:
:
create_from
(
shared
)
stack_limit_checker
:
StackLimitChecker
:
:
new
(
(
STYLE_THREAD_STACK_SIZE_KB
-
STACK_SAFETY_MARGIN_KB
)
*
1024
)
nth_index_cache
:
NthIndexCache
:
:
default
(
)
}
}
#
[
cfg
(
feature
=
"
gecko
"
)
]
pub
fn
new
(
shared
:
&
SharedStyleContext
)
-
>
Self
{
ThreadLocalStyleContext
{
sharing_cache
:
StyleSharingCache
:
:
new
(
)
rule_cache
:
RuleCache
:
:
new
(
)
bloom_filter
:
StyleBloom
:
:
new
(
)
tasks
:
SequentialTaskList
(
Vec
:
:
new
(
)
)
selector_flags
:
SelectorFlagsMap
:
:
new
(
)
statistics
:
PerThreadTraversalStatistics
:
:
default
(
)
font_metrics_provider
:
E
:
:
FontMetricsProvider
:
:
create_from
(
shared
)
stack_limit_checker
:
StackLimitChecker
:
:
new
(
(
STYLE_THREAD_STACK_SIZE_KB
-
STACK_SAFETY_MARGIN_KB
)
*
1024
)
nth_index_cache
:
NthIndexCache
:
:
default
(
)
}
}
}
impl
<
E
:
TElement
>
Drop
for
ThreadLocalStyleContext
<
E
>
{
fn
drop
(
&
mut
self
)
{
debug_assert_eq
!
(
thread_state
:
:
get
(
)
ThreadState
:
:
LAYOUT
)
;
self
.
selector_flags
.
apply_flags
(
)
;
}
}
pub
struct
StyleContext
<
'
a
E
:
TElement
+
'
a
>
{
pub
shared
:
&
'
a
SharedStyleContext
<
'
a
>
pub
thread_local
:
&
'
a
mut
ThreadLocalStyleContext
<
E
>
}
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
trait
RegisteredSpeculativePainter
:
SpeculativePainter
{
fn
name
(
&
self
)
-
>
Atom
;
fn
properties
(
&
self
)
-
>
&
FnvHashMap
<
Atom
PropertyId
>
;
}
#
[
cfg
(
feature
=
"
servo
"
)
]
pub
trait
RegisteredSpeculativePainters
:
Sync
{
fn
get
(
&
self
name
:
&
Atom
)
-
>
Option
<
&
RegisteredSpeculativePainter
>
;
}
