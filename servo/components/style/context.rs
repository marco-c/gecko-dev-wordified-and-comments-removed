use
animation
:
:
Animation
;
use
app_units
:
:
Au
;
use
dom
:
:
OpaqueNode
;
use
error_reporting
:
:
ParseErrorReporter
;
use
euclid
:
:
Size2D
;
use
matching
:
:
{
ApplicableDeclarationsCache
StyleSharingCandidateCache
}
;
use
properties
:
:
ComputedValues
;
use
selector_impl
:
:
SelectorImplExt
;
use
selector_matching
:
:
Stylist
;
use
std
:
:
cell
:
:
RefCell
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
sync
:
:
mpsc
:
:
Sender
;
use
std
:
:
sync
:
:
{
Arc
Mutex
RwLock
}
;
pub
struct
SharedStyleContext
<
Impl
:
SelectorImplExt
>
{
pub
viewport_size
:
Size2D
<
Au
>
pub
screen_size_changed
:
bool
pub
stylist
:
Arc
<
Stylist
<
Impl
>
>
pub
generation
:
u32
pub
new_animations_sender
:
Mutex
<
Sender
<
Animation
<
Impl
>
>
>
pub
goal
:
ReflowGoal
pub
running_animations
:
Arc
<
RwLock
<
HashMap
<
OpaqueNode
Vec
<
Animation
<
Impl
>
>
>
>
>
pub
expired_animations
:
Arc
<
RwLock
<
HashMap
<
OpaqueNode
Vec
<
Animation
<
Impl
>
>
>
>
>
pub
error_reporter
:
Box
<
ParseErrorReporter
+
Sync
>
}
pub
struct
LocalStyleContext
<
C
:
ComputedValues
>
{
pub
applicable_declarations_cache
:
RefCell
<
ApplicableDeclarationsCache
<
C
>
>
pub
style_sharing_candidate_cache
:
RefCell
<
StyleSharingCandidateCache
<
C
>
>
}
pub
trait
StyleContext
<
'
a
Impl
:
SelectorImplExt
>
{
fn
shared_context
(
&
self
)
-
>
&
'
a
SharedStyleContext
<
Impl
>
;
fn
local_context
(
&
self
)
-
>
&
LocalStyleContext
<
Impl
:
:
ComputedValues
>
;
}
#
[
derive
(
PartialEq
Copy
Clone
Debug
)
]
pub
enum
ReflowGoal
{
ForDisplay
ForScriptQuery
}
