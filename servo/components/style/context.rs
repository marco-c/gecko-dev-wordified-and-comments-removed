use
animation
:
:
Animation
;
use
app_units
:
:
Au
;
use
dom
:
:
OpaqueNode
;
use
error_reporting
:
:
ParseErrorReporter
;
use
euclid
:
:
Size2D
;
use
matching
:
:
StyleSharingCandidateCache
;
use
parking_lot
:
:
RwLock
;
use
std
:
:
cell
:
:
RefCell
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
sync
:
:
{
Arc
Mutex
}
;
use
std
:
:
sync
:
:
mpsc
:
:
Sender
;
use
stylist
:
:
Stylist
;
use
timer
:
:
Timer
;
pub
struct
ThreadLocalStyleContextCreationInfo
{
new_animations_sender
:
Sender
<
Animation
>
}
impl
ThreadLocalStyleContextCreationInfo
{
pub
fn
new
(
animations_sender
:
Sender
<
Animation
>
)
-
>
Self
{
ThreadLocalStyleContextCreationInfo
{
new_animations_sender
:
animations_sender
}
}
}
pub
struct
SharedStyleContext
{
pub
viewport_size
:
Size2D
<
Au
>
pub
screen_size_changed
:
bool
pub
stylist
:
Arc
<
Stylist
>
pub
generation
:
u32
pub
goal
:
ReflowGoal
pub
running_animations
:
Arc
<
RwLock
<
HashMap
<
OpaqueNode
Vec
<
Animation
>
>
>
>
pub
expired_animations
:
Arc
<
RwLock
<
HashMap
<
OpaqueNode
Vec
<
Animation
>
>
>
>
pub
error_reporter
:
Box
<
ParseErrorReporter
+
Sync
>
pub
local_context_creation_data
:
Mutex
<
ThreadLocalStyleContextCreationInfo
>
pub
timer
:
Timer
}
pub
struct
ThreadLocalStyleContext
{
pub
style_sharing_candidate_cache
:
RefCell
<
StyleSharingCandidateCache
>
pub
new_animations_sender
:
Sender
<
Animation
>
}
impl
ThreadLocalStyleContext
{
pub
fn
new
(
local_context_creation_data
:
&
ThreadLocalStyleContextCreationInfo
)
-
>
Self
{
ThreadLocalStyleContext
{
style_sharing_candidate_cache
:
RefCell
:
:
new
(
StyleSharingCandidateCache
:
:
new
(
)
)
new_animations_sender
:
local_context_creation_data
.
new_animations_sender
.
clone
(
)
}
}
}
pub
struct
StyleContext
<
'
a
>
{
pub
shared
:
&
'
a
SharedStyleContext
pub
thread_local
:
&
'
a
ThreadLocalStyleContext
}
#
[
derive
(
PartialEq
Copy
Clone
Debug
)
]
pub
enum
ReflowGoal
{
ForDisplay
ForScriptQuery
}
