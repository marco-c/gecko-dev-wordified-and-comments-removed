use
app_units
:
:
Au
;
use
gecko
:
:
values
:
:
{
convert_rgba_to_nscolor
convert_nscolor_to_rgba
}
;
use
gecko_bindings
:
:
structs
:
:
nsCSSShadowItem
;
use
values
:
:
computed
:
:
{
Color
Shadow
}
;
impl
nsCSSShadowItem
{
pub
fn
set_from_shadow
(
&
mut
self
other
:
Shadow
)
{
self
.
mXOffset
=
other
.
offset_x
.
0
;
self
.
mYOffset
=
other
.
offset_y
.
0
;
self
.
mRadius
=
other
.
blur_radius
.
0
;
self
.
mSpread
=
other
.
spread_radius
.
0
;
self
.
mInset
=
other
.
inset
;
if
other
.
color
.
is_currentcolor
(
)
{
self
.
mHasColor
=
false
;
self
.
mColor
=
0
;
}
else
{
self
.
mHasColor
=
true
;
self
.
mColor
=
convert_rgba_to_nscolor
(
&
other
.
color
.
color
)
;
}
}
pub
fn
to_shadow
(
&
self
)
-
>
Shadow
{
Shadow
{
offset_x
:
Au
(
self
.
mXOffset
)
offset_y
:
Au
(
self
.
mYOffset
)
blur_radius
:
Au
(
self
.
mRadius
)
spread_radius
:
Au
(
self
.
mSpread
)
inset
:
self
.
mInset
color
:
Color
:
:
rgba
(
convert_nscolor_to_rgba
(
self
.
mColor
)
)
}
}
}
