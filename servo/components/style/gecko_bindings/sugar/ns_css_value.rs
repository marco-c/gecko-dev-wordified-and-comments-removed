use
gecko_bindings
:
:
bindings
:
:
Gecko_CSSValue_Drop
;
use
gecko_bindings
:
:
structs
:
:
{
nsCSSValue
nsCSSUnit
nsCSSValue_Array
}
;
use
std
:
:
mem
;
use
std
:
:
ops
:
:
Index
;
use
std
:
:
slice
;
impl
nsCSSValue
{
#
[
inline
]
pub
fn
null
(
)
-
>
Self
{
unsafe
{
mem
:
:
zeroed
(
)
}
}
pub
fn
integer_unchecked
(
&
self
)
-
>
i32
{
debug_assert
!
(
self
.
mUnit
=
=
nsCSSUnit
:
:
eCSSUnit_Integer
|
|
self
.
mUnit
=
=
nsCSSUnit
:
:
eCSSUnit_Enumerated
|
|
self
.
mUnit
=
=
nsCSSUnit
:
:
eCSSUnit_EnumColor
)
;
unsafe
{
*
self
.
mValue
.
mInt
.
as_ref
(
)
}
}
pub
fn
float_unchecked
(
&
self
)
-
>
f32
{
debug_assert
!
(
nsCSSUnit
:
:
eCSSUnit_Number
as
u32
<
=
self
.
mUnit
as
u32
)
;
unsafe
{
*
self
.
mValue
.
mFloat
.
as_ref
(
)
}
}
pub
unsafe
fn
array_unchecked
(
&
self
)
-
>
&
nsCSSValue_Array
{
debug_assert
!
(
nsCSSUnit
:
:
eCSSUnit_Array
as
u32
<
=
self
.
mUnit
as
u32
&
&
self
.
mUnit
as
u32
<
=
nsCSSUnit
:
:
eCSSUnit_Calc_Divided
as
u32
)
;
let
array
=
*
self
.
mValue
.
mArray
.
as_ref
(
)
;
debug_assert
!
(
!
array
.
is_null
(
)
)
;
&
*
array
}
}
impl
Drop
for
nsCSSValue
{
fn
drop
(
&
mut
self
)
{
unsafe
{
Gecko_CSSValue_Drop
(
self
)
}
;
}
}
impl
nsCSSValue_Array
{
#
[
inline
]
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
mCount
}
#
[
inline
]
fn
buffer
(
&
self
)
-
>
*
const
nsCSSValue
{
self
.
mArray
.
as_ptr
(
)
}
#
[
inline
]
pub
fn
as_slice
(
&
self
)
-
>
&
[
nsCSSValue
]
{
unsafe
{
slice
:
:
from_raw_parts
(
self
.
buffer
(
)
self
.
len
(
)
)
}
}
}
impl
Index
<
usize
>
for
nsCSSValue_Array
{
type
Output
=
nsCSSValue
;
#
[
inline
]
fn
index
(
&
self
i
:
usize
)
-
>
&
nsCSSValue
{
&
self
.
as_slice
(
)
[
i
]
}
}
