use
app_units
:
:
Au
;
use
gecko_bindings
:
:
bindings
;
use
gecko_bindings
:
:
structs
:
:
{
nsCSSValue
nsCSSUnit
}
;
use
gecko_bindings
:
:
structs
:
:
{
nsCSSValue_Array
nscolor
}
;
use
std
:
:
mem
;
use
std
:
:
ops
:
:
{
Index
IndexMut
}
;
use
std
:
:
slice
;
use
values
:
:
computed
:
:
LengthOrPercentage
;
use
values
:
:
specified
:
:
url
:
:
SpecifiedUrl
;
impl
nsCSSValue
{
#
[
inline
]
pub
fn
null
(
)
-
>
Self
{
unsafe
{
mem
:
:
zeroed
(
)
}
}
pub
fn
integer_unchecked
(
&
self
)
-
>
i32
{
debug_assert
!
(
self
.
mUnit
=
=
nsCSSUnit
:
:
eCSSUnit_Integer
|
|
self
.
mUnit
=
=
nsCSSUnit
:
:
eCSSUnit_Enumerated
|
|
self
.
mUnit
=
=
nsCSSUnit
:
:
eCSSUnit_EnumColor
)
;
unsafe
{
*
self
.
mValue
.
mInt
.
as_ref
(
)
}
}
pub
fn
integer
(
&
self
)
-
>
Option
<
i32
>
{
if
self
.
mUnit
=
=
nsCSSUnit
:
:
eCSSUnit_Integer
|
|
self
.
mUnit
=
=
nsCSSUnit
:
:
eCSSUnit_Enumerated
|
|
self
.
mUnit
=
=
nsCSSUnit
:
:
eCSSUnit_EnumColor
{
Some
(
unsafe
{
*
self
.
mValue
.
mInt
.
as_ref
(
)
}
)
}
else
{
None
}
}
pub
fn
color_value
(
&
self
)
-
>
Option
<
nscolor
>
{
if
self
.
mUnit
=
=
nsCSSUnit
:
:
eCSSUnit_RGBAColor
{
Some
(
unsafe
{
*
self
.
mValue
.
mColor
.
as_ref
(
)
}
)
}
else
{
None
}
}
pub
fn
float_unchecked
(
&
self
)
-
>
f32
{
debug_assert
!
(
nsCSSUnit
:
:
eCSSUnit_Number
as
u32
<
=
self
.
mUnit
as
u32
)
;
unsafe
{
*
self
.
mValue
.
mFloat
.
as_ref
(
)
}
}
pub
unsafe
fn
array_unchecked
(
&
self
)
-
>
&
nsCSSValue_Array
{
debug_assert
!
(
nsCSSUnit
:
:
eCSSUnit_Array
as
u32
<
=
self
.
mUnit
as
u32
&
&
self
.
mUnit
as
u32
<
=
nsCSSUnit
:
:
eCSSUnit_Calc_Divided
as
u32
)
;
let
array
=
*
self
.
mValue
.
mArray
.
as_ref
(
)
;
debug_assert
!
(
!
array
.
is_null
(
)
)
;
&
*
array
}
pub
unsafe
fn
set_lop
(
&
mut
self
lop
:
LengthOrPercentage
)
{
match
lop
{
LengthOrPercentage
:
:
Length
(
au
)
=
>
{
bindings
:
:
Gecko_CSSValue_SetAbsoluteLength
(
self
au
.
0
)
}
LengthOrPercentage
:
:
Percentage
(
pc
)
=
>
{
bindings
:
:
Gecko_CSSValue_SetPercentage
(
self
pc
)
}
LengthOrPercentage
:
:
Calc
(
calc
)
=
>
{
bindings
:
:
Gecko_CSSValue_SetCalc
(
self
calc
.
into
(
)
)
}
}
}
pub
unsafe
fn
get_lop
(
&
self
)
-
>
LengthOrPercentage
{
match
self
.
mUnit
{
nsCSSUnit
:
:
eCSSUnit_Pixel
=
>
{
LengthOrPercentage
:
:
Length
(
Au
(
bindings
:
:
Gecko_CSSValue_GetAbsoluteLength
(
self
)
)
)
}
nsCSSUnit
:
:
eCSSUnit_Percent
=
>
{
LengthOrPercentage
:
:
Percentage
(
bindings
:
:
Gecko_CSSValue_GetPercentage
(
self
)
)
}
nsCSSUnit
:
:
eCSSUnit_Calc
=
>
{
LengthOrPercentage
:
:
Calc
(
bindings
:
:
Gecko_CSSValue_GetCalc
(
self
)
.
into
(
)
)
}
x
=
>
panic
!
(
"
The
unit
should
not
be
{
:
?
}
"
x
)
}
}
pub
fn
set_string
(
&
mut
self
s
:
&
str
)
{
unsafe
{
bindings
:
:
Gecko_CSSValue_SetString
(
self
s
.
as_ptr
(
)
s
.
len
(
)
as
u32
)
}
}
pub
fn
set_ident
(
&
mut
self
s
:
&
str
)
{
unsafe
{
bindings
:
:
Gecko_CSSValue_SetIdent
(
self
s
.
as_ptr
(
)
s
.
len
(
)
as
u32
)
}
}
pub
fn
set_url
(
&
mut
self
url
:
&
SpecifiedUrl
)
{
unsafe
{
bindings
:
:
Gecko_CSSValue_SetURL
(
self
url
.
for_ffi
(
)
)
}
}
pub
fn
set_array
(
&
mut
self
len
:
i32
)
{
unsafe
{
bindings
:
:
Gecko_CSSValue_SetArray
(
self
len
)
}
}
}
impl
Drop
for
nsCSSValue
{
fn
drop
(
&
mut
self
)
{
unsafe
{
bindings
:
:
Gecko_CSSValue_Drop
(
self
)
}
;
}
}
impl
nsCSSValue_Array
{
#
[
inline
]
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
mCount
}
#
[
inline
]
fn
buffer
(
&
self
)
-
>
*
const
nsCSSValue
{
self
.
mArray
.
as_ptr
(
)
}
#
[
inline
]
pub
fn
as_slice
(
&
self
)
-
>
&
[
nsCSSValue
]
{
unsafe
{
slice
:
:
from_raw_parts
(
self
.
buffer
(
)
self
.
len
(
)
)
}
}
#
[
inline
]
pub
fn
as_mut_slice
(
&
mut
self
)
-
>
&
mut
[
nsCSSValue
]
{
unsafe
{
slice
:
:
from_raw_parts_mut
(
self
.
buffer
(
)
as
*
mut
_
self
.
len
(
)
)
}
}
}
impl
Index
<
usize
>
for
nsCSSValue_Array
{
type
Output
=
nsCSSValue
;
#
[
inline
]
fn
index
(
&
self
i
:
usize
)
-
>
&
nsCSSValue
{
&
self
.
as_slice
(
)
[
i
]
}
}
impl
IndexMut
<
usize
>
for
nsCSSValue_Array
{
#
[
inline
]
fn
index_mut
(
&
mut
self
i
:
usize
)
-
>
&
mut
nsCSSValue
{
&
mut
self
.
as_mut_slice
(
)
[
i
]
}
}
