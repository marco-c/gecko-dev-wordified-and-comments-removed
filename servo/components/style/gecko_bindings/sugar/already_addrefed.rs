use
gecko_bindings
:
:
structs
:
:
already_AddRefed
;
use
std
:
:
marker
:
:
PhantomData
;
use
std
:
:
mem
;
impl
<
T
>
already_AddRefed
<
T
>
{
#
[
inline
]
pub
unsafe
fn
new
(
ptr
:
*
mut
T
)
-
>
Option
<
Self
>
{
if
!
ptr
.
is_null
(
)
{
Some
(
Self
:
:
new_unchecked
(
ptr
)
)
}
else
{
None
}
}
#
[
inline
]
pub
unsafe
fn
new_unchecked
(
ptr
:
*
mut
T
)
-
>
Self
{
debug_assert
!
(
!
ptr
.
is_null
(
)
)
;
already_AddRefed
{
mRawPtr
:
ptr
_phantom_0
:
PhantomData
}
}
#
[
inline
]
pub
fn
take
(
self
)
-
>
*
mut
T
{
let
ptr
=
self
.
mRawPtr
;
mem
:
:
forget
(
self
)
;
ptr
}
}
#
[
cfg
(
debug_assertions
)
]
impl
<
T
>
Drop
for
already_AddRefed
<
T
>
{
fn
drop
(
&
mut
self
)
{
unreachable
!
(
"
Destructor
shouldn
'
t
be
called
otherwise
we
are
leaking
"
)
}
}
