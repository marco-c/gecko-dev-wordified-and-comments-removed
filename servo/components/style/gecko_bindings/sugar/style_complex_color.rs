use
gecko
:
:
values
:
:
{
convert_nscolor_to_rgba
convert_rgba_to_nscolor
}
;
use
gecko_bindings
:
:
structs
:
:
StyleComplexColor
;
use
gecko_bindings
:
:
structs
:
:
StyleComplexColor_Tag
as
Tag
;
use
values
:
:
{
Auto
Either
}
;
use
values
:
:
computed
:
:
{
Color
as
ComputedColor
RGBAColor
as
ComputedRGBA
}
;
use
values
:
:
computed
:
:
ComplexColorRatios
;
use
values
:
:
computed
:
:
ui
:
:
ColorOrAuto
;
impl
StyleComplexColor
{
pub
fn
current_color
(
)
-
>
Self
{
StyleComplexColor
{
mColor
:
0
mBgRatio
:
0
.
mFgRatio
:
1
.
mTag
:
Tag
:
:
eForeground
}
}
pub
fn
auto
(
)
-
>
Self
{
StyleComplexColor
{
mColor
:
0
mBgRatio
:
0
.
mFgRatio
:
1
.
mTag
:
Tag
:
:
eAuto
}
}
}
impl
From
<
ComputedRGBA
>
for
StyleComplexColor
{
fn
from
(
other
:
ComputedRGBA
)
-
>
Self
{
StyleComplexColor
{
mColor
:
convert_rgba_to_nscolor
(
&
other
)
mBgRatio
:
1
.
mFgRatio
:
0
.
mTag
:
Tag
:
:
eNumeric
}
}
}
impl
From
<
ComputedColor
>
for
StyleComplexColor
{
fn
from
(
other
:
ComputedColor
)
-
>
Self
{
match
other
{
ComputedColor
:
:
Numeric
(
color
)
=
>
color
.
into
(
)
ComputedColor
:
:
Foreground
=
>
Self
:
:
current_color
(
)
ComputedColor
:
:
Complex
(
color
ratios
)
=
>
{
debug_assert
!
(
ratios
!
=
ComplexColorRatios
:
:
NUMERIC
)
;
debug_assert
!
(
ratios
!
=
ComplexColorRatios
:
:
FOREGROUND
)
;
StyleComplexColor
{
mColor
:
convert_rgba_to_nscolor
(
&
color
)
.
into
(
)
mBgRatio
:
ratios
.
bg
mFgRatio
:
ratios
.
fg
mTag
:
Tag
:
:
eComplex
}
}
}
}
}
impl
From
<
StyleComplexColor
>
for
ComputedColor
{
fn
from
(
other
:
StyleComplexColor
)
-
>
Self
{
match
other
.
mTag
{
Tag
:
:
eNumeric
=
>
{
debug_assert
!
(
other
.
mBgRatio
=
=
1
.
&
&
other
.
mFgRatio
=
=
0
.
)
;
ComputedColor
:
:
Numeric
(
convert_nscolor_to_rgba
(
other
.
mColor
)
)
}
Tag
:
:
eForeground
=
>
{
debug_assert
!
(
other
.
mBgRatio
=
=
0
.
&
&
other
.
mFgRatio
=
=
1
.
)
;
ComputedColor
:
:
Foreground
}
Tag
:
:
eComplex
=
>
{
debug_assert
!
(
other
.
mBgRatio
!
=
1
.
|
|
other
.
mFgRatio
!
=
0
.
)
;
debug_assert
!
(
other
.
mBgRatio
!
=
0
.
|
|
other
.
mFgRatio
!
=
1
.
)
;
ComputedColor
:
:
Complex
(
convert_nscolor_to_rgba
(
other
.
mColor
)
ComplexColorRatios
{
bg
:
other
.
mBgRatio
fg
:
other
.
mFgRatio
}
)
}
Tag
:
:
eAuto
=
>
unreachable
!
(
"
Unsupport
StyleComplexColor
with
tag
eAuto
"
)
}
}
}
impl
From
<
ColorOrAuto
>
for
StyleComplexColor
{
fn
from
(
other
:
ColorOrAuto
)
-
>
Self
{
match
other
{
Either
:
:
First
(
color
)
=
>
color
.
into
(
)
Either
:
:
Second
(
_
)
=
>
StyleComplexColor
:
:
auto
(
)
}
}
}
impl
From
<
StyleComplexColor
>
for
ColorOrAuto
{
fn
from
(
other
:
StyleComplexColor
)
-
>
Self
{
if
other
.
mTag
!
=
Tag
:
:
eAuto
{
Either
:
:
First
(
other
.
into
(
)
)
}
else
{
Either
:
:
Second
(
Auto
)
}
}
}
