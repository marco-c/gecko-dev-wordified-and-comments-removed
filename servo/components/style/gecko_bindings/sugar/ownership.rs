use
crate
:
:
gecko_bindings
:
:
structs
:
:
root
:
:
mozilla
:
:
detail
:
:
CopyablePtr
;
use
servo_arc
:
:
{
Arc
RawOffsetArc
}
;
use
std
:
:
marker
:
:
PhantomData
;
use
std
:
:
mem
:
:
{
forget
transmute
}
;
use
std
:
:
ops
:
:
{
Deref
DerefMut
}
;
use
std
:
:
ptr
;
pub
unsafe
trait
HasFFI
:
Sized
+
'
static
{
type
FFIType
:
Sized
;
}
pub
unsafe
trait
HasSimpleFFI
:
HasFFI
{
#
[
inline
]
fn
as_ffi
(
&
self
)
-
>
&
Self
:
:
FFIType
{
unsafe
{
transmute
(
self
)
}
}
#
[
inline
]
fn
as_ffi_mut
(
&
mut
self
)
-
>
&
mut
Self
:
:
FFIType
{
unsafe
{
transmute
(
self
)
}
}
#
[
inline
]
fn
from_ffi
(
ffi
:
&
Self
:
:
FFIType
)
-
>
&
Self
{
unsafe
{
transmute
(
ffi
)
}
}
#
[
inline
]
fn
from_ffi_mut
(
ffi
:
&
mut
Self
:
:
FFIType
)
-
>
&
mut
Self
{
unsafe
{
transmute
(
ffi
)
}
}
}
pub
unsafe
trait
HasBoxFFI
:
HasSimpleFFI
{
#
[
inline
]
fn
into_ffi
(
self
:
Box
<
Self
>
)
-
>
Owned
<
Self
:
:
FFIType
>
{
unsafe
{
transmute
(
self
)
}
}
#
[
inline
]
unsafe
fn
drop_ffi
(
ptr
:
*
mut
Self
:
:
FFIType
)
{
let
_
=
Box
:
:
from_raw
(
ptr
as
*
mut
Self
)
;
}
}
pub
unsafe
trait
HasArcFFI
:
HasFFI
{
unsafe
fn
addref_opt
(
ptr
:
Option
<
&
Self
:
:
FFIType
>
)
{
forget
(
Self
:
:
arc_from_borrowed
(
&
ptr
)
.
clone
(
)
)
}
unsafe
fn
release_opt
(
ptr
:
Option
<
&
Self
:
:
FFIType
>
)
{
if
let
Some
(
arc
)
=
Self
:
:
arc_from_borrowed
(
&
ptr
)
{
let
_
:
RawOffsetArc
<
_
>
=
ptr
:
:
read
(
arc
as
*
const
RawOffsetArc
<
_
>
)
;
}
}
unsafe
fn
addref
(
ptr
:
&
Self
:
:
FFIType
)
{
forget
(
Self
:
:
as_arc
(
&
ptr
)
.
clone
(
)
)
}
unsafe
fn
release
(
ptr
:
&
Self
:
:
FFIType
)
{
let
_
:
RawOffsetArc
<
_
>
=
ptr
:
:
read
(
Self
:
:
as_arc
(
&
ptr
)
as
*
const
RawOffsetArc
<
_
>
)
;
}
#
[
inline
]
fn
as_arc
<
'
a
>
(
ptr
:
&
'
a
&
Self
:
:
FFIType
)
-
>
&
'
a
RawOffsetArc
<
Self
>
{
unsafe
{
transmute
:
:
<
&
&
Self
:
:
FFIType
&
RawOffsetArc
<
Self
>
>
(
ptr
)
}
}
#
[
inline
]
fn
arc_as_borrowed
<
'
a
>
(
arc
:
&
'
a
RawOffsetArc
<
Self
>
)
-
>
&
'
a
&
Self
:
:
FFIType
{
unsafe
{
transmute
:
:
<
&
RawOffsetArc
<
Self
>
&
&
Self
:
:
FFIType
>
(
arc
)
}
}
#
[
inline
]
fn
arc_from_borrowed
<
'
a
>
(
ptr
:
&
'
a
Option
<
&
Self
:
:
FFIType
>
)
-
>
Option
<
&
'
a
RawOffsetArc
<
Self
>
>
{
unsafe
{
if
let
Some
(
ref
reference
)
=
*
ptr
{
Some
(
transmute
:
:
<
&
&
Self
:
:
FFIType
&
RawOffsetArc
<
_
>
>
(
reference
)
)
}
else
{
None
}
}
}
}
#
[
repr
(
C
)
]
pub
struct
Strong
<
GeckoType
>
{
ptr
:
*
const
GeckoType
_marker
:
PhantomData
<
GeckoType
>
}
impl
<
GeckoType
>
Strong
<
GeckoType
>
{
#
[
inline
]
pub
fn
is_null
(
&
self
)
-
>
bool
{
self
.
ptr
.
is_null
(
)
}
#
[
inline
]
pub
fn
into_arc
<
ServoType
>
(
self
)
-
>
RawOffsetArc
<
ServoType
>
where
ServoType
:
HasArcFFI
<
FFIType
=
GeckoType
>
{
self
.
into_arc_opt
(
)
.
unwrap
(
)
}
#
[
inline
]
pub
fn
into_arc_opt
<
ServoType
>
(
self
)
-
>
Option
<
RawOffsetArc
<
ServoType
>
>
where
ServoType
:
HasArcFFI
<
FFIType
=
GeckoType
>
{
if
self
.
is_null
(
)
{
None
}
else
{
unsafe
{
Some
(
transmute
(
self
)
)
}
}
}
#
[
inline
]
pub
fn
as_arc_opt
<
ServoType
>
(
&
self
)
-
>
Option
<
&
RawOffsetArc
<
ServoType
>
>
where
ServoType
:
HasArcFFI
<
FFIType
=
GeckoType
>
{
if
self
.
is_null
(
)
{
None
}
else
{
unsafe
{
Some
(
transmute
(
self
)
)
}
}
}
#
[
inline
]
pub
fn
null
(
)
-
>
Self
{
unsafe
{
transmute
(
ptr
:
:
null
:
:
<
GeckoType
>
(
)
)
}
}
}
pub
unsafe
trait
FFIArcHelpers
{
type
Inner
:
HasArcFFI
;
fn
into_strong
(
self
)
-
>
Strong
<
<
Self
:
:
Inner
as
HasFFI
>
:
:
FFIType
>
;
fn
as_borrowed
(
&
self
)
-
>
&
<
Self
:
:
Inner
as
HasFFI
>
:
:
FFIType
;
}
unsafe
impl
<
T
:
HasArcFFI
>
FFIArcHelpers
for
RawOffsetArc
<
T
>
{
type
Inner
=
T
;
#
[
inline
]
fn
into_strong
(
self
)
-
>
Strong
<
T
:
:
FFIType
>
{
unsafe
{
transmute
(
self
)
}
}
#
[
inline
]
fn
as_borrowed
(
&
self
)
-
>
&
T
:
:
FFIType
{
unsafe
{
&
*
(
&
*
*
self
as
*
const
T
as
*
const
T
:
:
FFIType
)
}
}
}
unsafe
impl
<
T
:
HasArcFFI
>
FFIArcHelpers
for
Arc
<
T
>
{
type
Inner
=
T
;
#
[
inline
]
fn
into_strong
(
self
)
-
>
Strong
<
T
:
:
FFIType
>
{
Arc
:
:
into_raw_offset
(
self
)
.
into_strong
(
)
}
#
[
inline
]
fn
as_borrowed
(
&
self
)
-
>
&
T
:
:
FFIType
{
unsafe
{
&
*
(
&
*
*
self
as
*
const
T
as
*
const
T
:
:
FFIType
)
}
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Debug
)
]
pub
struct
Owned
<
GeckoType
>
{
ptr
:
*
mut
GeckoType
_marker
:
PhantomData
<
GeckoType
>
}
impl
<
GeckoType
>
Owned
<
GeckoType
>
{
pub
fn
maybe
(
self
)
-
>
OwnedOrNull
<
GeckoType
>
{
unsafe
{
transmute
(
self
)
}
}
}
impl
<
GeckoType
>
Deref
for
Owned
<
GeckoType
>
{
type
Target
=
GeckoType
;
fn
deref
(
&
self
)
-
>
&
GeckoType
{
unsafe
{
&
*
self
.
ptr
}
}
}
impl
<
GeckoType
>
DerefMut
for
Owned
<
GeckoType
>
{
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
GeckoType
{
unsafe
{
&
mut
*
self
.
ptr
}
}
}
#
[
repr
(
C
)
]
pub
struct
OwnedOrNull
<
GeckoType
>
{
ptr
:
*
mut
GeckoType
_marker
:
PhantomData
<
GeckoType
>
}
impl
<
GeckoType
>
OwnedOrNull
<
GeckoType
>
{
#
[
inline
]
pub
fn
null
(
)
-
>
Self
{
Self
{
ptr
:
ptr
:
:
null_mut
(
)
_marker
:
PhantomData
}
}
#
[
inline
]
pub
fn
is_null
(
&
self
)
-
>
bool
{
self
.
ptr
.
is_null
(
)
}
pub
fn
borrow
(
&
self
)
-
>
Option
<
&
GeckoType
>
{
unsafe
{
transmute
(
self
)
}
}
pub
fn
borrow_mut
(
&
self
)
-
>
Option
<
&
mut
GeckoType
>
{
unsafe
{
transmute
(
self
)
}
}
}
impl
<
T
>
Deref
for
CopyablePtr
<
T
>
{
type
Target
=
T
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
self
.
mPtr
}
}
impl
<
T
>
DerefMut
for
CopyablePtr
<
T
>
{
fn
deref_mut
<
'
a
>
(
&
'
a
mut
self
)
-
>
&
'
a
mut
T
{
&
mut
self
.
mPtr
}
}
