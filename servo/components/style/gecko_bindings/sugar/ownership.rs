use
crate
:
:
gecko_bindings
:
:
structs
:
:
root
:
:
mozilla
:
:
detail
:
:
CopyablePtr
;
use
servo_arc
:
:
Arc
;
use
std
:
:
marker
:
:
PhantomData
;
use
std
:
:
ops
:
:
{
Deref
DerefMut
}
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
Strong
<
GeckoType
>
{
ptr
:
*
const
GeckoType
_marker
:
PhantomData
<
GeckoType
>
}
impl
<
T
>
From
<
Arc
<
T
>
>
for
Strong
<
T
>
{
fn
from
(
arc
:
Arc
<
T
>
)
-
>
Self
{
Self
{
ptr
:
Arc
:
:
into_raw
(
arc
)
_marker
:
PhantomData
}
}
}
impl
<
GeckoType
>
Strong
<
GeckoType
>
{
#
[
inline
]
pub
fn
is_null
(
&
self
)
-
>
bool
{
self
.
ptr
.
is_null
(
)
}
#
[
inline
]
pub
fn
null
(
)
-
>
Self
{
Self
{
ptr
:
ptr
:
:
null
(
)
_marker
:
PhantomData
}
}
}
impl
<
T
>
Deref
for
CopyablePtr
<
T
>
{
type
Target
=
T
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
self
.
mPtr
}
}
impl
<
T
>
DerefMut
for
CopyablePtr
<
T
>
{
fn
deref_mut
<
'
a
>
(
&
'
a
mut
self
)
-
>
&
'
a
mut
T
{
&
mut
self
.
mPtr
}
}
