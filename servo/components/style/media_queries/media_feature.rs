use
super
:
:
media_feature_expression
:
:
RangeOrOperator
;
use
super
:
:
Device
;
use
crate
:
:
parser
:
:
ParserContext
;
use
crate
:
:
values
:
:
computed
:
:
Ratio
;
use
crate
:
:
values
:
:
computed
:
:
{
CSSPixelLength
Resolution
}
;
use
crate
:
:
Atom
;
use
cssparser
:
:
Parser
;
use
std
:
:
fmt
;
use
style_traits
:
:
ParseError
;
pub
type
KeywordDiscriminant
=
u8
;
type
MediaFeatureEvaluator
<
T
>
=
fn
(
device
:
&
Device
value
:
Option
<
T
>
range_or_operator
:
Option
<
RangeOrOperator
>
)
-
>
bool
;
pub
type
KeywordSerializer
=
fn
(
KeywordDiscriminant
)
-
>
String
;
pub
type
KeywordParser
=
for
<
'
a
'
i
'
t
>
fn
(
context
:
&
'
a
ParserContext
input
:
&
'
a
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
KeywordDiscriminant
ParseError
<
'
i
>
>
;
#
[
allow
(
missing_docs
)
]
pub
enum
Evaluator
{
Length
(
MediaFeatureEvaluator
<
CSSPixelLength
>
)
Integer
(
MediaFeatureEvaluator
<
u32
>
)
Float
(
MediaFeatureEvaluator
<
f32
>
)
BoolInteger
(
MediaFeatureEvaluator
<
bool
>
)
NumberRatio
(
MediaFeatureEvaluator
<
Ratio
>
)
Resolution
(
MediaFeatureEvaluator
<
Resolution
>
)
Enumerated
{
parser
:
KeywordParser
serializer
:
KeywordSerializer
evaluator
:
MediaFeatureEvaluator
<
KeywordDiscriminant
>
}
Ident
(
MediaFeatureEvaluator
<
Atom
>
)
}
macro_rules
!
keyword_evaluator
{
(
actual_evaluator
:
ident
keyword_type
:
ty
)
=
>
{
{
fn
__parse
<
'
i
'
t
>
(
context
:
&
crate
:
:
parser
:
:
ParserContext
input
:
&
mut
crate
:
:
cssparser
:
:
Parser
<
'
i
'
t
>
)
-
>
Result
<
crate
:
:
media_queries
:
:
media_feature
:
:
KeywordDiscriminant
:
:
style_traits
:
:
ParseError
<
'
i
>
>
{
let
kw
=
<
keyword_type
as
crate
:
:
parser
:
:
Parse
>
:
:
parse
(
context
input
)
?
;
Ok
(
kw
as
crate
:
:
media_queries
:
:
media_feature
:
:
KeywordDiscriminant
)
}
fn
__serialize
(
kw
:
crate
:
:
media_queries
:
:
media_feature
:
:
KeywordDiscriminant
)
-
>
String
{
/
/
This
unwrap
is
ok
because
the
only
discriminants
that
get
/
/
back
to
us
is
the
ones
that
parse
produces
.
let
value
:
keyword_type
=
:
:
num_traits
:
:
cast
:
:
FromPrimitive
:
:
from_u8
(
kw
)
.
unwrap
(
)
;
<
keyword_type
as
:
:
style_traits
:
:
ToCss
>
:
:
to_css_string
(
&
value
)
}
fn
__evaluate
(
device
:
&
crate
:
:
media_queries
:
:
Device
value
:
Option
<
crate
:
:
media_queries
:
:
media_feature
:
:
KeywordDiscriminant
>
range_or_operator
:
Option
<
crate
:
:
media_queries
:
:
media_feature_expression
:
:
RangeOrOperator
>
)
-
>
bool
{
debug_assert
!
(
range_or_operator
.
is_none
(
)
"
Since
when
do
keywords
accept
ranges
?
"
)
;
/
/
This
unwrap
is
ok
because
the
only
discriminants
that
get
/
/
back
to
us
is
the
ones
that
parse
produces
.
let
value
:
Option
<
keyword_type
>
=
value
.
map
(
|
kw
|
:
:
num_traits
:
:
cast
:
:
FromPrimitive
:
:
from_u8
(
kw
)
.
unwrap
(
)
)
;
actual_evaluator
(
device
value
)
}
crate
:
:
media_queries
:
:
media_feature
:
:
Evaluator
:
:
Enumerated
{
parser
:
__parse
serializer
:
__serialize
evaluator
:
__evaluate
}
}
}
;
}
bitflags
!
{
/
/
/
Different
requirements
or
toggles
that
change
how
a
expression
is
/
/
/
parsed
.
pub
struct
ParsingRequirements
:
u8
{
/
/
/
The
feature
should
only
be
parsed
in
chrome
and
ua
sheets
.
const
CHROME_AND_UA_ONLY
=
1
<
<
0
;
/
/
/
The
feature
requires
a
-
webkit
-
prefix
.
const
WEBKIT_PREFIX
=
1
<
<
1
;
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
#
[
allow
(
missing_docs
)
]
pub
enum
AllowsRanges
{
Yes
No
}
pub
struct
MediaFeatureDescription
{
pub
name
:
Atom
pub
allows_ranges
:
AllowsRanges
pub
evaluator
:
Evaluator
pub
requirements
:
ParsingRequirements
}
impl
MediaFeatureDescription
{
#
[
inline
]
pub
fn
allows_ranges
(
&
self
)
-
>
bool
{
self
.
allows_ranges
=
=
AllowsRanges
:
:
Yes
}
}
macro_rules
!
feature
{
(
name
:
expr
allows_ranges
:
expr
evaluator
:
expr
reqs
:
expr
)
=
>
{
crate
:
:
media_queries
:
:
media_feature
:
:
MediaFeatureDescription
{
name
:
name
allows_ranges
:
allows_ranges
evaluator
:
evaluator
requirements
:
reqs
}
}
;
}
impl
fmt
:
:
Debug
for
MediaFeatureDescription
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
MediaFeatureExpression
"
)
.
field
(
"
name
"
&
self
.
name
)
.
field
(
"
allows_ranges
"
&
self
.
allows_ranges
)
.
field
(
"
requirements
"
&
self
.
requirements
)
.
finish
(
)
}
}
