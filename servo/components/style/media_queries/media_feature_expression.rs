use
Atom
;
use
context
:
:
QuirksMode
;
use
cssparser
:
:
{
Parser
Token
}
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
gecko_bindings
:
:
structs
;
use
num_traits
:
:
Zero
;
use
parser
:
:
{
Parse
ParserContext
}
;
use
std
:
:
cmp
:
:
{
PartialOrd
Ordering
}
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
use
str
:
:
{
starts_with_ignore_ascii_case
string_as_ascii_lowercase
}
;
use
style_traits
:
:
{
CssWriter
ParseError
StyleParseErrorKind
ToCss
}
;
use
stylesheets
:
:
Origin
;
use
super
:
:
Device
;
use
super
:
:
media_feature
:
:
{
Evaluator
MediaFeatureDescription
}
;
use
super
:
:
media_feature
:
:
{
ParsingRequirements
KeywordDiscriminant
}
;
use
values
:
:
{
serialize_atom_identifier
CSSFloat
}
;
use
values
:
:
computed
:
:
{
self
ToComputedValue
}
;
use
values
:
:
specified
:
:
{
Integer
Length
Number
Resolution
}
;
#
[
derive
(
Clone
Copy
Debug
Eq
MallocSizeOf
PartialEq
)
]
pub
struct
AspectRatio
(
pub
u32
pub
u32
)
;
impl
ToCss
for
AspectRatio
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
self
.
0
.
to_css
(
dest
)
?
;
dest
.
write_char
(
'
/
'
)
?
;
self
.
1
.
to_css
(
dest
)
}
}
impl
PartialOrd
for
AspectRatio
{
fn
partial_cmp
(
&
self
other
:
&
AspectRatio
)
-
>
Option
<
Ordering
>
{
u64
:
:
partial_cmp
(
&
(
self
.
0
as
u64
*
other
.
1
as
u64
)
&
(
self
.
1
as
u64
*
other
.
0
as
u64
)
)
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
MallocSizeOf
PartialEq
)
]
pub
enum
Range
{
Min
Max
}
#
[
derive
(
Clone
Copy
Debug
Eq
MallocSizeOf
PartialEq
)
]
pub
enum
Operator
{
Equal
GreaterThan
GreaterThanEqual
LessThan
LessThanEqual
}
impl
ToCss
for
Operator
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
dest
.
write_str
(
match
*
self
{
Operator
:
:
Equal
=
>
"
=
"
Operator
:
:
LessThan
=
>
"
<
"
Operator
:
:
LessThanEqual
=
>
"
<
=
"
Operator
:
:
GreaterThan
=
>
"
>
"
Operator
:
:
GreaterThanEqual
=
>
"
>
=
"
}
)
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
MallocSizeOf
PartialEq
)
]
pub
enum
RangeOrOperator
{
Range
(
Range
)
Operator
(
Operator
)
}
impl
RangeOrOperator
{
pub
fn
evaluate
<
T
>
(
range_or_op
:
Option
<
Self
>
query_value
:
Option
<
T
>
value
:
T
)
-
>
bool
where
T
:
PartialOrd
+
Zero
{
match
query_value
{
Some
(
v
)
=
>
Self
:
:
evaluate_with_query_value
(
range_or_op
v
value
)
None
=
>
!
value
.
is_zero
(
)
}
}
pub
fn
evaluate_with_query_value
<
T
>
(
range_or_op
:
Option
<
Self
>
query_value
:
T
value
:
T
)
-
>
bool
where
T
:
PartialOrd
{
let
cmp
=
match
value
.
partial_cmp
(
&
query_value
)
{
Some
(
c
)
=
>
c
None
=
>
return
false
}
;
let
range_or_op
=
match
range_or_op
{
Some
(
r
)
=
>
r
None
=
>
return
cmp
=
=
Ordering
:
:
Equal
}
;
match
range_or_op
{
RangeOrOperator
:
:
Range
(
range
)
=
>
{
cmp
=
=
Ordering
:
:
Equal
|
|
match
range
{
Range
:
:
Min
=
>
cmp
=
=
Ordering
:
:
Greater
Range
:
:
Max
=
>
cmp
=
=
Ordering
:
:
Less
}
}
RangeOrOperator
:
:
Operator
(
op
)
=
>
{
match
op
{
Operator
:
:
Equal
=
>
cmp
=
=
Ordering
:
:
Equal
Operator
:
:
GreaterThan
=
>
cmp
=
=
Ordering
:
:
Greater
Operator
:
:
GreaterThanEqual
=
>
{
cmp
=
=
Ordering
:
:
Equal
|
|
cmp
=
=
Ordering
:
:
Greater
}
Operator
:
:
LessThan
=
>
cmp
=
=
Ordering
:
:
Less
Operator
:
:
LessThanEqual
=
>
{
cmp
=
=
Ordering
:
:
Equal
|
|
cmp
=
=
Ordering
:
:
Less
}
}
}
}
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
)
]
pub
struct
MediaFeatureExpression
{
feature
:
&
'
static
MediaFeatureDescription
value
:
Option
<
MediaExpressionValue
>
range_or_operator
:
Option
<
RangeOrOperator
>
}
impl
PartialEq
for
MediaFeatureExpression
{
fn
eq
(
&
self
other
:
&
Self
)
-
>
bool
{
self
.
feature
as
*
const
_
=
=
other
.
feature
as
*
const
_
&
&
self
.
value
=
=
other
.
value
&
&
self
.
range_or_operator
=
=
other
.
range_or_operator
}
}
impl
ToCss
for
MediaFeatureExpression
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
dest
.
write_str
(
"
(
"
)
?
;
if
self
.
feature
.
requirements
.
contains
(
ParsingRequirements
:
:
WEBKIT_PREFIX
)
{
dest
.
write_str
(
"
-
webkit
-
"
)
?
;
}
if
let
Some
(
RangeOrOperator
:
:
Range
(
range
)
)
=
self
.
range_or_operator
{
match
range
{
Range
:
:
Min
=
>
dest
.
write_str
(
"
min
-
"
)
?
Range
:
:
Max
=
>
dest
.
write_str
(
"
max
-
"
)
?
}
}
write
!
(
dest
"
{
}
"
self
.
feature
.
name
)
?
;
if
let
Some
(
RangeOrOperator
:
:
Operator
(
op
)
)
=
self
.
range_or_operator
{
dest
.
write_char
(
'
'
)
?
;
op
.
to_css
(
dest
)
?
;
dest
.
write_char
(
'
'
)
?
;
}
else
if
self
.
value
.
is_some
(
)
{
dest
.
write_str
(
"
:
"
)
?
;
}
if
let
Some
(
ref
val
)
=
self
.
value
{
val
.
to_css
(
dest
self
)
?
;
}
dest
.
write_str
(
"
)
"
)
}
}
fn
consume_operation_or_colon
(
input
:
&
mut
Parser
)
-
>
Result
<
Option
<
Operator
>
(
)
>
{
let
first_delim
=
{
let
next_token
=
match
input
.
next
(
)
{
Ok
(
t
)
=
>
t
Err
(
.
.
)
=
>
return
Err
(
(
)
)
}
;
match
*
next_token
{
Token
:
:
Colon
=
>
return
Ok
(
None
)
Token
:
:
Delim
(
oper
)
=
>
oper
_
=
>
return
Err
(
(
)
)
}
}
;
Ok
(
Some
(
match
first_delim
{
'
=
'
=
>
Operator
:
:
Equal
'
>
'
=
>
{
if
input
.
try
(
|
i
|
i
.
expect_delim
(
'
=
'
)
)
.
is_ok
(
)
{
Operator
:
:
GreaterThanEqual
}
else
{
Operator
:
:
GreaterThan
}
}
'
<
'
=
>
{
if
input
.
try
(
|
i
|
i
.
expect_delim
(
'
=
'
)
)
.
is_ok
(
)
{
Operator
:
:
LessThanEqual
}
else
{
Operator
:
:
LessThan
}
}
_
=
>
return
Err
(
(
)
)
}
)
)
}
impl
MediaFeatureExpression
{
fn
new
(
feature
:
&
'
static
MediaFeatureDescription
value
:
Option
<
MediaExpressionValue
>
range_or_operator
:
Option
<
RangeOrOperator
>
)
-
>
Self
{
Self
{
feature
value
range_or_operator
}
}
pub
fn
parse
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
input
.
expect_parenthesis_block
(
)
?
;
input
.
parse_nested_block
(
|
input
|
{
Self
:
:
parse_in_parenthesis_block
(
context
input
)
}
)
}
pub
fn
parse_in_parenthesis_block
<
'
i
'
t
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Self
ParseError
<
'
i
>
>
{
#
[
cfg
(
feature
=
"
gecko
"
)
]
use
gecko
:
:
media_features
:
:
MEDIA_FEATURES
;
#
[
cfg
(
feature
=
"
servo
"
)
]
use
servo
:
:
media_queries
:
:
MEDIA_FEATURES
;
let
feature
;
let
range
;
{
let
location
=
input
.
current_source_location
(
)
;
let
ident
=
input
.
expect_ident
(
)
?
;
let
mut
requirements
=
ParsingRequirements
:
:
empty
(
)
;
if
context
.
chrome_rules_enabled
(
)
|
|
context
.
stylesheet_origin
=
=
Origin
:
:
UserAgent
{
requirements
.
insert
(
ParsingRequirements
:
:
CHROME_AND_UA_ONLY
)
;
}
let
result
=
{
let
mut
feature_name
=
&
*
*
ident
;
#
[
cfg
(
feature
=
"
gecko
"
)
]
{
if
unsafe
{
structs
:
:
StaticPrefs_sVarCache_layout_css_prefixes_webkit
}
&
&
starts_with_ignore_ascii_case
(
feature_name
"
-
webkit
-
"
)
{
feature_name
=
&
feature_name
[
8
.
.
]
;
requirements
.
insert
(
ParsingRequirements
:
:
WEBKIT_PREFIX
)
;
if
unsafe
{
structs
:
:
StaticPrefs_sVarCache_layout_css_prefixes_device_pixel_ratio_webkit
}
{
requirements
.
insert
(
ParsingRequirements
:
:
WEBKIT_DEVICE_PIXEL_RATIO_PREF_ENABLED
)
;
}
}
}
let
range
=
if
starts_with_ignore_ascii_case
(
feature_name
"
min
-
"
)
{
feature_name
=
&
feature_name
[
4
.
.
]
;
Some
(
Range
:
:
Min
)
}
else
if
starts_with_ignore_ascii_case
(
feature_name
"
max
-
"
)
{
feature_name
=
&
feature_name
[
4
.
.
]
;
Some
(
Range
:
:
Max
)
}
else
{
None
}
;
let
atom
=
Atom
:
:
from
(
string_as_ascii_lowercase
(
feature_name
)
)
;
match
MEDIA_FEATURES
.
iter
(
)
.
find
(
|
f
|
f
.
name
=
=
atom
)
{
Some
(
f
)
=
>
Ok
(
(
f
range
)
)
None
=
>
Err
(
(
)
)
}
}
;
match
result
{
Ok
(
(
f
r
)
)
=
>
{
feature
=
f
;
range
=
r
;
}
Err
(
(
)
)
=
>
{
return
Err
(
location
.
new_custom_error
(
StyleParseErrorKind
:
:
MediaQueryExpectedFeatureName
(
ident
.
clone
(
)
)
)
)
}
}
if
!
(
feature
.
requirements
&
!
requirements
)
.
is_empty
(
)
{
return
Err
(
location
.
new_custom_error
(
StyleParseErrorKind
:
:
MediaQueryExpectedFeatureName
(
ident
.
clone
(
)
)
)
)
;
}
if
range
.
is_some
(
)
&
&
!
feature
.
allows_ranges
(
)
{
return
Err
(
location
.
new_custom_error
(
StyleParseErrorKind
:
:
MediaQueryExpectedFeatureName
(
ident
.
clone
(
)
)
)
)
;
}
}
let
operator
=
input
.
try
(
consume_operation_or_colon
)
;
let
operator
=
match
operator
{
Err
(
.
.
)
=
>
{
if
range
.
is_some
(
)
{
return
Err
(
input
.
new_custom_error
(
StyleParseErrorKind
:
:
RangedExpressionWithNoValue
)
)
;
}
return
Ok
(
Self
:
:
new
(
feature
None
None
)
)
;
}
Ok
(
operator
)
=
>
operator
}
;
let
range_or_operator
=
match
range
{
Some
(
range
)
=
>
{
if
operator
.
is_some
(
)
{
return
Err
(
input
.
new_custom_error
(
StyleParseErrorKind
:
:
MediaQueryUnexpectedOperator
)
)
;
}
Some
(
RangeOrOperator
:
:
Range
(
range
)
)
}
None
=
>
{
match
operator
{
Some
(
operator
)
=
>
{
if
!
feature
.
allows_ranges
(
)
{
return
Err
(
input
.
new_custom_error
(
StyleParseErrorKind
:
:
MediaQueryUnexpectedOperator
)
)
;
}
Some
(
RangeOrOperator
:
:
Operator
(
operator
)
)
}
None
=
>
None
}
}
}
;
let
value
=
MediaExpressionValue
:
:
parse
(
feature
context
input
)
.
map_err
(
|
err
|
{
err
.
location
.
new_custom_error
(
StyleParseErrorKind
:
:
MediaQueryExpectedFeatureValue
)
}
)
?
;
Ok
(
Self
:
:
new
(
feature
Some
(
value
)
range_or_operator
)
)
}
pub
fn
matches
(
&
self
device
:
&
Device
quirks_mode
:
QuirksMode
)
-
>
bool
{
let
value
=
self
.
value
.
as_ref
(
)
;
macro_rules
!
expect
{
(
variant
:
ident
)
=
>
{
value
.
map
(
|
value
|
{
match
*
value
{
MediaExpressionValue
:
:
variant
(
ref
v
)
=
>
v
_
=
>
unreachable
!
(
"
Unexpected
MediaExpressionValue
"
)
}
}
)
}
}
match
self
.
feature
.
evaluator
{
Evaluator
:
:
Length
(
eval
)
=
>
{
let
computed
=
expect
!
(
Length
)
.
map
(
|
specified
|
{
computed
:
:
Context
:
:
for_media_query_evaluation
(
device
quirks_mode
|
context
|
{
specified
.
to_computed_value
(
context
)
}
)
}
)
;
eval
(
device
computed
self
.
range_or_operator
)
}
Evaluator
:
:
Integer
(
eval
)
=
>
{
eval
(
device
expect
!
(
Integer
)
.
cloned
(
)
self
.
range_or_operator
)
}
Evaluator
:
:
Float
(
eval
)
=
>
{
eval
(
device
expect
!
(
Float
)
.
cloned
(
)
self
.
range_or_operator
)
}
Evaluator
:
:
IntRatio
(
eval
)
=
>
{
eval
(
device
expect
!
(
IntRatio
)
.
cloned
(
)
self
.
range_or_operator
)
}
Evaluator
:
:
Resolution
(
eval
)
=
>
{
let
computed
=
expect
!
(
Resolution
)
.
map
(
|
specified
|
{
computed
:
:
Context
:
:
for_media_query_evaluation
(
device
quirks_mode
|
context
|
{
specified
.
to_computed_value
(
context
)
}
)
}
)
;
eval
(
device
computed
self
.
range_or_operator
)
}
Evaluator
:
:
Enumerated
{
evaluator
.
.
}
=
>
{
evaluator
(
device
expect
!
(
Enumerated
)
.
cloned
(
)
self
.
range_or_operator
)
}
Evaluator
:
:
Ident
(
eval
)
=
>
{
eval
(
device
expect
!
(
Ident
)
.
cloned
(
)
self
.
range_or_operator
)
}
Evaluator
:
:
BoolInteger
(
eval
)
=
>
{
eval
(
device
expect
!
(
BoolInteger
)
.
cloned
(
)
self
.
range_or_operator
)
}
}
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
PartialEq
)
]
pub
enum
MediaExpressionValue
{
Length
(
Length
)
Integer
(
u32
)
Float
(
CSSFloat
)
BoolInteger
(
bool
)
IntRatio
(
AspectRatio
)
Resolution
(
Resolution
)
Enumerated
(
KeywordDiscriminant
)
Ident
(
Atom
)
}
impl
MediaExpressionValue
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
CssWriter
<
W
>
for_expr
:
&
MediaFeatureExpression
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
match
*
self
{
MediaExpressionValue
:
:
Length
(
ref
l
)
=
>
l
.
to_css
(
dest
)
MediaExpressionValue
:
:
Integer
(
v
)
=
>
v
.
to_css
(
dest
)
MediaExpressionValue
:
:
Float
(
v
)
=
>
v
.
to_css
(
dest
)
MediaExpressionValue
:
:
BoolInteger
(
v
)
=
>
dest
.
write_str
(
if
v
{
"
1
"
}
else
{
"
0
"
}
)
MediaExpressionValue
:
:
IntRatio
(
ratio
)
=
>
{
ratio
.
to_css
(
dest
)
}
MediaExpressionValue
:
:
Resolution
(
ref
r
)
=
>
r
.
to_css
(
dest
)
MediaExpressionValue
:
:
Ident
(
ref
ident
)
=
>
serialize_atom_identifier
(
ident
dest
)
MediaExpressionValue
:
:
Enumerated
(
value
)
=
>
{
match
for_expr
.
feature
.
evaluator
{
Evaluator
:
:
Enumerated
{
serializer
.
.
}
=
>
{
dest
.
write_str
(
&
*
serializer
(
value
)
)
}
_
=
>
unreachable
!
(
)
}
}
}
}
fn
parse
<
'
i
'
t
>
(
for_feature
:
&
MediaFeatureDescription
context
:
&
ParserContext
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
MediaExpressionValue
ParseError
<
'
i
>
>
{
Ok
(
match
for_feature
.
evaluator
{
Evaluator
:
:
Length
(
.
.
)
=
>
{
let
length
=
Length
:
:
parse_non_negative
(
context
input
)
?
;
MediaExpressionValue
:
:
Length
(
length
)
}
Evaluator
:
:
Integer
(
.
.
)
=
>
{
let
integer
=
Integer
:
:
parse_non_negative
(
context
input
)
?
;
MediaExpressionValue
:
:
Integer
(
integer
.
value
(
)
as
u32
)
}
Evaluator
:
:
BoolInteger
(
.
.
)
=
>
{
let
integer
=
Integer
:
:
parse_non_negative
(
context
input
)
?
;
let
value
=
integer
.
value
(
)
;
if
value
>
1
{
return
Err
(
input
.
new_custom_error
(
StyleParseErrorKind
:
:
UnspecifiedError
)
)
;
}
MediaExpressionValue
:
:
BoolInteger
(
value
=
=
1
)
}
Evaluator
:
:
Float
(
.
.
)
=
>
{
let
number
=
Number
:
:
parse
(
context
input
)
?
;
MediaExpressionValue
:
:
Float
(
number
.
get
(
)
)
}
Evaluator
:
:
IntRatio
(
.
.
)
=
>
{
let
a
=
Integer
:
:
parse_positive
(
context
input
)
?
;
input
.
expect_delim
(
'
/
'
)
?
;
let
b
=
Integer
:
:
parse_positive
(
context
input
)
?
;
MediaExpressionValue
:
:
IntRatio
(
AspectRatio
(
a
.
value
(
)
as
u32
b
.
value
(
)
as
u32
)
)
}
Evaluator
:
:
Resolution
(
.
.
)
=
>
{
MediaExpressionValue
:
:
Resolution
(
Resolution
:
:
parse
(
context
input
)
?
)
}
Evaluator
:
:
Enumerated
{
parser
.
.
}
=
>
{
MediaExpressionValue
:
:
Enumerated
(
parser
(
context
input
)
?
)
}
Evaluator
:
:
Ident
(
.
.
)
=
>
{
MediaExpressionValue
:
:
Ident
(
Atom
:
:
from
(
input
.
expect_ident
(
)
?
.
as_ref
(
)
)
)
}
}
)
}
}
