use
context
:
:
QuirksMode
;
use
cssparser
:
:
{
Delimiter
Parser
}
;
use
cssparser
:
:
{
ParserInput
Token
}
;
use
error_reporting
:
:
{
ContextualParseError
ParseErrorReporter
}
;
use
parser
:
:
{
ParserContext
ParserErrorContext
}
;
use
super
:
:
{
Device
MediaQuery
Qualifier
}
;
#
[
css
(
comma
)
]
#
[
derive
(
Clone
Debug
MallocSizeOf
ToCss
)
]
pub
struct
MediaList
{
#
[
css
(
iterable
)
]
pub
media_queries
:
Vec
<
MediaQuery
>
}
impl
MediaList
{
pub
fn
parse
<
R
>
(
context
:
&
ParserContext
input
:
&
mut
Parser
error_reporter
:
&
R
)
-
>
MediaList
where
R
:
ParseErrorReporter
{
if
input
.
is_exhausted
(
)
{
return
Self
:
:
empty
(
)
;
}
let
mut
media_queries
=
vec
!
[
]
;
loop
{
let
start_position
=
input
.
position
(
)
;
match
input
.
parse_until_before
(
Delimiter
:
:
Comma
|
i
|
MediaQuery
:
:
parse
(
context
i
)
)
{
Ok
(
mq
)
=
>
{
media_queries
.
push
(
mq
)
;
}
Err
(
err
)
=
>
{
media_queries
.
push
(
MediaQuery
:
:
never_matching
(
)
)
;
let
location
=
err
.
location
;
let
error
=
ContextualParseError
:
:
InvalidMediaRule
(
input
.
slice_from
(
start_position
)
err
)
;
let
error_context
=
ParserErrorContext
{
error_reporter
}
;
context
.
log_css_error
(
&
error_context
location
error
)
;
}
}
match
input
.
next
(
)
{
Ok
(
&
Token
:
:
Comma
)
=
>
{
}
Ok
(
_
)
=
>
unreachable
!
(
)
Err
(
_
)
=
>
break
}
}
MediaList
{
media_queries
}
}
pub
fn
empty
(
)
-
>
Self
{
MediaList
{
media_queries
:
vec
!
[
]
}
}
pub
fn
evaluate
(
&
self
device
:
&
Device
quirks_mode
:
QuirksMode
)
-
>
bool
{
self
.
media_queries
.
is_empty
(
)
|
|
self
.
media_queries
.
iter
(
)
.
any
(
|
mq
|
{
let
media_match
=
mq
.
media_type
.
matches
(
device
.
media_type
(
)
)
;
let
query_match
=
media_match
&
&
mq
.
expressions
.
iter
(
)
.
all
(
|
expression
|
expression
.
matches
(
&
device
quirks_mode
)
)
;
match
mq
.
qualifier
{
Some
(
Qualifier
:
:
Not
)
=
>
!
query_match
_
=
>
query_match
}
}
)
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
media_queries
.
is_empty
(
)
}
pub
fn
append_medium
(
&
mut
self
context
:
&
ParserContext
new_medium
:
&
str
)
-
>
bool
{
let
mut
input
=
ParserInput
:
:
new
(
new_medium
)
;
let
mut
parser
=
Parser
:
:
new
(
&
mut
input
)
;
let
new_query
=
match
MediaQuery
:
:
parse
(
&
context
&
mut
parser
)
{
Ok
(
query
)
=
>
query
Err
(
_
)
=
>
{
return
false
;
}
}
;
self
.
media_queries
.
retain
(
|
query
|
query
!
=
&
new_query
)
;
self
.
media_queries
.
push
(
new_query
)
;
true
}
pub
fn
delete_medium
(
&
mut
self
context
:
&
ParserContext
old_medium
:
&
str
)
-
>
bool
{
let
mut
input
=
ParserInput
:
:
new
(
old_medium
)
;
let
mut
parser
=
Parser
:
:
new
(
&
mut
input
)
;
let
old_query
=
match
MediaQuery
:
:
parse
(
context
&
mut
parser
)
{
Ok
(
query
)
=
>
query
Err
(
_
)
=
>
{
return
false
;
}
}
;
let
old_len
=
self
.
media_queries
.
len
(
)
;
self
.
media_queries
.
retain
(
|
query
|
query
!
=
&
old_query
)
;
old_len
!
=
self
.
media_queries
.
len
(
)
}
}
