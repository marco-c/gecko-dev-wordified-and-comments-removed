use
crate
:
:
context
:
:
QuirksMode
;
use
crate
:
:
selector_map
:
:
{
MaybeCaseInsensitiveHashMap
PrecomputedHashMap
SelectorMap
SelectorMapEntry
}
;
use
crate
:
:
selector_parser
:
:
SelectorImpl
;
use
crate
:
:
AllocErr
;
use
crate
:
:
{
Atom
LocalName
Namespace
ShrinkIfNeeded
}
;
use
dom
:
:
{
DocumentState
ElementState
}
;
use
selectors
:
:
attr
:
:
NamespaceConstraint
;
use
selectors
:
:
parser
:
:
{
Combinator
Component
}
;
use
selectors
:
:
parser
:
:
{
Selector
SelectorIter
}
;
use
selectors
:
:
visitor
:
:
{
SelectorListKind
SelectorVisitor
}
;
use
servo_arc
:
:
Arc
;
use
smallvec
:
:
SmallVec
;
#
[
derive
(
Clone
Debug
MallocSizeOf
)
]
pub
struct
Dependency
{
#
[
ignore_malloc_size_of
=
"
CssRules
have
primary
refs
we
measure
there
"
]
pub
selector
:
Selector
<
SelectorImpl
>
pub
selector_offset
:
usize
#
[
ignore_malloc_size_of
=
"
Arc
"
]
pub
parent
:
Option
<
Arc
<
Dependency
>
>
}
#
[
derive
(
Debug
Eq
PartialEq
)
]
pub
enum
DependencyInvalidationKind
{
Element
ElementAndDescendants
Descendants
Siblings
SlottedElements
Parts
}
impl
Dependency
{
pub
fn
for_full_selector_invalidation
(
selector
:
Selector
<
SelectorImpl
>
)
-
>
Self
{
Self
{
selector_offset
:
selector
.
len
(
)
+
1
selector
parent
:
None
}
}
pub
fn
combinator
(
&
self
)
-
>
Option
<
Combinator
>
{
if
self
.
selector_offset
=
=
0
{
return
None
;
}
Some
(
self
.
selector
.
combinator_at_match_order
(
self
.
selector_offset
-
1
)
)
}
pub
fn
invalidation_kind
(
&
self
)
-
>
DependencyInvalidationKind
{
match
self
.
combinator
(
)
{
None
=
>
DependencyInvalidationKind
:
:
Element
Some
(
Combinator
:
:
Child
)
|
Some
(
Combinator
:
:
Descendant
)
=
>
{
DependencyInvalidationKind
:
:
Descendants
}
Some
(
Combinator
:
:
LaterSibling
)
|
Some
(
Combinator
:
:
NextSibling
)
=
>
{
DependencyInvalidationKind
:
:
Siblings
}
Some
(
Combinator
:
:
PseudoElement
)
=
>
DependencyInvalidationKind
:
:
ElementAndDescendants
Some
(
Combinator
:
:
SlotAssignment
)
=
>
DependencyInvalidationKind
:
:
SlottedElements
Some
(
Combinator
:
:
Part
)
=
>
DependencyInvalidationKind
:
:
Parts
}
}
}
impl
SelectorMapEntry
for
Dependency
{
fn
selector
(
&
self
)
-
>
SelectorIter
<
SelectorImpl
>
{
self
.
selector
.
iter_from
(
self
.
selector_offset
)
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
)
]
pub
struct
StateDependency
{
pub
dep
:
Dependency
pub
state
:
ElementState
}
impl
SelectorMapEntry
for
StateDependency
{
fn
selector
(
&
self
)
-
>
SelectorIter
<
SelectorImpl
>
{
self
.
dep
.
selector
(
)
}
}
#
[
derive
(
Clone
Debug
MallocSizeOf
)
]
pub
struct
DocumentStateDependency
{
#
[
cfg_attr
(
feature
=
"
gecko
"
ignore_malloc_size_of
=
"
CssRules
have
primary
refs
we
measure
there
"
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
ignore_malloc_size_of
=
"
Arc
"
)
]
pub
dependency
:
Dependency
pub
state
:
DocumentState
}
#
[
derive
(
Clone
Debug
MallocSizeOf
)
]
pub
struct
InvalidationMap
{
pub
class_to_selector
:
MaybeCaseInsensitiveHashMap
<
Atom
SmallVec
<
[
Dependency
;
1
]
>
>
pub
id_to_selector
:
MaybeCaseInsensitiveHashMap
<
Atom
SmallVec
<
[
Dependency
;
1
]
>
>
pub
state_affecting_selectors
:
SelectorMap
<
StateDependency
>
pub
document_state_selectors
:
Vec
<
DocumentStateDependency
>
pub
other_attribute_affecting_selectors
:
PrecomputedHashMap
<
LocalName
SmallVec
<
[
Dependency
;
1
]
>
>
}
impl
InvalidationMap
{
pub
fn
new
(
)
-
>
Self
{
Self
{
class_to_selector
:
MaybeCaseInsensitiveHashMap
:
:
new
(
)
id_to_selector
:
MaybeCaseInsensitiveHashMap
:
:
new
(
)
state_affecting_selectors
:
SelectorMap
:
:
new
(
)
document_state_selectors
:
Vec
:
:
new
(
)
other_attribute_affecting_selectors
:
PrecomputedHashMap
:
:
default
(
)
}
}
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
state_affecting_selectors
.
len
(
)
+
self
.
document_state_selectors
.
len
(
)
+
self
.
other_attribute_affecting_selectors
.
iter
(
)
.
fold
(
0
|
accum
(
_
ref
v
)
|
accum
+
v
.
len
(
)
)
+
self
.
id_to_selector
.
iter
(
)
.
fold
(
0
|
accum
(
_
ref
v
)
|
accum
+
v
.
len
(
)
)
+
self
.
class_to_selector
.
iter
(
)
.
fold
(
0
|
accum
(
_
ref
v
)
|
accum
+
v
.
len
(
)
)
}
pub
fn
clear
(
&
mut
self
)
{
self
.
class_to_selector
.
clear
(
)
;
self
.
id_to_selector
.
clear
(
)
;
self
.
state_affecting_selectors
.
clear
(
)
;
self
.
document_state_selectors
.
clear
(
)
;
self
.
other_attribute_affecting_selectors
.
clear
(
)
;
}
pub
fn
shrink_if_needed
(
&
mut
self
)
{
self
.
class_to_selector
.
shrink_if_needed
(
)
;
self
.
id_to_selector
.
shrink_if_needed
(
)
;
self
.
state_affecting_selectors
.
shrink_if_needed
(
)
;
self
.
other_attribute_affecting_selectors
.
shrink_if_needed
(
)
;
}
pub
fn
note_selector
(
&
mut
self
selector
:
&
Selector
<
SelectorImpl
>
quirks_mode
:
QuirksMode
)
-
>
Result
<
(
)
AllocErr
>
{
debug
!
(
"
InvalidationMap
:
:
note_selector
(
{
:
?
}
)
"
selector
)
;
let
mut
document_state
=
DocumentState
:
:
empty
(
)
;
{
let
mut
parent_stack
=
SmallVec
:
:
new
(
)
;
let
mut
alloc_error
=
None
;
let
mut
collector
=
SelectorDependencyCollector
{
map
:
self
document_state
:
&
mut
document_state
selector
parent_selectors
:
&
mut
parent_stack
quirks_mode
compound_state
:
PerCompoundState
:
:
new
(
0
)
alloc_error
:
&
mut
alloc_error
}
;
let
visit_result
=
collector
.
visit_whole_selector
(
)
;
debug_assert_eq
!
(
!
visit_result
alloc_error
.
is_some
(
)
)
;
if
let
Some
(
alloc_error
)
=
alloc_error
{
return
Err
(
alloc_error
)
;
}
}
if
!
document_state
.
is_empty
(
)
{
let
dep
=
DocumentStateDependency
{
state
:
document_state
dependency
:
Dependency
:
:
for_full_selector_invalidation
(
selector
.
clone
(
)
)
}
;
self
.
document_state_selectors
.
try_reserve
(
1
)
?
;
self
.
document_state_selectors
.
push
(
dep
)
;
}
Ok
(
(
)
)
}
}
struct
PerCompoundState
{
offset
:
usize
element_state
:
ElementState
}
impl
PerCompoundState
{
fn
new
(
offset
:
usize
)
-
>
Self
{
Self
{
offset
element_state
:
ElementState
:
:
empty
(
)
}
}
}
struct
ParentDependencyEntry
{
selector
:
Selector
<
SelectorImpl
>
offset
:
usize
cached_dependency
:
Option
<
Arc
<
Dependency
>
>
}
struct
SelectorDependencyCollector
<
'
a
>
{
map
:
&
'
a
mut
InvalidationMap
document_state
:
&
'
a
mut
DocumentState
selector
:
&
'
a
Selector
<
SelectorImpl
>
parent_selectors
:
&
'
a
mut
SmallVec
<
[
ParentDependencyEntry
;
5
]
>
quirks_mode
:
QuirksMode
compound_state
:
PerCompoundState
alloc_error
:
&
'
a
mut
Option
<
AllocErr
>
}
impl
<
'
a
>
SelectorDependencyCollector
<
'
a
>
{
fn
visit_whole_selector
(
&
mut
self
)
-
>
bool
{
let
iter
=
self
.
selector
.
iter
(
)
;
self
.
visit_whole_selector_from
(
iter
0
)
}
fn
visit_whole_selector_from
(
&
mut
self
mut
iter
:
SelectorIter
<
SelectorImpl
>
mut
index
:
usize
)
-
>
bool
{
loop
{
self
.
compound_state
=
PerCompoundState
:
:
new
(
index
)
;
for
ss
in
&
mut
iter
{
if
!
ss
.
visit
(
self
)
{
return
false
;
}
index
+
=
1
;
}
if
!
self
.
compound_state
.
element_state
.
is_empty
(
)
{
let
dependency
=
self
.
dependency
(
)
;
let
result
=
self
.
map
.
state_affecting_selectors
.
insert
(
StateDependency
{
dep
:
dependency
state
:
self
.
compound_state
.
element_state
}
self
.
quirks_mode
)
;
if
let
Err
(
alloc_error
)
=
result
{
*
self
.
alloc_error
=
Some
(
alloc_error
.
into
(
)
)
;
return
false
;
}
}
let
combinator
=
iter
.
next_sequence
(
)
;
if
combinator
.
is_none
(
)
{
return
true
;
}
index
+
=
1
;
}
}
fn
add_attr_dependency
(
&
mut
self
name
:
LocalName
)
-
>
bool
{
let
dependency
=
self
.
dependency
(
)
;
let
map
=
&
mut
self
.
map
.
other_attribute_affecting_selectors
;
if
let
Err
(
err
)
=
map
.
try_reserve
(
1
)
{
*
self
.
alloc_error
=
Some
(
err
.
into
(
)
)
;
return
false
;
}
let
vec
=
map
.
entry
(
name
)
.
or_default
(
)
;
if
let
Err
(
err
)
=
vec
.
try_reserve
(
1
)
{
*
self
.
alloc_error
=
Some
(
err
.
into
(
)
)
;
return
false
;
}
vec
.
push
(
dependency
)
;
true
}
fn
parent_dependency
(
&
mut
self
)
-
>
Option
<
Arc
<
Dependency
>
>
{
if
self
.
parent_selectors
.
is_empty
(
)
{
return
None
;
}
fn
dependencies_from
(
entries
:
&
mut
[
ParentDependencyEntry
]
)
-
>
Option
<
Arc
<
Dependency
>
>
{
if
entries
.
is_empty
(
)
{
return
None
}
let
last_index
=
entries
.
len
(
)
-
1
;
let
(
previous
last
)
=
entries
.
split_at_mut
(
last_index
)
;
let
last
=
&
mut
last
[
0
]
;
let
selector
=
&
last
.
selector
;
let
selector_offset
=
last
.
offset
;
Some
(
last
.
cached_dependency
.
get_or_insert_with
(
|
|
{
Arc
:
:
new
(
Dependency
{
selector
:
selector
.
clone
(
)
selector_offset
parent
:
dependencies_from
(
previous
)
}
)
}
)
.
clone
(
)
)
}
dependencies_from
(
&
mut
self
.
parent_selectors
)
}
fn
dependency
(
&
mut
self
)
-
>
Dependency
{
let
parent
=
self
.
parent_dependency
(
)
;
Dependency
{
selector
:
self
.
selector
.
clone
(
)
selector_offset
:
self
.
compound_state
.
offset
parent
}
}
}
impl
<
'
a
>
SelectorVisitor
for
SelectorDependencyCollector
<
'
a
>
{
type
Impl
=
SelectorImpl
;
fn
visit_selector_list
(
&
mut
self
_list_kind
:
SelectorListKind
list
:
&
[
Selector
<
SelectorImpl
>
]
)
-
>
bool
{
for
selector
in
list
{
let
mut
iter
=
selector
.
iter
(
)
;
let
mut
index
=
0
;
for
ss
in
&
mut
iter
{
if
!
ss
.
visit
(
self
)
{
return
false
;
}
index
+
=
1
;
}
let
combinator
=
iter
.
next_sequence
(
)
;
if
combinator
.
is_none
(
)
{
continue
;
}
index
+
=
1
;
self
.
parent_selectors
.
push
(
ParentDependencyEntry
{
selector
:
self
.
selector
.
clone
(
)
offset
:
self
.
compound_state
.
offset
cached_dependency
:
None
}
)
;
let
mut
nested
=
SelectorDependencyCollector
{
map
:
&
mut
*
self
.
map
document_state
:
&
mut
*
self
.
document_state
selector
parent_selectors
:
&
mut
*
self
.
parent_selectors
quirks_mode
:
self
.
quirks_mode
compound_state
:
PerCompoundState
:
:
new
(
index
)
alloc_error
:
&
mut
*
self
.
alloc_error
}
;
if
!
nested
.
visit_whole_selector_from
(
iter
index
)
{
return
false
;
}
self
.
parent_selectors
.
pop
(
)
;
}
true
}
fn
visit_simple_selector
(
&
mut
self
s
:
&
Component
<
SelectorImpl
>
)
-
>
bool
{
use
crate
:
:
selector_parser
:
:
NonTSPseudoClass
;
match
*
s
{
Component
:
:
ID
(
ref
atom
)
|
Component
:
:
Class
(
ref
atom
)
=
>
{
let
dependency
=
self
.
dependency
(
)
;
let
map
=
match
*
s
{
Component
:
:
ID
(
.
.
)
=
>
&
mut
self
.
map
.
id_to_selector
Component
:
:
Class
(
.
.
)
=
>
&
mut
self
.
map
.
class_to_selector
_
=
>
unreachable
!
(
)
}
;
let
entry
=
match
map
.
try_entry
(
atom
.
0
.
clone
(
)
self
.
quirks_mode
)
{
Ok
(
entry
)
=
>
entry
Err
(
err
)
=
>
{
*
self
.
alloc_error
=
Some
(
err
.
into
(
)
)
;
return
false
;
}
}
;
let
vec
=
entry
.
or_insert_with
(
SmallVec
:
:
new
)
;
if
let
Err
(
err
)
=
vec
.
try_reserve
(
1
)
{
*
self
.
alloc_error
=
Some
(
err
.
into
(
)
)
;
return
false
;
}
vec
.
push
(
dependency
)
;
true
}
Component
:
:
NonTSPseudoClass
(
ref
pc
)
=
>
{
self
.
compound_state
.
element_state
|
=
pc
.
state_flag
(
)
;
*
self
.
document_state
|
=
pc
.
document_state_flag
(
)
;
let
attr_name
=
match
*
pc
{
#
[
cfg
(
feature
=
"
gecko
"
)
]
NonTSPseudoClass
:
:
MozTableBorderNonzero
=
>
local_name
!
(
"
border
"
)
#
[
cfg
(
feature
=
"
gecko
"
)
]
NonTSPseudoClass
:
:
MozBrowserFrame
=
>
local_name
!
(
"
mozbrowser
"
)
#
[
cfg
(
feature
=
"
gecko
"
)
]
NonTSPseudoClass
:
:
MozSelectListBox
=
>
{
return
self
.
add_attr_dependency
(
local_name
!
(
"
multiple
"
)
)
&
&
self
.
add_attr_dependency
(
local_name
!
(
"
size
"
)
)
;
}
NonTSPseudoClass
:
:
Lang
(
.
.
)
=
>
local_name
!
(
"
lang
"
)
_
=
>
return
true
}
;
self
.
add_attr_dependency
(
attr_name
)
}
_
=
>
true
}
}
fn
visit_attribute_selector
(
&
mut
self
_
:
&
NamespaceConstraint
<
&
Namespace
>
local_name
:
&
LocalName
local_name_lower
:
&
LocalName
)
-
>
bool
{
if
!
self
.
add_attr_dependency
(
local_name
.
clone
(
)
)
{
return
false
;
}
if
local_name
!
=
local_name_lower
&
&
!
self
.
add_attr_dependency
(
local_name_lower
.
clone
(
)
)
{
return
false
;
}
true
}
}
