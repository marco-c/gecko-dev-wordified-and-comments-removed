#
!
[
allow
(
unsafe_code
)
]
use
owning_ref
:
:
StableAddress
;
use
std
:
:
ops
:
:
{
Deref
DerefMut
}
;
pub
struct
OwningHandle
<
O
H
>
where
O
:
StableAddress
H
:
Deref
{
handle
:
H
_owner
:
O
}
impl
<
O
H
>
Deref
for
OwningHandle
<
O
H
>
where
O
:
StableAddress
H
:
Deref
{
type
Target
=
H
:
:
Target
;
fn
deref
(
&
self
)
-
>
&
H
:
:
Target
{
self
.
handle
.
deref
(
)
}
}
unsafe
impl
<
O
H
>
StableAddress
for
OwningHandle
<
O
H
>
where
O
:
StableAddress
H
:
StableAddress
{
}
impl
<
O
H
>
DerefMut
for
OwningHandle
<
O
H
>
where
O
:
StableAddress
H
:
DerefMut
{
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
H
:
:
Target
{
self
.
handle
.
deref_mut
(
)
}
}
impl
<
O
H
>
OwningHandle
<
O
H
>
where
O
:
StableAddress
H
:
Deref
{
pub
fn
new
<
F
>
(
o
:
O
f
:
F
)
-
>
Self
where
F
:
Fn
(
*
const
O
:
:
Target
)
-
>
H
{
let
h
:
H
;
{
h
=
f
(
o
.
deref
(
)
as
*
const
O
:
:
Target
)
;
}
OwningHandle
{
handle
:
h
_owner
:
o
}
}
}
