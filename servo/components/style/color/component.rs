#
[
derive
(
Clone
MallocSizeOf
PartialEq
ToShmem
)
]
pub
enum
ColorComponent
<
ValueType
>
{
None
Value
(
ValueType
)
}
impl
<
ValueType
>
ColorComponent
<
ValueType
>
{
#
[
inline
]
pub
fn
is_none
(
&
self
)
-
>
bool
{
matches
!
(
self
Self
:
:
None
)
}
pub
fn
map_value
<
OutType
>
(
self
f
:
impl
FnOnce
(
ValueType
)
-
>
OutType
)
-
>
ColorComponent
<
OutType
>
{
match
self
{
Self
:
:
None
=
>
ColorComponent
:
:
None
Self
:
:
Value
(
value
)
=
>
ColorComponent
:
:
Value
(
f
(
value
)
)
}
}
pub
fn
into_value
(
self
)
-
>
ValueType
{
match
self
{
Self
:
:
None
=
>
panic
!
(
"
value
not
available
when
component
is
None
"
)
Self
:
:
Value
(
value
)
=
>
value
}
}
pub
fn
into_value_or
(
self
default
:
ValueType
)
-
>
ValueType
{
match
self
{
Self
:
:
None
=
>
default
Self
:
:
Value
(
value
)
=
>
value
}
}
}
