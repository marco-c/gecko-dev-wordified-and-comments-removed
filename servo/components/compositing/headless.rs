use
compositor_task
:
:
{
CompositorEventListener
CompositorReceiver
}
;
use
compositor_task
:
:
{
InitialCompositorState
Msg
}
;
use
euclid
:
:
scale_factor
:
:
ScaleFactor
;
use
euclid
:
:
{
Point2D
Size2D
}
;
use
msg
:
:
constellation_msg
:
:
AnimationState
;
use
msg
:
:
constellation_msg
:
:
Msg
as
ConstellationMsg
;
use
msg
:
:
constellation_msg
:
:
{
ConstellationChan
WindowSizeData
}
;
use
profile_traits
:
:
mem
;
use
profile_traits
:
:
time
;
use
util
:
:
opts
;
use
windowing
:
:
WindowEvent
;
pub
struct
NullCompositor
{
pub
port
:
Box
<
CompositorReceiver
>
constellation_chan
:
ConstellationChan
time_profiler_chan
:
time
:
:
ProfilerChan
mem_profiler_chan
:
mem
:
:
ProfilerChan
}
impl
NullCompositor
{
fn
new
(
state
:
InitialCompositorState
)
-
>
NullCompositor
{
NullCompositor
{
port
:
state
.
receiver
constellation_chan
:
state
.
constellation_chan
time_profiler_chan
:
state
.
time_profiler_chan
mem_profiler_chan
:
state
.
mem_profiler_chan
}
}
pub
fn
create
(
state
:
InitialCompositorState
)
-
>
NullCompositor
{
let
compositor
=
NullCompositor
:
:
new
(
state
)
;
{
let
ConstellationChan
(
ref
chan
)
=
compositor
.
constellation_chan
;
chan
.
send
(
ConstellationMsg
:
:
ResizedWindow
(
WindowSizeData
{
initial_viewport
:
Size2D
:
:
typed
(
800_f32
600_f32
)
visible_viewport
:
Size2D
:
:
typed
(
800_f32
600_f32
)
device_pixel_ratio
:
ScaleFactor
:
:
new
(
opts
:
:
get
(
)
.
device_pixels_per_px
.
unwrap_or
(
1
.
0
)
)
}
)
)
.
unwrap
(
)
;
}
compositor
}
}
impl
CompositorEventListener
for
NullCompositor
{
fn
handle_events
(
&
mut
self
_
:
Vec
<
WindowEvent
>
)
-
>
bool
{
match
self
.
port
.
recv_compositor_msg
(
)
{
Msg
:
:
Exit
(
chan
)
=
>
{
debug
!
(
"
shutting
down
the
constellation
"
)
;
let
ConstellationChan
(
ref
con_chan
)
=
self
.
constellation_chan
;
con_chan
.
send
(
ConstellationMsg
:
:
Exit
)
.
unwrap
(
)
;
chan
.
send
(
(
)
)
.
unwrap
(
)
;
}
Msg
:
:
ShutdownComplete
=
>
{
debug
!
(
"
constellation
completed
shutdown
"
)
;
while
self
.
port
.
try_recv_compositor_msg
(
)
.
is_some
(
)
{
}
self
.
time_profiler_chan
.
send
(
time
:
:
ProfilerMsg
:
:
Exit
)
;
self
.
mem_profiler_chan
.
send
(
mem
:
:
ProfilerMsg
:
:
Exit
)
;
return
false
}
Msg
:
:
GetNativeDisplay
(
chan
)
=
>
{
chan
.
send
(
None
)
.
unwrap
(
)
;
}
Msg
:
:
SetFrameTree
(
_
response_chan
_
)
=
>
{
response_chan
.
send
(
(
)
)
.
unwrap
(
)
;
}
Msg
:
:
GetClientWindow
(
send
)
=
>
{
let
rect
=
(
Size2D
:
:
zero
(
)
Point2D
:
:
zero
(
)
)
;
send
.
send
(
rect
)
.
unwrap
(
)
;
}
Msg
:
:
ChangeRunningAnimationsState
(
pipeline_id
animation_state
)
=
>
{
match
animation_state
{
AnimationState
:
:
AnimationsPresent
|
AnimationState
:
:
NoAnimationsPresent
|
AnimationState
:
:
NoAnimationCallbacksPresent
=
>
{
}
AnimationState
:
:
AnimationCallbacksPresent
=
>
{
let
msg
=
ConstellationMsg
:
:
TickAnimation
(
pipeline_id
)
;
self
.
constellation_chan
.
0
.
send
(
msg
)
.
unwrap
(
)
}
}
}
Msg
:
:
InitializeLayersForPipeline
(
.
.
)
|
Msg
:
:
AssignPaintedBuffers
(
.
.
)
|
Msg
:
:
ScrollFragmentPoint
(
.
.
)
|
Msg
:
:
Status
(
.
.
)
|
Msg
:
:
LoadStart
(
.
.
)
|
Msg
:
:
LoadComplete
(
.
.
)
|
Msg
:
:
ScrollTimeout
(
.
.
)
|
Msg
:
:
RecompositeAfterScroll
|
Msg
:
:
ChangePageTitle
(
.
.
)
|
Msg
:
:
ChangePageUrl
(
.
.
)
|
Msg
:
:
KeyEvent
(
.
.
)
|
Msg
:
:
SetCursor
(
.
.
)
|
Msg
:
:
ViewportConstrained
(
.
.
)
=
>
{
}
Msg
:
:
CreatePng
(
.
.
)
|
Msg
:
:
PaintTaskExited
(
.
.
)
|
Msg
:
:
MoveTo
(
.
.
)
|
Msg
:
:
ResizeTo
(
.
.
)
|
Msg
:
:
IsReadyToSaveImageReply
(
.
.
)
=
>
{
}
Msg
:
:
NewFavicon
(
.
.
)
=
>
{
}
Msg
:
:
HeadParsed
=
>
{
}
Msg
:
:
ReturnUnusedNativeSurfaces
(
.
.
)
=
>
{
}
Msg
:
:
CollectMemoryReports
(
.
.
)
=
>
{
}
Msg
:
:
PipelineExited
(
.
.
)
=
>
{
}
}
true
}
fn
repaint_synchronously
(
&
mut
self
)
{
}
fn
pinch_zoom_level
(
&
self
)
-
>
f32
{
1
.
0
}
fn
title_for_main_frame
(
&
self
)
{
}
}
