pub
use
windowing
;
pub
use
constellation
:
:
SendableFrameTree
;
use
compositor
;
use
headless
;
use
windowing
:
:
{
WindowEvent
WindowMethods
}
;
use
geom
:
:
point
:
:
Point2D
;
use
geom
:
:
rect
:
:
Rect
;
use
layers
:
:
platform
:
:
surface
:
:
{
NativeCompositingGraphicsContext
NativeGraphicsMetadata
}
;
use
layers
:
:
layers
:
:
LayerBufferSet
;
use
msg
:
:
compositor_msg
:
:
{
Epoch
LayerId
LayerProperties
FrameTreeId
}
;
use
msg
:
:
compositor_msg
:
:
{
PaintListener
ScriptListener
}
;
use
msg
:
:
constellation_msg
:
:
{
AnimationState
ConstellationChan
PipelineId
}
;
use
msg
:
:
constellation_msg
:
:
{
Key
KeyState
KeyModifiers
}
;
use
profile_traits
:
:
mem
;
use
profile_traits
:
:
time
;
use
png
;
use
std
:
:
sync
:
:
mpsc
:
:
{
channel
Sender
Receiver
}
;
use
std
:
:
fmt
:
:
{
Error
Formatter
Debug
}
;
use
std
:
:
rc
:
:
Rc
;
use
style
:
:
viewport
:
:
ViewportConstraints
;
use
url
:
:
Url
;
use
util
:
:
cursor
:
:
Cursor
;
pub
trait
CompositorProxy
:
'
static
+
Send
{
fn
send
(
&
mut
self
msg
:
Msg
)
;
fn
clone_compositor_proxy
(
&
self
)
-
>
Box
<
CompositorProxy
+
'
static
+
Send
>
;
}
pub
trait
CompositorReceiver
:
'
static
{
fn
try_recv_compositor_msg
(
&
mut
self
)
-
>
Option
<
Msg
>
;
fn
recv_compositor_msg
(
&
mut
self
)
-
>
Msg
;
}
impl
CompositorReceiver
for
Receiver
<
Msg
>
{
fn
try_recv_compositor_msg
(
&
mut
self
)
-
>
Option
<
Msg
>
{
match
self
.
try_recv
(
)
{
Ok
(
msg
)
=
>
Some
(
msg
)
Err
(
_
)
=
>
None
}
}
fn
recv_compositor_msg
(
&
mut
self
)
-
>
Msg
{
self
.
recv
(
)
.
unwrap
(
)
}
}
impl
ScriptListener
for
Box
<
CompositorProxy
+
'
static
+
Send
>
{
fn
scroll_fragment_point
(
&
mut
self
pipeline_id
:
PipelineId
layer_id
:
LayerId
point
:
Point2D
<
f32
>
)
{
self
.
send
(
Msg
:
:
ScrollFragmentPoint
(
pipeline_id
layer_id
point
)
)
;
}
fn
close
(
&
mut
self
)
{
let
(
chan
port
)
=
channel
(
)
;
self
.
send
(
Msg
:
:
Exit
(
chan
)
)
;
port
.
recv
(
)
.
unwrap
(
)
;
}
fn
dup
(
&
mut
self
)
-
>
Box
<
ScriptListener
+
'
static
>
{
box
self
.
clone_compositor_proxy
(
)
as
Box
<
ScriptListener
+
'
static
>
}
fn
set_title
(
&
mut
self
pipeline_id
:
PipelineId
title
:
Option
<
String
>
)
{
self
.
send
(
Msg
:
:
ChangePageTitle
(
pipeline_id
title
)
)
}
fn
send_key_event
(
&
mut
self
key
:
Key
state
:
KeyState
modifiers
:
KeyModifiers
)
{
self
.
send
(
Msg
:
:
KeyEvent
(
key
state
modifiers
)
)
;
}
}
impl
PaintListener
for
Box
<
CompositorProxy
+
'
static
+
Send
>
{
fn
get_graphics_metadata
(
&
mut
self
)
-
>
Option
<
NativeGraphicsMetadata
>
{
let
(
chan
port
)
=
channel
(
)
;
self
.
send
(
Msg
:
:
GetGraphicsMetadata
(
chan
)
)
;
port
.
recv
(
)
.
unwrap
(
)
}
fn
assign_painted_buffers
(
&
mut
self
pipeline_id
:
PipelineId
epoch
:
Epoch
replies
:
Vec
<
(
LayerId
Box
<
LayerBufferSet
>
)
>
frame_tree_id
:
FrameTreeId
)
{
self
.
send
(
Msg
:
:
AssignPaintedBuffers
(
pipeline_id
epoch
replies
frame_tree_id
)
)
;
}
fn
initialize_layers_for_pipeline
(
&
mut
self
pipeline_id
:
PipelineId
properties
:
Vec
<
LayerProperties
>
epoch
:
Epoch
)
{
self
.
send
(
Msg
:
:
InitializeLayersForPipeline
(
pipeline_id
epoch
properties
)
)
;
}
}
pub
enum
Msg
{
Exit
(
Sender
<
(
)
>
)
ShutdownComplete
GetGraphicsMetadata
(
Sender
<
Option
<
NativeGraphicsMetadata
>
>
)
InitializeLayersForPipeline
(
PipelineId
Epoch
Vec
<
LayerProperties
>
)
SetLayerRect
(
PipelineId
LayerId
Rect
<
f32
>
)
ScrollFragmentPoint
(
PipelineId
LayerId
Point2D
<
f32
>
)
AssignPaintedBuffers
(
PipelineId
Epoch
Vec
<
(
LayerId
Box
<
LayerBufferSet
>
)
>
FrameTreeId
)
ChangePageTitle
(
PipelineId
Option
<
String
>
)
ChangePageUrl
(
PipelineId
Url
)
ChangeRunningAnimationsState
(
PipelineId
AnimationState
)
SetFrameTree
(
SendableFrameTree
Sender
<
(
)
>
ConstellationChan
)
LoadComplete
ScrollTimeout
(
u64
)
RecompositeAfterScroll
KeyEvent
(
Key
KeyState
KeyModifiers
)
SetCursor
(
Cursor
)
CreatePng
(
Sender
<
Option
<
png
:
:
Image
>
>
)
PaintTaskExited
(
PipelineId
)
ViewportConstrained
(
PipelineId
ViewportConstraints
)
IsReadyToSaveImageReply
(
bool
)
}
impl
Debug
for
Msg
{
fn
fmt
(
&
self
f
:
&
mut
Formatter
)
-
>
Result
<
(
)
Error
>
{
match
*
self
{
Msg
:
:
Exit
(
.
.
)
=
>
write
!
(
f
"
Exit
"
)
Msg
:
:
ShutdownComplete
(
.
.
)
=
>
write
!
(
f
"
ShutdownComplete
"
)
Msg
:
:
GetGraphicsMetadata
(
.
.
)
=
>
write
!
(
f
"
GetGraphicsMetadata
"
)
Msg
:
:
InitializeLayersForPipeline
(
.
.
)
=
>
write
!
(
f
"
InitializeLayersForPipeline
"
)
Msg
:
:
SetLayerRect
(
.
.
)
=
>
write
!
(
f
"
SetLayerRect
"
)
Msg
:
:
ScrollFragmentPoint
(
.
.
)
=
>
write
!
(
f
"
ScrollFragmentPoint
"
)
Msg
:
:
AssignPaintedBuffers
(
.
.
)
=
>
write
!
(
f
"
AssignPaintedBuffers
"
)
Msg
:
:
ChangeRunningAnimationsState
(
.
.
)
=
>
write
!
(
f
"
ChangeRunningAnimationsState
"
)
Msg
:
:
ChangePageTitle
(
.
.
)
=
>
write
!
(
f
"
ChangePageTitle
"
)
Msg
:
:
ChangePageUrl
(
.
.
)
=
>
write
!
(
f
"
ChangePageUrl
"
)
Msg
:
:
SetFrameTree
(
.
.
)
=
>
write
!
(
f
"
SetFrameTree
"
)
Msg
:
:
LoadComplete
=
>
write
!
(
f
"
LoadComplete
"
)
Msg
:
:
ScrollTimeout
(
.
.
)
=
>
write
!
(
f
"
ScrollTimeout
"
)
Msg
:
:
RecompositeAfterScroll
=
>
write
!
(
f
"
RecompositeAfterScroll
"
)
Msg
:
:
KeyEvent
(
.
.
)
=
>
write
!
(
f
"
KeyEvent
"
)
Msg
:
:
SetCursor
(
.
.
)
=
>
write
!
(
f
"
SetCursor
"
)
Msg
:
:
CreatePng
(
.
.
)
=
>
write
!
(
f
"
CreatePng
"
)
Msg
:
:
PaintTaskExited
(
.
.
)
=
>
write
!
(
f
"
PaintTaskExited
"
)
Msg
:
:
ViewportConstrained
(
.
.
)
=
>
write
!
(
f
"
ViewportConstrained
"
)
Msg
:
:
IsReadyToSaveImageReply
(
.
.
)
=
>
write
!
(
f
"
IsReadyToSaveImageReply
"
)
}
}
}
pub
struct
CompositorTask
;
impl
CompositorTask
{
#
[
cfg
(
target_os
=
"
linux
"
)
]
pub
fn
create_graphics_context
(
native_metadata
:
&
NativeGraphicsMetadata
)
-
>
NativeCompositingGraphicsContext
{
NativeCompositingGraphicsContext
:
:
from_display
(
native_metadata
.
display
)
}
#
[
cfg
(
not
(
target_os
=
"
linux
"
)
)
]
pub
fn
create_graphics_context
(
_
:
&
NativeGraphicsMetadata
)
-
>
NativeCompositingGraphicsContext
{
NativeCompositingGraphicsContext
:
:
new
(
)
}
pub
fn
create
<
Window
>
(
window
:
Option
<
Rc
<
Window
>
>
sender
:
Box
<
CompositorProxy
+
Send
>
receiver
:
Box
<
CompositorReceiver
>
constellation_chan
:
ConstellationChan
time_profiler_chan
:
time
:
:
ProfilerChan
mem_profiler_chan
:
mem
:
:
ProfilerChan
)
-
>
Box
<
CompositorEventListener
+
'
static
>
where
Window
:
WindowMethods
+
'
static
{
match
window
{
Some
(
window
)
=
>
{
box
compositor
:
:
IOCompositor
:
:
create
(
window
sender
receiver
constellation_chan
.
clone
(
)
time_profiler_chan
mem_profiler_chan
)
as
Box
<
CompositorEventListener
>
}
None
=
>
{
box
headless
:
:
NullCompositor
:
:
create
(
receiver
constellation_chan
.
clone
(
)
time_profiler_chan
mem_profiler_chan
)
as
Box
<
CompositorEventListener
>
}
}
}
}
pub
trait
CompositorEventListener
{
fn
handle_event
(
&
mut
self
event
:
WindowEvent
)
-
>
bool
;
fn
repaint_synchronously
(
&
mut
self
)
;
fn
shutdown
(
&
mut
self
)
;
fn
pinch_zoom_level
(
&
self
)
-
>
f32
;
fn
get_title_for_main_frame
(
&
self
)
;
}
