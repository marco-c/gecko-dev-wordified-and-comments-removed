use
SendableFrameTree
;
use
compositor
:
:
CompositingReason
;
use
gfx_traits
:
:
Epoch
;
use
ipc_channel
:
:
ipc
:
:
IpcSender
;
use
msg
:
:
constellation_msg
:
:
{
Key
KeyModifiers
KeyState
PipelineId
TopLevelBrowsingContextId
}
;
use
net_traits
:
:
image
:
:
base
:
:
Image
;
use
profile_traits
:
:
mem
;
use
profile_traits
:
:
time
;
use
script_traits
:
:
{
AnimationState
ConstellationMsg
EventResult
LoadData
}
;
use
servo_url
:
:
ServoUrl
;
use
std
:
:
fmt
:
:
{
Debug
Error
Formatter
}
;
use
std
:
:
sync
:
:
mpsc
:
:
{
Receiver
Sender
}
;
use
style_traits
:
:
cursor
:
:
CursorKind
;
use
style_traits
:
:
viewport
:
:
ViewportConstraints
;
use
webrender
;
use
webrender_api
:
:
{
self
DeviceIntPoint
DeviceUintSize
}
;
pub
trait
EventLoopWaker
:
'
static
+
Send
{
fn
clone
(
&
self
)
-
>
Box
<
EventLoopWaker
+
Send
>
;
fn
wake
(
&
self
)
;
}
pub
struct
EmbedderProxy
{
pub
sender
:
Sender
<
EmbedderMsg
>
pub
event_loop_waker
:
Box
<
EventLoopWaker
>
}
impl
EmbedderProxy
{
pub
fn
send
(
&
self
msg
:
EmbedderMsg
)
{
if
let
Err
(
err
)
=
self
.
sender
.
send
(
msg
)
{
warn
!
(
"
Failed
to
send
response
(
{
}
)
.
"
err
)
;
}
self
.
event_loop_waker
.
wake
(
)
;
}
}
impl
Clone
for
EmbedderProxy
{
fn
clone
(
&
self
)
-
>
EmbedderProxy
{
EmbedderProxy
{
sender
:
self
.
sender
.
clone
(
)
event_loop_waker
:
self
.
event_loop_waker
.
clone
(
)
}
}
}
pub
struct
EmbedderReceiver
{
pub
receiver
:
Receiver
<
EmbedderMsg
>
}
impl
EmbedderReceiver
{
pub
fn
try_recv_embedder_msg
(
&
mut
self
)
-
>
Option
<
EmbedderMsg
>
{
self
.
receiver
.
try_recv
(
)
.
ok
(
)
}
pub
fn
recv_embedder_msg
(
&
mut
self
)
-
>
EmbedderMsg
{
self
.
receiver
.
recv
(
)
.
unwrap
(
)
}
}
pub
struct
CompositorProxy
{
pub
sender
:
Sender
<
Msg
>
pub
event_loop_waker
:
Box
<
EventLoopWaker
>
}
impl
CompositorProxy
{
pub
fn
send
(
&
self
msg
:
Msg
)
{
if
let
Err
(
err
)
=
self
.
sender
.
send
(
msg
)
{
warn
!
(
"
Failed
to
send
response
(
{
}
)
.
"
err
)
;
}
self
.
event_loop_waker
.
wake
(
)
;
}
}
impl
Clone
for
CompositorProxy
{
fn
clone
(
&
self
)
-
>
CompositorProxy
{
CompositorProxy
{
sender
:
self
.
sender
.
clone
(
)
event_loop_waker
:
self
.
event_loop_waker
.
clone
(
)
}
}
}
pub
struct
CompositorReceiver
{
pub
receiver
:
Receiver
<
Msg
>
}
impl
CompositorReceiver
{
pub
fn
try_recv_compositor_msg
(
&
mut
self
)
-
>
Option
<
Msg
>
{
self
.
receiver
.
try_recv
(
)
.
ok
(
)
}
pub
fn
recv_compositor_msg
(
&
mut
self
)
-
>
Msg
{
self
.
receiver
.
recv
(
)
.
unwrap
(
)
}
}
impl
CompositorProxy
{
pub
fn
recomposite
(
&
self
reason
:
CompositingReason
)
{
self
.
send
(
Msg
:
:
Recomposite
(
reason
)
)
;
}
}
pub
enum
EmbedderMsg
{
Status
(
TopLevelBrowsingContextId
Option
<
String
>
)
ChangePageTitle
(
TopLevelBrowsingContextId
Option
<
String
>
)
MoveTo
(
TopLevelBrowsingContextId
DeviceIntPoint
)
ResizeTo
(
TopLevelBrowsingContextId
DeviceUintSize
)
AllowNavigation
(
TopLevelBrowsingContextId
ServoUrl
IpcSender
<
bool
>
)
KeyEvent
(
Option
<
TopLevelBrowsingContextId
>
Option
<
char
>
Key
KeyState
KeyModifiers
)
SetCursor
(
CursorKind
)
NewFavicon
(
TopLevelBrowsingContextId
ServoUrl
)
HeadParsed
(
TopLevelBrowsingContextId
)
HistoryChanged
(
TopLevelBrowsingContextId
Vec
<
LoadData
>
usize
)
SetFullscreenState
(
TopLevelBrowsingContextId
bool
)
LoadStart
(
TopLevelBrowsingContextId
)
LoadComplete
(
TopLevelBrowsingContextId
)
Panic
(
TopLevelBrowsingContextId
String
Option
<
String
>
)
Shutdown
}
pub
enum
Msg
{
Exit
ShutdownComplete
ChangeRunningAnimationsState
(
PipelineId
AnimationState
)
SetFrameTree
(
SendableFrameTree
)
Recomposite
(
CompositingReason
)
TouchEventProcessed
(
EventResult
)
CreatePng
(
IpcSender
<
Option
<
Image
>
>
)
ViewportConstrained
(
PipelineId
ViewportConstraints
)
IsReadyToSaveImageReply
(
bool
)
PipelineVisibilityChanged
(
PipelineId
bool
)
NewScrollFrameReady
(
bool
)
PipelineExited
(
PipelineId
IpcSender
<
(
)
>
)
Dispatch
(
Box
<
Fn
(
)
+
Send
>
)
PendingPaintMetric
(
PipelineId
Epoch
)
LoadComplete
(
TopLevelBrowsingContextId
)
GetClientWindow
(
IpcSender
<
(
DeviceUintSize
DeviceIntPoint
)
>
)
GetScreenSize
(
IpcSender
<
DeviceUintSize
>
)
GetScreenAvailSize
(
IpcSender
<
DeviceUintSize
>
)
}
impl
Debug
for
Msg
{
fn
fmt
(
&
self
f
:
&
mut
Formatter
)
-
>
Result
<
(
)
Error
>
{
match
*
self
{
Msg
:
:
Exit
=
>
write
!
(
f
"
Exit
"
)
Msg
:
:
ShutdownComplete
=
>
write
!
(
f
"
ShutdownComplete
"
)
Msg
:
:
ChangeRunningAnimationsState
(
.
.
)
=
>
write
!
(
f
"
ChangeRunningAnimationsState
"
)
Msg
:
:
SetFrameTree
(
.
.
)
=
>
write
!
(
f
"
SetFrameTree
"
)
Msg
:
:
Recomposite
(
.
.
)
=
>
write
!
(
f
"
Recomposite
"
)
Msg
:
:
TouchEventProcessed
(
.
.
)
=
>
write
!
(
f
"
TouchEventProcessed
"
)
Msg
:
:
CreatePng
(
.
.
)
=
>
write
!
(
f
"
CreatePng
"
)
Msg
:
:
ViewportConstrained
(
.
.
)
=
>
write
!
(
f
"
ViewportConstrained
"
)
Msg
:
:
IsReadyToSaveImageReply
(
.
.
)
=
>
write
!
(
f
"
IsReadyToSaveImageReply
"
)
Msg
:
:
PipelineVisibilityChanged
(
.
.
)
=
>
write
!
(
f
"
PipelineVisibilityChanged
"
)
Msg
:
:
PipelineExited
(
.
.
)
=
>
write
!
(
f
"
PipelineExited
"
)
Msg
:
:
NewScrollFrameReady
(
.
.
)
=
>
write
!
(
f
"
NewScrollFrameReady
"
)
Msg
:
:
Dispatch
(
.
.
)
=
>
write
!
(
f
"
Dispatch
"
)
Msg
:
:
PendingPaintMetric
(
.
.
)
=
>
write
!
(
f
"
PendingPaintMetric
"
)
Msg
:
:
LoadComplete
(
.
.
)
=
>
write
!
(
f
"
LoadComplete
"
)
Msg
:
:
GetClientWindow
(
.
.
)
=
>
write
!
(
f
"
GetClientWindow
"
)
Msg
:
:
GetScreenSize
(
.
.
)
=
>
write
!
(
f
"
GetScreenSize
"
)
Msg
:
:
GetScreenAvailSize
(
.
.
)
=
>
write
!
(
f
"
GetScreenAvailSize
"
)
}
}
}
impl
Debug
for
EmbedderMsg
{
fn
fmt
(
&
self
f
:
&
mut
Formatter
)
-
>
Result
<
(
)
Error
>
{
match
*
self
{
EmbedderMsg
:
:
Status
(
.
.
)
=
>
write
!
(
f
"
Status
"
)
EmbedderMsg
:
:
ChangePageTitle
(
.
.
)
=
>
write
!
(
f
"
ChangePageTitle
"
)
EmbedderMsg
:
:
MoveTo
(
.
.
)
=
>
write
!
(
f
"
MoveTo
"
)
EmbedderMsg
:
:
ResizeTo
(
.
.
)
=
>
write
!
(
f
"
ResizeTo
"
)
EmbedderMsg
:
:
AllowNavigation
(
.
.
)
=
>
write
!
(
f
"
AllowNavigation
"
)
EmbedderMsg
:
:
KeyEvent
(
.
.
)
=
>
write
!
(
f
"
KeyEvent
"
)
EmbedderMsg
:
:
SetCursor
(
.
.
)
=
>
write
!
(
f
"
SetCursor
"
)
EmbedderMsg
:
:
NewFavicon
(
.
.
)
=
>
write
!
(
f
"
NewFavicon
"
)
EmbedderMsg
:
:
HeadParsed
(
.
.
)
=
>
write
!
(
f
"
HeadParsed
"
)
EmbedderMsg
:
:
HistoryChanged
(
.
.
)
=
>
write
!
(
f
"
HistoryChanged
"
)
EmbedderMsg
:
:
SetFullscreenState
(
.
.
)
=
>
write
!
(
f
"
SetFullscreenState
"
)
EmbedderMsg
:
:
LoadStart
(
.
.
)
=
>
write
!
(
f
"
LoadStart
"
)
EmbedderMsg
:
:
LoadComplete
(
.
.
)
=
>
write
!
(
f
"
LoadComplete
"
)
EmbedderMsg
:
:
Panic
(
.
.
)
=
>
write
!
(
f
"
Panic
"
)
EmbedderMsg
:
:
Shutdown
=
>
write
!
(
f
"
Shutdown
"
)
}
}
}
pub
struct
InitialCompositorState
{
pub
sender
:
CompositorProxy
pub
receiver
:
CompositorReceiver
pub
constellation_chan
:
Sender
<
ConstellationMsg
>
pub
time_profiler_chan
:
time
:
:
ProfilerChan
pub
mem_profiler_chan
:
mem
:
:
ProfilerChan
pub
webrender
:
webrender
:
:
Renderer
pub
webrender_document
:
webrender_api
:
:
DocumentId
pub
webrender_api
:
webrender_api
:
:
RenderApi
}
