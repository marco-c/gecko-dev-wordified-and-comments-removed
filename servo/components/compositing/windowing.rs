use
compositor_task
:
:
{
CompositorProxy
CompositorReceiver
}
;
use
geom
:
:
point
:
:
TypedPoint2D
;
use
geom
:
:
scale_factor
:
:
ScaleFactor
;
use
geom
:
:
size
:
:
TypedSize2D
;
use
layers
:
:
geometry
:
:
DevicePixel
;
use
layers
:
:
platform
:
:
surface
:
:
NativeGraphicsMetadata
;
use
servo_msg
:
:
compositor_msg
:
:
{
ReadyState
RenderState
}
;
use
servo_util
:
:
geometry
:
:
ScreenPx
;
use
std
:
:
fmt
:
:
{
FormatError
Formatter
Show
}
;
use
std
:
:
rc
:
:
Rc
;
pub
enum
MouseWindowEvent
{
MouseWindowClickEvent
(
uint
TypedPoint2D
<
DevicePixel
f32
>
)
MouseWindowMouseDownEvent
(
uint
TypedPoint2D
<
DevicePixel
f32
>
)
MouseWindowMouseUpEvent
(
uint
TypedPoint2D
<
DevicePixel
f32
>
)
}
pub
enum
WindowNavigateMsg
{
Forward
Back
}
pub
enum
WindowEvent
{
IdleWindowEvent
RefreshWindowEvent
ResizeWindowEvent
(
TypedSize2D
<
DevicePixel
uint
>
)
LoadUrlWindowEvent
(
String
)
MouseWindowEventClass
(
MouseWindowEvent
)
MouseWindowMoveEventClass
(
TypedPoint2D
<
DevicePixel
f32
>
)
ScrollWindowEvent
(
TypedPoint2D
<
DevicePixel
f32
>
TypedPoint2D
<
DevicePixel
i32
>
)
ZoomWindowEvent
(
f32
)
PinchZoomWindowEvent
(
f32
)
NavigationWindowEvent
(
WindowNavigateMsg
)
FinishedWindowEvent
QuitWindowEvent
}
impl
Show
for
WindowEvent
{
fn
fmt
(
&
self
f
:
&
mut
Formatter
)
-
>
Result
<
(
)
FormatError
>
{
match
*
self
{
IdleWindowEvent
=
>
write
!
(
f
"
Idle
"
)
RefreshWindowEvent
=
>
write
!
(
f
"
Refresh
"
)
ResizeWindowEvent
(
.
.
)
=
>
write
!
(
f
"
Resize
"
)
LoadUrlWindowEvent
(
.
.
)
=
>
write
!
(
f
"
LoadUrl
"
)
MouseWindowEventClass
(
.
.
)
=
>
write
!
(
f
"
Mouse
"
)
MouseWindowMoveEventClass
(
.
.
)
=
>
write
!
(
f
"
MouseMove
"
)
ScrollWindowEvent
(
.
.
)
=
>
write
!
(
f
"
Scroll
"
)
ZoomWindowEvent
(
.
.
)
=
>
write
!
(
f
"
Zoom
"
)
PinchZoomWindowEvent
(
.
.
)
=
>
write
!
(
f
"
PinchZoom
"
)
NavigationWindowEvent
(
.
.
)
=
>
write
!
(
f
"
Navigation
"
)
FinishedWindowEvent
=
>
write
!
(
f
"
Finished
"
)
QuitWindowEvent
=
>
write
!
(
f
"
Quit
"
)
}
}
}
pub
trait
WindowMethods
{
fn
framebuffer_size
(
&
self
)
-
>
TypedSize2D
<
DevicePixel
uint
>
;
fn
size
(
&
self
)
-
>
TypedSize2D
<
ScreenPx
f32
>
;
fn
present
(
&
self
)
;
fn
set_ready_state
(
&
self
ready_state
:
ReadyState
)
;
fn
set_render_state
(
&
self
render_state
:
RenderState
)
;
fn
hidpi_factor
(
&
self
)
-
>
ScaleFactor
<
ScreenPx
DevicePixel
f32
>
;
fn
native_metadata
(
&
self
)
-
>
NativeGraphicsMetadata
;
fn
create_compositor_channel
(
_
:
&
Option
<
Rc
<
Self
>
>
)
-
>
(
Box
<
CompositorProxy
+
Send
>
Box
<
CompositorReceiver
>
)
;
}
