use
compositor_task
:
:
{
CompositorProxy
CompositorReceiver
}
;
use
geom
:
:
point
:
:
TypedPoint2D
;
use
geom
:
:
scale_factor
:
:
ScaleFactor
;
use
geom
:
:
size
:
:
TypedSize2D
;
use
layers
:
:
geometry
:
:
DevicePixel
;
use
layers
:
:
platform
:
:
surface
:
:
NativeGraphicsMetadata
;
use
servo_msg
:
:
compositor_msg
:
:
{
PaintState
ReadyState
}
;
use
servo_msg
:
:
constellation_msg
:
:
{
Key
KeyState
KeyModifiers
LoadData
}
;
use
servo_util
:
:
cursor
:
:
Cursor
;
use
servo_util
:
:
geometry
:
:
ScreenPx
;
use
std
:
:
fmt
:
:
{
Error
Formatter
Show
}
;
use
std
:
:
rc
:
:
Rc
;
#
[
derive
(
Clone
)
]
pub
enum
MouseWindowEvent
{
Click
(
uint
TypedPoint2D
<
DevicePixel
f32
>
)
MouseDown
(
uint
TypedPoint2D
<
DevicePixel
f32
>
)
MouseUp
(
uint
TypedPoint2D
<
DevicePixel
f32
>
)
}
#
[
derive
(
Clone
)
]
pub
enum
WindowNavigateMsg
{
Forward
Back
}
#
[
derive
(
Clone
)
]
pub
enum
WindowEvent
{
Idle
Refresh
InitializeCompositing
Resize
(
TypedSize2D
<
DevicePixel
u32
>
)
LoadUrl
(
String
)
MouseWindowEventClass
(
MouseWindowEvent
)
MouseWindowMoveEventClass
(
TypedPoint2D
<
DevicePixel
f32
>
)
Scroll
(
TypedPoint2D
<
DevicePixel
f32
>
TypedPoint2D
<
DevicePixel
i32
>
)
Zoom
(
f32
)
PinchZoom
(
f32
)
Navigation
(
WindowNavigateMsg
)
Quit
KeyEvent
(
Key
KeyState
KeyModifiers
)
}
impl
Show
for
WindowEvent
{
fn
fmt
(
&
self
f
:
&
mut
Formatter
)
-
>
Result
<
(
)
Error
>
{
match
*
self
{
WindowEvent
:
:
Idle
=
>
write
!
(
f
"
Idle
"
)
WindowEvent
:
:
Refresh
=
>
write
!
(
f
"
Refresh
"
)
WindowEvent
:
:
InitializeCompositing
=
>
write
!
(
f
"
InitializeCompositing
"
)
WindowEvent
:
:
Resize
(
.
.
)
=
>
write
!
(
f
"
Resize
"
)
WindowEvent
:
:
KeyEvent
(
.
.
)
=
>
write
!
(
f
"
Key
"
)
WindowEvent
:
:
LoadUrl
(
.
.
)
=
>
write
!
(
f
"
LoadUrl
"
)
WindowEvent
:
:
MouseWindowEventClass
(
.
.
)
=
>
write
!
(
f
"
Mouse
"
)
WindowEvent
:
:
MouseWindowMoveEventClass
(
.
.
)
=
>
write
!
(
f
"
MouseMove
"
)
WindowEvent
:
:
Scroll
(
.
.
)
=
>
write
!
(
f
"
Scroll
"
)
WindowEvent
:
:
Zoom
(
.
.
)
=
>
write
!
(
f
"
Zoom
"
)
WindowEvent
:
:
PinchZoom
(
.
.
)
=
>
write
!
(
f
"
PinchZoom
"
)
WindowEvent
:
:
Navigation
(
.
.
)
=
>
write
!
(
f
"
Navigation
"
)
WindowEvent
:
:
Quit
=
>
write
!
(
f
"
Quit
"
)
}
}
}
pub
trait
WindowMethods
{
fn
framebuffer_size
(
&
self
)
-
>
TypedSize2D
<
DevicePixel
u32
>
;
fn
size
(
&
self
)
-
>
TypedSize2D
<
ScreenPx
f32
>
;
fn
present
(
&
self
)
;
fn
set_ready_state
(
&
self
ready_state
:
ReadyState
)
;
fn
set_paint_state
(
&
self
paint_state
:
PaintState
)
;
fn
set_page_title
(
&
self
title
:
Option
<
String
>
)
;
fn
set_page_load_data
(
&
self
load_data
:
LoadData
)
;
fn
load_end
(
&
self
)
;
fn
hidpi_factor
(
&
self
)
-
>
ScaleFactor
<
ScreenPx
DevicePixel
f32
>
;
fn
native_metadata
(
&
self
)
-
>
NativeGraphicsMetadata
;
fn
create_compositor_channel
(
_
:
&
Option
<
Rc
<
Self
>
>
)
-
>
(
Box
<
CompositorProxy
+
Send
>
Box
<
CompositorReceiver
>
)
;
fn
prepare_for_composite
(
&
self
)
-
>
bool
;
fn
set_cursor
(
&
self
cursor
:
Cursor
)
;
fn
handle_key
(
&
self
key
:
Key
mods
:
KeyModifiers
)
;
}
