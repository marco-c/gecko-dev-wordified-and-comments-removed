use
compositor_thread
:
:
EventLoopWaker
;
use
euclid
:
:
TypedScale
;
use
gleam
:
:
gl
;
use
ipc_channel
:
:
ipc
:
:
IpcSender
;
use
msg
:
:
constellation_msg
:
:
{
Key
KeyModifiers
KeyState
TopLevelBrowsingContextId
TraversalDirection
}
;
use
script_traits
:
:
{
MouseButton
TouchEventType
TouchId
}
;
use
servo_geometry
:
:
{
DeviceIndependentPixel
DeviceUintLength
}
;
use
servo_url
:
:
ServoUrl
;
use
std
:
:
fmt
:
:
{
Debug
Error
Formatter
}
;
use
std
:
:
rc
:
:
Rc
;
use
style_traits
:
:
DevicePixel
;
use
webrender_api
:
:
{
DeviceIntPoint
DevicePoint
DeviceUintSize
DeviceUintRect
ScrollLocation
}
;
#
[
derive
(
Clone
)
]
pub
enum
MouseWindowEvent
{
Click
(
MouseButton
DevicePoint
)
MouseDown
(
MouseButton
DevicePoint
)
MouseUp
(
MouseButton
DevicePoint
)
}
#
[
derive
(
Clone
)
]
pub
enum
WebRenderDebugOption
{
Profiler
TextureCacheDebug
RenderTargetDebug
}
#
[
derive
(
Clone
)
]
pub
enum
WindowEvent
{
Idle
Refresh
Resize
LoadUrl
(
TopLevelBrowsingContextId
ServoUrl
)
MouseWindowEventClass
(
MouseWindowEvent
)
MouseWindowMoveEventClass
(
DevicePoint
)
Touch
(
TouchEventType
TouchId
DevicePoint
)
Scroll
(
ScrollLocation
DeviceIntPoint
TouchEventType
)
Zoom
(
f32
)
PinchZoom
(
f32
)
ResetZoom
Navigation
(
TopLevelBrowsingContextId
TraversalDirection
)
Quit
KeyEvent
(
Option
<
char
>
Key
KeyState
KeyModifiers
)
Reload
(
TopLevelBrowsingContextId
)
NewBrowser
(
ServoUrl
IpcSender
<
TopLevelBrowsingContextId
>
)
CloseBrowser
(
TopLevelBrowsingContextId
)
SelectBrowser
(
TopLevelBrowsingContextId
)
ToggleWebRenderDebug
(
WebRenderDebugOption
)
CaptureWebRender
}
impl
Debug
for
WindowEvent
{
fn
fmt
(
&
self
f
:
&
mut
Formatter
)
-
>
Result
<
(
)
Error
>
{
match
*
self
{
WindowEvent
:
:
Idle
=
>
write
!
(
f
"
Idle
"
)
WindowEvent
:
:
Refresh
=
>
write
!
(
f
"
Refresh
"
)
WindowEvent
:
:
Resize
=
>
write
!
(
f
"
Resize
"
)
WindowEvent
:
:
KeyEvent
(
.
.
)
=
>
write
!
(
f
"
Key
"
)
WindowEvent
:
:
LoadUrl
(
.
.
)
=
>
write
!
(
f
"
LoadUrl
"
)
WindowEvent
:
:
MouseWindowEventClass
(
.
.
)
=
>
write
!
(
f
"
Mouse
"
)
WindowEvent
:
:
MouseWindowMoveEventClass
(
.
.
)
=
>
write
!
(
f
"
MouseMove
"
)
WindowEvent
:
:
Touch
(
.
.
)
=
>
write
!
(
f
"
Touch
"
)
WindowEvent
:
:
Scroll
(
.
.
)
=
>
write
!
(
f
"
Scroll
"
)
WindowEvent
:
:
Zoom
(
.
.
)
=
>
write
!
(
f
"
Zoom
"
)
WindowEvent
:
:
PinchZoom
(
.
.
)
=
>
write
!
(
f
"
PinchZoom
"
)
WindowEvent
:
:
ResetZoom
=
>
write
!
(
f
"
ResetZoom
"
)
WindowEvent
:
:
Navigation
(
.
.
)
=
>
write
!
(
f
"
Navigation
"
)
WindowEvent
:
:
Quit
=
>
write
!
(
f
"
Quit
"
)
WindowEvent
:
:
Reload
(
.
.
)
=
>
write
!
(
f
"
Reload
"
)
WindowEvent
:
:
NewBrowser
(
.
.
)
=
>
write
!
(
f
"
NewBrowser
"
)
WindowEvent
:
:
CloseBrowser
(
.
.
)
=
>
write
!
(
f
"
CloseBrowser
"
)
WindowEvent
:
:
SelectBrowser
(
.
.
)
=
>
write
!
(
f
"
SelectBrowser
"
)
WindowEvent
:
:
ToggleWebRenderDebug
(
.
.
)
=
>
write
!
(
f
"
ToggleWebRenderDebug
"
)
WindowEvent
:
:
CaptureWebRender
=
>
write
!
(
f
"
CaptureWebRender
"
)
}
}
}
#
[
derive
(
Clone
Copy
Debug
PartialEq
)
]
pub
enum
AnimationState
{
Idle
Animating
}
pub
trait
WindowMethods
{
fn
present
(
&
self
)
;
fn
prepare_for_composite
(
&
self
width
:
DeviceUintLength
height
:
DeviceUintLength
)
-
>
bool
;
fn
gl
(
&
self
)
-
>
Rc
<
gl
:
:
Gl
>
;
fn
create_event_loop_waker
(
&
self
)
-
>
Box
<
EventLoopWaker
>
;
fn
get_coordinates
(
&
self
)
-
>
EmbedderCoordinates
;
fn
supports_clipboard
(
&
self
)
-
>
bool
;
fn
set_animation_state
(
&
self
_state
:
AnimationState
)
;
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
struct
EmbedderCoordinates
{
pub
hidpi_factor
:
TypedScale
<
f32
DeviceIndependentPixel
DevicePixel
>
pub
screen
:
DeviceUintSize
pub
screen_avail
:
DeviceUintSize
pub
window
:
(
DeviceUintSize
DeviceIntPoint
)
pub
framebuffer
:
DeviceUintSize
pub
viewport
:
DeviceUintRect
}
