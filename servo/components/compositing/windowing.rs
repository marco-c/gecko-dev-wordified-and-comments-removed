use
compositor_thread
:
:
EventLoopWaker
;
use
euclid
:
:
{
Point2D
Size2D
}
;
use
euclid
:
:
{
ScaleFactor
TypedPoint2D
TypedSize2D
}
;
use
gleam
:
:
gl
;
use
ipc_channel
:
:
ipc
:
:
IpcSender
;
use
msg
:
:
constellation_msg
:
:
{
Key
KeyModifiers
KeyState
TopLevelBrowsingContextId
TraversalDirection
}
;
use
net_traits
:
:
net_error_list
:
:
NetError
;
use
script_traits
:
:
{
LoadData
MouseButton
TouchEventType
TouchId
TouchpadPressurePhase
}
;
use
servo_geometry
:
:
DeviceIndependentPixel
;
use
servo_url
:
:
ServoUrl
;
use
std
:
:
fmt
:
:
{
Debug
Error
Formatter
}
;
use
std
:
:
rc
:
:
Rc
;
use
style_traits
:
:
DevicePixel
;
use
style_traits
:
:
cursor
:
:
Cursor
;
use
webrender_api
:
:
{
DeviceUintSize
DeviceUintRect
ScrollLocation
}
;
#
[
derive
(
Clone
)
]
pub
enum
MouseWindowEvent
{
Click
(
MouseButton
TypedPoint2D
<
f32
DevicePixel
>
)
MouseDown
(
MouseButton
TypedPoint2D
<
f32
DevicePixel
>
)
MouseUp
(
MouseButton
TypedPoint2D
<
f32
DevicePixel
>
)
}
#
[
derive
(
Clone
)
]
pub
enum
WindowEvent
{
Idle
Refresh
Resize
(
DeviceUintSize
)
TouchpadPressure
(
TypedPoint2D
<
f32
DevicePixel
>
f32
TouchpadPressurePhase
)
LoadUrl
(
TopLevelBrowsingContextId
ServoUrl
)
MouseWindowEventClass
(
MouseWindowEvent
)
MouseWindowMoveEventClass
(
TypedPoint2D
<
f32
DevicePixel
>
)
Touch
(
TouchEventType
TouchId
TypedPoint2D
<
f32
DevicePixel
>
)
Scroll
(
ScrollLocation
TypedPoint2D
<
i32
DevicePixel
>
TouchEventType
)
Zoom
(
f32
)
PinchZoom
(
f32
)
ResetZoom
Navigation
(
TopLevelBrowsingContextId
TraversalDirection
)
Quit
KeyEvent
(
Option
<
char
>
Key
KeyState
KeyModifiers
)
ToggleWebRenderProfiler
Reload
(
TopLevelBrowsingContextId
)
NewBrowser
(
ServoUrl
IpcSender
<
TopLevelBrowsingContextId
>
)
SelectBrowser
(
TopLevelBrowsingContextId
)
}
impl
Debug
for
WindowEvent
{
fn
fmt
(
&
self
f
:
&
mut
Formatter
)
-
>
Result
<
(
)
Error
>
{
match
*
self
{
WindowEvent
:
:
Idle
=
>
write
!
(
f
"
Idle
"
)
WindowEvent
:
:
Refresh
=
>
write
!
(
f
"
Refresh
"
)
WindowEvent
:
:
Resize
(
.
.
)
=
>
write
!
(
f
"
Resize
"
)
WindowEvent
:
:
TouchpadPressure
(
.
.
)
=
>
write
!
(
f
"
TouchpadPressure
"
)
WindowEvent
:
:
KeyEvent
(
.
.
)
=
>
write
!
(
f
"
Key
"
)
WindowEvent
:
:
LoadUrl
(
.
.
)
=
>
write
!
(
f
"
LoadUrl
"
)
WindowEvent
:
:
MouseWindowEventClass
(
.
.
)
=
>
write
!
(
f
"
Mouse
"
)
WindowEvent
:
:
MouseWindowMoveEventClass
(
.
.
)
=
>
write
!
(
f
"
MouseMove
"
)
WindowEvent
:
:
Touch
(
.
.
)
=
>
write
!
(
f
"
Touch
"
)
WindowEvent
:
:
Scroll
(
.
.
)
=
>
write
!
(
f
"
Scroll
"
)
WindowEvent
:
:
Zoom
(
.
.
)
=
>
write
!
(
f
"
Zoom
"
)
WindowEvent
:
:
PinchZoom
(
.
.
)
=
>
write
!
(
f
"
PinchZoom
"
)
WindowEvent
:
:
ResetZoom
=
>
write
!
(
f
"
ResetZoom
"
)
WindowEvent
:
:
Navigation
(
.
.
)
=
>
write
!
(
f
"
Navigation
"
)
WindowEvent
:
:
Quit
=
>
write
!
(
f
"
Quit
"
)
WindowEvent
:
:
ToggleWebRenderProfiler
=
>
write
!
(
f
"
ToggleWebRenderProfiler
"
)
WindowEvent
:
:
Reload
(
.
.
)
=
>
write
!
(
f
"
Reload
"
)
WindowEvent
:
:
NewBrowser
(
.
.
)
=
>
write
!
(
f
"
NewBrowser
"
)
WindowEvent
:
:
SelectBrowser
(
.
.
)
=
>
write
!
(
f
"
SelectBrowser
"
)
}
}
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
pub
enum
AnimationState
{
Idle
Animating
}
pub
trait
WindowMethods
{
fn
framebuffer_size
(
&
self
)
-
>
DeviceUintSize
;
fn
window_rect
(
&
self
)
-
>
DeviceUintRect
;
fn
size
(
&
self
)
-
>
TypedSize2D
<
f32
DeviceIndependentPixel
>
;
fn
present
(
&
self
)
;
fn
client_window
(
&
self
ctx
:
TopLevelBrowsingContextId
)
-
>
(
Size2D
<
u32
>
Point2D
<
i32
>
)
;
fn
set_inner_size
(
&
self
ctx
:
TopLevelBrowsingContextId
size
:
Size2D
<
u32
>
)
;
fn
set_position
(
&
self
ctx
:
TopLevelBrowsingContextId
point
:
Point2D
<
i32
>
)
;
fn
set_fullscreen_state
(
&
self
ctx
:
TopLevelBrowsingContextId
state
:
bool
)
;
fn
set_page_title
(
&
self
ctx
:
TopLevelBrowsingContextId
title
:
Option
<
String
>
)
;
fn
status
(
&
self
ctx
:
TopLevelBrowsingContextId
Option
<
String
>
)
;
fn
load_start
(
&
self
ctx
:
TopLevelBrowsingContextId
)
;
fn
load_end
(
&
self
ctx
:
TopLevelBrowsingContextId
)
;
fn
load_error
(
&
self
ctx
:
TopLevelBrowsingContextId
code
:
NetError
url
:
String
)
;
fn
allow_navigation
(
&
self
ctx
:
TopLevelBrowsingContextId
url
:
ServoUrl
IpcSender
<
bool
>
)
;
fn
head_parsed
(
&
self
ctx
:
TopLevelBrowsingContextId
)
;
fn
history_changed
(
&
self
ctx
:
TopLevelBrowsingContextId
Vec
<
LoadData
>
usize
)
;
fn
hidpi_factor
(
&
self
)
-
>
ScaleFactor
<
f32
DeviceIndependentPixel
DevicePixel
>
;
fn
create_event_loop_waker
(
&
self
)
-
>
Box
<
EventLoopWaker
>
;
fn
prepare_for_composite
(
&
self
width
:
usize
height
:
usize
)
-
>
bool
;
fn
set_cursor
(
&
self
cursor
:
Cursor
)
;
fn
handle_key
(
&
self
ctx
:
Option
<
TopLevelBrowsingContextId
>
ch
:
Option
<
char
>
key
:
Key
mods
:
KeyModifiers
)
;
fn
supports_clipboard
(
&
self
)
-
>
bool
;
fn
set_favicon
(
&
self
ctx
:
TopLevelBrowsingContextId
url
:
ServoUrl
)
;
fn
gl
(
&
self
)
-
>
Rc
<
gl
:
:
Gl
>
;
fn
set_animation_state
(
&
self
_state
:
AnimationState
)
{
}
}
