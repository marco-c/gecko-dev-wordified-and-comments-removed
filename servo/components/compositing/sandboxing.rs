use
gaol
:
:
profile
:
:
{
Operation
PathPattern
Profile
}
;
use
std
:
:
path
:
:
PathBuf
;
use
util
:
:
resource_files
;
#
[
cfg
(
target_os
=
"
macos
"
)
]
pub
fn
content_process_sandbox_profile
(
)
-
>
Profile
{
use
gaol
:
:
platform
;
Profile
:
:
new
(
vec
!
[
Operation
:
:
FileReadAll
(
PathPattern
:
:
Literal
(
PathBuf
:
:
from
(
"
/
dev
/
urandom
"
)
)
)
Operation
:
:
FileReadAll
(
PathPattern
:
:
Subpath
(
resource_files
:
:
resources_dir_path
(
)
)
)
Operation
:
:
FileReadAll
(
PathPattern
:
:
Subpath
(
PathBuf
:
:
from
(
"
/
Library
/
Fonts
"
)
)
)
Operation
:
:
FileReadAll
(
PathPattern
:
:
Subpath
(
PathBuf
:
:
from
(
"
/
System
/
Library
/
Fonts
"
)
)
)
Operation
:
:
FileReadAll
(
PathPattern
:
:
Subpath
(
PathBuf
:
:
from
(
"
/
System
/
Library
/
Frameworks
/
ApplicationServices
.
framework
"
)
)
)
Operation
:
:
FileReadAll
(
PathPattern
:
:
Subpath
(
PathBuf
:
:
from
(
"
/
System
/
Library
/
Frameworks
/
CoreGraphics
.
framework
"
)
)
)
Operation
:
:
FileReadMetadata
(
PathPattern
:
:
Literal
(
PathBuf
:
:
from
(
"
/
"
)
)
)
Operation
:
:
FileReadMetadata
(
PathPattern
:
:
Literal
(
PathBuf
:
:
from
(
"
/
Library
"
)
)
)
Operation
:
:
FileReadMetadata
(
PathPattern
:
:
Literal
(
PathBuf
:
:
from
(
"
/
System
"
)
)
)
Operation
:
:
FileReadMetadata
(
PathPattern
:
:
Literal
(
PathBuf
:
:
from
(
"
/
etc
"
)
)
)
Operation
:
:
SystemInfoRead
Operation
:
:
PlatformSpecific
(
platform
:
:
macos
:
:
Operation
:
:
MachLookup
(
b
"
com
.
apple
.
FontServer
"
.
to_vec
(
)
)
)
]
)
.
expect
(
"
Failed
to
create
sandbox
profile
!
"
)
}
#
[
cfg
(
not
(
target_os
=
"
macos
"
)
)
]
pub
fn
content_process_sandbox_profile
(
)
-
>
Profile
{
Profile
:
:
new
(
vec
!
[
Operation
:
:
FileReadAll
(
PathPattern
:
:
Literal
(
PathBuf
:
:
from
(
"
/
dev
/
urandom
"
)
)
)
Operation
:
:
FileReadAll
(
PathPattern
:
:
Subpath
(
resource_files
:
:
resources_dir_path
(
)
)
)
]
)
.
expect
(
"
Failed
to
create
sandbox
profile
!
"
)
}
