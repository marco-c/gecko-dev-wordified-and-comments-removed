use
std
:
:
default
:
:
Default
;
use
std
:
:
hash
:
:
Hasher
;
use
std
:
:
num
:
:
wrapping
:
:
WrappingOps
;
#
[
allow
(
missing_copy_implementations
)
]
pub
struct
FnvHasher
(
u64
)
;
impl
Default
for
FnvHasher
{
fn
default
(
)
-
>
FnvHasher
{
FnvHasher
(
0xcbf29ce484222325
)
}
}
impl
Hasher
for
FnvHasher
{
fn
finish
(
&
self
)
-
>
u64
{
self
.
0
}
fn
write
(
&
mut
self
bytes
:
&
[
u8
]
)
{
let
FnvHasher
(
mut
hash
)
=
*
self
;
for
byte
in
bytes
.
iter
(
)
{
hash
=
hash
^
(
*
byte
as
u64
)
;
hash
=
hash
.
wrapping_mul
(
0x100000001b3
)
;
}
*
self
=
FnvHasher
(
hash
)
;
}
}
