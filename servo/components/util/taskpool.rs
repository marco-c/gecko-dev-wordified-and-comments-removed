use
task
:
:
spawn_named
;
use
std
:
:
sync
:
:
{
Arc
Mutex
}
;
use
std
:
:
sync
:
:
mpsc
:
:
{
channel
Sender
Receiver
}
;
use
std
:
:
thunk
:
:
Thunk
;
pub
struct
TaskPool
{
tx
:
Sender
<
Thunk
<
(
)
>
>
}
impl
TaskPool
{
pub
fn
new
(
tasks
:
uint
)
-
>
TaskPool
{
assert
!
(
tasks
>
0
)
;
let
(
tx
rx
)
=
channel
(
)
;
let
state
=
Arc
:
:
new
(
Mutex
:
:
new
(
rx
)
)
;
for
i
in
range
(
0
tasks
)
{
let
state
=
state
.
clone
(
)
;
spawn_named
(
format
!
(
"
TaskPoolWorker
{
}
/
{
}
"
i
+
1
tasks
)
move
|
|
worker
(
&
*
state
)
)
;
}
return
TaskPool
{
tx
:
tx
}
;
fn
worker
(
rx
:
&
Mutex
<
Receiver
<
Thunk
<
(
)
>
>
>
)
{
loop
{
let
job
=
rx
.
lock
(
)
.
unwrap
(
)
.
recv
(
)
;
match
job
{
Ok
(
job
)
=
>
job
.
invoke
(
(
)
)
Err
(
.
.
)
=
>
break
}
}
}
}
pub
fn
execute
<
F
>
(
&
self
job
:
F
)
where
F
:
FnOnce
(
)
+
Send
{
self
.
tx
.
send
(
Thunk
:
:
new
(
job
)
)
.
unwrap
(
)
;
}
}
