use
std
:
:
sync
:
:
atomic
:
:
{
AtomicUint
INIT_ATOMIC_UINT
SeqCst
}
;
use
std
:
:
rc
:
:
Rc
;
use
std
:
:
cell
:
:
RefCell
;
static
mut
next_tid
:
AtomicUint
=
INIT_ATOMIC_UINT
;
thread_local
!
(
static
task_local_tid
:
Rc
<
RefCell
<
Option
<
uint
>
>
>
=
Rc
:
:
new
(
RefCell
:
:
new
(
None
)
)
)
pub
fn
tid
(
)
-
>
uint
{
task_local_tid
.
with
(
|
ref
k
|
{
let
ret
=
match
*
k
.
borrow
(
)
{
None
=
>
unsafe
{
next_tid
.
fetch_add
(
1
SeqCst
)
}
Some
(
x
)
=
>
x
}
;
*
k
.
borrow_mut
(
)
=
Some
(
ret
)
;
ret
}
)
}
