use
ipc_channel
:
:
ipc
:
:
IpcSender
;
use
serde
:
:
Serialize
;
use
std
:
:
borrow
:
:
ToOwned
;
use
std
:
:
sync
:
:
mpsc
:
:
Sender
;
use
std
:
:
thread
;
use
std
:
:
thread
:
:
Builder
;
use
thread_state
;
pub
fn
spawn_named
<
F
>
(
name
:
String
f
:
F
)
where
F
:
FnOnce
(
)
+
Send
+
'
static
{
let
builder
=
thread
:
:
Builder
:
:
new
(
)
.
name
(
name
)
;
builder
.
spawn
(
f
)
.
unwrap
(
)
;
}
pub
trait
SendOnFailure
{
type
Value
;
fn
send_on_failure
(
&
mut
self
value
:
Self
:
:
Value
)
;
}
impl
<
T
>
SendOnFailure
for
Sender
<
T
>
where
T
:
Send
+
'
static
{
type
Value
=
T
;
fn
send_on_failure
(
&
mut
self
value
:
T
)
{
self
.
send
(
value
)
.
unwrap
(
)
;
}
}
impl
<
T
>
SendOnFailure
for
IpcSender
<
T
>
where
T
:
Send
+
Serialize
+
'
static
{
type
Value
=
T
;
fn
send_on_failure
(
&
mut
self
value
:
T
)
{
self
.
send
(
value
)
.
unwrap
(
)
;
}
}
pub
fn
spawn_named_with_send_on_failure
<
F
T
S
>
(
name
:
String
state
:
thread_state
:
:
ThreadState
f
:
F
msg
:
T
mut
dest
:
S
)
where
F
:
FnOnce
(
)
+
Send
+
'
static
T
:
Send
+
'
static
S
:
Send
+
SendOnFailure
<
Value
=
T
>
+
'
static
{
let
future_handle
=
thread
:
:
Builder
:
:
new
(
)
.
name
(
name
.
to_owned
(
)
)
.
spawn
(
move
|
|
{
thread_state
:
:
initialize
(
state
)
;
f
(
)
}
)
.
unwrap
(
)
;
let
watcher_name
=
format
!
(
"
{
}
Watcher
"
name
)
;
Builder
:
:
new
(
)
.
name
(
watcher_name
)
.
spawn
(
move
|
|
{
match
future_handle
.
join
(
)
{
Ok
(
(
)
)
=
>
(
)
Err
(
.
.
)
=
>
{
debug
!
(
"
{
}
failed
notifying
constellation
"
name
)
;
dest
.
send_on_failure
(
msg
)
;
}
}
}
)
.
unwrap
(
)
;
}
