use
AnimationState
;
use
CompositorEvent
;
use
DocumentState
;
use
IFrameLoadInfo
;
use
IFrameLoadInfoWithData
;
use
LayoutControlMsg
;
use
LoadData
;
use
MozBrowserEvent
;
use
WorkerGlobalScopeInit
;
use
WorkerScriptLoadOrigin
;
use
canvas_traits
:
:
CanvasMsg
;
use
devtools_traits
:
:
{
ScriptToDevtoolsControlMsg
WorkerId
}
;
use
euclid
:
:
point
:
:
Point2D
;
use
euclid
:
:
size
:
:
{
Size2D
TypedSize2D
}
;
use
ipc_channel
:
:
ipc
:
:
IpcSender
;
use
msg
:
:
constellation_msg
:
:
{
BrowsingContextId
FrameType
PipelineId
TraversalDirection
}
;
use
msg
:
:
constellation_msg
:
:
{
Key
KeyModifiers
KeyState
}
;
use
net_traits
:
:
CoreResourceMsg
;
use
net_traits
:
:
storage_thread
:
:
StorageType
;
use
offscreen_gl_context
:
:
{
GLContextAttributes
GLLimits
}
;
use
servo_url
:
:
ImmutableOrigin
;
use
servo_url
:
:
ServoUrl
;
use
style_traits
:
:
CSSPixel
;
use
style_traits
:
:
cursor
:
:
Cursor
;
use
style_traits
:
:
viewport
:
:
ViewportConstraints
;
use
webrender_traits
:
:
ClipId
;
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
LayoutMsg
{
ChangeRunningAnimationsState
(
PipelineId
AnimationState
)
IFrameSizes
(
Vec
<
(
BrowsingContextId
TypedSize2D
<
f32
CSSPixel
>
)
>
)
SetCursor
(
Cursor
)
ViewportConstrained
(
PipelineId
ViewportConstraints
)
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
EventResult
{
DefaultAllowed
DefaultPrevented
}
#
[
derive
(
Clone
Debug
Deserialize
Serialize
)
]
pub
enum
LogEntry
{
Panic
(
String
String
)
Error
(
String
)
Warn
(
String
)
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
ScriptMsg
{
BroadcastStorageEvent
(
PipelineId
StorageType
ServoUrl
Option
<
String
>
Option
<
String
>
Option
<
String
>
)
ChangeRunningAnimationsState
(
PipelineId
AnimationState
)
CreateCanvasPaintThread
(
Size2D
<
i32
>
IpcSender
<
IpcSender
<
CanvasMsg
>
>
)
CreateWebGLPaintThread
(
Size2D
<
i32
>
GLContextAttributes
IpcSender
<
Result
<
(
IpcSender
<
CanvasMsg
>
GLLimits
)
String
>
>
)
Focus
(
PipelineId
)
ForwardEvent
(
PipelineId
CompositorEvent
)
GetClipboardContents
(
IpcSender
<
String
>
)
GetBrowsingContextId
(
PipelineId
IpcSender
<
Option
<
BrowsingContextId
>
>
)
GetParentInfo
(
PipelineId
IpcSender
<
Option
<
(
PipelineId
FrameType
)
>
>
)
HeadParsed
LoadComplete
(
PipelineId
)
LoadUrl
(
PipelineId
LoadData
bool
)
PostMessage
(
BrowsingContextId
Option
<
ImmutableOrigin
>
Vec
<
u8
>
)
MozBrowserEvent
(
PipelineId
PipelineId
MozBrowserEvent
)
TraverseHistory
(
Option
<
PipelineId
>
TraversalDirection
)
JointSessionHistoryLength
(
PipelineId
IpcSender
<
u32
>
)
NewFavicon
(
ServoUrl
)
NodeStatus
(
Option
<
String
>
)
RemoveIFrame
(
BrowsingContextId
IpcSender
<
Vec
<
PipelineId
>
>
)
SetVisible
(
PipelineId
bool
)
VisibilityChangeComplete
(
PipelineId
bool
)
ScriptLoadedURLInIFrame
(
IFrameLoadInfoWithData
)
ScriptNewIFrame
(
IFrameLoadInfo
IpcSender
<
LayoutControlMsg
>
)
SetClipboardContents
(
String
)
ActivateDocument
(
PipelineId
)
SetDocumentState
(
PipelineId
DocumentState
)
SetFinalUrl
(
PipelineId
ServoUrl
)
Alert
(
PipelineId
String
IpcSender
<
bool
>
)
ScrollFragmentPoint
(
ClipId
Point2D
<
f32
>
bool
)
SetTitle
(
PipelineId
Option
<
String
>
)
SendKeyEvent
(
Option
<
char
>
Key
KeyState
KeyModifiers
)
GetClientWindow
(
IpcSender
<
(
Size2D
<
u32
>
Point2D
<
i32
>
)
>
)
MoveTo
(
Point2D
<
i32
>
)
ResizeTo
(
Size2D
<
u32
>
)
TouchEventProcessed
(
EventResult
)
LogEntry
(
Option
<
BrowsingContextId
>
Option
<
String
>
LogEntry
)
PipelineExited
(
PipelineId
)
ForwardDOMMessage
(
DOMMessage
ServoUrl
)
RegisterServiceWorker
(
ScopeThings
ServoUrl
)
SetFullscreenState
(
bool
)
Exit
}
#
[
derive
(
Deserialize
Serialize
Clone
)
]
pub
struct
ScopeThings
{
pub
script_url
:
ServoUrl
pub
worker_load_origin
:
WorkerScriptLoadOrigin
pub
init
:
WorkerGlobalScopeInit
pub
devtools_chan
:
Option
<
IpcSender
<
ScriptToDevtoolsControlMsg
>
>
pub
worker_id
:
WorkerId
}
#
[
derive
(
Deserialize
Serialize
Debug
Clone
)
]
pub
struct
DOMMessage
(
pub
Vec
<
u8
>
)
;
pub
struct
SWManagerSenders
{
pub
swmanager_sender
:
IpcSender
<
SWManagerMsg
>
pub
resource_sender
:
IpcSender
<
CoreResourceMsg
>
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
ServiceWorkerMsg
{
RegisterServiceWorker
(
ScopeThings
ServoUrl
)
Timeout
(
ServoUrl
)
ForwardDOMMessage
(
DOMMessage
ServoUrl
)
Exit
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
SWManagerMsg
{
OwnSender
(
IpcSender
<
ServiceWorkerMsg
>
)
}
