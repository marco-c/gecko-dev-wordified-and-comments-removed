#
!
[
feature
(
custom_derive
plugin
)
]
#
!
[
plugin
(
plugins
serde_macros
)
]
#
!
[
deny
(
missing_docs
)
]
extern
crate
devtools_traits
;
extern
crate
euclid
;
extern
crate
ipc_channel
;
extern
crate
libc
;
extern
crate
msg
;
extern
crate
net_traits
;
extern
crate
profile_traits
;
extern
crate
serde
;
extern
crate
url
;
extern
crate
util
;
use
devtools_traits
:
:
ScriptToDevtoolsControlMsg
;
use
euclid
:
:
point
:
:
Point2D
;
use
euclid
:
:
rect
:
:
Rect
;
use
ipc_channel
:
:
ipc
:
:
{
IpcReceiver
IpcSender
}
;
use
libc
:
:
c_void
;
use
msg
:
:
compositor_msg
:
:
{
Epoch
LayerId
ScriptToCompositorMsg
}
;
use
msg
:
:
constellation_msg
:
:
{
ConstellationChan
Failure
PipelineId
WindowSizeData
}
;
use
msg
:
:
constellation_msg
:
:
{
Key
KeyModifiers
KeyState
LoadData
SubpageId
}
;
use
msg
:
:
constellation_msg
:
:
{
MozBrowserEvent
PipelineExitType
}
;
use
msg
:
:
webdriver_msg
:
:
WebDriverScriptCommand
;
use
net_traits
:
:
ResourceTask
;
use
net_traits
:
:
image_cache_task
:
:
ImageCacheTask
;
use
net_traits
:
:
storage_task
:
:
StorageTask
;
use
profile_traits
:
:
{
mem
time
}
;
use
std
:
:
any
:
:
Any
;
use
std
:
:
sync
:
:
mpsc
:
:
{
Receiver
Sender
}
;
use
url
:
:
Url
;
use
util
:
:
geometry
:
:
Au
;
#
[
allow
(
raw_pointer_derive
)
]
#
[
derive
(
Copy
Clone
Debug
)
]
pub
struct
UntrustedNodeAddress
(
pub
*
const
c_void
)
;
unsafe
impl
Send
for
UntrustedNodeAddress
{
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
LayoutControlMsg
{
ExitNow
(
PipelineExitType
)
GetCurrentEpoch
(
IpcSender
<
Epoch
>
)
TickAnimations
SetVisibleRects
(
Vec
<
(
LayerId
Rect
<
Au
>
)
>
)
GetWebFontLoadState
(
IpcSender
<
bool
>
)
}
pub
struct
NewLayoutInfo
{
pub
containing_pipeline_id
:
PipelineId
pub
new_pipeline_id
:
PipelineId
pub
subpage_id
:
SubpageId
pub
load_data
:
LoadData
pub
paint_chan
:
Box
<
Any
+
Send
>
pub
failure
:
Failure
pub
pipeline_port
:
IpcReceiver
<
LayoutControlMsg
>
pub
layout_shutdown_chan
:
Sender
<
(
)
>
}
pub
trait
StylesheetLoadResponder
{
fn
respond
(
self
:
Box
<
Self
>
)
;
}
#
[
derive
(
Copy
Clone
Debug
PartialEq
)
]
pub
enum
ScriptState
{
DocumentLoaded
DocumentLoading
}
pub
enum
ConstellationControlMsg
{
AttachLayout
(
NewLayoutInfo
)
Resize
(
PipelineId
WindowSizeData
)
ResizeInactive
(
PipelineId
WindowSizeData
)
ExitPipeline
(
PipelineId
PipelineExitType
)
SendEvent
(
PipelineId
CompositorEvent
)
ReflowComplete
(
PipelineId
u32
)
Viewport
(
PipelineId
Rect
<
f32
>
)
GetTitle
(
PipelineId
)
Freeze
(
PipelineId
)
Thaw
(
PipelineId
)
Navigate
(
PipelineId
SubpageId
LoadData
)
MozBrowserEvent
(
PipelineId
SubpageId
MozBrowserEvent
)
UpdateSubpageId
(
PipelineId
SubpageId
SubpageId
)
FocusIFrame
(
PipelineId
SubpageId
)
WebDriverScriptCommand
(
PipelineId
WebDriverScriptCommand
)
TickAllAnimations
(
PipelineId
)
WebFontLoaded
(
PipelineId
)
StylesheetLoadComplete
(
PipelineId
Url
Box
<
StylesheetLoadResponder
+
Send
>
)
GetCurrentState
(
Sender
<
ScriptState
>
PipelineId
)
}
#
[
derive
(
Clone
Debug
)
]
pub
enum
MouseButton
{
Left
Middle
Right
}
pub
enum
CompositorEvent
{
ResizeEvent
(
WindowSizeData
)
ClickEvent
(
MouseButton
Point2D
<
f32
>
)
MouseDownEvent
(
MouseButton
Point2D
<
f32
>
)
MouseUpEvent
(
MouseButton
Point2D
<
f32
>
)
MouseMoveEvent
(
Point2D
<
f32
>
)
KeyEvent
(
Key
KeyState
KeyModifiers
)
}
pub
struct
OpaqueScriptLayoutChannel
(
pub
(
Box
<
Any
+
Send
>
Box
<
Any
+
Send
>
)
)
;
pub
struct
InitialScriptState
{
pub
id
:
PipelineId
pub
parent_info
:
Option
<
(
PipelineId
SubpageId
)
>
pub
compositor
:
IpcSender
<
ScriptToCompositorMsg
>
pub
control_chan
:
Sender
<
ConstellationControlMsg
>
pub
control_port
:
Receiver
<
ConstellationControlMsg
>
pub
constellation_chan
:
ConstellationChan
pub
failure_info
:
Failure
pub
resource_task
:
ResourceTask
pub
storage_task
:
StorageTask
pub
image_cache_task
:
ImageCacheTask
pub
time_profiler_chan
:
time
:
:
ProfilerChan
pub
mem_profiler_chan
:
mem
:
:
ProfilerChan
pub
devtools_chan
:
Option
<
IpcSender
<
ScriptToDevtoolsControlMsg
>
>
pub
window_size
:
Option
<
WindowSizeData
>
}
pub
trait
ScriptTaskFactory
{
fn
create
(
_phantom
:
Option
<
&
mut
Self
>
state
:
InitialScriptState
layout_chan
:
&
OpaqueScriptLayoutChannel
load_data
:
LoadData
)
;
fn
create_layout_channel
(
_phantom
:
Option
<
&
mut
Self
>
)
-
>
OpaqueScriptLayoutChannel
;
fn
clone_layout_channel
(
_phantom
:
Option
<
&
mut
Self
>
pair
:
&
OpaqueScriptLayoutChannel
)
-
>
Box
<
Any
+
Send
>
;
}
