#
!
[
deny
(
unused_imports
)
]
#
!
[
deny
(
unused_variables
)
]
#
!
[
allow
(
missing_copy_implementations
)
]
extern
crate
devtools_traits
;
extern
crate
geom
;
extern
crate
libc
;
extern
crate
"
msg
"
as
servo_msg
;
extern
crate
"
net
"
as
servo_net
;
extern
crate
"
util
"
as
servo_util
;
extern
crate
url
;
extern
crate
serialize
;
use
devtools_traits
:
:
DevtoolsControlChan
;
use
libc
:
:
c_void
;
use
servo_msg
:
:
constellation_msg
:
:
{
ConstellationChan
PipelineId
Failure
WindowSizeData
}
;
use
servo_msg
:
:
constellation_msg
:
:
{
LoadData
SubpageId
Key
KeyState
KeyModifiers
}
;
use
servo_msg
:
:
constellation_msg
:
:
PipelineExitType
;
use
servo_msg
:
:
compositor_msg
:
:
ScriptListener
;
use
servo_net
:
:
image_cache_task
:
:
ImageCacheTask
;
use
servo_net
:
:
resource_task
:
:
ResourceTask
;
use
servo_net
:
:
storage_task
:
:
StorageTask
;
use
servo_util
:
:
smallvec
:
:
SmallVec1
;
use
std
:
:
any
:
:
Any
;
use
geom
:
:
point
:
:
Point2D
;
use
geom
:
:
rect
:
:
Rect
;
use
serialize
:
:
{
Encodable
Encoder
}
;
pub
type
UntrustedNodeAddress
=
*
const
c_void
;
pub
struct
NewLayoutInfo
{
pub
old_pipeline_id
:
PipelineId
pub
new_pipeline_id
:
PipelineId
pub
subpage_id
:
SubpageId
pub
layout_chan
:
Box
<
Any
+
Send
>
}
pub
enum
ConstellationControlMsg
{
Load
(
PipelineId
LoadData
)
AttachLayout
(
NewLayoutInfo
)
Resize
(
PipelineId
WindowSizeData
)
ResizeInactive
(
PipelineId
WindowSizeData
)
ExitPipeline
(
PipelineId
PipelineExitType
)
SendEvent
(
PipelineId
CompositorEvent
)
ReflowComplete
(
PipelineId
uint
)
Viewport
(
PipelineId
Rect
<
f32
>
)
GetTitle
(
PipelineId
)
}
pub
enum
CompositorEvent
{
ResizeEvent
(
WindowSizeData
)
ReflowEvent
(
SmallVec1
<
UntrustedNodeAddress
>
)
ClickEvent
(
uint
Point2D
<
f32
>
)
MouseDownEvent
(
uint
Point2D
<
f32
>
)
MouseUpEvent
(
uint
Point2D
<
f32
>
)
MouseMoveEvent
(
Point2D
<
f32
>
)
KeyEvent
(
Key
KeyState
KeyModifiers
)
}
pub
struct
OpaqueScriptLayoutChannel
(
pub
(
Box
<
Any
+
Send
>
Box
<
Any
+
Send
>
)
)
;
#
[
deriving
(
Clone
)
]
pub
struct
ScriptControlChan
(
pub
Sender
<
ConstellationControlMsg
>
)
;
impl
<
S
:
Encoder
<
E
>
E
>
Encodable
<
S
E
>
for
ScriptControlChan
{
fn
encode
(
&
self
_s
:
&
mut
S
)
-
>
Result
<
(
)
E
>
{
Ok
(
(
)
)
}
}
pub
trait
ScriptTaskFactory
{
fn
create
<
C
>
(
_phantom
:
Option
<
&
mut
Self
>
id
:
PipelineId
compositor
:
C
layout_chan
:
&
OpaqueScriptLayoutChannel
control_chan
:
ScriptControlChan
control_port
:
Receiver
<
ConstellationControlMsg
>
constellation_msg
:
ConstellationChan
failure_msg
:
Failure
resource_task
:
ResourceTask
storage_task
:
StorageTask
image_cache_task
:
ImageCacheTask
devtools_chan
:
Option
<
DevtoolsControlChan
>
window_size
:
WindowSizeData
)
where
C
:
ScriptListener
+
Send
;
fn
create_layout_channel
(
_phantom
:
Option
<
&
mut
Self
>
)
-
>
OpaqueScriptLayoutChannel
;
fn
clone_layout_channel
(
_phantom
:
Option
<
&
mut
Self
>
pair
:
&
OpaqueScriptLayoutChannel
)
-
>
Box
<
Any
+
Send
>
;
}
