#
!
[
deny
(
missing_docs
)
]
#
!
[
deny
(
unsafe_code
)
]
extern
crate
app_units
;
extern
crate
bluetooth_traits
;
extern
crate
canvas_traits
;
extern
crate
cookie
as
cookie_rs
;
extern
crate
devtools_traits
;
extern
crate
euclid
;
extern
crate
gfx_traits
;
extern
crate
heapsize
;
#
[
macro_use
]
extern
crate
heapsize_derive
;
extern
crate
hyper
;
extern
crate
hyper_serde
;
extern
crate
ipc_channel
;
extern
crate
libc
;
extern
crate
msg
;
extern
crate
net_traits
;
extern
crate
offscreen_gl_context
;
extern
crate
profile_traits
;
extern
crate
rustc_serialize
;
#
[
macro_use
]
extern
crate
serde
;
extern
crate
servo_atoms
;
extern
crate
servo_url
;
extern
crate
style_traits
;
extern
crate
time
;
extern
crate
webrender_traits
;
extern
crate
webvr_traits
;
mod
script_msg
;
pub
mod
webdriver_msg
;
use
app_units
:
:
Au
;
use
bluetooth_traits
:
:
BluetoothRequest
;
use
canvas_traits
:
:
CanvasData
;
use
devtools_traits
:
:
{
DevtoolScriptControlMsg
ScriptToDevtoolsControlMsg
WorkerId
}
;
use
euclid
:
:
{
Size2D
Length
Point2D
Vector2D
Rect
ScaleFactor
TypedSize2D
}
;
use
gfx_traits
:
:
Epoch
;
use
heapsize
:
:
HeapSizeOf
;
use
hyper
:
:
header
:
:
Headers
;
use
hyper
:
:
method
:
:
Method
;
use
ipc_channel
:
:
ipc
:
:
{
IpcReceiver
IpcSender
}
;
use
libc
:
:
c_void
;
use
msg
:
:
constellation_msg
:
:
{
BrowsingContextId
TopLevelBrowsingContextId
FrameType
Key
KeyModifiers
KeyState
}
;
use
msg
:
:
constellation_msg
:
:
{
PipelineId
PipelineNamespaceId
TraversalDirection
}
;
use
net_traits
:
:
{
FetchResponseMsg
ReferrerPolicy
ResourceThreads
}
;
use
net_traits
:
:
image
:
:
base
:
:
Image
;
use
net_traits
:
:
image_cache
:
:
ImageCache
;
use
net_traits
:
:
response
:
:
HttpsState
;
use
net_traits
:
:
storage_thread
:
:
StorageType
;
use
profile_traits
:
:
mem
;
use
profile_traits
:
:
time
as
profile_time
;
use
serde
:
:
{
Deserialize
Deserializer
Serialize
Serializer
}
;
use
servo_atoms
:
:
Atom
;
use
servo_url
:
:
ImmutableOrigin
;
use
servo_url
:
:
ServoUrl
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
fmt
;
use
std
:
:
sync
:
:
Arc
;
use
std
:
:
sync
:
:
mpsc
:
:
{
Receiver
Sender
RecvTimeoutError
}
;
use
style_traits
:
:
CSSPixel
;
use
webdriver_msg
:
:
{
LoadStatus
WebDriverScriptCommand
}
;
use
webrender_traits
:
:
ClipId
;
use
webvr_traits
:
:
{
WebVREvent
WebVRMsg
}
;
pub
use
script_msg
:
:
{
LayoutMsg
ScriptMsg
EventResult
LogEntry
}
;
pub
use
script_msg
:
:
{
ServiceWorkerMsg
ScopeThings
SWManagerMsg
SWManagerSenders
DOMMessage
}
;
#
[
derive
(
Copy
Clone
Debug
PartialEq
Eq
Hash
)
]
pub
struct
UntrustedNodeAddress
(
pub
*
const
c_void
)
;
impl
HeapSizeOf
for
UntrustedNodeAddress
{
fn
heap_size_of_children
(
&
self
)
-
>
usize
{
0
}
}
#
[
allow
(
unsafe_code
)
]
unsafe
impl
Send
for
UntrustedNodeAddress
{
}
impl
Serialize
for
UntrustedNodeAddress
{
fn
serialize
<
S
:
Serializer
>
(
&
self
s
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
{
(
self
.
0
as
usize
)
.
serialize
(
s
)
}
}
impl
<
'
de
>
Deserialize
<
'
de
>
for
UntrustedNodeAddress
{
fn
deserialize
<
D
:
Deserializer
<
'
de
>
>
(
d
:
D
)
-
>
Result
<
UntrustedNodeAddress
D
:
:
Error
>
{
let
value
:
usize
=
Deserialize
:
:
deserialize
(
d
)
?
;
Ok
(
UntrustedNodeAddress
:
:
from_id
(
value
)
)
}
}
impl
UntrustedNodeAddress
{
#
[
inline
]
pub
fn
from_id
(
id
:
usize
)
-
>
UntrustedNodeAddress
{
UntrustedNodeAddress
(
id
as
*
const
c_void
)
}
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
LayoutControlMsg
{
ExitNow
GetCurrentEpoch
(
IpcSender
<
Epoch
>
)
TickAnimations
SetScrollStates
(
Vec
<
ScrollState
>
)
GetWebFontLoadState
(
IpcSender
<
bool
>
)
}
#
[
derive
(
Clone
Debug
Deserialize
Serialize
)
]
pub
struct
LoadData
{
pub
url
:
ServoUrl
pub
creator_pipeline_id
:
Option
<
PipelineId
>
#
[
serde
(
deserialize_with
=
"
:
:
hyper_serde
:
:
deserialize
"
serialize_with
=
"
:
:
hyper_serde
:
:
serialize
"
)
]
pub
method
:
Method
#
[
serde
(
deserialize_with
=
"
:
:
hyper_serde
:
:
deserialize
"
serialize_with
=
"
:
:
hyper_serde
:
:
serialize
"
)
]
pub
headers
:
Headers
pub
data
:
Option
<
Vec
<
u8
>
>
pub
referrer_policy
:
Option
<
ReferrerPolicy
>
pub
referrer_url
:
Option
<
ServoUrl
>
}
impl
LoadData
{
pub
fn
new
(
url
:
ServoUrl
creator_pipeline_id
:
Option
<
PipelineId
>
referrer_policy
:
Option
<
ReferrerPolicy
>
referrer_url
:
Option
<
ServoUrl
>
)
-
>
LoadData
{
LoadData
{
url
:
url
creator_pipeline_id
:
creator_pipeline_id
method
:
Method
:
:
Get
headers
:
Headers
:
:
new
(
)
data
:
None
referrer_policy
:
referrer_policy
referrer_url
:
referrer_url
}
}
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
NewLayoutInfo
{
pub
parent_info
:
Option
<
(
PipelineId
FrameType
)
>
pub
new_pipeline_id
:
PipelineId
pub
browsing_context_id
:
BrowsingContextId
pub
top_level_browsing_context_id
:
TopLevelBrowsingContextId
pub
load_data
:
LoadData
pub
window_size
:
Option
<
WindowSizeData
>
pub
pipeline_port
:
IpcReceiver
<
LayoutControlMsg
>
pub
content_process_shutdown_chan
:
Option
<
IpcSender
<
(
)
>
>
pub
layout_threads
:
usize
}
#
[
derive
(
Copy
Clone
PartialEq
Eq
Hash
Deserialize
Serialize
)
]
pub
enum
DiscardBrowsingContext
{
Yes
No
}
#
[
derive
(
Copy
Clone
PartialEq
Eq
Hash
HeapSizeOf
Debug
Deserialize
Serialize
)
]
pub
enum
DocumentActivity
{
Inactive
Active
FullyActive
}
#
[
derive
(
Copy
Clone
PartialEq
Eq
Hash
HeapSizeOf
Debug
Deserialize
Serialize
)
]
pub
enum
UpdatePipelineIdReason
{
Navigation
Traversal
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
ConstellationControlMsg
{
NavigationResponse
(
PipelineId
FetchResponseMsg
)
AttachLayout
(
NewLayoutInfo
)
Resize
(
PipelineId
WindowSizeData
WindowSizeType
)
ResizeInactive
(
PipelineId
WindowSizeData
)
ExitPipeline
(
PipelineId
DiscardBrowsingContext
)
ExitScriptThread
SendEvent
(
PipelineId
CompositorEvent
)
Viewport
(
PipelineId
Rect
<
f32
>
)
SetScrollState
(
PipelineId
Vec
<
(
UntrustedNodeAddress
Vector2D
<
f32
>
)
>
)
GetTitle
(
PipelineId
)
SetDocumentActivity
(
PipelineId
DocumentActivity
)
ChangeFrameVisibilityStatus
(
PipelineId
bool
)
NotifyVisibilityChange
(
PipelineId
BrowsingContextId
bool
)
Navigate
(
PipelineId
BrowsingContextId
LoadData
bool
)
PostMessage
(
PipelineId
Option
<
ImmutableOrigin
>
Vec
<
u8
>
)
MozBrowserEvent
(
PipelineId
Option
<
TopLevelBrowsingContextId
>
MozBrowserEvent
)
UpdatePipelineId
(
PipelineId
BrowsingContextId
PipelineId
UpdatePipelineIdReason
)
FocusIFrame
(
PipelineId
BrowsingContextId
)
WebDriverScriptCommand
(
PipelineId
WebDriverScriptCommand
)
TickAllAnimations
(
PipelineId
)
TransitionEnd
(
UntrustedNodeAddress
String
f64
)
WebFontLoaded
(
PipelineId
)
DispatchIFrameLoadEvent
{
target
:
BrowsingContextId
parent
:
PipelineId
child
:
PipelineId
}
DispatchStorageEvent
(
PipelineId
StorageType
ServoUrl
Option
<
String
>
Option
<
String
>
Option
<
String
>
)
ReportCSSError
(
PipelineId
String
u32
u32
String
)
Reload
(
PipelineId
)
WebVREvents
(
PipelineId
Vec
<
WebVREvent
>
)
}
impl
fmt
:
:
Debug
for
ConstellationControlMsg
{
fn
fmt
(
&
self
formatter
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
use
self
:
:
ConstellationControlMsg
:
:
*
;
let
variant
=
match
*
self
{
NavigationResponse
(
.
.
)
=
>
"
NavigationResponse
"
AttachLayout
(
.
.
)
=
>
"
AttachLayout
"
Resize
(
.
.
)
=
>
"
Resize
"
ResizeInactive
(
.
.
)
=
>
"
ResizeInactive
"
ExitPipeline
(
.
.
)
=
>
"
ExitPipeline
"
ExitScriptThread
=
>
"
ExitScriptThread
"
SendEvent
(
.
.
)
=
>
"
SendEvent
"
Viewport
(
.
.
)
=
>
"
Viewport
"
SetScrollState
(
.
.
)
=
>
"
SetScrollState
"
GetTitle
(
.
.
)
=
>
"
GetTitle
"
SetDocumentActivity
(
.
.
)
=
>
"
SetDocumentActivity
"
ChangeFrameVisibilityStatus
(
.
.
)
=
>
"
ChangeFrameVisibilityStatus
"
NotifyVisibilityChange
(
.
.
)
=
>
"
NotifyVisibilityChange
"
Navigate
(
.
.
)
=
>
"
Navigate
"
PostMessage
(
.
.
)
=
>
"
PostMessage
"
MozBrowserEvent
(
.
.
)
=
>
"
MozBrowserEvent
"
UpdatePipelineId
(
.
.
)
=
>
"
UpdatePipelineId
"
FocusIFrame
(
.
.
)
=
>
"
FocusIFrame
"
WebDriverScriptCommand
(
.
.
)
=
>
"
WebDriverScriptCommand
"
TickAllAnimations
(
.
.
)
=
>
"
TickAllAnimations
"
TransitionEnd
(
.
.
)
=
>
"
TransitionEnd
"
WebFontLoaded
(
.
.
)
=
>
"
WebFontLoaded
"
DispatchIFrameLoadEvent
{
.
.
}
=
>
"
DispatchIFrameLoadEvent
"
DispatchStorageEvent
(
.
.
)
=
>
"
DispatchStorageEvent
"
ReportCSSError
(
.
.
)
=
>
"
ReportCSSError
"
Reload
(
.
.
)
=
>
"
Reload
"
WebVREvents
(
.
.
)
=
>
"
WebVREvents
"
}
;
write
!
(
formatter
"
ConstellationMsg
:
:
{
}
"
variant
)
}
}
#
[
derive
(
Copy
Clone
Debug
PartialEq
Deserialize
Serialize
)
]
pub
enum
DocumentState
{
Idle
Pending
}
#
[
derive
(
Clone
Eq
PartialEq
Deserialize
Serialize
Debug
)
]
pub
enum
AnimationState
{
AnimationsPresent
AnimationCallbacksPresent
NoAnimationsPresent
NoAnimationCallbacksPresent
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
Serialize
)
]
pub
enum
TouchEventType
{
Down
Move
Up
Cancel
}
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
Deserialize
Serialize
)
]
pub
struct
TouchId
(
pub
i32
)
;
#
[
derive
(
Clone
Copy
Debug
Deserialize
Serialize
)
]
pub
enum
MouseButton
{
Left
Middle
Right
}
#
[
derive
(
Deserialize
HeapSizeOf
Serialize
)
]
pub
enum
MouseEventType
{
Click
MouseDown
MouseUp
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
CompositorEvent
{
ResizeEvent
(
WindowSizeData
WindowSizeType
)
MouseButtonEvent
(
MouseEventType
MouseButton
Point2D
<
f32
>
)
MouseMoveEvent
(
Option
<
Point2D
<
f32
>
>
)
TouchEvent
(
TouchEventType
TouchId
Point2D
<
f32
>
)
TouchpadPressureEvent
(
Point2D
<
f32
>
f32
TouchpadPressurePhase
)
KeyEvent
(
Option
<
char
>
Key
KeyState
KeyModifiers
)
}
#
[
derive
(
Copy
Clone
HeapSizeOf
PartialEq
Deserialize
Serialize
)
]
pub
enum
TouchpadPressurePhase
{
BeforeClick
AfterFirstClick
AfterSecondClick
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
TimerEventRequest
(
pub
IpcSender
<
TimerEvent
>
pub
TimerSource
pub
TimerEventId
pub
MsDuration
)
;
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
TimerSchedulerMsg
{
Request
(
TimerEventRequest
)
Exit
}
#
[
derive
(
Debug
Deserialize
Serialize
)
]
pub
struct
TimerEvent
(
pub
TimerSource
pub
TimerEventId
)
;
#
[
derive
(
Copy
Clone
Debug
HeapSizeOf
Deserialize
Serialize
)
]
pub
enum
TimerSource
{
FromWindow
(
PipelineId
)
FromWorker
}
#
[
derive
(
PartialEq
Eq
Copy
Clone
Debug
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
TimerEventId
(
pub
u32
)
;
#
[
derive
(
Clone
Copy
HeapSizeOf
)
]
pub
enum
Milliseconds
{
}
#
[
derive
(
Clone
Copy
HeapSizeOf
)
]
pub
enum
Nanoseconds
{
}
pub
type
MsDuration
=
Length
<
u64
Milliseconds
>
;
pub
type
NsDuration
=
Length
<
u64
Nanoseconds
>
;
pub
fn
precise_time_ms
(
)
-
>
MsDuration
{
Length
:
:
new
(
time
:
:
precise_time_ns
(
)
/
(
1000
*
1000
)
)
}
pub
fn
precise_time_ns
(
)
-
>
NsDuration
{
Length
:
:
new
(
time
:
:
precise_time_ns
(
)
)
}
pub
struct
InitialScriptState
{
pub
id
:
PipelineId
pub
parent_info
:
Option
<
(
PipelineId
FrameType
)
>
pub
browsing_context_id
:
BrowsingContextId
pub
top_level_browsing_context_id
:
TopLevelBrowsingContextId
pub
control_chan
:
IpcSender
<
ConstellationControlMsg
>
pub
control_port
:
IpcReceiver
<
ConstellationControlMsg
>
pub
constellation_chan
:
IpcSender
<
ScriptMsg
>
pub
layout_to_constellation_chan
:
IpcSender
<
LayoutMsg
>
pub
scheduler_chan
:
IpcSender
<
TimerSchedulerMsg
>
pub
resource_threads
:
ResourceThreads
pub
bluetooth_thread
:
IpcSender
<
BluetoothRequest
>
pub
image_cache
:
Arc
<
ImageCache
>
pub
time_profiler_chan
:
profile_traits
:
:
time
:
:
ProfilerChan
pub
mem_profiler_chan
:
mem
:
:
ProfilerChan
pub
devtools_chan
:
Option
<
IpcSender
<
ScriptToDevtoolsControlMsg
>
>
pub
window_size
:
Option
<
WindowSizeData
>
pub
pipeline_namespace_id
:
PipelineNamespaceId
pub
content_process_shutdown_chan
:
IpcSender
<
(
)
>
pub
webvr_thread
:
Option
<
IpcSender
<
WebVRMsg
>
>
}
pub
trait
ScriptThreadFactory
{
type
Message
;
fn
create
(
state
:
InitialScriptState
load_data
:
LoadData
)
-
>
(
Sender
<
Self
:
:
Message
>
Receiver
<
Self
:
:
Message
>
)
;
}
#
[
derive
(
PartialEq
Eq
Copy
Clone
Debug
Deserialize
Serialize
)
]
pub
enum
IFrameSandboxState
{
IFrameSandboxed
IFrameUnsandboxed
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
IFrameLoadInfo
{
pub
parent_pipeline_id
:
PipelineId
pub
browsing_context_id
:
BrowsingContextId
pub
top_level_browsing_context_id
:
TopLevelBrowsingContextId
pub
new_pipeline_id
:
PipelineId
pub
is_private
:
bool
pub
frame_type
:
FrameType
pub
replace
:
bool
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
IFrameLoadInfoWithData
{
pub
info
:
IFrameLoadInfo
pub
load_data
:
Option
<
LoadData
>
pub
old_pipeline_id
:
Option
<
PipelineId
>
pub
sandbox
:
IFrameSandboxState
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
MozBrowserEvent
{
AsyncScroll
Close
ContextMenu
Error
(
MozBrowserErrorType
String
String
)
IconChange
(
String
String
String
)
Connected
LoadEnd
LoadStart
LocationChange
(
String
bool
bool
)
OpenTab
(
String
)
OpenWindow
(
String
Option
<
String
>
Option
<
String
>
)
SecurityChange
(
HttpsState
)
ShowModalPrompt
(
String
String
String
String
)
TitleChange
(
String
)
UsernameAndPasswordRequired
OpenSearch
VisibilityChange
(
bool
)
}
impl
MozBrowserEvent
{
pub
fn
name
(
&
self
)
-
>
&
'
static
str
{
match
*
self
{
MozBrowserEvent
:
:
AsyncScroll
=
>
"
mozbrowserasyncscroll
"
MozBrowserEvent
:
:
Close
=
>
"
mozbrowserclose
"
MozBrowserEvent
:
:
Connected
=
>
"
mozbrowserconnected
"
MozBrowserEvent
:
:
ContextMenu
=
>
"
mozbrowsercontextmenu
"
MozBrowserEvent
:
:
Error
(
_
_
_
)
=
>
"
mozbrowsererror
"
MozBrowserEvent
:
:
IconChange
(
_
_
_
)
=
>
"
mozbrowsericonchange
"
MozBrowserEvent
:
:
LoadEnd
=
>
"
mozbrowserloadend
"
MozBrowserEvent
:
:
LoadStart
=
>
"
mozbrowserloadstart
"
MozBrowserEvent
:
:
LocationChange
(
_
_
_
)
=
>
"
mozbrowserlocationchange
"
MozBrowserEvent
:
:
OpenTab
(
_
)
=
>
"
mozbrowseropentab
"
MozBrowserEvent
:
:
OpenWindow
(
_
_
_
)
=
>
"
mozbrowseropenwindow
"
MozBrowserEvent
:
:
SecurityChange
(
_
)
=
>
"
mozbrowsersecuritychange
"
MozBrowserEvent
:
:
ShowModalPrompt
(
_
_
_
_
)
=
>
"
mozbrowsershowmodalprompt
"
MozBrowserEvent
:
:
TitleChange
(
_
)
=
>
"
mozbrowsertitlechange
"
MozBrowserEvent
:
:
UsernameAndPasswordRequired
=
>
"
mozbrowserusernameandpasswordrequired
"
MozBrowserEvent
:
:
OpenSearch
=
>
"
mozbrowseropensearch
"
MozBrowserEvent
:
:
VisibilityChange
(
_
)
=
>
"
mozbrowservisibilitychange
"
}
}
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
MozBrowserErrorType
{
Fatal
}
impl
MozBrowserErrorType
{
pub
fn
name
(
&
self
)
-
>
&
'
static
str
{
match
*
self
{
MozBrowserErrorType
:
:
Fatal
=
>
"
fatal
"
}
}
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
AnimationTickType
{
Script
Layout
}
#
[
derive
(
Copy
Clone
Debug
Deserialize
Serialize
)
]
pub
struct
ScrollState
{
pub
scroll_root_id
:
ClipId
pub
scroll_offset
:
Vector2D
<
f32
>
}
#
[
derive
(
Copy
Clone
Debug
)
]
pub
enum
DevicePixel
{
}
#
[
derive
(
Copy
Clone
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
WindowSizeData
{
pub
initial_viewport
:
TypedSize2D
<
f32
CSSPixel
>
pub
device_pixel_ratio
:
ScaleFactor
<
f32
CSSPixel
DevicePixel
>
}
#
[
derive
(
Deserialize
Eq
PartialEq
Serialize
Copy
Clone
HeapSizeOf
)
]
pub
enum
WindowSizeType
{
Initial
Resize
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
WebDriverCommandMsg
{
GetWindowSize
(
TopLevelBrowsingContextId
IpcSender
<
WindowSizeData
>
)
LoadUrl
(
TopLevelBrowsingContextId
LoadData
IpcSender
<
LoadStatus
>
)
Refresh
(
TopLevelBrowsingContextId
IpcSender
<
LoadStatus
>
)
ScriptCommand
(
BrowsingContextId
WebDriverScriptCommand
)
SendKeys
(
BrowsingContextId
Vec
<
(
Key
KeyModifiers
KeyState
)
>
)
SetWindowSize
(
TopLevelBrowsingContextId
Size2D
<
u32
>
IpcSender
<
WindowSizeData
>
)
TakeScreenshot
(
TopLevelBrowsingContextId
IpcSender
<
Option
<
Image
>
>
)
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
ConstellationMsg
{
Exit
GetBrowsingContext
(
PipelineId
IpcSender
<
Option
<
BrowsingContextId
>
>
)
GetPipeline
(
BrowsingContextId
IpcSender
<
Option
<
PipelineId
>
>
)
GetFocusTopLevelBrowsingContext
(
IpcSender
<
Option
<
TopLevelBrowsingContextId
>
>
)
GetPipelineTitle
(
PipelineId
)
InitLoadUrl
(
ServoUrl
)
IsReadyToSaveImage
(
HashMap
<
PipelineId
Epoch
>
)
KeyEvent
(
Option
<
char
>
Key
KeyState
KeyModifiers
)
LoadUrl
(
PipelineId
LoadData
)
TraverseHistory
(
TopLevelBrowsingContextId
TraversalDirection
)
WindowSize
(
TopLevelBrowsingContextId
WindowSizeData
WindowSizeType
)
TickAnimation
(
PipelineId
AnimationTickType
)
WebDriverCommand
(
WebDriverCommandMsg
)
Reload
(
TopLevelBrowsingContextId
)
LogEntry
(
Option
<
TopLevelBrowsingContextId
>
Option
<
String
>
LogEntry
)
SetWebVRThread
(
IpcSender
<
WebVRMsg
>
)
WebVREvents
(
Vec
<
PipelineId
>
Vec
<
WebVREvent
>
)
}
#
[
derive
(
Serialize
Deserialize
Clone
)
]
pub
struct
WorkerGlobalScopeInit
{
pub
resource_threads
:
ResourceThreads
pub
mem_profiler_chan
:
mem
:
:
ProfilerChan
pub
time_profiler_chan
:
profile_time
:
:
ProfilerChan
pub
to_devtools_sender
:
Option
<
IpcSender
<
ScriptToDevtoolsControlMsg
>
>
pub
from_devtools_sender
:
Option
<
IpcSender
<
DevtoolScriptControlMsg
>
>
pub
constellation_chan
:
IpcSender
<
ScriptMsg
>
pub
scheduler_chan
:
IpcSender
<
TimerSchedulerMsg
>
pub
worker_id
:
WorkerId
pub
pipeline_id
:
PipelineId
pub
origin
:
ImmutableOrigin
}
#
[
derive
(
Deserialize
Serialize
Clone
)
]
pub
struct
WorkerScriptLoadOrigin
{
pub
referrer_url
:
Option
<
ServoUrl
>
pub
referrer_policy
:
Option
<
ReferrerPolicy
>
pub
pipeline_id
:
Option
<
PipelineId
>
}
#
[
derive
(
Debug
Deserialize
Serialize
Clone
)
]
pub
enum
PaintWorkletError
{
Timeout
WorkletNotFound
}
impl
From
<
RecvTimeoutError
>
for
PaintWorkletError
{
fn
from
(
_
:
RecvTimeoutError
)
-
>
PaintWorkletError
{
PaintWorkletError
:
:
Timeout
}
}
pub
trait
Painter
:
Sync
+
Send
{
fn
draw_a_paint_image
(
&
self
concrete_object_size
:
Size2D
<
Au
>
properties
:
Vec
<
(
Atom
String
)
>
sender
:
IpcSender
<
CanvasData
>
)
;
}
