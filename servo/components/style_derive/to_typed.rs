use
proc_macro2
:
:
TokenStream
;
use
quote
:
:
quote
;
use
syn
:
:
{
Data
DataEnum
DeriveInput
Fields
}
;
pub
fn
derive
(
input
:
DeriveInput
)
-
>
TokenStream
{
let
(
impl_generics
ty_generics
where_clause
)
=
input
.
generics
.
split_for_impl
(
)
;
let
name
=
&
input
.
ident
;
let
mut
all_unit
=
false
;
if
let
Data
:
:
Enum
(
DataEnum
{
variants
.
.
}
)
=
&
input
.
data
{
all_unit
=
variants
.
iter
(
)
.
all
(
|
v
|
matches
!
(
v
.
fields
Fields
:
:
Unit
)
)
;
}
let
body
=
if
all_unit
{
quote
!
{
fn
to_typed
(
&
self
)
-
>
Option
<
style_traits
:
:
TypedValue
>
{
let
s
=
style_traits
:
:
ToCss
:
:
to_css_cssstring
(
self
)
;
Some
(
style_traits
:
:
TypedValue
:
:
Keyword
(
s
)
)
}
}
}
else
{
quote
!
{
}
}
;
quote
!
{
impl
#
impl_generics
style_traits
:
:
ToTyped
for
#
name
#
ty_generics
#
where_clause
{
#
body
}
}
}
