use
std
:
:
any
:
:
Any
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
cell
:
:
{
Cell
RefCell
}
;
use
std
:
:
intrinsics
:
:
TypeId
;
use
std
:
:
io
:
:
TcpStream
;
use
std
:
:
mem
:
:
{
replace
transmute
}
;
use
std
:
:
raw
:
:
TraitObject
;
use
serialize
:
:
json
;
pub
trait
Actor
:
Any
{
fn
handle_message
(
&
self
registry
:
&
ActorRegistry
msg_type
:
&
String
msg
:
&
json
:
:
Object
stream
:
&
mut
TcpStream
)
-
>
Result
<
bool
(
)
>
;
fn
name
(
&
self
)
-
>
String
;
}
impl
Actor
{
#
[
inline
]
pub
fn
is
<
T
:
'
static
>
(
&
self
)
-
>
bool
{
let
t
=
TypeId
:
:
of
:
:
<
T
>
(
)
;
let
boxed
=
self
.
get_type_id
(
)
;
t
=
=
boxed
}
#
[
inline
]
pub
fn
downcast_ref
<
T
:
'
static
>
(
&
self
)
-
>
Option
<
&
T
>
{
if
self
.
is
:
:
<
T
>
(
)
{
unsafe
{
let
to
:
TraitObject
=
transmute
(
self
)
;
Some
(
transmute
(
to
.
data
)
)
}
}
else
{
None
}
}
#
[
inline
]
pub
fn
downcast_mut
<
T
:
'
static
>
(
&
mut
self
)
-
>
Option
<
&
mut
T
>
{
if
self
.
is
:
:
<
T
>
(
)
{
unsafe
{
let
to
:
TraitObject
=
transmute
(
self
)
;
Some
(
transmute
(
to
.
data
)
)
}
}
else
{
None
}
}
}
pub
struct
ActorRegistry
{
actors
:
HashMap
<
String
Box
<
Actor
+
Send
>
>
new_actors
:
RefCell
<
Vec
<
Box
<
Actor
+
Send
>
>
>
script_actors
:
RefCell
<
HashMap
<
String
String
>
>
next
:
Cell
<
u32
>
}
impl
ActorRegistry
{
pub
fn
new
(
)
-
>
ActorRegistry
{
ActorRegistry
{
actors
:
HashMap
:
:
new
(
)
new_actors
:
RefCell
:
:
new
(
vec
!
(
)
)
script_actors
:
RefCell
:
:
new
(
HashMap
:
:
new
(
)
)
next
:
Cell
:
:
new
(
0
)
}
}
pub
fn
register_script_actor
(
&
self
script_id
:
String
actor
:
String
)
{
println
!
(
"
registering
{
}
(
{
}
)
"
actor
.
as_slice
(
)
script_id
.
as_slice
(
)
)
;
let
mut
script_actors
=
self
.
script_actors
.
borrow_mut
(
)
;
script_actors
.
insert
(
script_id
actor
)
;
}
pub
fn
script_to_actor
(
&
self
script_id
:
String
)
-
>
String
{
if
script_id
.
as_slice
(
)
=
=
"
"
{
return
"
"
.
to_string
(
)
;
}
self
.
script_actors
.
borrow
(
)
.
get
(
&
script_id
)
.
unwrap
(
)
.
to_string
(
)
}
pub
fn
script_actor_registered
(
&
self
script_id
:
String
)
-
>
bool
{
self
.
script_actors
.
borrow
(
)
.
contains_key
(
&
script_id
)
}
pub
fn
actor_to_script
(
&
self
actor
:
String
)
-
>
String
{
for
(
key
value
)
in
self
.
script_actors
.
borrow
(
)
.
iter
(
)
{
println
!
(
"
checking
{
}
"
value
.
as_slice
(
)
)
;
if
value
.
as_slice
(
)
=
=
actor
.
as_slice
(
)
{
return
key
.
to_string
(
)
;
}
}
panic
!
(
"
couldn
'
t
find
actor
named
{
}
"
actor
)
}
pub
fn
new_name
(
&
self
prefix
:
&
str
)
-
>
String
{
let
suffix
=
self
.
next
.
get
(
)
;
self
.
next
.
set
(
suffix
+
1
)
;
format
!
(
"
{
}
{
}
"
prefix
suffix
)
}
pub
fn
register
(
&
mut
self
actor
:
Box
<
Actor
+
Send
>
)
{
self
.
actors
.
insert
(
actor
.
name
(
)
.
to_string
(
)
actor
)
;
}
pub
fn
register_later
(
&
self
actor
:
Box
<
Actor
+
Send
>
)
{
let
mut
actors
=
self
.
new_actors
.
borrow_mut
(
)
;
actors
.
push
(
actor
)
;
}
pub
fn
find
<
'
a
T
:
'
static
>
(
&
'
a
self
name
:
&
str
)
-
>
&
'
a
T
{
let
actor
=
self
.
actors
.
get
(
&
name
.
to_string
(
)
)
.
unwrap
(
)
;
actor
.
downcast_ref
:
:
<
T
>
(
)
.
unwrap
(
)
}
pub
fn
find_mut
<
'
a
T
:
'
static
>
(
&
'
a
mut
self
name
:
&
str
)
-
>
&
'
a
mut
T
{
let
actor
=
self
.
actors
.
get_mut
(
&
name
.
to_string
(
)
)
.
unwrap
(
)
;
actor
.
downcast_mut
:
:
<
T
>
(
)
.
unwrap
(
)
}
pub
fn
handle_message
(
&
mut
self
msg
:
&
json
:
:
Object
stream
:
&
mut
TcpStream
)
-
>
Result
<
(
)
(
)
>
{
let
to
=
msg
.
get
(
"
to
"
)
.
unwrap
(
)
.
as_string
(
)
.
unwrap
(
)
;
match
self
.
actors
.
get
(
&
to
.
to_string
(
)
)
{
None
=
>
println
!
(
"
message
received
for
unknown
actor
\
"
{
}
\
"
"
to
)
Some
(
actor
)
=
>
{
let
msg_type
=
msg
.
get
(
"
type
"
)
.
unwrap
(
)
.
as_string
(
)
.
unwrap
(
)
;
if
!
try
!
(
actor
.
handle_message
(
self
&
msg_type
.
to_string
(
)
msg
stream
)
)
{
println
!
(
"
unexpected
message
type
\
"
{
}
\
"
found
for
actor
\
"
{
}
\
"
"
msg_type
to
)
;
}
}
}
let
new_actors
=
replace
(
&
mut
*
self
.
new_actors
.
borrow_mut
(
)
vec
!
(
)
)
;
for
actor
in
new_actors
.
into_iter
(
)
{
self
.
actors
.
insert
(
actor
.
name
(
)
.
to_string
(
)
actor
)
;
}
Ok
(
(
)
)
}
}
