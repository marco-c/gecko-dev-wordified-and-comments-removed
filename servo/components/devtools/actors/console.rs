use
actor
:
:
{
Actor
ActorRegistry
}
;
use
protocol
:
:
JsonPacketStream
;
use
devtools_traits
:
:
EvaluateJSReply
:
:
{
NullValue
VoidValue
NumberValue
}
;
use
devtools_traits
:
:
EvaluateJSReply
:
:
{
StringValue
BooleanValue
ActorValue
}
;
use
devtools_traits
:
:
DevtoolScriptControlMsg
;
use
msg
:
:
constellation_msg
:
:
PipelineId
;
use
collections
:
:
BTreeMap
;
use
core
:
:
cell
:
:
RefCell
;
use
rustc_serialize
:
:
json
:
:
{
self
Json
ToJson
}
;
use
std
:
:
net
:
:
TcpStream
;
use
std
:
:
sync
:
:
mpsc
:
:
{
channel
Sender
}
;
#
[
derive
(
RustcEncodable
)
]
struct
StartedListenersTraits
{
customNetworkRequest
:
bool
}
#
[
derive
(
RustcEncodable
)
]
struct
StartedListenersReply
{
from
:
String
nativeConsoleAPI
:
bool
startedListeners
:
Vec
<
String
>
traits
:
StartedListenersTraits
}
#
[
derive
(
RustcEncodable
)
]
#
[
allow
(
dead_code
)
]
struct
ConsoleAPIMessage
{
_type
:
String
}
#
[
derive
(
RustcEncodable
)
]
#
[
allow
(
dead_code
)
]
struct
PageErrorMessage
{
_type
:
String
errorMessage
:
String
sourceName
:
String
lineText
:
String
lineNumber
:
u32
columnNumber
:
u32
category
:
String
timeStamp
:
u64
warning
:
bool
error
:
bool
exception
:
bool
strict
:
bool
private
:
bool
}
#
[
derive
(
RustcEncodable
)
]
#
[
allow
(
dead_code
)
]
struct
LogMessage
{
_type
:
String
timeStamp
:
u64
message
:
String
}
#
[
derive
(
RustcEncodable
)
]
#
[
allow
(
dead_code
)
]
enum
ConsoleMessageType
{
ConsoleAPIType
(
ConsoleAPIMessage
)
PageErrorType
(
PageErrorMessage
)
LogMessageType
(
LogMessage
)
}
#
[
derive
(
RustcEncodable
)
]
struct
GetCachedMessagesReply
{
from
:
String
messages
:
Vec
<
json
:
:
Object
>
}
#
[
derive
(
RustcEncodable
)
]
struct
StopListenersReply
{
from
:
String
stoppedListeners
:
Vec
<
String
>
}
#
[
derive
(
RustcEncodable
)
]
struct
AutocompleteReply
{
from
:
String
matches
:
Vec
<
String
>
matchProp
:
String
}
#
[
derive
(
RustcEncodable
)
]
struct
EvaluateJSReply
{
from
:
String
input
:
String
result
:
Json
timestamp
:
u64
exception
:
Json
exceptionMessage
:
String
helperResult
:
Json
}
pub
struct
ConsoleActor
{
pub
name
:
String
pub
pipeline
:
PipelineId
pub
script_chan
:
Sender
<
DevtoolScriptControlMsg
>
pub
streams
:
RefCell
<
Vec
<
TcpStream
>
>
}
impl
Actor
for
ConsoleActor
{
fn
name
(
&
self
)
-
>
String
{
self
.
name
.
clone
(
)
}
fn
handle_message
(
&
self
_registry
:
&
ActorRegistry
msg_type
:
&
str
msg
:
&
json
:
:
Object
stream
:
&
mut
TcpStream
)
-
>
Result
<
bool
(
)
>
{
Ok
(
match
msg_type
{
"
getCachedMessages
"
=
>
{
let
types
=
msg
.
get
(
&
"
messageTypes
"
.
to_string
(
)
)
.
unwrap
(
)
.
as_array
(
)
.
unwrap
(
)
;
let
messages
=
vec
!
(
)
;
for
msg_type
in
types
.
iter
(
)
{
let
msg_type
=
msg_type
.
as_string
(
)
.
unwrap
(
)
;
match
&
*
msg_type
{
"
ConsoleAPI
"
=
>
{
}
"
PageError
"
=
>
{
}
"
LogMessage
"
=
>
{
}
s
=
>
println
!
(
"
unrecognized
message
type
requested
:
\
"
{
}
\
"
"
s
)
}
}
let
msg
=
GetCachedMessagesReply
{
from
:
self
.
name
(
)
messages
:
messages
}
;
stream
.
write_json_packet
(
&
msg
)
;
true
}
"
startListeners
"
=
>
{
let
msg
=
StartedListenersReply
{
from
:
self
.
name
(
)
nativeConsoleAPI
:
true
startedListeners
:
vec
!
(
"
PageError
"
.
to_string
(
)
"
ConsoleAPI
"
.
to_string
(
)
)
traits
:
StartedListenersTraits
{
customNetworkRequest
:
true
}
}
;
stream
.
write_json_packet
(
&
msg
)
;
true
}
"
stopListeners
"
=
>
{
let
msg
=
StopListenersReply
{
from
:
self
.
name
(
)
stoppedListeners
:
msg
.
get
(
&
"
listeners
"
.
to_string
(
)
)
.
unwrap
(
)
.
as_array
(
)
.
unwrap_or
(
&
vec
!
(
)
)
.
iter
(
)
.
map
(
|
listener
|
listener
.
as_string
(
)
.
unwrap
(
)
.
to_string
(
)
)
.
collect
(
)
}
;
stream
.
write_json_packet
(
&
msg
)
;
true
}
"
autocomplete
"
=
>
{
let
msg
=
AutocompleteReply
{
from
:
self
.
name
(
)
matches
:
vec
!
(
)
matchProp
:
"
"
.
to_string
(
)
}
;
stream
.
write_json_packet
(
&
msg
)
;
true
}
"
evaluateJS
"
=
>
{
let
input
=
msg
.
get
(
&
"
text
"
.
to_string
(
)
)
.
unwrap
(
)
.
as_string
(
)
.
unwrap
(
)
.
to_string
(
)
;
let
(
chan
port
)
=
channel
(
)
;
self
.
script_chan
.
send
(
DevtoolScriptControlMsg
:
:
EvaluateJS
(
self
.
pipeline
input
.
clone
(
)
chan
)
)
.
unwrap
(
)
;
let
result
=
match
try
!
(
port
.
recv
(
)
.
map_err
(
|
_
|
(
)
)
)
{
VoidValue
=
>
{
let
mut
m
=
BTreeMap
:
:
new
(
)
;
m
.
insert
(
"
type
"
.
to_string
(
)
"
undefined
"
.
to_string
(
)
.
to_json
(
)
)
;
Json
:
:
Object
(
m
)
}
NullValue
=
>
{
let
mut
m
=
BTreeMap
:
:
new
(
)
;
m
.
insert
(
"
type
"
.
to_string
(
)
"
null
"
.
to_string
(
)
.
to_json
(
)
)
;
Json
:
:
Object
(
m
)
}
BooleanValue
(
val
)
=
>
val
.
to_json
(
)
NumberValue
(
val
)
=
>
{
if
val
.
is_nan
(
)
{
let
mut
m
=
BTreeMap
:
:
new
(
)
;
m
.
insert
(
"
type
"
.
to_string
(
)
"
NaN
"
.
to_string
(
)
.
to_json
(
)
)
;
Json
:
:
Object
(
m
)
}
else
if
val
.
is_infinite
(
)
{
let
mut
m
=
BTreeMap
:
:
new
(
)
;
if
val
<
0
.
{
m
.
insert
(
"
type
"
.
to_string
(
)
"
-
Infinity
"
.
to_string
(
)
.
to_json
(
)
)
;
}
else
{
m
.
insert
(
"
type
"
.
to_string
(
)
"
Infinity
"
.
to_string
(
)
.
to_json
(
)
)
;
}
Json
:
:
Object
(
m
)
}
else
if
val
=
=
0
.
&
&
val
.
is_sign_negative
(
)
{
let
mut
m
=
BTreeMap
:
:
new
(
)
;
m
.
insert
(
"
type
"
.
to_string
(
)
"
-
0
"
.
to_string
(
)
.
to_json
(
)
)
;
Json
:
:
Object
(
m
)
}
else
{
val
.
to_json
(
)
}
}
StringValue
(
s
)
=
>
s
.
to_json
(
)
ActorValue
(
s
)
=
>
{
let
mut
m
=
BTreeMap
:
:
new
(
)
;
m
.
insert
(
"
type
"
.
to_string
(
)
"
object
"
.
to_string
(
)
.
to_json
(
)
)
;
m
.
insert
(
"
class
"
.
to_string
(
)
"
?
?
?
"
.
to_string
(
)
.
to_json
(
)
)
;
m
.
insert
(
"
actor
"
.
to_string
(
)
s
.
to_json
(
)
)
;
m
.
insert
(
"
extensible
"
.
to_string
(
)
true
.
to_json
(
)
)
;
m
.
insert
(
"
frozen
"
.
to_string
(
)
false
.
to_json
(
)
)
;
m
.
insert
(
"
sealed
"
.
to_string
(
)
false
.
to_json
(
)
)
;
Json
:
:
Object
(
m
)
}
}
;
let
msg
=
EvaluateJSReply
{
from
:
self
.
name
(
)
input
:
input
result
:
result
timestamp
:
0
exception
:
Json
:
:
Object
(
BTreeMap
:
:
new
(
)
)
exceptionMessage
:
"
"
.
to_string
(
)
helperResult
:
Json
:
:
Object
(
BTreeMap
:
:
new
(
)
)
}
;
stream
.
write_json_packet
(
&
msg
)
;
true
}
_
=
>
false
}
)
}
}
