use
actor
:
:
{
Actor
ActorRegistry
}
;
use
protocol
:
:
JsonPacketSender
;
use
serialize
:
:
json
;
use
std
:
:
io
:
:
TcpStream
;
#
[
deriving
(
Encodable
)
]
struct
TabTraits
;
#
[
deriving
(
Encodable
)
]
struct
TabAttachedReply
{
from
:
String
__type__
:
String
threadActor
:
String
cacheDisabled
:
bool
javascriptEnabled
:
bool
traits
:
TabTraits
}
#
[
deriving
(
Encodable
)
]
struct
TabDetachedReply
{
from
:
String
__type__
:
String
}
#
[
deriving
(
Encodable
)
]
struct
ReconfigureReply
{
from
:
String
}
#
[
deriving
(
Encodable
)
]
struct
ListFramesReply
{
from
:
String
frames
:
Vec
<
FrameMsg
>
}
#
[
deriving
(
Encodable
)
]
struct
FrameMsg
{
id
:
uint
url
:
String
title
:
String
parentID
:
uint
}
#
[
deriving
(
Encodable
)
]
pub
struct
TabActorMsg
{
actor
:
String
title
:
String
url
:
String
outerWindowID
:
uint
consoleActor
:
String
inspectorActor
:
String
}
pub
struct
TabActor
{
pub
name
:
String
pub
title
:
String
pub
url
:
String
pub
console
:
String
pub
inspector
:
String
}
impl
Actor
for
TabActor
{
fn
name
(
&
self
)
-
>
String
{
self
.
name
.
clone
(
)
}
fn
handle_message
(
&
self
_registry
:
&
ActorRegistry
msg_type
:
&
String
_msg
:
&
json
:
:
Object
stream
:
&
mut
TcpStream
)
-
>
bool
{
match
msg_type
.
as_slice
(
)
{
"
reconfigure
"
=
>
{
stream
.
write_json_packet
(
&
ReconfigureReply
{
from
:
self
.
name
(
)
}
)
;
true
}
"
attach
"
=
>
{
let
msg
=
TabAttachedReply
{
from
:
self
.
name
(
)
__type__
:
"
tabAttached
"
.
to_string
(
)
threadActor
:
self
.
name
(
)
cacheDisabled
:
false
javascriptEnabled
:
true
traits
:
TabTraits
}
;
stream
.
write_json_packet
(
&
msg
)
;
true
}
"
detach
"
=
>
{
let
msg
=
TabDetachedReply
{
from
:
self
.
name
(
)
__type__
:
"
detached
"
.
to_string
(
)
}
;
stream
.
write_json_packet
(
&
msg
)
;
true
}
"
listFrames
"
=
>
{
let
msg
=
ListFramesReply
{
from
:
self
.
name
(
)
frames
:
vec
!
(
)
}
;
stream
.
write_json_packet
(
&
msg
)
;
true
}
_
=
>
false
}
}
}
impl
TabActor
{
pub
fn
encodable
(
&
self
)
-
>
TabActorMsg
{
TabActorMsg
{
actor
:
self
.
name
(
)
title
:
self
.
title
.
clone
(
)
url
:
self
.
url
.
clone
(
)
outerWindowID
:
0
consoleActor
:
self
.
console
.
clone
(
)
inspectorActor
:
self
.
inspector
.
clone
(
)
}
}
}
