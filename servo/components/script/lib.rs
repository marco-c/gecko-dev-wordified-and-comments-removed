#
!
[
feature
(
ascii
)
]
#
!
[
feature
(
as_unsafe_cell
)
]
#
!
[
feature
(
borrow_state
)
]
#
!
[
feature
(
box_syntax
)
]
#
!
[
feature
(
cell_extras
)
]
#
!
[
feature
(
const_fn
)
]
#
!
[
feature
(
core
)
]
#
!
[
feature
(
core_intrinsics
)
]
#
!
[
feature
(
custom_attribute
)
]
#
!
[
feature
(
custom_derive
)
]
#
!
[
feature
(
decode_utf16
)
]
#
!
[
feature
(
drain
)
]
#
!
[
feature
(
fnbox
)
]
#
!
[
feature
(
hashmap_hasher
)
]
#
!
[
feature
(
iter_arith
)
]
#
!
[
feature
(
mpsc_select
)
]
#
!
[
feature
(
nonzero
)
]
#
!
[
feature
(
on_unimplemented
)
]
#
!
[
feature
(
plugin
)
]
#
!
[
feature
(
ref_slice
)
]
#
!
[
feature
(
slice_patterns
)
]
#
!
[
feature
(
str_utf16
)
]
#
!
[
feature
(
unicode
)
]
#
!
[
feature
(
vec_push_all
)
]
#
!
[
deny
(
unsafe_code
)
]
#
!
[
allow
(
non_snake_case
)
]
#
!
[
doc
=
"
The
script
crate
contains
all
matters
DOM
.
"
]
#
!
[
plugin
(
string_cache_plugin
)
]
#
!
[
plugin
(
plugins
)
]
extern
crate
app_units
;
#
[
macro_use
]
extern
crate
bitflags
;
#
[
macro_use
]
extern
crate
log
;
#
[
macro_use
]
extern
crate
profile_traits
;
#
[
macro_use
]
extern
crate
style
;
#
[
macro_use
]
extern
crate
util
;
extern
crate
angle
;
extern
crate
canvas
;
extern
crate
canvas_traits
;
extern
crate
caseless
;
extern
crate
core
;
extern
crate
cssparser
;
extern
crate
devtools_traits
;
extern
crate
encoding
;
extern
crate
euclid
;
extern
crate
fnv
;
extern
crate
html5ever
;
extern
crate
hyper
;
extern
crate
image
;
extern
crate
ipc_channel
;
extern
crate
js
;
extern
crate
libc
;
extern
crate
msg
;
extern
crate
net_traits
;
extern
crate
num
;
extern
crate
offscreen_gl_context
;
extern
crate
rand
;
extern
crate
rustc_serialize
;
extern
crate
rustc_unicode
;
extern
crate
script_traits
;
extern
crate
selectors
;
extern
crate
serde
;
extern
crate
smallvec
;
extern
crate
string_cache
;
extern
crate
tendril
;
extern
crate
time
;
extern
crate
unicase
;
extern
crate
url
;
extern
crate
uuid
;
extern
crate
websocket
;
pub
mod
clipboard_provider
;
pub
mod
cors
;
mod
devtools
;
pub
mod
document_loader
;
#
[
macro_use
]
pub
mod
dom
;
pub
mod
layout_interface
;
mod
mem
;
mod
network_listener
;
pub
mod
page
;
pub
mod
parse
;
#
[
allow
(
unsafe_code
)
]
pub
mod
script_task
;
pub
mod
textinput
;
mod
timers
;
mod
unpremultiplytable
;
mod
webdriver_handlers
;
use
dom
:
:
bindings
:
:
codegen
:
:
RegisterBindings
;
#
[
cfg
(
target_os
=
"
linux
"
)
]
#
[
allow
(
unsafe_code
)
]
fn
perform_platform_specific_initialization
(
)
{
use
std
:
:
mem
;
const
MAX_FILE_LIMIT
:
libc
:
:
rlim_t
=
4096
;
unsafe
{
let
mut
rlim
:
libc
:
:
rlimit
=
mem
:
:
uninitialized
(
)
;
match
libc
:
:
getrlimit
(
libc
:
:
RLIMIT_NOFILE
&
mut
rlim
)
{
0
=
>
{
if
rlim
.
rlim_cur
>
=
MAX_FILE_LIMIT
{
return
;
}
rlim
.
rlim_cur
=
match
rlim
.
rlim_max
{
libc
:
:
RLIM_INFINITY
=
>
MAX_FILE_LIMIT
_
=
>
{
if
rlim
.
rlim_max
<
MAX_FILE_LIMIT
{
rlim
.
rlim_max
}
else
{
MAX_FILE_LIMIT
}
}
}
;
match
libc
:
:
setrlimit
(
libc
:
:
RLIMIT_NOFILE
&
mut
rlim
)
{
0
=
>
(
)
_
=
>
warn
!
(
"
Failed
to
set
file
count
limit
"
)
}
;
}
_
=
>
warn
!
(
"
Failed
to
get
file
count
limit
"
)
}
;
}
}
#
[
cfg
(
not
(
target_os
=
"
linux
"
)
)
]
fn
perform_platform_specific_initialization
(
)
{
}
#
[
allow
(
unsafe_code
)
]
pub
fn
init
(
)
{
unsafe
{
assert_eq
!
(
js
:
:
jsapi
:
:
JS_Init
(
)
true
)
;
}
RegisterBindings
:
:
RegisterProxyHandlers
(
)
;
perform_platform_specific_initialization
(
)
;
}
