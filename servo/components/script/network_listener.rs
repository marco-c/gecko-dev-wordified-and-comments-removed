use
script_task
:
:
{
ScriptChan
ScriptMsg
Runnable
}
;
use
net_traits
:
:
{
AsyncResponseTarget
AsyncResponseListener
ResponseAction
}
;
use
std
:
:
sync
:
:
{
Arc
Mutex
}
;
pub
struct
NetworkListener
<
T
:
AsyncResponseListener
+
PreInvoke
+
Send
+
'
static
>
{
pub
context
:
Arc
<
Mutex
<
T
>
>
pub
script_chan
:
Box
<
ScriptChan
+
Send
>
}
impl
<
T
:
AsyncResponseListener
+
PreInvoke
+
Send
+
'
static
>
AsyncResponseTarget
for
NetworkListener
<
T
>
{
fn
invoke_with_listener
(
&
self
action
:
ResponseAction
)
{
self
.
script_chan
.
send
(
ScriptMsg
:
:
RunnableMsg
(
box
ListenerRunnable
{
context
:
self
.
context
.
clone
(
)
action
:
action
}
)
)
.
unwrap
(
)
;
}
}
pub
trait
PreInvoke
{
fn
should_invoke
(
&
self
)
-
>
bool
{
true
}
}
struct
ListenerRunnable
<
T
:
AsyncResponseListener
+
PreInvoke
+
Send
>
{
context
:
Arc
<
Mutex
<
T
>
>
action
:
ResponseAction
}
impl
<
T
:
AsyncResponseListener
+
PreInvoke
+
Send
>
Runnable
for
ListenerRunnable
<
T
>
{
fn
handler
(
self
:
Box
<
ListenerRunnable
<
T
>
>
)
{
let
this
=
*
self
;
let
context
=
this
.
context
.
lock
(
)
.
unwrap
(
)
;
if
context
.
should_invoke
(
)
{
this
.
action
.
process
(
&
*
context
)
;
}
}
}
