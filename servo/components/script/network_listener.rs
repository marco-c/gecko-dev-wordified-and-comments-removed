use
net_traits
:
:
{
Action
FetchResponseListener
FetchResponseMsg
}
;
use
script_thread
:
:
{
Runnable
RunnableWrapper
}
;
use
std
:
:
sync
:
:
{
Arc
Mutex
}
;
use
task_source
:
:
TaskSource
;
use
task_source
:
:
networking
:
:
NetworkingTaskSource
;
pub
struct
NetworkListener
<
Listener
:
PreInvoke
+
Send
+
'
static
>
{
pub
context
:
Arc
<
Mutex
<
Listener
>
>
pub
task_source
:
NetworkingTaskSource
pub
wrapper
:
Option
<
RunnableWrapper
>
}
impl
<
Listener
:
PreInvoke
+
Send
+
'
static
>
NetworkListener
<
Listener
>
{
pub
fn
notify
<
A
:
Action
<
Listener
>
+
Send
+
'
static
>
(
&
self
action
:
A
)
{
let
runnable
=
box
ListenerRunnable
{
context
:
self
.
context
.
clone
(
)
action
:
action
}
;
let
result
=
if
let
Some
(
ref
wrapper
)
=
self
.
wrapper
{
self
.
task_source
.
queue_with_wrapper
(
runnable
wrapper
)
}
else
{
self
.
task_source
.
queue_wrapperless
(
runnable
)
}
;
if
let
Err
(
err
)
=
result
{
warn
!
(
"
failed
to
deliver
network
data
:
{
:
?
}
"
err
)
;
}
}
}
impl
<
Listener
:
FetchResponseListener
+
PreInvoke
+
Send
+
'
static
>
NetworkListener
<
Listener
>
{
pub
fn
notify_fetch
(
&
self
action
:
FetchResponseMsg
)
{
self
.
notify
(
action
)
;
}
}
pub
trait
PreInvoke
{
fn
should_invoke
(
&
self
)
-
>
bool
{
true
}
}
struct
ListenerRunnable
<
A
:
Action
<
Listener
>
+
Send
+
'
static
Listener
:
PreInvoke
+
Send
>
{
context
:
Arc
<
Mutex
<
Listener
>
>
action
:
A
}
impl
<
A
:
Action
<
Listener
>
+
Send
+
'
static
Listener
:
PreInvoke
+
Send
>
Runnable
for
ListenerRunnable
<
A
Listener
>
{
fn
handler
(
self
:
Box
<
ListenerRunnable
<
A
Listener
>
>
)
{
let
this
=
*
self
;
let
mut
context
=
this
.
context
.
lock
(
)
.
unwrap
(
)
;
if
context
.
should_invoke
(
)
{
this
.
action
.
process
(
&
mut
*
context
)
;
}
}
}
