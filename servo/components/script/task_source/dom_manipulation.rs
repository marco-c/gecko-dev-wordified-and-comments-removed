use
dom
:
:
bindings
:
:
refcounted
:
:
Trusted
;
use
dom
:
:
event
:
:
{
EventBubbles
EventCancelable
}
;
use
dom
:
:
eventtarget
:
:
EventTarget
;
use
script_thread
:
:
{
MainThreadRunnable
MainThreadScriptMsg
Runnable
ScriptThread
}
;
use
std
:
:
result
:
:
Result
;
use
std
:
:
sync
:
:
mpsc
:
:
Sender
;
use
string_cache
:
:
Atom
;
use
task_source
:
:
TaskSource
;
#
[
derive
(
JSTraceable
Clone
)
]
pub
struct
DOMManipulationTaskSource
(
pub
Sender
<
MainThreadScriptMsg
>
)
;
impl
TaskSource
<
DOMManipulationTask
>
for
DOMManipulationTaskSource
{
fn
queue
(
&
self
msg
:
DOMManipulationTask
)
-
>
Result
<
(
)
(
)
>
{
self
.
0
.
send
(
MainThreadScriptMsg
:
:
DOMManipulation
(
msg
)
)
.
map_err
(
|
_
|
(
)
)
}
}
impl
DOMManipulationTaskSource
{
pub
fn
queue_event
(
&
self
target
:
&
EventTarget
name
:
Atom
bubbles
:
EventBubbles
cancelable
:
EventCancelable
)
{
let
target
=
Trusted
:
:
new
(
target
)
;
let
_
=
self
.
0
.
send
(
MainThreadScriptMsg
:
:
DOMManipulation
(
DOMManipulationTask
:
:
FireEvent
(
target
name
bubbles
cancelable
)
)
)
;
}
pub
fn
queue_simple_event
(
&
self
target
:
&
EventTarget
name
:
Atom
)
{
let
target
=
Trusted
:
:
new
(
target
)
;
let
_
=
self
.
0
.
send
(
MainThreadScriptMsg
:
:
DOMManipulation
(
DOMManipulationTask
:
:
FireSimpleEvent
(
target
name
)
)
)
;
}
}
pub
enum
DOMManipulationTask
{
DocumentProgress
(
Box
<
Runnable
+
Send
>
)
FireEvent
(
Trusted
<
EventTarget
>
Atom
EventBubbles
EventCancelable
)
FireSimpleEvent
(
Trusted
<
EventTarget
>
Atom
)
FireToggleEvent
(
Box
<
Runnable
+
Send
>
)
MediaTask
(
Box
<
Runnable
+
Send
>
)
PlannedNavigation
(
Box
<
Runnable
+
Send
>
)
SendStorageNotification
(
Box
<
MainThreadRunnable
+
Send
>
)
}
impl
DOMManipulationTask
{
pub
fn
handle_task
(
self
script_thread
:
&
ScriptThread
)
{
use
self
:
:
DOMManipulationTask
:
:
*
;
match
self
{
DocumentProgress
(
runnable
)
=
>
runnable
.
handler
(
)
FireEvent
(
element
name
bubbles
cancelable
)
=
>
{
let
target
=
element
.
root
(
)
;
target
.
fire_event
(
&
*
name
bubbles
cancelable
)
;
}
FireSimpleEvent
(
element
name
)
=
>
{
let
target
=
element
.
root
(
)
;
target
.
fire_simple_event
(
&
*
name
)
;
}
FireToggleEvent
(
runnable
)
=
>
runnable
.
handler
(
)
MediaTask
(
runnable
)
=
>
runnable
.
handler
(
)
PlannedNavigation
(
runnable
)
=
>
runnable
.
handler
(
)
SendStorageNotification
(
runnable
)
=
>
runnable
.
handler
(
script_thread
)
}
}
}
