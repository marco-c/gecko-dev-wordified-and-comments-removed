use
script_runtime
:
:
{
CommonScriptMsg
ScriptChan
ScriptThreadEventCategory
}
;
use
task
:
:
{
TaskCanceller
TaskOnce
}
;
use
task_source
:
:
TaskSource
;
#
[
derive
(
JSTraceable
)
]
pub
struct
NetworkingTaskSource
(
pub
Box
<
ScriptChan
+
Send
+
'
static
>
)
;
impl
Clone
for
NetworkingTaskSource
{
fn
clone
(
&
self
)
-
>
NetworkingTaskSource
{
NetworkingTaskSource
(
self
.
0
.
clone
(
)
)
}
}
impl
TaskSource
for
NetworkingTaskSource
{
fn
queue_with_canceller
<
T
>
(
&
self
task
:
T
canceller
:
&
TaskCanceller
)
-
>
Result
<
(
)
(
)
>
where
T
:
TaskOnce
+
'
static
{
self
.
0
.
send
(
CommonScriptMsg
:
:
Task
(
ScriptThreadEventCategory
:
:
NetworkEvent
Box
:
:
new
(
canceller
.
wrap_task
(
task
)
)
)
)
}
}
impl
NetworkingTaskSource
{
pub
fn
queue_unconditionally
<
T
>
(
&
self
task
:
T
)
-
>
Result
<
(
)
(
)
>
where
T
:
TaskOnce
+
'
static
{
self
.
0
.
send
(
CommonScriptMsg
:
:
Task
(
ScriptThreadEventCategory
:
:
NetworkEvent
Box
:
:
new
(
task
)
)
)
}
}
