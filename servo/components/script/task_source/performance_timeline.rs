use
dom
:
:
bindings
:
:
refcounted
:
:
Trusted
;
use
dom
:
:
globalscope
:
:
GlobalScope
;
use
msg
:
:
constellation_msg
:
:
PipelineId
;
use
script_runtime
:
:
{
CommonScriptMsg
ScriptChan
ScriptThreadEventCategory
}
;
use
std
:
:
fmt
;
use
std
:
:
result
:
:
Result
;
use
task
:
:
{
TaskCanceller
TaskOnce
}
;
use
task_source
:
:
TaskSource
;
#
[
derive
(
JSTraceable
)
]
pub
struct
PerformanceTimelineTaskSource
(
pub
Box
<
ScriptChan
+
Send
+
'
static
>
pub
PipelineId
)
;
impl
Clone
for
PerformanceTimelineTaskSource
{
fn
clone
(
&
self
)
-
>
PerformanceTimelineTaskSource
{
PerformanceTimelineTaskSource
(
self
.
0
.
clone
(
)
self
.
1
.
clone
(
)
)
}
}
impl
fmt
:
:
Debug
for
PerformanceTimelineTaskSource
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
PerformanceTimelineTaskSource
(
.
.
.
)
"
)
}
}
impl
TaskSource
for
PerformanceTimelineTaskSource
{
fn
queue_with_canceller
<
T
>
(
&
self
task
:
T
canceller
:
&
TaskCanceller
)
-
>
Result
<
(
)
(
)
>
where
T
:
TaskOnce
+
'
static
{
let
msg
=
CommonScriptMsg
:
:
Task
(
ScriptThreadEventCategory
:
:
PerformanceTimelineTask
Box
:
:
new
(
canceller
.
wrap_task
(
task
)
)
Some
(
self
.
1
)
)
;
self
.
0
.
send
(
msg
)
.
map_err
(
|
_
|
(
)
)
}
}
impl
PerformanceTimelineTaskSource
{
pub
fn
queue_notification
(
&
self
global
:
&
GlobalScope
)
{
let
owner
=
Trusted
:
:
new
(
&
*
global
.
performance
(
)
)
;
let
_
=
self
.
queue
(
task
!
(
notify_performance_observers
:
move
|
|
{
owner
.
root
(
)
.
notify_observers
(
)
;
}
)
global
)
;
}
}
