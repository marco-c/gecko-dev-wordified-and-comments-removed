use
std
:
:
fmt
;
use
std
:
:
intrinsics
;
use
std
:
:
sync
:
:
Arc
;
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicBool
Ordering
}
;
macro_rules
!
task
{
(
name
:
ident
:
move
|
|
body
:
tt
)
=
>
{
{
#
[
allow
(
non_camel_case_types
)
]
struct
name
<
F
>
(
F
)
;
impl
<
F
>
:
:
task
:
:
TaskOnce
for
name
<
F
>
where
F
:
:
:
std
:
:
ops
:
:
FnOnce
(
)
+
Send
{
fn
name
(
&
self
)
-
>
&
'
static
str
{
stringify
!
(
name
)
}
fn
run_once
(
self
)
{
(
self
.
0
)
(
)
;
}
}
name
(
move
|
|
body
)
}
}
;
}
pub
trait
TaskOnce
:
Send
{
#
[
allow
(
unsafe_code
)
]
fn
name
(
&
self
)
-
>
&
'
static
str
{
unsafe
{
intrinsics
:
:
type_name
:
:
<
Self
>
(
)
}
}
fn
run_once
(
self
)
;
}
pub
trait
TaskBox
:
Send
{
fn
name
(
&
self
)
-
>
&
'
static
str
;
fn
run_box
(
self
:
Box
<
Self
>
)
;
}
impl
<
T
>
TaskBox
for
T
where
T
:
TaskOnce
{
fn
name
(
&
self
)
-
>
&
'
static
str
{
TaskOnce
:
:
name
(
self
)
}
fn
run_box
(
self
:
Box
<
Self
>
)
{
self
.
run_once
(
)
}
}
impl
fmt
:
:
Debug
for
TaskBox
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
fmt
.
debug_tuple
(
self
.
name
(
)
)
.
field
(
&
format_args
!
(
"
.
.
.
"
)
)
.
finish
(
)
}
}
pub
struct
TaskCanceller
{
pub
cancelled
:
Option
<
Arc
<
AtomicBool
>
>
}
impl
TaskCanceller
{
pub
fn
wrap_task
<
T
>
(
&
self
task
:
T
)
-
>
impl
TaskOnce
where
T
:
TaskOnce
{
CancellableTask
{
cancelled
:
self
.
cancelled
.
clone
(
)
inner
:
task
}
}
}
pub
struct
CancellableTask
<
T
:
TaskOnce
>
{
cancelled
:
Option
<
Arc
<
AtomicBool
>
>
inner
:
T
}
impl
<
T
>
CancellableTask
<
T
>
where
T
:
TaskOnce
{
fn
is_cancelled
(
&
self
)
-
>
bool
{
self
.
cancelled
.
as_ref
(
)
.
map_or
(
false
|
cancelled
|
{
cancelled
.
load
(
Ordering
:
:
SeqCst
)
}
)
}
}
impl
<
T
>
TaskOnce
for
CancellableTask
<
T
>
where
T
:
TaskOnce
{
fn
name
(
&
self
)
-
>
&
'
static
str
{
self
.
inner
.
name
(
)
}
fn
run_once
(
self
)
{
if
!
self
.
is_cancelled
(
)
{
self
.
inner
.
run_once
(
)
}
}
}
