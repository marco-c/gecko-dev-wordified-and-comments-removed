use
dom
:
:
bindings
:
:
js
:
:
JS
;
use
dom
:
:
node
:
:
{
Node
LayoutDataRef
}
;
use
geom
:
:
point
:
:
Point2D
;
use
geom
:
:
rect
:
:
Rect
;
use
libc
:
:
c_void
;
use
script_traits
:
:
{
ScriptControlChan
OpaqueScriptLayoutChannel
}
;
use
servo_msg
:
:
constellation_msg
:
:
WindowSizeData
;
use
servo_util
:
:
geometry
:
:
Au
;
use
std
:
:
any
:
:
{
Any
AnyRefExt
}
;
use
std
:
:
cmp
;
use
std
:
:
comm
:
:
{
channel
Receiver
Sender
}
;
use
std
:
:
owned
:
:
BoxAny
;
use
style
:
:
Stylesheet
;
use
url
:
:
Url
;
use
serialize
:
:
{
Encodable
Encoder
}
;
pub
enum
Msg
{
AddStylesheetMsg
(
Stylesheet
)
LoadStylesheetMsg
(
Url
)
ReflowMsg
(
Box
<
Reflow
>
)
GetRPCMsg
(
Sender
<
Box
<
LayoutRPC
+
Send
>
>
)
ReapLayoutDataMsg
(
LayoutDataRef
)
PrepareToExitMsg
(
Sender
<
(
)
>
)
ExitNowMsg
}
pub
trait
LayoutRPC
{
fn
content_box
(
&
self
node
:
TrustedNodeAddress
)
-
>
ContentBoxResponse
;
fn
content_boxes
(
&
self
node
:
TrustedNodeAddress
)
-
>
ContentBoxesResponse
;
fn
hit_test
(
&
self
node
:
TrustedNodeAddress
point
:
Point2D
<
f32
>
)
-
>
Result
<
HitTestResponse
(
)
>
;
fn
mouse_over
(
&
self
node
:
TrustedNodeAddress
point
:
Point2D
<
f32
>
)
-
>
Result
<
MouseOverResponse
(
)
>
;
}
pub
struct
TrustedNodeAddress
(
pub
*
const
c_void
)
;
impl
<
S
:
Encoder
<
E
>
E
>
Encodable
<
S
E
>
for
TrustedNodeAddress
{
fn
encode
(
&
self
s
:
&
mut
S
)
-
>
Result
<
(
)
E
>
{
let
TrustedNodeAddress
(
addr
)
=
*
self
;
let
node
=
addr
as
*
const
Node
;
unsafe
{
JS
:
:
from_raw
(
node
)
.
encode
(
s
)
}
}
}
pub
type
UntrustedNodeAddress
=
*
const
c_void
;
pub
struct
ContentBoxResponse
(
pub
Rect
<
Au
>
)
;
pub
struct
ContentBoxesResponse
(
pub
Vec
<
Rect
<
Au
>
>
)
;
pub
struct
HitTestResponse
(
pub
UntrustedNodeAddress
)
;
pub
struct
MouseOverResponse
(
pub
Vec
<
UntrustedNodeAddress
>
)
;
#
[
deriving
(
PartialEq
PartialOrd
Eq
Ord
Encodable
)
]
pub
enum
DocumentDamageLevel
{
ReflowDocumentDamage
MatchSelectorsDocumentDamage
ContentChangedDocumentDamage
}
impl
DocumentDamageLevel
{
pub
fn
add
(
&
mut
self
new_damage
:
DocumentDamageLevel
)
{
*
self
=
cmp
:
:
max
(
*
self
new_damage
)
;
}
}
#
[
deriving
(
Encodable
)
]
pub
struct
DocumentDamage
{
pub
root
:
TrustedNodeAddress
pub
level
:
DocumentDamageLevel
}
#
[
deriving
(
PartialEq
)
]
pub
enum
ReflowGoal
{
ReflowForDisplay
ReflowForScriptQuery
}
pub
struct
Reflow
{
pub
document_root
:
TrustedNodeAddress
pub
damage
:
DocumentDamage
pub
goal
:
ReflowGoal
pub
url
:
Url
pub
iframe
:
bool
pub
script_chan
:
ScriptControlChan
pub
window_size
:
WindowSizeData
pub
script_join_chan
:
Sender
<
(
)
>
pub
id
:
uint
}
#
[
deriving
(
Clone
)
]
pub
struct
LayoutChan
(
pub
Sender
<
Msg
>
)
;
impl
LayoutChan
{
pub
fn
new
(
)
-
>
(
Receiver
<
Msg
>
LayoutChan
)
{
let
(
chan
port
)
=
channel
(
)
;
(
port
LayoutChan
(
chan
)
)
}
}
pub
trait
ScriptLayoutChan
{
fn
new
(
sender
:
Sender
<
Msg
>
receiver
:
Receiver
<
Msg
>
)
-
>
Self
;
fn
sender
(
&
self
)
-
>
Sender
<
Msg
>
;
fn
receiver
(
self
)
-
>
Receiver
<
Msg
>
;
}
impl
ScriptLayoutChan
for
OpaqueScriptLayoutChannel
{
fn
new
(
sender
:
Sender
<
Msg
>
receiver
:
Receiver
<
Msg
>
)
-
>
OpaqueScriptLayoutChannel
{
let
inner
=
(
box
sender
as
Box
<
Any
+
Send
>
box
receiver
as
Box
<
Any
+
Send
>
)
;
OpaqueScriptLayoutChannel
(
inner
)
}
fn
sender
(
&
self
)
-
>
Sender
<
Msg
>
{
let
&
OpaqueScriptLayoutChannel
(
(
ref
sender
_
)
)
=
self
;
(
*
sender
.
downcast_ref
:
:
<
Sender
<
Msg
>
>
(
)
.
unwrap
(
)
)
.
clone
(
)
}
fn
receiver
(
self
)
-
>
Receiver
<
Msg
>
{
let
OpaqueScriptLayoutChannel
(
(
_
receiver
)
)
=
self
;
*
receiver
.
downcast
:
:
<
Receiver
<
Msg
>
>
(
)
.
unwrap
(
)
}
}
#
[
test
]
fn
test_add_damage
(
)
{
fn
assert_add
(
mut
a
:
DocumentDamageLevel
b
:
DocumentDamageLevel
result
:
DocumentDamageLevel
)
{
a
.
add
(
b
)
;
assert
!
(
a
=
=
result
)
;
}
assert_add
(
ReflowDocumentDamage
ReflowDocumentDamage
ReflowDocumentDamage
)
;
assert_add
(
ContentChangedDocumentDamage
ContentChangedDocumentDamage
ContentChangedDocumentDamage
)
;
assert_add
(
ReflowDocumentDamage
MatchSelectorsDocumentDamage
MatchSelectorsDocumentDamage
)
;
assert_add
(
MatchSelectorsDocumentDamage
ReflowDocumentDamage
MatchSelectorsDocumentDamage
)
;
assert_add
(
ReflowDocumentDamage
ContentChangedDocumentDamage
ContentChangedDocumentDamage
)
;
assert_add
(
ContentChangedDocumentDamage
ReflowDocumentDamage
ContentChangedDocumentDamage
)
;
assert_add
(
MatchSelectorsDocumentDamage
ContentChangedDocumentDamage
ContentChangedDocumentDamage
)
;
assert_add
(
ContentChangedDocumentDamage
MatchSelectorsDocumentDamage
ContentChangedDocumentDamage
)
;
}
