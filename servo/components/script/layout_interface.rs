use
dom
:
:
node
:
:
LayoutDataRef
;
use
geom
:
:
point
:
:
Point2D
;
use
geom
:
:
rect
:
:
Rect
;
use
script_traits
:
:
{
ScriptControlChan
OpaqueScriptLayoutChannel
UntrustedNodeAddress
}
;
use
servo_msg
:
:
constellation_msg
:
:
WindowSizeData
;
use
servo_util
:
:
geometry
:
:
Au
;
use
std
:
:
any
:
:
{
Any
AnyRefExt
}
;
use
std
:
:
comm
:
:
{
channel
Receiver
Sender
}
;
use
std
:
:
owned
:
:
BoxAny
;
use
style
:
:
Stylesheet
;
use
url
:
:
Url
;
pub
use
dom
:
:
node
:
:
TrustedNodeAddress
;
pub
enum
Msg
{
AddStylesheetMsg
(
Stylesheet
)
LoadStylesheetMsg
(
Url
)
ReflowMsg
(
Box
<
Reflow
>
)
GetRPCMsg
(
Sender
<
Box
<
LayoutRPC
+
Send
>
>
)
ReapLayoutDataMsg
(
LayoutDataRef
)
PrepareToExitMsg
(
Sender
<
(
)
>
)
ExitNowMsg
}
pub
trait
LayoutRPC
{
fn
content_box
(
&
self
)
-
>
ContentBoxResponse
;
fn
content_boxes
(
&
self
)
-
>
ContentBoxesResponse
;
fn
hit_test
(
&
self
node
:
TrustedNodeAddress
point
:
Point2D
<
f32
>
)
-
>
Result
<
HitTestResponse
(
)
>
;
fn
mouse_over
(
&
self
node
:
TrustedNodeAddress
point
:
Point2D
<
f32
>
)
-
>
Result
<
MouseOverResponse
(
)
>
;
}
pub
struct
ContentBoxResponse
(
pub
Rect
<
Au
>
)
;
pub
struct
ContentBoxesResponse
(
pub
Vec
<
Rect
<
Au
>
>
)
;
pub
struct
HitTestResponse
(
pub
UntrustedNodeAddress
)
;
pub
struct
MouseOverResponse
(
pub
Vec
<
UntrustedNodeAddress
>
)
;
#
[
deriving
(
PartialEq
Show
)
]
pub
enum
ReflowGoal
{
ReflowForDisplay
ReflowForScriptQuery
}
pub
enum
ReflowQueryType
{
NoQuery
ContentBoxQuery
(
TrustedNodeAddress
)
ContentBoxesQuery
(
TrustedNodeAddress
)
}
pub
struct
Reflow
{
pub
document_root
:
TrustedNodeAddress
pub
goal
:
ReflowGoal
pub
url
:
Url
pub
iframe
:
bool
pub
script_chan
:
ScriptControlChan
pub
window_size
:
WindowSizeData
pub
script_join_chan
:
Sender
<
(
)
>
pub
id
:
uint
pub
query_type
:
ReflowQueryType
}
#
[
deriving
(
Clone
)
]
pub
struct
LayoutChan
(
pub
Sender
<
Msg
>
)
;
impl
LayoutChan
{
pub
fn
new
(
)
-
>
(
Receiver
<
Msg
>
LayoutChan
)
{
let
(
chan
port
)
=
channel
(
)
;
(
port
LayoutChan
(
chan
)
)
}
}
pub
trait
ScriptLayoutChan
{
fn
new
(
sender
:
Sender
<
Msg
>
receiver
:
Receiver
<
Msg
>
)
-
>
Self
;
fn
sender
(
&
self
)
-
>
Sender
<
Msg
>
;
fn
receiver
(
self
)
-
>
Receiver
<
Msg
>
;
}
impl
ScriptLayoutChan
for
OpaqueScriptLayoutChannel
{
fn
new
(
sender
:
Sender
<
Msg
>
receiver
:
Receiver
<
Msg
>
)
-
>
OpaqueScriptLayoutChannel
{
let
inner
=
(
box
sender
as
Box
<
Any
+
Send
>
box
receiver
as
Box
<
Any
+
Send
>
)
;
OpaqueScriptLayoutChannel
(
inner
)
}
fn
sender
(
&
self
)
-
>
Sender
<
Msg
>
{
let
&
OpaqueScriptLayoutChannel
(
(
ref
sender
_
)
)
=
self
;
(
*
sender
.
downcast_ref
:
:
<
Sender
<
Msg
>
>
(
)
.
unwrap
(
)
)
.
clone
(
)
}
fn
receiver
(
self
)
-
>
Receiver
<
Msg
>
{
let
OpaqueScriptLayoutChannel
(
(
_
receiver
)
)
=
self
;
*
receiver
.
downcast
:
:
<
Receiver
<
Msg
>
>
(
)
.
unwrap
(
)
}
}
