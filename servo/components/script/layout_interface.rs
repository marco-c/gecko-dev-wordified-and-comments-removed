use
app_units
:
:
Au
;
use
dom
:
:
node
:
:
LayoutData
;
use
euclid
:
:
point
:
:
Point2D
;
use
euclid
:
:
rect
:
:
Rect
;
use
ipc_channel
:
:
ipc
:
:
{
IpcReceiver
IpcSender
}
;
use
libc
:
:
uintptr_t
;
use
msg
:
:
compositor_msg
:
:
Epoch
;
use
msg
:
:
compositor_msg
:
:
LayerId
;
use
msg
:
:
constellation_msg
:
:
{
ConstellationChan
Failure
PipelineId
}
;
use
msg
:
:
constellation_msg
:
:
{
WindowSizeData
}
;
use
net_traits
:
:
image_cache_task
:
:
ImageCacheTask
;
use
profile_traits
:
:
mem
:
:
ReportsChan
;
use
script_traits
:
:
{
ConstellationControlMsg
LayoutControlMsg
OpaqueScriptLayoutChannel
}
;
use
script_traits
:
:
{
ScriptMsg
as
ConstellationMsg
UntrustedNodeAddress
}
;
use
selectors
:
:
parser
:
:
PseudoElement
;
use
std
:
:
any
:
:
Any
;
use
std
:
:
sync
:
:
Arc
;
use
std
:
:
sync
:
:
mpsc
:
:
{
Receiver
Sender
channel
}
;
use
string_cache
:
:
Atom
;
use
style
:
:
animation
:
:
PropertyAnimation
;
use
style
:
:
stylesheets
:
:
Stylesheet
;
use
url
:
:
Url
;
use
util
:
:
ipc
:
:
OptionalOpaqueIpcSender
;
pub
use
dom
:
:
node
:
:
TrustedNodeAddress
;
pub
enum
Msg
{
AddStylesheet
(
Arc
<
Stylesheet
>
)
SetQuirksMode
Reflow
(
ScriptReflow
)
GetRPC
(
Sender
<
Box
<
LayoutRPC
+
Send
>
>
)
TickAnimations
ReflowWithNewlyLoadedWebFont
SetVisibleRects
(
Vec
<
(
LayerId
Rect
<
Au
>
)
>
)
ReapLayoutData
(
LayoutData
)
CollectReports
(
ReportsChan
)
PrepareToExit
(
Sender
<
(
)
>
)
ExitNow
GetCurrentEpoch
(
IpcSender
<
Epoch
>
)
GetWebFontLoadState
(
IpcSender
<
bool
>
)
CreateLayoutTask
(
NewLayoutTaskInfo
)
}
pub
trait
LayoutRPC
{
fn
content_box
(
&
self
)
-
>
ContentBoxResponse
;
fn
content_boxes
(
&
self
)
-
>
ContentBoxesResponse
;
fn
node_geometry
(
&
self
)
-
>
NodeGeometryResponse
;
fn
hit_test
(
&
self
point
:
Point2D
<
f32
>
)
-
>
Result
<
HitTestResponse
(
)
>
;
fn
mouse_over
(
&
self
point
:
Point2D
<
f32
>
)
-
>
Result
<
MouseOverResponse
(
)
>
;
fn
resolved_style
(
&
self
)
-
>
ResolvedStyleResponse
;
fn
offset_parent
(
&
self
)
-
>
OffsetParentResponse
;
}
pub
struct
ContentBoxResponse
(
pub
Rect
<
Au
>
)
;
pub
struct
ContentBoxesResponse
(
pub
Vec
<
Rect
<
Au
>
>
)
;
pub
struct
NodeGeometryResponse
{
pub
client_rect
:
Rect
<
i32
>
}
pub
struct
HitTestResponse
(
pub
UntrustedNodeAddress
)
;
pub
struct
MouseOverResponse
(
pub
Vec
<
UntrustedNodeAddress
>
)
;
pub
struct
ResolvedStyleResponse
(
pub
Option
<
String
>
)
;
#
[
derive
(
Clone
)
]
pub
struct
OffsetParentResponse
{
pub
node_address
:
Option
<
UntrustedNodeAddress
>
pub
rect
:
Rect
<
Au
>
}
impl
OffsetParentResponse
{
pub
fn
empty
(
)
-
>
OffsetParentResponse
{
OffsetParentResponse
{
node_address
:
None
rect
:
Rect
:
:
zero
(
)
}
}
}
#
[
derive
(
PartialEq
Copy
Clone
Debug
)
]
pub
enum
ReflowGoal
{
ForDisplay
ForScriptQuery
}
#
[
derive
(
PartialEq
)
]
pub
enum
ReflowQueryType
{
NoQuery
ContentBoxQuery
(
TrustedNodeAddress
)
ContentBoxesQuery
(
TrustedNodeAddress
)
NodeGeometryQuery
(
TrustedNodeAddress
)
ResolvedStyleQuery
(
TrustedNodeAddress
Option
<
PseudoElement
>
Atom
)
OffsetParentQuery
(
TrustedNodeAddress
)
}
pub
struct
Reflow
{
pub
goal
:
ReflowGoal
pub
page_clip_rect
:
Rect
<
Au
>
}
pub
struct
ScriptReflow
{
pub
reflow_info
:
Reflow
pub
document
:
TrustedNodeAddress
pub
document_stylesheets
:
Vec
<
Arc
<
Stylesheet
>
>
pub
stylesheets_changed
:
bool
pub
window_size
:
WindowSizeData
pub
script_join_chan
:
Sender
<
(
)
>
pub
query_type
:
ReflowQueryType
}
impl
Drop
for
ScriptReflow
{
fn
drop
(
&
mut
self
)
{
self
.
script_join_chan
.
send
(
(
)
)
.
unwrap
(
)
;
}
}
#
[
derive
(
Clone
)
]
pub
struct
LayoutChan
(
pub
Sender
<
Msg
>
)
;
impl
LayoutChan
{
pub
fn
new
(
)
-
>
(
Receiver
<
Msg
>
LayoutChan
)
{
let
(
chan
port
)
=
channel
(
)
;
(
port
LayoutChan
(
chan
)
)
}
}
pub
trait
ScriptLayoutChan
{
fn
new
(
sender
:
Sender
<
Msg
>
receiver
:
Receiver
<
Msg
>
)
-
>
Self
;
fn
sender
(
&
self
)
-
>
Sender
<
Msg
>
;
fn
receiver
(
self
)
-
>
Receiver
<
Msg
>
;
}
impl
ScriptLayoutChan
for
OpaqueScriptLayoutChannel
{
fn
new
(
sender
:
Sender
<
Msg
>
receiver
:
Receiver
<
Msg
>
)
-
>
OpaqueScriptLayoutChannel
{
let
inner
=
(
box
sender
as
Box
<
Any
+
Send
>
box
receiver
as
Box
<
Any
+
Send
>
)
;
OpaqueScriptLayoutChannel
(
inner
)
}
fn
sender
(
&
self
)
-
>
Sender
<
Msg
>
{
let
&
OpaqueScriptLayoutChannel
(
(
ref
sender
_
)
)
=
self
;
(
*
sender
.
downcast_ref
:
:
<
Sender
<
Msg
>
>
(
)
.
unwrap
(
)
)
.
clone
(
)
}
fn
receiver
(
self
)
-
>
Receiver
<
Msg
>
{
let
OpaqueScriptLayoutChannel
(
(
_
receiver
)
)
=
self
;
*
receiver
.
downcast
:
:
<
Receiver
<
Msg
>
>
(
)
.
unwrap
(
)
}
}
pub
type
OpaqueNode
=
uintptr_t
;
#
[
derive
(
Clone
)
]
pub
struct
Animation
{
pub
node
:
OpaqueNode
pub
property_animation
:
PropertyAnimation
pub
start_time
:
f64
pub
end_time
:
f64
}
impl
Animation
{
#
[
inline
]
pub
fn
duration
(
&
self
)
-
>
f64
{
self
.
end_time
-
self
.
start_time
}
}
pub
struct
NewLayoutTaskInfo
{
pub
id
:
PipelineId
pub
url
:
Url
pub
is_parent
:
bool
pub
layout_pair
:
OpaqueScriptLayoutChannel
pub
pipeline_port
:
IpcReceiver
<
LayoutControlMsg
>
pub
constellation_chan
:
ConstellationChan
<
ConstellationMsg
>
pub
failure
:
Failure
pub
script_chan
:
IpcSender
<
ConstellationControlMsg
>
pub
image_cache_task
:
ImageCacheTask
pub
paint_chan
:
OptionalOpaqueIpcSender
pub
layout_shutdown_chan
:
IpcSender
<
(
)
>
pub
content_process_shutdown_chan
:
IpcSender
<
(
)
>
}
