use
ref_filter_map
:
:
ref_filter_map
;
use
std
:
:
cell
:
:
{
RefCell
Ref
}
;
use
std
:
:
rc
:
:
Rc
;
use
url
:
:
Origin
as
UrlOrigin
;
use
url
:
:
{
Url
Host
}
;
#
[
derive
(
HeapSizeOf
)
]
pub
struct
Origin
{
#
[
ignore_heap_size_of
=
"
Rc
<
T
>
has
unclear
ownership
semantics
"
]
inner
:
Rc
<
RefCell
<
UrlOrigin
>
>
}
no_jsmanaged_fields
!
(
Origin
)
;
impl
Origin
{
pub
fn
opaque_identifier
(
)
-
>
Origin
{
Origin
{
inner
:
Rc
:
:
new
(
RefCell
:
:
new
(
UrlOrigin
:
:
new_opaque
(
)
)
)
}
}
pub
fn
new
(
url
:
&
Url
)
-
>
Origin
{
Origin
{
inner
:
Rc
:
:
new
(
RefCell
:
:
new
(
url
.
origin
(
)
)
)
}
}
pub
fn
set
(
&
self
origin
:
UrlOrigin
)
{
*
self
.
inner
.
borrow_mut
(
)
=
origin
;
}
pub
fn
is_scheme_host_port_tuple
(
&
self
)
-
>
bool
{
self
.
inner
.
borrow
(
)
.
is_tuple
(
)
}
pub
fn
host
(
&
self
)
-
>
Option
<
Ref
<
Host
<
String
>
>
>
{
ref_filter_map
(
self
.
inner
.
borrow
(
)
|
origin
|
match
*
origin
{
UrlOrigin
:
:
Tuple
(
_
ref
host
_
)
=
>
Some
(
host
)
UrlOrigin
:
:
Opaque
(
.
.
)
=
>
None
}
)
}
pub
fn
same_origin
(
&
self
other
:
&
Origin
)
-
>
bool
{
*
self
.
inner
.
borrow
(
)
=
=
*
other
.
inner
.
borrow
(
)
}
pub
fn
copy
(
&
self
)
-
>
Origin
{
Origin
{
inner
:
Rc
:
:
new
(
RefCell
:
:
new
(
self
.
inner
.
borrow
(
)
.
clone
(
)
)
)
}
}
pub
fn
alias
(
&
self
)
-
>
Origin
{
Origin
{
inner
:
self
.
inner
.
clone
(
)
}
}
}
