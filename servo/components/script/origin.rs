use
std
:
:
sync
:
:
Arc
;
use
url
:
:
{
Host
Url
}
;
use
url
:
:
Origin
as
UrlOrigin
;
#
[
derive
(
HeapSizeOf
JSTraceable
)
]
pub
struct
Origin
{
#
[
ignore_heap_size_of
=
"
Arc
<
T
>
has
unclear
ownership
semantics
"
]
inner
:
Arc
<
UrlOrigin
>
}
impl
Origin
{
pub
fn
opaque_identifier
(
)
-
>
Origin
{
Origin
{
inner
:
Arc
:
:
new
(
UrlOrigin
:
:
new_opaque
(
)
)
}
}
pub
fn
new
(
url
:
&
Url
)
-
>
Origin
{
Origin
{
inner
:
Arc
:
:
new
(
url
.
origin
(
)
)
}
}
pub
fn
is_scheme_host_port_tuple
(
&
self
)
-
>
bool
{
self
.
inner
.
is_tuple
(
)
}
pub
fn
host
(
&
self
)
-
>
Option
<
&
Host
<
String
>
>
{
match
*
self
.
inner
{
UrlOrigin
:
:
Tuple
(
_
ref
host
_
)
=
>
Some
(
host
)
UrlOrigin
:
:
Opaque
(
.
.
)
=
>
None
}
}
pub
fn
same_origin
(
&
self
other
:
&
Origin
)
-
>
bool
{
self
.
inner
=
=
other
.
inner
}
pub
fn
copy
(
&
self
)
-
>
Origin
{
Origin
{
inner
:
Arc
:
:
new
(
(
*
self
.
inner
)
.
clone
(
)
)
}
}
pub
fn
alias
(
&
self
)
-
>
Origin
{
Origin
{
inner
:
self
.
inner
.
clone
(
)
}
}
}
