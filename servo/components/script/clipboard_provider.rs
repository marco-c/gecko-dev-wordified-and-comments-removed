use
ipc_channel
:
:
ipc
:
:
{
self
IpcSender
}
;
use
script_traits
:
:
ScriptMsg
as
ConstellationMsg
;
use
std
:
:
borrow
:
:
ToOwned
;
pub
trait
ClipboardProvider
{
fn
clipboard_contents
(
&
mut
self
)
-
>
String
;
fn
set_clipboard_contents
(
&
mut
self
String
)
;
}
impl
ClipboardProvider
for
IpcSender
<
ConstellationMsg
>
{
fn
clipboard_contents
(
&
mut
self
)
-
>
String
{
let
(
tx
rx
)
=
ipc
:
:
channel
(
)
.
unwrap
(
)
;
self
.
send
(
ConstellationMsg
:
:
GetClipboardContents
(
tx
)
)
.
unwrap
(
)
;
rx
.
recv
(
)
.
unwrap
(
)
}
fn
set_clipboard_contents
(
&
mut
self
s
:
String
)
{
self
.
send
(
ConstellationMsg
:
:
SetClipboardContents
(
s
)
)
.
unwrap
(
)
;
}
}
pub
struct
DummyClipboardContext
{
content
:
String
}
impl
DummyClipboardContext
{
pub
fn
new
(
s
:
&
str
)
-
>
DummyClipboardContext
{
DummyClipboardContext
{
content
:
s
.
to_owned
(
)
}
}
}
impl
ClipboardProvider
for
DummyClipboardContext
{
fn
clipboard_contents
(
&
mut
self
)
-
>
String
{
self
.
content
.
clone
(
)
}
fn
set_clipboard_contents
(
&
mut
self
s
:
String
)
{
self
.
content
=
s
;
}
}
