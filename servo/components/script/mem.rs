use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
{
DocumentCast
WindowCast
CharacterDataCast
NodeCast
}
;
use
dom
:
:
eventtarget
:
:
{
EventTarget
EventTargetTypeId
}
;
use
dom
:
:
node
:
:
NodeTypeId
;
use
libc
;
use
util
:
:
mem
:
:
{
HeapSizeOf
heap_size_of
}
;
fn
heap_size_of_self_and_children
<
T
:
HeapSizeOf
>
(
obj
:
&
T
)
-
>
usize
{
heap_size_of
(
obj
as
*
const
T
as
*
const
libc
:
:
c_void
)
+
obj
.
heap_size_of_children
(
)
}
pub
fn
heap_size_of_eventtarget
(
target
:
&
EventTarget
)
-
>
usize
{
match
target
.
type_id
(
)
{
&
EventTargetTypeId
:
:
Window
=
>
heap_size_of_self_and_children
(
WindowCast
:
:
to_ref
(
target
)
.
unwrap
(
)
)
&
EventTargetTypeId
:
:
Node
(
NodeTypeId
:
:
CharacterData
(
_
)
)
=
>
heap_size_of_self_and_children
(
CharacterDataCast
:
:
to_ref
(
target
)
.
unwrap
(
)
)
&
EventTargetTypeId
:
:
Node
(
NodeTypeId
:
:
Document
)
=
>
heap_size_of_self_and_children
(
DocumentCast
:
:
to_ref
(
target
)
.
unwrap
(
)
)
&
EventTargetTypeId
:
:
Node
(
_
)
=
>
heap_size_of_self_and_children
(
NodeCast
:
:
to_ref
(
target
)
.
unwrap
(
)
)
_
=
>
0
}
}
