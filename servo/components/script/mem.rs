use
dom
:
:
bindings
:
:
conversions
:
:
get_dom_class
;
use
dom
:
:
bindings
:
:
reflector
:
:
Reflectable
;
use
heapsize
:
:
{
HeapSizeOf
heap_size_of
}
;
use
std
:
:
os
:
:
raw
:
:
c_void
;
#
[
allow
(
unsafe_code
)
]
pub
fn
heap_size_of_self_and_children
<
T
:
Reflectable
+
HeapSizeOf
>
(
obj
:
&
T
)
-
>
usize
{
unsafe
{
let
class
=
get_dom_class
(
obj
.
reflector
(
)
.
get_jsobject
(
)
.
get
(
)
)
.
unwrap
(
)
;
(
class
.
heap_size_of
)
(
obj
as
*
const
T
as
*
const
c_void
)
}
}
#
[
allow
(
unsafe_code
)
]
pub
unsafe
fn
heap_size_of_raw_self_and_children
<
T
:
HeapSizeOf
>
(
obj
:
*
const
c_void
)
-
>
usize
{
heap_size_of
(
obj
)
+
(
*
(
obj
as
*
const
T
)
)
.
heap_size_of_children
(
)
}
