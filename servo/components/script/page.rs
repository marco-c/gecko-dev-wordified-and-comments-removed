use
dom
:
:
bindings
:
:
cell
:
:
DOMRefCell
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
Temporary
Unrooted
}
;
use
dom
:
:
document
:
:
{
Document
DocumentHelpers
}
;
use
dom
:
:
node
:
:
NodeHelpers
;
use
dom
:
:
window
:
:
Window
;
use
msg
:
:
constellation_msg
:
:
PipelineId
;
use
util
:
:
smallvec
:
:
SmallVec
;
use
std
:
:
cell
:
:
Cell
;
use
std
:
:
rc
:
:
Rc
;
use
url
:
:
Url
;
#
[
jstraceable
]
pub
struct
Page
{
id
:
PipelineId
frame
:
DOMRefCell
<
Option
<
Frame
>
>
url
:
Url
needs_reflow
:
Cell
<
bool
>
pub
children
:
DOMRefCell
<
Vec
<
Rc
<
Page
>
>
>
}
pub
struct
PageIterator
{
stack
:
Vec
<
Rc
<
Page
>
>
}
pub
trait
IterablePage
{
fn
iter
(
&
self
)
-
>
PageIterator
;
fn
find
(
&
self
id
:
PipelineId
)
-
>
Option
<
Rc
<
Page
>
>
;
}
impl
IterablePage
for
Rc
<
Page
>
{
fn
iter
(
&
self
)
-
>
PageIterator
{
PageIterator
{
stack
:
vec
!
(
self
.
clone
(
)
)
}
}
fn
find
(
&
self
id
:
PipelineId
)
-
>
Option
<
Rc
<
Page
>
>
{
if
self
.
id
=
=
id
{
return
Some
(
self
.
clone
(
)
)
;
}
for
page
in
self
.
children
.
borrow
(
)
.
iter
(
)
{
let
found
=
page
.
find
(
id
)
;
if
found
.
is_some
(
)
{
return
found
;
}
}
None
}
}
impl
Page
{
pub
fn
new
(
id
:
PipelineId
url
:
Url
)
-
>
Page
{
Page
{
id
:
id
frame
:
DOMRefCell
:
:
new
(
None
)
url
:
url
needs_reflow
:
Cell
:
:
new
(
true
)
children
:
DOMRefCell
:
:
new
(
vec
!
(
)
)
}
}
pub
fn
window
(
&
self
)
-
>
Temporary
<
Window
>
{
Temporary
:
:
from_rooted
(
self
.
frame
.
borrow
(
)
.
as_ref
(
)
.
unwrap
(
)
.
window
.
clone
(
)
)
}
pub
fn
window_for_script_deallocation
(
&
self
)
-
>
Unrooted
<
Window
>
{
Unrooted
:
:
from_js
(
self
.
frame
.
borrow
(
)
.
as_ref
(
)
.
unwrap
(
)
.
window
)
}
pub
fn
document
(
&
self
)
-
>
Temporary
<
Document
>
{
Temporary
:
:
from_rooted
(
self
.
frame
.
borrow
(
)
.
as_ref
(
)
.
unwrap
(
)
.
document
.
clone
(
)
)
}
pub
fn
remove
(
&
self
id
:
PipelineId
)
-
>
Option
<
Rc
<
Page
>
>
{
let
remove_idx
=
{
self
.
children
.
borrow_mut
(
)
.
iter_mut
(
)
.
position
(
|
page_tree
|
page_tree
.
id
=
=
id
)
}
;
match
remove_idx
{
Some
(
idx
)
=
>
Some
(
self
.
children
.
borrow_mut
(
)
.
remove
(
idx
)
)
None
=
>
{
self
.
children
.
borrow_mut
(
)
.
iter_mut
(
)
.
filter_map
(
|
page_tree
|
page_tree
.
remove
(
id
)
)
.
next
(
)
}
}
}
}
impl
Iterator
for
PageIterator
{
type
Item
=
Rc
<
Page
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Rc
<
Page
>
>
{
match
self
.
stack
.
pop
(
)
{
Some
(
next
)
=
>
{
for
child
in
next
.
children
.
borrow
(
)
.
iter
(
)
{
self
.
stack
.
push
(
child
.
clone
(
)
)
;
}
Some
(
next
)
}
None
=
>
None
}
}
}
impl
Page
{
pub
fn
set_reflow_status
(
&
self
status
:
bool
)
-
>
bool
{
let
old
=
self
.
needs_reflow
.
get
(
)
;
self
.
needs_reflow
.
set
(
status
)
;
old
}
pub
fn
set_frame
(
&
self
frame
:
Option
<
Frame
>
)
{
*
self
.
frame
.
borrow_mut
(
)
=
frame
;
}
}
#
[
jstraceable
]
#
[
must_root
]
pub
struct
Frame
{
pub
document
:
JS
<
Document
>
pub
window
:
JS
<
Window
>
}
