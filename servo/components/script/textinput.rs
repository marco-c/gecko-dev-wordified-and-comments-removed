use
clipboard_provider
:
:
ClipboardProvider
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
keyboardevent
:
:
KeyboardEvent
;
use
msg
:
:
constellation_msg
:
:
{
Key
KeyModifiers
}
;
use
std
:
:
borrow
:
:
ToOwned
;
use
std
:
:
cmp
:
:
{
max
min
}
;
use
std
:
:
default
:
:
Default
;
use
std
:
:
ops
:
:
Range
;
use
std
:
:
usize
;
use
unicode_segmentation
:
:
UnicodeSegmentation
;
#
[
derive
(
Clone
Copy
PartialEq
)
]
pub
enum
Selection
{
Selected
NotSelected
}
#
[
derive
(
Clone
Copy
Debug
JSTraceable
MallocSizeOf
PartialEq
)
]
pub
enum
SelectionDirection
{
Forward
Backward
None
}
impl
From
<
DOMString
>
for
SelectionDirection
{
fn
from
(
direction
:
DOMString
)
-
>
SelectionDirection
{
match
direction
.
as_ref
(
)
{
"
forward
"
=
>
SelectionDirection
:
:
Forward
"
backward
"
=
>
SelectionDirection
:
:
Backward
_
=
>
SelectionDirection
:
:
None
}
}
}
impl
From
<
SelectionDirection
>
for
DOMString
{
fn
from
(
direction
:
SelectionDirection
)
-
>
DOMString
{
match
direction
{
SelectionDirection
:
:
Forward
=
>
DOMString
:
:
from
(
"
forward
"
)
SelectionDirection
:
:
Backward
=
>
DOMString
:
:
from
(
"
backward
"
)
SelectionDirection
:
:
None
=
>
DOMString
:
:
from
(
"
none
"
)
}
}
}
#
[
derive
(
Clone
Copy
JSTraceable
MallocSizeOf
PartialEq
)
]
pub
struct
TextPoint
{
pub
line
:
usize
pub
index
:
usize
}
#
[
derive
(
JSTraceable
MallocSizeOf
)
]
pub
struct
TextInput
<
T
:
ClipboardProvider
>
{
lines
:
Vec
<
DOMString
>
pub
edit_point
:
TextPoint
pub
selection_begin
:
Option
<
TextPoint
>
multiline
:
bool
#
[
ignore_malloc_size_of
=
"
Can
'
t
easily
measure
this
generic
type
"
]
clipboard_provider
:
T
pub
max_length
:
Option
<
usize
>
pub
min_length
:
Option
<
usize
>
pub
selection_direction
:
SelectionDirection
}
pub
enum
KeyReaction
{
TriggerDefaultAction
DispatchInput
RedrawSelection
Nothing
}
impl
Default
for
TextPoint
{
fn
default
(
)
-
>
TextPoint
{
TextPoint
{
line
:
0
index
:
0
}
}
}
#
[
derive
(
Eq
PartialEq
)
]
pub
enum
Lines
{
Single
Multiple
}
#
[
derive
(
Clone
Copy
Eq
PartialEq
)
]
pub
enum
Direction
{
Forward
Backward
}
#
[
cfg
(
target_os
=
"
macos
"
)
]
fn
is_control_key
(
mods
:
KeyModifiers
)
-
>
bool
{
mods
.
contains
(
KeyModifiers
:
:
SUPER
)
&
&
!
mods
.
contains
(
KeyModifiers
:
:
CONTROL
|
KeyModifiers
:
:
ALT
)
}
#
[
cfg
(
not
(
target_os
=
"
macos
"
)
)
]
fn
is_control_key
(
mods
:
KeyModifiers
)
-
>
bool
{
mods
.
contains
(
KeyModifiers
:
:
CONTROL
)
&
&
!
mods
.
contains
(
KeyModifiers
:
:
SUPER
|
KeyModifiers
:
:
ALT
)
}
fn
len_of_first_n_chars
(
text
:
&
str
n
:
usize
)
-
>
usize
{
match
text
.
char_indices
(
)
.
take
(
n
)
.
last
(
)
{
Some
(
(
index
ch
)
)
=
>
index
+
ch
.
len_utf8
(
)
None
=
>
0
}
}
fn
len_of_first_n_code_units
(
text
:
&
str
n
:
usize
)
-
>
usize
{
let
mut
utf8_len
=
0
;
let
mut
utf16_len
=
0
;
for
c
in
text
.
chars
(
)
{
utf16_len
+
=
c
.
len_utf16
(
)
;
if
utf16_len
>
n
{
break
;
}
utf8_len
+
=
c
.
len_utf8
(
)
;
}
utf8_len
}
impl
<
T
:
ClipboardProvider
>
TextInput
<
T
>
{
pub
fn
new
(
lines
:
Lines
initial
:
DOMString
clipboard_provider
:
T
max_length
:
Option
<
usize
>
min_length
:
Option
<
usize
>
selection_direction
:
SelectionDirection
)
-
>
TextInput
<
T
>
{
let
mut
i
=
TextInput
{
lines
:
vec
!
(
)
edit_point
:
Default
:
:
default
(
)
selection_begin
:
None
multiline
:
lines
=
=
Lines
:
:
Multiple
clipboard_provider
:
clipboard_provider
max_length
:
max_length
min_length
:
min_length
selection_direction
:
selection_direction
}
;
i
.
set_content
(
initial
)
;
i
}
pub
fn
delete_char
(
&
mut
self
dir
:
Direction
)
{
if
self
.
selection_begin
.
is_none
(
)
|
|
self
.
selection_begin
=
=
Some
(
self
.
edit_point
)
{
self
.
adjust_horizontal_by_one
(
dir
Selection
:
:
Selected
)
;
}
self
.
replace_selection
(
DOMString
:
:
new
(
)
)
;
}
pub
fn
insert_char
(
&
mut
self
ch
:
char
)
{
self
.
insert_string
(
ch
.
to_string
(
)
)
;
}
pub
fn
insert_string
<
S
:
Into
<
String
>
>
(
&
mut
self
s
:
S
)
{
if
self
.
selection_begin
.
is_none
(
)
{
self
.
selection_begin
=
Some
(
self
.
edit_point
)
;
}
self
.
replace_selection
(
DOMString
:
:
from
(
s
.
into
(
)
)
)
;
}
pub
fn
get_sorted_selection
(
&
self
)
-
>
Option
<
(
TextPoint
TextPoint
)
>
{
self
.
selection_begin
.
map
(
|
begin
|
{
let
end
=
self
.
edit_point
;
if
begin
.
line
<
end
.
line
|
|
(
begin
.
line
=
=
end
.
line
&
&
begin
.
index
<
end
.
index
)
{
(
begin
end
)
}
else
{
(
end
begin
)
}
}
)
}
fn
assert_ok_selection
(
&
self
)
{
if
let
Some
(
begin
)
=
self
.
selection_begin
{
debug_assert
!
(
begin
.
line
<
self
.
lines
.
len
(
)
)
;
debug_assert
!
(
begin
.
index
<
=
self
.
lines
[
begin
.
line
]
.
len
(
)
)
;
}
debug_assert
!
(
self
.
edit_point
.
line
<
self
.
lines
.
len
(
)
)
;
debug_assert
!
(
self
.
edit_point
.
index
<
=
self
.
lines
[
self
.
edit_point
.
line
]
.
len
(
)
)
;
}
pub
fn
get_absolute_selection_range
(
&
self
)
-
>
Range
<
usize
>
{
match
self
.
get_sorted_selection
(
)
{
Some
(
(
begin
end
)
)
=
>
self
.
get_absolute_point_for_text_point
(
&
begin
)
.
.
self
.
get_absolute_point_for_text_point
(
&
end
)
None
=
>
{
let
insertion_point
=
self
.
get_absolute_insertion_point
(
)
;
insertion_point
.
.
insertion_point
}
}
}
pub
fn
get_selection_text
(
&
self
)
-
>
Option
<
String
>
{
let
text
=
self
.
fold_selection_slices
(
String
:
:
new
(
)
|
s
slice
|
s
.
push_str
(
slice
)
)
;
if
text
.
is_empty
(
)
{
return
None
}
Some
(
text
)
}
fn
selection_utf16_len
(
&
self
)
-
>
usize
{
self
.
fold_selection_slices
(
0usize
|
len
slice
|
*
len
+
=
slice
.
chars
(
)
.
map
(
char
:
:
len_utf16
)
.
sum
:
:
<
usize
>
(
)
)
}
fn
fold_selection_slices
<
B
F
:
FnMut
(
&
mut
B
&
str
)
>
(
&
self
mut
acc
:
B
mut
f
:
F
)
-
>
B
{
match
self
.
get_sorted_selection
(
)
{
Some
(
(
begin
end
)
)
if
begin
.
line
=
=
end
.
line
=
>
{
f
(
&
mut
acc
&
self
.
lines
[
begin
.
line
]
[
begin
.
index
.
.
end
.
index
]
)
}
Some
(
(
begin
end
)
)
=
>
{
f
(
&
mut
acc
&
self
.
lines
[
begin
.
line
]
[
begin
.
index
.
.
]
)
;
for
line
in
&
self
.
lines
[
begin
.
line
+
1
.
.
end
.
line
]
{
f
(
&
mut
acc
"
\
n
"
)
;
f
(
&
mut
acc
line
)
;
}
f
(
&
mut
acc
"
\
n
"
)
;
f
(
&
mut
acc
&
self
.
lines
[
end
.
line
]
[
.
.
end
.
index
]
)
}
None
=
>
{
}
}
acc
}
pub
fn
replace_selection
(
&
mut
self
insert
:
DOMString
)
{
if
let
Some
(
(
begin
end
)
)
=
self
.
get_sorted_selection
(
)
{
let
allowed_to_insert_count
=
if
let
Some
(
max_length
)
=
self
.
max_length
{
let
len_after_selection_replaced
=
self
.
utf16_len
(
)
-
self
.
selection_utf16_len
(
)
;
if
len_after_selection_replaced
>
=
max_length
{
return
}
max_length
-
len_after_selection_replaced
}
else
{
usize
:
:
MAX
}
;
let
last_char_index
=
len_of_first_n_code_units
(
&
*
insert
allowed_to_insert_count
)
;
let
chars_to_insert
=
&
insert
[
.
.
last_char_index
]
;
self
.
clear_selection
(
)
;
let
new_lines
=
{
let
prefix
=
&
self
.
lines
[
begin
.
line
]
[
.
.
begin
.
index
]
;
let
suffix
=
&
self
.
lines
[
end
.
line
]
[
end
.
index
.
.
]
;
let
lines_prefix
=
&
self
.
lines
[
.
.
begin
.
line
]
;
let
lines_suffix
=
&
self
.
lines
[
end
.
line
+
1
.
.
]
;
let
mut
insert_lines
=
if
self
.
multiline
{
chars_to_insert
.
split
(
'
\
n
'
)
.
map
(
|
s
|
DOMString
:
:
from
(
s
)
)
.
collect
(
)
}
else
{
vec
!
(
DOMString
:
:
from
(
chars_to_insert
)
)
}
;
let
mut
new_line
=
prefix
.
to_owned
(
)
;
new_line
.
push_str
(
&
insert_lines
[
0
]
)
;
insert_lines
[
0
]
=
DOMString
:
:
from
(
new_line
)
;
let
last_insert_lines_index
=
insert_lines
.
len
(
)
-
1
;
self
.
edit_point
.
index
=
insert_lines
[
last_insert_lines_index
]
.
len
(
)
;
self
.
edit_point
.
line
=
begin
.
line
+
last_insert_lines_index
;
insert_lines
[
last_insert_lines_index
]
.
push_str
(
suffix
)
;
let
mut
new_lines
=
vec
!
(
)
;
new_lines
.
extend_from_slice
(
lines_prefix
)
;
new_lines
.
extend_from_slice
(
&
insert_lines
)
;
new_lines
.
extend_from_slice
(
lines_suffix
)
;
new_lines
}
;
self
.
lines
=
new_lines
;
}
self
.
assert_ok_selection
(
)
;
}
pub
fn
current_line_length
(
&
self
)
-
>
usize
{
self
.
lines
[
self
.
edit_point
.
line
]
.
len
(
)
}
pub
fn
adjust_vertical
(
&
mut
self
adjust
:
isize
select
:
Selection
)
{
if
!
self
.
multiline
{
return
;
}
if
select
=
=
Selection
:
:
Selected
{
if
self
.
selection_begin
.
is_none
(
)
{
self
.
selection_begin
=
Some
(
self
.
edit_point
)
;
}
}
else
{
self
.
clear_selection
(
)
;
}
assert
!
(
self
.
edit_point
.
line
<
self
.
lines
.
len
(
)
)
;
let
target_line
:
isize
=
self
.
edit_point
.
line
as
isize
+
adjust
;
if
target_line
<
0
{
self
.
edit_point
.
index
=
0
;
self
.
edit_point
.
line
=
0
;
return
;
}
else
if
target_line
as
usize
>
=
self
.
lines
.
len
(
)
{
self
.
edit_point
.
line
=
self
.
lines
.
len
(
)
-
1
;
self
.
edit_point
.
index
=
self
.
current_line_length
(
)
;
return
;
}
let
col
=
self
.
lines
[
self
.
edit_point
.
line
]
[
.
.
self
.
edit_point
.
index
]
.
chars
(
)
.
count
(
)
;
self
.
edit_point
.
line
=
target_line
as
usize
;
self
.
edit_point
.
index
=
len_of_first_n_chars
(
&
self
.
lines
[
self
.
edit_point
.
line
]
col
)
;
self
.
assert_ok_selection
(
)
;
}
pub
fn
adjust_horizontal
(
&
mut
self
adjust
:
isize
select
:
Selection
)
{
let
direction
=
if
adjust
>
=
0
{
Direction
:
:
Forward
}
else
{
Direction
:
:
Backward
}
;
if
self
.
adjust_selection_for_horizontal_change
(
direction
select
)
{
return
}
self
.
perform_horizontal_adjustment
(
adjust
select
)
;
}
pub
fn
adjust_horizontal_by_one
(
&
mut
self
direction
:
Direction
select
:
Selection
)
{
if
self
.
adjust_selection_for_horizontal_change
(
direction
select
)
{
return
}
let
adjust
=
{
let
current_line
=
&
self
.
lines
[
self
.
edit_point
.
line
]
;
match
direction
{
Direction
:
:
Forward
=
>
{
match
current_line
[
self
.
edit_point
.
index
.
.
]
.
graphemes
(
true
)
.
next
(
)
{
Some
(
c
)
=
>
c
.
len
(
)
as
isize
None
=
>
1
}
}
Direction
:
:
Backward
=
>
{
match
current_line
[
.
.
self
.
edit_point
.
index
]
.
graphemes
(
true
)
.
next_back
(
)
{
Some
(
c
)
=
>
-
(
c
.
len
(
)
as
isize
)
None
=
>
-
1
}
}
}
}
;
self
.
perform_horizontal_adjustment
(
adjust
select
)
;
}
fn
adjust_selection_for_horizontal_change
(
&
mut
self
adjust
:
Direction
select
:
Selection
)
-
>
bool
{
if
select
=
=
Selection
:
:
Selected
{
if
self
.
selection_begin
.
is_none
(
)
{
self
.
selection_begin
=
Some
(
self
.
edit_point
)
;
}
}
else
{
if
let
Some
(
(
begin
end
)
)
=
self
.
get_sorted_selection
(
)
{
self
.
edit_point
=
match
adjust
{
Direction
:
:
Backward
=
>
begin
Direction
:
:
Forward
=
>
end
}
;
self
.
clear_selection
(
)
;
return
true
}
}
false
}
fn
perform_horizontal_adjustment
(
&
mut
self
adjust
:
isize
select
:
Selection
)
{
if
adjust
<
0
{
let
remaining
=
self
.
edit_point
.
index
;
if
adjust
.
abs
(
)
as
usize
>
remaining
&
&
self
.
edit_point
.
line
>
0
{
self
.
adjust_vertical
(
-
1
select
)
;
self
.
edit_point
.
index
=
self
.
current_line_length
(
)
;
self
.
adjust_horizontal
(
adjust
+
remaining
as
isize
+
1
select
)
;
}
else
{
self
.
edit_point
.
index
=
max
(
0
self
.
edit_point
.
index
as
isize
+
adjust
)
as
usize
;
}
}
else
{
let
remaining
=
self
.
current_line_length
(
)
-
self
.
edit_point
.
index
;
if
adjust
as
usize
>
remaining
&
&
self
.
lines
.
len
(
)
>
self
.
edit_point
.
line
+
1
{
self
.
adjust_vertical
(
1
select
)
;
self
.
edit_point
.
index
=
0
;
self
.
adjust_horizontal
(
adjust
-
remaining
as
isize
-
1
select
)
;
}
else
{
self
.
edit_point
.
index
=
min
(
self
.
current_line_length
(
)
self
.
edit_point
.
index
+
adjust
as
usize
)
;
}
}
self
.
assert_ok_selection
(
)
;
}
pub
fn
handle_return
(
&
mut
self
)
-
>
KeyReaction
{
if
!
self
.
multiline
{
KeyReaction
:
:
TriggerDefaultAction
}
else
{
self
.
insert_char
(
'
\
n
'
)
;
KeyReaction
:
:
DispatchInput
}
}
pub
fn
select_all
(
&
mut
self
)
{
self
.
selection_begin
=
Some
(
TextPoint
{
line
:
0
index
:
0
}
)
;
let
last_line
=
self
.
lines
.
len
(
)
-
1
;
self
.
edit_point
.
line
=
last_line
;
self
.
edit_point
.
index
=
self
.
lines
[
last_line
]
.
len
(
)
;
self
.
assert_ok_selection
(
)
;
}
pub
fn
clear_selection
(
&
mut
self
)
{
self
.
selection_begin
=
None
;
}
pub
fn
adjust_horizontal_by_word
(
&
mut
self
direction
:
Direction
select
:
Selection
)
{
if
self
.
adjust_selection_for_horizontal_change
(
direction
select
)
{
return
}
let
shift_increment
:
isize
=
{
let
input
:
&
str
;
match
direction
{
Direction
:
:
Backward
=
>
{
let
remaining
=
self
.
edit_point
.
index
;
let
current_line
=
self
.
edit_point
.
line
;
let
mut
newline_adjustment
=
0
;
if
remaining
=
=
0
&
&
current_line
>
0
{
input
=
&
self
.
lines
[
current_line
-
1
]
;
newline_adjustment
=
1
;
}
else
{
input
=
&
self
.
lines
[
current_line
]
[
.
.
remaining
]
;
}
let
mut
iter
=
input
.
split_word_bounds
(
)
.
rev
(
)
;
let
mut
shift_temp
:
isize
=
0
;
loop
{
match
iter
.
next
(
)
{
None
=
>
break
Some
(
x
)
=
>
{
shift_temp
+
=
-
(
x
.
len
(
)
as
isize
)
;
if
x
.
chars
(
)
.
any
(
|
x
|
x
.
is_alphabetic
(
)
|
|
x
.
is_numeric
(
)
)
{
break
;
}
}
}
}
shift_temp
-
newline_adjustment
}
Direction
:
:
Forward
=
>
{
let
remaining
=
self
.
current_line_length
(
)
-
self
.
edit_point
.
index
;
let
current_line
=
self
.
edit_point
.
line
;
let
mut
newline_adjustment
=
0
;
if
remaining
=
=
0
&
&
self
.
lines
.
len
(
)
>
self
.
edit_point
.
line
+
1
{
input
=
&
self
.
lines
[
current_line
+
1
]
;
newline_adjustment
=
1
;
}
else
{
input
=
&
self
.
lines
[
current_line
]
[
self
.
edit_point
.
index
.
.
]
;
}
let
mut
iter
=
input
.
split_word_bounds
(
)
;
let
mut
shift_temp
:
isize
=
0
;
loop
{
match
iter
.
next
(
)
{
None
=
>
break
Some
(
x
)
=
>
{
shift_temp
+
=
x
.
len
(
)
as
isize
;
if
x
.
chars
(
)
.
any
(
|
x
|
x
.
is_alphabetic
(
)
|
|
x
.
is_numeric
(
)
)
{
break
;
}
}
}
}
shift_temp
+
newline_adjustment
}
}
}
;
self
.
adjust_horizontal
(
shift_increment
select
)
;
}
pub
fn
adjust_horizontal_to_line_end
(
&
mut
self
direction
:
Direction
select
:
Selection
)
{
if
self
.
adjust_selection_for_horizontal_change
(
direction
select
)
{
return
}
let
shift
:
isize
=
{
let
current_line
=
&
self
.
lines
[
self
.
edit_point
.
line
]
;
match
direction
{
Direction
:
:
Backward
=
>
{
-
(
current_line
[
.
.
self
.
edit_point
.
index
]
.
len
(
)
as
isize
)
}
Direction
:
:
Forward
=
>
{
current_line
[
self
.
edit_point
.
index
.
.
]
.
len
(
)
as
isize
}
}
}
;
self
.
perform_horizontal_adjustment
(
shift
select
)
;
}
pub
fn
adjust_horizontal_to_limit
(
&
mut
self
direction
:
Direction
select
:
Selection
)
{
if
self
.
adjust_selection_for_horizontal_change
(
direction
select
)
{
return
}
match
direction
{
Direction
:
:
Backward
=
>
{
self
.
edit_point
.
line
=
0
;
self
.
edit_point
.
index
=
0
;
}
Direction
:
:
Forward
=
>
{
self
.
edit_point
.
line
=
&
self
.
lines
.
len
(
)
-
1
;
self
.
edit_point
.
index
=
(
&
self
.
lines
[
&
self
.
lines
.
len
(
)
-
1
]
)
.
len
(
)
;
}
}
}
pub
fn
handle_keydown
(
&
mut
self
event
:
&
KeyboardEvent
)
-
>
KeyReaction
{
if
let
Some
(
key
)
=
event
.
get_key
(
)
{
self
.
handle_keydown_aux
(
event
.
printable
(
)
key
event
.
get_key_modifiers
(
)
)
}
else
{
KeyReaction
:
:
Nothing
}
}
pub
fn
handle_keydown_aux
(
&
mut
self
printable
:
Option
<
char
>
key
:
Key
mods
:
KeyModifiers
)
-
>
KeyReaction
{
let
maybe_select
=
if
mods
.
contains
(
KeyModifiers
:
:
SHIFT
)
{
Selection
:
:
Selected
}
else
{
Selection
:
:
NotSelected
}
;
match
(
printable
key
)
{
(
_
Key
:
:
B
)
if
mods
.
contains
(
KeyModifiers
:
:
CONTROL
|
KeyModifiers
:
:
ALT
)
=
>
{
self
.
adjust_horizontal_by_word
(
Direction
:
:
Backward
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
(
_
Key
:
:
F
)
if
mods
.
contains
(
KeyModifiers
:
:
CONTROL
|
KeyModifiers
:
:
ALT
)
=
>
{
self
.
adjust_horizontal_by_word
(
Direction
:
:
Forward
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
(
_
Key
:
:
A
)
if
mods
.
contains
(
KeyModifiers
:
:
CONTROL
|
KeyModifiers
:
:
ALT
)
=
>
{
self
.
adjust_horizontal_to_line_end
(
Direction
:
:
Backward
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
(
_
Key
:
:
E
)
if
mods
.
contains
(
KeyModifiers
:
:
CONTROL
|
KeyModifiers
:
:
ALT
)
=
>
{
self
.
adjust_horizontal_to_line_end
(
Direction
:
:
Forward
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
#
[
cfg
(
target_os
=
"
macos
"
)
]
(
None
Key
:
:
A
)
if
mods
=
=
KeyModifiers
:
:
CONTROL
=
>
{
self
.
adjust_horizontal_to_line_end
(
Direction
:
:
Backward
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
#
[
cfg
(
target_os
=
"
macos
"
)
]
(
None
Key
:
:
E
)
if
mods
=
=
KeyModifiers
:
:
CONTROL
=
>
{
self
.
adjust_horizontal_to_line_end
(
Direction
:
:
Forward
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
(
_
Key
:
:
A
)
if
is_control_key
(
mods
)
=
>
{
self
.
select_all
(
)
;
KeyReaction
:
:
RedrawSelection
}
(
_
Key
:
:
C
)
if
is_control_key
(
mods
)
=
>
{
if
let
Some
(
text
)
=
self
.
get_selection_text
(
)
{
self
.
clipboard_provider
.
set_clipboard_contents
(
text
)
;
}
KeyReaction
:
:
DispatchInput
}
(
_
Key
:
:
V
)
if
is_control_key
(
mods
)
=
>
{
let
contents
=
self
.
clipboard_provider
.
clipboard_contents
(
)
;
self
.
insert_string
(
contents
)
;
KeyReaction
:
:
DispatchInput
}
(
Some
(
c
)
_
)
=
>
{
self
.
insert_char
(
c
)
;
KeyReaction
:
:
DispatchInput
}
(
None
Key
:
:
Delete
)
=
>
{
self
.
delete_char
(
Direction
:
:
Forward
)
;
KeyReaction
:
:
DispatchInput
}
(
None
Key
:
:
Backspace
)
=
>
{
self
.
delete_char
(
Direction
:
:
Backward
)
;
KeyReaction
:
:
DispatchInput
}
#
[
cfg
(
target_os
=
"
macos
"
)
]
(
None
Key
:
:
Left
)
if
mods
.
contains
(
KeyModifiers
:
:
SUPER
)
=
>
{
self
.
adjust_horizontal_to_line_end
(
Direction
:
:
Backward
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
#
[
cfg
(
target_os
=
"
macos
"
)
]
(
None
Key
:
:
Right
)
if
mods
.
contains
(
KeyModifiers
:
:
SUPER
)
=
>
{
self
.
adjust_horizontal_to_line_end
(
Direction
:
:
Forward
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
#
[
cfg
(
target_os
=
"
macos
"
)
]
(
None
Key
:
:
Up
)
if
mods
.
contains
(
KeyModifiers
:
:
SUPER
)
=
>
{
self
.
adjust_horizontal_to_limit
(
Direction
:
:
Backward
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
#
[
cfg
(
target_os
=
"
macos
"
)
]
(
None
Key
:
:
Down
)
if
mods
.
contains
(
KeyModifiers
:
:
SUPER
)
=
>
{
self
.
adjust_horizontal_to_limit
(
Direction
:
:
Forward
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
(
None
Key
:
:
Left
)
if
mods
.
contains
(
KeyModifiers
:
:
ALT
)
=
>
{
self
.
adjust_horizontal_by_word
(
Direction
:
:
Backward
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
(
None
Key
:
:
Right
)
if
mods
.
contains
(
KeyModifiers
:
:
ALT
)
=
>
{
self
.
adjust_horizontal_by_word
(
Direction
:
:
Forward
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
(
None
Key
:
:
Left
)
=
>
{
self
.
adjust_horizontal_by_one
(
Direction
:
:
Backward
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
(
None
Key
:
:
Right
)
=
>
{
self
.
adjust_horizontal_by_one
(
Direction
:
:
Forward
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
(
None
Key
:
:
Up
)
=
>
{
self
.
adjust_vertical
(
-
1
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
(
None
Key
:
:
Down
)
=
>
{
self
.
adjust_vertical
(
1
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
(
None
Key
:
:
Enter
)
|
(
None
Key
:
:
KpEnter
)
=
>
self
.
handle_return
(
)
(
None
Key
:
:
Home
)
=
>
{
#
[
cfg
(
not
(
target_os
=
"
macos
"
)
)
]
{
self
.
edit_point
.
index
=
0
;
}
KeyReaction
:
:
RedrawSelection
}
(
None
Key
:
:
End
)
=
>
{
#
[
cfg
(
not
(
target_os
=
"
macos
"
)
)
]
{
self
.
edit_point
.
index
=
self
.
current_line_length
(
)
;
self
.
assert_ok_selection
(
)
;
}
KeyReaction
:
:
RedrawSelection
}
(
None
Key
:
:
PageUp
)
=
>
{
self
.
adjust_vertical
(
-
28
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
(
None
Key
:
:
PageDown
)
=
>
{
self
.
adjust_vertical
(
28
maybe_select
)
;
KeyReaction
:
:
RedrawSelection
}
_
=
>
KeyReaction
:
:
Nothing
}
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
lines
.
len
(
)
<
=
1
&
&
self
.
lines
.
get
(
0
)
.
map_or
(
true
|
line
|
line
.
is_empty
(
)
)
}
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
lines
.
iter
(
)
.
fold
(
0
|
m
l
|
{
m
+
l
.
len
(
)
+
1
}
)
-
1
}
pub
fn
utf16_len
(
&
self
)
-
>
usize
{
self
.
lines
.
iter
(
)
.
fold
(
0
|
m
l
|
{
m
+
l
.
chars
(
)
.
map
(
char
:
:
len_utf16
)
.
sum
:
:
<
usize
>
(
)
+
1
}
)
-
1
}
pub
fn
char_count
(
&
self
)
-
>
usize
{
self
.
lines
.
iter
(
)
.
fold
(
0
|
m
l
|
{
m
+
l
.
chars
(
)
.
count
(
)
+
1
}
)
-
1
}
pub
fn
get_content
(
&
self
)
-
>
DOMString
{
let
mut
content
=
"
"
.
to_owned
(
)
;
for
(
i
line
)
in
self
.
lines
.
iter
(
)
.
enumerate
(
)
{
content
.
push_str
(
&
line
)
;
if
i
<
self
.
lines
.
len
(
)
-
1
{
content
.
push
(
'
\
n
'
)
;
}
}
DOMString
:
:
from
(
content
)
}
pub
fn
single_line_content
(
&
self
)
-
>
&
DOMString
{
assert
!
(
!
self
.
multiline
)
;
&
self
.
lines
[
0
]
}
pub
fn
single_line_content_mut
(
&
mut
self
)
-
>
&
mut
DOMString
{
assert
!
(
!
self
.
multiline
)
;
&
mut
self
.
lines
[
0
]
}
pub
fn
set_content
(
&
mut
self
content
:
DOMString
)
{
self
.
lines
=
if
self
.
multiline
{
content
.
replace
(
"
\
r
\
n
"
"
\
n
"
)
.
split
(
|
c
|
c
=
=
'
\
n
'
|
|
c
=
=
'
\
r
'
)
.
map
(
DOMString
:
:
from
)
.
collect
(
)
}
else
{
vec
!
(
content
)
}
;
self
.
edit_point
.
line
=
min
(
self
.
edit_point
.
line
self
.
lines
.
len
(
)
-
1
)
;
self
.
edit_point
.
index
=
min
(
self
.
edit_point
.
index
self
.
current_line_length
(
)
)
;
self
.
selection_begin
=
None
;
self
.
assert_ok_selection
(
)
;
}
pub
fn
get_absolute_insertion_point
(
&
self
)
-
>
usize
{
self
.
get_absolute_point_for_text_point
(
&
self
.
edit_point
)
}
pub
fn
get_absolute_point_for_text_point
(
&
self
text_point
:
&
TextPoint
)
-
>
usize
{
self
.
lines
.
iter
(
)
.
enumerate
(
)
.
fold
(
0
|
acc
(
i
val
)
|
{
if
i
<
text_point
.
line
{
acc
+
val
.
len
(
)
+
1
}
else
{
acc
}
}
)
+
text_point
.
index
}
pub
fn
get_text_point_for_absolute_point
(
&
self
abs_point
:
usize
)
-
>
TextPoint
{
let
mut
index
=
abs_point
;
let
mut
line
=
0
;
let
last_line_idx
=
self
.
lines
.
len
(
)
-
1
;
self
.
lines
.
iter
(
)
.
enumerate
(
)
.
fold
(
0
|
acc
(
i
val
)
|
{
if
i
!
=
last_line_idx
{
let
line_end
=
max
(
val
.
len
(
)
1
)
;
let
new_acc
=
acc
+
line_end
;
if
abs_point
>
new_acc
&
&
index
>
line_end
{
index
-
=
line_end
+
1
;
line
+
=
1
;
}
new_acc
}
else
{
acc
}
}
)
;
TextPoint
{
line
:
line
index
:
index
}
}
pub
fn
set_selection_range
(
&
mut
self
start
:
u32
end
:
u32
direction
:
SelectionDirection
)
{
let
mut
start
=
start
as
usize
;
let
mut
end
=
end
as
usize
;
let
text_end
=
self
.
get_content
(
)
.
len
(
)
;
if
end
>
text_end
{
end
=
text_end
;
}
if
start
>
end
{
start
=
end
;
}
self
.
selection_direction
=
direction
;
match
direction
{
SelectionDirection
:
:
None
|
SelectionDirection
:
:
Forward
=
>
{
self
.
selection_begin
=
Some
(
self
.
get_text_point_for_absolute_point
(
start
)
)
;
self
.
edit_point
=
self
.
get_text_point_for_absolute_point
(
end
)
;
}
SelectionDirection
:
:
Backward
=
>
{
self
.
selection_begin
=
Some
(
self
.
get_text_point_for_absolute_point
(
end
)
)
;
self
.
edit_point
=
self
.
get_text_point_for_absolute_point
(
start
)
;
}
}
self
.
assert_ok_selection
(
)
;
}
pub
fn
get_selection_start
(
&
self
)
-
>
u32
{
let
selection_start
=
match
self
.
selection_begin
{
Some
(
selection_begin_point
)
=
>
{
self
.
get_absolute_point_for_text_point
(
&
selection_begin_point
)
}
None
=
>
self
.
get_absolute_insertion_point
(
)
}
;
selection_start
as
u32
}
pub
fn
set_edit_point_index
(
&
mut
self
index
:
usize
)
{
let
byte_size
=
self
.
lines
[
self
.
edit_point
.
line
]
.
graphemes
(
true
)
.
take
(
index
)
.
fold
(
0
|
acc
x
|
acc
+
x
.
len
(
)
)
;
self
.
edit_point
.
index
=
byte_size
;
}
}
