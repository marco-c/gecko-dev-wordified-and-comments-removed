#
!
[
allow
(
dead_code
)
]
use
dom
:
:
bindings
:
:
cell
:
:
DOMRefCell
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
BeforeUnloadEventBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
BeforeUnloadEventBinding
:
:
BeforeUnloadEventMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
EventBinding
:
:
EventMethods
;
use
dom
:
:
bindings
:
:
inheritance
:
:
Castable
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
reflector
:
:
reflect_dom_object
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
event
:
:
{
Event
EventBubbles
EventCancelable
}
;
use
dom
:
:
window
:
:
Window
;
use
dom_struct
:
:
dom_struct
;
use
servo_atoms
:
:
Atom
;
#
[
dom_struct
]
pub
struct
BeforeUnloadEvent
{
event
:
Event
return_value
:
DOMRefCell
<
DOMString
>
}
impl
BeforeUnloadEvent
{
fn
new_inherited
(
)
-
>
BeforeUnloadEvent
{
BeforeUnloadEvent
{
event
:
Event
:
:
new_inherited
(
)
return_value
:
DOMRefCell
:
:
new
(
DOMString
:
:
new
(
)
)
}
}
pub
fn
new_uninitialized
(
window
:
&
Window
)
-
>
Root
<
BeforeUnloadEvent
>
{
reflect_dom_object
(
box
BeforeUnloadEvent
:
:
new_inherited
(
)
window
BeforeUnloadEventBinding
:
:
Wrap
)
}
pub
fn
new
(
window
:
&
Window
type_
:
Atom
bubbles
:
EventBubbles
cancelable
:
EventCancelable
)
-
>
Root
<
BeforeUnloadEvent
>
{
let
ev
=
BeforeUnloadEvent
:
:
new_uninitialized
(
window
)
;
{
let
event
=
ev
.
upcast
:
:
<
Event
>
(
)
;
event
.
init_event
(
type_
bool
:
:
from
(
bubbles
)
bool
:
:
from
(
cancelable
)
)
;
}
ev
}
}
impl
BeforeUnloadEventMethods
for
BeforeUnloadEvent
{
fn
ReturnValue
(
&
self
)
-
>
DOMString
{
self
.
return_value
.
borrow
(
)
.
clone
(
)
}
fn
SetReturnValue
(
&
self
value
:
DOMString
)
{
*
self
.
return_value
.
borrow_mut
(
)
=
value
;
}
fn
IsTrusted
(
&
self
)
-
>
bool
{
self
.
event
.
IsTrusted
(
)
}
}
