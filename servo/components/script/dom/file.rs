use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
FileBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
FileBinding
:
:
FileMethods
;
use
dom
:
:
bindings
:
:
global
:
:
GlobalRef
;
use
dom
:
:
bindings
:
:
js
:
:
{
JSRef
Temporary
}
;
use
dom
:
:
bindings
:
:
utils
:
:
reflect_dom_object
;
use
dom
:
:
blob
:
:
{
Blob
BlobTypeId
}
;
use
util
:
:
str
:
:
DOMString
;
#
[
dom_struct
]
pub
struct
File
{
blob
:
Blob
name
:
DOMString
}
impl
File
{
fn
new_inherited
(
global
:
GlobalRef
type_
:
BlobTypeId
_file_bits
:
JSRef
<
Blob
>
name
:
DOMString
)
-
>
File
{
File
{
blob
:
Blob
:
:
new_inherited
(
global
type_
None
"
"
)
name
:
name
}
}
pub
fn
new
(
global
:
GlobalRef
file_bits
:
JSRef
<
Blob
>
name
:
DOMString
)
-
>
Temporary
<
File
>
{
reflect_dom_object
(
box
File
:
:
new_inherited
(
global
BlobTypeId
:
:
File
file_bits
name
)
global
FileBinding
:
:
Wrap
)
}
pub
fn
name
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
DOMString
{
&
self
.
name
}
}
impl
<
'
a
>
FileMethods
for
JSRef
<
'
a
File
>
{
fn
Name
(
self
)
-
>
DOMString
{
self
.
name
.
clone
(
)
}
}
