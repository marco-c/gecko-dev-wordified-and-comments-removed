use
document_loader
:
:
DocumentLoader
;
use
dom
:
:
attr
:
:
{
Attr
AttrHelpers
}
;
use
dom
:
:
bindings
:
:
cell
:
:
DOMRefCell
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
AttrBinding
:
:
AttrMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
CharacterDataBinding
:
:
CharacterDataMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
DocumentBinding
:
:
DocumentMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
ElementBinding
:
:
ElementMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
NamedNodeMapBinding
:
:
NamedNodeMapMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
NodeBinding
:
:
{
NodeConstants
NodeMethods
}
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
NodeListBinding
:
:
NodeListMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
ProcessingInstructionBinding
:
:
ProcessingInstructionMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
{
CharacterDataCast
DocumentCast
DocumentDerived
DocumentTypeCast
}
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
{
ElementCast
NodeCast
ElementDerived
EventTargetCast
}
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
{
HTMLLegendElementDerived
HTMLFieldSetElementDerived
}
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
{
HTMLOptGroupElementDerived
NodeBase
NodeDerived
}
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
{
ProcessingInstructionCast
TextCast
TextDerived
}
;
use
dom
:
:
bindings
:
:
codegen
:
:
UnionTypes
:
:
NodeOrString
;
use
dom
:
:
bindings
:
:
conversions
;
use
dom
:
:
bindings
:
:
error
:
:
{
ErrorResult
Fallible
}
;
use
dom
:
:
bindings
:
:
error
:
:
Error
:
:
{
NotFound
HierarchyRequest
Syntax
}
;
use
dom
:
:
bindings
:
:
global
:
:
GlobalRef
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
LayoutJS
MutNullableHeap
}
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
js
:
:
RootedReference
;
use
dom
:
:
bindings
:
:
trace
:
:
JSTraceable
;
use
dom
:
:
bindings
:
:
trace
:
:
RootedVec
;
use
dom
:
:
bindings
:
:
utils
:
:
{
namespace_from_domstring
Reflectable
reflect_dom_object
}
;
use
dom
:
:
characterdata
:
:
{
CharacterData
CharacterDataHelpers
CharacterDataTypeId
}
;
use
dom
:
:
comment
:
:
Comment
;
use
dom
:
:
document
:
:
{
Document
DocumentHelpers
IsHTMLDocument
DocumentSource
}
;
use
dom
:
:
documentfragment
:
:
DocumentFragment
;
use
dom
:
:
documenttype
:
:
DocumentType
;
use
dom
:
:
element
:
:
{
AttributeHandlers
Element
ElementCreator
ElementTypeId
}
;
use
dom
:
:
element
:
:
ElementHelpers
;
use
dom
:
:
eventtarget
:
:
{
EventTarget
EventTargetTypeId
}
;
use
dom
:
:
htmlelement
:
:
HTMLElementTypeId
;
use
dom
:
:
nodelist
:
:
NodeList
;
use
dom
:
:
processinginstruction
:
:
{
ProcessingInstruction
ProcessingInstructionHelpers
}
;
use
dom
:
:
text
:
:
Text
;
use
dom
:
:
virtualmethods
:
:
{
VirtualMethods
vtable_for
}
;
use
dom
:
:
window
:
:
{
Window
WindowHelpers
}
;
use
euclid
:
:
rect
:
:
Rect
;
use
layout_interface
:
:
{
LayoutChan
Msg
}
;
use
devtools_traits
:
:
NodeInfo
;
use
parse
:
:
html
:
:
parse_html_fragment
;
use
script_traits
:
:
UntrustedNodeAddress
;
use
util
:
:
geometry
:
:
Au
;
use
util
:
:
str
:
:
DOMString
;
use
util
:
:
task_state
;
use
selectors
:
:
parser
:
:
Selector
;
use
selectors
:
:
parser
:
:
parse_author_origin_selector_list_from_str
;
use
selectors
:
:
matching
:
:
matches
;
use
style
:
:
properties
:
:
ComputedValues
;
use
js
:
:
jsapi
:
:
{
JSContext
JSObject
JSRuntime
}
;
use
core
:
:
nonzero
:
:
NonZero
;
use
libc
;
use
libc
:
:
{
uintptr_t
c_void
}
;
use
std
:
:
borrow
:
:
ToOwned
;
use
std
:
:
cell
:
:
{
Cell
RefCell
Ref
RefMut
}
;
use
std
:
:
default
:
:
Default
;
use
std
:
:
iter
:
:
{
FilterMap
Peekable
}
;
use
std
:
:
mem
;
use
std
:
:
sync
:
:
Arc
;
use
uuid
;
use
string_cache
:
:
{
Atom
Namespace
QualName
}
;
#
[
dom_struct
]
pub
struct
Node
{
eventtarget
:
EventTarget
type_id
:
NodeTypeId
parent_node
:
MutNullableHeap
<
JS
<
Node
>
>
first_child
:
MutNullableHeap
<
JS
<
Node
>
>
last_child
:
MutNullableHeap
<
JS
<
Node
>
>
next_sibling
:
MutNullableHeap
<
JS
<
Node
>
>
prev_sibling
:
MutNullableHeap
<
JS
<
Node
>
>
owner_doc
:
MutNullableHeap
<
JS
<
Document
>
>
child_list
:
MutNullableHeap
<
JS
<
NodeList
>
>
flags
:
Cell
<
NodeFlags
>
layout_data
:
LayoutDataRef
unique_id
:
DOMRefCell
<
String
>
}
impl
PartialEq
for
Node
{
fn
eq
(
&
self
other
:
&
Node
)
-
>
bool
{
self
as
*
const
Node
=
=
&
*
other
}
}
impl
NodeDerived
for
EventTarget
{
fn
is_node
(
&
self
)
-
>
bool
{
match
*
self
.
type_id
(
)
{
EventTargetTypeId
:
:
Node
(
_
)
=
>
true
_
=
>
false
}
}
}
bitflags
!
{
#
[
doc
=
"
Flags
for
node
items
.
"
]
#
[
derive
(
JSTraceable
)
]
flags
NodeFlags
:
u16
{
#
[
doc
=
"
Specifies
whether
this
node
is
in
a
document
.
"
]
const
IS_IN_DOC
=
0x01
#
[
doc
=
"
Specifies
whether
this
node
is
in
hover
state
.
"
]
const
IN_HOVER_STATE
=
0x02
#
[
doc
=
"
Specifies
whether
this
node
is
in
disabled
state
.
"
]
const
IN_DISABLED_STATE
=
0x04
#
[
doc
=
"
Specifies
whether
this
node
is
in
enabled
state
.
"
]
const
IN_ENABLED_STATE
=
0x08
#
[
doc
=
"
Specifies
whether
this
node
_must_
be
reflowed
regardless
of
style
differences
.
"
]
const
HAS_CHANGED
=
0x10
#
[
doc
=
"
Specifies
whether
this
node
needs
style
recalc
on
next
reflow
.
"
]
const
IS_DIRTY
=
0x20
#
[
doc
=
"
Specifies
whether
this
node
has
siblings
(
inclusive
of
itself
)
which
\
changed
since
the
last
reflow
.
"
]
const
HAS_DIRTY_SIBLINGS
=
0x40
#
[
doc
=
"
Specifies
whether
this
node
has
descendants
(
inclusive
of
itself
)
which
\
have
changed
since
the
last
reflow
.
"
]
const
HAS_DIRTY_DESCENDANTS
=
0x80
/
/
TODO
:
find
a
better
place
to
keep
this
(
#
4105
)
/
/
https
:
/
/
critic
.
hoppipolla
.
co
.
uk
/
showcomment
?
chain
=
8873
/
/
Perhaps
using
a
Set
in
Document
?
#
[
doc
=
"
Specifies
whether
or
not
there
is
an
authentic
click
in
progress
on
\
this
element
.
"
]
const
CLICK_IN_PROGRESS
=
0x100
#
[
doc
=
"
Specifies
whether
this
node
has
the
focus
.
"
]
const
IN_FOCUS_STATE
=
0x200
#
[
doc
=
"
Specifies
whether
this
node
is
focusable
and
whether
it
is
supposed
\
to
be
reachable
with
using
sequential
focus
navigation
.
"
]
const
SEQUENTIALLY_FOCUSABLE
=
0x400
}
}
impl
NodeFlags
{
pub
fn
new
(
type_id
:
NodeTypeId
)
-
>
NodeFlags
{
let
dirty
=
HAS_CHANGED
|
IS_DIRTY
|
HAS_DIRTY_SIBLINGS
|
HAS_DIRTY_DESCENDANTS
;
match
type_id
{
NodeTypeId
:
:
Document
=
>
IS_IN_DOC
|
dirty
NodeTypeId
:
:
Element
(
ElementTypeId
:
:
HTMLElement
(
HTMLElementTypeId
:
:
HTMLButtonElement
)
)
|
NodeTypeId
:
:
Element
(
ElementTypeId
:
:
HTMLElement
(
HTMLElementTypeId
:
:
HTMLInputElement
)
)
|
NodeTypeId
:
:
Element
(
ElementTypeId
:
:
HTMLElement
(
HTMLElementTypeId
:
:
HTMLSelectElement
)
)
|
NodeTypeId
:
:
Element
(
ElementTypeId
:
:
HTMLElement
(
HTMLElementTypeId
:
:
HTMLTextAreaElement
)
)
|
NodeTypeId
:
:
Element
(
ElementTypeId
:
:
HTMLElement
(
HTMLElementTypeId
:
:
HTMLOptGroupElement
)
)
|
NodeTypeId
:
:
Element
(
ElementTypeId
:
:
HTMLElement
(
HTMLElementTypeId
:
:
HTMLOptionElement
)
)
|
NodeTypeId
:
:
Element
(
ElementTypeId
:
:
HTMLElement
(
HTMLElementTypeId
:
:
HTMLFieldSetElement
)
)
=
>
IN_ENABLED_STATE
|
dirty
_
=
>
dirty
}
}
}
impl
Drop
for
Node
{
#
[
allow
(
unsafe_code
)
]
fn
drop
(
&
mut
self
)
{
self
.
layout_data
.
dispose
(
self
)
;
}
}
#
[
derive
(
Copy
Clone
)
]
enum
SuppressObserver
{
Suppressed
Unsuppressed
}
pub
struct
SharedLayoutData
{
pub
style
:
Option
<
Arc
<
ComputedValues
>
>
}
pub
struct
LayoutData
{
_shared_data
:
SharedLayoutData
_data
:
NonZero
<
*
const
(
)
>
}
#
[
allow
(
unsafe_code
)
]
unsafe
impl
Send
for
LayoutData
{
}
pub
struct
LayoutDataRef
{
data_cell
:
RefCell
<
Option
<
LayoutData
>
>
}
no_jsmanaged_fields
!
(
LayoutDataRef
)
;
impl
LayoutDataRef
{
pub
fn
new
(
)
-
>
LayoutDataRef
{
LayoutDataRef
{
data_cell
:
RefCell
:
:
new
(
None
)
}
}
pub
fn
dispose
(
&
self
node
:
&
Node
)
{
debug_assert
!
(
task_state
:
:
get
(
)
.
is_script
(
)
)
;
if
let
Some
(
layout_data
)
=
mem
:
:
replace
(
&
mut
*
self
.
data_cell
.
borrow_mut
(
)
None
)
{
let
win
=
window_from_node
(
node
)
;
let
LayoutChan
(
chan
)
=
win
.
layout_chan
(
)
;
chan
.
send
(
Msg
:
:
ReapLayoutData
(
layout_data
)
)
.
unwrap
(
)
}
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
pub
unsafe
fn
borrow_unchecked
(
&
self
)
-
>
*
const
Option
<
LayoutData
>
{
debug_assert
!
(
task_state
:
:
get
(
)
.
is_layout
(
)
)
;
self
.
data_cell
.
as_unsafe_cell
(
)
.
get
(
)
as
*
const
_
}
#
[
inline
]
pub
fn
borrow
<
'
a
>
(
&
'
a
self
)
-
>
Ref
<
'
a
Option
<
LayoutData
>
>
{
debug_assert
!
(
task_state
:
:
get
(
)
.
is_layout
(
)
)
;
self
.
data_cell
.
borrow
(
)
}
#
[
inline
]
pub
fn
borrow_mut
<
'
a
>
(
&
'
a
self
)
-
>
RefMut
<
'
a
Option
<
LayoutData
>
>
{
debug_assert
!
(
task_state
:
:
get
(
)
.
is_layout
(
)
)
;
self
.
data_cell
.
borrow_mut
(
)
}
}
#
[
derive
(
JSTraceable
Copy
Clone
PartialEq
Debug
)
]
pub
enum
NodeTypeId
{
CharacterData
(
CharacterDataTypeId
)
DocumentType
DocumentFragment
Document
Element
(
ElementTypeId
)
}
trait
PrivateNodeHelpers
{
fn
node_inserted
(
self
)
;
fn
node_removed
(
self
parent_in_doc
:
bool
)
;
fn
add_child
(
self
new_child
:
&
Node
before
:
Option
<
&
Node
>
)
;
fn
remove_child
(
self
child
:
&
Node
)
;
}
impl
<
'
a
>
PrivateNodeHelpers
for
&
'
a
Node
{
fn
node_inserted
(
self
)
{
assert
!
(
self
.
parent_node
.
get
(
)
.
is_some
(
)
)
;
let
document
=
document_from_node
(
self
)
;
let
is_in_doc
=
self
.
is_in_doc
(
)
;
for
node
in
self
.
traverse_preorder
(
)
{
vtable_for
(
&
node
.
r
(
)
)
.
bind_to_tree
(
is_in_doc
)
;
}
let
parent
=
self
.
parent_node
.
get
(
)
.
map
(
Root
:
:
from_rooted
)
;
parent
.
r
(
)
.
map
(
|
parent
|
vtable_for
(
&
parent
)
.
child_inserted
(
self
)
)
;
document
.
r
(
)
.
content_and_heritage_changed
(
self
NodeDamage
:
:
OtherNodeDamage
)
;
}
fn
node_removed
(
self
parent_in_doc
:
bool
)
{
assert
!
(
self
.
parent_node
.
get
(
)
.
is_none
(
)
)
;
for
node
in
self
.
traverse_preorder
(
)
{
node
.
r
(
)
.
set_flag
(
IS_IN_DOC
false
)
;
vtable_for
(
&
node
.
r
(
)
)
.
unbind_from_tree
(
parent_in_doc
)
;
}
self
.
layout_data
.
dispose
(
self
)
;
}
fn
add_child
(
self
new_child
:
&
Node
before
:
Option
<
&
Node
>
)
{
assert
!
(
new_child
.
parent_node
.
get
(
)
.
is_none
(
)
)
;
assert
!
(
new_child
.
prev_sibling
.
get
(
)
.
is_none
(
)
)
;
assert
!
(
new_child
.
next_sibling
.
get
(
)
.
is_none
(
)
)
;
match
before
{
Some
(
ref
before
)
=
>
{
assert
!
(
before
.
parent_node
.
get
(
)
.
map
(
Root
:
:
from_rooted
)
.
r
(
)
=
=
Some
(
self
)
)
;
let
prev_sibling
=
before
.
GetPreviousSibling
(
)
;
match
prev_sibling
{
None
=
>
{
assert
!
(
Some
(
*
before
)
=
=
self
.
first_child
.
get
(
)
.
map
(
Root
:
:
from_rooted
)
.
r
(
)
)
;
self
.
first_child
.
set
(
Some
(
JS
:
:
from_ref
(
new_child
)
)
)
;
}
Some
(
ref
prev_sibling
)
=
>
{
prev_sibling
.
next_sibling
.
set
(
Some
(
JS
:
:
from_ref
(
new_child
)
)
)
;
new_child
.
prev_sibling
.
set
(
Some
(
JS
:
:
from_ref
(
prev_sibling
.
r
(
)
)
)
)
;
}
}
before
.
prev_sibling
.
set
(
Some
(
JS
:
:
from_ref
(
new_child
)
)
)
;
new_child
.
next_sibling
.
set
(
Some
(
JS
:
:
from_ref
(
before
)
)
)
;
}
None
=
>
{
let
last_child
=
self
.
GetLastChild
(
)
;
match
last_child
{
None
=
>
self
.
first_child
.
set
(
Some
(
JS
:
:
from_ref
(
new_child
)
)
)
Some
(
ref
last_child
)
=
>
{
assert
!
(
last_child
.
next_sibling
.
get
(
)
.
is_none
(
)
)
;
last_child
.
r
(
)
.
next_sibling
.
set
(
Some
(
JS
:
:
from_ref
(
new_child
)
)
)
;
new_child
.
prev_sibling
.
set
(
Some
(
JS
:
:
from_rooted
(
&
last_child
)
)
)
;
}
}
self
.
last_child
.
set
(
Some
(
JS
:
:
from_ref
(
new_child
)
)
)
;
}
}
new_child
.
parent_node
.
set
(
Some
(
JS
:
:
from_ref
(
self
)
)
)
;
}
fn
remove_child
(
self
child
:
&
Node
)
{
assert
!
(
child
.
parent_node
.
get
(
)
.
map
(
Root
:
:
from_rooted
)
.
r
(
)
=
=
Some
(
self
)
)
;
let
prev_sibling
=
child
.
GetPreviousSibling
(
)
;
match
prev_sibling
{
None
=
>
{
self
.
first_child
.
set
(
child
.
next_sibling
.
get
(
)
)
;
}
Some
(
ref
prev_sibling
)
=
>
{
prev_sibling
.
next_sibling
.
set
(
child
.
next_sibling
.
get
(
)
)
;
}
}
let
next_sibling
=
child
.
GetNextSibling
(
)
;
match
next_sibling
{
None
=
>
{
self
.
last_child
.
set
(
child
.
prev_sibling
.
get
(
)
)
;
}
Some
(
ref
next_sibling
)
=
>
{
next_sibling
.
prev_sibling
.
set
(
child
.
prev_sibling
.
get
(
)
)
;
}
}
child
.
prev_sibling
.
set
(
None
)
;
child
.
next_sibling
.
set
(
None
)
;
child
.
parent_node
.
set
(
None
)
;
}
}
pub
struct
QuerySelectorIterator
{
selectors
:
Vec
<
Selector
>
iterator
:
TreeIterator
}
impl
<
'
a
>
QuerySelectorIterator
{
#
[
allow
(
unsafe_code
)
]
unsafe
fn
new
(
iter
:
TreeIterator
selectors
:
Vec
<
Selector
>
)
-
>
QuerySelectorIterator
{
QuerySelectorIterator
{
selectors
:
selectors
iterator
:
iter
}
}
}
impl
<
'
a
>
Iterator
for
QuerySelectorIterator
{
type
Item
=
Root
<
Node
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Root
<
Node
>
>
{
let
selectors
=
&
self
.
selectors
;
self
.
iterator
.
find
(
|
node
|
{
if
let
Some
(
element
)
=
ElementCast
:
:
to_ref
(
node
.
r
(
)
)
{
matches
(
selectors
&
element
&
mut
None
)
}
else
{
false
}
}
)
}
}
pub
trait
NodeHelpers
{
fn
ancestors
(
self
)
-
>
AncestorIterator
;
fn
inclusive_ancestors
(
self
)
-
>
AncestorIterator
;
fn
children
(
self
)
-
>
NodeSiblingIterator
;
fn
rev_children
(
self
)
-
>
ReverseSiblingIterator
;
fn
child_elements
(
self
)
-
>
ChildElementIterator
;
fn
following_siblings
(
self
)
-
>
NodeSiblingIterator
;
fn
preceding_siblings
(
self
)
-
>
ReverseSiblingIterator
;
fn
following_nodes
(
self
root
:
&
Node
)
-
>
FollowingNodeIterator
;
fn
preceding_nodes
(
self
root
:
&
Node
)
-
>
PrecedingNodeIterator
;
fn
descending_last_children
(
self
)
-
>
LastChildIterator
;
fn
is_in_doc
(
self
)
-
>
bool
;
fn
is_inclusive_ancestor_of
(
self
parent
:
&
Node
)
-
>
bool
;
fn
is_parent_of
(
self
child
:
&
Node
)
-
>
bool
;
fn
type_id
(
self
)
-
>
NodeTypeId
;
fn
len
(
self
)
-
>
u32
;
fn
index
(
self
)
-
>
u32
;
fn
owner_doc
(
self
)
-
>
Root
<
Document
>
;
fn
set_owner_doc
(
self
document
:
&
Document
)
;
fn
is_in_html_doc
(
self
)
-
>
bool
;
fn
is_doctype
(
self
)
-
>
bool
;
fn
is_anchor_element
(
self
)
-
>
bool
;
fn
get_flag
(
self
flag
:
NodeFlags
)
-
>
bool
;
fn
set_flag
(
self
flag
:
NodeFlags
value
:
bool
)
;
fn
get_hover_state
(
self
)
-
>
bool
;
fn
set_hover_state
(
self
state
:
bool
)
;
fn
get_focus_state
(
self
)
-
>
bool
;
fn
set_focus_state
(
self
state
:
bool
)
;
fn
get_disabled_state
(
self
)
-
>
bool
;
fn
set_disabled_state
(
self
state
:
bool
)
;
fn
get_enabled_state
(
self
)
-
>
bool
;
fn
set_enabled_state
(
self
state
:
bool
)
;
fn
get_has_changed
(
self
)
-
>
bool
;
fn
set_has_changed
(
self
state
:
bool
)
;
fn
get_is_dirty
(
self
)
-
>
bool
;
fn
set_is_dirty
(
self
state
:
bool
)
;
fn
get_has_dirty_siblings
(
self
)
-
>
bool
;
fn
set_has_dirty_siblings
(
self
state
:
bool
)
;
fn
get_has_dirty_descendants
(
self
)
-
>
bool
;
fn
set_has_dirty_descendants
(
self
state
:
bool
)
;
fn
dirty
(
self
damage
:
NodeDamage
)
;
fn
force_dirty_ancestors
(
self
damage
:
NodeDamage
)
;
fn
dirty_impl
(
self
damage
:
NodeDamage
force_ancestors
:
bool
)
;
fn
dump
(
self
)
;
fn
dump_indent
(
self
indent
:
u32
)
;
fn
debug_str
(
self
)
-
>
String
;
fn
traverse_preorder
(
self
)
-
>
TreeIterator
;
fn
inclusively_following_siblings
(
self
)
-
>
NodeSiblingIterator
;
fn
inclusively_preceding_siblings
(
self
)
-
>
ReverseSiblingIterator
;
fn
to_trusted_node_address
(
self
)
-
>
TrustedNodeAddress
;
fn
get_bounding_content_box
(
self
)
-
>
Rect
<
Au
>
;
fn
get_content_boxes
(
self
)
-
>
Vec
<
Rect
<
Au
>
>
;
fn
before
(
self
nodes
:
Vec
<
NodeOrString
>
)
-
>
ErrorResult
;
fn
after
(
self
nodes
:
Vec
<
NodeOrString
>
)
-
>
ErrorResult
;
fn
replace_with
(
self
nodes
:
Vec
<
NodeOrString
>
)
-
>
ErrorResult
;
fn
prepend
(
self
nodes
:
Vec
<
NodeOrString
>
)
-
>
ErrorResult
;
fn
append
(
self
nodes
:
Vec
<
NodeOrString
>
)
-
>
ErrorResult
;
fn
query_selector
(
self
selectors
:
DOMString
)
-
>
Fallible
<
Option
<
Root
<
Element
>
>
>
;
#
[
allow
(
unsafe_code
)
]
unsafe
fn
query_selector_iter
(
self
selectors
:
DOMString
)
-
>
Fallible
<
QuerySelectorIterator
>
;
fn
query_selector_all
(
self
selectors
:
DOMString
)
-
>
Fallible
<
Root
<
NodeList
>
>
;
fn
remove_self
(
self
)
;
fn
get_unique_id
(
self
)
-
>
String
;
fn
summarize
(
self
)
-
>
NodeInfo
;
fn
teardown
(
self
)
;
fn
parse_fragment
(
self
markup
:
DOMString
)
-
>
Fallible
<
Root
<
DocumentFragment
>
>
;
}
impl
<
'
a
>
NodeHelpers
for
&
'
a
Node
{
fn
teardown
(
self
)
{
self
.
layout_data
.
dispose
(
self
)
;
for
kid
in
self
.
children
(
)
{
kid
.
r
(
)
.
teardown
(
)
;
}
}
fn
dump
(
self
)
{
self
.
dump_indent
(
0
)
;
}
fn
dump_indent
(
self
indent
:
u32
)
{
let
mut
s
=
String
:
:
new
(
)
;
for
_
in
0
.
.
indent
{
s
.
push_str
(
"
"
)
;
}
s
.
push_str
(
&
*
self
.
debug_str
(
)
)
;
debug
!
(
"
{
:
?
}
"
s
)
;
for
kid
in
self
.
children
(
)
{
kid
.
r
(
)
.
dump_indent
(
indent
+
1
)
}
}
fn
debug_str
(
self
)
-
>
String
{
format
!
(
"
{
:
?
}
"
self
.
type_id
)
}
fn
is_in_doc
(
self
)
-
>
bool
{
self
.
flags
.
get
(
)
.
contains
(
IS_IN_DOC
)
}
fn
type_id
(
self
)
-
>
NodeTypeId
{
self
.
type_id
}
fn
len
(
self
)
-
>
u32
{
match
self
.
type_id
{
NodeTypeId
:
:
DocumentType
=
>
0
NodeTypeId
:
:
CharacterData
(
_
)
=
>
{
CharacterDataCast
:
:
to_ref
(
self
)
.
unwrap
(
)
.
Length
(
)
}
_
=
>
self
.
children
(
)
.
count
(
)
as
u32
}
}
fn
index
(
self
)
-
>
u32
{
self
.
preceding_siblings
(
)
.
count
(
)
as
u32
}
#
[
inline
]
fn
is_anchor_element
(
self
)
-
>
bool
{
self
.
type_id
=
=
NodeTypeId
:
:
Element
(
ElementTypeId
:
:
HTMLElement
(
HTMLElementTypeId
:
:
HTMLAnchorElement
)
)
}
#
[
inline
]
fn
is_doctype
(
self
)
-
>
bool
{
self
.
type_id
=
=
NodeTypeId
:
:
DocumentType
}
fn
get_flag
(
self
flag
:
NodeFlags
)
-
>
bool
{
self
.
flags
.
get
(
)
.
contains
(
flag
)
}
fn
set_flag
(
self
flag
:
NodeFlags
value
:
bool
)
{
let
mut
flags
=
self
.
flags
.
get
(
)
;
if
value
{
flags
.
insert
(
flag
)
;
}
else
{
flags
.
remove
(
flag
)
;
}
self
.
flags
.
set
(
flags
)
;
}
fn
get_hover_state
(
self
)
-
>
bool
{
self
.
get_flag
(
IN_HOVER_STATE
)
}
fn
set_hover_state
(
self
state
:
bool
)
{
self
.
set_flag
(
IN_HOVER_STATE
state
)
;
self
.
dirty
(
NodeDamage
:
:
NodeStyleDamaged
)
;
}
fn
get_focus_state
(
self
)
-
>
bool
{
self
.
get_flag
(
IN_FOCUS_STATE
)
}
fn
set_focus_state
(
self
state
:
bool
)
{
self
.
set_flag
(
IN_FOCUS_STATE
state
)
;
self
.
dirty
(
NodeDamage
:
:
NodeStyleDamaged
)
;
}
fn
get_disabled_state
(
self
)
-
>
bool
{
self
.
get_flag
(
IN_DISABLED_STATE
)
}
fn
set_disabled_state
(
self
state
:
bool
)
{
self
.
set_flag
(
IN_DISABLED_STATE
state
)
}
fn
get_enabled_state
(
self
)
-
>
bool
{
self
.
get_flag
(
IN_ENABLED_STATE
)
}
fn
set_enabled_state
(
self
state
:
bool
)
{
self
.
set_flag
(
IN_ENABLED_STATE
state
)
}
fn
get_has_changed
(
self
)
-
>
bool
{
self
.
get_flag
(
HAS_CHANGED
)
}
fn
set_has_changed
(
self
state
:
bool
)
{
self
.
set_flag
(
HAS_CHANGED
state
)
}
fn
get_is_dirty
(
self
)
-
>
bool
{
self
.
get_flag
(
IS_DIRTY
)
}
fn
set_is_dirty
(
self
state
:
bool
)
{
self
.
set_flag
(
IS_DIRTY
state
)
}
fn
get_has_dirty_siblings
(
self
)
-
>
bool
{
self
.
get_flag
(
HAS_DIRTY_SIBLINGS
)
}
fn
set_has_dirty_siblings
(
self
state
:
bool
)
{
self
.
set_flag
(
HAS_DIRTY_SIBLINGS
state
)
}
fn
get_has_dirty_descendants
(
self
)
-
>
bool
{
self
.
get_flag
(
HAS_DIRTY_DESCENDANTS
)
}
fn
set_has_dirty_descendants
(
self
state
:
bool
)
{
self
.
set_flag
(
HAS_DIRTY_DESCENDANTS
state
)
}
fn
force_dirty_ancestors
(
self
damage
:
NodeDamage
)
{
self
.
dirty_impl
(
damage
true
)
}
fn
dirty
(
self
damage
:
NodeDamage
)
{
self
.
dirty_impl
(
damage
false
)
}
fn
dirty_impl
(
self
damage
:
NodeDamage
force_ancestors
:
bool
)
{
match
damage
{
NodeDamage
:
:
NodeStyleDamaged
=
>
{
}
NodeDamage
:
:
OtherNodeDamage
=
>
self
.
set_has_changed
(
true
)
}
if
self
.
get_is_dirty
(
)
&
&
!
force_ancestors
{
return
}
fn
dirty_subtree
(
node
:
&
Node
)
{
if
node
.
get_is_dirty
(
)
{
return
}
node
.
set_flag
(
IS_DIRTY
|
HAS_DIRTY_SIBLINGS
|
HAS_DIRTY_DESCENDANTS
true
)
;
for
kid
in
node
.
children
(
)
{
dirty_subtree
(
kid
.
r
(
)
)
;
}
}
dirty_subtree
(
self
)
;
if
!
self
.
get_has_dirty_siblings
(
)
{
let
parent
=
match
self
.
parent_node
.
get
(
)
{
None
=
>
return
Some
(
parent
)
=
>
parent
}
.
root
(
)
;
for
sibling
in
parent
.
r
(
)
.
children
(
)
{
sibling
.
r
(
)
.
set_has_dirty_siblings
(
true
)
;
}
}
for
ancestor
in
self
.
ancestors
(
)
{
if
!
force_ancestors
&
&
ancestor
.
r
(
)
.
get_has_dirty_descendants
(
)
{
break
}
ancestor
.
r
(
)
.
set_has_dirty_descendants
(
true
)
;
}
}
fn
traverse_preorder
(
self
)
-
>
TreeIterator
{
TreeIterator
:
:
new
(
self
)
}
fn
inclusively_following_siblings
(
self
)
-
>
NodeSiblingIterator
{
NodeSiblingIterator
{
current
:
Some
(
Root
:
:
from_ref
(
self
)
)
}
}
fn
inclusively_preceding_siblings
(
self
)
-
>
ReverseSiblingIterator
{
ReverseSiblingIterator
{
current
:
Some
(
Root
:
:
from_ref
(
self
)
)
}
}
fn
is_inclusive_ancestor_of
(
self
parent
:
&
Node
)
-
>
bool
{
self
=
=
parent
|
|
parent
.
ancestors
(
)
.
any
(
|
ancestor
|
ancestor
.
r
(
)
=
=
self
)
}
fn
following_siblings
(
self
)
-
>
NodeSiblingIterator
{
NodeSiblingIterator
{
current
:
self
.
GetNextSibling
(
)
}
}
fn
preceding_siblings
(
self
)
-
>
ReverseSiblingIterator
{
ReverseSiblingIterator
{
current
:
self
.
GetPreviousSibling
(
)
}
}
fn
following_nodes
(
self
root
:
&
Node
)
-
>
FollowingNodeIterator
{
FollowingNodeIterator
{
current
:
Some
(
Root
:
:
from_ref
(
self
)
)
root
:
Root
:
:
from_ref
(
root
)
}
}
fn
preceding_nodes
(
self
root
:
&
Node
)
-
>
PrecedingNodeIterator
{
PrecedingNodeIterator
{
current
:
Some
(
Root
:
:
from_ref
(
self
)
)
root
:
Root
:
:
from_ref
(
root
)
}
}
fn
descending_last_children
(
self
)
-
>
LastChildIterator
{
LastChildIterator
{
current
:
self
.
GetLastChild
(
)
}
}
fn
is_parent_of
(
self
child
:
&
Node
)
-
>
bool
{
match
child
.
parent_node
.
get
(
)
{
Some
(
ref
parent
)
=
>
parent
.
root
(
)
.
r
(
)
=
=
self
None
=
>
false
}
}
fn
to_trusted_node_address
(
self
)
-
>
TrustedNodeAddress
{
TrustedNodeAddress
(
&
*
self
as
*
const
Node
as
*
const
libc
:
:
c_void
)
}
fn
get_bounding_content_box
(
self
)
-
>
Rect
<
Au
>
{
window_from_node
(
self
)
.
r
(
)
.
content_box_query
(
self
.
to_trusted_node_address
(
)
)
}
fn
get_content_boxes
(
self
)
-
>
Vec
<
Rect
<
Au
>
>
{
window_from_node
(
self
)
.
r
(
)
.
content_boxes_query
(
self
.
to_trusted_node_address
(
)
)
}
fn
before
(
self
nodes
:
Vec
<
NodeOrString
>
)
-
>
ErrorResult
{
match
self
.
parent_node
.
get
(
)
{
None
=
>
{
Ok
(
(
)
)
}
Some
(
ref
parent_node
)
=
>
{
let
doc
=
self
.
owner_doc
(
)
;
let
node
=
try
!
(
doc
.
r
(
)
.
node_from_nodes_and_strings
(
nodes
)
)
;
Node
:
:
pre_insert
(
node
.
r
(
)
parent_node
.
root
(
)
.
r
(
)
Some
(
self
)
)
.
map
(
|
_
|
(
)
)
}
}
}
fn
after
(
self
nodes
:
Vec
<
NodeOrString
>
)
-
>
ErrorResult
{
match
self
.
parent_node
.
get
(
)
{
None
=
>
{
Ok
(
(
)
)
}
Some
(
ref
parent_node
)
=
>
{
let
doc
=
self
.
owner_doc
(
)
;
let
node
=
try
!
(
doc
.
r
(
)
.
node_from_nodes_and_strings
(
nodes
)
)
;
let
next_sibling
=
self
.
next_sibling
.
get
(
)
.
map
(
Root
:
:
from_rooted
)
;
Node
:
:
pre_insert
(
node
.
r
(
)
parent_node
.
root
(
)
.
r
(
)
next_sibling
.
r
(
)
)
.
map
(
|
_
|
(
)
)
}
}
}
fn
replace_with
(
self
nodes
:
Vec
<
NodeOrString
>
)
-
>
ErrorResult
{
match
self
.
parent_node
.
get
(
)
{
None
=
>
{
Ok
(
(
)
)
}
Some
(
ref
parent_node
)
=
>
{
let
doc
=
self
.
owner_doc
(
)
;
let
node
=
try
!
(
doc
.
r
(
)
.
node_from_nodes_and_strings
(
nodes
)
)
;
parent_node
.
root
(
)
.
r
(
)
.
ReplaceChild
(
node
.
r
(
)
self
)
.
map
(
|
_
|
(
)
)
}
}
}
fn
prepend
(
self
nodes
:
Vec
<
NodeOrString
>
)
-
>
ErrorResult
{
let
doc
=
self
.
owner_doc
(
)
;
let
node
=
try
!
(
doc
.
r
(
)
.
node_from_nodes_and_strings
(
nodes
)
)
;
let
first_child
=
self
.
first_child
.
get
(
)
.
map
(
Root
:
:
from_rooted
)
;
Node
:
:
pre_insert
(
node
.
r
(
)
self
first_child
.
r
(
)
)
.
map
(
|
_
|
(
)
)
}
fn
append
(
self
nodes
:
Vec
<
NodeOrString
>
)
-
>
ErrorResult
{
let
doc
=
self
.
owner_doc
(
)
;
let
node
=
try
!
(
doc
.
r
(
)
.
node_from_nodes_and_strings
(
nodes
)
)
;
self
.
AppendChild
(
node
.
r
(
)
)
.
map
(
|
_
|
(
)
)
}
fn
query_selector
(
self
selectors
:
DOMString
)
-
>
Fallible
<
Option
<
Root
<
Element
>
>
>
{
match
parse_author_origin_selector_list_from_str
(
&
selectors
)
{
Err
(
(
)
)
=
>
return
Err
(
Syntax
)
Ok
(
ref
selectors
)
=
>
{
let
root
=
self
.
ancestors
(
)
.
last
(
)
;
let
root
=
root
.
r
(
)
.
unwrap_or
(
self
.
clone
(
)
)
;
Ok
(
root
.
traverse_preorder
(
)
.
filter_map
(
ElementCast
:
:
to_root
)
.
find
(
|
element
|
{
matches
(
selectors
&
element
.
r
(
)
&
mut
None
)
}
)
)
}
}
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
query_selector_iter
(
self
selectors
:
DOMString
)
-
>
Fallible
<
QuerySelectorIterator
>
{
match
parse_author_origin_selector_list_from_str
(
&
selectors
)
{
Err
(
(
)
)
=
>
Err
(
Syntax
)
Ok
(
selectors
)
=
>
{
let
root
=
self
.
ancestors
(
)
.
last
(
)
;
let
root
=
root
.
r
(
)
.
unwrap_or
(
self
)
;
Ok
(
QuerySelectorIterator
:
:
new
(
root
.
traverse_preorder
(
)
selectors
)
)
}
}
}
#
[
allow
(
unsafe_code
)
]
fn
query_selector_all
(
self
selectors
:
DOMString
)
-
>
Fallible
<
Root
<
NodeList
>
>
{
let
window
=
window_from_node
(
self
)
;
let
iter
=
try
!
(
unsafe
{
self
.
query_selector_iter
(
selectors
)
}
)
;
Ok
(
NodeList
:
:
new_simple_list
(
window
.
r
(
)
iter
)
)
}
fn
ancestors
(
self
)
-
>
AncestorIterator
{
AncestorIterator
{
current
:
self
.
GetParentNode
(
)
}
}
fn
inclusive_ancestors
(
self
)
-
>
AncestorIterator
{
AncestorIterator
{
current
:
Some
(
Root
:
:
from_ref
(
self
)
)
}
}
fn
owner_doc
(
self
)
-
>
Root
<
Document
>
{
self
.
owner_doc
.
get
(
)
.
unwrap
(
)
.
root
(
)
}
fn
set_owner_doc
(
self
document
:
&
Document
)
{
self
.
owner_doc
.
set
(
Some
(
JS
:
:
from_ref
(
document
)
)
)
;
}
fn
is_in_html_doc
(
self
)
-
>
bool
{
self
.
owner_doc
(
)
.
r
(
)
.
is_html_document
(
)
}
fn
children
(
self
)
-
>
NodeSiblingIterator
{
NodeSiblingIterator
{
current
:
self
.
GetFirstChild
(
)
}
}
fn
rev_children
(
self
)
-
>
ReverseSiblingIterator
{
ReverseSiblingIterator
{
current
:
self
.
GetLastChild
(
)
}
}
fn
child_elements
(
self
)
-
>
ChildElementIterator
{
fn
to_temporary
(
node
:
Root
<
Node
>
)
-
>
Option
<
Root
<
Element
>
>
{
ElementCast
:
:
to_root
(
node
)
}
self
.
children
(
)
.
filter_map
(
to_temporary
as
fn
(
_
)
-
>
_
)
.
peekable
(
)
}
fn
remove_self
(
self
)
{
match
self
.
parent_node
.
get
(
)
{
Some
(
parent
)
=
>
parent
.
root
(
)
.
r
(
)
.
remove_child
(
self
)
None
=
>
(
)
}
}
fn
get_unique_id
(
self
)
-
>
String
{
if
self
.
unique_id
.
borrow
(
)
.
is_empty
(
)
{
let
mut
unique_id
=
self
.
unique_id
.
borrow_mut
(
)
;
*
unique_id
=
uuid
:
:
Uuid
:
:
new_v4
(
)
.
to_simple_string
(
)
;
}
self
.
unique_id
.
borrow
(
)
.
clone
(
)
}
fn
summarize
(
self
)
-
>
NodeInfo
{
NodeInfo
{
uniqueId
:
self
.
get_unique_id
(
)
baseURI
:
self
.
BaseURI
(
)
parent
:
self
.
GetParentNode
(
)
.
map
(
|
node
|
node
.
r
(
)
.
get_unique_id
(
)
)
.
unwrap_or
(
"
"
.
to_owned
(
)
)
nodeType
:
self
.
NodeType
(
)
namespaceURI
:
"
"
.
to_owned
(
)
nodeName
:
self
.
NodeName
(
)
numChildren
:
self
.
ChildNodes
(
)
.
r
(
)
.
Length
(
)
as
usize
name
:
"
"
.
to_owned
(
)
publicId
:
"
"
.
to_owned
(
)
systemId
:
"
"
.
to_owned
(
)
attrs
:
{
let
e
:
Option
<
&
Element
>
=
ElementCast
:
:
to_ref
(
self
)
;
match
e
{
Some
(
element
)
=
>
element
.
summarize
(
)
None
=
>
vec
!
(
)
}
}
isDocumentElement
:
self
.
owner_doc
(
)
.
r
(
)
.
GetDocumentElement
(
)
.
map
(
|
elem
|
NodeCast
:
:
from_ref
(
elem
.
r
(
)
)
=
=
self
)
.
unwrap_or
(
false
)
shortValue
:
self
.
GetNodeValue
(
)
.
unwrap_or
(
"
"
.
to_owned
(
)
)
incompleteValue
:
false
}
}
fn
parse_fragment
(
self
markup
:
DOMString
)
-
>
Fallible
<
Root
<
DocumentFragment
>
>
{
let
context_node
:
&
Node
=
NodeCast
:
:
from_ref
(
self
)
;
let
context_document
=
document_from_node
(
self
)
;
let
fragment
=
DocumentFragment
:
:
new
(
context_document
.
r
(
)
)
;
if
context_document
.
r
(
)
.
is_html_document
(
)
{
let
fragment_node
=
NodeCast
:
:
from_ref
(
fragment
.
r
(
)
)
;
parse_html_fragment
(
context_node
markup
fragment_node
)
;
}
else
{
unimplemented
!
(
)
;
}
Ok
(
fragment
)
}
}
#
[
allow
(
unsafe_code
)
]
pub
fn
from_untrusted_node_address
(
_runtime
:
*
mut
JSRuntime
candidate
:
UntrustedNodeAddress
)
-
>
Root
<
Node
>
{
unsafe
{
let
candidate
:
uintptr_t
=
mem
:
:
transmute
(
candidate
.
0
)
;
let
object
:
*
mut
JSObject
=
mem
:
:
transmute
(
candidate
)
;
if
object
.
is_null
(
)
{
panic
!
(
"
Attempted
to
create
a
JS
<
Node
>
from
an
invalid
pointer
!
"
)
}
let
boxed_node
:
*
const
Node
=
conversions
:
:
native_from_reflector
(
object
)
;
Root
:
:
from_ref
(
&
*
boxed_node
)
}
}
pub
trait
LayoutNodeHelpers
{
#
[
allow
(
unsafe_code
)
]
unsafe
fn
type_id_for_layout
(
&
self
)
-
>
NodeTypeId
;
#
[
allow
(
unsafe_code
)
]
unsafe
fn
parent_node_ref
(
&
self
)
-
>
Option
<
LayoutJS
<
Node
>
>
;
#
[
allow
(
unsafe_code
)
]
unsafe
fn
first_child_ref
(
&
self
)
-
>
Option
<
LayoutJS
<
Node
>
>
;
#
[
allow
(
unsafe_code
)
]
unsafe
fn
last_child_ref
(
&
self
)
-
>
Option
<
LayoutJS
<
Node
>
>
;
#
[
allow
(
unsafe_code
)
]
unsafe
fn
prev_sibling_ref
(
&
self
)
-
>
Option
<
LayoutJS
<
Node
>
>
;
#
[
allow
(
unsafe_code
)
]
unsafe
fn
next_sibling_ref
(
&
self
)
-
>
Option
<
LayoutJS
<
Node
>
>
;
#
[
allow
(
unsafe_code
)
]
unsafe
fn
owner_doc_for_layout
(
&
self
)
-
>
LayoutJS
<
Document
>
;
#
[
allow
(
unsafe_code
)
]
unsafe
fn
is_element_for_layout
(
&
self
)
-
>
bool
;
#
[
allow
(
unsafe_code
)
]
unsafe
fn
get_flag
(
&
self
flag
:
NodeFlags
)
-
>
bool
;
#
[
allow
(
unsafe_code
)
]
unsafe
fn
set_flag
(
&
self
flag
:
NodeFlags
value
:
bool
)
;
#
[
allow
(
unsafe_code
)
]
unsafe
fn
layout_data
(
&
self
)
-
>
Ref
<
Option
<
LayoutData
>
>
;
#
[
allow
(
unsafe_code
)
]
unsafe
fn
layout_data_mut
(
&
self
)
-
>
RefMut
<
Option
<
LayoutData
>
>
;
#
[
allow
(
unsafe_code
)
]
unsafe
fn
layout_data_unchecked
(
&
self
)
-
>
*
const
Option
<
LayoutData
>
;
}
impl
LayoutNodeHelpers
for
LayoutJS
<
Node
>
{
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
type_id_for_layout
(
&
self
)
-
>
NodeTypeId
{
(
*
self
.
unsafe_get
(
)
)
.
type_id
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
is_element_for_layout
(
&
self
)
-
>
bool
{
(
*
self
.
unsafe_get
(
)
)
.
is_element
(
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
parent_node_ref
(
&
self
)
-
>
Option
<
LayoutJS
<
Node
>
>
{
(
*
self
.
unsafe_get
(
)
)
.
parent_node
.
get_inner_as_layout
(
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
first_child_ref
(
&
self
)
-
>
Option
<
LayoutJS
<
Node
>
>
{
(
*
self
.
unsafe_get
(
)
)
.
first_child
.
get_inner_as_layout
(
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
last_child_ref
(
&
self
)
-
>
Option
<
LayoutJS
<
Node
>
>
{
(
*
self
.
unsafe_get
(
)
)
.
last_child
.
get_inner_as_layout
(
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
prev_sibling_ref
(
&
self
)
-
>
Option
<
LayoutJS
<
Node
>
>
{
(
*
self
.
unsafe_get
(
)
)
.
prev_sibling
.
get_inner_as_layout
(
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
next_sibling_ref
(
&
self
)
-
>
Option
<
LayoutJS
<
Node
>
>
{
(
*
self
.
unsafe_get
(
)
)
.
next_sibling
.
get_inner_as_layout
(
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
owner_doc_for_layout
(
&
self
)
-
>
LayoutJS
<
Document
>
{
(
*
self
.
unsafe_get
(
)
)
.
owner_doc
.
get_inner_as_layout
(
)
.
unwrap
(
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
get_flag
(
&
self
flag
:
NodeFlags
)
-
>
bool
{
(
*
self
.
unsafe_get
(
)
)
.
flags
.
get
(
)
.
contains
(
flag
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
set_flag
(
&
self
flag
:
NodeFlags
value
:
bool
)
{
let
this
=
self
.
unsafe_get
(
)
;
let
mut
flags
=
(
*
this
)
.
flags
.
get
(
)
;
if
value
{
flags
.
insert
(
flag
)
;
}
else
{
flags
.
remove
(
flag
)
;
}
(
*
this
)
.
flags
.
set
(
flags
)
;
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
layout_data
(
&
self
)
-
>
Ref
<
Option
<
LayoutData
>
>
{
(
*
self
.
unsafe_get
(
)
)
.
layout_data
.
borrow
(
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
layout_data_mut
(
&
self
)
-
>
RefMut
<
Option
<
LayoutData
>
>
{
(
*
self
.
unsafe_get
(
)
)
.
layout_data
.
borrow_mut
(
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
layout_data_unchecked
(
&
self
)
-
>
*
const
Option
<
LayoutData
>
{
(
*
self
.
unsafe_get
(
)
)
.
layout_data
.
borrow_unchecked
(
)
}
}
pub
trait
RawLayoutNodeHelpers
{
#
[
allow
(
unsafe_code
)
]
unsafe
fn
get_hover_state_for_layout
(
&
self
)
-
>
bool
;
#
[
allow
(
unsafe_code
)
]
unsafe
fn
get_focus_state_for_layout
(
&
self
)
-
>
bool
;
#
[
allow
(
unsafe_code
)
]
unsafe
fn
get_disabled_state_for_layout
(
&
self
)
-
>
bool
;
#
[
allow
(
unsafe_code
)
]
unsafe
fn
get_enabled_state_for_layout
(
&
self
)
-
>
bool
;
fn
type_id_for_layout
(
&
self
)
-
>
NodeTypeId
;
}
impl
RawLayoutNodeHelpers
for
Node
{
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
get_hover_state_for_layout
(
&
self
)
-
>
bool
{
self
.
flags
.
get
(
)
.
contains
(
IN_HOVER_STATE
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
get_focus_state_for_layout
(
&
self
)
-
>
bool
{
self
.
flags
.
get
(
)
.
contains
(
IN_FOCUS_STATE
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
get_disabled_state_for_layout
(
&
self
)
-
>
bool
{
self
.
flags
.
get
(
)
.
contains
(
IN_DISABLED_STATE
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
unsafe
fn
get_enabled_state_for_layout
(
&
self
)
-
>
bool
{
self
.
flags
.
get
(
)
.
contains
(
IN_ENABLED_STATE
)
}
#
[
inline
]
fn
type_id_for_layout
(
&
self
)
-
>
NodeTypeId
{
self
.
type_id
}
}
pub
type
ChildElementIterator
=
Peekable
<
FilterMap
<
NodeSiblingIterator
fn
(
Root
<
Node
>
)
-
>
Option
<
Root
<
Element
>
>
>
>
;
pub
struct
NodeSiblingIterator
{
current
:
Option
<
Root
<
Node
>
>
}
impl
Iterator
for
NodeSiblingIterator
{
type
Item
=
Root
<
Node
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Root
<
Node
>
>
{
let
current
=
match
self
.
current
.
take
(
)
{
None
=
>
return
None
Some
(
current
)
=
>
current
}
;
self
.
current
=
current
.
r
(
)
.
GetNextSibling
(
)
;
Some
(
current
)
}
}
pub
struct
ReverseSiblingIterator
{
current
:
Option
<
Root
<
Node
>
>
}
impl
Iterator
for
ReverseSiblingIterator
{
type
Item
=
Root
<
Node
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Root
<
Node
>
>
{
let
current
=
match
self
.
current
.
take
(
)
{
None
=
>
return
None
Some
(
current
)
=
>
current
}
;
self
.
current
=
current
.
r
(
)
.
GetPreviousSibling
(
)
;
Some
(
current
)
}
}
pub
struct
FollowingNodeIterator
{
current
:
Option
<
Root
<
Node
>
>
root
:
Root
<
Node
>
}
impl
Iterator
for
FollowingNodeIterator
{
type
Item
=
Root
<
Node
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Root
<
Node
>
>
{
let
current
=
match
self
.
current
.
take
(
)
{
None
=
>
return
None
Some
(
current
)
=
>
current
}
;
if
let
Some
(
first_child
)
=
current
.
r
(
)
.
GetFirstChild
(
)
{
self
.
current
=
Some
(
first_child
)
;
return
current
.
r
(
)
.
GetFirstChild
(
)
}
if
self
.
root
=
=
current
{
self
.
current
=
None
;
return
None
;
}
if
let
Some
(
next_sibling
)
=
current
.
r
(
)
.
GetNextSibling
(
)
{
self
.
current
=
Some
(
next_sibling
)
;
return
current
.
r
(
)
.
GetNextSibling
(
)
}
for
ancestor
in
current
.
r
(
)
.
inclusive_ancestors
(
)
{
if
self
.
root
=
=
ancestor
{
break
;
}
if
let
Some
(
next_sibling
)
=
ancestor
.
r
(
)
.
GetNextSibling
(
)
{
self
.
current
=
Some
(
next_sibling
)
;
return
ancestor
.
r
(
)
.
GetNextSibling
(
)
}
}
self
.
current
=
None
;
return
None
}
}
pub
struct
PrecedingNodeIterator
{
current
:
Option
<
Root
<
Node
>
>
root
:
Root
<
Node
>
}
impl
Iterator
for
PrecedingNodeIterator
{
type
Item
=
Root
<
Node
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Root
<
Node
>
>
{
let
current
=
match
self
.
current
.
take
(
)
{
None
=
>
return
None
Some
(
current
)
=
>
current
}
;
if
self
.
root
=
=
current
{
self
.
current
=
None
;
return
None
}
let
node
=
current
;
if
let
Some
(
previous_sibling
)
=
node
.
r
(
)
.
GetPreviousSibling
(
)
{
if
self
.
root
=
=
previous_sibling
{
self
.
current
=
None
;
return
None
}
if
let
Some
(
last_child
)
=
previous_sibling
.
r
(
)
.
descending_last_children
(
)
.
last
(
)
{
self
.
current
=
Some
(
last_child
)
;
return
previous_sibling
.
r
(
)
.
descending_last_children
(
)
.
last
(
)
}
self
.
current
=
Some
(
previous_sibling
)
;
return
node
.
r
(
)
.
GetPreviousSibling
(
)
}
;
if
let
Some
(
parent_node
)
=
node
.
r
(
)
.
GetParentNode
(
)
{
self
.
current
=
Some
(
parent_node
)
;
return
node
.
r
(
)
.
GetParentNode
(
)
}
self
.
current
=
None
;
return
None
}
}
pub
struct
LastChildIterator
{
current
:
Option
<
Root
<
Node
>
>
}
impl
Iterator
for
LastChildIterator
{
type
Item
=
Root
<
Node
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Root
<
Node
>
>
{
let
current
=
match
self
.
current
.
take
(
)
{
None
=
>
return
None
Some
(
current
)
=
>
current
}
;
self
.
current
=
current
.
r
(
)
.
GetLastChild
(
)
;
Some
(
current
)
}
}
pub
struct
AncestorIterator
{
current
:
Option
<
Root
<
Node
>
>
}
impl
Iterator
for
AncestorIterator
{
type
Item
=
Root
<
Node
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Root
<
Node
>
>
{
let
current
=
match
self
.
current
.
take
(
)
{
None
=
>
return
None
Some
(
current
)
=
>
current
}
;
self
.
current
=
current
.
r
(
)
.
GetParentNode
(
)
;
Some
(
current
)
}
}
pub
struct
TreeIterator
{
current
:
Option
<
Root
<
Node
>
>
depth
:
usize
}
impl
TreeIterator
{
fn
new
(
root
:
&
Node
)
-
>
TreeIterator
{
TreeIterator
{
current
:
Some
(
Root
:
:
from_ref
(
root
)
)
depth
:
0
}
}
}
impl
Iterator
for
TreeIterator
{
type
Item
=
Root
<
Node
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Root
<
Node
>
>
{
let
current
=
match
self
.
current
.
take
(
)
{
None
=
>
return
None
Some
(
current
)
=
>
current
}
;
if
let
Some
(
first_child
)
=
current
.
r
(
)
.
GetFirstChild
(
)
{
self
.
current
=
Some
(
first_child
)
;
self
.
depth
+
=
1
;
return
Some
(
current
)
;
}
;
for
ancestor
in
current
.
r
(
)
.
inclusive_ancestors
(
)
{
if
self
.
depth
=
=
0
{
break
;
}
if
let
Some
(
next_sibling
)
=
ancestor
.
r
(
)
.
GetNextSibling
(
)
{
self
.
current
=
Some
(
next_sibling
)
;
return
Some
(
current
)
;
}
self
.
depth
-
=
1
;
}
debug_assert
!
(
self
.
depth
=
=
0
)
;
self
.
current
=
None
;
Some
(
current
)
}
}
#
[
derive
(
Copy
Clone
PartialEq
)
]
pub
enum
CloneChildrenFlag
{
CloneChildren
DoNotCloneChildren
}
fn
as_uintptr
<
T
>
(
t
:
&
T
)
-
>
uintptr_t
{
t
as
*
const
T
as
uintptr_t
}
impl
Node
{
pub
fn
reflect_node
<
N
:
Reflectable
+
NodeBase
>
(
node
:
Box
<
N
>
document
:
&
Document
wrap_fn
:
extern
"
Rust
"
fn
(
*
mut
JSContext
GlobalRef
Box
<
N
>
)
-
>
Root
<
N
>
)
-
>
Root
<
N
>
{
let
window
=
document
.
window
(
)
;
reflect_dom_object
(
node
GlobalRef
:
:
Window
(
window
.
r
(
)
)
wrap_fn
)
}
pub
fn
new_inherited
(
type_id
:
NodeTypeId
doc
:
&
Document
)
-
>
Node
{
Node
:
:
new_
(
type_id
Some
(
doc
.
clone
(
)
)
)
}
pub
fn
new_without_doc
(
type_id
:
NodeTypeId
)
-
>
Node
{
Node
:
:
new_
(
type_id
None
)
}
fn
new_
(
type_id
:
NodeTypeId
doc
:
Option
<
&
Document
>
)
-
>
Node
{
Node
{
eventtarget
:
EventTarget
:
:
new_inherited
(
EventTargetTypeId
:
:
Node
(
type_id
)
)
type_id
:
type_id
parent_node
:
Default
:
:
default
(
)
first_child
:
Default
:
:
default
(
)
last_child
:
Default
:
:
default
(
)
next_sibling
:
Default
:
:
default
(
)
prev_sibling
:
Default
:
:
default
(
)
owner_doc
:
MutNullableHeap
:
:
new
(
doc
.
map
(
JS
:
:
from_ref
)
)
child_list
:
Default
:
:
default
(
)
flags
:
Cell
:
:
new
(
NodeFlags
:
:
new
(
type_id
)
)
layout_data
:
LayoutDataRef
:
:
new
(
)
unique_id
:
DOMRefCell
:
:
new
(
String
:
:
new
(
)
)
}
}
pub
fn
adopt
(
node
:
&
Node
document
:
&
Document
)
{
let
parent_node
=
node
.
GetParentNode
(
)
;
match
parent_node
{
Some
(
ref
parent
)
=
>
{
Node
:
:
remove
(
node
parent
SuppressObserver
:
:
Unsuppressed
)
;
}
None
=
>
(
)
}
let
node_doc
=
document_from_node
(
node
)
;
if
node_doc
.
r
(
)
!
=
document
{
for
descendant
in
node
.
traverse_preorder
(
)
{
descendant
.
r
(
)
.
set_owner_doc
(
document
)
;
}
}
}
pub
fn
ensure_pre_insertion_validity
(
node
:
&
Node
parent
:
&
Node
child
:
Option
<
&
Node
>
)
-
>
ErrorResult
{
match
parent
.
type_id
(
)
{
NodeTypeId
:
:
Document
|
NodeTypeId
:
:
DocumentFragment
|
NodeTypeId
:
:
Element
(
.
.
)
=
>
(
)
_
=
>
return
Err
(
HierarchyRequest
)
}
if
node
.
is_inclusive_ancestor_of
(
parent
)
{
return
Err
(
HierarchyRequest
)
;
}
if
let
Some
(
child
)
=
child
{
if
!
parent
.
is_parent_of
(
child
)
{
return
Err
(
NotFound
)
;
}
}
match
node
.
type_id
(
)
{
NodeTypeId
:
:
CharacterData
(
CharacterDataTypeId
:
:
Text
)
=
>
{
if
parent
.
is_document
(
)
{
return
Err
(
HierarchyRequest
)
;
}
}
NodeTypeId
:
:
DocumentType
=
>
{
if
!
parent
.
is_document
(
)
{
return
Err
(
HierarchyRequest
)
;
}
}
NodeTypeId
:
:
DocumentFragment
|
NodeTypeId
:
:
Element
(
_
)
|
NodeTypeId
:
:
CharacterData
(
CharacterDataTypeId
:
:
ProcessingInstruction
)
|
NodeTypeId
:
:
CharacterData
(
CharacterDataTypeId
:
:
Comment
)
=
>
(
)
NodeTypeId
:
:
Document
=
>
return
Err
(
HierarchyRequest
)
}
if
parent
.
type_id
(
)
=
=
NodeTypeId
:
:
Document
{
match
node
.
type_id
(
)
{
NodeTypeId
:
:
DocumentFragment
=
>
{
if
node
.
children
(
)
.
any
(
|
c
|
c
.
r
(
)
.
is_text
(
)
)
{
return
Err
(
HierarchyRequest
)
;
}
match
node
.
child_elements
(
)
.
count
(
)
{
0
=
>
(
)
1
=
>
{
if
!
parent
.
child_elements
(
)
.
is_empty
(
)
{
return
Err
(
HierarchyRequest
)
;
}
if
let
Some
(
child
)
=
child
{
if
child
.
inclusively_following_siblings
(
)
.
any
(
|
child
|
child
.
r
(
)
.
is_doctype
(
)
)
{
return
Err
(
HierarchyRequest
)
;
}
}
}
_
=
>
return
Err
(
HierarchyRequest
)
}
}
NodeTypeId
:
:
Element
(
_
)
=
>
{
if
!
parent
.
child_elements
(
)
.
is_empty
(
)
{
return
Err
(
HierarchyRequest
)
;
}
if
let
Some
(
ref
child
)
=
child
{
if
child
.
inclusively_following_siblings
(
)
.
any
(
|
child
|
child
.
r
(
)
.
is_doctype
(
)
)
{
return
Err
(
HierarchyRequest
)
;
}
}
}
NodeTypeId
:
:
DocumentType
=
>
{
if
parent
.
children
(
)
.
any
(
|
c
|
c
.
r
(
)
.
is_doctype
(
)
)
{
return
Err
(
HierarchyRequest
)
;
}
match
child
{
Some
(
child
)
=
>
{
if
parent
.
children
(
)
.
take_while
(
|
c
|
c
.
r
(
)
!
=
child
)
.
any
(
|
c
|
c
.
r
(
)
.
is_element
(
)
)
{
return
Err
(
HierarchyRequest
)
;
}
}
None
=
>
{
if
!
parent
.
child_elements
(
)
.
is_empty
(
)
{
return
Err
(
HierarchyRequest
)
;
}
}
}
}
NodeTypeId
:
:
CharacterData
(
_
)
=
>
(
)
NodeTypeId
:
:
Document
=
>
unreachable
!
(
)
}
}
Ok
(
(
)
)
}
pub
fn
pre_insert
(
node
:
&
Node
parent
:
&
Node
child
:
Option
<
&
Node
>
)
-
>
Fallible
<
Root
<
Node
>
>
{
try
!
(
Node
:
:
ensure_pre_insertion_validity
(
node
parent
child
)
)
;
let
reference_child_root
;
let
reference_child
=
match
child
{
Some
(
child
)
if
child
=
=
node
=
>
{
reference_child_root
=
node
.
GetNextSibling
(
)
;
reference_child_root
.
r
(
)
}
_
=
>
child
}
;
let
document
=
document_from_node
(
parent
)
;
Node
:
:
adopt
(
node
document
.
r
(
)
)
;
Node
:
:
insert
(
node
parent
reference_child
SuppressObserver
:
:
Unsuppressed
)
;
return
Ok
(
Root
:
:
from_ref
(
node
)
)
}
fn
insert
(
node
:
&
Node
parent
:
&
Node
child
:
Option
<
&
Node
>
suppress_observers
:
SuppressObserver
)
{
fn
do_insert
(
node
:
&
Node
parent
:
&
Node
child
:
Option
<
&
Node
>
)
{
parent
.
add_child
(
node
child
)
;
let
is_in_doc
=
parent
.
is_in_doc
(
)
;
for
kid
in
node
.
traverse_preorder
(
)
{
let
mut
flags
=
kid
.
r
(
)
.
flags
.
get
(
)
;
if
is_in_doc
{
flags
.
insert
(
IS_IN_DOC
)
;
}
else
{
flags
.
remove
(
IS_IN_DOC
)
;
}
kid
.
r
(
)
.
flags
.
set
(
flags
)
;
}
}
fn
fire_observer_if_necessary
(
node
:
&
Node
suppress_observers
:
SuppressObserver
)
{
match
suppress_observers
{
SuppressObserver
:
:
Unsuppressed
=
>
node
.
node_inserted
(
)
SuppressObserver
:
:
Suppressed
=
>
(
)
}
}
match
node
.
type_id
(
)
{
NodeTypeId
:
:
DocumentFragment
=
>
{
let
kids
:
Vec
<
Root
<
Node
>
>
=
node
.
children
(
)
.
collect
(
)
;
for
kid
in
&
kids
{
Node
:
:
remove
(
kid
.
r
(
)
node
SuppressObserver
:
:
Suppressed
)
;
}
for
kid
in
&
kids
{
do_insert
(
kid
.
r
(
)
parent
child
)
;
}
for
kid
in
kids
{
fire_observer_if_necessary
(
kid
.
r
(
)
suppress_observers
)
;
}
}
_
=
>
{
do_insert
(
node
parent
child
)
;
fire_observer_if_necessary
(
node
suppress_observers
)
;
}
}
}
pub
fn
replace_all
(
node
:
Option
<
&
Node
>
parent
:
&
Node
)
{
match
node
{
Some
(
node
)
=
>
{
let
document
=
document_from_node
(
parent
)
;
Node
:
:
adopt
(
node
document
.
r
(
)
)
;
}
None
=
>
(
)
}
let
mut
removed_nodes
:
RootedVec
<
JS
<
Node
>
>
=
RootedVec
:
:
new
(
)
;
for
child
in
parent
.
children
(
)
{
removed_nodes
.
push
(
JS
:
:
from_rooted
(
&
child
)
)
;
}
let
added_nodes
=
match
node
{
None
=
>
vec
!
(
)
Some
(
node
)
=
>
match
node
.
type_id
(
)
{
NodeTypeId
:
:
DocumentFragment
=
>
node
.
children
(
)
.
collect
(
)
_
=
>
vec
!
(
Root
:
:
from_ref
(
node
)
)
}
}
;
for
child
in
parent
.
children
(
)
{
Node
:
:
remove
(
child
.
r
(
)
parent
SuppressObserver
:
:
Suppressed
)
;
}
match
node
{
Some
(
node
)
=
>
Node
:
:
insert
(
node
parent
None
SuppressObserver
:
:
Suppressed
)
None
=
>
(
)
}
let
parent_in_doc
=
parent
.
is_in_doc
(
)
;
for
removed_node
in
removed_nodes
.
iter
(
)
{
removed_node
.
root
(
)
.
r
(
)
.
node_removed
(
parent_in_doc
)
;
}
for
added_node
in
added_nodes
{
added_node
.
r
(
)
.
node_inserted
(
)
;
}
}
fn
pre_remove
(
child
:
&
Node
parent
:
&
Node
)
-
>
Fallible
<
Root
<
Node
>
>
{
match
child
.
GetParentNode
(
)
{
Some
(
ref
node
)
if
node
.
r
(
)
!
=
parent
=
>
return
Err
(
NotFound
)
None
=
>
return
Err
(
NotFound
)
_
=
>
(
)
}
Node
:
:
remove
(
child
parent
SuppressObserver
:
:
Unsuppressed
)
;
Ok
(
Root
:
:
from_ref
(
child
)
)
}
fn
remove
(
node
:
&
Node
parent
:
&
Node
_suppress_observers
:
SuppressObserver
)
{
assert
!
(
node
.
GetParentNode
(
)
.
map_or
(
false
|
node_parent
|
node_parent
.
r
(
)
=
=
parent
)
)
;
parent
.
remove_child
(
node
)
;
node
.
node_removed
(
parent
.
is_in_doc
(
)
)
;
}
pub
fn
clone
(
node
:
&
Node
maybe_doc
:
Option
<
&
Document
>
clone_children
:
CloneChildrenFlag
)
-
>
Root
<
Node
>
{
let
document
=
match
maybe_doc
{
Some
(
doc
)
=
>
Root
:
:
from_ref
(
doc
)
None
=
>
node
.
owner_doc
(
)
}
;
let
copy
:
Root
<
Node
>
=
match
node
.
type_id
(
)
{
NodeTypeId
:
:
DocumentType
=
>
{
let
doctype
:
&
DocumentType
=
DocumentTypeCast
:
:
to_ref
(
node
)
.
unwrap
(
)
;
let
doctype
=
DocumentType
:
:
new
(
doctype
.
name
(
)
.
clone
(
)
Some
(
doctype
.
public_id
(
)
.
clone
(
)
)
Some
(
doctype
.
system_id
(
)
.
clone
(
)
)
document
.
r
(
)
)
;
NodeCast
:
:
from_root
(
doctype
)
}
NodeTypeId
:
:
DocumentFragment
=
>
{
let
doc_fragment
=
DocumentFragment
:
:
new
(
document
.
r
(
)
)
;
NodeCast
:
:
from_root
(
doc_fragment
)
}
NodeTypeId
:
:
CharacterData
(
CharacterDataTypeId
:
:
Comment
)
=
>
{
let
cdata
=
CharacterDataCast
:
:
to_ref
(
node
)
.
unwrap
(
)
;
let
comment
=
Comment
:
:
new
(
cdata
.
Data
(
)
document
.
r
(
)
)
;
NodeCast
:
:
from_root
(
comment
)
}
NodeTypeId
:
:
Document
=
>
{
let
document
=
DocumentCast
:
:
to_ref
(
node
)
.
unwrap
(
)
;
let
is_html_doc
=
match
document
.
is_html_document
(
)
{
true
=
>
IsHTMLDocument
:
:
HTMLDocument
false
=
>
IsHTMLDocument
:
:
NonHTMLDocument
}
;
let
window
=
document
.
window
(
)
;
let
loader
=
DocumentLoader
:
:
new
(
&
*
document
.
loader
(
)
)
;
let
document
=
Document
:
:
new
(
window
.
r
(
)
Some
(
document
.
url
(
)
)
is_html_doc
None
None
DocumentSource
:
:
NotFromParser
loader
)
;
NodeCast
:
:
from_root
(
document
)
}
NodeTypeId
:
:
Element
(
.
.
)
=
>
{
let
element
=
ElementCast
:
:
to_ref
(
node
)
.
unwrap
(
)
;
let
name
=
QualName
{
ns
:
element
.
namespace
(
)
.
clone
(
)
local
:
element
.
local_name
(
)
.
clone
(
)
}
;
let
element
=
Element
:
:
create
(
name
element
.
prefix
(
)
.
as_ref
(
)
.
map
(
|
p
|
Atom
:
:
from_slice
(
&
p
)
)
document
.
r
(
)
ElementCreator
:
:
ScriptCreated
)
;
NodeCast
:
:
from_root
(
element
)
}
NodeTypeId
:
:
CharacterData
(
CharacterDataTypeId
:
:
Text
)
=
>
{
let
cdata
=
CharacterDataCast
:
:
to_ref
(
node
)
.
unwrap
(
)
;
let
text
=
Text
:
:
new
(
cdata
.
Data
(
)
document
.
r
(
)
)
;
NodeCast
:
:
from_root
(
text
)
}
NodeTypeId
:
:
CharacterData
(
CharacterDataTypeId
:
:
ProcessingInstruction
)
=
>
{
let
pi
=
ProcessingInstructionCast
:
:
to_ref
(
node
)
.
unwrap
(
)
;
let
pi
=
ProcessingInstruction
:
:
new
(
pi
.
Target
(
)
CharacterDataCast
:
:
from_ref
(
pi
)
.
Data
(
)
document
.
r
(
)
)
;
NodeCast
:
:
from_root
(
pi
)
}
}
;
let
document
=
match
DocumentCast
:
:
to_ref
(
copy
.
r
(
)
)
{
Some
(
doc
)
=
>
Root
:
:
from_ref
(
doc
)
None
=
>
Root
:
:
from_ref
(
document
.
r
(
)
)
}
;
assert
!
(
copy
.
r
(
)
.
owner_doc
(
)
=
=
document
)
;
match
node
.
type_id
(
)
{
NodeTypeId
:
:
Document
=
>
{
let
node_doc
=
DocumentCast
:
:
to_ref
(
node
)
.
unwrap
(
)
;
let
copy_doc
=
DocumentCast
:
:
to_ref
(
copy
.
r
(
)
)
.
unwrap
(
)
;
copy_doc
.
set_encoding_name
(
node_doc
.
encoding_name
(
)
.
clone
(
)
)
;
copy_doc
.
set_quirks_mode
(
node_doc
.
quirks_mode
(
)
)
;
}
NodeTypeId
:
:
Element
(
.
.
)
=
>
{
let
node_elem
:
&
Element
=
ElementCast
:
:
to_ref
(
node
)
.
unwrap
(
)
;
let
copy_elem
:
&
Element
=
ElementCast
:
:
to_ref
(
copy
.
r
(
)
)
.
unwrap
(
)
;
let
window
=
document
.
r
(
)
.
window
(
)
;
for
ref
attr
in
node_elem
.
attrs
(
)
.
iter
(
)
{
let
attr
=
attr
.
root
(
)
;
let
newattr
=
Attr
:
:
new
(
window
.
r
(
)
attr
.
r
(
)
.
local_name
(
)
.
clone
(
)
attr
.
r
(
)
.
value
(
)
.
clone
(
)
attr
.
r
(
)
.
name
(
)
.
clone
(
)
attr
.
r
(
)
.
namespace
(
)
.
clone
(
)
attr
.
r
(
)
.
prefix
(
)
.
clone
(
)
Some
(
copy_elem
)
)
;
copy_elem
.
attrs_mut
(
)
.
push
(
JS
:
:
from_rooted
(
&
newattr
)
)
;
}
}
_
=
>
(
)
}
vtable_for
(
&
node
)
.
cloning_steps
(
copy
.
r
(
)
maybe_doc
clone_children
)
;
if
clone_children
=
=
CloneChildrenFlag
:
:
CloneChildren
{
for
child
in
node
.
children
(
)
{
let
child_copy
=
Node
:
:
clone
(
child
.
r
(
)
Some
(
document
.
r
(
)
)
clone_children
)
;
let
_inserted_node
=
Node
:
:
pre_insert
(
child_copy
.
r
(
)
copy
.
r
(
)
None
)
;
}
}
copy
}
pub
fn
collect_text_contents
<
T
:
Iterator
<
Item
=
Root
<
Node
>
>
>
(
iterator
:
T
)
-
>
String
{
let
mut
content
=
String
:
:
new
(
)
;
for
node
in
iterator
{
let
text
=
TextCast
:
:
to_ref
(
node
.
r
(
)
)
;
match
text
{
Some
(
text
)
=
>
content
.
push_str
(
&
CharacterDataCast
:
:
from_ref
(
text
)
.
Data
(
)
)
None
=
>
(
)
}
}
content
}
pub
fn
namespace_to_string
(
namespace
:
Namespace
)
-
>
Option
<
DOMString
>
{
match
namespace
{
ns
!
(
"
"
)
=
>
None
Namespace
(
ref
ns
)
=
>
Some
(
(
*
*
ns
)
.
to_owned
(
)
)
}
}
pub
fn
locate_namespace
(
node
:
&
Node
prefix
:
Option
<
DOMString
>
)
-
>
Namespace
{
fn
attr_defines_namespace
(
attr
:
&
Attr
prefix
:
&
Option
<
Atom
>
)
-
>
bool
{
*
attr
.
namespace
(
)
=
=
ns
!
(
XMLNS
)
&
&
match
(
attr
.
prefix
(
)
prefix
)
{
(
&
Some
(
ref
attr_prefix
)
&
Some
(
ref
prefix
)
)
=
>
attr_prefix
=
=
&
atom
!
(
"
xmlns
"
)
&
&
attr
.
local_name
(
)
=
=
prefix
(
&
None
&
None
)
=
>
*
attr
.
local_name
(
)
=
=
atom
!
(
"
xmlns
"
)
_
=
>
false
}
}
match
node
.
type_id
{
NodeTypeId
:
:
Element
(
_
)
=
>
{
let
element
=
ElementCast
:
:
to_ref
(
node
)
.
unwrap
(
)
;
if
*
element
.
namespace
(
)
!
=
ns
!
(
"
"
)
&
&
*
element
.
prefix
(
)
=
=
prefix
{
return
element
.
namespace
(
)
.
clone
(
)
}
let
prefix_atom
=
prefix
.
as_ref
(
)
.
map
(
|
s
|
Atom
:
:
from_slice
(
s
)
)
;
let
namespace_attr
=
element
.
attrs
(
)
.
iter
(
)
.
map
(
|
attr
|
attr
.
root
(
)
)
.
find
(
|
attr
|
attr_defines_namespace
(
attr
.
r
(
)
&
prefix_atom
)
)
;
if
let
Some
(
attr
)
=
namespace_attr
{
return
namespace_from_domstring
(
Some
(
attr
.
Value
(
)
)
)
;
}
match
node
.
GetParentElement
(
)
{
None
=
>
ns
!
(
"
"
)
Some
(
parent
)
=
>
Node
:
:
locate_namespace
(
NodeCast
:
:
from_ref
(
parent
.
r
(
)
)
prefix
)
}
}
NodeTypeId
:
:
Document
=
>
{
match
DocumentCast
:
:
to_ref
(
node
)
.
unwrap
(
)
.
GetDocumentElement
(
)
.
r
(
)
{
None
=
>
ns
!
(
"
"
)
Some
(
document_element
)
=
>
{
Node
:
:
locate_namespace
(
NodeCast
:
:
from_ref
(
document_element
)
prefix
)
}
}
}
NodeTypeId
:
:
DocumentType
=
>
ns
!
(
"
"
)
NodeTypeId
:
:
DocumentFragment
=
>
ns
!
(
"
"
)
_
=
>
match
node
.
GetParentElement
(
)
{
None
=
>
ns
!
(
"
"
)
Some
(
parent
)
=
>
Node
:
:
locate_namespace
(
NodeCast
:
:
from_ref
(
parent
.
r
(
)
)
prefix
)
}
}
}
}
impl
<
'
a
>
NodeMethods
for
&
'
a
Node
{
fn
NodeType
(
self
)
-
>
u16
{
match
self
.
type_id
{
NodeTypeId
:
:
CharacterData
(
CharacterDataTypeId
:
:
Text
)
=
>
NodeConstants
:
:
TEXT_NODE
NodeTypeId
:
:
CharacterData
(
CharacterDataTypeId
:
:
ProcessingInstruction
)
=
>
NodeConstants
:
:
PROCESSING_INSTRUCTION_NODE
NodeTypeId
:
:
CharacterData
(
CharacterDataTypeId
:
:
Comment
)
=
>
NodeConstants
:
:
COMMENT_NODE
NodeTypeId
:
:
Document
=
>
NodeConstants
:
:
DOCUMENT_NODE
NodeTypeId
:
:
DocumentType
=
>
NodeConstants
:
:
DOCUMENT_TYPE_NODE
NodeTypeId
:
:
DocumentFragment
=
>
NodeConstants
:
:
DOCUMENT_FRAGMENT_NODE
NodeTypeId
:
:
Element
(
_
)
=
>
NodeConstants
:
:
ELEMENT_NODE
}
}
fn
NodeName
(
self
)
-
>
DOMString
{
match
self
.
type_id
{
NodeTypeId
:
:
Element
(
.
.
)
=
>
{
let
elem
:
&
Element
=
ElementCast
:
:
to_ref
(
self
)
.
unwrap
(
)
;
elem
.
TagName
(
)
}
NodeTypeId
:
:
CharacterData
(
CharacterDataTypeId
:
:
Text
)
=
>
"
#
text
"
.
to_owned
(
)
NodeTypeId
:
:
CharacterData
(
CharacterDataTypeId
:
:
ProcessingInstruction
)
=
>
{
let
processing_instruction
:
&
ProcessingInstruction
=
ProcessingInstructionCast
:
:
to_ref
(
self
)
.
unwrap
(
)
;
processing_instruction
.
Target
(
)
}
NodeTypeId
:
:
CharacterData
(
CharacterDataTypeId
:
:
Comment
)
=
>
"
#
comment
"
.
to_owned
(
)
NodeTypeId
:
:
DocumentType
=
>
{
let
doctype
:
&
DocumentType
=
DocumentTypeCast
:
:
to_ref
(
self
)
.
unwrap
(
)
;
doctype
.
name
(
)
.
clone
(
)
}
NodeTypeId
:
:
DocumentFragment
=
>
"
#
document
-
fragment
"
.
to_owned
(
)
NodeTypeId
:
:
Document
=
>
"
#
document
"
.
to_owned
(
)
}
}
fn
BaseURI
(
self
)
-
>
DOMString
{
self
.
owner_doc
(
)
.
URL
(
)
}
fn
GetOwnerDocument
(
self
)
-
>
Option
<
Root
<
Document
>
>
{
match
self
.
type_id
{
NodeTypeId
:
:
CharacterData
(
.
.
)
|
NodeTypeId
:
:
Element
(
.
.
)
|
NodeTypeId
:
:
DocumentType
|
NodeTypeId
:
:
DocumentFragment
=
>
Some
(
self
.
owner_doc
(
)
)
NodeTypeId
:
:
Document
=
>
None
}
}
fn
GetParentNode
(
self
)
-
>
Option
<
Root
<
Node
>
>
{
self
.
parent_node
.
get
(
)
.
map
(
Root
:
:
from_rooted
)
}
fn
GetParentElement
(
self
)
-
>
Option
<
Root
<
Element
>
>
{
self
.
GetParentNode
(
)
.
and_then
(
ElementCast
:
:
to_root
)
}
fn
HasChildNodes
(
self
)
-
>
bool
{
self
.
first_child
.
get
(
)
.
is_some
(
)
}
fn
ChildNodes
(
self
)
-
>
Root
<
NodeList
>
{
self
.
child_list
.
or_init
(
|
|
{
let
doc
=
self
.
owner_doc
(
)
;
let
window
=
doc
.
r
(
)
.
window
(
)
;
NodeList
:
:
new_child_list
(
window
.
r
(
)
self
)
}
)
}
fn
GetFirstChild
(
self
)
-
>
Option
<
Root
<
Node
>
>
{
self
.
first_child
.
get
(
)
.
map
(
Root
:
:
from_rooted
)
}
fn
GetLastChild
(
self
)
-
>
Option
<
Root
<
Node
>
>
{
self
.
last_child
.
get
(
)
.
map
(
Root
:
:
from_rooted
)
}
fn
GetPreviousSibling
(
self
)
-
>
Option
<
Root
<
Node
>
>
{
self
.
prev_sibling
.
get
(
)
.
map
(
Root
:
:
from_rooted
)
}
fn
GetNextSibling
(
self
)
-
>
Option
<
Root
<
Node
>
>
{
self
.
next_sibling
.
get
(
)
.
map
(
Root
:
:
from_rooted
)
}
fn
GetNodeValue
(
self
)
-
>
Option
<
DOMString
>
{
match
self
.
type_id
{
NodeTypeId
:
:
CharacterData
(
.
.
)
=
>
{
let
chardata
:
&
CharacterData
=
CharacterDataCast
:
:
to_ref
(
self
)
.
unwrap
(
)
;
Some
(
chardata
.
Data
(
)
)
}
_
=
>
{
None
}
}
}
fn
SetNodeValue
(
self
val
:
Option
<
DOMString
>
)
{
match
self
.
type_id
{
NodeTypeId
:
:
CharacterData
(
.
.
)
=
>
{
self
.
SetTextContent
(
val
)
}
_
=
>
{
}
}
}
fn
GetTextContent
(
self
)
-
>
Option
<
DOMString
>
{
match
self
.
type_id
{
NodeTypeId
:
:
DocumentFragment
|
NodeTypeId
:
:
Element
(
.
.
)
=
>
{
let
content
=
Node
:
:
collect_text_contents
(
self
.
traverse_preorder
(
)
)
;
Some
(
content
)
}
NodeTypeId
:
:
CharacterData
(
.
.
)
=
>
{
let
characterdata
:
&
CharacterData
=
CharacterDataCast
:
:
to_ref
(
self
)
.
unwrap
(
)
;
Some
(
characterdata
.
Data
(
)
)
}
NodeTypeId
:
:
DocumentType
|
NodeTypeId
:
:
Document
=
>
{
None
}
}
}
fn
SetTextContent
(
self
value
:
Option
<
DOMString
>
)
{
let
value
=
value
.
unwrap_or
(
String
:
:
new
(
)
)
;
match
self
.
type_id
{
NodeTypeId
:
:
DocumentFragment
|
NodeTypeId
:
:
Element
(
.
.
)
=
>
{
let
node
=
if
value
.
len
(
)
=
=
0
{
None
}
else
{
let
document
=
self
.
owner_doc
(
)
;
Some
(
NodeCast
:
:
from_root
(
document
.
r
(
)
.
CreateTextNode
(
value
)
)
)
}
;
Node
:
:
replace_all
(
node
.
r
(
)
self
)
;
}
NodeTypeId
:
:
CharacterData
(
.
.
)
=
>
{
let
characterdata
:
&
CharacterData
=
CharacterDataCast
:
:
to_ref
(
self
)
.
unwrap
(
)
;
characterdata
.
SetData
(
value
)
;
let
document
=
self
.
owner_doc
(
)
;
document
.
r
(
)
.
content_changed
(
self
NodeDamage
:
:
OtherNodeDamage
)
;
}
NodeTypeId
:
:
DocumentType
|
NodeTypeId
:
:
Document
=
>
{
}
}
}
fn
InsertBefore
(
self
node
:
&
Node
child
:
Option
<
&
Node
>
)
-
>
Fallible
<
Root
<
Node
>
>
{
Node
:
:
pre_insert
(
node
self
child
)
}
fn
AppendChild
(
self
node
:
&
Node
)
-
>
Fallible
<
Root
<
Node
>
>
{
Node
:
:
pre_insert
(
node
self
None
)
}
fn
ReplaceChild
(
self
node
:
&
Node
child
:
&
Node
)
-
>
Fallible
<
Root
<
Node
>
>
{
match
self
.
type_id
{
NodeTypeId
:
:
Document
|
NodeTypeId
:
:
DocumentFragment
|
NodeTypeId
:
:
Element
(
.
.
)
=
>
(
)
_
=
>
return
Err
(
HierarchyRequest
)
}
if
node
.
is_inclusive_ancestor_of
(
self
)
{
return
Err
(
HierarchyRequest
)
;
}
if
!
self
.
is_parent_of
(
child
)
{
return
Err
(
NotFound
)
;
}
match
node
.
type_id
(
)
{
NodeTypeId
:
:
CharacterData
(
CharacterDataTypeId
:
:
Text
)
if
self
.
is_document
(
)
=
>
return
Err
(
HierarchyRequest
)
NodeTypeId
:
:
DocumentType
if
!
self
.
is_document
(
)
=
>
return
Err
(
HierarchyRequest
)
NodeTypeId
:
:
DocumentFragment
|
NodeTypeId
:
:
DocumentType
|
NodeTypeId
:
:
Element
(
.
.
)
|
NodeTypeId
:
:
CharacterData
(
.
.
)
=
>
(
)
NodeTypeId
:
:
Document
=
>
return
Err
(
HierarchyRequest
)
}
match
self
.
type_id
{
NodeTypeId
:
:
Document
=
>
{
match
node
.
type_id
(
)
{
NodeTypeId
:
:
DocumentFragment
=
>
{
if
node
.
children
(
)
.
any
(
|
c
|
c
.
r
(
)
.
is_text
(
)
)
{
return
Err
(
HierarchyRequest
)
;
}
match
node
.
child_elements
(
)
.
count
(
)
{
0
=
>
(
)
1
=
>
{
if
self
.
child_elements
(
)
.
any
(
|
c
|
NodeCast
:
:
from_ref
(
c
.
r
(
)
)
!
=
child
)
{
return
Err
(
HierarchyRequest
)
;
}
if
child
.
following_siblings
(
)
.
any
(
|
child
|
child
.
r
(
)
.
is_doctype
(
)
)
{
return
Err
(
HierarchyRequest
)
;
}
}
_
=
>
return
Err
(
HierarchyRequest
)
}
}
NodeTypeId
:
:
Element
(
.
.
)
=
>
{
if
self
.
child_elements
(
)
.
any
(
|
c
|
NodeCast
:
:
from_ref
(
c
.
r
(
)
)
!
=
child
)
{
return
Err
(
HierarchyRequest
)
;
}
if
child
.
following_siblings
(
)
.
any
(
|
child
|
child
.
r
(
)
.
is_doctype
(
)
)
{
return
Err
(
HierarchyRequest
)
;
}
}
NodeTypeId
:
:
DocumentType
=
>
{
if
self
.
children
(
)
.
any
(
|
c
|
c
.
r
(
)
.
is_doctype
(
)
&
&
c
.
r
(
)
!
=
child
)
{
return
Err
(
HierarchyRequest
)
;
}
if
self
.
children
(
)
.
take_while
(
|
c
|
c
.
r
(
)
!
=
child
)
.
any
(
|
c
|
c
.
r
(
)
.
is_element
(
)
)
{
return
Err
(
HierarchyRequest
)
;
}
}
NodeTypeId
:
:
CharacterData
(
.
.
)
=
>
(
)
NodeTypeId
:
:
Document
=
>
unreachable
!
(
)
}
}
_
=
>
(
)
}
if
node
=
=
child
{
return
Ok
(
Root
:
:
from_ref
(
child
)
)
;
}
let
child_next_sibling
=
child
.
next_sibling
.
get
(
)
.
map
(
Root
:
:
from_rooted
)
;
let
node_next_sibling
=
node
.
next_sibling
.
get
(
)
.
map
(
Root
:
:
from_rooted
)
;
let
reference_child
=
if
child_next_sibling
.
r
(
)
=
=
Some
(
node
)
{
node_next_sibling
.
r
(
)
}
else
{
child_next_sibling
.
r
(
)
}
;
let
document
=
document_from_node
(
self
)
;
Node
:
:
adopt
(
node
document
.
r
(
)
)
;
let
mut
nodes
:
RootedVec
<
JS
<
Node
>
>
=
RootedVec
:
:
new
(
)
;
if
node
.
type_id
(
)
=
=
NodeTypeId
:
:
DocumentFragment
{
for
child_node
in
node
.
children
(
)
{
nodes
.
push
(
JS
:
:
from_rooted
(
&
child_node
)
)
;
}
}
else
{
nodes
.
push
(
JS
:
:
from_ref
(
node
)
)
;
}
{
Node
:
:
remove
(
child
self
SuppressObserver
:
:
Suppressed
)
;
Node
:
:
insert
(
node
self
reference_child
SuppressObserver
:
:
Suppressed
)
;
}
child
.
node_removed
(
self
.
is_in_doc
(
)
)
;
for
child_node
in
&
*
nodes
{
child_node
.
root
(
)
.
r
(
)
.
node_inserted
(
)
;
}
Ok
(
Root
:
:
from_ref
(
child
)
)
}
fn
RemoveChild
(
self
node
:
&
Node
)
-
>
Fallible
<
Root
<
Node
>
>
{
Node
:
:
pre_remove
(
node
self
)
}
fn
Normalize
(
self
)
{
let
mut
prev_text
:
Option
<
Root
<
Text
>
>
=
None
;
for
child
in
self
.
children
(
)
{
match
TextCast
:
:
to_ref
(
child
.
r
(
)
)
{
Some
(
text
)
=
>
{
let
characterdata
:
&
CharacterData
=
CharacterDataCast
:
:
from_ref
(
text
)
;
if
characterdata
.
Length
(
)
=
=
0
{
self
.
remove_child
(
child
.
r
(
)
)
;
}
else
{
match
prev_text
{
Some
(
ref
text_node
)
=
>
{
let
text_node
=
text_node
.
clone
(
)
;
let
prev_characterdata
=
CharacterDataCast
:
:
from_ref
(
text_node
.
r
(
)
)
;
let
_
=
prev_characterdata
.
AppendData
(
characterdata
.
Data
(
)
)
;
self
.
remove_child
(
child
.
r
(
)
)
;
}
None
=
>
prev_text
=
Some
(
Root
:
:
from_ref
(
text
)
)
}
}
}
None
=
>
{
child
.
r
(
)
.
Normalize
(
)
;
prev_text
=
None
;
}
}
}
}
fn
CloneNode
(
self
deep
:
bool
)
-
>
Root
<
Node
>
{
Node
:
:
clone
(
self
None
if
deep
{
CloneChildrenFlag
:
:
CloneChildren
}
else
{
CloneChildrenFlag
:
:
DoNotCloneChildren
}
)
}
fn
IsEqualNode
(
self
maybe_node
:
Option
<
&
Node
>
)
-
>
bool
{
fn
is_equal_doctype
(
node
:
&
Node
other
:
&
Node
)
-
>
bool
{
let
doctype
:
&
DocumentType
=
DocumentTypeCast
:
:
to_ref
(
node
)
.
unwrap
(
)
;
let
other_doctype
:
&
DocumentType
=
DocumentTypeCast
:
:
to_ref
(
other
)
.
unwrap
(
)
;
(
*
doctype
.
name
(
)
=
=
*
other_doctype
.
name
(
)
)
&
&
(
*
doctype
.
public_id
(
)
=
=
*
other_doctype
.
public_id
(
)
)
&
&
(
*
doctype
.
system_id
(
)
=
=
*
other_doctype
.
system_id
(
)
)
}
fn
is_equal_element
(
node
:
&
Node
other
:
&
Node
)
-
>
bool
{
let
element
:
&
Element
=
ElementCast
:
:
to_ref
(
node
)
.
unwrap
(
)
;
let
other_element
:
&
Element
=
ElementCast
:
:
to_ref
(
other
)
.
unwrap
(
)
;
(
*
element
.
namespace
(
)
=
=
*
other_element
.
namespace
(
)
)
&
&
(
*
element
.
prefix
(
)
=
=
*
other_element
.
prefix
(
)
)
&
&
(
*
element
.
local_name
(
)
=
=
*
other_element
.
local_name
(
)
)
&
&
(
element
.
attrs
(
)
.
len
(
)
=
=
other_element
.
attrs
(
)
.
len
(
)
)
}
fn
is_equal_processinginstruction
(
node
:
&
Node
other
:
&
Node
)
-
>
bool
{
let
pi
:
&
ProcessingInstruction
=
ProcessingInstructionCast
:
:
to_ref
(
node
)
.
unwrap
(
)
;
let
other_pi
:
&
ProcessingInstruction
=
ProcessingInstructionCast
:
:
to_ref
(
other
)
.
unwrap
(
)
;
(
*
pi
.
target
(
)
=
=
*
other_pi
.
target
(
)
)
&
&
(
*
CharacterDataCast
:
:
from_ref
(
pi
)
.
data
(
)
=
=
*
CharacterDataCast
:
:
from_ref
(
other_pi
)
.
data
(
)
)
}
fn
is_equal_characterdata
(
node
:
&
Node
other
:
&
Node
)
-
>
bool
{
let
characterdata
:
&
CharacterData
=
CharacterDataCast
:
:
to_ref
(
node
)
.
unwrap
(
)
;
let
other_characterdata
:
&
CharacterData
=
CharacterDataCast
:
:
to_ref
(
other
)
.
unwrap
(
)
;
*
characterdata
.
data
(
)
=
=
*
other_characterdata
.
data
(
)
}
fn
is_equal_element_attrs
(
node
:
&
Node
other
:
&
Node
)
-
>
bool
{
let
element
:
&
Element
=
ElementCast
:
:
to_ref
(
node
)
.
unwrap
(
)
;
let
other_element
:
&
Element
=
ElementCast
:
:
to_ref
(
other
)
.
unwrap
(
)
;
assert
!
(
element
.
attrs
(
)
.
len
(
)
=
=
other_element
.
attrs
(
)
.
len
(
)
)
;
let
attrs
=
element
.
attrs
(
)
;
attrs
.
iter
(
)
.
all
(
|
attr
|
{
let
attr
=
attr
.
root
(
)
;
other_element
.
attrs
(
)
.
iter
(
)
.
any
(
|
other_attr
|
{
let
other_attr
=
other_attr
.
root
(
)
;
(
*
attr
.
r
(
)
.
namespace
(
)
=
=
*
other_attr
.
r
(
)
.
namespace
(
)
)
&
&
(
attr
.
r
(
)
.
local_name
(
)
=
=
other_attr
.
r
(
)
.
local_name
(
)
)
&
&
(
*
*
attr
.
r
(
)
.
value
(
)
=
=
*
*
other_attr
.
r
(
)
.
value
(
)
)
}
)
}
)
}
fn
is_equal_node
(
this
:
&
Node
node
:
&
Node
)
-
>
bool
{
if
this
.
type_id
(
)
!
=
node
.
type_id
(
)
{
return
false
;
}
match
node
.
type_id
(
)
{
NodeTypeId
:
:
DocumentType
if
!
is_equal_doctype
(
this
node
)
=
>
return
false
NodeTypeId
:
:
Element
(
.
.
)
if
!
is_equal_element
(
this
node
)
=
>
return
false
NodeTypeId
:
:
CharacterData
(
CharacterDataTypeId
:
:
ProcessingInstruction
)
if
!
is_equal_processinginstruction
(
this
node
)
=
>
return
false
NodeTypeId
:
:
CharacterData
(
CharacterDataTypeId
:
:
Text
)
|
NodeTypeId
:
:
CharacterData
(
CharacterDataTypeId
:
:
Comment
)
if
!
is_equal_characterdata
(
this
node
)
=
>
return
false
NodeTypeId
:
:
Element
(
.
.
)
if
!
is_equal_element_attrs
(
this
node
)
=
>
return
false
_
=
>
(
)
}
if
this
.
children
(
)
.
count
(
)
!
=
node
.
children
(
)
.
count
(
)
{
return
false
;
}
this
.
children
(
)
.
zip
(
node
.
children
(
)
)
.
all
(
|
(
child
other_child
)
|
{
is_equal_node
(
child
.
r
(
)
other_child
.
r
(
)
)
}
)
}
match
maybe_node
{
None
=
>
false
Some
(
node
)
=
>
is_equal_node
(
self
node
)
}
}
fn
CompareDocumentPosition
(
self
other
:
&
Node
)
-
>
u16
{
if
self
=
=
other
{
0
}
else
{
let
mut
lastself
=
Root
:
:
from_ref
(
self
)
;
let
mut
lastother
=
Root
:
:
from_ref
(
other
)
;
for
ancestor
in
self
.
ancestors
(
)
{
if
ancestor
.
r
(
)
=
=
other
{
return
NodeConstants
:
:
DOCUMENT_POSITION_CONTAINS
+
NodeConstants
:
:
DOCUMENT_POSITION_PRECEDING
;
}
lastself
=
ancestor
;
}
for
ancestor
in
other
.
ancestors
(
)
{
if
ancestor
.
r
(
)
=
=
self
{
return
NodeConstants
:
:
DOCUMENT_POSITION_CONTAINED_BY
+
NodeConstants
:
:
DOCUMENT_POSITION_FOLLOWING
;
}
lastother
=
ancestor
;
}
if
lastself
!
=
lastother
{
let
abstract_uint
:
uintptr_t
=
as_uintptr
(
&
self
)
;
let
other_uint
:
uintptr_t
=
as_uintptr
(
&
*
other
)
;
let
random
=
if
abstract_uint
<
other_uint
{
NodeConstants
:
:
DOCUMENT_POSITION_FOLLOWING
}
else
{
NodeConstants
:
:
DOCUMENT_POSITION_PRECEDING
}
;
return
random
+
NodeConstants
:
:
DOCUMENT_POSITION_DISCONNECTED
+
NodeConstants
:
:
DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC
;
}
for
child
in
lastself
.
r
(
)
.
traverse_preorder
(
)
{
if
child
.
r
(
)
=
=
other
{
return
NodeConstants
:
:
DOCUMENT_POSITION_PRECEDING
;
}
if
child
.
r
(
)
=
=
self
{
return
NodeConstants
:
:
DOCUMENT_POSITION_FOLLOWING
;
}
}
unreachable
!
(
)
}
}
fn
Contains
(
self
maybe_other
:
Option
<
&
Node
>
)
-
>
bool
{
match
maybe_other
{
None
=
>
false
Some
(
other
)
=
>
self
.
is_inclusive_ancestor_of
(
other
)
}
}
fn
LookupPrefix
(
self
namespace
:
Option
<
DOMString
>
)
-
>
Option
<
DOMString
>
{
let
namespace
=
namespace_from_domstring
(
namespace
)
;
if
namespace
=
=
ns
!
(
"
"
)
{
return
None
;
}
match
self
.
type_id
(
)
{
NodeTypeId
:
:
Element
(
.
.
)
=
>
ElementCast
:
:
to_ref
(
self
)
.
unwrap
(
)
.
lookup_prefix
(
namespace
)
NodeTypeId
:
:
Document
=
>
{
DocumentCast
:
:
to_ref
(
self
)
.
unwrap
(
)
.
GetDocumentElement
(
)
.
and_then
(
|
element
|
{
element
.
r
(
)
.
lookup_prefix
(
namespace
)
}
)
}
NodeTypeId
:
:
DocumentType
|
NodeTypeId
:
:
DocumentFragment
=
>
None
_
=
>
{
self
.
GetParentElement
(
)
.
and_then
(
|
element
|
{
element
.
r
(
)
.
lookup_prefix
(
namespace
)
}
)
}
}
}
fn
LookupNamespaceURI
(
self
prefix
:
Option
<
DOMString
>
)
-
>
Option
<
DOMString
>
{
let
prefix
=
match
prefix
{
Some
(
ref
p
)
if
p
.
is_empty
(
)
=
>
None
pre
=
>
pre
}
;
Node
:
:
namespace_to_string
(
Node
:
:
locate_namespace
(
self
prefix
)
)
}
fn
IsDefaultNamespace
(
self
namespace
:
Option
<
DOMString
>
)
-
>
bool
{
let
namespace
=
namespace_from_domstring
(
namespace
)
;
Node
:
:
locate_namespace
(
self
None
)
=
=
namespace
}
}
#
[
allow
(
raw_pointer_derive
)
]
#
[
derive
(
Clone
PartialEq
Eq
Copy
)
]
pub
struct
TrustedNodeAddress
(
pub
*
const
c_void
)
;
#
[
allow
(
unsafe_code
)
]
unsafe
impl
Send
for
TrustedNodeAddress
{
}
pub
fn
document_from_node
<
T
:
NodeBase
+
Reflectable
>
(
derived
:
&
T
)
-
>
Root
<
Document
>
{
let
node
:
&
Node
=
NodeCast
:
:
from_ref
(
derived
)
;
node
.
owner_doc
(
)
}
pub
fn
window_from_node
<
T
:
NodeBase
+
Reflectable
>
(
derived
:
&
T
)
-
>
Root
<
Window
>
{
let
document
=
document_from_node
(
derived
)
;
document
.
r
(
)
.
window
(
)
}
impl
<
'
a
>
VirtualMethods
for
&
'
a
Node
{
fn
super_type
<
'
b
>
(
&
'
b
self
)
-
>
Option
<
&
'
b
VirtualMethods
>
{
let
eventtarget
:
&
&
EventTarget
=
EventTargetCast
:
:
from_borrowed_ref
(
self
)
;
Some
(
eventtarget
as
&
VirtualMethods
)
}
}
impl
<
'
a
>
:
:
selectors
:
:
Node
for
&
'
a
Node
{
type
Element
=
&
'
a
Element
;
fn
parent_node
(
&
self
)
-
>
Option
<
&
'
a
Node
>
{
(
*
self
)
.
parent_node
.
get
(
)
.
map
(
|
node
|
node
.
root
(
)
.
get_unsound_ref_forever
(
)
)
}
fn
first_child
(
&
self
)
-
>
Option
<
&
'
a
Node
>
{
(
*
self
)
.
first_child
.
get
(
)
.
map
(
|
node
|
node
.
root
(
)
.
get_unsound_ref_forever
(
)
)
}
fn
last_child
(
&
self
)
-
>
Option
<
&
'
a
Node
>
{
(
*
self
)
.
last_child
.
get
(
)
.
map
(
|
node
|
node
.
root
(
)
.
get_unsound_ref_forever
(
)
)
}
fn
prev_sibling
(
&
self
)
-
>
Option
<
&
'
a
Node
>
{
(
*
self
)
.
prev_sibling
.
get
(
)
.
map
(
|
node
|
node
.
root
(
)
.
get_unsound_ref_forever
(
)
)
}
fn
next_sibling
(
&
self
)
-
>
Option
<
&
'
a
Node
>
{
(
*
self
)
.
next_sibling
.
get
(
)
.
map
(
|
node
|
node
.
root
(
)
.
get_unsound_ref_forever
(
)
)
}
fn
is_document
(
&
self
)
-
>
bool
{
DocumentDerived
:
:
is_document
(
*
self
)
}
fn
as_element
(
&
self
)
-
>
Option
<
Self
:
:
Element
>
{
ElementCast
:
:
to_ref
(
*
self
)
}
fn
is_element_or_non_empty_text
(
&
self
)
-
>
bool
{
if
self
.
is_text
(
)
{
self
.
GetTextContent
(
)
.
map_or
(
false
|
s
|
!
s
.
is_empty
(
)
)
}
else
{
self
.
is_element
(
)
}
}
}
pub
trait
DisabledStateHelpers
{
fn
check_ancestors_disabled_state_for_form_control
(
self
)
;
fn
check_parent_disabled_state_for_option
(
self
)
;
fn
check_disabled_attribute
(
self
)
;
}
impl
<
'
a
>
DisabledStateHelpers
for
&
'
a
Node
{
fn
check_ancestors_disabled_state_for_form_control
(
self
)
{
if
self
.
get_disabled_state
(
)
{
return
;
}
for
ancestor
in
self
.
ancestors
(
)
{
let
ancestor
=
ancestor
;
let
ancestor
=
ancestor
.
r
(
)
;
if
!
ancestor
.
is_htmlfieldsetelement
(
)
{
continue
;
}
if
!
ancestor
.
get_disabled_state
(
)
{
continue
;
}
if
ancestor
.
is_parent_of
(
self
)
{
self
.
set_disabled_state
(
true
)
;
self
.
set_enabled_state
(
false
)
;
return
;
}
match
ancestor
.
children
(
)
.
find
(
|
child
|
child
.
r
(
)
.
is_htmllegendelement
(
)
)
{
Some
(
ref
legend
)
=
>
{
if
self
.
ancestors
(
)
.
any
(
|
ancestor
|
ancestor
=
=
*
legend
)
{
continue
;
}
}
None
=
>
(
)
}
self
.
set_disabled_state
(
true
)
;
self
.
set_enabled_state
(
false
)
;
return
;
}
}
fn
check_parent_disabled_state_for_option
(
self
)
{
if
self
.
get_disabled_state
(
)
{
return
;
}
if
let
Some
(
ref
parent
)
=
self
.
GetParentNode
(
)
{
if
parent
.
r
(
)
.
is_htmloptgroupelement
(
)
&
&
parent
.
r
(
)
.
get_disabled_state
(
)
{
self
.
set_disabled_state
(
true
)
;
self
.
set_enabled_state
(
false
)
;
}
}
}
fn
check_disabled_attribute
(
self
)
{
let
elem
=
ElementCast
:
:
to_ref
(
self
)
.
unwrap
(
)
;
let
has_disabled_attrib
=
elem
.
has_attribute
(
&
atom
!
(
"
disabled
"
)
)
;
self
.
set_disabled_state
(
has_disabled_attrib
)
;
self
.
set_enabled_state
(
!
has_disabled_attrib
)
;
}
}
#
[
derive
(
Copy
Clone
PartialEq
)
]
pub
enum
NodeDamage
{
NodeStyleDamaged
OtherNodeDamage
}
