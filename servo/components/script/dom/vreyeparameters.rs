use
dom
:
:
bindings
:
:
cell
:
:
DomRefCell
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
VREyeParametersBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
VREyeParametersBinding
:
:
VREyeParametersMethods
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflector
reflect_dom_object
}
;
use
dom
:
:
bindings
:
:
root
:
:
{
Dom
DomRoot
}
;
use
dom
:
:
globalscope
:
:
GlobalScope
;
use
dom
:
:
vrfieldofview
:
:
VRFieldOfView
;
use
dom_struct
:
:
dom_struct
;
use
js
:
:
jsapi
:
:
{
Heap
JSContext
JSObject
}
;
use
js
:
:
typedarray
:
:
{
Float32Array
CreateWith
}
;
use
std
:
:
default
:
:
Default
;
use
std
:
:
ptr
;
use
std
:
:
ptr
:
:
NonNull
;
use
webvr_traits
:
:
WebVREyeParameters
;
#
[
dom_struct
]
pub
struct
VREyeParameters
{
reflector_
:
Reflector
#
[
ignore_malloc_size_of
=
"
Defined
in
rust
-
webvr
"
]
parameters
:
DomRefCell
<
WebVREyeParameters
>
offset
:
Heap
<
*
mut
JSObject
>
fov
:
Dom
<
VRFieldOfView
>
}
unsafe_no_jsmanaged_fields
!
(
WebVREyeParameters
)
;
impl
VREyeParameters
{
fn
new_inherited
(
parameters
:
WebVREyeParameters
fov
:
&
VRFieldOfView
)
-
>
VREyeParameters
{
VREyeParameters
{
reflector_
:
Reflector
:
:
new
(
)
parameters
:
DomRefCell
:
:
new
(
parameters
)
offset
:
Heap
:
:
default
(
)
fov
:
Dom
:
:
from_ref
(
&
*
fov
)
}
}
#
[
allow
(
unsafe_code
)
]
pub
fn
new
(
parameters
:
WebVREyeParameters
global
:
&
GlobalScope
)
-
>
DomRoot
<
VREyeParameters
>
{
let
fov
=
VRFieldOfView
:
:
new
(
&
global
parameters
.
field_of_view
.
clone
(
)
)
;
let
cx
=
global
.
get_cx
(
)
;
rooted
!
(
in
(
cx
)
let
mut
array
=
ptr
:
:
null_mut
:
:
<
JSObject
>
(
)
)
;
unsafe
{
let
_
=
Float32Array
:
:
create
(
cx
CreateWith
:
:
Slice
(
&
parameters
.
offset
)
array
.
handle_mut
(
)
)
;
}
let
eye_parameters
=
reflect_dom_object
(
Box
:
:
new
(
VREyeParameters
:
:
new_inherited
(
parameters
&
fov
)
)
global
VREyeParametersBinding
:
:
Wrap
)
;
eye_parameters
.
offset
.
set
(
array
.
get
(
)
)
;
eye_parameters
}
}
impl
VREyeParametersMethods
for
VREyeParameters
{
#
[
allow
(
unsafe_code
)
]
unsafe
fn
Offset
(
&
self
_cx
:
*
mut
JSContext
)
-
>
NonNull
<
JSObject
>
{
NonNull
:
:
new_unchecked
(
self
.
offset
.
get
(
)
)
}
fn
FieldOfView
(
&
self
)
-
>
DomRoot
<
VRFieldOfView
>
{
DomRoot
:
:
from_ref
(
&
*
self
.
fov
)
}
fn
RenderWidth
(
&
self
)
-
>
u32
{
self
.
parameters
.
borrow
(
)
.
render_width
}
fn
RenderHeight
(
&
self
)
-
>
u32
{
self
.
parameters
.
borrow
(
)
.
render_height
}
}
