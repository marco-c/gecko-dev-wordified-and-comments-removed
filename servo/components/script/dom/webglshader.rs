use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
WebGLShaderBinding
;
use
dom
:
:
bindings
:
:
global
:
:
GlobalRef
;
use
dom
:
:
bindings
:
:
js
:
:
{
Temporary
JSRef
}
;
use
dom
:
:
bindings
:
:
utils
:
:
reflect_dom_object
;
use
dom
:
:
webglobject
:
:
WebGLObject
;
#
[
dom_struct
]
pub
struct
WebGLShader
{
webgl_object
:
WebGLObject
id
:
u32
}
impl
WebGLShader
{
fn
new_inherited
(
id
:
u32
)
-
>
WebGLShader
{
WebGLShader
{
webgl_object
:
WebGLObject
:
:
new_inherited
(
)
id
:
id
}
}
pub
fn
new
(
global
:
GlobalRef
id
:
u32
)
-
>
Temporary
<
WebGLShader
>
{
reflect_dom_object
(
box
WebGLShader
:
:
new_inherited
(
id
)
global
WebGLShaderBinding
:
:
Wrap
)
}
}
pub
trait
WebGLShaderHelpers
{
fn
get_id
(
&
self
)
-
>
u32
;
}
impl
<
'
a
>
WebGLShaderHelpers
for
JSRef
<
'
a
WebGLShader
>
{
fn
get_id
(
&
self
)
-
>
u32
{
self
.
id
}
}
