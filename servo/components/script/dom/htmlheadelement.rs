use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
HTMLHeadElementBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
HTMLHeadElementDerived
;
use
dom
:
:
bindings
:
:
js
:
:
{
JSRef
Temporary
}
;
use
dom
:
:
bindings
:
:
utils
:
:
{
Reflectable
Reflector
}
;
use
dom
:
:
document
:
:
Document
;
use
dom
:
:
element
:
:
HTMLHeadElementTypeId
;
use
dom
:
:
eventtarget
:
:
{
EventTarget
NodeTargetTypeId
}
;
use
dom
:
:
htmlelement
:
:
HTMLElement
;
use
dom
:
:
node
:
:
{
Node
ElementNodeTypeId
}
;
use
servo_util
:
:
str
:
:
DOMString
;
#
[
dom_struct
]
pub
struct
HTMLHeadElement
{
htmlelement
:
HTMLElement
}
impl
HTMLHeadElementDerived
for
EventTarget
{
fn
is_htmlheadelement
(
&
self
)
-
>
bool
{
*
self
.
type_id
(
)
=
=
NodeTargetTypeId
(
ElementNodeTypeId
(
HTMLHeadElementTypeId
)
)
}
}
impl
HTMLHeadElement
{
fn
new_inherited
(
localName
:
DOMString
prefix
:
Option
<
DOMString
>
document
:
JSRef
<
Document
>
)
-
>
HTMLHeadElement
{
HTMLHeadElement
{
htmlelement
:
HTMLElement
:
:
new_inherited
(
HTMLHeadElementTypeId
localName
prefix
document
)
}
}
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new
(
localName
:
DOMString
prefix
:
Option
<
DOMString
>
document
:
JSRef
<
Document
>
)
-
>
Temporary
<
HTMLHeadElement
>
{
let
element
=
HTMLHeadElement
:
:
new_inherited
(
localName
prefix
document
)
;
Node
:
:
reflect_node
(
box
element
document
HTMLHeadElementBinding
:
:
Wrap
)
}
}
impl
Reflectable
for
HTMLHeadElement
{
fn
reflector
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
Reflector
{
self
.
htmlelement
.
reflector
(
)
}
}
