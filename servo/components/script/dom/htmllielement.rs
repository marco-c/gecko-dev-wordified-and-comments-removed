use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
HTMLLIElementBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
HTMLLIElementBinding
:
:
HTMLLIElementMethods
;
use
dom
:
:
bindings
:
:
inheritance
:
:
Castable
;
use
dom
:
:
bindings
:
:
root
:
:
DomRoot
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
document
:
:
Document
;
use
dom
:
:
htmlelement
:
:
HTMLElement
;
use
dom
:
:
node
:
:
Node
;
use
dom
:
:
virtualmethods
:
:
VirtualMethods
;
use
dom_struct
:
:
dom_struct
;
use
html5ever
:
:
{
LocalName
Prefix
}
;
use
style
:
:
attr
:
:
AttrValue
;
#
[
dom_struct
]
pub
struct
HTMLLIElement
{
htmlelement
:
HTMLElement
}
impl
HTMLLIElement
{
fn
new_inherited
(
local_name
:
LocalName
prefix
:
Option
<
Prefix
>
document
:
&
Document
)
-
>
HTMLLIElement
{
HTMLLIElement
{
htmlelement
:
HTMLElement
:
:
new_inherited
(
local_name
prefix
document
)
}
}
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new
(
local_name
:
LocalName
prefix
:
Option
<
Prefix
>
document
:
&
Document
)
-
>
DomRoot
<
HTMLLIElement
>
{
Node
:
:
reflect_node
(
Box
:
:
new
(
HTMLLIElement
:
:
new_inherited
(
local_name
prefix
document
)
)
document
HTMLLIElementBinding
:
:
Wrap
)
}
}
impl
HTMLLIElementMethods
for
HTMLLIElement
{
make_int_getter
!
(
Value
"
value
"
)
;
make_int_setter
!
(
SetValue
"
value
"
)
;
}
impl
VirtualMethods
for
HTMLLIElement
{
fn
super_type
(
&
self
)
-
>
Option
<
&
VirtualMethods
>
{
Some
(
self
.
upcast
:
:
<
HTMLElement
>
(
)
as
&
VirtualMethods
)
}
fn
parse_plain_attribute
(
&
self
name
:
&
LocalName
value
:
DOMString
)
-
>
AttrValue
{
match
name
{
&
local_name
!
(
"
value
"
)
=
>
AttrValue
:
:
from_i32
(
value
.
into
(
)
0
)
_
=
>
self
.
super_type
(
)
.
unwrap
(
)
.
parse_plain_attribute
(
name
value
)
}
}
}
