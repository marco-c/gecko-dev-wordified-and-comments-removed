use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
CSSGroupingRuleBinding
:
:
CSSGroupingRuleMethods
;
use
dom
:
:
bindings
:
:
error
:
:
{
ErrorResult
Fallible
}
;
use
dom
:
:
bindings
:
:
inheritance
:
:
Castable
;
use
dom
:
:
bindings
:
:
js
:
:
{
MutNullableJS
Root
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
DomObject
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
cssrule
:
:
CSSRule
;
use
dom
:
:
cssrulelist
:
:
{
CSSRuleList
RulesSource
}
;
use
dom
:
:
cssstylesheet
:
:
CSSStyleSheet
;
use
dom_struct
:
:
dom_struct
;
use
servo_arc
:
:
Arc
;
use
style
:
:
shared_lock
:
:
{
SharedRwLock
Locked
}
;
use
style
:
:
stylesheets
:
:
CssRules
as
StyleCssRules
;
#
[
dom_struct
]
pub
struct
CSSGroupingRule
{
cssrule
:
CSSRule
#
[
ignore_heap_size_of
=
"
Arc
"
]
rules
:
Arc
<
Locked
<
StyleCssRules
>
>
rulelist
:
MutNullableJS
<
CSSRuleList
>
}
impl
CSSGroupingRule
{
pub
fn
new_inherited
(
parent_stylesheet
:
&
CSSStyleSheet
rules
:
Arc
<
Locked
<
StyleCssRules
>
>
)
-
>
CSSGroupingRule
{
CSSGroupingRule
{
cssrule
:
CSSRule
:
:
new_inherited
(
parent_stylesheet
)
rules
:
rules
rulelist
:
MutNullableJS
:
:
new
(
None
)
}
}
fn
rulelist
(
&
self
)
-
>
Root
<
CSSRuleList
>
{
let
parent_stylesheet
=
self
.
upcast
:
:
<
CSSRule
>
(
)
.
parent_stylesheet
(
)
;
self
.
rulelist
.
or_init
(
|
|
CSSRuleList
:
:
new
(
self
.
global
(
)
.
as_window
(
)
parent_stylesheet
RulesSource
:
:
Rules
(
self
.
rules
.
clone
(
)
)
)
)
}
pub
fn
parent_stylesheet
(
&
self
)
-
>
&
CSSStyleSheet
{
self
.
cssrule
.
parent_stylesheet
(
)
}
pub
fn
shared_lock
(
&
self
)
-
>
&
SharedRwLock
{
self
.
cssrule
.
shared_lock
(
)
}
}
impl
CSSGroupingRuleMethods
for
CSSGroupingRule
{
fn
CssRules
(
&
self
)
-
>
Root
<
CSSRuleList
>
{
self
.
rulelist
(
)
}
fn
InsertRule
(
&
self
rule
:
DOMString
index
:
u32
)
-
>
Fallible
<
u32
>
{
self
.
rulelist
(
)
.
insert_rule
(
&
rule
index
true
)
}
fn
DeleteRule
(
&
self
index
:
u32
)
-
>
ErrorResult
{
self
.
rulelist
(
)
.
remove_rule
(
index
)
}
}
