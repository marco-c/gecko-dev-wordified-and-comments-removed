use
devtools_traits
:
:
ScriptToDevtoolsControlMsg
;
use
dom
:
:
bindings
:
:
inheritance
:
:
Castable
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
globalscope
:
:
GlobalScope
;
use
dom
:
:
testworkletglobalscope
:
:
TestWorkletGlobalScope
;
use
dom
:
:
testworkletglobalscope
:
:
TestWorkletTask
;
use
dom_struct
:
:
dom_struct
;
use
ipc_channel
:
:
ipc
;
use
ipc_channel
:
:
ipc
:
:
IpcSender
;
use
js
:
:
jsval
:
:
UndefinedValue
;
use
js
:
:
rust
:
:
Runtime
;
use
microtask
:
:
Microtask
;
use
microtask
:
:
MicrotaskQueue
;
use
msg
:
:
constellation_msg
:
:
PipelineId
;
use
net_traits
:
:
ResourceThreads
;
use
profile_traits
:
:
mem
;
use
profile_traits
:
:
time
;
use
script_traits
:
:
ScriptMsg
;
use
script_traits
:
:
TimerSchedulerMsg
;
use
servo_url
:
:
ImmutableOrigin
;
use
servo_url
:
:
MutableOrigin
;
use
servo_url
:
:
ServoUrl
;
#
[
dom_struct
]
pub
struct
WorkletGlobalScope
{
globalscope
:
GlobalScope
base_url
:
ServoUrl
microtask_queue
:
MicrotaskQueue
}
impl
WorkletGlobalScope
{
pub
fn
new_inherited
(
pipeline_id
:
PipelineId
base_url
:
ServoUrl
init
:
&
WorkletGlobalScopeInit
)
-
>
WorkletGlobalScope
{
let
(
timer_event_chan
_
)
=
ipc
:
:
channel
(
)
.
unwrap
(
)
;
WorkletGlobalScope
{
globalscope
:
GlobalScope
:
:
new_inherited
(
pipeline_id
init
.
devtools_chan
.
clone
(
)
init
.
mem_profiler_chan
.
clone
(
)
init
.
time_profiler_chan
.
clone
(
)
init
.
constellation_chan
.
clone
(
)
init
.
scheduler_chan
.
clone
(
)
init
.
resource_threads
.
clone
(
)
timer_event_chan
MutableOrigin
:
:
new
(
ImmutableOrigin
:
:
new_opaque
(
)
)
)
base_url
:
base_url
microtask_queue
:
MicrotaskQueue
:
:
default
(
)
}
}
pub
fn
evaluate_js
(
&
self
script
:
&
str
)
-
>
bool
{
debug
!
(
"
Evaluating
JS
.
"
)
;
rooted
!
(
in
(
self
.
globalscope
.
get_cx
(
)
)
let
mut
rval
=
UndefinedValue
(
)
)
;
self
.
globalscope
.
evaluate_js_on_global_with_result
(
&
*
script
rval
.
handle_mut
(
)
)
}
pub
fn
base_url
(
&
self
)
-
>
ServoUrl
{
self
.
base_url
.
clone
(
)
}
pub
fn
enqueue_microtask
(
&
self
job
:
Microtask
)
{
self
.
microtask_queue
.
enqueue
(
job
)
;
}
pub
fn
perform_a_microtask_checkpoint
(
&
self
)
{
self
.
microtask_queue
.
checkpoint
(
|
id
|
{
let
global
=
self
.
upcast
:
:
<
GlobalScope
>
(
)
;
assert_eq
!
(
global
.
pipeline_id
(
)
id
)
;
Some
(
Root
:
:
from_ref
(
global
)
)
}
)
;
}
pub
fn
perform_a_worklet_task
(
&
self
task
:
WorkletTask
)
{
match
task
{
WorkletTask
:
:
Test
(
task
)
=
>
match
self
.
downcast
:
:
<
TestWorkletGlobalScope
>
(
)
{
Some
(
global
)
=
>
global
.
perform_a_worklet_task
(
task
)
None
=
>
warn
!
(
"
This
is
not
a
test
worklet
.
"
)
}
}
}
}
#
[
derive
(
Clone
)
]
pub
struct
WorkletGlobalScopeInit
{
pub
resource_threads
:
ResourceThreads
pub
mem_profiler_chan
:
mem
:
:
ProfilerChan
pub
time_profiler_chan
:
time
:
:
ProfilerChan
pub
devtools_chan
:
Option
<
IpcSender
<
ScriptToDevtoolsControlMsg
>
>
pub
constellation_chan
:
IpcSender
<
ScriptMsg
>
pub
scheduler_chan
:
IpcSender
<
TimerSchedulerMsg
>
}
#
[
derive
(
Clone
Copy
Debug
HeapSizeOf
JSTraceable
)
]
pub
enum
WorkletGlobalScopeType
{
Test
}
impl
WorkletGlobalScopeType
{
pub
fn
new
(
&
self
runtime
:
&
Runtime
pipeline_id
:
PipelineId
base_url
:
ServoUrl
init
:
&
WorkletGlobalScopeInit
)
-
>
Root
<
WorkletGlobalScope
>
{
match
*
self
{
WorkletGlobalScopeType
:
:
Test
=
>
Root
:
:
upcast
(
TestWorkletGlobalScope
:
:
new
(
runtime
pipeline_id
base_url
init
)
)
}
}
}
pub
enum
WorkletTask
{
Test
(
TestWorkletTask
)
}
