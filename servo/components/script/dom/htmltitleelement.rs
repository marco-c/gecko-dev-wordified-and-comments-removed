use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
HTMLTitleElementBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
HTMLTitleElementBinding
:
:
HTMLTitleElementMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
NodeBinding
:
:
NodeMethods
;
use
dom
:
:
bindings
:
:
inheritance
:
:
Castable
;
use
dom
:
:
bindings
:
:
root
:
:
DomRoot
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
document
:
:
Document
;
use
dom
:
:
htmlelement
:
:
HTMLElement
;
use
dom
:
:
node
:
:
{
ChildrenMutation
Node
}
;
use
dom
:
:
virtualmethods
:
:
VirtualMethods
;
use
dom_struct
:
:
dom_struct
;
use
html5ever
:
:
{
LocalName
Prefix
}
;
#
[
dom_struct
]
pub
struct
HTMLTitleElement
{
htmlelement
:
HTMLElement
}
impl
HTMLTitleElement
{
fn
new_inherited
(
local_name
:
LocalName
prefix
:
Option
<
Prefix
>
document
:
&
Document
)
-
>
HTMLTitleElement
{
HTMLTitleElement
{
htmlelement
:
HTMLElement
:
:
new_inherited
(
local_name
prefix
document
)
}
}
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new
(
local_name
:
LocalName
prefix
:
Option
<
Prefix
>
document
:
&
Document
)
-
>
DomRoot
<
HTMLTitleElement
>
{
Node
:
:
reflect_node
(
box
HTMLTitleElement
:
:
new_inherited
(
local_name
prefix
document
)
document
HTMLTitleElementBinding
:
:
Wrap
)
}
}
impl
HTMLTitleElementMethods
for
HTMLTitleElement
{
fn
Text
(
&
self
)
-
>
DOMString
{
self
.
upcast
:
:
<
Node
>
(
)
.
child_text_content
(
)
}
fn
SetText
(
&
self
value
:
DOMString
)
{
self
.
upcast
:
:
<
Node
>
(
)
.
SetTextContent
(
Some
(
value
)
)
}
}
impl
VirtualMethods
for
HTMLTitleElement
{
fn
super_type
(
&
self
)
-
>
Option
<
&
VirtualMethods
>
{
Some
(
self
.
upcast
:
:
<
HTMLElement
>
(
)
as
&
VirtualMethods
)
}
fn
children_changed
(
&
self
mutation
:
&
ChildrenMutation
)
{
if
let
Some
(
ref
s
)
=
self
.
super_type
(
)
{
s
.
children_changed
(
mutation
)
;
}
let
node
=
self
.
upcast
:
:
<
Node
>
(
)
;
if
node
.
is_in_doc
(
)
{
node
.
owner_doc
(
)
.
title_changed
(
)
;
}
}
fn
bind_to_tree
(
&
self
tree_in_doc
:
bool
)
{
if
let
Some
(
ref
s
)
=
self
.
super_type
(
)
{
s
.
bind_to_tree
(
tree_in_doc
)
;
}
let
node
=
self
.
upcast
:
:
<
Node
>
(
)
;
if
tree_in_doc
{
node
.
owner_doc
(
)
.
title_changed
(
)
;
}
}
}
