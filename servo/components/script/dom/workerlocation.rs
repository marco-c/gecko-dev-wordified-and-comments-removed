use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
WorkerLocationBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
WorkerLocationBinding
:
:
WorkerLocationMethods
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
global
:
:
GlobalRef
;
use
dom
:
:
bindings
:
:
str
:
:
USVString
;
use
dom
:
:
bindings
:
:
utils
:
:
{
Reflector
reflect_dom_object
}
;
use
dom
:
:
urlhelper
:
:
UrlHelper
;
use
dom
:
:
workerglobalscope
:
:
WorkerGlobalScope
;
use
url
:
:
Url
;
use
util
:
:
str
:
:
DOMString
;
#
[
dom_struct
]
#
[
derive
(
HeapSizeOf
)
]
pub
struct
WorkerLocation
{
reflector_
:
Reflector
url
:
Url
}
impl
WorkerLocation
{
fn
new_inherited
(
url
:
Url
)
-
>
WorkerLocation
{
WorkerLocation
{
reflector_
:
Reflector
:
:
new
(
)
url
:
url
}
}
pub
fn
new
(
global
:
&
WorkerGlobalScope
url
:
Url
)
-
>
Root
<
WorkerLocation
>
{
reflect_dom_object
(
box
WorkerLocation
:
:
new_inherited
(
url
)
GlobalRef
:
:
Worker
(
global
)
WorkerLocationBinding
:
:
Wrap
)
}
}
impl
<
'
a
>
WorkerLocationMethods
for
&
'
a
WorkerLocation
{
fn
Hash
(
self
)
-
>
USVString
{
UrlHelper
:
:
Hash
(
&
self
.
url
)
}
fn
Host
(
self
)
-
>
USVString
{
UrlHelper
:
:
Host
(
&
self
.
url
)
}
fn
Hostname
(
self
)
-
>
USVString
{
UrlHelper
:
:
Hostname
(
&
self
.
url
)
}
fn
Href
(
self
)
-
>
USVString
{
UrlHelper
:
:
Href
(
&
self
.
url
)
}
fn
Pathname
(
self
)
-
>
USVString
{
UrlHelper
:
:
Pathname
(
&
self
.
url
)
}
fn
Port
(
self
)
-
>
USVString
{
UrlHelper
:
:
Port
(
&
self
.
url
)
}
fn
Protocol
(
self
)
-
>
USVString
{
UrlHelper
:
:
Protocol
(
&
self
.
url
)
}
fn
Search
(
self
)
-
>
USVString
{
UrlHelper
:
:
Search
(
&
self
.
url
)
}
fn
Stringifier
(
self
)
-
>
DOMString
{
self
.
Href
(
)
.
0
}
}
