use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
BluetoothRemoteGATTDescriptorBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
BluetoothRemoteGATTDescriptorBinding
:
:
BluetoothRemoteGATTDescriptorMethods
;
use
dom
:
:
bindings
:
:
global
:
:
GlobalRef
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
MutHeap
Root
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflector
reflect_dom_object
}
;
use
dom
:
:
bindings
:
:
str
:
:
ByteString
;
use
dom
:
:
bluetoothremotegattcharacteristic
:
:
BluetoothRemoteGATTCharacteristic
;
use
util
:
:
str
:
:
DOMString
;
#
[
dom_struct
]
pub
struct
BluetoothRemoteGATTDescriptor
{
reflector_
:
Reflector
characteristic
:
MutHeap
<
JS
<
BluetoothRemoteGATTCharacteristic
>
>
uuid
:
DOMString
value
:
Option
<
ByteString
>
}
impl
BluetoothRemoteGATTDescriptor
{
pub
fn
new_inherited
(
characteristic
:
&
BluetoothRemoteGATTCharacteristic
uuid
:
DOMString
)
-
>
BluetoothRemoteGATTDescriptor
{
BluetoothRemoteGATTDescriptor
{
reflector_
:
Reflector
:
:
new
(
)
characteristic
:
MutHeap
:
:
new
(
characteristic
)
uuid
:
uuid
value
:
None
}
}
pub
fn
new
(
global
:
GlobalRef
characteristic
:
&
BluetoothRemoteGATTCharacteristic
uuid
:
DOMString
)
-
>
Root
<
BluetoothRemoteGATTDescriptor
>
{
reflect_dom_object
(
box
BluetoothRemoteGATTDescriptor
:
:
new_inherited
(
characteristic
uuid
)
global
BluetoothRemoteGATTDescriptorBinding
:
:
Wrap
)
}
}
impl
BluetoothRemoteGATTDescriptorMethods
for
BluetoothRemoteGATTDescriptor
{
fn
Characteristic
(
&
self
)
-
>
Root
<
BluetoothRemoteGATTCharacteristic
>
{
self
.
characteristic
.
get
(
)
}
fn
Uuid
(
&
self
)
-
>
DOMString
{
self
.
uuid
.
clone
(
)
}
fn
GetValue
(
&
self
)
-
>
Option
<
ByteString
>
{
self
.
value
.
clone
(
)
}
fn
ReadValue
(
&
self
)
-
>
ByteString
{
ByteString
:
:
new
(
vec
!
(
)
)
}
}
