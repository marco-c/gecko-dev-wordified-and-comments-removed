use
dom
:
:
bindings
:
:
cell
:
:
DOMRefCell
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
BlobBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
BlobBinding
:
:
BlobMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
UnionTypes
:
:
BlobOrString
;
use
dom
:
:
bindings
:
:
error
:
:
{
Error
Fallible
}
;
use
dom
:
:
bindings
:
:
global
:
:
GlobalRef
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
Root
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflectable
Reflector
reflect_dom_object
}
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
encoding
:
:
all
:
:
UTF_8
;
use
encoding
:
:
types
:
:
{
EncoderTrap
Encoding
}
;
use
ipc_channel
:
:
ipc
;
use
net_traits
:
:
IpcSend
;
use
net_traits
:
:
blob_url_store
:
:
BlobURLStoreEntry
;
use
net_traits
:
:
filemanager_thread
:
:
{
FileManagerThreadMsg
SelectedFileId
RelativePos
}
;
use
std
:
:
ascii
:
:
AsciiExt
;
use
std
:
:
cell
:
:
Cell
;
use
std
:
:
ops
:
:
Index
;
#
[
must_root
]
#
[
derive
(
JSTraceable
)
]
pub
enum
BlobImpl
{
File
(
SelectedFileId
DOMRefCell
<
Option
<
Vec
<
u8
>
>
>
)
Memory
(
Vec
<
u8
>
)
Sliced
(
JS
<
Blob
>
RelativePos
)
}
impl
BlobImpl
{
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new_from_bytes
(
bytes
:
Vec
<
u8
>
)
-
>
BlobImpl
{
BlobImpl
:
:
Memory
(
bytes
)
}
pub
fn
new_from_file
(
file_id
:
SelectedFileId
)
-
>
BlobImpl
{
BlobImpl
:
:
File
(
file_id
DOMRefCell
:
:
new
(
None
)
)
}
}
#
[
dom_struct
]
pub
struct
Blob
{
reflector_
:
Reflector
#
[
ignore_heap_size_of
=
"
No
clear
owner
"
]
blob_impl
:
DOMRefCell
<
BlobImpl
>
typeString
:
String
isClosed_
:
Cell
<
bool
>
}
impl
Blob
{
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new
(
global
:
GlobalRef
blob_impl
:
BlobImpl
typeString
:
String
)
-
>
Root
<
Blob
>
{
let
boxed_blob
=
box
Blob
:
:
new_inherited
(
blob_impl
typeString
)
;
reflect_dom_object
(
boxed_blob
global
BlobBinding
:
:
Wrap
)
}
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new_inherited
(
blob_impl
:
BlobImpl
typeString
:
String
)
-
>
Blob
{
Blob
{
reflector_
:
Reflector
:
:
new
(
)
blob_impl
:
DOMRefCell
:
:
new
(
blob_impl
)
typeString
:
typeString
isClosed_
:
Cell
:
:
new
(
false
)
}
}
#
[
allow
(
unrooted_must_root
)
]
fn
new_sliced
(
parent
:
&
Blob
rel_pos
:
RelativePos
relativeContentType
:
DOMString
)
-
>
Root
<
Blob
>
{
let
global
=
parent
.
global
(
)
;
let
blob_impl
=
match
*
parent
.
blob_impl
.
borrow
(
)
{
BlobImpl
:
:
File
(
ref
id
_
)
=
>
{
inc_ref_id
(
global
.
r
(
)
id
.
clone
(
)
)
;
BlobImpl
:
:
Sliced
(
JS
:
:
from_ref
(
parent
)
rel_pos
)
}
BlobImpl
:
:
Memory
(
_
)
=
>
{
BlobImpl
:
:
Sliced
(
JS
:
:
from_ref
(
parent
)
rel_pos
)
}
BlobImpl
:
:
Sliced
(
ref
grandparent
ref
old_rel_pos
)
=
>
{
let
new_rel_pos
=
old_rel_pos
.
slice_inner
(
&
rel_pos
)
;
if
let
BlobImpl
:
:
File
(
ref
id
_
)
=
*
grandparent
.
blob_impl
.
borrow
(
)
{
inc_ref_id
(
global
.
r
(
)
id
.
clone
(
)
)
;
}
BlobImpl
:
:
Sliced
(
grandparent
.
clone
(
)
new_rel_pos
)
}
}
;
Blob
:
:
new
(
global
.
r
(
)
blob_impl
relativeContentType
.
into
(
)
)
}
pub
fn
Constructor
(
global
:
GlobalRef
blobParts
:
Option
<
Vec
<
BlobOrString
>
>
blobPropertyBag
:
&
BlobBinding
:
:
BlobPropertyBag
)
-
>
Fallible
<
Root
<
Blob
>
>
{
let
bytes
:
Vec
<
u8
>
=
match
blobParts
{
None
=
>
Vec
:
:
new
(
)
Some
(
blobparts
)
=
>
match
blob_parts_to_bytes
(
blobparts
)
{
Ok
(
bytes
)
=
>
bytes
Err
(
_
)
=
>
return
Err
(
Error
:
:
InvalidCharacter
)
}
}
;
Ok
(
Blob
:
:
new
(
global
BlobImpl
:
:
new_from_bytes
(
bytes
)
blobPropertyBag
.
get_typestring
(
)
)
)
}
pub
fn
get_bytes
(
&
self
)
-
>
Result
<
Vec
<
u8
>
(
)
>
{
match
*
self
.
blob_impl
.
borrow
(
)
{
BlobImpl
:
:
File
(
ref
id
ref
cached
)
=
>
{
let
buffer
=
match
*
cached
.
borrow
(
)
{
Some
(
ref
s
)
=
>
Ok
(
s
.
clone
(
)
)
None
=
>
{
let
global
=
self
.
global
(
)
;
let
s
=
read_file
(
global
.
r
(
)
id
.
clone
(
)
)
?
;
Ok
(
s
)
}
}
;
if
let
Ok
(
buf
)
=
buffer
.
clone
(
)
{
*
cached
.
borrow_mut
(
)
=
Some
(
buf
)
;
}
buffer
}
BlobImpl
:
:
Memory
(
ref
s
)
=
>
Ok
(
s
.
clone
(
)
)
BlobImpl
:
:
Sliced
(
ref
parent
ref
rel_pos
)
=
>
{
parent
.
get_bytes
(
)
.
map
(
|
v
|
{
let
range
=
rel_pos
.
to_abs_range
(
v
.
len
(
)
)
;
v
.
index
(
range
)
.
to_vec
(
)
}
)
}
}
}
pub
fn
get_id
(
&
self
)
-
>
SelectedFileId
{
match
*
self
.
blob_impl
.
borrow
(
)
{
BlobImpl
:
:
File
(
ref
id
_
)
=
>
id
.
clone
(
)
BlobImpl
:
:
Memory
(
ref
slice
)
=
>
self
.
promote_to_file
(
slice
)
BlobImpl
:
:
Sliced
(
ref
parent
ref
rel_pos
)
=
>
{
match
*
parent
.
blob_impl
.
borrow
(
)
{
BlobImpl
:
:
Sliced
(
_
_
)
=
>
{
debug
!
(
"
Sliced
can
'
t
have
a
sliced
parent
"
)
;
SelectedFileId
(
"
"
.
to_string
(
)
)
}
BlobImpl
:
:
File
(
ref
parent_id
_
)
=
>
self
.
create_sliced_id
(
parent_id
rel_pos
)
BlobImpl
:
:
Memory
(
ref
bytes
)
=
>
{
let
parent_id
=
parent
.
promote_to_file
(
bytes
)
;
*
self
.
blob_impl
.
borrow_mut
(
)
=
BlobImpl
:
:
Sliced
(
parent
.
clone
(
)
rel_pos
.
clone
(
)
)
;
self
.
create_sliced_id
(
&
parent_id
rel_pos
)
}
}
}
}
}
fn
promote_to_file
(
&
self
bytes
:
&
[
u8
]
)
-
>
SelectedFileId
{
let
global
=
self
.
global
(
)
;
let
origin
=
global
.
r
(
)
.
get_url
(
)
.
origin
(
)
.
unicode_serialization
(
)
;
let
filemanager
=
global
.
r
(
)
.
resource_threads
(
)
.
sender
(
)
;
let
entry
=
BlobURLStoreEntry
{
type_string
:
self
.
typeString
.
clone
(
)
size
:
self
.
Size
(
)
bytes
:
bytes
.
to_vec
(
)
}
;
let
(
tx
rx
)
=
ipc
:
:
channel
(
)
.
unwrap
(
)
;
let
_
=
filemanager
.
send
(
FileManagerThreadMsg
:
:
TransferMemory
(
entry
tx
origin
.
clone
(
)
)
)
;
match
rx
.
recv
(
)
.
unwrap
(
)
{
Ok
(
new_id
)
=
>
SelectedFileId
(
new_id
.
0
)
Err
(
_
)
=
>
SelectedFileId
(
"
"
.
to_string
(
)
)
}
}
fn
create_sliced_id
(
&
self
parent_id
:
&
SelectedFileId
rel_pos
:
&
RelativePos
)
-
>
SelectedFileId
{
let
global
=
self
.
global
(
)
;
let
origin
=
global
.
r
(
)
.
get_url
(
)
.
origin
(
)
.
unicode_serialization
(
)
;
let
filemanager
=
global
.
r
(
)
.
resource_threads
(
)
.
sender
(
)
;
let
(
tx
rx
)
=
ipc
:
:
channel
(
)
.
unwrap
(
)
;
let
msg
=
FileManagerThreadMsg
:
:
AddSlicedEntry
(
parent_id
.
clone
(
)
rel_pos
.
clone
(
)
tx
origin
.
clone
(
)
)
;
let
_
=
filemanager
.
send
(
msg
)
;
let
new_id
=
rx
.
recv
(
)
.
unwrap
(
)
.
unwrap
(
)
;
SelectedFileId
(
new_id
.
0
)
}
}
fn
read_file
(
global
:
GlobalRef
id
:
SelectedFileId
)
-
>
Result
<
Vec
<
u8
>
(
)
>
{
let
file_manager
=
global
.
filemanager_thread
(
)
;
let
(
chan
recv
)
=
ipc
:
:
channel
(
)
.
map_err
(
|
_
|
(
)
)
?
;
let
origin
=
global
.
get_url
(
)
.
origin
(
)
.
unicode_serialization
(
)
;
let
msg
=
FileManagerThreadMsg
:
:
ReadFile
(
chan
id
origin
)
;
let
_
=
file_manager
.
send
(
msg
)
;
let
result
=
match
recv
.
recv
(
)
{
Ok
(
ret
)
=
>
ret
Err
(
e
)
=
>
{
debug
!
(
"
File
manager
thread
has
problem
{
:
?
}
"
e
)
;
return
Err
(
(
)
)
}
}
;
result
.
map_err
(
|
_
|
(
)
)
}
pub
fn
blob_parts_to_bytes
(
blobparts
:
Vec
<
BlobOrString
>
)
-
>
Result
<
Vec
<
u8
>
(
)
>
{
let
mut
ret
=
vec
!
[
]
;
for
blobpart
in
&
blobparts
{
match
blobpart
{
&
BlobOrString
:
:
String
(
ref
s
)
=
>
{
let
mut
bytes
=
UTF_8
.
encode
(
s
EncoderTrap
:
:
Replace
)
.
map_err
(
|
_
|
(
)
)
?
;
ret
.
append
(
&
mut
bytes
)
;
}
&
BlobOrString
:
:
Blob
(
ref
b
)
=
>
{
let
mut
bytes
=
b
.
get_bytes
(
)
.
unwrap_or
(
vec
!
[
]
)
;
ret
.
append
(
&
mut
bytes
)
;
}
}
}
Ok
(
ret
)
}
impl
BlobMethods
for
Blob
{
fn
Size
(
&
self
)
-
>
u64
{
match
self
.
get_bytes
(
)
{
Ok
(
s
)
=
>
s
.
len
(
)
as
u64
_
=
>
0
}
}
fn
Type
(
&
self
)
-
>
DOMString
{
DOMString
:
:
from
(
self
.
typeString
.
clone
(
)
)
}
fn
Slice
(
&
self
start
:
Option
<
i64
>
end
:
Option
<
i64
>
contentType
:
Option
<
DOMString
>
)
-
>
Root
<
Blob
>
{
let
relativeContentType
=
match
contentType
{
None
=
>
DOMString
:
:
new
(
)
Some
(
mut
str
)
=
>
{
if
is_ascii_printable
(
&
str
)
{
str
.
make_ascii_lowercase
(
)
;
str
}
else
{
DOMString
:
:
new
(
)
}
}
}
;
let
rel_pos
=
RelativePos
:
:
from_opts
(
start
end
)
;
Blob
:
:
new_sliced
(
self
rel_pos
relativeContentType
)
}
fn
IsClosed
(
&
self
)
-
>
bool
{
self
.
isClosed_
.
get
(
)
}
fn
Close
(
&
self
)
{
if
self
.
isClosed_
.
get
(
)
{
return
;
}
self
.
isClosed_
.
set
(
true
)
;
}
}
impl
BlobBinding
:
:
BlobPropertyBag
{
pub
fn
get_typestring
(
&
self
)
-
>
String
{
if
is_ascii_printable
(
&
self
.
type_
)
{
self
.
type_
.
to_lowercase
(
)
}
else
{
"
"
.
to_string
(
)
}
}
}
fn
is_ascii_printable
(
string
:
&
str
)
-
>
bool
{
string
.
chars
(
)
.
all
(
|
c
|
c
>
=
'
\
x20
'
&
&
c
<
=
'
\
x7E
'
)
}
fn
inc_ref_id
(
global
:
GlobalRef
id
:
SelectedFileId
)
{
let
file_manager
=
global
.
filemanager_thread
(
)
;
let
origin
=
global
.
get_url
(
)
.
origin
(
)
.
unicode_serialization
(
)
;
let
msg
=
FileManagerThreadMsg
:
:
IncRef
(
id
origin
)
;
let
_
=
file_manager
.
send
(
msg
)
;
}
