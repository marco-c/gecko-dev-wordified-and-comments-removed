use
dom
:
:
bindings
:
:
cell
:
:
DOMRefCell
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
BlobBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
BlobBinding
:
:
BlobMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
UnionTypes
:
:
BlobOrString
;
use
dom
:
:
bindings
:
:
error
:
:
{
Error
Fallible
}
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
Root
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflectable
Reflector
reflect_dom_object
}
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
globalscope
:
:
GlobalScope
;
use
encoding
:
:
all
:
:
UTF_8
;
use
encoding
:
:
types
:
:
{
EncoderTrap
Encoding
}
;
use
ipc_channel
:
:
ipc
;
use
net_traits
:
:
{
CoreResourceMsg
IpcSend
}
;
use
net_traits
:
:
blob_url_store
:
:
{
BlobBuf
get_blob_origin
}
;
use
net_traits
:
:
filemanager_thread
:
:
{
FileManagerThreadMsg
ReadFileProgress
RelativePos
}
;
use
std
:
:
cell
:
:
Cell
;
use
std
:
:
mem
;
use
std
:
:
ops
:
:
Index
;
use
std
:
:
path
:
:
PathBuf
;
use
uuid
:
:
Uuid
;
#
[
derive
(
JSTraceable
)
]
pub
struct
FileBlob
{
id
:
Uuid
name
:
Option
<
PathBuf
>
cache
:
DOMRefCell
<
Option
<
Vec
<
u8
>
>
>
size
:
u64
}
#
[
must_root
]
#
[
derive
(
JSTraceable
)
]
pub
enum
BlobImpl
{
File
(
FileBlob
)
Memory
(
Vec
<
u8
>
)
Sliced
(
JS
<
Blob
>
RelativePos
)
}
impl
BlobImpl
{
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new_from_bytes
(
bytes
:
Vec
<
u8
>
)
-
>
BlobImpl
{
BlobImpl
:
:
Memory
(
bytes
)
}
pub
fn
new_from_file
(
file_id
:
Uuid
name
:
PathBuf
size
:
u64
)
-
>
BlobImpl
{
BlobImpl
:
:
File
(
FileBlob
{
id
:
file_id
name
:
Some
(
name
)
cache
:
DOMRefCell
:
:
new
(
None
)
size
:
size
}
)
}
}
#
[
dom_struct
]
pub
struct
Blob
{
reflector_
:
Reflector
#
[
ignore_heap_size_of
=
"
No
clear
owner
"
]
blob_impl
:
DOMRefCell
<
BlobImpl
>
type_string
:
String
is_closed
:
Cell
<
bool
>
}
impl
Blob
{
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new
(
global
:
&
GlobalScope
blob_impl
:
BlobImpl
typeString
:
String
)
-
>
Root
<
Blob
>
{
let
boxed_blob
=
box
Blob
:
:
new_inherited
(
blob_impl
typeString
)
;
reflect_dom_object
(
boxed_blob
global
BlobBinding
:
:
Wrap
)
}
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new_inherited
(
blob_impl
:
BlobImpl
type_string
:
String
)
-
>
Blob
{
Blob
{
reflector_
:
Reflector
:
:
new
(
)
blob_impl
:
DOMRefCell
:
:
new
(
blob_impl
)
type_string
:
normalize_type_string
(
&
type_string
)
is_closed
:
Cell
:
:
new
(
false
)
}
}
#
[
allow
(
unrooted_must_root
)
]
fn
new_sliced
(
parent
:
&
Blob
rel_pos
:
RelativePos
relative_content_type
:
DOMString
)
-
>
Root
<
Blob
>
{
let
blob_impl
=
match
*
parent
.
blob_impl
.
borrow
(
)
{
BlobImpl
:
:
File
(
_
)
=
>
{
BlobImpl
:
:
Sliced
(
JS
:
:
from_ref
(
parent
)
rel_pos
)
}
BlobImpl
:
:
Memory
(
_
)
=
>
{
BlobImpl
:
:
Sliced
(
JS
:
:
from_ref
(
parent
)
rel_pos
)
}
BlobImpl
:
:
Sliced
(
ref
grandparent
ref
old_rel_pos
)
=
>
{
BlobImpl
:
:
Sliced
(
grandparent
.
clone
(
)
old_rel_pos
.
slice_inner
(
&
rel_pos
)
)
}
}
;
Blob
:
:
new
(
&
parent
.
global
(
)
blob_impl
relative_content_type
.
into
(
)
)
}
pub
fn
Constructor
(
global
:
&
GlobalScope
blobParts
:
Option
<
Vec
<
BlobOrString
>
>
blobPropertyBag
:
&
BlobBinding
:
:
BlobPropertyBag
)
-
>
Fallible
<
Root
<
Blob
>
>
{
let
bytes
:
Vec
<
u8
>
=
match
blobParts
{
None
=
>
Vec
:
:
new
(
)
Some
(
blobparts
)
=
>
match
blob_parts_to_bytes
(
blobparts
)
{
Ok
(
bytes
)
=
>
bytes
Err
(
_
)
=
>
return
Err
(
Error
:
:
InvalidCharacter
)
}
}
;
Ok
(
Blob
:
:
new
(
global
BlobImpl
:
:
new_from_bytes
(
bytes
)
blobPropertyBag
.
type_
.
to_string
(
)
)
)
}
pub
fn
get_bytes
(
&
self
)
-
>
Result
<
Vec
<
u8
>
(
)
>
{
match
*
self
.
blob_impl
.
borrow
(
)
{
BlobImpl
:
:
File
(
ref
f
)
=
>
{
let
(
buffer
is_new_buffer
)
=
match
*
f
.
cache
.
borrow
(
)
{
Some
(
ref
bytes
)
=
>
(
bytes
.
clone
(
)
false
)
None
=
>
{
let
bytes
=
read_file
(
&
self
.
global
(
)
f
.
id
.
clone
(
)
)
?
;
(
bytes
true
)
}
}
;
if
is_new_buffer
{
*
f
.
cache
.
borrow_mut
(
)
=
Some
(
buffer
.
clone
(
)
)
;
}
Ok
(
buffer
)
}
BlobImpl
:
:
Memory
(
ref
s
)
=
>
Ok
(
s
.
clone
(
)
)
BlobImpl
:
:
Sliced
(
ref
parent
ref
rel_pos
)
=
>
{
parent
.
get_bytes
(
)
.
map
(
|
v
|
{
let
range
=
rel_pos
.
to_abs_range
(
v
.
len
(
)
)
;
v
.
index
(
range
)
.
to_vec
(
)
}
)
}
}
}
pub
fn
get_blob_url_id
(
&
self
)
-
>
Uuid
{
let
opt_sliced_parent
=
match
*
self
.
blob_impl
.
borrow
(
)
{
BlobImpl
:
:
Sliced
(
ref
parent
ref
rel_pos
)
=
>
{
Some
(
(
parent
.
promote
(
false
)
rel_pos
.
clone
(
)
parent
.
Size
(
)
)
)
}
_
=
>
None
}
;
match
opt_sliced_parent
{
Some
(
(
parent_id
rel_pos
size
)
)
=
>
self
.
create_sliced_url_id
(
&
parent_id
&
rel_pos
size
)
None
=
>
self
.
promote
(
true
)
}
}
fn
promote
(
&
self
set_valid
:
bool
)
-
>
Uuid
{
let
mut
bytes
=
vec
!
[
]
;
let
global_url
=
self
.
global
(
)
.
get_url
(
)
;
match
*
self
.
blob_impl
.
borrow_mut
(
)
{
BlobImpl
:
:
Sliced
(
_
_
)
=
>
{
debug
!
(
"
Sliced
can
'
t
have
a
sliced
parent
"
)
;
return
Uuid
:
:
new_v4
(
)
;
}
BlobImpl
:
:
File
(
ref
f
)
=
>
{
if
set_valid
{
let
origin
=
get_blob_origin
(
&
global_url
)
;
let
(
tx
rx
)
=
ipc
:
:
channel
(
)
.
unwrap
(
)
;
let
msg
=
FileManagerThreadMsg
:
:
ActivateBlobURL
(
f
.
id
.
clone
(
)
tx
origin
.
clone
(
)
)
;
self
.
send_to_file_manager
(
msg
)
;
match
rx
.
recv
(
)
.
unwrap
(
)
{
Ok
(
_
)
=
>
return
f
.
id
.
clone
(
)
Err
(
_
)
=
>
return
Uuid
:
:
new_v4
(
)
}
}
else
{
return
f
.
id
.
clone
(
)
;
}
}
BlobImpl
:
:
Memory
(
ref
mut
bytes_in
)
=
>
mem
:
:
swap
(
bytes_in
&
mut
bytes
)
}
;
let
origin
=
get_blob_origin
(
&
global_url
)
;
let
blob_buf
=
BlobBuf
{
filename
:
None
type_string
:
self
.
type_string
.
clone
(
)
size
:
bytes
.
len
(
)
as
u64
bytes
:
bytes
.
to_vec
(
)
}
;
let
(
tx
rx
)
=
ipc
:
:
channel
(
)
.
unwrap
(
)
;
let
msg
=
FileManagerThreadMsg
:
:
PromoteMemory
(
blob_buf
set_valid
tx
origin
.
clone
(
)
)
;
self
.
send_to_file_manager
(
msg
)
;
match
rx
.
recv
(
)
.
unwrap
(
)
{
Ok
(
id
)
=
>
{
*
self
.
blob_impl
.
borrow_mut
(
)
=
BlobImpl
:
:
File
(
FileBlob
{
id
:
id
.
clone
(
)
name
:
None
cache
:
DOMRefCell
:
:
new
(
Some
(
bytes
.
to_vec
(
)
)
)
size
:
bytes
.
len
(
)
as
u64
}
)
;
id
}
Err
(
_
)
=
>
Uuid
:
:
new_v4
(
)
}
}
fn
create_sliced_url_id
(
&
self
parent_id
:
&
Uuid
rel_pos
:
&
RelativePos
parent_len
:
u64
)
-
>
Uuid
{
let
origin
=
get_blob_origin
(
&
self
.
global
(
)
.
get_url
(
)
)
;
let
(
tx
rx
)
=
ipc
:
:
channel
(
)
.
unwrap
(
)
;
let
msg
=
FileManagerThreadMsg
:
:
AddSlicedURLEntry
(
parent_id
.
clone
(
)
rel_pos
.
clone
(
)
tx
origin
.
clone
(
)
)
;
self
.
send_to_file_manager
(
msg
)
;
match
rx
.
recv
(
)
.
expect
(
"
File
manager
thread
is
down
"
)
{
Ok
(
new_id
)
=
>
{
*
self
.
blob_impl
.
borrow_mut
(
)
=
BlobImpl
:
:
File
(
FileBlob
{
id
:
new_id
.
clone
(
)
name
:
None
cache
:
DOMRefCell
:
:
new
(
None
)
size
:
rel_pos
.
to_abs_range
(
parent_len
as
usize
)
.
len
(
)
as
u64
}
)
;
new_id
}
Err
(
_
)
=
>
{
Uuid
:
:
new_v4
(
)
}
}
}
fn
clean_up_file_resource
(
&
self
)
{
if
let
BlobImpl
:
:
File
(
ref
f
)
=
*
self
.
blob_impl
.
borrow
(
)
{
let
origin
=
get_blob_origin
(
&
self
.
global
(
)
.
get_url
(
)
)
;
let
(
tx
rx
)
=
ipc
:
:
channel
(
)
.
unwrap
(
)
;
let
msg
=
FileManagerThreadMsg
:
:
DecRef
(
f
.
id
.
clone
(
)
origin
tx
)
;
self
.
send_to_file_manager
(
msg
)
;
let
_
=
rx
.
recv
(
)
.
unwrap
(
)
;
}
}
fn
send_to_file_manager
(
&
self
msg
:
FileManagerThreadMsg
)
{
let
global
=
self
.
global
(
)
;
let
resource_threads
=
global
.
resource_threads
(
)
;
let
_
=
resource_threads
.
send
(
CoreResourceMsg
:
:
ToFileManager
(
msg
)
)
;
}
}
impl
Drop
for
Blob
{
fn
drop
(
&
mut
self
)
{
if
!
self
.
IsClosed
(
)
{
self
.
clean_up_file_resource
(
)
;
}
}
}
fn
read_file
(
global
:
&
GlobalScope
id
:
Uuid
)
-
>
Result
<
Vec
<
u8
>
(
)
>
{
let
resource_threads
=
global
.
resource_threads
(
)
;
let
(
chan
recv
)
=
ipc
:
:
channel
(
)
.
map_err
(
|
_
|
(
)
)
?
;
let
origin
=
get_blob_origin
(
&
global
.
get_url
(
)
)
;
let
check_url_validity
=
false
;
let
msg
=
FileManagerThreadMsg
:
:
ReadFile
(
chan
id
check_url_validity
origin
)
;
let
_
=
resource_threads
.
send
(
CoreResourceMsg
:
:
ToFileManager
(
msg
)
)
;
let
mut
bytes
=
vec
!
[
]
;
loop
{
match
recv
.
recv
(
)
.
unwrap
(
)
{
Ok
(
ReadFileProgress
:
:
Meta
(
mut
blob_buf
)
)
=
>
{
bytes
.
append
(
&
mut
blob_buf
.
bytes
)
;
}
Ok
(
ReadFileProgress
:
:
Partial
(
mut
bytes_in
)
)
=
>
{
bytes
.
append
(
&
mut
bytes_in
)
;
}
Ok
(
ReadFileProgress
:
:
EOF
)
=
>
{
return
Ok
(
bytes
)
;
}
Err
(
_
)
=
>
return
Err
(
(
)
)
}
}
}
pub
fn
blob_parts_to_bytes
(
blobparts
:
Vec
<
BlobOrString
>
)
-
>
Result
<
Vec
<
u8
>
(
)
>
{
let
mut
ret
=
vec
!
[
]
;
for
blobpart
in
&
blobparts
{
match
blobpart
{
&
BlobOrString
:
:
String
(
ref
s
)
=
>
{
let
mut
bytes
=
UTF_8
.
encode
(
s
EncoderTrap
:
:
Replace
)
.
map_err
(
|
_
|
(
)
)
?
;
ret
.
append
(
&
mut
bytes
)
;
}
&
BlobOrString
:
:
Blob
(
ref
b
)
=
>
{
let
mut
bytes
=
b
.
get_bytes
(
)
.
unwrap_or
(
vec
!
[
]
)
;
ret
.
append
(
&
mut
bytes
)
;
}
}
}
Ok
(
ret
)
}
impl
BlobMethods
for
Blob
{
fn
Size
(
&
self
)
-
>
u64
{
match
*
self
.
blob_impl
.
borrow
(
)
{
BlobImpl
:
:
File
(
ref
f
)
=
>
f
.
size
BlobImpl
:
:
Memory
(
ref
v
)
=
>
v
.
len
(
)
as
u64
BlobImpl
:
:
Sliced
(
ref
parent
ref
rel_pos
)
=
>
rel_pos
.
to_abs_range
(
parent
.
Size
(
)
as
usize
)
.
len
(
)
as
u64
}
}
fn
Type
(
&
self
)
-
>
DOMString
{
DOMString
:
:
from
(
self
.
type_string
.
clone
(
)
)
}
fn
Slice
(
&
self
start
:
Option
<
i64
>
end
:
Option
<
i64
>
content_type
:
Option
<
DOMString
>
)
-
>
Root
<
Blob
>
{
let
rel_pos
=
RelativePos
:
:
from_opts
(
start
end
)
;
Blob
:
:
new_sliced
(
self
rel_pos
content_type
.
unwrap_or
(
DOMString
:
:
from
(
"
"
)
)
)
}
fn
IsClosed
(
&
self
)
-
>
bool
{
self
.
is_closed
.
get
(
)
}
fn
Close
(
&
self
)
{
if
self
.
is_closed
.
get
(
)
{
return
;
}
self
.
is_closed
.
set
(
true
)
;
self
.
clean_up_file_resource
(
)
;
}
}
fn
normalize_type_string
(
s
:
&
str
)
-
>
String
{
if
is_ascii_printable
(
s
)
{
let
s_lower
=
s
.
to_lowercase
(
)
;
s_lower
}
else
{
"
"
.
to_string
(
)
}
}
fn
is_ascii_printable
(
string
:
&
str
)
-
>
bool
{
string
.
chars
(
)
.
all
(
|
c
|
c
>
=
'
\
x20
'
&
&
c
<
=
'
\
x7E
'
)
}
