use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
BluetoothRemoteGATTServiceBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
BluetoothRemoteGATTServiceBinding
:
:
BluetoothRemoteGATTServiceMethods
;
use
dom
:
:
bindings
:
:
global
:
:
GlobalRef
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
MutHeap
Root
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflector
reflect_dom_object
}
;
use
dom
:
:
bluetoothdevice
:
:
BluetoothDevice
;
use
dom
:
:
bluetoothremotegattcharacteristic
:
:
BluetoothRemoteGATTCharacteristic
;
use
util
:
:
str
:
:
DOMString
;
#
[
dom_struct
]
pub
struct
BluetoothRemoteGATTService
{
reflector_
:
Reflector
device
:
MutHeap
<
JS
<
BluetoothDevice
>
>
uuid
:
DOMString
isPrimary
:
bool
}
impl
BluetoothRemoteGATTService
{
pub
fn
new_inherited
(
device
:
&
BluetoothDevice
uuid
:
DOMString
isPrimary
:
bool
)
-
>
BluetoothRemoteGATTService
{
BluetoothRemoteGATTService
{
reflector_
:
Reflector
:
:
new
(
)
device
:
MutHeap
:
:
new
(
device
)
uuid
:
uuid
isPrimary
:
isPrimary
}
}
pub
fn
new
(
global
:
GlobalRef
device
:
&
BluetoothDevice
uuid
:
DOMString
isPrimary
:
bool
)
-
>
Root
<
BluetoothRemoteGATTService
>
{
reflect_dom_object
(
box
BluetoothRemoteGATTService
:
:
new_inherited
(
device
uuid
isPrimary
)
global
BluetoothRemoteGATTServiceBinding
:
:
Wrap
)
}
}
impl
BluetoothRemoteGATTServiceMethods
for
BluetoothRemoteGATTService
{
fn
Device
(
&
self
)
-
>
Root
<
BluetoothDevice
>
{
self
.
device
.
get
(
)
}
fn
IsPrimary
(
&
self
)
-
>
bool
{
self
.
isPrimary
}
fn
Uuid
(
&
self
)
-
>
DOMString
{
self
.
uuid
.
clone
(
)
}
fn
GetCharacteristic
(
&
self
)
-
>
Option
<
Root
<
BluetoothRemoteGATTCharacteristic
>
>
{
None
}
}
