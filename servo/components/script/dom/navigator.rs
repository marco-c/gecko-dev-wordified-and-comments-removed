use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
NavigatorBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
NavigatorBinding
:
:
NavigatorMethods
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
MutNullableHeap
Root
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflector
DomObject
reflect_dom_object
}
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
bluetooth
:
:
Bluetooth
;
use
dom
:
:
mimetypearray
:
:
MimeTypeArray
;
use
dom
:
:
navigatorinfo
;
use
dom
:
:
pluginarray
:
:
PluginArray
;
use
dom
:
:
serviceworkercontainer
:
:
ServiceWorkerContainer
;
use
dom
:
:
window
:
:
Window
;
#
[
dom_struct
]
pub
struct
Navigator
{
reflector_
:
Reflector
bluetooth
:
MutNullableHeap
<
JS
<
Bluetooth
>
>
plugins
:
MutNullableHeap
<
JS
<
PluginArray
>
>
mime_types
:
MutNullableHeap
<
JS
<
MimeTypeArray
>
>
service_worker
:
MutNullableHeap
<
JS
<
ServiceWorkerContainer
>
>
}
impl
Navigator
{
fn
new_inherited
(
)
-
>
Navigator
{
Navigator
{
reflector_
:
Reflector
:
:
new
(
)
bluetooth
:
Default
:
:
default
(
)
plugins
:
Default
:
:
default
(
)
mime_types
:
Default
:
:
default
(
)
service_worker
:
Default
:
:
default
(
)
}
}
pub
fn
new
(
window
:
&
Window
)
-
>
Root
<
Navigator
>
{
reflect_dom_object
(
box
Navigator
:
:
new_inherited
(
)
window
NavigatorBinding
:
:
Wrap
)
}
}
impl
NavigatorMethods
for
Navigator
{
fn
Product
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
Product
(
)
}
fn
TaintEnabled
(
&
self
)
-
>
bool
{
navigatorinfo
:
:
TaintEnabled
(
)
}
fn
AppName
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
AppName
(
)
}
fn
AppCodeName
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
AppCodeName
(
)
}
fn
Platform
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
Platform
(
)
}
fn
UserAgent
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
UserAgent
(
)
}
fn
AppVersion
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
AppVersion
(
)
}
fn
Bluetooth
(
&
self
)
-
>
Root
<
Bluetooth
>
{
self
.
bluetooth
.
or_init
(
|
|
Bluetooth
:
:
new
(
&
self
.
global
(
)
)
)
}
fn
Language
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
Language
(
)
}
fn
Plugins
(
&
self
)
-
>
Root
<
PluginArray
>
{
self
.
plugins
.
or_init
(
|
|
PluginArray
:
:
new
(
&
self
.
global
(
)
)
)
}
fn
MimeTypes
(
&
self
)
-
>
Root
<
MimeTypeArray
>
{
self
.
mime_types
.
or_init
(
|
|
MimeTypeArray
:
:
new
(
&
self
.
global
(
)
)
)
}
fn
JavaEnabled
(
&
self
)
-
>
bool
{
false
}
fn
ServiceWorker
(
&
self
)
-
>
Root
<
ServiceWorkerContainer
>
{
self
.
service_worker
.
or_init
(
|
|
{
ServiceWorkerContainer
:
:
new
(
&
self
.
global
(
)
)
}
)
}
fn
CookieEnabled
(
&
self
)
-
>
bool
{
true
}
}
