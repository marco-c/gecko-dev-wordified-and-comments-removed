use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
NavigatorBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
NavigatorBinding
:
:
NavigatorMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
VRBinding
:
:
VRBinding
:
:
VRMethods
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflector
DomObject
reflect_dom_object
}
;
use
dom
:
:
bindings
:
:
root
:
:
{
DomRoot
MutNullableDom
}
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
bluetooth
:
:
Bluetooth
;
use
dom
:
:
gamepadlist
:
:
GamepadList
;
use
dom
:
:
mimetypearray
:
:
MimeTypeArray
;
use
dom
:
:
navigatorinfo
;
use
dom
:
:
permissions
:
:
Permissions
;
use
dom
:
:
pluginarray
:
:
PluginArray
;
use
dom
:
:
promise
:
:
Promise
;
use
dom
:
:
serviceworkercontainer
:
:
ServiceWorkerContainer
;
use
dom
:
:
vr
:
:
VR
;
use
dom
:
:
window
:
:
Window
;
use
dom_struct
:
:
dom_struct
;
use
std
:
:
rc
:
:
Rc
;
#
[
dom_struct
]
pub
struct
Navigator
{
reflector_
:
Reflector
bluetooth
:
MutNullableDom
<
Bluetooth
>
plugins
:
MutNullableDom
<
PluginArray
>
mime_types
:
MutNullableDom
<
MimeTypeArray
>
service_worker
:
MutNullableDom
<
ServiceWorkerContainer
>
vr
:
MutNullableDom
<
VR
>
gamepads
:
MutNullableDom
<
GamepadList
>
permissions
:
MutNullableDom
<
Permissions
>
}
impl
Navigator
{
fn
new_inherited
(
)
-
>
Navigator
{
Navigator
{
reflector_
:
Reflector
:
:
new
(
)
bluetooth
:
Default
:
:
default
(
)
plugins
:
Default
:
:
default
(
)
mime_types
:
Default
:
:
default
(
)
service_worker
:
Default
:
:
default
(
)
vr
:
Default
:
:
default
(
)
gamepads
:
Default
:
:
default
(
)
permissions
:
Default
:
:
default
(
)
}
}
pub
fn
new
(
window
:
&
Window
)
-
>
DomRoot
<
Navigator
>
{
reflect_dom_object
(
Box
:
:
new
(
Navigator
:
:
new_inherited
(
)
)
window
NavigatorBinding
:
:
Wrap
)
}
}
impl
NavigatorMethods
for
Navigator
{
fn
Product
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
Product
(
)
}
fn
TaintEnabled
(
&
self
)
-
>
bool
{
navigatorinfo
:
:
TaintEnabled
(
)
}
fn
AppName
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
AppName
(
)
}
fn
AppCodeName
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
AppCodeName
(
)
}
fn
Platform
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
Platform
(
)
}
fn
UserAgent
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
UserAgent
(
)
}
fn
AppVersion
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
AppVersion
(
)
}
fn
Bluetooth
(
&
self
)
-
>
DomRoot
<
Bluetooth
>
{
self
.
bluetooth
.
or_init
(
|
|
Bluetooth
:
:
new
(
&
self
.
global
(
)
)
)
}
fn
Language
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
Language
(
)
}
fn
Plugins
(
&
self
)
-
>
DomRoot
<
PluginArray
>
{
self
.
plugins
.
or_init
(
|
|
PluginArray
:
:
new
(
&
self
.
global
(
)
)
)
}
fn
MimeTypes
(
&
self
)
-
>
DomRoot
<
MimeTypeArray
>
{
self
.
mime_types
.
or_init
(
|
|
MimeTypeArray
:
:
new
(
&
self
.
global
(
)
)
)
}
fn
JavaEnabled
(
&
self
)
-
>
bool
{
false
}
fn
ServiceWorker
(
&
self
)
-
>
DomRoot
<
ServiceWorkerContainer
>
{
self
.
service_worker
.
or_init
(
|
|
{
ServiceWorkerContainer
:
:
new
(
&
self
.
global
(
)
)
}
)
}
fn
CookieEnabled
(
&
self
)
-
>
bool
{
true
}
fn
GetGamepads
(
&
self
)
-
>
DomRoot
<
GamepadList
>
{
let
root
=
self
.
gamepads
.
or_init
(
|
|
{
GamepadList
:
:
new
(
&
self
.
global
(
)
&
[
]
)
}
)
;
let
vr_gamepads
=
self
.
Vr
(
)
.
get_gamepads
(
)
;
root
.
add_if_not_exists
(
&
vr_gamepads
)
;
root
}
fn
Permissions
(
&
self
)
-
>
DomRoot
<
Permissions
>
{
self
.
permissions
.
or_init
(
|
|
Permissions
:
:
new
(
&
self
.
global
(
)
)
)
}
#
[
allow
(
unrooted_must_root
)
]
fn
GetVRDisplays
(
&
self
)
-
>
Rc
<
Promise
>
{
self
.
Vr
(
)
.
GetDisplays
(
)
}
}
impl
Navigator
{
pub
fn
Vr
(
&
self
)
-
>
DomRoot
<
VR
>
{
self
.
vr
.
or_init
(
|
|
VR
:
:
new
(
&
self
.
global
(
)
)
)
}
}
