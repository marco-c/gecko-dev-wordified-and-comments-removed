use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
WorkerNavigatorBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
WorkerNavigatorBinding
:
:
WorkerNavigatorMethods
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
DomObject
Reflector
reflect_dom_object
}
;
use
dom
:
:
bindings
:
:
root
:
:
{
DomRoot
MutNullableDom
}
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
navigatorinfo
;
use
dom
:
:
permissions
:
:
Permissions
;
use
dom
:
:
workerglobalscope
:
:
WorkerGlobalScope
;
use
dom_struct
:
:
dom_struct
;
#
[
dom_struct
]
pub
struct
WorkerNavigator
{
reflector_
:
Reflector
permissions
:
MutNullableDom
<
Permissions
>
}
impl
WorkerNavigator
{
fn
new_inherited
(
)
-
>
WorkerNavigator
{
WorkerNavigator
{
reflector_
:
Reflector
:
:
new
(
)
permissions
:
Default
:
:
default
(
)
}
}
pub
fn
new
(
global
:
&
WorkerGlobalScope
)
-
>
DomRoot
<
WorkerNavigator
>
{
reflect_dom_object
(
box
WorkerNavigator
:
:
new_inherited
(
)
global
WorkerNavigatorBinding
:
:
Wrap
)
}
}
impl
WorkerNavigatorMethods
for
WorkerNavigator
{
fn
Product
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
Product
(
)
}
fn
TaintEnabled
(
&
self
)
-
>
bool
{
navigatorinfo
:
:
TaintEnabled
(
)
}
fn
AppName
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
AppName
(
)
}
fn
AppCodeName
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
AppCodeName
(
)
}
fn
Platform
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
Platform
(
)
}
fn
UserAgent
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
UserAgent
(
)
}
fn
AppVersion
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
AppVersion
(
)
}
fn
Language
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
Language
(
)
}
fn
Permissions
(
&
self
)
-
>
DomRoot
<
Permissions
>
{
self
.
permissions
.
or_init
(
|
|
Permissions
:
:
new
(
&
self
.
global
(
)
)
)
}
}
