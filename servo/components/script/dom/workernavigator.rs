use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
WorkerNavigatorBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
WorkerNavigatorBinding
:
:
WorkerNavigatorMethods
;
use
dom
:
:
bindings
:
:
global
:
:
GlobalRef
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflector
reflect_dom_object
}
;
use
dom
:
:
navigatorinfo
;
use
dom
:
:
workerglobalscope
:
:
WorkerGlobalScope
;
use
util
:
:
str
:
:
DOMString
;
#
[
dom_struct
]
pub
struct
WorkerNavigator
{
reflector_
:
Reflector
}
impl
WorkerNavigator
{
fn
new_inherited
(
)
-
>
WorkerNavigator
{
WorkerNavigator
{
reflector_
:
Reflector
:
:
new
(
)
}
}
pub
fn
new
(
global
:
&
WorkerGlobalScope
)
-
>
Root
<
WorkerNavigator
>
{
reflect_dom_object
(
box
WorkerNavigator
:
:
new_inherited
(
)
GlobalRef
:
:
Worker
(
global
)
WorkerNavigatorBinding
:
:
Wrap
)
}
}
impl
WorkerNavigatorMethods
for
WorkerNavigator
{
fn
Product
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
Product
(
)
}
fn
TaintEnabled
(
&
self
)
-
>
bool
{
navigatorinfo
:
:
TaintEnabled
(
)
}
fn
AppName
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
AppName
(
)
}
fn
AppCodeName
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
AppCodeName
(
)
}
fn
Platform
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
Platform
(
)
}
fn
UserAgent
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
UserAgent
(
)
}
fn
AppVersion
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
AppVersion
(
)
}
fn
Language
(
&
self
)
-
>
DOMString
{
navigatorinfo
:
:
Language
(
)
}
}
