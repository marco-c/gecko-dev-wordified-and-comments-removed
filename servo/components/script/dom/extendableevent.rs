use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
EventBinding
:
:
EventMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
ExtendableEventBinding
;
use
dom
:
:
bindings
:
:
error
:
:
{
Error
ErrorResult
Fallible
}
;
use
dom
:
:
bindings
:
:
inheritance
:
:
Castable
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
reflector
:
:
reflect_dom_object
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
event
:
:
Event
;
use
dom
:
:
globalscope
:
:
GlobalScope
;
use
js
:
:
jsapi
:
:
{
HandleValue
JSContext
}
;
use
string_cache
:
:
Atom
;
#
[
dom_struct
]
pub
struct
ExtendableEvent
{
event
:
Event
extensions_allowed
:
bool
}
impl
ExtendableEvent
{
pub
fn
new_inherited
(
)
-
>
ExtendableEvent
{
ExtendableEvent
{
event
:
Event
:
:
new_inherited
(
)
extensions_allowed
:
true
}
}
pub
fn
new
(
global
:
&
GlobalScope
type_
:
Atom
bubbles
:
bool
cancelable
:
bool
)
-
>
Root
<
ExtendableEvent
>
{
let
ev
=
reflect_dom_object
(
box
ExtendableEvent
:
:
new_inherited
(
)
global
ExtendableEventBinding
:
:
Wrap
)
;
{
let
event
=
ev
.
upcast
:
:
<
Event
>
(
)
;
event
.
init_event
(
type_
bubbles
cancelable
)
;
}
ev
}
pub
fn
Constructor
(
global
:
&
GlobalScope
type_
:
DOMString
init
:
&
ExtendableEventBinding
:
:
ExtendableEventInit
)
-
>
Fallible
<
Root
<
ExtendableEvent
>
>
{
Ok
(
ExtendableEvent
:
:
new
(
global
Atom
:
:
from
(
type_
)
init
.
parent
.
bubbles
init
.
parent
.
cancelable
)
)
}
pub
fn
WaitUntil
(
&
self
_cx
:
*
mut
JSContext
_val
:
HandleValue
)
-
>
ErrorResult
{
if
!
self
.
extensions_allowed
{
return
Err
(
Error
:
:
InvalidState
)
;
}
Ok
(
(
)
)
}
pub
fn
IsTrusted
(
&
self
)
-
>
bool
{
self
.
event
.
IsTrusted
(
)
}
}
