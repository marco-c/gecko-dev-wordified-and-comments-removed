use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
EventBinding
:
:
EventMethods
;
use
dom
:
:
bindings
:
:
inheritance
:
:
Castable
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
element
:
:
Element
;
use
dom
:
:
event
:
:
{
Event
EventBubbles
EventCancelable
}
;
use
dom
:
:
eventtarget
:
:
EventTarget
;
use
dom
:
:
mouseevent
:
:
MouseEvent
;
use
dom
:
:
node
:
:
window_from_node
;
use
dom
:
:
window
:
:
ReflowReason
;
use
script_layout_interface
:
:
message
:
:
ReflowGoal
;
pub
trait
Activatable
{
fn
as_element
(
&
self
)
-
>
&
Element
;
fn
is_instance_activatable
(
&
self
)
-
>
bool
;
fn
pre_click_activation
(
&
self
)
;
fn
canceled_activation
(
&
self
)
;
fn
activation_behavior
(
&
self
event
:
&
Event
target
:
&
EventTarget
)
;
fn
implicit_submission
(
&
self
ctrl_key
:
bool
shift_key
:
bool
alt_key
:
bool
meta_key
:
bool
)
;
fn
enter_formal_activation_state
(
&
self
)
{
self
.
as_element
(
)
.
set_active_state
(
true
)
;
let
win
=
window_from_node
(
self
.
as_element
(
)
)
;
win
.
reflow
(
ReflowGoal
:
:
Full
ReflowReason
:
:
ElementStateChanged
)
;
}
fn
exit_formal_activation_state
(
&
self
)
{
self
.
as_element
(
)
.
set_active_state
(
false
)
;
let
win
=
window_from_node
(
self
.
as_element
(
)
)
;
win
.
reflow
(
ReflowGoal
:
:
Full
ReflowReason
:
:
ElementStateChanged
)
;
}
}
#
[
derive
(
PartialEq
)
]
pub
enum
ActivationSource
{
FromClick
NotFromClick
}
pub
fn
synthetic_click_activation
(
element
:
&
Element
ctrl_key
:
bool
shift_key
:
bool
alt_key
:
bool
meta_key
:
bool
source
:
ActivationSource
)
{
if
element
.
click_in_progress
(
)
{
return
;
}
element
.
set_click_in_progress
(
true
)
;
let
activatable
=
element
.
as_maybe_activatable
(
)
;
if
let
Some
(
a
)
=
activatable
{
a
.
pre_click_activation
(
)
;
}
let
win
=
window_from_node
(
element
)
;
let
target
=
element
.
upcast
:
:
<
EventTarget
>
(
)
;
let
mouse
=
MouseEvent
:
:
new
(
&
win
DOMString
:
:
from
(
"
click
"
)
EventBubbles
:
:
DoesNotBubble
EventCancelable
:
:
NotCancelable
Some
(
&
win
)
1
0
0
0
0
ctrl_key
shift_key
alt_key
meta_key
0
None
None
)
;
let
event
=
mouse
.
upcast
:
:
<
Event
>
(
)
;
if
source
=
=
ActivationSource
:
:
FromClick
{
event
.
set_trusted
(
false
)
;
}
target
.
dispatch_event
(
event
)
;
if
let
Some
(
a
)
=
activatable
{
if
event
.
DefaultPrevented
(
)
{
a
.
canceled_activation
(
)
;
}
else
{
a
.
activation_behavior
(
event
target
)
;
}
}
element
.
set_click_in_progress
(
false
)
;
}
