use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
EventBinding
:
:
EventMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
{
EventCast
EventTargetCast
}
;
use
dom
:
:
bindings
:
:
js
:
:
{
JSRef
Temporary
OptionalRootable
}
;
use
dom
:
:
element
:
:
{
Element
ActivationElementHelpers
}
;
use
dom
:
:
event
:
:
{
Event
EventHelpers
}
;
use
dom
:
:
eventtarget
:
:
{
EventTarget
EventTargetHelpers
}
;
use
dom
:
:
mouseevent
:
:
MouseEvent
;
use
dom
:
:
node
:
:
window_from_node
;
pub
trait
Activatable
:
Copy
{
fn
as_element
(
&
self
)
-
>
Temporary
<
Element
>
;
fn
pre_click_activation
(
&
self
)
;
fn
canceled_activation
(
&
self
)
;
fn
activation_behavior
(
&
self
)
;
fn
implicit_submission
(
&
self
ctrlKey
:
bool
shiftKey
:
bool
altKey
:
bool
metaKey
:
bool
)
;
fn
synthetic_click_activation
(
&
self
ctrlKey
:
bool
shiftKey
:
bool
altKey
:
bool
metaKey
:
bool
)
{
let
element
=
self
.
as_element
(
)
.
root
(
)
;
if
element
.
click_in_progress
(
)
{
return
;
}
element
.
set_click_in_progress
(
true
)
;
self
.
pre_click_activation
(
)
;
let
win
=
window_from_node
(
*
element
)
.
root
(
)
;
let
target
:
JSRef
<
EventTarget
>
=
EventTargetCast
:
:
from_ref
(
*
element
)
;
let
mouse
=
MouseEvent
:
:
new
(
*
win
"
click
"
.
to_string
(
)
false
false
Some
(
*
win
)
1
0
0
0
0
ctrlKey
shiftKey
altKey
metaKey
0
None
)
.
root
(
)
;
let
event
:
JSRef
<
Event
>
=
EventCast
:
:
from_ref
(
*
mouse
)
;
event
.
set_trusted
(
true
)
;
target
.
dispatch_event
(
event
)
;
if
event
.
DefaultPrevented
(
)
{
self
.
canceled_activation
(
)
;
}
else
{
self
.
activation_behavior
(
)
;
}
element
.
set_click_in_progress
(
false
)
;
}
}
