use
canvas_traits
:
:
webgl
:
:
WebGLVersion
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
WebGL2RenderingContextBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
WebGL2RenderingContextBinding
:
:
WebGL2RenderingContextMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
WebGLRenderingContextBinding
:
:
WebGLContextAttributes
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
WebGLRenderingContextBinding
:
:
WebGLRenderingContextMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
UnionTypes
:
:
ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement
;
use
dom
:
:
bindings
:
:
error
:
:
Fallible
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
reflect_dom_object
Reflector
}
;
use
dom
:
:
bindings
:
:
root
:
:
{
Dom
DomRoot
LayoutDom
}
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
htmlcanvaselement
:
:
HTMLCanvasElement
;
use
dom
:
:
htmliframeelement
:
:
HTMLIFrameElement
;
use
dom
:
:
webglactiveinfo
:
:
WebGLActiveInfo
;
use
dom
:
:
webglbuffer
:
:
WebGLBuffer
;
use
dom
:
:
webglframebuffer
:
:
WebGLFramebuffer
;
use
dom
:
:
webglprogram
:
:
WebGLProgram
;
use
dom
:
:
webglrenderbuffer
:
:
WebGLRenderbuffer
;
use
dom
:
:
webglrenderingcontext
:
:
{
LayoutCanvasWebGLRenderingContextHelpers
WebGLRenderingContext
}
;
use
dom
:
:
webglshader
:
:
WebGLShader
;
use
dom
:
:
webglshaderprecisionformat
:
:
WebGLShaderPrecisionFormat
;
use
dom
:
:
webgltexture
:
:
WebGLTexture
;
use
dom
:
:
webgluniformlocation
:
:
WebGLUniformLocation
;
use
dom
:
:
window
:
:
Window
;
use
dom_struct
:
:
dom_struct
;
use
euclid
:
:
Size2D
;
use
js
:
:
jsapi
:
:
{
JSContext
JSObject
}
;
use
js
:
:
jsval
:
:
JSVal
;
use
offscreen_gl_context
:
:
GLContextAttributes
;
use
script_layout_interface
:
:
HTMLCanvasDataSource
;
use
std
:
:
ptr
:
:
NonNull
;
#
[
dom_struct
]
pub
struct
WebGL2RenderingContext
{
reflector_
:
Reflector
base
:
Dom
<
WebGLRenderingContext
>
}
impl
WebGL2RenderingContext
{
fn
new_inherited
(
window
:
&
Window
canvas
:
&
HTMLCanvasElement
size
:
Size2D
<
i32
>
attrs
:
GLContextAttributes
)
-
>
Option
<
WebGL2RenderingContext
>
{
let
base
=
WebGLRenderingContext
:
:
new
(
window
canvas
WebGLVersion
:
:
WebGL2
size
attrs
)
?
;
Some
(
WebGL2RenderingContext
{
reflector_
:
Reflector
:
:
new
(
)
base
:
Dom
:
:
from_ref
(
&
*
base
)
}
)
}
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new
(
window
:
&
Window
canvas
:
&
HTMLCanvasElement
size
:
Size2D
<
i32
>
attrs
:
GLContextAttributes
)
-
>
Option
<
DomRoot
<
WebGL2RenderingContext
>
>
{
WebGL2RenderingContext
:
:
new_inherited
(
window
canvas
size
attrs
)
.
map
(
|
ctx
|
{
reflect_dom_object
(
Box
:
:
new
(
ctx
)
window
WebGL2RenderingContextBinding
:
:
Wrap
)
}
)
}
}
impl
WebGL2RenderingContext
{
pub
fn
recreate
(
&
self
size
:
Size2D
<
i32
>
)
{
self
.
base
.
recreate
(
size
)
}
pub
fn
base_context
(
&
self
)
-
>
DomRoot
<
WebGLRenderingContext
>
{
DomRoot
:
:
from_ref
(
&
*
self
.
base
)
}
}
impl
WebGL2RenderingContextMethods
for
WebGL2RenderingContext
{
fn
Canvas
(
&
self
)
-
>
DomRoot
<
HTMLCanvasElement
>
{
self
.
base
.
Canvas
(
)
}
fn
Flush
(
&
self
)
{
self
.
base
.
Flush
(
)
}
fn
Finish
(
&
self
)
{
self
.
base
.
Finish
(
)
}
fn
DrawingBufferWidth
(
&
self
)
-
>
i32
{
self
.
base
.
DrawingBufferWidth
(
)
}
fn
DrawingBufferHeight
(
&
self
)
-
>
i32
{
self
.
base
.
DrawingBufferHeight
(
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
GetBufferParameter
(
&
self
_cx
:
*
mut
JSContext
target
:
u32
parameter
:
u32
)
-
>
JSVal
{
self
.
base
.
GetBufferParameter
(
_cx
target
parameter
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
GetParameter
(
&
self
cx
:
*
mut
JSContext
parameter
:
u32
)
-
>
JSVal
{
self
.
base
.
GetParameter
(
cx
parameter
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
GetTexParameter
(
&
self
cx
:
*
mut
JSContext
target
:
u32
pname
:
u32
)
-
>
JSVal
{
self
.
base
.
GetTexParameter
(
cx
target
pname
)
}
fn
GetError
(
&
self
)
-
>
u32
{
self
.
base
.
GetError
(
)
}
fn
GetContextAttributes
(
&
self
)
-
>
Option
<
WebGLContextAttributes
>
{
self
.
base
.
GetContextAttributes
(
)
}
fn
GetSupportedExtensions
(
&
self
)
-
>
Option
<
Vec
<
DOMString
>
>
{
self
.
base
.
GetSupportedExtensions
(
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
GetExtension
(
&
self
cx
:
*
mut
JSContext
name
:
DOMString
)
-
>
Option
<
NonNull
<
JSObject
>
>
{
self
.
base
.
GetExtension
(
cx
name
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
GetFramebufferAttachmentParameter
(
&
self
cx
:
*
mut
JSContext
target
:
u32
attachment
:
u32
pname
:
u32
)
-
>
JSVal
{
self
.
base
.
GetFramebufferAttachmentParameter
(
cx
target
attachment
pname
)
}
fn
ActiveTexture
(
&
self
texture
:
u32
)
{
self
.
base
.
ActiveTexture
(
texture
)
}
fn
BlendColor
(
&
self
r
:
f32
g
:
f32
b
:
f32
a
:
f32
)
{
self
.
base
.
BlendColor
(
r
g
b
a
)
}
fn
BlendEquation
(
&
self
mode
:
u32
)
{
self
.
base
.
BlendEquation
(
mode
)
}
fn
BlendEquationSeparate
(
&
self
mode_rgb
:
u32
mode_alpha
:
u32
)
{
self
.
base
.
BlendEquationSeparate
(
mode_rgb
mode_alpha
)
}
fn
BlendFunc
(
&
self
src_factor
:
u32
dest_factor
:
u32
)
{
self
.
base
.
BlendFunc
(
src_factor
dest_factor
)
}
fn
BlendFuncSeparate
(
&
self
src_rgb
:
u32
dest_rgb
:
u32
src_alpha
:
u32
dest_alpha
:
u32
)
{
self
.
base
.
BlendFuncSeparate
(
src_rgb
dest_rgb
src_alpha
dest_alpha
)
}
fn
AttachShader
(
&
self
program
:
Option
<
&
WebGLProgram
>
shader
:
Option
<
&
WebGLShader
>
)
{
self
.
base
.
AttachShader
(
program
shader
)
}
fn
DetachShader
(
&
self
program
:
Option
<
&
WebGLProgram
>
shader
:
Option
<
&
WebGLShader
>
)
{
self
.
base
.
DetachShader
(
program
shader
)
}
fn
BindAttribLocation
(
&
self
program
:
Option
<
&
WebGLProgram
>
index
:
u32
name
:
DOMString
)
{
self
.
base
.
BindAttribLocation
(
program
index
name
)
}
fn
BindBuffer
(
&
self
target
:
u32
buffer
:
Option
<
&
WebGLBuffer
>
)
{
self
.
base
.
BindBuffer
(
target
buffer
)
}
fn
BindFramebuffer
(
&
self
target
:
u32
framebuffer
:
Option
<
&
WebGLFramebuffer
>
)
{
self
.
base
.
BindFramebuffer
(
target
framebuffer
)
}
fn
BindRenderbuffer
(
&
self
target
:
u32
renderbuffer
:
Option
<
&
WebGLRenderbuffer
>
)
{
self
.
base
.
BindRenderbuffer
(
target
renderbuffer
)
}
fn
BindTexture
(
&
self
target
:
u32
texture
:
Option
<
&
WebGLTexture
>
)
{
self
.
base
.
BindTexture
(
target
texture
)
}
fn
GenerateMipmap
(
&
self
target
:
u32
)
{
self
.
base
.
GenerateMipmap
(
target
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
BufferData
(
&
self
cx
:
*
mut
JSContext
target
:
u32
data
:
*
mut
JSObject
usage
:
u32
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
BufferData
(
cx
target
data
usage
)
}
fn
BufferData_
(
&
self
target
:
u32
size
:
i64
usage
:
u32
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
BufferData_
(
target
size
usage
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
BufferSubData
(
&
self
cx
:
*
mut
JSContext
target
:
u32
offset
:
i64
data
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
BufferSubData
(
cx
target
offset
data
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
CompressedTexImage2D
(
&
self
cx
:
*
mut
JSContext
target
:
u32
level
:
i32
internal_format
:
u32
width
:
i32
height
:
i32
border
:
i32
pixels
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
CompressedTexImage2D
(
cx
target
level
internal_format
width
height
border
pixels
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
CompressedTexSubImage2D
(
&
self
cx
:
*
mut
JSContext
target
:
u32
level
:
i32
xoffset
:
i32
yoffset
:
i32
width
:
i32
height
:
i32
format
:
u32
pixels
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
CompressedTexSubImage2D
(
cx
target
level
xoffset
yoffset
width
height
format
pixels
)
}
fn
CopyTexImage2D
(
&
self
target
:
u32
level
:
i32
internal_format
:
u32
x
:
i32
y
:
i32
width
:
i32
height
:
i32
border
:
i32
)
{
self
.
base
.
CopyTexImage2D
(
target
level
internal_format
x
y
width
height
border
)
}
fn
CopyTexSubImage2D
(
&
self
target
:
u32
level
:
i32
xoffset
:
i32
yoffset
:
i32
x
:
i32
y
:
i32
width
:
i32
height
:
i32
)
{
self
.
base
.
CopyTexSubImage2D
(
target
level
xoffset
yoffset
x
y
width
height
)
}
fn
Clear
(
&
self
mask
:
u32
)
{
self
.
base
.
Clear
(
mask
)
}
fn
ClearColor
(
&
self
red
:
f32
green
:
f32
blue
:
f32
alpha
:
f32
)
{
self
.
base
.
ClearColor
(
red
green
blue
alpha
)
}
fn
ClearDepth
(
&
self
depth
:
f32
)
{
self
.
base
.
ClearDepth
(
depth
)
}
fn
ClearStencil
(
&
self
stencil
:
i32
)
{
self
.
base
.
ClearStencil
(
stencil
)
}
fn
ColorMask
(
&
self
r
:
bool
g
:
bool
b
:
bool
a
:
bool
)
{
self
.
base
.
ColorMask
(
r
g
b
a
)
}
fn
CullFace
(
&
self
mode
:
u32
)
{
self
.
base
.
CullFace
(
mode
)
}
fn
FrontFace
(
&
self
mode
:
u32
)
{
self
.
base
.
FrontFace
(
mode
)
}
fn
DepthFunc
(
&
self
func
:
u32
)
{
self
.
base
.
DepthFunc
(
func
)
}
fn
DepthMask
(
&
self
flag
:
bool
)
{
self
.
base
.
DepthMask
(
flag
)
}
fn
DepthRange
(
&
self
near
:
f32
far
:
f32
)
{
self
.
base
.
DepthRange
(
near
far
)
}
fn
Enable
(
&
self
cap
:
u32
)
{
self
.
base
.
Enable
(
cap
)
}
fn
Disable
(
&
self
cap
:
u32
)
{
self
.
base
.
Disable
(
cap
)
}
fn
CompileShader
(
&
self
shader
:
Option
<
&
WebGLShader
>
)
{
self
.
base
.
CompileShader
(
shader
)
}
fn
CreateBuffer
(
&
self
)
-
>
Option
<
DomRoot
<
WebGLBuffer
>
>
{
self
.
base
.
CreateBuffer
(
)
}
fn
CreateFramebuffer
(
&
self
)
-
>
Option
<
DomRoot
<
WebGLFramebuffer
>
>
{
self
.
base
.
CreateFramebuffer
(
)
}
fn
CreateRenderbuffer
(
&
self
)
-
>
Option
<
DomRoot
<
WebGLRenderbuffer
>
>
{
self
.
base
.
CreateRenderbuffer
(
)
}
fn
CreateTexture
(
&
self
)
-
>
Option
<
DomRoot
<
WebGLTexture
>
>
{
self
.
base
.
CreateTexture
(
)
}
fn
CreateProgram
(
&
self
)
-
>
Option
<
DomRoot
<
WebGLProgram
>
>
{
self
.
base
.
CreateProgram
(
)
}
fn
CreateShader
(
&
self
shader_type
:
u32
)
-
>
Option
<
DomRoot
<
WebGLShader
>
>
{
self
.
base
.
CreateShader
(
shader_type
)
}
fn
DeleteBuffer
(
&
self
buffer
:
Option
<
&
WebGLBuffer
>
)
{
self
.
base
.
DeleteBuffer
(
buffer
)
}
fn
DeleteFramebuffer
(
&
self
framebuffer
:
Option
<
&
WebGLFramebuffer
>
)
{
self
.
base
.
DeleteFramebuffer
(
framebuffer
)
}
fn
DeleteRenderbuffer
(
&
self
renderbuffer
:
Option
<
&
WebGLRenderbuffer
>
)
{
self
.
base
.
DeleteRenderbuffer
(
renderbuffer
)
}
fn
DeleteTexture
(
&
self
texture
:
Option
<
&
WebGLTexture
>
)
{
self
.
base
.
DeleteTexture
(
texture
)
}
fn
DeleteProgram
(
&
self
program
:
Option
<
&
WebGLProgram
>
)
{
self
.
base
.
DeleteProgram
(
program
)
}
fn
DeleteShader
(
&
self
shader
:
Option
<
&
WebGLShader
>
)
{
self
.
base
.
DeleteShader
(
shader
)
}
fn
DrawArrays
(
&
self
mode
:
u32
first
:
i32
count
:
i32
)
{
self
.
base
.
DrawArrays
(
mode
first
count
)
}
fn
DrawElements
(
&
self
mode
:
u32
count
:
i32
type_
:
u32
offset
:
i64
)
{
self
.
base
.
DrawElements
(
mode
count
type_
offset
)
}
fn
EnableVertexAttribArray
(
&
self
attrib_id
:
u32
)
{
self
.
base
.
EnableVertexAttribArray
(
attrib_id
)
}
fn
DisableVertexAttribArray
(
&
self
attrib_id
:
u32
)
{
self
.
base
.
DisableVertexAttribArray
(
attrib_id
)
}
fn
GetActiveUniform
(
&
self
program
:
Option
<
&
WebGLProgram
>
index
:
u32
)
-
>
Option
<
DomRoot
<
WebGLActiveInfo
>
>
{
self
.
base
.
GetActiveUniform
(
program
index
)
}
fn
GetActiveAttrib
(
&
self
program
:
Option
<
&
WebGLProgram
>
index
:
u32
)
-
>
Option
<
DomRoot
<
WebGLActiveInfo
>
>
{
self
.
base
.
GetActiveAttrib
(
program
index
)
}
fn
GetAttribLocation
(
&
self
program
:
Option
<
&
WebGLProgram
>
name
:
DOMString
)
-
>
i32
{
self
.
base
.
GetAttribLocation
(
program
name
)
}
fn
GetProgramInfoLog
(
&
self
program
:
Option
<
&
WebGLProgram
>
)
-
>
Option
<
DOMString
>
{
self
.
base
.
GetProgramInfoLog
(
program
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
GetProgramParameter
(
&
self
cx
:
*
mut
JSContext
program
:
Option
<
&
WebGLProgram
>
param_id
:
u32
)
-
>
JSVal
{
self
.
base
.
GetProgramParameter
(
cx
program
param_id
)
}
fn
GetShaderInfoLog
(
&
self
shader
:
Option
<
&
WebGLShader
>
)
-
>
Option
<
DOMString
>
{
self
.
base
.
GetShaderInfoLog
(
shader
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
GetShaderParameter
(
&
self
cx
:
*
mut
JSContext
shader
:
Option
<
&
WebGLShader
>
param_id
:
u32
)
-
>
JSVal
{
self
.
base
.
GetShaderParameter
(
cx
shader
param_id
)
}
fn
GetShaderPrecisionFormat
(
&
self
shader_type
:
u32
precision_type
:
u32
)
-
>
Option
<
DomRoot
<
WebGLShaderPrecisionFormat
>
>
{
self
.
base
.
GetShaderPrecisionFormat
(
shader_type
precision_type
)
}
fn
GetUniformLocation
(
&
self
program
:
Option
<
&
WebGLProgram
>
name
:
DOMString
)
-
>
Option
<
DomRoot
<
WebGLUniformLocation
>
>
{
self
.
base
.
GetUniformLocation
(
program
name
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
GetVertexAttrib
(
&
self
cx
:
*
mut
JSContext
index
:
u32
pname
:
u32
)
-
>
JSVal
{
self
.
base
.
GetVertexAttrib
(
cx
index
pname
)
}
fn
GetVertexAttribOffset
(
&
self
index
:
u32
pname
:
u32
)
-
>
i64
{
self
.
base
.
GetVertexAttribOffset
(
index
pname
)
}
fn
Hint
(
&
self
target
:
u32
mode
:
u32
)
{
self
.
base
.
Hint
(
target
mode
)
}
fn
IsBuffer
(
&
self
buffer
:
Option
<
&
WebGLBuffer
>
)
-
>
bool
{
self
.
base
.
IsBuffer
(
buffer
)
}
fn
IsEnabled
(
&
self
cap
:
u32
)
-
>
bool
{
self
.
base
.
IsEnabled
(
cap
)
}
fn
IsFramebuffer
(
&
self
frame_buffer
:
Option
<
&
WebGLFramebuffer
>
)
-
>
bool
{
self
.
base
.
IsFramebuffer
(
frame_buffer
)
}
fn
IsProgram
(
&
self
program
:
Option
<
&
WebGLProgram
>
)
-
>
bool
{
self
.
base
.
IsProgram
(
program
)
}
fn
IsRenderbuffer
(
&
self
render_buffer
:
Option
<
&
WebGLRenderbuffer
>
)
-
>
bool
{
self
.
base
.
IsRenderbuffer
(
render_buffer
)
}
fn
IsShader
(
&
self
shader
:
Option
<
&
WebGLShader
>
)
-
>
bool
{
self
.
base
.
IsShader
(
shader
)
}
fn
IsTexture
(
&
self
texture
:
Option
<
&
WebGLTexture
>
)
-
>
bool
{
self
.
base
.
IsTexture
(
texture
)
}
fn
LineWidth
(
&
self
width
:
f32
)
{
self
.
base
.
LineWidth
(
width
)
}
fn
PixelStorei
(
&
self
param_name
:
u32
param_value
:
i32
)
{
self
.
base
.
PixelStorei
(
param_name
param_value
)
}
fn
PolygonOffset
(
&
self
factor
:
f32
units
:
f32
)
{
self
.
base
.
PolygonOffset
(
factor
units
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
ReadPixels
(
&
self
cx
:
*
mut
JSContext
x
:
i32
y
:
i32
width
:
i32
height
:
i32
format
:
u32
pixel_type
:
u32
pixels
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
ReadPixels
(
cx
x
y
width
height
format
pixel_type
pixels
)
}
fn
SampleCoverage
(
&
self
value
:
f32
invert
:
bool
)
{
self
.
base
.
SampleCoverage
(
value
invert
)
}
fn
Scissor
(
&
self
x
:
i32
y
:
i32
width
:
i32
height
:
i32
)
{
self
.
base
.
Scissor
(
x
y
width
height
)
}
fn
StencilFunc
(
&
self
func
:
u32
ref_
:
i32
mask
:
u32
)
{
self
.
base
.
StencilFunc
(
func
ref_
mask
)
}
fn
StencilFuncSeparate
(
&
self
face
:
u32
func
:
u32
ref_
:
i32
mask
:
u32
)
{
self
.
base
.
StencilFuncSeparate
(
face
func
ref_
mask
)
}
fn
StencilMask
(
&
self
mask
:
u32
)
{
self
.
base
.
StencilMask
(
mask
)
}
fn
StencilMaskSeparate
(
&
self
face
:
u32
mask
:
u32
)
{
self
.
base
.
StencilMaskSeparate
(
face
mask
)
}
fn
StencilOp
(
&
self
fail
:
u32
zfail
:
u32
zpass
:
u32
)
{
self
.
base
.
StencilOp
(
fail
zfail
zpass
)
}
fn
StencilOpSeparate
(
&
self
face
:
u32
fail
:
u32
zfail
:
u32
zpass
:
u32
)
{
self
.
base
.
StencilOpSeparate
(
face
fail
zfail
zpass
)
}
fn
LinkProgram
(
&
self
program
:
Option
<
&
WebGLProgram
>
)
{
self
.
base
.
LinkProgram
(
program
)
}
fn
ShaderSource
(
&
self
shader
:
Option
<
&
WebGLShader
>
source
:
DOMString
)
{
self
.
base
.
ShaderSource
(
shader
source
)
}
fn
GetShaderSource
(
&
self
shader
:
Option
<
&
WebGLShader
>
)
-
>
Option
<
DOMString
>
{
self
.
base
.
GetShaderSource
(
shader
)
}
fn
Uniform1f
(
&
self
uniform
:
Option
<
&
WebGLUniformLocation
>
val
:
f32
)
{
self
.
base
.
Uniform1f
(
uniform
val
)
}
fn
Uniform1i
(
&
self
uniform
:
Option
<
&
WebGLUniformLocation
>
val
:
i32
)
{
self
.
base
.
Uniform1i
(
uniform
val
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
Uniform1iv
(
&
self
cx
:
*
mut
JSContext
uniform
:
Option
<
&
WebGLUniformLocation
>
data
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
Uniform1iv
(
cx
uniform
data
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
Uniform1fv
(
&
self
cx
:
*
mut
JSContext
uniform
:
Option
<
&
WebGLUniformLocation
>
data
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
Uniform1fv
(
cx
uniform
data
)
}
fn
Uniform2f
(
&
self
uniform
:
Option
<
&
WebGLUniformLocation
>
x
:
f32
y
:
f32
)
{
self
.
base
.
Uniform2f
(
uniform
x
y
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
Uniform2fv
(
&
self
cx
:
*
mut
JSContext
uniform
:
Option
<
&
WebGLUniformLocation
>
data
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
Uniform2fv
(
cx
uniform
data
)
}
fn
Uniform2i
(
&
self
uniform
:
Option
<
&
WebGLUniformLocation
>
x
:
i32
y
:
i32
)
{
self
.
base
.
Uniform2i
(
uniform
x
y
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
Uniform2iv
(
&
self
cx
:
*
mut
JSContext
uniform
:
Option
<
&
WebGLUniformLocation
>
data
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
Uniform2iv
(
cx
uniform
data
)
}
fn
Uniform3f
(
&
self
uniform
:
Option
<
&
WebGLUniformLocation
>
x
:
f32
y
:
f32
z
:
f32
)
{
self
.
base
.
Uniform3f
(
uniform
x
y
z
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
Uniform3fv
(
&
self
cx
:
*
mut
JSContext
uniform
:
Option
<
&
WebGLUniformLocation
>
data
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
Uniform3fv
(
cx
uniform
data
)
}
fn
Uniform3i
(
&
self
uniform
:
Option
<
&
WebGLUniformLocation
>
x
:
i32
y
:
i32
z
:
i32
)
{
self
.
base
.
Uniform3i
(
uniform
x
y
z
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
Uniform3iv
(
&
self
cx
:
*
mut
JSContext
uniform
:
Option
<
&
WebGLUniformLocation
>
data
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
Uniform3iv
(
cx
uniform
data
)
}
fn
Uniform4i
(
&
self
uniform
:
Option
<
&
WebGLUniformLocation
>
x
:
i32
y
:
i32
z
:
i32
w
:
i32
)
{
self
.
base
.
Uniform4i
(
uniform
x
y
z
w
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
Uniform4iv
(
&
self
cx
:
*
mut
JSContext
uniform
:
Option
<
&
WebGLUniformLocation
>
data
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
Uniform4iv
(
cx
uniform
data
)
}
fn
Uniform4f
(
&
self
uniform
:
Option
<
&
WebGLUniformLocation
>
x
:
f32
y
:
f32
z
:
f32
w
:
f32
)
{
self
.
base
.
Uniform4f
(
uniform
x
y
z
w
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
Uniform4fv
(
&
self
cx
:
*
mut
JSContext
uniform
:
Option
<
&
WebGLUniformLocation
>
data
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
Uniform4fv
(
cx
uniform
data
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
UniformMatrix2fv
(
&
self
cx
:
*
mut
JSContext
uniform
:
Option
<
&
WebGLUniformLocation
>
transpose
:
bool
data
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
UniformMatrix2fv
(
cx
uniform
transpose
data
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
UniformMatrix3fv
(
&
self
cx
:
*
mut
JSContext
uniform
:
Option
<
&
WebGLUniformLocation
>
transpose
:
bool
data
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
UniformMatrix3fv
(
cx
uniform
transpose
data
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
UniformMatrix4fv
(
&
self
cx
:
*
mut
JSContext
uniform
:
Option
<
&
WebGLUniformLocation
>
transpose
:
bool
data
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
UniformMatrix4fv
(
cx
uniform
transpose
data
)
}
fn
UseProgram
(
&
self
program
:
Option
<
&
WebGLProgram
>
)
{
self
.
base
.
UseProgram
(
program
)
}
fn
ValidateProgram
(
&
self
program
:
Option
<
&
WebGLProgram
>
)
{
self
.
base
.
ValidateProgram
(
program
)
}
fn
VertexAttrib1f
(
&
self
indx
:
u32
x
:
f32
)
{
self
.
base
.
VertexAttrib1f
(
indx
x
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
VertexAttrib1fv
(
&
self
cx
:
*
mut
JSContext
indx
:
u32
data
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
VertexAttrib1fv
(
cx
indx
data
)
}
fn
VertexAttrib2f
(
&
self
indx
:
u32
x
:
f32
y
:
f32
)
{
self
.
base
.
VertexAttrib2f
(
indx
x
y
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
VertexAttrib2fv
(
&
self
cx
:
*
mut
JSContext
indx
:
u32
data
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
VertexAttrib2fv
(
cx
indx
data
)
}
fn
VertexAttrib3f
(
&
self
indx
:
u32
x
:
f32
y
:
f32
z
:
f32
)
{
self
.
base
.
VertexAttrib3f
(
indx
x
y
z
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
VertexAttrib3fv
(
&
self
cx
:
*
mut
JSContext
indx
:
u32
data
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
VertexAttrib3fv
(
cx
indx
data
)
}
fn
VertexAttrib4f
(
&
self
indx
:
u32
x
:
f32
y
:
f32
z
:
f32
w
:
f32
)
{
self
.
base
.
VertexAttrib4f
(
indx
x
y
z
w
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
VertexAttrib4fv
(
&
self
cx
:
*
mut
JSContext
indx
:
u32
data
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
VertexAttrib4fv
(
cx
indx
data
)
}
fn
VertexAttribPointer
(
&
self
attrib_id
:
u32
size
:
i32
data_type
:
u32
normalized
:
bool
stride
:
i32
offset
:
i64
)
{
self
.
base
.
VertexAttribPointer
(
attrib_id
size
data_type
normalized
stride
offset
)
}
fn
Viewport
(
&
self
x
:
i32
y
:
i32
width
:
i32
height
:
i32
)
{
self
.
base
.
Viewport
(
x
y
width
height
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
TexImage2D
(
&
self
cx
:
*
mut
JSContext
target
:
u32
level
:
i32
internal_format
:
u32
width
:
i32
height
:
i32
border
:
i32
format
:
u32
data_type
:
u32
data_ptr
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
TexImage2D
(
cx
target
level
internal_format
width
height
border
format
data_type
data_ptr
)
}
fn
TexImage2D_
(
&
self
target
:
u32
level
:
i32
internal_format
:
u32
format
:
u32
data_type
:
u32
source
:
Option
<
ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement
>
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
TexImage2D_
(
target
level
internal_format
format
data_type
source
)
}
fn
TexImageDOM
(
&
self
target
:
u32
level
:
i32
internal_format
:
u32
width
:
i32
height
:
i32
format
:
u32
data_type
:
u32
source
:
&
HTMLIFrameElement
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
TexImageDOM
(
target
level
internal_format
width
height
format
data_type
source
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
TexSubImage2D
(
&
self
cx
:
*
mut
JSContext
target
:
u32
level
:
i32
xoffset
:
i32
yoffset
:
i32
width
:
i32
height
:
i32
format
:
u32
data_type
:
u32
data_ptr
:
*
mut
JSObject
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
TexSubImage2D
(
cx
target
level
xoffset
yoffset
width
height
format
data_type
data_ptr
)
}
fn
TexSubImage2D_
(
&
self
target
:
u32
level
:
i32
xoffset
:
i32
yoffset
:
i32
format
:
u32
data_type
:
u32
source
:
Option
<
ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement
>
)
-
>
Fallible
<
(
)
>
{
self
.
base
.
TexSubImage2D_
(
target
level
xoffset
yoffset
format
data_type
source
)
}
fn
TexParameterf
(
&
self
target
:
u32
name
:
u32
value
:
f32
)
{
self
.
base
.
TexParameterf
(
target
name
value
)
}
fn
TexParameteri
(
&
self
target
:
u32
name
:
u32
value
:
i32
)
{
self
.
base
.
TexParameteri
(
target
name
value
)
}
fn
CheckFramebufferStatus
(
&
self
target
:
u32
)
-
>
u32
{
self
.
base
.
CheckFramebufferStatus
(
target
)
}
fn
RenderbufferStorage
(
&
self
target
:
u32
internal_format
:
u32
width
:
i32
height
:
i32
)
{
self
.
base
.
RenderbufferStorage
(
target
internal_format
width
height
)
}
fn
FramebufferRenderbuffer
(
&
self
target
:
u32
attachment
:
u32
renderbuffertarget
:
u32
rb
:
Option
<
&
WebGLRenderbuffer
>
)
{
self
.
base
.
FramebufferRenderbuffer
(
target
attachment
renderbuffertarget
rb
)
}
fn
FramebufferTexture2D
(
&
self
target
:
u32
attachment
:
u32
textarget
:
u32
texture
:
Option
<
&
WebGLTexture
>
level
:
i32
)
{
self
.
base
.
FramebufferTexture2D
(
target
attachment
textarget
texture
level
)
}
}
impl
LayoutCanvasWebGLRenderingContextHelpers
for
LayoutDom
<
WebGL2RenderingContext
>
{
#
[
allow
(
unsafe_code
)
]
unsafe
fn
canvas_data_source
(
&
self
)
-
>
HTMLCanvasDataSource
{
let
this
=
&
*
self
.
unsafe_get
(
)
;
HTMLCanvasDataSource
:
:
WebGL
(
(
*
this
.
base
.
to_layout
(
)
.
unsafe_get
(
)
)
.
layout_handle
(
)
)
}
}
