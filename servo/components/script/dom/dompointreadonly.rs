use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
DOMPointReadOnlyBinding
:
:
{
DOMPointReadOnlyMethods
Wrap
}
;
use
dom
:
:
bindings
:
:
error
:
:
Fallible
;
use
dom
:
:
bindings
:
:
global
:
:
GlobalRef
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflector
reflect_dom_object
}
;
use
std
:
:
cell
:
:
Cell
;
#
[
dom_struct
]
pub
struct
DOMPointReadOnly
{
reflector_
:
Reflector
x
:
Cell
<
f64
>
y
:
Cell
<
f64
>
z
:
Cell
<
f64
>
w
:
Cell
<
f64
>
}
impl
DOMPointReadOnly
{
pub
fn
new_inherited
(
x
:
f64
y
:
f64
z
:
f64
w
:
f64
)
-
>
DOMPointReadOnly
{
DOMPointReadOnly
{
x
:
Cell
:
:
new
(
x
)
y
:
Cell
:
:
new
(
y
)
z
:
Cell
:
:
new
(
z
)
w
:
Cell
:
:
new
(
w
)
reflector_
:
Reflector
:
:
new
(
)
}
}
pub
fn
new
(
global
:
GlobalRef
x
:
f64
y
:
f64
z
:
f64
w
:
f64
)
-
>
Root
<
DOMPointReadOnly
>
{
reflect_dom_object
(
box
DOMPointReadOnly
:
:
new_inherited
(
x
y
z
w
)
global
Wrap
)
}
pub
fn
Constructor
(
global
:
GlobalRef
x
:
f64
y
:
f64
z
:
f64
w
:
f64
)
-
>
Fallible
<
Root
<
DOMPointReadOnly
>
>
{
Ok
(
DOMPointReadOnly
:
:
new
(
global
x
y
z
w
)
)
}
}
impl
DOMPointReadOnlyMethods
for
DOMPointReadOnly
{
fn
X
(
&
self
)
-
>
f64
{
self
.
x
.
get
(
)
}
fn
Y
(
&
self
)
-
>
f64
{
self
.
y
.
get
(
)
}
fn
Z
(
&
self
)
-
>
f64
{
self
.
z
.
get
(
)
}
fn
W
(
&
self
)
-
>
f64
{
self
.
w
.
get
(
)
}
}
pub
trait
DOMPointWriteMethods
{
fn
SetX
(
&
self
value
:
f64
)
;
fn
SetY
(
&
self
value
:
f64
)
;
fn
SetZ
(
&
self
value
:
f64
)
;
fn
SetW
(
&
self
value
:
f64
)
;
}
impl
DOMPointWriteMethods
for
DOMPointReadOnly
{
fn
SetX
(
&
self
value
:
f64
)
{
self
.
x
.
set
(
value
)
;
}
fn
SetY
(
&
self
value
:
f64
)
{
self
.
y
.
set
(
value
)
;
}
fn
SetZ
(
&
self
value
:
f64
)
{
self
.
z
.
set
(
value
)
;
}
fn
SetW
(
&
self
value
:
f64
)
{
self
.
w
.
set
(
value
)
;
}
}
