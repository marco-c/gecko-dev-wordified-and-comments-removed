use
dom
:
:
bindings
:
:
cell
:
:
DomRefCell
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
HTMLFormElementBinding
:
:
SelectionMode
;
use
dom
:
:
bindings
:
:
conversions
:
:
DerivedFrom
;
use
dom
:
:
bindings
:
:
error
:
:
{
Error
ErrorResult
}
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
event
:
:
{
EventBubbles
EventCancelable
}
;
use
dom
:
:
eventtarget
:
:
EventTarget
;
use
dom
:
:
node
:
:
{
Node
NodeDamage
window_from_node
}
;
use
script_traits
:
:
ScriptToConstellationChan
;
use
textinput
:
:
{
SelectionDirection
SelectionState
TextInput
}
;
pub
trait
TextControl
:
DerivedFrom
<
EventTarget
>
+
DerivedFrom
<
Node
>
{
fn
textinput
(
&
self
)
-
>
&
DomRefCell
<
TextInput
<
ScriptToConstellationChan
>
>
;
fn
selection_api_applies
(
&
self
)
-
>
bool
;
fn
has_selectable_text
(
&
self
)
-
>
bool
;
fn
set_dirty_value_flag
(
&
self
value
:
bool
)
;
fn
dom_select
(
&
self
)
{
if
!
self
.
has_selectable_text
(
)
{
return
;
}
self
.
set_selection_range
(
Some
(
0
)
Some
(
u32
:
:
max_value
(
)
)
None
None
)
;
}
fn
get_dom_selection_start
(
&
self
)
-
>
Option
<
u32
>
{
if
!
self
.
selection_api_applies
(
)
{
return
None
;
}
Some
(
self
.
selection_start
(
)
)
}
fn
set_dom_selection_start
(
&
self
start
:
Option
<
u32
>
)
-
>
ErrorResult
{
if
!
self
.
selection_api_applies
(
)
{
return
Err
(
Error
:
:
InvalidState
)
;
}
let
mut
end
=
self
.
selection_end
(
)
;
if
let
Some
(
s
)
=
start
{
if
end
<
s
{
end
=
s
;
}
}
self
.
set_selection_range
(
start
Some
(
end
)
Some
(
self
.
selection_direction
(
)
)
None
)
;
Ok
(
(
)
)
}
fn
get_dom_selection_end
(
&
self
)
-
>
Option
<
u32
>
{
if
!
self
.
selection_api_applies
(
)
{
return
None
;
}
Some
(
self
.
selection_end
(
)
)
}
fn
set_dom_selection_end
(
&
self
end
:
Option
<
u32
>
)
-
>
ErrorResult
{
if
!
self
.
selection_api_applies
(
)
{
return
Err
(
Error
:
:
InvalidState
)
;
}
self
.
set_selection_range
(
Some
(
self
.
selection_start
(
)
)
end
Some
(
self
.
selection_direction
(
)
)
None
)
;
Ok
(
(
)
)
}
fn
get_dom_selection_direction
(
&
self
)
-
>
Option
<
DOMString
>
{
if
!
self
.
selection_api_applies
(
)
{
return
None
;
}
Some
(
DOMString
:
:
from
(
self
.
selection_direction
(
)
)
)
}
fn
set_dom_selection_direction
(
&
self
direction
:
Option
<
DOMString
>
)
-
>
ErrorResult
{
if
!
self
.
selection_api_applies
(
)
{
return
Err
(
Error
:
:
InvalidState
)
;
}
self
.
set_selection_range
(
Some
(
self
.
selection_start
(
)
)
Some
(
self
.
selection_end
(
)
)
direction
.
map
(
|
d
|
SelectionDirection
:
:
from
(
d
)
)
None
)
;
Ok
(
(
)
)
}
fn
set_dom_selection_range
(
&
self
start
:
u32
end
:
u32
direction
:
Option
<
DOMString
>
)
-
>
ErrorResult
{
if
!
self
.
selection_api_applies
(
)
{
return
Err
(
Error
:
:
InvalidState
)
;
}
self
.
set_selection_range
(
Some
(
start
)
Some
(
end
)
direction
.
map
(
|
d
|
SelectionDirection
:
:
from
(
d
)
)
None
)
;
Ok
(
(
)
)
}
fn
set_dom_range_text
(
&
self
replacement
:
DOMString
start
:
Option
<
u32
>
end
:
Option
<
u32
>
selection_mode
:
SelectionMode
)
-
>
ErrorResult
{
if
!
self
.
selection_api_applies
(
)
{
return
Err
(
Error
:
:
InvalidState
)
;
}
self
.
set_dirty_value_flag
(
true
)
;
let
mut
start
=
start
.
unwrap_or_else
(
|
|
self
.
selection_start
(
)
)
;
let
mut
end
=
end
.
unwrap_or_else
(
|
|
self
.
selection_end
(
)
)
;
if
start
>
end
{
return
Err
(
Error
:
:
IndexSize
)
;
}
let
original_selection_state
=
self
.
textinput
(
)
.
borrow
(
)
.
selection_state
(
)
;
let
content_length
=
self
.
textinput
(
)
.
borrow
(
)
.
len
(
)
as
u32
;
if
start
>
content_length
{
start
=
content_length
;
}
if
end
>
content_length
{
end
=
content_length
;
}
let
mut
selection_start
=
self
.
selection_start
(
)
;
let
mut
selection_end
=
self
.
selection_end
(
)
;
let
new_length
=
replacement
.
len
(
)
as
u32
;
{
let
mut
textinput
=
self
.
textinput
(
)
.
borrow_mut
(
)
;
textinput
.
set_selection_range
(
start
end
SelectionDirection
:
:
None
)
;
textinput
.
replace_selection
(
replacement
)
;
}
let
new_end
=
start
+
new_length
;
match
selection_mode
{
SelectionMode
:
:
Select
=
>
{
selection_start
=
start
;
selection_end
=
new_end
;
}
SelectionMode
:
:
Start
=
>
{
selection_start
=
start
;
selection_end
=
start
;
}
SelectionMode
:
:
End
=
>
{
selection_start
=
new_end
;
selection_end
=
new_end
;
}
SelectionMode
:
:
Preserve
=
>
{
let
old_length
=
end
-
start
;
let
delta
=
(
new_length
as
isize
)
-
(
old_length
as
isize
)
;
if
selection_start
>
end
{
selection_start
=
(
(
selection_start
as
isize
)
+
delta
)
as
u32
;
}
else
if
selection_start
>
start
{
selection_start
=
start
;
}
if
selection_end
>
end
{
selection_end
=
(
(
selection_end
as
isize
)
+
delta
)
as
u32
;
}
else
if
selection_end
>
start
{
selection_end
=
new_end
;
}
}
}
self
.
set_selection_range
(
Some
(
selection_start
)
Some
(
selection_end
)
None
Some
(
original_selection_state
)
)
;
Ok
(
(
)
)
}
fn
selection_start
(
&
self
)
-
>
u32
{
self
.
textinput
(
)
.
borrow
(
)
.
selection_start_offset
(
)
as
u32
}
fn
selection_end
(
&
self
)
-
>
u32
{
self
.
textinput
(
)
.
borrow
(
)
.
selection_end_offset
(
)
as
u32
}
fn
selection_direction
(
&
self
)
-
>
SelectionDirection
{
self
.
textinput
(
)
.
borrow
(
)
.
selection_direction
}
fn
set_selection_range
(
&
self
start
:
Option
<
u32
>
end
:
Option
<
u32
>
direction
:
Option
<
SelectionDirection
>
original_selection_state
:
Option
<
SelectionState
>
)
{
let
mut
textinput
=
self
.
textinput
(
)
.
borrow_mut
(
)
;
let
original_selection_state
=
original_selection_state
.
unwrap_or_else
(
|
|
textinput
.
selection_state
(
)
)
;
let
start
=
start
.
unwrap_or
(
0
)
;
let
end
=
end
.
unwrap_or
(
0
)
;
textinput
.
set_selection_range
(
start
end
direction
.
unwrap_or
(
SelectionDirection
:
:
None
)
)
;
if
textinput
.
selection_state
(
)
!
=
original_selection_state
{
let
window
=
window_from_node
(
self
)
;
window
.
user_interaction_task_source
(
)
.
queue_event
(
&
self
.
upcast
:
:
<
EventTarget
>
(
)
atom
!
(
"
select
"
)
EventBubbles
:
:
Bubbles
EventCancelable
:
:
NotCancelable
&
window
)
;
}
self
.
upcast
:
:
<
Node
>
(
)
.
dirty
(
NodeDamage
:
:
OtherNodeDamage
)
;
}
}
