use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
BluetoothRemoteGATTCharacteristicBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
BluetoothRemoteGATTCharacteristicBinding
:
:
BluetoothRemoteGATTCharacteristicMethods
;
use
dom
:
:
bindings
:
:
global
:
:
GlobalRef
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
MutHeap
Root
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflector
reflect_dom_object
}
;
use
dom
:
:
bindings
:
:
str
:
:
ByteString
;
use
dom
:
:
bluetoothcharacteristicproperties
:
:
BluetoothCharacteristicProperties
;
use
dom
:
:
bluetoothremotegattdescriptor
:
:
BluetoothRemoteGATTDescriptor
;
use
dom
:
:
bluetoothremotegattservice
:
:
BluetoothRemoteGATTService
;
use
util
:
:
str
:
:
DOMString
;
#
[
dom_struct
]
pub
struct
BluetoothRemoteGATTCharacteristic
{
reflector_
:
Reflector
service
:
MutHeap
<
JS
<
BluetoothRemoteGATTService
>
>
uuid
:
DOMString
properties
:
MutHeap
<
JS
<
BluetoothCharacteristicProperties
>
>
value
:
Option
<
ByteString
>
}
impl
BluetoothRemoteGATTCharacteristic
{
pub
fn
new_inherited
(
service
:
&
BluetoothRemoteGATTService
uuid
:
DOMString
properties
:
&
BluetoothCharacteristicProperties
)
-
>
BluetoothRemoteGATTCharacteristic
{
BluetoothRemoteGATTCharacteristic
{
reflector_
:
Reflector
:
:
new
(
)
service
:
MutHeap
:
:
new
(
service
)
uuid
:
uuid
properties
:
MutHeap
:
:
new
(
properties
)
value
:
None
}
}
pub
fn
new
(
global
:
GlobalRef
service
:
&
BluetoothRemoteGATTService
uuid
:
DOMString
properties
:
&
BluetoothCharacteristicProperties
)
-
>
Root
<
BluetoothRemoteGATTCharacteristic
>
{
reflect_dom_object
(
box
BluetoothRemoteGATTCharacteristic
:
:
new_inherited
(
service
uuid
properties
)
global
BluetoothRemoteGATTCharacteristicBinding
:
:
Wrap
)
}
}
impl
BluetoothRemoteGATTCharacteristicMethods
for
BluetoothRemoteGATTCharacteristic
{
fn
Properties
(
&
self
)
-
>
Root
<
BluetoothCharacteristicProperties
>
{
self
.
properties
.
get
(
)
}
fn
Service
(
&
self
)
-
>
Root
<
BluetoothRemoteGATTService
>
{
self
.
service
.
get
(
)
}
fn
Uuid
(
&
self
)
-
>
DOMString
{
self
.
uuid
.
clone
(
)
}
fn
GetDescriptor
(
&
self
)
-
>
Option
<
Root
<
BluetoothRemoteGATTDescriptor
>
>
{
None
}
fn
GetValue
(
&
self
)
-
>
Option
<
ByteString
>
{
self
.
value
.
clone
(
)
}
fn
ReadValue
(
&
self
)
-
>
ByteString
{
ByteString
:
:
new
(
vec
!
(
)
)
}
}
