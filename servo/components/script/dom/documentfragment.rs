use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
DocumentFragmentBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
DocumentFragmentBinding
:
:
DocumentFragmentMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
WindowBinding
:
:
WindowMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
UnionTypes
:
:
NodeOrString
;
use
dom
:
:
bindings
:
:
error
:
:
{
ErrorResult
Fallible
}
;
use
dom
:
:
bindings
:
:
inheritance
:
:
Castable
;
use
dom
:
:
bindings
:
:
root
:
:
DomRoot
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
document
:
:
Document
;
use
dom
:
:
element
:
:
Element
;
use
dom
:
:
htmlcollection
:
:
HTMLCollection
;
use
dom
:
:
node
:
:
{
Node
window_from_node
}
;
use
dom
:
:
nodelist
:
:
NodeList
;
use
dom
:
:
window
:
:
Window
;
use
dom_struct
:
:
dom_struct
;
use
servo_atoms
:
:
Atom
;
#
[
dom_struct
]
pub
struct
DocumentFragment
{
node
:
Node
}
impl
DocumentFragment
{
fn
new_inherited
(
document
:
&
Document
)
-
>
DocumentFragment
{
DocumentFragment
{
node
:
Node
:
:
new_inherited
(
document
)
}
}
pub
fn
new
(
document
:
&
Document
)
-
>
DomRoot
<
DocumentFragment
>
{
Node
:
:
reflect_node
(
Box
:
:
new
(
DocumentFragment
:
:
new_inherited
(
document
)
)
document
DocumentFragmentBinding
:
:
Wrap
)
}
pub
fn
Constructor
(
window
:
&
Window
)
-
>
Fallible
<
DomRoot
<
DocumentFragment
>
>
{
let
document
=
window
.
Document
(
)
;
Ok
(
DocumentFragment
:
:
new
(
&
document
)
)
}
}
impl
DocumentFragmentMethods
for
DocumentFragment
{
fn
Children
(
&
self
)
-
>
DomRoot
<
HTMLCollection
>
{
let
window
=
window_from_node
(
self
)
;
HTMLCollection
:
:
children
(
&
window
self
.
upcast
(
)
)
}
fn
GetElementById
(
&
self
id
:
DOMString
)
-
>
Option
<
DomRoot
<
Element
>
>
{
let
node
=
self
.
upcast
:
:
<
Node
>
(
)
;
let
id
=
Atom
:
:
from
(
id
)
;
node
.
traverse_preorder
(
)
.
filter_map
(
DomRoot
:
:
downcast
:
:
<
Element
>
)
.
find
(
|
descendant
|
{
match
descendant
.
get_attribute
(
&
ns
!
(
)
&
local_name
!
(
"
id
"
)
)
{
None
=
>
false
Some
(
attr
)
=
>
*
attr
.
value
(
)
.
as_atom
(
)
=
=
id
}
}
)
}
fn
GetFirstElementChild
(
&
self
)
-
>
Option
<
DomRoot
<
Element
>
>
{
self
.
upcast
:
:
<
Node
>
(
)
.
child_elements
(
)
.
next
(
)
}
fn
GetLastElementChild
(
&
self
)
-
>
Option
<
DomRoot
<
Element
>
>
{
self
.
upcast
:
:
<
Node
>
(
)
.
rev_children
(
)
.
filter_map
(
DomRoot
:
:
downcast
:
:
<
Element
>
)
.
next
(
)
}
fn
ChildElementCount
(
&
self
)
-
>
u32
{
self
.
upcast
:
:
<
Node
>
(
)
.
child_elements
(
)
.
count
(
)
as
u32
}
fn
Prepend
(
&
self
nodes
:
Vec
<
NodeOrString
>
)
-
>
ErrorResult
{
self
.
upcast
:
:
<
Node
>
(
)
.
prepend
(
nodes
)
}
fn
Append
(
&
self
nodes
:
Vec
<
NodeOrString
>
)
-
>
ErrorResult
{
self
.
upcast
:
:
<
Node
>
(
)
.
append
(
nodes
)
}
fn
QuerySelector
(
&
self
selectors
:
DOMString
)
-
>
Fallible
<
Option
<
DomRoot
<
Element
>
>
>
{
self
.
upcast
:
:
<
Node
>
(
)
.
query_selector
(
selectors
)
}
fn
QuerySelectorAll
(
&
self
selectors
:
DOMString
)
-
>
Fallible
<
DomRoot
<
NodeList
>
>
{
self
.
upcast
:
:
<
Node
>
(
)
.
query_selector_all
(
selectors
)
}
}
