use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
DissimilarOriginWindowBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
DissimilarOriginWindowBinding
:
:
DissimilarOriginWindowMethods
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
MutNullableJS
Root
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
DomObject
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
browsingcontext
:
:
BrowsingContext
;
use
dom
:
:
dissimilaroriginlocation
:
:
DissimilarOriginLocation
;
use
dom
:
:
globalscope
:
:
GlobalScope
;
use
dom_struct
:
:
dom_struct
;
use
ipc_channel
:
:
ipc
;
use
js
:
:
jsapi
:
:
{
JSContext
HandleValue
}
;
use
js
:
:
jsval
:
:
{
JSVal
UndefinedValue
}
;
use
msg
:
:
constellation_msg
:
:
PipelineId
;
#
[
dom_struct
]
pub
struct
DissimilarOriginWindow
{
globalscope
:
GlobalScope
browsing_context
:
JS
<
BrowsingContext
>
location
:
MutNullableJS
<
DissimilarOriginLocation
>
}
impl
DissimilarOriginWindow
{
#
[
allow
(
unsafe_code
)
]
pub
fn
new
(
browsing_context
:
&
BrowsingContext
)
-
>
Root
<
DissimilarOriginWindow
>
{
let
globalscope
=
browsing_context
.
global
(
)
;
let
cx
=
globalscope
.
get_cx
(
)
;
let
(
timer_event_chan
_
)
=
ipc
:
:
channel
(
)
.
unwrap
(
)
;
let
win
=
box
DissimilarOriginWindow
{
globalscope
:
GlobalScope
:
:
new_inherited
(
PipelineId
:
:
new
(
)
globalscope
.
devtools_chan
(
)
.
cloned
(
)
globalscope
.
mem_profiler_chan
(
)
.
clone
(
)
globalscope
.
time_profiler_chan
(
)
.
clone
(
)
globalscope
.
constellation_chan
(
)
.
clone
(
)
globalscope
.
scheduler_chan
(
)
.
clone
(
)
globalscope
.
resource_threads
(
)
.
clone
(
)
timer_event_chan
)
browsing_context
:
JS
:
:
from_ref
(
browsing_context
)
location
:
MutNullableJS
:
:
new
(
None
)
}
;
unsafe
{
DissimilarOriginWindowBinding
:
:
Wrap
(
cx
win
)
}
}
}
impl
DissimilarOriginWindowMethods
for
DissimilarOriginWindow
{
fn
Window
(
&
self
)
-
>
Root
<
BrowsingContext
>
{
Root
:
:
from_ref
(
&
*
self
.
browsing_context
)
}
fn
Self_
(
&
self
)
-
>
Root
<
BrowsingContext
>
{
Root
:
:
from_ref
(
&
*
self
.
browsing_context
)
}
fn
Frames
(
&
self
)
-
>
Root
<
BrowsingContext
>
{
Root
:
:
from_ref
(
&
*
self
.
browsing_context
)
}
fn
GetParent
(
&
self
)
-
>
Option
<
Root
<
BrowsingContext
>
>
{
Some
(
Root
:
:
from_ref
(
&
*
self
.
browsing_context
)
)
}
fn
GetTop
(
&
self
)
-
>
Option
<
Root
<
BrowsingContext
>
>
{
Some
(
Root
:
:
from_ref
(
&
*
self
.
browsing_context
)
)
}
fn
Length
(
&
self
)
-
>
u32
{
0
}
fn
Close
(
&
self
)
{
}
fn
Closed
(
&
self
)
-
>
bool
{
false
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
PostMessage
(
&
self
_
:
*
mut
JSContext
_
:
HandleValue
_
:
DOMString
)
{
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
Opener
(
&
self
_
:
*
mut
JSContext
)
-
>
JSVal
{
UndefinedValue
(
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
SetOpener
(
&
self
_
:
*
mut
JSContext
_
:
HandleValue
)
{
}
fn
Blur
(
&
self
)
{
}
fn
Focus
(
&
self
)
{
}
fn
Location
(
&
self
)
-
>
Root
<
DissimilarOriginLocation
>
{
self
.
location
.
or_init
(
|
|
DissimilarOriginLocation
:
:
new
(
self
)
)
}
}
