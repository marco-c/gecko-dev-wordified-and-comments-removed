use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
DissimilarOriginWindowBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
DissimilarOriginWindowBinding
:
:
DissimilarOriginWindowMethods
;
use
dom
:
:
bindings
:
:
error
:
:
{
Error
ErrorResult
}
;
use
dom
:
:
bindings
:
:
inheritance
:
:
Castable
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
MutNullableJS
Root
}
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
bindings
:
:
structuredclone
:
:
StructuredCloneData
;
use
dom
:
:
dissimilaroriginlocation
:
:
DissimilarOriginLocation
;
use
dom
:
:
globalscope
:
:
GlobalScope
;
use
dom
:
:
windowproxy
:
:
WindowProxy
;
use
dom_struct
:
:
dom_struct
;
use
ipc_channel
:
:
ipc
;
use
js
:
:
jsapi
:
:
{
JSContext
HandleValue
}
;
use
js
:
:
jsval
:
:
{
JSVal
UndefinedValue
}
;
use
msg
:
:
constellation_msg
:
:
PipelineId
;
use
script_traits
:
:
ScriptMsg
;
use
servo_url
:
:
ImmutableOrigin
;
use
servo_url
:
:
MutableOrigin
;
use
servo_url
:
:
ServoUrl
;
#
[
dom_struct
]
pub
struct
DissimilarOriginWindow
{
globalscope
:
GlobalScope
window_proxy
:
JS
<
WindowProxy
>
location
:
MutNullableJS
<
DissimilarOriginLocation
>
}
impl
DissimilarOriginWindow
{
#
[
allow
(
unsafe_code
)
]
pub
fn
new
(
global_to_clone_from
:
&
GlobalScope
window_proxy
:
&
WindowProxy
)
-
>
Root
<
Self
>
{
let
cx
=
global_to_clone_from
.
get_cx
(
)
;
let
(
timer_event_chan
_
)
=
ipc
:
:
channel
(
)
.
unwrap
(
)
;
let
win
=
box
Self
{
globalscope
:
GlobalScope
:
:
new_inherited
(
PipelineId
:
:
new
(
)
global_to_clone_from
.
devtools_chan
(
)
.
cloned
(
)
global_to_clone_from
.
mem_profiler_chan
(
)
.
clone
(
)
global_to_clone_from
.
time_profiler_chan
(
)
.
clone
(
)
global_to_clone_from
.
script_to_constellation_chan
(
)
.
clone
(
)
global_to_clone_from
.
scheduler_chan
(
)
.
clone
(
)
global_to_clone_from
.
resource_threads
(
)
.
clone
(
)
timer_event_chan
global_to_clone_from
.
origin
(
)
.
clone
(
)
global_to_clone_from
.
microtask_queue
(
)
.
clone
(
)
)
window_proxy
:
JS
:
:
from_ref
(
window_proxy
)
location
:
Default
:
:
default
(
)
}
;
unsafe
{
DissimilarOriginWindowBinding
:
:
Wrap
(
cx
win
)
}
}
pub
fn
origin
(
&
self
)
-
>
&
MutableOrigin
{
self
.
upcast
:
:
<
GlobalScope
>
(
)
.
origin
(
)
}
}
impl
DissimilarOriginWindowMethods
for
DissimilarOriginWindow
{
fn
Window
(
&
self
)
-
>
Root
<
WindowProxy
>
{
Root
:
:
from_ref
(
&
*
self
.
window_proxy
)
}
fn
Self_
(
&
self
)
-
>
Root
<
WindowProxy
>
{
Root
:
:
from_ref
(
&
*
self
.
window_proxy
)
}
fn
Frames
(
&
self
)
-
>
Root
<
WindowProxy
>
{
Root
:
:
from_ref
(
&
*
self
.
window_proxy
)
}
fn
GetParent
(
&
self
)
-
>
Option
<
Root
<
WindowProxy
>
>
{
if
self
.
window_proxy
.
is_browsing_context_discarded
(
)
{
return
None
;
}
if
let
Some
(
parent
)
=
self
.
window_proxy
.
parent
(
)
{
return
Some
(
Root
:
:
from_ref
(
parent
)
)
;
}
Some
(
Root
:
:
from_ref
(
&
*
self
.
window_proxy
)
)
}
fn
GetTop
(
&
self
)
-
>
Option
<
Root
<
WindowProxy
>
>
{
if
self
.
window_proxy
.
is_browsing_context_discarded
(
)
{
return
None
;
}
Some
(
Root
:
:
from_ref
(
self
.
window_proxy
.
top
(
)
)
)
}
fn
Length
(
&
self
)
-
>
u32
{
0
}
fn
Close
(
&
self
)
{
}
fn
Closed
(
&
self
)
-
>
bool
{
false
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
PostMessage
(
&
self
cx
:
*
mut
JSContext
message
:
HandleValue
origin
:
DOMString
)
-
>
ErrorResult
{
let
origin
=
match
&
origin
[
.
.
]
{
"
*
"
=
>
None
"
/
"
=
>
{
None
}
url
=
>
match
ServoUrl
:
:
parse
(
&
url
)
{
Ok
(
url
)
=
>
Some
(
url
.
origin
(
)
)
Err
(
_
)
=
>
return
Err
(
Error
:
:
Syntax
)
}
}
;
let
data
=
StructuredCloneData
:
:
write
(
cx
message
)
?
;
self
.
post_message
(
origin
data
)
;
Ok
(
(
)
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
Opener
(
&
self
_
:
*
mut
JSContext
)
-
>
JSVal
{
UndefinedValue
(
)
}
#
[
allow
(
unsafe_code
)
]
unsafe
fn
SetOpener
(
&
self
_
:
*
mut
JSContext
_
:
HandleValue
)
{
}
fn
Blur
(
&
self
)
{
}
fn
Focus
(
&
self
)
{
}
fn
Location
(
&
self
)
-
>
Root
<
DissimilarOriginLocation
>
{
self
.
location
.
or_init
(
|
|
DissimilarOriginLocation
:
:
new
(
self
)
)
}
}
impl
DissimilarOriginWindow
{
pub
fn
post_message
(
&
self
origin
:
Option
<
ImmutableOrigin
>
data
:
StructuredCloneData
)
{
let
msg
=
ScriptMsg
:
:
PostMessage
(
self
.
window_proxy
.
browsing_context_id
(
)
origin
data
.
move_to_arraybuffer
(
)
)
;
let
_
=
self
.
upcast
:
:
<
GlobalScope
>
(
)
.
script_to_constellation_chan
(
)
.
send
(
msg
)
;
}
}
