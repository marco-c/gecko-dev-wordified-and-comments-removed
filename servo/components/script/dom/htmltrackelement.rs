use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
HTMLTrackElementBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
{
ElementTypeId
EventTargetTypeId
HTMLElementTypeId
}
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
{
HTMLTrackElementDerived
NodeTypeId
}
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
document
:
:
Document
;
use
dom
:
:
eventtarget
:
:
EventTarget
;
use
dom
:
:
htmlelement
:
:
HTMLElement
;
use
dom
:
:
node
:
:
Node
;
use
util
:
:
str
:
:
DOMString
;
#
[
dom_struct
]
pub
struct
HTMLTrackElement
{
htmlelement
:
HTMLElement
}
impl
HTMLTrackElementDerived
for
EventTarget
{
fn
is_htmltrackelement
(
&
self
)
-
>
bool
{
*
self
.
type_id
(
)
=
=
EventTargetTypeId
:
:
Node
(
NodeTypeId
:
:
Element
(
ElementTypeId
:
:
HTMLElement
(
HTMLElementTypeId
:
:
HTMLTrackElement
)
)
)
}
}
impl
HTMLTrackElement
{
fn
new_inherited
(
localName
:
DOMString
prefix
:
Option
<
DOMString
>
document
:
&
Document
)
-
>
HTMLTrackElement
{
HTMLTrackElement
{
htmlelement
:
HTMLElement
:
:
new_inherited
(
HTMLElementTypeId
:
:
HTMLTrackElement
localName
prefix
document
)
}
}
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new
(
localName
:
DOMString
prefix
:
Option
<
DOMString
>
document
:
&
Document
)
-
>
Root
<
HTMLTrackElement
>
{
let
element
=
HTMLTrackElement
:
:
new_inherited
(
localName
prefix
document
)
;
Node
:
:
reflect_node
(
box
element
document
HTMLTrackElementBinding
:
:
Wrap
)
}
}
