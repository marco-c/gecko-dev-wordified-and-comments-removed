use
devtools_traits
:
:
AttrInfo
;
use
dom
:
:
bindings
:
:
cell
:
:
DOMRefCell
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
AttrBinding
:
:
{
self
AttrMethods
}
;
use
dom
:
:
bindings
:
:
inheritance
:
:
Castable
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
MutNullableHeap
}
;
use
dom
:
:
bindings
:
:
js
:
:
{
LayoutJS
Root
RootedReference
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflector
reflect_dom_object
}
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
element
:
:
{
AttributeMutation
Element
}
;
use
dom
:
:
virtualmethods
:
:
vtable_for
;
use
dom
:
:
window
:
:
Window
;
use
html5ever_atoms
:
:
{
Prefix
LocalName
Namespace
}
;
use
servo_atoms
:
:
Atom
;
use
std
:
:
borrow
:
:
ToOwned
;
use
std
:
:
cell
:
:
Ref
;
use
std
:
:
mem
;
use
style
:
:
attr
:
:
{
AttrIdentifier
AttrValue
}
;
#
[
dom_struct
]
pub
struct
Attr
{
reflector_
:
Reflector
identifier
:
AttrIdentifier
value
:
DOMRefCell
<
AttrValue
>
owner
:
MutNullableHeap
<
JS
<
Element
>
>
}
impl
Attr
{
fn
new_inherited
(
local_name
:
LocalName
value
:
AttrValue
name
:
LocalName
namespace
:
Namespace
prefix
:
Option
<
Prefix
>
owner
:
Option
<
&
Element
>
)
-
>
Attr
{
Attr
{
reflector_
:
Reflector
:
:
new
(
)
identifier
:
AttrIdentifier
{
local_name
:
local_name
name
:
name
namespace
:
namespace
prefix
:
prefix
}
value
:
DOMRefCell
:
:
new
(
value
)
owner
:
MutNullableHeap
:
:
new
(
owner
)
}
}
pub
fn
new
(
window
:
&
Window
local_name
:
LocalName
value
:
AttrValue
name
:
LocalName
namespace
:
Namespace
prefix
:
Option
<
Prefix
>
owner
:
Option
<
&
Element
>
)
-
>
Root
<
Attr
>
{
reflect_dom_object
(
box
Attr
:
:
new_inherited
(
local_name
value
name
namespace
prefix
owner
)
window
AttrBinding
:
:
Wrap
)
}
#
[
inline
]
pub
fn
name
(
&
self
)
-
>
&
LocalName
{
&
self
.
identifier
.
name
}
#
[
inline
]
pub
fn
namespace
(
&
self
)
-
>
&
Namespace
{
&
self
.
identifier
.
namespace
}
#
[
inline
]
pub
fn
prefix
(
&
self
)
-
>
&
Option
<
Prefix
>
{
&
self
.
identifier
.
prefix
}
}
impl
AttrMethods
for
Attr
{
fn
LocalName
(
&
self
)
-
>
DOMString
{
DOMString
:
:
from
(
&
*
*
self
.
local_name
(
)
)
}
fn
Value
(
&
self
)
-
>
DOMString
{
DOMString
:
:
from
(
&
*
*
self
.
value
(
)
)
}
fn
SetValue
(
&
self
value
:
DOMString
)
{
if
let
Some
(
owner
)
=
self
.
owner
(
)
{
let
value
=
owner
.
parse_attribute
(
&
self
.
identifier
.
namespace
self
.
local_name
(
)
value
)
;
self
.
set_value
(
value
&
owner
)
;
}
else
{
*
self
.
value
.
borrow_mut
(
)
=
AttrValue
:
:
String
(
value
.
into
(
)
)
;
}
}
fn
TextContent
(
&
self
)
-
>
DOMString
{
self
.
Value
(
)
}
fn
SetTextContent
(
&
self
value
:
DOMString
)
{
self
.
SetValue
(
value
)
}
fn
NodeValue
(
&
self
)
-
>
DOMString
{
self
.
Value
(
)
}
fn
SetNodeValue
(
&
self
value
:
DOMString
)
{
self
.
SetValue
(
value
)
}
fn
Name
(
&
self
)
-
>
DOMString
{
DOMString
:
:
from
(
&
*
self
.
identifier
.
name
)
}
fn
NodeName
(
&
self
)
-
>
DOMString
{
self
.
Name
(
)
}
fn
GetNamespaceURI
(
&
self
)
-
>
Option
<
DOMString
>
{
match
self
.
identifier
.
namespace
{
ns
!
(
)
=
>
None
ref
url
=
>
Some
(
DOMString
:
:
from
(
&
*
*
url
)
)
}
}
fn
GetPrefix
(
&
self
)
-
>
Option
<
DOMString
>
{
self
.
prefix
(
)
.
as_ref
(
)
.
map
(
|
p
|
DOMString
:
:
from
(
&
*
*
p
)
)
}
fn
GetOwnerElement
(
&
self
)
-
>
Option
<
Root
<
Element
>
>
{
self
.
owner
(
)
}
fn
Specified
(
&
self
)
-
>
bool
{
true
}
}
impl
Attr
{
pub
fn
set_value
(
&
self
mut
value
:
AttrValue
owner
:
&
Element
)
{
assert
!
(
Some
(
owner
)
=
=
self
.
owner
(
)
.
r
(
)
)
;
owner
.
will_mutate_attr
(
)
;
self
.
swap_value
(
&
mut
value
)
;
if
self
.
identifier
.
namespace
=
=
ns
!
(
)
{
vtable_for
(
owner
.
upcast
(
)
)
.
attribute_mutated
(
self
AttributeMutation
:
:
Set
(
Some
(
&
value
)
)
)
;
}
}
pub
fn
swap_value
(
&
self
value
:
&
mut
AttrValue
)
{
mem
:
:
swap
(
&
mut
*
self
.
value
.
borrow_mut
(
)
value
)
;
}
pub
fn
identifier
(
&
self
)
-
>
&
AttrIdentifier
{
&
self
.
identifier
}
pub
fn
value
(
&
self
)
-
>
Ref
<
AttrValue
>
{
self
.
value
.
borrow
(
)
}
pub
fn
local_name
(
&
self
)
-
>
&
LocalName
{
&
self
.
identifier
.
local_name
}
pub
fn
set_owner
(
&
self
owner
:
Option
<
&
Element
>
)
{
let
ns
=
&
self
.
identifier
.
namespace
;
match
(
self
.
owner
(
)
owner
)
{
(
Some
(
old
)
None
)
=
>
{
assert
!
(
old
.
get_attribute
(
&
ns
&
self
.
identifier
.
local_name
)
.
r
(
)
!
=
Some
(
self
)
)
}
(
Some
(
old
)
Some
(
new
)
)
=
>
assert
!
(
&
*
old
=
=
new
)
_
=
>
{
}
}
self
.
owner
.
set
(
owner
)
;
}
pub
fn
owner
(
&
self
)
-
>
Option
<
Root
<
Element
>
>
{
self
.
owner
.
get
(
)
}
pub
fn
summarize
(
&
self
)
-
>
AttrInfo
{
AttrInfo
{
namespace
:
(
*
self
.
identifier
.
namespace
)
.
to_owned
(
)
name
:
String
:
:
from
(
self
.
Name
(
)
)
value
:
String
:
:
from
(
self
.
Value
(
)
)
}
}
}
#
[
allow
(
unsafe_code
)
]
pub
trait
AttrHelpersForLayout
{
unsafe
fn
value_forever
(
&
self
)
-
>
&
'
static
AttrValue
;
unsafe
fn
value_ref_forever
(
&
self
)
-
>
&
'
static
str
;
unsafe
fn
value_atom_forever
(
&
self
)
-
>
Option
<
Atom
>
;
unsafe
fn
value_tokens_forever
(
&
self
)
-
>
Option
<
&
'
static
[
Atom
]
>
;
unsafe
fn
local_name_atom_forever
(
&
self
)
-
>
LocalName
;
unsafe
fn
value_for_layout
(
&
self
)
-
>
&
AttrValue
;
}
#
[
allow
(
unsafe_code
)
]
impl
AttrHelpersForLayout
for
LayoutJS
<
Attr
>
{
#
[
inline
]
unsafe
fn
value_forever
(
&
self
)
-
>
&
'
static
AttrValue
{
mem
:
:
transmute
:
:
<
&
AttrValue
&
AttrValue
>
(
(
*
self
.
unsafe_get
(
)
)
.
value
.
borrow_for_layout
(
)
)
}
#
[
inline
]
unsafe
fn
value_ref_forever
(
&
self
)
-
>
&
'
static
str
{
&
*
*
self
.
value_forever
(
)
}
#
[
inline
]
unsafe
fn
value_atom_forever
(
&
self
)
-
>
Option
<
Atom
>
{
let
value
=
(
*
self
.
unsafe_get
(
)
)
.
value
.
borrow_for_layout
(
)
;
match
*
value
{
AttrValue
:
:
Atom
(
ref
val
)
=
>
Some
(
val
.
clone
(
)
)
_
=
>
None
}
}
#
[
inline
]
unsafe
fn
value_tokens_forever
(
&
self
)
-
>
Option
<
&
'
static
[
Atom
]
>
{
match
*
self
.
value_forever
(
)
{
AttrValue
:
:
TokenList
(
_
ref
tokens
)
=
>
Some
(
tokens
)
_
=
>
None
}
}
#
[
inline
]
unsafe
fn
local_name_atom_forever
(
&
self
)
-
>
LocalName
{
(
*
self
.
unsafe_get
(
)
)
.
identifier
.
local_name
.
clone
(
)
}
#
[
inline
]
unsafe
fn
value_for_layout
(
&
self
)
-
>
&
AttrValue
{
(
*
self
.
unsafe_get
(
)
)
.
value
.
borrow_for_layout
(
)
}
}
