use
dom
:
:
bindings
:
:
str
:
:
USVString
;
use
url
:
:
{
Url
SchemeData
}
;
use
std
:
:
borrow
:
:
ToOwned
;
pub
struct
UrlHelper
;
impl
UrlHelper
{
pub
fn
Href
(
url
:
&
Url
)
-
>
USVString
{
USVString
(
url
.
serialize
(
)
)
}
pub
fn
Search
(
url
:
&
Url
)
-
>
USVString
{
USVString
(
match
url
.
query
{
None
=
>
"
"
.
to_owned
(
)
Some
(
ref
query
)
if
query
.
is_empty
(
)
=
>
"
"
.
to_owned
(
)
Some
(
ref
query
)
=
>
format
!
(
"
?
{
}
"
query
)
}
)
}
pub
fn
Hash
(
url
:
&
Url
)
-
>
USVString
{
USVString
(
match
url
.
fragment
{
None
=
>
"
"
.
to_owned
(
)
Some
(
ref
hash
)
if
hash
.
is_empty
(
)
=
>
"
"
.
to_owned
(
)
Some
(
ref
hash
)
=
>
format
!
(
"
#
{
}
"
hash
)
}
)
}
pub
fn
Pathname
(
url
:
&
Url
)
-
>
USVString
{
USVString
(
match
url
.
scheme_data
{
SchemeData
:
:
NonRelative
(
ref
scheme_data
)
=
>
scheme_data
.
clone
(
)
SchemeData
:
:
Relative
(
.
.
)
=
>
url
.
serialize_path
(
)
.
unwrap
(
)
}
)
}
pub
fn
SameOrigin
(
urlA
:
&
Url
urlB
:
&
Url
)
-
>
bool
{
if
urlA
.
host
(
)
!
=
urlB
.
host
(
)
{
return
false
}
if
urlA
.
scheme
!
=
urlB
.
scheme
{
return
false
}
if
urlA
.
port
(
)
!
=
urlB
.
port
(
)
{
return
false
}
return
true
}
}
