use
dom
:
:
attr
:
:
Attr
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
ElementBinding
:
:
ElementMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
NamedNodeMapBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
NamedNodeMapBinding
:
:
NamedNodeMapMethods
;
use
dom
:
:
bindings
:
:
error
:
:
{
Error
Fallible
}
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
Root
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflector
reflect_dom_object
}
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
bindings
:
:
xmlname
:
:
namespace_from_domstring
;
use
dom
:
:
element
:
:
Element
;
use
dom
:
:
window
:
:
Window
;
use
std
:
:
ascii
:
:
AsciiExt
;
use
string_cache
:
:
Atom
;
#
[
dom_struct
]
pub
struct
NamedNodeMap
{
reflector_
:
Reflector
owner
:
JS
<
Element
>
}
impl
NamedNodeMap
{
fn
new_inherited
(
elem
:
&
Element
)
-
>
NamedNodeMap
{
NamedNodeMap
{
reflector_
:
Reflector
:
:
new
(
)
owner
:
JS
:
:
from_ref
(
elem
)
}
}
pub
fn
new
(
window
:
&
Window
elem
:
&
Element
)
-
>
Root
<
NamedNodeMap
>
{
reflect_dom_object
(
box
NamedNodeMap
:
:
new_inherited
(
elem
)
window
NamedNodeMapBinding
:
:
Wrap
)
}
}
impl
NamedNodeMapMethods
for
NamedNodeMap
{
fn
Length
(
&
self
)
-
>
u32
{
self
.
owner
.
attrs
(
)
.
len
(
)
as
u32
}
fn
Item
(
&
self
index
:
u32
)
-
>
Option
<
Root
<
Attr
>
>
{
self
.
owner
.
attrs
(
)
.
get
(
index
as
usize
)
.
map
(
|
js
|
Root
:
:
from_ref
(
&
*
*
js
)
)
}
fn
GetNamedItem
(
&
self
name
:
DOMString
)
-
>
Option
<
Root
<
Attr
>
>
{
self
.
owner
.
get_attribute_by_name
(
name
)
}
fn
GetNamedItemNS
(
&
self
namespace
:
Option
<
DOMString
>
local_name
:
DOMString
)
-
>
Option
<
Root
<
Attr
>
>
{
let
ns
=
namespace_from_domstring
(
namespace
)
;
self
.
owner
.
get_attribute
(
&
ns
&
Atom
:
:
from
(
local_name
)
)
}
fn
SetNamedItem
(
&
self
attr
:
&
Attr
)
-
>
Fallible
<
Option
<
Root
<
Attr
>
>
>
{
self
.
owner
.
SetAttributeNode
(
attr
)
}
fn
SetNamedItemNS
(
&
self
attr
:
&
Attr
)
-
>
Fallible
<
Option
<
Root
<
Attr
>
>
>
{
self
.
SetNamedItem
(
attr
)
}
fn
RemoveNamedItem
(
&
self
name
:
DOMString
)
-
>
Fallible
<
Root
<
Attr
>
>
{
let
name
=
self
.
owner
.
parsed_name
(
name
)
;
self
.
owner
.
remove_attribute_by_name
(
&
name
)
.
ok_or
(
Error
:
:
NotFound
)
}
fn
RemoveNamedItemNS
(
&
self
namespace
:
Option
<
DOMString
>
local_name
:
DOMString
)
-
>
Fallible
<
Root
<
Attr
>
>
{
let
ns
=
namespace_from_domstring
(
namespace
)
;
self
.
owner
.
remove_attribute
(
&
ns
&
Atom
:
:
from
(
local_name
)
)
.
ok_or
(
Error
:
:
NotFound
)
}
fn
IndexedGetter
(
&
self
index
:
u32
)
-
>
Option
<
Root
<
Attr
>
>
{
self
.
Item
(
index
)
}
fn
NamedGetter
(
&
self
name
:
DOMString
)
-
>
Option
<
Root
<
Attr
>
>
{
self
.
GetNamedItem
(
name
)
}
fn
SupportedPropertyNames
(
&
self
)
-
>
Vec
<
DOMString
>
{
let
mut
names
=
vec
!
(
)
;
let
html_element_in_html_document
=
self
.
owner
.
html_element_in_html_document
(
)
;
for
attr
in
self
.
owner
.
attrs
(
)
.
iter
(
)
{
let
s
=
&
*
*
attr
.
name
(
)
;
if
html_element_in_html_document
&
&
!
s
.
bytes
(
)
.
all
(
|
b
|
b
.
to_ascii_lowercase
(
)
=
=
b
)
{
continue
}
if
!
names
.
iter
(
)
.
any
(
|
name
|
&
*
name
=
=
s
)
{
names
.
push
(
DOMString
:
:
from
(
s
)
)
;
}
}
names
}
}
