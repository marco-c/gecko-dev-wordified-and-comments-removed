use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
StyleSheetBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
StyleSheetBinding
:
:
StyleSheetMethods
;
use
dom
:
:
bindings
:
:
global
:
:
GlobalRef
;
use
dom
:
:
bindings
:
:
js
:
:
{
Root
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflector
reflect_dom_object
}
;
use
dom
:
:
window
:
:
Window
;
use
util
:
:
str
:
:
DOMString
;
#
[
dom_struct
]
pub
struct
StyleSheet
{
reflector_
:
Reflector
type_
:
DOMString
href
:
Option
<
DOMString
>
title
:
Option
<
DOMString
>
}
impl
StyleSheet
{
#
[
allow
(
unrooted_must_root
)
]
fn
new_inherited
(
type_
:
DOMString
href
:
Option
<
DOMString
>
title
:
Option
<
DOMString
>
)
-
>
StyleSheet
{
StyleSheet
{
reflector_
:
Reflector
:
:
new
(
)
type_
:
type_
href
:
href
title
:
title
}
}
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new
(
window
:
&
Window
type_
:
DOMString
href
:
Option
<
DOMString
>
title
:
Option
<
DOMString
>
)
-
>
Root
<
StyleSheet
>
{
reflect_dom_object
(
box
StyleSheet
:
:
new_inherited
(
type_
href
title
)
GlobalRef
:
:
Window
(
window
)
StyleSheetBinding
:
:
Wrap
)
}
}
impl
StyleSheetMethods
for
StyleSheet
{
fn
Type_
(
&
self
)
-
>
DOMString
{
self
.
type_
.
clone
(
)
}
fn
GetHref
(
&
self
)
-
>
Option
<
DOMString
>
{
self
.
href
.
clone
(
)
}
fn
GetTitle
(
&
self
)
-
>
Option
<
DOMString
>
{
self
.
title
.
clone
(
)
}
}
