use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
CharacterDataBinding
:
:
CharacterDataMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
DocumentBinding
:
:
DocumentMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
NodeBinding
:
:
NodeMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
TextBinding
:
:
{
self
TextMethods
}
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
WindowBinding
:
:
WindowMethods
;
use
dom
:
:
bindings
:
:
error
:
:
{
Error
Fallible
}
;
use
dom
:
:
bindings
:
:
inheritance
:
:
Castable
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
js
:
:
RootedReference
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
characterdata
:
:
CharacterData
;
use
dom
:
:
document
:
:
Document
;
use
dom
:
:
node
:
:
Node
;
use
dom
:
:
window
:
:
Window
;
#
[
dom_struct
]
pub
struct
Text
{
characterdata
:
CharacterData
}
impl
Text
{
fn
new_inherited
(
text
:
DOMString
document
:
&
Document
)
-
>
Text
{
Text
{
characterdata
:
CharacterData
:
:
new_inherited
(
text
document
)
}
}
pub
fn
new
(
text
:
DOMString
document
:
&
Document
)
-
>
Root
<
Text
>
{
Node
:
:
reflect_node
(
box
Text
:
:
new_inherited
(
text
document
)
document
TextBinding
:
:
Wrap
)
}
pub
fn
Constructor
(
window
:
&
Window
text
:
DOMString
)
-
>
Fallible
<
Root
<
Text
>
>
{
let
document
=
window
.
Document
(
)
;
Ok
(
Text
:
:
new
(
text
&
document
)
)
}
}
impl
TextMethods
for
Text
{
fn
SplitText
(
&
self
offset
:
u32
)
-
>
Fallible
<
Root
<
Text
>
>
{
let
cdata
=
self
.
upcast
:
:
<
CharacterData
>
(
)
;
let
length
=
cdata
.
Length
(
)
;
if
offset
>
length
{
return
Err
(
Error
:
:
IndexSize
)
;
}
let
count
=
length
-
offset
;
let
new_data
=
cdata
.
SubstringData
(
offset
count
)
.
unwrap
(
)
;
let
node
=
self
.
upcast
:
:
<
Node
>
(
)
;
let
owner_doc
=
node
.
owner_doc
(
)
;
let
new_node
=
owner_doc
.
CreateTextNode
(
new_data
)
;
let
parent
=
node
.
GetParentNode
(
)
;
if
let
Some
(
ref
parent
)
=
parent
{
parent
.
InsertBefore
(
new_node
.
upcast
(
)
node
.
GetNextSibling
(
)
.
r
(
)
)
.
unwrap
(
)
;
node
.
ranges
(
)
.
move_to_following_text_sibling_above
(
node
offset
new_node
.
upcast
(
)
)
;
parent
.
ranges
(
)
.
increment_at
(
&
parent
node
.
index
(
)
+
1
)
;
}
cdata
.
DeleteData
(
offset
count
)
.
unwrap
(
)
;
if
parent
.
is_none
(
)
{
node
.
ranges
(
)
.
clamp_above
(
&
node
offset
)
;
}
Ok
(
new_node
)
}
fn
WholeText
(
&
self
)
-
>
DOMString
{
let
first
=
self
.
upcast
:
:
<
Node
>
(
)
.
inclusively_preceding_siblings
(
)
.
take_while
(
|
node
|
node
.
is
:
:
<
Text
>
(
)
)
.
last
(
)
.
unwrap
(
)
;
let
nodes
=
first
.
inclusively_following_siblings
(
)
.
take_while
(
|
node
|
node
.
is
:
:
<
Text
>
(
)
)
;
let
mut
text
=
String
:
:
new
(
)
;
for
ref
node
in
nodes
{
let
cdata
=
node
.
downcast
:
:
<
CharacterData
>
(
)
.
unwrap
(
)
;
text
.
push_str
(
&
cdata
.
data
(
)
)
;
}
DOMString
:
:
from
(
text
)
}
}
