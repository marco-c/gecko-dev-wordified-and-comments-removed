use
dom
:
:
bindings
:
:
cell
:
:
DOMRefCell
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
VRDisplayCapabilitiesBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
VRDisplayCapabilitiesBinding
:
:
VRDisplayCapabilitiesMethods
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflector
reflect_dom_object
}
;
use
dom
:
:
globalscope
:
:
GlobalScope
;
use
webvr_traits
:
:
WebVRDisplayCapabilities
;
#
[
dom_struct
]
pub
struct
VRDisplayCapabilities
{
reflector_
:
Reflector
#
[
ignore_heap_size_of
=
"
Defined
in
rust
-
webvr
"
]
capabilities
:
DOMRefCell
<
WebVRDisplayCapabilities
>
}
unsafe_no_jsmanaged_fields
!
(
WebVRDisplayCapabilities
)
;
impl
VRDisplayCapabilities
{
fn
new_inherited
(
capabilities
:
WebVRDisplayCapabilities
)
-
>
VRDisplayCapabilities
{
VRDisplayCapabilities
{
reflector_
:
Reflector
:
:
new
(
)
capabilities
:
DOMRefCell
:
:
new
(
capabilities
)
}
}
pub
fn
new
(
capabilities
:
WebVRDisplayCapabilities
global
:
&
GlobalScope
)
-
>
Root
<
VRDisplayCapabilities
>
{
reflect_dom_object
(
box
VRDisplayCapabilities
:
:
new_inherited
(
capabilities
)
global
VRDisplayCapabilitiesBinding
:
:
Wrap
)
}
}
impl
VRDisplayCapabilitiesMethods
for
VRDisplayCapabilities
{
fn
HasPosition
(
&
self
)
-
>
bool
{
self
.
capabilities
.
borrow
(
)
.
has_position
}
fn
HasOrientation
(
&
self
)
-
>
bool
{
self
.
capabilities
.
borrow
(
)
.
has_orientation
}
fn
HasExternalDisplay
(
&
self
)
-
>
bool
{
self
.
capabilities
.
borrow
(
)
.
has_external_display
}
fn
CanPresent
(
&
self
)
-
>
bool
{
self
.
capabilities
.
borrow
(
)
.
can_present
}
fn
MaxLayers
(
&
self
)
-
>
u32
{
if
self
.
CanPresent
(
)
{
1
}
else
{
0
}
}
}
