use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
HTMLOutputElementBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
HTMLOutputElementBinding
:
:
HTMLOutputElementMethods
;
use
dom
:
:
bindings
:
:
inheritance
:
:
Castable
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
document
:
:
Document
;
use
dom
:
:
htmlelement
:
:
HTMLElement
;
use
dom
:
:
htmlformelement
:
:
{
FormControl
HTMLFormElement
}
;
use
dom
:
:
node
:
:
{
Node
window_from_node
}
;
use
dom
:
:
nodelist
:
:
NodeList
;
use
dom
:
:
validitystate
:
:
ValidityState
;
use
string_cache
:
:
Atom
;
#
[
dom_struct
]
pub
struct
HTMLOutputElement
{
htmlelement
:
HTMLElement
}
impl
HTMLOutputElement
{
fn
new_inherited
(
localName
:
Atom
prefix
:
Option
<
DOMString
>
document
:
&
Document
)
-
>
HTMLOutputElement
{
HTMLOutputElement
{
htmlelement
:
HTMLElement
:
:
new_inherited
(
localName
prefix
document
)
}
}
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new
(
localName
:
Atom
prefix
:
Option
<
DOMString
>
document
:
&
Document
)
-
>
Root
<
HTMLOutputElement
>
{
Node
:
:
reflect_node
(
box
HTMLOutputElement
:
:
new_inherited
(
localName
prefix
document
)
document
HTMLOutputElementBinding
:
:
Wrap
)
}
}
impl
HTMLOutputElementMethods
for
HTMLOutputElement
{
fn
Validity
(
&
self
)
-
>
Root
<
ValidityState
>
{
let
window
=
window_from_node
(
self
)
;
ValidityState
:
:
new
(
window
.
r
(
)
self
.
upcast
(
)
)
}
fn
GetForm
(
&
self
)
-
>
Option
<
Root
<
HTMLFormElement
>
>
{
self
.
form_owner
(
)
}
fn
Labels
(
&
self
)
-
>
Root
<
NodeList
>
{
self
.
upcast
:
:
<
HTMLElement
>
(
)
.
labels
(
)
}
}
impl
FormControl
for
HTMLOutputElement
{
}
