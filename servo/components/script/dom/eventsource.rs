use
dom
:
:
bindings
:
:
cell
:
:
DOMRefCell
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
EventHandlerBinding
:
:
EventHandlerNonNull
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
EventSourceBinding
:
:
{
EventSourceInit
EventSourceMethods
Wrap
}
;
use
dom
:
:
bindings
:
:
error
:
:
{
Error
Fallible
}
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
reflector
:
:
reflect_dom_object
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
eventtarget
:
:
EventTarget
;
use
dom
:
:
globalscope
:
:
GlobalScope
;
use
std
:
:
cell
:
:
Cell
;
use
url
:
:
Url
;
#
[
derive
(
JSTraceable
PartialEq
Copy
Clone
Debug
HeapSizeOf
)
]
enum
EventSourceReadyState
{
Connecting
=
0
#
[
allow
(
dead_code
)
]
Open
=
1
Closed
=
2
}
#
[
dom_struct
]
pub
struct
EventSource
{
eventtarget
:
EventTarget
url
:
Url
ready_state
:
Cell
<
EventSourceReadyState
>
with_credentials
:
bool
last_event_id
:
DOMRefCell
<
DOMString
>
}
impl
EventSource
{
fn
new_inherited
(
url
:
Url
with_credentials
:
bool
)
-
>
EventSource
{
EventSource
{
eventtarget
:
EventTarget
:
:
new_inherited
(
)
url
:
url
ready_state
:
Cell
:
:
new
(
EventSourceReadyState
:
:
Connecting
)
with_credentials
:
with_credentials
last_event_id
:
DOMRefCell
:
:
new
(
DOMString
:
:
from
(
"
"
)
)
}
}
fn
new
(
global
:
&
GlobalScope
url
:
Url
with_credentials
:
bool
)
-
>
Root
<
EventSource
>
{
reflect_dom_object
(
box
EventSource
:
:
new_inherited
(
url
with_credentials
)
global
Wrap
)
}
pub
fn
Constructor
(
global
:
&
GlobalScope
url_str
:
DOMString
event_source_init
:
&
EventSourceInit
)
-
>
Fallible
<
Root
<
EventSource
>
>
{
let
base_url
=
global
.
get_url
(
)
;
let
url
=
match
base_url
.
join
(
&
*
url_str
)
{
Ok
(
u
)
=
>
u
Err
(
_
)
=
>
return
Err
(
Error
:
:
Syntax
)
}
;
let
event_source
=
EventSource
:
:
new
(
global
url
event_source_init
.
withCredentials
)
;
Ok
(
event_source
)
}
}
impl
EventSourceMethods
for
EventSource
{
event_handler
!
(
open
GetOnopen
SetOnopen
)
;
event_handler
!
(
message
GetOnmessage
SetOnmessage
)
;
event_handler
!
(
error
GetOnerror
SetOnerror
)
;
fn
Url
(
&
self
)
-
>
DOMString
{
DOMString
:
:
from
(
self
.
url
.
as_str
(
)
)
}
fn
WithCredentials
(
&
self
)
-
>
bool
{
self
.
with_credentials
}
fn
ReadyState
(
&
self
)
-
>
u16
{
self
.
ready_state
.
get
(
)
as
u16
}
fn
Close
(
&
self
)
{
self
.
ready_state
.
set
(
EventSourceReadyState
:
:
Closed
)
;
}
}
