use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
PluginArrayBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
PluginArrayBinding
:
:
PluginArrayMethods
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflector
reflect_dom_object
}
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
globalscope
:
:
GlobalScope
;
use
dom
:
:
plugin
:
:
Plugin
;
#
[
dom_struct
]
pub
struct
PluginArray
{
reflector_
:
Reflector
}
impl
PluginArray
{
pub
fn
new_inherited
(
)
-
>
PluginArray
{
PluginArray
{
reflector_
:
Reflector
:
:
new
(
)
}
}
pub
fn
new
(
global
:
&
GlobalScope
)
-
>
Root
<
PluginArray
>
{
reflect_dom_object
(
box
PluginArray
:
:
new_inherited
(
)
global
PluginArrayBinding
:
:
Wrap
)
}
}
impl
PluginArrayMethods
for
PluginArray
{
fn
Refresh
(
&
self
_reload
:
bool
)
{
}
fn
Length
(
&
self
)
-
>
u32
{
0
}
fn
Item
(
&
self
_index
:
u32
)
-
>
Option
<
Root
<
Plugin
>
>
{
None
}
fn
NamedItem
(
&
self
_name
:
DOMString
)
-
>
Option
<
Root
<
Plugin
>
>
{
None
}
fn
IndexedGetter
(
&
self
_index
:
u32
)
-
>
Option
<
Root
<
Plugin
>
>
{
None
}
fn
NamedGetter
(
&
self
_name
:
DOMString
)
-
>
Option
<
Root
<
Plugin
>
>
{
None
}
fn
SupportedPropertyNames
(
&
self
)
-
>
Vec
<
DOMString
>
{
vec
!
[
]
}
}
