use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
FileListBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
FileListBinding
:
:
FileListMethods
;
use
dom
:
:
bindings
:
:
global
:
:
GlobalRef
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
Root
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflector
reflect_dom_object
}
;
use
dom
:
:
file
:
:
File
;
use
dom
:
:
window
:
:
Window
;
#
[
dom_struct
]
pub
struct
FileList
{
reflector_
:
Reflector
list
:
Vec
<
JS
<
File
>
>
}
impl
FileList
{
#
[
allow
(
unrooted_must_root
)
]
fn
new_inherited
(
files
:
Vec
<
JS
<
File
>
>
)
-
>
FileList
{
FileList
{
reflector_
:
Reflector
:
:
new
(
)
list
:
files
}
}
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new
(
window
:
&
Window
files
:
Vec
<
Root
<
File
>
>
)
-
>
Root
<
FileList
>
{
reflect_dom_object
(
box
FileList
:
:
new_inherited
(
files
.
iter
(
)
.
map
(
|
r
|
JS
:
:
from_rooted
(
&
r
)
)
.
collect
(
)
)
GlobalRef
:
:
Window
(
window
)
FileListBinding
:
:
Wrap
)
}
}
impl
FileListMethods
for
FileList
{
fn
Length
(
&
self
)
-
>
u32
{
self
.
list
.
len
(
)
as
u32
}
fn
Item
(
&
self
index
:
u32
)
-
>
Option
<
Root
<
File
>
>
{
if
(
index
as
usize
)
<
self
.
list
.
len
(
)
{
Some
(
Root
:
:
from_ref
(
&
*
(
self
.
list
[
index
as
usize
]
)
)
)
}
else
{
None
}
}
fn
IndexedGetter
(
&
self
index
:
u32
found
:
&
mut
bool
)
-
>
Option
<
Root
<
File
>
>
{
let
item
=
self
.
Item
(
index
)
;
*
found
=
item
.
is_some
(
)
;
item
}
}
