use
dom
:
:
attr
:
:
Attr
;
use
dom
:
:
bindings
:
:
cell
:
:
DomRefCell
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
HTMLObjectElementBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
HTMLObjectElementBinding
:
:
HTMLObjectElementMethods
;
use
dom
:
:
bindings
:
:
inheritance
:
:
Castable
;
use
dom
:
:
bindings
:
:
root
:
:
{
DomRoot
MutNullableDom
}
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
document
:
:
Document
;
use
dom
:
:
element
:
:
{
AttributeMutation
Element
}
;
use
dom
:
:
htmlelement
:
:
HTMLElement
;
use
dom
:
:
htmlformelement
:
:
{
FormControl
HTMLFormElement
}
;
use
dom
:
:
node
:
:
{
Node
window_from_node
}
;
use
dom
:
:
validation
:
:
Validatable
;
use
dom
:
:
validitystate
:
:
{
ValidityState
ValidationFlags
}
;
use
dom
:
:
virtualmethods
:
:
VirtualMethods
;
use
dom_struct
:
:
dom_struct
;
use
html5ever
:
:
{
LocalName
Prefix
}
;
use
net_traits
:
:
image
:
:
base
:
:
Image
;
use
servo_arc
:
:
Arc
;
use
std
:
:
default
:
:
Default
;
#
[
dom_struct
]
pub
struct
HTMLObjectElement
{
htmlelement
:
HTMLElement
#
[
ignore_heap_size_of
=
"
Arc
"
]
image
:
DomRefCell
<
Option
<
Arc
<
Image
>
>
>
form_owner
:
MutNullableDom
<
HTMLFormElement
>
}
impl
HTMLObjectElement
{
fn
new_inherited
(
local_name
:
LocalName
prefix
:
Option
<
Prefix
>
document
:
&
Document
)
-
>
HTMLObjectElement
{
HTMLObjectElement
{
htmlelement
:
HTMLElement
:
:
new_inherited
(
local_name
prefix
document
)
image
:
DomRefCell
:
:
new
(
None
)
form_owner
:
Default
:
:
default
(
)
}
}
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new
(
local_name
:
LocalName
prefix
:
Option
<
Prefix
>
document
:
&
Document
)
-
>
DomRoot
<
HTMLObjectElement
>
{
Node
:
:
reflect_node
(
Box
:
:
new
(
HTMLObjectElement
:
:
new_inherited
(
local_name
prefix
document
)
)
document
HTMLObjectElementBinding
:
:
Wrap
)
}
}
trait
ProcessDataURL
{
fn
process_data_url
(
&
self
)
;
}
impl
<
'
a
>
ProcessDataURL
for
&
'
a
HTMLObjectElement
{
fn
process_data_url
(
&
self
)
{
let
elem
=
self
.
upcast
:
:
<
Element
>
(
)
;
match
(
elem
.
get_attribute
(
&
ns
!
(
)
&
local_name
!
(
"
type
"
)
)
elem
.
get_attribute
(
&
ns
!
(
)
&
local_name
!
(
"
data
"
)
)
)
{
(
None
Some
(
_uri
)
)
=
>
{
}
_
=
>
{
}
}
}
}
impl
HTMLObjectElementMethods
for
HTMLObjectElement
{
fn
Validity
(
&
self
)
-
>
DomRoot
<
ValidityState
>
{
let
window
=
window_from_node
(
self
)
;
ValidityState
:
:
new
(
&
window
self
.
upcast
(
)
)
}
make_getter
!
(
Type
"
type
"
)
;
make_setter
!
(
SetType
"
type
"
)
;
fn
GetForm
(
&
self
)
-
>
Option
<
DomRoot
<
HTMLFormElement
>
>
{
self
.
form_owner
(
)
}
}
impl
Validatable
for
HTMLObjectElement
{
fn
is_instance_validatable
(
&
self
)
-
>
bool
{
true
}
fn
validate
(
&
self
validate_flags
:
ValidationFlags
)
-
>
bool
{
if
validate_flags
.
is_empty
(
)
{
}
true
}
}
impl
VirtualMethods
for
HTMLObjectElement
{
fn
super_type
(
&
self
)
-
>
Option
<
&
VirtualMethods
>
{
Some
(
self
.
upcast
:
:
<
HTMLElement
>
(
)
as
&
VirtualMethods
)
}
fn
attribute_mutated
(
&
self
attr
:
&
Attr
mutation
:
AttributeMutation
)
{
self
.
super_type
(
)
.
unwrap
(
)
.
attribute_mutated
(
attr
mutation
)
;
match
attr
.
local_name
(
)
{
&
local_name
!
(
"
data
"
)
=
>
{
if
let
AttributeMutation
:
:
Set
(
_
)
=
mutation
{
self
.
process_data_url
(
)
;
}
}
&
local_name
!
(
"
form
"
)
=
>
{
self
.
form_attribute_mutated
(
mutation
)
;
}
_
=
>
{
}
}
}
}
impl
FormControl
for
HTMLObjectElement
{
fn
form_owner
(
&
self
)
-
>
Option
<
DomRoot
<
HTMLFormElement
>
>
{
self
.
form_owner
.
get
(
)
}
fn
set_form_owner
(
&
self
form
:
Option
<
&
HTMLFormElement
>
)
{
self
.
form_owner
.
set
(
form
)
;
}
fn
to_element
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
Element
{
self
.
upcast
:
:
<
Element
>
(
)
}
}
