use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
DOMRectBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
DOMRectBinding
:
:
DOMRectMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
DOMRectReadOnlyBinding
:
:
DOMRectReadOnlyMethods
;
use
dom
:
:
bindings
:
:
error
:
:
Fallible
;
use
dom
:
:
bindings
:
:
global
:
:
GlobalRef
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
utils
:
:
reflect_dom_object
;
use
dom
:
:
domrectreadonly
:
:
DOMRectReadOnly
;
#
[
dom_struct
]
pub
struct
DOMRect
{
rect
:
DOMRectReadOnly
}
impl
DOMRect
{
fn
new_inherited
(
x
:
f64
y
:
f64
width
:
f64
height
:
f64
)
-
>
DOMRect
{
DOMRect
{
rect
:
DOMRectReadOnly
:
:
new_inherited
(
x
y
width
height
)
}
}
pub
fn
new
(
global
:
GlobalRef
x
:
f64
y
:
f64
width
:
f64
height
:
f64
)
-
>
Root
<
DOMRect
>
{
reflect_dom_object
(
box
DOMRect
:
:
new_inherited
(
x
y
width
height
)
global
DOMRectBinding
:
:
Wrap
)
}
pub
fn
Constructor
(
global
:
GlobalRef
x
:
f64
y
:
f64
width
:
f64
height
:
f64
)
-
>
Fallible
<
Root
<
DOMRect
>
>
{
Ok
(
DOMRect
:
:
new
(
global
x
y
width
height
)
)
}
}
impl
DOMRectMethods
for
DOMRect
{
fn
X
(
&
self
)
-
>
f64
{
self
.
rect
.
X
(
)
}
fn
SetX
(
&
self
value
:
f64
)
{
self
.
rect
.
set_x
(
value
)
;
}
fn
Y
(
&
self
)
-
>
f64
{
self
.
rect
.
Y
(
)
}
fn
SetY
(
&
self
value
:
f64
)
{
self
.
rect
.
set_y
(
value
)
;
}
fn
Width
(
&
self
)
-
>
f64
{
self
.
rect
.
Width
(
)
}
fn
SetWidth
(
&
self
value
:
f64
)
{
self
.
rect
.
set_width
(
value
)
;
}
fn
Height
(
&
self
)
-
>
f64
{
self
.
rect
.
Height
(
)
}
fn
SetHeight
(
&
self
value
:
f64
)
{
self
.
rect
.
set_height
(
value
)
;
}
}
