use
js
:
:
jsapi
:
:
{
HandleObject
JSContext
}
;
use
servo_config
:
:
prefs
:
:
PREFS
;
pub
struct
Guard
<
T
:
Clone
+
Copy
>
{
condition
:
Condition
value
:
T
}
impl
<
T
:
Clone
+
Copy
>
Guard
<
T
>
{
pub
const
fn
new
(
condition
:
Condition
value
:
T
)
-
>
Self
{
Guard
{
condition
:
condition
value
:
value
}
}
pub
unsafe
fn
expose
(
&
self
cx
:
*
mut
JSContext
obj
:
HandleObject
)
-
>
Option
<
T
>
{
if
self
.
condition
.
is_satisfied
(
cx
obj
)
{
Some
(
self
.
value
)
}
else
{
None
}
}
}
pub
enum
Condition
{
Func
(
unsafe
fn
(
*
mut
JSContext
HandleObject
)
-
>
bool
)
Pref
(
&
'
static
str
)
Satisfied
}
impl
Condition
{
unsafe
fn
is_satisfied
(
&
self
cx
:
*
mut
JSContext
obj
:
HandleObject
)
-
>
bool
{
match
*
self
{
Condition
:
:
Pref
(
name
)
=
>
PREFS
.
get
(
name
)
.
as_boolean
(
)
.
unwrap_or
(
false
)
Condition
:
:
Func
(
f
)
=
>
f
(
cx
obj
)
Condition
:
:
Satisfied
=
>
true
}
}
}
