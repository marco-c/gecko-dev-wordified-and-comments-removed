use
dom
:
:
bindings
:
:
trace
:
:
JSTraceable
;
use
dom
:
:
bindings
:
:
utils
:
:
{
Reflector
Reflectable
}
;
use
dom
:
:
node
:
:
Node
;
use
js
:
:
jsapi
:
:
JSObject
;
use
js
:
:
jsval
:
:
JSVal
;
use
layout_interface
:
:
TrustedNodeAddress
;
use
script_task
:
:
STACK_ROOTS
;
use
servo_util
:
:
smallvec
:
:
{
SmallVec
SmallVec16
}
;
use
std
:
:
cell
:
:
{
Cell
UnsafeCell
}
;
use
std
:
:
default
:
:
Default
;
use
std
:
:
marker
:
:
ContravariantLifetime
;
use
std
:
:
mem
;
use
std
:
:
ops
:
:
Deref
;
#
[
allow
(
unrooted_must_root
)
]
pub
struct
Temporary
<
T
>
{
inner
:
JS
<
T
>
_js_ptr
:
*
mut
JSObject
}
impl
<
T
>
Clone
for
Temporary
<
T
>
{
fn
clone
(
&
self
)
-
>
Temporary
<
T
>
{
Temporary
{
inner
:
self
.
inner
_js_ptr
:
self
.
_js_ptr
}
}
}
impl
<
T
>
PartialEq
for
Temporary
<
T
>
{
fn
eq
(
&
self
other
:
&
Temporary
<
T
>
)
-
>
bool
{
self
.
inner
=
=
other
.
inner
}
}
impl
<
T
:
Reflectable
>
Temporary
<
T
>
{
pub
fn
new
(
inner
:
JS
<
T
>
)
-
>
Temporary
<
T
>
{
Temporary
{
inner
:
inner
_js_ptr
:
inner
.
reflector
(
)
.
get_jsobject
(
)
}
}
pub
fn
from_rooted
<
'
a
>
(
root
:
JSRef
<
'
a
T
>
)
-
>
Temporary
<
T
>
{
Temporary
:
:
new
(
JS
:
:
from_rooted
(
root
)
)
}
pub
fn
root
(
self
)
-
>
Root
<
T
>
{
STACK_ROOTS
.
with
(
|
ref
collection
|
{
let
RootCollectionPtr
(
collection
)
=
collection
.
get
(
)
.
unwrap
(
)
;
unsafe
{
Root
:
:
new
(
&
*
collection
&
self
.
inner
)
}
}
)
}
unsafe
fn
inner
(
&
self
)
-
>
JS
<
T
>
{
self
.
inner
.
clone
(
)
}
pub
unsafe
fn
transmute
<
To
>
(
self
)
-
>
Temporary
<
To
>
{
mem
:
:
transmute
(
self
)
}
}
#
[
must_root
]
pub
struct
JS
<
T
>
{
ptr
:
*
const
T
}
impl
<
T
>
Copy
for
JS
<
T
>
{
}
impl
<
T
>
PartialEq
for
JS
<
T
>
{
#
[
allow
(
unrooted_must_root
)
]
fn
eq
(
&
self
other
:
&
JS
<
T
>
)
-
>
bool
{
self
.
ptr
=
=
other
.
ptr
}
}
impl
<
T
>
Clone
for
JS
<
T
>
{
#
[
inline
]
fn
clone
(
&
self
)
-
>
JS
<
T
>
{
JS
{
ptr
:
self
.
ptr
.
clone
(
)
}
}
}
impl
JS
<
Node
>
{
pub
unsafe
fn
from_trusted_node_address
(
inner
:
TrustedNodeAddress
)
-
>
JS
<
Node
>
{
let
TrustedNodeAddress
(
addr
)
=
inner
;
JS
{
ptr
:
addr
as
*
const
Node
}
}
}
impl
<
T
:
Reflectable
>
JS
<
T
>
{
pub
unsafe
fn
from_raw
(
raw
:
*
const
T
)
-
>
JS
<
T
>
{
JS
{
ptr
:
raw
}
}
pub
fn
root
(
&
self
)
-
>
Root
<
T
>
{
STACK_ROOTS
.
with
(
|
ref
collection
|
{
let
RootCollectionPtr
(
collection
)
=
collection
.
get
(
)
.
unwrap
(
)
;
unsafe
{
Root
:
:
new
(
&
*
collection
self
)
}
}
)
}
}
#
[
old_impl_check
]
impl
<
T
:
Assignable
<
U
>
U
:
Reflectable
>
JS
<
U
>
{
pub
fn
from_rooted
(
root
:
T
)
-
>
JS
<
U
>
{
unsafe
{
root
.
get_js
(
)
}
}
}
impl
<
T
:
Reflectable
>
Reflectable
for
JS
<
T
>
{
fn
reflector
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
Reflector
{
unsafe
{
(
*
self
.
unsafe_get
(
)
)
.
reflector
(
)
}
}
}
pub
trait
HeapGCValue
:
JSTraceable
{
}
impl
HeapGCValue
for
JSVal
{
}
impl
<
T
:
Reflectable
>
HeapGCValue
for
JS
<
T
>
{
}
#
[
must_root
]
#
[
jstraceable
]
pub
struct
MutHeap
<
T
:
HeapGCValue
+
Copy
>
{
val
:
Cell
<
T
>
}
impl
<
T
:
HeapGCValue
+
Copy
>
MutHeap
<
T
>
{
pub
fn
new
(
initial
:
T
)
-
>
MutHeap
<
T
>
{
MutHeap
{
val
:
Cell
:
:
new
(
initial
)
}
}
pub
fn
set
(
&
self
val
:
T
)
{
self
.
val
.
set
(
val
)
}
pub
fn
get
(
&
self
)
-
>
T
{
self
.
val
.
get
(
)
}
}
#
[
must_root
]
#
[
jstraceable
]
pub
struct
MutNullableJS
<
T
:
Reflectable
>
{
ptr
:
Cell
<
Option
<
JS
<
T
>
>
>
}
#
[
old_impl_check
]
impl
<
T
:
Assignable
<
U
>
U
:
Reflectable
>
MutNullableJS
<
U
>
{
pub
fn
new
(
initial
:
Option
<
T
>
)
-
>
MutNullableJS
<
U
>
{
MutNullableJS
{
ptr
:
Cell
:
:
new
(
initial
.
map
(
|
initial
|
{
unsafe
{
initial
.
get_js
(
)
}
}
)
)
}
}
}
impl
<
T
:
Reflectable
>
Default
for
MutNullableJS
<
T
>
{
fn
default
(
)
-
>
MutNullableJS
<
T
>
{
MutNullableJS
{
ptr
:
Cell
:
:
new
(
None
)
}
}
}
impl
<
T
:
Reflectable
>
MutNullableJS
<
T
>
{
pub
fn
assign
<
U
:
Assignable
<
T
>
>
(
&
self
val
:
Option
<
U
>
)
{
self
.
ptr
.
set
(
val
.
map
(
|
val
|
{
unsafe
{
val
.
get_js
(
)
}
}
)
)
;
}
pub
fn
clear
(
&
self
)
{
self
.
assign
(
None
:
:
<
JS
<
T
>
>
)
;
}
pub
fn
get
(
&
self
)
-
>
Option
<
Temporary
<
T
>
>
{
self
.
ptr
.
get
(
)
.
map
(
Temporary
:
:
new
)
}
pub
unsafe
fn
get_inner
(
&
self
)
-
>
Option
<
JS
<
T
>
>
{
self
.
ptr
.
get
(
)
}
pub
fn
or_init
<
F
>
(
&
self
cb
:
F
)
-
>
Temporary
<
T
>
where
F
:
FnOnce
(
)
-
>
Temporary
<
T
>
{
match
self
.
get
(
)
{
Some
(
inner
)
=
>
inner
None
=
>
{
let
inner
=
cb
(
)
;
self
.
assign
(
Some
(
inner
.
clone
(
)
)
)
;
inner
}
}
}
}
impl
<
T
:
Reflectable
>
JS
<
T
>
{
pub
unsafe
fn
unsafe_get
(
&
self
)
-
>
*
const
T
{
self
.
ptr
}
pub
fn
assign
(
&
mut
self
val
:
Temporary
<
T
>
)
{
*
self
=
unsafe
{
val
.
inner
(
)
}
;
}
}
#
[
old_impl_check
]
impl
<
From
To
>
JS
<
From
>
{
pub
unsafe
fn
transmute
(
self
)
-
>
JS
<
To
>
{
mem
:
:
transmute
(
self
)
}
pub
unsafe
fn
transmute_copy
(
&
self
)
-
>
JS
<
To
>
{
mem
:
:
transmute_copy
(
self
)
}
}
pub
trait
RootedReference
<
T
>
{
fn
r
<
'
a
>
(
&
'
a
self
)
-
>
Option
<
JSRef
<
'
a
T
>
>
;
}
impl
<
T
:
Reflectable
>
RootedReference
<
T
>
for
Option
<
Root
<
T
>
>
{
fn
r
<
'
a
>
(
&
'
a
self
)
-
>
Option
<
JSRef
<
'
a
T
>
>
{
self
.
as_ref
(
)
.
map
(
|
root
|
root
.
r
(
)
)
}
}
pub
trait
OptionalRootedReference
<
T
>
{
fn
r
<
'
a
>
(
&
'
a
self
)
-
>
Option
<
Option
<
JSRef
<
'
a
T
>
>
>
;
}
impl
<
T
:
Reflectable
>
OptionalRootedReference
<
T
>
for
Option
<
Option
<
Root
<
T
>
>
>
{
fn
r
<
'
a
>
(
&
'
a
self
)
-
>
Option
<
Option
<
JSRef
<
'
a
T
>
>
>
{
self
.
as_ref
(
)
.
map
(
|
inner
|
inner
.
r
(
)
)
}
}
pub
trait
Assignable
<
T
>
{
unsafe
fn
get_js
(
&
self
)
-
>
JS
<
T
>
;
}
impl
<
T
>
Assignable
<
T
>
for
JS
<
T
>
{
unsafe
fn
get_js
(
&
self
)
-
>
JS
<
T
>
{
self
.
clone
(
)
}
}
impl
<
'
a
T
:
Reflectable
>
Assignable
<
T
>
for
JSRef
<
'
a
T
>
{
unsafe
fn
get_js
(
&
self
)
-
>
JS
<
T
>
{
self
.
unrooted
(
)
}
}
impl
<
T
:
Reflectable
>
Assignable
<
T
>
for
Temporary
<
T
>
{
unsafe
fn
get_js
(
&
self
)
-
>
JS
<
T
>
{
self
.
inner
(
)
}
}
pub
trait
OptionalRootable
<
T
>
{
fn
root
(
self
)
-
>
Option
<
Root
<
T
>
>
;
}
impl
<
T
:
Reflectable
>
OptionalRootable
<
T
>
for
Option
<
Temporary
<
T
>
>
{
fn
root
(
self
)
-
>
Option
<
Root
<
T
>
>
{
self
.
map
(
|
inner
|
inner
.
root
(
)
)
}
}
pub
trait
OptionalUnrootable
<
T
>
{
fn
unrooted
(
&
self
)
-
>
Option
<
JS
<
T
>
>
;
}
impl
<
'
a
T
:
Reflectable
>
OptionalUnrootable
<
T
>
for
Option
<
JSRef
<
'
a
T
>
>
{
fn
unrooted
(
&
self
)
-
>
Option
<
JS
<
T
>
>
{
self
.
as_ref
(
)
.
map
(
|
inner
|
JS
:
:
from_rooted
(
*
inner
)
)
}
}
pub
trait
OptionalRootedRootable
<
T
>
{
fn
root
(
&
self
)
-
>
Option
<
Root
<
T
>
>
;
}
impl
<
T
:
Reflectable
>
OptionalRootedRootable
<
T
>
for
Option
<
JS
<
T
>
>
{
fn
root
(
&
self
)
-
>
Option
<
Root
<
T
>
>
{
self
.
as_ref
(
)
.
map
(
|
inner
|
inner
.
root
(
)
)
}
}
pub
trait
OptionalOptionalRootedRootable
<
T
>
{
fn
root
(
&
self
)
-
>
Option
<
Option
<
Root
<
T
>
>
>
;
}
impl
<
T
:
Reflectable
>
OptionalOptionalRootedRootable
<
T
>
for
Option
<
Option
<
JS
<
T
>
>
>
{
fn
root
(
&
self
)
-
>
Option
<
Option
<
Root
<
T
>
>
>
{
self
.
as_ref
(
)
.
map
(
|
inner
|
inner
.
root
(
)
)
}
}
pub
trait
ResultRootable
<
T
U
>
{
fn
root
(
self
)
-
>
Result
<
Root
<
T
>
U
>
;
}
impl
<
T
:
Reflectable
U
>
ResultRootable
<
T
U
>
for
Result
<
Temporary
<
T
>
U
>
{
fn
root
(
self
)
-
>
Result
<
Root
<
T
>
U
>
{
self
.
map
(
|
inner
|
inner
.
root
(
)
)
}
}
impl
<
T
:
Reflectable
U
>
ResultRootable
<
T
U
>
for
Result
<
JS
<
T
>
U
>
{
fn
root
(
self
)
-
>
Result
<
Root
<
T
>
U
>
{
self
.
map
(
|
inner
|
inner
.
root
(
)
)
}
}
pub
trait
TemporaryPushable
<
T
>
{
fn
push_unrooted
(
&
mut
self
val
:
&
T
)
;
fn
insert_unrooted
(
&
mut
self
index
:
uint
val
:
&
T
)
;
}
impl
<
T
:
Assignable
<
U
>
U
:
Reflectable
>
TemporaryPushable
<
T
>
for
Vec
<
JS
<
U
>
>
{
fn
push_unrooted
(
&
mut
self
val
:
&
T
)
{
self
.
push
(
unsafe
{
val
.
get_js
(
)
}
)
;
}
fn
insert_unrooted
(
&
mut
self
index
:
uint
val
:
&
T
)
{
self
.
insert
(
index
unsafe
{
val
.
get_js
(
)
}
)
;
}
}
pub
struct
RootCollection
{
roots
:
UnsafeCell
<
SmallVec16
<
*
mut
JSObject
>
>
}
pub
struct
RootCollectionPtr
(
pub
*
const
RootCollection
)
;
impl
Copy
for
RootCollectionPtr
{
}
impl
RootCollection
{
pub
fn
new
(
)
-
>
RootCollection
{
RootCollection
{
roots
:
UnsafeCell
:
:
new
(
SmallVec16
:
:
new
(
)
)
}
}
fn
root
<
'
b
T
:
Reflectable
>
(
&
self
untracked
:
&
Root
<
T
>
)
{
unsafe
{
let
roots
=
self
.
roots
.
get
(
)
;
(
*
roots
)
.
push
(
untracked
.
js_ptr
)
;
debug
!
(
"
rooting
{
:
?
}
"
untracked
.
js_ptr
)
;
}
}
fn
unroot
<
'
b
T
:
Reflectable
>
(
&
self
rooted
:
&
Root
<
T
>
)
{
unsafe
{
let
roots
=
self
.
roots
.
get
(
)
;
debug
!
(
"
unrooting
{
:
?
}
(
expecting
{
:
?
}
"
(
*
roots
)
.
as_slice
(
)
.
last
(
)
.
unwrap
(
)
rooted
.
js_ptr
)
;
assert
!
(
*
(
*
roots
)
.
as_slice
(
)
.
last
(
)
.
unwrap
(
)
=
=
rooted
.
js_ptr
)
;
(
*
roots
)
.
pop
(
)
.
unwrap
(
)
;
}
}
}
pub
struct
Root
<
T
>
{
root_list
:
&
'
static
RootCollection
jsref
:
JSRef
<
'
static
T
>
js_ptr
:
*
mut
JSObject
}
impl
<
T
:
Reflectable
>
Root
<
T
>
{
fn
new
(
roots
:
&
'
static
RootCollection
unrooted
:
&
JS
<
T
>
)
-
>
Root
<
T
>
{
let
root
=
Root
{
root_list
:
roots
jsref
:
JSRef
{
ptr
:
unrooted
.
ptr
.
clone
(
)
chain
:
ContravariantLifetime
}
js_ptr
:
unrooted
.
reflector
(
)
.
get_jsobject
(
)
}
;
roots
.
root
(
&
root
)
;
root
}
pub
fn
r
<
'
b
>
(
&
'
b
self
)
-
>
JSRef
<
'
b
T
>
{
JSRef
{
ptr
:
self
.
jsref
.
ptr
chain
:
ContravariantLifetime
}
}
}
#
[
unsafe_destructor
]
impl
<
T
:
Reflectable
>
Drop
for
Root
<
T
>
{
fn
drop
(
&
mut
self
)
{
self
.
root_list
.
unroot
(
self
)
;
}
}
impl
<
'
b
T
:
Reflectable
>
Deref
for
Root
<
T
>
{
type
Target
=
JSRef
<
'
b
T
>
;
fn
deref
<
'
c
>
(
&
'
c
self
)
-
>
&
'
c
JSRef
<
'
b
T
>
{
&
self
.
jsref
}
}
impl
<
'
a
T
:
Reflectable
>
Deref
for
JSRef
<
'
a
T
>
{
type
Target
=
T
;
fn
deref
<
'
b
>
(
&
'
b
self
)
-
>
&
'
b
T
{
unsafe
{
&
*
self
.
ptr
}
}
}
pub
struct
JSRef
<
'
a
T
>
{
ptr
:
*
const
T
chain
:
ContravariantLifetime
<
'
a
>
}
impl
<
'
a
T
>
Copy
for
JSRef
<
'
a
T
>
{
}
impl
<
'
a
T
>
Clone
for
JSRef
<
'
a
T
>
{
fn
clone
(
&
self
)
-
>
JSRef
<
'
a
T
>
{
JSRef
{
ptr
:
self
.
ptr
.
clone
(
)
chain
:
self
.
chain
}
}
}
impl
<
'
a
T
>
PartialEq
for
JSRef
<
'
a
T
>
{
fn
eq
(
&
self
other
:
&
JSRef
<
T
>
)
-
>
bool
{
self
.
ptr
=
=
other
.
ptr
}
}
impl
<
'
a
T
>
JSRef
<
'
a
T
>
{
pub
unsafe
fn
transmute
<
To
>
(
self
)
-
>
JSRef
<
'
a
To
>
{
mem
:
:
transmute
(
self
)
}
pub
unsafe
fn
transmute_borrowed
<
'
b
To
>
(
&
'
b
self
)
-
>
&
'
b
JSRef
<
'
a
To
>
{
mem
:
:
transmute
(
self
)
}
pub
fn
unrooted
(
&
self
)
-
>
JS
<
T
>
{
JS
{
ptr
:
self
.
ptr
}
}
}
impl
<
'
a
T
:
Reflectable
>
JSRef
<
'
a
T
>
{
pub
fn
extended_deref
(
self
)
-
>
&
'
a
T
{
unsafe
{
&
*
self
.
ptr
}
}
}
impl
<
'
a
T
:
Reflectable
>
Reflectable
for
JSRef
<
'
a
T
>
{
fn
reflector
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
Reflector
{
(
*
*
self
)
.
reflector
(
)
}
}
pub
trait
Comparable
<
T
>
{
fn
equals
(
&
self
other
:
T
)
-
>
bool
;
}
impl
<
'
a
'
b
T
>
Comparable
<
JSRef
<
'
a
T
>
>
for
JSRef
<
'
b
T
>
{
fn
equals
(
&
self
other
:
JSRef
<
'
a
T
>
)
-
>
bool
{
self
.
ptr
=
=
other
.
ptr
}
}
impl
<
'
a
'
b
T
>
Comparable
<
Option
<
JSRef
<
'
a
T
>
>
>
for
Option
<
JSRef
<
'
b
T
>
>
{
fn
equals
(
&
self
other
:
Option
<
JSRef
<
'
a
T
>
>
)
-
>
bool
{
match
(
*
self
other
)
{
(
Some
(
x
)
Some
(
y
)
)
=
>
x
.
ptr
=
=
y
.
ptr
(
None
None
)
=
>
true
_
=
>
false
}
}
}
