use
num
:
:
Float
;
use
std
:
:
ops
:
:
Deref
;
#
[
derive
(
JSTraceable
Clone
Copy
Eq
PartialEq
)
]
pub
struct
Finite
<
T
:
Float
>
(
T
)
;
impl
<
T
:
Float
>
Finite
<
T
>
{
pub
fn
new
(
value
:
T
)
-
>
Option
<
Finite
<
T
>
>
{
if
value
.
is_finite
(
)
{
Some
(
Finite
(
value
)
)
}
else
{
None
}
}
#
[
inline
]
pub
fn
wrap
(
value
:
T
)
-
>
Finite
<
T
>
{
assert
!
(
value
.
is_finite
(
)
"
Finite
<
T
>
doesn
'
t
encapsulate
unrestricted
value
.
"
)
;
Finite
(
value
)
}
}
impl
<
T
:
Float
>
Deref
for
Finite
<
T
>
{
type
Target
=
T
;
fn
deref
(
&
self
)
-
>
&
T
{
let
&
Finite
(
ref
value
)
=
self
;
value
}
}
