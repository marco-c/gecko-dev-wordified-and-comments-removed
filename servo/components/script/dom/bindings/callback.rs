use
dom
:
:
bindings
:
:
error
:
:
{
Error
Fallible
report_pending_exception
}
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
reflector
:
:
DomObject
;
use
dom
:
:
globalscope
:
:
GlobalScope
;
use
js
:
:
jsapi
:
:
{
Heap
MutableHandleObject
}
;
use
js
:
:
jsapi
:
:
{
IsCallable
JSContext
JSObject
JS_WrapObject
}
;
use
js
:
:
jsapi
:
:
{
JSCompartment
JS_EnterCompartment
JS_LeaveCompartment
}
;
use
js
:
:
jsapi
:
:
JSAutoCompartment
;
use
js
:
:
jsapi
:
:
JS_GetProperty
;
use
js
:
:
jsval
:
:
{
JSVal
UndefinedValue
}
;
use
std
:
:
default
:
:
Default
;
use
std
:
:
ffi
:
:
CString
;
use
std
:
:
ptr
;
use
std
:
:
rc
:
:
Rc
;
#
[
derive
(
Copy
Clone
PartialEq
)
]
pub
enum
ExceptionHandling
{
Report
Rethrow
}
#
[
derive
(
JSTraceable
PartialEq
)
]
pub
struct
CallbackFunction
{
object
:
CallbackObject
}
impl
CallbackFunction
{
pub
fn
new
(
)
-
>
CallbackFunction
{
CallbackFunction
{
object
:
CallbackObject
{
callback
:
Heap
:
:
default
(
)
}
}
}
pub
fn
init
(
&
mut
self
callback
:
*
mut
JSObject
)
{
self
.
object
.
callback
.
set
(
callback
)
;
}
}
#
[
derive
(
JSTraceable
PartialEq
)
]
pub
struct
CallbackInterface
{
object
:
CallbackObject
}
#
[
derive
(
JSTraceable
)
]
struct
CallbackObject
{
callback
:
Heap
<
*
mut
JSObject
>
}
impl
PartialEq
for
CallbackObject
{
fn
eq
(
&
self
other
:
&
CallbackObject
)
-
>
bool
{
self
.
callback
.
get
(
)
=
=
other
.
callback
.
get
(
)
}
}
pub
trait
CallbackContainer
{
fn
new
(
callback
:
*
mut
JSObject
)
-
>
Rc
<
Self
>
;
fn
callback
(
&
self
)
-
>
*
mut
JSObject
;
}
impl
CallbackInterface
{
pub
fn
callback
(
&
self
)
-
>
*
mut
JSObject
{
self
.
object
.
callback
.
get
(
)
}
}
impl
CallbackFunction
{
pub
fn
callback
(
&
self
)
-
>
*
mut
JSObject
{
self
.
object
.
callback
.
get
(
)
}
}
impl
CallbackInterface
{
pub
fn
new
(
)
-
>
CallbackInterface
{
CallbackInterface
{
object
:
CallbackObject
{
callback
:
Heap
:
:
default
(
)
}
}
}
pub
fn
init
(
&
mut
self
callback
:
*
mut
JSObject
)
{
self
.
object
.
callback
.
set
(
callback
)
;
}
pub
fn
get_callable_property
(
&
self
cx
:
*
mut
JSContext
name
:
&
str
)
-
>
Fallible
<
JSVal
>
{
rooted
!
(
in
(
cx
)
let
mut
callable
=
UndefinedValue
(
)
)
;
rooted
!
(
in
(
cx
)
let
obj
=
self
.
callback
(
)
)
;
unsafe
{
let
c_name
=
CString
:
:
new
(
name
)
.
unwrap
(
)
;
if
!
JS_GetProperty
(
cx
obj
.
handle
(
)
c_name
.
as_ptr
(
)
callable
.
handle_mut
(
)
)
{
return
Err
(
Error
:
:
JSFailed
)
;
}
if
!
callable
.
is_object
(
)
|
|
!
IsCallable
(
callable
.
to_object
(
)
)
{
return
Err
(
Error
:
:
Type
(
format
!
(
"
The
value
of
the
{
}
property
is
not
callable
"
name
)
)
)
;
}
}
Ok
(
callable
.
get
(
)
)
}
}
pub
fn
wrap_call_this_object
<
T
:
DomObject
>
(
cx
:
*
mut
JSContext
p
:
&
T
rval
:
MutableHandleObject
)
{
rval
.
set
(
p
.
reflector
(
)
.
get_jsobject
(
)
.
get
(
)
)
;
assert
!
(
!
rval
.
get
(
)
.
is_null
(
)
)
;
unsafe
{
if
!
JS_WrapObject
(
cx
rval
)
{
rval
.
set
(
ptr
:
:
null_mut
(
)
)
;
}
}
}
pub
struct
CallSetup
{
exception_global
:
Root
<
GlobalScope
>
cx
:
*
mut
JSContext
old_compartment
:
*
mut
JSCompartment
handling
:
ExceptionHandling
}
impl
CallSetup
{
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new
<
T
:
CallbackContainer
>
(
callback
:
&
T
handling
:
ExceptionHandling
)
-
>
CallSetup
{
let
global
=
unsafe
{
GlobalScope
:
:
from_object
(
callback
.
callback
(
)
)
}
;
let
cx
=
global
.
get_cx
(
)
;
CallSetup
{
exception_global
:
global
cx
:
cx
old_compartment
:
unsafe
{
JS_EnterCompartment
(
cx
callback
.
callback
(
)
)
}
handling
:
handling
}
}
pub
fn
get_context
(
&
self
)
-
>
*
mut
JSContext
{
self
.
cx
}
}
impl
Drop
for
CallSetup
{
fn
drop
(
&
mut
self
)
{
unsafe
{
JS_LeaveCompartment
(
self
.
cx
self
.
old_compartment
)
;
if
self
.
handling
=
=
ExceptionHandling
:
:
Report
{
let
_ac
=
JSAutoCompartment
:
:
new
(
self
.
cx
self
.
exception_global
.
reflector
(
)
.
get_jsobject
(
)
.
get
(
)
)
;
report_pending_exception
(
self
.
cx
true
)
;
}
}
}
}
