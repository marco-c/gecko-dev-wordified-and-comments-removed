pub
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
*
;
use
dom
:
:
bindings
:
:
conversions
:
:
get_dom_class
;
use
dom
:
:
bindings
:
:
conversions
:
:
{
DerivedFrom
IDLInterface
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
Reflectable
;
use
std
:
:
mem
;
pub
trait
Castable
:
IDLInterface
+
Reflectable
+
Sized
{
fn
is
<
T
>
(
&
self
)
-
>
bool
where
T
:
DerivedFrom
<
Self
>
{
let
class
=
unsafe
{
get_dom_class
(
self
.
reflector
(
)
.
get_jsobject
(
)
.
get
(
)
)
.
unwrap
(
)
}
;
T
:
:
derives
(
class
)
}
fn
upcast
<
T
>
(
&
self
)
-
>
&
T
where
T
:
Castable
Self
:
DerivedFrom
<
T
>
{
unsafe
{
mem
:
:
transmute
(
self
)
}
}
fn
downcast
<
T
>
(
&
self
)
-
>
Option
<
&
T
>
where
T
:
DerivedFrom
<
Self
>
{
if
self
.
is
:
:
<
T
>
(
)
{
Some
(
unsafe
{
mem
:
:
transmute
(
self
)
}
)
}
else
{
None
}
}
}
