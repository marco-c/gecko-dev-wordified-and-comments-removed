use
devtools_traits
:
:
ScriptToDevtoolsControlMsg
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
WindowBinding
:
:
WindowMethods
;
use
dom
:
:
bindings
:
:
conversions
:
:
native_from_reflector_jsmanaged
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
Root
}
;
use
dom
:
:
bindings
:
:
utils
:
:
{
Reflectable
Reflector
}
;
use
dom
:
:
window
:
:
{
self
ScriptHelpers
}
;
use
dom
:
:
workerglobalscope
:
:
WorkerGlobalScope
;
use
ipc_channel
:
:
ipc
:
:
IpcSender
;
use
js
:
:
jsapi
:
:
{
GetGlobalForObjectCrossCompartment
}
;
use
js
:
:
jsapi
:
:
{
JSContext
JSObject
JS_GetClass
MutableHandleValue
}
;
use
js
:
:
{
JSCLASS_IS_DOMJSCLASS
JSCLASS_IS_GLOBAL
}
;
use
msg
:
:
constellation_msg
:
:
{
ConstellationChan
PipelineId
WorkerId
}
;
use
net_traits
:
:
ResourceTask
;
use
profile_traits
:
:
mem
;
use
script_task
:
:
{
CommonScriptMsg
ScriptChan
ScriptPort
ScriptTask
}
;
use
script_traits
:
:
TimerEventRequest
;
use
std
:
:
sync
:
:
mpsc
:
:
Sender
;
use
url
:
:
Url
;
use
util
:
:
mem
:
:
HeapSizeOf
;
#
[
derive
(
Copy
Clone
)
]
pub
enum
GlobalRef
<
'
a
>
{
Window
(
&
'
a
window
:
:
Window
)
Worker
(
&
'
a
WorkerGlobalScope
)
}
pub
enum
GlobalRoot
{
Window
(
Root
<
window
:
:
Window
>
)
Worker
(
Root
<
WorkerGlobalScope
>
)
}
#
[
derive
(
JSTraceable
HeapSizeOf
)
]
#
[
must_root
]
pub
enum
GlobalField
{
Window
(
JS
<
window
:
:
Window
>
)
Worker
(
JS
<
WorkerGlobalScope
>
)
}
impl
<
'
a
>
GlobalRef
<
'
a
>
{
pub
fn
get_cx
(
&
self
)
-
>
*
mut
JSContext
{
match
*
self
{
GlobalRef
:
:
Window
(
ref
window
)
=
>
window
.
get_cx
(
)
GlobalRef
:
:
Worker
(
ref
worker
)
=
>
worker
.
get_cx
(
)
}
}
pub
fn
as_window
(
&
self
)
-
>
&
window
:
:
Window
{
match
*
self
{
GlobalRef
:
:
Window
(
window
)
=
>
window
GlobalRef
:
:
Worker
(
_
)
=
>
panic
!
(
"
expected
a
Window
scope
"
)
}
}
pub
fn
pipeline
(
&
self
)
-
>
PipelineId
{
match
*
self
{
GlobalRef
:
:
Window
(
window
)
=
>
window
.
pipeline
(
)
GlobalRef
:
:
Worker
(
worker
)
=
>
worker
.
pipeline
(
)
}
}
pub
fn
mem_profiler_chan
(
&
self
)
-
>
mem
:
:
ProfilerChan
{
match
*
self
{
GlobalRef
:
:
Window
(
window
)
=
>
window
.
mem_profiler_chan
(
)
GlobalRef
:
:
Worker
(
worker
)
=
>
worker
.
mem_profiler_chan
(
)
}
}
pub
fn
constellation_chan
(
&
self
)
-
>
ConstellationChan
{
match
*
self
{
GlobalRef
:
:
Window
(
window
)
=
>
window
.
constellation_chan
(
)
GlobalRef
:
:
Worker
(
worker
)
=
>
worker
.
constellation_chan
(
)
}
}
pub
fn
scheduler_chan
(
&
self
)
-
>
Sender
<
TimerEventRequest
>
{
match
*
self
{
GlobalRef
:
:
Window
(
window
)
=
>
window
.
scheduler_chan
(
)
GlobalRef
:
:
Worker
(
worker
)
=
>
worker
.
scheduler_chan
(
)
}
}
pub
fn
devtools_chan
(
&
self
)
-
>
Option
<
IpcSender
<
ScriptToDevtoolsControlMsg
>
>
{
match
*
self
{
GlobalRef
:
:
Window
(
window
)
=
>
window
.
devtools_chan
(
)
GlobalRef
:
:
Worker
(
worker
)
=
>
worker
.
devtools_chan
(
)
}
}
pub
fn
resource_task
(
&
self
)
-
>
ResourceTask
{
match
*
self
{
GlobalRef
:
:
Window
(
ref
window
)
=
>
{
let
doc
=
window
.
Document
(
)
;
let
doc
=
doc
.
r
(
)
;
let
loader
=
doc
.
loader
(
)
;
(
*
loader
.
resource_task
)
.
clone
(
)
}
GlobalRef
:
:
Worker
(
ref
worker
)
=
>
worker
.
resource_task
(
)
.
clone
(
)
}
}
pub
fn
get_worker_id
(
&
self
)
-
>
Option
<
WorkerId
>
{
match
*
self
{
GlobalRef
:
:
Window
(
_
)
=
>
None
GlobalRef
:
:
Worker
(
ref
worker
)
=
>
Some
(
worker
.
get_worker_id
(
)
)
}
}
pub
fn
get_next_worker_id
(
&
self
)
-
>
WorkerId
{
match
*
self
{
GlobalRef
:
:
Window
(
ref
window
)
=
>
window
.
get_next_worker_id
(
)
GlobalRef
:
:
Worker
(
ref
worker
)
=
>
worker
.
get_next_worker_id
(
)
}
}
pub
fn
get_url
(
&
self
)
-
>
Url
{
match
*
self
{
GlobalRef
:
:
Window
(
ref
window
)
=
>
window
.
get_url
(
)
GlobalRef
:
:
Worker
(
ref
worker
)
=
>
worker
.
get_url
(
)
.
clone
(
)
}
}
pub
fn
script_chan
(
&
self
)
-
>
Box
<
ScriptChan
+
Send
>
{
match
*
self
{
GlobalRef
:
:
Window
(
ref
window
)
=
>
window
.
script_chan
(
)
GlobalRef
:
:
Worker
(
ref
worker
)
=
>
worker
.
script_chan
(
)
}
}
pub
fn
new_script_pair
(
&
self
)
-
>
(
Box
<
ScriptChan
+
Send
>
Box
<
ScriptPort
+
Send
>
)
{
match
*
self
{
GlobalRef
:
:
Window
(
ref
window
)
=
>
window
.
new_script_pair
(
)
GlobalRef
:
:
Worker
(
ref
worker
)
=
>
worker
.
new_script_pair
(
)
}
}
pub
fn
process_event
(
&
self
msg
:
CommonScriptMsg
)
{
match
*
self
{
GlobalRef
:
:
Window
(
_
)
=
>
ScriptTask
:
:
process_event
(
msg
)
GlobalRef
:
:
Worker
(
ref
worker
)
=
>
worker
.
process_event
(
msg
)
}
}
pub
fn
evaluate_js_on_global_with_result
(
&
self
code
:
&
str
rval
:
MutableHandleValue
)
{
match
*
self
{
GlobalRef
:
:
Window
(
window
)
=
>
window
.
evaluate_js_on_global_with_result
(
code
rval
)
GlobalRef
:
:
Worker
(
worker
)
=
>
worker
.
evaluate_js_on_global_with_result
(
code
rval
)
}
}
pub
fn
set_devtools_wants_updates
(
&
self
send_updates
:
bool
)
{
match
*
self
{
GlobalRef
:
:
Window
(
window
)
=
>
window
.
set_devtools_wants_updates
(
send_updates
)
GlobalRef
:
:
Worker
(
worker
)
=
>
worker
.
set_devtools_wants_updates
(
send_updates
)
}
}
}
impl
<
'
a
>
Reflectable
for
GlobalRef
<
'
a
>
{
fn
reflector
(
&
self
)
-
>
&
Reflector
{
match
*
self
{
GlobalRef
:
:
Window
(
ref
window
)
=
>
window
.
reflector
(
)
GlobalRef
:
:
Worker
(
ref
worker
)
=
>
worker
.
reflector
(
)
}
}
}
impl
GlobalRoot
{
pub
fn
r
(
&
self
)
-
>
GlobalRef
{
match
*
self
{
GlobalRoot
:
:
Window
(
ref
window
)
=
>
GlobalRef
:
:
Window
(
window
.
r
(
)
)
GlobalRoot
:
:
Worker
(
ref
worker
)
=
>
GlobalRef
:
:
Worker
(
worker
.
r
(
)
)
}
}
}
impl
GlobalField
{
#
[
allow
(
unrooted_must_root
)
]
pub
fn
from_rooted
(
global
:
&
GlobalRef
)
-
>
GlobalField
{
match
*
global
{
GlobalRef
:
:
Window
(
window
)
=
>
GlobalField
:
:
Window
(
JS
:
:
from_ref
(
window
)
)
GlobalRef
:
:
Worker
(
worker
)
=
>
GlobalField
:
:
Worker
(
JS
:
:
from_ref
(
worker
)
)
}
}
pub
fn
root
(
&
self
)
-
>
GlobalRoot
{
match
*
self
{
GlobalField
:
:
Window
(
ref
window
)
=
>
GlobalRoot
:
:
Window
(
window
.
root
(
)
)
GlobalField
:
:
Worker
(
ref
worker
)
=
>
GlobalRoot
:
:
Worker
(
worker
.
root
(
)
)
}
}
}
pub
fn
global_object_for_reflector
<
T
:
Reflectable
>
(
reflector
:
&
T
)
-
>
GlobalRoot
{
global_object_for_js_object
(
*
reflector
.
reflector
(
)
.
get_jsobject
(
)
)
}
#
[
allow
(
unrooted_must_root
)
]
pub
fn
global_object_for_js_object
(
obj
:
*
mut
JSObject
)
-
>
GlobalRoot
{
unsafe
{
let
global
=
GetGlobalForObjectCrossCompartment
(
obj
)
;
let
clasp
=
JS_GetClass
(
global
)
;
assert
!
(
(
(
*
clasp
)
.
flags
&
(
JSCLASS_IS_DOMJSCLASS
|
JSCLASS_IS_GLOBAL
)
)
!
=
0
)
;
match
native_from_reflector_jsmanaged
(
global
)
{
Ok
(
window
)
=
>
return
GlobalRoot
:
:
Window
(
window
)
Err
(
_
)
=
>
(
)
}
match
native_from_reflector_jsmanaged
(
global
)
{
Ok
(
worker
)
=
>
return
GlobalRoot
:
:
Worker
(
worker
)
Err
(
_
)
=
>
(
)
}
panic
!
(
"
found
DOM
global
that
doesn
'
t
unwrap
to
Window
or
WorkerGlobalScope
"
)
}
}
