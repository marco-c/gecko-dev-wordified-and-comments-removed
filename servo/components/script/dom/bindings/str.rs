use
std
:
:
from_str
:
:
FromStr
;
use
std
:
:
hash
:
:
{
Hash
sip
}
;
use
std
:
:
path
:
:
BytesContainer
;
use
std
:
:
str
;
#
[
deriving
(
Clone
Eq
PartialEq
)
]
#
[
jstraceable
]
pub
struct
ByteString
(
Vec
<
u8
>
)
;
impl
ByteString
{
pub
fn
new
(
value
:
Vec
<
u8
>
)
-
>
ByteString
{
ByteString
(
value
)
}
pub
fn
as_str
<
'
a
>
(
&
'
a
self
)
-
>
Option
<
&
'
a
str
>
{
let
ByteString
(
ref
vec
)
=
*
self
;
str
:
:
from_utf8
(
vec
.
as_slice
(
)
)
}
pub
fn
as_slice
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
[
u8
]
{
let
ByteString
(
ref
vector
)
=
*
self
;
vector
.
as_slice
(
)
}
pub
fn
len
(
&
self
)
-
>
uint
{
let
ByteString
(
ref
vector
)
=
*
self
;
vector
.
len
(
)
}
pub
fn
eq_ignore_case
(
&
self
other
:
&
ByteString
)
-
>
bool
{
self
.
to_lower
(
)
=
=
other
.
to_lower
(
)
}
pub
fn
to_lower
(
&
self
)
-
>
ByteString
{
let
ByteString
(
ref
vec
)
=
*
self
;
ByteString
:
:
new
(
vec
.
iter
(
)
.
map
(
|
&
x
|
{
if
x
>
'
A
'
as
u8
&
&
x
<
'
Z
'
as
u8
{
x
+
(
'
a
'
as
u8
)
-
(
'
A
'
as
u8
)
}
else
{
x
}
}
)
.
collect
(
)
)
}
pub
fn
is_token
(
&
self
)
-
>
bool
{
let
ByteString
(
ref
vec
)
=
*
self
;
if
vec
.
len
(
)
=
=
0
{
return
false
;
}
vec
.
iter
(
)
.
all
(
|
&
x
|
{
match
x
{
0
.
.
31
|
127
=
>
false
40
|
41
|
60
|
62
|
64
|
44
|
59
|
58
|
92
|
34
|
47
|
91
|
93
|
63
|
61
|
123
|
125
|
32
=
>
false
x
if
x
>
127
=
>
false
_
=
>
true
}
}
)
}
pub
fn
is_field_value
(
&
self
)
-
>
bool
{
#
[
deriving
(
PartialEq
)
]
enum
PreviousCharacter
{
Other
CR
LF
SPHT
}
let
ByteString
(
ref
vec
)
=
*
self
;
let
mut
prev
=
Other
;
vec
.
iter
(
)
.
all
(
|
&
x
|
{
match
x
{
13
=
>
{
if
prev
=
=
Other
|
|
prev
=
=
SPHT
{
prev
=
CR
;
true
}
else
{
false
}
}
10
=
>
{
if
prev
=
=
CR
{
prev
=
LF
;
true
}
else
{
false
}
}
32
=
>
{
if
prev
=
=
LF
|
|
prev
=
=
SPHT
{
prev
=
SPHT
;
true
}
else
if
prev
=
=
Other
{
true
}
else
{
false
}
}
9
=
>
{
if
prev
=
=
LF
|
|
prev
=
=
SPHT
{
prev
=
SPHT
;
true
}
else
{
false
}
}
0
.
.
31
|
127
=
>
false
x
if
x
>
127
=
>
false
_
if
prev
=
=
Other
|
|
prev
=
=
SPHT
=
>
{
prev
=
Other
;
true
}
_
=
>
false
}
}
)
}
}
impl
Hash
for
ByteString
{
fn
hash
(
&
self
state
:
&
mut
sip
:
:
SipState
)
{
let
ByteString
(
ref
vec
)
=
*
self
;
vec
.
hash
(
state
)
;
}
}
impl
FromStr
for
ByteString
{
fn
from_str
(
s
:
&
str
)
-
>
Option
<
ByteString
>
{
Some
(
ByteString
:
:
new
(
s
.
container_into_owned_bytes
(
)
)
)
}
}
