use
std
:
:
cell
:
:
{
BorrowError
BorrowMutError
Ref
RefCell
RefMut
}
;
use
style
:
:
thread_state
;
#
[
derive
(
Clone
Debug
Default
HeapSizeOf
PartialEq
)
]
pub
struct
DOMRefCell
<
T
>
{
value
:
RefCell
<
T
>
}
impl
<
T
>
DOMRefCell
<
T
>
{
#
[
allow
(
unsafe_code
)
]
pub
unsafe
fn
borrow_for_layout
(
&
self
)
-
>
&
T
{
debug_assert
!
(
thread_state
:
:
get
(
)
.
is_layout
(
)
)
;
&
*
self
.
value
.
as_ptr
(
)
}
#
[
allow
(
unsafe_code
)
]
pub
unsafe
fn
borrow_for_gc_trace
(
&
self
)
-
>
&
T
{
&
*
self
.
value
.
as_ptr
(
)
}
#
[
allow
(
unsafe_code
)
]
pub
unsafe
fn
borrow_for_script_deallocation
(
&
self
)
-
>
&
mut
T
{
debug_assert
!
(
thread_state
:
:
get
(
)
.
contains
(
thread_state
:
:
SCRIPT
)
)
;
&
mut
*
self
.
value
.
as_ptr
(
)
}
pub
fn
borrow_mut_for_layout
(
&
self
)
-
>
RefMut
<
T
>
{
debug_assert
!
(
thread_state
:
:
get
(
)
.
is_layout
(
)
)
;
self
.
value
.
borrow_mut
(
)
}
}
impl
<
T
>
DOMRefCell
<
T
>
{
pub
fn
new
(
value
:
T
)
-
>
DOMRefCell
<
T
>
{
DOMRefCell
{
value
:
RefCell
:
:
new
(
value
)
}
}
pub
fn
borrow
(
&
self
)
-
>
Ref
<
T
>
{
self
.
try_borrow
(
)
.
expect
(
"
DOMRefCell
<
T
>
already
mutably
borrowed
"
)
}
pub
fn
borrow_mut
(
&
self
)
-
>
RefMut
<
T
>
{
self
.
try_borrow_mut
(
)
.
expect
(
"
DOMRefCell
<
T
>
already
borrowed
"
)
}
pub
fn
try_borrow
(
&
self
)
-
>
Result
<
Ref
<
T
>
BorrowError
>
{
debug_assert
!
(
thread_state
:
:
get
(
)
.
is_script
(
)
)
;
self
.
value
.
try_borrow
(
)
}
pub
fn
try_borrow_mut
(
&
self
)
-
>
Result
<
RefMut
<
T
>
BorrowMutError
>
{
debug_assert
!
(
thread_state
:
:
get
(
)
.
is_script
(
)
)
;
self
.
value
.
try_borrow_mut
(
)
}
}
