use
dom
:
:
bindings
:
:
trace
:
:
JSTraceable
;
use
js
:
:
jsapi
:
:
{
JSTracer
}
;
use
util
:
:
task_state
;
use
util
:
:
task_state
:
:
{
SCRIPT
IN_GC
}
;
use
std
:
:
cell
:
:
{
BorrowState
RefCell
Ref
RefMut
}
;
pub
struct
DOMRefCell
<
T
>
{
value
:
RefCell
<
T
>
}
impl
<
T
>
DOMRefCell
<
T
>
{
pub
unsafe
fn
borrow_for_layout
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
T
{
debug_assert
!
(
task_state
:
:
get
(
)
.
is_layout
(
)
)
;
&
*
self
.
value
.
as_unsafe_cell
(
)
.
get
(
)
}
pub
unsafe
fn
borrow_for_gc_trace
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
T
{
debug_assert
!
(
task_state
:
:
get
(
)
.
contains
(
SCRIPT
|
IN_GC
)
)
;
&
*
self
.
value
.
as_unsafe_cell
(
)
.
get
(
)
}
pub
unsafe
fn
borrow_for_script_deallocation
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
mut
T
{
debug_assert
!
(
task_state
:
:
get
(
)
.
contains
(
SCRIPT
)
)
;
&
mut
*
self
.
value
.
as_unsafe_cell
(
)
.
get
(
)
}
pub
fn
is_mutably_borrowed
(
&
self
)
-
>
bool
{
self
.
value
.
borrow_state
(
)
=
=
BorrowState
:
:
Writing
}
pub
fn
try_borrow
<
'
a
>
(
&
'
a
self
)
-
>
Option
<
Ref
<
'
a
T
>
>
{
debug_assert
!
(
task_state
:
:
get
(
)
.
is_script
(
)
)
;
match
self
.
value
.
borrow_state
(
)
{
BorrowState
:
:
Writing
=
>
None
_
=
>
Some
(
self
.
value
.
borrow
(
)
)
}
}
pub
fn
try_borrow_mut
<
'
a
>
(
&
'
a
self
)
-
>
Option
<
RefMut
<
'
a
T
>
>
{
debug_assert
!
(
task_state
:
:
get
(
)
.
is_script
(
)
)
;
match
self
.
value
.
borrow_state
(
)
{
BorrowState
:
:
Unused
=
>
Some
(
self
.
value
.
borrow_mut
(
)
)
_
=
>
None
}
}
}
impl
<
T
:
JSTraceable
>
JSTraceable
for
DOMRefCell
<
T
>
{
fn
trace
(
&
self
trc
:
*
mut
JSTracer
)
{
(
*
self
)
.
borrow
(
)
.
trace
(
trc
)
}
}
impl
<
T
>
DOMRefCell
<
T
>
{
pub
fn
new
(
value
:
T
)
-
>
DOMRefCell
<
T
>
{
DOMRefCell
{
value
:
RefCell
:
:
new
(
value
)
}
}
pub
fn
borrow
<
'
a
>
(
&
'
a
self
)
-
>
Ref
<
'
a
T
>
{
match
self
.
try_borrow
(
)
{
Some
(
ptr
)
=
>
ptr
None
=
>
panic
!
(
"
DOMRefCell
<
T
>
already
mutably
borrowed
"
)
}
}
pub
fn
borrow_mut
<
'
a
>
(
&
'
a
self
)
-
>
RefMut
<
'
a
T
>
{
match
self
.
try_borrow_mut
(
)
{
Some
(
ptr
)
=
>
ptr
None
=
>
panic
!
(
"
DOMRefCell
<
T
>
already
borrowed
"
)
}
}
}
