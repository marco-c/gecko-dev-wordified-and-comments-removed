use
dom
:
:
bindings
:
:
guard
:
:
Guard
;
use
dom
:
:
bindings
:
:
interface
:
:
{
create_object
define_on_global_object
}
;
use
js
:
:
jsapi
:
:
{
HandleObject
JSClass
JSContext
JSFunctionSpec
MutableHandleObject
}
;
use
libc
;
#
[
derive
(
Clone
Copy
)
]
pub
struct
NamespaceObjectClass
(
JSClass
)
;
unsafe
impl
Sync
for
NamespaceObjectClass
{
}
impl
NamespaceObjectClass
{
pub
const
unsafe
fn
new
(
name
:
&
'
static
[
u8
]
)
-
>
Self
{
NamespaceObjectClass
(
JSClass
{
name
:
name
as
*
const
_
as
*
const
libc
:
:
c_char
flags
:
0
cOps
:
0
as
*
mut
_
reserved
:
[
0
as
*
mut
_
;
3
]
}
)
}
}
pub
unsafe
fn
create_namespace_object
(
cx
:
*
mut
JSContext
global
:
HandleObject
proto
:
HandleObject
class
:
&
'
static
NamespaceObjectClass
methods
:
&
[
Guard
<
&
'
static
[
JSFunctionSpec
]
>
]
name
:
&
[
u8
]
rval
:
MutableHandleObject
)
{
create_object
(
cx
proto
&
class
.
0
methods
&
[
]
&
[
]
rval
)
;
define_on_global_object
(
cx
global
name
rval
.
handle
(
)
)
;
}
