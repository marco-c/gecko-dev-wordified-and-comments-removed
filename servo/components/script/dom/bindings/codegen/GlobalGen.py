import
sys
sys
.
path
.
append
(
"
.
/
parser
/
"
)
sys
.
path
.
append
(
"
.
/
ply
/
"
)
import
os
import
WebIDL
import
cPickle
from
Configuration
import
Configuration
from
CodegenRust
import
GlobalGenRoots
replaceFileIfChanged
def
generate_file
(
config
name
filename
)
:
    
root
=
getattr
(
GlobalGenRoots
name
)
(
config
)
    
code
=
root
.
define
(
)
    
if
replaceFileIfChanged
(
filename
code
)
:
        
print
"
Generating
%
s
"
%
(
filename
)
    
else
:
        
print
"
%
s
hasn
'
t
changed
-
not
touching
it
"
%
(
filename
)
def
main
(
)
:
    
from
optparse
import
OptionParser
    
usageString
=
"
usage
:
%
prog
[
options
]
configFile
outputdir
webidldir
[
files
]
"
    
o
=
OptionParser
(
usage
=
usageString
)
    
o
.
add_option
(
"
-
-
cachedir
"
dest
=
'
cachedir
'
default
=
None
                 
help
=
"
Directory
in
which
to
cache
lex
/
parse
tables
.
"
)
    
o
.
add_option
(
"
-
-
verbose
-
errors
"
action
=
'
store_true
'
default
=
False
                 
help
=
"
When
an
error
happens
display
the
Python
traceback
.
"
)
    
(
options
args
)
=
o
.
parse_args
(
)
    
if
len
(
args
)
<
2
:
        
o
.
error
(
usageString
)
    
configFile
=
args
[
0
]
    
outputdir
=
args
[
1
]
    
baseDir
=
args
[
2
]
    
fileList
=
args
[
3
:
]
    
parser
=
WebIDL
.
Parser
(
options
.
cachedir
)
    
for
filename
in
fileList
:
        
fullPath
=
os
.
path
.
normpath
(
os
.
path
.
join
(
baseDir
filename
)
)
        
with
open
(
fullPath
'
rb
'
)
as
f
:
            
lines
=
f
.
readlines
(
)
        
parser
.
parse
(
'
'
.
join
(
lines
)
fullPath
)
    
parserResults
=
parser
.
finish
(
)
    
resultsPath
=
os
.
path
.
join
(
outputdir
'
ParserResults
.
pkl
'
)
    
with
open
(
resultsPath
'
wb
'
)
as
resultsFile
:
        
cPickle
.
dump
(
parserResults
resultsFile
-
1
)
    
config
=
Configuration
(
configFile
parserResults
)
    
to_generate
=
[
        
(
'
PrototypeList
'
'
PrototypeList
.
rs
'
)
        
(
'
RegisterBindings
'
'
RegisterBindings
.
rs
'
)
        
(
'
InterfaceTypes
'
'
InterfaceTypes
.
rs
'
)
        
(
'
InheritTypes
'
'
InheritTypes
.
rs
'
)
        
(
'
Bindings
'
'
Bindings
/
mod
.
rs
'
)
        
(
'
UnionTypes
'
'
UnionTypes
.
rs
'
)
    
]
    
for
name
filename
in
to_generate
:
        
generate_file
(
config
name
os
.
path
.
join
(
outputdir
filename
)
)
if
__name__
=
=
'
__main__
'
:
    
main
(
)
