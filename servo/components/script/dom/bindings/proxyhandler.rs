#
!
[
deny
(
missing_docs
)
]
use
dom
:
:
bindings
:
:
conversions
:
:
is_dom_proxy
;
use
dom
:
:
bindings
:
:
utils
:
:
delete_property_by_id
;
use
js
:
:
glue
:
:
{
GetProxyHandler
GetProxyHandlerFamily
SetProxyExtra
}
;
use
js
:
:
glue
:
:
GetProxyExtra
;
use
js
:
:
glue
:
:
InvokeGetOwnPropertyDescriptor
;
use
js
:
:
jsapi
:
:
{
DOMProxyShadowsResult
JSContext
JSObject
JSPROP_GETTER
PropertyDescriptor
}
;
use
js
:
:
jsapi
:
:
{
Handle
HandleId
HandleObject
MutableHandle
ObjectOpResult
}
;
use
js
:
:
jsapi
:
:
{
JSErrNum
JS_AlreadyHasOwnPropertyById
JS_StrictPropertyStub
}
;
use
js
:
:
jsapi
:
:
{
JS_DefinePropertyById
JS_NewObjectWithGivenProto
SetDOMProxyInformation
}
;
use
js
:
:
jsapi
:
:
GetObjectProto
;
use
js
:
:
jsapi
:
:
GetStaticPrototype
;
use
js
:
:
jsapi
:
:
JS_GetPropertyDescriptorById
;
use
js
:
:
jsapi
:
:
MutableHandleObject
;
use
js
:
:
jsval
:
:
ObjectValue
;
use
std
:
:
ptr
;
static
JSPROXYSLOT_EXPANDO
:
u32
=
0
;
pub
unsafe
extern
"
C
"
fn
shadow_check_callback
(
cx
:
*
mut
JSContext
object
:
HandleObject
id
:
HandleId
)
-
>
DOMProxyShadowsResult
{
rooted
!
(
in
(
cx
)
let
mut
expando
=
ptr
:
:
null_mut
:
:
<
JSObject
>
(
)
)
;
get_expando_object
(
object
expando
.
handle_mut
(
)
)
;
if
!
expando
.
get
(
)
.
is_null
(
)
{
let
mut
has_own
=
false
;
if
!
JS_AlreadyHasOwnPropertyById
(
cx
expando
.
handle
(
)
id
&
mut
has_own
)
{
return
DOMProxyShadowsResult
:
:
ShadowCheckFailed
;
}
if
has_own
{
return
DOMProxyShadowsResult
:
:
ShadowsViaDirectExpando
;
}
}
DOMProxyShadowsResult
:
:
DoesntShadow
}
pub
unsafe
fn
init
(
)
{
SetDOMProxyInformation
(
GetProxyHandlerFamily
(
)
JSPROXYSLOT_EXPANDO
Some
(
shadow_check_callback
)
)
;
}
pub
unsafe
extern
"
C
"
fn
get_property_descriptor
(
cx
:
*
mut
JSContext
proxy
:
HandleObject
id
:
HandleId
desc
:
MutableHandle
<
PropertyDescriptor
>
)
-
>
bool
{
let
handler
=
GetProxyHandler
(
proxy
.
get
(
)
)
;
if
!
InvokeGetOwnPropertyDescriptor
(
handler
cx
proxy
id
desc
)
{
return
false
;
}
if
!
desc
.
obj
.
is_null
(
)
{
return
true
;
}
rooted
!
(
in
(
cx
)
let
mut
proto
=
ptr
:
:
null_mut
:
:
<
JSObject
>
(
)
)
;
if
!
GetObjectProto
(
cx
proxy
proto
.
handle_mut
(
)
)
{
desc
.
get
(
)
.
obj
=
ptr
:
:
null_mut
(
)
;
return
true
;
}
JS_GetPropertyDescriptorById
(
cx
proto
.
handle
(
)
id
desc
)
}
pub
unsafe
extern
"
C
"
fn
define_property
(
cx
:
*
mut
JSContext
proxy
:
HandleObject
id
:
HandleId
desc
:
Handle
<
PropertyDescriptor
>
result
:
*
mut
ObjectOpResult
)
-
>
bool
{
if
(
desc
.
get
(
)
.
attrs
&
JSPROP_GETTER
)
!
=
0
&
&
desc
.
get
(
)
.
setter
=
=
Some
(
JS_StrictPropertyStub
)
{
(
*
result
)
.
code_
=
JSErrNum
:
:
JSMSG_GETTER_ONLY
as
:
:
libc
:
:
uintptr_t
;
return
true
;
}
rooted
!
(
in
(
cx
)
let
mut
expando
=
ptr
:
:
null_mut
:
:
<
JSObject
>
(
)
)
;
ensure_expando_object
(
cx
proxy
expando
.
handle_mut
(
)
)
;
JS_DefinePropertyById
(
cx
expando
.
handle
(
)
id
desc
result
)
}
pub
unsafe
extern
"
C
"
fn
delete
(
cx
:
*
mut
JSContext
proxy
:
HandleObject
id
:
HandleId
bp
:
*
mut
ObjectOpResult
)
-
>
bool
{
rooted
!
(
in
(
cx
)
let
mut
expando
=
ptr
:
:
null_mut
:
:
<
JSObject
>
(
)
)
;
get_expando_object
(
proxy
expando
.
handle_mut
(
)
)
;
if
expando
.
is_null
(
)
{
(
*
bp
)
.
code_
=
0
;
return
true
;
}
delete_property_by_id
(
cx
expando
.
handle
(
)
id
bp
)
}
pub
unsafe
extern
"
C
"
fn
prevent_extensions
(
_cx
:
*
mut
JSContext
_proxy
:
HandleObject
result
:
*
mut
ObjectOpResult
)
-
>
bool
{
(
*
result
)
.
code_
=
JSErrNum
:
:
JSMSG_CANT_PREVENT_EXTENSIONS
as
:
:
libc
:
:
uintptr_t
;
true
}
pub
unsafe
extern
"
C
"
fn
is_extensible
(
_cx
:
*
mut
JSContext
_proxy
:
HandleObject
succeeded
:
*
mut
bool
)
-
>
bool
{
*
succeeded
=
true
;
true
}
pub
unsafe
extern
"
C
"
fn
get_prototype_if_ordinary
(
_
:
*
mut
JSContext
proxy
:
HandleObject
is_ordinary
:
*
mut
bool
proto
:
MutableHandleObject
)
-
>
bool
{
*
is_ordinary
=
true
;
proto
.
set
(
GetStaticPrototype
(
proxy
.
get
(
)
)
)
;
true
}
pub
unsafe
fn
get_expando_object
(
obj
:
HandleObject
expando
:
MutableHandleObject
)
{
assert
!
(
is_dom_proxy
(
obj
.
get
(
)
)
)
;
let
val
=
GetProxyExtra
(
obj
.
get
(
)
JSPROXYSLOT_EXPANDO
)
;
expando
.
set
(
if
val
.
is_undefined
(
)
{
ptr
:
:
null_mut
(
)
}
else
{
val
.
to_object
(
)
}
)
;
}
pub
unsafe
fn
ensure_expando_object
(
cx
:
*
mut
JSContext
obj
:
HandleObject
expando
:
MutableHandleObject
)
{
assert
!
(
is_dom_proxy
(
obj
.
get
(
)
)
)
;
get_expando_object
(
obj
expando
)
;
if
expando
.
is_null
(
)
{
expando
.
set
(
JS_NewObjectWithGivenProto
(
cx
ptr
:
:
null_mut
(
)
HandleObject
:
:
null
(
)
)
)
;
assert
!
(
!
expando
.
is_null
(
)
)
;
SetProxyExtra
(
obj
.
get
(
)
JSPROXYSLOT_EXPANDO
&
ObjectValue
(
expando
.
get
(
)
)
)
;
}
}
pub
fn
fill_property_descriptor
(
mut
desc
:
MutableHandle
<
PropertyDescriptor
>
obj
:
*
mut
JSObject
attrs
:
u32
)
{
desc
.
obj
=
obj
;
desc
.
attrs
=
attrs
;
desc
.
getter
=
None
;
desc
.
setter
=
None
;
}
