use
js
:
:
jsapi
:
:
{
HandleObject
JSContext
JSPROP_ENUMERATE
JSPROP_PERMANENT
}
;
use
js
:
:
jsapi
:
:
{
JSPROP_READONLY
JS_DefineProperty
}
;
use
js
:
:
jsval
:
:
{
BooleanValue
DoubleValue
Int32Value
JSVal
NullValue
UInt32Value
}
;
use
libc
;
#
[
derive
(
Clone
)
]
pub
struct
ConstantSpec
{
pub
name
:
&
'
static
[
u8
]
pub
value
:
ConstantVal
}
#
[
derive
(
Clone
)
]
#
[
allow
(
dead_code
)
]
pub
enum
ConstantVal
{
IntVal
(
i32
)
UintVal
(
u32
)
DoubleVal
(
f64
)
BoolVal
(
bool
)
NullVal
}
impl
ConstantSpec
{
pub
fn
get_value
(
&
self
)
-
>
JSVal
{
match
self
.
value
{
ConstantVal
:
:
NullVal
=
>
NullValue
(
)
ConstantVal
:
:
IntVal
(
i
)
=
>
Int32Value
(
i
)
ConstantVal
:
:
UintVal
(
u
)
=
>
UInt32Value
(
u
)
ConstantVal
:
:
DoubleVal
(
d
)
=
>
DoubleValue
(
d
)
ConstantVal
:
:
BoolVal
(
b
)
=
>
BooleanValue
(
b
)
}
}
}
pub
unsafe
fn
define_constants
(
cx
:
*
mut
JSContext
obj
:
HandleObject
constants
:
&
[
ConstantSpec
]
)
{
for
spec
in
constants
{
rooted
!
(
in
(
cx
)
let
value
=
spec
.
get_value
(
)
)
;
assert
!
(
JS_DefineProperty
(
cx
obj
spec
.
name
.
as_ptr
(
)
as
*
const
libc
:
:
c_char
value
.
handle
(
)
JSPROP_ENUMERATE
|
JSPROP_READONLY
|
JSPROP_PERMANENT
None
None
)
)
;
}
}
