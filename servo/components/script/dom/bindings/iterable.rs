#
!
[
allow
(
unsafe_code
)
]
use
core
:
:
nonzero
:
:
NonZero
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
IterableIteratorBinding
:
:
IterableKeyAndValueResult
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
IterableIteratorBinding
:
:
IterableKeyOrValueResult
;
use
dom
:
:
bindings
:
:
error
:
:
Fallible
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
Root
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
DomObject
Reflector
reflect_dom_object
}
;
use
dom
:
:
bindings
:
:
trace
:
:
JSTraceable
;
use
dom
:
:
globalscope
:
:
GlobalScope
;
use
dom_struct
:
:
dom_struct
;
use
js
:
:
conversions
:
:
ToJSValConvertible
;
use
js
:
:
jsapi
:
:
{
HandleValue
Heap
JSContext
JSObject
MutableHandleObject
}
;
use
js
:
:
jsval
:
:
UndefinedValue
;
use
std
:
:
cell
:
:
Cell
;
use
std
:
:
ptr
;
#
[
derive
(
JSTraceable
HeapSizeOf
)
]
pub
enum
IteratorType
{
Keys
Values
Entries
}
pub
trait
Iterable
{
type
Key
:
ToJSValConvertible
;
type
Value
:
ToJSValConvertible
;
fn
get_iterable_length
(
&
self
)
-
>
u32
;
fn
get_value_at_index
(
&
self
index
:
u32
)
-
>
Self
:
:
Value
;
fn
get_key_at_index
(
&
self
index
:
u32
)
-
>
Self
:
:
Key
;
}
#
[
dom_struct
]
pub
struct
IterableIterator
<
T
:
DomObject
+
JSTraceable
+
Iterable
>
{
reflector
:
Reflector
iterable
:
JS
<
T
>
type_
:
IteratorType
index
:
Cell
<
u32
>
}
impl
<
T
:
DomObject
+
JSTraceable
+
Iterable
>
IterableIterator
<
T
>
{
pub
fn
new
(
iterable
:
&
T
type_
:
IteratorType
wrap
:
unsafe
fn
(
*
mut
JSContext
&
GlobalScope
Box
<
IterableIterator
<
T
>
>
)
-
>
Root
<
Self
>
)
-
>
Root
<
Self
>
{
let
iterator
=
box
IterableIterator
{
reflector
:
Reflector
:
:
new
(
)
type_
:
type_
iterable
:
JS
:
:
from_ref
(
iterable
)
index
:
Cell
:
:
new
(
0
)
}
;
reflect_dom_object
(
iterator
&
*
iterable
.
global
(
)
wrap
)
}
#
[
allow
(
non_snake_case
)
]
pub
fn
Next
(
&
self
cx
:
*
mut
JSContext
)
-
>
Fallible
<
NonZero
<
*
mut
JSObject
>
>
{
let
index
=
self
.
index
.
get
(
)
;
rooted
!
(
in
(
cx
)
let
mut
value
=
UndefinedValue
(
)
)
;
rooted
!
(
in
(
cx
)
let
mut
rval
=
ptr
:
:
null_mut
(
)
)
;
let
result
=
if
index
>
=
self
.
iterable
.
get_iterable_length
(
)
{
dict_return
(
cx
rval
.
handle_mut
(
)
true
value
.
handle
(
)
)
}
else
{
match
self
.
type_
{
IteratorType
:
:
Keys
=
>
{
unsafe
{
self
.
iterable
.
get_key_at_index
(
index
)
.
to_jsval
(
cx
value
.
handle_mut
(
)
)
;
}
dict_return
(
cx
rval
.
handle_mut
(
)
false
value
.
handle
(
)
)
}
IteratorType
:
:
Values
=
>
{
unsafe
{
self
.
iterable
.
get_value_at_index
(
index
)
.
to_jsval
(
cx
value
.
handle_mut
(
)
)
;
}
dict_return
(
cx
rval
.
handle_mut
(
)
false
value
.
handle
(
)
)
}
IteratorType
:
:
Entries
=
>
{
rooted
!
(
in
(
cx
)
let
mut
key
=
UndefinedValue
(
)
)
;
unsafe
{
self
.
iterable
.
get_key_at_index
(
index
)
.
to_jsval
(
cx
key
.
handle_mut
(
)
)
;
self
.
iterable
.
get_value_at_index
(
index
)
.
to_jsval
(
cx
value
.
handle_mut
(
)
)
;
}
key_and_value_return
(
cx
rval
.
handle_mut
(
)
key
.
handle
(
)
value
.
handle
(
)
)
}
}
}
;
self
.
index
.
set
(
index
+
1
)
;
result
.
map
(
|
_
|
{
assert
!
(
!
rval
.
is_null
(
)
)
;
unsafe
{
NonZero
:
:
new_unchecked
(
rval
.
get
(
)
)
}
}
)
}
}
fn
dict_return
(
cx
:
*
mut
JSContext
result
:
MutableHandleObject
done
:
bool
value
:
HandleValue
)
-
>
Fallible
<
(
)
>
{
let
mut
dict
=
unsafe
{
IterableKeyOrValueResult
:
:
empty
(
cx
)
}
;
dict
.
done
=
done
;
dict
.
value
.
set
(
value
.
get
(
)
)
;
rooted
!
(
in
(
cx
)
let
mut
dict_value
=
UndefinedValue
(
)
)
;
unsafe
{
dict
.
to_jsval
(
cx
dict_value
.
handle_mut
(
)
)
;
}
result
.
set
(
dict_value
.
to_object
(
)
)
;
Ok
(
(
)
)
}
fn
key_and_value_return
(
cx
:
*
mut
JSContext
result
:
MutableHandleObject
key
:
HandleValue
value
:
HandleValue
)
-
>
Fallible
<
(
)
>
{
let
mut
dict
=
unsafe
{
IterableKeyAndValueResult
:
:
empty
(
cx
)
}
;
dict
.
done
=
false
;
dict
.
value
=
Some
(
vec
!
[
Heap
:
:
new
(
key
.
get
(
)
)
Heap
:
:
new
(
value
.
get
(
)
)
]
)
;
rooted
!
(
in
(
cx
)
let
mut
dict_value
=
UndefinedValue
(
)
)
;
unsafe
{
dict
.
to_jsval
(
cx
dict_value
.
handle_mut
(
)
)
;
}
result
.
set
(
dict_value
.
to_object
(
)
)
;
Ok
(
(
)
)
}
