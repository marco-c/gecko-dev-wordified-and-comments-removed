use
dom
:
:
bindings
:
:
error
:
:
{
Error
Fallible
}
;
use
dom
:
:
bindings
:
:
global
:
:
GlobalRef
;
use
js
:
:
jsapi
:
:
{
HandleValue
MutableHandleValue
}
;
use
js
:
:
jsapi
:
:
{
JSContext
JS_ReadStructuredClone
JS_STRUCTURED_CLONE_VERSION
}
;
use
js
:
:
jsapi
:
:
{
JS_ClearPendingException
JS_WriteStructuredClone
}
;
use
libc
:
:
size_t
;
use
std
:
:
ptr
;
pub
struct
StructuredCloneData
{
data
:
*
mut
u64
nbytes
:
size_t
}
impl
StructuredCloneData
{
pub
fn
write
(
cx
:
*
mut
JSContext
message
:
HandleValue
)
-
>
Fallible
<
StructuredCloneData
>
{
let
mut
data
=
ptr
:
:
null_mut
(
)
;
let
mut
nbytes
=
0
;
let
result
=
unsafe
{
JS_WriteStructuredClone
(
cx
message
&
mut
data
&
mut
nbytes
ptr
:
:
null
(
)
ptr
:
:
null_mut
(
)
HandleValue
:
:
undefined
(
)
)
}
;
if
!
result
{
unsafe
{
JS_ClearPendingException
(
cx
)
;
}
return
Err
(
Error
:
:
DataClone
)
;
}
Ok
(
StructuredCloneData
{
data
:
data
nbytes
:
nbytes
}
)
}
pub
fn
read
(
self
global
:
GlobalRef
rval
:
MutableHandleValue
)
{
unsafe
{
assert
!
(
JS_ReadStructuredClone
(
global
.
get_cx
(
)
self
.
data
self
.
nbytes
JS_STRUCTURED_CLONE_VERSION
rval
ptr
:
:
null
(
)
ptr
:
:
null_mut
(
)
)
)
;
}
}
}
unsafe
impl
Send
for
StructuredCloneData
{
}
