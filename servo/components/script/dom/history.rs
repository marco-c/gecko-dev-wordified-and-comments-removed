use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
HistoryBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
HistoryBinding
:
:
HistoryMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
LocationBinding
:
:
LocationMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
WindowBinding
:
:
WindowMethods
;
use
dom
:
:
bindings
:
:
global
:
:
GlobalRef
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
Root
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflector
reflect_dom_object
}
;
use
dom
:
:
window
:
:
Window
;
use
msg
:
:
constellation_msg
:
:
TraversalDirection
;
use
script_traits
:
:
ScriptMsg
as
ConstellationMsg
;
#
[
dom_struct
]
pub
struct
History
{
reflector_
:
Reflector
window
:
JS
<
Window
>
}
impl
History
{
pub
fn
new_inherited
(
window
:
&
Window
)
-
>
History
{
History
{
reflector_
:
Reflector
:
:
new
(
)
window
:
JS
:
:
from_ref
(
&
window
)
}
}
pub
fn
new
(
window
:
&
Window
)
-
>
Root
<
History
>
{
reflect_dom_object
(
box
History
:
:
new_inherited
(
window
)
GlobalRef
:
:
Window
(
window
)
HistoryBinding
:
:
Wrap
)
}
}
impl
History
{
fn
traverse_history
(
&
self
direction
:
TraversalDirection
)
{
let
pipeline
=
self
.
window
.
pipeline
(
)
;
let
msg
=
ConstellationMsg
:
:
TraverseHistory
(
Some
(
pipeline
)
direction
)
;
let
_
=
self
.
window
.
constellation_chan
(
)
.
send
(
msg
)
;
}
}
impl
HistoryMethods
for
History
{
fn
Go
(
&
self
delta
:
i32
)
{
let
direction
=
if
delta
>
0
{
TraversalDirection
:
:
Forward
(
delta
as
usize
)
}
else
if
delta
<
0
{
TraversalDirection
:
:
Back
(
-
delta
as
usize
)
}
else
{
self
.
window
.
Location
(
)
.
Reload
(
)
;
return
;
}
;
self
.
traverse_history
(
direction
)
;
}
fn
Back
(
&
self
)
{
self
.
traverse_history
(
TraversalDirection
:
:
Back
(
1
)
)
;
}
fn
Forward
(
&
self
)
{
self
.
traverse_history
(
TraversalDirection
:
:
Forward
(
1
)
)
;
}
}
