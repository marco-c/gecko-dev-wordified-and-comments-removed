use
canvas_traits
:
:
canvas
:
:
CanvasImageData
;
use
canvas_traits
:
:
canvas
:
:
CanvasMsg
;
use
canvas_traits
:
:
canvas
:
:
FromLayoutMsg
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
CanvasRenderingContext2DBinding
:
:
CanvasFillRule
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
CanvasRenderingContext2DBinding
:
:
CanvasLineCap
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
CanvasRenderingContext2DBinding
:
:
CanvasLineJoin
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
CanvasRenderingContext2DBinding
:
:
CanvasRenderingContext2DMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
PaintRenderingContext2DBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
PaintRenderingContext2DBinding
:
:
PaintRenderingContext2DMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
UnionTypes
:
:
HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue
;
use
dom
:
:
bindings
:
:
codegen
:
:
UnionTypes
:
:
StringOrCanvasGradientOrCanvasPattern
;
use
dom
:
:
bindings
:
:
error
:
:
ErrorResult
;
use
dom
:
:
bindings
:
:
error
:
:
Fallible
;
use
dom
:
:
bindings
:
:
inheritance
:
:
Castable
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
num
:
:
Finite
;
use
dom
:
:
bindings
:
:
reflector
:
:
reflect_dom_object
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
canvasgradient
:
:
CanvasGradient
;
use
dom
:
:
canvaspattern
:
:
CanvasPattern
;
use
dom
:
:
canvasrenderingcontext2d
:
:
CanvasRenderingContext2D
;
use
dom
:
:
paintworkletglobalscope
:
:
PaintWorkletGlobalScope
;
use
dom
:
:
workletglobalscope
:
:
WorkletGlobalScope
;
use
dom_struct
:
:
dom_struct
;
use
euclid
:
:
ScaleFactor
;
use
euclid
:
:
Size2D
;
use
euclid
:
:
TypedSize2D
;
use
ipc_channel
:
:
ipc
:
:
IpcSender
;
use
servo_url
:
:
ServoUrl
;
use
std
:
:
cell
:
:
Cell
;
use
style_traits
:
:
CSSPixel
;
use
style_traits
:
:
DevicePixel
;
#
[
dom_struct
]
pub
struct
PaintRenderingContext2D
{
context
:
CanvasRenderingContext2D
device_pixel_ratio
:
Cell
<
ScaleFactor
<
f32
CSSPixel
DevicePixel
>
>
}
impl
PaintRenderingContext2D
{
fn
new_inherited
(
global
:
&
PaintWorkletGlobalScope
)
-
>
PaintRenderingContext2D
{
let
size
=
Size2D
:
:
zero
(
)
;
let
image_cache
=
global
.
image_cache
(
)
;
let
base_url
=
global
.
upcast
:
:
<
WorkletGlobalScope
>
(
)
.
base_url
(
)
;
PaintRenderingContext2D
{
context
:
CanvasRenderingContext2D
:
:
new_inherited
(
global
.
upcast
(
)
None
image_cache
base_url
size
)
device_pixel_ratio
:
Cell
:
:
new
(
ScaleFactor
:
:
new
(
1
.
0
)
)
}
}
pub
fn
new
(
global
:
&
PaintWorkletGlobalScope
)
-
>
Root
<
PaintRenderingContext2D
>
{
reflect_dom_object
(
box
PaintRenderingContext2D
:
:
new_inherited
(
global
)
global
PaintRenderingContext2DBinding
:
:
Wrap
)
}
pub
fn
send_data
(
&
self
sender
:
IpcSender
<
CanvasImageData
>
)
{
let
msg
=
CanvasMsg
:
:
FromLayout
(
FromLayoutMsg
:
:
SendData
(
sender
)
)
;
let
_
=
self
.
context
.
get_ipc_renderer
(
)
.
send
(
msg
)
;
}
pub
fn
take_missing_image_urls
(
&
self
)
-
>
Vec
<
ServoUrl
>
{
self
.
context
.
take_missing_image_urls
(
)
}
pub
fn
set_bitmap_dimensions
(
&
self
size
:
TypedSize2D
<
f32
CSSPixel
>
device_pixel_ratio
:
ScaleFactor
<
f32
CSSPixel
DevicePixel
>
)
{
let
size
=
size
*
device_pixel_ratio
;
self
.
device_pixel_ratio
.
set
(
device_pixel_ratio
)
;
self
.
context
.
set_bitmap_dimensions
(
size
.
to_untyped
(
)
.
to_i32
(
)
)
;
self
.
scale_by_device_pixel_ratio
(
)
;
}
fn
scale_by_device_pixel_ratio
(
&
self
)
{
let
device_pixel_ratio
=
self
.
device_pixel_ratio
.
get
(
)
.
get
(
)
as
f64
;
if
device_pixel_ratio
!
=
1
.
0
{
self
.
Scale
(
device_pixel_ratio
device_pixel_ratio
)
;
}
}
}
impl
PaintRenderingContext2DMethods
for
PaintRenderingContext2D
{
fn
Save
(
&
self
)
{
self
.
context
.
Save
(
)
}
fn
Restore
(
&
self
)
{
self
.
context
.
Restore
(
)
}
fn
Scale
(
&
self
x
:
f64
y
:
f64
)
{
self
.
context
.
Scale
(
x
y
)
}
fn
Rotate
(
&
self
angle
:
f64
)
{
self
.
context
.
Rotate
(
angle
)
}
fn
Translate
(
&
self
x
:
f64
y
:
f64
)
{
self
.
context
.
Translate
(
x
y
)
}
fn
Transform
(
&
self
a
:
f64
b
:
f64
c
:
f64
d
:
f64
e
:
f64
f
:
f64
)
{
self
.
context
.
Transform
(
a
b
c
d
e
f
)
}
fn
SetTransform
(
&
self
a
:
f64
b
:
f64
c
:
f64
d
:
f64
e
:
f64
f
:
f64
)
{
self
.
context
.
SetTransform
(
a
b
c
d
e
f
)
;
self
.
scale_by_device_pixel_ratio
(
)
;
}
fn
ResetTransform
(
&
self
)
{
self
.
context
.
ResetTransform
(
)
;
self
.
scale_by_device_pixel_ratio
(
)
;
}
fn
GlobalAlpha
(
&
self
)
-
>
f64
{
self
.
context
.
GlobalAlpha
(
)
}
fn
SetGlobalAlpha
(
&
self
alpha
:
f64
)
{
self
.
context
.
SetGlobalAlpha
(
alpha
)
}
fn
GlobalCompositeOperation
(
&
self
)
-
>
DOMString
{
self
.
context
.
GlobalCompositeOperation
(
)
}
fn
SetGlobalCompositeOperation
(
&
self
op_str
:
DOMString
)
{
self
.
context
.
SetGlobalCompositeOperation
(
op_str
)
}
fn
FillRect
(
&
self
x
:
f64
y
:
f64
width
:
f64
height
:
f64
)
{
self
.
context
.
FillRect
(
x
y
width
height
)
}
fn
ClearRect
(
&
self
x
:
f64
y
:
f64
width
:
f64
height
:
f64
)
{
self
.
context
.
ClearRect
(
x
y
width
height
)
}
fn
StrokeRect
(
&
self
x
:
f64
y
:
f64
width
:
f64
height
:
f64
)
{
self
.
context
.
StrokeRect
(
x
y
width
height
)
}
fn
BeginPath
(
&
self
)
{
self
.
context
.
BeginPath
(
)
}
fn
ClosePath
(
&
self
)
{
self
.
context
.
ClosePath
(
)
}
fn
Fill
(
&
self
fill_rule
:
CanvasFillRule
)
{
self
.
context
.
Fill
(
fill_rule
)
}
fn
Stroke
(
&
self
)
{
self
.
context
.
Stroke
(
)
}
fn
Clip
(
&
self
fill_rule
:
CanvasFillRule
)
{
self
.
context
.
Clip
(
fill_rule
)
}
fn
IsPointInPath
(
&
self
x
:
f64
y
:
f64
fill_rule
:
CanvasFillRule
)
-
>
bool
{
self
.
context
.
IsPointInPath
(
x
y
fill_rule
)
}
fn
DrawImage
(
&
self
image
:
HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue
dx
:
f64
dy
:
f64
)
-
>
ErrorResult
{
self
.
context
.
DrawImage
(
image
dx
dy
)
}
fn
DrawImage_
(
&
self
image
:
HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue
dx
:
f64
dy
:
f64
dw
:
f64
dh
:
f64
)
-
>
ErrorResult
{
self
.
context
.
DrawImage_
(
image
dx
dy
dw
dh
)
}
fn
DrawImage__
(
&
self
image
:
HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue
sx
:
f64
sy
:
f64
sw
:
f64
sh
:
f64
dx
:
f64
dy
:
f64
dw
:
f64
dh
:
f64
)
-
>
ErrorResult
{
self
.
context
.
DrawImage__
(
image
sx
sy
sw
sh
dx
dy
dw
dh
)
}
fn
MoveTo
(
&
self
x
:
f64
y
:
f64
)
{
self
.
context
.
MoveTo
(
x
y
)
}
fn
LineTo
(
&
self
x
:
f64
y
:
f64
)
{
self
.
context
.
LineTo
(
x
y
)
}
fn
Rect
(
&
self
x
:
f64
y
:
f64
width
:
f64
height
:
f64
)
{
self
.
context
.
Rect
(
x
y
width
height
)
}
fn
QuadraticCurveTo
(
&
self
cpx
:
f64
cpy
:
f64
x
:
f64
y
:
f64
)
{
self
.
context
.
QuadraticCurveTo
(
cpx
cpy
x
y
)
}
fn
BezierCurveTo
(
&
self
cp1x
:
f64
cp1y
:
f64
cp2x
:
f64
cp2y
:
f64
x
:
f64
y
:
f64
)
{
self
.
context
.
BezierCurveTo
(
cp1x
cp1y
cp2x
cp2y
x
y
)
}
fn
Arc
(
&
self
x
:
f64
y
:
f64
r
:
f64
start
:
f64
end
:
f64
ccw
:
bool
)
-
>
ErrorResult
{
self
.
context
.
Arc
(
x
y
r
start
end
ccw
)
}
fn
ArcTo
(
&
self
cp1x
:
f64
cp1y
:
f64
cp2x
:
f64
cp2y
:
f64
r
:
f64
)
-
>
ErrorResult
{
self
.
context
.
ArcTo
(
cp1x
cp1y
cp2x
cp2y
r
)
}
fn
ImageSmoothingEnabled
(
&
self
)
-
>
bool
{
self
.
context
.
ImageSmoothingEnabled
(
)
}
fn
SetImageSmoothingEnabled
(
&
self
value
:
bool
)
{
self
.
context
.
SetImageSmoothingEnabled
(
value
)
}
fn
StrokeStyle
(
&
self
)
-
>
StringOrCanvasGradientOrCanvasPattern
{
self
.
context
.
StrokeStyle
(
)
}
fn
SetStrokeStyle
(
&
self
value
:
StringOrCanvasGradientOrCanvasPattern
)
{
self
.
context
.
SetStrokeStyle
(
value
)
}
fn
FillStyle
(
&
self
)
-
>
StringOrCanvasGradientOrCanvasPattern
{
self
.
context
.
FillStyle
(
)
}
fn
SetFillStyle
(
&
self
value
:
StringOrCanvasGradientOrCanvasPattern
)
{
self
.
context
.
SetFillStyle
(
value
)
}
fn
CreateLinearGradient
(
&
self
x0
:
Finite
<
f64
>
y0
:
Finite
<
f64
>
x1
:
Finite
<
f64
>
y1
:
Finite
<
f64
>
)
-
>
Root
<
CanvasGradient
>
{
self
.
context
.
CreateLinearGradient
(
x0
y0
x1
y1
)
}
fn
CreateRadialGradient
(
&
self
x0
:
Finite
<
f64
>
y0
:
Finite
<
f64
>
r0
:
Finite
<
f64
>
x1
:
Finite
<
f64
>
y1
:
Finite
<
f64
>
r1
:
Finite
<
f64
>
)
-
>
Fallible
<
Root
<
CanvasGradient
>
>
{
self
.
context
.
CreateRadialGradient
(
x0
y0
r0
x1
y1
r1
)
}
fn
CreatePattern
(
&
self
image
:
HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue
repetition
:
DOMString
)
-
>
Fallible
<
Root
<
CanvasPattern
>
>
{
self
.
context
.
CreatePattern
(
image
repetition
)
}
fn
LineWidth
(
&
self
)
-
>
f64
{
self
.
context
.
LineWidth
(
)
}
fn
SetLineWidth
(
&
self
width
:
f64
)
{
self
.
context
.
SetLineWidth
(
width
)
}
fn
LineCap
(
&
self
)
-
>
CanvasLineCap
{
self
.
context
.
LineCap
(
)
}
fn
SetLineCap
(
&
self
cap
:
CanvasLineCap
)
{
self
.
context
.
SetLineCap
(
cap
)
}
fn
LineJoin
(
&
self
)
-
>
CanvasLineJoin
{
self
.
context
.
LineJoin
(
)
}
fn
SetLineJoin
(
&
self
join
:
CanvasLineJoin
)
{
self
.
context
.
SetLineJoin
(
join
)
}
fn
MiterLimit
(
&
self
)
-
>
f64
{
self
.
context
.
MiterLimit
(
)
}
fn
SetMiterLimit
(
&
self
limit
:
f64
)
{
self
.
context
.
SetMiterLimit
(
limit
)
}
fn
ShadowOffsetX
(
&
self
)
-
>
f64
{
self
.
context
.
ShadowOffsetX
(
)
}
fn
SetShadowOffsetX
(
&
self
value
:
f64
)
{
self
.
context
.
SetShadowOffsetX
(
value
)
}
fn
ShadowOffsetY
(
&
self
)
-
>
f64
{
self
.
context
.
ShadowOffsetY
(
)
}
fn
SetShadowOffsetY
(
&
self
value
:
f64
)
{
self
.
context
.
SetShadowOffsetY
(
value
)
}
fn
ShadowBlur
(
&
self
)
-
>
f64
{
self
.
context
.
ShadowBlur
(
)
}
fn
SetShadowBlur
(
&
self
value
:
f64
)
{
self
.
context
.
SetShadowBlur
(
value
)
}
fn
ShadowColor
(
&
self
)
-
>
DOMString
{
self
.
context
.
ShadowColor
(
)
}
fn
SetShadowColor
(
&
self
value
:
DOMString
)
{
self
.
context
.
SetShadowColor
(
value
)
}
}
