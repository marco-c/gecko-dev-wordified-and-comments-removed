use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
HTMLDataListElementBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
HTMLDataListElementBinding
:
:
HTMLDataListElementMethods
;
use
dom
:
:
bindings
:
:
inheritance
:
:
Castable
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
document
:
:
Document
;
use
dom
:
:
element
:
:
Element
;
use
dom
:
:
htmlcollection
:
:
{
CollectionFilter
HTMLCollection
}
;
use
dom
:
:
htmlelement
:
:
HTMLElement
;
use
dom
:
:
htmloptionelement
:
:
HTMLOptionElement
;
use
dom
:
:
node
:
:
{
Node
window_from_node
}
;
use
string_cache
:
:
Atom
;
#
[
dom_struct
]
pub
struct
HTMLDataListElement
{
htmlelement
:
HTMLElement
}
impl
HTMLDataListElement
{
fn
new_inherited
(
local_name
:
Atom
prefix
:
Option
<
DOMString
>
document
:
&
Document
)
-
>
HTMLDataListElement
{
HTMLDataListElement
{
htmlelement
:
HTMLElement
:
:
new_inherited
(
local_name
prefix
document
)
}
}
#
[
allow
(
unrooted_must_root
)
]
pub
fn
new
(
local_name
:
Atom
prefix
:
Option
<
DOMString
>
document
:
&
Document
)
-
>
Root
<
HTMLDataListElement
>
{
Node
:
:
reflect_node
(
box
HTMLDataListElement
:
:
new_inherited
(
local_name
prefix
document
)
document
HTMLDataListElementBinding
:
:
Wrap
)
}
}
impl
HTMLDataListElementMethods
for
HTMLDataListElement
{
fn
Options
(
&
self
)
-
>
Root
<
HTMLCollection
>
{
#
[
derive
(
JSTraceable
HeapSizeOf
)
]
struct
HTMLDataListOptionsFilter
;
impl
CollectionFilter
for
HTMLDataListOptionsFilter
{
fn
filter
(
&
self
elem
:
&
Element
_root
:
&
Node
)
-
>
bool
{
elem
.
is
:
:
<
HTMLOptionElement
>
(
)
}
}
let
filter
=
box
HTMLDataListOptionsFilter
;
let
window
=
window_from_node
(
self
)
;
HTMLCollection
:
:
create
(
&
window
self
.
upcast
(
)
filter
)
}
}
