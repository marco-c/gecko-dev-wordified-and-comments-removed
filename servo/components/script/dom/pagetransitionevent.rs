use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
EventBinding
:
:
EventMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
PageTransitionEventBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
PageTransitionEventBinding
:
:
PageTransitionEventMethods
;
use
dom
:
:
bindings
:
:
error
:
:
Fallible
;
use
dom
:
:
bindings
:
:
inheritance
:
:
Castable
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
reflector
:
:
reflect_dom_object
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
event
:
:
Event
;
use
dom
:
:
window
:
:
Window
;
use
dom_struct
:
:
dom_struct
;
use
servo_atoms
:
:
Atom
;
use
std
:
:
cell
:
:
Cell
;
#
[
dom_struct
]
pub
struct
PageTransitionEvent
{
event
:
Event
persisted
:
Cell
<
bool
>
}
impl
PageTransitionEvent
{
fn
new_inherited
(
)
-
>
PageTransitionEvent
{
PageTransitionEvent
{
event
:
Event
:
:
new_inherited
(
)
persisted
:
Cell
:
:
new
(
false
)
}
}
pub
fn
new_uninitialized
(
window
:
&
Window
)
-
>
Root
<
PageTransitionEvent
>
{
reflect_dom_object
(
box
PageTransitionEvent
:
:
new_inherited
(
)
window
PageTransitionEventBinding
:
:
Wrap
)
}
pub
fn
new
(
window
:
&
Window
type_
:
Atom
bubbles
:
bool
cancelable
:
bool
persisted
:
bool
)
-
>
Root
<
PageTransitionEvent
>
{
let
ev
=
PageTransitionEvent
:
:
new_uninitialized
(
window
)
;
ev
.
persisted
.
set
(
persisted
)
;
{
let
event
=
ev
.
upcast
:
:
<
Event
>
(
)
;
event
.
init_event
(
type_
bubbles
cancelable
)
;
}
ev
}
pub
fn
Constructor
(
window
:
&
Window
type_
:
DOMString
init
:
&
PageTransitionEventBinding
:
:
PageTransitionEventInit
)
-
>
Fallible
<
Root
<
PageTransitionEvent
>
>
{
Ok
(
PageTransitionEvent
:
:
new
(
window
Atom
:
:
from
(
type_
)
init
.
parent
.
bubbles
init
.
parent
.
cancelable
init
.
persisted
)
)
}
}
impl
PageTransitionEventMethods
for
PageTransitionEvent
{
fn
Persisted
(
&
self
)
-
>
bool
{
self
.
persisted
.
get
(
)
}
fn
IsTrusted
(
&
self
)
-
>
bool
{
self
.
event
.
IsTrusted
(
)
}
}
