use
dom
:
:
bindings
:
:
cell
:
:
DomRefCell
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
TestWorkletGlobalScopeBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
TestWorkletGlobalScopeBinding
:
:
TestWorkletGlobalScopeMethods
;
use
dom
:
:
bindings
:
:
root
:
:
DomRoot
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
worklet
:
:
WorkletExecutor
;
use
dom
:
:
workletglobalscope
:
:
WorkletGlobalScope
;
use
dom
:
:
workletglobalscope
:
:
WorkletGlobalScopeInit
;
use
dom_struct
:
:
dom_struct
;
use
js
:
:
rust
:
:
Runtime
;
use
msg
:
:
constellation_msg
:
:
PipelineId
;
use
servo_url
:
:
ServoUrl
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
sync
:
:
mpsc
:
:
Sender
;
#
[
dom_struct
]
pub
struct
TestWorkletGlobalScope
{
worklet_global
:
WorkletGlobalScope
lookup_table
:
DomRefCell
<
HashMap
<
String
String
>
>
}
impl
TestWorkletGlobalScope
{
#
[
allow
(
unsafe_code
)
]
pub
fn
new
(
runtime
:
&
Runtime
pipeline_id
:
PipelineId
base_url
:
ServoUrl
executor
:
WorkletExecutor
init
:
&
WorkletGlobalScopeInit
)
-
>
DomRoot
<
TestWorkletGlobalScope
>
{
debug
!
(
"
Creating
test
worklet
global
scope
for
pipeline
{
}
.
"
pipeline_id
)
;
let
global
=
Box
:
:
new
(
TestWorkletGlobalScope
{
worklet_global
:
WorkletGlobalScope
:
:
new_inherited
(
pipeline_id
base_url
executor
init
)
lookup_table
:
Default
:
:
default
(
)
}
)
;
unsafe
{
TestWorkletGlobalScopeBinding
:
:
Wrap
(
runtime
.
cx
(
)
global
)
}
}
pub
fn
perform_a_worklet_task
(
&
self
task
:
TestWorkletTask
)
{
match
task
{
TestWorkletTask
:
:
Lookup
(
key
sender
)
=
>
{
debug
!
(
"
Looking
up
key
{
}
.
"
key
)
;
let
result
=
self
.
lookup_table
.
borrow
(
)
.
get
(
&
key
)
.
cloned
(
)
;
let
_
=
sender
.
send
(
result
)
;
}
}
}
}
impl
TestWorkletGlobalScopeMethods
for
TestWorkletGlobalScope
{
fn
RegisterKeyValue
(
&
self
key
:
DOMString
value
:
DOMString
)
{
debug
!
(
"
Registering
test
worklet
key
/
value
{
}
/
{
}
.
"
key
value
)
;
self
.
lookup_table
.
borrow_mut
(
)
.
insert
(
String
:
:
from
(
key
)
String
:
:
from
(
value
)
)
;
}
}
pub
enum
TestWorkletTask
{
Lookup
(
String
Sender
<
Option
<
String
>
>
)
}
