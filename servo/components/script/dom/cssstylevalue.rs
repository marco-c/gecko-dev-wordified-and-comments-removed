use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
CSSStyleValueBinding
:
:
CSSStyleValueMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
CSSStyleValueBinding
:
:
Wrap
;
use
dom
:
:
bindings
:
:
js
:
:
Root
;
use
dom
:
:
bindings
:
:
reflector
:
:
Reflector
;
use
dom
:
:
bindings
:
:
reflector
:
:
reflect_dom_object
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
globalscope
:
:
GlobalScope
;
use
dom_struct
:
:
dom_struct
;
#
[
dom_struct
]
pub
struct
CSSStyleValue
{
reflector
:
Reflector
value
:
String
}
impl
CSSStyleValue
{
fn
new_inherited
(
value
:
String
)
-
>
CSSStyleValue
{
CSSStyleValue
{
reflector
:
Reflector
:
:
new
(
)
value
:
value
}
}
pub
fn
new
(
global
:
&
GlobalScope
value
:
String
)
-
>
Root
<
CSSStyleValue
>
{
reflect_dom_object
(
box
CSSStyleValue
:
:
new_inherited
(
value
)
global
Wrap
)
}
}
impl
CSSStyleValueMethods
for
CSSStyleValue
{
fn
Stringifier
(
&
self
)
-
>
DOMString
{
DOMString
:
:
from
(
&
*
self
.
value
)
}
fn
CssText
(
&
self
)
-
>
DOMString
{
self
.
Stringifier
(
)
}
}
