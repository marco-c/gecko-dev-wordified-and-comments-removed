use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
DissimilarOriginLocationBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
DissimilarOriginLocationBinding
:
:
DissimilarOriginLocationMethods
;
use
dom
:
:
bindings
:
:
error
:
:
{
Error
ErrorResult
Fallible
}
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
Root
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
Reflector
;
use
dom
:
:
bindings
:
:
reflector
:
:
reflect_dom_object
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
bindings
:
:
str
:
:
USVString
;
use
dom
:
:
dissimilaroriginwindow
:
:
DissimilarOriginWindow
;
use
dom_struct
:
:
dom_struct
;
use
servo_url
:
:
MutableOrigin
;
#
[
dom_struct
]
pub
struct
DissimilarOriginLocation
{
reflector
:
Reflector
window
:
JS
<
DissimilarOriginWindow
>
}
impl
DissimilarOriginLocation
{
#
[
allow
(
unrooted_must_root
)
]
fn
new_inherited
(
window
:
&
DissimilarOriginWindow
)
-
>
DissimilarOriginLocation
{
DissimilarOriginLocation
{
reflector
:
Reflector
:
:
new
(
)
window
:
JS
:
:
from_ref
(
window
)
}
}
pub
fn
new
(
window
:
&
DissimilarOriginWindow
)
-
>
Root
<
DissimilarOriginLocation
>
{
reflect_dom_object
(
box
DissimilarOriginLocation
:
:
new_inherited
(
window
)
window
DissimilarOriginLocationBinding
:
:
Wrap
)
}
#
[
allow
(
dead_code
)
]
pub
fn
origin
(
&
self
)
-
>
&
MutableOrigin
{
self
.
window
.
origin
(
)
}
}
impl
DissimilarOriginLocationMethods
for
DissimilarOriginLocation
{
fn
GetHref
(
&
self
)
-
>
Fallible
<
USVString
>
{
Err
(
Error
:
:
Security
)
}
fn
SetHref
(
&
self
_
:
USVString
)
-
>
ErrorResult
{
Err
(
Error
:
:
Security
)
}
fn
Assign
(
&
self
_
:
USVString
)
-
>
Fallible
<
(
)
>
{
Err
(
Error
:
:
Security
)
}
fn
Replace
(
&
self
_
:
USVString
)
-
>
Fallible
<
(
)
>
{
Err
(
Error
:
:
Security
)
}
fn
Reload
(
&
self
)
-
>
Fallible
<
(
)
>
{
Err
(
Error
:
:
Security
)
}
fn
Stringifier
(
&
self
)
-
>
Fallible
<
DOMString
>
{
Err
(
Error
:
:
Security
)
}
}
