use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
BluetoothDeviceBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
BluetoothDeviceBinding
:
:
BluetoothDeviceMethods
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
Root
MutHeap
MutNullableHeap
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflectable
Reflector
reflect_dom_object
}
;
use
dom
:
:
bindings
:
:
str
:
:
DOMString
;
use
dom
:
:
bluetoothadvertisingdata
:
:
BluetoothAdvertisingData
;
use
dom
:
:
bluetoothremotegattserver
:
:
BluetoothRemoteGATTServer
;
use
dom
:
:
globalscope
:
:
GlobalScope
;
#
[
dom_struct
]
pub
struct
BluetoothDevice
{
reflector_
:
Reflector
id
:
DOMString
name
:
Option
<
DOMString
>
ad_data
:
MutHeap
<
JS
<
BluetoothAdvertisingData
>
>
gatt
:
MutNullableHeap
<
JS
<
BluetoothRemoteGATTServer
>
>
}
impl
BluetoothDevice
{
pub
fn
new_inherited
(
id
:
DOMString
name
:
Option
<
DOMString
>
ad_data
:
&
BluetoothAdvertisingData
)
-
>
BluetoothDevice
{
BluetoothDevice
{
reflector_
:
Reflector
:
:
new
(
)
id
:
id
name
:
name
ad_data
:
MutHeap
:
:
new
(
ad_data
)
gatt
:
Default
:
:
default
(
)
}
}
pub
fn
new
(
global
:
&
GlobalScope
id
:
DOMString
name
:
Option
<
DOMString
>
adData
:
&
BluetoothAdvertisingData
)
-
>
Root
<
BluetoothDevice
>
{
reflect_dom_object
(
box
BluetoothDevice
:
:
new_inherited
(
id
name
adData
)
global
BluetoothDeviceBinding
:
:
Wrap
)
}
}
impl
BluetoothDeviceMethods
for
BluetoothDevice
{
fn
Id
(
&
self
)
-
>
DOMString
{
self
.
id
.
clone
(
)
}
fn
GetName
(
&
self
)
-
>
Option
<
DOMString
>
{
self
.
name
.
clone
(
)
}
fn
AdData
(
&
self
)
-
>
Root
<
BluetoothAdvertisingData
>
{
self
.
ad_data
.
get
(
)
}
fn
Gatt
(
&
self
)
-
>
Root
<
BluetoothRemoteGATTServer
>
{
self
.
gatt
.
or_init
(
|
|
{
BluetoothRemoteGATTServer
:
:
new
(
&
self
.
global
(
)
self
)
}
)
}
}
