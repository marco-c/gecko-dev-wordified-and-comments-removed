use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
TouchListBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
TouchListBinding
:
:
TouchListMethods
;
use
dom
:
:
bindings
:
:
global
:
:
GlobalRef
;
use
dom
:
:
bindings
:
:
js
:
:
{
JS
Root
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
Reflector
reflect_dom_object
}
;
use
dom
:
:
touch
:
:
Touch
;
use
dom
:
:
window
:
:
Window
;
#
[
dom_struct
]
pub
struct
TouchList
{
reflector_
:
Reflector
touches
:
Vec
<
JS
<
Touch
>
>
}
impl
TouchList
{
fn
new_inherited
(
touches
:
&
[
&
Touch
]
)
-
>
TouchList
{
TouchList
{
reflector_
:
Reflector
:
:
new
(
)
touches
:
touches
.
iter
(
)
.
map
(
|
touch
|
JS
:
:
from_ref
(
*
touch
)
)
.
collect
(
)
}
}
pub
fn
new
(
window
:
&
Window
touches
:
&
[
&
Touch
]
)
-
>
Root
<
TouchList
>
{
reflect_dom_object
(
box
TouchList
:
:
new_inherited
(
touches
)
GlobalRef
:
:
Window
(
window
)
TouchListBinding
:
:
Wrap
)
}
}
impl
TouchListMethods
for
TouchList
{
fn
Length
(
&
self
)
-
>
u32
{
self
.
touches
.
len
(
)
as
u32
}
fn
Item
(
&
self
index
:
u32
)
-
>
Option
<
Root
<
Touch
>
>
{
self
.
touches
.
get
(
index
as
usize
)
.
map
(
|
js
|
Root
:
:
from_ref
(
&
*
*
js
)
)
}
fn
IndexedGetter
(
&
self
index
:
u32
)
-
>
Option
<
Root
<
Touch
>
>
{
self
.
Item
(
index
)
}
}
