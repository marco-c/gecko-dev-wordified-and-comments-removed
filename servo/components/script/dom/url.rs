use
dom
:
:
bindings
:
:
cell
:
:
DomRefCell
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
URLBinding
:
:
{
self
URLMethods
}
;
use
dom
:
:
bindings
:
:
error
:
:
{
Error
ErrorResult
Fallible
}
;
use
dom
:
:
bindings
:
:
reflector
:
:
{
DomObject
Reflector
reflect_dom_object
}
;
use
dom
:
:
bindings
:
:
root
:
:
{
DomRoot
MutNullableDom
}
;
use
dom
:
:
bindings
:
:
str
:
:
{
DOMString
USVString
}
;
use
dom
:
:
blob
:
:
Blob
;
use
dom
:
:
globalscope
:
:
GlobalScope
;
use
dom
:
:
urlhelper
:
:
UrlHelper
;
use
dom
:
:
urlsearchparams
:
:
URLSearchParams
;
use
dom_struct
:
:
dom_struct
;
use
net_traits
:
:
{
CoreResourceMsg
IpcSend
}
;
use
net_traits
:
:
blob_url_store
:
:
{
get_blob_origin
parse_blob_url
}
;
use
net_traits
:
:
filemanager_thread
:
:
FileManagerThreadMsg
;
use
profile_traits
:
:
ipc
;
use
servo_url
:
:
ServoUrl
;
use
std
:
:
default
:
:
Default
;
use
uuid
:
:
Uuid
;
#
[
dom_struct
]
pub
struct
URL
{
reflector_
:
Reflector
url
:
DomRefCell
<
ServoUrl
>
search_params
:
MutNullableDom
<
URLSearchParams
>
}
impl
URL
{
fn
new_inherited
(
url
:
ServoUrl
)
-
>
URL
{
URL
{
reflector_
:
Reflector
:
:
new
(
)
url
:
DomRefCell
:
:
new
(
url
)
search_params
:
Default
:
:
default
(
)
}
}
pub
fn
new
(
global
:
&
GlobalScope
url
:
ServoUrl
)
-
>
DomRoot
<
URL
>
{
reflect_dom_object
(
Box
:
:
new
(
URL
:
:
new_inherited
(
url
)
)
global
URLBinding
:
:
Wrap
)
}
pub
fn
query_pairs
(
&
self
)
-
>
Vec
<
(
String
String
)
>
{
self
.
url
.
borrow
(
)
.
as_url
(
)
.
query_pairs
(
)
.
into_owned
(
)
.
collect
(
)
}
pub
fn
set_query_pairs
(
&
self
pairs
:
&
[
(
String
String
)
]
)
{
let
mut
url
=
self
.
url
.
borrow_mut
(
)
;
url
.
as_mut_url
(
)
.
query_pairs_mut
(
)
.
clear
(
)
.
extend_pairs
(
pairs
)
;
}
}
impl
URL
{
pub
fn
Constructor
(
global
:
&
GlobalScope
url
:
USVString
base
:
Option
<
USVString
>
)
-
>
Fallible
<
DomRoot
<
URL
>
>
{
let
parsed_base
=
match
base
{
None
=
>
{
None
}
Some
(
base
)
=
>
match
ServoUrl
:
:
parse
(
&
base
.
0
)
{
Ok
(
base
)
=
>
Some
(
base
)
Err
(
error
)
=
>
{
return
Err
(
Error
:
:
Type
(
format
!
(
"
could
not
parse
base
:
{
}
"
error
)
)
)
;
}
}
}
;
let
parsed_url
=
match
ServoUrl
:
:
parse_with_base
(
parsed_base
.
as_ref
(
)
&
url
.
0
)
{
Ok
(
url
)
=
>
url
Err
(
error
)
=
>
{
return
Err
(
Error
:
:
Type
(
format
!
(
"
could
not
parse
URL
:
{
}
"
error
)
)
)
;
}
}
;
let
result
=
URL
:
:
new
(
global
parsed_url
)
;
Ok
(
result
)
}
pub
fn
CreateObjectURL
(
global
:
&
GlobalScope
blob
:
&
Blob
)
-
>
DOMString
{
let
origin
=
get_blob_origin
(
&
global
.
get_url
(
)
)
;
let
id
=
blob
.
get_blob_url_id
(
)
;
DOMString
:
:
from
(
URL
:
:
unicode_serialization_blob_url
(
&
origin
&
id
)
)
}
pub
fn
RevokeObjectURL
(
global
:
&
GlobalScope
url
:
DOMString
)
{
let
origin
=
get_blob_origin
(
&
global
.
get_url
(
)
)
;
if
let
Ok
(
url
)
=
ServoUrl
:
:
parse
(
&
url
)
{
if
let
Ok
(
(
id
_
)
)
=
parse_blob_url
(
&
url
)
{
let
resource_threads
=
global
.
resource_threads
(
)
;
let
(
tx
rx
)
=
ipc
:
:
channel
(
global
.
time_profiler_chan
(
)
.
clone
(
)
)
.
unwrap
(
)
;
let
msg
=
FileManagerThreadMsg
:
:
RevokeBlobURL
(
id
origin
tx
)
;
let
_
=
resource_threads
.
send
(
CoreResourceMsg
:
:
ToFileManager
(
msg
)
)
;
let
_
=
rx
.
recv
(
)
.
unwrap
(
)
;
}
}
}
fn
unicode_serialization_blob_url
(
origin
:
&
str
id
:
&
Uuid
)
-
>
String
{
let
mut
result
=
"
blob
:
"
.
to_string
(
)
;
result
.
push_str
(
origin
)
;
result
.
push
(
'
/
'
)
;
result
.
push_str
(
&
id
.
simple
(
)
.
to_string
(
)
)
;
result
}
}
impl
URLMethods
for
URL
{
fn
Hash
(
&
self
)
-
>
USVString
{
UrlHelper
:
:
Hash
(
&
self
.
url
.
borrow
(
)
)
}
fn
SetHash
(
&
self
value
:
USVString
)
{
UrlHelper
:
:
SetHash
(
&
mut
self
.
url
.
borrow_mut
(
)
value
)
;
}
fn
Host
(
&
self
)
-
>
USVString
{
UrlHelper
:
:
Host
(
&
self
.
url
.
borrow
(
)
)
}
fn
SetHost
(
&
self
value
:
USVString
)
{
UrlHelper
:
:
SetHost
(
&
mut
self
.
url
.
borrow_mut
(
)
value
)
;
}
fn
Hostname
(
&
self
)
-
>
USVString
{
UrlHelper
:
:
Hostname
(
&
self
.
url
.
borrow
(
)
)
}
fn
SetHostname
(
&
self
value
:
USVString
)
{
UrlHelper
:
:
SetHostname
(
&
mut
self
.
url
.
borrow_mut
(
)
value
)
;
}
fn
Href
(
&
self
)
-
>
USVString
{
UrlHelper
:
:
Href
(
&
self
.
url
.
borrow
(
)
)
}
fn
SetHref
(
&
self
value
:
USVString
)
-
>
ErrorResult
{
match
ServoUrl
:
:
parse
(
&
value
.
0
)
{
Ok
(
url
)
=
>
{
*
self
.
url
.
borrow_mut
(
)
=
url
;
self
.
search_params
.
set
(
None
)
;
Ok
(
(
)
)
}
Err
(
error
)
=
>
{
Err
(
Error
:
:
Type
(
format
!
(
"
could
not
parse
URL
:
{
}
"
error
)
)
)
}
}
}
fn
Password
(
&
self
)
-
>
USVString
{
UrlHelper
:
:
Password
(
&
self
.
url
.
borrow
(
)
)
}
fn
SetPassword
(
&
self
value
:
USVString
)
{
UrlHelper
:
:
SetPassword
(
&
mut
self
.
url
.
borrow_mut
(
)
value
)
;
}
fn
Pathname
(
&
self
)
-
>
USVString
{
UrlHelper
:
:
Pathname
(
&
self
.
url
.
borrow
(
)
)
}
fn
SetPathname
(
&
self
value
:
USVString
)
{
UrlHelper
:
:
SetPathname
(
&
mut
self
.
url
.
borrow_mut
(
)
value
)
;
}
fn
Port
(
&
self
)
-
>
USVString
{
UrlHelper
:
:
Port
(
&
self
.
url
.
borrow
(
)
)
}
fn
SetPort
(
&
self
value
:
USVString
)
{
UrlHelper
:
:
SetPort
(
&
mut
self
.
url
.
borrow_mut
(
)
value
)
;
}
fn
Protocol
(
&
self
)
-
>
USVString
{
UrlHelper
:
:
Protocol
(
&
self
.
url
.
borrow
(
)
)
}
fn
SetProtocol
(
&
self
value
:
USVString
)
{
UrlHelper
:
:
SetProtocol
(
&
mut
self
.
url
.
borrow_mut
(
)
value
)
;
}
fn
Origin
(
&
self
)
-
>
USVString
{
UrlHelper
:
:
Origin
(
&
self
.
url
.
borrow
(
)
)
}
fn
Search
(
&
self
)
-
>
USVString
{
UrlHelper
:
:
Search
(
&
self
.
url
.
borrow
(
)
)
}
fn
SetSearch
(
&
self
value
:
USVString
)
{
UrlHelper
:
:
SetSearch
(
&
mut
self
.
url
.
borrow_mut
(
)
value
)
;
if
let
Some
(
search_params
)
=
self
.
search_params
.
get
(
)
{
search_params
.
set_list
(
self
.
query_pairs
(
)
)
;
}
}
fn
SearchParams
(
&
self
)
-
>
DomRoot
<
URLSearchParams
>
{
self
.
search_params
.
or_init
(
|
|
{
URLSearchParams
:
:
new
(
&
self
.
global
(
)
Some
(
self
)
)
}
)
}
fn
Stringifier
(
&
self
)
-
>
DOMString
{
DOMString
:
:
from
(
self
.
Href
(
)
.
0
)
}
fn
Username
(
&
self
)
-
>
USVString
{
UrlHelper
:
:
Username
(
&
self
.
url
.
borrow
(
)
)
}
fn
SetUsername
(
&
self
value
:
USVString
)
{
UrlHelper
:
:
SetUsername
(
&
mut
self
.
url
.
borrow_mut
(
)
value
)
;
}
}
