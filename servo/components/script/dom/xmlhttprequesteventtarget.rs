use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
EventHandlerBinding
:
:
EventHandlerNonNull
;
use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
XMLHttpRequestEventTargetBinding
:
:
XMLHttpRequestEventTargetMethods
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
EventTargetCast
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
XMLHttpRequestEventTargetDerived
;
use
dom
:
:
eventtarget
:
:
{
EventTarget
EventTargetTypeId
}
;
#
[
derive
(
Copy
Clone
PartialEq
)
]
pub
enum
XMLHttpRequestEventTargetTypeId
{
XMLHttpRequest
XMLHttpRequestUpload
}
#
[
dom_struct
]
pub
struct
XMLHttpRequestEventTarget
{
eventtarget
:
EventTarget
}
impl
XMLHttpRequestEventTarget
{
pub
fn
new_inherited
(
)
-
>
XMLHttpRequestEventTarget
{
XMLHttpRequestEventTarget
{
eventtarget
:
EventTarget
:
:
new_inherited
(
)
}
}
}
impl
XMLHttpRequestEventTargetDerived
for
EventTarget
{
fn
is_xmlhttprequesteventtarget
(
&
self
)
-
>
bool
{
match
*
self
.
type_id
(
)
{
EventTargetTypeId
:
:
XMLHttpRequestEventTarget
(
_
)
=
>
true
_
=
>
false
}
}
}
impl
XMLHttpRequestEventTargetMethods
for
XMLHttpRequestEventTarget
{
event_handler
!
(
loadstart
GetOnloadstart
SetOnloadstart
)
;
event_handler
!
(
progress
GetOnprogress
SetOnprogress
)
;
event_handler
!
(
abort
GetOnabort
SetOnabort
)
;
event_handler
!
(
error
GetOnerror
SetOnerror
)
;
event_handler
!
(
load
GetOnload
SetOnload
)
;
event_handler
!
(
timeout
GetOntimeout
SetOntimeout
)
;
event_handler
!
(
loadend
GetOnloadend
SetOnloadend
)
;
}
