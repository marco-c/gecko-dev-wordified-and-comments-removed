use
azure
:
:
azure_hl
:
:
Color
;
use
constellation_msg
:
:
{
Key
KeyState
KeyModifiers
}
;
use
geom
:
:
point
:
:
Point2D
;
use
geom
:
:
rect
:
:
Rect
;
use
layers
:
:
platform
:
:
surface
:
:
NativeGraphicsMetadata
;
use
layers
:
:
layers
:
:
LayerBufferSet
;
use
std
:
:
fmt
:
:
{
Formatter
Debug
}
;
use
std
:
:
fmt
;
use
constellation_msg
:
:
PipelineId
;
#
[
derive
(
PartialEq
Eq
Debug
Copy
Clone
PartialOrd
Ord
)
]
pub
struct
Epoch
(
pub
u32
)
;
impl
Epoch
{
pub
fn
next
(
&
mut
self
)
{
let
Epoch
(
ref
mut
u
)
=
*
self
;
*
u
+
=
1
;
}
}
#
[
derive
(
PartialEq
Eq
Debug
Copy
Clone
)
]
pub
struct
FrameTreeId
(
pub
u32
)
;
impl
FrameTreeId
{
pub
fn
next
(
&
mut
self
)
{
let
FrameTreeId
(
ref
mut
u
)
=
*
self
;
*
u
+
=
1
;
}
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
)
]
pub
struct
LayerId
(
pub
usize
pub
u32
)
;
impl
Debug
for
LayerId
{
fn
fmt
(
&
self
f
:
&
mut
Formatter
)
-
>
fmt
:
:
Result
{
let
LayerId
(
a
b
)
=
*
self
;
write
!
(
f
"
Layer
(
{
}
{
}
)
"
a
b
)
}
}
impl
LayerId
{
pub
fn
null
(
)
-
>
LayerId
{
LayerId
(
0
0
)
}
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
)
]
pub
enum
ScrollPolicy
{
Scrollable
FixedPosition
}
#
[
derive
(
Copy
Clone
)
]
pub
struct
LayerProperties
{
pub
id
:
LayerId
pub
rect
:
Rect
<
f32
>
pub
background_color
:
Color
pub
scroll_policy
:
ScrollPolicy
}
pub
trait
PaintListener
{
fn
get_graphics_metadata
(
&
mut
self
)
-
>
Option
<
NativeGraphicsMetadata
>
;
fn
initialize_layers_for_pipeline
(
&
mut
self
pipeline_id
:
PipelineId
properties
:
Vec
<
LayerProperties
>
epoch
:
Epoch
)
;
fn
assign_painted_buffers
(
&
mut
self
pipeline_id
:
PipelineId
epoch
:
Epoch
replies
:
Vec
<
(
LayerId
Box
<
LayerBufferSet
>
)
>
frame_tree_id
:
FrameTreeId
)
;
}
pub
trait
ScriptListener
{
fn
scroll_fragment_point
(
&
mut
self
pipeline_id
:
PipelineId
layer_id
:
LayerId
point
:
Point2D
<
f32
>
)
;
fn
set_title
(
&
mut
self
pipeline_id
:
PipelineId
new_title
:
Option
<
String
>
)
;
fn
close
(
&
mut
self
)
;
fn
dup
(
&
mut
self
)
-
>
Box
<
ScriptListener
+
'
static
>
;
fn
send_key_event
(
&
mut
self
key
:
Key
state
:
KeyState
modifiers
:
KeyModifiers
)
;
}
