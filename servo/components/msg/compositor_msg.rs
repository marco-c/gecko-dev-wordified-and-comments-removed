use
app_units
:
:
Au
;
use
azure
:
:
azure_hl
:
:
Color
;
use
constellation_msg
:
:
{
Key
KeyModifiers
KeyState
PipelineId
SubpageId
}
;
use
euclid
:
:
{
Matrix4
Point2D
Rect
Size2D
}
;
use
ipc_channel
:
:
ipc
:
:
IpcSender
;
use
layers
:
:
layers
:
:
{
BufferRequest
LayerBufferSet
}
;
use
layers
:
:
platform
:
:
surface
:
:
NativeDisplay
;
use
std
:
:
fmt
:
:
{
self
Debug
Formatter
}
;
#
[
derive
(
PartialEq
Eq
Debug
Copy
Clone
PartialOrd
Ord
Deserialize
Serialize
)
]
pub
struct
Epoch
(
pub
u32
)
;
impl
Epoch
{
pub
fn
next
(
&
mut
self
)
{
let
Epoch
(
ref
mut
u
)
=
*
self
;
*
u
+
=
1
;
}
}
#
[
derive
(
PartialEq
Eq
Debug
Copy
Clone
)
]
pub
struct
FrameTreeId
(
pub
u32
)
;
impl
FrameTreeId
{
pub
fn
next
(
&
mut
self
)
{
let
FrameTreeId
(
ref
mut
u
)
=
*
self
;
*
u
+
=
1
;
}
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Deserialize
Serialize
HeapSizeOf
)
]
pub
enum
LayerType
{
FragmentBody
OverflowScroll
BeforePseudoContent
AfterPseudoContent
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
LayerId
(
LayerType
usize
bool
)
;
impl
Debug
for
LayerId
{
fn
fmt
(
&
self
f
:
&
mut
Formatter
)
-
>
fmt
:
:
Result
{
let
LayerId
(
layer_type
id
companion
)
=
*
self
;
let
type_string
=
match
layer_type
{
LayerType
:
:
FragmentBody
=
>
"
-
FragmentBody
"
LayerType
:
:
OverflowScroll
=
>
"
-
OverflowScroll
"
LayerType
:
:
BeforePseudoContent
=
>
"
-
BeforePseudoContent
"
LayerType
:
:
AfterPseudoContent
=
>
"
-
AfterPseudoContent
"
}
;
let
companion_string
=
if
companion
{
"
-
companion
"
}
else
{
"
"
}
;
write
!
(
f
"
{
}
{
}
{
}
"
id
type_string
companion_string
)
}
}
impl
LayerId
{
pub
fn
null
(
)
-
>
LayerId
{
LayerId
(
LayerType
:
:
FragmentBody
0
false
)
}
pub
fn
new_of_type
(
layer_type
:
LayerType
fragment_id
:
usize
)
-
>
LayerId
{
LayerId
(
layer_type
fragment_id
false
)
}
pub
fn
companion_layer_id
(
&
self
)
-
>
LayerId
{
let
LayerId
(
layer_type
id
companion
)
=
*
self
;
assert
!
(
!
companion
)
;
LayerId
(
layer_type
id
true
)
}
}
#
[
derive
(
Clone
Copy
Debug
PartialEq
)
]
pub
enum
LayerKind
{
NoTransform
HasTransform
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
Deserialize
Serialize
Debug
HeapSizeOf
)
]
pub
enum
ScrollPolicy
{
Scrollable
FixedPosition
}
#
[
derive
(
Copy
Clone
)
]
pub
struct
LayerProperties
{
pub
id
:
LayerId
pub
parent_id
:
Option
<
LayerId
>
pub
rect
:
Rect
<
f32
>
pub
background_color
:
Color
pub
scroll_policy
:
ScrollPolicy
pub
transform
:
Matrix4
pub
perspective
:
Matrix4
pub
subpage_layer_info
:
Option
<
SubpageLayerInfo
>
pub
establishes_3d_context
:
bool
pub
scrolls_overflow_area
:
bool
}
pub
trait
PaintListener
{
fn
native_display
(
&
mut
self
)
-
>
Option
<
NativeDisplay
>
;
fn
initialize_layers_for_pipeline
(
&
mut
self
pipeline_id
:
PipelineId
properties
:
Vec
<
LayerProperties
>
epoch
:
Epoch
)
;
fn
assign_painted_buffers
(
&
mut
self
pipeline_id
:
PipelineId
epoch
:
Epoch
replies
:
Vec
<
(
LayerId
Box
<
LayerBufferSet
>
)
>
frame_tree_id
:
FrameTreeId
)
;
fn
ignore_buffer_requests
(
&
mut
self
buffer_requests
:
Vec
<
BufferRequest
>
)
;
fn
notify_paint_task_exiting
(
&
mut
self
pipeline_id
:
PipelineId
)
;
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
ScriptToCompositorMsg
{
ScrollFragmentPoint
(
PipelineId
LayerId
Point2D
<
f32
>
bool
)
SetTitle
(
PipelineId
Option
<
String
>
)
SendKeyEvent
(
Key
KeyState
KeyModifiers
)
GetClientWindow
(
IpcSender
<
(
Size2D
<
u32
>
Point2D
<
i32
>
)
>
)
MoveTo
(
Point2D
<
i32
>
)
ResizeTo
(
Size2D
<
u32
>
)
Exit
}
#
[
derive
(
Clone
Copy
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
SubpageLayerInfo
{
pub
pipeline_id
:
PipelineId
pub
subpage_id
:
SubpageId
pub
origin
:
Point2D
<
Au
>
}
