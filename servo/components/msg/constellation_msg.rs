use
canvas_traits
:
:
CanvasMsg
;
use
compositor_msg
:
:
Epoch
;
use
euclid
:
:
scale_factor
:
:
ScaleFactor
;
use
euclid
:
:
size
:
:
{
Size2D
TypedSize2D
}
;
use
hyper
:
:
header
:
:
Headers
;
use
hyper
:
:
method
:
:
Method
;
use
ipc_channel
:
:
ipc
:
:
{
IpcSender
IpcSharedMemory
}
;
use
layers
:
:
geometry
:
:
DevicePixel
;
use
offscreen_gl_context
:
:
GLContextAttributes
;
use
std
:
:
cell
:
:
Cell
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
fmt
;
use
std
:
:
sync
:
:
mpsc
:
:
{
Receiver
Sender
channel
}
;
use
style_traits
:
:
viewport
:
:
ViewportConstraints
;
use
url
:
:
Url
;
use
util
:
:
cursor
:
:
Cursor
;
use
util
:
:
geometry
:
:
{
PagePx
ViewportPx
}
;
use
util
:
:
mem
:
:
HeapSizeOf
;
use
webdriver_msg
:
:
{
LoadStatus
WebDriverScriptCommand
}
;
#
[
derive
(
Clone
)
]
pub
struct
ConstellationChan
(
pub
Sender
<
Msg
>
)
;
impl
ConstellationChan
{
pub
fn
new
(
)
-
>
(
Receiver
<
Msg
>
ConstellationChan
)
{
let
(
chan
port
)
=
channel
(
)
;
(
port
ConstellationChan
(
chan
)
)
}
}
#
[
derive
(
PartialEq
Eq
Copy
Clone
Debug
Deserialize
Serialize
)
]
pub
enum
IFrameSandboxState
{
IFrameSandboxed
IFrameUnsandboxed
}
#
[
derive
(
Clone
Copy
Deserialize
Serialize
)
]
pub
struct
Failure
{
pub
pipeline_id
:
PipelineId
pub
parent_info
:
Option
<
(
PipelineId
SubpageId
)
>
}
#
[
derive
(
Copy
Clone
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
WindowSizeData
{
pub
initial_viewport
:
TypedSize2D
<
ViewportPx
f32
>
pub
visible_viewport
:
TypedSize2D
<
PagePx
f32
>
pub
device_pixel_ratio
:
ScaleFactor
<
ViewportPx
DevicePixel
f32
>
}
#
[
derive
(
PartialEq
Eq
Copy
Clone
Deserialize
Serialize
)
]
pub
enum
KeyState
{
Pressed
Released
Repeated
}
#
[
derive
(
Debug
PartialEq
Eq
Copy
Clone
Deserialize
Serialize
HeapSizeOf
)
]
pub
enum
Key
{
Space
Apostrophe
Comma
Minus
Period
Slash
Num0
Num1
Num2
Num3
Num4
Num5
Num6
Num7
Num8
Num9
Semicolon
Equal
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
LeftBracket
Backslash
RightBracket
GraveAccent
World1
World2
Escape
Enter
Tab
Backspace
Insert
Delete
Right
Left
Down
Up
PageUp
PageDown
Home
End
CapsLock
ScrollLock
NumLock
PrintScreen
Pause
F1
F2
F3
F4
F5
F6
F7
F8
F9
F10
F11
F12
F13
F14
F15
F16
F17
F18
F19
F20
F21
F22
F23
F24
F25
Kp0
Kp1
Kp2
Kp3
Kp4
Kp5
Kp6
Kp7
Kp8
Kp9
KpDecimal
KpDivide
KpMultiply
KpSubtract
KpAdd
KpEnter
KpEqual
LeftShift
LeftControl
LeftAlt
LeftSuper
RightShift
RightControl
RightAlt
RightSuper
Menu
}
bitflags
!
{
#
[
derive
(
Deserialize
Serialize
)
]
flags
KeyModifiers
:
u8
{
const
NONE
=
0x00
const
SHIFT
=
0x01
const
CONTROL
=
0x02
const
ALT
=
0x04
const
SUPER
=
0x08
}
}
#
[
derive
(
Copy
Clone
PartialEq
)
]
pub
enum
FocusType
{
Element
Parent
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
IframeLoadInfo
{
pub
url
:
Url
pub
containing_pipeline_id
:
PipelineId
pub
new_subpage_id
:
SubpageId
pub
old_subpage_id
:
Option
<
SubpageId
>
pub
new_pipeline_id
:
PipelineId
pub
sandbox
:
IFrameSandboxState
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
Msg
{
Exit
Failure
(
Failure
)
InitLoadUrl
(
Url
)
LoadComplete
(
PipelineId
)
DOMLoad
(
PipelineId
)
FrameSize
(
PipelineId
Size2D
<
f32
>
)
LoadUrl
(
PipelineId
LoadData
)
ScriptLoadedURLInIFrame
(
IframeLoadInfo
)
Navigate
(
Option
<
(
PipelineId
SubpageId
)
>
NavigationDirection
)
PainterReady
(
PipelineId
)
ResizedWindow
(
WindowSizeData
)
KeyEvent
(
Key
KeyState
KeyModifiers
)
GetPipelineTitle
(
PipelineId
)
SetCursor
(
Cursor
)
MozBrowserEvent
(
PipelineId
SubpageId
MozBrowserEvent
)
ChangeRunningAnimationsState
(
PipelineId
AnimationState
)
TickAnimation
(
PipelineId
)
GetPipeline
(
Option
<
FrameId
>
IpcSender
<
Option
<
PipelineId
>
>
)
GetFrame
(
PipelineId
IpcSender
<
Option
<
FrameId
>
>
)
Focus
(
PipelineId
)
GetClipboardContents
(
IpcSender
<
String
>
)
SetClipboardContents
(
String
)
WebDriverCommand
(
WebDriverCommandMsg
)
ViewportConstrained
(
PipelineId
ViewportConstraints
)
IsReadyToSaveImage
(
HashMap
<
PipelineId
Epoch
>
)
RemoveIFrame
(
PipelineId
)
NewFavicon
(
Url
)
HeadParsed
CreateCanvasPaintTask
(
Size2D
<
i32
>
IpcSender
<
(
IpcSender
<
CanvasMsg
>
usize
)
>
)
CreateWebGLPaintTask
(
Size2D
<
i32
>
GLContextAttributes
IpcSender
<
Result
<
(
IpcSender
<
CanvasMsg
>
usize
)
String
>
>
)
NodeStatus
(
Option
<
String
>
)
}
#
[
derive
(
Clone
Eq
PartialEq
Deserialize
Serialize
Debug
)
]
pub
enum
AnimationState
{
AnimationsPresent
AnimationCallbacksPresent
NoAnimationsPresent
NoAnimationCallbacksPresent
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
MozBrowserEvent
{
AsyncScroll
Close
ContextMenu
Error
IconChange
LoadEnd
LoadStart
LocationChange
(
String
)
OpenWindow
SecurityChange
ShowModalPrompt
TitleChange
(
String
)
UsernameAndPasswordRequired
OpenSearch
}
impl
MozBrowserEvent
{
pub
fn
name
(
&
self
)
-
>
&
'
static
str
{
match
*
self
{
MozBrowserEvent
:
:
AsyncScroll
=
>
"
mozbrowserasyncscroll
"
MozBrowserEvent
:
:
Close
=
>
"
mozbrowserclose
"
MozBrowserEvent
:
:
ContextMenu
=
>
"
mozbrowsercontextmenu
"
MozBrowserEvent
:
:
Error
=
>
"
mozbrowsererror
"
MozBrowserEvent
:
:
IconChange
=
>
"
mozbrowsericonchange
"
MozBrowserEvent
:
:
LoadEnd
=
>
"
mozbrowserloadend
"
MozBrowserEvent
:
:
LoadStart
=
>
"
mozbrowserloadstart
"
MozBrowserEvent
:
:
LocationChange
(
_
)
=
>
"
mozbrowserlocationchange
"
MozBrowserEvent
:
:
OpenWindow
=
>
"
mozbrowseropenwindow
"
MozBrowserEvent
:
:
SecurityChange
=
>
"
mozbrowsersecuritychange
"
MozBrowserEvent
:
:
ShowModalPrompt
=
>
"
mozbrowsershowmodalprompt
"
MozBrowserEvent
:
:
TitleChange
(
_
)
=
>
"
mozbrowsertitlechange
"
MozBrowserEvent
:
:
UsernameAndPasswordRequired
=
>
"
mozbrowserusernameandpasswordrequired
"
MozBrowserEvent
:
:
OpenSearch
=
>
"
mozbrowseropensearch
"
}
}
pub
fn
detail
(
&
self
)
-
>
Option
<
String
>
{
match
*
self
{
MozBrowserEvent
:
:
AsyncScroll
|
MozBrowserEvent
:
:
Close
|
MozBrowserEvent
:
:
ContextMenu
|
MozBrowserEvent
:
:
Error
|
MozBrowserEvent
:
:
IconChange
|
MozBrowserEvent
:
:
LoadEnd
|
MozBrowserEvent
:
:
LoadStart
|
MozBrowserEvent
:
:
OpenWindow
|
MozBrowserEvent
:
:
SecurityChange
|
MozBrowserEvent
:
:
ShowModalPrompt
|
MozBrowserEvent
:
:
UsernameAndPasswordRequired
|
MozBrowserEvent
:
:
OpenSearch
=
>
None
MozBrowserEvent
:
:
LocationChange
(
ref
new_location
)
=
>
Some
(
new_location
.
clone
(
)
)
MozBrowserEvent
:
:
TitleChange
(
ref
new_title
)
=
>
Some
(
new_title
.
clone
(
)
)
}
}
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
WebDriverCommandMsg
{
LoadUrl
(
PipelineId
LoadData
IpcSender
<
LoadStatus
>
)
Refresh
(
PipelineId
IpcSender
<
LoadStatus
>
)
ScriptCommand
(
PipelineId
WebDriverScriptCommand
)
TakeScreenshot
(
PipelineId
IpcSender
<
Option
<
Image
>
>
)
}
#
[
derive
(
Deserialize
Eq
PartialEq
Serialize
HeapSizeOf
)
]
pub
enum
PixelFormat
{
K8
KA8
RGB8
RGBA8
}
#
[
derive
(
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
Image
{
pub
width
:
u32
pub
height
:
u32
pub
format
:
PixelFormat
#
[
ignore_heap_size_of
=
"
Defined
in
ipc
-
channel
"
]
pub
bytes
:
IpcSharedMemory
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
LoadData
{
pub
url
:
Url
pub
method
:
Method
pub
headers
:
Headers
pub
data
:
Option
<
Vec
<
u8
>
>
}
impl
LoadData
{
pub
fn
new
(
url
:
Url
)
-
>
LoadData
{
LoadData
{
url
:
url
method
:
Method
:
:
Get
headers
:
Headers
:
:
new
(
)
data
:
None
}
}
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
)
]
pub
enum
NavigationDirection
{
Forward
Back
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
)
]
pub
struct
FrameId
(
pub
u32
)
;
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
WorkerId
(
pub
u32
)
;
#
[
derive
(
Clone
Copy
)
]
pub
struct
PipelineNamespace
{
id
:
PipelineNamespaceId
next_index
:
PipelineIndex
}
impl
PipelineNamespace
{
pub
fn
install
(
namespace_id
:
PipelineNamespaceId
)
{
PIPELINE_NAMESPACE
.
with
(
|
tls
|
{
assert
!
(
tls
.
get
(
)
.
is_none
(
)
)
;
tls
.
set
(
Some
(
PipelineNamespace
{
id
:
namespace_id
next_index
:
PipelineIndex
(
0
)
}
)
)
;
}
)
;
}
fn
next
(
&
mut
self
)
-
>
PipelineId
{
let
pipeline_id
=
PipelineId
{
namespace_id
:
self
.
id
index
:
self
.
next_index
}
;
let
PipelineIndex
(
current_index
)
=
self
.
next_index
;
self
.
next_index
=
PipelineIndex
(
current_index
+
1
)
;
pipeline_id
}
}
thread_local
!
(
pub
static
PIPELINE_NAMESPACE
:
Cell
<
Option
<
PipelineNamespace
>
>
=
Cell
:
:
new
(
None
)
)
;
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
PipelineNamespaceId
(
pub
u32
)
;
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
PipelineIndex
(
pub
u32
)
;
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
PipelineId
{
pub
namespace_id
:
PipelineNamespaceId
pub
index
:
PipelineIndex
}
impl
PipelineId
{
pub
fn
new
(
)
-
>
PipelineId
{
PIPELINE_NAMESPACE
.
with
(
|
tls
|
{
let
mut
namespace
=
tls
.
get
(
)
.
expect
(
"
No
namespace
set
for
this
thread
!
"
)
;
let
new_pipeline_id
=
namespace
.
next
(
)
;
tls
.
set
(
Some
(
namespace
)
)
;
new_pipeline_id
}
)
}
pub
fn
fake_root_pipeline_id
(
)
-
>
PipelineId
{
PipelineId
{
namespace_id
:
PipelineNamespaceId
(
0
)
index
:
PipelineIndex
(
0
)
}
}
}
impl
fmt
:
:
Display
for
PipelineId
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
let
PipelineNamespaceId
(
namespace_id
)
=
self
.
namespace_id
;
let
PipelineIndex
(
index
)
=
self
.
index
;
write
!
(
fmt
"
(
{
}
{
}
)
"
namespace_id
index
)
}
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
SubpageId
(
pub
u32
)
;
