use
canvas_traits
:
:
CanvasMsg
;
use
compositor_msg
:
:
Epoch
;
use
euclid
:
:
point
:
:
Point2D
;
use
euclid
:
:
scale_factor
:
:
ScaleFactor
;
use
euclid
:
:
size
:
:
{
Size2D
TypedSize2D
}
;
use
hyper
:
:
header
:
:
Headers
;
use
hyper
:
:
method
:
:
Method
;
use
ipc_channel
:
:
ipc
:
:
{
self
IpcReceiver
IpcSender
IpcSharedMemory
}
;
use
layers
:
:
geometry
:
:
DevicePixel
;
use
offscreen_gl_context
:
:
GLContextAttributes
;
use
serde
:
:
{
Deserialize
Serialize
}
;
use
std
:
:
cell
:
:
Cell
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
fmt
;
use
std
:
:
sync
:
:
mpsc
:
:
channel
;
use
style_traits
:
:
viewport
:
:
ViewportConstraints
;
use
url
:
:
Url
;
use
util
:
:
cursor
:
:
Cursor
;
use
util
:
:
geometry
:
:
{
PagePx
ViewportPx
}
;
use
util
:
:
mem
:
:
HeapSizeOf
;
use
webdriver_msg
:
:
{
LoadStatus
WebDriverScriptCommand
}
;
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
ConstellationChan
<
T
:
Deserialize
+
Serialize
>
(
pub
IpcSender
<
T
>
)
;
impl
<
T
:
Deserialize
+
Serialize
>
ConstellationChan
<
T
>
{
pub
fn
new
(
)
-
>
(
IpcReceiver
<
T
>
ConstellationChan
<
T
>
)
{
let
(
chan
port
)
=
ipc
:
:
channel
(
)
.
unwrap
(
)
;
(
port
ConstellationChan
(
chan
)
)
}
}
impl
<
T
:
Serialize
+
Deserialize
>
Clone
for
ConstellationChan
<
T
>
{
fn
clone
(
&
self
)
-
>
ConstellationChan
<
T
>
{
ConstellationChan
(
self
.
0
.
clone
(
)
)
}
}
#
[
derive
(
PartialEq
Eq
Copy
Clone
Debug
Deserialize
Serialize
)
]
pub
enum
IFrameSandboxState
{
IFrameSandboxed
IFrameUnsandboxed
}
#
[
derive
(
Clone
Copy
Deserialize
Serialize
)
]
pub
struct
Failure
{
pub
pipeline_id
:
PipelineId
pub
parent_info
:
Option
<
(
PipelineId
SubpageId
)
>
}
#
[
derive
(
Copy
Clone
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
WindowSizeData
{
pub
initial_viewport
:
TypedSize2D
<
ViewportPx
f32
>
pub
visible_viewport
:
TypedSize2D
<
PagePx
f32
>
pub
device_pixel_ratio
:
ScaleFactor
<
ViewportPx
DevicePixel
f32
>
}
#
[
derive
(
PartialEq
Eq
Copy
Clone
Debug
Deserialize
Serialize
)
]
pub
enum
KeyState
{
Pressed
Released
Repeated
}
#
[
derive
(
Debug
PartialEq
Eq
Copy
Clone
Deserialize
Serialize
HeapSizeOf
)
]
pub
enum
Key
{
Space
Apostrophe
Comma
Minus
Period
Slash
Num0
Num1
Num2
Num3
Num4
Num5
Num6
Num7
Num8
Num9
Semicolon
Equal
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
LeftBracket
Backslash
RightBracket
GraveAccent
World1
World2
Escape
Enter
Tab
Backspace
Insert
Delete
Right
Left
Down
Up
PageUp
PageDown
Home
End
CapsLock
ScrollLock
NumLock
PrintScreen
Pause
F1
F2
F3
F4
F5
F6
F7
F8
F9
F10
F11
F12
F13
F14
F15
F16
F17
F18
F19
F20
F21
F22
F23
F24
F25
Kp0
Kp1
Kp2
Kp3
Kp4
Kp5
Kp6
Kp7
Kp8
Kp9
KpDecimal
KpDivide
KpMultiply
KpSubtract
KpAdd
KpEnter
KpEqual
LeftShift
LeftControl
LeftAlt
LeftSuper
RightShift
RightControl
RightAlt
RightSuper
Menu
}
bitflags
!
{
#
[
derive
(
Deserialize
Serialize
)
]
flags
KeyModifiers
:
u8
{
const
NONE
=
0x00
const
SHIFT
=
0x01
const
CONTROL
=
0x02
const
ALT
=
0x04
const
SUPER
=
0x08
}
}
#
[
derive
(
Copy
Clone
PartialEq
)
]
pub
enum
FocusType
{
Element
Parent
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
IframeLoadInfo
{
pub
url
:
Url
pub
containing_pipeline_id
:
PipelineId
pub
new_subpage_id
:
SubpageId
pub
old_subpage_id
:
Option
<
SubpageId
>
pub
new_pipeline_id
:
PipelineId
pub
sandbox
:
IFrameSandboxState
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
CompositorMsg
{
Exit
FrameSize
(
PipelineId
Size2D
<
f32
>
)
GetFrame
(
PipelineId
IpcSender
<
Option
<
FrameId
>
>
)
GetPipeline
(
Option
<
FrameId
>
IpcSender
<
Option
<
PipelineId
>
>
)
GetPipelineTitle
(
PipelineId
)
InitLoadUrl
(
Url
)
IsReadyToSaveImage
(
HashMap
<
PipelineId
Epoch
>
)
KeyEvent
(
Key
KeyState
KeyModifiers
)
LoadUrl
(
PipelineId
LoadData
)
Navigate
(
Option
<
(
PipelineId
SubpageId
)
>
NavigationDirection
)
ResizedWindow
(
WindowSizeData
)
TickAnimation
(
PipelineId
)
WebDriverCommand
(
WebDriverCommandMsg
)
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
ScriptMsg
{
ChangeRunningAnimationsState
(
PipelineId
AnimationState
)
CreateCanvasPaintTask
(
Size2D
<
i32
>
IpcSender
<
(
IpcSender
<
CanvasMsg
>
usize
)
>
)
CreateWebGLPaintTask
(
Size2D
<
i32
>
GLContextAttributes
IpcSender
<
Result
<
(
IpcSender
<
CanvasMsg
>
usize
)
String
>
>
)
DOMLoad
(
PipelineId
)
Failure
(
Failure
)
Focus
(
PipelineId
)
ForwardMouseButtonEvent
(
PipelineId
MouseEventType
MouseButton
Point2D
<
f32
>
)
ForwardMouseMoveEvent
(
PipelineId
Point2D
<
f32
>
)
GetClipboardContents
(
IpcSender
<
String
>
)
HeadParsed
LoadComplete
(
PipelineId
)
LoadUrl
(
PipelineId
LoadData
)
MozBrowserEvent
(
PipelineId
SubpageId
MozBrowserEvent
)
Navigate
(
Option
<
(
PipelineId
SubpageId
)
>
NavigationDirection
)
NewFavicon
(
Url
)
NodeStatus
(
Option
<
String
>
)
RemoveIFrame
(
PipelineId
)
ScriptLoadedURLInIFrame
(
IframeLoadInfo
)
SetClipboardContents
(
String
)
SetCursor
(
Cursor
)
ViewportConstrained
(
PipelineId
ViewportConstraints
)
}
#
[
derive
(
Deserialize
HeapSizeOf
Serialize
)
]
pub
enum
MouseEventType
{
Click
MouseDown
MouseUp
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
Serialize
)
]
pub
enum
MouseButton
{
Left
Middle
Right
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
PaintMsg
{
Ready
(
PipelineId
)
Failure
(
Failure
)
}
#
[
derive
(
Clone
Eq
PartialEq
Deserialize
Serialize
Debug
)
]
pub
enum
AnimationState
{
AnimationsPresent
AnimationCallbacksPresent
NoAnimationsPresent
NoAnimationCallbacksPresent
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
MozBrowserEvent
{
AsyncScroll
Close
ContextMenu
Error
IconChange
(
String
String
String
)
LoadEnd
LoadStart
LocationChange
(
String
)
OpenWindow
SecurityChange
ShowModalPrompt
TitleChange
(
String
)
UsernameAndPasswordRequired
OpenSearch
}
impl
MozBrowserEvent
{
pub
fn
name
(
&
self
)
-
>
&
'
static
str
{
match
*
self
{
MozBrowserEvent
:
:
AsyncScroll
=
>
"
mozbrowserasyncscroll
"
MozBrowserEvent
:
:
Close
=
>
"
mozbrowserclose
"
MozBrowserEvent
:
:
ContextMenu
=
>
"
mozbrowsercontextmenu
"
MozBrowserEvent
:
:
Error
=
>
"
mozbrowsererror
"
MozBrowserEvent
:
:
IconChange
(
_
_
_
)
=
>
"
mozbrowsericonchange
"
MozBrowserEvent
:
:
LoadEnd
=
>
"
mozbrowserloadend
"
MozBrowserEvent
:
:
LoadStart
=
>
"
mozbrowserloadstart
"
MozBrowserEvent
:
:
LocationChange
(
_
)
=
>
"
mozbrowserlocationchange
"
MozBrowserEvent
:
:
OpenWindow
=
>
"
mozbrowseropenwindow
"
MozBrowserEvent
:
:
SecurityChange
=
>
"
mozbrowsersecuritychange
"
MozBrowserEvent
:
:
ShowModalPrompt
=
>
"
mozbrowsershowmodalprompt
"
MozBrowserEvent
:
:
TitleChange
(
_
)
=
>
"
mozbrowsertitlechange
"
MozBrowserEvent
:
:
UsernameAndPasswordRequired
=
>
"
mozbrowserusernameandpasswordrequired
"
MozBrowserEvent
:
:
OpenSearch
=
>
"
mozbrowseropensearch
"
}
}
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
WebDriverCommandMsg
{
LoadUrl
(
PipelineId
LoadData
IpcSender
<
LoadStatus
>
)
Refresh
(
PipelineId
IpcSender
<
LoadStatus
>
)
ScriptCommand
(
PipelineId
WebDriverScriptCommand
)
SendKeys
(
PipelineId
Vec
<
(
Key
KeyModifiers
KeyState
)
>
)
TakeScreenshot
(
PipelineId
IpcSender
<
Option
<
Image
>
>
)
}
#
[
derive
(
Deserialize
Eq
PartialEq
Serialize
HeapSizeOf
)
]
pub
enum
PixelFormat
{
K8
KA8
RGB8
RGBA8
}
#
[
derive
(
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
Image
{
pub
width
:
u32
pub
height
:
u32
pub
format
:
PixelFormat
#
[
ignore_heap_size_of
=
"
Defined
in
ipc
-
channel
"
]
pub
bytes
:
IpcSharedMemory
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
LoadData
{
pub
url
:
Url
pub
method
:
Method
pub
headers
:
Headers
pub
data
:
Option
<
Vec
<
u8
>
>
}
impl
LoadData
{
pub
fn
new
(
url
:
Url
)
-
>
LoadData
{
LoadData
{
url
:
url
method
:
Method
:
:
Get
headers
:
Headers
:
:
new
(
)
data
:
None
}
}
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
)
]
pub
enum
NavigationDirection
{
Forward
Back
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
)
]
pub
struct
FrameId
(
pub
u32
)
;
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
WorkerId
(
pub
u32
)
;
#
[
derive
(
Clone
Copy
)
]
pub
struct
PipelineNamespace
{
id
:
PipelineNamespaceId
next_index
:
PipelineIndex
}
impl
PipelineNamespace
{
pub
fn
install
(
namespace_id
:
PipelineNamespaceId
)
{
PIPELINE_NAMESPACE
.
with
(
|
tls
|
{
assert
!
(
tls
.
get
(
)
.
is_none
(
)
)
;
tls
.
set
(
Some
(
PipelineNamespace
{
id
:
namespace_id
next_index
:
PipelineIndex
(
0
)
}
)
)
;
}
)
;
}
fn
next
(
&
mut
self
)
-
>
PipelineId
{
let
pipeline_id
=
PipelineId
{
namespace_id
:
self
.
id
index
:
self
.
next_index
}
;
let
PipelineIndex
(
current_index
)
=
self
.
next_index
;
self
.
next_index
=
PipelineIndex
(
current_index
+
1
)
;
pipeline_id
}
}
thread_local
!
(
pub
static
PIPELINE_NAMESPACE
:
Cell
<
Option
<
PipelineNamespace
>
>
=
Cell
:
:
new
(
None
)
)
;
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
PipelineNamespaceId
(
pub
u32
)
;
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
PipelineIndex
(
pub
u32
)
;
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
PipelineId
{
pub
namespace_id
:
PipelineNamespaceId
pub
index
:
PipelineIndex
}
impl
PipelineId
{
pub
fn
new
(
)
-
>
PipelineId
{
PIPELINE_NAMESPACE
.
with
(
|
tls
|
{
let
mut
namespace
=
tls
.
get
(
)
.
expect
(
"
No
namespace
set
for
this
thread
!
"
)
;
let
new_pipeline_id
=
namespace
.
next
(
)
;
tls
.
set
(
Some
(
namespace
)
)
;
new_pipeline_id
}
)
}
pub
fn
fake_root_pipeline_id
(
)
-
>
PipelineId
{
PipelineId
{
namespace_id
:
PipelineNamespaceId
(
0
)
index
:
PipelineIndex
(
0
)
}
}
}
impl
fmt
:
:
Display
for
PipelineId
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
let
PipelineNamespaceId
(
namespace_id
)
=
self
.
namespace_id
;
let
PipelineIndex
(
index
)
=
self
.
index
;
write
!
(
fmt
"
(
{
}
{
}
)
"
namespace_id
index
)
}
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
SubpageId
(
pub
u32
)
;
