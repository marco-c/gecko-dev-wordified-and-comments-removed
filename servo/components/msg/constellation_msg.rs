use
euclid
:
:
scale_factor
:
:
ScaleFactor
;
use
euclid
:
:
size
:
:
{
Size2D
TypedSize2D
}
;
use
hyper
:
:
header
:
:
Headers
;
use
hyper
:
:
method
:
:
Method
;
use
ipc_channel
:
:
ipc
:
:
{
IpcSender
IpcSharedMemory
}
;
use
layers
:
:
geometry
:
:
DevicePixel
;
use
std
:
:
cell
:
:
Cell
;
use
std
:
:
fmt
;
use
url
:
:
Url
;
use
util
:
:
geometry
:
:
{
PagePx
ViewportPx
}
;
use
webdriver_msg
:
:
{
LoadStatus
WebDriverScriptCommand
}
;
use
webrender_traits
;
pub
type
PanicMsg
=
(
Option
<
PipelineId
>
String
String
)
;
#
[
derive
(
Copy
Clone
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
WindowSizeData
{
pub
initial_viewport
:
TypedSize2D
<
ViewportPx
f32
>
pub
visible_viewport
:
TypedSize2D
<
PagePx
f32
>
pub
device_pixel_ratio
:
ScaleFactor
<
ViewportPx
DevicePixel
f32
>
}
#
[
derive
(
Deserialize
Eq
PartialEq
Serialize
Copy
Clone
HeapSizeOf
)
]
pub
enum
WindowSizeType
{
Initial
Resize
}
#
[
derive
(
PartialEq
Eq
Copy
Clone
Debug
Deserialize
Serialize
)
]
pub
enum
KeyState
{
Pressed
Released
Repeated
}
#
[
derive
(
Debug
PartialEq
Eq
Copy
Clone
Deserialize
Serialize
HeapSizeOf
)
]
pub
enum
Key
{
Space
Apostrophe
Comma
Minus
Period
Slash
Num0
Num1
Num2
Num3
Num4
Num5
Num6
Num7
Num8
Num9
Semicolon
Equal
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
LeftBracket
Backslash
RightBracket
GraveAccent
World1
World2
Escape
Enter
Tab
Backspace
Insert
Delete
Right
Left
Down
Up
PageUp
PageDown
Home
End
CapsLock
ScrollLock
NumLock
PrintScreen
Pause
F1
F2
F3
F4
F5
F6
F7
F8
F9
F10
F11
F12
F13
F14
F15
F16
F17
F18
F19
F20
F21
F22
F23
F24
F25
Kp0
Kp1
Kp2
Kp3
Kp4
Kp5
Kp6
Kp7
Kp8
Kp9
KpDecimal
KpDivide
KpMultiply
KpSubtract
KpAdd
KpEnter
KpEqual
LeftShift
LeftControl
LeftAlt
LeftSuper
RightShift
RightControl
RightAlt
RightSuper
Menu
NavigateBackward
NavigateForward
}
bitflags
!
{
#
[
derive
(
Deserialize
Serialize
)
]
pub
flags
KeyModifiers
:
u8
{
const
NONE
=
0x00
const
SHIFT
=
0x01
const
CONTROL
=
0x02
const
ALT
=
0x04
const
SUPER
=
0x08
}
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
WebDriverCommandMsg
{
GetWindowSize
(
PipelineId
IpcSender
<
WindowSizeData
>
)
LoadUrl
(
PipelineId
LoadData
IpcSender
<
LoadStatus
>
)
Refresh
(
PipelineId
IpcSender
<
LoadStatus
>
)
ScriptCommand
(
PipelineId
WebDriverScriptCommand
)
SendKeys
(
PipelineId
Vec
<
(
Key
KeyModifiers
KeyState
)
>
)
SetWindowSize
(
PipelineId
Size2D
<
u32
>
IpcSender
<
WindowSizeData
>
)
TakeScreenshot
(
PipelineId
IpcSender
<
Option
<
Image
>
>
)
}
#
[
derive
(
Clone
Copy
Deserialize
Eq
PartialEq
Serialize
HeapSizeOf
)
]
pub
enum
PixelFormat
{
K8
KA8
RGB8
RGBA8
}
#
[
derive
(
Clone
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
Image
{
pub
width
:
u32
pub
height
:
u32
pub
format
:
PixelFormat
#
[
ignore_heap_size_of
=
"
Defined
in
ipc
-
channel
"
]
pub
bytes
:
IpcSharedMemory
#
[
ignore_heap_size_of
=
"
Defined
in
webrender_traits
"
]
pub
id
:
Option
<
webrender_traits
:
:
ImageKey
>
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
LoadData
{
pub
url
:
Url
pub
method
:
Method
pub
headers
:
Headers
pub
data
:
Option
<
Vec
<
u8
>
>
pub
referrer_policy
:
Option
<
ReferrerPolicy
>
pub
referrer_url
:
Option
<
Url
>
}
impl
LoadData
{
pub
fn
new
(
url
:
Url
referrer_policy
:
Option
<
ReferrerPolicy
>
referrer_url
:
Option
<
Url
>
)
-
>
LoadData
{
LoadData
{
url
:
url
method
:
Method
:
:
Get
headers
:
Headers
:
:
new
(
)
data
:
None
referrer_policy
:
referrer_policy
referrer_url
:
referrer_url
}
}
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
)
]
pub
enum
NavigationDirection
{
Forward
Back
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
)
]
pub
struct
FrameId
(
pub
u32
)
;
#
[
derive
(
Clone
Copy
)
]
pub
struct
PipelineNamespace
{
id
:
PipelineNamespaceId
next_index
:
PipelineIndex
}
impl
PipelineNamespace
{
pub
fn
install
(
namespace_id
:
PipelineNamespaceId
)
{
PIPELINE_NAMESPACE
.
with
(
|
tls
|
{
assert
!
(
tls
.
get
(
)
.
is_none
(
)
)
;
tls
.
set
(
Some
(
PipelineNamespace
{
id
:
namespace_id
next_index
:
PipelineIndex
(
0
)
}
)
)
;
}
)
;
}
fn
next
(
&
mut
self
)
-
>
PipelineId
{
let
pipeline_id
=
PipelineId
{
namespace_id
:
self
.
id
index
:
self
.
next_index
}
;
let
PipelineIndex
(
current_index
)
=
self
.
next_index
;
self
.
next_index
=
PipelineIndex
(
current_index
+
1
)
;
pipeline_id
}
}
thread_local
!
(
pub
static
PIPELINE_NAMESPACE
:
Cell
<
Option
<
PipelineNamespace
>
>
=
Cell
:
:
new
(
None
)
)
;
#
[
derive
(
Clone
PartialEq
Eq
PartialOrd
Ord
Copy
Hash
Debug
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
PipelineNamespaceId
(
pub
u32
)
;
#
[
derive
(
Clone
PartialEq
Eq
PartialOrd
Ord
Copy
Hash
Debug
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
PipelineIndex
(
pub
u32
)
;
#
[
derive
(
Clone
PartialEq
Eq
PartialOrd
Ord
Copy
Hash
Debug
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
PipelineId
{
pub
namespace_id
:
PipelineNamespaceId
pub
index
:
PipelineIndex
}
impl
PipelineId
{
pub
fn
new
(
)
-
>
PipelineId
{
PIPELINE_NAMESPACE
.
with
(
|
tls
|
{
let
mut
namespace
=
tls
.
get
(
)
.
expect
(
"
No
namespace
set
for
this
thread
!
"
)
;
let
new_pipeline_id
=
namespace
.
next
(
)
;
tls
.
set
(
Some
(
namespace
)
)
;
new_pipeline_id
}
)
}
pub
fn
fake_root_pipeline_id
(
)
-
>
PipelineId
{
PipelineId
{
namespace_id
:
PipelineNamespaceId
(
0
)
index
:
PipelineIndex
(
0
)
}
}
}
impl
fmt
:
:
Display
for
PipelineId
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
let
PipelineNamespaceId
(
namespace_id
)
=
self
.
namespace_id
;
let
PipelineIndex
(
index
)
=
self
.
index
;
write
!
(
fmt
"
(
{
}
{
}
)
"
namespace_id
index
)
}
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
SubpageId
(
pub
u32
)
;
#
[
derive
(
HeapSizeOf
Clone
Deserialize
Serialize
)
]
pub
enum
ReferrerPolicy
{
NoReferrer
NoRefWhenDowngrade
OriginOnly
OriginWhenCrossOrigin
UnsafeUrl
}
