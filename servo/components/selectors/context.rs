use
attr
:
:
CaseSensitivity
;
use
bloom
:
:
BloomFilter
;
use
nth_index_cache
:
:
NthIndexCache
;
#
[
derive
(
Clone
Copy
Debug
PartialEq
)
]
pub
enum
MatchingMode
{
Normal
ForStatelessPseudoElement
}
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
enum
VisitedHandlingMode
{
AllLinksUnvisited
AllLinksVisitedAndUnvisited
RelevantLinkVisited
}
#
[
derive
(
Clone
Copy
Debug
Eq
Hash
PartialEq
)
]
pub
enum
QuirksMode
{
Quirks
LimitedQuirks
NoQuirks
}
impl
QuirksMode
{
#
[
inline
]
pub
fn
classes_and_ids_case_sensitivity
(
self
)
-
>
CaseSensitivity
{
match
self
{
QuirksMode
:
:
NoQuirks
|
QuirksMode
:
:
LimitedQuirks
=
>
CaseSensitivity
:
:
CaseSensitive
QuirksMode
:
:
Quirks
=
>
CaseSensitivity
:
:
AsciiCaseInsensitive
}
}
}
pub
struct
MatchingContext
<
'
a
>
{
pub
matching_mode
:
MatchingMode
pub
bloom_filter
:
Option
<
&
'
a
BloomFilter
>
pub
nth_index_cache
:
Option
<
&
'
a
mut
NthIndexCache
>
pub
visited_handling
:
VisitedHandlingMode
pub
relevant_link_found
:
bool
quirks_mode
:
QuirksMode
classes_and_ids_case_sensitivity
:
CaseSensitivity
}
impl
<
'
a
>
MatchingContext
<
'
a
>
{
pub
fn
new
(
matching_mode
:
MatchingMode
bloom_filter
:
Option
<
&
'
a
BloomFilter
>
nth_index_cache
:
Option
<
&
'
a
mut
NthIndexCache
>
quirks_mode
:
QuirksMode
)
-
>
Self
{
Self
:
:
new_for_visited
(
matching_mode
bloom_filter
nth_index_cache
VisitedHandlingMode
:
:
AllLinksUnvisited
quirks_mode
)
}
pub
fn
new_for_visited
(
matching_mode
:
MatchingMode
bloom_filter
:
Option
<
&
'
a
BloomFilter
>
nth_index_cache
:
Option
<
&
'
a
mut
NthIndexCache
>
visited_handling
:
VisitedHandlingMode
quirks_mode
:
QuirksMode
)
-
>
Self
{
Self
{
matching_mode
bloom_filter
visited_handling
nth_index_cache
quirks_mode
relevant_link_found
:
false
classes_and_ids_case_sensitivity
:
quirks_mode
.
classes_and_ids_case_sensitivity
(
)
}
}
#
[
inline
]
pub
fn
quirks_mode
(
&
self
)
-
>
QuirksMode
{
self
.
quirks_mode
}
#
[
inline
]
pub
fn
classes_and_ids_case_sensitivity
(
&
self
)
-
>
CaseSensitivity
{
self
.
classes_and_ids_case_sensitivity
}
}
