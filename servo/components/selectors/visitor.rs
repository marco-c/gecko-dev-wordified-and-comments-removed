#
!
[
deny
(
missing_docs
)
]
use
crate
:
:
attr
:
:
NamespaceConstraint
;
use
crate
:
:
parser
:
:
{
Combinator
Component
Selector
SelectorImpl
}
;
pub
trait
SelectorVisitor
:
Sized
{
type
Impl
:
SelectorImpl
;
fn
visit_attribute_selector
(
&
mut
self
_namespace
:
&
NamespaceConstraint
<
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
NamespaceUrl
>
_local_name
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
LocalName
_local_name_lower
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
LocalName
)
-
>
bool
{
true
}
fn
visit_simple_selector
(
&
mut
self
_
:
&
Component
<
Self
:
:
Impl
>
)
-
>
bool
{
true
}
fn
visit_selector_list
(
&
mut
self
_list_kind
:
SelectorListKind
list
:
&
[
Selector
<
Self
:
:
Impl
>
]
)
-
>
bool
{
for
nested
in
list
{
if
!
nested
.
visit
(
self
)
{
return
false
;
}
}
true
}
fn
visit_complex_selector
(
&
mut
self
_combinator_to_right
:
Option
<
Combinator
>
)
-
>
bool
{
true
}
}
bitflags
!
{
/
/
/
The
kinds
of
components
the
visitor
is
visiting
the
selector
list
of
if
any
#
[
derive
(
Clone
Copy
Default
)
]
pub
struct
SelectorListKind
:
u8
{
/
/
/
The
visitor
is
inside
:
not
(
.
.
)
const
NEGATION
=
1
<
<
0
;
/
/
/
The
visitor
is
inside
:
is
(
.
.
)
const
IS
=
1
<
<
1
;
/
/
/
The
visitor
is
inside
:
where
(
.
.
)
const
WHERE
=
1
<
<
2
;
/
/
/
The
visitor
is
inside
:
nth
-
child
(
.
.
of
<
selector
list
>
)
or
/
/
/
:
nth
-
last
-
child
(
.
.
of
<
selector
list
>
)
const
NTH_OF
=
1
<
<
3
;
}
}
impl
SelectorListKind
{
pub
fn
from_component
<
Impl
:
SelectorImpl
>
(
component
:
&
Component
<
Impl
>
)
-
>
Self
{
match
component
{
Component
:
:
Negation
(
_
)
=
>
SelectorListKind
:
:
NEGATION
Component
:
:
Is
(
_
)
=
>
SelectorListKind
:
:
IS
Component
:
:
Where
(
_
)
=
>
SelectorListKind
:
:
WHERE
Component
:
:
NthOf
(
_
)
=
>
SelectorListKind
:
:
NTH_OF
_
=
>
SelectorListKind
:
:
empty
(
)
}
}
pub
fn
in_negation
(
&
self
)
-
>
bool
{
self
.
intersects
(
SelectorListKind
:
:
NEGATION
)
}
pub
fn
in_is
(
&
self
)
-
>
bool
{
self
.
intersects
(
SelectorListKind
:
:
IS
)
}
pub
fn
in_where
(
&
self
)
-
>
bool
{
self
.
intersects
(
SelectorListKind
:
:
WHERE
)
}
pub
fn
in_nth_of
(
&
self
)
-
>
bool
{
self
.
intersects
(
SelectorListKind
:
:
NTH_OF
)
}
}
