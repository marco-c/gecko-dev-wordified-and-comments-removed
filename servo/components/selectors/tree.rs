use
crate
:
:
attr
:
:
{
AttrSelectorOperation
CaseSensitivity
NamespaceConstraint
}
;
use
crate
:
:
bloom
:
:
BloomFilter
;
use
crate
:
:
matching
:
:
{
ElementSelectorFlags
MatchingContext
}
;
use
crate
:
:
parser
:
:
SelectorImpl
;
use
std
:
:
fmt
:
:
Debug
;
use
std
:
:
ptr
:
:
NonNull
;
#
[
derive
(
Clone
Copy
Debug
Eq
Hash
PartialEq
)
]
pub
struct
OpaqueElement
(
NonNull
<
(
)
>
)
;
unsafe
impl
Send
for
OpaqueElement
{
}
unsafe
impl
Sync
for
OpaqueElement
{
}
impl
OpaqueElement
{
pub
fn
new
<
T
>
(
ptr
:
&
T
)
-
>
Self
{
unsafe
{
OpaqueElement
(
NonNull
:
:
new_unchecked
(
ptr
as
*
const
T
as
*
const
(
)
as
*
mut
(
)
)
)
}
}
pub
unsafe
fn
as_const_ptr
<
T
>
(
&
self
)
-
>
*
const
T
{
self
.
0
.
as_ptr
(
)
as
*
const
T
}
}
pub
trait
Element
:
Sized
+
Clone
+
Debug
{
type
Impl
:
SelectorImpl
;
fn
opaque
(
&
self
)
-
>
OpaqueElement
;
fn
parent_element
(
&
self
)
-
>
Option
<
Self
>
;
fn
parent_node_is_shadow_root
(
&
self
)
-
>
bool
;
fn
containing_shadow_host
(
&
self
)
-
>
Option
<
Self
>
;
fn
pseudo_element_originating_element
(
&
self
)
-
>
Option
<
Self
>
{
debug_assert
!
(
self
.
is_pseudo_element
(
)
)
;
self
.
parent_element
(
)
}
fn
is_pseudo_element
(
&
self
)
-
>
bool
;
fn
prev_sibling_element
(
&
self
)
-
>
Option
<
Self
>
;
fn
next_sibling_element
(
&
self
)
-
>
Option
<
Self
>
;
fn
first_element_child
(
&
self
)
-
>
Option
<
Self
>
;
fn
is_html_element_in_html_document
(
&
self
)
-
>
bool
;
fn
has_local_name
(
&
self
local_name
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
BorrowedLocalName
)
-
>
bool
;
fn
has_namespace
(
&
self
ns
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
BorrowedNamespaceUrl
)
-
>
bool
;
fn
is_same_type
(
&
self
other
:
&
Self
)
-
>
bool
;
fn
attr_matches
(
&
self
ns
:
&
NamespaceConstraint
<
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
NamespaceUrl
>
local_name
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
LocalName
operation
:
&
AttrSelectorOperation
<
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
AttrValue
>
)
-
>
bool
;
fn
has_attr_in_no_namespace
(
&
self
local_name
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
LocalName
)
-
>
bool
{
self
.
attr_matches
(
&
NamespaceConstraint
:
:
Specific
(
&
crate
:
:
parser
:
:
namespace_empty_string
:
:
<
Self
:
:
Impl
>
(
)
)
local_name
&
AttrSelectorOperation
:
:
Exists
)
}
fn
match_non_ts_pseudo_class
(
&
self
pc
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
NonTSPseudoClass
context
:
&
mut
MatchingContext
<
Self
:
:
Impl
>
)
-
>
bool
;
fn
match_pseudo_element
(
&
self
pe
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
PseudoElement
context
:
&
mut
MatchingContext
<
Self
:
:
Impl
>
)
-
>
bool
;
fn
apply_selector_flags
(
&
self
flags
:
ElementSelectorFlags
)
;
fn
is_link
(
&
self
)
-
>
bool
;
fn
is_html_slot_element
(
&
self
)
-
>
bool
;
fn
assigned_slot
(
&
self
)
-
>
Option
<
Self
>
{
None
}
fn
has_id
(
&
self
id
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
Identifier
case_sensitivity
:
CaseSensitivity
)
-
>
bool
;
fn
has_class
(
&
self
name
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
Identifier
case_sensitivity
:
CaseSensitivity
)
-
>
bool
;
fn
has_custom_state
(
&
self
name
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
Identifier
)
-
>
bool
;
fn
imported_part
(
&
self
name
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
Identifier
)
-
>
Option
<
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
Identifier
>
;
fn
is_part
(
&
self
name
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
Identifier
)
-
>
bool
;
fn
is_empty
(
&
self
)
-
>
bool
;
fn
is_root
(
&
self
)
-
>
bool
;
fn
ignores_nth_child_selectors
(
&
self
)
-
>
bool
{
false
}
fn
add_element_unique_hashes
(
&
self
filter
:
&
mut
BloomFilter
)
-
>
bool
;
}
