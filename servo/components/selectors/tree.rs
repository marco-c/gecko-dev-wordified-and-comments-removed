use
attr
:
:
{
AttrSelectorOperation
NamespaceConstraint
}
;
use
matching
:
:
{
ElementSelectorFlags
MatchingContext
RelevantLinkStatus
}
;
use
parser
:
:
SelectorImpl
;
use
std
:
:
fmt
:
:
Debug
;
pub
trait
Element
:
Sized
+
Debug
{
type
Impl
:
SelectorImpl
;
fn
parent_element
(
&
self
)
-
>
Option
<
Self
>
;
fn
pseudo_element_originating_element
(
&
self
)
-
>
Option
<
Self
>
{
self
.
parent_element
(
)
}
fn
first_child_element
(
&
self
)
-
>
Option
<
Self
>
;
fn
last_child_element
(
&
self
)
-
>
Option
<
Self
>
;
fn
prev_sibling_element
(
&
self
)
-
>
Option
<
Self
>
;
fn
next_sibling_element
(
&
self
)
-
>
Option
<
Self
>
;
fn
is_html_element_in_html_document
(
&
self
)
-
>
bool
;
fn
get_local_name
(
&
self
)
-
>
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
BorrowedLocalName
;
fn
get_namespace
(
&
self
)
-
>
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
BorrowedNamespaceUrl
;
fn
attr_matches
(
&
self
ns
:
&
NamespaceConstraint
<
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
NamespaceUrl
>
local_name
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
LocalName
operation
:
&
AttrSelectorOperation
<
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
AttrValue
>
)
-
>
bool
;
fn
match_non_ts_pseudo_class
<
F
>
(
&
self
pc
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
NonTSPseudoClass
context
:
&
mut
MatchingContext
relevant_link
:
&
RelevantLinkStatus
flags_setter
:
&
mut
F
)
-
>
bool
where
F
:
FnMut
(
&
Self
ElementSelectorFlags
)
;
fn
match_pseudo_element
(
&
self
pe
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
PseudoElement
context
:
&
mut
MatchingContext
)
-
>
bool
;
fn
is_link
(
&
self
)
-
>
bool
;
fn
get_id
(
&
self
)
-
>
Option
<
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
Identifier
>
;
fn
has_class
(
&
self
name
:
&
<
Self
:
:
Impl
as
SelectorImpl
>
:
:
ClassName
)
-
>
bool
;
fn
is_empty
(
&
self
)
-
>
bool
;
fn
is_root
(
&
self
)
-
>
bool
;
}
