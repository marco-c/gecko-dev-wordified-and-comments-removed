use
:
:
gl_context
:
:
GLContextFactory
;
use
:
:
webgl_thread
:
:
{
WebGLExternalImageApi
WebGLExternalImageHandler
WebGLThreadObserver
WebGLThread
}
;
use
canvas_traits
:
:
webgl
:
:
{
WebGLChan
WebGLContextId
WebGLMsg
WebGLPipeline
WebGLReceiver
}
;
use
canvas_traits
:
:
webgl
:
:
{
WebGLSender
WebVRCommand
WebVRRenderHandler
}
;
use
canvas_traits
:
:
webgl
:
:
webgl_channel
;
use
euclid
:
:
Size2D
;
use
std
:
:
marker
:
:
PhantomData
;
use
webrender
;
use
webrender_api
;
pub
struct
WebGLThreads
(
WebGLSender
<
WebGLMsg
>
)
;
impl
WebGLThreads
{
pub
fn
new
(
gl_factory
:
GLContextFactory
webrender_api_sender
:
webrender_api
:
:
RenderApiSender
webvr_compositor
:
Option
<
Box
<
WebVRRenderHandler
>
>
)
-
>
(
WebGLThreads
Box
<
webrender
:
:
ExternalImageHandler
>
)
{
let
channel
=
WebGLThread
:
:
start
(
gl_factory
webrender_api_sender
webvr_compositor
.
map
(
|
c
|
WebVRRenderWrapper
(
c
)
)
PhantomData
)
;
let
external
=
WebGLExternalImageHandler
:
:
new
(
WebGLExternalImages
:
:
new
(
channel
.
clone
(
)
)
)
;
(
WebGLThreads
(
channel
)
Box
:
:
new
(
external
)
)
}
pub
fn
pipeline
(
&
self
)
-
>
WebGLPipeline
{
WebGLPipeline
(
WebGLChan
(
self
.
0
.
clone
(
)
)
)
}
pub
fn
exit
(
&
self
)
-
>
Result
<
(
)
&
'
static
str
>
{
self
.
0
.
send
(
WebGLMsg
:
:
Exit
)
.
map_err
(
|
_
|
"
Failed
to
send
Exit
message
"
)
}
}
struct
WebGLExternalImages
{
webgl_channel
:
WebGLSender
<
WebGLMsg
>
lock_channel
:
(
WebGLSender
<
(
u32
Size2D
<
i32
>
)
>
WebGLReceiver
<
(
u32
Size2D
<
i32
>
)
>
)
}
impl
WebGLExternalImages
{
fn
new
(
channel
:
WebGLSender
<
WebGLMsg
>
)
-
>
Self
{
Self
{
webgl_channel
:
channel
lock_channel
:
webgl_channel
(
)
.
unwrap
(
)
}
}
}
impl
WebGLExternalImageApi
for
WebGLExternalImages
{
fn
lock
(
&
mut
self
ctx_id
:
WebGLContextId
)
-
>
(
u32
Size2D
<
i32
>
)
{
self
.
webgl_channel
.
send
(
WebGLMsg
:
:
Lock
(
ctx_id
self
.
lock_channel
.
0
.
clone
(
)
)
)
.
unwrap
(
)
;
self
.
lock_channel
.
1
.
recv
(
)
.
unwrap
(
)
}
fn
unlock
(
&
mut
self
ctx_id
:
WebGLContextId
)
{
self
.
webgl_channel
.
send
(
WebGLMsg
:
:
Unlock
(
ctx_id
)
)
.
unwrap
(
)
;
}
}
impl
WebGLThreadObserver
for
PhantomData
<
(
)
>
{
fn
on_context_create
(
&
mut
self
ctx_id
:
WebGLContextId
texture_id
:
u32
size
:
Size2D
<
i32
>
)
{
debug
!
(
"
WebGLContext
created
(
ctx_id
:
{
:
?
}
texture_id
:
{
:
?
}
size
:
{
:
?
}
"
ctx_id
texture_id
size
)
;
}
fn
on_context_resize
(
&
mut
self
ctx_id
:
WebGLContextId
texture_id
:
u32
size
:
Size2D
<
i32
>
)
{
debug
!
(
"
WebGLContext
resized
(
ctx_id
:
{
:
?
}
texture_id
:
{
:
?
}
size
:
{
:
?
}
"
ctx_id
texture_id
size
)
;
}
fn
on_context_delete
(
&
mut
self
ctx_id
:
WebGLContextId
)
{
debug
!
(
"
WebGLContext
deleted
(
ctx_id
:
{
:
?
}
)
"
ctx_id
)
;
}
}
struct
WebVRRenderWrapper
(
Box
<
WebVRRenderHandler
>
)
;
impl
WebVRRenderHandler
for
WebVRRenderWrapper
{
fn
handle
(
&
mut
self
command
:
WebVRCommand
texture
:
Option
<
(
u32
Size2D
<
i32
>
)
>
)
{
self
.
0
.
handle
(
command
texture
)
;
}
}
