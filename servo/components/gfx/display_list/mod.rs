use
color
:
:
Color
;
use
render_context
:
:
RenderContext
;
use
text
:
:
glyph
:
:
CharIndex
;
use
text
:
:
TextRun
;
use
azure
:
:
azure
:
:
AzFloat
;
use
collections
:
:
dlist
:
:
{
mod
DList
}
;
use
geom
:
:
{
Point2D
Rect
SideOffsets2D
Size2D
Matrix2D
}
;
use
libc
:
:
uintptr_t
;
use
servo_net
:
:
image
:
:
base
:
:
Image
;
use
servo_util
:
:
dlist
as
servo_dlist
;
use
servo_util
:
:
geometry
:
:
Au
;
use
servo_util
:
:
range
:
:
Range
;
use
std
:
:
fmt
;
use
std
:
:
slice
:
:
Items
;
use
style
:
:
computed_values
:
:
border_style
;
use
sync
:
:
Arc
;
pub
use
azure
:
:
azure_hl
:
:
GradientStop
;
pub
mod
optimizer
;
#
[
deriving
(
Clone
PartialEq
)
]
pub
struct
OpaqueNode
(
pub
uintptr_t
)
;
impl
OpaqueNode
{
pub
fn
id
(
&
self
)
-
>
uintptr_t
{
let
OpaqueNode
(
pointer
)
=
*
self
;
pointer
}
}
#
[
deriving
(
Clone
PartialEq
Show
)
]
pub
enum
StackingLevel
{
BackgroundAndBordersStackingLevel
BlockBackgroundsAndBordersStackingLevel
FloatStackingLevel
ContentStackingLevel
PositionedDescendantStackingLevel
(
i32
)
}
impl
StackingLevel
{
#
[
inline
]
pub
fn
from_background_and_border_level
(
level
:
BackgroundAndBorderLevel
)
-
>
StackingLevel
{
match
level
{
RootOfStackingContextLevel
=
>
BackgroundAndBordersStackingLevel
BlockLevel
=
>
BlockBackgroundsAndBordersStackingLevel
ContentLevel
=
>
ContentStackingLevel
}
}
}
struct
StackingContext
{
pub
background_and_borders
:
DisplayList
pub
block_backgrounds_and_borders
:
DisplayList
pub
floats
:
DisplayList
pub
content
:
DisplayList
pub
positioned_descendants
:
Vec
<
(
i32
DisplayList
)
>
}
impl
StackingContext
{
#
[
inline
]
fn
new
(
)
-
>
StackingContext
{
StackingContext
{
background_and_borders
:
DisplayList
:
:
new
(
)
block_backgrounds_and_borders
:
DisplayList
:
:
new
(
)
floats
:
DisplayList
:
:
new
(
)
content
:
DisplayList
:
:
new
(
)
positioned_descendants
:
Vec
:
:
new
(
)
}
}
fn
init_from_list
(
&
mut
self
list
:
&
mut
DisplayList
)
{
while
!
list
.
list
.
is_empty
(
)
{
let
mut
head
=
DisplayList
:
:
from_list
(
servo_dlist
:
:
split
(
&
mut
list
.
list
)
)
;
match
head
.
front
(
)
.
unwrap
(
)
.
base
(
)
.
level
{
BackgroundAndBordersStackingLevel
=
>
{
self
.
background_and_borders
.
append_from
(
&
mut
head
)
}
BlockBackgroundsAndBordersStackingLevel
=
>
{
self
.
block_backgrounds_and_borders
.
append_from
(
&
mut
head
)
}
FloatStackingLevel
=
>
self
.
floats
.
append_from
(
&
mut
head
)
ContentStackingLevel
=
>
self
.
content
.
append_from
(
&
mut
head
)
PositionedDescendantStackingLevel
(
z_index
)
=
>
{
match
self
.
positioned_descendants
.
iter_mut
(
)
.
find
(
|
&
&
(
z
_
)
|
z_index
=
=
z
)
{
Some
(
&
(
_
ref
mut
my_list
)
)
=
>
{
my_list
.
append_from
(
&
mut
head
)
;
continue
}
None
=
>
{
}
}
self
.
positioned_descendants
.
push
(
(
z_index
head
)
)
}
}
}
}
}
pub
enum
BackgroundAndBorderLevel
{
RootOfStackingContextLevel
BlockLevel
ContentLevel
}
#
[
deriving
(
Clone
Show
)
]
pub
struct
DisplayList
{
pub
list
:
DList
<
DisplayItem
>
}
pub
enum
DisplayListIterator
<
'
a
>
{
EmptyDisplayListIterator
ParentDisplayListIterator
(
Items
<
'
a
DisplayList
>
)
}
impl
<
'
a
>
Iterator
<
&
'
a
DisplayList
>
for
DisplayListIterator
<
'
a
>
{
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
&
'
a
DisplayList
>
{
match
*
self
{
EmptyDisplayListIterator
=
>
None
ParentDisplayListIterator
(
ref
mut
subiterator
)
=
>
subiterator
.
next
(
)
}
}
}
impl
DisplayList
{
#
[
inline
]
pub
fn
new
(
)
-
>
DisplayList
{
DisplayList
{
list
:
DList
:
:
new
(
)
}
}
fn
from_list
(
list
:
DList
<
DisplayItem
>
)
-
>
DisplayList
{
DisplayList
{
list
:
list
}
}
#
[
inline
]
pub
fn
push
(
&
mut
self
item
:
DisplayItem
)
{
self
.
list
.
push_back
(
item
)
;
}
#
[
inline
]
pub
fn
append_from
(
&
mut
self
other
:
&
mut
DisplayList
)
{
servo_dlist
:
:
append_from
(
&
mut
self
.
list
&
mut
other
.
list
)
}
#
[
inline
]
fn
front
(
&
self
)
-
>
Option
<
&
DisplayItem
>
{
self
.
list
.
front
(
)
}
pub
fn
debug
(
&
self
)
{
for
item
in
self
.
list
.
iter
(
)
{
item
.
debug_with_level
(
0
)
;
}
}
pub
fn
draw_into_context
(
&
self
render_context
:
&
mut
RenderContext
current_transform
:
&
Matrix2D
<
AzFloat
>
current_clip_stack
:
&
mut
Vec
<
Rect
<
Au
>
>
)
{
debug
!
(
"
Beginning
display
list
.
"
)
;
for
item
in
self
.
list
.
iter
(
)
{
item
.
draw_into_context
(
render_context
current_transform
current_clip_stack
)
}
debug
!
(
"
Ending
display
list
.
"
)
;
}
#
[
inline
]
pub
fn
iter
<
'
a
>
(
&
'
a
self
)
-
>
DisplayItemIterator
<
'
a
>
{
ParentDisplayItemIterator
(
self
.
list
.
iter
(
)
)
}
pub
fn
flatten
(
&
mut
self
resulting_level
:
StackingLevel
)
{
if
self
.
list
.
len
(
)
=
=
0
{
return
}
if
self
.
list
.
len
(
)
=
=
1
{
self
.
set_stacking_level
(
resulting_level
)
;
return
}
let
mut
stacking_context
=
StackingContext
:
:
new
(
)
;
stacking_context
.
init_from_list
(
self
)
;
debug_assert
!
(
self
.
list
.
is_empty
(
)
)
;
self
.
append_from
(
&
mut
stacking_context
.
background_and_borders
)
;
stacking_context
.
positioned_descendants
.
sort_by
(
|
&
(
z_index_a
_
)
&
(
z_index_b
_
)
|
{
z_index_a
.
cmp
(
&
z_index_b
)
}
)
;
for
&
(
ref
mut
z_index
ref
mut
list
)
in
stacking_context
.
positioned_descendants
.
iter_mut
(
)
{
if
*
z_index
<
0
{
self
.
append_from
(
list
)
}
}
self
.
append_from
(
&
mut
stacking_context
.
block_backgrounds_and_borders
)
;
self
.
append_from
(
&
mut
stacking_context
.
floats
)
;
self
.
append_from
(
&
mut
stacking_context
.
content
)
;
for
&
(
ref
mut
z_index
ref
mut
list
)
in
stacking_context
.
positioned_descendants
.
iter_mut
(
)
{
if
*
z_index
>
=
0
{
self
.
append_from
(
list
)
}
}
self
.
set_stacking_level
(
resulting_level
)
;
}
fn
set_stacking_level
(
&
mut
self
new_level
:
StackingLevel
)
{
for
item
in
self
.
list
.
iter_mut
(
)
{
item
.
mut_base
(
)
.
level
=
new_level
;
}
}
}
#
[
deriving
(
Clone
)
]
pub
enum
DisplayItem
{
SolidColorDisplayItemClass
(
Box
<
SolidColorDisplayItem
>
)
TextDisplayItemClass
(
Box
<
TextDisplayItem
>
)
ImageDisplayItemClass
(
Box
<
ImageDisplayItem
>
)
BorderDisplayItemClass
(
Box
<
BorderDisplayItem
>
)
GradientDisplayItemClass
(
Box
<
GradientDisplayItem
>
)
LineDisplayItemClass
(
Box
<
LineDisplayItem
>
)
PseudoDisplayItemClass
(
Box
<
BaseDisplayItem
>
)
}
#
[
deriving
(
Clone
)
]
pub
struct
BaseDisplayItem
{
pub
bounds
:
Rect
<
Au
>
pub
node
:
OpaqueNode
pub
level
:
StackingLevel
pub
clip_rect
:
Rect
<
Au
>
}
impl
BaseDisplayItem
{
#
[
inline
(
always
)
]
pub
fn
new
(
bounds
:
Rect
<
Au
>
node
:
OpaqueNode
level
:
StackingLevel
clip_rect
:
Rect
<
Au
>
)
-
>
BaseDisplayItem
{
BaseDisplayItem
{
bounds
:
bounds
node
:
node
level
:
level
clip_rect
:
clip_rect
}
}
}
#
[
deriving
(
Clone
)
]
pub
struct
SolidColorDisplayItem
{
pub
base
:
BaseDisplayItem
pub
color
:
Color
}
#
[
deriving
(
Clone
)
]
pub
struct
TextDisplayItem
{
pub
base
:
BaseDisplayItem
pub
text_run
:
Arc
<
Box
<
TextRun
>
>
pub
range
:
Range
<
CharIndex
>
pub
text_color
:
Color
pub
baseline_origin
:
Point2D
<
Au
>
pub
orientation
:
TextOrientation
}
#
[
deriving
(
Clone
Eq
PartialEq
)
]
pub
enum
TextOrientation
{
Upright
SidewaysLeft
SidewaysRight
}
#
[
deriving
(
Clone
)
]
pub
struct
ImageDisplayItem
{
pub
base
:
BaseDisplayItem
pub
image
:
Arc
<
Box
<
Image
>
>
pub
stretch_size
:
Size2D
<
Au
>
}
#
[
deriving
(
Clone
)
]
pub
struct
GradientDisplayItem
{
pub
base
:
BaseDisplayItem
pub
start_point
:
Point2D
<
Au
>
pub
end_point
:
Point2D
<
Au
>
pub
stops
:
Vec
<
GradientStop
>
}
#
[
deriving
(
Clone
)
]
pub
struct
BorderDisplayItem
{
pub
base
:
BaseDisplayItem
pub
border
:
SideOffsets2D
<
Au
>
pub
color
:
SideOffsets2D
<
Color
>
pub
style
:
SideOffsets2D
<
border_style
:
:
T
>
}
#
[
deriving
(
Clone
)
]
pub
struct
LineDisplayItem
{
pub
base
:
BaseDisplayItem
pub
color
:
Color
pub
style
:
border_style
:
:
T
}
pub
enum
DisplayItemIterator
<
'
a
>
{
EmptyDisplayItemIterator
ParentDisplayItemIterator
(
dlist
:
:
Items
<
'
a
DisplayItem
>
)
}
impl
<
'
a
>
Iterator
<
&
'
a
DisplayItem
>
for
DisplayItemIterator
<
'
a
>
{
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
&
'
a
DisplayItem
>
{
match
*
self
{
EmptyDisplayItemIterator
=
>
None
ParentDisplayItemIterator
(
ref
mut
subiterator
)
=
>
subiterator
.
next
(
)
}
}
}
impl
DisplayItem
{
fn
draw_into_context
(
&
self
render_context
:
&
mut
RenderContext
current_transform
:
&
Matrix2D
<
AzFloat
>
current_clip_stack
:
&
mut
Vec
<
Rect
<
Au
>
>
)
{
assert
!
(
self
.
base
(
)
.
level
=
=
ContentStackingLevel
)
;
let
clip_rect
=
&
self
.
base
(
)
.
clip_rect
;
if
current_clip_stack
.
len
(
)
=
=
0
|
|
current_clip_stack
.
last
(
)
.
unwrap
(
)
!
=
clip_rect
{
while
current_clip_stack
.
len
(
)
!
=
0
{
render_context
.
draw_pop_clip
(
)
;
drop
(
current_clip_stack
.
pop
(
)
)
;
}
render_context
.
draw_push_clip
(
clip_rect
)
;
current_clip_stack
.
push
(
*
clip_rect
)
;
}
match
*
self
{
SolidColorDisplayItemClass
(
ref
solid_color
)
=
>
{
render_context
.
draw_solid_color
(
&
solid_color
.
base
.
bounds
solid_color
.
color
)
}
TextDisplayItemClass
(
ref
text
)
=
>
{
debug
!
(
"
Drawing
text
at
{
}
.
"
text
.
base
.
bounds
)
;
render_context
.
draw_text
(
&
*
*
text
current_transform
)
;
}
ImageDisplayItemClass
(
ref
image_item
)
=
>
{
debug
!
(
"
Drawing
image
at
{
}
.
"
image_item
.
base
.
bounds
)
;
let
mut
y_offset
=
Au
(
0
)
;
while
y_offset
<
image_item
.
base
.
bounds
.
size
.
height
{
let
mut
x_offset
=
Au
(
0
)
;
while
x_offset
<
image_item
.
base
.
bounds
.
size
.
width
{
let
mut
bounds
=
image_item
.
base
.
bounds
;
bounds
.
origin
.
x
=
bounds
.
origin
.
x
+
x_offset
;
bounds
.
origin
.
y
=
bounds
.
origin
.
y
+
y_offset
;
bounds
.
size
=
image_item
.
stretch_size
;
render_context
.
draw_image
(
bounds
image_item
.
image
.
clone
(
)
)
;
x_offset
=
x_offset
+
image_item
.
stretch_size
.
width
;
}
y_offset
=
y_offset
+
image_item
.
stretch_size
.
height
;
}
}
BorderDisplayItemClass
(
ref
border
)
=
>
{
render_context
.
draw_border
(
&
border
.
base
.
bounds
border
.
border
border
.
color
border
.
style
)
}
GradientDisplayItemClass
(
ref
gradient
)
=
>
{
render_context
.
draw_linear_gradient
(
&
gradient
.
base
.
bounds
&
gradient
.
start_point
&
gradient
.
end_point
gradient
.
stops
.
as_slice
(
)
)
;
}
LineDisplayItemClass
(
ref
line
)
=
>
{
render_context
.
draw_line
(
&
line
.
base
.
bounds
line
.
color
line
.
style
)
}
PseudoDisplayItemClass
(
_
)
=
>
{
}
}
}
pub
fn
base
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
BaseDisplayItem
{
match
*
self
{
SolidColorDisplayItemClass
(
ref
solid_color
)
=
>
&
solid_color
.
base
TextDisplayItemClass
(
ref
text
)
=
>
&
text
.
base
ImageDisplayItemClass
(
ref
image_item
)
=
>
&
image_item
.
base
BorderDisplayItemClass
(
ref
border
)
=
>
&
border
.
base
GradientDisplayItemClass
(
ref
gradient
)
=
>
&
gradient
.
base
LineDisplayItemClass
(
ref
line
)
=
>
&
line
.
base
PseudoDisplayItemClass
(
ref
base
)
=
>
&
*
*
base
}
}
pub
fn
mut_base
<
'
a
>
(
&
'
a
mut
self
)
-
>
&
'
a
mut
BaseDisplayItem
{
match
*
self
{
SolidColorDisplayItemClass
(
ref
mut
solid_color
)
=
>
&
mut
solid_color
.
base
TextDisplayItemClass
(
ref
mut
text
)
=
>
&
mut
text
.
base
ImageDisplayItemClass
(
ref
mut
image_item
)
=
>
&
mut
image_item
.
base
BorderDisplayItemClass
(
ref
mut
border
)
=
>
&
mut
border
.
base
GradientDisplayItemClass
(
ref
mut
gradient
)
=
>
&
mut
gradient
.
base
LineDisplayItemClass
(
ref
mut
line
)
=
>
&
mut
line
.
base
PseudoDisplayItemClass
(
ref
mut
base
)
=
>
&
mut
*
*
base
}
}
pub
fn
bounds
(
&
self
)
-
>
Rect
<
Au
>
{
self
.
base
(
)
.
bounds
}
pub
fn
debug_with_level
(
&
self
level
:
uint
)
{
let
mut
indent
=
String
:
:
new
(
)
;
for
_
in
range
(
0
level
)
{
indent
.
push_str
(
"
|
"
)
}
println
!
(
"
{
}
+
{
}
"
indent
self
)
;
}
}
impl
fmt
:
:
Show
for
DisplayItem
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
{
}
{
}
(
{
:
x
}
)
[
{
}
]
"
match
*
self
{
SolidColorDisplayItemClass
(
_
)
=
>
"
SolidColor
"
TextDisplayItemClass
(
_
)
=
>
"
Text
"
ImageDisplayItemClass
(
_
)
=
>
"
Image
"
BorderDisplayItemClass
(
_
)
=
>
"
Border
"
GradientDisplayItemClass
(
_
)
=
>
"
Gradient
"
LineDisplayItemClass
(
_
)
=
>
"
Line
"
PseudoDisplayItemClass
(
_
)
=
>
"
Pseudo
"
}
self
.
base
(
)
.
bounds
self
.
base
(
)
.
node
.
id
(
)
self
.
base
(
)
.
level
)
}
}
