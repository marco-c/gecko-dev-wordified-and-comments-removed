use
app_units
:
:
Au
;
use
euclid
:
:
{
Matrix4D
Point2D
Rect
Size2D
}
;
use
euclid
:
:
num
:
:
{
One
Zero
}
;
use
euclid
:
:
rect
:
:
TypedRect
;
use
euclid
:
:
side_offsets
:
:
SideOffsets2D
;
use
gfx_traits
:
:
{
ScrollPolicy
ScrollRootId
StackingContextId
}
;
use
gfx_traits
:
:
print_tree
:
:
PrintTree
;
use
ipc_channel
:
:
ipc
:
:
IpcSharedMemory
;
use
msg
:
:
constellation_msg
:
:
PipelineId
;
use
net_traits
:
:
image
:
:
base
:
:
{
Image
PixelFormat
}
;
use
range
:
:
Range
;
use
std
:
:
cmp
:
:
{
self
Ordering
}
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
fmt
;
use
std
:
:
sync
:
:
Arc
;
use
style
:
:
computed_values
:
:
{
border_style
filter
image_rendering
mix_blend_mode
}
;
use
style_traits
:
:
cursor
:
:
Cursor
;
use
text
:
:
TextRun
;
use
text
:
:
glyph
:
:
ByteIndex
;
use
util
:
:
geometry
:
:
{
self
max_rect
}
;
use
webrender_traits
:
:
{
self
ColorF
GradientStop
WebGLContextId
}
;
pub
use
style
:
:
dom
:
:
OpaqueNode
;
pub
static
BLUR_INFLATION_FACTOR
:
i32
=
3
;
#
[
derive
(
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
DisplayList
{
pub
list
:
Vec
<
DisplayItem
>
}
impl
DisplayList
{
pub
fn
hit_test
(
&
self
translated_point
:
&
Point2D
<
Au
>
client_point
:
&
Point2D
<
Au
>
scroll_offsets
:
&
ScrollOffsetMap
)
-
>
Vec
<
DisplayItemMetadata
>
{
let
mut
result
=
Vec
:
:
new
(
)
;
let
mut
traversal
=
DisplayListTraversal
:
:
new
(
self
)
;
self
.
hit_test_contents
(
&
mut
traversal
translated_point
client_point
scroll_offsets
&
mut
result
)
;
result
}
pub
fn
hit_test_contents
<
'
a
>
(
&
self
traversal
:
&
mut
DisplayListTraversal
<
'
a
>
translated_point
:
&
Point2D
<
Au
>
client_point
:
&
Point2D
<
Au
>
scroll_offsets
:
&
ScrollOffsetMap
result
:
&
mut
Vec
<
DisplayItemMetadata
>
)
{
while
let
Some
(
item
)
=
traversal
.
next
(
)
{
match
item
{
&
DisplayItem
:
:
PushStackingContext
(
ref
stacking_context_item
)
=
>
{
self
.
hit_test_stacking_context
(
traversal
&
stacking_context_item
.
stacking_context
translated_point
client_point
scroll_offsets
result
)
;
}
&
DisplayItem
:
:
PopStackingContext
(
_
)
=
>
return
_
=
>
{
if
let
Some
(
meta
)
=
item
.
hit_test
(
*
translated_point
)
{
result
.
push
(
meta
)
;
}
}
}
}
}
fn
hit_test_stacking_context
<
'
a
>
(
&
self
traversal
:
&
mut
DisplayListTraversal
<
'
a
>
stacking_context
:
&
StackingContext
translated_point
:
&
Point2D
<
Au
>
client_point
:
&
Point2D
<
Au
>
scroll_offsets
:
&
ScrollOffsetMap
result
:
&
mut
Vec
<
DisplayItemMetadata
>
)
{
debug_assert
!
(
stacking_context
.
context_type
=
=
StackingContextType
:
:
Real
)
;
let
is_fixed
=
stacking_context
.
scroll_policy
=
=
ScrollPolicy
:
:
FixedPosition
;
let
mut
translated_point
=
if
is_fixed
{
*
client_point
}
else
{
let
point
=
*
translated_point
-
stacking_context
.
bounds
.
origin
;
let
inv_transform
=
stacking_context
.
transform
.
inverse
(
)
.
unwrap
(
)
;
let
frac_point
=
inv_transform
.
transform_point
(
&
Point2D
:
:
new
(
point
.
x
.
to_f32_px
(
)
point
.
y
.
to_f32_px
(
)
)
)
;
Point2D
:
:
new
(
Au
:
:
from_f32_px
(
frac_point
.
x
)
Au
:
:
from_f32_px
(
frac_point
.
y
)
)
}
;
if
!
is_fixed
&
&
stacking_context
.
id
!
=
StackingContextId
:
:
root
(
)
{
if
let
Some
(
scroll_root_id
)
=
stacking_context
.
overflow_scroll_id
{
if
let
Some
(
scroll_offset
)
=
scroll_offsets
.
get
(
&
scroll_root_id
)
{
translated_point
.
x
-
=
Au
:
:
from_f32_px
(
scroll_offset
.
x
)
;
translated_point
.
y
-
=
Au
:
:
from_f32_px
(
scroll_offset
.
y
)
;
}
}
}
self
.
hit_test_contents
(
traversal
&
translated_point
client_point
scroll_offsets
result
)
;
}
pub
fn
print
(
&
self
)
{
let
mut
print_tree
=
PrintTree
:
:
new
(
"
Display
List
"
.
to_owned
(
)
)
;
self
.
print_with_tree
(
&
mut
print_tree
)
;
}
pub
fn
print_with_tree
(
&
self
print_tree
:
&
mut
PrintTree
)
{
print_tree
.
new_level
(
"
Items
"
.
to_owned
(
)
)
;
for
item
in
&
self
.
list
{
print_tree
.
add_item
(
format
!
(
"
{
:
?
}
StackingContext
:
{
:
?
}
"
item
item
.
base
(
)
.
stacking_context_id
)
)
;
}
print_tree
.
end_level
(
)
;
}
}
pub
struct
DisplayListTraversal
<
'
a
>
{
pub
display_list
:
&
'
a
DisplayList
pub
next_item_index
:
usize
pub
first_item_index
:
usize
pub
last_item_index
:
usize
}
impl
<
'
a
>
DisplayListTraversal
<
'
a
>
{
pub
fn
new
(
display_list
:
&
'
a
DisplayList
)
-
>
DisplayListTraversal
{
DisplayListTraversal
{
display_list
:
display_list
next_item_index
:
0
first_item_index
:
0
last_item_index
:
display_list
.
list
.
len
(
)
}
}
pub
fn
new_partial
(
display_list
:
&
'
a
DisplayList
stacking_context_id
:
StackingContextId
start
:
usize
end
:
usize
)
-
>
DisplayListTraversal
{
debug_assert
!
(
start
<
=
end
)
;
debug_assert
!
(
display_list
.
list
.
len
(
)
>
start
)
;
debug_assert
!
(
display_list
.
list
.
len
(
)
>
end
)
;
let
stacking_context_start
=
display_list
.
list
[
0
.
.
start
]
.
iter
(
)
.
rposition
(
|
item
|
match
item
{
&
DisplayItem
:
:
PushStackingContext
(
ref
item
)
=
>
item
.
stacking_context
.
id
=
=
stacking_context_id
_
=
>
false
}
)
.
unwrap_or
(
start
)
;
debug_assert
!
(
stacking_context_start
<
=
start
)
;
DisplayListTraversal
{
display_list
:
display_list
next_item_index
:
stacking_context_start
first_item_index
:
start
last_item_index
:
end
+
1
}
}
pub
fn
previous_item_id
(
&
self
)
-
>
usize
{
self
.
next_item_index
-
1
}
pub
fn
skip_to_end_of_stacking_context
(
&
mut
self
id
:
StackingContextId
)
{
self
.
next_item_index
=
self
.
display_list
.
list
[
self
.
next_item_index
.
.
]
.
iter
(
)
.
position
(
|
item
|
{
match
item
{
&
DisplayItem
:
:
PopStackingContext
(
ref
item
)
=
>
item
.
stacking_context_id
=
=
id
_
=
>
false
}
}
)
.
unwrap_or
(
self
.
display_list
.
list
.
len
(
)
)
;
debug_assert
!
(
self
.
next_item_index
<
self
.
last_item_index
)
;
}
}
impl
<
'
a
>
Iterator
for
DisplayListTraversal
<
'
a
>
{
type
Item
=
&
'
a
DisplayItem
;
fn
next
(
&
mut
self
)
-
>
Option
<
&
'
a
DisplayItem
>
{
while
self
.
next_item_index
<
self
.
last_item_index
{
debug_assert
!
(
self
.
next_item_index
<
=
self
.
last_item_index
)
;
let
reached_first_item
=
self
.
next_item_index
>
=
self
.
first_item_index
;
let
item
=
&
self
.
display_list
.
list
[
self
.
next_item_index
]
;
self
.
next_item_index
+
=
1
;
if
reached_first_item
{
return
Some
(
item
)
}
match
item
{
&
DisplayItem
:
:
PushStackingContext
(
_
)
|
&
DisplayItem
:
:
PopStackingContext
(
_
)
=
>
return
Some
(
item
)
_
=
>
{
}
}
}
None
}
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
Eq
HeapSizeOf
Ord
PartialEq
PartialOrd
RustcEncodable
Serialize
)
]
pub
enum
DisplayListSection
{
BackgroundAndBorders
BlockBackgroundsAndBorders
Content
Outlines
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
Eq
HeapSizeOf
Ord
PartialEq
PartialOrd
RustcEncodable
Serialize
)
]
pub
enum
StackingContextType
{
Real
PseudoPositioned
PseudoFloat
}
#
[
derive
(
Clone
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
StackingContext
{
pub
id
:
StackingContextId
pub
context_type
:
StackingContextType
pub
bounds
:
Rect
<
Au
>
pub
overflow
:
Rect
<
Au
>
pub
z_index
:
i32
pub
filters
:
filter
:
:
T
pub
blend_mode
:
mix_blend_mode
:
:
T
pub
transform
:
Matrix4D
<
f32
>
pub
perspective
:
Matrix4D
<
f32
>
pub
establishes_3d_context
:
bool
pub
scroll_policy
:
ScrollPolicy
pub
children
:
Vec
<
StackingContext
>
pub
overflow_scroll_id
:
Option
<
ScrollRootId
>
}
impl
StackingContext
{
#
[
inline
]
pub
fn
new
(
id
:
StackingContextId
context_type
:
StackingContextType
bounds
:
&
Rect
<
Au
>
overflow
:
&
Rect
<
Au
>
z_index
:
i32
filters
:
filter
:
:
T
blend_mode
:
mix_blend_mode
:
:
T
transform
:
Matrix4D
<
f32
>
perspective
:
Matrix4D
<
f32
>
establishes_3d_context
:
bool
scroll_policy
:
ScrollPolicy
scroll_root_id
:
Option
<
ScrollRootId
>
)
-
>
StackingContext
{
StackingContext
{
id
:
id
context_type
:
context_type
bounds
:
*
bounds
overflow
:
*
overflow
z_index
:
z_index
filters
:
filters
blend_mode
:
blend_mode
transform
:
transform
perspective
:
perspective
establishes_3d_context
:
establishes_3d_context
scroll_policy
:
scroll_policy
children
:
Vec
:
:
new
(
)
overflow_scroll_id
:
scroll_root_id
}
}
#
[
inline
]
pub
fn
root
(
)
-
>
StackingContext
{
StackingContext
:
:
new
(
StackingContextId
:
:
new
(
0
)
StackingContextType
:
:
Real
&
Rect
:
:
zero
(
)
&
Rect
:
:
zero
(
)
0
filter
:
:
T
:
:
new
(
Vec
:
:
new
(
)
)
mix_blend_mode
:
:
T
:
:
normal
Matrix4D
:
:
identity
(
)
Matrix4D
:
:
identity
(
)
true
ScrollPolicy
:
:
Scrollable
None
)
}
pub
fn
add_child
(
&
mut
self
mut
child
:
StackingContext
)
{
child
.
update_overflow_for_all_children
(
)
;
self
.
children
.
push
(
child
)
;
}
pub
fn
child_at_mut
(
&
mut
self
index
:
usize
)
-
>
&
mut
StackingContext
{
&
mut
self
.
children
[
index
]
}
pub
fn
children
(
&
self
)
-
>
&
[
StackingContext
]
{
&
self
.
children
}
fn
update_overflow_for_all_children
(
&
mut
self
)
{
for
child
in
self
.
children
.
iter
(
)
{
if
self
.
context_type
=
=
StackingContextType
:
:
Real
&
&
child
.
context_type
=
=
StackingContextType
:
:
Real
{
let
overflow
=
child
.
overflow_rect_in_parent_space
(
)
;
self
.
overflow
=
self
.
overflow
.
union
(
&
overflow
)
;
}
}
}
fn
overflow_rect_in_parent_space
(
&
self
)
-
>
Rect
<
Au
>
{
let
origin_x
=
self
.
bounds
.
origin
.
x
.
to_f32_px
(
)
;
let
origin_y
=
self
.
bounds
.
origin
.
y
.
to_f32_px
(
)
;
let
transform
=
Matrix4D
:
:
identity
(
)
.
pre_translated
(
origin_x
origin_y
0
.
0
)
.
pre_mul
(
&
self
.
transform
)
;
let
transform_2d
=
transform
.
to_2d
(
)
;
let
overflow
=
geometry
:
:
au_rect_to_f32_rect
(
self
.
overflow
)
;
let
overflow
=
transform_2d
.
transform_rect
(
&
overflow
)
;
geometry
:
:
f32_rect_to_au_rect
(
overflow
)
}
pub
fn
print_with_tree
(
&
self
print_tree
:
&
mut
PrintTree
)
{
print_tree
.
new_level
(
format
!
(
"
{
:
?
}
"
self
)
)
;
for
kid
in
self
.
children
(
)
{
kid
.
print_with_tree
(
print_tree
)
;
}
print_tree
.
end_level
(
)
;
}
pub
fn
to_display_list_items
(
self
)
-
>
(
DisplayItem
DisplayItem
)
{
let
mut
base_item
=
BaseDisplayItem
:
:
empty
(
)
;
base_item
.
stacking_context_id
=
self
.
id
;
let
pop_item
=
DisplayItem
:
:
PopStackingContext
(
Box
:
:
new
(
PopStackingContextItem
{
base
:
base_item
.
clone
(
)
stacking_context_id
:
self
.
id
}
)
)
;
let
push_item
=
DisplayItem
:
:
PushStackingContext
(
Box
:
:
new
(
PushStackingContextItem
{
base
:
base_item
stacking_context
:
self
}
)
)
;
(
push_item
pop_item
)
}
}
impl
Ord
for
StackingContext
{
fn
cmp
(
&
self
other
:
&
Self
)
-
>
Ordering
{
if
self
.
z_index
!
=
0
|
|
other
.
z_index
!
=
0
{
return
self
.
z_index
.
cmp
(
&
other
.
z_index
)
;
}
match
(
self
.
context_type
other
.
context_type
)
{
(
StackingContextType
:
:
PseudoFloat
StackingContextType
:
:
PseudoFloat
)
=
>
Ordering
:
:
Equal
(
StackingContextType
:
:
PseudoFloat
_
)
=
>
Ordering
:
:
Less
(
_
StackingContextType
:
:
PseudoFloat
)
=
>
Ordering
:
:
Greater
(
_
_
)
=
>
Ordering
:
:
Equal
}
}
}
impl
PartialOrd
for
StackingContext
{
fn
partial_cmp
(
&
self
other
:
&
Self
)
-
>
Option
<
Ordering
>
{
Some
(
self
.
cmp
(
other
)
)
}
}
impl
Eq
for
StackingContext
{
}
impl
PartialEq
for
StackingContext
{
fn
eq
(
&
self
other
:
&
Self
)
-
>
bool
{
self
.
id
=
=
other
.
id
}
}
impl
fmt
:
:
Debug
for
StackingContext
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
let
type_string
=
if
self
.
context_type
=
=
StackingContextType
:
:
Real
{
"
StackingContext
"
}
else
{
"
Pseudo
-
StackingContext
"
}
;
let
scrollable_string
=
if
self
.
overflow_scroll_id
.
is_some
(
)
{
"
(
scrolls
overflow
area
)
"
}
else
{
"
"
}
;
write
!
(
f
"
{
}
{
}
at
{
:
?
}
with
overflow
{
:
?
}
:
{
:
?
}
"
type_string
scrollable_string
self
.
bounds
self
.
overflow
self
.
id
)
}
}
#
[
derive
(
Clone
Deserialize
HeapSizeOf
Serialize
)
]
pub
enum
DisplayItem
{
SolidColor
(
Box
<
SolidColorDisplayItem
>
)
Text
(
Box
<
TextDisplayItem
>
)
Image
(
Box
<
ImageDisplayItem
>
)
WebGL
(
Box
<
WebGLDisplayItem
>
)
Border
(
Box
<
BorderDisplayItem
>
)
Gradient
(
Box
<
GradientDisplayItem
>
)
Line
(
Box
<
LineDisplayItem
>
)
BoxShadow
(
Box
<
BoxShadowDisplayItem
>
)
Iframe
(
Box
<
IframeDisplayItem
>
)
PushStackingContext
(
Box
<
PushStackingContextItem
>
)
PopStackingContext
(
Box
<
PopStackingContextItem
>
)
}
#
[
derive
(
Clone
Deserialize
HeapSizeOf
Serialize
)
]
pub
struct
BaseDisplayItem
{
pub
bounds
:
Rect
<
Au
>
pub
metadata
:
DisplayItemMetadata
pub
clip
:
ClippingRegion
pub
section
:
DisplayListSection
pub
stacking_context_id
:
StackingContextId
}
impl
BaseDisplayItem
{
#
[
inline
(
always
)
]
pub
fn
new
(
bounds
:
&
Rect
<
Au
>
metadata
:
DisplayItemMetadata
clip
:
&
ClippingRegion
section
:
DisplayListSection
stacking_context_id
:
StackingContextId
)
-
>
BaseDisplayItem
{
BaseDisplayItem
{
bounds
:
*
bounds
metadata
:
metadata
clip
:
if
clip
.
does_not_clip_rect
(
&
bounds
)
{
ClippingRegion
:
:
max
(
)
}
else
{
(
*
clip
)
.
clone
(
)
}
section
:
section
stacking_context_id
:
stacking_context_id
}
}
#
[
inline
(
always
)
]
pub
fn
empty
(
)
-
>
BaseDisplayItem
{
BaseDisplayItem
{
bounds
:
TypedRect
:
:
zero
(
)
metadata
:
DisplayItemMetadata
{
node
:
OpaqueNode
(
0
)
pointing
:
None
}
clip
:
ClippingRegion
:
:
max
(
)
section
:
DisplayListSection
:
:
Content
stacking_context_id
:
StackingContextId
:
:
root
(
)
}
}
}
#
[
derive
(
Clone
PartialEq
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
ClippingRegion
{
pub
main
:
Rect
<
Au
>
pub
complex
:
Vec
<
ComplexClippingRegion
>
}
#
[
derive
(
Clone
PartialEq
Debug
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
ComplexClippingRegion
{
pub
rect
:
Rect
<
Au
>
pub
radii
:
BorderRadii
<
Au
>
}
impl
ClippingRegion
{
#
[
inline
]
pub
fn
empty
(
)
-
>
ClippingRegion
{
ClippingRegion
{
main
:
Rect
:
:
zero
(
)
complex
:
Vec
:
:
new
(
)
}
}
#
[
inline
]
pub
fn
max
(
)
-
>
ClippingRegion
{
ClippingRegion
{
main
:
max_rect
(
)
complex
:
Vec
:
:
new
(
)
}
}
#
[
inline
]
pub
fn
from_rect
(
rect
:
&
Rect
<
Au
>
)
-
>
ClippingRegion
{
ClippingRegion
{
main
:
*
rect
complex
:
Vec
:
:
new
(
)
}
}
#
[
inline
]
pub
fn
intersect_rect
(
&
mut
self
rect
:
&
Rect
<
Au
>
)
{
self
.
main
=
self
.
main
.
intersection
(
rect
)
.
unwrap_or
(
Rect
:
:
zero
(
)
)
}
#
[
inline
]
pub
fn
might_be_nonempty
(
&
self
)
-
>
bool
{
!
self
.
main
.
is_empty
(
)
}
#
[
inline
]
pub
fn
might_intersect_point
(
&
self
point
:
&
Point2D
<
Au
>
)
-
>
bool
{
self
.
main
.
contains
(
point
)
&
&
self
.
complex
.
iter
(
)
.
all
(
|
complex
|
complex
.
rect
.
contains
(
point
)
)
}
#
[
inline
]
pub
fn
might_intersect_rect
(
&
self
rect
:
&
Rect
<
Au
>
)
-
>
bool
{
self
.
main
.
intersects
(
rect
)
&
&
self
.
complex
.
iter
(
)
.
all
(
|
complex
|
complex
.
rect
.
intersects
(
rect
)
)
}
#
[
inline
]
pub
fn
does_not_clip_rect
(
&
self
rect
:
&
Rect
<
Au
>
)
-
>
bool
{
self
.
main
.
contains
(
&
rect
.
origin
)
&
&
self
.
main
.
contains
(
&
rect
.
bottom_right
(
)
)
&
&
self
.
complex
.
iter
(
)
.
all
(
|
complex
|
{
complex
.
rect
.
contains
(
&
rect
.
origin
)
&
&
complex
.
rect
.
contains
(
&
rect
.
bottom_right
(
)
)
}
)
}
#
[
inline
]
pub
fn
bounding_rect
(
&
self
)
-
>
Rect
<
Au
>
{
let
mut
rect
=
self
.
main
;
for
complex
in
&
*
self
.
complex
{
rect
=
rect
.
union
(
&
complex
.
rect
)
}
rect
}
#
[
inline
]
pub
fn
intersect_with_rounded_rect
(
&
mut
self
rect
:
&
Rect
<
Au
>
radii
:
&
BorderRadii
<
Au
>
)
{
let
new_complex_region
=
ComplexClippingRegion
{
rect
:
*
rect
radii
:
*
radii
}
;
for
existing_complex_region
in
&
mut
self
.
complex
{
if
existing_complex_region
.
completely_encloses
(
&
new_complex_region
)
{
*
existing_complex_region
=
new_complex_region
;
return
}
if
new_complex_region
.
completely_encloses
(
existing_complex_region
)
{
return
}
}
self
.
complex
.
push
(
ComplexClippingRegion
{
rect
:
*
rect
radii
:
*
radii
}
)
;
}
#
[
inline
]
pub
fn
translate
(
&
self
delta
:
&
Point2D
<
Au
>
)
-
>
ClippingRegion
{
ClippingRegion
{
main
:
self
.
main
.
translate
(
delta
)
complex
:
self
.
complex
.
iter
(
)
.
map
(
|
complex
|
{
ComplexClippingRegion
{
rect
:
complex
.
rect
.
translate
(
delta
)
radii
:
complex
.
radii
}
}
)
.
collect
(
)
}
}
#
[
inline
]
pub
fn
is_max
(
&
self
)
-
>
bool
{
self
.
main
=
=
max_rect
(
)
&
&
self
.
complex
.
is_empty
(
)
}
}
impl
fmt
:
:
Debug
for
ClippingRegion
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
if
*
self
=
=
ClippingRegion
:
:
max
(
)
{
write
!
(
f
"
ClippingRegion
:
:
Max
"
)
}
else
if
*
self
=
=
ClippingRegion
:
:
empty
(
)
{
write
!
(
f
"
ClippingRegion
:
:
Empty
"
)
}
else
if
self
.
main
=
=
max_rect
(
)
{
write
!
(
f
"
ClippingRegion
(
Complex
=
{
:
?
}
)
"
self
.
complex
)
}
else
{
write
!
(
f
"
ClippingRegion
(
Rect
=
{
:
?
}
Complex
=
{
:
?
}
)
"
self
.
main
self
.
complex
)
}
}
}
impl
ComplexClippingRegion
{
fn
completely_encloses
(
&
self
other
:
&
ComplexClippingRegion
)
-
>
bool
{
let
left
=
cmp
:
:
max
(
self
.
radii
.
top_left
.
width
self
.
radii
.
bottom_left
.
width
)
;
let
top
=
cmp
:
:
max
(
self
.
radii
.
top_left
.
height
self
.
radii
.
top_right
.
height
)
;
let
right
=
cmp
:
:
max
(
self
.
radii
.
top_right
.
width
self
.
radii
.
bottom_right
.
width
)
;
let
bottom
=
cmp
:
:
max
(
self
.
radii
.
bottom_left
.
height
self
.
radii
.
bottom_right
.
height
)
;
let
interior
=
Rect
:
:
new
(
Point2D
:
:
new
(
self
.
rect
.
origin
.
x
+
left
self
.
rect
.
origin
.
y
+
top
)
Size2D
:
:
new
(
self
.
rect
.
size
.
width
-
left
-
right
self
.
rect
.
size
.
height
-
top
-
bottom
)
)
;
interior
.
origin
.
x
<
=
other
.
rect
.
origin
.
x
&
&
interior
.
origin
.
y
<
=
other
.
rect
.
origin
.
y
&
&
interior
.
max_x
(
)
>
=
other
.
rect
.
max_x
(
)
&
&
interior
.
max_y
(
)
>
=
other
.
rect
.
max_y
(
)
}
}
#
[
derive
(
Clone
Copy
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
DisplayItemMetadata
{
pub
node
:
OpaqueNode
pub
pointing
:
Option
<
Cursor
>
}
#
[
derive
(
Clone
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
SolidColorDisplayItem
{
pub
base
:
BaseDisplayItem
pub
color
:
ColorF
}
#
[
derive
(
Clone
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
TextDisplayItem
{
pub
base
:
BaseDisplayItem
#
[
ignore_heap_size_of
=
"
Because
it
is
non
-
owning
"
]
pub
text_run
:
Arc
<
TextRun
>
pub
range
:
Range
<
ByteIndex
>
pub
text_color
:
ColorF
pub
baseline_origin
:
Point2D
<
Au
>
pub
orientation
:
TextOrientation
pub
blur_radius
:
Au
}
#
[
derive
(
Clone
Eq
PartialEq
HeapSizeOf
Deserialize
Serialize
)
]
pub
enum
TextOrientation
{
Upright
SidewaysLeft
SidewaysRight
}
#
[
derive
(
Clone
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
ImageDisplayItem
{
pub
base
:
BaseDisplayItem
pub
webrender_image
:
WebRenderImageInfo
#
[
ignore_heap_size_of
=
"
Because
it
is
non
-
owning
"
]
pub
image_data
:
Option
<
Arc
<
IpcSharedMemory
>
>
pub
stretch_size
:
Size2D
<
Au
>
pub
tile_spacing
:
Size2D
<
Au
>
pub
image_rendering
:
image_rendering
:
:
T
}
#
[
derive
(
Clone
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
WebGLDisplayItem
{
pub
base
:
BaseDisplayItem
#
[
ignore_heap_size_of
=
"
Defined
in
webrender_traits
"
]
pub
context_id
:
WebGLContextId
}
#
[
derive
(
Clone
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
IframeDisplayItem
{
pub
base
:
BaseDisplayItem
pub
iframe
:
PipelineId
}
#
[
derive
(
Clone
Deserialize
HeapSizeOf
Serialize
)
]
pub
struct
GradientDisplayItem
{
pub
base
:
BaseDisplayItem
pub
start_point
:
Point2D
<
Au
>
pub
end_point
:
Point2D
<
Au
>
pub
stops
:
Vec
<
GradientStop
>
}
#
[
derive
(
Clone
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
BorderDisplayItem
{
pub
base
:
BaseDisplayItem
pub
border_widths
:
SideOffsets2D
<
Au
>
pub
color
:
SideOffsets2D
<
ColorF
>
pub
style
:
SideOffsets2D
<
border_style
:
:
T
>
pub
radius
:
BorderRadii
<
Au
>
}
#
[
derive
(
Clone
PartialEq
Debug
Copy
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
BorderRadii
<
T
>
{
pub
top_left
:
Size2D
<
T
>
pub
top_right
:
Size2D
<
T
>
pub
bottom_right
:
Size2D
<
T
>
pub
bottom_left
:
Size2D
<
T
>
}
impl
<
T
>
Default
for
BorderRadii
<
T
>
where
T
:
Default
T
:
Clone
{
fn
default
(
)
-
>
Self
{
let
top_left
=
Size2D
:
:
new
(
Default
:
:
default
(
)
Default
:
:
default
(
)
)
;
let
top_right
=
Size2D
:
:
new
(
Default
:
:
default
(
)
Default
:
:
default
(
)
)
;
let
bottom_left
=
Size2D
:
:
new
(
Default
:
:
default
(
)
Default
:
:
default
(
)
)
;
let
bottom_right
=
Size2D
:
:
new
(
Default
:
:
default
(
)
Default
:
:
default
(
)
)
;
BorderRadii
{
top_left
:
top_left
top_right
:
top_right
bottom_left
:
bottom_left
bottom_right
:
bottom_right
}
}
}
impl
BorderRadii
<
Au
>
{
pub
fn
scale_by
(
&
self
s
:
f32
)
-
>
BorderRadii
<
Au
>
{
BorderRadii
{
top_left
:
BorderRadii
:
:
scale_corner_by
(
self
.
top_left
s
)
top_right
:
BorderRadii
:
:
scale_corner_by
(
self
.
top_right
s
)
bottom_left
:
BorderRadii
:
:
scale_corner_by
(
self
.
bottom_left
s
)
bottom_right
:
BorderRadii
:
:
scale_corner_by
(
self
.
bottom_right
s
)
}
}
pub
fn
scale_corner_by
(
corner
:
Size2D
<
Au
>
s
:
f32
)
-
>
Size2D
<
Au
>
{
Size2D
:
:
new
(
corner
.
width
.
scale_by
(
s
)
corner
.
height
.
scale_by
(
s
)
)
}
}
impl
<
T
>
BorderRadii
<
T
>
where
T
:
PartialEq
+
Zero
{
pub
fn
is_square
(
&
self
)
-
>
bool
{
let
zero
=
Zero
:
:
zero
(
)
;
self
.
top_left
=
=
zero
&
&
self
.
top_right
=
=
zero
&
&
self
.
bottom_right
=
=
zero
&
&
self
.
bottom_left
=
=
zero
}
}
impl
<
T
>
BorderRadii
<
T
>
where
T
:
PartialEq
+
Zero
+
Clone
{
pub
fn
all_same
(
value
:
T
)
-
>
BorderRadii
<
T
>
{
BorderRadii
{
top_left
:
Size2D
:
:
new
(
value
.
clone
(
)
value
.
clone
(
)
)
top_right
:
Size2D
:
:
new
(
value
.
clone
(
)
value
.
clone
(
)
)
bottom_right
:
Size2D
:
:
new
(
value
.
clone
(
)
value
.
clone
(
)
)
bottom_left
:
Size2D
:
:
new
(
value
.
clone
(
)
value
.
clone
(
)
)
}
}
}
#
[
derive
(
Clone
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
LineDisplayItem
{
pub
base
:
BaseDisplayItem
pub
color
:
ColorF
pub
style
:
border_style
:
:
T
}
#
[
derive
(
Clone
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
BoxShadowDisplayItem
{
pub
base
:
BaseDisplayItem
pub
box_bounds
:
Rect
<
Au
>
pub
offset
:
Point2D
<
Au
>
pub
color
:
ColorF
pub
blur_radius
:
Au
pub
spread_radius
:
Au
pub
border_radius
:
Au
pub
clip_mode
:
BoxShadowClipMode
}
#
[
derive
(
Clone
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
PushStackingContextItem
{
pub
base
:
BaseDisplayItem
pub
stacking_context
:
StackingContext
}
#
[
derive
(
Clone
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
PopStackingContextItem
{
pub
base
:
BaseDisplayItem
pub
stacking_context_id
:
StackingContextId
}
#
[
derive
(
Clone
Copy
Debug
PartialEq
HeapSizeOf
Deserialize
Serialize
)
]
pub
enum
BoxShadowClipMode
{
None
Outset
Inset
}
impl
DisplayItem
{
pub
fn
base
(
&
self
)
-
>
&
BaseDisplayItem
{
match
*
self
{
DisplayItem
:
:
SolidColor
(
ref
solid_color
)
=
>
&
solid_color
.
base
DisplayItem
:
:
Text
(
ref
text
)
=
>
&
text
.
base
DisplayItem
:
:
Image
(
ref
image_item
)
=
>
&
image_item
.
base
DisplayItem
:
:
WebGL
(
ref
webgl_item
)
=
>
&
webgl_item
.
base
DisplayItem
:
:
Border
(
ref
border
)
=
>
&
border
.
base
DisplayItem
:
:
Gradient
(
ref
gradient
)
=
>
&
gradient
.
base
DisplayItem
:
:
Line
(
ref
line
)
=
>
&
line
.
base
DisplayItem
:
:
BoxShadow
(
ref
box_shadow
)
=
>
&
box_shadow
.
base
DisplayItem
:
:
Iframe
(
ref
iframe
)
=
>
&
iframe
.
base
DisplayItem
:
:
PushStackingContext
(
ref
stacking_context
)
=
>
&
stacking_context
.
base
DisplayItem
:
:
PopStackingContext
(
ref
item
)
=
>
&
item
.
base
}
}
pub
fn
stacking_context_id
(
&
self
)
-
>
StackingContextId
{
self
.
base
(
)
.
stacking_context_id
}
pub
fn
section
(
&
self
)
-
>
DisplayListSection
{
self
.
base
(
)
.
section
}
pub
fn
bounds
(
&
self
)
-
>
Rect
<
Au
>
{
self
.
base
(
)
.
bounds
}
pub
fn
debug_with_level
(
&
self
level
:
u32
)
{
let
mut
indent
=
String
:
:
new
(
)
;
for
_
in
0
.
.
level
{
indent
.
push_str
(
"
|
"
)
}
println
!
(
"
{
}
+
{
:
?
}
"
indent
self
)
;
}
fn
hit_test
(
&
self
point
:
Point2D
<
Au
>
)
-
>
Option
<
DisplayItemMetadata
>
{
let
base_item
=
self
.
base
(
)
;
if
!
base_item
.
clip
.
might_intersect_point
(
&
point
)
{
return
None
;
}
if
!
self
.
bounds
(
)
.
contains
(
&
point
)
{
return
None
;
}
if
base_item
.
metadata
.
pointing
.
is_none
(
)
{
return
None
;
}
match
*
self
{
DisplayItem
:
:
Border
(
ref
border
)
=
>
{
let
interior_rect
=
Rect
:
:
new
(
Point2D
:
:
new
(
border
.
base
.
bounds
.
origin
.
x
+
border
.
border_widths
.
left
border
.
base
.
bounds
.
origin
.
y
+
border
.
border_widths
.
top
)
Size2D
:
:
new
(
border
.
base
.
bounds
.
size
.
width
-
(
border
.
border_widths
.
left
+
border
.
border_widths
.
right
)
border
.
base
.
bounds
.
size
.
height
-
(
border
.
border_widths
.
top
+
border
.
border_widths
.
bottom
)
)
)
;
if
interior_rect
.
contains
(
&
point
)
{
return
None
;
}
}
DisplayItem
:
:
BoxShadow
(
_
)
=
>
{
return
None
;
}
_
=
>
{
}
}
Some
(
base_item
.
metadata
)
}
}
impl
fmt
:
:
Debug
for
DisplayItem
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
if
let
DisplayItem
:
:
PushStackingContext
(
ref
item
)
=
*
self
{
return
write
!
(
f
"
PushStackingContext
(
{
:
?
}
)
"
item
.
stacking_context
)
;
}
if
let
DisplayItem
:
:
PopStackingContext
(
ref
item
)
=
*
self
{
return
write
!
(
f
"
PopStackingContext
(
{
:
?
}
"
item
.
stacking_context_id
)
;
}
write
!
(
f
"
{
}
{
:
?
}
{
:
?
}
"
match
*
self
{
DisplayItem
:
:
SolidColor
(
ref
solid_color
)
=
>
format
!
(
"
SolidColor
rgba
(
{
}
{
}
{
}
{
}
)
"
solid_color
.
color
.
r
solid_color
.
color
.
g
solid_color
.
color
.
b
solid_color
.
color
.
a
)
DisplayItem
:
:
Text
(
_
)
=
>
"
Text
"
.
to_owned
(
)
DisplayItem
:
:
Image
(
_
)
=
>
"
Image
"
.
to_owned
(
)
DisplayItem
:
:
WebGL
(
_
)
=
>
"
WebGL
"
.
to_owned
(
)
DisplayItem
:
:
Border
(
_
)
=
>
"
Border
"
.
to_owned
(
)
DisplayItem
:
:
Gradient
(
_
)
=
>
"
Gradient
"
.
to_owned
(
)
DisplayItem
:
:
Line
(
_
)
=
>
"
Line
"
.
to_owned
(
)
DisplayItem
:
:
BoxShadow
(
_
)
=
>
"
BoxShadow
"
.
to_owned
(
)
DisplayItem
:
:
Iframe
(
_
)
=
>
"
Iframe
"
.
to_owned
(
)
DisplayItem
:
:
PushStackingContext
(
_
)
=
>
"
"
.
to_owned
(
)
DisplayItem
:
:
PopStackingContext
(
_
)
=
>
"
"
.
to_owned
(
)
}
self
.
bounds
(
)
self
.
base
(
)
.
clip
)
}
}
#
[
derive
(
Copy
Clone
HeapSizeOf
Deserialize
Serialize
)
]
pub
struct
WebRenderImageInfo
{
pub
width
:
u32
pub
height
:
u32
pub
format
:
PixelFormat
#
[
ignore_heap_size_of
=
"
WebRender
traits
type
and
tiny
"
]
pub
key
:
Option
<
webrender_traits
:
:
ImageKey
>
}
impl
WebRenderImageInfo
{
#
[
inline
]
pub
fn
from_image
(
image
:
&
Image
)
-
>
WebRenderImageInfo
{
WebRenderImageInfo
{
width
:
image
.
width
height
:
image
.
height
format
:
image
.
format
key
:
image
.
id
}
}
}
pub
type
ScrollOffsetMap
=
HashMap
<
ScrollRootId
Point2D
<
f32
>
>
;
pub
trait
SimpleMatrixDetection
{
fn
is_identity_or_simple_translation
(
&
self
)
-
>
bool
;
}
impl
SimpleMatrixDetection
for
Matrix4D
<
f32
>
{
#
[
inline
]
fn
is_identity_or_simple_translation
(
&
self
)
-
>
bool
{
let
(
_0
_1
)
=
(
Zero
:
:
zero
(
)
One
:
:
one
(
)
)
;
self
.
m11
=
=
_1
&
&
self
.
m12
=
=
_0
&
&
self
.
m13
=
=
_0
&
&
self
.
m14
=
=
_0
&
&
self
.
m21
=
=
_0
&
&
self
.
m22
=
=
_1
&
&
self
.
m23
=
=
_0
&
&
self
.
m24
=
=
_0
&
&
self
.
m31
=
=
_0
&
&
self
.
m32
=
=
_0
&
&
self
.
m33
=
=
_1
&
&
self
.
m34
=
=
_0
&
&
self
.
m44
=
=
_1
}
}
