use
euclid
:
:
{
Vector2D
TypedRect
SideOffsets2D
}
;
use
euclid
:
:
num
:
:
{
One
Zero
}
;
use
gfx_traits
:
:
{
self
StackingContextId
}
;
use
gfx_traits
:
:
print_tree
:
:
PrintTree
;
use
msg
:
:
constellation_msg
:
:
PipelineId
;
use
net_traits
:
:
image
:
:
base
:
:
{
Image
PixelFormat
}
;
use
servo_geometry
:
:
MaxRect
;
use
std
:
:
cmp
:
:
Ordering
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
f32
;
use
std
:
:
fmt
;
use
webrender_api
:
:
{
BorderRadius
BorderWidths
BoxShadowClipMode
ClipMode
ColorF
}
;
use
webrender_api
:
:
{
ComplexClipRegion
ExtendMode
ExternalScrollId
FilterOp
FontInstanceKey
}
;
use
webrender_api
:
:
{
GlyphInstance
GradientStop
ImageBorder
ImageKey
ImageRendering
}
;
use
webrender_api
:
:
{
LayoutPoint
LayoutRect
LayoutSize
LayoutTransform
LayoutVector2D
LineStyle
}
;
use
webrender_api
:
:
{
LocalClip
MixBlendMode
NormalBorder
ScrollPolicy
ScrollSensitivity
}
;
use
webrender_api
:
:
{
StickyOffsetBounds
TransformStyle
}
;
pub
use
style
:
:
dom
:
:
OpaqueNode
;
pub
static
BLUR_INFLATION_FACTOR
:
i32
=
3
;
#
[
derive
(
Clone
Copy
Debug
Deserialize
MallocSizeOf
PartialEq
Serialize
)
]
pub
struct
ClipScrollNodeIndex
(
pub
usize
)
;
impl
ClipScrollNodeIndex
{
pub
fn
is_root_scroll_node
(
&
self
)
-
>
bool
{
match
*
self
{
ClipScrollNodeIndex
(
0
)
=
>
true
_
=
>
false
}
}
pub
fn
to_define_item
(
&
self
)
-
>
DisplayItem
{
DisplayItem
:
:
DefineClipScrollNode
(
Box
:
:
new
(
DefineClipScrollNodeItem
{
base
:
BaseDisplayItem
:
:
empty
(
)
node_index
:
*
self
}
)
)
}
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
MallocSizeOf
PartialEq
Serialize
)
]
pub
struct
ClippingAndScrolling
{
pub
scrolling
:
ClipScrollNodeIndex
pub
clipping
:
Option
<
ClipScrollNodeIndex
>
}
impl
ClippingAndScrolling
{
pub
fn
simple
(
scrolling
:
ClipScrollNodeIndex
)
-
>
ClippingAndScrolling
{
ClippingAndScrolling
{
scrolling
clipping
:
None
}
}
pub
fn
new
(
scrolling
:
ClipScrollNodeIndex
clipping
:
ClipScrollNodeIndex
)
-
>
ClippingAndScrolling
{
ClippingAndScrolling
{
scrolling
clipping
:
Some
(
clipping
)
}
}
}
#
[
derive
(
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
DisplayList
{
pub
list
:
Vec
<
DisplayItem
>
pub
clip_scroll_nodes
:
Vec
<
ClipScrollNode
>
}
impl
DisplayList
{
pub
fn
bounds
(
&
self
)
-
>
LayoutRect
{
match
self
.
list
.
get
(
0
)
{
Some
(
&
DisplayItem
:
:
PushStackingContext
(
ref
item
)
)
=
>
item
.
stacking_context
.
bounds
Some
(
_
)
=
>
unreachable
!
(
"
Root
element
of
display
list
not
stacking
context
.
"
)
None
=
>
LayoutRect
:
:
zero
(
)
}
}
pub
fn
print
(
&
self
)
{
let
mut
print_tree
=
PrintTree
:
:
new
(
"
Display
List
"
.
to_owned
(
)
)
;
self
.
print_with_tree
(
&
mut
print_tree
)
;
}
pub
fn
print_with_tree
(
&
self
print_tree
:
&
mut
PrintTree
)
{
print_tree
.
new_level
(
"
ClipScrollNodes
"
.
to_owned
(
)
)
;
for
node
in
&
self
.
clip_scroll_nodes
{
print_tree
.
add_item
(
format
!
(
"
{
:
?
}
"
node
)
)
;
}
print_tree
.
end_level
(
)
;
print_tree
.
new_level
(
"
Items
"
.
to_owned
(
)
)
;
for
item
in
&
self
.
list
{
print_tree
.
add_item
(
format
!
(
"
{
:
?
}
StackingContext
:
{
:
?
}
{
:
?
}
"
item
item
.
base
(
)
.
stacking_context_id
item
.
clipping_and_scrolling
(
)
)
)
;
}
print_tree
.
end_level
(
)
;
}
}
impl
gfx_traits
:
:
DisplayList
for
DisplayList
{
fn
is_contentful
(
&
self
)
-
>
bool
{
for
item
in
&
self
.
list
{
match
item
{
&
DisplayItem
:
:
Text
(
_
)
|
&
DisplayItem
:
:
Image
(
_
)
=
>
{
return
true
}
_
=
>
(
)
}
}
false
}
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
Eq
MallocSizeOf
Ord
PartialEq
PartialOrd
Serialize
)
]
pub
enum
DisplayListSection
{
BackgroundAndBorders
BlockBackgroundsAndBorders
Content
Outlines
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
Eq
MallocSizeOf
Ord
PartialEq
PartialOrd
Serialize
)
]
pub
enum
StackingContextType
{
Real
PseudoPositioned
PseudoFloat
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
StackingContext
{
pub
id
:
StackingContextId
pub
context_type
:
StackingContextType
pub
bounds
:
LayoutRect
pub
overflow
:
LayoutRect
pub
z_index
:
i32
pub
filters
:
Vec
<
FilterOp
>
pub
mix_blend_mode
:
MixBlendMode
pub
transform
:
Option
<
LayoutTransform
>
pub
transform_style
:
TransformStyle
pub
perspective
:
Option
<
LayoutTransform
>
pub
scroll_policy
:
ScrollPolicy
pub
parent_clipping_and_scrolling
:
ClippingAndScrolling
}
impl
StackingContext
{
#
[
inline
]
pub
fn
new
(
id
:
StackingContextId
context_type
:
StackingContextType
bounds
:
LayoutRect
overflow
:
LayoutRect
z_index
:
i32
filters
:
Vec
<
FilterOp
>
mix_blend_mode
:
MixBlendMode
transform
:
Option
<
LayoutTransform
>
transform_style
:
TransformStyle
perspective
:
Option
<
LayoutTransform
>
scroll_policy
:
ScrollPolicy
parent_clipping_and_scrolling
:
ClippingAndScrolling
)
-
>
StackingContext
{
StackingContext
{
id
context_type
bounds
overflow
z_index
filters
mix_blend_mode
transform
transform_style
perspective
scroll_policy
parent_clipping_and_scrolling
}
}
#
[
inline
]
pub
fn
root
(
)
-
>
StackingContext
{
StackingContext
:
:
new
(
StackingContextId
:
:
root
(
)
StackingContextType
:
:
Real
LayoutRect
:
:
zero
(
)
LayoutRect
:
:
zero
(
)
0
vec
!
[
]
MixBlendMode
:
:
Normal
None
TransformStyle
:
:
Flat
None
ScrollPolicy
:
:
Scrollable
ClippingAndScrolling
:
:
simple
(
ClipScrollNodeIndex
(
0
)
)
)
}
pub
fn
to_display_list_items
(
self
)
-
>
(
DisplayItem
DisplayItem
)
{
let
mut
base_item
=
BaseDisplayItem
:
:
empty
(
)
;
base_item
.
stacking_context_id
=
self
.
id
;
base_item
.
clipping_and_scrolling
=
self
.
parent_clipping_and_scrolling
;
let
pop_item
=
DisplayItem
:
:
PopStackingContext
(
Box
:
:
new
(
PopStackingContextItem
{
base
:
base_item
.
clone
(
)
stacking_context_id
:
self
.
id
}
)
)
;
let
push_item
=
DisplayItem
:
:
PushStackingContext
(
Box
:
:
new
(
PushStackingContextItem
{
base
:
base_item
stacking_context
:
self
}
)
)
;
(
push_item
pop_item
)
}
}
impl
Ord
for
StackingContext
{
fn
cmp
(
&
self
other
:
&
Self
)
-
>
Ordering
{
if
self
.
z_index
!
=
0
|
|
other
.
z_index
!
=
0
{
return
self
.
z_index
.
cmp
(
&
other
.
z_index
)
;
}
match
(
self
.
context_type
other
.
context_type
)
{
(
StackingContextType
:
:
PseudoFloat
StackingContextType
:
:
PseudoFloat
)
=
>
Ordering
:
:
Equal
(
StackingContextType
:
:
PseudoFloat
_
)
=
>
Ordering
:
:
Less
(
_
StackingContextType
:
:
PseudoFloat
)
=
>
Ordering
:
:
Greater
(
_
_
)
=
>
Ordering
:
:
Equal
}
}
}
impl
PartialOrd
for
StackingContext
{
fn
partial_cmp
(
&
self
other
:
&
Self
)
-
>
Option
<
Ordering
>
{
Some
(
self
.
cmp
(
other
)
)
}
}
impl
Eq
for
StackingContext
{
}
impl
PartialEq
for
StackingContext
{
fn
eq
(
&
self
other
:
&
Self
)
-
>
bool
{
self
.
id
=
=
other
.
id
}
}
impl
fmt
:
:
Debug
for
StackingContext
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
let
type_string
=
if
self
.
context_type
=
=
StackingContextType
:
:
Real
{
"
StackingContext
"
}
else
{
"
Pseudo
-
StackingContext
"
}
;
write
!
(
f
"
{
}
at
{
:
?
}
with
overflow
{
:
?
}
:
{
:
?
}
"
type_string
self
.
bounds
self
.
overflow
self
.
id
)
}
}
#
[
derive
(
Clone
Debug
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
StickyFrameData
{
pub
margins
:
SideOffsets2D
<
Option
<
f32
>
>
pub
vertical_offset_bounds
:
StickyOffsetBounds
pub
horizontal_offset_bounds
:
StickyOffsetBounds
}
#
[
derive
(
Clone
Debug
Deserialize
MallocSizeOf
Serialize
)
]
pub
enum
ClipScrollNodeType
{
ScrollFrame
(
ScrollSensitivity
ExternalScrollId
)
StickyFrame
(
StickyFrameData
)
Clip
}
#
[
derive
(
Clone
Debug
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
ClipScrollNode
{
pub
parent_index
:
ClipScrollNodeIndex
pub
clip
:
ClippingRegion
pub
content_rect
:
LayoutRect
pub
node_type
:
ClipScrollNodeType
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
enum
DisplayItem
{
SolidColor
(
Box
<
SolidColorDisplayItem
>
)
Text
(
Box
<
TextDisplayItem
>
)
Image
(
Box
<
ImageDisplayItem
>
)
Border
(
Box
<
BorderDisplayItem
>
)
Gradient
(
Box
<
GradientDisplayItem
>
)
RadialGradient
(
Box
<
RadialGradientDisplayItem
>
)
Line
(
Box
<
LineDisplayItem
>
)
BoxShadow
(
Box
<
BoxShadowDisplayItem
>
)
PushTextShadow
(
Box
<
PushTextShadowDisplayItem
>
)
PopAllTextShadows
(
Box
<
PopAllTextShadowsDisplayItem
>
)
Iframe
(
Box
<
IframeDisplayItem
>
)
PushStackingContext
(
Box
<
PushStackingContextItem
>
)
PopStackingContext
(
Box
<
PopStackingContextItem
>
)
DefineClipScrollNode
(
Box
<
DefineClipScrollNodeItem
>
)
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
BaseDisplayItem
{
pub
bounds
:
LayoutRect
pub
metadata
:
DisplayItemMetadata
pub
local_clip
:
LocalClip
pub
section
:
DisplayListSection
pub
stacking_context_id
:
StackingContextId
pub
clipping_and_scrolling
:
ClippingAndScrolling
}
impl
BaseDisplayItem
{
#
[
inline
(
always
)
]
pub
fn
new
(
bounds
:
LayoutRect
metadata
:
DisplayItemMetadata
local_clip
:
LocalClip
section
:
DisplayListSection
stacking_context_id
:
StackingContextId
clipping_and_scrolling
:
ClippingAndScrolling
)
-
>
BaseDisplayItem
{
BaseDisplayItem
{
bounds
metadata
local_clip
section
stacking_context_id
clipping_and_scrolling
}
}
#
[
inline
(
always
)
]
pub
fn
empty
(
)
-
>
BaseDisplayItem
{
BaseDisplayItem
{
bounds
:
TypedRect
:
:
zero
(
)
metadata
:
DisplayItemMetadata
{
node
:
OpaqueNode
(
0
)
pointing
:
None
}
local_clip
:
LocalClip
:
:
from
(
LayoutRect
:
:
max_rect
(
)
)
section
:
DisplayListSection
:
:
Content
stacking_context_id
:
StackingContextId
:
:
root
(
)
clipping_and_scrolling
:
ClippingAndScrolling
:
:
simple
(
ClipScrollNodeIndex
(
0
)
)
}
}
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
PartialEq
Serialize
)
]
pub
struct
ClippingRegion
{
pub
main
:
LayoutRect
pub
complex
:
Vec
<
ComplexClipRegion
>
}
impl
ClippingRegion
{
#
[
inline
]
pub
fn
empty
(
)
-
>
ClippingRegion
{
ClippingRegion
{
main
:
LayoutRect
:
:
zero
(
)
complex
:
Vec
:
:
new
(
)
}
}
#
[
inline
]
pub
fn
max
(
)
-
>
ClippingRegion
{
ClippingRegion
{
main
:
LayoutRect
:
:
max_rect
(
)
complex
:
Vec
:
:
new
(
)
}
}
#
[
inline
]
pub
fn
from_rect
(
rect
:
LayoutRect
)
-
>
ClippingRegion
{
ClippingRegion
{
main
:
rect
complex
:
Vec
:
:
new
(
)
}
}
#
[
inline
]
pub
fn
intersect_rect
(
&
mut
self
rect
:
&
LayoutRect
)
{
self
.
main
=
self
.
main
.
intersection
(
rect
)
.
unwrap_or
(
LayoutRect
:
:
zero
(
)
)
}
#
[
inline
]
pub
fn
might_be_nonempty
(
&
self
)
-
>
bool
{
!
self
.
main
.
is_empty
(
)
}
#
[
inline
]
pub
fn
might_intersect_point
(
&
self
point
:
&
LayoutPoint
)
-
>
bool
{
self
.
main
.
contains
(
point
)
&
&
self
.
complex
.
iter
(
)
.
all
(
|
complex
|
complex
.
rect
.
contains
(
point
)
)
}
#
[
inline
]
pub
fn
might_intersect_rect
(
&
self
rect
:
&
LayoutRect
)
-
>
bool
{
self
.
main
.
intersects
(
rect
)
&
&
self
.
complex
.
iter
(
)
.
all
(
|
complex
|
complex
.
rect
.
intersects
(
rect
)
)
}
#
[
inline
]
pub
fn
does_not_clip_rect
(
&
self
rect
:
&
LayoutRect
)
-
>
bool
{
self
.
main
.
contains
(
&
rect
.
origin
)
&
&
self
.
main
.
contains
(
&
rect
.
bottom_right
(
)
)
&
&
self
.
complex
.
iter
(
)
.
all
(
|
complex
|
{
complex
.
rect
.
contains
(
&
rect
.
origin
)
&
&
complex
.
rect
.
contains
(
&
rect
.
bottom_right
(
)
)
}
)
}
#
[
inline
]
pub
fn
bounding_rect
(
&
self
)
-
>
LayoutRect
{
let
mut
rect
=
self
.
main
;
for
complex
in
&
*
self
.
complex
{
rect
=
rect
.
union
(
&
complex
.
rect
)
}
rect
}
#
[
inline
]
pub
fn
intersect_with_rounded_rect
(
&
mut
self
rect
:
LayoutRect
radii
:
BorderRadius
)
{
let
new_complex_region
=
ComplexClipRegion
{
rect
radii
mode
:
ClipMode
:
:
Clip
}
;
for
existing_complex_region
in
&
mut
self
.
complex
{
if
existing_complex_region
.
completely_encloses
(
&
new_complex_region
)
{
*
existing_complex_region
=
new_complex_region
;
return
}
if
new_complex_region
.
completely_encloses
(
existing_complex_region
)
{
return
}
}
self
.
complex
.
push
(
new_complex_region
)
;
}
#
[
inline
]
pub
fn
translate
(
&
self
delta
:
&
LayoutVector2D
)
-
>
ClippingRegion
{
ClippingRegion
{
main
:
self
.
main
.
translate
(
delta
)
complex
:
self
.
complex
.
iter
(
)
.
map
(
|
complex
|
{
ComplexClipRegion
{
rect
:
complex
.
rect
.
translate
(
delta
)
radii
:
complex
.
radii
mode
:
complex
.
mode
}
}
)
.
collect
(
)
}
}
#
[
inline
]
pub
fn
is_max
(
&
self
)
-
>
bool
{
self
.
main
=
=
LayoutRect
:
:
max_rect
(
)
&
&
self
.
complex
.
is_empty
(
)
}
}
impl
fmt
:
:
Debug
for
ClippingRegion
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
if
*
self
=
=
ClippingRegion
:
:
max
(
)
{
write
!
(
f
"
ClippingRegion
:
:
Max
"
)
}
else
if
*
self
=
=
ClippingRegion
:
:
empty
(
)
{
write
!
(
f
"
ClippingRegion
:
:
Empty
"
)
}
else
if
self
.
main
=
=
LayoutRect
:
:
max_rect
(
)
{
write
!
(
f
"
ClippingRegion
(
Complex
=
{
:
?
}
)
"
self
.
complex
)
}
else
{
write
!
(
f
"
ClippingRegion
(
Rect
=
{
:
?
}
Complex
=
{
:
?
}
)
"
self
.
main
self
.
complex
)
}
}
}
pub
trait
CompletelyEncloses
{
fn
completely_encloses
(
&
self
other
:
&
Self
)
-
>
bool
;
}
impl
CompletelyEncloses
for
ComplexClipRegion
{
fn
completely_encloses
(
&
self
other
:
&
Self
)
-
>
bool
{
let
left
=
self
.
radii
.
top_left
.
width
.
max
(
self
.
radii
.
bottom_left
.
width
)
;
let
top
=
self
.
radii
.
top_left
.
height
.
max
(
self
.
radii
.
top_right
.
height
)
;
let
right
=
self
.
radii
.
top_right
.
width
.
max
(
self
.
radii
.
bottom_right
.
width
)
;
let
bottom
=
self
.
radii
.
bottom_left
.
height
.
max
(
self
.
radii
.
bottom_right
.
height
)
;
let
interior
=
LayoutRect
:
:
new
(
LayoutPoint
:
:
new
(
self
.
rect
.
origin
.
x
+
left
self
.
rect
.
origin
.
y
+
top
)
LayoutSize
:
:
new
(
self
.
rect
.
size
.
width
-
left
-
right
self
.
rect
.
size
.
height
-
top
-
bottom
)
)
;
interior
.
origin
.
x
<
=
other
.
rect
.
origin
.
x
&
&
interior
.
origin
.
y
<
=
other
.
rect
.
origin
.
y
&
&
interior
.
max_x
(
)
>
=
other
.
rect
.
max_x
(
)
&
&
interior
.
max_y
(
)
>
=
other
.
rect
.
max_y
(
)
}
}
#
[
derive
(
Clone
Copy
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
DisplayItemMetadata
{
pub
node
:
OpaqueNode
pub
pointing
:
Option
<
u16
>
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
SolidColorDisplayItem
{
pub
base
:
BaseDisplayItem
pub
color
:
ColorF
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
TextDisplayItem
{
pub
base
:
BaseDisplayItem
pub
glyphs
:
Vec
<
GlyphInstance
>
pub
font_key
:
FontInstanceKey
pub
text_color
:
ColorF
}
#
[
derive
(
Clone
Deserialize
Eq
MallocSizeOf
PartialEq
Serialize
)
]
pub
enum
TextOrientation
{
Upright
SidewaysLeft
SidewaysRight
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
ImageDisplayItem
{
pub
base
:
BaseDisplayItem
pub
webrender_image
:
WebRenderImageInfo
pub
stretch_size
:
LayoutSize
pub
tile_spacing
:
LayoutSize
pub
image_rendering
:
ImageRendering
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
IframeDisplayItem
{
pub
base
:
BaseDisplayItem
pub
iframe
:
PipelineId
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
Gradient
{
pub
start_point
:
LayoutPoint
pub
end_point
:
LayoutPoint
pub
stops
:
Vec
<
GradientStop
>
pub
extend_mode
:
ExtendMode
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
GradientDisplayItem
{
pub
base
:
BaseDisplayItem
pub
gradient
:
Gradient
pub
tile
:
LayoutSize
pub
tile_spacing
:
LayoutSize
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
RadialGradient
{
pub
center
:
LayoutPoint
pub
radius
:
LayoutSize
pub
stops
:
Vec
<
GradientStop
>
pub
extend_mode
:
ExtendMode
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
RadialGradientDisplayItem
{
pub
base
:
BaseDisplayItem
pub
gradient
:
RadialGradient
pub
tile
:
LayoutSize
pub
tile_spacing
:
LayoutSize
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
GradientBorder
{
pub
gradient
:
Gradient
pub
outset
:
SideOffsets2D
<
f32
>
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
RadialGradientBorder
{
pub
gradient
:
RadialGradient
pub
outset
:
SideOffsets2D
<
f32
>
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
enum
BorderDetails
{
Normal
(
NormalBorder
)
Image
(
ImageBorder
)
Gradient
(
GradientBorder
)
RadialGradient
(
RadialGradientBorder
)
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
BorderDisplayItem
{
pub
base
:
BaseDisplayItem
pub
border_widths
:
BorderWidths
pub
details
:
BorderDetails
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
LineDisplayItem
{
pub
base
:
BaseDisplayItem
pub
color
:
ColorF
pub
style
:
LineStyle
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
BoxShadowDisplayItem
{
pub
base
:
BaseDisplayItem
pub
box_bounds
:
LayoutRect
pub
offset
:
LayoutVector2D
pub
color
:
ColorF
pub
blur_radius
:
f32
pub
spread_radius
:
f32
pub
border_radius
:
BorderRadius
pub
clip_mode
:
BoxShadowClipMode
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
PushTextShadowDisplayItem
{
pub
base
:
BaseDisplayItem
pub
offset
:
LayoutVector2D
pub
color
:
ColorF
pub
blur_radius
:
f32
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
PopAllTextShadowsDisplayItem
{
pub
base
:
BaseDisplayItem
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
PushStackingContextItem
{
pub
base
:
BaseDisplayItem
pub
stacking_context
:
StackingContext
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
PopStackingContextItem
{
pub
base
:
BaseDisplayItem
pub
stacking_context_id
:
StackingContextId
}
#
[
derive
(
Clone
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
DefineClipScrollNodeItem
{
pub
base
:
BaseDisplayItem
pub
node_index
:
ClipScrollNodeIndex
}
impl
DisplayItem
{
pub
fn
base
(
&
self
)
-
>
&
BaseDisplayItem
{
match
*
self
{
DisplayItem
:
:
SolidColor
(
ref
solid_color
)
=
>
&
solid_color
.
base
DisplayItem
:
:
Text
(
ref
text
)
=
>
&
text
.
base
DisplayItem
:
:
Image
(
ref
image_item
)
=
>
&
image_item
.
base
DisplayItem
:
:
Border
(
ref
border
)
=
>
&
border
.
base
DisplayItem
:
:
Gradient
(
ref
gradient
)
=
>
&
gradient
.
base
DisplayItem
:
:
RadialGradient
(
ref
gradient
)
=
>
&
gradient
.
base
DisplayItem
:
:
Line
(
ref
line
)
=
>
&
line
.
base
DisplayItem
:
:
BoxShadow
(
ref
box_shadow
)
=
>
&
box_shadow
.
base
DisplayItem
:
:
PushTextShadow
(
ref
push_text_shadow
)
=
>
&
push_text_shadow
.
base
DisplayItem
:
:
PopAllTextShadows
(
ref
pop_text_shadow
)
=
>
&
pop_text_shadow
.
base
DisplayItem
:
:
Iframe
(
ref
iframe
)
=
>
&
iframe
.
base
DisplayItem
:
:
PushStackingContext
(
ref
stacking_context
)
=
>
&
stacking_context
.
base
DisplayItem
:
:
PopStackingContext
(
ref
item
)
=
>
&
item
.
base
DisplayItem
:
:
DefineClipScrollNode
(
ref
item
)
=
>
&
item
.
base
}
}
pub
fn
scroll_node_index
(
&
self
)
-
>
ClipScrollNodeIndex
{
self
.
base
(
)
.
clipping_and_scrolling
.
scrolling
}
pub
fn
clipping_and_scrolling
(
&
self
)
-
>
ClippingAndScrolling
{
self
.
base
(
)
.
clipping_and_scrolling
}
pub
fn
stacking_context_id
(
&
self
)
-
>
StackingContextId
{
self
.
base
(
)
.
stacking_context_id
}
pub
fn
section
(
&
self
)
-
>
DisplayListSection
{
self
.
base
(
)
.
section
}
pub
fn
bounds
(
&
self
)
-
>
LayoutRect
{
self
.
base
(
)
.
bounds
}
pub
fn
debug_with_level
(
&
self
level
:
u32
)
{
let
mut
indent
=
String
:
:
new
(
)
;
for
_
in
0
.
.
level
{
indent
.
push_str
(
"
|
"
)
}
println
!
(
"
{
}
+
{
:
?
}
"
indent
self
)
;
}
}
impl
fmt
:
:
Debug
for
DisplayItem
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
if
let
DisplayItem
:
:
PushStackingContext
(
ref
item
)
=
*
self
{
return
write
!
(
f
"
PushStackingContext
(
{
:
?
}
)
"
item
.
stacking_context
)
;
}
if
let
DisplayItem
:
:
PopStackingContext
(
ref
item
)
=
*
self
{
return
write
!
(
f
"
PopStackingContext
(
{
:
?
}
"
item
.
stacking_context_id
)
;
}
if
let
DisplayItem
:
:
DefineClipScrollNode
(
ref
item
)
=
*
self
{
return
write
!
(
f
"
DefineClipScrollNode
(
{
:
?
}
"
item
.
node_index
)
;
}
write
!
(
f
"
{
}
{
:
?
}
{
:
?
}
"
match
*
self
{
DisplayItem
:
:
SolidColor
(
ref
solid_color
)
=
>
format
!
(
"
SolidColor
rgba
(
{
}
{
}
{
}
{
}
)
"
solid_color
.
color
.
r
solid_color
.
color
.
g
solid_color
.
color
.
b
solid_color
.
color
.
a
)
DisplayItem
:
:
Text
(
_
)
=
>
"
Text
"
.
to_owned
(
)
DisplayItem
:
:
Image
(
_
)
=
>
"
Image
"
.
to_owned
(
)
DisplayItem
:
:
Border
(
_
)
=
>
"
Border
"
.
to_owned
(
)
DisplayItem
:
:
Gradient
(
_
)
=
>
"
Gradient
"
.
to_owned
(
)
DisplayItem
:
:
RadialGradient
(
_
)
=
>
"
RadialGradient
"
.
to_owned
(
)
DisplayItem
:
:
Line
(
_
)
=
>
"
Line
"
.
to_owned
(
)
DisplayItem
:
:
BoxShadow
(
_
)
=
>
"
BoxShadow
"
.
to_owned
(
)
DisplayItem
:
:
PushTextShadow
(
_
)
=
>
"
PushTextShadow
"
.
to_owned
(
)
DisplayItem
:
:
PopAllTextShadows
(
_
)
=
>
"
PopTextShadow
"
.
to_owned
(
)
DisplayItem
:
:
Iframe
(
_
)
=
>
"
Iframe
"
.
to_owned
(
)
DisplayItem
:
:
PushStackingContext
(
_
)
|
DisplayItem
:
:
PopStackingContext
(
_
)
|
DisplayItem
:
:
DefineClipScrollNode
(
_
)
=
>
"
"
.
to_owned
(
)
}
self
.
bounds
(
)
self
.
base
(
)
.
local_clip
)
}
}
#
[
derive
(
Clone
Copy
Deserialize
MallocSizeOf
Serialize
)
]
pub
struct
WebRenderImageInfo
{
pub
width
:
u32
pub
height
:
u32
pub
format
:
PixelFormat
pub
key
:
Option
<
ImageKey
>
}
impl
WebRenderImageInfo
{
#
[
inline
]
pub
fn
from_image
(
image
:
&
Image
)
-
>
WebRenderImageInfo
{
WebRenderImageInfo
{
width
:
image
.
width
height
:
image
.
height
format
:
image
.
format
key
:
image
.
id
}
}
}
pub
type
ScrollOffsetMap
=
HashMap
<
ExternalScrollId
Vector2D
<
f32
>
>
;
pub
trait
SimpleMatrixDetection
{
fn
is_identity_or_simple_translation
(
&
self
)
-
>
bool
;
}
impl
SimpleMatrixDetection
for
LayoutTransform
{
#
[
inline
]
fn
is_identity_or_simple_translation
(
&
self
)
-
>
bool
{
let
(
_0
_1
)
=
(
Zero
:
:
zero
(
)
One
:
:
one
(
)
)
;
self
.
m11
=
=
_1
&
&
self
.
m12
=
=
_0
&
&
self
.
m13
=
=
_0
&
&
self
.
m14
=
=
_0
&
&
self
.
m21
=
=
_0
&
&
self
.
m22
=
=
_1
&
&
self
.
m23
=
=
_0
&
&
self
.
m24
=
=
_0
&
&
self
.
m31
=
=
_0
&
&
self
.
m32
=
=
_0
&
&
self
.
m33
=
=
_1
&
&
self
.
m34
=
=
_0
&
&
self
.
m44
=
=
_1
}
}
