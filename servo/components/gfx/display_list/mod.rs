#
!
[
deny
(
unsafe_blocks
)
]
use
color
:
:
Color
;
use
display_list
:
:
optimizer
:
:
DisplayListOptimizer
;
use
paint_context
:
:
{
PaintContext
ToAzureRect
}
;
use
self
:
:
DisplayItem
:
:
*
;
use
self
:
:
DisplayItemIterator
:
:
*
;
use
text
:
:
glyph
:
:
CharIndex
;
use
text
:
:
TextRun
;
use
azure
:
:
azure
:
:
AzFloat
;
use
collections
:
:
dlist
:
:
{
mod
DList
}
;
use
geom
:
:
{
Point2D
Rect
SideOffsets2D
Size2D
Matrix2D
}
;
use
geom
:
:
num
:
:
Zero
;
use
libc
:
:
uintptr_t
;
use
paint_task
:
:
PaintLayer
;
use
servo_msg
:
:
compositor_msg
:
:
LayerId
;
use
servo_net
:
:
image
:
:
base
:
:
Image
;
use
servo_util
:
:
cursor
:
:
Cursor
;
use
servo_util
:
:
dlist
as
servo_dlist
;
use
servo_util
:
:
geometry
:
:
{
mod
Au
MAX_RECT
ZERO_RECT
}
;
use
servo_util
:
:
range
:
:
Range
;
use
servo_util
:
:
smallvec
:
:
{
SmallVec
SmallVec8
}
;
use
std
:
:
fmt
;
use
std
:
:
slice
:
:
Items
;
use
std
:
:
sync
:
:
Arc
;
use
style
:
:
ComputedValues
;
use
style
:
:
computed_values
:
:
{
border_style
cursor
filter
pointer_events
}
;
pub
use
azure
:
:
azure_hl
:
:
GradientStop
;
pub
mod
optimizer
;
pub
static
BOX_SHADOW_INFLATION_FACTOR
:
i32
=
3
;
#
[
deriving
(
Clone
PartialEq
Copy
)
]
pub
struct
OpaqueNode
(
pub
uintptr_t
)
;
impl
OpaqueNode
{
pub
fn
id
(
&
self
)
-
>
uintptr_t
{
let
OpaqueNode
(
pointer
)
=
*
self
;
pointer
}
}
pub
struct
DisplayList
{
pub
background_and_borders
:
DList
<
DisplayItem
>
pub
block_backgrounds_and_borders
:
DList
<
DisplayItem
>
pub
floats
:
DList
<
DisplayItem
>
pub
content
:
DList
<
DisplayItem
>
pub
outlines
:
DList
<
DisplayItem
>
pub
children
:
DList
<
Arc
<
StackingContext
>
>
}
impl
DisplayList
{
#
[
inline
]
pub
fn
new
(
)
-
>
DisplayList
{
DisplayList
{
background_and_borders
:
DList
:
:
new
(
)
block_backgrounds_and_borders
:
DList
:
:
new
(
)
floats
:
DList
:
:
new
(
)
content
:
DList
:
:
new
(
)
outlines
:
DList
:
:
new
(
)
children
:
DList
:
:
new
(
)
}
}
#
[
inline
]
pub
fn
append_from
(
&
mut
self
other
:
&
mut
DisplayList
)
{
servo_dlist
:
:
append_from
(
&
mut
self
.
background_and_borders
&
mut
other
.
background_and_borders
)
;
servo_dlist
:
:
append_from
(
&
mut
self
.
block_backgrounds_and_borders
&
mut
other
.
block_backgrounds_and_borders
)
;
servo_dlist
:
:
append_from
(
&
mut
self
.
floats
&
mut
other
.
floats
)
;
servo_dlist
:
:
append_from
(
&
mut
self
.
content
&
mut
other
.
content
)
;
servo_dlist
:
:
append_from
(
&
mut
self
.
outlines
&
mut
other
.
outlines
)
;
servo_dlist
:
:
append_from
(
&
mut
self
.
children
&
mut
other
.
children
)
;
}
#
[
inline
]
pub
fn
form_float_pseudo_stacking_context
(
&
mut
self
)
{
servo_dlist
:
:
prepend_from
(
&
mut
self
.
floats
&
mut
self
.
outlines
)
;
servo_dlist
:
:
prepend_from
(
&
mut
self
.
floats
&
mut
self
.
content
)
;
servo_dlist
:
:
prepend_from
(
&
mut
self
.
floats
&
mut
self
.
block_backgrounds_and_borders
)
;
servo_dlist
:
:
prepend_from
(
&
mut
self
.
floats
&
mut
self
.
background_and_borders
)
;
}
pub
fn
all_display_items
(
&
self
)
-
>
Vec
<
DisplayItem
>
{
let
mut
result
=
Vec
:
:
new
(
)
;
for
display_item
in
self
.
background_and_borders
.
iter
(
)
{
result
.
push
(
(
*
display_item
)
.
clone
(
)
)
}
for
display_item
in
self
.
block_backgrounds_and_borders
.
iter
(
)
{
result
.
push
(
(
*
display_item
)
.
clone
(
)
)
}
for
display_item
in
self
.
floats
.
iter
(
)
{
result
.
push
(
(
*
display_item
)
.
clone
(
)
)
}
for
display_item
in
self
.
content
.
iter
(
)
{
result
.
push
(
(
*
display_item
)
.
clone
(
)
)
}
for
display_item
in
self
.
outlines
.
iter
(
)
{
result
.
push
(
(
*
display_item
)
.
clone
(
)
)
}
result
}
}
pub
struct
StackingContext
{
pub
display_list
:
Box
<
DisplayList
>
pub
layer
:
Option
<
Arc
<
PaintLayer
>
>
pub
bounds
:
Rect
<
Au
>
pub
overflow
:
Rect
<
Au
>
pub
z_index
:
i32
pub
filters
:
filter
:
:
T
}
impl
StackingContext
{
#
[
inline
]
pub
fn
new
(
display_list
:
Box
<
DisplayList
>
bounds
:
&
Rect
<
Au
>
overflow
:
&
Rect
<
Au
>
z_index
:
i32
filters
:
filter
:
:
T
layer
:
Option
<
Arc
<
PaintLayer
>
>
)
-
>
StackingContext
{
StackingContext
{
display_list
:
display_list
layer
:
layer
bounds
:
*
bounds
overflow
:
*
overflow
z_index
:
z_index
filters
:
filters
}
}
pub
fn
optimize_and_draw_into_context
(
&
self
paint_context
:
&
mut
PaintContext
tile_bounds
:
&
Rect
<
AzFloat
>
transform
:
&
Matrix2D
<
AzFloat
>
clip_rect
:
Option
<
&
Rect
<
Au
>
>
)
{
let
temporary_draw_target
=
paint_context
.
get_or_create_temporary_draw_target
(
&
self
.
filters
)
;
{
let
mut
paint_subcontext
=
PaintContext
{
draw_target
:
temporary_draw_target
.
clone
(
)
font_ctx
:
&
mut
*
paint_context
.
font_ctx
page_rect
:
paint_context
.
page_rect
screen_rect
:
paint_context
.
screen_rect
clip_rect
:
clip_rect
.
map
(
|
clip_rect
|
*
clip_rect
)
transient_clip
:
None
}
;
let
display_list
=
DisplayListOptimizer
:
:
new
(
tile_bounds
)
.
optimize
(
&
*
self
.
display_list
)
;
let
mut
positioned_children
=
SmallVec8
:
:
new
(
)
;
for
kid
in
display_list
.
children
.
iter
(
)
{
positioned_children
.
push
(
(
*
kid
)
.
clone
(
)
)
;
}
positioned_children
.
as_slice_mut
(
)
.
sort_by
(
|
this
other
|
this
.
z_index
.
cmp
(
&
other
.
z_index
)
)
;
let
old_transform
=
paint_subcontext
.
draw_target
.
get_transform
(
)
;
paint_subcontext
.
draw_target
.
set_transform
(
transform
)
;
paint_subcontext
.
push_clip_if_applicable
(
)
;
for
display_item
in
display_list
.
background_and_borders
.
iter
(
)
{
display_item
.
draw_into_context
(
&
mut
paint_subcontext
)
}
for
positioned_kid
in
positioned_children
.
iter
(
)
{
if
positioned_kid
.
z_index
>
=
0
{
break
}
if
positioned_kid
.
layer
.
is_none
(
)
{
let
new_transform
=
transform
.
translate
(
positioned_kid
.
bounds
.
origin
.
x
.
to_nearest_px
(
)
as
AzFloat
positioned_kid
.
bounds
.
origin
.
y
.
to_nearest_px
(
)
as
AzFloat
)
;
let
new_tile_rect
=
self
.
compute_tile_rect_for_child_stacking_context
(
tile_bounds
&
*
*
positioned_kid
)
;
positioned_kid
.
optimize_and_draw_into_context
(
&
mut
paint_subcontext
&
new_tile_rect
&
new_transform
Some
(
&
positioned_kid
.
overflow
)
)
}
}
for
display_item
in
display_list
.
block_backgrounds_and_borders
.
iter
(
)
{
display_item
.
draw_into_context
(
&
mut
paint_subcontext
)
}
for
display_item
in
display_list
.
floats
.
iter
(
)
{
display_item
.
draw_into_context
(
&
mut
paint_subcontext
)
}
for
display_item
in
display_list
.
content
.
iter
(
)
{
display_item
.
draw_into_context
(
&
mut
paint_subcontext
)
}
for
positioned_kid
in
positioned_children
.
iter
(
)
{
if
positioned_kid
.
z_index
<
0
{
continue
}
if
positioned_kid
.
layer
.
is_none
(
)
{
let
new_transform
=
transform
.
translate
(
positioned_kid
.
bounds
.
origin
.
x
.
to_nearest_px
(
)
as
AzFloat
positioned_kid
.
bounds
.
origin
.
y
.
to_nearest_px
(
)
as
AzFloat
)
;
let
new_tile_rect
=
self
.
compute_tile_rect_for_child_stacking_context
(
tile_bounds
&
*
*
positioned_kid
)
;
positioned_kid
.
optimize_and_draw_into_context
(
&
mut
paint_subcontext
&
new_tile_rect
&
new_transform
Some
(
&
positioned_kid
.
overflow
)
)
}
}
for
display_item
in
display_list
.
outlines
.
iter
(
)
{
display_item
.
draw_into_context
(
&
mut
paint_subcontext
)
}
paint_subcontext
.
remove_transient_clip_if_applicable
(
)
;
paint_subcontext
.
pop_clip_if_applicable
(
)
;
paint_subcontext
.
draw_target
.
set_transform
(
&
old_transform
)
}
paint_context
.
draw_temporary_draw_target_if_necessary
(
&
temporary_draw_target
&
self
.
filters
)
}
fn
compute_tile_rect_for_child_stacking_context
(
&
self
tile_bounds
:
&
Rect
<
AzFloat
>
child_stacking_context
:
&
StackingContext
)
-
>
Rect
<
AzFloat
>
{
static
ZERO_AZURE_RECT
:
Rect
<
f32
>
=
Rect
{
origin
:
Point2D
{
x
:
0
.
0
y
:
0
.
0
}
size
:
Size2D
{
width
:
0
.
0
height
:
0
.
0
}
}
;
let
child_stacking_context_overflow
=
child_stacking_context
.
overflow
.
translate
(
&
child_stacking_context
.
bounds
.
origin
)
.
to_azure_rect
(
)
;
let
tile_subrect
=
tile_bounds
.
intersection
(
&
child_stacking_context_overflow
)
.
unwrap_or
(
ZERO_AZURE_RECT
)
;
tile_subrect
.
translate
(
&
-
child_stacking_context
.
bounds
.
to_azure_rect
(
)
.
origin
)
}
pub
fn
hit_test
(
&
self
point
:
Point2D
<
Au
>
result
:
&
mut
Vec
<
DisplayItemMetadata
>
topmost_only
:
bool
)
{
fn
hit_test_in_list
<
'
a
I
>
(
point
:
Point2D
<
Au
>
result
:
&
mut
Vec
<
DisplayItemMetadata
>
topmost_only
:
bool
mut
iterator
:
I
)
where
I
:
Iterator
<
&
'
a
DisplayItem
>
{
for
item
in
iterator
{
if
!
item
.
base
(
)
.
clip
.
might_intersect_point
(
&
point
)
{
continue
}
if
!
geometry
:
:
rect_contains_point
(
item
.
bounds
(
)
point
)
{
continue
}
if
item
.
base
(
)
.
metadata
.
pointing
.
is_none
(
)
{
continue
}
match
*
item
{
DisplayItem
:
:
BorderClass
(
ref
border
)
=
>
{
let
interior_rect
=
Rect
(
Point2D
(
border
.
base
.
bounds
.
origin
.
x
+
border
.
border_widths
.
left
border
.
base
.
bounds
.
origin
.
y
+
border
.
border_widths
.
top
)
Size2D
(
border
.
base
.
bounds
.
size
.
width
-
(
border
.
border_widths
.
left
+
border
.
border_widths
.
right
)
border
.
base
.
bounds
.
size
.
height
-
(
border
.
border_widths
.
top
+
border
.
border_widths
.
bottom
)
)
)
;
if
geometry
:
:
rect_contains_point
(
interior_rect
point
)
{
continue
}
}
_
=
>
{
}
}
result
.
push
(
item
.
base
(
)
.
metadata
)
;
if
topmost_only
{
return
}
}
}
debug_assert
!
(
!
topmost_only
|
|
result
.
is_empty
(
)
)
;
hit_test_in_list
(
point
result
topmost_only
self
.
display_list
.
outlines
.
iter
(
)
.
rev
(
)
)
;
if
topmost_only
&
&
!
result
.
is_empty
(
)
{
return
}
for
kid
in
self
.
display_list
.
children
.
iter
(
)
.
rev
(
)
{
if
kid
.
z_index
<
0
{
continue
}
kid
.
hit_test
(
point
result
topmost_only
)
;
if
topmost_only
&
&
!
result
.
is_empty
(
)
{
return
}
}
for
display_list
in
[
&
self
.
display_list
.
content
&
self
.
display_list
.
floats
&
self
.
display_list
.
block_backgrounds_and_borders
]
.
iter
(
)
{
hit_test_in_list
(
point
result
topmost_only
display_list
.
iter
(
)
.
rev
(
)
)
;
if
topmost_only
&
&
!
result
.
is_empty
(
)
{
return
}
}
for
kid
in
self
.
display_list
.
children
.
iter
(
)
.
rev
(
)
{
if
kid
.
z_index
>
=
0
{
continue
}
kid
.
hit_test
(
point
result
topmost_only
)
;
if
topmost_only
&
&
!
result
.
is_empty
(
)
{
return
}
}
hit_test_in_list
(
point
result
topmost_only
self
.
display_list
.
background_and_borders
.
iter
(
)
.
rev
(
)
)
}
}
pub
fn
find_stacking_context_with_layer_id
(
this
:
&
Arc
<
StackingContext
>
layer_id
:
LayerId
)
-
>
Option
<
Arc
<
StackingContext
>
>
{
match
this
.
layer
{
Some
(
ref
layer
)
if
layer
.
id
=
=
layer_id
=
>
return
Some
(
(
*
this
)
.
clone
(
)
)
Some
(
_
)
|
None
=
>
{
}
}
for
kid
in
this
.
display_list
.
children
.
iter
(
)
{
match
find_stacking_context_with_layer_id
(
kid
layer_id
)
{
Some
(
stacking_context
)
=
>
return
Some
(
stacking_context
)
None
=
>
{
}
}
}
None
}
#
[
deriving
(
Clone
)
]
pub
enum
DisplayItem
{
SolidColorClass
(
Box
<
SolidColorDisplayItem
>
)
TextClass
(
Box
<
TextDisplayItem
>
)
ImageClass
(
Box
<
ImageDisplayItem
>
)
BorderClass
(
Box
<
BorderDisplayItem
>
)
GradientClass
(
Box
<
GradientDisplayItem
>
)
LineClass
(
Box
<
LineDisplayItem
>
)
BoxShadowClass
(
Box
<
BoxShadowDisplayItem
>
)
}
#
[
deriving
(
Clone
)
]
pub
struct
BaseDisplayItem
{
pub
bounds
:
Rect
<
Au
>
pub
metadata
:
DisplayItemMetadata
pub
clip
:
ClippingRegion
}
impl
BaseDisplayItem
{
#
[
inline
(
always
)
]
pub
fn
new
(
bounds
:
Rect
<
Au
>
metadata
:
DisplayItemMetadata
clip
:
ClippingRegion
)
-
>
BaseDisplayItem
{
BaseDisplayItem
{
bounds
:
bounds
metadata
:
metadata
clip
:
clip
}
}
}
#
[
deriving
(
Clone
PartialEq
Show
)
]
pub
struct
ClippingRegion
{
pub
main
:
Rect
<
Au
>
pub
complex
:
Vec
<
ComplexClippingRegion
>
}
#
[
deriving
(
Clone
PartialEq
Show
)
]
pub
struct
ComplexClippingRegion
{
pub
rect
:
Rect
<
Au
>
pub
radii
:
BorderRadii
<
Au
>
}
impl
ClippingRegion
{
#
[
inline
]
pub
fn
empty
(
)
-
>
ClippingRegion
{
ClippingRegion
{
main
:
ZERO_RECT
complex
:
Vec
:
:
new
(
)
}
}
#
[
inline
]
pub
fn
max
(
)
-
>
ClippingRegion
{
ClippingRegion
{
main
:
MAX_RECT
complex
:
Vec
:
:
new
(
)
}
}
#
[
inline
]
pub
fn
from_rect
(
rect
:
&
Rect
<
Au
>
)
-
>
ClippingRegion
{
ClippingRegion
{
main
:
*
rect
complex
:
Vec
:
:
new
(
)
}
}
#
[
inline
]
pub
fn
intersect_rect
(
self
rect
:
&
Rect
<
Au
>
)
-
>
ClippingRegion
{
ClippingRegion
{
main
:
self
.
main
.
intersection
(
rect
)
.
unwrap_or
(
ZERO_RECT
)
complex
:
self
.
complex
}
}
#
[
inline
]
pub
fn
might_be_nonempty
(
&
self
)
-
>
bool
{
!
self
.
main
.
is_empty
(
)
}
#
[
inline
]
pub
fn
might_intersect_point
(
&
self
point
:
&
Point2D
<
Au
>
)
-
>
bool
{
geometry
:
:
rect_contains_point
(
self
.
main
*
point
)
&
&
self
.
complex
.
iter
(
)
.
all
(
|
complex
|
geometry
:
:
rect_contains_point
(
complex
.
rect
*
point
)
)
}
#
[
inline
]
pub
fn
might_intersect_rect
(
&
self
rect
:
&
Rect
<
Au
>
)
-
>
bool
{
self
.
main
.
intersects
(
rect
)
&
&
self
.
complex
.
iter
(
)
.
all
(
|
complex
|
complex
.
rect
.
intersects
(
rect
)
)
}
#
[
inline
]
pub
fn
bounding_rect
(
&
self
)
-
>
Rect
<
Au
>
{
let
mut
rect
=
self
.
main
;
for
complex
in
self
.
complex
.
iter
(
)
{
rect
=
rect
.
union
(
&
complex
.
rect
)
}
rect
}
#
[
inline
]
pub
fn
intersect_with_rounded_rect
(
mut
self
rect
:
&
Rect
<
Au
>
radii
:
&
BorderRadii
<
Au
>
)
-
>
ClippingRegion
{
self
.
complex
.
push
(
ComplexClippingRegion
{
rect
:
*
rect
radii
:
*
radii
}
)
;
self
}
#
[
inline
]
pub
fn
translate
(
&
self
delta
:
&
Point2D
<
Au
>
)
-
>
ClippingRegion
{
ClippingRegion
{
main
:
self
.
main
.
translate
(
delta
)
complex
:
self
.
complex
.
iter
(
)
.
map
(
|
complex
|
{
ComplexClippingRegion
{
rect
:
complex
.
rect
.
translate
(
delta
)
radii
:
complex
.
radii
}
}
)
.
collect
(
)
}
}
}
#
[
deriving
(
Clone
Copy
)
]
pub
struct
DisplayItemMetadata
{
pub
node
:
OpaqueNode
pub
pointing
:
Option
<
Cursor
>
}
impl
DisplayItemMetadata
{
#
[
inline
]
pub
fn
new
(
node
:
OpaqueNode
style
:
&
ComputedValues
default_cursor
:
Cursor
)
-
>
DisplayItemMetadata
{
DisplayItemMetadata
{
node
:
node
pointing
:
match
(
style
.
get_pointing
(
)
.
pointer_events
style
.
get_pointing
(
)
.
cursor
)
{
(
pointer_events
:
:
T
:
:
none
_
)
=
>
None
(
pointer_events
:
:
T
:
:
auto
cursor
:
:
T
:
:
AutoCursor
)
=
>
Some
(
default_cursor
)
(
pointer_events
:
:
T
:
:
auto
cursor
:
:
T
:
:
SpecifiedCursor
(
cursor
)
)
=
>
Some
(
cursor
)
}
}
}
}
#
[
deriving
(
Clone
)
]
pub
struct
SolidColorDisplayItem
{
pub
base
:
BaseDisplayItem
pub
color
:
Color
}
#
[
deriving
(
Clone
)
]
pub
struct
TextDisplayItem
{
pub
base
:
BaseDisplayItem
pub
text_run
:
Arc
<
Box
<
TextRun
>
>
pub
range
:
Range
<
CharIndex
>
pub
text_color
:
Color
pub
baseline_origin
:
Point2D
<
Au
>
pub
orientation
:
TextOrientation
}
#
[
deriving
(
Clone
Eq
PartialEq
)
]
pub
enum
TextOrientation
{
Upright
SidewaysLeft
SidewaysRight
}
#
[
deriving
(
Clone
)
]
pub
struct
ImageDisplayItem
{
pub
base
:
BaseDisplayItem
pub
image
:
Arc
<
Box
<
Image
>
>
pub
stretch_size
:
Size2D
<
Au
>
}
#
[
deriving
(
Clone
)
]
pub
struct
GradientDisplayItem
{
pub
base
:
BaseDisplayItem
pub
start_point
:
Point2D
<
Au
>
pub
end_point
:
Point2D
<
Au
>
pub
stops
:
Vec
<
GradientStop
>
}
#
[
deriving
(
Clone
)
]
pub
struct
BorderDisplayItem
{
pub
base
:
BaseDisplayItem
pub
border_widths
:
SideOffsets2D
<
Au
>
pub
color
:
SideOffsets2D
<
Color
>
pub
style
:
SideOffsets2D
<
border_style
:
:
T
>
pub
radius
:
BorderRadii
<
Au
>
}
#
[
deriving
(
Clone
Default
PartialEq
Show
Copy
)
]
pub
struct
BorderRadii
<
T
>
{
pub
top_left
:
T
pub
top_right
:
T
pub
bottom_right
:
T
pub
bottom_left
:
T
}
impl
<
T
>
BorderRadii
<
T
>
where
T
:
PartialEq
+
Zero
{
pub
fn
is_square
(
&
self
)
-
>
bool
{
let
zero
=
Zero
:
:
zero
(
)
;
self
.
top_left
=
=
zero
&
&
self
.
top_right
=
=
zero
&
&
self
.
bottom_right
=
=
zero
&
&
self
.
bottom_left
=
=
zero
}
}
#
[
deriving
(
Clone
)
]
pub
struct
LineDisplayItem
{
pub
base
:
BaseDisplayItem
pub
color
:
Color
pub
style
:
border_style
:
:
T
}
#
[
deriving
(
Clone
)
]
pub
struct
BoxShadowDisplayItem
{
pub
base
:
BaseDisplayItem
pub
box_bounds
:
Rect
<
Au
>
pub
offset
:
Point2D
<
Au
>
pub
color
:
Color
pub
blur_radius
:
Au
pub
spread_radius
:
Au
pub
inset
:
bool
}
pub
enum
DisplayItemIterator
<
'
a
>
{
Empty
Parent
(
dlist
:
:
Items
<
'
a
DisplayItem
>
)
}
impl
<
'
a
>
Iterator
<
&
'
a
DisplayItem
>
for
DisplayItemIterator
<
'
a
>
{
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
&
'
a
DisplayItem
>
{
match
*
self
{
DisplayItemIterator
:
:
Empty
=
>
None
DisplayItemIterator
:
:
Parent
(
ref
mut
subiterator
)
=
>
subiterator
.
next
(
)
}
}
}
impl
DisplayItem
{
fn
draw_into_context
(
&
self
paint_context
:
&
mut
PaintContext
)
{
{
let
this_clip
=
&
self
.
base
(
)
.
clip
;
match
paint_context
.
transient_clip
{
Some
(
ref
transient_clip
)
if
transient_clip
=
=
this_clip
=
>
{
}
Some
(
_
)
|
None
=
>
paint_context
.
push_transient_clip
(
(
*
this_clip
)
.
clone
(
)
)
}
}
match
*
self
{
DisplayItem
:
:
SolidColorClass
(
ref
solid_color
)
=
>
{
paint_context
.
draw_solid_color
(
&
solid_color
.
base
.
bounds
solid_color
.
color
)
}
DisplayItem
:
:
TextClass
(
ref
text
)
=
>
{
debug
!
(
"
Drawing
text
at
{
}
.
"
text
.
base
.
bounds
)
;
paint_context
.
draw_text
(
&
*
*
text
)
;
}
DisplayItem
:
:
ImageClass
(
ref
image_item
)
=
>
{
debug
!
(
"
Drawing
image
at
{
}
.
"
image_item
.
base
.
bounds
)
;
let
mut
y_offset
=
Au
(
0
)
;
while
y_offset
<
image_item
.
base
.
bounds
.
size
.
height
{
let
mut
x_offset
=
Au
(
0
)
;
while
x_offset
<
image_item
.
base
.
bounds
.
size
.
width
{
let
mut
bounds
=
image_item
.
base
.
bounds
;
bounds
.
origin
.
x
=
bounds
.
origin
.
x
+
x_offset
;
bounds
.
origin
.
y
=
bounds
.
origin
.
y
+
y_offset
;
bounds
.
size
=
image_item
.
stretch_size
;
paint_context
.
draw_image
(
bounds
image_item
.
image
.
clone
(
)
)
;
x_offset
=
x_offset
+
image_item
.
stretch_size
.
width
;
}
y_offset
=
y_offset
+
image_item
.
stretch_size
.
height
;
}
}
DisplayItem
:
:
BorderClass
(
ref
border
)
=
>
{
paint_context
.
draw_border
(
&
border
.
base
.
bounds
&
border
.
border_widths
&
border
.
radius
&
border
.
color
&
border
.
style
)
}
DisplayItem
:
:
GradientClass
(
ref
gradient
)
=
>
{
paint_context
.
draw_linear_gradient
(
&
gradient
.
base
.
bounds
&
gradient
.
start_point
&
gradient
.
end_point
gradient
.
stops
.
as_slice
(
)
)
;
}
DisplayItem
:
:
LineClass
(
ref
line
)
=
>
{
paint_context
.
draw_line
(
&
line
.
base
.
bounds
line
.
color
line
.
style
)
}
DisplayItem
:
:
BoxShadowClass
(
ref
box_shadow
)
=
>
{
paint_context
.
draw_box_shadow
(
&
box_shadow
.
box_bounds
&
box_shadow
.
offset
box_shadow
.
color
box_shadow
.
blur_radius
box_shadow
.
spread_radius
box_shadow
.
inset
)
}
}
}
pub
fn
base
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
BaseDisplayItem
{
match
*
self
{
DisplayItem
:
:
SolidColorClass
(
ref
solid_color
)
=
>
&
solid_color
.
base
DisplayItem
:
:
TextClass
(
ref
text
)
=
>
&
text
.
base
DisplayItem
:
:
ImageClass
(
ref
image_item
)
=
>
&
image_item
.
base
DisplayItem
:
:
BorderClass
(
ref
border
)
=
>
&
border
.
base
DisplayItem
:
:
GradientClass
(
ref
gradient
)
=
>
&
gradient
.
base
DisplayItem
:
:
LineClass
(
ref
line
)
=
>
&
line
.
base
DisplayItem
:
:
BoxShadowClass
(
ref
box_shadow
)
=
>
&
box_shadow
.
base
}
}
pub
fn
mut_base
<
'
a
>
(
&
'
a
mut
self
)
-
>
&
'
a
mut
BaseDisplayItem
{
match
*
self
{
DisplayItem
:
:
SolidColorClass
(
ref
mut
solid_color
)
=
>
&
mut
solid_color
.
base
DisplayItem
:
:
TextClass
(
ref
mut
text
)
=
>
&
mut
text
.
base
DisplayItem
:
:
ImageClass
(
ref
mut
image_item
)
=
>
&
mut
image_item
.
base
DisplayItem
:
:
BorderClass
(
ref
mut
border
)
=
>
&
mut
border
.
base
DisplayItem
:
:
GradientClass
(
ref
mut
gradient
)
=
>
&
mut
gradient
.
base
DisplayItem
:
:
LineClass
(
ref
mut
line
)
=
>
&
mut
line
.
base
DisplayItem
:
:
BoxShadowClass
(
ref
mut
box_shadow
)
=
>
&
mut
box_shadow
.
base
}
}
pub
fn
bounds
(
&
self
)
-
>
Rect
<
Au
>
{
self
.
base
(
)
.
bounds
}
pub
fn
debug_with_level
(
&
self
level
:
uint
)
{
let
mut
indent
=
String
:
:
new
(
)
;
for
_
in
range
(
0
level
)
{
indent
.
push_str
(
"
|
"
)
}
println
!
(
"
{
}
+
{
}
"
indent
self
)
;
}
}
impl
fmt
:
:
Show
for
DisplayItem
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
{
}
{
}
(
{
:
x
}
)
"
match
*
self
{
DisplayItem
:
:
SolidColorClass
(
_
)
=
>
"
SolidColor
"
DisplayItem
:
:
TextClass
(
_
)
=
>
"
Text
"
DisplayItem
:
:
ImageClass
(
_
)
=
>
"
Image
"
DisplayItem
:
:
BorderClass
(
_
)
=
>
"
Border
"
DisplayItem
:
:
GradientClass
(
_
)
=
>
"
Gradient
"
DisplayItem
:
:
LineClass
(
_
)
=
>
"
Line
"
DisplayItem
:
:
BoxShadowClass
(
_
)
=
>
"
BoxShadow
"
}
self
.
base
(
)
.
bounds
self
.
base
(
)
.
metadata
.
node
.
id
(
)
)
}
}
