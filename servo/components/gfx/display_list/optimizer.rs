use
display_list
:
:
{
DisplayItem
DisplayList
}
;
use
collections
:
:
dlist
:
:
DList
;
use
geom
:
:
rect
:
:
Rect
;
use
servo_util
:
:
geometry
:
:
Au
;
use
sync
:
:
Arc
;
pub
struct
DisplayListOptimizer
{
display_list
:
Arc
<
DisplayList
>
visible_rect
:
Rect
<
Au
>
}
impl
DisplayListOptimizer
{
pub
fn
new
(
display_list
:
Arc
<
DisplayList
>
visible_rect
:
Rect
<
Au
>
)
-
>
DisplayListOptimizer
{
DisplayListOptimizer
{
display_list
:
display_list
visible_rect
:
visible_rect
}
}
pub
fn
optimize
(
self
)
-
>
DisplayList
{
self
.
process_display_list
(
&
*
self
.
display_list
)
}
fn
process_display_list
(
&
self
display_list
:
&
DisplayList
)
-
>
DisplayList
{
let
mut
result
=
DList
:
:
new
(
)
;
for
item
in
display_list
.
iter
(
)
{
match
self
.
process_display_item
(
item
)
{
None
=
>
{
}
Some
(
display_item
)
=
>
result
.
push_back
(
display_item
)
}
}
DisplayList
{
list
:
result
}
}
fn
process_display_item
(
&
self
display_item
:
&
DisplayItem
)
-
>
Option
<
DisplayItem
>
{
if
!
self
.
visible_rect
.
intersects
(
&
display_item
.
base
(
)
.
bounds
)
|
|
!
self
.
visible_rect
.
intersects
(
&
display_item
.
base
(
)
.
clip_rect
)
{
None
}
else
{
Some
(
(
*
display_item
)
.
clone
(
)
)
}
}
}
