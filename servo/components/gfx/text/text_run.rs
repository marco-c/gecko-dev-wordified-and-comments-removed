use
app_units
:
:
Au
;
use
font
:
:
{
Font
FontHandleMethods
FontMetrics
ShapingFlags
}
;
use
font
:
:
{
RunMetrics
ShapingOptions
}
;
use
platform
:
:
font_template
:
:
FontTemplateData
;
use
range
:
:
Range
;
use
std
:
:
cell
:
:
Cell
;
use
std
:
:
cmp
:
:
{
Ordering
max
}
;
use
std
:
:
slice
:
:
Iter
;
use
std
:
:
sync
:
:
Arc
;
use
style
:
:
str
:
:
char_is_whitespace
;
use
text
:
:
glyph
:
:
{
ByteIndex
GlyphStore
}
;
use
unicode_bidi
as
bidi
;
use
webrender_api
;
use
xi_unicode
:
:
LineBreakIterator
;
thread_local
!
{
static
INDEX_OF_FIRST_GLYPH_RUN_CACHE
:
Cell
<
Option
<
(
*
const
TextRun
ByteIndex
usize
)
>
>
=
Cell
:
:
new
(
None
)
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
TextRun
{
pub
text
:
Arc
<
String
>
pub
font_template
:
Arc
<
FontTemplateData
>
pub
actual_pt_size
:
Au
pub
font_metrics
:
FontMetrics
pub
font_key
:
webrender_api
:
:
FontInstanceKey
pub
glyphs
:
Arc
<
Vec
<
GlyphRun
>
>
pub
bidi_level
:
bidi
:
:
Level
pub
extra_word_spacing
:
Au
}
impl
Drop
for
TextRun
{
fn
drop
(
&
mut
self
)
{
INDEX_OF_FIRST_GLYPH_RUN_CACHE
.
with
(
|
index_of_first_glyph_run_cache
|
{
if
let
Some
(
(
text_run_ptr
_
_
)
)
=
index_of_first_glyph_run_cache
.
get
(
)
{
if
text_run_ptr
=
=
(
self
as
*
const
TextRun
)
{
index_of_first_glyph_run_cache
.
set
(
None
)
;
}
}
}
)
}
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
GlyphRun
{
pub
glyph_store
:
Arc
<
GlyphStore
>
pub
range
:
Range
<
ByteIndex
>
}
pub
struct
NaturalWordSliceIterator
<
'
a
>
{
glyphs
:
&
'
a
[
GlyphRun
]
index
:
usize
range
:
Range
<
ByteIndex
>
reverse
:
bool
}
impl
GlyphRun
{
fn
compare
(
&
self
key
:
&
ByteIndex
)
-
>
Ordering
{
if
*
key
<
self
.
range
.
begin
(
)
{
Ordering
:
:
Greater
}
else
if
*
key
>
=
self
.
range
.
end
(
)
{
Ordering
:
:
Less
}
else
{
Ordering
:
:
Equal
}
}
}
pub
struct
TextRunSlice
<
'
a
>
{
pub
glyphs
:
&
'
a
GlyphStore
pub
offset
:
ByteIndex
pub
range
:
Range
<
ByteIndex
>
}
impl
<
'
a
>
TextRunSlice
<
'
a
>
{
#
[
inline
]
pub
fn
text_run_range
(
&
self
)
-
>
Range
<
ByteIndex
>
{
let
mut
range
=
self
.
range
;
range
.
shift_by
(
self
.
offset
)
;
range
}
}
impl
<
'
a
>
Iterator
for
NaturalWordSliceIterator
<
'
a
>
{
type
Item
=
TextRunSlice
<
'
a
>
;
#
[
inline
(
always
)
]
fn
next
(
&
mut
self
)
-
>
Option
<
TextRunSlice
<
'
a
>
>
{
let
slice_glyphs
;
if
self
.
reverse
{
if
self
.
index
=
=
0
{
return
None
;
}
self
.
index
-
=
1
;
slice_glyphs
=
&
self
.
glyphs
[
self
.
index
]
;
}
else
{
if
self
.
index
>
=
self
.
glyphs
.
len
(
)
{
return
None
;
}
slice_glyphs
=
&
self
.
glyphs
[
self
.
index
]
;
self
.
index
+
=
1
;
}
let
mut
byte_range
=
self
.
range
.
intersect
(
&
slice_glyphs
.
range
)
;
let
slice_range_begin
=
slice_glyphs
.
range
.
begin
(
)
;
byte_range
.
shift_by
(
-
slice_range_begin
)
;
if
!
byte_range
.
is_empty
(
)
{
Some
(
TextRunSlice
{
glyphs
:
&
*
slice_glyphs
.
glyph_store
offset
:
slice_range_begin
range
:
byte_range
}
)
}
else
{
None
}
}
}
pub
struct
CharacterSliceIterator
<
'
a
>
{
text
:
&
'
a
str
glyph_run
:
Option
<
&
'
a
GlyphRun
>
glyph_run_iter
:
Iter
<
'
a
GlyphRun
>
range
:
Range
<
ByteIndex
>
}
impl
<
'
a
>
Iterator
for
CharacterSliceIterator
<
'
a
>
{
type
Item
=
TextRunSlice
<
'
a
>
;
#
[
inline
(
always
)
]
fn
next
(
&
mut
self
)
-
>
Option
<
TextRunSlice
<
'
a
>
>
{
let
glyph_run
=
match
self
.
glyph_run
{
None
=
>
return
None
Some
(
glyph_run
)
=
>
glyph_run
}
;
debug_assert
!
(
!
self
.
range
.
is_empty
(
)
)
;
let
byte_start
=
self
.
range
.
begin
(
)
;
let
byte_len
=
match
self
.
text
[
byte_start
.
to_usize
(
)
.
.
]
.
chars
(
)
.
next
(
)
{
Some
(
ch
)
=
>
ByteIndex
(
ch
.
len_utf8
(
)
as
isize
)
None
=
>
unreachable
!
(
)
}
;
self
.
range
.
adjust_by
(
byte_len
-
byte_len
)
;
if
self
.
range
.
is_empty
(
)
{
self
.
glyph_run
=
None
}
else
if
self
.
range
.
intersect
(
&
glyph_run
.
range
)
.
is_empty
(
)
{
self
.
glyph_run
=
self
.
glyph_run_iter
.
next
(
)
;
}
let
index_within_glyph_run
=
byte_start
-
glyph_run
.
range
.
begin
(
)
;
Some
(
TextRunSlice
{
glyphs
:
&
*
glyph_run
.
glyph_store
offset
:
glyph_run
.
range
.
begin
(
)
range
:
Range
:
:
new
(
index_within_glyph_run
byte_len
)
}
)
}
}
impl
<
'
a
>
TextRun
{
pub
fn
new
(
font
:
&
mut
Font
text
:
String
options
:
&
ShapingOptions
bidi_level
:
bidi
:
:
Level
)
-
>
TextRun
{
let
glyphs
=
TextRun
:
:
break_and_shape
(
font
&
text
options
)
;
TextRun
{
text
:
Arc
:
:
new
(
text
)
font_metrics
:
font
.
metrics
.
clone
(
)
font_template
:
font
.
handle
.
template
(
)
font_key
:
font
.
font_key
actual_pt_size
:
font
.
actual_pt_size
glyphs
:
Arc
:
:
new
(
glyphs
)
bidi_level
:
bidi_level
extra_word_spacing
:
Au
(
0
)
}
}
pub
fn
break_and_shape
(
font
:
&
mut
Font
text
:
&
str
options
:
&
ShapingOptions
)
-
>
Vec
<
GlyphRun
>
{
let
mut
glyphs
=
vec
!
(
)
;
let
mut
slice
=
0
.
.
0
;
for
(
idx
_is_hard_break
)
in
LineBreakIterator
:
:
new
(
text
)
{
slice
.
end
=
idx
;
let
word
=
&
text
[
slice
.
clone
(
)
]
;
let
mut
whitespace
=
slice
.
end
.
.
slice
.
end
;
if
let
Some
(
(
i
_
)
)
=
word
.
char_indices
(
)
.
rev
(
)
.
take_while
(
|
&
(
_
c
)
|
char_is_whitespace
(
c
)
)
.
last
(
)
{
whitespace
.
start
=
slice
.
start
+
i
;
slice
.
end
=
whitespace
.
start
;
}
else
if
idx
!
=
text
.
len
(
)
&
&
options
.
flags
.
contains
(
ShapingFlags
:
:
KEEP_ALL_FLAG
)
{
continue
;
}
if
slice
.
len
(
)
>
0
{
glyphs
.
push
(
GlyphRun
{
glyph_store
:
font
.
shape_text
(
&
text
[
slice
.
clone
(
)
]
options
)
range
:
Range
:
:
new
(
ByteIndex
(
slice
.
start
as
isize
)
ByteIndex
(
slice
.
len
(
)
as
isize
)
)
}
)
;
}
if
whitespace
.
len
(
)
>
0
{
let
mut
options
=
options
.
clone
(
)
;
options
.
flags
.
insert
(
ShapingFlags
:
:
IS_WHITESPACE_SHAPING_FLAG
)
;
glyphs
.
push
(
GlyphRun
{
glyph_store
:
font
.
shape_text
(
&
text
[
whitespace
.
clone
(
)
]
&
options
)
range
:
Range
:
:
new
(
ByteIndex
(
whitespace
.
start
as
isize
)
ByteIndex
(
whitespace
.
len
(
)
as
isize
)
)
}
)
;
}
slice
.
start
=
whitespace
.
end
;
}
glyphs
}
pub
fn
ascent
(
&
self
)
-
>
Au
{
self
.
font_metrics
.
ascent
}
pub
fn
descent
(
&
self
)
-
>
Au
{
self
.
font_metrics
.
descent
}
pub
fn
advance_for_range
(
&
self
range
:
&
Range
<
ByteIndex
>
)
-
>
Au
{
if
range
.
is_empty
(
)
{
return
Au
(
0
)
}
self
.
natural_word_slices_in_range
(
range
)
.
fold
(
Au
(
0
)
|
advance
slice
|
{
advance
+
slice
.
glyphs
.
advance_for_byte_range
(
&
slice
.
range
self
.
extra_word_spacing
)
}
)
}
pub
fn
metrics_for_range
(
&
self
range
:
&
Range
<
ByteIndex
>
)
-
>
RunMetrics
{
RunMetrics
:
:
new
(
self
.
advance_for_range
(
range
)
self
.
font_metrics
.
ascent
self
.
font_metrics
.
descent
)
}
pub
fn
metrics_for_slice
(
&
self
glyphs
:
&
GlyphStore
slice_range
:
&
Range
<
ByteIndex
>
)
-
>
RunMetrics
{
RunMetrics
:
:
new
(
glyphs
.
advance_for_byte_range
(
slice_range
self
.
extra_word_spacing
)
self
.
font_metrics
.
ascent
self
.
font_metrics
.
descent
)
}
pub
fn
min_width_for_range
(
&
self
range
:
&
Range
<
ByteIndex
>
)
-
>
Au
{
debug
!
(
"
iterating
outer
range
{
:
?
}
"
range
)
;
self
.
natural_word_slices_in_range
(
range
)
.
fold
(
Au
(
0
)
|
max_piece_width
slice
|
{
debug
!
(
"
iterated
on
{
:
?
}
[
{
:
?
}
]
"
slice
.
offset
slice
.
range
)
;
max
(
max_piece_width
self
.
advance_for_range
(
&
slice
.
range
)
)
}
)
}
pub
fn
minimum_splittable_inline_size
(
&
self
range
:
&
Range
<
ByteIndex
>
)
-
>
Au
{
match
self
.
natural_word_slices_in_range
(
range
)
.
next
(
)
{
None
=
>
Au
(
0
)
Some
(
slice
)
=
>
self
.
advance_for_range
(
&
slice
.
range
)
}
}
fn
index_of_first_glyph_run_containing
(
&
self
index
:
ByteIndex
)
-
>
Option
<
usize
>
{
let
self_ptr
=
self
as
*
const
TextRun
;
INDEX_OF_FIRST_GLYPH_RUN_CACHE
.
with
(
|
index_of_first_glyph_run_cache
|
{
if
let
Some
(
(
last_text_run
last_index
last_result
)
)
=
index_of_first_glyph_run_cache
.
get
(
)
{
if
last_text_run
=
=
self_ptr
&
&
last_index
=
=
index
{
return
Some
(
last_result
)
}
}
if
let
Ok
(
result
)
=
(
&
*
*
self
.
glyphs
)
.
binary_search_by
(
|
current
|
current
.
compare
(
&
index
)
)
{
index_of_first_glyph_run_cache
.
set
(
Some
(
(
self_ptr
index
result
)
)
)
;
Some
(
result
)
}
else
{
None
}
}
)
}
pub
fn
range_index_of_advance
(
&
self
range
:
&
Range
<
ByteIndex
>
advance
:
Au
)
-
>
usize
{
let
mut
remaining
=
advance
;
self
.
natural_word_slices_in_range
(
range
)
.
map
(
|
slice
|
{
let
(
slice_index
slice_advance
)
=
slice
.
glyphs
.
range_index_of_advance
(
&
slice
.
range
remaining
self
.
extra_word_spacing
)
;
remaining
-
=
slice_advance
;
slice_index
}
)
.
sum
(
)
}
pub
fn
natural_word_slices_in_range
(
&
'
a
self
range
:
&
Range
<
ByteIndex
>
)
-
>
NaturalWordSliceIterator
<
'
a
>
{
let
index
=
match
self
.
index_of_first_glyph_run_containing
(
range
.
begin
(
)
)
{
None
=
>
self
.
glyphs
.
len
(
)
Some
(
index
)
=
>
index
}
;
NaturalWordSliceIterator
{
glyphs
:
&
self
.
glyphs
[
.
.
]
index
:
index
range
:
*
range
reverse
:
false
}
}
pub
fn
natural_word_slices_in_visual_order
(
&
'
a
self
range
:
&
Range
<
ByteIndex
>
)
-
>
NaturalWordSliceIterator
<
'
a
>
{
let
reverse
=
self
.
bidi_level
.
is_rtl
(
)
;
let
index
=
if
reverse
{
match
self
.
index_of_first_glyph_run_containing
(
range
.
end
(
)
-
ByteIndex
(
1
)
)
{
Some
(
i
)
=
>
i
+
1
None
=
>
0
}
}
else
{
match
self
.
index_of_first_glyph_run_containing
(
range
.
begin
(
)
)
{
Some
(
i
)
=
>
i
None
=
>
self
.
glyphs
.
len
(
)
}
}
;
NaturalWordSliceIterator
{
glyphs
:
&
self
.
glyphs
[
.
.
]
index
:
index
range
:
*
range
reverse
:
reverse
}
}
pub
fn
character_slices_in_range
(
&
'
a
self
range
:
&
Range
<
ByteIndex
>
)
-
>
CharacterSliceIterator
<
'
a
>
{
let
index
=
match
self
.
index_of_first_glyph_run_containing
(
range
.
begin
(
)
)
{
None
=
>
self
.
glyphs
.
len
(
)
Some
(
index
)
=
>
index
}
;
let
mut
glyph_run_iter
=
self
.
glyphs
[
index
.
.
]
.
iter
(
)
;
let
first_glyph_run
=
glyph_run_iter
.
next
(
)
;
CharacterSliceIterator
{
text
:
&
self
.
text
glyph_run
:
first_glyph_run
glyph_run_iter
:
glyph_run_iter
range
:
*
range
}
}
}
