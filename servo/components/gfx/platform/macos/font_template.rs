use
core_graphics
:
:
data_provider
:
:
CGDataProvider
;
use
core_graphics
:
:
font
:
:
CGFont
;
use
core_text
:
:
font
:
:
CTFont
;
use
core_text
;
use
serde
:
:
de
:
:
{
Error
Visitor
}
;
use
serde
:
:
{
Deserialize
Deserializer
Serialize
Serializer
}
;
use
std
:
:
borrow
:
:
ToOwned
;
use
std
:
:
ops
:
:
Deref
;
use
std
:
:
sync
:
:
Mutex
;
use
string_cache
:
:
Atom
;
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
FontTemplateData
{
ctfont
:
CachedCTFont
pub
identifier
:
Atom
pub
font_data
:
Option
<
Vec
<
u8
>
>
}
unsafe
impl
Send
for
FontTemplateData
{
}
unsafe
impl
Sync
for
FontTemplateData
{
}
impl
FontTemplateData
{
pub
fn
new
(
identifier
:
Atom
font_data
:
Option
<
Vec
<
u8
>
>
)
-
>
FontTemplateData
{
FontTemplateData
{
ctfont
:
CachedCTFont
(
Mutex
:
:
new
(
None
)
)
identifier
:
identifier
.
to_owned
(
)
font_data
:
font_data
}
}
pub
fn
ctfont
(
&
self
)
-
>
Option
<
CTFont
>
{
let
mut
ctfont
=
self
.
ctfont
.
lock
(
)
.
unwrap
(
)
;
if
ctfont
.
is_none
(
)
{
*
ctfont
=
match
self
.
font_data
{
Some
(
ref
bytes
)
=
>
{
let
fontprov
=
CGDataProvider
:
:
from_buffer
(
bytes
)
;
let
cgfont_result
=
CGFont
:
:
from_data_provider
(
fontprov
)
;
match
cgfont_result
{
Ok
(
cgfont
)
=
>
Some
(
core_text
:
:
font
:
:
new_from_CGFont
(
&
cgfont
0
.
0
)
)
Err
(
_
)
=
>
None
}
}
None
=
>
core_text
:
:
font
:
:
new_from_name
(
self
.
identifier
.
as_slice
(
)
0
.
0
)
.
ok
(
)
}
}
ctfont
.
as_ref
(
)
.
map
(
|
ctfont
|
(
*
ctfont
)
.
clone
(
)
)
}
}
pub
struct
CachedCTFont
(
Mutex
<
Option
<
CTFont
>
>
)
;
impl
Deref
for
CachedCTFont
{
type
Target
=
Mutex
<
Option
<
CTFont
>
>
;
fn
deref
(
&
self
)
-
>
&
Mutex
<
Option
<
CTFont
>
>
{
&
self
.
0
}
}
impl
Serialize
for
CachedCTFont
{
fn
serialize
<
S
>
(
&
self
serializer
:
&
mut
S
)
-
>
Result
<
(
)
S
:
:
Error
>
where
S
:
Serializer
{
serializer
.
visit_none
(
)
}
}
impl
Deserialize
for
CachedCTFont
{
fn
deserialize
<
D
>
(
deserializer
:
&
mut
D
)
-
>
Result
<
CachedCTFont
D
:
:
Error
>
where
D
:
Deserializer
{
struct
NoneOptionVisitor
;
impl
Visitor
for
NoneOptionVisitor
{
type
Value
=
CachedCTFont
;
#
[
inline
]
fn
visit_none
<
E
>
(
&
mut
self
)
-
>
Result
<
CachedCTFont
E
>
where
E
:
Error
{
Ok
(
CachedCTFont
(
Mutex
:
:
new
(
None
)
)
)
}
}
deserializer
.
visit_option
(
NoneOptionVisitor
)
}
}
