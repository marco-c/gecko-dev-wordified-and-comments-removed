use
std
:
:
fs
:
:
File
;
use
std
:
:
io
:
:
Read
;
use
string_cache
:
:
Atom
;
use
webrender_traits
:
:
NativeFontHandle
;
#
[
derive
(
Deserialize
Serialize
Debug
)
]
pub
struct
FontTemplateData
{
pub
bytes
:
Vec
<
u8
>
pub
identifier
:
Atom
}
impl
FontTemplateData
{
pub
fn
new
(
identifier
:
Atom
font_data
:
Option
<
Vec
<
u8
>
>
)
-
>
FontTemplateData
{
let
bytes
=
match
font_data
{
Some
(
bytes
)
=
>
{
bytes
}
None
=
>
{
let
mut
file
=
File
:
:
open
(
&
*
identifier
)
.
unwrap
(
)
;
let
mut
buffer
=
vec
!
[
]
;
file
.
read_to_end
(
&
mut
buffer
)
.
unwrap
(
)
;
buffer
}
}
;
FontTemplateData
{
bytes
:
bytes
identifier
:
identifier
}
}
pub
fn
bytes
(
&
self
)
-
>
Vec
<
u8
>
{
self
.
bytes
.
clone
(
)
}
pub
fn
bytes_if_in_memory
(
&
self
)
-
>
Option
<
Vec
<
u8
>
>
{
Some
(
self
.
bytes
(
)
)
}
pub
fn
native_font
(
&
self
)
-
>
Option
<
NativeFontHandle
>
{
None
}
}
