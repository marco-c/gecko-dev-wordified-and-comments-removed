use
servo_atoms
:
:
Atom
;
use
std
:
:
fmt
;
use
std
:
:
fs
:
:
File
;
use
std
:
:
io
:
:
{
Read
Error
}
;
use
webrender_api
:
:
NativeFontHandle
;
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
FontTemplateData
{
pub
bytes
:
Vec
<
u8
>
pub
identifier
:
Atom
}
impl
fmt
:
:
Debug
for
FontTemplateData
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
fmt
.
debug_struct
(
"
FontTemplateData
"
)
.
field
(
"
bytes
"
&
format
!
(
"
[
{
}
bytes
]
"
self
.
bytes
.
len
(
)
)
)
.
field
(
"
identifier
"
&
self
.
identifier
)
.
finish
(
)
}
}
impl
FontTemplateData
{
pub
fn
new
(
identifier
:
Atom
font_data
:
Option
<
Vec
<
u8
>
>
)
-
>
Result
<
FontTemplateData
Error
>
{
let
bytes
=
match
font_data
{
Some
(
bytes
)
=
>
{
bytes
}
None
=
>
{
let
mut
file
=
File
:
:
open
(
&
*
identifier
)
?
;
let
mut
buffer
=
vec
!
[
]
;
file
.
read_to_end
(
&
mut
buffer
)
.
unwrap
(
)
;
buffer
}
}
;
Ok
(
FontTemplateData
{
bytes
:
bytes
identifier
:
identifier
}
)
}
pub
fn
bytes
(
&
self
)
-
>
Vec
<
u8
>
{
self
.
bytes
.
clone
(
)
}
pub
fn
bytes_if_in_memory
(
&
self
)
-
>
Option
<
Vec
<
u8
>
>
{
Some
(
self
.
bytes
(
)
)
}
pub
fn
native_font
(
&
self
)
-
>
Option
<
NativeFontHandle
>
{
None
}
}
