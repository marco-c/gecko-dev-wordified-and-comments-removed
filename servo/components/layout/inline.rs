#
!
[
deny
(
unsafe_block
)
]
use
css
:
:
node_style
:
:
StyledNode
;
use
context
:
:
LayoutContext
;
use
floats
:
:
{
FloatLeft
Floats
PlacementInfo
}
;
use
flow
:
:
{
BaseFlow
FlowClass
Flow
InlineFlowClass
}
;
use
flow
;
use
layout_debug
;
use
fragment
:
:
{
Fragment
InlineBlockFragment
ScannedTextFragment
ScannedTextFragmentInfo
SplitInfo
}
;
use
model
:
:
IntrinsicISizes
;
use
text
;
use
wrapper
:
:
ThreadSafeLayoutNode
;
use
collections
:
:
{
Deque
RingBuf
}
;
use
geom
:
:
Rect
;
use
gfx
:
:
display_list
:
:
ContentLevel
;
use
gfx
:
:
font
:
:
FontMetrics
;
use
gfx
:
:
font_context
:
:
FontContext
;
use
geom
:
:
Size2D
;
use
gfx
:
:
text
:
:
glyph
:
:
CharIndex
;
use
servo_util
:
:
geometry
:
:
Au
;
use
servo_util
:
:
logical_geometry
:
:
{
LogicalRect
LogicalSize
}
;
use
servo_util
:
:
range
;
use
servo_util
:
:
range
:
:
{
EachIndex
Range
RangeIndex
IntRangeIndex
}
;
use
std
:
:
cmp
:
:
max
;
use
std
:
:
fmt
;
use
std
:
:
mem
;
use
std
:
:
num
;
use
std
:
:
u16
;
use
style
:
:
computed_values
:
:
{
text_align
vertical_align
white_space
}
;
use
style
:
:
ComputedValues
;
use
sync
:
:
Arc
;
static
FONT_SUBSCRIPT_OFFSET_RATIO
:
f64
=
0
.
20
;
static
FONT_SUPERSCRIPT_OFFSET_RATIO
:
f64
=
0
.
34
;
#
[
deriving
(
Encodable
)
]
pub
struct
Line
{
pub
range
:
Range
<
LineIndices
>
pub
bounds
:
LogicalRect
<
Au
>
pub
green_zone
:
LogicalSize
<
Au
>
}
int_range_index
!
{
#
[
deriving
(
Encodable
)
]
#
[
doc
=
"
The
index
of
a
fragment
in
a
flattened
vector
of
DOM
elements
.
"
]
struct
FragmentIndex
(
int
)
}
#
[
deriving
(
Clone
Encodable
PartialEq
PartialOrd
Eq
Ord
Zero
)
]
pub
struct
LineIndices
{
pub
fragment_index
:
FragmentIndex
pub
char_index
:
CharIndex
}
impl
RangeIndex
for
LineIndices
{
}
impl
Add
<
LineIndices
LineIndices
>
for
LineIndices
{
fn
add
(
&
self
other
:
&
LineIndices
)
-
>
LineIndices
{
if
cfg
!
(
not
(
ndebug
)
)
{
assert
!
(
other
.
fragment_index
=
=
num
:
:
zero
(
)
|
|
other
.
char_index
=
=
num
:
:
zero
(
)
"
Attempted
to
add
{
}
to
{
}
.
Both
the
fragment_index
and
\
char_index
of
the
RHS
are
non
-
zero
.
This
probably
was
a
\
mistake
!
"
self
other
)
;
}
LineIndices
{
fragment_index
:
self
.
fragment_index
+
other
.
fragment_index
char_index
:
self
.
char_index
+
other
.
char_index
}
}
}
impl
Sub
<
LineIndices
LineIndices
>
for
LineIndices
{
fn
sub
(
&
self
other
:
&
LineIndices
)
-
>
LineIndices
{
if
cfg
!
(
not
(
ndebug
)
)
{
assert
!
(
other
.
fragment_index
=
=
num
:
:
zero
(
)
|
|
other
.
char_index
=
=
num
:
:
zero
(
)
"
Attempted
to
subtract
{
}
from
{
}
.
Both
the
fragment_index
\
and
char_index
of
the
RHS
are
non
-
zero
.
This
probably
was
\
a
mistake
!
"
self
other
)
;
}
LineIndices
{
fragment_index
:
self
.
fragment_index
-
other
.
fragment_index
char_index
:
self
.
char_index
-
other
.
char_index
}
}
}
impl
Neg
<
LineIndices
>
for
LineIndices
{
fn
neg
(
&
self
)
-
>
LineIndices
{
if
cfg
!
(
not
(
ndebug
)
)
{
assert
!
(
self
.
fragment_index
=
=
num
:
:
zero
(
)
|
|
self
.
char_index
=
=
num
:
:
zero
(
)
"
Attempted
to
negate
{
}
.
Both
the
fragment_index
and
\
char_index
are
non
-
zero
.
This
probably
was
a
mistake
!
"
self
)
;
}
LineIndices
{
fragment_index
:
-
self
.
fragment_index
char_index
:
-
self
.
char_index
}
}
}
impl
fmt
:
:
Show
for
LineIndices
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
{
}
.
{
}
"
self
.
fragment_index
self
.
char_index
)
}
}
pub
fn
each_fragment_index
(
range
:
&
Range
<
LineIndices
>
)
-
>
EachIndex
<
int
FragmentIndex
>
{
range
:
:
each_index
(
range
.
begin
(
)
.
fragment_index
range
.
end
(
)
.
fragment_index
)
}
pub
fn
each_char_index
(
range
:
&
Range
<
LineIndices
>
)
-
>
EachIndex
<
int
CharIndex
>
{
range
:
:
each_index
(
range
.
begin
(
)
.
char_index
range
.
end
(
)
.
char_index
)
}
#
[
deriving
(
PartialEq
Eq
)
]
enum
WrapMode
{
WrapNormally
NoWrap
}
struct
LineBreaker
{
pub
floats
:
Floats
pub
new_fragments
:
Vec
<
Fragment
>
pub
work_list
:
RingBuf
<
Fragment
>
pub
pending_line
:
Line
pub
lines
:
Vec
<
Line
>
pub
cur_b
:
Au
}
impl
LineBreaker
{
pub
fn
new
(
float_ctx
:
Floats
)
-
>
LineBreaker
{
LineBreaker
{
new_fragments
:
Vec
:
:
new
(
)
work_list
:
RingBuf
:
:
new
(
)
pending_line
:
Line
{
range
:
Range
:
:
empty
(
)
bounds
:
LogicalRect
:
:
zero
(
float_ctx
.
writing_mode
)
green_zone
:
LogicalSize
:
:
zero
(
float_ctx
.
writing_mode
)
}
floats
:
float_ctx
lines
:
Vec
:
:
new
(
)
cur_b
:
Au
:
:
new
(
0
)
}
}
pub
fn
floats
(
&
mut
self
)
-
>
Floats
{
self
.
floats
.
clone
(
)
}
fn
reset_scanner
(
&
mut
self
)
{
debug
!
(
"
Resetting
LineBreaker
'
s
state
for
flow
.
"
)
;
self
.
lines
=
Vec
:
:
new
(
)
;
self
.
new_fragments
=
Vec
:
:
new
(
)
;
self
.
cur_b
=
Au
(
0
)
;
self
.
reset_line
(
)
;
}
fn
reset_line
(
&
mut
self
)
{
self
.
pending_line
.
range
.
reset
(
num
:
:
zero
(
)
num
:
:
zero
(
)
)
;
self
.
pending_line
.
bounds
=
LogicalRect
:
:
new
(
self
.
floats
.
writing_mode
Au
:
:
new
(
0
)
self
.
cur_b
Au
:
:
new
(
0
)
Au
:
:
new
(
0
)
)
;
self
.
pending_line
.
green_zone
=
LogicalSize
:
:
zero
(
self
.
floats
.
writing_mode
)
}
pub
fn
scan_for_lines
(
&
mut
self
flow
:
&
mut
InlineFlow
layout_context
:
&
LayoutContext
)
{
self
.
reset_scanner
(
)
;
let
mut
old_fragments
=
mem
:
:
replace
(
&
mut
flow
.
fragments
InlineFragments
:
:
new
(
)
)
;
{
let
mut
old_fragment_iter
=
old_fragments
.
fragments
.
iter
(
)
;
loop
{
let
cur_fragment
=
if
self
.
work_list
.
is_empty
(
)
{
match
old_fragment_iter
.
next
(
)
{
None
=
>
break
Some
(
fragment
)
=
>
{
debug
!
(
"
LineBreaker
:
Working
with
fragment
from
flow
:
b
{
}
"
fragment
.
debug_id
(
)
)
;
(
*
fragment
)
.
clone
(
)
}
}
}
else
{
let
fragment
=
self
.
work_list
.
pop_front
(
)
.
unwrap
(
)
;
debug
!
(
"
LineBreaker
:
Working
with
fragment
from
work
list
:
b
{
}
"
fragment
.
debug_id
(
)
)
;
fragment
}
;
let
fragment_was_appended
=
match
cur_fragment
.
white_space
(
)
{
white_space
:
:
normal
=
>
{
self
.
try_append_to_line
(
cur_fragment
flow
layout_context
WrapNormally
)
}
white_space
:
:
pre
=
>
self
.
try_append_to_line_by_new_line
(
cur_fragment
)
white_space
:
:
nowrap
=
>
{
self
.
try_append_to_line
(
cur_fragment
flow
layout_context
NoWrap
)
}
}
;
if
!
fragment_was_appended
{
debug
!
(
"
LineBreaker
:
Fragment
wasn
'
t
appended
because
line
{
:
u
}
was
full
.
"
self
.
lines
.
len
(
)
)
;
self
.
flush_current_line
(
)
;
}
else
{
debug
!
(
"
LineBreaker
:
appended
a
fragment
to
line
{
:
u
}
"
self
.
lines
.
len
(
)
)
;
}
}
if
self
.
pending_line
.
range
.
length
(
)
>
num
:
:
zero
(
)
{
debug
!
(
"
LineBreaker
:
Partially
full
line
{
:
u
}
inline_start
at
end
of
scanning
.
"
self
.
lines
.
len
(
)
)
;
self
.
flush_current_line
(
)
;
}
}
old_fragments
.
fragments
=
mem
:
:
replace
(
&
mut
self
.
new_fragments
vec
!
[
]
)
;
flow
.
fragments
=
old_fragments
;
flow
.
lines
=
mem
:
:
replace
(
&
mut
self
.
lines
Vec
:
:
new
(
)
)
;
}
fn
flush_current_line
(
&
mut
self
)
{
debug
!
(
"
LineBreaker
:
Flushing
line
{
:
u
}
:
{
:
?
}
"
self
.
lines
.
len
(
)
self
.
pending_line
)
;
debug
!
(
"
LineBreaker
:
Saving
information
for
flushed
line
{
:
u
}
.
"
self
.
lines
.
len
(
)
)
;
self
.
lines
.
push
(
self
.
pending_line
)
;
self
.
cur_b
=
self
.
pending_line
.
bounds
.
start
.
b
+
self
.
pending_line
.
bounds
.
size
.
block
;
self
.
reset_line
(
)
;
}
fn
new_block_size_for_line
(
&
self
new_fragment
:
&
Fragment
layout_context
:
&
LayoutContext
)
-
>
Au
{
let
fragment_block_size
=
new_fragment
.
content_block_size
(
layout_context
)
;
if
fragment_block_size
>
self
.
pending_line
.
bounds
.
size
.
block
{
fragment_block_size
}
else
{
self
.
pending_line
.
bounds
.
size
.
block
}
}
fn
initial_line_placement
(
&
self
first_fragment
:
&
Fragment
ceiling
:
Au
flow
:
&
InlineFlow
)
-
>
(
LogicalRect
<
Au
>
Au
)
{
debug
!
(
"
LineBreaker
:
Trying
to
place
first
fragment
of
line
{
}
"
self
.
lines
.
len
(
)
)
;
let
first_fragment_size
=
first_fragment
.
border_box
.
size
;
let
splittable
=
first_fragment
.
can_split
(
)
;
debug
!
(
"
LineBreaker
:
fragment
size
:
{
}
splittable
:
{
}
"
first_fragment_size
splittable
)
;
let
placement_inline_size
=
if
splittable
{
Au
:
:
new
(
0
)
}
else
{
first_fragment_size
.
inline
}
;
let
info
=
PlacementInfo
{
size
:
LogicalSize
:
:
new
(
self
.
floats
.
writing_mode
placement_inline_size
first_fragment_size
.
block
)
ceiling
:
ceiling
max_inline_size
:
flow
.
base
.
position
.
size
.
inline
kind
:
FloatLeft
}
;
let
line_bounds
=
self
.
floats
.
place_between_floats
(
&
info
)
;
debug
!
(
"
LineBreaker
:
found
position
for
line
:
{
}
using
placement_info
:
{
:
?
}
"
line_bounds
info
)
;
if
line_bounds
.
size
.
inline
>
first_fragment_size
.
inline
{
debug
!
(
"
LineBreaker
:
case
=
fragment
fits
"
)
;
return
(
line_bounds
first_fragment_size
.
inline
)
;
}
if
!
splittable
{
debug
!
(
"
LineBreaker
:
case
=
line
doesn
'
t
fit
but
is
unsplittable
"
)
;
return
(
line_bounds
first_fragment_size
.
inline
)
;
}
debug
!
(
"
LineBreaker
:
used
to
call
split_to_inline_size
here
"
)
;
return
(
line_bounds
first_fragment_size
.
inline
)
;
}
fn
avoid_floats
(
&
mut
self
in_fragment
:
Fragment
flow
:
&
InlineFlow
new_block_size
:
Au
line_is_empty
:
bool
)
-
>
bool
{
debug
!
(
"
LineBreaker
:
entering
float
collision
avoider
!
"
)
;
let
this_line_y
=
self
.
pending_line
.
bounds
.
start
.
b
;
let
(
next_line
first_fragment_inline_size
)
=
self
.
initial_line_placement
(
&
in_fragment
this_line_y
flow
)
;
let
next_green_zone
=
next_line
.
size
;
let
new_inline_size
=
self
.
pending_line
.
bounds
.
size
.
inline
+
first_fragment_inline_size
;
if
next_green_zone
.
inline
>
=
new_inline_size
&
&
next_green_zone
.
block
>
=
new_block_size
{
debug
!
(
"
LineBreaker
:
case
=
adding
fragment
collides
vertically
with
floats
:
moving
line
"
)
;
self
.
pending_line
.
bounds
.
start
=
next_line
.
start
;
self
.
pending_line
.
green_zone
=
next_green_zone
;
assert
!
(
!
line_is_empty
"
Non
-
terminating
line
breaking
"
)
;
self
.
work_list
.
push_front
(
in_fragment
)
;
return
true
}
debug
!
(
"
LineBreaker
:
case
=
adding
fragment
collides
vertically
with
floats
:
breaking
line
"
)
;
self
.
work_list
.
push_front
(
in_fragment
)
;
false
}
fn
try_append_to_line_by_new_line
(
&
mut
self
in_fragment
:
Fragment
)
-
>
bool
{
if
in_fragment
.
new_line_pos
.
len
(
)
=
=
0
{
debug
!
(
"
LineBreaker
:
Did
not
find
a
new
-
line
character
so
pushing
the
fragment
to
\
the
line
without
splitting
.
"
)
;
self
.
push_fragment_to_line
(
in_fragment
)
;
true
}
else
{
debug
!
(
"
LineBreaker
:
Found
a
new
-
line
character
so
splitting
theline
.
"
)
;
let
(
inline_start
inline_end
run
)
=
in_fragment
.
find_split_info_by_new_line
(
)
.
expect
(
"
LineBreaker
:
This
split
case
makes
no
sense
!
"
)
;
let
writing_mode
=
self
.
floats
.
writing_mode
;
let
split_fragment
=
|
split
:
SplitInfo
|
{
let
info
=
ScannedTextFragmentInfo
:
:
new
(
run
.
clone
(
)
split
.
range
)
;
let
specific
=
ScannedTextFragment
(
info
)
;
let
size
=
LogicalSize
:
:
new
(
writing_mode
split
.
inline_size
in_fragment
.
border_box
.
size
.
block
)
;
in_fragment
.
transform
(
size
specific
)
}
;
debug
!
(
"
LineBreaker
:
Pushing
the
fragment
to
the
inline_start
of
the
new
-
line
character
\
to
the
line
.
"
)
;
let
mut
inline_start
=
split_fragment
(
inline_start
)
;
inline_start
.
new_line_pos
=
vec
!
[
]
;
self
.
push_fragment_to_line
(
inline_start
)
;
for
inline_end
in
inline_end
.
into_iter
(
)
{
debug
!
(
"
LineBreaker
:
Deferring
the
fragment
to
the
inline_end
of
the
new
-
line
\
character
to
the
line
.
"
)
;
let
mut
inline_end
=
split_fragment
(
inline_end
)
;
inline_end
.
new_line_pos
.
remove
(
0
)
;
self
.
work_list
.
push_front
(
inline_end
)
;
}
false
}
}
fn
try_append_to_line
(
&
mut
self
in_fragment
:
Fragment
flow
:
&
InlineFlow
layout_context
:
&
LayoutContext
wrap_mode
:
WrapMode
)
-
>
bool
{
let
line_is_empty
=
self
.
pending_line
.
range
.
length
(
)
=
=
num
:
:
zero
(
)
;
if
line_is_empty
{
let
(
line_bounds
_
)
=
self
.
initial_line_placement
(
&
in_fragment
self
.
cur_b
flow
)
;
self
.
pending_line
.
bounds
.
start
=
line_bounds
.
start
;
self
.
pending_line
.
green_zone
=
line_bounds
.
size
;
}
debug
!
(
"
LineBreaker
:
Trying
to
append
fragment
to
line
{
:
u
}
(
fragment
size
:
{
}
green
zone
:
\
{
}
)
:
{
}
"
self
.
lines
.
len
(
)
in_fragment
.
border_box
.
size
self
.
pending_line
.
green_zone
in_fragment
)
;
let
green_zone
=
self
.
pending_line
.
green_zone
;
let
new_block_size
=
self
.
new_block_size_for_line
(
&
in_fragment
layout_context
)
;
if
new_block_size
>
green_zone
.
block
{
return
self
.
avoid_floats
(
in_fragment
flow
new_block_size
line_is_empty
)
}
let
new_inline_size
=
self
.
pending_line
.
bounds
.
size
.
inline
+
in_fragment
.
border_box
.
size
.
inline
;
if
new_inline_size
<
=
green_zone
.
inline
{
debug
!
(
"
LineBreaker
:
case
=
fragment
fits
without
splitting
"
)
;
self
.
push_fragment_to_line
(
in_fragment
)
;
return
true
}
if
(
!
in_fragment
.
can_split
(
)
&
&
line_is_empty
)
|
|
wrap_mode
=
=
NoWrap
{
debug
!
(
"
LineBreaker
:
case
=
fragment
can
'
t
split
and
line
{
:
u
}
is
empty
so
\
overflowing
.
"
self
.
lines
.
len
(
)
)
;
self
.
push_fragment_to_line
(
in_fragment
)
;
return
true
}
let
available_inline_size
=
green_zone
.
inline
-
self
.
pending_line
.
bounds
.
size
.
inline
;
let
split
=
in_fragment
.
find_split_info_for_inline_size
(
CharIndex
(
0
)
available_inline_size
line_is_empty
)
;
match
split
.
map
(
|
(
inline_start
inline_end
run
)
|
{
let
split_fragment
=
|
split
:
SplitInfo
|
{
let
info
=
ScannedTextFragmentInfo
:
:
new
(
run
.
clone
(
)
split
.
range
)
;
let
specific
=
ScannedTextFragment
(
info
)
;
let
size
=
LogicalSize
:
:
new
(
self
.
floats
.
writing_mode
split
.
inline_size
in_fragment
.
border_box
.
size
.
block
)
;
in_fragment
.
transform
(
size
specific
)
}
;
(
inline_start
.
map
(
|
x
|
{
debug
!
(
"
LineBreaker
:
Left
split
{
}
"
x
)
;
split_fragment
(
x
)
}
)
inline_end
.
map
(
|
x
|
{
debug
!
(
"
LineBreaker
:
Right
split
{
}
"
x
)
;
split_fragment
(
x
)
}
)
)
}
)
{
None
=
>
{
debug
!
(
"
LineBreaker
:
Tried
to
split
unsplittable
render
fragment
!
Deferring
to
next
\
line
.
{
}
"
in_fragment
)
;
self
.
work_list
.
push_front
(
in_fragment
)
;
false
}
Some
(
(
Some
(
inline_start_fragment
)
Some
(
inline_end_fragment
)
)
)
=
>
{
debug
!
(
"
LineBreaker
:
Line
break
found
!
Pushing
inline_start
fragment
to
line
and
deferring
\
inline_end
fragment
to
next
line
.
"
)
;
self
.
push_fragment_to_line
(
inline_start_fragment
)
;
self
.
work_list
.
push_front
(
inline_end_fragment
)
;
true
}
Some
(
(
Some
(
inline_start_fragment
)
None
)
)
=
>
{
debug
!
(
"
LineBreaker
:
Pushing
inline_start
fragment
to
line
.
"
)
;
self
.
push_fragment_to_line
(
inline_start_fragment
)
;
true
}
Some
(
(
None
Some
(
inline_end_fragment
)
)
)
=
>
{
debug
!
(
"
LineBreaker
:
Pushing
inline_end
fragment
to
line
.
"
)
;
self
.
push_fragment_to_line
(
inline_end_fragment
)
;
true
}
Some
(
(
None
None
)
)
=
>
{
error
!
(
"
LineBreaker
:
This
split
case
makes
no
sense
!
"
)
;
true
}
}
}
fn
push_fragment_to_line
(
&
mut
self
fragment
:
Fragment
)
{
debug
!
(
"
LineBreaker
:
Pushing
fragment
{
}
to
line
{
:
u
}
"
fragment
.
debug_id
(
)
self
.
lines
.
len
(
)
)
;
if
self
.
pending_line
.
range
.
length
(
)
=
=
num
:
:
zero
(
)
{
assert
!
(
self
.
new_fragments
.
len
(
)
<
=
(
u16
:
:
MAX
as
uint
)
)
;
self
.
pending_line
.
range
.
reset
(
LineIndices
{
fragment_index
:
FragmentIndex
(
self
.
new_fragments
.
len
(
)
as
int
)
char_index
:
CharIndex
(
0
)
}
num
:
:
zero
(
)
)
;
}
self
.
pending_line
.
range
.
extend_by
(
LineIndices
{
fragment_index
:
FragmentIndex
(
1
)
char_index
:
CharIndex
(
0
)
}
)
;
self
.
pending_line
.
bounds
.
size
.
inline
=
self
.
pending_line
.
bounds
.
size
.
inline
+
fragment
.
border_box
.
size
.
inline
;
self
.
pending_line
.
bounds
.
size
.
block
=
Au
:
:
max
(
self
.
pending_line
.
bounds
.
size
.
block
fragment
.
border_box
.
size
.
block
)
;
self
.
new_fragments
.
push
(
fragment
)
;
}
}
#
[
deriving
(
Encodable
)
]
pub
struct
InlineFragments
{
pub
fragments
:
Vec
<
Fragment
>
}
impl
InlineFragments
{
pub
fn
new
(
)
-
>
InlineFragments
{
InlineFragments
{
fragments
:
vec
!
[
]
}
}
pub
fn
len
(
&
self
)
-
>
uint
{
self
.
fragments
.
len
(
)
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
len
(
)
=
=
0
}
pub
fn
push
(
&
mut
self
fragment
:
&
mut
Fragment
)
{
self
.
fragments
.
push
(
fragment
.
clone
(
)
)
;
}
pub
fn
push_all
(
&
mut
self
fragments
:
InlineFragments
)
{
self
.
fragments
.
extend
(
fragments
.
fragments
.
into_iter
(
)
)
;
}
pub
fn
get
<
'
a
>
(
&
'
a
self
index
:
uint
)
-
>
&
'
a
Fragment
{
&
self
.
fragments
[
index
]
}
pub
fn
get_mut
<
'
a
>
(
&
'
a
mut
self
index
:
uint
)
-
>
&
'
a
mut
Fragment
{
self
.
fragments
.
get_mut
(
index
)
}
pub
fn
strip_ignorable_whitespace_from_start
(
&
mut
self
)
{
if
self
.
is_empty
(
)
{
return
}
;
let
mut
fragments
=
mem
:
:
replace
(
&
mut
self
.
fragments
vec
!
[
]
)
.
into_iter
(
)
;
let
mut
new_fragments
=
Vec
:
:
new
(
)
;
let
mut
skipping
=
true
;
for
fragment
in
fragments
{
if
skipping
&
&
fragment
.
is_whitespace_only
(
)
{
debug
!
(
"
stripping
ignorable
whitespace
from
start
"
)
;
continue
}
skipping
=
false
;
new_fragments
.
push
(
fragment
)
;
}
self
.
fragments
=
new_fragments
;
}
pub
fn
strip_ignorable_whitespace_from_end
(
&
mut
self
)
{
if
self
.
is_empty
(
)
{
return
;
}
let
mut
new_fragments
=
self
.
fragments
.
clone
(
)
;
while
new_fragments
.
len
(
)
>
0
&
&
new_fragments
.
as_slice
(
)
.
last
(
)
.
as_ref
(
)
.
unwrap
(
)
.
is_whitespace_only
(
)
{
debug
!
(
"
stripping
ignorable
whitespace
from
end
"
)
;
drop
(
new_fragments
.
pop
(
)
)
;
}
self
.
fragments
=
new_fragments
;
}
}
#
[
deriving
(
Encodable
)
]
pub
struct
InlineFlow
{
pub
base
:
BaseFlow
pub
fragments
:
InlineFragments
pub
lines
:
Vec
<
Line
>
pub
minimum_block_size_above_baseline
:
Au
pub
minimum_depth_below_baseline
:
Au
}
impl
InlineFlow
{
pub
fn
from_fragments
(
node
:
ThreadSafeLayoutNode
fragments
:
InlineFragments
)
-
>
InlineFlow
{
InlineFlow
{
base
:
BaseFlow
:
:
new
(
node
)
fragments
:
fragments
lines
:
Vec
:
:
new
(
)
minimum_block_size_above_baseline
:
Au
(
0
)
minimum_depth_below_baseline
:
Au
(
0
)
}
}
pub
fn
build_display_list_inline
(
&
mut
self
layout_context
:
&
LayoutContext
)
{
let
size
=
self
.
base
.
position
.
size
.
to_physical
(
self
.
base
.
writing_mode
)
;
if
!
Rect
(
self
.
base
.
abs_position
size
)
.
intersects
(
&
layout_context
.
shared
.
dirty
)
{
return
}
debug
!
(
"
Flow
:
building
display
list
for
{
:
u
}
inline
fragments
"
self
.
fragments
.
len
(
)
)
;
for
fragment
in
self
.
fragments
.
fragments
.
iter_mut
(
)
{
let
rel_offset
=
fragment
.
relative_position
(
&
self
.
base
.
absolute_position_info
.
relative_containing_block_size
)
;
let
mut
accumulator
=
fragment
.
build_display_list
(
&
mut
self
.
base
.
display_list
layout_context
self
.
base
.
abs_position
.
add_size
(
&
rel_offset
.
to_physical
(
self
.
base
.
writing_mode
)
)
ContentLevel
)
;
match
fragment
.
specific
{
InlineBlockFragment
(
ref
mut
block_flow
)
=
>
{
let
block_flow
=
block_flow
.
flow_ref
.
get_mut
(
)
;
accumulator
.
push_child
(
&
mut
self
.
base
.
display_list
block_flow
)
;
}
_
=
>
{
}
}
}
}
fn
distance_from_baseline
(
fragment
:
&
Fragment
ascent
:
Au
parent_text_block_start
:
Au
parent_text_block_end
:
Au
block_size_above_baseline
:
&
mut
Au
depth_below_baseline
:
&
mut
Au
largest_block_size_for_top_fragments
:
&
mut
Au
largest_block_size_for_bottom_fragments
:
&
mut
Au
layout_context
:
&
LayoutContext
)
-
>
(
Au
bool
)
{
match
fragment
.
vertical_align
(
)
{
vertical_align
:
:
baseline
=
>
(
-
ascent
false
)
vertical_align
:
:
middle
=
>
{
(
-
ascent
false
)
}
vertical_align
:
:
sub
=
>
{
let
sub_offset
=
(
parent_text_block_start
+
parent_text_block_end
)
.
scale_by
(
FONT_SUBSCRIPT_OFFSET_RATIO
)
;
(
sub_offset
-
ascent
false
)
}
vertical_align
:
:
super_
=
>
{
let
super_offset
=
(
parent_text_block_start
+
parent_text_block_end
)
.
scale_by
(
FONT_SUPERSCRIPT_OFFSET_RATIO
)
;
(
-
super_offset
-
ascent
false
)
}
vertical_align
:
:
text_top
=
>
{
let
fragment_block_size
=
*
block_size_above_baseline
+
*
depth_below_baseline
;
let
prev_depth_below_baseline
=
*
depth_below_baseline
;
*
block_size_above_baseline
=
parent_text_block_start
;
*
depth_below_baseline
=
fragment_block_size
-
*
block_size_above_baseline
;
(
*
depth_below_baseline
-
prev_depth_below_baseline
-
ascent
false
)
}
vertical_align
:
:
text_bottom
=
>
{
let
fragment_block_size
=
*
block_size_above_baseline
+
*
depth_below_baseline
;
let
prev_depth_below_baseline
=
*
depth_below_baseline
;
*
depth_below_baseline
=
parent_text_block_end
;
*
block_size_above_baseline
=
fragment_block_size
-
*
depth_below_baseline
;
(
*
depth_below_baseline
-
prev_depth_below_baseline
-
ascent
false
)
}
vertical_align
:
:
top
=
>
{
*
largest_block_size_for_top_fragments
=
Au
:
:
max
(
*
largest_block_size_for_top_fragments
*
block_size_above_baseline
+
*
depth_below_baseline
)
;
let
offset_top
=
*
block_size_above_baseline
-
ascent
;
(
offset_top
true
)
}
vertical_align
:
:
bottom
=
>
{
*
largest_block_size_for_bottom_fragments
=
Au
:
:
max
(
*
largest_block_size_for_bottom_fragments
*
block_size_above_baseline
+
*
depth_below_baseline
)
;
let
offset_bottom
=
-
(
*
depth_below_baseline
+
ascent
)
;
(
offset_bottom
true
)
}
vertical_align
:
:
Length
(
length
)
=
>
(
-
(
length
+
ascent
)
false
)
vertical_align
:
:
Percentage
(
p
)
=
>
{
let
line_height
=
fragment
.
calculate_line_height
(
layout_context
)
;
let
percent_offset
=
line_height
.
scale_by
(
p
)
;
(
-
(
percent_offset
+
ascent
)
false
)
}
}
}
fn
set_horizontal_fragment_positions
(
fragments
:
&
mut
InlineFragments
line
:
&
Line
line_align
:
text_align
:
:
T
)
{
let
slack_inline_size
=
Au
:
:
max
(
Au
(
0
)
line
.
green_zone
.
inline
-
line
.
bounds
.
size
.
inline
)
;
let
mut
offset_x
=
line
.
bounds
.
start
.
i
;
offset_x
=
offset_x
+
match
line_align
{
text_align
:
:
left
|
text_align
:
:
justify
=
>
Au
(
0
)
text_align
:
:
center
=
>
slack_inline_size
.
scale_by
(
0
.
5
)
text_align
:
:
right
=
>
slack_inline_size
}
;
for
i
in
each_fragment_index
(
&
line
.
range
)
{
let
fragment
=
fragments
.
get_mut
(
i
.
to_uint
(
)
)
;
let
size
=
fragment
.
border_box
.
size
;
fragment
.
border_box
=
LogicalRect
:
:
new
(
fragment
.
style
.
writing_mode
offset_x
fragment
.
border_box
.
start
.
b
size
.
inline
size
.
block
)
;
offset_x
=
offset_x
+
size
.
inline
;
}
}
pub
fn
compute_minimum_ascent_and_descent
(
&
self
font_context
:
&
mut
FontContext
style
:
&
ComputedValues
)
-
>
(
Au
Au
)
{
let
font_style
=
text
:
:
computed_style_to_font_style
(
style
)
;
let
font_metrics
=
text
:
:
font_metrics_for_style
(
font_context
&
font_style
)
;
let
line_height
=
text
:
:
line_height_from_style
(
style
&
font_metrics
)
;
let
inline_metrics
=
InlineMetrics
:
:
from_font_metrics
(
&
font_metrics
line_height
)
;
let
mut
block_size_above_baseline
=
inline_metrics
.
block_size_above_baseline
;
let
mut
depth_below_baseline
=
inline_metrics
.
depth_below_baseline
;
for
frag
in
self
.
fragments
.
fragments
.
iter
(
)
{
match
frag
.
inline_context
{
Some
(
ref
inline_context
)
=
>
{
for
style
in
inline_context
.
styles
.
iter
(
)
{
let
font_style
=
text
:
:
computed_style_to_font_style
(
&
*
*
style
)
;
let
font_metrics
=
text
:
:
font_metrics_for_style
(
font_context
&
font_style
)
;
let
line_height
=
text
:
:
line_height_from_style
(
&
*
*
style
&
font_metrics
)
;
let
inline_metrics
=
InlineMetrics
:
:
from_font_metrics
(
&
font_metrics
line_height
)
;
block_size_above_baseline
=
Au
:
:
max
(
block_size_above_baseline
inline_metrics
.
block_size_above_baseline
)
;
depth_below_baseline
=
Au
:
:
max
(
depth_below_baseline
inline_metrics
.
depth_below_baseline
)
;
}
}
None
=
>
{
}
}
}
(
block_size_above_baseline
depth_below_baseline
)
}
}
impl
Flow
for
InlineFlow
{
fn
class
(
&
self
)
-
>
FlowClass
{
InlineFlowClass
}
fn
as_immutable_inline
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
InlineFlow
{
self
}
fn
as_inline
<
'
a
>
(
&
'
a
mut
self
)
-
>
&
'
a
mut
InlineFlow
{
self
}
fn
bubble_inline_sizes
(
&
mut
self
layout_context
:
&
LayoutContext
)
{
let
_scope
=
layout_debug_scope
!
(
"
inline
:
:
bubble_inline_sizes
{
:
s
}
"
self
.
base
.
debug_id
(
)
)
;
let
writing_mode
=
self
.
base
.
writing_mode
;
for
kid
in
self
.
base
.
child_iter
(
)
{
flow
:
:
mut_base
(
kid
)
.
floats
=
Floats
:
:
new
(
writing_mode
)
;
}
let
mut
intrinsic_inline_sizes
=
IntrinsicISizes
:
:
new
(
)
;
for
fragment
in
self
.
fragments
.
fragments
.
iter_mut
(
)
{
debug
!
(
"
Flow
:
measuring
{
}
"
*
fragment
)
;
let
fragment_intrinsic_inline_sizes
=
fragment
.
intrinsic_inline_sizes
(
layout_context
)
;
intrinsic_inline_sizes
.
minimum_inline_size
=
max
(
intrinsic_inline_sizes
.
minimum_inline_size
fragment_intrinsic_inline_sizes
.
minimum_inline_size
)
;
intrinsic_inline_sizes
.
preferred_inline_size
=
intrinsic_inline_sizes
.
preferred_inline_size
+
fragment_intrinsic_inline_sizes
.
preferred_inline_size
;
intrinsic_inline_sizes
.
surround_inline_size
=
intrinsic_inline_sizes
.
surround_inline_size
+
fragment_intrinsic_inline_sizes
.
surround_inline_size
;
}
self
.
base
.
intrinsic_inline_sizes
=
intrinsic_inline_sizes
;
}
fn
assign_inline_sizes
(
&
mut
self
_
:
&
LayoutContext
)
{
let
_scope
=
layout_debug_scope
!
(
"
inline
:
:
assign_inline_sizes
{
:
s
}
"
self
.
base
.
debug_id
(
)
)
;
debug
!
(
"
InlineFlow
:
:
assign_inline_sizes
:
floats
in
:
{
:
?
}
"
self
.
base
.
floats
)
;
{
let
inline_size
=
self
.
base
.
position
.
size
.
inline
;
let
this
=
&
mut
*
self
;
for
fragment
in
this
.
fragments
.
fragments
.
iter_mut
(
)
{
fragment
.
assign_replaced_inline_size_if_necessary
(
inline_size
)
;
}
}
let
block_container_explicit_block_size
=
self
.
base
.
block_container_explicit_block_size
;
for
kid
in
self
.
base
.
child_iter
(
)
{
flow
:
:
mut_base
(
kid
)
.
block_container_explicit_block_size
=
block_container_explicit_block_size
;
}
}
fn
assign_block_size
(
&
mut
self
ctx
:
&
LayoutContext
)
{
let
_scope
=
layout_debug_scope
!
(
"
inline
:
:
assign_block_size
{
:
s
}
"
self
.
base
.
debug_id
(
)
)
;
debug
!
(
"
assign_block_size_inline
:
floats
in
:
{
:
?
}
"
self
.
base
.
floats
)
;
for
fragment
in
self
.
fragments
.
fragments
.
iter_mut
(
)
{
fragment
.
assign_replaced_block_size_if_necessary
(
)
;
}
let
scanner_floats
=
self
.
base
.
floats
.
clone
(
)
;
let
mut
scanner
=
LineBreaker
:
:
new
(
scanner_floats
)
;
scanner
.
scan_for_lines
(
self
ctx
)
;
let
text_align
=
self
.
base
.
flags
.
text_align
(
)
;
let
mut
line_distance_from_flow_block_start
=
Au
(
0
)
;
for
line
in
self
.
lines
.
iter_mut
(
)
{
InlineFlow
:
:
set_horizontal_fragment_positions
(
&
mut
self
.
fragments
line
text_align
)
;
line
.
bounds
.
start
.
b
=
line_distance_from_flow_block_start
;
let
mut
largest_block_size_above_baseline
=
self
.
minimum_block_size_above_baseline
;
let
mut
largest_depth_below_baseline
=
self
.
minimum_depth_below_baseline
;
let
(
mut
largest_block_size_for_top_fragments
mut
largest_block_size_for_bottom_fragments
)
=
(
Au
(
0
)
Au
(
0
)
)
;
for
fragment_i
in
each_fragment_index
(
&
line
.
range
)
{
let
fragment
=
self
.
fragments
.
fragments
.
get_mut
(
fragment_i
.
to_uint
(
)
)
;
let
InlineMetrics
{
block_size_above_baseline
:
mut
block_size_above_baseline
depth_below_baseline
:
mut
depth_below_baseline
ascent
}
=
fragment
.
inline_metrics
(
ctx
)
;
let
(
distance_from_baseline
no_update_flag
)
=
InlineFlow
:
:
distance_from_baseline
(
fragment
ascent
self
.
minimum_block_size_above_baseline
self
.
minimum_depth_below_baseline
&
mut
block_size_above_baseline
&
mut
depth_below_baseline
&
mut
largest_block_size_for_top_fragments
&
mut
largest_block_size_for_bottom_fragments
ctx
)
;
if
!
no_update_flag
{
largest_block_size_above_baseline
=
Au
:
:
max
(
block_size_above_baseline
largest_block_size_above_baseline
)
;
largest_depth_below_baseline
=
Au
:
:
max
(
depth_below_baseline
largest_depth_below_baseline
)
;
}
fragment
.
border_box
.
start
.
b
=
distance_from_baseline
}
largest_block_size_above_baseline
=
Au
:
:
max
(
largest_block_size_above_baseline
largest_block_size_for_bottom_fragments
-
largest_depth_below_baseline
)
;
largest_depth_below_baseline
=
Au
:
:
max
(
largest_depth_below_baseline
largest_block_size_for_top_fragments
-
largest_block_size_above_baseline
)
;
let
baseline_distance_from_block_start
=
largest_block_size_above_baseline
;
for
fragment_i
in
each_fragment_index
(
&
line
.
range
)
{
let
fragment
=
self
.
fragments
.
get_mut
(
fragment_i
.
to_uint
(
)
)
;
match
fragment
.
vertical_align
(
)
{
vertical_align
:
:
top
=
>
{
fragment
.
border_box
.
start
.
b
=
fragment
.
border_box
.
start
.
b
+
line_distance_from_flow_block_start
}
vertical_align
:
:
bottom
=
>
{
fragment
.
border_box
.
start
.
b
=
fragment
.
border_box
.
start
.
b
+
line_distance_from_flow_block_start
+
baseline_distance_from_block_start
+
largest_depth_below_baseline
}
_
=
>
{
fragment
.
border_box
.
start
.
b
=
fragment
.
border_box
.
start
.
b
+
line_distance_from_flow_block_start
+
baseline_distance_from_block_start
}
}
}
line
.
bounds
.
size
.
block
=
largest_block_size_above_baseline
+
largest_depth_below_baseline
;
line_distance_from_flow_block_start
=
line_distance_from_flow_block_start
+
line
.
bounds
.
size
.
block
;
}
self
.
base
.
position
.
size
.
block
=
match
self
.
lines
.
as_slice
(
)
.
last
(
)
{
Some
(
ref
last_line
)
=
>
last_line
.
bounds
.
start
.
b
+
last_line
.
bounds
.
size
.
block
None
=
>
Au
:
:
new
(
0
)
}
;
self
.
base
.
floats
=
scanner
.
floats
(
)
;
self
.
base
.
floats
.
translate
(
LogicalSize
:
:
new
(
self
.
base
.
writing_mode
Au
:
:
new
(
0
)
-
self
.
base
.
position
.
size
.
block
)
)
;
}
fn
compute_absolute_position
(
&
mut
self
)
{
for
f
in
self
.
fragments
.
fragments
.
iter_mut
(
)
{
match
f
.
specific
{
InlineBlockFragment
(
ref
mut
info
)
=
>
{
let
block_flow
=
info
.
flow_ref
.
get_mut
(
)
.
as_block
(
)
;
let
container_size
=
Size2D
:
:
zero
(
)
;
block_flow
.
base
.
abs_position
=
self
.
base
.
abs_position
+
f
.
border_box
.
start
.
to_physical
(
self
.
base
.
writing_mode
container_size
)
;
}
_
=
>
{
}
}
}
}
}
impl
fmt
:
:
Show
for
InlineFlow
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
try
!
(
write
!
(
f
"
InlineFlow
"
)
)
;
for
(
i
fragment
)
in
self
.
fragments
.
fragments
.
iter
(
)
.
enumerate
(
)
{
if
i
=
=
0
{
try
!
(
write
!
(
f
"
:
{
}
"
fragment
)
)
}
else
{
try
!
(
write
!
(
f
"
{
}
"
fragment
)
)
}
}
Ok
(
(
)
)
}
}
#
[
deriving
(
Clone
)
]
pub
struct
InlineFragmentContext
{
pub
styles
:
Vec
<
Arc
<
ComputedValues
>
>
}
impl
InlineFragmentContext
{
pub
fn
new
(
)
-
>
InlineFragmentContext
{
InlineFragmentContext
{
styles
:
vec
!
(
)
}
}
}
pub
struct
InlineMetrics
{
pub
block_size_above_baseline
:
Au
pub
depth_below_baseline
:
Au
pub
ascent
:
Au
}
impl
InlineMetrics
{
#
[
inline
]
pub
fn
from_font_metrics
(
font_metrics
:
&
FontMetrics
line_height
:
Au
)
-
>
InlineMetrics
{
let
leading
=
line_height
-
(
font_metrics
.
ascent
+
font_metrics
.
descent
)
;
InlineMetrics
{
block_size_above_baseline
:
font_metrics
.
ascent
+
leading
.
scale_by
(
0
.
5
)
depth_below_baseline
:
font_metrics
.
descent
+
leading
.
scale_by
(
0
.
5
)
ascent
:
font_metrics
.
ascent
}
}
#
[
inline
]
pub
fn
from_block_height
(
font_metrics
:
&
FontMetrics
block_height
:
Au
)
-
>
InlineMetrics
{
let
leading
=
block_height
-
(
font_metrics
.
ascent
+
font_metrics
.
descent
)
;
InlineMetrics
{
block_size_above_baseline
:
font_metrics
.
ascent
+
leading
.
scale_by
(
0
.
5
)
depth_below_baseline
:
font_metrics
.
descent
+
leading
.
scale_by
(
0
.
5
)
ascent
:
font_metrics
.
ascent
+
leading
.
scale_by
(
0
.
5
)
}
}
}
