use
flow
:
:
Flow
;
use
flow_ref
:
:
{
self
FlowRef
}
;
use
std
:
:
collections
:
:
{
linked_list
LinkedList
}
;
pub
struct
FlowList
{
flows
:
LinkedList
<
FlowRef
>
}
pub
struct
FlowListIterator
<
'
a
>
{
it
:
linked_list
:
:
Iter
<
'
a
FlowRef
>
}
pub
struct
MutFlowListIterator
<
'
a
>
{
it
:
linked_list
:
:
IterMut
<
'
a
FlowRef
>
}
impl
FlowList
{
#
[
inline
]
pub
fn
front
<
'
a
>
(
&
'
a
self
)
-
>
Option
<
&
'
a
Flow
>
{
self
.
flows
.
front
(
)
.
map
(
|
head
|
&
*
*
head
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
pub
unsafe
fn
front_mut
<
'
a
>
(
&
'
a
mut
self
)
-
>
Option
<
&
'
a
mut
Flow
>
{
self
.
flows
.
front_mut
(
)
.
map
(
flow_ref
:
:
deref_mut
)
}
#
[
inline
]
pub
fn
back
<
'
a
>
(
&
'
a
self
)
-
>
Option
<
&
'
a
Flow
>
{
self
.
flows
.
back
(
)
.
map
(
|
tail
|
&
*
*
tail
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
pub
unsafe
fn
back_mut
<
'
a
>
(
&
'
a
mut
self
)
-
>
Option
<
&
'
a
mut
Flow
>
{
self
.
flows
.
back_mut
(
)
.
map
(
flow_ref
:
:
deref_mut
)
}
pub
fn
push_front
(
&
mut
self
new_head
:
FlowRef
)
{
self
.
flows
.
push_front
(
new_head
)
;
}
pub
fn
pop_front
(
&
mut
self
)
-
>
Option
<
FlowRef
>
{
self
.
flows
.
pop_front
(
)
}
pub
fn
push_back
(
&
mut
self
new_tail
:
FlowRef
)
{
self
.
flows
.
push_back
(
new_tail
)
;
}
#
[
inline
]
pub
fn
new
(
)
-
>
FlowList
{
FlowList
{
flows
:
LinkedList
:
:
new
(
)
}
}
#
[
inline
]
pub
fn
iter
<
'
a
>
(
&
'
a
self
)
-
>
FlowListIterator
<
'
a
>
{
FlowListIterator
{
it
:
self
.
flows
.
iter
(
)
}
}
#
[
inline
]
pub
fn
iter_mut
<
'
a
>
(
&
'
a
mut
self
)
-
>
MutFlowListIterator
<
'
a
>
{
MutFlowListIterator
{
it
:
self
.
flows
.
iter_mut
(
)
}
}
#
[
inline
]
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
flows
.
is_empty
(
)
}
#
[
inline
]
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
flows
.
len
(
)
}
}
impl
<
'
a
>
Iterator
for
FlowListIterator
<
'
a
>
{
type
Item
=
&
'
a
Flow
;
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
&
'
a
Flow
>
{
self
.
it
.
next
(
)
.
map
(
|
x
|
&
*
*
x
)
}
#
[
inline
]
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
it
.
size_hint
(
)
}
}
impl
<
'
a
>
Iterator
for
MutFlowListIterator
<
'
a
>
{
type
Item
=
&
'
a
mut
Flow
;
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
&
'
a
mut
Flow
>
{
self
.
it
.
next
(
)
.
map
(
flow_ref
:
:
deref_mut
)
}
#
[
inline
]
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
it
.
size_hint
(
)
}
}
