#
!
[
deny
(
unsafe_code
)
]
use
fragment
:
:
Fragment
;
use
geom
:
:
{
Matrix4
SideOffsets2D
Size2D
}
;
use
std
:
:
cmp
:
:
{
max
min
}
;
use
std
:
:
fmt
;
use
style
:
:
computed_values
:
:
transform
:
:
ComputedMatrix
;
use
style
:
:
properties
:
:
ComputedValues
;
use
style
:
:
values
:
:
computed
:
:
{
LengthAndPercentage
LengthOrPercentageOrAuto
}
;
use
style
:
:
values
:
:
computed
:
:
{
LengthOrPercentageOrNone
LengthOrPercentage
}
;
use
util
:
:
geometry
:
:
Au
;
use
util
:
:
logical_geometry
:
:
LogicalMargin
;
#
[
derive
(
Copy
Clone
)
]
pub
struct
AdjoiningMargins
{
pub
most_positive
:
Au
pub
most_negative
:
Au
}
impl
AdjoiningMargins
{
pub
fn
new
(
)
-
>
AdjoiningMargins
{
AdjoiningMargins
{
most_positive
:
Au
(
0
)
most_negative
:
Au
(
0
)
}
}
pub
fn
from_margin
(
margin_value
:
Au
)
-
>
AdjoiningMargins
{
if
margin_value
>
=
Au
(
0
)
{
AdjoiningMargins
{
most_positive
:
margin_value
most_negative
:
Au
(
0
)
}
}
else
{
AdjoiningMargins
{
most_positive
:
Au
(
0
)
most_negative
:
margin_value
}
}
}
pub
fn
union
(
&
mut
self
other
:
AdjoiningMargins
)
{
self
.
most_positive
=
max
(
self
.
most_positive
other
.
most_positive
)
;
self
.
most_negative
=
min
(
self
.
most_negative
other
.
most_negative
)
}
pub
fn
collapse
(
&
self
)
-
>
Au
{
self
.
most_positive
+
self
.
most_negative
}
}
#
[
derive
(
Copy
Clone
)
]
pub
enum
CollapsibleMargins
{
None
(
Au
Au
)
Collapse
(
AdjoiningMargins
AdjoiningMargins
)
CollapseThrough
(
AdjoiningMargins
)
}
impl
CollapsibleMargins
{
pub
fn
new
(
)
-
>
CollapsibleMargins
{
CollapsibleMargins
:
:
None
(
Au
(
0
)
Au
(
0
)
)
}
pub
fn
block_start_margin_for_noncollapsible_context
(
&
self
)
-
>
Au
{
match
*
self
{
CollapsibleMargins
:
:
None
(
block_start
_
)
=
>
block_start
CollapsibleMargins
:
:
Collapse
(
ref
block_start
_
)
|
CollapsibleMargins
:
:
CollapseThrough
(
ref
block_start
)
=
>
block_start
.
collapse
(
)
}
}
}
enum
FinalMarginState
{
MarginsCollapseThrough
BottomMarginCollapses
}
pub
struct
MarginCollapseInfo
{
pub
state
:
MarginCollapseState
pub
block_start_margin
:
AdjoiningMargins
pub
margin_in
:
AdjoiningMargins
}
impl
MarginCollapseInfo
{
pub
fn
new
(
)
-
>
MarginCollapseInfo
{
MarginCollapseInfo
{
state
:
MarginCollapseState
:
:
AccumulatingCollapsibleTopMargin
block_start_margin
:
AdjoiningMargins
:
:
new
(
)
margin_in
:
AdjoiningMargins
:
:
new
(
)
}
}
pub
fn
initialize_block_start_margin
(
&
mut
self
fragment
:
&
Fragment
can_collapse_block_start_margin_with_kids
:
bool
)
{
if
!
can_collapse_block_start_margin_with_kids
{
self
.
state
=
MarginCollapseState
:
:
AccumulatingMarginIn
}
self
.
block_start_margin
=
AdjoiningMargins
:
:
from_margin
(
fragment
.
margin
.
block_start
)
}
pub
fn
finish_and_compute_collapsible_margins
(
mut
self
fragment
:
&
Fragment
can_collapse_block_end_margin_with_kids
:
bool
)
-
>
(
CollapsibleMargins
Au
)
{
let
state
=
match
self
.
state
{
MarginCollapseState
:
:
AccumulatingCollapsibleTopMargin
=
>
{
match
fragment
.
style
(
)
.
content_block_size
(
)
{
LengthOrPercentageOrAuto
:
:
Auto
|
LengthOrPercentageOrAuto
:
:
Length
(
Au
(
0
)
)
|
LengthOrPercentageOrAuto
:
:
Percentage
(
0
.
)
=
>
{
match
fragment
.
style
(
)
.
min_block_size
(
)
{
LengthOrPercentage
:
:
Length
(
Au
(
0
)
)
|
LengthOrPercentage
:
:
Percentage
(
0
.
)
=
>
{
FinalMarginState
:
:
MarginsCollapseThrough
}
_
=
>
{
FinalMarginState
:
:
BottomMarginCollapses
}
}
}
_
=
>
{
FinalMarginState
:
:
BottomMarginCollapses
}
}
}
MarginCollapseState
:
:
AccumulatingMarginIn
=
>
FinalMarginState
:
:
BottomMarginCollapses
}
;
let
block_end_margin
=
fragment
.
margin
.
block_end
;
if
!
can_collapse_block_end_margin_with_kids
{
match
state
{
FinalMarginState
:
:
MarginsCollapseThrough
=
>
{
let
advance
=
self
.
block_start_margin
.
collapse
(
)
;
self
.
margin_in
.
union
(
AdjoiningMargins
:
:
from_margin
(
block_end_margin
)
)
;
(
CollapsibleMargins
:
:
Collapse
(
self
.
block_start_margin
self
.
margin_in
)
advance
)
}
FinalMarginState
:
:
BottomMarginCollapses
=
>
{
let
advance
=
self
.
margin_in
.
collapse
(
)
;
self
.
margin_in
.
union
(
AdjoiningMargins
:
:
from_margin
(
block_end_margin
)
)
;
(
CollapsibleMargins
:
:
Collapse
(
self
.
block_start_margin
self
.
margin_in
)
advance
)
}
}
}
else
{
match
state
{
FinalMarginState
:
:
MarginsCollapseThrough
=
>
{
self
.
block_start_margin
.
union
(
AdjoiningMargins
:
:
from_margin
(
block_end_margin
)
)
;
(
CollapsibleMargins
:
:
CollapseThrough
(
self
.
block_start_margin
)
Au
(
0
)
)
}
FinalMarginState
:
:
BottomMarginCollapses
=
>
{
self
.
margin_in
.
union
(
AdjoiningMargins
:
:
from_margin
(
block_end_margin
)
)
;
(
CollapsibleMargins
:
:
Collapse
(
self
.
block_start_margin
self
.
margin_in
)
Au
(
0
)
)
}
}
}
}
pub
fn
current_float_ceiling
(
&
mut
self
)
-
>
Au
{
match
self
.
state
{
MarginCollapseState
:
:
AccumulatingCollapsibleTopMargin
=
>
{
Au
(
0
)
}
MarginCollapseState
:
:
AccumulatingMarginIn
=
>
self
.
margin_in
.
collapse
(
)
}
}
pub
fn
advance_block_start_margin
(
&
mut
self
child_collapsible_margins
:
&
CollapsibleMargins
)
-
>
Au
{
match
(
self
.
state
*
child_collapsible_margins
)
{
(
MarginCollapseState
:
:
AccumulatingCollapsibleTopMargin
CollapsibleMargins
:
:
None
(
block_start
_
)
)
=
>
{
self
.
state
=
MarginCollapseState
:
:
AccumulatingMarginIn
;
block_start
}
(
MarginCollapseState
:
:
AccumulatingCollapsibleTopMargin
CollapsibleMargins
:
:
Collapse
(
block_start
_
)
)
=
>
{
self
.
block_start_margin
.
union
(
block_start
)
;
self
.
state
=
MarginCollapseState
:
:
AccumulatingMarginIn
;
Au
(
0
)
}
(
MarginCollapseState
:
:
AccumulatingMarginIn
CollapsibleMargins
:
:
None
(
block_start
_
)
)
=
>
{
let
previous_margin_value
=
self
.
margin_in
.
collapse
(
)
;
self
.
margin_in
=
AdjoiningMargins
:
:
new
(
)
;
previous_margin_value
+
block_start
}
(
MarginCollapseState
:
:
AccumulatingMarginIn
CollapsibleMargins
:
:
Collapse
(
block_start
_
)
)
=
>
{
self
.
margin_in
.
union
(
block_start
)
;
let
margin_value
=
self
.
margin_in
.
collapse
(
)
;
self
.
margin_in
=
AdjoiningMargins
:
:
new
(
)
;
margin_value
}
(
_
CollapsibleMargins
:
:
CollapseThrough
(
_
)
)
=
>
{
Au
(
0
)
}
}
}
pub
fn
advance_block_end_margin
(
&
mut
self
child_collapsible_margins
:
&
CollapsibleMargins
)
-
>
Au
{
match
(
self
.
state
*
child_collapsible_margins
)
{
(
MarginCollapseState
:
:
AccumulatingCollapsibleTopMargin
CollapsibleMargins
:
:
None
(
.
.
)
)
|
(
MarginCollapseState
:
:
AccumulatingCollapsibleTopMargin
CollapsibleMargins
:
:
Collapse
(
.
.
)
)
=
>
{
panic
!
(
"
should
not
be
accumulating
collapsible
block_start
margins
anymore
!
"
)
}
(
MarginCollapseState
:
:
AccumulatingCollapsibleTopMargin
CollapsibleMargins
:
:
CollapseThrough
(
margin
)
)
=
>
{
self
.
block_start_margin
.
union
(
margin
)
;
Au
(
0
)
}
(
MarginCollapseState
:
:
AccumulatingMarginIn
CollapsibleMargins
:
:
None
(
_
block_end
)
)
=
>
{
assert_eq
!
(
self
.
margin_in
.
most_positive
Au
(
0
)
)
;
assert_eq
!
(
self
.
margin_in
.
most_negative
Au
(
0
)
)
;
block_end
}
(
MarginCollapseState
:
:
AccumulatingMarginIn
CollapsibleMargins
:
:
Collapse
(
_
block_end
)
)
|
(
MarginCollapseState
:
:
AccumulatingMarginIn
CollapsibleMargins
:
:
CollapseThrough
(
block_end
)
)
=
>
{
self
.
margin_in
.
union
(
block_end
)
;
Au
(
0
)
}
}
}
}
#
[
derive
(
Copy
Clone
)
]
pub
enum
MarginCollapseState
{
AccumulatingCollapsibleTopMargin
AccumulatingMarginIn
}
#
[
derive
(
RustcEncodable
)
]
pub
struct
IntrinsicISizes
{
pub
minimum_inline_size
:
Au
pub
preferred_inline_size
:
Au
}
impl
fmt
:
:
Debug
for
IntrinsicISizes
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
min
=
{
:
?
}
pref
=
{
:
?
}
"
self
.
minimum_inline_size
self
.
preferred_inline_size
)
}
}
impl
IntrinsicISizes
{
pub
fn
new
(
)
-
>
IntrinsicISizes
{
IntrinsicISizes
{
minimum_inline_size
:
Au
(
0
)
preferred_inline_size
:
Au
(
0
)
}
}
}
pub
struct
IntrinsicISizesContribution
{
pub
content_intrinsic_sizes
:
IntrinsicISizes
pub
surrounding_size
:
Au
}
impl
IntrinsicISizesContribution
{
pub
fn
new
(
)
-
>
IntrinsicISizesContribution
{
IntrinsicISizesContribution
{
content_intrinsic_sizes
:
IntrinsicISizes
:
:
new
(
)
surrounding_size
:
Au
(
0
)
}
}
pub
fn
finish
(
self
)
-
>
IntrinsicISizes
{
IntrinsicISizes
{
minimum_inline_size
:
self
.
content_intrinsic_sizes
.
minimum_inline_size
+
self
.
surrounding_size
preferred_inline_size
:
self
.
content_intrinsic_sizes
.
preferred_inline_size
+
self
.
surrounding_size
}
}
pub
fn
union_inline
(
&
mut
self
sizes
:
&
IntrinsicISizes
)
{
self
.
content_intrinsic_sizes
.
minimum_inline_size
=
max
(
self
.
content_intrinsic_sizes
.
minimum_inline_size
sizes
.
minimum_inline_size
)
;
self
.
content_intrinsic_sizes
.
preferred_inline_size
=
self
.
content_intrinsic_sizes
.
preferred_inline_size
+
sizes
.
preferred_inline_size
}
pub
fn
union_nonbreaking_inline
(
&
mut
self
sizes
:
&
IntrinsicISizes
)
{
self
.
content_intrinsic_sizes
.
minimum_inline_size
=
self
.
content_intrinsic_sizes
.
minimum_inline_size
+
sizes
.
minimum_inline_size
;
self
.
content_intrinsic_sizes
.
preferred_inline_size
=
self
.
content_intrinsic_sizes
.
preferred_inline_size
+
sizes
.
preferred_inline_size
}
pub
fn
union_block
(
&
mut
self
sizes
:
&
IntrinsicISizes
)
{
self
.
content_intrinsic_sizes
.
minimum_inline_size
=
max
(
self
.
content_intrinsic_sizes
.
minimum_inline_size
sizes
.
minimum_inline_size
)
;
self
.
content_intrinsic_sizes
.
preferred_inline_size
=
max
(
self
.
content_intrinsic_sizes
.
preferred_inline_size
sizes
.
preferred_inline_size
)
}
}
#
[
derive
(
Copy
Clone
PartialEq
Debug
)
]
pub
enum
MaybeAuto
{
Auto
Specified
(
Au
)
}
impl
MaybeAuto
{
#
[
inline
]
pub
fn
from_style
(
length
:
LengthOrPercentageOrAuto
containing_length
:
Au
)
-
>
MaybeAuto
{
match
length
{
LengthOrPercentageOrAuto
:
:
Auto
=
>
MaybeAuto
:
:
Auto
LengthOrPercentageOrAuto
:
:
Percentage
(
percent
)
=
>
{
MaybeAuto
:
:
Specified
(
containing_length
.
scale_by
(
percent
)
)
}
LengthOrPercentageOrAuto
:
:
Length
(
length
)
=
>
MaybeAuto
:
:
Specified
(
length
)
}
}
#
[
inline
]
pub
fn
specified_or_default
(
&
self
default
:
Au
)
-
>
Au
{
match
*
self
{
MaybeAuto
:
:
Auto
=
>
default
MaybeAuto
:
:
Specified
(
value
)
=
>
value
}
}
#
[
inline
]
pub
fn
specified_or_zero
(
&
self
)
-
>
Au
{
self
.
specified_or_default
(
Au
:
:
new
(
0
)
)
}
#
[
inline
]
pub
fn
map
<
F
>
(
&
self
mapper
:
F
)
-
>
MaybeAuto
where
F
:
FnOnce
(
Au
)
-
>
Au
{
match
*
self
{
MaybeAuto
:
:
Auto
=
>
MaybeAuto
:
:
Auto
MaybeAuto
:
:
Specified
(
value
)
=
>
MaybeAuto
:
:
Specified
(
mapper
(
value
)
)
}
}
}
pub
fn
specified_or_none
(
length
:
LengthOrPercentageOrNone
containing_length
:
Au
)
-
>
Option
<
Au
>
{
match
length
{
LengthOrPercentageOrNone
:
:
None
=
>
None
LengthOrPercentageOrNone
:
:
Percentage
(
percent
)
=
>
Some
(
containing_length
.
scale_by
(
percent
)
)
LengthOrPercentageOrNone
:
:
Length
(
length
)
=
>
Some
(
length
)
}
}
pub
fn
specified
(
length
:
LengthOrPercentage
containing_length
:
Au
)
-
>
Au
{
match
length
{
LengthOrPercentage
:
:
Length
(
length
)
=
>
length
LengthOrPercentage
:
:
Percentage
(
p
)
=
>
containing_length
.
scale_by
(
p
)
}
}
#
[
inline
]
pub
fn
padding_from_style
(
style
:
&
ComputedValues
containing_block_inline_size
:
Au
)
-
>
LogicalMargin
<
Au
>
{
let
padding_style
=
style
.
get_padding
(
)
;
LogicalMargin
:
:
from_physical
(
style
.
writing_mode
SideOffsets2D
:
:
new
(
specified
(
padding_style
.
padding_top
containing_block_inline_size
)
specified
(
padding_style
.
padding_right
containing_block_inline_size
)
specified
(
padding_style
.
padding_bottom
containing_block_inline_size
)
specified
(
padding_style
.
padding_left
containing_block_inline_size
)
)
)
}
pub
trait
ToGfxMatrix
{
fn
to_gfx_matrix
(
&
self
containing_size
:
&
Size2D
<
Au
>
)
-
>
Matrix4
<
f32
>
;
}
impl
ToGfxMatrix
for
ComputedMatrix
{
fn
to_gfx_matrix
(
&
self
containing_size
:
&
Size2D
<
Au
>
)
-
>
Matrix4
<
f32
>
{
Matrix4
{
m11
:
self
.
m11
as
f32
m12
:
self
.
m12
as
f32
m13
:
self
.
m13
as
f32
m14
:
self
.
m14
as
f32
m21
:
self
.
m21
as
f32
m22
:
self
.
m22
as
f32
m23
:
self
.
m23
as
f32
m24
:
self
.
m24
as
f32
m31
:
self
.
m31
as
f32
m32
:
self
.
m32
as
f32
m33
:
self
.
m33
as
f32
m34
:
self
.
m34
as
f32
m41
:
self
.
m41
.
to_au
(
containing_size
.
width
)
.
to_f32_px
(
)
m42
:
self
.
m42
.
to_au
(
containing_size
.
height
)
.
to_f32_px
(
)
m43
:
self
.
m43
as
f32
m44
:
self
.
m44
as
f32
}
}
}
pub
trait
ToAu
{
fn
to_au
(
&
self
containing_size
:
Au
)
-
>
Au
;
}
impl
ToAu
for
LengthAndPercentage
{
#
[
inline
]
fn
to_au
(
&
self
containing_size
:
Au
)
-
>
Au
{
self
.
length
+
Au
:
:
from_f32_px
(
self
.
percentage
*
containing_size
.
to_f32_px
(
)
)
}
}
