use
css
:
:
node_style
:
:
StyledNode
;
use
css
:
:
matching
:
:
{
ApplicableDeclarations
CannotShare
MatchMethods
StyleWasShared
}
;
use
construct
:
:
FlowConstructor
;
use
context
:
:
LayoutContext
;
use
flow
:
:
{
Flow
MutableFlowUtils
PreorderFlowTraversal
PostorderFlowTraversal
}
;
use
flow
;
use
incremental
:
:
RestyleDamage
;
use
wrapper
:
:
{
layout_node_to_unsafe_layout_node
LayoutNode
}
;
use
wrapper
:
:
{
PostorderNodeMutTraversal
ThreadSafeLayoutNode
UnsafeLayoutNode
}
;
use
wrapper
:
:
{
PreorderDomTraversal
PostorderDomTraversal
}
;
use
servo_util
:
:
bloom
:
:
BloomFilter
;
use
servo_util
:
:
opts
;
use
servo_util
:
:
tid
:
:
tid
;
use
style
:
:
TNode
;
type
Generation
=
uint
;
local_data_key
!
(
style_bloom
:
(
Box
<
BloomFilter
>
UnsafeLayoutNode
Generation
)
)
fn
take_task_local_bloom_filter
(
parent_node
:
Option
<
LayoutNode
>
layout_context
:
&
LayoutContext
)
-
>
Box
<
BloomFilter
>
{
match
(
parent_node
style_bloom
.
replace
(
None
)
)
{
(
None
_
)
=
>
{
debug
!
(
"
[
{
}
]
No
parent
but
new
bloom
filter
!
"
tid
(
)
)
;
box
BloomFilter
:
:
new
(
)
}
(
Some
(
parent
)
None
)
=
>
{
let
mut
bloom_filter
=
box
BloomFilter
:
:
new
(
)
;
insert_ancestors_into_bloom_filter
(
&
mut
bloom_filter
parent
layout_context
)
;
bloom_filter
}
(
Some
(
parent
)
Some
(
(
mut
bloom_filter
old_node
old_generation
)
)
)
=
>
{
if
old_node
=
=
layout_node_to_unsafe_layout_node
(
&
parent
)
&
&
old_generation
=
=
layout_context
.
shared
.
generation
{
debug
!
(
"
[
{
}
]
Parent
matches
(
=
{
}
)
.
Reusing
bloom
filter
.
"
tid
(
)
old_node
.
val0
(
)
)
;
bloom_filter
}
else
{
*
bloom_filter
=
BloomFilter
:
:
new
(
)
;
insert_ancestors_into_bloom_filter
(
&
mut
bloom_filter
parent
layout_context
)
;
bloom_filter
}
}
}
}
fn
put_task_local_bloom_filter
(
bf
:
Box
<
BloomFilter
>
unsafe_node
:
&
UnsafeLayoutNode
layout_context
:
&
LayoutContext
)
{
match
style_bloom
.
replace
(
Some
(
(
bf
*
unsafe_node
layout_context
.
shared
.
generation
)
)
)
{
None
=
>
{
}
Some
(
_
)
=
>
fail
!
(
"
Putting
into
a
never
-
taken
task
-
local
bloom
filter
"
)
}
}
fn
insert_ancestors_into_bloom_filter
(
bf
:
&
mut
Box
<
BloomFilter
>
mut
n
:
LayoutNode
layout_context
:
&
LayoutContext
)
{
debug
!
(
"
[
{
}
]
Inserting
ancestors
.
"
tid
(
)
)
;
let
mut
ancestors
=
0u
;
loop
{
ancestors
+
=
1
;
n
.
insert_into_bloom_filter
(
&
mut
*
*
bf
)
;
n
=
match
n
.
layout_parent_node
(
layout_context
.
shared
)
{
None
=
>
break
Some
(
p
)
=
>
p
}
;
}
debug
!
(
"
[
{
}
]
Inserted
{
}
ancestors
.
"
tid
(
)
ancestors
)
;
}
pub
struct
RecalcStyleForNode
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PreorderDomTraversal
for
RecalcStyleForNode
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
node
:
LayoutNode
)
{
node
.
initialize_layout_data
(
self
.
layout_context
.
shared
.
layout_chan
.
clone
(
)
)
;
let
parent_opt
=
node
.
layout_parent_node
(
self
.
layout_context
.
shared
)
;
let
bf
=
take_task_local_bloom_filter
(
parent_opt
self
.
layout_context
)
;
let
some_bf
=
Some
(
bf
)
;
if
node
.
is_dirty
(
)
|
|
node
.
has_dirty_siblings
(
)
{
if
node
.
has_changed
(
)
{
let
node
=
ThreadSafeLayoutNode
:
:
new
(
&
node
)
;
node
.
unstyle
(
)
;
}
let
style_sharing_candidate_cache
=
self
.
layout_context
.
style_sharing_candidate_cache
(
)
;
let
sharing_result
=
unsafe
{
node
.
share_style_if_possible
(
style_sharing_candidate_cache
parent_opt
.
clone
(
)
)
}
;
match
sharing_result
{
CannotShare
(
mut
shareable
)
=
>
{
let
mut
applicable_declarations
=
ApplicableDeclarations
:
:
new
(
)
;
if
node
.
is_element
(
)
{
let
stylist
=
unsafe
{
&
*
self
.
layout_context
.
shared
.
stylist
}
;
node
.
match_node
(
stylist
&
some_bf
&
mut
applicable_declarations
&
mut
shareable
)
;
}
unsafe
{
node
.
cascade_node
(
parent_opt
&
applicable_declarations
self
.
layout_context
.
applicable_declarations_cache
(
)
)
;
}
if
shareable
{
style_sharing_candidate_cache
.
insert_if_possible
(
&
node
)
;
}
}
StyleWasShared
(
index
)
=
>
style_sharing_candidate_cache
.
touch
(
index
)
}
}
let
mut
bf
=
some_bf
.
unwrap
(
)
;
let
unsafe_layout_node
=
layout_node_to_unsafe_layout_node
(
&
node
)
;
debug
!
(
"
[
{
}
]
+
{
:
X
}
"
tid
(
)
unsafe_layout_node
.
val0
(
)
)
;
node
.
insert_into_bloom_filter
(
&
mut
*
bf
)
;
put_task_local_bloom_filter
(
bf
&
unsafe_layout_node
self
.
layout_context
)
;
}
}
pub
struct
ConstructFlows
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PostorderDomTraversal
for
ConstructFlows
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
node
:
LayoutNode
)
{
{
let
tnode
=
ThreadSafeLayoutNode
:
:
new
(
&
node
)
;
if
!
opts
:
:
get
(
)
.
incremental_layout
{
unsafe
{
node
.
set_dirty_descendants
(
true
)
;
}
}
if
node
.
has_dirty_descendants
(
)
{
tnode
.
set_restyle_damage
(
RestyleDamage
:
:
all
(
)
)
;
let
mut
flow_constructor
=
FlowConstructor
:
:
new
(
self
.
layout_context
)
;
flow_constructor
.
process
(
&
tnode
)
;
debug
!
(
"
Constructed
flow
for
{
:
x
}
:
{
:
x
}
"
tnode
.
debug_id
(
)
tnode
.
flow_debug_id
(
)
)
;
}
tnode
.
set_restyle_damage
(
RestyleDamage
:
:
empty
(
)
)
;
}
unsafe
{
node
.
set_changed
(
false
)
;
node
.
set_dirty
(
false
)
;
node
.
set_dirty_siblings
(
false
)
;
node
.
set_dirty_descendants
(
false
)
;
}
let
unsafe_layout_node
=
layout_node_to_unsafe_layout_node
(
&
node
)
;
let
(
mut
bf
old_node
old_generation
)
=
style_bloom
.
replace
(
None
)
.
expect
(
"
The
bloom
filter
should
have
been
set
by
style
recalc
.
"
)
;
assert_eq
!
(
old_node
unsafe_layout_node
)
;
assert_eq
!
(
old_generation
self
.
layout_context
.
shared
.
generation
)
;
match
node
.
layout_parent_node
(
self
.
layout_context
.
shared
)
{
None
=
>
{
debug
!
(
"
[
{
}
]
-
{
:
X
}
and
deleting
BF
.
"
tid
(
)
unsafe_layout_node
.
val0
(
)
)
;
}
Some
(
parent
)
=
>
{
node
.
remove_from_bloom_filter
(
&
mut
*
bf
)
;
let
unsafe_parent
=
layout_node_to_unsafe_layout_node
(
&
parent
)
;
put_task_local_bloom_filter
(
bf
&
unsafe_parent
self
.
layout_context
)
;
}
}
;
}
}
#
[
cfg
(
debug
)
]
struct
FlowTreeVerification
;
#
[
cfg
(
debug
)
]
impl
PreorderFlow
for
FlowTreeVerification
{
#
[
inline
]
fn
process
(
&
mut
self
flow
:
&
mut
Flow
)
{
let
base
=
flow
:
:
base
(
flow
)
;
if
!
base
.
flags
.
is_leaf
(
)
&
&
!
base
.
flags
.
is_nonleaf
(
)
{
println
(
"
flow
tree
verification
failed
:
flow
wasn
'
t
a
leaf
or
a
nonleaf
!
"
)
;
flow
.
dump
(
)
;
fail
!
(
"
flow
tree
verification
failed
"
)
}
}
}
pub
struct
BubbleISizes
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PostorderFlowTraversal
for
BubbleISizes
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
flow
.
bubble_inline_sizes
(
)
;
}
}
pub
struct
AssignISizes
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PreorderFlowTraversal
for
AssignISizes
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
flow
.
assign_inline_sizes
(
self
.
layout_context
)
;
}
}
pub
struct
AssignBSizesAndStoreOverflow
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PostorderFlowTraversal
for
AssignBSizesAndStoreOverflow
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
flow
.
assign_block_size
(
self
.
layout_context
)
;
if
!
flow
.
is_store_overflow_delayed
(
)
{
flow
.
store_overflow
(
self
.
layout_context
)
;
}
}
#
[
inline
]
fn
should_process
(
&
self
flow
:
&
mut
Flow
)
-
>
bool
{
!
flow
:
:
base
(
flow
)
.
flags
.
impacted_by_floats
(
)
}
}
pub
struct
ComputeAbsolutePositions
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PreorderFlowTraversal
for
ComputeAbsolutePositions
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
flow
.
compute_absolute_position
(
)
}
}
pub
struct
BuildDisplayList
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PostorderFlowTraversal
for
BuildDisplayList
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
flow
.
build_display_list
(
self
.
layout_context
)
}
}
