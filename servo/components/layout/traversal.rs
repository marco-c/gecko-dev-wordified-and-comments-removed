#
!
[
allow
(
unsafe_code
)
]
use
construct
:
:
FlowConstructor
;
use
context
:
:
{
LayoutContext
SharedLayoutContext
}
;
use
display_list_builder
:
:
DisplayListBuildState
;
use
flow
:
:
{
PostorderFlowTraversal
PreorderFlowTraversal
}
;
use
flow
:
:
{
self
Flow
CAN_BE_FRAGMENTED
}
;
use
gfx
:
:
display_list
:
:
OpaqueNode
;
use
incremental
:
:
{
BUBBLE_ISIZES
REFLOW
REFLOW_OUT_OF_FLOW
REPAINT
RestyleDamage
}
;
use
std
:
:
mem
;
use
style
:
:
context
:
:
{
StyleContext
ReflowGoal
}
;
use
style
:
:
matching
:
:
MatchMethods
;
use
style
:
:
traversal
:
:
{
DomTraversalContext
STYLE_BLOOM
}
;
use
style
:
:
traversal
:
:
{
put_thread_local_bloom_filter
recalc_style_at
}
;
use
util
:
:
opts
;
use
util
:
:
tid
:
:
tid
;
use
wrapper
:
:
{
LayoutNode
ServoLayoutNode
ThreadSafeLayoutNode
}
;
pub
struct
RecalcStyleAndConstructFlows
<
'
lc
>
{
context
:
LayoutContext
<
'
lc
>
root
:
OpaqueNode
}
impl
<
'
lc
'
ln
>
DomTraversalContext
<
'
ln
ServoLayoutNode
<
'
ln
>
>
for
RecalcStyleAndConstructFlows
<
'
lc
>
{
type
SharedContext
=
SharedLayoutContext
;
#
[
allow
(
unsafe_code
)
]
fn
new
<
'
a
>
(
shared
:
&
'
a
Self
:
:
SharedContext
root
:
OpaqueNode
)
-
>
Self
{
let
shared_lc
:
&
'
lc
SharedLayoutContext
=
unsafe
{
mem
:
:
transmute
(
shared
)
}
;
RecalcStyleAndConstructFlows
{
context
:
LayoutContext
:
:
new
(
shared_lc
)
root
:
root
}
}
fn
process_preorder
(
&
self
node
:
ServoLayoutNode
<
'
ln
>
)
{
recalc_style_at
(
&
self
.
context
self
.
root
node
)
;
}
fn
process_postorder
(
&
self
node
:
ServoLayoutNode
<
'
ln
>
)
{
construct_flows_at
(
&
self
.
context
self
.
root
node
)
;
}
}
pub
trait
PostorderNodeMutTraversal
<
'
ln
ConcreteThreadSafeLayoutNode
:
ThreadSafeLayoutNode
<
'
ln
>
>
{
fn
process
(
&
mut
self
node
:
&
ConcreteThreadSafeLayoutNode
)
-
>
bool
;
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
fn
construct_flows_at
<
'
a
'
ln
N
:
LayoutNode
<
'
ln
>
>
(
context
:
&
'
a
LayoutContext
<
'
a
>
root
:
OpaqueNode
node
:
N
)
{
{
let
tnode
=
node
.
to_threadsafe
(
)
;
let
nonincremental_layout
=
opts
:
:
get
(
)
.
nonincremental_layout
;
if
nonincremental_layout
|
|
node
.
has_dirty_descendants
(
)
{
let
mut
flow_constructor
=
FlowConstructor
:
:
new
(
context
)
;
if
nonincremental_layout
|
|
!
flow_constructor
.
repair_if_possible
(
&
tnode
)
{
flow_constructor
.
process
(
&
tnode
)
;
debug
!
(
"
Constructed
flow
for
{
:
x
}
:
{
:
x
}
"
tnode
.
debug_id
(
)
tnode
.
flow_debug_id
(
)
)
;
}
}
tnode
.
set_restyle_damage
(
RestyleDamage
:
:
empty
(
)
)
;
}
unsafe
{
node
.
set_changed
(
false
)
;
node
.
set_dirty
(
false
)
;
node
.
set_dirty_descendants
(
false
)
;
}
let
unsafe_layout_node
=
node
.
to_unsafe
(
)
;
let
(
mut
bf
old_node
old_generation
)
=
STYLE_BLOOM
.
with
(
|
style_bloom
|
{
mem
:
:
replace
(
&
mut
*
style_bloom
.
borrow_mut
(
)
None
)
.
expect
(
"
The
bloom
filter
should
have
been
set
by
style
recalc
.
"
)
}
)
;
assert_eq
!
(
old_node
unsafe_layout_node
)
;
assert_eq
!
(
old_generation
context
.
shared_context
(
)
.
generation
)
;
match
node
.
layout_parent_node
(
root
)
{
None
=
>
{
debug
!
(
"
[
{
}
]
-
{
:
X
}
and
deleting
BF
.
"
tid
(
)
unsafe_layout_node
.
0
)
;
}
Some
(
parent
)
=
>
{
node
.
remove_from_bloom_filter
(
&
mut
*
bf
)
;
let
unsafe_parent
=
parent
.
to_unsafe
(
)
;
put_thread_local_bloom_filter
(
bf
&
unsafe_parent
&
context
.
shared_context
(
)
)
;
}
}
;
}
pub
struct
BubbleISizes
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PostorderFlowTraversal
for
BubbleISizes
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
flow
.
bubble_inline_sizes
(
)
;
flow
:
:
mut_base
(
flow
)
.
restyle_damage
.
remove
(
BUBBLE_ISIZES
)
;
}
#
[
inline
]
fn
should_process
(
&
self
flow
:
&
mut
Flow
)
-
>
bool
{
flow
:
:
base
(
flow
)
.
restyle_damage
.
contains
(
BUBBLE_ISIZES
)
}
}
#
[
derive
(
Copy
Clone
)
]
pub
struct
AssignISizes
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PreorderFlowTraversal
for
AssignISizes
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
flow
.
assign_inline_sizes
(
self
.
layout_context
)
;
}
#
[
inline
]
fn
should_process
(
&
self
flow
:
&
mut
Flow
)
-
>
bool
{
flow
:
:
base
(
flow
)
.
restyle_damage
.
intersects
(
REFLOW_OUT_OF_FLOW
|
REFLOW
)
}
}
#
[
derive
(
Copy
Clone
)
]
pub
struct
AssignBSizesAndStoreOverflow
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PostorderFlowTraversal
for
AssignBSizesAndStoreOverflow
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
if
flow
:
:
base
(
flow
)
.
flags
.
impacted_by_floats
(
)
{
return
}
flow
.
assign_block_size
(
self
.
layout_context
)
;
}
#
[
inline
]
fn
should_process
(
&
self
flow
:
&
mut
Flow
)
-
>
bool
{
let
base
=
flow
:
:
base
(
flow
)
;
base
.
restyle_damage
.
intersects
(
REFLOW_OUT_OF_FLOW
|
REFLOW
)
&
&
!
base
.
flags
.
contains
(
CAN_BE_FRAGMENTED
)
}
}
#
[
derive
(
Copy
Clone
)
]
pub
struct
ComputeAbsolutePositions
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PreorderFlowTraversal
for
ComputeAbsolutePositions
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
flow
.
compute_absolute_position
(
self
.
layout_context
)
;
flow
.
store_overflow
(
self
.
layout_context
)
;
}
}
pub
struct
BuildDisplayList
<
'
a
>
{
pub
state
:
DisplayListBuildState
<
'
a
>
}
impl
<
'
a
>
BuildDisplayList
<
'
a
>
{
#
[
inline
]
pub
fn
traverse
(
&
mut
self
flow
:
&
mut
Flow
)
{
if
self
.
should_process
(
)
{
self
.
state
.
push_stacking_context_id
(
flow
:
:
base
(
flow
)
.
stacking_context_id
)
;
flow
.
build_display_list
(
&
mut
self
.
state
)
;
flow
:
:
mut_base
(
flow
)
.
restyle_damage
.
remove
(
REPAINT
)
;
self
.
state
.
pop_stacking_context_id
(
)
;
}
for
kid
in
flow
:
:
child_iter
(
flow
)
{
self
.
traverse
(
kid
)
;
}
}
#
[
inline
]
fn
should_process
(
&
self
)
-
>
bool
{
self
.
state
.
layout_context
.
shared_context
(
)
.
goal
=
=
ReflowGoal
:
:
ForDisplay
}
}
