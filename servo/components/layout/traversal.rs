use
construct
:
:
FlowConstructor
;
use
context
:
:
{
LayoutContext
SharedLayoutContext
}
;
use
display_list_builder
:
:
DisplayListBuildState
;
use
flow
:
:
{
CAN_BE_FRAGMENTED
Flow
ImmutableFlowUtils
PostorderFlowTraversal
}
;
use
flow
:
:
{
PreorderFlowTraversal
self
}
;
use
gfx
:
:
display_list
:
:
OpaqueNode
;
use
script_layout_interface
:
:
restyle_damage
:
:
{
BUBBLE_ISIZES
REFLOW
REFLOW_OUT_OF_FLOW
REPAINT
RestyleDamage
}
;
use
script_layout_interface
:
:
wrapper_traits
:
:
{
LayoutNode
ThreadSafeLayoutNode
}
;
use
std
:
:
mem
;
use
style
:
:
context
:
:
{
LocalStyleContext
SharedStyleContext
StyleContext
}
;
use
style
:
:
dom
:
:
TNode
;
use
style
:
:
selector_impl
:
:
ServoSelectorImpl
;
use
style
:
:
traversal
:
:
RestyleResult
;
use
style
:
:
traversal
:
:
{
DomTraversalContext
remove_from_bloom_filter
recalc_style_at
}
;
use
util
:
:
opts
;
use
wrapper
:
:
{
LayoutNodeLayoutData
ThreadSafeLayoutNodeHelpers
}
;
pub
struct
RecalcStyleAndConstructFlows
<
'
lc
>
{
context
:
LayoutContext
<
'
lc
>
root
:
OpaqueNode
}
impl
<
'
lc
N
>
DomTraversalContext
<
N
>
for
RecalcStyleAndConstructFlows
<
'
lc
>
where
N
:
LayoutNode
+
TNode
N
:
:
ConcreteElement
:
:
:
selectors
:
:
Element
<
Impl
=
ServoSelectorImpl
>
{
type
SharedContext
=
SharedLayoutContext
;
#
[
allow
(
unsafe_code
)
]
fn
new
<
'
a
>
(
shared
:
&
'
a
Self
:
:
SharedContext
root
:
OpaqueNode
)
-
>
Self
{
let
shared_lc
:
&
'
lc
SharedLayoutContext
=
unsafe
{
mem
:
:
transmute
(
shared
)
}
;
RecalcStyleAndConstructFlows
{
context
:
LayoutContext
:
:
new
(
shared_lc
)
root
:
root
}
}
fn
process_preorder
(
&
self
node
:
N
)
-
>
RestyleResult
{
node
.
initialize_data
(
)
;
recalc_style_at
(
&
self
.
context
self
.
root
node
)
}
fn
process_postorder
(
&
self
node
:
N
)
{
construct_flows_at
(
&
self
.
context
self
.
root
node
)
;
}
fn
local_context
(
&
self
)
-
>
&
LocalStyleContext
{
self
.
context
.
local_context
(
)
}
}
pub
trait
PostorderNodeMutTraversal
<
ConcreteThreadSafeLayoutNode
:
ThreadSafeLayoutNode
>
{
fn
process
(
&
mut
self
node
:
&
ConcreteThreadSafeLayoutNode
)
;
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
fn
construct_flows_at
<
'
a
N
:
LayoutNode
>
(
context
:
&
'
a
LayoutContext
<
'
a
>
root
:
OpaqueNode
node
:
N
)
{
{
let
tnode
=
node
.
to_threadsafe
(
)
;
let
nonincremental_layout
=
opts
:
:
get
(
)
.
nonincremental_layout
;
if
nonincremental_layout
|
|
node
.
is_dirty
(
)
|
|
node
.
has_dirty_descendants
(
)
{
let
mut
flow_constructor
=
FlowConstructor
:
:
new
(
context
)
;
if
nonincremental_layout
|
|
!
flow_constructor
.
repair_if_possible
(
&
tnode
)
{
flow_constructor
.
process
(
&
tnode
)
;
debug
!
(
"
Constructed
flow
for
{
:
x
}
:
{
:
x
}
"
tnode
.
debug_id
(
)
tnode
.
flow_debug_id
(
)
)
;
}
}
tnode
.
set_restyle_damage
(
RestyleDamage
:
:
empty
(
)
)
;
}
unsafe
{
node
.
set_changed
(
false
)
;
node
.
set_dirty
(
false
)
;
node
.
set_dirty_descendants
(
false
)
;
}
remove_from_bloom_filter
(
context
root
node
)
;
}
pub
struct
BubbleISizes
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PostorderFlowTraversal
for
BubbleISizes
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
flow
.
bubble_inline_sizes
(
)
;
flow
:
:
mut_base
(
flow
)
.
restyle_damage
.
remove
(
BUBBLE_ISIZES
)
;
}
#
[
inline
]
fn
should_process
(
&
self
flow
:
&
mut
Flow
)
-
>
bool
{
flow
:
:
base
(
flow
)
.
restyle_damage
.
contains
(
BUBBLE_ISIZES
)
}
}
#
[
derive
(
Copy
Clone
)
]
pub
struct
AssignISizes
<
'
a
>
{
pub
shared_context
:
&
'
a
SharedStyleContext
}
impl
<
'
a
>
PreorderFlowTraversal
for
AssignISizes
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
flow
.
assign_inline_sizes
(
self
.
shared_context
)
;
}
#
[
inline
]
fn
should_process
(
&
self
flow
:
&
mut
Flow
)
-
>
bool
{
flow
:
:
base
(
flow
)
.
restyle_damage
.
intersects
(
REFLOW_OUT_OF_FLOW
|
REFLOW
)
}
}
#
[
derive
(
Copy
Clone
)
]
pub
struct
AssignBSizes
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PostorderFlowTraversal
for
AssignBSizes
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
if
flow
.
floats_might_flow_through
(
)
{
return
}
flow
.
assign_block_size
(
self
.
layout_context
)
;
}
#
[
inline
]
fn
should_process
(
&
self
flow
:
&
mut
Flow
)
-
>
bool
{
let
base
=
flow
:
:
base
(
flow
)
;
base
.
restyle_damage
.
intersects
(
REFLOW_OUT_OF_FLOW
|
REFLOW
)
&
&
!
base
.
flags
.
contains
(
CAN_BE_FRAGMENTED
)
}
}
#
[
derive
(
Copy
Clone
)
]
pub
struct
ComputeAbsolutePositions
<
'
a
>
{
pub
layout_context
:
&
'
a
SharedLayoutContext
}
impl
<
'
a
>
PreorderFlowTraversal
for
ComputeAbsolutePositions
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
flow
.
compute_absolute_position
(
self
.
layout_context
)
;
}
}
pub
struct
BuildDisplayList
<
'
a
>
{
pub
state
:
DisplayListBuildState
<
'
a
>
}
impl
<
'
a
>
BuildDisplayList
<
'
a
>
{
#
[
inline
]
pub
fn
traverse
(
&
mut
self
flow
:
&
mut
Flow
)
{
if
self
.
should_process
(
)
{
self
.
state
.
push_stacking_context_id
(
flow
:
:
base
(
flow
)
.
stacking_context_id
)
;
flow
.
build_display_list
(
&
mut
self
.
state
)
;
flow
:
:
mut_base
(
flow
)
.
restyle_damage
.
remove
(
REPAINT
)
;
self
.
state
.
pop_stacking_context_id
(
)
;
}
for
kid
in
flow
:
:
child_iter_mut
(
flow
)
{
self
.
traverse
(
kid
)
;
}
}
#
[
inline
]
fn
should_process
(
&
self
)
-
>
bool
{
true
}
}
