use
construct
:
:
FlowConstructor
;
use
context
:
:
LayoutContext
;
use
display_list_builder
:
:
DisplayListBuildState
;
use
flow
:
:
{
self
CAN_BE_FRAGMENTED
Flow
ImmutableFlowUtils
}
;
use
script_layout_interface
:
:
wrapper_traits
:
:
{
LayoutNode
ThreadSafeLayoutNode
}
;
use
servo_config
:
:
opts
;
use
style
:
:
context
:
:
{
SharedStyleContext
StyleContext
}
;
use
style
:
:
data
:
:
ElementData
;
use
style
:
:
dom
:
:
{
NodeInfo
TElement
TNode
}
;
use
style
:
:
selector_parser
:
:
RestyleDamage
;
use
style
:
:
servo
:
:
restyle_damage
:
:
{
BUBBLE_ISIZES
REFLOW
REFLOW_OUT_OF_FLOW
REPAINT
REPOSITION
}
;
use
style
:
:
traversal
:
:
{
DomTraversal
recalc_style_at
}
;
use
style
:
:
traversal
:
:
PerLevelTraversalData
;
use
wrapper
:
:
{
GetRawData
LayoutNodeLayoutData
}
;
use
wrapper
:
:
ThreadSafeLayoutNodeHelpers
;
pub
struct
RecalcStyleAndConstructFlows
<
'
a
>
{
context
:
LayoutContext
<
'
a
>
}
impl
<
'
a
>
RecalcStyleAndConstructFlows
<
'
a
>
{
pub
fn
layout_context
(
&
self
)
-
>
&
LayoutContext
<
'
a
>
{
&
self
.
context
}
}
impl
<
'
a
>
RecalcStyleAndConstructFlows
<
'
a
>
{
pub
fn
new
(
context
:
LayoutContext
<
'
a
>
)
-
>
Self
{
RecalcStyleAndConstructFlows
{
context
:
context
}
}
pub
fn
destroy
(
self
)
-
>
LayoutContext
<
'
a
>
{
self
.
context
}
}
#
[
allow
(
unsafe_code
)
]
impl
<
'
a
E
>
DomTraversal
<
E
>
for
RecalcStyleAndConstructFlows
<
'
a
>
where
E
:
TElement
E
:
:
ConcreteNode
:
LayoutNode
E
:
:
FontMetricsProvider
:
Send
{
fn
process_preorder
<
F
>
(
&
self
traversal_data
:
&
PerLevelTraversalData
context
:
&
mut
StyleContext
<
E
>
node
:
E
:
:
ConcreteNode
note_child
:
F
)
where
F
:
FnMut
(
E
:
:
ConcreteNode
)
{
unsafe
{
node
.
initialize_data
(
)
}
;
if
!
node
.
is_text_node
(
)
{
let
el
=
node
.
as_element
(
)
.
unwrap
(
)
;
let
mut
data
=
el
.
mutate_data
(
)
.
unwrap
(
)
;
recalc_style_at
(
self
traversal_data
context
el
&
mut
data
note_child
)
;
}
}
fn
process_postorder
(
&
self
_style_context
:
&
mut
StyleContext
<
E
>
node
:
E
:
:
ConcreteNode
)
{
construct_flows_at
(
&
self
.
context
node
)
;
}
fn
text_node_needs_traversal
(
node
:
E
:
:
ConcreteNode
parent_data
:
&
ElementData
)
-
>
bool
{
node
.
get_raw_data
(
)
.
is_none
(
)
|
|
parent_data
.
damage
!
=
RestyleDamage
:
:
empty
(
)
}
fn
shared_context
(
&
self
)
-
>
&
SharedStyleContext
{
&
self
.
context
.
style_context
}
}
pub
trait
PreorderFlowTraversal
{
fn
process
(
&
self
flow
:
&
mut
Flow
)
;
fn
should_process_subtree
(
&
self
_flow
:
&
mut
Flow
)
-
>
bool
{
true
}
fn
should_process
(
&
self
_flow
:
&
mut
Flow
)
-
>
bool
{
true
}
fn
traverse
(
&
self
flow
:
&
mut
Flow
)
{
if
!
self
.
should_process_subtree
(
flow
)
{
return
;
}
if
self
.
should_process
(
flow
)
{
self
.
process
(
flow
)
;
}
for
kid
in
flow
:
:
child_iter_mut
(
flow
)
{
self
.
traverse
(
kid
)
;
}
}
fn
traverse_absolute_flows
(
&
self
flow
:
&
mut
Flow
)
{
if
self
.
should_process
(
flow
)
{
self
.
process
(
flow
)
;
}
for
descendant_link
in
flow
:
:
mut_base
(
flow
)
.
abs_descendants
.
iter
(
)
{
self
.
traverse_absolute_flows
(
descendant_link
)
}
}
}
pub
trait
PostorderFlowTraversal
{
fn
process
(
&
self
flow
:
&
mut
Flow
)
;
fn
should_process
(
&
self
_flow
:
&
mut
Flow
)
-
>
bool
{
true
}
fn
traverse
(
&
self
flow
:
&
mut
Flow
)
{
for
kid
in
flow
:
:
child_iter_mut
(
flow
)
{
self
.
traverse
(
kid
)
;
}
if
self
.
should_process
(
flow
)
{
self
.
process
(
flow
)
;
}
}
}
pub
trait
InorderFlowTraversal
{
fn
process
(
&
mut
self
flow
:
&
mut
Flow
level
:
u32
)
;
fn
should_process_subtree
(
&
mut
self
_flow
:
&
mut
Flow
)
-
>
bool
{
true
}
fn
traverse
(
&
mut
self
flow
:
&
mut
Flow
level
:
u32
)
{
if
!
self
.
should_process_subtree
(
flow
)
{
return
;
}
self
.
process
(
flow
level
)
;
for
kid
in
flow
:
:
child_iter_mut
(
flow
)
{
self
.
traverse
(
kid
level
+
1
)
;
}
}
}
pub
trait
PostorderNodeMutTraversal
<
ConcreteThreadSafeLayoutNode
:
ThreadSafeLayoutNode
>
{
fn
process
(
&
mut
self
node
:
&
ConcreteThreadSafeLayoutNode
)
;
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
fn
construct_flows_at
<
N
>
(
context
:
&
LayoutContext
node
:
N
)
where
N
:
LayoutNode
{
debug
!
(
"
construct_flows_at
:
{
:
?
}
"
node
)
;
{
let
tnode
=
node
.
to_threadsafe
(
)
;
let
nonincremental_layout
=
opts
:
:
get
(
)
.
nonincremental_layout
;
if
nonincremental_layout
|
|
tnode
.
restyle_damage
(
)
!
=
RestyleDamage
:
:
empty
(
)
|
|
node
.
as_element
(
)
.
map_or
(
false
|
el
|
el
.
has_dirty_descendants
(
)
)
{
let
mut
flow_constructor
=
FlowConstructor
:
:
new
(
context
)
;
if
nonincremental_layout
|
|
!
flow_constructor
.
repair_if_possible
(
&
tnode
)
{
flow_constructor
.
process
(
&
tnode
)
;
debug
!
(
"
Constructed
flow
for
{
:
?
}
:
{
:
x
}
"
tnode
tnode
.
flow_debug_id
(
)
)
;
}
}
tnode
.
mutate_layout_data
(
)
.
unwrap
(
)
.
flags
.
insert
(
:
:
data
:
:
HAS_BEEN_TRAVERSED
)
;
}
if
let
Some
(
el
)
=
node
.
as_element
(
)
{
unsafe
{
el
.
unset_dirty_descendants
(
)
;
}
}
}
pub
struct
BubbleISizes
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PostorderFlowTraversal
for
BubbleISizes
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
flow
.
bubble_inline_sizes
(
)
;
flow
:
:
mut_base
(
flow
)
.
restyle_damage
.
remove
(
BUBBLE_ISIZES
)
;
}
#
[
inline
]
fn
should_process
(
&
self
flow
:
&
mut
Flow
)
-
>
bool
{
flow
:
:
base
(
flow
)
.
restyle_damage
.
contains
(
BUBBLE_ISIZES
)
}
}
#
[
derive
(
Clone
Copy
)
]
pub
struct
AssignISizes
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PreorderFlowTraversal
for
AssignISizes
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
flow
.
assign_inline_sizes
(
self
.
layout_context
)
;
}
#
[
inline
]
fn
should_process
(
&
self
flow
:
&
mut
Flow
)
-
>
bool
{
flow
:
:
base
(
flow
)
.
restyle_damage
.
intersects
(
REFLOW_OUT_OF_FLOW
|
REFLOW
)
}
}
#
[
derive
(
Clone
Copy
)
]
pub
struct
AssignBSizes
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PostorderFlowTraversal
for
AssignBSizes
<
'
a
>
{
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
if
flow
.
floats_might_flow_through
(
)
{
return
}
flow
.
assign_block_size
(
self
.
layout_context
)
;
}
#
[
inline
]
fn
should_process
(
&
self
flow
:
&
mut
Flow
)
-
>
bool
{
let
base
=
flow
:
:
base
(
flow
)
;
base
.
restyle_damage
.
intersects
(
REFLOW_OUT_OF_FLOW
|
REFLOW
)
&
&
!
base
.
flags
.
contains
(
CAN_BE_FRAGMENTED
)
}
}
pub
struct
ComputeStackingRelativePositions
<
'
a
>
{
pub
layout_context
:
&
'
a
LayoutContext
<
'
a
>
}
impl
<
'
a
>
PreorderFlowTraversal
for
ComputeStackingRelativePositions
<
'
a
>
{
#
[
inline
]
fn
should_process_subtree
(
&
self
flow
:
&
mut
Flow
)
-
>
bool
{
flow
:
:
base
(
flow
)
.
restyle_damage
.
contains
(
REPOSITION
)
}
#
[
inline
]
fn
process
(
&
self
flow
:
&
mut
Flow
)
{
flow
.
compute_stacking_relative_position
(
self
.
layout_context
)
;
flow
:
:
mut_base
(
flow
)
.
restyle_damage
.
remove
(
REPOSITION
)
}
}
pub
struct
BuildDisplayList
<
'
a
>
{
pub
state
:
DisplayListBuildState
<
'
a
>
}
impl
<
'
a
>
BuildDisplayList
<
'
a
>
{
#
[
inline
]
pub
fn
traverse
(
&
mut
self
flow
:
&
mut
Flow
)
{
let
parent_stacking_context_id
=
self
.
state
.
current_stacking_context_id
;
self
.
state
.
current_stacking_context_id
=
flow
:
:
base
(
flow
)
.
stacking_context_id
;
let
parent_clipping_and_scrolling
=
self
.
state
.
current_clipping_and_scrolling
;
self
.
state
.
current_clipping_and_scrolling
=
flow
.
clipping_and_scrolling
(
)
;
flow
.
build_display_list
(
&
mut
self
.
state
)
;
flow
:
:
mut_base
(
flow
)
.
restyle_damage
.
remove
(
REPAINT
)
;
for
kid
in
flow
:
:
child_iter_mut
(
flow
)
{
self
.
traverse
(
kid
)
;
}
self
.
state
.
current_stacking_context_id
=
parent_stacking_context_id
;
self
.
state
.
current_clipping_and_scrolling
=
parent_clipping_and_scrolling
;
}
}
