use
app_units
:
:
Au
;
use
block
:
:
FormattingContextType
;
use
flow
:
:
{
self
CLEARS_LEFT
CLEARS_RIGHT
Flow
ImmutableFlowUtils
}
;
use
persistent_list
:
:
PersistentList
;
use
std
:
:
cmp
:
:
{
max
min
}
;
use
std
:
:
fmt
;
use
std
:
:
i32
;
use
style
:
:
computed_values
:
:
float
;
use
style
:
:
logical_geometry
:
:
{
LogicalRect
LogicalSize
WritingMode
}
;
#
[
derive
(
Clone
RustcEncodable
Debug
Copy
)
]
pub
enum
FloatKind
{
Left
Right
}
impl
FloatKind
{
pub
fn
from_property
(
property
:
float
:
:
T
)
-
>
Option
<
FloatKind
>
{
match
property
{
float
:
:
T
:
:
none
=
>
None
float
:
:
T
:
:
left
=
>
Some
(
FloatKind
:
:
Left
)
float
:
:
T
:
:
right
=
>
Some
(
FloatKind
:
:
Right
)
}
}
}
#
[
derive
(
Copy
Clone
)
]
pub
enum
ClearType
{
Left
Right
Both
}
#
[
derive
(
Clone
Copy
)
]
struct
Float
{
bounds
:
LogicalRect
<
Au
>
kind
:
FloatKind
}
impl
fmt
:
:
Debug
for
Float
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
bounds
=
{
:
?
}
kind
=
{
:
?
}
"
self
.
bounds
self
.
kind
)
}
}
#
[
derive
(
Clone
)
]
struct
FloatList
{
floats
:
PersistentList
<
Float
>
max_block_start
:
Option
<
Au
>
}
impl
FloatList
{
fn
new
(
)
-
>
FloatList
{
FloatList
{
floats
:
PersistentList
:
:
new
(
)
max_block_start
:
None
}
}
fn
is_present
(
&
self
)
-
>
bool
{
self
.
floats
.
len
(
)
>
0
}
}
impl
fmt
:
:
Debug
for
FloatList
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
max_block_start
=
{
:
?
}
floats
=
{
}
"
self
.
max_block_start
self
.
floats
.
len
(
)
)
}
}
pub
struct
PlacementInfo
{
pub
size
:
LogicalSize
<
Au
>
pub
ceiling
:
Au
pub
max_inline_size
:
Au
pub
kind
:
FloatKind
}
impl
fmt
:
:
Debug
for
PlacementInfo
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
size
=
{
:
?
}
ceiling
=
{
:
?
}
max_inline_size
=
{
:
?
}
kind
=
{
:
?
}
"
self
.
size
self
.
ceiling
self
.
max_inline_size
self
.
kind
)
}
}
fn
range_intersect
(
block_start_1
:
Au
block_end_1
:
Au
block_start_2
:
Au
block_end_2
:
Au
)
-
>
(
Au
Au
)
{
(
max
(
block_start_1
block_start_2
)
min
(
block_end_1
block_end_2
)
)
}
#
[
derive
(
Clone
)
]
pub
struct
Floats
{
list
:
FloatList
offset
:
LogicalSize
<
Au
>
pub
writing_mode
:
WritingMode
}
impl
fmt
:
:
Debug
for
Floats
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
if
!
self
.
list
.
is_present
(
)
{
write
!
(
f
"
[
empty
]
"
)
}
else
{
write
!
(
f
"
offset
=
{
:
?
}
floats
=
{
:
?
}
"
self
.
offset
self
.
list
)
}
}
}
impl
Floats
{
pub
fn
new
(
writing_mode
:
WritingMode
)
-
>
Floats
{
Floats
{
list
:
FloatList
:
:
new
(
)
offset
:
LogicalSize
:
:
zero
(
writing_mode
)
writing_mode
:
writing_mode
}
}
pub
fn
translate
(
&
mut
self
delta
:
LogicalSize
<
Au
>
)
{
self
.
offset
=
self
.
offset
+
delta
}
pub
fn
last_float_pos
(
&
self
)
-
>
Option
<
LogicalRect
<
Au
>
>
{
match
self
.
list
.
floats
.
front
(
)
{
None
=
>
None
Some
(
float
)
=
>
Some
(
float
.
bounds
.
translate_by_size
(
self
.
offset
)
)
}
}
pub
fn
available_rect
(
&
self
block_start
:
Au
block_size
:
Au
max_x
:
Au
)
-
>
Option
<
LogicalRect
<
Au
>
>
{
let
list
=
&
self
.
list
;
let
block_start
=
block_start
-
self
.
offset
.
block
;
debug
!
(
"
available_rect
:
trying
to
find
space
at
{
:
?
}
"
block_start
)
;
let
mut
max_inline_start
=
Au
(
0
)
-
self
.
offset
.
inline
;
let
mut
l_block_start
=
None
;
let
mut
l_block_end
=
None
;
let
mut
min_inline_end
=
max_x
-
self
.
offset
.
inline
;
let
mut
r_block_start
=
None
;
let
mut
r_block_end
=
None
;
for
float
in
list
.
floats
.
iter
(
)
{
debug
!
(
"
available_rect
:
Checking
for
collision
against
float
"
)
;
let
float_pos
=
float
.
bounds
.
start
;
let
float_size
=
float
.
bounds
.
size
;
debug
!
(
"
float_pos
:
{
:
?
}
float_size
:
{
:
?
}
"
float_pos
float_size
)
;
match
float
.
kind
{
FloatKind
:
:
Left
if
float_pos
.
i
+
float_size
.
inline
>
max_inline_start
&
&
float_pos
.
b
+
float_size
.
block
>
block_start
&
&
float_pos
.
b
<
block_start
+
block_size
=
>
{
max_inline_start
=
float_pos
.
i
+
float_size
.
inline
;
l_block_start
=
Some
(
float_pos
.
b
)
;
l_block_end
=
Some
(
float_pos
.
b
+
float_size
.
block
)
;
debug
!
(
"
available_rect
:
collision
with
inline_start
float
:
new
\
max_inline_start
is
{
:
?
}
"
max_inline_start
)
;
}
FloatKind
:
:
Right
if
float_pos
.
i
<
min_inline_end
&
&
float_pos
.
b
+
float_size
.
block
>
block_start
&
&
float_pos
.
b
<
block_start
+
block_size
=
>
{
min_inline_end
=
float_pos
.
i
;
r_block_start
=
Some
(
float_pos
.
b
)
;
r_block_end
=
Some
(
float_pos
.
b
+
float_size
.
block
)
;
debug
!
(
"
available_rect
:
collision
with
inline_end
float
:
new
min_inline_end
\
is
{
:
?
}
"
min_inline_end
)
;
}
FloatKind
:
:
Left
|
FloatKind
:
:
Right
=
>
{
}
}
}
let
(
block_start
block_end
)
=
match
(
r_block_start
r_block_end
l_block_start
l_block_end
)
{
(
Some
(
r_block_start
)
Some
(
r_block_end
)
Some
(
l_block_start
)
Some
(
l_block_end
)
)
=
>
{
range_intersect
(
max
(
block_start
r_block_start
)
r_block_end
max
(
block_start
l_block_start
)
l_block_end
)
}
(
None
None
Some
(
l_block_start
)
Some
(
l_block_end
)
)
=
>
{
(
max
(
block_start
l_block_start
)
l_block_end
)
}
(
Some
(
r_block_start
)
Some
(
r_block_end
)
None
None
)
=
>
{
(
max
(
block_start
r_block_start
)
r_block_end
)
}
(
None
None
None
None
)
=
>
return
None
_
=
>
panic
!
(
"
Reached
unreachable
state
when
computing
float
area
"
)
}
;
assert
!
(
block_start
<
=
block_end
"
Float
position
error
"
)
;
Some
(
LogicalRect
:
:
new
(
self
.
writing_mode
max_inline_start
+
self
.
offset
.
inline
block_start
+
self
.
offset
.
block
min_inline_end
-
max_inline_start
block_end
-
block_start
)
)
}
pub
fn
add_float
(
&
mut
self
info
:
&
PlacementInfo
)
{
let
new_info
=
PlacementInfo
{
size
:
info
.
size
ceiling
:
match
self
.
list
.
max_block_start
{
None
=
>
info
.
ceiling
Some
(
max_block_start
)
=
>
max
(
info
.
ceiling
max_block_start
+
self
.
offset
.
block
)
}
max_inline_size
:
info
.
max_inline_size
kind
:
info
.
kind
}
;
debug
!
(
"
add_float
:
added
float
with
info
{
:
?
}
"
new_info
)
;
let
new_float
=
Float
{
bounds
:
LogicalRect
:
:
from_point_size
(
self
.
writing_mode
self
.
place_between_floats
(
&
new_info
)
.
start
-
self
.
offset
info
.
size
)
kind
:
info
.
kind
}
;
self
.
list
.
floats
=
self
.
list
.
floats
.
prepend_elem
(
new_float
)
;
self
.
list
.
max_block_start
=
match
self
.
list
.
max_block_start
{
None
=
>
Some
(
new_float
.
bounds
.
start
.
b
)
Some
(
max_block_start
)
=
>
Some
(
max
(
max_block_start
new_float
.
bounds
.
start
.
b
)
)
}
}
fn
max_block_size_for_bounds
(
&
self
inline_start
:
Au
block_start
:
Au
inline_size
:
Au
)
-
>
Option
<
Au
>
{
let
list
=
&
self
.
list
;
let
block_start
=
block_start
-
self
.
offset
.
block
;
let
inline_start
=
inline_start
-
self
.
offset
.
inline
;
let
mut
max_block_size
=
None
;
for
float
in
list
.
floats
.
iter
(
)
{
if
float
.
bounds
.
start
.
b
+
float
.
bounds
.
size
.
block
>
block_start
&
&
float
.
bounds
.
start
.
i
+
float
.
bounds
.
size
.
inline
>
inline_start
&
&
float
.
bounds
.
start
.
i
<
inline_start
+
inline_size
{
let
new_y
=
float
.
bounds
.
start
.
b
;
max_block_size
=
Some
(
min
(
max_block_size
.
unwrap_or
(
new_y
)
new_y
)
)
;
}
}
max_block_size
.
map
(
|
h
|
h
+
self
.
offset
.
block
)
}
pub
fn
place_between_floats
(
&
self
info
:
&
PlacementInfo
)
-
>
LogicalRect
<
Au
>
{
debug
!
(
"
place_between_floats
:
Placing
object
with
{
:
?
}
"
info
.
size
)
;
if
!
self
.
list
.
is_present
(
)
{
match
info
.
kind
{
FloatKind
:
:
Left
=
>
{
return
LogicalRect
:
:
new
(
self
.
writing_mode
Au
(
0
)
info
.
ceiling
info
.
max_inline_size
Au
(
i32
:
:
MAX
)
)
}
FloatKind
:
:
Right
=
>
{
return
LogicalRect
:
:
new
(
self
.
writing_mode
info
.
max_inline_size
-
info
.
size
.
inline
info
.
ceiling
info
.
max_inline_size
Au
(
i32
:
:
MAX
)
)
}
}
}
let
mut
float_b
=
info
.
ceiling
;
loop
{
let
maybe_location
=
self
.
available_rect
(
float_b
info
.
size
.
block
info
.
max_inline_size
)
;
debug
!
(
"
place_float
:
got
available
rect
:
{
:
?
}
for
block
-
pos
:
{
:
?
}
"
maybe_location
float_b
)
;
match
maybe_location
{
None
=
>
{
return
match
info
.
kind
{
FloatKind
:
:
Left
=
>
{
LogicalRect
:
:
new
(
self
.
writing_mode
Au
(
0
)
float_b
info
.
max_inline_size
Au
(
i32
:
:
MAX
)
)
}
FloatKind
:
:
Right
=
>
{
LogicalRect
:
:
new
(
self
.
writing_mode
info
.
max_inline_size
-
info
.
size
.
inline
float_b
info
.
max_inline_size
Au
(
i32
:
:
MAX
)
)
}
}
}
Some
(
rect
)
=
>
{
assert
!
(
rect
.
start
.
b
+
rect
.
size
.
block
!
=
float_b
"
Non
-
terminating
float
placement
"
)
;
if
rect
.
size
.
inline
>
=
info
.
size
.
inline
{
let
block_size
=
self
.
max_block_size_for_bounds
(
rect
.
start
.
i
rect
.
start
.
b
rect
.
size
.
inline
)
;
let
block_size
=
block_size
.
unwrap_or
(
Au
(
i32
:
:
MAX
)
)
;
return
match
info
.
kind
{
FloatKind
:
:
Left
=
>
{
LogicalRect
:
:
new
(
self
.
writing_mode
rect
.
start
.
i
float_b
rect
.
size
.
inline
block_size
)
}
FloatKind
:
:
Right
=
>
{
LogicalRect
:
:
new
(
self
.
writing_mode
rect
.
start
.
i
+
rect
.
size
.
inline
-
info
.
size
.
inline
float_b
rect
.
size
.
inline
block_size
)
}
}
}
float_b
=
rect
.
start
.
b
+
rect
.
size
.
block
;
}
}
}
}
pub
fn
clearance
(
&
self
clear
:
ClearType
)
-
>
Au
{
let
list
=
&
self
.
list
;
let
mut
clearance
=
Au
(
0
)
;
for
float
in
list
.
floats
.
iter
(
)
{
match
(
clear
float
.
kind
)
{
(
ClearType
:
:
Left
FloatKind
:
:
Left
)
|
(
ClearType
:
:
Right
FloatKind
:
:
Right
)
|
(
ClearType
:
:
Both
_
)
=
>
{
let
b
=
self
.
offset
.
block
+
float
.
bounds
.
start
.
b
+
float
.
bounds
.
size
.
block
;
clearance
=
max
(
clearance
b
)
;
}
_
=
>
{
}
}
}
clearance
}
}
#
[
derive
(
Copy
Clone
)
]
pub
struct
SpeculatedFloatPlacement
{
pub
left
:
Au
pub
right
:
Au
}
impl
fmt
:
:
Debug
for
SpeculatedFloatPlacement
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
L
{
:
?
}
R
{
:
?
}
"
self
.
left
self
.
right
)
}
}
impl
SpeculatedFloatPlacement
{
pub
fn
zero
(
)
-
>
SpeculatedFloatPlacement
{
SpeculatedFloatPlacement
{
left
:
Au
(
0
)
right
:
Au
(
0
)
}
}
pub
fn
compute_floats_in
(
&
mut
self
flow
:
&
mut
Flow
)
{
let
base_flow
=
flow
:
:
base
(
flow
)
;
if
base_flow
.
flags
.
contains
(
CLEARS_LEFT
)
{
self
.
left
=
Au
(
0
)
}
if
base_flow
.
flags
.
contains
(
CLEARS_RIGHT
)
{
self
.
right
=
Au
(
0
)
}
}
pub
fn
compute_floats_out
(
&
mut
self
flow
:
&
mut
Flow
)
{
if
flow
.
is_block_like
(
)
{
let
block_flow
=
flow
.
as_block
(
)
;
if
block_flow
.
formatting_context_type
(
)
!
=
FormattingContextType
:
:
None
{
*
self
=
block_flow
.
base
.
speculated_float_placement_in
;
if
self
.
left
>
Au
(
0
)
|
|
self
.
right
>
Au
(
0
)
{
let
speculated_inline_content_edge_offsets
=
block_flow
.
fragment
.
guess_inline_content_edge_offsets
(
)
;
if
self
.
left
>
Au
(
0
)
&
&
speculated_inline_content_edge_offsets
.
start
>
Au
(
0
)
{
self
.
left
=
self
.
left
+
speculated_inline_content_edge_offsets
.
start
}
if
self
.
right
>
Au
(
0
)
&
&
speculated_inline_content_edge_offsets
.
end
>
Au
(
0
)
{
self
.
right
=
self
.
right
+
speculated_inline_content_edge_offsets
.
end
}
}
}
}
let
base_flow
=
flow
:
:
base
(
flow
)
;
match
base_flow
.
flags
.
float_kind
(
)
{
float
:
:
T
:
:
none
=
>
{
}
float
:
:
T
:
:
left
=
>
{
self
.
left
=
self
.
left
+
base_flow
.
intrinsic_inline_sizes
.
preferred_inline_size
}
float
:
:
T
:
:
right
=
>
{
self
.
right
=
self
.
right
+
base_flow
.
intrinsic_inline_sizes
.
preferred_inline_size
}
}
}
pub
fn
compute_floats_in_for_first_child
(
parent_flow
:
&
mut
Flow
)
-
>
SpeculatedFloatPlacement
{
if
!
parent_flow
.
is_block_like
(
)
{
return
flow
:
:
base
(
parent_flow
)
.
speculated_float_placement_in
}
let
parent_block_flow
=
parent_flow
.
as_block
(
)
;
if
parent_block_flow
.
formatting_context_type
(
)
!
=
FormattingContextType
:
:
None
{
return
SpeculatedFloatPlacement
:
:
zero
(
)
}
let
mut
placement
=
parent_block_flow
.
base
.
speculated_float_placement_in
;
let
speculated_inline_content_edge_offsets
=
parent_block_flow
.
fragment
.
guess_inline_content_edge_offsets
(
)
;
if
speculated_inline_content_edge_offsets
.
start
>
Au
(
0
)
{
placement
.
left
=
if
placement
.
left
>
speculated_inline_content_edge_offsets
.
start
{
placement
.
left
-
speculated_inline_content_edge_offsets
.
start
}
else
{
Au
(
0
)
}
}
if
speculated_inline_content_edge_offsets
.
end
>
Au
(
0
)
{
placement
.
right
=
if
placement
.
right
>
speculated_inline_content_edge_offsets
.
end
{
placement
.
right
-
speculated_inline_content_edge_offsets
.
end
}
else
{
Au
(
0
)
}
}
placement
}
}
