use
flow
:
:
Flow
;
use
std
:
:
ops
:
:
Deref
;
use
std
:
:
sync
:
:
{
Arc
Weak
}
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
FlowRef
(
Arc
<
Flow
>
)
;
impl
Deref
for
FlowRef
{
type
Target
=
Flow
;
fn
deref
(
&
self
)
-
>
&
Flow
{
self
.
0
.
deref
(
)
}
}
impl
FlowRef
{
pub
fn
new
(
mut
r
:
Arc
<
Flow
>
)
-
>
Self
{
assert
!
(
Arc
:
:
get_mut
(
&
mut
r
)
.
is_some
(
)
)
;
FlowRef
(
r
)
}
pub
fn
get_mut
(
this
:
&
mut
FlowRef
)
-
>
Option
<
&
mut
Flow
>
{
Arc
:
:
get_mut
(
&
mut
this
.
0
)
}
pub
fn
downgrade
(
this
:
&
FlowRef
)
-
>
WeakFlowRef
{
WeakFlowRef
(
Arc
:
:
downgrade
(
&
this
.
0
)
)
}
pub
fn
into_arc
(
mut
this
:
FlowRef
)
-
>
Arc
<
Flow
>
{
assert
!
(
FlowRef
:
:
get_mut
(
&
mut
this
)
.
is_some
(
)
)
;
this
.
0
}
#
[
allow
(
unsafe_code
)
]
pub
fn
deref_mut
(
this
:
&
mut
FlowRef
)
-
>
&
mut
Flow
{
let
ptr
:
*
const
Flow
=
&
*
this
.
0
;
unsafe
{
&
mut
*
(
ptr
as
*
mut
Flow
)
}
}
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
WeakFlowRef
(
Weak
<
Flow
>
)
;
impl
WeakFlowRef
{
pub
fn
upgrade
(
&
self
)
-
>
Option
<
FlowRef
>
{
self
.
0
.
upgrade
(
)
.
map
(
FlowRef
)
}
}
