#
!
[
allow
(
unsafe_code
)
]
use
context
:
:
{
LayoutContext
SharedLayoutContext
}
;
use
flow
:
:
{
self
Flow
MutableFlowUtils
PostorderFlowTraversal
PreorderFlowTraversal
}
;
use
flow_ref
:
:
FlowRef
;
use
profile_traits
:
:
time
:
:
{
self
TimerMetadata
profile
}
;
use
rayon
;
use
std
:
:
mem
;
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicIsize
Ordering
}
;
use
style
:
:
dom
:
:
UnsafeNode
;
use
style
:
:
parallel
:
:
CHUNK_SIZE
;
use
traversal
:
:
{
AssignISizes
BubbleISizes
}
;
use
traversal
:
:
AssignBSizes
;
use
util
:
:
opts
;
pub
use
style
:
:
parallel
:
:
traverse_dom
;
#
[
allow
(
dead_code
)
]
fn
static_assertion
(
node
:
UnsafeNode
)
{
unsafe
{
let
_
:
UnsafeFlow
=
:
:
std
:
:
intrinsics
:
:
transmute
(
node
)
;
}
}
pub
type
UnsafeFlow
=
(
usize
usize
)
;
fn
null_unsafe_flow
(
)
-
>
UnsafeFlow
{
(
0
0
)
}
pub
fn
mut_owned_flow_to_unsafe_flow
(
flow
:
*
mut
FlowRef
)
-
>
UnsafeFlow
{
unsafe
{
mem
:
:
transmute
:
:
<
&
Flow
UnsafeFlow
>
(
&
*
*
flow
)
}
}
pub
fn
borrowed_flow_to_unsafe_flow
(
flow
:
&
Flow
)
-
>
UnsafeFlow
{
unsafe
{
mem
:
:
transmute
:
:
<
&
Flow
UnsafeFlow
>
(
flow
)
}
}
pub
type
ChunkedFlowTraversalFunction
<
'
scope
>
=
extern
"
Rust
"
fn
(
Box
<
[
UnsafeFlow
]
>
&
'
scope
SharedLayoutContext
&
rayon
:
:
Scope
<
'
scope
>
)
;
pub
type
FlowTraversalFunction
=
extern
"
Rust
"
fn
(
UnsafeFlow
&
SharedLayoutContext
)
;
pub
struct
FlowParallelInfo
{
pub
children_count
:
AtomicIsize
pub
parent
:
UnsafeFlow
}
impl
FlowParallelInfo
{
pub
fn
new
(
)
-
>
FlowParallelInfo
{
FlowParallelInfo
{
children_count
:
AtomicIsize
:
:
new
(
0
)
parent
:
null_unsafe_flow
(
)
}
}
}
trait
ParallelPostorderFlowTraversal
:
PostorderFlowTraversal
{
fn
run_parallel
(
&
self
mut
unsafe_flow
:
UnsafeFlow
)
{
loop
{
let
flow
:
&
mut
Flow
=
unsafe
{
mem
:
:
transmute
(
unsafe_flow
)
}
;
if
self
.
should_process
(
flow
)
{
self
.
process
(
flow
)
;
}
let
base
=
flow
:
:
mut_base
(
flow
)
;
base
.
parallel
.
children_count
.
store
(
base
.
children
.
len
(
)
as
isize
Ordering
:
:
Relaxed
)
;
let
unsafe_parent
=
base
.
parallel
.
parent
;
if
unsafe_parent
=
=
null_unsafe_flow
(
)
{
break
}
let
parent
:
&
mut
Flow
=
unsafe
{
mem
:
:
transmute
(
unsafe_parent
)
}
;
let
parent_base
=
flow
:
:
mut_base
(
parent
)
;
if
parent_base
.
parallel
.
children_count
.
fetch_sub
(
1
Ordering
:
:
Relaxed
)
=
=
1
{
unsafe_flow
=
unsafe_parent
}
else
{
break
}
}
}
}
trait
ParallelPreorderFlowTraversal
:
PreorderFlowTraversal
{
fn
run_parallel
<
'
scope
>
(
&
self
unsafe_flows
:
&
[
UnsafeFlow
]
layout_context
:
&
'
scope
SharedLayoutContext
scope
:
&
rayon
:
:
Scope
<
'
scope
>
)
;
fn
should_record_thread_ids
(
&
self
)
-
>
bool
;
#
[
inline
(
always
)
]
fn
run_parallel_helper
<
'
scope
>
(
&
self
unsafe_flows
:
&
[
UnsafeFlow
]
layout_context
:
&
'
scope
SharedLayoutContext
scope
:
&
rayon
:
:
Scope
<
'
scope
>
top_down_func
:
ChunkedFlowTraversalFunction
<
'
scope
>
bottom_up_func
:
FlowTraversalFunction
)
{
let
mut
discovered_child_flows
=
vec
!
[
]
;
for
unsafe_flow
in
unsafe_flows
{
let
mut
had_children
=
false
;
unsafe
{
let
flow
:
&
mut
Flow
=
mem
:
:
transmute
(
*
unsafe_flow
)
;
if
self
.
should_record_thread_ids
(
)
{
}
if
self
.
should_process
(
flow
)
{
self
.
process
(
flow
)
;
}
for
kid
in
flow
:
:
child_iter_mut
(
flow
)
{
had_children
=
true
;
discovered_child_flows
.
push
(
borrowed_flow_to_unsafe_flow
(
kid
)
)
;
}
}
if
!
had_children
{
bottom_up_func
(
*
unsafe_flow
layout_context
)
}
}
for
chunk
in
discovered_child_flows
.
chunks
(
CHUNK_SIZE
)
{
let
nodes
=
chunk
.
iter
(
)
.
cloned
(
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
.
into_boxed_slice
(
)
;
scope
.
spawn
(
move
|
scope
|
{
top_down_func
(
nodes
layout_context
scope
)
;
}
)
;
}
}
}
impl
<
'
a
>
ParallelPreorderFlowTraversal
for
AssignISizes
<
'
a
>
{
fn
run_parallel
<
'
scope
>
(
&
self
unsafe_flows
:
&
[
UnsafeFlow
]
layout_context
:
&
'
scope
SharedLayoutContext
scope
:
&
rayon
:
:
Scope
<
'
scope
>
)
{
self
.
run_parallel_helper
(
unsafe_flows
layout_context
scope
assign_inline_sizes
assign_block_sizes_and_store_overflow
)
}
fn
should_record_thread_ids
(
&
self
)
-
>
bool
{
true
}
}
impl
<
'
a
>
ParallelPostorderFlowTraversal
for
AssignBSizes
<
'
a
>
{
}
fn
assign_inline_sizes
<
'
scope
>
(
unsafe_flows
:
Box
<
[
UnsafeFlow
]
>
shared_layout_context
:
&
'
scope
SharedLayoutContext
scope
:
&
rayon
:
:
Scope
<
'
scope
>
)
{
let
assign_inline_sizes_traversal
=
AssignISizes
{
shared_context
:
&
shared_layout_context
.
style_context
}
;
assign_inline_sizes_traversal
.
run_parallel
(
&
unsafe_flows
shared_layout_context
scope
)
}
fn
assign_block_sizes_and_store_overflow
(
unsafe_flow
:
UnsafeFlow
shared_layout_context
:
&
SharedLayoutContext
)
{
let
layout_context
=
LayoutContext
:
:
new
(
shared_layout_context
)
;
let
assign_block_sizes_traversal
=
AssignBSizes
{
layout_context
:
&
layout_context
}
;
assign_block_sizes_traversal
.
run_parallel
(
unsafe_flow
)
}
pub
fn
traverse_flow_tree_preorder
(
root
:
&
mut
Flow
profiler_metadata
:
Option
<
TimerMetadata
>
time_profiler_chan
:
time
:
:
ProfilerChan
shared_layout_context
:
&
SharedLayoutContext
queue
:
&
rayon
:
:
ThreadPool
)
{
if
opts
:
:
get
(
)
.
bubble_inline_sizes_separately
{
let
layout_context
=
LayoutContext
:
:
new
(
shared_layout_context
)
;
let
bubble_inline_sizes
=
BubbleISizes
{
layout_context
:
&
layout_context
}
;
root
.
traverse_postorder
(
&
bubble_inline_sizes
)
;
}
let
nodes
=
vec
!
[
borrowed_flow_to_unsafe_flow
(
root
)
]
.
into_boxed_slice
(
)
;
queue
.
install
(
move
|
|
{
rayon
:
:
scope
(
move
|
scope
|
{
profile
(
time
:
:
ProfilerCategory
:
:
LayoutParallelWarmup
profiler_metadata
time_profiler_chan
move
|
|
{
assign_inline_sizes
(
nodes
&
shared_layout_context
scope
)
;
}
)
;
}
)
;
}
)
;
}
