#
!
[
allow
(
unsafe_code
)
]
use
gfx
:
:
display_list
:
:
OpaqueNode
;
use
libc
:
:
{
c_void
uintptr_t
}
;
use
script
:
:
dom
:
:
bindings
:
:
js
:
:
LayoutJS
;
use
script
:
:
dom
:
:
node
:
:
Node
;
use
script
:
:
layout_interface
:
:
{
TrustedNodeAddress
}
;
use
script_traits
:
:
UntrustedNodeAddress
;
use
wrapper
:
:
{
LayoutNode
ThreadSafeLayoutNode
}
;
pub
trait
OpaqueNodeMethods
{
fn
from_layout_node
(
node
:
&
LayoutNode
)
-
>
Self
;
fn
from_thread_safe_layout_node
(
node
:
&
ThreadSafeLayoutNode
)
-
>
Self
;
fn
from_script_node
(
node
:
TrustedNodeAddress
)
-
>
Self
;
fn
from_jsmanaged
(
node
:
&
LayoutJS
<
Node
>
)
-
>
Self
;
fn
to_untrusted_node_address
(
&
self
)
-
>
UntrustedNodeAddress
;
}
impl
OpaqueNodeMethods
for
OpaqueNode
{
fn
from_layout_node
(
node
:
&
LayoutNode
)
-
>
OpaqueNode
{
unsafe
{
OpaqueNodeMethods
:
:
from_jsmanaged
(
node
.
get_jsmanaged
(
)
)
}
}
fn
from_thread_safe_layout_node
(
node
:
&
ThreadSafeLayoutNode
)
-
>
OpaqueNode
{
unsafe
{
OpaqueNodeMethods
:
:
from_jsmanaged
(
node
.
get_jsmanaged
(
)
)
}
}
fn
from_script_node
(
node
:
TrustedNodeAddress
)
-
>
OpaqueNode
{
unsafe
{
OpaqueNodeMethods
:
:
from_jsmanaged
(
&
LayoutJS
:
:
from_trusted_node_address
(
node
)
)
}
}
fn
from_jsmanaged
(
node
:
&
LayoutJS
<
Node
>
)
-
>
OpaqueNode
{
unsafe
{
let
ptr
:
uintptr_t
=
node
.
get_jsobject
(
)
as
uintptr_t
;
OpaqueNode
(
ptr
)
}
}
fn
to_untrusted_node_address
(
&
self
)
-
>
UntrustedNodeAddress
{
let
OpaqueNode
(
addr
)
=
*
self
;
UntrustedNodeAddress
(
addr
as
*
const
c_void
)
}
}
