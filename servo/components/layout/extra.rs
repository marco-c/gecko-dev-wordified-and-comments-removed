use
util
:
:
{
PrivateLayoutData
LayoutDataAccess
LayoutDataWrapper
}
;
use
wrapper
:
:
LayoutNode
;
use
script
:
:
dom
:
:
node
:
:
SharedLayoutData
;
use
script
:
:
layout_interface
:
:
LayoutChan
;
pub
trait
LayoutAuxMethods
{
fn
initialize_layout_data
(
&
self
chan
:
LayoutChan
)
;
fn
initialize_style_for_subtree
(
&
self
chan
:
LayoutChan
)
;
}
impl
<
'
ln
>
LayoutAuxMethods
for
LayoutNode
<
'
ln
>
{
fn
initialize_layout_data
(
&
self
chan
:
LayoutChan
)
{
let
mut
layout_data_ref
=
self
.
mutate_layout_data
(
)
;
match
*
layout_data_ref
{
None
=
>
{
*
layout_data_ref
=
Some
(
LayoutDataWrapper
{
chan
:
Some
(
chan
)
shared_data
:
SharedLayoutData
{
style
:
None
}
data
:
box
PrivateLayoutData
:
:
new
(
)
}
)
;
}
Some
(
_
)
=
>
{
}
}
}
fn
initialize_style_for_subtree
(
&
self
chan
:
LayoutChan
)
{
for
n
in
self
.
traverse_preorder
(
)
{
n
.
initialize_layout_data
(
chan
.
clone
(
)
)
;
}
}
}
