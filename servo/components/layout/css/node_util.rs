use
incremental
:
:
RestyleDamage
;
use
util
:
:
LayoutDataAccess
;
use
wrapper
:
:
{
TLayoutNode
ThreadSafeLayoutNode
}
;
use
wrapper
:
:
{
After
Before
Normal
}
;
use
std
:
:
mem
;
use
style
:
:
ComputedValues
;
use
sync
:
:
Arc
;
pub
trait
NodeUtil
{
fn
get_css_select_results
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
Arc
<
ComputedValues
>
;
fn
have_css_select_results
(
&
self
)
-
>
bool
;
fn
get_restyle_damage
(
&
self
)
-
>
RestyleDamage
;
fn
set_restyle_damage
(
&
self
damage
:
RestyleDamage
)
;
}
impl
<
'
ln
>
NodeUtil
for
ThreadSafeLayoutNode
<
'
ln
>
{
#
[
inline
]
fn
get_css_select_results
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
Arc
<
ComputedValues
>
{
unsafe
{
let
layout_data_ref
=
self
.
borrow_layout_data
(
)
;
match
self
.
get_pseudo_element_type
(
)
{
Before
(
_
)
=
>
{
mem
:
:
transmute
(
layout_data_ref
.
as_ref
(
)
.
unwrap
(
)
.
data
.
before_style
.
as_ref
(
)
.
unwrap
(
)
)
}
After
(
_
)
=
>
{
mem
:
:
transmute
(
layout_data_ref
.
as_ref
(
)
.
unwrap
(
)
.
data
.
after_style
.
as_ref
(
)
.
unwrap
(
)
)
}
Normal
=
>
{
mem
:
:
transmute
(
layout_data_ref
.
as_ref
(
)
.
unwrap
(
)
.
shared_data
.
style
.
as_ref
(
)
.
unwrap
(
)
)
}
}
}
}
fn
have_css_select_results
(
&
self
)
-
>
bool
{
let
layout_data_ref
=
self
.
borrow_layout_data
(
)
;
layout_data_ref
.
as_ref
(
)
.
unwrap
(
)
.
shared_data
.
style
.
is_some
(
)
}
fn
get_restyle_damage
(
&
self
)
-
>
RestyleDamage
{
let
default
=
if
self
.
node_is_element
(
)
{
RestyleDamage
:
:
all
(
)
}
else
{
RestyleDamage
:
:
empty
(
)
}
;
let
layout_data_ref
=
self
.
borrow_layout_data
(
)
;
layout_data_ref
.
as_ref
(
)
.
unwrap
(
)
.
data
.
restyle_damage
.
unwrap_or
(
default
)
}
fn
set_restyle_damage
(
&
self
damage
:
RestyleDamage
)
{
let
mut
layout_data_ref
=
self
.
mutate_layout_data
(
)
;
match
&
mut
*
layout_data_ref
{
&
Some
(
ref
mut
layout_data
)
=
>
layout_data
.
data
.
restyle_damage
=
Some
(
damage
)
_
=
>
fail
!
(
"
no
layout
data
for
this
node
"
)
}
}
}
