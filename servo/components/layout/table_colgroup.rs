#
!
[
deny
(
unsafe_block
)
]
use
context
:
:
LayoutContext
;
use
css
:
:
node_style
:
:
StyledNode
;
use
flow
:
:
{
BaseFlow
TableColGroupFlowClass
FlowClass
Flow
}
;
use
fragment
:
:
{
Fragment
TableColumnFragment
}
;
use
layout_debug
;
use
wrapper
:
:
ThreadSafeLayoutNode
;
use
servo_util
:
:
geometry
:
:
Au
;
use
std
:
:
cmp
:
:
max
;
use
std
:
:
fmt
;
use
style
:
:
computed_values
:
:
LengthOrPercentageOrAuto
;
use
style
:
:
ComputedValues
;
use
sync
:
:
Arc
;
pub
struct
TableColGroupFlow
{
pub
base
:
BaseFlow
pub
fragment
:
Option
<
Fragment
>
pub
cols
:
Vec
<
Fragment
>
pub
inline_sizes
:
Vec
<
LengthOrPercentageOrAuto
>
}
impl
TableColGroupFlow
{
pub
fn
from_node_and_fragments
(
node
:
&
ThreadSafeLayoutNode
fragment
:
Fragment
fragments
:
Vec
<
Fragment
>
)
-
>
TableColGroupFlow
{
let
writing_mode
=
node
.
style
(
)
.
writing_mode
;
TableColGroupFlow
{
base
:
BaseFlow
:
:
new
(
Some
(
(
*
node
)
.
clone
(
)
)
writing_mode
)
fragment
:
Some
(
fragment
)
cols
:
fragments
inline_sizes
:
vec
!
(
)
}
}
}
impl
Flow
for
TableColGroupFlow
{
fn
class
(
&
self
)
-
>
FlowClass
{
TableColGroupFlowClass
}
fn
as_table_colgroup
<
'
a
>
(
&
'
a
mut
self
)
-
>
&
'
a
mut
TableColGroupFlow
{
self
}
fn
bubble_inline_sizes
(
&
mut
self
)
{
let
_scope
=
layout_debug_scope
!
(
"
table_colgroup
:
:
bubble_inline_sizes
{
:
x
}
"
self
.
base
.
debug_id
(
)
)
;
for
fragment
in
self
.
cols
.
iter
(
)
{
let
inline_size
=
fragment
.
style
(
)
.
content_inline_size
(
)
;
let
span
:
int
=
match
fragment
.
specific
{
TableColumnFragment
(
col_fragment
)
=
>
max
(
col_fragment
.
span
1
)
_
=
>
fail
!
(
"
non
-
table
-
column
fragment
inside
table
column
?
!
"
)
}
;
for
_
in
range
(
0
span
)
{
self
.
inline_sizes
.
push
(
inline_size
)
}
}
}
fn
assign_inline_sizes
(
&
mut
self
_
:
&
LayoutContext
)
{
}
fn
assign_block_size
(
&
mut
self
_
:
&
LayoutContext
)
{
}
fn
update_late_computed_inline_position_if_necessary
(
&
mut
self
_
:
Au
)
{
}
fn
update_late_computed_block_position_if_necessary
(
&
mut
self
_
:
Au
)
{
}
fn
build_display_list
(
&
mut
self
_
:
&
LayoutContext
)
{
}
fn
repair_style
(
&
mut
self
_
:
&
Arc
<
ComputedValues
>
)
{
}
}
impl
fmt
:
:
Show
for
TableColGroupFlow
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
match
self
.
fragment
{
Some
(
ref
rb
)
=
>
write
!
(
f
"
TableColGroupFlow
:
{
}
"
rb
)
None
=
>
write
!
(
f
"
TableColGroupFlow
"
)
}
}
}
