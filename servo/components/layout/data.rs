use
atomic_refcell
:
:
AtomicRefCell
;
use
construct
:
:
ConstructionResult
;
use
script_layout_interface
:
:
StyleData
;
#
[
repr
(
C
)
]
pub
struct
StyleAndLayoutData
{
pub
style_data
:
StyleData
pub
layout_data
:
AtomicRefCell
<
LayoutData
>
}
impl
StyleAndLayoutData
{
pub
fn
new
(
)
-
>
Self
{
Self
{
style_data
:
StyleData
:
:
new
(
)
layout_data
:
AtomicRefCell
:
:
new
(
LayoutData
:
:
new
(
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
LayoutData
{
pub
flow_construction_result
:
ConstructionResult
pub
before_flow_construction_result
:
ConstructionResult
pub
after_flow_construction_result
:
ConstructionResult
pub
details_summary_flow_construction_result
:
ConstructionResult
pub
details_content_flow_construction_result
:
ConstructionResult
pub
flags
:
LayoutDataFlags
}
impl
LayoutData
{
pub
fn
new
(
)
-
>
LayoutData
{
Self
{
flow_construction_result
:
ConstructionResult
:
:
None
before_flow_construction_result
:
ConstructionResult
:
:
None
after_flow_construction_result
:
ConstructionResult
:
:
None
details_summary_flow_construction_result
:
ConstructionResult
:
:
None
details_content_flow_construction_result
:
ConstructionResult
:
:
None
flags
:
LayoutDataFlags
:
:
empty
(
)
}
}
}
bitflags
!
{
pub
flags
LayoutDataFlags
:
u8
{
#
[
doc
=
"
Whether
a
flow
has
been
newly
constructed
.
"
]
const
HAS_NEWLY_CONSTRUCTED_FLOW
=
0x01
#
[
doc
=
"
Whether
this
node
has
been
traversed
by
layout
.
"
]
const
HAS_BEEN_TRAVERSED
=
0x02
}
}
