use
std
:
:
collections
:
:
HashSet
;
use
std
:
:
str
:
:
from_utf8
;
use
std
:
:
sync
:
:
Arc
;
use
util
:
:
resource_files
:
:
read_resource_file
;
lazy_static
!
{
static
ref
PUB_DOMAINS
:
Arc
<
HashSet
<
String
>
>
=
load_pub_domains
(
)
;
}
fn
load_pub_domains
(
)
-
>
Arc
<
HashSet
<
String
>
>
{
let
content
=
read_resource_file
(
"
public_domains
.
txt
"
)
.
expect
(
"
Could
not
find
public
suffix
list
file
"
)
;
let
domains
=
from_utf8
(
&
content
)
.
expect
(
"
Could
not
read
suffix
list
file
"
)
.
lines
(
)
.
filter_map
(
|
i
|
{
let
domain
=
i
.
trim
(
)
;
if
domain
=
=
"
"
{
return
None
}
;
if
domain
.
starts_with
(
"
/
/
"
)
{
return
None
}
;
Some
(
domain
.
to_owned
(
)
)
}
)
;
Arc
:
:
new
(
domains
.
collect
(
)
)
}
pub
fn
is_pub_domain
(
domain
:
&
str
)
-
>
bool
{
let
domain
=
domain
.
trim_left_matches
(
"
.
"
)
;
if
PUB_DOMAINS
.
contains
(
&
domain
.
to_string
(
)
)
{
return
true
}
match
domain
.
find
(
"
.
"
)
{
None
=
>
{
return
false
}
Some
(
position
)
=
>
{
let
wildcard_domain
=
"
*
"
.
to_string
(
)
+
domain
.
split_at
(
position
)
.
1
;
if
PUB_DOMAINS
.
contains
(
&
wildcard_domain
)
{
let
exception_domain
=
"
!
"
.
to_string
(
)
+
domain
;
return
!
PUB_DOMAINS
.
contains
(
&
exception_domain
)
}
else
{
return
false
}
}
}
}
