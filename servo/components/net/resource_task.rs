use
about_loader
;
use
data_loader
;
use
file_loader
;
use
http_loader
;
use
sniffer_task
;
use
sniffer_task
:
:
SnifferTask
;
use
servo_util
:
:
task
:
:
spawn_named
;
use
hyper
:
:
header
:
:
common
:
:
UserAgent
;
use
hyper
:
:
header
:
:
Headers
;
use
hyper
:
:
http
:
:
RawStatus
;
use
hyper
:
:
method
:
:
Method
;
use
hyper
:
:
mime
:
:
{
Mime
Attr
}
;
use
url
:
:
Url
;
use
std
:
:
comm
:
:
{
channel
Receiver
Sender
}
;
pub
enum
ControlMsg
{
Load
(
LoadData
)
Exit
}
#
[
deriving
(
Clone
)
]
pub
struct
LoadData
{
pub
url
:
Url
pub
method
:
Method
pub
headers
:
Headers
pub
data
:
Option
<
Vec
<
u8
>
>
pub
cors
:
Option
<
ResourceCORSData
>
pub
consumer
:
Sender
<
LoadResponse
>
}
impl
LoadData
{
pub
fn
new
(
url
:
Url
consumer
:
Sender
<
LoadResponse
>
)
-
>
LoadData
{
LoadData
{
url
:
url
method
:
Method
:
:
Get
headers
:
Headers
:
:
new
(
)
data
:
None
cors
:
None
consumer
:
consumer
}
}
}
#
[
deriving
(
Clone
)
]
pub
struct
ResourceCORSData
{
pub
preflight
:
bool
pub
origin
:
Url
}
pub
struct
Metadata
{
pub
final_url
:
Url
pub
content_type
:
Option
<
(
String
String
)
>
pub
charset
:
Option
<
String
>
pub
headers
:
Option
<
Headers
>
pub
status
:
Option
<
RawStatus
>
}
impl
Metadata
{
pub
fn
default
(
url
:
Url
)
-
>
Metadata
{
Metadata
{
final_url
:
url
content_type
:
None
charset
:
None
headers
:
None
status
:
Some
(
RawStatus
(
200
"
OK
"
.
into_string
(
)
)
)
}
}
pub
fn
set_content_type
(
&
mut
self
content_type
:
Option
<
&
Mime
>
)
{
match
content_type
{
None
=
>
(
)
Some
(
&
Mime
(
ref
type_
ref
subtype
ref
parameters
)
)
=
>
{
self
.
content_type
=
Some
(
(
type_
.
to_string
(
)
subtype
.
to_string
(
)
)
)
;
for
&
(
ref
k
ref
v
)
in
parameters
.
iter
(
)
{
if
&
Attr
:
:
Charset
=
=
k
{
self
.
charset
=
Some
(
v
.
to_string
(
)
)
;
}
}
}
}
}
}
pub
struct
LoadResponse
{
pub
metadata
:
Metadata
pub
progress_port
:
Receiver
<
ProgressMsg
>
}
pub
struct
TargetedLoadResponse
{
pub
load_response
:
LoadResponse
pub
consumer
:
Sender
<
LoadResponse
>
}
pub
struct
ResponseSenders
{
pub
immediate_consumer
:
Sender
<
TargetedLoadResponse
>
pub
eventual_consumer
:
Sender
<
LoadResponse
>
}
#
[
deriving
(
PartialEq
Show
)
]
pub
enum
ProgressMsg
{
Payload
(
Vec
<
u8
>
)
Done
(
Result
<
(
)
String
>
)
}
pub
fn
start_sending
(
senders
:
ResponseSenders
metadata
:
Metadata
)
-
>
Sender
<
ProgressMsg
>
{
start_sending_opt
(
senders
metadata
)
.
ok
(
)
.
unwrap
(
)
}
pub
fn
start_sending_opt
(
senders
:
ResponseSenders
metadata
:
Metadata
)
-
>
Result
<
Sender
<
ProgressMsg
>
(
)
>
{
let
(
progress_chan
progress_port
)
=
channel
(
)
;
let
result
=
senders
.
immediate_consumer
.
send_opt
(
TargetedLoadResponse
{
load_response
:
LoadResponse
{
metadata
:
metadata
progress_port
:
progress_port
}
consumer
:
senders
.
eventual_consumer
}
)
;
match
result
{
Ok
(
_
)
=
>
Ok
(
progress_chan
)
Err
(
_
)
=
>
Err
(
(
)
)
}
}
pub
fn
load_whole_resource
(
resource_task
:
&
ResourceTask
url
:
Url
)
-
>
Result
<
(
Metadata
Vec
<
u8
>
)
String
>
{
let
(
start_chan
start_port
)
=
channel
(
)
;
resource_task
.
send
(
ControlMsg
:
:
Load
(
LoadData
:
:
new
(
url
start_chan
)
)
)
;
let
response
=
start_port
.
recv
(
)
;
let
mut
buf
=
vec
!
(
)
;
loop
{
match
response
.
progress_port
.
recv
(
)
{
ProgressMsg
:
:
Payload
(
data
)
=
>
buf
.
push_all
(
data
.
as_slice
(
)
)
ProgressMsg
:
:
Done
(
Ok
(
(
)
)
)
=
>
return
Ok
(
(
response
.
metadata
buf
)
)
ProgressMsg
:
:
Done
(
Err
(
e
)
)
=
>
return
Err
(
e
)
}
}
}
pub
type
ResourceTask
=
Sender
<
ControlMsg
>
;
pub
fn
new_resource_task
(
user_agent
:
Option
<
String
>
)
-
>
ResourceTask
{
let
(
setup_chan
setup_port
)
=
channel
(
)
;
let
sniffer_task
=
sniffer_task
:
:
new_sniffer_task
(
)
;
spawn_named
(
"
ResourceManager
"
proc
(
)
{
ResourceManager
:
:
new
(
setup_port
user_agent
sniffer_task
)
.
start
(
)
;
}
)
;
setup_chan
}
struct
ResourceManager
{
from_client
:
Receiver
<
ControlMsg
>
user_agent
:
Option
<
String
>
sniffer_task
:
SnifferTask
}
impl
ResourceManager
{
fn
new
(
from_client
:
Receiver
<
ControlMsg
>
user_agent
:
Option
<
String
>
sniffer_task
:
SnifferTask
)
-
>
ResourceManager
{
ResourceManager
{
from_client
:
from_client
user_agent
:
user_agent
sniffer_task
:
sniffer_task
}
}
}
impl
ResourceManager
{
fn
start
(
&
self
)
{
loop
{
match
self
.
from_client
.
recv
(
)
{
ControlMsg
:
:
Load
(
load_data
)
=
>
{
self
.
load
(
load_data
)
}
ControlMsg
:
:
Exit
=
>
{
break
}
}
}
}
fn
load
(
&
self
load_data
:
LoadData
)
{
let
mut
load_data
=
load_data
;
self
.
user_agent
.
as_ref
(
)
.
map
(
|
ua
|
load_data
.
headers
.
set
(
UserAgent
(
ua
.
clone
(
)
)
)
)
;
let
senders
=
ResponseSenders
{
immediate_consumer
:
self
.
sniffer_task
.
clone
(
)
eventual_consumer
:
load_data
.
consumer
.
clone
(
)
}
;
let
loader
=
match
load_data
.
url
.
scheme
.
as_slice
(
)
{
"
file
"
=
>
file_loader
:
:
factory
"
http
"
|
"
https
"
=
>
http_loader
:
:
factory
"
data
"
=
>
data_loader
:
:
factory
"
about
"
=
>
about_loader
:
:
factory
_
=
>
{
debug
!
(
"
resource_task
:
no
loader
for
scheme
{
}
"
load_data
.
url
.
scheme
)
;
start_sending
(
senders
Metadata
:
:
default
(
load_data
.
url
)
)
.
send
(
ProgressMsg
:
:
Done
(
Err
(
"
no
loader
for
scheme
"
.
to_string
(
)
)
)
)
;
return
}
}
;
debug
!
(
"
resource_task
:
loading
url
:
{
}
"
load_data
.
url
.
serialize
(
)
)
;
loader
(
load_data
self
.
sniffer_task
.
clone
(
)
)
;
}
}
/
/
/
Load
a
URL
asynchronously
and
iterate
over
chunks
of
bytes
from
the
response
.
pub
fn
load_bytes_iter
(
resource_task
:
&
ResourceTask
url
:
Url
)
-
>
(
Metadata
ProgressMsgPortIterator
)
{
let
(
input_chan
input_port
)
=
channel
(
)
;
resource_task
.
send
(
ControlMsg
:
:
Load
(
LoadData
:
:
new
(
url
input_chan
)
)
)
;
let
response
=
input_port
.
recv
(
)
;
let
iter
=
ProgressMsgPortIterator
{
progress_port
:
response
.
progress_port
}
;
(
response
.
metadata
iter
)
}
/
/
/
Iterator
that
reads
chunks
of
bytes
from
a
ProgressMsg
port
pub
struct
ProgressMsgPortIterator
{
progress_port
:
Receiver
<
ProgressMsg
>
}
impl
Iterator
<
Vec
<
u8
>
>
for
ProgressMsgPortIterator
{
fn
next
(
&
mut
self
)
-
>
Option
<
Vec
<
u8
>
>
{
match
self
.
progress_port
.
recv
(
)
{
ProgressMsg
:
:
Payload
(
data
)
=
>
Some
(
data
)
ProgressMsg
:
:
Done
(
Ok
(
(
)
)
)
=
>
None
ProgressMsg
:
:
Done
(
Err
(
e
)
)
=
>
{
error
!
(
"
error
receiving
bytes
:
{
}
"
e
)
;
None
}
}
}
}
#
[
test
]
fn
test_exit
(
)
{
let
resource_task
=
new_resource_task
(
None
)
;
resource_task
.
send
(
ControlMsg
:
:
Exit
)
;
}
#
[
test
]
fn
test_bad_scheme
(
)
{
let
resource_task
=
new_resource_task
(
None
)
;
let
(
start_chan
start
)
=
channel
(
)
;
let
url
=
Url
:
:
parse
(
"
bogus
:
/
/
whatever
"
)
.
unwrap
(
)
;
resource_task
.
send
(
ControlMsg
:
:
Load
(
LoadData
:
:
new
(
url
start_chan
)
)
)
;
let
response
=
start
.
recv
(
)
;
match
response
.
progress_port
.
recv
(
)
{
ProgressMsg
:
:
Done
(
result
)
=
>
{
assert
!
(
result
.
is_err
(
)
)
}
_
=
>
panic
!
(
"
bleh
"
)
}
resource_task
.
send
(
ControlMsg
:
:
Exit
)
;
}
