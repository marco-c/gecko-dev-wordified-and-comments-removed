use
ipc_channel
:
:
ipc
:
:
{
self
IpcSender
}
;
use
ipc_channel
:
:
router
:
:
ROUTER
;
use
net_traits
:
:
image
:
:
base
:
:
{
Image
load_from_memory
}
;
use
net_traits
:
:
image_cache_task
:
:
ImageResponder
;
use
net_traits
:
:
image_cache_task
:
:
{
ImageCacheChan
ImageCacheCommand
ImageCacheTask
ImageState
}
;
use
net_traits
:
:
image_cache_task
:
:
{
ImageCacheResult
ImageResponse
UsePlaceholder
}
;
use
net_traits
:
:
load_whole_resource
;
use
net_traits
:
:
{
AsyncResponseTarget
ControlMsg
LoadConsumer
LoadData
ResourceTask
ResponseAction
}
;
use
std
:
:
borrow
:
:
ToOwned
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
collections
:
:
hash_map
:
:
Entry
:
:
{
Occupied
Vacant
}
;
use
std
:
:
mem
;
use
std
:
:
sync
:
:
Arc
;
use
std
:
:
sync
:
:
mpsc
:
:
{
Receiver
Select
Sender
channel
}
;
use
url
:
:
Url
;
use
util
:
:
resource_files
:
:
resources_dir_path
;
use
util
:
:
task
:
:
spawn_named
;
use
util
:
:
taskpool
:
:
TaskPool
;
struct
PendingLoad
{
bytes
:
Vec
<
u8
>
result
:
Option
<
Result
<
(
)
String
>
>
listeners
:
Vec
<
ImageListener
>
url
:
Arc
<
Url
>
}
impl
PendingLoad
{
fn
new
(
url
:
Arc
<
Url
>
)
-
>
PendingLoad
{
PendingLoad
{
bytes
:
vec
!
(
)
result
:
None
listeners
:
vec
!
(
)
url
:
url
}
}
fn
add_listener
(
&
mut
self
listener
:
ImageListener
)
{
self
.
listeners
.
push
(
listener
)
;
}
}
struct
AllPendingLoads
{
loads
:
HashMap
<
LoadKey
PendingLoad
>
url_to_load_key
:
HashMap
<
Arc
<
Url
>
LoadKey
>
keygen
:
LoadKeyGenerator
}
#
[
derive
(
Eq
PartialEq
)
]
enum
CacheResult
{
Hit
Miss
}
impl
AllPendingLoads
{
fn
new
(
)
-
>
AllPendingLoads
{
AllPendingLoads
{
loads
:
HashMap
:
:
new
(
)
url_to_load_key
:
HashMap
:
:
new
(
)
keygen
:
LoadKeyGenerator
:
:
new
(
)
}
}
fn
is_empty
(
&
self
)
-
>
bool
{
assert
!
(
self
.
loads
.
is_empty
(
)
=
=
self
.
url_to_load_key
.
is_empty
(
)
)
;
self
.
loads
.
is_empty
(
)
}
fn
get_by_key_mut
(
&
mut
self
key
:
&
LoadKey
)
-
>
Option
<
&
mut
PendingLoad
>
{
self
.
loads
.
get_mut
(
key
)
}
fn
get_by_url
(
&
self
url
:
&
Url
)
-
>
Option
<
&
PendingLoad
>
{
self
.
url_to_load_key
.
get
(
url
)
.
and_then
(
|
load_key
|
self
.
loads
.
get
(
load_key
)
)
}
fn
remove
(
&
mut
self
key
:
&
LoadKey
)
-
>
Option
<
PendingLoad
>
{
self
.
loads
.
remove
(
key
)
.
and_then
(
|
pending_load
|
{
self
.
url_to_load_key
.
remove
(
&
pending_load
.
url
)
.
unwrap
(
)
;
Some
(
pending_load
)
}
)
}
fn
get_cached
(
&
mut
self
url
:
Arc
<
Url
>
)
-
>
(
CacheResult
LoadKey
&
mut
PendingLoad
)
{
match
self
.
url_to_load_key
.
entry
(
url
.
clone
(
)
)
{
Occupied
(
url_entry
)
=
>
{
let
load_key
=
url_entry
.
get
(
)
;
(
CacheResult
:
:
Hit
*
load_key
self
.
loads
.
get_mut
(
load_key
)
.
unwrap
(
)
)
}
Vacant
(
url_entry
)
=
>
{
let
load_key
=
self
.
keygen
.
next
(
)
;
url_entry
.
insert
(
load_key
)
;
let
pending_load
=
PendingLoad
:
:
new
(
url
)
;
match
self
.
loads
.
entry
(
load_key
)
{
Occupied
(
_
)
=
>
unreachable
!
(
)
Vacant
(
load_entry
)
=
>
{
let
mut_load
=
load_entry
.
insert
(
pending_load
)
;
(
CacheResult
:
:
Miss
load_key
mut_load
)
}
}
}
}
}
}
struct
CompletedLoad
{
image_response
:
ImageResponse
}
impl
CompletedLoad
{
fn
new
(
image_response
:
ImageResponse
)
-
>
CompletedLoad
{
CompletedLoad
{
image_response
:
image_response
}
}
}
struct
ImageListener
{
sender
:
ImageCacheChan
responder
:
Option
<
ImageResponder
>
}
#
[
derive
(
Eq
Hash
PartialEq
Clone
Copy
)
]
struct
LoadKey
(
u64
)
;
struct
LoadKeyGenerator
{
counter
:
u64
}
impl
LoadKeyGenerator
{
fn
new
(
)
-
>
LoadKeyGenerator
{
LoadKeyGenerator
{
counter
:
0
}
}
fn
next
(
&
mut
self
)
-
>
LoadKey
{
self
.
counter
+
=
1
;
LoadKey
(
self
.
counter
)
}
}
impl
ImageListener
{
fn
new
(
sender
:
ImageCacheChan
responder
:
Option
<
ImageResponder
>
)
-
>
ImageListener
{
ImageListener
{
sender
:
sender
responder
:
responder
}
}
fn
notify
(
self
image_response
:
ImageResponse
)
{
let
ImageCacheChan
(
ref
sender
)
=
self
.
sender
;
let
msg
=
ImageCacheResult
{
responder
:
self
.
responder
image_response
:
image_response
}
;
sender
.
send
(
msg
)
.
ok
(
)
;
}
}
struct
ResourceLoadInfo
{
action
:
ResponseAction
key
:
LoadKey
}
struct
ImageCache
{
cmd_receiver
:
Receiver
<
ImageCacheCommand
>
progress_receiver
:
Receiver
<
ResourceLoadInfo
>
progress_sender
:
Sender
<
ResourceLoadInfo
>
decoder_receiver
:
Receiver
<
DecoderMsg
>
decoder_sender
:
Sender
<
DecoderMsg
>
task_pool
:
TaskPool
resource_task
:
ResourceTask
pending_loads
:
AllPendingLoads
completed_loads
:
HashMap
<
Arc
<
Url
>
CompletedLoad
>
placeholder_image
:
Option
<
Arc
<
Image
>
>
}
struct
DecoderMsg
{
key
:
LoadKey
image
:
Option
<
Image
>
}
enum
SelectResult
{
Command
(
ImageCacheCommand
)
Progress
(
ResourceLoadInfo
)
Decoder
(
DecoderMsg
)
}
impl
ImageCache
{
fn
run
(
&
mut
self
)
{
let
mut
exit_sender
:
Option
<
IpcSender
<
(
)
>
>
=
None
;
loop
{
let
result
=
{
let
sel
=
Select
:
:
new
(
)
;
let
mut
cmd_handle
=
sel
.
handle
(
&
self
.
cmd_receiver
)
;
let
mut
progress_handle
=
sel
.
handle
(
&
self
.
progress_receiver
)
;
let
mut
decoder_handle
=
sel
.
handle
(
&
self
.
decoder_receiver
)
;
unsafe
{
cmd_handle
.
add
(
)
;
progress_handle
.
add
(
)
;
decoder_handle
.
add
(
)
;
}
let
ret
=
sel
.
wait
(
)
;
if
ret
=
=
cmd_handle
.
id
(
)
{
SelectResult
:
:
Command
(
self
.
cmd_receiver
.
recv
(
)
.
unwrap
(
)
)
}
else
if
ret
=
=
decoder_handle
.
id
(
)
{
SelectResult
:
:
Decoder
(
self
.
decoder_receiver
.
recv
(
)
.
unwrap
(
)
)
}
else
{
SelectResult
:
:
Progress
(
self
.
progress_receiver
.
recv
(
)
.
unwrap
(
)
)
}
}
;
match
result
{
SelectResult
:
:
Command
(
cmd
)
=
>
{
exit_sender
=
self
.
handle_cmd
(
cmd
)
;
}
SelectResult
:
:
Progress
(
msg
)
=
>
{
self
.
handle_progress
(
msg
)
;
}
SelectResult
:
:
Decoder
(
msg
)
=
>
{
self
.
handle_decoder
(
msg
)
;
}
}
if
let
Some
(
ref
exit_sender
)
=
exit_sender
{
if
self
.
pending_loads
.
is_empty
(
)
{
exit_sender
.
send
(
(
)
)
.
unwrap
(
)
;
break
;
}
}
}
}
fn
handle_cmd
(
&
mut
self
cmd
:
ImageCacheCommand
)
-
>
Option
<
IpcSender
<
(
)
>
>
{
match
cmd
{
ImageCacheCommand
:
:
Exit
(
sender
)
=
>
{
return
Some
(
sender
)
;
}
ImageCacheCommand
:
:
RequestImage
(
url
result_chan
responder
)
=
>
{
self
.
request_image
(
url
result_chan
responder
)
;
}
ImageCacheCommand
:
:
GetImageIfAvailable
(
url
use_placeholder
consumer
)
=
>
{
let
result
=
match
self
.
completed_loads
.
get
(
&
url
)
{
Some
(
completed_load
)
=
>
{
match
(
completed_load
.
image_response
.
clone
(
)
use_placeholder
)
{
(
ImageResponse
:
:
Loaded
(
image
)
_
)
|
(
ImageResponse
:
:
PlaceholderLoaded
(
image
)
UsePlaceholder
:
:
Yes
)
=
>
{
Ok
(
image
)
}
(
ImageResponse
:
:
PlaceholderLoaded
(
_
)
UsePlaceholder
:
:
No
)
|
(
ImageResponse
:
:
None
_
)
=
>
{
Err
(
ImageState
:
:
LoadError
)
}
}
}
None
=
>
{
self
.
pending_loads
.
get_by_url
(
&
url
)
.
map_or
(
Err
(
ImageState
:
:
NotRequested
)
|
_
|
Err
(
ImageState
:
:
Pending
)
)
}
}
;
consumer
.
send
(
result
)
.
unwrap
(
)
;
}
}
;
None
}
fn
handle_progress
(
&
mut
self
msg
:
ResourceLoadInfo
)
{
match
(
msg
.
action
msg
.
key
)
{
(
ResponseAction
:
:
HeadersAvailable
(
_
)
_
)
=
>
{
}
(
ResponseAction
:
:
DataAvailable
(
data
)
_
)
=
>
{
let
pending_load
=
self
.
pending_loads
.
get_by_key_mut
(
&
msg
.
key
)
.
unwrap
(
)
;
pending_load
.
bytes
.
push_all
(
&
data
)
;
}
(
ResponseAction
:
:
ResponseComplete
(
result
)
key
)
=
>
{
match
result
{
Ok
(
(
)
)
=
>
{
let
pending_load
=
self
.
pending_loads
.
get_by_key_mut
(
&
msg
.
key
)
.
unwrap
(
)
;
pending_load
.
result
=
Some
(
result
)
;
let
bytes
=
mem
:
:
replace
(
&
mut
pending_load
.
bytes
vec
!
(
)
)
;
let
sender
=
self
.
decoder_sender
.
clone
(
)
;
self
.
task_pool
.
execute
(
move
|
|
{
let
image
=
load_from_memory
(
&
bytes
)
;
let
msg
=
DecoderMsg
{
key
:
key
image
:
image
}
;
sender
.
send
(
msg
)
.
unwrap
(
)
;
}
)
;
}
Err
(
_
)
=
>
{
match
self
.
placeholder_image
.
clone
(
)
{
Some
(
placeholder_image
)
=
>
{
self
.
complete_load
(
msg
.
key
ImageResponse
:
:
PlaceholderLoaded
(
placeholder_image
)
)
}
None
=
>
self
.
complete_load
(
msg
.
key
ImageResponse
:
:
None
)
}
}
}
}
}
}
fn
handle_decoder
(
&
mut
self
msg
:
DecoderMsg
)
{
let
image
=
match
msg
.
image
{
None
=
>
ImageResponse
:
:
None
Some
(
image
)
=
>
ImageResponse
:
:
Loaded
(
Arc
:
:
new
(
image
)
)
}
;
self
.
complete_load
(
msg
.
key
image
)
;
}
fn
complete_load
(
&
mut
self
key
:
LoadKey
image_response
:
ImageResponse
)
{
let
pending_load
=
self
.
pending_loads
.
remove
(
&
key
)
.
unwrap
(
)
;
let
completed_load
=
CompletedLoad
:
:
new
(
image_response
.
clone
(
)
)
;
self
.
completed_loads
.
insert
(
pending_load
.
url
completed_load
)
;
for
listener
in
pending_load
.
listeners
{
listener
.
notify
(
image_response
.
clone
(
)
)
;
}
}
fn
request_image
(
&
mut
self
url
:
Url
result_chan
:
ImageCacheChan
responder
:
Option
<
ImageResponder
>
)
{
let
image_listener
=
ImageListener
:
:
new
(
result_chan
responder
)
;
let
ref_url
=
Arc
:
:
new
(
url
)
;
match
self
.
completed_loads
.
get
(
&
ref_url
)
{
Some
(
completed_load
)
=
>
{
image_listener
.
notify
(
completed_load
.
image_response
.
clone
(
)
)
;
}
None
=
>
{
let
(
cache_result
load_key
mut
pending_load
)
=
self
.
pending_loads
.
get_cached
(
ref_url
.
clone
(
)
)
;
pending_load
.
add_listener
(
image_listener
)
;
match
cache_result
{
CacheResult
:
:
Miss
=
>
{
let
load_data
=
LoadData
:
:
new
(
(
*
ref_url
)
.
clone
(
)
None
)
;
let
(
action_sender
action_receiver
)
=
ipc
:
:
channel
(
)
.
unwrap
(
)
;
let
response_target
=
AsyncResponseTarget
{
sender
:
action_sender
}
;
let
msg
=
ControlMsg
:
:
Load
(
load_data
LoadConsumer
:
:
Listener
(
response_target
)
)
;
let
progress_sender
=
self
.
progress_sender
.
clone
(
)
;
ROUTER
.
add_route
(
action_receiver
.
to_opaque
(
)
box
move
|
message
|
{
let
action
:
ResponseAction
=
message
.
to
(
)
.
unwrap
(
)
;
progress_sender
.
send
(
ResourceLoadInfo
{
action
:
action
key
:
load_key
}
)
.
unwrap
(
)
;
}
)
;
self
.
resource_task
.
send
(
msg
)
.
unwrap
(
)
;
}
CacheResult
:
:
Hit
=
>
{
/
/
Request
is
already
on
its
way
.
}
}
}
}
}
}
/
/
/
Create
a
new
image
cache
.
pub
fn
new_image_cache_task
(
resource_task
:
ResourceTask
)
-
>
ImageCacheTask
{
let
(
ipc_command_sender
ipc_command_receiver
)
=
ipc
:
:
channel
(
)
.
unwrap
(
)
;
let
(
progress_sender
progress_receiver
)
=
channel
(
)
;
let
(
decoder_sender
decoder_receiver
)
=
channel
(
)
;
spawn_named
(
"
ImageCacheThread
"
.
to_owned
(
)
move
|
|
{
/
/
Preload
the
placeholder
image
used
when
images
fail
to
load
.
let
mut
placeholder_url
=
resources_dir_path
(
)
;
placeholder_url
.
push
(
"
rippy
.
jpg
"
)
;
let
placeholder_image
=
match
Url
:
:
from_file_path
(
&
*
placeholder_url
)
{
Ok
(
url
)
=
>
{
match
load_whole_resource
(
&
resource_task
url
)
{
Err
(
.
.
)
=
>
{
debug
!
(
"
image_cache_task
:
failed
loading
the
placeholder
.
"
)
;
None
}
Ok
(
(
_
image_data
)
)
=
>
{
Some
(
Arc
:
:
new
(
load_from_memory
(
&
image_data
)
.
unwrap
(
)
)
)
}
}
}
Err
(
.
.
)
=
>
{
debug
!
(
"
image_cache_task
:
url
{
}
"
placeholder_url
.
display
(
)
)
;
None
}
}
;
let
cmd_receiver
=
ROUTER
.
route_ipc_receiver_to_new_mpsc_receiver
(
ipc_command_receiver
)
;
let
mut
cache
=
ImageCache
{
cmd_receiver
:
cmd_receiver
progress_sender
:
progress_sender
progress_receiver
:
progress_receiver
decoder_sender
:
decoder_sender
decoder_receiver
:
decoder_receiver
task_pool
:
TaskPool
:
:
new
(
4
)
pending_loads
:
AllPendingLoads
:
:
new
(
)
completed_loads
:
HashMap
:
:
new
(
)
resource_task
:
resource_task
placeholder_image
:
placeholder_image
}
;
cache
.
run
(
)
;
}
)
;
ImageCacheTask
:
:
new
(
ipc_command_sender
)
}
