use
std
:
:
sync
:
:
mpsc
:
:
{
channel
Receiver
Sender
}
;
use
std
:
:
thread
:
:
Builder
;
use
resource_task
:
:
{
TargetedLoadResponse
}
;
pub
type
SnifferTask
=
Sender
<
TargetedLoadResponse
>
;
pub
fn
new_sniffer_task
(
)
-
>
SnifferTask
{
let
(
sen
rec
)
=
channel
(
)
;
let
builder
=
Builder
:
:
new
(
)
.
name
(
"
SnifferManager
"
.
to_string
(
)
)
;
builder
.
spawn
(
move
|
|
{
SnifferManager
:
:
new
(
rec
)
.
start
(
)
;
}
)
.
unwrap
(
)
;
sen
}
struct
SnifferManager
{
data_receiver
:
Receiver
<
TargetedLoadResponse
>
}
impl
SnifferManager
{
fn
new
(
data_receiver
:
Receiver
<
TargetedLoadResponse
>
)
-
>
SnifferManager
{
SnifferManager
{
data_receiver
:
data_receiver
}
}
}
impl
SnifferManager
{
fn
start
(
self
)
{
loop
{
match
self
.
data_receiver
.
recv
(
)
{
Ok
(
snif_data
)
=
>
{
let
_
=
snif_data
.
consumer
.
send
(
snif_data
.
load_response
)
;
}
Err
(
_
)
=
>
break
}
}
}
}
