use
data_loader
:
:
decode
;
use
fetch
:
:
cors_cache
:
:
{
BasicCORSCache
CORSCache
CacheRequestDetails
}
;
use
http_loader
:
:
{
NetworkHttpRequestFactory
create_http_connector
obtain_response
}
;
use
hyper
:
:
header
:
:
{
Accept
CacheControl
IfMatch
IfRange
IfUnmodifiedSince
Location
}
;
use
hyper
:
:
header
:
:
{
AcceptLanguage
ContentLength
ContentLanguage
HeaderView
Pragma
}
;
use
hyper
:
:
header
:
:
{
AccessControlAllowCredentials
AccessControlAllowOrigin
}
;
use
hyper
:
:
header
:
:
{
Authorization
Basic
CacheDirective
ContentEncoding
Encoding
}
;
use
hyper
:
:
header
:
:
{
ContentType
Headers
IfModifiedSince
IfNoneMatch
}
;
use
hyper
:
:
header
:
:
{
QualityItem
q
qitem
Referer
as
RefererHeader
UserAgent
}
;
use
hyper
:
:
method
:
:
Method
;
use
hyper
:
:
mime
:
:
{
Attr
Mime
SubLevel
TopLevel
Value
}
;
use
hyper
:
:
status
:
:
StatusCode
;
use
net_traits
:
:
AsyncFetchListener
;
use
net_traits
:
:
request
:
:
{
CacheMode
CredentialsMode
Type
Origin
Window
}
;
use
net_traits
:
:
request
:
:
{
RedirectMode
Referer
Request
RequestMode
ResponseTainting
}
;
use
net_traits
:
:
response
:
:
{
HttpsState
TerminationReason
}
;
use
net_traits
:
:
response
:
:
{
Response
ResponseBody
ResponseType
}
;
use
resource_thread
:
:
CancellationListener
;
use
std
:
:
io
:
:
Read
;
use
std
:
:
rc
:
:
Rc
;
use
std
:
:
thread
;
use
url
:
:
idna
:
:
domain_to_ascii
;
use
url
:
:
{
Origin
as
UrlOrigin
OpaqueOrigin
Url
UrlParser
whatwg_scheme_type_mapper
}
;
use
util
:
:
thread
:
:
spawn_named
;
pub
fn
fetch_async
(
request
:
Request
listener
:
Box
<
AsyncFetchListener
+
Send
>
)
{
spawn_named
(
format
!
(
"
fetch
for
{
:
?
}
"
request
.
current_url_string
(
)
)
move
|
|
{
let
request
=
Rc
:
:
new
(
request
)
;
let
fetch_response
=
fetch
(
request
)
;
fetch_response
.
wait_until_done
(
)
;
listener
.
response_available
(
fetch_response
)
;
}
)
}
pub
fn
fetch
(
request
:
Rc
<
Request
>
)
-
>
Response
{
if
request
.
window
.
get
(
)
=
=
Window
:
:
Client
{
}
else
{
request
.
window
.
set
(
Window
:
:
NoWindow
)
;
}
if
*
request
.
origin
.
borrow
(
)
=
=
Origin
:
:
Client
{
unimplemented
!
(
)
}
if
!
request
.
headers
.
borrow
(
)
.
has
:
:
<
Accept
>
(
)
{
let
value
=
match
request
.
type_
{
_
if
request
.
is_navigation_request
(
)
=
>
vec
!
[
qitem
(
mime
!
(
Text
/
Html
)
)
/
/
FIXME
:
This
should
properly
generate
a
MimeType
that
has
a
/
/
SubLevel
of
xhtml
+
xml
(
https
:
/
/
github
.
com
/
hyperium
/
mime
.
rs
/
issues
/
22
)
qitem
(
mime
!
(
Application
/
(
"
xhtml
+
xml
"
)
)
)
QualityItem
:
:
new
(
mime
!
(
Application
/
Xml
)
q
(
0
.
9
)
)
QualityItem
:
:
new
(
mime
!
(
_
/
_
)
q
(
0
.
8
)
)
]
Type
:
:
Image
=
>
vec
!
[
qitem
(
mime
!
(
Image
/
Png
)
)
/
/
FIXME
:
This
should
properly
generate
a
MimeType
that
has
a
/
/
SubLevel
of
svg
+
xml
(
https
:
/
/
github
.
com
/
hyperium
/
mime
.
rs
/
issues
/
22
)
qitem
(
mime
!
(
Image
/
(
"
svg
+
xml
"
)
)
)
QualityItem
:
:
new
(
mime
!
(
Image
/
_
)
q
(
0
.
8
)
)
QualityItem
:
:
new
(
mime
!
(
_
/
_
)
q
(
0
.
5
)
)
]
Type
:
:
Style
=
>
vec
!
[
qitem
(
mime
!
(
Text
/
Css
)
)
QualityItem
:
:
new
(
mime
!
(
_
/
_
)
q
(
0
.
1
)
)
]
_
=
>
vec
!
[
qitem
(
mime
!
(
_
/
_
)
)
]
}
;
request
.
headers
.
borrow_mut
(
)
.
set
(
Accept
(
value
)
)
;
}
if
!
request
.
headers
.
borrow
(
)
.
has
:
:
<
AcceptLanguage
>
(
)
{
request
.
headers
.
borrow_mut
(
)
.
set
(
AcceptLanguage
(
vec
!
[
qitem
(
"
en
-
US
"
.
parse
(
)
.
unwrap
(
)
)
]
)
)
;
}
if
request
.
is_subresource_request
(
)
{
}
main_fetch
(
request
false
false
)
}
fn
main_fetch
(
request
:
Rc
<
Request
>
cors_flag
:
bool
recursive_flag
:
bool
)
-
>
Response
{
let
mut
response
=
None
;
if
request
.
local_urls_only
{
match
&
*
request
.
current_url
(
)
.
scheme
{
"
about
"
|
"
blob
"
|
"
data
"
|
"
filesystem
"
=
>
(
)
_
=
>
response
=
Some
(
Response
:
:
network_error
(
)
)
}
}
if
request
.
referer
!
=
Referer
:
:
NoReferer
{
}
let
response
=
match
response
{
Some
(
response
)
=
>
response
None
=
>
{
let
current_url
=
request
.
current_url
(
)
;
let
same_origin
=
if
let
Origin
:
:
Origin
(
ref
origin
)
=
*
request
.
origin
.
borrow
(
)
{
*
origin
=
=
current_url
.
origin
(
)
}
else
{
false
}
;
if
(
same_origin
&
&
!
cors_flag
)
|
|
(
current_url
.
scheme
=
=
"
data
"
&
&
request
.
same_origin_data
.
get
(
)
)
|
|
current_url
.
scheme
=
=
"
about
"
|
|
request
.
mode
=
=
RequestMode
:
:
Navigate
{
basic_fetch
(
request
.
clone
(
)
)
}
else
if
request
.
mode
=
=
RequestMode
:
:
SameOrigin
{
Response
:
:
network_error
(
)
}
else
if
request
.
mode
=
=
RequestMode
:
:
NoCORS
{
request
.
response_tainting
.
set
(
ResponseTainting
:
:
Opaque
)
;
basic_fetch
(
request
.
clone
(
)
)
}
else
if
current_url
.
scheme
!
=
"
http
"
&
&
current_url
.
scheme
!
=
"
https
"
{
Response
:
:
network_error
(
)
}
else
if
request
.
use_cors_preflight
|
|
(
request
.
unsafe_request
&
&
(
!
is_simple_method
(
&
request
.
method
.
borrow
(
)
)
|
|
request
.
headers
.
borrow
(
)
.
iter
(
)
.
any
(
|
h
|
!
is_simple_header
(
&
h
)
)
)
)
{
request
.
response_tainting
.
set
(
ResponseTainting
:
:
CORSTainting
)
;
request
.
redirect_mode
.
set
(
RedirectMode
:
:
Error
)
;
let
response
=
http_fetch
(
request
.
clone
(
)
BasicCORSCache
:
:
new
(
)
true
true
false
)
;
if
response
.
is_network_error
(
)
{
}
response
}
else
{
request
.
response_tainting
.
set
(
ResponseTainting
:
:
CORSTainting
)
;
http_fetch
(
request
.
clone
(
)
BasicCORSCache
:
:
new
(
)
true
false
false
)
}
}
}
;
if
recursive_flag
{
return
response
;
}
let
response
=
if
response
.
response_type
=
=
ResponseType
:
:
Default
{
let
response_type
=
match
request
.
response_tainting
.
get
(
)
{
ResponseTainting
:
:
Basic
=
>
ResponseType
:
:
Basic
ResponseTainting
:
:
CORSTainting
=
>
ResponseType
:
:
CORS
ResponseTainting
:
:
Opaque
=
>
ResponseType
:
:
Opaque
}
;
response
.
to_filtered
(
response_type
)
}
else
{
response
}
;
{
let
network_error_res
=
Response
:
:
network_error
(
)
;
let
internal_response
=
if
response
.
is_network_error
(
)
{
&
network_error_res
}
else
{
response
.
get_actual_response
(
)
}
;
if
!
response
.
is_network_error
(
)
&
&
(
is_null_body_status
(
&
internal_response
.
status
)
|
|
match
*
request
.
method
.
borrow
(
)
{
Method
:
:
Head
|
Method
:
:
Connect
=
>
true
_
=
>
false
}
)
{
let
mut
body
=
internal_response
.
body
.
lock
(
)
.
unwrap
(
)
;
*
body
=
ResponseBody
:
:
Empty
;
}
}
if
request
.
synchronous
{
response
.
get_actual_response
(
)
.
wait_until_done
(
)
;
return
response
;
}
if
request
.
body
.
borrow
(
)
.
is_some
(
)
&
&
match
&
*
request
.
current_url
(
)
.
scheme
{
"
http
"
|
"
https
"
=
>
true
_
=
>
false
}
{
}
{
let
network_error_res
=
Response
:
:
network_error
(
)
;
let
internal_response
=
if
response
.
is_network_error
(
)
{
&
network_error_res
}
else
{
response
.
get_actual_response
(
)
}
;
internal_response
.
wait_until_done
(
)
;
}
return
response
;
}
fn
basic_fetch
(
request
:
Rc
<
Request
>
)
-
>
Response
{
let
url
=
request
.
current_url
(
)
;
let
scheme
=
url
.
scheme
.
clone
(
)
;
match
&
*
scheme
{
"
about
"
=
>
{
match
url
.
non_relative_scheme_data
(
)
{
Some
(
s
)
if
&
*
s
=
=
"
blank
"
=
>
{
let
mut
response
=
Response
:
:
new
(
)
;
response
.
headers
.
set
(
ContentType
(
mime
!
(
Text
/
Html
;
Charset
=
Utf8
)
)
)
;
*
response
.
body
.
lock
(
)
.
unwrap
(
)
=
ResponseBody
:
:
Done
(
vec
!
[
]
)
;
response
}
_
=
>
Response
:
:
network_error
(
)
}
}
"
http
"
|
"
https
"
=
>
{
http_fetch
(
request
.
clone
(
)
BasicCORSCache
:
:
new
(
)
false
false
false
)
}
"
data
"
=
>
{
if
*
request
.
method
.
borrow
(
)
=
=
Method
:
:
Get
{
match
decode
(
&
url
)
{
Ok
(
(
mime
bytes
)
)
=
>
{
let
mut
response
=
Response
:
:
new
(
)
;
*
response
.
body
.
lock
(
)
.
unwrap
(
)
=
ResponseBody
:
:
Done
(
bytes
)
;
response
.
headers
.
set
(
ContentType
(
mime
)
)
;
response
}
Err
(
_
)
=
>
Response
:
:
network_error
(
)
}
}
else
{
Response
:
:
network_error
(
)
}
}
"
blob
"
|
"
file
"
|
"
ftp
"
=
>
{
panic
!
(
"
Unimplemented
scheme
for
Fetch
"
)
}
_
=
>
Response
:
:
network_error
(
)
}
}
fn
http_fetch
(
request
:
Rc
<
Request
>
mut
cache
:
BasicCORSCache
cors_flag
:
bool
cors_preflight_flag
:
bool
authentication_fetch_flag
:
bool
)
-
>
Response
{
let
mut
response
:
Option
<
Response
>
=
None
;
if
!
request
.
skip_service_worker
.
get
(
)
&
&
!
request
.
is_service_worker_global_scope
{
if
let
Some
(
ref
res
)
=
response
{
if
(
res
.
response_type
=
=
ResponseType
:
:
Opaque
&
&
request
.
mode
!
=
RequestMode
:
:
NoCORS
)
|
|
(
res
.
response_type
=
=
ResponseType
:
:
OpaqueRedirect
&
&
request
.
redirect_mode
.
get
(
)
!
=
RedirectMode
:
:
Manual
)
|
|
(
res
.
url_list
.
borrow
(
)
.
len
(
)
>
1
&
&
request
.
redirect_mode
.
get
(
)
!
=
RedirectMode
:
:
Follow
)
|
|
res
.
response_type
=
=
ResponseType
:
:
Error
{
return
Response
:
:
network_error
(
)
;
}
let
actual_response
=
res
.
get_actual_response
(
)
;
if
actual_response
.
url_list
.
borrow
(
)
.
is_empty
(
)
{
*
actual_response
.
url_list
.
borrow_mut
(
)
=
request
.
url_list
.
borrow
(
)
.
clone
(
)
;
}
}
}
if
response
.
is_none
(
)
{
if
cors_preflight_flag
{
let
origin
=
request
.
origin
.
borrow
(
)
.
clone
(
)
;
let
url
=
request
.
current_url
(
)
;
let
credentials
=
request
.
credentials_mode
=
=
CredentialsMode
:
:
Include
;
let
method_cache_match
=
cache
.
match_method
(
CacheRequestDetails
{
origin
:
origin
.
clone
(
)
destination
:
url
.
clone
(
)
credentials
:
credentials
}
request
.
method
.
borrow
(
)
.
clone
(
)
)
;
let
method_mismatch
=
!
method_cache_match
&
&
(
!
is_simple_method
(
&
request
.
method
.
borrow
(
)
)
|
|
request
.
use_cors_preflight
)
;
let
header_mismatch
=
request
.
headers
.
borrow
(
)
.
iter
(
)
.
any
(
|
view
|
!
cache
.
match_header
(
CacheRequestDetails
{
origin
:
origin
.
clone
(
)
destination
:
url
.
clone
(
)
credentials
:
credentials
}
view
.
name
(
)
)
&
&
!
is_simple_header
(
&
view
)
)
;
if
method_mismatch
|
|
header_mismatch
{
let
preflight_result
=
preflight_fetch
(
request
.
clone
(
)
)
;
if
preflight_result
.
response_type
=
=
ResponseType
:
:
Error
{
return
Response
:
:
network_error
(
)
;
}
}
}
request
.
skip_service_worker
.
set
(
true
)
;
let
credentials
=
match
request
.
credentials_mode
{
CredentialsMode
:
:
Include
=
>
true
CredentialsMode
:
:
CredentialsSameOrigin
if
request
.
response_tainting
.
get
(
)
=
=
ResponseTainting
:
:
Basic
=
>
true
_
=
>
false
}
;
let
fetch_result
=
http_network_or_cache_fetch
(
request
.
clone
(
)
credentials
authentication_fetch_flag
)
;
if
cors_flag
&
&
cors_check
(
request
.
clone
(
)
&
fetch_result
)
.
is_err
(
)
{
return
Response
:
:
network_error
(
)
;
}
fetch_result
.
return_internal
.
set
(
false
)
;
response
=
Some
(
fetch_result
)
;
}
let
mut
response
=
response
.
unwrap
(
)
;
match
response
.
get_actual_response
(
)
.
status
.
unwrap
(
)
{
StatusCode
:
:
MovedPermanently
|
StatusCode
:
:
Found
|
StatusCode
:
:
SeeOther
|
StatusCode
:
:
TemporaryRedirect
|
StatusCode
:
:
PermanentRedirect
=
>
{
response
=
match
request
.
redirect_mode
.
get
(
)
{
RedirectMode
:
:
Error
=
>
Response
:
:
network_error
(
)
RedirectMode
:
:
Manual
=
>
{
response
.
to_filtered
(
ResponseType
:
:
OpaqueRedirect
)
}
RedirectMode
:
:
Follow
=
>
{
response
.
return_internal
.
set
(
true
)
;
http_redirect_fetch
(
request
Rc
:
:
new
(
response
)
cors_flag
)
}
}
}
StatusCode
:
:
Unauthorized
=
>
{
if
cors_flag
|
|
request
.
credentials_mode
!
=
CredentialsMode
:
:
Include
{
return
response
;
}
if
!
request
.
use_url_credentials
|
|
authentication_fetch_flag
{
}
return
http_fetch
(
request
BasicCORSCache
:
:
new
(
)
cors_flag
cors_preflight_flag
true
)
;
}
StatusCode
:
:
ProxyAuthenticationRequired
=
>
{
return
http_fetch
(
request
BasicCORSCache
:
:
new
(
)
cors_flag
cors_preflight_flag
authentication_fetch_flag
)
;
}
_
=
>
{
}
}
if
authentication_fetch_flag
{
}
response
.
return_internal
.
set
(
true
)
;
response
}
fn
http_redirect_fetch
(
request
:
Rc
<
Request
>
response
:
Rc
<
Response
>
cors_flag
:
bool
)
-
>
Response
{
assert_eq
!
(
response
.
return_internal
.
get
(
)
true
)
;
if
!
response
.
get_actual_response
(
)
.
headers
.
has
:
:
<
Location
>
(
)
{
return
Rc
:
:
try_unwrap
(
response
)
.
ok
(
)
.
unwrap
(
)
;
}
let
location
=
match
response
.
get_actual_response
(
)
.
headers
.
get
:
:
<
Location
>
(
)
{
Some
(
&
Location
(
ref
location
)
)
=
>
location
.
clone
(
)
_
=
>
return
Response
:
:
network_error
(
)
}
;
let
response_url
=
response
.
get_actual_response
(
)
.
url
.
as_ref
(
)
.
unwrap
(
)
;
let
location_url
=
UrlParser
:
:
new
(
)
.
base_url
(
response_url
)
.
parse
(
&
*
location
)
;
let
location_url
=
match
location_url
{
Ok
(
url
)
=
>
url
_
=
>
return
Response
:
:
network_error
(
)
}
;
if
request
.
redirect_count
.
get
(
)
>
=
20
{
return
Response
:
:
network_error
(
)
;
}
request
.
redirect_count
.
set
(
request
.
redirect_count
.
get
(
)
+
1
)
;
request
.
same_origin_data
.
set
(
false
)
;
let
same_origin
=
if
let
Origin
:
:
Origin
(
ref
origin
)
=
*
request
.
origin
.
borrow
(
)
{
*
origin
=
=
request
.
current_url
(
)
.
origin
(
)
}
else
{
false
}
;
let
has_credentials
=
has_credentials
(
&
location_url
)
;
if
request
.
mode
=
=
RequestMode
:
:
CORSMode
&
&
!
same_origin
&
&
has_credentials
{
return
Response
:
:
network_error
(
)
;
}
if
cors_flag
&
&
has_credentials
{
return
Response
:
:
network_error
(
)
;
}
if
cors_flag
&
&
!
same_origin
{
*
request
.
origin
.
borrow_mut
(
)
=
Origin
:
:
Origin
(
UrlOrigin
:
:
UID
(
OpaqueOrigin
:
:
new
(
)
)
)
;
}
let
status_code
=
response
.
get_actual_response
(
)
.
status
.
unwrap
(
)
;
if
(
(
status_code
=
=
StatusCode
:
:
MovedPermanently
|
|
status_code
=
=
StatusCode
:
:
Found
)
&
&
*
request
.
method
.
borrow
(
)
=
=
Method
:
:
Post
)
|
|
status_code
=
=
StatusCode
:
:
SeeOther
{
*
request
.
method
.
borrow_mut
(
)
=
Method
:
:
Get
;
*
request
.
body
.
borrow_mut
(
)
=
None
;
}
request
.
url_list
.
borrow_mut
(
)
.
push
(
location_url
)
;
main_fetch
(
request
cors_flag
true
)
}
fn
http_network_or_cache_fetch
(
request
:
Rc
<
Request
>
credentials_flag
:
bool
authentication_fetch_flag
:
bool
)
-
>
Response
{
let
request_has_no_window
=
true
;
let
http_request
=
if
request_has_no_window
&
&
request
.
redirect_mode
.
get
(
)
!
=
RedirectMode
:
:
Follow
{
request
.
clone
(
)
}
else
{
Rc
:
:
new
(
(
*
request
)
.
clone
(
)
)
}
;
let
content_length_value
=
match
*
http_request
.
body
.
borrow
(
)
{
None
=
>
match
*
http_request
.
method
.
borrow
(
)
{
Method
:
:
Head
|
Method
:
:
Post
|
Method
:
:
Put
=
>
Some
(
0
)
_
=
>
None
}
Some
(
ref
http_request_body
)
=
>
Some
(
http_request_body
.
len
(
)
as
u64
)
}
;
if
let
Some
(
content_length_value
)
=
content_length_value
{
http_request
.
headers
.
borrow_mut
(
)
.
set
(
ContentLength
(
content_length_value
)
)
;
}
match
http_request
.
referer
{
Referer
:
:
NoReferer
=
>
http_request
.
headers
.
borrow_mut
(
)
.
set
(
RefererHeader
(
"
"
.
to_owned
(
)
)
)
Referer
:
:
RefererUrl
(
ref
http_request_referer
)
=
>
http_request
.
headers
.
borrow_mut
(
)
.
set
(
RefererHeader
(
http_request_referer
.
serialize
(
)
)
)
Referer
:
:
Client
=
>
unreachable
!
(
)
}
;
if
http_request
.
omit_origin_header
.
get
(
)
=
=
false
{
}
if
!
http_request
.
headers
.
borrow
(
)
.
has
:
:
<
UserAgent
>
(
)
{
http_request
.
headers
.
borrow_mut
(
)
.
set
(
UserAgent
(
global_user_agent
(
)
.
to_owned
(
)
)
)
;
}
match
http_request
.
cache_mode
.
get
(
)
{
CacheMode
:
:
Default
if
is_no_store_cache
(
&
http_request
.
headers
.
borrow
(
)
)
=
>
{
http_request
.
cache_mode
.
set
(
CacheMode
:
:
NoStore
)
;
}
CacheMode
:
:
NoCache
if
!
http_request
.
headers
.
borrow
(
)
.
has
:
:
<
CacheControl
>
(
)
=
>
{
http_request
.
headers
.
borrow_mut
(
)
.
set
(
CacheControl
(
vec
!
[
CacheDirective
:
:
MaxAge
(
0
)
]
)
)
;
}
CacheMode
:
:
Reload
=
>
{
if
!
http_request
.
headers
.
borrow
(
)
.
has
:
:
<
Pragma
>
(
)
{
http_request
.
headers
.
borrow_mut
(
)
.
set
(
Pragma
:
:
NoCache
)
;
}
if
!
http_request
.
headers
.
borrow
(
)
.
has
:
:
<
CacheControl
>
(
)
{
http_request
.
headers
.
borrow_mut
(
)
.
set
(
CacheControl
(
vec
!
[
CacheDirective
:
:
NoCache
]
)
)
;
}
}
_
=
>
{
}
}
if
credentials_flag
{
if
!
http_request
.
headers
.
borrow
(
)
.
has
:
:
<
Authorization
<
String
>
>
(
)
{
let
mut
authorization_value
=
None
;
if
authentication_fetch_flag
{
let
current_url
=
http_request
.
current_url
(
)
;
authorization_value
=
if
includes_credentials
(
&
current_url
)
{
Some
(
Basic
{
username
:
current_url
.
username
(
)
.
unwrap_or
(
"
"
)
.
to_owned
(
)
password
:
current_url
.
password
(
)
.
map
(
str
:
:
to_owned
)
}
)
}
else
{
None
}
}
if
let
Some
(
basic
)
=
authorization_value
{
http_request
.
headers
.
borrow_mut
(
)
.
set
(
Authorization
(
basic
)
)
;
}
}
}
let
mut
response
:
Option
<
Response
>
=
None
;
let
complete_http_response_from_cache
:
Option
<
Response
>
=
None
;
if
http_request
.
cache_mode
.
get
(
)
!
=
CacheMode
:
:
NoStore
&
&
http_request
.
cache_mode
.
get
(
)
!
=
CacheMode
:
:
Reload
&
&
complete_http_response_from_cache
.
is_some
(
)
{
if
http_request
.
cache_mode
.
get
(
)
=
=
CacheMode
:
:
ForceCache
{
}
let
revalidation_needed
=
match
response
{
Some
(
ref
response
)
=
>
response_needs_revalidation
(
&
response
)
_
=
>
false
}
;
if
!
revalidation_needed
&
&
http_request
.
cache_mode
.
get
(
)
=
=
CacheMode
:
:
Default
{
}
if
revalidation_needed
&
&
http_request
.
cache_mode
.
get
(
)
=
=
CacheMode
:
:
Default
|
|
http_request
.
cache_mode
.
get
(
)
=
=
CacheMode
:
:
NoCache
{
}
}
else
if
http_request
.
cache_mode
.
get
(
)
=
=
CacheMode
:
:
Default
|
|
http_request
.
cache_mode
.
get
(
)
=
=
CacheMode
:
:
ForceCache
{
}
if
response
.
is_none
(
)
{
response
=
Some
(
http_network_fetch
(
request
.
clone
(
)
http_request
.
clone
(
)
credentials_flag
)
)
;
}
let
response
=
response
.
unwrap
(
)
;
if
let
Some
(
status
)
=
response
.
status
{
if
status
=
=
StatusCode
:
:
NotModified
&
&
(
http_request
.
cache_mode
.
get
(
)
=
=
CacheMode
:
:
Default
|
|
http_request
.
cache_mode
.
get
(
)
=
=
CacheMode
:
:
NoCache
)
{
}
}
response
}
fn
http_network_fetch
(
request
:
Rc
<
Request
>
_http_request
:
Rc
<
Request
>
_credentials_flag
:
bool
)
-
>
Response
{
let
connection
=
create_http_connector
(
)
;
let
factory
=
NetworkHttpRequestFactory
{
connector
:
connection
}
;
let
url
=
request
.
current_url
(
)
;
let
cancellation_listener
=
CancellationListener
:
:
new
(
None
)
;
let
wrapped_response
=
obtain_response
(
&
factory
&
url
&
request
.
method
.
borrow
(
)
&
request
.
headers
.
borrow
(
)
&
cancellation_listener
&
None
&
request
.
method
.
borrow
(
)
&
None
request
.
redirect_count
.
get
(
)
&
None
"
"
)
;
let
mut
response
=
Response
:
:
new
(
)
;
match
wrapped_response
{
Ok
(
mut
res
)
=
>
{
response
.
url
=
Some
(
res
.
response
.
url
.
clone
(
)
)
;
response
.
status
=
Some
(
res
.
response
.
status
)
;
response
.
headers
=
res
.
response
.
headers
.
clone
(
)
;
let
res_body
=
response
.
body
.
clone
(
)
;
thread
:
:
spawn
(
move
|
|
{
*
res_body
.
lock
(
)
.
unwrap
(
)
=
ResponseBody
:
:
Receiving
(
vec
!
[
]
)
;
let
mut
new_body
=
vec
!
[
]
;
res
.
response
.
read_to_end
(
&
mut
new_body
)
.
unwrap
(
)
;
let
mut
body
=
res_body
.
lock
(
)
.
unwrap
(
)
;
assert
!
(
*
body
!
=
ResponseBody
:
:
Empty
)
;
*
body
=
ResponseBody
:
:
Done
(
new_body
)
;
}
)
;
}
Err
(
_
)
=
>
response
.
termination_reason
=
Some
(
TerminationReason
:
:
Fatal
)
}
;
response
.
https_state
=
HttpsState
:
:
None
;
if
let
Some
(
encoding
)
=
response
.
headers
.
get
:
:
<
ContentEncoding
>
(
)
{
if
encoding
.
contains
(
&
Encoding
:
:
Gzip
)
{
}
else
if
encoding
.
contains
(
&
Encoding
:
:
Compress
)
{
}
}
;
*
response
.
url_list
.
borrow_mut
(
)
=
request
.
url_list
.
borrow
(
)
.
clone
(
)
;
if
response
.
is_network_error
(
)
&
&
request
.
cache_mode
.
get
(
)
=
=
CacheMode
:
:
NoStore
{
}
response
}
fn
preflight_fetch
(
_request
:
Rc
<
Request
>
)
-
>
Response
{
Response
:
:
network_error
(
)
}
fn
cors_check
(
request
:
Rc
<
Request
>
response
:
&
Response
)
-
>
Result
<
(
)
(
)
>
{
let
origin
=
response
.
headers
.
get
:
:
<
AccessControlAllowOrigin
>
(
)
.
cloned
(
)
;
let
origin
=
try
!
(
origin
.
ok_or
(
(
)
)
)
;
if
request
.
credentials_mode
!
=
CredentialsMode
:
:
Include
&
&
origin
=
=
AccessControlAllowOrigin
:
:
Any
{
return
Ok
(
(
)
)
;
}
let
origin
=
match
origin
{
AccessControlAllowOrigin
:
:
Value
(
origin
)
=
>
origin
_
=
>
return
Err
(
(
)
)
}
;
match
ascii_serialise_origin
(
&
request
.
origin
.
borrow
(
)
)
{
Ok
(
request_origin
)
=
>
{
if
request_origin
!
=
origin
{
return
Err
(
(
)
)
;
}
}
_
=
>
return
Err
(
(
)
)
}
if
request
.
credentials_mode
!
=
CredentialsMode
:
:
Include
{
return
Ok
(
(
)
)
;
}
let
credentials
=
request
.
headers
.
borrow
(
)
.
get
:
:
<
AccessControlAllowCredentials
>
(
)
.
cloned
(
)
;
if
credentials
.
is_some
(
)
{
return
Ok
(
(
)
)
;
}
Err
(
(
)
)
}
fn
ascii_serialise_origin
(
origin
:
&
Origin
)
-
>
Result
<
String
(
)
>
{
match
*
origin
{
Origin
:
:
Origin
(
UrlOrigin
:
:
UID
(
_
)
)
=
>
Ok
(
"
null
"
.
to_owned
(
)
)
Origin
:
:
Origin
(
UrlOrigin
:
:
Tuple
(
ref
scheme
ref
host
ref
port
)
)
=
>
{
let
host
=
try
!
(
domain_to_ascii
(
host
.
serialize
(
)
.
as_str
(
)
)
.
or
(
Err
(
(
)
)
)
)
;
let
default_port
=
whatwg_scheme_type_mapper
(
scheme
)
.
default_port
(
)
;
if
Some
(
*
port
)
=
=
default_port
{
Ok
(
format
!
(
"
{
}
:
/
/
{
}
"
scheme
host
)
)
}
else
{
Ok
(
format
!
(
"
{
}
:
/
/
{
}
{
}
"
scheme
host
port
)
)
}
}
_
=
>
Err
(
(
)
)
}
}
fn
global_user_agent
(
)
-
>
String
{
const
USER_AGENT_STRING
:
&
'
static
str
=
"
Servo
"
;
USER_AGENT_STRING
.
to_owned
(
)
}
fn
has_credentials
(
url
:
&
Url
)
-
>
bool
{
!
url
.
username
(
)
.
unwrap_or
(
"
"
)
.
is_empty
(
)
|
|
url
.
password
(
)
.
is_some
(
)
}
fn
is_no_store_cache
(
headers
:
&
Headers
)
-
>
bool
{
headers
.
has
:
:
<
IfModifiedSince
>
(
)
|
headers
.
has
:
:
<
IfNoneMatch
>
(
)
|
headers
.
has
:
:
<
IfUnmodifiedSince
>
(
)
|
headers
.
has
:
:
<
IfMatch
>
(
)
|
headers
.
has
:
:
<
IfRange
>
(
)
}
fn
is_simple_header
(
h
:
&
HeaderView
)
-
>
bool
{
if
h
.
is
:
:
<
ContentType
>
(
)
{
match
h
.
value
(
)
{
Some
(
&
ContentType
(
Mime
(
TopLevel
:
:
Text
SubLevel
:
:
Plain
_
)
)
)
|
Some
(
&
ContentType
(
Mime
(
TopLevel
:
:
Application
SubLevel
:
:
WwwFormUrlEncoded
_
)
)
)
|
Some
(
&
ContentType
(
Mime
(
TopLevel
:
:
Multipart
SubLevel
:
:
FormData
_
)
)
)
=
>
true
_
=
>
false
}
}
else
{
h
.
is
:
:
<
Accept
>
(
)
|
|
h
.
is
:
:
<
AcceptLanguage
>
(
)
|
|
h
.
is
:
:
<
ContentLanguage
>
(
)
}
}
fn
is_simple_method
(
m
:
&
Method
)
-
>
bool
{
match
*
m
{
Method
:
:
Get
|
Method
:
:
Head
|
Method
:
:
Post
=
>
true
_
=
>
false
}
}
fn
includes_credentials
(
url
:
&
Url
)
-
>
bool
{
if
url
.
password
(
)
.
is_some
(
)
{
return
true
}
if
let
Some
(
name
)
=
url
.
username
(
)
{
return
name
.
len
(
)
>
0
}
false
}
fn
response_needs_revalidation
(
_response
:
&
Response
)
-
>
bool
{
false
}
fn
is_null_body_status
(
status
:
&
Option
<
StatusCode
>
)
-
>
bool
{
match
*
status
{
Some
(
status
)
=
>
match
status
{
StatusCode
:
:
SwitchingProtocols
|
StatusCode
:
:
NoContent
|
StatusCode
:
:
ResetContent
|
StatusCode
:
:
NotModified
=
>
true
_
=
>
false
}
_
=
>
false
}
}
