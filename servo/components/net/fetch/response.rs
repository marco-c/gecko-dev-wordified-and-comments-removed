use
url
:
:
Url
;
use
hyper
:
:
status
:
:
StatusCode
;
use
hyper
:
:
header
:
:
Headers
;
use
std
:
:
ascii
:
:
AsciiExt
;
use
std
:
:
comm
:
:
Receiver
;
#
[
deriving
(
Clone
PartialEq
Copy
)
]
pub
enum
ResponseType
{
Basic
CORS
Default
Error
Opaque
}
#
[
deriving
(
Clone
Copy
)
]
pub
enum
TerminationReason
{
EndUserAbort
Fatal
Timeout
}
#
[
unstable
=
"
I
haven
'
t
yet
decided
exactly
how
the
interface
for
this
will
be
"
]
#
[
deriving
(
Clone
)
]
pub
enum
ResponseBody
{
Empty
Receiving
(
Vec
<
u8
>
)
Done
(
Vec
<
u8
>
)
}
#
[
unstable
=
"
I
haven
'
t
yet
decided
exactly
how
the
interface
for
this
will
be
"
]
pub
enum
ResponseMsg
{
Chunk
(
Vec
<
u8
>
)
Finished
Errored
}
#
[
unstable
=
"
I
haven
'
t
yet
decided
exactly
how
the
interface
for
this
will
be
"
]
pub
struct
ResponseLoader
{
response
:
Response
chan
:
Receiver
<
ResponseMsg
>
}
#
[
deriving
(
Clone
)
]
pub
struct
Response
{
pub
response_type
:
ResponseType
pub
termination_reason
:
Option
<
TerminationReason
>
pub
url
:
Option
<
Url
>
pub
status
:
Option
<
StatusCode
>
pub
headers
:
Headers
pub
body
:
ResponseBody
pub
internal_response
:
Option
<
Box
<
Response
>
>
}
impl
Response
{
pub
fn
new
(
)
-
>
Response
{
Response
{
response_type
:
ResponseType
:
:
Default
termination_reason
:
None
url
:
None
status
:
Some
(
StatusCode
:
:
Ok
)
headers
:
Headers
:
:
new
(
)
body
:
ResponseBody
:
:
Empty
internal_response
:
None
}
}
pub
fn
network_error
(
)
-
>
Response
{
Response
{
response_type
:
ResponseType
:
:
Error
termination_reason
:
None
url
:
None
status
:
None
headers
:
Headers
:
:
new
(
)
body
:
ResponseBody
:
:
Empty
internal_response
:
None
}
}
pub
fn
is_network_error
(
&
self
)
-
>
bool
{
match
self
.
response_type
{
ResponseType
:
:
Error
=
>
true
_
=
>
false
}
}
pub
fn
to_filtered
(
self
filter_type
:
ResponseType
)
-
>
Response
{
assert
!
(
filter_type
!
=
ResponseType
:
:
Error
)
;
assert
!
(
filter_type
!
=
ResponseType
:
:
Default
)
;
if
self
.
is_network_error
(
)
{
return
self
;
}
let
old_headers
=
self
.
headers
.
clone
(
)
;
let
mut
response
=
self
.
clone
(
)
;
response
.
internal_response
=
Some
(
box
self
)
;
match
filter_type
{
ResponseType
:
:
Default
|
ResponseType
:
:
Error
=
>
unreachable
!
(
)
ResponseType
:
:
Basic
=
>
{
let
headers
=
old_headers
.
iter
(
)
.
filter
(
|
header
|
{
match
header
.
name
(
)
.
to_ascii_lower
(
)
.
as_slice
(
)
{
"
set
-
cookie
"
|
"
set
-
cookie2
"
=
>
false
_
=
>
true
}
}
)
.
collect
(
)
;
response
.
headers
=
headers
;
response
.
response_type
=
filter_type
;
}
ResponseType
:
:
CORS
=
>
{
let
headers
=
old_headers
.
iter
(
)
.
filter
(
|
header
|
{
match
header
.
name
(
)
.
to_ascii_lower
(
)
.
as_slice
(
)
{
"
cache
-
control
"
|
"
content
-
language
"
|
"
content
-
type
"
|
"
expires
"
|
"
last
-
modified
"
|
"
Pragma
"
=
>
false
_
=
>
true
}
}
)
.
collect
(
)
;
response
.
headers
=
headers
;
response
.
response_type
=
filter_type
;
}
ResponseType
:
:
Opaque
=
>
{
response
.
headers
=
Headers
:
:
new
(
)
;
response
.
status
=
None
;
response
.
body
=
ResponseBody
:
:
Empty
;
}
}
response
}
}
