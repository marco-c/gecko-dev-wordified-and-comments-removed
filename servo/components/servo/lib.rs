#
[
cfg
(
not
(
target_os
=
"
windows
"
)
)
]
extern
crate
gaol
;
#
[
macro_use
]
extern
crate
gleam
;
pub
extern
crate
canvas
;
pub
extern
crate
canvas_traits
;
pub
extern
crate
compositing
;
pub
extern
crate
constellation
;
pub
extern
crate
devtools
;
pub
extern
crate
devtools_traits
;
pub
extern
crate
euclid
;
pub
extern
crate
gfx
;
pub
extern
crate
ipc_channel
;
pub
extern
crate
layout
;
pub
extern
crate
msg
;
pub
extern
crate
net
;
pub
extern
crate
net_traits
;
pub
extern
crate
profile
;
pub
extern
crate
profile_traits
;
pub
extern
crate
script
;
pub
extern
crate
script_traits
;
pub
extern
crate
script_layout_interface
;
pub
extern
crate
style
;
pub
extern
crate
url
;
pub
extern
crate
util
;
#
[
cfg
(
feature
=
"
webdriver
"
)
]
extern
crate
webdriver_server
;
extern
crate
webrender
;
extern
crate
webrender_traits
;
#
[
cfg
(
feature
=
"
webdriver
"
)
]
fn
webdriver
(
port
:
u16
constellation
:
Sender
<
ConstellationMsg
>
)
{
webdriver_server
:
:
start_server
(
port
constellation
)
;
}
#
[
cfg
(
not
(
feature
=
"
webdriver
"
)
)
]
fn
webdriver
(
_port
:
u16
_constellation
:
Sender
<
ConstellationMsg
>
)
{
}
use
compositing
:
:
compositor_thread
:
:
InitialCompositorState
;
use
compositing
:
:
windowing
:
:
WindowEvent
;
use
compositing
:
:
windowing
:
:
WindowMethods
;
use
compositing
:
:
{
CompositorProxy
IOCompositor
}
;
#
[
cfg
(
not
(
target_os
=
"
windows
"
)
)
]
use
constellation
:
:
content_process_sandbox_profile
;
use
constellation
:
:
{
Constellation
InitialConstellationState
UnprivilegedPipelineContent
}
;
#
[
cfg
(
not
(
target_os
=
"
windows
"
)
)
]
use
gaol
:
:
sandbox
:
:
{
ChildSandbox
ChildSandboxMethods
}
;
use
gfx
:
:
font_cache_thread
:
:
FontCacheThread
;
use
ipc_channel
:
:
ipc
:
:
{
self
IpcSender
}
;
use
net
:
:
bluetooth_thread
:
:
BluetoothThreadFactory
;
use
net
:
:
image_cache_thread
:
:
new_image_cache_thread
;
use
net
:
:
resource_thread
:
:
new_resource_threads
;
use
net_traits
:
:
IpcSend
;
use
net_traits
:
:
bluetooth_thread
:
:
BluetoothMethodMsg
;
use
profile
:
:
mem
as
profile_mem
;
use
profile
:
:
time
as
profile_time
;
use
profile_traits
:
:
mem
;
use
profile_traits
:
:
time
;
use
script_traits
:
:
ConstellationMsg
;
use
std
:
:
rc
:
:
Rc
;
use
std
:
:
sync
:
:
mpsc
:
:
Sender
;
use
util
:
:
resource_files
:
:
resources_dir_path
;
use
util
:
:
{
opts
prefs
}
;
pub
use
gleam
:
:
gl
;
pub
struct
Browser
<
Window
:
WindowMethods
+
'
static
>
{
compositor
:
IOCompositor
<
Window
>
}
impl
<
Window
>
Browser
<
Window
>
where
Window
:
WindowMethods
+
'
static
{
pub
fn
new
(
window
:
Rc
<
Window
>
)
-
>
Browser
<
Window
>
{
let
opts
=
opts
:
:
get
(
)
;
script
:
:
init
(
)
;
let
(
compositor_proxy
compositor_receiver
)
=
window
.
create_compositor_channel
(
)
;
let
supports_clipboard
=
window
.
supports_clipboard
(
)
;
let
time_profiler_chan
=
profile_time
:
:
Profiler
:
:
create
(
&
opts
.
time_profiling
opts
.
time_profiler_trace_path
.
clone
(
)
)
;
let
mem_profiler_chan
=
profile_mem
:
:
Profiler
:
:
create
(
opts
.
mem_profiler_period
)
;
let
devtools_chan
=
opts
.
devtools_port
.
map
(
|
port
|
{
devtools
:
:
start_server
(
port
)
}
)
;
let
(
webrender
webrender_api_sender
)
=
if
opts
:
:
get
(
)
.
use_webrender
{
let
mut
resource_path
=
resources_dir_path
(
)
;
resource_path
.
push
(
"
shaders
"
)
;
let
scale_factor
=
window
.
scale_factor
(
)
.
get
(
)
;
let
device_pixel_ratio
=
match
opts
.
device_pixels_per_px
{
Some
(
device_pixels_per_px
)
=
>
device_pixels_per_px
None
=
>
match
opts
.
output_file
{
Some
(
_
)
=
>
1
.
0
None
=
>
scale_factor
}
}
;
let
(
webrender
webrender_sender
)
=
webrender
:
:
Renderer
:
:
new
(
webrender
:
:
RendererOptions
{
device_pixel_ratio
:
device_pixel_ratio
resource_path
:
resource_path
enable_aa
:
opts
.
enable_text_antialiasing
enable_msaa
:
opts
.
use_msaa
enable_profiler
:
opts
.
webrender_stats
}
)
;
(
Some
(
webrender
)
Some
(
webrender_sender
)
)
}
else
{
(
None
None
)
}
;
let
constellation_chan
=
create_constellation
(
opts
.
clone
(
)
compositor_proxy
.
clone_compositor_proxy
(
)
time_profiler_chan
.
clone
(
)
mem_profiler_chan
.
clone
(
)
devtools_chan
supports_clipboard
webrender_api_sender
.
clone
(
)
)
;
if
cfg
!
(
feature
=
"
webdriver
"
)
{
if
let
Some
(
port
)
=
opts
.
webdriver_port
{
webdriver
(
port
constellation_chan
.
clone
(
)
)
;
}
}
let
compositor
=
IOCompositor
:
:
create
(
window
InitialCompositorState
{
sender
:
compositor_proxy
receiver
:
compositor_receiver
constellation_chan
:
constellation_chan
time_profiler_chan
:
time_profiler_chan
mem_profiler_chan
:
mem_profiler_chan
webrender
:
webrender
webrender_api_sender
:
webrender_api_sender
}
)
;
Browser
{
compositor
:
compositor
}
}
pub
fn
handle_events
(
&
mut
self
events
:
Vec
<
WindowEvent
>
)
-
>
bool
{
self
.
compositor
.
handle_events
(
events
)
}
pub
fn
repaint_synchronously
(
&
mut
self
)
{
self
.
compositor
.
repaint_synchronously
(
)
}
pub
fn
pinch_zoom_level
(
&
self
)
-
>
f32
{
self
.
compositor
.
pinch_zoom_level
(
)
}
pub
fn
request_title_for_main_frame
(
&
self
)
{
self
.
compositor
.
title_for_main_frame
(
)
}
}
fn
create_constellation
(
opts
:
opts
:
:
Opts
compositor_proxy
:
Box
<
CompositorProxy
+
Send
>
time_profiler_chan
:
time
:
:
ProfilerChan
mem_profiler_chan
:
mem
:
:
ProfilerChan
devtools_chan
:
Option
<
Sender
<
devtools_traits
:
:
DevtoolsControlMsg
>
>
supports_clipboard
:
bool
webrender_api_sender
:
Option
<
webrender_traits
:
:
RenderApiSender
>
)
-
>
Sender
<
ConstellationMsg
>
{
let
bluetooth_thread
:
IpcSender
<
BluetoothMethodMsg
>
=
BluetoothThreadFactory
:
:
new
(
)
;
let
resource_threads
=
new_resource_threads
(
opts
.
user_agent
.
clone
(
)
devtools_chan
.
clone
(
)
time_profiler_chan
.
clone
(
)
)
;
let
image_cache_thread
=
new_image_cache_thread
(
resource_threads
.
sender
(
)
webrender_api_sender
.
as_ref
(
)
.
map
(
|
wr
|
wr
.
create_api
(
)
)
)
;
let
font_cache_thread
=
FontCacheThread
:
:
new
(
resource_threads
.
sender
(
)
webrender_api_sender
.
as_ref
(
)
.
map
(
|
wr
|
wr
.
create_api
(
)
)
)
;
let
initial_state
=
InitialConstellationState
{
compositor_proxy
:
compositor_proxy
devtools_chan
:
devtools_chan
bluetooth_thread
:
bluetooth_thread
image_cache_thread
:
image_cache_thread
font_cache_thread
:
font_cache_thread
resource_threads
:
resource_threads
time_profiler_chan
:
time_profiler_chan
mem_profiler_chan
:
mem_profiler_chan
supports_clipboard
:
supports_clipboard
webrender_api_sender
:
webrender_api_sender
}
;
let
constellation_chan
=
Constellation
:
:
<
script_layout_interface
:
:
message
:
:
Msg
layout
:
:
layout_thread
:
:
LayoutThread
script
:
:
script_thread
:
:
ScriptThread
>
:
:
start
(
initial_state
)
;
match
opts
.
url
{
Some
(
url
)
=
>
{
constellation_chan
.
send
(
ConstellationMsg
:
:
InitLoadUrl
(
url
)
)
.
unwrap
(
)
;
}
None
=
>
(
)
}
;
constellation_chan
}
pub
fn
run_content_process
(
token
:
String
)
{
let
(
unprivileged_content_sender
unprivileged_content_receiver
)
=
ipc
:
:
channel
:
:
<
UnprivilegedPipelineContent
>
(
)
.
unwrap
(
)
;
let
connection_bootstrap
:
IpcSender
<
IpcSender
<
UnprivilegedPipelineContent
>
>
=
IpcSender
:
:
connect
(
token
)
.
unwrap
(
)
;
connection_bootstrap
.
send
(
unprivileged_content_sender
)
.
unwrap
(
)
;
let
unprivileged_content
=
unprivileged_content_receiver
.
recv
(
)
.
unwrap
(
)
;
opts
:
:
set_defaults
(
unprivileged_content
.
opts
(
)
)
;
prefs
:
:
extend_prefs
(
unprivileged_content
.
prefs
(
)
)
;
if
opts
:
:
get
(
)
.
sandbox
{
create_sandbox
(
)
;
}
script
:
:
init
(
)
;
unprivileged_content
.
start_all
:
:
<
script_layout_interface
:
:
message
:
:
Msg
layout
:
:
layout_thread
:
:
LayoutThread
script
:
:
script_thread
:
:
ScriptThread
>
(
true
)
;
}
#
[
cfg
(
target_os
=
"
android
"
)
]
#
[
no_mangle
]
pub
unsafe
extern
fn
__errno_location
(
)
-
>
*
mut
i32
{
extern
{
fn
__errno
(
)
-
>
*
mut
i32
;
}
__errno
(
)
}
#
[
cfg
(
not
(
target_os
=
"
windows
"
)
)
]
fn
create_sandbox
(
)
{
ChildSandbox
:
:
new
(
content_process_sandbox_profile
(
)
)
.
activate
(
)
.
expect
(
"
Failed
to
activate
sandbox
!
"
)
;
}
#
[
cfg
(
target_os
=
"
windows
"
)
]
fn
create_sandbox
(
)
{
panic
!
(
"
Sandboxing
is
not
supported
on
Windows
.
"
)
;
}
