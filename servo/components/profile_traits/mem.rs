#
!
[
deny
(
missing_docs
)
]
use
ipc_channel
:
:
ipc
:
:
IpcSender
;
#
[
derive
(
Clone
)
]
pub
struct
ProfilerChan
(
pub
IpcSender
<
ProfilerMsg
>
)
;
impl
ProfilerChan
{
pub
fn
send
(
&
self
msg
:
ProfilerMsg
)
{
let
ProfilerChan
(
ref
c
)
=
*
self
;
c
.
send
(
msg
)
.
unwrap
(
)
;
}
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
ReportKind
{
ExplicitJemallocHeapSize
ExplicitSystemHeapSize
ExplicitNonHeapSize
ExplicitUnknownLocationSize
NonExplicitSize
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
Report
{
pub
path
:
Vec
<
String
>
pub
kind
:
ReportKind
pub
size
:
usize
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
ReportsChan
(
pub
IpcSender
<
Vec
<
Report
>
>
)
;
impl
ReportsChan
{
pub
fn
send
(
&
self
report
:
Vec
<
Report
>
)
{
let
ReportsChan
(
ref
c
)
=
*
self
;
c
.
send
(
report
)
.
unwrap
(
)
;
}
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
ReporterRequest
{
pub
reports_channel
:
ReportsChan
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
Reporter
(
pub
IpcSender
<
ReporterRequest
>
)
;
impl
Reporter
{
pub
fn
collect_reports
(
&
self
reports_chan
:
ReportsChan
)
{
self
.
0
.
send
(
ReporterRequest
{
reports_channel
:
reports_chan
}
)
.
unwrap
(
)
}
}
#
[
macro_export
]
macro_rules
!
path
{
(
(
x
:
expr
)
*
)
=
>
{
{
use
std
:
:
borrow
:
:
ToOwned
;
vec
!
[
(
x
.
to_owned
(
)
)
*
]
}
}
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
ProfilerMsg
{
RegisterReporter
(
String
Reporter
)
UnregisterReporter
(
String
)
Print
Exit
}
