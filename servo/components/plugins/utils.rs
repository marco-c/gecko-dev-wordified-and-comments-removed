use
rustc
:
:
lint
:
:
Context
;
use
rustc
:
:
middle
:
:
{
ty
def
}
;
use
syntax
:
:
ptr
:
:
P
;
use
syntax
:
:
ast
;
use
syntax
:
:
ast
:
:
{
TyPath
Path
AngleBracketedParameters
PathSegment
Ty
}
;
use
syntax
:
:
attr
:
:
mark_used
;
pub
fn
match_ty_unwrap
<
'
a
>
(
ty
:
&
'
a
Ty
segments
:
&
[
&
str
]
)
-
>
Option
<
&
'
a
[
P
<
Ty
>
]
>
{
match
ty
.
node
{
TyPath
(
Path
{
segments
:
ref
seg
.
.
}
_
_
)
=
>
{
if
seg
.
iter
(
)
.
rev
(
)
.
zip
(
segments
.
iter
(
)
.
rev
(
)
)
.
all
(
|
(
a
b
)
|
a
.
identifier
.
as_str
(
)
=
=
*
b
)
{
match
seg
.
as_slice
(
)
.
last
(
)
{
Some
(
&
PathSegment
{
parameters
:
AngleBracketedParameters
(
ref
a
)
.
.
}
)
=
>
{
Some
(
a
.
types
.
as_slice
(
)
)
}
_
=
>
None
}
}
else
{
None
}
}
_
=
>
None
}
}
pub
fn
match_lang_ty
(
cx
:
&
Context
ty
:
&
Ty
value
:
&
str
)
-
>
bool
{
let
mut
found
=
false
;
if
let
TyPath
(
_
_
ty_id
)
=
ty
.
node
{
if
let
Some
(
def
:
:
DefTy
(
def_id
_
)
)
=
cx
.
tcx
.
def_map
.
borrow
(
)
.
get
(
&
ty_id
)
.
cloned
(
)
{
ty
:
:
each_attr
(
cx
.
tcx
def_id
|
attr
|
{
if
let
ast
:
:
MetaNameValue
(
ref
name
ref
val
)
=
attr
.
node
.
value
.
node
{
if
name
.
get
(
)
=
=
"
servo_lang
"
{
if
let
ast
:
:
LitStr
(
ref
v
_
)
=
val
.
node
{
if
v
.
get
(
)
=
=
value
{
mark_used
(
attr
)
;
found
=
true
;
return
false
;
}
}
}
}
true
}
)
;
}
;
}
found
}
