use
rustc
:
:
hir
;
use
rustc
:
:
hir
:
:
intravisit
as
visit
;
use
rustc
:
:
hir
:
:
map
as
ast_map
;
use
rustc
:
:
hir
:
:
pat_util
:
:
pat_is_binding
;
use
rustc
:
:
lint
:
:
{
LateContext
LintPass
LintArray
LateLintPass
LintContext
}
;
use
rustc
:
:
ty
;
use
syntax
:
:
attr
:
:
AttrMetaMethods
;
use
syntax
:
:
{
ast
codemap
}
;
use
utils
:
:
{
match_def_path
in_derive_expn
}
;
declare_lint
!
(
UNROOTED_MUST_ROOT
Deny
"
Warn
and
report
usage
of
unrooted
jsmanaged
objects
"
)
;
pub
struct
UnrootedPass
;
impl
UnrootedPass
{
pub
fn
new
(
)
-
>
UnrootedPass
{
UnrootedPass
}
}
fn
is_unrooted_ty
(
cx
:
&
LateContext
ty
:
&
ty
:
:
TyS
in_new_function
:
bool
)
-
>
bool
{
let
mut
ret
=
false
;
ty
.
maybe_walk
(
|
t
|
{
match
t
.
sty
{
ty
:
:
TyStruct
(
did
_
)
|
ty
:
:
TyEnum
(
did
_
)
=
>
{
if
cx
.
tcx
.
has_attr
(
did
.
did
"
must_root
"
)
{
ret
=
true
;
false
}
else
if
cx
.
tcx
.
has_attr
(
did
.
did
"
allow_unrooted_interior
"
)
{
false
}
else
if
match_def_path
(
cx
did
.
did
&
[
"
core
"
"
cell
"
"
Ref
"
]
)
|
|
match_def_path
(
cx
did
.
did
&
[
"
core
"
"
cell
"
"
RefMut
"
]
)
|
|
match_def_path
(
cx
did
.
did
&
[
"
core
"
"
slice
"
"
Iter
"
]
)
|
|
match_def_path
(
cx
did
.
did
&
[
"
std
"
"
collections
"
"
hash
"
"
map
"
"
OccupiedEntry
"
]
)
|
|
match_def_path
(
cx
did
.
did
&
[
"
std
"
"
collections
"
"
hash
"
"
map
"
"
VacantEntry
"
]
)
{
false
}
else
{
true
}
}
ty
:
:
TyBox
(
.
.
)
if
in_new_function
=
>
false
ty
:
:
TyRef
(
.
.
)
=
>
false
ty
:
:
TyRawPtr
(
.
.
)
=
>
false
ty
:
:
TyFnDef
(
.
.
)
|
ty
:
:
TyFnPtr
(
_
)
=
>
false
_
=
>
true
}
}
)
;
ret
}
impl
LintPass
for
UnrootedPass
{
fn
get_lints
(
&
self
)
-
>
LintArray
{
lint_array
!
(
UNROOTED_MUST_ROOT
)
}
}
impl
LateLintPass
for
UnrootedPass
{
fn
check_struct_def
(
&
mut
self
cx
:
&
LateContext
def
:
&
hir
:
:
VariantData
_n
:
ast
:
:
Name
_gen
:
&
hir
:
:
Generics
id
:
ast
:
:
NodeId
)
{
let
item
=
match
cx
.
tcx
.
map
.
get
(
id
)
{
ast_map
:
:
Node
:
:
NodeItem
(
item
)
=
>
item
_
=
>
cx
.
tcx
.
map
.
expect_item
(
cx
.
tcx
.
map
.
get_parent
(
id
)
)
}
;
if
item
.
attrs
.
iter
(
)
.
all
(
|
a
|
!
a
.
check_name
(
"
must_root
"
)
)
{
for
ref
field
in
def
.
fields
(
)
{
if
is_unrooted_ty
(
cx
cx
.
tcx
.
node_id_to_type
(
field
.
id
)
false
)
{
cx
.
span_lint
(
UNROOTED_MUST_ROOT
field
.
span
"
Type
must
be
rooted
use
#
[
must_root
]
on
the
struct
definition
to
propagate
"
)
}
}
}
}
fn
check_variant
(
&
mut
self
cx
:
&
LateContext
var
:
&
hir
:
:
Variant
_gen
:
&
hir
:
:
Generics
)
{
let
ref
map
=
cx
.
tcx
.
map
;
if
map
.
expect_item
(
map
.
get_parent
(
var
.
node
.
data
.
id
(
)
)
)
.
attrs
.
iter
(
)
.
all
(
|
a
|
!
a
.
check_name
(
"
must_root
"
)
)
{
match
var
.
node
.
data
{
hir
:
:
VariantData
:
:
Tuple
(
ref
fields
_
)
=
>
{
for
ref
field
in
fields
{
if
is_unrooted_ty
(
cx
cx
.
tcx
.
node_id_to_type
(
field
.
id
)
false
)
{
cx
.
span_lint
(
UNROOTED_MUST_ROOT
field
.
ty
.
span
"
Type
must
be
rooted
use
#
[
must_root
]
on
\
the
enum
definition
to
propagate
"
)
}
}
}
_
=
>
(
)
}
}
}
fn
check_fn
(
&
mut
self
cx
:
&
LateContext
kind
:
visit
:
:
FnKind
decl
:
&
hir
:
:
FnDecl
block
:
&
hir
:
:
Block
span
:
codemap
:
:
Span
id
:
ast
:
:
NodeId
)
{
let
in_new_function
=
match
kind
{
visit
:
:
FnKind
:
:
ItemFn
(
n
_
_
_
_
_
_
)
|
visit
:
:
FnKind
:
:
Method
(
n
_
_
_
)
=
>
{
n
.
as_str
(
)
=
=
"
new
"
|
|
n
.
as_str
(
)
.
starts_with
(
"
new_
"
)
}
visit
:
:
FnKind
:
:
Closure
(
_
)
=
>
return
}
;
if
!
in_derive_expn
(
cx
span
)
{
let
ty
=
cx
.
tcx
.
node_id_to_type
(
id
)
;
for
(
arg
ty
)
in
decl
.
inputs
.
iter
(
)
.
zip
(
ty
.
fn_args
(
)
.
0
.
iter
(
)
)
{
if
is_unrooted_ty
(
cx
ty
false
)
{
cx
.
span_lint
(
UNROOTED_MUST_ROOT
arg
.
ty
.
span
"
Type
must
be
rooted
"
)
}
}
if
!
in_new_function
{
if
let
ty
:
:
FnOutput
:
:
FnConverging
(
ret
)
=
ty
.
fn_ret
(
)
.
0
{
if
is_unrooted_ty
(
cx
ret
false
)
{
cx
.
span_lint
(
UNROOTED_MUST_ROOT
decl
.
output
.
span
(
)
"
Type
must
be
rooted
"
)
}
}
}
}
let
mut
visitor
=
FnDefVisitor
{
cx
:
cx
in_new_function
:
in_new_function
}
;
visit
:
:
walk_block
(
&
mut
visitor
block
)
;
}
}
struct
FnDefVisitor
<
'
a
'
b
:
'
a
'
tcx
:
'
a
+
'
b
>
{
cx
:
&
'
a
LateContext
<
'
b
'
tcx
>
in_new_function
:
bool
}
impl
<
'
a
'
b
:
'
a
'
tcx
:
'
a
+
'
b
>
visit
:
:
Visitor
<
'
a
>
for
FnDefVisitor
<
'
a
'
b
'
tcx
>
{
fn
visit_expr
(
&
mut
self
expr
:
&
'
a
hir
:
:
Expr
)
{
let
cx
=
self
.
cx
;
fn
require_rooted
(
cx
:
&
LateContext
in_new_function
:
bool
subexpr
:
&
hir
:
:
Expr
)
{
let
ty
=
cx
.
tcx
.
expr_ty
(
&
*
subexpr
)
;
if
is_unrooted_ty
(
cx
ty
in_new_function
)
{
cx
.
span_lint
(
UNROOTED_MUST_ROOT
subexpr
.
span
&
format
!
(
"
Expression
of
type
{
:
?
}
must
be
rooted
"
ty
)
)
}
}
match
expr
.
node
{
hir
:
:
ExprCast
(
ref
subexpr
_
)
=
>
require_rooted
(
cx
self
.
in_new_function
&
*
subexpr
)
_
=
>
{
}
}
visit
:
:
walk_expr
(
self
expr
)
;
}
fn
visit_pat
(
&
mut
self
pat
:
&
'
a
hir
:
:
Pat
)
{
let
cx
=
self
.
cx
;
if
let
hir
:
:
PatKind
:
:
Ident
(
hir
:
:
BindingMode
:
:
BindByValue
(
_
)
_
_
)
=
pat
.
node
{
if
pat_is_binding
(
&
cx
.
tcx
.
def_map
.
borrow
(
)
pat
)
{
let
ty
=
cx
.
tcx
.
pat_ty
(
pat
)
;
if
is_unrooted_ty
(
cx
ty
self
.
in_new_function
)
{
cx
.
span_lint
(
UNROOTED_MUST_ROOT
pat
.
span
&
format
!
(
"
Expression
of
type
{
:
?
}
must
be
rooted
"
ty
)
)
}
}
}
visit
:
:
walk_pat
(
self
pat
)
;
}
fn
visit_fn
(
&
mut
self
kind
:
visit
:
:
FnKind
<
'
a
>
decl
:
&
'
a
hir
:
:
FnDecl
block
:
&
'
a
hir
:
:
Block
span
:
codemap
:
:
Span
_id
:
ast
:
:
NodeId
)
{
if
let
visit
:
:
FnKind
:
:
Closure
(
_
)
=
kind
{
visit
:
:
walk_fn
(
self
kind
decl
block
span
)
;
}
}
fn
visit_foreign_item
(
&
mut
self
_
:
&
'
a
hir
:
:
ForeignItem
)
{
}
fn
visit_ty
(
&
mut
self
_
:
&
'
a
hir
:
:
Ty
)
{
}
}
