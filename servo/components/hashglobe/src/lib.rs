extern
crate
heapsize
;
pub
mod
alloc
;
pub
mod
hash_map
;
pub
mod
hash_set
;
mod
shim
;
mod
table
;
pub
mod
fake
;
use
std
:
:
{
error
fmt
}
;
trait
Recover
<
Q
:
?
Sized
>
{
type
Key
;
fn
get
(
&
self
key
:
&
Q
)
-
>
Option
<
&
Self
:
:
Key
>
;
fn
take
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
Self
:
:
Key
>
;
fn
replace
(
&
mut
self
key
:
Self
:
:
Key
)
-
>
Option
<
Self
:
:
Key
>
;
}
#
[
derive
(
Debug
)
]
pub
struct
FailedAllocationError
{
reason
:
&
'
static
str
}
impl
FailedAllocationError
{
#
[
inline
]
pub
fn
new
(
reason
:
&
'
static
str
)
-
>
Self
{
Self
{
reason
}
}
}
impl
error
:
:
Error
for
FailedAllocationError
{
fn
description
(
&
self
)
-
>
&
str
{
self
.
reason
}
}
impl
fmt
:
:
Display
for
FailedAllocationError
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
self
.
reason
.
fmt
(
f
)
}
}
