#
!
[
feature
(
custom_derive
plugin
)
]
#
!
[
plugin
(
plugins
serde_macros
)
]
#
!
[
crate_name
=
"
gfx_traits
"
]
#
!
[
crate_type
=
"
rlib
"
]
extern
crate
azure
;
extern
crate
euclid
;
extern
crate
layers
;
extern
crate
msg
;
extern
crate
serde
;
extern
crate
util
;
pub
mod
color
;
mod
paint_listener
;
pub
use
paint_listener
:
:
PaintListener
;
use
azure
:
:
azure_hl
:
:
Color
;
use
euclid
:
:
matrix
:
:
Matrix4
;
use
euclid
:
:
rect
:
:
Rect
;
use
msg
:
:
constellation_msg
:
:
{
Failure
PipelineId
}
;
use
std
:
:
fmt
:
:
{
self
Debug
Formatter
}
;
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
PaintMsg
{
Failure
(
Failure
)
}
#
[
derive
(
Clone
Copy
Debug
PartialEq
)
]
pub
enum
LayerKind
{
NoTransform
HasTransform
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Deserialize
Serialize
HeapSizeOf
)
]
pub
enum
LayerType
{
FragmentBody
OverflowScroll
BeforePseudoContent
AfterPseudoContent
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
Deserialize
Serialize
Debug
HeapSizeOf
)
]
pub
enum
ScrollPolicy
{
Scrollable
FixedPosition
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
LayerId
(
LayerType
usize
usize
)
;
impl
Debug
for
LayerId
{
fn
fmt
(
&
self
f
:
&
mut
Formatter
)
-
>
fmt
:
:
Result
{
let
LayerId
(
layer_type
id
companion
)
=
*
self
;
let
type_string
=
match
layer_type
{
LayerType
:
:
FragmentBody
=
>
"
-
FragmentBody
"
LayerType
:
:
OverflowScroll
=
>
"
-
OverflowScroll
"
LayerType
:
:
BeforePseudoContent
=
>
"
-
BeforePseudoContent
"
LayerType
:
:
AfterPseudoContent
=
>
"
-
AfterPseudoContent
"
}
;
write
!
(
f
"
{
}
{
}
-
{
}
"
id
type_string
companion
)
}
}
impl
LayerId
{
pub
fn
null
(
)
-
>
LayerId
{
LayerId
(
LayerType
:
:
FragmentBody
0
0
)
}
pub
fn
new_of_type
(
layer_type
:
LayerType
fragment_id
:
usize
)
-
>
LayerId
{
LayerId
(
layer_type
fragment_id
0
)
}
pub
fn
companion_layer_id
(
&
self
)
-
>
LayerId
{
let
LayerId
(
layer_type
id
companion
)
=
*
self
;
LayerId
(
layer_type
id
companion
+
1
)
}
}
#
[
derive
(
Copy
Clone
)
]
pub
struct
LayerProperties
{
pub
id
:
LayerId
pub
parent_id
:
Option
<
LayerId
>
pub
rect
:
Rect
<
f32
>
pub
background_color
:
Color
pub
scroll_policy
:
ScrollPolicy
pub
transform
:
Matrix4
pub
perspective
:
Matrix4
pub
subpage_pipeline_id
:
Option
<
PipelineId
>
pub
establishes_3d_context
:
bool
pub
scrolls_overflow_area
:
bool
}
#
[
derive
(
PartialEq
Eq
Debug
Copy
Clone
PartialOrd
Ord
Deserialize
Serialize
)
]
pub
struct
Epoch
(
pub
u32
)
;
impl
Epoch
{
pub
fn
next
(
&
mut
self
)
{
let
Epoch
(
ref
mut
u
)
=
*
self
;
*
u
+
=
1
;
}
}
#
[
derive
(
PartialEq
Eq
Debug
Copy
Clone
)
]
pub
struct
FrameTreeId
(
pub
u32
)
;
impl
FrameTreeId
{
pub
fn
next
(
&
mut
self
)
{
let
FrameTreeId
(
ref
mut
u
)
=
*
self
;
*
u
+
=
1
;
}
}
