use
blob_url_store
:
:
{
BlobBuf
BlobURLStoreError
}
;
use
ipc_channel
:
:
ipc
:
:
IpcSender
;
use
num_traits
:
:
ToPrimitive
;
use
std
:
:
cmp
:
:
{
max
min
}
;
use
std
:
:
ops
:
:
Range
;
use
std
:
:
path
:
:
PathBuf
;
use
uuid
:
:
Uuid
;
pub
type
FileOrigin
=
String
;
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
RelativePos
{
pub
start
:
i64
pub
end
:
Option
<
i64
>
}
impl
RelativePos
{
pub
fn
full_range
(
)
-
>
RelativePos
{
RelativePos
{
start
:
0
end
:
None
}
}
pub
fn
from_opts
(
start
:
Option
<
i64
>
end
:
Option
<
i64
>
)
-
>
RelativePos
{
RelativePos
{
start
:
start
.
unwrap_or
(
0
)
end
:
end
}
}
pub
fn
slice_inner
(
&
self
rel_pos
:
&
RelativePos
)
-
>
RelativePos
{
RelativePos
{
start
:
self
.
start
+
rel_pos
.
start
end
:
match
(
self
.
end
rel_pos
.
end
)
{
(
Some
(
old_end
)
Some
(
rel_end
)
)
=
>
Some
(
old_end
+
rel_end
)
(
old
None
)
=
>
old
(
None
rel
)
=
>
rel
}
}
}
pub
fn
to_abs_range
(
&
self
size
:
usize
)
-
>
Range
<
usize
>
{
let
size
=
size
as
i64
;
let
start
=
{
if
self
.
start
<
0
{
max
(
size
+
self
.
start
0
)
}
else
{
min
(
self
.
start
size
)
}
}
;
let
end
=
match
self
.
end
{
Some
(
rel_end
)
=
>
{
if
rel_end
<
0
{
max
(
size
+
rel_end
0
)
}
else
{
min
(
rel_end
size
)
}
}
None
=
>
size
}
;
let
span
:
i64
=
max
(
end
-
start
0
)
;
Range
{
start
:
start
.
to_usize
(
)
.
unwrap
(
)
end
:
(
start
+
span
)
.
to_usize
(
)
.
unwrap
(
)
}
}
pub
fn
from_abs_range
(
range
:
Range
<
usize
>
size
:
usize
)
-
>
RelativePos
{
RelativePos
{
start
:
range
.
start
as
i64
end
:
Some
(
size
as
i64
-
range
.
end
as
i64
)
}
}
}
#
[
derive
(
Debug
Deserialize
Serialize
)
]
pub
struct
SelectedFile
{
pub
id
:
Uuid
pub
filename
:
PathBuf
pub
modified
:
u64
pub
size
:
u64
pub
type_string
:
String
}
#
[
derive
(
Clone
Debug
Deserialize
Serialize
)
]
pub
struct
FilterPattern
(
pub
String
)
;
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
FileManagerThreadMsg
{
SelectFile
(
Vec
<
FilterPattern
>
IpcSender
<
FileManagerResult
<
SelectedFile
>
>
FileOrigin
Option
<
String
>
)
SelectFiles
(
Vec
<
FilterPattern
>
IpcSender
<
FileManagerResult
<
Vec
<
SelectedFile
>
>
>
FileOrigin
Option
<
Vec
<
String
>
>
)
ReadFile
(
IpcSender
<
FileManagerResult
<
ReadFileProgress
>
>
Uuid
bool
FileOrigin
)
PromoteMemory
(
BlobBuf
bool
IpcSender
<
Result
<
Uuid
BlobURLStoreError
>
>
FileOrigin
)
AddSlicedURLEntry
(
Uuid
RelativePos
IpcSender
<
Result
<
Uuid
BlobURLStoreError
>
>
FileOrigin
)
DecRef
(
Uuid
FileOrigin
IpcSender
<
Result
<
(
)
BlobURLStoreError
>
>
)
ActivateBlobURL
(
Uuid
IpcSender
<
Result
<
(
)
BlobURLStoreError
>
>
FileOrigin
)
RevokeBlobURL
(
Uuid
FileOrigin
IpcSender
<
Result
<
(
)
BlobURLStoreError
>
>
)
}
#
[
derive
(
Debug
Deserialize
Serialize
)
]
pub
enum
ReadFileProgress
{
Meta
(
BlobBuf
)
Partial
(
Vec
<
u8
>
)
EOF
}
pub
type
FileManagerResult
<
T
>
=
Result
<
T
FileManagerThreadError
>
;
#
[
derive
(
Debug
Deserialize
Serialize
)
]
pub
enum
FileManagerThreadError
{
InvalidSelection
UserCancelled
FileSystemError
(
String
)
BlobURLStoreError
(
BlobURLStoreError
)
}
