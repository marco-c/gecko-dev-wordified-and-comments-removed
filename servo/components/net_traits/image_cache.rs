use
FetchResponseMsg
;
use
image
:
:
base
:
:
{
Image
ImageMetadata
}
;
use
ipc_channel
:
:
ipc
:
:
IpcSender
;
use
servo_url
:
:
ServoUrl
;
use
std
:
:
sync
:
:
Arc
;
use
webrender_api
;
#
[
derive
(
Clone
Copy
Deserialize
PartialEq
Serialize
)
]
pub
enum
CanRequestImages
{
No
Yes
}
#
[
derive
(
Clone
Deserialize
HeapSizeOf
Serialize
)
]
pub
enum
ImageOrMetadataAvailable
{
ImageAvailable
(
Arc
<
Image
>
ServoUrl
)
MetadataAvailable
(
ImageMetadata
)
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
ImageResponder
{
id
:
PendingImageId
sender
:
IpcSender
<
PendingImageResponse
>
}
impl
ImageResponder
{
pub
fn
new
(
sender
:
IpcSender
<
PendingImageResponse
>
id
:
PendingImageId
)
-
>
ImageResponder
{
ImageResponder
{
sender
:
sender
id
:
id
}
}
pub
fn
respond
(
&
self
response
:
ImageResponse
)
{
debug
!
(
"
Notifying
listener
"
)
;
let
_
=
self
.
sender
.
send
(
PendingImageResponse
{
response
:
response
id
:
self
.
id
}
)
;
}
}
#
[
derive
(
Clone
Debug
Deserialize
HeapSizeOf
Serialize
)
]
pub
enum
ImageResponse
{
Loaded
(
Arc
<
Image
>
ServoUrl
)
MetadataLoaded
(
ImageMetadata
)
PlaceholderLoaded
(
Arc
<
Image
>
ServoUrl
)
None
}
#
[
derive
(
Clone
Copy
Deserialize
PartialEq
Serialize
)
]
pub
enum
ImageState
{
Pending
(
PendingImageId
)
LoadError
NotRequested
(
PendingImageId
)
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
Eq
Hash
HeapSizeOf
PartialEq
Serialize
)
]
pub
struct
PendingImageId
(
pub
u64
)
;
#
[
derive
(
Debug
Deserialize
Serialize
)
]
pub
struct
PendingImageResponse
{
pub
response
:
ImageResponse
pub
id
:
PendingImageId
}
#
[
derive
(
Clone
Copy
Deserialize
Eq
Hash
PartialEq
Serialize
)
]
pub
enum
UsePlaceholder
{
No
Yes
}
pub
trait
ImageCache
:
Sync
+
Send
{
fn
new
(
webrender_api
:
webrender_api
:
:
RenderApi
)
-
>
Self
where
Self
:
Sized
;
fn
find_image_or_metadata
(
&
self
url
:
ServoUrl
use_placeholder
:
UsePlaceholder
can_request
:
CanRequestImages
)
-
>
Result
<
ImageOrMetadataAvailable
ImageState
>
;
fn
add_listener
(
&
self
id
:
PendingImageId
listener
:
ImageResponder
)
;
fn
notify_pending_response
(
&
self
id
:
PendingImageId
action
:
FetchResponseMsg
)
;
fn
set_webrender_image_key
(
&
self
image
:
&
mut
Image
)
;
}
