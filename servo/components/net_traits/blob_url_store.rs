use
std
:
:
str
:
:
FromStr
;
use
url
:
:
Url
;
use
uuid
:
:
Uuid
;
#
[
derive
(
Clone
Serialize
Deserialize
)
]
pub
enum
BlobURLStoreError
{
InvalidKey
InvalidOrigin
}
#
[
derive
(
Clone
Serialize
Deserialize
)
]
pub
struct
BlobURLStoreEntry
{
pub
type_string
:
String
pub
filename
:
Option
<
String
>
pub
size
:
u64
pub
bytes
:
Vec
<
u8
>
}
pub
fn
parse_blob_url
(
url
:
&
Url
)
-
>
Option
<
(
Uuid
Option
<
&
str
>
)
>
{
url
.
path_segments
(
)
.
and_then
(
|
mut
segments
|
{
let
id_str
=
match
(
segments
.
next
(
)
segments
.
next
(
)
)
{
(
Some
(
s
)
None
)
=
>
s
_
=
>
return
None
}
;
Uuid
:
:
from_str
(
id_str
)
.
map
(
|
id
|
(
id
url
.
fragment
(
)
)
)
.
ok
(
)
}
)
}
