use
image
:
:
base
:
:
Image
;
use
{
ControlMsg
LoadData
ProgressMsg
ResourceTask
}
;
use
url
:
:
Url
;
use
std
:
:
sync
:
:
Arc
;
use
std
:
:
sync
:
:
mpsc
:
:
{
channel
Sender
}
;
pub
enum
Msg
{
Prefetch
(
Url
)
Decode
(
Url
)
GetImage
(
Url
Sender
<
ImageResponseMsg
>
)
WaitForImage
(
Url
Sender
<
ImageResponseMsg
>
)
Exit
(
Sender
<
(
)
>
)
StorePrefetchedImageData
(
Url
Result
<
Vec
<
u8
>
(
)
>
)
StoreImage
(
Url
Option
<
Arc
<
Box
<
Image
>
>
>
)
WaitForStore
(
Sender
<
(
)
>
)
WaitForStorePrefetched
(
Sender
<
(
)
>
)
}
#
[
derive
(
Clone
)
]
pub
enum
ImageResponseMsg
{
ImageReady
(
Arc
<
Box
<
Image
>
>
)
ImageNotReady
ImageFailed
}
impl
PartialEq
for
ImageResponseMsg
{
fn
eq
(
&
self
other
:
&
ImageResponseMsg
)
-
>
bool
{
match
(
self
other
)
{
(
&
ImageResponseMsg
:
:
ImageReady
(
.
.
)
&
ImageResponseMsg
:
:
ImageReady
(
.
.
)
)
=
>
panic
!
(
"
unimplemented
comparison
"
)
(
&
ImageResponseMsg
:
:
ImageNotReady
&
ImageResponseMsg
:
:
ImageNotReady
)
=
>
true
(
&
ImageResponseMsg
:
:
ImageFailed
&
ImageResponseMsg
:
:
ImageFailed
)
=
>
true
(
&
ImageResponseMsg
:
:
ImageReady
(
.
.
)
_
)
|
(
&
ImageResponseMsg
:
:
ImageNotReady
_
)
|
(
&
ImageResponseMsg
:
:
ImageFailed
_
)
=
>
false
}
}
}
#
[
derive
(
Clone
)
]
pub
struct
ImageCacheTask
{
pub
chan
:
Sender
<
Msg
>
}
impl
ImageCacheTask
{
pub
fn
send
(
&
self
msg
:
Msg
)
{
self
.
chan
.
send
(
msg
)
.
unwrap
(
)
;
}
}
pub
trait
ImageCacheTaskClient
{
fn
exit
(
&
self
)
;
}
impl
ImageCacheTaskClient
for
ImageCacheTask
{
fn
exit
(
&
self
)
{
let
(
response_chan
response_port
)
=
channel
(
)
;
self
.
send
(
Msg
:
:
Exit
(
response_chan
)
)
;
response_port
.
recv
(
)
.
unwrap
(
)
;
}
}
pub
fn
load_image_data
(
url
:
Url
resource_task
:
ResourceTask
placeholder
:
&
[
u8
]
)
-
>
Result
<
Vec
<
u8
>
(
)
>
{
let
(
response_chan
response_port
)
=
channel
(
)
;
resource_task
.
send
(
ControlMsg
:
:
Load
(
LoadData
:
:
new
(
url
.
clone
(
)
response_chan
)
)
)
.
unwrap
(
)
;
let
mut
image_data
=
vec
!
(
)
;
let
progress_port
=
response_port
.
recv
(
)
.
unwrap
(
)
.
progress_port
;
loop
{
match
progress_port
.
recv
(
)
.
unwrap
(
)
{
ProgressMsg
:
:
Payload
(
data
)
=
>
{
image_data
.
push_all
(
&
data
)
;
}
ProgressMsg
:
:
Done
(
Ok
(
.
.
)
)
=
>
{
return
Ok
(
image_data
)
;
}
ProgressMsg
:
:
Done
(
Err
(
.
.
)
)
=
>
{
if
placeholder
.
len
(
)
!
=
0
{
debug
!
(
"
image_cache_task
:
failed
to
load
{
:
?
}
use
placeholder
instead
.
"
url
)
;
image_data
.
clear
(
)
;
image_data
.
push_all
(
&
placeholder
)
;
return
Ok
(
image_data
)
;
}
else
{
debug
!
(
"
image_cache_task
:
invalid
placeholder
.
"
)
;
return
Err
(
(
)
)
;
}
}
}
}
}
