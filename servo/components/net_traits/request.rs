use
ReferrerPolicy
;
use
hyper
:
:
header
:
:
Headers
;
use
hyper
:
:
method
:
:
Method
;
use
msg
:
:
constellation_msg
:
:
PipelineId
;
use
servo_url
:
:
{
ImmutableOrigin
ServoUrl
}
;
use
std
:
:
default
:
:
Default
;
#
[
derive
(
Copy
Clone
PartialEq
HeapSizeOf
)
]
pub
enum
Initiator
{
None
Download
ImageSet
Manifest
XSLT
}
#
[
derive
(
Copy
Clone
PartialEq
Serialize
Deserialize
HeapSizeOf
)
]
pub
enum
Type
{
None
Audio
Font
Image
Script
Style
Track
Video
}
#
[
derive
(
Copy
Clone
PartialEq
Serialize
Deserialize
HeapSizeOf
)
]
pub
enum
Destination
{
None
Document
Embed
Font
Image
Manifest
Media
Object
Report
Script
ServiceWorker
SharedWorker
Style
Worker
XSLT
}
#
[
derive
(
Clone
PartialEq
Debug
Serialize
Deserialize
HeapSizeOf
)
]
pub
enum
Origin
{
Client
Origin
(
ImmutableOrigin
)
}
#
[
derive
(
Clone
PartialEq
HeapSizeOf
)
]
pub
enum
Referrer
{
NoReferrer
Client
ReferrerUrl
(
ServoUrl
)
}
#
[
derive
(
Copy
Clone
PartialEq
Serialize
Deserialize
HeapSizeOf
)
]
pub
enum
RequestMode
{
Navigate
SameOrigin
NoCors
CorsMode
WebSocket
}
#
[
derive
(
Copy
Clone
PartialEq
Serialize
Deserialize
HeapSizeOf
)
]
pub
enum
CredentialsMode
{
Omit
CredentialsSameOrigin
Include
}
#
[
derive
(
Copy
Clone
PartialEq
Serialize
Deserialize
HeapSizeOf
)
]
pub
enum
CacheMode
{
Default
NoStore
Reload
NoCache
ForceCache
OnlyIfCached
}
#
[
derive
(
Copy
Clone
PartialEq
Serialize
Deserialize
HeapSizeOf
)
]
pub
enum
RedirectMode
{
Follow
Error
Manual
}
#
[
derive
(
Copy
Clone
PartialEq
HeapSizeOf
)
]
pub
enum
ResponseTainting
{
Basic
CorsTainting
Opaque
}
#
[
derive
(
Copy
Clone
PartialEq
HeapSizeOf
)
]
pub
enum
Window
{
NoWindow
Client
}
#
[
derive
(
Copy
Clone
PartialEq
Serialize
Deserialize
)
]
pub
enum
CorsSettings
{
Anonymous
UseCredentials
}
#
[
derive
(
Serialize
Deserialize
Clone
HeapSizeOf
)
]
pub
struct
RequestInit
{
#
[
serde
(
deserialize_with
=
"
:
:
hyper_serde
:
:
deserialize
"
serialize_with
=
"
:
:
hyper_serde
:
:
serialize
"
)
]
#
[
ignore_heap_size_of
=
"
Defined
in
hyper
"
]
pub
method
:
Method
pub
url
:
ServoUrl
#
[
serde
(
deserialize_with
=
"
:
:
hyper_serde
:
:
deserialize
"
serialize_with
=
"
:
:
hyper_serde
:
:
serialize
"
)
]
#
[
ignore_heap_size_of
=
"
Defined
in
hyper
"
]
pub
headers
:
Headers
pub
unsafe_request
:
bool
pub
body
:
Option
<
Vec
<
u8
>
>
pub
type_
:
Type
pub
destination
:
Destination
pub
synchronous
:
bool
pub
mode
:
RequestMode
pub
cache_mode
:
CacheMode
pub
use_cors_preflight
:
bool
pub
credentials_mode
:
CredentialsMode
pub
use_url_credentials
:
bool
pub
origin
:
ServoUrl
pub
referrer_url
:
Option
<
ServoUrl
>
pub
referrer_policy
:
Option
<
ReferrerPolicy
>
pub
pipeline_id
:
Option
<
PipelineId
>
pub
redirect_mode
:
RedirectMode
pub
integrity_metadata
:
String
}
impl
Default
for
RequestInit
{
fn
default
(
)
-
>
RequestInit
{
RequestInit
{
method
:
Method
:
:
Get
url
:
ServoUrl
:
:
parse
(
"
about
:
blank
"
)
.
unwrap
(
)
headers
:
Headers
:
:
new
(
)
unsafe_request
:
false
body
:
None
type_
:
Type
:
:
None
destination
:
Destination
:
:
None
synchronous
:
false
mode
:
RequestMode
:
:
NoCors
cache_mode
:
CacheMode
:
:
Default
use_cors_preflight
:
false
credentials_mode
:
CredentialsMode
:
:
Omit
use_url_credentials
:
false
origin
:
ServoUrl
:
:
parse
(
"
about
:
blank
"
)
.
unwrap
(
)
referrer_url
:
None
referrer_policy
:
None
pipeline_id
:
None
redirect_mode
:
RedirectMode
:
:
Follow
integrity_metadata
:
"
"
.
to_owned
(
)
}
}
}
#
[
derive
(
Clone
HeapSizeOf
)
]
pub
struct
Request
{
#
[
ignore_heap_size_of
=
"
Defined
in
hyper
"
]
pub
method
:
Method
pub
local_urls_only
:
bool
pub
sandboxed_storage_area_urls
:
bool
#
[
ignore_heap_size_of
=
"
Defined
in
hyper
"
]
pub
headers
:
Headers
pub
unsafe_request
:
bool
pub
body
:
Option
<
Vec
<
u8
>
>
pub
is_service_worker_global_scope
:
bool
pub
window
:
Window
pub
keep_alive
:
bool
pub
skip_service_worker
:
bool
pub
initiator
:
Initiator
pub
type_
:
Type
pub
destination
:
Destination
pub
origin
:
Origin
pub
referrer
:
Referrer
pub
referrer_policy
:
Option
<
ReferrerPolicy
>
pub
pipeline_id
:
Option
<
PipelineId
>
pub
synchronous
:
bool
pub
mode
:
RequestMode
pub
use_cors_preflight
:
bool
pub
credentials_mode
:
CredentialsMode
pub
use_url_credentials
:
bool
pub
cache_mode
:
CacheMode
pub
redirect_mode
:
RedirectMode
pub
integrity_metadata
:
String
pub
url_list
:
Vec
<
ServoUrl
>
pub
redirect_count
:
u32
pub
response_tainting
:
ResponseTainting
}
impl
Request
{
pub
fn
new
(
url
:
ServoUrl
origin
:
Option
<
Origin
>
is_service_worker_global_scope
:
bool
pipeline_id
:
Option
<
PipelineId
>
)
-
>
Request
{
Request
{
method
:
Method
:
:
Get
local_urls_only
:
false
sandboxed_storage_area_urls
:
false
headers
:
Headers
:
:
new
(
)
unsafe_request
:
false
body
:
None
is_service_worker_global_scope
:
is_service_worker_global_scope
window
:
Window
:
:
Client
keep_alive
:
false
skip_service_worker
:
false
initiator
:
Initiator
:
:
None
type_
:
Type
:
:
None
destination
:
Destination
:
:
None
origin
:
origin
.
unwrap_or
(
Origin
:
:
Client
)
referrer
:
Referrer
:
:
Client
referrer_policy
:
None
pipeline_id
:
pipeline_id
synchronous
:
false
mode
:
RequestMode
:
:
NoCors
use_cors_preflight
:
false
credentials_mode
:
CredentialsMode
:
:
Omit
use_url_credentials
:
false
cache_mode
:
CacheMode
:
:
Default
redirect_mode
:
RedirectMode
:
:
Follow
integrity_metadata
:
String
:
:
new
(
)
url_list
:
vec
!
[
url
]
redirect_count
:
0
response_tainting
:
ResponseTainting
:
:
Basic
}
}
pub
fn
from_init
(
init
:
RequestInit
)
-
>
Request
{
let
mut
req
=
Request
:
:
new
(
init
.
url
Some
(
Origin
:
:
Origin
(
init
.
origin
.
origin
(
)
)
)
false
init
.
pipeline_id
)
;
req
.
method
=
init
.
method
;
req
.
headers
=
init
.
headers
;
req
.
unsafe_request
=
init
.
unsafe_request
;
req
.
body
=
init
.
body
;
req
.
type_
=
init
.
type_
;
req
.
destination
=
init
.
destination
;
req
.
synchronous
=
init
.
synchronous
;
req
.
mode
=
init
.
mode
;
req
.
use_cors_preflight
=
init
.
use_cors_preflight
;
req
.
credentials_mode
=
init
.
credentials_mode
;
req
.
use_url_credentials
=
init
.
use_url_credentials
;
req
.
cache_mode
=
init
.
cache_mode
;
req
.
referrer
=
if
let
Some
(
url
)
=
init
.
referrer_url
{
Referrer
:
:
ReferrerUrl
(
url
)
}
else
{
Referrer
:
:
NoReferrer
}
;
req
.
referrer_policy
=
init
.
referrer_policy
;
req
.
pipeline_id
=
init
.
pipeline_id
;
req
.
redirect_mode
=
init
.
redirect_mode
;
req
.
integrity_metadata
=
init
.
integrity_metadata
;
req
}
pub
fn
url
(
&
self
)
-
>
ServoUrl
{
self
.
url_list
.
first
(
)
.
unwrap
(
)
.
clone
(
)
}
pub
fn
current_url
(
&
self
)
-
>
ServoUrl
{
self
.
url_list
.
last
(
)
.
unwrap
(
)
.
clone
(
)
}
pub
fn
current_url_mut
(
&
mut
self
)
-
>
&
mut
ServoUrl
{
self
.
url_list
.
last_mut
(
)
.
unwrap
(
)
}
pub
fn
is_navigation_request
(
&
self
)
-
>
bool
{
self
.
destination
=
=
Destination
:
:
Document
}
pub
fn
is_subresource_request
(
&
self
)
-
>
bool
{
match
self
.
destination
{
Destination
:
:
Font
|
Destination
:
:
Image
|
Destination
:
:
Manifest
|
Destination
:
:
Media
|
Destination
:
:
Script
|
Destination
:
:
Style
|
Destination
:
:
XSLT
|
Destination
:
:
None
=
>
true
_
=
>
false
}
}
}
impl
Referrer
{
pub
fn
to_url
(
&
self
)
-
>
Option
<
&
ServoUrl
>
{
match
*
self
{
Referrer
:
:
NoReferrer
|
Referrer
:
:
Client
=
>
None
Referrer
:
:
ReferrerUrl
(
ref
url
)
=
>
Some
(
url
)
}
}
}
