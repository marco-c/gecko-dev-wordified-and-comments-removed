use
hyper
:
:
header
:
:
Headers
;
use
hyper
:
:
method
:
:
Method
;
use
std
:
:
cell
:
:
{
Cell
RefCell
}
;
use
url
:
:
{
Origin
as
UrlOrigin
Url
}
;
#
[
derive
(
Copy
Clone
PartialEq
)
]
pub
enum
Initiator
{
None
Download
ImageSet
Manifest
XSLT
}
#
[
derive
(
Copy
Clone
PartialEq
)
]
pub
enum
Type
{
None
Audio
Font
Image
Script
Style
Track
Video
}
#
[
derive
(
Copy
Clone
PartialEq
)
]
pub
enum
Destination
{
None
Document
Embed
Font
Image
Manifest
Media
Object
Report
Script
ServiceWorker
SharedWorker
Style
Worker
XSLT
}
#
[
derive
(
Clone
PartialEq
)
]
pub
enum
Origin
{
Client
Origin
(
UrlOrigin
)
}
#
[
derive
(
Clone
PartialEq
)
]
pub
enum
Referer
{
NoReferer
Client
RefererUrl
(
Url
)
}
#
[
derive
(
Copy
Clone
PartialEq
)
]
pub
enum
RequestMode
{
Navigate
SameOrigin
NoCORS
CORSMode
}
#
[
derive
(
Copy
Clone
PartialEq
)
]
pub
enum
CredentialsMode
{
Omit
CredentialsSameOrigin
Include
}
#
[
derive
(
Copy
Clone
PartialEq
)
]
pub
enum
CacheMode
{
Default
NoStore
Reload
NoCache
ForceCache
OnlyIfCached
}
#
[
derive
(
Copy
Clone
PartialEq
)
]
pub
enum
RedirectMode
{
Follow
Error
Manual
}
#
[
derive
(
Copy
Clone
PartialEq
)
]
pub
enum
ResponseTainting
{
Basic
CORSTainting
Opaque
}
#
[
derive
(
Copy
Clone
PartialEq
)
]
pub
enum
Window
{
NoWindow
Client
}
#
[
derive
(
Copy
Clone
PartialEq
)
]
pub
enum
CORSSettings
{
Anonymous
UseCredentials
}
#
[
derive
(
Clone
)
]
pub
struct
Request
{
pub
method
:
RefCell
<
Method
>
pub
local_urls_only
:
bool
pub
sanboxed_storage_area_urls
:
bool
pub
headers
:
RefCell
<
Headers
>
pub
unsafe_request
:
bool
pub
body
:
RefCell
<
Option
<
Vec
<
u8
>
>
>
pub
is_service_worker_global_scope
:
bool
pub
window
:
Cell
<
Window
>
pub
keep_alive
:
Cell
<
bool
>
pub
skip_service_worker
:
Cell
<
bool
>
pub
initiator
:
Initiator
pub
type_
:
Type
pub
destination
:
Destination
pub
origin
:
RefCell
<
Origin
>
pub
omit_origin_header
:
Cell
<
bool
>
pub
same_origin_data
:
Cell
<
bool
>
pub
referer
:
Referer
pub
synchronous
:
bool
pub
mode
:
RequestMode
pub
use_cors_preflight
:
bool
pub
credentials_mode
:
CredentialsMode
pub
use_url_credentials
:
bool
pub
cache_mode
:
Cell
<
CacheMode
>
pub
redirect_mode
:
Cell
<
RedirectMode
>
pub
integrity_metadata
:
RefCell
<
String
>
pub
url_list
:
RefCell
<
Vec
<
Url
>
>
pub
redirect_count
:
Cell
<
u32
>
pub
response_tainting
:
Cell
<
ResponseTainting
>
pub
done
:
Cell
<
bool
>
}
impl
Request
{
pub
fn
new
(
url
:
Url
origin
:
Option
<
Origin
>
is_service_worker_global_scope
:
bool
)
-
>
Request
{
Request
{
method
:
RefCell
:
:
new
(
Method
:
:
Get
)
local_urls_only
:
false
sanboxed_storage_area_urls
:
false
headers
:
RefCell
:
:
new
(
Headers
:
:
new
(
)
)
unsafe_request
:
false
body
:
RefCell
:
:
new
(
None
)
is_service_worker_global_scope
:
is_service_worker_global_scope
window
:
Cell
:
:
new
(
Window
:
:
Client
)
keep_alive
:
Cell
:
:
new
(
false
)
skip_service_worker
:
Cell
:
:
new
(
false
)
initiator
:
Initiator
:
:
None
type_
:
Type
:
:
None
destination
:
Destination
:
:
None
origin
:
RefCell
:
:
new
(
origin
.
unwrap_or
(
Origin
:
:
Client
)
)
omit_origin_header
:
Cell
:
:
new
(
false
)
same_origin_data
:
Cell
:
:
new
(
false
)
referer
:
Referer
:
:
Client
synchronous
:
false
mode
:
RequestMode
:
:
NoCORS
use_cors_preflight
:
false
credentials_mode
:
CredentialsMode
:
:
Omit
use_url_credentials
:
false
cache_mode
:
Cell
:
:
new
(
CacheMode
:
:
Default
)
redirect_mode
:
Cell
:
:
new
(
RedirectMode
:
:
Follow
)
integrity_metadata
:
RefCell
:
:
new
(
String
:
:
new
(
)
)
url_list
:
RefCell
:
:
new
(
vec
!
[
url
]
)
redirect_count
:
Cell
:
:
new
(
0
)
response_tainting
:
Cell
:
:
new
(
ResponseTainting
:
:
Basic
)
done
:
Cell
:
:
new
(
false
)
}
}
pub
fn
potential_cors_request
(
url
:
Url
cors_attribute_state
:
Option
<
CORSSettings
>
is_service_worker_global_scope
:
bool
same_origin_fallback
:
bool
)
-
>
Request
{
Request
{
method
:
RefCell
:
:
new
(
Method
:
:
Get
)
local_urls_only
:
false
sanboxed_storage_area_urls
:
false
headers
:
RefCell
:
:
new
(
Headers
:
:
new
(
)
)
unsafe_request
:
false
body
:
RefCell
:
:
new
(
None
)
is_service_worker_global_scope
:
is_service_worker_global_scope
window
:
Cell
:
:
new
(
Window
:
:
Client
)
keep_alive
:
Cell
:
:
new
(
false
)
skip_service_worker
:
Cell
:
:
new
(
false
)
initiator
:
Initiator
:
:
None
type_
:
Type
:
:
None
destination
:
Destination
:
:
None
origin
:
RefCell
:
:
new
(
Origin
:
:
Client
)
omit_origin_header
:
Cell
:
:
new
(
false
)
same_origin_data
:
Cell
:
:
new
(
false
)
referer
:
Referer
:
:
Client
synchronous
:
false
mode
:
match
cors_attribute_state
{
Some
(
_
)
=
>
RequestMode
:
:
CORSMode
None
if
same_origin_fallback
=
>
RequestMode
:
:
SameOrigin
None
=
>
RequestMode
:
:
NoCORS
}
use_cors_preflight
:
false
credentials_mode
:
match
cors_attribute_state
{
Some
(
CORSSettings
:
:
Anonymous
)
=
>
CredentialsMode
:
:
CredentialsSameOrigin
_
=
>
CredentialsMode
:
:
Include
}
use_url_credentials
:
true
cache_mode
:
Cell
:
:
new
(
CacheMode
:
:
Default
)
redirect_mode
:
Cell
:
:
new
(
RedirectMode
:
:
Follow
)
integrity_metadata
:
RefCell
:
:
new
(
String
:
:
new
(
)
)
url_list
:
RefCell
:
:
new
(
vec
!
[
url
]
)
redirect_count
:
Cell
:
:
new
(
0
)
response_tainting
:
Cell
:
:
new
(
ResponseTainting
:
:
Basic
)
done
:
Cell
:
:
new
(
false
)
}
}
pub
fn
url
(
&
self
)
-
>
Url
{
self
.
url_list
.
borrow
(
)
.
first
(
)
.
unwrap
(
)
.
clone
(
)
}
pub
fn
current_url
(
&
self
)
-
>
Url
{
self
.
url_list
.
borrow
(
)
.
last
(
)
.
unwrap
(
)
.
clone
(
)
}
pub
fn
current_url_string
(
&
self
)
-
>
String
{
self
.
url_list
.
borrow
(
)
.
last
(
)
.
unwrap
(
)
.
serialize
(
)
}
pub
fn
is_navigation_request
(
&
self
)
-
>
bool
{
self
.
destination
=
=
Destination
:
:
Document
}
pub
fn
is_subresource_request
(
&
self
)
-
>
bool
{
match
self
.
destination
{
Destination
:
:
Font
|
Destination
:
:
Image
|
Destination
:
:
Manifest
|
Destination
:
:
Media
|
Destination
:
:
Script
|
Destination
:
:
Style
|
Destination
:
:
XSLT
|
Destination
:
:
None
=
>
true
_
=
>
false
}
}
}
