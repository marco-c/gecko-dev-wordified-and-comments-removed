#
!
[
feature
(
box_syntax
)
]
#
!
[
feature
(
collections
)
]
#
!
[
feature
(
core
)
]
#
!
[
feature
(
rustc_private
)
]
#
!
[
feature
(
std_misc
)
]
extern
crate
geom
;
extern
crate
hyper
;
#
[
macro_use
]
extern
crate
log
;
extern
crate
png
;
extern
crate
profile
;
extern
crate
stb_image
;
extern
crate
url
;
extern
crate
util
;
use
hyper
:
:
header
:
:
{
ContentType
Headers
}
;
use
hyper
:
:
http
:
:
RawStatus
;
use
hyper
:
:
method
:
:
Method
;
use
hyper
:
:
mime
:
:
{
Mime
Attr
}
;
use
url
:
:
Url
;
use
std
:
:
borrow
:
:
IntoCow
;
use
std
:
:
sync
:
:
mpsc
:
:
{
channel
Receiver
Sender
}
;
pub
mod
image_cache_task
;
pub
mod
local_image_cache
;
pub
mod
storage_task
;
pub
mod
image
{
pub
mod
base
;
pub
mod
holder
;
}
#
[
derive
(
Clone
)
]
pub
struct
LoadData
{
pub
url
:
Url
pub
method
:
Method
pub
headers
:
Headers
pub
preserved_headers
:
Headers
pub
data
:
Option
<
Vec
<
u8
>
>
pub
cors
:
Option
<
ResourceCORSData
>
}
impl
LoadData
{
pub
fn
new
(
url
:
Url
)
-
>
LoadData
{
LoadData
{
url
:
url
method
:
Method
:
:
Get
headers
:
Headers
:
:
new
(
)
preserved_headers
:
Headers
:
:
new
(
)
data
:
None
cors
:
None
}
}
}
pub
trait
AsyncResponseListener
{
fn
headers_available
(
&
self
metadata
:
Metadata
)
;
fn
data_available
(
&
self
payload
:
Vec
<
u8
>
)
;
fn
response_complete
(
&
self
status
:
Result
<
(
)
String
>
)
;
}
pub
enum
ResponseAction
{
HeadersAvailable
(
Metadata
)
DataAvailable
(
Vec
<
u8
>
)
ResponseComplete
(
Result
<
(
)
String
>
)
}
impl
ResponseAction
{
pub
fn
process
(
self
listener
:
&
AsyncResponseListener
)
{
match
self
{
ResponseAction
:
:
HeadersAvailable
(
m
)
=
>
listener
.
headers_available
(
m
)
ResponseAction
:
:
DataAvailable
(
d
)
=
>
listener
.
data_available
(
d
)
ResponseAction
:
:
ResponseComplete
(
r
)
=
>
listener
.
response_complete
(
r
)
}
}
}
pub
trait
AsyncResponseTarget
{
fn
invoke_with_listener
(
&
self
action
:
ResponseAction
)
;
}
pub
enum
LoadConsumer
{
Channel
(
Sender
<
LoadResponse
>
)
Listener
(
Box
<
AsyncResponseTarget
+
Send
>
)
}
pub
type
ResourceTask
=
Sender
<
ControlMsg
>
;
pub
enum
ControlMsg
{
Load
(
LoadData
LoadConsumer
)
SetCookiesForUrl
(
Url
String
CookieSource
)
GetCookiesForUrl
(
Url
Sender
<
Option
<
String
>
>
CookieSource
)
Exit
}
pub
struct
LoadResponse
{
pub
metadata
:
Metadata
pub
progress_port
:
Receiver
<
ProgressMsg
>
}
#
[
derive
(
Clone
)
]
pub
struct
ResourceCORSData
{
pub
preflight
:
bool
pub
origin
:
Url
}
#
[
derive
(
Clone
)
]
pub
struct
Metadata
{
pub
final_url
:
Url
pub
content_type
:
Option
<
(
ContentType
)
>
pub
charset
:
Option
<
String
>
pub
headers
:
Option
<
Headers
>
pub
status
:
Option
<
RawStatus
>
}
impl
Metadata
{
pub
fn
default
(
url
:
Url
)
-
>
Self
{
Metadata
{
final_url
:
url
content_type
:
None
charset
:
None
headers
:
None
status
:
Some
(
RawStatus
(
200
"
OK
"
.
into_cow
(
)
)
)
}
}
pub
fn
set_content_type
(
&
mut
self
content_type
:
Option
<
&
Mime
>
)
{
match
content_type
{
None
=
>
(
)
Some
(
mime
)
=
>
{
self
.
content_type
=
Some
(
ContentType
(
mime
.
clone
(
)
)
)
;
let
&
Mime
(
_
_
ref
parameters
)
=
mime
;
for
&
(
ref
k
ref
v
)
in
parameters
.
iter
(
)
{
if
&
Attr
:
:
Charset
=
=
k
{
self
.
charset
=
Some
(
v
.
to_string
(
)
)
;
}
}
}
}
}
}
#
[
derive
(
PartialEq
Copy
)
]
pub
enum
CookieSource
{
HTTP
NonHTTP
}
pub
enum
ResponseSenders
{
Channel
(
Sender
<
LoadResponse
>
)
Listener
(
Box
<
AsyncResponseTarget
+
Send
>
)
}
impl
ResponseSenders
{
pub
fn
from_consumer
(
consumer
:
LoadConsumer
)
-
>
ResponseSenders
{
match
consumer
{
LoadConsumer
:
:
Channel
(
c
)
=
>
ResponseSenders
:
:
Channel
(
c
)
LoadConsumer
:
:
Listener
(
l
)
=
>
ResponseSenders
:
:
Listener
(
l
)
}
}
}
#
[
derive
(
PartialEq
Debug
)
]
pub
enum
ProgressMsg
{
Payload
(
Vec
<
u8
>
)
Done
(
Result
<
(
)
String
>
)
}
pub
fn
load_whole_resource
(
resource_task
:
&
ResourceTask
url
:
Url
)
-
>
Result
<
(
Metadata
Vec
<
u8
>
)
String
>
{
let
(
start_chan
start_port
)
=
channel
(
)
;
resource_task
.
send
(
ControlMsg
:
:
Load
(
LoadData
:
:
new
(
url
)
LoadConsumer
:
:
Channel
(
start_chan
)
)
)
.
unwrap
(
)
;
let
response
=
start_port
.
recv
(
)
.
unwrap
(
)
;
let
mut
buf
=
vec
!
(
)
;
loop
{
match
response
.
progress_port
.
recv
(
)
.
unwrap
(
)
{
ProgressMsg
:
:
Payload
(
data
)
=
>
buf
.
push_all
(
&
data
)
ProgressMsg
:
:
Done
(
Ok
(
(
)
)
)
=
>
return
Ok
(
(
response
.
metadata
buf
)
)
ProgressMsg
:
:
Done
(
Err
(
e
)
)
=
>
return
Err
(
e
)
}
}
}
pub
fn
load_bytes_iter
(
resource_task
:
&
ResourceTask
url
:
Url
)
-
>
(
Metadata
ProgressMsgPortIterator
)
{
let
(
input_chan
input_port
)
=
channel
(
)
;
resource_task
.
send
(
ControlMsg
:
:
Load
(
LoadData
:
:
new
(
url
)
LoadConsumer
:
:
Channel
(
input_chan
)
)
)
.
unwrap
(
)
;
let
response
=
input_port
.
recv
(
)
.
unwrap
(
)
;
let
iter
=
ProgressMsgPortIterator
{
progress_port
:
response
.
progress_port
}
;
(
response
.
metadata
iter
)
}
pub
struct
ProgressMsgPortIterator
{
progress_port
:
Receiver
<
ProgressMsg
>
}
impl
Iterator
for
ProgressMsgPortIterator
{
type
Item
=
Vec
<
u8
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Vec
<
u8
>
>
{
match
self
.
progress_port
.
recv
(
)
.
unwrap
(
)
{
ProgressMsg
:
:
Payload
(
data
)
=
>
Some
(
data
)
ProgressMsg
:
:
Done
(
Ok
(
(
)
)
)
=
>
None
ProgressMsg
:
:
Done
(
Err
(
e
)
)
=
>
{
error
!
(
"
error
receiving
bytes
:
{
}
"
e
)
;
None
}
}
}
}
