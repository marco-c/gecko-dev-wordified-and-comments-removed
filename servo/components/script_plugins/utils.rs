use
rustc
:
:
hir
:
:
def_id
:
:
DefId
;
use
rustc
:
:
lint
:
:
LateContext
;
use
syntax
:
:
codemap
:
:
{
ExpnFormat
Span
}
;
pub
fn
match_def_path
(
cx
:
&
LateContext
def_id
:
DefId
path
:
&
[
&
str
]
)
-
>
bool
{
let
krate
=
&
cx
.
tcx
.
crate_name
(
def_id
.
krate
)
;
if
krate
!
=
&
path
[
0
]
{
return
false
;
}
let
path
=
&
path
[
1
.
.
]
;
let
other
=
cx
.
tcx
.
def_path
(
def_id
)
.
data
;
if
other
.
len
(
)
!
=
path
.
len
(
)
{
return
false
;
}
other
.
into_iter
(
)
.
map
(
|
e
|
e
.
data
)
.
zip
(
path
)
.
all
(
|
(
nm
p
)
|
&
*
nm
.
as_interned_str
(
)
=
=
*
p
)
}
pub
fn
in_derive_expn
(
span
:
Span
)
-
>
bool
{
if
let
Some
(
i
)
=
span
.
ctxt
.
outer
(
)
.
expn_info
(
)
{
if
let
ExpnFormat
:
:
MacroAttribute
(
n
)
=
i
.
callee
.
format
{
n
.
as_str
(
)
.
contains
(
"
derive
"
)
}
else
{
false
}
}
else
{
false
}
}
