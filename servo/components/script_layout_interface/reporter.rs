use
cssparser
:
:
{
Parser
SourcePosition
}
;
use
ipc_channel
:
:
ipc
:
:
IpcSender
;
use
log
;
use
msg
:
:
constellation_msg
:
:
PipelineId
;
use
script_traits
:
:
ConstellationControlMsg
;
use
servo_url
:
:
ServoUrl
;
use
std
:
:
sync
:
:
{
Mutex
Arc
}
;
use
style
:
:
error_reporting
:
:
{
ParseErrorReporter
ContextualParseError
}
;
#
[
derive
(
HeapSizeOf
Clone
)
]
pub
struct
CSSErrorReporter
{
pub
pipelineid
:
PipelineId
#
[
ignore_heap_size_of
=
"
Arc
is
defined
in
libstd
"
]
pub
script_chan
:
Arc
<
Mutex
<
IpcSender
<
ConstellationControlMsg
>
>
>
}
impl
ParseErrorReporter
for
CSSErrorReporter
{
fn
report_error
<
'
a
>
(
&
self
input
:
&
mut
Parser
position
:
SourcePosition
error
:
ContextualParseError
<
'
a
>
url
:
&
ServoUrl
line_number_offset
:
u64
)
{
let
location
=
input
.
source_location
(
position
)
;
let
line_offset
=
location
.
line
+
line_number_offset
as
usize
;
if
log_enabled
!
(
log
:
:
LogLevel
:
:
Info
)
{
info
!
(
"
Url
:
\
t
{
}
\
n
{
}
:
{
}
{
}
"
url
.
as_str
(
)
line_offset
location
.
column
error
.
to_string
(
)
)
}
let
_
=
self
.
script_chan
.
lock
(
)
.
unwrap
(
)
.
send
(
ConstellationControlMsg
:
:
ReportCSSError
(
self
.
pipelineid
"
"
.
to_owned
(
)
location
.
line
location
.
column
error
.
to_string
(
)
)
)
;
}
}
