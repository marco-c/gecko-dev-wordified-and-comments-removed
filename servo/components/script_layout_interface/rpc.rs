use
app_units
:
:
Au
;
use
euclid
:
:
{
Point2D
Rect
}
;
use
script_traits
:
:
UntrustedNodeAddress
;
use
servo_arc
:
:
Arc
;
use
style
:
:
properties
:
:
ComputedValues
;
use
style
:
:
properties
:
:
longhands
:
:
overflow_x
;
use
webrender_api
:
:
ClipId
;
pub
trait
LayoutRPC
{
fn
content_box
(
&
self
)
-
>
ContentBoxResponse
;
fn
content_boxes
(
&
self
)
-
>
ContentBoxesResponse
;
fn
node_geometry
(
&
self
)
-
>
NodeGeometryResponse
;
fn
node_scroll_area
(
&
self
)
-
>
NodeGeometryResponse
;
fn
node_scroll_root_id
(
&
self
)
-
>
NodeScrollRootIdResponse
;
fn
resolved_style
(
&
self
)
-
>
ResolvedStyleResponse
;
fn
offset_parent
(
&
self
)
-
>
OffsetParentResponse
;
fn
style
(
&
self
)
-
>
StyleResponse
;
fn
text_index
(
&
self
)
-
>
TextIndexResponse
;
fn
nodes_from_point_response
(
&
self
)
-
>
Vec
<
UntrustedNodeAddress
>
;
}
pub
struct
ContentBoxResponse
(
pub
Option
<
Rect
<
Au
>
>
)
;
pub
struct
ContentBoxesResponse
(
pub
Vec
<
Rect
<
Au
>
>
)
;
pub
struct
NodeGeometryResponse
{
pub
client_rect
:
Rect
<
i32
>
}
pub
struct
NodeOverflowResponse
(
pub
Option
<
Point2D
<
overflow_x
:
:
computed_value
:
:
T
>
>
)
;
pub
struct
NodeScrollRootIdResponse
(
pub
ClipId
)
;
pub
struct
ResolvedStyleResponse
(
pub
String
)
;
#
[
derive
(
Clone
)
]
pub
struct
OffsetParentResponse
{
pub
node_address
:
Option
<
UntrustedNodeAddress
>
pub
rect
:
Rect
<
Au
>
}
impl
OffsetParentResponse
{
pub
fn
empty
(
)
-
>
OffsetParentResponse
{
OffsetParentResponse
{
node_address
:
None
rect
:
Rect
:
:
zero
(
)
}
}
}
#
[
derive
(
Clone
)
]
pub
struct
StyleResponse
(
pub
Option
<
Arc
<
ComputedValues
>
>
)
;
#
[
derive
(
Clone
)
]
pub
struct
TextIndexResponse
(
pub
Option
<
usize
>
)
;
