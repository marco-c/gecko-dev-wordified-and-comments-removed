extern
crate
app_units
;
extern
crate
euclid
;
extern
crate
malloc_size_of
;
#
[
macro_use
]
extern
crate
malloc_size_of_derive
;
extern
crate
webrender_api
;
use
app_units
:
:
{
Au
MAX_AU
MIN_AU
}
;
use
euclid
:
:
{
Point2D
Rect
Size2D
}
;
use
std
:
:
f32
;
use
webrender_api
:
:
{
LayoutPoint
LayoutRect
LayoutSize
}
;
#
[
derive
(
Clone
Copy
Debug
MallocSizeOf
)
]
pub
enum
DeviceIndependentPixel
{
}
pub
trait
MaxRect
{
#
[
inline
(
always
)
]
fn
max_rect
(
)
-
>
Self
;
}
impl
MaxRect
for
Rect
<
Au
>
{
fn
max_rect
(
)
-
>
Rect
<
Au
>
{
Rect
:
:
new
(
Point2D
:
:
new
(
MIN_AU
/
2
MIN_AU
/
2
)
Size2D
:
:
new
(
MAX_AU
MAX_AU
)
)
}
}
impl
MaxRect
for
LayoutRect
{
fn
max_rect
(
)
-
>
LayoutRect
{
LayoutRect
:
:
new
(
LayoutPoint
:
:
new
(
f32
:
:
MIN
/
2
.
0
f32
:
:
MIN
/
2
.
0
)
LayoutSize
:
:
new
(
f32
:
:
MAX
f32
:
:
MAX
)
)
}
}
pub
fn
f32_rect_to_au_rect
(
rect
:
Rect
<
f32
>
)
-
>
Rect
<
Au
>
{
Rect
:
:
new
(
Point2D
:
:
new
(
Au
:
:
from_f32_px
(
rect
.
origin
.
x
)
Au
:
:
from_f32_px
(
rect
.
origin
.
y
)
)
Size2D
:
:
new
(
Au
:
:
from_f32_px
(
rect
.
size
.
width
)
Au
:
:
from_f32_px
(
rect
.
size
.
height
)
)
)
}
pub
fn
au_rect_to_f32_rect
(
rect
:
Rect
<
Au
>
)
-
>
Rect
<
f32
>
{
Rect
:
:
new
(
Point2D
:
:
new
(
rect
.
origin
.
x
.
to_f32_px
(
)
rect
.
origin
.
y
.
to_f32_px
(
)
)
Size2D
:
:
new
(
rect
.
size
.
width
.
to_f32_px
(
)
rect
.
size
.
height
.
to_f32_px
(
)
)
)
}
