#
!
[
crate_name
=
"
devtools_traits
"
]
#
!
[
crate_type
=
"
rlib
"
]
#
!
[
allow
(
non_snake_case
)
]
#
!
[
deny
(
unsafe_code
)
]
#
!
[
feature
(
custom_derive
plugin
)
]
#
!
[
plugin
(
heapsize_plugin
serde_macros
)
]
#
[
allow
(
unused_extern_crates
)
]
#
[
macro_use
]
extern
crate
bitflags
;
extern
crate
heapsize
;
extern
crate
hyper
;
extern
crate
ipc_channel
;
extern
crate
msg
;
extern
crate
serde
;
extern
crate
time
;
extern
crate
url
;
use
hyper
:
:
header
:
:
Headers
;
use
hyper
:
:
http
:
:
RawStatus
;
use
hyper
:
:
method
:
:
Method
;
use
ipc_channel
:
:
ipc
:
:
IpcSender
;
use
msg
:
:
constellation_msg
:
:
PipelineId
;
use
std
:
:
net
:
:
TcpStream
;
use
time
:
:
Duration
;
use
time
:
:
Tm
;
use
url
:
:
Url
;
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
DevtoolsPageInfo
{
pub
title
:
String
pub
url
:
Url
}
#
[
derive
(
Deserialize
HeapSizeOf
Serialize
Clone
)
]
pub
struct
CSSError
{
pub
filename
:
String
pub
line
:
usize
pub
column
:
usize
pub
msg
:
String
}
pub
enum
DevtoolsControlMsg
{
FromChrome
(
ChromeToDevtoolsControlMsg
)
FromScript
(
ScriptToDevtoolsControlMsg
)
}
pub
enum
ChromeToDevtoolsControlMsg
{
AddClient
(
TcpStream
)
ServerExitMsg
NetworkEvent
(
String
NetworkEvent
)
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
ScriptToDevtoolsControlMsg
{
NewGlobal
(
(
PipelineId
Option
<
WorkerId
>
)
IpcSender
<
DevtoolScriptControlMsg
>
DevtoolsPageInfo
)
ConsoleAPI
(
PipelineId
ConsoleMessage
Option
<
WorkerId
>
)
FramerateTick
(
String
f64
)
ReportCSSError
(
PipelineId
CSSError
)
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
EvaluateJSReply
{
VoidValue
NullValue
BooleanValue
(
bool
)
NumberValue
(
f64
)
StringValue
(
String
)
ActorValue
{
class
:
String
uuid
:
String
}
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
AttrInfo
{
pub
namespace
:
String
pub
name
:
String
pub
value
:
String
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
NodeInfo
{
pub
uniqueId
:
String
pub
baseURI
:
String
pub
parent
:
String
pub
nodeType
:
u16
pub
namespaceURI
:
String
pub
nodeName
:
String
pub
numChildren
:
usize
pub
name
:
String
pub
publicId
:
String
pub
systemId
:
String
pub
attrs
:
Vec
<
AttrInfo
>
pub
isDocumentElement
:
bool
pub
shortValue
:
String
pub
incompleteValue
:
bool
}
pub
struct
StartedTimelineMarker
{
name
:
String
start_time
:
PreciseTime
start_stack
:
Option
<
Vec
<
(
)
>
>
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
TimelineMarker
{
pub
name
:
String
pub
start_time
:
PreciseTime
pub
start_stack
:
Option
<
Vec
<
(
)
>
>
pub
end_time
:
PreciseTime
pub
end_stack
:
Option
<
Vec
<
(
)
>
>
}
#
[
derive
(
PartialEq
Eq
Hash
Clone
Deserialize
Serialize
)
]
pub
enum
TimelineMarkerType
{
Reflow
DOMEvent
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
ComputedNodeLayout
{
pub
display
:
String
pub
position
:
String
pub
zIndex
:
String
pub
boxSizing
:
String
pub
autoMargins
:
AutoMargins
pub
marginTop
:
String
pub
marginRight
:
String
pub
marginBottom
:
String
pub
marginLeft
:
String
pub
borderTopWidth
:
String
pub
borderRightWidth
:
String
pub
borderBottomWidth
:
String
pub
borderLeftWidth
:
String
pub
paddingTop
:
String
pub
paddingRight
:
String
pub
paddingBottom
:
String
pub
paddingLeft
:
String
pub
width
:
f32
pub
height
:
f32
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
AutoMargins
{
pub
top
:
bool
pub
right
:
bool
pub
bottom
:
bool
pub
left
:
bool
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
DevtoolScriptControlMsg
{
EvaluateJS
(
PipelineId
String
IpcSender
<
EvaluateJSReply
>
)
GetRootNode
(
PipelineId
IpcSender
<
Option
<
NodeInfo
>
>
)
GetDocumentElement
(
PipelineId
IpcSender
<
Option
<
NodeInfo
>
>
)
GetChildren
(
PipelineId
String
IpcSender
<
Option
<
Vec
<
NodeInfo
>
>
>
)
GetLayout
(
PipelineId
String
IpcSender
<
Option
<
ComputedNodeLayout
>
>
)
GetCachedMessages
(
PipelineId
CachedConsoleMessageTypes
IpcSender
<
Vec
<
CachedConsoleMessage
>
>
)
ModifyAttribute
(
PipelineId
String
Vec
<
Modification
>
)
WantsLiveNotifications
(
PipelineId
bool
)
SetTimelineMarkers
(
PipelineId
Vec
<
TimelineMarkerType
>
IpcSender
<
TimelineMarker
>
)
DropTimelineMarkers
(
PipelineId
Vec
<
TimelineMarkerType
>
)
RequestAnimationFrame
(
PipelineId
String
)
Reload
(
PipelineId
)
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
Modification
{
pub
attributeName
:
String
pub
newValue
:
Option
<
String
>
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
enum
LogLevel
{
Log
Debug
Info
Warn
Error
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
ConsoleMessage
{
pub
message
:
String
pub
logLevel
:
LogLevel
pub
filename
:
String
pub
lineNumber
:
usize
pub
columnNumber
:
usize
}
bitflags
!
{
#
[
derive
(
Deserialize
Serialize
)
]
pub
flags
CachedConsoleMessageTypes
:
u8
{
const
PAGE_ERROR
=
1
<
<
0
const
CONSOLE_API
=
1
<
<
1
}
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
PageError
{
#
[
serde
(
rename
=
"
type
"
)
]
pub
type_
:
String
pub
errorMessage
:
String
pub
sourceName
:
String
pub
lineText
:
String
pub
lineNumber
:
u32
pub
columnNumber
:
u32
pub
category
:
String
pub
timeStamp
:
u64
pub
error
:
bool
pub
warning
:
bool
pub
exception
:
bool
pub
strict
:
bool
pub
private
:
bool
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
ConsoleAPI
{
#
[
serde
(
rename
=
"
type
"
)
]
pub
type_
:
String
pub
level
:
String
pub
filename
:
String
pub
lineNumber
:
u32
pub
functionName
:
String
pub
timeStamp
:
u64
pub
private
:
bool
pub
arguments
:
Vec
<
String
>
}
#
[
derive
(
Deserialize
Serialize
)
]
pub
enum
CachedConsoleMessage
{
PageError
(
PageError
)
ConsoleAPI
(
ConsoleAPI
)
}
#
[
derive
(
Debug
PartialEq
)
]
pub
struct
HttpRequest
{
pub
url
:
Url
pub
method
:
Method
pub
headers
:
Headers
pub
body
:
Option
<
Vec
<
u8
>
>
pub
pipeline_id
:
PipelineId
pub
startedDateTime
:
Tm
pub
timeStamp
:
i64
pub
connect_time
:
u64
pub
send_time
:
u64
}
#
[
derive
(
Debug
PartialEq
)
]
pub
struct
HttpResponse
{
pub
headers
:
Option
<
Headers
>
pub
status
:
Option
<
RawStatus
>
pub
body
:
Option
<
Vec
<
u8
>
>
pub
pipeline_id
:
PipelineId
}
pub
enum
NetworkEvent
{
HttpRequest
(
HttpRequest
)
HttpResponse
(
HttpResponse
)
}
impl
TimelineMarker
{
pub
fn
start
(
name
:
String
)
-
>
StartedTimelineMarker
{
StartedTimelineMarker
{
name
:
name
start_time
:
PreciseTime
:
:
now
(
)
start_stack
:
None
}
}
}
impl
StartedTimelineMarker
{
pub
fn
end
(
self
)
-
>
TimelineMarker
{
TimelineMarker
{
name
:
self
.
name
start_time
:
self
.
start_time
start_stack
:
self
.
start_stack
end_time
:
PreciseTime
:
:
now
(
)
end_stack
:
None
}
}
}
#
[
derive
(
Copy
Clone
Deserialize
Serialize
)
]
pub
struct
PreciseTime
(
u64
)
;
impl
PreciseTime
{
pub
fn
now
(
)
-
>
PreciseTime
{
PreciseTime
(
time
:
:
precise_time_ns
(
)
)
}
pub
fn
to
(
&
self
later
:
PreciseTime
)
-
>
Duration
{
Duration
:
:
nanoseconds
(
(
later
.
0
-
self
.
0
)
as
i64
)
}
}
#
[
derive
(
Clone
PartialEq
Eq
Copy
Hash
Debug
Deserialize
Serialize
HeapSizeOf
)
]
pub
struct
WorkerId
(
pub
u32
)
;
