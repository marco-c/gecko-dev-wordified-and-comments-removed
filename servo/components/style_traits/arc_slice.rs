use
servo_arc
:
:
ThinArc
;
use
std
:
:
{
iter
mem
}
;
use
std
:
:
ops
:
:
Deref
;
use
std
:
:
ptr
:
:
NonNull
;
const
ARC_SLICE_CANARY
:
u64
=
0xf3f3f3f3f3f3f3f3
;
/
/
/
cbindgen
:
derive
-
eq
=
false
/
/
/
cbindgen
:
derive
-
neq
=
false
#
[
repr
(
C
)
]
#
[
derive
(
Debug
Clone
PartialEq
Eq
ToShmem
)
]
pub
struct
ArcSlice
<
T
>
(
#
[
shmem
(
field_bound
)
]
ThinArc
<
u64
T
>
)
;
impl
<
T
>
Deref
for
ArcSlice
<
T
>
{
type
Target
=
[
T
]
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
debug_assert_eq
!
(
self
.
0
.
header
.
header
ARC_SLICE_CANARY
)
;
&
self
.
0
.
slice
}
}
lazy_static
!
{
/
/
ThinArc
doesn
'
t
support
alignments
greater
than
align_of
:
:
<
u64
>
.
static
ref
EMPTY_ARC_SLICE
:
ArcSlice
<
u64
>
=
{
ArcSlice
(
ThinArc
:
:
from_header_and_iter
(
ARC_SLICE_CANARY
iter
:
:
empty
(
)
)
)
}
;
}
impl
<
T
>
Default
for
ArcSlice
<
T
>
{
#
[
allow
(
unsafe_code
)
]
fn
default
(
)
-
>
Self
{
debug_assert
!
(
mem
:
:
align_of
:
:
<
T
>
(
)
<
=
mem
:
:
align_of
:
:
<
u64
>
(
)
"
Need
to
increase
the
alignment
of
EMPTY_ARC_SLICE
"
)
;
unsafe
{
let
empty
:
ArcSlice
<
_
>
=
EMPTY_ARC_SLICE
.
clone
(
)
;
let
empty
:
Self
=
mem
:
:
transmute
(
empty
)
;
debug_assert_eq
!
(
empty
.
len
(
)
0
)
;
empty
}
}
}
impl
<
T
>
ArcSlice
<
T
>
{
#
[
inline
]
pub
fn
from_iter
<
I
>
(
items
:
I
)
-
>
Self
where
I
:
Iterator
<
Item
=
T
>
+
ExactSizeIterator
{
if
items
.
len
(
)
=
=
0
{
return
Self
:
:
default
(
)
;
}
ArcSlice
(
ThinArc
:
:
from_header_and_iter
(
ARC_SLICE_CANARY
items
)
)
}
#
[
inline
]
#
[
allow
(
unsafe_code
)
]
pub
fn
forget
(
self
)
-
>
ForgottenArcSlicePtr
<
T
>
{
let
ret
=
unsafe
{
ForgottenArcSlicePtr
(
NonNull
:
:
new_unchecked
(
self
.
0
.
ptr
(
)
as
*
const
_
as
*
mut
_
)
)
}
;
mem
:
:
forget
(
self
)
;
ret
}
#
[
inline
]
pub
fn
leaked_empty_ptr
(
)
-
>
*
mut
std
:
:
os
:
:
raw
:
:
c_void
{
let
empty
:
ArcSlice
<
_
>
=
EMPTY_ARC_SLICE
.
clone
(
)
;
let
ptr
=
empty
.
0
.
ptr
(
)
;
std
:
:
mem
:
:
forget
(
empty
)
;
ptr
as
*
mut
_
}
}
#
[
repr
(
C
)
]
pub
struct
ForgottenArcSlicePtr
<
T
>
(
NonNull
<
T
>
)
;
