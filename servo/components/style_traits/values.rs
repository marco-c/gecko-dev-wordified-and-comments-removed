use
app_units
:
:
Au
;
use
cssparser
:
:
{
BasicParseError
ParseError
Parser
Token
UnicodeRange
serialize_string
}
;
use
std
:
:
fmt
:
:
{
self
Write
}
;
pub
trait
ToCss
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
Write
;
#
[
inline
]
fn
to_css_string
(
&
self
)
-
>
String
{
let
mut
s
=
String
:
:
new
(
)
;
self
.
to_css
(
&
mut
s
)
.
unwrap
(
)
;
s
}
}
impl
<
'
a
T
>
ToCss
for
&
'
a
T
where
T
:
ToCss
+
?
Sized
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
Write
{
(
*
self
)
.
to_css
(
dest
)
}
}
impl
ToCss
for
str
{
#
[
inline
]
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
Write
{
serialize_string
(
self
dest
)
}
}
impl
ToCss
for
String
{
#
[
inline
]
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
Write
{
serialize_string
(
self
dest
)
}
}
impl
<
T
>
ToCss
for
Option
<
T
>
where
T
:
ToCss
{
#
[
inline
]
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
Write
{
self
.
as_ref
(
)
.
map_or
(
Ok
(
(
)
)
|
value
|
value
.
to_css
(
dest
)
)
}
}
pub
struct
SequenceWriter
<
'
a
W
>
{
writer
:
TrackedWriter
<
W
>
separator
:
&
'
a
str
}
impl
<
'
a
W
>
SequenceWriter
<
'
a
W
>
where
W
:
Write
{
#
[
inline
]
pub
fn
new
(
writer
:
W
separator
:
&
'
a
str
)
-
>
Self
{
SequenceWriter
{
writer
:
TrackedWriter
:
:
new
(
writer
)
separator
:
separator
}
}
#
[
inline
]
pub
fn
item
<
T
>
(
&
mut
self
item
:
&
T
)
-
>
fmt
:
:
Result
where
T
:
ToCss
{
if
self
.
writer
.
has_written
{
item
.
to_css
(
&
mut
PrefixedWriter
:
:
new
(
&
mut
self
.
writer
self
.
separator
)
)
}
else
{
item
.
to_css
(
&
mut
self
.
writer
)
}
}
}
struct
TrackedWriter
<
W
>
{
writer
:
W
has_written
:
bool
}
impl
<
W
>
TrackedWriter
<
W
>
where
W
:
Write
{
#
[
inline
]
fn
new
(
writer
:
W
)
-
>
Self
{
TrackedWriter
{
writer
:
writer
has_written
:
false
}
}
}
impl
<
W
>
Write
for
TrackedWriter
<
W
>
where
W
:
Write
{
#
[
inline
]
fn
write_str
(
&
mut
self
s
:
&
str
)
-
>
fmt
:
:
Result
{
if
!
s
.
is_empty
(
)
{
self
.
has_written
=
true
;
}
self
.
writer
.
write_str
(
s
)
}
#
[
inline
]
fn
write_char
(
&
mut
self
c
:
char
)
-
>
fmt
:
:
Result
{
self
.
has_written
=
true
;
self
.
writer
.
write_char
(
c
)
}
}
struct
PrefixedWriter
<
'
a
W
>
{
writer
:
W
prefix
:
Option
<
&
'
a
str
>
}
impl
<
'
a
W
>
PrefixedWriter
<
'
a
W
>
where
W
:
Write
{
#
[
inline
]
fn
new
(
writer
:
W
prefix
:
&
'
a
str
)
-
>
Self
{
PrefixedWriter
{
writer
:
writer
prefix
:
Some
(
prefix
)
}
}
}
impl
<
'
a
W
>
Write
for
PrefixedWriter
<
'
a
W
>
where
W
:
Write
{
#
[
inline
]
fn
write_str
(
&
mut
self
s
:
&
str
)
-
>
fmt
:
:
Result
{
if
!
s
.
is_empty
(
)
{
if
let
Some
(
prefix
)
=
self
.
prefix
.
take
(
)
{
self
.
writer
.
write_str
(
prefix
)
?
;
}
}
self
.
writer
.
write_str
(
s
)
}
#
[
inline
]
fn
write_char
(
&
mut
self
c
:
char
)
-
>
fmt
:
:
Result
{
if
let
Some
(
prefix
)
=
self
.
prefix
.
take
(
)
{
self
.
writer
.
write_str
(
prefix
)
?
;
}
self
.
writer
.
write_char
(
c
)
}
}
pub
struct
Comma
;
pub
struct
Space
;
pub
struct
CommaWithSpace
;
pub
trait
Separator
{
fn
separator
(
)
-
>
&
'
static
str
;
fn
parse
<
'
i
'
t
F
T
E
>
(
parser
:
&
mut
Parser
<
'
i
'
t
>
parse_one
:
F
)
-
>
Result
<
Vec
<
T
>
ParseError
<
'
i
E
>
>
where
F
:
for
<
'
tt
>
FnMut
(
&
mut
Parser
<
'
i
'
tt
>
)
-
>
Result
<
T
ParseError
<
'
i
E
>
>
;
}
impl
Separator
for
Comma
{
fn
separator
(
)
-
>
&
'
static
str
{
"
"
}
fn
parse
<
'
i
'
t
F
T
E
>
(
input
:
&
mut
Parser
<
'
i
'
t
>
parse_one
:
F
)
-
>
Result
<
Vec
<
T
>
ParseError
<
'
i
E
>
>
where
F
:
for
<
'
tt
>
FnMut
(
&
mut
Parser
<
'
i
'
tt
>
)
-
>
Result
<
T
ParseError
<
'
i
E
>
>
{
input
.
parse_comma_separated
(
parse_one
)
}
}
impl
Separator
for
Space
{
fn
separator
(
)
-
>
&
'
static
str
{
"
"
}
fn
parse
<
'
i
'
t
F
T
E
>
(
input
:
&
mut
Parser
<
'
i
'
t
>
mut
parse_one
:
F
)
-
>
Result
<
Vec
<
T
>
ParseError
<
'
i
E
>
>
where
F
:
for
<
'
tt
>
FnMut
(
&
mut
Parser
<
'
i
'
tt
>
)
-
>
Result
<
T
ParseError
<
'
i
E
>
>
{
let
mut
results
=
vec
!
[
parse_one
(
input
)
?
]
;
while
let
Ok
(
item
)
=
input
.
try
(
&
mut
parse_one
)
{
results
.
push
(
item
)
;
}
Ok
(
results
)
}
}
impl
Separator
for
CommaWithSpace
{
fn
separator
(
)
-
>
&
'
static
str
{
"
"
}
fn
parse
<
'
i
'
t
F
T
E
>
(
input
:
&
mut
Parser
<
'
i
'
t
>
mut
parse_one
:
F
)
-
>
Result
<
Vec
<
T
>
ParseError
<
'
i
E
>
>
where
F
:
for
<
'
tt
>
FnMut
(
&
mut
Parser
<
'
i
'
tt
>
)
-
>
Result
<
T
ParseError
<
'
i
E
>
>
{
let
mut
results
=
vec
!
[
parse_one
(
input
)
?
]
;
loop
{
let
comma
=
input
.
try
(
|
i
|
i
.
expect_comma
(
)
)
.
is_ok
(
)
;
if
let
Ok
(
item
)
=
input
.
try
(
&
mut
parse_one
)
{
results
.
push
(
item
)
;
}
else
if
comma
{
return
Err
(
BasicParseError
:
:
UnexpectedToken
(
Token
:
:
Comma
)
.
into
(
)
)
;
}
else
{
break
;
}
}
Ok
(
results
)
}
}
pub
trait
OneOrMoreSeparated
{
type
S
:
Separator
;
}
impl
OneOrMoreSeparated
for
UnicodeRange
{
type
S
=
Comma
;
}
impl
<
T
>
ToCss
for
Vec
<
T
>
where
T
:
ToCss
+
OneOrMoreSeparated
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
Write
{
let
mut
iter
=
self
.
iter
(
)
;
iter
.
next
(
)
.
unwrap
(
)
.
to_css
(
dest
)
?
;
for
item
in
iter
{
dest
.
write_str
(
<
T
as
OneOrMoreSeparated
>
:
:
S
:
:
separator
(
)
)
?
;
item
.
to_css
(
dest
)
?
;
}
Ok
(
(
)
)
}
}
impl
<
T
>
ToCss
for
Box
<
T
>
where
T
:
?
Sized
+
ToCss
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
Write
{
(
*
*
self
)
.
to_css
(
dest
)
}
}
impl
ToCss
for
Au
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
Write
{
write
!
(
dest
"
{
}
px
"
self
.
to_f64_px
(
)
)
}
}
macro_rules
!
impl_to_css_for_predefined_type
{
(
name
:
ty
)
=
>
{
impl
<
'
a
>
ToCss
for
name
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
Write
{
:
:
cssparser
:
:
ToCss
:
:
to_css
(
self
dest
)
}
}
}
;
}
impl_to_css_for_predefined_type
!
(
f32
)
;
impl_to_css_for_predefined_type
!
(
i32
)
;
impl_to_css_for_predefined_type
!
(
u16
)
;
impl_to_css_for_predefined_type
!
(
u32
)
;
impl_to_css_for_predefined_type
!
(
:
:
cssparser
:
:
Token
<
'
a
>
)
;
impl_to_css_for_predefined_type
!
(
:
:
cssparser
:
:
RGBA
)
;
impl_to_css_for_predefined_type
!
(
:
:
cssparser
:
:
Color
)
;
impl_to_css_for_predefined_type
!
(
:
:
cssparser
:
:
UnicodeRange
)
;
#
[
macro_export
]
macro_rules
!
define_css_keyword_enum
{
(
name
:
ident
:
values
{
(
css
:
expr
=
>
variant
:
ident
)
+
}
aliases
{
(
alias
:
expr
=
>
alias_variant
:
ident
)
+
}
)
=
>
{
__define_css_keyword_enum__add_optional_traits
!
(
name
[
(
css
=
>
variant
)
+
]
[
(
alias
=
>
alias_variant
)
+
]
)
;
}
;
(
name
:
ident
:
values
{
(
css
:
expr
=
>
variant
:
ident
)
+
}
aliases
{
(
alias
:
expr
=
>
alias_variant
:
ident
)
*
}
)
=
>
{
__define_css_keyword_enum__add_optional_traits
!
(
name
[
(
css
=
>
variant
)
+
]
[
(
alias
=
>
alias_variant
)
*
]
)
;
}
;
(
name
:
ident
:
values
{
(
css
:
expr
=
>
variant
:
ident
)
+
}
aliases
{
(
alias
:
expr
=
>
alias_variant
:
ident
)
+
}
)
=
>
{
__define_css_keyword_enum__add_optional_traits
!
(
name
[
(
css
=
>
variant
)
+
]
[
(
alias
=
>
alias_variant
)
+
]
)
;
}
;
(
name
:
ident
:
values
{
(
css
:
expr
=
>
variant
:
ident
)
+
}
aliases
{
(
alias
:
expr
=
>
alias_variant
:
ident
)
*
}
)
=
>
{
__define_css_keyword_enum__add_optional_traits
!
(
name
[
(
css
=
>
variant
)
+
]
[
(
alias
=
>
alias_variant
)
*
]
)
;
}
;
(
name
:
ident
:
(
css
:
expr
=
>
variant
:
ident
)
+
)
=
>
{
__define_css_keyword_enum__add_optional_traits
!
(
name
[
(
css
=
>
variant
)
+
]
[
]
)
;
}
;
(
name
:
ident
:
(
css
:
expr
=
>
variant
:
ident
)
+
)
=
>
{
__define_css_keyword_enum__add_optional_traits
!
(
name
[
(
css
=
>
variant
)
+
]
[
]
)
;
}
;
}
#
[
cfg
(
feature
=
"
servo
"
)
]
#
[
macro_export
]
macro_rules
!
__define_css_keyword_enum__add_optional_traits
{
(
name
:
ident
[
(
css
:
expr
=
>
variant
:
ident
)
+
]
[
(
alias
:
expr
=
>
alias_variant
:
ident
)
*
]
)
=
>
{
__define_css_keyword_enum__actual
!
{
name
[
Deserialize
Serialize
HeapSizeOf
]
[
(
css
=
>
variant
)
+
]
[
(
alias
=
>
alias_variant
)
*
]
}
}
;
}
#
[
cfg
(
not
(
feature
=
"
servo
"
)
)
]
#
[
macro_export
]
macro_rules
!
__define_css_keyword_enum__add_optional_traits
{
(
name
:
ident
[
(
css
:
expr
=
>
variant
:
ident
)
+
]
[
(
alias
:
expr
=
>
alias_variant
:
ident
)
*
]
)
=
>
{
__define_css_keyword_enum__actual
!
{
name
[
]
[
(
css
=
>
variant
)
+
]
[
(
alias
=
>
alias_variant
)
*
]
}
}
;
}
#
[
macro_export
]
macro_rules
!
__define_css_keyword_enum__actual
{
(
name
:
ident
[
(
derived_trait
:
ident
)
*
]
[
(
css
:
expr
=
>
variant
:
ident
)
+
]
[
(
alias
:
expr
=
>
alias_variant
:
ident
)
*
]
)
=
>
{
#
[
allow
(
non_camel_case_types
missing_docs
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
Hash
PartialEq
(
derived_trait
)
*
)
]
pub
enum
name
{
(
variant
)
+
}
impl
name
{
/
/
/
Parse
this
property
from
a
CSS
input
stream
.
pub
fn
parse
<
'
i
'
t
>
(
input
:
&
mut
:
:
cssparser
:
:
Parser
<
'
i
'
t
>
)
-
>
Result
<
name
crate
:
:
ParseError
<
'
i
>
>
{
let
ident
=
input
.
expect_ident
(
)
?
;
Self
:
:
from_ident
(
&
ident
)
.
map_err
(
|
(
)
|
:
:
cssparser
:
:
ParseError
:
:
Basic
(
:
:
cssparser
:
:
BasicParseError
:
:
UnexpectedToken
(
:
:
cssparser
:
:
Token
:
:
Ident
(
ident
)
)
)
)
}
/
/
/
Parse
this
property
from
an
already
-
tokenized
identifier
.
pub
fn
from_ident
(
ident
:
&
str
)
-
>
Result
<
name
(
)
>
{
match_ignore_ascii_case
!
{
ident
(
css
=
>
Ok
(
name
:
:
variant
)
)
+
(
alias
=
>
Ok
(
name
:
:
alias_variant
)
)
*
_
=
>
Err
(
(
)
)
}
}
}
impl
ToCss
for
name
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
:
:
std
:
:
fmt
:
:
Result
where
W
:
:
:
std
:
:
fmt
:
:
Write
{
match
*
self
{
(
name
:
:
variant
=
>
dest
.
write_str
(
css
)
)
+
}
}
}
}
}
pub
mod
specified
{
use
ParsingMode
;
use
app_units
:
:
Au
;
use
std
:
:
cmp
;
#
[
repr
(
u8
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
derive
(
Clone
Copy
Debug
PartialEq
Eq
)
]
pub
enum
AllowedLengthType
{
All
NonNegative
}
impl
Default
for
AllowedLengthType
{
#
[
inline
]
fn
default
(
)
-
>
Self
{
AllowedLengthType
:
:
All
}
}
impl
AllowedLengthType
{
#
[
inline
]
pub
fn
is_ok
(
&
self
parsing_mode
:
ParsingMode
value
:
f32
)
-
>
bool
{
if
parsing_mode
.
allows_all_numeric_values
(
)
{
return
true
;
}
match
*
self
{
AllowedLengthType
:
:
All
=
>
true
AllowedLengthType
:
:
NonNegative
=
>
value
>
=
0
.
}
}
#
[
inline
]
pub
fn
clamp
(
&
self
val
:
Au
)
-
>
Au
{
match
*
self
{
AllowedLengthType
:
:
All
=
>
val
AllowedLengthType
:
:
NonNegative
=
>
cmp
:
:
max
(
Au
(
0
)
val
)
}
}
}
#
[
repr
(
u8
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
PartialOrd
)
]
pub
enum
AllowedNumericType
{
All
NonNegative
AtLeastOne
}
impl
AllowedNumericType
{
#
[
inline
]
pub
fn
is_ok
(
&
self
parsing_mode
:
ParsingMode
val
:
f32
)
-
>
bool
{
if
parsing_mode
.
allows_all_numeric_values
(
)
{
return
true
;
}
match
*
self
{
AllowedNumericType
:
:
All
=
>
true
AllowedNumericType
:
:
NonNegative
=
>
val
>
=
0
.
0
AllowedNumericType
:
:
AtLeastOne
=
>
val
>
=
1
.
0
}
}
#
[
inline
]
pub
fn
clamp
(
&
self
val
:
f32
)
-
>
f32
{
match
*
self
{
AllowedNumericType
:
:
NonNegative
if
val
<
0
.
=
>
0
.
AllowedNumericType
:
:
AtLeastOne
if
val
<
1
.
=
>
1
.
_
=
>
val
}
}
}
}
pub
struct
Css
<
T
>
(
pub
T
)
;
impl
<
T
:
ToCss
>
fmt
:
:
Display
for
Css
<
T
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
self
.
0
.
to_css
(
f
)
}
}
