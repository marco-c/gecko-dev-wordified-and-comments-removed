use
{
CSSPixel
PinchZoomFactor
ParseError
}
;
use
cssparser
:
:
{
Parser
ToCss
ParseError
as
CssParseError
BasicParseError
}
;
use
euclid
:
:
TypedSize2D
;
use
std
:
:
ascii
:
:
AsciiExt
;
use
std
:
:
fmt
;
define_css_keyword_enum
!
(
UserZoom
:
"
zoom
"
=
>
Zoom
"
fixed
"
=
>
Fixed
)
;
define_css_keyword_enum
!
(
Orientation
:
"
auto
"
=
>
Auto
"
portrait
"
=
>
Portrait
"
landscape
"
=
>
Landscape
)
;
#
[
derive
(
Clone
Debug
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
Serialize
HeapSizeOf
)
)
]
pub
struct
ViewportConstraints
{
pub
size
:
TypedSize2D
<
f32
CSSPixel
>
pub
initial_zoom
:
PinchZoomFactor
pub
min_zoom
:
Option
<
PinchZoomFactor
>
pub
max_zoom
:
Option
<
PinchZoomFactor
>
pub
user_zoom
:
UserZoom
pub
orientation
:
Orientation
}
impl
ToCss
for
ViewportConstraints
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
write
!
(
dest
"
viewport
{
{
"
)
?
;
write
!
(
dest
"
width
:
{
}
px
;
"
self
.
size
.
width
)
?
;
write
!
(
dest
"
height
:
{
}
px
;
"
self
.
size
.
height
)
?
;
write
!
(
dest
"
zoom
:
{
}
;
"
self
.
initial_zoom
.
get
(
)
)
?
;
if
let
Some
(
min_zoom
)
=
self
.
min_zoom
{
write
!
(
dest
"
min
-
zoom
:
{
}
;
"
min_zoom
.
get
(
)
)
?
;
}
if
let
Some
(
max_zoom
)
=
self
.
max_zoom
{
write
!
(
dest
"
max
-
zoom
:
{
}
;
"
max_zoom
.
get
(
)
)
?
;
}
write
!
(
dest
"
user
-
zoom
:
"
)
?
;
self
.
user_zoom
.
to_css
(
dest
)
?
;
write
!
(
dest
"
;
orientation
:
"
)
?
;
self
.
orientation
.
to_css
(
dest
)
?
;
write
!
(
dest
"
;
}
}
"
)
}
}
#
[
derive
(
Clone
Copy
Debug
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
HeapSizeOf
)
)
]
pub
enum
Zoom
{
Number
(
f32
)
Percentage
(
f32
)
Auto
}
impl
ToCss
for
Zoom
{
fn
to_css
<
W
>
(
&
self
dest
:
&
mut
W
)
-
>
fmt
:
:
Result
where
W
:
fmt
:
:
Write
{
match
*
self
{
Zoom
:
:
Number
(
number
)
=
>
write
!
(
dest
"
{
}
"
number
)
Zoom
:
:
Percentage
(
percentage
)
=
>
write
!
(
dest
"
{
}
%
"
percentage
*
100
.
)
Zoom
:
:
Auto
=
>
write
!
(
dest
"
auto
"
)
}
}
}
impl
Zoom
{
pub
fn
parse
<
'
i
'
t
>
(
input
:
&
mut
Parser
<
'
i
'
t
>
)
-
>
Result
<
Zoom
ParseError
<
'
i
>
>
{
use
PARSING_MODE_DEFAULT
;
use
cssparser
:
:
Token
;
use
values
:
:
specified
:
:
AllowedLengthType
:
:
NonNegative
;
match
*
input
.
next
(
)
?
{
Token
:
:
Percentage
{
unit_value
.
.
}
if
NonNegative
.
is_ok
(
PARSING_MODE_DEFAULT
unit_value
)
=
>
{
Ok
(
Zoom
:
:
Percentage
(
unit_value
)
)
}
Token
:
:
Number
{
value
.
.
}
if
NonNegative
.
is_ok
(
PARSING_MODE_DEFAULT
value
)
=
>
{
Ok
(
Zoom
:
:
Number
(
value
)
)
}
Token
:
:
Ident
(
ref
value
)
if
value
.
eq_ignore_ascii_case
(
"
auto
"
)
=
>
{
Ok
(
Zoom
:
:
Auto
)
}
ref
t
=
>
Err
(
CssParseError
:
:
Basic
(
BasicParseError
:
:
UnexpectedToken
(
t
.
clone
(
)
)
)
)
}
}
#
[
inline
]
pub
fn
to_f32
(
&
self
)
-
>
Option
<
f32
>
{
match
*
self
{
Zoom
:
:
Number
(
number
)
=
>
Some
(
number
as
f32
)
Zoom
:
:
Percentage
(
percentage
)
=
>
Some
(
percentage
as
f32
)
Zoom
:
:
Auto
=
>
None
}
}
}
