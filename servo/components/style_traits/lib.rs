#
!
[
crate_name
=
"
style_traits
"
]
#
!
[
crate_type
=
"
rlib
"
]
#
!
[
deny
(
unsafe_code
missing_docs
)
]
#
!
[
cfg_attr
(
feature
=
"
servo
"
feature
(
plugin
)
)
]
extern
crate
app_units
;
#
[
macro_use
]
extern
crate
bitflags
;
#
[
macro_use
]
extern
crate
cssparser
;
extern
crate
euclid
;
#
[
cfg
(
feature
=
"
servo
"
)
]
extern
crate
heapsize
;
#
[
cfg
(
feature
=
"
servo
"
)
]
#
[
macro_use
]
extern
crate
heapsize_derive
;
extern
crate
selectors
;
#
[
cfg
(
feature
=
"
servo
"
)
]
#
[
macro_use
]
extern
crate
serde
;
use
cssparser
:
:
CompactCowStr
;
use
selectors
:
:
parser
:
:
SelectorParseError
;
pub
type
UnsafeNode
=
(
usize
usize
)
;
#
[
derive
(
Clone
Copy
Debug
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
servo
"
derive
(
Deserialize
Serialize
HeapSizeOf
)
)
]
pub
struct
PinchZoomFactor
(
f32
)
;
impl
PinchZoomFactor
{
pub
fn
new
(
scale
:
f32
)
-
>
PinchZoomFactor
{
PinchZoomFactor
(
scale
)
}
pub
fn
get
(
&
self
)
-
>
f32
{
self
.
0
}
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
enum
CSSPixel
{
}
pub
mod
cursor
;
#
[
macro_use
]
pub
mod
values
;
#
[
macro_use
]
pub
mod
viewport
;
pub
use
values
:
:
{
Comma
CommaWithSpace
OneOrMoreSeparated
Separator
Space
ToCss
}
;
pub
use
viewport
:
:
HasViewportPercentage
;
pub
type
ParseError
<
'
i
>
=
cssparser
:
:
ParseError
<
'
i
SelectorParseError
<
'
i
StyleParseError
<
'
i
>
>
>
;
#
[
derive
(
Clone
Debug
PartialEq
)
]
pub
enum
StyleParseError
<
'
i
>
{
BadUrlInDeclarationValueBlock
BadStringInDeclarationValueBlock
UnbalancedCloseParenthesisInDeclarationValueBlock
UnbalancedCloseSquareBracketInDeclarationValueBlock
UnbalancedCloseCurlyBracketInDeclarationValueBlock
PropertyDeclaration
(
PropertyDeclarationParseError
)
PropertyDeclarationValueNotExhausted
UnexpectedDimension
(
CompactCowStr
<
'
i
>
)
RangedExpressionWithNoValue
UnexpectedFunction
(
CompactCowStr
<
'
i
>
)
UnexpectedNamespaceRule
UnexpectedImportRule
UnexpectedCharsetRule
UnsupportedAtRule
(
CompactCowStr
<
'
i
>
)
UnspecifiedError
}
#
[
derive
(
Eq
PartialEq
Copy
Clone
Debug
)
]
pub
enum
PropertyDeclarationParseError
{
UnknownProperty
ExperimentalProperty
InvalidValue
AnimationPropertyInKeyframeBlock
NotAllowedInPageRule
}
impl
<
'
a
>
From
<
StyleParseError
<
'
a
>
>
for
ParseError
<
'
a
>
{
fn
from
(
this
:
StyleParseError
<
'
a
>
)
-
>
Self
{
cssparser
:
:
ParseError
:
:
Custom
(
SelectorParseError
:
:
Custom
(
this
)
)
}
}
impl
<
'
a
>
From
<
PropertyDeclarationParseError
>
for
ParseError
<
'
a
>
{
fn
from
(
this
:
PropertyDeclarationParseError
)
-
>
Self
{
cssparser
:
:
ParseError
:
:
Custom
(
SelectorParseError
:
:
Custom
(
StyleParseError
:
:
PropertyDeclaration
(
this
)
)
)
}
}
bitflags
!
{
/
/
/
The
mode
to
use
when
parsing
values
.
pub
flags
ParsingMode
:
u8
{
/
/
/
In
CSS
lengths
must
have
units
except
for
zero
values
where
the
unit
can
be
omitted
.
/
/
/
https
:
/
/
www
.
w3
.
org
/
TR
/
css3
-
values
/
#
lengths
const
PARSING_MODE_DEFAULT
=
0x00
/
/
/
In
SVG
a
coordinate
or
length
value
without
a
unit
identifier
(
e
.
g
.
"
25
"
)
is
assumed
/
/
/
to
be
in
user
units
(
px
)
.
/
/
/
https
:
/
/
www
.
w3
.
org
/
TR
/
SVG
/
coords
.
html
#
Units
const
PARSING_MODE_ALLOW_UNITLESS_LENGTH
=
0x01
/
/
/
In
SVG
out
-
of
-
range
values
are
not
treated
as
an
error
in
parsing
.
/
/
/
https
:
/
/
www
.
w3
.
org
/
TR
/
SVG
/
implnote
.
html
#
RangeClamping
const
PARSING_MODE_ALLOW_ALL_NUMERIC_VALUES
=
0x02
}
}
impl
ParsingMode
{
pub
fn
allows_unitless_lengths
(
&
self
)
-
>
bool
{
self
.
intersects
(
PARSING_MODE_ALLOW_UNITLESS_LENGTH
)
}
pub
fn
allows_all_numeric_values
(
&
self
)
-
>
bool
{
self
.
intersects
(
PARSING_MODE_ALLOW_ALL_NUMERIC_VALUES
)
}
}
