use
servo_arc
:
:
Arc
;
use
std
:
:
ops
:
:
Range
;
#
[
allow
(
non_snake_case
)
]
pub
mod
CssType
{
pub
const
COLOR
:
u8
=
1
<
<
0
;
pub
const
GRADIENT
:
u8
=
1
<
<
1
;
pub
const
TIMING_FUNCTION
:
u8
=
1
<
<
2
;
}
pub
trait
SpecifiedValueInfo
{
const
SUPPORTED_TYPES
:
u8
=
0
;
}
impl
SpecifiedValueInfo
for
bool
{
}
impl
SpecifiedValueInfo
for
f32
{
}
impl
SpecifiedValueInfo
for
i8
{
}
impl
SpecifiedValueInfo
for
i32
{
}
impl
SpecifiedValueInfo
for
u8
{
}
impl
SpecifiedValueInfo
for
u16
{
}
impl
SpecifiedValueInfo
for
u32
{
}
impl
SpecifiedValueInfo
for
str
{
}
impl
SpecifiedValueInfo
for
String
{
}
impl
<
T
:
SpecifiedValueInfo
+
?
Sized
>
SpecifiedValueInfo
for
Box
<
T
>
{
const
SUPPORTED_TYPES
:
u8
=
T
:
:
SUPPORTED_TYPES
;
}
impl
<
T
:
SpecifiedValueInfo
>
SpecifiedValueInfo
for
[
T
]
{
const
SUPPORTED_TYPES
:
u8
=
T
:
:
SUPPORTED_TYPES
;
}
macro_rules
!
impl_generic_specified_value_info
{
(
ty
:
ident
<
param
:
ident
>
)
=
>
{
impl
<
param
:
SpecifiedValueInfo
>
SpecifiedValueInfo
for
ty
<
param
>
{
const
SUPPORTED_TYPES
:
u8
=
param
:
:
SUPPORTED_TYPES
;
}
}
}
impl_generic_specified_value_info
!
(
Option
<
T
>
)
;
impl_generic_specified_value_info
!
(
Vec
<
T
>
)
;
impl_generic_specified_value_info
!
(
Arc
<
T
>
)
;
impl_generic_specified_value_info
!
(
Range
<
Idx
>
)
;
impl
<
T1
T2
>
SpecifiedValueInfo
for
(
T1
T2
)
where
T1
:
SpecifiedValueInfo
T2
:
SpecifiedValueInfo
{
const
SUPPORTED_TYPES
:
u8
=
T1
:
:
SUPPORTED_TYPES
|
T2
:
:
SUPPORTED_TYPES
;
}
