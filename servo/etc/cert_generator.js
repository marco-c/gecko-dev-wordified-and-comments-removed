function
getDERString
(
cert
)
{
var
length
=
{
}
;
var
derArray
=
cert
.
getRawDER
(
length
)
;
var
derString
=
'
'
;
for
(
var
i
=
0
;
i
<
derArray
.
length
;
i
+
+
)
{
derString
+
=
String
.
fromCharCode
(
derArray
[
i
]
)
;
}
return
derString
;
}
function
getPEMString
(
cert
)
{
var
derb64
=
btoa
(
getDERString
(
cert
)
)
;
var
wrapped
=
derb64
.
replace
(
/
(
\
S
{
64
}
(
?
!
)
)
/
g
"
1
\
r
\
n
"
)
;
return
"
-
-
-
-
-
BEGIN
CERTIFICATE
-
-
-
-
-
\
r
\
n
"
+
wrapped
+
"
\
r
\
n
-
-
-
-
-
END
CERTIFICATE
-
-
-
-
-
\
r
\
n
"
;
}
let
certcache
=
Components
.
classes
[
"
mozilla
.
org
/
security
/
nsscertcache
;
1
"
]
.
createInstance
(
Ci
.
nsINSSCertCache
)
;
let
certdb
=
Components
.
classes
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
createInstance
(
Ci
.
nsIX509CertDB
)
;
certcache
.
cacheAllCerts
(
)
;
let
enumerator
=
certcache
.
getX509CachedCerts
(
)
.
getEnumerator
(
)
;
let
certlist
=
[
]
;
let
certstring
=
"
"
;
while
(
enumerator
.
hasMoreElements
(
)
)
{
let
cert
=
enumerator
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIX509Cert
)
;
let
pem
=
getPEMString
(
cert
)
;
let
trusted
=
certdb
.
isCertTrusted
(
cert
Ci
.
nsIX509Cert
.
CA_CERT
Ci
.
nsIX509CertDB
.
TRUSTED_SSL
)
;
certlist
.
push
(
{
name
:
cert
.
commonName
pem
:
pem
trusted
:
trusted
}
)
;
if
(
trusted
)
{
certstring
+
=
pem
;
}
}
function
save
(
path
)
{
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
var
file
=
new
FileUtils
.
File
(
path
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
var
ostream
=
FileUtils
.
openSafeFileOutputStream
(
file
)
;
var
converter
=
Components
.
classes
[
"
mozilla
.
org
/
intl
/
scriptableunicodeconverter
"
]
.
createInstance
(
Components
.
interfaces
.
nsIScriptableUnicodeConverter
)
;
converter
.
charset
=
"
UTF
-
8
"
;
var
istream
=
converter
.
convertToInputStream
(
certstring
)
;
NetUtil
.
asyncCopy
(
istream
ostream
function
(
status
)
{
if
(
!
Components
.
isSuccessCode
(
status
)
)
{
return
;
}
}
)
;
}
