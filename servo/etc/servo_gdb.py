import
gdb
class
AuPrinter
:
    
def
__init__
(
self
val
)
:
        
self
.
val
=
val
    
def
to_string
(
self
)
:
        
i32_type
=
gdb
.
lookup_type
(
"
i32
"
)
        
au
=
self
.
val
.
cast
(
i32_type
)
;
        
return
"
{
0
}
px
(
{
1
}
au
)
"
.
format
(
au
/
60
.
0
au
)
class
BitFieldU8Printer
:
    
def
__init__
(
self
val
)
:
        
self
.
val
=
val
    
def
to_string
(
self
)
:
        
u8_type
=
gdb
.
lookup_type
(
"
u8
"
)
        
value
=
self
.
val
.
cast
(
u8_type
)
;
        
return
"
[
{
0
:
#
010b
}
]
"
.
format
(
int
(
value
)
)
class
ChildPrinter
:
    
def
__init__
(
self
val
)
:
        
self
.
val
=
val
    
def
children
(
self
)
:
        
children
=
[
]
        
for
f
in
self
.
val
.
type
.
fields
(
)
:
            
children
.
append
(
(
f
.
name
self
.
val
[
f
.
name
]
)
)
        
return
children
    
def
to_string
(
self
)
:
        
return
None
class
TrustedNodeAddressPrinter
:
    
def
__init__
(
self
val
)
:
        
self
.
val
=
val
    
def
children
(
self
)
:
        
node_type
=
gdb
.
lookup_type
(
"
struct
script
:
:
dom
:
:
node
:
:
Node
"
)
.
pointer
(
)
        
value
=
self
.
val
.
cast
(
node_type
)
        
return
[
(
'
Node
'
value
)
]
    
def
to_string
(
self
)
:
        
return
self
.
val
.
address
class
NodeTypeIdPrinter
:
    
def
__init__
(
self
val
)
:
        
self
.
val
=
val
    
def
to_string
(
self
)
:
        
u8_ptr_type
=
gdb
.
lookup_type
(
"
u8
"
)
.
pointer
(
)
        
enum_0
=
self
.
val
.
address
.
cast
(
u8_ptr_type
)
.
dereference
(
)
        
enum_type
=
self
.
val
.
type
.
fields
(
)
[
int
(
enum_0
)
]
.
type
;
        
return
str
(
enum_type
)
.
lstrip
(
'
struct
'
)
class
OptionPrinter
:
    
def
__init__
(
self
val
)
:
        
self
.
val
=
val
    
def
is_some
(
self
)
:
        
d_size
=
self
.
val
.
type
.
fields
(
)
[
0
]
.
type
.
sizeof
        
if
d_size
>
0
and
d_size
<
=
8
:
            
ptr
=
self
.
val
.
address
.
cast
(
gdb
.
lookup_type
(
"
unsigned
char
"
)
.
pointer
(
)
)
            
discriminator
=
int
(
ptr
.
dereference
(
)
)
            
return
discriminator
!
=
0
        
raise
"
unhandled
discriminator
size
"
    
def
children
(
self
)
:
        
if
self
.
is_some
(
)
:
            
option_type
=
self
.
val
.
type
            
ptr
=
self
.
val
.
address
.
cast
(
gdb
.
lookup_type
(
"
unsigned
char
"
)
.
pointer
(
)
)
            
t_size
=
option_type
.
sizeof
            
value_type
=
option_type
.
fields
(
)
[
1
]
.
type
.
fields
(
)
[
1
]
.
type
            
v_size
=
value_type
.
sizeof
            
data_ptr
=
(
ptr
+
t_size
-
v_size
)
.
cast
(
value_type
.
pointer
(
)
)
.
dereference
(
)
            
return
[
(
'
Some
'
data_ptr
)
]
        
return
[
(
'
None
'
None
)
]
    
def
to_string
(
self
)
:
        
return
None
class
TestPrinter
:
    
def
__init__
(
self
val
)
:
        
self
.
val
=
val
    
def
to_string
(
self
)
:
        
return
"
[
UNKNOWN
-
type
=
{
0
}
]
"
.
format
(
str
(
self
.
val
.
type
)
)
type_map
=
[
    
(
'
Au
'
AuPrinter
)
    
(
'
FlowFlags
'
BitFieldU8Printer
)
    
(
'
IntrinsicWidths
'
ChildPrinter
)
    
(
'
PlacementInfo
'
ChildPrinter
)
    
(
'
TrustedNodeAddress
'
TrustedNodeAddressPrinter
)
    
(
'
NodeTypeId
'
NodeTypeIdPrinter
)
    
(
'
Option
'
OptionPrinter
)
]
def
lookup_servo_type
(
val
)
:
    
val_type
=
str
(
val
.
type
)
    
for
(
type_name
printer
)
in
type_map
:
        
if
val_type
=
=
type_name
or
val_type
.
endswith
(
"
:
:
"
+
type_name
)
:
            
return
printer
(
val
)
    
return
None
def
register_printers
(
obj
)
:
    
gdb
.
pretty_printers
.
append
(
lookup_servo_type
)
