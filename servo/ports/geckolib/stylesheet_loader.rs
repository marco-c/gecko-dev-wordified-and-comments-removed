use
std
:
:
sync
:
:
Arc
;
use
style
:
:
gecko_bindings
:
:
bindings
:
:
Gecko_LoadStyleSheet
;
use
style
:
:
gecko_bindings
:
:
structs
:
:
{
Loader
ServoStyleSheet
}
;
use
style
:
:
gecko_bindings
:
:
sugar
:
:
ownership
:
:
HasArcFFI
;
use
style
:
:
media_queries
:
:
MediaList
;
use
style
:
:
shared_lock
:
:
Locked
;
use
style
:
:
stylesheets
:
:
{
ImportRule
Stylesheet
StylesheetLoader
as
StyleStylesheetLoader
}
;
use
style_traits
:
:
ToCss
;
pub
struct
StylesheetLoader
(
*
mut
Loader
*
mut
ServoStyleSheet
)
;
impl
StylesheetLoader
{
pub
fn
new
(
loader
:
*
mut
Loader
parent
:
*
mut
ServoStyleSheet
)
-
>
Self
{
StylesheetLoader
(
loader
parent
)
}
}
impl
StyleStylesheetLoader
for
StylesheetLoader
{
fn
request_stylesheet
(
&
self
media
:
MediaList
make_import
:
&
mut
FnMut
(
MediaList
)
-
>
ImportRule
make_arc
:
&
mut
FnMut
(
ImportRule
)
-
>
Arc
<
Locked
<
ImportRule
>
>
)
-
>
Arc
<
Locked
<
ImportRule
>
>
{
let
media_string
=
media
.
to_css_string
(
)
;
let
import
=
make_import
(
media
)
;
let
(
spec_bytes
spec_len
)
:
(
*
const
u8
usize
)
=
import
.
url
.
as_slice_components
(
)
;
let
base_url_data
=
import
.
url
.
extra_data
.
get
(
)
;
unsafe
{
Gecko_LoadStyleSheet
(
self
.
0
self
.
1
Stylesheet
:
:
arc_as_borrowed
(
&
import
.
stylesheet
)
base_url_data
spec_bytes
spec_len
as
u32
media_string
.
as_bytes
(
)
.
as_ptr
(
)
media_string
.
len
(
)
as
u32
)
;
}
make_arc
(
import
)
}
}
