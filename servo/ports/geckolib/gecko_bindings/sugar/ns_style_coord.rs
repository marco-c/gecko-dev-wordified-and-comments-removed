use
bindings
:
:
{
Gecko_ResetStyleCoord
Gecko_SetStyleCoordCalcValue
Gecko_AddRefCalcArbitraryThread
}
;
use
std
:
:
mem
:
:
transmute
;
use
structs
:
:
{
nsStyleCoord_CalcValue
nsStyleCoord_Calc
nsStyleUnit
nsStyleUnion
nsStyleCoord
}
;
impl
nsStyleUnion
{
pub
unsafe
fn
reset
(
&
mut
self
unit
:
&
mut
nsStyleUnit
)
{
if
*
unit
=
=
nsStyleUnit
:
:
eStyleUnit_Calc
{
Gecko_ResetStyleCoord
(
unit
self
)
;
}
}
pub
unsafe
fn
set_calc_value
(
&
mut
self
unit
:
&
mut
nsStyleUnit
v
:
nsStyleCoord_CalcValue
)
{
debug_assert
!
(
*
unit
!
=
nsStyleUnit
:
:
eStyleUnit_Calc
)
;
Gecko_SetStyleCoordCalcValue
(
unit
self
v
)
;
}
pub
unsafe
fn
get_calc
(
&
self
)
-
>
nsStyleCoord_CalcValue
{
(
*
self
.
as_calc
(
)
)
.
_base
}
pub
unsafe
fn
addref_if_calc
(
&
mut
self
unit
:
&
nsStyleUnit
)
{
if
*
unit
=
=
nsStyleUnit
:
:
eStyleUnit_Calc
{
Gecko_AddRefCalcArbitraryThread
(
self
.
as_calc_mut
(
)
)
;
}
}
unsafe
fn
as_calc_mut
(
&
mut
self
)
-
>
&
mut
nsStyleCoord_Calc
{
transmute
(
*
self
.
mPointer
.
as_mut
(
)
as
*
mut
nsStyleCoord_Calc
)
}
unsafe
fn
as_calc
(
&
self
)
-
>
&
nsStyleCoord_Calc
{
transmute
(
*
self
.
mPointer
.
as_ref
(
)
as
*
const
nsStyleCoord_Calc
)
}
}
impl
nsStyleCoord
{
pub
unsafe
fn
addref_if_calc
(
&
mut
self
)
{
self
.
mValue
.
addref_if_calc
(
&
self
.
mUnit
)
;
}
}
