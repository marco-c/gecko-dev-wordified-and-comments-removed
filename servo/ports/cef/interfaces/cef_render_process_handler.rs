#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_render_process_handler_t
{
pub
base
:
types
:
:
cef_base_t
pub
on_render_thread_created
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_process_handler_t
extra_info
:
*
mut
interfaces
:
:
cef_list_value_t
)
-
>
(
)
>
pub
on_web_kit_initialized
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_process_handler_t
)
-
>
(
)
>
pub
on_browser_created
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_process_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
)
-
>
(
)
>
pub
on_browser_destroyed
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_process_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
)
-
>
(
)
>
pub
get_load_handler
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_process_handler_t
)
-
>
*
mut
interfaces
:
:
cef_load_handler_t
>
pub
on_before_navigation
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_process_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
frame
:
*
mut
interfaces
:
:
cef_frame_t
request
:
*
mut
interfaces
:
:
cef_request_t
navigation_type
:
types
:
:
cef_navigation_type_t
is_redirect
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
on_context_created
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_process_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
frame
:
*
mut
interfaces
:
:
cef_frame_t
context
:
*
mut
interfaces
:
:
cef_v8context_t
)
-
>
(
)
>
pub
on_context_released
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_process_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
frame
:
*
mut
interfaces
:
:
cef_frame_t
context
:
*
mut
interfaces
:
:
cef_v8context_t
)
-
>
(
)
>
pub
on_uncaught_exception
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_process_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
frame
:
*
mut
interfaces
:
:
cef_frame_t
context
:
*
mut
interfaces
:
:
cef_v8context_t
exception
:
*
mut
interfaces
:
:
cef_v8exception_t
stackTrace
:
*
mut
interfaces
:
:
cef_v8stack_trace_t
)
-
>
(
)
>
pub
on_focused_node_changed
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_process_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
frame
:
*
mut
interfaces
:
:
cef_frame_t
node
:
*
mut
interfaces
:
:
cef_domnode_t
)
-
>
(
)
>
pub
on_process_message_received
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_process_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
source_process
:
interfaces
:
:
cef_process_id_t
message
:
*
mut
interfaces
:
:
cef_process_message_t
)
-
>
libc
:
:
c_int
>
pub
ref_count
:
usize
pub
extra
:
u8
}
pub
type
cef_render_process_handler_t
=
_cef_render_process_handler_t
;
pub
struct
CefRenderProcessHandler
{
c_object
:
*
mut
cef_render_process_handler_t
}
impl
Clone
for
CefRenderProcessHandler
{
fn
clone
(
&
self
)
-
>
CefRenderProcessHandler
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefRenderProcessHandler
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefRenderProcessHandler
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefRenderProcessHandler
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_render_process_handler_t
)
-
>
CefRenderProcessHandler
{
CefRenderProcessHandler
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_render_process_handler_t
)
-
>
CefRenderProcessHandler
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefRenderProcessHandler
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_render_process_handler_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_render_process_handler_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
on_render_thread_created
(
&
self
extra_info
:
interfaces
:
:
CefListValue
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_render_thread_created
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
extra_info
)
)
)
}
}
pub
fn
on_web_kit_initialized
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_web_kit_initialized
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
on_browser_created
(
&
self
browser
:
interfaces
:
:
CefBrowser
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_browser_created
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
)
)
}
}
pub
fn
on_browser_destroyed
(
&
self
browser
:
interfaces
:
:
CefBrowser
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_browser_destroyed
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
)
)
}
}
pub
fn
get_load_handler
(
&
self
)
-
>
interfaces
:
:
CefLoadHandler
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_load_handler
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
on_before_navigation
(
&
self
browser
:
interfaces
:
:
CefBrowser
frame
:
interfaces
:
:
CefFrame
request
:
interfaces
:
:
CefRequest
navigation_type
:
types
:
:
cef_navigation_type_t
is_redirect
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_before_navigation
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
frame
)
CefWrap
:
:
to_c
(
request
)
CefWrap
:
:
to_c
(
navigation_type
)
CefWrap
:
:
to_c
(
is_redirect
)
)
)
}
}
pub
fn
on_context_created
(
&
self
browser
:
interfaces
:
:
CefBrowser
frame
:
interfaces
:
:
CefFrame
context
:
interfaces
:
:
CefV8Context
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_context_created
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
frame
)
CefWrap
:
:
to_c
(
context
)
)
)
}
}
pub
fn
on_context_released
(
&
self
browser
:
interfaces
:
:
CefBrowser
frame
:
interfaces
:
:
CefFrame
context
:
interfaces
:
:
CefV8Context
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_context_released
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
frame
)
CefWrap
:
:
to_c
(
context
)
)
)
}
}
pub
fn
on_uncaught_exception
(
&
self
browser
:
interfaces
:
:
CefBrowser
frame
:
interfaces
:
:
CefFrame
context
:
interfaces
:
:
CefV8Context
exception
:
interfaces
:
:
CefV8Exception
stackTrace
:
interfaces
:
:
CefV8StackTrace
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_uncaught_exception
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
frame
)
CefWrap
:
:
to_c
(
context
)
CefWrap
:
:
to_c
(
exception
)
CefWrap
:
:
to_c
(
stackTrace
)
)
)
}
}
pub
fn
on_focused_node_changed
(
&
self
browser
:
interfaces
:
:
CefBrowser
frame
:
interfaces
:
:
CefFrame
node
:
interfaces
:
:
CefDOMNode
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_focused_node_changed
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
frame
)
CefWrap
:
:
to_c
(
node
)
)
)
}
}
pub
fn
on_process_message_received
(
&
self
browser
:
interfaces
:
:
CefBrowser
source_process
:
interfaces
:
:
CefProcessId
message
:
interfaces
:
:
CefProcessMessage
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_process_message_received
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
source_process
)
CefWrap
:
:
to_c
(
message
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_render_process_handler_t
>
for
CefRenderProcessHandler
{
fn
to_c
(
rust_object
:
CefRenderProcessHandler
)
-
>
*
mut
cef_render_process_handler_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_render_process_handler_t
)
-
>
CefRenderProcessHandler
{
CefRenderProcessHandler
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_render_process_handler_t
>
for
Option
<
CefRenderProcessHandler
>
{
fn
to_c
(
rust_object
:
Option
<
CefRenderProcessHandler
>
)
-
>
*
mut
cef_render_process_handler_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_render_process_handler_t
)
-
>
Option
<
CefRenderProcessHandler
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefRenderProcessHandler
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
