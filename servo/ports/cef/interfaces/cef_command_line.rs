#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
mem
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_command_line_t
{
pub
base
:
types
:
:
cef_base_t
pub
is_valid
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
)
-
>
libc
:
:
c_int
>
pub
is_read_only
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
)
-
>
libc
:
:
c_int
>
pub
copy
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
)
-
>
*
mut
interfaces
:
:
cef_command_line_t
>
pub
init_from_argv
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
argc
:
libc
:
:
c_int
argv
:
*
const
*
const
libc
:
:
c_char
)
-
>
(
)
>
pub
init_from_string
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
command_line
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
reset
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
)
-
>
(
)
>
pub
get_argv
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
argv
:
&
types
:
:
cef_string_list_t
)
-
>
(
)
>
pub
get_command_line_string
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_program
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
set_program
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
program
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
has_switches
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
)
-
>
libc
:
:
c_int
>
pub
has_switch
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
name
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
get_switch_value
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
name
:
*
const
types
:
:
cef_string_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_switches
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
switches
:
types
:
:
cef_string_map_t
)
-
>
(
)
>
pub
append_switch
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
name
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
append_switch_with_value
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
name
:
*
const
types
:
:
cef_string_t
value
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
has_arguments
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
)
-
>
libc
:
:
c_int
>
pub
get_arguments
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
arguments
:
&
types
:
:
cef_string_list_t
)
-
>
(
)
>
pub
append_argument
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
argument
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
prepend_wrapper
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_command_line_t
wrapper
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_command_line_t
=
_cef_command_line_t
;
pub
struct
CefCommandLine
{
c_object
:
*
mut
cef_command_line_t
}
impl
Clone
for
CefCommandLine
{
fn
clone
(
&
self
)
-
>
CefCommandLine
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefCommandLine
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefCommandLine
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefCommandLine
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_command_line_t
)
-
>
CefCommandLine
{
CefCommandLine
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_command_line_t
)
-
>
CefCommandLine
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefCommandLine
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_command_line_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_command_line_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
is_valid
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_valid
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_read_only
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_read_only
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
copy
(
&
self
)
-
>
interfaces
:
:
CefCommandLine
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
copy
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
init_from_argv
(
&
self
argc
:
libc
:
:
c_int
argv
:
&
&
str
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
init_from_argv
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
argc
)
CefWrap
:
:
to_c
(
argv
)
)
)
}
}
pub
fn
init_from_string
(
&
self
command_line
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
init_from_string
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_line
)
)
)
}
}
pub
fn
reset
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
reset
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_argv
(
&
self
argv
:
&
Vec
<
String
>
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_argv
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
argv
)
)
)
}
}
pub
fn
get_command_line_string
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_command_line_string
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_program
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_program
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_program
(
&
self
program
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_program
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
program
)
)
)
}
}
pub
fn
has_switches
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_switches
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
has_switch
(
&
self
name
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_switch
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
name
)
)
)
}
}
pub
fn
get_switch_value
(
&
self
name
:
&
[
u16
]
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_switch_value
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
name
)
)
)
}
}
pub
fn
get_switches
(
&
self
switches
:
HashMap
<
String
String
>
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_switches
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
switches
)
)
)
}
}
pub
fn
append_switch
(
&
self
name
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
append_switch
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
name
)
)
)
}
}
pub
fn
append_switch_with_value
(
&
self
name
:
&
[
u16
]
value
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
append_switch_with_value
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
name
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
has_arguments
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_arguments
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_arguments
(
&
self
arguments
:
&
Vec
<
String
>
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_arguments
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
arguments
)
)
)
}
}
pub
fn
append_argument
(
&
self
argument
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
append_argument
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
argument
)
)
)
}
}
pub
fn
prepend_wrapper
(
&
self
wrapper
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
prepend_wrapper
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
wrapper
)
)
)
}
}
pub
fn
create_command_line
(
)
-
>
interfaces
:
:
CefCommandLine
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
command_line
:
:
cef_command_line_create_command_line
(
)
)
}
}
pub
fn
get_global_command_line
(
)
-
>
interfaces
:
:
CefCommandLine
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
command_line
:
:
cef_command_line_get_global_command_line
(
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_command_line_t
>
for
CefCommandLine
{
fn
to_c
(
rust_object
:
CefCommandLine
)
-
>
*
mut
cef_command_line_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_command_line_t
)
-
>
CefCommandLine
{
CefCommandLine
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_command_line_t
>
for
Option
<
CefCommandLine
>
{
fn
to_c
(
rust_object
:
Option
<
CefCommandLine
>
)
-
>
*
mut
cef_command_line_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_command_line_t
)
-
>
Option
<
CefCommandLine
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefCommandLine
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
