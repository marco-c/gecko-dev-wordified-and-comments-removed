#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_frame_t
{
pub
base
:
types
:
:
cef_base_t
pub
is_valid
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
libc
:
:
c_int
>
pub
undo
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
(
)
>
pub
redo
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
(
)
>
pub
cut
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
(
)
>
pub
copy
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
(
)
>
pub
paste
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
(
)
>
pub
del
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
(
)
>
pub
select_all
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
(
)
>
pub
view_source
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
(
)
>
pub
get_source
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
visitor
:
*
mut
interfaces
:
:
cef_string_visitor_t
)
-
>
(
)
>
pub
get_text
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
visitor
:
*
mut
interfaces
:
:
cef_string_visitor_t
)
-
>
(
)
>
pub
load_request
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
request
:
*
mut
interfaces
:
:
cef_request_t
)
-
>
(
)
>
pub
load_url
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
url
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
load_string
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
string_val
:
*
const
types
:
:
cef_string_t
url
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
execute_java_script
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
code
:
*
const
types
:
:
cef_string_t
script_url
:
*
const
types
:
:
cef_string_t
start_line
:
libc
:
:
c_int
)
-
>
(
)
>
pub
is_main
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
libc
:
:
c_int
>
pub
is_focused
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
libc
:
:
c_int
>
pub
get_name
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_identifier
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
i64
>
pub
get_parent
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
*
mut
interfaces
:
:
cef_frame_t
>
pub
get_url
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_browser
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
*
mut
interfaces
:
:
cef_browser_t
>
pub
get_v8context
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
)
-
>
*
mut
interfaces
:
:
cef_v8context_t
>
pub
visit_dom
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_frame_t
visitor
:
*
mut
interfaces
:
:
cef_domvisitor_t
)
-
>
(
)
>
pub
ref_count
:
usize
pub
extra
:
u8
}
pub
type
cef_frame_t
=
_cef_frame_t
;
pub
struct
CefFrame
{
c_object
:
*
mut
cef_frame_t
}
impl
Clone
for
CefFrame
{
fn
clone
(
&
self
)
-
>
CefFrame
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefFrame
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefFrame
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefFrame
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_frame_t
)
-
>
CefFrame
{
CefFrame
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_frame_t
)
-
>
CefFrame
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefFrame
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_frame_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_frame_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
is_valid
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_valid
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
undo
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
undo
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
redo
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
redo
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
cut
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
cut
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
copy
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
copy
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
paste
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
paste
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
del
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
del
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
select_all
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
select_all
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
view_source
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
view_source
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_source
(
&
self
visitor
:
interfaces
:
:
CefStringVisitor
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_source
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
visitor
)
)
)
}
}
pub
fn
get_text
(
&
self
visitor
:
interfaces
:
:
CefStringVisitor
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_text
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
visitor
)
)
)
}
}
pub
fn
load_request
(
&
self
request
:
interfaces
:
:
CefRequest
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
load_request
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
request
)
)
)
}
}
pub
fn
load_url
(
&
self
url
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
load_url
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
url
)
)
)
}
}
pub
fn
load_string
(
&
self
string_val
:
&
[
u16
]
url
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
load_string
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
string_val
)
CefWrap
:
:
to_c
(
url
)
)
)
}
}
pub
fn
execute_java_script
(
&
self
code
:
&
[
u16
]
script_url
:
&
[
u16
]
start_line
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
execute_java_script
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
code
)
CefWrap
:
:
to_c
(
script_url
)
CefWrap
:
:
to_c
(
start_line
)
)
)
}
}
pub
fn
is_main
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_main
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_focused
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_focused
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_name
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_name
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_identifier
(
&
self
)
-
>
i64
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_identifier
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_parent
(
&
self
)
-
>
interfaces
:
:
CefFrame
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_parent
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_url
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_url
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_browser
(
&
self
)
-
>
interfaces
:
:
CefBrowser
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_browser
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_v8context
(
&
self
)
-
>
interfaces
:
:
CefV8Context
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_v8context
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
visit_dom
(
&
self
visitor
:
interfaces
:
:
CefDOMVisitor
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
visit_dom
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
visitor
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_frame_t
>
for
CefFrame
{
fn
to_c
(
rust_object
:
CefFrame
)
-
>
*
mut
cef_frame_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_frame_t
)
-
>
CefFrame
{
CefFrame
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_frame_t
>
for
Option
<
CefFrame
>
{
fn
to_c
(
rust_object
:
Option
<
CefFrame
>
)
-
>
*
mut
cef_frame_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_frame_t
)
-
>
Option
<
CefFrame
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefFrame
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
