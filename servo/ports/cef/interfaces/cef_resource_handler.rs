#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_resource_handler_t
{
pub
base
:
types
:
:
cef_base_t
pub
process_request
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_resource_handler_t
request
:
*
mut
interfaces
:
:
cef_request_t
callback
:
*
mut
interfaces
:
:
cef_callback_t
)
-
>
libc
:
:
c_int
>
pub
get_response_headers
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_resource_handler_t
response
:
*
mut
interfaces
:
:
cef_response_t
response_length
:
*
mut
i64
redirectUrl
:
*
mut
types
:
:
cef_string_t
)
-
>
(
)
>
pub
read_response
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_resource_handler_t
data_out
:
*
mut
(
)
bytes_to_read
:
libc
:
:
c_int
bytes_read
:
*
mut
libc
:
:
c_int
callback
:
*
mut
interfaces
:
:
cef_callback_t
)
-
>
libc
:
:
c_int
>
pub
can_get_cookie
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_resource_handler_t
cookie
:
*
const
interfaces
:
:
cef_cookie_t
)
-
>
libc
:
:
c_int
>
pub
can_set_cookie
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_resource_handler_t
cookie
:
*
const
interfaces
:
:
cef_cookie_t
)
-
>
libc
:
:
c_int
>
pub
cancel
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_resource_handler_t
)
-
>
(
)
>
pub
ref_count
:
uint
pub
extra
:
u8
}
pub
type
cef_resource_handler_t
=
_cef_resource_handler_t
;
pub
struct
CefResourceHandler
{
c_object
:
*
mut
cef_resource_handler_t
}
impl
Clone
for
CefResourceHandler
{
fn
clone
(
&
self
)
-
>
CefResourceHandler
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefResourceHandler
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefResourceHandler
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefResourceHandler
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_resource_handler_t
)
-
>
CefResourceHandler
{
CefResourceHandler
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_resource_handler_t
)
-
>
CefResourceHandler
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefResourceHandler
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_resource_handler_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_resource_handler_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
process_request
(
&
self
request
:
interfaces
:
:
CefRequest
callback
:
interfaces
:
:
CefCallback
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
process_request
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
request
)
CefWrap
:
:
to_c
(
callback
)
)
)
}
}
pub
fn
get_response_headers
(
&
self
response
:
interfaces
:
:
CefResponse
response_length
:
&
mut
i64
redirectUrl
:
*
mut
types
:
:
cef_string_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_response_headers
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
response
)
CefWrap
:
:
to_c
(
response_length
)
CefWrap
:
:
to_c
(
redirectUrl
)
)
)
}
}
pub
fn
read_response
(
&
self
data_out
:
&
mut
(
)
bytes_to_read
:
libc
:
:
c_int
bytes_read
:
&
mut
libc
:
:
c_int
callback
:
interfaces
:
:
CefCallback
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
read_response
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
data_out
)
CefWrap
:
:
to_c
(
bytes_to_read
)
CefWrap
:
:
to_c
(
bytes_read
)
CefWrap
:
:
to_c
(
callback
)
)
)
}
}
pub
fn
can_get_cookie
(
&
self
cookie
:
&
interfaces
:
:
CefCookie
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
can_get_cookie
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
cookie
)
)
)
}
}
pub
fn
can_set_cookie
(
&
self
cookie
:
&
interfaces
:
:
CefCookie
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
can_set_cookie
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
cookie
)
)
)
}
}
pub
fn
cancel
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
cancel
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_resource_handler_t
>
for
CefResourceHandler
{
fn
to_c
(
rust_object
:
CefResourceHandler
)
-
>
*
mut
cef_resource_handler_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_resource_handler_t
)
-
>
CefResourceHandler
{
CefResourceHandler
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_resource_handler_t
>
for
Option
<
CefResourceHandler
>
{
fn
to_c
(
rust_object
:
Option
<
CefResourceHandler
>
)
-
>
*
mut
cef_resource_handler_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_resource_handler_t
)
-
>
Option
<
CefResourceHandler
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefResourceHandler
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
