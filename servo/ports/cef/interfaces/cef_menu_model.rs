#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
mem
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_menu_model_t
{
pub
base
:
types
:
:
cef_base_t
pub
clear
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
)
-
>
libc
:
:
c_int
>
pub
get_count
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
)
-
>
libc
:
:
c_int
>
pub
add_separator
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
)
-
>
libc
:
:
c_int
>
pub
add_item
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
label
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
add_check_item
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
label
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
add_radio_item
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
label
:
*
const
types
:
:
cef_string_t
group_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
add_sub_menu
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
label
:
*
const
types
:
:
cef_string_t
)
-
>
*
mut
interfaces
:
:
cef_menu_model_t
>
pub
insert_separator_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
insert_item_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
command_id
:
libc
:
:
c_int
label
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
insert_check_item_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
command_id
:
libc
:
:
c_int
label
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
insert_radio_item_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
command_id
:
libc
:
:
c_int
label
:
*
const
types
:
:
cef_string_t
group_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
insert_sub_menu_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
command_id
:
libc
:
:
c_int
label
:
*
const
types
:
:
cef_string_t
)
-
>
*
mut
interfaces
:
:
cef_menu_model_t
>
pub
remove
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
remove_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
get_index_of
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
get_command_id_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_command_id_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
get_label
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_label_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
)
-
>
types
:
:
cef_string_userfree_t
>
pub
set_label
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
label
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
set_label_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
label
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
get_type
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
)
-
>
types
:
:
cef_menu_item_type_t
>
pub
get_type_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
)
-
>
types
:
:
cef_menu_item_type_t
>
pub
get_group_id
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
get_group_id_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_group_id
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
group_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_group_id_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
group_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
get_sub_menu
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
)
-
>
*
mut
interfaces
:
:
cef_menu_model_t
>
pub
get_sub_menu_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
)
-
>
*
mut
interfaces
:
:
cef_menu_model_t
>
pub
is_visible
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
is_visible_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_visible
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
visible
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_visible_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
visible
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
is_enabled
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
is_enabled_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_enabled
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
enabled
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_enabled_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
enabled
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
is_checked
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
is_checked_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_checked
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
checked
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_checked_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
checked
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
has_accelerator
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
has_accelerator_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_accelerator
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
key_code
:
libc
:
:
c_int
shift_pressed
:
libc
:
:
c_int
ctrl_pressed
:
libc
:
:
c_int
alt_pressed
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_accelerator_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
key_code
:
libc
:
:
c_int
shift_pressed
:
libc
:
:
c_int
ctrl_pressed
:
libc
:
:
c_int
alt_pressed
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
remove_accelerator
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
remove_accelerator_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
get_accelerator
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
command_id
:
libc
:
:
c_int
key_code
:
*
mut
libc
:
:
c_int
shift_pressed
:
*
mut
libc
:
:
c_int
ctrl_pressed
:
*
mut
libc
:
:
c_int
alt_pressed
:
*
mut
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
get_accelerator_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_menu_model_t
index
:
libc
:
:
c_int
key_code
:
*
mut
libc
:
:
c_int
shift_pressed
:
*
mut
libc
:
:
c_int
ctrl_pressed
:
*
mut
libc
:
:
c_int
alt_pressed
:
*
mut
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_menu_model_t
=
_cef_menu_model_t
;
pub
struct
CefMenuModel
{
c_object
:
*
mut
cef_menu_model_t
}
impl
Clone
for
CefMenuModel
{
fn
clone
(
&
self
)
-
>
CefMenuModel
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefMenuModel
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefMenuModel
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefMenuModel
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_menu_model_t
)
-
>
CefMenuModel
{
CefMenuModel
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_menu_model_t
)
-
>
CefMenuModel
{
if
!
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefMenuModel
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_menu_model_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_menu_model_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
clear
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
clear
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_count
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_count
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
add_separator
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
add_separator
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
add_item
(
&
self
command_id
:
libc
:
:
c_int
label
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
add_item
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
CefWrap
:
:
to_c
(
label
)
)
)
}
}
pub
fn
add_check_item
(
&
self
command_id
:
libc
:
:
c_int
label
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
add_check_item
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
CefWrap
:
:
to_c
(
label
)
)
)
}
}
pub
fn
add_radio_item
(
&
self
command_id
:
libc
:
:
c_int
label
:
&
[
u16
]
group_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
add_radio_item
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
CefWrap
:
:
to_c
(
label
)
CefWrap
:
:
to_c
(
group_id
)
)
)
}
}
pub
fn
add_sub_menu
(
&
self
command_id
:
libc
:
:
c_int
label
:
&
[
u16
]
)
-
>
interfaces
:
:
CefMenuModel
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
add_sub_menu
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
CefWrap
:
:
to_c
(
label
)
)
)
}
}
pub
fn
insert_separator_at
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
insert_separator_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
insert_item_at
(
&
self
index
:
libc
:
:
c_int
command_id
:
libc
:
:
c_int
label
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
insert_item_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
command_id
)
CefWrap
:
:
to_c
(
label
)
)
)
}
}
pub
fn
insert_check_item_at
(
&
self
index
:
libc
:
:
c_int
command_id
:
libc
:
:
c_int
label
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
insert_check_item_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
command_id
)
CefWrap
:
:
to_c
(
label
)
)
)
}
}
pub
fn
insert_radio_item_at
(
&
self
index
:
libc
:
:
c_int
command_id
:
libc
:
:
c_int
label
:
&
[
u16
]
group_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
insert_radio_item_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
command_id
)
CefWrap
:
:
to_c
(
label
)
CefWrap
:
:
to_c
(
group_id
)
)
)
}
}
pub
fn
insert_sub_menu_at
(
&
self
index
:
libc
:
:
c_int
command_id
:
libc
:
:
c_int
label
:
&
[
u16
]
)
-
>
interfaces
:
:
CefMenuModel
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
insert_sub_menu_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
command_id
)
CefWrap
:
:
to_c
(
label
)
)
)
}
}
pub
fn
remove
(
&
self
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
remove
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
)
)
}
}
pub
fn
remove_at
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
remove_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
get_index_of
(
&
self
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_index_of
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
)
)
}
}
pub
fn
get_command_id_at
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_command_id_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
set_command_id_at
(
&
self
index
:
libc
:
:
c_int
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_command_id_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
command_id
)
)
)
}
}
pub
fn
get_label
(
&
self
command_id
:
libc
:
:
c_int
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_label
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
)
)
}
}
pub
fn
get_label_at
(
&
self
index
:
libc
:
:
c_int
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_label_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
set_label
(
&
self
command_id
:
libc
:
:
c_int
label
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_label
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
CefWrap
:
:
to_c
(
label
)
)
)
}
}
pub
fn
set_label_at
(
&
self
index
:
libc
:
:
c_int
label
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_label_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
label
)
)
)
}
}
pub
fn
get_type
(
&
self
command_id
:
libc
:
:
c_int
)
-
>
types
:
:
cef_menu_item_type_t
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_type
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
)
)
}
}
pub
fn
get_type_at
(
&
self
index
:
libc
:
:
c_int
)
-
>
types
:
:
cef_menu_item_type_t
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_type_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
get_group_id
(
&
self
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_group_id
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
)
)
}
}
pub
fn
get_group_id_at
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_group_id_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
set_group_id
(
&
self
command_id
:
libc
:
:
c_int
group_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_group_id
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
CefWrap
:
:
to_c
(
group_id
)
)
)
}
}
pub
fn
set_group_id_at
(
&
self
index
:
libc
:
:
c_int
group_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_group_id_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
group_id
)
)
)
}
}
pub
fn
get_sub_menu
(
&
self
command_id
:
libc
:
:
c_int
)
-
>
interfaces
:
:
CefMenuModel
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_sub_menu
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
)
)
}
}
pub
fn
get_sub_menu_at
(
&
self
index
:
libc
:
:
c_int
)
-
>
interfaces
:
:
CefMenuModel
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_sub_menu_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
is_visible
(
&
self
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_visible
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
)
)
}
}
pub
fn
is_visible_at
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_visible_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
set_visible
(
&
self
command_id
:
libc
:
:
c_int
visible
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_visible
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
CefWrap
:
:
to_c
(
visible
)
)
)
}
}
pub
fn
set_visible_at
(
&
self
index
:
libc
:
:
c_int
visible
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_visible_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
visible
)
)
)
}
}
pub
fn
is_enabled
(
&
self
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_enabled
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
)
)
}
}
pub
fn
is_enabled_at
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_enabled_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
set_enabled
(
&
self
command_id
:
libc
:
:
c_int
enabled
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_enabled
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
CefWrap
:
:
to_c
(
enabled
)
)
)
}
}
pub
fn
set_enabled_at
(
&
self
index
:
libc
:
:
c_int
enabled
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_enabled_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
enabled
)
)
)
}
}
pub
fn
is_checked
(
&
self
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_checked
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
)
)
}
}
pub
fn
is_checked_at
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_checked_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
set_checked
(
&
self
command_id
:
libc
:
:
c_int
checked
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_checked
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
CefWrap
:
:
to_c
(
checked
)
)
)
}
}
pub
fn
set_checked_at
(
&
self
index
:
libc
:
:
c_int
checked
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_checked_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
checked
)
)
)
}
}
pub
fn
has_accelerator
(
&
self
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_accelerator
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
)
)
}
}
pub
fn
has_accelerator_at
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_accelerator_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
set_accelerator
(
&
self
command_id
:
libc
:
:
c_int
key_code
:
libc
:
:
c_int
shift_pressed
:
libc
:
:
c_int
ctrl_pressed
:
libc
:
:
c_int
alt_pressed
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_accelerator
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
CefWrap
:
:
to_c
(
key_code
)
CefWrap
:
:
to_c
(
shift_pressed
)
CefWrap
:
:
to_c
(
ctrl_pressed
)
CefWrap
:
:
to_c
(
alt_pressed
)
)
)
}
}
pub
fn
set_accelerator_at
(
&
self
index
:
libc
:
:
c_int
key_code
:
libc
:
:
c_int
shift_pressed
:
libc
:
:
c_int
ctrl_pressed
:
libc
:
:
c_int
alt_pressed
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_accelerator_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
key_code
)
CefWrap
:
:
to_c
(
shift_pressed
)
CefWrap
:
:
to_c
(
ctrl_pressed
)
CefWrap
:
:
to_c
(
alt_pressed
)
)
)
}
}
pub
fn
remove_accelerator
(
&
self
command_id
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
remove_accelerator
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
)
)
}
}
pub
fn
remove_accelerator_at
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
remove_accelerator_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
get_accelerator
(
&
self
command_id
:
libc
:
:
c_int
key_code
:
&
mut
libc
:
:
c_int
shift_pressed
:
&
mut
libc
:
:
c_int
ctrl_pressed
:
&
mut
libc
:
:
c_int
alt_pressed
:
&
mut
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_accelerator
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
command_id
)
CefWrap
:
:
to_c
(
key_code
)
CefWrap
:
:
to_c
(
shift_pressed
)
CefWrap
:
:
to_c
(
ctrl_pressed
)
CefWrap
:
:
to_c
(
alt_pressed
)
)
)
}
}
pub
fn
get_accelerator_at
(
&
self
index
:
libc
:
:
c_int
key_code
:
&
mut
libc
:
:
c_int
shift_pressed
:
&
mut
libc
:
:
c_int
ctrl_pressed
:
&
mut
libc
:
:
c_int
alt_pressed
:
&
mut
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_accelerator_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
key_code
)
CefWrap
:
:
to_c
(
shift_pressed
)
CefWrap
:
:
to_c
(
ctrl_pressed
)
CefWrap
:
:
to_c
(
alt_pressed
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_menu_model_t
>
for
CefMenuModel
{
fn
to_c
(
rust_object
:
CefMenuModel
)
-
>
*
mut
cef_menu_model_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_menu_model_t
)
-
>
CefMenuModel
{
CefMenuModel
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_menu_model_t
>
for
Option
<
CefMenuModel
>
{
fn
to_c
(
rust_object
:
Option
<
CefMenuModel
>
)
-
>
*
mut
cef_menu_model_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_menu_model_t
)
-
>
Option
<
CefMenuModel
>
{
if
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
None
}
else
{
Some
(
CefMenuModel
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
