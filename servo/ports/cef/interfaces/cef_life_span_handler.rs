#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_life_span_handler_t
{
pub
base
:
types
:
:
cef_base_t
pub
on_before_popup
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_life_span_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
frame
:
*
mut
interfaces
:
:
cef_frame_t
target_url
:
*
const
types
:
:
cef_string_t
target_frame_name
:
*
const
types
:
:
cef_string_t
popupFeatures
:
*
const
interfaces
:
:
cef_popup_features_t
windowInfo
:
*
mut
interfaces
:
:
cef_window_info_t
client
:
*
mut
interfaces
:
:
cef_client_t
settings
:
*
mut
interfaces
:
:
cef_browser_settings_t
no_javascript_access
:
*
mut
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
on_after_created
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_life_span_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
)
-
>
(
)
>
pub
run_modal
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_life_span_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
)
-
>
libc
:
:
c_int
>
pub
do_close
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_life_span_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
)
-
>
libc
:
:
c_int
>
pub
on_before_close
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_life_span_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
)
-
>
(
)
>
pub
ref_count
:
uint
pub
extra
:
u8
}
pub
type
cef_life_span_handler_t
=
_cef_life_span_handler_t
;
pub
struct
CefLifeSpanHandler
{
c_object
:
*
mut
cef_life_span_handler_t
}
impl
Clone
for
CefLifeSpanHandler
{
fn
clone
(
&
self
)
-
>
CefLifeSpanHandler
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefLifeSpanHandler
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefLifeSpanHandler
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefLifeSpanHandler
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_life_span_handler_t
)
-
>
CefLifeSpanHandler
{
CefLifeSpanHandler
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_life_span_handler_t
)
-
>
CefLifeSpanHandler
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefLifeSpanHandler
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_life_span_handler_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_life_span_handler_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
on_before_popup
(
&
self
browser
:
interfaces
:
:
CefBrowser
frame
:
interfaces
:
:
CefFrame
target_url
:
&
[
u16
]
target_frame_name
:
&
[
u16
]
popupFeatures
:
&
interfaces
:
:
CefPopupFeatures
windowInfo
:
&
mut
interfaces
:
:
CefWindowInfo
client
:
interfaces
:
:
CefClient
settings
:
&
mut
interfaces
:
:
CefBrowserSettings
no_javascript_access
:
&
mut
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_before_popup
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
frame
)
CefWrap
:
:
to_c
(
target_url
)
CefWrap
:
:
to_c
(
target_frame_name
)
CefWrap
:
:
to_c
(
popupFeatures
)
CefWrap
:
:
to_c
(
windowInfo
)
CefWrap
:
:
to_c
(
client
)
CefWrap
:
:
to_c
(
settings
)
CefWrap
:
:
to_c
(
no_javascript_access
)
)
)
}
}
pub
fn
on_after_created
(
&
self
browser
:
interfaces
:
:
CefBrowser
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_after_created
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
)
)
}
}
pub
fn
run_modal
(
&
self
browser
:
interfaces
:
:
CefBrowser
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
run_modal
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
)
)
}
}
pub
fn
do_close
(
&
self
browser
:
interfaces
:
:
CefBrowser
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
do_close
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
)
)
}
}
pub
fn
on_before_close
(
&
self
browser
:
interfaces
:
:
CefBrowser
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_before_close
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_life_span_handler_t
>
for
CefLifeSpanHandler
{
fn
to_c
(
rust_object
:
CefLifeSpanHandler
)
-
>
*
mut
cef_life_span_handler_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_life_span_handler_t
)
-
>
CefLifeSpanHandler
{
CefLifeSpanHandler
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_life_span_handler_t
>
for
Option
<
CefLifeSpanHandler
>
{
fn
to_c
(
rust_object
:
Option
<
CefLifeSpanHandler
>
)
-
>
*
mut
cef_life_span_handler_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_life_span_handler_t
)
-
>
Option
<
CefLifeSpanHandler
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefLifeSpanHandler
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
