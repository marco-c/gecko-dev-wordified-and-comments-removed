#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
mem
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_print_dialog_callback_t
{
pub
base
:
types
:
:
cef_base_t
pub
cont
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_dialog_callback_t
settings
:
*
mut
interfaces
:
:
cef_print_settings_t
)
-
>
(
)
>
pub
cancel
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_dialog_callback_t
)
-
>
(
)
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_print_dialog_callback_t
=
_cef_print_dialog_callback_t
;
pub
struct
CefPrintDialogCallback
{
c_object
:
*
mut
cef_print_dialog_callback_t
}
impl
Clone
for
CefPrintDialogCallback
{
fn
clone
(
&
self
)
-
>
CefPrintDialogCallback
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefPrintDialogCallback
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefPrintDialogCallback
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefPrintDialogCallback
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_print_dialog_callback_t
)
-
>
CefPrintDialogCallback
{
CefPrintDialogCallback
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_print_dialog_callback_t
)
-
>
CefPrintDialogCallback
{
if
!
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefPrintDialogCallback
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_print_dialog_callback_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_print_dialog_callback_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
cont
(
&
self
settings
:
interfaces
:
:
CefPrintSettings
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
cont
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
settings
)
)
)
}
}
pub
fn
cancel
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
cancel
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_print_dialog_callback_t
>
for
CefPrintDialogCallback
{
fn
to_c
(
rust_object
:
CefPrintDialogCallback
)
-
>
*
mut
cef_print_dialog_callback_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_print_dialog_callback_t
)
-
>
CefPrintDialogCallback
{
CefPrintDialogCallback
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_print_dialog_callback_t
>
for
Option
<
CefPrintDialogCallback
>
{
fn
to_c
(
rust_object
:
Option
<
CefPrintDialogCallback
>
)
-
>
*
mut
cef_print_dialog_callback_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_print_dialog_callback_t
)
-
>
Option
<
CefPrintDialogCallback
>
{
if
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
None
}
else
{
Some
(
CefPrintDialogCallback
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_print_job_callback_t
{
pub
base
:
types
:
:
cef_base_t
pub
cont
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_job_callback_t
)
-
>
(
)
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_print_job_callback_t
=
_cef_print_job_callback_t
;
pub
struct
CefPrintJobCallback
{
c_object
:
*
mut
cef_print_job_callback_t
}
impl
Clone
for
CefPrintJobCallback
{
fn
clone
(
&
self
)
-
>
CefPrintJobCallback
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefPrintJobCallback
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefPrintJobCallback
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefPrintJobCallback
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_print_job_callback_t
)
-
>
CefPrintJobCallback
{
CefPrintJobCallback
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_print_job_callback_t
)
-
>
CefPrintJobCallback
{
if
!
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefPrintJobCallback
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_print_job_callback_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_print_job_callback_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
cont
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
cont
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_print_job_callback_t
>
for
CefPrintJobCallback
{
fn
to_c
(
rust_object
:
CefPrintJobCallback
)
-
>
*
mut
cef_print_job_callback_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_print_job_callback_t
)
-
>
CefPrintJobCallback
{
CefPrintJobCallback
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_print_job_callback_t
>
for
Option
<
CefPrintJobCallback
>
{
fn
to_c
(
rust_object
:
Option
<
CefPrintJobCallback
>
)
-
>
*
mut
cef_print_job_callback_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_print_job_callback_t
)
-
>
Option
<
CefPrintJobCallback
>
{
if
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
None
}
else
{
Some
(
CefPrintJobCallback
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_print_handler_t
{
pub
base
:
types
:
:
cef_base_t
pub
on_print_settings
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_handler_t
settings
:
*
mut
interfaces
:
:
cef_print_settings_t
get_defaults
:
libc
:
:
c_int
)
-
>
(
)
>
pub
on_print_dialog
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_handler_t
has_selection
:
libc
:
:
c_int
callback
:
*
mut
interfaces
:
:
cef_print_dialog_callback_t
)
-
>
libc
:
:
c_int
>
pub
on_print_job
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_handler_t
document_name
:
*
const
types
:
:
cef_string_t
pdf_file_path
:
*
const
types
:
:
cef_string_t
callback
:
*
mut
interfaces
:
:
cef_print_job_callback_t
)
-
>
libc
:
:
c_int
>
pub
on_print_reset
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_handler_t
)
-
>
(
)
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_print_handler_t
=
_cef_print_handler_t
;
pub
struct
CefPrintHandler
{
c_object
:
*
mut
cef_print_handler_t
}
impl
Clone
for
CefPrintHandler
{
fn
clone
(
&
self
)
-
>
CefPrintHandler
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefPrintHandler
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefPrintHandler
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefPrintHandler
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_print_handler_t
)
-
>
CefPrintHandler
{
CefPrintHandler
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_print_handler_t
)
-
>
CefPrintHandler
{
if
!
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefPrintHandler
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_print_handler_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_print_handler_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
on_print_settings
(
&
self
settings
:
interfaces
:
:
CefPrintSettings
get_defaults
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_print_settings
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
settings
)
CefWrap
:
:
to_c
(
get_defaults
)
)
)
}
}
pub
fn
on_print_dialog
(
&
self
has_selection
:
libc
:
:
c_int
callback
:
interfaces
:
:
CefPrintDialogCallback
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_print_dialog
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
has_selection
)
CefWrap
:
:
to_c
(
callback
)
)
)
}
}
pub
fn
on_print_job
(
&
self
document_name
:
&
[
u16
]
pdf_file_path
:
&
[
u16
]
callback
:
interfaces
:
:
CefPrintJobCallback
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_print_job
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
document_name
)
CefWrap
:
:
to_c
(
pdf_file_path
)
CefWrap
:
:
to_c
(
callback
)
)
)
}
}
pub
fn
on_print_reset
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_print_reset
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_print_handler_t
>
for
CefPrintHandler
{
fn
to_c
(
rust_object
:
CefPrintHandler
)
-
>
*
mut
cef_print_handler_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_print_handler_t
)
-
>
CefPrintHandler
{
CefPrintHandler
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_print_handler_t
>
for
Option
<
CefPrintHandler
>
{
fn
to_c
(
rust_object
:
Option
<
CefPrintHandler
>
)
-
>
*
mut
cef_print_handler_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_print_handler_t
)
-
>
Option
<
CefPrintHandler
>
{
if
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
None
}
else
{
Some
(
CefPrintHandler
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
