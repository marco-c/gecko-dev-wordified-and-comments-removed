#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_domvisitor_t
{
pub
base
:
types
:
:
cef_base_t
pub
visit
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domvisitor_t
document
:
*
mut
interfaces
:
:
cef_domdocument_t
)
-
>
(
)
>
pub
ref_count
:
uint
pub
extra
:
u8
}
pub
type
cef_domvisitor_t
=
_cef_domvisitor_t
;
pub
struct
CefDOMVisitor
{
c_object
:
*
mut
cef_domvisitor_t
}
impl
Clone
for
CefDOMVisitor
{
fn
clone
(
&
self
)
-
>
CefDOMVisitor
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefDOMVisitor
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefDOMVisitor
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefDOMVisitor
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_domvisitor_t
)
-
>
CefDOMVisitor
{
CefDOMVisitor
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_domvisitor_t
)
-
>
CefDOMVisitor
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefDOMVisitor
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_domvisitor_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_domvisitor_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
visit
(
&
self
document
:
interfaces
:
:
CefDOMDocument
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
visit
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
document
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_domvisitor_t
>
for
CefDOMVisitor
{
fn
to_c
(
rust_object
:
CefDOMVisitor
)
-
>
*
mut
cef_domvisitor_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_domvisitor_t
)
-
>
CefDOMVisitor
{
CefDOMVisitor
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_domvisitor_t
>
for
Option
<
CefDOMVisitor
>
{
fn
to_c
(
rust_object
:
Option
<
CefDOMVisitor
>
)
-
>
*
mut
cef_domvisitor_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_domvisitor_t
)
-
>
Option
<
CefDOMVisitor
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefDOMVisitor
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_domdocument_t
{
pub
base
:
types
:
:
cef_base_t
pub
get_type
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domdocument_t
)
-
>
types
:
:
cef_dom_document_type_t
>
pub
get_document
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domdocument_t
)
-
>
*
mut
interfaces
:
:
cef_domnode_t
>
pub
get_body
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domdocument_t
)
-
>
*
mut
interfaces
:
:
cef_domnode_t
>
pub
get_head
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domdocument_t
)
-
>
*
mut
interfaces
:
:
cef_domnode_t
>
pub
get_title
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domdocument_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_element_by_id
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domdocument_t
id
:
*
const
types
:
:
cef_string_t
)
-
>
*
mut
interfaces
:
:
cef_domnode_t
>
pub
get_focused_node
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domdocument_t
)
-
>
*
mut
interfaces
:
:
cef_domnode_t
>
pub
has_selection
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domdocument_t
)
-
>
libc
:
:
c_int
>
pub
get_selection_start_node
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domdocument_t
)
-
>
*
mut
interfaces
:
:
cef_domnode_t
>
pub
get_selection_start_offset
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domdocument_t
)
-
>
libc
:
:
c_int
>
pub
get_selection_end_node
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domdocument_t
)
-
>
*
mut
interfaces
:
:
cef_domnode_t
>
pub
get_selection_end_offset
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domdocument_t
)
-
>
libc
:
:
c_int
>
pub
get_selection_as_markup
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domdocument_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_selection_as_text
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domdocument_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_base_url
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domdocument_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_complete_url
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domdocument_t
partialURL
:
*
const
types
:
:
cef_string_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
ref_count
:
uint
pub
extra
:
u8
}
pub
type
cef_domdocument_t
=
_cef_domdocument_t
;
pub
struct
CefDOMDocument
{
c_object
:
*
mut
cef_domdocument_t
}
impl
Clone
for
CefDOMDocument
{
fn
clone
(
&
self
)
-
>
CefDOMDocument
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefDOMDocument
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefDOMDocument
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefDOMDocument
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_domdocument_t
)
-
>
CefDOMDocument
{
CefDOMDocument
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_domdocument_t
)
-
>
CefDOMDocument
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefDOMDocument
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_domdocument_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_domdocument_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
get_type
(
&
self
)
-
>
types
:
:
cef_dom_document_type_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_type
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_document
(
&
self
)
-
>
interfaces
:
:
CefDOMNode
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_document
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_body
(
&
self
)
-
>
interfaces
:
:
CefDOMNode
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_body
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_head
(
&
self
)
-
>
interfaces
:
:
CefDOMNode
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_head
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_title
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_title
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_element_by_id
(
&
self
id
:
&
[
u16
]
)
-
>
interfaces
:
:
CefDOMNode
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_element_by_id
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
id
)
)
)
}
}
pub
fn
get_focused_node
(
&
self
)
-
>
interfaces
:
:
CefDOMNode
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_focused_node
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
has_selection
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_selection
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_selection_start_node
(
&
self
)
-
>
interfaces
:
:
CefDOMNode
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_selection_start_node
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_selection_start_offset
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_selection_start_offset
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_selection_end_node
(
&
self
)
-
>
interfaces
:
:
CefDOMNode
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_selection_end_node
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_selection_end_offset
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_selection_end_offset
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_selection_as_markup
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_selection_as_markup
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_selection_as_text
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_selection_as_text
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_base_url
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_base_url
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_complete_url
(
&
self
partialURL
:
&
[
u16
]
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_complete_url
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
partialURL
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_domdocument_t
>
for
CefDOMDocument
{
fn
to_c
(
rust_object
:
CefDOMDocument
)
-
>
*
mut
cef_domdocument_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_domdocument_t
)
-
>
CefDOMDocument
{
CefDOMDocument
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_domdocument_t
>
for
Option
<
CefDOMDocument
>
{
fn
to_c
(
rust_object
:
Option
<
CefDOMDocument
>
)
-
>
*
mut
cef_domdocument_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_domdocument_t
)
-
>
Option
<
CefDOMDocument
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefDOMDocument
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_domnode_t
{
pub
base
:
types
:
:
cef_base_t
pub
get_type
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
types
:
:
cef_dom_node_type_t
>
pub
is_text
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
libc
:
:
c_int
>
pub
is_element
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
libc
:
:
c_int
>
pub
is_editable
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
libc
:
:
c_int
>
pub
is_form_control_element
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
libc
:
:
c_int
>
pub
get_form_control_element_type
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
is_same
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
that
:
*
mut
interfaces
:
:
cef_domnode_t
)
-
>
libc
:
:
c_int
>
pub
get_name
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_value
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
set_value
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
value
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
get_as_markup
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_document
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
*
mut
interfaces
:
:
cef_domdocument_t
>
pub
get_parent
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
*
mut
interfaces
:
:
cef_domnode_t
>
pub
get_previous_sibling
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
*
mut
interfaces
:
:
cef_domnode_t
>
pub
get_next_sibling
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
*
mut
interfaces
:
:
cef_domnode_t
>
pub
has_children
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
libc
:
:
c_int
>
pub
get_first_child
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
*
mut
interfaces
:
:
cef_domnode_t
>
pub
get_last_child
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
*
mut
interfaces
:
:
cef_domnode_t
>
pub
get_element_tag_name
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
has_element_attributes
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
libc
:
:
c_int
>
pub
has_element_attribute
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
attrName
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
get_element_attribute
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
attrName
:
*
const
types
:
:
cef_string_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_element_attributes
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
attrMap
:
types
:
:
cef_string_map_t
)
-
>
(
)
>
pub
set_element_attribute
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
attrName
:
*
const
types
:
:
cef_string_t
value
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
get_element_inner_text
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_domnode_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
ref_count
:
uint
pub
extra
:
u8
}
pub
type
cef_domnode_t
=
_cef_domnode_t
;
pub
struct
CefDOMNode
{
c_object
:
*
mut
cef_domnode_t
}
impl
Clone
for
CefDOMNode
{
fn
clone
(
&
self
)
-
>
CefDOMNode
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefDOMNode
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefDOMNode
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefDOMNode
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_domnode_t
)
-
>
CefDOMNode
{
CefDOMNode
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_domnode_t
)
-
>
CefDOMNode
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefDOMNode
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_domnode_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_domnode_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
get_type
(
&
self
)
-
>
types
:
:
cef_dom_node_type_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_type
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_text
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_text
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_element
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_element
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_editable
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_editable
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_form_control_element
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_form_control_element
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_form_control_element_type
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_form_control_element_type
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_same
(
&
self
that
:
interfaces
:
:
CefDOMNode
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_same
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
that
)
)
)
}
}
pub
fn
get_name
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_name
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_value
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_value
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_value
(
&
self
value
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_value
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
get_as_markup
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_as_markup
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_document
(
&
self
)
-
>
interfaces
:
:
CefDOMDocument
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_document
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_parent
(
&
self
)
-
>
interfaces
:
:
CefDOMNode
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_parent
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_previous_sibling
(
&
self
)
-
>
interfaces
:
:
CefDOMNode
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_previous_sibling
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_next_sibling
(
&
self
)
-
>
interfaces
:
:
CefDOMNode
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_next_sibling
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
has_children
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_children
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_first_child
(
&
self
)
-
>
interfaces
:
:
CefDOMNode
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_first_child
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_last_child
(
&
self
)
-
>
interfaces
:
:
CefDOMNode
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_last_child
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_element_tag_name
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_element_tag_name
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
has_element_attributes
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_element_attributes
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
has_element_attribute
(
&
self
attrName
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_element_attribute
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
attrName
)
)
)
}
}
pub
fn
get_element_attribute
(
&
self
attrName
:
&
[
u16
]
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_element_attribute
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
attrName
)
)
)
}
}
pub
fn
get_element_attributes
(
&
self
attrMap
:
HashMap
<
String
String
>
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_element_attributes
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
attrMap
)
)
)
}
}
pub
fn
set_element_attribute
(
&
self
attrName
:
&
[
u16
]
value
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_element_attribute
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
attrName
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
get_element_inner_text
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_element_inner_text
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_domnode_t
>
for
CefDOMNode
{
fn
to_c
(
rust_object
:
CefDOMNode
)
-
>
*
mut
cef_domnode_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_domnode_t
)
-
>
CefDOMNode
{
CefDOMNode
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_domnode_t
>
for
Option
<
CefDOMNode
>
{
fn
to_c
(
rust_object
:
Option
<
CefDOMNode
>
)
-
>
*
mut
cef_domnode_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_domnode_t
)
-
>
Option
<
CefDOMNode
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefDOMNode
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
