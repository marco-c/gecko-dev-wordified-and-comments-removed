#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
mem
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_request_callback_t
{
pub
base
:
types
:
:
cef_base_t
pub
cont
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_callback_t
allow
:
libc
:
:
c_int
)
-
>
(
)
>
pub
cancel
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_callback_t
)
-
>
(
)
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_request_callback_t
=
_cef_request_callback_t
;
pub
struct
CefRequestCallback
{
c_object
:
*
mut
cef_request_callback_t
}
impl
Clone
for
CefRequestCallback
{
fn
clone
(
&
self
)
-
>
CefRequestCallback
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefRequestCallback
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefRequestCallback
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefRequestCallback
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_request_callback_t
)
-
>
CefRequestCallback
{
CefRequestCallback
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_request_callback_t
)
-
>
CefRequestCallback
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefRequestCallback
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_request_callback_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_request_callback_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
cont
(
&
self
allow
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
cont
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
allow
)
)
)
}
}
pub
fn
cancel
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
cancel
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_request_callback_t
>
for
CefRequestCallback
{
fn
to_c
(
rust_object
:
CefRequestCallback
)
-
>
*
mut
cef_request_callback_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_request_callback_t
)
-
>
CefRequestCallback
{
CefRequestCallback
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_request_callback_t
>
for
Option
<
CefRequestCallback
>
{
fn
to_c
(
rust_object
:
Option
<
CefRequestCallback
>
)
-
>
*
mut
cef_request_callback_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_request_callback_t
)
-
>
Option
<
CefRequestCallback
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefRequestCallback
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_request_handler_t
{
pub
base
:
types
:
:
cef_base_t
pub
on_before_browse
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
frame
:
*
mut
interfaces
:
:
cef_frame_t
request
:
*
mut
interfaces
:
:
cef_request_t
is_redirect
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
on_open_urlfrom_tab
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
frame
:
*
mut
interfaces
:
:
cef_frame_t
target_url
:
*
const
types
:
:
cef_string_t
target_disposition
:
types
:
:
cef_window_open_disposition_t
user_gesture
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
on_before_resource_load
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
frame
:
*
mut
interfaces
:
:
cef_frame_t
request
:
*
mut
interfaces
:
:
cef_request_t
callback
:
*
mut
interfaces
:
:
cef_request_callback_t
)
-
>
types
:
:
cef_return_value_t
>
pub
get_resource_handler
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
frame
:
*
mut
interfaces
:
:
cef_frame_t
request
:
*
mut
interfaces
:
:
cef_request_t
)
-
>
*
mut
interfaces
:
:
cef_resource_handler_t
>
pub
on_resource_redirect
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
frame
:
*
mut
interfaces
:
:
cef_frame_t
request
:
*
mut
interfaces
:
:
cef_request_t
new_url
:
*
mut
types
:
:
cef_string_t
)
-
>
(
)
>
pub
on_resource_response
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
frame
:
*
mut
interfaces
:
:
cef_frame_t
request
:
*
mut
interfaces
:
:
cef_request_t
response
:
*
mut
interfaces
:
:
cef_response_t
)
-
>
libc
:
:
c_int
>
pub
get_auth_credentials
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
frame
:
*
mut
interfaces
:
:
cef_frame_t
isProxy
:
libc
:
:
c_int
host
:
*
const
types
:
:
cef_string_t
port
:
libc
:
:
c_int
realm
:
*
const
types
:
:
cef_string_t
scheme
:
*
const
types
:
:
cef_string_t
callback
:
*
mut
interfaces
:
:
cef_auth_callback_t
)
-
>
libc
:
:
c_int
>
pub
on_quota_request
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
origin_url
:
*
const
types
:
:
cef_string_t
new_size
:
i64
callback
:
*
mut
interfaces
:
:
cef_request_callback_t
)
-
>
libc
:
:
c_int
>
pub
on_protocol_execution
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
url
:
*
const
types
:
:
cef_string_t
allow_os_execution
:
*
mut
libc
:
:
c_int
)
-
>
(
)
>
pub
on_certificate_error
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
cert_error
:
types
:
:
cef_errorcode_t
request_url
:
*
const
types
:
:
cef_string_t
ssl_info
:
*
mut
interfaces
:
:
cef_sslinfo_t
callback
:
*
mut
interfaces
:
:
cef_request_callback_t
)
-
>
libc
:
:
c_int
>
pub
on_before_plugin_load
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
url
:
*
const
types
:
:
cef_string_t
policy_url
:
*
const
types
:
:
cef_string_t
info
:
*
mut
interfaces
:
:
cef_web_plugin_info_t
)
-
>
libc
:
:
c_int
>
pub
on_plugin_crashed
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
plugin_path
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
on_render_view_ready
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
)
-
>
(
)
>
pub
on_render_process_terminated
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
status
:
types
:
:
cef_termination_status_t
)
-
>
(
)
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_request_handler_t
=
_cef_request_handler_t
;
pub
struct
CefRequestHandler
{
c_object
:
*
mut
cef_request_handler_t
}
impl
Clone
for
CefRequestHandler
{
fn
clone
(
&
self
)
-
>
CefRequestHandler
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefRequestHandler
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefRequestHandler
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefRequestHandler
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_request_handler_t
)
-
>
CefRequestHandler
{
CefRequestHandler
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_request_handler_t
)
-
>
CefRequestHandler
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefRequestHandler
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_request_handler_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_request_handler_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
on_before_browse
(
&
self
browser
:
interfaces
:
:
CefBrowser
frame
:
interfaces
:
:
CefFrame
request
:
interfaces
:
:
CefRequest
is_redirect
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_before_browse
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
frame
)
CefWrap
:
:
to_c
(
request
)
CefWrap
:
:
to_c
(
is_redirect
)
)
)
}
}
pub
fn
on_open_urlfrom_tab
(
&
self
browser
:
interfaces
:
:
CefBrowser
frame
:
interfaces
:
:
CefFrame
target_url
:
&
[
u16
]
target_disposition
:
types
:
:
cef_window_open_disposition_t
user_gesture
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_open_urlfrom_tab
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
frame
)
CefWrap
:
:
to_c
(
target_url
)
CefWrap
:
:
to_c
(
target_disposition
)
CefWrap
:
:
to_c
(
user_gesture
)
)
)
}
}
pub
fn
on_before_resource_load
(
&
self
browser
:
interfaces
:
:
CefBrowser
frame
:
interfaces
:
:
CefFrame
request
:
interfaces
:
:
CefRequest
callback
:
interfaces
:
:
CefRequestCallback
)
-
>
types
:
:
cef_return_value_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_before_resource_load
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
frame
)
CefWrap
:
:
to_c
(
request
)
CefWrap
:
:
to_c
(
callback
)
)
)
}
}
pub
fn
get_resource_handler
(
&
self
browser
:
interfaces
:
:
CefBrowser
frame
:
interfaces
:
:
CefFrame
request
:
interfaces
:
:
CefRequest
)
-
>
interfaces
:
:
CefResourceHandler
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_resource_handler
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
frame
)
CefWrap
:
:
to_c
(
request
)
)
)
}
}
pub
fn
on_resource_redirect
(
&
self
browser
:
interfaces
:
:
CefBrowser
frame
:
interfaces
:
:
CefFrame
request
:
interfaces
:
:
CefRequest
new_url
:
*
mut
types
:
:
cef_string_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_resource_redirect
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
frame
)
CefWrap
:
:
to_c
(
request
)
CefWrap
:
:
to_c
(
new_url
)
)
)
}
}
pub
fn
on_resource_response
(
&
self
browser
:
interfaces
:
:
CefBrowser
frame
:
interfaces
:
:
CefFrame
request
:
interfaces
:
:
CefRequest
response
:
interfaces
:
:
CefResponse
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_resource_response
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
frame
)
CefWrap
:
:
to_c
(
request
)
CefWrap
:
:
to_c
(
response
)
)
)
}
}
pub
fn
get_auth_credentials
(
&
self
browser
:
interfaces
:
:
CefBrowser
frame
:
interfaces
:
:
CefFrame
isProxy
:
libc
:
:
c_int
host
:
&
[
u16
]
port
:
libc
:
:
c_int
realm
:
&
[
u16
]
scheme
:
&
[
u16
]
callback
:
interfaces
:
:
CefAuthCallback
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_auth_credentials
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
frame
)
CefWrap
:
:
to_c
(
isProxy
)
CefWrap
:
:
to_c
(
host
)
CefWrap
:
:
to_c
(
port
)
CefWrap
:
:
to_c
(
realm
)
CefWrap
:
:
to_c
(
scheme
)
CefWrap
:
:
to_c
(
callback
)
)
)
}
}
pub
fn
on_quota_request
(
&
self
browser
:
interfaces
:
:
CefBrowser
origin_url
:
&
[
u16
]
new_size
:
i64
callback
:
interfaces
:
:
CefRequestCallback
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_quota_request
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
origin_url
)
CefWrap
:
:
to_c
(
new_size
)
CefWrap
:
:
to_c
(
callback
)
)
)
}
}
pub
fn
on_protocol_execution
(
&
self
browser
:
interfaces
:
:
CefBrowser
url
:
&
[
u16
]
allow_os_execution
:
&
mut
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_protocol_execution
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
url
)
CefWrap
:
:
to_c
(
allow_os_execution
)
)
)
}
}
pub
fn
on_certificate_error
(
&
self
browser
:
interfaces
:
:
CefBrowser
cert_error
:
types
:
:
cef_errorcode_t
request_url
:
&
[
u16
]
ssl_info
:
interfaces
:
:
CefSSLInfo
callback
:
interfaces
:
:
CefRequestCallback
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_certificate_error
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
cert_error
)
CefWrap
:
:
to_c
(
request_url
)
CefWrap
:
:
to_c
(
ssl_info
)
CefWrap
:
:
to_c
(
callback
)
)
)
}
}
pub
fn
on_before_plugin_load
(
&
self
browser
:
interfaces
:
:
CefBrowser
url
:
&
[
u16
]
policy_url
:
&
[
u16
]
info
:
interfaces
:
:
CefWebPluginInfo
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_before_plugin_load
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
url
)
CefWrap
:
:
to_c
(
policy_url
)
CefWrap
:
:
to_c
(
info
)
)
)
}
}
pub
fn
on_plugin_crashed
(
&
self
browser
:
interfaces
:
:
CefBrowser
plugin_path
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_plugin_crashed
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
plugin_path
)
)
)
}
}
pub
fn
on_render_view_ready
(
&
self
browser
:
interfaces
:
:
CefBrowser
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_render_view_ready
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
)
)
}
}
pub
fn
on_render_process_terminated
(
&
self
browser
:
interfaces
:
:
CefBrowser
status
:
types
:
:
cef_termination_status_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_render_process_terminated
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
status
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_request_handler_t
>
for
CefRequestHandler
{
fn
to_c
(
rust_object
:
CefRequestHandler
)
-
>
*
mut
cef_request_handler_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_request_handler_t
)
-
>
CefRequestHandler
{
CefRequestHandler
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_request_handler_t
>
for
Option
<
CefRequestHandler
>
{
fn
to_c
(
rust_object
:
Option
<
CefRequestHandler
>
)
-
>
*
mut
cef_request_handler_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_request_handler_t
)
-
>
Option
<
CefRequestHandler
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefRequestHandler
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
