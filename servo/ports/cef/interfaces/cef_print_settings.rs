#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
mem
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_print_settings_t
{
pub
base
:
types
:
:
cef_base_t
pub
is_valid
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
)
-
>
libc
:
:
c_int
>
pub
is_read_only
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
)
-
>
libc
:
:
c_int
>
pub
copy
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
)
-
>
*
mut
interfaces
:
:
cef_print_settings_t
>
pub
set_orientation
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
landscape
:
libc
:
:
c_int
)
-
>
(
)
>
pub
is_landscape
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
)
-
>
libc
:
:
c_int
>
pub
set_printer_printable_area
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
physical_size_device_units
:
*
const
types
:
:
cef_size_t
printable_area_device_units
:
*
const
types
:
:
cef_rect_t
landscape_needs_flip
:
libc
:
:
c_int
)
-
>
(
)
>
pub
set_device_name
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
name
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
get_device_name
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
set_dpi
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
dpi
:
libc
:
:
c_int
)
-
>
(
)
>
pub
get_dpi
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
)
-
>
libc
:
:
c_int
>
pub
set_page_ranges
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
ranges_count
:
libc
:
:
size_t
ranges
:
*
const
types
:
:
cef_page_range_t
)
-
>
(
)
>
pub
get_page_ranges_count
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
)
-
>
libc
:
:
size_t
>
pub
get_page_ranges
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
ranges_count
:
*
mut
libc
:
:
size_t
ranges
:
*
mut
types
:
:
cef_page_range_t
)
-
>
(
)
>
pub
set_selection_only
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
selection_only
:
libc
:
:
c_int
)
-
>
(
)
>
pub
is_selection_only
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
)
-
>
libc
:
:
c_int
>
pub
set_collate
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
collate
:
libc
:
:
c_int
)
-
>
(
)
>
pub
will_collate
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
)
-
>
libc
:
:
c_int
>
pub
set_color_model
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
model
:
types
:
:
cef_color_model_t
)
-
>
(
)
>
pub
get_color_model
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
)
-
>
types
:
:
cef_color_model_t
>
pub
set_copies
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
copies
:
libc
:
:
c_int
)
-
>
(
)
>
pub
get_copies
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
)
-
>
libc
:
:
c_int
>
pub
set_duplex_mode
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
mode
:
types
:
:
cef_duplex_mode_t
)
-
>
(
)
>
pub
get_duplex_mode
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_print_settings_t
)
-
>
types
:
:
cef_duplex_mode_t
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_print_settings_t
=
_cef_print_settings_t
;
pub
struct
CefPrintSettings
{
c_object
:
*
mut
cef_print_settings_t
}
impl
Clone
for
CefPrintSettings
{
fn
clone
(
&
self
)
-
>
CefPrintSettings
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefPrintSettings
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefPrintSettings
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefPrintSettings
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_print_settings_t
)
-
>
CefPrintSettings
{
CefPrintSettings
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_print_settings_t
)
-
>
CefPrintSettings
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefPrintSettings
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_print_settings_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_print_settings_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
is_valid
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_valid
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_read_only
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_read_only
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
copy
(
&
self
)
-
>
interfaces
:
:
CefPrintSettings
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
copy
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_orientation
(
&
self
landscape
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_orientation
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
landscape
)
)
)
}
}
pub
fn
is_landscape
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_landscape
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_printer_printable_area
(
&
self
physical_size_device_units
:
&
types
:
:
cef_size_t
printable_area_device_units
:
&
types
:
:
cef_rect_t
landscape_needs_flip
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_printer_printable_area
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
physical_size_device_units
)
CefWrap
:
:
to_c
(
printable_area_device_units
)
CefWrap
:
:
to_c
(
landscape_needs_flip
)
)
)
}
}
pub
fn
set_device_name
(
&
self
name
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_device_name
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
name
)
)
)
}
}
pub
fn
get_device_name
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_device_name
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_dpi
(
&
self
dpi
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_dpi
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
dpi
)
)
)
}
}
pub
fn
get_dpi
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_dpi
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_page_ranges
(
&
self
ranges_count
:
libc
:
:
size_t
ranges
:
*
const
types
:
:
cef_page_range_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_page_ranges
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
ranges_count
)
CefWrap
:
:
to_c
(
ranges
)
)
)
}
}
pub
fn
get_page_ranges_count
(
&
self
)
-
>
libc
:
:
size_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_page_ranges_count
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_page_ranges
(
&
self
ranges_count
:
*
mut
libc
:
:
size_t
ranges
:
*
mut
types
:
:
cef_page_range_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_page_ranges
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
ranges_count
)
CefWrap
:
:
to_c
(
ranges
)
)
)
}
}
pub
fn
set_selection_only
(
&
self
selection_only
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_selection_only
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
selection_only
)
)
)
}
}
pub
fn
is_selection_only
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_selection_only
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_collate
(
&
self
collate
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_collate
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
collate
)
)
)
}
}
pub
fn
will_collate
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
will_collate
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_color_model
(
&
self
model
:
types
:
:
cef_color_model_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_color_model
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
model
)
)
)
}
}
pub
fn
get_color_model
(
&
self
)
-
>
types
:
:
cef_color_model_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_color_model
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_copies
(
&
self
copies
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_copies
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
copies
)
)
)
}
}
pub
fn
get_copies
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_copies
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_duplex_mode
(
&
self
mode
:
types
:
:
cef_duplex_mode_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_duplex_mode
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
mode
)
)
)
}
}
pub
fn
get_duplex_mode
(
&
self
)
-
>
types
:
:
cef_duplex_mode_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_duplex_mode
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
create
(
)
-
>
interfaces
:
:
CefPrintSettings
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
print_settings
:
:
cef_print_settings_create
(
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_print_settings_t
>
for
CefPrintSettings
{
fn
to_c
(
rust_object
:
CefPrintSettings
)
-
>
*
mut
cef_print_settings_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_print_settings_t
)
-
>
CefPrintSettings
{
CefPrintSettings
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_print_settings_t
>
for
Option
<
CefPrintSettings
>
{
fn
to_c
(
rust_object
:
Option
<
CefPrintSettings
>
)
-
>
*
mut
cef_print_settings_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_print_settings_t
)
-
>
Option
<
CefPrintSettings
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefPrintSettings
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
