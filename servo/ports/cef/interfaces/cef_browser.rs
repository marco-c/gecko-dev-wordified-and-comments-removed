#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
mem
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_browser_t
{
pub
base
:
types
:
:
cef_base_t
pub
get_host
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
)
-
>
*
mut
interfaces
:
:
cef_browser_host_t
>
pub
can_go_back
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
)
-
>
libc
:
:
c_int
>
pub
go_back
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
)
-
>
(
)
>
pub
can_go_forward
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
)
-
>
libc
:
:
c_int
>
pub
go_forward
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
)
-
>
(
)
>
pub
is_loading
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
)
-
>
libc
:
:
c_int
>
pub
reload
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
)
-
>
(
)
>
pub
reload_ignore_cache
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
)
-
>
(
)
>
pub
stop_load
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
)
-
>
(
)
>
pub
get_identifier
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
)
-
>
libc
:
:
c_int
>
pub
is_same
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
that
:
*
mut
interfaces
:
:
cef_browser_t
)
-
>
libc
:
:
c_int
>
pub
is_popup
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
)
-
>
libc
:
:
c_int
>
pub
has_document
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
)
-
>
libc
:
:
c_int
>
pub
get_main_frame
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
)
-
>
*
mut
interfaces
:
:
cef_frame_t
>
pub
get_focused_frame
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
)
-
>
*
mut
interfaces
:
:
cef_frame_t
>
pub
get_frame_byident
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
identifier
:
i64
)
-
>
*
mut
interfaces
:
:
cef_frame_t
>
pub
get_frame
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
name
:
*
const
types
:
:
cef_string_t
)
-
>
*
mut
interfaces
:
:
cef_frame_t
>
pub
get_frame_count
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
)
-
>
libc
:
:
size_t
>
pub
get_frame_identifiers
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
identifiers_count
:
*
mut
libc
:
:
size_t
identifiers
:
*
mut
i64
)
-
>
(
)
>
pub
get_frame_names
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
names
:
types
:
:
cef_string_list_t
)
-
>
(
)
>
pub
send_process_message
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_t
target_process
:
interfaces
:
:
cef_process_id_t
message
:
*
mut
interfaces
:
:
cef_process_message_t
)
-
>
libc
:
:
c_int
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_browser_t
=
_cef_browser_t
;
pub
struct
CefBrowser
{
c_object
:
*
mut
cef_browser_t
}
impl
Clone
for
CefBrowser
{
fn
clone
(
&
self
)
-
>
CefBrowser
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefBrowser
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefBrowser
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefBrowser
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_browser_t
)
-
>
CefBrowser
{
CefBrowser
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_browser_t
)
-
>
CefBrowser
{
if
!
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefBrowser
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_browser_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_browser_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
get_host
(
&
self
)
-
>
interfaces
:
:
CefBrowserHost
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_host
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
can_go_back
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
can_go_back
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
go_back
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
go_back
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
can_go_forward
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
can_go_forward
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
go_forward
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
go_forward
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_loading
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_loading
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
reload
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
reload
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
reload_ignore_cache
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
reload_ignore_cache
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
stop_load
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
stop_load
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_identifier
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_identifier
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_same
(
&
self
that
:
interfaces
:
:
CefBrowser
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_same
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
that
)
)
)
}
}
pub
fn
is_popup
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_popup
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
has_document
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_document
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_main_frame
(
&
self
)
-
>
interfaces
:
:
CefFrame
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_main_frame
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_focused_frame
(
&
self
)
-
>
interfaces
:
:
CefFrame
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_focused_frame
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_frame_byident
(
&
self
identifier
:
i64
)
-
>
interfaces
:
:
CefFrame
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_frame_byident
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
identifier
)
)
)
}
}
pub
fn
get_frame
(
&
self
name
:
&
[
u16
]
)
-
>
interfaces
:
:
CefFrame
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_frame
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
name
)
)
)
}
}
pub
fn
get_frame_count
(
&
self
)
-
>
libc
:
:
size_t
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_frame_count
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_frame_identifiers
(
&
self
identifiers_count
:
*
mut
libc
:
:
size_t
identifiers
:
*
mut
i64
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_frame_identifiers
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
identifiers_count
)
CefWrap
:
:
to_c
(
identifiers
)
)
)
}
}
pub
fn
get_frame_names
(
&
self
names
:
Vec
<
String
>
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_frame_names
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
names
)
)
)
}
}
pub
fn
send_process_message
(
&
self
target_process
:
interfaces
:
:
CefProcessId
message
:
interfaces
:
:
CefProcessMessage
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
send_process_message
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
target_process
)
CefWrap
:
:
to_c
(
message
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_browser_t
>
for
CefBrowser
{
fn
to_c
(
rust_object
:
CefBrowser
)
-
>
*
mut
cef_browser_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_browser_t
)
-
>
CefBrowser
{
CefBrowser
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_browser_t
>
for
Option
<
CefBrowser
>
{
fn
to_c
(
rust_object
:
Option
<
CefBrowser
>
)
-
>
*
mut
cef_browser_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_browser_t
)
-
>
Option
<
CefBrowser
>
{
if
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
None
}
else
{
Some
(
CefBrowser
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_run_file_dialog_callback_t
{
pub
base
:
types
:
:
cef_base_t
pub
on_file_dialog_dismissed
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_run_file_dialog_callback_t
selected_accept_filter
:
libc
:
:
c_int
file_paths
:
types
:
:
cef_string_list_t
)
-
>
(
)
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_run_file_dialog_callback_t
=
_cef_run_file_dialog_callback_t
;
pub
struct
CefRunFileDialogCallback
{
c_object
:
*
mut
cef_run_file_dialog_callback_t
}
impl
Clone
for
CefRunFileDialogCallback
{
fn
clone
(
&
self
)
-
>
CefRunFileDialogCallback
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefRunFileDialogCallback
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefRunFileDialogCallback
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefRunFileDialogCallback
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_run_file_dialog_callback_t
)
-
>
CefRunFileDialogCallback
{
CefRunFileDialogCallback
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_run_file_dialog_callback_t
)
-
>
CefRunFileDialogCallback
{
if
!
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefRunFileDialogCallback
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_run_file_dialog_callback_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_run_file_dialog_callback_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
on_file_dialog_dismissed
(
&
self
selected_accept_filter
:
libc
:
:
c_int
file_paths
:
Vec
<
String
>
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_file_dialog_dismissed
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
selected_accept_filter
)
CefWrap
:
:
to_c
(
file_paths
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_run_file_dialog_callback_t
>
for
CefRunFileDialogCallback
{
fn
to_c
(
rust_object
:
CefRunFileDialogCallback
)
-
>
*
mut
cef_run_file_dialog_callback_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_run_file_dialog_callback_t
)
-
>
CefRunFileDialogCallback
{
CefRunFileDialogCallback
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_run_file_dialog_callback_t
>
for
Option
<
CefRunFileDialogCallback
>
{
fn
to_c
(
rust_object
:
Option
<
CefRunFileDialogCallback
>
)
-
>
*
mut
cef_run_file_dialog_callback_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_run_file_dialog_callback_t
)
-
>
Option
<
CefRunFileDialogCallback
>
{
if
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
None
}
else
{
Some
(
CefRunFileDialogCallback
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_navigation_entry_visitor_t
{
pub
base
:
types
:
:
cef_base_t
pub
visit
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_navigation_entry_visitor_t
entry
:
*
mut
interfaces
:
:
cef_navigation_entry_t
current
:
libc
:
:
c_int
index
:
libc
:
:
c_int
total
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_navigation_entry_visitor_t
=
_cef_navigation_entry_visitor_t
;
pub
struct
CefNavigationEntryVisitor
{
c_object
:
*
mut
cef_navigation_entry_visitor_t
}
impl
Clone
for
CefNavigationEntryVisitor
{
fn
clone
(
&
self
)
-
>
CefNavigationEntryVisitor
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefNavigationEntryVisitor
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefNavigationEntryVisitor
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefNavigationEntryVisitor
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_navigation_entry_visitor_t
)
-
>
CefNavigationEntryVisitor
{
CefNavigationEntryVisitor
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_navigation_entry_visitor_t
)
-
>
CefNavigationEntryVisitor
{
if
!
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefNavigationEntryVisitor
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_navigation_entry_visitor_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_navigation_entry_visitor_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
visit
(
&
self
entry
:
interfaces
:
:
CefNavigationEntry
current
:
libc
:
:
c_int
index
:
libc
:
:
c_int
total
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
visit
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
entry
)
CefWrap
:
:
to_c
(
current
)
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
total
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_navigation_entry_visitor_t
>
for
CefNavigationEntryVisitor
{
fn
to_c
(
rust_object
:
CefNavigationEntryVisitor
)
-
>
*
mut
cef_navigation_entry_visitor_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_navigation_entry_visitor_t
)
-
>
CefNavigationEntryVisitor
{
CefNavigationEntryVisitor
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_navigation_entry_visitor_t
>
for
Option
<
CefNavigationEntryVisitor
>
{
fn
to_c
(
rust_object
:
Option
<
CefNavigationEntryVisitor
>
)
-
>
*
mut
cef_navigation_entry_visitor_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_navigation_entry_visitor_t
)
-
>
Option
<
CefNavigationEntryVisitor
>
{
if
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
None
}
else
{
Some
(
CefNavigationEntryVisitor
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_browser_host_t
{
pub
base
:
types
:
:
cef_base_t
pub
get_browser
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
*
mut
interfaces
:
:
cef_browser_t
>
pub
close_browser
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
force_close
:
libc
:
:
c_int
)
-
>
(
)
>
pub
set_focus
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
focus
:
libc
:
:
c_int
)
-
>
(
)
>
pub
set_window_visibility
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
visible
:
libc
:
:
c_int
)
-
>
(
)
>
pub
get_window_handle
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
types
:
:
cef_window_handle_t
>
pub
get_opener_window_handle
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
types
:
:
cef_window_handle_t
>
pub
get_client
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
*
mut
interfaces
:
:
cef_client_t
>
pub
get_request_context
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
*
mut
interfaces
:
:
cef_request_context_t
>
pub
get_zoom_level
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
libc
:
:
c_double
>
pub
set_zoom_level
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
zoomLevel
:
libc
:
:
c_double
)
-
>
(
)
>
pub
run_file_dialog
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
mode
:
types
:
:
cef_file_dialog_mode_t
title
:
*
const
types
:
:
cef_string_t
default_file_path
:
*
const
types
:
:
cef_string_t
accept_filters
:
types
:
:
cef_string_list_t
selected_accept_filter
:
libc
:
:
c_int
callback
:
*
mut
interfaces
:
:
cef_run_file_dialog_callback_t
)
-
>
(
)
>
pub
start_download
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
url
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
print
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
(
)
>
pub
find
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
identifier
:
libc
:
:
c_int
searchText
:
*
const
types
:
:
cef_string_t
forward
:
libc
:
:
c_int
matchCase
:
libc
:
:
c_int
findNext
:
libc
:
:
c_int
)
-
>
(
)
>
pub
stop_finding
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
clearSelection
:
libc
:
:
c_int
)
-
>
(
)
>
pub
show_dev_tools
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
windowInfo
:
*
const
interfaces
:
:
cef_window_info_t
client
:
*
mut
interfaces
:
:
cef_client_t
settings
:
*
const
interfaces
:
:
cef_browser_settings_t
inspect_element_at
:
*
const
types
:
:
cef_point_t
)
-
>
(
)
>
pub
close_dev_tools
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
(
)
>
pub
get_navigation_entries
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
visitor
:
*
mut
interfaces
:
:
cef_navigation_entry_visitor_t
current_only
:
libc
:
:
c_int
)
-
>
(
)
>
pub
set_mouse_cursor_change_disabled
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
disabled
:
libc
:
:
c_int
)
-
>
(
)
>
pub
is_mouse_cursor_change_disabled
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
libc
:
:
c_int
>
pub
replace_misspelling
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
word
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
add_word_to_dictionary
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
word
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
is_window_rendering_disabled
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
libc
:
:
c_int
>
pub
was_resized
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
(
)
>
pub
was_hidden
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
hidden
:
libc
:
:
c_int
)
-
>
(
)
>
pub
notify_screen_info_changed
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
(
)
>
pub
invalidate
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
ty
:
types
:
:
cef_paint_element_type_t
)
-
>
(
)
>
pub
send_key_event
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
event
:
*
const
interfaces
:
:
cef_key_event_t
)
-
>
(
)
>
pub
send_mouse_click_event
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
event
:
*
const
interfaces
:
:
cef_mouse_event_t
ty
:
types
:
:
cef_mouse_button_type_t
mouseUp
:
libc
:
:
c_int
clickCount
:
libc
:
:
c_int
)
-
>
(
)
>
pub
send_mouse_move_event
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
event
:
*
const
interfaces
:
:
cef_mouse_event_t
mouseLeave
:
libc
:
:
c_int
)
-
>
(
)
>
pub
send_mouse_wheel_event
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
event
:
*
const
interfaces
:
:
cef_mouse_event_t
deltaX
:
libc
:
:
c_int
deltaY
:
libc
:
:
c_int
)
-
>
(
)
>
pub
send_focus_event
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
setFocus
:
libc
:
:
c_int
)
-
>
(
)
>
pub
send_capture_lost_event
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
(
)
>
pub
notify_move_or_resize_started
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
(
)
>
pub
get_nstext_input_context
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
types
:
:
cef_text_input_context_t
>
pub
handle_key_event_before_text_input_client
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
keyEvent
:
types
:
:
cef_event_handle_t
)
-
>
(
)
>
pub
handle_key_event_after_text_input_client
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
keyEvent
:
types
:
:
cef_event_handle_t
)
-
>
(
)
>
pub
drag_target_drag_enter
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
drag_data
:
*
mut
interfaces
:
:
cef_drag_data_t
event
:
*
const
interfaces
:
:
cef_mouse_event_t
allowed_ops
:
types
:
:
cef_drag_operations_mask_t
)
-
>
(
)
>
pub
drag_target_drag_over
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
event
:
*
const
interfaces
:
:
cef_mouse_event_t
allowed_ops
:
types
:
:
cef_drag_operations_mask_t
)
-
>
(
)
>
pub
drag_target_drag_leave
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
(
)
>
pub
drag_target_drop
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
event
:
*
const
interfaces
:
:
cef_mouse_event_t
)
-
>
(
)
>
pub
drag_source_ended_at
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
x
:
libc
:
:
c_int
y
:
libc
:
:
c_int
op
:
types
:
:
cef_drag_operations_mask_t
)
-
>
(
)
>
pub
drag_source_system_drag_ended
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
(
)
>
pub
initialize_compositing
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_browser_host_t
)
-
>
(
)
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_browser_host_t
=
_cef_browser_host_t
;
pub
struct
CefBrowserHost
{
c_object
:
*
mut
cef_browser_host_t
}
impl
Clone
for
CefBrowserHost
{
fn
clone
(
&
self
)
-
>
CefBrowserHost
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefBrowserHost
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefBrowserHost
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefBrowserHost
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_browser_host_t
)
-
>
CefBrowserHost
{
CefBrowserHost
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_browser_host_t
)
-
>
CefBrowserHost
{
if
!
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefBrowserHost
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_browser_host_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_browser_host_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
get_browser
(
&
self
)
-
>
interfaces
:
:
CefBrowser
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_browser
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
close_browser
(
&
self
force_close
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
close_browser
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
force_close
)
)
)
}
}
pub
fn
set_focus
(
&
self
focus
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_focus
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
focus
)
)
)
}
}
pub
fn
set_window_visibility
(
&
self
visible
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_window_visibility
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
visible
)
)
)
}
}
pub
fn
get_window_handle
(
&
self
)
-
>
types
:
:
cef_window_handle_t
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_window_handle
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_opener_window_handle
(
&
self
)
-
>
types
:
:
cef_window_handle_t
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_opener_window_handle
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_client
(
&
self
)
-
>
interfaces
:
:
CefClient
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_client
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_request_context
(
&
self
)
-
>
interfaces
:
:
CefRequestContext
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_request_context
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_zoom_level
(
&
self
)
-
>
libc
:
:
c_double
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_zoom_level
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_zoom_level
(
&
self
zoomLevel
:
libc
:
:
c_double
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_zoom_level
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
zoomLevel
)
)
)
}
}
pub
fn
run_file_dialog
(
&
self
mode
:
types
:
:
cef_file_dialog_mode_t
title
:
&
[
u16
]
default_file_path
:
&
[
u16
]
accept_filters
:
Vec
<
String
>
selected_accept_filter
:
libc
:
:
c_int
callback
:
interfaces
:
:
CefRunFileDialogCallback
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
run_file_dialog
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
mode
)
CefWrap
:
:
to_c
(
title
)
CefWrap
:
:
to_c
(
default_file_path
)
CefWrap
:
:
to_c
(
accept_filters
)
CefWrap
:
:
to_c
(
selected_accept_filter
)
CefWrap
:
:
to_c
(
callback
)
)
)
}
}
pub
fn
start_download
(
&
self
url
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
start_download
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
url
)
)
)
}
}
pub
fn
print
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
print
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
find
(
&
self
identifier
:
libc
:
:
c_int
searchText
:
&
[
u16
]
forward
:
libc
:
:
c_int
matchCase
:
libc
:
:
c_int
findNext
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
find
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
identifier
)
CefWrap
:
:
to_c
(
searchText
)
CefWrap
:
:
to_c
(
forward
)
CefWrap
:
:
to_c
(
matchCase
)
CefWrap
:
:
to_c
(
findNext
)
)
)
}
}
pub
fn
stop_finding
(
&
self
clearSelection
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
stop_finding
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
clearSelection
)
)
)
}
}
pub
fn
show_dev_tools
(
&
self
windowInfo
:
&
interfaces
:
:
CefWindowInfo
client
:
interfaces
:
:
CefClient
settings
:
&
interfaces
:
:
CefBrowserSettings
inspect_element_at
:
&
types
:
:
cef_point_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
show_dev_tools
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
windowInfo
)
CefWrap
:
:
to_c
(
client
)
CefWrap
:
:
to_c
(
settings
)
CefWrap
:
:
to_c
(
inspect_element_at
)
)
)
}
}
pub
fn
close_dev_tools
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
close_dev_tools
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_navigation_entries
(
&
self
visitor
:
interfaces
:
:
CefNavigationEntryVisitor
current_only
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_navigation_entries
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
visitor
)
CefWrap
:
:
to_c
(
current_only
)
)
)
}
}
pub
fn
set_mouse_cursor_change_disabled
(
&
self
disabled
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_mouse_cursor_change_disabled
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
disabled
)
)
)
}
}
pub
fn
is_mouse_cursor_change_disabled
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_mouse_cursor_change_disabled
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
replace_misspelling
(
&
self
word
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
replace_misspelling
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
word
)
)
)
}
}
pub
fn
add_word_to_dictionary
(
&
self
word
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
add_word_to_dictionary
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
word
)
)
)
}
}
pub
fn
is_window_rendering_disabled
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_window_rendering_disabled
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
was_resized
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
was_resized
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
was_hidden
(
&
self
hidden
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
was_hidden
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
hidden
)
)
)
}
}
pub
fn
notify_screen_info_changed
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
notify_screen_info_changed
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
invalidate
(
&
self
ty
:
types
:
:
cef_paint_element_type_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
invalidate
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
ty
)
)
)
}
}
pub
fn
send_key_event
(
&
self
event
:
&
interfaces
:
:
CefKeyEvent
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
send_key_event
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
event
)
)
)
}
}
pub
fn
send_mouse_click_event
(
&
self
event
:
&
interfaces
:
:
CefMouseEvent
ty
:
types
:
:
cef_mouse_button_type_t
mouseUp
:
libc
:
:
c_int
clickCount
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
send_mouse_click_event
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
event
)
CefWrap
:
:
to_c
(
ty
)
CefWrap
:
:
to_c
(
mouseUp
)
CefWrap
:
:
to_c
(
clickCount
)
)
)
}
}
pub
fn
send_mouse_move_event
(
&
self
event
:
&
interfaces
:
:
CefMouseEvent
mouseLeave
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
send_mouse_move_event
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
event
)
CefWrap
:
:
to_c
(
mouseLeave
)
)
)
}
}
pub
fn
send_mouse_wheel_event
(
&
self
event
:
&
interfaces
:
:
CefMouseEvent
deltaX
:
libc
:
:
c_int
deltaY
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
send_mouse_wheel_event
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
event
)
CefWrap
:
:
to_c
(
deltaX
)
CefWrap
:
:
to_c
(
deltaY
)
)
)
}
}
pub
fn
send_focus_event
(
&
self
setFocus
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
send_focus_event
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
setFocus
)
)
)
}
}
pub
fn
send_capture_lost_event
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
send_capture_lost_event
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
notify_move_or_resize_started
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
notify_move_or_resize_started
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_nstext_input_context
(
&
self
)
-
>
types
:
:
cef_text_input_context_t
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_nstext_input_context
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
handle_key_event_before_text_input_client
(
&
self
keyEvent
:
types
:
:
cef_event_handle_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
handle_key_event_before_text_input_client
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
keyEvent
)
)
)
}
}
pub
fn
handle_key_event_after_text_input_client
(
&
self
keyEvent
:
types
:
:
cef_event_handle_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
handle_key_event_after_text_input_client
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
keyEvent
)
)
)
}
}
pub
fn
drag_target_drag_enter
(
&
self
drag_data
:
interfaces
:
:
CefDragData
event
:
&
interfaces
:
:
CefMouseEvent
allowed_ops
:
types
:
:
cef_drag_operations_mask_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
drag_target_drag_enter
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
drag_data
)
CefWrap
:
:
to_c
(
event
)
CefWrap
:
:
to_c
(
allowed_ops
)
)
)
}
}
pub
fn
drag_target_drag_over
(
&
self
event
:
&
interfaces
:
:
CefMouseEvent
allowed_ops
:
types
:
:
cef_drag_operations_mask_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
drag_target_drag_over
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
event
)
CefWrap
:
:
to_c
(
allowed_ops
)
)
)
}
}
pub
fn
drag_target_drag_leave
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
drag_target_drag_leave
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
drag_target_drop
(
&
self
event
:
&
interfaces
:
:
CefMouseEvent
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
drag_target_drop
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
event
)
)
)
}
}
pub
fn
drag_source_ended_at
(
&
self
x
:
libc
:
:
c_int
y
:
libc
:
:
c_int
op
:
types
:
:
cef_drag_operations_mask_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
drag_source_ended_at
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
x
)
CefWrap
:
:
to_c
(
y
)
CefWrap
:
:
to_c
(
op
)
)
)
}
}
pub
fn
drag_source_system_drag_ended
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
drag_source_system_drag_ended
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
initialize_compositing
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
initialize_compositing
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
create_browser
(
windowInfo
:
&
interfaces
:
:
CefWindowInfo
client
:
interfaces
:
:
CefClient
url
:
&
[
u16
]
settings
:
&
interfaces
:
:
CefBrowserSettings
request_context
:
interfaces
:
:
CefRequestContext
)
-
>
libc
:
:
c_int
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
browser
:
:
cef_browser_host_create_browser
(
CefWrap
:
:
to_c
(
windowInfo
)
CefWrap
:
:
to_c
(
client
)
CefWrap
:
:
to_c
(
url
)
CefWrap
:
:
to_c
(
settings
)
CefWrap
:
:
to_c
(
request_context
)
)
)
}
}
pub
fn
create_browser_sync
(
windowInfo
:
&
interfaces
:
:
CefWindowInfo
client
:
interfaces
:
:
CefClient
url
:
&
[
u16
]
settings
:
&
interfaces
:
:
CefBrowserSettings
request_context
:
interfaces
:
:
CefRequestContext
)
-
>
interfaces
:
:
CefBrowser
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
browser
:
:
cef_browser_host_create_browser_sync
(
CefWrap
:
:
to_c
(
windowInfo
)
CefWrap
:
:
to_c
(
client
)
CefWrap
:
:
to_c
(
url
)
CefWrap
:
:
to_c
(
settings
)
CefWrap
:
:
to_c
(
request_context
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_browser_host_t
>
for
CefBrowserHost
{
fn
to_c
(
rust_object
:
CefBrowserHost
)
-
>
*
mut
cef_browser_host_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_browser_host_t
)
-
>
CefBrowserHost
{
CefBrowserHost
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_browser_host_t
>
for
Option
<
CefBrowserHost
>
{
fn
to_c
(
rust_object
:
Option
<
CefBrowserHost
>
)
-
>
*
mut
cef_browser_host_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_browser_host_t
)
-
>
Option
<
CefBrowserHost
>
{
if
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
None
}
else
{
Some
(
CefBrowserHost
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
