#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_request_t
{
pub
base
:
types
:
:
cef_base_t
pub
is_read_only
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_t
)
-
>
libc
:
:
c_int
>
pub
get_url
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
set_url
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_t
url
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
get_method
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
set_method
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_t
method
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
get_post_data
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_t
)
-
>
*
mut
interfaces
:
:
cef_post_data_t
>
pub
set_post_data
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_t
postData
:
*
mut
interfaces
:
:
cef_post_data_t
)
-
>
(
)
>
pub
get_header_map
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_t
headerMap
:
types
:
:
cef_string_multimap_t
)
-
>
(
)
>
pub
set_header_map
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_t
headerMap
:
types
:
:
cef_string_multimap_t
)
-
>
(
)
>
pub
set
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_t
url
:
*
const
types
:
:
cef_string_t
method
:
*
const
types
:
:
cef_string_t
postData
:
*
mut
interfaces
:
:
cef_post_data_t
headerMap
:
types
:
:
cef_string_multimap_t
)
-
>
(
)
>
pub
get_flags
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_t
)
-
>
libc
:
:
c_int
>
pub
set_flags
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_t
flags
:
libc
:
:
c_int
)
-
>
(
)
>
pub
get_first_party_for_cookies
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
set_first_party_for_cookies
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_t
url
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
get_resource_type
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_t
)
-
>
types
:
:
cef_resource_type_t
>
pub
get_transition_type
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_request_t
)
-
>
types
:
:
cef_transition_type_t
>
pub
ref_count
:
usize
pub
extra
:
u8
}
pub
type
cef_request_t
=
_cef_request_t
;
pub
struct
CefRequest
{
c_object
:
*
mut
cef_request_t
}
impl
Clone
for
CefRequest
{
fn
clone
(
&
self
)
-
>
CefRequest
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefRequest
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefRequest
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefRequest
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_request_t
)
-
>
CefRequest
{
CefRequest
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_request_t
)
-
>
CefRequest
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefRequest
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_request_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_request_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
is_read_only
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_read_only
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_url
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_url
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_url
(
&
self
url
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_url
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
url
)
)
)
}
}
pub
fn
get_method
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_method
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_method
(
&
self
method
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_method
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
method
)
)
)
}
}
pub
fn
get_post_data
(
&
self
)
-
>
interfaces
:
:
CefPostData
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_post_data
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_post_data
(
&
self
postData
:
interfaces
:
:
CefPostData
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_post_data
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
postData
)
)
)
}
}
pub
fn
get_header_map
(
&
self
headerMap
:
HashMap
<
String
Vec
<
String
>
>
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_header_map
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
headerMap
)
)
)
}
}
pub
fn
set_header_map
(
&
self
headerMap
:
HashMap
<
String
Vec
<
String
>
>
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_header_map
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
headerMap
)
)
)
}
}
pub
fn
set
(
&
self
url
:
&
[
u16
]
method
:
&
[
u16
]
postData
:
interfaces
:
:
CefPostData
headerMap
:
HashMap
<
String
Vec
<
String
>
>
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
url
)
CefWrap
:
:
to_c
(
method
)
CefWrap
:
:
to_c
(
postData
)
CefWrap
:
:
to_c
(
headerMap
)
)
)
}
}
pub
fn
get_flags
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_flags
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_flags
(
&
self
flags
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_flags
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
flags
)
)
)
}
}
pub
fn
get_first_party_for_cookies
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_first_party_for_cookies
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_first_party_for_cookies
(
&
self
url
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_first_party_for_cookies
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
url
)
)
)
}
}
pub
fn
get_resource_type
(
&
self
)
-
>
types
:
:
cef_resource_type_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_resource_type
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_transition_type
(
&
self
)
-
>
types
:
:
cef_transition_type_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_transition_type
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
create
(
)
-
>
interfaces
:
:
CefRequest
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
request
:
:
cef_request_create
(
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_request_t
>
for
CefRequest
{
fn
to_c
(
rust_object
:
CefRequest
)
-
>
*
mut
cef_request_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_request_t
)
-
>
CefRequest
{
CefRequest
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_request_t
>
for
Option
<
CefRequest
>
{
fn
to_c
(
rust_object
:
Option
<
CefRequest
>
)
-
>
*
mut
cef_request_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_request_t
)
-
>
Option
<
CefRequest
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefRequest
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_post_data_t
{
pub
base
:
types
:
:
cef_base_t
pub
is_read_only
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_post_data_t
)
-
>
libc
:
:
c_int
>
pub
get_element_count
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_post_data_t
)
-
>
libc
:
:
size_t
>
pub
get_elements
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_post_data_t
elements_count
:
*
mut
libc
:
:
size_t
elements
:
*
mut
*
mut
interfaces
:
:
cef_post_data_element_t
)
-
>
(
)
>
pub
remove_element
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_post_data_t
element
:
*
mut
interfaces
:
:
cef_post_data_element_t
)
-
>
libc
:
:
c_int
>
pub
add_element
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_post_data_t
element
:
*
mut
interfaces
:
:
cef_post_data_element_t
)
-
>
libc
:
:
c_int
>
pub
remove_elements
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_post_data_t
)
-
>
(
)
>
pub
ref_count
:
usize
pub
extra
:
u8
}
pub
type
cef_post_data_t
=
_cef_post_data_t
;
pub
struct
CefPostData
{
c_object
:
*
mut
cef_post_data_t
}
impl
Clone
for
CefPostData
{
fn
clone
(
&
self
)
-
>
CefPostData
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefPostData
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefPostData
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefPostData
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_post_data_t
)
-
>
CefPostData
{
CefPostData
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_post_data_t
)
-
>
CefPostData
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefPostData
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_post_data_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_post_data_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
is_read_only
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_read_only
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_element_count
(
&
self
)
-
>
libc
:
:
size_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_element_count
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_elements
(
&
self
elements_count
:
*
mut
libc
:
:
size_t
elements
:
*
mut
interfaces
:
:
CefPostDataElement
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_elements
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
elements_count
)
CefWrap
:
:
to_c
(
elements
)
)
)
}
}
pub
fn
remove_element
(
&
self
element
:
interfaces
:
:
CefPostDataElement
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
remove_element
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
element
)
)
)
}
}
pub
fn
add_element
(
&
self
element
:
interfaces
:
:
CefPostDataElement
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
add_element
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
element
)
)
)
}
}
pub
fn
remove_elements
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
remove_elements
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
create
(
)
-
>
interfaces
:
:
CefPostData
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
request
:
:
cef_post_data_create
(
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_post_data_t
>
for
CefPostData
{
fn
to_c
(
rust_object
:
CefPostData
)
-
>
*
mut
cef_post_data_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_post_data_t
)
-
>
CefPostData
{
CefPostData
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_post_data_t
>
for
Option
<
CefPostData
>
{
fn
to_c
(
rust_object
:
Option
<
CefPostData
>
)
-
>
*
mut
cef_post_data_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_post_data_t
)
-
>
Option
<
CefPostData
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefPostData
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_post_data_element_t
{
pub
base
:
types
:
:
cef_base_t
pub
is_read_only
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_post_data_element_t
)
-
>
libc
:
:
c_int
>
pub
set_to_empty
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_post_data_element_t
)
-
>
(
)
>
pub
set_to_file
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_post_data_element_t
fileName
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
set_to_bytes
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_post_data_element_t
size
:
libc
:
:
size_t
bytes
:
*
const
(
)
)
-
>
(
)
>
pub
get_type
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_post_data_element_t
)
-
>
types
:
:
cef_postdataelement_type_t
>
pub
get_file
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_post_data_element_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_bytes_count
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_post_data_element_t
)
-
>
libc
:
:
size_t
>
pub
get_bytes
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_post_data_element_t
size
:
libc
:
:
size_t
bytes
:
*
mut
(
)
)
-
>
libc
:
:
size_t
>
pub
ref_count
:
usize
pub
extra
:
u8
}
pub
type
cef_post_data_element_t
=
_cef_post_data_element_t
;
pub
struct
CefPostDataElement
{
c_object
:
*
mut
cef_post_data_element_t
}
impl
Clone
for
CefPostDataElement
{
fn
clone
(
&
self
)
-
>
CefPostDataElement
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefPostDataElement
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefPostDataElement
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefPostDataElement
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_post_data_element_t
)
-
>
CefPostDataElement
{
CefPostDataElement
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_post_data_element_t
)
-
>
CefPostDataElement
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefPostDataElement
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_post_data_element_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_post_data_element_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
is_read_only
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_read_only
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_to_empty
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_to_empty
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_to_file
(
&
self
fileName
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_to_file
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
fileName
)
)
)
}
}
pub
fn
set_to_bytes
(
&
self
size
:
libc
:
:
size_t
bytes
:
&
(
)
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_to_bytes
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
size
)
CefWrap
:
:
to_c
(
bytes
)
)
)
}
}
pub
fn
get_type
(
&
self
)
-
>
types
:
:
cef_postdataelement_type_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_type
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_file
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_file
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_bytes_count
(
&
self
)
-
>
libc
:
:
size_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_bytes_count
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_bytes
(
&
self
size
:
libc
:
:
size_t
bytes
:
&
mut
(
)
)
-
>
libc
:
:
size_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_bytes
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
size
)
CefWrap
:
:
to_c
(
bytes
)
)
)
}
}
pub
fn
create
(
)
-
>
interfaces
:
:
CefPostDataElement
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
request
:
:
cef_post_data_element_create
(
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_post_data_element_t
>
for
CefPostDataElement
{
fn
to_c
(
rust_object
:
CefPostDataElement
)
-
>
*
mut
cef_post_data_element_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_post_data_element_t
)
-
>
CefPostDataElement
{
CefPostDataElement
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_post_data_element_t
>
for
Option
<
CefPostDataElement
>
{
fn
to_c
(
rust_object
:
Option
<
CefPostDataElement
>
)
-
>
*
mut
cef_post_data_element_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_post_data_element_t
)
-
>
Option
<
CefPostDataElement
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefPostDataElement
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
