#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
mem
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_zip_reader_t
{
pub
base
:
types
:
:
cef_base_t
pub
move_to_first_file
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_zip_reader_t
)
-
>
libc
:
:
c_int
>
pub
move_to_next_file
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_zip_reader_t
)
-
>
libc
:
:
c_int
>
pub
move_to_file
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_zip_reader_t
fileName
:
*
const
types
:
:
cef_string_t
caseSensitive
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
close
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_zip_reader_t
)
-
>
libc
:
:
c_int
>
pub
get_file_name
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_zip_reader_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_file_size
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_zip_reader_t
)
-
>
i64
>
pub
get_file_last_modified
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_zip_reader_t
)
-
>
types
:
:
cef_time_t
>
pub
open_file
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_zip_reader_t
password
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
close_file
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_zip_reader_t
)
-
>
libc
:
:
c_int
>
pub
read_file
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_zip_reader_t
buffer
:
*
mut
(
)
bufferSize
:
libc
:
:
size_t
)
-
>
libc
:
:
c_int
>
pub
tell
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_zip_reader_t
)
-
>
i64
>
pub
eof
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_zip_reader_t
)
-
>
libc
:
:
c_int
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_zip_reader_t
=
_cef_zip_reader_t
;
pub
struct
CefZipReader
{
c_object
:
*
mut
cef_zip_reader_t
}
impl
Clone
for
CefZipReader
{
fn
clone
(
&
self
)
-
>
CefZipReader
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefZipReader
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefZipReader
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefZipReader
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_zip_reader_t
)
-
>
CefZipReader
{
CefZipReader
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_zip_reader_t
)
-
>
CefZipReader
{
if
!
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefZipReader
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_zip_reader_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_zip_reader_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
move_to_first_file
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
move_to_first_file
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
move_to_next_file
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
move_to_next_file
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
move_to_file
(
&
self
fileName
:
&
[
u16
]
caseSensitive
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
move_to_file
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
fileName
)
CefWrap
:
:
to_c
(
caseSensitive
)
)
)
}
}
pub
fn
close
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
close
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_file_name
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_file_name
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_file_size
(
&
self
)
-
>
i64
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_file_size
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_file_last_modified
(
&
self
)
-
>
types
:
:
cef_time_t
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_file_last_modified
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
open_file
(
&
self
password
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
open_file
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
password
)
)
)
}
}
pub
fn
close_file
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
close_file
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
read_file
(
&
self
buffer
:
&
mut
(
)
bufferSize
:
libc
:
:
size_t
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
read_file
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
buffer
)
CefWrap
:
:
to_c
(
bufferSize
)
)
)
}
}
pub
fn
tell
(
&
self
)
-
>
i64
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
tell
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
eof
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
eof
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
create
(
stream
:
interfaces
:
:
CefStreamReader
)
-
>
interfaces
:
:
CefZipReader
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
zip_reader
:
:
cef_zip_reader_create
(
CefWrap
:
:
to_c
(
stream
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_zip_reader_t
>
for
CefZipReader
{
fn
to_c
(
rust_object
:
CefZipReader
)
-
>
*
mut
cef_zip_reader_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_zip_reader_t
)
-
>
CefZipReader
{
CefZipReader
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_zip_reader_t
>
for
Option
<
CefZipReader
>
{
fn
to_c
(
rust_object
:
Option
<
CefZipReader
>
)
-
>
*
mut
cef_zip_reader_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_zip_reader_t
)
-
>
Option
<
CefZipReader
>
{
if
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
None
}
else
{
Some
(
CefZipReader
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
