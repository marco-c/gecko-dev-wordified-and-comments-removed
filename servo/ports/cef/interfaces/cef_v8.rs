#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_v8context_t
{
pub
base
:
types
:
:
cef_base_t
pub
get_task_runner
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8context_t
)
-
>
*
mut
interfaces
:
:
cef_task_runner_t
>
pub
is_valid
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8context_t
)
-
>
libc
:
:
c_int
>
pub
get_browser
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8context_t
)
-
>
*
mut
interfaces
:
:
cef_browser_t
>
pub
get_frame
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8context_t
)
-
>
*
mut
interfaces
:
:
cef_frame_t
>
pub
get_global
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8context_t
)
-
>
*
mut
interfaces
:
:
cef_v8value_t
>
pub
enter
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8context_t
)
-
>
libc
:
:
c_int
>
pub
exit
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8context_t
)
-
>
libc
:
:
c_int
>
pub
is_same
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8context_t
that
:
*
mut
interfaces
:
:
cef_v8context_t
)
-
>
libc
:
:
c_int
>
pub
eval
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8context_t
code
:
*
const
types
:
:
cef_string_t
retval
:
*
mut
interfaces
:
:
cef_v8value_t
exception
:
*
mut
interfaces
:
:
cef_v8exception_t
)
-
>
libc
:
:
c_int
>
pub
ref_count
:
usize
pub
extra
:
u8
}
pub
type
cef_v8context_t
=
_cef_v8context_t
;
pub
struct
CefV8Context
{
c_object
:
*
mut
cef_v8context_t
}
impl
Clone
for
CefV8Context
{
fn
clone
(
&
self
)
-
>
CefV8Context
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefV8Context
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefV8Context
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefV8Context
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_v8context_t
)
-
>
CefV8Context
{
CefV8Context
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_v8context_t
)
-
>
CefV8Context
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefV8Context
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_v8context_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_v8context_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
get_task_runner
(
&
self
)
-
>
interfaces
:
:
CefTaskRunner
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_task_runner
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_valid
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_valid
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_browser
(
&
self
)
-
>
interfaces
:
:
CefBrowser
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_browser
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_frame
(
&
self
)
-
>
interfaces
:
:
CefFrame
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_frame
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_global
(
&
self
)
-
>
interfaces
:
:
CefV8Value
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_global
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
enter
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
enter
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
exit
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
exit
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_same
(
&
self
that
:
interfaces
:
:
CefV8Context
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_same
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
that
)
)
)
}
}
pub
fn
eval
(
&
self
code
:
&
[
u16
]
retval
:
interfaces
:
:
CefV8Value
exception
:
interfaces
:
:
CefV8Exception
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
eval
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
code
)
CefWrap
:
:
to_c
(
retval
)
CefWrap
:
:
to_c
(
exception
)
)
)
}
}
pub
fn
get_current_context
(
)
-
>
interfaces
:
:
CefV8Context
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
v8
:
:
cef_v8context_get_current_context
(
)
)
}
}
pub
fn
get_entered_context
(
)
-
>
interfaces
:
:
CefV8Context
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
v8
:
:
cef_v8context_get_entered_context
(
)
)
}
}
pub
fn
in_context
(
)
-
>
libc
:
:
c_int
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
v8
:
:
cef_v8context_in_context
(
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_v8context_t
>
for
CefV8Context
{
fn
to_c
(
rust_object
:
CefV8Context
)
-
>
*
mut
cef_v8context_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_v8context_t
)
-
>
CefV8Context
{
CefV8Context
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_v8context_t
>
for
Option
<
CefV8Context
>
{
fn
to_c
(
rust_object
:
Option
<
CefV8Context
>
)
-
>
*
mut
cef_v8context_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_v8context_t
)
-
>
Option
<
CefV8Context
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefV8Context
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_v8handler_t
{
pub
base
:
types
:
:
cef_base_t
pub
execute
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8handler_t
name
:
*
const
types
:
:
cef_string_t
object
:
*
mut
interfaces
:
:
cef_v8value_t
arguments_count
:
libc
:
:
size_t
arguments
:
*
const
*
mut
interfaces
:
:
cef_v8value_t
retval
:
*
mut
interfaces
:
:
cef_v8value_t
exception
:
*
mut
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
ref_count
:
usize
pub
extra
:
u8
}
pub
type
cef_v8handler_t
=
_cef_v8handler_t
;
pub
struct
CefV8Handler
{
c_object
:
*
mut
cef_v8handler_t
}
impl
Clone
for
CefV8Handler
{
fn
clone
(
&
self
)
-
>
CefV8Handler
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefV8Handler
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefV8Handler
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefV8Handler
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_v8handler_t
)
-
>
CefV8Handler
{
CefV8Handler
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_v8handler_t
)
-
>
CefV8Handler
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefV8Handler
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_v8handler_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_v8handler_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
execute
(
&
self
name
:
&
[
u16
]
object
:
interfaces
:
:
CefV8Value
arguments_count
:
libc
:
:
size_t
arguments
:
*
const
interfaces
:
:
CefV8Value
retval
:
interfaces
:
:
CefV8Value
exception
:
*
mut
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
execute
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
name
)
CefWrap
:
:
to_c
(
object
)
CefWrap
:
:
to_c
(
arguments_count
)
CefWrap
:
:
to_c
(
arguments
)
CefWrap
:
:
to_c
(
retval
)
CefWrap
:
:
to_c
(
exception
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_v8handler_t
>
for
CefV8Handler
{
fn
to_c
(
rust_object
:
CefV8Handler
)
-
>
*
mut
cef_v8handler_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_v8handler_t
)
-
>
CefV8Handler
{
CefV8Handler
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_v8handler_t
>
for
Option
<
CefV8Handler
>
{
fn
to_c
(
rust_object
:
Option
<
CefV8Handler
>
)
-
>
*
mut
cef_v8handler_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_v8handler_t
)
-
>
Option
<
CefV8Handler
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefV8Handler
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_v8accessor_t
{
pub
base
:
types
:
:
cef_base_t
pub
get
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8accessor_t
name
:
*
const
types
:
:
cef_string_t
object
:
*
mut
interfaces
:
:
cef_v8value_t
retval
:
*
mut
interfaces
:
:
cef_v8value_t
exception
:
*
mut
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
set
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8accessor_t
name
:
*
const
types
:
:
cef_string_t
object
:
*
mut
interfaces
:
:
cef_v8value_t
value
:
*
mut
interfaces
:
:
cef_v8value_t
exception
:
*
mut
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
ref_count
:
usize
pub
extra
:
u8
}
pub
type
cef_v8accessor_t
=
_cef_v8accessor_t
;
pub
struct
CefV8Accessor
{
c_object
:
*
mut
cef_v8accessor_t
}
impl
Clone
for
CefV8Accessor
{
fn
clone
(
&
self
)
-
>
CefV8Accessor
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefV8Accessor
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefV8Accessor
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefV8Accessor
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_v8accessor_t
)
-
>
CefV8Accessor
{
CefV8Accessor
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_v8accessor_t
)
-
>
CefV8Accessor
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefV8Accessor
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_v8accessor_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_v8accessor_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
get
(
&
self
name
:
&
[
u16
]
object
:
interfaces
:
:
CefV8Value
retval
:
interfaces
:
:
CefV8Value
exception
:
*
mut
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
name
)
CefWrap
:
:
to_c
(
object
)
CefWrap
:
:
to_c
(
retval
)
CefWrap
:
:
to_c
(
exception
)
)
)
}
}
pub
fn
set
(
&
self
name
:
&
[
u16
]
object
:
interfaces
:
:
CefV8Value
value
:
interfaces
:
:
CefV8Value
exception
:
*
mut
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
name
)
CefWrap
:
:
to_c
(
object
)
CefWrap
:
:
to_c
(
value
)
CefWrap
:
:
to_c
(
exception
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_v8accessor_t
>
for
CefV8Accessor
{
fn
to_c
(
rust_object
:
CefV8Accessor
)
-
>
*
mut
cef_v8accessor_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_v8accessor_t
)
-
>
CefV8Accessor
{
CefV8Accessor
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_v8accessor_t
>
for
Option
<
CefV8Accessor
>
{
fn
to_c
(
rust_object
:
Option
<
CefV8Accessor
>
)
-
>
*
mut
cef_v8accessor_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_v8accessor_t
)
-
>
Option
<
CefV8Accessor
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefV8Accessor
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_v8exception_t
{
pub
base
:
types
:
:
cef_base_t
pub
get_message
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8exception_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_source_line
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8exception_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_script_resource_name
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8exception_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_line_number
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8exception_t
)
-
>
libc
:
:
c_int
>
pub
get_start_position
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8exception_t
)
-
>
libc
:
:
c_int
>
pub
get_end_position
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8exception_t
)
-
>
libc
:
:
c_int
>
pub
get_start_column
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8exception_t
)
-
>
libc
:
:
c_int
>
pub
get_end_column
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8exception_t
)
-
>
libc
:
:
c_int
>
pub
ref_count
:
usize
pub
extra
:
u8
}
pub
type
cef_v8exception_t
=
_cef_v8exception_t
;
pub
struct
CefV8Exception
{
c_object
:
*
mut
cef_v8exception_t
}
impl
Clone
for
CefV8Exception
{
fn
clone
(
&
self
)
-
>
CefV8Exception
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefV8Exception
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefV8Exception
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefV8Exception
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_v8exception_t
)
-
>
CefV8Exception
{
CefV8Exception
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_v8exception_t
)
-
>
CefV8Exception
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefV8Exception
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_v8exception_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_v8exception_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
get_message
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_message
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_source_line
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_source_line
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_script_resource_name
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_script_resource_name
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_line_number
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_line_number
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_start_position
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_start_position
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_end_position
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_end_position
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_start_column
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_start_column
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_end_column
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_end_column
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_v8exception_t
>
for
CefV8Exception
{
fn
to_c
(
rust_object
:
CefV8Exception
)
-
>
*
mut
cef_v8exception_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_v8exception_t
)
-
>
CefV8Exception
{
CefV8Exception
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_v8exception_t
>
for
Option
<
CefV8Exception
>
{
fn
to_c
(
rust_object
:
Option
<
CefV8Exception
>
)
-
>
*
mut
cef_v8exception_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_v8exception_t
)
-
>
Option
<
CefV8Exception
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefV8Exception
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_v8value_t
{
pub
base
:
types
:
:
cef_base_t
pub
is_valid
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
is_undefined
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
is_null
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
is_bool
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
is_int
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
is_uint
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
is_double
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
is_date
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
is_string
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
is_object
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
is_array
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
is_function
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
is_same
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
that
:
*
mut
interfaces
:
:
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
get_bool_value
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
get_int_value
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
i32
>
pub
get_uint_value
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
u32
>
pub
get_double_value
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_double
>
pub
get_date_value
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
types
:
:
cef_time_t
>
pub
get_string_value
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
is_user_created
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
has_exception
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
get_exception
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
*
mut
interfaces
:
:
cef_v8exception_t
>
pub
clear_exception
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
will_rethrow_exceptions
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
set_rethrow_exceptions
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
rethrow
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
has_value_bykey
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
key
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
has_value_byindex
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
delete_value_bykey
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
key
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
delete_value_byindex
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
get_value_bykey
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
key
:
*
const
types
:
:
cef_string_t
)
-
>
*
mut
interfaces
:
:
cef_v8value_t
>
pub
get_value_byindex
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
index
:
libc
:
:
c_int
)
-
>
*
mut
interfaces
:
:
cef_v8value_t
>
pub
set_value_bykey
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
key
:
*
const
types
:
:
cef_string_t
value
:
*
mut
interfaces
:
:
cef_v8value_t
attribute
:
types
:
:
cef_v8_propertyattribute_t
)
-
>
libc
:
:
c_int
>
pub
set_value_byindex
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
index
:
libc
:
:
c_int
value
:
*
mut
interfaces
:
:
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
set_value_byaccessor
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
key
:
*
const
types
:
:
cef_string_t
settings
:
types
:
:
cef_v8_accesscontrol_t
attribute
:
types
:
:
cef_v8_propertyattribute_t
)
-
>
libc
:
:
c_int
>
pub
get_keys
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
keys
:
types
:
:
cef_string_list_t
)
-
>
libc
:
:
c_int
>
pub
set_user_data
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
user_data
:
*
mut
interfaces
:
:
cef_base_t
)
-
>
libc
:
:
c_int
>
pub
get_user_data
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
*
mut
interfaces
:
:
cef_base_t
>
pub
get_externally_allocated_memory
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
adjust_externally_allocated_memory
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
change_in_bytes
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
get_array_length
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
libc
:
:
c_int
>
pub
get_function_name
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_function_handler
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
)
-
>
*
mut
interfaces
:
:
cef_v8handler_t
>
pub
execute_function
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
object
:
*
mut
interfaces
:
:
cef_v8value_t
arguments_count
:
libc
:
:
size_t
arguments
:
*
const
*
mut
interfaces
:
:
cef_v8value_t
)
-
>
*
mut
interfaces
:
:
cef_v8value_t
>
pub
execute_function_with_context
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8value_t
context
:
*
mut
interfaces
:
:
cef_v8context_t
object
:
*
mut
interfaces
:
:
cef_v8value_t
arguments_count
:
libc
:
:
size_t
arguments
:
*
const
*
mut
interfaces
:
:
cef_v8value_t
)
-
>
*
mut
interfaces
:
:
cef_v8value_t
>
pub
ref_count
:
usize
pub
extra
:
u8
}
pub
type
cef_v8value_t
=
_cef_v8value_t
;
pub
struct
CefV8Value
{
c_object
:
*
mut
cef_v8value_t
}
impl
Clone
for
CefV8Value
{
fn
clone
(
&
self
)
-
>
CefV8Value
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefV8Value
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefV8Value
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefV8Value
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_v8value_t
)
-
>
CefV8Value
{
CefV8Value
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_v8value_t
)
-
>
CefV8Value
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefV8Value
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_v8value_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_v8value_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
is_valid
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_valid
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_undefined
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_undefined
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_null
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_null
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_bool
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_bool
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_int
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_int
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_uint
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_uint
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_double
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_double
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_date
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_date
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_string
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_string
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_object
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_object
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_array
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_array
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_function
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_function
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_same
(
&
self
that
:
interfaces
:
:
CefV8Value
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_same
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
that
)
)
)
}
}
pub
fn
get_bool_value
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_bool_value
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_int_value
(
&
self
)
-
>
i32
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_int_value
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_uint_value
(
&
self
)
-
>
u32
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_uint_value
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_double_value
(
&
self
)
-
>
libc
:
:
c_double
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_double_value
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_date_value
(
&
self
)
-
>
types
:
:
cef_time_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_date_value
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_string_value
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_string_value
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_user_created
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_user_created
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
has_exception
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_exception
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_exception
(
&
self
)
-
>
interfaces
:
:
CefV8Exception
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_exception
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
clear_exception
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
clear_exception
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
will_rethrow_exceptions
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
will_rethrow_exceptions
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_rethrow_exceptions
(
&
self
rethrow
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_rethrow_exceptions
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
rethrow
)
)
)
}
}
pub
fn
has_value_bykey
(
&
self
key
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_value_bykey
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
)
)
}
}
pub
fn
has_value_byindex
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_value_byindex
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
delete_value_bykey
(
&
self
key
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
delete_value_bykey
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
)
)
}
}
pub
fn
delete_value_byindex
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
delete_value_byindex
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
get_value_bykey
(
&
self
key
:
&
[
u16
]
)
-
>
interfaces
:
:
CefV8Value
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_value_bykey
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
)
)
}
}
pub
fn
get_value_byindex
(
&
self
index
:
libc
:
:
c_int
)
-
>
interfaces
:
:
CefV8Value
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_value_byindex
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
set_value_bykey
(
&
self
key
:
&
[
u16
]
value
:
interfaces
:
:
CefV8Value
attribute
:
types
:
:
cef_v8_propertyattribute_t
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_value_bykey
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
CefWrap
:
:
to_c
(
value
)
CefWrap
:
:
to_c
(
attribute
)
)
)
}
}
pub
fn
set_value_byindex
(
&
self
index
:
libc
:
:
c_int
value
:
interfaces
:
:
CefV8Value
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_value_byindex
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_value_byaccessor
(
&
self
key
:
&
[
u16
]
settings
:
types
:
:
cef_v8_accesscontrol_t
attribute
:
types
:
:
cef_v8_propertyattribute_t
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_value_byaccessor
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
CefWrap
:
:
to_c
(
settings
)
CefWrap
:
:
to_c
(
attribute
)
)
)
}
}
pub
fn
get_keys
(
&
self
keys
:
Vec
<
String
>
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_keys
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
keys
)
)
)
}
}
pub
fn
set_user_data
(
&
self
user_data
:
interfaces
:
:
CefBase
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_user_data
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
user_data
)
)
)
}
}
pub
fn
get_user_data
(
&
self
)
-
>
interfaces
:
:
CefBase
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_user_data
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_externally_allocated_memory
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_externally_allocated_memory
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
adjust_externally_allocated_memory
(
&
self
change_in_bytes
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
adjust_externally_allocated_memory
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
change_in_bytes
)
)
)
}
}
pub
fn
get_array_length
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_array_length
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_function_name
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_function_name
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_function_handler
(
&
self
)
-
>
interfaces
:
:
CefV8Handler
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_function_handler
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
execute_function
(
&
self
object
:
interfaces
:
:
CefV8Value
arguments_count
:
libc
:
:
size_t
arguments
:
*
const
interfaces
:
:
CefV8Value
)
-
>
interfaces
:
:
CefV8Value
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
execute_function
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
object
)
CefWrap
:
:
to_c
(
arguments_count
)
CefWrap
:
:
to_c
(
arguments
)
)
)
}
}
pub
fn
execute_function_with_context
(
&
self
context
:
interfaces
:
:
CefV8Context
object
:
interfaces
:
:
CefV8Value
arguments_count
:
libc
:
:
size_t
arguments
:
*
const
interfaces
:
:
CefV8Value
)
-
>
interfaces
:
:
CefV8Value
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
execute_function_with_context
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
context
)
CefWrap
:
:
to_c
(
object
)
CefWrap
:
:
to_c
(
arguments_count
)
CefWrap
:
:
to_c
(
arguments
)
)
)
}
}
pub
fn
create_undefined
(
)
-
>
interfaces
:
:
CefV8Value
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
v8
:
:
cef_v8value_create_undefined
(
)
)
}
}
pub
fn
create_null
(
)
-
>
interfaces
:
:
CefV8Value
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
v8
:
:
cef_v8value_create_null
(
)
)
}
}
pub
fn
create_bool
(
value
:
libc
:
:
c_int
)
-
>
interfaces
:
:
CefV8Value
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
v8
:
:
cef_v8value_create_bool
(
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
create_int
(
value
:
i32
)
-
>
interfaces
:
:
CefV8Value
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
v8
:
:
cef_v8value_create_int
(
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
create_uint
(
value
:
u32
)
-
>
interfaces
:
:
CefV8Value
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
v8
:
:
cef_v8value_create_uint
(
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
create_double
(
value
:
libc
:
:
c_double
)
-
>
interfaces
:
:
CefV8Value
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
v8
:
:
cef_v8value_create_double
(
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
create_date
(
date
:
&
types
:
:
cef_time_t
)
-
>
interfaces
:
:
CefV8Value
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
v8
:
:
cef_v8value_create_date
(
CefWrap
:
:
to_c
(
date
)
)
)
}
}
pub
fn
create_string
(
value
:
&
[
u16
]
)
-
>
interfaces
:
:
CefV8Value
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
v8
:
:
cef_v8value_create_string
(
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
create_object
(
accessor
:
interfaces
:
:
CefV8Accessor
)
-
>
interfaces
:
:
CefV8Value
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
v8
:
:
cef_v8value_create_object
(
CefWrap
:
:
to_c
(
accessor
)
)
)
}
}
pub
fn
create_array
(
length
:
libc
:
:
c_int
)
-
>
interfaces
:
:
CefV8Value
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
v8
:
:
cef_v8value_create_array
(
CefWrap
:
:
to_c
(
length
)
)
)
}
}
pub
fn
create_function
(
name
:
&
[
u16
]
handler
:
interfaces
:
:
CefV8Handler
)
-
>
interfaces
:
:
CefV8Value
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
v8
:
:
cef_v8value_create_function
(
CefWrap
:
:
to_c
(
name
)
CefWrap
:
:
to_c
(
handler
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_v8value_t
>
for
CefV8Value
{
fn
to_c
(
rust_object
:
CefV8Value
)
-
>
*
mut
cef_v8value_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_v8value_t
)
-
>
CefV8Value
{
CefV8Value
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_v8value_t
>
for
Option
<
CefV8Value
>
{
fn
to_c
(
rust_object
:
Option
<
CefV8Value
>
)
-
>
*
mut
cef_v8value_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_v8value_t
)
-
>
Option
<
CefV8Value
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefV8Value
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_v8stack_trace_t
{
pub
base
:
types
:
:
cef_base_t
pub
is_valid
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8stack_trace_t
)
-
>
libc
:
:
c_int
>
pub
get_frame_count
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8stack_trace_t
)
-
>
libc
:
:
c_int
>
pub
get_frame
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8stack_trace_t
index
:
libc
:
:
c_int
)
-
>
*
mut
interfaces
:
:
cef_v8stack_frame_t
>
pub
ref_count
:
usize
pub
extra
:
u8
}
pub
type
cef_v8stack_trace_t
=
_cef_v8stack_trace_t
;
pub
struct
CefV8StackTrace
{
c_object
:
*
mut
cef_v8stack_trace_t
}
impl
Clone
for
CefV8StackTrace
{
fn
clone
(
&
self
)
-
>
CefV8StackTrace
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefV8StackTrace
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefV8StackTrace
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefV8StackTrace
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_v8stack_trace_t
)
-
>
CefV8StackTrace
{
CefV8StackTrace
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_v8stack_trace_t
)
-
>
CefV8StackTrace
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefV8StackTrace
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_v8stack_trace_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_v8stack_trace_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
is_valid
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_valid
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_frame_count
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_frame_count
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_frame
(
&
self
index
:
libc
:
:
c_int
)
-
>
interfaces
:
:
CefV8StackFrame
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_frame
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
get_current
(
frame_limit
:
libc
:
:
c_int
)
-
>
interfaces
:
:
CefV8StackTrace
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
v8
:
:
cef_v8stack_trace_get_current
(
CefWrap
:
:
to_c
(
frame_limit
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_v8stack_trace_t
>
for
CefV8StackTrace
{
fn
to_c
(
rust_object
:
CefV8StackTrace
)
-
>
*
mut
cef_v8stack_trace_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_v8stack_trace_t
)
-
>
CefV8StackTrace
{
CefV8StackTrace
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_v8stack_trace_t
>
for
Option
<
CefV8StackTrace
>
{
fn
to_c
(
rust_object
:
Option
<
CefV8StackTrace
>
)
-
>
*
mut
cef_v8stack_trace_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_v8stack_trace_t
)
-
>
Option
<
CefV8StackTrace
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefV8StackTrace
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_v8stack_frame_t
{
pub
base
:
types
:
:
cef_base_t
pub
is_valid
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8stack_frame_t
)
-
>
libc
:
:
c_int
>
pub
get_script_name
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8stack_frame_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_script_name_or_source_url
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8stack_frame_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_function_name
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8stack_frame_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_line_number
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8stack_frame_t
)
-
>
libc
:
:
c_int
>
pub
get_column
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8stack_frame_t
)
-
>
libc
:
:
c_int
>
pub
is_eval
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8stack_frame_t
)
-
>
libc
:
:
c_int
>
pub
is_constructor
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_v8stack_frame_t
)
-
>
libc
:
:
c_int
>
pub
ref_count
:
usize
pub
extra
:
u8
}
pub
type
cef_v8stack_frame_t
=
_cef_v8stack_frame_t
;
pub
struct
CefV8StackFrame
{
c_object
:
*
mut
cef_v8stack_frame_t
}
impl
Clone
for
CefV8StackFrame
{
fn
clone
(
&
self
)
-
>
CefV8StackFrame
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefV8StackFrame
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefV8StackFrame
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefV8StackFrame
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_v8stack_frame_t
)
-
>
CefV8StackFrame
{
CefV8StackFrame
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_v8stack_frame_t
)
-
>
CefV8StackFrame
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefV8StackFrame
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_v8stack_frame_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_v8stack_frame_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
is_valid
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_valid
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_script_name
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_script_name
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_script_name_or_source_url
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_script_name_or_source_url
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_function_name
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_function_name
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_line_number
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_line_number
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_column
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_column
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_eval
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_eval
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_constructor
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_constructor
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_v8stack_frame_t
>
for
CefV8StackFrame
{
fn
to_c
(
rust_object
:
CefV8StackFrame
)
-
>
*
mut
cef_v8stack_frame_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_v8stack_frame_t
)
-
>
CefV8StackFrame
{
CefV8StackFrame
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_v8stack_frame_t
>
for
Option
<
CefV8StackFrame
>
{
fn
to_c
(
rust_object
:
Option
<
CefV8StackFrame
>
)
-
>
*
mut
cef_v8stack_frame_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_v8stack_frame_t
)
-
>
Option
<
CefV8StackFrame
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefV8StackFrame
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
