#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
mem
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_navigation_entry_t
{
pub
base
:
types
:
:
cef_base_t
pub
is_valid
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_navigation_entry_t
)
-
>
libc
:
:
c_int
>
pub
get_url
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_navigation_entry_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_display_url
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_navigation_entry_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_original_url
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_navigation_entry_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_title
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_navigation_entry_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_transition_type
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_navigation_entry_t
)
-
>
types
:
:
cef_transition_type_t
>
pub
has_post_data
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_navigation_entry_t
)
-
>
libc
:
:
c_int
>
pub
get_completion_time
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_navigation_entry_t
)
-
>
types
:
:
cef_time_t
>
pub
get_http_status_code
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_navigation_entry_t
)
-
>
libc
:
:
c_int
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_navigation_entry_t
=
_cef_navigation_entry_t
;
pub
struct
CefNavigationEntry
{
c_object
:
*
mut
cef_navigation_entry_t
}
impl
Clone
for
CefNavigationEntry
{
fn
clone
(
&
self
)
-
>
CefNavigationEntry
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefNavigationEntry
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefNavigationEntry
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefNavigationEntry
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_navigation_entry_t
)
-
>
CefNavigationEntry
{
CefNavigationEntry
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_navigation_entry_t
)
-
>
CefNavigationEntry
{
if
!
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefNavigationEntry
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_navigation_entry_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_navigation_entry_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_valid
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_valid
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_url
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_url
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_display_url
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_display_url
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_original_url
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_original_url
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_title
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_title
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_transition_type
(
&
self
)
-
>
types
:
:
cef_transition_type_t
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_transition_type
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
has_post_data
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_post_data
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_completion_time
(
&
self
)
-
>
types
:
:
cef_time_t
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_completion_time
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_http_status_code
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_http_status_code
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_navigation_entry_t
>
for
CefNavigationEntry
{
fn
to_c
(
rust_object
:
CefNavigationEntry
)
-
>
*
mut
cef_navigation_entry_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_navigation_entry_t
)
-
>
CefNavigationEntry
{
CefNavigationEntry
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_navigation_entry_t
>
for
Option
<
CefNavigationEntry
>
{
fn
to_c
(
rust_object
:
Option
<
CefNavigationEntry
>
)
-
>
*
mut
cef_navigation_entry_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_navigation_entry_t
)
-
>
Option
<
CefNavigationEntry
>
{
if
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
None
}
else
{
Some
(
CefNavigationEntry
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
