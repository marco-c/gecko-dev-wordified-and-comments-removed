#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
mem
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_value_t
{
pub
base
:
types
:
:
cef_base_t
pub
is_valid
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
)
-
>
libc
:
:
c_int
>
pub
is_owned
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
)
-
>
libc
:
:
c_int
>
pub
is_read_only
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
)
-
>
libc
:
:
c_int
>
pub
is_same
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
that
:
*
mut
interfaces
:
:
cef_value_t
)
-
>
libc
:
:
c_int
>
pub
is_equal
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
that
:
*
mut
interfaces
:
:
cef_value_t
)
-
>
libc
:
:
c_int
>
pub
copy
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
)
-
>
*
mut
interfaces
:
:
cef_value_t
>
pub
get_type
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
)
-
>
interfaces
:
:
cef_value_type_t
>
pub
get_bool
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
)
-
>
libc
:
:
c_int
>
pub
get_int
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
)
-
>
libc
:
:
c_int
>
pub
get_double
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
)
-
>
libc
:
:
c_double
>
pub
get_string
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_binary
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
)
-
>
*
mut
interfaces
:
:
cef_binary_value_t
>
pub
get_dictionary
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
)
-
>
*
mut
interfaces
:
:
cef_dictionary_value_t
>
pub
get_list
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
)
-
>
*
mut
interfaces
:
:
cef_list_value_t
>
pub
set_null
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
)
-
>
libc
:
:
c_int
>
pub
set_bool
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
value
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_int
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
value
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_double
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
value
:
libc
:
:
c_double
)
-
>
libc
:
:
c_int
>
pub
set_string
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
value
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
set_binary
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
value
:
*
mut
interfaces
:
:
cef_binary_value_t
)
-
>
libc
:
:
c_int
>
pub
set_dictionary
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
value
:
*
mut
interfaces
:
:
cef_dictionary_value_t
)
-
>
libc
:
:
c_int
>
pub
set_list
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_value_t
value
:
*
mut
interfaces
:
:
cef_list_value_t
)
-
>
libc
:
:
c_int
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_value_t
=
_cef_value_t
;
pub
struct
CefValue
{
c_object
:
*
mut
cef_value_t
}
impl
Clone
for
CefValue
{
fn
clone
(
&
self
)
-
>
CefValue
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefValue
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefValue
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefValue
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_value_t
)
-
>
CefValue
{
CefValue
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_value_t
)
-
>
CefValue
{
if
!
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefValue
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_value_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_value_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_valid
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_valid
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_owned
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_owned
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_read_only
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_read_only
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_same
(
&
self
that
:
interfaces
:
:
CefValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_same
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
that
)
)
)
}
}
pub
fn
is_equal
(
&
self
that
:
interfaces
:
:
CefValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_equal
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
that
)
)
)
}
}
pub
fn
copy
(
&
self
)
-
>
interfaces
:
:
CefValue
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
copy
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_type
(
&
self
)
-
>
interfaces
:
:
CefValueType
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_type
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_bool
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_bool
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_int
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_int
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_double
(
&
self
)
-
>
libc
:
:
c_double
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_double
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_string
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_string
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_binary
(
&
self
)
-
>
interfaces
:
:
CefBinaryValue
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_binary
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_dictionary
(
&
self
)
-
>
interfaces
:
:
CefDictionaryValue
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_dictionary
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_list
(
&
self
)
-
>
interfaces
:
:
CefListValue
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_list
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_null
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_null
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_bool
(
&
self
value
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_bool
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_int
(
&
self
value
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_int
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_double
(
&
self
value
:
libc
:
:
c_double
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_double
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_string
(
&
self
value
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_string
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_binary
(
&
self
value
:
interfaces
:
:
CefBinaryValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_binary
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_dictionary
(
&
self
value
:
interfaces
:
:
CefDictionaryValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_dictionary
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_list
(
&
self
value
:
interfaces
:
:
CefListValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_list
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
create
(
)
-
>
interfaces
:
:
CefValue
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
values
:
:
cef_value_create
(
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_value_t
>
for
CefValue
{
fn
to_c
(
rust_object
:
CefValue
)
-
>
*
mut
cef_value_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_value_t
)
-
>
CefValue
{
CefValue
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_value_t
>
for
Option
<
CefValue
>
{
fn
to_c
(
rust_object
:
Option
<
CefValue
>
)
-
>
*
mut
cef_value_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_value_t
)
-
>
Option
<
CefValue
>
{
if
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
None
}
else
{
Some
(
CefValue
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_binary_value_t
{
pub
base
:
types
:
:
cef_base_t
pub
is_valid
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_binary_value_t
)
-
>
libc
:
:
c_int
>
pub
is_owned
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_binary_value_t
)
-
>
libc
:
:
c_int
>
pub
is_same
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_binary_value_t
that
:
*
mut
interfaces
:
:
cef_binary_value_t
)
-
>
libc
:
:
c_int
>
pub
is_equal
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_binary_value_t
that
:
*
mut
interfaces
:
:
cef_binary_value_t
)
-
>
libc
:
:
c_int
>
pub
copy
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_binary_value_t
)
-
>
*
mut
interfaces
:
:
cef_binary_value_t
>
pub
get_size
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_binary_value_t
)
-
>
libc
:
:
size_t
>
pub
get_data
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_binary_value_t
buffer
:
*
mut
(
)
buffer_size
:
libc
:
:
size_t
data_offset
:
libc
:
:
size_t
)
-
>
libc
:
:
size_t
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_binary_value_t
=
_cef_binary_value_t
;
pub
struct
CefBinaryValue
{
c_object
:
*
mut
cef_binary_value_t
}
impl
Clone
for
CefBinaryValue
{
fn
clone
(
&
self
)
-
>
CefBinaryValue
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefBinaryValue
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefBinaryValue
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefBinaryValue
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_binary_value_t
)
-
>
CefBinaryValue
{
CefBinaryValue
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_binary_value_t
)
-
>
CefBinaryValue
{
if
!
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefBinaryValue
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_binary_value_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_binary_value_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_valid
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_valid
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_owned
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_owned
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_same
(
&
self
that
:
interfaces
:
:
CefBinaryValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_same
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
that
)
)
)
}
}
pub
fn
is_equal
(
&
self
that
:
interfaces
:
:
CefBinaryValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_equal
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
that
)
)
)
}
}
pub
fn
copy
(
&
self
)
-
>
interfaces
:
:
CefBinaryValue
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
copy
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_size
(
&
self
)
-
>
libc
:
:
size_t
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_size
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_data
(
&
self
buffer
:
&
mut
(
)
buffer_size
:
libc
:
:
size_t
data_offset
:
libc
:
:
size_t
)
-
>
libc
:
:
size_t
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_data
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
buffer
)
CefWrap
:
:
to_c
(
buffer_size
)
CefWrap
:
:
to_c
(
data_offset
)
)
)
}
}
pub
fn
create
(
data
:
&
(
)
data_size
:
libc
:
:
size_t
)
-
>
interfaces
:
:
CefBinaryValue
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
values
:
:
cef_binary_value_create
(
CefWrap
:
:
to_c
(
data
)
CefWrap
:
:
to_c
(
data_size
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_binary_value_t
>
for
CefBinaryValue
{
fn
to_c
(
rust_object
:
CefBinaryValue
)
-
>
*
mut
cef_binary_value_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_binary_value_t
)
-
>
CefBinaryValue
{
CefBinaryValue
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_binary_value_t
>
for
Option
<
CefBinaryValue
>
{
fn
to_c
(
rust_object
:
Option
<
CefBinaryValue
>
)
-
>
*
mut
cef_binary_value_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_binary_value_t
)
-
>
Option
<
CefBinaryValue
>
{
if
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
None
}
else
{
Some
(
CefBinaryValue
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_dictionary_value_t
{
pub
base
:
types
:
:
cef_base_t
pub
is_valid
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
)
-
>
libc
:
:
c_int
>
pub
is_owned
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
)
-
>
libc
:
:
c_int
>
pub
is_read_only
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
)
-
>
libc
:
:
c_int
>
pub
is_same
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
that
:
*
mut
interfaces
:
:
cef_dictionary_value_t
)
-
>
libc
:
:
c_int
>
pub
is_equal
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
that
:
*
mut
interfaces
:
:
cef_dictionary_value_t
)
-
>
libc
:
:
c_int
>
pub
copy
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
exclude_empty_children
:
libc
:
:
c_int
)
-
>
*
mut
interfaces
:
:
cef_dictionary_value_t
>
pub
get_size
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
)
-
>
libc
:
:
size_t
>
pub
clear
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
)
-
>
libc
:
:
c_int
>
pub
has_key
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
get_keys
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
keys
:
types
:
:
cef_string_list_t
)
-
>
libc
:
:
c_int
>
pub
remove
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
get_type
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
)
-
>
interfaces
:
:
cef_value_type_t
>
pub
get_value
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
)
-
>
*
mut
interfaces
:
:
cef_value_t
>
pub
get_bool
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
get_int
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
get_double
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_double
>
pub
get_string
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_binary
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
)
-
>
*
mut
interfaces
:
:
cef_binary_value_t
>
pub
get_dictionary
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
)
-
>
*
mut
interfaces
:
:
cef_dictionary_value_t
>
pub
get_list
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
)
-
>
*
mut
interfaces
:
:
cef_list_value_t
>
pub
set_value
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
value
:
*
mut
interfaces
:
:
cef_value_t
)
-
>
libc
:
:
c_int
>
pub
set_null
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
set_bool
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
value
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_int
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
value
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_double
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
value
:
libc
:
:
c_double
)
-
>
libc
:
:
c_int
>
pub
set_string
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
value
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
set_binary
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
value
:
*
mut
interfaces
:
:
cef_binary_value_t
)
-
>
libc
:
:
c_int
>
pub
set_dictionary
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
value
:
*
mut
interfaces
:
:
cef_dictionary_value_t
)
-
>
libc
:
:
c_int
>
pub
set_list
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_dictionary_value_t
key
:
*
const
types
:
:
cef_string_t
value
:
*
mut
interfaces
:
:
cef_list_value_t
)
-
>
libc
:
:
c_int
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_dictionary_value_t
=
_cef_dictionary_value_t
;
pub
struct
CefDictionaryValue
{
c_object
:
*
mut
cef_dictionary_value_t
}
impl
Clone
for
CefDictionaryValue
{
fn
clone
(
&
self
)
-
>
CefDictionaryValue
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefDictionaryValue
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefDictionaryValue
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefDictionaryValue
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_dictionary_value_t
)
-
>
CefDictionaryValue
{
CefDictionaryValue
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_dictionary_value_t
)
-
>
CefDictionaryValue
{
if
!
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefDictionaryValue
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_dictionary_value_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_dictionary_value_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_valid
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_valid
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_owned
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_owned
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_read_only
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_read_only
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_same
(
&
self
that
:
interfaces
:
:
CefDictionaryValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_same
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
that
)
)
)
}
}
pub
fn
is_equal
(
&
self
that
:
interfaces
:
:
CefDictionaryValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_equal
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
that
)
)
)
}
}
pub
fn
copy
(
&
self
exclude_empty_children
:
libc
:
:
c_int
)
-
>
interfaces
:
:
CefDictionaryValue
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
copy
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
exclude_empty_children
)
)
)
}
}
pub
fn
get_size
(
&
self
)
-
>
libc
:
:
size_t
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_size
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
clear
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
clear
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
has_key
(
&
self
key
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_key
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
)
)
}
}
pub
fn
get_keys
(
&
self
keys
:
Vec
<
String
>
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_keys
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
keys
)
)
)
}
}
pub
fn
remove
(
&
self
key
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
remove
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
)
)
}
}
pub
fn
get_type
(
&
self
key
:
&
[
u16
]
)
-
>
interfaces
:
:
CefValueType
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_type
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
)
)
}
}
pub
fn
get_value
(
&
self
key
:
&
[
u16
]
)
-
>
interfaces
:
:
CefValue
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_value
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
)
)
}
}
pub
fn
get_bool
(
&
self
key
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_bool
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
)
)
}
}
pub
fn
get_int
(
&
self
key
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_int
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
)
)
}
}
pub
fn
get_double
(
&
self
key
:
&
[
u16
]
)
-
>
libc
:
:
c_double
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_double
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
)
)
}
}
pub
fn
get_string
(
&
self
key
:
&
[
u16
]
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_string
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
)
)
}
}
pub
fn
get_binary
(
&
self
key
:
&
[
u16
]
)
-
>
interfaces
:
:
CefBinaryValue
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_binary
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
)
)
}
}
pub
fn
get_dictionary
(
&
self
key
:
&
[
u16
]
)
-
>
interfaces
:
:
CefDictionaryValue
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_dictionary
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
)
)
}
}
pub
fn
get_list
(
&
self
key
:
&
[
u16
]
)
-
>
interfaces
:
:
CefListValue
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_list
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
)
)
}
}
pub
fn
set_value
(
&
self
key
:
&
[
u16
]
value
:
interfaces
:
:
CefValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_value
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_null
(
&
self
key
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_null
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
)
)
}
}
pub
fn
set_bool
(
&
self
key
:
&
[
u16
]
value
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_bool
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_int
(
&
self
key
:
&
[
u16
]
value
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_int
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_double
(
&
self
key
:
&
[
u16
]
value
:
libc
:
:
c_double
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_double
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_string
(
&
self
key
:
&
[
u16
]
value
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_string
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_binary
(
&
self
key
:
&
[
u16
]
value
:
interfaces
:
:
CefBinaryValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_binary
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_dictionary
(
&
self
key
:
&
[
u16
]
value
:
interfaces
:
:
CefDictionaryValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_dictionary
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_list
(
&
self
key
:
&
[
u16
]
value
:
interfaces
:
:
CefListValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_list
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
key
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
create
(
)
-
>
interfaces
:
:
CefDictionaryValue
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
values
:
:
cef_dictionary_value_create
(
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_dictionary_value_t
>
for
CefDictionaryValue
{
fn
to_c
(
rust_object
:
CefDictionaryValue
)
-
>
*
mut
cef_dictionary_value_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_dictionary_value_t
)
-
>
CefDictionaryValue
{
CefDictionaryValue
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_dictionary_value_t
>
for
Option
<
CefDictionaryValue
>
{
fn
to_c
(
rust_object
:
Option
<
CefDictionaryValue
>
)
-
>
*
mut
cef_dictionary_value_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_dictionary_value_t
)
-
>
Option
<
CefDictionaryValue
>
{
if
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
None
}
else
{
Some
(
CefDictionaryValue
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_list_value_t
{
pub
base
:
types
:
:
cef_base_t
pub
is_valid
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
)
-
>
libc
:
:
c_int
>
pub
is_owned
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
)
-
>
libc
:
:
c_int
>
pub
is_read_only
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
)
-
>
libc
:
:
c_int
>
pub
is_same
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
that
:
*
mut
interfaces
:
:
cef_list_value_t
)
-
>
libc
:
:
c_int
>
pub
is_equal
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
that
:
*
mut
interfaces
:
:
cef_list_value_t
)
-
>
libc
:
:
c_int
>
pub
copy
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
)
-
>
*
mut
interfaces
:
:
cef_list_value_t
>
pub
set_size
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
size
:
libc
:
:
size_t
)
-
>
libc
:
:
c_int
>
pub
get_size
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
)
-
>
libc
:
:
size_t
>
pub
clear
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
)
-
>
libc
:
:
c_int
>
pub
remove
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
get_type
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
)
-
>
interfaces
:
:
cef_value_type_t
>
pub
get_value
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
)
-
>
*
mut
interfaces
:
:
cef_value_t
>
pub
get_bool
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
get_int
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
get_double
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_double
>
pub
get_string
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_binary
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
)
-
>
*
mut
interfaces
:
:
cef_binary_value_t
>
pub
get_dictionary
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
)
-
>
*
mut
interfaces
:
:
cef_dictionary_value_t
>
pub
get_list
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
)
-
>
*
mut
interfaces
:
:
cef_list_value_t
>
pub
set_value
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
value
:
*
mut
interfaces
:
:
cef_value_t
)
-
>
libc
:
:
c_int
>
pub
set_null
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_bool
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
value
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_int
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
value
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
set_double
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
value
:
libc
:
:
c_double
)
-
>
libc
:
:
c_int
>
pub
set_string
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
value
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
set_binary
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
value
:
*
mut
interfaces
:
:
cef_binary_value_t
)
-
>
libc
:
:
c_int
>
pub
set_dictionary
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
value
:
*
mut
interfaces
:
:
cef_dictionary_value_t
)
-
>
libc
:
:
c_int
>
pub
set_list
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_list_value_t
index
:
libc
:
:
c_int
value
:
*
mut
interfaces
:
:
cef_list_value_t
)
-
>
libc
:
:
c_int
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_list_value_t
=
_cef_list_value_t
;
pub
struct
CefListValue
{
c_object
:
*
mut
cef_list_value_t
}
impl
Clone
for
CefListValue
{
fn
clone
(
&
self
)
-
>
CefListValue
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefListValue
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefListValue
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefListValue
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_list_value_t
)
-
>
CefListValue
{
CefListValue
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_list_value_t
)
-
>
CefListValue
{
if
!
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefListValue
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_list_value_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_list_value_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_valid
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_valid
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_owned
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_owned
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_read_only
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_read_only
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_same
(
&
self
that
:
interfaces
:
:
CefListValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_same
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
that
)
)
)
}
}
pub
fn
is_equal
(
&
self
that
:
interfaces
:
:
CefListValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_equal
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
that
)
)
)
}
}
pub
fn
copy
(
&
self
)
-
>
interfaces
:
:
CefListValue
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
copy
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
set_size
(
&
self
size
:
libc
:
:
size_t
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_size
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
size
)
)
)
}
}
pub
fn
get_size
(
&
self
)
-
>
libc
:
:
size_t
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_size
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
clear
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
clear
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
remove
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
remove
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
get_type
(
&
self
index
:
libc
:
:
c_int
)
-
>
interfaces
:
:
CefValueType
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_type
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
get_value
(
&
self
index
:
libc
:
:
c_int
)
-
>
interfaces
:
:
CefValue
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_value
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
get_bool
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_bool
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
get_int
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_int
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
get_double
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_double
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_double
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
get_string
(
&
self
index
:
libc
:
:
c_int
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_string
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
get_binary
(
&
self
index
:
libc
:
:
c_int
)
-
>
interfaces
:
:
CefBinaryValue
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_binary
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
get_dictionary
(
&
self
index
:
libc
:
:
c_int
)
-
>
interfaces
:
:
CefDictionaryValue
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_dictionary
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
get_list
(
&
self
index
:
libc
:
:
c_int
)
-
>
interfaces
:
:
CefListValue
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_list
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
set_value
(
&
self
index
:
libc
:
:
c_int
value
:
interfaces
:
:
CefValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_value
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_null
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_null
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
set_bool
(
&
self
index
:
libc
:
:
c_int
value
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_bool
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_int
(
&
self
index
:
libc
:
:
c_int
value
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_int
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_double
(
&
self
index
:
libc
:
:
c_int
value
:
libc
:
:
c_double
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_double
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_string
(
&
self
index
:
libc
:
:
c_int
value
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_string
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_binary
(
&
self
index
:
libc
:
:
c_int
value
:
interfaces
:
:
CefBinaryValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_binary
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_dictionary
(
&
self
index
:
libc
:
:
c_int
value
:
interfaces
:
:
CefDictionaryValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_dictionary
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
set_list
(
&
self
index
:
libc
:
:
c_int
value
:
interfaces
:
:
CefListValue
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_list
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
CefWrap
:
:
to_c
(
value
)
)
)
}
}
pub
fn
create
(
)
-
>
interfaces
:
:
CefListValue
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
values
:
:
cef_list_value_create
(
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_list_value_t
>
for
CefListValue
{
fn
to_c
(
rust_object
:
CefListValue
)
-
>
*
mut
cef_list_value_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_list_value_t
)
-
>
CefListValue
{
CefListValue
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_list_value_t
>
for
Option
<
CefListValue
>
{
fn
to_c
(
rust_object
:
Option
<
CefListValue
>
)
-
>
*
mut
cef_list_value_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_list_value_t
)
-
>
Option
<
CefListValue
>
{
if
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
None
}
else
{
Some
(
CefListValue
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
