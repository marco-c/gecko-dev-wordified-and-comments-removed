#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_drag_data_t
{
pub
base
:
types
:
:
cef_base_t
pub
clone
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
)
-
>
*
mut
interfaces
:
:
cef_drag_data_t
>
pub
is_read_only
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
)
-
>
libc
:
:
c_int
>
pub
is_link
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
)
-
>
libc
:
:
c_int
>
pub
is_fragment
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
)
-
>
libc
:
:
c_int
>
pub
is_file
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
)
-
>
libc
:
:
c_int
>
pub
get_link_url
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_link_title
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_link_metadata
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_fragment_text
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_fragment_html
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_fragment_base_url
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_file_name
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_file_contents
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
writer
:
*
mut
interfaces
:
:
cef_stream_writer_t
)
-
>
libc
:
:
size_t
>
pub
get_file_names
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
names
:
types
:
:
cef_string_list_t
)
-
>
libc
:
:
c_int
>
pub
set_link_url
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
url
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
set_link_title
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
title
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
set_link_metadata
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
data
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
set_fragment_text
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
text
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
set_fragment_html
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
html
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
set_fragment_base_url
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
base_url
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
reset_file_contents
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
)
-
>
(
)
>
pub
add_file
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_drag_data_t
path
:
*
const
types
:
:
cef_string_t
display_name
:
*
const
types
:
:
cef_string_t
)
-
>
(
)
>
pub
ref_count
:
usize
pub
extra
:
u8
}
pub
type
cef_drag_data_t
=
_cef_drag_data_t
;
pub
struct
CefDragData
{
c_object
:
*
mut
cef_drag_data_t
}
impl
Clone
for
CefDragData
{
fn
clone
(
&
self
)
-
>
CefDragData
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefDragData
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefDragData
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefDragData
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_drag_data_t
)
-
>
CefDragData
{
CefDragData
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_drag_data_t
)
-
>
CefDragData
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefDragData
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_drag_data_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_drag_data_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
clone
(
&
self
)
-
>
interfaces
:
:
CefDragData
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
clone
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_read_only
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_read_only
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_link
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_link
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_fragment
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_fragment
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_file
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_file
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_link_url
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_link_url
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_link_title
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_link_title
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_link_metadata
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_link_metadata
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_fragment_text
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_fragment_text
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_fragment_html
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_fragment_html
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_fragment_base_url
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_fragment_base_url
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_file_name
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_file_name
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_file_contents
(
&
self
writer
:
interfaces
:
:
CefStreamWriter
)
-
>
libc
:
:
size_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_file_contents
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
writer
)
)
)
}
}
pub
fn
get_file_names
(
&
self
names
:
Vec
<
String
>
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_file_names
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
names
)
)
)
}
}
pub
fn
set_link_url
(
&
self
url
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_link_url
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
url
)
)
)
}
}
pub
fn
set_link_title
(
&
self
title
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_link_title
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
title
)
)
)
}
}
pub
fn
set_link_metadata
(
&
self
data
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_link_metadata
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
data
)
)
)
}
}
pub
fn
set_fragment_text
(
&
self
text
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_fragment_text
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
text
)
)
)
}
}
pub
fn
set_fragment_html
(
&
self
html
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_fragment_html
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
html
)
)
)
}
}
pub
fn
set_fragment_base_url
(
&
self
base_url
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
set_fragment_base_url
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
base_url
)
)
)
}
}
pub
fn
reset_file_contents
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
reset_file_contents
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
add_file
(
&
self
path
:
&
[
u16
]
display_name
:
&
[
u16
]
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
add_file
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
path
)
CefWrap
:
:
to_c
(
display_name
)
)
)
}
}
pub
fn
create
(
)
-
>
interfaces
:
:
CefDragData
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
drag_data
:
:
cef_drag_data_create
(
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_drag_data_t
>
for
CefDragData
{
fn
to_c
(
rust_object
:
CefDragData
)
-
>
*
mut
cef_drag_data_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_drag_data_t
)
-
>
CefDragData
{
CefDragData
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_drag_data_t
>
for
Option
<
CefDragData
>
{
fn
to_c
(
rust_object
:
Option
<
CefDragData
>
)
-
>
*
mut
cef_drag_data_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_drag_data_t
)
-
>
Option
<
CefDragData
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefDragData
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
