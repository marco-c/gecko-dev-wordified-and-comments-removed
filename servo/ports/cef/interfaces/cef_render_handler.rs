#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
mem
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_render_handler_t
{
pub
base
:
types
:
:
cef_base_t
pub
get_root_screen_rect
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
rect
:
*
mut
types
:
:
cef_rect_t
)
-
>
libc
:
:
c_int
>
pub
get_view_rect
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
rect
:
*
mut
types
:
:
cef_rect_t
)
-
>
libc
:
:
c_int
>
pub
get_screen_point
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
viewX
:
libc
:
:
c_int
viewY
:
libc
:
:
c_int
screenX
:
*
mut
libc
:
:
c_int
screenY
:
*
mut
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
get_screen_info
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
screen_info
:
*
mut
interfaces
:
:
cef_screen_info_t
)
-
>
libc
:
:
c_int
>
pub
on_popup_show
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
show
:
libc
:
:
c_int
)
-
>
(
)
>
pub
on_popup_size
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
rect
:
*
const
types
:
:
cef_rect_t
)
-
>
(
)
>
pub
on_paint
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
ty
:
types
:
:
cef_paint_element_type_t
dirtyRects_count
:
libc
:
:
size_t
dirtyRects
:
*
const
types
:
:
cef_rect_t
buffer
:
*
const
(
)
width
:
libc
:
:
c_int
height
:
libc
:
:
c_int
)
-
>
(
)
>
pub
on_cursor_change
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
cursor
:
types
:
:
cef_cursor_handle_t
ty
:
types
:
:
cef_cursor_type_t
custom_cursor_info
:
*
const
interfaces
:
:
cef_cursor_info_t
)
-
>
(
)
>
pub
start_dragging
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
drag_data
:
*
mut
interfaces
:
:
cef_drag_data_t
allowed_ops
:
types
:
:
cef_drag_operations_mask_t
x
:
libc
:
:
c_int
y
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
update_drag_cursor
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
operation
:
types
:
:
cef_drag_operations_mask_t
)
-
>
(
)
>
pub
on_scroll_offset_changed
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
x
:
libc
:
:
c_double
y
:
libc
:
:
c_double
)
-
>
(
)
>
pub
get_backing_rect
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
rect
:
*
mut
types
:
:
cef_rect_t
)
-
>
libc
:
:
c_int
>
pub
on_present
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_render_handler_t
browser
:
*
mut
interfaces
:
:
cef_browser_t
)
-
>
(
)
>
pub
ref_count
:
u32
pub
extra
:
u8
}
pub
type
cef_render_handler_t
=
_cef_render_handler_t
;
pub
struct
CefRenderHandler
{
c_object
:
*
mut
cef_render_handler_t
}
impl
Clone
for
CefRenderHandler
{
fn
clone
(
&
self
)
-
>
CefRenderHandler
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefRenderHandler
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefRenderHandler
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefRenderHandler
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_render_handler_t
)
-
>
CefRenderHandler
{
CefRenderHandler
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_render_handler_t
)
-
>
CefRenderHandler
{
if
!
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefRenderHandler
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_render_handler_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_render_handler_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
&
&
self
.
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
}
pub
fn
get_root_screen_rect
(
&
self
browser
:
interfaces
:
:
CefBrowser
rect
:
&
mut
types
:
:
cef_rect_t
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_root_screen_rect
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
rect
)
)
)
}
}
pub
fn
get_view_rect
(
&
self
browser
:
interfaces
:
:
CefBrowser
rect
:
&
mut
types
:
:
cef_rect_t
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_view_rect
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
rect
)
)
)
}
}
pub
fn
get_screen_point
(
&
self
browser
:
interfaces
:
:
CefBrowser
viewX
:
libc
:
:
c_int
viewY
:
libc
:
:
c_int
screenX
:
&
mut
libc
:
:
c_int
screenY
:
&
mut
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_screen_point
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
viewX
)
CefWrap
:
:
to_c
(
viewY
)
CefWrap
:
:
to_c
(
screenX
)
CefWrap
:
:
to_c
(
screenY
)
)
)
}
}
pub
fn
get_screen_info
(
&
self
browser
:
interfaces
:
:
CefBrowser
screen_info
:
&
mut
interfaces
:
:
CefScreenInfo
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_screen_info
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
screen_info
)
)
)
}
}
pub
fn
on_popup_show
(
&
self
browser
:
interfaces
:
:
CefBrowser
show
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_popup_show
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
show
)
)
)
}
}
pub
fn
on_popup_size
(
&
self
browser
:
interfaces
:
:
CefBrowser
rect
:
&
types
:
:
cef_rect_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_popup_size
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
rect
)
)
)
}
}
pub
fn
on_paint
(
&
self
browser
:
interfaces
:
:
CefBrowser
ty
:
types
:
:
cef_paint_element_type_t
dirtyRects_count
:
libc
:
:
size_t
dirtyRects
:
*
const
types
:
:
cef_rect_t
buffer
:
&
(
)
width
:
libc
:
:
c_int
height
:
libc
:
:
c_int
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_paint
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
ty
)
CefWrap
:
:
to_c
(
dirtyRects_count
)
CefWrap
:
:
to_c
(
dirtyRects
)
CefWrap
:
:
to_c
(
buffer
)
CefWrap
:
:
to_c
(
width
)
CefWrap
:
:
to_c
(
height
)
)
)
}
}
pub
fn
on_cursor_change
(
&
self
browser
:
interfaces
:
:
CefBrowser
cursor
:
types
:
:
cef_cursor_handle_t
ty
:
types
:
:
cef_cursor_type_t
custom_cursor_info
:
&
interfaces
:
:
CefCursorInfo
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_cursor_change
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
cursor
)
CefWrap
:
:
to_c
(
ty
)
CefWrap
:
:
to_c
(
custom_cursor_info
)
)
)
}
}
pub
fn
start_dragging
(
&
self
browser
:
interfaces
:
:
CefBrowser
drag_data
:
interfaces
:
:
CefDragData
allowed_ops
:
types
:
:
cef_drag_operations_mask_t
x
:
libc
:
:
c_int
y
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
start_dragging
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
drag_data
)
CefWrap
:
:
to_c
(
allowed_ops
)
CefWrap
:
:
to_c
(
x
)
CefWrap
:
:
to_c
(
y
)
)
)
}
}
pub
fn
update_drag_cursor
(
&
self
browser
:
interfaces
:
:
CefBrowser
operation
:
types
:
:
cef_drag_operations_mask_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
update_drag_cursor
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
operation
)
)
)
}
}
pub
fn
on_scroll_offset_changed
(
&
self
browser
:
interfaces
:
:
CefBrowser
x
:
libc
:
:
c_double
y
:
libc
:
:
c_double
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_scroll_offset_changed
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
x
)
CefWrap
:
:
to_c
(
y
)
)
)
}
}
pub
fn
get_backing_rect
(
&
self
browser
:
interfaces
:
:
CefBrowser
rect
:
&
mut
types
:
:
cef_rect_t
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_backing_rect
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
CefWrap
:
:
to_c
(
rect
)
)
)
}
}
pub
fn
on_present
(
&
self
browser
:
interfaces
:
:
CefBrowser
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
|
|
self
.
c_object
as
usize
=
=
mem
:
:
POST_DROP_USIZE
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_present
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
browser
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_render_handler_t
>
for
CefRenderHandler
{
fn
to_c
(
rust_object
:
CefRenderHandler
)
-
>
*
mut
cef_render_handler_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_render_handler_t
)
-
>
CefRenderHandler
{
CefRenderHandler
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_render_handler_t
>
for
Option
<
CefRenderHandler
>
{
fn
to_c
(
rust_object
:
Option
<
CefRenderHandler
>
)
-
>
*
mut
cef_render_handler_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_render_handler_t
)
-
>
Option
<
CefRenderHandler
>
{
if
c_object
.
is_null
(
)
&
&
c_object
as
usize
!
=
mem
:
:
POST_DROP_USIZE
{
None
}
else
{
Some
(
CefRenderHandler
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
