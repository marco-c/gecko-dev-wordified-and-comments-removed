#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_xml_reader_t
{
pub
base
:
types
:
:
cef_base_t
pub
move_to_next_node
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
libc
:
:
c_int
>
pub
close
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
libc
:
:
c_int
>
pub
has_error
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
libc
:
:
c_int
>
pub
get_error
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_type
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
types
:
:
cef_xml_node_type_t
>
pub
get_depth
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
libc
:
:
c_int
>
pub
get_local_name
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_prefix
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_qualified_name
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_namespace_uri
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_base_uri
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_xml_lang
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
is_empty_element
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
libc
:
:
c_int
>
pub
has_value
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
libc
:
:
c_int
>
pub
get_value
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
has_attributes
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
libc
:
:
c_int
>
pub
get_attribute_count
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
libc
:
:
size_t
>
pub
get_attribute_byindex
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
index
:
libc
:
:
c_int
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_attribute_byqname
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
qualifiedName
:
*
const
types
:
:
cef_string_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_attribute_bylname
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
localName
:
*
const
types
:
:
cef_string_t
namespaceURI
:
*
const
types
:
:
cef_string_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_inner_xml
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_outer_xml
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
types
:
:
cef_string_userfree_t
>
pub
get_line_number
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
libc
:
:
c_int
>
pub
move_to_attribute_byindex
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
>
pub
move_to_attribute_byqname
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
qualifiedName
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
move_to_attribute_bylname
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
localName
:
*
const
types
:
:
cef_string_t
namespaceURI
:
*
const
types
:
:
cef_string_t
)
-
>
libc
:
:
c_int
>
pub
move_to_first_attribute
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
libc
:
:
c_int
>
pub
move_to_next_attribute
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
libc
:
:
c_int
>
pub
move_to_carrying_element
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_xml_reader_t
)
-
>
libc
:
:
c_int
>
pub
ref_count
:
usize
pub
extra
:
u8
}
pub
type
cef_xml_reader_t
=
_cef_xml_reader_t
;
pub
struct
CefXmlReader
{
c_object
:
*
mut
cef_xml_reader_t
}
impl
Clone
for
CefXmlReader
{
fn
clone
(
&
self
)
-
>
CefXmlReader
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefXmlReader
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefXmlReader
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefXmlReader
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_xml_reader_t
)
-
>
CefXmlReader
{
CefXmlReader
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_xml_reader_t
)
-
>
CefXmlReader
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefXmlReader
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_xml_reader_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_xml_reader_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
move_to_next_node
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
move_to_next_node
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
close
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
close
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
has_error
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_error
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_error
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_error
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_type
(
&
self
)
-
>
types
:
:
cef_xml_node_type_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_type
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_depth
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_depth
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_local_name
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_local_name
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_prefix
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_prefix
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_qualified_name
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_qualified_name
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_namespace_uri
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_namespace_uri
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_base_uri
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_base_uri
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_xml_lang
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_xml_lang
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
is_empty_element
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
is_empty_element
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
has_value
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_value
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_value
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_value
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
has_attributes
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
has_attributes
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_attribute_count
(
&
self
)
-
>
libc
:
:
size_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_attribute_count
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_attribute_byindex
(
&
self
index
:
libc
:
:
c_int
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_attribute_byindex
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
get_attribute_byqname
(
&
self
qualifiedName
:
&
[
u16
]
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_attribute_byqname
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
qualifiedName
)
)
)
}
}
pub
fn
get_attribute_bylname
(
&
self
localName
:
&
[
u16
]
namespaceURI
:
&
[
u16
]
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_attribute_bylname
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
localName
)
CefWrap
:
:
to_c
(
namespaceURI
)
)
)
}
}
pub
fn
get_inner_xml
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_inner_xml
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_outer_xml
(
&
self
)
-
>
String
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_outer_xml
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_line_number
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_line_number
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
move_to_attribute_byindex
(
&
self
index
:
libc
:
:
c_int
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
move_to_attribute_byindex
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
index
)
)
)
}
}
pub
fn
move_to_attribute_byqname
(
&
self
qualifiedName
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
move_to_attribute_byqname
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
qualifiedName
)
)
)
}
}
pub
fn
move_to_attribute_bylname
(
&
self
localName
:
&
[
u16
]
namespaceURI
:
&
[
u16
]
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
move_to_attribute_bylname
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
localName
)
CefWrap
:
:
to_c
(
namespaceURI
)
)
)
}
}
pub
fn
move_to_first_attribute
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
move_to_first_attribute
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
move_to_next_attribute
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
move_to_next_attribute
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
move_to_carrying_element
(
&
self
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
move_to_carrying_element
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
create
(
stream
:
interfaces
:
:
CefStreamReader
encodingType
:
types
:
:
cef_xml_encoding_type_t
URI
:
&
[
u16
]
)
-
>
interfaces
:
:
CefXmlReader
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
xml_reader
:
:
cef_xml_reader_create
(
CefWrap
:
:
to_c
(
stream
)
CefWrap
:
:
to_c
(
encodingType
)
CefWrap
:
:
to_c
(
URI
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_xml_reader_t
>
for
CefXmlReader
{
fn
to_c
(
rust_object
:
CefXmlReader
)
-
>
*
mut
cef_xml_reader_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_xml_reader_t
)
-
>
CefXmlReader
{
CefXmlReader
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_xml_reader_t
>
for
Option
<
CefXmlReader
>
{
fn
to_c
(
rust_object
:
Option
<
CefXmlReader
>
)
-
>
*
mut
cef_xml_reader_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_xml_reader_t
)
-
>
Option
<
CefXmlReader
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefXmlReader
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
