#
!
[
allow
(
non_snake_case
unused_imports
)
]
use
eutil
;
use
interfaces
;
use
types
;
use
wrappers
:
:
CefWrap
;
use
libc
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
ptr
;
#
[
repr
(
C
)
]
pub
struct
_cef_urlrequest_t
{
pub
base
:
types
:
:
cef_base_t
pub
get_request
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_urlrequest_t
)
-
>
*
mut
interfaces
:
:
cef_request_t
>
pub
get_client
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_urlrequest_t
)
-
>
*
mut
interfaces
:
:
cef_urlrequest_client_t
>
pub
get_request_status
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_urlrequest_t
)
-
>
types
:
:
cef_urlrequest_status_t
>
pub
get_request_error
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_urlrequest_t
)
-
>
types
:
:
cef_errorcode_t
>
pub
get_response
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_urlrequest_t
)
-
>
*
mut
interfaces
:
:
cef_response_t
>
pub
cancel
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_urlrequest_t
)
-
>
(
)
>
pub
ref_count
:
usize
pub
extra
:
u8
}
pub
type
cef_urlrequest_t
=
_cef_urlrequest_t
;
pub
struct
CefURLRequest
{
c_object
:
*
mut
cef_urlrequest_t
}
impl
Clone
for
CefURLRequest
{
fn
clone
(
&
self
)
-
>
CefURLRequest
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefURLRequest
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefURLRequest
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefURLRequest
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_urlrequest_t
)
-
>
CefURLRequest
{
CefURLRequest
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_urlrequest_t
)
-
>
CefURLRequest
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefURLRequest
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_urlrequest_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_urlrequest_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
get_request
(
&
self
)
-
>
interfaces
:
:
CefRequest
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_request
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_client
(
&
self
)
-
>
interfaces
:
:
CefURLRequestClient
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_client
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_request_status
(
&
self
)
-
>
types
:
:
cef_urlrequest_status_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_request_status
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_request_error
(
&
self
)
-
>
types
:
:
cef_errorcode_t
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_request_error
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
get_response
(
&
self
)
-
>
interfaces
:
:
CefResponse
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_response
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
cancel
(
&
self
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
cancel
.
unwrap
(
)
)
(
self
.
c_object
)
)
}
}
pub
fn
create
(
request
:
interfaces
:
:
CefRequest
client
:
interfaces
:
:
CefURLRequestClient
)
-
>
interfaces
:
:
CefURLRequest
{
unsafe
{
CefWrap
:
:
to_rust
(
:
:
urlrequest
:
:
cef_urlrequest_create
(
CefWrap
:
:
to_c
(
request
)
CefWrap
:
:
to_c
(
client
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_urlrequest_t
>
for
CefURLRequest
{
fn
to_c
(
rust_object
:
CefURLRequest
)
-
>
*
mut
cef_urlrequest_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_urlrequest_t
)
-
>
CefURLRequest
{
CefURLRequest
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_urlrequest_t
>
for
Option
<
CefURLRequest
>
{
fn
to_c
(
rust_object
:
Option
<
CefURLRequest
>
)
-
>
*
mut
cef_urlrequest_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_urlrequest_t
)
-
>
Option
<
CefURLRequest
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefURLRequest
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
#
[
repr
(
C
)
]
pub
struct
_cef_urlrequest_client_t
{
pub
base
:
types
:
:
cef_base_t
pub
on_request_complete
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_urlrequest_client_t
request
:
*
mut
interfaces
:
:
cef_urlrequest_t
)
-
>
(
)
>
pub
on_upload_progress
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_urlrequest_client_t
request
:
*
mut
interfaces
:
:
cef_urlrequest_t
current
:
u64
total
:
u64
)
-
>
(
)
>
pub
on_download_progress
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_urlrequest_client_t
request
:
*
mut
interfaces
:
:
cef_urlrequest_t
current
:
u64
total
:
u64
)
-
>
(
)
>
pub
on_download_data
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_urlrequest_client_t
request
:
*
mut
interfaces
:
:
cef_urlrequest_t
data
:
*
const
(
)
data_length
:
libc
:
:
size_t
)
-
>
(
)
>
pub
get_auth_credentials
:
Option
<
extern
"
C
"
fn
(
this
:
*
mut
cef_urlrequest_client_t
isProxy
:
libc
:
:
c_int
host
:
*
const
types
:
:
cef_string_t
port
:
libc
:
:
c_int
realm
:
*
const
types
:
:
cef_string_t
scheme
:
*
const
types
:
:
cef_string_t
callback
:
*
mut
interfaces
:
:
cef_auth_callback_t
)
-
>
libc
:
:
c_int
>
pub
ref_count
:
usize
pub
extra
:
u8
}
pub
type
cef_urlrequest_client_t
=
_cef_urlrequest_client_t
;
pub
struct
CefURLRequestClient
{
c_object
:
*
mut
cef_urlrequest_client_t
}
impl
Clone
for
CefURLRequestClient
{
fn
clone
(
&
self
)
-
>
CefURLRequestClient
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
CefURLRequestClient
{
c_object
:
self
.
c_object
}
}
}
}
impl
Drop
for
CefURLRequestClient
{
fn
drop
(
&
mut
self
)
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
(
(
*
self
.
c_object
)
.
base
.
release
.
unwrap
(
)
)
(
&
mut
(
*
self
.
c_object
)
.
base
)
;
}
}
}
}
impl
CefURLRequestClient
{
pub
unsafe
fn
from_c_object
(
c_object
:
*
mut
cef_urlrequest_client_t
)
-
>
CefURLRequestClient
{
CefURLRequestClient
{
c_object
:
c_object
}
}
pub
unsafe
fn
from_c_object_addref
(
c_object
:
*
mut
cef_urlrequest_client_t
)
-
>
CefURLRequestClient
{
if
!
c_object
.
is_null
(
)
{
(
(
*
c_object
)
.
base
.
add_ref
.
unwrap
(
)
)
(
&
mut
(
*
c_object
)
.
base
)
;
}
CefURLRequestClient
{
c_object
:
c_object
}
}
pub
fn
c_object
(
&
self
)
-
>
*
mut
cef_urlrequest_client_t
{
self
.
c_object
}
pub
fn
c_object_addrefed
(
&
self
)
-
>
*
mut
cef_urlrequest_client_t
{
unsafe
{
if
!
self
.
c_object
.
is_null
(
)
{
eutil
:
:
add_ref
(
self
.
c_object
as
*
mut
types
:
:
cef_base_t
)
;
}
self
.
c_object
}
}
pub
fn
is_null_cef_object
(
&
self
)
-
>
bool
{
self
.
c_object
.
is_null
(
)
}
pub
fn
is_not_null_cef_object
(
&
self
)
-
>
bool
{
!
self
.
c_object
.
is_null
(
)
}
pub
fn
on_request_complete
(
&
self
request
:
interfaces
:
:
CefURLRequest
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_request_complete
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
request
)
)
)
}
}
pub
fn
on_upload_progress
(
&
self
request
:
interfaces
:
:
CefURLRequest
current
:
u64
total
:
u64
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_upload_progress
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
request
)
CefWrap
:
:
to_c
(
current
)
CefWrap
:
:
to_c
(
total
)
)
)
}
}
pub
fn
on_download_progress
(
&
self
request
:
interfaces
:
:
CefURLRequest
current
:
u64
total
:
u64
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_download_progress
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
request
)
CefWrap
:
:
to_c
(
current
)
CefWrap
:
:
to_c
(
total
)
)
)
}
}
pub
fn
on_download_data
(
&
self
request
:
interfaces
:
:
CefURLRequest
data
:
&
(
)
data_length
:
libc
:
:
size_t
)
-
>
(
)
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
on_download_data
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
request
)
CefWrap
:
:
to_c
(
data
)
CefWrap
:
:
to_c
(
data_length
)
)
)
}
}
pub
fn
get_auth_credentials
(
&
self
isProxy
:
libc
:
:
c_int
host
:
&
[
u16
]
port
:
libc
:
:
c_int
realm
:
&
[
u16
]
scheme
:
&
[
u16
]
callback
:
interfaces
:
:
CefAuthCallback
)
-
>
libc
:
:
c_int
{
if
self
.
c_object
.
is_null
(
)
{
panic
!
(
"
called
a
CEF
method
on
a
null
object
"
)
}
unsafe
{
CefWrap
:
:
to_rust
(
(
(
*
self
.
c_object
)
.
get_auth_credentials
.
unwrap
(
)
)
(
self
.
c_object
CefWrap
:
:
to_c
(
isProxy
)
CefWrap
:
:
to_c
(
host
)
CefWrap
:
:
to_c
(
port
)
CefWrap
:
:
to_c
(
realm
)
CefWrap
:
:
to_c
(
scheme
)
CefWrap
:
:
to_c
(
callback
)
)
)
}
}
}
impl
CefWrap
<
*
mut
cef_urlrequest_client_t
>
for
CefURLRequestClient
{
fn
to_c
(
rust_object
:
CefURLRequestClient
)
-
>
*
mut
cef_urlrequest_client_t
{
rust_object
.
c_object_addrefed
(
)
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_urlrequest_client_t
)
-
>
CefURLRequestClient
{
CefURLRequestClient
:
:
from_c_object_addref
(
c_object
)
}
}
impl
CefWrap
<
*
mut
cef_urlrequest_client_t
>
for
Option
<
CefURLRequestClient
>
{
fn
to_c
(
rust_object
:
Option
<
CefURLRequestClient
>
)
-
>
*
mut
cef_urlrequest_client_t
{
match
rust_object
{
None
=
>
ptr
:
:
null_mut
(
)
Some
(
rust_object
)
=
>
rust_object
.
c_object_addrefed
(
)
}
}
unsafe
fn
to_rust
(
c_object
:
*
mut
cef_urlrequest_client_t
)
-
>
Option
<
CefURLRequestClient
>
{
if
c_object
.
is_null
(
)
{
None
}
else
{
Some
(
CefURLRequestClient
:
:
from_c_object_addref
(
c_object
)
)
}
}
}
