use
libc
:
:
{
c_uint
c_ushort
c_int
c_double
size_t
}
;
#
[
cfg
(
target_os
=
"
linux
"
)
]
use
libc
:
:
c_ulong
;
#
[
cfg
(
target_os
=
"
macos
"
)
]
use
libc
:
:
c_void
;
use
libc
:
:
types
:
:
os
:
:
arch
:
:
c95
:
:
wchar_t
;
use
net
:
:
net_error_list
:
:
NetError
;
pub
use
self
:
:
cef_rect
as
cef_rect_t
;
pub
enum
cef_string_map_t
{
}
pub
enum
cef_string_multimap_t
{
}
pub
type
cef_string_list_t
=
Vec
<
String
>
;
pub
enum
cef_text_input_context_t
{
}
pub
enum
cef_event_handle_t
{
}
#
[
cfg
(
target_os
=
"
linux
"
)
]
pub
type
cef_window_handle_t
=
c_ulong
;
#
[
cfg
(
target_os
=
"
macos
"
)
]
pub
type
cef_window_handle_t
=
*
mut
c_void
;
#
[
cfg
(
target_os
=
"
linux
"
)
]
pub
type
cef_cursor_handle_t
=
c_ulong
;
#
[
cfg
(
target_os
=
"
macos
"
)
]
pub
type
cef_cursor_handle_t
=
*
mut
c_void
;
pub
type
cef_string_t
=
cef_string_utf16
;
pub
type
cef_string_userfree_t
=
*
mut
cef_string_t
;
pub
struct
cef_string_utf8
{
pub
str
:
*
mut
u8
pub
length
:
size_t
pub
dtor
:
Option
<
extern
"
C
"
fn
(
str
:
*
mut
u8
)
>
}
pub
type
cef_string_utf8_t
=
cef_string_utf8
;
pub
type
cef_string_userfree_utf8_t
=
cef_string_utf8
;
pub
type
cef_string_utf16_t
=
cef_string_utf16
;
pub
type
cef_string_userfree_utf16_t
=
*
mut
cef_string_utf16
;
pub
struct
cef_string_utf16
{
pub
str
:
*
mut
c_ushort
pub
length
:
size_t
pub
dtor
:
Option
<
extern
"
C
"
fn
(
str
:
*
mut
c_ushort
)
>
}
pub
type
cef_string_wide_t
=
cef_string_wide
;
pub
type
cef_string_userfree_wide_t
=
cef_string_wide
;
pub
struct
cef_string_wide
{
pub
str
:
*
mut
wchar_t
pub
length
:
size_t
pub
dtor
:
Option
<
extern
"
C
"
fn
(
str
:
*
mut
wchar_t
)
>
}
pub
type
cef_main_args_t
=
cef_main_args
;
pub
struct
cef_main_args
{
pub
argc
:
c_int
pub
argv
:
*
const
*
const
u8
}
pub
type
cef_color_t
=
c_uint
;
pub
enum
cef_state_t
{
STATE_DEFAULT
=
0
STATE_ENABLED
STATE_DISABLED
}
pub
enum
cef_thread_id_t
{
TID_UI
TID_DB
TID_FILE
TID_FILE_USER_BLOCKING
TID_PROCESS_LAUNCHER
TID_CACHE
TID_IO
TID_RENDERER
}
pub
enum
cef_navigation_type_t
{
NAVIGATION_LINK_CLICKED
=
0
NAVIGATION_FORM_SUBMITTED
NAVIGATION_BACK_FORWARD
NAVIGATION_RELOAD
NAVIGATION_FORM_RESUBMITTED
NAVIGATION_OTHER
}
pub
enum
cef_mouse_button_type_t
{
MBT_LEFT
=
0
MBT_MIDDLE
MBT_RIGHT
}
pub
type
cef_mouse_event_t
=
cef_mouse_event
;
pub
type
CefMouseEvent
=
cef_mouse_event_t
;
pub
struct
cef_mouse_event
{
pub
x
:
c_int
pub
y
:
c_int
pub
modifiers
:
c_uint
}
pub
enum
cef_postdataelement_type_t
{
PDE_TYPE_EMPTY
=
0
PDE_TYPE_BYTES
PDE_TYPE_FILE
}
pub
enum
cef_urlrequest_flags_t
{
UR_FLAG_NONE
=
0
UR_FLAG_SKIP_CACHE
=
1
<
<
0
UR_FLAG_ALLOW_CACHED_CREDENTIALS
=
1
<
<
1
UR_FLAG_ALLOW_COOKIES
=
1
<
<
2
UR_FLAG_REPORT_UPLOAD_PROGRESS
=
1
<
<
3
UR_FLAG_REPORT_LOAD_TIMING
=
1
<
<
4
UR_FLAG_REPORT_RAW_HEADERS
=
1
<
<
5
UR_FLAG_NO_DOWNLOAD_DATA
=
1
<
<
6
UR_FLAG_NO_RETRY_ON_5XX
=
1
<
<
7
}
pub
enum
cef_urlrequest_status_t
{
UR_UNKNOWN
=
0
UR_SUCCESS
UR_IO_PENDING
UR_CANCELED
UR_FAILED
}
pub
type
cef_errorcode_t
=
NetError
;
pub
enum
cef_key_event_type_t
{
KEYEVENT_RAWKEYDOWN
=
0
KEYEVENT_KEYDOWN
KEYEVENT_KEYUP
KEYEVENT_CHAR
}
pub
type
cef_key_event_t
=
cef_key_event
;
pub
struct
cef_key_event
{
pub
t
:
cef_key_event_type_t
pub
modifiers
:
c_uint
pub
windows_key_code
:
c_int
pub
native_key_code
:
c_int
pub
is_system_key
:
c_int
pub
character
:
c_ushort
pub
unmodified_character
:
c_ushort
pub
focus_on_editable_field
:
c_int
}
pub
type
CefKeyEvent
=
cef_key_event_t
;
pub
type
cef_point_t
=
cef_point
;
pub
struct
cef_point
{
pub
x
:
c_int
pub
y
:
c_int
}
pub
struct
cef_rect
{
pub
x
:
c_int
pub
y
:
c_int
pub
width
:
c_int
pub
height
:
c_int
}
impl
cef_rect
{
pub
fn
zero
(
)
-
>
cef_rect
{
cef_rect
{
x
:
0
y
:
0
width
:
0
height
:
0
}
}
}
pub
enum
cef_paint_element_type_t
{
PET_VIEW
=
0
PET_POPUP
}
pub
enum
cef_dom_document_type_t
{
DOM_DOCUMENT_TYPE_UNKNOWN
=
0
DOM_DOCUMENT_TYPE_HTML
DOM_DOCUMENT_TYPE_XHTML
DOM_DOCUMENT_TYPE_PLUGIN
}
pub
enum
cef_file_dialog_mode_t
{
FILE_DIALOG_OPEN
=
0
FILE_DIALOG_OPEN_MULTIPLE
FILE_DIALOG_SAVE
}
pub
enum
cef_value_type_t
{
VTYPE_INVALID
=
0
VTYPE_NULL
VTYPE_BOOL
VTYPE_INT
VTYPE_DOUBLE
VTYPE_STRING
VTYPE_BINARY
VTYPE_DICTIONARY
VTYPE_LIST
}
pub
type
CefValueType
=
cef_value_type_t
;
pub
enum
cef_process_id_t
{
PID_BROWSER
PID_RENDERER
}
pub
type
CefProcessId
=
cef_process_id_t
;
pub
enum
cef_log_severity_t
{
LOGSEVERITY_DEFAULT
LOGSEVERITY_VERBOSE
LOGSEVERITY_INFO
LOGSEVERITY_WARNING
LOGSEVERITY_ERROR
LOGSEVERITY_ERROR_REPORT
LOGSEVERITY_DISABLE
=
99
}
pub
type
cef_settings_t
=
cef_settings
;
#
[
repr
(
C
)
]
pub
struct
cef_settings
{
pub
size
:
size_t
pub
single_process
:
c_int
pub
no_sandbox
:
c_int
pub
browser_subprocess_path
:
cef_string_t
pub
multi_threaded_message_loop
:
c_int
pub
windowless_rendering_enabled
:
c_int
pub
command_line_args_disabled
:
c_int
pub
cache_path
:
cef_string_t
pub
persist_session_cookies
:
c_int
pub
user_agent
:
cef_string_t
pub
product_version
:
cef_string_t
pub
locale
:
cef_string_t
pub
log_file
:
cef_string_t
pub
log_severity
:
cef_log_severity_t
pub
javascript_flags
:
cef_string_t
pub
resources_dir_path
:
cef_string_t
pub
locales_dir_path
:
cef_string_t
pub
pack_loading_disabled
:
c_int
pub
remote_debugging_port
:
c_int
pub
uncaught_exception_stack_size
:
c_int
pub
context_safety_implementation
:
c_int
pub
ignore_certificate_errors
:
c_int
pub
background_color
:
cef_color_t
pub
rendering_threads
:
c_int
}
pub
type
cef_base_t
=
cef_base
;
pub
struct
cef_base
{
pub
size
:
size_t
pub
add_ref
:
Option
<
extern
"
C
"
fn
(
base
:
*
mut
cef_base
)
-
>
c_int
>
pub
release
:
Option
<
extern
"
C
"
fn
(
base
:
*
mut
cef_base
)
-
>
c_int
>
pub
get_refct
:
Option
<
extern
"
C
"
fn
(
base
:
*
mut
cef_base
)
-
>
c_int
>
}
pub
type
CefBase
=
*
mut
cef_base_t
;
pub
type
cef_window_info_t
=
cef_window_info
;
#
[
cfg
(
target_os
=
"
linux
"
)
]
pub
struct
cef_window_info
{
pub
x
:
c_uint
pub
y
:
c_uint
pub
width
:
c_uint
pub
height
:
c_uint
pub
parent_window
:
cef_window_handle_t
pub
windowless_rendering_enabled
:
c_int
pub
transparent_painting_enabled
:
c_int
pub
window
:
cef_window_handle_t
}
#
[
cfg
(
target_os
=
"
macos
"
)
]
pub
struct
cef_window_info
{
pub
window_name
:
cef_string_t
pub
x
:
c_uint
pub
y
:
c_uint
pub
width
:
c_uint
pub
height
:
c_uint
pub
hidden
:
c_int
pub
parent_window
:
cef_window_handle_t
pub
windowless_rendering_enabled
:
c_int
pub
transparent_painting_enabled
:
c_int
pub
window
:
cef_window_handle_t
}
pub
type
CefWindowInfo
=
cef_window_info_t
;
pub
enum
cef_menu_item_type_t
{
MENUITEMTYPE_NONE
MENUITEMTYPE_COMMAND
MENUITEMTYPE_CHECK
MENUITEMTYPE_RADIO
MENUITEMTYPE_SEPARATOR
MENUITEMTYPE_SUBMENU
}
pub
enum
cef_context_menu_type_flags_t
{
CM_TYPEFLAG_NONE
=
0
CM_TYPEFLAG_PAGE
=
1
<
<
0
CM_TYPEFLAG_FRAME
=
1
<
<
1
CM_TYPEFLAG_LINK
=
1
<
<
2
CM_TYPEFLAG_MEDIA
=
1
<
<
3
CM_TYPEFLAG_SELECTION
=
1
<
<
4
CM_TYPEFLAG_EDITABLE
=
1
<
<
5
}
pub
enum
cef_context_menu_media_type_t
{
CM_MEDIATYPE_NONE
CM_MEDIATYPE_IMAGE
CM_MEDIATYPE_VIDEO
CM_MEDIATYPE_AUDIO
CM_MEDIATYPE_FILE
CM_MEDIATYPE_PLUGIN
}
pub
enum
cef_context_menu_media_state_flags_t
{
CM_MEDIAFLAG_NONE
=
0
CM_MEDIAFLAG_ERROR
=
1
<
<
0
CM_MEDIAFLAG_PAUSED
=
1
<
<
1
CM_MEDIAFLAG_MUTED
=
1
<
<
2
CM_MEDIAFLAG_LOOP
=
1
<
<
3
CM_MEDIAFLAG_CAN_SAVE
=
1
<
<
4
CM_MEDIAFLAG_HAS_AUDIO
=
1
<
<
5
CM_MEDIAFLAG_HAS_VIDEO
=
1
<
<
6
CM_MEDIAFLAG_CONTROL_ROOT_ELEMENT
=
1
<
<
7
CM_MEDIAFLAG_CAN_PRINT
=
1
<
<
8
CM_MEDIAFLAG_CAN_ROTATE
=
1
<
<
9
}
pub
enum
cef_context_menu_edit_state_flags_t
{
CM_EDITFLAG_NONE
=
0
CM_EDITFLAG_CAN_UNDO
=
1
<
<
0
CM_EDITFLAG_CAN_REDO
=
1
<
<
1
CM_EDITFLAG_CAN_CUT
=
1
<
<
2
CM_EDITFLAG_CAN_COPY
=
1
<
<
3
CM_EDITFLAG_CAN_PASTE
=
1
<
<
4
CM_EDITFLAG_CAN_DELETE
=
1
<
<
5
CM_EDITFLAG_CAN_SELECT_ALL
=
1
<
<
6
CM_EDITFLAG_CAN_TRANSLATE
=
1
<
<
7
}
pub
enum
cef_event_flags_t
{
EVENTFLAG_NONE
=
0
EVENTFLAG_CAPS_LOCK_ON
=
1
<
<
0
EVENTFLAG_SHIFT_DOWN
=
1
<
<
1
EVENTFLAG_CONTROL_DOWN
=
1
<
<
2
EVENTFLAG_ALT_DOWN
=
1
<
<
3
EVENTFLAG_LEFT_MOUSE_BUTTON
=
1
<
<
4
EVENTFLAG_MIDDLE_MOUSE_BUTTON
=
1
<
<
5
EVENTFLAG_RIGHT_MOUSE_BUTTON
=
1
<
<
6
EVENTFLAG_COMMAND_DOWN
=
1
<
<
7
EVENTFLAG_NUM_LOCK_ON
=
1
<
<
8
EVENTFLAG_IS_KEY_PAD
=
1
<
<
9
EVENTFLAG_IS_LEFT
=
1
<
<
10
EVENTFLAG_IS_RIGHT
=
1
<
<
11
}
#
[
repr
(
C
)
]
pub
struct
_cef_time_t
{
year
:
c_int
month
:
c_int
day_of_week
:
c_int
day_of_month
:
c_int
hour
:
c_int
minute
:
c_int
second
:
c_int
millisecond
:
c_int
}
pub
type
cef_time_t
=
_cef_time_t
;
pub
enum
cef_dom_event_phase_t
{
DOM_EVENT_PHASE_UNKNOWN
=
0
DOM_EVENT_PHASE_CAPTURING
DOM_EVENT_PHASE_AT_TARGET
DOM_EVENT_PHASE_BUBBLING
}
pub
enum
cef_dom_node_type_t
{
DOM_NODE_TYPE_UNSUPPORTED
=
0
DOM_NODE_TYPE_ELEMENT
DOM_NODE_TYPE_ATTRIBUTE
DOM_NODE_TYPE_TEXT
DOM_NODE_TYPE_CDATA_SECTION
DOM_NODE_TYPE_PROCESSING_INSTRUCTIONS
DOM_NODE_TYPE_COMMENT
DOM_NODE_TYPE_DOCUMENT
DOM_NODE_TYPE_DOCUMENT_TYPE
DOM_NODE_TYPE_DOCUMENT_FRAGMENT
}
pub
enum
cef_focus_source_t
{
FOCUS_SOURCE_NAVIGATION
=
0
FOCUS_SOURCE_SYSTEM
}
pub
enum
cef_jsdialog_type_t
{
JSDIALOGTYPE_ALERT
=
0
JSDIALOGTYPE_CONFIRM
JSDIALOGTYPE_PROMPT
}
pub
struct
_cef_size_t
{
pub
width
:
c_int
pub
height
:
c_int
}
pub
type
cef_size_t
=
_cef_size_t
;
pub
struct
_cef_page_range_t
{
pub
from
:
c_int
pub
to
:
c_int
}
pub
type
cef_page_range_t
=
_cef_page_range_t
;
pub
enum
cef_duplex_mode_t
{
DUPLEX_MODE_UNKNOWN
=
-
1
DUPLEX_MODE_SIMPLEX
=
0
DUPLEX_MODE_LONG_EDGE
=
1
DUPLEX_MODE_SHORT_EDGE
=
2
}
pub
enum
cef_color_model_t
{
COLOR_MODEL_UNKNOWN
COLOR_MODEL_GRAY
COLOR_MODEL_COLOR
COLOR_MODEL_CMYK
COLOR_MODEL_CMY
COLOR_MODEL_KCMY
COLOR_MODEL_CMY_K
COLOR_MODEL_BLACK
COLOR_MODEL_GRAYSCALE
COLOR_MODEL_RGB
COLOR_MODEL_RGB16
COLOR_MODEL_RGBA
COLOR_MODEL_COLORMODE_COLOR
COLOR_MODEL_COLORMODE_MONOCHROME
COLOR_MODEL_HP_COLOR_COLOR
COLOR_MODEL_HP_COLOR_BLACK
COLOR_MODEL_PRINTOUTMODE_NORMAL
COLOR_MODEL_PRINTOUTMODE_NORMAL_GRAY
COLOR_MODEL_PROCESSCOLORMODEL_CMYK
COLOR_MODEL_PROCESSCOLORMODEL_GREYSCALE
COLOR_MODEL_PROCESSCOLORMODEL_RGB
}
pub
enum
cef_resource_type_t
{
RT_MAIN_FRAME
=
0
RT_SUB_FRAME
RT_STYLESHEET
RT_SCRIPT
RT_IMAGE
RT_FONT_RESOURCE
RT_SUB_RESOURCE
RT_OBJECT
RT_MEDIA
RT_WORKER
RT_SHARED_WORKER
RT_PREFETCH
RT_FAVICON
RT_XHR
RT_PING
RT_SERVICE_WORKER
}
pub
enum
cef_transition_type_t
{
TT_LINK
=
0
TT_EXPLICIT
=
1
TT_AUTO_SUBFRAME
=
3
TT_MANUAL_SUBFRAME
=
4
TT_FORM_SUBMIT
=
7
TT_RELOAD
=
8
TT_SOURCE_MASK
=
0xFF
TT_BLOCKED_FLAG
=
0x00800000
TT_FORWARD_BACK_FLAG
=
0x01000000
TT_CHAIN_START_FLAG
=
0x10000000
TT_CHAIN_END_FLAG
=
0x20000000
TT_CLIENT_REDIRECT_FLAG
=
0x40000000
TT_SERVER_REDIRECT_FLAG
=
0x80000000
TT_IS_REDIRECT_MASK
=
0xC0000000
TT_QUALIFIER_MASK
=
0xFFFFFF00
}
pub
enum
cef_termination_status_t
{
TS_ABNORMAL_TERMINATION
TS_PROCESS_WAS_KILLED
TS_PROCESS_CRASHED
}
pub
enum
cef_v8_accesscontrol_t
{
V8_ACCESS_CONTROL_DEFAULT
=
0
V8_ACCESS_CONTROL_ALL_CAN_READ
=
1
V8_ACCESS_CONTROL_ALL_CAN_WRITE
=
1
<
<
1
V8_ACCESS_CONTROL_PROHIBITS_OVERWRITING
=
1
<
<
2
}
pub
enum
cef_v8_propertyattribute_t
{
V8_PROPERTY_ATTRIBUTE_NONE
=
0
V8_PROPERTY_ATTRIBUTE_READONLY
=
1
<
<
0
V8_PROPERTY_ATTRIBUTE_DONTENUM
=
1
<
<
1
V8_PROPERTY_ATTRIBUTE_DONTDELETE
=
1
<
<
2
}
pub
enum
cef_xml_node_type_t
{
XML_NODE_UNSUPPORTED
=
0
XML_NODE_PROCESSING_INSTRUCTION
XML_NODE_DOCUMENT_TYPE
XML_NODE_ELEMENT_START
XML_NODE_ELEMENT_END
XML_NODE_ATTRIBUTE
XML_NODE_TEXT
XML_NODE_CDATA
XML_NODE_ENTITY_REFERENCE
XML_NODE_WHITESPACE
XML_NODE_COMMENT
}
pub
enum
cef_geoposition_error_code_t
{
GEOPOSITON_ERROR_NONE
=
0
GEOPOSITON_ERROR_PERMISSION_DENIED
GEOPOSITON_ERROR_POSITION_UNAVAILABLE
GEOPOSITON_ERROR_TIMEOUT
}
pub
struct
_cef_geoposition_t
{
pub
latitude
:
c_double
pub
longitude
:
c_double
pub
altitude
:
c_double
pub
accuracy
:
c_double
pub
altitude_accuracy
:
c_double
pub
heading
:
c_double
pub
speed
:
c_double
pub
timestamp
:
cef_time_t
pub
error_code
:
cef_geoposition_error_code_t
pub
error_message
:
cef_string_t
}
pub
type
cef_geoposition_t
=
_cef_geoposition_t
;
pub
type
CefGeoposition
=
cef_geoposition_t
;
pub
struct
_cef_cookie_t
{
pub
name
:
cef_string_t
pub
value
:
cef_string_t
pub
domain
:
cef_string_t
pub
path
:
cef_string_t
pub
secure
:
c_int
pub
httponly
:
c_int
pub
creation
:
cef_time_t
pub
last_access
:
cef_time_t
pub
has_expires
:
c_int
pub
expires
:
cef_time_t
}
pub
type
cef_cookie_t
=
_cef_cookie_t
;
pub
type
CefCookie
=
cef_cookie_t
;
pub
struct
_cef_popup_features_t
{
pub
x
:
c_int
pub
x_set
:
c_int
pub
y
:
c_int
pub
y_set
:
c_int
pub
width
:
c_int
pub
width_set
:
c_int
pub
height
:
c_int
pub
height_set
:
c_int
pub
menu_bar_visible
:
c_int
pub
status_bar_visible
:
c_int
pub
tool_bar_visible
:
c_int
pub
location_bar_visible
:
c_int
pub
scrollbars_visible
:
c_int
pub
resizable
:
c_int
pub
fullscreen
:
c_int
pub
dialog
:
c_int
pub
additional_features
:
cef_string_list_t
}
pub
type
cef_popup_features_t
=
_cef_popup_features_t
;
pub
type
CefPopupFeatures
=
cef_popup_features_t
;
pub
enum
cef_drag_operations_mask_t
{
DRAG_OPERATION_NONE
=
0
DRAG_OPERATION_COPY
=
1
DRAG_OPERATION_LINK
=
2
DRAG_OPERATION_GENERIC
=
4
DRAG_OPERATION_PRIVATE
=
8
DRAG_OPERATION_MOVE
=
16
DRAG_OPERATION_DELETE
=
32
DRAG_OPERATION_EVERY
=
0xffffffff
}
pub
enum
cef_xml_encoding_type_t
{
XML_ENCODING_NONE
=
0
XML_ENCODING_UTF8
XML_ENCODING_UTF16LE
XML_ENCODING_UTF16BE
XML_ENCODING_ASCII
}
pub
enum
cef_window_open_disposition_t
{
WOD_UNKNOWN
=
0
WOD_SUPPRESS_OPEN
WOD_CURRENT_TAB
WOD_SINGLETON_TAB
WOD_NEW_FOREGROUND_TAB
WOD_NEW_BACKGROUND_TAB
WOD_NEW_POPUP
WOD_NEW_WINDOW
WOD_SAVE_TO_DISK
WOD_OFF_THE_RECORD
WOD_IGNORE_ACTION
}
pub
enum
cef_cursor_type_t
{
CT_POINTER
=
0
CT_CROSS
CT_HAND
CT_IBEAM
CT_WAIT
CT_HELP
CT_EASTRESIZE
CT_NORTHRESIZE
CT_NORTHEASTRESIZE
CT_NORTHWESTRESIZE
CT_SOUTHRESIZE
CT_SOUTHEASTRESIZE
CT_SOUTHWESTRESIZE
CT_WESTRESIZE
CT_NORTHSOUTHRESIZE
CT_EASTWESTRESIZE
CT_NORTHEASTSOUTHWESTRESIZE
CT_NORTHWESTSOUTHEASTRESIZE
CT_COLUMNRESIZE
CT_ROWRESIZE
CT_MIDDLEPANNING
CT_EASTPANNING
CT_NORTHPANNING
CT_NORTHEASTPANNING
CT_NORTHWESTPANNING
CT_SOUTHPANNING
CT_SOUTHEASTPANNING
CT_SOUTHWESTPANNING
CT_WESTPANNING
CT_MOVE
CT_VERTICALTEXT
CT_CELL
CT_CONTEXTMENU
CT_ALIAS
CT_PROGRESS
CT_NODROP
CT_COPY
CT_NONE
CT_NOTALLOWED
CT_ZOOMIN
CT_ZOOMOUT
CT_GRAB
CT_GRABBING
CT_CUSTOM
}
pub
struct
_cef_screen_info
{
pub
device_scale_factor
:
f32
pub
depth
:
i32
pub
depth_per_component
:
i32
pub
is_monochrome
:
i32
pub
rect
:
cef_rect_t
pub
available_rect
:
cef_rect_t
}
pub
type
cef_screen_info_t
=
_cef_screen_info
;
pub
type
CefScreenInfo
=
cef_screen_info_t
;
pub
struct
_cef_browser_settings
{
pub
size
:
u64
pub
windowless_frame_rate
:
i32
pub
standard_font_family
:
cef_string_t
pub
fixed_font_family
:
cef_string_t
pub
serif_font_family
:
cef_string_t
pub
sans_serif_font_family
:
cef_string_t
pub
cursive_font_family
:
cef_string_t
pub
fantasy_font_family
:
cef_string_t
pub
default_font_size
:
i32
pub
default_fixed_font_size
:
i32
pub
minimum_font_size
:
i32
pub
minimum_logical_font_size
:
i32
pub
default_encoding
:
cef_string_t
pub
remote_fonts
:
cef_state_t
pub
javascript
:
cef_state_t
pub
javascript_open_windows
:
cef_state_t
pub
javascript_close_windows
:
cef_state_t
pub
javascript_access_clipboard
:
cef_state_t
pub
javascript_dom_paste
:
cef_state_t
pub
caret_browsing
:
cef_state_t
pub
java
:
cef_state_t
pub
plugins
:
cef_state_t
pub
universal_access_from_file_urls
:
cef_state_t
pub
file_access_from_file_urls
:
cef_state_t
pub
web_security
:
cef_state_t
pub
image_loading
:
cef_state_t
pub
image_shrink_standalone_to_fit
:
cef_state_t
pub
text_area_resize
:
cef_state_t
pub
tab_to_links
:
cef_state_t
pub
local_storage
:
cef_state_t
pub
databases
:
cef_state_t
pub
application_cache
:
cef_state_t
pub
webgl
:
cef_state_t
pub
background_color
:
cef_color_t
pub
accept_language_list
:
cef_string_t
}
pub
type
cef_browser_settings_t
=
_cef_browser_settings
;
pub
type
CefBrowserSettings
=
cef_browser_settings_t
;
pub
struct
_cef_cursor_info
{
pub
hotspot
:
cef_point_t
pub
image_scale_factor
:
f32
pub
buffer
:
*
mut
isize
pub
size
:
cef_size_t
}
pub
type
cef_cursor_info_t
=
_cef_cursor_info
;
pub
type
CefCursorInfo
=
cef_cursor_info_t
;
pub
enum
cef_return_value_t
{
RV_CANCEL
=
0
RV_CONTINUE
RV_CONTINUE_ASYNC
}
pub
struct
_cef_request_context_settings
{
pub
size
:
size_t
pub
cache_path
:
cef_string_t
pub
persist_session_cookies
:
i32
pub
ignore_certificate_errors
:
i32
pub
accept_language_list
:
cef_string_t
}
pub
type
cef_request_context_settings_t
=
_cef_request_context_settings
;
pub
type
CefRequestContextSettings
=
cef_request_context_settings_t
;
