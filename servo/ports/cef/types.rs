use
libc
:
:
{
c_uint
c_ushort
c_int
c_double
size_t
c_void
c_longlong
}
;
use
libc
:
:
types
:
:
os
:
:
arch
:
:
c95
:
:
wchar_t
;
pub
type
cef_string_map_t
=
c_void
;
pub
type
cef_string_list_t
=
c_void
;
pub
type
cef_text_input_context_t
=
c_void
;
pub
type
cef_event_handle_t
=
c_void
;
pub
type
cef_binary_value
=
*
mut
c_void
;
pub
type
cef_dictionary_value
=
*
mut
c_void
;
pub
type
cef_client_t
=
c_void
;
pub
type
cef_request_t
=
c_void
;
pub
type
cef_response_t
=
c_void
;
pub
type
cef_urlrequest_client_t
=
c_void
;
pub
type
cef_frame
=
*
mut
c_void
;
pub
type
cef_domnode
=
*
mut
c_void
;
pub
type
cef_load_handler
=
*
mut
c_void
;
pub
type
cef_request
=
*
mut
c_void
;
pub
type
cef_navigation_type
=
*
mut
c_void
;
pub
type
cef_request_context_t
=
c_void
;
pub
type
cef_window_info_t
=
c_void
;
pub
type
cef_browser_settings_t
=
c_void
;
pub
type
cef_v8context
=
*
mut
c_void
;
pub
type
cef_v8exception
=
*
mut
c_void
;
pub
type
cef_v8stack_trace
=
*
mut
c_void
;
pub
type
cef_window_handle_t
=
c_void
;
pub
type
cef_string_t
=
cef_string_utf8
;
pub
type
cef_string_userfree_t
=
cef_string_t
;
pub
type
cef_string_utf8_t
=
cef_string_utf8
;
pub
type
cef_string_userfree_utf8_t
=
cef_string_utf8
;
pub
struct
cef_string_utf8
{
pub
str
:
*
mut
u8
pub
length
:
size_t
pub
dtor
:
extern
"
C
"
fn
(
str
:
*
mut
u8
)
}
pub
type
cef_string_utf16_t
=
cef_string_utf16
;
pub
type
cef_string_userfree_utf16_t
=
cef_string_utf16
;
pub
struct
cef_string_utf16
{
pub
str
:
*
mut
c_ushort
pub
length
:
size_t
pub
dtor
:
extern
"
C
"
fn
(
str
:
*
mut
c_ushort
)
}
pub
type
cef_string_wide_t
=
cef_string_wide
;
pub
type
cef_string_userfree_wide_t
=
cef_string_wide
;
pub
struct
cef_string_wide
{
pub
str
:
*
mut
wchar_t
pub
length
:
size_t
pub
dtor
:
extern
"
C
"
fn
(
str
:
*
mut
wchar_t
)
}
pub
type
cef_main_args_t
=
cef_main_args
;
pub
struct
cef_main_args
{
pub
argc
:
c_int
pub
argv
:
*
const
*
const
u8
}
pub
type
cef_color_t
=
c_uint
;
pub
enum
cef_thread_id_t
{
TID_UI
TID_DB
TID_FILE
TID_FILE_USER_BLOCKING
TID_PROCESS_LAUNCHER
TID_CACHE
TID_IO
TID_RENDERER
}
pub
enum
cef_navigation_type_t
{
NAVIGATION_LINK_CLICKED
=
0
NAVIGATION_FORM_SUBMITTED
NAVIGATION_BACK_FORWARD
NAVIGATION_RELOAD
NAVIGATION_FORM_RESUBMITTED
NAVIGATION_OTHER
}
pub
enum
cef_mouse_button_type_t
{
MBT_LEFT
=
0
MBT_MIDDLE
MBT_RIGHT
}
pub
type
cef_mouse_event_t
=
cef_mouse_event
;
pub
struct
cef_mouse_event
{
pub
x
:
c_int
pub
y
:
c_int
pub
modifiers
:
c_uint
}
pub
enum
cef_postdataelement_type_t
{
PDE_TYPE_EMPTY
=
0
PDE_TYPE_BYTES
PDE_TYPE_FILE
}
pub
enum
cef_urlrequest_flags_t
{
UR_FLAG_NONE
=
0
UR_FLAG_SKIP_CACHE
=
1
<
<
0
UR_FLAG_ALLOW_CACHED_CREDENTIALS
=
1
<
<
1
UR_FLAG_ALLOW_COOKIES
=
1
<
<
2
UR_FLAG_REPORT_UPLOAD_PROGRESS
=
1
<
<
3
UR_FLAG_REPORT_LOAD_TIMING
=
1
<
<
4
UR_FLAG_REPORT_RAW_HEADERS
=
1
<
<
5
UR_FLAG_NO_DOWNLOAD_DATA
=
1
<
<
6
UR_FLAG_NO_RETRY_ON_5XX
=
1
<
<
7
}
pub
enum
cef_urlrequest_status_t
{
UR_UNKNOWN
=
0
UR_SUCCESS
UR_IO_PENDING
UR_CANCELED
UR_FAILED
}
pub
enum
cef_errorcode_t
{
ERR_NONE
=
0
ERR_FAILED
=
-
2
ERR_ABORTED
=
-
3
ERR_INVALID_ARGUMENT
=
-
4
ERR_INVALID_HANDLE
=
-
5
ERR_FILE_NOT_FOUND
=
-
6
ERR_TIMED_OUT
=
-
7
ERR_FILE_TOO_BIG
=
-
8
ERR_UNEXPECTED
=
-
9
ERR_ACCESS_DENIED
=
-
10
ERR_NOT_IMPLEMENTED
=
-
11
ERR_CONNECTION_CLOSED
=
-
100
ERR_CONNECTION_RESET
=
-
101
ERR_CONNECTION_REFUSED
=
-
102
ERR_CONNECTION_ABORTED
=
-
103
ERR_CONNECTION_FAILED
=
-
104
ERR_NAME_NOT_RESOLVED
=
-
105
ERR_INTERNET_DISCONNECTED
=
-
106
ERR_SSL_PROTOCOL_ERROR
=
-
107
ERR_ADDRESS_INVALID
=
-
108
ERR_ADDRESS_UNREACHABLE
=
-
109
ERR_SSL_CLIENT_AUTH_CERT_NEEDED
=
-
110
ERR_TUNNEL_CONNECTION_FAILED
=
-
111
ERR_NO_SSL_VERSIONS_ENABLED
=
-
112
ERR_SSL_VERSION_OR_CIPHER_MISMATCH
=
-
113
ERR_SSL_RENEGOTIATION_REQUESTED
=
-
114
ERR_CERT_COMMON_NAME_INVALID
=
-
200
ERR_CERT_DATE_INVALID
=
-
201
ERR_CERT_AUTHORITY_INVALID
=
-
202
ERR_CERT_CONTAINS_ERRORS
=
-
203
ERR_CERT_NO_REVOCATION_MECHANISM
=
-
204
ERR_CERT_UNABLE_TO_CHECK_REVOCATION
=
-
205
ERR_CERT_REVOKED
=
-
206
ERR_CERT_INVALID
=
-
207
ERR_CERT_END
=
-
208
ERR_INVALID_URL
=
-
300
ERR_DISALLOWED_URL_SCHEME
=
-
301
ERR_UNKNOWN_URL_SCHEME
=
-
302
ERR_TOO_MANY_REDIRECTS
=
-
310
ERR_UNSAFE_REDIRECT
=
-
311
ERR_UNSAFE_PORT
=
-
312
ERR_INVALID_RESPONSE
=
-
320
ERR_INVALID_CHUNKED_ENCODING
=
-
321
ERR_METHOD_NOT_SUPPORTED
=
-
322
ERR_UNEXPECTED_PROXY_AUTH
=
-
323
ERR_EMPTY_RESPONSE
=
-
324
ERR_RESPONSE_HEADERS_TOO_BIG
=
-
325
ERR_CACHE_MISS
=
-
400
ERR_INSECURE_RESPONSE
=
-
501
}
pub
enum
cef_key_event_type_t
{
KEYEVENT_RAWKEYDOWN
=
0
KEYEVENT_KEYDOWN
KEYEVENT_KEYUP
KEYEVENT_CHAR
}
pub
type
cef_key_event_t
=
cef_key_event
;
pub
struct
cef_key_event
{
pub
t
:
cef_key_event_type_t
pub
modifiers
:
c_uint
pub
windows_key_code
:
c_int
pub
native_key_code
:
c_int
pub
is_system_key
:
c_int
pub
character
:
c_ushort
pub
unmodified_character
:
c_ushort
pub
focus_on_editable_field
:
c_int
}
pub
type
cef_rect_t
=
cef_rect
;
pub
struct
cef_rect
{
pub
x
:
c_int
pub
y
:
c_int
pub
width
:
c_int
pub
height
:
c_int
}
pub
enum
cef_paint_element_type_t
{
PET_VIEW
=
0
PET_POPUP
}
pub
enum
cef_file_dialog_mode_t
{
FILE_DIALOG_OPEN
=
0
FILE_DIALOG_OPEN_MULTIPLE
FILE_DIALOG_SAVE
}
pub
enum
cef_value_type_t
{
VTYPE_INVALID
=
0
VTYPE_NULL
VTYPE_BOOL
VTYPE_INT
VTYPE_DOUBLE
VTYPE_STRING
VTYPE_BINARY
VTYPE_DICTIONARY
VTYPE_LIST
}
pub
enum
cef_process_id_t
{
PID_BROWSER
PID_RENDERER
}
pub
enum
cef_log_severity_t
{
LOGSEVERITY_DEFAULT
LOGSEVERITY_VERBOSE
LOGSEVERITY_INFO
LOGSEVERITY_WARNING
LOGSEVERITY_ERROR
LOGSEVERITY_ERROR_REPORT
LOGSEVERITY_DISABLE
=
99
}
pub
type
cef_process_message_t
=
cef_process_message
;
pub
struct
cef_process_message
{
pub
base
:
cef_base
pub
is_valid
:
extern
"
C
"
fn
(
process_message
:
*
mut
cef_process_message
)
-
>
c_int
pub
is_read_only
:
extern
"
C
"
fn
(
process_message
:
*
mut
cef_process_message
)
-
>
c_int
pub
copy
:
extern
"
C
"
fn
(
process_message
:
*
mut
cef_process_message
)
-
>
*
mut
cef_process_message
pub
get_name
:
extern
"
C
"
fn
(
process_message
:
*
mut
cef_process_message
)
-
>
*
mut
cef_string_userfree_t
pub
get_argument_list
:
extern
"
C
"
fn
(
process_message
:
*
mut
cef_process_message
)
-
>
*
mut
cef_list_value
}
pub
type
cef_settings_t
=
cef_settings
;
pub
struct
cef_settings
{
pub
size
:
size_t
pub
single_process
:
c_int
pub
no_sandbox
:
c_int
pub
browser_subprocess_path
:
cef_string_t
pub
multi_threaded_message_loop
:
c_int
pub
command_line_args_disabled
:
c_int
pub
cache_path
:
cef_string_t
pub
persist_session_cookies
:
c_int
pub
user_agent
:
cef_string_t
pub
product_version
:
cef_string_t
pub
locale
:
cef_string_t
pub
log_file
:
cef_string_t
pub
log_severity
:
cef_log_severity_t
pub
release_dcheck_enabled
:
c_int
pub
javascript_flags
:
cef_string_t
pub
resources_dir_path
:
cef_string_t
pub
locales_dir_path
:
cef_string_t
pub
pack_loading_disabled
:
c_int
pub
remote_debugging_port
:
c_int
pub
uncaught_exception_stack_size
:
c_int
pub
context_safety_implementation
:
c_int
pub
ignore_certificate_errors
:
c_int
pub
background_color
:
cef_color_t
}
pub
type
cef_base_t
=
cef_base
;
pub
struct
cef_base
{
pub
size
:
size_t
pub
add_ref
:
extern
"
C
"
fn
(
base
:
*
mut
cef_base
)
-
>
c_int
pub
release
:
extern
"
C
"
fn
(
base
:
*
mut
cef_base
)
-
>
c_int
pub
get_refct
:
extern
"
C
"
fn
(
base
:
*
mut
cef_base
)
-
>
c_int
}
pub
type
cef_command_line_t
=
cef_command_line
;
pub
struct
cef_command_line
{
pub
base
:
cef_base
pub
is_valid
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
)
pub
is_read_only
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
)
pub
copy
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
)
-
>
*
mut
cef_command_line
pub
init_from_argv
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
argc
:
c_int
argv
:
*
const
u8
)
pub
init_from_string
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
command_line
:
*
const
cef_string_t
)
pub
reset
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
)
pub
get_argv
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
argv
:
*
mut
cef_string_list_t
)
pub
get_command_line_string
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
)
-
>
*
mut
cef_string_userfree_t
pub
get_program
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
)
-
>
*
mut
cef_string_userfree_t
pub
set_program
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
name
:
*
const
cef_string_t
)
pub
has_switches
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
)
-
>
c_int
pub
has_switch
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
name
:
*
const
cef_string_t
)
-
>
c_int
pub
get_switch_value
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
name
:
*
const
cef_string_t
)
-
>
*
mut
cef_string_userfree_t
pub
get_switches
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
switches
:
cef_string_map_t
)
pub
append_switch
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
name
:
*
const
cef_string_t
)
pub
append_switch_with_value
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
name
:
*
const
cef_string_t
value
:
*
const
cef_string_t
)
pub
has_arguments
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
)
-
>
c_int
pub
get_arguments
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
arguments
:
*
mut
cef_string_list_t
)
pub
append_argument
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
argument
:
*
const
cef_string_t
)
pub
prepend_wrapper
:
extern
"
C
"
fn
(
cmd
:
*
mut
cef_command_line
wrapper
:
*
const
cef_string_t
)
}
pub
type
cef_scheme_registrar_t
=
cef_scheme_registrar
;
pub
struct
cef_scheme_registrar
{
pub
base
:
cef_base
_add_custom_scheme
:
extern
"
C
"
fn
(
registrar
:
*
mut
cef_scheme_registrar
scheme_name
:
*
const
cef_string_t
is_standard
:
c_int
is_local
:
c_int
is_display_isolated
:
c_int
)
}
pub
type
cef_resource_bundle_handler_t
=
cef_resource_bundle_handler
;
pub
struct
cef_resource_bundle_handler
{
pub
base
:
cef_base
pub
get_localized_string
:
extern
"
C
"
fn
(
bundle_handler
:
*
mut
cef_resource_bundle_handler
message_id
:
c_int
string
:
*
mut
cef_string_t
)
-
>
c_int
pub
get_data_resource
:
extern
"
C
"
fn
(
bundle_handler
:
*
mut
cef_resource_bundle_handler
resource_id
:
c_int
data
:
*
mut
*
mut
c_void
data_size
:
*
mut
size_t
)
-
>
c_int
}
pub
type
cef_list_value_t
=
cef_list_value
;
pub
struct
cef_list_value
{
pub
base
:
cef_base
pub
is_valid
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
)
-
>
c_int
pub
is_owned
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
)
-
>
c_int
pub
is_read_only
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
)
-
>
c_int
pub
copy
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
)
-
>
*
mut
cef_list_value
pub
set_size
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
size
:
size_t
)
-
>
c_int
pub
get_size
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
)
-
>
size_t
pub
clear
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
)
-
>
c_int
pub
remove
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
)
-
>
c_int
pub
get_type
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
index
:
c_int
)
-
>
cef_value_type_t
pub
get_bool
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
index
:
c_int
)
-
>
c_int
pub
get_int
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
index
:
c_int
)
-
>
c_int
pub
get_double
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
index
:
c_int
)
-
>
c_double
pub
get_string
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
index
:
c_int
)
-
>
*
mut
cef_string_userfree_t
pub
get_binary
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
index
:
c_int
)
-
>
*
mut
cef_binary_value
pub
get_dictionary
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
index
:
c_int
)
-
>
*
mut
cef_dictionary_value
pub
get_list
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
index
:
c_int
)
-
>
*
mut
cef_list_value
pub
set_null
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
index
:
c_int
)
-
>
c_int
pub
set_bool
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
index
:
c_int
value
:
c_int
)
-
>
c_int
pub
set_int
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
index
:
c_int
value
:
c_int
)
-
>
c_int
pub
set_double
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
index
:
c_int
value
:
c_double
)
-
>
c_int
pub
set_string
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
index
:
c_int
value
:
*
const
cef_string_t
)
-
>
c_int
pub
set_binary
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
index
:
c_int
value
:
*
mut
cef_binary_value
)
-
>
c_int
pub
set_dictionary
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
index
:
c_int
value
:
*
mut
cef_dictionary_value
)
-
>
c_int
pub
set_list
:
extern
"
C
"
fn
(
list_value
:
*
mut
cef_list_value
index
:
c_int
value
:
*
mut
cef_list_value
)
-
>
c_int
}
pub
type
cef_browser_process_handler_t
=
cef_browser_process_handler
;
pub
struct
cef_browser_process_handler
{
pub
base
:
cef_base
pub
on_context_initialized
:
extern
"
C
"
fn
(
browser_handler
:
*
mut
cef_browser_process_handler
)
pub
on_before_child_process_launch
:
extern
"
C
"
fn
(
browser_handler
:
*
mut
cef_browser_process_handler
command_line
:
*
mut
cef_command_line
)
pub
on_render_process_thread_created
:
extern
"
C
"
fn
(
browser_handler
:
*
mut
cef_browser_process_handler
extra_info
:
*
mut
cef_list_value
)
}
pub
type
cef_run_file_dialog_callback_t
=
cef_run_file_dialog_callback
;
pub
struct
cef_run_file_dialog_callback
{
pub
base
:
cef_base
pub
cont
:
extern
"
C
"
fn
(
run_file_dialog_callback
:
*
mut
cef_run_file_dialog_callback
browser_host
:
*
mut
cef_browser_host
file_paths
:
*
mut
cef_string_list_t
)
}
pub
type
cef_browser_host_t
=
cef_browser_host
;
pub
struct
cef_browser_host
{
pub
base
:
cef_base
pub
get_browser
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
)
-
>
*
mut
cef_browser
pub
parent_window_will_close
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
)
pub
close_browser
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
force_close
:
c_int
)
pub
set_focus
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
force_close
:
c_int
)
pub
get_window_handle
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
)
-
>
*
mut
cef_window_handle_t
pub
get_opener_window_handle
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
)
-
>
*
mut
cef_window_handle_t
pub
get_client
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
)
-
>
*
mut
cef_client_t
pub
get_request_context
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
)
-
>
*
mut
cef_request_context_t
pub
get_zoom_level
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
)
-
>
c_double
pub
set_zoom_level
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
zoomLevel
:
c_double
)
pub
run_file_dialog
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
mode
:
cef_file_dialog_mode_t
title
:
*
const
cef_string_t
default_file_name
:
*
const
cef_string_t
accept_types
:
*
mut
cef_string_list_t
callback
:
*
mut
cef_run_file_dialog_callback
)
pub
start_download
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
url
:
*
const
cef_string_t
)
pub
print
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
)
pub
find
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
identifier
:
c_int
searchText
:
*
const
cef_string_t
forward
:
c_int
matchCase
:
c_int
findNext
:
c_int
)
pub
stop_finding
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
clearSelection
:
c_int
)
pub
show_dev_tools
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
windowInfo
:
*
const
cef_window_info_t
client
:
*
mut
cef_client_t
settings
:
*
const
cef_browser_settings_t
)
pub
close_dev_tools
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
)
pub
set_mouse_cursor_change_disabled
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
disabled
:
c_int
)
pub
is_mouse_cursor_change_disabled
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
)
-
>
c_int
pub
is_window_rendering_disabled
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
)
-
>
c_int
pub
was_resized
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
)
pub
was_hidden
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
hidden
:
c_int
)
pub
notify_screen_info_changed
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
)
pub
invalidate
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
dirtyRect
:
*
const
cef_rect
t
:
cef_paint_element_type_t
)
pub
send_key_event
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
event
:
*
const
cef_key_event
)
pub
send_mouse_click_event
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
event
:
*
const
cef_mouse_event
t
:
cef_mouse_button_type_t
mouseUp
:
c_int
clickCount
:
c_int
)
pub
send_mouse_move_event
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
event
:
*
const
cef_mouse_event
mouseLeave
:
c_int
)
pub
send_mouse_wheel_event
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
event
:
*
const
cef_mouse_event
deltaX
:
c_int
deltaY
:
c_int
)
pub
send_focus_event
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
setFocus
:
c_int
)
pub
send_capture_lost_event
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
)
pub
get_nstext_input_context
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
)
-
>
cef_text_input_context_t
pub
handle_key_event_before_text_input_client
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
key_event
:
*
mut
cef_event_handle_t
)
pub
handle_key_event_after_text_input_client
:
extern
"
C
"
fn
(
browser_host
:
*
mut
cef_browser_host
key_event
:
*
mut
cef_event_handle_t
)
}
pub
type
cef_browser_t
=
cef_browser
;
pub
struct
cef_browser
{
pub
base
:
cef_base
pub
get_host
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
)
-
>
*
mut
cef_browser_host
pub
can_go_back
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
)
-
>
c_int
pub
go_back
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
)
pub
can_go_forward
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
)
-
>
c_int
pub
go_forward
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
)
pub
is_loading
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
)
-
>
c_int
pub
reload
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
)
pub
reload_ignore_cache
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
)
pub
stop_load
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
)
pub
get_identifier
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
)
-
>
c_int
pub
is_same
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
that
:
*
mut
cef_browser
)
-
>
c_int
pub
is_popup
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
)
-
>
c_int
pub
has_document
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
)
-
>
c_int
pub
get_main_frame
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
)
-
>
*
mut
cef_frame
pub
get_focused_frame
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
)
-
>
*
mut
cef_frame
pub
get_frame_byident
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
identifier
:
c_longlong
)
-
>
*
mut
cef_frame
pub
get_frame
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
name
:
*
const
cef_string_t
)
-
>
*
mut
cef_frame
pub
get_frame_count
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
)
-
>
size_t
pub
get_frame_identifiers
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
identifiersCount
:
*
mut
size_t
identifiers
:
*
mut
c_longlong
)
pub
get_frame_names
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
names
:
*
mut
cef_string_list_t
)
pub
send_process_message
:
extern
"
C
"
fn
(
browser
:
*
mut
cef_browser
target_process
:
cef_process_id_t
message
:
*
mut
cef_process_message
)
-
>
c_int
}
pub
type
cef_render_process_handler_t
=
cef_render_process_handler
;
pub
struct
cef_render_process_handler
{
pub
base
:
cef_base
pub
on_render_thread_created
:
extern
"
C
"
fn
(
render_handler
:
*
mut
cef_render_process_handler
extra_info
:
*
mut
cef_list_value
)
pub
on_web_kit_initialized
:
extern
"
C
"
fn
(
render_handler
:
*
mut
cef_render_process_handler
)
pub
on_browser_created
:
extern
"
C
"
fn
(
render_handler
:
*
mut
cef_render_process_handler
browser
:
*
mut
cef_browser
)
pub
on_browser_destroyed
:
extern
"
C
"
fn
(
render_handler
:
*
mut
cef_render_process_handler
browser
:
*
mut
cef_browser
)
pub
get_load_handler
:
extern
"
C
"
fn
(
render_handler
:
*
mut
cef_render_process_handler
)
-
>
*
mut
cef_load_handler
pub
on_before_navigation
:
extern
"
C
"
fn
(
render_handler
:
*
mut
cef_render_process_handler
browser
:
*
mut
cef_browser
frame
:
*
mut
cef_frame
request
:
*
mut
cef_request
navigation_type
:
*
mut
cef_navigation_type
is_redirect
:
c_int
)
-
>
c_int
pub
on_context_created
:
extern
"
C
"
fn
(
render_handler
:
*
mut
cef_render_process_handler
browser
:
*
mut
cef_browser
frame
:
*
mut
cef_frame
context
:
*
mut
cef_v8context
)
pub
on_context_released
:
extern
"
C
"
fn
(
render_handler
:
*
mut
cef_render_process_handler
browser
:
*
mut
cef_browser
frame
:
*
mut
cef_frame
context
:
*
mut
cef_v8context
)
pub
on_uncaught_exception
:
extern
"
C
"
fn
(
render_handler
:
*
mut
cef_render_process_handler
browser
:
*
mut
cef_browser
frame
:
*
mut
cef_frame
context
:
*
mut
cef_v8context
exception
:
*
mut
cef_v8exception
stackTrace
:
*
mut
cef_v8stack_trace
)
pub
on_focused_node_changed
:
extern
"
C
"
fn
(
render_handler
:
*
mut
cef_render_process_handler
browser
:
*
mut
cef_browser
frame
:
*
mut
cef_frame
node
:
*
mut
cef_domnode
)
pub
on_process_message_received
:
extern
"
C
"
fn
(
render_handler
:
*
mut
cef_render_process_handler
browser
:
*
mut
cef_browser
source_process
:
cef_process_id_t
message
:
*
mut
cef_process_message
)
-
>
c_int
}
pub
type
cef_app_t
=
cef_app
;
pub
struct
cef_app
{
pub
base
:
cef_base
pub
on_before_command_line_processing
:
extern
"
C
"
fn
(
app
:
*
mut
cef_app_t
process_type
:
*
const
cef_string_t
command_line
:
*
mut
cef_command_line
)
pub
on_register_custom_schemes
:
extern
"
C
"
fn
(
app
:
*
mut
cef_app_t
registrar
:
*
mut
cef_scheme_registrar
)
pub
get_resource_bundle_handler
:
extern
"
C
"
fn
(
app
:
*
mut
cef_app_t
)
-
>
*
mut
cef_resource_bundle_handler
pub
get_browser_process_handler
:
extern
"
C
"
fn
(
app
:
*
mut
cef_app_t
)
-
>
*
mut
cef_browser_process_handler
pub
get_render_process_handler
:
extern
"
C
"
fn
(
app
:
*
mut
cef_app_t
)
-
>
*
mut
cef_render_process_handler
}
pub
type
cef_urlrequest_t
=
cef_urlrequest
;
pub
struct
cef_urlrequest
{
pub
base
:
cef_base
pub
get_request
:
extern
"
C
"
fn
(
url_req
:
*
mut
cef_urlrequest
)
-
>
*
mut
cef_request_t
pub
get_client
:
extern
"
C
"
fn
(
url_req
:
*
mut
cef_urlrequest
)
-
>
*
mut
cef_urlrequest_client_t
pub
get_request_status
:
extern
"
C
"
fn
(
url_req
:
*
mut
cef_urlrequest
)
-
>
cef_urlrequest_status_t
pub
get_request_error
:
extern
"
C
"
fn
(
url_req
:
*
mut
cef_urlrequest
)
-
>
cef_errorcode_t
pub
get_response
:
extern
"
C
"
fn
(
url_req
:
*
mut
cef_urlrequest
)
-
>
*
mut
cef_response_t
pub
cancel
:
extern
"
C
"
fn
(
url_req
:
*
mut
cef_urlrequest
)
}
pub
type
cef_post_data_element_t
=
cef_post_data_element
;
pub
struct
cef_post_data_element
{
pub
base
:
cef_base
pub
is_read_only
:
extern
"
C
"
fn
(
post_data_element
:
*
mut
cef_post_data_element
)
-
>
c_int
pub
set_to_empty
:
extern
"
C
"
fn
(
post_data_element
:
*
mut
cef_post_data_element
)
pub
set_to_file
:
extern
"
C
"
fn
(
post_data_element
:
*
mut
cef_post_data_element
fileName
:
*
const
cef_string_t
)
pub
set_to_bytes
:
extern
"
C
"
fn
(
post_data_element
:
*
mut
cef_post_data_element
size
:
size_t
bytes
:
*
const
c_void
)
pub
get_type
:
extern
"
C
"
fn
(
post_data_element
:
*
mut
cef_post_data_element
)
-
>
cef_postdataelement_type_t
pub
get_file
:
extern
"
C
"
fn
(
post_data_element
:
*
mut
cef_post_data_element
)
-
>
*
mut
cef_string_userfree_t
pub
get_bytes_count
:
extern
"
C
"
fn
(
post_data_element
:
*
mut
cef_post_data_element
)
-
>
size_t
pub
get_bytes
:
extern
"
C
"
fn
(
post_data_element
:
*
mut
cef_post_data_element
size
:
size_t
bytes
:
*
mut
c_void
)
-
>
size_t
}
pub
type
cef_post_data_t
=
cef_post_data
;
pub
struct
cef_post_data
{
pub
base
:
cef_base_t
pub
is_read_only
:
extern
"
C
"
fn
(
post_data
:
*
mut
cef_post_data
)
-
>
c_int
pub
get_element_count
:
extern
"
C
"
fn
(
post_data
:
*
mut
cef_post_data
)
-
>
size_t
pub
get_elements
:
extern
"
C
"
fn
(
post_data
:
*
mut
cef_post_data
elements_count
:
*
mut
size_t
elements
:
*
mut
*
mut
cef_post_data_element
)
pub
remove_element
:
extern
"
C
"
fn
(
post_data
:
*
mut
cef_post_data
element
:
*
mut
cef_post_data_element
)
-
>
c_int
pub
add_element
:
extern
"
C
"
fn
(
post_data
:
*
mut
cef_post_data
element
:
*
mut
cef_post_data_element
)
-
>
c_int
pub
remove_elements
:
extern
"
C
"
fn
(
post_data
:
*
mut
cef_post_data
)
}
