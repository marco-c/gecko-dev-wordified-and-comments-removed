#
!
[
deny
(
unused_imports
)
]
#
!
[
deny
(
unused_variables
)
]
#
!
[
feature
(
box_syntax
)
]
#
!
[
feature
(
convert
)
]
#
!
[
allow
(
non_snake_case
dead_code
)
]
extern
crate
servo
;
extern
crate
time
;
extern
crate
util
;
extern
crate
errno
;
extern
crate
compositing
;
extern
crate
script_traits
;
extern
crate
euclid
;
extern
crate
libc
;
extern
crate
msg
;
extern
crate
gleam
;
extern
crate
layers
;
extern
crate
egl
;
extern
crate
url
;
extern
crate
net_traits
;
extern
crate
env_logger
;
#
[
link
(
name
=
"
stlport
"
)
]
extern
{
}
use
util
:
:
opts
;
use
net_traits
:
:
hosts
;
use
servo
:
:
Browser
;
use
compositing
:
:
windowing
:
:
WindowEvent
;
use
std
:
:
env
;
mod
window
;
mod
input
;
struct
BrowserWrapper
{
browser
:
Browser
}
fn
main
(
)
{
env_logger
:
:
init
(
)
.
unwrap
(
)
;
opts
:
:
from_cmdline_args
(
env
:
:
args
(
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
.
as_slice
(
)
)
;
hosts
:
:
global_init
(
)
;
let
window
=
if
opts
:
:
get
(
)
.
headless
{
None
}
else
{
Some
(
window
:
:
Window
:
:
new
(
)
)
}
;
let
mut
browser
=
BrowserWrapper
{
browser
:
Browser
:
:
new
(
window
.
clone
(
)
)
}
;
match
window
{
None
=
>
(
)
Some
(
ref
window
)
=
>
input
:
:
run_input_loop
(
&
window
.
event_send
)
}
browser
.
browser
.
handle_events
(
vec
!
[
WindowEvent
:
:
InitializeCompositing
]
)
;
loop
{
let
should_continue
=
match
window
{
None
=
>
browser
.
browser
.
handle_events
(
vec
!
[
WindowEvent
:
:
Idle
]
)
Some
(
ref
window
)
=
>
{
let
events
=
window
.
wait_events
(
)
;
browser
.
browser
.
handle_events
(
events
)
}
}
;
if
!
should_continue
{
break
}
}
let
BrowserWrapper
{
browser
}
=
browser
;
browser
.
shutdown
(
)
;
}
