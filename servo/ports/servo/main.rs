#
!
[
feature
(
start
core_intrinsics
)
]
#
[
cfg
(
target_os
=
"
android
"
)
]
extern
crate
android_injected_glue
;
extern
crate
backtrace
;
extern
crate
glutin_app
as
app
;
#
[
macro_use
]
extern
crate
log
;
extern
crate
servo
;
#
[
cfg
(
not
(
target_os
=
"
android
"
)
)
]
#
[
macro_use
]
extern
crate
sig
;
use
backtrace
:
:
Backtrace
;
use
servo
:
:
Browser
;
use
servo
:
:
compositing
:
:
windowing
:
:
WindowEvent
;
#
[
cfg
(
target_os
=
"
android
"
)
]
use
servo
:
:
config
;
use
servo
:
:
config
:
:
opts
:
:
{
self
ArgumentParsingResult
parse_url_or_filename
}
;
use
servo
:
:
config
:
:
servo_version
;
use
servo
:
:
servo_config
:
:
prefs
:
:
PREFS
;
use
servo
:
:
servo_url
:
:
ServoUrl
;
use
std
:
:
env
;
use
std
:
:
panic
;
use
std
:
:
process
;
use
std
:
:
rc
:
:
Rc
;
use
std
:
:
thread
;
pub
mod
platform
{
#
[
cfg
(
target_os
=
"
macos
"
)
]
pub
use
platform
:
:
macos
:
:
deinit
;
#
[
cfg
(
target_os
=
"
macos
"
)
]
pub
mod
macos
;
#
[
cfg
(
not
(
target_os
=
"
macos
"
)
)
]
pub
fn
deinit
(
)
{
}
}
#
[
cfg
(
not
(
target_os
=
"
android
"
)
)
]
fn
install_crash_handler
(
)
{
use
backtrace
:
:
Backtrace
;
use
sig
:
:
ffi
:
:
Sig
;
use
std
:
:
intrinsics
:
:
abort
;
use
std
:
:
thread
;
fn
handler
(
_sig
:
i32
)
{
let
name
=
thread
:
:
current
(
)
.
name
(
)
.
map
(
|
n
|
format
!
(
"
for
thread
\
"
{
}
\
"
"
n
)
)
.
unwrap_or
(
"
"
.
to_owned
(
)
)
;
println
!
(
"
Stack
trace
{
}
\
n
{
:
?
}
"
name
Backtrace
:
:
new
(
)
)
;
unsafe
{
abort
(
)
;
}
}
signal
!
(
Sig
:
:
SEGV
handler
)
;
signal
!
(
Sig
:
:
ILL
handler
)
;
signal
!
(
Sig
:
:
IOT
handler
)
;
signal
!
(
Sig
:
:
BUS
handler
)
;
}
#
[
cfg
(
target_os
=
"
android
"
)
]
fn
install_crash_handler
(
)
{
}
fn
main
(
)
{
install_crash_handler
(
)
;
let
opts_result
=
opts
:
:
from_cmdline_args
(
&
*
args
(
)
)
;
let
content_process_token
=
if
let
ArgumentParsingResult
:
:
ContentProcess
(
token
)
=
opts_result
{
Some
(
token
)
}
else
{
if
opts
:
:
get
(
)
.
is_running_problem_test
&
&
:
:
std
:
:
env
:
:
var
(
"
RUST_LOG
"
)
.
is_err
(
)
{
:
:
std
:
:
env
:
:
set_var
(
"
RUST_LOG
"
"
compositing
:
:
constellation
"
)
;
}
None
}
;
panic
:
:
set_hook
(
Box
:
:
new
(
|
info
|
{
warn
!
(
"
Panic
hook
called
.
"
)
;
let
msg
=
match
info
.
payload
(
)
.
downcast_ref
:
:
<
&
'
static
str
>
(
)
{
Some
(
s
)
=
>
*
s
None
=
>
{
match
info
.
payload
(
)
.
downcast_ref
:
:
<
String
>
(
)
{
Some
(
s
)
=
>
&
*
*
s
None
=
>
"
Box
<
Any
>
"
}
}
}
;
let
current_thread
=
thread
:
:
current
(
)
;
let
name
=
current_thread
.
name
(
)
.
unwrap_or
(
"
<
unnamed
>
"
)
;
if
let
Some
(
location
)
=
info
.
location
(
)
{
println
!
(
"
{
}
(
thread
{
}
at
{
}
:
{
}
)
"
msg
name
location
.
file
(
)
location
.
line
(
)
)
;
}
else
{
println
!
(
"
{
}
(
thread
{
}
)
"
msg
name
)
;
}
if
env
:
:
var
(
"
RUST_BACKTRACE
"
)
.
is_ok
(
)
{
println
!
(
"
{
:
?
}
"
Backtrace
:
:
new
(
)
)
;
}
error
!
(
"
{
}
"
msg
)
;
}
)
)
;
setup_logging
(
)
;
if
let
Some
(
token
)
=
content_process_token
{
return
servo
:
:
run_content_process
(
token
)
;
}
if
opts
:
:
get
(
)
.
is_printing_version
{
println
!
(
"
{
}
"
servo_version
(
)
)
;
process
:
:
exit
(
0
)
;
}
let
window
=
app
:
:
create_window
(
None
)
;
let
cwd
=
env
:
:
current_dir
(
)
.
unwrap
(
)
;
let
cmdline_url
=
opts
:
:
get
(
)
.
url
.
clone
(
)
;
let
pref_url
=
PREFS
.
get
(
"
shell
.
homepage
"
)
.
as_string
(
)
.
and_then
(
|
str
|
parse_url_or_filename
(
&
cwd
str
)
.
ok
(
)
)
;
let
blank_url
=
ServoUrl
:
:
parse
(
"
about
:
blank
"
)
.
ok
(
)
;
let
target_url
=
cmdline_url
.
or
(
pref_url
)
.
or
(
blank_url
)
.
unwrap
(
)
;
let
mut
browser
=
BrowserWrapper
{
browser
:
Browser
:
:
new
(
window
.
clone
(
)
target_url
)
}
;
browser
.
browser
.
setup_logging
(
)
;
register_glutin_resize_handler
(
&
window
&
mut
browser
)
;
loop
{
let
should_continue
=
browser
.
browser
.
handle_events
(
window
.
wait_events
(
)
)
;
if
!
should_continue
{
break
;
}
}
unregister_glutin_resize_handler
(
&
window
)
;
platform
:
:
deinit
(
)
}
fn
register_glutin_resize_handler
(
window
:
&
Rc
<
app
:
:
window
:
:
Window
>
browser
:
&
mut
BrowserWrapper
)
{
unsafe
{
window
.
set_nested_event_loop_listener
(
browser
)
;
}
}
fn
unregister_glutin_resize_handler
(
window
:
&
Rc
<
app
:
:
window
:
:
Window
>
)
{
unsafe
{
window
.
remove_nested_event_loop_listener
(
)
;
}
}
struct
BrowserWrapper
{
browser
:
Browser
<
app
:
:
window
:
:
Window
>
}
impl
app
:
:
NestedEventLoopListener
for
BrowserWrapper
{
fn
handle_event_from_nested_event_loop
(
&
mut
self
event
:
WindowEvent
)
-
>
bool
{
let
is_resize
=
match
event
{
WindowEvent
:
:
Resize
(
.
.
)
=
>
true
_
=
>
false
}
;
if
!
self
.
browser
.
handle_events
(
vec
!
[
event
]
)
{
return
false
;
}
if
is_resize
{
self
.
browser
.
repaint_synchronously
(
)
}
true
}
}
#
[
cfg
(
target_os
=
"
android
"
)
]
fn
setup_logging
(
)
{
:
:
std
:
:
env
:
:
set_var
(
"
RUST_LOG
"
"
error
"
)
;
unsafe
{
android_injected_glue
:
:
ffi
:
:
app_dummy
(
)
}
;
}
#
[
cfg
(
not
(
target_os
=
"
android
"
)
)
]
fn
setup_logging
(
)
{
}
#
[
cfg
(
target_os
=
"
android
"
)
]
fn
args
(
)
-
>
Vec
<
String
>
{
use
std
:
:
error
:
:
Error
;
use
std
:
:
fs
:
:
File
;
use
std
:
:
io
:
:
{
BufRead
BufReader
}
;
let
mut
params_file
=
config
:
:
basedir
:
:
default_config_dir
(
)
.
unwrap
(
)
;
params_file
.
push
(
"
android_params
"
)
;
match
File
:
:
open
(
params_file
.
to_str
(
)
.
unwrap
(
)
)
{
Ok
(
f
)
=
>
{
let
mut
vec
=
Vec
:
:
new
(
)
;
let
file
=
BufReader
:
:
new
(
&
f
)
;
for
line
in
file
.
lines
(
)
{
let
l
=
line
.
unwrap
(
)
.
trim
(
)
.
to_owned
(
)
;
match
l
.
is_empty
(
)
|
|
l
.
as_bytes
(
)
[
0
]
=
=
b
'
#
'
{
true
=
>
(
)
false
=
>
vec
.
push
(
l
)
}
}
vec
}
Err
(
e
)
=
>
{
debug
!
(
"
Failed
to
open
params
file
'
{
}
'
:
{
}
"
params_file
.
to_str
(
)
.
unwrap
(
)
Error
:
:
description
(
&
e
)
)
;
vec
!
[
"
servo
"
.
to_owned
(
)
"
http
:
/
/
en
.
wikipedia
.
org
/
wiki
/
Rust
"
.
to_owned
(
)
]
}
}
}
#
[
cfg
(
not
(
target_os
=
"
android
"
)
)
]
fn
args
(
)
-
>
Vec
<
String
>
{
use
std
:
:
env
;
env
:
:
args
(
)
.
collect
(
)
}
#
[
cfg
(
target_os
=
"
android
"
)
]
#
[
no_mangle
]
#
[
inline
(
never
)
]
#
[
allow
(
non_snake_case
)
]
pub
extern
"
C
"
fn
android_main
(
app
:
*
mut
(
)
)
{
android_injected_glue
:
:
android_main2
(
app
as
*
mut
_
move
|
_
_
|
main
(
)
)
;
}
