use
script
:
:
dom
:
:
characterdata
:
:
CharacterData
;
use
script
:
:
dom
:
:
element
:
:
Element
;
use
script
:
:
dom
:
:
eventtarget
:
:
EventTarget
;
use
script
:
:
dom
:
:
htmldivelement
:
:
HTMLDivElement
;
use
script
:
:
dom
:
:
htmlelement
:
:
HTMLElement
;
use
script
:
:
dom
:
:
htmlspanelement
:
:
HTMLSpanElement
;
use
script
:
:
dom
:
:
node
:
:
Node
;
use
script
:
:
dom
:
:
text
:
:
Text
;
use
script
:
:
layout_wrapper
:
:
ServoThreadSafeLayoutNode
;
use
std
:
:
mem
:
:
size_of
;
macro_rules
!
sizeof_checker
(
(
testname
:
ident
t
:
ty
known_size
:
expr
)
=
>
(
#
[
test
]
fn
testname
(
)
{
let
new
=
size_of
:
:
<
t
>
(
)
;
let
old
=
known_size
;
if
new
<
old
{
panic
!
(
"
Your
changes
have
decreased
the
stack
size
of
commonly
used
DOM
struct
{
}
from
{
}
to
{
}
.
\
Good
work
!
Please
update
the
size
in
tests
/
unit
/
script
/
size_of
.
rs
.
"
stringify
!
(
t
)
old
new
)
}
else
if
new
>
old
{
panic
!
(
"
Your
changes
have
increased
the
stack
size
of
commonly
used
DOM
struct
{
}
from
{
}
to
{
}
.
\
These
structs
are
present
in
large
quantities
in
the
DOM
and
increasing
the
size
\
may
dramatically
affect
our
memory
footprint
.
Please
consider
choosing
a
design
which
\
avoids
this
increase
.
If
you
feel
that
the
increase
is
necessary
\
update
to
the
new
size
in
tests
/
unit
/
script
/
size_of
.
rs
.
"
stringify
!
(
t
)
old
new
)
}
}
)
;
)
;
sizeof_checker
!
(
size_event_target
EventTarget
40
)
;
sizeof_checker
!
(
size_node
Node
160
)
;
sizeof_checker
!
(
size_element
Element
312
)
;
sizeof_checker
!
(
size_htmlelement
HTMLElement
328
)
;
sizeof_checker
!
(
size_div
HTMLDivElement
328
)
;
sizeof_checker
!
(
size_span
HTMLSpanElement
328
)
;
sizeof_checker
!
(
size_text
Text
192
)
;
sizeof_checker
!
(
size_characterdata
CharacterData
192
)
;
sizeof_checker
!
(
size_servothreadsafelayoutnode
ServoThreadSafeLayoutNode
16
)
;
