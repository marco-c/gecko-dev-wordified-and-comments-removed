use
libc
:
:
c_void
;
use
util
:
:
mem
:
:
{
HeapSizeOf
heap_size_of
}
;
struct
Four
;
impl
HeapSizeOf
for
Four
{
fn
heap_size_of_children
(
&
self
)
-
>
usize
{
4
}
}
#
[
derive
(
HeapSizeOf
)
]
struct
Eight
(
Four
Four
bool
bool
bool
)
;
#
[
derive
(
HeapSizeOf
)
]
enum
EightOrFour
{
Eight
(
Eight
)
Four
(
Four
)
Zero
(
u8
)
}
#
[
test
]
fn
test_heap_size
(
)
{
unsafe
{
assert_eq
!
(
heap_size_of
(
:
:
alloc
:
:
heap
:
:
EMPTY
as
*
const
c_void
)
0
)
;
let
x
=
:
:
alloc
:
:
heap
:
:
allocate
(
64
0
)
;
assert_eq
!
(
heap_size_of
(
x
as
*
const
c_void
)
64
)
;
:
:
alloc
:
:
heap
:
:
deallocate
(
x
64
0
)
;
let
x
=
:
:
alloc
:
:
heap
:
:
allocate
(
255
0
)
;
assert_eq
!
(
heap_size_of
(
x
as
*
const
c_void
)
256
)
;
:
:
alloc
:
:
heap
:
:
deallocate
(
x
255
0
)
;
let
x
=
:
:
alloc
:
:
heap
:
:
allocate
(
1024
*
1024
0
)
;
assert_eq
!
(
heap_size_of
(
x
as
*
const
c_void
)
1024
*
1024
)
;
:
:
alloc
:
:
heap
:
:
deallocate
(
x
1024
*
1024
0
)
;
}
let
x
=
0i64
;
assert_eq
!
(
x
.
heap_size_of_children
(
)
0
)
;
let
x
=
Box
:
:
new
(
0i64
)
;
assert_eq
!
(
x
.
heap_size_of_children
(
)
8
)
;
assert_eq
!
(
String
:
:
from
(
"
0123456789abcdef
"
)
.
heap_size_of_children
(
)
16
)
;
let
x
:
Option
<
i32
>
=
None
;
assert_eq
!
(
x
.
heap_size_of_children
(
)
0
)
;
let
x
=
Some
(
0i64
)
;
assert_eq
!
(
x
.
heap_size_of_children
(
)
0
)
;
let
x
=
Some
(
Box
:
:
new
(
0i64
)
)
;
assert_eq
!
(
x
.
heap_size_of_children
(
)
8
)
;
let
x
=
:
:
std
:
:
sync
:
:
Arc
:
:
new
(
0i64
)
;
assert_eq
!
(
x
.
heap_size_of_children
(
)
0
)
;
let
x
=
:
:
std
:
:
sync
:
:
Arc
:
:
new
(
Box
:
:
new
(
0i64
)
)
;
assert_eq
!
(
x
.
heap_size_of_children
(
)
8
)
;
let
x
:
Vec
<
i64
>
=
vec
!
[
]
;
assert_eq
!
(
x
.
heap_size_of_children
(
)
0
)
;
let
x
=
vec
!
[
0i64
1i64
2i64
3i64
]
;
assert_eq
!
(
x
.
heap_size_of_children
(
)
32
)
;
assert_eq
!
(
Four
.
heap_size_of_children
(
)
4
)
;
let
eight
=
Eight
(
Four
Four
true
true
true
)
;
assert_eq
!
(
eight
.
heap_size_of_children
(
)
8
)
;
assert_eq
!
(
EightOrFour
:
:
Eight
(
eight
)
.
heap_size_of_children
(
)
8
)
;
assert_eq
!
(
EightOrFour
:
:
Four
(
Four
)
.
heap_size_of_children
(
)
4
)
;
assert_eq
!
(
EightOrFour
:
:
Zero
(
1
)
.
heap_size_of_children
(
)
0
)
;
}
