use
std
:
:
cell
:
:
Cell
;
use
style
:
:
cache
:
:
LRUCache
;
#
[
test
]
fn
test_lru_cache
(
)
{
let
one
=
Cell
:
:
new
(
"
one
"
)
;
let
two
=
Cell
:
:
new
(
"
two
"
)
;
let
three
=
Cell
:
:
new
(
"
three
"
)
;
let
four
=
Cell
:
:
new
(
"
four
"
)
;
let
mut
cache
:
LRUCache
<
usize
Cell
<
&
str
>
>
=
LRUCache
:
:
new
(
2
)
;
cache
.
insert
(
1
one
)
;
cache
.
insert
(
2
two
)
;
cache
.
insert
(
3
three
)
;
assert
!
(
cache
.
find
(
&
1
)
.
is_none
(
)
)
;
assert
!
(
cache
.
find
(
&
3
)
.
is_some
(
)
)
;
assert
!
(
cache
.
find
(
&
2
)
.
is_some
(
)
)
;
cache
.
insert
(
4
four
)
;
assert
!
(
cache
.
find
(
&
1
)
.
is_none
(
)
)
;
assert
!
(
cache
.
find
(
&
2
)
.
is_some
(
)
)
;
assert
!
(
cache
.
find
(
&
3
)
.
is_none
(
)
)
;
assert
!
(
cache
.
find
(
&
4
)
.
is_some
(
)
)
;
cache
.
find_or_create
(
1
|
|
{
Cell
:
:
new
(
"
one
"
)
}
)
;
assert
!
(
cache
.
find
(
&
1
)
.
is_some
(
)
)
;
assert
!
(
cache
.
find
(
&
2
)
.
is_none
(
)
)
;
assert
!
(
cache
.
find
(
&
3
)
.
is_none
(
)
)
;
assert
!
(
cache
.
find
(
&
4
)
.
is_some
(
)
)
;
}
