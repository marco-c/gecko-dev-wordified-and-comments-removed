use
cssparser
:
:
Parser
;
use
media_queries
:
:
CSSErrorReporterTest
;
use
parsing
:
:
parse
;
use
style
:
:
parser
:
:
ParserContext
;
use
style
:
:
properties
:
:
longhands
:
:
transition_timing_function
;
use
style
:
:
stylesheets
:
:
{
CssRuleType
Origin
}
;
use
style_traits
:
:
ToCss
;
#
[
test
]
fn
test_cubic_bezier
(
)
{
assert_roundtrip_with_context
!
(
transition_timing_function
:
:
parse
"
cubic
-
bezier
(
0
0
0
0
)
"
)
;
assert_roundtrip_with_context
!
(
transition_timing_function
:
:
parse
"
cubic
-
bezier
(
0
.
25
0
0
.
5
0
)
"
)
;
assert_roundtrip_with_context
!
(
transition_timing_function
:
:
parse
"
cubic
-
bezier
(
1
1
1
1
)
"
)
;
assert
!
(
parse
(
transition_timing_function
:
:
parse
"
cubic
-
bezier
(
-
1
0
0
0
"
)
.
is_err
(
)
)
;
assert
!
(
parse
(
transition_timing_function
:
:
parse
"
cubic
-
bezier
(
0
0
-
1
0
"
)
.
is_err
(
)
)
;
assert
!
(
parse
(
transition_timing_function
:
:
parse
"
cubic
-
bezier
(
-
1
0
-
1
0
"
)
.
is_err
(
)
)
;
assert
!
(
parse
(
transition_timing_function
:
:
parse
"
cubic
-
bezier
(
2
0
0
0
"
)
.
is_err
(
)
)
;
assert
!
(
parse
(
transition_timing_function
:
:
parse
"
cubic
-
bezier
(
0
0
2
0
"
)
.
is_err
(
)
)
;
assert
!
(
parse
(
transition_timing_function
:
:
parse
"
cubic
-
bezier
(
2
0
2
0
"
)
.
is_err
(
)
)
;
}
#
[
test
]
fn
test_steps
(
)
{
assert_roundtrip_with_context
!
(
transition_timing_function
:
:
parse
"
steps
(
1
)
"
)
;
assert
!
(
parse
(
transition_timing_function
:
:
parse
"
steps
(
0
)
"
)
.
is_err
(
)
)
;
assert
!
(
parse
(
transition_timing_function
:
:
parse
"
steps
(
0
.
5
)
"
)
.
is_err
(
)
)
;
assert
!
(
parse
(
transition_timing_function
:
:
parse
"
steps
(
-
1
)
"
)
.
is_err
(
)
)
;
}
