use
cssparser
:
:
Parser
;
fn
parse
<
T
F
:
Fn
(
&
mut
Parser
)
-
>
Result
<
T
(
)
>
>
(
f
:
F
s
:
&
str
)
-
>
Result
<
T
(
)
>
{
let
mut
parser
=
Parser
:
:
new
(
s
)
;
f
(
&
mut
parser
)
}
macro_rules
!
assert_roundtrip
{
(
fun
:
expr
input
:
expr
output
:
expr
)
=
>
{
let
parsed
=
crate
:
:
parsing
:
:
parse
(
fun
input
)
.
expect
(
&
format
!
(
"
Failed
to
parse
{
}
"
input
)
)
;
let
serialized
=
:
:
cssparser
:
:
ToCss
:
:
to_css_string
(
&
parsed
)
;
assert_eq
!
(
serialized
output
)
;
let
re_parsed
=
crate
:
:
parsing
:
:
parse
(
fun
&
serialized
)
.
expect
(
&
format
!
(
"
Failed
to
parse
serialization
{
}
"
input
)
)
;
let
re_serialized
=
:
:
cssparser
:
:
ToCss
:
:
to_css_string
(
&
re_parsed
)
;
assert_eq
!
(
serialized
re_serialized
)
;
}
}
mod
basic_shape
;
mod
position
;
