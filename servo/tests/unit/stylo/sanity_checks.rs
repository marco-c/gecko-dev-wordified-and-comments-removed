#
!
[
allow
(
unused_imports
)
]
use
std
:
:
mem
;
macro_rules
!
check_enum_value
{
(
a
:
expr
b
:
expr
)
=
>
{
unsafe
{
mem
:
:
transmute
:
:
<
[
u32
;
a
as
usize
]
[
u32
;
b
as
usize
]
>
(
[
0
;
a
as
usize
]
)
;
}
}
}
macro_rules
!
check_enum_value_non_static
{
(
a
:
expr
b
:
expr
)
=
>
{
assert_eq
!
(
a
.
0
as
usize
b
as
usize
)
;
}
}
#
[
test
]
fn
assert_basic_pseudo_elements
(
)
{
let
saw_before
;
let
saw_after
;
macro_rules
!
pseudo_element
{
(
"
:
before
"
atom
:
expr
false
)
=
>
{
saw_before
=
true
;
}
;
(
"
:
after
"
atom
:
expr
false
)
=
>
{
saw_after
=
true
;
}
;
(
pseudo_str_with_colon
:
expr
atom
:
expr
is_anon_box
:
expr
)
=
>
{
/
/
Do
nothing
}
;
}
include
!
(
"
.
.
/
.
.
/
.
.
/
components
/
style
/
gecko
/
generated
/
pseudo_element_helper
.
rs
"
)
;
assert
!
(
saw_before
)
;
assert
!
(
saw_after
)
;
}
