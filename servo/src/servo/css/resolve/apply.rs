use
au
=
gfx
:
:
geometry
;
use
css
:
:
styles
:
:
SpecifiedStyle
;
use
dom
:
:
node
:
:
{
Node
NodeTree
}
;
use
dom
:
:
element
:
:
*
;
use
layout
:
:
box
:
:
{
RenderBox
RenderBoxTree
}
;
use
layout
:
:
context
:
:
LayoutContext
;
use
layout
:
:
traverse_parallel
:
:
top_down_traversal
;
use
image
:
:
ImageHolder
;
use
resource
:
:
image_cache_task
:
:
ImageCacheTask
;
use
std
:
:
net
:
:
url
:
:
Url
;
use
css
:
:
values
:
:
*
;
trait
ResolveMethods
<
T
>
{
pure
fn
initial
(
)
-
>
T
;
}
impl
CSSValue
<
CSSBackgroundColor
>
:
ResolveMethods
<
CSSBackgroundColor
>
{
pure
fn
initial
(
)
-
>
CSSBackgroundColor
{
return
BgColorTransparent
;
}
}
impl
CSSValue
<
CSSDisplay
>
:
ResolveMethods
<
CSSDisplay
>
{
pure
fn
initial
(
)
-
>
CSSDisplay
{
return
DisplayInline
;
}
}
impl
CSSValue
<
BoxSizing
>
:
ResolveMethods
<
BoxSizing
>
{
pure
fn
initial
(
)
-
>
BoxSizing
{
return
BoxAuto
;
}
}
impl
CSSValue
<
CSSFontSize
>
:
ResolveMethods
<
CSSFontSize
>
{
pure
fn
initial
(
)
-
>
CSSFontSize
{
return
AbsoluteSize
(
Medium
)
;
}
}
struct
StyleApplicator
{
node
:
Node
reflow
:
fn
~
(
)
}
fn
apply_style
(
layout_ctx
:
&
LayoutContext
node
:
Node
reflow
:
fn
~
(
)
)
{
let
applicator
=
StyleApplicator
{
node
:
node
reflow
:
reflow
}
;
applicator
.
apply_css_style
(
layout_ctx
)
;
}
fn
inheritance_wrapper
(
layout_ctx
:
&
LayoutContext
node
:
Node
reflow
:
fn
~
(
)
)
{
let
applicator
=
StyleApplicator
{
node
:
node
reflow
:
reflow
}
;
applicator
.
resolve_style
(
layout_ctx
)
;
}
impl
StyleApplicator
{
fn
apply_css_style
(
layout_ctx
:
&
LayoutContext
)
{
let
reflow
=
copy
self
.
reflow
;
do
NodeTree
.
each_child
(
&
self
.
node
)
|
child
|
{
inheritance_wrapper
(
layout_ctx
*
child
reflow
)
;
true
}
}
fn
resolve_style
(
_layout_ctx
:
&
LayoutContext
)
{
}
}
#
[
cfg
(
test
)
]
mod
test
{
}
