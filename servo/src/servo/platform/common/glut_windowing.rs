use
windowing
:
:
{
ApplicationMethods
CompositeCallback
ResizeCallback
WindowMethods
}
;
use
geom
:
:
size
:
:
Size2D
;
use
glut
:
:
glut
:
:
{
DOUBLE
WindowHeight
WindowWidth
}
;
use
glut
:
:
glut
;
pub
struct
Application
;
impl
ApplicationMethods
for
Application
{
pub
fn
new
(
)
-
>
Application
{
glut
:
:
init
(
)
;
glut
:
:
init_display_mode
(
DOUBLE
)
;
Application
}
}
pub
struct
Window
{
glut_window
:
glut
:
:
Window
composite_callback
:
Option
<
CompositeCallback
>
resize_callback
:
Option
<
ResizeCallback
>
}
impl
WindowMethods
<
Application
>
for
Window
{
pub
fn
new
(
_
:
&
Application
)
-
>
mut
Window
{
/
/
Create
the
GLUT
window
.
let
glut_window
=
glut
:
:
create_window
(
~
"
Servo
"
)
;
glut
:
:
reshape_window
(
glut_window
800
600
)
;
let
window
=
mut
Window
{
glut_window
:
glut_window
composite_callback
:
None
resize_callback
:
None
}
;
do
glut
:
:
reshape_func
(
window
.
glut_window
)
|
width
height
|
{
match
window
.
resize_callback
{
None
=
>
{
}
Some
(
callback
)
=
>
callback
(
width
as
uint
height
as
uint
)
}
}
;
do
glut
:
:
display_func
{
match
window
.
composite_callback
{
None
=
>
{
}
Some
(
callback
)
=
>
callback
(
)
}
}
;
window
}
pub
fn
size
(
&
self
)
-
>
Size2D
<
f32
>
{
Size2D
(
glut
:
:
get
(
WindowWidth
)
as
f32
glut
:
:
get
(
WindowHeight
)
as
f32
)
}
pub
fn
present
(
&
mut
self
)
{
glut
:
:
swap_buffers
(
)
;
glut
:
:
post_redisplay
(
)
;
}
pub
fn
set_composite_callback
(
&
mut
self
new_composite_callback
:
CompositeCallback
)
{
self
.
composite_callback
=
Some
(
new_composite_callback
)
}
pub
fn
set_resize_callback
(
&
mut
self
new_resize_callback
:
ResizeCallback
)
{
self
.
resize_callback
=
Some
(
new_resize_callback
)
}
pub
fn
check_loop
(
mut
self
)
{
glut
:
:
check_loop
(
)
}
}
