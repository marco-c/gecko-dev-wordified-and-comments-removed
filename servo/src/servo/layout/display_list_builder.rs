use
core
:
:
cell
:
:
Cell
;
use
layout
:
:
context
:
:
LayoutContext
;
use
layout
:
:
flow
:
:
FlowContext
;
use
geom
:
:
point
:
:
Point2D
;
use
geom
:
:
rect
:
:
Rect
;
use
gfx
:
:
display_list
:
:
DisplayList
;
use
gfx
:
:
geometry
:
:
Au
;
use
gfx
;
use
newcss
;
use
servo_util
:
:
tree
:
:
TreeNodeRef
;
pub
struct
DisplayListBuilder
<
'
self
>
{
ctx
:
&
'
self
LayoutContext
}
pub
trait
FlowDisplayListBuilderMethods
{
fn
build_display_list
(
&
self
a
:
&
DisplayListBuilder
b
:
&
Rect
<
Au
>
c
:
&
Cell
<
DisplayList
>
)
;
fn
build_display_list_for_child
(
&
self
a
:
&
DisplayListBuilder
b
:
FlowContext
c
:
&
Rect
<
Au
>
d
:
&
Point2D
<
Au
>
e
:
&
Cell
<
DisplayList
>
)
;
}
impl
FlowDisplayListBuilderMethods
for
FlowContext
{
fn
build_display_list
(
&
self
builder
:
&
DisplayListBuilder
dirty
:
&
Rect
<
Au
>
list
:
&
Cell
<
DisplayList
>
)
{
let
zero
=
gfx
:
:
geometry
:
:
zero_point
(
)
;
self
.
build_display_list_recurse
(
builder
dirty
&
zero
list
)
;
}
fn
build_display_list_for_child
(
&
self
builder
:
&
DisplayListBuilder
child_flow
:
FlowContext
dirty
:
&
Rect
<
Au
>
offset
:
&
Point2D
<
Au
>
list
:
&
Cell
<
DisplayList
>
)
{
do
child_flow
.
with_imm_node
|
child_node
|
{
let
abs_flow_bounds
=
child_node
.
position
.
translate
(
offset
)
;
let
adj_offset
=
offset
.
add
(
&
child_node
.
position
.
origin
)
;
debug
!
(
"
build_display_list_for_child
:
rel
=
%
?
abs
=
%
?
"
child_node
.
position
abs_flow_bounds
)
;
debug
!
(
"
build_display_list_for_child
:
dirty
=
%
?
offset
=
%
?
"
dirty
offset
)
;
if
dirty
.
intersects
(
&
abs_flow_bounds
)
{
debug
!
(
"
build_display_list_for_child
:
intersected
.
recursing
into
child
flow
.
.
.
"
)
;
child_flow
.
build_display_list_recurse
(
builder
dirty
&
adj_offset
list
)
;
}
else
{
debug
!
(
"
build_display_list_for_child
:
Did
not
intersect
.
.
.
"
)
;
}
}
}
}
pub
trait
ToGfxColor
{
fn
to_gfx_color
(
&
self
)
-
>
gfx
:
:
color
:
:
Color
;
}
impl
ToGfxColor
for
newcss
:
:
color
:
:
Color
{
fn
to_gfx_color
(
&
self
)
-
>
gfx
:
:
color
:
:
Color
{
gfx
:
:
color
:
:
rgba
(
self
.
red
self
.
green
self
.
blue
self
.
alpha
)
}
}
