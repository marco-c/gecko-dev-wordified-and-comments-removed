use
layout
:
:
box
:
:
{
RenderBox
RenderBoxTree
}
;
use
intrinsic
:
:
TyDesc
;
export
full_traversal
;
export
top_down_traversal
;
export
bottom_up_traversal
;
export
extended_full_traversal
;
export
extended_top_down_traversal
;
type
shared_box
<
T
>
=
{
mut
refcount
:
uint
foo
:
*
int
bar
:
*
int
baz
:
*
int
payload
:
T
}
;
fn
unwrap_box
(
-
b
:
RenderBox
)
-
>
*
shared_box
<
RenderBox
>
unsafe
{
let
new_box
:
*
shared_box
<
RenderBox
>
=
cast
:
:
transmute
(
b
)
;
return
new_box
;
}
fn
rewrap_box
(
-
b
:
*
shared_box
<
RenderBox
>
)
-
>
RenderBox
unsafe
{
let
new_box
:
RenderBox
=
cast
:
:
transmute
(
b
)
;
return
new_box
;
}
fn
traverse_helper
<
T
:
Copy
Send
>
(
-
root
:
RenderBox
returned
:
T
-
top_down
:
fn
~
(
+
T
RenderBox
)
-
>
T
-
bottom_up
:
fn
~
(
RenderBox
)
)
{
let
returned
=
top_down
(
returned
root
)
;
do
listen
|
ack_chan
|
{
let
mut
count
=
0
;
for
RenderBoxTree
.
each_child
(
root
)
|
kid
|
{
count
+
=
1
;
let
unwrapped
=
unwrap_box
(
copy
kid
)
;
let
swappable
:
~
mut
Option
<
*
shared_box
<
RenderBox
>
>
=
~
mut
Some
(
unwrapped
)
;
do
task
:
:
spawn
|
copy
top_down
copy
bottom_up
|
{
let
mut
swapped_in
=
None
;
swapped_in
<
-
>
*
swappable
;
let
new_kid
=
rewrap_box
(
option
:
:
unwrap
(
swapped_in
)
)
;
traverse_helper
(
new_kid
copy
returned
copy
top_down
copy
bottom_up
)
;
ack_chan
.
send
(
(
)
)
;
}
}
for
count
.
times
(
)
{
ack_chan
.
recv
(
)
;
}
}
bottom_up
(
root
)
;
}
fn
nop
(
_box
:
RenderBox
)
{
return
;
}
fn
unit_wrapper
(
-
fun
:
fn
~
(
RenderBox
)
)
-
>
fn
~
(
+
(
)
RenderBox
)
{
fn
~
(
+
_u
:
(
)
box
:
RenderBox
)
{
fun
(
box
)
;
}
}
/
*
*
Iterate
in
parallel
over
the
boxes
in
a
tree
applying
one
function
to
a
parent
before
recursing
on
its
children
and
one
after
.
*
/
fn
full_traversal
(
+
root
:
RenderBox
-
top_down
:
fn
~
(
RenderBox
)
-
bottom_up
:
fn
~
(
RenderBox
)
)
{
traverse_helper
(
root
(
)
unit_wrapper
(
top_down
)
bottom_up
)
;
}
fn
top_down_traversal
(
+
root
:
RenderBox
-
top_down
:
fn
~
(
RenderBox
)
)
{
traverse_helper
(
root
(
)
unit_wrapper
(
top_down
)
nop
)
;
}
fn
bottom_up_traversal
(
+
root
:
RenderBox
-
bottom_up
:
fn
~
(
RenderBox
)
)
{
traverse_helper
(
root
(
)
unit_wrapper
(
nop
)
bottom_up
)
;
}
fn
extended_full_traversal
<
T
:
Copy
Send
>
(
+
root
:
RenderBox
first_val
:
T
-
top_down
:
fn
~
(
+
T
RenderBox
)
-
>
T
-
bottom_up
:
fn
~
(
RenderBox
)
)
{
traverse_helper
(
root
first_val
top_down
bottom_up
)
;
}
fn
extended_top_down_traversal
<
T
:
Copy
Send
>
(
+
root
:
RenderBox
first_val
:
T
-
top_down
:
fn
~
(
+
T
RenderBox
)
-
>
T
)
{
traverse_helper
(
root
first_val
top_down
nop
)
;
}
