use
resource_task
:
:
{
ProgressMsg
Metadata
Payload
Done
LoaderTask
start_sending
}
;
use
servo_util
:
:
io
:
:
result
;
use
std
:
:
comm
:
:
Chan
;
use
std
:
:
rt
:
:
io
:
:
file
;
use
std
:
:
rt
:
:
io
:
:
{
FileStream
Reader
EndOfFile
Open
Read
ignore_io_error
}
;
use
std
:
:
task
;
static
READ_SIZE
:
uint
=
1024
;
fn
read_all
(
reader
:
&
mut
FileStream
progress_chan
:
&
Chan
<
ProgressMsg
>
)
-
>
Result
<
(
)
(
)
>
{
loop
{
match
(
do
result
{
let
data
=
reader
.
read_bytes
(
READ_SIZE
)
;
progress_chan
.
send
(
Payload
(
data
)
)
;
}
)
{
Ok
(
(
)
)
=
>
(
)
Err
(
e
)
=
>
match
e
.
kind
{
EndOfFile
=
>
return
Ok
(
(
)
)
_
=
>
return
Err
(
(
)
)
}
}
}
}
pub
fn
factory
(
)
-
>
LoaderTask
{
let
f
:
LoaderTask
=
|
url
start_chan
|
{
assert
!
(
"
file
"
=
=
url
.
scheme
)
;
let
progress_chan
=
start_sending
(
start_chan
Metadata
:
:
default
(
url
.
clone
(
)
)
)
;
do
task
:
:
spawn
{
match
ignore_io_error
(
|
|
file
:
:
open
(
&
url
.
path
.
as_slice
(
)
Open
Read
)
)
{
Some
(
ref
mut
reader
)
=
>
{
let
res
=
read_all
(
reader
&
progress_chan
)
;
progress_chan
.
send
(
Done
(
res
)
)
;
}
None
=
>
{
progress_chan
.
send
(
Done
(
Err
(
(
)
)
)
)
;
}
}
}
}
;
f
}
