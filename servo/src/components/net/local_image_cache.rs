use
image_cache_task
:
:
{
Decode
GetImage
ImageCacheTask
ImageFailed
ImageNotReady
ImageReady
}
;
use
image_cache_task
:
:
{
ImageResponseMsg
Prefetch
WaitForImage
}
;
use
clone_arc
=
std
:
:
arc
:
:
clone
;
use
core
:
:
comm
:
:
Port
;
use
servo_util
:
:
url
:
:
{
UrlMap
url_map
}
;
use
std
:
:
net
:
:
url
:
:
Url
;
pub
fn
LocalImageCache
(
image_cache_task
:
ImageCacheTask
)
-
>
LocalImageCache
{
LocalImageCache
{
image_cache_task
:
image_cache_task
round_number
:
1
mut
on_image_available
:
None
state_map
:
url_map
(
)
}
}
pub
struct
LocalImageCache
{
priv
image_cache_task
:
ImageCacheTask
priv
round_number
:
uint
priv
on_image_available
:
Option
<
fn
(
)
-
>
~
fn
(
ImageResponseMsg
)
>
priv
state_map
:
UrlMap
<
mut
ImageState
>
}
priv
struct
ImageState
{
prefetched
:
bool
decoded
:
bool
last_request_round
:
uint
last_response
:
ImageResponseMsg
}
#
[
allow
(
non_implicitly_copyable_typarams
)
]
pub
impl
LocalImageCache
{
pub
fn
next_round
(
&
mut
self
on_image_available
:
fn
(
)
-
>
~
fn
(
ImageResponseMsg
)
)
{
self
.
round_number
+
=
1
;
self
.
on_image_available
=
Some
(
on_image_available
)
;
}
pub
fn
prefetch
(
&
self
url
:
&
Url
)
{
let
state
=
self
.
get_state
(
url
)
;
if
!
state
.
prefetched
{
self
.
image_cache_task
.
send
(
Prefetch
(
copy
*
url
)
)
;
state
.
prefetched
=
true
;
}
}
pub
fn
decode
(
&
self
url
:
&
Url
)
{
let
state
=
self
.
get_state
(
url
)
;
if
!
state
.
decoded
{
self
.
image_cache_task
.
send
(
Decode
(
copy
*
url
)
)
;
state
.
decoded
=
true
;
}
}
pub
fn
get_image
(
&
self
url
:
&
Url
)
-
>
Port
<
ImageResponseMsg
>
{
let
state
=
self
.
get_state
(
url
)
;
let
last_round
=
state
.
last_request_round
;
state
.
last_request_round
=
self
.
round_number
;
match
state
.
last_response
{
ImageReady
(
ref
image
)
=
>
{
let
(
port
chan
)
=
comm
:
:
stream
(
)
;
chan
.
send
(
ImageReady
(
clone_arc
(
image
)
)
)
;
return
port
;
}
ImageNotReady
=
>
{
if
last_round
=
=
self
.
round_number
{
let
(
port
chan
)
=
comm
:
:
stream
(
)
;
chan
.
send
(
ImageNotReady
)
;
return
port
;
}
else
{
}
}
ImageFailed
=
>
{
let
(
port
chan
)
=
comm
:
:
stream
(
)
;
chan
.
send
(
ImageFailed
)
;
return
port
;
}
}
let
(
response_port
response_chan
)
=
comm
:
:
stream
(
)
;
self
.
image_cache_task
.
send
(
GetImage
(
copy
*
url
response_chan
)
)
;
let
response
=
response_port
.
recv
(
)
;
match
response
{
ImageNotReady
=
>
{
let
image_cache_task
=
self
.
image_cache_task
.
clone
(
)
;
assert
!
(
self
.
on_image_available
.
is_some
(
)
)
;
let
on_image_available
=
self
.
on_image_available
.
get
(
)
(
)
;
let
url
=
copy
*
url
;
do
task
:
:
spawn
{
let
(
response_port
response_chan
)
=
comm
:
:
stream
(
)
;
image_cache_task
.
send
(
WaitForImage
(
copy
url
response_chan
)
)
;
on_image_available
(
response_port
.
recv
(
)
)
;
}
}
_
=
>
(
)
}
let
response_copy
=
match
response
{
ImageReady
(
ref
image
)
=
>
ImageReady
(
clone_arc
(
image
)
)
ImageNotReady
=
>
ImageNotReady
ImageFailed
=
>
ImageFailed
}
;
state
.
last_response
=
response_copy
;
let
(
port
chan
)
=
comm
:
:
stream
(
)
;
chan
.
send
(
response
)
;
return
port
;
}
priv
fn
get_state
(
&
self
url
:
&
Url
)
-
>
mut
ImageState
{
let
state
=
do
self
.
state_map
.
find_or_insert_with
(
url
.
clone
(
)
)
|
_
|
{
let
new_state
=
mut
ImageState
{
prefetched
:
false
decoded
:
false
last_request_round
:
0
last_response
:
ImageNotReady
}
;
new_state
}
;
*
state
}
}
