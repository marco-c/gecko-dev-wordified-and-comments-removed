pub
use
windowing
;
use
compositor
;
use
headless
;
pub
use
constellation
:
:
SendableFrameTree
;
use
windowing
:
:
{
ApplicationMethods
WindowMethods
}
;
use
platform
:
:
Application
;
use
azure
:
:
azure_hl
:
:
{
SourceSurfaceMethods
Color
}
;
use
geom
:
:
point
:
:
Point2D
;
use
geom
:
:
rect
:
:
Rect
;
use
geom
:
:
size
:
:
Size2D
;
use
layers
:
:
platform
:
:
surface
:
:
{
NativeCompositingGraphicsContext
NativeGraphicsMetadata
}
;
use
layers
:
:
layers
:
:
LayerBufferSet
;
use
servo_msg
:
:
compositor_msg
:
:
{
Epoch
LayerId
LayerMetadata
ReadyState
}
;
use
servo_msg
:
:
compositor_msg
:
:
{
RenderListener
RenderState
ScriptListener
ScrollPolicy
}
;
use
servo_msg
:
:
constellation_msg
:
:
{
ConstellationChan
PipelineId
}
;
use
servo_util
:
:
memory
:
:
MemoryProfilerChan
;
use
servo_util
:
:
opts
:
:
Opts
;
use
servo_util
:
:
time
:
:
TimeProfilerChan
;
use
std
:
:
comm
:
:
{
channel
Sender
Receiver
}
;
use
url
:
:
Url
;
#
[
cfg
(
target_os
=
"
linux
"
)
]
use
azure
:
:
azure_hl
;
#
[
deriving
(
Clone
)
]
pub
struct
CompositorChan
{
pub
chan
:
Sender
<
Msg
>
}
impl
ScriptListener
for
CompositorChan
{
fn
set_ready_state
(
&
self
ready_state
:
ReadyState
)
{
let
msg
=
ChangeReadyState
(
ready_state
)
;
self
.
chan
.
send
(
msg
)
;
}
fn
scroll_fragment_point
(
&
self
pipeline_id
:
PipelineId
layer_id
:
LayerId
point
:
Point2D
<
f32
>
)
{
self
.
chan
.
send
(
ScrollFragmentPoint
(
pipeline_id
layer_id
point
)
)
;
}
fn
close
(
&
self
)
{
let
(
chan
port
)
=
channel
(
)
;
self
.
chan
.
send
(
Exit
(
chan
)
)
;
port
.
recv
(
)
;
}
fn
dup
(
&
self
)
-
>
Box
<
ScriptListener
>
{
box
self
.
clone
(
)
as
Box
<
ScriptListener
>
}
}
pub
struct
LayerProperties
{
pub
pipeline_id
:
PipelineId
pub
epoch
:
Epoch
pub
id
:
LayerId
pub
rect
:
Rect
<
f32
>
pub
background_color
:
Color
pub
scroll_policy
:
ScrollPolicy
}
impl
LayerProperties
{
fn
new
(
pipeline_id
:
PipelineId
epoch
:
Epoch
metadata
:
&
LayerMetadata
)
-
>
LayerProperties
{
LayerProperties
{
pipeline_id
:
pipeline_id
epoch
:
epoch
id
:
metadata
.
id
rect
:
Rect
(
Point2D
(
metadata
.
position
.
origin
.
x
as
f32
metadata
.
position
.
origin
.
y
as
f32
)
Size2D
(
metadata
.
position
.
size
.
width
as
f32
metadata
.
position
.
size
.
height
as
f32
)
)
background_color
:
metadata
.
background_color
scroll_policy
:
metadata
.
scroll_policy
}
}
}
impl
RenderListener
for
CompositorChan
{
fn
get_graphics_metadata
(
&
self
)
-
>
Option
<
NativeGraphicsMetadata
>
{
let
(
chan
port
)
=
channel
(
)
;
self
.
chan
.
send
(
GetGraphicsMetadata
(
chan
)
)
;
port
.
recv
(
)
}
fn
paint
(
&
self
pipeline_id
:
PipelineId
epoch
:
Epoch
replies
:
Vec
<
(
LayerId
Box
<
LayerBufferSet
>
)
>
)
{
self
.
chan
.
send
(
Paint
(
pipeline_id
epoch
replies
)
)
;
}
fn
initialize_layers_for_pipeline
(
&
self
pipeline_id
:
PipelineId
metadata
:
Vec
<
LayerMetadata
>
epoch
:
Epoch
)
{
let
mut
first
=
true
;
for
metadata
in
metadata
.
iter
(
)
{
let
layer_properties
=
LayerProperties
:
:
new
(
pipeline_id
epoch
metadata
)
;
if
first
{
self
.
chan
.
send
(
CreateOrUpdateRootLayer
(
layer_properties
)
)
;
first
=
false
}
else
{
self
.
chan
.
send
(
CreateOrUpdateDescendantLayer
(
layer_properties
)
)
;
}
self
.
chan
.
send
(
SetLayerClipRect
(
pipeline_id
metadata
.
id
layer_properties
.
rect
)
)
;
}
}
fn
rerendermsg_discarded
(
&
self
)
{
self
.
chan
.
send
(
ReRenderMsgDiscarded
)
;
}
fn
set_layer_clip_rect
(
&
self
pipeline_id
:
PipelineId
layer_id
:
LayerId
new_rect
:
Rect
<
uint
>
)
{
let
new_rect
=
Rect
(
Point2D
(
new_rect
.
origin
.
x
as
f32
new_rect
.
origin
.
y
as
f32
)
Size2D
(
new_rect
.
size
.
width
as
f32
new_rect
.
size
.
height
as
f32
)
)
;
self
.
chan
.
send
(
SetLayerClipRect
(
pipeline_id
layer_id
new_rect
)
)
}
fn
set_render_state
(
&
self
render_state
:
RenderState
)
{
self
.
chan
.
send
(
ChangeRenderState
(
render_state
)
)
}
}
impl
CompositorChan
{
pub
fn
new
(
)
-
>
(
Receiver
<
Msg
>
CompositorChan
)
{
let
(
chan
port
)
=
channel
(
)
;
let
compositor_chan
=
CompositorChan
{
chan
:
chan
}
;
(
port
compositor_chan
)
}
pub
fn
send
(
&
self
msg
:
Msg
)
{
self
.
chan
.
send
(
msg
)
;
}
}
pub
enum
Msg
{
Exit
(
Sender
<
(
)
>
)
ShutdownComplete
GetGraphicsMetadata
(
Sender
<
Option
<
NativeGraphicsMetadata
>
>
)
CreateOrUpdateRootLayer
(
LayerProperties
)
CreateOrUpdateDescendantLayer
(
LayerProperties
)
SetLayerClipRect
(
PipelineId
LayerId
Rect
<
f32
>
)
ScrollFragmentPoint
(
PipelineId
LayerId
Point2D
<
f32
>
)
Paint
(
PipelineId
Epoch
Vec
<
(
LayerId
Box
<
LayerBufferSet
>
)
>
)
ChangeReadyState
(
ReadyState
)
ChangeRenderState
(
RenderState
)
ReRenderMsgDiscarded
SetIds
(
SendableFrameTree
Sender
<
(
)
>
ConstellationChan
)
LoadComplete
(
PipelineId
Url
)
}
pub
enum
CompositorMode
{
Windowed
(
Application
)
Headless
}
pub
struct
CompositorTask
{
pub
mode
:
CompositorMode
}
impl
CompositorTask
{
fn
new
(
is_headless
:
bool
)
-
>
CompositorTask
{
let
mode
:
CompositorMode
=
if
is_headless
{
Headless
}
else
{
Windowed
(
ApplicationMethods
:
:
new
(
)
)
}
;
CompositorTask
{
mode
:
mode
}
}
#
[
cfg
(
target_os
=
"
linux
"
)
]
pub
fn
create_graphics_context
(
)
-
>
NativeCompositingGraphicsContext
{
NativeCompositingGraphicsContext
:
:
from_display
(
azure_hl
:
:
current_display
(
)
)
}
#
[
cfg
(
not
(
target_os
=
"
linux
"
)
)
]
pub
fn
create_graphics_context
(
)
-
>
NativeCompositingGraphicsContext
{
NativeCompositingGraphicsContext
:
:
new
(
)
}
pub
fn
create
(
opts
:
Opts
port
:
Receiver
<
Msg
>
constellation_chan
:
ConstellationChan
time_profiler_chan
:
TimeProfilerChan
memory_profiler_chan
:
MemoryProfilerChan
)
{
let
compositor
=
CompositorTask
:
:
new
(
opts
.
headless
)
;
match
compositor
.
mode
{
Windowed
(
ref
app
)
=
>
{
compositor
:
:
IOCompositor
:
:
create
(
app
opts
port
constellation_chan
.
clone
(
)
time_profiler_chan
memory_profiler_chan
)
}
Headless
=
>
{
headless
:
:
NullCompositor
:
:
create
(
port
constellation_chan
.
clone
(
)
time_profiler_chan
memory_profiler_chan
)
}
}
;
}
}
