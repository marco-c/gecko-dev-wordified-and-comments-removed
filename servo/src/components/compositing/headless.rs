use
compositor_task
:
:
{
Msg
Exit
ChangeReadyState
SetIds
}
;
use
compositor_task
:
:
{
GetGraphicsMetadata
CreateOrUpdateRootLayer
CreateOrUpdateDescendantLayer
}
;
use
compositor_task
:
:
{
SetLayerClipRect
Paint
ScrollFragmentPoint
LoadComplete
}
;
use
compositor_task
:
:
{
ShutdownComplete
ChangeRenderState
ReRenderMsgDiscarded
}
;
use
geom
:
:
scale_factor
:
:
ScaleFactor
;
use
geom
:
:
size
:
:
TypedSize2D
;
use
servo_msg
:
:
constellation_msg
:
:
{
ConstellationChan
ExitMsg
ResizedWindowMsg
WindowSizeData
}
;
use
servo_util
:
:
memory
:
:
MemoryProfilerChan
;
use
servo_util
:
:
memory
;
use
servo_util
:
:
time
:
:
TimeProfilerChan
;
use
servo_util
:
:
time
;
pub
struct
NullCompositor
{
pub
port
:
Receiver
<
Msg
>
}
impl
NullCompositor
{
fn
new
(
port
:
Receiver
<
Msg
>
)
-
>
NullCompositor
{
NullCompositor
{
port
:
port
}
}
pub
fn
create
(
port
:
Receiver
<
Msg
>
constellation_chan
:
ConstellationChan
time_profiler_chan
:
TimeProfilerChan
memory_profiler_chan
:
MemoryProfilerChan
)
{
let
compositor
=
NullCompositor
:
:
new
(
port
)
;
{
let
ConstellationChan
(
ref
chan
)
=
constellation_chan
;
chan
.
send
(
ResizedWindowMsg
(
WindowSizeData
{
initial_viewport
:
TypedSize2D
(
640_f32
480_f32
)
visible_viewport
:
TypedSize2D
(
640_f32
480_f32
)
device_pixel_ratio
:
ScaleFactor
(
1
.
0
)
}
)
)
;
}
compositor
.
handle_message
(
constellation_chan
)
;
loop
{
match
compositor
.
port
.
try_recv
(
)
{
Err
(
_
)
=
>
break
Ok
(
_
)
=
>
{
}
}
}
time_profiler_chan
.
send
(
time
:
:
ExitMsg
)
;
memory_profiler_chan
.
send
(
memory
:
:
ExitMsg
)
;
}
fn
handle_message
(
&
self
constellation_chan
:
ConstellationChan
)
{
loop
{
match
self
.
port
.
recv
(
)
{
Exit
(
chan
)
=
>
{
debug
!
(
"
shutting
down
the
constellation
"
)
;
let
ConstellationChan
(
ref
con_chan
)
=
constellation_chan
;
con_chan
.
send
(
ExitMsg
)
;
chan
.
send
(
(
)
)
;
}
ShutdownComplete
=
>
{
debug
!
(
"
constellation
completed
shutdown
"
)
;
break
}
GetGraphicsMetadata
(
chan
)
=
>
{
chan
.
send
(
None
)
;
}
SetIds
(
_
response_chan
_
)
=
>
{
response_chan
.
send
(
(
)
)
;
}
CreateOrUpdateRootLayer
(
.
.
)
|
CreateOrUpdateDescendantLayer
(
.
.
)
|
SetLayerClipRect
(
.
.
)
|
Paint
(
.
.
)
|
ChangeReadyState
(
.
.
)
|
ChangeRenderState
(
.
.
)
|
ScrollFragmentPoint
(
.
.
)
|
LoadComplete
(
.
.
)
|
ReRenderMsgDiscarded
(
.
.
)
=
>
(
)
}
}
}
}
