use
dom
:
:
bindings
:
:
codegen
:
:
ProcessingInstructionBinding
;
use
dom
:
:
characterdata
:
:
CharacterData
;
use
dom
:
:
document
:
:
AbstractDocument
;
use
dom
:
:
node
:
:
{
AbstractNode
Node
ProcessingInstructionNodeTypeId
}
;
use
servo_util
:
:
str
:
:
DOMString
;
pub
struct
ProcessingInstruction
{
element
:
CharacterData
target
:
DOMString
}
impl
ProcessingInstruction
{
pub
fn
new_inherited
(
target
:
DOMString
data
:
DOMString
document
:
AbstractDocument
)
-
>
ProcessingInstruction
{
ProcessingInstruction
{
element
:
CharacterData
:
:
new_inherited
(
ProcessingInstructionNodeTypeId
data
document
)
target
:
target
}
}
pub
fn
new
(
target
:
DOMString
data
:
DOMString
document
:
AbstractDocument
)
-
>
AbstractNode
{
let
node
=
ProcessingInstruction
:
:
new_inherited
(
target
data
document
)
;
Node
:
:
reflect_node
(
mut
node
document
ProcessingInstructionBinding
:
:
Wrap
)
}
}
impl
ProcessingInstruction
{
pub
fn
Target
(
&
self
)
-
>
DOMString
{
self
.
target
.
clone
(
)
}
}
