use
dom
:
:
bindings
:
:
codegen
:
:
Bindings
:
:
HTMLModElementBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
HTMLModElementDerived
;
use
dom
:
:
bindings
:
:
js
:
:
{
JSRef
Temporary
}
;
use
dom
:
:
document
:
:
Document
;
use
dom
:
:
element
:
:
HTMLModElementTypeId
;
use
dom
:
:
eventtarget
:
:
{
EventTarget
NodeTargetTypeId
}
;
use
dom
:
:
htmlelement
:
:
HTMLElement
;
use
dom
:
:
node
:
:
{
Node
ElementNodeTypeId
}
;
use
servo_util
:
:
str
:
:
DOMString
;
#
[
deriving
(
Encodable
)
]
pub
struct
HTMLModElement
{
pub
htmlelement
:
HTMLElement
}
impl
HTMLModElementDerived
for
EventTarget
{
fn
is_htmlmodelement
(
&
self
)
-
>
bool
{
self
.
type_id
=
=
NodeTargetTypeId
(
ElementNodeTypeId
(
HTMLModElementTypeId
)
)
}
}
impl
HTMLModElement
{
pub
fn
new_inherited
(
localName
:
DOMString
document
:
&
JSRef
<
Document
>
)
-
>
HTMLModElement
{
HTMLModElement
{
htmlelement
:
HTMLElement
:
:
new_inherited
(
HTMLModElementTypeId
localName
document
)
}
}
pub
fn
new
(
localName
:
DOMString
document
:
&
JSRef
<
Document
>
)
-
>
Temporary
<
HTMLModElement
>
{
let
element
=
HTMLModElement
:
:
new_inherited
(
localName
document
)
;
Node
:
:
reflect_node
(
box
element
document
HTMLModElementBinding
:
:
Wrap
)
}
}
pub
trait
HTMLModElementMethods
{
}
