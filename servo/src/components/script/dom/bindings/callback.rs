use
dom
:
:
bindings
:
:
trace
:
:
trace_object
;
use
dom
:
:
bindings
:
:
utils
:
:
Reflectable
;
use
js
:
:
jsapi
:
:
{
JSContext
JSObject
JS_WrapObject
JS_ObjectIsCallable
}
;
use
js
:
:
jsapi
:
:
{
JS_GetProperty
JSTracer
}
;
use
js
:
:
jsval
:
:
{
JSVal
UndefinedValue
}
;
use
std
:
:
cast
;
use
std
:
:
ptr
;
use
serialize
:
:
{
Encodable
Encoder
}
;
pub
enum
ExceptionHandling
{
ReportExceptions
RethrowContentExceptions
RethrowExceptions
}
#
[
deriving
(
Clone
Eq
)
]
pub
struct
CallbackInterface
{
pub
callback
:
*
mut
JSObject
}
impl
<
S
:
Encoder
<
E
>
E
>
Encodable
<
S
E
>
for
CallbackInterface
{
fn
encode
(
&
self
s
:
&
mut
S
)
-
>
Result
<
(
)
E
>
{
unsafe
{
let
tracer
:
*
mut
JSTracer
=
cast
:
:
transmute
(
s
)
;
trace_object
(
tracer
"
callback
"
self
.
callback
)
;
}
Ok
(
(
)
)
}
}
pub
trait
CallbackContainer
{
fn
callback
(
&
self
)
-
>
*
mut
JSObject
;
}
impl
CallbackContainer
for
CallbackInterface
{
fn
callback
(
&
self
)
-
>
*
mut
JSObject
{
self
.
callback
}
}
impl
CallbackInterface
{
pub
fn
new
(
callback
:
*
mut
JSObject
)
-
>
CallbackInterface
{
CallbackInterface
{
callback
:
callback
}
}
pub
fn
GetCallableProperty
(
&
self
cx
:
*
mut
JSContext
name
:
&
str
)
-
>
Result
<
JSVal
(
)
>
{
let
mut
callable
=
UndefinedValue
(
)
;
unsafe
{
if
name
.
to_c_str
(
)
.
with_ref
(
|
name
|
JS_GetProperty
(
cx
self
.
callback
name
&
mut
callable
)
)
=
=
0
{
return
Err
(
(
)
)
;
}
if
!
callable
.
is_object
(
)
|
|
JS_ObjectIsCallable
(
cx
callable
.
to_object
(
)
)
=
=
0
{
return
Err
(
(
)
)
;
}
}
Ok
(
callable
)
}
}
pub
fn
GetJSObjectFromCallback
<
T
:
CallbackContainer
>
(
callback
:
&
T
)
-
>
*
mut
JSObject
{
callback
.
callback
(
)
}
pub
fn
WrapCallThisObject
<
T
:
'
static
+
CallbackContainer
+
Reflectable
>
(
cx
:
*
mut
JSContext
_scope
:
*
mut
JSObject
p
:
Box
<
T
>
)
-
>
*
mut
JSObject
{
let
mut
obj
=
GetJSObjectFromCallback
(
p
)
;
assert
!
(
obj
.
is_not_null
(
)
)
;
unsafe
{
if
JS_WrapObject
(
cx
&
mut
obj
)
=
=
0
{
return
ptr
:
:
mut_null
(
)
;
}
}
return
obj
;
}
pub
struct
CallSetup
{
pub
cx
:
*
mut
JSContext
pub
handling
:
ExceptionHandling
}
impl
CallSetup
{
pub
fn
new
(
cx
:
*
mut
JSContext
handling
:
ExceptionHandling
)
-
>
CallSetup
{
CallSetup
{
cx
:
cx
handling
:
handling
}
}
pub
fn
GetContext
(
&
self
)
-
>
*
mut
JSContext
{
self
.
cx
}
}
