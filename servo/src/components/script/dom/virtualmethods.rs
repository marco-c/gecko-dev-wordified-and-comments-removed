use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
ElementCast
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
HTMLElementCast
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
HTMLIFrameElementCast
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
HTMLImageElementCast
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
HTMLObjectElementCast
;
use
dom
:
:
bindings
:
:
js
:
:
JS
;
use
dom
:
:
element
:
:
Element
;
use
dom
:
:
element
:
:
{
ElementTypeId
HTMLImageElementTypeId
}
;
use
dom
:
:
element
:
:
{
HTMLIFrameElementTypeId
HTMLObjectElementTypeId
}
;
use
dom
:
:
htmlelement
:
:
HTMLElement
;
use
dom
:
:
htmliframeelement
:
:
HTMLIFrameElement
;
use
dom
:
:
htmlimageelement
:
:
HTMLImageElement
;
use
dom
:
:
htmlobjectelement
:
:
HTMLObjectElement
;
use
dom
:
:
node
:
:
{
Node
ElementNodeTypeId
}
;
use
servo_util
:
:
str
:
:
DOMString
;
pub
trait
VirtualMethods
{
fn
super_type
(
&
self
)
-
>
Option
<
~
VirtualMethods
:
>
;
fn
after_set_attr
(
&
mut
self
name
:
DOMString
value
:
DOMString
)
{
match
self
.
super_type
(
)
{
Some
(
ref
mut
s
)
=
>
s
.
after_set_attr
(
name
value
)
_
=
>
(
)
}
}
fn
before_remove_attr
(
&
mut
self
name
:
DOMString
value
:
DOMString
)
{
match
self
.
super_type
(
)
{
Some
(
ref
mut
s
)
=
>
s
.
before_remove_attr
(
name
value
)
_
=
>
(
)
}
}
fn
bind_to_tree
(
&
mut
self
)
{
match
self
.
super_type
(
)
{
Some
(
ref
mut
s
)
=
>
s
.
bind_to_tree
(
)
_
=
>
(
)
}
}
fn
unbind_from_tree
(
&
mut
self
)
{
match
self
.
super_type
(
)
{
Some
(
ref
mut
s
)
=
>
s
.
unbind_from_tree
(
)
_
=
>
(
)
}
}
}
pub
fn
vtable_for
<
'
a
>
(
node
:
&
JS
<
Node
>
)
-
>
~
VirtualMethods
:
{
match
node
.
get
(
)
.
type_id
{
ElementNodeTypeId
(
HTMLImageElementTypeId
)
=
>
{
let
element
:
JS
<
HTMLImageElement
>
=
HTMLImageElementCast
:
:
to
(
node
)
.
unwrap
(
)
;
~
element
as
~
VirtualMethods
:
}
ElementNodeTypeId
(
HTMLIFrameElementTypeId
)
=
>
{
let
element
:
JS
<
HTMLIFrameElement
>
=
HTMLIFrameElementCast
:
:
to
(
node
)
.
unwrap
(
)
;
~
element
as
~
VirtualMethods
:
}
ElementNodeTypeId
(
HTMLObjectElementTypeId
)
=
>
{
let
element
:
JS
<
HTMLObjectElement
>
=
HTMLObjectElementCast
:
:
to
(
node
)
.
unwrap
(
)
;
~
element
as
~
VirtualMethods
:
}
ElementNodeTypeId
(
ElementTypeId
)
=
>
{
let
element
:
JS
<
Element
>
=
ElementCast
:
:
to
(
node
)
.
unwrap
(
)
;
~
element
as
~
VirtualMethods
:
}
ElementNodeTypeId
(
_
)
=
>
{
let
element
:
JS
<
HTMLElement
>
=
HTMLElementCast
:
:
to
(
node
)
.
unwrap
(
)
;
~
element
as
~
VirtualMethods
:
}
_
=
>
{
~
node
.
clone
(
)
as
~
VirtualMethods
:
}
}
}
