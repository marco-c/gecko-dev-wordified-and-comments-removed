use
dom
:
:
bindings
:
:
utils
:
:
{
DOMString
Fallible
null_str_as_empty
}
;
use
dom
:
:
characterdata
:
:
CharacterData
;
use
dom
:
:
node
:
:
{
AbstractNode
ScriptView
Node
TextNodeTypeId
}
;
use
dom
:
:
window
:
:
Window
;
pub
struct
Text
{
element
:
CharacterData
}
impl
Text
{
pub
fn
new
(
text
:
~
str
)
-
>
Text
{
Text
{
element
:
CharacterData
:
:
new
(
TextNodeTypeId
text
)
}
}
pub
fn
Constructor
(
owner
:
mut
Window
text
:
&
DOMString
)
-
>
Fallible
<
AbstractNode
<
ScriptView
>
>
{
let
cx
=
owner
.
page
.
js_info
.
get_ref
(
)
.
js_compartment
.
cx
.
ptr
;
unsafe
{
Ok
(
Node
:
:
as_abstract_node
(
cx
Text
:
:
new
(
null_str_as_empty
(
text
)
)
)
)
}
}
pub
fn
SplitText
(
&
self
_offset
:
u32
)
-
>
Fallible
<
AbstractNode
<
ScriptView
>
>
{
fail
!
(
"
unimplemented
"
)
}
pub
fn
GetWholeText
(
&
self
)
-
>
Fallible
<
DOMString
>
{
Ok
(
None
)
}
}
