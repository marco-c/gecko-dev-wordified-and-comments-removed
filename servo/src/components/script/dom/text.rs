use
dom
:
:
bindings
:
:
codegen
:
:
TextBinding
;
use
dom
:
:
bindings
:
:
utils
:
:
Fallible
;
use
dom
:
:
characterdata
:
:
CharacterData
;
use
dom
:
:
document
:
:
AbstractDocument
;
use
dom
:
:
node
:
:
{
AbstractNode
Node
TextNodeTypeId
}
;
use
dom
:
:
window
:
:
Window
;
use
servo_util
:
:
str
:
:
DOMString
;
pub
struct
Text
{
element
:
CharacterData
}
impl
Text
{
pub
fn
new_inherited
(
text
:
DOMString
document
:
AbstractDocument
)
-
>
Text
{
Text
{
element
:
CharacterData
:
:
new_inherited
(
TextNodeTypeId
text
document
)
}
}
pub
fn
new
(
text
:
DOMString
document
:
AbstractDocument
)
-
>
AbstractNode
{
let
node
=
Text
:
:
new_inherited
(
text
document
)
;
Node
:
:
reflect_node
(
mut
node
document
TextBinding
:
:
Wrap
)
}
pub
fn
Constructor
(
owner
:
mut
Window
text
:
DOMString
)
-
>
Fallible
<
AbstractNode
>
{
Ok
(
Text
:
:
new
(
text
.
clone
(
)
owner
.
Document
(
)
)
)
}
pub
fn
SplitText
(
&
self
_offset
:
u32
)
-
>
Fallible
<
AbstractNode
>
{
fail
!
(
"
unimplemented
"
)
}
pub
fn
GetWholeText
(
&
self
)
-
>
Fallible
<
DOMString
>
{
Ok
(
~
"
"
)
}
}
