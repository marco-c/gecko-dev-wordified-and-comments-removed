use
dom
:
:
bindings
:
:
codegen
:
:
DOMImplementationBinding
;
use
dom
:
:
bindings
:
:
utils
:
:
{
DOMString
Reflector
Reflectable
reflect_dom_object
}
;
use
dom
:
:
bindings
:
:
utils
:
:
{
Fallible
InvalidCharacter
NamespaceError
}
;
use
dom
:
:
bindings
:
:
utils
:
:
{
QName
Name
InvalidXMLName
xml_name_type
}
;
use
dom
:
:
documenttype
:
:
DocumentType
;
use
dom
:
:
node
:
:
AbstractNode
;
use
dom
:
:
window
:
:
Window
;
pub
struct
DOMImplementation
{
owner
:
mut
Window
reflector_
:
Reflector
}
impl
DOMImplementation
{
pub
fn
new_inherited
(
owner
:
mut
Window
)
-
>
DOMImplementation
{
DOMImplementation
{
owner
:
owner
reflector_
:
Reflector
:
:
new
(
)
}
}
pub
fn
new
(
owner
:
mut
Window
)
-
>
mut
DOMImplementation
{
reflect_dom_object
(
mut
DOMImplementation
:
:
new_inherited
(
owner
)
owner
DOMImplementationBinding
:
:
Wrap
)
}
}
impl
Reflectable
for
DOMImplementation
{
fn
reflector
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
Reflector
{
&
self
.
reflector_
}
fn
mut_reflector
<
'
a
>
(
&
'
a
mut
self
)
-
>
&
'
a
mut
Reflector
{
&
mut
self
.
reflector_
}
}
impl
DOMImplementation
{
pub
fn
CreateDocumentType
(
&
self
qname
:
DOMString
pubid
:
DOMString
sysid
:
DOMString
)
-
>
Fallible
<
AbstractNode
>
{
match
xml_name_type
(
qname
)
{
InvalidXMLName
=
>
Err
(
InvalidCharacter
)
Name
=
>
Err
(
NamespaceError
)
QName
=
>
Ok
(
DocumentType
:
:
new
(
qname
Some
(
pubid
)
Some
(
sysid
)
self
.
owner
.
Document
(
)
)
)
}
}
}
