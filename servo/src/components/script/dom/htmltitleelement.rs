use
dom
:
:
bindings
:
:
codegen
:
:
HTMLTitleElementBinding
;
use
dom
:
:
bindings
:
:
codegen
:
:
InheritTypes
:
:
HTMLTitleElementDerived
;
use
dom
:
:
bindings
:
:
js
:
:
JS
;
use
dom
:
:
bindings
:
:
utils
:
:
ErrorResult
;
use
dom
:
:
document
:
:
Document
;
use
dom
:
:
element
:
:
HTMLTitleElementTypeId
;
use
dom
:
:
eventtarget
:
:
{
EventTarget
NodeTargetTypeId
}
;
use
dom
:
:
htmlelement
:
:
HTMLElement
;
use
dom
:
:
node
:
:
{
Node
ElementNodeTypeId
}
;
use
servo_util
:
:
str
:
:
DOMString
;
#
[
deriving
(
Encodable
)
]
pub
struct
HTMLTitleElement
{
htmlelement
:
HTMLElement
}
impl
HTMLTitleElementDerived
for
EventTarget
{
fn
is_htmltitleelement
(
&
self
)
-
>
bool
{
match
self
.
type_id
{
NodeTargetTypeId
(
ElementNodeTypeId
(
HTMLTitleElementTypeId
)
)
=
>
true
_
=
>
false
}
}
}
impl
HTMLTitleElement
{
pub
fn
new_inherited
(
localName
:
DOMString
document
:
JS
<
Document
>
)
-
>
HTMLTitleElement
{
HTMLTitleElement
{
htmlelement
:
HTMLElement
:
:
new_inherited
(
HTMLTitleElementTypeId
localName
document
)
}
}
pub
fn
new
(
localName
:
DOMString
document
:
&
JS
<
Document
>
)
-
>
JS
<
HTMLTitleElement
>
{
let
element
=
HTMLTitleElement
:
:
new_inherited
(
localName
document
.
clone
(
)
)
;
Node
:
:
reflect_node
(
~
element
document
HTMLTitleElementBinding
:
:
Wrap
)
}
}
impl
HTMLTitleElement
{
pub
fn
Text
(
&
self
)
-
>
DOMString
{
~
"
"
}
pub
fn
SetText
(
&
mut
self
_text
:
DOMString
)
-
>
ErrorResult
{
Ok
(
(
)
)
}
}
