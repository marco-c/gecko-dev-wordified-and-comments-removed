use
dom
:
:
node
:
:
{
AbstractNode
ScriptView
LayoutView
}
;
use
script_task
:
:
{
ScriptChan
}
;
use
std
:
:
comm
:
:
{
Chan
SharedChan
}
;
use
geom
:
:
rect
:
:
Rect
;
use
geom
:
:
size
:
:
Size2D
;
use
geom
:
:
point
:
:
Point2D
;
use
servo_util
:
:
geometry
:
:
Au
;
use
newcss
:
:
stylesheet
:
:
Stylesheet
;
use
extra
:
:
url
:
:
Url
;
pub
enum
Msg
{
AddStylesheetMsg
(
Stylesheet
)
ReflowMsg
(
~
Reflow
)
QueryMsg
(
LayoutQuery
)
ExitMsg
}
pub
enum
LayoutQuery
{
ContentBoxQuery
(
AbstractNode
<
ScriptView
>
Chan
<
ContentBoxResponse
>
)
ContentBoxesQuery
(
AbstractNode
<
ScriptView
>
Chan
<
ContentBoxesResponse
>
)
HitTestQuery
(
AbstractNode
<
ScriptView
>
Point2D
<
f32
>
Chan
<
Result
<
HitTestResponse
(
)
>
>
)
}
pub
struct
ContentBoxResponse
(
Rect
<
Au
>
)
;
pub
struct
ContentBoxesResponse
(
~
[
Rect
<
Au
>
]
)
;
pub
struct
HitTestResponse
(
AbstractNode
<
LayoutView
>
)
;
pub
enum
DocumentDamageLevel
{
MatchSelectorsDocumentDamage
ReflowDocumentDamage
}
impl
DocumentDamageLevel
{
pub
fn
add
(
&
mut
self
new_damage
:
DocumentDamageLevel
)
{
match
(
*
self
new_damage
)
{
(
ReflowDocumentDamage
new_damage
)
=
>
*
self
=
new_damage
(
MatchSelectorsDocumentDamage
_
)
=
>
*
self
=
MatchSelectorsDocumentDamage
}
}
}
pub
struct
DocumentDamage
{
root
:
AbstractNode
<
ScriptView
>
level
:
DocumentDamageLevel
}
#
[
deriving
(
Eq
)
]
pub
enum
ReflowGoal
{
ReflowForDisplay
ReflowForScriptQuery
}
pub
struct
Reflow
{
document_root
:
AbstractNode
<
ScriptView
>
damage
:
DocumentDamage
goal
:
ReflowGoal
url
:
Url
script_chan
:
ScriptChan
window_size
:
Size2D
<
uint
>
script_join_chan
:
Chan
<
(
)
>
id
:
uint
}
#
[
deriving
(
Clone
)
]
pub
struct
LayoutChan
(
SharedChan
<
Msg
>
)
;
impl
LayoutChan
{
pub
fn
new
(
chan
:
Chan
<
Msg
>
)
-
>
LayoutChan
{
LayoutChan
(
SharedChan
:
:
new
(
chan
)
)
}
}
