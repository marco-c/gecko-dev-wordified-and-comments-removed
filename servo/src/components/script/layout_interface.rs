use
dom
:
:
node
:
:
{
AbstractNode
ScriptView
}
;
use
script_task
:
:
ScriptMsg
;
use
core
:
:
comm
:
:
{
Chan
SharedChan
}
;
use
geom
:
:
rect
:
:
Rect
;
use
geom
:
:
size
:
:
Size2D
;
use
gfx
:
:
geometry
:
:
Au
;
use
newcss
:
:
stylesheet
:
:
Stylesheet
;
use
std
:
:
net
:
:
url
:
:
Url
;
pub
enum
Msg
{
AddStylesheetMsg
(
Stylesheet
)
BuildMsg
(
~
BuildData
)
QueryMsg
(
LayoutQuery
Chan
<
Result
<
LayoutResponse
(
)
>
>
)
ExitMsg
}
pub
enum
LayoutQuery
{
ContentBoxQuery
(
AbstractNode
<
ScriptView
>
)
ContentBoxesQuery
(
AbstractNode
<
ScriptView
>
)
}
pub
enum
LayoutResponse
{
ContentBoxResponse
(
Rect
<
Au
>
)
ContentBoxesResponse
(
~
[
Rect
<
Au
>
]
)
}
pub
enum
Damage
{
NoDamage
ReflowDamage
MatchSelectorsDamage
}
impl
Damage
{
fn
add
(
&
mut
self
new_damage
:
Damage
)
{
match
(
*
self
new_damage
)
{
(
NoDamage
_
)
=
>
*
self
=
new_damage
(
ReflowDamage
NoDamage
)
=
>
*
self
=
ReflowDamage
(
ReflowDamage
new_damage
)
=
>
*
self
=
new_damage
(
MatchSelectorsDamage
_
)
=
>
*
self
=
MatchSelectorsDamage
}
}
}
pub
struct
BuildData
{
node
:
AbstractNode
<
ScriptView
>
damage
:
Damage
url
:
Url
script_chan
:
SharedChan
<
ScriptMsg
>
window_size
:
Size2D
<
uint
>
script_join_chan
:
Chan
<
(
)
>
}
#
[
deriving
(
Clone
)
]
pub
struct
LayoutTask
{
chan
:
SharedChan
<
Msg
>
}
