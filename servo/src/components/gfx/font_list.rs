use
collections
:
:
hashmap
:
:
HashMap
;
use
font
:
:
SpecifiedFontStyle
;
use
gfx_font
:
:
FontHandleMethods
;
use
platform
:
:
font
:
:
FontHandle
;
use
platform
:
:
font_context
:
:
FontContextHandle
;
use
platform
:
:
font_list
:
:
FontListHandle
;
use
style
:
:
computed_values
:
:
{
font_weight
font_style
}
;
use
servo_util
:
:
time
:
:
{
TimeProfilerChan
profile
}
;
use
servo_util
:
:
time
;
pub
type
FontFamilyMap
=
HashMap
<
String
FontFamily
>
;
trait
FontListHandleMethods
{
fn
get_available_families
(
&
self
fctx
:
&
FontContextHandle
)
-
>
FontFamilyMap
;
fn
load_variations_for_family
(
&
self
family
:
&
mut
FontFamily
)
;
fn
get_last_resort_font_families
(
)
-
>
Vec
<
String
>
;
}
pub
struct
FontList
{
family_map
:
FontFamilyMap
handle
:
FontListHandle
time_profiler_chan
:
TimeProfilerChan
}
impl
FontList
{
pub
fn
new
(
fctx
:
&
FontContextHandle
time_profiler_chan
:
TimeProfilerChan
)
-
>
FontList
{
let
handle
=
FontListHandle
:
:
new
(
fctx
)
;
let
mut
list
=
FontList
{
handle
:
handle
family_map
:
HashMap
:
:
new
(
)
time_profiler_chan
:
time_profiler_chan
.
clone
(
)
}
;
list
.
refresh
(
fctx
)
;
list
}
fn
refresh
(
&
mut
self
_
:
&
FontContextHandle
)
{
profile
(
time
:
:
GfxRegenAvailableFontsCategory
self
.
time_profiler_chan
.
clone
(
)
|
|
{
self
.
family_map
=
self
.
handle
.
get_available_families
(
)
;
}
)
;
}
pub
fn
find_font_in_family
<
'
a
>
(
&
'
a
mut
self
family_name
:
&
String
style
:
&
SpecifiedFontStyle
)
-
>
Option
<
&
'
a
FontEntry
>
{
if
self
.
family_map
.
contains_key
(
family_name
)
{
debug
!
(
"
FontList
:
Found
font
family
with
name
=
{
:
s
}
"
family_name
.
to_str
(
)
)
;
let
s
:
&
'
a
mut
FontFamily
=
self
.
family_map
.
get_mut
(
family_name
)
;
let
result
=
s
.
find_font_for_style
(
&
mut
self
.
handle
style
)
;
if
result
.
is_some
(
)
{
return
result
;
}
None
}
else
{
debug
!
(
"
FontList
:
Couldn
'
t
find
font
family
with
name
=
{
:
s
}
"
family_name
.
to_str
(
)
)
;
None
}
}
pub
fn
get_last_resort_font_families
(
)
-
>
Vec
<
String
>
{
FontListHandle
:
:
get_last_resort_font_families
(
)
}
}
pub
struct
FontFamily
{
pub
family_name
:
String
pub
entries
:
Vec
<
FontEntry
>
}
impl
FontFamily
{
pub
fn
new
(
family_name
:
&
str
)
-
>
FontFamily
{
FontFamily
{
family_name
:
family_name
.
to_str
(
)
entries
:
vec
!
(
)
}
}
fn
load_family_variations
(
&
mut
self
list
:
&
FontListHandle
)
{
if
self
.
entries
.
len
(
)
>
0
{
return
}
list
.
load_variations_for_family
(
self
)
;
assert
!
(
self
.
entries
.
len
(
)
>
0
)
}
pub
fn
find_font_for_style
<
'
a
>
(
&
'
a
mut
self
list
:
&
FontListHandle
style
:
&
SpecifiedFontStyle
)
-
>
Option
<
&
'
a
FontEntry
>
{
self
.
load_family_variations
(
list
)
;
for
entry
in
self
.
entries
.
iter
(
)
{
if
(
style
.
weight
.
is_bold
(
)
=
=
entry
.
is_bold
(
)
)
&
&
(
(
style
.
style
=
=
font_style
:
:
italic
)
=
=
entry
.
is_italic
(
)
)
{
return
Some
(
entry
)
;
}
}
None
}
}
pub
struct
FontEntry
{
pub
face_name
:
String
weight
:
font_weight
:
:
T
italic
:
bool
pub
handle
:
FontHandle
}
impl
FontEntry
{
pub
fn
new
(
handle
:
FontHandle
)
-
>
FontEntry
{
FontEntry
{
face_name
:
handle
.
face_name
(
)
weight
:
handle
.
boldness
(
)
italic
:
handle
.
is_italic
(
)
handle
:
handle
}
}
pub
fn
is_bold
(
&
self
)
-
>
bool
{
self
.
weight
.
is_bold
(
)
}
pub
fn
is_italic
(
&
self
)
-
>
bool
{
self
.
italic
}
}
