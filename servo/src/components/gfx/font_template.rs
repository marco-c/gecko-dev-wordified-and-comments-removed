use
style
:
:
computed_values
:
:
font_weight
;
use
platform
:
:
font_context
:
:
FontContextHandle
;
use
platform
:
:
font
:
:
FontHandle
;
use
platform
:
:
font_template
:
:
FontTemplateData
;
use
sync
:
:
{
Arc
Weak
}
;
use
font
:
:
FontHandleMethods
;
#
[
deriving
(
Clone
)
]
pub
struct
FontTemplateDescriptor
{
pub
weight
:
font_weight
:
:
T
pub
italic
:
bool
}
impl
FontTemplateDescriptor
{
pub
fn
new
(
weight
:
font_weight
:
:
T
italic
:
bool
)
-
>
FontTemplateDescriptor
{
FontTemplateDescriptor
{
weight
:
weight
italic
:
italic
}
}
}
impl
PartialEq
for
FontTemplateDescriptor
{
fn
eq
(
&
self
other
:
&
FontTemplateDescriptor
)
-
>
bool
{
self
.
weight
.
is_bold
(
)
=
=
other
.
weight
.
is_bold
(
)
&
&
self
.
italic
=
=
other
.
italic
}
}
pub
struct
FontTemplate
{
identifier
:
String
descriptor
:
Option
<
FontTemplateDescriptor
>
data
:
Option
<
Weak
<
FontTemplateData
>
>
}
impl
FontTemplate
{
pub
fn
new
(
identifier
:
&
str
)
-
>
FontTemplate
{
FontTemplate
{
identifier
:
identifier
.
to_string
(
)
descriptor
:
None
data
:
None
}
}
pub
fn
get_if_matches
(
&
mut
self
fctx
:
&
FontContextHandle
requested_desc
:
&
FontTemplateDescriptor
)
-
>
Option
<
Arc
<
FontTemplateData
>
>
{
match
self
.
descriptor
{
Some
(
actual_desc
)
=
>
{
if
*
requested_desc
=
=
actual_desc
{
Some
(
self
.
get_data
(
)
)
}
else
{
None
}
}
None
=
>
{
let
data
=
self
.
get_data
(
)
;
let
handle
=
FontHandleMethods
:
:
new_from_template
(
fctx
data
.
clone
(
)
None
)
;
let
handle
:
FontHandle
=
match
handle
{
Ok
(
handle
)
=
>
handle
Err
(
(
)
)
=
>
fail
!
(
"
TODO
-
Handle
failure
to
create
a
font
from
template
.
"
)
}
;
let
actual_desc
=
FontTemplateDescriptor
:
:
new
(
handle
.
boldness
(
)
handle
.
is_italic
(
)
)
;
let
desc_match
=
actual_desc
=
=
*
requested_desc
;
self
.
descriptor
=
Some
(
actual_desc
)
;
if
desc_match
{
Some
(
data
)
}
else
{
None
}
}
}
}
pub
fn
get_data
(
&
mut
self
)
-
>
Arc
<
FontTemplateData
>
{
let
maybe_data
=
match
self
.
data
{
Some
(
ref
data
)
=
>
data
.
upgrade
(
)
None
=
>
None
}
;
match
maybe_data
{
Some
(
data
)
=
>
data
None
=
>
{
let
template_data
=
Arc
:
:
new
(
FontTemplateData
:
:
new
(
self
.
identifier
.
as_slice
(
)
)
)
;
self
.
data
=
Some
(
template_data
.
downgrade
(
)
)
;
template_data
}
}
}
}
