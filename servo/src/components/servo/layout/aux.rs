use
dom
:
:
node
:
:
{
AbstractNode
LayoutData
}
;
use
servo_util
:
:
tree
:
:
TreeUtils
;
pub
trait
LayoutAuxMethods
{
fn
initialize_layout_data
(
self
)
-
>
Option
<
mut
LayoutData
>
;
fn
initialize_style_for_subtree
(
self
refs
:
&
mut
~
[
mut
LayoutData
]
)
;
}
impl
LayoutAuxMethods
for
AbstractNode
{
fn
initialize_layout_data
(
self
)
-
>
Option
<
mut
LayoutData
>
{
if
self
.
has_layout_data
(
)
{
{
let
layout_data
=
&
mut
self
.
layout_data
(
)
.
flow
;
match
*
layout_data
{
Some
(
ref
flow
)
=
>
flow
.
teardown
(
)
None
=
>
(
)
}
}
self
.
layout_data
(
)
.
flow
=
None
;
None
}
else
{
let
data
=
mut
LayoutData
:
:
new
(
)
;
self
.
set_layout_data
(
data
)
;
Some
(
data
)
}
}
fn
initialize_style_for_subtree
(
self
refs
:
&
mut
~
[
mut
LayoutData
]
)
{
let
_
=
for
self
.
traverse_preorder
|
n
|
{
match
n
.
initialize_layout_data
(
)
{
Some
(
r
)
=
>
refs
.
push
(
r
)
None
=
>
{
}
}
}
;
}
}
