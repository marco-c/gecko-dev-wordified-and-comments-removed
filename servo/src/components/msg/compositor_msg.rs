use
geom
:
:
point
:
:
Point2D
;
use
geom
:
:
rect
:
:
Rect
;
use
geom
:
:
size
:
:
Size2D
;
use
azure
:
:
azure_hl
:
:
Color
;
use
layers
:
:
platform
:
:
surface
:
:
{
NativeGraphicsMetadata
NativePaintingGraphicsContext
}
;
use
layers
:
:
platform
:
:
surface
:
:
{
NativeSurface
NativeSurfaceMethods
}
;
use
constellation_msg
:
:
PipelineId
;
use
serialize
:
:
{
Encoder
Encodable
}
;
pub
struct
LayerBuffer
{
native_surface
:
NativeSurface
rect
:
Rect
<
f32
>
screen_pos
:
Rect
<
uint
>
resolution
:
f32
stride
:
uint
}
pub
struct
LayerBufferSet
{
buffers
:
~
[
~
LayerBuffer
]
}
impl
LayerBufferSet
{
pub
fn
mark_will_leak
(
&
mut
self
)
{
for
buffer
in
self
.
buffers
.
mut_iter
(
)
{
buffer
.
native_surface
.
mark_will_leak
(
)
}
}
}
#
[
deriving
(
Eq
Clone
)
]
pub
enum
RenderState
{
IdleRenderState
RenderingRenderState
}
#
[
deriving
(
Eq
Clone
)
]
pub
enum
ReadyState
{
Blank
Loading
PerformingLayout
FinishedLoading
}
#
[
deriving
(
Eq
)
]
pub
struct
Epoch
(
uint
)
;
impl
Epoch
{
pub
fn
next
(
&
mut
self
)
{
let
Epoch
(
ref
mut
u
)
=
*
self
;
*
u
+
=
1
;
}
}
pub
trait
RenderListener
{
fn
get_graphics_metadata
(
&
self
)
-
>
Option
<
NativeGraphicsMetadata
>
;
fn
new_layer
(
&
self
PipelineId
Size2D
<
uint
>
)
;
fn
set_layer_page_size_and_color
(
&
self
PipelineId
Size2D
<
uint
>
Epoch
Color
)
;
fn
set_layer_clip_rect
(
&
self
PipelineId
Rect
<
uint
>
)
;
fn
delete_layer
(
&
self
PipelineId
)
;
fn
paint
(
&
self
id
:
PipelineId
layer_buffer_set
:
~
LayerBufferSet
Epoch
)
;
fn
set_render_state
(
&
self
render_state
:
RenderState
)
;
}
pub
trait
ScriptListener
:
Clone
{
fn
set_ready_state
(
&
self
ReadyState
)
;
fn
invalidate_rect
(
&
self
PipelineId
Rect
<
uint
>
)
;
fn
scroll_fragment_point
(
&
self
PipelineId
Point2D
<
f32
>
)
;
fn
close
(
&
self
)
;
fn
dup
(
&
self
)
-
>
~
ScriptListener
;
}
impl
<
S
:
Encoder
>
Encodable
<
S
>
for
~
ScriptListener
{
fn
encode
(
&
self
_s
:
&
mut
S
)
{
}
}
pub
trait
Tile
{
fn
get_mem
(
&
self
)
-
>
uint
;
fn
is_valid
(
&
self
f32
)
-
>
bool
;
fn
get_size_2d
(
&
self
)
-
>
Size2D
<
uint
>
;
fn
mark_wont_leak
(
&
mut
self
)
;
fn
destroy
(
self
graphics_context
:
&
NativePaintingGraphicsContext
)
;
}
impl
Tile
for
~
LayerBuffer
{
fn
get_mem
(
&
self
)
-
>
uint
{
self
.
screen_pos
.
size
.
width
*
self
.
screen_pos
.
size
.
height
}
fn
is_valid
(
&
self
scale
:
f32
)
-
>
bool
{
(
self
.
resolution
-
scale
)
.
abs
(
)
<
1
.
0e
-
6
}
fn
get_size_2d
(
&
self
)
-
>
Size2D
<
uint
>
{
self
.
screen_pos
.
size
}
fn
mark_wont_leak
(
&
mut
self
)
{
self
.
native_surface
.
mark_wont_leak
(
)
}
fn
destroy
(
self
graphics_context
:
&
NativePaintingGraphicsContext
)
{
let
mut
this
=
self
;
this
.
native_surface
.
destroy
(
graphics_context
)
}
}
