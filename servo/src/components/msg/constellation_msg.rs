use
std
:
:
comm
:
:
{
Chan
SharedChan
}
;
use
extra
:
:
net
:
:
url
:
:
Url
;
use
extra
:
:
future
:
:
Future
;
use
geom
:
:
size
:
:
Size2D
;
#
[
deriving
(
Clone
)
]
pub
struct
ConstellationChan
{
chan
:
SharedChan
<
Msg
>
}
impl
ConstellationChan
{
pub
fn
new
(
chan
:
Chan
<
Msg
>
)
-
>
ConstellationChan
{
ConstellationChan
{
chan
:
SharedChan
:
:
new
(
chan
)
}
}
pub
fn
send
(
&
self
msg
:
Msg
)
{
self
.
chan
.
send
(
msg
)
;
}
}
pub
enum
Msg
{
ExitMsg
(
Chan
<
(
)
>
)
InitLoadUrlMsg
(
Url
)
LoadUrlMsg
(
PipelineId
Url
Future
<
Size2D
<
uint
>
>
)
LoadIframeUrlMsg
(
Url
PipelineId
Future
<
Size2D
<
uint
>
>
)
NavigateMsg
(
NavigationDirection
)
RendererReadyMsg
(
PipelineId
)
ResizedWindowBroadcast
(
Size2D
<
uint
>
)
}
#
[
deriving
(
Clone
Eq
IterBytes
)
]
enum
NavigationType
{
Load
Navigate
}
#
[
deriving
(
Clone
Eq
IterBytes
)
]
pub
enum
NavigationDirection
{
Forward
Back
}
#
[
deriving
(
Clone
Eq
IterBytes
)
]
pub
struct
PipelineId
(
uint
)
;
