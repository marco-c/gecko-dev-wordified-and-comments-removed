use
geom
:
:
rect
:
:
Rect
;
use
geom
:
:
size
:
:
TypedSize2D
;
use
geom
:
:
scale_factor
:
:
ScaleFactor
;
use
servo_util
:
:
geometry
:
:
{
DevicePixel
PagePx
ViewportPx
}
;
use
std
:
:
comm
:
:
{
channel
Sender
Receiver
}
;
use
url
:
:
Url
;
#
[
deriving
(
Clone
)
]
pub
struct
ConstellationChan
(
pub
Sender
<
Msg
>
)
;
impl
ConstellationChan
{
pub
fn
new
(
)
-
>
(
Receiver
<
Msg
>
ConstellationChan
)
{
let
(
chan
port
)
=
channel
(
)
;
(
port
ConstellationChan
(
chan
)
)
}
}
#
[
deriving
(
PartialEq
)
]
pub
enum
IFrameSandboxState
{
IFrameSandboxed
IFrameUnsandboxed
}
#
[
deriving
(
Clone
)
]
pub
struct
Failure
{
pub
pipeline_id
:
PipelineId
pub
subpage_id
:
Option
<
SubpageId
>
}
pub
struct
WindowSizeData
{
pub
initial_viewport
:
TypedSize2D
<
ViewportPx
f32
>
pub
visible_viewport
:
TypedSize2D
<
PagePx
f32
>
pub
device_pixel_ratio
:
ScaleFactor
<
ViewportPx
DevicePixel
f32
>
}
pub
enum
Msg
{
ExitMsg
FailureMsg
(
Failure
)
InitLoadUrlMsg
(
Url
)
LoadCompleteMsg
(
PipelineId
Url
)
FrameRectMsg
(
PipelineId
SubpageId
Rect
<
f32
>
)
LoadUrlMsg
(
PipelineId
Url
)
LoadIframeUrlMsg
(
Url
PipelineId
SubpageId
IFrameSandboxState
)
NavigateMsg
(
NavigationDirection
)
RendererReadyMsg
(
PipelineId
)
ResizedWindowMsg
(
WindowSizeData
)
}
#
[
deriving
(
Clone
PartialEq
Hash
)
]
pub
enum
NavigationType
{
Load
Navigate
}
#
[
deriving
(
Clone
PartialEq
Hash
)
]
pub
enum
NavigationDirection
{
Forward
Back
}
#
[
deriving
(
Clone
PartialEq
Eq
Hash
Encodable
)
]
pub
struct
PipelineId
(
pub
uint
)
;
#
[
deriving
(
Clone
PartialEq
Eq
Hash
Encodable
)
]
pub
struct
SubpageId
(
pub
uint
)
;
