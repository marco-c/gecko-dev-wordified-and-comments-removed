use
extra
:
:
url
:
:
Url
;
use
geom
:
:
rect
:
:
Rect
;
use
geom
:
:
size
:
:
Size2D
;
use
std
:
:
comm
:
:
Chan
;
#
[
deriving
(
Clone
)
]
pub
struct
ConstellationChan
(
Chan
<
Msg
>
)
;
impl
ConstellationChan
{
pub
fn
new
(
)
-
>
(
Port
<
Msg
>
ConstellationChan
)
{
let
(
port
chan
)
=
Chan
:
:
new
(
)
;
(
port
ConstellationChan
(
chan
)
)
}
}
#
[
deriving
(
Eq
)
]
pub
enum
IFrameSandboxState
{
IFrameSandboxed
IFrameUnsandboxed
}
#
[
deriving
(
Clone
)
]
pub
struct
Failure
{
pipeline_id
:
PipelineId
subpage_id
:
Option
<
SubpageId
>
}
pub
enum
Msg
{
ExitMsg
FailureMsg
(
Failure
)
InitLoadUrlMsg
(
Url
)
LoadCompleteMsg
(
PipelineId
Url
)
FrameRectMsg
(
PipelineId
SubpageId
Rect
<
f32
>
)
LoadUrlMsg
(
PipelineId
Url
)
LoadIframeUrlMsg
(
Url
PipelineId
SubpageId
IFrameSandboxState
)
NavigateMsg
(
NavigationDirection
)
RendererReadyMsg
(
PipelineId
)
ResizedWindowMsg
(
Size2D
<
uint
>
)
}
#
[
deriving
(
Clone
Eq
Hash
)
]
pub
enum
NavigationType
{
Load
Navigate
}
#
[
deriving
(
Clone
Eq
Hash
)
]
pub
enum
NavigationDirection
{
Forward
Back
}
#
[
deriving
(
Clone
Eq
Hash
Encodable
)
]
pub
struct
PipelineId
(
uint
)
;
#
[
deriving
(
Clone
Eq
Hash
Encodable
)
]
pub
struct
SubpageId
(
uint
)
;
