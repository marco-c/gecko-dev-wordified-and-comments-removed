use
css
:
:
matching
:
:
{
ApplicableDeclarations
CannotShare
MatchMethods
StyleWasShared
}
;
use
construct
:
:
FlowConstructor
;
use
context
:
:
LayoutContext
;
use
extra
:
:
LayoutAuxMethods
;
use
flow
:
:
{
Flow
MutableFlowUtils
PreorderFlowTraversal
PostorderFlowTraversal
}
;
use
flow
;
use
flow_ref
:
:
FlowRef
;
use
layout_task
:
:
{
AssignBSizesAndStoreOverflowTraversal
AssignISizesTraversal
}
;
use
layout_task
:
:
{
BubbleISizesTraversal
}
;
use
util
:
:
{
LayoutDataAccess
LayoutDataWrapper
OpaqueNodeMethods
}
;
use
wrapper
:
:
{
layout_node_to_unsafe_layout_node
layout_node_from_unsafe_layout_node
LayoutNode
PostorderNodeMutTraversal
}
;
use
wrapper
:
:
{
ThreadSafeLayoutNode
UnsafeLayoutNode
}
;
use
gfx
:
:
display_list
:
:
OpaqueNode
;
use
servo_util
:
:
time
:
:
{
TimeProfilerChan
profile
}
;
use
servo_util
:
:
time
;
use
servo_util
:
:
workqueue
:
:
{
WorkQueue
WorkUnit
WorkerProxy
}
;
use
std
:
:
mem
;
use
std
:
:
ptr
;
use
std
:
:
sync
:
:
atomics
:
:
{
AtomicInt
Relaxed
SeqCst
}
;
use
style
:
:
TNode
;
#
[
allow
(
dead_code
)
]
fn
static_assertion
(
node
:
UnsafeLayoutNode
)
{
unsafe
{
let
_
:
UnsafeFlow
=
:
:
std
:
:
intrinsics
:
:
transmute
(
node
)
;
}
}
pub
type
UnsafeFlow
=
(
uint
uint
)
;
fn
null_unsafe_flow
(
)
-
>
UnsafeFlow
{
(
0
0
)
}
pub
fn
owned_flow_to_unsafe_flow
(
flow
:
*
const
FlowRef
)
-
>
UnsafeFlow
{
unsafe
{
mem
:
:
transmute_copy
(
&
*
flow
)
}
}
pub
fn
mut_owned_flow_to_unsafe_flow
(
flow
:
*
mut
FlowRef
)
-
>
UnsafeFlow
{
unsafe
{
mem
:
:
transmute_copy
(
&
*
flow
)
}
}
pub
fn
borrowed_flow_to_unsafe_flow
(
flow
:
&
Flow
)
-
>
UnsafeFlow
{
unsafe
{
mem
:
:
transmute_copy
(
&
flow
)
}
}
pub
fn
mut_borrowed_flow_to_unsafe_flow
(
flow
:
&
mut
Flow
)
-
>
UnsafeFlow
{
unsafe
{
mem
:
:
transmute_copy
(
&
flow
)
}
}
pub
struct
DomParallelInfo
{
pub
children_count
:
AtomicInt
}
impl
DomParallelInfo
{
pub
fn
new
(
)
-
>
DomParallelInfo
{
DomParallelInfo
{
children_count
:
AtomicInt
:
:
new
(
0
)
}
}
}
pub
struct
FlowParallelInfo
{
pub
children_count
:
AtomicInt
pub
children_and_absolute_descendant_count
:
AtomicInt
pub
parent
:
UnsafeFlow
}
impl
FlowParallelInfo
{
pub
fn
new
(
)
-
>
FlowParallelInfo
{
FlowParallelInfo
{
children_count
:
AtomicInt
:
:
new
(
0
)
children_and_absolute_descendant_count
:
AtomicInt
:
:
new
(
0
)
parent
:
null_unsafe_flow
(
)
}
}
}
trait
ParallelPostorderFlowTraversal
:
PostorderFlowTraversal
{
fn
run_parallel
(
&
mut
self
mut
unsafe_flow
:
UnsafeFlow
_
:
&
mut
WorkerProxy
<
*
mut
LayoutContext
UnsafeFlow
>
)
{
loop
{
unsafe
{
let
flow
:
&
mut
FlowRef
=
mem
:
:
transmute
(
&
unsafe_flow
)
;
if
self
.
should_process
(
flow
.
get_mut
(
)
)
{
self
.
process
(
flow
.
get_mut
(
)
)
;
}
let
base
=
flow
:
:
mut_base
(
flow
.
get_mut
(
)
)
;
base
.
parallel
.
children_count
.
store
(
base
.
children
.
len
(
)
as
int
Relaxed
)
;
let
unsafe_parent
=
base
.
parallel
.
parent
;
if
unsafe_parent
=
=
null_unsafe_flow
(
)
{
break
}
let
parent
:
&
mut
FlowRef
=
mem
:
:
transmute
(
&
unsafe_parent
)
;
let
parent_base
=
flow
:
:
mut_base
(
parent
.
get_mut
(
)
)
;
if
parent_base
.
parallel
.
children_count
.
fetch_sub
(
1
SeqCst
)
=
=
1
{
unsafe_flow
=
unsafe_parent
}
else
{
break
}
}
}
}
}
trait
ParallelPreorderFlowTraversal
:
PreorderFlowTraversal
{
fn
run_parallel
(
&
mut
self
unsafe_flow
:
UnsafeFlow
proxy
:
&
mut
WorkerProxy
<
*
mut
LayoutContext
UnsafeFlow
>
)
;
#
[
inline
(
always
)
]
fn
run_parallel_helper
(
&
mut
self
unsafe_flow
:
UnsafeFlow
proxy
:
&
mut
WorkerProxy
<
*
mut
LayoutContext
UnsafeFlow
>
top_down_func
:
extern
"
Rust
"
fn
(
UnsafeFlow
&
mut
WorkerProxy
<
*
mut
LayoutContext
UnsafeFlow
>
)
bottom_up_func
:
extern
"
Rust
"
fn
(
UnsafeFlow
&
mut
WorkerProxy
<
*
mut
LayoutContext
UnsafeFlow
>
)
)
{
let
mut
had_children
=
false
;
unsafe
{
let
flow
:
&
mut
FlowRef
=
mem
:
:
transmute
(
&
unsafe_flow
)
;
self
.
process
(
flow
.
get_mut
(
)
)
;
for
kid
in
flow
:
:
child_iter
(
flow
.
get_mut
(
)
)
{
had_children
=
true
;
proxy
.
push
(
WorkUnit
{
fun
:
top_down_func
data
:
borrowed_flow_to_unsafe_flow
(
kid
)
}
)
;
}
}
if
!
had_children
{
bottom_up_func
(
unsafe_flow
proxy
)
}
}
}
impl
<
'
a
>
ParallelPostorderFlowTraversal
for
BubbleISizesTraversal
<
'
a
>
{
}
impl
<
'
a
>
ParallelPreorderFlowTraversal
for
AssignISizesTraversal
<
'
a
>
{
fn
run_parallel
(
&
mut
self
unsafe_flow
:
UnsafeFlow
proxy
:
&
mut
WorkerProxy
<
*
mut
LayoutContext
UnsafeFlow
>
)
{
self
.
run_parallel_helper
(
unsafe_flow
proxy
assign_inline_sizes
assign_block_sizes_and_store_overflow
)
}
}
impl
<
'
a
>
ParallelPostorderFlowTraversal
for
AssignBSizesAndStoreOverflowTraversal
<
'
a
>
{
}
fn
recalc_style_for_node
(
unsafe_layout_node
:
UnsafeLayoutNode
proxy
:
&
mut
WorkerProxy
<
*
mut
LayoutContext
UnsafeLayoutNode
>
)
{
let
layout_context
=
unsafe
{
&
mut
*
*
proxy
.
user_data
(
)
}
;
let
node
:
LayoutNode
=
unsafe
{
layout_node_from_unsafe_layout_node
(
&
unsafe_layout_node
)
}
;
node
.
initialize_layout_data
(
layout_context
.
layout_chan
.
clone
(
)
)
;
let
opaque_node
:
OpaqueNode
=
OpaqueNodeMethods
:
:
from_layout_node
(
&
node
)
;
let
parent_opt
=
if
opaque_node
=
=
layout_context
.
reflow_root
{
None
}
else
{
node
.
parent_node
(
)
}
;
let
style_sharing_candidate_cache
=
layout_context
.
style_sharing_candidate_cache
(
)
;
let
sharing_result
=
unsafe
{
node
.
share_style_if_possible
(
style_sharing_candidate_cache
parent_opt
.
clone
(
)
)
}
;
match
sharing_result
{
CannotShare
(
mut
shareable
)
=
>
{
let
mut
applicable_declarations
=
ApplicableDeclarations
:
:
new
(
)
;
if
node
.
is_element
(
)
{
let
stylist
=
unsafe
{
&
*
layout_context
.
stylist
}
;
node
.
match_node
(
stylist
&
mut
applicable_declarations
&
mut
shareable
)
;
}
unsafe
{
node
.
cascade_node
(
parent_opt
&
applicable_declarations
layout_context
.
applicable_declarations_cache
(
)
)
;
}
if
shareable
{
style_sharing_candidate_cache
.
insert_if_possible
(
&
node
)
;
}
}
StyleWasShared
(
index
)
=
>
style_sharing_candidate_cache
.
touch
(
index
)
}
let
mut
child_count
=
0u
;
for
_
in
node
.
children
(
)
{
child_count
+
=
1
;
}
if
child_count
!
=
0
{
let
mut
layout_data_ref
=
node
.
mutate_layout_data
(
)
;
match
&
mut
*
layout_data_ref
{
&
Some
(
ref
mut
layout_data
)
=
>
{
layout_data
.
data
.
parallel
.
children_count
.
store
(
child_count
as
int
Relaxed
)
}
&
None
=
>
fail
!
(
"
no
layout
data
"
)
}
}
if
child_count
!
=
0
{
for
kid
in
node
.
children
(
)
{
proxy
.
push
(
WorkUnit
{
fun
:
recalc_style_for_node
data
:
layout_node_to_unsafe_layout_node
(
&
kid
)
}
)
;
}
return
}
construct_flows
(
unsafe_layout_node
proxy
)
}
fn
construct_flows
(
mut
unsafe_layout_node
:
UnsafeLayoutNode
proxy
:
&
mut
WorkerProxy
<
*
mut
LayoutContext
UnsafeLayoutNode
>
)
{
loop
{
let
layout_context
=
unsafe
{
&
mut
*
*
proxy
.
user_data
(
)
}
;
let
node
:
LayoutNode
=
unsafe
{
layout_node_from_unsafe_layout_node
(
&
unsafe_layout_node
)
}
;
{
let
mut
flow_constructor
=
FlowConstructor
:
:
new
(
layout_context
None
)
;
flow_constructor
.
process
(
&
ThreadSafeLayoutNode
:
:
new
(
&
node
)
)
;
}
let
mut
child_count
=
0u
;
for
_
in
node
.
children
(
)
{
child_count
+
=
1
}
{
let
mut
layout_data_ref
=
node
.
mutate_layout_data
(
)
;
match
&
mut
*
layout_data_ref
{
&
Some
(
ref
mut
layout_data
)
=
>
{
layout_data
.
data
.
parallel
.
children_count
.
store
(
child_count
as
int
Relaxed
)
}
&
None
=
>
fail
!
(
"
no
layout
data
"
)
}
}
let
opaque_node
:
OpaqueNode
=
OpaqueNodeMethods
:
:
from_layout_node
(
&
node
)
;
if
layout_context
.
reflow_root
=
=
opaque_node
{
break
}
match
node
.
parent_node
(
)
{
Some
(
parent
)
=
>
{
unsafe
{
match
*
parent
.
borrow_layout_data_unchecked
(
)
{
Some
(
ref
parent_layout_data
)
=
>
{
let
parent_layout_data
:
&
mut
LayoutDataWrapper
=
mem
:
:
transmute
(
parent_layout_data
)
;
if
parent_layout_data
.
data
.
parallel
.
children_count
.
fetch_sub
(
1
SeqCst
)
=
=
1
{
unsafe_layout_node
=
layout_node_to_unsafe_layout_node
(
&
parent
)
}
else
{
break
}
}
None
=
>
fail
!
(
"
no
layout
data
for
parent
?
!
"
)
}
}
}
None
=
>
fail
!
(
"
no
parent
and
weren
'
t
at
reflow
root
?
!
"
)
}
}
}
fn
assign_inline_sizes
(
unsafe_flow
:
UnsafeFlow
proxy
:
&
mut
WorkerProxy
<
*
mut
LayoutContext
UnsafeFlow
>
)
{
let
layout_context
=
unsafe
{
&
mut
*
*
proxy
.
user_data
(
)
}
;
let
mut
assign_inline_sizes_traversal
=
AssignISizesTraversal
{
layout_context
:
layout_context
}
;
assign_inline_sizes_traversal
.
run_parallel
(
unsafe_flow
proxy
)
}
fn
assign_block_sizes_and_store_overflow
(
unsafe_flow
:
UnsafeFlow
proxy
:
&
mut
WorkerProxy
<
*
mut
LayoutContext
UnsafeFlow
>
)
{
let
layout_context
=
unsafe
{
&
mut
*
*
proxy
.
user_data
(
)
}
;
let
mut
assign_block_sizes_traversal
=
AssignBSizesAndStoreOverflowTraversal
{
layout_context
:
layout_context
}
;
assign_block_sizes_traversal
.
run_parallel
(
unsafe_flow
proxy
)
}
fn
compute_absolute_position
(
unsafe_flow
:
UnsafeFlow
proxy
:
&
mut
WorkerProxy
<
*
mut
LayoutContext
UnsafeFlow
>
)
{
let
mut
had_descendants
=
false
;
unsafe
{
let
flow
:
&
mut
FlowRef
=
mem
:
:
transmute
(
&
unsafe_flow
)
;
flow
.
get_mut
(
)
.
compute_absolute_position
(
)
;
let
mut
absolutely_positioned_child_count
=
0u
;
for
kid
in
flow
:
:
child_iter
(
flow
.
get_mut
(
)
)
{
if
kid
.
is_absolutely_positioned
(
)
{
absolutely_positioned_child_count
+
=
1
;
}
}
drop
(
flow
:
:
mut_base
(
flow
.
get_mut
(
)
)
.
parallel
.
children_and_absolute_descendant_count
.
fetch_sub
(
absolutely_positioned_child_count
as
int
SeqCst
)
)
;
for
kid
in
flow
:
:
child_iter
(
flow
.
get_mut
(
)
)
{
if
!
kid
.
is_absolutely_positioned
(
)
{
had_descendants
=
true
;
proxy
.
push
(
WorkUnit
{
fun
:
compute_absolute_position
data
:
borrowed_flow_to_unsafe_flow
(
kid
)
}
)
;
}
}
for
absolute_descendant_link
in
flow
:
:
mut_base
(
flow
.
get_mut
(
)
)
.
abs_descendants
.
iter
(
)
{
had_descendants
=
true
;
let
descendant
=
absolute_descendant_link
;
proxy
.
push
(
WorkUnit
{
fun
:
compute_absolute_position
data
:
borrowed_flow_to_unsafe_flow
(
descendant
)
}
)
;
}
if
!
had_descendants
{
build_display_list
(
mut_owned_flow_to_unsafe_flow
(
flow
)
proxy
)
}
}
}
fn
build_display_list
(
mut
unsafe_flow
:
UnsafeFlow
proxy
:
&
mut
WorkerProxy
<
*
mut
LayoutContext
UnsafeFlow
>
)
{
let
layout_context
=
unsafe
{
&
mut
*
*
proxy
.
user_data
(
)
}
;
loop
{
unsafe
{
let
flow
:
&
mut
FlowRef
=
mem
:
:
transmute
(
&
unsafe_flow
)
;
flow
.
get_mut
(
)
.
build_display_list
(
layout_context
)
;
{
let
base
=
flow
:
:
mut_base
(
flow
.
get_mut
(
)
)
;
let
children_and_absolute_descendant_count
=
base
.
children
.
len
(
)
+
base
.
abs_descendants
.
len
(
)
;
base
.
parallel
.
children_and_absolute_descendant_count
.
store
(
children_and_absolute_descendant_count
as
int
Relaxed
)
;
}
let
unsafe_parent
=
if
flow
.
get
(
)
.
is_absolutely_positioned
(
)
{
match
*
flow
:
:
mut_base
(
flow
.
get_mut
(
)
)
.
absolute_cb
.
get
(
)
{
None
=
>
fail
!
(
"
no
absolute
containing
block
for
absolutely
positioned
?
!
"
)
Some
(
ref
mut
absolute_cb
)
=
>
{
mut_borrowed_flow_to_unsafe_flow
(
absolute_cb
.
get_mut
(
)
)
}
}
}
else
{
flow
:
:
mut_base
(
flow
.
get_mut
(
)
)
.
parallel
.
parent
}
;
if
unsafe_parent
=
=
null_unsafe_flow
(
)
{
break
}
let
parent
:
&
mut
FlowRef
=
mem
:
:
transmute
(
&
unsafe_parent
)
;
let
parent_base
=
flow
:
:
mut_base
(
parent
.
get_mut
(
)
)
;
if
parent_base
.
parallel
.
children_and_absolute_descendant_count
.
fetch_sub
(
1
SeqCst
)
=
=
1
{
unsafe_flow
=
unsafe_parent
}
else
{
break
}
}
}
}
pub
fn
recalc_style_for_subtree
(
root_node
:
&
LayoutNode
layout_context
:
&
mut
LayoutContext
queue
:
&
mut
WorkQueue
<
*
mut
LayoutContext
UnsafeLayoutNode
>
)
{
queue
.
data
=
layout_context
as
*
mut
_
;
queue
.
push
(
WorkUnit
{
fun
:
recalc_style_for_node
data
:
layout_node_to_unsafe_layout_node
(
root_node
)
}
)
;
queue
.
run
(
)
;
queue
.
data
=
ptr
:
:
mut_null
(
)
}
pub
fn
traverse_flow_tree_preorder
(
root
:
&
mut
FlowRef
time_profiler_chan
:
TimeProfilerChan
layout_context
:
&
mut
LayoutContext
queue
:
&
mut
WorkQueue
<
*
mut
LayoutContext
UnsafeFlow
>
)
{
queue
.
data
=
layout_context
as
*
mut
_
;
profile
(
time
:
:
LayoutParallelWarmupCategory
time_profiler_chan
|
|
{
queue
.
push
(
WorkUnit
{
fun
:
assign_inline_sizes
data
:
mut_owned_flow_to_unsafe_flow
(
root
)
}
)
}
)
;
queue
.
run
(
)
;
queue
.
data
=
ptr
:
:
mut_null
(
)
}
pub
fn
build_display_list_for_subtree
(
root
:
&
mut
FlowRef
time_profiler_chan
:
TimeProfilerChan
layout_context
:
&
mut
LayoutContext
queue
:
&
mut
WorkQueue
<
*
mut
LayoutContext
UnsafeFlow
>
)
{
queue
.
data
=
layout_context
as
*
mut
_
;
profile
(
time
:
:
LayoutParallelWarmupCategory
time_profiler_chan
|
|
{
queue
.
push
(
WorkUnit
{
fun
:
compute_absolute_position
data
:
mut_owned_flow_to_unsafe_flow
(
root
)
}
)
}
)
;
queue
.
run
(
)
;
queue
.
data
=
ptr
:
:
mut_null
(
)
}
