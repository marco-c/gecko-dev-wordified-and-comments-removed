use
layout
:
:
incremental
:
:
RestyleDamage
;
use
layout
:
:
util
:
:
LayoutDataAccess
;
use
std
:
:
cast
;
use
style
:
:
ComputedValues
;
use
script
:
:
dom
:
:
node
:
:
{
AbstractNode
LayoutView
}
;
use
servo_util
:
:
tree
:
:
TreeNodeRef
;
pub
trait
NodeUtil
<
'
self
>
{
fn
get_css_select_results
(
self
)
-
>
&
'
self
ComputedValues
;
fn
set_css_select_results
(
self
decl
:
ComputedValues
)
;
fn
have_css_select_results
(
self
)
-
>
bool
;
fn
get_restyle_damage
(
self
)
-
>
RestyleDamage
;
fn
set_restyle_damage
(
self
damage
:
RestyleDamage
)
;
}
impl
<
'
self
>
NodeUtil
<
'
self
>
for
AbstractNode
<
LayoutView
>
{
fn
get_css_select_results
(
self
)
-
>
&
'
self
ComputedValues
{
let
layout_data
=
self
.
layout_data
(
)
;
match
*
layout_data
.
style
.
borrow
(
)
.
ptr
{
None
=
>
fail
!
(
~
"
style
(
)
called
on
node
without
a
style
!
"
)
Some
(
ref
style
)
=
>
unsafe
{
cast
:
:
transmute_region
(
style
)
}
}
}
fn
have_css_select_results
(
self
)
-
>
bool
{
self
.
layout_data
(
)
.
style
.
borrow
(
)
.
ptr
.
is_some
(
)
}
fn
set_css_select_results
(
self
decl
:
ComputedValues
)
{
*
self
.
layout_data
(
)
.
style
.
mutate
(
)
.
ptr
=
Some
(
decl
)
}
fn
get_restyle_damage
(
self
)
-
>
RestyleDamage
{
let
default
=
if
self
.
is_element
(
)
{
RestyleDamage
:
:
all
(
)
}
else
{
RestyleDamage
:
:
none
(
)
}
;
self
.
layout_data
(
)
.
restyle_damage
.
borrow
(
)
.
ptr
.
map
(
|
x
|
RestyleDamage
:
:
from_int
(
x
)
)
.
unwrap_or
(
default
)
}
fn
set_restyle_damage
(
self
damage
:
RestyleDamage
)
{
*
self
.
layout_data
(
)
.
restyle_damage
.
mutate
(
)
.
ptr
=
Some
(
damage
.
to_int
(
)
)
}
}
