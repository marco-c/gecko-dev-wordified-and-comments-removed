use
dom
:
:
node
:
:
{
AbstractNode
LayoutView
}
;
use
layout
:
:
aux
:
:
LayoutAuxMethods
;
use
core
:
:
cast
:
:
transmute
;
use
newcss
:
:
complete
:
:
CompleteSelectResults
;
pub
trait
NodeUtil
<
'
self
>
{
fn
get_css_select_results
(
self
)
-
>
&
'
self
CompleteSelectResults
;
fn
set_css_select_results
(
self
decl
:
CompleteSelectResults
)
;
}
impl
<
'
self
>
NodeUtil
<
'
self
>
for
AbstractNode
<
LayoutView
>
{
fn
get_css_select_results
(
self
)
-
>
&
'
self
CompleteSelectResults
{
if
!
self
.
has_layout_data
(
)
{
fail
!
(
~
"
style
(
)
called
on
a
node
without
aux
data
!
"
)
;
}
match
self
.
layout_data
(
)
.
style
{
None
=
>
fail
!
(
~
"
style
(
)
called
on
node
without
a
style
!
"
)
Some
(
ref
style
)
=
>
unsafe
{
transmute
(
style
)
}
}
}
fn
set_css_select_results
(
self
decl
:
CompleteSelectResults
)
{
if
!
self
.
has_layout_data
(
)
{
fail
!
(
~
"
set_css_select_results
(
)
called
on
a
node
without
aux
data
!
"
)
;
}
self
.
layout_data
(
)
.
style
=
Some
(
decl
)
;
}
}
