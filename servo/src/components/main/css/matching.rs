use
css
:
:
node_util
:
:
NodeUtil
;
use
css
:
:
select_handler
:
:
NodeSelectHandler
;
use
layout
:
:
incremental
;
use
script
:
:
dom
:
:
node
:
:
{
AbstractNode
LayoutView
}
;
use
newcss
:
:
complete
:
:
CompleteSelectResults
;
use
newcss
:
:
select
:
:
{
SelectCtx
SelectResults
}
;
use
servo_util
:
:
tree
:
:
TreeUtils
;
pub
trait
MatchMethods
{
fn
restyle_subtree
(
&
self
select_ctx
:
&
SelectCtx
)
;
}
impl
MatchMethods
for
AbstractNode
<
LayoutView
>
{
fn
restyle_subtree
(
&
self
select_ctx
:
&
SelectCtx
)
{
if
self
.
is_element
(
)
{
let
select_handler
=
NodeSelectHandler
{
node
:
*
self
}
;
let
incomplete_results
=
select_ctx
.
select_style
(
self
&
select_handler
)
;
let
complete_results
=
compose_results
(
*
self
incomplete_results
)
;
if
self
.
have_css_select_results
(
)
{
let
damage
=
incremental
:
:
compute_damage
(
self
self
.
get_css_select_results
(
)
&
complete_results
)
;
self
.
set_restyle_damage
(
damage
)
;
}
self
.
set_css_select_results
(
complete_results
)
;
}
for
self
.
each_child
|
kid
|
{
kid
.
restyle_subtree
(
select_ctx
)
;
}
}
}
fn
compose_results
(
node
:
AbstractNode
<
LayoutView
>
results
:
SelectResults
)
-
>
CompleteSelectResults
{
match
find_parent_element_node
(
node
)
{
None
=
>
CompleteSelectResults
:
:
new_root
(
results
)
Some
(
parent_node
)
=
>
{
let
parent_results
=
parent_node
.
get_css_select_results
(
)
;
CompleteSelectResults
:
:
new_from_parent
(
parent_results
results
)
}
}
}
fn
find_parent_element_node
(
node
:
AbstractNode
<
LayoutView
>
)
-
>
Option
<
AbstractNode
<
LayoutView
>
>
{
match
node
.
parent_node
(
)
{
Some
(
parent
)
if
parent
.
is_element
(
)
=
>
Some
(
parent
)
Some
(
parent
)
=
>
find_parent_element_node
(
parent
)
None
=
>
None
}
}
