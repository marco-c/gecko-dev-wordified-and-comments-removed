use
windowing
:
:
{
CompositeCallback
LoadUrlCallback
ResizeCallback
}
;
use
geom
:
:
size
:
:
Size2D
;
use
sharegl
:
:
base
:
:
ShareContext
;
use
sharegl
:
:
platform
:
:
Context
;
pub
struct
Application
;
impl
ApplicationMethods
for
Application
{
pub
fn
new
(
)
-
>
Application
{
Application
}
}
pub
struct
Window
(
Context
)
;
impl
WindowingMethods
<
Application
>
for
Window
{
pub
fn
new
(
_
:
&
Application
)
-
>
mut
Window
{
let
share_context
:
Context
=
ShareContext
:
:
new
(
Size2D
(
800
600
)
)
;
println
(
fmt
!
(
"
Sharing
ID
is
%
d
"
share_context
.
id
(
)
)
)
;
mut
Window
(
share_context
)
}
pub
fn
size
(
&
mut
self
)
-
>
Size2D
<
f32
>
{
Size2D
(
800
.
0
600
.
0
)
}
pub
fn
present
(
&
mut
self
)
{
(
*
self
)
.
flush
(
)
;
}
pub
fn
set_composite_callback
(
&
mut
self
_
:
CompositeCallback
)
{
}
pub
fn
set_resize_callback
(
&
mut
self
_
:
ResizeCallback
)
{
}
pub
fn
set_load_url_callback
(
&
mut
self
_
:
LoadUrlCallback
)
{
}
pub
fn
check_loop
(
mut
self
)
{
}
}
