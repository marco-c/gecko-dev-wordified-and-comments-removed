use
style
:
:
ComputedValues
;
pub
enum
RestyleEffect
{
Repaint
=
0x01
BubbleWidths
=
0x02
Reflow
=
0x04
}
pub
struct
RestyleDamage
{
priv
bits
:
int
}
macro_rules
!
restyle_damage
(
(
(
damage
:
ident
)
*
)
=
>
(
RestyleDamage
:
:
none
(
)
(
.
add
(
damage
)
)
*
)
)
impl
RestyleDamage
{
pub
fn
none
(
)
-
>
RestyleDamage
{
RestyleDamage
{
bits
:
0
}
}
pub
fn
all
(
)
-
>
RestyleDamage
{
restyle_damage
!
(
Repaint
BubbleWidths
Reflow
)
}
pub
fn
from_int
(
n
:
int
)
-
>
RestyleDamage
{
RestyleDamage
{
bits
:
n
}
}
pub
fn
to_int
(
self
)
-
>
int
{
self
.
bits
}
pub
fn
is_empty
(
self
)
-
>
bool
{
self
.
bits
=
=
0
}
pub
fn
is_nonempty
(
self
)
-
>
bool
{
self
.
bits
!
=
0
}
pub
fn
add
(
self
effect
:
RestyleEffect
)
-
>
RestyleDamage
{
RestyleDamage
{
bits
:
self
.
bits
|
(
effect
as
int
)
}
}
pub
fn
has
(
self
effect
:
RestyleEffect
)
-
>
bool
{
(
self
.
bits
&
(
effect
as
int
)
)
!
=
0
}
pub
fn
lacks
(
self
effect
:
RestyleEffect
)
-
>
bool
{
(
self
.
bits
&
(
effect
as
int
)
)
=
=
0
}
pub
fn
union
(
self
other
:
RestyleDamage
)
-
>
RestyleDamage
{
RestyleDamage
{
bits
:
self
.
bits
|
other
.
bits
}
}
pub
fn
union_in_place
(
&
mut
self
other
:
RestyleDamage
)
{
self
.
bits
=
self
.
bits
|
other
.
bits
;
}
pub
fn
intersect
(
self
other
:
RestyleDamage
)
-
>
RestyleDamage
{
RestyleDamage
{
bits
:
self
.
bits
&
other
.
bits
}
}
pub
fn
propagate_up
(
self
)
-
>
RestyleDamage
{
self
.
intersect
(
restyle_damage
!
(
Reflow
)
)
}
pub
fn
propagate_down
(
self
)
-
>
RestyleDamage
{
self
.
intersect
(
restyle_damage
!
(
BubbleWidths
)
)
}
}
macro_rules
!
add_if_not_equal
(
(
old
:
ident
new
:
ident
damage
:
ident
[
(
effect
:
ident
)
*
]
[
(
style_struct
:
ident
.
name
:
ident
)
*
]
)
=
>
(
{
if
(
(
old
.
style_struct
.
name
!
=
new
.
style_struct
.
name
)
)
|
|
*
{
damage
.
union_in_place
(
restyle_damage
!
(
(
effect
)
*
)
)
;
}
}
)
)
pub
fn
compute_damage
(
old
:
&
ComputedValues
new
:
&
ComputedValues
)
-
>
RestyleDamage
{
let
mut
damage
=
RestyleDamage
:
:
none
(
)
;
add_if_not_equal
!
(
old
new
damage
[
Repaint
]
[
Color
.
color
Background
.
background_color
Border
.
border_top_color
Border
.
border_right_color
Border
.
border_bottom_color
Border
.
border_left_color
]
)
;
add_if_not_equal
!
(
old
new
damage
[
Repaint
BubbleWidths
Reflow
]
[
Border
.
border_top_width
Border
.
border_right_width
Border
.
border_bottom_width
Border
.
border_left_width
Margin
.
margin_top
Margin
.
margin_right
Margin
.
margin_bottom
Margin
.
margin_left
Padding
.
padding_top
Padding
.
padding_right
Padding
.
padding_bottom
Padding
.
padding_left
Box
.
position
Box
.
width
Box
.
height
Box
.
float
Box
.
display
Font
.
font_family
Font
.
font_size
Font
.
font_style
Font
.
font_weight
Text
.
text_align
Text
.
text_decoration
Box
.
line_height
]
)
;
damage
}
#
[
cfg
(
test
)
]
mod
restyle_damage_tests
{
use
super
:
:
*
;
#
[
test
]
fn
none_is_empty
(
)
{
let
d
=
RestyleDamage
:
:
none
(
)
;
assert
!
(
!
d
.
has
(
Repaint
)
)
;
assert
!
(
!
d
.
has
(
BubbleWidths
)
)
;
assert
!
(
d
.
lacks
(
Repaint
)
)
;
assert
!
(
d
.
lacks
(
BubbleWidths
)
)
;
}
#
[
test
]
fn
all_is_full
(
)
{
let
d
=
RestyleDamage
:
:
all
(
)
;
assert
!
(
d
.
has
(
Repaint
)
)
;
assert
!
(
d
.
has
(
BubbleWidths
)
)
;
assert
!
(
!
d
.
lacks
(
Repaint
)
)
;
assert
!
(
!
d
.
lacks
(
BubbleWidths
)
)
;
}
#
[
test
]
fn
can_add
(
)
{
assert
!
(
RestyleDamage
:
:
none
(
)
.
add
(
BubbleWidths
)
.
has
(
BubbleWidths
)
)
;
}
#
[
test
]
fn
can_union
(
)
{
let
d
=
restyle_damage
!
(
Repaint
)
.
union
(
restyle_damage
!
(
BubbleWidths
)
)
;
assert
!
(
d
.
has
(
Repaint
)
)
;
assert
!
(
d
.
has
(
BubbleWidths
)
)
;
}
#
[
test
]
fn
can_union_in_place
(
)
{
let
mut
d
=
restyle_damage
!
(
Repaint
)
;
d
.
union_in_place
(
restyle_damage
!
(
BubbleWidths
)
)
;
assert
!
(
d
.
has
(
Repaint
)
)
;
assert
!
(
d
.
has
(
BubbleWidths
)
)
;
}
#
[
test
]
fn
can_intersect
(
)
{
let
x
=
restyle_damage
!
(
Repaint
BubbleWidths
)
;
let
y
=
restyle_damage
!
(
Repaint
Reflow
)
;
let
d
=
x
.
intersect
(
y
)
;
assert
!
(
d
.
has
(
Repaint
)
)
;
assert
!
(
d
.
lacks
(
BubbleWidths
)
)
;
assert
!
(
d
.
lacks
(
Reflow
)
)
;
}
}
