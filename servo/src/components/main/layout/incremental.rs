use
newcss
:
:
complete
:
:
CompleteSelectResults
;
use
script
:
:
dom
:
:
node
:
:
{
AbstractNode
LayoutView
}
;
pub
enum
RestyleEffect
{
Repaint
=
0x01
BubbleWidths
=
0x02
Reflow
=
0x04
}
pub
struct
RestyleDamage
{
priv
bits
:
int
}
macro_rules
!
restyle_damage
(
(
(
damage
:
ident
)
*
)
=
>
(
RestyleDamage
:
:
none
(
)
(
.
add
(
damage
)
)
*
)
)
impl
RestyleDamage
{
pub
fn
none
(
)
-
>
RestyleDamage
{
RestyleDamage
{
bits
:
0
}
}
pub
fn
all
(
)
-
>
RestyleDamage
{
restyle_damage
!
(
Repaint
BubbleWidths
Reflow
)
}
pub
fn
for_resize
(
)
-
>
RestyleDamage
{
RestyleDamage
:
:
all
(
)
}
pub
fn
from_int
(
n
:
int
)
-
>
RestyleDamage
{
RestyleDamage
{
bits
:
n
}
}
pub
fn
to_int
(
self
)
-
>
int
{
self
.
bits
}
pub
fn
is_empty
(
self
)
-
>
bool
{
self
.
bits
=
=
0
}
pub
fn
is_nonempty
(
self
)
-
>
bool
{
self
.
bits
!
=
0
}
pub
fn
add
(
self
effect
:
RestyleEffect
)
-
>
RestyleDamage
{
RestyleDamage
{
bits
:
self
.
bits
|
(
effect
as
int
)
}
}
pub
fn
has
(
self
effect
:
RestyleEffect
)
-
>
bool
{
(
self
.
bits
&
(
effect
as
int
)
)
!
=
0
}
pub
fn
lacks
(
self
effect
:
RestyleEffect
)
-
>
bool
{
(
self
.
bits
&
(
effect
as
int
)
)
=
=
0
}
pub
fn
union
(
self
other
:
RestyleDamage
)
-
>
RestyleDamage
{
RestyleDamage
{
bits
:
self
.
bits
|
other
.
bits
}
}
pub
fn
union_in_place
(
&
mut
self
other
:
RestyleDamage
)
{
self
.
bits
=
self
.
bits
|
other
.
bits
;
}
pub
fn
intersect
(
self
other
:
RestyleDamage
)
-
>
RestyleDamage
{
RestyleDamage
{
bits
:
self
.
bits
&
other
.
bits
}
}
pub
fn
propagate_up
(
self
)
-
>
RestyleDamage
{
self
.
intersect
(
restyle_damage
!
(
Reflow
)
)
}
pub
fn
propagate_down
(
self
)
-
>
RestyleDamage
{
self
.
intersect
(
restyle_damage
!
(
BubbleWidths
)
)
}
}
macro_rules
!
add_if_not_equal
(
(
[
(
effect
:
ident
)
*
]
[
(
getter
:
ident
)
*
]
)
=
>
(
{
if
(
(
old
.
getter
(
)
!
=
new
.
getter
(
)
)
)
|
|
*
{
damage
.
union_in_place
(
restyle_damage
!
(
(
effect
)
*
)
)
;
}
}
)
)
pub
fn
compute_damage
(
node
:
&
AbstractNode
<
LayoutView
>
old_results
:
&
CompleteSelectResults
new_results
:
&
CompleteSelectResults
)
-
>
RestyleDamage
{
let
old
=
old_results
.
computed_style
(
)
;
let
new
=
new_results
.
computed_style
(
)
;
let
mut
damage
=
RestyleDamage
:
:
none
(
)
;
add_if_not_equal
!
(
[
Repaint
]
[
color
background_color
border_top_color
border_right_color
border_bottom_color
border_left_color
]
)
;
add_if_not_equal
!
(
[
Repaint
BubbleWidths
Reflow
]
[
border_top_width
border_right_width
border_bottom_width
border_left_width
margin_top
margin_right
margin_bottom
margin_left
padding_top
padding_right
padding_bottom
padding_left
position
width
height
float
font_family
font_size
font_style
font_weight
text_align
text_decoration
line_height
]
)
;
let
is_root
=
node
.
is_root
(
)
;
if
old
.
display
(
is_root
)
!
=
new
.
display
(
is_root
)
{
damage
.
union_in_place
(
restyle_damage
!
(
Repaint
BubbleWidths
Reflow
)
)
;
}
damage
}
#
[
cfg
(
test
)
]
mod
restyle_damage_tests
{
use
super
:
:
*
;
#
[
test
]
fn
none_is_empty
(
)
{
let
d
=
RestyleDamage
:
:
none
(
)
;
assert
!
(
!
d
.
has
(
Repaint
)
)
;
assert
!
(
!
d
.
has
(
BubbleWidths
)
)
;
assert
!
(
d
.
lacks
(
Repaint
)
)
;
assert
!
(
d
.
lacks
(
BubbleWidths
)
)
;
}
#
[
test
]
fn
all_is_full
(
)
{
let
d
=
RestyleDamage
:
:
all
(
)
;
assert
!
(
d
.
has
(
Repaint
)
)
;
assert
!
(
d
.
has
(
BubbleWidths
)
)
;
assert
!
(
!
d
.
lacks
(
Repaint
)
)
;
assert
!
(
!
d
.
lacks
(
BubbleWidths
)
)
;
}
#
[
test
]
fn
can_add
(
)
{
assert
!
(
RestyleDamage
:
:
none
(
)
.
add
(
BubbleWidths
)
.
has
(
BubbleWidths
)
)
;
}
#
[
test
]
fn
can_union
(
)
{
let
d
=
restyle_damage
!
(
Repaint
)
.
union
(
restyle_damage
!
(
BubbleWidths
)
)
;
assert
!
(
d
.
has
(
Repaint
)
)
;
assert
!
(
d
.
has
(
BubbleWidths
)
)
;
}
#
[
test
]
fn
can_union_in_place
(
)
{
let
mut
d
=
restyle_damage
!
(
Repaint
)
;
d
.
union_in_place
(
restyle_damage
!
(
BubbleWidths
)
)
;
assert
!
(
d
.
has
(
Repaint
)
)
;
assert
!
(
d
.
has
(
BubbleWidths
)
)
;
}
#
[
test
]
fn
can_intersect
(
)
{
let
x
=
restyle_damage
!
(
Repaint
BubbleWidths
)
;
let
y
=
restyle_damage
!
(
Repaint
Reflow
)
;
let
d
=
x
.
intersect
(
y
)
;
assert
!
(
d
.
has
(
Repaint
)
)
;
assert
!
(
d
.
lacks
(
BubbleWidths
)
)
;
assert
!
(
d
.
lacks
(
Reflow
)
)
;
}
}
