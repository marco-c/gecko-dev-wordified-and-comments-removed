#
!
[
deny
(
unsafe_block
)
]
use
css
:
:
node_style
:
:
StyledNode
;
use
layout
:
:
context
:
:
LayoutContext
;
use
layout
:
:
floats
:
:
{
FloatLeft
Floats
PlacementInfo
}
;
use
layout
:
:
flow
:
:
{
BaseFlow
FlowClass
Flow
InlineFlowClass
}
;
use
layout
:
:
flow
;
use
layout
:
:
fragment
:
:
{
Fragment
ScannedTextFragment
ScannedTextFragmentInfo
SplitInfo
}
;
use
layout
:
:
model
:
:
IntrinsicWidths
;
use
layout
:
:
model
;
use
layout
:
:
text
;
use
layout
:
:
wrapper
:
:
ThreadSafeLayoutNode
;
use
collections
:
:
{
Deque
RingBuf
}
;
use
geom
:
:
{
Point2D
Rect
SideOffsets2D
Size2D
}
;
use
gfx
:
:
display_list
:
:
ContentLevel
;
use
gfx
:
:
font
:
:
FontMetrics
;
use
gfx
:
:
font_context
:
:
FontContext
;
use
gfx
:
:
text
:
:
glyph
:
:
CharIndex
;
use
servo_util
:
:
geometry
:
:
Au
;
use
servo_util
:
:
geometry
;
use
servo_util
:
:
range
;
use
servo_util
:
:
range
:
:
{
EachIndex
Range
RangeIndex
IntRangeIndex
}
;
use
std
:
:
iter
:
:
Enumerate
;
use
std
:
:
fmt
;
use
std
:
:
mem
;
use
std
:
:
num
;
use
std
:
:
slice
:
:
{
Items
MutItems
}
;
use
std
:
:
u16
;
use
style
:
:
computed_values
:
:
{
text_align
vertical_align
white_space
}
;
use
style
:
:
ComputedValues
;
use
sync
:
:
Arc
;
pub
struct
Line
{
pub
range
:
Range
<
LineIndices
>
pub
bounds
:
Rect
<
Au
>
pub
green_zone
:
Size2D
<
Au
>
}
int_range_index
!
{
#
[
doc
=
"
The
index
of
a
fragment
in
a
flattened
vector
of
DOM
elements
.
"
]
struct
FragmentIndex
(
int
)
}
#
[
deriving
(
Clone
Eq
Ord
TotalEq
TotalOrd
Zero
)
]
pub
struct
LineIndices
{
pub
fragment_index
:
FragmentIndex
pub
char_index
:
CharIndex
}
impl
RangeIndex
for
LineIndices
{
}
impl
Add
<
LineIndices
LineIndices
>
for
LineIndices
{
fn
add
(
&
self
other
:
&
LineIndices
)
-
>
LineIndices
{
if
cfg
!
(
not
(
ndebug
)
)
{
assert
!
(
other
.
fragment_index
=
=
num
:
:
zero
(
)
|
|
other
.
char_index
=
=
num
:
:
zero
(
)
"
Attempted
to
add
{
}
to
{
}
.
Both
the
fragment_index
and
\
char_index
of
the
RHS
are
non
-
zero
.
This
probably
was
a
\
mistake
!
"
self
other
)
;
}
LineIndices
{
fragment_index
:
self
.
fragment_index
+
other
.
fragment_index
char_index
:
self
.
char_index
+
other
.
char_index
}
}
}
impl
Sub
<
LineIndices
LineIndices
>
for
LineIndices
{
fn
sub
(
&
self
other
:
&
LineIndices
)
-
>
LineIndices
{
if
cfg
!
(
not
(
ndebug
)
)
{
assert
!
(
other
.
fragment_index
=
=
num
:
:
zero
(
)
|
|
other
.
char_index
=
=
num
:
:
zero
(
)
"
Attempted
to
subtract
{
}
from
{
}
.
Both
the
fragment_index
\
and
char_index
of
the
RHS
are
non
-
zero
.
This
probably
was
\
a
mistake
!
"
self
other
)
;
}
LineIndices
{
fragment_index
:
self
.
fragment_index
-
other
.
fragment_index
char_index
:
self
.
char_index
-
other
.
char_index
}
}
}
impl
Neg
<
LineIndices
>
for
LineIndices
{
fn
neg
(
&
self
)
-
>
LineIndices
{
if
cfg
!
(
not
(
ndebug
)
)
{
assert
!
(
self
.
fragment_index
=
=
num
:
:
zero
(
)
|
|
self
.
char_index
=
=
num
:
:
zero
(
)
"
Attempted
to
negate
{
}
.
Both
the
fragment_index
and
\
char_index
are
non
-
zero
.
This
probably
was
a
mistake
!
"
self
)
;
}
LineIndices
{
fragment_index
:
-
self
.
fragment_index
char_index
:
-
self
.
char_index
}
}
}
impl
fmt
:
:
Show
for
LineIndices
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
.
buf
"
{
}
.
{
}
"
self
.
fragment_index
self
.
char_index
)
}
}
pub
fn
each_fragment_index
(
range
:
&
Range
<
LineIndices
>
)
-
>
EachIndex
<
int
FragmentIndex
>
{
range
:
:
each_index
(
range
.
begin
(
)
.
fragment_index
range
.
end
(
)
.
fragment_index
)
}
pub
fn
each_char_index
(
range
:
&
Range
<
LineIndices
>
)
-
>
EachIndex
<
int
CharIndex
>
{
range
:
:
each_index
(
range
.
begin
(
)
.
char_index
range
.
end
(
)
.
char_index
)
}
struct
LineBreaker
{
pub
floats
:
Floats
pub
new_fragments
:
Vec
<
Fragment
>
pub
work_list
:
RingBuf
<
Fragment
>
pub
pending_line
:
Line
pub
lines
:
Vec
<
Line
>
pub
cur_y
:
Au
}
impl
LineBreaker
{
pub
fn
new
(
float_ctx
:
Floats
)
-
>
LineBreaker
{
LineBreaker
{
floats
:
float_ctx
new_fragments
:
Vec
:
:
new
(
)
work_list
:
RingBuf
:
:
new
(
)
pending_line
:
Line
{
range
:
Range
:
:
empty
(
)
bounds
:
Rect
(
Point2D
(
Au
:
:
new
(
0
)
Au
:
:
new
(
0
)
)
Size2D
(
Au
:
:
new
(
0
)
Au
:
:
new
(
0
)
)
)
green_zone
:
Size2D
(
Au
:
:
new
(
0
)
Au
:
:
new
(
0
)
)
}
lines
:
Vec
:
:
new
(
)
cur_y
:
Au
:
:
new
(
0
)
}
}
pub
fn
floats
(
&
mut
self
)
-
>
Floats
{
self
.
floats
.
clone
(
)
}
fn
reset_scanner
(
&
mut
self
)
{
debug
!
(
"
Resetting
LineBreaker
'
s
state
for
flow
.
"
)
;
self
.
lines
=
Vec
:
:
new
(
)
;
self
.
new_fragments
=
Vec
:
:
new
(
)
;
self
.
cur_y
=
Au
(
0
)
;
self
.
reset_line
(
)
;
}
fn
reset_line
(
&
mut
self
)
{
self
.
pending_line
.
range
.
reset
(
num
:
:
zero
(
)
num
:
:
zero
(
)
)
;
self
.
pending_line
.
bounds
=
Rect
(
Point2D
(
Au
:
:
new
(
0
)
self
.
cur_y
)
Size2D
(
Au
:
:
new
(
0
)
Au
:
:
new
(
0
)
)
)
;
self
.
pending_line
.
green_zone
=
Size2D
(
Au
:
:
new
(
0
)
Au
:
:
new
(
0
)
)
}
pub
fn
scan_for_lines
(
&
mut
self
flow
:
&
mut
InlineFlow
)
{
self
.
reset_scanner
(
)
;
let
mut
old_fragments
=
mem
:
:
replace
(
&
mut
flow
.
fragments
InlineFragments
:
:
new
(
)
)
;
{
let
mut
old_fragment_iter
=
old_fragments
.
fragments
.
iter
(
)
;
loop
{
let
cur_fragment
=
if
self
.
work_list
.
is_empty
(
)
{
match
old_fragment_iter
.
next
(
)
{
None
=
>
break
Some
(
fragment
)
=
>
{
debug
!
(
"
LineBreaker
:
Working
with
fragment
from
flow
:
b
{
}
"
fragment
.
debug_id
(
)
)
;
(
*
fragment
)
.
clone
(
)
}
}
}
else
{
let
fragment
=
self
.
work_list
.
pop_front
(
)
.
unwrap
(
)
;
debug
!
(
"
LineBreaker
:
Working
with
fragment
from
work
list
:
b
{
}
"
fragment
.
debug_id
(
)
)
;
fragment
}
;
let
fragment_was_appended
=
match
cur_fragment
.
white_space
(
)
{
white_space
:
:
normal
=
>
self
.
try_append_to_line
(
cur_fragment
flow
)
white_space
:
:
pre
=
>
self
.
try_append_to_line_by_new_line
(
cur_fragment
)
}
;
if
!
fragment_was_appended
{
debug
!
(
"
LineBreaker
:
Fragment
wasn
'
t
appended
because
line
{
:
u
}
was
full
.
"
self
.
lines
.
len
(
)
)
;
self
.
flush_current_line
(
)
;
}
else
{
debug
!
(
"
LineBreaker
:
appended
a
fragment
to
line
{
:
u
}
"
self
.
lines
.
len
(
)
)
;
}
}
if
self
.
pending_line
.
range
.
length
(
)
>
num
:
:
zero
(
)
{
debug
!
(
"
LineBreaker
:
Partially
full
line
{
:
u
}
left
at
end
of
scanning
.
"
self
.
lines
.
len
(
)
)
;
self
.
flush_current_line
(
)
;
}
}
old_fragments
.
fixup
(
mem
:
:
replace
(
&
mut
self
.
new_fragments
vec
!
[
]
)
)
;
flow
.
fragments
=
old_fragments
;
flow
.
lines
=
mem
:
:
replace
(
&
mut
self
.
lines
Vec
:
:
new
(
)
)
;
}
fn
flush_current_line
(
&
mut
self
)
{
debug
!
(
"
LineBreaker
:
Flushing
line
{
:
u
}
:
{
:
?
}
"
self
.
lines
.
len
(
)
self
.
pending_line
)
;
debug
!
(
"
LineBreaker
:
Saving
information
for
flushed
line
{
:
u
}
.
"
self
.
lines
.
len
(
)
)
;
self
.
lines
.
push
(
self
.
pending_line
)
;
self
.
cur_y
=
self
.
pending_line
.
bounds
.
origin
.
y
+
self
.
pending_line
.
bounds
.
size
.
height
;
self
.
reset_line
(
)
;
}
fn
new_height_for_line
(
&
self
new_fragment
:
&
Fragment
)
-
>
Au
{
let
fragment_height
=
new_fragment
.
content_height
(
)
;
if
fragment_height
>
self
.
pending_line
.
bounds
.
size
.
height
{
fragment_height
}
else
{
self
.
pending_line
.
bounds
.
size
.
height
}
}
fn
initial_line_placement
(
&
self
first_fragment
:
&
Fragment
ceiling
:
Au
flow
:
&
mut
InlineFlow
)
-
>
(
Rect
<
Au
>
Au
)
{
debug
!
(
"
LineBreaker
:
Trying
to
place
first
fragment
of
line
{
}
"
self
.
lines
.
len
(
)
)
;
let
first_fragment_size
=
first_fragment
.
border_box
.
size
;
let
splittable
=
first_fragment
.
can_split
(
)
;
debug
!
(
"
LineBreaker
:
fragment
size
:
{
}
splittable
:
{
}
"
first_fragment_size
splittable
)
;
let
placement_width
=
if
splittable
{
Au
:
:
new
(
0
)
}
else
{
first_fragment_size
.
width
}
;
let
info
=
PlacementInfo
{
size
:
Size2D
(
placement_width
first_fragment_size
.
height
)
ceiling
:
ceiling
max_width
:
flow
.
base
.
position
.
size
.
width
kind
:
FloatLeft
}
;
let
line_bounds
=
self
.
floats
.
place_between_floats
(
&
info
)
;
debug
!
(
"
LineBreaker
:
found
position
for
line
:
{
}
using
placement_info
:
{
:
?
}
"
line_bounds
info
)
;
if
line_bounds
.
size
.
width
>
first_fragment_size
.
width
{
debug
!
(
"
LineBreaker
:
case
=
fragment
fits
"
)
;
return
(
line_bounds
first_fragment_size
.
width
)
;
}
if
!
splittable
{
debug
!
(
"
LineBreaker
:
case
=
line
doesn
'
t
fit
but
is
unsplittable
"
)
;
return
(
line_bounds
first_fragment_size
.
width
)
;
}
debug
!
(
"
LineBreaker
:
used
to
call
split_to_width
here
"
)
;
return
(
line_bounds
first_fragment_size
.
width
)
;
}
fn
avoid_floats
(
&
mut
self
in_fragment
:
Fragment
flow
:
&
mut
InlineFlow
new_height
:
Au
line_is_empty
:
bool
)
-
>
bool
{
debug
!
(
"
LineBreaker
:
entering
float
collision
avoider
!
"
)
;
let
this_line_y
=
self
.
pending_line
.
bounds
.
origin
.
y
;
let
(
next_line
first_fragment_width
)
=
self
.
initial_line_placement
(
&
in_fragment
this_line_y
flow
)
;
let
next_green_zone
=
next_line
.
size
;
let
new_width
=
self
.
pending_line
.
bounds
.
size
.
width
+
first_fragment_width
;
if
next_green_zone
.
width
>
=
new_width
&
&
next_green_zone
.
height
>
=
new_height
{
debug
!
(
"
LineBreaker
:
case
=
adding
fragment
collides
vertically
with
floats
:
moving
line
"
)
;
self
.
pending_line
.
bounds
.
origin
=
next_line
.
origin
;
self
.
pending_line
.
green_zone
=
next_green_zone
;
assert
!
(
!
line_is_empty
"
Non
-
terminating
line
breaking
"
)
;
self
.
work_list
.
push_front
(
in_fragment
)
;
return
true
}
debug
!
(
"
LineBreaker
:
case
=
adding
fragment
collides
vertically
with
floats
:
breaking
line
"
)
;
self
.
work_list
.
push_front
(
in_fragment
)
;
false
}
fn
try_append_to_line_by_new_line
(
&
mut
self
in_fragment
:
Fragment
)
-
>
bool
{
if
in_fragment
.
new_line_pos
.
len
(
)
=
=
0
{
debug
!
(
"
LineBreaker
:
Did
not
find
a
new
-
line
character
so
pushing
the
fragment
to
\
the
line
without
splitting
.
"
)
;
self
.
push_fragment_to_line
(
in_fragment
)
;
true
}
else
{
debug
!
(
"
LineBreaker
:
Found
a
new
-
line
character
so
splitting
theline
.
"
)
;
match
in_fragment
.
find_split_info_by_new_line
(
)
{
Some
(
(
left
right
run
)
)
=
>
{
let
split_fragment
=
|
split
:
SplitInfo
|
{
let
info
=
ScannedTextFragmentInfo
:
:
new
(
run
.
clone
(
)
split
.
range
)
;
let
specific
=
ScannedTextFragment
(
info
)
;
let
size
=
Size2D
(
split
.
width
in_fragment
.
border_box
.
size
.
height
)
;
in_fragment
.
transform
(
size
specific
)
}
;
debug
!
(
"
LineBreaker
:
Pushing
the
fragment
to
the
left
of
the
new
-
line
character
\
to
the
line
.
"
)
;
let
mut
left
=
split_fragment
(
left
)
;
left
.
new_line_pos
=
vec
!
(
)
;
self
.
push_fragment_to_line
(
left
)
;
for
right
in
right
.
move_iter
(
)
{
debug
!
(
"
LineBreaker
:
Deferring
the
fragment
to
the
right
of
the
new
-
line
\
character
to
the
line
.
"
)
;
let
mut
right
=
split_fragment
(
right
)
;
right
.
new_line_pos
=
in_fragment
.
new_line_pos
.
clone
(
)
;
self
.
work_list
.
push_front
(
right
)
;
}
}
None
=
>
{
error
!
(
"
LineBreaker
:
This
split
case
makes
no
sense
!
"
)
}
}
false
}
}
fn
try_append_to_line
(
&
mut
self
in_fragment
:
Fragment
flow
:
&
mut
InlineFlow
)
-
>
bool
{
let
line_is_empty
=
self
.
pending_line
.
range
.
length
(
)
=
=
num
:
:
zero
(
)
;
if
line_is_empty
{
let
(
line_bounds
_
)
=
self
.
initial_line_placement
(
&
in_fragment
self
.
cur_y
flow
)
;
self
.
pending_line
.
bounds
.
origin
=
line_bounds
.
origin
;
self
.
pending_line
.
green_zone
=
line_bounds
.
size
;
}
debug
!
(
"
LineBreaker
:
Trying
to
append
fragment
to
line
{
:
u
}
(
fragment
size
:
{
}
green
zone
:
\
{
}
)
:
{
}
"
self
.
lines
.
len
(
)
in_fragment
.
border_box
.
size
self
.
pending_line
.
green_zone
in_fragment
)
;
let
green_zone
=
self
.
pending_line
.
green_zone
;
let
new_height
=
self
.
new_height_for_line
(
&
in_fragment
)
;
if
new_height
>
green_zone
.
height
{
return
self
.
avoid_floats
(
in_fragment
flow
new_height
line_is_empty
)
}
let
new_width
=
self
.
pending_line
.
bounds
.
size
.
width
+
in_fragment
.
border_box
.
size
.
width
;
if
new_width
<
=
green_zone
.
width
{
debug
!
(
"
LineBreaker
:
case
=
fragment
fits
without
splitting
"
)
;
self
.
push_fragment_to_line
(
in_fragment
)
;
return
true
}
if
!
in_fragment
.
can_split
(
)
{
if
line_is_empty
{
debug
!
(
"
LineBreaker
:
case
=
fragment
can
'
t
split
and
line
{
:
u
}
is
empty
so
\
overflowing
.
"
self
.
lines
.
len
(
)
)
;
self
.
push_fragment_to_line
(
in_fragment
)
;
return
true
}
}
let
available_width
=
green_zone
.
width
-
self
.
pending_line
.
bounds
.
size
.
width
;
let
split
=
in_fragment
.
find_split_info_for_width
(
CharIndex
(
0
)
available_width
line_is_empty
)
;
match
split
.
map
(
|
(
left
right
run
)
|
{
let
split_fragment
=
|
split
:
SplitInfo
|
{
let
info
=
ScannedTextFragmentInfo
:
:
new
(
run
.
clone
(
)
split
.
range
)
;
let
specific
=
ScannedTextFragment
(
info
)
;
let
size
=
Size2D
(
split
.
width
in_fragment
.
border_box
.
size
.
height
)
;
in_fragment
.
transform
(
size
specific
)
}
;
(
left
.
map
(
|
x
|
{
debug
!
(
"
LineBreaker
:
Left
split
{
}
"
x
)
;
split_fragment
(
x
)
}
)
right
.
map
(
|
x
|
{
debug
!
(
"
LineBreaker
:
Right
split
{
}
"
x
)
;
split_fragment
(
x
)
}
)
)
}
)
{
None
=
>
{
debug
!
(
"
LineBreaker
:
Tried
to
split
unsplittable
render
fragment
!
Deferring
to
next
\
line
.
{
}
"
in_fragment
)
;
self
.
work_list
.
push_front
(
in_fragment
)
;
false
}
Some
(
(
Some
(
left_fragment
)
Some
(
right_fragment
)
)
)
=
>
{
debug
!
(
"
LineBreaker
:
Line
break
found
!
Pushing
left
fragment
to
line
and
deferring
\
right
fragment
to
next
line
.
"
)
;
self
.
push_fragment_to_line
(
left_fragment
)
;
self
.
work_list
.
push_front
(
right_fragment
)
;
true
}
Some
(
(
Some
(
left_fragment
)
None
)
)
=
>
{
debug
!
(
"
LineBreaker
:
Pushing
left
fragment
to
line
.
"
)
;
self
.
push_fragment_to_line
(
left_fragment
)
;
true
}
Some
(
(
None
Some
(
right_fragment
)
)
)
=
>
{
debug
!
(
"
LineBreaker
:
Pushing
right
fragment
to
line
.
"
)
;
self
.
push_fragment_to_line
(
right_fragment
)
;
true
}
Some
(
(
None
None
)
)
=
>
{
error
!
(
"
LineBreaker
:
This
split
case
makes
no
sense
!
"
)
;
true
}
}
}
fn
push_fragment_to_line
(
&
mut
self
fragment
:
Fragment
)
{
debug
!
(
"
LineBreaker
:
Pushing
fragment
{
}
to
line
{
:
u
}
"
fragment
.
debug_id
(
)
self
.
lines
.
len
(
)
)
;
if
self
.
pending_line
.
range
.
length
(
)
=
=
num
:
:
zero
(
)
{
assert
!
(
self
.
new_fragments
.
len
(
)
<
=
(
u16
:
:
MAX
as
uint
)
)
;
self
.
pending_line
.
range
.
reset
(
LineIndices
{
fragment_index
:
FragmentIndex
(
self
.
new_fragments
.
len
(
)
as
int
)
char_index
:
CharIndex
(
0
)
}
num
:
:
zero
(
)
)
;
}
self
.
pending_line
.
range
.
extend_by
(
LineIndices
{
fragment_index
:
FragmentIndex
(
1
)
char_index
:
CharIndex
(
0
)
}
)
;
self
.
pending_line
.
bounds
.
size
.
width
=
self
.
pending_line
.
bounds
.
size
.
width
+
fragment
.
border_box
.
size
.
width
;
self
.
pending_line
.
bounds
.
size
.
height
=
Au
:
:
max
(
self
.
pending_line
.
bounds
.
size
.
height
fragment
.
border_box
.
size
.
height
)
;
self
.
new_fragments
.
push
(
fragment
)
;
}
}
pub
struct
FragmentIterator
<
'
a
>
{
iter
:
Enumerate
<
Items
<
'
a
Fragment
>
>
ranges
:
&
'
a
Vec
<
InlineFragmentRange
>
}
impl
<
'
a
>
Iterator
<
(
&
'
a
Fragment
InlineFragmentContext
<
'
a
>
)
>
for
FragmentIterator
<
'
a
>
{
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
(
&
'
a
Fragment
InlineFragmentContext
<
'
a
>
)
>
{
match
self
.
iter
.
next
(
)
{
None
=
>
None
Some
(
(
i
fragment
)
)
=
>
Some
(
(
fragment
InlineFragmentContext
:
:
new
(
self
.
ranges
FragmentIndex
(
i
as
int
)
)
)
)
}
}
}
pub
struct
MutFragmentIterator
<
'
a
>
{
iter
:
Enumerate
<
MutItems
<
'
a
Fragment
>
>
ranges
:
&
'
a
Vec
<
InlineFragmentRange
>
}
impl
<
'
a
>
Iterator
<
(
&
'
a
mut
Fragment
InlineFragmentContext
<
'
a
>
)
>
for
MutFragmentIterator
<
'
a
>
{
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
(
&
'
a
mut
Fragment
InlineFragmentContext
<
'
a
>
)
>
{
match
self
.
iter
.
next
(
)
{
None
=
>
None
Some
(
(
i
fragment
)
)
=
>
Some
(
(
fragment
InlineFragmentContext
:
:
new
(
self
.
ranges
FragmentIndex
(
i
as
int
)
)
)
)
}
}
}
pub
struct
InlineFragments
{
pub
fragments
:
Vec
<
Fragment
>
pub
ranges
:
Vec
<
InlineFragmentRange
>
}
impl
InlineFragments
{
pub
fn
new
(
)
-
>
InlineFragments
{
InlineFragments
{
fragments
:
vec
!
[
]
ranges
:
vec
!
[
]
}
}
pub
fn
len
(
&
self
)
-
>
uint
{
self
.
fragments
.
len
(
)
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
len
(
)
=
=
0
}
pub
fn
push
(
&
mut
self
fragment
:
Fragment
style
:
Arc
<
ComputedValues
>
)
{
self
.
ranges
.
push
(
InlineFragmentRange
:
:
new
(
style
Range
:
:
new
(
FragmentIndex
(
self
.
fragments
.
len
(
)
as
int
)
FragmentIndex
(
1
)
)
)
)
;
self
.
fragments
.
push
(
fragment
)
}
pub
fn
push_all
(
&
mut
self
InlineFragments
{
fragments
ranges
}
:
InlineFragments
)
{
let
adjustment
=
FragmentIndex
(
self
.
fragments
.
len
(
)
as
int
)
;
self
.
push_all_ranges
(
ranges
adjustment
)
;
self
.
fragments
.
push_all_move
(
fragments
)
;
}
pub
fn
iter
<
'
a
>
(
&
'
a
self
)
-
>
FragmentIterator
<
'
a
>
{
FragmentIterator
{
iter
:
self
.
fragments
.
as_slice
(
)
.
iter
(
)
.
enumerate
(
)
ranges
:
&
self
.
ranges
}
}
pub
fn
mut_iter
<
'
a
>
(
&
'
a
mut
self
)
-
>
MutFragmentIterator
<
'
a
>
{
MutFragmentIterator
{
iter
:
self
.
fragments
.
as_mut_slice
(
)
.
mut_iter
(
)
.
enumerate
(
)
ranges
:
&
self
.
ranges
}
}
pub
fn
get
<
'
a
>
(
&
'
a
self
index
:
uint
)
-
>
&
'
a
Fragment
{
self
.
fragments
.
get
(
index
)
}
pub
fn
get_mut
<
'
a
>
(
&
'
a
mut
self
index
:
uint
)
-
>
&
'
a
mut
Fragment
{
self
.
fragments
.
get_mut
(
index
)
}
pub
fn
push_range
(
&
mut
self
style
:
Arc
<
ComputedValues
>
range
:
Range
<
FragmentIndex
>
)
{
self
.
ranges
.
push
(
InlineFragmentRange
:
:
new
(
style
range
)
)
}
fn
push_all_ranges
(
&
mut
self
ranges
:
Vec
<
InlineFragmentRange
>
adjustment
:
FragmentIndex
)
{
for
other_range
in
ranges
.
move_iter
(
)
{
let
InlineFragmentRange
{
style
:
other_style
range
:
mut
other_range
}
=
other_range
;
other_range
.
shift_by
(
adjustment
)
;
self
.
push_range
(
other_style
other_range
)
}
}
pub
fn
get_mut_range
<
'
a
>
(
&
'
a
mut
self
index
:
FragmentIndex
)
-
>
&
'
a
mut
InlineFragmentRange
{
self
.
ranges
.
get_mut
(
index
.
to_uint
(
)
)
}
pub
fn
fixup
(
&
mut
self
new_fragments
:
Vec
<
Fragment
>
)
{
let
old_list
=
mem
:
:
replace
(
&
mut
self
.
ranges
vec
!
[
]
)
;
let
mut
worklist
=
vec
!
[
]
;
let
mut
old_list_iter
=
old_list
.
move_iter
(
)
.
peekable
(
)
;
{
let
mut
new_fragments_iter
=
new_fragments
.
iter
(
)
.
enumerate
(
)
.
peekable
(
)
;
for
(
i
old_fragment
)
in
self
.
fragments
.
iter
(
)
.
enumerate
(
)
{
let
old_fragment_index
=
FragmentIndex
(
i
as
int
)
;
let
new_fragment_start
=
match
new_fragments_iter
.
peek
(
)
{
Some
(
&
(
index
new_fragment
)
)
if
new_fragment
.
node
=
=
old_fragment
.
node
=
>
{
FragmentIndex
(
index
as
int
)
}
Some
(
_
)
|
None
=
>
{
continue
}
}
;
drop
(
new_fragments_iter
.
next
(
)
)
;
loop
{
match
new_fragments_iter
.
peek
(
)
{
Some
(
&
(
_
new_fragment
)
)
if
new_fragment
.
node
=
=
old_fragment
.
node
=
>
{
}
Some
(
_
)
|
None
=
>
break
}
drop
(
new_fragments_iter
.
next
(
)
)
;
}
loop
{
match
old_list_iter
.
peek
(
)
{
None
=
>
break
Some
(
fragment_range
)
=
>
{
if
fragment_range
.
range
.
begin
(
)
>
old_fragment_index
{
break
}
}
}
;
let
InlineFragmentRange
{
style
:
style
range
:
old_range
}
=
old_list_iter
.
next
(
)
.
unwrap
(
)
;
worklist
.
push
(
InlineFragmentFixupWorkItem
{
style
:
style
new_start_index
:
new_fragment_start
old_end_index
:
old_range
.
end
(
)
}
)
;
}
loop
{
match
worklist
.
as_slice
(
)
.
last
(
)
{
None
=
>
break
Some
(
last_work_item
)
=
>
{
if
last_work_item
.
old_end_index
>
old_fragment_index
+
FragmentIndex
(
1
)
{
break
}
}
}
let
new_last_index
=
match
new_fragments_iter
.
peek
(
)
{
None
=
>
{
FragmentIndex
(
new_fragments
.
len
(
)
as
int
)
}
Some
(
&
(
index
_
)
)
=
>
{
FragmentIndex
(
index
as
int
)
}
}
;
let
InlineFragmentFixupWorkItem
{
style
new_start_index
.
.
}
=
worklist
.
pop
(
)
.
unwrap
(
)
;
let
range
=
Range
:
:
new
(
new_start_index
new_last_index
-
new_start_index
)
;
self
.
ranges
.
push
(
InlineFragmentRange
:
:
new
(
style
range
)
)
}
}
}
self
.
fragments
=
new_fragments
;
}
pub
fn
strip_ignorable_whitespace_from_start
(
&
mut
self
)
{
if
self
.
is_empty
(
)
{
return
;
}
let
mut
found_nonwhitespace
=
false
;
let
mut
new_fragments
=
Vec
:
:
new
(
)
;
for
fragment
in
self
.
fragments
.
iter
(
)
{
if
!
found_nonwhitespace
&
&
fragment
.
is_whitespace_only
(
)
{
debug
!
(
"
stripping
ignorable
whitespace
from
start
"
)
;
continue
;
}
found_nonwhitespace
=
true
;
new_fragments
.
push
(
fragment
.
clone
(
)
)
}
self
.
fixup
(
new_fragments
)
;
}
pub
fn
strip_ignorable_whitespace_from_end
(
&
mut
self
)
{
if
self
.
is_empty
(
)
{
return
;
}
let
mut
new_fragments
=
self
.
fragments
.
clone
(
)
;
while
new_fragments
.
len
(
)
>
0
&
&
new_fragments
.
as_slice
(
)
.
last
(
)
.
get_ref
(
)
.
is_whitespace_only
(
)
{
debug
!
(
"
stripping
ignorable
whitespace
from
end
"
)
;
drop
(
new_fragments
.
pop
(
)
)
;
}
self
.
fixup
(
new_fragments
)
;
}
}
pub
struct
InlineFlow
{
pub
base
:
BaseFlow
pub
fragments
:
InlineFragments
pub
lines
:
Vec
<
Line
>
pub
minimum_height_above_baseline
:
Au
pub
minimum_depth_below_baseline
:
Au
}
impl
InlineFlow
{
pub
fn
from_fragments
(
node
:
ThreadSafeLayoutNode
fragments
:
InlineFragments
)
-
>
InlineFlow
{
InlineFlow
{
base
:
BaseFlow
:
:
new
(
node
)
fragments
:
fragments
lines
:
Vec
:
:
new
(
)
minimum_height_above_baseline
:
Au
(
0
)
minimum_depth_below_baseline
:
Au
(
0
)
}
}
pub
fn
build_display_list_inline
(
&
mut
self
layout_context
:
&
LayoutContext
)
{
let
abs_rect
=
Rect
(
self
.
base
.
abs_position
self
.
base
.
position
.
size
)
;
if
!
abs_rect
.
intersects
(
&
layout_context
.
dirty
)
{
return
}
debug
!
(
"
Flow
:
building
display
list
for
{
:
u
}
inline
fragments
"
self
.
fragments
.
len
(
)
)
;
for
(
fragment
context
)
in
self
.
fragments
.
mut_iter
(
)
{
let
rel_offset
=
fragment
.
relative_position
(
&
self
.
base
.
absolute_position_info
.
relative_containing_block_size
Some
(
context
)
)
;
drop
(
fragment
.
build_display_list
(
&
mut
self
.
base
.
display_list
layout_context
self
.
base
.
abs_position
+
rel_offset
ContentLevel
Some
(
context
)
)
)
;
}
}
fn
distance_from_baseline
(
fragment
:
&
Fragment
ascent
:
Au
parent_text_top
:
Au
parent_text_bottom
:
Au
height_above_baseline
:
&
mut
Au
depth_below_baseline
:
&
mut
Au
largest_height_for_top_fragments
:
&
mut
Au
largest_height_for_bottom_fragments
:
&
mut
Au
)
-
>
(
Au
bool
)
{
match
fragment
.
vertical_align
(
)
{
vertical_align
:
:
baseline
=
>
(
-
ascent
false
)
vertical_align
:
:
middle
=
>
{
let
xheight
=
Au
(
0
)
;
(
-
(
xheight
+
fragment
.
content_height
(
)
)
.
scale_by
(
0
.
5
)
false
)
}
vertical_align
:
:
sub
=
>
{
let
sub_offset
=
Au
(
0
)
;
(
sub_offset
-
ascent
false
)
}
vertical_align
:
:
super_
=
>
{
let
super_offset
=
Au
(
0
)
;
(
-
super_offset
-
ascent
false
)
}
vertical_align
:
:
text_top
=
>
{
let
fragment_height
=
*
height_above_baseline
+
*
depth_below_baseline
;
let
prev_depth_below_baseline
=
*
depth_below_baseline
;
*
height_above_baseline
=
parent_text_top
;
*
depth_below_baseline
=
fragment_height
-
*
height_above_baseline
;
(
*
depth_below_baseline
-
prev_depth_below_baseline
-
ascent
false
)
}
vertical_align
:
:
text_bottom
=
>
{
let
fragment_height
=
*
height_above_baseline
+
*
depth_below_baseline
;
let
prev_depth_below_baseline
=
*
depth_below_baseline
;
*
depth_below_baseline
=
parent_text_bottom
;
*
height_above_baseline
=
fragment_height
-
*
depth_below_baseline
;
(
*
depth_below_baseline
-
prev_depth_below_baseline
-
ascent
false
)
}
vertical_align
:
:
top
=
>
{
*
largest_height_for_top_fragments
=
Au
:
:
max
(
*
largest_height_for_top_fragments
*
height_above_baseline
+
*
depth_below_baseline
)
;
let
offset_top
=
*
height_above_baseline
-
ascent
;
(
offset_top
true
)
}
vertical_align
:
:
bottom
=
>
{
*
largest_height_for_bottom_fragments
=
Au
:
:
max
(
*
largest_height_for_bottom_fragments
*
height_above_baseline
+
*
depth_below_baseline
)
;
let
offset_bottom
=
-
(
*
depth_below_baseline
+
ascent
)
;
(
offset_bottom
true
)
}
vertical_align
:
:
Length
(
length
)
=
>
(
-
(
length
+
ascent
)
false
)
vertical_align
:
:
Percentage
(
p
)
=
>
{
let
pt_size
=
fragment
.
font_style
(
)
.
pt_size
;
let
line_height
=
fragment
.
calculate_line_height
(
Au
:
:
from_pt
(
pt_size
)
)
;
let
percent_offset
=
line_height
.
scale_by
(
p
)
;
(
-
(
percent_offset
+
ascent
)
false
)
}
}
}
fn
set_horizontal_fragment_positions
(
fragments
:
&
mut
InlineFragments
line
:
&
Line
line_align
:
text_align
:
:
T
)
{
let
slack_width
=
Au
:
:
max
(
Au
(
0
)
line
.
green_zone
.
width
-
line
.
bounds
.
size
.
width
)
;
let
mut
offset_x
=
line
.
bounds
.
origin
.
x
;
offset_x
=
offset_x
+
match
line_align
{
text_align
:
:
left
|
text_align
:
:
justify
=
>
Au
(
0
)
text_align
:
:
center
=
>
slack_width
.
scale_by
(
0
.
5
)
text_align
:
:
right
=
>
slack_width
}
;
for
i
in
each_fragment_index
(
&
line
.
range
)
{
let
fragment
=
fragments
.
get_mut
(
i
.
to_uint
(
)
)
;
let
size
=
fragment
.
border_box
.
size
;
fragment
.
border_box
=
Rect
(
Point2D
(
offset_x
fragment
.
border_box
.
origin
.
y
)
size
)
;
offset_x
=
offset_x
+
size
.
width
;
}
}
pub
fn
compute_minimum_ascent_and_descent
(
&
mut
self
font_context
:
&
mut
FontContext
style
:
&
ComputedValues
)
{
let
font_style
=
text
:
:
computed_style_to_font_style
(
style
)
;
let
font_metrics
=
text
:
:
font_metrics_for_style
(
font_context
&
font_style
)
;
let
line_height
=
text
:
:
line_height_from_style
(
style
style
.
get_font
(
)
.
font_size
)
;
let
inline_metrics
=
InlineMetrics
:
:
from_font_metrics
(
&
font_metrics
line_height
)
;
self
.
minimum_height_above_baseline
=
inline_metrics
.
height_above_baseline
;
self
.
minimum_depth_below_baseline
=
inline_metrics
.
depth_below_baseline
;
}
}
impl
Flow
for
InlineFlow
{
fn
class
(
&
self
)
-
>
FlowClass
{
InlineFlowClass
}
fn
as_immutable_inline
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
InlineFlow
{
self
}
fn
as_inline
<
'
a
>
(
&
'
a
mut
self
)
-
>
&
'
a
mut
InlineFlow
{
self
}
fn
bubble_widths
(
&
mut
self
_
:
&
mut
LayoutContext
)
{
for
kid
in
self
.
base
.
child_iter
(
)
{
flow
:
:
mut_base
(
kid
)
.
floats
=
Floats
:
:
new
(
)
;
}
let
mut
intrinsic_widths
=
IntrinsicWidths
:
:
new
(
)
;
for
(
fragment
context
)
in
self
.
fragments
.
mut_iter
(
)
{
debug
!
(
"
Flow
:
measuring
{
}
"
*
fragment
)
;
let
fragment_intrinsic_widths
=
fragment
.
intrinsic_widths
(
Some
(
context
)
)
;
intrinsic_widths
.
minimum_width
=
geometry
:
:
max
(
intrinsic_widths
.
minimum_width
fragment_intrinsic_widths
.
minimum_width
)
;
intrinsic_widths
.
preferred_width
=
geometry
:
:
max
(
intrinsic_widths
.
preferred_width
fragment_intrinsic_widths
.
preferred_width
)
;
}
self
.
base
.
intrinsic_widths
=
intrinsic_widths
;
}
fn
assign_widths
(
&
mut
self
_
:
&
mut
LayoutContext
)
{
debug
!
(
"
InlineFlow
:
:
assign_widths
:
floats
in
:
{
:
?
}
"
self
.
base
.
floats
)
;
{
let
this
=
&
mut
*
self
;
for
(
fragment
context
)
in
this
.
fragments
.
mut_iter
(
)
{
fragment
.
assign_replaced_width_if_necessary
(
self
.
base
.
position
.
size
.
width
Some
(
context
)
)
}
}
assert
!
(
self
.
base
.
children
.
len
(
)
=
=
0
"
InlineFlow
:
should
not
have
children
flows
in
the
current
layout
implementation
.
"
)
;
}
fn
assign_height
(
&
mut
self
_
:
&
mut
LayoutContext
)
{
debug
!
(
"
assign_height_inline
:
assigning
height
for
flow
"
)
;
debug
!
(
"
assign_height_inline
:
floats
in
:
{
:
?
}
"
self
.
base
.
floats
)
;
for
(
fragment
_
)
in
self
.
fragments
.
mut_iter
(
)
{
fragment
.
assign_replaced_height_if_necessary
(
)
;
}
let
scanner_floats
=
self
.
base
.
floats
.
clone
(
)
;
let
mut
scanner
=
LineBreaker
:
:
new
(
scanner_floats
)
;
scanner
.
scan_for_lines
(
self
)
;
let
text_align
=
self
.
base
.
flags
.
text_align
(
)
;
let
mut
line_distance_from_flow_top
=
Au
(
0
)
;
for
line
in
self
.
lines
.
mut_iter
(
)
{
InlineFlow
:
:
set_horizontal_fragment_positions
(
&
mut
self
.
fragments
line
text_align
)
;
line
.
bounds
.
origin
.
y
=
line_distance_from_flow_top
;
let
mut
largest_height_above_baseline
=
self
.
minimum_height_above_baseline
;
let
mut
largest_depth_below_baseline
=
self
.
minimum_depth_below_baseline
;
let
(
mut
largest_height_for_top_fragments
mut
largest_height_for_bottom_fragments
)
=
(
Au
(
0
)
Au
(
0
)
)
;
for
fragment_i
in
each_fragment_index
(
&
line
.
range
)
{
let
fragment
=
self
.
fragments
.
fragments
.
get_mut
(
fragment_i
.
to_uint
(
)
)
;
let
InlineMetrics
{
height_above_baseline
:
mut
height_above_baseline
depth_below_baseline
:
mut
depth_below_baseline
ascent
}
=
fragment
.
inline_metrics
(
)
;
let
parent_text_top
=
fragment
.
style
(
)
.
get_font
(
)
.
font_size
;
let
parent_text_bottom
=
Au
(
0
)
;
let
(
distance_from_baseline
no_update_flag
)
=
InlineFlow
:
:
distance_from_baseline
(
fragment
ascent
parent_text_top
parent_text_bottom
&
mut
height_above_baseline
&
mut
depth_below_baseline
&
mut
largest_height_for_top_fragments
&
mut
largest_height_for_bottom_fragments
)
;
if
!
no_update_flag
{
largest_height_above_baseline
=
Au
:
:
max
(
height_above_baseline
largest_height_above_baseline
)
;
largest_depth_below_baseline
=
Au
:
:
max
(
depth_below_baseline
largest_depth_below_baseline
)
;
}
fragment
.
border_box
.
origin
.
y
=
distance_from_baseline
}
largest_height_above_baseline
=
Au
:
:
max
(
largest_height_above_baseline
largest_height_for_bottom_fragments
-
largest_depth_below_baseline
)
;
largest_depth_below_baseline
=
Au
:
:
max
(
largest_depth_below_baseline
largest_height_for_top_fragments
-
largest_height_above_baseline
)
;
let
baseline_distance_from_top
=
largest_height_above_baseline
;
for
fragment_i
in
each_fragment_index
(
&
line
.
range
)
{
let
fragment
=
self
.
fragments
.
get_mut
(
fragment_i
.
to_uint
(
)
)
;
match
fragment
.
vertical_align
(
)
{
vertical_align
:
:
top
=
>
{
fragment
.
border_box
.
origin
.
y
=
fragment
.
border_box
.
origin
.
y
+
line_distance_from_flow_top
}
vertical_align
:
:
bottom
=
>
{
fragment
.
border_box
.
origin
.
y
=
fragment
.
border_box
.
origin
.
y
+
line_distance_from_flow_top
+
baseline_distance_from_top
+
largest_depth_below_baseline
}
_
=
>
{
fragment
.
border_box
.
origin
.
y
=
fragment
.
border_box
.
origin
.
y
+
line_distance_from_flow_top
+
baseline_distance_from_top
}
}
}
line
.
bounds
.
size
.
height
=
largest_height_above_baseline
+
largest_depth_below_baseline
;
line_distance_from_flow_top
=
line_distance_from_flow_top
+
line
.
bounds
.
size
.
height
;
}
self
.
base
.
position
.
size
.
height
=
if
self
.
lines
.
len
(
)
>
0
{
self
.
lines
.
as_slice
(
)
.
last
(
)
.
get_ref
(
)
.
bounds
.
origin
.
y
+
self
.
lines
.
as_slice
(
)
.
last
(
)
.
get_ref
(
)
.
bounds
.
size
.
height
}
else
{
Au
:
:
new
(
0
)
}
;
self
.
base
.
floats
=
scanner
.
floats
(
)
;
self
.
base
.
floats
.
translate
(
Point2D
(
Au
:
:
new
(
0
)
-
self
.
base
.
position
.
size
.
height
)
)
;
}
}
impl
fmt
:
:
Show
for
InlineFlow
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
try
!
(
write
!
(
f
.
buf
"
InlineFlow
"
)
)
;
for
(
i
(
fragment
_
)
)
in
self
.
fragments
.
iter
(
)
.
enumerate
(
)
{
if
i
=
=
0
{
try
!
(
write
!
(
f
.
buf
"
:
{
}
"
fragment
)
)
}
else
{
try
!
(
write
!
(
f
.
buf
"
{
}
"
fragment
)
)
}
}
Ok
(
(
)
)
}
}
pub
struct
InlineFragmentRange
{
pub
style
:
Arc
<
ComputedValues
>
pub
range
:
Range
<
FragmentIndex
>
}
impl
InlineFragmentRange
{
fn
new
(
style
:
Arc
<
ComputedValues
>
range
:
Range
<
FragmentIndex
>
)
-
>
InlineFragmentRange
{
InlineFragmentRange
{
style
:
style
range
:
range
}
}
pub
fn
border
(
&
self
)
-
>
SideOffsets2D
<
Au
>
{
model
:
:
border_from_style
(
&
*
self
.
style
)
}
pub
fn
padding
(
&
self
)
-
>
SideOffsets2D
<
Au
>
{
model
:
:
padding_from_style
(
&
*
self
.
style
Au
(
0
)
)
}
}
struct
InlineFragmentFixupWorkItem
{
style
:
Arc
<
ComputedValues
>
new_start_index
:
FragmentIndex
old_end_index
:
FragmentIndex
}
pub
struct
RangeIterator
<
'
a
>
{
iter
:
Items
<
'
a
InlineFragmentRange
>
index
:
FragmentIndex
seen_first
:
bool
}
impl
<
'
a
>
Iterator
<
&
'
a
InlineFragmentRange
>
for
RangeIterator
<
'
a
>
{
fn
next
(
&
mut
self
)
-
>
Option
<
&
'
a
InlineFragmentRange
>
{
if
self
.
seen_first
{
match
self
.
iter
.
next
(
)
{
Some
(
fragment_range
)
if
fragment_range
.
range
.
contains
(
self
.
index
)
=
>
{
return
Some
(
fragment_range
)
}
Some
(
_
)
|
None
=
>
return
None
}
}
loop
{
match
self
.
iter
.
next
(
)
{
None
=
>
return
None
Some
(
fragment_range
)
if
fragment_range
.
range
.
contains
(
self
.
index
)
=
>
{
self
.
seen_first
=
true
;
return
Some
(
fragment_range
)
}
Some
(
_
)
=
>
{
}
}
}
}
}
pub
struct
InlineFragmentContext
<
'
a
>
{
ranges
:
&
'
a
Vec
<
InlineFragmentRange
>
index
:
FragmentIndex
}
impl
<
'
a
>
InlineFragmentContext
<
'
a
>
{
pub
fn
new
<
'
a
>
(
ranges
:
&
'
a
Vec
<
InlineFragmentRange
>
index
:
FragmentIndex
)
-
>
InlineFragmentContext
<
'
a
>
{
InlineFragmentContext
{
ranges
:
ranges
index
:
index
}
}
#
[
inline
(
always
)
]
pub
fn
ranges
(
&
self
)
-
>
RangeIterator
<
'
a
>
{
RangeIterator
{
iter
:
self
.
ranges
.
iter
(
)
index
:
self
.
index
seen_first
:
false
}
}
}
pub
struct
InlineMetrics
{
pub
height_above_baseline
:
Au
pub
depth_below_baseline
:
Au
pub
ascent
:
Au
}
impl
InlineMetrics
{
#
[
inline
]
pub
fn
from_font_metrics
(
font_metrics
:
&
FontMetrics
line_height
:
Au
)
-
>
InlineMetrics
{
let
leading
=
line_height
-
(
font_metrics
.
ascent
+
font_metrics
.
descent
)
;
InlineMetrics
{
height_above_baseline
:
font_metrics
.
ascent
+
leading
.
scale_by
(
0
.
5
)
depth_below_baseline
:
font_metrics
.
descent
+
leading
.
scale_by
(
0
.
5
)
ascent
:
font_metrics
.
ascent
}
}
}
