use
geom
:
:
point
:
:
Point2D
;
use
geom
:
:
size
:
:
Size2D
;
use
servo_msg
:
:
compositor_msg
:
:
{
ReadyState
RenderState
}
;
pub
enum
MouseWindowEvent
{
MouseWindowClickEvent
(
uint
Point2D
<
f32
>
)
MouseWindowMouseDownEvent
(
uint
Point2D
<
f32
>
)
MouseWindowMouseUpEvent
(
uint
Point2D
<
f32
>
)
}
pub
enum
WindowNavigateMsg
{
Forward
Back
}
pub
enum
WindowEvent
{
IdleWindowEvent
ResizeWindowEvent
(
uint
uint
)
LoadUrlWindowEvent
(
~
str
)
MouseWindowEventClass
(
MouseWindowEvent
)
ScrollWindowEvent
(
Point2D
<
f32
>
)
ZoomWindowEvent
(
f32
)
NavigationWindowEvent
(
WindowNavigateMsg
)
FinishedWindowEvent
QuitWindowEvent
}
pub
trait
ApplicationMethods
{
fn
new
(
)
-
>
Self
;
}
pub
trait
WindowMethods
<
A
>
{
pub
fn
new
(
app
:
&
A
)
-
>
mut
Self
;
pub
fn
size
(
&
self
)
-
>
Size2D
<
f32
>
;
pub
fn
present
(
&
mut
self
)
;
pub
fn
recv
(
mut
self
)
-
>
WindowEvent
;
pub
fn
set_ready_state
(
mut
self
ready_state
:
ReadyState
)
;
pub
fn
set_render_state
(
mut
self
render_state
:
RenderState
)
;
}
