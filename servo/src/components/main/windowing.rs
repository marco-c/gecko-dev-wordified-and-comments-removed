use
geom
:
:
point
:
:
Point2D
;
use
geom
:
:
size
:
:
Size2D
;
use
servo_msg
:
:
compositor_msg
:
:
{
ReadyState
RenderState
}
;
pub
enum
WindowMouseEvent
{
WindowClickEvent
(
uint
Point2D
<
f32
>
)
WindowMouseDownEvent
(
uint
Point2D
<
f32
>
)
WindowMouseUpEvent
(
uint
Point2D
<
f32
>
)
}
pub
enum
WindowNavigateMsg
{
Forward
Back
}
pub
type
ResizeCallback
=
fn
(
uint
uint
)
;
pub
type
LoadUrlCallback
=
fn
(
&
str
)
;
pub
type
MouseCallback
=
fn
(
WindowMouseEvent
)
;
pub
type
ScrollCallback
=
fn
(
Point2D
<
f32
>
)
;
pub
type
ZoomCallback
=
fn
(
f32
)
;
pub
type
NavigationCallback
=
fn
(
WindowNavigateMsg
)
;
pub
trait
ApplicationMethods
{
fn
new
(
)
-
>
Self
;
}
pub
trait
WindowMethods
<
A
>
{
pub
fn
new
(
app
:
&
A
)
-
>
mut
Self
;
pub
fn
size
(
&
self
)
-
>
Size2D
<
f32
>
;
pub
fn
present
(
&
mut
self
)
;
pub
fn
set_resize_callback
(
&
mut
self
new_resize_callback
:
ResizeCallback
)
;
pub
fn
set_load_url_callback
(
&
mut
self
new_load_url_callback
:
LoadUrlCallback
)
;
pub
fn
set_mouse_callback
(
&
mut
self
new_mouse_callback
:
MouseCallback
)
;
pub
fn
set_scroll_callback
(
&
mut
self
new_scroll_callback
:
ScrollCallback
)
;
pub
fn
set_zoom_callback
(
&
mut
self
new_zoom_callback
:
ZoomCallback
)
;
pub
fn
set_navigation_callback
(
&
mut
self
new_navigation_callback
:
NavigationCallback
)
;
pub
fn
check_loop
(
mut
self
)
;
pub
fn
set_ready_state
(
mut
self
ready_state
:
ReadyState
)
;
pub
fn
set_render_state
(
mut
self
render_state
:
RenderState
)
;
}
