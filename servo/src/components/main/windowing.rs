use
geom
:
:
point
:
:
TypedPoint2D
;
use
geom
:
:
scale_factor
:
:
ScaleFactor
;
use
geom
:
:
size
:
:
TypedSize2D
;
use
servo_msg
:
:
compositor_msg
:
:
{
ReadyState
RenderState
}
;
use
servo_util
:
:
geometry
:
:
{
ScreenPx
DevicePixel
}
;
use
std
:
:
rc
:
:
Rc
;
pub
enum
MouseWindowEvent
{
MouseWindowClickEvent
(
uint
TypedPoint2D
<
DevicePixel
f32
>
)
MouseWindowMouseDownEvent
(
uint
TypedPoint2D
<
DevicePixel
f32
>
)
MouseWindowMouseUpEvent
(
uint
TypedPoint2D
<
DevicePixel
f32
>
)
}
pub
enum
WindowNavigateMsg
{
Forward
Back
}
pub
enum
WindowEvent
{
IdleWindowEvent
RefreshWindowEvent
ResizeWindowEvent
(
TypedSize2D
<
DevicePixel
uint
>
)
LoadUrlWindowEvent
(
String
)
MouseWindowEventClass
(
MouseWindowEvent
)
MouseWindowMoveEventClass
(
TypedPoint2D
<
DevicePixel
f32
>
)
ScrollWindowEvent
(
TypedPoint2D
<
DevicePixel
f32
>
TypedPoint2D
<
DevicePixel
i32
>
)
ZoomWindowEvent
(
f32
)
NavigationWindowEvent
(
WindowNavigateMsg
)
FinishedWindowEvent
QuitWindowEvent
}
pub
trait
ApplicationMethods
{
fn
new
(
)
-
>
Self
;
}
pub
trait
WindowMethods
<
A
>
{
fn
new
(
app
:
&
A
is_foreground
:
bool
)
-
>
Rc
<
Self
>
;
fn
framebuffer_size
(
&
self
)
-
>
TypedSize2D
<
DevicePixel
uint
>
;
fn
size
(
&
self
)
-
>
TypedSize2D
<
ScreenPx
f32
>
;
fn
present
(
&
self
)
;
fn
recv
(
&
self
)
-
>
WindowEvent
;
fn
set_ready_state
(
&
self
ready_state
:
ReadyState
)
;
fn
set_render_state
(
&
self
render_state
:
RenderState
)
;
fn
hidpi_factor
(
&
self
)
-
>
ScaleFactor
<
ScreenPx
DevicePixel
f32
>
;
}
