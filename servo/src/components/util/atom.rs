use
serialize
:
:
{
Encoder
Encodable
}
;
use
std
:
:
fmt
;
use
string_cache
:
:
atom
;
#
[
deriving
(
Clone
Eq
PartialEq
)
]
pub
struct
Atom
{
atom
:
atom
:
:
Atom
}
impl
Atom
{
#
[
inline
(
always
)
]
pub
fn
from_slice
(
slice
:
&
str
)
-
>
Atom
{
Atom
{
atom
:
atom
:
:
Atom
:
:
from_slice
(
slice
)
}
}
}
impl
Str
for
Atom
{
#
[
inline
(
always
)
]
fn
as_slice
<
'
t
>
(
&
'
t
self
)
-
>
&
'
t
str
{
self
.
atom
.
as_slice
(
)
}
}
impl
fmt
:
:
Show
for
Atom
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
{
:
s
}
"
self
.
atom
.
as_slice
(
)
)
}
}
impl
<
E
S
:
Encoder
<
E
>
>
Encodable
<
S
E
>
for
Atom
{
fn
encode
(
&
self
_s
:
&
mut
S
)
-
>
Result
<
(
)
E
>
{
Ok
(
(
)
)
}
}
