use
std
:
:
local_data
;
use
cssparser
:
:
ast
:
:
{
SyntaxError
SourceLocation
}
;
pub
struct
ErrorLoggerIterator
<
I
>
(
I
)
;
impl
<
T
I
:
Iterator
<
Result
<
T
SyntaxError
>
>
>
Iterator
<
T
>
for
ErrorLoggerIterator
<
I
>
{
fn
next
(
&
mut
self
)
-
>
Option
<
T
>
{
let
ErrorLoggerIterator
(
ref
mut
this
)
=
*
self
;
loop
{
match
this
.
next
(
)
{
Some
(
Ok
(
v
)
)
=
>
return
Some
(
v
)
Some
(
Err
(
error
)
)
=
>
log_css_error
(
error
.
location
format
!
(
"
{
:
?
}
"
error
.
reason
)
)
None
=
>
return
None
}
}
}
}
local_data_key
!
(
silence_errors
:
bool
)
pub
fn
log_css_error
(
location
:
SourceLocation
message
:
&
str
)
{
if
local_data
:
:
get
(
silence_errors
|
silenced
|
silenced
.
is_none
(
)
)
{
error
!
(
"
{
:
u
}
:
{
:
u
}
{
:
s
}
"
location
.
line
location
.
column
message
)
}
}
pub
fn
with_errors_silenced
<
T
>
(
f
:
|
|
-
>
T
)
-
>
T
{
local_data
:
:
set
(
silence_errors
true
)
;
let
result
=
f
(
)
;
local_data
:
:
pop
(
silence_errors
)
;
result
}
