#
include
"
nsISupports
.
idl
"
#
include
"
domstubs
.
idl
"
interface
nsIContent
;
webidl
Document
;
webidl
Element
;
webidl
Node
;
webidl
Selection
;
[
scriptable
builtinclass
uuid
(
87ee993e
-
985f
-
4a43
-
a974
-
0d9512da2fb0
)
]
interface
nsIHTMLEditor
:
nsISupports
{
%
{
C
+
+
typedef
short
EAlignment
;
%
}
const
short
eLeft
=
0
;
const
short
eCenter
=
1
;
const
short
eRight
=
2
;
const
short
eJustify
=
3
;
[
can_run_script
]
void
setInlineProperty
(
in
AString
aProperty
in
AString
aAttribute
in
AString
aValue
)
;
[
can_run_script
]
AString
getInlinePropertyWithAttrValue
(
in
AString
aProperty
in
AString
aAttribute
in
AString
aValue
out
boolean
aFirst
out
boolean
aAny
out
boolean
aAll
)
;
[
can_run_script
]
void
removeInlineProperty
(
in
AString
aProperty
in
AString
aAttribute
)
;
boolean
nodeIsBlock
(
in
Node
node
)
;
[
can_run_script
]
void
insertHTML
(
in
AString
aInputString
)
;
[
can_run_script
]
void
rebuildDocumentFromSource
(
in
AString
aSourceString
)
;
[
can_run_script
]
void
insertElementAtSelection
(
in
Element
aElement
in
boolean
aDeleteSelection
)
;
void
updateBaseURL
(
)
;
[
can_run_script
]
void
selectElement
(
in
Element
aElement
)
;
AString
getParagraphState
(
out
boolean
aMixed
)
;
[
can_run_script
]
AString
getFontFaceState
(
out
boolean
aMixed
)
;
[
can_run_script
]
AString
getHighlightColorState
(
out
boolean
aMixed
)
;
void
getListState
(
out
boolean
aMixed
out
boolean
aOL
out
boolean
aUL
out
boolean
aDL
)
;
void
getListItemState
(
out
boolean
aMixed
out
boolean
aLI
out
boolean
aDT
out
boolean
aDD
)
;
[
can_run_script
]
void
getAlignment
(
out
boolean
aMixed
out
short
aAlign
)
;
[
can_run_script
]
void
makeOrChangeList
(
in
AString
aListType
in
boolean
entireList
in
AString
aBulletType
)
;
[
can_run_script
]
void
removeList
(
in
AString
aListType
)
;
Element
getElementOrParentByTagName
(
in
AString
aTagName
in
Node
aNode
)
;
nsISupports
getSelectedElement
(
in
AString
aTagName
)
;
[
can_run_script
]
Element
createElementWithDefaults
(
in
AString
aTagName
)
;
[
can_run_script
]
void
insertLinkAroundSelection
(
in
Element
aAnchorElement
)
;
[
can_run_script
]
void
setBackgroundColor
(
in
AString
aColor
)
;
[
setter_can_run_script
]
attribute
boolean
isCSSEnabled
;
[
can_run_script
]
void
checkSelectionStateForAnonymousButtons
(
)
;
boolean
isAnonymousElement
(
in
Element
aElement
)
;
attribute
boolean
returnInParagraphCreatesNewParagraph
;
}
;
