#
include
"
nsISupports
.
idl
"
#
include
"
domstubs
.
idl
"
%
{
C
+
+
#
include
"
mozilla
/
Debug
.
h
"
%
}
interface
nsISelectionController
;
interface
nsIDocumentStateListener
;
interface
nsIEditActionListener
;
interface
nsIInlineSpellChecker
;
interface
nsITransferable
;
webidl
Document
;
webidl
Element
;
webidl
Node
;
webidl
Selection
;
%
{
C
+
+
namespace
mozilla
{
class
EditorBase
;
class
HTMLEditor
;
class
TextEditor
;
}
%
}
[
scriptable
builtinclass
uuid
(
094be624
-
f0bf
-
400f
-
89e2
-
6a84baab9474
)
]
interface
nsIEditor
:
nsISupports
{
%
{
C
+
+
typedef
short
EDirection
;
typedef
short
EStripWrappers
;
%
}
const
short
eNone
=
0
;
const
short
eNext
=
1
;
const
short
ePrevious
=
2
;
const
short
eNextWord
=
3
;
const
short
ePreviousWord
=
4
;
const
short
eToBeginningOfLine
=
5
;
const
short
eToEndOfLine
=
6
;
%
{
C
+
+
static
bool
EDirectionIsValid
(
EDirection
aDirectionAndAmount
)
{
return
aDirectionAndAmount
=
=
nsIEditor
:
:
eNone
|
|
aDirectionAndAmount
=
=
nsIEditor
:
:
eNext
|
|
aDirectionAndAmount
=
=
nsIEditor
:
:
ePrevious
|
|
aDirectionAndAmount
=
=
nsIEditor
:
:
eNextWord
|
|
aDirectionAndAmount
=
=
nsIEditor
:
:
ePreviousWord
|
|
aDirectionAndAmount
=
=
nsIEditor
:
:
eToBeginningOfLine
|
|
aDirectionAndAmount
=
=
nsIEditor
:
:
eToEndOfLine
;
}
static
bool
EDirectionIsValidExceptNone
(
EDirection
aDirectionAndAmount
)
{
return
aDirectionAndAmount
!
=
nsIEditor
:
:
eNone
&
&
EDirectionIsValid
(
aDirectionAndAmount
)
;
}
[
[
nodiscard
]
]
static
bool
DirectionIsBackspace
(
EDirection
aDirectionAndAmount
)
{
MOZ_ASSERT
(
EDirectionIsValid
(
aDirectionAndAmount
)
)
;
return
aDirectionAndAmount
=
=
nsIEditor
:
:
ePrevious
|
|
aDirectionAndAmount
=
=
nsIEditor
:
:
ePreviousWord
|
|
aDirectionAndAmount
=
=
nsIEditor
:
:
eToBeginningOfLine
;
}
[
[
nodiscard
]
]
static
bool
DirectionIsDelete
(
EDirection
aDirectionAndAmount
)
{
MOZ_ASSERT
(
EDirectionIsValid
(
aDirectionAndAmount
)
)
;
return
aDirectionAndAmount
=
=
nsIEditor
:
:
eNext
|
|
aDirectionAndAmount
=
=
nsIEditor
:
:
eNextWord
|
|
aDirectionAndAmount
=
=
nsIEditor
:
:
eToEndOfLine
;
}
%
}
const
short
eStrip
=
0
;
const
short
eNoStrip
=
1
;
const
long
eEditorPlaintextMask
=
0x0001
;
const
long
eEditorSingleLineMask
=
0x0002
;
const
long
eEditorPasswordMask
=
0x0004
;
const
long
eEditorReadonlyMask
=
0x0008
;
const
long
eEditorMailMask
=
0x0020
;
const
long
eEditorEnableWrapHackMask
=
0x0040
;
const
long
eEditorAllowInteraction
=
0x0200
;
const
long
eEditorRightToLeft
=
0x0800
;
const
long
eEditorLeftToRight
=
0x1000
;
const
long
eEditorSkipSpellCheck
=
0x2000
;
const
long
eNewlinesPasteIntact
=
0
;
const
long
eNewlinesPasteToFirst
=
1
;
const
long
eNewlinesReplaceWithSpaces
=
2
;
const
long
eNewlinesStrip
=
3
;
const
long
eNewlinesReplaceWithCommas
=
4
;
const
long
eNewlinesStripSurroundingWhitespace
=
5
;
readonly
attribute
Selection
selection
;
[
can_run_script
]
void
setAttributeOrEquivalent
(
in
Element
element
in
AString
sourceAttrName
in
AString
sourceAttrValue
in
boolean
aSuppressTransaction
)
;
[
can_run_script
]
void
removeAttributeOrEquivalent
(
in
Element
element
in
AString
sourceAttrName
in
boolean
aSuppressTransaction
)
;
[
setter_can_run_script
]
attribute
unsigned
long
flags
;
attribute
AString
contentsMIMEType
;
readonly
attribute
boolean
isDocumentEditable
;
readonly
attribute
boolean
isSelectionEditable
;
readonly
attribute
Document
document
;
readonly
attribute
Element
rootElement
;
readonly
attribute
nsISelectionController
selectionController
;
[
can_run_script
]
void
deleteSelection
(
in
short
action
in
short
stripWrappers
)
;
readonly
attribute
boolean
documentIsEmpty
;
readonly
attribute
boolean
documentModified
;
[
setter_can_run_script
]
attribute
ACString
documentCharacterSet
;
[
can_run_script
]
void
resetModificationCount
(
)
;
long
getModificationCount
(
)
;
[
can_run_script
]
void
incrementModificationCount
(
in
long
aModCount
)
;
void
enableUndo
(
in
boolean
enable
)
;
[
infallible
]
readonly
attribute
boolean
undoRedoEnabled
;
[
infallible
]
readonly
attribute
boolean
canUndo
;
[
infallible
]
readonly
attribute
boolean
canRedo
;
[
binaryname
(
ClearUndoRedoXPCOM
)
]
void
clearUndoRedo
(
)
;
[
can_run_script
]
void
undo
(
)
;
[
can_run_script
]
void
undoAll
(
)
;
[
can_run_script
]
void
redo
(
)
;
[
can_run_script
]
void
beginTransaction
(
)
;
[
can_run_script
]
void
endTransaction
(
)
;
void
setShouldTxnSetSelection
(
in
boolean
should
)
;
nsIInlineSpellChecker
getInlineSpellChecker
(
in
boolean
autoCreate
)
;
void
setSpellcheckUserOverride
(
in
boolean
enable
)
;
[
can_run_script
]
void
cut
(
)
;
[
can_run_script
]
boolean
canCut
(
)
;
[
can_run_script
]
void
copy
(
)
;
[
can_run_script
]
boolean
canCopy
(
)
;
[
can_run_script
]
void
paste
(
in
long
aClipboardType
)
;
[
can_run_script
]
void
pasteTransferable
(
in
nsITransferable
aTransferable
)
;
boolean
canPaste
(
in
long
aClipboardType
)
;
[
can_run_script
]
void
selectAll
(
)
;
[
can_run_script
]
void
beginningOfDocument
(
)
;
[
can_run_script
]
void
endOfDocument
(
)
;
[
can_run_script
]
void
setAttribute
(
in
Element
aElement
in
AString
attributestr
in
AString
attvalue
)
;
[
can_run_script
]
void
removeAttribute
(
in
Element
aElement
in
AString
aAttribute
)
;
[
can_run_script
]
void
cloneAttributes
(
in
Element
aDestElement
in
Element
aSourceElement
)
;
[
can_run_script
]
void
insertNode
(
in
Node
node
in
Node
parent
in
unsigned
long
aPosition
)
;
[
can_run_script
]
void
deleteNode
(
in
Node
child
)
;
AString
outputToString
(
in
AString
formatType
in
unsigned
long
flags
)
;
void
addEditActionListener
(
in
nsIEditActionListener
listener
)
;
void
removeEditActionListener
(
in
nsIEditActionListener
listener
)
;
void
addDocumentStateListener
(
in
nsIDocumentStateListener
listener
)
;
void
removeDocumentStateListener
(
in
nsIDocumentStateListener
listener
)
;
void
forceCompositionEnd
(
)
;
readonly
attribute
boolean
composing
;
[
can_run_script
optional_argc
]
void
unmask
(
[
optional
]
in
unsigned
long
aStart
[
optional
]
in
long
long
aEnd
[
optional
]
in
unsigned
long
aTimeout
)
;
[
can_run_script
]
void
mask
(
)
;
readonly
attribute
unsigned
long
unmaskedStart
;
readonly
attribute
unsigned
long
unmaskedEnd
;
readonly
attribute
boolean
autoMaskingEnabled
;
readonly
attribute
AString
passwordMask
;
readonly
attribute
unsigned
long
textLength
;
attribute
long
newlineHandling
;
[
can_run_script
]
void
insertText
(
in
AString
aStringToInsert
)
;
[
can_run_script
]
void
insertLineBreak
(
)
;
%
{
C
+
+
inline
bool
IsHTMLEditor
(
)
const
;
inline
bool
IsTextEditor
(
)
const
;
inline
mozilla
:
:
EditorBase
*
AsEditorBase
(
)
;
inline
const
mozilla
:
:
EditorBase
*
AsEditorBase
(
)
const
;
inline
mozilla
:
:
TextEditor
*
AsTextEditor
(
)
;
inline
const
mozilla
:
:
TextEditor
*
AsTextEditor
(
)
const
;
inline
mozilla
:
:
TextEditor
*
GetAsTextEditor
(
)
;
inline
const
mozilla
:
:
TextEditor
*
GetAsTextEditor
(
)
const
;
inline
mozilla
:
:
HTMLEditor
*
AsHTMLEditor
(
)
;
inline
const
mozilla
:
:
HTMLEditor
*
AsHTMLEditor
(
)
const
;
inline
mozilla
:
:
HTMLEditor
*
GetAsHTMLEditor
(
)
;
inline
const
mozilla
:
:
HTMLEditor
*
GetAsHTMLEditor
(
)
const
;
%
}
}
;
