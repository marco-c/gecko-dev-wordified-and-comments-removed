#
ifndef
WhiteSpaceVisibilityKeeper_h
#
define
WhiteSpaceVisibilityKeeper_h
#
include
"
EditAction
.
h
"
#
include
"
EditorBase
.
h
"
#
include
"
EditorForwards
.
h
"
#
include
"
EditorDOMPoint
.
h
"
#
include
"
EditorUtils
.
h
"
#
include
"
HTMLEditHelpers
.
h
"
#
include
"
HTMLEditor
.
h
"
#
include
"
HTMLEditUtils
.
h
"
#
include
"
WSRunScanner
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
StaticPrefs_editor
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
HTMLBRElement
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIContent
.
h
"
namespace
mozilla
{
class
WhiteSpaceVisibilityKeeper
final
{
private
:
using
AutoTransactionsConserveSelection
=
EditorBase
:
:
AutoTransactionsConserveSelection
;
using
EditorType
=
EditorBase
:
:
EditorType
;
using
Element
=
dom
:
:
Element
;
using
HTMLBRElement
=
dom
:
:
HTMLBRElement
;
using
IgnoreNonEditableNodes
=
WSRunScanner
:
:
IgnoreNonEditableNodes
;
using
InsertTextTo
=
EditorBase
:
:
InsertTextTo
;
using
LineBreakType
=
HTMLEditor
:
:
LineBreakType
;
using
PointPosition
=
WSRunScanner
:
:
PointPosition
;
using
Scan
=
WSRunScanner
:
:
Scan
;
using
TextFragmentData
=
WSRunScanner
:
:
TextFragmentData
;
using
VisibleWhiteSpacesData
=
WSRunScanner
:
:
VisibleWhiteSpacesData
;
public
:
WhiteSpaceVisibilityKeeper
(
)
=
delete
;
explicit
WhiteSpaceVisibilityKeeper
(
const
WhiteSpaceVisibilityKeeper
&
aOther
)
=
delete
;
WhiteSpaceVisibilityKeeper
(
WhiteSpaceVisibilityKeeper
&
&
aOther
)
=
delete
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
CaretPoint
nsresult
>
DeleteInvisibleASCIIWhiteSpaces
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
CaretPoint
nsresult
>
PrepareToDeleteRangeAndTrackPoints
(
HTMLEditor
&
aHTMLEditor
EditorDOMPoint
*
aStartPoint
EditorDOMPoint
*
aEndPoint
const
Element
&
aEditingHost
)
{
MOZ_ASSERT
(
!
StaticPrefs
:
:
editor_white_space_normalization_blink_compatible
(
)
)
;
MOZ_ASSERT
(
aStartPoint
-
>
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
aEndPoint
-
>
IsSetAndValid
(
)
)
;
AutoTrackDOMPoint
trackerStart
(
aHTMLEditor
.
RangeUpdaterRef
(
)
aStartPoint
)
;
AutoTrackDOMPoint
trackerEnd
(
aHTMLEditor
.
RangeUpdaterRef
(
)
aEndPoint
)
;
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
WhiteSpaceVisibilityKeeper
:
:
PrepareToDeleteRange
(
aHTMLEditor
EditorDOMRange
(
*
aStartPoint
*
aEndPoint
)
aEditingHost
)
;
NS_WARNING_ASSERTION
(
caretPointOrError
.
isOk
(
)
"
WhiteSpaceVisibilityKeeper
:
:
PrepareToDeleteRange
(
)
failed
"
)
;
return
caretPointOrError
;
}
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
CaretPoint
nsresult
>
PrepareToDeleteRange
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMRange
&
aRange
const
Element
&
aEditingHost
)
{
MOZ_ASSERT
(
!
StaticPrefs
:
:
editor_white_space_normalization_blink_compatible
(
)
)
;
MOZ_ASSERT
(
aRange
.
IsPositionedAndValid
(
)
)
;
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
WhiteSpaceVisibilityKeeper
:
:
MakeSureToKeepVisibleStateOfWhiteSpacesAroundDeletingRange
(
aHTMLEditor
aRange
aEditingHost
)
;
NS_WARNING_ASSERTION
(
caretPointOrError
.
isOk
(
)
"
WhiteSpaceVisibilityKeeper
:
:
"
"
MakeSureToKeepVisibleStateOfWhiteSpacesAroundDeletingRange
(
)
failed
"
)
;
return
caretPointOrError
;
}
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
EditorDOMPoint
nsresult
>
PrepareToSplitBlockElement
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPointToSplit
const
Element
&
aSplittingBlockElement
)
;
enum
class
NormalizeOption
{
HandleOnlyFollowingWhiteSpaces
HandleOnlyPrecedingWhiteSpaces
StopIfFollowingWhiteSpacesStartsWithNBSP
StopIfPrecedingWhiteSpacesEndsWithNBP
}
;
using
NormalizeOptions
=
EnumSet
<
NormalizeOption
>
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
EditorDOMPoint
nsresult
>
NormalizeWhiteSpacesBefore
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
NormalizeOptions
aOptions
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
EditorDOMPoint
nsresult
>
NormalizeWhiteSpacesAfter
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
NormalizeOptions
aOptions
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
EditorDOMPoint
nsresult
>
NormalizeWhiteSpacesToSplitAt
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPointToSplit
NormalizeOptions
aOptions
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
EditorDOMRange
nsresult
>
NormalizeSurroundingWhiteSpacesToJoin
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMRange
&
aRangeToDelete
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
MoveNodeResult
nsresult
>
MergeFirstLineOfRightBlockElementIntoDescendantLeftBlockElement
(
HTMLEditor
&
aHTMLEditor
Element
&
aLeftBlockElement
Element
&
aRightBlockElement
const
EditorDOMPoint
&
aAtRightBlockChild
const
Maybe
<
nsAtom
*
>
&
aListElementTagName
const
HTMLBRElement
*
aPrecedingInvisibleBRElement
const
Element
&
aEditingHost
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
MoveNodeResult
nsresult
>
MergeFirstLineOfRightBlockElementIntoAncestorLeftBlockElement
(
HTMLEditor
&
aHTMLEditor
Element
&
aLeftBlockElement
Element
&
aRightBlockElement
const
EditorDOMPoint
&
aAtLeftBlockChild
nsIContent
&
aLeftContentInBlock
const
Maybe
<
nsAtom
*
>
&
aListElementTagName
const
HTMLBRElement
*
aPrecedingInvisibleBRElement
const
Element
&
aEditingHost
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
MoveNodeResult
nsresult
>
MergeFirstLineOfRightBlockElementIntoLeftBlockElement
(
HTMLEditor
&
aHTMLEditor
Element
&
aLeftBlockElement
Element
&
aRightBlockElement
const
Maybe
<
nsAtom
*
>
&
aListElementTagName
const
HTMLBRElement
*
aPrecedingInvisibleBRElement
const
Element
&
aEditingHost
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
CreateLineBreakResult
nsresult
>
InsertLineBreak
(
LineBreakType
aLineBreakType
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPointToInsert
)
;
using
InsertTextFor
=
EditorBase
:
:
InsertTextFor
;
template
<
typename
EditorDOMPointType
>
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
InsertTextResult
nsresult
>
InsertText
(
HTMLEditor
&
aHTMLEditor
const
nsAString
&
aStringToInsert
const
EditorDOMPointType
&
aPointToInsert
InsertTextTo
aInsertTextTo
)
{
return
WhiteSpaceVisibilityKeeper
:
:
InsertTextOrInsertOrUpdateCompositionString
(
aHTMLEditor
aStringToInsert
EditorDOMRange
(
aPointToInsert
)
aInsertTextTo
InsertTextFor
:
:
NormalText
)
;
}
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
InsertTextResult
nsresult
>
InsertOrUpdateCompositionString
(
HTMLEditor
&
aHTMLEditor
const
nsAString
&
aCompositionString
const
EditorDOMRange
&
aCompositionStringRange
InsertTextFor
aPurpose
)
{
MOZ_ASSERT
(
EditorBase
:
:
InsertingTextForComposition
(
aPurpose
)
)
;
return
InsertTextOrInsertOrUpdateCompositionString
(
aHTMLEditor
aCompositionString
aCompositionStringRange
HTMLEditor
:
:
InsertTextTo
:
:
ExistingTextNodeIfAvailable
aPurpose
)
;
}
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
CaretPoint
nsresult
>
DeletePreviousWhiteSpace
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
const
Element
&
aEditingHost
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
CaretPoint
nsresult
>
DeleteInclusiveNextWhiteSpace
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
const
Element
&
aEditingHost
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
CaretPoint
nsresult
>
DeleteContentNodeAndJoinTextNodesAroundIt
(
HTMLEditor
&
aHTMLEditor
nsIContent
&
aContentToDelete
const
EditorDOMPoint
&
aCaretPoint
const
Element
&
aEditingHost
)
;
template
<
typename
EditorDOMPointType
>
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
NormalizeVisibleWhiteSpacesAt
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointType
&
aPoint
const
Element
&
aEditingHost
)
;
private
:
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
CaretPoint
nsresult
>
MakeSureToKeepVisibleStateOfWhiteSpacesAroundDeletingRange
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMRange
&
aRangeToDelete
const
Element
&
aEditingHost
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
MakeSureToKeepVisibleWhiteSpacesVisibleAfterSplit
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPointToSplit
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
ReplaceTextAndRemoveEmptyTextNodes
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMRangeInTexts
&
aRangeToReplace
const
nsAString
&
aReplaceString
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
EditorDOMPoint
nsresult
>
NormalizeWhiteSpacesToSplitTextNodeAt
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointInText
&
aPointToSplit
NormalizeOptions
aOptions
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
EditorDOMRange
nsresult
>
NormalizeSurroundingWhiteSpacesToDeleteCharacters
(
HTMLEditor
&
aHTMLEditor
dom
:
:
Text
&
aTextNode
uint32_t
aOffset
uint32_t
aLength
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
EditorDOMPoint
nsresult
>
EnsureNoInvisibleWhiteSpaces
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
EnsureNoInvisibleWhiteSpacesBefore
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
EnsureNoInvisibleWhiteSpacesAfter
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
EditorDOMPoint
nsresult
>
NormalizeWhiteSpacesAt
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointInText
&
aPoint
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
InsertTextResult
nsresult
>
InsertTextOrInsertOrUpdateCompositionString
(
HTMLEditor
&
aHTMLEditor
const
nsAString
&
aStringToInsert
const
EditorDOMRange
&
aRangeToBeReplaced
InsertTextTo
aInsertTextTo
InsertTextFor
aPurpose
)
;
}
;
}
#
endif
