#
include
"
WSRunObject
.
h
"
#
include
"
HTMLEditUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
mozilla
/
HTMLEditor
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
OwningNonNull
.
h
"
#
include
"
mozilla
/
RangeUtils
.
h
"
#
include
"
mozilla
/
SelectionState
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
StaticPrefs_editor
.
h
"
#
include
"
mozilla
/
dom
/
AncestorIterator
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIContentInlines
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTextFragment
.
h
"
namespace
mozilla
{
using
namespace
dom
;
using
ChildBlockBoundary
=
HTMLEditUtils
:
:
ChildBlockBoundary
;
const
char16_t
kNBSP
=
160
;
template
WSRunScanner
:
:
WSRunScanner
(
const
HTMLEditor
*
aHTMLEditor
const
EditorDOMPoint
&
aScanStartPoint
const
EditorDOMPoint
&
aScanEndPoint
)
;
template
WSRunScanner
:
:
WSRunScanner
(
const
HTMLEditor
*
aHTMLEditor
const
EditorRawDOMPoint
&
aScanStartPoint
const
EditorRawDOMPoint
&
aScanEndPoint
)
;
template
WSRunScanner
:
:
WSRunScanner
(
const
HTMLEditor
*
aHTMLEditor
const
EditorDOMPointInText
&
aScanStartPoint
const
EditorDOMPointInText
&
aScanEndPoint
)
;
template
WSRunObject
:
:
WSRunObject
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aScanStartPoint
const
EditorDOMPoint
&
aScanEndPoint
)
;
template
WSRunObject
:
:
WSRunObject
(
HTMLEditor
&
aHTMLEditor
const
EditorRawDOMPoint
&
aScanStartPoint
const
EditorRawDOMPoint
&
aScanEndPoint
)
;
template
WSRunObject
:
:
WSRunObject
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointInText
&
aScanStartPoint
const
EditorDOMPointInText
&
aScanEndPoint
)
;
template
WSScanResult
WSRunScanner
:
:
ScanPreviousVisibleNodeOrBlockBoundaryFrom
(
const
EditorDOMPoint
&
aPoint
)
const
;
template
WSScanResult
WSRunScanner
:
:
ScanPreviousVisibleNodeOrBlockBoundaryFrom
(
const
EditorRawDOMPoint
&
aPoint
)
const
;
template
WSScanResult
WSRunScanner
:
:
ScanNextVisibleNodeOrBlockBoundaryFrom
(
const
EditorDOMPoint
&
aPoint
)
const
;
template
WSScanResult
WSRunScanner
:
:
ScanNextVisibleNodeOrBlockBoundaryFrom
(
const
EditorRawDOMPoint
&
aPoint
)
const
;
template
<
typename
PT
typename
CT
>
WSRunScanner
:
:
WSRunScanner
(
const
HTMLEditor
*
aHTMLEditor
const
EditorDOMPointBase
<
PT
CT
>
&
aScanStartPoint
const
EditorDOMPointBase
<
PT
CT
>
&
aScanEndPoint
)
:
mScanStartPoint
(
aScanStartPoint
)
mScanEndPoint
(
aScanEndPoint
)
mEditingHost
(
aHTMLEditor
-
>
GetActiveEditingHost
(
)
)
mPRE
(
false
)
mStartOffset
(
0
)
mEndOffset
(
0
)
mFirstNBSPOffset
(
0
)
mLastNBSPOffset
(
0
)
mStartRun
(
nullptr
)
mEndRun
(
nullptr
)
mHTMLEditor
(
aHTMLEditor
)
mStartReason
(
WSType
:
:
NotInitialized
)
mEndReason
(
WSType
:
:
NotInitialized
)
{
MOZ_ASSERT
(
*
nsContentUtils
:
:
ComparePoints
(
aScanStartPoint
.
ToRawRangeBoundary
(
)
aScanEndPoint
.
ToRawRangeBoundary
(
)
)
<
=
0
)
;
DebugOnly
<
nsresult
>
rvIgnored
=
GetWSNodes
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
WSRunScanner
:
:
GetWSNodes
(
)
failed
but
ignored
"
)
;
GetRuns
(
)
;
}
WSRunScanner
:
:
~
WSRunScanner
(
)
{
ClearRuns
(
)
;
}
template
<
typename
PT
typename
CT
>
WSRunObject
:
:
WSRunObject
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointBase
<
PT
CT
>
&
aScanStartPoint
const
EditorDOMPointBase
<
PT
CT
>
&
aScanEndPoint
)
:
WSRunScanner
(
&
aHTMLEditor
aScanStartPoint
aScanEndPoint
)
mHTMLEditor
(
aHTMLEditor
)
{
}
nsresult
WSRunObject
:
:
Scrub
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsSet
(
)
)
;
WSRunObject
wsRunObject
(
aHTMLEditor
aPoint
)
;
nsresult
rv
=
wsRunObject
.
Scrub
(
)
;
if
(
NS_WARN_IF
(
aHTMLEditor
.
Destroyed
(
)
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
WSRunObject
:
:
Scrub
(
)
failed
"
)
;
return
rv
;
}
nsresult
WSRunObject
:
:
PrepareToJoinBlocks
(
HTMLEditor
&
aHTMLEditor
Element
&
aLeftBlockElement
Element
&
aRightBlockElement
)
{
WSRunObject
leftWSObj
(
aHTMLEditor
EditorRawDOMPoint
:
:
AtEndOf
(
aLeftBlockElement
)
)
;
WSRunObject
rightWSObj
(
aHTMLEditor
EditorRawDOMPoint
(
&
aRightBlockElement
0
)
)
;
nsresult
rv
=
leftWSObj
.
PrepareToDeleteRangePriv
(
&
rightWSObj
)
;
if
(
NS_WARN_IF
(
aHTMLEditor
.
Destroyed
(
)
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
WSRunObject
:
:
PrepareToDeleteRangePriv
(
)
failed
"
)
;
return
rv
;
}
nsresult
WSRunObject
:
:
PrepareToDeleteRange
(
HTMLEditor
&
aHTMLEditor
EditorDOMPoint
*
aStartPoint
EditorDOMPoint
*
aEndPoint
)
{
MOZ_ASSERT
(
aStartPoint
)
;
MOZ_ASSERT
(
aEndPoint
)
;
if
(
NS_WARN_IF
(
!
aStartPoint
-
>
IsSet
(
)
)
|
|
NS_WARN_IF
(
!
aEndPoint
-
>
IsSet
(
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoTrackDOMPoint
trackerStart
(
aHTMLEditor
.
RangeUpdaterRef
(
)
aStartPoint
)
;
AutoTrackDOMPoint
trackerEnd
(
aHTMLEditor
.
RangeUpdaterRef
(
)
aEndPoint
)
;
WSRunObject
leftWSObj
(
aHTMLEditor
*
aStartPoint
)
;
WSRunObject
rightWSObj
(
aHTMLEditor
*
aEndPoint
)
;
nsresult
rv
=
leftWSObj
.
PrepareToDeleteRangePriv
(
&
rightWSObj
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
WSRunObject
:
:
PrepareToDeleteRangePriv
(
)
failed
"
)
;
return
rv
;
}
nsresult
WSRunObject
:
:
PrepareToDeleteNode
(
HTMLEditor
&
aHTMLEditor
nsIContent
*
aContent
)
{
if
(
NS_WARN_IF
(
!
aContent
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
EditorRawDOMPoint
atContent
(
aContent
)
;
if
(
!
atContent
.
IsSet
(
)
)
{
NS_WARNING
(
"
aContent
was
an
orphan
node
"
)
;
return
NS_ERROR_INVALID_ARG
;
}
WSRunObject
leftWSObj
(
aHTMLEditor
atContent
)
;
WSRunObject
rightWSObj
(
aHTMLEditor
atContent
.
NextPoint
(
)
)
;
nsresult
rv
=
leftWSObj
.
PrepareToDeleteRangePriv
(
&
rightWSObj
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
WSRunObject
:
:
PrepareToDeleteRangePriv
(
)
failed
"
)
;
return
rv
;
}
nsresult
WSRunObject
:
:
PrepareToSplitAcrossBlocks
(
HTMLEditor
&
aHTMLEditor
nsCOMPtr
<
nsINode
>
*
aSplitNode
int32_t
*
aSplitOffset
)
{
if
(
NS_WARN_IF
(
!
aSplitNode
)
|
|
NS_WARN_IF
(
!
*
aSplitNode
)
|
|
NS_WARN_IF
(
!
aSplitOffset
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoTrackDOMPoint
tracker
(
aHTMLEditor
.
RangeUpdaterRef
(
)
aSplitNode
aSplitOffset
)
;
WSRunObject
wsObj
(
aHTMLEditor
MOZ_KnownLive
(
*
aSplitNode
)
*
aSplitOffset
)
;
nsresult
rv
=
wsObj
.
PrepareToSplitAcrossBlocksPriv
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
WSRunObject
:
:
PrepareToSplitAcrossBlocksPriv
(
)
failed
"
)
;
return
rv
;
}
already_AddRefed
<
Element
>
WSRunObject
:
:
InsertBreak
(
Selection
&
aSelection
const
EditorDOMPoint
&
aPointToInsert
nsIEditor
:
:
EDirection
aSelect
)
{
if
(
NS_WARN_IF
(
!
aPointToInsert
.
IsSet
(
)
)
)
{
return
nullptr
;
}
const
WSFragment
*
beforeRun
=
FindNearestFragment
(
aPointToInsert
false
)
;
const
WSFragment
*
afterRun
=
FindNearestFragment
(
aPointToInsert
true
)
;
EditorDOMPoint
pointToInsert
(
aPointToInsert
)
;
{
AutoTrackDOMPoint
tracker
(
mHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToInsert
)
;
if
(
!
afterRun
|
|
afterRun
-
>
IsEndOfHardLine
(
)
)
{
}
else
if
(
afterRun
-
>
IsStartOfHardLine
(
)
)
{
nsresult
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
DeleteTextAndTextNodesWithTransaction
(
pointToInsert
afterRun
-
>
EndPoint
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
nullptr
;
}
}
else
if
(
afterRun
-
>
IsVisibleAndMiddleOfHardLine
(
)
)
{
EditorDOMPointInText
atNextCharOfInsertionPoint
=
GetInclusiveNextEditableCharPoint
(
pointToInsert
)
;
if
(
atNextCharOfInsertionPoint
.
IsSet
(
)
&
&
!
atNextCharOfInsertionPoint
.
IsEndOfContainer
(
)
&
&
atNextCharOfInsertionPoint
.
IsCharASCIISpace
(
)
)
{
EditorDOMPointInText
atPreviousCharOfNextCharOfInsertionPoint
=
GetPreviousEditableCharPoint
(
atNextCharOfInsertionPoint
)
;
if
(
!
atPreviousCharOfNextCharOfInsertionPoint
.
IsSet
(
)
|
|
atPreviousCharOfNextCharOfInsertionPoint
.
IsEndOfContainer
(
)
|
|
!
atPreviousCharOfNextCharOfInsertionPoint
.
IsCharASCIISpace
(
)
)
{
EditorDOMPointInText
endOfCollapsibleASCIIWhiteSpaces
=
GetEndOfCollapsibleASCIIWhiteSpaces
(
atNextCharOfInsertionPoint
)
;
nsresult
rv
=
ReplaceASCIIWhiteSpacesWithOneNBSP
(
atNextCharOfInsertionPoint
endOfCollapsibleASCIIWhiteSpaces
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WSRunObject
:
:
ReplaceASCIIWhiteSpacesWithOneNBSP
(
)
failed
"
)
;
return
nullptr
;
}
}
}
}
if
(
!
beforeRun
|
|
beforeRun
-
>
IsStartOfHardLine
(
)
)
{
}
else
if
(
beforeRun
-
>
IsEndOfHardLine
(
)
)
{
nsresult
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
DeleteTextAndTextNodesWithTransaction
(
beforeRun
-
>
StartPoint
(
)
pointToInsert
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WSRunObject
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
nullptr
;
}
}
else
if
(
beforeRun
-
>
IsVisibleAndMiddleOfHardLine
(
)
)
{
nsresult
rv
=
MaybeReplacePreviousNBSPWithASCIIWhiteSpace
(
*
beforeRun
pointToInsert
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WSRunObject
:
:
MaybeReplacePreviousNBSPWithASCIIWhiteSpace
(
)
"
"
failed
"
)
;
return
nullptr
;
}
}
}
RefPtr
<
Element
>
newBRElement
=
MOZ_KnownLive
(
mHTMLEditor
)
.
InsertBRElementWithTransaction
(
pointToInsert
aSelect
)
;
NS_WARNING_ASSERTION
(
newBRElement
"
HTMLEditor
:
:
InsertBRElementWithTransaction
(
)
failed
"
)
;
return
newBRElement
.
forget
(
)
;
}
nsresult
WSRunObject
:
:
InsertText
(
Document
&
aDocument
const
nsAString
&
aStringToInsert
EditorRawDOMPoint
*
aPointAfterInsertedString
)
{
if
(
aStringToInsert
.
IsEmpty
(
)
)
{
if
(
aPointAfterInsertedString
)
{
*
aPointAfterInsertedString
=
mScanStartPoint
;
}
return
NS_OK
;
}
const
WSFragment
*
beforeRun
=
FindNearestFragment
(
mScanStartPoint
false
)
;
WSRunObject
afterRunObject
(
MOZ_KnownLive
(
mHTMLEditor
)
mScanEndPoint
)
;
const
WSFragment
*
afterRun
=
afterRunObject
.
FindNearestFragment
(
mScanEndPoint
true
)
;
EditorDOMPoint
pointToInsert
(
mScanStartPoint
)
;
nsAutoString
theString
(
aStringToInsert
)
;
{
AutoTrackDOMPoint
tracker
(
mHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToInsert
)
;
if
(
!
afterRun
|
|
afterRun
-
>
IsEndOfHardLine
(
)
)
{
}
else
if
(
afterRun
-
>
IsStartOfHardLine
(
)
)
{
nsresult
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
DeleteTextAndTextNodesWithTransaction
(
pointToInsert
afterRun
-
>
EndPoint
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
rv
;
}
}
else
if
(
afterRun
-
>
IsVisibleAndMiddleOfHardLine
(
)
)
{
nsresult
rv
=
MaybeReplaceInclusiveNextNBSPWithASCIIWhiteSpace
(
*
afterRun
pointToInsert
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WSRunObject
:
:
MaybeReplaceInclusiveNextNBSPWithASCIIWhiteSpace
(
)
"
"
failed
"
)
;
return
rv
;
}
}
if
(
!
beforeRun
|
|
beforeRun
-
>
IsStartOfHardLine
(
)
)
{
}
else
if
(
beforeRun
-
>
IsEndOfHardLine
(
)
)
{
nsresult
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
DeleteTextAndTextNodesWithTransaction
(
beforeRun
-
>
StartPoint
(
)
pointToInsert
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
rv
;
}
}
else
if
(
beforeRun
-
>
IsVisibleAndMiddleOfHardLine
(
)
)
{
nsresult
rv
=
MaybeReplacePreviousNBSPWithASCIIWhiteSpace
(
*
beforeRun
pointToInsert
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WSRunObject
:
:
MaybeReplacePreviousNBSPWithASCIIWhiteSpace
(
)
"
"
failed
"
)
;
return
rv
;
}
}
}
if
(
nsCRT
:
:
IsAsciiSpace
(
theString
[
0
]
)
)
{
if
(
beforeRun
)
{
if
(
beforeRun
-
>
IsStartOfHardLine
(
)
)
{
theString
.
SetCharAt
(
kNBSP
0
)
;
}
else
if
(
beforeRun
-
>
IsVisible
(
)
)
{
EditorDOMPointInText
atPreviousChar
=
GetPreviousEditableCharPoint
(
pointToInsert
)
;
if
(
atPreviousChar
.
IsSet
(
)
&
&
!
atPreviousChar
.
IsEndOfContainer
(
)
&
&
atPreviousChar
.
IsCharASCIISpace
(
)
)
{
theString
.
SetCharAt
(
kNBSP
0
)
;
}
}
}
else
if
(
StartsFromHardLineBreak
(
)
)
{
theString
.
SetCharAt
(
kNBSP
0
)
;
}
}
uint32_t
lastCharIndex
=
theString
.
Length
(
)
-
1
;
if
(
nsCRT
:
:
IsAsciiSpace
(
theString
[
lastCharIndex
]
)
)
{
if
(
afterRun
)
{
if
(
afterRun
-
>
IsEndOfHardLine
(
)
)
{
theString
.
SetCharAt
(
kNBSP
lastCharIndex
)
;
}
else
if
(
afterRun
-
>
IsVisible
(
)
)
{
EditorDOMPointInText
atNextChar
=
GetInclusiveNextEditableCharPoint
(
pointToInsert
)
;
if
(
atNextChar
.
IsSet
(
)
&
&
!
atNextChar
.
IsEndOfContainer
(
)
&
&
atNextChar
.
IsCharASCIISpace
(
)
)
{
theString
.
SetCharAt
(
kNBSP
lastCharIndex
)
;
}
}
}
else
if
(
afterRunObject
.
EndsByBlockBoundary
(
)
)
{
theString
.
SetCharAt
(
kNBSP
lastCharIndex
)
;
}
}
bool
prevWS
=
false
;
for
(
uint32_t
i
=
0
;
i
<
=
lastCharIndex
;
i
+
+
)
{
if
(
nsCRT
:
:
IsAsciiSpace
(
theString
[
i
]
)
)
{
if
(
prevWS
)
{
theString
.
SetCharAt
(
kNBSP
i
-
1
)
;
}
else
{
prevWS
=
true
;
}
}
else
{
prevWS
=
false
;
}
}
nsresult
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
InsertTextWithTransaction
(
aDocument
theString
pointToInsert
aPointAfterInsertedString
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
return
NS_OK
;
}
NS_WARNING
(
"
HTMLEditor
:
:
InsertTextWithTransaction
(
)
failed
but
ignored
"
)
;
if
(
aPointAfterInsertedString
)
{
*
aPointAfterInsertedString
=
pointToInsert
;
}
return
NS_OK
;
}
nsresult
WSRunObject
:
:
DeleteWSBackward
(
)
{
EditorDOMPointInText
atPreviousCharOfStart
=
GetPreviousEditableCharPoint
(
mScanStartPoint
)
;
if
(
!
atPreviousCharOfStart
.
IsSet
(
)
|
|
atPreviousCharOfStart
.
IsEndOfContainer
(
)
)
{
return
NS_OK
;
}
if
(
mPRE
)
{
if
(
!
atPreviousCharOfStart
.
IsCharASCIISpace
(
)
&
&
!
atPreviousCharOfStart
.
IsCharNBSP
(
)
)
{
return
NS_OK
;
}
nsresult
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
DeleteTextAndTextNodesWithTransaction
(
atPreviousCharOfStart
atPreviousCharOfStart
.
NextPoint
(
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
rv
;
}
if
(
atPreviousCharOfStart
.
IsCharASCIISpace
(
)
)
{
EditorDOMPoint
startToDelete
=
GetFirstASCIIWhiteSpacePointCollapsedTo
(
atPreviousCharOfStart
)
;
EditorDOMPoint
endToDelete
=
GetEndOfCollapsibleASCIIWhiteSpaces
(
atPreviousCharOfStart
)
;
nsresult
rv
=
WSRunObject
:
:
PrepareToDeleteRange
(
MOZ_KnownLive
(
mHTMLEditor
)
&
startToDelete
&
endToDelete
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WSRunObject
:
:
PrepareToDeleteRange
(
)
failed
"
)
;
return
rv
;
}
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
DeleteTextAndTextNodesWithTransaction
(
startToDelete
endToDelete
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
rv
;
}
if
(
atPreviousCharOfStart
.
IsCharNBSP
(
)
)
{
EditorDOMPoint
startToDelete
(
atPreviousCharOfStart
)
;
EditorDOMPoint
endToDelete
(
startToDelete
.
NextPoint
(
)
)
;
nsresult
rv
=
WSRunObject
:
:
PrepareToDeleteRange
(
MOZ_KnownLive
(
mHTMLEditor
)
&
startToDelete
&
endToDelete
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WSRunObject
:
:
PrepareToDeleteRange
(
)
failed
"
)
;
return
rv
;
}
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
DeleteTextAndTextNodesWithTransaction
(
startToDelete
endToDelete
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
rv
;
}
return
NS_OK
;
}
nsresult
WSRunObject
:
:
DeleteWSForward
(
)
{
EditorDOMPointInText
atNextCharOfStart
=
GetInclusiveNextEditableCharPoint
(
mScanStartPoint
)
;
if
(
!
atNextCharOfStart
.
IsSet
(
)
|
|
atNextCharOfStart
.
IsEndOfContainer
(
)
)
{
return
NS_OK
;
}
if
(
mPRE
)
{
if
(
!
atNextCharOfStart
.
IsCharASCIISpace
(
)
&
&
!
atNextCharOfStart
.
IsCharNBSP
(
)
)
{
return
NS_OK
;
}
nsresult
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
DeleteTextAndTextNodesWithTransaction
(
atNextCharOfStart
atNextCharOfStart
.
NextPoint
(
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
rv
;
}
if
(
atNextCharOfStart
.
IsCharASCIISpace
(
)
)
{
EditorDOMPoint
startToDelete
=
GetFirstASCIIWhiteSpacePointCollapsedTo
(
atNextCharOfStart
)
;
EditorDOMPoint
endToDelete
=
GetEndOfCollapsibleASCIIWhiteSpaces
(
atNextCharOfStart
)
;
nsresult
rv
=
WSRunObject
:
:
PrepareToDeleteRange
(
MOZ_KnownLive
(
mHTMLEditor
)
&
startToDelete
&
endToDelete
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WSRunObject
:
:
PrepareToDeleteRange
(
)
failed
"
)
;
return
rv
;
}
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
DeleteTextAndTextNodesWithTransaction
(
startToDelete
endToDelete
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
rv
;
}
if
(
atNextCharOfStart
.
IsCharNBSP
(
)
)
{
EditorDOMPoint
startToDelete
(
atNextCharOfStart
)
;
EditorDOMPoint
endToDelete
(
startToDelete
.
NextPoint
(
)
)
;
nsresult
rv
=
WSRunObject
:
:
PrepareToDeleteRange
(
MOZ_KnownLive
(
mHTMLEditor
)
&
startToDelete
&
endToDelete
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WSRunObject
:
:
PrepareToDeleteRange
(
)
failed
"
)
;
return
rv
;
}
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
DeleteTextAndTextNodesWithTransaction
(
startToDelete
endToDelete
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
rv
;
}
return
NS_OK
;
}
template
<
typename
PT
typename
CT
>
WSScanResult
WSRunScanner
:
:
ScanPreviousVisibleNodeOrBlockBoundaryFrom
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
MOZ_ASSERT
(
aPoint
.
IsSet
(
)
)
;
const
WSFragment
*
run
=
FindNearestFragment
(
aPoint
false
)
;
for
(
;
run
;
run
=
run
-
>
mLeft
)
{
if
(
run
-
>
IsVisibleAndMiddleOfHardLine
(
)
)
{
EditorDOMPointInText
atPreviousChar
=
GetPreviousEditableCharPoint
(
aPoint
)
;
if
(
atPreviousChar
.
IsSet
(
)
&
&
!
atPreviousChar
.
IsContainerEmpty
(
)
)
{
MOZ_ASSERT
(
!
atPreviousChar
.
IsEndOfContainer
(
)
)
;
return
WSScanResult
(
atPreviousChar
.
NextPoint
(
)
atPreviousChar
.
IsCharASCIISpace
(
)
|
|
atPreviousChar
.
IsCharNBSP
(
)
?
WSType
:
:
NormalWhiteSpaces
:
WSType
:
:
NormalText
)
;
}
}
}
if
(
mStartReasonContent
!
=
mStartNode
)
{
return
WSScanResult
(
mStartReasonContent
mStartReason
)
;
}
return
WSScanResult
(
EditorDOMPoint
(
mStartReasonContent
mStartOffset
)
mStartReason
)
;
}
template
<
typename
PT
typename
CT
>
WSScanResult
WSRunScanner
:
:
ScanNextVisibleNodeOrBlockBoundaryFrom
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
MOZ_ASSERT
(
aPoint
.
IsSet
(
)
)
;
const
WSFragment
*
run
=
FindNearestFragment
(
aPoint
true
)
;
for
(
;
run
;
run
=
run
-
>
mRight
)
{
if
(
run
-
>
IsVisibleAndMiddleOfHardLine
(
)
)
{
EditorDOMPointInText
atNextChar
=
GetInclusiveNextEditableCharPoint
(
aPoint
)
;
if
(
atNextChar
.
IsSet
(
)
&
&
!
atNextChar
.
IsContainerEmpty
(
)
)
{
return
WSScanResult
(
atNextChar
!
atNextChar
.
IsEndOfContainer
(
)
&
&
(
atNextChar
.
IsCharASCIISpace
(
)
|
|
atNextChar
.
IsCharNBSP
(
)
)
?
WSType
:
:
NormalWhiteSpaces
:
WSType
:
:
NormalText
)
;
}
}
}
if
(
mEndReasonContent
!
=
mEndNode
)
{
return
WSScanResult
(
mEndReasonContent
mEndReason
)
;
}
return
WSScanResult
(
EditorDOMPoint
(
mEndReasonContent
mEndOffset
)
mEndReason
)
;
}
nsresult
WSRunObject
:
:
AdjustWhiteSpace
(
)
{
if
(
!
mLastNBSPNode
)
{
return
NS_OK
;
}
for
(
WSFragment
*
run
=
mStartRun
;
run
;
run
=
run
-
>
mRight
)
{
if
(
!
run
-
>
IsVisibleAndMiddleOfHardLine
(
)
)
{
continue
;
}
nsresult
rv
=
NormalizeWhiteSpacesAtEndOf
(
*
run
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WSRunObject
:
:
NormalizeWhiteSpacesAtEndOf
(
)
failed
"
)
;
return
rv
;
}
}
return
NS_OK
;
}
nsIContent
*
WSRunScanner
:
:
GetEditableBlockParentOrTopmotEditableInlineContent
(
nsIContent
*
aContent
)
const
{
if
(
NS_WARN_IF
(
!
aContent
)
)
{
return
nullptr
;
}
NS_ASSERTION
(
EditorUtils
:
:
IsEditableContent
(
*
aContent
EditorType
:
:
HTML
)
"
Given
content
is
not
editable
"
)
;
nsIContent
*
editableBlockParentOrTopmotEditableInlineContent
=
nullptr
;
for
(
nsIContent
*
content
:
aContent
-
>
InclusiveAncestorsOfType
<
nsIContent
>
(
)
)
{
if
(
!
EditorUtils
:
:
IsEditableContent
(
*
content
EditorType
:
:
HTML
)
)
{
break
;
}
editableBlockParentOrTopmotEditableInlineContent
=
content
;
if
(
HTMLEditUtils
:
:
IsBlockElement
(
*
editableBlockParentOrTopmotEditableInlineContent
)
)
{
break
;
}
}
return
editableBlockParentOrTopmotEditableInlineContent
;
}
nsresult
WSRunScanner
:
:
GetWSNodes
(
)
{
EditorDOMPoint
start
(
mScanStartPoint
)
end
(
mScanStartPoint
)
;
nsIContent
*
scanStartContent
=
mScanStartPoint
.
GetContainerAsContent
(
)
;
if
(
NS_WARN_IF
(
!
scanStartContent
)
)
{
return
NS_ERROR_FAILURE
;
}
nsIContent
*
editableBlockParentOrTopmotEditableInlineContent
=
GetEditableBlockParentOrTopmotEditableInlineContent
(
scanStartContent
)
;
if
(
NS_WARN_IF
(
!
editableBlockParentOrTopmotEditableInlineContent
)
)
{
editableBlockParentOrTopmotEditableInlineContent
=
scanStartContent
;
}
InitializeRangeStart
(
mScanStartPoint
*
editableBlockParentOrTopmotEditableInlineContent
)
;
InitializeRangeEnd
(
mScanStartPoint
*
editableBlockParentOrTopmotEditableInlineContent
)
;
return
NS_OK
;
}
bool
WSRunScanner
:
:
InitializeRangeStartWithTextNode
(
const
EditorDOMPointInText
&
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
const
nsTextFragment
&
textFragment
=
aPoint
.
ContainerAsText
(
)
-
>
TextFragment
(
)
;
for
(
uint32_t
i
=
std
:
:
min
(
aPoint
.
Offset
(
)
textFragment
.
GetLength
(
)
)
;
i
;
i
-
-
)
{
char16_t
ch
=
textFragment
.
CharAt
(
i
-
1
)
;
if
(
nsCRT
:
:
IsAsciiSpace
(
ch
)
)
{
continue
;
}
if
(
ch
=
=
HTMLEditUtils
:
:
kNBSP
)
{
mFirstNBSPNode
=
aPoint
.
ContainerAsText
(
)
;
mFirstNBSPOffset
=
i
-
1
;
if
(
!
mLastNBSPNode
)
{
mLastNBSPNode
=
aPoint
.
ContainerAsText
(
)
;
mLastNBSPOffset
=
i
-
1
;
}
continue
;
}
mStartNode
=
aPoint
.
ContainerAsText
(
)
;
mStartOffset
=
i
;
mStartReason
=
WSType
:
:
NormalText
;
mStartReasonContent
=
aPoint
.
ContainerAsText
(
)
;
return
true
;
}
return
false
;
}
void
WSRunScanner
:
:
InitializeRangeStart
(
const
EditorDOMPoint
&
aPoint
const
nsIContent
&
aEditableBlockParentOrTopmostEditableInlineContent
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
EditorDOMPoint
start
(
aPoint
)
;
if
(
aPoint
.
IsInTextNode
(
)
)
{
if
(
InitializeRangeStartWithTextNode
(
EditorDOMPointInText
(
aPoint
.
ContainerAsText
(
)
aPoint
.
Offset
(
)
)
)
)
{
return
;
}
start
.
Set
(
aPoint
.
ContainerAsText
(
)
0
)
;
}
while
(
!
mStartNode
)
{
nsIContent
*
previousLeafContentOrBlock
=
HTMLEditUtils
:
:
GetPreviousLeafContentOrPreviousBlockElement
(
start
aEditableBlockParentOrTopmostEditableInlineContent
mEditingHost
)
;
if
(
!
previousLeafContentOrBlock
)
{
mStartNode
=
start
.
GetContainer
(
)
;
mStartOffset
=
start
.
Offset
(
)
;
mStartReason
=
WSType
:
:
CurrentBlockBoundary
;
mStartReasonContent
=
const_cast
<
nsIContent
*
>
(
&
aEditableBlockParentOrTopmostEditableInlineContent
)
;
return
;
}
if
(
HTMLEditUtils
:
:
IsBlockElement
(
*
previousLeafContentOrBlock
)
)
{
mStartNode
=
start
.
GetContainer
(
)
;
mStartOffset
=
start
.
Offset
(
)
;
mStartReason
=
WSType
:
:
OtherBlockBoundary
;
mStartReasonContent
=
previousLeafContentOrBlock
;
}
else
if
(
previousLeafContentOrBlock
-
>
IsText
(
)
&
&
previousLeafContentOrBlock
-
>
IsEditable
(
)
)
{
if
(
!
previousLeafContentOrBlock
-
>
AsText
(
)
-
>
TextFragment
(
)
.
GetLength
(
)
)
{
start
.
Set
(
previousLeafContentOrBlock
-
>
AsText
(
)
0
)
;
continue
;
}
if
(
InitializeRangeStartWithTextNode
(
EditorDOMPointInText
:
:
AtEndOf
(
*
previousLeafContentOrBlock
-
>
AsText
(
)
)
)
)
{
return
;
}
start
.
Set
(
previousLeafContentOrBlock
-
>
AsText
(
)
0
)
;
}
else
{
mStartNode
=
start
.
GetContainer
(
)
;
mStartOffset
=
start
.
Offset
(
)
;
if
(
previousLeafContentOrBlock
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
)
{
mStartReason
=
WSType
:
:
BRElement
;
}
else
{
mStartReason
=
WSType
:
:
SpecialContent
;
}
mStartReasonContent
=
previousLeafContentOrBlock
;
}
}
}
bool
WSRunScanner
:
:
InitializeRangeEndWithTextNode
(
const
EditorDOMPointInText
&
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
const
nsTextFragment
&
textFragment
=
aPoint
.
ContainerAsText
(
)
-
>
TextFragment
(
)
;
for
(
uint32_t
i
=
aPoint
.
Offset
(
)
;
i
<
textFragment
.
GetLength
(
)
;
i
+
+
)
{
char16_t
ch
=
textFragment
.
CharAt
(
i
)
;
if
(
nsCRT
:
:
IsAsciiSpace
(
ch
)
)
{
continue
;
}
if
(
ch
=
=
HTMLEditUtils
:
:
kNBSP
)
{
mLastNBSPNode
=
aPoint
.
ContainerAsText
(
)
;
mLastNBSPOffset
=
i
;
if
(
!
mFirstNBSPNode
)
{
mFirstNBSPNode
=
aPoint
.
ContainerAsText
(
)
;
mFirstNBSPOffset
=
i
;
}
continue
;
}
mEndNode
=
aPoint
.
ContainerAsText
(
)
;
mEndOffset
=
i
;
mEndReason
=
WSType
:
:
NormalText
;
mEndReasonContent
=
aPoint
.
ContainerAsText
(
)
;
return
true
;
}
return
false
;
}
void
WSRunScanner
:
:
InitializeRangeEnd
(
const
EditorDOMPoint
&
aPoint
const
nsIContent
&
aEditableBlockParentOrTopmostEditableInlineContent
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
EditorDOMPoint
end
(
aPoint
)
;
if
(
aPoint
.
IsInTextNode
(
)
)
{
if
(
InitializeRangeEndWithTextNode
(
EditorDOMPointInText
(
aPoint
.
ContainerAsText
(
)
aPoint
.
Offset
(
)
)
)
)
{
return
;
}
end
.
SetToEndOf
(
aPoint
.
ContainerAsText
(
)
)
;
}
while
(
!
mEndNode
)
{
nsIContent
*
nextLeafContentOrBlock
=
HTMLEditUtils
:
:
GetNextLeafContentOrNextBlockElement
(
end
aEditableBlockParentOrTopmostEditableInlineContent
mEditingHost
)
;
if
(
!
nextLeafContentOrBlock
)
{
mEndNode
=
end
.
GetContainer
(
)
;
mEndOffset
=
end
.
Offset
(
)
;
mEndReason
=
WSType
:
:
CurrentBlockBoundary
;
mEndReasonContent
=
const_cast
<
nsIContent
*
>
(
&
aEditableBlockParentOrTopmostEditableInlineContent
)
;
return
;
}
if
(
HTMLEditUtils
:
:
IsBlockElement
(
*
nextLeafContentOrBlock
)
)
{
mEndNode
=
end
.
GetContainer
(
)
;
mEndOffset
=
end
.
Offset
(
)
;
mEndReason
=
WSType
:
:
OtherBlockBoundary
;
mEndReasonContent
=
nextLeafContentOrBlock
;
}
else
if
(
nextLeafContentOrBlock
-
>
IsText
(
)
&
&
nextLeafContentOrBlock
-
>
IsEditable
(
)
)
{
if
(
!
nextLeafContentOrBlock
-
>
AsText
(
)
-
>
TextFragment
(
)
.
GetLength
(
)
)
{
end
.
Set
(
nextLeafContentOrBlock
-
>
AsText
(
)
0
)
;
continue
;
}
if
(
InitializeRangeEndWithTextNode
(
EditorDOMPointInText
(
nextLeafContentOrBlock
-
>
AsText
(
)
0
)
)
)
{
return
;
}
end
.
SetToEndOf
(
nextLeafContentOrBlock
-
>
AsText
(
)
)
;
}
else
{
mEndNode
=
end
.
GetContainer
(
)
;
mEndOffset
=
end
.
Offset
(
)
;
if
(
nextLeafContentOrBlock
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
)
{
mEndReason
=
WSType
:
:
BRElement
;
}
else
{
mEndReason
=
WSType
:
:
SpecialContent
;
}
mEndReasonContent
=
nextLeafContentOrBlock
;
}
}
}
void
WSRunScanner
:
:
GetRuns
(
)
{
ClearRuns
(
)
;
mPRE
=
mScanStartPoint
.
IsInContentNode
(
)
&
&
EditorUtils
:
:
IsContentPreformatted
(
*
mScanStartPoint
.
ContainerAsContent
(
)
)
;
if
(
mPRE
|
|
(
(
StartsFromNormalText
(
)
|
|
StartsFromSpecialContent
(
)
)
&
&
(
EndsByNormalText
(
)
|
|
EndsBySpecialContent
(
)
|
|
EndsByBRElement
(
)
)
)
)
{
InitializeWithSingleFragment
(
WSFragment
:
:
Visible
:
:
Yes
WSFragment
:
:
StartOfHardLine
:
:
No
WSFragment
:
:
EndOfHardLine
:
:
No
)
;
return
;
}
if
(
!
mFirstNBSPNode
&
&
!
mLastNBSPNode
&
&
(
StartsFromHardLineBreak
(
)
|
|
EndsByBlockBoundary
(
)
)
)
{
InitializeWithSingleFragment
(
WSFragment
:
:
Visible
:
:
No
StartsFromHardLineBreak
(
)
?
WSFragment
:
:
StartOfHardLine
:
:
Yes
:
WSFragment
:
:
StartOfHardLine
:
:
No
EndsByBlockBoundary
(
)
?
WSFragment
:
:
EndOfHardLine
:
:
Yes
:
WSFragment
:
:
EndOfHardLine
:
:
No
)
;
return
;
}
mStartRun
=
new
WSFragment
(
)
;
mStartRun
-
>
mStartNode
=
mStartNode
;
mStartRun
-
>
mStartOffset
=
mStartOffset
;
if
(
StartsFromHardLineBreak
(
)
)
{
mStartRun
-
>
MarkAsStartOfHardLine
(
)
;
mStartRun
-
>
mEndNode
=
mFirstNBSPNode
;
mStartRun
-
>
mEndOffset
=
mFirstNBSPOffset
;
mStartRun
-
>
SetStartFrom
(
mStartReason
)
;
mStartRun
-
>
SetEndByNormalWiteSpaces
(
)
;
WSFragment
*
normalRun
=
new
WSFragment
(
)
;
mStartRun
-
>
mRight
=
normalRun
;
normalRun
-
>
MarkAsVisible
(
)
;
normalRun
-
>
mStartNode
=
mFirstNBSPNode
;
normalRun
-
>
mStartOffset
=
mFirstNBSPOffset
;
normalRun
-
>
SetStartFromLeadingWhiteSpaces
(
)
;
normalRun
-
>
mLeft
=
mStartRun
;
if
(
!
EndsByBlockBoundary
(
)
)
{
normalRun
-
>
SetEndBy
(
mEndReason
)
;
normalRun
-
>
mEndNode
=
mEndNode
;
normalRun
-
>
mEndOffset
=
mEndOffset
;
mEndRun
=
normalRun
;
}
else
{
if
(
mLastNBSPNode
=
=
mEndNode
&
&
mLastNBSPOffset
=
=
mEndOffset
-
1
)
{
normalRun
-
>
SetEndBy
(
mEndReason
)
;
normalRun
-
>
mEndNode
=
mEndNode
;
normalRun
-
>
mEndOffset
=
mEndOffset
;
mEndRun
=
normalRun
;
}
else
{
normalRun
-
>
mEndNode
=
mLastNBSPNode
;
normalRun
-
>
mEndOffset
=
mLastNBSPOffset
+
1
;
normalRun
-
>
SetEndByTrailingWhiteSpaces
(
)
;
WSFragment
*
lastRun
=
new
WSFragment
(
)
;
lastRun
-
>
MarkAsEndOfHardLine
(
)
;
lastRun
-
>
mStartNode
=
mLastNBSPNode
;
lastRun
-
>
mStartOffset
=
mLastNBSPOffset
+
1
;
lastRun
-
>
mEndNode
=
mEndNode
;
lastRun
-
>
mEndOffset
=
mEndOffset
;
lastRun
-
>
SetStartFromNormalWhiteSpaces
(
)
;
lastRun
-
>
mLeft
=
normalRun
;
lastRun
-
>
SetEndBy
(
mEndReason
)
;
mEndRun
=
lastRun
;
normalRun
-
>
mRight
=
lastRun
;
}
}
}
else
{
MOZ_ASSERT
(
!
StartsFromHardLineBreak
(
)
)
;
mStartRun
-
>
MarkAsVisible
(
)
;
mStartRun
-
>
mEndNode
=
mLastNBSPNode
;
mStartRun
-
>
mEndOffset
=
mLastNBSPOffset
+
1
;
mStartRun
-
>
SetStartFrom
(
mStartReason
)
;
if
(
mLastNBSPNode
=
=
mEndNode
&
&
mLastNBSPOffset
=
=
(
mEndOffset
-
1
)
)
{
mStartRun
-
>
SetEndBy
(
mEndReason
)
;
mStartRun
-
>
mEndNode
=
mEndNode
;
mStartRun
-
>
mEndOffset
=
mEndOffset
;
mEndRun
=
mStartRun
;
}
else
{
WSFragment
*
lastRun
=
new
WSFragment
(
)
;
lastRun
-
>
MarkAsEndOfHardLine
(
)
;
lastRun
-
>
mStartNode
=
mLastNBSPNode
;
lastRun
-
>
mStartOffset
=
mLastNBSPOffset
+
1
;
lastRun
-
>
SetStartFromNormalWhiteSpaces
(
)
;
lastRun
-
>
mLeft
=
mStartRun
;
lastRun
-
>
SetEndBy
(
mEndReason
)
;
mEndRun
=
lastRun
;
mStartRun
-
>
mRight
=
lastRun
;
mStartRun
-
>
SetEndByTrailingWhiteSpaces
(
)
;
}
}
}
void
WSRunScanner
:
:
ClearRuns
(
)
{
WSFragment
*
tmp
*
run
;
run
=
mStartRun
;
while
(
run
)
{
tmp
=
run
-
>
mRight
;
delete
run
;
run
=
tmp
;
}
mStartRun
=
0
;
mEndRun
=
0
;
}
void
WSRunScanner
:
:
InitializeWithSingleFragment
(
WSFragment
:
:
Visible
aIsVisible
WSFragment
:
:
StartOfHardLine
aIsStartOfHardLine
WSFragment
:
:
EndOfHardLine
aIsEndOfHardLine
)
{
MOZ_ASSERT
(
!
mStartRun
)
;
MOZ_ASSERT
(
!
mEndRun
)
;
mStartRun
=
new
WSFragment
(
)
;
mStartRun
-
>
mStartNode
=
mStartNode
;
mStartRun
-
>
mStartOffset
=
mStartOffset
;
if
(
aIsVisible
=
=
WSFragment
:
:
Visible
:
:
Yes
)
{
mStartRun
-
>
MarkAsVisible
(
)
;
}
if
(
aIsStartOfHardLine
=
=
WSFragment
:
:
StartOfHardLine
:
:
Yes
)
{
mStartRun
-
>
MarkAsStartOfHardLine
(
)
;
}
if
(
aIsEndOfHardLine
=
=
WSFragment
:
:
EndOfHardLine
:
:
Yes
)
{
mStartRun
-
>
MarkAsEndOfHardLine
(
)
;
}
mStartRun
-
>
mEndNode
=
mEndNode
;
mStartRun
-
>
mEndOffset
=
mEndOffset
;
mStartRun
-
>
SetStartFrom
(
mStartReason
)
;
mStartRun
-
>
SetEndBy
(
mEndReason
)
;
mEndRun
=
mStartRun
;
}
nsresult
WSRunObject
:
:
PrepareToDeleteRangePriv
(
WSRunObject
*
aEndObject
)
{
if
(
NS_WARN_IF
(
!
aEndObject
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
const
WSFragment
*
beforeRun
=
FindNearestFragment
(
mScanStartPoint
false
)
;
const
WSFragment
*
afterRun
=
aEndObject
-
>
FindNearestFragment
(
aEndObject
-
>
mScanStartPoint
true
)
;
if
(
!
beforeRun
&
&
!
afterRun
)
{
return
NS_OK
;
}
if
(
afterRun
)
{
if
(
afterRun
-
>
IsStartOfHardLine
(
)
)
{
AutoEditorDOMPointChildInvalidator
forgetChild
(
mScanStartPoint
)
;
nsresult
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
DeleteTextAndTextNodesWithTransaction
(
aEndObject
-
>
mScanStartPoint
afterRun
-
>
EndPoint
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
rv
;
}
}
else
if
(
afterRun
-
>
IsVisibleAndMiddleOfHardLine
(
)
&
&
!
aEndObject
-
>
mPRE
)
{
if
(
(
beforeRun
&
&
beforeRun
-
>
IsStartOfHardLine
(
)
)
|
|
(
!
beforeRun
&
&
StartsFromHardLineBreak
(
)
)
)
{
EditorDOMPointInText
nextCharOfStartOfEnd
=
aEndObject
-
>
GetInclusiveNextEditableCharPoint
(
aEndObject
-
>
mScanStartPoint
)
;
if
(
nextCharOfStartOfEnd
.
IsSet
(
)
&
&
!
nextCharOfStartOfEnd
.
IsEndOfContainer
(
)
&
&
nextCharOfStartOfEnd
.
IsCharASCIISpace
(
)
)
{
AutoEditorDOMPointChildInvalidator
forgetChild
(
mScanStartPoint
)
;
if
(
nextCharOfStartOfEnd
.
IsStartOfContainer
(
)
|
|
nextCharOfStartOfEnd
.
IsPreviousCharASCIISpace
(
)
)
{
nextCharOfStartOfEnd
=
GetFirstASCIIWhiteSpacePointCollapsedTo
(
nextCharOfStartOfEnd
)
;
}
EditorDOMPointInText
endOfCollapsibleASCIIWhiteSpaces
=
GetEndOfCollapsibleASCIIWhiteSpaces
(
nextCharOfStartOfEnd
)
;
nsresult
rv
=
aEndObject
-
>
ReplaceASCIIWhiteSpacesWithOneNBSP
(
nextCharOfStartOfEnd
endOfCollapsibleASCIIWhiteSpaces
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WSRunObject
:
:
ReplaceASCIIWhiteSpacesWithOneNBSP
(
)
failed
"
)
;
return
rv
;
}
}
}
}
}
if
(
!
beforeRun
)
{
return
NS_OK
;
}
if
(
beforeRun
-
>
IsEndOfHardLine
(
)
)
{
nsresult
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
DeleteTextAndTextNodesWithTransaction
(
beforeRun
-
>
StartPoint
(
)
mScanStartPoint
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
rv
;
}
if
(
beforeRun
-
>
IsVisibleAndMiddleOfHardLine
(
)
&
&
!
mPRE
)
{
if
(
(
afterRun
&
&
(
afterRun
-
>
IsEndOfHardLine
(
)
|
|
afterRun
-
>
IsVisible
(
)
)
)
|
|
(
!
afterRun
&
&
aEndObject
-
>
EndsByBlockBoundary
(
)
)
)
{
EditorDOMPointInText
atPreviousCharOfStart
=
GetPreviousEditableCharPoint
(
mScanStartPoint
)
;
if
(
atPreviousCharOfStart
.
IsSet
(
)
&
&
!
atPreviousCharOfStart
.
IsEndOfContainer
(
)
&
&
atPreviousCharOfStart
.
IsCharASCIISpace
(
)
)
{
if
(
atPreviousCharOfStart
.
IsStartOfContainer
(
)
|
|
atPreviousCharOfStart
.
IsPreviousCharASCIISpace
(
)
)
{
atPreviousCharOfStart
=
GetFirstASCIIWhiteSpacePointCollapsedTo
(
atPreviousCharOfStart
)
;
}
EditorDOMPointInText
endOfCollapsibleASCIIWhiteSpaces
=
GetEndOfCollapsibleASCIIWhiteSpaces
(
atPreviousCharOfStart
)
;
nsresult
rv
=
ReplaceASCIIWhiteSpacesWithOneNBSP
(
atPreviousCharOfStart
endOfCollapsibleASCIIWhiteSpaces
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WSRunObject
:
:
ReplaceASCIIWhiteSpacesWithOneNBSP
(
)
failed
"
)
;
return
rv
;
}
}
}
}
return
NS_OK
;
}
nsresult
WSRunObject
:
:
PrepareToSplitAcrossBlocksPriv
(
)
{
const
WSFragment
*
beforeRun
=
FindNearestFragment
(
mScanStartPoint
false
)
;
const
WSFragment
*
afterRun
=
FindNearestFragment
(
mScanStartPoint
true
)
;
if
(
afterRun
&
&
afterRun
-
>
IsVisibleAndMiddleOfHardLine
(
)
)
{
EditorDOMPointInText
atNextCharOfStart
=
GetInclusiveNextEditableCharPoint
(
mScanStartPoint
)
;
if
(
atNextCharOfStart
.
IsSet
(
)
&
&
!
atNextCharOfStart
.
IsEndOfContainer
(
)
&
&
atNextCharOfStart
.
IsCharASCIISpace
(
)
)
{
AutoEditorDOMPointChildInvalidator
forgetChild
(
mScanStartPoint
)
;
if
(
atNextCharOfStart
.
IsStartOfContainer
(
)
|
|
atNextCharOfStart
.
IsPreviousCharASCIISpace
(
)
)
{
atNextCharOfStart
=
GetFirstASCIIWhiteSpacePointCollapsedTo
(
atNextCharOfStart
)
;
}
EditorDOMPointInText
endOfCollapsibleASCIIWhiteSpaces
=
GetEndOfCollapsibleASCIIWhiteSpaces
(
atNextCharOfStart
)
;
nsresult
rv
=
ReplaceASCIIWhiteSpacesWithOneNBSP
(
atNextCharOfStart
endOfCollapsibleASCIIWhiteSpaces
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WSRunObject
:
:
ReplaceASCIIWhiteSpacesWithOneNBSP
(
)
failed
"
)
;
return
rv
;
}
}
}
if
(
beforeRun
&
&
beforeRun
-
>
IsVisibleAndMiddleOfHardLine
(
)
)
{
EditorDOMPointInText
atPreviousCharOfStart
=
GetPreviousEditableCharPoint
(
mScanStartPoint
)
;
if
(
atPreviousCharOfStart
.
IsSet
(
)
&
&
!
atPreviousCharOfStart
.
IsEndOfContainer
(
)
&
&
atPreviousCharOfStart
.
IsCharASCIISpace
(
)
)
{
if
(
atPreviousCharOfStart
.
IsStartOfContainer
(
)
|
|
atPreviousCharOfStart
.
IsPreviousCharASCIISpace
(
)
)
{
atPreviousCharOfStart
=
GetFirstASCIIWhiteSpacePointCollapsedTo
(
atPreviousCharOfStart
)
;
}
EditorDOMPointInText
endOfCollapsibleASCIIWhiteSpaces
=
GetEndOfCollapsibleASCIIWhiteSpaces
(
atPreviousCharOfStart
)
;
nsresult
rv
=
ReplaceASCIIWhiteSpacesWithOneNBSP
(
atPreviousCharOfStart
endOfCollapsibleASCIIWhiteSpaces
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WSRunObject
:
:
ReplaceASCIIWhiteSpacesWithOneNBSP
(
)
failed
"
)
;
return
rv
;
}
}
}
return
NS_OK
;
}
template
<
typename
PT
typename
CT
>
EditorDOMPointInText
WSRunScanner
:
:
GetInclusiveNextEditableCharPoint
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
if
(
NS_WARN_IF
(
!
aPoint
.
IsInContentNode
(
)
)
|
|
NS_WARN_IF
(
!
mScanStartPoint
.
IsInContentNode
(
)
)
)
{
return
EditorDOMPointInText
(
)
;
}
EditorRawDOMPoint
point
;
if
(
nsIContent
*
child
=
aPoint
.
CanContainerHaveChildren
(
)
?
aPoint
.
GetChild
(
)
:
nullptr
)
{
nsIContent
*
leafContent
=
child
-
>
HasChildren
(
)
?
HTMLEditUtils
:
:
GetFirstLeafChild
(
*
child
ChildBlockBoundary
:
:
Ignore
)
:
child
;
if
(
NS_WARN_IF
(
!
leafContent
)
)
{
return
EditorDOMPointInText
(
)
;
}
point
.
Set
(
leafContent
0
)
;
}
else
{
point
=
aPoint
;
}
if
(
point
.
IsInTextNode
(
)
&
&
point
.
GetContainer
(
)
-
>
IsEditable
(
)
&
&
!
point
.
IsEndOfContainer
(
)
)
{
return
EditorDOMPointInText
(
point
.
ContainerAsText
(
)
point
.
Offset
(
)
)
;
}
if
(
point
.
GetContainer
(
)
=
=
mEndReasonContent
)
{
return
EditorDOMPointInText
(
)
;
}
nsIContent
*
editableBlockParentOrTopmotEditableInlineContent
=
GetEditableBlockParentOrTopmotEditableInlineContent
(
mScanStartPoint
.
ContainerAsContent
(
)
)
;
if
(
NS_WARN_IF
(
!
editableBlockParentOrTopmotEditableInlineContent
)
)
{
editableBlockParentOrTopmotEditableInlineContent
=
mScanStartPoint
.
ContainerAsContent
(
)
;
}
for
(
nsIContent
*
nextContent
=
HTMLEditUtils
:
:
GetNextLeafContentOrNextBlockElement
(
*
point
.
ContainerAsContent
(
)
*
editableBlockParentOrTopmotEditableInlineContent
mEditingHost
)
;
nextContent
;
nextContent
=
HTMLEditUtils
:
:
GetNextLeafContentOrNextBlockElement
(
*
nextContent
*
editableBlockParentOrTopmotEditableInlineContent
mEditingHost
)
)
{
if
(
!
nextContent
-
>
IsText
(
)
|
|
!
nextContent
-
>
IsEditable
(
)
)
{
if
(
nextContent
=
=
mEndReasonContent
)
{
break
;
}
continue
;
}
return
EditorDOMPointInText
(
nextContent
-
>
AsText
(
)
0
)
;
}
return
EditorDOMPointInText
(
)
;
}
template
<
typename
PT
typename
CT
>
EditorDOMPointInText
WSRunScanner
:
:
GetPreviousEditableCharPoint
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
if
(
NS_WARN_IF
(
!
aPoint
.
IsInContentNode
(
)
)
|
|
NS_WARN_IF
(
!
mScanStartPoint
.
IsInContentNode
(
)
)
)
{
return
EditorDOMPointInText
(
)
;
}
EditorRawDOMPoint
point
;
if
(
nsIContent
*
previousChild
=
aPoint
.
CanContainerHaveChildren
(
)
?
aPoint
.
GetPreviousSiblingOfChild
(
)
:
nullptr
)
{
nsIContent
*
leafContent
=
previousChild
-
>
HasChildren
(
)
?
HTMLEditUtils
:
:
GetLastLeafChild
(
*
previousChild
ChildBlockBoundary
:
:
Ignore
)
:
previousChild
;
if
(
NS_WARN_IF
(
!
leafContent
)
)
{
return
EditorDOMPointInText
(
)
;
}
point
.
SetToEndOf
(
leafContent
)
;
}
else
{
point
=
aPoint
;
}
if
(
point
.
IsInTextNode
(
)
&
&
point
.
GetContainer
(
)
-
>
IsEditable
(
)
&
&
!
point
.
IsStartOfContainer
(
)
)
{
return
EditorDOMPointInText
(
point
.
ContainerAsText
(
)
point
.
Offset
(
)
-
1
)
;
}
if
(
point
.
GetContainer
(
)
=
=
mStartReasonContent
)
{
return
EditorDOMPointInText
(
)
;
}
nsIContent
*
editableBlockParentOrTopmotEditableInlineContent
=
GetEditableBlockParentOrTopmotEditableInlineContent
(
mScanStartPoint
.
ContainerAsContent
(
)
)
;
if
(
NS_WARN_IF
(
!
editableBlockParentOrTopmotEditableInlineContent
)
)
{
editableBlockParentOrTopmotEditableInlineContent
=
mScanStartPoint
.
ContainerAsContent
(
)
;
}
for
(
nsIContent
*
previousContent
=
HTMLEditUtils
:
:
GetPreviousLeafContentOrPreviousBlockElement
(
*
point
.
ContainerAsContent
(
)
*
editableBlockParentOrTopmotEditableInlineContent
mEditingHost
)
;
previousContent
;
previousContent
=
HTMLEditUtils
:
:
GetPreviousLeafContentOrPreviousBlockElement
(
*
previousContent
*
editableBlockParentOrTopmotEditableInlineContent
mEditingHost
)
)
{
if
(
!
previousContent
-
>
IsText
(
)
|
|
!
previousContent
-
>
IsEditable
(
)
)
{
if
(
previousContent
=
=
mStartReasonContent
)
{
break
;
}
continue
;
}
return
EditorDOMPointInText
(
previousContent
-
>
AsText
(
)
previousContent
-
>
AsText
(
)
-
>
TextLength
(
)
?
previousContent
-
>
AsText
(
)
-
>
TextLength
(
)
-
1
:
0
)
;
}
return
EditorDOMPointInText
(
)
;
}
EditorDOMPointInText
WSRunScanner
:
:
GetEndOfCollapsibleASCIIWhiteSpaces
(
const
EditorDOMPointInText
&
aPointAtASCIIWhiteSpace
)
const
{
MOZ_ASSERT
(
aPointAtASCIIWhiteSpace
.
IsSet
(
)
)
;
MOZ_ASSERT
(
!
aPointAtASCIIWhiteSpace
.
IsEndOfContainer
(
)
)
;
MOZ_ASSERT
(
aPointAtASCIIWhiteSpace
.
IsCharASCIISpace
(
)
)
;
if
(
!
aPointAtASCIIWhiteSpace
.
IsAtLastContent
(
)
)
{
Maybe
<
uint32_t
>
nextVisibleCharOffset
=
HTMLEditUtils
:
:
GetNextCharOffsetExceptASCIIWhiteSpaces
(
aPointAtASCIIWhiteSpace
)
;
if
(
nextVisibleCharOffset
.
isSome
(
)
)
{
return
EditorDOMPointInText
(
aPointAtASCIIWhiteSpace
.
ContainerAsText
(
)
nextVisibleCharOffset
.
value
(
)
)
;
}
}
for
(
EditorDOMPointInText
atEndOfPreviousTextNode
=
EditorDOMPointInText
:
:
AtEndOf
(
*
aPointAtASCIIWhiteSpace
.
ContainerAsText
(
)
)
;
;
)
{
EditorDOMPointInText
atStartOfNextTextNode
=
GetInclusiveNextEditableCharPoint
(
atEndOfPreviousTextNode
)
;
if
(
!
atStartOfNextTextNode
.
IsSet
(
)
)
{
return
atEndOfPreviousTextNode
;
}
if
(
atStartOfNextTextNode
.
IsContainerEmpty
(
)
)
{
atEndOfPreviousTextNode
=
atStartOfNextTextNode
;
continue
;
}
if
(
!
atStartOfNextTextNode
.
IsCharASCIISpace
(
)
)
{
return
atEndOfPreviousTextNode
;
}
Maybe
<
uint32_t
>
nextVisibleCharOffset
=
HTMLEditUtils
:
:
GetNextCharOffsetExceptASCIIWhiteSpaces
(
atStartOfNextTextNode
)
;
if
(
nextVisibleCharOffset
.
isSome
(
)
)
{
return
EditorDOMPointInText
(
atStartOfNextTextNode
.
ContainerAsText
(
)
nextVisibleCharOffset
.
value
(
)
)
;
}
atEndOfPreviousTextNode
=
EditorDOMPointInText
:
:
AtEndOf
(
*
atStartOfNextTextNode
.
ContainerAsText
(
)
)
;
}
}
EditorDOMPointInText
WSRunScanner
:
:
GetFirstASCIIWhiteSpacePointCollapsedTo
(
const
EditorDOMPointInText
&
aPointAtASCIIWhiteSpace
)
const
{
MOZ_ASSERT
(
aPointAtASCIIWhiteSpace
.
IsSet
(
)
)
;
MOZ_ASSERT
(
!
aPointAtASCIIWhiteSpace
.
IsEndOfContainer
(
)
)
;
MOZ_ASSERT
(
aPointAtASCIIWhiteSpace
.
IsCharASCIISpace
(
)
)
;
if
(
!
aPointAtASCIIWhiteSpace
.
IsStartOfContainer
(
)
)
{
uint32_t
firstASCIIWhiteSpaceOffset
=
HTMLEditUtils
:
:
GetFirstASCIIWhiteSpaceOffsetCollapsedWith
(
aPointAtASCIIWhiteSpace
)
;
if
(
firstASCIIWhiteSpaceOffset
)
{
return
EditorDOMPointInText
(
aPointAtASCIIWhiteSpace
.
ContainerAsText
(
)
firstASCIIWhiteSpaceOffset
)
;
}
}
for
(
EditorDOMPointInText
atStartOfPreviousTextNode
=
EditorDOMPointInText
(
aPointAtASCIIWhiteSpace
.
ContainerAsText
(
)
0
)
;
;
)
{
EditorDOMPointInText
atLastCharOfNextTextNode
=
GetPreviousEditableCharPoint
(
atStartOfPreviousTextNode
)
;
if
(
!
atLastCharOfNextTextNode
.
IsSet
(
)
)
{
return
atStartOfPreviousTextNode
;
}
if
(
atLastCharOfNextTextNode
.
IsContainerEmpty
(
)
)
{
atStartOfPreviousTextNode
=
atLastCharOfNextTextNode
;
continue
;
}
if
(
!
atLastCharOfNextTextNode
.
IsCharASCIISpace
(
)
)
{
return
atStartOfPreviousTextNode
;
}
uint32_t
firstASCIIWhiteSpaceOffset
=
HTMLEditUtils
:
:
GetFirstASCIIWhiteSpaceOffsetCollapsedWith
(
atLastCharOfNextTextNode
)
;
if
(
firstASCIIWhiteSpaceOffset
)
{
return
EditorDOMPointInText
(
atLastCharOfNextTextNode
.
ContainerAsText
(
)
firstASCIIWhiteSpaceOffset
)
;
}
atStartOfPreviousTextNode
=
EditorDOMPointInText
(
atLastCharOfNextTextNode
.
ContainerAsText
(
)
0
)
;
}
}
nsresult
WSRunObject
:
:
ReplaceASCIIWhiteSpacesWithOneNBSP
(
const
EditorDOMPointInText
&
aAtFirstASCIIWhiteSpace
const
EditorDOMPointInText
&
aEndOfCollapsibleASCIIWhiteSpaces
)
{
MOZ_ASSERT
(
aAtFirstASCIIWhiteSpace
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
!
aAtFirstASCIIWhiteSpace
.
IsEndOfContainer
(
)
)
;
MOZ_ASSERT
(
aAtFirstASCIIWhiteSpace
.
IsCharASCIISpace
(
)
)
;
MOZ_ASSERT
(
aEndOfCollapsibleASCIIWhiteSpaces
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
aEndOfCollapsibleASCIIWhiteSpaces
.
IsEndOfContainer
(
)
|
|
!
aEndOfCollapsibleASCIIWhiteSpaces
.
IsCharASCIISpace
(
)
)
;
AutoTransactionsConserveSelection
dontChangeMySelection
(
mHTMLEditor
)
;
nsresult
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
ReplaceTextWithTransaction
(
MOZ_KnownLive
(
*
aAtFirstASCIIWhiteSpace
.
ContainerAsText
(
)
)
aAtFirstASCIIWhiteSpace
.
Offset
(
)
aAtFirstASCIIWhiteSpace
.
ContainerAsText
(
)
=
=
aEndOfCollapsibleASCIIWhiteSpaces
.
ContainerAsText
(
)
?
aEndOfCollapsibleASCIIWhiteSpaces
.
Offset
(
)
-
aAtFirstASCIIWhiteSpace
.
Offset
(
)
:
aAtFirstASCIIWhiteSpace
.
ContainerAsText
(
)
-
>
TextLength
(
)
-
aAtFirstASCIIWhiteSpace
.
Offset
(
)
nsDependentSubstring
(
&
kNBSP
1
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
ReplaceTextWithTransaction
(
)
failed
"
)
;
return
rv
;
}
if
(
aAtFirstASCIIWhiteSpace
.
GetContainer
(
)
=
=
aEndOfCollapsibleASCIIWhiteSpaces
.
GetContainer
(
)
)
{
return
NS_OK
;
}
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
DeleteTextAndTextNodesWithTransaction
(
EditorDOMPointInText
:
:
AtEndOf
(
*
aAtFirstASCIIWhiteSpace
.
ContainerAsText
(
)
)
aEndOfCollapsibleASCIIWhiteSpaces
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
rv
;
}
template
<
typename
PT
typename
CT
>
const
WSRunScanner
:
:
WSFragment
*
WSRunScanner
:
:
FindNearestFragment
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
bool
aForward
)
const
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
for
(
WSFragment
*
run
=
mStartRun
;
run
;
run
=
run
-
>
mRight
)
{
int32_t
comp
=
run
-
>
mStartNode
?
*
nsContentUtils
:
:
ComparePoints
(
aPoint
.
ToRawRangeBoundary
(
)
run
-
>
StartPoint
(
)
.
ToRawRangeBoundary
(
)
)
:
-
1
;
if
(
comp
<
=
0
)
{
return
aForward
?
run
:
nullptr
;
}
comp
=
run
-
>
mEndNode
?
*
nsContentUtils
:
:
ComparePoints
(
aPoint
.
ToRawRangeBoundary
(
)
run
-
>
EndPoint
(
)
.
ToRawRangeBoundary
(
)
)
:
-
1
;
if
(
comp
<
0
)
{
return
run
;
}
if
(
!
comp
)
{
return
aForward
?
run
-
>
mRight
:
run
;
}
if
(
!
run
-
>
mRight
)
{
return
aForward
?
nullptr
:
run
;
}
}
return
nullptr
;
}
char16_t
WSRunScanner
:
:
GetCharAt
(
Text
*
aTextNode
int32_t
aOffset
)
const
{
if
(
NS_WARN_IF
(
!
aTextNode
)
|
|
NS_WARN_IF
(
aOffset
<
0
)
|
|
NS_WARN_IF
(
aOffset
>
=
static_cast
<
int32_t
>
(
aTextNode
-
>
TextDataLength
(
)
)
)
)
{
return
0
;
}
return
aTextNode
-
>
TextFragment
(
)
.
CharAt
(
aOffset
)
;
}
nsresult
WSRunObject
:
:
NormalizeWhiteSpacesAtEndOf
(
const
WSFragment
&
aRun
)
{
if
(
!
aRun
.
IsVisibleAndMiddleOfHardLine
(
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
StaticPrefs
:
:
editor_white_space_normalization_blink_compatible
(
)
)
{
EditorDOMPoint
atEndOfRun
=
aRun
.
EndPoint
(
)
;
EditorDOMPointInText
atPreviousCharOfEndOfRun
=
GetPreviousEditableCharPoint
(
atEndOfRun
)
;
if
(
!
atPreviousCharOfEndOfRun
.
IsSet
(
)
|
|
atPreviousCharOfEndOfRun
.
IsEndOfContainer
(
)
|
|
!
atPreviousCharOfEndOfRun
.
IsCharNBSP
(
)
)
{
return
NS_OK
;
}
EditorDOMPointInText
atPreviousCharOfPreviousCharOfEndOfRun
=
GetPreviousEditableCharPoint
(
atPreviousCharOfEndOfRun
)
;
bool
isPreviousCharASCIIWhiteSpace
=
atPreviousCharOfPreviousCharOfEndOfRun
.
IsSet
(
)
&
&
!
atPreviousCharOfPreviousCharOfEndOfRun
.
IsEndOfContainer
(
)
&
&
atPreviousCharOfPreviousCharOfEndOfRun
.
IsCharASCIISpace
(
)
;
bool
maybeNBSPFollowingVisibleContent
=
(
atPreviousCharOfPreviousCharOfEndOfRun
.
IsSet
(
)
&
&
!
isPreviousCharASCIIWhiteSpace
)
|
|
(
!
atPreviousCharOfPreviousCharOfEndOfRun
.
IsSet
(
)
&
&
(
aRun
.
StartsFromNormalText
(
)
|
|
aRun
.
StartsFromSpecialContent
(
)
)
)
;
bool
followedByVisibleContentOrBRElement
=
false
;
if
(
maybeNBSPFollowingVisibleContent
|
|
isPreviousCharASCIIWhiteSpace
)
{
followedByVisibleContentOrBRElement
=
aRun
.
EndsByNormalText
(
)
|
|
aRun
.
EndsBySpecialContent
(
)
|
|
aRun
.
EndsByBRElement
(
)
;
if
(
aRun
.
EndsByBlockBoundary
(
)
&
&
mScanStartPoint
.
IsInContentNode
(
)
)
{
bool
insertBRElement
=
HTMLEditUtils
:
:
IsBlockElement
(
*
mScanStartPoint
.
ContainerAsContent
(
)
)
;
if
(
!
insertBRElement
)
{
nsIContent
*
blockParentOrTopmostEditableInlineContent
=
GetEditableBlockParentOrTopmotEditableInlineContent
(
mScanStartPoint
.
ContainerAsContent
(
)
)
;
insertBRElement
=
blockParentOrTopmostEditableInlineContent
&
&
HTMLEditUtils
:
:
IsBlockElement
(
*
blockParentOrTopmostEditableInlineContent
)
;
}
if
(
insertBRElement
)
{
RefPtr
<
Element
>
brElement
=
MOZ_KnownLive
(
mHTMLEditor
)
.
InsertBRElementWithTransaction
(
atEndOfRun
)
;
if
(
NS_WARN_IF
(
mHTMLEditor
.
Destroyed
(
)
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
if
(
!
brElement
)
{
NS_WARNING
(
"
HTMLEditor
:
:
InsertBRElementWithTransaction
(
)
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
atPreviousCharOfEndOfRun
=
GetPreviousEditableCharPoint
(
atEndOfRun
)
;
atPreviousCharOfPreviousCharOfEndOfRun
=
GetPreviousEditableCharPoint
(
atPreviousCharOfEndOfRun
)
;
isPreviousCharASCIIWhiteSpace
=
atPreviousCharOfPreviousCharOfEndOfRun
.
IsSet
(
)
&
&
!
atPreviousCharOfPreviousCharOfEndOfRun
.
IsEndOfContainer
(
)
&
&
atPreviousCharOfPreviousCharOfEndOfRun
.
IsCharASCIISpace
(
)
;
followedByVisibleContentOrBRElement
=
true
;
}
}
if
(
maybeNBSPFollowingVisibleContent
&
&
followedByVisibleContentOrBRElement
)
{
AutoTransactionsConserveSelection
dontChangeMySelection
(
mHTMLEditor
)
;
nsresult
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
ReplaceTextWithTransaction
(
MOZ_KnownLive
(
*
atPreviousCharOfEndOfRun
.
ContainerAsText
(
)
)
atPreviousCharOfEndOfRun
.
Offset
(
)
1
NS_LITERAL_STRING
(
"
"
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
ReplaceTextWithTransaction
(
)
failed
"
)
;
return
rv
;
}
}
if
(
mPRE
|
|
maybeNBSPFollowingVisibleContent
|
|
!
isPreviousCharASCIIWhiteSpace
|
|
!
followedByVisibleContentOrBRElement
)
{
return
NS_OK
;
}
MOZ_ASSERT
(
!
atPreviousCharOfPreviousCharOfEndOfRun
.
IsEndOfContainer
(
)
)
;
EditorDOMPointInText
atFirstASCIIWhiteSpace
=
GetFirstASCIIWhiteSpacePointCollapsedTo
(
atPreviousCharOfPreviousCharOfEndOfRun
)
;
AutoTransactionsConserveSelection
dontChangeMySelection
(
mHTMLEditor
)
;
uint32_t
numberOfASCIIWhiteSpacesInStartNode
=
atFirstASCIIWhiteSpace
.
ContainerAsText
(
)
=
=
atPreviousCharOfEndOfRun
.
ContainerAsText
(
)
?
atPreviousCharOfEndOfRun
.
Offset
(
)
-
atFirstASCIIWhiteSpace
.
Offset
(
)
:
atFirstASCIIWhiteSpace
.
ContainerAsText
(
)
-
>
Length
(
)
-
atFirstASCIIWhiteSpace
.
Offset
(
)
;
uint32_t
replaceLengthInStartNode
=
numberOfASCIIWhiteSpacesInStartNode
+
(
atFirstASCIIWhiteSpace
.
ContainerAsText
(
)
=
=
atPreviousCharOfEndOfRun
.
ContainerAsText
(
)
?
1
:
0
)
;
nsresult
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
ReplaceTextWithTransaction
(
MOZ_KnownLive
(
*
atFirstASCIIWhiteSpace
.
ContainerAsText
(
)
)
atFirstASCIIWhiteSpace
.
Offset
(
)
replaceLengthInStartNode
NS_LITERAL_STRING
(
u
"
\
x00A0
"
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
ReplaceTextWithTransaction
(
)
failed
"
)
;
return
rv
;
}
if
(
atFirstASCIIWhiteSpace
.
GetContainer
(
)
=
=
atPreviousCharOfEndOfRun
.
GetContainer
(
)
)
{
return
NS_OK
;
}
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
DeleteTextAndTextNodesWithTransaction
(
EditorDOMPointInText
:
:
AtEndOf
(
*
atFirstASCIIWhiteSpace
.
ContainerAsText
(
)
)
atPreviousCharOfEndOfRun
.
NextPoint
(
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
rv
;
}
EditorDOMPoint
atEndOfRun
=
aRun
.
EndPoint
(
)
;
EditorDOMPointInText
atPreviousCharOfEndOfRun
=
GetPreviousEditableCharPoint
(
atEndOfRun
)
;
if
(
!
atPreviousCharOfEndOfRun
.
IsSet
(
)
|
|
atPreviousCharOfEndOfRun
.
IsEndOfContainer
(
)
|
|
!
atPreviousCharOfEndOfRun
.
IsCharNBSP
(
)
)
{
return
NS_OK
;
}
EditorDOMPointInText
startToDelete
endToDelete
;
EditorDOMPointInText
atPreviousCharOfPreviousCharOfEndOfRun
=
GetPreviousEditableCharPoint
(
atPreviousCharOfEndOfRun
)
;
if
(
atPreviousCharOfEndOfRun
.
IsCharNBSP
(
)
&
&
atPreviousCharOfPreviousCharOfEndOfRun
.
IsSet
(
)
&
&
atPreviousCharOfPreviousCharOfEndOfRun
.
IsCharASCIISpace
(
)
)
{
startToDelete
=
GetFirstASCIIWhiteSpacePointCollapsedTo
(
atPreviousCharOfPreviousCharOfEndOfRun
)
;
endToDelete
=
atPreviousCharOfPreviousCharOfEndOfRun
;
}
else
{
startToDelete
=
endToDelete
=
atPreviousCharOfEndOfRun
.
NextPoint
(
)
;
}
AutoTransactionsConserveSelection
dontChangeMySelection
(
mHTMLEditor
)
;
nsresult
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
DeleteTextAndNormalizeSurroundingWhiteSpaces
(
startToDelete
endToDelete
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTextAndNormalizeSurroundingWhiteSpaces
(
)
failed
"
)
;
return
rv
;
}
nsresult
WSRunObject
:
:
MaybeReplacePreviousNBSPWithASCIIWhiteSpace
(
const
WSFragment
&
aRun
const
EditorDOMPoint
&
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
EditorDOMPointInText
atPreviousChar
=
GetPreviousEditableCharPoint
(
aPoint
)
;
if
(
!
atPreviousChar
.
IsSet
(
)
|
|
atPreviousChar
.
IsEndOfContainer
(
)
|
|
!
atPreviousChar
.
IsCharNBSP
(
)
)
{
return
NS_OK
;
}
EditorDOMPointInText
atPreviousCharOfPreviousChar
=
GetPreviousEditableCharPoint
(
atPreviousChar
)
;
if
(
atPreviousCharOfPreviousChar
.
IsSet
(
)
)
{
if
(
!
atPreviousCharOfPreviousChar
.
IsEndOfContainer
(
)
&
&
atPreviousCharOfPreviousChar
.
IsCharASCIISpace
(
)
)
{
return
NS_OK
;
}
}
else
if
(
!
aRun
.
StartsFromNormalText
(
)
&
&
!
aRun
.
StartsFromSpecialContent
(
)
)
{
return
NS_OK
;
}
AutoTransactionsConserveSelection
dontChangeMySelection
(
mHTMLEditor
)
;
nsresult
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
ReplaceTextWithTransaction
(
MOZ_KnownLive
(
*
atPreviousChar
.
ContainerAsText
(
)
)
atPreviousChar
.
Offset
(
)
1
NS_LITERAL_STRING
(
"
"
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
ReplaceTextWithTransaction
(
)
failed
"
)
;
return
rv
;
}
nsresult
WSRunObject
:
:
MaybeReplaceInclusiveNextNBSPWithASCIIWhiteSpace
(
const
WSFragment
&
aRun
const
EditorDOMPoint
&
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
EditorDOMPointInText
atNextChar
=
GetInclusiveNextEditableCharPoint
(
aPoint
)
;
if
(
!
atNextChar
.
IsSet
(
)
|
|
NS_WARN_IF
(
atNextChar
.
IsEndOfContainer
(
)
)
|
|
!
atNextChar
.
IsCharNBSP
(
)
)
{
return
NS_OK
;
}
EditorDOMPointInText
atNextCharOfNextCharOfNBSP
=
GetInclusiveNextEditableCharPoint
(
atNextChar
.
NextPoint
(
)
)
;
if
(
atNextCharOfNextCharOfNBSP
.
IsSet
(
)
)
{
if
(
!
atNextCharOfNextCharOfNBSP
.
IsEndOfContainer
(
)
&
&
atNextCharOfNextCharOfNBSP
.
IsCharASCIISpace
(
)
)
{
return
NS_OK
;
}
}
else
if
(
!
aRun
.
EndsByNormalText
(
)
&
&
!
aRun
.
EndsBySpecialContent
(
)
&
&
!
aRun
.
EndsByBRElement
(
)
)
{
return
NS_OK
;
}
AutoTransactionsConserveSelection
dontChangeMySelection
(
mHTMLEditor
)
;
nsresult
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
ReplaceTextWithTransaction
(
MOZ_KnownLive
(
*
atNextChar
.
ContainerAsText
(
)
)
atNextChar
.
Offset
(
)
1
NS_LITERAL_STRING
(
"
"
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
ReplaceTextWithTransaction
(
)
failed
"
)
;
return
rv
;
}
nsresult
WSRunObject
:
:
Scrub
(
)
{
for
(
WSFragment
*
run
=
mStartRun
;
run
;
run
=
run
-
>
mRight
)
{
if
(
run
-
>
IsMiddleOfHardLine
(
)
)
{
continue
;
}
nsresult
rv
=
MOZ_KnownLive
(
mHTMLEditor
)
.
DeleteTextAndTextNodesWithTransaction
(
run
-
>
StartPoint
(
)
run
-
>
EndPoint
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
rv
;
}
}
return
NS_OK
;
}
}
