#
include
"
WSRunScanner
.
h
"
#
include
"
EditorDOMPoint
.
h
"
#
include
"
EditorUtils
.
h
"
#
include
"
HTMLEditUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
dom
/
AncestorIterator
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIContentInlines
.
h
"
#
include
"
nsTextFragment
.
h
"
namespace
mozilla
{
using
namespace
dom
;
using
AncestorType
=
HTMLEditUtils
:
:
AncestorType
;
using
AncestorTypes
=
HTMLEditUtils
:
:
AncestorTypes
;
using
LeafNodeType
=
HTMLEditUtils
:
:
LeafNodeType
;
using
LeafNodeTypes
=
HTMLEditUtils
:
:
LeafNodeTypes
;
template
WSRunScanner
:
:
TextFragmentData
:
:
TextFragmentData
(
Scan
aScanMode
const
EditorDOMPoint
&
aPoint
BlockInlineCheck
aBlockInlineCheck
const
Element
*
aAncestorLimiter
)
;
template
WSRunScanner
:
:
TextFragmentData
:
:
TextFragmentData
(
Scan
aScanMode
const
EditorRawDOMPoint
&
aPoint
BlockInlineCheck
aBlockInlineCheck
const
Element
*
aAncestorLimiter
)
;
template
WSRunScanner
:
:
TextFragmentData
:
:
TextFragmentData
(
Scan
aScanMode
const
EditorDOMPointInText
&
aPoint
BlockInlineCheck
aBlockInlineCheck
const
Element
*
aAncestorLimiter
)
;
template
WSRunScanner
:
:
TextFragmentData
:
:
TextFragmentData
(
Scan
aScanMode
const
EditorRawDOMPointInText
&
aPoint
BlockInlineCheck
aBlockInlineCheck
const
Element
*
aAncestorLimiter
)
;
NS_INSTANTIATE_METHOD_RETURNING_ANY_EDITOR_DOM_POINT
(
WSRunScanner
:
:
TextFragmentData
:
:
GetInclusiveNextCharPoint
const
EditorDOMPoint
&
aPoint
BlockInlineCheck
aBlockInlineCheck
IgnoreNonEditableNodes
aIgnoreNonEditableNodes
const
nsIContent
*
aFollowingLimiterContent
)
;
NS_INSTANTIATE_METHOD_RETURNING_ANY_EDITOR_DOM_POINT
(
WSRunScanner
:
:
TextFragmentData
:
:
GetInclusiveNextCharPoint
const
EditorRawDOMPoint
&
aPoint
BlockInlineCheck
aBlockInlineCheck
IgnoreNonEditableNodes
aIgnoreNonEditableNodes
const
nsIContent
*
aFollowingLimiterContent
)
;
NS_INSTANTIATE_METHOD_RETURNING_ANY_EDITOR_DOM_POINT
(
WSRunScanner
:
:
TextFragmentData
:
:
GetInclusiveNextCharPoint
const
EditorDOMPointInText
&
aPoint
BlockInlineCheck
aBlockInlineCheck
IgnoreNonEditableNodes
aIgnoreNonEditableNodes
const
nsIContent
*
aFollowingLimiterContent
)
;
NS_INSTANTIATE_METHOD_RETURNING_ANY_EDITOR_DOM_POINT
(
WSRunScanner
:
:
TextFragmentData
:
:
GetInclusiveNextCharPoint
const
EditorRawDOMPointInText
&
aPoint
BlockInlineCheck
aBlockInlineCheck
IgnoreNonEditableNodes
aIgnoreNonEditableNodes
const
nsIContent
*
aFollowingLimiterContent
)
;
NS_INSTANTIATE_METHOD_RETURNING_ANY_EDITOR_DOM_POINT
(
WSRunScanner
:
:
TextFragmentData
:
:
GetPreviousCharPoint
const
EditorDOMPoint
&
aPoint
BlockInlineCheck
aBlockInlineCheck
IgnoreNonEditableNodes
aIgnoreNonEditableNodes
const
nsIContent
*
aPrecedingLimiterContent
)
;
NS_INSTANTIATE_METHOD_RETURNING_ANY_EDITOR_DOM_POINT
(
WSRunScanner
:
:
TextFragmentData
:
:
GetPreviousCharPoint
const
EditorRawDOMPoint
&
aPoint
BlockInlineCheck
aBlockInlineCheck
IgnoreNonEditableNodes
aIgnoreNonEditableNodes
const
nsIContent
*
aPrecedingLimiterContent
)
;
NS_INSTANTIATE_METHOD_RETURNING_ANY_EDITOR_DOM_POINT
(
WSRunScanner
:
:
TextFragmentData
:
:
GetPreviousCharPoint
const
EditorDOMPointInText
&
aPoint
BlockInlineCheck
aBlockInlineCheck
IgnoreNonEditableNodes
aIgnoreNonEditableNodes
const
nsIContent
*
aPrecedingLimiterContent
)
;
NS_INSTANTIATE_METHOD_RETURNING_ANY_EDITOR_DOM_POINT
(
WSRunScanner
:
:
TextFragmentData
:
:
GetPreviousCharPoint
const
EditorRawDOMPointInText
&
aPoint
BlockInlineCheck
aBlockInlineCheck
IgnoreNonEditableNodes
aIgnoreNonEditableNodes
const
nsIContent
*
aPrecedingLimiterContent
)
;
NS_INSTANTIATE_METHOD_RETURNING_ANY_EDITOR_DOM_POINT
(
WSRunScanner
:
:
TextFragmentData
:
:
GetEndOfCollapsibleASCIIWhiteSpaces
const
EditorDOMPointInText
&
aPointAtASCIIWhiteSpace
nsIEditor
:
:
EDirection
aDirectionToDelete
BlockInlineCheck
aBlockInlineCheck
IgnoreNonEditableNodes
aIgnoreNonEditableNodes
const
nsIContent
*
aFollowingLimiterContent
)
;
NS_INSTANTIATE_METHOD_RETURNING_ANY_EDITOR_DOM_POINT
(
WSRunScanner
:
:
TextFragmentData
:
:
GetFirstASCIIWhiteSpacePointCollapsedTo
const
EditorDOMPointInText
&
aPointAtASCIIWhiteSpace
nsIEditor
:
:
EDirection
aDirectionToDelete
BlockInlineCheck
aBlockInlineCheck
IgnoreNonEditableNodes
aIgnoreNonEditableNodes
const
nsIContent
*
aPrecedingLimiterContent
)
;
constexpr
static
const
AncestorTypes
kScanAnyRootAncestorTypes
=
{
AncestorType
:
:
ClosestBlockElement
AncestorType
:
:
AllowRootOrAncestorLimiterElement
AncestorType
:
:
IgnoreHRElement
}
;
constexpr
static
const
AncestorTypes
kScanEditableRootAncestorTypes
=
{
AncestorType
:
:
EditableElement
AncestorType
:
:
ClosestBlockElement
AncestorType
:
:
AllowRootOrAncestorLimiterElement
AncestorType
:
:
IgnoreHRElement
}
;
template
<
typename
EditorDOMPointType
>
WSRunScanner
:
:
TextFragmentData
:
:
TextFragmentData
(
Scan
aScanMode
const
EditorDOMPointType
&
aPoint
BlockInlineCheck
aBlockInlineCheck
const
Element
*
aAncestorLimiter
)
:
mBlockInlineCheck
(
aBlockInlineCheck
)
mScanMode
(
aScanMode
)
{
if
(
NS_WARN_IF
(
!
aPoint
.
IsInContentNodeAndValidInComposedDoc
(
)
)
|
|
NS_WARN_IF
(
!
aPoint
.
GetContainerOrContainerParentElement
(
)
)
)
{
return
;
}
MOZ_ASSERT_IF
(
aAncestorLimiter
aPoint
.
template
ContainerAs
<
nsIContent
>
(
)
-
>
IsInclusiveDescendantOf
(
aAncestorLimiter
)
)
;
mScanStartPoint
=
aPoint
.
template
To
<
EditorDOMPoint
>
(
)
;
const
Element
*
const
editableBlockElementOrInlineEditingHostOrNonEditableRootElement
=
HTMLEditUtils
:
:
GetInclusiveAncestorElement
(
*
mScanStartPoint
.
ContainerAs
<
nsIContent
>
(
)
aScanMode
=
=
Scan
:
:
EditableNodes
?
kScanEditableRootAncestorTypes
:
kScanAnyRootAncestorTypes
aBlockInlineCheck
aAncestorLimiter
)
;
if
(
NS_WARN_IF
(
!
editableBlockElementOrInlineEditingHostOrNonEditableRootElement
)
)
{
return
;
}
mStart
=
BoundaryData
:
:
ScanCollapsibleWhiteSpaceStartFrom
(
mScanStartPoint
&
mNBSPData
aBlockInlineCheck
ShouldStopAtNonEditableNode
(
aScanMode
)
*
editableBlockElementOrInlineEditingHostOrNonEditableRootElement
)
;
MOZ_ASSERT_IF
(
mStart
.
IsNonCollapsibleCharacters
(
)
!
mStart
.
PointRef
(
)
.
IsPreviousCharPreformattedNewLine
(
)
)
;
MOZ_ASSERT_IF
(
mStart
.
IsPreformattedLineBreak
(
)
mStart
.
PointRef
(
)
.
IsPreviousCharPreformattedNewLine
(
)
)
;
mEnd
=
BoundaryData
:
:
ScanCollapsibleWhiteSpaceEndFrom
(
mScanStartPoint
&
mNBSPData
aBlockInlineCheck
ShouldStopAtNonEditableNode
(
aScanMode
)
*
editableBlockElementOrInlineEditingHostOrNonEditableRootElement
)
;
MOZ_ASSERT_IF
(
mEnd
.
IsNonCollapsibleCharacters
(
)
!
mEnd
.
PointRef
(
)
.
IsCharPreformattedNewLine
(
)
)
;
MOZ_ASSERT_IF
(
mEnd
.
IsPreformattedLineBreak
(
)
mEnd
.
PointRef
(
)
.
IsCharPreformattedNewLine
(
)
)
;
}
template
<
typename
EditorDOMPointType
>
Maybe
<
WSRunScanner
:
:
TextFragmentData
:
:
BoundaryData
>
WSRunScanner
:
:
TextFragmentData
:
:
BoundaryData
:
:
ScanCollapsibleWhiteSpaceStartInTextNode
(
const
EditorDOMPointType
&
aPoint
NoBreakingSpaceData
*
aNBSPData
BlockInlineCheck
aBlockInlineCheck
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aPoint
.
IsInTextNode
(
)
)
;
const
bool
isWhiteSpaceCollapsible
=
!
EditorUtils
:
:
IsWhiteSpacePreformatted
(
*
aPoint
.
template
ContainerAs
<
Text
>
(
)
)
;
const
bool
isNewLineCollapsible
=
!
EditorUtils
:
:
IsNewLinePreformatted
(
*
aPoint
.
template
ContainerAs
<
Text
>
(
)
)
;
const
nsTextFragment
&
textFragment
=
aPoint
.
template
ContainerAs
<
Text
>
(
)
-
>
TextFragment
(
)
;
for
(
uint32_t
i
=
std
:
:
min
(
aPoint
.
Offset
(
)
textFragment
.
GetLength
(
)
)
;
i
;
i
-
-
)
{
WSType
wsTypeOfNonCollapsibleChar
;
switch
(
textFragment
.
CharAt
(
i
-
1
)
)
{
case
HTMLEditUtils
:
:
kSpace
:
case
HTMLEditUtils
:
:
kCarriageReturn
:
case
HTMLEditUtils
:
:
kTab
:
if
(
isWhiteSpaceCollapsible
)
{
continue
;
}
wsTypeOfNonCollapsibleChar
=
WSType
:
:
NonCollapsibleCharacters
;
break
;
case
HTMLEditUtils
:
:
kNewLine
:
if
(
isNewLineCollapsible
)
{
continue
;
}
wsTypeOfNonCollapsibleChar
=
WSType
:
:
PreformattedLineBreak
;
break
;
case
HTMLEditUtils
:
:
kNBSP
:
if
(
isWhiteSpaceCollapsible
)
{
if
(
aNBSPData
)
{
aNBSPData
-
>
NotifyNBSP
(
EditorDOMPointInText
(
aPoint
.
template
ContainerAs
<
Text
>
(
)
i
-
1
)
NoBreakingSpaceData
:
:
Scanning
:
:
Backward
)
;
}
continue
;
}
wsTypeOfNonCollapsibleChar
=
WSType
:
:
NonCollapsibleCharacters
;
break
;
default
:
MOZ_ASSERT
(
!
nsCRT
:
:
IsAsciiSpace
(
textFragment
.
CharAt
(
i
-
1
)
)
)
;
wsTypeOfNonCollapsibleChar
=
WSType
:
:
NonCollapsibleCharacters
;
break
;
}
return
Some
(
BoundaryData
(
EditorDOMPoint
(
aPoint
.
template
ContainerAs
<
Text
>
(
)
i
)
*
aPoint
.
template
ContainerAs
<
Text
>
(
)
wsTypeOfNonCollapsibleChar
)
)
;
}
return
Nothing
(
)
;
}
template
<
typename
EditorDOMPointType
>
WSRunScanner
:
:
TextFragmentData
:
:
BoundaryData
WSRunScanner
:
:
TextFragmentData
:
:
BoundaryData
:
:
ScanCollapsibleWhiteSpaceStartFrom
(
const
EditorDOMPointType
&
aPoint
NoBreakingSpaceData
*
aNBSPData
BlockInlineCheck
aBlockInlineCheck
StopAtNonEditableNode
aStopAtNonEditableNode
const
Element
&
aAncestorLimiter
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
HTMLEditUtils
:
:
IsSimplyEditableNode
(
*
aPoint
.
GetContainer
(
)
)
=
=
HTMLEditUtils
:
:
IsSimplyEditableNode
(
aAncestorLimiter
)
)
;
if
(
aPoint
.
IsInTextNode
(
)
&
&
!
aPoint
.
IsStartOfContainer
(
)
)
{
Maybe
<
BoundaryData
>
startInTextNode
=
BoundaryData
:
:
ScanCollapsibleWhiteSpaceStartInTextNode
(
aPoint
aNBSPData
aBlockInlineCheck
)
;
if
(
startInTextNode
.
isSome
(
)
)
{
return
startInTextNode
.
ref
(
)
;
}
return
BoundaryData
:
:
ScanCollapsibleWhiteSpaceStartFrom
(
EditorDOMPoint
(
aPoint
.
template
ContainerAs
<
Text
>
(
)
0
)
aNBSPData
aBlockInlineCheck
aStopAtNonEditableNode
aAncestorLimiter
)
;
}
const
auto
leafNodeTypes
=
aStopAtNonEditableNode
=
=
StopAtNonEditableNode
:
:
Yes
?
LeafNodeTypes
{
LeafNodeType
:
:
LeafNodeOrNonEditableNode
}
:
LeafNodeTypes
{
LeafNodeType
:
:
OnlyLeafNode
}
;
nsIContent
*
previousLeafContentOrBlock
=
HTMLEditUtils
:
:
GetPreviousLeafContentOrPreviousBlockElement
(
aPoint
leafNodeTypes
aBlockInlineCheck
&
aAncestorLimiter
)
;
if
(
!
previousLeafContentOrBlock
)
{
return
BoundaryData
(
aPoint
const_cast
<
Element
&
>
(
aAncestorLimiter
)
HTMLEditUtils
:
:
IsBlockElement
(
aAncestorLimiter
aBlockInlineCheck
)
?
WSType
:
:
CurrentBlockBoundary
:
WSType
:
:
InlineEditingHostBoundary
)
;
}
if
(
HTMLEditUtils
:
:
IsBlockElement
(
*
previousLeafContentOrBlock
aBlockInlineCheck
)
)
{
return
BoundaryData
(
aPoint
*
previousLeafContentOrBlock
WSType
:
:
OtherBlockBoundary
)
;
}
if
(
!
previousLeafContentOrBlock
-
>
IsText
(
)
|
|
(
aStopAtNonEditableNode
=
=
StopAtNonEditableNode
:
:
Yes
&
&
HTMLEditUtils
:
:
IsSimplyEditableNode
(
*
previousLeafContentOrBlock
)
!
=
HTMLEditUtils
:
:
IsSimplyEditableNode
(
aAncestorLimiter
)
)
)
{
return
BoundaryData
(
aPoint
*
previousLeafContentOrBlock
previousLeafContentOrBlock
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
?
WSType
:
:
BRElement
:
WSType
:
:
SpecialContent
)
;
}
if
(
!
previousLeafContentOrBlock
-
>
AsText
(
)
-
>
TextLength
(
)
)
{
return
BoundaryData
:
:
ScanCollapsibleWhiteSpaceStartFrom
(
EditorDOMPointInText
(
previousLeafContentOrBlock
-
>
AsText
(
)
0
)
aNBSPData
aBlockInlineCheck
aStopAtNonEditableNode
aAncestorLimiter
)
;
}
Maybe
<
BoundaryData
>
startInTextNode
=
BoundaryData
:
:
ScanCollapsibleWhiteSpaceStartInTextNode
(
EditorDOMPointInText
:
:
AtEndOf
(
*
previousLeafContentOrBlock
-
>
AsText
(
)
)
aNBSPData
aBlockInlineCheck
)
;
if
(
startInTextNode
.
isSome
(
)
)
{
return
startInTextNode
.
ref
(
)
;
}
return
BoundaryData
:
:
ScanCollapsibleWhiteSpaceStartFrom
(
EditorDOMPointInText
(
previousLeafContentOrBlock
-
>
AsText
(
)
0
)
aNBSPData
aBlockInlineCheck
aStopAtNonEditableNode
aAncestorLimiter
)
;
}
template
<
typename
EditorDOMPointType
>
Maybe
<
WSRunScanner
:
:
TextFragmentData
:
:
BoundaryData
>
WSRunScanner
:
:
TextFragmentData
:
:
BoundaryData
:
:
ScanCollapsibleWhiteSpaceEndInTextNode
(
const
EditorDOMPointType
&
aPoint
NoBreakingSpaceData
*
aNBSPData
BlockInlineCheck
aBlockInlineCheck
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aPoint
.
IsInTextNode
(
)
)
;
const
bool
isWhiteSpaceCollapsible
=
!
EditorUtils
:
:
IsWhiteSpacePreformatted
(
*
aPoint
.
template
ContainerAs
<
Text
>
(
)
)
;
const
bool
isNewLineCollapsible
=
!
EditorUtils
:
:
IsNewLinePreformatted
(
*
aPoint
.
template
ContainerAs
<
Text
>
(
)
)
;
const
nsTextFragment
&
textFragment
=
aPoint
.
template
ContainerAs
<
Text
>
(
)
-
>
TextFragment
(
)
;
for
(
uint32_t
i
=
aPoint
.
Offset
(
)
;
i
<
textFragment
.
GetLength
(
)
;
i
+
+
)
{
WSType
wsTypeOfNonCollapsibleChar
;
switch
(
textFragment
.
CharAt
(
i
)
)
{
case
HTMLEditUtils
:
:
kSpace
:
case
HTMLEditUtils
:
:
kCarriageReturn
:
case
HTMLEditUtils
:
:
kTab
:
if
(
isWhiteSpaceCollapsible
)
{
continue
;
}
wsTypeOfNonCollapsibleChar
=
WSType
:
:
NonCollapsibleCharacters
;
break
;
case
HTMLEditUtils
:
:
kNewLine
:
if
(
isNewLineCollapsible
)
{
continue
;
}
wsTypeOfNonCollapsibleChar
=
WSType
:
:
PreformattedLineBreak
;
break
;
case
HTMLEditUtils
:
:
kNBSP
:
if
(
isWhiteSpaceCollapsible
)
{
if
(
aNBSPData
)
{
aNBSPData
-
>
NotifyNBSP
(
EditorDOMPointInText
(
aPoint
.
template
ContainerAs
<
Text
>
(
)
i
)
NoBreakingSpaceData
:
:
Scanning
:
:
Forward
)
;
}
continue
;
}
wsTypeOfNonCollapsibleChar
=
WSType
:
:
NonCollapsibleCharacters
;
break
;
default
:
MOZ_ASSERT
(
!
nsCRT
:
:
IsAsciiSpace
(
textFragment
.
CharAt
(
i
)
)
)
;
wsTypeOfNonCollapsibleChar
=
WSType
:
:
NonCollapsibleCharacters
;
break
;
}
return
Some
(
BoundaryData
(
EditorDOMPoint
(
aPoint
.
template
ContainerAs
<
Text
>
(
)
i
)
*
aPoint
.
template
ContainerAs
<
Text
>
(
)
wsTypeOfNonCollapsibleChar
)
)
;
}
return
Nothing
(
)
;
}
template
<
typename
EditorDOMPointType
>
WSRunScanner
:
:
TextFragmentData
:
:
BoundaryData
WSRunScanner
:
:
TextFragmentData
:
:
BoundaryData
:
:
ScanCollapsibleWhiteSpaceEndFrom
(
const
EditorDOMPointType
&
aPoint
NoBreakingSpaceData
*
aNBSPData
BlockInlineCheck
aBlockInlineCheck
StopAtNonEditableNode
aStopAtNonEditableNode
const
Element
&
aAncestorLimiter
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
HTMLEditUtils
:
:
IsSimplyEditableNode
(
*
aPoint
.
GetContainer
(
)
)
=
=
HTMLEditUtils
:
:
IsSimplyEditableNode
(
aAncestorLimiter
)
)
;
if
(
aPoint
.
IsInTextNode
(
)
&
&
!
aPoint
.
IsEndOfContainer
(
)
)
{
Maybe
<
BoundaryData
>
endInTextNode
=
BoundaryData
:
:
ScanCollapsibleWhiteSpaceEndInTextNode
(
aPoint
aNBSPData
aBlockInlineCheck
)
;
if
(
endInTextNode
.
isSome
(
)
)
{
return
endInTextNode
.
ref
(
)
;
}
return
BoundaryData
:
:
ScanCollapsibleWhiteSpaceEndFrom
(
EditorDOMPointInText
:
:
AtEndOf
(
*
aPoint
.
template
ContainerAs
<
Text
>
(
)
)
aNBSPData
aBlockInlineCheck
aStopAtNonEditableNode
aAncestorLimiter
)
;
}
const
auto
leafNodeTypes
=
aStopAtNonEditableNode
=
=
StopAtNonEditableNode
:
:
Yes
?
LeafNodeTypes
{
LeafNodeType
:
:
LeafNodeOrNonEditableNode
}
:
LeafNodeTypes
{
LeafNodeType
:
:
OnlyLeafNode
}
;
nsIContent
*
nextLeafContentOrBlock
=
HTMLEditUtils
:
:
GetNextLeafContentOrNextBlockElement
(
aPoint
leafNodeTypes
aBlockInlineCheck
&
aAncestorLimiter
)
;
if
(
!
nextLeafContentOrBlock
)
{
return
BoundaryData
(
aPoint
.
template
To
<
EditorDOMPoint
>
(
)
const_cast
<
Element
&
>
(
aAncestorLimiter
)
HTMLEditUtils
:
:
IsBlockElement
(
aAncestorLimiter
aBlockInlineCheck
)
?
WSType
:
:
CurrentBlockBoundary
:
WSType
:
:
InlineEditingHostBoundary
)
;
}
if
(
HTMLEditUtils
:
:
IsBlockElement
(
*
nextLeafContentOrBlock
aBlockInlineCheck
)
)
{
return
BoundaryData
(
aPoint
*
nextLeafContentOrBlock
WSType
:
:
OtherBlockBoundary
)
;
}
if
(
!
nextLeafContentOrBlock
-
>
IsText
(
)
|
|
(
aStopAtNonEditableNode
=
=
StopAtNonEditableNode
:
:
Yes
&
&
HTMLEditUtils
:
:
IsSimplyEditableNode
(
*
nextLeafContentOrBlock
)
!
=
HTMLEditUtils
:
:
IsSimplyEditableNode
(
aAncestorLimiter
)
)
)
{
return
BoundaryData
(
aPoint
*
nextLeafContentOrBlock
nextLeafContentOrBlock
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
?
WSType
:
:
BRElement
:
WSType
:
:
SpecialContent
)
;
}
if
(
!
nextLeafContentOrBlock
-
>
AsText
(
)
-
>
TextFragment
(
)
.
GetLength
(
)
)
{
return
BoundaryData
:
:
ScanCollapsibleWhiteSpaceEndFrom
(
EditorDOMPointInText
(
nextLeafContentOrBlock
-
>
AsText
(
)
0
)
aNBSPData
aBlockInlineCheck
aStopAtNonEditableNode
aAncestorLimiter
)
;
}
Maybe
<
BoundaryData
>
endInTextNode
=
BoundaryData
:
:
ScanCollapsibleWhiteSpaceEndInTextNode
(
EditorDOMPointInText
(
nextLeafContentOrBlock
-
>
AsText
(
)
0
)
aNBSPData
aBlockInlineCheck
)
;
if
(
endInTextNode
.
isSome
(
)
)
{
return
endInTextNode
.
ref
(
)
;
}
return
BoundaryData
:
:
ScanCollapsibleWhiteSpaceEndFrom
(
EditorDOMPointInText
:
:
AtEndOf
(
*
nextLeafContentOrBlock
-
>
AsText
(
)
)
aNBSPData
aBlockInlineCheck
aStopAtNonEditableNode
aAncestorLimiter
)
;
}
const
EditorDOMRange
&
WSRunScanner
:
:
TextFragmentData
:
:
InvisibleLeadingWhiteSpaceRangeRef
(
)
const
{
if
(
mLeadingWhiteSpaceRange
.
isSome
(
)
)
{
return
mLeadingWhiteSpaceRange
.
ref
(
)
;
}
if
(
!
StartsFromHardLineBreak
(
)
&
&
!
StartsFromInlineEditingHostBoundary
(
)
)
{
mLeadingWhiteSpaceRange
.
emplace
(
)
;
return
mLeadingWhiteSpaceRange
.
ref
(
)
;
}
if
(
!
mNBSPData
.
FoundNBSP
(
)
)
{
MOZ_ASSERT
(
mStart
.
PointRef
(
)
.
IsSet
(
)
|
|
mEnd
.
PointRef
(
)
.
IsSet
(
)
)
;
mLeadingWhiteSpaceRange
.
emplace
(
mStart
.
PointRef
(
)
mEnd
.
PointRef
(
)
)
;
return
mLeadingWhiteSpaceRange
.
ref
(
)
;
}
MOZ_ASSERT
(
mNBSPData
.
LastPointRef
(
)
.
IsSetAndValid
(
)
)
;
mLeadingWhiteSpaceRange
.
emplace
(
mStart
.
PointRef
(
)
mNBSPData
.
FirstPointRef
(
)
)
;
return
mLeadingWhiteSpaceRange
.
ref
(
)
;
}
const
EditorDOMRange
&
WSRunScanner
:
:
TextFragmentData
:
:
InvisibleTrailingWhiteSpaceRangeRef
(
)
const
{
if
(
mTrailingWhiteSpaceRange
.
isSome
(
)
)
{
return
mTrailingWhiteSpaceRange
.
ref
(
)
;
}
if
(
!
EndsByBlockBoundary
(
)
&
&
!
EndsByInlineEditingHostBoundary
(
)
&
&
!
EndsByInvisiblePreformattedLineBreak
(
)
)
{
mTrailingWhiteSpaceRange
.
emplace
(
)
;
return
mTrailingWhiteSpaceRange
.
ref
(
)
;
}
if
(
!
mNBSPData
.
FoundNBSP
(
)
)
{
MOZ_ASSERT
(
mStart
.
PointRef
(
)
.
IsSet
(
)
|
|
mEnd
.
PointRef
(
)
.
IsSet
(
)
)
;
mTrailingWhiteSpaceRange
.
emplace
(
mStart
.
PointRef
(
)
mEnd
.
PointRef
(
)
)
;
return
mTrailingWhiteSpaceRange
.
ref
(
)
;
}
MOZ_ASSERT
(
mNBSPData
.
LastPointRef
(
)
.
IsSetAndValid
(
)
)
;
if
(
mEnd
.
PointRef
(
)
.
IsSet
(
)
&
&
mNBSPData
.
LastPointRef
(
)
.
GetContainer
(
)
=
=
mEnd
.
PointRef
(
)
.
GetContainer
(
)
&
&
mNBSPData
.
LastPointRef
(
)
.
Offset
(
)
=
=
mEnd
.
PointRef
(
)
.
Offset
(
)
-
1
)
{
mTrailingWhiteSpaceRange
.
emplace
(
)
;
return
mTrailingWhiteSpaceRange
.
ref
(
)
;
}
MOZ_ASSERT
(
!
mNBSPData
.
LastPointRef
(
)
.
IsEndOfContainer
(
)
)
;
mTrailingWhiteSpaceRange
.
emplace
(
mNBSPData
.
LastPointRef
(
)
.
NextPoint
(
)
mEnd
.
PointRef
(
)
)
;
return
mTrailingWhiteSpaceRange
.
ref
(
)
;
}
EditorDOMRangeInTexts
WSRunScanner
:
:
TextFragmentData
:
:
GetNonCollapsedRangeInTexts
(
const
EditorDOMRange
&
aRange
)
const
{
if
(
!
aRange
.
IsPositioned
(
)
)
{
return
EditorDOMRangeInTexts
(
)
;
}
if
(
aRange
.
Collapsed
(
)
)
{
return
EditorDOMRangeInTexts
(
)
;
}
if
(
aRange
.
IsInTextNodes
(
)
)
{
return
aRange
.
GetAsInTexts
(
)
;
}
const
auto
firstPoint
=
aRange
.
StartRef
(
)
.
IsInTextNode
(
)
?
aRange
.
StartRef
(
)
.
AsInText
(
)
:
GetInclusiveNextCharPoint
<
EditorDOMPointInText
>
(
aRange
.
StartRef
(
)
ShouldIgnoreNonEditableSiblingsOrDescendants
(
mScanMode
)
)
;
if
(
!
firstPoint
.
IsSet
(
)
)
{
return
EditorDOMRangeInTexts
(
)
;
}
EditorDOMPointInText
endPoint
;
if
(
aRange
.
EndRef
(
)
.
IsInTextNode
(
)
)
{
endPoint
=
aRange
.
EndRef
(
)
.
AsInText
(
)
;
}
else
{
endPoint
=
GetPreviousCharPoint
<
EditorDOMPointInText
>
(
aRange
.
EndRef
(
)
ShouldIgnoreNonEditableSiblingsOrDescendants
(
mScanMode
)
)
;
if
(
endPoint
.
IsSet
(
)
&
&
endPoint
.
IsAtLastContent
(
)
)
{
MOZ_ALWAYS_TRUE
(
endPoint
.
AdvanceOffset
(
)
)
;
}
}
if
(
!
endPoint
.
IsSet
(
)
|
|
firstPoint
=
=
endPoint
)
{
return
EditorDOMRangeInTexts
(
)
;
}
return
EditorDOMRangeInTexts
(
firstPoint
endPoint
)
;
}
const
WSRunScanner
:
:
VisibleWhiteSpacesData
&
WSRunScanner
:
:
TextFragmentData
:
:
VisibleWhiteSpacesDataRef
(
)
const
{
if
(
mVisibleWhiteSpacesData
.
isSome
(
)
)
{
return
mVisibleWhiteSpacesData
.
ref
(
)
;
}
{
const
bool
mayHaveInvisibleLeadingSpace
=
!
StartsFromNonCollapsibleCharacters
(
)
&
&
!
StartsFromSpecialContent
(
)
;
const
bool
mayHaveInvisibleTrailingWhiteSpace
=
!
EndsByNonCollapsibleCharacters
(
)
&
&
!
EndsBySpecialContent
(
)
&
&
!
EndsByBRElement
(
)
&
&
!
EndsByInvisiblePreformattedLineBreak
(
)
;
if
(
!
mayHaveInvisibleLeadingSpace
&
&
!
mayHaveInvisibleTrailingWhiteSpace
)
{
VisibleWhiteSpacesData
visibleWhiteSpaces
;
if
(
mStart
.
PointRef
(
)
.
IsSet
(
)
)
{
visibleWhiteSpaces
.
SetStartPoint
(
mStart
.
PointRef
(
)
)
;
}
visibleWhiteSpaces
.
SetStartFrom
(
mStart
.
RawReason
(
)
)
;
if
(
mEnd
.
PointRef
(
)
.
IsSet
(
)
)
{
visibleWhiteSpaces
.
SetEndPoint
(
mEnd
.
PointRef
(
)
)
;
}
visibleWhiteSpaces
.
SetEndBy
(
mEnd
.
RawReason
(
)
)
;
mVisibleWhiteSpacesData
.
emplace
(
visibleWhiteSpaces
)
;
return
mVisibleWhiteSpacesData
.
ref
(
)
;
}
}
const
EditorDOMRange
&
leadingWhiteSpaceRange
=
InvisibleLeadingWhiteSpaceRangeRef
(
)
;
const
bool
maybeHaveLeadingWhiteSpaces
=
leadingWhiteSpaceRange
.
StartRef
(
)
.
IsSet
(
)
|
|
leadingWhiteSpaceRange
.
EndRef
(
)
.
IsSet
(
)
;
if
(
maybeHaveLeadingWhiteSpaces
&
&
leadingWhiteSpaceRange
.
StartRef
(
)
=
=
mStart
.
PointRef
(
)
&
&
leadingWhiteSpaceRange
.
EndRef
(
)
=
=
mEnd
.
PointRef
(
)
)
{
mVisibleWhiteSpacesData
.
emplace
(
VisibleWhiteSpacesData
(
)
)
;
return
mVisibleWhiteSpacesData
.
ref
(
)
;
}
const
EditorDOMRange
&
trailingWhiteSpaceRange
=
InvisibleTrailingWhiteSpaceRangeRef
(
)
;
const
bool
maybeHaveTrailingWhiteSpaces
=
trailingWhiteSpaceRange
.
StartRef
(
)
.
IsSet
(
)
|
|
trailingWhiteSpaceRange
.
EndRef
(
)
.
IsSet
(
)
;
if
(
maybeHaveTrailingWhiteSpaces
&
&
trailingWhiteSpaceRange
.
StartRef
(
)
=
=
mStart
.
PointRef
(
)
&
&
trailingWhiteSpaceRange
.
EndRef
(
)
=
=
mEnd
.
PointRef
(
)
)
{
mVisibleWhiteSpacesData
.
emplace
(
VisibleWhiteSpacesData
(
)
)
;
return
mVisibleWhiteSpacesData
.
ref
(
)
;
}
if
(
!
StartsFromHardLineBreak
(
)
&
&
!
StartsFromInlineEditingHostBoundary
(
)
)
{
VisibleWhiteSpacesData
visibleWhiteSpaces
;
if
(
mStart
.
PointRef
(
)
.
IsSet
(
)
)
{
visibleWhiteSpaces
.
SetStartPoint
(
mStart
.
PointRef
(
)
)
;
}
visibleWhiteSpaces
.
SetStartFrom
(
mStart
.
RawReason
(
)
)
;
if
(
!
maybeHaveTrailingWhiteSpaces
)
{
visibleWhiteSpaces
.
SetEndPoint
(
mEnd
.
PointRef
(
)
)
;
visibleWhiteSpaces
.
SetEndBy
(
mEnd
.
RawReason
(
)
)
;
mVisibleWhiteSpacesData
=
Some
(
visibleWhiteSpaces
)
;
return
mVisibleWhiteSpacesData
.
ref
(
)
;
}
if
(
trailingWhiteSpaceRange
.
StartRef
(
)
.
IsSet
(
)
)
{
visibleWhiteSpaces
.
SetEndPoint
(
trailingWhiteSpaceRange
.
StartRef
(
)
)
;
}
visibleWhiteSpaces
.
SetEndByTrailingWhiteSpaces
(
)
;
mVisibleWhiteSpacesData
.
emplace
(
visibleWhiteSpaces
)
;
return
mVisibleWhiteSpacesData
.
ref
(
)
;
}
MOZ_ASSERT
(
StartsFromHardLineBreak
(
)
|
|
StartsFromInlineEditingHostBoundary
(
)
)
;
MOZ_ASSERT
(
maybeHaveLeadingWhiteSpaces
)
;
VisibleWhiteSpacesData
visibleWhiteSpaces
;
if
(
leadingWhiteSpaceRange
.
EndRef
(
)
.
IsSet
(
)
)
{
visibleWhiteSpaces
.
SetStartPoint
(
leadingWhiteSpaceRange
.
EndRef
(
)
)
;
}
visibleWhiteSpaces
.
SetStartFromLeadingWhiteSpaces
(
)
;
if
(
!
EndsByBlockBoundary
(
)
&
&
!
EndsByInlineEditingHostBoundary
(
)
)
{
if
(
mEnd
.
PointRef
(
)
.
IsSet
(
)
)
{
visibleWhiteSpaces
.
SetEndPoint
(
mEnd
.
PointRef
(
)
)
;
}
visibleWhiteSpaces
.
SetEndBy
(
mEnd
.
RawReason
(
)
)
;
mVisibleWhiteSpacesData
.
emplace
(
visibleWhiteSpaces
)
;
return
mVisibleWhiteSpacesData
.
ref
(
)
;
}
MOZ_ASSERT
(
EndsByBlockBoundary
(
)
|
|
EndsByInlineEditingHostBoundary
(
)
)
;
if
(
!
maybeHaveTrailingWhiteSpaces
)
{
visibleWhiteSpaces
.
SetEndPoint
(
mEnd
.
PointRef
(
)
)
;
visibleWhiteSpaces
.
SetEndBy
(
mEnd
.
RawReason
(
)
)
;
mVisibleWhiteSpacesData
.
emplace
(
visibleWhiteSpaces
)
;
return
mVisibleWhiteSpacesData
.
ref
(
)
;
}
if
(
trailingWhiteSpaceRange
.
StartRef
(
)
.
IsSet
(
)
)
{
visibleWhiteSpaces
.
SetEndPoint
(
trailingWhiteSpaceRange
.
StartRef
(
)
)
;
}
visibleWhiteSpaces
.
SetEndByTrailingWhiteSpaces
(
)
;
mVisibleWhiteSpacesData
.
emplace
(
visibleWhiteSpaces
)
;
return
mVisibleWhiteSpacesData
.
ref
(
)
;
}
ReplaceRangeData
WSRunScanner
:
:
TextFragmentData
:
:
GetReplaceRangeDataAtEndOfDeletionRange
(
const
TextFragmentData
&
aTextFragmentDataAtStartToDelete
)
const
{
const
EditorDOMPoint
&
startToDelete
=
aTextFragmentDataAtStartToDelete
.
ScanStartRef
(
)
;
const
EditorDOMPoint
&
endToDelete
=
mScanStartPoint
;
MOZ_ASSERT
(
startToDelete
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
endToDelete
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
startToDelete
.
EqualsOrIsBefore
(
endToDelete
)
)
;
if
(
EndRef
(
)
.
EqualsOrIsBefore
(
endToDelete
)
)
{
return
ReplaceRangeData
(
)
;
}
const
EditorDOMRange
invisibleTrailingWhiteSpaceRangeAtEnd
=
GetNewInvisibleTrailingWhiteSpaceRangeIfSplittingAt
(
endToDelete
)
;
if
(
invisibleTrailingWhiteSpaceRangeAtEnd
.
IsPositioned
(
)
)
{
if
(
invisibleTrailingWhiteSpaceRangeAtEnd
.
Collapsed
(
)
)
{
return
ReplaceRangeData
(
)
;
}
MOZ_ASSERT
(
invisibleTrailingWhiteSpaceRangeAtEnd
.
StartRef
(
)
=
=
endToDelete
)
;
return
ReplaceRangeData
(
invisibleTrailingWhiteSpaceRangeAtEnd
u
"
"
_ns
)
;
}
const
VisibleWhiteSpacesData
&
nonPreformattedVisibleWhiteSpacesAtEnd
=
VisibleWhiteSpacesDataRef
(
)
;
if
(
!
nonPreformattedVisibleWhiteSpacesAtEnd
.
IsInitialized
(
)
)
{
return
ReplaceRangeData
(
)
;
}
const
PointPosition
pointPositionWithNonPreformattedVisibleWhiteSpacesAtEnd
=
nonPreformattedVisibleWhiteSpacesAtEnd
.
ComparePoint
(
endToDelete
)
;
if
(
pointPositionWithNonPreformattedVisibleWhiteSpacesAtEnd
!
=
PointPosition
:
:
StartOfFragment
&
&
pointPositionWithNonPreformattedVisibleWhiteSpacesAtEnd
!
=
PointPosition
:
:
MiddleOfFragment
)
{
return
ReplaceRangeData
(
)
;
}
if
(
!
aTextFragmentDataAtStartToDelete
.
FollowingContentMayBecomeFirstVisibleContent
(
startToDelete
)
)
{
return
ReplaceRangeData
(
)
;
}
auto
nextCharOfStartOfEnd
=
GetInclusiveNextCharPoint
<
EditorDOMPointInText
>
(
endToDelete
ShouldIgnoreNonEditableSiblingsOrDescendants
(
mScanMode
)
)
;
if
(
!
nextCharOfStartOfEnd
.
IsSet
(
)
|
|
nextCharOfStartOfEnd
.
IsEndOfContainer
(
)
|
|
!
nextCharOfStartOfEnd
.
IsCharCollapsibleASCIISpace
(
)
)
{
return
ReplaceRangeData
(
)
;
}
if
(
nextCharOfStartOfEnd
.
IsStartOfContainer
(
)
|
|
nextCharOfStartOfEnd
.
IsPreviousCharCollapsibleASCIISpace
(
)
)
{
nextCharOfStartOfEnd
=
aTextFragmentDataAtStartToDelete
.
GetFirstASCIIWhiteSpacePointCollapsedTo
<
EditorDOMPointInText
>
(
nextCharOfStartOfEnd
nsIEditor
:
:
eNone
ShouldIgnoreNonEditableSiblingsOrDescendants
(
mScanMode
)
)
;
}
const
auto
endOfCollapsibleASCIIWhiteSpaces
=
aTextFragmentDataAtStartToDelete
.
GetEndOfCollapsibleASCIIWhiteSpaces
<
EditorDOMPointInText
>
(
nextCharOfStartOfEnd
nsIEditor
:
:
eNone
ShouldIgnoreNonEditableSiblingsOrDescendants
(
mScanMode
)
)
;
return
ReplaceRangeData
(
nextCharOfStartOfEnd
endOfCollapsibleASCIIWhiteSpaces
nsDependentSubstring
(
&
HTMLEditUtils
:
:
kNBSP
1
)
)
;
}
ReplaceRangeData
WSRunScanner
:
:
TextFragmentData
:
:
GetReplaceRangeDataAtStartOfDeletionRange
(
const
TextFragmentData
&
aTextFragmentDataAtEndToDelete
)
const
{
const
EditorDOMPoint
&
startToDelete
=
mScanStartPoint
;
const
EditorDOMPoint
&
endToDelete
=
aTextFragmentDataAtEndToDelete
.
ScanStartRef
(
)
;
MOZ_ASSERT
(
startToDelete
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
endToDelete
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
startToDelete
.
EqualsOrIsBefore
(
endToDelete
)
)
;
if
(
startToDelete
.
EqualsOrIsBefore
(
StartRef
(
)
)
)
{
return
ReplaceRangeData
(
)
;
}
const
EditorDOMRange
invisibleLeadingWhiteSpaceRangeAtStart
=
GetNewInvisibleLeadingWhiteSpaceRangeIfSplittingAt
(
startToDelete
)
;
if
(
invisibleLeadingWhiteSpaceRangeAtStart
.
IsPositioned
(
)
)
{
if
(
invisibleLeadingWhiteSpaceRangeAtStart
.
Collapsed
(
)
)
{
return
ReplaceRangeData
(
)
;
}
return
ReplaceRangeData
(
invisibleLeadingWhiteSpaceRangeAtStart
u
"
"
_ns
)
;
}
const
VisibleWhiteSpacesData
&
nonPreformattedVisibleWhiteSpacesAtStart
=
VisibleWhiteSpacesDataRef
(
)
;
if
(
!
nonPreformattedVisibleWhiteSpacesAtStart
.
IsInitialized
(
)
)
{
return
ReplaceRangeData
(
)
;
}
const
PointPosition
pointPositionWithNonPreformattedVisibleWhiteSpacesAtStart
=
nonPreformattedVisibleWhiteSpacesAtStart
.
ComparePoint
(
startToDelete
)
;
if
(
pointPositionWithNonPreformattedVisibleWhiteSpacesAtStart
!
=
PointPosition
:
:
MiddleOfFragment
&
&
pointPositionWithNonPreformattedVisibleWhiteSpacesAtStart
!
=
PointPosition
:
:
EndOfFragment
)
{
return
ReplaceRangeData
(
)
;
}
if
(
!
aTextFragmentDataAtEndToDelete
.
PrecedingContentMayBecomeInvisible
(
endToDelete
)
)
{
return
ReplaceRangeData
(
)
;
}
auto
atPreviousCharOfStart
=
GetPreviousCharPoint
<
EditorDOMPointInText
>
(
startToDelete
ShouldIgnoreNonEditableSiblingsOrDescendants
(
mScanMode
)
)
;
if
(
!
atPreviousCharOfStart
.
IsSet
(
)
|
|
atPreviousCharOfStart
.
IsEndOfContainer
(
)
|
|
!
atPreviousCharOfStart
.
IsCharCollapsibleASCIISpace
(
)
)
{
return
ReplaceRangeData
(
)
;
}
if
(
atPreviousCharOfStart
.
IsStartOfContainer
(
)
|
|
atPreviousCharOfStart
.
IsPreviousCharASCIISpace
(
)
)
{
atPreviousCharOfStart
=
GetFirstASCIIWhiteSpacePointCollapsedTo
<
EditorDOMPointInText
>
(
atPreviousCharOfStart
nsIEditor
:
:
eNone
ShouldIgnoreNonEditableSiblingsOrDescendants
(
mScanMode
)
)
;
}
const
auto
endOfCollapsibleASCIIWhiteSpaces
=
GetEndOfCollapsibleASCIIWhiteSpaces
<
EditorDOMPointInText
>
(
atPreviousCharOfStart
nsIEditor
:
:
eNone
ShouldIgnoreNonEditableSiblingsOrDescendants
(
mScanMode
)
)
;
return
ReplaceRangeData
(
atPreviousCharOfStart
endOfCollapsibleASCIIWhiteSpaces
nsDependentSubstring
(
&
HTMLEditUtils
:
:
kNBSP
1
)
)
;
}
template
<
typename
EditorDOMPointType
typename
PT
typename
CT
>
EditorDOMPointType
WSRunScanner
:
:
TextFragmentData
:
:
GetInclusiveNextCharPoint
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
BlockInlineCheck
aBlockInlineCheck
IgnoreNonEditableNodes
aIgnoreNonEditableNodes
const
nsIContent
*
aFollowingLimiterContent
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
if
(
NS_WARN_IF
(
!
aPoint
.
IsInContentNode
(
)
)
)
{
return
EditorDOMPointType
(
)
;
}
const
EditorRawDOMPoint
point
=
[
&
]
(
)
{
nsIContent
*
const
child
=
aPoint
.
CanContainerHaveChildren
(
)
?
aPoint
.
GetChild
(
)
:
nullptr
;
if
(
!
child
)
{
return
aPoint
.
template
To
<
EditorRawDOMPoint
>
(
)
;
}
if
(
!
child
-
>
HasChildNodes
(
)
)
{
return
EditorRawDOMPoint
(
child
0
)
;
}
nsIContent
*
const
leafContent
=
HTMLEditUtils
:
:
GetFirstLeafContent
(
*
child
{
LeafNodeType
:
:
OnlyLeafNode
}
)
;
if
(
NS_WARN_IF
(
!
leafContent
)
)
{
return
EditorRawDOMPoint
(
)
;
}
return
EditorRawDOMPoint
(
leafContent
0
)
;
}
(
)
;
if
(
!
point
.
IsSet
(
)
)
{
return
EditorDOMPointType
(
)
;
}
if
(
point
.
IsInTextNode
(
)
&
&
(
aIgnoreNonEditableNodes
=
=
IgnoreNonEditableNodes
:
:
No
|
|
HTMLEditUtils
:
:
IsSimplyEditableNode
(
*
point
.
GetContainer
(
)
)
)
&
&
!
point
.
IsEndOfContainer
(
)
)
{
return
EditorDOMPointType
(
point
.
ContainerAs
<
Text
>
(
)
point
.
Offset
(
)
)
;
}
if
(
point
.
GetContainer
(
)
=
=
aFollowingLimiterContent
)
{
return
EditorDOMPointType
(
)
;
}
const
Element
*
const
editableBlockElementOrInlineEditingHostOrNonEditableRootElement
=
HTMLEditUtils
:
:
GetInclusiveAncestorElement
(
*
aPoint
.
template
ContainerAs
<
nsIContent
>
(
)
HTMLEditUtils
:
:
IsSimplyEditableNode
(
*
aPoint
.
template
ContainerAs
<
nsIContent
>
(
)
)
?
kScanEditableRootAncestorTypes
:
kScanAnyRootAncestorTypes
aBlockInlineCheck
)
;
if
(
NS_WARN_IF
(
!
editableBlockElementOrInlineEditingHostOrNonEditableRootElement
)
)
{
return
EditorDOMPointType
(
)
;
}
const
auto
leafNodeTypes
=
aIgnoreNonEditableNodes
=
=
IgnoreNonEditableNodes
:
:
Yes
?
LeafNodeTypes
(
LeafNodeType
:
:
LeafNodeOrNonEditableNode
)
:
LeafNodeTypes
(
LeafNodeType
:
:
OnlyLeafNode
)
;
for
(
nsIContent
*
nextContent
=
HTMLEditUtils
:
:
GetNextLeafContentOrNextBlockElement
(
*
point
.
ContainerAs
<
nsIContent
>
(
)
leafNodeTypes
aBlockInlineCheck
editableBlockElementOrInlineEditingHostOrNonEditableRootElement
)
;
nextContent
;
nextContent
=
HTMLEditUtils
:
:
GetNextLeafContentOrNextBlockElement
(
*
nextContent
leafNodeTypes
aBlockInlineCheck
editableBlockElementOrInlineEditingHostOrNonEditableRootElement
)
)
{
if
(
!
nextContent
-
>
IsText
(
)
|
|
(
aIgnoreNonEditableNodes
=
=
IgnoreNonEditableNodes
:
:
Yes
&
&
!
HTMLEditUtils
:
:
IsSimplyEditableNode
(
*
nextContent
)
)
)
{
if
(
nextContent
=
=
aFollowingLimiterContent
)
{
break
;
}
continue
;
}
return
EditorDOMPointType
(
nextContent
-
>
AsText
(
)
0
)
;
}
return
EditorDOMPointType
(
)
;
}
template
<
typename
EditorDOMPointType
typename
PT
typename
CT
>
EditorDOMPointType
WSRunScanner
:
:
TextFragmentData
:
:
GetPreviousCharPoint
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
BlockInlineCheck
aBlockInlineCheck
IgnoreNonEditableNodes
aIgnoreNonEditableNodes
const
nsIContent
*
aPrecedingLimiterContent
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
if
(
NS_WARN_IF
(
!
aPoint
.
IsInContentNode
(
)
)
)
{
return
EditorDOMPointType
(
)
;
}
const
EditorRawDOMPoint
point
=
[
&
]
(
)
{
nsIContent
*
const
previousChild
=
aPoint
.
CanContainerHaveChildren
(
)
?
aPoint
.
GetPreviousSiblingOfChild
(
)
:
nullptr
;
if
(
!
previousChild
)
{
return
aPoint
.
template
To
<
EditorRawDOMPoint
>
(
)
;
}
if
(
!
previousChild
-
>
HasChildren
(
)
)
{
return
EditorRawDOMPoint
:
:
AtEndOf
(
*
previousChild
)
;
}
nsIContent
*
const
leafContent
=
HTMLEditUtils
:
:
GetLastLeafContent
(
*
previousChild
{
LeafNodeType
:
:
OnlyLeafNode
}
)
;
if
(
NS_WARN_IF
(
!
leafContent
)
)
{
return
EditorRawDOMPoint
(
)
;
}
return
EditorRawDOMPoint
:
:
AtEndOf
(
*
leafContent
)
;
}
(
)
;
if
(
!
point
.
IsSet
(
)
)
{
return
EditorDOMPointType
(
)
;
}
if
(
point
.
IsInTextNode
(
)
&
&
(
aIgnoreNonEditableNodes
=
=
IgnoreNonEditableNodes
:
:
No
|
|
HTMLEditUtils
:
:
IsSimplyEditableNode
(
*
point
.
GetContainer
(
)
)
)
&
&
!
point
.
IsStartOfContainer
(
)
)
{
return
EditorDOMPointType
(
point
.
ContainerAs
<
Text
>
(
)
point
.
Offset
(
)
-
1
)
;
}
if
(
point
.
GetContainer
(
)
=
=
aPrecedingLimiterContent
)
{
return
EditorDOMPointType
(
)
;
}
const
Element
*
const
editableBlockElementOrInlineEditingHostOrNonEditableRootElement
=
HTMLEditUtils
:
:
GetInclusiveAncestorElement
(
*
aPoint
.
template
ContainerAs
<
nsIContent
>
(
)
HTMLEditUtils
:
:
IsSimplyEditableNode
(
*
aPoint
.
template
ContainerAs
<
nsIContent
>
(
)
)
?
kScanEditableRootAncestorTypes
:
kScanAnyRootAncestorTypes
aBlockInlineCheck
)
;
if
(
NS_WARN_IF
(
!
editableBlockElementOrInlineEditingHostOrNonEditableRootElement
)
)
{
return
EditorDOMPointType
(
)
;
}
const
auto
leafNodeTypes
=
aIgnoreNonEditableNodes
=
=
IgnoreNonEditableNodes
:
:
Yes
?
LeafNodeTypes
(
LeafNodeType
:
:
LeafNodeOrNonEditableNode
)
:
LeafNodeTypes
(
LeafNodeType
:
:
OnlyLeafNode
)
;
for
(
nsIContent
*
previousContent
=
HTMLEditUtils
:
:
GetPreviousLeafContentOrPreviousBlockElement
(
*
point
.
ContainerAs
<
nsIContent
>
(
)
leafNodeTypes
aBlockInlineCheck
editableBlockElementOrInlineEditingHostOrNonEditableRootElement
)
;
previousContent
;
previousContent
=
HTMLEditUtils
:
:
GetPreviousLeafContentOrPreviousBlockElement
(
*
previousContent
leafNodeTypes
aBlockInlineCheck
editableBlockElementOrInlineEditingHostOrNonEditableRootElement
)
)
{
if
(
!
previousContent
-
>
IsText
(
)
|
|
(
aIgnoreNonEditableNodes
=
=
IgnoreNonEditableNodes
:
:
Yes
&
&
!
HTMLEditUtils
:
:
IsSimplyEditableNode
(
*
previousContent
)
)
)
{
if
(
previousContent
=
=
aPrecedingLimiterContent
)
{
break
;
}
continue
;
}
return
EditorDOMPointType
(
previousContent
-
>
AsText
(
)
previousContent
-
>
AsText
(
)
-
>
TextLength
(
)
?
previousContent
-
>
AsText
(
)
-
>
TextLength
(
)
-
1
:
0
)
;
}
return
EditorDOMPointType
(
)
;
}
template
<
typename
EditorDOMPointType
>
EditorDOMPointType
WSRunScanner
:
:
TextFragmentData
:
:
GetEndOfCollapsibleASCIIWhiteSpaces
(
const
EditorDOMPointInText
&
aPointAtASCIIWhiteSpace
nsIEditor
:
:
EDirection
aDirectionToDelete
BlockInlineCheck
aBlockInlineCheck
IgnoreNonEditableNodes
aIgnoreNonEditableNodes
const
nsIContent
*
aFollowingLimiterContent
)
{
MOZ_ASSERT
(
aDirectionToDelete
=
=
nsIEditor
:
:
eNone
|
|
aDirectionToDelete
=
=
nsIEditor
:
:
eNext
|
|
aDirectionToDelete
=
=
nsIEditor
:
:
ePrevious
)
;
MOZ_ASSERT
(
aPointAtASCIIWhiteSpace
.
IsSet
(
)
)
;
MOZ_ASSERT
(
!
aPointAtASCIIWhiteSpace
.
IsEndOfContainer
(
)
)
;
MOZ_ASSERT_IF
(
!
EditorUtils
:
:
IsNewLinePreformatted
(
*
aPointAtASCIIWhiteSpace
.
ContainerAs
<
Text
>
(
)
)
aPointAtASCIIWhiteSpace
.
IsCharCollapsibleASCIISpace
(
)
)
;
MOZ_ASSERT_IF
(
EditorUtils
:
:
IsNewLinePreformatted
(
*
aPointAtASCIIWhiteSpace
.
ContainerAs
<
Text
>
(
)
)
aPointAtASCIIWhiteSpace
.
IsCharASCIISpace
(
)
)
;
bool
hasSeenPreformattedNewLine
=
aPointAtASCIIWhiteSpace
.
IsCharPreformattedNewLine
(
)
;
auto
NeedToScanFollowingWhiteSpaces
=
[
&
hasSeenPreformattedNewLine
&
aDirectionToDelete
]
(
const
EditorDOMPointInText
&
aAtNextVisibleCharacter
)
-
>
bool
{
MOZ_ASSERT
(
!
aAtNextVisibleCharacter
.
IsEndOfContainer
(
)
)
;
return
!
hasSeenPreformattedNewLine
&
&
aDirectionToDelete
=
=
nsIEditor
:
:
eNext
&
&
aAtNextVisibleCharacter
.
IsCharPreformattedNewLineCollapsedWithWhiteSpaces
(
)
;
}
;
auto
ScanNextNonCollapsibleChar
=
[
&
hasSeenPreformattedNewLine
&
NeedToScanFollowingWhiteSpaces
]
(
const
EditorDOMPointInText
&
aPoint
)
-
>
EditorDOMPointInText
{
Maybe
<
uint32_t
>
nextVisibleCharOffset
=
HTMLEditUtils
:
:
GetNextNonCollapsibleCharOffset
(
aPoint
)
;
if
(
!
nextVisibleCharOffset
.
isSome
(
)
)
{
return
EditorDOMPointInText
(
)
;
}
EditorDOMPointInText
atNextVisibleChar
(
aPoint
.
ContainerAs
<
Text
>
(
)
nextVisibleCharOffset
.
value
(
)
)
;
if
(
!
NeedToScanFollowingWhiteSpaces
(
atNextVisibleChar
)
)
{
return
atNextVisibleChar
;
}
hasSeenPreformattedNewLine
|
=
atNextVisibleChar
.
IsCharPreformattedNewLine
(
)
;
nextVisibleCharOffset
=
HTMLEditUtils
:
:
GetNextNonCollapsibleCharOffset
(
atNextVisibleChar
)
;
if
(
nextVisibleCharOffset
.
isSome
(
)
)
{
MOZ_ASSERT
(
aPoint
.
ContainerAs
<
Text
>
(
)
=
=
atNextVisibleChar
.
ContainerAs
<
Text
>
(
)
)
;
return
EditorDOMPointInText
(
atNextVisibleChar
.
ContainerAs
<
Text
>
(
)
nextVisibleCharOffset
.
value
(
)
)
;
}
return
EditorDOMPointInText
(
)
;
}
;
if
(
!
aPointAtASCIIWhiteSpace
.
IsAtLastContent
(
)
)
{
const
EditorDOMPointInText
atNextVisibleChar
(
ScanNextNonCollapsibleChar
(
aPointAtASCIIWhiteSpace
)
)
;
if
(
atNextVisibleChar
.
IsSet
(
)
)
{
return
atNextVisibleChar
.
To
<
EditorDOMPointType
>
(
)
;
}
}
EditorDOMPointInText
afterLastWhiteSpace
=
EditorDOMPointInText
:
:
AtEndOf
(
*
aPointAtASCIIWhiteSpace
.
ContainerAs
<
Text
>
(
)
)
;
for
(
EditorDOMPointInText
atEndOfPreviousTextNode
=
afterLastWhiteSpace
;
;
)
{
const
auto
atStartOfNextTextNode
=
TextFragmentData
:
:
GetInclusiveNextCharPoint
<
EditorDOMPointInText
>
(
atEndOfPreviousTextNode
aBlockInlineCheck
aIgnoreNonEditableNodes
aFollowingLimiterContent
)
;
if
(
!
atStartOfNextTextNode
.
IsSet
(
)
)
{
return
afterLastWhiteSpace
.
To
<
EditorDOMPointType
>
(
)
;
}
if
(
atStartOfNextTextNode
.
IsContainerEmpty
(
)
)
{
atEndOfPreviousTextNode
=
atStartOfNextTextNode
;
continue
;
}
if
(
!
atStartOfNextTextNode
.
IsCharCollapsibleASCIISpace
(
)
&
&
!
NeedToScanFollowingWhiteSpaces
(
atStartOfNextTextNode
)
)
{
return
afterLastWhiteSpace
.
To
<
EditorDOMPointType
>
(
)
;
}
const
EditorDOMPointInText
atNextVisibleChar
(
ScanNextNonCollapsibleChar
(
atStartOfNextTextNode
)
)
;
if
(
atNextVisibleChar
.
IsSet
(
)
)
{
return
atNextVisibleChar
.
To
<
EditorDOMPointType
>
(
)
;
}
afterLastWhiteSpace
=
atEndOfPreviousTextNode
=
EditorDOMPointInText
:
:
AtEndOf
(
*
atStartOfNextTextNode
.
ContainerAs
<
Text
>
(
)
)
;
}
}
template
<
typename
EditorDOMPointType
>
EditorDOMPointType
WSRunScanner
:
:
TextFragmentData
:
:
GetFirstASCIIWhiteSpacePointCollapsedTo
(
const
EditorDOMPointInText
&
aPointAtASCIIWhiteSpace
nsIEditor
:
:
EDirection
aDirectionToDelete
BlockInlineCheck
aBlockInlineCheck
IgnoreNonEditableNodes
aIgnoreNonEditableNodes
const
nsIContent
*
aPrecedingLimiterContent
)
{
MOZ_ASSERT
(
aDirectionToDelete
=
=
nsIEditor
:
:
eNone
|
|
aDirectionToDelete
=
=
nsIEditor
:
:
eNext
|
|
aDirectionToDelete
=
=
nsIEditor
:
:
ePrevious
)
;
MOZ_ASSERT
(
aPointAtASCIIWhiteSpace
.
IsSet
(
)
)
;
MOZ_ASSERT
(
!
aPointAtASCIIWhiteSpace
.
IsEndOfContainer
(
)
)
;
MOZ_ASSERT_IF
(
!
EditorUtils
:
:
IsNewLinePreformatted
(
*
aPointAtASCIIWhiteSpace
.
ContainerAs
<
Text
>
(
)
)
aPointAtASCIIWhiteSpace
.
IsCharCollapsibleASCIISpace
(
)
)
;
MOZ_ASSERT_IF
(
EditorUtils
:
:
IsNewLinePreformatted
(
*
aPointAtASCIIWhiteSpace
.
ContainerAs
<
Text
>
(
)
)
aPointAtASCIIWhiteSpace
.
IsCharASCIISpace
(
)
)
;
bool
hasSeenPreformattedNewLine
=
aPointAtASCIIWhiteSpace
.
IsCharPreformattedNewLine
(
)
;
auto
NeedToScanPrecedingWhiteSpaces
=
[
&
hasSeenPreformattedNewLine
&
aDirectionToDelete
]
(
const
EditorDOMPointInText
&
aAtPreviousVisibleCharacter
)
-
>
bool
{
MOZ_ASSERT
(
!
aAtPreviousVisibleCharacter
.
IsEndOfContainer
(
)
)
;
return
!
hasSeenPreformattedNewLine
&
&
aDirectionToDelete
=
=
nsIEditor
:
:
ePrevious
&
&
aAtPreviousVisibleCharacter
.
IsCharPreformattedNewLineCollapsedWithWhiteSpaces
(
)
;
}
;
auto
ScanPreviousNonCollapsibleChar
=
[
&
hasSeenPreformattedNewLine
&
NeedToScanPrecedingWhiteSpaces
]
(
const
EditorDOMPointInText
&
aPoint
)
-
>
EditorDOMPointInText
{
Maybe
<
uint32_t
>
previousVisibleCharOffset
=
HTMLEditUtils
:
:
GetPreviousNonCollapsibleCharOffset
(
aPoint
)
;
if
(
previousVisibleCharOffset
.
isNothing
(
)
)
{
return
EditorDOMPointInText
(
)
;
}
EditorDOMPointInText
atPreviousVisibleCharacter
(
aPoint
.
ContainerAs
<
Text
>
(
)
previousVisibleCharOffset
.
value
(
)
)
;
if
(
!
NeedToScanPrecedingWhiteSpaces
(
atPreviousVisibleCharacter
)
)
{
return
atPreviousVisibleCharacter
.
NextPoint
(
)
;
}
hasSeenPreformattedNewLine
|
=
atPreviousVisibleCharacter
.
IsCharPreformattedNewLine
(
)
;
previousVisibleCharOffset
=
HTMLEditUtils
:
:
GetPreviousNonCollapsibleCharOffset
(
atPreviousVisibleCharacter
)
;
if
(
previousVisibleCharOffset
.
isSome
(
)
)
{
MOZ_ASSERT
(
aPoint
.
ContainerAs
<
Text
>
(
)
=
=
atPreviousVisibleCharacter
.
ContainerAs
<
Text
>
(
)
)
;
return
EditorDOMPointInText
(
atPreviousVisibleCharacter
.
ContainerAs
<
Text
>
(
)
previousVisibleCharOffset
.
value
(
)
+
1
)
;
}
return
EditorDOMPointInText
(
)
;
}
;
if
(
!
aPointAtASCIIWhiteSpace
.
IsStartOfContainer
(
)
)
{
EditorDOMPointInText
atFirstASCIIWhiteSpace
(
ScanPreviousNonCollapsibleChar
(
aPointAtASCIIWhiteSpace
)
)
;
if
(
atFirstASCIIWhiteSpace
.
IsSet
(
)
)
{
return
atFirstASCIIWhiteSpace
.
To
<
EditorDOMPointType
>
(
)
;
}
}
EditorDOMPointInText
atLastWhiteSpace
=
EditorDOMPointInText
(
aPointAtASCIIWhiteSpace
.
ContainerAs
<
Text
>
(
)
0u
)
;
for
(
EditorDOMPointInText
atStartOfPreviousTextNode
=
atLastWhiteSpace
;
;
)
{
const
auto
atLastCharOfPreviousTextNode
=
TextFragmentData
:
:
GetPreviousCharPoint
<
EditorDOMPointInText
>
(
atStartOfPreviousTextNode
aBlockInlineCheck
aIgnoreNonEditableNodes
aPrecedingLimiterContent
)
;
if
(
!
atLastCharOfPreviousTextNode
.
IsSet
(
)
)
{
return
atLastWhiteSpace
.
To
<
EditorDOMPointType
>
(
)
;
}
if
(
atLastCharOfPreviousTextNode
.
IsContainerEmpty
(
)
)
{
atStartOfPreviousTextNode
=
atLastCharOfPreviousTextNode
;
continue
;
}
if
(
!
atLastCharOfPreviousTextNode
.
IsCharCollapsibleASCIISpace
(
)
&
&
!
NeedToScanPrecedingWhiteSpaces
(
atLastCharOfPreviousTextNode
)
)
{
return
atLastWhiteSpace
.
To
<
EditorDOMPointType
>
(
)
;
}
const
EditorDOMPointInText
atFirstASCIIWhiteSpace
(
ScanPreviousNonCollapsibleChar
(
atLastCharOfPreviousTextNode
)
)
;
if
(
atFirstASCIIWhiteSpace
.
IsSet
(
)
)
{
return
atFirstASCIIWhiteSpace
.
To
<
EditorDOMPointType
>
(
)
;
}
atLastWhiteSpace
=
atStartOfPreviousTextNode
=
EditorDOMPointInText
(
atLastCharOfPreviousTextNode
.
ContainerAs
<
Text
>
(
)
0u
)
;
}
}
EditorDOMPointInText
WSRunScanner
:
:
TextFragmentData
:
:
GetPreviousNBSPPointIfNeedToReplaceWithASCIIWhiteSpace
(
const
EditorDOMPoint
&
aPointToInsert
)
const
{
MOZ_ASSERT
(
aPointToInsert
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
VisibleWhiteSpacesDataRef
(
)
.
IsInitialized
(
)
)
;
NS_ASSERTION
(
VisibleWhiteSpacesDataRef
(
)
.
ComparePoint
(
aPointToInsert
)
=
=
PointPosition
:
:
MiddleOfFragment
|
|
VisibleWhiteSpacesDataRef
(
)
.
ComparePoint
(
aPointToInsert
)
=
=
PointPosition
:
:
EndOfFragment
"
Previous
char
of
aPoint
should
be
in
the
visible
white
-
spaces
"
)
;
const
auto
atPreviousChar
=
GetPreviousCharPoint
<
EditorDOMPointInText
>
(
aPointToInsert
ShouldIgnoreNonEditableSiblingsOrDescendants
(
mScanMode
)
)
;
if
(
!
atPreviousChar
.
IsSet
(
)
|
|
atPreviousChar
.
IsEndOfContainer
(
)
|
|
!
atPreviousChar
.
IsCharNBSP
(
)
|
|
EditorUtils
:
:
IsWhiteSpacePreformatted
(
*
atPreviousChar
.
ContainerAs
<
Text
>
(
)
)
)
{
return
EditorDOMPointInText
(
)
;
}
const
auto
atPreviousCharOfPreviousChar
=
GetPreviousCharPoint
<
EditorDOMPointInText
>
(
atPreviousChar
ShouldIgnoreNonEditableSiblingsOrDescendants
(
mScanMode
)
)
;
if
(
atPreviousCharOfPreviousChar
.
IsSet
(
)
)
{
if
(
atPreviousChar
.
ContainerAs
<
Text
>
(
)
!
=
atPreviousCharOfPreviousChar
.
ContainerAs
<
Text
>
(
)
&
&
EditorUtils
:
:
IsWhiteSpacePreformatted
(
*
atPreviousCharOfPreviousChar
.
ContainerAs
<
Text
>
(
)
)
)
{
return
EditorDOMPointInText
(
)
;
}
if
(
!
atPreviousCharOfPreviousChar
.
IsEndOfContainer
(
)
&
&
atPreviousCharOfPreviousChar
.
IsCharASCIISpace
(
)
)
{
return
EditorDOMPointInText
(
)
;
}
return
atPreviousChar
;
}
const
VisibleWhiteSpacesData
&
visibleWhiteSpaces
=
VisibleWhiteSpacesDataRef
(
)
;
if
(
!
visibleWhiteSpaces
.
StartsFromNonCollapsibleCharacters
(
)
&
&
!
visibleWhiteSpaces
.
StartsFromSpecialContent
(
)
)
{
return
EditorDOMPointInText
(
)
;
}
return
atPreviousChar
;
}
EditorDOMPointInText
WSRunScanner
:
:
TextFragmentData
:
:
GetInclusiveNextNBSPPointIfNeedToReplaceWithASCIIWhiteSpace
(
const
EditorDOMPoint
&
aPointToInsert
)
const
{
MOZ_ASSERT
(
aPointToInsert
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
VisibleWhiteSpacesDataRef
(
)
.
IsInitialized
(
)
)
;
NS_ASSERTION
(
VisibleWhiteSpacesDataRef
(
)
.
ComparePoint
(
aPointToInsert
)
=
=
PointPosition
:
:
StartOfFragment
|
|
VisibleWhiteSpacesDataRef
(
)
.
ComparePoint
(
aPointToInsert
)
=
=
PointPosition
:
:
MiddleOfFragment
"
Inclusive
next
char
of
aPointToInsert
should
be
in
the
visible
"
"
white
-
spaces
"
)
;
const
auto
atNextChar
=
GetInclusiveNextCharPoint
<
EditorDOMPointInText
>
(
aPointToInsert
ShouldIgnoreNonEditableSiblingsOrDescendants
(
mScanMode
)
)
;
if
(
!
atNextChar
.
IsSet
(
)
|
|
NS_WARN_IF
(
atNextChar
.
IsEndOfContainer
(
)
)
|
|
!
atNextChar
.
IsCharNBSP
(
)
|
|
EditorUtils
:
:
IsWhiteSpacePreformatted
(
*
atNextChar
.
ContainerAs
<
Text
>
(
)
)
)
{
return
EditorDOMPointInText
(
)
;
}
const
auto
atNextCharOfNextCharOfNBSP
=
GetInclusiveNextCharPoint
<
EditorDOMPointInText
>
(
atNextChar
.
NextPoint
<
EditorRawDOMPointInText
>
(
)
ShouldIgnoreNonEditableSiblingsOrDescendants
(
mScanMode
)
)
;
if
(
atNextCharOfNextCharOfNBSP
.
IsSet
(
)
)
{
if
(
atNextChar
.
ContainerAs
<
Text
>
(
)
!
=
atNextCharOfNextCharOfNBSP
.
ContainerAs
<
Text
>
(
)
&
&
EditorUtils
:
:
IsWhiteSpacePreformatted
(
*
atNextCharOfNextCharOfNBSP
.
ContainerAs
<
Text
>
(
)
)
)
{
return
EditorDOMPointInText
(
)
;
}
if
(
!
atNextCharOfNextCharOfNBSP
.
IsEndOfContainer
(
)
&
&
atNextCharOfNextCharOfNBSP
.
IsCharASCIISpace
(
)
)
{
return
EditorDOMPointInText
(
)
;
}
return
atNextChar
;
}
const
VisibleWhiteSpacesData
&
visibleWhiteSpaces
=
VisibleWhiteSpacesDataRef
(
)
;
if
(
!
visibleWhiteSpaces
.
EndsByNonCollapsibleCharacters
(
)
&
&
!
visibleWhiteSpaces
.
EndsBySpecialContent
(
)
&
&
!
visibleWhiteSpaces
.
EndsByBRElement
(
)
)
{
return
EditorDOMPointInText
(
)
;
}
return
atNextChar
;
}
}
