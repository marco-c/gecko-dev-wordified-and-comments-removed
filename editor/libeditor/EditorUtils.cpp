#
include
"
mozilla
/
EditorUtils
.
h
"
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
mozilla
/
OwningNonNull
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIContentIterator
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsINode
.
h
"
class
nsISupports
;
class
nsRange
;
namespace
mozilla
{
using
namespace
dom
;
DOMIterator
:
:
DOMIterator
(
nsINode
&
aNode
MOZ_GUARD_OBJECT_NOTIFIER_PARAM_IN_IMPL
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
mIter
=
NS_NewContentIterator
(
)
;
DebugOnly
<
nsresult
>
rv
=
mIter
-
>
Init
(
&
aNode
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
}
nsresult
DOMIterator
:
:
Init
(
nsRange
&
aRange
)
{
mIter
=
NS_NewContentIterator
(
)
;
return
mIter
-
>
Init
(
&
aRange
)
;
}
DOMIterator
:
:
DOMIterator
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM_IN_IMPL
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
DOMIterator
:
:
~
DOMIterator
(
)
{
}
void
DOMIterator
:
:
AppendList
(
const
BoolDomIterFunctor
&
functor
nsTArray
<
OwningNonNull
<
nsINode
>
>
&
arrayOfNodes
)
const
{
for
(
;
!
mIter
-
>
IsDone
(
)
;
mIter
-
>
Next
(
)
)
{
nsCOMPtr
<
nsINode
>
node
=
mIter
-
>
GetCurrentNode
(
)
;
if
(
functor
(
node
)
)
{
arrayOfNodes
.
AppendElement
(
*
node
)
;
}
}
}
DOMSubtreeIterator
:
:
DOMSubtreeIterator
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM_IN_IMPL
)
:
DOMIterator
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM_TO_PARENT
)
{
}
nsresult
DOMSubtreeIterator
:
:
Init
(
nsRange
&
aRange
)
{
mIter
=
new
ContentSubtreeIterator
(
)
;
return
mIter
-
>
Init
(
&
aRange
)
;
}
DOMSubtreeIterator
:
:
~
DOMSubtreeIterator
(
)
{
}
bool
EditorUtils
:
:
IsDescendantOf
(
const
nsINode
&
aNode
const
nsINode
&
aParent
EditorRawDOMPoint
*
aOutPoint
)
{
if
(
aOutPoint
)
{
aOutPoint
-
>
Clear
(
)
;
}
if
(
&
aNode
=
=
&
aParent
)
{
return
false
;
}
for
(
const
nsINode
*
node
=
&
aNode
;
node
;
node
=
node
-
>
GetParentNode
(
)
)
{
if
(
node
-
>
GetParentNode
(
)
=
=
&
aParent
)
{
if
(
aOutPoint
)
{
MOZ_ASSERT
(
node
-
>
IsContent
(
)
)
;
aOutPoint
-
>
Set
(
node
-
>
AsContent
(
)
)
;
}
return
true
;
}
}
return
false
;
}
bool
EditorUtils
:
:
IsDescendantOf
(
const
nsINode
&
aNode
const
nsINode
&
aParent
EditorDOMPoint
*
aOutPoint
)
{
MOZ_ASSERT
(
aOutPoint
)
;
aOutPoint
-
>
Clear
(
)
;
if
(
&
aNode
=
=
&
aParent
)
{
return
false
;
}
for
(
const
nsINode
*
node
=
&
aNode
;
node
;
node
=
node
-
>
GetParentNode
(
)
)
{
if
(
node
-
>
GetParentNode
(
)
=
=
&
aParent
)
{
MOZ_ASSERT
(
node
-
>
IsContent
(
)
)
;
aOutPoint
-
>
Set
(
node
-
>
AsContent
(
)
)
;
return
true
;
}
}
return
false
;
}
}
