#
include
"
SetTextTransaction
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
EditorBase
.
h
"
#
include
"
mozilla
/
SelectionState
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
namespace
mozilla
{
using
namespace
dom
;
SetTextTransaction
:
:
SetTextTransaction
(
Text
&
aTextNode
const
nsAString
&
aStringToSet
EditorBase
&
aEditorBase
RangeUpdater
*
aRangeUpdater
)
:
mTextNode
(
&
aTextNode
)
mStringToSet
(
aStringToSet
)
mEditorBase
(
&
aEditorBase
)
mRangeUpdater
(
aRangeUpdater
)
{
}
nsresult
SetTextTransaction
:
:
DoTransaction
(
)
{
if
(
NS_WARN_IF
(
!
mEditorBase
)
|
|
NS_WARN_IF
(
!
mTextNode
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsresult
rv
=
mTextNode
-
>
GetData
(
mPreviousData
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
mTextNode
-
>
SetData
(
mStringToSet
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
mEditorBase
-
>
GetShouldTxnSetSelection
(
)
)
{
RefPtr
<
Selection
>
selection
=
mEditorBase
-
>
GetSelection
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
DebugOnly
<
nsresult
>
rv
=
selection
-
>
Collapse
(
mTextNode
mStringToSet
.
Length
(
)
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Selection
could
not
be
collapsed
after
insert
"
)
;
}
mRangeUpdater
-
>
SelAdjDeleteText
(
mTextNode
0
mPreviousData
.
Length
(
)
)
;
mRangeUpdater
-
>
SelAdjInsertText
(
*
mTextNode
0
mStringToSet
)
;
return
NS_OK
;
}
}
