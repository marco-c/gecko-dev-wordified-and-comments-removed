#
include
"
JoinNodesTransaction
.
h
"
#
include
"
EditorDOMPoint
.
h
"
#
include
"
HTMLEditHelpers
.
h
"
#
include
"
HTMLEditor
.
h
"
#
include
"
HTMLEditorInlines
.
h
"
#
include
"
HTMLEditUtils
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
ToString
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
using
namespace
dom
;
already_AddRefed
<
JoinNodesTransaction
>
JoinNodesTransaction
:
:
MaybeCreate
(
HTMLEditor
&
aHTMLEditor
nsIContent
&
aLeftContent
nsIContent
&
aRightContent
)
{
RefPtr
<
JoinNodesTransaction
>
transaction
=
new
JoinNodesTransaction
(
aHTMLEditor
aLeftContent
aRightContent
)
;
if
(
NS_WARN_IF
(
!
transaction
-
>
CanDoIt
(
)
)
)
{
return
nullptr
;
}
return
transaction
.
forget
(
)
;
}
JoinNodesTransaction
:
:
JoinNodesTransaction
(
HTMLEditor
&
aHTMLEditor
nsIContent
&
aLeftContent
nsIContent
&
aRightContent
)
:
mHTMLEditor
(
&
aHTMLEditor
)
mRemovedContent
(
&
aRightContent
)
mKeepingContent
(
&
aLeftContent
)
{
static_assert
(
sizeof
(
JoinNodesTransaction
)
<
=
64
"
Transaction
classes
may
be
created
a
lot
and
may
be
alive
"
"
long
so
that
keep
the
foot
print
smaller
as
far
as
possible
"
)
;
}
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aStream
const
JoinNodesTransaction
&
aTransaction
)
{
aStream
<
<
"
{
mParentNode
=
"
<
<
aTransaction
.
mParentNode
.
get
(
)
;
if
(
aTransaction
.
mParentNode
)
{
aStream
<
<
"
(
"
<
<
*
aTransaction
.
mParentNode
<
<
"
)
"
;
}
aStream
<
<
"
mRemovedContent
=
"
<
<
aTransaction
.
mRemovedContent
.
get
(
)
;
if
(
aTransaction
.
mRemovedContent
)
{
aStream
<
<
"
(
"
<
<
*
aTransaction
.
mRemovedContent
<
<
"
)
"
;
}
aStream
<
<
"
mKeepingContent
=
"
<
<
aTransaction
.
mKeepingContent
.
get
(
)
;
if
(
aTransaction
.
mKeepingContent
)
{
aStream
<
<
"
(
"
<
<
*
aTransaction
.
mKeepingContent
<
<
"
)
"
;
}
aStream
<
<
"
mJoinedOffset
=
"
<
<
aTransaction
.
mJoinedOffset
<
<
"
mHTMLEditor
=
"
<
<
aTransaction
.
mHTMLEditor
.
get
(
)
<
<
"
}
"
;
return
aStream
;
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
JoinNodesTransaction
EditTransactionBase
mHTMLEditor
mParentNode
mRemovedContent
mKeepingContent
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
JoinNodesTransaction
)
NS_INTERFACE_MAP_END_INHERITING
(
EditTransactionBase
)
bool
JoinNodesTransaction
:
:
CanDoIt
(
)
const
{
if
(
NS_WARN_IF
(
!
mKeepingContent
)
|
|
NS_WARN_IF
(
!
mRemovedContent
)
|
|
NS_WARN_IF
(
!
mHTMLEditor
)
|
|
NS_WARN_IF
(
mRemovedContent
-
>
IsBeingRemoved
(
)
)
|
|
!
mKeepingContent
-
>
IsInComposedDoc
(
)
)
{
return
false
;
}
return
HTMLEditUtils
:
:
IsRemovableFromParentNode
(
*
mRemovedContent
)
;
}
NS_IMETHODIMP
JoinNodesTransaction
:
:
DoTransaction
(
)
{
MOZ_LOG
(
GetLogModule
(
)
LogLevel
:
:
Info
(
"
%
p
JoinNodesTransaction
:
:
%
s
this
=
%
s
"
this
__FUNCTION__
ToString
(
*
this
)
.
c_str
(
)
)
)
;
return
DoTransactionInternal
(
RedoingTransaction
:
:
No
)
;
}
nsresult
JoinNodesTransaction
:
:
DoTransactionInternal
(
RedoingTransaction
aRedoingTransaction
)
{
if
(
MOZ_UNLIKELY
(
NS_WARN_IF
(
!
mHTMLEditor
)
|
|
NS_WARN_IF
(
!
mKeepingContent
)
|
|
NS_WARN_IF
(
!
mRemovedContent
)
|
|
NS_WARN_IF
(
mRemovedContent
-
>
IsBeingRemoved
(
)
)
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsINode
*
removingContentParentNode
=
mRemovedContent
-
>
GetParentNode
(
)
;
if
(
MOZ_UNLIKELY
(
NS_WARN_IF
(
!
removingContentParentNode
)
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
MOZ_UNLIKELY
(
removingContentParentNode
!
=
mKeepingContent
-
>
GetParentNode
(
)
)
)
{
NS_ASSERTION
(
false
"
Nodes
do
not
have
same
parent
"
)
;
return
NS_ERROR_NOT_AVAILABLE
;
}
mParentNode
=
removingContentParentNode
;
mJoinedOffset
=
mKeepingContent
-
>
Length
(
)
;
const
OwningNonNull
<
HTMLEditor
>
htmlEditor
=
*
mHTMLEditor
;
const
OwningNonNull
<
nsIContent
>
removingContent
=
*
mRemovedContent
;
const
OwningNonNull
<
nsIContent
>
keepingContent
=
*
mKeepingContent
;
nsresult
rv
;
auto
joinNodesPoint
=
EditorDOMPoint
:
:
AtEndOf
(
keepingContent
)
;
{
AutoTrackDOMPoint
trackJoinNodePoint
(
htmlEditor
-
>
RangeUpdaterRef
(
)
&
joinNodesPoint
)
;
rv
=
htmlEditor
-
>
DoJoinNodes
(
keepingContent
removingContent
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DoJoinNodes
(
)
failed
"
)
;
}
mJoinedOffset
=
joinNodesPoint
.
Offset
(
)
;
if
(
aRedoingTransaction
=
=
RedoingTransaction
:
:
No
)
{
htmlEditor
-
>
DidJoinNodesTransaction
(
*
this
rv
)
;
}
return
rv
;
}
NS_IMETHODIMP
JoinNodesTransaction
:
:
UndoTransaction
(
)
{
MOZ_LOG
(
GetLogModule
(
)
LogLevel
:
:
Info
(
"
%
p
JoinNodesTransaction
:
:
%
s
this
=
%
s
"
this
__FUNCTION__
ToString
(
*
this
)
.
c_str
(
)
)
)
;
if
(
NS_WARN_IF
(
!
mParentNode
)
|
|
NS_WARN_IF
(
!
mKeepingContent
)
|
|
NS_WARN_IF
(
!
mRemovedContent
)
|
|
NS_WARN_IF
(
!
mHTMLEditor
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
const
OwningNonNull
<
HTMLEditor
>
htmlEditor
=
*
mHTMLEditor
;
const
OwningNonNull
<
nsIContent
>
removedContent
=
*
mRemovedContent
;
Result
<
SplitNodeResult
nsresult
>
splitNodeResult
=
htmlEditor
-
>
DoSplitNode
(
CreateJoinedPoint
<
EditorDOMPoint
>
(
)
removedContent
)
;
if
(
MOZ_UNLIKELY
(
splitNodeResult
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DoSplitNode
(
)
failed
"
)
;
return
splitNodeResult
.
unwrapErr
(
)
;
}
splitNodeResult
.
inspect
(
)
.
IgnoreCaretPointSuggestion
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
JoinNodesTransaction
:
:
RedoTransaction
(
)
{
MOZ_LOG
(
GetLogModule
(
)
LogLevel
:
:
Info
(
"
%
p
JoinNodesTransaction
:
:
%
s
this
=
%
s
"
this
__FUNCTION__
ToString
(
*
this
)
.
c_str
(
)
)
)
;
return
DoTransactionInternal
(
RedoingTransaction
:
:
Yes
)
;
}
}
