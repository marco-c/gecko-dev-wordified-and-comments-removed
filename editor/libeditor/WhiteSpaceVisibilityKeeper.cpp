#
include
"
WhiteSpaceVisibilityKeeper
.
h
"
#
include
"
EditorDOMPoint
.
h
"
#
include
"
EditorUtils
.
h
"
#
include
"
ErrorList
.
h
"
#
include
"
HTMLEditHelpers
.
h
"
#
include
"
HTMLEditor
.
h
"
#
include
"
HTMLEditorNestedClasses
.
h
"
#
include
"
HTMLEditUtils
.
h
"
#
include
"
SelectionState
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
SelectionState
.
h
"
#
include
"
mozilla
/
OwningNonNull
.
h
"
#
include
"
mozilla
/
StaticPrefs_editor
.
h
"
#
include
"
mozilla
/
InternalMutationEvent
.
h
"
#
include
"
mozilla
/
dom
/
AncestorIterator
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIContentInlines
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
using
namespace
dom
;
using
WalkTreeOption
=
HTMLEditUtils
:
:
WalkTreeOption
;
template
nsresult
WhiteSpaceVisibilityKeeper
:
:
NormalizeVisibleWhiteSpacesAt
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aScanStartPoint
const
Element
&
aEditingHost
)
;
template
nsresult
WhiteSpaceVisibilityKeeper
:
:
NormalizeVisibleWhiteSpacesAt
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointInText
&
aScanStartPoint
const
Element
&
aEditingHost
)
;
Result
<
EditorDOMPoint
nsresult
>
WhiteSpaceVisibilityKeeper
:
:
PrepareToSplitBlockElement
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPointToSplit
const
Element
&
aSplittingBlockElement
)
{
if
(
NS_WARN_IF
(
!
aPointToSplit
.
IsInContentNode
(
)
)
|
|
NS_WARN_IF
(
!
HTMLEditUtils
:
:
IsSplittableNode
(
aSplittingBlockElement
)
)
|
|
NS_WARN_IF
(
!
EditorUtils
:
:
IsEditableContent
(
*
aPointToSplit
.
ContainerAs
<
nsIContent
>
(
)
EditorType
:
:
HTML
)
)
)
{
return
Err
(
NS_ERROR_FAILURE
)
;
}
EditorDOMPoint
pointToSplit
(
aPointToSplit
)
;
for
(
nsIContent
*
content
:
aPointToSplit
.
ContainerAs
<
nsIContent
>
(
)
-
>
InclusiveAncestorsOfType
<
nsIContent
>
(
)
)
{
if
(
content
=
=
&
aSplittingBlockElement
)
{
break
;
}
if
(
HTMLEditUtils
:
:
IsSplittableNode
(
*
content
)
)
{
break
;
}
pointToSplit
.
Set
(
content
)
;
}
{
AutoTrackDOMPoint
tracker
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToSplit
)
;
nsresult
rv
=
WhiteSpaceVisibilityKeeper
:
:
MakeSureToKeepVisibleWhiteSpacesVisibleAfterSplit
(
aHTMLEditor
pointToSplit
)
;
if
(
NS_WARN_IF
(
aHTMLEditor
.
Destroyed
(
)
)
)
{
return
Err
(
NS_ERROR_EDITOR_DESTROYED
)
;
}
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
"
"
MakeSureToKeepVisibleWhiteSpacesVisibleAfterSplit
(
)
failed
"
)
;
return
Err
(
rv
)
;
}
}
if
(
NS_WARN_IF
(
!
pointToSplit
.
IsInContentNode
(
)
)
|
|
NS_WARN_IF
(
!
pointToSplit
.
ContainerAs
<
nsIContent
>
(
)
-
>
IsInclusiveDescendantOf
(
&
aSplittingBlockElement
)
)
|
|
NS_WARN_IF
(
!
HTMLEditUtils
:
:
IsSplittableNode
(
aSplittingBlockElement
)
)
|
|
NS_WARN_IF
(
!
HTMLEditUtils
:
:
IsSplittableNode
(
*
pointToSplit
.
ContainerAs
<
nsIContent
>
(
)
)
)
)
{
return
Err
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
return
pointToSplit
;
}
Result
<
MoveNodeResult
nsresult
>
WhiteSpaceVisibilityKeeper
:
:
MergeFirstLineOfRightBlockElementIntoDescendantLeftBlockElement
(
HTMLEditor
&
aHTMLEditor
Element
&
aLeftBlockElement
Element
&
aRightBlockElement
const
EditorDOMPoint
&
aAtRightBlockChild
const
Maybe
<
nsAtom
*
>
&
aListElementTagName
const
HTMLBRElement
*
aPrecedingInvisibleBRElement
const
Element
&
aEditingHost
)
{
MOZ_ASSERT
(
EditorUtils
:
:
IsDescendantOf
(
aLeftBlockElement
aRightBlockElement
)
)
;
MOZ_ASSERT
(
&
aRightBlockElement
=
=
aAtRightBlockChild
.
GetContainer
(
)
)
;
{
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
WhiteSpaceVisibilityKeeper
:
:
DeleteInvisibleASCIIWhiteSpaces
(
aHTMLEditor
EditorDOMPoint
:
:
AtEndOf
(
aLeftBlockElement
)
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
DeleteInvisibleASCIIWhiteSpaces
(
)
"
"
failed
"
)
;
return
caretPointOrError
.
propagateErr
(
)
;
}
caretPointOrError
.
unwrap
(
)
.
IgnoreCaretPointSuggestion
(
)
;
}
if
(
aHTMLEditor
.
MayHaveMutationEventListeners
(
)
)
{
EditorDOMPoint
leftBlockContainingPointInRightBlockElement
;
if
(
aHTMLEditor
.
MayHaveMutationEventListeners
(
)
&
&
MOZ_UNLIKELY
(
!
EditorUtils
:
:
IsDescendantOf
(
aLeftBlockElement
aRightBlockElement
&
leftBlockContainingPointInRightBlockElement
)
)
)
{
NS_WARNING
(
"
Deleting
invisible
whitespace
at
end
of
left
block
element
caused
"
"
moving
the
left
block
element
outside
the
right
block
element
"
)
;
return
Err
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
if
(
MOZ_UNLIKELY
(
leftBlockContainingPointInRightBlockElement
!
=
aAtRightBlockChild
)
)
{
NS_WARNING
(
"
Deleting
invisible
whitespace
at
end
of
left
block
element
caused
"
"
changing
the
left
block
element
in
the
right
block
element
"
)
;
return
Err
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
if
(
MOZ_UNLIKELY
(
!
EditorUtils
:
:
IsEditableContent
(
aRightBlockElement
EditorType
:
:
HTML
)
)
)
{
NS_WARNING
(
"
Deleting
invisible
whitespace
at
end
of
left
block
element
caused
"
"
making
the
right
block
element
non
-
editable
"
)
;
return
Err
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
if
(
MOZ_UNLIKELY
(
!
EditorUtils
:
:
IsEditableContent
(
aLeftBlockElement
EditorType
:
:
HTML
)
)
)
{
NS_WARNING
(
"
Deleting
invisible
whitespace
at
end
of
left
block
element
caused
"
"
making
the
left
block
element
non
-
editable
"
)
;
return
Err
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
}
OwningNonNull
<
Element
>
rightBlockElement
=
aRightBlockElement
;
EditorDOMPoint
afterRightBlockChild
=
aAtRightBlockChild
.
NextPoint
(
)
;
{
AutoTrackDOMPoint
tracker
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
afterRightBlockChild
)
;
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
WhiteSpaceVisibilityKeeper
:
:
DeleteInvisibleASCIIWhiteSpaces
(
aHTMLEditor
afterRightBlockChild
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
DeleteInvisibleASCIIWhiteSpaces
(
)
"
"
failed
"
)
;
return
caretPointOrError
.
propagateErr
(
)
;
}
caretPointOrError
.
unwrap
(
)
.
IgnoreCaretPointSuggestion
(
)
;
if
(
afterRightBlockChild
.
GetContainerAs
<
Element
>
(
)
)
{
rightBlockElement
=
*
afterRightBlockChild
.
ContainerAs
<
Element
>
(
)
;
}
else
if
(
NS_WARN_IF
(
!
afterRightBlockChild
.
GetContainerParentAs
<
Element
>
(
)
)
)
{
return
Err
(
NS_ERROR_UNEXPECTED
)
;
}
else
{
rightBlockElement
=
*
afterRightBlockChild
.
GetContainerParentAs
<
Element
>
(
)
;
}
}
const
RefPtr
<
HTMLBRElement
>
invisibleBRElementAtEndOfLeftBlockElement
=
WSRunScanner
:
:
GetPrecedingBRElementUnlessVisibleContentFound
(
aHTMLEditor
.
ComputeEditingHost
(
)
EditorDOMPoint
:
:
AtEndOf
(
aLeftBlockElement
)
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
;
NS_ASSERTION
(
aPrecedingInvisibleBRElement
=
=
invisibleBRElementAtEndOfLeftBlockElement
"
The
preceding
invisible
BR
element
computation
was
different
"
)
;
auto
moveContentResult
=
[
&
]
(
)
MOZ_NEVER_INLINE_DEBUG
MOZ_CAN_RUN_SCRIPT
-
>
Result
<
MoveNodeResult
nsresult
>
{
if
(
NS_WARN_IF
(
aListElementTagName
.
isSome
(
)
)
)
{
return
MoveNodeResult
:
:
HandledResult
(
EditorDOMPoint
:
:
AtEndOf
(
aLeftBlockElement
)
)
;
}
AutoTransactionsConserveSelection
dontChangeMySelection
(
aHTMLEditor
)
;
NS_ASSERTION
(
rightBlockElement
=
=
afterRightBlockChild
.
GetContainer
(
)
"
The
relation
is
not
guaranteed
but
assumed
"
)
;
#
ifdef
DEBUG
Result
<
bool
nsresult
>
firstLineHasContent
=
HTMLEditor
:
:
AutoMoveOneLineHandler
:
:
CanMoveOrDeleteSomethingInLine
(
EditorDOMPoint
(
rightBlockElement
afterRightBlockChild
.
Offset
(
)
)
aEditingHost
)
;
#
endif
HTMLEditor
:
:
AutoMoveOneLineHandler
lineMoverToEndOfLeftBlock
(
aLeftBlockElement
)
;
nsresult
rv
=
lineMoverToEndOfLeftBlock
.
Prepare
(
aHTMLEditor
EditorDOMPoint
(
rightBlockElement
afterRightBlockChild
.
Offset
(
)
)
aEditingHost
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
AutoMoveOneLineHandler
:
:
Prepare
(
)
failed
"
)
;
return
Err
(
rv
)
;
}
MoveNodeResult
moveResult
=
MoveNodeResult
:
:
IgnoredResult
(
EditorDOMPoint
:
:
AtEndOf
(
aLeftBlockElement
)
)
;
AutoTrackDOMMoveNodeResult
trackMoveResult
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
moveResult
)
;
Result
<
MoveNodeResult
nsresult
>
moveFirstLineResult
=
lineMoverToEndOfLeftBlock
.
Run
(
aHTMLEditor
aEditingHost
)
;
if
(
MOZ_UNLIKELY
(
moveFirstLineResult
.
isErr
(
)
)
)
{
NS_WARNING
(
"
AutoMoveOneLineHandler
:
:
Run
(
)
failed
"
)
;
return
moveFirstLineResult
.
propagateErr
(
)
;
}
trackMoveResult
.
FlushAndStopTracking
(
)
;
#
ifdef
DEBUG
MOZ_ASSERT
(
!
firstLineHasContent
.
isErr
(
)
)
;
if
(
firstLineHasContent
.
inspect
(
)
)
{
NS_ASSERTION
(
moveFirstLineResult
.
inspect
(
)
.
Handled
(
)
"
Failed
to
consider
whether
moving
or
not
something
"
)
;
}
else
{
NS_ASSERTION
(
moveFirstLineResult
.
inspect
(
)
.
Ignored
(
)
"
Failed
to
consider
whether
moving
or
not
something
"
)
;
}
#
endif
moveResult
|
=
moveFirstLineResult
.
unwrap
(
)
;
afterRightBlockChild
.
Clear
(
)
;
return
std
:
:
move
(
moveResult
)
;
}
(
)
;
if
(
MOZ_UNLIKELY
(
moveContentResult
.
isErr
(
)
)
)
{
return
moveContentResult
;
}
if
(
!
invisibleBRElementAtEndOfLeftBlockElement
|
|
!
invisibleBRElementAtEndOfLeftBlockElement
-
>
IsInComposedDoc
(
)
)
{
return
moveContentResult
;
}
MoveNodeResult
unwrappedMoveContentResult
=
moveContentResult
.
unwrap
(
)
;
{
AutoTransactionsConserveSelection
dontChangeMySelection
(
aHTMLEditor
)
;
AutoTrackDOMMoveNodeResult
trackMoveContentResult
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
unwrappedMoveContentResult
)
;
nsresult
rv
=
aHTMLEditor
.
DeleteNodeWithTransaction
(
*
invisibleBRElementAtEndOfLeftBlockElement
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
EditorBase
:
:
DeleteNodeWithTransaction
(
)
failed
but
ignored
"
)
;
unwrappedMoveContentResult
.
IgnoreCaretPointSuggestion
(
)
;
return
Err
(
rv
)
;
}
}
return
std
:
:
move
(
unwrappedMoveContentResult
)
;
}
Result
<
MoveNodeResult
nsresult
>
WhiteSpaceVisibilityKeeper
:
:
MergeFirstLineOfRightBlockElementIntoAncestorLeftBlockElement
(
HTMLEditor
&
aHTMLEditor
Element
&
aLeftBlockElement
Element
&
aRightBlockElement
const
EditorDOMPoint
&
aAtLeftBlockChild
nsIContent
&
aLeftContentInBlock
const
Maybe
<
nsAtom
*
>
&
aListElementTagName
const
HTMLBRElement
*
aPrecedingInvisibleBRElement
const
Element
&
aEditingHost
)
{
MOZ_ASSERT
(
EditorUtils
:
:
IsDescendantOf
(
aRightBlockElement
aLeftBlockElement
)
)
;
MOZ_ASSERT
(
&
aLeftBlockElement
=
=
&
aLeftContentInBlock
|
|
EditorUtils
:
:
IsDescendantOf
(
aLeftContentInBlock
aLeftBlockElement
)
)
;
MOZ_ASSERT
(
&
aLeftBlockElement
=
=
aAtLeftBlockChild
.
GetContainer
(
)
)
;
{
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
WhiteSpaceVisibilityKeeper
:
:
DeleteInvisibleASCIIWhiteSpaces
(
aHTMLEditor
EditorDOMPoint
(
&
aRightBlockElement
0
)
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
DeleteInvisibleASCIIWhiteSpaces
(
)
"
"
failed
"
)
;
return
caretPointOrError
.
propagateErr
(
)
;
}
caretPointOrError
.
unwrap
(
)
.
IgnoreCaretPointSuggestion
(
)
;
}
if
(
aHTMLEditor
.
MayHaveMutationEventListeners
(
)
)
{
EditorDOMPoint
rightBlockContainingPointInLeftBlockElement
;
if
(
aHTMLEditor
.
MayHaveMutationEventListeners
(
)
&
&
MOZ_UNLIKELY
(
!
EditorUtils
:
:
IsDescendantOf
(
aRightBlockElement
aLeftBlockElement
&
rightBlockContainingPointInLeftBlockElement
)
)
)
{
NS_WARNING
(
"
Deleting
invisible
whitespace
at
start
of
right
block
element
"
"
caused
moving
the
right
block
element
outside
the
left
block
"
"
element
"
)
;
return
Err
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
if
(
MOZ_UNLIKELY
(
rightBlockContainingPointInLeftBlockElement
!
=
aAtLeftBlockChild
)
)
{
NS_WARNING
(
"
Deleting
invisible
whitespace
at
start
of
right
block
element
"
"
caused
changing
the
right
block
element
position
in
the
left
block
"
"
element
"
)
;
return
Err
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
if
(
MOZ_UNLIKELY
(
!
EditorUtils
:
:
IsEditableContent
(
aLeftBlockElement
EditorType
:
:
HTML
)
)
)
{
NS_WARNING
(
"
Deleting
invisible
whitespace
at
start
of
right
block
element
"
"
caused
making
the
left
block
element
non
-
editable
"
)
;
return
Err
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
if
(
MOZ_UNLIKELY
(
!
EditorUtils
:
:
IsEditableContent
(
aRightBlockElement
EditorType
:
:
HTML
)
)
)
{
NS_WARNING
(
"
Deleting
invisible
whitespace
at
start
of
right
block
element
"
"
caused
making
the
right
block
element
non
-
editable
"
)
;
return
Err
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
}
OwningNonNull
<
Element
>
originalLeftBlockElement
=
aLeftBlockElement
;
OwningNonNull
<
Element
>
leftBlockElement
=
aLeftBlockElement
;
EditorDOMPoint
atLeftBlockChild
(
aAtLeftBlockChild
)
;
{
AutoTrackDOMPoint
tracker
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
atLeftBlockChild
)
;
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
WhiteSpaceVisibilityKeeper
:
:
DeleteInvisibleASCIIWhiteSpaces
(
aHTMLEditor
EditorDOMPoint
(
atLeftBlockChild
.
GetContainer
(
)
atLeftBlockChild
.
Offset
(
)
)
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
DeleteInvisibleASCIIWhiteSpaces
(
)
"
"
failed
"
)
;
return
caretPointOrError
.
propagateErr
(
)
;
}
caretPointOrError
.
unwrap
(
)
.
IgnoreCaretPointSuggestion
(
)
;
}
if
(
MOZ_UNLIKELY
(
!
atLeftBlockChild
.
IsSetAndValid
(
)
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
DeleteInvisibleASCIIWhiteSpaces
(
)
caused
"
"
unexpected
DOM
tree
"
)
;
return
Err
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
if
(
Element
*
nearestAncestor
=
atLeftBlockChild
.
GetContainerOrContainerParentElement
(
)
)
{
leftBlockElement
=
*
nearestAncestor
;
}
else
{
return
Err
(
NS_ERROR_UNEXPECTED
)
;
}
const
RefPtr
<
HTMLBRElement
>
invisibleBRElementBeforeLeftBlockElement
=
WSRunScanner
:
:
GetPrecedingBRElementUnlessVisibleContentFound
(
aHTMLEditor
.
ComputeEditingHost
(
)
atLeftBlockChild
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
;
NS_ASSERTION
(
aPrecedingInvisibleBRElement
=
=
invisibleBRElementBeforeLeftBlockElement
"
The
preceding
invisible
BR
element
computation
was
different
"
)
;
auto
moveContentResult
=
[
&
]
(
)
MOZ_NEVER_INLINE_DEBUG
MOZ_CAN_RUN_SCRIPT
-
>
Result
<
MoveNodeResult
nsresult
>
{
if
(
aListElementTagName
.
isSome
(
)
)
{
MOZ_ASSERT
(
originalLeftBlockElement
=
=
atLeftBlockChild
.
GetContainer
(
)
"
This
is
not
guaranteed
but
assumed
"
)
;
#
ifdef
DEBUG
Result
<
bool
nsresult
>
rightBlockHasContent
=
aHTMLEditor
.
CanMoveChildren
(
aRightBlockElement
aLeftBlockElement
)
;
#
endif
MoveNodeResult
moveResult
=
MoveNodeResult
:
:
IgnoredResult
(
EditorDOMPoint
(
atLeftBlockChild
.
GetContainer
(
)
atLeftBlockChild
.
Offset
(
)
)
)
;
AutoTrackDOMMoveNodeResult
trackMoveResult
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
moveResult
)
;
AutoTransactionsConserveSelection
dontChangeMySelection
(
aHTMLEditor
)
;
Result
<
MoveNodeResult
nsresult
>
moveChildrenResult
=
aHTMLEditor
.
MoveChildrenWithTransaction
(
aRightBlockElement
moveResult
.
NextInsertionPointRef
(
)
HTMLEditor
:
:
PreserveWhiteSpaceStyle
:
:
No
HTMLEditor
:
:
RemoveIfCommentNode
:
:
Yes
)
;
if
(
MOZ_UNLIKELY
(
moveChildrenResult
.
isErr
(
)
)
)
{
if
(
NS_WARN_IF
(
moveChildrenResult
.
inspectErr
(
)
=
=
NS_ERROR_EDITOR_DESTROYED
)
)
{
return
moveChildrenResult
;
}
NS_WARNING
(
"
HTMLEditor
:
:
MoveChildrenWithTransaction
(
)
failed
but
ignored
"
)
;
}
else
{
#
ifdef
DEBUG
MOZ_ASSERT
(
!
rightBlockHasContent
.
isErr
(
)
)
;
if
(
rightBlockHasContent
.
inspect
(
)
)
{
NS_ASSERTION
(
moveChildrenResult
.
inspect
(
)
.
Handled
(
)
"
Failed
to
consider
whether
moving
or
not
children
"
)
;
}
else
{
NS_ASSERTION
(
moveChildrenResult
.
inspect
(
)
.
Ignored
(
)
"
Failed
to
consider
whether
moving
or
not
children
"
)
;
}
#
endif
trackMoveResult
.
FlushAndStopTracking
(
)
;
moveResult
|
=
moveChildrenResult
.
unwrap
(
)
;
}
atLeftBlockChild
.
Clear
(
)
;
return
std
:
:
move
(
moveResult
)
;
}
EditorDOMPoint
pointToMoveFirstLineContent
;
if
(
&
aLeftContentInBlock
=
=
leftBlockElement
)
{
pointToMoveFirstLineContent
=
atLeftBlockChild
;
MOZ_ASSERT
(
pointToMoveFirstLineContent
.
GetContainer
(
)
=
=
&
aLeftBlockElement
)
;
}
else
{
if
(
NS_WARN_IF
(
!
aLeftContentInBlock
.
IsInComposedDoc
(
)
)
)
{
return
Err
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
pointToMoveFirstLineContent
.
SetAfter
(
&
aLeftContentInBlock
)
;
if
(
NS_WARN_IF
(
!
pointToMoveFirstLineContent
.
IsInContentNode
(
)
)
)
{
return
Err
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
}
MOZ_ASSERT
(
pointToMoveFirstLineContent
.
IsSetAndValid
(
)
)
;
#
ifdef
DEBUG
Result
<
bool
nsresult
>
firstLineHasContent
=
HTMLEditor
:
:
AutoMoveOneLineHandler
:
:
CanMoveOrDeleteSomethingInLine
(
EditorDOMPoint
(
&
aRightBlockElement
0u
)
aEditingHost
)
;
#
endif
if
(
&
aLeftContentInBlock
!
=
&
aEditingHost
)
{
Result
<
SplitNodeResult
nsresult
>
splitNodeResult
=
aHTMLEditor
.
SplitAncestorStyledInlineElementsAt
(
pointToMoveFirstLineContent
EditorInlineStyle
:
:
RemoveAllStyles
(
)
HTMLEditor
:
:
SplitAtEdges
:
:
eDoNotCreateEmptyContainer
)
;
if
(
MOZ_UNLIKELY
(
splitNodeResult
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
SplitAncestorStyledInlineElementsAt
(
)
failed
"
)
;
return
splitNodeResult
.
propagateErr
(
)
;
}
SplitNodeResult
unwrappedSplitNodeResult
=
splitNodeResult
.
unwrap
(
)
;
nsresult
rv
=
unwrappedSplitNodeResult
.
SuggestCaretPointTo
(
aHTMLEditor
{
SuggestCaret
:
:
OnlyIfHasSuggestion
SuggestCaret
:
:
OnlyIfTransactionsAllowedToDoIt
}
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
SplitNodeResult
:
:
SuggestCaretPointTo
(
)
failed
"
)
;
return
Err
(
rv
)
;
}
if
(
!
unwrappedSplitNodeResult
.
DidSplit
(
)
)
{
for
(
EditorDOMPoint
parentPoint
=
pointToMoveFirstLineContent
;
pointToMoveFirstLineContent
.
IsEndOfContainer
(
)
&
&
pointToMoveFirstLineContent
.
IsInContentNode
(
)
;
pointToMoveFirstLineContent
=
EditorDOMPoint
:
:
After
(
*
pointToMoveFirstLineContent
.
ContainerAs
<
nsIContent
>
(
)
)
)
{
if
(
pointToMoveFirstLineContent
.
GetContainer
(
)
=
=
&
aLeftBlockElement
|
|
NS_WARN_IF
(
pointToMoveFirstLineContent
.
GetContainer
(
)
=
=
&
aEditingHost
)
)
{
break
;
}
}
if
(
NS_WARN_IF
(
!
pointToMoveFirstLineContent
.
IsInContentNode
(
)
)
)
{
return
Err
(
NS_ERROR_FAILURE
)
;
}
}
else
if
(
unwrappedSplitNodeResult
.
Handled
(
)
)
{
if
(
nsIContent
*
nextContentAtSplitPoint
=
unwrappedSplitNodeResult
.
GetNextContent
(
)
)
{
pointToMoveFirstLineContent
.
Set
(
nextContentAtSplitPoint
)
;
if
(
NS_WARN_IF
(
!
pointToMoveFirstLineContent
.
IsInContentNode
(
)
)
)
{
return
Err
(
NS_ERROR_FAILURE
)
;
}
}
else
{
pointToMoveFirstLineContent
=
unwrappedSplitNodeResult
.
AtSplitPoint
<
EditorDOMPoint
>
(
)
;
if
(
NS_WARN_IF
(
!
pointToMoveFirstLineContent
.
IsInContentNode
(
)
)
)
{
return
Err
(
NS_ERROR_FAILURE
)
;
}
}
}
MOZ_DIAGNOSTIC_ASSERT
(
pointToMoveFirstLineContent
.
IsSetAndValid
(
)
)
;
}
MoveNodeResult
moveResult
=
MoveNodeResult
:
:
IgnoredResult
(
pointToMoveFirstLineContent
)
;
HTMLEditor
:
:
AutoMoveOneLineHandler
lineMoverToPoint
(
pointToMoveFirstLineContent
)
;
nsresult
rv
=
lineMoverToPoint
.
Prepare
(
aHTMLEditor
EditorDOMPoint
(
&
aRightBlockElement
0u
)
aEditingHost
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
AutoMoveOneLineHandler
:
:
Prepare
(
)
failed
"
)
;
return
Err
(
rv
)
;
}
AutoTrackDOMMoveNodeResult
trackMoveResult
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
moveResult
)
;
AutoTransactionsConserveSelection
dontChangeMySelection
(
aHTMLEditor
)
;
Result
<
MoveNodeResult
nsresult
>
moveFirstLineResult
=
lineMoverToPoint
.
Run
(
aHTMLEditor
aEditingHost
)
;
if
(
MOZ_UNLIKELY
(
moveFirstLineResult
.
isErr
(
)
)
)
{
NS_WARNING
(
"
AutoMoveOneLineHandler
:
:
Run
(
)
failed
"
)
;
return
moveFirstLineResult
.
propagateErr
(
)
;
}
#
ifdef
DEBUG
MOZ_ASSERT
(
!
firstLineHasContent
.
isErr
(
)
)
;
if
(
firstLineHasContent
.
inspect
(
)
)
{
NS_ASSERTION
(
moveFirstLineResult
.
inspect
(
)
.
Handled
(
)
"
Failed
to
consider
whether
moving
or
not
something
"
)
;
}
else
{
NS_ASSERTION
(
moveFirstLineResult
.
inspect
(
)
.
Ignored
(
)
"
Failed
to
consider
whether
moving
or
not
something
"
)
;
}
#
endif
trackMoveResult
.
FlushAndStopTracking
(
)
;
moveResult
|
=
moveFirstLineResult
.
unwrap
(
)
;
return
std
:
:
move
(
moveResult
)
;
}
(
)
;
if
(
MOZ_UNLIKELY
(
moveContentResult
.
isErr
(
)
)
)
{
return
moveContentResult
;
}
if
(
!
invisibleBRElementBeforeLeftBlockElement
|
|
!
invisibleBRElementBeforeLeftBlockElement
-
>
IsInComposedDoc
(
)
)
{
return
moveContentResult
;
}
MoveNodeResult
unwrappedMoveContentResult
=
moveContentResult
.
unwrap
(
)
;
{
AutoTrackDOMMoveNodeResult
trackMoveContentResult
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
unwrappedMoveContentResult
)
;
AutoTransactionsConserveSelection
dontChangeMySelection
(
aHTMLEditor
)
;
nsresult
rv
=
aHTMLEditor
.
DeleteNodeWithTransaction
(
*
invisibleBRElementBeforeLeftBlockElement
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
EditorBase
:
:
DeleteNodeWithTransaction
(
)
failed
but
ignored
"
)
;
unwrappedMoveContentResult
.
IgnoreCaretPointSuggestion
(
)
;
return
Err
(
rv
)
;
}
}
return
std
:
:
move
(
unwrappedMoveContentResult
)
;
}
Result
<
MoveNodeResult
nsresult
>
WhiteSpaceVisibilityKeeper
:
:
MergeFirstLineOfRightBlockElementIntoLeftBlockElement
(
HTMLEditor
&
aHTMLEditor
Element
&
aLeftBlockElement
Element
&
aRightBlockElement
const
Maybe
<
nsAtom
*
>
&
aListElementTagName
const
HTMLBRElement
*
aPrecedingInvisibleBRElement
const
Element
&
aEditingHost
)
{
MOZ_ASSERT
(
!
EditorUtils
:
:
IsDescendantOf
(
aLeftBlockElement
aRightBlockElement
)
)
;
MOZ_ASSERT
(
!
EditorUtils
:
:
IsDescendantOf
(
aRightBlockElement
aLeftBlockElement
)
)
;
{
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
WhiteSpaceVisibilityKeeper
:
:
MakeSureToKeepVisibleStateOfWhiteSpacesAroundDeletingRange
(
aHTMLEditor
EditorDOMRange
(
EditorDOMPoint
:
:
AtEndOf
(
aLeftBlockElement
)
EditorDOMPoint
(
&
aRightBlockElement
0
)
)
aEditingHost
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
"
"
MakeSureToKeepVisibleStateOfWhiteSpacesAroundDeletingRange
(
)
"
"
failed
"
)
;
return
caretPointOrError
.
propagateErr
(
)
;
}
caretPointOrError
.
unwrap
(
)
.
IgnoreCaretPointSuggestion
(
)
;
}
const
RefPtr
<
HTMLBRElement
>
invisibleBRElementAtEndOfLeftBlockElement
=
WSRunScanner
:
:
GetPrecedingBRElementUnlessVisibleContentFound
(
aHTMLEditor
.
ComputeEditingHost
(
)
EditorDOMPoint
:
:
AtEndOf
(
aLeftBlockElement
)
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
;
NS_ASSERTION
(
aPrecedingInvisibleBRElement
=
=
invisibleBRElementAtEndOfLeftBlockElement
"
The
preceding
invisible
BR
element
computation
was
different
"
)
;
auto
moveContentResult
=
[
&
]
(
)
MOZ_NEVER_INLINE_DEBUG
MOZ_CAN_RUN_SCRIPT
-
>
Result
<
MoveNodeResult
nsresult
>
{
if
(
aListElementTagName
.
isSome
(
)
|
|
(
aLeftBlockElement
.
NodeInfo
(
)
-
>
NameAtom
(
)
=
=
aRightBlockElement
.
NodeInfo
(
)
-
>
NameAtom
(
)
&
&
EditorUtils
:
:
GetComputedWhiteSpaceStyles
(
aLeftBlockElement
)
=
=
EditorUtils
:
:
GetComputedWhiteSpaceStyles
(
aRightBlockElement
)
)
)
{
MoveNodeResult
moveResult
=
MoveNodeResult
:
:
IgnoredResult
(
EditorDOMPoint
:
:
AtEndOf
(
aLeftBlockElement
)
)
;
AutoTrackDOMMoveNodeResult
trackMoveResult
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
moveResult
)
;
AutoTransactionsConserveSelection
dontChangeMySelection
(
aHTMLEditor
)
;
EditorDOMPoint
atFirstChildOfRightNode
;
nsresult
rv
=
aHTMLEditor
.
JoinNearestEditableNodesWithTransaction
(
aLeftBlockElement
aRightBlockElement
&
atFirstChildOfRightNode
)
;
if
(
NS_WARN_IF
(
rv
=
=
NS_ERROR_EDITOR_DESTROYED
)
)
{
return
Err
(
NS_ERROR_EDITOR_DESTROYED
)
;
}
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
JoinNearestEditableNodesWithTransaction
(
)
"
"
failed
but
ignored
"
)
;
if
(
aListElementTagName
.
isSome
(
)
&
&
atFirstChildOfRightNode
.
IsSet
(
)
)
{
Result
<
CreateElementResult
nsresult
>
convertListTypeResult
=
aHTMLEditor
.
ChangeListElementType
(
aRightBlockElement
MOZ_KnownLive
(
*
aListElementTagName
.
ref
(
)
)
*
nsGkAtoms
:
:
li
)
;
if
(
MOZ_UNLIKELY
(
convertListTypeResult
.
isErr
(
)
)
)
{
if
(
NS_WARN_IF
(
convertListTypeResult
.
inspectErr
(
)
=
=
NS_ERROR_EDITOR_DESTROYED
)
)
{
return
Err
(
NS_ERROR_EDITOR_DESTROYED
)
;
}
NS_WARNING
(
"
HTMLEditor
:
:
ChangeListElementType
(
)
failed
but
ignored
"
)
;
}
else
{
convertListTypeResult
.
inspect
(
)
.
IgnoreCaretPointSuggestion
(
)
;
}
}
trackMoveResult
.
FlushAndStopTracking
(
)
;
moveResult
|
=
MoveNodeResult
:
:
HandledResult
(
EditorDOMPoint
:
:
AtEndOf
(
aLeftBlockElement
)
)
;
return
std
:
:
move
(
moveResult
)
;
}
#
ifdef
DEBUG
Result
<
bool
nsresult
>
firstLineHasContent
=
HTMLEditor
:
:
AutoMoveOneLineHandler
:
:
CanMoveOrDeleteSomethingInLine
(
EditorDOMPoint
(
&
aRightBlockElement
0u
)
aEditingHost
)
;
#
endif
MoveNodeResult
moveResult
=
MoveNodeResult
:
:
IgnoredResult
(
EditorDOMPoint
:
:
AtEndOf
(
aLeftBlockElement
)
)
;
HTMLEditor
:
:
AutoMoveOneLineHandler
lineMoverToEndOfLeftBlock
(
aLeftBlockElement
)
;
nsresult
rv
=
lineMoverToEndOfLeftBlock
.
Prepare
(
aHTMLEditor
EditorDOMPoint
(
&
aRightBlockElement
0u
)
aEditingHost
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
AutoMoveOneLineHandler
:
:
Prepare
(
)
failed
"
)
;
return
Err
(
rv
)
;
}
AutoTrackDOMMoveNodeResult
trackMoveResult
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
moveResult
)
;
AutoTransactionsConserveSelection
dontChangeMySelection
(
aHTMLEditor
)
;
Result
<
MoveNodeResult
nsresult
>
moveFirstLineResult
=
lineMoverToEndOfLeftBlock
.
Run
(
aHTMLEditor
aEditingHost
)
;
if
(
MOZ_UNLIKELY
(
moveFirstLineResult
.
isErr
(
)
)
)
{
NS_WARNING
(
"
AutoMoveOneLineHandler
:
:
Run
(
)
failed
"
)
;
return
moveFirstLineResult
.
propagateErr
(
)
;
}
#
ifdef
DEBUG
MOZ_ASSERT
(
!
firstLineHasContent
.
isErr
(
)
)
;
if
(
firstLineHasContent
.
inspect
(
)
)
{
NS_ASSERTION
(
moveFirstLineResult
.
inspect
(
)
.
Handled
(
)
"
Failed
to
consider
whether
moving
or
not
something
"
)
;
}
else
{
NS_ASSERTION
(
moveFirstLineResult
.
inspect
(
)
.
Ignored
(
)
"
Failed
to
consider
whether
moving
or
not
something
"
)
;
}
#
endif
trackMoveResult
.
FlushAndStopTracking
(
)
;
moveResult
|
=
moveFirstLineResult
.
unwrap
(
)
;
return
std
:
:
move
(
moveResult
)
;
}
(
)
;
if
(
MOZ_UNLIKELY
(
moveContentResult
.
isErr
(
)
)
)
{
return
moveContentResult
;
}
MoveNodeResult
unwrappedMoveContentResult
=
moveContentResult
.
unwrap
(
)
;
if
(
!
invisibleBRElementAtEndOfLeftBlockElement
|
|
!
invisibleBRElementAtEndOfLeftBlockElement
-
>
IsInComposedDoc
(
)
)
{
unwrappedMoveContentResult
.
ForceToMarkAsHandled
(
)
;
return
std
:
:
move
(
unwrappedMoveContentResult
)
;
}
{
AutoTrackDOMMoveNodeResult
trackMoveContentResult
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
unwrappedMoveContentResult
)
;
AutoTransactionsConserveSelection
dontChangeMySelection
(
aHTMLEditor
)
;
nsresult
rv
=
aHTMLEditor
.
DeleteNodeWithTransaction
(
*
invisibleBRElementAtEndOfLeftBlockElement
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
EditorBase
:
:
DeleteNodeWithTransaction
(
)
failed
"
)
;
unwrappedMoveContentResult
.
IgnoreCaretPointSuggestion
(
)
;
return
Err
(
rv
)
;
}
}
return
std
:
:
move
(
unwrappedMoveContentResult
)
;
}
Result
<
CreateLineBreakResult
nsresult
>
WhiteSpaceVisibilityKeeper
:
:
InsertLineBreak
(
LineBreakType
aLineBreakType
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPointToInsert
const
Element
&
aEditingHost
)
{
if
(
MOZ_UNLIKELY
(
NS_WARN_IF
(
!
aPointToInsert
.
IsSet
(
)
)
)
)
{
return
Err
(
NS_ERROR_INVALID_ARG
)
;
}
TextFragmentData
textFragmentDataAtInsertionPoint
(
aPointToInsert
&
aEditingHost
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
;
if
(
MOZ_UNLIKELY
(
NS_WARN_IF
(
!
textFragmentDataAtInsertionPoint
.
IsInitialized
(
)
)
)
)
{
return
Err
(
NS_ERROR_FAILURE
)
;
}
EditorDOMRange
invisibleLeadingWhiteSpaceRangeOfNewLine
=
textFragmentDataAtInsertionPoint
.
GetNewInvisibleLeadingWhiteSpaceRangeIfSplittingAt
(
aPointToInsert
)
;
EditorDOMRange
invisibleTrailingWhiteSpaceRangeOfCurrentLine
=
textFragmentDataAtInsertionPoint
.
GetNewInvisibleTrailingWhiteSpaceRangeIfSplittingAt
(
aPointToInsert
)
;
const
Maybe
<
const
VisibleWhiteSpacesData
>
visibleWhiteSpaces
=
!
invisibleLeadingWhiteSpaceRangeOfNewLine
.
IsPositioned
(
)
|
|
!
invisibleTrailingWhiteSpaceRangeOfCurrentLine
.
IsPositioned
(
)
?
Some
(
textFragmentDataAtInsertionPoint
.
VisibleWhiteSpacesDataRef
(
)
)
:
Nothing
(
)
;
const
PointPosition
pointPositionWithVisibleWhiteSpaces
=
visibleWhiteSpaces
.
isSome
(
)
&
&
visibleWhiteSpaces
.
ref
(
)
.
IsInitialized
(
)
?
visibleWhiteSpaces
.
ref
(
)
.
ComparePoint
(
aPointToInsert
)
:
PointPosition
:
:
NotInSameDOMTree
;
EditorDOMPoint
pointToInsert
(
aPointToInsert
)
;
EditorDOMPoint
atNBSPReplaceableWithSP
;
if
(
!
invisibleLeadingWhiteSpaceRangeOfNewLine
.
IsPositioned
(
)
&
&
(
pointPositionWithVisibleWhiteSpaces
=
=
PointPosition
:
:
MiddleOfFragment
|
|
pointPositionWithVisibleWhiteSpaces
=
=
PointPosition
:
:
EndOfFragment
)
)
{
atNBSPReplaceableWithSP
=
textFragmentDataAtInsertionPoint
.
GetPreviousNBSPPointIfNeedToReplaceWithASCIIWhiteSpace
(
pointToInsert
)
.
To
<
EditorDOMPoint
>
(
)
;
}
{
if
(
invisibleTrailingWhiteSpaceRangeOfCurrentLine
.
IsPositioned
(
)
)
{
if
(
!
invisibleTrailingWhiteSpaceRangeOfCurrentLine
.
Collapsed
(
)
)
{
MOZ_ASSERT
(
invisibleTrailingWhiteSpaceRangeOfCurrentLine
.
StartRef
(
)
=
=
pointToInsert
)
;
AutoTrackDOMPoint
trackPointToInsert
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToInsert
)
;
AutoTrackDOMPoint
trackEndOfLineNBSP
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
atNBSPReplaceableWithSP
)
;
AutoTrackDOMRange
trackLeadingWhiteSpaceRange
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
invisibleLeadingWhiteSpaceRangeOfNewLine
)
;
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndTextNodesWithTransaction
(
invisibleTrailingWhiteSpaceRangeOfCurrentLine
.
StartRef
(
)
invisibleTrailingWhiteSpaceRangeOfCurrentLine
.
EndRef
(
)
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
.
propagateErr
(
)
;
}
nsresult
rv
=
caretPointOrError
.
unwrap
(
)
.
SuggestCaretPointTo
(
aHTMLEditor
{
SuggestCaret
:
:
OnlyIfHasSuggestion
SuggestCaret
:
:
OnlyIfTransactionsAllowedToDoIt
SuggestCaret
:
:
AndIgnoreTrivialError
}
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
CaretPoint
:
:
SuggestCaretPointTo
(
)
failed
"
)
;
return
Err
(
rv
)
;
}
NS_WARNING_ASSERTION
(
rv
!
=
NS_SUCCESS_EDITOR_BUT_IGNORED_TRIVIAL_ERROR
"
CaretPoint
:
:
SuggestCaretPointTo
(
)
failed
but
ignored
"
)
;
invisibleTrailingWhiteSpaceRangeOfCurrentLine
.
Clear
(
)
;
}
}
else
if
(
pointPositionWithVisibleWhiteSpaces
=
=
PointPosition
:
:
StartOfFragment
|
|
pointPositionWithVisibleWhiteSpaces
=
=
PointPosition
:
:
MiddleOfFragment
)
{
auto
atNextCharOfInsertionPoint
=
textFragmentDataAtInsertionPoint
.
GetInclusiveNextEditableCharPoint
<
EditorDOMPointInText
>
(
pointToInsert
)
;
if
(
atNextCharOfInsertionPoint
.
IsSet
(
)
&
&
!
atNextCharOfInsertionPoint
.
IsEndOfContainer
(
)
&
&
atNextCharOfInsertionPoint
.
IsCharCollapsibleASCIISpace
(
)
)
{
const
EditorDOMPointInText
atPreviousCharOfNextCharOfInsertionPoint
=
textFragmentDataAtInsertionPoint
.
GetPreviousEditableCharPoint
(
atNextCharOfInsertionPoint
)
;
if
(
!
atPreviousCharOfNextCharOfInsertionPoint
.
IsSet
(
)
|
|
atPreviousCharOfNextCharOfInsertionPoint
.
IsEndOfContainer
(
)
|
|
!
atPreviousCharOfNextCharOfInsertionPoint
.
IsCharASCIISpace
(
)
)
{
AutoTrackDOMPoint
trackPointToInsert
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToInsert
)
;
AutoTrackDOMPoint
trackEndOfLineNBSP
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
atNBSPReplaceableWithSP
)
;
AutoTrackDOMRange
trackLeadingWhiteSpaceRange
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
invisibleLeadingWhiteSpaceRangeOfNewLine
)
;
const
EditorDOMPointInText
endOfCollapsibleASCIIWhiteSpaces
=
textFragmentDataAtInsertionPoint
.
GetEndOfCollapsibleASCIIWhiteSpaces
(
atNextCharOfInsertionPoint
nsIEditor
:
:
eNone
)
;
nsresult
rv
=
WhiteSpaceVisibilityKeeper
:
:
ReplaceTextAndRemoveEmptyTextNodes
(
aHTMLEditor
EditorDOMRangeInTexts
(
atNextCharOfInsertionPoint
endOfCollapsibleASCIIWhiteSpaces
)
nsDependentSubstring
(
&
HTMLEditUtils
:
:
kNBSP
1
)
)
;
if
(
MOZ_UNLIKELY
(
NS_FAILED
(
rv
)
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
"
"
ReplaceTextAndRemoveEmptyTextNodes
(
)
failed
"
)
;
return
Err
(
rv
)
;
}
invisibleTrailingWhiteSpaceRangeOfCurrentLine
.
Clear
(
)
;
}
}
}
if
(
invisibleLeadingWhiteSpaceRangeOfNewLine
.
IsPositioned
(
)
)
{
if
(
!
invisibleLeadingWhiteSpaceRangeOfNewLine
.
Collapsed
(
)
)
{
AutoTrackDOMPoint
trackPointToInsert
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToInsert
)
;
MOZ_ASSERT
(
invisibleLeadingWhiteSpaceRangeOfNewLine
.
EndRef
(
)
=
=
pointToInsert
)
;
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndTextNodesWithTransaction
(
invisibleLeadingWhiteSpaceRangeOfNewLine
.
StartRef
(
)
invisibleLeadingWhiteSpaceRangeOfNewLine
.
EndRef
(
)
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
.
propagateErr
(
)
;
}
nsresult
rv
=
caretPointOrError
.
unwrap
(
)
.
SuggestCaretPointTo
(
aHTMLEditor
{
SuggestCaret
:
:
OnlyIfHasSuggestion
SuggestCaret
:
:
OnlyIfTransactionsAllowedToDoIt
SuggestCaret
:
:
AndIgnoreTrivialError
}
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
CaretPoint
:
:
SuggestCaretPointTo
(
)
failed
"
)
;
return
Err
(
rv
)
;
}
NS_WARNING_ASSERTION
(
rv
!
=
NS_SUCCESS_EDITOR_BUT_IGNORED_TRIVIAL_ERROR
"
CaretPoint
:
:
SuggestCaretPointTo
(
)
failed
but
ignored
"
)
;
atNBSPReplaceableWithSP
.
Clear
(
)
;
invisibleLeadingWhiteSpaceRangeOfNewLine
.
Clear
(
)
;
invisibleTrailingWhiteSpaceRangeOfCurrentLine
.
Clear
(
)
;
}
}
else
if
(
atNBSPReplaceableWithSP
.
IsInTextNode
(
)
)
{
const
EditorDOMPointInText
atNBSPReplacedWithASCIIWhiteSpace
=
atNBSPReplaceableWithSP
.
AsInText
(
)
;
if
(
!
atNBSPReplacedWithASCIIWhiteSpace
.
IsEndOfContainer
(
)
&
&
atNBSPReplacedWithASCIIWhiteSpace
.
IsCharNBSP
(
)
)
{
AutoTrackDOMPoint
trackPointToInsert
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToInsert
)
;
Result
<
InsertTextResult
nsresult
>
replaceTextResult
=
aHTMLEditor
.
ReplaceTextWithTransaction
(
MOZ_KnownLive
(
*
atNBSPReplacedWithASCIIWhiteSpace
.
ContainerAs
<
Text
>
(
)
)
atNBSPReplacedWithASCIIWhiteSpace
.
Offset
(
)
1
u
"
"
_ns
)
;
if
(
MOZ_UNLIKELY
(
replaceTextResult
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
ReplaceTextWithTransaction
(
)
failed
failed
"
)
;
return
replaceTextResult
.
propagateErr
(
)
;
}
replaceTextResult
.
unwrap
(
)
.
IgnoreCaretPointSuggestion
(
)
;
atNBSPReplaceableWithSP
.
Clear
(
)
;
invisibleLeadingWhiteSpaceRangeOfNewLine
.
Clear
(
)
;
invisibleTrailingWhiteSpaceRangeOfCurrentLine
.
Clear
(
)
;
}
}
}
Result
<
CreateLineBreakResult
nsresult
>
insertBRElementResultOrError
=
aHTMLEditor
.
InsertLineBreak
(
WithTransaction
:
:
Yes
aLineBreakType
pointToInsert
)
;
NS_WARNING_ASSERTION
(
insertBRElementResultOrError
.
isOk
(
)
"
HTMLEditor
:
:
InsertLineBreak
(
WithTransaction
:
:
Yes
"
"
aLineBreakType
eNone
)
failed
"
)
;
return
insertBRElementResultOrError
;
}
Result
<
InsertTextResult
nsresult
>
WhiteSpaceVisibilityKeeper
:
:
ReplaceText
(
HTMLEditor
&
aHTMLEditor
const
nsAString
&
aStringToInsert
const
EditorDOMRange
&
aRangeToBeReplaced
InsertTextTo
aInsertTextTo
const
Element
&
aEditingHost
)
{
if
(
aStringToInsert
.
IsEmpty
(
)
)
{
MOZ_ASSERT
(
aRangeToBeReplaced
.
Collapsed
(
)
)
;
return
InsertTextResult
(
)
;
}
TextFragmentData
textFragmentDataAtStart
(
aRangeToBeReplaced
.
StartRef
(
)
&
aEditingHost
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
;
if
(
MOZ_UNLIKELY
(
NS_WARN_IF
(
!
textFragmentDataAtStart
.
IsInitialized
(
)
)
)
)
{
return
Err
(
NS_ERROR_FAILURE
)
;
}
const
bool
isInsertionPointEqualsOrIsBeforeStartOfText
=
aRangeToBeReplaced
.
StartRef
(
)
.
EqualsOrIsBefore
(
textFragmentDataAtStart
.
StartRef
(
)
)
;
TextFragmentData
textFragmentDataAtEnd
=
aRangeToBeReplaced
.
Collapsed
(
)
?
textFragmentDataAtStart
:
TextFragmentData
(
aRangeToBeReplaced
.
EndRef
(
)
&
aEditingHost
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
;
if
(
MOZ_UNLIKELY
(
NS_WARN_IF
(
!
textFragmentDataAtEnd
.
IsInitialized
(
)
)
)
)
{
return
Err
(
NS_ERROR_FAILURE
)
;
}
const
bool
isInsertionPointEqualsOrAfterEndOfText
=
textFragmentDataAtEnd
.
EndRef
(
)
.
EqualsOrIsBefore
(
aRangeToBeReplaced
.
EndRef
(
)
)
;
EditorDOMRange
invisibleLeadingWhiteSpaceRangeAtStart
=
textFragmentDataAtStart
.
GetNewInvisibleLeadingWhiteSpaceRangeIfSplittingAt
(
aRangeToBeReplaced
.
StartRef
(
)
)
;
const
bool
isInvisibleLeadingWhiteSpaceRangeAtStartPositioned
=
invisibleLeadingWhiteSpaceRangeAtStart
.
IsPositioned
(
)
;
EditorDOMRange
invisibleTrailingWhiteSpaceRangeAtEnd
=
textFragmentDataAtEnd
.
GetNewInvisibleTrailingWhiteSpaceRangeIfSplittingAt
(
aRangeToBeReplaced
.
EndRef
(
)
)
;
const
bool
isInvisibleTrailingWhiteSpaceRangeAtEndPositioned
=
invisibleTrailingWhiteSpaceRangeAtEnd
.
IsPositioned
(
)
;
const
Maybe
<
const
VisibleWhiteSpacesData
>
visibleWhiteSpacesAtStart
=
!
isInvisibleLeadingWhiteSpaceRangeAtStartPositioned
?
Some
(
textFragmentDataAtStart
.
VisibleWhiteSpacesDataRef
(
)
)
:
Nothing
(
)
;
const
PointPosition
pointPositionWithVisibleWhiteSpacesAtStart
=
visibleWhiteSpacesAtStart
.
isSome
(
)
&
&
visibleWhiteSpacesAtStart
.
ref
(
)
.
IsInitialized
(
)
?
visibleWhiteSpacesAtStart
.
ref
(
)
.
ComparePoint
(
aRangeToBeReplaced
.
StartRef
(
)
)
:
PointPosition
:
:
NotInSameDOMTree
;
const
Maybe
<
const
VisibleWhiteSpacesData
>
visibleWhiteSpacesAtEnd
=
!
isInvisibleTrailingWhiteSpaceRangeAtEndPositioned
?
Some
(
textFragmentDataAtEnd
.
VisibleWhiteSpacesDataRef
(
)
)
:
Nothing
(
)
;
const
PointPosition
pointPositionWithVisibleWhiteSpacesAtEnd
=
visibleWhiteSpacesAtEnd
.
isSome
(
)
&
&
visibleWhiteSpacesAtEnd
.
ref
(
)
.
IsInitialized
(
)
?
visibleWhiteSpacesAtEnd
.
ref
(
)
.
ComparePoint
(
aRangeToBeReplaced
.
EndRef
(
)
)
:
PointPosition
:
:
NotInSameDOMTree
;
EditorDOMPoint
pointToPutCaret
;
EditorDOMPoint
pointToInsert
(
aRangeToBeReplaced
.
StartRef
(
)
)
;
EditorDOMPoint
atNBSPReplaceableWithSP
;
if
(
!
invisibleTrailingWhiteSpaceRangeAtEnd
.
IsPositioned
(
)
&
&
(
pointPositionWithVisibleWhiteSpacesAtStart
=
=
PointPosition
:
:
MiddleOfFragment
|
|
pointPositionWithVisibleWhiteSpacesAtStart
=
=
PointPosition
:
:
EndOfFragment
)
)
{
atNBSPReplaceableWithSP
=
textFragmentDataAtStart
.
GetPreviousNBSPPointIfNeedToReplaceWithASCIIWhiteSpace
(
pointToInsert
)
.
To
<
EditorDOMPoint
>
(
)
;
}
nsAutoString
theString
(
aStringToInsert
)
;
{
if
(
invisibleTrailingWhiteSpaceRangeAtEnd
.
IsPositioned
(
)
)
{
if
(
!
invisibleTrailingWhiteSpaceRangeAtEnd
.
Collapsed
(
)
)
{
AutoTrackDOMPoint
trackPointToInsert
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToInsert
)
;
AutoTrackDOMPoint
trackPrecedingNBSP
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
atNBSPReplaceableWithSP
)
;
AutoTrackDOMRange
trackInvisibleLeadingWhiteSpaceRange
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
invisibleLeadingWhiteSpaceRangeAtStart
)
;
AutoTrackDOMRange
trackInvisibleTrailingWhiteSpaceRange
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
invisibleTrailingWhiteSpaceRangeAtEnd
)
;
MOZ_ASSERT
(
invisibleTrailingWhiteSpaceRangeAtEnd
.
StartRef
(
)
=
=
pointToInsert
)
;
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndTextNodesWithTransaction
(
invisibleTrailingWhiteSpaceRangeAtEnd
.
StartRef
(
)
invisibleTrailingWhiteSpaceRangeAtEnd
.
EndRef
(
)
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
.
propagateErr
(
)
;
}
caretPointOrError
.
unwrap
(
)
.
MoveCaretPointTo
(
pointToPutCaret
{
SuggestCaret
:
:
OnlyIfHasSuggestion
}
)
;
}
}
else
if
(
pointPositionWithVisibleWhiteSpacesAtEnd
=
=
PointPosition
:
:
StartOfFragment
|
|
pointPositionWithVisibleWhiteSpacesAtEnd
=
=
PointPosition
:
:
MiddleOfFragment
)
{
EditorDOMPointInText
atNBSPReplacedWithASCIIWhiteSpace
=
textFragmentDataAtEnd
.
GetInclusiveNextNBSPPointIfNeedToReplaceWithASCIIWhiteSpace
(
aRangeToBeReplaced
.
EndRef
(
)
)
;
if
(
atNBSPReplacedWithASCIIWhiteSpace
.
IsSet
(
)
)
{
AutoTrackDOMPoint
trackPointToPutCaret
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToPutCaret
)
;
AutoTrackDOMPoint
trackPointToInsert
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToInsert
)
;
AutoTrackDOMPoint
trackPrecedingNBSP
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
atNBSPReplaceableWithSP
)
;
AutoTrackDOMRange
trackInvisibleLeadingWhiteSpaceRange
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
invisibleLeadingWhiteSpaceRangeAtStart
)
;
AutoTrackDOMRange
trackInvisibleTrailingWhiteSpaceRange
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
invisibleTrailingWhiteSpaceRangeAtEnd
)
;
Result
<
InsertTextResult
nsresult
>
replaceTextResult
=
aHTMLEditor
.
ReplaceTextWithTransaction
(
MOZ_KnownLive
(
*
atNBSPReplacedWithASCIIWhiteSpace
.
ContainerAs
<
Text
>
(
)
)
atNBSPReplacedWithASCIIWhiteSpace
.
Offset
(
)
1
u
"
"
_ns
)
;
if
(
MOZ_UNLIKELY
(
replaceTextResult
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
ReplaceTextWithTransaction
(
)
failed
"
)
;
return
replaceTextResult
.
propagateErr
(
)
;
}
replaceTextResult
.
unwrap
(
)
.
IgnoreCaretPointSuggestion
(
)
;
}
}
if
(
invisibleLeadingWhiteSpaceRangeAtStart
.
IsPositioned
(
)
)
{
if
(
!
invisibleLeadingWhiteSpaceRangeAtStart
.
Collapsed
(
)
)
{
AutoTrackDOMPoint
trackPointToPutCaret
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToPutCaret
)
;
AutoTrackDOMPoint
trackPointToInsert
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToInsert
)
;
AutoTrackDOMRange
trackInvisibleTrailingWhiteSpaceRange
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
invisibleTrailingWhiteSpaceRangeAtEnd
)
;
MOZ_ASSERT
(
invisibleLeadingWhiteSpaceRangeAtStart
.
EndRef
(
)
=
=
pointToInsert
)
;
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndTextNodesWithTransaction
(
invisibleLeadingWhiteSpaceRangeAtStart
.
StartRef
(
)
invisibleLeadingWhiteSpaceRangeAtStart
.
EndRef
(
)
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
.
propagateErr
(
)
;
}
trackPointToPutCaret
.
FlushAndStopTracking
(
)
;
caretPointOrError
.
unwrap
(
)
.
MoveCaretPointTo
(
pointToPutCaret
{
SuggestCaret
:
:
OnlyIfHasSuggestion
}
)
;
atNBSPReplaceableWithSP
.
Clear
(
)
;
invisibleLeadingWhiteSpaceRangeAtStart
.
Clear
(
)
;
}
}
else
if
(
atNBSPReplaceableWithSP
.
IsInTextNode
(
)
)
{
EditorDOMPointInText
atNBSPReplacedWithASCIIWhiteSpace
=
atNBSPReplaceableWithSP
.
AsInText
(
)
;
if
(
!
atNBSPReplacedWithASCIIWhiteSpace
.
IsEndOfContainer
(
)
&
&
atNBSPReplacedWithASCIIWhiteSpace
.
IsCharNBSP
(
)
)
{
AutoTrackDOMPoint
trackPointToPutCaret
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToPutCaret
)
;
AutoTrackDOMPoint
trackPointToInsert
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToInsert
)
;
AutoTrackDOMRange
trackInvisibleTrailingWhiteSpaceRange
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
invisibleTrailingWhiteSpaceRangeAtEnd
)
;
Result
<
InsertTextResult
nsresult
>
replaceTextResult
=
aHTMLEditor
.
ReplaceTextWithTransaction
(
MOZ_KnownLive
(
*
atNBSPReplacedWithASCIIWhiteSpace
.
ContainerAs
<
Text
>
(
)
)
atNBSPReplacedWithASCIIWhiteSpace
.
Offset
(
)
1
u
"
"
_ns
)
;
if
(
MOZ_UNLIKELY
(
replaceTextResult
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
ReplaceTextWithTransaction
(
)
failed
failed
"
)
;
return
replaceTextResult
.
propagateErr
(
)
;
}
replaceTextResult
.
unwrap
(
)
.
IgnoreCaretPointSuggestion
(
)
;
atNBSPReplaceableWithSP
.
Clear
(
)
;
invisibleLeadingWhiteSpaceRangeAtStart
.
Clear
(
)
;
}
}
}
MOZ_DIAGNOSTIC_ASSERT
(
!
theString
.
IsEmpty
(
)
)
;
if
(
NS_WARN_IF
(
!
pointToInsert
.
IsInContentNode
(
)
)
|
|
!
EditorUtils
:
:
IsWhiteSpacePreformatted
(
*
pointToInsert
.
ContainerAs
<
nsIContent
>
(
)
)
)
{
const
bool
isNewLineCollapsible
=
!
pointToInsert
.
IsInContentNode
(
)
|
|
!
EditorUtils
:
:
IsNewLinePreformatted
(
*
pointToInsert
.
ContainerAs
<
nsIContent
>
(
)
)
;
auto
IsCollapsibleChar
=
[
&
isNewLineCollapsible
]
(
char16_t
aChar
)
-
>
bool
{
return
nsCRT
:
:
IsAsciiSpace
(
aChar
)
&
&
(
isNewLineCollapsible
|
|
aChar
!
=
HTMLEditUtils
:
:
kNewLine
)
;
}
;
if
(
IsCollapsibleChar
(
theString
[
0
]
)
)
{
if
(
isInvisibleLeadingWhiteSpaceRangeAtStartPositioned
)
{
theString
.
SetCharAt
(
HTMLEditUtils
:
:
kNBSP
0
)
;
}
else
if
(
pointPositionWithVisibleWhiteSpacesAtStart
=
=
PointPosition
:
:
MiddleOfFragment
|
|
pointPositionWithVisibleWhiteSpacesAtStart
=
=
PointPosition
:
:
EndOfFragment
)
{
const
auto
atPreviousChar
=
textFragmentDataAtStart
.
GetPreviousEditableCharPoint
<
EditorRawDOMPointInText
>
(
pointToInsert
)
;
if
(
atPreviousChar
.
IsSet
(
)
&
&
!
atPreviousChar
.
IsEndOfContainer
(
)
&
&
atPreviousChar
.
IsCharASCIISpace
(
)
)
{
theString
.
SetCharAt
(
HTMLEditUtils
:
:
kNBSP
0
)
;
}
}
else
if
(
(
textFragmentDataAtStart
.
StartsFromHardLineBreak
(
)
|
|
textFragmentDataAtStart
.
StartsFromInlineEditingHostBoundary
(
)
)
&
&
isInsertionPointEqualsOrIsBeforeStartOfText
)
{
theString
.
SetCharAt
(
HTMLEditUtils
:
:
kNBSP
0
)
;
}
}
const
uint32_t
lastCharIndex
=
theString
.
Length
(
)
-
1
;
if
(
IsCollapsibleChar
(
theString
[
lastCharIndex
]
)
)
{
if
(
isInvisibleTrailingWhiteSpaceRangeAtEndPositioned
)
{
theString
.
SetCharAt
(
HTMLEditUtils
:
:
kNBSP
lastCharIndex
)
;
}
if
(
pointPositionWithVisibleWhiteSpacesAtEnd
=
=
PointPosition
:
:
StartOfFragment
|
|
pointPositionWithVisibleWhiteSpacesAtEnd
=
=
PointPosition
:
:
MiddleOfFragment
)
{
const
auto
atNextChar
=
textFragmentDataAtEnd
.
GetInclusiveNextEditableCharPoint
<
EditorRawDOMPointInText
>
(
pointToInsert
)
;
if
(
atNextChar
.
IsSet
(
)
&
&
!
atNextChar
.
IsEndOfContainer
(
)
&
&
atNextChar
.
IsCharASCIISpace
(
)
)
{
theString
.
SetCharAt
(
HTMLEditUtils
:
:
kNBSP
lastCharIndex
)
;
}
}
else
if
(
(
textFragmentDataAtEnd
.
EndsByBlockBoundary
(
)
|
|
textFragmentDataAtEnd
.
EndsByInlineEditingHostBoundary
(
)
)
&
&
isInsertionPointEqualsOrAfterEndOfText
)
{
theString
.
SetCharAt
(
HTMLEditUtils
:
:
kNBSP
lastCharIndex
)
;
}
}
enum
class
PreviousChar
{
NonCollapsibleChar
CollapsibleChar
PreformattedNewLine
}
;
PreviousChar
previousChar
=
PreviousChar
:
:
NonCollapsibleChar
;
for
(
uint32_t
i
=
0
;
i
<
=
lastCharIndex
;
i
+
+
)
{
if
(
IsCollapsibleChar
(
theString
[
i
]
)
)
{
if
(
previousChar
=
=
PreviousChar
:
:
CollapsibleChar
)
{
MOZ_ASSERT
(
i
>
0
)
;
theString
.
SetCharAt
(
HTMLEditUtils
:
:
kNBSP
i
-
1
)
;
continue
;
}
if
(
previousChar
=
=
PreviousChar
:
:
PreformattedNewLine
)
{
MOZ_ASSERT
(
i
>
0
)
;
theString
.
SetCharAt
(
HTMLEditUtils
:
:
kNBSP
i
)
;
previousChar
=
PreviousChar
:
:
NonCollapsibleChar
;
continue
;
}
previousChar
=
PreviousChar
:
:
CollapsibleChar
;
continue
;
}
if
(
theString
[
i
]
!
=
HTMLEditUtils
:
:
kNewLine
)
{
previousChar
=
PreviousChar
:
:
NonCollapsibleChar
;
continue
;
}
MOZ_ASSERT
(
!
isNewLineCollapsible
)
;
if
(
previousChar
=
=
PreviousChar
:
:
CollapsibleChar
)
{
MOZ_ASSERT
(
i
>
0
)
;
theString
.
SetCharAt
(
HTMLEditUtils
:
:
kNBSP
i
-
1
)
;
}
previousChar
=
PreviousChar
:
:
PreformattedNewLine
;
}
}
if
(
MOZ_UNLIKELY
(
!
aHTMLEditor
.
GetDocument
(
)
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
ReplaceText
(
)
lost
proper
document
"
)
;
return
Err
(
NS_ERROR_UNEXPECTED
)
;
}
AutoTrackDOMPoint
trackPointToPutCaret
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToPutCaret
)
;
OwningNonNull
<
Document
>
document
=
*
aHTMLEditor
.
GetDocument
(
)
;
Result
<
InsertTextResult
nsresult
>
insertTextResult
=
aHTMLEditor
.
InsertTextWithTransaction
(
document
theString
pointToInsert
aInsertTextTo
)
;
if
(
MOZ_UNLIKELY
(
insertTextResult
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
InsertTextWithTransaction
(
)
failed
"
)
;
return
insertTextResult
.
propagateErr
(
)
;
}
trackPointToPutCaret
.
FlushAndStopTracking
(
)
;
if
(
insertTextResult
.
inspect
(
)
.
HasCaretPointSuggestion
(
)
)
{
return
insertTextResult
;
}
return
InsertTextResult
(
insertTextResult
.
unwrap
(
)
std
:
:
move
(
pointToPutCaret
)
)
;
}
Result
<
CaretPoint
nsresult
>
WhiteSpaceVisibilityKeeper
:
:
DeletePreviousWhiteSpace
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
const
Element
&
aEditingHost
)
{
TextFragmentData
textFragmentDataAtDeletion
(
aPoint
&
aEditingHost
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
;
if
(
NS_WARN_IF
(
!
textFragmentDataAtDeletion
.
IsInitialized
(
)
)
)
{
return
Err
(
NS_ERROR_FAILURE
)
;
}
const
EditorDOMPointInText
atPreviousCharOfStart
=
textFragmentDataAtDeletion
.
GetPreviousEditableCharPoint
(
aPoint
)
;
if
(
!
atPreviousCharOfStart
.
IsSet
(
)
|
|
atPreviousCharOfStart
.
IsEndOfContainer
(
)
)
{
return
CaretPoint
(
EditorDOMPoint
(
)
)
;
}
if
(
atPreviousCharOfStart
.
IsCharCollapsibleASCIISpace
(
)
|
|
atPreviousCharOfStart
.
IsCharPreformattedNewLineCollapsedWithWhiteSpaces
(
)
)
{
auto
startToDelete
=
textFragmentDataAtDeletion
.
GetFirstASCIIWhiteSpacePointCollapsedTo
<
EditorDOMPoint
>
(
atPreviousCharOfStart
nsIEditor
:
:
ePrevious
)
;
auto
endToDelete
=
textFragmentDataAtDeletion
.
GetEndOfCollapsibleASCIIWhiteSpaces
<
EditorDOMPoint
>
(
atPreviousCharOfStart
nsIEditor
:
:
ePrevious
)
;
EditorDOMPoint
pointToPutCaret
;
{
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
WhiteSpaceVisibilityKeeper
:
:
PrepareToDeleteRangeAndTrackPoints
(
aHTMLEditor
&
startToDelete
&
endToDelete
aEditingHost
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
PrepareToDeleteRangeAndTrackPoints
(
)
"
"
failed
"
)
;
return
caretPointOrError
;
}
caretPointOrError
.
unwrap
(
)
.
MoveCaretPointTo
(
pointToPutCaret
{
SuggestCaret
:
:
OnlyIfHasSuggestion
}
)
;
}
{
AutoTrackDOMPoint
trackPointToPutCaret
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToPutCaret
)
;
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndTextNodesWithTransaction
(
startToDelete
endToDelete
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
;
}
trackPointToPutCaret
.
FlushAndStopTracking
(
)
;
caretPointOrError
.
unwrap
(
)
.
MoveCaretPointTo
(
pointToPutCaret
{
SuggestCaret
:
:
OnlyIfHasSuggestion
}
)
;
}
return
CaretPoint
(
std
:
:
move
(
pointToPutCaret
)
)
;
}
if
(
atPreviousCharOfStart
.
IsCharCollapsibleNBSP
(
)
)
{
auto
startToDelete
=
atPreviousCharOfStart
.
To
<
EditorDOMPoint
>
(
)
;
auto
endToDelete
=
startToDelete
.
NextPoint
<
EditorDOMPoint
>
(
)
;
EditorDOMPoint
pointToPutCaret
;
{
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
WhiteSpaceVisibilityKeeper
:
:
PrepareToDeleteRangeAndTrackPoints
(
aHTMLEditor
&
startToDelete
&
endToDelete
aEditingHost
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
PrepareToDeleteRangeAndTrackPoints
(
)
"
"
failed
"
)
;
return
caretPointOrError
;
}
caretPointOrError
.
unwrap
(
)
.
MoveCaretPointTo
(
pointToPutCaret
{
SuggestCaret
:
:
OnlyIfHasSuggestion
}
)
;
}
{
AutoTrackDOMPoint
trackPointToPutCaret
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToPutCaret
)
;
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndTextNodesWithTransaction
(
startToDelete
endToDelete
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
;
}
trackPointToPutCaret
.
FlushAndStopTracking
(
)
;
caretPointOrError
.
unwrap
(
)
.
MoveCaretPointTo
(
pointToPutCaret
{
SuggestCaret
:
:
OnlyIfHasSuggestion
}
)
;
}
return
CaretPoint
(
std
:
:
move
(
pointToPutCaret
)
)
;
}
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndTextNodesWithTransaction
(
atPreviousCharOfStart
atPreviousCharOfStart
.
NextPoint
(
)
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
)
;
NS_WARNING_ASSERTION
(
caretPointOrError
.
isOk
(
)
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
;
}
Result
<
CaretPoint
nsresult
>
WhiteSpaceVisibilityKeeper
:
:
DeleteInclusiveNextWhiteSpace
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
const
Element
&
aEditingHost
)
{
TextFragmentData
textFragmentDataAtDeletion
(
aPoint
&
aEditingHost
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
;
if
(
NS_WARN_IF
(
!
textFragmentDataAtDeletion
.
IsInitialized
(
)
)
)
{
return
Err
(
NS_ERROR_FAILURE
)
;
}
auto
atNextCharOfStart
=
textFragmentDataAtDeletion
.
GetInclusiveNextEditableCharPoint
<
EditorDOMPointInText
>
(
aPoint
)
;
if
(
!
atNextCharOfStart
.
IsSet
(
)
|
|
atNextCharOfStart
.
IsEndOfContainer
(
)
)
{
return
CaretPoint
(
EditorDOMPoint
(
)
)
;
}
if
(
atNextCharOfStart
.
IsCharCollapsibleASCIISpace
(
)
|
|
atNextCharOfStart
.
IsCharPreformattedNewLineCollapsedWithWhiteSpaces
(
)
)
{
auto
startToDelete
=
textFragmentDataAtDeletion
.
GetFirstASCIIWhiteSpacePointCollapsedTo
<
EditorDOMPoint
>
(
atNextCharOfStart
nsIEditor
:
:
eNext
)
;
auto
endToDelete
=
textFragmentDataAtDeletion
.
GetEndOfCollapsibleASCIIWhiteSpaces
<
EditorDOMPoint
>
(
atNextCharOfStart
nsIEditor
:
:
eNext
)
;
EditorDOMPoint
pointToPutCaret
;
{
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
WhiteSpaceVisibilityKeeper
:
:
PrepareToDeleteRangeAndTrackPoints
(
aHTMLEditor
&
startToDelete
&
endToDelete
aEditingHost
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
PrepareToDeleteRangeAndTrackPoints
(
)
"
"
failed
"
)
;
return
caretPointOrError
;
}
caretPointOrError
.
unwrap
(
)
.
MoveCaretPointTo
(
pointToPutCaret
{
SuggestCaret
:
:
OnlyIfHasSuggestion
}
)
;
}
{
AutoTrackDOMPoint
trackPointToPutCaret
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToPutCaret
)
;
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndTextNodesWithTransaction
(
startToDelete
endToDelete
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
;
}
trackPointToPutCaret
.
FlushAndStopTracking
(
)
;
caretPointOrError
.
unwrap
(
)
.
MoveCaretPointTo
(
pointToPutCaret
{
SuggestCaret
:
:
OnlyIfHasSuggestion
}
)
;
}
return
CaretPoint
(
std
:
:
move
(
pointToPutCaret
)
)
;
}
if
(
atNextCharOfStart
.
IsCharCollapsibleNBSP
(
)
)
{
auto
startToDelete
=
atNextCharOfStart
.
To
<
EditorDOMPoint
>
(
)
;
auto
endToDelete
=
startToDelete
.
NextPoint
<
EditorDOMPoint
>
(
)
;
EditorDOMPoint
pointToPutCaret
;
{
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
WhiteSpaceVisibilityKeeper
:
:
PrepareToDeleteRangeAndTrackPoints
(
aHTMLEditor
&
startToDelete
&
endToDelete
aEditingHost
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
PrepareToDeleteRangeAndTrackPoints
(
)
"
"
failed
"
)
;
return
caretPointOrError
;
}
caretPointOrError
.
unwrap
(
)
.
MoveCaretPointTo
(
pointToPutCaret
{
SuggestCaret
:
:
OnlyIfHasSuggestion
}
)
;
}
{
AutoTrackDOMPoint
trackPointToPutCaret
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToPutCaret
)
;
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndTextNodesWithTransaction
(
startToDelete
endToDelete
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
;
}
trackPointToPutCaret
.
FlushAndStopTracking
(
)
;
caretPointOrError
.
unwrap
(
)
.
MoveCaretPointTo
(
pointToPutCaret
{
SuggestCaret
:
:
OnlyIfHasSuggestion
}
)
;
}
return
CaretPoint
(
std
:
:
move
(
pointToPutCaret
)
)
;
}
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndTextNodesWithTransaction
(
atNextCharOfStart
atNextCharOfStart
.
NextPoint
(
)
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
)
;
NS_WARNING_ASSERTION
(
caretPointOrError
.
isOk
(
)
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
;
}
Result
<
CaretPoint
nsresult
>
WhiteSpaceVisibilityKeeper
:
:
DeleteContentNodeAndJoinTextNodesAroundIt
(
HTMLEditor
&
aHTMLEditor
nsIContent
&
aContentToDelete
const
EditorDOMPoint
&
aCaretPoint
const
Element
&
aEditingHost
)
{
EditorDOMPoint
atContent
(
&
aContentToDelete
)
;
if
(
!
atContent
.
IsSet
(
)
)
{
NS_WARNING
(
"
Deleting
content
node
was
an
orphan
node
"
)
;
return
Err
(
NS_ERROR_FAILURE
)
;
}
if
(
!
HTMLEditUtils
:
:
IsRemovableNode
(
aContentToDelete
)
)
{
NS_WARNING
(
"
Deleting
content
node
wasn
'
t
removable
"
)
;
return
Err
(
NS_ERROR_FAILURE
)
;
}
EditorDOMPoint
pointToPutCaret
(
aCaretPoint
)
;
{
AutoTrackDOMPoint
trackPointToPutCaret
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToPutCaret
)
;
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
WhiteSpaceVisibilityKeeper
:
:
MakeSureToKeepVisibleStateOfWhiteSpacesAroundDeletingRange
(
aHTMLEditor
EditorDOMRange
(
atContent
atContent
.
NextPoint
(
)
)
aEditingHost
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
"
"
MakeSureToKeepVisibleStateOfWhiteSpacesAroundDeletingRange
(
)
"
"
failed
"
)
;
return
caretPointOrError
;
}
trackPointToPutCaret
.
FlushAndStopTracking
(
)
;
caretPointOrError
.
unwrap
(
)
.
MoveCaretPointTo
(
pointToPutCaret
{
SuggestCaret
:
:
OnlyIfHasSuggestion
}
)
;
}
nsCOMPtr
<
nsIContent
>
previousEditableSibling
=
HTMLEditUtils
:
:
GetPreviousSibling
(
aContentToDelete
{
WalkTreeOption
:
:
IgnoreNonEditableNode
}
)
;
{
AutoTrackDOMPoint
trackPointToPutCaret
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToPutCaret
)
;
nsresult
rv
=
aHTMLEditor
.
DeleteNodeWithTransaction
(
aContentToDelete
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
EditorBase
:
:
DeleteNodeWithTransaction
(
)
failed
"
)
;
return
Err
(
rv
)
;
}
}
if
(
!
aCaretPoint
.
IsInTextNode
(
)
|
|
!
previousEditableSibling
|
|
!
previousEditableSibling
-
>
IsText
(
)
)
{
return
CaretPoint
(
std
:
:
move
(
pointToPutCaret
)
)
;
}
nsIContent
*
nextEditableSibling
=
HTMLEditUtils
:
:
GetNextSibling
(
*
previousEditableSibling
{
WalkTreeOption
:
:
IgnoreNonEditableNode
}
)
;
if
(
aCaretPoint
.
GetContainer
(
)
!
=
nextEditableSibling
)
{
return
CaretPoint
(
std
:
:
move
(
pointToPutCaret
)
)
;
}
nsresult
rv
=
aHTMLEditor
.
JoinNearestEditableNodesWithTransaction
(
*
previousEditableSibling
MOZ_KnownLive
(
*
aCaretPoint
.
ContainerAs
<
Text
>
(
)
)
&
pointToPutCaret
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
JoinNearestEditableNodesWithTransaction
(
)
failed
"
)
;
return
Err
(
rv
)
;
}
if
(
!
pointToPutCaret
.
IsSet
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
JoinNearestEditableNodesWithTransaction
(
)
didn
'
t
return
"
"
right
node
position
"
)
;
return
Err
(
NS_ERROR_FAILURE
)
;
}
return
CaretPoint
(
std
:
:
move
(
pointToPutCaret
)
)
;
}
Result
<
CaretPoint
nsresult
>
WhiteSpaceVisibilityKeeper
:
:
MakeSureToKeepVisibleStateOfWhiteSpacesAroundDeletingRange
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMRange
&
aRangeToDelete
const
Element
&
aEditingHost
)
{
if
(
NS_WARN_IF
(
!
aRangeToDelete
.
IsPositionedAndValid
(
)
)
|
|
NS_WARN_IF
(
!
aRangeToDelete
.
IsInContentNodes
(
)
)
)
{
return
Err
(
NS_ERROR_INVALID_ARG
)
;
}
EditorDOMRange
rangeToDelete
(
aRangeToDelete
)
;
bool
mayBecomeUnexpectedDOMTree
=
aHTMLEditor
.
MayHaveMutationEventListeners
(
NS_EVENT_BITS_MUTATION_SUBTREEMODIFIED
|
NS_EVENT_BITS_MUTATION_NODEREMOVED
|
NS_EVENT_BITS_MUTATION_NODEREMOVEDFROMDOCUMENT
|
NS_EVENT_BITS_MUTATION_CHARACTERDATAMODIFIED
)
;
TextFragmentData
textFragmentDataAtStart
(
rangeToDelete
.
StartRef
(
)
&
aEditingHost
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
;
if
(
NS_WARN_IF
(
!
textFragmentDataAtStart
.
IsInitialized
(
)
)
)
{
return
Err
(
NS_ERROR_FAILURE
)
;
}
TextFragmentData
textFragmentDataAtEnd
(
rangeToDelete
.
EndRef
(
)
&
aEditingHost
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
;
if
(
NS_WARN_IF
(
!
textFragmentDataAtEnd
.
IsInitialized
(
)
)
)
{
return
Err
(
NS_ERROR_FAILURE
)
;
}
ReplaceRangeData
replaceRangeDataAtEnd
=
textFragmentDataAtEnd
.
GetReplaceRangeDataAtEndOfDeletionRange
(
textFragmentDataAtStart
)
;
EditorDOMPoint
pointToPutCaret
;
if
(
replaceRangeDataAtEnd
.
IsSet
(
)
&
&
!
replaceRangeDataAtEnd
.
Collapsed
(
)
)
{
MOZ_ASSERT
(
rangeToDelete
.
EndRef
(
)
.
EqualsOrIsBefore
(
replaceRangeDataAtEnd
.
EndRef
(
)
)
)
;
MOZ_ASSERT_IF
(
rangeToDelete
.
EndRef
(
)
.
IsInTextNode
(
)
&
&
!
rangeToDelete
.
EndRef
(
)
.
IsEndOfContainer
(
)
replaceRangeDataAtEnd
.
StartRef
(
)
.
EqualsOrIsBefore
(
rangeToDelete
.
EndRef
(
)
)
)
;
MOZ_ASSERT_IF
(
rangeToDelete
.
EndRef
(
)
.
IsInTextNode
(
)
&
&
rangeToDelete
.
EndRef
(
)
.
IsEndOfContainer
(
)
replaceRangeDataAtEnd
.
StartRef
(
)
.
EqualsOrIsBefore
(
rangeToDelete
.
EndRef
(
)
)
|
|
replaceRangeDataAtEnd
.
StartRef
(
)
.
IsStartOfContainer
(
)
)
;
MOZ_ASSERT
(
rangeToDelete
.
StartRef
(
)
.
EqualsOrIsBefore
(
replaceRangeDataAtEnd
.
StartRef
(
)
)
)
;
if
(
!
replaceRangeDataAtEnd
.
HasReplaceString
(
)
)
{
EditorDOMPoint
startToDelete
(
aRangeToDelete
.
StartRef
(
)
)
;
EditorDOMPoint
endToDelete
(
replaceRangeDataAtEnd
.
StartRef
(
)
)
;
{
AutoEditorDOMPointChildInvalidator
lockOffsetOfStart
(
startToDelete
)
;
AutoEditorDOMPointChildInvalidator
lockOffsetOfEnd
(
endToDelete
)
;
AutoTrackDOMPoint
trackStartToDelete
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
startToDelete
)
;
AutoTrackDOMPoint
trackEndToDelete
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
endToDelete
)
;
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndTextNodesWithTransaction
(
replaceRangeDataAtEnd
.
StartRef
(
)
replaceRangeDataAtEnd
.
EndRef
(
)
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
;
}
caretPointOrError
.
unwrap
(
)
.
MoveCaretPointTo
(
pointToPutCaret
{
SuggestCaret
:
:
OnlyIfHasSuggestion
}
)
;
}
if
(
mayBecomeUnexpectedDOMTree
&
&
(
NS_WARN_IF
(
!
startToDelete
.
IsSetAndValid
(
)
)
|
|
NS_WARN_IF
(
!
endToDelete
.
IsSetAndValid
(
)
)
|
|
NS_WARN_IF
(
!
startToDelete
.
EqualsOrIsBefore
(
endToDelete
)
)
)
)
{
return
Err
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
MOZ_ASSERT
(
startToDelete
.
EqualsOrIsBefore
(
endToDelete
)
)
;
rangeToDelete
.
SetStartAndEnd
(
startToDelete
endToDelete
)
;
}
else
{
MOZ_ASSERT
(
replaceRangeDataAtEnd
.
RangeRef
(
)
.
IsInTextNodes
(
)
)
;
EditorDOMPoint
startToDelete
(
aRangeToDelete
.
StartRef
(
)
)
;
EditorDOMPoint
endToDelete
(
replaceRangeDataAtEnd
.
StartRef
(
)
)
;
{
AutoTrackDOMPoint
trackStartToDelete
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
startToDelete
)
;
AutoTrackDOMPoint
trackEndToDelete
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
endToDelete
)
;
AutoTrackDOMPoint
trackPointToPutCaret
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToPutCaret
)
;
nsresult
rv
=
WhiteSpaceVisibilityKeeper
:
:
ReplaceTextAndRemoveEmptyTextNodes
(
aHTMLEditor
replaceRangeDataAtEnd
.
RangeRef
(
)
.
AsInTexts
(
)
replaceRangeDataAtEnd
.
ReplaceStringRef
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
"
"
MakeSureToKeepVisibleStateOfWhiteSpacesAtEndOfDeletingRange
(
)
"
"
failed
"
)
;
return
Err
(
rv
)
;
}
}
if
(
mayBecomeUnexpectedDOMTree
&
&
(
NS_WARN_IF
(
!
startToDelete
.
IsSetAndValid
(
)
)
|
|
NS_WARN_IF
(
!
endToDelete
.
IsSetAndValid
(
)
)
|
|
NS_WARN_IF
(
!
startToDelete
.
EqualsOrIsBefore
(
endToDelete
)
)
)
)
{
return
Err
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
MOZ_ASSERT
(
startToDelete
.
EqualsOrIsBefore
(
endToDelete
)
)
;
rangeToDelete
.
SetStartAndEnd
(
startToDelete
endToDelete
)
;
}
if
(
mayBecomeUnexpectedDOMTree
)
{
if
(
&
aEditingHost
!
=
aHTMLEditor
.
ComputeEditingHost
(
)
)
{
NS_WARNING
(
"
Active
editing
host
was
changed
"
)
;
return
Err
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
if
(
!
rangeToDelete
.
IsInContentNodes
(
)
)
{
NS_WARNING
(
"
The
modified
range
was
not
in
content
"
)
;
return
Err
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
textFragmentDataAtStart
=
TextFragmentData
(
rangeToDelete
.
StartRef
(
)
&
aEditingHost
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
;
textFragmentDataAtEnd
=
TextFragmentData
(
rangeToDelete
.
EndRef
(
)
&
aEditingHost
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
;
}
}
ReplaceRangeData
replaceRangeDataAtStart
=
textFragmentDataAtStart
.
GetReplaceRangeDataAtStartOfDeletionRange
(
textFragmentDataAtEnd
)
;
if
(
!
replaceRangeDataAtStart
.
IsSet
(
)
|
|
replaceRangeDataAtStart
.
Collapsed
(
)
)
{
return
CaretPoint
(
std
:
:
move
(
pointToPutCaret
)
)
;
}
if
(
!
replaceRangeDataAtStart
.
HasReplaceString
(
)
)
{
AutoTrackDOMPoint
trackPointToPutCaret
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToPutCaret
)
;
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndTextNodesWithTransaction
(
replaceRangeDataAtStart
.
StartRef
(
)
replaceRangeDataAtStart
.
EndRef
(
)
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
.
propagateErr
(
)
;
}
trackPointToPutCaret
.
FlushAndStopTracking
(
)
;
caretPointOrError
.
unwrap
(
)
.
MoveCaretPointTo
(
pointToPutCaret
{
SuggestCaret
:
:
OnlyIfHasSuggestion
}
)
;
return
CaretPoint
(
std
:
:
move
(
pointToPutCaret
)
)
;
}
MOZ_ASSERT
(
replaceRangeDataAtStart
.
RangeRef
(
)
.
IsInTextNodes
(
)
)
;
{
AutoTrackDOMPoint
trackPointToPutCaret
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToPutCaret
)
;
nsresult
rv
=
WhiteSpaceVisibilityKeeper
:
:
ReplaceTextAndRemoveEmptyTextNodes
(
aHTMLEditor
replaceRangeDataAtStart
.
RangeRef
(
)
.
AsInTexts
(
)
replaceRangeDataAtStart
.
ReplaceStringRef
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
"
"
MakeSureToKeepVisibleStateOfWhiteSpacesAtStartOfDeletingRange
(
)
"
"
failed
"
)
;
return
Err
(
rv
)
;
}
}
return
CaretPoint
(
std
:
:
move
(
pointToPutCaret
)
)
;
}
nsresult
WhiteSpaceVisibilityKeeper
:
:
MakeSureToKeepVisibleWhiteSpacesVisibleAfterSplit
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPointToSplit
)
{
TextFragmentData
textFragmentDataAtSplitPoint
(
aPointToSplit
aHTMLEditor
.
ComputeEditingHost
(
)
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
;
if
(
NS_WARN_IF
(
!
textFragmentDataAtSplitPoint
.
IsInitialized
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
const
VisibleWhiteSpacesData
&
visibleWhiteSpaces
=
textFragmentDataAtSplitPoint
.
VisibleWhiteSpacesDataRef
(
)
;
if
(
!
visibleWhiteSpaces
.
IsInitialized
(
)
)
{
return
NS_OK
;
}
PointPosition
pointPositionWithVisibleWhiteSpaces
=
visibleWhiteSpaces
.
ComparePoint
(
aPointToSplit
)
;
EditorDOMPoint
pointToSplit
(
aPointToSplit
)
;
if
(
pointPositionWithVisibleWhiteSpaces
=
=
PointPosition
:
:
StartOfFragment
|
|
pointPositionWithVisibleWhiteSpaces
=
=
PointPosition
:
:
MiddleOfFragment
)
{
EditorDOMPointInText
atNextCharOfStart
=
textFragmentDataAtSplitPoint
.
GetInclusiveNextEditableCharPoint
(
pointToSplit
)
;
if
(
atNextCharOfStart
.
IsSet
(
)
&
&
!
atNextCharOfStart
.
IsEndOfContainer
(
)
&
&
atNextCharOfStart
.
IsCharCollapsibleASCIISpace
(
)
)
{
AutoEditorDOMPointChildInvalidator
forgetChild
(
pointToSplit
)
;
AutoTrackDOMPoint
trackSplitPoint
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToSplit
)
;
if
(
atNextCharOfStart
.
IsStartOfContainer
(
)
|
|
atNextCharOfStart
.
IsPreviousCharASCIISpace
(
)
)
{
atNextCharOfStart
=
textFragmentDataAtSplitPoint
.
GetFirstASCIIWhiteSpacePointCollapsedTo
(
atNextCharOfStart
nsIEditor
:
:
eNone
)
;
}
const
EditorDOMPointInText
endOfCollapsibleASCIIWhiteSpaces
=
textFragmentDataAtSplitPoint
.
GetEndOfCollapsibleASCIIWhiteSpaces
(
atNextCharOfStart
nsIEditor
:
:
eNone
)
;
nsresult
rv
=
WhiteSpaceVisibilityKeeper
:
:
ReplaceTextAndRemoveEmptyTextNodes
(
aHTMLEditor
EditorDOMRangeInTexts
(
atNextCharOfStart
endOfCollapsibleASCIIWhiteSpaces
)
nsDependentSubstring
(
&
HTMLEditUtils
:
:
kNBSP
1
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
ReplaceTextAndRemoveEmptyTextNodes
(
)
"
"
failed
"
)
;
return
rv
;
}
}
}
if
(
pointPositionWithVisibleWhiteSpaces
=
=
PointPosition
:
:
MiddleOfFragment
|
|
pointPositionWithVisibleWhiteSpaces
=
=
PointPosition
:
:
EndOfFragment
)
{
EditorDOMPointInText
atPreviousCharOfStart
=
textFragmentDataAtSplitPoint
.
GetPreviousEditableCharPoint
(
pointToSplit
)
;
if
(
atPreviousCharOfStart
.
IsSet
(
)
&
&
!
atPreviousCharOfStart
.
IsEndOfContainer
(
)
&
&
atPreviousCharOfStart
.
IsCharCollapsibleASCIISpace
(
)
)
{
if
(
atPreviousCharOfStart
.
IsStartOfContainer
(
)
|
|
atPreviousCharOfStart
.
IsPreviousCharASCIISpace
(
)
)
{
atPreviousCharOfStart
=
textFragmentDataAtSplitPoint
.
GetFirstASCIIWhiteSpacePointCollapsedTo
(
atPreviousCharOfStart
nsIEditor
:
:
eNone
)
;
}
const
EditorDOMPointInText
endOfCollapsibleASCIIWhiteSpaces
=
textFragmentDataAtSplitPoint
.
GetEndOfCollapsibleASCIIWhiteSpaces
(
atPreviousCharOfStart
nsIEditor
:
:
eNone
)
;
nsresult
rv
=
WhiteSpaceVisibilityKeeper
:
:
ReplaceTextAndRemoveEmptyTextNodes
(
aHTMLEditor
EditorDOMRangeInTexts
(
atPreviousCharOfStart
endOfCollapsibleASCIIWhiteSpaces
)
nsDependentSubstring
(
&
HTMLEditUtils
:
:
kNBSP
1
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
WhiteSpaceVisibilityKeeper
:
:
ReplaceTextAndRemoveEmptyTextNodes
(
)
"
"
failed
"
)
;
return
rv
;
}
}
}
return
NS_OK
;
}
nsresult
WhiteSpaceVisibilityKeeper
:
:
ReplaceTextAndRemoveEmptyTextNodes
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMRangeInTexts
&
aRangeToReplace
const
nsAString
&
aReplaceString
)
{
MOZ_ASSERT
(
aRangeToReplace
.
IsPositioned
(
)
)
;
MOZ_ASSERT
(
aRangeToReplace
.
StartRef
(
)
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
aRangeToReplace
.
EndRef
(
)
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
aRangeToReplace
.
StartRef
(
)
.
IsBefore
(
aRangeToReplace
.
EndRef
(
)
)
)
;
{
Result
<
InsertTextResult
nsresult
>
caretPointOrError
=
aHTMLEditor
.
ReplaceTextWithTransaction
(
MOZ_KnownLive
(
*
aRangeToReplace
.
StartRef
(
)
.
ContainerAs
<
Text
>
(
)
)
aRangeToReplace
.
StartRef
(
)
.
Offset
(
)
aRangeToReplace
.
InSameContainer
(
)
?
aRangeToReplace
.
EndRef
(
)
.
Offset
(
)
-
aRangeToReplace
.
StartRef
(
)
.
Offset
(
)
:
aRangeToReplace
.
StartRef
(
)
.
ContainerAs
<
Text
>
(
)
-
>
TextLength
(
)
-
aRangeToReplace
.
StartRef
(
)
.
Offset
(
)
aReplaceString
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
ReplaceTextWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
.
unwrapErr
(
)
;
}
caretPointOrError
.
unwrap
(
)
.
IgnoreCaretPointSuggestion
(
)
;
}
if
(
aRangeToReplace
.
InSameContainer
(
)
)
{
return
NS_OK
;
}
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndTextNodesWithTransaction
(
EditorDOMPointInText
:
:
AtEndOf
(
*
aRangeToReplace
.
StartRef
(
)
.
ContainerAs
<
Text
>
(
)
)
aRangeToReplace
.
EndRef
(
)
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
.
unwrapErr
(
)
;
}
caretPointOrError
.
unwrap
(
)
.
IgnoreCaretPointSuggestion
(
)
;
return
NS_OK
;
}
template
<
typename
EditorDOMPointType
>
nsresult
WhiteSpaceVisibilityKeeper
:
:
NormalizeVisibleWhiteSpacesAt
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointType
&
aPoint
const
Element
&
aEditingHost
)
{
MOZ_ASSERT
(
aPoint
.
IsInContentNode
(
)
)
;
MOZ_ASSERT
(
EditorUtils
:
:
IsEditableContent
(
*
aPoint
.
template
ContainerAs
<
nsIContent
>
(
)
EditorType
:
:
HTML
)
)
;
TextFragmentData
textFragmentData
(
aPoint
&
aEditingHost
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
;
if
(
NS_WARN_IF
(
!
textFragmentData
.
IsInitialized
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
textFragmentData
.
FoundNoBreakingWhiteSpaces
(
)
)
{
return
NS_OK
;
}
const
VisibleWhiteSpacesData
&
visibleWhiteSpaces
=
textFragmentData
.
VisibleWhiteSpacesDataRef
(
)
;
if
(
!
visibleWhiteSpaces
.
IsInitialized
(
)
)
{
return
NS_OK
;
}
if
(
!
StaticPrefs
:
:
editor_white_space_normalization_blink_compatible
(
)
)
{
const
EditorDOMPoint
&
atEndOfVisibleWhiteSpaces
=
visibleWhiteSpaces
.
EndRef
(
)
;
EditorDOMPointInText
atPreviousCharOfEndOfVisibleWhiteSpaces
=
textFragmentData
.
GetPreviousEditableCharPoint
(
atEndOfVisibleWhiteSpaces
)
;
if
(
!
atPreviousCharOfEndOfVisibleWhiteSpaces
.
IsSet
(
)
|
|
atPreviousCharOfEndOfVisibleWhiteSpaces
.
IsEndOfContainer
(
)
|
|
!
atPreviousCharOfEndOfVisibleWhiteSpaces
.
IsCharCollapsibleNBSP
(
)
)
{
return
NS_OK
;
}
EditorDOMPointInText
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
=
textFragmentData
.
GetPreviousEditableCharPoint
(
atPreviousCharOfEndOfVisibleWhiteSpaces
)
;
bool
isPreviousCharCollapsibleASCIIWhiteSpace
=
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
.
IsSet
(
)
&
&
!
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
.
IsEndOfContainer
(
)
&
&
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
.
IsCharCollapsibleASCIISpace
(
)
;
const
bool
maybeNBSPFollowsVisibleContent
=
(
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
.
IsSet
(
)
&
&
!
isPreviousCharCollapsibleASCIIWhiteSpace
)
|
|
(
!
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
.
IsSet
(
)
&
&
(
visibleWhiteSpaces
.
StartsFromNonCollapsibleCharacters
(
)
|
|
visibleWhiteSpaces
.
StartsFromSpecialContent
(
)
)
)
;
bool
followedByVisibleContent
=
visibleWhiteSpaces
.
EndsByNonCollapsibleCharacters
(
)
|
|
visibleWhiteSpaces
.
EndsBySpecialContent
(
)
;
bool
followedByBRElement
=
visibleWhiteSpaces
.
EndsByBRElement
(
)
;
bool
followedByPreformattedLineBreak
=
visibleWhiteSpaces
.
EndsByPreformattedLineBreak
(
)
;
if
(
maybeNBSPFollowsVisibleContent
|
|
isPreviousCharCollapsibleASCIIWhiteSpace
)
{
if
(
(
visibleWhiteSpaces
.
EndsByBlockBoundary
(
)
|
|
visibleWhiteSpaces
.
EndsByInlineEditingHostBoundary
(
)
)
&
&
aPoint
.
IsInContentNode
(
)
)
{
bool
insertBRElement
=
HTMLEditUtils
:
:
IsBlockElement
(
*
aPoint
.
template
ContainerAs
<
nsIContent
>
(
)
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
;
if
(
!
insertBRElement
)
{
NS_ASSERTION
(
EditorUtils
:
:
IsEditableContent
(
*
aPoint
.
template
ContainerAs
<
nsIContent
>
(
)
EditorType
:
:
HTML
)
"
Given
content
is
not
editable
"
)
;
NS_ASSERTION
(
aPoint
.
template
ContainerAs
<
nsIContent
>
(
)
-
>
GetAsElementOrParentElement
(
)
"
Given
content
is
not
an
element
and
an
orphan
node
"
)
;
const
Element
*
editableBlockElement
=
EditorUtils
:
:
IsEditableContent
(
*
aPoint
.
template
ContainerAs
<
nsIContent
>
(
)
EditorType
:
:
HTML
)
?
HTMLEditUtils
:
:
GetInclusiveAncestorElement
(
*
aPoint
.
template
ContainerAs
<
nsIContent
>
(
)
HTMLEditUtils
:
:
ClosestEditableBlockElement
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
:
nullptr
;
insertBRElement
=
!
!
editableBlockElement
;
}
if
(
insertBRElement
)
{
if
(
NS_WARN_IF
(
!
atEndOfVisibleWhiteSpaces
.
IsInContentNode
(
)
)
)
{
return
Err
(
NS_ERROR_FAILURE
)
;
}
const
Maybe
<
LineBreakType
>
lineBreakType
=
aHTMLEditor
.
GetPreferredLineBreakType
(
*
atEndOfVisibleWhiteSpaces
.
ContainerAs
<
nsIContent
>
(
)
aEditingHost
)
;
if
(
NS_WARN_IF
(
lineBreakType
.
isNothing
(
)
)
)
{
return
Err
(
NS_ERROR_FAILURE
)
;
}
Result
<
CreateLineBreakResult
nsresult
>
insertBRElementResultOrError
=
aHTMLEditor
.
InsertLineBreak
(
WithTransaction
:
:
Yes
*
lineBreakType
atEndOfVisibleWhiteSpaces
)
;
if
(
MOZ_UNLIKELY
(
insertBRElementResultOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
nsPrintfCString
(
"
HTMLEditor
:
:
InsertLineBreak
(
"
"
WithTransaction
:
:
Yes
%
s
)
failed
"
ToString
(
*
lineBreakType
)
.
c_str
(
)
)
.
get
(
)
)
;
return
insertBRElementResultOrError
.
propagateErr
(
)
;
}
CreateLineBreakResult
insertBRElementResult
=
insertBRElementResultOrError
.
unwrap
(
)
;
MOZ_ASSERT
(
insertBRElementResult
.
Handled
(
)
)
;
insertBRElementResult
.
IgnoreCaretPointSuggestion
(
)
;
atPreviousCharOfEndOfVisibleWhiteSpaces
=
textFragmentData
.
GetPreviousEditableCharPoint
(
atEndOfVisibleWhiteSpaces
)
;
if
(
NS_WARN_IF
(
!
atPreviousCharOfEndOfVisibleWhiteSpaces
.
IsSet
(
)
)
)
{
return
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
;
}
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
=
textFragmentData
.
GetPreviousEditableCharPoint
(
atPreviousCharOfEndOfVisibleWhiteSpaces
)
;
isPreviousCharCollapsibleASCIIWhiteSpace
=
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
.
IsSet
(
)
&
&
!
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
.
IsEndOfContainer
(
)
&
&
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
.
IsCharCollapsibleASCIISpace
(
)
;
followedByBRElement
=
true
;
followedByVisibleContent
=
followedByPreformattedLineBreak
=
false
;
}
}
if
(
EditorUtils
:
:
IsWhiteSpacePreformatted
(
*
atPreviousCharOfEndOfVisibleWhiteSpaces
.
ContainerAs
<
Text
>
(
)
)
)
{
return
NS_OK
;
}
if
(
maybeNBSPFollowsVisibleContent
&
&
(
followedByVisibleContent
|
|
followedByBRElement
)
&
&
!
visibleWhiteSpaces
.
StartsFromPreformattedLineBreak
(
)
)
{
MOZ_ASSERT
(
!
followedByPreformattedLineBreak
)
;
Result
<
InsertTextResult
nsresult
>
replaceTextResult
=
aHTMLEditor
.
ReplaceTextWithTransaction
(
MOZ_KnownLive
(
*
atPreviousCharOfEndOfVisibleWhiteSpaces
.
ContainerAs
<
Text
>
(
)
)
atPreviousCharOfEndOfVisibleWhiteSpaces
.
Offset
(
)
1
u
"
"
_ns
)
;
if
(
MOZ_UNLIKELY
(
replaceTextResult
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
ReplaceTextWithTransaction
(
)
failed
"
)
;
return
replaceTextResult
.
propagateErr
(
)
;
}
replaceTextResult
.
unwrap
(
)
.
IgnoreCaretPointSuggestion
(
)
;
return
NS_OK
;
}
}
if
(
maybeNBSPFollowsVisibleContent
|
|
!
isPreviousCharCollapsibleASCIIWhiteSpace
|
|
!
(
followedByVisibleContent
|
|
followedByBRElement
)
|
|
EditorUtils
:
:
IsWhiteSpacePreformatted
(
*
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
.
ContainerAs
<
Text
>
(
)
)
)
{
return
NS_OK
;
}
MOZ_ASSERT
(
!
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
.
IsEndOfContainer
(
)
)
;
const
EditorDOMPointInText
atFirstASCIIWhiteSpace
=
textFragmentData
.
GetFirstASCIIWhiteSpacePointCollapsedTo
(
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
nsIEditor
:
:
eNone
)
;
uint32_t
numberOfASCIIWhiteSpacesInStartNode
=
atFirstASCIIWhiteSpace
.
ContainerAs
<
Text
>
(
)
=
=
atPreviousCharOfEndOfVisibleWhiteSpaces
.
ContainerAs
<
Text
>
(
)
?
atPreviousCharOfEndOfVisibleWhiteSpaces
.
Offset
(
)
-
atFirstASCIIWhiteSpace
.
Offset
(
)
:
atFirstASCIIWhiteSpace
.
ContainerAs
<
Text
>
(
)
-
>
Length
(
)
-
atFirstASCIIWhiteSpace
.
Offset
(
)
;
uint32_t
replaceLengthInStartNode
=
numberOfASCIIWhiteSpacesInStartNode
+
(
atFirstASCIIWhiteSpace
.
ContainerAs
<
Text
>
(
)
=
=
atPreviousCharOfEndOfVisibleWhiteSpaces
.
ContainerAs
<
Text
>
(
)
?
1
:
0
)
;
Result
<
InsertTextResult
nsresult
>
replaceTextResult
=
aHTMLEditor
.
ReplaceTextWithTransaction
(
MOZ_KnownLive
(
*
atFirstASCIIWhiteSpace
.
ContainerAs
<
Text
>
(
)
)
atFirstASCIIWhiteSpace
.
Offset
(
)
replaceLengthInStartNode
textFragmentData
.
StartsFromPreformattedLineBreak
(
)
&
&
textFragmentData
.
EndsByPreformattedLineBreak
(
)
?
u
"
\
x00A0
\
x00A0
"
_ns
:
(
textFragmentData
.
EndsByPreformattedLineBreak
(
)
?
u
"
\
x00A0
"
_ns
:
u
"
\
x00A0
"
_ns
)
)
;
if
(
MOZ_UNLIKELY
(
replaceTextResult
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
ReplaceTextWithTransaction
(
)
failed
"
)
;
return
replaceTextResult
.
propagateErr
(
)
;
}
replaceTextResult
.
unwrap
(
)
.
IgnoreCaretPointSuggestion
(
)
;
if
(
atFirstASCIIWhiteSpace
.
GetContainer
(
)
=
=
atPreviousCharOfEndOfVisibleWhiteSpaces
.
GetContainer
(
)
)
{
return
NS_OK
;
}
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndTextNodesWithTransaction
(
EditorDOMPointInText
:
:
AtEndOf
(
*
atFirstASCIIWhiteSpace
.
ContainerAs
<
Text
>
(
)
)
atPreviousCharOfEndOfVisibleWhiteSpaces
.
NextPoint
(
)
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
.
propagateErr
(
)
;
}
caretPointOrError
.
unwrap
(
)
.
IgnoreCaretPointSuggestion
(
)
;
return
NS_OK
;
}
const
EditorDOMPoint
&
atEndOfVisibleWhiteSpaces
=
visibleWhiteSpaces
.
EndRef
(
)
;
const
EditorDOMPointInText
atPreviousCharOfEndOfVisibleWhiteSpaces
=
textFragmentData
.
GetPreviousEditableCharPoint
(
atEndOfVisibleWhiteSpaces
)
;
if
(
!
atPreviousCharOfEndOfVisibleWhiteSpaces
.
IsSet
(
)
|
|
atPreviousCharOfEndOfVisibleWhiteSpaces
.
IsEndOfContainer
(
)
|
|
!
atPreviousCharOfEndOfVisibleWhiteSpaces
.
IsCharCollapsibleNBSP
(
)
|
|
visibleWhiteSpaces
.
EndsByPreformattedLineBreak
(
)
)
{
return
NS_OK
;
}
EditorDOMPointInText
startToDelete
endToDelete
;
const
EditorDOMPointInText
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
=
textFragmentData
.
GetPreviousEditableCharPoint
(
atPreviousCharOfEndOfVisibleWhiteSpaces
)
;
if
(
atPreviousCharOfEndOfVisibleWhiteSpaces
.
IsCharNBSP
(
)
&
&
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
.
IsSet
(
)
&
&
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
.
IsCharCollapsibleASCIISpace
(
)
)
{
startToDelete
=
textFragmentData
.
GetFirstASCIIWhiteSpacePointCollapsedTo
(
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
nsIEditor
:
:
eNone
)
;
endToDelete
=
atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
;
}
else
{
startToDelete
=
endToDelete
=
atPreviousCharOfEndOfVisibleWhiteSpaces
.
NextPoint
(
)
;
}
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndNormalizeSurroundingWhiteSpaces
(
startToDelete
endToDelete
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
HTMLEditor
:
:
DeleteDirection
:
:
Forward
aEditingHost
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndNormalizeSurroundingWhiteSpace
(
)
failed
"
)
;
return
caretPointOrError
.
unwrapErr
(
)
;
}
caretPointOrError
.
unwrap
(
)
.
IgnoreCaretPointSuggestion
(
)
;
return
NS_OK
;
}
Result
<
CaretPoint
nsresult
>
WhiteSpaceVisibilityKeeper
:
:
DeleteInvisibleASCIIWhiteSpaces
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsSet
(
)
)
;
Element
*
editingHost
=
aHTMLEditor
.
ComputeEditingHost
(
)
;
TextFragmentData
textFragmentData
(
aPoint
editingHost
BlockInlineCheck
:
:
UseComputedDisplayStyle
)
;
if
(
NS_WARN_IF
(
!
textFragmentData
.
IsInitialized
(
)
)
)
{
return
Err
(
NS_ERROR_FAILURE
)
;
}
const
EditorDOMRange
&
leadingWhiteSpaceRange
=
textFragmentData
.
InvisibleLeadingWhiteSpaceRangeRef
(
)
;
const
EditorDOMRange
&
trailingWhiteSpaceRange
=
textFragmentData
.
InvisibleTrailingWhiteSpaceRangeRef
(
)
;
EditorDOMPoint
pointToPutCaret
;
DebugOnly
<
bool
>
leadingWhiteSpacesDeleted
=
false
;
if
(
leadingWhiteSpaceRange
.
IsPositioned
(
)
&
&
!
leadingWhiteSpaceRange
.
Collapsed
(
)
)
{
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndTextNodesWithTransaction
(
leadingWhiteSpaceRange
.
StartRef
(
)
leadingWhiteSpaceRange
.
EndRef
(
)
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
;
}
caretPointOrError
.
unwrap
(
)
.
MoveCaretPointTo
(
pointToPutCaret
{
SuggestCaret
:
:
OnlyIfHasSuggestion
}
)
;
leadingWhiteSpacesDeleted
=
true
;
}
if
(
trailingWhiteSpaceRange
.
IsPositioned
(
)
&
&
!
trailingWhiteSpaceRange
.
Collapsed
(
)
&
&
leadingWhiteSpaceRange
!
=
trailingWhiteSpaceRange
)
{
NS_ASSERTION
(
!
leadingWhiteSpacesDeleted
"
We
'
re
trying
to
remove
trailing
white
-
spaces
with
maybe
"
"
outdated
range
"
)
;
AutoTrackDOMPoint
trackPointToPutCaret
(
aHTMLEditor
.
RangeUpdaterRef
(
)
&
pointToPutCaret
)
;
Result
<
CaretPoint
nsresult
>
caretPointOrError
=
aHTMLEditor
.
DeleteTextAndTextNodesWithTransaction
(
trailingWhiteSpaceRange
.
StartRef
(
)
trailingWhiteSpaceRange
.
EndRef
(
)
HTMLEditor
:
:
TreatEmptyTextNodes
:
:
KeepIfContainerOfRangeBoundaries
)
;
if
(
MOZ_UNLIKELY
(
caretPointOrError
.
isErr
(
)
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTextAndTextNodesWithTransaction
(
)
failed
"
)
;
return
caretPointOrError
.
propagateErr
(
)
;
}
trackPointToPutCaret
.
FlushAndStopTracking
(
)
;
caretPointOrError
.
unwrap
(
)
.
MoveCaretPointTo
(
pointToPutCaret
{
SuggestCaret
:
:
OnlyIfHasSuggestion
}
)
;
}
return
CaretPoint
(
std
:
:
move
(
pointToPutCaret
)
)
;
}
}
