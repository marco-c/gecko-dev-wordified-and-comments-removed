#
ifndef
HTMLEditUtils_h
#
define
HTMLEditUtils_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
dom
/
AbstractRange
.
h
"
#
include
"
mozilla
/
dom
/
AncestorIterator
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsHTMLTags
.
h
"
class
nsAtom
;
namespace
mozilla
{
enum
class
EditAction
;
class
HTMLEditUtils
final
{
using
Element
=
dom
:
:
Element
;
using
Selection
=
dom
:
:
Selection
;
public
:
static
const
char16_t
kSpace
=
0x0020
;
static
const
char16_t
kNBSP
=
0x00A0
;
static
bool
IsSimplyEditableNode
(
const
nsINode
&
aNode
)
{
return
aNode
.
IsEditable
(
)
;
}
static
bool
IsRemovableFromParentNode
(
const
nsIContent
&
aContent
)
{
return
aContent
.
IsEditable
(
)
&
&
aContent
.
GetParentNode
(
)
&
&
aContent
.
GetParentNode
(
)
-
>
IsEditable
(
)
;
}
enum
class
StyleDifference
{
Ignore
CompareIfElements
CompareIfSpanElements
}
;
static
bool
CanContentsBeJoined
(
const
nsIContent
&
aLeftContent
const
nsIContent
&
aRightContent
StyleDifference
aStyleDifference
)
;
static
bool
IsBlockElement
(
const
nsIContent
&
aContent
)
;
static
bool
IsInlineElement
(
const
nsIContent
&
aContent
)
{
return
!
IsBlockElement
(
aContent
)
;
}
static
bool
IsInlineStyle
(
nsINode
*
aNode
)
;
static
bool
IsRemovableInlineStyleElement
(
dom
:
:
Element
&
aElement
)
;
static
bool
IsFormatNode
(
nsINode
*
aNode
)
;
static
bool
IsNodeThatCanOutdent
(
nsINode
*
aNode
)
;
static
bool
IsHeader
(
nsINode
&
aNode
)
;
static
bool
IsListItem
(
nsINode
*
aNode
)
;
static
bool
IsTable
(
nsINode
*
aNode
)
;
static
bool
IsTableRow
(
nsINode
*
aNode
)
;
static
bool
IsAnyTableElement
(
nsINode
*
aNode
)
;
static
bool
IsAnyTableElementButNotTable
(
nsINode
*
aNode
)
;
static
bool
IsTableCell
(
nsINode
*
node
)
;
static
bool
IsTableCellOrCaption
(
nsINode
&
aNode
)
;
static
bool
IsList
(
nsINode
*
aNode
)
;
static
bool
IsPre
(
nsINode
*
aNode
)
;
static
bool
IsImage
(
nsINode
*
aNode
)
;
static
bool
IsLink
(
nsINode
*
aNode
)
;
static
bool
IsNamedAnchor
(
nsINode
*
aNode
)
;
static
bool
IsMozDiv
(
nsINode
*
aNode
)
;
static
bool
IsMailCite
(
nsINode
*
aNode
)
;
static
bool
IsFormWidget
(
nsINode
*
aNode
)
;
static
bool
SupportsAlignAttr
(
nsINode
&
aNode
)
;
static
bool
CanNodeContain
(
const
nsINode
&
aParent
const
nsIContent
&
aChild
)
{
switch
(
aParent
.
NodeType
(
)
)
{
case
nsINode
:
:
ELEMENT_NODE
:
case
nsINode
:
:
DOCUMENT_FRAGMENT_NODE
:
return
HTMLEditUtils
:
:
CanNodeContain
(
*
aParent
.
NodeInfo
(
)
-
>
NameAtom
(
)
aChild
)
;
}
return
false
;
}
static
bool
CanNodeContain
(
const
nsINode
&
aParent
nsAtom
&
aChildNodeName
)
{
switch
(
aParent
.
NodeType
(
)
)
{
case
nsINode
:
:
ELEMENT_NODE
:
case
nsINode
:
:
DOCUMENT_FRAGMENT_NODE
:
return
HTMLEditUtils
:
:
CanNodeContain
(
*
aParent
.
NodeInfo
(
)
-
>
NameAtom
(
)
aChildNodeName
)
;
}
return
false
;
}
static
bool
CanNodeContain
(
nsAtom
&
aParentNodeName
const
nsIContent
&
aChild
)
{
switch
(
aChild
.
NodeType
(
)
)
{
case
nsINode
:
:
TEXT_NODE
:
case
nsINode
:
:
ELEMENT_NODE
:
case
nsINode
:
:
DOCUMENT_FRAGMENT_NODE
:
return
HTMLEditUtils
:
:
CanNodeContain
(
aParentNodeName
*
aChild
.
NodeInfo
(
)
-
>
NameAtom
(
)
)
;
}
return
false
;
}
static
bool
CanNodeContain
(
nsAtom
&
aParentNodeName
nsAtom
&
aChildNodeName
)
{
nsHTMLTag
childTagEnum
;
if
(
&
aChildNodeName
=
=
nsGkAtoms
:
:
textTagName
)
{
childTagEnum
=
eHTMLTag_text
;
}
else
{
childTagEnum
=
nsHTMLTags
:
:
AtomTagToId
(
&
aChildNodeName
)
;
}
nsHTMLTag
parentTagEnum
=
nsHTMLTags
:
:
AtomTagToId
(
&
aParentNodeName
)
;
return
HTMLEditUtils
:
:
CanNodeContain
(
parentTagEnum
childTagEnum
)
;
}
static
bool
CanElementContainParagraph
(
const
Element
&
aElement
)
{
if
(
HTMLEditUtils
:
:
CanNodeContain
(
aElement
*
nsGkAtoms
:
:
p
)
)
{
return
true
;
}
if
(
aElement
.
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
ol
nsGkAtoms
:
:
ul
nsGkAtoms
:
:
dl
nsGkAtoms
:
:
table
nsGkAtoms
:
:
thead
nsGkAtoms
:
:
tbody
nsGkAtoms
:
:
tfoot
nsGkAtoms
:
:
tr
)
)
{
return
true
;
}
return
false
;
}
static
bool
IsContainerNode
(
const
nsIContent
&
aContent
)
{
nsHTMLTag
tagEnum
;
if
(
aContent
.
IsText
(
)
)
{
tagEnum
=
eHTMLTag_text
;
}
else
{
tagEnum
=
nsHTMLTags
:
:
StringTagToId
(
aContent
.
NodeName
(
)
)
;
}
return
HTMLEditUtils
:
:
IsContainerNode
(
tagEnum
)
;
}
static
bool
IsNonListSingleLineContainer
(
nsINode
&
aNode
)
;
static
bool
IsSingleLineContainer
(
nsINode
&
aNode
)
;
enum
class
ChildBlockBoundary
{
Ignore
TreatAsLeaf
}
;
static
nsIContent
*
GetLastLeafChild
(
nsINode
&
aNode
ChildBlockBoundary
aChildBlockBoundary
)
{
for
(
nsIContent
*
content
=
aNode
.
GetLastChild
(
)
;
content
;
content
=
content
-
>
GetLastChild
(
)
)
{
if
(
aChildBlockBoundary
=
=
ChildBlockBoundary
:
:
TreatAsLeaf
&
&
HTMLEditUtils
:
:
IsBlockElement
(
*
content
)
)
{
return
content
;
}
if
(
!
content
-
>
HasChildren
(
)
)
{
return
content
;
}
}
return
nullptr
;
}
static
nsIContent
*
GetFirstLeafChild
(
nsINode
&
aNode
ChildBlockBoundary
aChildBlockBoundary
)
{
for
(
nsIContent
*
content
=
aNode
.
GetFirstChild
(
)
;
content
;
content
=
content
-
>
GetFirstChild
(
)
)
{
if
(
aChildBlockBoundary
=
=
ChildBlockBoundary
:
:
TreatAsLeaf
&
&
HTMLEditUtils
:
:
IsBlockElement
(
*
content
)
)
{
return
content
;
}
if
(
!
content
-
>
HasChildren
(
)
)
{
return
content
;
}
}
return
nullptr
;
}
static
nsIContent
*
GetNextLeafContentOrNextBlockElement
(
const
nsIContent
&
aStartContent
const
nsIContent
&
aCurrentBlock
const
Element
*
aAncestorLimiter
=
nullptr
)
{
if
(
&
aStartContent
=
=
aAncestorLimiter
)
{
return
nullptr
;
}
nsIContent
*
nextContent
=
aStartContent
.
GetNextSibling
(
)
;
if
(
!
nextContent
)
{
if
(
!
aStartContent
.
GetParentElement
(
)
)
{
NS_WARNING
(
"
Reached
orphan
node
while
climbing
up
the
DOM
tree
"
)
;
return
nullptr
;
}
for
(
Element
*
parentElement
:
aStartContent
.
AncestorsOfType
<
Element
>
(
)
)
{
if
(
parentElement
=
=
&
aCurrentBlock
)
{
return
nullptr
;
}
if
(
parentElement
=
=
aAncestorLimiter
)
{
NS_WARNING
(
"
Reached
editing
host
while
climbing
up
the
DOM
tree
"
)
;
return
nullptr
;
}
nextContent
=
parentElement
-
>
GetNextSibling
(
)
;
if
(
nextContent
)
{
break
;
}
if
(
!
parentElement
-
>
GetParentElement
(
)
)
{
NS_WARNING
(
"
Reached
orphan
node
while
climbing
up
the
DOM
tree
"
)
;
return
nullptr
;
}
}
MOZ_ASSERT
(
nextContent
)
;
}
if
(
HTMLEditUtils
:
:
IsBlockElement
(
*
nextContent
)
)
{
return
nextContent
;
}
if
(
HTMLEditUtils
:
:
IsContainerNode
(
*
nextContent
)
)
{
if
(
nsIContent
*
child
=
HTMLEditUtils
:
:
GetFirstLeafChild
(
*
nextContent
ChildBlockBoundary
:
:
Ignore
)
)
{
return
child
;
}
}
return
nextContent
;
}
template
<
typename
PT
typename
CT
>
static
nsIContent
*
GetNextLeafContentOrNextBlockElement
(
const
EditorDOMPointBase
<
PT
CT
>
&
aStartPoint
const
nsIContent
&
aCurrentBlock
const
Element
*
aAncestorLimiter
=
nullptr
)
{
MOZ_ASSERT
(
aStartPoint
.
IsSet
(
)
)
;
if
(
!
aStartPoint
.
IsInContentNode
(
)
)
{
return
nullptr
;
}
if
(
aStartPoint
.
IsInTextNode
(
)
)
{
return
HTMLEditUtils
:
:
GetNextLeafContentOrNextBlockElement
(
*
aStartPoint
.
ContainerAsText
(
)
aCurrentBlock
aAncestorLimiter
)
;
}
if
(
!
HTMLEditUtils
:
:
IsContainerNode
(
*
aStartPoint
.
ContainerAsContent
(
)
)
)
{
return
HTMLEditUtils
:
:
GetNextLeafContentOrNextBlockElement
(
*
aStartPoint
.
ContainerAsContent
(
)
aCurrentBlock
aAncestorLimiter
)
;
}
nsCOMPtr
<
nsIContent
>
nextContent
=
aStartPoint
.
GetChild
(
)
;
if
(
!
nextContent
)
{
if
(
aStartPoint
.
GetContainer
(
)
=
=
&
aCurrentBlock
)
{
return
nullptr
;
}
return
HTMLEditUtils
:
:
GetNextLeafContentOrNextBlockElement
(
*
aStartPoint
.
ContainerAsContent
(
)
aCurrentBlock
aAncestorLimiter
)
;
}
if
(
HTMLEditUtils
:
:
IsBlockElement
(
*
nextContent
)
)
{
return
nextContent
;
}
if
(
HTMLEditUtils
:
:
IsContainerNode
(
*
nextContent
)
)
{
if
(
nsIContent
*
child
=
HTMLEditUtils
:
:
GetFirstLeafChild
(
*
nextContent
ChildBlockBoundary
:
:
Ignore
)
)
{
return
child
;
}
}
return
nextContent
;
}
static
nsIContent
*
GetPreviousLeafContentOrPreviousBlockElement
(
const
nsIContent
&
aStartContent
const
nsIContent
&
aCurrentBlock
const
Element
*
aAncestorLimiter
=
nullptr
)
{
if
(
&
aStartContent
=
=
aAncestorLimiter
)
{
return
nullptr
;
}
nsIContent
*
previousContent
=
aStartContent
.
GetPreviousSibling
(
)
;
if
(
!
previousContent
)
{
if
(
!
aStartContent
.
GetParentElement
(
)
)
{
NS_WARNING
(
"
Reached
orphan
node
while
climbing
up
the
DOM
tree
"
)
;
return
nullptr
;
}
for
(
Element
*
parentElement
:
aStartContent
.
AncestorsOfType
<
Element
>
(
)
)
{
if
(
parentElement
=
=
&
aCurrentBlock
)
{
return
nullptr
;
}
if
(
parentElement
=
=
aAncestorLimiter
)
{
NS_WARNING
(
"
Reached
editing
host
while
climbing
up
the
DOM
tree
"
)
;
return
nullptr
;
}
previousContent
=
parentElement
-
>
GetPreviousSibling
(
)
;
if
(
previousContent
)
{
break
;
}
if
(
!
parentElement
-
>
GetParentElement
(
)
)
{
NS_WARNING
(
"
Reached
orphan
node
while
climbing
up
the
DOM
tree
"
)
;
return
nullptr
;
}
}
MOZ_ASSERT
(
previousContent
)
;
}
if
(
HTMLEditUtils
:
:
IsBlockElement
(
*
previousContent
)
)
{
return
previousContent
;
}
if
(
HTMLEditUtils
:
:
IsContainerNode
(
*
previousContent
)
)
{
if
(
nsIContent
*
child
=
HTMLEditUtils
:
:
GetLastLeafChild
(
*
previousContent
ChildBlockBoundary
:
:
Ignore
)
)
{
return
child
;
}
}
return
previousContent
;
}
template
<
typename
PT
typename
CT
>
static
nsIContent
*
GetPreviousLeafContentOrPreviousBlockElement
(
const
EditorDOMPointBase
<
PT
CT
>
&
aStartPoint
const
nsIContent
&
aCurrentBlock
const
Element
*
aAncestorLimiter
=
nullptr
)
{
MOZ_ASSERT
(
aStartPoint
.
IsSet
(
)
)
;
if
(
!
aStartPoint
.
IsInContentNode
(
)
)
{
return
nullptr
;
}
if
(
aStartPoint
.
IsInTextNode
(
)
)
{
return
HTMLEditUtils
:
:
GetPreviousLeafContentOrPreviousBlockElement
(
*
aStartPoint
.
ContainerAsText
(
)
aCurrentBlock
aAncestorLimiter
)
;
}
if
(
!
HTMLEditUtils
:
:
IsContainerNode
(
*
aStartPoint
.
ContainerAsContent
(
)
)
)
{
return
HTMLEditUtils
:
:
GetPreviousLeafContentOrPreviousBlockElement
(
*
aStartPoint
.
ContainerAsContent
(
)
aCurrentBlock
aAncestorLimiter
)
;
}
if
(
aStartPoint
.
IsStartOfContainer
(
)
)
{
if
(
aStartPoint
.
GetContainer
(
)
=
=
&
aCurrentBlock
)
{
return
nullptr
;
}
return
HTMLEditUtils
:
:
GetPreviousLeafContentOrPreviousBlockElement
(
*
aStartPoint
.
ContainerAsContent
(
)
aCurrentBlock
aAncestorLimiter
)
;
}
nsCOMPtr
<
nsIContent
>
previousContent
=
aStartPoint
.
GetPreviousSiblingOfChild
(
)
;
if
(
NS_WARN_IF
(
!
previousContent
)
)
{
return
nullptr
;
}
if
(
HTMLEditUtils
:
:
IsBlockElement
(
*
previousContent
)
)
{
return
previousContent
;
}
if
(
HTMLEditUtils
:
:
IsContainerNode
(
*
previousContent
)
)
{
if
(
nsIContent
*
child
=
HTMLEditUtils
:
:
GetLastLeafChild
(
*
previousContent
ChildBlockBoundary
:
:
Ignore
)
)
{
return
child
;
}
}
return
previousContent
;
}
static
Element
*
GetAncestorBlockElement
(
const
nsIContent
&
aContent
const
nsINode
*
aAncestorLimiter
=
nullptr
)
{
MOZ_ASSERT
(
!
aAncestorLimiter
|
|
aContent
.
IsInclusiveDescendantOf
(
aAncestorLimiter
)
"
aContent
isn
'
t
in
aAncestorLimiter
"
)
;
if
(
&
aContent
=
=
aAncestorLimiter
)
{
return
nullptr
;
}
for
(
Element
*
element
:
aContent
.
AncestorsOfType
<
Element
>
(
)
)
{
if
(
HTMLEditUtils
:
:
IsBlockElement
(
*
element
)
)
{
return
element
;
}
if
(
element
=
=
aAncestorLimiter
)
{
return
nullptr
;
}
}
return
nullptr
;
}
static
Element
*
GetInclusiveAncestorBlockElement
(
const
nsIContent
&
aContent
const
nsINode
*
aAncestorLimiter
=
nullptr
)
{
MOZ_ASSERT
(
!
aAncestorLimiter
|
|
aContent
.
IsInclusiveDescendantOf
(
aAncestorLimiter
)
"
aContent
isn
'
t
in
aAncestorLimiter
"
)
;
if
(
!
aContent
.
IsContent
(
)
)
{
return
nullptr
;
}
if
(
HTMLEditUtils
:
:
IsBlockElement
(
aContent
)
)
{
return
const_cast
<
Element
*
>
(
aContent
.
AsElement
(
)
)
;
}
return
GetAncestorBlockElement
(
aContent
aAncestorLimiter
)
;
}
static
Element
*
GetClosestAncestorTableElement
(
const
nsIContent
&
aContent
)
{
if
(
!
aContent
.
GetParent
(
)
)
{
return
nullptr
;
}
for
(
Element
*
element
:
aContent
.
InclusiveAncestorsOfType
<
Element
>
(
)
)
{
if
(
HTMLEditUtils
:
:
IsTable
(
element
)
)
{
return
element
;
}
}
return
nullptr
;
}
static
Element
*
GetElementIfOnlyOneSelected
(
const
dom
:
:
AbstractRange
&
aRange
)
{
if
(
!
aRange
.
IsPositioned
(
)
)
{
return
nullptr
;
}
const
RangeBoundary
&
start
=
aRange
.
StartRef
(
)
;
const
RangeBoundary
&
end
=
aRange
.
EndRef
(
)
;
if
(
NS_WARN_IF
(
!
start
.
IsSetAndValid
(
)
)
|
|
NS_WARN_IF
(
!
end
.
IsSetAndValid
(
)
)
|
|
start
.
Container
(
)
!
=
end
.
Container
(
)
)
{
return
nullptr
;
}
nsIContent
*
childAtStart
=
start
.
GetChildAtOffset
(
)
;
if
(
!
childAtStart
|
|
!
childAtStart
-
>
IsElement
(
)
)
{
return
nullptr
;
}
if
(
childAtStart
-
>
GetNextSibling
(
)
)
{
return
childAtStart
-
>
GetNextSibling
(
)
=
=
end
.
GetChildAtOffset
(
)
?
childAtStart
-
>
AsElement
(
)
:
nullptr
;
}
return
!
end
.
GetChildAtOffset
(
)
?
childAtStart
-
>
AsElement
(
)
:
nullptr
;
}
static
Element
*
GetTableCellElementIfOnlyOneSelected
(
const
dom
:
:
AbstractRange
&
aRange
)
{
Element
*
element
=
HTMLEditUtils
:
:
GetElementIfOnlyOneSelected
(
aRange
)
;
return
element
&
&
HTMLEditUtils
:
:
IsTableCell
(
element
)
?
element
:
nullptr
;
}
static
EditAction
GetEditActionForInsert
(
const
nsAtom
&
aTagName
)
;
static
EditAction
GetEditActionForRemoveList
(
const
nsAtom
&
aTagName
)
;
static
EditAction
GetEditActionForInsert
(
const
Element
&
aElement
)
;
static
EditAction
GetEditActionForFormatText
(
const
nsAtom
&
aProperty
const
nsAtom
*
aAttribute
bool
aToSetStyle
)
;
static
EditAction
GetEditActionForAlignment
(
const
nsAString
&
aAlignType
)
;
static
Maybe
<
uint32_t
>
GetPreviousCharOffsetExceptASCIIWhiteSpaces
(
const
EditorDOMPointInText
&
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
return
GetPreviousCharOffsetExceptASCIIWhiteSpaces
(
*
aPoint
.
ContainerAsText
(
)
aPoint
.
Offset
(
)
)
;
}
static
Maybe
<
uint32_t
>
GetPreviousCharOffsetExceptASCIIWhiteSpaces
(
const
dom
:
:
Text
&
aTextNode
uint32_t
aOffset
)
{
const
nsTextFragment
&
textFragment
=
aTextNode
.
TextFragment
(
)
;
MOZ_ASSERT
(
aOffset
<
=
textFragment
.
GetLength
(
)
)
;
for
(
uint32_t
i
=
aOffset
;
i
;
i
-
-
)
{
if
(
!
nsCRT
:
:
IsAsciiSpace
(
textFragment
.
CharAt
(
i
-
1
)
)
)
{
return
Some
(
i
-
1
)
;
}
}
return
Nothing
(
)
;
}
static
Maybe
<
uint32_t
>
GetNextCharOffsetExceptASCIIWhiteSpaces
(
const
EditorDOMPointInText
&
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
return
GetNextCharOffsetExceptASCIIWhiteSpaces
(
*
aPoint
.
ContainerAsText
(
)
aPoint
.
Offset
(
)
)
;
}
static
Maybe
<
uint32_t
>
GetNextCharOffsetExceptASCIIWhiteSpaces
(
const
dom
:
:
Text
&
aTextNode
uint32_t
aOffset
)
{
const
nsTextFragment
&
textFragment
=
aTextNode
.
TextFragment
(
)
;
MOZ_ASSERT
(
aOffset
<
=
textFragment
.
GetLength
(
)
)
;
for
(
uint32_t
i
=
aOffset
+
1
;
i
<
textFragment
.
GetLength
(
)
;
i
+
+
)
{
if
(
!
nsCRT
:
:
IsAsciiSpace
(
textFragment
.
CharAt
(
i
)
)
)
{
return
Some
(
i
)
;
}
}
return
Nothing
(
)
;
}
static
Maybe
<
uint32_t
>
GetPreviousCharOffsetExceptWhiteSpaces
(
const
EditorDOMPointInText
&
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
return
GetPreviousCharOffsetExceptWhiteSpaces
(
*
aPoint
.
ContainerAsText
(
)
aPoint
.
Offset
(
)
)
;
}
static
Maybe
<
uint32_t
>
GetPreviousCharOffsetExceptWhiteSpaces
(
const
dom
:
:
Text
&
aTextNode
uint32_t
aOffset
)
{
if
(
!
aOffset
)
{
return
Nothing
(
)
;
}
const
nsTextFragment
&
textFragment
=
aTextNode
.
TextFragment
(
)
;
MOZ_ASSERT
(
aOffset
<
=
textFragment
.
GetLength
(
)
)
;
for
(
uint32_t
i
=
aOffset
;
i
;
i
-
-
)
{
char16_t
ch
=
textFragment
.
CharAt
(
i
-
1
)
;
if
(
!
nsCRT
:
:
IsAsciiSpace
(
ch
)
&
&
ch
!
=
kNBSP
)
{
return
Some
(
i
-
1
)
;
}
}
return
Nothing
(
)
;
}
static
Maybe
<
uint32_t
>
GetInclusiveNextCharOffsetExceptWhiteSpaces
(
const
EditorDOMPointInText
&
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
return
GetInclusiveNextCharOffsetExceptWhiteSpaces
(
*
aPoint
.
ContainerAsText
(
)
aPoint
.
Offset
(
)
)
;
}
static
Maybe
<
uint32_t
>
GetInclusiveNextCharOffsetExceptWhiteSpaces
(
const
dom
:
:
Text
&
aTextNode
uint32_t
aOffset
)
{
const
nsTextFragment
&
textFragment
=
aTextNode
.
TextFragment
(
)
;
MOZ_ASSERT
(
aOffset
<
=
textFragment
.
GetLength
(
)
)
;
for
(
uint32_t
i
=
aOffset
;
i
<
textFragment
.
GetLength
(
)
;
i
+
+
)
{
char16_t
ch
=
textFragment
.
CharAt
(
i
)
;
if
(
!
nsCRT
:
:
IsAsciiSpace
(
ch
)
&
&
ch
!
=
kNBSP
)
{
return
Some
(
i
)
;
}
}
return
Nothing
(
)
;
}
static
uint32_t
GetFirstASCIIWhiteSpaceOffsetCollapsedWith
(
const
EditorDOMPointInText
&
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
!
aPoint
.
IsEndOfContainer
(
)
)
;
MOZ_ASSERT
(
aPoint
.
IsCharASCIISpace
(
)
)
;
return
GetFirstASCIIWhiteSpaceOffsetCollapsedWith
(
*
aPoint
.
ContainerAsText
(
)
aPoint
.
Offset
(
)
)
;
}
static
uint32_t
GetFirstASCIIWhiteSpaceOffsetCollapsedWith
(
const
dom
:
:
Text
&
aTextNode
uint32_t
aOffset
)
{
MOZ_ASSERT
(
aOffset
<
aTextNode
.
TextLength
(
)
)
;
MOZ_ASSERT
(
nsCRT
:
:
IsAsciiSpace
(
aTextNode
.
TextFragment
(
)
.
CharAt
(
aOffset
)
)
)
;
if
(
!
aOffset
)
{
return
0
;
}
Maybe
<
uint32_t
>
previousVisibleCharOffset
=
GetPreviousCharOffsetExceptASCIIWhiteSpaces
(
aTextNode
aOffset
)
;
return
previousVisibleCharOffset
.
isSome
(
)
?
previousVisibleCharOffset
.
value
(
)
+
1
:
0
;
}
private
:
static
bool
CanNodeContain
(
nsHTMLTag
aParentTagId
nsHTMLTag
aChildTagId
)
;
static
bool
IsContainerNode
(
nsHTMLTag
aTagId
)
;
}
;
class
MOZ_STACK_CLASS
DefinitionListItemScanner
final
{
public
:
DefinitionListItemScanner
(
)
=
delete
;
explicit
DefinitionListItemScanner
(
dom
:
:
Element
&
aDLElement
)
{
MOZ_ASSERT
(
aDLElement
.
IsHTMLElement
(
nsGkAtoms
:
:
dl
)
)
;
for
(
nsIContent
*
child
=
aDLElement
.
GetFirstChild
(
)
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
if
(
child
-
>
IsHTMLElement
(
nsGkAtoms
:
:
dt
)
)
{
mDTFound
=
true
;
if
(
mDDFound
)
{
break
;
}
continue
;
}
if
(
child
-
>
IsHTMLElement
(
nsGkAtoms
:
:
dd
)
)
{
mDDFound
=
true
;
if
(
mDTFound
)
{
break
;
}
continue
;
}
}
}
bool
DTElementFound
(
)
const
{
return
mDTFound
;
}
bool
DDElementFound
(
)
const
{
return
mDDFound
;
}
private
:
bool
mDTFound
=
false
;
bool
mDDFound
=
false
;
}
;
}
#
endif
