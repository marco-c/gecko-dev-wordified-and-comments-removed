#
ifndef
PlaceholderTransaction_h
#
define
PlaceholderTransaction_h
#
include
"
EditAggregateTransaction
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsIAbsorbingTransaction
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
namespace
mozilla
{
class
CompositionTransaction
;
class
PlaceholderTransaction
final
:
public
EditAggregateTransaction
public
nsIAbsorbingTransaction
{
protected
:
PlaceholderTransaction
(
EditorBase
&
aEditorBase
nsAtom
*
aName
Maybe
<
SelectionState
>
&
&
aSelState
)
;
public
:
static
already_AddRefed
<
PlaceholderTransaction
>
Create
(
EditorBase
&
aEditorBase
nsAtom
*
aName
Maybe
<
SelectionState
>
&
&
aSelState
)
{
Maybe
<
SelectionState
>
selState
(
std
:
:
move
(
aSelState
)
)
;
RefPtr
<
PlaceholderTransaction
>
transaction
=
new
PlaceholderTransaction
(
aEditorBase
aName
std
:
:
move
(
selState
)
)
;
return
transaction
.
forget
(
)
;
}
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
PlaceholderTransaction
EditAggregateTransaction
)
NS_DECL_EDITTRANSACTIONBASE
NS_DECL_EDITTRANSACTIONBASE_GETASMETHODS_OVERRIDE
(
PlaceholderTransaction
)
MOZ_CAN_RUN_SCRIPT
NS_IMETHOD
RedoTransaction
(
)
override
;
NS_IMETHOD
Merge
(
nsITransaction
*
aTransaction
bool
*
aDidMerge
)
override
;
NS_IMETHOD
GetTxnName
(
nsAtom
*
*
aName
)
override
;
NS_IMETHOD_
(
bool
)
StartSelectionEquals
(
SelectionState
&
aSelState
)
override
;
NS_IMETHOD
EndPlaceHolderBatch
(
)
override
;
NS_IMETHOD_
(
void
)
ForwardEndBatchTo
(
nsIAbsorbingTransaction
*
aForwardingAddress
)
override
;
NS_IMETHOD_
(
void
)
Commit
(
)
override
;
NS_IMETHOD_
(
PlaceholderTransaction
*
)
AsPlaceholderTransaction
(
)
override
{
return
this
;
}
nsresult
RememberEndingSelection
(
)
;
protected
:
virtual
~
PlaceholderTransaction
(
)
=
default
;
RefPtr
<
EditorBase
>
mEditorBase
;
nsWeakPtr
mForwarding
;
mozilla
:
:
CompositionTransaction
*
mCompositionTransaction
;
SelectionState
mStartSel
;
SelectionState
mEndSel
;
bool
mAbsorb
;
bool
mCommitted
;
}
;
}
#
endif
