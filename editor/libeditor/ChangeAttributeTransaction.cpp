#
include
"
ChangeAttributeTransaction
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsError
.
h
"
namespace
mozilla
{
using
namespace
dom
;
already_AddRefed
<
ChangeAttributeTransaction
>
ChangeAttributeTransaction
:
:
Create
(
Element
&
aElement
nsAtom
&
aAttribute
const
nsAString
&
aValue
)
{
RefPtr
<
ChangeAttributeTransaction
>
transaction
=
new
ChangeAttributeTransaction
(
aElement
aAttribute
&
aValue
)
;
return
transaction
.
forget
(
)
;
}
already_AddRefed
<
ChangeAttributeTransaction
>
ChangeAttributeTransaction
:
:
CreateToRemove
(
Element
&
aElement
nsAtom
&
aAttribute
)
{
RefPtr
<
ChangeAttributeTransaction
>
transaction
=
new
ChangeAttributeTransaction
(
aElement
aAttribute
nullptr
)
;
return
transaction
.
forget
(
)
;
}
ChangeAttributeTransaction
:
:
ChangeAttributeTransaction
(
Element
&
aElement
nsAtom
&
aAttribute
const
nsAString
*
aValue
)
:
EditTransactionBase
(
)
mElement
(
&
aElement
)
mAttribute
(
&
aAttribute
)
mValue
(
aValue
?
*
aValue
:
u
"
"
_ns
)
mRemoveAttribute
(
!
aValue
)
mAttributeWasSet
(
false
)
{
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
ChangeAttributeTransaction
EditTransactionBase
mElement
)
NS_IMPL_ADDREF_INHERITED
(
ChangeAttributeTransaction
EditTransactionBase
)
NS_IMPL_RELEASE_INHERITED
(
ChangeAttributeTransaction
EditTransactionBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ChangeAttributeTransaction
)
NS_INTERFACE_MAP_END_INHERITING
(
EditTransactionBase
)
NS_IMETHODIMP
ChangeAttributeTransaction
:
:
DoTransaction
(
)
{
mAttributeWasSet
=
mElement
-
>
GetAttr
(
kNameSpaceID_None
mAttribute
mUndoValue
)
;
if
(
!
mUndoValue
.
IsEmpty
(
)
)
{
mAttributeWasSet
=
true
;
}
if
(
mRemoveAttribute
)
{
OwningNonNull
<
Element
>
element
=
*
mElement
;
nsresult
rv
=
element
-
>
UnsetAttr
(
kNameSpaceID_None
mAttribute
true
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Element
:
:
UnsetAttr
(
)
failed
"
)
;
return
rv
;
}
OwningNonNull
<
Element
>
element
=
*
mElement
;
nsresult
rv
=
element
-
>
SetAttr
(
kNameSpaceID_None
mAttribute
mValue
true
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Element
:
:
SetAttr
(
)
failed
"
)
;
return
rv
;
}
NS_IMETHODIMP
ChangeAttributeTransaction
:
:
UndoTransaction
(
)
{
if
(
NS_WARN_IF
(
!
mElement
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
mAttributeWasSet
)
{
OwningNonNull
<
Element
>
element
=
*
mElement
;
nsresult
rv
=
element
-
>
SetAttr
(
kNameSpaceID_None
mAttribute
mUndoValue
true
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Element
:
:
SetAttr
(
)
failed
"
)
;
return
rv
;
}
OwningNonNull
<
Element
>
element
=
*
mElement
;
nsresult
rv
=
element
-
>
UnsetAttr
(
kNameSpaceID_None
mAttribute
true
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Element
:
:
UnsetAttr
(
)
failed
"
)
;
return
rv
;
}
NS_IMETHODIMP
ChangeAttributeTransaction
:
:
RedoTransaction
(
)
{
if
(
NS_WARN_IF
(
!
mElement
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
mRemoveAttribute
)
{
OwningNonNull
<
Element
>
element
=
*
mElement
;
nsresult
rv
=
element
-
>
UnsetAttr
(
kNameSpaceID_None
mAttribute
true
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Element
:
:
UnsetAttr
(
)
failed
"
)
;
return
rv
;
}
OwningNonNull
<
Element
>
element
=
*
mElement
;
nsresult
rv
=
element
-
>
SetAttr
(
kNameSpaceID_None
mAttribute
mValue
true
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Element
:
:
SetAttr
(
)
failed
"
)
;
return
rv
;
}
}
