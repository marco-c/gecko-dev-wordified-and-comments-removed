#
ifndef
mozilla_EditorDOMPoint_h
#
define
mozilla_EditorDOMPoint_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RangeBoundary
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsINode
.
h
"
namespace
mozilla
{
template
<
typename
ParentType
typename
RefType
>
class
EditorDOMPointBase
;
typedef
EditorDOMPointBase
<
nsCOMPtr
<
nsINode
>
nsCOMPtr
<
nsIContent
>
>
EditorDOMPoint
;
typedef
EditorDOMPointBase
<
nsINode
*
nsIContent
*
>
EditorRawDOMPoint
;
template
<
typename
ParentType
typename
RefType
>
class
MOZ_STACK_CLASS
EditorDOMPointBase
final
:
public
RangeBoundaryBase
<
ParentType
RefType
>
{
public
:
EditorDOMPointBase
(
)
:
RangeBoundaryBase
<
ParentType
RefType
>
(
)
{
}
EditorDOMPointBase
(
nsINode
*
aConatiner
int32_t
aOffset
)
:
RangeBoundaryBase
<
ParentType
RefType
>
(
aConatiner
aOffset
)
{
}
EditorDOMPointBase
(
nsIDOMNode
*
aDOMContainer
int32_t
aOffset
)
:
RangeBoundaryBase
<
ParentType
RefType
>
(
)
{
nsCOMPtr
<
nsINode
>
container
=
do_QueryInterface
(
aDOMContainer
)
;
this
-
>
Set
(
container
aOffset
)
;
}
explicit
EditorDOMPointBase
(
nsINode
*
aPointedNode
)
:
RangeBoundaryBase
<
ParentType
RefType
>
(
aPointedNode
&
&
aPointedNode
-
>
IsContent
(
)
?
aPointedNode
-
>
GetParentNode
(
)
:
nullptr
aPointedNode
&
&
aPointedNode
-
>
IsContent
(
)
?
GetRef
(
aPointedNode
-
>
GetParentNode
(
)
aPointedNode
-
>
AsContent
(
)
)
:
nullptr
)
{
}
EditorDOMPointBase
(
nsINode
*
aContainer
nsIContent
*
aPointedNode
int32_t
aOffset
)
:
RangeBoundaryBase
<
ParentType
RefType
>
(
aContainer
GetRef
(
aContainer
aPointedNode
)
aOffset
)
{
}
template
<
typename
PT
typename
RT
>
explicit
EditorDOMPointBase
(
const
RangeBoundaryBase
<
PT
RT
>
&
aOther
)
:
RangeBoundaryBase
<
ParentType
RefType
>
(
aOther
)
{
}
explicit
EditorDOMPointBase
(
const
RawRangeBoundary
&
aRawRangeBoundary
)
:
RangeBoundaryBase
<
ParentType
RefType
>
(
aRawRangeBoundary
)
{
}
EditorDOMPointBase
<
nsINode
*
nsIContent
*
>
AsRaw
(
)
const
{
return
EditorDOMPointBase
<
nsINode
*
nsIContent
*
>
(
*
this
)
;
}
template
<
typename
A
typename
B
>
EditorDOMPointBase
&
operator
=
(
const
EditorDOMPointBase
<
A
B
>
&
aOther
)
{
RangeBoundaryBase
<
ParentType
RefType
>
:
:
operator
=
(
aOther
)
;
return
*
this
;
}
template
<
typename
A
typename
B
>
EditorDOMPointBase
&
operator
=
(
const
RangeBoundaryBase
<
A
B
>
&
aOther
)
{
RangeBoundaryBase
<
ParentType
RefType
>
:
:
operator
=
(
aOther
)
;
return
*
this
;
}
private
:
static
nsIContent
*
GetRef
(
nsINode
*
aContainerNode
nsIContent
*
aPointedNode
)
{
if
(
aPointedNode
)
{
return
aPointedNode
-
>
GetPreviousSibling
(
)
;
}
if
(
aContainerNode
&
&
aContainerNode
-
>
IsContainerNode
(
)
)
{
return
aContainerNode
-
>
GetLastChild
(
)
;
}
return
nullptr
;
}
}
;
class
MOZ_STACK_CLASS
AutoEditorDOMPointOffsetInvalidator
final
{
public
:
explicit
AutoEditorDOMPointOffsetInvalidator
(
EditorDOMPoint
&
aPoint
)
:
mPoint
(
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
mChild
=
mPoint
.
GetChildAtOffset
(
)
;
}
~
AutoEditorDOMPointOffsetInvalidator
(
)
{
InvalidateOffset
(
)
;
}
void
InvalidateOffset
(
)
{
if
(
mChild
)
{
mPoint
.
Set
(
mChild
)
;
}
else
{
mPoint
.
Set
(
mPoint
.
Container
(
)
mPoint
.
Container
(
)
-
>
Length
(
)
)
;
}
}
private
:
EditorDOMPoint
&
mPoint
;
nsCOMPtr
<
nsIContent
>
mChild
;
AutoEditorDOMPointOffsetInvalidator
(
)
=
delete
;
AutoEditorDOMPointOffsetInvalidator
(
const
AutoEditorDOMPointOffsetInvalidator
&
aOther
)
=
delete
;
const
AutoEditorDOMPointOffsetInvalidator
&
operator
=
(
const
AutoEditorDOMPointOffsetInvalidator
&
aOther
)
=
delete
;
}
;
class
MOZ_STACK_CLASS
AutoEditorDOMPointChildInvalidator
final
{
public
:
explicit
AutoEditorDOMPointChildInvalidator
(
EditorDOMPoint
&
aPoint
)
:
mPoint
(
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
Unused
<
<
mPoint
.
Offset
(
)
;
}
~
AutoEditorDOMPointChildInvalidator
(
)
{
InvalidateChild
(
)
;
}
void
InvalidateChild
(
)
{
mPoint
.
Set
(
mPoint
.
Container
(
)
mPoint
.
Offset
(
)
)
;
}
private
:
EditorDOMPoint
&
mPoint
;
AutoEditorDOMPointChildInvalidator
(
)
=
delete
;
AutoEditorDOMPointChildInvalidator
(
const
AutoEditorDOMPointChildInvalidator
&
aOther
)
=
delete
;
const
AutoEditorDOMPointChildInvalidator
&
operator
=
(
const
AutoEditorDOMPointChildInvalidator
&
aOther
)
=
delete
;
}
;
}
#
endif
