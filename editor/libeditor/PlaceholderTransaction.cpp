#
include
"
PlaceholderTransaction
.
h
"
#
include
"
CompositionTransaction
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
nsEditor
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsQueryObject
.
h
"
namespace
mozilla
{
using
namespace
dom
;
PlaceholderTransaction
:
:
PlaceholderTransaction
(
)
:
mAbsorb
(
true
)
mForwarding
(
nullptr
)
mCompositionTransaction
(
nullptr
)
mCommitted
(
false
)
mEditor
(
nullptr
)
{
}
PlaceholderTransaction
:
:
~
PlaceholderTransaction
(
)
{
}
NS_IMPL_CYCLE_COLLECTION_CLASS
(
PlaceholderTransaction
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
PlaceholderTransaction
EditAggregateTransaction
)
if
(
tmp
-
>
mStartSel
)
{
ImplCycleCollectionUnlink
(
*
tmp
-
>
mStartSel
)
;
}
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mEndSel
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
PlaceholderTransaction
EditAggregateTransaction
)
if
(
tmp
-
>
mStartSel
)
{
ImplCycleCollectionTraverse
(
cb
*
tmp
-
>
mStartSel
"
mStartSel
"
0
)
;
}
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mEndSel
)
;
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
PlaceholderTransaction
)
NS_INTERFACE_MAP_ENTRY
(
nsIAbsorbingTransaction
)
NS_INTERFACE_MAP_ENTRY
(
nsISupportsWeakReference
)
NS_INTERFACE_MAP_END_INHERITING
(
EditAggregateTransaction
)
NS_IMPL_ADDREF_INHERITED
(
PlaceholderTransaction
EditAggregateTransaction
)
NS_IMPL_RELEASE_INHERITED
(
PlaceholderTransaction
EditAggregateTransaction
)
NS_IMETHODIMP
PlaceholderTransaction
:
:
Init
(
nsIAtom
*
aName
nsSelectionState
*
aSelState
nsEditor
*
aEditor
)
{
NS_ENSURE_TRUE
(
aEditor
&
&
aSelState
NS_ERROR_NULL_POINTER
)
;
mName
=
aName
;
mStartSel
=
aSelState
;
mEditor
=
aEditor
;
return
NS_OK
;
}
NS_IMETHODIMP
PlaceholderTransaction
:
:
DoTransaction
(
)
{
return
NS_OK
;
}
NS_IMETHODIMP
PlaceholderTransaction
:
:
UndoTransaction
(
)
{
nsresult
rv
=
EditAggregateTransaction
:
:
UndoTransaction
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
mStartSel
NS_ERROR_NULL_POINTER
)
;
RefPtr
<
Selection
>
selection
=
mEditor
-
>
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_NULL_POINTER
)
;
return
mStartSel
-
>
RestoreSelection
(
selection
)
;
}
NS_IMETHODIMP
PlaceholderTransaction
:
:
RedoTransaction
(
)
{
nsresult
rv
=
EditAggregateTransaction
:
:
RedoTransaction
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
Selection
>
selection
=
mEditor
-
>
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_NULL_POINTER
)
;
return
mEndSel
.
RestoreSelection
(
selection
)
;
}
NS_IMETHODIMP
PlaceholderTransaction
:
:
Merge
(
nsITransaction
*
aTransaction
bool
*
aDidMerge
)
{
NS_ENSURE_TRUE
(
aDidMerge
&
&
aTransaction
NS_ERROR_NULL_POINTER
)
;
*
aDidMerge
=
false
;
if
(
mForwarding
)
{
NS_NOTREACHED
(
"
tried
to
merge
into
a
placeholder
that
was
in
forwarding
mode
!
"
)
;
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsPIEditorTransaction
>
pTxn
=
do_QueryInterface
(
aTransaction
)
;
NS_ENSURE_TRUE
(
pTxn
NS_OK
)
;
EditTxn
*
editTxn
=
(
EditTxn
*
)
aTransaction
;
nsCOMPtr
<
nsIAbsorbingTransaction
>
plcTxn
=
do_QueryObject
(
editTxn
)
;
if
(
mAbsorb
)
{
RefPtr
<
CompositionTransaction
>
otherTransaction
=
do_QueryObject
(
aTransaction
)
;
if
(
otherTransaction
)
{
if
(
!
mCompositionTransaction
)
{
mCompositionTransaction
=
otherTransaction
;
AppendChild
(
editTxn
)
;
}
else
{
bool
didMerge
;
mCompositionTransaction
-
>
Merge
(
otherTransaction
&
didMerge
)
;
if
(
!
didMerge
)
{
mCompositionTransaction
=
otherTransaction
;
AppendChild
(
editTxn
)
;
}
}
}
else
if
(
!
plcTxn
)
{
AppendChild
(
editTxn
)
;
}
*
aDidMerge
=
true
;
}
else
{
if
(
(
(
mName
.
get
(
)
=
=
nsGkAtoms
:
:
TypingTxnName
)
|
|
(
mName
.
get
(
)
=
=
nsGkAtoms
:
:
IMETxnName
)
|
|
(
mName
.
get
(
)
=
=
nsGkAtoms
:
:
DeleteTxnName
)
)
&
&
!
mCommitted
)
{
nsCOMPtr
<
nsIAbsorbingTransaction
>
plcTxn
=
do_QueryObject
(
editTxn
)
;
if
(
plcTxn
)
{
nsCOMPtr
<
nsIAtom
>
atom
;
plcTxn
-
>
GetTxnName
(
getter_AddRefs
(
atom
)
)
;
if
(
atom
&
&
(
atom
=
=
mName
)
)
{
bool
isSame
;
plcTxn
-
>
StartSelectionEquals
(
&
mEndSel
&
isSame
)
;
if
(
isSame
)
{
mAbsorb
=
true
;
plcTxn
-
>
ForwardEndBatchTo
(
this
)
;
RememberEndingSelection
(
)
;
*
aDidMerge
=
true
;
}
}
}
}
}
return
NS_OK
;
}
NS_IMETHODIMP
PlaceholderTransaction
:
:
GetTxnDescription
(
nsAString
&
aString
)
{
aString
.
AssignLiteral
(
"
PlaceholderTransaction
:
"
)
;
if
(
mName
)
{
nsAutoString
name
;
mName
-
>
ToString
(
name
)
;
aString
+
=
name
;
}
return
NS_OK
;
}
NS_IMETHODIMP
PlaceholderTransaction
:
:
GetTxnName
(
nsIAtom
*
*
aName
)
{
return
GetName
(
aName
)
;
}
NS_IMETHODIMP
PlaceholderTransaction
:
:
StartSelectionEquals
(
nsSelectionState
*
aSelState
bool
*
aResult
)
{
NS_ENSURE_TRUE
(
aResult
&
&
aSelState
NS_ERROR_NULL_POINTER
)
;
if
(
!
mStartSel
-
>
IsCollapsed
(
)
|
|
!
aSelState
-
>
IsCollapsed
(
)
)
{
*
aResult
=
false
;
return
NS_OK
;
}
*
aResult
=
mStartSel
-
>
IsEqual
(
aSelState
)
;
return
NS_OK
;
}
NS_IMETHODIMP
PlaceholderTransaction
:
:
EndPlaceHolderBatch
(
)
{
mAbsorb
=
false
;
if
(
mForwarding
)
{
nsCOMPtr
<
nsIAbsorbingTransaction
>
plcTxn
=
do_QueryReferent
(
mForwarding
)
;
if
(
plcTxn
)
plcTxn
-
>
EndPlaceHolderBatch
(
)
;
}
return
RememberEndingSelection
(
)
;
}
NS_IMETHODIMP
PlaceholderTransaction
:
:
ForwardEndBatchTo
(
nsIAbsorbingTransaction
*
aForwardingAddress
)
{
mForwarding
=
do_GetWeakReference
(
aForwardingAddress
)
;
return
NS_OK
;
}
NS_IMETHODIMP
PlaceholderTransaction
:
:
Commit
(
)
{
mCommitted
=
true
;
return
NS_OK
;
}
nsresult
PlaceholderTransaction
:
:
RememberEndingSelection
(
)
{
RefPtr
<
Selection
>
selection
=
mEditor
-
>
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_NULL_POINTER
)
;
mEndSel
.
SaveSelection
(
selection
)
;
return
NS_OK
;
}
}
