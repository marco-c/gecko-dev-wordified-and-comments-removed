#
include
"
DeleteNodeTransaction
.
h
"
#
include
"
SelectionState
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsEditor
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsAString
.
h
"
namespace
mozilla
{
DeleteNodeTransaction
:
:
DeleteNodeTransaction
(
)
:
mEditor
(
nullptr
)
mRangeUpdater
(
nullptr
)
{
}
DeleteNodeTransaction
:
:
~
DeleteNodeTransaction
(
)
{
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
DeleteNodeTransaction
EditTransactionBase
mNode
mParent
mRefNode
)
NS_IMPL_ADDREF_INHERITED
(
DeleteNodeTransaction
EditTransactionBase
)
NS_IMPL_RELEASE_INHERITED
(
DeleteNodeTransaction
EditTransactionBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
DeleteNodeTransaction
)
NS_INTERFACE_MAP_END_INHERITING
(
EditTransactionBase
)
nsresult
DeleteNodeTransaction
:
:
Init
(
nsEditor
*
aEditor
nsINode
*
aNode
nsRangeUpdater
*
aRangeUpdater
)
{
NS_ENSURE_TRUE
(
aEditor
&
&
aNode
NS_ERROR_NULL_POINTER
)
;
mEditor
=
aEditor
;
mNode
=
aNode
;
mParent
=
aNode
-
>
GetParentNode
(
)
;
NS_ENSURE_TRUE
(
!
mParent
|
|
mEditor
-
>
IsModifiableNode
(
mParent
)
NS_ERROR_FAILURE
)
;
mRangeUpdater
=
aRangeUpdater
;
return
NS_OK
;
}
NS_IMETHODIMP
DeleteNodeTransaction
:
:
DoTransaction
(
)
{
NS_ENSURE_TRUE
(
mNode
NS_ERROR_NOT_INITIALIZED
)
;
if
(
!
mParent
)
{
return
NS_OK
;
}
mRefNode
=
mNode
-
>
GetNextSibling
(
)
;
if
(
mRangeUpdater
)
{
mRangeUpdater
-
>
SelAdjDeleteNode
(
mNode
-
>
AsDOMNode
(
)
)
;
}
ErrorResult
error
;
mParent
-
>
RemoveChild
(
*
mNode
error
)
;
return
error
.
StealNSResult
(
)
;
}
NS_IMETHODIMP
DeleteNodeTransaction
:
:
UndoTransaction
(
)
{
if
(
!
mParent
)
{
return
NS_OK
;
}
if
(
!
mNode
)
{
return
NS_ERROR_NULL_POINTER
;
}
ErrorResult
error
;
mParent
-
>
InsertBefore
(
*
mNode
mRefNode
error
)
;
return
error
.
StealNSResult
(
)
;
}
NS_IMETHODIMP
DeleteNodeTransaction
:
:
RedoTransaction
(
)
{
if
(
!
mParent
)
{
return
NS_OK
;
}
if
(
!
mNode
)
{
return
NS_ERROR_NULL_POINTER
;
}
if
(
mRangeUpdater
)
{
mRangeUpdater
-
>
SelAdjDeleteNode
(
mNode
-
>
AsDOMNode
(
)
)
;
}
ErrorResult
error
;
mParent
-
>
RemoveChild
(
*
mNode
error
)
;
return
error
.
StealNSResult
(
)
;
}
NS_IMETHODIMP
DeleteNodeTransaction
:
:
GetTxnDescription
(
nsAString
&
aString
)
{
aString
.
AssignLiteral
(
"
DeleteNodeTransaction
"
)
;
return
NS_OK
;
}
}
