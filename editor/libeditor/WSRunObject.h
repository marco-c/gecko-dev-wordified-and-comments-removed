#
ifndef
WSRunObject_h
#
define
WSRunObject_h
#
include
"
HTMLEditUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
EditAction
.
h
"
#
include
"
mozilla
/
EditorBase
.
h
"
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
mozilla
/
HTMLEditor
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
HTMLBRElement
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIContent
.
h
"
namespace
mozilla
{
class
WSRunScanner
;
class
MOZ_STACK_CLASS
WSScanResult
final
{
private
:
enum
class
WSType
:
uint8_t
{
NotInitialized
LeadingWhiteSpaces
TrailingWhiteSpaces
NormalWhiteSpaces
NormalText
SpecialContent
BRElement
OtherBlockBoundary
CurrentBlockBoundary
}
;
friend
class
WSRunScanner
;
public
:
WSScanResult
(
)
=
delete
;
MOZ_NEVER_INLINE_DEBUG
WSScanResult
(
nsIContent
*
aContent
WSType
aReason
)
:
mContent
(
aContent
)
mReason
(
aReason
)
{
AssertIfInvalidData
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
WSScanResult
(
const
EditorDOMPoint
&
aPoint
WSType
aReason
)
:
mContent
(
aPoint
.
GetContainerAsContent
(
)
)
mOffset
(
Some
(
aPoint
.
Offset
(
)
)
)
mReason
(
aReason
)
{
AssertIfInvalidData
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
void
AssertIfInvalidData
(
)
const
{
#
ifdef
DEBUG
MOZ_ASSERT
(
mReason
=
=
WSType
:
:
NormalText
|
|
mReason
=
=
WSType
:
:
NormalWhiteSpaces
|
|
mReason
=
=
WSType
:
:
BRElement
|
|
mReason
=
=
WSType
:
:
SpecialContent
|
|
mReason
=
=
WSType
:
:
CurrentBlockBoundary
|
|
mReason
=
=
WSType
:
:
OtherBlockBoundary
)
;
MOZ_ASSERT_IF
(
mReason
=
=
WSType
:
:
NormalText
|
|
mReason
=
=
WSType
:
:
NormalWhiteSpaces
mContent
&
&
mContent
-
>
IsText
(
)
)
;
MOZ_ASSERT_IF
(
mReason
=
=
WSType
:
:
BRElement
mContent
&
&
mContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
)
;
MOZ_ASSERT_IF
(
mReason
=
=
WSType
:
:
SpecialContent
mContent
&
&
(
(
mContent
-
>
IsText
(
)
&
&
!
mContent
-
>
IsEditable
(
)
)
|
|
(
!
mContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
&
&
!
HTMLEditUtils
:
:
IsBlockElement
(
*
mContent
)
)
)
)
;
MOZ_ASSERT_IF
(
mReason
=
=
WSType
:
:
OtherBlockBoundary
mContent
&
&
HTMLEditUtils
:
:
IsBlockElement
(
*
mContent
)
)
;
MOZ_ASSERT_IF
(
mReason
=
=
WSType
:
:
CurrentBlockBoundary
!
mContent
|
|
!
mContent
-
>
GetParentElement
(
)
|
|
HTMLEditUtils
:
:
IsBlockElement
(
*
mContent
)
|
|
HTMLEditUtils
:
:
IsBlockElement
(
*
mContent
-
>
GetParentElement
(
)
)
|
|
!
mContent
-
>
GetParentElement
(
)
-
>
IsEditable
(
)
)
;
#
endif
}
nsIContent
*
GetContent
(
)
const
{
return
mContent
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
Element
*
ElementPtr
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
mContent
-
>
IsElement
(
)
)
;
return
mContent
-
>
AsElement
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
HTMLBRElement
*
BRElementPtr
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
mContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
)
;
return
static_cast
<
dom
:
:
HTMLBRElement
*
>
(
mContent
.
get
(
)
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
Text
*
TextPtr
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
mContent
-
>
IsText
(
)
)
;
return
mContent
-
>
AsText
(
)
;
}
bool
IsContentEditable
(
)
const
{
return
mContent
&
&
mContent
-
>
IsEditable
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
uint32_t
Offset
(
)
const
{
NS_ASSERTION
(
mOffset
.
isSome
(
)
"
Retrieved
non
-
meaningful
offset
"
)
;
return
mOffset
.
valueOr
(
0
)
;
}
MOZ_NEVER_INLINE_DEBUG
EditorDOMPoint
Point
(
)
const
{
NS_ASSERTION
(
mOffset
.
isSome
(
)
"
Retrieved
non
-
meaningful
point
"
)
;
return
EditorDOMPoint
(
mContent
mOffset
.
valueOr
(
0
)
)
;
}
MOZ_NEVER_INLINE_DEBUG
EditorRawDOMPoint
RawPoint
(
)
const
{
NS_ASSERTION
(
mOffset
.
isSome
(
)
"
Retrieved
non
-
meaningful
raw
point
"
)
;
return
EditorRawDOMPoint
(
mContent
mOffset
.
valueOr
(
0
)
)
;
}
MOZ_NEVER_INLINE_DEBUG
EditorDOMPoint
PointAtContent
(
)
const
{
MOZ_ASSERT
(
mContent
)
;
return
EditorDOMPoint
(
mContent
)
;
}
MOZ_NEVER_INLINE_DEBUG
EditorRawDOMPoint
RawPointAtContent
(
)
const
{
MOZ_ASSERT
(
mContent
)
;
return
EditorRawDOMPoint
(
mContent
)
;
}
MOZ_NEVER_INLINE_DEBUG
EditorDOMPoint
PointAfterContent
(
)
const
{
MOZ_ASSERT
(
mContent
)
;
return
mContent
?
EditorDOMPoint
:
:
After
(
mContent
)
:
EditorDOMPoint
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
EditorRawDOMPoint
RawPointAfterContent
(
)
const
{
MOZ_ASSERT
(
mContent
)
;
return
mContent
?
EditorRawDOMPoint
:
:
After
(
mContent
)
:
EditorRawDOMPoint
(
)
;
}
bool
ReachedSpecialContent
(
)
const
{
return
mReason
=
=
WSType
:
:
SpecialContent
;
}
bool
InNormalWhiteSpacesOrText
(
)
const
{
return
mReason
=
=
WSType
:
:
NormalWhiteSpaces
|
|
mReason
=
=
WSType
:
:
NormalText
;
}
bool
InNormalWhiteSpaces
(
)
const
{
return
mReason
=
=
WSType
:
:
NormalWhiteSpaces
;
}
bool
InNormalText
(
)
const
{
return
mReason
=
=
WSType
:
:
NormalText
;
}
bool
ReachedBRElement
(
)
const
{
return
mReason
=
=
WSType
:
:
BRElement
;
}
bool
ReachedHRElement
(
)
const
{
return
mContent
&
&
mContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
hr
)
;
}
bool
ReachedBlockBoundary
(
)
const
{
return
mReason
=
=
WSType
:
:
CurrentBlockBoundary
|
|
mReason
=
=
WSType
:
:
OtherBlockBoundary
;
}
bool
ReachedCurrentBlockBoundary
(
)
const
{
return
mReason
=
=
WSType
:
:
CurrentBlockBoundary
;
}
bool
ReachedOtherBlockElement
(
)
const
{
return
mReason
=
=
WSType
:
:
OtherBlockBoundary
;
}
bool
ReachedSomething
(
)
const
{
return
!
InNormalWhiteSpacesOrText
(
)
;
}
private
:
nsCOMPtr
<
nsIContent
>
mContent
;
Maybe
<
uint32_t
>
mOffset
;
WSType
mReason
;
}
;
class
WhiteSpaceVisibilityKeeper
;
class
MOZ_STACK_CLASS
WSRunScanner
final
{
public
:
using
WSType
=
WSScanResult
:
:
WSType
;
template
<
typename
EditorDOMPointType
>
WSRunScanner
(
const
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointType
&
aScanStartPoint
)
:
mScanStartPoint
(
aScanStartPoint
)
mEditingHost
(
aHTMLEditor
.
GetActiveEditingHost
(
)
)
mHTMLEditor
(
&
aHTMLEditor
)
mTextFragmentDataAtStart
(
mScanStartPoint
mEditingHost
)
{
}
template
<
typename
PT
typename
CT
>
WSScanResult
ScanNextVisibleNodeOrBlockBoundaryFrom
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
;
template
<
typename
PT
typename
CT
>
static
WSScanResult
ScanNextVisibleNodeOrBlockBoundary
(
const
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
{
return
WSRunScanner
(
aHTMLEditor
aPoint
)
.
ScanNextVisibleNodeOrBlockBoundaryFrom
(
aPoint
)
;
}
template
<
typename
PT
typename
CT
>
WSScanResult
ScanPreviousVisibleNodeOrBlockBoundaryFrom
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
;
template
<
typename
PT
typename
CT
>
static
WSScanResult
ScanPreviousVisibleNodeOrBlockBoundary
(
const
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
{
return
WSRunScanner
(
aHTMLEditor
aPoint
)
.
ScanPreviousVisibleNodeOrBlockBoundaryFrom
(
aPoint
)
;
}
template
<
typename
PT
typename
CT
>
static
EditorDOMPointInText
GetInclusiveNextEditableCharPoint
(
const
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
{
if
(
aPoint
.
IsInTextNode
(
)
&
&
!
aPoint
.
IsEndOfContainer
(
)
&
&
HTMLEditUtils
:
:
IsSimplyEditableNode
(
*
aPoint
.
ContainerAsText
(
)
)
)
{
return
EditorDOMPointInText
(
aPoint
.
ContainerAsText
(
)
aPoint
.
Offset
(
)
)
;
}
WSRunScanner
scanner
(
aHTMLEditor
aPoint
)
;
return
scanner
.
GetInclusiveNextEditableCharPoint
(
aPoint
)
;
}
template
<
typename
PT
typename
CT
>
static
EditorDOMPointInText
GetPreviousEditableCharPoint
(
const
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
{
if
(
aPoint
.
IsInTextNode
(
)
&
&
!
aPoint
.
IsStartOfContainer
(
)
&
&
HTMLEditUtils
:
:
IsSimplyEditableNode
(
*
aPoint
.
ContainerAsText
(
)
)
)
{
return
EditorDOMPointInText
(
aPoint
.
ContainerAsText
(
)
aPoint
.
Offset
(
)
-
1
)
;
}
WSRunScanner
scanner
(
aHTMLEditor
aPoint
)
;
return
scanner
.
GetPreviousEditableCharPoint
(
aPoint
)
;
}
template
<
typename
EditorDOMPointType
>
static
EditorDOMPointType
GetAfterLastVisiblePoint
(
Text
&
aTextNode
const
Element
*
aAncestorLimiter
)
;
template
<
typename
EditorDOMPointType
>
static
EditorDOMPointType
GetFirstVisiblePoint
(
Text
&
aTextNode
const
Element
*
aAncestorLimiter
)
;
static
Result
<
EditorDOMRangeInTexts
nsresult
>
GetRangeInTextNodesToForwardDeleteFrom
(
const
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
)
;
static
Result
<
EditorDOMRangeInTexts
nsresult
>
GetRangeInTextNodesToBackspaceFrom
(
const
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
)
;
static
EditorDOMRange
GetRangesForDeletingAtomicContent
(
const
HTMLEditor
&
aHTMLEditor
const
nsIContent
&
aAtomicContent
)
;
static
Result
<
bool
nsresult
>
ShrinkRangeIfStartsFromOrEndsAfterAtomicContent
(
const
HTMLEditor
&
aHTMLEditor
nsRange
&
aRange
const
Element
*
aEditingHost
)
;
template
<
typename
EditorDOMPointType
>
MOZ_NEVER_INLINE_DEBUG
static
HTMLBRElement
*
GetPrecedingBRElementUnlessVisibleContentFound
(
const
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointType
&
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
if
(
aPoint
.
IsStartOfContainer
(
)
)
{
return
nullptr
;
}
TextFragmentData
textFragmentData
(
aPoint
aHTMLEditor
.
GetActiveEditingHost
(
)
)
;
return
textFragmentData
.
StartsFromBRElement
(
)
?
textFragmentData
.
StartReasonBRElementPtr
(
)
:
nullptr
;
}
const
EditorDOMPoint
&
ScanStartRef
(
)
const
{
return
mScanStartPoint
;
}
nsIContent
*
GetStartReasonContent
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
GetStartReasonContent
(
)
;
}
nsIContent
*
GetEndReasonContent
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
GetEndReasonContent
(
)
;
}
bool
StartsFromNormalText
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
StartsFromNormalText
(
)
;
}
bool
StartsFromSpecialContent
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
StartsFromSpecialContent
(
)
;
}
bool
StartsFromBRElement
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
StartsFromBRElement
(
)
;
}
bool
StartsFromCurrentBlockBoundary
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
StartsFromCurrentBlockBoundary
(
)
;
}
bool
StartsFromOtherBlockElement
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
StartsFromOtherBlockElement
(
)
;
}
bool
StartsFromBlockBoundary
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
StartsFromBlockBoundary
(
)
;
}
bool
StartsFromHardLineBreak
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
StartsFromHardLineBreak
(
)
;
}
bool
EndsByNormalText
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
EndsByNormalText
(
)
;
}
bool
EndsBySpecialContent
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
EndsBySpecialContent
(
)
;
}
bool
EndsByBRElement
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
EndsByBRElement
(
)
;
}
bool
EndsByCurrentBlockBoundary
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
EndsByCurrentBlockBoundary
(
)
;
}
bool
EndsByOtherBlockElement
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
EndsByOtherBlockElement
(
)
;
}
bool
EndsByBlockBoundary
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
EndsByBlockBoundary
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
Element
*
StartReasonOtherBlockElementPtr
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
StartReasonOtherBlockElementPtr
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
HTMLBRElement
*
StartReasonBRElementPtr
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
StartReasonBRElementPtr
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
Element
*
EndReasonOtherBlockElementPtr
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
EndReasonOtherBlockElementPtr
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
HTMLBRElement
*
EndReasonBRElementPtr
(
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
EndReasonBRElementPtr
(
)
;
}
dom
:
:
Element
*
GetEditingHost
(
)
const
{
return
mEditingHost
;
}
protected
:
using
EditorType
=
EditorBase
:
:
EditorType
;
class
TextFragmentData
;
class
MOZ_STACK_CLASS
VisibleWhiteSpacesData
final
{
public
:
bool
IsInitialized
(
)
const
{
return
mLeftWSType
!
=
WSType
:
:
NotInitialized
|
|
mRightWSType
!
=
WSType
:
:
NotInitialized
;
}
EditorDOMPoint
StartRef
(
)
const
{
return
mStartPoint
;
}
EditorDOMPoint
EndRef
(
)
const
{
return
mEndPoint
;
}
bool
StartsFromNormalText
(
)
const
{
return
mLeftWSType
=
=
WSType
:
:
NormalText
;
}
bool
StartsFromSpecialContent
(
)
const
{
return
mLeftWSType
=
=
WSType
:
:
SpecialContent
;
}
bool
EndsByNormalText
(
)
const
{
return
mRightWSType
=
=
WSType
:
:
NormalText
;
}
bool
EndsByTrailingWhiteSpaces
(
)
const
{
return
mRightWSType
=
=
WSType
:
:
TrailingWhiteSpaces
;
}
bool
EndsBySpecialContent
(
)
const
{
return
mRightWSType
=
=
WSType
:
:
SpecialContent
;
}
bool
EndsByBRElement
(
)
const
{
return
mRightWSType
=
=
WSType
:
:
BRElement
;
}
bool
EndsByBlockBoundary
(
)
const
{
return
mRightWSType
=
=
WSType
:
:
CurrentBlockBoundary
|
|
mRightWSType
=
=
WSType
:
:
OtherBlockBoundary
;
}
enum
class
PointPosition
{
BeforeStartOfFragment
StartOfFragment
MiddleOfFragment
EndOfFragment
AfterEndOfFragment
NotInSameDOMTree
}
;
template
<
typename
EditorDOMPointType
>
PointPosition
ComparePoint
(
const
EditorDOMPointType
&
aPoint
)
const
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
if
(
StartRef
(
)
=
=
aPoint
)
{
return
PointPosition
:
:
StartOfFragment
;
}
if
(
EndRef
(
)
=
=
aPoint
)
{
return
PointPosition
:
:
EndOfFragment
;
}
const
bool
startIsBeforePoint
=
StartRef
(
)
.
IsBefore
(
aPoint
)
;
const
bool
pointIsBeforeEnd
=
aPoint
.
IsBefore
(
EndRef
(
)
)
;
if
(
startIsBeforePoint
&
&
pointIsBeforeEnd
)
{
return
PointPosition
:
:
MiddleOfFragment
;
}
if
(
startIsBeforePoint
)
{
return
PointPosition
:
:
AfterEndOfFragment
;
}
if
(
pointIsBeforeEnd
)
{
return
PointPosition
:
:
BeforeStartOfFragment
;
}
return
PointPosition
:
:
NotInSameDOMTree
;
}
private
:
friend
class
WSRunScanner
:
:
TextFragmentData
;
VisibleWhiteSpacesData
(
)
:
mLeftWSType
(
WSType
:
:
NotInitialized
)
mRightWSType
(
WSType
:
:
NotInitialized
)
{
}
template
<
typename
EditorDOMPointType
>
void
SetStartPoint
(
const
EditorDOMPointType
&
aStartPoint
)
{
mStartPoint
=
aStartPoint
;
}
template
<
typename
EditorDOMPointType
>
void
SetEndPoint
(
const
EditorDOMPointType
&
aEndPoint
)
{
mEndPoint
=
aEndPoint
;
}
void
SetStartFrom
(
WSType
aLeftWSType
)
{
mLeftWSType
=
aLeftWSType
;
}
void
SetStartFromLeadingWhiteSpaces
(
)
{
mLeftWSType
=
WSType
:
:
LeadingWhiteSpaces
;
}
void
SetStartFromNormalWhiteSpaces
(
)
{
mLeftWSType
=
WSType
:
:
NormalWhiteSpaces
;
}
void
SetEndBy
(
WSType
aRightWSType
)
{
mRightWSType
=
aRightWSType
;
}
void
SetEndByNormalWiteSpaces
(
)
{
mRightWSType
=
WSType
:
:
NormalWhiteSpaces
;
}
void
SetEndByTrailingWhiteSpaces
(
)
{
mRightWSType
=
WSType
:
:
TrailingWhiteSpaces
;
}
EditorDOMPoint
mStartPoint
;
EditorDOMPoint
mEndPoint
;
WSType
mLeftWSType
mRightWSType
;
}
;
using
PointPosition
=
VisibleWhiteSpacesData
:
:
PointPosition
;
template
<
typename
PT
typename
CT
>
EditorDOMPointInText
GetInclusiveNextEditableCharPoint
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
GetInclusiveNextEditableCharPoint
(
aPoint
)
;
}
template
<
typename
PT
typename
CT
>
EditorDOMPointInText
GetPreviousEditableCharPoint
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
GetPreviousEditableCharPoint
(
aPoint
)
;
}
EditorDOMPointInText
GetEndOfCollapsibleASCIIWhiteSpaces
(
const
EditorDOMPointInText
&
aPointAtASCIIWhiteSpace
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
GetEndOfCollapsibleASCIIWhiteSpaces
(
aPointAtASCIIWhiteSpace
)
;
}
EditorDOMPointInText
GetFirstASCIIWhiteSpacePointCollapsedTo
(
const
EditorDOMPointInText
&
aPointAtASCIIWhiteSpace
)
const
{
return
TextFragmentDataAtStartRef
(
)
.
GetFirstASCIIWhiteSpacePointCollapsedTo
(
aPointAtASCIIWhiteSpace
)
;
}
EditorDOMPointInText
GetPreviousCharPointFromPointInText
(
const
EditorDOMPointInText
&
aPoint
)
const
;
char16_t
GetCharAt
(
dom
:
:
Text
*
aTextNode
int32_t
aOffset
)
const
;
class
MOZ_STACK_CLASS
TextFragmentData
final
{
private
:
class
NoBreakingSpaceData
;
class
MOZ_STACK_CLASS
BoundaryData
final
{
public
:
using
NoBreakingSpaceData
=
WSRunScanner
:
:
TextFragmentData
:
:
NoBreakingSpaceData
;
template
<
typename
EditorDOMPointType
>
static
BoundaryData
ScanCollapsibleWhiteSpaceStartFrom
(
const
EditorDOMPointType
&
aPoint
const
nsIContent
&
aEditableBlockParentOrTopmostEditableInlineContent
const
Element
*
aEditingHost
NoBreakingSpaceData
*
aNBSPData
)
;
template
<
typename
EditorDOMPointType
>
static
BoundaryData
ScanCollapsibleWhiteSpaceEndFrom
(
const
EditorDOMPointType
&
aPoint
const
nsIContent
&
aEditableBlockParentOrTopmostEditableInlineContent
const
Element
*
aEditingHost
NoBreakingSpaceData
*
aNBSPData
)
;
enum
class
Preformatted
:
bool
{
Yes
No
}
;
BoundaryData
(
)
:
mReason
(
WSType
:
:
NotInitialized
)
mAcrossPreformattedCharacter
(
Preformatted
:
:
No
)
{
}
template
<
typename
EditorDOMPointType
>
BoundaryData
(
const
EditorDOMPointType
&
aPoint
nsIContent
&
aReasonContent
WSType
aReason
Preformatted
aDidCrossPreformattedCharacter
)
:
mReasonContent
(
&
aReasonContent
)
mPoint
(
aPoint
)
mReason
(
aReason
)
mAcrossPreformattedCharacter
(
aDidCrossPreformattedCharacter
)
{
}
bool
Initialized
(
)
const
{
return
mReasonContent
&
&
mPoint
.
IsSet
(
)
;
}
nsIContent
*
GetReasonContent
(
)
const
{
return
mReasonContent
;
}
const
EditorDOMPoint
&
PointRef
(
)
const
{
return
mPoint
;
}
WSType
RawReason
(
)
const
{
return
mReason
;
}
bool
AcrossPreformattedCharacter
(
)
const
{
return
mAcrossPreformattedCharacter
=
=
Preformatted
:
:
Yes
;
}
bool
IsNormalText
(
)
const
{
return
mReason
=
=
WSType
:
:
NormalText
;
}
bool
IsSpecialContent
(
)
const
{
return
mReason
=
=
WSType
:
:
SpecialContent
;
}
bool
IsBRElement
(
)
const
{
return
mReason
=
=
WSType
:
:
BRElement
;
}
bool
IsCurrentBlockBoundary
(
)
const
{
return
mReason
=
=
WSType
:
:
CurrentBlockBoundary
;
}
bool
IsOtherBlockBoundary
(
)
const
{
return
mReason
=
=
WSType
:
:
OtherBlockBoundary
;
}
bool
IsBlockBoundary
(
)
const
{
return
mReason
=
=
WSType
:
:
CurrentBlockBoundary
|
|
mReason
=
=
WSType
:
:
OtherBlockBoundary
;
}
bool
IsHardLineBreak
(
)
const
{
return
mReason
=
=
WSType
:
:
CurrentBlockBoundary
|
|
mReason
=
=
WSType
:
:
OtherBlockBoundary
|
|
mReason
=
=
WSType
:
:
BRElement
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
Element
*
OtherBlockElementPtr
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
mReasonContent
-
>
IsElement
(
)
)
;
return
mReasonContent
-
>
AsElement
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
HTMLBRElement
*
BRElementPtr
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
mReasonContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
)
;
return
static_cast
<
dom
:
:
HTMLBRElement
*
>
(
mReasonContent
.
get
(
)
)
;
}
private
:
template
<
typename
EditorDOMPointType
>
static
Maybe
<
BoundaryData
>
ScanCollapsibleWhiteSpaceStartInTextNode
(
const
EditorDOMPointType
&
aPoint
NoBreakingSpaceData
*
aNBSPData
)
;
template
<
typename
EditorDOMPointType
>
static
Maybe
<
BoundaryData
>
ScanCollapsibleWhiteSpaceEndInTextNode
(
const
EditorDOMPointType
&
aPoint
NoBreakingSpaceData
*
aNBSPData
)
;
nsCOMPtr
<
nsIContent
>
mReasonContent
;
EditorDOMPoint
mPoint
;
WSType
mReason
;
Preformatted
mAcrossPreformattedCharacter
;
}
;
class
MOZ_STACK_CLASS
NoBreakingSpaceData
final
{
public
:
enum
class
Scanning
{
Forward
Backward
}
;
void
NotifyNBSP
(
const
EditorDOMPointInText
&
aPoint
Scanning
aScanningDirection
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
aPoint
.
IsCharNBSP
(
)
)
;
if
(
!
mFirst
.
IsSet
(
)
|
|
aScanningDirection
=
=
Scanning
:
:
Backward
)
{
mFirst
=
aPoint
;
}
if
(
!
mLast
.
IsSet
(
)
|
|
aScanningDirection
=
=
Scanning
:
:
Forward
)
{
mLast
=
aPoint
;
}
}
const
EditorDOMPointInText
&
FirstPointRef
(
)
const
{
return
mFirst
;
}
const
EditorDOMPointInText
&
LastPointRef
(
)
const
{
return
mLast
;
}
bool
FoundNBSP
(
)
const
{
MOZ_ASSERT
(
mFirst
.
IsSet
(
)
=
=
mLast
.
IsSet
(
)
)
;
return
mFirst
.
IsSet
(
)
;
}
private
:
EditorDOMPointInText
mFirst
;
EditorDOMPointInText
mLast
;
}
;
public
:
TextFragmentData
(
)
=
delete
;
template
<
typename
EditorDOMPointType
>
TextFragmentData
(
const
EditorDOMPointType
&
aPoint
const
Element
*
aEditingHost
)
;
nsIContent
*
GetStartReasonContent
(
)
const
{
return
mStart
.
GetReasonContent
(
)
;
}
nsIContent
*
GetEndReasonContent
(
)
const
{
return
mEnd
.
GetReasonContent
(
)
;
}
bool
StartsFromNormalText
(
)
const
{
return
mStart
.
IsNormalText
(
)
;
}
bool
StartsFromSpecialContent
(
)
const
{
return
mStart
.
IsSpecialContent
(
)
;
}
bool
StartsFromBRElement
(
)
const
{
return
mStart
.
IsBRElement
(
)
;
}
bool
StartsFromCurrentBlockBoundary
(
)
const
{
return
mStart
.
IsCurrentBlockBoundary
(
)
;
}
bool
StartsFromOtherBlockElement
(
)
const
{
return
mStart
.
IsOtherBlockBoundary
(
)
;
}
bool
StartsFromBlockBoundary
(
)
const
{
return
mStart
.
IsBlockBoundary
(
)
;
}
bool
StartsFromHardLineBreak
(
)
const
{
return
mStart
.
IsHardLineBreak
(
)
;
}
bool
EndsByNormalText
(
)
const
{
return
mEnd
.
IsNormalText
(
)
;
}
bool
EndsBySpecialContent
(
)
const
{
return
mEnd
.
IsSpecialContent
(
)
;
}
bool
EndsByBRElement
(
)
const
{
return
mEnd
.
IsBRElement
(
)
;
}
bool
EndsByCurrentBlockBoundary
(
)
const
{
return
mEnd
.
IsCurrentBlockBoundary
(
)
;
}
bool
EndsByOtherBlockElement
(
)
const
{
return
mEnd
.
IsOtherBlockBoundary
(
)
;
}
bool
EndsByBlockBoundary
(
)
const
{
return
mEnd
.
IsBlockBoundary
(
)
;
}
WSType
StartRawReason
(
)
const
{
return
mStart
.
RawReason
(
)
;
}
WSType
EndRawReason
(
)
const
{
return
mEnd
.
RawReason
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
Element
*
StartReasonOtherBlockElementPtr
(
)
const
{
return
mStart
.
OtherBlockElementPtr
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
HTMLBRElement
*
StartReasonBRElementPtr
(
)
const
{
return
mStart
.
BRElementPtr
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
Element
*
EndReasonOtherBlockElementPtr
(
)
const
{
return
mEnd
.
OtherBlockElementPtr
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
HTMLBRElement
*
EndReasonBRElementPtr
(
)
const
{
return
mEnd
.
BRElementPtr
(
)
;
}
const
EditorDOMPoint
&
StartRef
(
)
const
{
return
mStart
.
PointRef
(
)
;
}
const
EditorDOMPoint
&
EndRef
(
)
const
{
return
mEnd
.
PointRef
(
)
;
}
const
EditorDOMPoint
&
ScanStartRef
(
)
const
{
return
mScanStartPoint
;
}
bool
FoundNoBreakingWhiteSpaces
(
)
const
{
return
mNBSPData
.
FoundNBSP
(
)
;
}
const
EditorDOMPointInText
&
FirstNBSPPointRef
(
)
const
{
return
mNBSPData
.
FirstPointRef
(
)
;
}
const
EditorDOMPointInText
&
LastNBSPPointRef
(
)
const
{
return
mNBSPData
.
LastPointRef
(
)
;
}
bool
IsPreformatted
(
)
const
{
return
mIsPreformatted
;
}
template
<
typename
PT
typename
CT
>
EditorDOMPointInText
GetInclusiveNextEditableCharPoint
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
;
template
<
typename
PT
typename
CT
>
EditorDOMPointInText
GetPreviousEditableCharPoint
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
;
EditorDOMPointInText
GetEndOfCollapsibleASCIIWhiteSpaces
(
const
EditorDOMPointInText
&
aPointAtASCIIWhiteSpace
)
const
;
EditorDOMPointInText
GetFirstASCIIWhiteSpacePointCollapsedTo
(
const
EditorDOMPointInText
&
aPointAtASCIIWhiteSpace
)
const
;
EditorDOMRangeInTexts
GetNonCollapsedRangeInTexts
(
const
EditorDOMRange
&
aRange
)
const
;
const
EditorDOMRange
&
InvisibleLeadingWhiteSpaceRangeRef
(
)
const
;
const
EditorDOMRange
&
InvisibleTrailingWhiteSpaceRangeRef
(
)
const
;
template
<
typename
EditorDOMPointType
>
EditorDOMRange
GetNewInvisibleLeadingWhiteSpaceRangeIfSplittingAt
(
const
EditorDOMPointType
&
aPointToSplit
)
const
{
const
EditorDOMRange
&
trailingWhiteSpaceRange
=
InvisibleTrailingWhiteSpaceRangeRef
(
)
;
if
(
!
trailingWhiteSpaceRange
.
IsPositioned
(
)
)
{
return
trailingWhiteSpaceRange
;
}
if
(
trailingWhiteSpaceRange
!
=
InvisibleLeadingWhiteSpaceRangeRef
(
)
)
{
return
EditorDOMRange
(
)
;
}
if
(
aPointToSplit
.
IsBefore
(
trailingWhiteSpaceRange
.
StartRef
(
)
)
)
{
return
EditorDOMRange
(
)
;
}
if
(
aPointToSplit
.
EqualsOrIsBefore
(
trailingWhiteSpaceRange
.
EndRef
(
)
)
)
{
return
EditorDOMRange
(
trailingWhiteSpaceRange
.
StartRef
(
)
aPointToSplit
)
;
}
return
EditorDOMRange
(
trailingWhiteSpaceRange
.
EndRef
(
)
)
;
}
template
<
typename
EditorDOMPointType
>
EditorDOMRange
GetNewInvisibleTrailingWhiteSpaceRangeIfSplittingAt
(
const
EditorDOMPointType
&
aPointToSplit
)
const
{
const
EditorDOMRange
&
leadingWhiteSpaceRange
=
InvisibleLeadingWhiteSpaceRangeRef
(
)
;
if
(
!
leadingWhiteSpaceRange
.
IsPositioned
(
)
)
{
return
leadingWhiteSpaceRange
;
}
if
(
leadingWhiteSpaceRange
!
=
InvisibleTrailingWhiteSpaceRangeRef
(
)
)
{
return
EditorDOMRange
(
)
;
}
if
(
leadingWhiteSpaceRange
.
EndRef
(
)
.
IsBefore
(
aPointToSplit
)
)
{
return
EditorDOMRange
(
)
;
}
if
(
leadingWhiteSpaceRange
.
StartRef
(
)
.
EqualsOrIsBefore
(
aPointToSplit
)
)
{
return
EditorDOMRange
(
aPointToSplit
leadingWhiteSpaceRange
.
EndRef
(
)
)
;
}
return
EditorDOMRange
(
leadingWhiteSpaceRange
.
StartRef
(
)
)
;
}
template
<
typename
EditorDOMPointType
>
bool
FollowingContentMayBecomeFirstVisibleContent
(
const
EditorDOMPointType
&
aPoint
)
const
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
if
(
!
mStart
.
IsHardLineBreak
(
)
)
{
return
false
;
}
if
(
aPoint
.
EqualsOrIsBefore
(
mStart
.
PointRef
(
)
)
)
{
return
true
;
}
const
EditorDOMRange
&
leadingWhiteSpaceRange
=
InvisibleLeadingWhiteSpaceRangeRef
(
)
;
if
(
!
leadingWhiteSpaceRange
.
StartRef
(
)
.
IsSet
(
)
)
{
return
false
;
}
if
(
aPoint
.
EqualsOrIsBefore
(
leadingWhiteSpaceRange
.
StartRef
(
)
)
)
{
return
true
;
}
if
(
!
leadingWhiteSpaceRange
.
EndRef
(
)
.
IsSet
(
)
)
{
return
false
;
}
return
aPoint
.
EqualsOrIsBefore
(
leadingWhiteSpaceRange
.
EndRef
(
)
)
;
}
template
<
typename
EditorDOMPointType
>
bool
PrecedingContentMayBecomeInvisible
(
const
EditorDOMPointType
&
aPoint
)
const
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
if
(
mEnd
.
IsBlockBoundary
(
)
)
{
return
true
;
}
const
VisibleWhiteSpacesData
&
visibleWhiteSpaces
=
VisibleWhiteSpacesDataRef
(
)
;
if
(
!
visibleWhiteSpaces
.
IsInitialized
(
)
)
{
return
false
;
}
if
(
!
visibleWhiteSpaces
.
StartRef
(
)
.
IsSet
(
)
)
{
return
true
;
}
if
(
!
visibleWhiteSpaces
.
StartRef
(
)
.
EqualsOrIsBefore
(
aPoint
)
)
{
return
false
;
}
if
(
visibleWhiteSpaces
.
EndsByTrailingWhiteSpaces
(
)
)
{
return
true
;
}
if
(
visibleWhiteSpaces
.
StartRef
(
)
=
=
visibleWhiteSpaces
.
EndRef
(
)
)
{
return
true
;
}
return
aPoint
.
IsBefore
(
visibleWhiteSpaces
.
EndRef
(
)
)
;
}
EditorDOMPointInText
GetPreviousNBSPPointIfNeedToReplaceWithASCIIWhiteSpace
(
const
EditorDOMPoint
&
aPointToInsert
)
const
;
EditorDOMPointInText
GetInclusiveNextNBSPPointIfNeedToReplaceWithASCIIWhiteSpace
(
const
EditorDOMPoint
&
aPointToInsert
)
const
;
ReplaceRangeData
GetReplaceRangeDataAtEndOfDeletionRange
(
const
TextFragmentData
&
aTextFragmentDataAtStartToDelete
)
const
;
ReplaceRangeData
GetReplaceRangeDataAtStartOfDeletionRange
(
const
TextFragmentData
&
aTextFragmentDataAtEndToDelete
)
const
;
const
VisibleWhiteSpacesData
&
VisibleWhiteSpacesDataRef
(
)
const
;
private
:
bool
IsPreformattedOrSurrondedByVisibleContent
(
)
const
{
return
mIsPreformatted
|
|
(
(
StartsFromNormalText
(
)
|
|
StartsFromSpecialContent
(
)
)
&
&
(
EndsByNormalText
(
)
|
|
EndsBySpecialContent
(
)
|
|
EndsByBRElement
(
)
)
)
;
}
EditorDOMPoint
mScanStartPoint
;
BoundaryData
mStart
;
BoundaryData
mEnd
;
NoBreakingSpaceData
mNBSPData
;
RefPtr
<
const
Element
>
mEditingHost
;
mutable
Maybe
<
EditorDOMRange
>
mLeadingWhiteSpaceRange
;
mutable
Maybe
<
EditorDOMRange
>
mTrailingWhiteSpaceRange
;
mutable
Maybe
<
VisibleWhiteSpacesData
>
mVisibleWhiteSpacesData
;
bool
mIsPreformatted
;
}
;
const
TextFragmentData
&
TextFragmentDataAtStartRef
(
)
const
{
return
mTextFragmentDataAtStart
;
}
EditorDOMPoint
mScanStartPoint
;
RefPtr
<
dom
:
:
Element
>
mEditingHost
;
const
HTMLEditor
*
mHTMLEditor
;
private
:
static
EditorDOMRangeInTexts
ComputeRangeInTextNodesContainingInvisibleWhiteSpaces
(
const
TextFragmentData
&
aStart
const
TextFragmentData
&
aEnd
)
;
TextFragmentData
mTextFragmentDataAtStart
;
friend
class
WhiteSpaceVisibilityKeeper
;
}
;
class
WhiteSpaceVisibilityKeeper
final
{
private
:
using
AutoTransactionsConserveSelection
=
EditorBase
:
:
AutoTransactionsConserveSelection
;
using
EditorType
=
EditorBase
:
:
EditorType
;
using
PointPosition
=
WSRunScanner
:
:
PointPosition
;
using
TextFragmentData
=
WSRunScanner
:
:
TextFragmentData
;
using
VisibleWhiteSpacesData
=
WSRunScanner
:
:
VisibleWhiteSpacesData
;
public
:
WhiteSpaceVisibilityKeeper
(
)
=
delete
;
explicit
WhiteSpaceVisibilityKeeper
(
const
WhiteSpaceVisibilityKeeper
&
aOther
)
=
delete
;
WhiteSpaceVisibilityKeeper
(
WhiteSpaceVisibilityKeeper
&
&
aOther
)
=
delete
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
DeleteInvisibleASCIIWhiteSpaces
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
PrepareToDeleteRangeAndTrackPoints
(
HTMLEditor
&
aHTMLEditor
EditorDOMPoint
*
aStartPoint
EditorDOMPoint
*
aEndPoint
)
{
MOZ_ASSERT
(
aStartPoint
-
>
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
aEndPoint
-
>
IsSetAndValid
(
)
)
;
AutoTrackDOMPoint
trackerStart
(
aHTMLEditor
.
RangeUpdaterRef
(
)
aStartPoint
)
;
AutoTrackDOMPoint
trackerEnd
(
aHTMLEditor
.
RangeUpdaterRef
(
)
aEndPoint
)
;
return
WhiteSpaceVisibilityKeeper
:
:
PrepareToDeleteRange
(
aHTMLEditor
EditorDOMRange
(
*
aStartPoint
*
aEndPoint
)
)
;
}
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
PrepareToDeleteRange
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aStartPoint
const
EditorDOMPoint
&
aEndPoint
)
{
MOZ_ASSERT
(
aStartPoint
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
aEndPoint
.
IsSetAndValid
(
)
)
;
return
WhiteSpaceVisibilityKeeper
:
:
PrepareToDeleteRange
(
aHTMLEditor
EditorDOMRange
(
aStartPoint
aEndPoint
)
)
;
}
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
PrepareToDeleteRange
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMRange
&
aRange
)
{
MOZ_ASSERT
(
aRange
.
IsPositionedAndValid
(
)
)
;
nsresult
rv
=
WhiteSpaceVisibilityKeeper
:
:
MakeSureToKeepVisibleStateOfWhiteSpacesAroundDeletingRange
(
aHTMLEditor
aRange
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
WhiteSpaceVisibilityKeeper
:
:
"
"
MakeSureToKeepVisibleStateOfWhiteSpacesAroundDeletingRange
(
)
failed
"
)
;
return
rv
;
}
MOZ_CAN_RUN_SCRIPT
static
nsresult
PrepareToSplitAcrossBlocks
(
HTMLEditor
&
aHTMLEditor
nsCOMPtr
<
nsINode
>
*
aSplitNode
int32_t
*
aSplitOffset
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
EditActionResult
MergeFirstLineOfRightBlockElementIntoDescendantLeftBlockElement
(
HTMLEditor
&
aHTMLEditor
Element
&
aLeftBlockElement
Element
&
aRightBlockElement
const
EditorDOMPoint
&
aAtRightBlockChild
const
Maybe
<
nsAtom
*
>
&
aListElementTagName
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
EditActionResult
MergeFirstLineOfRightBlockElementIntoAncestorLeftBlockElement
(
HTMLEditor
&
aHTMLEditor
Element
&
aLeftBlockElement
Element
&
aRightBlockElement
const
EditorDOMPoint
&
aAtLeftBlockChild
nsIContent
&
aLeftContentInBlock
const
Maybe
<
nsAtom
*
>
&
aListElementTagName
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
EditActionResult
MergeFirstLineOfRightBlockElementIntoLeftBlockElement
(
HTMLEditor
&
aHTMLEditor
Element
&
aLeftBlockElement
Element
&
aRightBlockElement
const
Maybe
<
nsAtom
*
>
&
aListElementTagName
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
RefPtr
<
Element
>
nsresult
>
InsertBRElement
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPointToInsert
)
;
template
<
typename
EditorDOMPointType
>
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
InsertText
(
HTMLEditor
&
aHTMLEditor
const
nsAString
&
aStringToInsert
const
EditorDOMPointType
&
aPointToInsert
EditorRawDOMPoint
*
aPointAfterInsertedString
=
nullptr
)
{
return
WhiteSpaceVisibilityKeeper
:
:
ReplaceText
(
aHTMLEditor
aStringToInsert
EditorDOMRange
(
aPointToInsert
)
aPointAfterInsertedString
)
;
}
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
ReplaceText
(
HTMLEditor
&
aHTMLEditor
const
nsAString
&
aStringToInsert
const
EditorDOMRange
&
aRangeToBeReplaced
EditorRawDOMPoint
*
aPointAfterInsertedString
=
nullptr
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
DeletePreviousWhiteSpace
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
DeleteInclusiveNextWhiteSpace
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
DeleteContentNodeAndJoinTextNodesAroundIt
(
HTMLEditor
&
aHTMLEditor
nsIContent
&
aContentToDelete
const
EditorDOMPoint
&
aCaretPoint
)
;
template
<
typename
EditorDOMPointType
>
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
NormalizeVisibleWhiteSpacesAt
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointType
&
aPoint
)
;
private
:
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
MakeSureToKeepVisibleStateOfWhiteSpacesAroundDeletingRange
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMRange
&
aRangeToDelete
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
MakeSureToKeepVisibleWhiteSpacesVisibleAfterSplit
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPointToSplit
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
ReplaceTextAndRemoveEmptyTextNodes
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMRangeInTexts
&
aRangeToReplace
const
nsAString
&
aReplaceString
)
;
}
;
}
#
endif
