#
ifndef
WSRunObject_h
#
define
WSRunObject_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
EditAction
.
h
"
#
include
"
mozilla
/
EditorBase
.
h
"
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
mozilla
/
HTMLEditor
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
HTMLBRElement
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIContent
.
h
"
namespace
mozilla
{
class
WSType
{
public
:
enum
Enum
{
none
=
0
leadingWS
=
1
trailingWS
=
1
<
<
1
normalWS
=
1
<
<
2
text
=
1
<
<
3
special
=
1
<
<
4
br
=
1
<
<
5
otherBlock
=
1
<
<
6
thisBlock
=
1
<
<
7
block
=
otherBlock
|
thisBlock
}
;
MOZ_IMPLICIT
WSType
(
const
Enum
&
aEnum
=
none
)
:
mEnum
(
aEnum
)
{
}
friend
bool
operator
=
=
(
const
WSType
&
aLeft
const
WSType
&
aRight
)
;
friend
const
WSType
operator
&
(
const
WSType
&
aLeft
const
WSType
&
aRight
)
;
friend
const
WSType
operator
|
(
const
WSType
&
aLeft
const
WSType
&
aRight
)
;
WSType
&
operator
=
(
const
WSType
&
aOther
)
{
mEnum
=
aOther
.
mEnum
;
return
*
this
;
}
WSType
&
operator
&
=
(
const
WSType
&
aOther
)
{
mEnum
&
=
aOther
.
mEnum
;
return
*
this
;
}
WSType
&
operator
|
=
(
const
WSType
&
aOther
)
{
mEnum
|
=
aOther
.
mEnum
;
return
*
this
;
}
private
:
uint16_t
mEnum
;
void
bool_conversion_helper
(
)
{
}
public
:
typedef
void
(
WSType
:
:
*
bool_type
)
(
)
;
operator
bool_type
(
)
const
{
return
mEnum
?
&
WSType
:
:
bool_conversion_helper
:
nullptr
;
}
}
;
inline
bool
operator
=
=
(
const
WSType
&
aLeft
const
WSType
&
aRight
)
{
return
aLeft
.
mEnum
=
=
aRight
.
mEnum
;
}
inline
bool
operator
!
=
(
const
WSType
&
aLeft
const
WSType
&
aRight
)
{
return
!
(
aLeft
=
=
aRight
)
;
}
inline
const
WSType
operator
&
(
const
WSType
&
aLeft
const
WSType
&
aRight
)
{
WSType
ret
;
ret
.
mEnum
=
aLeft
.
mEnum
&
aRight
.
mEnum
;
return
ret
;
}
inline
const
WSType
operator
|
(
const
WSType
&
aLeft
const
WSType
&
aRight
)
{
WSType
ret
;
ret
.
mEnum
=
aLeft
.
mEnum
|
aRight
.
mEnum
;
return
ret
;
}
inline
const
WSType
operator
&
(
const
WSType
:
:
Enum
&
aLeft
const
WSType
:
:
Enum
&
aRight
)
{
return
WSType
(
aLeft
)
&
WSType
(
aRight
)
;
}
inline
const
WSType
operator
|
(
const
WSType
:
:
Enum
&
aLeft
const
WSType
:
:
Enum
&
aRight
)
{
return
WSType
(
aLeft
)
|
WSType
(
aRight
)
;
}
class
MOZ_STACK_CLASS
WSScanResult
final
{
public
:
WSScanResult
(
)
=
delete
;
MOZ_NEVER_INLINE_DEBUG
WSScanResult
(
nsIContent
*
aContent
WSType
aReason
)
:
mContent
(
aContent
)
mReason
(
aReason
)
{
AssertIfInvalidData
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
WSScanResult
(
const
EditorDOMPoint
&
aPoint
WSType
aReason
)
:
mContent
(
aPoint
.
GetContainerAsContent
(
)
)
mOffset
(
Some
(
aPoint
.
Offset
(
)
)
)
mReason
(
aReason
)
{
AssertIfInvalidData
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
void
AssertIfInvalidData
(
)
const
{
#
ifdef
DEBUG
MOZ_ASSERT
(
mReason
=
=
WSType
:
:
text
|
|
mReason
=
=
WSType
:
:
normalWS
|
|
mReason
=
=
WSType
:
:
br
|
|
mReason
=
=
WSType
:
:
special
|
|
mReason
=
=
WSType
:
:
thisBlock
|
|
mReason
=
=
WSType
:
:
otherBlock
)
;
MOZ_ASSERT_IF
(
mReason
=
=
WSType
:
:
text
|
|
mReason
=
=
WSType
:
:
normalWS
mContent
&
&
mContent
-
>
IsText
(
)
)
;
MOZ_ASSERT_IF
(
mReason
=
=
WSType
:
:
br
mContent
&
&
mContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
)
;
MOZ_ASSERT_IF
(
mReason
=
=
WSType
:
:
special
mContent
&
&
(
(
mContent
-
>
IsText
(
)
&
&
!
mContent
-
>
IsEditable
(
)
)
|
|
(
!
mContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
&
&
!
HTMLEditor
:
:
NodeIsBlockStatic
(
*
mContent
)
)
)
)
;
MOZ_ASSERT_IF
(
mReason
=
=
WSType
:
:
otherBlock
mContent
&
&
HTMLEditor
:
:
NodeIsBlockStatic
(
*
mContent
)
)
;
MOZ_ASSERT_IF
(
mReason
=
=
WSType
:
:
thisBlock
!
mContent
|
|
!
mContent
-
>
GetParentElement
(
)
|
|
HTMLEditor
:
:
NodeIsBlockStatic
(
*
mContent
)
|
|
HTMLEditor
:
:
NodeIsBlockStatic
(
*
mContent
-
>
GetParentElement
(
)
)
|
|
!
mContent
-
>
GetParentElement
(
)
-
>
IsEditable
(
)
)
;
#
endif
}
nsIContent
*
GetContent
(
)
const
{
return
mContent
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
Element
*
ElementPtr
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
mContent
-
>
IsElement
(
)
)
;
return
mContent
-
>
AsElement
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
HTMLBRElement
*
BRElementPtr
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
mContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
)
;
return
static_cast
<
dom
:
:
HTMLBRElement
*
>
(
mContent
.
get
(
)
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
Text
*
TextPtr
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
mContent
-
>
IsText
(
)
)
;
return
mContent
-
>
AsText
(
)
;
}
bool
IsContentEditable
(
)
const
{
return
mContent
&
&
mContent
-
>
IsEditable
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
uint32_t
Offset
(
)
const
{
NS_ASSERTION
(
mOffset
.
isSome
(
)
"
Retrieved
non
-
meaningful
offset
"
)
;
return
mOffset
.
valueOr
(
0
)
;
}
MOZ_NEVER_INLINE_DEBUG
EditorDOMPoint
Point
(
)
const
{
NS_ASSERTION
(
mOffset
.
isSome
(
)
"
Retrieved
non
-
meaningful
point
"
)
;
return
EditorDOMPoint
(
mContent
mOffset
.
valueOr
(
0
)
)
;
}
MOZ_NEVER_INLINE_DEBUG
EditorRawDOMPoint
RawPoint
(
)
const
{
NS_ASSERTION
(
mOffset
.
isSome
(
)
"
Retrieved
non
-
meaningful
raw
point
"
)
;
return
EditorRawDOMPoint
(
mContent
mOffset
.
valueOr
(
0
)
)
;
}
MOZ_NEVER_INLINE_DEBUG
EditorDOMPoint
PointAtContent
(
)
const
{
MOZ_ASSERT
(
mContent
)
;
return
EditorDOMPoint
(
mContent
)
;
}
MOZ_NEVER_INLINE_DEBUG
EditorRawDOMPoint
RawPointAtContent
(
)
const
{
MOZ_ASSERT
(
mContent
)
;
return
EditorRawDOMPoint
(
mContent
)
;
}
MOZ_NEVER_INLINE_DEBUG
EditorDOMPoint
PointAfterContent
(
)
const
{
MOZ_ASSERT
(
mContent
)
;
return
mContent
?
EditorDOMPoint
:
:
After
(
mContent
)
:
EditorDOMPoint
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
EditorRawDOMPoint
RawPointAfterContent
(
)
const
{
MOZ_ASSERT
(
mContent
)
;
return
mContent
?
EditorRawDOMPoint
:
:
After
(
mContent
)
:
EditorRawDOMPoint
(
)
;
}
bool
ReachedSpecialContent
(
)
const
{
return
mReason
=
=
WSType
:
:
special
;
}
bool
InNormalWhiteSpacesOrText
(
)
const
{
return
mReason
=
=
WSType
:
:
normalWS
|
|
mReason
=
=
WSType
:
:
text
;
}
bool
InNormalWhiteSpaces
(
)
const
{
return
mReason
=
=
WSType
:
:
normalWS
;
}
bool
InNormalText
(
)
const
{
return
mReason
=
=
WSType
:
:
text
;
}
bool
ReachedBRElement
(
)
const
{
return
mReason
=
=
WSType
:
:
br
;
}
bool
ReachedHRElement
(
)
const
{
return
mContent
&
&
mContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
hr
)
;
}
bool
ReachedBlockBoundary
(
)
const
{
return
!
!
(
mReason
&
WSType
:
:
block
)
;
}
bool
ReachedCurrentBlockBoundary
(
)
const
{
return
mReason
=
=
WSType
:
:
thisBlock
;
}
bool
ReachedOtherBlockElement
(
)
const
{
return
mReason
=
=
WSType
:
:
otherBlock
;
}
bool
ReachedSomething
(
)
const
{
return
!
InNormalWhiteSpacesOrText
(
)
;
}
private
:
nsCOMPtr
<
nsIContent
>
mContent
;
Maybe
<
uint32_t
>
mOffset
;
WSType
mReason
;
}
;
class
MOZ_STACK_CLASS
WSRunScanner
{
public
:
template
<
typename
PT
typename
CT
>
WSRunScanner
(
const
HTMLEditor
*
aHTMLEditor
const
EditorDOMPointBase
<
PT
CT
>
&
aScanStartPoint
const
EditorDOMPointBase
<
PT
CT
>
&
aScanEndPoint
)
;
template
<
typename
PT
typename
CT
>
WSRunScanner
(
const
HTMLEditor
*
aHTMLEditor
const
EditorDOMPointBase
<
PT
CT
>
&
aScanStartPoint
)
:
WSRunScanner
(
aHTMLEditor
aScanStartPoint
aScanStartPoint
)
{
}
WSRunScanner
(
const
HTMLEditor
*
aHTMLEditor
nsINode
*
aScanStartNode
int32_t
aScanStartOffset
nsINode
*
aScanEndNode
int32_t
aScanEndOffset
)
:
WSRunScanner
(
aHTMLEditor
EditorRawDOMPoint
(
aScanStartNode
aScanStartOffset
)
EditorRawDOMPoint
(
aScanEndNode
aScanEndOffset
)
)
{
}
WSRunScanner
(
const
HTMLEditor
*
aHTMLEditor
nsINode
*
aScanStartNode
int32_t
aScanStartOffset
)
:
WSRunScanner
(
aHTMLEditor
EditorRawDOMPoint
(
aScanStartNode
aScanStartOffset
)
EditorRawDOMPoint
(
aScanStartNode
aScanStartOffset
)
)
{
}
~
WSRunScanner
(
)
;
template
<
typename
PT
typename
CT
>
WSScanResult
ScanNextVisibleNodeOrBlockBoundaryFrom
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
;
template
<
typename
PT
typename
CT
>
static
WSScanResult
ScanNextVisibleNodeOrBlockBoundary
(
const
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
{
return
WSRunScanner
(
&
aHTMLEditor
aPoint
)
.
ScanNextVisibleNodeOrBlockBoundaryFrom
(
aPoint
)
;
}
template
<
typename
PT
typename
CT
>
WSScanResult
ScanPreviousVisibleNodeOrBlockBoundaryFrom
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
;
template
<
typename
PT
typename
CT
>
static
WSScanResult
ScanPreviousVisibleNodeOrBlockBoundary
(
const
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
{
return
WSRunScanner
(
&
aHTMLEditor
aPoint
)
.
ScanPreviousVisibleNodeOrBlockBoundaryFrom
(
aPoint
)
;
}
nsIContent
*
GetStartReasonContent
(
)
const
{
return
mStartReasonContent
;
}
nsIContent
*
GetEndReasonContent
(
)
const
{
return
mEndReasonContent
;
}
bool
StartsFromNormalText
(
)
const
{
return
mStartReason
=
=
WSType
:
:
text
;
}
bool
StartsFromSpecialContent
(
)
const
{
return
mStartReason
=
=
WSType
:
:
special
;
}
bool
StartsFromBRElement
(
)
const
{
return
mStartReason
=
=
WSType
:
:
br
;
}
bool
StartsFromCurrentBlockBoundary
(
)
const
{
return
mStartReason
=
=
WSType
:
:
thisBlock
;
}
bool
StartsFromOtherBlockElement
(
)
const
{
return
mStartReason
=
=
WSType
:
:
otherBlock
;
}
bool
StartsFromBlockBoundary
(
)
const
{
return
!
!
(
mStartReason
&
WSType
:
:
block
)
;
}
bool
StartsFromHardLineBreak
(
)
const
{
return
!
!
(
mStartReason
&
(
WSType
:
:
block
|
WSType
:
:
br
)
)
;
}
bool
EndsByNormalText
(
)
const
{
return
mEndReason
=
=
WSType
:
:
text
;
}
bool
EndsBySpecialContent
(
)
const
{
return
mEndReason
=
=
WSType
:
:
special
;
}
bool
EndsByBRElement
(
)
const
{
return
mEndReason
=
=
WSType
:
:
br
;
}
bool
EndsByCurrentBlockBoundary
(
)
const
{
return
mEndReason
=
=
WSType
:
:
thisBlock
;
}
bool
EndsByOtherBlockElement
(
)
const
{
return
mEndReason
=
=
WSType
:
:
otherBlock
;
}
bool
EndsByBlockBoundary
(
)
const
{
return
!
!
(
mEndReason
&
WSType
:
:
block
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
Element
*
StartReasonOtherBlockElementPtr
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
mStartReasonContent
-
>
IsElement
(
)
)
;
return
mStartReasonContent
-
>
AsElement
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
HTMLBRElement
*
StartReasonBRElementPtr
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
mStartReasonContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
)
;
return
static_cast
<
dom
:
:
HTMLBRElement
*
>
(
mStartReasonContent
.
get
(
)
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
Element
*
EndReasonOtherBlockElementPtr
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
mEndReasonContent
-
>
IsElement
(
)
)
;
return
mEndReasonContent
-
>
AsElement
(
)
;
}
MOZ_NEVER_INLINE_DEBUG
dom
:
:
HTMLBRElement
*
EndReasonBRElementPtr
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
mEndReasonContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
)
;
return
static_cast
<
dom
:
:
HTMLBRElement
*
>
(
mEndReasonContent
.
get
(
)
)
;
}
Element
*
GetEditingHost
(
)
const
{
return
mEditingHost
;
}
protected
:
struct
WSFragment
final
{
nsCOMPtr
<
nsINode
>
mStartNode
;
nsCOMPtr
<
nsINode
>
mEndNode
;
int32_t
mStartOffset
;
int32_t
mEndOffset
;
WSType
mType
;
WSFragment
*
mLeft
*
mRight
;
WSFragment
(
)
:
mStartOffset
(
0
)
mEndOffset
(
0
)
mLeft
(
nullptr
)
mRight
(
nullptr
)
{
}
EditorRawDOMPoint
StartPoint
(
)
const
{
return
EditorRawDOMPoint
(
mStartNode
mStartOffset
)
;
}
EditorRawDOMPoint
EndPoint
(
)
const
{
return
EditorRawDOMPoint
(
mEndNode
mEndOffset
)
;
}
void
SetStartFrom
(
WSType
aLeftWSType
)
{
mLeftWSType
=
aLeftWSType
;
}
void
SetStartFromLeadingWhiteSpaces
(
)
{
mLeftWSType
=
WSType
:
:
leadingWS
;
}
void
SetStartFromNormalWhiteSpaces
(
)
{
mLeftWSType
=
WSType
:
:
normalWS
;
}
bool
StartsFromNormalText
(
)
const
{
return
mLeftWSType
=
=
WSType
:
:
text
;
}
bool
StartsFromSpecialContent
(
)
const
{
return
mLeftWSType
=
=
WSType
:
:
special
;
}
void
SetEndBy
(
WSType
aRightWSType
)
{
mRightWSType
=
aRightWSType
;
}
void
SetEndByNormalWiteSpaces
(
)
{
mRightWSType
=
WSType
:
:
normalWS
;
}
void
SetEndByTrailingWhiteSpaces
(
)
{
mRightWSType
=
WSType
:
:
trailingWS
;
}
bool
EndsByNormalText
(
)
const
{
return
mRightWSType
=
=
WSType
:
:
text
;
}
bool
EndsBySpecialContent
(
)
const
{
return
mRightWSType
=
=
WSType
:
:
special
;
}
bool
EndsByBRElement
(
)
const
{
return
mRightWSType
=
=
WSType
:
:
br
;
}
bool
EndsByBlockBoundary
(
)
const
{
return
!
!
(
mRightWSType
&
WSType
:
:
block
)
;
}
private
:
WSType
mLeftWSType
mRightWSType
;
}
;
template
<
typename
PT
typename
CT
>
WSFragment
*
FindNearestRun
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
bool
aForward
)
const
;
template
<
typename
PT
typename
CT
>
EditorDOMPointInText
GetNextCharPoint
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
;
EditorDOMPointInText
GetNextCharPointFromPointInText
(
const
EditorDOMPointInText
&
aPoint
)
const
;
template
<
typename
PT
typename
CT
>
EditorDOMPointInText
LookForNextCharPointWithinAllTextNodes
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
;
template
<
typename
PT
typename
CT
>
EditorDOMPointInText
LookForPreviousCharPointWithinAllTextNodes
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
;
nsresult
GetWSNodes
(
)
;
nsIContent
*
GetEditableBlockParentOrTopmotEditableInlineContent
(
nsIContent
*
aContent
)
const
;
static
bool
IsBlockNode
(
nsINode
*
aNode
)
{
return
aNode
&
&
aNode
-
>
IsElement
(
)
&
&
HTMLEditor
:
:
NodeIsBlockStatic
(
*
aNode
)
;
}
nsIContent
*
GetPreviousWSNodeInner
(
nsINode
*
aStartNode
nsINode
*
aBlockParent
)
const
;
nsIContent
*
GetPreviousWSNode
(
const
EditorDOMPoint
&
aPoint
nsINode
*
aBlockParent
)
const
;
nsIContent
*
GetNextWSNodeInner
(
nsINode
*
aStartNode
nsINode
*
aBlockParent
)
const
;
nsIContent
*
GetNextWSNode
(
const
EditorDOMPoint
&
aPoint
nsINode
*
aBlockParent
)
const
;
template
<
typename
PT
typename
CT
>
EditorDOMPointInText
GetPreviousCharPoint
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
;
EditorDOMPointInText
GetPreviousCharPointFromPointInText
(
const
EditorDOMPointInText
&
aPoint
)
const
;
char16_t
GetCharAt
(
dom
:
:
Text
*
aTextNode
int32_t
aOffset
)
const
;
void
GetRuns
(
)
;
void
ClearRuns
(
)
;
void
MakeSingleWSRun
(
WSType
aType
)
;
nsTArray
<
RefPtr
<
dom
:
:
Text
>
>
mNodeArray
;
EditorDOMPoint
mScanStartPoint
;
EditorDOMPoint
mScanEndPoint
;
RefPtr
<
Element
>
mEditingHost
;
bool
mPRE
;
nsCOMPtr
<
nsINode
>
mStartNode
;
int32_t
mStartOffset
;
nsCOMPtr
<
nsINode
>
mEndNode
;
int32_t
mEndOffset
;
RefPtr
<
dom
:
:
Text
>
mFirstNBSPNode
;
int32_t
mFirstNBSPOffset
;
RefPtr
<
dom
:
:
Text
>
mLastNBSPNode
;
int32_t
mLastNBSPOffset
;
WSFragment
*
mStartRun
;
WSFragment
*
mEndRun
;
nsCOMPtr
<
nsIContent
>
mStartReasonContent
;
nsCOMPtr
<
nsIContent
>
mEndReasonContent
;
const
HTMLEditor
*
mHTMLEditor
;
private
:
WSType
mStartReason
;
WSType
mEndReason
;
}
;
class
MOZ_STACK_CLASS
WSRunObject
final
:
public
WSRunScanner
{
protected
:
typedef
EditorBase
:
:
AutoTransactionsConserveSelection
AutoTransactionsConserveSelection
;
public
:
enum
BlockBoundary
{
kBeforeBlock
kBlockStart
kBlockEnd
kAfterBlock
}
;
enum
{
eBefore
=
1
}
;
enum
{
eAfter
=
1
<
<
1
}
;
enum
{
eBoth
=
eBefore
|
eAfter
}
;
template
<
typename
PT
typename
CT
>
MOZ_CAN_RUN_SCRIPT
WSRunObject
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointBase
<
PT
CT
>
&
aScanStartPoint
const
EditorDOMPointBase
<
PT
CT
>
&
aScanEndPoint
)
;
template
<
typename
PT
typename
CT
>
MOZ_CAN_RUN_SCRIPT
WSRunObject
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPointBase
<
PT
CT
>
&
aScanStartPoint
)
:
WSRunObject
(
aHTMLEditor
aScanStartPoint
aScanStartPoint
)
{
}
MOZ_CAN_RUN_SCRIPT
WSRunObject
(
HTMLEditor
&
aHTMLEditor
nsINode
*
aScanStartNode
int32_t
aScanStartOffset
nsINode
*
aScanEndNode
int32_t
aScanEndOffset
)
:
WSRunObject
(
aHTMLEditor
EditorRawDOMPoint
(
aScanStartNode
aScanStartOffset
)
EditorRawDOMPoint
(
aScanEndNode
aScanEndOffset
)
)
{
}
MOZ_CAN_RUN_SCRIPT
WSRunObject
(
HTMLEditor
&
aHTMLEditor
nsINode
*
aScanStartNode
int32_t
aScanStartOffset
)
:
WSRunObject
(
aHTMLEditor
EditorRawDOMPoint
(
aScanStartNode
aScanStartOffset
)
EditorRawDOMPoint
(
aScanStartNode
aScanStartOffset
)
)
{
}
MOZ_CAN_RUN_SCRIPT
MOZ_MUST_USE
static
nsresult
Scrub
(
HTMLEditor
&
aHTMLEditor
const
EditorDOMPoint
&
aPoint
)
;
MOZ_CAN_RUN_SCRIPT
MOZ_MUST_USE
static
nsresult
PrepareToJoinBlocks
(
HTMLEditor
&
aHTMLEditor
dom
:
:
Element
&
aLeftBlockElement
dom
:
:
Element
&
aRightBlockElement
)
;
MOZ_CAN_RUN_SCRIPT
static
nsresult
PrepareToDeleteRange
(
HTMLEditor
&
aHTMLEditor
EditorDOMPoint
*
aStartPoint
EditorDOMPoint
*
aEndPoint
)
;
MOZ_CAN_RUN_SCRIPT
static
nsresult
PrepareToDeleteNode
(
HTMLEditor
&
aHTMLEditor
nsIContent
*
aContent
)
;
MOZ_CAN_RUN_SCRIPT
static
nsresult
PrepareToSplitAcrossBlocks
(
HTMLEditor
&
aHTMLEditor
nsCOMPtr
<
nsINode
>
*
aSplitNode
int32_t
*
aSplitOffset
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
dom
:
:
Element
>
InsertBreak
(
Selection
&
aSelection
const
EditorDOMPoint
&
aPointToInsert
nsIEditor
:
:
EDirection
aSelect
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertText
(
dom
:
:
Document
&
aDocument
const
nsAString
&
aStringToInsert
EditorRawDOMPoint
*
aPointAfterInsertedString
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteWSBackward
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteWSForward
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
AdjustWhitespace
(
)
;
protected
:
MOZ_CAN_RUN_SCRIPT
nsresult
PrepareToDeleteRangePriv
(
WSRunObject
*
aEndObject
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
PrepareToSplitAcrossBlocksPriv
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteRange
(
const
EditorDOMPoint
&
aStartPoint
const
EditorDOMPoint
&
aEndPoint
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertNBSPAndRemoveFollowingASCIIWhitespaces
(
const
EditorDOMPointInText
&
aPoint
)
;
template
<
typename
PT
typename
CT
>
Tuple
<
EditorDOMPointInText
EditorDOMPointInText
>
GetASCIIWhitespacesBounds
(
int16_t
aDir
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
;
MOZ_CAN_RUN_SCRIPT
nsresult
CheckTrailingNBSPOfRun
(
WSFragment
*
aRun
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
ReplacePreviousNBSPIfUnnecessary
(
WSFragment
*
aRun
const
EditorDOMPoint
&
aPoint
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
CheckLeadingNBSP
(
WSFragment
*
aRun
nsINode
*
aNode
int32_t
aOffset
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
Scrub
(
)
;
EditorDOMPoint
StartPoint
(
)
const
{
return
EditorDOMPoint
(
mStartNode
mStartOffset
)
;
}
EditorDOMPoint
EndPoint
(
)
const
{
return
EditorDOMPoint
(
mEndNode
mEndOffset
)
;
}
HTMLEditor
&
mHTMLEditor
;
}
;
}
#
endif
