#
ifndef
WSRunObject_h
#
define
WSRunObject_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIEditor
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nscore
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
class
nsIDOMNode
;
namespace
mozilla
{
class
HTMLEditor
;
class
HTMLEditRules
;
class
WSType
{
public
:
enum
Enum
{
none
=
0
leadingWS
=
1
trailingWS
=
1
<
<
1
normalWS
=
1
<
<
2
text
=
1
<
<
3
special
=
1
<
<
4
br
=
1
<
<
5
otherBlock
=
1
<
<
6
thisBlock
=
1
<
<
7
block
=
otherBlock
|
thisBlock
}
;
MOZ_IMPLICIT
WSType
(
const
Enum
&
aEnum
=
none
)
:
mEnum
(
aEnum
)
{
}
friend
bool
operator
=
=
(
const
WSType
&
aLeft
const
WSType
&
aRight
)
;
friend
const
WSType
operator
&
(
const
WSType
&
aLeft
const
WSType
&
aRight
)
;
friend
const
WSType
operator
|
(
const
WSType
&
aLeft
const
WSType
&
aRight
)
;
WSType
&
operator
=
(
const
WSType
&
aOther
)
{
mEnum
=
aOther
.
mEnum
;
return
*
this
;
}
WSType
&
operator
&
=
(
const
WSType
&
aOther
)
{
mEnum
&
=
aOther
.
mEnum
;
return
*
this
;
}
WSType
&
operator
|
=
(
const
WSType
&
aOther
)
{
mEnum
|
=
aOther
.
mEnum
;
return
*
this
;
}
private
:
uint16_t
mEnum
;
void
bool_conversion_helper
(
)
{
}
public
:
typedef
void
(
WSType
:
:
*
bool_type
)
(
)
;
operator
bool_type
(
)
const
{
return
mEnum
?
&
WSType
:
:
bool_conversion_helper
:
nullptr
;
}
}
;
inline
bool
operator
=
=
(
const
WSType
&
aLeft
const
WSType
&
aRight
)
{
return
aLeft
.
mEnum
=
=
aRight
.
mEnum
;
}
inline
bool
operator
!
=
(
const
WSType
&
aLeft
const
WSType
&
aRight
)
{
return
!
(
aLeft
=
=
aRight
)
;
}
inline
const
WSType
operator
&
(
const
WSType
&
aLeft
const
WSType
&
aRight
)
{
WSType
ret
;
ret
.
mEnum
=
aLeft
.
mEnum
&
aRight
.
mEnum
;
return
ret
;
}
inline
const
WSType
operator
|
(
const
WSType
&
aLeft
const
WSType
&
aRight
)
{
WSType
ret
;
ret
.
mEnum
=
aLeft
.
mEnum
|
aRight
.
mEnum
;
return
ret
;
}
inline
const
WSType
operator
&
(
const
WSType
:
:
Enum
&
aLeft
const
WSType
:
:
Enum
&
aRight
)
{
return
WSType
(
aLeft
)
&
WSType
(
aRight
)
;
}
inline
const
WSType
operator
|
(
const
WSType
:
:
Enum
&
aLeft
const
WSType
:
:
Enum
&
aRight
)
{
return
WSType
(
aLeft
)
|
WSType
(
aRight
)
;
}
class
MOZ_STACK_CLASS
WSRunObject
final
{
public
:
enum
BlockBoundary
{
kBeforeBlock
kBlockStart
kBlockEnd
kAfterBlock
}
;
enum
{
eBefore
=
1
}
;
enum
{
eAfter
=
1
<
<
1
}
;
enum
{
eBoth
=
eBefore
|
eAfter
}
;
WSRunObject
(
HTMLEditor
*
aHTMLEditor
nsINode
*
aNode
int32_t
aOffset
)
;
WSRunObject
(
HTMLEditor
*
aHTMLEditor
nsIDOMNode
*
aNode
int32_t
aOffset
)
;
~
WSRunObject
(
)
;
static
nsresult
ScrubBlockBoundary
(
HTMLEditor
*
aHTMLEditor
BlockBoundary
aBoundary
nsINode
*
aBlock
int32_t
aOffset
=
-
1
)
;
static
nsresult
PrepareToJoinBlocks
(
HTMLEditor
*
aHTMLEditor
dom
:
:
Element
*
aLeftBlock
dom
:
:
Element
*
aRightBlock
)
;
static
nsresult
PrepareToDeleteRange
(
HTMLEditor
*
aHTMLEditor
nsCOMPtr
<
nsINode
>
*
aStartNode
int32_t
*
aStartOffset
nsCOMPtr
<
nsINode
>
*
aEndNode
int32_t
*
aEndOffset
)
;
static
nsresult
PrepareToDeleteNode
(
HTMLEditor
*
aHTMLEditor
nsIContent
*
aContent
)
;
static
nsresult
PrepareToSplitAcrossBlocks
(
HTMLEditor
*
aHTMLEditor
nsCOMPtr
<
nsINode
>
*
aSplitNode
int32_t
*
aSplitOffset
)
;
already_AddRefed
<
dom
:
:
Element
>
InsertBreak
(
Selection
&
aSelection
const
EditorRawDOMPoint
&
aPointToInsert
nsIEditor
:
:
EDirection
aSelect
)
;
nsresult
InsertText
(
nsIDocument
&
aDocument
const
nsAString
&
aStringToInsert
const
EditorRawDOMPoint
&
aPointToInsert
EditorRawDOMPoint
*
aPointAfterInsertedString
=
nullptr
)
;
nsresult
DeleteWSBackward
(
)
;
nsresult
DeleteWSForward
(
)
;
void
PriorVisibleNode
(
nsINode
*
aNode
int32_t
aOffset
nsCOMPtr
<
nsINode
>
*
outVisNode
int32_t
*
outVisOffset
WSType
*
outType
)
;
void
NextVisibleNode
(
nsINode
*
aNode
int32_t
aOffset
nsCOMPtr
<
nsINode
>
*
outVisNode
int32_t
*
outVisOffset
WSType
*
outType
)
;
nsresult
AdjustWhitespace
(
)
;
protected
:
struct
WSFragment
final
{
nsCOMPtr
<
nsINode
>
mStartNode
;
nsCOMPtr
<
nsINode
>
mEndNode
;
int32_t
mStartOffset
;
int32_t
mEndOffset
;
WSType
mType
mLeftType
mRightType
;
WSFragment
*
mLeft
*
mRight
;
WSFragment
(
)
:
mStartOffset
(
0
)
mEndOffset
(
0
)
mLeft
(
nullptr
)
mRight
(
nullptr
)
{
}
EditorRawDOMPoint
StartPoint
(
)
const
{
return
EditorRawDOMPoint
(
mStartNode
mStartOffset
)
;
}
EditorRawDOMPoint
EndPoint
(
)
const
{
return
EditorRawDOMPoint
(
mEndNode
mEndOffset
)
;
}
}
;
struct
MOZ_STACK_CLASS
WSPoint
final
{
RefPtr
<
dom
:
:
Text
>
mTextNode
;
uint32_t
mOffset
;
char16_t
mChar
;
WSPoint
(
)
:
mTextNode
(
nullptr
)
mOffset
(
0
)
mChar
(
0
)
{
}
WSPoint
(
dom
:
:
Text
*
aTextNode
int32_t
aOffset
char16_t
aChar
)
:
mTextNode
(
aTextNode
)
mOffset
(
aOffset
)
mChar
(
aChar
)
{
}
}
;
nsINode
*
GetWSBoundingParent
(
)
;
nsresult
GetWSNodes
(
)
;
void
GetRuns
(
)
;
void
ClearRuns
(
)
;
void
MakeSingleWSRun
(
WSType
aType
)
;
nsIContent
*
GetPreviousWSNodeInner
(
nsINode
*
aStartNode
nsINode
*
aBlockParent
)
;
nsIContent
*
GetPreviousWSNode
(
const
EditorDOMPoint
&
aPoint
nsINode
*
aBlockParent
)
;
nsIContent
*
GetNextWSNodeInner
(
nsINode
*
aStartNode
nsINode
*
aBlockParent
)
;
nsIContent
*
GetNextWSNode
(
const
EditorDOMPoint
&
aPoint
nsINode
*
aBlockParent
)
;
nsresult
PrepareToDeleteRangePriv
(
WSRunObject
*
aEndObject
)
;
nsresult
PrepareToSplitAcrossBlocksPriv
(
)
;
nsresult
DeleteRange
(
const
EditorRawDOMPoint
&
aStartPoint
const
EditorRawDOMPoint
&
aEndPoint
)
;
WSPoint
GetCharAfter
(
nsINode
*
aNode
int32_t
aOffset
)
;
WSPoint
GetCharBefore
(
nsINode
*
aNode
int32_t
aOffset
)
;
WSPoint
GetCharAfter
(
const
WSPoint
&
aPoint
)
;
WSPoint
GetCharBefore
(
const
WSPoint
&
aPoint
)
;
nsresult
ConvertToNBSP
(
WSPoint
aPoint
)
;
void
GetAsciiWSBounds
(
int16_t
aDir
nsINode
*
aNode
int32_t
aOffset
dom
:
:
Text
*
*
outStartNode
int32_t
*
outStartOffset
dom
:
:
Text
*
*
outEndNode
int32_t
*
outEndOffset
)
;
WSFragment
*
FindNearestRun
(
const
EditorRawDOMPoint
&
aPoint
bool
aForward
)
;
char16_t
GetCharAt
(
dom
:
:
Text
*
aTextNode
int32_t
aOffset
)
;
WSPoint
GetWSPointAfter
(
nsINode
*
aNode
int32_t
aOffset
)
;
WSPoint
GetWSPointBefore
(
nsINode
*
aNode
int32_t
aOffset
)
;
nsresult
CheckTrailingNBSPOfRun
(
WSFragment
*
aRun
)
;
nsresult
CheckTrailingNBSP
(
WSFragment
*
aRun
nsINode
*
aNode
int32_t
aOffset
)
;
nsresult
CheckLeadingNBSP
(
WSFragment
*
aRun
nsINode
*
aNode
int32_t
aOffset
)
;
nsresult
Scrub
(
)
;
bool
IsBlockNode
(
nsINode
*
aNode
)
;
EditorRawDOMPoint
Point
(
)
const
{
return
EditorRawDOMPoint
(
mNode
mOffset
)
;
}
EditorRawDOMPoint
StartPoint
(
)
const
{
return
EditorRawDOMPoint
(
mStartNode
mStartOffset
)
;
}
EditorRawDOMPoint
EndPoint
(
)
const
{
return
EditorRawDOMPoint
(
mEndNode
mEndOffset
)
;
}
nsCOMPtr
<
nsINode
>
mNode
;
int32_t
mOffset
;
bool
mPRE
;
nsCOMPtr
<
nsINode
>
mStartNode
;
int32_t
mStartOffset
;
WSType
mStartReason
;
nsCOMPtr
<
nsINode
>
mStartReasonNode
;
nsCOMPtr
<
nsINode
>
mEndNode
;
int32_t
mEndOffset
;
WSType
mEndReason
;
nsCOMPtr
<
nsINode
>
mEndReasonNode
;
RefPtr
<
dom
:
:
Text
>
mFirstNBSPNode
;
int32_t
mFirstNBSPOffset
;
RefPtr
<
dom
:
:
Text
>
mLastNBSPNode
;
int32_t
mLastNBSPOffset
;
nsTArray
<
RefPtr
<
dom
:
:
Text
>
>
mNodeArray
;
WSFragment
*
mStartRun
;
WSFragment
*
mEndRun
;
HTMLEditor
*
mHTMLEditor
;
friend
class
HTMLEditRules
;
friend
class
HTMLEditor
;
}
;
}
#
endif
