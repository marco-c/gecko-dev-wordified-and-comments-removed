#
include
"
EditAggregateTransaction
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsISupportsUtils
.
h
"
#
include
"
nsITransaction
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
EditAggregateTransaction
:
:
EditAggregateTransaction
(
)
{
}
EditAggregateTransaction
:
:
~
EditAggregateTransaction
(
)
{
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
EditAggregateTransaction
EditTxn
mChildren
)
NS_IMPL_ADDREF_INHERITED
(
EditAggregateTransaction
EditTxn
)
NS_IMPL_RELEASE_INHERITED
(
EditAggregateTransaction
EditTxn
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
EditAggregateTransaction
)
NS_INTERFACE_MAP_END_INHERITING
(
EditTxn
)
NS_IMETHODIMP
EditAggregateTransaction
:
:
DoTransaction
(
)
{
nsresult
result
=
NS_OK
;
for
(
uint32_t
i
=
0
length
=
mChildren
.
Length
(
)
;
i
<
length
;
+
+
i
)
{
nsITransaction
*
txn
=
mChildren
[
i
]
;
if
(
!
txn
)
{
return
NS_ERROR_NULL_POINTER
;
}
result
=
txn
-
>
DoTransaction
(
)
;
if
(
NS_FAILED
(
result
)
)
break
;
}
return
result
;
}
NS_IMETHODIMP
EditAggregateTransaction
:
:
UndoTransaction
(
)
{
nsresult
result
=
NS_OK
;
for
(
uint32_t
i
=
mChildren
.
Length
(
)
;
i
-
-
!
=
0
;
)
{
nsITransaction
*
txn
=
mChildren
[
i
]
;
if
(
!
txn
)
{
return
NS_ERROR_NULL_POINTER
;
}
result
=
txn
-
>
UndoTransaction
(
)
;
if
(
NS_FAILED
(
result
)
)
break
;
}
return
result
;
}
NS_IMETHODIMP
EditAggregateTransaction
:
:
RedoTransaction
(
)
{
nsresult
result
=
NS_OK
;
for
(
uint32_t
i
=
0
length
=
mChildren
.
Length
(
)
;
i
<
length
;
+
+
i
)
{
nsITransaction
*
txn
=
mChildren
[
i
]
;
if
(
!
txn
)
{
return
NS_ERROR_NULL_POINTER
;
}
result
=
txn
-
>
RedoTransaction
(
)
;
if
(
NS_FAILED
(
result
)
)
break
;
}
return
result
;
}
NS_IMETHODIMP
EditAggregateTransaction
:
:
Merge
(
nsITransaction
*
aTransaction
bool
*
aDidMerge
)
{
nsresult
result
=
NS_OK
;
if
(
aDidMerge
)
*
aDidMerge
=
false
;
if
(
mChildren
.
Length
(
)
>
0
)
{
nsITransaction
*
txn
=
mChildren
[
0
]
;
if
(
!
txn
)
{
return
NS_ERROR_NULL_POINTER
;
}
result
=
txn
-
>
Merge
(
aTransaction
aDidMerge
)
;
}
return
result
;
}
NS_IMETHODIMP
EditAggregateTransaction
:
:
GetTxnDescription
(
nsAString
&
aString
)
{
aString
.
AssignLiteral
(
"
EditAggregateTransaction
:
"
)
;
if
(
mName
)
{
nsAutoString
name
;
mName
-
>
ToString
(
name
)
;
aString
+
=
name
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditAggregateTransaction
:
:
AppendChild
(
EditTxn
*
aTransaction
)
{
if
(
!
aTransaction
)
{
return
NS_ERROR_NULL_POINTER
;
}
RefPtr
<
EditTxn
>
*
slot
=
mChildren
.
AppendElement
(
)
;
if
(
!
slot
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
*
slot
=
aTransaction
;
return
NS_OK
;
}
NS_IMETHODIMP
EditAggregateTransaction
:
:
GetName
(
nsIAtom
*
*
aName
)
{
if
(
aName
&
&
mName
)
{
*
aName
=
mName
;
NS_ADDREF
(
*
aName
)
;
return
NS_OK
;
}
return
NS_ERROR_NULL_POINTER
;
}
}
