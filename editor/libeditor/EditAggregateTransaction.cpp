#
include
"
EditAggregateTransaction
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsISupportsUtils
.
h
"
#
include
"
nsITransaction
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
EditAggregateTransaction
EditTransactionBase
mChildren
)
NS_IMPL_ADDREF_INHERITED
(
EditAggregateTransaction
EditTransactionBase
)
NS_IMPL_RELEASE_INHERITED
(
EditAggregateTransaction
EditTransactionBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
EditAggregateTransaction
)
NS_INTERFACE_MAP_END_INHERITING
(
EditTransactionBase
)
NS_IMETHODIMP
EditAggregateTransaction
:
:
DoTransaction
(
)
{
AutoTArray
<
OwningNonNull
<
EditTransactionBase
>
10
>
children
(
mChildren
)
;
for
(
OwningNonNull
<
EditTransactionBase
>
&
childTransaction
:
children
)
{
nsresult
rv
=
MOZ_KnownLive
(
childTransaction
)
-
>
DoTransaction
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
EditTransactionBase
:
:
DoTransaction
(
)
failed
"
)
;
return
rv
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
EditAggregateTransaction
:
:
UndoTransaction
(
)
{
AutoTArray
<
OwningNonNull
<
EditTransactionBase
>
10
>
children
(
mChildren
)
;
for
(
OwningNonNull
<
EditTransactionBase
>
&
childTransaction
:
Reversed
(
children
)
)
{
nsresult
rv
=
MOZ_KnownLive
(
childTransaction
)
-
>
UndoTransaction
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
EditTransactionBase
:
:
UndoTransaction
(
)
failed
"
)
;
return
rv
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
EditAggregateTransaction
:
:
RedoTransaction
(
)
{
AutoTArray
<
OwningNonNull
<
EditTransactionBase
>
10
>
children
(
mChildren
)
;
for
(
OwningNonNull
<
EditTransactionBase
>
&
childTransaction
:
children
)
{
nsresult
rv
=
MOZ_KnownLive
(
childTransaction
)
-
>
RedoTransaction
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
EditTransactionBase
:
:
RedoTransaction
(
)
failed
"
)
;
return
rv
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
EditAggregateTransaction
:
:
Merge
(
nsITransaction
*
aTransaction
bool
*
aDidMerge
)
{
if
(
aDidMerge
)
{
*
aDidMerge
=
false
;
}
if
(
mChildren
.
IsEmpty
(
)
)
{
return
NS_OK
;
}
return
mChildren
[
0
]
-
>
Merge
(
aTransaction
aDidMerge
)
;
}
NS_IMETHODIMP
EditAggregateTransaction
:
:
AppendChild
(
EditTransactionBase
*
aTransaction
)
{
if
(
NS_WARN_IF
(
!
aTransaction
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
mChildren
.
AppendElement
(
*
aTransaction
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditAggregateTransaction
:
:
GetName
(
nsAtom
*
*
aName
)
{
if
(
NS_WARN_IF
(
!
aName
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
NS_WARN_IF
(
!
mName
)
)
{
return
NS_ERROR_FAILURE
;
}
*
aName
=
do_AddRef
(
mName
)
.
take
(
)
;
return
NS_OK
;
}
}
