#
ifndef
mozilla_ChangeStyleTransaction_h
#
define
mozilla_ChangeStyleTransaction_h
#
include
"
mozilla
/
EditTransactionBase
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsString
.
h
"
class
nsAtom
;
namespace
mozilla
{
namespace
dom
{
class
Element
;
}
class
ChangeStyleTransaction
final
:
public
EditTransactionBase
{
protected
:
ChangeStyleTransaction
(
dom
:
:
Element
&
aElement
nsAtom
&
aProperty
const
nsAString
&
aValue
bool
aRemove
)
;
public
:
static
already_AddRefed
<
ChangeStyleTransaction
>
Create
(
dom
:
:
Element
&
aElement
nsAtom
&
aProperty
const
nsAString
&
aValue
)
;
static
already_AddRefed
<
ChangeStyleTransaction
>
CreateToRemove
(
dom
:
:
Element
&
aElement
nsAtom
&
aProperty
const
nsAString
&
aValue
)
;
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
ChangeStyleTransaction
EditTransactionBase
)
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_EDITTRANSACTIONBASE
NS_IMETHOD
RedoTransaction
(
)
override
;
static
bool
ValueIncludes
(
const
nsAString
&
aValueList
const
nsAString
&
aValue
)
;
private
:
virtual
~
ChangeStyleTransaction
(
)
;
void
AddValueToMultivalueProperty
(
nsAString
&
aValues
const
nsAString
&
aNewValue
)
;
bool
AcceptsMoreThanOneValue
(
nsAtom
&
aCSSProperty
)
;
void
RemoveValueFromListOfValues
(
nsAString
&
aValues
const
nsAString
&
aRemoveValue
)
;
nsresult
SetStyle
(
bool
aAttributeWasSet
nsAString
&
aValue
)
;
nsCOMPtr
<
dom
:
:
Element
>
mElement
;
RefPtr
<
nsAtom
>
mProperty
;
nsString
mValue
;
bool
mRemoveProperty
;
nsString
mUndoValue
;
nsString
mRedoValue
;
bool
mUndoAttributeWasSet
;
bool
mRedoAttributeWasSet
;
}
;
}
#
endif
