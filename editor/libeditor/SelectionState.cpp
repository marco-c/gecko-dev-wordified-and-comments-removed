#
include
"
mozilla
/
SelectionState
.
h
"
#
include
"
EditorUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsEditor
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIDOMCharacterData
.
h
"
#
include
"
nsIDOMNode
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRange
.
h
"
namespace
mozilla
{
using
namespace
dom
;
SelectionState
:
:
SelectionState
(
)
{
}
SelectionState
:
:
~
SelectionState
(
)
{
MakeEmpty
(
)
;
}
void
SelectionState
:
:
SaveSelection
(
Selection
*
aSel
)
{
MOZ_ASSERT
(
aSel
)
;
int32_t
arrayCount
=
mArray
.
Length
(
)
;
int32_t
rangeCount
=
aSel
-
>
RangeCount
(
)
;
if
(
arrayCount
<
rangeCount
)
{
for
(
int32_t
i
=
arrayCount
;
i
<
rangeCount
;
i
+
+
)
{
mArray
.
AppendElement
(
)
;
mArray
[
i
]
=
new
RangeItem
(
)
;
}
}
else
if
(
arrayCount
>
rangeCount
)
{
for
(
int32_t
i
=
arrayCount
-
1
;
i
>
=
rangeCount
;
i
-
-
)
{
mArray
.
RemoveElementAt
(
i
)
;
}
}
for
(
int32_t
i
=
0
;
i
<
rangeCount
;
i
+
+
)
{
mArray
[
i
]
-
>
StoreRange
(
aSel
-
>
GetRangeAt
(
i
)
)
;
}
}
nsresult
SelectionState
:
:
RestoreSelection
(
Selection
*
aSel
)
{
NS_ENSURE_TRUE
(
aSel
NS_ERROR_NULL_POINTER
)
;
nsresult
res
;
uint32_t
i
arrayCount
=
mArray
.
Length
(
)
;
aSel
-
>
RemoveAllRanges
(
)
;
for
(
i
=
0
;
i
<
arrayCount
;
i
+
+
)
{
RefPtr
<
nsRange
>
range
=
mArray
[
i
]
-
>
GetRange
(
)
;
NS_ENSURE_TRUE
(
range
NS_ERROR_UNEXPECTED
)
;
res
=
aSel
-
>
AddRange
(
range
)
;
if
(
NS_FAILED
(
res
)
)
return
res
;
}
return
NS_OK
;
}
bool
SelectionState
:
:
IsCollapsed
(
)
{
if
(
1
!
=
mArray
.
Length
(
)
)
return
false
;
RefPtr
<
nsRange
>
range
=
mArray
[
0
]
-
>
GetRange
(
)
;
NS_ENSURE_TRUE
(
range
false
)
;
bool
bIsCollapsed
=
false
;
range
-
>
GetCollapsed
(
&
bIsCollapsed
)
;
return
bIsCollapsed
;
}
bool
SelectionState
:
:
IsEqual
(
SelectionState
*
aSelState
)
{
NS_ENSURE_TRUE
(
aSelState
false
)
;
uint32_t
i
myCount
=
mArray
.
Length
(
)
itsCount
=
aSelState
-
>
mArray
.
Length
(
)
;
if
(
myCount
!
=
itsCount
)
return
false
;
if
(
myCount
<
1
)
return
false
;
for
(
i
=
0
;
i
<
myCount
;
i
+
+
)
{
RefPtr
<
nsRange
>
myRange
=
mArray
[
i
]
-
>
GetRange
(
)
;
RefPtr
<
nsRange
>
itsRange
=
aSelState
-
>
mArray
[
i
]
-
>
GetRange
(
)
;
NS_ENSURE_TRUE
(
myRange
&
&
itsRange
false
)
;
int16_t
compResult
;
nsresult
rv
;
rv
=
myRange
-
>
CompareBoundaryPoints
(
nsIDOMRange
:
:
START_TO_START
itsRange
&
compResult
)
;
if
(
NS_FAILED
(
rv
)
|
|
compResult
)
return
false
;
rv
=
myRange
-
>
CompareBoundaryPoints
(
nsIDOMRange
:
:
END_TO_END
itsRange
&
compResult
)
;
if
(
NS_FAILED
(
rv
)
|
|
compResult
)
return
false
;
}
return
true
;
}
void
SelectionState
:
:
MakeEmpty
(
)
{
mArray
.
Clear
(
)
;
}
bool
SelectionState
:
:
IsEmpty
(
)
{
return
mArray
.
IsEmpty
(
)
;
}
RangeUpdater
:
:
RangeUpdater
(
)
:
mLock
(
false
)
{
}
RangeUpdater
:
:
~
RangeUpdater
(
)
{
}
void
RangeUpdater
:
:
RegisterRangeItem
(
RangeItem
*
aRangeItem
)
{
if
(
!
aRangeItem
)
return
;
if
(
mArray
.
Contains
(
aRangeItem
)
)
{
NS_ERROR
(
"
tried
to
register
an
already
registered
range
"
)
;
return
;
}
mArray
.
AppendElement
(
aRangeItem
)
;
}
void
RangeUpdater
:
:
DropRangeItem
(
RangeItem
*
aRangeItem
)
{
if
(
!
aRangeItem
)
return
;
mArray
.
RemoveElement
(
aRangeItem
)
;
}
nsresult
RangeUpdater
:
:
RegisterSelectionState
(
SelectionState
&
aSelState
)
{
uint32_t
i
theCount
=
aSelState
.
mArray
.
Length
(
)
;
if
(
theCount
<
1
)
return
NS_ERROR_FAILURE
;
for
(
i
=
0
;
i
<
theCount
;
i
+
+
)
{
RegisterRangeItem
(
aSelState
.
mArray
[
i
]
)
;
}
return
NS_OK
;
}
nsresult
RangeUpdater
:
:
DropSelectionState
(
SelectionState
&
aSelState
)
{
uint32_t
i
theCount
=
aSelState
.
mArray
.
Length
(
)
;
if
(
theCount
<
1
)
return
NS_ERROR_FAILURE
;
for
(
i
=
0
;
i
<
theCount
;
i
+
+
)
{
DropRangeItem
(
aSelState
.
mArray
[
i
]
)
;
}
return
NS_OK
;
}
nsresult
RangeUpdater
:
:
SelAdjCreateNode
(
nsINode
*
aParent
int32_t
aPosition
)
{
if
(
mLock
)
{
return
NS_OK
;
}
NS_ENSURE_TRUE
(
aParent
NS_ERROR_NULL_POINTER
)
;
uint32_t
count
=
mArray
.
Length
(
)
;
if
(
!
count
)
{
return
NS_OK
;
}
for
(
uint32_t
i
=
0
;
i
<
count
;
i
+
+
)
{
RangeItem
*
item
=
mArray
[
i
]
;
NS_ENSURE_TRUE
(
item
NS_ERROR_NULL_POINTER
)
;
if
(
item
-
>
startNode
=
=
aParent
&
&
item
-
>
startOffset
>
aPosition
)
{
item
-
>
startOffset
+
+
;
}
if
(
item
-
>
endNode
=
=
aParent
&
&
item
-
>
endOffset
>
aPosition
)
{
item
-
>
endOffset
+
+
;
}
}
return
NS_OK
;
}
nsresult
RangeUpdater
:
:
SelAdjCreateNode
(
nsIDOMNode
*
aParent
int32_t
aPosition
)
{
nsCOMPtr
<
nsINode
>
parent
=
do_QueryInterface
(
aParent
)
;
return
SelAdjCreateNode
(
parent
aPosition
)
;
}
nsresult
RangeUpdater
:
:
SelAdjInsertNode
(
nsINode
*
aParent
int32_t
aPosition
)
{
return
SelAdjCreateNode
(
aParent
aPosition
)
;
}
nsresult
RangeUpdater
:
:
SelAdjInsertNode
(
nsIDOMNode
*
aParent
int32_t
aPosition
)
{
return
SelAdjCreateNode
(
aParent
aPosition
)
;
}
void
RangeUpdater
:
:
SelAdjDeleteNode
(
nsINode
*
aNode
)
{
if
(
mLock
)
{
return
;
}
MOZ_ASSERT
(
aNode
)
;
uint32_t
count
=
mArray
.
Length
(
)
;
if
(
!
count
)
{
return
;
}
nsCOMPtr
<
nsINode
>
parent
=
aNode
-
>
GetParentNode
(
)
;
int32_t
offset
=
parent
?
parent
-
>
IndexOf
(
aNode
)
:
-
1
;
for
(
uint32_t
i
=
0
;
i
<
count
;
i
+
+
)
{
RangeItem
*
item
=
mArray
[
i
]
;
MOZ_ASSERT
(
item
)
;
if
(
item
-
>
startNode
=
=
parent
&
&
item
-
>
startOffset
>
offset
)
{
item
-
>
startOffset
-
-
;
}
if
(
item
-
>
endNode
=
=
parent
&
&
item
-
>
endOffset
>
offset
)
{
item
-
>
endOffset
-
-
;
}
if
(
item
-
>
startNode
=
=
aNode
)
{
item
-
>
startNode
=
parent
;
item
-
>
startOffset
=
offset
;
}
if
(
item
-
>
endNode
=
=
aNode
)
{
item
-
>
endNode
=
parent
;
item
-
>
endOffset
=
offset
;
}
nsCOMPtr
<
nsINode
>
oldStart
;
if
(
EditorUtils
:
:
IsDescendantOf
(
item
-
>
startNode
aNode
)
)
{
oldStart
=
item
-
>
startNode
;
item
-
>
startNode
=
parent
;
item
-
>
startOffset
=
offset
;
}
if
(
item
-
>
endNode
=
=
oldStart
|
|
EditorUtils
:
:
IsDescendantOf
(
item
-
>
endNode
aNode
)
)
{
item
-
>
endNode
=
parent
;
item
-
>
endOffset
=
offset
;
}
}
}
void
RangeUpdater
:
:
SelAdjDeleteNode
(
nsIDOMNode
*
aNode
)
{
nsCOMPtr
<
nsINode
>
node
=
do_QueryInterface
(
aNode
)
;
NS_ENSURE_TRUE
(
node
)
;
return
SelAdjDeleteNode
(
node
)
;
}
nsresult
RangeUpdater
:
:
SelAdjSplitNode
(
nsIContent
&
aOldRightNode
int32_t
aOffset
nsIContent
*
aNewLeftNode
)
{
if
(
mLock
)
{
return
NS_OK
;
}
NS_ENSURE_TRUE
(
aNewLeftNode
NS_ERROR_NULL_POINTER
)
;
uint32_t
count
=
mArray
.
Length
(
)
;
if
(
!
count
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsINode
>
parent
=
aOldRightNode
.
GetParentNode
(
)
;
int32_t
offset
=
parent
?
parent
-
>
IndexOf
(
&
aOldRightNode
)
:
-
1
;
nsresult
result
=
SelAdjInsertNode
(
parent
offset
-
1
)
;
NS_ENSURE_SUCCESS
(
result
result
)
;
for
(
uint32_t
i
=
0
;
i
<
count
;
i
+
+
)
{
RangeItem
*
item
=
mArray
[
i
]
;
NS_ENSURE_TRUE
(
item
NS_ERROR_NULL_POINTER
)
;
if
(
item
-
>
startNode
=
=
&
aOldRightNode
)
{
if
(
item
-
>
startOffset
>
aOffset
)
{
item
-
>
startOffset
-
=
aOffset
;
}
else
{
item
-
>
startNode
=
aNewLeftNode
;
}
}
if
(
item
-
>
endNode
=
=
&
aOldRightNode
)
{
if
(
item
-
>
endOffset
>
aOffset
)
{
item
-
>
endOffset
-
=
aOffset
;
}
else
{
item
-
>
endNode
=
aNewLeftNode
;
}
}
}
return
NS_OK
;
}
nsresult
RangeUpdater
:
:
SelAdjJoinNodes
(
nsINode
&
aLeftNode
nsINode
&
aRightNode
nsINode
&
aParent
int32_t
aOffset
int32_t
aOldLeftNodeLength
)
{
if
(
mLock
)
{
return
NS_OK
;
}
uint32_t
count
=
mArray
.
Length
(
)
;
if
(
!
count
)
{
return
NS_OK
;
}
for
(
uint32_t
i
=
0
;
i
<
count
;
i
+
+
)
{
RangeItem
*
item
=
mArray
[
i
]
;
NS_ENSURE_TRUE
(
item
NS_ERROR_NULL_POINTER
)
;
if
(
item
-
>
startNode
=
=
&
aParent
)
{
if
(
item
-
>
startOffset
>
aOffset
)
{
item
-
>
startOffset
-
-
;
}
else
if
(
item
-
>
startOffset
=
=
aOffset
)
{
item
-
>
startNode
=
&
aRightNode
;
item
-
>
startOffset
=
aOldLeftNodeLength
;
}
}
else
if
(
item
-
>
startNode
=
=
&
aRightNode
)
{
item
-
>
startOffset
+
=
aOldLeftNodeLength
;
}
else
if
(
item
-
>
startNode
=
=
&
aLeftNode
)
{
item
-
>
startNode
=
&
aRightNode
;
}
if
(
item
-
>
endNode
=
=
&
aParent
)
{
if
(
item
-
>
endOffset
>
aOffset
)
{
item
-
>
endOffset
-
-
;
}
else
if
(
item
-
>
endOffset
=
=
aOffset
)
{
item
-
>
endNode
=
&
aRightNode
;
item
-
>
endOffset
=
aOldLeftNodeLength
;
}
}
else
if
(
item
-
>
endNode
=
=
&
aRightNode
)
{
item
-
>
endOffset
+
=
aOldLeftNodeLength
;
}
else
if
(
item
-
>
endNode
=
=
&
aLeftNode
)
{
item
-
>
endNode
=
&
aRightNode
;
}
}
return
NS_OK
;
}
void
RangeUpdater
:
:
SelAdjInsertText
(
Text
&
aTextNode
int32_t
aOffset
const
nsAString
&
aString
)
{
if
(
mLock
)
{
return
;
}
uint32_t
count
=
mArray
.
Length
(
)
;
if
(
!
count
)
{
return
;
}
uint32_t
len
=
aString
.
Length
(
)
;
for
(
uint32_t
i
=
0
;
i
<
count
;
i
+
+
)
{
RangeItem
*
item
=
mArray
[
i
]
;
MOZ_ASSERT
(
item
)
;
if
(
item
-
>
startNode
=
=
&
aTextNode
&
&
item
-
>
startOffset
>
aOffset
)
{
item
-
>
startOffset
+
=
len
;
}
if
(
item
-
>
endNode
=
=
&
aTextNode
&
&
item
-
>
endOffset
>
aOffset
)
{
item
-
>
endOffset
+
=
len
;
}
}
return
;
}
nsresult
RangeUpdater
:
:
SelAdjDeleteText
(
nsIContent
*
aTextNode
int32_t
aOffset
int32_t
aLength
)
{
if
(
mLock
)
{
return
NS_OK
;
}
uint32_t
count
=
mArray
.
Length
(
)
;
if
(
!
count
)
{
return
NS_OK
;
}
NS_ENSURE_TRUE
(
aTextNode
NS_ERROR_NULL_POINTER
)
;
for
(
uint32_t
i
=
0
;
i
<
count
;
i
+
+
)
{
RangeItem
*
item
=
mArray
[
i
]
;
NS_ENSURE_TRUE
(
item
NS_ERROR_NULL_POINTER
)
;
if
(
item
-
>
startNode
=
=
aTextNode
&
&
item
-
>
startOffset
>
aOffset
)
{
item
-
>
startOffset
-
=
aLength
;
if
(
item
-
>
startOffset
<
0
)
{
item
-
>
startOffset
=
0
;
}
}
if
(
item
-
>
endNode
=
=
aTextNode
&
&
item
-
>
endOffset
>
aOffset
)
{
item
-
>
endOffset
-
=
aLength
;
if
(
item
-
>
endOffset
<
0
)
{
item
-
>
endOffset
=
0
;
}
}
}
return
NS_OK
;
}
nsresult
RangeUpdater
:
:
SelAdjDeleteText
(
nsIDOMCharacterData
*
aTextNode
int32_t
aOffset
int32_t
aLength
)
{
nsCOMPtr
<
nsIContent
>
textNode
=
do_QueryInterface
(
aTextNode
)
;
return
SelAdjDeleteText
(
textNode
aOffset
aLength
)
;
}
nsresult
RangeUpdater
:
:
WillReplaceContainer
(
)
{
if
(
mLock
)
return
NS_ERROR_UNEXPECTED
;
mLock
=
true
;
return
NS_OK
;
}
nsresult
RangeUpdater
:
:
DidReplaceContainer
(
Element
*
aOriginalNode
Element
*
aNewNode
)
{
NS_ENSURE_TRUE
(
mLock
NS_ERROR_UNEXPECTED
)
;
mLock
=
false
;
NS_ENSURE_TRUE
(
aOriginalNode
&
&
aNewNode
NS_ERROR_NULL_POINTER
)
;
uint32_t
count
=
mArray
.
Length
(
)
;
if
(
!
count
)
{
return
NS_OK
;
}
for
(
uint32_t
i
=
0
;
i
<
count
;
i
+
+
)
{
RangeItem
*
item
=
mArray
[
i
]
;
NS_ENSURE_TRUE
(
item
NS_ERROR_NULL_POINTER
)
;
if
(
item
-
>
startNode
=
=
aOriginalNode
)
{
item
-
>
startNode
=
aNewNode
;
}
if
(
item
-
>
endNode
=
=
aOriginalNode
)
{
item
-
>
endNode
=
aNewNode
;
}
}
return
NS_OK
;
}
nsresult
RangeUpdater
:
:
WillRemoveContainer
(
)
{
if
(
mLock
)
return
NS_ERROR_UNEXPECTED
;
mLock
=
true
;
return
NS_OK
;
}
nsresult
RangeUpdater
:
:
DidRemoveContainer
(
nsINode
*
aNode
nsINode
*
aParent
int32_t
aOffset
uint32_t
aNodeOrigLen
)
{
NS_ENSURE_TRUE
(
mLock
NS_ERROR_UNEXPECTED
)
;
mLock
=
false
;
NS_ENSURE_TRUE
(
aNode
&
&
aParent
NS_ERROR_NULL_POINTER
)
;
uint32_t
count
=
mArray
.
Length
(
)
;
if
(
!
count
)
{
return
NS_OK
;
}
for
(
uint32_t
i
=
0
;
i
<
count
;
i
+
+
)
{
RangeItem
*
item
=
mArray
[
i
]
;
NS_ENSURE_TRUE
(
item
NS_ERROR_NULL_POINTER
)
;
if
(
item
-
>
startNode
=
=
aNode
)
{
item
-
>
startNode
=
aParent
;
item
-
>
startOffset
+
=
aOffset
;
}
else
if
(
item
-
>
startNode
=
=
aParent
&
&
item
-
>
startOffset
>
aOffset
)
{
item
-
>
startOffset
+
=
(
int32_t
)
aNodeOrigLen
-
1
;
}
if
(
item
-
>
endNode
=
=
aNode
)
{
item
-
>
endNode
=
aParent
;
item
-
>
endOffset
+
=
aOffset
;
}
else
if
(
item
-
>
endNode
=
=
aParent
&
&
item
-
>
endOffset
>
aOffset
)
{
item
-
>
endOffset
+
=
(
int32_t
)
aNodeOrigLen
-
1
;
}
}
return
NS_OK
;
}
nsresult
RangeUpdater
:
:
DidRemoveContainer
(
nsIDOMNode
*
aNode
nsIDOMNode
*
aParent
int32_t
aOffset
uint32_t
aNodeOrigLen
)
{
nsCOMPtr
<
nsINode
>
node
=
do_QueryInterface
(
aNode
)
;
nsCOMPtr
<
nsINode
>
parent
=
do_QueryInterface
(
aParent
)
;
return
DidRemoveContainer
(
node
parent
aOffset
aNodeOrigLen
)
;
}
nsresult
RangeUpdater
:
:
WillInsertContainer
(
)
{
if
(
mLock
)
return
NS_ERROR_UNEXPECTED
;
mLock
=
true
;
return
NS_OK
;
}
nsresult
RangeUpdater
:
:
DidInsertContainer
(
)
{
NS_ENSURE_TRUE
(
mLock
NS_ERROR_UNEXPECTED
)
;
mLock
=
false
;
return
NS_OK
;
}
void
RangeUpdater
:
:
WillMoveNode
(
)
{
mLock
=
true
;
}
void
RangeUpdater
:
:
DidMoveNode
(
nsINode
*
aOldParent
int32_t
aOldOffset
nsINode
*
aNewParent
int32_t
aNewOffset
)
{
MOZ_ASSERT
(
aOldParent
)
;
MOZ_ASSERT
(
aNewParent
)
;
NS_ENSURE_TRUE_VOID
(
mLock
)
;
mLock
=
false
;
for
(
uint32_t
i
=
0
count
=
mArray
.
Length
(
)
;
i
<
count
;
+
+
i
)
{
RangeItem
*
item
=
mArray
[
i
]
;
NS_ENSURE_TRUE_VOID
(
item
)
;
if
(
item
-
>
startNode
=
=
aOldParent
&
&
item
-
>
startOffset
>
aOldOffset
)
{
item
-
>
startOffset
-
-
;
}
if
(
item
-
>
endNode
=
=
aOldParent
&
&
item
-
>
endOffset
>
aOldOffset
)
{
item
-
>
endOffset
-
-
;
}
if
(
item
-
>
startNode
=
=
aNewParent
&
&
item
-
>
startOffset
>
aNewOffset
)
{
item
-
>
startOffset
+
+
;
}
if
(
item
-
>
endNode
=
=
aNewParent
&
&
item
-
>
endOffset
>
aNewOffset
)
{
item
-
>
endOffset
+
+
;
}
}
}
RangeItem
:
:
RangeItem
(
)
{
}
RangeItem
:
:
~
RangeItem
(
)
{
}
NS_IMPL_CYCLE_COLLECTION
(
RangeItem
startNode
endNode
)
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
RangeItem
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
RangeItem
Release
)
void
RangeItem
:
:
StoreRange
(
nsRange
*
aRange
)
{
MOZ_ASSERT
(
aRange
)
;
startNode
=
aRange
-
>
GetStartParent
(
)
;
startOffset
=
aRange
-
>
StartOffset
(
)
;
endNode
=
aRange
-
>
GetEndParent
(
)
;
endOffset
=
aRange
-
>
EndOffset
(
)
;
}
already_AddRefed
<
nsRange
>
RangeItem
:
:
GetRange
(
)
{
RefPtr
<
nsRange
>
range
=
new
nsRange
(
startNode
)
;
nsresult
res
=
range
-
>
Set
(
startNode
startOffset
endNode
endOffset
)
;
NS_ENSURE_SUCCESS
(
res
nullptr
)
;
return
range
.
forget
(
)
;
}
}
