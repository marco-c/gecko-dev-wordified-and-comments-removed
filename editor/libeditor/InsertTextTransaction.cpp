#
include
"
InsertTextTransaction
.
h
"
#
include
"
mozilla
/
EditorBase
.
h
"
#
include
"
mozilla
/
SelectionState
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsQueryObject
.
h
"
namespace
mozilla
{
using
namespace
dom
;
already_AddRefed
<
InsertTextTransaction
>
InsertTextTransaction
:
:
Create
(
EditorBase
&
aEditorBase
const
nsAString
&
aStringToInsert
Text
&
aTextNode
uint32_t
aOffset
)
{
RefPtr
<
InsertTextTransaction
>
transaction
=
new
InsertTextTransaction
(
aEditorBase
aStringToInsert
aTextNode
aOffset
)
;
return
transaction
.
forget
(
)
;
}
InsertTextTransaction
:
:
InsertTextTransaction
(
EditorBase
&
aEditorBase
const
nsAString
&
aStringToInsert
Text
&
aTextNode
uint32_t
aOffset
)
:
mTextNode
(
&
aTextNode
)
mOffset
(
aOffset
)
mStringToInsert
(
aStringToInsert
)
mEditorBase
(
&
aEditorBase
)
{
}
InsertTextTransaction
:
:
~
InsertTextTransaction
(
)
{
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
InsertTextTransaction
EditTransactionBase
mEditorBase
mTextNode
)
NS_IMPL_ADDREF_INHERITED
(
InsertTextTransaction
EditTransactionBase
)
NS_IMPL_RELEASE_INHERITED
(
InsertTextTransaction
EditTransactionBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
InsertTextTransaction
)
if
(
aIID
.
Equals
(
NS_GET_IID
(
InsertTextTransaction
)
)
)
{
foundInterface
=
static_cast
<
nsITransaction
*
>
(
this
)
;
}
else
NS_INTERFACE_MAP_END_INHERITING
(
EditTransactionBase
)
NS_IMETHODIMP
InsertTextTransaction
:
:
DoTransaction
(
)
{
if
(
NS_WARN_IF
(
!
mEditorBase
)
|
|
NS_WARN_IF
(
!
mTextNode
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
ErrorResult
rv
;
mTextNode
-
>
InsertData
(
mOffset
mStringToInsert
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
return
rv
.
StealNSResult
(
)
;
}
if
(
mEditorBase
-
>
GetShouldTxnSetSelection
(
)
)
{
RefPtr
<
Selection
>
selection
=
mEditorBase
-
>
GetSelection
(
)
;
if
(
NS_WARN_IF
(
!
selection
)
)
{
return
NS_ERROR_FAILURE
;
}
DebugOnly
<
nsresult
>
rv
=
selection
-
>
Collapse
(
mTextNode
mOffset
+
mStringToInsert
.
Length
(
)
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Selection
could
not
be
collapsed
after
insert
"
)
;
}
else
{
}
mEditorBase
-
>
RangeUpdaterRef
(
)
.
SelAdjInsertText
(
*
mTextNode
mOffset
mStringToInsert
)
;
return
NS_OK
;
}
NS_IMETHODIMP
InsertTextTransaction
:
:
UndoTransaction
(
)
{
ErrorResult
rv
;
mTextNode
-
>
DeleteData
(
mOffset
mStringToInsert
.
Length
(
)
rv
)
;
return
rv
.
StealNSResult
(
)
;
}
NS_IMETHODIMP
InsertTextTransaction
:
:
Merge
(
nsITransaction
*
aTransaction
bool
*
aDidMerge
)
{
if
(
!
aTransaction
|
|
!
aDidMerge
)
{
return
NS_OK
;
}
*
aDidMerge
=
false
;
RefPtr
<
InsertTextTransaction
>
otherTransaction
=
do_QueryObject
(
aTransaction
)
;
if
(
otherTransaction
&
&
IsSequentialInsert
(
*
otherTransaction
)
)
{
nsAutoString
otherData
;
otherTransaction
-
>
GetData
(
otherData
)
;
mStringToInsert
+
=
otherData
;
*
aDidMerge
=
true
;
}
return
NS_OK
;
}
void
InsertTextTransaction
:
:
GetData
(
nsString
&
aResult
)
{
aResult
=
mStringToInsert
;
}
bool
InsertTextTransaction
:
:
IsSequentialInsert
(
InsertTextTransaction
&
aOtherTransaction
)
{
return
aOtherTransaction
.
mTextNode
=
=
mTextNode
&
&
aOtherTransaction
.
mOffset
=
=
mOffset
+
mStringToInsert
.
Length
(
)
;
}
}
