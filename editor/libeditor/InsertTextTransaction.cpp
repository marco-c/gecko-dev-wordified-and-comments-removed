#
include
"
InsertTextTransaction
.
h
"
#
include
"
mozilla
/
EditorBase
.
h
"
#
include
"
mozilla
/
SelectionState
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsQueryObject
.
h
"
namespace
mozilla
{
using
namespace
dom
;
already_AddRefed
<
InsertTextTransaction
>
InsertTextTransaction
:
:
Create
(
EditorBase
&
aEditorBase
const
nsAString
&
aStringToInsert
const
EditorDOMPointInText
&
aPointToInsert
)
{
MOZ_ASSERT
(
aPointToInsert
.
IsSetAndValid
(
)
)
;
RefPtr
<
InsertTextTransaction
>
transaction
=
new
InsertTextTransaction
(
aEditorBase
aStringToInsert
aPointToInsert
)
;
return
transaction
.
forget
(
)
;
}
InsertTextTransaction
:
:
InsertTextTransaction
(
EditorBase
&
aEditorBase
const
nsAString
&
aStringToInsert
const
EditorDOMPointInText
&
aPointToInsert
)
:
mTextNode
(
aPointToInsert
.
ContainerAsText
(
)
)
mOffset
(
aPointToInsert
.
Offset
(
)
)
mStringToInsert
(
aStringToInsert
)
mEditorBase
(
&
aEditorBase
)
{
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
InsertTextTransaction
EditTransactionBase
mEditorBase
mTextNode
)
NS_IMPL_ADDREF_INHERITED
(
InsertTextTransaction
EditTransactionBase
)
NS_IMPL_RELEASE_INHERITED
(
InsertTextTransaction
EditTransactionBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
InsertTextTransaction
)
NS_INTERFACE_MAP_ENTRY_CONCRETE
(
InsertTextTransaction
)
NS_INTERFACE_MAP_END_INHERITING
(
EditTransactionBase
)
NS_IMETHODIMP
InsertTextTransaction
:
:
DoTransaction
(
)
{
if
(
NS_WARN_IF
(
!
mEditorBase
)
|
|
NS_WARN_IF
(
!
mTextNode
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
OwningNonNull
<
EditorBase
>
editorBase
=
*
mEditorBase
;
OwningNonNull
<
Text
>
textNode
=
*
mTextNode
;
ErrorResult
error
;
editorBase
-
>
DoInsertText
(
textNode
mOffset
mStringToInsert
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
EditorBase
:
:
DoInsertText
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
if
(
editorBase
-
>
AllowsTransactionsToChangeSelection
(
)
)
{
RefPtr
<
Selection
>
selection
=
editorBase
-
>
GetSelection
(
)
;
if
(
NS_WARN_IF
(
!
selection
)
)
{
return
NS_ERROR_FAILURE
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
selection
-
>
Collapse
(
textNode
mOffset
+
mStringToInsert
.
Length
(
)
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
Selection
:
:
Collapse
(
)
failed
but
ignored
"
)
;
}
else
{
}
editorBase
-
>
RangeUpdaterRef
(
)
.
SelAdjInsertText
(
textNode
mOffset
mStringToInsert
)
;
return
NS_OK
;
}
NS_IMETHODIMP
InsertTextTransaction
:
:
UndoTransaction
(
)
{
if
(
NS_WARN_IF
(
!
mEditorBase
)
|
|
NS_WARN_IF
(
!
mTextNode
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
OwningNonNull
<
EditorBase
>
editorBase
=
*
mEditorBase
;
OwningNonNull
<
Text
>
textNode
=
*
mTextNode
;
ErrorResult
error
;
editorBase
-
>
DoDeleteText
(
textNode
mOffset
mStringToInsert
.
Length
(
)
error
)
;
NS_WARNING_ASSERTION
(
!
error
.
Failed
(
)
"
EditorBase
:
:
DoDeleteText
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
NS_IMETHODIMP
InsertTextTransaction
:
:
Merge
(
nsITransaction
*
aTransaction
bool
*
aDidMerge
)
{
if
(
NS_WARN_IF
(
!
aTransaction
)
|
|
NS_WARN_IF
(
!
aDidMerge
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
aDidMerge
=
false
;
RefPtr
<
InsertTextTransaction
>
otherTransaction
=
do_QueryObject
(
aTransaction
)
;
if
(
otherTransaction
&
&
IsSequentialInsert
(
*
otherTransaction
)
)
{
nsAutoString
otherData
;
otherTransaction
-
>
GetData
(
otherData
)
;
mStringToInsert
+
=
otherData
;
*
aDidMerge
=
true
;
}
return
NS_OK
;
}
void
InsertTextTransaction
:
:
GetData
(
nsString
&
aResult
)
{
aResult
=
mStringToInsert
;
}
bool
InsertTextTransaction
:
:
IsSequentialInsert
(
InsertTextTransaction
&
aOtherTransaction
)
{
return
aOtherTransaction
.
mTextNode
=
=
mTextNode
&
&
aOtherTransaction
.
mOffset
=
=
mOffset
+
mStringToInsert
.
Length
(
)
;
}
}
