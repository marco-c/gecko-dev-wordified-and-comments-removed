#
ifndef
EditorEventListener_h
#
define
EditorEventListener_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nscore
.
h
"
class
nsCaret
;
class
nsIContent
;
class
nsIDOMEvent
;
class
nsIPresShell
;
class
nsPresContext
;
#
ifdef
KeyPress
#
undef
KeyPress
#
endif
#
ifdef
XP_WIN
#
define
HANDLE_NATIVE_TEXT_DIRECTION_SWITCH
#
endif
namespace
mozilla
{
class
EditorBase
;
namespace
dom
{
class
DragEvent
;
class
MouseEvent
;
}
class
EditorEventListener
:
public
nsIDOMEventListener
{
public
:
EditorEventListener
(
)
;
virtual
nsresult
Connect
(
EditorBase
*
aEditorBase
)
;
void
Disconnect
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIDOMEVENTLISTENER
void
SpellCheckIfNeeded
(
)
;
protected
:
virtual
~
EditorEventListener
(
)
;
nsresult
InstallToEditor
(
)
;
void
UninstallFromEditor
(
)
;
#
ifdef
HANDLE_NATIVE_TEXT_DIRECTION_SWITCH
nsresult
KeyDown
(
const
WidgetKeyboardEvent
*
aKeyboardEvent
)
;
nsresult
KeyUp
(
const
WidgetKeyboardEvent
*
aKeyboardEvent
)
;
#
endif
nsresult
KeyPress
(
WidgetKeyboardEvent
*
aKeyboardEvent
)
;
nsresult
HandleChangeComposition
(
WidgetCompositionEvent
*
aCompositionEvent
)
;
nsresult
HandleStartComposition
(
WidgetCompositionEvent
*
aCompositionEvent
)
;
void
HandleEndComposition
(
WidgetCompositionEvent
*
aCompositionEvent
)
;
virtual
nsresult
MouseDown
(
dom
:
:
MouseEvent
*
aMouseEvent
)
;
virtual
nsresult
MouseUp
(
dom
:
:
MouseEvent
*
aMouseEvent
)
{
return
NS_OK
;
}
virtual
nsresult
MouseClick
(
dom
:
:
MouseEvent
*
aMouseEvent
)
;
nsresult
Focus
(
InternalFocusEvent
*
aFocusEvent
)
;
nsresult
Blur
(
InternalFocusEvent
*
aBlurEvent
)
;
nsresult
DragEnter
(
dom
:
:
DragEvent
*
aDragEvent
)
;
nsresult
DragOver
(
dom
:
:
DragEvent
*
aDragEvent
)
;
nsresult
DragExit
(
dom
:
:
DragEvent
*
aDragEvent
)
;
nsresult
Drop
(
dom
:
:
DragEvent
*
aDragEvent
)
;
bool
CanDrop
(
dom
:
:
DragEvent
*
aEvent
)
;
void
CleanupDragDropCaret
(
)
;
nsIPresShell
*
GetPresShell
(
)
const
;
nsPresContext
*
GetPresContext
(
)
const
;
nsIContent
*
GetFocusedRootContent
(
)
;
bool
NotifyIMEOfMouseButtonEvent
(
WidgetMouseEvent
*
aMouseEvent
)
;
bool
EditorHasFocus
(
)
;
bool
IsFileControlTextBox
(
)
;
bool
ShouldHandleNativeKeyBindings
(
WidgetKeyboardEvent
*
aKeyboardEvent
)
;
nsresult
HandleMiddleClickPaste
(
dom
:
:
MouseEvent
*
aMouseEvent
)
;
bool
DetachedFromEditor
(
)
const
;
bool
DetachedFromEditorOrDefaultPrevented
(
WidgetEvent
*
aEvent
)
const
;
MOZ_MUST_USE
bool
EnsureCommitCompoisition
(
)
;
EditorBase
*
mEditorBase
;
RefPtr
<
nsCaret
>
mCaret
;
bool
mCommitText
;
bool
mInTransaction
;
bool
mMouseDownOrUpConsumedByIME
;
#
ifdef
HANDLE_NATIVE_TEXT_DIRECTION_SWITCH
bool
mHaveBidiKeyboards
;
bool
mShouldSwitchTextDirection
;
bool
mSwitchToRTL
;
#
endif
}
;
}
#
endif
