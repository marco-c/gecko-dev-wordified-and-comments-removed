#
ifndef
mozilla_HTMLEditHelpers_h
#
define
mozilla_HTMLEditHelpers_h
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
ContentIterator
.
h
"
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
mozilla
/
RangeBoundary
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
StaticRange
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsString
.
h
"
class
nsISimpleEnumerator
;
namespace
mozilla
{
template
<
class
T
>
class
OwningNonNull
;
class
MOZ_STACK_CLASS
EditResult
final
{
public
:
bool
Succeeded
(
)
const
{
return
NS_SUCCEEDED
(
mRv
)
;
}
bool
Failed
(
)
const
{
return
NS_FAILED
(
mRv
)
;
}
nsresult
Rv
(
)
const
{
return
mRv
;
}
bool
EditorDestroyed
(
)
const
{
return
mRv
=
=
NS_ERROR_EDITOR_DESTROYED
;
}
const
EditorDOMPoint
&
PointRefToCollapseSelection
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
mStartPoint
.
IsSet
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mStartPoint
=
=
mEndPoint
)
;
return
mStartPoint
;
}
const
EditorDOMPoint
&
StartPointRef
(
)
const
{
return
mStartPoint
;
}
const
EditorDOMPoint
&
EndPointRef
(
)
const
{
return
mEndPoint
;
}
already_AddRefed
<
dom
:
:
StaticRange
>
CreateStaticRange
(
)
const
{
return
dom
:
:
StaticRange
:
:
Create
(
mStartPoint
.
ToRawRangeBoundary
(
)
mEndPoint
.
ToRawRangeBoundary
(
)
IgnoreErrors
(
)
)
;
}
already_AddRefed
<
nsRange
>
CreateRange
(
)
const
{
return
nsRange
:
:
Create
(
mStartPoint
.
ToRawRangeBoundary
(
)
mEndPoint
.
ToRawRangeBoundary
(
)
IgnoreErrors
(
)
)
;
}
EditResult
(
)
=
delete
;
explicit
EditResult
(
nsresult
aRv
)
:
mRv
(
aRv
)
{
MOZ_DIAGNOSTIC_ASSERT
(
NS_FAILED
(
mRv
)
)
;
}
template
<
typename
PT
typename
CT
>
explicit
EditResult
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPointToPutCaret
)
:
mRv
(
aPointToPutCaret
.
IsSet
(
)
?
NS_OK
:
NS_ERROR_FAILURE
)
mStartPoint
(
aPointToPutCaret
)
mEndPoint
(
aPointToPutCaret
)
{
}
template
<
typename
SPT
typename
SCT
typename
EPT
typename
ECT
>
EditResult
(
const
EditorDOMPointBase
<
SPT
SCT
>
&
aStartPoint
const
EditorDOMPointBase
<
EPT
ECT
>
&
aEndPoint
)
:
mRv
(
aStartPoint
.
IsSet
(
)
&
&
aEndPoint
.
IsSet
(
)
?
NS_OK
:
NS_ERROR_FAILURE
)
mStartPoint
(
aStartPoint
)
mEndPoint
(
aEndPoint
)
{
}
EditResult
(
const
EditResult
&
aOther
)
=
delete
;
EditResult
&
operator
=
(
const
EditResult
&
aOther
)
=
delete
;
EditResult
(
EditResult
&
&
aOther
)
=
default
;
EditResult
&
operator
=
(
EditResult
&
&
aOther
)
=
default
;
private
:
nsresult
mRv
;
EditorDOMPoint
mStartPoint
;
EditorDOMPoint
mEndPoint
;
}
;
class
MOZ_STACK_CLASS
MoveNodeResult
final
{
public
:
bool
Succeeded
(
)
const
{
return
NS_SUCCEEDED
(
mRv
)
;
}
bool
Failed
(
)
const
{
return
NS_FAILED
(
mRv
)
;
}
bool
Handled
(
)
const
{
return
mHandled
;
}
bool
Ignored
(
)
const
{
return
!
mHandled
;
}
nsresult
Rv
(
)
const
{
return
mRv
;
}
bool
EditorDestroyed
(
)
const
{
return
mRv
=
=
NS_ERROR_EDITOR_DESTROYED
;
}
const
EditorDOMPoint
&
NextInsertionPointRef
(
)
const
{
return
mNextInsertionPoint
;
}
EditorDOMPoint
NextInsertionPoint
(
)
const
{
return
mNextInsertionPoint
;
}
void
MarkAsHandled
(
)
{
mHandled
=
true
;
}
MoveNodeResult
(
)
:
mRv
(
NS_ERROR_NOT_INITIALIZED
)
mHandled
(
false
)
{
}
explicit
MoveNodeResult
(
nsresult
aRv
)
:
mRv
(
aRv
)
mHandled
(
false
)
{
MOZ_DIAGNOSTIC_ASSERT
(
NS_FAILED
(
mRv
)
)
;
}
MoveNodeResult
(
const
MoveNodeResult
&
aOther
)
=
delete
;
MoveNodeResult
&
operator
=
(
const
MoveNodeResult
&
aOther
)
=
delete
;
MoveNodeResult
(
MoveNodeResult
&
&
aOther
)
=
default
;
MoveNodeResult
&
operator
=
(
MoveNodeResult
&
&
aOther
)
=
default
;
MoveNodeResult
&
operator
|
=
(
const
MoveNodeResult
&
aOther
)
{
mHandled
|
=
aOther
.
mHandled
;
if
(
mRv
=
=
aOther
.
mRv
)
{
mNextInsertionPoint
=
aOther
.
mNextInsertionPoint
;
return
*
this
;
}
if
(
EditorDestroyed
(
)
|
|
aOther
.
EditorDestroyed
(
)
)
{
mRv
=
NS_ERROR_EDITOR_DESTROYED
;
mNextInsertionPoint
.
Clear
(
)
;
return
*
this
;
}
if
(
aOther
.
mRv
=
=
NS_ERROR_NOT_INITIALIZED
)
{
return
*
this
;
}
if
(
mRv
=
=
NS_ERROR_NOT_INITIALIZED
)
{
mRv
=
aOther
.
mRv
;
mNextInsertionPoint
=
aOther
.
mNextInsertionPoint
;
return
*
this
;
}
if
(
Failed
(
)
|
|
aOther
.
Failed
(
)
)
{
mRv
=
NS_ERROR_FAILURE
;
mNextInsertionPoint
.
Clear
(
)
;
return
*
this
;
}
mRv
=
NS_OK
;
mNextInsertionPoint
=
aOther
.
mNextInsertionPoint
;
return
*
this
;
}
private
:
template
<
typename
PT
typename
CT
>
explicit
MoveNodeResult
(
const
EditorDOMPointBase
<
PT
CT
>
&
aNextInsertionPoint
bool
aHandled
)
:
mNextInsertionPoint
(
aNextInsertionPoint
)
mRv
(
aNextInsertionPoint
.
IsSet
(
)
?
NS_OK
:
NS_ERROR_FAILURE
)
mHandled
(
aHandled
&
&
aNextInsertionPoint
.
IsSet
(
)
)
{
if
(
mNextInsertionPoint
.
IsSet
(
)
)
{
AutoEditorDOMPointChildInvalidator
computeOffsetAndForgetChild
(
mNextInsertionPoint
)
;
}
}
MoveNodeResult
(
nsINode
*
aParentNode
uint32_t
aOffsetOfNextInsertionPoint
bool
aHandled
)
{
if
(
!
aParentNode
)
{
mRv
=
NS_ERROR_FAILURE
;
mHandled
=
false
;
return
;
}
aOffsetOfNextInsertionPoint
=
std
:
:
min
(
aOffsetOfNextInsertionPoint
aParentNode
-
>
Length
(
)
)
;
mNextInsertionPoint
.
Set
(
aParentNode
aOffsetOfNextInsertionPoint
)
;
mRv
=
mNextInsertionPoint
.
IsSet
(
)
?
NS_OK
:
NS_ERROR_FAILURE
;
mHandled
=
aHandled
&
&
mNextInsertionPoint
.
IsSet
(
)
;
}
EditorDOMPoint
mNextInsertionPoint
;
nsresult
mRv
;
bool
mHandled
;
friend
MoveNodeResult
MoveNodeIgnored
(
nsINode
*
aParentNode
uint32_t
aOffsetOfNextInsertionPoint
)
;
friend
MoveNodeResult
MoveNodeHandled
(
nsINode
*
aParentNode
uint32_t
aOffsetOfNextInsertionPoint
)
;
template
<
typename
PT
typename
CT
>
friend
MoveNodeResult
MoveNodeIgnored
(
const
EditorDOMPointBase
<
PT
CT
>
&
aNextInsertionPoint
)
;
template
<
typename
PT
typename
CT
>
friend
MoveNodeResult
MoveNodeHandled
(
const
EditorDOMPointBase
<
PT
CT
>
&
aNextInsertionPoint
)
;
}
;
inline
MoveNodeResult
MoveNodeIgnored
(
nsINode
*
aParentNode
uint32_t
aOffsetOfNextInsertionPoint
)
{
return
MoveNodeResult
(
aParentNode
aOffsetOfNextInsertionPoint
false
)
;
}
template
<
typename
PT
typename
CT
>
inline
MoveNodeResult
MoveNodeIgnored
(
const
EditorDOMPointBase
<
PT
CT
>
&
aNextInsertionPoint
)
{
return
MoveNodeResult
(
aNextInsertionPoint
false
)
;
}
inline
MoveNodeResult
MoveNodeHandled
(
nsINode
*
aParentNode
uint32_t
aOffsetOfNextInsertionPoint
)
{
return
MoveNodeResult
(
aParentNode
aOffsetOfNextInsertionPoint
true
)
;
}
template
<
typename
PT
typename
CT
>
inline
MoveNodeResult
MoveNodeHandled
(
const
EditorDOMPointBase
<
PT
CT
>
&
aNextInsertionPoint
)
{
return
MoveNodeResult
(
aNextInsertionPoint
true
)
;
}
class
MOZ_STACK_CLASS
SplitNodeResult
final
{
public
:
bool
Succeeded
(
)
const
{
return
NS_SUCCEEDED
(
mRv
)
;
}
bool
Failed
(
)
const
{
return
NS_FAILED
(
mRv
)
;
}
nsresult
Rv
(
)
const
{
return
mRv
;
}
bool
Handled
(
)
const
{
return
mPreviousNode
|
|
mNextNode
;
}
bool
EditorDestroyed
(
)
const
{
return
mRv
=
=
NS_ERROR_EDITOR_DESTROYED
;
}
bool
DidSplit
(
)
const
{
return
mPreviousNode
&
&
mNextNode
;
}
nsIContent
*
GetLeftNode
(
)
const
{
return
mPreviousNode
&
&
mNextNode
?
mPreviousNode
.
get
(
)
:
nullptr
;
}
nsIContent
*
GetRightNode
(
)
const
{
if
(
mGivenSplitPoint
.
IsSet
(
)
)
{
return
mGivenSplitPoint
.
GetChild
(
)
;
}
return
mPreviousNode
&
&
!
mNextNode
?
mPreviousNode
:
mNextNode
;
}
nsIContent
*
GetPreviousNode
(
)
const
{
if
(
mGivenSplitPoint
.
IsSet
(
)
)
{
return
mGivenSplitPoint
.
IsEndOfContainer
(
)
?
mGivenSplitPoint
.
GetChild
(
)
:
nullptr
;
}
return
mPreviousNode
;
}
nsIContent
*
GetNextNode
(
)
const
{
if
(
mGivenSplitPoint
.
IsSet
(
)
)
{
return
!
mGivenSplitPoint
.
IsEndOfContainer
(
)
?
mGivenSplitPoint
.
GetChild
(
)
:
nullptr
;
}
return
mNextNode
;
}
EditorDOMPoint
SplitPoint
(
)
const
{
if
(
Failed
(
)
)
{
return
EditorDOMPoint
(
)
;
}
if
(
mGivenSplitPoint
.
IsSet
(
)
)
{
return
EditorDOMPoint
(
mGivenSplitPoint
)
;
}
if
(
!
mPreviousNode
)
{
return
EditorDOMPoint
(
mNextNode
)
;
}
EditorDOMPoint
point
(
mPreviousNode
)
;
DebugOnly
<
bool
>
advanced
=
point
.
AdvanceOffset
(
)
;
NS_WARNING_ASSERTION
(
advanced
"
Failed
to
advance
offset
to
after
previous
node
"
)
;
return
point
;
}
SplitNodeResult
(
nsIContent
*
aPreviousNodeOfSplitPoint
nsIContent
*
aNextNodeOfSplitPoint
)
:
mPreviousNode
(
aPreviousNodeOfSplitPoint
)
mNextNode
(
aNextNodeOfSplitPoint
)
mRv
(
NS_OK
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mPreviousNode
|
|
mNextNode
)
;
}
explicit
SplitNodeResult
(
const
EditorRawDOMPoint
&
aGivenSplitPoint
)
:
mGivenSplitPoint
(
aGivenSplitPoint
)
mRv
(
NS_OK
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mGivenSplitPoint
.
IsSet
(
)
)
;
}
explicit
SplitNodeResult
(
nsresult
aRv
)
:
mRv
(
aRv
)
{
MOZ_DIAGNOSTIC_ASSERT
(
NS_FAILED
(
mRv
)
)
;
}
private
:
nsCOMPtr
<
nsIContent
>
mPreviousNode
;
nsCOMPtr
<
nsIContent
>
mNextNode
;
EditorDOMPoint
mGivenSplitPoint
;
nsresult
mRv
;
SplitNodeResult
(
)
=
delete
;
}
;
class
MOZ_STACK_CLASS
SplitRangeOffFromNodeResult
final
{
public
:
bool
Succeeded
(
)
const
{
return
NS_SUCCEEDED
(
mRv
)
;
}
bool
Failed
(
)
const
{
return
NS_FAILED
(
mRv
)
;
}
nsresult
Rv
(
)
const
{
return
mRv
;
}
bool
EditorDestroyed
(
)
const
{
return
mRv
=
=
NS_ERROR_EDITOR_DESTROYED
;
}
nsIContent
*
GetLeftContent
(
)
const
{
return
mLeftContent
;
}
dom
:
:
Element
*
GetLeftContentAsElement
(
)
const
{
return
dom
:
:
Element
:
:
FromNodeOrNull
(
mLeftContent
)
;
}
nsIContent
*
GetMiddleContent
(
)
const
{
return
mMiddleContent
;
}
dom
:
:
Element
*
GetMiddleContentAsElement
(
)
const
{
return
dom
:
:
Element
:
:
FromNodeOrNull
(
mMiddleContent
)
;
}
nsIContent
*
GetRightContent
(
)
const
{
return
mRightContent
;
}
dom
:
:
Element
*
GetRightContentAsElement
(
)
const
{
return
dom
:
:
Element
:
:
FromNodeOrNull
(
mRightContent
)
;
}
SplitRangeOffFromNodeResult
(
nsIContent
*
aLeftContent
nsIContent
*
aMiddleContent
nsIContent
*
aRightContent
)
:
mLeftContent
(
aLeftContent
)
mMiddleContent
(
aMiddleContent
)
mRightContent
(
aRightContent
)
mRv
(
NS_OK
)
{
}
SplitRangeOffFromNodeResult
(
SplitNodeResult
&
aSplitResultAtLeftOfMiddleNode
SplitNodeResult
&
aSplitResultAtRightOfMiddleNode
)
:
mRv
(
NS_OK
)
{
if
(
aSplitResultAtLeftOfMiddleNode
.
Succeeded
(
)
)
{
mLeftContent
=
aSplitResultAtLeftOfMiddleNode
.
GetPreviousNode
(
)
;
}
if
(
aSplitResultAtRightOfMiddleNode
.
Succeeded
(
)
)
{
mRightContent
=
aSplitResultAtRightOfMiddleNode
.
GetNextNode
(
)
;
mMiddleContent
=
aSplitResultAtRightOfMiddleNode
.
GetPreviousNode
(
)
;
}
if
(
!
mMiddleContent
&
&
aSplitResultAtLeftOfMiddleNode
.
Succeeded
(
)
)
{
mMiddleContent
=
aSplitResultAtLeftOfMiddleNode
.
GetNextNode
(
)
;
}
}
explicit
SplitRangeOffFromNodeResult
(
nsresult
aRv
)
:
mRv
(
aRv
)
{
MOZ_DIAGNOSTIC_ASSERT
(
NS_FAILED
(
mRv
)
)
;
}
SplitRangeOffFromNodeResult
(
const
SplitRangeOffFromNodeResult
&
aOther
)
=
delete
;
SplitRangeOffFromNodeResult
&
operator
=
(
const
SplitRangeOffFromNodeResult
&
aOther
)
=
delete
;
SplitRangeOffFromNodeResult
(
SplitRangeOffFromNodeResult
&
&
aOther
)
=
default
;
SplitRangeOffFromNodeResult
&
operator
=
(
SplitRangeOffFromNodeResult
&
&
aOther
)
=
default
;
private
:
nsCOMPtr
<
nsIContent
>
mLeftContent
;
nsCOMPtr
<
nsIContent
>
mMiddleContent
;
nsCOMPtr
<
nsIContent
>
mRightContent
;
nsresult
mRv
;
SplitRangeOffFromNodeResult
(
)
=
delete
;
}
;
class
MOZ_STACK_CLASS
SplitRangeOffResult
final
{
public
:
bool
Succeeded
(
)
const
{
return
NS_SUCCEEDED
(
mRv
)
;
}
bool
Failed
(
)
const
{
return
NS_FAILED
(
mRv
)
;
}
nsresult
Rv
(
)
const
{
return
mRv
;
}
bool
Handled
(
)
const
{
return
mHandled
;
}
bool
EditorDestroyed
(
)
const
{
return
mRv
=
=
NS_ERROR_EDITOR_DESTROYED
;
}
const
EditorDOMPoint
&
SplitPointAtStart
(
)
const
{
return
mSplitPointAtStart
;
}
const
EditorDOMPoint
&
SplitPointAtEnd
(
)
const
{
return
mSplitPointAtEnd
;
}
SplitRangeOffResult
(
)
=
delete
;
SplitRangeOffResult
(
const
EditorDOMPoint
&
aTrackedRangeStart
const
SplitNodeResult
&
aSplitNodeResultAtStart
const
EditorDOMPoint
&
aTrackedRangeEnd
const
SplitNodeResult
&
aSplitNodeResultAtEnd
)
:
mSplitPointAtStart
(
aTrackedRangeStart
)
mSplitPointAtEnd
(
aTrackedRangeEnd
)
mRv
(
NS_OK
)
mHandled
(
aSplitNodeResultAtStart
.
Handled
(
)
|
|
aSplitNodeResultAtEnd
.
Handled
(
)
)
{
MOZ_ASSERT
(
mSplitPointAtStart
.
IsSet
(
)
)
;
MOZ_ASSERT
(
mSplitPointAtEnd
.
IsSet
(
)
)
;
MOZ_ASSERT
(
aSplitNodeResultAtStart
.
Succeeded
(
)
)
;
MOZ_ASSERT
(
aSplitNodeResultAtEnd
.
Succeeded
(
)
)
;
}
explicit
SplitRangeOffResult
(
nsresult
aRv
)
:
mRv
(
aRv
)
mHandled
(
false
)
{
MOZ_DIAGNOSTIC_ASSERT
(
NS_FAILED
(
mRv
)
)
;
}
SplitRangeOffResult
(
const
SplitRangeOffResult
&
aOther
)
=
delete
;
SplitRangeOffResult
&
operator
=
(
const
SplitRangeOffResult
&
aOther
)
=
delete
;
SplitRangeOffResult
(
SplitRangeOffResult
&
&
aOther
)
=
default
;
SplitRangeOffResult
&
operator
=
(
SplitRangeOffResult
&
&
aOther
)
=
default
;
private
:
EditorDOMPoint
mSplitPointAtStart
;
EditorDOMPoint
mSplitPointAtEnd
;
nsresult
mRv
;
bool
mHandled
;
}
;
class
MOZ_RAII
DOMIterator
{
public
:
explicit
DOMIterator
(
)
;
explicit
DOMIterator
(
nsINode
&
aNode
)
;
virtual
~
DOMIterator
(
)
=
default
;
nsresult
Init
(
nsRange
&
aRange
)
;
nsresult
Init
(
const
RawRangeBoundary
&
aStartRef
const
RawRangeBoundary
&
aEndRef
)
;
template
<
class
NodeClass
>
void
AppendAllNodesToArray
(
nsTArray
<
OwningNonNull
<
NodeClass
>
>
&
aArrayOfNodes
)
const
;
typedef
bool
(
*
BoolFunctor
)
(
nsINode
&
aNode
void
*
aClosure
)
;
template
<
class
NodeClass
>
void
AppendNodesToArray
(
BoolFunctor
aFunctor
nsTArray
<
OwningNonNull
<
NodeClass
>
>
&
aArrayOfNodes
void
*
aClosure
=
nullptr
)
const
;
protected
:
ContentIteratorBase
*
mIter
;
PostContentIterator
mPostOrderIter
;
}
;
class
MOZ_RAII
DOMSubtreeIterator
final
:
public
DOMIterator
{
public
:
explicit
DOMSubtreeIterator
(
)
;
virtual
~
DOMSubtreeIterator
(
)
=
default
;
nsresult
Init
(
nsRange
&
aRange
)
;
private
:
ContentSubtreeIterator
mSubtreeIter
;
explicit
DOMSubtreeIterator
(
nsINode
&
aNode
)
=
delete
;
}
;
template
<
typename
EditorDOMPointType
>
class
MOZ_STACK_CLASS
ReplaceRangeDataBase
final
{
public
:
ReplaceRangeDataBase
(
)
=
default
;
template
<
typename
OtherEditorDOMRangeType
>
ReplaceRangeDataBase
(
const
OtherEditorDOMRangeType
&
aRange
const
nsAString
&
aReplaceString
)
:
mRange
(
aRange
)
mReplaceString
(
aReplaceString
)
{
}
template
<
typename
StartPointType
typename
EndPointType
>
ReplaceRangeDataBase
(
const
StartPointType
&
aStart
const
EndPointType
&
aEnd
const
nsAString
&
aReplaceString
)
:
mRange
(
aStart
aEnd
)
mReplaceString
(
aReplaceString
)
{
}
bool
IsSet
(
)
const
{
return
mRange
.
IsPositioned
(
)
;
}
bool
IsSetAndValid
(
)
const
{
return
mRange
.
IsPositionedAndValid
(
)
;
}
bool
Collapsed
(
)
const
{
return
mRange
.
Collapsed
(
)
;
}
bool
HasReplaceString
(
)
const
{
return
!
mReplaceString
.
IsEmpty
(
)
;
}
const
EditorDOMPointType
&
StartRef
(
)
const
{
return
mRange
.
StartRef
(
)
;
}
const
EditorDOMPointType
&
EndRef
(
)
const
{
return
mRange
.
EndRef
(
)
;
}
const
EditorDOMRangeBase
<
EditorDOMPointType
>
&
RangeRef
(
)
const
{
return
mRange
;
}
const
nsString
&
ReplaceStringRef
(
)
const
{
return
mReplaceString
;
}
template
<
typename
PointType
>
MOZ_NEVER_INLINE_DEBUG
void
SetStart
(
const
PointType
&
aStart
)
{
mRange
.
SetStart
(
aStart
)
;
}
template
<
typename
PointType
>
MOZ_NEVER_INLINE_DEBUG
void
SetEnd
(
const
PointType
&
aEnd
)
{
mRange
.
SetEnd
(
aEnd
)
;
}
template
<
typename
StartPointType
typename
EndPointType
>
MOZ_NEVER_INLINE_DEBUG
void
SetStartAndEnd
(
const
StartPointType
&
aStart
const
EndPointType
&
aEnd
)
{
mRange
.
SetRange
(
aStart
aEnd
)
;
}
template
<
typename
OtherEditorDOMRangeType
>
MOZ_NEVER_INLINE_DEBUG
void
SetRange
(
const
OtherEditorDOMRangeType
&
aRange
)
{
mRange
=
aRange
;
}
void
SetReplaceString
(
const
nsAString
&
aReplaceString
)
{
mReplaceString
=
aReplaceString
;
}
template
<
typename
StartPointType
typename
EndPointType
>
MOZ_NEVER_INLINE_DEBUG
void
SetStartAndEnd
(
const
StartPointType
&
aStart
const
EndPointType
&
aEnd
const
nsAString
&
aReplaceString
)
{
SetStartAndEnd
(
aStart
aEnd
)
;
SetReplaceString
(
aReplaceString
)
;
}
template
<
typename
OtherEditorDOMRangeType
>
MOZ_NEVER_INLINE_DEBUG
void
Set
(
const
OtherEditorDOMRangeType
&
aRange
const
nsAString
&
aReplaceString
)
{
SetRange
(
aRange
)
;
SetReplaceString
(
aReplaceString
)
;
}
private
:
EditorDOMRangeBase
<
EditorDOMPointType
>
mRange
;
nsString
mReplaceString
;
}
;
using
ReplaceRangeData
=
ReplaceRangeDataBase
<
EditorDOMPoint
>
;
using
ReplaceRangeInTextsData
=
ReplaceRangeDataBase
<
EditorDOMPointInText
>
;
}
#
endif
