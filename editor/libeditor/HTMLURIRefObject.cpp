#
include
"
HTMLURIRefObject
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
dom
/
Attr
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsDOMAttributeMap
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsIDOMElement
.
h
"
#
include
"
nsIDOMNode
.
h
"
#
include
"
nsISupportsUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsGkAtoms
.
h
"
namespace
mozilla
{
#
define
MATCHES
(
tagName
str
)
tagName
.
EqualsIgnoreCase
(
str
)
HTMLURIRefObject
:
:
HTMLURIRefObject
(
)
:
mCurAttrIndex
(
0
)
mAttributeCnt
(
0
)
mAttrsInited
(
false
)
{
}
HTMLURIRefObject
:
:
~
HTMLURIRefObject
(
)
{
}
NS_IMPL_ISUPPORTS
(
HTMLURIRefObject
nsIURIRefObject
)
NS_IMETHODIMP
HTMLURIRefObject
:
:
Reset
(
)
{
mCurAttrIndex
=
0
;
return
NS_OK
;
}
NS_IMETHODIMP
HTMLURIRefObject
:
:
GetNextURI
(
nsAString
&
aURI
)
{
NS_ENSURE_TRUE
(
mNode
NS_ERROR_NOT_INITIALIZED
)
;
nsCOMPtr
<
dom
:
:
Element
>
element
=
do_QueryInterface
(
mNode
)
;
NS_ENSURE_TRUE
(
element
NS_ERROR_INVALID_ARG
)
;
if
(
!
mAttrsInited
)
{
mAttrsInited
=
true
;
mAttributeCnt
=
element
-
>
GetAttrCount
(
)
;
NS_ENSURE_TRUE
(
mAttributeCnt
NS_ERROR_FAILURE
)
;
mCurAttrIndex
=
0
;
}
while
(
mCurAttrIndex
<
mAttributeCnt
)
{
BorrowedAttrInfo
attrInfo
=
element
-
>
GetAttrInfoAt
(
mCurAttrIndex
+
+
)
;
NS_ENSURE_ARG_POINTER
(
attrInfo
.
mName
)
;
if
(
attrInfo
.
mName
-
>
Equals
(
nsGkAtoms
:
:
href
)
)
{
if
(
!
element
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
a
nsGkAtoms
:
:
area
nsGkAtoms
:
:
base
nsGkAtoms
:
:
link
)
)
{
continue
;
}
attrInfo
.
mValue
-
>
ToString
(
aURI
)
;
if
(
StringBeginsWith
(
aURI
NS_LITERAL_STRING
(
"
#
"
)
)
)
{
aURI
.
Truncate
(
)
;
return
NS_ERROR_INVALID_ARG
;
}
return
NS_OK
;
}
else
if
(
attrInfo
.
mName
-
>
Equals
(
nsGkAtoms
:
:
src
)
)
{
if
(
!
element
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
img
nsGkAtoms
:
:
frame
nsGkAtoms
:
:
iframe
nsGkAtoms
:
:
input
nsGkAtoms
:
:
script
)
)
{
continue
;
}
attrInfo
.
mValue
-
>
ToString
(
aURI
)
;
return
NS_OK
;
}
else
if
(
attrInfo
.
mName
-
>
Equals
(
nsGkAtoms
:
:
content
)
)
{
if
(
!
element
-
>
IsHTMLElement
(
nsGkAtoms
:
:
meta
)
)
{
continue
;
}
}
else
if
(
attrInfo
.
mName
-
>
Equals
(
nsGkAtoms
:
:
longdesc
)
)
{
if
(
!
element
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
img
nsGkAtoms
:
:
frame
nsGkAtoms
:
:
iframe
)
)
{
continue
;
}
}
else
if
(
attrInfo
.
mName
-
>
Equals
(
nsGkAtoms
:
:
usemap
)
)
{
if
(
!
element
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
img
nsGkAtoms
:
:
input
nsGkAtoms
:
:
object
)
)
{
continue
;
}
}
else
if
(
attrInfo
.
mName
-
>
Equals
(
nsGkAtoms
:
:
action
)
)
{
if
(
!
element
-
>
IsHTMLElement
(
nsGkAtoms
:
:
form
)
)
{
continue
;
}
}
else
if
(
attrInfo
.
mName
-
>
Equals
(
nsGkAtoms
:
:
background
)
)
{
if
(
!
element
-
>
IsHTMLElement
(
nsGkAtoms
:
:
body
)
)
{
continue
;
}
}
else
if
(
attrInfo
.
mName
-
>
Equals
(
nsGkAtoms
:
:
codebase
)
)
{
if
(
!
element
-
>
IsHTMLElement
(
nsGkAtoms
:
:
object
)
)
{
continue
;
}
}
else
if
(
attrInfo
.
mName
-
>
Equals
(
nsGkAtoms
:
:
classid
)
)
{
if
(
!
element
-
>
IsHTMLElement
(
nsGkAtoms
:
:
object
)
)
{
continue
;
}
}
else
if
(
attrInfo
.
mName
-
>
Equals
(
nsGkAtoms
:
:
data
)
)
{
if
(
!
element
-
>
IsHTMLElement
(
nsGkAtoms
:
:
object
)
)
{
continue
;
}
}
else
if
(
attrInfo
.
mName
-
>
Equals
(
nsGkAtoms
:
:
cite
)
)
{
if
(
!
element
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
blockquote
nsGkAtoms
:
:
q
nsGkAtoms
:
:
del
nsGkAtoms
:
:
ins
)
)
{
continue
;
}
}
else
if
(
attrInfo
.
mName
-
>
Equals
(
nsGkAtoms
:
:
profile
)
)
{
if
(
!
element
-
>
IsHTMLElement
(
nsGkAtoms
:
:
head
)
)
{
continue
;
}
}
}
return
NS_ERROR_NOT_AVAILABLE
;
}
NS_IMETHODIMP
HTMLURIRefObject
:
:
RewriteAllURIs
(
const
nsAString
&
aOldPat
const
nsAString
&
aNewPat
bool
aMakeRel
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
HTMLURIRefObject
:
:
GetNode
(
nsIDOMNode
*
*
aNode
)
{
NS_ENSURE_TRUE
(
mNode
NS_ERROR_NOT_INITIALIZED
)
;
NS_ENSURE_TRUE
(
aNode
NS_ERROR_NULL_POINTER
)
;
*
aNode
=
mNode
.
get
(
)
;
NS_ADDREF
(
*
aNode
)
;
return
NS_OK
;
}
NS_IMETHODIMP
HTMLURIRefObject
:
:
SetNode
(
nsIDOMNode
*
aNode
)
{
mNode
=
aNode
;
nsAutoString
dummyURI
;
if
(
NS_SUCCEEDED
(
GetNextURI
(
dummyURI
)
)
)
{
mCurAttrIndex
=
0
;
return
NS_OK
;
}
mNode
=
nullptr
;
return
NS_ERROR_INVALID_ARG
;
}
}
nsresult
NS_NewHTMLURIRefObject
(
nsIURIRefObject
*
*
aResult
nsIDOMNode
*
aNode
)
{
RefPtr
<
mozilla
:
:
HTMLURIRefObject
>
refObject
=
new
mozilla
:
:
HTMLURIRefObject
(
)
;
nsresult
rv
=
refObject
-
>
SetNode
(
aNode
)
;
if
(
NS_FAILED
(
rv
)
)
{
*
aResult
=
0
;
return
rv
;
}
refObject
.
forget
(
aResult
)
;
return
NS_OK
;
}
