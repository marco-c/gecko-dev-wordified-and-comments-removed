#
include
"
CompositionTransaction
.
h
"
#
include
"
mozilla
/
EditorBase
.
h
"
#
include
"
mozilla
/
SelectionState
.
h
"
#
include
"
mozilla
/
TextComposition
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsISelectionController
.
h
"
#
include
"
nsQueryObject
.
h
"
namespace
mozilla
{
using
namespace
dom
;
already_AddRefed
<
CompositionTransaction
>
CompositionTransaction
:
:
Create
(
EditorBase
&
aEditorBase
const
nsAString
&
aStringToInsert
const
EditorDOMPointInText
&
aPointToInsert
)
{
MOZ_ASSERT
(
aPointToInsert
.
IsSetAndValid
(
)
)
;
TextComposition
*
composition
=
aEditorBase
.
GetComposition
(
)
;
MOZ_RELEASE_ASSERT
(
composition
)
;
EditorDOMPointInText
pointToInsert
;
if
(
Text
*
textNode
=
composition
-
>
GetContainerTextNode
(
)
)
{
pointToInsert
.
Set
(
textNode
composition
-
>
XPOffsetInTextNode
(
)
)
;
NS_WARNING_ASSERTION
(
pointToInsert
.
GetContainerAsText
(
)
=
=
composition
-
>
GetContainerTextNode
(
)
"
The
editor
tries
to
insert
composition
string
into
different
node
"
)
;
NS_WARNING_ASSERTION
(
pointToInsert
.
Offset
(
)
=
=
composition
-
>
XPOffsetInTextNode
(
)
"
The
editor
tries
to
insert
composition
string
into
different
offset
"
)
;
}
else
{
pointToInsert
=
aPointToInsert
;
}
RefPtr
<
CompositionTransaction
>
transaction
=
new
CompositionTransaction
(
aEditorBase
aStringToInsert
pointToInsert
)
;
composition
-
>
OnCreateCompositionTransaction
(
aStringToInsert
pointToInsert
.
ContainerAsText
(
)
pointToInsert
.
Offset
(
)
)
;
return
transaction
.
forget
(
)
;
}
CompositionTransaction
:
:
CompositionTransaction
(
EditorBase
&
aEditorBase
const
nsAString
&
aStringToInsert
const
EditorDOMPointInText
&
aPointToInsert
)
:
mTextNode
(
aPointToInsert
.
ContainerAsText
(
)
)
mOffset
(
aPointToInsert
.
Offset
(
)
)
mReplaceLength
(
aEditorBase
.
GetComposition
(
)
-
>
XPLengthInTextNode
(
)
)
mRanges
(
aEditorBase
.
GetComposition
(
)
-
>
GetRanges
(
)
)
mStringToInsert
(
aStringToInsert
)
mEditorBase
(
&
aEditorBase
)
mFixed
(
false
)
{
MOZ_ASSERT
(
mTextNode
-
>
TextLength
(
)
>
=
mOffset
)
;
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
CompositionTransaction
EditTransactionBase
mEditorBase
mTextNode
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
CompositionTransaction
)
NS_INTERFACE_MAP_ENTRY_CONCRETE
(
CompositionTransaction
)
NS_INTERFACE_MAP_END_INHERITING
(
EditTransactionBase
)
NS_IMPL_ADDREF_INHERITED
(
CompositionTransaction
EditTransactionBase
)
NS_IMPL_RELEASE_INHERITED
(
CompositionTransaction
EditTransactionBase
)
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHODIMP
CompositionTransaction
:
:
DoTransaction
(
)
{
if
(
NS_WARN_IF
(
!
mEditorBase
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
if
(
NS_WARN_IF
(
!
mEditorBase
-
>
GetSelectionController
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
RefPtr
<
EditorBase
>
editorBase
=
mEditorBase
;
RefPtr
<
Text
>
textNode
=
mTextNode
;
if
(
mReplaceLength
=
=
0
)
{
ErrorResult
error
;
editorBase
-
>
DoInsertText
(
*
textNode
mOffset
mStringToInsert
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
EditorBase
:
:
DoInsertText
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
editorBase
-
>
RangeUpdaterRef
(
)
.
SelAdjInsertText
(
*
textNode
mOffset
mStringToInsert
)
;
}
else
{
uint32_t
replaceableLength
=
textNode
-
>
TextLength
(
)
-
mOffset
;
ErrorResult
error
;
editorBase
-
>
DoReplaceText
(
*
textNode
mOffset
mReplaceLength
mStringToInsert
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
EditorBase
:
:
DoReplaceText
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
editorBase
-
>
RangeUpdaterRef
(
)
.
SelAdjDeleteText
(
*
textNode
mOffset
mReplaceLength
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
RangeUpdater
:
:
SelAdjDeleteText
(
)
failed
but
ignored
"
)
;
editorBase
-
>
RangeUpdaterRef
(
)
.
SelAdjInsertText
(
*
textNode
mOffset
mStringToInsert
)
;
if
(
replaceableLength
<
mReplaceLength
)
{
int32_t
remainLength
=
mReplaceLength
-
replaceableLength
;
nsCOMPtr
<
nsINode
>
node
=
textNode
-
>
GetNextSibling
(
)
;
IgnoredErrorResult
ignoredError
;
while
(
node
&
&
node
-
>
IsText
(
)
&
&
remainLength
>
0
)
{
RefPtr
<
Text
>
textNode
=
static_cast
<
Text
*
>
(
node
.
get
(
)
)
;
uint32_t
textLength
=
textNode
-
>
TextLength
(
)
;
editorBase
-
>
DoDeleteText
(
*
textNode
0
remainLength
ignoredError
)
;
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
EditorBase
:
:
DoDeleteText
(
)
failed
but
ignored
"
)
;
ignoredError
.
SuppressException
(
)
;
editorBase
-
>
RangeUpdaterRef
(
)
.
SelAdjDeleteText
(
*
textNode
0
remainLength
)
;
remainLength
-
=
textLength
;
node
=
node
-
>
GetNextSibling
(
)
;
}
}
}
nsresult
rv
=
SetSelectionForRanges
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
CompositionTransaction
:
:
SetSelectionForRanges
(
)
failed
"
)
;
return
rv
;
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHODIMP
CompositionTransaction
:
:
UndoTransaction
(
)
{
if
(
NS_WARN_IF
(
!
mEditorBase
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
RefPtr
<
Selection
>
selection
=
mEditorBase
-
>
GetSelection
(
)
;
if
(
NS_WARN_IF
(
!
selection
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
RefPtr
<
EditorBase
>
editorBase
=
mEditorBase
;
RefPtr
<
Text
>
textNode
=
mTextNode
;
ErrorResult
error
;
editorBase
-
>
DoDeleteText
(
*
textNode
mOffset
mStringToInsert
.
Length
(
)
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
EditorBase
:
:
DoDeleteText
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
nsresult
rv
=
selection
-
>
Collapse
(
textNode
mOffset
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Selection
:
:
Collapse
(
)
failed
"
)
;
return
rv
;
}
NS_IMETHODIMP
CompositionTransaction
:
:
Merge
(
nsITransaction
*
aTransaction
bool
*
aDidMerge
)
{
if
(
NS_WARN_IF
(
!
aTransaction
)
|
|
NS_WARN_IF
(
!
aDidMerge
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
mFixed
)
{
*
aDidMerge
=
false
;
return
NS_OK
;
}
RefPtr
<
CompositionTransaction
>
otherTransaction
=
do_QueryObject
(
aTransaction
)
;
if
(
otherTransaction
)
{
mStringToInsert
=
otherTransaction
-
>
mStringToInsert
;
mRanges
=
otherTransaction
-
>
mRanges
;
*
aDidMerge
=
true
;
return
NS_OK
;
}
*
aDidMerge
=
false
;
return
NS_OK
;
}
void
CompositionTransaction
:
:
MarkFixed
(
)
{
mFixed
=
true
;
}
nsresult
CompositionTransaction
:
:
SetSelectionForRanges
(
)
{
if
(
NS_WARN_IF
(
!
mEditorBase
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsresult
rv
=
SetIMESelection
(
*
mEditorBase
mTextNode
mOffset
mStringToInsert
.
Length
(
)
mRanges
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
CompositionTransaction
:
:
SetIMESelection
(
)
failed
"
)
;
return
rv
;
}
nsresult
CompositionTransaction
:
:
SetIMESelection
(
EditorBase
&
aEditorBase
Text
*
aTextNode
uint32_t
aOffsetInNode
uint32_t
aLengthOfCompositionString
const
TextRangeArray
*
aRanges
)
{
RefPtr
<
Selection
>
selection
=
aEditorBase
.
GetSelection
(
)
;
if
(
NS_WARN_IF
(
!
selection
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
SelectionBatcher
selectionBatcher
(
selection
)
;
static
const
RawSelectionType
kIMESelections
[
]
=
{
nsISelectionController
:
:
SELECTION_IME_RAWINPUT
nsISelectionController
:
:
SELECTION_IME_SELECTEDRAWTEXT
nsISelectionController
:
:
SELECTION_IME_CONVERTEDTEXT
nsISelectionController
:
:
SELECTION_IME_SELECTEDCONVERTEDTEXT
}
;
nsCOMPtr
<
nsISelectionController
>
selectionController
=
aEditorBase
.
GetSelectionController
(
)
;
if
(
NS_WARN_IF
(
!
selectionController
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
IgnoredErrorResult
ignoredError
;
for
(
uint32_t
i
=
0
;
i
<
ArrayLength
(
kIMESelections
)
;
+
+
i
)
{
RefPtr
<
Selection
>
selectionOfIME
=
selectionController
-
>
GetSelection
(
kIMESelections
[
i
]
)
;
if
(
!
selectionOfIME
)
{
NS_WARNING
(
"
nsISelectionController
:
:
GetSelection
(
)
failed
"
)
;
continue
;
}
selectionOfIME
-
>
RemoveAllRanges
(
ignoredError
)
;
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
Selection
:
:
RemoveAllRanges
(
)
failed
but
ignored
"
)
;
ignoredError
.
SuppressException
(
)
;
}
bool
setCaret
=
false
;
uint32_t
countOfRanges
=
aRanges
?
aRanges
-
>
Length
(
)
:
0
;
#
ifdef
DEBUG
uint32_t
maxOffset
=
aTextNode
-
>
Length
(
)
;
#
endif
nsresult
rv
=
NS_OK
;
for
(
uint32_t
i
=
0
;
i
<
countOfRanges
;
+
+
i
)
{
const
TextRange
&
textRange
=
aRanges
-
>
ElementAt
(
i
)
;
if
(
textRange
.
mRangeType
=
=
TextRangeType
:
:
eCaret
)
{
NS_ASSERTION
(
!
setCaret
"
The
ranges
already
has
caret
position
"
)
;
NS_ASSERTION
(
!
textRange
.
Length
(
)
"
EditorBase
doesn
'
t
support
wide
caret
"
)
;
int32_t
caretOffset
=
static_cast
<
int32_t
>
(
aOffsetInNode
+
std
:
:
min
(
textRange
.
mStartOffset
aLengthOfCompositionString
)
)
;
MOZ_ASSERT
(
caretOffset
>
=
0
&
&
static_cast
<
uint32_t
>
(
caretOffset
)
<
=
maxOffset
)
;
rv
=
selection
-
>
Collapse
(
aTextNode
caretOffset
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Selection
:
:
Collapse
(
)
failed
but
might
be
ignored
"
)
;
setCaret
=
setCaret
|
|
NS_SUCCEEDED
(
rv
)
;
if
(
!
setCaret
)
{
continue
;
}
aEditorBase
.
HideCaret
(
false
)
;
continue
;
}
if
(
!
textRange
.
Length
(
)
)
{
NS_WARNING
(
"
Any
clauses
must
not
be
empty
"
)
;
continue
;
}
RefPtr
<
nsRange
>
clauseRange
;
int32_t
startOffset
=
static_cast
<
int32_t
>
(
aOffsetInNode
+
std
:
:
min
(
textRange
.
mStartOffset
aLengthOfCompositionString
)
)
;
MOZ_ASSERT
(
startOffset
>
=
0
&
&
static_cast
<
uint32_t
>
(
startOffset
)
<
=
maxOffset
)
;
int32_t
endOffset
=
static_cast
<
int32_t
>
(
aOffsetInNode
+
std
:
:
min
(
textRange
.
mEndOffset
aLengthOfCompositionString
)
)
;
MOZ_ASSERT
(
endOffset
>
=
startOffset
&
&
static_cast
<
uint32_t
>
(
endOffset
)
<
=
maxOffset
)
;
clauseRange
=
nsRange
:
:
Create
(
aTextNode
startOffset
aTextNode
endOffset
IgnoreErrors
(
)
)
;
if
(
!
clauseRange
)
{
NS_WARNING
(
"
nsRange
:
:
Create
(
)
failed
but
might
be
ignored
"
)
;
break
;
}
RefPtr
<
Selection
>
selectionOfIME
=
selectionController
-
>
GetSelection
(
ToRawSelectionType
(
textRange
.
mRangeType
)
)
;
if
(
!
selectionOfIME
)
{
NS_WARNING
(
"
nsISelectionController
:
:
GetSelection
(
)
failed
but
might
be
"
"
ignored
"
)
;
break
;
}
IgnoredErrorResult
ignoredError
;
selectionOfIME
-
>
AddRangeAndSelectFramesAndNotifyListeners
(
*
clauseRange
ignoredError
)
;
if
(
ignoredError
.
Failed
(
)
)
{
NS_WARNING
(
"
Selection
:
:
AddRangeAndSelectFramesAndNotifyListeners
(
)
failed
but
"
"
might
be
ignored
"
)
;
break
;
}
rv
=
selectionOfIME
-
>
SetTextRangeStyle
(
clauseRange
textRange
.
mRangeStyle
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Selection
:
:
SetTextRangeStyle
(
)
failed
but
might
be
ignored
"
)
;
break
;
}
}
if
(
!
setCaret
)
{
int32_t
caretOffset
=
static_cast
<
int32_t
>
(
aOffsetInNode
+
aLengthOfCompositionString
)
;
MOZ_ASSERT
(
caretOffset
>
=
0
&
&
static_cast
<
uint32_t
>
(
caretOffset
)
<
=
maxOffset
)
;
rv
=
selection
-
>
Collapse
(
aTextNode
caretOffset
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Selection
:
:
Collapse
(
)
failed
"
)
;
if
(
countOfRanges
)
{
aEditorBase
.
HideCaret
(
true
)
;
}
}
return
rv
;
}
}
