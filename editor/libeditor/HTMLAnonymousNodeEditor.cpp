#
include
"
mozilla
/
HTMLEditor
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsComputedDOMStyle
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIAtom
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsIDOMCSSPrimitiveValue
.
h
"
#
include
"
nsIDOMCSSStyleDeclaration
.
h
"
#
include
"
nsIDOMCSSValue
.
h
"
#
include
"
nsIDOMElement
.
h
"
#
include
"
nsIDOMEventTarget
.
h
"
#
include
"
nsIDOMHTMLElement
.
h
"
#
include
"
nsIDOMNode
.
h
"
#
include
"
nsIDOMWindow
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIDocumentObserver
.
h
"
#
include
"
nsIHTMLAbsPosEditor
.
h
"
#
include
"
nsIHTMLInlineTableEditor
.
h
"
#
include
"
nsIHTMLObjectResizer
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsISupportsUtils
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsContentUtils
.
h
"
class
nsIDOMEventListener
;
class
nsISelection
;
namespace
mozilla
{
using
namespace
dom
;
static
int32_t
GetCSSFloatValue
(
nsIDOMCSSStyleDeclaration
*
aDecl
const
nsAString
&
aProperty
)
{
MOZ_ASSERT
(
aDecl
)
;
nsCOMPtr
<
nsIDOMCSSValue
>
value
;
nsresult
rv
=
aDecl
-
>
GetPropertyCSSValue
(
aProperty
getter_AddRefs
(
value
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
value
)
{
return
0
;
}
nsCOMPtr
<
nsIDOMCSSPrimitiveValue
>
val
=
do_QueryInterface
(
value
)
;
uint16_t
type
;
val
-
>
GetPrimitiveType
(
&
type
)
;
float
f
=
0
;
switch
(
type
)
{
case
nsIDOMCSSPrimitiveValue
:
:
CSS_PX
:
rv
=
val
-
>
GetFloatValue
(
nsIDOMCSSPrimitiveValue
:
:
CSS_PX
&
f
)
;
NS_ENSURE_SUCCESS
(
rv
0
)
;
break
;
case
nsIDOMCSSPrimitiveValue
:
:
CSS_IDENT
:
{
nsAutoString
str
;
val
-
>
GetStringValue
(
str
)
;
if
(
str
.
EqualsLiteral
(
"
thin
"
)
)
{
f
=
1
;
}
else
if
(
str
.
EqualsLiteral
(
"
medium
"
)
)
{
f
=
3
;
}
else
if
(
str
.
EqualsLiteral
(
"
thick
"
)
)
{
f
=
5
;
}
break
;
}
}
return
(
int32_t
)
f
;
}
class
ElementDeletionObserver
final
:
public
nsStubMutationObserver
{
public
:
ElementDeletionObserver
(
nsIContent
*
aNativeAnonNode
nsIContent
*
aObservedNode
)
:
mNativeAnonNode
(
aNativeAnonNode
)
mObservedNode
(
aObservedNode
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_NSIMUTATIONOBSERVER_PARENTCHAINCHANGED
NS_DECL_NSIMUTATIONOBSERVER_NODEWILLBEDESTROYED
protected
:
~
ElementDeletionObserver
(
)
{
}
nsIContent
*
mNativeAnonNode
;
nsIContent
*
mObservedNode
;
}
;
NS_IMPL_ISUPPORTS
(
ElementDeletionObserver
nsIMutationObserver
)
void
ElementDeletionObserver
:
:
ParentChainChanged
(
nsIContent
*
aContent
)
{
if
(
aContent
=
=
mObservedNode
&
&
mNativeAnonNode
&
&
mNativeAnonNode
-
>
GetParentNode
(
)
=
=
aContent
)
{
if
(
mNativeAnonNode
-
>
OwnerDoc
(
)
!
=
mObservedNode
-
>
OwnerDoc
(
)
)
{
mObservedNode
-
>
RemoveMutationObserver
(
this
)
;
mObservedNode
=
nullptr
;
mNativeAnonNode
-
>
RemoveMutationObserver
(
this
)
;
mNativeAnonNode
-
>
UnbindFromTree
(
)
;
mNativeAnonNode
=
nullptr
;
NS_RELEASE_THIS
(
)
;
return
;
}
mNativeAnonNode
-
>
UnbindFromTree
(
)
;
mNativeAnonNode
-
>
BindToTree
(
mObservedNode
-
>
GetUncomposedDoc
(
)
mObservedNode
mObservedNode
true
)
;
}
}
void
ElementDeletionObserver
:
:
NodeWillBeDestroyed
(
const
nsINode
*
aNode
)
{
NS_ASSERTION
(
aNode
=
=
mNativeAnonNode
|
|
aNode
=
=
mObservedNode
"
Wrong
aNode
!
"
)
;
if
(
aNode
=
=
mNativeAnonNode
)
{
mObservedNode
-
>
RemoveMutationObserver
(
this
)
;
mObservedNode
=
nullptr
;
}
else
{
mNativeAnonNode
-
>
RemoveMutationObserver
(
this
)
;
mNativeAnonNode
-
>
UnbindFromTree
(
)
;
mNativeAnonNode
=
nullptr
;
}
NS_RELEASE_THIS
(
)
;
}
ManualNACPtr
HTMLEditor
:
:
CreateAnonymousElement
(
nsIAtom
*
aTag
nsIContent
&
aParentContent
const
nsAString
&
aAnonClass
bool
aIsCreatedHidden
)
{
if
(
!
aParentContent
.
IsHTMLElement
(
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIDocument
>
doc
=
GetDocument
(
)
;
if
(
NS_WARN_IF
(
!
doc
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIPresShell
>
ps
=
GetPresShell
(
)
;
if
(
NS_WARN_IF
(
!
ps
)
)
{
return
nullptr
;
}
RefPtr
<
Element
>
newContentRaw
=
CreateHTMLContent
(
aTag
)
;
if
(
NS_WARN_IF
(
!
newContentRaw
)
)
{
return
nullptr
;
}
if
(
aIsCreatedHidden
)
{
nsresult
rv
=
newContentRaw
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
_class
NS_LITERAL_STRING
(
"
hidden
"
)
true
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
}
if
(
!
aAnonClass
.
IsEmpty
(
)
)
{
nsresult
rv
=
newContentRaw
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
_moz_anonclass
aAnonClass
true
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
}
{
nsAutoScriptBlocker
scriptBlocker
;
newContentRaw
-
>
SetIsNativeAnonymousRoot
(
)
;
nsresult
rv
=
newContentRaw
-
>
BindToTree
(
doc
&
aParentContent
&
aParentContent
true
)
;
if
(
NS_FAILED
(
rv
)
)
{
newContentRaw
-
>
UnbindFromTree
(
)
;
return
nullptr
;
}
}
ManualNACPtr
newContent
(
newContentRaw
.
forget
(
)
)
;
if
(
ServoStyleSet
*
styleSet
=
ps
-
>
StyleSet
(
)
-
>
GetAsServo
(
)
)
{
if
(
styleSet
-
>
MayTraverseFrom
(
newContent
)
)
{
styleSet
-
>
StyleNewSubtree
(
newContent
)
;
}
}
ElementDeletionObserver
*
observer
=
new
ElementDeletionObserver
(
newContent
&
aParentContent
)
;
NS_ADDREF
(
observer
)
;
aParentContent
.
AddMutationObserver
(
observer
)
;
newContent
-
>
AddMutationObserver
(
observer
)
;
#
ifdef
DEBUG
newContent
-
>
SetProperty
(
nsGkAtoms
:
:
restylableAnonymousNode
reinterpret_cast
<
void
*
>
(
true
)
)
;
#
endif
ps
-
>
PostRecreateFramesFor
(
newContent
)
;
return
Move
(
newContent
)
;
}
void
HTMLEditor
:
:
RemoveListenerAndDeleteRef
(
const
nsAString
&
aEvent
nsIDOMEventListener
*
aListener
bool
aUseCapture
ManualNACPtr
aElement
nsIPresShell
*
aShell
)
{
nsCOMPtr
<
nsIDOMEventTarget
>
evtTarget
(
do_QueryInterface
(
aElement
)
)
;
if
(
evtTarget
)
{
evtTarget
-
>
RemoveEventListener
(
aEvent
aListener
aUseCapture
)
;
}
DeleteRefToAnonymousNode
(
Move
(
aElement
)
aShell
)
;
}
void
HTMLEditor
:
:
DeleteRefToAnonymousNode
(
ManualNACPtr
aContent
nsIPresShell
*
aShell
)
{
if
(
NS_WARN_IF
(
!
aContent
)
)
{
return
;
}
nsIContent
*
parentContent
=
aContent
-
>
GetParent
(
)
;
if
(
NS_WARN_IF
(
!
parentContent
)
)
{
return
;
}
nsAutoScriptBlocker
scriptBlocker
;
if
(
aContent
-
>
IsInComposedDoc
(
)
&
&
aShell
&
&
aShell
-
>
GetPresContext
(
)
&
&
aShell
-
>
GetPresContext
(
)
-
>
GetPresShell
(
)
=
=
aShell
)
{
nsCOMPtr
<
nsIDocumentObserver
>
docObserver
=
do_QueryInterface
(
aShell
)
;
if
(
docObserver
)
{
nsCOMPtr
<
nsIDocument
>
document
=
GetDocument
(
)
;
if
(
document
)
{
docObserver
-
>
BeginUpdate
(
document
UPDATE_CONTENT_MODEL
)
;
}
docObserver
-
>
ContentRemoved
(
aContent
-
>
GetComposedDoc
(
)
parentContent
aContent
-
1
aContent
-
>
GetPreviousSibling
(
)
)
;
if
(
document
)
{
docObserver
-
>
EndUpdate
(
document
UPDATE_CONTENT_MODEL
)
;
}
}
}
}
NS_IMETHODIMP
HTMLEditor
:
:
CheckSelectionStateForAnonymousButtons
(
nsISelection
*
aSelection
)
{
NS_ENSURE_ARG_POINTER
(
aSelection
)
;
NS_ENSURE_TRUE
(
mIsObjectResizingEnabled
|
|
mIsAbsolutelyPositioningEnabled
|
|
mIsInlineTableEditingEnabled
NS_OK
)
;
if
(
mIsMoving
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIDOMElement
>
focusElement
;
nsresult
rv
=
GetSelectionContainer
(
getter_AddRefs
(
focusElement
)
)
;
NS_ENSURE_TRUE
(
focusElement
NS_OK
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
dom
:
:
Element
>
focusElementNode
=
do_QueryInterface
(
focusElement
)
;
NS_ENSURE_STATE
(
focusElementNode
)
;
if
(
!
focusElementNode
-
>
IsInUncomposedDoc
(
)
)
{
return
NS_OK
;
}
nsAutoString
focusTagName
;
rv
=
focusElement
-
>
GetTagName
(
focusTagName
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
ToLowerCase
(
focusTagName
)
;
nsCOMPtr
<
nsIAtom
>
focusTagAtom
=
NS_Atomize
(
focusTagName
)
;
nsCOMPtr
<
nsIDOMElement
>
absPosElement
;
if
(
mIsAbsolutelyPositioningEnabled
)
{
rv
=
GetAbsolutelyPositionedSelectionContainer
(
getter_AddRefs
(
absPosElement
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
nsCOMPtr
<
nsIDOMElement
>
cellElement
;
if
(
mIsObjectResizingEnabled
|
|
mIsInlineTableEditingEnabled
)
{
rv
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
td
"
)
nullptr
getter_AddRefs
(
cellElement
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
if
(
mIsObjectResizingEnabled
&
&
cellElement
)
{
if
(
nsGkAtoms
:
:
img
!
=
focusTagAtom
)
{
nsCOMPtr
<
nsIDOMNode
>
tableNode
=
GetEnclosingTable
(
cellElement
)
;
focusElement
=
do_QueryInterface
(
tableNode
)
;
focusTagAtom
=
nsGkAtoms
:
:
table
;
}
}
if
(
nsGkAtoms
:
:
img
!
=
focusTagAtom
&
&
nsGkAtoms
:
:
table
!
=
focusTagAtom
)
{
focusElement
=
absPosElement
;
}
if
(
mIsAbsolutelyPositioningEnabled
&
&
mAbsolutelyPositionedObject
&
&
absPosElement
!
=
GetAsDOMNode
(
mAbsolutelyPositionedObject
)
)
{
rv
=
HideGrabber
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ASSERTION
(
!
mAbsolutelyPositionedObject
"
HideGrabber
failed
"
)
;
}
if
(
mIsObjectResizingEnabled
&
&
mResizedObject
&
&
GetAsDOMNode
(
mResizedObject
)
!
=
focusElement
)
{
rv
=
HideResizers
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ASSERTION
(
!
mResizedObject
"
HideResizers
failed
"
)
;
}
if
(
mIsInlineTableEditingEnabled
&
&
mInlineEditedCell
&
&
mInlineEditedCell
!
=
cellElement
)
{
rv
=
HideInlineTableEditingUI
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ASSERTION
(
!
mInlineEditedCell
"
HideInlineTableEditingUI
failed
"
)
;
}
nsIContent
*
hostContent
=
GetActiveEditingHost
(
)
;
nsCOMPtr
<
nsIDOMNode
>
hostNode
=
do_QueryInterface
(
hostContent
)
;
if
(
mIsObjectResizingEnabled
&
&
focusElement
&
&
IsModifiableNode
(
focusElement
)
&
&
focusElement
!
=
hostNode
)
{
if
(
nsGkAtoms
:
:
img
=
=
focusTagAtom
)
{
mResizedObjectIsAnImage
=
true
;
}
if
(
mResizedObject
)
{
nsresult
rv
=
RefreshResizers
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
else
{
nsresult
rv
=
ShowResizers
(
focusElement
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
}
if
(
mIsAbsolutelyPositioningEnabled
&
&
absPosElement
&
&
IsModifiableNode
(
absPosElement
)
&
&
absPosElement
!
=
hostNode
)
{
if
(
mAbsolutelyPositionedObject
)
{
nsresult
rv
=
RefreshGrabber
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
else
{
nsresult
rv
=
ShowGrabberOnElement
(
absPosElement
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
}
if
(
mIsInlineTableEditingEnabled
&
&
cellElement
&
&
IsModifiableNode
(
cellElement
)
&
&
cellElement
!
=
hostNode
)
{
if
(
mInlineEditedCell
)
{
nsresult
rv
=
RefreshInlineTableEditingUI
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
else
{
nsresult
rv
=
ShowInlineTableEditingUI
(
cellElement
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
}
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
GetPositionAndDimensions
(
Element
&
aElement
int32_t
&
aX
int32_t
&
aY
int32_t
&
aW
int32_t
&
aH
int32_t
&
aBorderLeft
int32_t
&
aBorderTop
int32_t
&
aMarginLeft
int32_t
&
aMarginTop
)
{
bool
isPositioned
=
aElement
.
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
_moz_abspos
)
;
if
(
!
isPositioned
)
{
nsAutoString
positionStr
;
mCSSEditUtils
-
>
GetComputedProperty
(
aElement
*
nsGkAtoms
:
:
position
positionStr
)
;
isPositioned
=
positionStr
.
EqualsLiteral
(
"
absolute
"
)
;
}
if
(
isPositioned
)
{
mResizedObjectIsAbsolutelyPositioned
=
true
;
RefPtr
<
nsComputedDOMStyle
>
cssDecl
=
mCSSEditUtils
-
>
GetComputedStyle
(
&
aElement
)
;
NS_ENSURE_STATE
(
cssDecl
)
;
aBorderLeft
=
GetCSSFloatValue
(
cssDecl
NS_LITERAL_STRING
(
"
border
-
left
-
width
"
)
)
;
aBorderTop
=
GetCSSFloatValue
(
cssDecl
NS_LITERAL_STRING
(
"
border
-
top
-
width
"
)
)
;
aMarginLeft
=
GetCSSFloatValue
(
cssDecl
NS_LITERAL_STRING
(
"
margin
-
left
"
)
)
;
aMarginTop
=
GetCSSFloatValue
(
cssDecl
NS_LITERAL_STRING
(
"
margin
-
top
"
)
)
;
aX
=
GetCSSFloatValue
(
cssDecl
NS_LITERAL_STRING
(
"
left
"
)
)
+
aMarginLeft
+
aBorderLeft
;
aY
=
GetCSSFloatValue
(
cssDecl
NS_LITERAL_STRING
(
"
top
"
)
)
+
aMarginTop
+
aBorderTop
;
aW
=
GetCSSFloatValue
(
cssDecl
NS_LITERAL_STRING
(
"
width
"
)
)
;
aH
=
GetCSSFloatValue
(
cssDecl
NS_LITERAL_STRING
(
"
height
"
)
)
;
}
else
{
mResizedObjectIsAbsolutelyPositioned
=
false
;
nsCOMPtr
<
nsIDOMHTMLElement
>
htmlElement
=
do_QueryInterface
(
&
aElement
)
;
if
(
!
htmlElement
)
{
return
NS_ERROR_NULL_POINTER
;
}
GetElementOrigin
(
aElement
aX
aY
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
htmlElement
-
>
GetOffsetWidth
(
&
aW
)
)
)
|
|
NS_WARN_IF
(
NS_FAILED
(
htmlElement
-
>
GetOffsetHeight
(
&
aH
)
)
)
)
{
return
NS_ERROR_FAILURE
;
}
aBorderLeft
=
0
;
aBorderTop
=
0
;
aMarginLeft
=
0
;
aMarginTop
=
0
;
}
return
NS_OK
;
}
void
HTMLEditor
:
:
SetAnonymousElementPosition
(
int32_t
aX
int32_t
aY
Element
*
aElement
)
{
mCSSEditUtils
-
>
SetCSSPropertyPixels
(
*
aElement
*
nsGkAtoms
:
:
left
aX
)
;
mCSSEditUtils
-
>
SetCSSPropertyPixels
(
*
aElement
*
nsGkAtoms
:
:
top
aY
)
;
}
}
