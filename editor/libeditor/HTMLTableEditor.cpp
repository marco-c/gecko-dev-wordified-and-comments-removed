#
include
<
stdio
.
h
>
#
include
"
mozilla
/
HTMLEditor
.
h
"
#
include
"
HTMLEditUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
EditAction
.
h
"
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
mozilla
/
EditorUtils
.
h
"
#
include
"
mozilla
/
FlushType
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsAlgorithm
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIDOMNode
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsISupportsUtils
.
h
"
#
include
"
nsITableCellLayout
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsQueryFrame
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTableCellFrame
.
h
"
#
include
"
nsTableWrapperFrame
.
h
"
#
include
"
nscore
.
h
"
#
include
<
algorithm
>
namespace
mozilla
{
using
namespace
dom
;
class
MOZ_STACK_CLASS
AutoSelectionSetterAfterTableEdit
final
{
private
:
RefPtr
<
HTMLEditor
>
mHTMLEditor
;
RefPtr
<
Element
>
mTable
;
int32_t
mCol
mRow
mDirection
mSelected
;
public
:
AutoSelectionSetterAfterTableEdit
(
HTMLEditor
&
aHTMLEditor
Element
*
aTable
int32_t
aRow
int32_t
aCol
int32_t
aDirection
bool
aSelected
)
:
mHTMLEditor
(
&
aHTMLEditor
)
mTable
(
aTable
)
mCol
(
aCol
)
mRow
(
aRow
)
mDirection
(
aDirection
)
mSelected
(
aSelected
)
{
}
~
AutoSelectionSetterAfterTableEdit
(
)
{
if
(
mHTMLEditor
)
{
mHTMLEditor
-
>
SetSelectionAfterTableEdit
(
mTable
mRow
mCol
mDirection
mSelected
)
;
}
}
void
CancelSetCaret
(
)
{
mHTMLEditor
=
nullptr
;
mTable
=
nullptr
;
}
}
;
nsresult
HTMLEditor
:
:
InsertCell
(
Element
*
aCell
int32_t
aRowSpan
int32_t
aColSpan
bool
aAfter
bool
aIsHeader
Element
*
*
aNewCell
)
{
if
(
aNewCell
)
{
*
aNewCell
=
nullptr
;
}
if
(
NS_WARN_IF
(
!
aCell
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
EditorDOMPoint
pointToInsert
(
aCell
)
;
if
(
NS_WARN_IF
(
!
pointToInsert
.
IsSet
(
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
RefPtr
<
Element
>
newCell
=
CreateElementWithDefaults
(
aIsHeader
?
NS_LITERAL_STRING
(
"
th
"
)
:
NS_LITERAL_STRING
(
"
tb
"
)
)
;
if
(
NS_WARN_IF
(
!
newCell
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
aNewCell
)
{
*
aNewCell
=
do_AddRef
(
newCell
)
.
take
(
)
;
}
if
(
aRowSpan
>
1
)
{
nsAutoString
newRowSpan
;
newRowSpan
.
AppendInt
(
aRowSpan
10
)
;
newCell
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
rowspan
newRowSpan
true
)
;
}
if
(
aColSpan
>
1
)
{
nsAutoString
newColSpan
;
newColSpan
.
AppendInt
(
aColSpan
10
)
;
newCell
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
colspan
newColSpan
true
)
;
}
if
(
aAfter
)
{
DebugOnly
<
bool
>
advanced
=
pointToInsert
.
AdvanceOffset
(
)
;
NS_WARNING_ASSERTION
(
advanced
"
Failed
to
advance
offset
to
after
the
old
cell
"
)
;
}
AutoTransactionsConserveSelection
dontChangeSelection
(
this
)
;
return
InsertNodeWithTransaction
(
*
newCell
pointToInsert
)
;
}
nsresult
HTMLEditor
:
:
SetColSpan
(
Element
*
aCell
int32_t
aColSpan
)
{
if
(
NS_WARN_IF
(
!
aCell
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsAutoString
newSpan
;
newSpan
.
AppendInt
(
aColSpan
10
)
;
return
SetAttributeWithTransaction
(
*
aCell
*
nsGkAtoms
:
:
colspan
newSpan
)
;
}
nsresult
HTMLEditor
:
:
SetRowSpan
(
Element
*
aCell
int32_t
aRowSpan
)
{
if
(
NS_WARN_IF
(
!
aCell
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsAutoString
newSpan
;
newSpan
.
AppendInt
(
aRowSpan
10
)
;
return
SetAttributeWithTransaction
(
*
aCell
*
nsGkAtoms
:
:
rowspan
newSpan
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
InsertTableCell
(
int32_t
aNumber
bool
aAfter
)
{
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
curCell
;
nsCOMPtr
<
nsINode
>
cellParent
;
int32_t
cellOffset
startRowIndex
startColIndex
;
nsresult
rv
=
GetCellContext
(
nullptr
getter_AddRefs
(
table
)
getter_AddRefs
(
curCell
)
getter_AddRefs
(
cellParent
)
&
cellOffset
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
curCell
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
;
int32_t
curStartRowIndex
curStartColIndex
rowSpan
colSpan
actualRowSpan
actualColSpan
;
bool
isSelected
;
rv
=
GetCellDataAt
(
table
startRowIndex
startColIndex
getter_AddRefs
(
curCell
)
&
curStartRowIndex
&
curStartColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
curCell
NS_ERROR_FAILURE
)
;
int32_t
newCellIndex
=
aAfter
?
(
startColIndex
+
colSpan
)
:
startColIndex
;
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
startRowIndex
newCellIndex
ePreviousColumn
false
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
this
)
;
for
(
int32_t
i
=
0
;
i
<
aNumber
;
i
+
+
)
{
RefPtr
<
Element
>
newCell
;
rv
=
CreateElementWithDefaults
(
NS_LITERAL_STRING
(
"
td
"
)
getter_AddRefs
(
newCell
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
newCell
)
{
if
(
aAfter
)
{
cellOffset
+
+
;
}
rv
=
InsertNodeWithTransaction
(
*
newCell
EditorRawDOMPoint
(
cellParent
cellOffset
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
}
}
return
rv
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetFirstRow
(
Element
*
aTableElement
nsINode
*
*
aRowNode
)
{
NS_ENSURE_TRUE
(
aRowNode
NS_ERROR_NULL_POINTER
)
;
*
aRowNode
=
nullptr
;
nsCOMPtr
<
nsINode
>
tableElement
=
aTableElement
;
NS_ENSURE_TRUE
(
tableElement
NS_ERROR_NULL_POINTER
)
;
tableElement
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
table
"
)
tableElement
)
;
NS_ENSURE_TRUE
(
tableElement
NS_ERROR_NULL_POINTER
)
;
nsCOMPtr
<
nsIContent
>
tableChild
=
tableElement
-
>
GetFirstChild
(
)
;
while
(
tableChild
)
{
if
(
tableChild
-
>
IsHTMLElement
(
nsGkAtoms
:
:
tr
)
)
{
tableChild
.
forget
(
aRowNode
)
;
return
NS_OK
;
}
if
(
tableChild
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
tbody
nsGkAtoms
:
:
thead
nsGkAtoms
:
:
tfoot
)
)
{
nsCOMPtr
<
nsIContent
>
rowNode
=
tableChild
-
>
GetFirstChild
(
)
;
while
(
rowNode
&
&
!
HTMLEditUtils
:
:
IsTableRow
(
rowNode
)
)
{
rowNode
=
rowNode
-
>
GetNextSibling
(
)
;
}
if
(
rowNode
)
{
rowNode
.
forget
(
aRowNode
)
;
return
NS_OK
;
}
}
tableChild
=
tableChild
-
>
GetNextSibling
(
)
;
}
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetNextRow
(
nsINode
*
aCurrentRowNode
nsINode
*
*
aRowNode
)
{
NS_ENSURE_TRUE
(
aRowNode
NS_ERROR_NULL_POINTER
)
;
*
aRowNode
=
nullptr
;
NS_ENSURE_TRUE
(
aCurrentRowNode
NS_ERROR_NULL_POINTER
)
;
if
(
!
HTMLEditUtils
:
:
IsTableRow
(
aCurrentRowNode
)
)
{
return
NS_ERROR_FAILURE
;
}
nsIContent
*
nextRow
=
aCurrentRowNode
-
>
GetNextSibling
(
)
;
while
(
nextRow
&
&
!
HTMLEditUtils
:
:
IsTableRow
(
nextRow
)
)
{
nextRow
=
nextRow
-
>
GetNextSibling
(
)
;
}
if
(
nextRow
)
{
*
aRowNode
=
do_AddRef
(
nextRow
)
.
take
(
)
;
return
NS_OK
;
}
nsINode
*
rowParent
=
aCurrentRowNode
-
>
GetParentNode
(
)
;
NS_ENSURE_TRUE
(
rowParent
NS_ERROR_NULL_POINTER
)
;
nsIContent
*
parentSibling
=
rowParent
-
>
GetNextSibling
(
)
;
while
(
parentSibling
)
{
nextRow
=
parentSibling
-
>
GetFirstChild
(
)
;
while
(
nextRow
&
&
!
HTMLEditUtils
:
:
IsTableRow
(
nextRow
)
)
{
nextRow
=
nextRow
-
>
GetNextSibling
(
)
;
}
if
(
nextRow
)
{
*
aRowNode
=
do_AddRef
(
nextRow
)
.
take
(
)
;
return
NS_OK
;
}
parentSibling
=
parentSibling
-
>
GetNextSibling
(
)
;
}
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
nsresult
HTMLEditor
:
:
GetLastCellInRow
(
nsINode
*
aRowNode
nsINode
*
*
aCellNode
)
{
NS_ENSURE_TRUE
(
aCellNode
NS_ERROR_NULL_POINTER
)
;
*
aCellNode
=
nullptr
;
NS_ENSURE_TRUE
(
aRowNode
NS_ERROR_NULL_POINTER
)
;
nsCOMPtr
<
nsINode
>
rowChild
=
aRowNode
-
>
GetLastChild
(
)
;
while
(
rowChild
&
&
!
HTMLEditUtils
:
:
IsTableCell
(
rowChild
)
)
{
rowChild
=
rowChild
-
>
GetPreviousSibling
(
)
;
}
if
(
rowChild
)
{
rowChild
.
forget
(
aCellNode
)
;
return
NS_OK
;
}
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
NS_IMETHODIMP
HTMLEditor
:
:
InsertTableColumn
(
int32_t
aNumber
bool
aAfter
)
{
RefPtr
<
Selection
>
selection
;
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
curCell
;
int32_t
startRowIndex
startColIndex
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
selection
)
getter_AddRefs
(
table
)
getter_AddRefs
(
curCell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
curCell
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
;
int32_t
curStartRowIndex
curStartColIndex
rowSpan
colSpan
actualRowSpan
actualColSpan
;
bool
isSelected
;
rv
=
GetCellDataAt
(
table
startRowIndex
startColIndex
getter_AddRefs
(
curCell
)
&
curStartRowIndex
&
curStartColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
curCell
NS_ERROR_FAILURE
)
;
AutoPlaceholderBatch
beginBatching
(
this
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
insertNode
nsIEditor
:
:
eNext
)
;
if
(
aAfter
)
{
startColIndex
+
=
actualColSpan
;
if
(
!
colSpan
)
{
SetColSpan
(
curCell
actualColSpan
)
;
}
}
int32_t
rowCount
colCount
rowIndex
;
rv
=
GetTableSize
(
table
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
startRowIndex
startColIndex
ePreviousRow
false
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
this
)
;
if
(
startColIndex
>
=
colCount
)
{
NormalizeTable
(
table
)
;
}
nsCOMPtr
<
nsINode
>
rowNode
;
for
(
rowIndex
=
0
;
rowIndex
<
rowCount
;
rowIndex
+
+
)
{
if
(
startColIndex
<
colCount
)
{
rv
=
GetCellDataAt
(
table
rowIndex
startColIndex
getter_AddRefs
(
curCell
)
&
curStartRowIndex
&
curStartColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
curCell
)
{
if
(
curStartColIndex
<
startColIndex
)
{
if
(
colSpan
>
0
)
{
SetColSpan
(
curCell
colSpan
+
aNumber
)
;
}
}
else
{
selection
-
>
Collapse
(
curCell
0
)
;
rv
=
InsertTableCell
(
aNumber
false
)
;
}
}
}
else
{
if
(
!
rowIndex
)
{
rv
=
GetFirstRow
(
table
getter_AddRefs
(
rowNode
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
else
{
nsCOMPtr
<
nsINode
>
nextRow
;
rv
=
GetNextRow
(
rowNode
getter_AddRefs
(
nextRow
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rowNode
=
nextRow
;
}
if
(
rowNode
)
{
nsCOMPtr
<
nsINode
>
lastCell
;
rv
=
GetLastCellInRow
(
rowNode
getter_AddRefs
(
lastCell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
lastCell
NS_ERROR_FAILURE
)
;
curCell
=
lastCell
-
>
AsElement
(
)
;
selection
-
>
Collapse
(
curCell
0
)
;
rv
=
InsertTableCell
(
aNumber
true
)
;
}
}
}
return
rv
;
}
NS_IMETHODIMP
HTMLEditor
:
:
InsertTableRow
(
int32_t
aNumber
bool
aAfter
)
{
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
curCell
;
int32_t
startRowIndex
startColIndex
;
nsresult
rv
=
GetCellContext
(
nullptr
getter_AddRefs
(
table
)
getter_AddRefs
(
curCell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
curCell
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
;
int32_t
curStartRowIndex
curStartColIndex
rowSpan
colSpan
actualRowSpan
actualColSpan
;
bool
isSelected
;
rv
=
GetCellDataAt
(
table
startRowIndex
startColIndex
getter_AddRefs
(
curCell
)
&
curStartRowIndex
&
curStartColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
curCell
NS_ERROR_FAILURE
)
;
int32_t
rowCount
colCount
;
rv
=
GetTableSize
(
table
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
AutoPlaceholderBatch
beginBatching
(
this
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
insertNode
nsIEditor
:
:
eNext
)
;
if
(
aAfter
)
{
startRowIndex
+
=
actualRowSpan
;
if
(
!
rowSpan
)
{
SetRowSpan
(
curCell
actualRowSpan
)
;
}
}
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
startRowIndex
startColIndex
ePreviousColumn
false
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
this
)
;
RefPtr
<
Element
>
cellForRowParent
;
int32_t
cellsInRow
=
0
;
if
(
startRowIndex
<
rowCount
)
{
int32_t
colIndex
=
0
;
while
(
NS_SUCCEEDED
(
GetCellDataAt
(
table
startRowIndex
colIndex
getter_AddRefs
(
curCell
)
&
curStartRowIndex
&
curStartColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
)
)
{
if
(
curCell
)
{
if
(
curStartRowIndex
<
startRowIndex
)
{
if
(
rowSpan
>
0
)
{
SetRowSpan
(
curCell
rowSpan
+
aNumber
)
;
}
}
else
{
cellsInRow
+
=
actualColSpan
;
if
(
!
cellForRowParent
)
{
cellForRowParent
=
curCell
;
}
}
colIndex
+
=
actualColSpan
;
}
else
{
colIndex
+
+
;
}
}
}
else
{
cellsInRow
=
colCount
;
int32_t
lastRow
=
rowCount
-
1
;
int32_t
tempColIndex
=
0
;
while
(
NS_SUCCEEDED
(
GetCellDataAt
(
table
lastRow
tempColIndex
getter_AddRefs
(
curCell
)
&
curStartRowIndex
&
curStartColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
)
)
{
if
(
!
rowSpan
)
{
cellsInRow
-
=
actualColSpan
;
}
tempColIndex
+
=
actualColSpan
;
if
(
!
cellForRowParent
&
&
curStartRowIndex
=
=
lastRow
)
{
cellForRowParent
=
curCell
;
}
}
}
if
(
cellsInRow
>
0
)
{
NS_NAMED_LITERAL_STRING
(
trStr
"
tr
"
)
;
if
(
!
cellForRowParent
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
Element
>
parentRow
=
GetElementOrParentByTagName
(
trStr
cellForRowParent
)
;
NS_ENSURE_TRUE
(
parentRow
NS_ERROR_NULL_POINTER
)
;
nsCOMPtr
<
nsINode
>
parentOfRow
=
parentRow
-
>
GetParentNode
(
)
;
NS_ENSURE_TRUE
(
parentOfRow
NS_ERROR_NULL_POINTER
)
;
int32_t
newRowOffset
=
parentOfRow
-
>
ComputeIndexOf
(
parentRow
)
;
if
(
aAfter
&
&
startRowIndex
>
=
rowCount
)
{
newRowOffset
+
+
;
}
for
(
int32_t
row
=
0
;
row
<
aNumber
;
row
+
+
)
{
nsCOMPtr
<
Element
>
newRow
=
CreateElementWithDefaults
(
trStr
)
;
NS_ENSURE_TRUE
(
newRow
NS_ERROR_FAILURE
)
;
for
(
int32_t
i
=
0
;
i
<
cellsInRow
;
i
+
+
)
{
nsCOMPtr
<
Element
>
newCell
=
CreateElementWithDefaults
(
NS_LITERAL_STRING
(
"
td
"
)
)
;
NS_ENSURE_TRUE
(
newCell
NS_ERROR_FAILURE
)
;
ErrorResult
result
;
newRow
-
>
AppendChild
(
*
newCell
result
)
;
if
(
NS_WARN_IF
(
result
.
Failed
(
)
)
)
{
return
result
.
StealNSResult
(
)
;
}
}
rv
=
InsertNodeWithTransaction
(
*
newRow
EditorRawDOMPoint
(
parentOfRow
newRowOffset
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
}
nsCOMPtr
<
nsIPresShell
>
ps
=
GetPresShell
(
)
;
if
(
ps
)
{
ps
-
>
FlushPendingNotifications
(
FlushType
:
:
Frames
)
;
}
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
DeleteTable2
(
Element
*
aTable
Selection
*
aSelection
)
{
NS_ENSURE_TRUE
(
aTable
NS_ERROR_NULL_POINTER
)
;
nsresult
rv
=
ClearSelection
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
AppendNodeToSelectionAsRange
(
aTable
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
DeleteSelectionAsAction
(
eNext
eStrip
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
DeleteTable
(
)
{
RefPtr
<
Selection
>
selection
;
RefPtr
<
Element
>
table
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
selection
)
getter_AddRefs
(
table
)
nullptr
nullptr
nullptr
nullptr
nullptr
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
AutoPlaceholderBatch
beginBatching
(
this
)
;
return
DeleteTable2
(
table
selection
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
DeleteTableCell
(
int32_t
aNumber
)
{
RefPtr
<
Selection
>
selection
;
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
cell
;
int32_t
startRowIndex
startColIndex
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
selection
)
getter_AddRefs
(
table
)
getter_AddRefs
(
cell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
table
&
&
cell
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
;
AutoPlaceholderBatch
beginBatching
(
this
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
deleteNode
nsIEditor
:
:
eNext
)
;
RefPtr
<
Element
>
firstCell
;
rv
=
GetFirstSelectedCell
(
nullptr
getter_AddRefs
(
firstCell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
firstCell
&
&
selection
-
>
RangeCount
(
)
>
1
)
{
cell
=
firstCell
;
int32_t
rowCount
colCount
;
rv
=
GetTableSize
(
table
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
GetCellIndexes
(
cell
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
startRowIndex
startColIndex
ePreviousColumn
false
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
this
)
;
bool
checkToDeleteRow
=
true
;
bool
checkToDeleteColumn
=
true
;
while
(
cell
)
{
bool
deleteRow
=
false
;
bool
deleteCol
=
false
;
if
(
checkToDeleteRow
)
{
checkToDeleteRow
=
false
;
deleteRow
=
AllCellsInRowSelected
(
table
startRowIndex
colCount
)
;
if
(
deleteRow
)
{
int32_t
nextRow
=
startRowIndex
;
while
(
nextRow
=
=
startRowIndex
)
{
rv
=
GetNextSelectedCell
(
nullptr
getter_AddRefs
(
cell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
cell
)
{
break
;
}
rv
=
GetCellIndexes
(
cell
&
nextRow
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
rv
=
DeleteRow
(
table
startRowIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
cell
)
{
startRowIndex
=
nextRow
-
1
;
checkToDeleteRow
=
true
;
}
}
}
if
(
!
deleteRow
)
{
if
(
checkToDeleteColumn
)
{
checkToDeleteColumn
=
false
;
deleteCol
=
AllCellsInColumnSelected
(
table
startColIndex
colCount
)
;
if
(
deleteCol
)
{
int32_t
nextCol
=
startColIndex
;
while
(
nextCol
=
=
startColIndex
)
{
rv
=
GetNextSelectedCell
(
nullptr
getter_AddRefs
(
cell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
cell
)
{
break
;
}
rv
=
GetCellIndexes
(
cell
&
startRowIndex
&
nextCol
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
rv
=
DeleteColumn
(
table
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
cell
)
{
startColIndex
=
nextCol
-
1
;
checkToDeleteColumn
=
true
;
}
}
}
if
(
!
deleteCol
)
{
RefPtr
<
Element
>
nextCell
;
rv
=
GetNextSelectedCell
(
nullptr
getter_AddRefs
(
nextCell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
DeleteNodeWithTransaction
(
*
cell
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
cell
=
nextCell
;
if
(
cell
)
{
rv
=
GetCellIndexes
(
cell
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
}
}
}
else
{
for
(
int32_t
i
=
0
;
i
<
aNumber
;
i
+
+
)
{
rv
=
GetCellContext
(
getter_AddRefs
(
selection
)
getter_AddRefs
(
table
)
getter_AddRefs
(
cell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
cell
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
;
if
(
GetNumberOfCellsInRow
(
table
startRowIndex
)
=
=
1
)
{
RefPtr
<
Element
>
parentRow
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
tr
"
)
cell
)
;
NS_ENSURE_TRUE
(
parentRow
NS_ERROR_NULL_POINTER
)
;
int32_t
rowCount
colCount
;
rv
=
GetTableSize
(
table
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
rowCount
=
=
1
)
{
return
DeleteTable2
(
table
selection
)
;
}
rv
=
DeleteTableRow
(
1
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
else
{
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
startRowIndex
startColIndex
ePreviousColumn
false
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
this
)
;
rv
=
DeleteNodeWithTransaction
(
*
cell
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
}
}
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
DeleteTableCellContents
(
)
{
RefPtr
<
Selection
>
selection
;
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
cell
;
int32_t
startRowIndex
startColIndex
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
selection
)
getter_AddRefs
(
table
)
getter_AddRefs
(
cell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
cell
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
;
AutoPlaceholderBatch
beginBatching
(
this
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
deleteNode
nsIEditor
:
:
eNext
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
this
)
;
RefPtr
<
Element
>
firstCell
;
rv
=
GetFirstSelectedCell
(
nullptr
getter_AddRefs
(
firstCell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
firstCell
)
{
cell
=
firstCell
;
rv
=
GetCellIndexes
(
cell
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
startRowIndex
startColIndex
ePreviousColumn
false
)
;
while
(
cell
)
{
DeleteCellContents
(
cell
)
;
if
(
firstCell
)
{
rv
=
GetNextSelectedCell
(
nullptr
getter_AddRefs
(
cell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
else
{
cell
=
nullptr
;
}
}
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
DeleteCellContents
(
Element
*
aCell
)
{
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
deleteNode
nsIEditor
:
:
eNext
)
;
while
(
nsCOMPtr
<
nsINode
>
child
=
aCell
-
>
GetLastChild
(
)
)
{
nsresult
rv
=
DeleteNodeWithTransaction
(
*
child
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
DeleteTableColumn
(
int32_t
aNumber
)
{
RefPtr
<
Selection
>
selection
;
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
cell
;
int32_t
startRowIndex
startColIndex
rowCount
colCount
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
selection
)
getter_AddRefs
(
table
)
getter_AddRefs
(
cell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
table
&
&
cell
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
;
rv
=
GetTableSize
(
table
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
startColIndex
&
&
aNumber
>
=
colCount
)
{
return
DeleteTable2
(
table
selection
)
;
}
aNumber
=
std
:
:
min
(
aNumber
(
colCount
-
startColIndex
)
)
;
AutoPlaceholderBatch
beginBatching
(
this
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
deleteNode
nsIEditor
:
:
eNext
)
;
RefPtr
<
Element
>
firstCell
;
rv
=
GetFirstSelectedCell
(
nullptr
getter_AddRefs
(
firstCell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
uint32_t
rangeCount
=
selection
-
>
RangeCount
(
)
;
if
(
firstCell
&
&
rangeCount
>
1
)
{
rv
=
GetCellIndexes
(
firstCell
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
startRowIndex
startColIndex
ePreviousRow
false
)
;
if
(
firstCell
&
&
rangeCount
>
1
)
{
cell
=
firstCell
;
while
(
cell
)
{
if
(
cell
!
=
firstCell
)
{
rv
=
GetCellIndexes
(
cell
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
int32_t
nextCol
=
startColIndex
;
while
(
nextCol
=
=
startColIndex
)
{
rv
=
GetNextSelectedCell
(
nullptr
getter_AddRefs
(
cell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
cell
)
{
break
;
}
rv
=
GetCellIndexes
(
cell
&
startRowIndex
&
nextCol
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
rv
=
DeleteColumn
(
table
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
else
{
for
(
int32_t
i
=
0
;
i
<
aNumber
;
i
+
+
)
{
rv
=
DeleteColumn
(
table
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
DeleteColumn
(
Element
*
aTable
int32_t
aColIndex
)
{
NS_ENSURE_TRUE
(
aTable
NS_ERROR_NULL_POINTER
)
;
RefPtr
<
Element
>
cell
;
int32_t
startRowIndex
startColIndex
rowSpan
colSpan
actualRowSpan
actualColSpan
;
bool
isSelected
;
int32_t
rowIndex
=
0
;
do
{
nsresult
rv
=
GetCellDataAt
(
aTable
rowIndex
aColIndex
getter_AddRefs
(
cell
)
&
startRowIndex
&
startColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
cell
)
{
if
(
startColIndex
<
aColIndex
|
|
colSpan
>
1
|
|
!
colSpan
)
{
if
(
colSpan
>
0
)
{
NS_ASSERTION
(
(
colSpan
>
1
)
"
Bad
COLSPAN
in
DeleteTableColumn
"
)
;
SetColSpan
(
cell
colSpan
-
1
)
;
}
if
(
startColIndex
=
=
aColIndex
)
{
DeleteCellContents
(
cell
)
;
}
rowIndex
+
=
actualRowSpan
;
}
else
{
if
(
GetNumberOfCellsInRow
(
aTable
rowIndex
)
=
=
1
)
{
RefPtr
<
Element
>
parentRow
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
tr
"
)
cell
)
;
if
(
!
parentRow
)
{
return
NS_ERROR_NULL_POINTER
;
}
int32_t
rowCount
colCount
;
rv
=
GetTableSize
(
aTable
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
rowCount
=
=
1
)
{
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_FAILURE
)
;
return
DeleteTable2
(
aTable
selection
)
;
}
rv
=
DeleteRow
(
aTable
startRowIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
else
{
rv
=
DeleteNodeWithTransaction
(
*
cell
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rowIndex
+
=
actualRowSpan
;
}
}
}
}
while
(
cell
)
;
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
DeleteTableRow
(
int32_t
aNumber
)
{
RefPtr
<
Selection
>
selection
;
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
cell
;
int32_t
startRowIndex
startColIndex
;
int32_t
rowCount
colCount
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
selection
)
getter_AddRefs
(
table
)
getter_AddRefs
(
cell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
cell
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
;
rv
=
GetTableSize
(
table
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
startRowIndex
&
&
aNumber
>
=
rowCount
)
{
return
DeleteTable2
(
table
selection
)
;
}
AutoPlaceholderBatch
beginBatching
(
this
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
deleteNode
nsIEditor
:
:
eNext
)
;
RefPtr
<
Element
>
firstCell
;
rv
=
GetFirstSelectedCell
(
nullptr
getter_AddRefs
(
firstCell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
uint32_t
rangeCount
=
selection
-
>
RangeCount
(
)
;
if
(
firstCell
&
&
rangeCount
>
1
)
{
rv
=
GetCellIndexes
(
firstCell
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
startRowIndex
startColIndex
ePreviousRow
false
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
this
)
;
if
(
firstCell
&
&
rangeCount
>
1
)
{
cell
=
firstCell
;
while
(
cell
)
{
if
(
cell
!
=
firstCell
)
{
rv
=
GetCellIndexes
(
cell
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
int32_t
nextRow
=
startRowIndex
;
while
(
nextRow
=
=
startRowIndex
)
{
rv
=
GetNextSelectedCell
(
nullptr
getter_AddRefs
(
cell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
cell
)
break
;
rv
=
GetCellIndexes
(
cell
&
nextRow
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
rv
=
DeleteRow
(
table
startRowIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
else
{
aNumber
=
std
:
:
min
(
aNumber
(
rowCount
-
startRowIndex
)
)
;
for
(
int32_t
i
=
0
;
i
<
aNumber
;
i
+
+
)
{
rv
=
DeleteRow
(
table
startRowIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
startRowIndex
+
+
;
}
rv
=
GetCellAt
(
table
startRowIndex
startColIndex
getter_AddRefs
(
cell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
cell
)
{
break
;
}
}
}
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
DeleteRow
(
Element
*
aTable
int32_t
aRowIndex
)
{
NS_ENSURE_TRUE
(
aTable
NS_ERROR_NULL_POINTER
)
;
RefPtr
<
Element
>
cell
;
RefPtr
<
Element
>
cellInDeleteRow
;
int32_t
startRowIndex
startColIndex
rowSpan
colSpan
actualRowSpan
actualColSpan
;
bool
isSelected
;
int32_t
colIndex
=
0
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
deleteNode
nsIEditor
:
:
eNext
)
;
nsTArray
<
RefPtr
<
Element
>
>
spanCellList
;
nsTArray
<
int32_t
>
newSpanList
;
int32_t
rowCount
colCount
;
nsresult
rv
=
GetTableSize
(
aTable
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
do
{
if
(
aRowIndex
>
=
rowCount
|
|
colIndex
>
=
colCount
)
{
break
;
}
rv
=
GetCellDataAt
(
aTable
aRowIndex
colIndex
getter_AddRefs
(
cell
)
&
startRowIndex
&
startColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
cell
)
{
if
(
startRowIndex
<
aRowIndex
)
{
if
(
rowSpan
>
0
)
{
spanCellList
.
AppendElement
(
cell
)
;
newSpanList
.
AppendElement
(
std
:
:
max
(
(
aRowIndex
-
startRowIndex
)
actualRowSpan
-
1
)
)
;
}
}
else
{
if
(
rowSpan
>
1
)
{
int32_t
aboveRowToInsertNewCellInto
=
aRowIndex
-
startRowIndex
+
1
;
int32_t
numOfRawSpanRemainingBelow
=
actualRowSpan
-
1
;
rv
=
SplitCellIntoRows
(
aTable
startRowIndex
startColIndex
aboveRowToInsertNewCellInto
numOfRawSpanRemainingBelow
nullptr
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
if
(
!
cellInDeleteRow
)
{
cellInDeleteRow
=
cell
;
}
}
colIndex
+
=
actualColSpan
;
}
}
while
(
cell
)
;
NS_ENSURE_TRUE
(
cellInDeleteRow
NS_ERROR_FAILURE
)
;
RefPtr
<
Element
>
parentRow
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
tr
"
)
cellInDeleteRow
)
;
if
(
parentRow
)
{
rv
=
DeleteNodeWithTransaction
(
*
parentRow
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
for
(
uint32_t
i
=
0
n
=
spanCellList
.
Length
(
)
;
i
<
n
;
i
+
+
)
{
Element
*
cellPtr
=
spanCellList
[
i
]
;
if
(
cellPtr
)
{
rv
=
SetRowSpan
(
cellPtr
newSpanList
[
i
]
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
SelectTable
(
)
{
RefPtr
<
Element
>
table
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
table
"
)
nullptr
)
;
NS_ENSURE_TRUE
(
table
NS_OK
)
;
nsresult
rv
=
ClearSelection
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
return
AppendNodeToSelectionAsRange
(
table
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
SelectTableCell
(
)
{
RefPtr
<
Element
>
cell
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
td
"
)
nullptr
)
;
NS_ENSURE_TRUE
(
cell
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
;
nsresult
rv
=
ClearSelection
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
return
AppendNodeToSelectionAsRange
(
cell
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
SelectBlockOfCells
(
Element
*
aStartCell
Element
*
aEndCell
)
{
NS_ENSURE_TRUE
(
aStartCell
&
&
aEndCell
NS_ERROR_NULL_POINTER
)
;
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_FAILURE
)
;
NS_NAMED_LITERAL_STRING
(
tableStr
"
table
"
)
;
RefPtr
<
Element
>
table
=
GetElementOrParentByTagName
(
tableStr
aStartCell
)
;
NS_ENSURE_TRUE
(
table
NS_ERROR_FAILURE
)
;
RefPtr
<
Element
>
endTable
=
GetElementOrParentByTagName
(
tableStr
aEndCell
)
;
NS_ENSURE_TRUE
(
endTable
NS_ERROR_FAILURE
)
;
if
(
table
!
=
endTable
)
{
return
NS_OK
;
}
int32_t
startRowIndex
startColIndex
endRowIndex
endColIndex
;
nsresult
rv
=
GetCellIndexes
(
aStartCell
&
startRowIndex
&
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
GetCellIndexes
(
aEndCell
&
endRowIndex
&
endColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
SelectionBatcher
selectionBatcher
(
selection
)
;
int32_t
minColumn
=
std
:
:
min
(
startColIndex
endColIndex
)
;
int32_t
minRow
=
std
:
:
min
(
startRowIndex
endRowIndex
)
;
int32_t
maxColumn
=
std
:
:
max
(
startColIndex
endColIndex
)
;
int32_t
maxRow
=
std
:
:
max
(
startRowIndex
endRowIndex
)
;
RefPtr
<
Element
>
cell
;
int32_t
currentRowIndex
currentColIndex
;
nsCOMPtr
<
nsIDOMRange
>
range
;
rv
=
GetFirstSelectedCell
(
getter_AddRefs
(
range
)
getter_AddRefs
(
cell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
rv
=
=
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
{
return
NS_OK
;
}
while
(
cell
)
{
rv
=
GetCellIndexes
(
cell
&
currentRowIndex
&
currentColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
currentRowIndex
<
maxRow
|
|
currentRowIndex
>
maxRow
|
|
currentColIndex
<
maxColumn
|
|
currentColIndex
>
maxColumn
)
{
selection
-
>
RemoveRange
(
*
static_cast
<
nsRange
*
>
(
range
.
get
(
)
)
IgnoreErrors
(
)
)
;
mSelectedCellIndex
-
-
;
}
rv
=
GetNextSelectedCell
(
getter_AddRefs
(
range
)
getter_AddRefs
(
cell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
int32_t
rowSpan
colSpan
actualRowSpan
actualColSpan
;
bool
isSelected
;
for
(
int32_t
row
=
minRow
;
row
<
=
maxRow
;
row
+
+
)
{
for
(
int32_t
col
=
minColumn
;
col
<
=
maxColumn
;
col
+
=
std
:
:
max
(
actualColSpan
1
)
)
{
rv
=
GetCellDataAt
(
table
row
col
getter_AddRefs
(
cell
)
&
currentRowIndex
&
currentColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
if
(
!
isSelected
&
&
cell
&
&
row
=
=
currentRowIndex
&
&
col
=
=
currentColIndex
)
{
rv
=
AppendNodeToSelectionAsRange
(
cell
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
}
}
}
return
rv
;
}
NS_IMETHODIMP
HTMLEditor
:
:
SelectAllTableCells
(
)
{
RefPtr
<
Element
>
cell
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
td
"
)
nullptr
)
;
NS_ENSURE_TRUE
(
cell
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
;
RefPtr
<
Element
>
startCell
=
cell
;
RefPtr
<
Element
>
table
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
table
"
)
cell
)
;
if
(
!
table
)
{
return
NS_ERROR_NULL_POINTER
;
}
int32_t
rowCount
colCount
;
nsresult
rv
=
GetTableSize
(
table
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_FAILURE
)
;
SelectionBatcher
selectionBatcher
(
selection
)
;
rv
=
ClearSelection
(
)
;
bool
cellSelected
=
false
;
int32_t
rowSpan
colSpan
actualRowSpan
actualColSpan
currentRowIndex
currentColIndex
;
bool
isSelected
;
for
(
int32_t
row
=
0
;
row
<
rowCount
;
row
+
+
)
{
for
(
int32_t
col
=
0
;
col
<
colCount
;
col
+
=
std
:
:
max
(
actualColSpan
1
)
)
{
rv
=
GetCellDataAt
(
table
row
col
getter_AddRefs
(
cell
)
&
currentRowIndex
&
currentColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
if
(
cell
&
&
row
=
=
currentRowIndex
&
&
col
=
=
currentColIndex
)
{
rv
=
AppendNodeToSelectionAsRange
(
cell
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
cellSelected
=
true
;
}
}
}
if
(
!
cellSelected
)
{
return
AppendNodeToSelectionAsRange
(
startCell
)
;
}
return
rv
;
}
NS_IMETHODIMP
HTMLEditor
:
:
SelectTableRow
(
)
{
RefPtr
<
Element
>
cell
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
td
"
)
nullptr
)
;
NS_ENSURE_TRUE
(
cell
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
;
RefPtr
<
Element
>
startCell
=
cell
;
RefPtr
<
Selection
>
selection
;
RefPtr
<
Element
>
table
;
int32_t
startRowIndex
startColIndex
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
selection
)
getter_AddRefs
(
table
)
getter_AddRefs
(
cell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
table
NS_ERROR_FAILURE
)
;
int32_t
rowCount
colCount
;
rv
=
GetTableSize
(
table
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
SelectionBatcher
selectionBatcher
(
selection
)
;
rv
=
ClearSelection
(
)
;
bool
cellSelected
=
false
;
int32_t
rowSpan
colSpan
actualRowSpan
actualColSpan
currentRowIndex
currentColIndex
;
bool
isSelected
;
for
(
int32_t
col
=
0
;
col
<
colCount
;
col
+
=
std
:
:
max
(
actualColSpan
1
)
)
{
rv
=
GetCellDataAt
(
table
startRowIndex
col
getter_AddRefs
(
cell
)
&
currentRowIndex
&
currentColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
if
(
cell
&
&
currentRowIndex
=
=
startRowIndex
&
&
currentColIndex
=
=
col
)
{
rv
=
AppendNodeToSelectionAsRange
(
cell
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
cellSelected
=
true
;
}
}
if
(
!
cellSelected
)
{
return
AppendNodeToSelectionAsRange
(
startCell
)
;
}
return
rv
;
}
NS_IMETHODIMP
HTMLEditor
:
:
SelectTableColumn
(
)
{
RefPtr
<
Element
>
cell
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
td
"
)
nullptr
)
;
NS_ENSURE_TRUE
(
cell
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
;
RefPtr
<
Element
>
startCell
=
cell
;
RefPtr
<
Selection
>
selection
;
RefPtr
<
Element
>
table
;
int32_t
startRowIndex
startColIndex
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
selection
)
getter_AddRefs
(
table
)
getter_AddRefs
(
cell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
table
NS_ERROR_FAILURE
)
;
int32_t
rowCount
colCount
;
rv
=
GetTableSize
(
table
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
SelectionBatcher
selectionBatcher
(
selection
)
;
rv
=
ClearSelection
(
)
;
bool
cellSelected
=
false
;
int32_t
rowSpan
colSpan
actualRowSpan
actualColSpan
currentRowIndex
currentColIndex
;
bool
isSelected
;
for
(
int32_t
row
=
0
;
row
<
rowCount
;
row
+
=
std
:
:
max
(
actualRowSpan
1
)
)
{
rv
=
GetCellDataAt
(
table
row
startColIndex
getter_AddRefs
(
cell
)
&
currentRowIndex
&
currentColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
if
(
cell
&
&
currentRowIndex
=
=
row
&
&
currentColIndex
=
=
startColIndex
)
{
rv
=
AppendNodeToSelectionAsRange
(
cell
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
cellSelected
=
true
;
}
}
if
(
!
cellSelected
)
{
return
AppendNodeToSelectionAsRange
(
startCell
)
;
}
return
rv
;
}
NS_IMETHODIMP
HTMLEditor
:
:
SplitTableCell
(
)
{
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
cell
;
int32_t
startRowIndex
startColIndex
actualRowSpan
actualColSpan
;
nsresult
rv
=
GetCellContext
(
nullptr
getter_AddRefs
(
table
)
getter_AddRefs
(
cell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
table
|
|
!
cell
)
{
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
rv
=
GetCellSpansAt
(
table
startRowIndex
startColIndex
actualRowSpan
actualColSpan
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
actualRowSpan
<
=
1
&
&
actualColSpan
<
=
1
)
{
return
NS_OK
;
}
AutoPlaceholderBatch
beginBatching
(
this
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
insertNode
nsIEditor
:
:
eNext
)
;
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
startRowIndex
startColIndex
ePreviousColumn
false
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
this
)
;
RefPtr
<
Element
>
newCell
;
int32_t
rowIndex
=
startRowIndex
;
int32_t
rowSpanBelow
colSpanAfter
;
for
(
rowSpanBelow
=
actualRowSpan
-
1
;
rowSpanBelow
>
=
0
;
rowSpanBelow
-
-
)
{
if
(
rowSpanBelow
>
0
)
{
rv
=
SplitCellIntoRows
(
table
rowIndex
startColIndex
1
rowSpanBelow
getter_AddRefs
(
newCell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
CopyCellBackgroundColor
(
newCell
cell
)
;
}
int32_t
colIndex
=
startColIndex
;
for
(
colSpanAfter
=
actualColSpan
-
1
;
colSpanAfter
>
0
;
colSpanAfter
-
-
)
{
rv
=
SplitCellIntoColumns
(
table
rowIndex
colIndex
1
colSpanAfter
getter_AddRefs
(
newCell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
CopyCellBackgroundColor
(
newCell
cell
)
;
colIndex
+
+
;
}
rowIndex
+
+
;
}
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
CopyCellBackgroundColor
(
Element
*
aDestCell
Element
*
aSourceCell
)
{
if
(
NS_WARN_IF
(
!
aDestCell
)
|
|
NS_WARN_IF
(
!
aSourceCell
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsAutoString
color
;
bool
isSet
;
nsresult
rv
=
GetAttributeValue
(
aSourceCell
NS_LITERAL_STRING
(
"
bgcolor
"
)
color
&
isSet
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
!
isSet
)
{
return
NS_OK
;
}
return
SetAttributeWithTransaction
(
*
aDestCell
*
nsGkAtoms
:
:
bgcolor
color
)
;
}
nsresult
HTMLEditor
:
:
SplitCellIntoColumns
(
Element
*
aTable
int32_t
aRowIndex
int32_t
aColIndex
int32_t
aColSpanLeft
int32_t
aColSpanRight
Element
*
*
aNewCell
)
{
NS_ENSURE_TRUE
(
aTable
NS_ERROR_NULL_POINTER
)
;
if
(
aNewCell
)
{
*
aNewCell
=
nullptr
;
}
RefPtr
<
Element
>
cell
;
int32_t
startRowIndex
startColIndex
rowSpan
colSpan
actualRowSpan
actualColSpan
;
bool
isSelected
;
nsresult
rv
=
GetCellDataAt
(
aTable
aRowIndex
aColIndex
getter_AddRefs
(
cell
)
&
startRowIndex
&
startColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
cell
NS_ERROR_NULL_POINTER
)
;
if
(
actualColSpan
<
=
1
|
|
(
aColSpanLeft
+
aColSpanRight
)
>
actualColSpan
)
{
return
NS_OK
;
}
rv
=
SetColSpan
(
cell
aColSpanLeft
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
Element
>
newCell
;
rv
=
InsertCell
(
cell
actualRowSpan
aColSpanRight
true
false
getter_AddRefs
(
newCell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
newCell
)
{
return
NS_OK
;
}
if
(
aNewCell
)
{
NS_ADDREF
(
*
aNewCell
=
newCell
.
get
(
)
)
;
}
return
CopyCellBackgroundColor
(
newCell
cell
)
;
}
nsresult
HTMLEditor
:
:
SplitCellIntoRows
(
Element
*
aTable
int32_t
aRowIndex
int32_t
aColIndex
int32_t
aRowSpanAbove
int32_t
aRowSpanBelow
Element
*
*
aNewCell
)
{
NS_ENSURE_TRUE
(
aTable
NS_ERROR_NULL_POINTER
)
;
if
(
aNewCell
)
*
aNewCell
=
nullptr
;
RefPtr
<
Element
>
cell
;
int32_t
startRowIndex
startColIndex
rowSpan
colSpan
actualRowSpan
actualColSpan
;
bool
isSelected
;
nsresult
rv
=
GetCellDataAt
(
aTable
aRowIndex
aColIndex
getter_AddRefs
(
cell
)
&
startRowIndex
&
startColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
cell
NS_ERROR_NULL_POINTER
)
;
if
(
actualRowSpan
<
=
1
|
|
(
aRowSpanAbove
+
aRowSpanBelow
)
>
actualRowSpan
)
{
return
NS_OK
;
}
int32_t
rowCount
colCount
;
rv
=
GetTableSize
(
aTable
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
Element
>
cell2
;
RefPtr
<
Element
>
lastCellFound
;
int32_t
startRowIndex2
startColIndex2
rowSpan2
colSpan2
actualRowSpan2
actualColSpan2
;
bool
isSelected2
;
int32_t
colIndex
=
0
;
bool
insertAfter
=
(
startColIndex
>
0
)
;
int32_t
rowBelowIndex
=
startRowIndex
+
aRowSpanAbove
;
for
(
;
;
)
{
rv
=
GetCellDataAt
(
aTable
rowBelowIndex
colIndex
getter_AddRefs
(
cell2
)
&
startRowIndex2
&
startColIndex2
&
rowSpan2
&
colSpan2
&
actualRowSpan2
&
actualColSpan2
&
isSelected2
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
cell
)
{
return
NS_ERROR_FAILURE
;
}
if
(
cell2
&
&
startRowIndex2
=
=
rowBelowIndex
)
{
if
(
!
insertAfter
)
{
break
;
}
if
(
startColIndex2
+
actualColSpan2
=
=
startColIndex
)
{
break
;
}
if
(
startColIndex2
>
startColIndex
)
{
insertAfter
=
false
;
break
;
}
lastCellFound
=
cell2
;
}
colIndex
+
=
std
:
:
max
(
actualColSpan2
1
)
;
if
(
colIndex
>
colCount
)
{
break
;
}
}
if
(
!
cell2
&
&
lastCellFound
)
{
cell2
=
lastCellFound
;
insertAfter
=
true
;
}
rv
=
SetRowSpan
(
cell
aRowSpanAbove
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
Element
>
newCell
;
rv
=
InsertCell
(
cell2
aRowSpanBelow
actualColSpan
insertAfter
false
getter_AddRefs
(
newCell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
newCell
)
{
return
NS_OK
;
}
if
(
aNewCell
)
{
NS_ADDREF
(
*
aNewCell
=
newCell
.
get
(
)
)
;
}
return
CopyCellBackgroundColor
(
newCell
cell2
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
SwitchTableCellHeaderType
(
Element
*
aSourceCell
Element
*
*
aNewCell
)
{
if
(
NS_WARN_IF
(
!
aSourceCell
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoPlaceholderBatch
beginBatching
(
this
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
insertNode
nsIEditor
:
:
eNext
)
;
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
if
(
NS_WARN_IF
(
!
selection
)
)
{
return
NS_ERROR_FAILURE
;
}
AutoSelectionRestorer
selectionRestorer
(
selection
this
)
;
nsAtom
*
newCellName
=
aSourceCell
-
>
IsHTMLElement
(
nsGkAtoms
:
:
td
)
?
nsGkAtoms
:
:
th
:
nsGkAtoms
:
:
td
;
RefPtr
<
Element
>
newCell
=
ReplaceContainerAndCloneAttributesWithTransaction
(
*
aSourceCell
*
newCellName
)
;
if
(
NS_WARN_IF
(
!
newCell
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
aNewCell
)
{
newCell
.
forget
(
aNewCell
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
JoinTableCells
(
bool
aMergeNonContiguousContents
)
{
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
targetCell
;
int32_t
startRowIndex
startColIndex
rowSpan
colSpan
actualRowSpan
actualColSpan
;
bool
isSelected
;
RefPtr
<
Element
>
cell2
;
int32_t
startRowIndex2
startColIndex2
rowSpan2
colSpan2
actualRowSpan2
actualColSpan2
;
bool
isSelected2
;
nsresult
rv
=
GetCellContext
(
nullptr
getter_AddRefs
(
table
)
getter_AddRefs
(
targetCell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
table
|
|
!
targetCell
)
{
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
AutoPlaceholderBatch
beginBatching
(
this
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
this
)
;
RefPtr
<
Element
>
firstCell
;
int32_t
firstRowIndex
firstColIndex
;
rv
=
GetFirstSelectedCellInTable
(
&
firstRowIndex
&
firstColIndex
getter_AddRefs
(
firstCell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
joinSelectedCells
=
false
;
if
(
firstCell
)
{
RefPtr
<
Element
>
secondCell
;
rv
=
GetNextSelectedCell
(
nullptr
getter_AddRefs
(
secondCell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
joinSelectedCells
=
(
secondCell
!
=
nullptr
)
;
}
if
(
joinSelectedCells
)
{
int32_t
rowCount
colCount
;
rv
=
GetTableSize
(
table
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
int32_t
firstRowSpan
firstColSpan
;
rv
=
GetCellSpansAt
(
table
firstRowIndex
firstColIndex
firstRowSpan
firstColSpan
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
int32_t
lastRowIndex
=
firstRowIndex
;
int32_t
lastColIndex
=
firstColIndex
;
int32_t
rowIndex
colIndex
;
for
(
rowIndex
=
firstRowIndex
;
rowIndex
<
=
lastRowIndex
;
rowIndex
+
+
)
{
int32_t
currentRowCount
=
rowCount
;
rv
=
FixBadRowSpan
(
table
rowIndex
rowCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
lastRowIndex
-
=
(
currentRowCount
-
rowCount
)
;
bool
cellFoundInRow
=
false
;
bool
lastRowIsSet
=
false
;
int32_t
lastColInRow
=
0
;
int32_t
firstColInRow
=
firstColIndex
;
for
(
colIndex
=
firstColIndex
;
colIndex
<
colCount
;
colIndex
+
=
std
:
:
max
(
actualColSpan2
1
)
)
{
rv
=
GetCellDataAt
(
table
rowIndex
colIndex
getter_AddRefs
(
cell2
)
&
startRowIndex2
&
startColIndex2
&
rowSpan2
&
colSpan2
&
actualRowSpan2
&
actualColSpan2
&
isSelected2
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
isSelected2
)
{
if
(
!
cellFoundInRow
)
{
firstColInRow
=
colIndex
;
}
if
(
rowIndex
>
firstRowIndex
&
&
firstColInRow
!
=
firstColIndex
)
{
lastRowIndex
=
std
:
:
max
(
0
rowIndex
-
1
)
;
lastRowIsSet
=
true
;
break
;
}
lastColInRow
=
colIndex
+
(
actualColSpan2
-
1
)
;
cellFoundInRow
=
true
;
}
else
if
(
cellFoundInRow
)
{
if
(
rowIndex
>
(
firstRowIndex
+
1
)
&
&
colIndex
<
=
lastColIndex
)
{
lastRowIndex
=
std
:
:
max
(
0
rowIndex
-
1
)
;
lastRowIsSet
=
true
;
}
break
;
}
}
if
(
cellFoundInRow
)
{
if
(
rowIndex
=
=
firstRowIndex
)
{
lastColIndex
=
lastColInRow
;
}
if
(
!
lastRowIsSet
)
{
if
(
colIndex
<
lastColIndex
)
{
lastRowIndex
=
std
:
:
max
(
0
rowIndex
-
1
)
;
}
else
{
lastRowIndex
=
rowIndex
+
1
;
}
}
lastColIndex
=
std
:
:
min
(
lastColIndex
lastColInRow
)
;
}
else
{
lastRowIndex
=
std
:
:
max
(
0
rowIndex
-
1
)
;
}
}
nsTArray
<
RefPtr
<
Element
>
>
deleteList
;
for
(
rowIndex
=
0
;
rowIndex
<
rowCount
;
rowIndex
+
+
)
{
for
(
colIndex
=
0
;
colIndex
<
colCount
;
colIndex
+
=
std
:
:
max
(
actualColSpan2
1
)
)
{
rv
=
GetCellDataAt
(
table
rowIndex
colIndex
getter_AddRefs
(
cell2
)
&
startRowIndex2
&
startColIndex2
&
rowSpan2
&
colSpan2
&
actualRowSpan2
&
actualColSpan2
&
isSelected2
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
actualColSpan2
)
{
break
;
}
if
(
isSelected2
&
&
cell2
!
=
firstCell
)
{
if
(
rowIndex
>
=
firstRowIndex
&
&
rowIndex
<
=
lastRowIndex
&
&
colIndex
>
=
firstColIndex
&
&
colIndex
<
=
lastColIndex
)
{
NS_ASSERTION
(
startRowIndex2
=
=
rowIndex
"
JoinTableCells
:
StartRowIndex
is
in
row
above
"
)
;
if
(
actualColSpan2
>
1
)
{
int32_t
extraColSpan
=
(
startColIndex2
+
actualColSpan2
)
-
(
lastColIndex
+
1
)
;
if
(
extraColSpan
>
0
)
{
rv
=
SplitCellIntoColumns
(
table
startRowIndex2
startColIndex2
actualColSpan2
-
extraColSpan
extraColSpan
nullptr
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
rv
=
MergeCells
(
firstCell
cell2
false
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
deleteList
.
AppendElement
(
cell2
.
get
(
)
)
;
}
else
if
(
aMergeNonContiguousContents
)
{
rv
=
MergeCells
(
firstCell
cell2
false
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
}
}
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
deleteNode
nsIEditor
:
:
eNext
)
;
for
(
uint32_t
i
=
0
n
=
deleteList
.
Length
(
)
;
i
<
n
;
i
+
+
)
{
RefPtr
<
Element
>
nodeToBeRemoved
=
deleteList
[
i
]
;
if
(
nodeToBeRemoved
)
{
rv
=
DeleteNodeWithTransaction
(
*
nodeToBeRemoved
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
}
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_FAILURE
)
;
uint32_t
rangeCount
=
selection
-
>
RangeCount
(
)
;
RefPtr
<
nsRange
>
range
;
for
(
uint32_t
i
=
0
;
i
<
rangeCount
;
i
+
+
)
{
range
=
selection
-
>
GetRangeAt
(
i
)
;
NS_ENSURE_TRUE
(
range
NS_ERROR_FAILURE
)
;
RefPtr
<
Element
>
deletedCell
;
GetCellFromRange
(
range
getter_AddRefs
(
deletedCell
)
)
;
if
(
!
deletedCell
)
{
selection
-
>
RemoveRange
(
*
range
IgnoreErrors
(
)
)
;
rangeCount
-
-
;
i
-
-
;
}
}
rv
=
SetRowSpan
(
firstCell
lastRowIndex
-
firstRowIndex
+
1
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
SetColSpan
(
firstCell
lastColIndex
-
firstColIndex
+
1
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NormalizeTable
(
table
)
;
}
else
{
rv
=
GetCellDataAt
(
table
startRowIndex
startColIndex
getter_AddRefs
(
targetCell
)
&
startRowIndex
&
startColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
targetCell
NS_ERROR_NULL_POINTER
)
;
rv
=
GetCellDataAt
(
table
startRowIndex
startColIndex
+
actualColSpan
getter_AddRefs
(
cell2
)
&
startRowIndex2
&
startColIndex2
&
rowSpan2
&
colSpan2
&
actualRowSpan2
&
actualColSpan2
&
isSelected2
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
cell2
)
{
return
NS_OK
;
}
NS_ASSERTION
(
(
startRowIndex
>
=
startRowIndex2
)
"
JoinCells
:
startRowIndex
<
startRowIndex2
"
)
;
int32_t
spanAboveMergedCell
=
startRowIndex
-
startRowIndex2
;
int32_t
effectiveRowSpan2
=
actualRowSpan2
-
spanAboveMergedCell
;
if
(
effectiveRowSpan2
>
actualRowSpan
)
{
rv
=
SplitCellIntoRows
(
table
startRowIndex2
startColIndex2
spanAboveMergedCell
+
actualRowSpan
effectiveRowSpan2
-
actualRowSpan
nullptr
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
rv
=
MergeCells
(
targetCell
cell2
(
startRowIndex2
=
=
startRowIndex
)
&
&
(
effectiveRowSpan2
>
=
actualRowSpan
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
effectiveRowSpan2
<
actualRowSpan
)
{
return
NS_OK
;
}
if
(
spanAboveMergedCell
>
0
)
{
rv
=
SetRowSpan
(
cell2
spanAboveMergedCell
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
rv
=
SetColSpan
(
targetCell
actualColSpan
+
actualColSpan2
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
MergeCells
(
RefPtr
<
Element
>
aTargetCell
RefPtr
<
Element
>
aCellToMerge
bool
aDeleteCellToMerge
)
{
NS_ENSURE_TRUE
(
aTargetCell
&
&
aCellToMerge
NS_ERROR_NULL_POINTER
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
deleteNode
nsIEditor
:
:
eNext
)
;
if
(
!
IsEmptyCell
(
aCellToMerge
)
)
{
int32_t
insertIndex
=
0
;
uint32_t
len
=
aTargetCell
-
>
GetChildCount
(
)
;
if
(
len
=
=
1
&
&
IsEmptyCell
(
aTargetCell
)
)
{
nsIContent
*
cellChild
=
aTargetCell
-
>
GetFirstChild
(
)
;
if
(
NS_WARN_IF
(
!
cellChild
)
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
=
DeleteNodeWithTransaction
(
*
cellChild
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
insertIndex
=
0
;
}
else
{
insertIndex
=
(
int32_t
)
len
;
}
while
(
aCellToMerge
-
>
HasChildren
(
)
)
{
nsCOMPtr
<
nsIContent
>
cellChild
=
aCellToMerge
-
>
GetLastChild
(
)
;
if
(
NS_WARN_IF
(
!
cellChild
)
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
=
DeleteNodeWithTransaction
(
*
cellChild
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
InsertNodeWithTransaction
(
*
cellChild
EditorRawDOMPoint
(
aTargetCell
insertIndex
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
}
if
(
!
aDeleteCellToMerge
)
{
return
NS_OK
;
}
nsresult
rv
=
DeleteNodeWithTransaction
(
*
aCellToMerge
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
FixBadRowSpan
(
Element
*
aTable
int32_t
aRowIndex
int32_t
&
aNewRowCount
)
{
NS_ENSURE_TRUE
(
aTable
NS_ERROR_NULL_POINTER
)
;
int32_t
rowCount
colCount
;
nsresult
rv
=
GetTableSize
(
aTable
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
Element
>
cell
;
int32_t
startRowIndex
startColIndex
rowSpan
colSpan
actualRowSpan
actualColSpan
;
bool
isSelected
;
int32_t
minRowSpan
=
-
1
;
int32_t
colIndex
;
for
(
colIndex
=
0
;
colIndex
<
colCount
;
colIndex
+
=
std
:
:
max
(
actualColSpan
1
)
)
{
rv
=
GetCellDataAt
(
aTable
aRowIndex
colIndex
getter_AddRefs
(
cell
)
&
startRowIndex
&
startColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
!
cell
)
{
break
;
}
if
(
rowSpan
>
0
&
&
startRowIndex
=
=
aRowIndex
&
&
(
rowSpan
<
minRowSpan
|
|
minRowSpan
=
=
-
1
)
)
{
minRowSpan
=
rowSpan
;
}
NS_ASSERTION
(
(
actualColSpan
>
0
)
"
ActualColSpan
=
0
in
FixBadRowSpan
"
)
;
}
if
(
minRowSpan
>
1
)
{
int32_t
rowsReduced
=
minRowSpan
-
1
;
for
(
colIndex
=
0
;
colIndex
<
colCount
;
colIndex
+
=
std
:
:
max
(
actualColSpan
1
)
)
{
rv
=
GetCellDataAt
(
aTable
aRowIndex
colIndex
getter_AddRefs
(
cell
)
&
startRowIndex
&
startColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
cell
&
&
rowSpan
>
0
&
&
startRowIndex
=
=
aRowIndex
&
&
startColIndex
=
=
colIndex
)
{
rv
=
SetRowSpan
(
cell
rowSpan
-
rowsReduced
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
}
NS_ASSERTION
(
(
actualColSpan
>
0
)
"
ActualColSpan
=
0
in
FixBadRowSpan
"
)
;
}
}
return
GetTableSize
(
aTable
&
aNewRowCount
&
colCount
)
;
}
nsresult
HTMLEditor
:
:
FixBadColSpan
(
Element
*
aTable
int32_t
aColIndex
int32_t
&
aNewColCount
)
{
NS_ENSURE_TRUE
(
aTable
NS_ERROR_NULL_POINTER
)
;
int32_t
rowCount
colCount
;
nsresult
rv
=
GetTableSize
(
aTable
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
Element
>
cell
;
int32_t
startRowIndex
startColIndex
rowSpan
colSpan
actualRowSpan
actualColSpan
;
bool
isSelected
;
int32_t
minColSpan
=
-
1
;
int32_t
rowIndex
;
for
(
rowIndex
=
0
;
rowIndex
<
rowCount
;
rowIndex
+
=
std
:
:
max
(
actualRowSpan
1
)
)
{
rv
=
GetCellDataAt
(
aTable
rowIndex
aColIndex
getter_AddRefs
(
cell
)
&
startRowIndex
&
startColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
!
cell
)
{
break
;
}
if
(
colSpan
>
0
&
&
startColIndex
=
=
aColIndex
&
&
(
colSpan
<
minColSpan
|
|
minColSpan
=
=
-
1
)
)
{
minColSpan
=
colSpan
;
}
NS_ASSERTION
(
(
actualRowSpan
>
0
)
"
ActualRowSpan
=
0
in
FixBadColSpan
"
)
;
}
if
(
minColSpan
>
1
)
{
int32_t
colsReduced
=
minColSpan
-
1
;
for
(
rowIndex
=
0
;
rowIndex
<
rowCount
;
rowIndex
+
=
std
:
:
max
(
actualRowSpan
1
)
)
{
rv
=
GetCellDataAt
(
aTable
rowIndex
aColIndex
getter_AddRefs
(
cell
)
&
startRowIndex
&
startColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
cell
&
&
colSpan
>
0
&
&
startColIndex
=
=
aColIndex
&
&
startRowIndex
=
=
rowIndex
)
{
rv
=
SetColSpan
(
cell
colSpan
-
colsReduced
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
}
NS_ASSERTION
(
(
actualRowSpan
>
0
)
"
ActualRowSpan
=
0
in
FixBadColSpan
"
)
;
}
}
return
GetTableSize
(
aTable
&
rowCount
&
aNewColCount
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
NormalizeTable
(
Element
*
aTable
)
{
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_FAILURE
)
;
RefPtr
<
Element
>
table
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
table
"
)
aTable
)
;
NS_ENSURE_TRUE
(
table
NS_OK
)
;
int32_t
rowCount
colCount
rowIndex
colIndex
;
nsresult
rv
=
GetTableSize
(
table
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
AutoSelectionRestorer
selectionRestorer
(
selection
this
)
;
AutoPlaceholderBatch
beginBatching
(
this
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
insertNode
nsIEditor
:
:
eNext
)
;
RefPtr
<
Element
>
cell
;
int32_t
startRowIndex
startColIndex
rowSpan
colSpan
actualRowSpan
actualColSpan
;
bool
isSelected
;
for
(
rowIndex
=
0
;
rowIndex
<
rowCount
;
rowIndex
+
+
)
{
rv
=
FixBadRowSpan
(
table
rowIndex
rowCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
for
(
colIndex
=
0
;
colIndex
<
colCount
;
colIndex
+
+
)
{
rv
=
FixBadColSpan
(
table
colIndex
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
for
(
rowIndex
=
0
;
rowIndex
<
rowCount
;
rowIndex
+
+
)
{
RefPtr
<
Element
>
previousCellInRow
;
for
(
colIndex
=
0
;
colIndex
<
colCount
;
colIndex
+
+
)
{
rv
=
GetCellDataAt
(
table
rowIndex
colIndex
getter_AddRefs
(
cell
)
&
startRowIndex
&
startColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
!
cell
)
{
#
ifdef
DEBUG
printf
(
"
NormalizeTable
found
missing
cell
at
row
=
%
d
col
=
%
d
\
n
"
rowIndex
colIndex
)
;
#
endif
if
(
!
previousCellInRow
)
{
#
ifdef
DEBUG
printf
(
"
NormalizeTable
found
no
cells
in
row
=
%
d
col
=
%
d
\
n
"
rowIndex
colIndex
)
;
#
endif
return
NS_ERROR_FAILURE
;
}
rv
=
InsertCell
(
previousCellInRow
1
1
true
false
getter_AddRefs
(
cell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
cell
)
{
startRowIndex
=
rowIndex
;
}
}
if
(
startRowIndex
=
=
rowIndex
)
{
previousCellInRow
=
cell
;
}
}
}
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetCellIndexes
(
Element
*
aCell
int32_t
*
aRowIndex
int32_t
*
aColIndex
)
{
NS_ENSURE_ARG_POINTER
(
aRowIndex
)
;
*
aColIndex
=
0
;
NS_ENSURE_ARG_POINTER
(
aColIndex
)
;
*
aRowIndex
=
0
;
RefPtr
<
Element
>
cell
;
if
(
!
aCell
)
{
cell
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
td
"
)
nullptr
)
;
if
(
!
cell
)
{
return
NS_ERROR_FAILURE
;
}
aCell
=
cell
;
}
nsCOMPtr
<
nsIPresShell
>
ps
=
GetPresShell
(
)
;
NS_ENSURE_TRUE
(
ps
NS_ERROR_NOT_INITIALIZED
)
;
nsIFrame
*
layoutObject
=
aCell
-
>
GetPrimaryFrame
(
)
;
NS_ENSURE_TRUE
(
layoutObject
NS_ERROR_FAILURE
)
;
nsITableCellLayout
*
cellLayoutObject
=
do_QueryFrame
(
layoutObject
)
;
NS_ENSURE_TRUE
(
cellLayoutObject
NS_ERROR_FAILURE
)
;
return
cellLayoutObject
-
>
GetCellIndexes
(
*
aRowIndex
*
aColIndex
)
;
}
nsTableWrapperFrame
*
HTMLEditor
:
:
GetTableFrame
(
Element
*
aTable
)
{
NS_ENSURE_TRUE
(
aTable
nullptr
)
;
return
do_QueryFrame
(
aTable
-
>
GetPrimaryFrame
(
)
)
;
}
int32_t
HTMLEditor
:
:
GetNumberOfCellsInRow
(
Element
*
aTable
int32_t
rowIndex
)
{
int32_t
cellCount
=
0
;
RefPtr
<
Element
>
cell
;
int32_t
colIndex
=
0
;
do
{
int32_t
startRowIndex
startColIndex
rowSpan
colSpan
actualRowSpan
actualColSpan
;
bool
isSelected
;
nsresult
rv
=
GetCellDataAt
(
aTable
rowIndex
colIndex
getter_AddRefs
(
cell
)
&
startRowIndex
&
startColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
NS_ENSURE_SUCCESS
(
rv
0
)
;
if
(
cell
)
{
if
(
startRowIndex
=
=
rowIndex
)
{
cellCount
+
+
;
}
colIndex
+
=
actualColSpan
;
}
else
{
colIndex
+
+
;
}
}
while
(
cell
)
;
return
cellCount
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetTableSize
(
Element
*
aTable
int32_t
*
aRowCount
int32_t
*
aColCount
)
{
NS_ENSURE_ARG_POINTER
(
aRowCount
)
;
NS_ENSURE_ARG_POINTER
(
aColCount
)
;
*
aRowCount
=
0
;
*
aColCount
=
0
;
RefPtr
<
Element
>
table
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
table
"
)
aTable
)
;
NS_ENSURE_TRUE
(
table
NS_ERROR_FAILURE
)
;
nsTableWrapperFrame
*
tableFrame
=
do_QueryFrame
(
table
-
>
GetPrimaryFrame
(
)
)
;
NS_ENSURE_TRUE
(
tableFrame
NS_ERROR_FAILURE
)
;
*
aRowCount
=
tableFrame
-
>
GetRowCount
(
)
;
*
aColCount
=
tableFrame
-
>
GetColCount
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetCellDataAt
(
Element
*
aTable
int32_t
aRowIndex
int32_t
aColIndex
Element
*
*
aCell
int32_t
*
aStartRowIndex
int32_t
*
aStartColIndex
int32_t
*
aRowSpan
int32_t
*
aColSpan
int32_t
*
aActualRowSpan
int32_t
*
aActualColSpan
bool
*
aIsSelected
)
{
NS_ENSURE_ARG_POINTER
(
aStartRowIndex
)
;
NS_ENSURE_ARG_POINTER
(
aStartColIndex
)
;
NS_ENSURE_ARG_POINTER
(
aRowSpan
)
;
NS_ENSURE_ARG_POINTER
(
aColSpan
)
;
NS_ENSURE_ARG_POINTER
(
aActualRowSpan
)
;
NS_ENSURE_ARG_POINTER
(
aActualColSpan
)
;
NS_ENSURE_ARG_POINTER
(
aIsSelected
)
;
NS_ENSURE_TRUE
(
aCell
NS_ERROR_NULL_POINTER
)
;
*
aStartRowIndex
=
0
;
*
aStartColIndex
=
0
;
*
aRowSpan
=
0
;
*
aColSpan
=
0
;
*
aActualRowSpan
=
0
;
*
aActualColSpan
=
0
;
*
aIsSelected
=
false
;
*
aCell
=
nullptr
;
RefPtr
<
Element
>
table
;
if
(
!
aTable
)
{
table
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
table
"
)
nullptr
)
;
if
(
!
table
)
{
return
NS_ERROR_FAILURE
;
}
aTable
=
table
;
}
nsTableWrapperFrame
*
tableFrame
=
GetTableFrame
(
aTable
)
;
NS_ENSURE_TRUE
(
tableFrame
NS_ERROR_FAILURE
)
;
nsTableCellFrame
*
cellFrame
=
tableFrame
-
>
GetCellFrameAt
(
aRowIndex
aColIndex
)
;
if
(
!
cellFrame
)
{
return
NS_ERROR_FAILURE
;
}
*
aIsSelected
=
cellFrame
-
>
IsSelected
(
)
;
*
aStartRowIndex
=
cellFrame
-
>
RowIndex
(
)
;
*
aStartColIndex
=
cellFrame
-
>
ColIndex
(
)
;
*
aRowSpan
=
cellFrame
-
>
GetRowSpan
(
)
;
*
aColSpan
=
cellFrame
-
>
GetColSpan
(
)
;
*
aActualRowSpan
=
tableFrame
-
>
GetEffectiveRowSpanAt
(
aRowIndex
aColIndex
)
;
*
aActualColSpan
=
tableFrame
-
>
GetEffectiveColSpanAt
(
aRowIndex
aColIndex
)
;
RefPtr
<
Element
>
domCell
=
cellFrame
-
>
GetContent
(
)
-
>
AsElement
(
)
;
domCell
.
forget
(
aCell
)
;
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetCellAt
(
Element
*
aTable
int32_t
aRowIndex
int32_t
aColIndex
Element
*
*
aCell
)
{
NS_ENSURE_ARG_POINTER
(
aCell
)
;
*
aCell
=
nullptr
;
RefPtr
<
Element
>
table
;
if
(
!
aTable
)
{
table
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
table
"
)
nullptr
)
;
NS_ENSURE_TRUE
(
table
NS_ERROR_FAILURE
)
;
aTable
=
table
;
}
nsTableWrapperFrame
*
tableFrame
=
GetTableFrame
(
aTable
)
;
if
(
!
tableFrame
)
{
*
aCell
=
nullptr
;
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
nsIContent
*
cell
=
tableFrame
-
>
GetCellAt
(
aRowIndex
aColIndex
)
;
RefPtr
<
Element
>
cellElement
=
cell
?
cell
-
>
AsElement
(
)
:
nullptr
;
cellElement
.
forget
(
aCell
)
;
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
GetCellSpansAt
(
Element
*
aTable
int32_t
aRowIndex
int32_t
aColIndex
int32_t
&
aActualRowSpan
int32_t
&
aActualColSpan
)
{
nsTableWrapperFrame
*
tableFrame
=
GetTableFrame
(
aTable
)
;
if
(
!
tableFrame
)
{
return
NS_ERROR_FAILURE
;
}
aActualRowSpan
=
tableFrame
-
>
GetEffectiveRowSpanAt
(
aRowIndex
aColIndex
)
;
aActualColSpan
=
tableFrame
-
>
GetEffectiveColSpanAt
(
aRowIndex
aColIndex
)
;
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
GetCellContext
(
Selection
*
*
aSelection
Element
*
*
aTable
Element
*
*
aCell
nsINode
*
*
aCellParent
int32_t
*
aCellOffset
int32_t
*
aRowIndex
int32_t
*
aColIndex
)
{
if
(
aSelection
)
{
*
aSelection
=
nullptr
;
}
if
(
aTable
)
{
*
aTable
=
nullptr
;
}
if
(
aCell
)
{
*
aCell
=
nullptr
;
}
if
(
aCellParent
)
{
*
aCellParent
=
nullptr
;
}
if
(
aCellOffset
)
{
*
aCellOffset
=
0
;
}
if
(
aRowIndex
)
{
*
aRowIndex
=
0
;
}
if
(
aColIndex
)
{
*
aColIndex
=
0
;
}
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_FAILURE
)
;
if
(
aSelection
)
{
*
aSelection
=
selection
.
get
(
)
;
NS_ADDREF
(
*
aSelection
)
;
}
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
cell
;
if
(
aCell
&
&
*
aCell
)
{
cell
=
*
aCell
;
}
if
(
!
cell
)
{
RefPtr
<
Element
>
cellOrTableElement
;
int32_t
selectedCount
;
nsAutoString
tagName
;
nsresult
rv
=
GetSelectedOrParentTableElement
(
tagName
&
selectedCount
getter_AddRefs
(
cellOrTableElement
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
tagName
.
EqualsLiteral
(
"
table
"
)
)
{
if
(
aTable
)
{
cellOrTableElement
.
forget
(
aTable
)
;
}
return
NS_OK
;
}
if
(
!
tagName
.
EqualsLiteral
(
"
td
"
)
)
{
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
cell
=
cellOrTableElement
;
}
if
(
aCell
)
{
*
aCell
=
do_AddRef
(
cell
)
.
take
(
)
;
}
table
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
table
"
)
cell
)
;
NS_ENSURE_TRUE
(
table
NS_ERROR_FAILURE
)
;
if
(
aTable
)
{
table
.
forget
(
aTable
)
;
}
if
(
aRowIndex
|
|
aColIndex
)
{
int32_t
rowIndex
colIndex
;
nsresult
rv
=
GetCellIndexes
(
cell
&
rowIndex
&
colIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
aRowIndex
)
{
*
aRowIndex
=
rowIndex
;
}
if
(
aColIndex
)
{
*
aColIndex
=
colIndex
;
}
}
if
(
aCellParent
)
{
nsCOMPtr
<
nsINode
>
cellParent
=
cell
-
>
GetParentNode
(
)
;
NS_ENSURE_TRUE
(
cellParent
NS_ERROR_FAILURE
)
;
cellParent
.
forget
(
aCellParent
)
;
if
(
aCellOffset
)
{
*
aCellOffset
=
GetChildOffset
(
cell
cellParent
)
;
}
}
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
GetCellFromRange
(
nsRange
*
aRange
Element
*
*
aCell
)
{
NS_ENSURE_TRUE
(
aRange
&
&
aCell
NS_ERROR_NULL_POINTER
)
;
*
aCell
=
nullptr
;
nsCOMPtr
<
nsINode
>
startContainer
=
aRange
-
>
GetStartContainer
(
)
;
if
(
NS_WARN_IF
(
!
startContainer
)
)
{
return
NS_ERROR_FAILURE
;
}
uint32_t
startOffset
=
aRange
-
>
StartOffset
(
)
;
nsCOMPtr
<
nsINode
>
childNode
=
aRange
-
>
GetChildAtStartOffset
(
)
;
if
(
!
childNode
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsINode
>
endContainer
=
aRange
-
>
GetEndContainer
(
)
;
if
(
NS_WARN_IF
(
!
endContainer
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
startContainer
=
=
endContainer
&
&
aRange
-
>
EndOffset
(
)
=
=
startOffset
+
1
&
&
HTMLEditUtils
:
:
IsTableCell
(
childNode
)
)
{
RefPtr
<
Element
>
cellElement
=
childNode
-
>
AsElement
(
)
;
cellElement
.
forget
(
aCell
)
;
return
NS_OK
;
}
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetFirstSelectedCell
(
nsIDOMRange
*
*
aRange
Element
*
*
aCell
)
{
NS_ENSURE_TRUE
(
aCell
NS_ERROR_NULL_POINTER
)
;
*
aCell
=
nullptr
;
if
(
aRange
)
{
*
aRange
=
nullptr
;
}
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_FAILURE
)
;
RefPtr
<
nsRange
>
range
=
selection
-
>
GetRangeAt
(
0
)
;
NS_ENSURE_TRUE
(
range
NS_ERROR_FAILURE
)
;
mSelectedCellIndex
=
0
;
nsresult
rv
=
GetCellFromRange
(
range
aCell
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
if
(
!
*
aCell
)
{
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
if
(
aRange
)
{
*
aRange
=
range
.
get
(
)
;
NS_ADDREF
(
*
aRange
)
;
}
mSelectedCellIndex
=
1
;
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetNextSelectedCell
(
nsIDOMRange
*
*
aRange
Element
*
*
aCell
)
{
NS_ENSURE_TRUE
(
aCell
NS_ERROR_NULL_POINTER
)
;
*
aCell
=
nullptr
;
if
(
aRange
)
{
*
aRange
=
nullptr
;
}
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_FAILURE
)
;
int32_t
rangeCount
=
selection
-
>
RangeCount
(
)
;
if
(
mSelectedCellIndex
>
=
rangeCount
)
{
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
RefPtr
<
nsRange
>
range
;
for
(
;
mSelectedCellIndex
<
rangeCount
;
mSelectedCellIndex
+
+
)
{
range
=
selection
-
>
GetRangeAt
(
mSelectedCellIndex
)
;
NS_ENSURE_TRUE
(
range
NS_ERROR_FAILURE
)
;
nsresult
rv
=
GetCellFromRange
(
range
aCell
)
;
NS_ENSURE_SUCCESS
(
rv
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
;
if
(
*
aCell
)
{
break
;
}
}
NS_ENSURE_TRUE
(
*
aCell
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
;
if
(
aRange
)
{
*
aRange
=
range
.
get
(
)
;
NS_ADDREF
(
*
aRange
)
;
}
mSelectedCellIndex
+
+
;
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetFirstSelectedCellInTable
(
int32_t
*
aRowIndex
int32_t
*
aColIndex
Element
*
*
aCell
)
{
NS_ENSURE_TRUE
(
aCell
NS_ERROR_NULL_POINTER
)
;
*
aCell
=
nullptr
;
if
(
aRowIndex
)
{
*
aRowIndex
=
0
;
}
if
(
aColIndex
)
{
*
aColIndex
=
0
;
}
RefPtr
<
Element
>
cell
;
nsresult
rv
=
GetFirstSelectedCell
(
nullptr
getter_AddRefs
(
cell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
cell
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
;
*
aCell
=
do_AddRef
(
cell
)
.
take
(
)
;
if
(
aRowIndex
|
|
aColIndex
)
{
int32_t
startRowIndex
startColIndex
;
rv
=
GetCellIndexes
(
cell
&
startRowIndex
&
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
aRowIndex
)
{
*
aRowIndex
=
startRowIndex
;
}
if
(
aColIndex
)
{
*
aColIndex
=
startColIndex
;
}
}
return
NS_OK
;
}
void
HTMLEditor
:
:
SetSelectionAfterTableEdit
(
Element
*
aTable
int32_t
aRow
int32_t
aCol
int32_t
aDirection
bool
aSelected
)
{
if
(
NS_WARN_IF
(
!
aTable
)
|
|
Destroyed
(
)
)
{
return
;
}
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
if
(
!
selection
)
{
return
;
}
RefPtr
<
Element
>
cell
;
bool
done
=
false
;
do
{
nsresult
rv
=
GetCellAt
(
aTable
aRow
aCol
getter_AddRefs
(
cell
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
if
(
cell
)
{
if
(
aSelected
)
{
SelectElement
(
cell
)
;
return
;
}
CollapseSelectionToDeepestNonTableFirstChild
(
selection
cell
)
;
return
;
}
switch
(
aDirection
)
{
case
ePreviousColumn
:
if
(
!
aCol
)
{
if
(
aRow
>
0
)
{
aRow
-
-
;
}
else
{
done
=
true
;
}
}
else
{
aCol
-
-
;
}
break
;
case
ePreviousRow
:
if
(
!
aRow
)
{
if
(
aCol
>
0
)
{
aCol
-
-
;
}
else
{
done
=
true
;
}
}
else
{
aRow
-
-
;
}
break
;
default
:
done
=
true
;
}
}
while
(
!
done
)
;
if
(
aTable
-
>
GetParentNode
(
)
)
{
EditorRawDOMPoint
atTable
(
aTable
)
;
if
(
NS_WARN_IF
(
!
atTable
.
IsSetAndValid
(
)
)
)
{
return
;
}
selection
-
>
Collapse
(
atTable
)
;
return
;
}
SetSelectionAtDocumentStart
(
selection
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetSelectedOrParentTableElement
(
nsAString
&
aTagName
int32_t
*
aSelectedCount
Element
*
*
aTableElement
)
{
NS_ENSURE_ARG_POINTER
(
aTableElement
)
;
NS_ENSURE_ARG_POINTER
(
aSelectedCount
)
;
*
aTableElement
=
nullptr
;
aTagName
.
Truncate
(
)
;
*
aSelectedCount
=
0
;
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_FAILURE
)
;
RefPtr
<
Element
>
tableOrCellElement
;
nsresult
rv
=
GetFirstSelectedCell
(
nullptr
getter_AddRefs
(
tableOrCellElement
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_NAMED_LITERAL_STRING
(
tdName
"
td
"
)
;
if
(
tableOrCellElement
)
{
*
aSelectedCount
=
selection
-
>
RangeCount
(
)
;
aTagName
=
tdName
;
}
else
{
nsCOMPtr
<
nsINode
>
anchorNode
=
selection
-
>
GetAnchorNode
(
)
;
if
(
NS_WARN_IF
(
!
anchorNode
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
anchorNode
-
>
HasChildNodes
(
)
)
{
nsINode
*
selectedNode
=
selection
-
>
GetChildAtAnchorOffset
(
)
;
if
(
!
selectedNode
)
{
selectedNode
=
anchorNode
;
}
else
{
if
(
selectedNode
-
>
IsHTMLElement
(
nsGkAtoms
:
:
td
)
)
{
tableOrCellElement
=
selectedNode
-
>
AsElement
(
)
;
aTagName
=
tdName
;
*
aSelectedCount
=
selection
-
>
RangeCount
(
)
;
}
else
if
(
selectedNode
-
>
IsHTMLElement
(
nsGkAtoms
:
:
table
)
)
{
tableOrCellElement
=
selectedNode
-
>
AsElement
(
)
;
aTagName
.
AssignLiteral
(
"
table
"
)
;
*
aSelectedCount
=
1
;
}
else
if
(
selectedNode
-
>
IsHTMLElement
(
nsGkAtoms
:
:
tr
)
)
{
tableOrCellElement
=
selectedNode
-
>
AsElement
(
)
;
aTagName
.
AssignLiteral
(
"
tr
"
)
;
*
aSelectedCount
=
1
;
}
}
}
if
(
!
tableOrCellElement
)
{
tableOrCellElement
=
GetElementOrParentByTagName
(
tdName
anchorNode
)
;
if
(
tableOrCellElement
)
{
aTagName
=
tdName
;
}
}
}
if
(
tableOrCellElement
)
{
tableOrCellElement
.
forget
(
aTableElement
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetSelectedCellsType
(
Element
*
aElement
uint32_t
*
aSelectionType
)
{
NS_ENSURE_ARG_POINTER
(
aSelectionType
)
;
*
aSelectionType
=
0
;
RefPtr
<
Element
>
table
=
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
table
"
)
aElement
)
;
int32_t
rowCount
colCount
;
nsresult
rv
=
GetTableSize
(
table
&
rowCount
&
colCount
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
Element
>
selectedCell
;
rv
=
GetFirstSelectedCell
(
nullptr
getter_AddRefs
(
selectedCell
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
rv
=
=
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
)
{
return
NS_OK
;
}
*
aSelectionType
=
nsISelectionPrivate
:
:
TABLESELECTION_CELL
;
nsTArray
<
int32_t
>
indexArray
;
bool
allCellsInRowAreSelected
=
false
;
bool
allCellsInColAreSelected
=
false
;
while
(
NS_SUCCEEDED
(
rv
)
&
&
selectedCell
)
{
int32_t
startRowIndex
startColIndex
;
rv
=
GetCellIndexes
(
selectedCell
&
startRowIndex
&
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
!
indexArray
.
Contains
(
startColIndex
)
)
{
indexArray
.
AppendElement
(
startColIndex
)
;
allCellsInRowAreSelected
=
AllCellsInRowSelected
(
table
startRowIndex
colCount
)
;
if
(
!
allCellsInRowAreSelected
)
{
break
;
}
}
rv
=
GetNextSelectedCell
(
nullptr
getter_AddRefs
(
selectedCell
)
)
;
}
if
(
allCellsInRowAreSelected
)
{
*
aSelectionType
=
nsISelectionPrivate
:
:
TABLESELECTION_ROW
;
return
NS_OK
;
}
indexArray
.
Clear
(
)
;
rv
=
GetFirstSelectedCell
(
nullptr
getter_AddRefs
(
selectedCell
)
)
;
while
(
NS_SUCCEEDED
(
rv
)
&
&
selectedCell
)
{
int32_t
startRowIndex
startColIndex
;
rv
=
GetCellIndexes
(
selectedCell
&
startRowIndex
&
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
!
indexArray
.
Contains
(
startRowIndex
)
)
{
indexArray
.
AppendElement
(
startColIndex
)
;
allCellsInColAreSelected
=
AllCellsInColumnSelected
(
table
startColIndex
rowCount
)
;
if
(
!
allCellsInRowAreSelected
)
{
break
;
}
}
rv
=
GetNextSelectedCell
(
nullptr
getter_AddRefs
(
selectedCell
)
)
;
}
if
(
allCellsInColAreSelected
)
{
*
aSelectionType
=
nsISelectionPrivate
:
:
TABLESELECTION_COLUMN
;
}
return
NS_OK
;
}
bool
HTMLEditor
:
:
AllCellsInRowSelected
(
Element
*
aTable
int32_t
aRowIndex
int32_t
aNumberOfColumns
)
{
NS_ENSURE_TRUE
(
aTable
false
)
;
int32_t
curStartRowIndex
curStartColIndex
rowSpan
colSpan
actualRowSpan
actualColSpan
;
bool
isSelected
;
for
(
int32_t
col
=
0
;
col
<
aNumberOfColumns
;
col
+
=
std
:
:
max
(
actualColSpan
1
)
)
{
RefPtr
<
Element
>
cell
;
nsresult
rv
=
GetCellDataAt
(
aTable
aRowIndex
col
getter_AddRefs
(
cell
)
&
curStartRowIndex
&
curStartColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
NS_ENSURE_TRUE
(
cell
(
col
>
0
)
?
true
:
false
)
;
NS_ENSURE_TRUE
(
isSelected
false
)
;
NS_ASSERTION
(
(
actualColSpan
>
0
)
"
ActualColSpan
=
0
in
AllCellsInRowSelected
"
)
;
}
return
true
;
}
bool
HTMLEditor
:
:
AllCellsInColumnSelected
(
Element
*
aTable
int32_t
aColIndex
int32_t
aNumberOfRows
)
{
NS_ENSURE_TRUE
(
aTable
false
)
;
int32_t
curStartRowIndex
curStartColIndex
rowSpan
colSpan
actualRowSpan
actualColSpan
;
bool
isSelected
;
for
(
int32_t
row
=
0
;
row
<
aNumberOfRows
;
row
+
=
std
:
:
max
(
actualRowSpan
1
)
)
{
RefPtr
<
Element
>
cell
;
nsresult
rv
=
GetCellDataAt
(
aTable
row
aColIndex
getter_AddRefs
(
cell
)
&
curStartRowIndex
&
curStartColIndex
&
rowSpan
&
colSpan
&
actualRowSpan
&
actualColSpan
&
isSelected
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
NS_ENSURE_TRUE
(
cell
(
row
>
0
)
?
true
:
false
)
;
NS_ENSURE_TRUE
(
isSelected
false
)
;
}
return
true
;
}
bool
HTMLEditor
:
:
IsEmptyCell
(
dom
:
:
Element
*
aCell
)
{
MOZ_ASSERT
(
aCell
)
;
nsCOMPtr
<
nsINode
>
cellChild
=
aCell
-
>
GetFirstChild
(
)
;
if
(
!
cellChild
)
{
return
false
;
}
nsCOMPtr
<
nsINode
>
nextChild
=
cellChild
-
>
GetNextSibling
(
)
;
if
(
nextChild
)
{
return
false
;
}
if
(
cellChild
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
)
{
return
true
;
}
bool
isEmpty
;
nsresult
rv
=
IsEmptyNode
(
cellChild
&
isEmpty
false
false
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
return
isEmpty
;
}
}
