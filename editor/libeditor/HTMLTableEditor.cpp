#
include
<
stdio
.
h
>
#
include
"
mozilla
/
HTMLEditor
.
h
"
#
include
"
HTMLEditUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
EditAction
.
h
"
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
mozilla
/
EditorUtils
.
h
"
#
include
"
mozilla
/
FlushType
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsAlgorithm
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsFrameSelection
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsISupportsUtils
.
h
"
#
include
"
nsITableCellLayout
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsQueryFrame
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTableCellFrame
.
h
"
#
include
"
nsTableWrapperFrame
.
h
"
#
include
"
nscore
.
h
"
#
include
<
algorithm
>
namespace
mozilla
{
using
namespace
dom
;
class
MOZ_STACK_CLASS
AutoSelectionSetterAfterTableEdit
final
{
private
:
RefPtr
<
HTMLEditor
>
mHTMLEditor
;
RefPtr
<
Element
>
mTable
;
int32_t
mCol
mRow
mDirection
mSelected
;
public
:
AutoSelectionSetterAfterTableEdit
(
HTMLEditor
&
aHTMLEditor
Element
*
aTable
int32_t
aRow
int32_t
aCol
int32_t
aDirection
bool
aSelected
)
:
mHTMLEditor
(
&
aHTMLEditor
)
mTable
(
aTable
)
mCol
(
aCol
)
mRow
(
aRow
)
mDirection
(
aDirection
)
mSelected
(
aSelected
)
{
}
MOZ_CAN_RUN_SCRIPT
~
AutoSelectionSetterAfterTableEdit
(
)
{
if
(
mHTMLEditor
)
{
MOZ_KnownLive
(
mHTMLEditor
)
-
>
SetSelectionAfterTableEdit
(
MOZ_KnownLive
(
mTable
)
mRow
mCol
mDirection
mSelected
)
;
}
}
void
CancelSetCaret
(
)
{
mHTMLEditor
=
nullptr
;
mTable
=
nullptr
;
}
}
;
nsresult
HTMLEditor
:
:
InsertCell
(
Element
*
aCell
int32_t
aRowSpan
int32_t
aColSpan
bool
aAfter
bool
aIsHeader
Element
*
*
aNewCell
)
{
if
(
aNewCell
)
{
*
aNewCell
=
nullptr
;
}
if
(
NS_WARN_IF
(
!
aCell
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
EditorDOMPoint
pointToInsert
(
aCell
)
;
if
(
NS_WARN_IF
(
!
pointToInsert
.
IsSet
(
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
RefPtr
<
Element
>
newCell
=
CreateElementWithDefaults
(
aIsHeader
?
*
nsGkAtoms
:
:
th
:
*
nsGkAtoms
:
:
td
)
;
if
(
!
newCell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
CreateElementWithDefaults
(
nsGkAtoms
:
:
th
or
td
)
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
aNewCell
)
{
*
aNewCell
=
do_AddRef
(
newCell
)
.
take
(
)
;
}
if
(
aRowSpan
>
1
)
{
nsAutoString
newRowSpan
;
newRowSpan
.
AppendInt
(
aRowSpan
10
)
;
DebugOnly
<
nsresult
>
rvIgnored
=
newCell
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
rowspan
newRowSpan
true
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
Element
:
:
SetAttr
(
nsGkAtoms
:
:
rawspan
)
failed
but
ignored
"
)
;
}
if
(
aColSpan
>
1
)
{
nsAutoString
newColSpan
;
newColSpan
.
AppendInt
(
aColSpan
10
)
;
DebugOnly
<
nsresult
>
rvIgnored
=
newCell
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
colspan
newColSpan
true
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
Element
:
:
SetAttr
(
nsGkAtoms
:
:
colspan
)
failed
but
ignored
"
)
;
}
if
(
aAfter
)
{
DebugOnly
<
bool
>
advanced
=
pointToInsert
.
AdvanceOffset
(
)
;
NS_WARNING_ASSERTION
(
advanced
"
Failed
to
advance
offset
to
after
the
old
cell
"
)
;
}
AutoTransactionsConserveSelection
dontChangeSelection
(
*
this
)
;
nsresult
rv
=
InsertNodeWithTransaction
(
*
newCell
pointToInsert
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditorBase
:
:
InsertNodeWithTransaction
(
)
failed
"
)
;
return
rv
;
}
nsresult
HTMLEditor
:
:
SetColSpan
(
Element
*
aCell
int32_t
aColSpan
)
{
if
(
NS_WARN_IF
(
!
aCell
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsAutoString
newSpan
;
newSpan
.
AppendInt
(
aColSpan
10
)
;
nsresult
rv
=
SetAttributeWithTransaction
(
*
aCell
*
nsGkAtoms
:
:
colspan
newSpan
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditorBase
:
:
SetAttributeWithTransaction
(
nsGkAtoms
:
:
colspan
)
failed
"
)
;
return
rv
;
}
nsresult
HTMLEditor
:
:
SetRowSpan
(
Element
*
aCell
int32_t
aRowSpan
)
{
if
(
NS_WARN_IF
(
!
aCell
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsAutoString
newSpan
;
newSpan
.
AppendInt
(
aRowSpan
10
)
;
nsresult
rv
=
SetAttributeWithTransaction
(
*
aCell
*
nsGkAtoms
:
:
rowspan
newSpan
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditorBase
:
:
SetAttributeWithTransaction
(
nsGkAtoms
:
:
rowspan
)
failed
"
)
;
return
rv
;
}
NS_IMETHODIMP
HTMLEditor
:
:
InsertTableCell
(
int32_t
aNumberOfCellsToInsert
bool
aInsertAfterSelectedCell
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eInsertTableCellElement
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING_ASSERTION
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
"
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
rv
=
InsertTableCellsWithTransaction
(
aNumberOfCellsToInsert
aInsertAfterSelectedCell
?
InsertPosition
:
:
eAfterSelectedCell
:
InsertPosition
:
:
eBeforeSelectedCell
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
InsertTableCellsWithTransaction
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
nsresult
HTMLEditor
:
:
InsertTableCellsWithTransaction
(
int32_t
aNumberOfCellsToInsert
InsertPosition
aInsertPosition
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
curCell
;
nsCOMPtr
<
nsINode
>
cellParent
;
int32_t
cellOffset
startRowIndex
startColIndex
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
table
)
getter_AddRefs
(
curCell
)
getter_AddRefs
(
cellParent
)
&
cellOffset
&
startRowIndex
&
startColIndex
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
!
table
|
|
!
curCell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
didn
'
t
return
<
table
>
and
/
or
cell
"
)
;
return
NS_OK
;
}
IgnoredErrorResult
ignoredError
;
CellData
cellDataAtSelection
(
*
this
*
table
startRowIndex
startColIndex
ignoredError
)
;
if
(
cellDataAtSelection
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
couldn
'
t
find
selected
cell
"
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
MOZ_ASSERT
(
curCell
=
=
cellDataAtSelection
.
mElement
)
;
int32_t
newCellIndex
;
switch
(
aInsertPosition
)
{
case
InsertPosition
:
:
eBeforeSelectedCell
:
newCellIndex
=
cellDataAtSelection
.
mCurrent
.
mColumn
;
break
;
case
InsertPosition
:
:
eAfterSelectedCell
:
MOZ_ASSERT
(
!
cellDataAtSelection
.
IsSpannedFromOtherRowOrColumn
(
)
)
;
newCellIndex
=
cellDataAtSelection
.
NextColumnIndex
(
)
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
InsertPosition
"
)
;
}
AutoPlaceholderBatch
treateAsOneTransaction
(
*
this
)
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eInsertNode
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
ignoredError
.
SuppressException
(
)
;
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
cellDataAtSelection
.
mCurrent
.
mRow
newCellIndex
ePreviousColumn
false
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
*
this
)
;
EditorDOMPoint
pointToInsert
(
cellParent
cellOffset
)
;
if
(
NS_WARN_IF
(
!
pointToInsert
.
IsSet
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
aInsertPosition
=
=
InsertPosition
:
:
eAfterSelectedCell
)
{
DebugOnly
<
bool
>
advanced
=
pointToInsert
.
AdvanceOffset
(
)
;
NS_WARNING_ASSERTION
(
advanced
"
Failed
to
move
insertion
point
after
the
cell
"
)
;
}
for
(
int32_t
i
=
0
;
i
<
aNumberOfCellsToInsert
;
i
+
+
)
{
RefPtr
<
Element
>
newCell
=
CreateElementWithDefaults
(
*
nsGkAtoms
:
:
td
)
;
if
(
!
newCell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
CreateElementWithDefaults
(
nsGkAtoms
:
:
td
)
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
AutoEditorDOMPointChildInvalidator
lockOffset
(
pointToInsert
)
;
nsresult
rv
=
InsertNodeWithTransaction
(
*
newCell
pointToInsert
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
EditorBase
:
:
InsertNodeWithTransaction
(
)
failed
"
)
;
return
rv
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetFirstRow
(
Element
*
aTableOrElementInTable
Element
*
*
aFirstRowElement
)
{
if
(
NS_WARN_IF
(
!
aTableOrElementInTable
)
|
|
NS_WARN_IF
(
!
aFirstRowElement
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
ErrorResult
error
;
RefPtr
<
Element
>
firstRowElement
=
GetFirstTableRowElement
(
*
aTableOrElementInTable
error
)
;
NS_WARNING_ASSERTION
(
!
error
.
Failed
(
)
"
HTMLEditor
:
:
GetFirstTableRowElement
(
)
failed
"
)
;
firstRowElement
.
forget
(
aFirstRowElement
)
;
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
Element
*
HTMLEditor
:
:
GetFirstTableRowElement
(
Element
&
aTableOrElementInTable
ErrorResult
&
aRv
)
const
{
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
Element
*
tableElement
=
GetElementOrParentByTagNameInternal
(
*
nsGkAtoms
:
:
table
aTableOrElementInTable
)
;
if
(
!
tableElement
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameInternal
(
nsGkAtoms
:
:
table
)
"
"
failed
"
)
;
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
for
(
nsIContent
*
tableChild
=
tableElement
-
>
GetFirstChild
(
)
;
tableChild
;
tableChild
=
tableChild
-
>
GetNextSibling
(
)
)
{
if
(
tableChild
-
>
IsHTMLElement
(
nsGkAtoms
:
:
tr
)
)
{
return
tableChild
-
>
AsElement
(
)
;
}
if
(
tableChild
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
tbody
nsGkAtoms
:
:
thead
nsGkAtoms
:
:
tfoot
)
)
{
for
(
nsIContent
*
tableSectionChild
=
tableChild
-
>
GetFirstChild
(
)
;
tableSectionChild
;
tableSectionChild
=
tableSectionChild
-
>
GetNextSibling
(
)
)
{
if
(
tableSectionChild
-
>
IsHTMLElement
(
nsGkAtoms
:
:
tr
)
)
{
return
tableSectionChild
-
>
AsElement
(
)
;
}
}
}
}
return
nullptr
;
}
Element
*
HTMLEditor
:
:
GetNextTableRowElement
(
Element
&
aTableRowElement
ErrorResult
&
aRv
)
const
{
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
if
(
NS_WARN_IF
(
!
aTableRowElement
.
IsHTMLElement
(
nsGkAtoms
:
:
tr
)
)
)
{
aRv
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
nullptr
;
}
for
(
nsIContent
*
maybeNextRow
=
aTableRowElement
.
GetNextSibling
(
)
;
maybeNextRow
;
maybeNextRow
=
maybeNextRow
-
>
GetNextSibling
(
)
)
{
if
(
maybeNextRow
-
>
IsHTMLElement
(
nsGkAtoms
:
:
tr
)
)
{
return
maybeNextRow
-
>
AsElement
(
)
;
}
}
Element
*
parentElementOfRow
=
aTableRowElement
.
GetParentElement
(
)
;
if
(
!
parentElementOfRow
)
{
NS_WARNING
(
"
aTableRowElement
was
an
orphan
node
"
)
;
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
if
(
parentElementOfRow
-
>
IsHTMLElement
(
nsGkAtoms
:
:
table
)
)
{
return
nullptr
;
}
for
(
nsIContent
*
maybeNextTableSection
=
parentElementOfRow
-
>
GetNextSibling
(
)
;
maybeNextTableSection
;
maybeNextTableSection
=
maybeNextTableSection
-
>
GetNextSibling
(
)
)
{
if
(
maybeNextTableSection
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
tbody
nsGkAtoms
:
:
thead
nsGkAtoms
:
:
tfoot
)
)
{
for
(
nsIContent
*
maybeNextRow
=
maybeNextTableSection
-
>
GetFirstChild
(
)
;
maybeNextRow
;
maybeNextRow
=
maybeNextRow
-
>
GetNextSibling
(
)
)
{
if
(
maybeNextRow
-
>
IsHTMLElement
(
nsGkAtoms
:
:
tr
)
)
{
return
maybeNextRow
-
>
AsElement
(
)
;
}
}
}
else
if
(
maybeNextTableSection
-
>
IsHTMLElement
(
nsGkAtoms
:
:
tr
)
)
{
return
maybeNextTableSection
-
>
AsElement
(
)
;
}
}
return
nullptr
;
}
nsresult
HTMLEditor
:
:
GetLastCellInRow
(
nsINode
*
aRowNode
nsINode
*
*
aCellNode
)
{
if
(
NS_WARN_IF
(
!
aCellNode
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
aCellNode
=
nullptr
;
if
(
NS_WARN_IF
(
!
aRowNode
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsCOMPtr
<
nsINode
>
rowChild
=
aRowNode
-
>
GetLastChild
(
)
;
while
(
rowChild
&
&
!
HTMLEditUtils
:
:
IsTableCell
(
rowChild
)
)
{
rowChild
=
rowChild
-
>
GetPreviousSibling
(
)
;
}
if
(
rowChild
)
{
rowChild
.
forget
(
aCellNode
)
;
return
NS_OK
;
}
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
NS_IMETHODIMP
HTMLEditor
:
:
InsertTableColumn
(
int32_t
aNumberOfColumnsToInsert
bool
aInsertAfterSelectedCell
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eInsertTableColumn
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING_ASSERTION
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
"
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
rv
=
InsertTableColumnsWithTransaction
(
aNumberOfColumnsToInsert
aInsertAfterSelectedCell
?
InsertPosition
:
:
eAfterSelectedCell
:
InsertPosition
:
:
eBeforeSelectedCell
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
InsertTableColumnsWithTransaction
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
nsresult
HTMLEditor
:
:
InsertTableColumnsWithTransaction
(
int32_t
aNumberOfColumnsToInsert
InsertPosition
aInsertPosition
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
curCell
;
int32_t
startRowIndex
startColIndex
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
table
)
getter_AddRefs
(
curCell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
failed
"
)
;
return
rv
;
}
if
(
!
table
|
|
!
curCell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
didn
'
t
return
<
table
>
and
/
or
cell
"
)
;
return
NS_OK
;
}
IgnoredErrorResult
ignoredError
;
CellData
cellDataAtSelection
(
*
this
*
table
startRowIndex
startColIndex
ignoredError
)
;
if
(
cellDataAtSelection
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
couldn
'
t
find
selected
cell
"
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
MOZ_ASSERT
(
curCell
=
=
cellDataAtSelection
.
mElement
)
;
ErrorResult
error
;
TableSize
tableSize
(
*
this
*
table
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
MOZ_ASSERT
(
!
tableSize
.
IsEmpty
(
)
)
;
AutoPlaceholderBatch
treateAsOneTransaction
(
*
this
)
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eInsertNode
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
ignoredError
.
SuppressException
(
)
;
switch
(
aInsertPosition
)
{
case
InsertPosition
:
:
eBeforeSelectedCell
:
break
;
case
InsertPosition
:
:
eAfterSelectedCell
:
startColIndex
+
=
cellDataAtSelection
.
mEffectiveColSpan
;
if
(
!
cellDataAtSelection
.
mColSpan
)
{
DebugOnly
<
nsresult
>
rvIgnored
=
SetColSpan
(
MOZ_KnownLive
(
cellDataAtSelection
.
mElement
)
cellDataAtSelection
.
mEffectiveColSpan
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
HTMLEditor
:
:
SetColSpan
(
)
failed
but
ignored
"
)
;
}
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
InsertPosition
"
)
;
}
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
cellDataAtSelection
.
mCurrent
.
mRow
startColIndex
ePreviousRow
false
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
*
this
)
;
if
(
startColIndex
>
=
tableSize
.
mColumnCount
)
{
DebugOnly
<
nsresult
>
rv
=
NormalizeTableInternal
(
*
table
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
NormalizeTableInternal
(
)
failed
but
ignored
"
)
;
}
RefPtr
<
Element
>
rowElement
;
for
(
int32_t
rowIndex
=
0
;
rowIndex
<
tableSize
.
mRowCount
;
rowIndex
+
+
)
{
if
(
startColIndex
<
tableSize
.
mColumnCount
)
{
CellData
cellData
(
*
this
*
table
rowIndex
startColIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
if
(
!
cellData
.
mElement
)
{
continue
;
}
if
(
cellData
.
IsSpannedFromOtherColumn
(
)
)
{
if
(
cellData
.
mColSpan
>
0
)
{
DebugOnly
<
nsresult
>
rvIgnored
=
SetColSpan
(
MOZ_KnownLive
(
cellData
.
mElement
)
cellData
.
mColSpan
+
aNumberOfColumnsToInsert
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
HTMLEditor
:
:
SetColSpan
(
)
failed
but
ignored
"
)
;
}
continue
;
}
CollapseSelectionToStartOf
(
MOZ_KnownLive
(
*
cellData
.
mElement
)
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
CollapseSelectionToStartOf
(
)
failed
but
ignored
"
)
;
ignoredError
.
SuppressException
(
)
;
rv
=
InsertTableCellsWithTransaction
(
aNumberOfColumnsToInsert
InsertPosition
:
:
eBeforeSelectedCell
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
InsertTableCellsWithTransaction
(
)
"
"
failed
but
might
be
ignored
"
)
;
continue
;
}
if
(
!
rowIndex
)
{
rowElement
=
GetFirstTableRowElement
(
*
table
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetFirstTableRowElement
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
if
(
!
rowElement
)
{
NS_WARNING
(
"
There
was
no
table
row
"
)
;
continue
;
}
}
else
{
if
(
!
rowElement
)
{
NS_WARNING
(
"
Have
not
found
table
row
yet
"
)
;
return
NS_ERROR_FAILURE
;
}
rowElement
=
GetNextTableRowElement
(
*
rowElement
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetNextTableRowElement
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
if
(
!
rowElement
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetNextTableRowElement
(
)
didn
'
t
return
<
tr
>
element
"
)
;
continue
;
}
}
nsCOMPtr
<
nsINode
>
lastCellNode
;
rv
=
GetLastCellInRow
(
rowElement
getter_AddRefs
(
lastCellNode
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetLastCellInRow
(
)
failed
"
)
;
return
rv
;
}
if
(
!
lastCellNode
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetLastCellInRow
(
)
didn
'
t
return
cell
"
)
;
return
NS_ERROR_FAILURE
;
}
CollapseSelectionToStartOf
(
*
lastCellNode
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
CollapseSelectionToStartOf
(
)
failed
but
ignored
"
)
;
ignoredError
.
SuppressException
(
)
;
rv
=
InsertTableCellsWithTransaction
(
aNumberOfColumnsToInsert
InsertPosition
:
:
eAfterSelectedCell
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
InsertTableCellsWithTransaction
(
)
"
"
failed
but
might
be
ignored
"
)
;
}
return
rv
;
}
NS_IMETHODIMP
HTMLEditor
:
:
InsertTableRow
(
int32_t
aNumberOfRowsToInsert
bool
aInsertAfterSelectedCell
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eInsertTableRowElement
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING_ASSERTION
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
"
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
rv
=
InsertTableRowsWithTransaction
(
aNumberOfRowsToInsert
aInsertAfterSelectedCell
?
InsertPosition
:
:
eAfterSelectedCell
:
InsertPosition
:
:
eBeforeSelectedCell
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
InsertTableRowsWithTransaction
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
nsresult
HTMLEditor
:
:
InsertTableRowsWithTransaction
(
int32_t
aNumberOfRowsToInsert
InsertPosition
aInsertPosition
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
curCell
;
int32_t
startRowIndex
startColIndex
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
table
)
getter_AddRefs
(
curCell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
failed
"
)
;
return
rv
;
}
if
(
!
table
|
|
!
curCell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
didn
'
t
return
<
table
>
and
/
or
cell
"
)
;
return
NS_OK
;
}
IgnoredErrorResult
ignoredError
;
CellData
cellDataAtSelection
(
*
this
*
table
startRowIndex
startColIndex
ignoredError
)
;
ignoredError
.
SuppressException
(
)
;
if
(
cellDataAtSelection
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
couldn
'
t
find
selected
cell
"
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
curCell
=
=
cellDataAtSelection
.
mElement
)
;
ErrorResult
error
;
TableSize
tableSize
(
*
this
*
table
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
MOZ_ASSERT
(
!
tableSize
.
IsEmpty
(
)
)
;
AutoPlaceholderBatch
treateAsOneTransaction
(
*
this
)
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eInsertNode
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
switch
(
aInsertPosition
)
{
case
InsertPosition
:
:
eBeforeSelectedCell
:
break
;
case
InsertPosition
:
:
eAfterSelectedCell
:
startRowIndex
+
=
cellDataAtSelection
.
mEffectiveRowSpan
;
if
(
!
cellDataAtSelection
.
mRowSpan
)
{
DebugOnly
<
nsresult
>
rvIgnored
=
SetRowSpan
(
MOZ_KnownLive
(
cellDataAtSelection
.
mElement
)
cellDataAtSelection
.
mEffectiveRowSpan
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
HTMLEditor
:
:
SetRowSpan
(
)
failed
but
ignored
"
)
;
}
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
InsertPosition
"
)
;
}
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
startRowIndex
cellDataAtSelection
.
mCurrent
.
mColumn
ePreviousColumn
false
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
*
this
)
;
RefPtr
<
Element
>
cellForRowParent
;
int32_t
cellsInRow
=
0
;
if
(
startRowIndex
<
tableSize
.
mRowCount
)
{
CellData
cellData
;
for
(
int32_t
colIndex
=
0
;
;
colIndex
=
cellData
.
NextColumnIndex
(
)
)
{
cellData
.
Update
(
*
this
*
table
startRowIndex
colIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
break
;
}
if
(
!
cellData
.
mElement
)
{
NS_WARNING
(
"
CellData
:
:
Update
(
)
succeeded
but
didn
'
t
set
mElement
"
)
;
break
;
}
if
(
cellData
.
IsSpannedFromOtherRow
(
)
)
{
if
(
cellData
.
mRowSpan
>
0
)
{
DebugOnly
<
nsresult
>
rvIgnored
=
SetRowSpan
(
MOZ_KnownLive
(
cellData
.
mElement
)
cellData
.
mRowSpan
+
aNumberOfRowsToInsert
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
HTMLEditor
:
:
SetRowSpan
(
)
failed
but
ignored
"
)
;
}
continue
;
}
cellsInRow
+
=
cellData
.
mEffectiveColSpan
;
if
(
!
cellForRowParent
)
{
cellForRowParent
=
cellData
.
mElement
;
}
MOZ_ASSERT
(
colIndex
<
cellData
.
NextColumnIndex
(
)
)
;
}
}
else
{
cellsInRow
=
tableSize
.
mColumnCount
;
const
int32_t
kLastRowIndex
=
tableSize
.
mRowCount
-
1
;
CellData
cellData
;
for
(
int32_t
colIndex
=
0
;
;
colIndex
=
cellData
.
NextColumnIndex
(
)
)
{
cellData
.
Update
(
*
this
*
table
kLastRowIndex
colIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
break
;
}
if
(
!
cellData
.
mRowSpan
)
{
MOZ_ASSERT
(
cellsInRow
>
=
cellData
.
mEffectiveColSpan
)
;
cellsInRow
-
=
cellData
.
mEffectiveColSpan
;
}
if
(
!
cellForRowParent
&
&
!
cellData
.
IsSpannedFromOtherRow
(
)
)
{
cellForRowParent
=
cellData
.
mElement
;
}
MOZ_ASSERT
(
colIndex
<
cellData
.
NextColumnIndex
(
)
)
;
}
}
if
(
!
cellsInRow
)
{
NS_WARNING
(
"
There
was
no
cell
element
in
the
last
row
"
)
;
return
NS_OK
;
}
if
(
!
cellForRowParent
)
{
NS_WARNING
(
"
There
was
no
cell
element
for
the
<
tr
>
element
"
)
;
return
NS_ERROR_FAILURE
;
}
Element
*
parentRow
=
GetElementOrParentByTagNameInternal
(
*
nsGkAtoms
:
:
tr
*
cellForRowParent
)
;
if
(
!
parentRow
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameInternal
(
nsGkAtoms
:
:
tr
)
"
"
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
EditorDOMPoint
pointToInsert
(
parentRow
)
;
if
(
NS_WARN_IF
(
!
pointToInsert
.
IsSet
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
aInsertPosition
=
=
InsertPosition
:
:
eAfterSelectedCell
&
&
startRowIndex
>
=
tableSize
.
mRowCount
)
{
DebugOnly
<
bool
>
advanced
=
pointToInsert
.
AdvanceOffset
(
)
;
NS_WARNING_ASSERTION
(
advanced
"
Failed
to
advance
offset
"
)
;
}
for
(
int32_t
row
=
0
;
row
<
aNumberOfRowsToInsert
;
row
+
+
)
{
RefPtr
<
Element
>
newRow
=
CreateElementWithDefaults
(
*
nsGkAtoms
:
:
tr
)
;
if
(
!
newRow
)
{
NS_WARNING
(
"
HTMLEditor
:
:
CreateElementWithDefaults
(
nsGkAtoms
:
:
tr
)
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
for
(
int32_t
i
=
0
;
i
<
cellsInRow
;
i
+
+
)
{
RefPtr
<
Element
>
newCell
=
CreateElementWithDefaults
(
*
nsGkAtoms
:
:
td
)
;
if
(
!
newCell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
CreateElementWithDefaults
(
nsGkAtoms
:
:
td
)
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
newRow
-
>
AppendChild
(
*
newCell
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
nsINode
:
:
AppendChild
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
}
AutoEditorDOMPointChildInvalidator
lockOffset
(
pointToInsert
)
;
nsresult
rv
=
InsertNodeWithTransaction
(
*
newRow
pointToInsert
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
EditorBase
:
:
InsertNodeWithTransaction
(
)
failed
"
)
;
return
rv
;
}
}
if
(
RefPtr
<
PresShell
>
presShell
=
GetPresShell
(
)
)
{
presShell
-
>
FlushPendingNotifications
(
FlushType
:
:
Frames
)
;
}
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
DeleteTableElementAndChildrenWithTransaction
(
Element
&
aTableElement
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
{
AutoHideSelectionChanges
hideSelection
(
SelectionRefPtr
(
)
)
;
if
(
SelectionRefPtr
(
)
-
>
RangeCount
(
)
)
{
ErrorResult
error
;
SelectionRefPtr
(
)
-
>
RemoveAllRanges
(
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
Selection
:
:
RemoveAllRanges
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
}
RefPtr
<
nsRange
>
range
=
nsRange
:
:
Create
(
&
aTableElement
)
;
ErrorResult
error
;
range
-
>
SelectNode
(
aTableElement
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
nsRange
:
:
SelectNode
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
MOZ_KnownLive
(
SelectionRefPtr
(
)
)
-
>
AddRangeAndSelectFramesAndNotifyListeners
(
*
range
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
Selection
:
:
AddRangeAndSelectFramesAndNotifyListeners
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
#
ifdef
DEBUG
range
=
SelectionRefPtr
(
)
-
>
GetRangeAt
(
0
)
;
MOZ_ASSERT
(
range
)
;
MOZ_ASSERT
(
range
-
>
GetStartContainer
(
)
=
=
aTableElement
.
GetParent
(
)
)
;
MOZ_ASSERT
(
range
-
>
GetEndContainer
(
)
=
=
aTableElement
.
GetParent
(
)
)
;
MOZ_ASSERT
(
range
-
>
GetChildAtStartOffset
(
)
=
=
&
aTableElement
)
;
MOZ_ASSERT
(
range
-
>
GetChildAtEndOffset
(
)
=
=
aTableElement
.
GetNextSibling
(
)
)
;
#
endif
}
nsresult
rv
=
DeleteSelectionAsSubAction
(
eNext
eStrip
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
TextEditor
:
:
DeleteSelectionAsSubAction
(
eNext
eStrip
)
failed
"
)
;
return
rv
;
}
NS_IMETHODIMP
HTMLEditor
:
:
DeleteTable
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eRemoveTableElement
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING_ASSERTION
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
"
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
RefPtr
<
Element
>
table
;
rv
=
GetCellContext
(
getter_AddRefs
(
table
)
nullptr
nullptr
nullptr
nullptr
nullptr
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
if
(
!
table
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
didn
'
t
return
<
table
>
element
"
)
;
return
NS_ERROR_FAILURE
;
}
AutoPlaceholderBatch
treateAsOneTransaction
(
*
this
)
;
rv
=
DeleteTableElementAndChildrenWithTransaction
(
*
table
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTableElementAndChildrenWithTransaction
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
DeleteTableCell
(
int32_t
aNumberOfCellsToDelete
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eRemoveTableCellElement
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING_ASSERTION
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
"
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
rv
=
DeleteTableCellWithTransaction
(
aNumberOfCellsToDelete
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTableCellWithTransaction
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
nsresult
HTMLEditor
:
:
DeleteTableCellWithTransaction
(
int32_t
aNumberOfCellsToDelete
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
cell
;
int32_t
startRowIndex
startColIndex
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
table
)
getter_AddRefs
(
cell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
failed
"
)
;
return
rv
;
}
if
(
!
table
|
|
!
cell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
didn
'
t
return
<
table
>
and
/
or
cell
"
)
;
return
NS_OK
;
}
AutoPlaceholderBatch
treateAsOneTransaction
(
*
this
)
;
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eDeleteNode
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
ErrorResult
error
;
RefPtr
<
Element
>
firstSelectedCellElement
=
GetFirstSelectedTableCellElement
(
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetFirstSelectedTableCellElement
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
MOZ_ASSERT
(
SelectionRefPtr
(
)
-
>
RangeCount
(
)
)
;
TableSize
tableSize
(
*
this
*
table
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
MOZ_ASSERT
(
!
tableSize
.
IsEmpty
(
)
)
;
if
(
!
firstSelectedCellElement
|
|
SelectionRefPtr
(
)
-
>
RangeCount
(
)
=
=
1
)
{
for
(
int32_t
i
=
0
;
i
<
aNumberOfCellsToDelete
;
i
+
+
)
{
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
table
)
getter_AddRefs
(
cell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
failed
"
)
;
return
rv
;
}
if
(
!
table
|
|
!
cell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
didn
'
t
return
<
table
>
and
/
or
cell
"
)
;
return
NS_OK
;
}
int32_t
numberOfCellsInRow
=
GetNumberOfCellsInRow
(
*
table
startRowIndex
)
;
NS_WARNING_ASSERTION
(
numberOfCellsInRow
>
=
0
"
HTMLEditor
:
:
GetNumberOfCellsInRow
(
)
failed
but
ignored
"
)
;
if
(
numberOfCellsInRow
=
=
1
)
{
if
(
tableSize
.
mRowCount
=
=
1
)
{
nsresult
rv
=
DeleteTableElementAndChildrenWithTransaction
(
*
table
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTableElementAndChildrenWithTransaction
(
)
"
"
failed
"
)
;
return
rv
;
}
rv
=
DeleteSelectedTableRowsWithTransaction
(
1
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteSelectedTableRowsWithTransaction
(
1
)
failed
"
)
;
return
rv
;
}
MOZ_ASSERT
(
tableSize
.
mRowCount
)
;
tableSize
.
mRowCount
-
-
;
continue
;
}
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
startRowIndex
startColIndex
ePreviousColumn
false
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
*
this
)
;
rv
=
DeleteNodeWithTransaction
(
*
cell
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteNodeWithTransaction
(
)
failed
"
)
;
return
rv
;
}
}
return
NS_OK
;
}
CellIndexes
firstCellIndexes
(
*
firstSelectedCellElement
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellIndexes
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
cell
=
firstSelectedCellElement
;
startRowIndex
=
firstCellIndexes
.
mRow
;
startColIndex
=
firstCellIndexes
.
mColumn
;
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
startRowIndex
startColIndex
ePreviousColumn
false
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
*
this
)
;
bool
checkToDeleteRow
=
true
;
bool
checkToDeleteColumn
=
true
;
while
(
cell
)
{
if
(
checkToDeleteRow
)
{
checkToDeleteRow
=
false
;
if
(
AllCellsInRowSelected
(
table
startRowIndex
tableSize
.
mColumnCount
)
)
{
int32_t
nextRow
=
startRowIndex
;
while
(
nextRow
=
=
startRowIndex
)
{
cell
=
GetNextSelectedTableCellElement
(
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetNextSelectedTableCellElement
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
if
(
!
cell
)
{
break
;
}
CellIndexes
nextSelectedCellIndexes
(
*
cell
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellIndexes
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
nextRow
=
nextSelectedCellIndexes
.
mRow
;
startColIndex
=
nextSelectedCellIndexes
.
mColumn
;
}
if
(
tableSize
.
mRowCount
=
=
1
)
{
nsresult
rv
=
DeleteTableElementAndChildrenWithTransaction
(
*
table
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTableElementAndChildrenWithTransaction
(
)
"
"
failed
"
)
;
return
rv
;
}
nsresult
rv
=
DeleteTableRowWithTransaction
(
*
table
startRowIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTableRowWithTransaction
(
)
failed
"
)
;
return
rv
;
}
MOZ_ASSERT
(
tableSize
.
mRowCount
)
;
tableSize
.
mRowCount
-
-
;
if
(
!
cell
)
{
break
;
}
startRowIndex
=
nextRow
-
1
;
checkToDeleteRow
=
true
;
continue
;
}
}
if
(
checkToDeleteColumn
)
{
checkToDeleteColumn
=
false
;
if
(
AllCellsInColumnSelected
(
table
startColIndex
tableSize
.
mColumnCount
)
)
{
int32_t
nextCol
=
startColIndex
;
while
(
nextCol
=
=
startColIndex
)
{
cell
=
GetNextSelectedTableCellElement
(
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetNextSelectedTableCellElement
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
if
(
!
cell
)
{
break
;
}
CellIndexes
nextSelectedCellIndexes
(
*
cell
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellIndexes
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
startRowIndex
=
nextSelectedCellIndexes
.
mRow
;
nextCol
=
nextSelectedCellIndexes
.
mColumn
;
}
nsresult
rv
=
DeleteTableColumnWithTransaction
(
*
table
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTableColumnWithTransaction
(
)
failed
"
)
;
return
rv
;
}
MOZ_ASSERT
(
tableSize
.
mColumnCount
)
;
tableSize
.
mColumnCount
-
-
;
if
(
!
cell
)
{
break
;
}
startColIndex
=
nextCol
-
1
;
checkToDeleteColumn
=
true
;
continue
;
}
}
RefPtr
<
Element
>
nextCell
=
GetNextSelectedTableCellElement
(
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetNextSelectedTableCellElement
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
nsresult
rv
=
DeleteNodeWithTransaction
(
*
cell
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteNodeWithTransaction
(
)
failed
"
)
;
return
rv
;
}
if
(
!
nextCell
)
{
return
NS_OK
;
}
CellIndexes
nextCellIndexes
(
*
nextCell
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellIndexes
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
startRowIndex
=
nextCellIndexes
.
mRow
;
startColIndex
=
nextCellIndexes
.
mColumn
;
cell
=
std
:
:
move
(
nextCell
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
DeleteTableCellContents
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eDeleteTableCellContents
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING_ASSERTION
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
"
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
rv
=
DeleteTableCellContentsWithTransaction
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTableCellContentsWithTransaction
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
nsresult
HTMLEditor
:
:
DeleteTableCellContentsWithTransaction
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
cell
;
int32_t
startRowIndex
startColIndex
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
table
)
getter_AddRefs
(
cell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
failed
"
)
;
return
rv
;
}
if
(
!
cell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
didn
'
t
return
cell
element
"
)
;
return
NS_OK
;
}
AutoPlaceholderBatch
treateAsOneTransaction
(
*
this
)
;
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eDeleteNode
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
*
this
)
;
ErrorResult
error
;
RefPtr
<
Element
>
firstSelectedCellElement
=
GetFirstSelectedTableCellElement
(
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetFirstSelectedTableCellElement
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
if
(
firstSelectedCellElement
)
{
CellIndexes
firstCellIndexes
(
*
firstSelectedCellElement
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellIndexes
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
cell
=
firstSelectedCellElement
;
startRowIndex
=
firstCellIndexes
.
mRow
;
startColIndex
=
firstCellIndexes
.
mColumn
;
}
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
startRowIndex
startColIndex
ePreviousColumn
false
)
;
while
(
cell
)
{
DebugOnly
<
nsresult
>
rv
=
DeleteAllChildrenWithTransaction
(
*
cell
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteAllChildrenWithTransaction
(
)
failed
but
ignored
"
)
;
if
(
!
firstSelectedCellElement
)
{
return
NS_OK
;
}
cell
=
GetNextSelectedTableCellElement
(
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetNextSelectedTableCellElement
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
DeleteTableColumn
(
int32_t
aNumberOfColumnsToDelete
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eRemoveTableColumn
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING_ASSERTION
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
"
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
rv
=
DeleteSelectedTableColumnsWithTransaction
(
aNumberOfColumnsToDelete
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteSelectedTableColumnsWithTransaction
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
nsresult
HTMLEditor
:
:
DeleteSelectedTableColumnsWithTransaction
(
int32_t
aNumberOfColumnsToDelete
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
cell
;
int32_t
startRowIndex
startColIndex
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
table
)
getter_AddRefs
(
cell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
failed
"
)
;
return
rv
;
}
if
(
!
table
|
|
!
cell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
didn
'
t
return
<
table
>
and
/
or
cell
"
)
;
return
NS_OK
;
}
ErrorResult
error
;
TableSize
tableSize
(
*
this
*
table
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
AutoPlaceholderBatch
treateAsOneTransaction
(
*
this
)
;
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eDeleteNode
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
if
(
!
startColIndex
&
&
aNumberOfColumnsToDelete
>
=
tableSize
.
mColumnCount
)
{
nsresult
rv
=
DeleteTableElementAndChildrenWithTransaction
(
*
table
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTableElementAndChildrenWithTransaction
(
)
failed
"
)
;
return
rv
;
}
RefPtr
<
Element
>
firstSelectedCellElement
=
GetFirstSelectedTableCellElement
(
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetFirstSelectedTableCellElement
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
MOZ_ASSERT
(
SelectionRefPtr
(
)
-
>
RangeCount
(
)
)
;
if
(
firstSelectedCellElement
&
&
SelectionRefPtr
(
)
-
>
RangeCount
(
)
>
1
)
{
CellIndexes
firstCellIndexes
(
*
firstSelectedCellElement
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellIndexes
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
startRowIndex
=
firstCellIndexes
.
mRow
;
startColIndex
=
firstCellIndexes
.
mColumn
;
}
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
startRowIndex
startColIndex
ePreviousRow
false
)
;
if
(
!
firstSelectedCellElement
|
|
SelectionRefPtr
(
)
-
>
RangeCount
(
)
=
=
1
)
{
int32_t
columnCountToRemove
=
std
:
:
min
(
aNumberOfColumnsToDelete
tableSize
.
mColumnCount
-
startColIndex
)
;
for
(
int32_t
i
=
0
;
i
<
columnCountToRemove
;
i
+
+
)
{
nsresult
rv
=
DeleteTableColumnWithTransaction
(
*
table
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTableColumnWithTransaction
(
)
failed
"
)
;
return
rv
;
}
}
return
NS_OK
;
}
for
(
cell
=
firstSelectedCellElement
;
cell
;
)
{
if
(
cell
!
=
firstSelectedCellElement
)
{
CellIndexes
cellIndexes
(
*
cell
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellIndexes
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
startRowIndex
=
cellIndexes
.
mRow
;
startColIndex
=
cellIndexes
.
mColumn
;
}
int32_t
nextCol
=
startColIndex
;
while
(
nextCol
=
=
startColIndex
)
{
cell
=
GetNextSelectedTableCellElement
(
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetNextSelectedTableCellElement
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
if
(
!
cell
)
{
break
;
}
CellIndexes
cellIndexes
(
*
cell
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellIndexes
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
startRowIndex
=
cellIndexes
.
mRow
;
nextCol
=
cellIndexes
.
mColumn
;
}
nsresult
rv
=
DeleteTableColumnWithTransaction
(
*
table
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTableColumnWithTransaction
(
)
failed
"
)
;
return
rv
;
}
}
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
DeleteTableColumnWithTransaction
(
Element
&
aTableElement
int32_t
aColumnIndex
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
ErrorResult
error
;
IgnoredErrorResult
ignoredError
;
for
(
int32_t
rowIndex
=
0
;
;
rowIndex
+
+
)
{
CellData
cellData
(
*
this
aTableElement
rowIndex
aColumnIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
return
NS_OK
;
}
MOZ_ASSERT
(
cellData
.
mColSpan
>
=
0
)
;
if
(
cellData
.
IsSpannedFromOtherColumn
(
)
|
|
cellData
.
mColSpan
!
=
1
)
{
if
(
cellData
.
mColSpan
>
0
)
{
NS_WARNING_ASSERTION
(
cellData
.
mColSpan
>
1
"
colspan
should
be
2
or
larger
"
)
;
DebugOnly
<
nsresult
>
rvIgnored
=
SetColSpan
(
MOZ_KnownLive
(
cellData
.
mElement
)
cellData
.
mColSpan
-
1
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
HTMLEditor
:
:
SetColSpan
(
)
failed
but
ignored
"
)
;
}
if
(
!
cellData
.
IsSpannedFromOtherColumn
(
)
)
{
DebugOnly
<
nsresult
>
rvIgnored
=
DeleteAllChildrenWithTransaction
(
MOZ_KnownLive
(
*
cellData
.
mElement
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
HTMLEditor
:
:
DeleteAllChildrenWithTransaction
(
)
"
"
failed
but
ignored
"
)
;
}
rowIndex
+
=
cellData
.
NumberOfFollowingRows
(
)
;
continue
;
}
int32_t
numberOfCellsInRow
=
GetNumberOfCellsInRow
(
aTableElement
cellData
.
mCurrent
.
mRow
)
;
NS_WARNING_ASSERTION
(
numberOfCellsInRow
>
0
"
HTMLEditor
:
:
GetNumberOfCellsInRow
(
)
failed
but
ignored
"
)
;
if
(
numberOfCellsInRow
!
=
1
)
{
nsresult
rv
=
DeleteNodeWithTransaction
(
MOZ_KnownLive
(
*
cellData
.
mElement
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteNodeWithTransaction
(
)
failed
"
)
;
return
rv
;
}
rowIndex
+
=
cellData
.
NumberOfFollowingRows
(
)
;
continue
;
}
Element
*
parentRow
=
GetElementOrParentByTagNameInternal
(
*
nsGkAtoms
:
:
tr
*
cellData
.
mElement
)
;
if
(
!
parentRow
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameInternal
(
nsGkAtoms
:
:
tr
)
"
"
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
TableSize
tableSize
(
*
this
aTableElement
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
if
(
tableSize
.
mRowCount
=
=
1
)
{
nsresult
rv
=
DeleteTableElementAndChildrenWithTransaction
(
aTableElement
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTableElementAndChildrenWithTransaction
(
)
failed
"
)
;
return
rv
;
}
nsresult
rv
=
DeleteTableRowWithTransaction
(
aTableElement
cellData
.
mFirst
.
mRow
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTableRowWithTransaction
(
)
failed
"
)
;
return
rv
;
}
rowIndex
-
-
;
}
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
DeleteTableRow
(
int32_t
aNumberOfRowsToDelete
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eRemoveTableRowElement
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING_ASSERTION
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
"
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
rv
=
DeleteSelectedTableRowsWithTransaction
(
aNumberOfRowsToDelete
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteSelectedTableRowsWithTransaction
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
nsresult
HTMLEditor
:
:
DeleteSelectedTableRowsWithTransaction
(
int32_t
aNumberOfRowsToDelete
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
cell
;
int32_t
startRowIndex
startColIndex
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
table
)
getter_AddRefs
(
cell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
failed
"
)
;
return
rv
;
}
if
(
!
table
|
|
!
cell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
didn
'
t
return
<
table
>
and
/
or
cell
"
)
;
return
NS_OK
;
}
ErrorResult
error
;
TableSize
tableSize
(
*
this
*
table
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
AutoPlaceholderBatch
treateAsOneTransaction
(
*
this
)
;
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eDeleteNode
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
if
(
!
startRowIndex
&
&
aNumberOfRowsToDelete
>
=
tableSize
.
mRowCount
)
{
nsresult
rv
=
DeleteTableElementAndChildrenWithTransaction
(
*
table
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteTableElementAndChildrenWithTransaction
(
)
failed
"
)
;
return
rv
;
}
RefPtr
<
Element
>
firstSelectedCellElement
=
GetFirstSelectedTableCellElement
(
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetFirstSelectedTableCellElement
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
MOZ_ASSERT
(
SelectionRefPtr
(
)
-
>
RangeCount
(
)
)
;
if
(
firstSelectedCellElement
&
&
SelectionRefPtr
(
)
-
>
RangeCount
(
)
>
1
)
{
CellIndexes
firstCellIndexes
(
*
firstSelectedCellElement
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellIndexes
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
startRowIndex
=
firstCellIndexes
.
mRow
;
startColIndex
=
firstCellIndexes
.
mColumn
;
}
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
startRowIndex
startColIndex
ePreviousRow
false
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
*
this
)
;
if
(
!
firstSelectedCellElement
|
|
SelectionRefPtr
(
)
-
>
RangeCount
(
)
=
=
1
)
{
int32_t
rowCountToRemove
=
std
:
:
min
(
aNumberOfRowsToDelete
tableSize
.
mRowCount
-
startRowIndex
)
;
for
(
int32_t
i
=
0
;
i
<
rowCountToRemove
;
i
+
+
)
{
nsresult
rv
=
DeleteTableRowWithTransaction
(
*
table
startRowIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTableRowWithTransaction
(
)
failed
but
trying
"
"
next
.
.
.
"
)
;
startRowIndex
+
+
;
}
cell
=
GetTableCellElementAt
(
*
table
startRowIndex
startColIndex
)
;
if
(
!
cell
)
{
return
NS_OK
;
}
}
return
NS_OK
;
}
for
(
cell
=
firstSelectedCellElement
;
cell
;
)
{
if
(
cell
!
=
firstSelectedCellElement
)
{
CellIndexes
cellIndexes
(
*
cell
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellIndexes
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
startRowIndex
=
cellIndexes
.
mRow
;
startColIndex
=
cellIndexes
.
mColumn
;
}
int32_t
nextRow
=
startRowIndex
;
while
(
nextRow
=
=
startRowIndex
)
{
cell
=
GetNextSelectedTableCellElement
(
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetNextSelectedTableCellElement
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
if
(
!
cell
)
{
break
;
}
CellIndexes
cellIndexes
(
*
cell
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellIndexes
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
nextRow
=
cellIndexes
.
mRow
;
startColIndex
=
cellIndexes
.
mColumn
;
}
nsresult
rv
=
DeleteTableRowWithTransaction
(
*
table
startRowIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteTableRowWithTransaction
(
)
failed
"
)
;
return
rv
;
}
}
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
DeleteTableRowWithTransaction
(
Element
&
aTableElement
int32_t
aRowIndex
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
ErrorResult
error
;
TableSize
tableSize
(
*
this
aTableElement
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eDeleteNode
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
ignoredError
.
SuppressException
(
)
;
struct
MOZ_STACK_CLASS
SpanCell
final
{
RefPtr
<
Element
>
mElement
;
int32_t
mNewRowSpanValue
;
SpanCell
(
Element
*
aSpanCellElement
int32_t
aNewRowSpanValue
)
:
mElement
(
aSpanCellElement
)
mNewRowSpanValue
(
aNewRowSpanValue
)
{
}
}
;
AutoTArray
<
SpanCell
10
>
spanCellArray
;
RefPtr
<
Element
>
cellInDeleteRow
;
int32_t
columnIndex
=
0
;
while
(
aRowIndex
<
tableSize
.
mRowCount
&
&
columnIndex
<
tableSize
.
mColumnCount
)
{
CellData
cellData
(
*
this
aTableElement
aRowIndex
columnIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
if
(
!
cellData
.
mElement
)
{
break
;
}
if
(
cellData
.
IsSpannedFromOtherRow
(
)
)
{
if
(
cellData
.
mRowSpan
>
0
)
{
int32_t
newRowSpanValue
=
std
:
:
max
(
cellData
.
NumberOfPrecedingRows
(
)
cellData
.
NumberOfFollowingRows
(
)
)
;
spanCellArray
.
AppendElement
(
SpanCell
(
cellData
.
mElement
newRowSpanValue
)
)
;
}
}
else
{
if
(
cellData
.
mRowSpan
>
1
)
{
int32_t
aboveRowToInsertNewCellInto
=
cellData
.
NumberOfPrecedingRows
(
)
+
1
;
nsresult
rv
=
SplitCellIntoRows
(
&
aTableElement
cellData
.
mFirst
.
mRow
cellData
.
mFirst
.
mColumn
aboveRowToInsertNewCellInto
cellData
.
NumberOfFollowingRows
(
)
nullptr
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
SplitCellIntoRows
(
)
failed
"
)
;
return
rv
;
}
}
if
(
!
cellInDeleteRow
)
{
cellInDeleteRow
=
std
:
:
move
(
cellData
.
mElement
)
;
}
}
columnIndex
+
=
cellData
.
mEffectiveColSpan
;
}
if
(
!
cellInDeleteRow
)
{
NS_WARNING
(
"
There
was
no
cell
in
deleting
row
"
)
;
return
NS_ERROR_FAILURE
;
}
RefPtr
<
Element
>
parentRow
=
GetElementOrParentByTagNameInternal
(
*
nsGkAtoms
:
:
tr
*
cellInDeleteRow
)
;
if
(
parentRow
)
{
nsresult
rv
=
DeleteNodeWithTransaction
(
*
parentRow
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameInternal
(
nsGkAtoms
:
:
tr
)
"
"
failed
"
)
;
return
rv
;
}
}
for
(
SpanCell
&
spanCell
:
spanCellArray
)
{
if
(
NS_WARN_IF
(
!
spanCell
.
mElement
)
)
{
continue
;
}
nsresult
rv
=
SetRowSpan
(
MOZ_KnownLive
(
spanCell
.
mElement
)
spanCell
.
mNewRowSpanValue
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
SetRawSpan
(
)
failed
"
)
;
return
rv
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
SelectTable
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
if
(
IsSelectionRangeContainerNotContent
(
)
)
{
NS_WARNING
(
"
Some
selection
containers
were
not
content
nodes
"
)
;
return
NS_OK
;
}
RefPtr
<
Element
>
table
=
GetElementOrParentByTagNameAtSelection
(
*
nsGkAtoms
:
:
table
)
;
if
(
!
table
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameAtSelection
(
nsGkAtoms
:
:
table
)
"
"
failed
"
)
;
return
NS_OK
;
}
nsresult
rv
=
ClearSelection
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
EditorBase
:
:
ClearSelection
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
rv
=
AppendNodeToSelectionAsRange
(
table
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditorBase
:
:
AppendNodeToSelectionAsRange
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
SelectTableCell
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
if
(
IsSelectionRangeContainerNotContent
(
)
)
{
NS_WARNING
(
"
Some
selection
containers
were
not
content
nodes
"
)
;
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
RefPtr
<
Element
>
cell
=
GetElementOrParentByTagNameAtSelection
(
*
nsGkAtoms
:
:
td
)
;
if
(
!
cell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameAtSelection
(
nsGkAtoms
:
:
td
)
"
"
failed
"
)
;
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
nsresult
rv
=
ClearSelection
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
EditorBase
:
:
ClearSelection
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
rv
=
AppendNodeToSelectionAsRange
(
cell
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditorBase
:
:
AppendNodeToSelectionAsRange
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
SelectAllTableCells
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
if
(
IsSelectionRangeContainerNotContent
(
)
)
{
NS_WARNING
(
"
Some
selection
containers
were
not
content
nodes
"
)
;
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
RefPtr
<
Element
>
cell
=
GetElementOrParentByTagNameAtSelection
(
*
nsGkAtoms
:
:
td
)
;
if
(
!
cell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameAtSelection
(
nsGkAtoms
:
:
td
)
"
"
failed
"
)
;
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
RefPtr
<
Element
>
startCell
=
cell
;
RefPtr
<
Element
>
table
=
GetElementOrParentByTagNameInternal
(
*
nsGkAtoms
:
:
table
*
cell
)
;
if
(
!
table
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameAtSelection
(
nsGkAtoms
:
:
table
)
"
"
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
ErrorResult
error
;
TableSize
tableSize
(
*
this
*
table
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
SelectionBatcher
selectionBatcher
(
SelectionRefPtr
(
)
)
;
nsresult
rv
=
ClearSelection
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditorBase
:
:
ClearSelection
(
)
failed
but
might
be
ignored
"
)
;
bool
cellSelected
=
false
;
IgnoredErrorResult
ignoredError
;
for
(
int32_t
row
=
0
;
row
<
tableSize
.
mRowCount
;
row
+
+
)
{
CellData
cellData
;
for
(
int32_t
col
=
0
;
col
<
tableSize
.
mColumnCount
;
col
=
cellData
.
NextColumnIndex
(
)
)
{
cellData
.
Update
(
*
this
*
table
row
col
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
:
:
Update
(
)
failed
but
might
be
ignored
"
)
;
rv
=
NS_ERROR_FAILURE
;
break
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
if
(
cellData
.
mElement
&
&
!
cellData
.
IsSpannedFromOtherRowOrColumn
(
)
)
{
nsresult
rv
=
AppendNodeToSelectionAsRange
(
cellData
.
mElement
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
EditorBase
:
:
AppendNodeToSelectionAsRange
(
)
failed
but
might
be
"
"
ignored
"
)
;
break
;
}
cellSelected
=
true
;
}
MOZ_ASSERT
(
col
<
cellData
.
NextColumnIndex
(
)
)
;
}
}
if
(
!
cellSelected
)
{
nsresult
rv
=
AppendNodeToSelectionAsRange
(
startCell
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditorBase
:
:
AppendNodeToSelectionAsRange
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditorBase
:
:
ClearSelection
(
)
or
CellData
:
:
Update
(
)
or
"
"
EditorBase
:
:
AppendNodeToSelectionAsRange
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
SelectTableRow
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
if
(
IsSelectionRangeContainerNotContent
(
)
)
{
NS_WARNING
(
"
Some
selection
containers
were
not
content
nodes
"
)
;
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
RefPtr
<
Element
>
cell
=
GetElementOrParentByTagNameAtSelection
(
*
nsGkAtoms
:
:
td
)
;
if
(
!
cell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameAtSelection
(
nsGkAtoms
:
:
td
)
"
"
failed
"
)
;
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
RefPtr
<
Element
>
startCell
=
cell
;
RefPtr
<
Element
>
table
;
int32_t
startRowIndex
startColIndex
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
table
)
getter_AddRefs
(
cell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
if
(
!
table
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
didn
'
t
return
<
table
>
element
"
)
;
return
NS_ERROR_FAILURE
;
}
ErrorResult
error
;
TableSize
tableSize
(
*
this
*
table
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
SelectionBatcher
selectionBatcher
(
SelectionRefPtr
(
)
)
;
rv
=
ClearSelection
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditorBase
:
:
ClearSelection
(
)
failed
but
might
be
ignored
"
)
;
bool
cellSelected
=
false
;
IgnoredErrorResult
ignoredError
;
CellData
cellData
;
for
(
int32_t
col
=
0
;
col
<
tableSize
.
mColumnCount
;
col
=
cellData
.
NextColumnIndex
(
)
)
{
cellData
.
Update
(
*
this
*
table
startRowIndex
col
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
:
:
Update
(
)
failed
but
might
be
ignored
"
)
;
rv
=
NS_ERROR_FAILURE
;
break
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
if
(
cellData
.
mElement
&
&
!
cellData
.
IsSpannedFromOtherRowOrColumn
(
)
)
{
rv
=
AppendNodeToSelectionAsRange
(
cellData
.
mElement
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
EditorBase
:
:
AppendNodeToSelectionAsRange
(
)
failed
but
ignored
"
)
;
break
;
}
cellSelected
=
true
;
}
MOZ_ASSERT
(
col
<
cellData
.
NextColumnIndex
(
)
)
;
}
if
(
!
cellSelected
)
{
nsresult
rv
=
AppendNodeToSelectionAsRange
(
startCell
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditorBase
:
:
AppendNodeToSelectionAsRange
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditorBase
:
:
ClearSelection
(
)
or
CellData
:
:
Update
(
)
or
"
"
EditorBase
:
:
AppendNodeToSelectionAsRange
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
SelectTableColumn
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
if
(
IsSelectionRangeContainerNotContent
(
)
)
{
NS_WARNING
(
"
Some
selection
containers
were
not
content
nodes
"
)
;
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
RefPtr
<
Element
>
cell
=
GetElementOrParentByTagNameAtSelection
(
*
nsGkAtoms
:
:
td
)
;
if
(
!
cell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameAtSelection
(
nsGkAtoms
:
:
td
)
"
"
failed
"
)
;
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
RefPtr
<
Element
>
startCell
=
cell
;
RefPtr
<
Element
>
table
;
int32_t
startRowIndex
startColIndex
;
nsresult
rv
=
GetCellContext
(
getter_AddRefs
(
table
)
getter_AddRefs
(
cell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
if
(
!
table
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
didn
'
t
return
<
table
>
element
"
)
;
return
NS_ERROR_FAILURE
;
}
ErrorResult
error
;
TableSize
tableSize
(
*
this
*
table
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
SelectionBatcher
selectionBatcher
(
SelectionRefPtr
(
)
)
;
rv
=
ClearSelection
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditorBase
:
:
ClearSelection
(
)
failed
but
might
be
ignored
"
)
;
bool
cellSelected
=
false
;
IgnoredErrorResult
ignoredError
;
CellData
cellData
;
for
(
int32_t
row
=
0
;
row
<
tableSize
.
mRowCount
;
row
=
cellData
.
NextRowIndex
(
)
)
{
cellData
.
Update
(
*
this
*
table
row
startColIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
:
:
Update
(
)
failed
but
might
be
ignored
"
)
;
rv
=
NS_ERROR_FAILURE
;
break
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
if
(
cellData
.
mElement
&
&
!
cellData
.
IsSpannedFromOtherRowOrColumn
(
)
)
{
rv
=
AppendNodeToSelectionAsRange
(
cellData
.
mElement
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
EditorBase
:
:
AppendNodeToSelectionAsRange
(
)
failed
but
ignored
"
)
;
break
;
}
cellSelected
=
true
;
}
MOZ_ASSERT
(
row
<
cellData
.
NextRowIndex
(
)
)
;
}
if
(
!
cellSelected
)
{
nsresult
rv
=
AppendNodeToSelectionAsRange
(
startCell
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditorBase
:
:
AppendNodeToSelectionAsRange
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditorBase
:
:
ClearSelection
(
)
or
CellData
:
:
Update
(
)
or
"
"
EditorBase
:
:
AppendNodeToSelectionAsRange
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
SplitTableCell
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eSplitTableCellElement
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING_ASSERTION
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
"
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
cell
;
int32_t
startRowIndex
startColIndex
actualRowSpan
actualColSpan
;
rv
=
GetCellContext
(
getter_AddRefs
(
table
)
getter_AddRefs
(
cell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
if
(
!
table
|
|
!
cell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
didn
'
t
return
<
table
>
and
/
or
cell
"
)
;
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
rv
=
GetCellSpansAt
(
table
startRowIndex
startColIndex
actualRowSpan
actualColSpan
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellSpansAt
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
if
(
actualRowSpan
<
=
1
&
&
actualColSpan
<
=
1
)
{
return
NS_OK
;
}
AutoPlaceholderBatch
treateAsOneTransaction
(
*
this
)
;
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eInsertNode
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
ignoredError
.
StealNSResult
(
)
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
AutoSelectionSetterAfterTableEdit
setCaret
(
*
this
table
startRowIndex
startColIndex
ePreviousColumn
false
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
*
this
)
;
RefPtr
<
Element
>
newCell
;
int32_t
rowIndex
=
startRowIndex
;
int32_t
rowSpanBelow
colSpanAfter
;
for
(
rowSpanBelow
=
actualRowSpan
-
1
;
rowSpanBelow
>
=
0
;
rowSpanBelow
-
-
)
{
if
(
rowSpanBelow
>
0
)
{
nsresult
rv
=
SplitCellIntoRows
(
table
rowIndex
startColIndex
1
rowSpanBelow
getter_AddRefs
(
newCell
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
SplitCellIntoRows
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
CopyCellBackgroundColor
(
newCell
cell
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
HTMLEditor
:
:
CopyCellBackgroundColor
(
)
failed
but
ignored
"
)
;
}
int32_t
colIndex
=
startColIndex
;
for
(
colSpanAfter
=
actualColSpan
-
1
;
colSpanAfter
>
0
;
colSpanAfter
-
-
)
{
nsresult
rv
=
SplitCellIntoColumns
(
table
rowIndex
colIndex
1
colSpanAfter
getter_AddRefs
(
newCell
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
SplitCellIntoColumns
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
CopyCellBackgroundColor
(
newCell
cell
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
CopyCellBackgroundColor
(
)
failed
but
ignored
"
)
;
colIndex
+
+
;
}
rowIndex
+
+
;
}
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
CopyCellBackgroundColor
(
Element
*
aDestCell
Element
*
aSourceCell
)
{
if
(
NS_WARN_IF
(
!
aDestCell
)
|
|
NS_WARN_IF
(
!
aSourceCell
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
!
aSourceCell
-
>
HasAttr
(
nsGkAtoms
:
:
bgcolor
)
)
{
return
NS_OK
;
}
nsString
backgroundColor
;
aSourceCell
-
>
GetAttr
(
nsGkAtoms
:
:
bgcolor
backgroundColor
)
;
nsresult
rv
=
SetAttributeWithTransaction
(
*
aDestCell
*
nsGkAtoms
:
:
bgcolor
backgroundColor
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditorBase
:
:
SetAttributeWithTransaction
(
nsGkAtoms
:
:
bgcolor
)
failed
"
)
;
return
rv
;
}
nsresult
HTMLEditor
:
:
SplitCellIntoColumns
(
Element
*
aTable
int32_t
aRowIndex
int32_t
aColIndex
int32_t
aColSpanLeft
int32_t
aColSpanRight
Element
*
*
aNewCell
)
{
if
(
NS_WARN_IF
(
!
aTable
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
aNewCell
)
{
*
aNewCell
=
nullptr
;
}
IgnoredErrorResult
ignoredError
;
CellData
cellData
(
*
this
*
aTable
aRowIndex
aColIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
cellData
.
mEffectiveColSpan
<
=
1
|
|
aColSpanLeft
+
aColSpanRight
>
cellData
.
mEffectiveColSpan
)
{
return
NS_OK
;
}
nsresult
rv
=
SetColSpan
(
MOZ_KnownLive
(
cellData
.
mElement
)
aColSpanLeft
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
SetColSpan
(
)
failed
"
)
;
return
rv
;
}
RefPtr
<
Element
>
newCellElement
;
rv
=
InsertCell
(
MOZ_KnownLive
(
cellData
.
mElement
)
cellData
.
mEffectiveRowSpan
aColSpanRight
true
false
getter_AddRefs
(
newCellElement
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
InsertCell
(
)
failed
"
)
;
return
rv
;
}
if
(
!
newCellElement
)
{
return
NS_OK
;
}
if
(
aNewCell
)
{
*
aNewCell
=
do_AddRef
(
newCellElement
)
.
take
(
)
;
}
rv
=
CopyCellBackgroundColor
(
newCellElement
MOZ_KnownLive
(
cellData
.
mElement
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
CopyCellBackgroundColor
(
)
failed
"
)
;
return
rv
;
}
nsresult
HTMLEditor
:
:
SplitCellIntoRows
(
Element
*
aTable
int32_t
aRowIndex
int32_t
aColIndex
int32_t
aRowSpanAbove
int32_t
aRowSpanBelow
Element
*
*
aNewCell
)
{
if
(
NS_WARN_IF
(
!
aTable
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
aNewCell
)
{
*
aNewCell
=
nullptr
;
}
IgnoredErrorResult
ignoredError
;
CellData
cellData
(
*
this
*
aTable
aRowIndex
aColIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
cellData
.
mEffectiveRowSpan
<
=
1
|
|
aRowSpanAbove
+
aRowSpanBelow
>
cellData
.
mEffectiveRowSpan
)
{
return
NS_OK
;
}
ErrorResult
error
;
TableSize
tableSize
(
*
this
*
aTable
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
RefPtr
<
Element
>
cellElementAtInsertionPoint
;
RefPtr
<
Element
>
lastCellFound
;
bool
insertAfter
=
(
cellData
.
mFirst
.
mColumn
>
0
)
;
CellData
cellDataAtInsertionPoint
;
for
(
int32_t
colIndex
=
0
rowBelowIndex
=
cellData
.
mFirst
.
mRow
+
aRowSpanAbove
;
colIndex
<
=
tableSize
.
mColumnCount
;
colIndex
=
cellData
.
NextColumnIndex
(
)
)
{
cellDataAtInsertionPoint
.
Update
(
*
this
*
aTable
rowBelowIndex
colIndex
ignoredError
)
;
if
(
cellDataAtInsertionPoint
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
:
:
Update
(
)
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
cellElementAtInsertionPoint
=
cellDataAtInsertionPoint
.
mElement
;
if
(
cellDataAtInsertionPoint
.
mElement
&
&
!
cellDataAtInsertionPoint
.
IsSpannedFromOtherRow
(
)
)
{
if
(
!
insertAfter
)
{
break
;
}
if
(
cellDataAtInsertionPoint
.
NextColumnIndex
(
)
=
=
cellData
.
mFirst
.
mColumn
)
{
break
;
}
if
(
cellDataAtInsertionPoint
.
mFirst
.
mColumn
>
cellData
.
mFirst
.
mColumn
)
{
insertAfter
=
false
;
break
;
}
lastCellFound
=
cellDataAtInsertionPoint
.
mElement
;
}
MOZ_ASSERT
(
colIndex
<
cellDataAtInsertionPoint
.
NextColumnIndex
(
)
)
;
}
if
(
!
cellElementAtInsertionPoint
&
&
lastCellFound
)
{
cellElementAtInsertionPoint
=
std
:
:
move
(
lastCellFound
)
;
insertAfter
=
true
;
}
nsresult
rv
=
SetRowSpan
(
MOZ_KnownLive
(
cellData
.
mElement
)
aRowSpanAbove
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
SetRowSpan
(
)
failed
"
)
;
return
rv
;
}
RefPtr
<
Element
>
newCell
;
rv
=
InsertCell
(
cellElementAtInsertionPoint
aRowSpanBelow
cellData
.
mEffectiveColSpan
insertAfter
false
getter_AddRefs
(
newCell
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
InsertCell
(
)
failed
"
)
;
return
rv
;
}
if
(
!
newCell
)
{
return
NS_OK
;
}
if
(
aNewCell
)
{
*
aNewCell
=
do_AddRef
(
newCell
)
.
take
(
)
;
}
rv
=
CopyCellBackgroundColor
(
newCell
cellElementAtInsertionPoint
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
CopyCellBackgroundColor
(
)
failed
"
)
;
return
rv
;
}
NS_IMETHODIMP
HTMLEditor
:
:
SwitchTableCellHeaderType
(
Element
*
aSourceCell
Element
*
*
aNewCell
)
{
if
(
NS_WARN_IF
(
!
aSourceCell
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eSetTableCellElementType
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING_ASSERTION
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
"
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
AutoPlaceholderBatch
treatAsOneTransaction
(
*
this
)
;
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eInsertNode
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
ignoredError
.
StealNSResult
(
)
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
AutoSelectionRestorer
restoreSelectionLater
(
*
this
)
;
nsAtom
*
newCellName
=
aSourceCell
-
>
IsHTMLElement
(
nsGkAtoms
:
:
td
)
?
nsGkAtoms
:
:
th
:
nsGkAtoms
:
:
td
;
RefPtr
<
Element
>
newCell
=
ReplaceContainerAndCloneAttributesWithTransaction
(
*
aSourceCell
MOZ_KnownLive
(
*
newCellName
)
)
;
if
(
!
newCell
)
{
NS_WARNING
(
"
EditorBase
:
:
ReplaceContainerAndCloneAttributesWithTransaction
(
)
"
"
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
aNewCell
)
{
newCell
.
forget
(
aNewCell
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
JoinTableCells
(
bool
aMergeNonContiguousContents
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eJoinTableCellElements
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING_ASSERTION
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
"
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
targetCell
;
int32_t
startRowIndex
startColIndex
;
rv
=
GetCellContext
(
getter_AddRefs
(
table
)
getter_AddRefs
(
targetCell
)
nullptr
nullptr
&
startRowIndex
&
startColIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
if
(
!
table
|
|
!
targetCell
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellContext
(
)
didn
'
t
return
<
table
>
and
/
or
cell
"
)
;
return
NS_OK
;
}
AutoPlaceholderBatch
treateAsOneTransaction
(
*
this
)
;
AutoTransactionsConserveSelection
dontChangeSelection
(
*
this
)
;
ErrorResult
error
;
CellAndIndexes
firstSelectedCell
(
*
this
*
SelectionRefPtr
(
)
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellAndIndexes
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
bool
joinSelectedCells
=
false
;
if
(
firstSelectedCell
.
mElement
)
{
RefPtr
<
Element
>
secondCell
=
GetNextSelectedTableCellElement
(
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetNextSelectedTableCellElement
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
joinSelectedCells
=
(
secondCell
!
=
nullptr
)
;
}
if
(
joinSelectedCells
)
{
TableSize
tableSize
(
*
this
*
table
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
int32_t
firstRowSpan
firstColSpan
;
nsresult
rv
=
GetCellSpansAt
(
table
firstSelectedCell
.
mIndexes
.
mRow
firstSelectedCell
.
mIndexes
.
mColumn
firstRowSpan
firstColSpan
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetCellSpansAt
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
int32_t
lastRowIndex
=
firstSelectedCell
.
mIndexes
.
mRow
;
int32_t
lastColIndex
=
firstSelectedCell
.
mIndexes
.
mColumn
;
IgnoredErrorResult
ignoredError
;
for
(
int32_t
rowIndex
=
firstSelectedCell
.
mIndexes
.
mRow
;
rowIndex
<
=
lastRowIndex
;
rowIndex
+
+
)
{
int32_t
currentRowCount
=
tableSize
.
mRowCount
;
rv
=
FixBadRowSpan
(
table
rowIndex
tableSize
.
mRowCount
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
FixBadRowSpan
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
lastRowIndex
-
=
currentRowCount
-
tableSize
.
mRowCount
;
bool
cellFoundInRow
=
false
;
bool
lastRowIsSet
=
false
;
int32_t
lastColInRow
=
0
;
int32_t
firstColInRow
=
firstSelectedCell
.
mIndexes
.
mColumn
;
int32_t
colIndex
=
firstSelectedCell
.
mIndexes
.
mColumn
;
for
(
CellData
cellData
;
colIndex
<
tableSize
.
mColumnCount
;
colIndex
=
cellData
.
NextColumnIndex
(
)
)
{
cellData
.
Update
(
*
this
*
table
rowIndex
colIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
:
:
Update
(
)
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
if
(
cellData
.
mIsSelected
)
{
if
(
!
cellFoundInRow
)
{
firstColInRow
=
cellData
.
mCurrent
.
mColumn
;
}
if
(
cellData
.
mCurrent
.
mRow
>
firstSelectedCell
.
mIndexes
.
mRow
&
&
firstColInRow
!
=
firstSelectedCell
.
mIndexes
.
mColumn
)
{
lastRowIndex
=
std
:
:
max
(
0
cellData
.
mCurrent
.
mRow
-
1
)
;
lastRowIsSet
=
true
;
break
;
}
lastColInRow
=
cellData
.
LastColumnIndex
(
)
;
cellFoundInRow
=
true
;
}
else
if
(
cellFoundInRow
)
{
if
(
cellData
.
mCurrent
.
mRow
>
firstSelectedCell
.
mIndexes
.
mRow
+
1
&
&
cellData
.
mCurrent
.
mColumn
<
=
lastColIndex
)
{
lastRowIndex
=
std
:
:
max
(
0
cellData
.
mCurrent
.
mRow
-
1
)
;
lastRowIsSet
=
true
;
}
break
;
}
MOZ_ASSERT
(
colIndex
<
cellData
.
NextColumnIndex
(
)
)
;
}
if
(
cellFoundInRow
)
{
if
(
rowIndex
=
=
firstSelectedCell
.
mIndexes
.
mRow
)
{
lastColIndex
=
lastColInRow
;
}
if
(
!
lastRowIsSet
)
{
if
(
colIndex
<
lastColIndex
)
{
lastRowIndex
=
std
:
:
max
(
0
rowIndex
-
1
)
;
}
else
{
lastRowIndex
=
rowIndex
+
1
;
}
}
lastColIndex
=
std
:
:
min
(
lastColIndex
lastColInRow
)
;
}
else
{
lastRowIndex
=
std
:
:
max
(
0
rowIndex
-
1
)
;
}
}
nsTArray
<
RefPtr
<
Element
>
>
deleteList
;
for
(
int32_t
rowIndex
=
0
;
rowIndex
<
tableSize
.
mRowCount
;
rowIndex
+
+
)
{
CellData
cellData
;
for
(
int32_t
colIndex
=
0
;
colIndex
<
tableSize
.
mColumnCount
;
colIndex
=
cellData
.
NextColumnIndex
(
)
)
{
cellData
.
Update
(
*
this
*
table
rowIndex
colIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
:
:
Update
(
)
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
if
(
!
cellData
.
mEffectiveColSpan
)
{
break
;
}
if
(
cellData
.
mIsSelected
&
&
cellData
.
mElement
!
=
firstSelectedCell
.
mElement
)
{
if
(
cellData
.
mCurrent
.
mRow
>
=
firstSelectedCell
.
mIndexes
.
mRow
&
&
cellData
.
mCurrent
.
mRow
<
=
lastRowIndex
&
&
cellData
.
mCurrent
.
mColumn
>
=
firstSelectedCell
.
mIndexes
.
mColumn
&
&
cellData
.
mCurrent
.
mColumn
<
=
lastColIndex
)
{
NS_ASSERTION
(
!
cellData
.
IsSpannedFromOtherRow
(
)
"
JoinTableCells
:
StartRowIndex
is
in
row
above
"
)
;
if
(
cellData
.
mEffectiveColSpan
>
1
)
{
int32_t
extraColSpan
=
cellData
.
mFirst
.
mColumn
+
cellData
.
mEffectiveColSpan
-
(
lastColIndex
+
1
)
;
if
(
extraColSpan
>
0
)
{
nsresult
rv
=
SplitCellIntoColumns
(
table
cellData
.
mFirst
.
mRow
cellData
.
mFirst
.
mColumn
cellData
.
mEffectiveColSpan
-
extraColSpan
extraColSpan
nullptr
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
SplitCellIntoColumns
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
}
}
nsresult
rv
=
MergeCells
(
firstSelectedCell
.
mElement
cellData
.
mElement
false
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
MergeCells
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
deleteList
.
AppendElement
(
cellData
.
mElement
.
get
(
)
)
;
}
else
if
(
aMergeNonContiguousContents
)
{
nsresult
rv
=
MergeCells
(
firstSelectedCell
.
mElement
cellData
.
mElement
false
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
MergeCells
(
)
failed
"
)
;
return
rv
;
}
}
}
MOZ_ASSERT
(
colIndex
<
cellData
.
NextColumnIndex
(
)
)
;
}
}
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eDeleteNode
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
ignoredError
.
StealNSResult
(
)
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
OnStartToHandleTopLevelEditSubAction
(
)
"
"
failed
but
ignored
"
)
;
for
(
uint32_t
i
=
0
n
=
deleteList
.
Length
(
)
;
i
<
n
;
i
+
+
)
{
RefPtr
<
Element
>
nodeToBeRemoved
=
deleteList
[
i
]
;
if
(
nodeToBeRemoved
)
{
nsresult
rv
=
DeleteNodeWithTransaction
(
*
nodeToBeRemoved
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteNodeWithTransaction
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
}
}
uint32_t
rangeCount
=
SelectionRefPtr
(
)
-
>
RangeCount
(
)
;
RefPtr
<
nsRange
>
range
;
for
(
uint32_t
i
=
0
;
i
<
rangeCount
;
i
+
+
)
{
range
=
SelectionRefPtr
(
)
-
>
GetRangeAt
(
i
)
;
if
(
NS_WARN_IF
(
!
range
)
)
{
return
NS_ERROR_FAILURE
;
}
RefPtr
<
Element
>
deletedCell
;
DebugOnly
<
nsresult
>
rvIgnored
=
HTMLEditor
:
:
GetCellFromRange
(
range
getter_AddRefs
(
deletedCell
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
HTMLEditor
:
:
GetCellFromRange
(
)
failed
but
ignored
"
)
;
if
(
!
deletedCell
)
{
MOZ_KnownLive
(
SelectionRefPtr
(
)
)
-
>
RemoveRangeAndUnselectFramesAndNotifyListeners
(
*
range
ignoredError
)
;
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
Selection
:
:
RemoveRangeAndUnselectFramesAndNotifyListeners
(
)
"
"
failed
but
ignored
"
)
;
rangeCount
-
-
;
i
-
-
;
}
}
rv
=
SetRowSpan
(
MOZ_KnownLive
(
firstSelectedCell
.
mElement
)
lastRowIndex
-
firstSelectedCell
.
mIndexes
.
mRow
+
1
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
SetRowSpan
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
rv
=
SetColSpan
(
MOZ_KnownLive
(
firstSelectedCell
.
mElement
)
lastColIndex
-
firstSelectedCell
.
mIndexes
.
mColumn
+
1
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
SetColSpan
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
NormalizeTableInternal
(
*
table
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
HTMLEditor
:
:
NormalizeTableInternal
(
)
failed
but
ignored
"
)
;
}
else
{
IgnoredErrorResult
ignoredError
;
CellData
leftCellData
(
*
this
*
table
startRowIndex
startColIndex
ignoredError
)
;
if
(
leftCellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
for
left
cell
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
CellData
rightCellData
(
*
this
*
table
leftCellData
.
mFirst
.
mRow
leftCellData
.
mFirst
.
mColumn
+
leftCellData
.
mEffectiveColSpan
ignoredError
)
;
if
(
rightCellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
for
right
cell
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
if
(
!
rightCellData
.
mElement
)
{
return
NS_OK
;
}
NS_ASSERTION
(
rightCellData
.
mCurrent
.
mRow
>
=
rightCellData
.
mFirst
.
mRow
"
JoinCells
:
rightCellData
.
mCurrent
.
mRow
<
rightCellData
.
mFirst
.
mRow
"
)
;
int32_t
spanAboveMergedCell
=
rightCellData
.
NumberOfPrecedingRows
(
)
;
int32_t
effectiveRowSpan2
=
rightCellData
.
mEffectiveRowSpan
-
spanAboveMergedCell
;
if
(
effectiveRowSpan2
>
leftCellData
.
mEffectiveRowSpan
)
{
nsresult
rv
=
SplitCellIntoRows
(
table
rightCellData
.
mFirst
.
mRow
rightCellData
.
mFirst
.
mColumn
spanAboveMergedCell
+
leftCellData
.
mEffectiveRowSpan
effectiveRowSpan2
-
leftCellData
.
mEffectiveRowSpan
nullptr
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
SplitCellIntoRows
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
}
nsresult
rv
=
MergeCells
(
leftCellData
.
mElement
rightCellData
.
mElement
!
rightCellData
.
IsSpannedFromOtherRow
(
)
&
&
effectiveRowSpan2
>
=
leftCellData
.
mEffectiveRowSpan
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
MergeCells
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
if
(
effectiveRowSpan2
<
leftCellData
.
mEffectiveRowSpan
)
{
return
NS_OK
;
}
if
(
spanAboveMergedCell
>
0
)
{
nsresult
rv
=
SetRowSpan
(
MOZ_KnownLive
(
rightCellData
.
mElement
)
spanAboveMergedCell
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
SetRowSpan
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
}
rv
=
SetColSpan
(
MOZ_KnownLive
(
leftCellData
.
mElement
)
leftCellData
.
mEffectiveColSpan
+
rightCellData
.
mEffectiveColSpan
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
SetColSpan
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
}
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
MergeCells
(
RefPtr
<
Element
>
aTargetCell
RefPtr
<
Element
>
aCellToMerge
bool
aDeleteCellToMerge
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
if
(
NS_WARN_IF
(
!
aTargetCell
)
|
|
NS_WARN_IF
(
!
aCellToMerge
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eDeleteNode
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
if
(
!
IsEmptyCell
(
aCellToMerge
)
)
{
int32_t
insertIndex
=
0
;
uint32_t
len
=
aTargetCell
-
>
GetChildCount
(
)
;
if
(
len
=
=
1
&
&
IsEmptyCell
(
aTargetCell
)
)
{
nsCOMPtr
<
nsIContent
>
cellChild
=
aTargetCell
-
>
GetFirstChild
(
)
;
if
(
NS_WARN_IF
(
!
cellChild
)
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
=
DeleteNodeWithTransaction
(
*
cellChild
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteNodeWithTransaction
(
)
failed
"
)
;
return
rv
;
}
insertIndex
=
0
;
}
else
{
insertIndex
=
(
int32_t
)
len
;
}
while
(
aCellToMerge
-
>
HasChildren
(
)
)
{
nsCOMPtr
<
nsIContent
>
cellChild
=
aCellToMerge
-
>
GetLastChild
(
)
;
if
(
NS_WARN_IF
(
!
cellChild
)
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
=
DeleteNodeWithTransaction
(
*
cellChild
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
DeleteNodeWithTransaction
(
)
failed
"
)
;
return
rv
;
}
rv
=
InsertNodeWithTransaction
(
*
cellChild
EditorDOMPoint
(
aTargetCell
insertIndex
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
EditorBase
:
:
InsertNodeWithTransaction
(
)
failed
"
)
;
return
rv
;
}
}
}
if
(
!
aDeleteCellToMerge
)
{
return
NS_OK
;
}
nsresult
rv
=
DeleteNodeWithTransaction
(
*
aCellToMerge
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
DeleteNodeWithTransaction
(
)
failed
"
)
;
return
rv
;
}
nsresult
HTMLEditor
:
:
FixBadRowSpan
(
Element
*
aTable
int32_t
aRowIndex
int32_t
&
aNewRowCount
)
{
if
(
NS_WARN_IF
(
!
aTable
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
ErrorResult
error
;
TableSize
tableSize
(
*
this
*
aTable
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
int32_t
minRowSpan
=
-
1
;
IgnoredErrorResult
ignoredError
;
CellData
cellData
;
for
(
int32_t
colIndex
=
0
;
colIndex
<
tableSize
.
mColumnCount
;
colIndex
=
cellData
.
NextColumnIndex
(
)
)
{
cellData
.
Update
(
*
this
*
aTable
aRowIndex
colIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
:
:
Update
(
)
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
if
(
!
cellData
.
mElement
)
{
break
;
}
if
(
cellData
.
mRowSpan
>
0
&
&
!
cellData
.
IsSpannedFromOtherRow
(
)
&
&
(
cellData
.
mRowSpan
<
minRowSpan
|
|
minRowSpan
=
=
-
1
)
)
{
minRowSpan
=
cellData
.
mRowSpan
;
}
MOZ_ASSERT
(
colIndex
<
cellData
.
NextColumnIndex
(
)
)
;
}
if
(
minRowSpan
>
1
)
{
int32_t
rowsReduced
=
minRowSpan
-
1
;
CellData
cellData
;
for
(
int32_t
colIndex
=
0
;
colIndex
<
tableSize
.
mColumnCount
;
colIndex
=
cellData
.
NextColumnIndex
(
)
)
{
cellData
.
Update
(
*
this
*
aTable
aRowIndex
colIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
:
:
Udpate
(
)
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
if
(
cellData
.
mElement
&
&
cellData
.
mRowSpan
>
0
&
&
!
cellData
.
IsSpannedFromOtherRowOrColumn
(
)
)
{
nsresult
rv
=
SetRowSpan
(
MOZ_KnownLive
(
cellData
.
mElement
)
cellData
.
mRowSpan
-
rowsReduced
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
SetRawSpan
(
)
failed
"
)
;
return
rv
;
}
}
MOZ_ASSERT
(
colIndex
<
cellData
.
NextColumnIndex
(
)
)
;
}
}
tableSize
.
Update
(
*
this
*
aTable
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
:
:
Update
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
aNewRowCount
=
tableSize
.
mRowCount
;
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
FixBadColSpan
(
Element
*
aTable
int32_t
aColIndex
int32_t
&
aNewColCount
)
{
if
(
NS_WARN_IF
(
!
aTable
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
ErrorResult
error
;
TableSize
tableSize
(
*
this
*
aTable
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
int32_t
minColSpan
=
-
1
;
IgnoredErrorResult
ignoredError
;
CellData
cellData
;
for
(
int32_t
rowIndex
=
0
;
rowIndex
<
tableSize
.
mRowCount
;
rowIndex
=
cellData
.
NextRowIndex
(
)
)
{
cellData
.
Update
(
*
this
*
aTable
rowIndex
aColIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
:
:
Update
(
)
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
if
(
!
cellData
.
mElement
)
{
break
;
}
if
(
cellData
.
mColSpan
>
0
&
&
!
cellData
.
IsSpannedFromOtherColumn
(
)
&
&
(
cellData
.
mColSpan
<
minColSpan
|
|
minColSpan
=
=
-
1
)
)
{
minColSpan
=
cellData
.
mColSpan
;
}
MOZ_ASSERT
(
rowIndex
<
cellData
.
NextRowIndex
(
)
)
;
}
if
(
minColSpan
>
1
)
{
int32_t
colsReduced
=
minColSpan
-
1
;
CellData
cellData
;
for
(
int32_t
rowIndex
=
0
;
rowIndex
<
tableSize
.
mRowCount
;
rowIndex
=
cellData
.
NextRowIndex
(
)
)
{
cellData
.
Update
(
*
this
*
aTable
rowIndex
aColIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
:
:
Update
(
)
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
if
(
cellData
.
mElement
&
&
cellData
.
mColSpan
>
0
&
&
!
cellData
.
IsSpannedFromOtherRowOrColumn
(
)
)
{
nsresult
rv
=
SetColSpan
(
MOZ_KnownLive
(
cellData
.
mElement
)
cellData
.
mColSpan
-
colsReduced
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
SetColSpan
(
)
failed
"
)
;
return
rv
;
}
}
MOZ_ASSERT
(
rowIndex
<
cellData
.
NextRowIndex
(
)
)
;
}
}
tableSize
.
Update
(
*
this
*
aTable
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
:
:
Update
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
aNewColCount
=
tableSize
.
mColumnCount
;
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
NormalizeTable
(
Element
*
aTableOrElementInTable
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNormalizeTable
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING_ASSERTION
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
"
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
if
(
!
aTableOrElementInTable
)
{
if
(
IsSelectionRangeContainerNotContent
(
)
)
{
NS_WARNING
(
"
Some
selection
containers
were
not
content
nodes
"
)
;
return
NS_OK
;
}
aTableOrElementInTable
=
GetElementOrParentByTagNameAtSelection
(
*
nsGkAtoms
:
:
table
)
;
if
(
!
aTableOrElementInTable
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameAtSelection
(
nsGkAtoms
:
:
table
)
"
"
failed
"
)
;
return
NS_OK
;
}
}
rv
=
NormalizeTableInternal
(
*
aTableOrElementInTable
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
NormalizeTableInternal
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
nsresult
HTMLEditor
:
:
NormalizeTableInternal
(
Element
&
aTableOrElementInTable
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
RefPtr
<
Element
>
tableElement
;
if
(
aTableOrElementInTable
.
NodeInfo
(
)
-
>
NameAtom
(
)
=
=
nsGkAtoms
:
:
table
)
{
tableElement
=
&
aTableOrElementInTable
;
}
else
{
tableElement
=
GetElementOrParentByTagNameInternal
(
*
nsGkAtoms
:
:
table
aTableOrElementInTable
)
;
if
(
!
tableElement
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameInternal
(
nsGkAtoms
:
:
table
)
"
"
failed
"
)
;
return
NS_OK
;
}
}
ErrorResult
error
;
TableSize
tableSize
(
*
this
*
tableElement
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
AutoSelectionRestorer
restoreSelectionLater
(
*
this
)
;
AutoPlaceholderBatch
treateAsOneTransaction
(
*
this
)
;
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eInsertNode
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
for
(
int32_t
rowIndex
=
0
;
rowIndex
<
tableSize
.
mRowCount
;
rowIndex
+
+
)
{
nsresult
rv
=
FixBadRowSpan
(
tableElement
rowIndex
tableSize
.
mRowCount
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
FixBadRowSpan
(
)
failed
"
)
;
return
rv
;
}
}
for
(
int32_t
colIndex
=
0
;
colIndex
<
tableSize
.
mColumnCount
;
colIndex
+
+
)
{
nsresult
rv
=
FixBadColSpan
(
tableElement
colIndex
tableSize
.
mColumnCount
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
FixBadColSpan
(
)
failed
"
)
;
return
rv
;
}
}
for
(
int32_t
rowIndex
=
0
;
rowIndex
<
tableSize
.
mRowCount
;
rowIndex
+
+
)
{
RefPtr
<
Element
>
previousCellElementInRow
;
for
(
int32_t
colIndex
=
0
;
colIndex
<
tableSize
.
mColumnCount
;
colIndex
+
+
)
{
CellData
cellData
(
*
this
*
tableElement
rowIndex
colIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
:
:
Update
(
)
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
if
(
cellData
.
mElement
)
{
if
(
!
cellData
.
IsSpannedFromOtherRow
(
)
)
{
previousCellElementInRow
=
std
:
:
move
(
cellData
.
mElement
)
;
}
continue
;
}
if
(
NS_WARN_IF
(
!
previousCellElementInRow
)
)
{
return
NS_ERROR_FAILURE
;
}
RefPtr
<
Element
>
newCellElement
;
nsresult
rv
=
InsertCell
(
previousCellElementInRow
1
1
true
false
getter_AddRefs
(
newCellElement
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
InsertCell
(
)
failed
"
)
;
return
rv
;
}
if
(
newCellElement
)
{
previousCellElementInRow
=
std
:
:
move
(
newCellElement
)
;
}
}
}
return
NS_OK
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetCellIndexes
(
Element
*
aCellElement
int32_t
*
aRowIndex
int32_t
*
aColumnIndex
)
{
if
(
NS_WARN_IF
(
!
aRowIndex
)
|
|
NS_WARN_IF
(
!
aColumnIndex
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
*
aRowIndex
=
0
;
*
aColumnIndex
=
0
;
if
(
!
aCellElement
)
{
ErrorResult
error
;
CellIndexes
cellIndexes
(
*
this
*
SelectionRefPtr
(
)
error
)
;
if
(
error
.
Failed
(
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
*
aRowIndex
=
cellIndexes
.
mRow
;
*
aColumnIndex
=
cellIndexes
.
mColumn
;
return
NS_OK
;
}
ErrorResult
error
;
CellIndexes
cellIndexes
(
*
aCellElement
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellIndexes
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
*
aRowIndex
=
cellIndexes
.
mRow
;
*
aColumnIndex
=
cellIndexes
.
mColumn
;
return
NS_OK
;
}
void
HTMLEditor
:
:
CellIndexes
:
:
Update
(
HTMLEditor
&
aHTMLEditor
Selection
&
aSelection
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
if
(
aHTMLEditor
.
IsSelectionRangeContainerNotContent
(
)
)
{
NS_WARNING
(
"
Some
selection
containers
were
not
content
nodes
"
)
;
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
RefPtr
<
Element
>
cellElement
=
aHTMLEditor
.
GetElementOrParentByTagNameAtSelection
(
*
nsGkAtoms
:
:
td
)
;
if
(
!
cellElement
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameAtSelection
(
nsGkAtoms
:
:
td
)
"
"
failed
"
)
;
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
Update
(
*
cellElement
aRv
)
;
NS_WARNING_ASSERTION
(
!
aRv
.
Failed
(
)
"
CellIndexes
:
:
Update
(
)
failed
"
)
;
}
void
HTMLEditor
:
:
CellIndexes
:
:
Update
(
Element
&
aCellElement
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
nsIFrame
*
frameOfCell
=
aCellElement
.
GetPrimaryFrame
(
)
;
if
(
!
frameOfCell
)
{
NS_WARNING
(
"
There
was
no
layout
information
of
aCellElement
"
)
;
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsITableCellLayout
*
tableCellLayout
=
do_QueryFrame
(
frameOfCell
)
;
if
(
!
tableCellLayout
)
{
NS_WARNING
(
"
aCellElement
was
not
a
table
cell
"
)
;
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
aRv
=
tableCellLayout
-
>
GetCellIndexes
(
mRow
mColumn
)
;
NS_WARNING_ASSERTION
(
!
aRv
.
Failed
(
)
"
nsITableCellLayout
:
:
GetCellIndexes
(
)
failed
"
)
;
}
nsTableWrapperFrame
*
HTMLEditor
:
:
GetTableFrame
(
Element
*
aTableElement
)
{
if
(
NS_WARN_IF
(
!
aTableElement
)
)
{
return
nullptr
;
}
return
do_QueryFrame
(
aTableElement
-
>
GetPrimaryFrame
(
)
)
;
}
int32_t
HTMLEditor
:
:
GetNumberOfCellsInRow
(
Element
&
aTableElement
int32_t
aRowIndex
)
{
IgnoredErrorResult
ignoredError
;
TableSize
tableSize
(
*
this
aTableElement
ignoredError
)
;
if
(
ignoredError
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
-
1
;
}
int32_t
numberOfCells
=
0
;
CellData
cellData
;
for
(
int32_t
columnIndex
=
0
;
columnIndex
<
tableSize
.
mColumnCount
;
columnIndex
=
cellData
.
NextColumnIndex
(
)
)
{
cellData
.
Update
(
*
this
aTableElement
aRowIndex
columnIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
break
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
if
(
cellData
.
mElement
&
&
!
cellData
.
IsSpannedFromOtherRow
(
)
)
{
numberOfCells
+
+
;
}
MOZ_ASSERT
(
columnIndex
<
cellData
.
NextColumnIndex
(
)
)
;
}
return
numberOfCells
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetTableSize
(
Element
*
aTableOrElementInTable
int32_t
*
aRowCount
int32_t
*
aColumnCount
)
{
if
(
NS_WARN_IF
(
!
aRowCount
)
|
|
NS_WARN_IF
(
!
aColumnCount
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
*
aRowCount
=
0
;
*
aColumnCount
=
0
;
Element
*
tableOrElementInTable
=
aTableOrElementInTable
;
if
(
!
tableOrElementInTable
)
{
if
(
IsSelectionRangeContainerNotContent
(
)
)
{
NS_WARNING
(
"
Some
selection
containers
were
not
content
nodes
"
)
;
return
NS_ERROR_FAILURE
;
}
tableOrElementInTable
=
GetElementOrParentByTagNameAtSelection
(
*
nsGkAtoms
:
:
table
)
;
if
(
!
tableOrElementInTable
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameAtSelection
(
nsGkAtoms
:
:
table
)
"
"
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
}
ErrorResult
error
;
TableSize
tableSize
(
*
this
*
tableOrElementInTable
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
*
aRowCount
=
tableSize
.
mRowCount
;
*
aColumnCount
=
tableSize
.
mColumnCount
;
return
NS_OK
;
}
void
HTMLEditor
:
:
TableSize
:
:
Update
(
HTMLEditor
&
aHTMLEditor
Element
&
aTableOrElementInTable
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
RefPtr
<
Element
>
tableElement
=
aHTMLEditor
.
GetElementOrParentByTagNameInternal
(
*
nsGkAtoms
:
:
table
aTableOrElementInTable
)
;
if
(
!
tableElement
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameInternal
(
nsGkAtoms
:
:
table
)
"
"
failed
"
)
;
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsTableWrapperFrame
*
tableFrame
=
do_QueryFrame
(
tableElement
-
>
GetPrimaryFrame
(
)
)
;
if
(
!
tableFrame
)
{
NS_WARNING
(
"
There
was
no
layout
information
of
the
<
table
>
element
"
)
;
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
mRowCount
=
tableFrame
-
>
GetRowCount
(
)
;
mColumnCount
=
tableFrame
-
>
GetColCount
(
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetCellDataAt
(
Element
*
aTableElement
int32_t
aRowIndex
int32_t
aColumnIndex
Element
*
*
aCellElement
int32_t
*
aStartRowIndex
int32_t
*
aStartColumnIndex
int32_t
*
aRowSpan
int32_t
*
aColSpan
int32_t
*
aEffectiveRowSpan
int32_t
*
aEffectiveColSpan
bool
*
aIsSelected
)
{
if
(
NS_WARN_IF
(
!
aCellElement
)
|
|
NS_WARN_IF
(
!
aStartRowIndex
)
|
|
NS_WARN_IF
(
!
aStartColumnIndex
)
|
|
NS_WARN_IF
(
!
aRowSpan
)
|
|
NS_WARN_IF
(
!
aColSpan
)
|
|
NS_WARN_IF
(
!
aEffectiveRowSpan
)
|
|
NS_WARN_IF
(
!
aEffectiveColSpan
)
|
|
NS_WARN_IF
(
!
aIsSelected
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
*
aStartRowIndex
=
0
;
*
aStartColumnIndex
=
0
;
*
aRowSpan
=
0
;
*
aColSpan
=
0
;
*
aEffectiveRowSpan
=
0
;
*
aEffectiveColSpan
=
0
;
*
aIsSelected
=
false
;
*
aCellElement
=
nullptr
;
RefPtr
<
Element
>
table
=
aTableElement
;
if
(
!
table
)
{
if
(
IsSelectionRangeContainerNotContent
(
)
)
{
NS_WARNING
(
"
Some
selection
containers
were
not
content
nodes
"
)
;
return
NS_ERROR_FAILURE
;
}
table
=
GetElementOrParentByTagNameAtSelection
(
*
nsGkAtoms
:
:
table
)
;
if
(
!
table
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameAtSelection
(
nsGkAtoms
:
:
table
)
"
"
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
}
IgnoredErrorResult
ignoredError
;
CellData
cellData
(
*
this
*
table
aRowIndex
aColumnIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
cellData
.
mElement
.
forget
(
aCellElement
)
;
*
aIsSelected
=
cellData
.
mIsSelected
;
*
aStartRowIndex
=
cellData
.
mFirst
.
mRow
;
*
aStartColumnIndex
=
cellData
.
mFirst
.
mColumn
;
*
aRowSpan
=
cellData
.
mRowSpan
;
*
aColSpan
=
cellData
.
mColSpan
;
*
aEffectiveRowSpan
=
cellData
.
mEffectiveRowSpan
;
*
aEffectiveColSpan
=
cellData
.
mEffectiveColSpan
;
return
NS_OK
;
}
void
HTMLEditor
:
:
CellData
:
:
Update
(
HTMLEditor
&
aHTMLEditor
Element
&
aTableElement
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
mElement
=
nullptr
;
mIsSelected
=
false
;
mFirst
.
mRow
=
-
1
;
mFirst
.
mColumn
=
-
1
;
mRowSpan
=
-
1
;
mColSpan
=
-
1
;
mEffectiveRowSpan
=
-
1
;
mEffectiveColSpan
=
-
1
;
nsTableWrapperFrame
*
tableFrame
=
HTMLEditor
:
:
GetTableFrame
(
&
aTableElement
)
;
if
(
!
tableFrame
)
{
NS_WARNING
(
"
There
was
no
layout
information
of
the
table
"
)
;
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsTableCellFrame
*
cellFrame
=
tableFrame
-
>
GetCellFrameAt
(
mCurrent
.
mRow
mCurrent
.
mColumn
)
;
if
(
!
cellFrame
)
{
return
;
}
mElement
=
cellFrame
-
>
GetContent
(
)
-
>
AsElement
(
)
;
if
(
!
mElement
)
{
NS_WARNING
(
"
The
cell
frame
didn
'
t
have
cell
element
"
)
;
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
mIsSelected
=
cellFrame
-
>
IsSelected
(
)
;
mFirst
.
mRow
=
cellFrame
-
>
RowIndex
(
)
;
mFirst
.
mColumn
=
cellFrame
-
>
ColIndex
(
)
;
mRowSpan
=
cellFrame
-
>
GetRowSpan
(
)
;
mColSpan
=
cellFrame
-
>
GetColSpan
(
)
;
mEffectiveRowSpan
=
tableFrame
-
>
GetEffectiveRowSpanAt
(
mCurrent
.
mRow
mCurrent
.
mColumn
)
;
mEffectiveColSpan
=
tableFrame
-
>
GetEffectiveColSpanAt
(
mCurrent
.
mRow
mCurrent
.
mColumn
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetCellAt
(
Element
*
aTableElement
int32_t
aRowIndex
int32_t
aColumnIndex
Element
*
*
aCellElement
)
{
if
(
NS_WARN_IF
(
!
aCellElement
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
*
aCellElement
=
nullptr
;
Element
*
tableElement
=
aTableElement
;
if
(
!
tableElement
)
{
if
(
IsSelectionRangeContainerNotContent
(
)
)
{
NS_WARNING
(
"
Some
selection
containers
were
not
content
nodes
"
)
;
return
NS_ERROR_FAILURE
;
}
tableElement
=
GetElementOrParentByTagNameAtSelection
(
*
nsGkAtoms
:
:
table
)
;
if
(
!
tableElement
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameAtSelection
(
nsGkAtoms
:
:
table
)
"
"
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
}
RefPtr
<
Element
>
cellElement
=
GetTableCellElementAt
(
*
tableElement
aRowIndex
aColumnIndex
)
;
cellElement
.
forget
(
aCellElement
)
;
return
NS_OK
;
}
Element
*
HTMLEditor
:
:
GetTableCellElementAt
(
Element
&
aTableElement
int32_t
aRowIndex
int32_t
aColumnIndex
)
const
{
OwningNonNull
<
Element
>
tableElement
(
aTableElement
)
;
nsTableWrapperFrame
*
tableFrame
=
HTMLEditor
:
:
GetTableFrame
(
tableElement
)
;
if
(
!
tableFrame
)
{
NS_WARNING
(
"
There
was
no
table
layout
information
"
)
;
return
nullptr
;
}
nsIContent
*
cell
=
tableFrame
-
>
GetCellAt
(
aRowIndex
aColumnIndex
)
;
return
Element
:
:
FromNodeOrNull
(
cell
)
;
}
nsresult
HTMLEditor
:
:
GetCellSpansAt
(
Element
*
aTable
int32_t
aRowIndex
int32_t
aColIndex
int32_t
&
aActualRowSpan
int32_t
&
aActualColSpan
)
{
nsTableWrapperFrame
*
tableFrame
=
HTMLEditor
:
:
GetTableFrame
(
aTable
)
;
if
(
!
tableFrame
)
{
NS_WARNING
(
"
There
was
no
table
layout
information
"
)
;
return
NS_ERROR_FAILURE
;
}
aActualRowSpan
=
tableFrame
-
>
GetEffectiveRowSpanAt
(
aRowIndex
aColIndex
)
;
aActualColSpan
=
tableFrame
-
>
GetEffectiveColSpanAt
(
aRowIndex
aColIndex
)
;
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
GetCellContext
(
Element
*
*
aTable
Element
*
*
aCell
nsINode
*
*
aCellParent
int32_t
*
aCellOffset
int32_t
*
aRowIndex
int32_t
*
aColumnIndex
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
if
(
aTable
)
{
*
aTable
=
nullptr
;
}
if
(
aCell
)
{
*
aCell
=
nullptr
;
}
if
(
aCellParent
)
{
*
aCellParent
=
nullptr
;
}
if
(
aCellOffset
)
{
*
aCellOffset
=
0
;
}
if
(
aRowIndex
)
{
*
aRowIndex
=
0
;
}
if
(
aColumnIndex
)
{
*
aColumnIndex
=
0
;
}
RefPtr
<
Element
>
table
;
RefPtr
<
Element
>
cell
;
if
(
aCell
&
&
*
aCell
)
{
cell
=
*
aCell
;
}
if
(
!
cell
)
{
ErrorResult
error
;
RefPtr
<
Element
>
cellOrRowOrTableElement
=
GetSelectedOrParentTableElement
(
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetSelectedOrParentTableElement
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
if
(
!
cellOrRowOrTableElement
)
{
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
if
(
cellOrRowOrTableElement
-
>
IsHTMLElement
(
nsGkAtoms
:
:
table
)
)
{
if
(
aTable
)
{
cellOrRowOrTableElement
.
forget
(
aTable
)
;
}
return
NS_OK
;
}
if
(
!
cellOrRowOrTableElement
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
td
nsGkAtoms
:
:
th
)
)
{
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
cell
=
std
:
:
move
(
cellOrRowOrTableElement
)
;
}
if
(
aCell
)
{
*
aCell
=
do_AddRef
(
cell
)
.
take
(
)
;
}
table
=
GetElementOrParentByTagNameInternal
(
*
nsGkAtoms
:
:
table
*
cell
)
;
if
(
!
table
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameInternal
(
nsGkAtoms
:
:
table
)
"
"
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
aTable
)
{
table
.
forget
(
aTable
)
;
}
if
(
aRowIndex
|
|
aColumnIndex
)
{
ErrorResult
error
;
CellIndexes
cellIndexes
(
*
cell
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellIndexes
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
if
(
aRowIndex
)
{
*
aRowIndex
=
cellIndexes
.
mRow
;
}
if
(
aColumnIndex
)
{
*
aColumnIndex
=
cellIndexes
.
mColumn
;
}
}
if
(
aCellParent
)
{
nsCOMPtr
<
nsINode
>
cellParent
=
cell
-
>
GetParentNode
(
)
;
if
(
NS_WARN_IF
(
!
cellParent
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
aCellOffset
)
{
*
aCellOffset
=
GetChildOffset
(
cell
cellParent
)
;
}
cellParent
.
forget
(
aCellParent
)
;
}
return
NS_OK
;
}
nsresult
HTMLEditor
:
:
GetCellFromRange
(
nsRange
*
aRange
Element
*
*
aCell
)
{
if
(
NS_WARN_IF
(
!
aRange
)
|
|
NS_WARN_IF
(
!
aCell
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
aCell
=
nullptr
;
nsCOMPtr
<
nsINode
>
startContainer
=
aRange
-
>
GetStartContainer
(
)
;
if
(
NS_WARN_IF
(
!
startContainer
)
)
{
return
NS_ERROR_FAILURE
;
}
uint32_t
startOffset
=
aRange
-
>
StartOffset
(
)
;
nsCOMPtr
<
nsINode
>
childNode
=
aRange
-
>
GetChildAtStartOffset
(
)
;
if
(
!
childNode
)
{
NS_WARNING
(
"
First
selection
range
does
not
starts
from
a
node
"
)
;
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsINode
>
endContainer
=
aRange
-
>
GetEndContainer
(
)
;
if
(
NS_WARN_IF
(
!
endContainer
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
startContainer
=
=
endContainer
&
&
aRange
-
>
EndOffset
(
)
=
=
startOffset
+
1
&
&
HTMLEditUtils
:
:
IsTableCell
(
childNode
)
)
{
RefPtr
<
Element
>
cellElement
=
childNode
-
>
AsElement
(
)
;
cellElement
.
forget
(
aCell
)
;
return
NS_OK
;
}
return
NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetFirstSelectedCell
(
nsRange
*
*
aFirstSelectedRange
Element
*
*
aFirstSelectedCellElement
)
{
if
(
NS_WARN_IF
(
!
aFirstSelectedCellElement
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
*
aFirstSelectedCellElement
=
nullptr
;
if
(
aFirstSelectedRange
)
{
*
aFirstSelectedRange
=
nullptr
;
}
ErrorResult
error
;
RefPtr
<
Element
>
firstSelectedCellElement
=
GetFirstSelectedTableCellElement
(
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetFirstSelectedTableCellElement
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
if
(
!
firstSelectedCellElement
)
{
return
NS_OK
;
}
firstSelectedCellElement
.
forget
(
aFirstSelectedCellElement
)
;
if
(
aFirstSelectedRange
)
{
RefPtr
<
nsRange
>
firstRange
=
SelectionRefPtr
(
)
-
>
GetRangeAt
(
0
)
;
MOZ_ASSERT
(
firstRange
)
;
firstRange
.
forget
(
aFirstSelectedRange
)
;
}
return
NS_OK
;
}
already_AddRefed
<
Element
>
HTMLEditor
:
:
GetFirstSelectedTableCellElement
(
ErrorResult
&
aRv
)
const
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
nsRange
*
firstRange
=
SelectionRefPtr
(
)
-
>
GetRangeAt
(
0
)
;
if
(
NS_WARN_IF
(
!
firstRange
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
mSelectedCellIndex
=
0
;
RefPtr
<
Element
>
selectedCell
;
nsresult
rv
=
HTMLEditor
:
:
GetCellFromRange
(
firstRange
getter_AddRefs
(
selectedCell
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
nullptr
;
}
if
(
!
selectedCell
)
{
return
nullptr
;
}
mSelectedCellIndex
=
1
;
return
selectedCell
.
forget
(
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetNextSelectedCell
(
nsRange
*
*
aNextSelectedCellRange
Element
*
*
aNextSelectedCellElement
)
{
if
(
NS_WARN_IF
(
!
aNextSelectedCellElement
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
*
aNextSelectedCellElement
=
nullptr
;
if
(
aNextSelectedCellRange
)
{
*
aNextSelectedCellRange
=
nullptr
;
}
ErrorResult
error
;
RefPtr
<
Element
>
nextSelectedCellElement
=
GetNextSelectedTableCellElement
(
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetNextSelectedTableCellElement
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
if
(
!
nextSelectedCellElement
)
{
return
NS_OK
;
}
if
(
aNextSelectedCellRange
)
{
MOZ_ASSERT
(
mSelectedCellIndex
>
0
)
;
*
aNextSelectedCellRange
=
do_AddRef
(
SelectionRefPtr
(
)
-
>
GetRangeAt
(
mSelectedCellIndex
-
1
)
)
.
take
(
)
;
}
nextSelectedCellElement
.
forget
(
aNextSelectedCellElement
)
;
return
NS_OK
;
}
already_AddRefed
<
Element
>
HTMLEditor
:
:
GetNextSelectedTableCellElement
(
ErrorResult
&
aRv
)
const
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
if
(
mSelectedCellIndex
>
=
SelectionRefPtr
(
)
-
>
RangeCount
(
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
mSelectedCellIndex
>
0
)
;
for
(
;
mSelectedCellIndex
<
SelectionRefPtr
(
)
-
>
RangeCount
(
)
;
mSelectedCellIndex
+
+
)
{
nsRange
*
range
=
SelectionRefPtr
(
)
-
>
GetRangeAt
(
mSelectedCellIndex
)
;
if
(
NS_WARN_IF
(
!
range
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
RefPtr
<
Element
>
nextSelectedCellElement
;
nsresult
rv
=
HTMLEditor
:
:
GetCellFromRange
(
range
getter_AddRefs
(
nextSelectedCellElement
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
nullptr
;
}
if
(
nextSelectedCellElement
)
{
mSelectedCellIndex
+
+
;
return
nextSelectedCellElement
.
forget
(
)
;
}
}
return
nullptr
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetFirstSelectedCellInTable
(
int32_t
*
aRowIndex
int32_t
*
aColumnIndex
Element
*
*
aCellElement
)
{
if
(
NS_WARN_IF
(
!
aRowIndex
)
|
|
NS_WARN_IF
(
!
aColumnIndex
)
|
|
NS_WARN_IF
(
!
aCellElement
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
*
aRowIndex
=
0
;
*
aColumnIndex
=
0
;
*
aCellElement
=
nullptr
;
ErrorResult
error
;
CellAndIndexes
result
(
*
this
*
SelectionRefPtr
(
)
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellAndIndexes
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
result
.
mElement
.
forget
(
aCellElement
)
;
*
aRowIndex
=
std
:
:
max
(
result
.
mIndexes
.
mRow
0
)
;
*
aColumnIndex
=
std
:
:
max
(
result
.
mIndexes
.
mColumn
0
)
;
return
NS_OK
;
}
void
HTMLEditor
:
:
CellAndIndexes
:
:
Update
(
HTMLEditor
&
aHTMLEditor
Selection
&
aSelection
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
mIndexes
.
mRow
=
-
1
;
mIndexes
.
mColumn
=
-
1
;
mElement
=
aHTMLEditor
.
GetFirstSelectedTableCellElement
(
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetFirstSelectedTableCellElement
(
)
failed
"
)
;
return
;
}
if
(
!
mElement
)
{
return
;
}
mIndexes
.
Update
(
*
mElement
aRv
)
;
NS_WARNING_ASSERTION
(
!
aRv
.
Failed
(
)
"
CellIndexes
:
:
Update
(
)
failed
"
)
;
}
void
HTMLEditor
:
:
SetSelectionAfterTableEdit
(
Element
*
aTable
int32_t
aRow
int32_t
aCol
int32_t
aDirection
bool
aSelected
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
if
(
NS_WARN_IF
(
!
aTable
)
|
|
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
;
}
RefPtr
<
Element
>
cell
;
bool
done
=
false
;
do
{
cell
=
GetTableCellElementAt
(
*
aTable
aRow
aCol
)
;
if
(
cell
)
{
if
(
aSelected
)
{
DebugOnly
<
nsresult
>
rv
=
SelectContentInternal
(
*
cell
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
HTMLEditor
:
:
SelectContentInternal
(
)
failed
but
ignored
"
)
;
return
;
}
CollapseSelectionToDeepestNonTableFirstChild
(
cell
)
;
return
;
}
switch
(
aDirection
)
{
case
ePreviousColumn
:
if
(
!
aCol
)
{
if
(
aRow
>
0
)
{
aRow
-
-
;
}
else
{
done
=
true
;
}
}
else
{
aCol
-
-
;
}
break
;
case
ePreviousRow
:
if
(
!
aRow
)
{
if
(
aCol
>
0
)
{
aCol
-
-
;
}
else
{
done
=
true
;
}
}
else
{
aRow
-
-
;
}
break
;
default
:
done
=
true
;
}
}
while
(
!
done
)
;
if
(
aTable
-
>
GetParentNode
(
)
)
{
EditorRawDOMPoint
atTable
(
aTable
)
;
if
(
NS_WARN_IF
(
!
atTable
.
IsSetAndValid
(
)
)
)
{
return
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
CollapseSelectionTo
(
atTable
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
HTMLEditor
:
:
CollapseSelectionTo
(
)
failed
but
ignored
"
)
;
return
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
SetSelectionAtDocumentStart
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
HTMLEditor
:
:
SetSelectionAtDocumentStart
(
)
failed
but
ignored
"
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetSelectedOrParentTableElement
(
nsAString
&
aTagName
int32_t
*
aSelectedCount
Element
*
*
aCellOrRowOrTableElement
)
{
if
(
NS_WARN_IF
(
!
aSelectedCount
)
|
|
NS_WARN_IF
(
!
aCellOrRowOrTableElement
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
aTagName
.
Truncate
(
)
;
*
aCellOrRowOrTableElement
=
nullptr
;
*
aSelectedCount
=
0
;
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
bool
isCellSelected
=
false
;
ErrorResult
aRv
;
RefPtr
<
Element
>
cellOrRowOrTableElement
=
GetSelectedOrParentTableElement
(
aRv
&
isCellSelected
)
;
if
(
aRv
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetSelectedOrParentTableElement
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
aRv
.
StealNSResult
(
)
)
;
}
if
(
!
cellOrRowOrTableElement
)
{
return
NS_OK
;
}
if
(
isCellSelected
)
{
aTagName
.
AssignLiteral
(
"
td
"
)
;
*
aSelectedCount
=
SelectionRefPtr
(
)
-
>
RangeCount
(
)
;
cellOrRowOrTableElement
.
forget
(
aCellOrRowOrTableElement
)
;
return
NS_OK
;
}
if
(
cellOrRowOrTableElement
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
td
nsGkAtoms
:
:
th
)
)
{
aTagName
.
AssignLiteral
(
"
td
"
)
;
cellOrRowOrTableElement
.
forget
(
aCellOrRowOrTableElement
)
;
return
NS_OK
;
}
if
(
cellOrRowOrTableElement
-
>
IsHTMLElement
(
nsGkAtoms
:
:
table
)
)
{
aTagName
.
AssignLiteral
(
"
table
"
)
;
*
aSelectedCount
=
1
;
cellOrRowOrTableElement
.
forget
(
aCellOrRowOrTableElement
)
;
return
NS_OK
;
}
if
(
cellOrRowOrTableElement
-
>
IsHTMLElement
(
nsGkAtoms
:
:
tr
)
)
{
aTagName
.
AssignLiteral
(
"
tr
"
)
;
*
aSelectedCount
=
1
;
cellOrRowOrTableElement
.
forget
(
aCellOrRowOrTableElement
)
;
return
NS_OK
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Which
element
was
returned
?
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
already_AddRefed
<
Element
>
HTMLEditor
:
:
GetSelectedOrParentTableElement
(
ErrorResult
&
aRv
bool
*
aIsCellSelected
)
const
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
if
(
aIsCellSelected
)
{
*
aIsCellSelected
=
false
;
}
RefPtr
<
Element
>
cellElement
=
GetFirstSelectedTableCellElement
(
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetFirstSelectedTableCellElement
(
)
failed
"
)
;
return
nullptr
;
}
if
(
cellElement
)
{
if
(
aIsCellSelected
)
{
*
aIsCellSelected
=
true
;
}
return
cellElement
.
forget
(
)
;
}
const
RangeBoundary
&
anchorRef
=
SelectionRefPtr
(
)
-
>
AnchorRef
(
)
;
if
(
NS_WARN_IF
(
!
anchorRef
.
IsSet
(
)
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
if
(
anchorRef
.
Container
(
)
-
>
HasChildNodes
(
)
)
{
nsIContent
*
selectedContent
=
anchorRef
.
GetChildAtOffset
(
)
;
if
(
selectedContent
)
{
if
(
selectedContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
td
)
)
{
if
(
aIsCellSelected
)
{
*
aIsCellSelected
=
true
;
}
return
do_AddRef
(
selectedContent
-
>
AsElement
(
)
)
;
}
if
(
selectedContent
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
table
nsGkAtoms
:
:
tr
)
)
{
return
do_AddRef
(
selectedContent
-
>
AsElement
(
)
)
;
}
}
}
cellElement
=
GetElementOrParentByTagNameInternal
(
*
nsGkAtoms
:
:
td
*
anchorRef
.
Container
(
)
)
;
if
(
!
cellElement
)
{
return
nullptr
;
}
return
cellElement
.
forget
(
)
;
}
NS_IMETHODIMP
HTMLEditor
:
:
GetSelectedCellsType
(
Element
*
aElement
uint32_t
*
aSelectionType
)
{
if
(
NS_WARN_IF
(
!
aSelectionType
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
aSelectionType
=
0
;
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
RefPtr
<
Element
>
table
;
if
(
aElement
)
{
table
=
GetElementOrParentByTagNameInternal
(
*
nsGkAtoms
:
:
table
*
aElement
)
;
if
(
!
table
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameInternal
(
nsGkAtoms
:
:
table
)
"
"
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
}
else
{
if
(
IsSelectionRangeContainerNotContent
(
)
)
{
NS_WARNING
(
"
Some
selection
containers
were
not
content
nodes
"
)
;
return
NS_ERROR_FAILURE
;
}
table
=
GetElementOrParentByTagNameAtSelection
(
*
nsGkAtoms
:
:
table
)
;
if
(
!
table
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetElementOrParentByTagNameAtSelection
(
nsGkAtoms
:
:
table
)
"
"
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
}
ErrorResult
error
;
TableSize
tableSize
(
*
this
*
table
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
TableSize
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
RefPtr
<
Element
>
selectedCell
=
GetFirstSelectedTableCellElement
(
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
HTMLEditor
:
:
GetFirstSelectedTableCellElement
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
if
(
!
selectedCell
)
{
return
NS_OK
;
}
*
aSelectionType
=
static_cast
<
uint32_t
>
(
TableSelectionMode
:
:
Cell
)
;
nsTArray
<
int32_t
>
indexArray
;
bool
allCellsInRowAreSelected
=
false
;
bool
allCellsInColAreSelected
=
false
;
IgnoredErrorResult
ignoredError
;
while
(
selectedCell
)
{
CellIndexes
selectedCellIndexes
(
*
selectedCell
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellIndexes
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
if
(
!
indexArray
.
Contains
(
selectedCellIndexes
.
mColumn
)
)
{
indexArray
.
AppendElement
(
selectedCellIndexes
.
mColumn
)
;
allCellsInRowAreSelected
=
AllCellsInRowSelected
(
table
selectedCellIndexes
.
mRow
tableSize
.
mColumnCount
)
;
if
(
!
allCellsInRowAreSelected
)
{
break
;
}
}
selectedCell
=
GetNextSelectedTableCellElement
(
ignoredError
)
;
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
GetNextSelectedTableCellElement
(
)
failed
but
ignored
"
)
;
ignoredError
.
SuppressException
(
)
;
}
if
(
allCellsInRowAreSelected
)
{
*
aSelectionType
=
static_cast
<
uint32_t
>
(
TableSelectionMode
:
:
Row
)
;
return
NS_OK
;
}
indexArray
.
Clear
(
)
;
selectedCell
=
GetFirstSelectedTableCellElement
(
ignoredError
)
;
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
GetFirstSelectedTableCellElement
(
)
failed
but
ignored
"
)
;
ignoredError
.
SuppressException
(
)
;
while
(
selectedCell
)
{
CellIndexes
selectedCellIndexes
(
*
selectedCell
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
CellIndexes
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
error
.
StealNSResult
(
)
)
;
}
if
(
!
indexArray
.
Contains
(
selectedCellIndexes
.
mRow
)
)
{
indexArray
.
AppendElement
(
selectedCellIndexes
.
mColumn
)
;
allCellsInColAreSelected
=
AllCellsInColumnSelected
(
table
selectedCellIndexes
.
mColumn
tableSize
.
mRowCount
)
;
if
(
!
allCellsInRowAreSelected
)
{
break
;
}
}
selectedCell
=
GetNextSelectedTableCellElement
(
ignoredError
)
;
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
HTMLEditor
:
:
GetNextSelectedTableCellElement
(
)
failed
but
ignored
"
)
;
ignoredError
.
SuppressException
(
)
;
}
if
(
allCellsInColAreSelected
)
{
*
aSelectionType
=
static_cast
<
uint32_t
>
(
TableSelectionMode
:
:
Column
)
;
}
return
NS_OK
;
}
bool
HTMLEditor
:
:
AllCellsInRowSelected
(
Element
*
aTable
int32_t
aRowIndex
int32_t
aNumberOfColumns
)
{
if
(
NS_WARN_IF
(
!
aTable
)
)
{
return
false
;
}
IgnoredErrorResult
ignoredError
;
CellData
cellData
;
for
(
int32_t
col
=
0
;
col
<
aNumberOfColumns
;
col
=
cellData
.
NextColumnIndex
(
)
)
{
cellData
.
Update
(
*
this
*
aTable
aRowIndex
col
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
:
:
Update
(
)
failed
"
)
;
return
false
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
if
(
!
cellData
.
mElement
)
{
NS_WARNING
(
"
CellData
didn
'
t
set
mElement
"
)
;
return
cellData
.
mCurrent
.
mColumn
>
0
;
}
if
(
!
cellData
.
mIsSelected
)
{
NS_WARNING
(
"
CellData
didn
'
t
set
mIsSelected
"
)
;
return
false
;
}
MOZ_ASSERT
(
col
<
cellData
.
NextColumnIndex
(
)
)
;
}
return
true
;
}
bool
HTMLEditor
:
:
AllCellsInColumnSelected
(
Element
*
aTable
int32_t
aColIndex
int32_t
aNumberOfRows
)
{
if
(
NS_WARN_IF
(
!
aTable
)
)
{
return
false
;
}
IgnoredErrorResult
ignoredError
;
CellData
cellData
;
for
(
int32_t
row
=
0
;
row
<
aNumberOfRows
;
row
=
cellData
.
NextRowIndex
(
)
)
{
cellData
.
Update
(
*
this
*
aTable
row
aColIndex
ignoredError
)
;
if
(
cellData
.
FailedOrNotFound
(
)
)
{
NS_WARNING
(
"
CellData
:
:
Update
(
)
failed
"
)
;
return
false
;
}
MOZ_ASSERT
(
!
ignoredError
.
Failed
(
)
)
;
if
(
!
cellData
.
mElement
)
{
NS_WARNING
(
"
CellData
didn
'
t
set
mElement
"
)
;
return
cellData
.
mCurrent
.
mRow
>
0
;
}
if
(
!
cellData
.
mIsSelected
)
{
NS_WARNING
(
"
CellData
didn
'
t
set
mIsSelected
"
)
;
return
false
;
}
MOZ_ASSERT
(
row
<
cellData
.
NextRowIndex
(
)
)
;
}
return
true
;
}
bool
HTMLEditor
:
:
IsEmptyCell
(
dom
:
:
Element
*
aCell
)
{
MOZ_ASSERT
(
aCell
)
;
nsCOMPtr
<
nsINode
>
cellChild
=
aCell
-
>
GetFirstChild
(
)
;
if
(
!
cellChild
)
{
return
false
;
}
nsCOMPtr
<
nsINode
>
nextChild
=
cellChild
-
>
GetNextSibling
(
)
;
if
(
nextChild
)
{
return
false
;
}
if
(
cellChild
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
)
{
return
true
;
}
return
IsEmptyNode
(
*
cellChild
false
false
)
;
}
}
