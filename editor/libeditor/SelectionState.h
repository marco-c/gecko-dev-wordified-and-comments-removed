#
ifndef
mozilla_SelectionState_h
#
define
mozilla_SelectionState_h
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
mozilla
/
OwningNonNull
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDirection
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nscore
.
h
"
class
nsCycleCollectionTraversalCallback
;
class
nsRange
;
namespace
mozilla
{
class
RangeUpdater
;
namespace
dom
{
class
Element
;
class
Selection
;
class
Text
;
}
struct
RangeItem
final
{
RangeItem
(
)
:
mStartOffset
(
0
)
mEndOffset
(
0
)
{
}
private
:
~
RangeItem
(
)
=
default
;
public
:
void
StoreRange
(
nsRange
&
aRange
)
;
void
StoreRange
(
const
EditorRawDOMPoint
&
aStartPoint
const
EditorRawDOMPoint
&
aEndPoint
)
{
MOZ_ASSERT
(
aStartPoint
.
IsSet
(
)
)
;
MOZ_ASSERT
(
aEndPoint
.
IsSet
(
)
)
;
mStartContainer
=
aStartPoint
.
GetContainer
(
)
;
mStartOffset
=
aStartPoint
.
Offset
(
)
;
mEndContainer
=
aEndPoint
.
GetContainer
(
)
;
mEndOffset
=
aEndPoint
.
Offset
(
)
;
}
void
Clear
(
)
{
mStartContainer
=
mEndContainer
=
nullptr
;
mStartOffset
=
mEndOffset
=
0
;
}
already_AddRefed
<
nsRange
>
GetRange
(
)
;
bool
IsCollapsed
(
)
const
{
return
mStartContainer
=
=
mEndContainer
&
&
mStartOffset
=
=
mEndOffset
;
}
bool
IsSet
(
)
const
{
return
mStartContainer
&
&
mEndContainer
;
}
EditorDOMPoint
StartPoint
(
)
const
{
return
EditorDOMPoint
(
mStartContainer
mStartOffset
)
;
}
EditorDOMPoint
EndPoint
(
)
const
{
return
EditorDOMPoint
(
mEndContainer
mEndOffset
)
;
}
EditorRawDOMPoint
StartRawPoint
(
)
const
{
return
EditorRawDOMPoint
(
mStartContainer
mStartOffset
)
;
}
EditorRawDOMPoint
EndRawPoint
(
)
const
{
return
EditorRawDOMPoint
(
mEndContainer
mEndOffset
)
;
}
NS_INLINE_DECL_MAIN_THREAD_ONLY_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
RangeItem
)
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
RangeItem
)
nsCOMPtr
<
nsINode
>
mStartContainer
;
nsCOMPtr
<
nsINode
>
mEndContainer
;
int32_t
mStartOffset
;
int32_t
mEndOffset
;
}
;
class
SelectionState
final
{
public
:
SelectionState
(
)
;
~
SelectionState
(
)
{
Clear
(
)
;
}
void
SaveSelection
(
dom
:
:
Selection
&
aSelection
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
nsresult
RestoreSelection
(
dom
:
:
Selection
&
aSelection
)
;
bool
IsCollapsed
(
)
const
;
bool
Equals
(
SelectionState
&
aOther
)
const
;
void
Clear
(
)
;
bool
IsEmpty
(
)
const
;
private
:
AutoTArray
<
RefPtr
<
RangeItem
>
1
>
mArray
;
nsDirection
mDirection
;
friend
class
RangeUpdater
;
friend
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
SelectionState
&
const
char
*
uint32_t
)
;
friend
void
ImplCycleCollectionUnlink
(
SelectionState
&
)
;
}
;
inline
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
aCallback
SelectionState
&
aField
const
char
*
aName
uint32_t
aFlags
=
0
)
{
ImplCycleCollectionTraverse
(
aCallback
aField
.
mArray
aName
aFlags
)
;
}
inline
void
ImplCycleCollectionUnlink
(
SelectionState
&
aField
)
{
ImplCycleCollectionUnlink
(
aField
.
mArray
)
;
}
class
MOZ_STACK_CLASS
RangeUpdater
final
{
public
:
RangeUpdater
(
)
;
void
RegisterRangeItem
(
RangeItem
&
aRangeItem
)
;
void
DropRangeItem
(
RangeItem
&
aRangeItem
)
;
void
RegisterSelectionState
(
SelectionState
&
aSelectionState
)
;
void
DropSelectionState
(
SelectionState
&
aSelectionState
)
;
template
<
typename
PT
typename
CT
>
nsresult
SelAdjCreateNode
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
;
template
<
typename
PT
typename
CT
>
nsresult
SelAdjInsertNode
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
;
void
SelAdjDeleteNode
(
nsINode
&
aNode
)
;
nsresult
SelAdjSplitNode
(
nsIContent
&
aRightNode
nsIContent
&
aNewLeftNode
)
;
nsresult
SelAdjJoinNodes
(
nsINode
&
aLeftNode
nsINode
&
aRightNode
nsINode
&
aParent
int32_t
aOffset
int32_t
aOldLeftNodeLength
)
;
void
SelAdjInsertText
(
const
dom
:
:
Text
&
aTextNode
int32_t
aOffset
const
nsAString
&
aString
)
;
nsresult
SelAdjDeleteText
(
const
dom
:
:
Text
&
aTextNode
int32_t
aOffset
int32_t
aLength
)
;
void
WillReplaceContainer
(
)
{
NS_WARNING_ASSERTION
(
!
mLocked
"
Has
already
been
locked
"
)
;
mLocked
=
true
;
}
void
DidReplaceContainer
(
const
dom
:
:
Element
&
aRemovedElement
dom
:
:
Element
&
aInsertedElement
)
;
void
WillRemoveContainer
(
)
{
NS_WARNING_ASSERTION
(
!
mLocked
"
Has
already
been
locked
"
)
;
mLocked
=
true
;
}
void
DidRemoveContainer
(
const
dom
:
:
Element
&
aRemovedElement
nsINode
&
aRemovedElementContainerNode
uint32_t
aOldOffsetOfRemovedElement
uint32_t
aOldChildCountOfRemovedElement
)
;
void
WillInsertContainer
(
)
{
NS_WARNING_ASSERTION
(
!
mLocked
"
Has
already
been
locked
"
)
;
mLocked
=
true
;
}
void
DidInsertContainer
(
)
{
NS_WARNING_ASSERTION
(
mLocked
"
Not
locked
"
)
;
mLocked
=
false
;
}
void
WillMoveNode
(
)
{
mLocked
=
true
;
}
void
DidMoveNode
(
const
nsINode
&
aOldParent
int32_t
aOldOffset
const
nsINode
&
aNewParent
int32_t
aNewOffset
)
;
private
:
nsTArray
<
RefPtr
<
RangeItem
>
>
mArray
;
bool
mLocked
;
}
;
class
MOZ_STACK_CLASS
AutoTrackDOMPoint
final
{
public
:
AutoTrackDOMPoint
(
)
=
delete
;
AutoTrackDOMPoint
(
RangeUpdater
&
aRangeUpdater
nsCOMPtr
<
nsINode
>
*
aNode
int32_t
*
aOffset
)
:
mRangeUpdater
(
aRangeUpdater
)
mNode
(
aNode
)
mOffset
(
aOffset
)
mPoint
(
nullptr
)
mRangeItem
(
do_AddRef
(
new
RangeItem
(
)
)
)
{
mRangeItem
-
>
mStartContainer
=
*
mNode
;
mRangeItem
-
>
mEndContainer
=
*
mNode
;
mRangeItem
-
>
mStartOffset
=
*
mOffset
;
mRangeItem
-
>
mEndOffset
=
*
mOffset
;
mRangeUpdater
.
RegisterRangeItem
(
mRangeItem
)
;
}
AutoTrackDOMPoint
(
RangeUpdater
&
aRangeUpdater
EditorDOMPoint
*
aPoint
)
:
mRangeUpdater
(
aRangeUpdater
)
mNode
(
nullptr
)
mOffset
(
nullptr
)
mPoint
(
aPoint
)
mRangeItem
(
do_AddRef
(
new
RangeItem
(
)
)
)
{
mRangeItem
-
>
mStartContainer
=
mPoint
-
>
GetContainer
(
)
;
mRangeItem
-
>
mEndContainer
=
mPoint
-
>
GetContainer
(
)
;
mRangeItem
-
>
mStartOffset
=
mPoint
-
>
Offset
(
)
;
mRangeItem
-
>
mEndOffset
=
mPoint
-
>
Offset
(
)
;
mRangeUpdater
.
RegisterRangeItem
(
mRangeItem
)
;
}
~
AutoTrackDOMPoint
(
)
{
mRangeUpdater
.
DropRangeItem
(
mRangeItem
)
;
if
(
mPoint
)
{
if
(
NS_WARN_IF
(
!
mRangeItem
-
>
mStartContainer
)
|
|
NS_WARN_IF
(
mRangeItem
-
>
mStartOffset
<
0
)
)
{
mPoint
-
>
Clear
(
)
;
return
;
}
if
(
NS_WARN_IF
(
mRangeItem
-
>
mStartContainer
-
>
Length
(
)
<
static_cast
<
uint32_t
>
(
mRangeItem
-
>
mStartOffset
)
)
)
{
mPoint
-
>
SetToEndOf
(
mRangeItem
-
>
mStartContainer
)
;
return
;
}
mPoint
-
>
Set
(
mRangeItem
-
>
mStartContainer
mRangeItem
-
>
mStartOffset
)
;
return
;
}
*
mNode
=
mRangeItem
-
>
mStartContainer
;
*
mOffset
=
mRangeItem
-
>
mStartOffset
;
}
private
:
RangeUpdater
&
mRangeUpdater
;
nsCOMPtr
<
nsINode
>
*
mNode
;
int32_t
*
mOffset
;
EditorDOMPoint
*
mPoint
;
OwningNonNull
<
RangeItem
>
mRangeItem
;
}
;
class
MOZ_STACK_CLASS
AutoReplaceContainerSelNotify
final
{
public
:
AutoReplaceContainerSelNotify
(
)
=
delete
;
MOZ_CAN_RUN_SCRIPT
AutoReplaceContainerSelNotify
(
RangeUpdater
&
aRangeUpdater
dom
:
:
Element
&
aOriginalElement
dom
:
:
Element
&
aNewElement
)
:
mRangeUpdater
(
aRangeUpdater
)
mOriginalElement
(
aOriginalElement
)
mNewElement
(
aNewElement
)
{
mRangeUpdater
.
WillReplaceContainer
(
)
;
}
~
AutoReplaceContainerSelNotify
(
)
{
mRangeUpdater
.
DidReplaceContainer
(
mOriginalElement
mNewElement
)
;
}
private
:
RangeUpdater
&
mRangeUpdater
;
dom
:
:
Element
&
mOriginalElement
;
dom
:
:
Element
&
mNewElement
;
}
;
class
MOZ_STACK_CLASS
AutoRemoveContainerSelNotify
final
{
public
:
AutoRemoveContainerSelNotify
(
)
=
delete
;
AutoRemoveContainerSelNotify
(
RangeUpdater
&
aRangeUpdater
const
EditorDOMPoint
&
aAtRemovingElement
)
:
mRangeUpdater
(
aRangeUpdater
)
mRemovingElement
(
*
aAtRemovingElement
.
GetChild
(
)
-
>
AsElement
(
)
)
mParentNode
(
*
aAtRemovingElement
.
GetContainer
(
)
)
mOffsetInParent
(
aAtRemovingElement
.
Offset
(
)
)
mChildCountOfRemovingElement
(
mRemovingElement
-
>
GetChildCount
(
)
)
{
MOZ_ASSERT
(
aAtRemovingElement
.
IsSet
(
)
)
;
mRangeUpdater
.
WillRemoveContainer
(
)
;
}
~
AutoRemoveContainerSelNotify
(
)
{
mRangeUpdater
.
DidRemoveContainer
(
mRemovingElement
mParentNode
mOffsetInParent
mChildCountOfRemovingElement
)
;
}
private
:
RangeUpdater
&
mRangeUpdater
;
OwningNonNull
<
dom
:
:
Element
>
mRemovingElement
;
OwningNonNull
<
nsINode
>
mParentNode
;
uint32_t
mOffsetInParent
;
uint32_t
mChildCountOfRemovingElement
;
}
;
class
MOZ_STACK_CLASS
AutoInsertContainerSelNotify
final
{
private
:
RangeUpdater
&
mRangeUpdater
;
public
:
AutoInsertContainerSelNotify
(
)
=
delete
;
explicit
AutoInsertContainerSelNotify
(
RangeUpdater
&
aRangeUpdater
)
:
mRangeUpdater
(
aRangeUpdater
)
{
mRangeUpdater
.
WillInsertContainer
(
)
;
}
~
AutoInsertContainerSelNotify
(
)
{
mRangeUpdater
.
DidInsertContainer
(
)
;
}
}
;
class
MOZ_STACK_CLASS
AutoMoveNodeSelNotify
final
{
public
:
AutoMoveNodeSelNotify
(
)
=
delete
;
AutoMoveNodeSelNotify
(
RangeUpdater
&
aRangeUpdater
const
EditorDOMPoint
&
aOldPoint
const
EditorDOMPoint
&
aNewPoint
)
:
mRangeUpdater
(
aRangeUpdater
)
mOldParent
(
*
aOldPoint
.
GetContainer
(
)
)
mNewParent
(
*
aNewPoint
.
GetContainer
(
)
)
mOldOffset
(
aOldPoint
.
Offset
(
)
)
mNewOffset
(
aNewPoint
.
Offset
(
)
)
{
MOZ_ASSERT
(
aOldPoint
.
IsSet
(
)
)
;
MOZ_ASSERT
(
aNewPoint
.
IsSet
(
)
)
;
mRangeUpdater
.
WillMoveNode
(
)
;
}
~
AutoMoveNodeSelNotify
(
)
{
mRangeUpdater
.
DidMoveNode
(
mOldParent
mOldOffset
mNewParent
mNewOffset
)
;
}
EditorRawDOMPoint
ComputeInsertionPoint
(
)
const
{
if
(
&
mOldParent
=
=
&
mNewParent
&
&
mOldOffset
<
mNewOffset
)
{
return
EditorRawDOMPoint
(
&
mNewParent
mNewOffset
-
1
)
;
}
return
EditorRawDOMPoint
(
&
mNewParent
mNewOffset
)
;
}
private
:
RangeUpdater
&
mRangeUpdater
;
nsINode
&
mOldParent
;
nsINode
&
mNewParent
;
uint32_t
mOldOffset
;
uint32_t
mNewOffset
;
}
;
}
#
endif
