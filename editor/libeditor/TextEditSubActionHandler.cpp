#
include
"
TextEditor
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
EditAction
.
h
"
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
mozilla
/
EditorUtils
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
TextComposition
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
HTMLBRElement
.
h
"
#
include
"
mozilla
/
dom
/
NodeFilterBinding
.
h
"
#
include
"
mozilla
/
dom
/
NodeIterator
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsCRTGlue
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsISupportsBase
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsTextNode
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsIHTMLCollection
.
h
"
#
include
"
nsPrintfCString
.
h
"
namespace
mozilla
{
using
namespace
dom
;
#
define
CANCEL_OPERATION_AND_RETURN_EDIT_ACTION_RESULT_IF_READONLY_OF_DISABLED
\
if
(
IsReadonly
(
)
|
|
IsDisabled
(
)
)
{
\
return
EditActionCanceled
(
NS_OK
)
;
\
}
nsresult
TextEditor
:
:
InitEditorContentAndSelection
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
nsresult
rv
=
MaybeCreatePaddingBRElementForEmptyEditor
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
!
SelectionRefPtr
(
)
-
>
RangeCount
(
)
)
{
nsresult
rv
=
CollapseSelectionToEnd
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
if
(
IsPlaintextEditor
(
)
&
&
!
IsSingleLineEditor
(
)
)
{
nsresult
rv
=
EnsurePaddingBRElementInMultilineEditor
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
return
NS_OK
;
}
void
TextEditor
:
:
OnStartToHandleTopLevelEditSubAction
(
EditSubAction
aTopLevelEditSubAction
nsIEditor
:
:
EDirection
aDirectionOfTopLevelEditSubAction
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
!
AsHTMLEditor
(
)
)
;
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
EditorBase
:
:
OnStartToHandleTopLevelEditSubAction
(
aTopLevelEditSubAction
aDirectionOfTopLevelEditSubAction
aRv
)
;
MOZ_ASSERT
(
GetTopLevelEditSubAction
(
)
=
=
aTopLevelEditSubAction
)
;
MOZ_ASSERT
(
GetDirectionOfTopLevelEditSubAction
(
)
=
=
aDirectionOfTopLevelEditSubAction
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
aRv
.
Throw
(
NS_ERROR_EDITOR_DESTROYED
)
;
return
;
}
if
(
!
mInitSucceeded
)
{
return
;
}
if
(
aTopLevelEditSubAction
=
=
EditSubAction
:
:
eSetText
)
{
SetSpellCheckRestartPoint
(
EditorDOMPoint
(
mRootElement
0
)
)
;
return
;
}
if
(
aTopLevelEditSubAction
=
=
EditSubAction
:
:
eInsertText
|
|
aTopLevelEditSubAction
=
=
EditSubAction
:
:
eInsertTextComingFromIME
)
{
EditorRawDOMPoint
point
=
FindBetterInsertionPoint
(
EditorRawDOMPoint
(
SelectionRefPtr
(
)
-
>
AnchorRef
(
)
)
)
;
if
(
point
.
IsSet
(
)
)
{
SetSpellCheckRestartPoint
(
point
)
;
return
;
}
}
if
(
SelectionRefPtr
(
)
-
>
AnchorRef
(
)
.
IsSet
(
)
)
{
SetSpellCheckRestartPoint
(
EditorRawDOMPoint
(
SelectionRefPtr
(
)
-
>
AnchorRef
(
)
)
)
;
}
}
nsresult
TextEditor
:
:
OnEndHandlingTopLevelEditSubAction
(
)
{
MOZ_ASSERT
(
IsTopLevelEditSubActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
!
AsHTMLEditor
(
)
)
;
nsresult
rv
;
while
(
true
)
{
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
rv
=
NS_ERROR_EDITOR_DESTROYED
;
break
;
}
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
=
HandleInlineSpellCheckAfterEdit
(
)
)
)
)
{
break
;
}
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
=
EnsurePaddingBRElementForEmptyEditor
(
)
)
)
)
{
break
;
}
if
(
!
IsSingleLineEditor
(
)
&
&
NS_WARN_IF
(
NS_FAILED
(
rv
=
EnsurePaddingBRElementInMultilineEditor
(
)
)
)
)
{
break
;
}
rv
=
EnsureCaretNotAtEndOfTextNode
(
)
;
if
(
NS_WARN_IF
(
rv
=
=
NS_ERROR_EDITOR_DESTROYED
)
)
{
break
;
}
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EnsureCaretNotAtEndOfTextNode
(
)
failed
but
ignored
"
)
;
rv
=
NS_OK
;
break
;
}
EditorBase
:
:
OnEndHandlingTopLevelEditSubAction
(
)
;
MOZ_ASSERT
(
!
GetTopLevelEditSubAction
(
)
)
;
MOZ_ASSERT
(
GetDirectionOfTopLevelEditSubAction
(
)
=
=
eNone
)
;
return
rv
;
}
EditActionResult
TextEditor
:
:
InsertLineFeedCharacterAtSelection
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
!
AsHTMLEditor
(
)
)
;
MOZ_ASSERT
(
!
IsSingleLineEditor
(
)
)
;
UndefineCaretBidiLevel
(
)
;
CANCEL_OPERATION_AND_RETURN_EDIT_ACTION_RESULT_IF_READONLY_OF_DISABLED
if
(
mMaxTextLength
>
=
0
)
{
nsAutoString
insertionString
(
NS_LITERAL_STRING
(
"
\
n
"
)
)
;
EditActionResult
result
=
TruncateInsertionStringForMaxLength
(
insertionString
)
;
if
(
NS_WARN_IF
(
result
.
Failed
(
)
)
)
{
return
result
;
}
if
(
result
.
Handled
(
)
)
{
return
EditActionCanceled
(
)
;
}
}
if
(
!
SelectionRefPtr
(
)
-
>
IsCollapsed
(
)
)
{
nsresult
rv
=
DeleteSelectionAsSubAction
(
nsIEditor
:
:
eNone
nsIEditor
:
:
eStrip
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditActionIgnored
(
rv
)
;
}
}
nsresult
rv
=
EnsureNoPaddingBRElementForEmptyEditor
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditActionIgnored
(
rv
)
;
}
nsRange
*
firstRange
=
SelectionRefPtr
(
)
-
>
GetRangeAt
(
0
)
;
if
(
NS_WARN_IF
(
!
firstRange
)
)
{
return
EditActionIgnored
(
NS_ERROR_FAILURE
)
;
}
EditorRawDOMPoint
pointToInsert
(
firstRange
-
>
StartRef
(
)
)
;
if
(
NS_WARN_IF
(
!
pointToInsert
.
IsSet
(
)
)
)
{
return
EditActionIgnored
(
NS_ERROR_FAILURE
)
;
}
MOZ_ASSERT
(
pointToInsert
.
IsSetAndValid
(
)
)
;
if
(
!
pointToInsert
.
IsInTextNode
(
)
&
&
!
CanContainTag
(
*
pointToInsert
.
GetContainer
(
)
*
nsGkAtoms
:
:
textTagName
)
)
{
return
EditActionIgnored
(
NS_ERROR_FAILURE
)
;
}
RefPtr
<
Document
>
document
=
GetDocument
(
)
;
if
(
NS_WARN_IF
(
!
document
)
)
{
return
EditActionIgnored
(
NS_ERROR_NOT_INITIALIZED
)
;
}
AutoTransactionsConserveSelection
dontChangeMySelection
(
*
this
)
;
EditorRawDOMPoint
pointAfterInsertedLineFeed
;
rv
=
InsertTextWithTransaction
(
*
document
NS_LITERAL_STRING
(
"
\
n
"
)
pointToInsert
&
pointAfterInsertedLineFeed
)
;
if
(
NS_WARN_IF
(
!
pointAfterInsertedLineFeed
.
IsSet
(
)
)
)
{
return
EditActionIgnored
(
NS_ERROR_FAILURE
)
;
}
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditActionIgnored
(
rv
)
;
}
MOZ_ASSERT
(
!
pointAfterInsertedLineFeed
.
GetChild
(
)
"
After
inserting
text
into
a
text
node
pointAfterInsertedLineFeed
.
"
"
GetChild
(
)
should
be
nullptr
"
)
;
rv
=
SelectionRefPtr
(
)
-
>
Collapse
(
pointAfterInsertedLineFeed
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditActionIgnored
(
rv
)
;
}
EditorRawDOMPoint
endPoint
(
EditorBase
:
:
GetEndPoint
(
*
SelectionRefPtr
(
)
)
)
;
if
(
endPoint
=
=
pointAfterInsertedLineFeed
)
{
SelectionRefPtr
(
)
-
>
SetInterlinePosition
(
true
IgnoreErrors
(
)
)
;
}
return
EditActionHandled
(
)
;
}
nsresult
TextEditor
:
:
EnsureCaretNotAtEndOfTextNode
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
IsPlaintextEditor
(
)
)
;
if
(
!
SelectionRefPtr
(
)
-
>
RangeCount
(
)
)
{
CollapseSelectionToEnd
(
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
}
EditorRawDOMPoint
selectionStartPoint
(
EditorBase
:
:
GetStartPoint
(
*
SelectionRefPtr
(
)
)
)
;
if
(
NS_WARN_IF
(
!
selectionStartPoint
.
IsSet
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
selectionStartPoint
.
IsInTextNode
(
)
|
|
!
selectionStartPoint
.
IsEndOfContainer
(
)
)
{
return
NS_OK
;
}
Element
*
anonymousDivElement
=
GetRoot
(
)
;
if
(
NS_WARN_IF
(
!
anonymousDivElement
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
nsINode
*
parentNode
=
selectionStartPoint
.
GetContainer
(
)
-
>
GetParentNode
(
)
;
if
(
parentNode
!
=
anonymousDivElement
)
{
return
NS_OK
;
}
nsINode
*
nextNode
=
selectionStartPoint
.
GetContainer
(
)
-
>
GetNextSibling
(
)
;
if
(
!
nextNode
|
|
!
EditorBase
:
:
IsPaddingBRElementForEmptyLastLine
(
*
nextNode
)
)
{
return
NS_OK
;
}
EditorRawDOMPoint
afterStartContainer
(
selectionStartPoint
.
GetContainer
(
)
)
;
if
(
NS_WARN_IF
(
!
afterStartContainer
.
AdvanceOffset
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
ErrorResult
error
;
SelectionRefPtr
(
)
-
>
Collapse
(
afterStartContainer
error
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
error
.
SuppressException
(
)
;
return
NS_ERROR_EDITOR_DESTROYED
;
}
NS_WARNING_ASSERTION
(
!
error
.
Failed
(
)
"
Selection
:
:
Collapse
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
void
TextEditor
:
:
HandleNewLinesInStringForSingleLineEditor
(
nsString
&
aString
)
const
{
static
const
char16_t
kLF
=
static_cast
<
char16_t
>
(
'
\
n
'
)
;
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
IsPlaintextEditor
(
)
)
;
MOZ_ASSERT
(
aString
.
FindChar
(
static_cast
<
uint16_t
>
(
'
\
r
'
)
)
=
=
kNotFound
)
;
int32_t
firstLF
=
aString
.
FindChar
(
kLF
0
)
;
if
(
firstLF
=
=
kNotFound
)
{
return
;
}
switch
(
mNewlineHandling
)
{
case
nsIEditor
:
:
eNewlinesReplaceWithSpaces
:
aString
.
Trim
(
LFSTR
false
true
)
;
aString
.
ReplaceChar
(
kLF
'
'
)
;
break
;
case
nsIEditor
:
:
eNewlinesStrip
:
aString
.
StripChar
(
kLF
)
;
break
;
case
nsIEditor
:
:
eNewlinesPasteToFirst
:
default
:
{
int32_t
offset
=
0
;
while
(
firstLF
=
=
offset
)
{
offset
+
+
;
firstLF
=
aString
.
FindChar
(
kLF
offset
)
;
}
if
(
firstLF
>
0
)
{
aString
.
Truncate
(
firstLF
)
;
}
if
(
offset
>
0
)
{
aString
.
Cut
(
0
offset
)
;
}
break
;
}
case
nsIEditor
:
:
eNewlinesReplaceWithCommas
:
aString
.
Trim
(
LFSTR
true
true
)
;
aString
.
ReplaceChar
(
kLF
'
'
)
;
break
;
case
nsIEditor
:
:
eNewlinesStripSurroundingWhitespace
:
{
nsAutoString
result
;
uint32_t
offset
=
0
;
while
(
offset
<
aString
.
Length
(
)
)
{
int32_t
nextLF
=
!
offset
?
firstLF
:
aString
.
FindChar
(
kLF
offset
)
;
if
(
nextLF
<
0
)
{
result
.
Append
(
nsDependentSubstring
(
aString
offset
)
)
;
break
;
}
uint32_t
wsBegin
=
nextLF
;
while
(
wsBegin
>
offset
&
&
NS_IS_SPACE
(
aString
[
wsBegin
-
1
]
)
)
{
-
-
wsBegin
;
}
result
.
Append
(
nsDependentSubstring
(
aString
offset
wsBegin
-
offset
)
)
;
offset
=
nextLF
+
1
;
while
(
offset
<
aString
.
Length
(
)
&
&
NS_IS_SPACE
(
aString
[
offset
]
)
)
{
+
+
offset
;
}
}
aString
=
result
;
break
;
}
case
nsIEditor
:
:
eNewlinesPasteIntact
:
aString
.
Trim
(
LFSTR
true
true
)
;
break
;
}
}
EditActionResult
TextEditor
:
:
HandleInsertText
(
EditSubAction
aEditSubAction
const
nsAString
&
aInsertionString
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
aEditSubAction
=
=
EditSubAction
:
:
eInsertText
|
|
aEditSubAction
=
=
EditSubAction
:
:
eInsertTextComingFromIME
)
;
UndefineCaretBidiLevel
(
)
;
if
(
aInsertionString
.
IsEmpty
(
)
&
&
aEditSubAction
!
=
EditSubAction
:
:
eInsertTextComingFromIME
)
{
return
EditActionCanceled
(
)
;
}
nsAutoString
insertionString
(
aInsertionString
)
;
if
(
mMaxTextLength
>
=
0
)
{
EditActionResult
result
=
TruncateInsertionStringForMaxLength
(
insertionString
)
;
if
(
NS_WARN_IF
(
result
.
Failed
(
)
)
)
{
return
result
.
MarkAsHandled
(
)
;
}
if
(
result
.
Handled
(
)
&
&
insertionString
.
IsEmpty
(
)
&
&
aEditSubAction
!
=
EditSubAction
:
:
eInsertTextComingFromIME
)
{
return
EditActionCanceled
(
)
;
}
}
uint32_t
start
=
0
;
if
(
IsPasswordEditor
(
)
)
{
if
(
GetComposition
(
)
&
&
!
GetComposition
(
)
-
>
String
(
)
.
IsEmpty
(
)
)
{
start
=
GetComposition
(
)
-
>
XPOffsetInTextNode
(
)
;
}
else
{
uint32_t
end
=
0
;
nsContentUtils
:
:
GetSelectionInTextControl
(
SelectionRefPtr
(
)
GetRoot
(
)
start
end
)
;
}
}
if
(
!
SelectionRefPtr
(
)
-
>
IsCollapsed
(
)
)
{
nsresult
rv
=
DeleteSelectionAsSubAction
(
nsIEditor
:
:
eNone
nsIEditor
:
:
eStrip
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditActionHandled
(
rv
)
;
}
}
CANCEL_OPERATION_AND_RETURN_EDIT_ACTION_RESULT_IF_READONLY_OF_DISABLED
MaybeDoAutoPasswordMasking
(
)
;
nsresult
rv
=
EnsureNoPaddingBRElementForEmptyEditor
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditActionHandled
(
rv
)
;
}
if
(
IsSingleLineEditor
(
)
)
{
nsContentUtils
:
:
PlatformToDOMLineBreaks
(
insertionString
)
;
HandleNewLinesInStringForSingleLineEditor
(
insertionString
)
;
}
nsRange
*
firstRange
=
SelectionRefPtr
(
)
-
>
GetRangeAt
(
0
)
;
if
(
NS_WARN_IF
(
!
firstRange
)
)
{
return
EditActionHandled
(
NS_ERROR_FAILURE
)
;
}
EditorRawDOMPoint
atStartOfSelection
(
firstRange
-
>
StartRef
(
)
)
;
if
(
NS_WARN_IF
(
!
atStartOfSelection
.
IsSetAndValid
(
)
)
)
{
return
EditActionHandled
(
NS_ERROR_FAILURE
)
;
}
if
(
!
atStartOfSelection
.
IsInTextNode
(
)
&
&
!
CanContainTag
(
*
atStartOfSelection
.
GetContainer
(
)
*
nsGkAtoms
:
:
textTagName
)
)
{
return
EditActionHandled
(
NS_ERROR_FAILURE
)
;
}
RefPtr
<
Document
>
document
=
GetDocument
(
)
;
if
(
NS_WARN_IF
(
!
document
)
)
{
return
EditActionHandled
(
NS_ERROR_NOT_INITIALIZED
)
;
}
if
(
aEditSubAction
=
=
EditSubAction
:
:
eInsertTextComingFromIME
)
{
EditorRawDOMPoint
compositionStartPoint
=
GetCompositionStartPoint
(
)
;
if
(
!
compositionStartPoint
.
IsSet
(
)
)
{
compositionStartPoint
=
FindBetterInsertionPoint
(
atStartOfSelection
)
;
}
nsresult
rv
=
InsertTextWithTransaction
(
*
document
insertionString
compositionStartPoint
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
EditActionHandled
(
NS_ERROR_EDITOR_DESTROYED
)
;
}
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditActionHandled
(
rv
)
;
}
}
else
{
MOZ_ASSERT
(
aEditSubAction
=
=
EditSubAction
:
:
eInsertText
)
;
AutoTransactionsConserveSelection
dontChangeMySelection
(
*
this
)
;
EditorRawDOMPoint
pointAfterStringInserted
;
nsresult
rv
=
InsertTextWithTransaction
(
*
document
insertionString
atStartOfSelection
&
pointAfterStringInserted
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
EditActionHandled
(
NS_ERROR_EDITOR_DESTROYED
)
;
}
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditActionHandled
(
rv
)
;
}
if
(
pointAfterStringInserted
.
IsSet
(
)
)
{
bool
endsWithLF
=
!
insertionString
.
IsEmpty
(
)
&
&
insertionString
.
Last
(
)
=
=
nsCRT
:
:
LF
;
IgnoredErrorResult
ignoredError
;
SelectionRefPtr
(
)
-
>
SetInterlinePosition
(
endsWithLF
ignoredError
)
;
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
Selection
:
:
SetInterlinePosition
(
)
failed
but
ignored
"
)
;
MOZ_ASSERT
(
!
pointAfterStringInserted
.
GetChild
(
)
"
After
inserting
text
into
a
text
node
pointAfterStringInserted
.
"
"
GetChild
(
)
should
be
nullptr
"
)
;
ignoredError
=
IgnoredErrorResult
(
)
;
SelectionRefPtr
(
)
-
>
Collapse
(
pointAfterStringInserted
ignoredError
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
EditActionHandled
(
NS_ERROR_EDITOR_DESTROYED
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
Selection
:
:
Collapse
(
)
failed
but
ignored
"
)
;
}
}
if
(
IsPasswordEditor
(
)
&
&
IsMaskingPassword
(
)
&
&
CanEchoPasswordNow
(
)
)
{
nsresult
rv
=
SetUnmaskRangeAndNotify
(
start
insertionString
.
Length
(
)
LookAndFeel
:
:
GetPasswordMaskDelay
(
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
SetUnmaskRangeAndNotify
(
)
failed
"
)
;
return
EditActionHandled
(
rv
)
;
}
return
EditActionHandled
(
)
;
}
EditActionResult
TextEditor
:
:
SetTextWithoutTransaction
(
const
nsAString
&
aValue
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
!
AsHTMLEditor
(
)
)
;
MOZ_ASSERT
(
IsPlaintextEditor
(
)
)
;
MOZ_ASSERT
(
!
IsIMEComposing
(
)
)
;
MOZ_ASSERT
(
!
IsUndoRedoEnabled
(
)
)
;
MOZ_ASSERT
(
GetEditAction
(
)
!
=
EditAction
:
:
eReplaceText
)
;
MOZ_ASSERT
(
mMaxTextLength
<
0
)
;
MOZ_ASSERT
(
aValue
.
FindChar
(
static_cast
<
char16_t
>
(
'
\
r
'
)
)
=
=
kNotFound
)
;
UndefineCaretBidiLevel
(
)
;
CANCEL_OPERATION_AND_RETURN_EDIT_ACTION_RESULT_IF_READONLY_OF_DISABLED
MaybeDoAutoPasswordMasking
(
)
;
nsresult
rv
=
EnsureNoPaddingBRElementForEmptyEditor
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditActionResult
(
rv
)
;
}
RefPtr
<
Element
>
anonymousDivElement
=
GetRoot
(
)
;
nsIContent
*
firstChild
=
anonymousDivElement
-
>
GetFirstChild
(
)
;
if
(
IsSingleLineEditor
(
)
)
{
if
(
firstChild
&
&
(
!
firstChild
-
>
IsText
(
)
|
|
firstChild
-
>
GetNextSibling
(
)
)
)
{
return
EditActionIgnored
(
)
;
}
}
else
{
if
(
!
firstChild
)
{
return
EditActionIgnored
(
)
;
}
if
(
firstChild
-
>
IsText
(
)
)
{
if
(
!
firstChild
-
>
GetNextSibling
(
)
|
|
!
EditorBase
:
:
IsPaddingBRElementForEmptyLastLine
(
*
firstChild
-
>
GetNextSibling
(
)
)
)
{
return
EditActionIgnored
(
)
;
}
}
else
if
(
!
EditorBase
:
:
IsPaddingBRElementForEmptyLastLine
(
*
firstChild
)
)
{
return
EditActionIgnored
(
)
;
}
}
nsAutoString
sanitizedValue
(
aValue
)
;
if
(
IsSingleLineEditor
(
)
&
&
!
IsPasswordEditor
(
)
)
{
HandleNewLinesInStringForSingleLineEditor
(
sanitizedValue
)
;
}
if
(
!
firstChild
|
|
!
firstChild
-
>
IsText
(
)
)
{
if
(
sanitizedValue
.
IsEmpty
(
)
)
{
return
EditActionHandled
(
)
;
}
RefPtr
<
Document
>
document
=
GetDocument
(
)
;
if
(
NS_WARN_IF
(
!
document
)
)
{
return
EditActionIgnored
(
)
;
}
RefPtr
<
nsTextNode
>
newTextNode
=
CreateTextNode
(
sanitizedValue
)
;
if
(
NS_WARN_IF
(
!
newTextNode
)
)
{
return
EditActionIgnored
(
)
;
}
nsresult
rv
=
InsertNodeWithTransaction
(
*
newTextNode
EditorDOMPoint
(
anonymousDivElement
0
)
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
EditActionResult
(
NS_ERROR_EDITOR_DESTROYED
)
;
}
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditActionResult
(
rv
)
;
}
return
EditActionHandled
(
)
;
}
RefPtr
<
Text
>
textNode
=
firstChild
-
>
GetAsText
(
)
;
if
(
MOZ_UNLIKELY
(
NS_WARN_IF
(
!
textNode
)
)
)
{
return
EditActionIgnored
(
)
;
}
rv
=
SetTextNodeWithoutTransaction
(
sanitizedValue
*
textNode
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditActionResult
(
rv
)
;
}
if
(
sanitizedValue
.
IsEmpty
(
)
&
&
!
textNode
-
>
Length
(
)
)
{
nsresult
rv
=
DeleteNodeWithTransaction
(
*
textNode
)
;
if
(
NS_WARN_IF
(
rv
=
=
NS_ERROR_EDITOR_DESTROYED
)
)
{
return
EditActionResult
(
NS_ERROR_EDITOR_DESTROYED
)
;
}
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
DeleteNodeWithTransaction
(
)
failed
but
ignored
"
)
;
IgnoredErrorResult
ignoredError
;
SelectionRefPtr
(
)
-
>
SetInterlinePosition
(
true
ignoredError
)
;
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
Selection
:
:
SetInterlinePoisition
(
)
failed
"
)
;
}
return
EditActionHandled
(
)
;
}
EditActionResult
TextEditor
:
:
HandleDeleteSelection
(
nsIEditor
:
:
EDirection
aDirectionAndAmount
nsIEditor
:
:
EStripWrappers
aStripWrappers
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
UndefineCaretBidiLevel
(
)
;
CANCEL_OPERATION_AND_RETURN_EDIT_ACTION_RESULT_IF_READONLY_OF_DISABLED
if
(
mPaddingBRElementForEmptyEditor
)
{
return
EditActionCanceled
(
)
;
}
EditActionResult
result
=
HandleDeleteSelectionInternal
(
aDirectionAndAmount
aStripWrappers
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
result
.
SetResult
(
NS_ERROR_EDITOR_DESTROYED
)
;
}
NS_WARNING_ASSERTION
(
result
.
Succeeded
(
)
"
HandleDeleteSelectionInternal
(
)
failed
"
)
;
return
result
;
}
EditActionResult
TextEditor
:
:
HandleDeleteSelectionInternal
(
nsIEditor
:
:
EDirection
aDirectionAndAmount
nsIEditor
:
:
EStripWrappers
aStripWrappers
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
!
AsHTMLEditor
(
)
)
;
SelectionBatcher
selectionBatcher
(
SelectionRefPtr
(
)
)
;
AutoHideSelectionChanges
hideSelection
(
SelectionRefPtr
(
)
)
;
nsAutoScriptBlocker
scriptBlocker
;
if
(
IsPasswordEditor
(
)
&
&
IsMaskingPassword
(
)
)
{
MaskAllCharacters
(
)
;
}
else
{
EditorRawDOMPoint
selectionStartPoint
(
EditorBase
:
:
GetStartPoint
(
*
SelectionRefPtr
(
)
)
)
;
if
(
NS_WARN_IF
(
!
selectionStartPoint
.
IsSet
(
)
)
)
{
return
EditActionResult
(
NS_ERROR_FAILURE
)
;
}
if
(
!
SelectionRefPtr
(
)
-
>
IsCollapsed
(
)
)
{
nsresult
rv
=
DeleteSelectionWithTransaction
(
aDirectionAndAmount
aStripWrappers
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
DeleteSelectionWithTransaction
(
)
failed
"
)
;
return
EditActionHandled
(
rv
)
;
}
EditActionResult
result
=
SetCaretBidiLevelForDeletion
(
selectionStartPoint
aDirectionAndAmount
)
;
if
(
NS_WARN_IF
(
result
.
Failed
(
)
)
|
|
result
.
Canceled
(
)
)
{
return
result
;
}
}
nsresult
rv
=
ExtendSelectionForDelete
(
&
aDirectionAndAmount
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditActionResult
(
rv
)
;
}
rv
=
DeleteSelectionWithTransaction
(
aDirectionAndAmount
aStripWrappers
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
EditActionResult
(
NS_ERROR_EDITOR_DESTROYED
)
;
}
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
DeleteSelectionWithTransaction
(
)
failed
"
)
;
return
EditActionHandled
(
rv
)
;
}
EditActionResult
TextEditor
:
:
ComputeValueFromTextNodeAndPaddingBRElement
(
nsAString
&
aValue
)
const
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
if
(
mPaddingBRElementForEmptyEditor
)
{
aValue
.
Truncate
(
)
;
return
EditActionHandled
(
)
;
}
if
(
AsHTMLEditor
(
)
)
{
return
EditActionIgnored
(
)
;
}
Element
*
anonymousDivElement
=
GetRoot
(
)
;
if
(
!
anonymousDivElement
)
{
aValue
.
Truncate
(
)
;
return
EditActionHandled
(
)
;
}
nsIContent
*
textNodeOrPaddingBRElement
=
anonymousDivElement
-
>
GetFirstChild
(
)
;
if
(
!
textNodeOrPaddingBRElement
)
{
aValue
.
Truncate
(
)
;
return
EditActionHandled
(
)
;
}
Text
*
textNode
=
textNodeOrPaddingBRElement
-
>
GetAsText
(
)
;
if
(
!
textNode
)
{
aValue
.
Truncate
(
)
;
return
EditActionHandled
(
)
;
}
nsIContent
*
firstChildExceptText
=
textNode
?
textNodeOrPaddingBRElement
-
>
GetNextSibling
(
)
:
textNodeOrPaddingBRElement
;
bool
isInput
=
IsSingleLineEditor
(
)
;
bool
isTextarea
=
!
isInput
;
if
(
NS_WARN_IF
(
isInput
&
&
firstChildExceptText
)
|
|
NS_WARN_IF
(
isTextarea
&
&
!
firstChildExceptText
)
|
|
NS_WARN_IF
(
isTextarea
&
&
!
EditorBase
:
:
IsPaddingBRElementForEmptyLastLine
(
*
firstChildExceptText
)
&
&
!
firstChildExceptText
-
>
IsXULElement
(
nsGkAtoms
:
:
scrollbar
)
)
)
{
return
EditActionIgnored
(
)
;
}
textNode
-
>
GetData
(
aValue
)
;
return
EditActionHandled
(
)
;
}
nsresult
TextEditor
:
:
EnsurePaddingBRElementInMultilineEditor
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
IsPlaintextEditor
(
)
)
;
MOZ_ASSERT
(
!
IsSingleLineEditor
(
)
)
;
Element
*
anonymousDivElement
=
GetRoot
(
)
;
if
(
NS_WARN_IF
(
!
anonymousDivElement
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
NS_WARN_IF
(
!
anonymousDivElement
-
>
GetLastChild
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
RefPtr
<
HTMLBRElement
>
brElement
=
HTMLBRElement
:
:
FromNode
(
anonymousDivElement
-
>
GetLastChild
(
)
)
;
if
(
!
brElement
)
{
AutoTransactionsConserveSelection
dontChangeMySelection
(
*
this
)
;
EditorDOMPoint
endOfAnonymousDiv
(
EditorDOMPoint
:
:
AtEndOf
(
*
anonymousDivElement
)
)
;
CreateElementResult
createPaddingBRResult
=
InsertPaddingBRElementForEmptyLastLineWithTransaction
(
endOfAnonymousDiv
)
;
NS_WARNING_ASSERTION
(
createPaddingBRResult
.
Succeeded
(
)
"
InsertPaddingBRElementForEmptyLastLineWithTransaction
(
)
failed
"
)
;
return
createPaddingBRResult
.
Rv
(
)
;
}
if
(
!
brElement
-
>
IsPaddingForEmptyEditor
(
)
)
{
return
NS_OK
;
}
brElement
-
>
UnsetFlags
(
NS_PADDING_FOR_EMPTY_EDITOR
)
;
brElement
-
>
SetFlags
(
NS_PADDING_FOR_EMPTY_LAST_LINE
)
;
return
NS_OK
;
}
EditActionResult
TextEditor
:
:
TruncateInsertionStringForMaxLength
(
nsAString
&
aInsertionString
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
mMaxTextLength
>
=
0
)
;
if
(
!
IsPlaintextEditor
(
)
|
|
IsIMEComposing
(
)
)
{
return
EditActionIgnored
(
)
;
}
int32_t
currentLength
=
INT32_MAX
;
nsresult
rv
=
GetTextLength
(
&
currentLength
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
EditActionResult
(
rv
)
;
}
uint32_t
selectionStart
selectionEnd
;
nsContentUtils
:
:
GetSelectionInTextControl
(
SelectionRefPtr
(
)
GetRoot
(
)
selectionStart
selectionEnd
)
;
TextComposition
*
composition
=
GetComposition
(
)
;
const
uint32_t
kOldCompositionStringLength
=
composition
?
composition
-
>
String
(
)
.
Length
(
)
:
0
;
const
uint32_t
kSelectionLength
=
selectionEnd
-
selectionStart
;
const
uint32_t
kNewLength
=
currentLength
-
kSelectionLength
-
kOldCompositionStringLength
;
if
(
kNewLength
>
=
static_cast
<
uint32_t
>
(
mMaxTextLength
)
)
{
aInsertionString
.
Truncate
(
)
;
return
EditActionHandled
(
)
;
}
if
(
aInsertionString
.
Length
(
)
+
kNewLength
<
=
static_cast
<
uint32_t
>
(
mMaxTextLength
)
)
{
return
EditActionIgnored
(
)
;
}
int32_t
newInsertionStringLength
=
mMaxTextLength
-
kNewLength
;
MOZ_ASSERT
(
newInsertionStringLength
>
0
)
;
char16_t
maybeHighSurrogate
=
aInsertionString
.
CharAt
(
newInsertionStringLength
-
1
)
;
char16_t
maybeLowSurrogate
=
aInsertionString
.
CharAt
(
newInsertionStringLength
)
;
if
(
NS_IS_SURROGATE_PAIR
(
maybeHighSurrogate
maybeLowSurrogate
)
)
{
newInsertionStringLength
-
-
;
}
aInsertionString
.
Truncate
(
newInsertionStringLength
)
;
return
EditActionHandled
(
)
;
}
bool
TextEditor
:
:
CanEchoPasswordNow
(
)
const
{
if
(
!
LookAndFeel
:
:
GetEchoPassword
(
)
|
|
(
mFlags
&
nsIEditor
:
:
eEditorDontEchoPassword
)
)
{
return
false
;
}
return
GetEditAction
(
)
!
=
EditAction
:
:
eDrop
&
&
GetEditAction
(
)
!
=
EditAction
:
:
ePaste
;
}
}
