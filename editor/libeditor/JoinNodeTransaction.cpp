#
include
"
JoinNodeTransaction
.
h
"
#
include
"
mozilla
/
EditorBase
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
using
namespace
dom
;
already_AddRefed
<
JoinNodeTransaction
>
JoinNodeTransaction
:
:
MaybeCreate
(
EditorBase
&
aEditorBase
nsINode
&
aLeftNode
nsINode
&
aRightNode
)
{
RefPtr
<
JoinNodeTransaction
>
transaction
=
new
JoinNodeTransaction
(
aEditorBase
aLeftNode
aRightNode
)
;
if
(
NS_WARN_IF
(
!
transaction
-
>
CanDoIt
(
)
)
)
{
return
nullptr
;
}
return
transaction
.
forget
(
)
;
}
JoinNodeTransaction
:
:
JoinNodeTransaction
(
EditorBase
&
aEditorBase
nsINode
&
aLeftNode
nsINode
&
aRightNode
)
:
mEditorBase
(
&
aEditorBase
)
mLeftNode
(
&
aLeftNode
)
mRightNode
(
&
aRightNode
)
mOffset
(
0
)
{
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
JoinNodeTransaction
EditTransactionBase
mEditorBase
mLeftNode
mRightNode
mParent
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
JoinNodeTransaction
)
NS_INTERFACE_MAP_END_INHERITING
(
EditTransactionBase
)
bool
JoinNodeTransaction
:
:
CanDoIt
(
)
const
{
if
(
NS_WARN_IF
(
!
mLeftNode
)
|
|
NS_WARN_IF
(
!
mRightNode
)
|
|
NS_WARN_IF
(
!
mEditorBase
)
|
|
!
mLeftNode
-
>
GetParentNode
(
)
)
{
return
false
;
}
return
mEditorBase
-
>
IsModifiableNode
(
*
mLeftNode
-
>
GetParentNode
(
)
)
;
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHODIMP
JoinNodeTransaction
:
:
DoTransaction
(
)
{
if
(
NS_WARN_IF
(
!
mEditorBase
)
|
|
NS_WARN_IF
(
!
mLeftNode
)
|
|
NS_WARN_IF
(
!
mRightNode
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsCOMPtr
<
nsINode
>
leftParent
=
mLeftNode
-
>
GetParentNode
(
)
;
NS_ENSURE_TRUE
(
leftParent
NS_ERROR_NULL_POINTER
)
;
if
(
leftParent
!
=
mRightNode
-
>
GetParentNode
(
)
)
{
NS_ASSERTION
(
false
"
Nodes
do
not
have
same
parent
"
)
;
return
NS_ERROR_INVALID_ARG
;
}
mParent
=
leftParent
;
mOffset
=
mLeftNode
-
>
Length
(
)
;
RefPtr
<
EditorBase
>
editorBase
=
mEditorBase
;
nsCOMPtr
<
nsINode
>
leftNode
=
mLeftNode
;
nsCOMPtr
<
nsINode
>
rightNode
=
mRightNode
;
return
editorBase
-
>
DoJoinNodes
(
rightNode
leftNode
MOZ_KnownLive
(
mParent
)
)
;
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHODIMP
JoinNodeTransaction
:
:
UndoTransaction
(
)
{
if
(
NS_WARN_IF
(
!
mParent
)
|
|
NS_WARN_IF
(
!
mLeftNode
)
|
|
NS_WARN_IF
(
!
mRightNode
)
|
|
NS_WARN_IF
(
!
mEditorBase
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
ErrorResult
rv
;
if
(
mRightNode
-
>
GetAsText
(
)
)
{
RefPtr
<
EditorBase
>
editorBase
=
mEditorBase
;
RefPtr
<
Text
>
rightNodeAsText
=
mRightNode
-
>
GetAsText
(
)
;
editorBase
-
>
DoDeleteText
(
*
rightNodeAsText
0
mOffset
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
return
rv
.
StealNSResult
(
)
;
}
}
else
{
nsCOMPtr
<
nsIContent
>
child
=
mRightNode
-
>
GetFirstChild
(
)
;
for
(
uint32_t
i
=
0
;
i
<
mOffset
;
i
+
+
)
{
if
(
rv
.
Failed
(
)
)
{
return
rv
.
StealNSResult
(
)
;
}
if
(
!
child
)
{
return
NS_ERROR_NULL_POINTER
;
}
nsCOMPtr
<
nsIContent
>
nextSibling
=
child
-
>
GetNextSibling
(
)
;
mLeftNode
-
>
AppendChild
(
*
child
rv
)
;
child
=
nextSibling
;
}
}
nsCOMPtr
<
nsINode
>
refNode
=
mRightNode
;
mParent
-
>
InsertBefore
(
*
mLeftNode
refNode
rv
)
;
return
rv
.
StealNSResult
(
)
;
}
}
