#
include
"
mozilla
/
TextEditRules
.
h
"
#
include
"
mozilla
/
TextEditor
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsFrameSelection
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIEditor
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nscore
.
h
"
namespace
mozilla
{
using
namespace
dom
;
nsresult
TextEditRules
:
:
CheckBidiLevelForDeletion
(
Selection
*
aSelection
const
EditorRawDOMPoint
&
aSelectionPoint
nsIEditor
:
:
EDirection
aAction
bool
*
aCancel
)
{
MOZ_ASSERT
(
IsEditorDataAvailable
(
)
)
;
if
(
NS_WARN_IF
(
!
aCancel
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
aCancel
=
false
;
RefPtr
<
nsPresContext
>
presContext
=
TextEditorRef
(
)
.
GetPresContext
(
)
;
if
(
NS_WARN_IF
(
!
presContext
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
presContext
-
>
BidiEnabled
(
)
)
{
return
NS_OK
;
}
if
(
!
aSelectionPoint
.
GetContainerAsContent
(
)
)
{
return
NS_ERROR_FAILURE
;
}
nsBidiLevel
levelBefore
;
nsBidiLevel
levelAfter
;
RefPtr
<
nsFrameSelection
>
frameSelection
=
aSelection
-
>
GetFrameSelection
(
)
;
NS_ENSURE_TRUE
(
frameSelection
NS_ERROR_NULL_POINTER
)
;
nsPrevNextBidiLevels
levels
=
frameSelection
-
>
GetPrevNextBidiLevels
(
aSelectionPoint
.
GetContainerAsContent
(
)
aSelectionPoint
.
Offset
(
)
true
)
;
levelBefore
=
levels
.
mLevelBefore
;
levelAfter
=
levels
.
mLevelAfter
;
nsBidiLevel
currentCaretLevel
=
frameSelection
-
>
GetCaretBidiLevel
(
)
;
nsBidiLevel
levelOfDeletion
;
levelOfDeletion
=
(
nsIEditor
:
:
eNext
=
=
aAction
|
|
nsIEditor
:
:
eNextWord
=
=
aAction
)
?
levelAfter
:
levelBefore
;
if
(
currentCaretLevel
=
=
levelOfDeletion
)
{
return
NS_OK
;
}
if
(
!
mDeleteBidiImmediately
&
&
levelBefore
!
=
levelAfter
)
{
*
aCancel
=
true
;
}
frameSelection
-
>
SetCaretBidiLevel
(
levelOfDeletion
)
;
return
NS_OK
;
}
void
TextEditRules
:
:
UndefineCaretBidiLevel
(
Selection
*
aSelection
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
aSelection
-
>
GetFrameSelection
(
)
;
if
(
frameSelection
)
{
frameSelection
-
>
UndefineCaretBidiLevel
(
)
;
}
}
}
