#
ifndef
mozilla_EditAction_h
#
define
mozilla_EditAction_h
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
namespace
mozilla
{
enum
class
EditAction
{
eNone
eNotEditing
eInitializing
eInsertText
eInsertParagraphSeparator
eInsertLineBreak
eDeleteSelection
eDeleteBackward
eDeleteForward
eDeleteWordBackward
eDeleteWordForward
eDeleteToBeginningOfSoftLine
eDeleteToEndOfSoftLine
eDeleteByDrag
eStartComposition
eUpdateComposition
eCommitComposition
eCancelComposition
eDeleteByComposition
eUndo
eRedo
eSetTextDirection
eCut
eCopy
ePaste
ePasteAsQuotation
eDrop
eIndent
eOutdent
eReplaceText
eInsertTableRowElement
eRemoveTableRowElement
eInsertTableColumn
eRemoveTableColumn
eResizingElement
eResizeElement
eMovingElement
eMoveElement
eUnknown
eSetAttribute
eRemoveAttribute
eInsertNode
eRemoveNode
eInsertBlockElement
eInsertHorizontalRuleElement
eInsertLinkElement
eInsertUnorderedListElement
eInsertOrderedListElement
eRemoveUnorderedListElement
eRemoveOrderedListElement
eRemoveListElement
eInsertBlockquoteElement
eNormalizeTable
eRemoveTableElement
eDeleteTableCellContents
eInsertTableCellElement
eRemoveTableCellElement
eJoinTableCellElements
eSplitTableCellElement
eSetTableCellElementType
eSelectTableCell
eSelectTableRow
eSelectTableColumn
eSelectTable
eSelectAllTableCells
eGetCellIndexes
eGetTableSize
eGetCellAt
eGetCellDataAt
eGetFirstRow
eGetSelectedOrParentTableElement
eGetSelectedCellsType
eGetFirstSelectedCellInTable
eGetSelectedCells
eSetInlineStyleProperty
eRemoveInlineStyleProperty
eSetFontWeightProperty
eRemoveFontWeightProperty
eSetTextStyleProperty
eRemoveTextStyleProperty
eSetTextDecorationPropertyUnderline
eRemoveTextDecorationPropertyUnderline
eSetTextDecorationPropertyLineThrough
eRemoveTextDecorationPropertyLineThrough
eSetVerticalAlignPropertySuper
eRemoveVerticalAlignPropertySuper
eSetVerticalAlignPropertySub
eRemoveVerticalAlignPropertySub
eSetFontFamilyProperty
eRemoveFontFamilyProperty
eSetColorProperty
eRemoveColorProperty
eSetBackgroundColorPropertyInline
eRemoveBackgroundColorPropertyInline
eRemoveAllInlineStyleProperties
eIncrementFontSize
eDecrementFontSize
eSetAlignment
eAlignLeft
eAlignRight
eAlignCenter
eJustify
eSetBackgroundColor
eSetPositionToAbsoluteOrStatic
eIncreaseOrDecreaseZIndex
eEnableOrDisableCSS
eEnableOrDisableAbsolutePositionEditor
eEnableOrDisableResizer
eEnableOrDisableInlineTableEditingUI
eSetCharacterSet
eSetWrapWidth
eRewrap
eSetText
eSetHTML
eInsertHTML
eHidePassword
eCreatePaddingBRElementForEmptyEditor
}
;
enum
class
EditSubAction
:
int32_t
{
eNone
eUndo
eRedo
eInsertNode
eCreateNode
eDeleteNode
eSplitNode
eJoinNodes
eDeleteText
eInsertText
eInsertTextComingFromIME
eDeleteSelectedContent
eSetTextProperty
eRemoveTextProperty
eRemoveAllTextProperties
eComputeTextToOutput
eSetText
eInsertLineBreak
eInsertParagraphSeparator
eCreateOrChangeList
eIndent
eOutdent
eSetOrClearAlignment
eCreateOrRemoveBlock
eMergeBlockContents
eRemoveList
eCreateOrChangeDefinitionListItem
eInsertElement
eInsertQuotation
eInsertQuotedText
ePasteHTMLContent
eInsertHTMLSource
eReplaceHeadWithHTMLSource
eSetPositionToAbsolute
eSetPositionToStatic
eDecreaseZIndex
eIncreaseZIndex
eCreatePaddingBRElementForEmptyEditor
}
;
#
define
NS_EDIT_ACTION_CASES_ACCESSING_TABLE_DATA_WITHOUT_EDITING
\
mozilla
:
:
EditAction
:
:
eSelectTableCell
:
\
case
mozilla
:
:
EditAction
:
:
eSelectTableRow
:
\
case
mozilla
:
:
EditAction
:
:
eSelectTableColumn
:
\
case
mozilla
:
:
EditAction
:
:
eSelectTable
:
\
case
mozilla
:
:
EditAction
:
:
eSelectAllTableCells
:
\
case
mozilla
:
:
EditAction
:
:
eGetCellIndexes
:
\
case
mozilla
:
:
EditAction
:
:
eGetTableSize
:
\
case
mozilla
:
:
EditAction
:
:
eGetCellAt
:
\
case
mozilla
:
:
EditAction
:
:
eGetCellDataAt
:
\
case
mozilla
:
:
EditAction
:
:
eGetFirstRow
:
\
case
mozilla
:
:
EditAction
:
:
eGetSelectedOrParentTableElement
:
\
case
mozilla
:
:
EditAction
:
:
eGetSelectedCellsType
:
\
case
mozilla
:
:
EditAction
:
:
eGetFirstSelectedCellInTable
:
\
case
mozilla
:
:
EditAction
:
:
eGetSelectedCells
inline
EditorInputType
ToInputType
(
EditAction
aEditAction
)
{
switch
(
aEditAction
)
{
case
EditAction
:
:
eInsertText
:
return
EditorInputType
:
:
eInsertText
;
case
EditAction
:
:
eReplaceText
:
return
EditorInputType
:
:
eInsertReplacementText
;
case
EditAction
:
:
eInsertLineBreak
:
return
EditorInputType
:
:
eInsertLineBreak
;
case
EditAction
:
:
eInsertParagraphSeparator
:
return
EditorInputType
:
:
eInsertParagraph
;
case
EditAction
:
:
eInsertOrderedListElement
:
case
EditAction
:
:
eRemoveOrderedListElement
:
return
EditorInputType
:
:
eInsertOrderedList
;
case
EditAction
:
:
eInsertUnorderedListElement
:
case
EditAction
:
:
eRemoveUnorderedListElement
:
return
EditorInputType
:
:
eInsertUnorderedList
;
case
EditAction
:
:
eInsertHorizontalRuleElement
:
return
EditorInputType
:
:
eInsertHorizontalRule
;
case
EditAction
:
:
eDrop
:
return
EditorInputType
:
:
eInsertFromDrop
;
case
EditAction
:
:
ePaste
:
return
EditorInputType
:
:
eInsertFromPaste
;
case
EditAction
:
:
ePasteAsQuotation
:
return
EditorInputType
:
:
eInsertFromPasteAsQuotation
;
case
EditAction
:
:
eUpdateComposition
:
return
EditorInputType
:
:
eInsertCompositionText
;
case
EditAction
:
:
eCommitComposition
:
if
(
StaticPrefs
:
:
dom_input_events_conform_to_level_1
(
)
)
{
return
EditorInputType
:
:
eInsertCompositionText
;
}
return
EditorInputType
:
:
eInsertFromComposition
;
case
EditAction
:
:
eCancelComposition
:
if
(
StaticPrefs
:
:
dom_input_events_conform_to_level_1
(
)
)
{
return
EditorInputType
:
:
eInsertCompositionText
;
}
return
EditorInputType
:
:
eDeleteCompositionText
;
case
EditAction
:
:
eDeleteByComposition
:
if
(
StaticPrefs
:
:
dom_input_events_conform_to_level_1
(
)
)
{
return
EditorInputType
:
:
eInsertCompositionText
;
}
return
EditorInputType
:
:
eDeleteByComposition
;
case
EditAction
:
:
eInsertLinkElement
:
return
EditorInputType
:
:
eInsertLink
;
case
EditAction
:
:
eDeleteWordBackward
:
return
EditorInputType
:
:
eDeleteWordBackward
;
case
EditAction
:
:
eDeleteWordForward
:
return
EditorInputType
:
:
eDeleteWordForward
;
case
EditAction
:
:
eDeleteToBeginningOfSoftLine
:
return
EditorInputType
:
:
eDeleteSoftLineBackward
;
case
EditAction
:
:
eDeleteToEndOfSoftLine
:
return
EditorInputType
:
:
eDeleteSoftLineForward
;
case
EditAction
:
:
eDeleteByDrag
:
return
EditorInputType
:
:
eDeleteByDrag
;
case
EditAction
:
:
eCut
:
return
EditorInputType
:
:
eDeleteByCut
;
case
EditAction
:
:
eDeleteSelection
:
case
EditAction
:
:
eRemoveTableRowElement
:
case
EditAction
:
:
eRemoveTableColumn
:
case
EditAction
:
:
eRemoveTableElement
:
case
EditAction
:
:
eDeleteTableCellContents
:
case
EditAction
:
:
eRemoveTableCellElement
:
return
EditorInputType
:
:
eDeleteContent
;
case
EditAction
:
:
eDeleteBackward
:
return
EditorInputType
:
:
eDeleteContentBackward
;
case
EditAction
:
:
eDeleteForward
:
return
EditorInputType
:
:
eDeleteContentForward
;
case
EditAction
:
:
eUndo
:
return
EditorInputType
:
:
eHistoryUndo
;
case
EditAction
:
:
eRedo
:
return
EditorInputType
:
:
eHistoryRedo
;
case
EditAction
:
:
eSetFontWeightProperty
:
case
EditAction
:
:
eRemoveFontWeightProperty
:
return
EditorInputType
:
:
eFormatBold
;
case
EditAction
:
:
eSetTextStyleProperty
:
case
EditAction
:
:
eRemoveTextStyleProperty
:
return
EditorInputType
:
:
eFormatItalic
;
case
EditAction
:
:
eSetTextDecorationPropertyUnderline
:
case
EditAction
:
:
eRemoveTextDecorationPropertyUnderline
:
return
EditorInputType
:
:
eFormatUnderline
;
case
EditAction
:
:
eSetTextDecorationPropertyLineThrough
:
case
EditAction
:
:
eRemoveTextDecorationPropertyLineThrough
:
return
EditorInputType
:
:
eFormatStrikeThrough
;
case
EditAction
:
:
eSetVerticalAlignPropertySuper
:
case
EditAction
:
:
eRemoveVerticalAlignPropertySuper
:
return
EditorInputType
:
:
eFormatSuperscript
;
case
EditAction
:
:
eSetVerticalAlignPropertySub
:
case
EditAction
:
:
eRemoveVerticalAlignPropertySub
:
return
EditorInputType
:
:
eFormatSubscript
;
case
EditAction
:
:
eJustify
:
return
EditorInputType
:
:
eFormatJustifyFull
;
case
EditAction
:
:
eAlignCenter
:
return
EditorInputType
:
:
eFormatJustifyCenter
;
case
EditAction
:
:
eAlignRight
:
return
EditorInputType
:
:
eFormatJustifyRight
;
case
EditAction
:
:
eAlignLeft
:
return
EditorInputType
:
:
eFormatJustifyLeft
;
case
EditAction
:
:
eIndent
:
return
EditorInputType
:
:
eFormatIndent
;
case
EditAction
:
:
eOutdent
:
return
EditorInputType
:
:
eFormatOutdent
;
case
EditAction
:
:
eRemoveAllInlineStyleProperties
:
return
EditorInputType
:
:
eFormatRemove
;
case
EditAction
:
:
eSetTextDirection
:
return
EditorInputType
:
:
eFormatSetBlockTextDirection
;
case
EditAction
:
:
eSetBackgroundColorPropertyInline
:
case
EditAction
:
:
eRemoveBackgroundColorPropertyInline
:
return
EditorInputType
:
:
eFormatBackColor
;
case
EditAction
:
:
eSetColorProperty
:
case
EditAction
:
:
eRemoveColorProperty
:
return
EditorInputType
:
:
eFormatFontColor
;
case
EditAction
:
:
eSetFontFamilyProperty
:
case
EditAction
:
:
eRemoveFontFamilyProperty
:
return
EditorInputType
:
:
eFormatFontName
;
default
:
return
EditorInputType
:
:
eUnknown
;
}
}
inline
bool
MayEditActionDeleteAroundCollapsedSelection
(
const
EditAction
aEditAction
)
{
switch
(
aEditAction
)
{
case
EditAction
:
:
eDeleteSelection
:
case
EditAction
:
:
eDeleteBackward
:
case
EditAction
:
:
eDeleteForward
:
case
EditAction
:
:
eDeleteWordBackward
:
case
EditAction
:
:
eDeleteWordForward
:
case
EditAction
:
:
eDeleteToBeginningOfSoftLine
:
case
EditAction
:
:
eDeleteToEndOfSoftLine
:
return
true
;
default
:
return
false
;
}
}
inline
bool
IsEditActionInOrderToEditSomething
(
const
EditAction
aEditAction
)
{
switch
(
aEditAction
)
{
case
EditAction
:
:
eNotEditing
:
case
NS_EDIT_ACTION_CASES_ACCESSING_TABLE_DATA_WITHOUT_EDITING
:
return
false
;
default
:
return
true
;
}
}
inline
bool
IsEditActionTableEditing
(
const
EditAction
aEditAction
)
{
switch
(
aEditAction
)
{
case
EditAction
:
:
eInsertTableRowElement
:
case
EditAction
:
:
eRemoveTableRowElement
:
case
EditAction
:
:
eInsertTableColumn
:
case
EditAction
:
:
eRemoveTableColumn
:
case
EditAction
:
:
eRemoveTableElement
:
case
EditAction
:
:
eRemoveTableCellElement
:
case
EditAction
:
:
eDeleteTableCellContents
:
case
EditAction
:
:
eInsertTableCellElement
:
case
EditAction
:
:
eJoinTableCellElements
:
case
EditAction
:
:
eSplitTableCellElement
:
case
EditAction
:
:
eSetTableCellElementType
:
return
true
;
default
:
return
false
;
}
}
inline
bool
MayEditActionDeleteSelection
(
const
EditAction
aEditAction
)
{
switch
(
aEditAction
)
{
case
EditAction
:
:
eNone
:
case
EditAction
:
:
eNotEditing
:
case
EditAction
:
:
eInitializing
:
case
NS_EDIT_ACTION_CASES_ACCESSING_TABLE_DATA_WITHOUT_EDITING
:
return
false
;
case
EditAction
:
:
eInsertText
:
case
EditAction
:
:
eInsertParagraphSeparator
:
case
EditAction
:
:
eInsertLineBreak
:
case
EditAction
:
:
eDeleteSelection
:
case
EditAction
:
:
eDeleteBackward
:
case
EditAction
:
:
eDeleteForward
:
case
EditAction
:
:
eDeleteWordBackward
:
case
EditAction
:
:
eDeleteWordForward
:
case
EditAction
:
:
eDeleteToBeginningOfSoftLine
:
case
EditAction
:
:
eDeleteToEndOfSoftLine
:
case
EditAction
:
:
eDeleteByDrag
:
return
true
;
case
EditAction
:
:
eStartComposition
:
return
false
;
case
EditAction
:
:
eUpdateComposition
:
case
EditAction
:
:
eCommitComposition
:
case
EditAction
:
:
eCancelComposition
:
case
EditAction
:
:
eDeleteByComposition
:
return
true
;
case
EditAction
:
:
eUndo
:
case
EditAction
:
:
eRedo
:
case
EditAction
:
:
eSetTextDirection
:
return
false
;
case
EditAction
:
:
eCut
:
return
true
;
case
EditAction
:
:
eCopy
:
return
false
;
case
EditAction
:
:
ePaste
:
case
EditAction
:
:
ePasteAsQuotation
:
return
true
;
case
EditAction
:
:
eDrop
:
return
false
;
case
EditAction
:
:
eIndent
:
case
EditAction
:
:
eOutdent
:
return
false
;
case
EditAction
:
:
eInsertTableRowElement
:
case
EditAction
:
:
eRemoveTableRowElement
:
case
EditAction
:
:
eInsertTableColumn
:
case
EditAction
:
:
eRemoveTableColumn
:
case
EditAction
:
:
eResizingElement
:
case
EditAction
:
:
eResizeElement
:
case
EditAction
:
:
eMovingElement
:
case
EditAction
:
:
eMoveElement
:
case
EditAction
:
:
eUnknown
:
case
EditAction
:
:
eSetAttribute
:
case
EditAction
:
:
eRemoveAttribute
:
case
EditAction
:
:
eRemoveNode
:
case
EditAction
:
:
eInsertBlockElement
:
return
false
;
case
EditAction
:
:
eReplaceText
:
case
EditAction
:
:
eInsertNode
:
case
EditAction
:
:
eInsertHorizontalRuleElement
:
return
true
;
case
EditAction
:
:
eInsertLinkElement
:
case
EditAction
:
:
eInsertUnorderedListElement
:
case
EditAction
:
:
eInsertOrderedListElement
:
case
EditAction
:
:
eRemoveUnorderedListElement
:
case
EditAction
:
:
eRemoveOrderedListElement
:
case
EditAction
:
:
eRemoveListElement
:
case
EditAction
:
:
eInsertBlockquoteElement
:
case
EditAction
:
:
eNormalizeTable
:
case
EditAction
:
:
eRemoveTableElement
:
case
EditAction
:
:
eRemoveTableCellElement
:
case
EditAction
:
:
eDeleteTableCellContents
:
case
EditAction
:
:
eInsertTableCellElement
:
case
EditAction
:
:
eJoinTableCellElements
:
case
EditAction
:
:
eSplitTableCellElement
:
case
EditAction
:
:
eSetTableCellElementType
:
case
EditAction
:
:
eSetInlineStyleProperty
:
case
EditAction
:
:
eRemoveInlineStyleProperty
:
case
EditAction
:
:
eSetFontWeightProperty
:
case
EditAction
:
:
eRemoveFontWeightProperty
:
case
EditAction
:
:
eSetTextStyleProperty
:
case
EditAction
:
:
eRemoveTextStyleProperty
:
case
EditAction
:
:
eSetTextDecorationPropertyUnderline
:
case
EditAction
:
:
eRemoveTextDecorationPropertyUnderline
:
case
EditAction
:
:
eSetTextDecorationPropertyLineThrough
:
case
EditAction
:
:
eRemoveTextDecorationPropertyLineThrough
:
case
EditAction
:
:
eSetVerticalAlignPropertySuper
:
case
EditAction
:
:
eRemoveVerticalAlignPropertySuper
:
case
EditAction
:
:
eSetVerticalAlignPropertySub
:
case
EditAction
:
:
eRemoveVerticalAlignPropertySub
:
case
EditAction
:
:
eSetFontFamilyProperty
:
case
EditAction
:
:
eRemoveFontFamilyProperty
:
case
EditAction
:
:
eSetColorProperty
:
case
EditAction
:
:
eRemoveColorProperty
:
case
EditAction
:
:
eSetBackgroundColorPropertyInline
:
case
EditAction
:
:
eRemoveBackgroundColorPropertyInline
:
case
EditAction
:
:
eRemoveAllInlineStyleProperties
:
case
EditAction
:
:
eIncrementFontSize
:
case
EditAction
:
:
eDecrementFontSize
:
case
EditAction
:
:
eSetAlignment
:
case
EditAction
:
:
eAlignLeft
:
case
EditAction
:
:
eAlignRight
:
case
EditAction
:
:
eAlignCenter
:
case
EditAction
:
:
eJustify
:
case
EditAction
:
:
eSetBackgroundColor
:
case
EditAction
:
:
eSetPositionToAbsoluteOrStatic
:
case
EditAction
:
:
eIncreaseOrDecreaseZIndex
:
return
false
;
case
EditAction
:
:
eEnableOrDisableCSS
:
case
EditAction
:
:
eEnableOrDisableAbsolutePositionEditor
:
case
EditAction
:
:
eEnableOrDisableResizer
:
case
EditAction
:
:
eEnableOrDisableInlineTableEditingUI
:
case
EditAction
:
:
eSetCharacterSet
:
case
EditAction
:
:
eSetWrapWidth
:
return
false
;
case
EditAction
:
:
eRewrap
:
case
EditAction
:
:
eSetText
:
case
EditAction
:
:
eSetHTML
:
case
EditAction
:
:
eInsertHTML
:
return
true
;
case
EditAction
:
:
eHidePassword
:
case
EditAction
:
:
eCreatePaddingBRElementForEmptyEditor
:
return
false
;
}
return
false
;
}
inline
bool
MayEditActionRequireLayout
(
const
EditAction
aEditAction
)
{
switch
(
aEditAction
)
{
case
EditAction
:
:
eInsertTableRowElement
:
case
EditAction
:
:
eRemoveTableRowElement
:
case
EditAction
:
:
eInsertTableColumn
:
case
EditAction
:
:
eRemoveTableColumn
:
case
EditAction
:
:
eRemoveTableElement
:
case
EditAction
:
:
eRemoveTableCellElement
:
case
EditAction
:
:
eDeleteTableCellContents
:
case
EditAction
:
:
eInsertTableCellElement
:
case
EditAction
:
:
eJoinTableCellElements
:
case
EditAction
:
:
eSplitTableCellElement
:
case
EditAction
:
:
eSetTableCellElementType
:
case
NS_EDIT_ACTION_CASES_ACCESSING_TABLE_DATA_WITHOUT_EDITING
:
return
true
;
default
:
return
false
;
}
}
}
inline
bool
operator
!
(
const
mozilla
:
:
EditSubAction
&
aEditSubAction
)
{
return
aEditSubAction
=
=
mozilla
:
:
EditSubAction
:
:
eNone
;
}
#
endif
