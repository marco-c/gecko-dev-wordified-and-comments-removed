#
ifndef
TypeInState_h
#
define
TypeInState_h
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nscore
.
h
"
#
ifdef
SetProp
#
undef
SetProp
#
endif
class
nsAtom
;
class
nsIDOMNode
;
namespace
mozilla
{
class
HTMLEditRules
;
namespace
dom
{
class
Selection
;
}
struct
PropItem
{
nsAtom
*
tag
;
nsAtom
*
attr
;
nsString
value
;
PropItem
(
)
;
PropItem
(
nsAtom
*
aTag
nsAtom
*
aAttr
const
nsAString
&
aValue
)
;
~
PropItem
(
)
;
}
;
class
TypeInState
final
{
public
:
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
TypeInState
)
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
TypeInState
)
TypeInState
(
)
;
void
Reset
(
)
;
nsresult
UpdateSelState
(
dom
:
:
Selection
*
aSelection
)
;
void
OnSelectionChange
(
dom
:
:
Selection
&
aSelection
)
;
void
SetProp
(
nsAtom
*
aProp
nsAtom
*
aAttr
const
nsAString
&
aValue
)
;
void
ClearAllProps
(
)
;
void
ClearProp
(
nsAtom
*
aProp
nsAtom
*
aAttr
)
;
UniquePtr
<
PropItem
>
TakeClearProperty
(
)
;
UniquePtr
<
PropItem
>
TakeSetProperty
(
)
;
int32_t
TakeRelativeFontSize
(
)
;
void
GetTypingState
(
bool
&
isSet
bool
&
theSetting
nsAtom
*
aProp
nsAtom
*
aAttr
=
nullptr
nsString
*
outValue
=
nullptr
)
;
static
bool
FindPropInList
(
nsAtom
*
aProp
nsAtom
*
aAttr
nsAString
*
outValue
nsTArray
<
PropItem
*
>
&
aList
int32_t
&
outIndex
)
;
protected
:
virtual
~
TypeInState
(
)
;
void
RemovePropFromSetList
(
nsAtom
*
aProp
nsAtom
*
aAttr
)
;
void
RemovePropFromClearedList
(
nsAtom
*
aProp
nsAtom
*
aAttr
)
;
bool
IsPropSet
(
nsAtom
*
aProp
nsAtom
*
aAttr
nsAString
*
outValue
)
;
bool
IsPropSet
(
nsAtom
*
aProp
nsAtom
*
aAttr
nsAString
*
outValue
int32_t
&
outIndex
)
;
bool
IsPropCleared
(
nsAtom
*
aProp
nsAtom
*
aAttr
)
;
bool
IsPropCleared
(
nsAtom
*
aProp
nsAtom
*
aAttr
int32_t
&
outIndex
)
;
nsTArray
<
PropItem
*
>
mSetArray
;
nsTArray
<
PropItem
*
>
mClearedArray
;
int32_t
mRelativeFontSize
;
nsCOMPtr
<
nsIDOMNode
>
mLastSelectionContainer
;
int32_t
mLastSelectionOffset
;
friend
class
HTMLEditRules
;
}
;
}
#
endif
