#
ifndef
mozilla_TypeInState_h
#
define
mozilla_TypeInState_h
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
mozilla
/
EditorForwards
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nscore
.
h
"
class
nsINode
;
namespace
mozilla
{
namespace
dom
{
class
MouseEvent
;
class
Selection
;
}
enum
class
SpecifiedStyle
:
uint8_t
{
Preserve
Discard
}
;
struct
PropItem
{
MOZ_KNOWN_LIVE
nsStaticAtom
*
const
mTag
=
nullptr
;
MOZ_KNOWN_LIVE
const
RefPtr
<
nsAtom
>
mAttribute
;
nsString
mAttributeValueOrCSSValue
;
const
SpecifiedStyle
mSpecifiedStyle
=
SpecifiedStyle
:
:
Preserve
;
PropItem
(
)
=
delete
;
PropItem
(
nsStaticAtom
*
aTag
nsAtom
*
aAttribute
const
nsAString
&
aValue
SpecifiedStyle
aSpecifiedStyle
=
SpecifiedStyle
:
:
Preserve
)
:
mTag
(
aTag
)
mAttribute
(
aAttribute
!
=
nsGkAtoms
:
:
_empty
?
aAttribute
:
nullptr
)
mAttributeValueOrCSSValue
(
aValue
)
mSpecifiedStyle
(
aSpecifiedStyle
)
{
MOZ_COUNT_CTOR
(
PropItem
)
;
}
MOZ_COUNTED_DTOR
(
PropItem
)
}
;
class
StyleCache
final
{
public
:
StyleCache
(
)
=
delete
;
StyleCache
(
nsStaticAtom
&
aTag
nsStaticAtom
*
aAttribute
const
nsAString
&
aValue
)
:
mTag
(
aTag
)
mAttribute
(
aAttribute
)
mAttributeValueOrCSSValue
(
aValue
)
{
}
MOZ_KNOWN_LIVE
nsStaticAtom
&
TagRef
(
)
const
{
return
mTag
;
}
MOZ_KNOWN_LIVE
nsStaticAtom
*
GetAttribute
(
)
const
{
return
mAttribute
;
}
const
nsString
&
AttributeValueOrCSSValueRef
(
)
const
{
return
mAttributeValueOrCSSValue
;
}
private
:
MOZ_KNOWN_LIVE
nsStaticAtom
&
mTag
;
MOZ_KNOWN_LIVE
nsStaticAtom
*
const
mAttribute
;
const
nsString
mAttributeValueOrCSSValue
;
}
;
class
MOZ_STACK_CLASS
AutoStyleCacheArray
final
:
public
AutoTArray
<
StyleCache
21
>
{
public
:
index_type
IndexOf
(
const
nsStaticAtom
&
aTag
const
nsStaticAtom
*
aAttribute
)
const
{
for
(
index_type
index
=
0
;
index
<
Length
(
)
;
+
+
index
)
{
const
StyleCache
&
styleCache
=
ElementAt
(
index
)
;
if
(
&
styleCache
.
TagRef
(
)
=
=
&
aTag
&
&
styleCache
.
GetAttribute
(
)
=
=
aAttribute
)
{
return
index
;
}
}
return
NoIndex
;
}
}
;
class
TypeInState
final
{
public
:
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
TypeInState
)
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
TypeInState
)
TypeInState
(
)
;
void
Reset
(
)
;
nsresult
UpdateSelState
(
const
HTMLEditor
&
aHTMLEditor
)
;
void
PreHandleMouseEvent
(
const
dom
:
:
MouseEvent
&
aMouseDownOrUpEvent
)
;
void
PreHandleSelectionChangeCommand
(
Command
aCommand
)
;
void
PostHandleSelectionChangeCommand
(
const
HTMLEditor
&
aHTMLEditor
Command
aCommand
)
;
void
OnSelectionChange
(
const
HTMLEditor
&
aHTMLEditor
int16_t
aReason
)
;
void
PreserveStyle
(
nsStaticAtom
&
aHTMLProperty
nsAtom
*
aAttribute
const
nsAString
&
aAttributeValueOrCSSValue
)
;
void
PreserveStyles
(
const
nsTArray
<
EditorInlineStyleAndValue
>
&
aStylesToPreserve
)
;
void
PreserveStyle
(
const
StyleCache
&
aStyleToPreserve
)
{
PreserveStyle
(
aStyleToPreserve
.
TagRef
(
)
aStyleToPreserve
.
GetAttribute
(
)
aStyleToPreserve
.
AttributeValueOrCSSValueRef
(
)
)
;
}
void
ClearStyle
(
nsStaticAtom
&
aHTMLProperty
nsAtom
*
aAttribute
)
{
ClearStyleInternal
(
&
aHTMLProperty
aAttribute
)
;
}
void
ClearStyles
(
const
nsTArray
<
EditorInlineStyle
>
&
aStylesToClear
)
;
void
ClearAllStyles
(
)
{
ClearStyleInternal
(
nullptr
nullptr
)
;
}
void
ClearLinkAndItsSpecifiedStyle
(
)
{
ClearStyleInternal
(
nsGkAtoms
:
:
a
nullptr
SpecifiedStyle
:
:
Discard
)
;
}
UniquePtr
<
PropItem
>
TakeClearingStyle
(
)
{
if
(
mClearingStyles
.
IsEmpty
(
)
)
{
return
nullptr
;
}
return
mClearingStyles
.
PopLastElement
(
)
;
}
UniquePtr
<
PropItem
>
TakePreservedStyle
(
)
{
if
(
mPreservingStyles
.
IsEmpty
(
)
)
{
return
nullptr
;
}
return
mPreservingStyles
.
PopLastElement
(
)
;
}
int32_t
TakeRelativeFontSize
(
)
;
void
GetTypingState
(
bool
&
isSet
bool
&
theSetting
nsStaticAtom
&
aProp
nsAtom
*
aAttr
=
nullptr
nsString
*
aOutValue
=
nullptr
)
;
protected
:
virtual
~
TypeInState
(
)
;
void
ClearStyleInternal
(
nsStaticAtom
*
aHTMLProperty
nsAtom
*
aAttribute
SpecifiedStyle
aSpecifiedStyle
=
SpecifiedStyle
:
:
Preserve
)
;
void
CancelPreservingStyle
(
nsStaticAtom
*
aHTMLProperty
nsAtom
*
aAttribute
)
;
void
CancelClearingStyle
(
nsStaticAtom
&
aHTMLProperty
nsAtom
*
aAttribute
)
;
Maybe
<
size_t
>
IndexOfPreservingStyle
(
nsStaticAtom
&
aHTMLProperty
nsAtom
*
aAttribute
nsAString
*
aOutValue
=
nullptr
)
const
{
return
IndexOfStyleInArray
(
&
aHTMLProperty
aAttribute
aOutValue
mPreservingStyles
)
;
}
Maybe
<
size_t
>
IndexOfClearingStyle
(
nsStaticAtom
*
aHTMLProperty
nsAtom
*
aAttribute
)
const
{
return
IndexOfStyleInArray
(
aHTMLProperty
aAttribute
nullptr
mClearingStyles
)
;
}
bool
IsLinkStyleSet
(
)
const
{
return
IndexOfPreservingStyle
(
*
nsGkAtoms
:
:
a
nullptr
)
.
isSome
(
)
;
}
bool
IsExplicitlyLinkStyleCleared
(
)
const
{
return
IndexOfClearingStyle
(
nsGkAtoms
:
:
a
nullptr
)
.
isSome
(
)
;
}
bool
IsOnlyLinkStyleCleared
(
)
const
{
return
mClearingStyles
.
Length
(
)
=
=
1
&
&
IsExplicitlyLinkStyleCleared
(
)
;
}
bool
IsStyleCleared
(
nsStaticAtom
*
aHTMLProperty
nsAtom
*
aAttribute
)
const
{
return
IndexOfClearingStyle
(
aHTMLProperty
aAttribute
)
.
isSome
(
)
|
|
AreAllStylesCleared
(
)
;
}
bool
AreAllStylesCleared
(
)
const
{
return
IndexOfClearingStyle
(
nullptr
nullptr
)
.
isSome
(
)
;
}
bool
AreSomeStylesSet
(
)
const
{
return
!
mPreservingStyles
.
IsEmpty
(
)
;
}
bool
AreSomeStylesCleared
(
)
const
{
return
!
mClearingStyles
.
IsEmpty
(
)
;
}
static
Maybe
<
size_t
>
IndexOfStyleInArray
(
nsStaticAtom
*
aHTMLProperty
nsAtom
*
aAttribute
nsAString
*
aOutValue
const
nsTArray
<
UniquePtr
<
PropItem
>
>
&
aArray
)
;
nsTArray
<
UniquePtr
<
PropItem
>
>
mPreservingStyles
;
nsTArray
<
UniquePtr
<
PropItem
>
>
mClearingStyles
;
EditorDOMPoint
mLastSelectionPoint
;
int32_t
mRelativeFontSize
;
Command
mLastSelectionCommand
;
bool
mMouseDownFiredInLinkElement
;
bool
mMouseUpFiredInLinkElement
;
}
;
}
#
endif
