#
ifndef
EditAggregateTransaction_h
#
define
EditAggregateTransaction_h
#
include
"
mozilla
/
EditTransactionBase
.
h
"
#
include
"
mozilla
/
OwningNonNull
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nscore
.
h
"
namespace
mozilla
{
class
EditAggregateTransaction
:
public
EditTransactionBase
{
protected
:
EditAggregateTransaction
(
)
=
default
;
public
:
static
already_AddRefed
<
EditAggregateTransaction
>
Create
(
)
{
RefPtr
<
EditAggregateTransaction
>
transaction
=
new
EditAggregateTransaction
(
)
;
return
transaction
.
forget
(
)
;
}
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
EditAggregateTransaction
EditTransactionBase
)
NS_DECL_EDITTRANSACTIONBASE
MOZ_CAN_RUN_SCRIPT
NS_IMETHOD
RedoTransaction
(
)
override
;
NS_IMETHOD
Merge
(
nsITransaction
*
aOtherTransaction
bool
*
aDidMerge
)
override
;
NS_IMETHOD
AppendChild
(
EditTransactionBase
*
aTransaction
)
;
NS_IMETHOD
GetName
(
nsAtom
*
*
aName
)
;
const
nsTArray
<
OwningNonNull
<
EditTransactionBase
>
>
&
ChildTransactions
(
)
const
{
return
mChildren
;
}
protected
:
virtual
~
EditAggregateTransaction
(
)
=
default
;
nsTArray
<
OwningNonNull
<
EditTransactionBase
>
>
mChildren
;
RefPtr
<
nsAtom
>
mName
;
}
;
}
#
endif
