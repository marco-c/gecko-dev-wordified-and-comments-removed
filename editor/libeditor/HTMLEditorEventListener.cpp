#
include
"
HTMLEditorEventListener
.
h
"
#
include
"
HTMLEditUtils
.
h
"
#
include
"
mozilla
/
HTMLEditor
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
EventTarget
.
h
"
#
include
"
mozilla
/
dom
/
MouseEvent
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIDOMElement
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
nsRange
.
h
"
namespace
mozilla
{
using
namespace
dom
;
nsresult
HTMLEditorEventListener
:
:
Connect
(
EditorBase
*
aEditorBase
)
{
if
(
NS_WARN_IF
(
!
aEditorBase
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
HTMLEditor
*
htmlEditor
=
aEditorBase
-
>
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
return
EditorEventListener
:
:
Connect
(
htmlEditor
)
;
}
nsresult
HTMLEditorEventListener
:
:
MouseUp
(
MouseEvent
*
aMouseEvent
)
{
if
(
DetachedFromEditor
(
)
)
{
return
NS_OK
;
}
HTMLEditor
*
htmlEditor
=
mEditorBase
-
>
AsHTMLEditor
(
)
;
MOZ_ASSERT
(
htmlEditor
)
;
RefPtr
<
EventTarget
>
target
=
aMouseEvent
-
>
GetTarget
(
)
;
NS_ENSURE_TRUE
(
target
NS_ERROR_NULL_POINTER
)
;
nsCOMPtr
<
nsIDOMElement
>
element
=
do_QueryInterface
(
target
)
;
int32_t
clientX
=
aMouseEvent
-
>
ClientX
(
)
;
int32_t
clientY
=
aMouseEvent
-
>
ClientY
(
)
;
htmlEditor
-
>
OnMouseUp
(
clientX
clientY
element
)
;
return
EditorEventListener
:
:
MouseUp
(
aMouseEvent
)
;
}
nsresult
HTMLEditorEventListener
:
:
MouseDown
(
MouseEvent
*
aMouseEvent
)
{
if
(
NS_WARN_IF
(
!
aMouseEvent
)
|
|
DetachedFromEditor
(
)
)
{
return
NS_OK
;
}
if
(
!
EnsureCommitCompoisition
(
)
)
{
return
NS_OK
;
}
WidgetMouseEvent
*
mousedownEvent
=
aMouseEvent
-
>
WidgetEventPtr
(
)
-
>
AsMouseEvent
(
)
;
HTMLEditor
*
htmlEditor
=
mEditorBase
-
>
AsHTMLEditor
(
)
;
MOZ_ASSERT
(
htmlEditor
)
;
if
(
!
htmlEditor
-
>
IsAcceptableInputEvent
(
mousedownEvent
)
)
{
return
EditorEventListener
:
:
MouseDown
(
aMouseEvent
)
;
}
int16_t
buttonNumber
=
aMouseEvent
-
>
Button
(
)
;
bool
isContextClick
=
buttonNumber
=
=
2
;
int32_t
clickCount
=
aMouseEvent
-
>
Detail
(
)
;
RefPtr
<
EventTarget
>
target
=
aMouseEvent
-
>
GetExplicitOriginalTarget
(
)
;
NS_ENSURE_TRUE
(
target
NS_ERROR_NULL_POINTER
)
;
nsCOMPtr
<
nsIDOMElement
>
element
=
do_QueryInterface
(
target
)
;
if
(
isContextClick
|
|
(
buttonNumber
=
=
0
&
&
clickCount
=
=
2
)
)
{
RefPtr
<
Selection
>
selection
=
htmlEditor
-
>
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_OK
)
;
nsCOMPtr
<
nsINode
>
parent
=
aMouseEvent
-
>
GetRangeParent
(
)
;
NS_ENSURE_TRUE
(
parent
NS_ERROR_FAILURE
)
;
int32_t
offset
=
aMouseEvent
-
>
RangeOffset
(
)
;
bool
nodeIsInSelection
=
false
;
if
(
isContextClick
&
&
!
selection
-
>
Collapsed
(
)
)
{
uint32_t
rangeCount
=
selection
-
>
RangeCount
(
)
;
for
(
uint32_t
i
=
0
;
i
<
rangeCount
;
i
+
+
)
{
RefPtr
<
nsRange
>
range
=
selection
-
>
GetRangeAt
(
i
)
;
if
(
!
range
)
{
continue
;
}
IgnoredErrorResult
err
;
nodeIsInSelection
=
range
-
>
IsPointInRange
(
*
parent
offset
err
)
&
&
!
err
.
Failed
(
)
;
if
(
nodeIsInSelection
)
{
break
;
}
}
}
nsCOMPtr
<
nsINode
>
node
=
do_QueryInterface
(
target
)
;
if
(
node
&
&
!
nodeIsInSelection
)
{
if
(
!
element
)
{
if
(
isContextClick
)
{
selection
-
>
Collapse
(
parent
offset
)
;
}
else
{
RefPtr
<
Element
>
linkElement
=
htmlEditor
-
>
GetElementOrParentByTagName
(
NS_LITERAL_STRING
(
"
href
"
)
node
)
;
if
(
linkElement
)
{
element
=
do_QueryInterface
(
linkElement
)
;
}
}
}
if
(
element
)
{
if
(
isContextClick
&
&
!
HTMLEditUtils
:
:
IsImage
(
node
)
)
{
selection
-
>
Collapse
(
parent
offset
)
;
}
else
{
htmlEditor
-
>
SelectElement
(
element
)
;
}
if
(
DetachedFromEditor
(
)
)
{
return
NS_OK
;
}
}
}
htmlEditor
-
>
CheckSelectionStateForAnonymousButtons
(
selection
)
;
if
(
element
|
|
isContextClick
)
{
aMouseEvent
-
>
PreventDefault
(
)
;
return
NS_OK
;
}
}
else
if
(
!
isContextClick
&
&
buttonNumber
=
=
0
&
&
clickCount
=
=
1
)
{
int32_t
clientX
=
aMouseEvent
-
>
ClientX
(
)
;
int32_t
clientY
=
aMouseEvent
-
>
ClientY
(
)
;
htmlEditor
-
>
OnMouseDown
(
clientX
clientY
element
aMouseEvent
)
;
}
return
EditorEventListener
:
:
MouseDown
(
aMouseEvent
)
;
}
nsresult
HTMLEditorEventListener
:
:
MouseClick
(
MouseEvent
*
aMouseEvent
)
{
if
(
NS_WARN_IF
(
DetachedFromEditor
(
)
)
)
{
return
NS_OK
;
}
RefPtr
<
EventTarget
>
target
=
aMouseEvent
-
>
GetTarget
(
)
;
NS_ENSURE_TRUE
(
target
NS_ERROR_NULL_POINTER
)
;
nsCOMPtr
<
Element
>
element
=
do_QueryInterface
(
target
)
;
if
(
NS_WARN_IF
(
!
element
)
)
{
return
NS_ERROR_FAILURE
;
}
RefPtr
<
HTMLEditor
>
htmlEditor
=
mEditorBase
-
>
AsHTMLEditor
(
)
;
MOZ_ASSERT
(
htmlEditor
)
;
htmlEditor
-
>
DoInlineTableEditingAction
(
*
element
)
;
if
(
htmlEditor
-
>
Destroyed
(
)
)
{
return
NS_OK
;
}
return
EditorEventListener
:
:
MouseClick
(
aMouseEvent
)
;
}
}
