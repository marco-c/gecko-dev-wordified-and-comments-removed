#
include
"
mozilla
/
ChangeStyleTransaction
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsICSSDeclaration
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsStyledElement
.
h
"
#
include
"
nsUnicharUtils
.
h
"
namespace
mozilla
{
using
namespace
dom
;
already_AddRefed
<
ChangeStyleTransaction
>
ChangeStyleTransaction
:
:
Create
(
Element
&
aElement
nsAtom
&
aProperty
const
nsAString
&
aValue
)
{
RefPtr
<
ChangeStyleTransaction
>
transaction
=
new
ChangeStyleTransaction
(
aElement
aProperty
aValue
false
)
;
return
transaction
.
forget
(
)
;
}
already_AddRefed
<
ChangeStyleTransaction
>
ChangeStyleTransaction
:
:
CreateToRemove
(
Element
&
aElement
nsAtom
&
aProperty
const
nsAString
&
aValue
)
{
RefPtr
<
ChangeStyleTransaction
>
transaction
=
new
ChangeStyleTransaction
(
aElement
aProperty
aValue
true
)
;
return
transaction
.
forget
(
)
;
}
ChangeStyleTransaction
:
:
ChangeStyleTransaction
(
Element
&
aElement
nsAtom
&
aProperty
const
nsAString
&
aValue
bool
aRemove
)
:
EditTransactionBase
(
)
mElement
(
&
aElement
)
mProperty
(
&
aProperty
)
mValue
(
aValue
)
mRemoveProperty
(
aRemove
)
mUndoValue
(
)
mRedoValue
(
)
mUndoAttributeWasSet
(
false
)
mRedoAttributeWasSet
(
false
)
{
}
#
define
kNullCh
(
char16_t
(
'
\
0
'
)
)
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
ChangeStyleTransaction
EditTransactionBase
mElement
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ChangeStyleTransaction
)
NS_INTERFACE_MAP_END_INHERITING
(
EditTransactionBase
)
NS_IMPL_ADDREF_INHERITED
(
ChangeStyleTransaction
EditTransactionBase
)
NS_IMPL_RELEASE_INHERITED
(
ChangeStyleTransaction
EditTransactionBase
)
ChangeStyleTransaction
:
:
~
ChangeStyleTransaction
(
)
{
}
bool
ChangeStyleTransaction
:
:
ValueIncludes
(
const
nsAString
&
aValueList
const
nsAString
&
aValue
)
{
nsAutoString
valueList
(
aValueList
)
;
bool
result
=
false
;
valueList
.
Append
(
kNullCh
)
;
char16_t
*
value
=
ToNewUnicode
(
aValue
)
;
char16_t
*
start
=
valueList
.
BeginWriting
(
)
;
char16_t
*
end
=
start
;
while
(
kNullCh
!
=
*
start
)
{
while
(
kNullCh
!
=
*
start
&
&
nsCRT
:
:
IsAsciiSpace
(
*
start
)
)
{
start
+
+
;
}
end
=
start
;
while
(
kNullCh
!
=
*
end
&
&
!
nsCRT
:
:
IsAsciiSpace
(
*
end
)
)
{
end
+
+
;
}
*
end
=
kNullCh
;
if
(
start
<
end
)
{
if
(
nsDependentString
(
value
)
.
Equals
(
nsDependentString
(
start
)
nsCaseInsensitiveStringComparator
(
)
)
)
{
result
=
true
;
break
;
}
}
start
=
+
+
end
;
}
free
(
value
)
;
return
result
;
}
void
ChangeStyleTransaction
:
:
RemoveValueFromListOfValues
(
nsAString
&
aValues
const
nsAString
&
aRemoveValue
)
{
nsAutoString
classStr
(
aValues
)
;
nsAutoString
outString
;
classStr
.
Append
(
kNullCh
)
;
char16_t
*
start
=
classStr
.
BeginWriting
(
)
;
char16_t
*
end
=
start
;
while
(
kNullCh
!
=
*
start
)
{
while
(
kNullCh
!
=
*
start
&
&
nsCRT
:
:
IsAsciiSpace
(
*
start
)
)
{
start
+
+
;
}
end
=
start
;
while
(
kNullCh
!
=
*
end
&
&
!
nsCRT
:
:
IsAsciiSpace
(
*
end
)
)
{
end
+
+
;
}
*
end
=
kNullCh
;
if
(
start
<
end
&
&
!
aRemoveValue
.
Equals
(
start
)
)
{
outString
.
Append
(
start
)
;
outString
.
Append
(
char16_t
(
'
'
)
)
;
}
start
=
+
+
end
;
}
aValues
.
Assign
(
outString
)
;
}
NS_IMETHODIMP
ChangeStyleTransaction
:
:
DoTransaction
(
)
{
nsCOMPtr
<
nsStyledElement
>
inlineStyles
=
do_QueryInterface
(
mElement
)
;
NS_ENSURE_TRUE
(
inlineStyles
NS_ERROR_NULL_POINTER
)
;
nsCOMPtr
<
nsICSSDeclaration
>
cssDecl
=
inlineStyles
-
>
Style
(
)
;
nsAutoString
propertyNameString
;
mProperty
-
>
ToString
(
propertyNameString
)
;
mUndoAttributeWasSet
=
mElement
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
style
)
;
nsAutoString
values
;
nsresult
rv
=
cssDecl
-
>
GetPropertyValue
(
propertyNameString
values
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mUndoValue
.
Assign
(
values
)
;
bool
multiple
=
AcceptsMoreThanOneValue
(
*
mProperty
)
;
if
(
mRemoveProperty
)
{
nsAutoString
returnString
;
if
(
multiple
)
{
RemoveValueFromListOfValues
(
values
NS_LITERAL_STRING
(
"
none
"
)
)
;
RemoveValueFromListOfValues
(
values
mValue
)
;
if
(
values
.
IsEmpty
(
)
)
{
rv
=
cssDecl
-
>
RemoveProperty
(
propertyNameString
returnString
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
else
{
nsAutoString
priority
;
cssDecl
-
>
GetPropertyPriority
(
propertyNameString
priority
)
;
rv
=
cssDecl
-
>
SetProperty
(
propertyNameString
values
priority
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
else
{
rv
=
cssDecl
-
>
RemoveProperty
(
propertyNameString
returnString
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
else
{
nsAutoString
priority
;
cssDecl
-
>
GetPropertyPriority
(
propertyNameString
priority
)
;
if
(
multiple
)
{
AddValueToMultivalueProperty
(
values
mValue
)
;
}
else
{
values
.
Assign
(
mValue
)
;
}
rv
=
cssDecl
-
>
SetProperty
(
propertyNameString
values
priority
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
uint32_t
length
;
rv
=
cssDecl
-
>
GetLength
(
&
length
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
length
)
{
rv
=
mElement
-
>
UnsetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
style
true
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
else
{
mRedoAttributeWasSet
=
true
;
}
return
cssDecl
-
>
GetPropertyValue
(
propertyNameString
mRedoValue
)
;
}
nsresult
ChangeStyleTransaction
:
:
SetStyle
(
bool
aAttributeWasSet
nsAString
&
aValue
)
{
if
(
aAttributeWasSet
)
{
nsAutoString
propertyNameString
;
mProperty
-
>
ToString
(
propertyNameString
)
;
nsCOMPtr
<
nsStyledElement
>
inlineStyles
=
do_QueryInterface
(
mElement
)
;
NS_ENSURE_TRUE
(
inlineStyles
NS_ERROR_NULL_POINTER
)
;
nsCOMPtr
<
nsICSSDeclaration
>
cssDecl
=
inlineStyles
-
>
Style
(
)
;
if
(
aValue
.
IsEmpty
(
)
)
{
nsAutoString
returnString
;
return
cssDecl
-
>
RemoveProperty
(
propertyNameString
returnString
)
;
}
nsAutoString
priority
;
cssDecl
-
>
GetPropertyPriority
(
propertyNameString
priority
)
;
return
cssDecl
-
>
SetProperty
(
propertyNameString
aValue
priority
)
;
}
return
mElement
-
>
UnsetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
style
true
)
;
}
NS_IMETHODIMP
ChangeStyleTransaction
:
:
UndoTransaction
(
)
{
return
SetStyle
(
mUndoAttributeWasSet
mUndoValue
)
;
}
NS_IMETHODIMP
ChangeStyleTransaction
:
:
RedoTransaction
(
)
{
return
SetStyle
(
mRedoAttributeWasSet
mRedoValue
)
;
}
bool
ChangeStyleTransaction
:
:
AcceptsMoreThanOneValue
(
nsAtom
&
aCSSProperty
)
{
return
&
aCSSProperty
=
=
nsGkAtoms
:
:
text_decoration
;
}
void
ChangeStyleTransaction
:
:
AddValueToMultivalueProperty
(
nsAString
&
aValues
const
nsAString
&
aNewValue
)
{
if
(
aValues
.
IsEmpty
(
)
|
|
aValues
.
LowerCaseEqualsLiteral
(
"
none
"
)
)
{
aValues
.
Assign
(
aNewValue
)
;
}
else
if
(
!
ValueIncludes
(
aValues
aNewValue
)
)
{
aValues
.
Append
(
char16_t
(
'
'
)
)
;
aValues
.
Append
(
aNewValue
)
;
}
}
}
