#
include
"
mozilla
/
ChangeStyleTransaction
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsICSSDeclaration
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsStyledElement
.
h
"
#
include
"
nsUnicharUtils
.
h
"
namespace
mozilla
{
using
namespace
dom
;
already_AddRefed
<
ChangeStyleTransaction
>
ChangeStyleTransaction
:
:
Create
(
nsStyledElement
&
aStyledElement
nsAtom
&
aProperty
const
nsAString
&
aValue
)
{
RefPtr
<
ChangeStyleTransaction
>
transaction
=
new
ChangeStyleTransaction
(
aStyledElement
aProperty
aValue
false
)
;
return
transaction
.
forget
(
)
;
}
already_AddRefed
<
ChangeStyleTransaction
>
ChangeStyleTransaction
:
:
CreateToRemove
(
nsStyledElement
&
aStyledElement
nsAtom
&
aProperty
const
nsAString
&
aValue
)
{
RefPtr
<
ChangeStyleTransaction
>
transaction
=
new
ChangeStyleTransaction
(
aStyledElement
aProperty
aValue
true
)
;
return
transaction
.
forget
(
)
;
}
ChangeStyleTransaction
:
:
ChangeStyleTransaction
(
nsStyledElement
&
aStyledElement
nsAtom
&
aProperty
const
nsAString
&
aValue
bool
aRemove
)
:
EditTransactionBase
(
)
mStyledElement
(
&
aStyledElement
)
mProperty
(
&
aProperty
)
mUndoValue
(
)
mRedoValue
(
)
mRemoveProperty
(
aRemove
)
mUndoAttributeWasSet
(
false
)
mRedoAttributeWasSet
(
false
)
{
CopyUTF16toUTF8
(
aValue
mValue
)
;
}
#
define
kNullCh
(
'
\
0
'
)
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
ChangeStyleTransaction
EditTransactionBase
mStyledElement
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ChangeStyleTransaction
)
NS_INTERFACE_MAP_END_INHERITING
(
EditTransactionBase
)
NS_IMPL_ADDREF_INHERITED
(
ChangeStyleTransaction
EditTransactionBase
)
NS_IMPL_RELEASE_INHERITED
(
ChangeStyleTransaction
EditTransactionBase
)
bool
ChangeStyleTransaction
:
:
ValueIncludes
(
const
nsACString
&
aValueList
const
nsACString
&
aValue
)
{
nsAutoCString
valueList
(
aValueList
)
;
bool
result
=
false
;
valueList
.
Append
(
kNullCh
)
;
char
*
start
=
valueList
.
BeginWriting
(
)
;
char
*
end
=
start
;
while
(
kNullCh
!
=
*
start
)
{
while
(
kNullCh
!
=
*
start
&
&
nsCRT
:
:
IsAsciiSpace
(
*
start
)
)
{
start
+
+
;
}
end
=
start
;
while
(
kNullCh
!
=
*
end
&
&
!
nsCRT
:
:
IsAsciiSpace
(
*
end
)
)
{
end
+
+
;
}
*
end
=
kNullCh
;
if
(
start
<
end
)
{
if
(
aValue
.
Equals
(
nsDependentCString
(
start
)
nsCaseInsensitiveCStringComparator
)
)
{
result
=
true
;
break
;
}
}
start
=
+
+
end
;
}
return
result
;
}
void
ChangeStyleTransaction
:
:
RemoveValueFromListOfValues
(
nsACString
&
aValues
const
nsACString
&
aRemoveValue
)
{
nsAutoCString
classStr
(
aValues
)
;
nsAutoCString
outString
;
classStr
.
Append
(
kNullCh
)
;
char
*
start
=
classStr
.
BeginWriting
(
)
;
char
*
end
=
start
;
while
(
kNullCh
!
=
*
start
)
{
while
(
kNullCh
!
=
*
start
&
&
nsCRT
:
:
IsAsciiSpace
(
*
start
)
)
{
start
+
+
;
}
end
=
start
;
while
(
kNullCh
!
=
*
end
&
&
!
nsCRT
:
:
IsAsciiSpace
(
*
end
)
)
{
end
+
+
;
}
*
end
=
kNullCh
;
if
(
start
<
end
&
&
!
aRemoveValue
.
Equals
(
start
)
)
{
outString
.
Append
(
start
)
;
outString
.
Append
(
'
'
)
;
}
start
=
+
+
end
;
}
aValues
.
Assign
(
outString
)
;
}
NS_IMETHODIMP
ChangeStyleTransaction
:
:
DoTransaction
(
)
{
if
(
NS_WARN_IF
(
!
mStyledElement
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
OwningNonNull
<
nsStyledElement
>
styledElement
=
*
mStyledElement
;
nsCOMPtr
<
nsICSSDeclaration
>
cssDecl
=
styledElement
-
>
Style
(
)
;
nsAutoCString
propertyNameString
;
mProperty
-
>
ToUTF8String
(
propertyNameString
)
;
mUndoAttributeWasSet
=
mStyledElement
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
style
)
;
nsAutoCString
values
;
nsresult
rv
=
cssDecl
-
>
GetPropertyValue
(
propertyNameString
values
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
nsICSSDeclaration
:
:
GetPropertyPriorityValue
(
)
failed
"
)
;
return
rv
;
}
mUndoValue
.
Assign
(
values
)
;
bool
multiple
=
AcceptsMoreThanOneValue
(
*
mProperty
)
;
if
(
mRemoveProperty
)
{
nsAutoCString
returnString
;
if
(
multiple
)
{
RemoveValueFromListOfValues
(
values
"
none
"
_ns
)
;
RemoveValueFromListOfValues
(
values
mValue
)
;
if
(
values
.
IsEmpty
(
)
)
{
ErrorResult
error
;
cssDecl
-
>
RemoveProperty
(
propertyNameString
returnString
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
nsICSSDeclaration
:
:
RemoveProperty
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
}
else
{
ErrorResult
error
;
nsAutoCString
priority
;
cssDecl
-
>
GetPropertyPriority
(
propertyNameString
priority
)
;
cssDecl
-
>
SetProperty
(
propertyNameString
values
priority
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
nsICSSDeclaration
:
:
SetProperty
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
}
}
else
{
ErrorResult
error
;
cssDecl
-
>
RemoveProperty
(
propertyNameString
returnString
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
nsICSSDeclaration
:
:
RemoveProperty
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
}
}
else
{
nsAutoCString
priority
;
cssDecl
-
>
GetPropertyPriority
(
propertyNameString
priority
)
;
if
(
multiple
)
{
AddValueToMultivalueProperty
(
values
mValue
)
;
}
else
{
values
.
Assign
(
mValue
)
;
}
ErrorResult
error
;
cssDecl
-
>
SetProperty
(
propertyNameString
values
priority
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
nsICSSDeclaration
:
:
SetProperty
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
}
uint32_t
length
=
cssDecl
-
>
Length
(
)
;
if
(
!
length
)
{
nsresult
rv
=
styledElement
-
>
UnsetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
style
true
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Element
:
:
UnsetAttr
(
nsGkAtoms
:
:
style
)
failed
"
)
;
return
rv
;
}
}
else
{
mRedoAttributeWasSet
=
true
;
}
rv
=
cssDecl
-
>
GetPropertyValue
(
propertyNameString
mRedoValue
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
nsICSSDeclaration
:
:
GetPropertyValue
(
)
failed
"
)
;
return
rv
;
}
nsresult
ChangeStyleTransaction
:
:
SetStyle
(
bool
aAttributeWasSet
nsACString
&
aValue
)
{
if
(
NS_WARN_IF
(
!
mStyledElement
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
aAttributeWasSet
)
{
OwningNonNull
<
nsStyledElement
>
styledElement
=
*
mStyledElement
;
nsAutoCString
propertyNameString
;
mProperty
-
>
ToUTF8String
(
propertyNameString
)
;
nsCOMPtr
<
nsICSSDeclaration
>
cssDecl
=
styledElement
-
>
Style
(
)
;
ErrorResult
error
;
if
(
aValue
.
IsEmpty
(
)
)
{
nsAutoCString
returnString
;
cssDecl
-
>
RemoveProperty
(
propertyNameString
returnString
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
nsICSSDeclaration
:
:
RemoveProperty
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
}
nsAutoCString
priority
;
cssDecl
-
>
GetPropertyPriority
(
propertyNameString
priority
)
;
cssDecl
-
>
SetProperty
(
propertyNameString
aValue
priority
error
)
;
NS_WARNING_ASSERTION
(
!
error
.
Failed
(
)
"
nsICSSDeclaration
:
:
SetProperty
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
OwningNonNull
<
nsStyledElement
>
styledElement
=
*
mStyledElement
;
nsresult
rv
=
styledElement
-
>
UnsetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
style
true
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Element
:
:
UnsetAttr
(
nsGkAtoms
:
:
style
)
failed
"
)
;
return
rv
;
}
NS_IMETHODIMP
ChangeStyleTransaction
:
:
UndoTransaction
(
)
{
nsresult
rv
=
SetStyle
(
mUndoAttributeWasSet
mUndoValue
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
ChangeStyleTransaction
:
:
SetStyle
(
)
failed
"
)
;
return
rv
;
}
NS_IMETHODIMP
ChangeStyleTransaction
:
:
RedoTransaction
(
)
{
nsresult
rv
=
SetStyle
(
mRedoAttributeWasSet
mRedoValue
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
ChangeStyleTransaction
:
:
SetStyle
(
)
failed
"
)
;
return
rv
;
}
bool
ChangeStyleTransaction
:
:
AcceptsMoreThanOneValue
(
nsAtom
&
aCSSProperty
)
{
return
&
aCSSProperty
=
=
nsGkAtoms
:
:
text_decoration
;
}
void
ChangeStyleTransaction
:
:
AddValueToMultivalueProperty
(
nsACString
&
aValues
const
nsACString
&
aNewValue
)
{
if
(
aValues
.
IsEmpty
(
)
|
|
aValues
.
LowerCaseEqualsLiteral
(
"
none
"
)
)
{
aValues
.
Assign
(
aNewValue
)
;
}
else
if
(
!
ValueIncludes
(
aValues
aNewValue
)
)
{
aValues
.
Append
(
char16_t
(
'
'
)
)
;
aValues
.
Append
(
aNewValue
)
;
}
}
}
