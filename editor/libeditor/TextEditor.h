#
ifndef
mozilla_TextEditor_h
#
define
mozilla_TextEditor_h
#
include
"
mozilla
/
EditorBase
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIEditor
.
h
"
#
include
"
nsIEditorMailSupport
.
h
"
#
include
"
nsIPlaintextEditor
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nscore
.
h
"
class
nsIContent
;
class
nsIDOMDocument
;
class
nsIDOMElement
;
class
nsIDOMEvent
;
class
nsIDOMNode
;
class
nsIDocumentEncoder
;
class
nsIEditRules
;
class
nsIOutputStream
;
class
nsISelectionController
;
class
nsITransferable
;
namespace
mozilla
{
class
AutoEditInitRulesTrigger
;
class
HTMLEditRules
;
class
TextEditRules
;
namespace
dom
{
class
Selection
;
}
class
TextEditor
:
public
EditorBase
public
nsIPlaintextEditor
public
nsIEditorMailSupport
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
TextEditor
EditorBase
)
enum
ETypingAction
{
eTypedText
eTypedBR
eTypedBreak
}
;
TextEditor
(
)
;
NS_DECL_NSIPLAINTEXTEDITOR
NS_DECL_NSIEDITORMAILSUPPORT
virtual
nsresult
RemoveAttributeOrEquivalent
(
Element
*
aElement
nsAtom
*
aAttribute
bool
aSuppressTransaction
)
override
;
virtual
nsresult
SetAttributeOrEquivalent
(
Element
*
aElement
nsAtom
*
aAttribute
const
nsAString
&
aValue
bool
aSuppressTransaction
)
override
;
using
EditorBase
:
:
RemoveAttributeOrEquivalent
;
using
EditorBase
:
:
SetAttributeOrEquivalent
;
NS_IMETHOD
Init
(
nsIDOMDocument
*
aDoc
nsIContent
*
aRoot
nsISelectionController
*
aSelCon
uint32_t
aFlags
const
nsAString
&
aValue
)
override
;
nsresult
DocumentIsEmpty
(
bool
*
aIsEmpty
)
;
NS_IMETHOD
GetDocumentIsEmpty
(
bool
*
aDocumentIsEmpty
)
override
;
NS_IMETHOD
DeleteSelection
(
EDirection
aAction
EStripWrappers
aStripWrappers
)
override
;
NS_IMETHOD
SetDocumentCharacterSet
(
const
nsACString
&
characterSet
)
override
;
NS_IMETHOD
Undo
(
uint32_t
aCount
)
override
;
NS_IMETHOD
Redo
(
uint32_t
aCount
)
override
;
NS_IMETHOD
Cut
(
)
override
;
NS_IMETHOD
CanCut
(
bool
*
aCanCut
)
override
;
NS_IMETHOD
Copy
(
)
override
;
NS_IMETHOD
CanCopy
(
bool
*
aCanCopy
)
override
;
NS_IMETHOD
CanDelete
(
bool
*
aCanDelete
)
override
;
NS_IMETHOD
Paste
(
int32_t
aSelectionType
)
override
;
NS_IMETHOD
CanPaste
(
int32_t
aSelectionType
bool
*
aCanPaste
)
override
;
NS_IMETHOD
PasteTransferable
(
nsITransferable
*
aTransferable
)
override
;
NS_IMETHOD
CanPasteTransferable
(
nsITransferable
*
aTransferable
bool
*
aCanPaste
)
override
;
NS_IMETHOD
OutputToString
(
const
nsAString
&
aFormatType
uint32_t
aFlags
nsAString
&
aOutputString
)
override
;
NS_IMETHOD
OutputToStream
(
nsIOutputStream
*
aOutputStream
const
nsAString
&
aFormatType
const
nsACString
&
aCharsetOverride
uint32_t
aFlags
)
override
;
NS_IMETHOD
StartOperation
(
EditAction
opID
nsIEditor
:
:
EDirection
aDirection
)
override
;
NS_IMETHOD
EndOperation
(
)
override
;
virtual
nsresult
SelectEntireDocument
(
Selection
*
aSelection
)
override
;
virtual
nsresult
HandleKeyPressEvent
(
WidgetKeyboardEvent
*
aKeyboardEvent
)
override
;
virtual
already_AddRefed
<
dom
:
:
EventTarget
>
GetDOMEventTarget
(
)
override
;
virtual
nsresult
BeginIMEComposition
(
WidgetCompositionEvent
*
aEvent
)
override
;
virtual
nsresult
UpdateIMEComposition
(
WidgetCompositionEvent
*
aCompositionChangeEvet
)
override
;
virtual
already_AddRefed
<
nsIContent
>
GetInputEventTargetContent
(
)
override
;
NS_IMETHOD
TypedText
(
const
nsAString
&
aString
ETypingAction
aAction
)
;
nsresult
InsertTextAt
(
const
nsAString
&
aStringToInsert
nsIDOMNode
*
aDestinationNode
int32_t
aDestOffset
bool
aDoDeleteSelection
)
;
virtual
nsresult
InsertFromDataTransfer
(
dom
:
:
DataTransfer
*
aDataTransfer
int32_t
aIndex
nsIDOMDocument
*
aSourceDoc
nsIDOMNode
*
aDestinationNode
int32_t
aDestOffset
bool
aDoDeleteSelection
)
override
;
virtual
nsresult
InsertFromDrop
(
nsIDOMEvent
*
aDropEvent
)
override
;
nsresult
ExtendSelectionForDelete
(
Selection
*
aSelection
nsIEditor
:
:
EDirection
*
aAction
)
;
bool
IsSafeToInsertData
(
nsIDOMDocument
*
aSourceDoc
)
;
static
void
GetDefaultEditorPrefs
(
int32_t
&
aNewLineHandling
int32_t
&
aCaretStyle
)
;
int32_t
MaxTextLength
(
)
const
{
return
mMaxTextLength
;
}
protected
:
virtual
~
TextEditor
(
)
;
NS_IMETHOD
InitRules
(
)
;
void
BeginEditorInit
(
)
;
nsresult
EndEditorInit
(
)
;
already_AddRefed
<
nsIDocumentEncoder
>
GetAndInitDocEncoder
(
const
nsAString
&
aFormatType
uint32_t
aFlags
const
nsACString
&
aCharset
)
;
already_AddRefed
<
Element
>
CreateBR
(
nsINode
*
aNode
int32_t
aOffset
EDirection
aSelect
=
eNone
)
;
nsresult
CreateBR
(
nsIDOMNode
*
aNode
int32_t
aOffset
nsCOMPtr
<
nsIDOMNode
>
*
outBRNode
EDirection
aSelect
=
eNone
)
;
already_AddRefed
<
Element
>
CreateBRImpl
(
nsCOMPtr
<
nsINode
>
*
aInOutParent
int32_t
*
aInOutOffset
EDirection
aSelect
)
;
nsresult
CreateBRImpl
(
nsCOMPtr
<
nsIDOMNode
>
*
aInOutParent
int32_t
*
aInOutOffset
nsCOMPtr
<
nsIDOMNode
>
*
outBRNode
EDirection
aSelect
)
;
NS_IMETHOD
PrepareTransferable
(
nsITransferable
*
*
transferable
)
;
nsresult
InsertTextFromTransferable
(
nsITransferable
*
transferable
nsIDOMNode
*
aDestinationNode
int32_t
aDestOffset
bool
aDoDeleteSelection
)
;
nsresult
SharedOutputString
(
uint32_t
aFlags
bool
*
aIsCollapsed
nsAString
&
aResult
)
;
enum
PasswordFieldAllowed
{
ePasswordFieldAllowed
ePasswordFieldNotAllowed
}
;
bool
CanCutOrCopy
(
PasswordFieldAllowed
aPasswordFieldAllowed
)
;
bool
FireClipboardEvent
(
EventMessage
aEventMessage
int32_t
aSelectionType
bool
*
aActionTaken
=
nullptr
)
;
bool
UpdateMetaCharset
(
nsIDocument
&
aDocument
const
nsACString
&
aCharacterSet
)
;
protected
:
nsCOMPtr
<
nsIEditRules
>
mRules
;
nsCOMPtr
<
nsIDocumentEncoder
>
mCachedDocumentEncoder
;
nsString
mCachedDocumentEncoderType
;
int32_t
mWrapColumn
;
int32_t
mMaxTextLength
;
int32_t
mInitTriggerCounter
;
int32_t
mNewlineHandling
;
int32_t
mCaretStyle
;
friend
class
AutoEditInitRulesTrigger
;
friend
class
HTMLEditRules
;
friend
class
TextEditRules
;
}
;
}
mozilla
:
:
TextEditor
*
nsIEditor
:
:
AsTextEditor
(
)
{
return
static_cast
<
mozilla
:
:
TextEditor
*
>
(
this
)
;
}
const
mozilla
:
:
TextEditor
*
nsIEditor
:
:
AsTextEditor
(
)
const
{
return
static_cast
<
const
mozilla
:
:
TextEditor
*
>
(
this
)
;
}
#
endif
