#
ifndef
mozilla_HTMLEditor_h
#
define
mozilla_HTMLEditor_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ComposerCommandsUpdater
.
h
"
#
include
"
mozilla
/
CSSEditUtils
.
h
"
#
include
"
mozilla
/
EditorUtils
.
h
"
#
include
"
mozilla
/
ManualNAC
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
TextEditor
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
BlobImpl
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
nsAttrName
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIDocumentObserver
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsIEditorMailSupport
.
h
"
#
include
"
nsIHTMLAbsPosEditor
.
h
"
#
include
"
nsIHTMLEditor
.
h
"
#
include
"
nsIHTMLInlineTableEditor
.
h
"
#
include
"
nsIHTMLObjectResizer
.
h
"
#
include
"
nsITableEditor
.
h
"
#
include
"
nsPoint
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
#
include
"
nsTArray
.
h
"
class
nsDocumentFragment
;
class
nsFrameSelection
;
class
nsHTMLDocument
;
class
nsITransferable
;
class
nsIClipboard
;
class
nsRange
;
class
nsStaticAtom
;
class
nsStyledElement
;
class
nsTableWrapperFrame
;
namespace
mozilla
{
class
AlignStateAtSelection
;
class
AutoSelectionSetterAfterTableEdit
;
class
AutoSetTemporaryAncestorLimiter
;
class
EditActionResult
;
class
EditResult
;
class
EmptyEditableFunctor
;
class
JoinNodeTransaction
;
class
ListElementSelectionState
;
class
ListItemElementSelectionState
;
class
MoveNodeResult
;
class
ParagraphStateAtSelection
;
class
ResizerSelectionListener
;
class
Runnable
;
class
SplitNodeTransaction
;
class
SplitRangeOffFromNodeResult
;
class
SplitRangeOffResult
;
class
WhiteSpaceVisibilityKeeper
;
class
WSRunScanner
;
class
WSScanResult
;
enum
class
EditSubAction
:
int32_t
;
struct
PropItem
;
template
<
class
T
>
class
OwningNonNull
;
namespace
dom
{
class
AbstractRange
;
class
Blob
;
class
DocumentFragment
;
class
Event
;
class
MouseEvent
;
class
StaticRange
;
}
namespace
widget
{
struct
IMEState
;
}
enum
class
ParagraphSeparator
{
div
p
br
}
;
class
HTMLEditor
final
:
public
TextEditor
public
nsIHTMLEditor
public
nsIHTMLObjectResizer
public
nsIHTMLAbsPosEditor
public
nsITableEditor
public
nsIHTMLInlineTableEditor
public
nsStubMutationObserver
public
nsIEditorMailSupport
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
HTMLEditor
TextEditor
)
NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
NS_DECL_NSIHTMLEDITOR
NS_DECL_NSIHTMLOBJECTRESIZER
NS_DECL_NSIHTMLABSPOSEDITOR
NS_DECL_NSIHTMLINLINETABLEEDITOR
NS_DECL_NSIEDITORMAILSUPPORT
NS_DECL_NSITABLEEDITOR
NS_DECL_NSISELECTIONLISTENER
HTMLEditor
(
)
;
static
HTMLEditor
*
GetFrom
(
EditorBase
*
aEditorBase
)
{
return
aEditorBase
?
aEditorBase
-
>
AsHTMLEditor
(
)
:
nullptr
;
}
MOZ_CAN_RUN_SCRIPT
virtual
void
PreDestroy
(
bool
aDestroyingFrames
)
override
;
bool
GetReturnInParagraphCreatesNewParagraph
(
)
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
Init
(
Document
&
aDoc
Element
*
aRoot
nsISelectionController
*
aSelCon
uint32_t
aFlags
const
nsAString
&
aValue
)
override
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHOD
BeginningOfDocument
(
)
override
;
MOZ_CAN_RUN_SCRIPT
NS_IMETHOD
SetFlags
(
uint32_t
aFlags
)
override
;
virtual
bool
IsEmpty
(
)
const
override
;
virtual
bool
CanPaste
(
int32_t
aClipboardType
)
const
override
;
using
EditorBase
:
:
CanPaste
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
PasteTransferableAsAction
(
nsITransferable
*
aTransferable
nsIPrincipal
*
aPrincipal
=
nullptr
)
override
;
MOZ_CAN_RUN_SCRIPT
NS_IMETHOD
DeleteNode
(
nsINode
*
aNode
)
override
;
MOZ_CAN_RUN_SCRIPT
NS_IMETHOD
InsertLineBreak
(
)
override
;
void
PreHandleMouseDown
(
const
dom
:
:
MouseEvent
&
aMouseDownEvent
)
;
void
PreHandleMouseUp
(
const
dom
:
:
MouseEvent
&
aMouseUpEvent
)
;
void
PreHandleSelectionChangeCommand
(
Command
aCommand
)
;
void
PostHandleSelectionChangeCommand
(
Command
aCommand
)
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
HandleKeyPressEvent
(
WidgetKeyboardEvent
*
aKeyboardEvent
)
override
;
virtual
nsIContent
*
GetFocusedContent
(
)
const
override
;
virtual
nsIContent
*
GetFocusedContentForIME
(
)
const
override
;
virtual
bool
IsActiveInDOMWindow
(
)
const
override
;
virtual
dom
:
:
EventTarget
*
GetDOMEventTarget
(
)
const
override
;
virtual
Element
*
FindSelectionRoot
(
nsINode
*
aNode
)
const
override
;
virtual
bool
IsAcceptableInputEvent
(
WidgetGUIEvent
*
aGUIEvent
)
const
override
;
virtual
nsresult
GetPreferredIMEState
(
widget
:
:
IMEState
*
aState
)
override
;
MOZ_CAN_RUN_SCRIPT
nsresult
GetBackgroundColorState
(
bool
*
aMixed
nsAString
&
aOutColor
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
PasteNoFormattingAsAction
(
int32_t
aSelectionType
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
PasteAsQuotationAsAction
(
int32_t
aClipboardType
bool
aDispatchPasteEvent
nsIPrincipal
*
aPrincipal
=
nullptr
)
override
;
virtual
bool
CanPasteTransferable
(
nsITransferable
*
aTransferable
)
override
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
InsertLineBreakAsAction
(
nsIPrincipal
*
aPrincipal
=
nullptr
)
override
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
InsertParagraphSeparatorAsAction
(
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertElementAtSelectionAsAction
(
Element
*
aElement
bool
aDeleteSelection
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertLinkAroundSelectionAsAction
(
Element
*
aAnchorElement
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
CreateElementWithDefaults
(
const
nsAtom
&
aTagName
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
IndentAsAction
(
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
OutdentAsAction
(
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetParagraphFormatAsAction
(
const
nsAString
&
aParagraphFormat
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
AlignAsAction
(
const
nsAString
&
aAlignType
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
RemoveListAsAction
(
const
nsAString
&
aListType
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
enum
class
SelectAllOfCurrentList
{
Yes
No
}
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
MakeOrChangeListAsAction
(
nsAtom
&
aListElementTagName
const
nsAString
&
aBulletType
SelectAllOfCurrentList
aSelectAllOfCurrentList
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
StartToDragResizerOrHandleDragGestureOnGrabber
(
dom
:
:
MouseEvent
&
aMouseDownEvent
Element
&
aEventTargetElement
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
StopDraggingResizerOrGrabberAt
(
const
CSSIntPoint
&
aClientPoint
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
UpdateResizerOrGrabberPositionTo
(
const
CSSIntPoint
&
aClientPoint
)
;
bool
IsCSSEnabled
(
)
const
{
return
mCSSAware
&
&
mCSSEditUtils
&
&
mCSSEditUtils
-
>
IsCSSPrefChecked
(
)
;
}
MOZ_CAN_RUN_SCRIPT
void
EnableObjectResizer
(
bool
aEnable
)
{
if
(
mIsObjectResizingEnabled
=
=
aEnable
)
{
return
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eEnableOrDisableResizer
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
;
}
mIsObjectResizingEnabled
=
aEnable
;
RefreshEditingUI
(
)
;
}
bool
IsObjectResizerEnabled
(
)
const
{
return
mIsObjectResizingEnabled
;
}
Element
*
GetResizerTarget
(
)
const
{
return
mResizedObject
;
}
MOZ_CAN_RUN_SCRIPT
void
EnableInlineTableEditor
(
bool
aEnable
)
{
if
(
mIsInlineTableEditingEnabled
=
=
aEnable
)
{
return
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eEnableOrDisableInlineTableEditingUI
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
;
}
mIsInlineTableEditingEnabled
=
aEnable
;
RefreshEditingUI
(
)
;
}
bool
IsInlineTableEditorEnabled
(
)
const
{
return
mIsInlineTableEditingEnabled
;
}
MOZ_CAN_RUN_SCRIPT
void
EnableAbsolutePositionEditor
(
bool
aEnable
)
{
if
(
mIsAbsolutelyPositioningEnabled
=
=
aEnable
)
{
return
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eEnableOrDisableAbsolutePositionEditor
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
;
}
mIsAbsolutelyPositioningEnabled
=
aEnable
;
RefreshEditingUI
(
)
;
}
bool
IsAbsolutePositionEditorEnabled
(
)
const
{
return
mIsAbsolutelyPositioningEnabled
;
}
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
GetAbsolutelyPositionedSelectionContainer
(
)
const
;
Element
*
GetPositionedElement
(
)
const
{
return
mAbsolutelyPositionedObject
;
}
MOZ_CAN_RUN_SCRIPT
nsresult
SetSelectionToAbsoluteOrStaticAsAction
(
bool
aEnabled
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
int32_t
GetZIndex
(
Element
&
aElement
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
AddZIndexAsAction
(
int32_t
aChange
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetBackgroundColorAsAction
(
const
nsAString
&
aColor
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetInlinePropertyAsAction
(
nsAtom
&
aProperty
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
GetInlineProperty
(
nsAtom
*
aHTMLProperty
nsAtom
*
aAttribute
const
nsAString
&
aValue
bool
*
aFirst
bool
*
aAny
bool
*
aAll
)
const
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
GetInlinePropertyWithAttrValue
(
nsAtom
*
aHTMLProperty
nsAtom
*
aAttribute
const
nsAString
&
aValue
bool
*
aFirst
bool
*
aAny
bool
*
aAll
nsAString
&
outValue
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
RemoveInlinePropertyAsAction
(
nsStaticAtom
&
aHTMLProperty
nsStaticAtom
*
aAttribute
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
RemoveAllInlinePropertiesAsAction
(
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
IncreaseFontSizeAsAction
(
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DecreaseFontSizeAsAction
(
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
GetFontColorState
(
bool
*
aIsMixed
nsAString
&
aColor
)
;
void
SetComposerCommandsUpdater
(
ComposerCommandsUpdater
*
aComposerCommandsUpdater
)
{
MOZ_ASSERT
(
!
aComposerCommandsUpdater
|
|
!
mComposerCommandsUpdater
|
|
aComposerCommandsUpdater
=
=
mComposerCommandsUpdater
)
;
mComposerCommandsUpdater
=
aComposerCommandsUpdater
;
}
nsStaticAtom
&
DefaultParagraphSeparatorTagName
(
)
const
{
return
HTMLEditor
:
:
ToParagraphSeparatorTagName
(
mDefaultParagraphSeparator
)
;
}
ParagraphSeparator
GetDefaultParagraphSeparator
(
)
const
{
return
mDefaultParagraphSeparator
;
}
void
SetDefaultParagraphSeparator
(
ParagraphSeparator
aSep
)
{
mDefaultParagraphSeparator
=
aSep
;
}
static
nsStaticAtom
&
ToParagraphSeparatorTagName
(
ParagraphSeparator
aSeparator
)
{
switch
(
aSeparator
)
{
case
ParagraphSeparator
:
:
div
:
return
*
nsGkAtoms
:
:
div
;
case
ParagraphSeparator
:
:
p
:
return
*
nsGkAtoms
:
:
p
;
case
ParagraphSeparator
:
:
br
:
return
*
nsGkAtoms
:
:
br
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
New
paragraph
separator
isn
'
t
handled
here
"
)
;
return
*
nsGkAtoms
:
:
div
;
}
}
MOZ_CAN_RUN_SCRIPT
nsresult
DoInlineTableEditingAction
(
const
Element
&
aUIAnonymousElement
)
;
Element
*
GetInclusiveAncestorByTagName
(
const
nsStaticAtom
&
aTagName
nsIContent
&
aContent
)
const
;
enum
class
LimitInBodyElement
{
No
Yes
}
;
Element
*
GetActiveEditingHost
(
LimitInBodyElement
aLimitInBodyElement
=
LimitInBodyElement
:
:
Yes
)
const
;
bool
IsInDesignMode
(
)
const
{
Document
*
document
=
GetDocument
(
)
;
return
document
&
&
document
-
>
HasFlag
(
NODE_IS_EDITABLE
)
;
}
void
NotifyEditingHostMaybeChanged
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertAsQuotation
(
const
nsAString
&
aQuotedText
nsINode
*
*
aNodeInserted
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertTextWithQuotations
(
const
nsAString
&
aStringToInsert
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertHTMLAsAction
(
const
nsAString
&
aInString
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
protected
:
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
InsertBRElementWithTransaction
(
const
EditorDOMPoint
&
aPointToInsert
EDirection
aSelect
=
eNone
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteNodeWithTransaction
(
nsIContent
&
aContent
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteTextWithTransaction
(
dom
:
:
Text
&
aTextNode
uint32_t
aOffset
uint32_t
aLength
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
ReplaceTextWithTransaction
(
dom
:
:
Text
&
aTextNode
uint32_t
aOffset
uint32_t
aLength
const
nsAString
&
aStringToInsert
)
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
InsertTextWithTransaction
(
Document
&
aDocument
const
nsAString
&
aStringToInsert
const
EditorRawDOMPoint
&
aPointToInsert
EditorRawDOMPoint
*
aPointAfterInsertedString
=
nullptr
)
override
;
MOZ_CAN_RUN_SCRIPT
nsresult
CopyLastEditableChildStylesWithTransaction
(
Element
&
aPreviousBlock
Element
&
aNewBlock
RefPtr
<
Element
>
*
aNewBRElement
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
RemoveBlockContainerWithTransaction
(
Element
&
aElement
)
;
virtual
Element
*
GetEditorRoot
(
)
const
override
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
RemoveAttributeOrEquivalent
(
Element
*
aElement
nsAtom
*
aAttribute
bool
aSuppressTransaction
)
override
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
SetAttributeOrEquivalent
(
Element
*
aElement
nsAtom
*
aAttribute
const
nsAString
&
aValue
bool
aSuppressTransaction
)
override
;
using
EditorBase
:
:
RemoveAttributeOrEquivalent
;
using
EditorBase
:
:
SetAttributeOrEquivalent
;
Element
*
GetSelectionContainerElement
(
)
const
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteTableCellContentsWithTransaction
(
)
;
static
void
IsNextCharInNodeWhiteSpace
(
nsIContent
*
aContent
int32_t
aOffset
bool
*
outIsSpace
bool
*
outIsNBSP
nsIContent
*
*
outNode
=
nullptr
int32_t
*
outOffset
=
0
)
;
static
void
IsPrevCharInNodeWhiteSpace
(
nsIContent
*
aContent
int32_t
aOffset
bool
*
outIsSpace
bool
*
outIsNBSP
nsIContent
*
*
outNode
=
nullptr
int32_t
*
outOffset
=
0
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetPositionToAbsoluteOrStatic
(
Element
&
aElement
bool
aEnabled
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
Result
<
int32_t
nsresult
>
AddZIndexWithTransaction
(
nsStyledElement
&
aStyledElement
int32_t
aChange
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
CollapseAdjacentTextNodes
(
nsRange
&
aRange
)
;
bool
IsInVisibleTextFrames
(
dom
:
:
Text
&
aText
)
const
;
bool
IsVisibleTextNode
(
Text
&
aText
)
const
;
bool
IsEmptyNode
(
nsINode
&
aNode
bool
aSingleBRDoesntCount
=
false
bool
aListOrCellNotEmpty
=
false
bool
aSafeToAskFrames
=
false
)
const
{
bool
seenBR
=
false
;
return
IsEmptyNodeImpl
(
aNode
aSingleBRDoesntCount
aListOrCellNotEmpty
aSafeToAskFrames
&
seenBR
)
;
}
bool
IsEmptyNodeImpl
(
nsINode
&
aNode
bool
aSingleBRDoesntCount
bool
aListOrCellNotEmpty
bool
aSafeToAskFrames
bool
*
aSeenBR
)
const
;
static
bool
HasAttributes
(
Element
*
aElement
)
{
MOZ_ASSERT
(
aElement
)
;
uint32_t
attrCount
=
aElement
-
>
GetAttrCount
(
)
;
return
attrCount
>
1
|
|
(
1
=
=
attrCount
&
&
!
aElement
-
>
GetAttrNameAt
(
0
)
-
>
Equals
(
nsGkAtoms
:
:
mozdirty
)
)
;
}
static
bool
IsTextPropertySetByContent
(
nsINode
*
aNode
nsAtom
*
aProperty
nsAtom
*
aAttribute
const
nsAString
*
aValue
nsAString
*
outValue
=
nullptr
)
;
static
dom
:
:
Element
*
GetLinkElement
(
nsINode
*
aNode
)
;
bool
IsVisibleBRElement
(
const
nsINode
*
aNode
)
const
;
enum
class
FontSize
{
incr
decr
}
;
MOZ_CAN_RUN_SCRIPT
nsresult
RelativeFontChangeOnTextNode
(
FontSize
aDir
Text
&
aTextNode
int32_t
aStartOffset
int32_t
aEndOffset
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetInlinePropertyOnNode
(
nsIContent
&
aNode
nsAtom
&
aProperty
nsAtom
*
aAttribute
const
nsAString
&
aValue
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
SplitRangeOffResult
SplitAncestorStyledInlineElementsAtRangeEdges
(
const
EditorDOMPoint
&
aStartPoint
const
EditorDOMPoint
&
aEndPoint
nsAtom
*
aProperty
nsAtom
*
aAttribute
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
SplitNodeResult
SplitAncestorStyledInlineElementsAt
(
const
EditorDOMPoint
&
aPointToSplit
nsAtom
*
aProperty
nsAtom
*
aAttribute
)
;
enum
class
SkipWhiteSpace
{
Yes
No
}
;
nsIContent
*
GetPriorHTMLSibling
(
nsINode
*
aNode
SkipWhiteSpace
=
SkipWhiteSpace
:
:
No
)
const
;
nsIContent
*
GetNextHTMLSibling
(
nsINode
*
aNode
SkipWhiteSpace
=
SkipWhiteSpace
:
:
No
)
const
;
static
bool
SkippableWhiteSpace
(
nsINode
*
aNode
SkipWhiteSpace
aSkipWS
)
{
return
aSkipWS
=
=
SkipWhiteSpace
:
:
Yes
&
&
aNode
-
>
IsText
(
)
&
&
aNode
-
>
AsText
(
)
-
>
TextIsOnlyWhitespace
(
)
;
}
nsIContent
*
GetPreviousHTMLElementOrText
(
const
nsINode
&
aNode
)
const
{
return
GetPreviousHTMLElementOrTextInternal
(
aNode
false
)
;
}
nsIContent
*
GetPreviousHTMLElementOrTextInBlock
(
const
nsINode
&
aNode
)
const
{
return
GetPreviousHTMLElementOrTextInternal
(
aNode
true
)
;
}
template
<
typename
PT
typename
CT
>
nsIContent
*
GetPreviousHTMLElementOrText
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
return
GetPreviousHTMLElementOrTextInternal
(
aPoint
false
)
;
}
template
<
typename
PT
typename
CT
>
nsIContent
*
GetPreviousHTMLElementOrTextInBlock
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
return
GetPreviousHTMLElementOrTextInternal
(
aPoint
true
)
;
}
nsIContent
*
GetPreviousHTMLElementOrTextInternal
(
const
nsINode
&
aNode
bool
aNoBlockCrossing
)
const
;
template
<
typename
PT
typename
CT
>
nsIContent
*
GetPreviousHTMLElementOrTextInternal
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
bool
aNoBlockCrossing
)
const
;
nsIContent
*
GetPreviousEditableHTMLNode
(
nsINode
&
aNode
)
const
{
return
GetPreviousEditableHTMLNodeInternal
(
aNode
false
)
;
}
nsIContent
*
GetPreviousEditableHTMLNodeInBlock
(
nsINode
&
aNode
)
const
{
return
GetPreviousEditableHTMLNodeInternal
(
aNode
true
)
;
}
template
<
typename
PT
typename
CT
>
nsIContent
*
GetPreviousEditableHTMLNode
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
return
GetPreviousEditableHTMLNodeInternal
(
aPoint
false
)
;
}
template
<
typename
PT
typename
CT
>
nsIContent
*
GetPreviousEditableHTMLNodeInBlock
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
return
GetPreviousEditableHTMLNodeInternal
(
aPoint
true
)
;
}
nsIContent
*
GetPreviousEditableHTMLNodeInternal
(
nsINode
&
aNode
bool
aNoBlockCrossing
)
const
;
template
<
typename
PT
typename
CT
>
nsIContent
*
GetPreviousEditableHTMLNodeInternal
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
bool
aNoBlockCrossing
)
const
;
nsIContent
*
GetNextHTMLElementOrText
(
const
nsINode
&
aNode
)
const
{
return
GetNextHTMLElementOrTextInternal
(
aNode
false
)
;
}
nsIContent
*
GetNextHTMLElementOrTextInBlock
(
const
nsINode
&
aNode
)
const
{
return
GetNextHTMLElementOrTextInternal
(
aNode
true
)
;
}
template
<
typename
PT
typename
CT
>
nsIContent
*
GetNextHTMLElementOrText
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
return
GetNextHTMLElementOrTextInternal
(
aPoint
false
)
;
}
template
<
typename
PT
typename
CT
>
nsIContent
*
GetNextHTMLElementOrTextInBlock
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
return
GetNextHTMLElementOrTextInternal
(
aPoint
true
)
;
}
nsIContent
*
GetNextHTMLElementOrTextInternal
(
const
nsINode
&
aNode
bool
aNoBlockCrossing
)
const
;
template
<
typename
PT
typename
CT
>
nsIContent
*
GetNextHTMLElementOrTextInternal
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
bool
aNoBlockCrossing
)
const
;
nsIContent
*
GetNextEditableHTMLNode
(
nsINode
&
aNode
)
const
{
return
GetNextEditableHTMLNodeInternal
(
aNode
false
)
;
}
nsIContent
*
GetNextEditableHTMLNodeInBlock
(
nsINode
&
aNode
)
const
{
return
GetNextEditableHTMLNodeInternal
(
aNode
true
)
;
}
template
<
typename
PT
typename
CT
>
nsIContent
*
GetNextEditableHTMLNode
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
return
GetNextEditableHTMLNodeInternal
(
aPoint
false
)
;
}
template
<
typename
PT
typename
CT
>
nsIContent
*
GetNextEditableHTMLNodeInBlock
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
return
GetNextEditableHTMLNodeInternal
(
aPoint
true
)
;
}
nsIContent
*
GetNextEditableHTMLNodeInternal
(
nsINode
&
aNode
bool
aNoBlockCrossing
)
const
;
template
<
typename
PT
typename
CT
>
nsIContent
*
GetNextEditableHTMLNodeInternal
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
bool
aNoBlockCrossing
)
const
;
bool
IsFirstEditableChild
(
nsINode
*
aNode
)
const
;
bool
IsLastEditableChild
(
nsINode
*
aNode
)
const
;
nsIContent
*
GetFirstEditableChild
(
nsINode
&
aNode
)
const
;
nsIContent
*
GetLastEditableChild
(
nsINode
&
aNode
)
const
;
nsIContent
*
GetFirstEditableLeaf
(
nsINode
&
aNode
)
const
;
nsIContent
*
GetLastEditableLeaf
(
nsINode
&
aNode
)
const
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
GetInlinePropertyBase
(
nsAtom
&
aHTMLProperty
nsAtom
*
aAttribute
const
nsAString
*
aValue
bool
*
aFirst
bool
*
aAny
bool
*
aAll
nsAString
*
outValue
)
const
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
EditResult
ClearStyleAt
(
const
EditorDOMPoint
&
aPoint
nsAtom
*
aProperty
nsAtom
*
aAttribute
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetPositionToAbsolute
(
Element
&
aElement
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SetPositionToStatic
(
Element
&
aElement
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
OnModifyDocument
(
)
;
MOZ_CAN_RUN_SCRIPT
void
DoSplitNode
(
const
EditorDOMPoint
&
aStartOfRightNode
nsIContent
&
aNewLeftNode
ErrorResult
&
aError
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
DoJoinNodes
(
nsIContent
&
aContentToKeep
nsIContent
&
aContentToJoin
)
;
protected
:
EditActionResult
CanHandleHTMLEditSubAction
(
)
const
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
EnsureCaretNotAfterPaddingBRElement
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
PrepareInlineStylesForCaret
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
virtual
EditActionResult
HandleInsertText
(
EditSubAction
aEditSubAction
const
nsAString
&
aInsertionString
)
final
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
GetInlineStyles
(
nsIContent
&
aContent
AutoStyleCacheArray
&
aStyleCacheArray
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
CacheInlineStyles
(
nsIContent
&
aContent
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
ReapplyCachedStyles
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
CreateStyleForInsertText
(
const
dom
:
:
AbstractRange
&
aAbstractRange
)
;
Element
*
GetMostAncestorMailCiteElement
(
nsINode
&
aNode
)
const
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
EditActionResult
SplitMailCiteElements
(
const
EditorDOMPoint
&
aPointToSplit
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
InsertBRElement
(
const
EditorDOMPoint
&
aInsertToBreak
)
;
nsIContent
*
GetMostAncestorInlineElement
(
nsINode
&
aNode
)
const
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SplitParentInlineElementsAtRangeEdges
(
RangeItem
&
aRangeItem
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SplitParentInlineElementsAtRangeEdges
(
nsTArray
<
RefPtr
<
nsRange
>
>
&
aArrayOfRanges
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SplitElementsAtEveryBRElement
(
nsIContent
&
aMostAncestorToBeSplit
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aOutArrayOfContents
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
MaybeSplitElementsAtEveryBRElement
(
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aArrayOfContents
EditSubAction
aEditSubAction
)
;
enum
class
CollectListChildren
{
No
Yes
}
;
enum
class
CollectTableChildren
{
No
Yes
}
;
enum
class
CollectNonEditableNodes
{
No
Yes
}
;
size_t
CollectChildren
(
nsINode
&
aNode
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aOutArrayOfContents
size_t
aIndexToInsertChildren
CollectListChildren
aCollectListChildren
CollectTableChildren
aCollectTableChildren
CollectNonEditableNodes
aCollectNonEditableNodes
)
const
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SplitInlinesAndCollectEditTargetNodes
(
nsTArray
<
RefPtr
<
nsRange
>
>
&
aArrayOfRanges
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aOutArrayOfContents
EditSubAction
aEditSubAction
CollectNonEditableNodes
aCollectNonEditableNodes
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SplitTextNodesAtRangeEnd
(
nsTArray
<
RefPtr
<
nsRange
>
>
&
aArrayOfRanges
)
;
nsresult
CollectEditTargetNodes
(
nsTArray
<
RefPtr
<
nsRange
>
>
&
aArrayOfRanges
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aOutArrayOfContents
EditSubAction
aEditSubAction
CollectNonEditableNodes
aCollectNonEditableNodes
)
;
enum
class
ScanDirection
{
Backward
Forward
}
;
template
<
typename
PT
typename
RT
>
static
EditorDOMPoint
GetWhiteSpaceEndPoint
(
const
RangeBoundaryBase
<
PT
RT
>
&
aPoint
ScanDirection
aScanDirection
)
;
template
<
typename
PT
typename
RT
>
EditorDOMPoint
GetCurrentHardLineStartPoint
(
const
RangeBoundaryBase
<
PT
RT
>
&
aPoint
EditSubAction
aEditSubAction
)
const
;
template
<
typename
PT
typename
RT
>
EditorDOMPoint
GetCurrentHardLineEndPoint
(
const
RangeBoundaryBase
<
PT
RT
>
&
aPoint
)
const
;
already_AddRefed
<
nsRange
>
CreateRangeIncludingAdjuscentWhiteSpaces
(
const
dom
:
:
AbstractRange
&
aAbstractRange
)
;
template
<
typename
SPT
typename
SRT
typename
EPT
typename
ERT
>
already_AddRefed
<
nsRange
>
CreateRangeIncludingAdjuscentWhiteSpaces
(
const
RangeBoundaryBase
<
SPT
SRT
>
&
aStartRef
const
RangeBoundaryBase
<
EPT
ERT
>
&
aEndRef
)
;
void
GetSelectionRangesExtendedToIncludeAdjuscentWhiteSpaces
(
nsTArray
<
RefPtr
<
nsRange
>
>
&
aOutArrayOfRanges
)
;
already_AddRefed
<
nsRange
>
CreateRangeExtendedToHardLineStartAndEnd
(
const
dom
:
:
AbstractRange
&
aAbstractRange
EditSubAction
aEditSubAction
)
const
;
template
<
typename
SPT
typename
SRT
typename
EPT
typename
ERT
>
already_AddRefed
<
nsRange
>
CreateRangeExtendedToHardLineStartAndEnd
(
const
RangeBoundaryBase
<
SPT
SRT
>
&
aStartRef
const
RangeBoundaryBase
<
EPT
ERT
>
&
aEndRef
EditSubAction
aEditSubAction
)
const
;
void
GetSelectionRangesExtendedToHardLineStartAndEnd
(
nsTArray
<
RefPtr
<
nsRange
>
>
&
aOutArrayOfRanges
EditSubAction
aEditSubAction
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SplitInlinesAndCollectEditTargetNodesInExtendedSelectionRanges
(
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aOutArrayOfContents
EditSubAction
aEditSubAction
CollectNonEditableNodes
aCollectNonEditableNodes
)
{
AutoTArray
<
RefPtr
<
nsRange
>
4
>
extendedSelectionRanges
;
GetSelectionRangesExtendedToHardLineStartAndEnd
(
extendedSelectionRanges
aEditSubAction
)
;
nsresult
rv
=
SplitInlinesAndCollectEditTargetNodes
(
extendedSelectionRanges
aOutArrayOfContents
aEditSubAction
aCollectNonEditableNodes
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
SplitInlinesAndCollectEditTargetNodes
(
)
failed
"
)
;
return
rv
;
}
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SplitInlinesAndCollectEditTargetNodesInOneHardLine
(
const
EditorDOMPoint
&
aPointInOneHardLine
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aOutArrayOfContents
EditSubAction
aEditSubAction
CollectNonEditableNodes
aCollectNonEditableNodes
)
{
if
(
NS_WARN_IF
(
!
aPointInOneHardLine
.
IsSet
(
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
RefPtr
<
nsRange
>
oneLineRange
=
CreateRangeExtendedToHardLineStartAndEnd
(
aPointInOneHardLine
.
ToRawRangeBoundary
(
)
aPointInOneHardLine
.
ToRawRangeBoundary
(
)
aEditSubAction
)
;
if
(
!
oneLineRange
)
{
ErrorResult
error
;
oneLineRange
=
nsRange
:
:
Create
(
aPointInOneHardLine
.
ToRawRangeBoundary
(
)
aPointInOneHardLine
.
ToRawRangeBoundary
(
)
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
return
error
.
StealNSResult
(
)
;
}
}
AutoTArray
<
RefPtr
<
nsRange
>
1
>
arrayOfLineRanges
;
arrayOfLineRanges
.
AppendElement
(
oneLineRange
)
;
nsresult
rv
=
SplitInlinesAndCollectEditTargetNodes
(
arrayOfLineRanges
aOutArrayOfContents
aEditSubAction
aCollectNonEditableNodes
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
SplitInlinesAndCollectEditTargetNodes
(
)
failed
"
)
;
return
rv
;
}
nsresult
CollectEditTargetNodesInExtendedSelectionRanges
(
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aOutArrayOfContents
EditSubAction
aEditSubAction
CollectNonEditableNodes
aCollectNonEditableNodes
)
{
AutoTArray
<
RefPtr
<
nsRange
>
4
>
extendedSelectionRanges
;
GetSelectionRangesExtendedToHardLineStartAndEnd
(
extendedSelectionRanges
aEditSubAction
)
;
nsresult
rv
=
CollectEditTargetNodes
(
extendedSelectionRanges
aOutArrayOfContents
aEditSubAction
aCollectNonEditableNodes
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
CollectEditTargetNodes
(
)
failed
"
)
;
return
rv
;
}
template
<
typename
SPT
typename
SRT
typename
EPT
typename
ERT
>
void
SelectBRElementIfCollapsedInEmptyBlock
(
RangeBoundaryBase
<
SPT
SRT
>
&
aStartRef
RangeBoundaryBase
<
EPT
ERT
>
&
aEndRef
)
const
;
static
void
GetChildNodesOf
(
nsINode
&
aParentNode
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aOutArrayOfContents
)
{
MOZ_ASSERT
(
aOutArrayOfContents
.
IsEmpty
(
)
)
;
aOutArrayOfContents
.
SetCapacity
(
aParentNode
.
GetChildCount
(
)
)
;
for
(
nsIContent
*
childContent
=
aParentNode
.
GetFirstChild
(
)
;
childContent
;
childContent
=
childContent
-
>
GetNextSibling
(
)
)
{
aOutArrayOfContents
.
AppendElement
(
*
childContent
)
;
}
}
Element
*
GetDeepestEditableOnlyChildDivBlockquoteOrListElement
(
nsINode
&
aNode
)
;
Element
*
GetParentListElementAtSelection
(
)
const
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
MaybeExtendSelectionToHardLineEdgesForBlockEditAction
(
)
;
bool
IsEmptyInlineNode
(
nsIContent
&
aContent
)
const
;
bool
IsEmptyOneHardLine
(
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aArrayOfContents
)
const
{
if
(
NS_WARN_IF
(
aArrayOfContents
.
IsEmpty
(
)
)
)
{
return
true
;
}
bool
brElementHasFound
=
false
;
for
(
OwningNonNull
<
nsIContent
>
&
content
:
aArrayOfContents
)
{
if
(
!
EditorUtils
:
:
IsEditableContent
(
content
EditorType
:
:
HTML
)
)
{
continue
;
}
if
(
content
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
)
{
if
(
brElementHasFound
)
{
return
false
;
}
brElementHasFound
=
true
;
continue
;
}
if
(
!
IsEmptyInlineNode
(
content
)
)
{
return
false
;
}
}
return
true
;
}
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
SplitNodeResult
MaybeSplitAncestorsForInsertWithTransaction
(
nsAtom
&
aTag
const
EditorDOMPoint
&
aStartOfDeepestRightNode
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
SplitRangeOffFromNodeResult
SplitRangeOffFromBlock
(
Element
&
aBlockElement
nsIContent
&
aStartOfMiddleElement
nsIContent
&
aEndOfMiddleElement
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
SplitRangeOffFromNodeResult
SplitRangeOffFromBlockAndRemoveMiddleContainer
(
Element
&
aBlockElement
nsIContent
&
aStartOfRange
nsIContent
&
aEndOfRange
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
MoveNodesIntoNewBlockquoteElement
(
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aArrayOfContents
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
RemoveBlockContainerElements
(
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aArrayOfContents
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
CreateOrChangeBlockContainerElement
(
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aArrayOfContents
nsAtom
&
aBlockTag
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
FormatBlockContainerWithTransaction
(
nsAtom
&
aBlockType
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
InsertBRElementIfHardLineIsEmptyAndEndsWithBlockBoundary
(
const
EditorDOMPoint
&
aPointToInsert
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
InsertBRElementIfEmptyBlockElement
(
Element
&
aElement
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
InsertPaddingBRElementForEmptyLastLineIfNeeded
(
Element
&
aElement
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
MaybeInsertPaddingBRElementForEmptyLastLineAtSelection
(
)
;
enum
class
IgnoreSingleBR
{
Yes
No
}
;
bool
IsEmptyBlockElement
(
Element
&
aElement
IgnoreSingleBR
aIgnoreSingleBR
)
const
;
template
<
typename
PT
typename
CT
>
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SplitParagraph
(
Element
&
aParentDivOrP
const
EditorDOMPointBase
<
PT
CT
>
&
aStartOfRightNode
nsIContent
*
aBRNode
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
EditActionResult
HandleInsertParagraphInParagraph
(
Element
&
aParentDivOrP
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
HandleInsertParagraphInHeadingElement
(
Element
&
aHeader
nsINode
&
aNode
int32_t
aOffset
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
HandleInsertParagraphInListItemElement
(
Element
&
aListItem
nsINode
&
aNode
int32_t
aOffset
)
;
Element
*
GetNearestAncestorListItemElement
(
nsIContent
&
aContent
)
const
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
EditActionResult
InsertParagraphSeparatorAsSubAction
(
)
;
static
bool
NodesInDifferentTableElements
(
nsINode
&
aNode1
nsINode
&
aNode2
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
CreateElementResult
ChangeListElementType
(
Element
&
aListElement
nsAtom
&
aListType
nsAtom
&
aItemType
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
EditActionResult
ChangeSelectedHardLinesToList
(
nsAtom
&
aListElementTagName
nsAtom
&
aListItemElementTagName
const
nsAString
&
aBulletType
SelectAllOfCurrentList
aSelectAllOfCurrentList
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
EditActionResult
MakeOrChangeListAndListItemAsSubAction
(
nsAtom
&
aListElementOrListItemElementTagName
const
nsAString
&
aBulletType
SelectAllOfCurrentList
aSelectAllOfCurrentList
)
;
enum
class
TreatEmptyTextNodes
{
KeepIfContainerOfRangeBoundaries
Remove
RemoveAllEmptyInlineAncestors
}
;
template
<
typename
EditorDOMPointType
>
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteTextAndTextNodesWithTransaction
(
const
EditorDOMPointType
&
aStartPoint
const
EditorDOMPointType
&
aEndPoint
TreatEmptyTextNodes
aTreatEmptyTextNodes
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
JoinNodesWithTransaction
(
nsINode
&
aLeftNode
nsINode
&
aRightNode
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
JoinNearestEditableNodesWithTransaction
(
nsIContent
&
aLeftNode
nsIContent
&
aRightNode
EditorDOMPoint
*
aNewFirstChildOfRightNode
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
ReplaceContainerAndCloneAttributesWithTransaction
(
Element
&
aOldContainer
nsAtom
&
aTagName
)
{
return
ReplaceContainerWithTransactionInternal
(
aOldContainer
aTagName
*
nsGkAtoms
:
:
_empty
u
"
"
_ns
true
)
;
}
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
ReplaceContainerWithTransaction
(
Element
&
aOldContainer
nsAtom
&
aTagName
nsAtom
&
aAttribute
const
nsAString
&
aAttributeValue
)
{
return
ReplaceContainerWithTransactionInternal
(
aOldContainer
aTagName
aAttribute
aAttributeValue
false
)
;
}
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
ReplaceContainerWithTransaction
(
Element
&
aOldContainer
nsAtom
&
aTagName
)
{
return
ReplaceContainerWithTransactionInternal
(
aOldContainer
aTagName
*
nsGkAtoms
:
:
_empty
u
"
"
_ns
false
)
;
}
MOZ_CAN_RUN_SCRIPT
nsresult
RemoveContainerWithTransaction
(
Element
&
aElement
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
InsertContainerWithTransaction
(
nsIContent
&
aContent
nsAtom
&
aTagName
)
{
return
InsertContainerWithTransactionInternal
(
aContent
aTagName
*
nsGkAtoms
:
:
_empty
u
"
"
_ns
)
;
}
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
InsertContainerWithTransaction
(
nsIContent
&
aContent
nsAtom
&
aTagName
nsAtom
&
aAttribute
const
nsAString
&
aAttributeValue
)
{
return
InsertContainerWithTransactionInternal
(
aContent
aTagName
aAttribute
aAttributeValue
)
;
}
MOZ_CAN_RUN_SCRIPT
nsresult
MoveNodeWithTransaction
(
nsIContent
&
aContent
const
EditorDOMPoint
&
aPointToInsert
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
MoveNodeToEndWithTransaction
(
nsIContent
&
aContent
nsINode
&
aNewContainer
)
{
EditorDOMPoint
pointToInsert
;
pointToInsert
.
SetToEndOf
(
&
aNewContainer
)
;
return
MoveNodeWithTransaction
(
aContent
pointToInsert
)
;
}
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
MoveNodeResult
MoveNodeOrChildrenWithTransaction
(
nsIContent
&
aNode
const
EditorDOMPoint
&
aPointToInsert
)
;
Result
<
bool
nsresult
>
CanMoveNodeOrChildren
(
const
nsIContent
&
aContent
const
nsINode
&
aNewContainer
)
const
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
MoveNodeResult
MoveChildrenWithTransaction
(
Element
&
aElement
const
EditorDOMPoint
&
aPointToInsert
)
;
Result
<
bool
nsresult
>
CanMoveChildren
(
const
Element
&
aElement
const
nsINode
&
aNewContainer
)
const
;
void
MoveAllChildren
(
nsINode
&
aContainer
const
EditorRawDOMPoint
&
aPointToInsert
ErrorResult
&
aError
)
;
void
MoveChildrenBetween
(
nsIContent
&
aFirstChild
nsIContent
&
aLastChild
const
EditorRawDOMPoint
&
aPointToInsert
ErrorResult
&
aError
)
;
void
MovePreviousSiblings
(
nsIContent
&
aChild
const
EditorRawDOMPoint
&
aPointToInsert
ErrorResult
&
aError
)
;
enum
class
MoveToEndOfContainer
{
Yes
No
}
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
MoveNodeResult
MoveOneHardLineContents
(
const
EditorDOMPoint
&
aPointInHardLine
const
EditorDOMPoint
&
aPointToInsert
MoveToEndOfContainer
aMoveToEndOfContainer
=
MoveToEndOfContainer
:
:
No
)
;
template
<
typename
PT
typename
CT
>
Result
<
bool
nsresult
>
CanMoveOrDeleteSomethingInHardLine
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPointInHardLine
)
const
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
nsIContent
>
SplitNodeWithTransaction
(
const
EditorDOMPoint
&
aStartOfRightNode
ErrorResult
&
aResult
)
;
enum
class
SplitAtEdges
{
eDoNotCreateEmptyContainer
eAllowToCreateEmptyContainer
}
;
MOZ_CAN_RUN_SCRIPT
SplitNodeResult
SplitNodeDeepWithTransaction
(
nsIContent
&
aMostAncestorToSplit
const
EditorDOMPoint
&
aDeepestStartOfRightNode
SplitAtEdges
aSplitAtEdges
)
;
EditorDOMPoint
GetGoodCaretPointFor
(
nsIContent
&
aContent
nsIEditor
:
:
EDirection
aDirectionAndAmount
)
const
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
RemoveEmptyInclusiveAncestorInlineElements
(
nsIContent
&
aContent
)
;
enum
class
DeleteDirection
{
Forward
Backward
}
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
Result
<
EditorDOMPoint
nsresult
>
DeleteTextAndNormalizeSurroundingWhiteSpaces
(
const
EditorDOMPointInText
&
aStartToDelete
const
EditorDOMPointInText
&
aEndToDelete
TreatEmptyTextNodes
aTreatEmptyTextNodes
DeleteDirection
aDeleteDirection
)
;
void
ExtendRangeToDeleteWithNormalizingWhiteSpaces
(
EditorDOMPointInText
&
aStartToDelete
EditorDOMPointInText
&
aEndToDelete
nsAString
&
aNormalizedWhiteSpacesInStartNode
nsAString
&
aNormalizedWhiteSpacesInEndNode
)
const
;
enum
class
CharPointType
{
TextEnd
ASCIIWhiteSpace
NoBreakingSpace
VisibleChar
PreformattedChar
}
;
template
<
typename
EditorDOMPointType
>
static
CharPointType
GetPreviousCharPointType
(
const
EditorDOMPointType
&
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsInTextNode
(
)
)
;
if
(
aPoint
.
IsStartOfContainer
(
)
)
{
return
CharPointType
:
:
TextEnd
;
}
if
(
EditorUtils
:
:
IsContentPreformatted
(
*
aPoint
.
ContainerAsText
(
)
)
)
{
return
CharPointType
:
:
PreformattedChar
;
}
if
(
aPoint
.
IsPreviousCharASCIISpace
(
)
)
{
return
CharPointType
:
:
ASCIIWhiteSpace
;
}
return
aPoint
.
IsPreviousCharNBSP
(
)
?
CharPointType
:
:
NoBreakingSpace
:
CharPointType
:
:
VisibleChar
;
}
template
<
typename
EditorDOMPointType
>
static
CharPointType
GetCharPointType
(
const
EditorDOMPointType
&
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsInTextNode
(
)
)
;
if
(
aPoint
.
IsEndOfContainer
(
)
)
{
return
CharPointType
:
:
TextEnd
;
}
if
(
EditorUtils
:
:
IsContentPreformatted
(
*
aPoint
.
ContainerAsText
(
)
)
)
{
return
CharPointType
:
:
PreformattedChar
;
}
if
(
aPoint
.
IsCharASCIISpace
(
)
)
{
return
CharPointType
:
:
ASCIIWhiteSpace
;
}
return
aPoint
.
IsCharNBSP
(
)
?
CharPointType
:
:
NoBreakingSpace
:
CharPointType
:
:
VisibleChar
;
}
class
MOZ_STACK_CLASS
CharPointData
final
{
public
:
static
CharPointData
InDifferentTextNode
(
CharPointType
aCharPointType
)
{
CharPointData
result
;
result
.
mIsInDifferentTextNode
=
true
;
result
.
mType
=
aCharPointType
;
return
result
;
}
static
CharPointData
InSameTextNode
(
CharPointType
aCharPointType
)
{
CharPointData
result
;
result
.
mIsInDifferentTextNode
=
aCharPointType
=
=
CharPointType
:
:
TextEnd
;
result
.
mType
=
aCharPointType
;
return
result
;
}
bool
AcrossTextNodeBoundary
(
)
const
{
return
mIsInDifferentTextNode
;
}
bool
IsWhiteSpace
(
)
const
{
return
mType
=
=
CharPointType
:
:
ASCIIWhiteSpace
|
|
mType
=
=
CharPointType
:
:
NoBreakingSpace
;
}
CharPointType
Type
(
)
const
{
return
mType
;
}
private
:
CharPointData
(
)
=
default
;
CharPointType
mType
;
bool
mIsInDifferentTextNode
;
}
;
CharPointData
GetPreviousCharPointDataForNormalizingWhiteSpaces
(
const
EditorDOMPointInText
&
aPoint
)
const
;
CharPointData
GetInclusiveNextCharPointDataForNormalizingWhiteSpaces
(
const
EditorDOMPointInText
&
aPoint
)
const
;
static
void
GenerateWhiteSpaceSequence
(
nsAString
&
aResult
uint32_t
aLength
const
CharPointData
&
aPreviousCharPointData
const
CharPointData
&
aNextCharPointData
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
ComputeTargetRanges
(
nsIEditor
:
:
EDirection
aDirectionAndAmount
AutoRangeArray
&
aRangesToDelete
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
virtual
EditActionResult
HandleDeleteSelection
(
nsIEditor
:
:
EDirection
aDirectionAndAmount
nsIEditor
:
:
EStripWrappers
aStripWrappers
)
final
;
class
AutoDeleteRangesHandler
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteMostAncestorMailCiteElementIfEmpty
(
nsIContent
&
aContent
)
;
enum
class
LiftUpFromAllParentListElements
{
Yes
No
}
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
LiftUpListItemElement
(
dom
:
:
Element
&
aListItemElement
LiftUpFromAllParentListElements
aLiftUpFromAllParentListElements
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
DestroyListStructureRecursively
(
Element
&
aListElement
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
RemoveListAtSelectionAsSubAction
(
)
;
enum
class
ChangeMargin
{
Increase
Decrease
}
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
ChangeMarginStart
(
Element
&
aElement
ChangeMargin
aChangeMargin
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
HandleCSSIndentAtSelectionInternal
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
HandleHTMLIndentAtSelectionInternal
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
HandleCSSIndentAtSelection
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
HandleHTMLIndentAtSelection
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
EditActionResult
HandleIndentAtSelection
(
)
;
enum
class
BlockIndentedWith
{
CSS
HTML
}
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
SplitRangeOffFromNodeResult
OutdentPartOfBlock
(
Element
&
aBlockElement
nsIContent
&
aStartOfOutdent
nsIContent
&
aEndOutdent
BlockIndentedWith
aBlockIndentedWith
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
SplitRangeOffFromNodeResult
HandleOutdentAtSelectionInternal
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
EditActionResult
HandleOutdentAtSelection
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
AlignBlockContentsWithDivElement
(
dom
:
:
Element
&
aBlockElement
const
nsAString
&
aAlignType
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
AlignContentsInAllTableCellsAndListItems
(
dom
:
:
Element
&
aElement
const
nsAString
&
aAlignType
)
;
static
void
MakeTransitionList
(
const
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aArrayOfContents
nsTArray
<
bool
>
&
aTransitionArray
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
EnsureHardLineBeginsWithFirstChildOf
(
dom
:
:
Element
&
aRemovingContainerElement
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
EnsureHardLineEndsWithLastChildOf
(
dom
:
:
Element
&
aRemovingContainerElement
)
;
enum
class
EditTarget
{
OnlyDescendantsExceptTable
NodeAndDescendantsExceptTable
}
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
RemoveAlignFromDescendants
(
Element
&
aElement
const
nsAString
&
aAlignType
EditTarget
aEditTarget
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SetBlockElementAlign
(
Element
&
aBlockOrHRElement
const
nsAString
&
aAlignType
EditTarget
aEditTarget
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
EditActionResult
AlignContentsAtSelectionWithEmptyDivElement
(
const
nsAString
&
aAlignType
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
AlignNodesAndDescendants
(
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aArrayOfContents
const
nsAString
&
aAlignType
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
AlignContentsAtSelection
(
const
nsAString
&
aAlignType
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
EditActionResult
AlignAsSubAction
(
const
nsAString
&
aAlignType
)
;
bool
StartOrEndOfSelectionRangesIsIn
(
nsIContent
&
aContent
)
const
;
template
<
typename
PT
typename
CT
>
nsIContent
*
FindNearEditableContent
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
nsIEditor
:
:
EDirection
aDirection
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
AdjustCaretPositionAndEnsurePaddingBRElement
(
nsIEditor
:
:
EDirection
aDirectionAndAmount
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
EnsureSelectionInBodyOrDocumentElement
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
InsertBRElementToEmptyListItemsAndTableCellsInRange
(
const
RawRangeBoundary
&
aStartRef
const
RawRangeBoundary
&
aEndRef
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
RemoveEmptyNodesIn
(
nsRange
&
aRange
)
;
void
SetSelectionInterlinePosition
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
EnsureCaretInBlockElement
(
dom
:
:
Element
&
aElement
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
OnEndHandlingTopLevelEditSubActionInternal
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
MoveSelectedContentsToDivElementToMakeItAbsolutePosition
(
RefPtr
<
Element
>
*
aTargetElement
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
EditActionResult
SetSelectionToAbsoluteAsSubAction
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
EditActionResult
SetSelectionToStaticAsSubAction
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
EditActionResult
AddZIndexAsSubAction
(
int32_t
aChange
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
OnDocumentModified
(
)
;
protected
:
MOZ_CAN_RUN_SCRIPT
virtual
void
OnStartToHandleTopLevelEditSubAction
(
EditSubAction
aTopLevelEditSubAction
nsIEditor
:
:
EDirection
aDirectionOfTopLevelEditSubAction
ErrorResult
&
aRv
)
override
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
OnEndHandlingTopLevelEditSubAction
(
)
override
;
protected
:
virtual
~
HTMLEditor
(
)
;
template
<
typename
PT
typename
CT
>
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
MOZ_NEVER_INLINE_DEBUG
nsresult
CollapseSelectionTo
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
ErrorResult
error
;
CollapseSelectionTo
(
aPoint
error
)
;
return
error
.
StealNSResult
(
)
;
}
template
<
typename
PT
typename
CT
>
MOZ_CAN_RUN_SCRIPT
MOZ_NEVER_INLINE_DEBUG
void
CollapseSelectionTo
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
ErrorResult
&
aRv
)
const
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
MOZ_KnownLive
(
SelectionRefPtr
(
)
)
-
>
CollapseInLimiter
(
aPoint
aRv
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
aRv
=
NS_ERROR_EDITOR_DESTROYED
;
return
;
}
NS_WARNING_ASSERTION
(
!
aRv
.
Failed
(
)
"
Selection
:
:
CollapseInLimiter
(
)
failed
"
)
;
}
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
MOZ_NEVER_INLINE_DEBUG
nsresult
CollapseSelectionToStartOf
(
nsINode
&
aNode
)
{
return
CollapseSelectionTo
(
EditorRawDOMPoint
(
&
aNode
0
)
)
;
}
MOZ_CAN_RUN_SCRIPT
MOZ_NEVER_INLINE_DEBUG
void
CollapseSelectionToStartOf
(
nsINode
&
aNode
ErrorResult
&
aRv
)
const
{
CollapseSelectionTo
(
EditorRawDOMPoint
(
&
aNode
0
)
aRv
)
;
}
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
InitEditorContentAndSelection
(
)
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
SelectAllInternal
(
)
override
;
MOZ_CAN_RUN_SCRIPT
nsresult
SelectContentInternal
(
nsIContent
&
aContentToSelect
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
CollapseSelectionAfter
(
Element
&
aElement
)
;
Element
*
GetInclusiveAncestorByTagNameAtSelection
(
const
nsStaticAtom
&
aTagName
)
const
;
Element
*
GetInclusiveAncestorByTagNameInternal
(
const
nsStaticAtom
&
aTagName
nsIContent
&
aContent
)
const
;
already_AddRefed
<
Element
>
GetSelectedElement
(
const
nsAtom
*
aTagName
ErrorResult
&
aRv
)
;
Element
*
GetFirstTableRowElement
(
Element
&
aTableOrElementInTable
ErrorResult
&
aRv
)
const
;
Element
*
GetNextTableRowElement
(
Element
&
aTableRowElement
ErrorResult
&
aRv
)
const
;
struct
CellData
;
struct
MOZ_STACK_CLASS
CellIndexes
final
{
int32_t
mRow
;
int32_t
mColumn
;
MOZ_CAN_RUN_SCRIPT
CellIndexes
(
Element
&
aCellElement
PresShell
*
aPresShell
ErrorResult
&
aRv
)
:
mRow
(
-
1
)
mColumn
(
-
1
)
{
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
Update
(
aCellElement
aPresShell
aRv
)
;
}
MOZ_CAN_RUN_SCRIPT
void
Update
(
Element
&
aCellElement
PresShell
*
aPresShell
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
CellIndexes
(
HTMLEditor
&
aHTMLEditor
Selection
&
aSelection
ErrorResult
&
aRv
)
:
mRow
(
-
1
)
mColumn
(
-
1
)
{
Update
(
aHTMLEditor
aSelection
aRv
)
;
}
MOZ_CAN_RUN_SCRIPT
void
Update
(
HTMLEditor
&
aHTMLEditor
Selection
&
aSelection
ErrorResult
&
aRv
)
;
bool
operator
=
=
(
const
CellIndexes
&
aOther
)
const
{
return
mRow
=
=
aOther
.
mRow
&
&
mColumn
=
=
aOther
.
mColumn
;
}
bool
operator
!
=
(
const
CellIndexes
&
aOther
)
const
{
return
mRow
!
=
aOther
.
mRow
|
|
mColumn
!
=
aOther
.
mColumn
;
}
private
:
CellIndexes
(
)
:
mRow
(
-
1
)
mColumn
(
-
1
)
{
}
friend
struct
CellData
;
}
;
struct
MOZ_STACK_CLASS
CellData
final
{
RefPtr
<
Element
>
mElement
;
CellIndexes
mCurrent
;
CellIndexes
mFirst
;
int32_t
mRowSpan
;
int32_t
mColSpan
;
int32_t
mEffectiveRowSpan
;
int32_t
mEffectiveColSpan
;
bool
mIsSelected
;
CellData
(
)
:
mRowSpan
(
-
1
)
mColSpan
(
-
1
)
mEffectiveRowSpan
(
-
1
)
mEffectiveColSpan
(
-
1
)
mIsSelected
(
false
)
{
}
CellData
(
HTMLEditor
&
aHTMLEditor
Element
&
aTableElement
int32_t
aRowIndex
int32_t
aColumnIndex
ErrorResult
&
aRv
)
{
Update
(
aHTMLEditor
aTableElement
aRowIndex
aColumnIndex
aRv
)
;
}
CellData
(
HTMLEditor
&
aHTMLEditor
Element
&
aTableElement
const
CellIndexes
&
aIndexes
ErrorResult
&
aRv
)
{
Update
(
aHTMLEditor
aTableElement
aIndexes
aRv
)
;
}
void
Update
(
HTMLEditor
&
aHTMLEditor
Element
&
aTableElement
int32_t
aRowIndex
int32_t
aColumnIndex
ErrorResult
&
aRv
)
{
mCurrent
.
mRow
=
aRowIndex
;
mCurrent
.
mColumn
=
aColumnIndex
;
Update
(
aHTMLEditor
aTableElement
aRv
)
;
}
void
Update
(
HTMLEditor
&
aHTMLEditor
Element
&
aTableElement
const
CellIndexes
&
aIndexes
ErrorResult
&
aRv
)
{
mCurrent
=
aIndexes
;
Update
(
aHTMLEditor
aTableElement
aRv
)
;
}
void
Update
(
HTMLEditor
&
aHTMLEditor
Element
&
aTableElement
ErrorResult
&
aRv
)
;
bool
FailedOrNotFound
(
)
const
{
return
!
mElement
;
}
bool
IsSpannedFromOtherRowOrColumn
(
)
const
{
return
mElement
&
&
mCurrent
!
=
mFirst
;
}
bool
IsSpannedFromOtherColumn
(
)
const
{
return
mElement
&
&
mCurrent
.
mColumn
!
=
mFirst
.
mColumn
;
}
bool
IsSpannedFromOtherRow
(
)
const
{
return
mElement
&
&
mCurrent
.
mRow
!
=
mFirst
.
mRow
;
}
int32_t
NextColumnIndex
(
)
const
{
if
(
NS_WARN_IF
(
FailedOrNotFound
(
)
)
)
{
return
-
1
;
}
return
mCurrent
.
mColumn
+
mEffectiveColSpan
;
}
int32_t
NextRowIndex
(
)
const
{
if
(
NS_WARN_IF
(
FailedOrNotFound
(
)
)
)
{
return
-
1
;
}
return
mCurrent
.
mRow
+
mEffectiveRowSpan
;
}
int32_t
LastColumnIndex
(
)
const
{
if
(
NS_WARN_IF
(
FailedOrNotFound
(
)
)
)
{
return
-
1
;
}
return
NextColumnIndex
(
)
-
1
;
}
int32_t
LastRowIndex
(
)
const
{
if
(
NS_WARN_IF
(
FailedOrNotFound
(
)
)
)
{
return
-
1
;
}
return
NextRowIndex
(
)
-
1
;
}
int32_t
NumberOfPrecedingColmuns
(
)
const
{
if
(
NS_WARN_IF
(
FailedOrNotFound
(
)
)
)
{
return
-
1
;
}
return
mCurrent
.
mColumn
-
mFirst
.
mColumn
;
}
int32_t
NumberOfPrecedingRows
(
)
const
{
if
(
NS_WARN_IF
(
FailedOrNotFound
(
)
)
)
{
return
-
1
;
}
return
mCurrent
.
mRow
-
mFirst
.
mRow
;
}
int32_t
NumberOfFollowingColumns
(
)
const
{
if
(
NS_WARN_IF
(
FailedOrNotFound
(
)
)
)
{
return
-
1
;
}
return
mEffectiveColSpan
-
1
;
}
int32_t
NumberOfFollowingRows
(
)
const
{
if
(
NS_WARN_IF
(
FailedOrNotFound
(
)
)
)
{
return
-
1
;
}
return
mEffectiveRowSpan
-
1
;
}
}
;
struct
MOZ_STACK_CLASS
TableSize
final
{
int32_t
mRowCount
;
int32_t
mColumnCount
;
TableSize
(
HTMLEditor
&
aHTMLEditor
Element
&
aTableOrElementInTable
ErrorResult
&
aRv
)
:
mRowCount
(
-
1
)
mColumnCount
(
-
1
)
{
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
Update
(
aHTMLEditor
aTableOrElementInTable
aRv
)
;
}
void
Update
(
HTMLEditor
&
aHTMLEditor
Element
&
aTableOrElementInTable
ErrorResult
&
aRv
)
;
bool
IsEmpty
(
)
const
{
return
!
mRowCount
|
|
!
mColumnCount
;
}
}
;
Element
*
GetTableCellElementAt
(
Element
&
aTableElement
const
CellIndexes
&
aCellIndexes
)
const
{
return
GetTableCellElementAt
(
aTableElement
aCellIndexes
.
mRow
aCellIndexes
.
mColumn
)
;
}
Element
*
GetTableCellElementAt
(
Element
&
aTableElement
int32_t
aRowIndex
int32_t
aColumnIndex
)
const
;
already_AddRefed
<
Element
>
GetSelectedOrParentTableElement
(
ErrorResult
&
aRv
bool
*
aIsCellSelected
=
nullptr
)
const
;
MOZ_CAN_RUN_SCRIPT
nsresult
PasteInternal
(
int32_t
aClipboardType
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
InsertWithQuotationsAsSubAction
(
const
nsAString
&
aQuotedText
)
final
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
InsertAsCitedQuotationInternal
(
const
nsAString
&
aQuotedText
const
nsAString
&
aCitation
bool
aInsertHTML
nsINode
*
*
aNodeInserted
)
;
MOZ_CAN_RUN_SCRIPT
EditorDOMPoint
InsertNodeIntoProperAncestorWithTransaction
(
nsIContent
&
aNode
const
EditorDOMPoint
&
aPointToInsert
SplitAtEdges
aSplitAtEdges
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertBRElementAtSelectionWithTransaction
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertTextWithQuotationsInternal
(
const
nsAString
&
aStringToInsert
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
ReplaceContainerWithTransactionInternal
(
Element
&
aElement
nsAtom
&
aTagName
nsAtom
&
aAttribute
const
nsAString
&
aAttributeValue
bool
aCloneAllAttributes
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
InsertContainerWithTransactionInternal
(
nsIContent
&
aContent
nsAtom
&
aTagName
nsAtom
&
aAttribute
const
nsAString
&
aAttributeValue
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
DeleteSelectionAndCreateElement
(
nsAtom
&
aTag
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteSelectionAndPrepareToCreateNode
(
)
;
MOZ_CAN_RUN_SCRIPT
EditorDOMPoint
PrepareToInsertBRElement
(
const
EditorDOMPoint
&
aPointToInsert
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
EditActionResult
IndentAsSubAction
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
EditActionResult
OutdentAsSubAction
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
LoadHTML
(
const
nsAString
&
aInputString
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SetInlinePropertyInternal
(
nsAtom
&
aProperty
nsAtom
*
aAttribute
const
nsAString
&
aValue
)
;
enum
class
RemoveRelatedElements
{
Yes
No
}
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
RemoveInlinePropertyInternal
(
nsStaticAtom
*
aHTMLProperty
nsStaticAtom
*
aAttribute
RemoveRelatedElements
aRemoveRelatedElements
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
ReplaceHeadContentsWithSourceWithTransaction
(
const
nsAString
&
aSourceToInsert
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
GetCSSBackgroundColorState
(
bool
*
aMixed
nsAString
&
aOutColor
bool
aBlockLevel
)
;
nsresult
GetHTMLBackgroundColorState
(
bool
*
aMixed
nsAString
&
outColor
)
;
nsresult
GetLastCellInRow
(
nsINode
*
aRowNode
nsINode
*
*
aCellNode
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SetCSSBackgroundColorWithTransaction
(
const
nsAString
&
aColor
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetHTMLBackgroundColorWithTransaction
(
const
nsAString
&
aColor
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
void
InitializeSelectionAncestorLimit
(
nsIContent
&
aAncestorLimit
)
const
override
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
SelectEntireDocument
(
)
override
;
MOZ_CAN_RUN_SCRIPT
void
CollapseSelectionToDeepestNonTableFirstChild
(
nsINode
*
aNode
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
MaybeCollapseSelectionAtFirstEditableNode
(
bool
aIgnoreIfSelectionInEditingHost
)
const
;
class
BlobReader
final
{
typedef
EditorBase
:
:
AutoEditActionDataSetter
AutoEditActionDataSetter
;
public
:
BlobReader
(
dom
:
:
BlobImpl
*
aBlob
HTMLEditor
*
aHTMLEditor
bool
aIsSafe
Document
*
aSourceDoc
const
EditorDOMPoint
&
aPointToInsert
bool
aDoDeleteSelection
)
;
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
BlobReader
)
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
BlobReader
)
MOZ_CAN_RUN_SCRIPT
nsresult
OnResult
(
const
nsACString
&
aResult
)
;
nsresult
OnError
(
const
nsAString
&
aErrorName
)
;
private
:
~
BlobReader
(
)
=
default
;
RefPtr
<
dom
:
:
BlobImpl
>
mBlob
;
RefPtr
<
HTMLEditor
>
mHTMLEditor
;
RefPtr
<
dom
:
:
DataTransfer
>
mDataTransfer
;
nsCOMPtr
<
Document
>
mSourceDoc
;
EditorDOMPoint
mPointToInsert
;
EditAction
mEditAction
;
bool
mIsSafe
;
bool
mDoDeleteSelection
;
bool
mNeedsToDispatchBeforeInputEvent
;
}
;
virtual
void
CreateEventListeners
(
)
override
;
virtual
nsresult
InstallEventListeners
(
)
override
;
virtual
void
RemoveEventListeners
(
)
override
;
bool
ShouldReplaceRootElement
(
)
const
;
MOZ_CAN_RUN_SCRIPT
void
NotifyRootChanged
(
)
;
Element
*
GetBodyElement
(
)
const
;
nsINode
*
GetFocusedNode
(
)
const
;
virtual
already_AddRefed
<
Element
>
GetInputEventTargetElement
(
)
const
override
;
MOZ_CAN_RUN_SCRIPT
bool
SetCaretInTableCell
(
dom
:
:
Element
*
aElement
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
EditActionResult
HandleTabKeyPressInTable
(
WidgetKeyboardEvent
*
aKeyboardEvent
)
;
enum
class
InsertPosition
{
eBeforeSelectedCell
eAfterSelectedCell
}
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertTableCellsWithTransaction
(
int32_t
aNumberOfCellsToInsert
InsertPosition
aInsertPosition
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertTableColumnsWithTransaction
(
int32_t
aNumberOfColumnsToInsert
InsertPosition
aInsertPosition
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertTableRowsWithTransaction
(
int32_t
aNumberOfRowsToInsert
InsertPosition
aInsertPosition
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertCell
(
Element
*
aCell
int32_t
aRowSpan
int32_t
aColSpan
bool
aAfter
bool
aIsHeader
Element
*
*
aNewCell
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteSelectedTableColumnsWithTransaction
(
int32_t
aNumberOfColumnsToDelete
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteTableColumnWithTransaction
(
Element
&
aTableElement
int32_t
aColumnIndex
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteSelectedTableRowsWithTransaction
(
int32_t
aNumberOfRowsToDelete
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteTableRowWithTransaction
(
Element
&
aTableElement
int32_t
aRowIndex
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteTableCellWithTransaction
(
int32_t
aNumberOfCellsToDelete
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteAllChildrenWithTransaction
(
Element
&
aElement
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
MergeCells
(
RefPtr
<
Element
>
aTargetCell
RefPtr
<
Element
>
aCellToMerge
bool
aDeleteCellToMerge
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteTableElementAndChildrenWithTransaction
(
Element
&
aTableElement
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetColSpan
(
Element
*
aCell
int32_t
aColSpan
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetRowSpan
(
Element
*
aCell
int32_t
aRowSpan
)
;
static
nsTableWrapperFrame
*
GetTableFrame
(
Element
*
aTable
)
;
int32_t
GetNumberOfCellsInRow
(
Element
&
aTableElement
int32_t
aRowIndex
)
;
bool
AllCellsInRowSelected
(
Element
*
aTable
int32_t
aRowIndex
int32_t
aNumberOfColumns
)
;
bool
AllCellsInColumnSelected
(
Element
*
aTable
int32_t
aColIndex
int32_t
aNumberOfRows
)
;
bool
IsEmptyCell
(
Element
*
aCell
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
GetCellContext
(
Element
*
*
aTable
Element
*
*
aCell
nsINode
*
*
aCellParent
int32_t
*
aCellOffset
int32_t
*
aRowIndex
int32_t
*
aColIndex
)
;
nsresult
GetCellSpansAt
(
Element
*
aTable
int32_t
aRowIndex
int32_t
aColIndex
int32_t
&
aActualRowSpan
int32_t
&
aActualColSpan
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SplitCellIntoColumns
(
Element
*
aTable
int32_t
aRowIndex
int32_t
aColIndex
int32_t
aColSpanLeft
int32_t
aColSpanRight
Element
*
*
aNewCell
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SplitCellIntoRows
(
Element
*
aTable
int32_t
aRowIndex
int32_t
aColIndex
int32_t
aRowSpanAbove
int32_t
aRowSpanBelow
Element
*
*
aNewCell
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
CopyCellBackgroundColor
(
Element
*
aDestCell
Element
*
aSourceCell
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
FixBadRowSpan
(
Element
*
aTable
int32_t
aRowIndex
int32_t
&
aNewRowCount
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
FixBadColSpan
(
Element
*
aTable
int32_t
aColIndex
int32_t
&
aNewColCount
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
NormalizeTableInternal
(
Element
&
aTableOrElementInTable
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SetSelectionAtDocumentStart
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
PasteAsPlaintextQuotation
(
int32_t
aSelectionType
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
InsertAsPlaintextQuotation
(
const
nsAString
&
aQuotedText
bool
aAddCites
nsINode
*
*
aNodeInserted
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertObject
(
const
nsACString
&
aType
nsISupports
*
aObject
bool
aIsSafe
Document
*
aSourceDoc
const
EditorDOMPoint
&
aPointToInsert
bool
aDoDeleteSelection
)
;
virtual
nsresult
PrepareTransferable
(
nsITransferable
*
*
aTransferable
)
override
;
class
HTMLTransferablePreparer
;
nsresult
PrepareHTMLTransferable
(
nsITransferable
*
*
aTransferable
)
const
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertFromTransferable
(
nsITransferable
*
aTransferable
Document
*
aSourceDoc
const
nsAString
&
aContextStr
const
nsAString
&
aInfoStr
bool
aHavePrivateHTMLFlavor
bool
aDoDeleteSelection
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertFromDataTransfer
(
const
dom
:
:
DataTransfer
*
aDataTransfer
int32_t
aIndex
Document
*
aSourceDoc
const
EditorDOMPoint
&
aDroppedAt
bool
aDoDeleteSelection
)
;
static
bool
HavePrivateHTMLFlavor
(
nsIClipboard
*
clipboard
)
;
nsresult
ParseCFHTML
(
const
nsCString
&
aCfhtml
char16_t
*
*
aStuffToPaste
char16_t
*
*
aCfcontext
)
;
class
MOZ_STACK_CLASS
AutoHTMLFragmentBoundariesFixer
final
{
public
:
explicit
AutoHTMLFragmentBoundariesFixer
(
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aArrayOfTopMostChildContents
)
;
private
:
enum
class
StartOrEnd
{
start
end
}
;
void
EnsureBeginsOrEndsWithValidContent
(
StartOrEnd
aStartOrEnd
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aArrayOfTopMostChildContents
)
const
;
static
void
CollectTableAndAnyListElementsOfInclusiveAncestorsAt
(
nsIContent
&
aContent
nsTArray
<
OwningNonNull
<
Element
>
>
&
aOutArrayOfListAndTableElements
)
;
static
Element
*
GetMostDistantAncestorListOrTableElement
(
const
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aArrayOfTopMostChildContents
const
nsTArray
<
OwningNonNull
<
Element
>
>
&
aInclusiveAncestorsTableOrListElements
)
;
Element
*
FindReplaceableTableElement
(
Element
&
aTableElement
nsIContent
&
aContentMaybeInTableElement
)
const
;
bool
IsReplaceableListElement
(
Element
&
aListElement
nsIContent
&
aContentMaybeInListElement
)
const
;
}
;
EditorRawDOMPoint
GetBetterInsertionPointFor
(
nsIContent
&
aContentToInsert
const
EditorRawDOMPoint
&
aPointToInsert
)
const
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
MakeDefinitionListItemWithTransaction
(
nsAtom
&
aTagName
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
FormatBlockContainerAsSubAction
(
nsAtom
&
aTagName
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
RelativeFontChange
(
FontSize
aDir
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
RelativeFontChangeOnNode
(
int32_t
aSizeChange
nsIContent
*
aNode
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
RelativeFontChangeHelper
(
int32_t
aSizeChange
nsINode
*
aNode
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SetInlinePropertyOnTextNode
(
Text
&
aData
uint32_t
aStartOffset
uint32_t
aEndOffset
nsAtom
&
aProperty
nsAtom
*
aAttribute
const
nsAString
&
aValue
)
;
nsresult
PromoteInlineRange
(
nsRange
&
aRange
)
;
nsresult
PromoteRangeIfStartsOrEndsInNamedAnchor
(
nsRange
&
aRange
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
RemoveStyleInside
(
Element
&
aElement
nsAtom
*
aProperty
nsAtom
*
aAttribute
)
;
void
CollectEditableLeafTextNodes
(
Element
&
aElement
nsTArray
<
OwningNonNull
<
Text
>
>
&
aLeafTextNodes
)
const
;
MOZ_CAN_RUN_SCRIPT
bool
IsRemovableParentStyleWithNewSpanElement
(
nsIContent
&
aContent
nsAtom
*
aHTMLProperty
nsAtom
*
aAttribute
)
const
;
bool
IsStartOfContainerOrBeforeFirstEditableChild
(
const
EditorRawDOMPoint
&
aPoint
)
const
;
bool
IsEndOfContainerOrEqualsOrAfterLastEditableChild
(
const
EditorRawDOMPoint
&
aPoint
)
const
;
bool
IsOnlyAttribute
(
const
Element
*
aElement
nsAtom
*
aAttribute
)
;
static
bool
HasStyleOrIdOrClassAttribute
(
Element
&
aElement
)
;
bool
OurWindowHasFocus
(
)
const
;
class
HTMLWithContextInserter
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
DoInsertHTMLWithContext
(
const
nsAString
&
aInputString
const
nsAString
&
aContextStr
const
nsAString
&
aInfoStr
const
nsAString
&
aFlavor
Document
*
aSourceDoc
const
EditorDOMPoint
&
aPointToInsert
bool
aDeleteSelection
bool
aTrustedInput
bool
aClearStyle
=
true
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SetTopAndLeftWithTransaction
(
nsStyledElement
&
aStyledElement
int32_t
aX
int32_t
aY
)
;
MOZ_CAN_RUN_SCRIPT
void
SetSelectionAfterTableEdit
(
Element
*
aTable
int32_t
aRow
int32_t
aCol
int32_t
aDirection
bool
aSelected
)
;
void
RemoveListenerAndDeleteRef
(
const
nsAString
&
aEvent
nsIDOMEventListener
*
aListener
bool
aUseCapture
ManualNACPtr
aElement
PresShell
*
aPresShell
)
;
void
DeleteRefToAnonymousNode
(
ManualNACPtr
aContent
PresShell
*
aPresShell
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
RefreshEditingUI
(
)
;
nsresult
GetElementOrigin
(
Element
&
aElement
int32_t
&
aX
int32_t
&
aY
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
GetPositionAndDimensions
(
Element
&
aElement
int32_t
&
aX
int32_t
&
aY
int32_t
&
aW
int32_t
&
aH
int32_t
&
aBorderLeft
int32_t
&
aBorderTop
int32_t
&
aMarginLeft
int32_t
&
aMarginTop
)
;
bool
IsInObservedSubtree
(
nsIContent
*
aChild
)
;
void
UpdateRootElement
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SetAllResizersPosition
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
ShowResizersInternal
(
Element
&
aResizedElement
)
;
nsresult
HideResizersInternal
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
RefreshResizersInternal
(
)
;
ManualNACPtr
CreateResizer
(
int16_t
aLocation
nsIContent
&
aParentContent
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SetAnonymousElementPositionWithoutTransaction
(
nsStyledElement
&
aStyledElement
int32_t
aX
int32_t
aY
)
;
ManualNACPtr
CreateShadow
(
nsIContent
&
aParentContent
Element
&
aOriginalObject
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SetShadowPosition
(
Element
&
aShadowElement
Element
&
aElement
int32_t
aElementLeft
int32_t
aElementTop
)
;
ManualNACPtr
CreateResizingInfo
(
nsIContent
&
aParentContent
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetResizingInfoPosition
(
int32_t
aX
int32_t
aY
int32_t
aW
int32_t
aH
)
;
enum
class
ResizeAt
{
eX
eY
eWidth
eHeight
}
;
int32_t
GetNewResizingIncrement
(
int32_t
aX
int32_t
aY
ResizeAt
aResizeAt
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
StartResizing
(
Element
&
aHandle
)
;
int32_t
GetNewResizingX
(
int32_t
aX
int32_t
aY
)
;
int32_t
GetNewResizingY
(
int32_t
aX
int32_t
aY
)
;
int32_t
GetNewResizingWidth
(
int32_t
aX
int32_t
aY
)
;
int32_t
GetNewResizingHeight
(
int32_t
aX
int32_t
aY
)
;
void
HideShadowAndInfo
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SetFinalSizeWithTransaction
(
int32_t
aX
int32_t
aY
)
;
void
SetResizeIncrements
(
int32_t
aX
int32_t
aY
int32_t
aW
int32_t
aH
bool
aPreserveRatio
)
;
void
HideAnonymousEditingUIs
(
)
;
void
HideAnonymousEditingUIsIfUnnecessary
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
SetZIndexWithTransaction
(
nsStyledElement
&
aElement
int32_t
aZIndex
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
ShowGrabberInternal
(
Element
&
aElement
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
RefreshGrabberInternal
(
)
;
void
HideGrabberInternal
(
)
;
bool
CreateGrabberInternal
(
nsIContent
&
aParentContent
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
StartMoving
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetFinalPosition
(
int32_t
aX
int32_t
aY
)
;
void
AddPositioningOffset
(
int32_t
&
aX
int32_t
&
aY
)
;
void
SnapToGrid
(
int32_t
&
newX
int32_t
&
newY
)
;
nsresult
GrabberClicked
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
EndMoving
(
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
GetTemporaryStyleForFocusedPositionedElement
(
Element
&
aElement
nsAString
&
aReturn
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
ShowInlineTableEditingUIInternal
(
Element
&
aCellElement
)
;
void
HideInlineTableEditingUIInternal
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
RefreshInlineTableEditingUIInternal
(
)
;
bool
IsEmptyTextNode
(
nsINode
&
aNode
)
const
{
return
aNode
.
IsText
(
)
&
&
IsEmptyNode
(
aNode
)
;
}
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
Result
<
bool
nsresult
>
ElementIsGoodContainerForTheStyle
(
Element
&
aElement
nsAtom
*
aProperty
nsAtom
*
aAttribute
const
nsAString
*
aValue
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetInlinePropertyOnNodeImpl
(
nsIContent
&
aNode
nsAtom
&
aProperty
nsAtom
*
aAttribute
const
nsAString
&
aValue
)
;
typedef
enum
{
eInserted
eAppended
}
InsertedOrAppended
;
MOZ_CAN_RUN_SCRIPT
void
DoContentInserted
(
nsIContent
*
aChild
InsertedOrAppended
aInsertedOrAppended
)
;
ManualNACPtr
CreateAnonymousElement
(
nsAtom
*
aTag
nsIContent
&
aParentContent
const
nsAString
&
aAnonClass
bool
aIsCreatedHidden
)
;
static
nsresult
SlurpBlob
(
dom
:
:
Blob
*
aBlob
nsPIDOMWindowOuter
*
aWindow
BlobReader
*
aBlobReader
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
OnModifyDocumentInternal
(
)
;
already_AddRefed
<
RangeItem
>
GetSelectedRangeItemForTopLevelEditSubAction
(
)
const
{
if
(
!
mSelectedRangeForTopLevelEditSubAction
)
{
mSelectedRangeForTopLevelEditSubAction
=
new
RangeItem
(
)
;
}
return
do_AddRef
(
mSelectedRangeForTopLevelEditSubAction
)
;
}
already_AddRefed
<
nsRange
>
GetChangedRangeForTopLevelEditSubAction
(
)
const
{
if
(
!
mChangedRangeForTopLevelEditSubAction
)
{
mChangedRangeForTopLevelEditSubAction
=
nsRange
:
:
Create
(
GetDocument
(
)
)
;
}
return
do_AddRef
(
mChangedRangeForTopLevelEditSubAction
)
;
}
protected
:
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
nsresult
IndentListChild
(
RefPtr
<
Element
>
*
aCurList
const
EditorDOMPoint
&
aCurPoint
nsIContent
&
aContent
)
;
RefPtr
<
TypeInState
>
mTypeInState
;
RefPtr
<
ComposerCommandsUpdater
>
mComposerCommandsUpdater
;
mutable
RefPtr
<
RangeItem
>
mSelectedRangeForTopLevelEditSubAction
;
mutable
RefPtr
<
nsRange
>
mChangedRangeForTopLevelEditSubAction
;
RefPtr
<
Runnable
>
mPendingRootElementUpdatedRunner
;
RefPtr
<
Runnable
>
mPendingDocumentModifiedRunner
;
bool
mCRInParagraphCreatesParagraph
;
bool
mCSSAware
;
UniquePtr
<
CSSEditUtils
>
mCSSEditUtils
;
bool
mIsObjectResizingEnabled
;
bool
mIsResizing
;
bool
mPreserveRatio
;
bool
mResizedObjectIsAnImage
;
bool
mIsAbsolutelyPositioningEnabled
;
bool
mResizedObjectIsAbsolutelyPositioned
;
bool
mGrabberClicked
;
bool
mIsMoving
;
bool
mSnapToGridEnabled
;
bool
mIsInlineTableEditingEnabled
;
ManualNACPtr
mTopLeftHandle
;
ManualNACPtr
mTopHandle
;
ManualNACPtr
mTopRightHandle
;
ManualNACPtr
mLeftHandle
;
ManualNACPtr
mRightHandle
;
ManualNACPtr
mBottomLeftHandle
;
ManualNACPtr
mBottomHandle
;
ManualNACPtr
mBottomRightHandle
;
RefPtr
<
Element
>
mActivatedHandle
;
ManualNACPtr
mResizingShadow
;
ManualNACPtr
mResizingInfo
;
RefPtr
<
Element
>
mResizedObject
;
int32_t
mOriginalX
;
int32_t
mOriginalY
;
int32_t
mResizedObjectX
;
int32_t
mResizedObjectY
;
int32_t
mResizedObjectWidth
;
int32_t
mResizedObjectHeight
;
int32_t
mResizedObjectMarginLeft
;
int32_t
mResizedObjectMarginTop
;
int32_t
mResizedObjectBorderLeft
;
int32_t
mResizedObjectBorderTop
;
int32_t
mXIncrementFactor
;
int32_t
mYIncrementFactor
;
int32_t
mWidthIncrementFactor
;
int32_t
mHeightIncrementFactor
;
int8_t
mInfoXIncrement
;
int8_t
mInfoYIncrement
;
int32_t
mPositionedObjectX
;
int32_t
mPositionedObjectY
;
int32_t
mPositionedObjectWidth
;
int32_t
mPositionedObjectHeight
;
int32_t
mPositionedObjectMarginLeft
;
int32_t
mPositionedObjectMarginTop
;
int32_t
mPositionedObjectBorderLeft
;
int32_t
mPositionedObjectBorderTop
;
RefPtr
<
Element
>
mAbsolutelyPositionedObject
;
ManualNACPtr
mGrabber
;
ManualNACPtr
mPositioningShadow
;
int32_t
mGridSize
;
RefPtr
<
Element
>
mInlineEditedCell
;
ManualNACPtr
mAddColumnBeforeButton
;
ManualNACPtr
mRemoveColumnButton
;
ManualNACPtr
mAddColumnAfterButton
;
ManualNACPtr
mAddRowBeforeButton
;
ManualNACPtr
mRemoveRowButton
;
ManualNACPtr
mAddRowAfterButton
;
void
AddMouseClickListener
(
Element
*
aElement
)
;
void
RemoveMouseClickListener
(
Element
*
aElement
)
;
bool
mDisabledLinkHandling
=
false
;
bool
mOldLinkHandlingEnabled
=
false
;
bool
mHasBeforeInputBeenCanceled
=
false
;
ParagraphSeparator
mDefaultParagraphSeparator
;
friend
class
AlignStateAtSelection
;
friend
class
AutoSelectionSetterAfterTableEdit
;
friend
class
AutoSetTemporaryAncestorLimiter
;
friend
class
CSSEditUtils
;
friend
class
EditorBase
;
friend
class
EmptyEditableFunctor
;
friend
class
JoinNodeTransaction
;
friend
class
ListElementSelectionState
;
friend
class
ListItemElementSelectionState
;
friend
class
ParagraphStateAtSelection
;
friend
class
SlurpBlobEventListener
;
friend
class
SplitNodeTransaction
;
friend
class
TextEditor
;
friend
class
WhiteSpaceVisibilityKeeper
;
friend
class
WSRunScanner
;
friend
class
WSScanResult
;
}
;
class
MOZ_STACK_CLASS
ListElementSelectionState
final
{
public
:
ListElementSelectionState
(
)
=
delete
;
ListElementSelectionState
(
HTMLEditor
&
aHTMLEditor
ErrorResult
&
aRv
)
;
bool
IsOLElementSelected
(
)
const
{
return
mIsOLElementSelected
;
}
bool
IsULElementSelected
(
)
const
{
return
mIsULElementSelected
;
}
bool
IsDLElementSelected
(
)
const
{
return
mIsDLElementSelected
;
}
bool
IsNotOneTypeListElementSelected
(
)
const
{
return
(
mIsOLElementSelected
+
mIsULElementSelected
+
mIsDLElementSelected
+
mIsOtherContentSelected
)
>
1
;
}
private
:
bool
mIsOLElementSelected
=
false
;
bool
mIsULElementSelected
=
false
;
bool
mIsDLElementSelected
=
false
;
bool
mIsOtherContentSelected
=
false
;
}
;
class
MOZ_STACK_CLASS
ListItemElementSelectionState
final
{
public
:
ListItemElementSelectionState
(
)
=
delete
;
ListItemElementSelectionState
(
HTMLEditor
&
aHTMLEditor
ErrorResult
&
aRv
)
;
bool
IsLIElementSelected
(
)
const
{
return
mIsLIElementSelected
;
}
bool
IsDTElementSelected
(
)
const
{
return
mIsDTElementSelected
;
}
bool
IsDDElementSelected
(
)
const
{
return
mIsDDElementSelected
;
}
bool
IsNotOneTypeDefinitionListItemElementSelected
(
)
const
{
return
(
mIsDTElementSelected
+
mIsDDElementSelected
+
mIsOtherElementSelected
)
>
1
;
}
private
:
bool
mIsLIElementSelected
=
false
;
bool
mIsDTElementSelected
=
false
;
bool
mIsDDElementSelected
=
false
;
bool
mIsOtherElementSelected
=
false
;
}
;
class
MOZ_STACK_CLASS
AlignStateAtSelection
final
{
public
:
AlignStateAtSelection
(
)
=
delete
;
MOZ_CAN_RUN_SCRIPT
AlignStateAtSelection
(
HTMLEditor
&
aHTMLEditor
ErrorResult
&
aRv
)
;
nsIHTMLEditor
:
:
EAlignment
AlignmentAtSelectionStart
(
)
const
{
return
mFirstAlign
;
}
bool
IsSelectionRangesFound
(
)
const
{
return
mFoundSelectionRanges
;
}
private
:
nsIHTMLEditor
:
:
EAlignment
mFirstAlign
=
nsIHTMLEditor
:
:
eLeft
;
bool
mFoundSelectionRanges
=
false
;
}
;
class
MOZ_STACK_CLASS
ParagraphStateAtSelection
final
{
public
:
ParagraphStateAtSelection
(
)
=
delete
;
ParagraphStateAtSelection
(
HTMLEditor
&
aHTMLEditor
ErrorResult
&
aRv
)
;
nsAtom
*
GetFirstParagraphStateAtSelection
(
)
const
{
return
mFirstParagraphState
;
}
bool
IsMixed
(
)
const
{
return
mIsMixed
;
}
private
:
using
EditorType
=
EditorBase
:
:
EditorType
;
static
void
AppendDescendantFormatNodesAndFirstInlineNode
(
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aArrayOfContents
dom
:
:
Element
&
aNonFormatBlockElement
)
;
static
nsresult
CollectEditableFormatNodesInSelection
(
HTMLEditor
&
aHTMLEditor
nsTArray
<
OwningNonNull
<
nsIContent
>
>
&
aArrayOfContents
)
;
RefPtr
<
nsAtom
>
mFirstParagraphState
;
bool
mIsMixed
=
false
;
}
;
}
mozilla
:
:
HTMLEditor
*
nsIEditor
:
:
AsHTMLEditor
(
)
{
return
static_cast
<
mozilla
:
:
EditorBase
*
>
(
this
)
-
>
IsHTMLEditor
(
)
?
static_cast
<
mozilla
:
:
HTMLEditor
*
>
(
this
)
:
nullptr
;
}
const
mozilla
:
:
HTMLEditor
*
nsIEditor
:
:
AsHTMLEditor
(
)
const
{
return
static_cast
<
const
mozilla
:
:
EditorBase
*
>
(
this
)
-
>
IsHTMLEditor
(
)
?
static_cast
<
const
mozilla
:
:
HTMLEditor
*
>
(
this
)
:
nullptr
;
}
#
endif
