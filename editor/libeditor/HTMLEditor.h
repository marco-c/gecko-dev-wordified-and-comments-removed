#
ifndef
mozilla_HTMLEditor_h
#
define
mozilla_HTMLEditor_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ComposerCommandsUpdater
.
h
"
#
include
"
mozilla
/
CSSEditUtils
.
h
"
#
include
"
mozilla
/
ManualNAC
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
TextEditor
.
h
"
#
include
"
mozilla
/
TextEditRules
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
nsAttrName
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsICSSLoaderObserver
.
h
"
#
include
"
nsIDocumentObserver
.
h
"
#
include
"
nsIDOMElement
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsIEditorMailSupport
.
h
"
#
include
"
nsIEditorStyleSheets
.
h
"
#
include
"
nsIEditorUtils
.
h
"
#
include
"
nsIHTMLAbsPosEditor
.
h
"
#
include
"
nsIHTMLEditor
.
h
"
#
include
"
nsIHTMLInlineTableEditor
.
h
"
#
include
"
nsIHTMLObjectResizer
.
h
"
#
include
"
nsITableEditor
.
h
"
#
include
"
nsPoint
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
#
include
"
nsTArray
.
h
"
class
nsDocumentFragment
;
class
nsITransferable
;
class
nsIClipboard
;
class
nsIDOMDocument
;
class
nsIDOMMouseEvent
;
class
nsILinkHandler
;
class
nsTableWrapperFrame
;
class
nsIDOMRange
;
class
nsRange
;
class
nsISelection
;
namespace
mozilla
{
class
AutoSelectionSetterAfterTableEdit
;
class
HTMLEditorEventListener
;
class
HTMLEditRules
;
class
ResizerSelectionListener
;
class
TypeInState
;
class
WSRunObject
;
enum
class
EditAction
:
int32_t
;
struct
PropItem
;
template
<
class
T
>
class
OwningNonNull
;
namespace
dom
{
class
DocumentFragment
;
}
namespace
widget
{
struct
IMEState
;
}
enum
class
ParagraphSeparator
{
div
p
br
}
;
class
HTMLEditor
final
:
public
TextEditor
public
nsIHTMLEditor
public
nsIHTMLObjectResizer
public
nsIHTMLAbsPosEditor
public
nsITableEditor
public
nsIHTMLInlineTableEditor
public
nsIEditorStyleSheets
public
nsICSSLoaderObserver
public
nsStubMutationObserver
{
private
:
enum
BlockTransformationType
{
eNoOp
eReplaceParent
=
1
eInsertParent
=
2
}
;
const
char16_t
kNBSP
=
160
;
public
:
enum
ResizingRequestID
{
kX
=
0
kY
=
1
kWidth
=
2
kHeight
=
3
}
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
HTMLEditor
TextEditor
)
HTMLEditor
(
)
;
bool
GetReturnInParagraphCreatesNewParagraph
(
)
;
Element
*
GetSelectionContainer
(
)
;
NS_IMETHOD
NotifySelectionChanged
(
nsIDOMDocument
*
aDOMDocument
nsISelection
*
aSelection
int16_t
aReason
)
override
;
virtual
nsresult
Init
(
nsIDocument
&
aDoc
Element
*
aRoot
nsISelectionController
*
aSelCon
uint32_t
aFlags
const
nsAString
&
aValue
)
override
;
NS_IMETHOD
BeginningOfDocument
(
)
override
;
virtual
nsresult
HandleKeyPressEvent
(
WidgetKeyboardEvent
*
aKeyboardEvent
)
override
;
virtual
nsIContent
*
GetFocusedContent
(
)
override
;
virtual
already_AddRefed
<
nsIContent
>
GetFocusedContentForIME
(
)
override
;
virtual
bool
IsActiveInDOMWindow
(
)
override
;
virtual
dom
:
:
EventTarget
*
GetDOMEventTarget
(
)
override
;
virtual
Element
*
GetEditorRoot
(
)
override
;
virtual
already_AddRefed
<
nsIContent
>
FindSelectionRoot
(
nsINode
*
aNode
)
override
;
virtual
bool
IsAcceptableInputEvent
(
WidgetGUIEvent
*
aGUIEvent
)
override
;
virtual
already_AddRefed
<
nsIContent
>
GetInputEventTargetContent
(
)
override
;
using
EditorBase
:
:
IsEditable
;
virtual
nsresult
RemoveAttributeOrEquivalent
(
Element
*
aElement
nsAtom
*
aAttribute
bool
aSuppressTransaction
)
override
;
virtual
nsresult
SetAttributeOrEquivalent
(
Element
*
aElement
nsAtom
*
aAttribute
const
nsAString
&
aValue
bool
aSuppressTransaction
)
override
;
using
EditorBase
:
:
RemoveAttributeOrEquivalent
;
using
EditorBase
:
:
SetAttributeOrEquivalent
;
NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
NS_DECL_NSIHTMLEDITOR
NS_DECL_NSIHTMLOBJECTRESIZER
NS_DECL_NSIHTMLABSPOSEDITOR
NS_DECL_NSIHTMLINLINETABLEEDITOR
nsresult
CopyLastEditableChildStyles
(
nsINode
*
aPreviousBlock
nsINode
*
aNewBlock
Element
*
*
aOutBrNode
)
;
nsresult
LoadHTML
(
const
nsAString
&
aInputString
)
;
nsresult
GetCSSBackgroundColorState
(
bool
*
aMixed
nsAString
&
aOutColor
bool
aBlockLevel
)
;
nsresult
GetHTMLBackgroundColorState
(
bool
*
aMixed
nsAString
&
outColor
)
;
NS_DECL_NSIEDITORSTYLESHEETS
NS_DECL_NSIEDITORMAILSUPPORT
NS_DECL_NSITABLEEDITOR
nsresult
GetLastCellInRow
(
nsIDOMNode
*
aRowNode
nsIDOMNode
*
*
aCellNode
)
;
nsresult
GetCellFromRange
(
nsRange
*
aRange
nsIDOMElement
*
*
aCell
)
;
nsresult
SetCSSBackgroundColor
(
const
nsAString
&
aColor
)
;
nsresult
SetHTMLBackgroundColor
(
const
nsAString
&
aColor
)
;
static
Element
*
GetBlockNodeParent
(
nsINode
*
aNode
nsINode
*
aAncestorLimiter
=
nullptr
)
;
static
Element
*
GetBlock
(
nsINode
&
aNode
nsINode
*
aAncestorLimiter
=
nullptr
)
;
void
IsNextCharInNodeWhitespace
(
nsIContent
*
aContent
int32_t
aOffset
bool
*
outIsSpace
bool
*
outIsNBSP
nsIContent
*
*
outNode
=
nullptr
int32_t
*
outOffset
=
0
)
;
void
IsPrevCharInNodeWhitespace
(
nsIContent
*
aContent
int32_t
aOffset
bool
*
outIsSpace
bool
*
outIsNBSP
nsIContent
*
*
outNode
=
nullptr
int32_t
*
outOffset
=
0
)
;
virtual
nsresult
EndUpdateViewBatch
(
)
override
;
NS_IMETHOD
PreDestroy
(
bool
aDestroyingFrames
)
override
;
virtual
nsresult
GetPreferredIMEState
(
widget
:
:
IMEState
*
aState
)
override
;
static
bool
NodeIsBlockStatic
(
const
nsINode
*
aElement
)
;
static
nsresult
NodeIsBlockStatic
(
nsIDOMNode
*
aNode
bool
*
aIsBlock
)
;
bool
AbsolutePositioningEnabled
(
)
const
{
return
mIsAbsolutelyPositioningEnabled
;
}
already_AddRefed
<
Element
>
GetAbsolutelyPositionedSelectionContainer
(
)
;
Element
*
GetPositionedElement
(
)
const
{
return
mAbsolutelyPositionedObject
;
}
nsresult
SetSelectionToAbsoluteOrStatic
(
bool
aEnabled
)
;
nsresult
SetPositionToAbsoluteOrStatic
(
Element
&
aElement
bool
aEnabled
)
;
int32_t
GetZIndex
(
Element
&
aElement
)
;
nsresult
AddZIndex
(
int32_t
aChange
)
;
nsresult
RelativeChangeElementZIndex
(
Element
&
aElement
int32_t
aChange
int32_t
*
aReturn
)
;
nsresult
SetInlineProperty
(
nsAtom
*
aProperty
nsAtom
*
aAttribute
const
nsAString
&
aValue
)
;
nsresult
GetInlineProperty
(
nsAtom
*
aProperty
nsAtom
*
aAttribute
const
nsAString
&
aValue
bool
*
aFirst
bool
*
aAny
bool
*
aAll
)
;
nsresult
GetInlinePropertyWithAttrValue
(
nsAtom
*
aProperty
nsAtom
*
aAttr
const
nsAString
&
aValue
bool
*
aFirst
bool
*
aAny
bool
*
aAll
nsAString
&
outValue
)
;
nsresult
RemoveInlineProperty
(
nsAtom
*
aProperty
nsAtom
*
aAttribute
)
;
void
SetComposerCommandsUpdater
(
ComposerCommandsUpdater
*
aComposerCommandsUpdater
)
{
MOZ_ASSERT
(
!
aComposerCommandsUpdater
|
|
!
mComposerCommandsUpdater
|
|
aComposerCommandsUpdater
=
=
mComposerCommandsUpdater
)
;
mComposerCommandsUpdater
=
aComposerCommandsUpdater
;
}
protected
:
virtual
~
HTMLEditor
(
)
;
using
EditorBase
:
:
IsBlockNode
;
virtual
bool
IsBlockNode
(
nsINode
*
aNode
)
override
;
public
:
NS_IMETHOD
SetFlags
(
uint32_t
aFlags
)
override
;
NS_IMETHOD
Paste
(
int32_t
aSelectionType
)
override
;
NS_IMETHOD
CanPaste
(
int32_t
aSelectionType
bool
*
aCanPaste
)
override
;
NS_IMETHOD
PasteTransferable
(
nsITransferable
*
aTransferable
)
override
;
NS_IMETHOD
CanPasteTransferable
(
nsITransferable
*
aTransferable
bool
*
aCanPaste
)
override
;
NS_IMETHOD
DebugUnitTests
(
int32_t
*
outNumTests
int32_t
*
outNumTestsFailed
)
override
;
NS_IMETHOD
StartOperation
(
EditAction
opID
nsIEditor
:
:
EDirection
aDirection
)
override
;
NS_IMETHOD
EndOperation
(
)
override
;
virtual
bool
TagCanContainTag
(
nsAtom
&
aParentTag
nsAtom
&
aChildTag
)
const
override
;
virtual
bool
IsContainer
(
nsINode
*
aNode
)
override
;
virtual
nsresult
SelectEntireDocument
(
Selection
*
aSelection
)
override
;
nsresult
CollapseAdjacentTextNodes
(
nsRange
*
aRange
)
;
virtual
bool
AreNodesSameType
(
nsIContent
*
aNode1
nsIContent
*
aNode2
)
override
;
NS_IMETHOD
DeleteSelectionImpl
(
EDirection
aAction
EStripWrappers
aStripWrappers
)
override
;
nsresult
DeleteNode
(
nsINode
*
aNode
)
;
NS_IMETHOD
DeleteNode
(
nsIDOMNode
*
aNode
)
override
;
nsresult
DeleteText
(
nsGenericDOMDataNode
&
aTextNode
uint32_t
aOffset
uint32_t
aLength
)
;
virtual
nsresult
InsertTextImpl
(
nsIDocument
&
aDocument
const
nsAString
&
aStringToInsert
const
EditorRawDOMPoint
&
aPointToInsert
EditorRawDOMPoint
*
aPointAfterInsertedString
=
nullptr
)
override
;
virtual
bool
IsModifiableNode
(
nsINode
*
aNode
)
override
;
NS_IMETHOD
SelectAll
(
)
override
;
NS_IMETHOD
StyleSheetLoaded
(
StyleSheet
*
aSheet
bool
aWasAlternate
nsresult
aStatus
)
override
;
NS_IMETHOD
TypedText
(
const
nsAString
&
aString
ETypingAction
aAction
)
override
;
EditorDOMPoint
InsertNodeIntoProperAncestor
(
nsIContent
&
aNode
const
EditorRawDOMPoint
&
aPointToInsert
SplitAtEdges
aSplitAtEdges
)
;
void
CollapseSelectionToDeepestNonTableFirstChild
(
Selection
*
aSelection
nsINode
*
aNode
)
;
bool
IsInVisibleTextFrames
(
dom
:
:
Text
&
aText
)
;
bool
IsVisibleTextNode
(
Text
&
aText
)
;
nsresult
IsEmptyNode
(
nsIDOMNode
*
aNode
bool
*
outIsEmptyBlock
bool
aMozBRDoesntCount
=
false
bool
aListOrCellNotEmpty
=
false
bool
aSafeToAskFrames
=
false
)
;
nsresult
IsEmptyNode
(
nsINode
*
aNode
bool
*
outIsEmptyBlock
bool
aMozBRDoesntCount
=
false
bool
aListOrCellNotEmpty
=
false
bool
aSafeToAskFrames
=
false
)
;
nsresult
IsEmptyNodeImpl
(
nsINode
*
aNode
bool
*
outIsEmptyBlock
bool
aMozBRDoesntCount
bool
aListOrCellNotEmpty
bool
aSafeToAskFrames
bool
*
aSeenBR
)
;
bool
EnableExistingStyleSheet
(
const
nsAString
&
aURL
)
;
StyleSheet
*
GetStyleSheetForURL
(
const
nsAString
&
aURL
)
;
void
GetURLForStyleSheet
(
StyleSheet
*
aStyleSheet
nsAString
&
aURL
)
;
nsresult
AddNewStyleSheetToList
(
const
nsAString
&
aURL
StyleSheet
*
aStyleSheet
)
;
nsresult
RemoveStyleSheetFromList
(
const
nsAString
&
aURL
)
;
bool
IsCSSEnabled
(
)
const
{
return
mCSSAware
&
&
mCSSEditUtils
&
&
mCSSEditUtils
-
>
IsCSSPrefChecked
(
)
;
}
static
bool
HasAttributes
(
Element
*
aElement
)
{
MOZ_ASSERT
(
aElement
)
;
uint32_t
attrCount
=
aElement
-
>
GetAttrCount
(
)
;
return
attrCount
>
1
|
|
(
1
=
=
attrCount
&
&
!
aElement
-
>
GetAttrNameAt
(
0
)
-
>
Equals
(
nsGkAtoms
:
:
mozdirty
)
)
;
}
ParagraphSeparator
GetDefaultParagraphSeparator
(
)
const
{
return
mDefaultParagraphSeparator
;
}
void
SetDefaultParagraphSeparator
(
ParagraphSeparator
aSep
)
{
mDefaultParagraphSeparator
=
aSep
;
}
nsresult
OnMouseDown
(
int32_t
aX
int32_t
aY
nsIDOMElement
*
aTarget
nsIDOMEvent
*
aMouseEvent
)
;
nsresult
OnMouseUp
(
int32_t
aX
int32_t
aY
nsIDOMElement
*
aTarget
)
;
nsresult
OnMouseMove
(
nsIDOMMouseEvent
*
aMouseEvent
)
;
nsresult
DoInlineTableEditingAction
(
const
Element
&
aUIAnonymousElement
)
;
protected
:
class
BlobReader
final
:
public
nsIEditorBlobListener
{
public
:
BlobReader
(
dom
:
:
BlobImpl
*
aBlob
HTMLEditor
*
aHTMLEditor
bool
aIsSafe
nsIDOMDocument
*
aSourceDoc
nsIDOMNode
*
aDestinationNode
int32_t
aDestOffset
bool
aDoDeleteSelection
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIEDITORBLOBLISTENER
private
:
~
BlobReader
(
)
{
}
RefPtr
<
dom
:
:
BlobImpl
>
mBlob
;
RefPtr
<
HTMLEditor
>
mHTMLEditor
;
bool
mIsSafe
;
nsCOMPtr
<
nsIDOMDocument
>
mSourceDoc
;
nsCOMPtr
<
nsIDOMNode
>
mDestinationNode
;
int32_t
mDestOffset
;
bool
mDoDeleteSelection
;
}
;
NS_IMETHOD
InitRules
(
)
override
;
virtual
void
CreateEventListeners
(
)
override
;
virtual
nsresult
InstallEventListeners
(
)
override
;
virtual
void
RemoveEventListeners
(
)
override
;
bool
ShouldReplaceRootElement
(
)
;
void
NotifyRootChanged
(
)
;
Element
*
GetBodyElement
(
)
;
already_AddRefed
<
nsINode
>
GetFocusedNode
(
)
;
bool
SetCaretInTableCell
(
nsIDOMElement
*
aElement
)
;
nsresult
TabInTable
(
bool
inIsShift
bool
*
outHandled
)
;
nsresult
InsertBR
(
)
;
nsresult
InsertCell
(
nsIDOMElement
*
aCell
int32_t
aRowSpan
int32_t
aColSpan
bool
aAfter
bool
aIsHeader
nsIDOMElement
*
*
aNewCell
)
;
nsresult
DeleteRow
(
nsIDOMElement
*
aTable
int32_t
aRowIndex
)
;
nsresult
DeleteColumn
(
nsIDOMElement
*
aTable
int32_t
aColIndex
)
;
nsresult
DeleteCellContents
(
nsIDOMElement
*
aCell
)
;
nsresult
MergeCells
(
nsCOMPtr
<
nsIDOMElement
>
aTargetCell
nsCOMPtr
<
nsIDOMElement
>
aCellToMerge
bool
aDeleteCellToMerge
)
;
nsresult
DeleteTable2
(
nsIDOMElement
*
aTable
Selection
*
aSelection
)
;
nsresult
SetColSpan
(
nsIDOMElement
*
aCell
int32_t
aColSpan
)
;
nsresult
SetRowSpan
(
nsIDOMElement
*
aCell
int32_t
aRowSpan
)
;
nsTableWrapperFrame
*
GetTableFrame
(
nsIDOMElement
*
aTable
)
;
int32_t
GetNumberOfCellsInRow
(
nsIDOMElement
*
aTable
int32_t
rowIndex
)
;
bool
AllCellsInRowSelected
(
nsIDOMElement
*
aTable
int32_t
aRowIndex
int32_t
aNumberOfColumns
)
;
bool
AllCellsInColumnSelected
(
nsIDOMElement
*
aTable
int32_t
aColIndex
int32_t
aNumberOfRows
)
;
bool
IsEmptyCell
(
Element
*
aCell
)
;
nsresult
GetCellContext
(
Selection
*
*
aSelection
nsIDOMElement
*
*
aTable
nsIDOMElement
*
*
aCell
nsIDOMNode
*
*
aCellParent
int32_t
*
aCellOffset
int32_t
*
aRowIndex
int32_t
*
aColIndex
)
;
nsresult
GetCellSpansAt
(
nsIDOMElement
*
aTable
int32_t
aRowIndex
int32_t
aColIndex
int32_t
&
aActualRowSpan
int32_t
&
aActualColSpan
)
;
nsresult
SplitCellIntoColumns
(
nsIDOMElement
*
aTable
int32_t
aRowIndex
int32_t
aColIndex
int32_t
aColSpanLeft
int32_t
aColSpanRight
nsIDOMElement
*
*
aNewCell
)
;
nsresult
SplitCellIntoRows
(
nsIDOMElement
*
aTable
int32_t
aRowIndex
int32_t
aColIndex
int32_t
aRowSpanAbove
int32_t
aRowSpanBelow
nsIDOMElement
*
*
aNewCell
)
;
nsresult
CopyCellBackgroundColor
(
nsIDOMElement
*
destCell
nsIDOMElement
*
sourceCell
)
;
nsresult
FixBadRowSpan
(
nsIDOMElement
*
aTable
int32_t
aRowIndex
int32_t
&
aNewRowCount
)
;
nsresult
FixBadColSpan
(
nsIDOMElement
*
aTable
int32_t
aColIndex
int32_t
&
aNewColCount
)
;
nsresult
SetSelectionAtDocumentStart
(
Selection
*
aSelection
)
;
nsresult
GetTableSize
(
Element
*
aTable
int32_t
*
aRowCount
int32_t
*
aColCount
)
;
static
Element
*
GetEnclosingTable
(
nsINode
*
aNode
)
;
static
nsIDOMNode
*
GetEnclosingTable
(
nsIDOMNode
*
aNode
)
;
bool
IsTextPropertySetByContent
(
nsINode
*
aNode
nsAtom
*
aProperty
nsAtom
*
aAttribute
const
nsAString
*
aValue
nsAString
*
outValue
=
nullptr
)
;
nsresult
PasteAsPlaintextQuotation
(
int32_t
aSelectionType
)
;
nsresult
InsertAsPlaintextQuotation
(
const
nsAString
&
aQuotedText
bool
aAddCites
nsIDOMNode
*
*
aNodeInserted
)
;
nsresult
InsertObject
(
const
nsACString
&
aType
nsISupports
*
aObject
bool
aIsSafe
nsIDOMDocument
*
aSourceDoc
nsIDOMNode
*
aDestinationNode
int32_t
aDestOffset
bool
aDoDeleteSelection
)
;
NS_IMETHOD
PrepareTransferable
(
nsITransferable
*
*
transferable
)
override
;
nsresult
PrepareHTMLTransferable
(
nsITransferable
*
*
transferable
)
;
nsresult
InsertFromTransferable
(
nsITransferable
*
transferable
nsIDOMDocument
*
aSourceDoc
const
nsAString
&
aContextStr
const
nsAString
&
aInfoStr
bool
havePrivateHTMLFlavor
nsIDOMNode
*
aDestinationNode
int32_t
aDestinationOffset
bool
aDoDeleteSelection
)
;
virtual
nsresult
InsertFromDataTransfer
(
dom
:
:
DataTransfer
*
aDataTransfer
int32_t
aIndex
nsIDOMDocument
*
aSourceDoc
nsIDOMNode
*
aDestinationNode
int32_t
aDestOffset
bool
aDoDeleteSelection
)
override
;
bool
HavePrivateHTMLFlavor
(
nsIClipboard
*
clipboard
)
;
nsresult
ParseCFHTML
(
nsCString
&
aCfhtml
char16_t
*
*
aStuffToPaste
char16_t
*
*
aCfcontext
)
;
bool
IsInLink
(
nsINode
*
aNode
nsCOMPtr
<
nsINode
>
*
outLink
=
nullptr
)
;
nsresult
StripFormattingNodes
(
nsIContent
&
aNode
bool
aOnlyList
=
false
)
;
nsresult
CreateDOMFragmentFromPaste
(
const
nsAString
&
aInputString
const
nsAString
&
aContextStr
const
nsAString
&
aInfoStr
nsCOMPtr
<
nsINode
>
*
outFragNode
nsCOMPtr
<
nsINode
>
*
outStartNode
nsCOMPtr
<
nsINode
>
*
outEndNode
int32_t
*
outStartOffset
int32_t
*
outEndOffset
bool
aTrustedInput
)
;
nsresult
ParseFragment
(
const
nsAString
&
aStr
nsAtom
*
aContextLocalName
nsIDocument
*
aTargetDoc
dom
:
:
DocumentFragment
*
*
aFragment
bool
aTrustedInput
)
;
void
CreateListOfNodesToPaste
(
dom
:
:
DocumentFragment
&
aFragment
nsTArray
<
OwningNonNull
<
nsINode
>
>
&
outNodeList
nsINode
*
aStartContainer
int32_t
aStartOffset
nsINode
*
aEndContainer
int32_t
aEndOffset
)
;
nsresult
CreateTagStack
(
nsTArray
<
nsString
>
&
aTagStack
nsIDOMNode
*
aNode
)
;
enum
class
StartOrEnd
{
start
end
}
;
void
GetListAndTableParents
(
StartOrEnd
aStartOrEnd
nsTArray
<
OwningNonNull
<
nsINode
>
>
&
aNodeList
nsTArray
<
OwningNonNull
<
Element
>
>
&
outArray
)
;
int32_t
DiscoverPartialListsAndTables
(
nsTArray
<
OwningNonNull
<
nsINode
>
>
&
aPasteNodes
nsTArray
<
OwningNonNull
<
Element
>
>
&
aListsAndTables
)
;
nsINode
*
ScanForListAndTableStructure
(
StartOrEnd
aStartOrEnd
nsTArray
<
OwningNonNull
<
nsINode
>
>
&
aNodes
Element
&
aListOrTable
)
;
void
ReplaceOrphanedStructure
(
StartOrEnd
aStartOrEnd
nsTArray
<
OwningNonNull
<
nsINode
>
>
&
aNodeArray
nsTArray
<
OwningNonNull
<
Element
>
>
&
aListAndTableArray
int32_t
aHighWaterMark
)
;
bool
IsVisibleBRElement
(
nsINode
*
aNode
)
;
EditorRawDOMPoint
GetBetterInsertionPointFor
(
nsINode
&
aNodeToInsert
const
EditorRawDOMPoint
&
aPointToInsert
)
;
nsresult
MakeDefinitionItem
(
const
nsAString
&
aItemType
)
;
nsresult
InsertBasicBlock
(
const
nsAString
&
aBlockType
)
;
enum
class
FontSize
{
incr
decr
}
;
nsresult
RelativeFontChange
(
FontSize
aDir
)
;
nsresult
RelativeFontChangeOnTextNode
(
FontSize
aDir
Text
&
aTextNode
int32_t
aStartOffset
int32_t
aEndOffset
)
;
nsresult
RelativeFontChangeOnNode
(
int32_t
aSizeChange
nsIContent
*
aNode
)
;
nsresult
RelativeFontChangeHelper
(
int32_t
aSizeChange
nsINode
*
aNode
)
;
nsresult
SetInlinePropertyOnTextNode
(
Text
&
aData
int32_t
aStartOffset
int32_t
aEndOffset
nsAtom
&
aProperty
nsAtom
*
aAttribute
const
nsAString
&
aValue
)
;
nsresult
SetInlinePropertyOnNode
(
nsIContent
&
aNode
nsAtom
&
aProperty
nsAtom
*
aAttribute
const
nsAString
&
aValue
)
;
nsresult
PromoteInlineRange
(
nsRange
&
aRange
)
;
nsresult
PromoteRangeIfStartsOrEndsInNamedAnchor
(
nsRange
&
aRange
)
;
nsresult
SplitStyleAboveRange
(
nsRange
*
aRange
nsAtom
*
aProperty
nsAtom
*
aAttribute
)
;
nsresult
SplitStyleAbovePoint
(
nsCOMPtr
<
nsINode
>
*
aNode
int32_t
*
aOffset
nsAtom
*
aProperty
nsAtom
*
aAttribute
nsIContent
*
*
aOutLeftNode
=
nullptr
nsIContent
*
*
aOutRightNode
=
nullptr
)
;
nsresult
RemoveStyleInside
(
nsIContent
&
aNode
nsAtom
*
aProperty
nsAtom
*
aAttribute
const
bool
aChildrenOnly
=
false
)
;
bool
NodeIsProperty
(
nsINode
&
aNode
)
;
bool
IsAtFrontOfNode
(
nsINode
&
aNode
int32_t
aOffset
)
;
bool
IsAtEndOfNode
(
nsINode
&
aNode
int32_t
aOffset
)
;
bool
IsOnlyAttribute
(
const
Element
*
aElement
nsAtom
*
aAttribute
)
;
nsresult
RemoveBlockContainer
(
nsIContent
&
aNode
)
;
nsIContent
*
GetPriorHTMLSibling
(
nsINode
*
aNode
)
;
nsIContent
*
GetNextHTMLSibling
(
nsINode
*
aNode
)
;
nsIContent
*
GetPreviousHTMLElementOrText
(
nsINode
&
aNode
)
{
return
GetPreviousHTMLElementOrTextInternal
(
aNode
false
)
;
}
nsIContent
*
GetPreviousHTMLElementOrTextInBlock
(
nsINode
&
aNode
)
{
return
GetPreviousHTMLElementOrTextInternal
(
aNode
true
)
;
}
nsIContent
*
GetPreviousHTMLElementOrText
(
const
EditorRawDOMPoint
&
aPoint
)
{
return
GetPreviousHTMLElementOrTextInternal
(
aPoint
false
)
;
}
nsIContent
*
GetPreviousHTMLElementOrTextInBlock
(
const
EditorRawDOMPoint
&
aPoint
)
{
return
GetPreviousHTMLElementOrTextInternal
(
aPoint
true
)
;
}
nsIContent
*
GetPreviousHTMLElementOrTextInternal
(
nsINode
&
aNode
bool
aNoBlockCrossing
)
;
nsIContent
*
GetPreviousHTMLElementOrTextInternal
(
const
EditorRawDOMPoint
&
aPoint
bool
aNoBlockCrossing
)
;
nsIContent
*
GetPreviousEditableHTMLNode
(
nsINode
&
aNode
)
{
return
GetPreviousEditableHTMLNodeInternal
(
aNode
false
)
;
}
nsIContent
*
GetPreviousEditableHTMLNodeInBlock
(
nsINode
&
aNode
)
{
return
GetPreviousEditableHTMLNodeInternal
(
aNode
true
)
;
}
nsIContent
*
GetPreviousEditableHTMLNode
(
const
EditorRawDOMPoint
&
aPoint
)
{
return
GetPreviousEditableHTMLNodeInternal
(
aPoint
false
)
;
}
nsIContent
*
GetPreviousEditableHTMLNodeInBlock
(
const
EditorRawDOMPoint
&
aPoint
)
{
return
GetPreviousEditableHTMLNodeInternal
(
aPoint
true
)
;
}
nsIContent
*
GetPreviousEditableHTMLNodeInternal
(
nsINode
&
aNode
bool
aNoBlockCrossing
)
;
nsIContent
*
GetPreviousEditableHTMLNodeInternal
(
const
EditorRawDOMPoint
&
aPoint
bool
aNoBlockCrossing
)
;
nsIContent
*
GetNextHTMLElementOrText
(
nsINode
&
aNode
)
{
return
GetNextHTMLElementOrTextInternal
(
aNode
false
)
;
}
nsIContent
*
GetNextHTMLElementOrTextInBlock
(
nsINode
&
aNode
)
{
return
GetNextHTMLElementOrTextInternal
(
aNode
true
)
;
}
nsIContent
*
GetNextHTMLElementOrText
(
const
EditorRawDOMPoint
&
aPoint
)
{
return
GetNextHTMLElementOrTextInternal
(
aPoint
false
)
;
}
nsIContent
*
GetNextHTMLElementOrTextInBlock
(
const
EditorRawDOMPoint
&
aPoint
)
{
return
GetNextHTMLElementOrTextInternal
(
aPoint
true
)
;
}
nsIContent
*
GetNextHTMLElementOrTextInternal
(
nsINode
&
aNode
bool
aNoBlockCrossing
)
;
nsIContent
*
GetNextHTMLElementOrTextInternal
(
const
EditorRawDOMPoint
&
aPoint
bool
aNoBlockCrossing
)
;
nsIContent
*
GetNextEditableHTMLNode
(
nsINode
&
aNode
)
{
return
GetNextEditableHTMLNodeInternal
(
aNode
false
)
;
}
nsIContent
*
GetNextEditableHTMLNodeInBlock
(
nsINode
&
aNode
)
{
return
GetNextEditableHTMLNodeInternal
(
aNode
true
)
;
}
nsIContent
*
GetNextEditableHTMLNode
(
const
EditorRawDOMPoint
&
aPoint
)
{
return
GetNextEditableHTMLNodeInternal
(
aPoint
false
)
;
}
nsIContent
*
GetNextEditableHTMLNodeInBlock
(
const
EditorRawDOMPoint
&
aPoint
)
{
return
GetNextEditableHTMLNodeInternal
(
aPoint
true
)
;
}
nsIContent
*
GetNextEditableHTMLNodeInternal
(
nsINode
&
aNode
bool
aNoBlockCrossing
)
;
nsIContent
*
GetNextEditableHTMLNodeInternal
(
const
EditorRawDOMPoint
&
aPoint
bool
aNoBlockCrossing
)
;
bool
IsFirstEditableChild
(
nsINode
*
aNode
)
;
bool
IsLastEditableChild
(
nsINode
*
aNode
)
;
nsIContent
*
GetFirstEditableChild
(
nsINode
&
aNode
)
;
nsIContent
*
GetLastEditableChild
(
nsINode
&
aNode
)
;
nsIContent
*
GetFirstEditableLeaf
(
nsINode
&
aNode
)
;
nsIContent
*
GetLastEditableLeaf
(
nsINode
&
aNode
)
;
nsresult
GetInlinePropertyBase
(
nsAtom
&
aProperty
nsAtom
*
aAttribute
const
nsAString
*
aValue
bool
*
aFirst
bool
*
aAny
bool
*
aAll
nsAString
*
outValue
)
;
bool
HasStyleOrIdOrClass
(
Element
*
aElement
)
;
nsresult
RemoveElementIfNoStyleOrIdOrClass
(
Element
&
aElement
)
;
bool
OurWindowHasFocus
(
)
;
nsresult
DoInsertHTMLWithContext
(
const
nsAString
&
aInputString
const
nsAString
&
aContextStr
const
nsAString
&
aInfoStr
const
nsAString
&
aFlavor
nsIDOMDocument
*
aSourceDoc
nsIDOMNode
*
aDestNode
int32_t
aDestOffset
bool
aDeleteSelection
bool
aTrustedInput
bool
aClearStyle
=
true
)
;
nsresult
ClearStyle
(
nsCOMPtr
<
nsINode
>
*
aNode
int32_t
*
aOffset
nsAtom
*
aProperty
nsAtom
*
aAttribute
)
;
void
SetTopAndLeft
(
Element
&
aElement
int32_t
aX
int32_t
aY
)
;
void
SetSelectionAfterTableEdit
(
nsIDOMElement
*
aTable
int32_t
aRow
int32_t
aCol
int32_t
aDirection
bool
aSelected
)
;
already_AddRefed
<
dom
:
:
Element
>
GetSelectedElement
(
const
nsAString
&
aTagName
)
;
protected
:
RefPtr
<
TypeInState
>
mTypeInState
;
RefPtr
<
ComposerCommandsUpdater
>
mComposerCommandsUpdater
;
bool
mCRInParagraphCreatesParagraph
;
bool
mCSSAware
;
UniquePtr
<
CSSEditUtils
>
mCSSEditUtils
;
int32_t
mSelectedCellIndex
;
nsString
mLastStyleSheetURL
;
nsString
mLastOverrideStyleSheetURL
;
nsTArray
<
nsString
>
mStyleSheetURLs
;
nsTArray
<
RefPtr
<
StyleSheet
>
>
mStyleSheets
;
protected
:
void
RemoveListenerAndDeleteRef
(
const
nsAString
&
aEvent
nsIDOMEventListener
*
aListener
bool
aUseCapture
ManualNACPtr
aElement
nsIPresShell
*
aShell
)
;
void
DeleteRefToAnonymousNode
(
ManualNACPtr
aContent
nsIPresShell
*
aShell
)
;
nsresult
ShowResizersInner
(
Element
&
aResizedElement
)
;
nsresult
GetElementOrigin
(
Element
&
aElement
int32_t
&
aX
int32_t
&
aY
)
;
nsresult
GetPositionAndDimensions
(
Element
&
aElement
int32_t
&
aX
int32_t
&
aY
int32_t
&
aW
int32_t
&
aH
int32_t
&
aBorderLeft
int32_t
&
aBorderTop
int32_t
&
aMarginLeft
int32_t
&
aMarginTop
)
;
bool
IsInObservedSubtree
(
nsIContent
*
aChild
)
;
void
UpdateRootElement
(
)
;
bool
mIsObjectResizingEnabled
;
bool
mIsResizing
;
bool
mPreserveRatio
;
bool
mResizedObjectIsAnImage
;
bool
mIsAbsolutelyPositioningEnabled
;
bool
mResizedObjectIsAbsolutelyPositioned
;
bool
mGrabberClicked
;
bool
mIsMoving
;
bool
mSnapToGridEnabled
;
bool
mIsInlineTableEditingEnabled
;
ManualNACPtr
mTopLeftHandle
;
ManualNACPtr
mTopHandle
;
ManualNACPtr
mTopRightHandle
;
ManualNACPtr
mLeftHandle
;
ManualNACPtr
mRightHandle
;
ManualNACPtr
mBottomLeftHandle
;
ManualNACPtr
mBottomHandle
;
ManualNACPtr
mBottomRightHandle
;
nsCOMPtr
<
Element
>
mActivatedHandle
;
ManualNACPtr
mResizingShadow
;
ManualNACPtr
mResizingInfo
;
nsCOMPtr
<
Element
>
mResizedObject
;
nsCOMPtr
<
nsIDOMEventListener
>
mMouseMotionListenerP
;
nsCOMPtr
<
nsIDOMEventListener
>
mResizeEventListenerP
;
int32_t
mOriginalX
;
int32_t
mOriginalY
;
int32_t
mResizedObjectX
;
int32_t
mResizedObjectY
;
int32_t
mResizedObjectWidth
;
int32_t
mResizedObjectHeight
;
int32_t
mResizedObjectMarginLeft
;
int32_t
mResizedObjectMarginTop
;
int32_t
mResizedObjectBorderLeft
;
int32_t
mResizedObjectBorderTop
;
int32_t
mXIncrementFactor
;
int32_t
mYIncrementFactor
;
int32_t
mWidthIncrementFactor
;
int32_t
mHeightIncrementFactor
;
int8_t
mInfoXIncrement
;
int8_t
mInfoYIncrement
;
nsresult
SetAllResizersPosition
(
)
;
nsresult
ShowResizers
(
Element
&
aResizedElement
)
;
ManualNACPtr
CreateResizer
(
int16_t
aLocation
nsIContent
&
aParentContent
)
;
void
SetAnonymousElementPosition
(
int32_t
aX
int32_t
aY
Element
*
aResizer
)
;
ManualNACPtr
CreateShadow
(
nsIContent
&
aParentContent
Element
&
aOriginalObject
)
;
nsresult
SetShadowPosition
(
Element
*
aShadow
Element
*
aOriginalObject
int32_t
aOriginalObjectX
int32_t
aOriginalObjectY
)
;
ManualNACPtr
CreateResizingInfo
(
nsIContent
&
aParentContent
)
;
nsresult
SetResizingInfoPosition
(
int32_t
aX
int32_t
aY
int32_t
aW
int32_t
aH
)
;
int32_t
GetNewResizingIncrement
(
int32_t
aX
int32_t
aY
int32_t
aID
)
;
nsresult
StartResizing
(
nsIDOMElement
*
aHandle
)
;
int32_t
GetNewResizingX
(
int32_t
aX
int32_t
aY
)
;
int32_t
GetNewResizingY
(
int32_t
aX
int32_t
aY
)
;
int32_t
GetNewResizingWidth
(
int32_t
aX
int32_t
aY
)
;
int32_t
GetNewResizingHeight
(
int32_t
aX
int32_t
aY
)
;
void
HideShadowAndInfo
(
)
;
void
SetFinalSize
(
int32_t
aX
int32_t
aY
)
;
void
SetResizeIncrements
(
int32_t
aX
int32_t
aY
int32_t
aW
int32_t
aH
bool
aPreserveRatio
)
;
void
HideAnonymousEditingUIs
(
)
;
int32_t
mPositionedObjectX
;
int32_t
mPositionedObjectY
;
int32_t
mPositionedObjectWidth
;
int32_t
mPositionedObjectHeight
;
int32_t
mPositionedObjectMarginLeft
;
int32_t
mPositionedObjectMarginTop
;
int32_t
mPositionedObjectBorderLeft
;
int32_t
mPositionedObjectBorderTop
;
nsCOMPtr
<
Element
>
mAbsolutelyPositionedObject
;
ManualNACPtr
mGrabber
;
ManualNACPtr
mPositioningShadow
;
int32_t
mGridSize
;
nsresult
SetPositionToAbsolute
(
Element
&
aElement
)
;
nsresult
SetPositionToStatic
(
Element
&
aElement
)
;
void
SetZIndex
(
Element
&
aElement
int32_t
aZorder
)
;
nsresult
ShowGrabber
(
Element
&
aElement
)
;
void
HideGrabber
(
)
;
ManualNACPtr
CreateGrabber
(
nsIContent
&
aParentContent
)
;
nsresult
StartMoving
(
nsIDOMElement
*
aHandle
)
;
nsresult
SetFinalPosition
(
int32_t
aX
int32_t
aY
)
;
void
AddPositioningOffset
(
int32_t
&
aX
int32_t
&
aY
)
;
void
SnapToGrid
(
int32_t
&
newX
int32_t
&
newY
)
;
nsresult
GrabberClicked
(
)
;
nsresult
EndMoving
(
)
;
nsresult
GetTemporaryStyleForFocusedPositionedElement
(
Element
&
aElement
nsAString
&
aReturn
)
;
RefPtr
<
Element
>
mInlineEditedCell
;
ManualNACPtr
mAddColumnBeforeButton
;
ManualNACPtr
mRemoveColumnButton
;
ManualNACPtr
mAddColumnAfterButton
;
ManualNACPtr
mAddRowBeforeButton
;
ManualNACPtr
mRemoveRowButton
;
ManualNACPtr
mAddRowAfterButton
;
nsresult
ShowInlineTableEditingUI
(
Element
*
aCell
)
;
nsresult
HideInlineTableEditingUI
(
)
;
void
AddMouseClickListener
(
Element
*
aElement
)
;
void
RemoveMouseClickListener
(
Element
*
aElement
)
;
nsCOMPtr
<
nsILinkHandler
>
mLinkHandler
;
ParagraphSeparator
mDefaultParagraphSeparator
;
public
:
friend
class
AutoSelectionSetterAfterTableEdit
;
friend
class
HTMLEditorEventListener
;
friend
class
HTMLEditRules
;
friend
class
TextEditRules
;
friend
class
WSRunObject
;
private
:
bool
IsSimpleModifiableNode
(
nsIContent
*
aContent
nsAtom
*
aProperty
nsAtom
*
aAttribute
const
nsAString
*
aValue
)
;
nsresult
SetInlinePropertyOnNodeImpl
(
nsIContent
&
aNode
nsAtom
&
aProperty
nsAtom
*
aAttribute
const
nsAString
&
aValue
)
;
typedef
enum
{
eInserted
eAppended
}
InsertedOrAppended
;
void
DoContentInserted
(
nsIContent
*
aChild
InsertedOrAppended
)
;
already_AddRefed
<
Element
>
GetElementOrParentByTagName
(
const
nsAString
&
aTagName
nsINode
*
aNode
)
;
already_AddRefed
<
Element
>
CreateElementWithDefaults
(
const
nsAString
&
aTagName
)
;
ManualNACPtr
CreateAnonymousElement
(
nsAtom
*
aTag
nsIContent
&
aParentContent
const
nsAString
&
aAnonClass
bool
aIsCreatedHidden
)
;
}
;
}
mozilla
:
:
HTMLEditor
*
nsIEditor
:
:
AsHTMLEditor
(
)
{
return
static_cast
<
mozilla
:
:
EditorBase
*
>
(
this
)
-
>
mIsHTMLEditorClass
?
static_cast
<
mozilla
:
:
HTMLEditor
*
>
(
this
)
:
nullptr
;
}
const
mozilla
:
:
HTMLEditor
*
nsIEditor
:
:
AsHTMLEditor
(
)
const
{
return
static_cast
<
const
mozilla
:
:
EditorBase
*
>
(
this
)
-
>
mIsHTMLEditorClass
?
static_cast
<
const
mozilla
:
:
HTMLEditor
*
>
(
this
)
:
nullptr
;
}
#
endif
