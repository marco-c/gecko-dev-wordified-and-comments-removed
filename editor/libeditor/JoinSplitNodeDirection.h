#
ifndef
mozilla_JoinSplitNodeDirection_h
#
define
mozilla_JoinSplitNodeDirection_h
#
include
<
iostream
>
namespace
mozilla
{
enum
class
JoinNodesDirection
{
LeftNodeIntoRightNode
RightNodeIntoLeftNode
}
;
static
inline
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aStream
JoinNodesDirection
aJoinNodesDirection
)
{
if
(
aJoinNodesDirection
=
=
JoinNodesDirection
:
:
LeftNodeIntoRightNode
)
{
return
aStream
<
<
"
JoinNodesDirection
:
:
LeftNodeIntoRightNode
"
;
}
if
(
aJoinNodesDirection
=
=
JoinNodesDirection
:
:
RightNodeIntoLeftNode
)
{
return
aStream
<
<
"
JoinNodesDirection
:
:
RightNodeIntoLeftNode
"
;
}
return
aStream
<
<
"
Invalid
value
"
;
}
enum
class
SplitNodeDirection
{
LeftNodeIsNewOne
RightNodeIsNewOne
}
;
static
inline
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aStream
SplitNodeDirection
aSplitNodeDirection
)
{
if
(
aSplitNodeDirection
=
=
SplitNodeDirection
:
:
LeftNodeIsNewOne
)
{
return
aStream
<
<
"
SplitNodeDirection
:
:
LeftNodeIsNewOne
"
;
}
if
(
aSplitNodeDirection
=
=
SplitNodeDirection
:
:
RightNodeIsNewOne
)
{
return
aStream
<
<
"
SplitNodeDirection
:
:
RightNodeIsNewOne
"
;
}
return
aStream
<
<
"
Invalid
value
"
;
}
}
#
endif
