#
include
"
mozilla
/
EditorCommands
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
EditorBase
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
HTMLEditor
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsCommandParams
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIClipboard
.
h
"
#
include
"
nsIEditingSession
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsStringFwd
.
h
"
class
nsISupports
;
namespace
mozilla
{
using
dom
:
:
Element
;
MOZ_CAN_RUN_SCRIPT
static
nsresult
GetListState
(
HTMLEditor
*
aHTMLEditor
bool
*
aMixed
nsAString
&
aLocalName
)
;
#
define
STATE_ENABLED
"
state_enabled
"
#
define
STATE_ALL
"
state_all
"
#
define
STATE_ANY
"
state_any
"
#
define
STATE_MIXED
"
state_mixed
"
#
define
STATE_BEGIN
"
state_begin
"
#
define
STATE_END
"
state_end
"
#
define
STATE_ATTRIBUTE
"
state_attribute
"
#
define
STATE_DATA
"
state_data
"
bool
StateUpdatingCommandBase
:
:
IsCommandEnabled
(
Command
aCommand
TextEditor
*
aTextEditor
)
const
{
if
(
!
aTextEditor
)
{
return
false
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
-
>
AsHTMLEditor
(
)
;
if
(
!
htmlEditor
)
{
return
false
;
}
if
(
!
htmlEditor
-
>
IsSelectionEditable
(
)
)
{
return
false
;
}
if
(
aCommand
=
=
Command
:
:
FormatAbsolutePosition
)
{
return
htmlEditor
-
>
IsAbsolutePositionEditorEnabled
(
)
;
}
return
true
;
}
nsresult
StateUpdatingCommandBase
:
:
DoCommand
(
Command
aCommand
TextEditor
&
aTextEditor
)
const
{
HTMLEditor
*
htmlEditor
=
aTextEditor
.
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_FAILURE
;
}
nsAtom
*
tagName
=
GetTagName
(
aCommand
)
;
if
(
NS_WARN_IF
(
!
tagName
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
return
ToggleState
(
MOZ_KnownLive
(
tagName
)
MOZ_KnownLive
(
htmlEditor
)
)
;
}
nsresult
StateUpdatingCommandBase
:
:
DoCommandParams
(
Command
aCommand
nsCommandParams
*
aParams
TextEditor
&
aTextEditor
)
const
{
return
DoCommand
(
aCommand
aTextEditor
)
;
}
nsresult
StateUpdatingCommandBase
:
:
GetCommandStateParams
(
Command
aCommand
nsCommandParams
&
aParams
TextEditor
*
aTextEditor
nsIEditingSession
*
aEditingSession
)
const
{
if
(
!
aTextEditor
)
{
return
NS_OK
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
-
>
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_FAILURE
;
}
nsAtom
*
tagName
=
GetTagName
(
aCommand
)
;
if
(
NS_WARN_IF
(
!
tagName
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
return
GetCurrentState
(
MOZ_KnownLive
(
tagName
)
MOZ_KnownLive
(
htmlEditor
)
aParams
)
;
}
StaticRefPtr
<
PasteNoFormattingCommand
>
PasteNoFormattingCommand
:
:
sInstance
;
bool
PasteNoFormattingCommand
:
:
IsCommandEnabled
(
Command
aCommand
TextEditor
*
aTextEditor
)
const
{
if
(
!
aTextEditor
)
{
return
false
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
-
>
AsHTMLEditor
(
)
;
if
(
!
htmlEditor
)
{
return
false
;
}
return
htmlEditor
-
>
CanPaste
(
nsIClipboard
:
:
kGlobalClipboard
)
;
}
nsresult
PasteNoFormattingCommand
:
:
DoCommand
(
Command
aCommand
TextEditor
&
aTextEditor
)
const
{
HTMLEditor
*
htmlEditor
=
aTextEditor
.
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_FAILURE
;
}
return
MOZ_KnownLive
(
htmlEditor
)
-
>
PasteNoFormatting
(
nsIClipboard
:
:
kGlobalClipboard
)
;
}
nsresult
PasteNoFormattingCommand
:
:
DoCommandParams
(
Command
aCommand
nsCommandParams
*
aParams
TextEditor
&
aTextEditor
)
const
{
return
DoCommand
(
aCommand
aTextEditor
)
;
}
nsresult
PasteNoFormattingCommand
:
:
GetCommandStateParams
(
Command
aCommand
nsCommandParams
&
aParams
TextEditor
*
aTextEditor
nsIEditingSession
*
aEditingSession
)
const
{
return
aParams
.
SetBool
(
STATE_ENABLED
IsCommandEnabled
(
aCommand
aTextEditor
)
)
;
}
StaticRefPtr
<
StyleUpdatingCommand
>
StyleUpdatingCommand
:
:
sInstance
;
nsresult
StyleUpdatingCommand
:
:
GetCurrentState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
{
if
(
NS_WARN_IF
(
!
aTagName
)
|
|
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
firstOfSelectionHasProp
=
false
;
bool
anyOfSelectionHasProp
=
false
;
bool
allOfSelectionHasProp
=
false
;
nsresult
rv
=
aHTMLEditor
-
>
GetInlineProperty
(
aTagName
nullptr
EmptyString
(
)
&
firstOfSelectionHasProp
&
anyOfSelectionHasProp
&
allOfSelectionHasProp
)
;
aParams
.
SetBool
(
STATE_ENABLED
NS_SUCCEEDED
(
rv
)
)
;
aParams
.
SetBool
(
STATE_ALL
allOfSelectionHasProp
)
;
aParams
.
SetBool
(
STATE_ANY
anyOfSelectionHasProp
)
;
aParams
.
SetBool
(
STATE_MIXED
anyOfSelectionHasProp
&
&
!
allOfSelectionHasProp
)
;
aParams
.
SetBool
(
STATE_BEGIN
firstOfSelectionHasProp
)
;
aParams
.
SetBool
(
STATE_END
allOfSelectionHasProp
)
;
return
NS_OK
;
}
nsresult
StyleUpdatingCommand
:
:
ToggleState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
)
const
{
if
(
NS_WARN_IF
(
!
aTagName
)
|
|
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
RefPtr
<
nsCommandParams
>
params
=
new
nsCommandParams
(
)
;
bool
doTagRemoval
;
if
(
aTagName
=
=
nsGkAtoms
:
:
href
|
|
aTagName
=
=
nsGkAtoms
:
:
name
)
{
doTagRemoval
=
true
;
}
else
{
nsresult
rv
=
GetCurrentState
(
aTagName
aHTMLEditor
*
params
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
ErrorResult
error
;
doTagRemoval
=
params
-
>
GetBool
(
STATE_ALL
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
return
error
.
StealNSResult
(
)
;
}
}
if
(
doTagRemoval
)
{
if
(
aTagName
=
=
nsGkAtoms
:
:
b
)
{
nsresult
rv
=
aHTMLEditor
-
>
RemoveInlinePropertyAsAction
(
*
nsGkAtoms
:
:
strong
nullptr
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
else
if
(
aTagName
=
=
nsGkAtoms
:
:
i
)
{
nsresult
rv
=
aHTMLEditor
-
>
RemoveInlinePropertyAsAction
(
*
nsGkAtoms
:
:
em
nullptr
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
else
if
(
aTagName
=
=
nsGkAtoms
:
:
strike
)
{
nsresult
rv
=
aHTMLEditor
-
>
RemoveInlinePropertyAsAction
(
*
nsGkAtoms
:
:
s
nullptr
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
nsresult
rv
=
aHTMLEditor
-
>
RemoveInlinePropertyAsAction
(
*
aTagName
nullptr
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
nsresult
rv
=
aHTMLEditor
-
>
SetInlinePropertyAsAction
(
*
aTagName
nullptr
EmptyString
(
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
StaticRefPtr
<
ListCommand
>
ListCommand
:
:
sInstance
;
nsresult
ListCommand
:
:
GetCurrentState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
{
if
(
NS_WARN_IF
(
!
aTagName
)
|
|
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
bMixed
;
nsAutoString
localName
;
nsresult
rv
=
GetListState
(
aHTMLEditor
&
bMixed
localName
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
inList
=
aTagName
-
>
Equals
(
localName
)
;
aParams
.
SetBool
(
STATE_ALL
!
bMixed
&
&
inList
)
;
aParams
.
SetBool
(
STATE_MIXED
bMixed
)
;
aParams
.
SetBool
(
STATE_ENABLED
true
)
;
return
NS_OK
;
}
nsresult
ListCommand
:
:
ToggleState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
)
const
{
if
(
NS_WARN_IF
(
!
aTagName
)
|
|
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsresult
rv
;
RefPtr
<
nsCommandParams
>
params
=
new
nsCommandParams
(
)
;
rv
=
GetCurrentState
(
aTagName
aHTMLEditor
*
params
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
ErrorResult
error
;
bool
inList
=
params
-
>
GetBool
(
STATE_ALL
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
return
error
.
StealNSResult
(
)
;
}
nsDependentAtomString
listType
(
aTagName
)
;
if
(
inList
)
{
rv
=
aHTMLEditor
-
>
RemoveList
(
listType
)
;
}
else
{
rv
=
aHTMLEditor
-
>
MakeOrChangeList
(
listType
false
EmptyString
(
)
)
;
}
return
rv
;
}
StaticRefPtr
<
ListItemCommand
>
ListItemCommand
:
:
sInstance
;
nsresult
ListItemCommand
:
:
GetCurrentState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
{
if
(
NS_WARN_IF
(
!
aTagName
)
|
|
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
bMixed
bLI
bDT
bDD
;
nsresult
rv
=
aHTMLEditor
-
>
GetListItemState
(
&
bMixed
&
bLI
&
bDT
&
bDD
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
inList
=
false
;
if
(
!
bMixed
)
{
if
(
bLI
)
{
inList
=
aTagName
=
=
nsGkAtoms
:
:
li
;
}
else
if
(
bDT
)
{
inList
=
aTagName
=
=
nsGkAtoms
:
:
dt
;
}
else
if
(
bDD
)
{
inList
=
aTagName
=
=
nsGkAtoms
:
:
dd
;
}
}
aParams
.
SetBool
(
STATE_ALL
!
bMixed
&
&
inList
)
;
aParams
.
SetBool
(
STATE_MIXED
bMixed
)
;
return
NS_OK
;
}
nsresult
ListItemCommand
:
:
ToggleState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
)
const
{
if
(
NS_WARN_IF
(
!
aTagName
)
|
|
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
RefPtr
<
nsCommandParams
>
params
=
new
nsCommandParams
(
)
;
GetCurrentState
(
aTagName
aHTMLEditor
*
params
)
;
ErrorResult
error
;
bool
inList
=
params
-
>
GetBool
(
STATE_ALL
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
return
error
.
StealNSResult
(
)
;
}
if
(
inList
)
{
bool
bMixed
;
nsAutoString
localName
;
nsresult
rv
=
GetListState
(
aHTMLEditor
&
bMixed
localName
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
localName
.
IsEmpty
(
)
|
|
bMixed
)
{
return
NS_OK
;
}
return
aHTMLEditor
-
>
RemoveList
(
localName
)
;
}
return
aHTMLEditor
-
>
SetParagraphFormat
(
nsDependentAtomString
(
aTagName
)
)
;
}
StaticRefPtr
<
RemoveListCommand
>
RemoveListCommand
:
:
sInstance
;
bool
RemoveListCommand
:
:
IsCommandEnabled
(
Command
aCommand
TextEditor
*
aTextEditor
)
const
{
if
(
!
aTextEditor
)
{
return
false
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
-
>
AsHTMLEditor
(
)
;
if
(
!
htmlEditor
)
{
return
false
;
}
if
(
!
htmlEditor
-
>
IsSelectionEditable
(
)
)
{
return
false
;
}
bool
bMixed
;
nsAutoString
localName
;
nsresult
rv
=
GetListState
(
MOZ_KnownLive
(
htmlEditor
)
&
bMixed
localName
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
return
bMixed
|
|
!
localName
.
IsEmpty
(
)
;
}
nsresult
RemoveListCommand
:
:
DoCommand
(
Command
aCommand
TextEditor
&
aTextEditor
)
const
{
HTMLEditor
*
htmlEditor
=
aTextEditor
.
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_OK
;
}
return
htmlEditor
-
>
RemoveList
(
EmptyString
(
)
)
;
}
nsresult
RemoveListCommand
:
:
DoCommandParams
(
Command
aCommand
nsCommandParams
*
aParams
TextEditor
&
aTextEditor
)
const
{
return
DoCommand
(
aCommand
aTextEditor
)
;
}
nsresult
RemoveListCommand
:
:
GetCommandStateParams
(
Command
aCommand
nsCommandParams
&
aParams
TextEditor
*
aTextEditor
nsIEditingSession
*
aEditingSession
)
const
{
return
aParams
.
SetBool
(
STATE_ENABLED
IsCommandEnabled
(
aCommand
aTextEditor
)
)
;
}
StaticRefPtr
<
IndentCommand
>
IndentCommand
:
:
sInstance
;
bool
IndentCommand
:
:
IsCommandEnabled
(
Command
aCommand
TextEditor
*
aTextEditor
)
const
{
if
(
!
aTextEditor
)
{
return
false
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
-
>
AsHTMLEditor
(
)
;
if
(
!
htmlEditor
)
{
return
false
;
}
return
htmlEditor
-
>
IsSelectionEditable
(
)
;
}
nsresult
IndentCommand
:
:
DoCommand
(
Command
aCommand
TextEditor
&
aTextEditor
)
const
{
HTMLEditor
*
htmlEditor
=
aTextEditor
.
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_OK
;
}
nsresult
rv
=
MOZ_KnownLive
(
htmlEditor
)
-
>
IndentAsAction
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
nsresult
IndentCommand
:
:
DoCommandParams
(
Command
aCommand
nsCommandParams
*
aParams
TextEditor
&
aTextEditor
)
const
{
return
DoCommand
(
aCommand
aTextEditor
)
;
}
nsresult
IndentCommand
:
:
GetCommandStateParams
(
Command
aCommand
nsCommandParams
&
aParams
TextEditor
*
aTextEditor
nsIEditingSession
*
aEditingSession
)
const
{
return
aParams
.
SetBool
(
STATE_ENABLED
IsCommandEnabled
(
aCommand
aTextEditor
)
)
;
}
StaticRefPtr
<
OutdentCommand
>
OutdentCommand
:
:
sInstance
;
bool
OutdentCommand
:
:
IsCommandEnabled
(
Command
aCommand
TextEditor
*
aTextEditor
)
const
{
if
(
!
aTextEditor
)
{
return
false
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
-
>
AsHTMLEditor
(
)
;
if
(
!
htmlEditor
)
{
return
false
;
}
return
htmlEditor
-
>
IsSelectionEditable
(
)
;
}
nsresult
OutdentCommand
:
:
DoCommand
(
Command
aCommand
TextEditor
&
aTextEditor
)
const
{
HTMLEditor
*
htmlEditor
=
aTextEditor
.
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_OK
;
}
nsresult
rv
=
MOZ_KnownLive
(
htmlEditor
)
-
>
OutdentAsAction
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
nsresult
OutdentCommand
:
:
DoCommandParams
(
Command
aCommand
nsCommandParams
*
aParams
TextEditor
&
aTextEditor
)
const
{
return
DoCommand
(
aCommand
aTextEditor
)
;
}
nsresult
OutdentCommand
:
:
GetCommandStateParams
(
Command
aCommand
nsCommandParams
&
aParams
TextEditor
*
aTextEditor
nsIEditingSession
*
aEditingSession
)
const
{
return
aParams
.
SetBool
(
STATE_ENABLED
IsCommandEnabled
(
aCommand
aTextEditor
)
)
;
}
bool
MultiStateCommandBase
:
:
IsCommandEnabled
(
Command
aCommand
TextEditor
*
aTextEditor
)
const
{
if
(
!
aTextEditor
)
{
return
false
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
-
>
AsHTMLEditor
(
)
;
if
(
!
htmlEditor
)
{
return
false
;
}
return
htmlEditor
-
>
IsSelectionEditable
(
)
;
}
nsresult
MultiStateCommandBase
:
:
DoCommand
(
Command
aCommand
TextEditor
&
aTextEditor
)
const
{
NS_WARNING
(
"
who
is
calling
MultiStateCommandBase
:
:
DoCommand
(
no
implementation
)
?
"
)
;
return
NS_OK
;
}
nsresult
MultiStateCommandBase
:
:
DoCommandParams
(
Command
aCommand
nsCommandParams
*
aParams
TextEditor
&
aTextEditor
)
const
{
HTMLEditor
*
htmlEditor
=
aTextEditor
.
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_FAILURE
;
}
nsAutoString
attribute
;
if
(
aParams
)
{
nsAutoCString
asciiAttribute
;
nsresult
rv
=
aParams
-
>
GetCString
(
STATE_ATTRIBUTE
asciiAttribute
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
CopyASCIItoUTF16
(
asciiAttribute
attribute
)
;
}
else
{
aParams
-
>
GetString
(
STATE_ATTRIBUTE
attribute
)
;
}
}
return
SetState
(
MOZ_KnownLive
(
htmlEditor
)
attribute
)
;
}
nsresult
MultiStateCommandBase
:
:
GetCommandStateParams
(
Command
aCommand
nsCommandParams
&
aParams
TextEditor
*
aTextEditor
nsIEditingSession
*
aEditingSession
)
const
{
if
(
!
aTextEditor
)
{
return
NS_OK
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
-
>
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_FAILURE
;
}
return
GetCurrentState
(
MOZ_KnownLive
(
htmlEditor
)
aParams
)
;
}
StaticRefPtr
<
ParagraphStateCommand
>
ParagraphStateCommand
:
:
sInstance
;
nsresult
ParagraphStateCommand
:
:
GetCurrentState
(
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
{
if
(
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
outMixed
;
nsAutoString
outStateString
;
nsresult
rv
=
aHTMLEditor
-
>
GetParagraphState
(
&
outMixed
outStateString
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsAutoCString
tOutStateString
;
LossyCopyUTF16toASCII
(
outStateString
tOutStateString
)
;
aParams
.
SetBool
(
STATE_MIXED
outMixed
)
;
aParams
.
SetCString
(
STATE_ATTRIBUTE
tOutStateString
)
;
}
return
rv
;
}
nsresult
ParagraphStateCommand
:
:
SetState
(
HTMLEditor
*
aHTMLEditor
const
nsString
&
newState
)
const
{
if
(
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
return
aHTMLEditor
-
>
SetParagraphFormat
(
newState
)
;
}
StaticRefPtr
<
FontFaceStateCommand
>
FontFaceStateCommand
:
:
sInstance
;
nsresult
FontFaceStateCommand
:
:
GetCurrentState
(
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
{
if
(
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsAutoString
outStateString
;
bool
outMixed
;
nsresult
rv
=
aHTMLEditor
-
>
GetFontFaceState
(
&
outMixed
outStateString
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
aParams
.
SetBool
(
STATE_MIXED
outMixed
)
;
aParams
.
SetCString
(
STATE_ATTRIBUTE
NS_ConvertUTF16toUTF8
(
outStateString
)
)
;
}
return
rv
;
}
nsresult
FontFaceStateCommand
:
:
SetState
(
HTMLEditor
*
aHTMLEditor
const
nsString
&
newState
)
const
{
if
(
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
newState
.
EqualsLiteral
(
"
tt
"
)
)
{
nsresult
rv
=
aHTMLEditor
-
>
SetInlinePropertyAsAction
(
*
nsGkAtoms
:
:
tt
nullptr
EmptyString
(
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
aHTMLEditor
-
>
RemoveInlinePropertyAsAction
(
*
nsGkAtoms
:
:
font
nsGkAtoms
:
:
face
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
nsresult
rv
=
aHTMLEditor
-
>
RemoveInlinePropertyAsAction
(
*
nsGkAtoms
:
:
tt
nullptr
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
newState
.
IsEmpty
(
)
|
|
newState
.
EqualsLiteral
(
"
normal
"
)
)
{
rv
=
aHTMLEditor
-
>
RemoveInlinePropertyAsAction
(
*
nsGkAtoms
:
:
font
nsGkAtoms
:
:
face
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
rv
=
aHTMLEditor
-
>
SetInlinePropertyAsAction
(
*
nsGkAtoms
:
:
font
nsGkAtoms
:
:
face
newState
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
StaticRefPtr
<
FontSizeStateCommand
>
FontSizeStateCommand
:
:
sInstance
;
nsresult
FontSizeStateCommand
:
:
GetCurrentState
(
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
{
if
(
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsAutoString
outStateString
;
bool
firstHas
anyHas
allHas
;
nsresult
rv
=
aHTMLEditor
-
>
GetInlinePropertyWithAttrValue
(
nsGkAtoms
:
:
font
nsGkAtoms
:
:
size
EmptyString
(
)
&
firstHas
&
anyHas
&
allHas
outStateString
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
tOutStateString
;
LossyCopyUTF16toASCII
(
outStateString
tOutStateString
)
;
aParams
.
SetBool
(
STATE_MIXED
anyHas
&
&
!
allHas
)
;
aParams
.
SetCString
(
STATE_ATTRIBUTE
tOutStateString
)
;
aParams
.
SetBool
(
STATE_ENABLED
true
)
;
return
rv
;
}
nsresult
FontSizeStateCommand
:
:
SetState
(
HTMLEditor
*
aHTMLEditor
const
nsString
&
newState
)
const
{
if
(
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
!
newState
.
IsEmpty
(
)
&
&
!
newState
.
EqualsLiteral
(
"
normal
"
)
&
&
!
newState
.
EqualsLiteral
(
"
medium
"
)
)
{
nsresult
rv
=
aHTMLEditor
-
>
SetInlinePropertyAsAction
(
*
nsGkAtoms
:
:
font
nsGkAtoms
:
:
size
newState
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
nsresult
rv
=
aHTMLEditor
-
>
RemoveInlinePropertyAsAction
(
*
nsGkAtoms
:
:
font
nsGkAtoms
:
:
size
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
aHTMLEditor
-
>
RemoveInlinePropertyAsAction
(
*
nsGkAtoms
:
:
big
nullptr
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
aHTMLEditor
-
>
RemoveInlinePropertyAsAction
(
*
nsGkAtoms
:
:
small
nullptr
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
StaticRefPtr
<
FontColorStateCommand
>
FontColorStateCommand
:
:
sInstance
;
nsresult
FontColorStateCommand
:
:
GetCurrentState
(
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
{
if
(
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
outMixed
;
nsAutoString
outStateString
;
nsresult
rv
=
aHTMLEditor
-
>
GetFontColorState
(
&
outMixed
outStateString
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
nsAutoCString
tOutStateString
;
LossyCopyUTF16toASCII
(
outStateString
tOutStateString
)
;
aParams
.
SetBool
(
STATE_MIXED
outMixed
)
;
aParams
.
SetCString
(
STATE_ATTRIBUTE
tOutStateString
)
;
return
NS_OK
;
}
nsresult
FontColorStateCommand
:
:
SetState
(
HTMLEditor
*
aHTMLEditor
const
nsString
&
newState
)
const
{
if
(
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
newState
.
IsEmpty
(
)
|
|
newState
.
EqualsLiteral
(
"
normal
"
)
)
{
nsresult
rv
=
aHTMLEditor
-
>
RemoveInlinePropertyAsAction
(
*
nsGkAtoms
:
:
font
nsGkAtoms
:
:
color
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
nsresult
rv
=
aHTMLEditor
-
>
SetInlinePropertyAsAction
(
*
nsGkAtoms
:
:
font
nsGkAtoms
:
:
color
newState
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
StaticRefPtr
<
HighlightColorStateCommand
>
HighlightColorStateCommand
:
:
sInstance
;
nsresult
HighlightColorStateCommand
:
:
GetCurrentState
(
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
{
if
(
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
outMixed
;
nsAutoString
outStateString
;
nsresult
rv
=
aHTMLEditor
-
>
GetHighlightColorState
(
&
outMixed
outStateString
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
tOutStateString
;
LossyCopyUTF16toASCII
(
outStateString
tOutStateString
)
;
aParams
.
SetBool
(
STATE_MIXED
outMixed
)
;
aParams
.
SetCString
(
STATE_ATTRIBUTE
tOutStateString
)
;
return
NS_OK
;
}
nsresult
HighlightColorStateCommand
:
:
SetState
(
HTMLEditor
*
aHTMLEditor
const
nsString
&
newState
)
const
{
if
(
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
newState
.
IsEmpty
(
)
|
|
newState
.
EqualsLiteral
(
"
normal
"
)
)
{
nsresult
rv
=
aHTMLEditor
-
>
RemoveInlinePropertyAsAction
(
*
nsGkAtoms
:
:
font
nsGkAtoms
:
:
bgcolor
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
nsresult
rv
=
aHTMLEditor
-
>
SetInlinePropertyAsAction
(
*
nsGkAtoms
:
:
font
nsGkAtoms
:
:
bgcolor
newState
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
StaticRefPtr
<
BackgroundColorStateCommand
>
BackgroundColorStateCommand
:
:
sInstance
;
nsresult
BackgroundColorStateCommand
:
:
GetCurrentState
(
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
{
if
(
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
outMixed
;
nsAutoString
outStateString
;
nsresult
rv
=
aHTMLEditor
-
>
GetBackgroundColorState
(
&
outMixed
outStateString
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
tOutStateString
;
LossyCopyUTF16toASCII
(
outStateString
tOutStateString
)
;
aParams
.
SetBool
(
STATE_MIXED
outMixed
)
;
aParams
.
SetCString
(
STATE_ATTRIBUTE
tOutStateString
)
;
return
NS_OK
;
}
nsresult
BackgroundColorStateCommand
:
:
SetState
(
HTMLEditor
*
aHTMLEditor
const
nsString
&
newState
)
const
{
if
(
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
return
aHTMLEditor
-
>
SetBackgroundColor
(
newState
)
;
}
StaticRefPtr
<
AlignCommand
>
AlignCommand
:
:
sInstance
;
nsresult
AlignCommand
:
:
GetCurrentState
(
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
{
if
(
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsIHTMLEditor
:
:
EAlignment
firstAlign
;
bool
outMixed
;
nsresult
rv
=
aHTMLEditor
-
>
GetAlignment
(
&
outMixed
&
firstAlign
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoString
outStateString
;
switch
(
firstAlign
)
{
default
:
case
nsIHTMLEditor
:
:
eLeft
:
outStateString
.
AssignLiteral
(
"
left
"
)
;
break
;
case
nsIHTMLEditor
:
:
eCenter
:
outStateString
.
AssignLiteral
(
"
center
"
)
;
break
;
case
nsIHTMLEditor
:
:
eRight
:
outStateString
.
AssignLiteral
(
"
right
"
)
;
break
;
case
nsIHTMLEditor
:
:
eJustify
:
outStateString
.
AssignLiteral
(
"
justify
"
)
;
break
;
}
nsAutoCString
tOutStateString
;
LossyCopyUTF16toASCII
(
outStateString
tOutStateString
)
;
aParams
.
SetBool
(
STATE_MIXED
outMixed
)
;
aParams
.
SetCString
(
STATE_ATTRIBUTE
tOutStateString
)
;
return
NS_OK
;
}
nsresult
AlignCommand
:
:
SetState
(
HTMLEditor
*
aHTMLEditor
const
nsString
&
newState
)
const
{
if
(
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
return
aHTMLEditor
-
>
Align
(
newState
)
;
}
StaticRefPtr
<
AbsolutePositioningCommand
>
AbsolutePositioningCommand
:
:
sInstance
;
nsresult
AbsolutePositioningCommand
:
:
GetCurrentState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
{
if
(
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
!
aHTMLEditor
-
>
IsAbsolutePositionEditorEnabled
(
)
)
{
aParams
.
SetBool
(
STATE_MIXED
false
)
;
aParams
.
SetCString
(
STATE_ATTRIBUTE
EmptyCString
(
)
)
;
return
NS_OK
;
}
RefPtr
<
Element
>
container
=
aHTMLEditor
-
>
GetAbsolutelyPositionedSelectionContainer
(
)
;
aParams
.
SetBool
(
STATE_MIXED
false
)
;
aParams
.
SetCString
(
STATE_ATTRIBUTE
container
?
NS_LITERAL_CSTRING
(
"
absolute
"
)
:
EmptyCString
(
)
)
;
return
NS_OK
;
}
nsresult
AbsolutePositioningCommand
:
:
ToggleState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
)
const
{
if
(
NS_WARN_IF
(
!
aHTMLEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
RefPtr
<
Element
>
container
=
aHTMLEditor
-
>
GetAbsolutelyPositionedSelectionContainer
(
)
;
return
aHTMLEditor
-
>
SetSelectionToAbsoluteOrStatic
(
!
container
)
;
}
StaticRefPtr
<
DecreaseZIndexCommand
>
DecreaseZIndexCommand
:
:
sInstance
;
bool
DecreaseZIndexCommand
:
:
IsCommandEnabled
(
Command
aCommand
TextEditor
*
aTextEditor
)
const
{
if
(
!
aTextEditor
)
{
return
false
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
-
>
AsHTMLEditor
(
)
;
if
(
!
htmlEditor
)
{
return
false
;
}
if
(
!
htmlEditor
-
>
IsAbsolutePositionEditorEnabled
(
)
)
{
return
false
;
}
RefPtr
<
Element
>
positionedElement
=
htmlEditor
-
>
GetPositionedElement
(
)
;
if
(
!
positionedElement
)
{
return
false
;
}
return
htmlEditor
-
>
GetZIndex
(
*
positionedElement
)
>
0
;
}
nsresult
DecreaseZIndexCommand
:
:
DoCommand
(
Command
aCommand
TextEditor
&
aTextEditor
)
const
{
HTMLEditor
*
htmlEditor
=
aTextEditor
.
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_FAILURE
;
}
return
htmlEditor
-
>
AddZIndex
(
-
1
)
;
}
nsresult
DecreaseZIndexCommand
:
:
DoCommandParams
(
Command
aCommand
nsCommandParams
*
aParams
TextEditor
&
aTextEditor
)
const
{
return
DoCommand
(
aCommand
aTextEditor
)
;
}
nsresult
DecreaseZIndexCommand
:
:
GetCommandStateParams
(
Command
aCommand
nsCommandParams
&
aParams
TextEditor
*
aTextEditor
nsIEditingSession
*
aEditingSession
)
const
{
return
aParams
.
SetBool
(
STATE_ENABLED
IsCommandEnabled
(
aCommand
aTextEditor
)
)
;
}
StaticRefPtr
<
IncreaseZIndexCommand
>
IncreaseZIndexCommand
:
:
sInstance
;
bool
IncreaseZIndexCommand
:
:
IsCommandEnabled
(
Command
aCommand
TextEditor
*
aTextEditor
)
const
{
if
(
!
aTextEditor
)
{
return
false
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
-
>
AsHTMLEditor
(
)
;
if
(
!
htmlEditor
)
{
return
false
;
}
if
(
!
htmlEditor
-
>
IsAbsolutePositionEditorEnabled
(
)
)
{
return
false
;
}
return
!
!
htmlEditor
-
>
GetPositionedElement
(
)
;
}
nsresult
IncreaseZIndexCommand
:
:
DoCommand
(
Command
aCommand
TextEditor
&
aTextEditor
)
const
{
HTMLEditor
*
htmlEditor
=
aTextEditor
.
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_FAILURE
;
}
return
htmlEditor
-
>
AddZIndex
(
1
)
;
}
nsresult
IncreaseZIndexCommand
:
:
DoCommandParams
(
Command
aCommand
nsCommandParams
*
aParams
TextEditor
&
aTextEditor
)
const
{
return
DoCommand
(
aCommand
aTextEditor
)
;
}
nsresult
IncreaseZIndexCommand
:
:
GetCommandStateParams
(
Command
aCommand
nsCommandParams
&
aParams
TextEditor
*
aTextEditor
nsIEditingSession
*
aEditingSession
)
const
{
return
aParams
.
SetBool
(
STATE_ENABLED
IsCommandEnabled
(
aCommand
aTextEditor
)
)
;
}
StaticRefPtr
<
RemoveStylesCommand
>
RemoveStylesCommand
:
:
sInstance
;
bool
RemoveStylesCommand
:
:
IsCommandEnabled
(
Command
aCommand
TextEditor
*
aTextEditor
)
const
{
if
(
!
aTextEditor
)
{
return
false
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
-
>
AsHTMLEditor
(
)
;
if
(
!
htmlEditor
)
{
return
false
;
}
return
htmlEditor
-
>
IsSelectionEditable
(
)
;
}
nsresult
RemoveStylesCommand
:
:
DoCommand
(
Command
aCommand
TextEditor
&
aTextEditor
)
const
{
HTMLEditor
*
htmlEditor
=
aTextEditor
.
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_OK
;
}
return
MOZ_KnownLive
(
htmlEditor
)
-
>
RemoveAllInlineProperties
(
)
;
}
nsresult
RemoveStylesCommand
:
:
DoCommandParams
(
Command
aCommand
nsCommandParams
*
aParams
TextEditor
&
aTextEditor
)
const
{
return
DoCommand
(
aCommand
aTextEditor
)
;
}
nsresult
RemoveStylesCommand
:
:
GetCommandStateParams
(
Command
aCommand
nsCommandParams
&
aParams
TextEditor
*
aTextEditor
nsIEditingSession
*
aEditingSession
)
const
{
return
aParams
.
SetBool
(
STATE_ENABLED
IsCommandEnabled
(
aCommand
aTextEditor
)
)
;
}
StaticRefPtr
<
IncreaseFontSizeCommand
>
IncreaseFontSizeCommand
:
:
sInstance
;
bool
IncreaseFontSizeCommand
:
:
IsCommandEnabled
(
Command
aCommand
TextEditor
*
aTextEditor
)
const
{
if
(
!
aTextEditor
)
{
return
false
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
-
>
AsHTMLEditor
(
)
;
if
(
!
htmlEditor
)
{
return
false
;
}
return
htmlEditor
-
>
IsSelectionEditable
(
)
;
}
nsresult
IncreaseFontSizeCommand
:
:
DoCommand
(
Command
aCommand
TextEditor
&
aTextEditor
)
const
{
HTMLEditor
*
htmlEditor
=
aTextEditor
.
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_OK
;
}
return
MOZ_KnownLive
(
htmlEditor
)
-
>
IncreaseFontSize
(
)
;
}
nsresult
IncreaseFontSizeCommand
:
:
DoCommandParams
(
Command
aCommand
nsCommandParams
*
aParams
TextEditor
&
aTextEditor
)
const
{
return
DoCommand
(
aCommand
aTextEditor
)
;
}
nsresult
IncreaseFontSizeCommand
:
:
GetCommandStateParams
(
Command
aCommand
nsCommandParams
&
aParams
TextEditor
*
aTextEditor
nsIEditingSession
*
aEditingSession
)
const
{
return
aParams
.
SetBool
(
STATE_ENABLED
IsCommandEnabled
(
aCommand
aTextEditor
)
)
;
}
StaticRefPtr
<
DecreaseFontSizeCommand
>
DecreaseFontSizeCommand
:
:
sInstance
;
bool
DecreaseFontSizeCommand
:
:
IsCommandEnabled
(
Command
aCommand
TextEditor
*
aTextEditor
)
const
{
if
(
!
aTextEditor
)
{
return
false
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
-
>
AsHTMLEditor
(
)
;
if
(
!
htmlEditor
)
{
return
false
;
}
return
htmlEditor
-
>
IsSelectionEditable
(
)
;
}
nsresult
DecreaseFontSizeCommand
:
:
DoCommand
(
Command
aCommand
TextEditor
&
aTextEditor
)
const
{
HTMLEditor
*
htmlEditor
=
aTextEditor
.
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_OK
;
}
return
MOZ_KnownLive
(
htmlEditor
)
-
>
DecreaseFontSize
(
)
;
}
nsresult
DecreaseFontSizeCommand
:
:
DoCommandParams
(
Command
aCommand
nsCommandParams
*
aParams
TextEditor
&
aTextEditor
)
const
{
return
DoCommand
(
aCommand
aTextEditor
)
;
}
nsresult
DecreaseFontSizeCommand
:
:
GetCommandStateParams
(
Command
aCommand
nsCommandParams
&
aParams
TextEditor
*
aTextEditor
nsIEditingSession
*
aEditingSession
)
const
{
return
aParams
.
SetBool
(
STATE_ENABLED
IsCommandEnabled
(
aCommand
aTextEditor
)
)
;
}
StaticRefPtr
<
InsertHTMLCommand
>
InsertHTMLCommand
:
:
sInstance
;
bool
InsertHTMLCommand
:
:
IsCommandEnabled
(
Command
aCommand
TextEditor
*
aTextEditor
)
const
{
if
(
!
aTextEditor
)
{
return
false
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
-
>
AsHTMLEditor
(
)
;
if
(
!
htmlEditor
)
{
return
false
;
}
return
htmlEditor
-
>
IsSelectionEditable
(
)
;
}
nsresult
InsertHTMLCommand
:
:
DoCommand
(
Command
aCommand
TextEditor
&
aTextEditor
)
const
{
HTMLEditor
*
htmlEditor
=
aTextEditor
.
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_FAILURE
;
}
nsAutoString
html
;
return
MOZ_KnownLive
(
htmlEditor
)
-
>
InsertHTML
(
html
)
;
}
nsresult
InsertHTMLCommand
:
:
DoCommandParams
(
Command
aCommand
nsCommandParams
*
aParams
TextEditor
&
aTextEditor
)
const
{
if
(
NS_WARN_IF
(
!
aParams
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
.
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_FAILURE
;
}
nsAutoString
html
;
nsresult
rv
=
aParams
-
>
GetString
(
STATE_DATA
html
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
MOZ_KnownLive
(
htmlEditor
)
-
>
InsertHTML
(
html
)
;
}
nsresult
InsertHTMLCommand
:
:
GetCommandStateParams
(
Command
aCommand
nsCommandParams
&
aParams
TextEditor
*
aTextEditor
nsIEditingSession
*
aEditingSession
)
const
{
return
aParams
.
SetBool
(
STATE_ENABLED
IsCommandEnabled
(
aCommand
aTextEditor
)
)
;
}
StaticRefPtr
<
InsertTagCommand
>
InsertTagCommand
:
:
sInstance
;
bool
InsertTagCommand
:
:
IsCommandEnabled
(
Command
aCommand
TextEditor
*
aTextEditor
)
const
{
if
(
!
aTextEditor
)
{
return
false
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
-
>
AsHTMLEditor
(
)
;
if
(
!
htmlEditor
)
{
return
false
;
}
return
htmlEditor
-
>
IsSelectionEditable
(
)
;
}
nsresult
InsertTagCommand
:
:
DoCommand
(
Command
aCommand
TextEditor
&
aTextEditor
)
const
{
nsAtom
*
tagName
=
GetTagName
(
aCommand
)
;
if
(
NS_WARN_IF
(
tagName
!
=
nsGkAtoms
:
:
hr
)
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
.
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_FAILURE
;
}
RefPtr
<
Element
>
newElement
=
MOZ_KnownLive
(
htmlEditor
)
-
>
CreateElementWithDefaults
(
MOZ_KnownLive
(
*
tagName
)
)
;
if
(
NS_WARN_IF
(
!
newElement
)
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
=
MOZ_KnownLive
(
htmlEditor
)
-
>
InsertElementAtSelection
(
newElement
true
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
nsresult
InsertTagCommand
:
:
DoCommandParams
(
Command
aCommand
nsCommandParams
*
aParams
TextEditor
&
aTextEditor
)
const
{
if
(
aCommand
=
=
Command
:
:
InsertHorizontalRule
)
{
return
DoCommand
(
aCommand
aTextEditor
)
;
}
if
(
NS_WARN_IF
(
!
aParams
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsAtom
*
tagName
=
GetTagName
(
aCommand
)
;
if
(
NS_WARN_IF
(
!
tagName
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
HTMLEditor
*
htmlEditor
=
aTextEditor
.
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_FAILURE
;
}
nsString
value
;
nsresult
rv
=
aParams
-
>
GetString
(
STATE_ATTRIBUTE
value
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
NS_WARN_IF
(
value
.
IsEmpty
(
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsAtom
*
attribute
=
nullptr
;
if
(
tagName
=
=
nsGkAtoms
:
:
a
)
{
attribute
=
nsGkAtoms
:
:
href
;
}
else
if
(
tagName
=
=
nsGkAtoms
:
:
img
)
{
attribute
=
nsGkAtoms
:
:
src
;
}
else
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
RefPtr
<
Element
>
newElement
=
MOZ_KnownLive
(
htmlEditor
)
-
>
CreateElementWithDefaults
(
MOZ_KnownLive
(
*
tagName
)
)
;
if
(
NS_WARN_IF
(
!
newElement
)
)
{
return
NS_ERROR_FAILURE
;
}
ErrorResult
err
;
newElement
-
>
SetAttr
(
attribute
value
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
if
(
tagName
=
=
nsGkAtoms
:
:
a
)
{
rv
=
MOZ_KnownLive
(
htmlEditor
)
-
>
InsertLinkAroundSelection
(
newElement
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
rv
=
MOZ_KnownLive
(
htmlEditor
)
-
>
InsertElementAtSelection
(
newElement
true
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
nsresult
InsertTagCommand
:
:
GetCommandStateParams
(
Command
aCommand
nsCommandParams
&
aParams
TextEditor
*
aTextEditor
nsIEditingSession
*
aEditingSession
)
const
{
return
aParams
.
SetBool
(
STATE_ENABLED
IsCommandEnabled
(
aCommand
aTextEditor
)
)
;
}
static
nsresult
GetListState
(
HTMLEditor
*
aHTMLEditor
bool
*
aMixed
nsAString
&
aLocalName
)
MOZ_CAN_RUN_SCRIPT_FOR_DEFINITION
{
MOZ_ASSERT
(
aHTMLEditor
)
;
MOZ_ASSERT
(
aMixed
)
;
*
aMixed
=
false
;
aLocalName
.
Truncate
(
)
;
bool
bOL
bUL
bDL
;
nsresult
rv
=
aHTMLEditor
-
>
GetListState
(
aMixed
&
bOL
&
bUL
&
bDL
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
*
aMixed
)
{
return
NS_OK
;
}
if
(
bOL
)
{
aLocalName
.
AssignLiteral
(
"
ol
"
)
;
}
else
if
(
bUL
)
{
aLocalName
.
AssignLiteral
(
"
ul
"
)
;
}
else
if
(
bDL
)
{
aLocalName
.
AssignLiteral
(
"
dl
"
)
;
}
return
NS_OK
;
}
}
