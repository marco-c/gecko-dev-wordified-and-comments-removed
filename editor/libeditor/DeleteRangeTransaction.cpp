#
include
"
DeleteRangeTransaction
.
h
"
#
include
"
DeleteNodeTransaction
.
h
"
#
include
"
DeleteTextTransaction
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
ContentIterator
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
EditorBase
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
RangeBoundary
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsAString
.
h
"
namespace
mozilla
{
using
namespace
dom
;
DeleteRangeTransaction
:
:
DeleteRangeTransaction
(
EditorBase
&
aEditorBase
nsRange
&
aRangeToDelete
)
:
mEditorBase
(
&
aEditorBase
)
mRangeToDelete
(
aRangeToDelete
.
CloneRange
(
)
)
{
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
DeleteRangeTransaction
EditAggregateTransaction
mEditorBase
mRangeToDelete
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
DeleteRangeTransaction
)
NS_INTERFACE_MAP_END_INHERITING
(
EditAggregateTransaction
)
NS_IMETHODIMP
DeleteRangeTransaction
:
:
DoTransaction
(
)
{
if
(
NS_WARN_IF
(
!
mEditorBase
)
|
|
NS_WARN_IF
(
!
mRangeToDelete
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
RefPtr
<
nsRange
>
rangeToDelete
;
rangeToDelete
.
swap
(
mRangeToDelete
)
;
const
RangeBoundary
&
startRef
=
rangeToDelete
-
>
StartRef
(
)
;
const
RangeBoundary
&
endRef
=
rangeToDelete
-
>
EndRef
(
)
;
MOZ_ASSERT
(
startRef
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
endRef
.
IsSetAndValid
(
)
)
;
if
(
startRef
.
Container
(
)
=
=
endRef
.
Container
(
)
)
{
nsresult
rv
=
CreateTxnsToDeleteBetween
(
startRef
.
AsRaw
(
)
endRef
.
AsRaw
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
DeleteRangeTransaction
:
:
CreateTxnsToDeleteBetween
(
)
failed
"
)
;
return
rv
;
}
}
else
{
nsresult
rv
=
CreateTxnsToDeleteContent
(
startRef
.
AsRaw
(
)
nsIEditor
:
:
eNext
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
DeleteRangeTransaction
:
:
CreateTxnsToDeleteContent
(
)
failed
"
)
;
return
rv
;
}
rv
=
CreateTxnsToDeleteNodesBetween
(
rangeToDelete
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
DeleteRangeTransaction
:
:
CreateTxnsToDeleteNodesBetween
(
)
failed
"
)
;
return
rv
;
}
rv
=
CreateTxnsToDeleteContent
(
endRef
.
AsRaw
(
)
nsIEditor
:
:
ePrevious
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
DeleteRangeTransaction
:
:
CreateTxnsToDeleteContent
(
)
failed
"
)
;
return
rv
;
}
}
nsresult
rv
=
EditAggregateTransaction
:
:
DoTransaction
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
EditAggregateTransaction
:
:
DoTransaction
(
)
failed
"
)
;
return
rv
;
}
if
(
!
mEditorBase
-
>
AllowsTransactionsToChangeSelection
(
)
)
{
return
NS_OK
;
}
RefPtr
<
Selection
>
selection
=
mEditorBase
-
>
GetSelection
(
)
;
if
(
NS_WARN_IF
(
!
selection
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
rv
=
selection
-
>
Collapse
(
startRef
.
AsRaw
(
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Selection
:
:
Collapsed
(
)
failed
"
)
;
return
rv
;
}
NS_IMETHODIMP
DeleteRangeTransaction
:
:
UndoTransaction
(
)
{
nsresult
rv
=
EditAggregateTransaction
:
:
UndoTransaction
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditAggregateTransaction
:
:
UndoTransaction
(
)
failed
"
)
;
return
rv
;
}
NS_IMETHODIMP
DeleteRangeTransaction
:
:
RedoTransaction
(
)
{
nsresult
rv
=
EditAggregateTransaction
:
:
RedoTransaction
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditAggregateTransaction
:
:
RedoTransaction
(
)
failed
"
)
;
return
rv
;
}
nsresult
DeleteRangeTransaction
:
:
CreateTxnsToDeleteBetween
(
const
RawRangeBoundary
&
aStart
const
RawRangeBoundary
&
aEnd
)
{
if
(
NS_WARN_IF
(
!
aStart
.
IsSetAndValid
(
)
)
|
|
NS_WARN_IF
(
!
aEnd
.
IsSetAndValid
(
)
)
|
|
NS_WARN_IF
(
aStart
.
Container
(
)
!
=
aEnd
.
Container
(
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
NS_WARN_IF
(
!
mEditorBase
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
RefPtr
<
Text
>
textNode
=
Text
:
:
FromNode
(
aStart
.
Container
(
)
)
)
{
int32_t
numToDel
;
if
(
aStart
=
=
aEnd
)
{
numToDel
=
1
;
}
else
{
numToDel
=
*
aEnd
.
Offset
(
RawRangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
-
*
aStart
.
Offset
(
RawRangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
;
MOZ_DIAGNOSTIC_ASSERT
(
numToDel
>
0
)
;
}
RefPtr
<
DeleteTextTransaction
>
deleteTextTransaction
=
DeleteTextTransaction
:
:
MaybeCreate
(
*
mEditorBase
*
textNode
*
aStart
.
Offset
(
RawRangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
numToDel
)
;
if
(
!
deleteTextTransaction
)
{
NS_WARNING
(
"
DeleteTextTransaction
:
:
MaybeCreate
(
)
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
AppendChild
(
deleteTextTransaction
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
DeleteRangeTransaction
:
:
AppendChild
(
)
failed
but
ignored
"
)
;
return
NS_OK
;
}
for
(
nsIContent
*
child
=
aStart
.
GetChildAtOffset
(
)
;
child
&
&
child
!
=
aEnd
.
GetChildAtOffset
(
)
;
child
=
child
-
>
GetNextSibling
(
)
)
{
RefPtr
<
DeleteNodeTransaction
>
deleteNodeTransaction
=
DeleteNodeTransaction
:
:
MaybeCreate
(
*
mEditorBase
*
child
)
;
if
(
deleteNodeTransaction
)
{
DebugOnly
<
nsresult
>
rvIgnored
=
AppendChild
(
deleteNodeTransaction
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
DeleteRangeTransaction
:
:
AppendChild
(
)
failed
but
ignored
"
)
;
}
}
return
NS_OK
;
}
nsresult
DeleteRangeTransaction
:
:
CreateTxnsToDeleteContent
(
const
RawRangeBoundary
&
aPoint
nsIEditor
:
:
EDirection
aAction
)
{
if
(
NS_WARN_IF
(
!
aPoint
.
IsSetAndValid
(
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
NS_WARN_IF
(
!
mEditorBase
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
RefPtr
<
Text
>
textNode
=
Text
:
:
FromNode
(
aPoint
.
Container
(
)
)
;
if
(
!
textNode
)
{
return
NS_OK
;
}
uint32_t
startOffset
numToDelete
;
if
(
nsIEditor
:
:
eNext
=
=
aAction
)
{
startOffset
=
*
aPoint
.
Offset
(
RawRangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
;
numToDelete
=
aPoint
.
Container
(
)
-
>
Length
(
)
-
startOffset
;
}
else
{
startOffset
=
0
;
numToDelete
=
*
aPoint
.
Offset
(
RawRangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
;
}
if
(
!
numToDelete
)
{
return
NS_OK
;
}
RefPtr
<
DeleteTextTransaction
>
deleteTextTransaction
=
DeleteTextTransaction
:
:
MaybeCreate
(
*
mEditorBase
*
textNode
startOffset
numToDelete
)
;
NS_WARNING_ASSERTION
(
deleteTextTransaction
"
DeleteTextTransaction
:
:
MaybeCreate
(
)
failed
"
)
;
if
(
!
deleteTextTransaction
)
{
return
NS_ERROR_FAILURE
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
AppendChild
(
deleteTextTransaction
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
DeleteRangeTransaction
:
:
AppendChild
(
)
failed
but
ignored
"
)
;
return
NS_OK
;
}
nsresult
DeleteRangeTransaction
:
:
CreateTxnsToDeleteNodesBetween
(
nsRange
*
aRangeToDelete
)
{
if
(
NS_WARN_IF
(
!
mEditorBase
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
ContentSubtreeIterator
subtreeIter
;
nsresult
rv
=
subtreeIter
.
Init
(
aRangeToDelete
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
ContentSubtreeIterator
:
:
Init
(
)
failed
"
)
;
return
rv
;
}
for
(
;
!
subtreeIter
.
IsDone
(
)
;
subtreeIter
.
Next
(
)
)
{
nsCOMPtr
<
nsINode
>
node
=
subtreeIter
.
GetCurrentNode
(
)
;
if
(
NS_WARN_IF
(
!
node
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
RefPtr
<
DeleteNodeTransaction
>
deleteNodeTransaction
=
DeleteNodeTransaction
:
:
MaybeCreate
(
*
mEditorBase
*
node
)
;
if
(
!
deleteNodeTransaction
)
{
NS_WARNING
(
"
DeleteNodeTransaction
:
:
MaybeCreate
(
)
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
AppendChild
(
deleteNodeTransaction
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
DeleteRangeTransaction
:
:
AppendChild
(
)
failed
but
ignored
"
)
;
}
return
NS_OK
;
}
}
