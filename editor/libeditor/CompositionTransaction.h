#
ifndef
CompositionTransaction_h
#
define
CompositionTransaction_h
#
include
"
mozilla
/
EditTransactionBase
.
h
"
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsString
.
h
"
#
define
NS_IMETEXTTXN_IID
\
{
\
0xb391355d
0x346c
0x43d1
{
\
0x85
0xed
0x9e
0x65
0xbe
0xe7
0x7e
0x48
\
}
\
}
namespace
mozilla
{
class
EditorBase
;
class
TextComposition
;
class
TextRangeArray
;
namespace
dom
{
class
Text
;
}
class
CompositionTransaction
final
:
public
EditTransactionBase
{
protected
:
CompositionTransaction
(
EditorBase
&
aEditorBase
const
nsAString
&
aStringToInsert
const
EditorDOMPointInText
&
aPointToInsert
)
;
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_IMETEXTTXN_IID
)
static
already_AddRefed
<
CompositionTransaction
>
Create
(
EditorBase
&
aEditorBase
const
nsAString
&
aStringToInsert
const
EditorDOMPointInText
&
aPointToInsert
)
;
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
CompositionTransaction
EditTransactionBase
)
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_EDITTRANSACTIONBASE
NS_IMETHOD
Merge
(
nsITransaction
*
aTransaction
bool
*
aDidMerge
)
override
;
void
MarkFixed
(
)
;
static
nsresult
SetIMESelection
(
EditorBase
&
aEditorBase
dom
:
:
Text
*
aTextNode
uint32_t
aOffsetInNode
uint32_t
aLengthOfCompositionString
const
TextRangeArray
*
aRanges
)
;
private
:
virtual
~
CompositionTransaction
(
)
=
default
;
nsresult
SetSelectionForRanges
(
)
;
RefPtr
<
dom
:
:
Text
>
mTextNode
;
uint32_t
mOffset
;
uint32_t
mReplaceLength
;
RefPtr
<
TextRangeArray
>
mRanges
;
nsString
mStringToInsert
;
RefPtr
<
EditorBase
>
mEditorBase
;
bool
mFixed
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
CompositionTransaction
NS_IMETEXTTXN_IID
)
}
#
endif
