#
ifndef
InsertTextTransaction_h
#
define
InsertTextTransaction_h
#
include
"
mozilla
/
EditTransactionBase
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nscore
.
h
"
class
nsITransaction
;
#
define
NS_INSERTTEXTTXN_IID
\
{
0x8c9ad77f
0x22a7
0x4d01
\
{
0xb1
0x59
0x8a
0x0f
0xdb
0x1d
0x08
0xe9
}
}
namespace
mozilla
{
class
EditorBase
;
namespace
dom
{
class
Text
;
}
class
InsertTextTransaction
final
:
public
EditTransactionBase
{
protected
:
InsertTextTransaction
(
EditorBase
&
aEditorBase
const
nsAString
&
aStringToInsert
dom
:
:
Text
&
aTextNode
uint32_t
aOffset
)
;
public
:
static
already_AddRefed
<
InsertTextTransaction
>
Create
(
EditorBase
&
aEditorBase
const
nsAString
&
aStringToInsert
dom
:
:
Text
&
aTextNode
uint32_t
aOffset
)
;
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_INSERTTEXTTXN_IID
)
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
InsertTextTransaction
EditTransactionBase
)
NS_DECL_EDITTRANSACTIONBASE
NS_IMETHOD
Merge
(
nsITransaction
*
aTransaction
bool
*
aDidMerge
)
override
;
void
GetData
(
nsString
&
aResult
)
;
private
:
virtual
~
InsertTextTransaction
(
)
;
bool
IsSequentialInsert
(
InsertTextTransaction
&
aOtherTrasaction
)
;
RefPtr
<
dom
:
:
Text
>
mTextNode
;
uint32_t
mOffset
;
nsString
mStringToInsert
;
RefPtr
<
EditorBase
>
mEditorBase
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
InsertTextTransaction
NS_INSERTTEXTTXN_IID
)
}
#
endif
