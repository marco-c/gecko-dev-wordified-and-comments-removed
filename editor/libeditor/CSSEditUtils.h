#
ifndef
CSSEditUtils_h
#
define
CSSEditUtils_h
#
include
"
ChangeStyleTransaction
.
h
"
#
include
"
EditorForwards
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nscore
.
h
"
class
nsComputedDOMStyle
;
class
nsAtom
;
class
nsIContent
;
class
nsICSSDeclaration
;
class
nsINode
;
class
nsStaticAtom
;
class
nsStyledElement
;
namespace
mozilla
{
namespace
dom
{
class
Element
;
}
typedef
void
(
*
nsProcessValueFunc
)
(
const
nsAString
*
aInputString
nsAString
&
aOutputString
const
char
*
aDefaultValueString
const
char
*
aPrependString
const
char
*
aAppendString
)
;
class
CSSEditUtils
final
{
CSSEditUtils
(
)
=
delete
;
public
:
enum
nsCSSEditableProperty
{
eCSSEditableProperty_NONE
=
0
eCSSEditableProperty_background_color
eCSSEditableProperty_background_image
eCSSEditableProperty_border
eCSSEditableProperty_caption_side
eCSSEditableProperty_color
eCSSEditableProperty_float
eCSSEditableProperty_font_family
eCSSEditableProperty_font_size
eCSSEditableProperty_font_style
eCSSEditableProperty_font_weight
eCSSEditableProperty_height
eCSSEditableProperty_list_style_type
eCSSEditableProperty_margin_left
eCSSEditableProperty_margin_right
eCSSEditableProperty_text_align
eCSSEditableProperty_text_decoration
eCSSEditableProperty_vertical_align
eCSSEditableProperty_whitespace
eCSSEditableProperty_width
}
;
struct
CSSEquivTable
{
nsCSSEditableProperty
cssProperty
;
bool
gettable
;
bool
caseSensitiveValue
;
nsProcessValueFunc
processValueFunctor
;
const
char
*
defaultValue
;
const
char
*
prependValue
;
const
char
*
appendValue
;
}
;
static
bool
IsCSSEditableProperty
(
nsINode
*
aNode
nsAtom
*
aProperty
nsAtom
*
aAttribute
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
SetCSSPropertyWithTransaction
(
HTMLEditor
&
aHTMLEditor
nsStyledElement
&
aStyledElement
nsAtom
&
aProperty
const
nsAString
&
aValue
)
{
return
SetCSSPropertyInternal
(
aHTMLEditor
aStyledElement
aProperty
aValue
false
)
;
}
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
SetCSSPropertyPixelsWithTransaction
(
HTMLEditor
&
aHTMLEditor
nsStyledElement
&
aStyledElement
nsAtom
&
aProperty
int32_t
aIntValue
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
SetCSSPropertyPixelsWithoutTransaction
(
nsStyledElement
&
aStyledElement
const
nsAtom
&
aProperty
int32_t
aIntValue
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
RemoveCSSPropertyWithTransaction
(
HTMLEditor
&
aHTMLEditor
nsStyledElement
&
aStyledElement
nsAtom
&
aProperty
const
nsAString
&
aPropertyValue
)
{
return
RemoveCSSPropertyInternal
(
aHTMLEditor
aStyledElement
aProperty
aPropertyValue
false
)
;
}
static
nsresult
GetSpecifiedProperty
(
nsIContent
&
aContent
nsAtom
&
aCSSProperty
nsAString
&
aValue
)
;
MOZ_CAN_RUN_SCRIPT
static
nsresult
GetComputedProperty
(
nsIContent
&
aContent
nsAtom
&
aCSSProperty
nsAString
&
aValue
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
EditorDOMPoint
nsresult
>
RemoveCSSInlineStyleWithTransaction
(
HTMLEditor
&
aHTMLEditor
nsStyledElement
&
aStyledElement
nsAtom
*
aProperty
const
nsAString
&
aPropertyValue
)
;
static
void
GetDefaultBackgroundColor
(
nsAString
&
aColor
)
;
static
void
GetDefaultLengthUnit
(
nsAString
&
aLengthUnit
)
;
MOZ_CAN_RUN_SCRIPT
static
nsresult
GetComputedCSSEquivalentTo
(
dom
:
:
Element
&
aElement
const
EditorElementStyle
&
aStyle
nsAString
&
aOutValue
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
bool
nsresult
>
IsComputedCSSEquivalentTo
(
const
HTMLEditor
&
aHTMLEditor
nsIContent
&
aContent
const
EditorInlineStyle
&
aStyle
nsAString
&
aInOutValue
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT_BOUNDARY
static
Result
<
bool
nsresult
>
IsSpecifiedCSSEquivalentTo
(
const
HTMLEditor
&
aHTMLEditor
nsIContent
&
aContent
const
EditorInlineStyle
&
aStyle
nsAString
&
aInOutValue
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
bool
nsresult
>
HaveComputedCSSEquivalentStyles
(
const
HTMLEditor
&
aHTMLEditor
nsIContent
&
aContent
const
EditorInlineStyle
&
aStyle
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT_BOUNDARY
static
Result
<
bool
nsresult
>
HaveSpecifiedCSSEquivalentStyles
(
const
HTMLEditor
&
aHTMLEditor
nsIContent
&
aContent
const
EditorInlineStyle
&
aStyle
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
int32_t
nsresult
>
SetCSSEquivalentToStyle
(
WithTransaction
aWithTransaction
HTMLEditor
&
aHTMLEditor
nsStyledElement
&
aStyledElement
const
EditorElementStyle
&
aStyleToSet
const
nsAString
*
aValue
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
RemoveCSSEquivalentToStyle
(
WithTransaction
aWithTransaction
HTMLEditor
&
aHTMLEditor
nsStyledElement
&
aStyledElement
const
EditorElementStyle
&
aStyleToRemove
const
nsAString
*
aValue
)
;
static
void
ParseLength
(
const
nsAString
&
aString
float
*
aValue
nsAtom
*
*
aUnit
)
;
static
bool
DoStyledElementsHaveSameStyle
(
nsStyledElement
&
aStyledElement
nsStyledElement
&
aOtherStyledElement
)
;
static
already_AddRefed
<
nsComputedDOMStyle
>
GetComputedStyle
(
dom
:
:
Element
*
aElement
)
;
private
:
enum
class
StyleType
{
Specified
Computed
}
;
static
nsStaticAtom
*
GetCSSPropertyAtom
(
nsCSSEditableProperty
aProperty
)
;
static
void
BuildCSSDeclarations
(
nsTArray
<
nsStaticAtom
*
>
&
aOutArrayOfCSSProperty
nsTArray
<
nsString
>
&
aOutArrayOfCSSValue
const
CSSEquivTable
*
aEquivTable
const
nsAString
*
aValue
bool
aGetOrRemoveRequest
)
;
static
void
GenerateCSSDeclarationsFromHTMLStyle
(
dom
:
:
Element
&
aElement
nsAtom
*
aHTMLProperty
nsAtom
*
aAttribute
const
nsAString
*
aValue
nsTArray
<
nsStaticAtom
*
>
&
aOutArrayOfCSSProperty
nsTArray
<
nsString
>
&
aOutArrayOfCSSValue
bool
aGetOrRemoveRequest
)
;
MOZ_CAN_RUN_SCRIPT
static
nsresult
GetComputedCSSInlinePropertyBase
(
nsIContent
&
aContent
nsAtom
&
aCSSProperty
nsAString
&
aValue
)
;
static
nsresult
GetSpecifiedCSSInlinePropertyBase
(
nsIContent
&
aContent
nsAtom
&
aCSSProperty
nsAString
&
aValue
)
;
MOZ_CAN_RUN_SCRIPT
static
nsresult
GetCSSEquivalentTo
(
dom
:
:
Element
&
aElement
const
EditorElementStyle
&
aStyle
nsAString
&
aOutValue
StyleType
aStyleType
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
bool
nsresult
>
IsCSSEquivalentTo
(
const
HTMLEditor
&
aHTMLEditor
nsIContent
&
aContent
const
EditorInlineStyle
&
aStyle
nsAString
&
aInOutValue
StyleType
aStyleType
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
Result
<
bool
nsresult
>
HaveCSSEquivalentStyles
(
const
HTMLEditor
&
aHTMLEditor
nsIContent
&
aContent
const
EditorInlineStyle
&
aStyle
StyleType
aStyleType
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
RemoveCSSPropertyInternal
(
HTMLEditor
&
aHTMLEditor
nsStyledElement
&
aStyledElement
nsAtom
&
aProperty
const
nsAString
&
aPropertyValue
bool
aSuppressTxn
=
false
)
;
[
[
nodiscard
]
]
MOZ_CAN_RUN_SCRIPT
static
nsresult
SetCSSPropertyInternal
(
HTMLEditor
&
aHTMLEditor
nsStyledElement
&
aStyledElement
nsAtom
&
aProperty
const
nsAString
&
aValue
bool
aSuppressTxn
=
false
)
;
}
;
#
define
NS_EDITOR_INDENT_INCREMENT_IN
0
.
4134f
#
define
NS_EDITOR_INDENT_INCREMENT_CM
1
.
05f
#
define
NS_EDITOR_INDENT_INCREMENT_MM
10
.
5f
#
define
NS_EDITOR_INDENT_INCREMENT_PT
29
.
76f
#
define
NS_EDITOR_INDENT_INCREMENT_PC
2
.
48f
#
define
NS_EDITOR_INDENT_INCREMENT_EM
3
#
define
NS_EDITOR_INDENT_INCREMENT_EX
6
#
define
NS_EDITOR_INDENT_INCREMENT_PX
40
#
define
NS_EDITOR_INDENT_INCREMENT_PERCENT
4
}
#
endif
