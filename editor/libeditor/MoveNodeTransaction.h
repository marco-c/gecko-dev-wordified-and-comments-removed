#
ifndef
MoveNodeTransaction_h
#
define
MoveNodeTransaction_h
#
include
"
EditTransactionBase
.
h
"
#
include
"
EditorForwards
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
class
MoveNodeTransaction
final
:
public
EditTransactionBase
{
protected
:
template
<
typename
PT
typename
CT
>
MoveNodeTransaction
(
HTMLEditor
&
aHTMLEditor
nsIContent
&
aContentToMove
const
EditorDOMPointBase
<
PT
CT
>
&
aPointToInsert
)
;
public
:
template
<
typename
PT
typename
CT
>
static
already_AddRefed
<
MoveNodeTransaction
>
MaybeCreate
(
HTMLEditor
&
aHTMLEditor
nsIContent
&
aContentToMove
const
EditorDOMPointBase
<
PT
CT
>
&
aPointToInsert
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
MoveNodeTransaction
EditTransactionBase
)
NS_DECL_EDITTRANSACTIONBASE
NS_DECL_EDITTRANSACTIONBASE_GETASMETHODS_OVERRIDE
(
MoveNodeTransaction
)
MOZ_CAN_RUN_SCRIPT
NS_IMETHOD
RedoTransaction
(
)
override
;
template
<
typename
EditorDOMPointType
>
EditorDOMPointType
SuggestPointToPutCaret
(
)
const
{
if
(
MOZ_UNLIKELY
(
!
mContainer
|
|
!
mContentToMove
)
)
{
return
EditorDOMPointType
(
)
;
}
return
EditorDOMPointType
:
:
After
(
mContentToMove
)
;
}
template
<
typename
EditorDOMPointType
>
EditorDOMPointType
SuggestNextInsertionPoint
(
)
const
{
if
(
MOZ_UNLIKELY
(
!
mContainer
)
)
{
return
EditorDOMPointType
(
)
;
}
if
(
!
mReference
)
{
return
EditorDOMPointType
:
:
AtEndOf
(
mContainer
)
;
}
if
(
MOZ_UNLIKELY
(
mReference
-
>
GetParentNode
(
)
!
=
mContainer
)
)
{
if
(
MOZ_LIKELY
(
mContentToMove
-
>
GetParentNode
(
)
=
=
mContainer
)
)
{
return
EditorDOMPointType
(
mContentToMove
)
.
NextPoint
(
)
;
}
return
EditorDOMPointType
:
:
AtEndOf
(
mContainer
)
;
}
return
EditorDOMPointType
(
mReference
)
;
}
friend
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aStream
const
MoveNodeTransaction
&
aTransaction
)
;
protected
:
virtual
~
MoveNodeTransaction
(
)
=
default
;
MOZ_CAN_RUN_SCRIPT
nsresult
DoTransactionInternal
(
)
;
nsCOMPtr
<
nsIContent
>
mContentToMove
;
nsCOMPtr
<
nsINode
>
mContainer
;
nsCOMPtr
<
nsIContent
>
mReference
;
nsCOMPtr
<
nsINode
>
mOldContainer
;
nsCOMPtr
<
nsIContent
>
mOldNextSibling
;
RefPtr
<
HTMLEditor
>
mHTMLEditor
;
}
;
}
#
endif
