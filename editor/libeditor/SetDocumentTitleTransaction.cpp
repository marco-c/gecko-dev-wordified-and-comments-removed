#
include
"
SetDocumentTitleTransaction
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIDOMCharacterData
.
h
"
#
include
"
nsIDOMDocument
.
h
"
#
include
"
nsIDOMElement
.
h
"
#
include
"
nsIDOMNode
.
h
"
#
include
"
nsIDOMNodeList
.
h
"
#
include
"
nsIDOMText
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIEditor
.
h
"
#
include
"
nsIHTMLEditor
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsTextNode
.
h
"
#
include
"
nsQueryObject
.
h
"
namespace
mozilla
{
SetDocumentTitleTransaction
:
:
SetDocumentTitleTransaction
(
)
:
mEditor
(
nullptr
)
mIsTransient
(
false
)
{
}
NS_IMETHODIMP
SetDocumentTitleTransaction
:
:
Init
(
nsIHTMLEditor
*
aEditor
const
nsAString
*
aValue
)
{
NS_ASSERTION
(
aEditor
&
&
aValue
"
null
args
"
)
;
if
(
!
aEditor
|
|
!
aValue
)
{
return
NS_ERROR_NULL_POINTER
;
}
mEditor
=
aEditor
;
mValue
=
*
aValue
;
return
NS_OK
;
}
NS_IMETHODIMP
SetDocumentTitleTransaction
:
:
DoTransaction
(
)
{
return
SetDomTitle
(
mValue
)
;
}
NS_IMETHODIMP
SetDocumentTitleTransaction
:
:
UndoTransaction
(
)
{
return
NS_OK
;
}
NS_IMETHODIMP
SetDocumentTitleTransaction
:
:
RedoTransaction
(
)
{
return
NS_OK
;
}
nsresult
SetDocumentTitleTransaction
:
:
SetDomTitle
(
const
nsAString
&
aTitle
)
{
nsCOMPtr
<
nsIEditor
>
editor
=
do_QueryInterface
(
mEditor
)
;
if
(
NS_WARN_IF
(
!
editor
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIDOMDocument
>
domDoc
;
nsresult
rv
=
editor
-
>
GetDocument
(
getter_AddRefs
(
domDoc
)
)
;
if
(
NS_WARN_IF
(
!
domDoc
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIDOMNodeList
>
titleList
;
rv
=
domDoc
-
>
GetElementsByTagName
(
NS_LITERAL_STRING
(
"
title
"
)
getter_AddRefs
(
titleList
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
mIsTransient
=
true
;
nsCOMPtr
<
nsIDOMNode
>
titleNode
;
if
(
titleList
)
{
rv
=
titleList
-
>
Item
(
0
getter_AddRefs
(
titleNode
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
titleNode
)
{
nsCOMPtr
<
nsIDOMNode
>
child
;
rv
=
titleNode
-
>
GetFirstChild
(
getter_AddRefs
(
child
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
child
)
{
nsCOMPtr
<
nsIDOMCharacterData
>
textNode
=
do_QueryInterface
(
child
)
;
if
(
textNode
)
{
textNode
-
>
GetData
(
mUndoValue
)
;
if
(
mUndoValue
=
=
aTitle
)
{
return
NS_OK
;
}
}
rv
=
editor
-
>
DeleteNode
(
child
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
}
}
mIsTransient
=
false
;
nsCOMPtr
<
nsIDocument
>
document
=
do_QueryInterface
(
domDoc
)
;
if
(
NS_WARN_IF
(
!
document
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
RefPtr
<
dom
:
:
Element
>
headElement
=
document
-
>
GetHeadElement
(
)
;
if
(
NS_WARN_IF
(
!
headElement
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
bool
newTitleNode
=
false
;
uint32_t
newTitleIndex
=
0
;
if
(
!
titleNode
)
{
nsCOMPtr
<
nsIDOMElement
>
titleElement
;
rv
=
domDoc
-
>
CreateElement
(
NS_LITERAL_STRING
(
"
title
"
)
getter_AddRefs
(
titleElement
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
NS_WARN_IF
(
!
titleElement
)
)
{
return
NS_ERROR_FAILURE
;
}
titleNode
=
do_QueryInterface
(
titleElement
)
;
newTitleNode
=
true
;
newTitleIndex
=
headElement
-
>
GetChildCount
(
)
;
}
if
(
titleNode
&
&
!
aTitle
.
IsEmpty
(
)
)
{
RefPtr
<
nsTextNode
>
textNode
=
document
-
>
CreateTextNode
(
aTitle
)
;
if
(
newTitleNode
)
{
nsCOMPtr
<
nsINode
>
title
=
do_QueryInterface
(
titleNode
)
;
MOZ_ASSERT
(
title
)
;
ErrorResult
result
;
title
-
>
AppendChild
(
*
textNode
result
)
;
if
(
NS_WARN_IF
(
result
.
Failed
(
)
)
)
{
return
result
.
StealNSResult
(
)
;
}
}
else
{
nsCOMPtr
<
nsIDOMNode
>
newNode
=
do_QueryObject
(
textNode
)
;
if
(
NS_WARN_IF
(
!
newNode
)
)
{
return
NS_ERROR_FAILURE
;
}
rv
=
editor
-
>
InsertNode
(
newNode
titleNode
0
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
headElement
=
nullptr
;
}
if
(
newTitleNode
)
{
if
(
!
headElement
)
{
headElement
=
document
-
>
GetHeadElement
(
)
;
if
(
NS_WARN_IF
(
!
headElement
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
}
rv
=
editor
-
>
InsertNode
(
titleNode
headElement
-
>
AsDOMNode
(
)
newTitleIndex
)
;
}
return
rv
;
}
NS_IMETHODIMP
SetDocumentTitleTransaction
:
:
GetTxnDescription
(
nsAString
&
aString
)
{
aString
.
AssignLiteral
(
"
SetDocumentTitleTransaction
:
"
)
;
aString
+
=
mValue
;
return
NS_OK
;
}
NS_IMETHODIMP
SetDocumentTitleTransaction
:
:
GetIsTransient
(
bool
*
aIsTransient
)
{
if
(
NS_WARN_IF
(
!
aIsTransient
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
*
aIsTransient
=
mIsTransient
;
return
NS_OK
;
}
}
