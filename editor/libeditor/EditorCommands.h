#
ifndef
EditorCommands_h_
#
define
EditorCommands_h_
#
include
"
nsIControllerCommand
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nscore
.
h
"
class
nsICommandParams
;
class
nsISupports
;
namespace
mozilla
{
class
EditorCommandBase
:
public
nsIControllerCommand
{
public
:
EditorCommandBase
(
)
;
NS_DECL_ISUPPORTS
NS_IMETHOD
IsCommandEnabled
(
const
char
*
aCommandName
nsISupports
*
aCommandRefCon
bool
*
aIsEnabled
)
override
=
0
;
NS_IMETHOD
DoCommand
(
const
char
*
aCommandName
nsISupports
*
aCommandRefCon
)
override
=
0
;
protected
:
virtual
~
EditorCommandBase
(
)
{
}
}
;
#
define
NS_DECL_EDITOR_COMMAND
(
_cmd
)
\
class
_cmd
final
:
public
EditorCommandBase
{
\
public
:
\
NS_IMETHOD
IsCommandEnabled
(
const
char
*
aCommandName
\
nsISupports
*
aCommandRefCon
\
bool
*
aIsEnabled
)
override
;
\
NS_IMETHOD
DoCommand
(
const
char
*
aCommandName
\
nsISupports
*
aCommandRefCon
)
override
;
\
NS_IMETHOD
DoCommandParams
(
const
char
*
aCommandName
\
nsICommandParams
*
aParams
\
nsISupports
*
aCommandRefCon
)
override
;
\
NS_IMETHOD
GetCommandStateParams
(
const
char
*
aCommandName
\
nsICommandParams
*
aParams
\
nsISupports
*
aCommandRefCon
)
override
;
\
}
;
NS_DECL_EDITOR_COMMAND
(
UndoCommand
)
NS_DECL_EDITOR_COMMAND
(
RedoCommand
)
NS_DECL_EDITOR_COMMAND
(
CutCommand
)
NS_DECL_EDITOR_COMMAND
(
CutOrDeleteCommand
)
NS_DECL_EDITOR_COMMAND
(
CopyCommand
)
NS_DECL_EDITOR_COMMAND
(
CopyOrDeleteCommand
)
NS_DECL_EDITOR_COMMAND
(
CopyAndCollapseToEndCommand
)
NS_DECL_EDITOR_COMMAND
(
PasteCommand
)
NS_DECL_EDITOR_COMMAND
(
PasteTransferableCommand
)
NS_DECL_EDITOR_COMMAND
(
SwitchTextDirectionCommand
)
NS_DECL_EDITOR_COMMAND
(
DeleteCommand
)
NS_DECL_EDITOR_COMMAND
(
SelectAllCommand
)
NS_DECL_EDITOR_COMMAND
(
SelectionMoveCommands
)
NS_DECL_EDITOR_COMMAND
(
InsertPlaintextCommand
)
NS_DECL_EDITOR_COMMAND
(
InsertParagraphCommand
)
NS_DECL_EDITOR_COMMAND
(
InsertLineBreakCommand
)
NS_DECL_EDITOR_COMMAND
(
PasteQuotationCommand
)
#
if
0
NS_IMETHODIMP
FooCommand
:
:
IsCommandEnabled
(
const
char
*
aCommandName
nsISupports
*
aCommandRefCon
bool
*
aIsEnabled
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
FooCommand
:
:
DoCommand
(
const
char
*
aCommandName
const
nsAString
&
aCommandParams
nsISupports
*
aCommandRefCon
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
#
endif
}
#
endif
