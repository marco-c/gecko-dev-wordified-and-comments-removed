#
ifndef
mozilla_EditorCommands_h
#
define
mozilla_EditorCommands_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
TypedEnumBits
.
h
"
#
include
"
nsIControllerCommand
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsStringFwd
.
h
"
class
nsAtom
;
class
nsCommandParams
;
class
nsICommandParams
;
class
nsIEditingSession
;
class
nsITransferable
;
namespace
mozilla
{
class
HTMLEditor
;
class
TextEditor
;
enum
class
EditorCommandParamType
:
uint16_t
{
None
=
0
Bool
=
1
<
<
0
String
=
1
<
<
1
CString
=
1
<
<
2
Transferable
=
1
<
<
3
StateAttribute
=
1
<
<
14
StateData
=
1
<
<
15
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
EditorCommandParamType
)
class
EditorCommand
:
public
nsIControllerCommand
{
public
:
NS_DECL_ISUPPORTS
static
EditorCommandParamType
GetParamType
(
Command
aCommand
)
{
switch
(
aCommand
)
{
case
Command
:
:
HistoryUndo
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
HistoryRedo
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
Cut
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
CutOrDelete
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
Copy
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
CopyOrDelete
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
SelectAll
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
Paste
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
PasteTransferable
:
return
EditorCommandParamType
:
:
Transferable
;
case
Command
:
:
FormatSetBlockTextDirection
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
Delete
:
case
Command
:
:
DeleteCharBackward
:
case
Command
:
:
DeleteCharForward
:
case
Command
:
:
DeleteWordBackward
:
case
Command
:
:
DeleteWordForward
:
case
Command
:
:
DeleteToBeginningOfLine
:
case
Command
:
:
DeleteToEndOfLine
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
InsertText
:
return
EditorCommandParamType
:
:
String
|
EditorCommandParamType
:
:
StateData
;
case
Command
:
:
InsertParagraph
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
InsertLineBreak
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
PasteAsQuotation
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
ScrollTop
:
case
Command
:
:
ScrollBottom
:
case
Command
:
:
MoveTop
:
case
Command
:
:
MoveBottom
:
case
Command
:
:
SelectTop
:
case
Command
:
:
SelectBottom
:
case
Command
:
:
LineNext
:
case
Command
:
:
LinePrevious
:
case
Command
:
:
SelectLineNext
:
case
Command
:
:
SelectLinePrevious
:
case
Command
:
:
CharPrevious
:
case
Command
:
:
CharNext
:
case
Command
:
:
SelectCharPrevious
:
case
Command
:
:
SelectCharNext
:
case
Command
:
:
BeginLine
:
case
Command
:
:
EndLine
:
case
Command
:
:
SelectBeginLine
:
case
Command
:
:
SelectEndLine
:
case
Command
:
:
WordPrevious
:
case
Command
:
:
WordNext
:
case
Command
:
:
SelectWordPrevious
:
case
Command
:
:
SelectWordNext
:
case
Command
:
:
ScrollPageUp
:
case
Command
:
:
ScrollPageDown
:
case
Command
:
:
ScrollLineUp
:
case
Command
:
:
ScrollLineDown
:
case
Command
:
:
MovePageUp
:
case
Command
:
:
MovePageDown
:
case
Command
:
:
SelectPageUp
:
case
Command
:
:
SelectPageDown
:
case
Command
:
:
MoveLeft
:
case
Command
:
:
MoveRight
:
case
Command
:
:
MoveUp
:
case
Command
:
:
MoveDown
:
case
Command
:
:
MoveLeft2
:
case
Command
:
:
MoveRight2
:
case
Command
:
:
MoveUp2
:
case
Command
:
:
MoveDown2
:
case
Command
:
:
SelectLeft
:
case
Command
:
:
SelectRight
:
case
Command
:
:
SelectUp
:
case
Command
:
:
SelectDown
:
case
Command
:
:
SelectLeft2
:
case
Command
:
:
SelectRight2
:
case
Command
:
:
SelectUp2
:
case
Command
:
:
SelectDown2
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
PasteWithoutFormat
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
EditorObserverDocumentCreated
:
case
Command
:
:
EditorObserverDocumentLocationChanged
:
case
Command
:
:
EditorObserverDocumentWillBeDestroyed
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
SetDocumentModified
:
case
Command
:
:
SetDocumentUseCSS
:
case
Command
:
:
SetDocumentReadOnly
:
case
Command
:
:
SetDocumentInsertBROnEnterKeyPress
:
return
EditorCommandParamType
:
:
Bool
|
EditorCommandParamType
:
:
StateAttribute
;
case
Command
:
:
SetDocumentDefaultParagraphSeparator
:
return
EditorCommandParamType
:
:
CString
|
EditorCommandParamType
:
:
StateAttribute
;
case
Command
:
:
ToggleObjectResizers
:
case
Command
:
:
ToggleInlineTableEditor
:
case
Command
:
:
ToggleAbsolutePositionEditor
:
return
EditorCommandParamType
:
:
Bool
|
EditorCommandParamType
:
:
StateAttribute
;
case
Command
:
:
FormatIndent
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
FormatOutdent
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
FormatBold
:
case
Command
:
:
FormatItalic
:
case
Command
:
:
FormatUnderline
:
case
Command
:
:
FormatTeletypeText
:
case
Command
:
:
FormatStrikeThrough
:
case
Command
:
:
FormatSuperscript
:
case
Command
:
:
FormatSubscript
:
case
Command
:
:
FormatNoBreak
:
case
Command
:
:
FormatEmphasis
:
case
Command
:
:
FormatStrong
:
case
Command
:
:
FormatCitation
:
case
Command
:
:
FormatAbbreviation
:
case
Command
:
:
FormatAcronym
:
case
Command
:
:
FormatCode
:
case
Command
:
:
FormatSample
:
case
Command
:
:
FormatVariable
:
case
Command
:
:
FormatRemoveLink
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
InsertOrderedList
:
case
Command
:
:
InsertUnorderedList
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
InsertDefinitionTerm
:
case
Command
:
:
InsertDefinitionDetails
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
FormatRemoveList
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
FormatBlock
:
return
EditorCommandParamType
:
:
CString
|
EditorCommandParamType
:
:
String
|
EditorCommandParamType
:
:
StateAttribute
;
case
Command
:
:
FormatFontName
:
return
EditorCommandParamType
:
:
CString
|
EditorCommandParamType
:
:
String
|
EditorCommandParamType
:
:
StateAttribute
;
case
Command
:
:
FormatFontSize
:
return
EditorCommandParamType
:
:
CString
|
EditorCommandParamType
:
:
String
|
EditorCommandParamType
:
:
StateAttribute
;
case
Command
:
:
FormatFontColor
:
return
EditorCommandParamType
:
:
CString
|
EditorCommandParamType
:
:
String
|
EditorCommandParamType
:
:
StateAttribute
;
case
Command
:
:
FormatDocumentBackgroundColor
:
return
EditorCommandParamType
:
:
CString
|
EditorCommandParamType
:
:
String
|
EditorCommandParamType
:
:
StateAttribute
;
case
Command
:
:
FormatBackColor
:
return
EditorCommandParamType
:
:
CString
|
EditorCommandParamType
:
:
String
|
EditorCommandParamType
:
:
StateAttribute
;
case
Command
:
:
FormatJustifyLeft
:
case
Command
:
:
FormatJustifyRight
:
case
Command
:
:
FormatJustifyCenter
:
case
Command
:
:
FormatJustifyFull
:
case
Command
:
:
FormatJustifyNone
:
return
EditorCommandParamType
:
:
CString
|
EditorCommandParamType
:
:
String
|
EditorCommandParamType
:
:
StateAttribute
;
case
Command
:
:
FormatRemove
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
FormatIncreaseFontSize
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
FormatDecreaseFontSize
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
InsertHTML
:
return
EditorCommandParamType
:
:
String
|
EditorCommandParamType
:
:
StateData
;
case
Command
:
:
InsertLink
:
case
Command
:
:
InsertImage
:
return
EditorCommandParamType
:
:
String
|
EditorCommandParamType
:
:
StateAttribute
;
case
Command
:
:
InsertHorizontalRule
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
FormatAbsolutePosition
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
FormatDecreaseZIndex
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
FormatIncreaseZIndex
:
return
EditorCommandParamType
:
:
None
;
case
Command
:
:
GetHTML
:
return
EditorCommandParamType
:
:
None
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
Command
"
)
;
return
EditorCommandParamType
:
:
None
;
}
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHOD
IsCommandEnabled
(
const
char
*
aCommandName
nsISupports
*
aCommandRefCon
bool
*
aIsEnabled
)
final
;
MOZ_CAN_RUN_SCRIPT
NS_IMETHOD
DoCommand
(
const
char
*
aCommandName
nsISupports
*
aCommandRefCon
)
final
;
MOZ_CAN_RUN_SCRIPT
NS_IMETHOD
DoCommandParams
(
const
char
*
aCommandName
nsICommandParams
*
aParams
nsISupports
*
aCommandRefCon
)
final
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHOD
GetCommandStateParams
(
const
char
*
aCommandName
nsICommandParams
*
aParams
nsISupports
*
aCommandRefCon
)
final
;
MOZ_CAN_RUN_SCRIPT
virtual
bool
IsCommandEnabled
(
Command
aCommand
TextEditor
*
aTextEditor
)
const
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
DoCommand
(
Command
aCommand
TextEditor
&
aTextEditor
)
const
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
GetCommandStateParams
(
Command
aCommand
nsCommandParams
&
aParams
TextEditor
*
aTextEditor
nsIEditingSession
*
aEditingSession
)
const
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
DoCommandParam
(
Command
aCommand
TextEditor
&
aTextEditor
)
const
{
MOZ_ASSERT_UNREACHABLE
(
"
Wrong
overload
is
called
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
DoCommandParam
(
Command
aCommand
const
Maybe
<
bool
>
&
aBoolParam
TextEditor
&
aTextEditor
)
const
{
MOZ_ASSERT_UNREACHABLE
(
"
Wrong
overload
is
called
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
DoCommandParam
(
Command
aCommand
const
nsACString
&
aCStringParam
TextEditor
&
aTextEditor
)
const
{
MOZ_ASSERT_UNREACHABLE
(
"
Wrong
overload
is
called
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
DoCommandParam
(
Command
aCommand
const
nsAString
&
aStringParam
TextEditor
&
aTextEditor
)
const
{
MOZ_ASSERT_UNREACHABLE
(
"
Wrong
overload
is
called
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
DoCommandParam
(
Command
aCommand
nsITransferable
*
aTransferableParam
TextEditor
&
aTextEditor
)
const
{
MOZ_ASSERT_UNREACHABLE
(
"
Wrong
overload
is
called
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
protected
:
EditorCommand
(
)
=
default
;
virtual
~
EditorCommand
(
)
=
default
;
}
;
#
define
NS_DECL_EDITOR_COMMAND_COMMON_METHODS
\
public
:
\
MOZ_CAN_RUN_SCRIPT
\
virtual
bool
IsCommandEnabled
(
Command
aCommand
TextEditor
*
aTextEditor
)
\
const
final
;
\
using
EditorCommand
:
:
IsCommandEnabled
;
\
MOZ_CAN_RUN_SCRIPT
\
virtual
nsresult
DoCommand
(
Command
aCommand
TextEditor
&
aTextEditor
)
\
const
final
;
\
using
EditorCommand
:
:
DoCommand
;
\
MOZ_CAN_RUN_SCRIPT
\
virtual
nsresult
GetCommandStateParams
(
\
Command
aCommand
nsCommandParams
&
aParams
TextEditor
*
aTextEditor
\
nsIEditingSession
*
aEditingSession
)
const
final
;
\
using
EditorCommand
:
:
GetCommandStateParams
;
\
using
EditorCommand
:
:
DoCommandParam
;
#
define
NS_DECL_DO_COMMAND_PARAMS
\
MOZ_CAN_RUN_SCRIPT
\
virtual
nsresult
DoCommandParams
(
Command
aCommand
nsCommandParams
*
aParams
\
TextEditor
&
aTextEditor
)
const
final
;
\
using
EditorCommand
:
:
DoCommandParams
;
#
define
NS_DECL_DO_COMMAND_PARAM_DELEGATE_TO_DO_COMMAND
\
public
:
\
MOZ_CAN_RUN_SCRIPT
\
virtual
nsresult
DoCommandParam
(
Command
aCommand
TextEditor
&
aTextEditor
)
\
const
final
{
\
return
DoCommand
(
aCommand
aTextEditor
)
;
\
}
#
define
NS_DECL_DO_COMMAND_PARAM_FOR_BOOL_PARAM
\
public
:
\
MOZ_CAN_RUN_SCRIPT
\
virtual
nsresult
DoCommandParam
(
Command
aCommand
\
const
Maybe
<
bool
>
&
aBoolParam
\
TextEditor
&
aTextEditor
)
const
final
;
#
define
NS_DECL_DO_COMMAND_PARAM_FOR_CSTRING_PARAM
\
public
:
\
MOZ_CAN_RUN_SCRIPT
\
virtual
nsresult
DoCommandParam
(
Command
aCommand
\
const
nsACString
&
aCStringParam
\
TextEditor
&
aTextEditor
)
const
final
;
#
define
NS_DECL_DO_COMMAND_PARAM_FOR_STRING_PARAM
\
public
:
\
MOZ_CAN_RUN_SCRIPT
\
virtual
nsresult
DoCommandParam
(
Command
aCommand
\
const
nsAString
&
aStringParam
\
TextEditor
&
aTextEditor
)
const
final
;
#
define
NS_DECL_DO_COMMAND_PARAM_FOR_TRANSFERABLE_PARAM
\
public
:
\
MOZ_CAN_RUN_SCRIPT
\
virtual
nsresult
DoCommandParam
(
Command
aCommand
\
nsITransferable
*
aTransferableParam
\
TextEditor
&
aTextEditor
)
const
final
;
#
define
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
_cmd
)
\
public
:
\
static
EditorCommand
*
GetInstance
(
)
{
\
if
(
!
sInstance
)
{
\
sInstance
=
new
_cmd
(
)
;
\
}
\
return
sInstance
;
\
}
\
\
static
void
Shutdown
(
)
{
sInstance
=
nullptr
;
}
\
\
private
:
\
static
StaticRefPtr
<
_cmd
>
sInstance
;
#
define
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
_cmd
)
\
class
_cmd
final
:
public
EditorCommand
{
\
NS_DECL_EDITOR_COMMAND_COMMON_METHODS
\
NS_DECL_DO_COMMAND_PARAM_DELEGATE_TO_DO_COMMAND
\
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
_cmd
)
\
\
protected
:
\
_cmd
(
)
=
default
;
\
virtual
~
_cmd
(
)
=
default
;
\
}
;
#
define
NS_DECL_EDITOR_COMMAND_FOR_BOOL_PARAM
(
_cmd
)
\
class
_cmd
final
:
public
EditorCommand
{
\
NS_DECL_EDITOR_COMMAND_COMMON_METHODS
\
NS_DECL_DO_COMMAND_PARAM_FOR_BOOL_PARAM
\
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
_cmd
)
\
\
protected
:
\
_cmd
(
)
=
default
;
\
virtual
~
_cmd
(
)
=
default
;
\
}
;
#
define
NS_DECL_EDITOR_COMMAND_FOR_CSTRING_PARAM
(
_cmd
)
\
class
_cmd
final
:
public
EditorCommand
{
\
NS_DECL_EDITOR_COMMAND_COMMON_METHODS
\
NS_DECL_DO_COMMAND_PARAM_FOR_CSTRING_PARAM
\
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
_cmd
)
\
\
protected
:
\
_cmd
(
)
=
default
;
\
virtual
~
_cmd
(
)
=
default
;
\
}
;
#
define
NS_DECL_EDITOR_COMMAND_FOR_STRING_PARAM
(
_cmd
)
\
class
_cmd
final
:
public
EditorCommand
{
\
NS_DECL_EDITOR_COMMAND_COMMON_METHODS
\
NS_DECL_DO_COMMAND_PARAM_FOR_STRING_PARAM
\
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
_cmd
)
\
\
protected
:
\
_cmd
(
)
=
default
;
\
virtual
~
_cmd
(
)
=
default
;
\
}
;
#
define
NS_DECL_EDITOR_COMMAND_FOR_TRANSFERABLE_PARAM
(
_cmd
)
\
class
_cmd
final
:
public
EditorCommand
{
\
NS_DECL_EDITOR_COMMAND_COMMON_METHODS
\
NS_DECL_DO_COMMAND_PARAM_FOR_TRANSFERABLE_PARAM
\
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
_cmd
)
\
\
protected
:
\
_cmd
(
)
=
default
;
\
virtual
~
_cmd
(
)
=
default
;
\
}
;
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
UndoCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
RedoCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
CutCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
CutOrDeleteCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
CopyCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
CopyOrDeleteCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
PasteCommand
)
NS_DECL_EDITOR_COMMAND_FOR_TRANSFERABLE_PARAM
(
PasteTransferableCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
SwitchTextDirectionCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
DeleteCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
SelectAllCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
SelectionMoveCommands
)
NS_DECL_EDITOR_COMMAND_FOR_STRING_PARAM
(
InsertPlaintextCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
InsertParagraphCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
InsertLineBreakCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
PasteQuotationCommand
)
class
StateUpdatingCommandBase
:
public
EditorCommand
{
public
:
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
StateUpdatingCommandBase
EditorCommand
)
NS_DECL_EDITOR_COMMAND_COMMON_METHODS
NS_DECL_DO_COMMAND_PARAM_DELEGATE_TO_DO_COMMAND
protected
:
StateUpdatingCommandBase
(
)
=
default
;
virtual
~
StateUpdatingCommandBase
(
)
=
default
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
GetCurrentState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
ToggleState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
)
const
=
0
;
static
nsAtom
*
GetTagName
(
Command
aCommand
)
{
switch
(
aCommand
)
{
case
Command
:
:
FormatBold
:
return
nsGkAtoms
:
:
b
;
case
Command
:
:
FormatItalic
:
return
nsGkAtoms
:
:
i
;
case
Command
:
:
FormatUnderline
:
return
nsGkAtoms
:
:
u
;
case
Command
:
:
FormatTeletypeText
:
return
nsGkAtoms
:
:
tt
;
case
Command
:
:
FormatStrikeThrough
:
return
nsGkAtoms
:
:
strike
;
case
Command
:
:
FormatSuperscript
:
return
nsGkAtoms
:
:
sup
;
case
Command
:
:
FormatSubscript
:
return
nsGkAtoms
:
:
sub
;
case
Command
:
:
FormatNoBreak
:
return
nsGkAtoms
:
:
nobr
;
case
Command
:
:
FormatEmphasis
:
return
nsGkAtoms
:
:
em
;
case
Command
:
:
FormatStrong
:
return
nsGkAtoms
:
:
strong
;
case
Command
:
:
FormatCitation
:
return
nsGkAtoms
:
:
cite
;
case
Command
:
:
FormatAbbreviation
:
return
nsGkAtoms
:
:
abbr
;
case
Command
:
:
FormatAcronym
:
return
nsGkAtoms
:
:
acronym
;
case
Command
:
:
FormatCode
:
return
nsGkAtoms
:
:
code
;
case
Command
:
:
FormatSample
:
return
nsGkAtoms
:
:
samp
;
case
Command
:
:
FormatVariable
:
return
nsGkAtoms
:
:
var
;
case
Command
:
:
FormatRemoveLink
:
return
nsGkAtoms
:
:
href
;
case
Command
:
:
InsertOrderedList
:
return
nsGkAtoms
:
:
ol
;
case
Command
:
:
InsertUnorderedList
:
return
nsGkAtoms
:
:
ul
;
case
Command
:
:
InsertDefinitionTerm
:
return
nsGkAtoms
:
:
dt
;
case
Command
:
:
InsertDefinitionDetails
:
return
nsGkAtoms
:
:
dd
;
case
Command
:
:
FormatAbsolutePosition
:
return
nsGkAtoms
:
:
_empty
;
default
:
return
nullptr
;
}
}
friend
class
InsertTagCommand
;
}
;
class
StyleUpdatingCommand
final
:
public
StateUpdatingCommandBase
{
public
:
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
StyleUpdatingCommand
)
protected
:
StyleUpdatingCommand
(
)
=
default
;
virtual
~
StyleUpdatingCommand
(
)
=
default
;
MOZ_CAN_RUN_SCRIPT
nsresult
GetCurrentState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
final
;
MOZ_CAN_RUN_SCRIPT
nsresult
ToggleState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
)
const
final
;
}
;
class
InsertTagCommand
final
:
public
EditorCommand
{
public
:
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
InsertTagCommand
EditorCommand
)
NS_DECL_EDITOR_COMMAND_COMMON_METHODS
NS_DECL_DO_COMMAND_PARAM_DELEGATE_TO_DO_COMMAND
NS_DECL_DO_COMMAND_PARAM_FOR_STRING_PARAM
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
InsertTagCommand
)
protected
:
InsertTagCommand
(
)
=
default
;
virtual
~
InsertTagCommand
(
)
=
default
;
static
nsAtom
*
GetTagName
(
Command
aCommand
)
{
switch
(
aCommand
)
{
case
Command
:
:
InsertLink
:
return
nsGkAtoms
:
:
a
;
case
Command
:
:
InsertImage
:
return
nsGkAtoms
:
:
img
;
case
Command
:
:
InsertHorizontalRule
:
return
nsGkAtoms
:
:
hr
;
default
:
return
StateUpdatingCommandBase
:
:
GetTagName
(
aCommand
)
;
}
}
}
;
class
ListCommand
final
:
public
StateUpdatingCommandBase
{
public
:
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
ListCommand
)
protected
:
ListCommand
(
)
=
default
;
virtual
~
ListCommand
(
)
=
default
;
MOZ_CAN_RUN_SCRIPT
nsresult
GetCurrentState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
final
;
MOZ_CAN_RUN_SCRIPT
nsresult
ToggleState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
)
const
final
;
}
;
class
ListItemCommand
final
:
public
StateUpdatingCommandBase
{
public
:
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
ListItemCommand
)
protected
:
ListItemCommand
(
)
=
default
;
virtual
~
ListItemCommand
(
)
=
default
;
MOZ_CAN_RUN_SCRIPT
nsresult
GetCurrentState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
final
;
MOZ_CAN_RUN_SCRIPT
nsresult
ToggleState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
)
const
final
;
}
;
class
MultiStateCommandBase
:
public
EditorCommand
{
public
:
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
MultiStateCommandBase
EditorCommand
)
NS_DECL_EDITOR_COMMAND_COMMON_METHODS
NS_DECL_DO_COMMAND_PARAM_FOR_STRING_PARAM
protected
:
MultiStateCommandBase
(
)
=
default
;
virtual
~
MultiStateCommandBase
(
)
=
default
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
GetCurrentState
(
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
SetState
(
HTMLEditor
*
aHTMLEditor
const
nsAString
&
aNewState
)
const
=
0
;
}
;
class
ParagraphStateCommand
final
:
public
MultiStateCommandBase
{
public
:
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
ParagraphStateCommand
)
protected
:
ParagraphStateCommand
(
)
=
default
;
virtual
~
ParagraphStateCommand
(
)
=
default
;
MOZ_CAN_RUN_SCRIPT
nsresult
GetCurrentState
(
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
final
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetState
(
HTMLEditor
*
aHTMLEditor
const
nsAString
&
aNewState
)
const
final
;
}
;
class
FontFaceStateCommand
final
:
public
MultiStateCommandBase
{
public
:
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
FontFaceStateCommand
)
protected
:
FontFaceStateCommand
(
)
=
default
;
virtual
~
FontFaceStateCommand
(
)
=
default
;
MOZ_CAN_RUN_SCRIPT
nsresult
GetCurrentState
(
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
final
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetState
(
HTMLEditor
*
aHTMLEditor
const
nsAString
&
aNewState
)
const
final
;
}
;
class
FontSizeStateCommand
final
:
public
MultiStateCommandBase
{
public
:
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
FontSizeStateCommand
)
protected
:
FontSizeStateCommand
(
)
=
default
;
virtual
~
FontSizeStateCommand
(
)
=
default
;
MOZ_CAN_RUN_SCRIPT
nsresult
GetCurrentState
(
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
final
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetState
(
HTMLEditor
*
aHTMLEditor
const
nsAString
&
aNewState
)
const
final
;
}
;
class
HighlightColorStateCommand
final
:
public
MultiStateCommandBase
{
public
:
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
HighlightColorStateCommand
)
protected
:
HighlightColorStateCommand
(
)
=
default
;
virtual
~
HighlightColorStateCommand
(
)
=
default
;
MOZ_CAN_RUN_SCRIPT
nsresult
GetCurrentState
(
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
final
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetState
(
HTMLEditor
*
aHTMLEditor
const
nsAString
&
aNewState
)
const
final
;
}
;
class
FontColorStateCommand
final
:
public
MultiStateCommandBase
{
public
:
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
FontColorStateCommand
)
protected
:
FontColorStateCommand
(
)
=
default
;
virtual
~
FontColorStateCommand
(
)
=
default
;
MOZ_CAN_RUN_SCRIPT
nsresult
GetCurrentState
(
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
final
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetState
(
HTMLEditor
*
aHTMLEditor
const
nsAString
&
aNewState
)
const
final
;
}
;
class
AlignCommand
final
:
public
MultiStateCommandBase
{
public
:
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
AlignCommand
)
protected
:
AlignCommand
(
)
=
default
;
virtual
~
AlignCommand
(
)
=
default
;
MOZ_CAN_RUN_SCRIPT
nsresult
GetCurrentState
(
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
final
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetState
(
HTMLEditor
*
aHTMLEditor
const
nsAString
&
aNewState
)
const
final
;
}
;
class
BackgroundColorStateCommand
final
:
public
MultiStateCommandBase
{
public
:
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
BackgroundColorStateCommand
)
protected
:
BackgroundColorStateCommand
(
)
=
default
;
virtual
~
BackgroundColorStateCommand
(
)
=
default
;
MOZ_CAN_RUN_SCRIPT
nsresult
GetCurrentState
(
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
final
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetState
(
HTMLEditor
*
aHTMLEditor
const
nsAString
&
aNewState
)
const
final
;
}
;
class
AbsolutePositioningCommand
final
:
public
StateUpdatingCommandBase
{
public
:
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
AbsolutePositioningCommand
)
protected
:
AbsolutePositioningCommand
(
)
=
default
;
virtual
~
AbsolutePositioningCommand
(
)
=
default
;
MOZ_CAN_RUN_SCRIPT
nsresult
GetCurrentState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
nsCommandParams
&
aParams
)
const
final
;
MOZ_CAN_RUN_SCRIPT
nsresult
ToggleState
(
nsAtom
*
aTagName
HTMLEditor
*
aHTMLEditor
)
const
final
;
}
;
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
DocumentStateCommand
)
class
SetDocumentStateCommand
final
:
public
EditorCommand
{
public
:
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
SetDocumentStateCommand
EditorCommand
)
NS_DECL_EDITOR_COMMAND_COMMON_METHODS
NS_DECL_DO_COMMAND_PARAM_FOR_BOOL_PARAM
NS_DECL_DO_COMMAND_PARAM_FOR_CSTRING_PARAM
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
(
SetDocumentStateCommand
)
private
:
SetDocumentStateCommand
(
)
=
default
;
virtual
~
SetDocumentStateCommand
(
)
=
default
;
}
;
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
DecreaseZIndexCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
IncreaseZIndexCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
PasteNoFormattingCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
IndentCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
OutdentCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
RemoveListCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
RemoveStylesCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
IncreaseFontSizeCommand
)
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
(
DecreaseFontSizeCommand
)
NS_DECL_EDITOR_COMMAND_FOR_STRING_PARAM
(
InsertHTMLCommand
)
#
undef
NS_DECL_EDITOR_COMMAND_FOR_NO_PARAM_WITH_DELEGATE
#
undef
NS_DECL_EDITOR_COMMAND_FOR_BOOL_PARAM
#
undef
NS_DECL_EDITOR_COMMAND_FOR_CSTRING_PARAM
#
undef
NS_DECL_EDITOR_COMMAND_FOR_STRING_PARAM
#
undef
NS_DECL_EDITOR_COMMAND_FOR_TRANSFERABLE_PARAM
#
undef
NS_DECL_EDITOR_COMMAND_COMMON_METHODS
#
undef
NS_DECL_DO_COMMAND_PARAMS
#
undef
NS_DECL_DO_COMMAND_PARAM_DELEGATE_TO_DO_COMMAND
#
undef
NS_DECL_DO_COMMAND_PARAM_FOR_BOOL_PARAM
#
undef
NS_DECL_DO_COMMAND_PARAM_FOR_CSTRING_PARAM
#
undef
NS_DECL_DO_COMMAND_PARAM_FOR_STRING_PARAM
#
undef
NS_DECL_DO_COMMAND_PARAM_FOR_TRANSFERABLE_PARAM
#
undef
NS_INLINE_DECL_EDITOR_COMMAND_MAKE_SINGLETON
}
#
endif
