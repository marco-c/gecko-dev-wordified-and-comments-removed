#
include
"
InsertNodeTransaction
.
h
"
#
include
"
mozilla
/
EditorBase
.
h
"
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
mozilla
/
HTMLEditor
.
h
"
#
include
"
mozilla
/
TextEditor
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsMemory
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
using
namespace
dom
;
template
already_AddRefed
<
InsertNodeTransaction
>
InsertNodeTransaction
:
:
Create
(
EditorBase
&
aEditorBase
nsIContent
&
aContentToInsert
const
EditorDOMPoint
&
aPointToInsert
)
;
template
already_AddRefed
<
InsertNodeTransaction
>
InsertNodeTransaction
:
:
Create
(
EditorBase
&
aEditorBase
nsIContent
&
aContentToInsert
const
EditorRawDOMPoint
&
aPointToInsert
)
;
template
<
typename
PT
typename
CT
>
already_AddRefed
<
InsertNodeTransaction
>
InsertNodeTransaction
:
:
Create
(
EditorBase
&
aEditorBase
nsIContent
&
aContentToInsert
const
EditorDOMPointBase
<
PT
CT
>
&
aPointToInsert
)
{
RefPtr
<
InsertNodeTransaction
>
transaction
=
new
InsertNodeTransaction
(
aEditorBase
aContentToInsert
aPointToInsert
)
;
return
transaction
.
forget
(
)
;
}
template
<
typename
PT
typename
CT
>
InsertNodeTransaction
:
:
InsertNodeTransaction
(
EditorBase
&
aEditorBase
nsIContent
&
aContentToInsert
const
EditorDOMPointBase
<
PT
CT
>
&
aPointToInsert
)
:
mContentToInsert
(
&
aContentToInsert
)
mPointToInsert
(
aPointToInsert
)
mEditorBase
(
&
aEditorBase
)
{
MOZ_ASSERT
(
mPointToInsert
.
IsSetAndValid
(
)
)
;
Unused
<
<
mPointToInsert
.
GetChild
(
)
;
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
InsertNodeTransaction
EditTransactionBase
mEditorBase
mContentToInsert
mPointToInsert
)
NS_IMPL_ADDREF_INHERITED
(
InsertNodeTransaction
EditTransactionBase
)
NS_IMPL_RELEASE_INHERITED
(
InsertNodeTransaction
EditTransactionBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
InsertNodeTransaction
)
NS_INTERFACE_MAP_END_INHERITING
(
EditTransactionBase
)
NS_IMETHODIMP
InsertNodeTransaction
:
:
DoTransaction
(
)
{
if
(
NS_WARN_IF
(
!
mEditorBase
)
|
|
NS_WARN_IF
(
!
mContentToInsert
)
|
|
NS_WARN_IF
(
!
mPointToInsert
.
IsSet
(
)
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
!
mPointToInsert
.
IsSetAndValid
(
)
)
{
if
(
mPointToInsert
.
GetChild
(
)
)
{
EditorDOMPoint
newPointToInsert
(
mPointToInsert
.
GetChild
(
)
)
;
if
(
!
newPointToInsert
.
IsSet
(
)
)
{
newPointToInsert
.
SetToEndOf
(
mPointToInsert
.
GetContainer
(
)
)
;
if
(
NS_WARN_IF
(
!
newPointToInsert
.
IsSet
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
}
mPointToInsert
=
newPointToInsert
;
}
else
{
mPointToInsert
.
SetToEndOf
(
mPointToInsert
.
GetContainer
(
)
)
;
if
(
NS_WARN_IF
(
!
mPointToInsert
.
IsSet
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
}
}
OwningNonNull
<
EditorBase
>
editorBase
=
*
mEditorBase
;
OwningNonNull
<
nsIContent
>
contentToInsert
=
*
mContentToInsert
;
OwningNonNull
<
nsINode
>
container
=
*
mPointToInsert
.
GetContainer
(
)
;
nsCOMPtr
<
nsIContent
>
refChild
=
mPointToInsert
.
GetChild
(
)
;
if
(
contentToInsert
-
>
IsElement
(
)
)
{
nsresult
rv
=
editorBase
-
>
MarkElementDirty
(
MOZ_KnownLive
(
*
contentToInsert
-
>
AsElement
(
)
)
)
;
if
(
NS_WARN_IF
(
rv
=
=
NS_ERROR_EDITOR_DESTROYED
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
EditorBase
:
:
MarkElementDirty
(
)
failed
but
ignored
"
)
;
}
ErrorResult
error
;
container
-
>
InsertBefore
(
contentToInsert
refChild
error
)
;
if
(
error
.
Failed
(
)
)
{
NS_WARNING
(
"
nsINode
:
:
InsertBefore
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
if
(
!
editorBase
-
>
AsHTMLEditor
(
)
&
&
contentToInsert
-
>
IsText
(
)
)
{
uint32_t
length
=
contentToInsert
-
>
AsText
(
)
-
>
TextLength
(
)
;
if
(
length
>
0
)
{
nsresult
rv
=
MOZ_KnownLive
(
editorBase
-
>
AsTextEditor
(
)
)
-
>
DidInsertText
(
length
0
length
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
TextEditor
:
:
DidInsertText
(
)
failed
"
)
;
return
rv
;
}
}
}
if
(
!
mEditorBase
-
>
AllowsTransactionsToChangeSelection
(
)
)
{
return
NS_OK
;
}
RefPtr
<
Selection
>
selection
=
mEditorBase
-
>
GetSelection
(
)
;
if
(
NS_WARN_IF
(
!
selection
)
)
{
return
NS_ERROR_FAILURE
;
}
EditorRawDOMPoint
afterInsertedNode
(
EditorRawDOMPoint
:
:
After
(
contentToInsert
)
)
;
NS_WARNING_ASSERTION
(
afterInsertedNode
.
IsSet
(
)
"
Failed
to
set
after
the
inserted
node
"
)
;
IgnoredErrorResult
ignoredError
;
selection
-
>
Collapse
(
afterInsertedNode
ignoredError
)
;
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
Selection
:
:
Collapse
(
)
failed
but
ignored
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
InsertNodeTransaction
:
:
UndoTransaction
(
)
{
if
(
NS_WARN_IF
(
!
mEditorBase
)
|
|
NS_WARN_IF
(
!
mContentToInsert
)
|
|
NS_WARN_IF
(
!
mPointToInsert
.
IsSet
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
if
(
!
mEditorBase
-
>
AsHTMLEditor
(
)
&
&
mContentToInsert
-
>
IsText
(
)
)
{
uint32_t
length
=
mContentToInsert
-
>
TextLength
(
)
;
if
(
length
>
0
)
{
mEditorBase
-
>
AsTextEditor
(
)
-
>
WillDeleteText
(
length
0
length
)
;
}
}
OwningNonNull
<
nsINode
>
container
=
*
mPointToInsert
.
GetContainer
(
)
;
OwningNonNull
<
nsIContent
>
contentToInsert
=
*
mContentToInsert
;
ErrorResult
error
;
container
-
>
RemoveChild
(
contentToInsert
error
)
;
NS_WARNING
(
"
nsINode
:
:
RemoveChild
(
)
failed
"
)
;
return
error
.
StealNSResult
(
)
;
}
}
