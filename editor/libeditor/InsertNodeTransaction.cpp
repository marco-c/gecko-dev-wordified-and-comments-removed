#
include
"
InsertNodeTransaction
.
h
"
#
include
"
mozilla
/
EditorBase
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsMemory
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
using
namespace
dom
;
InsertNodeTransaction
:
:
InsertNodeTransaction
(
nsIContent
&
aNode
nsINode
&
aParent
int32_t
aOffset
EditorBase
&
aEditorBase
nsIContent
*
aChildAtOffset
)
:
mNode
(
&
aNode
)
mParent
(
&
aParent
)
mOffset
(
aOffset
)
mEditorBase
(
&
aEditorBase
)
mRefNode
(
aChildAtOffset
)
{
MOZ_ASSERT
(
!
aChildAtOffset
|
|
aChildAtOffset
-
>
NodeType
(
)
=
=
nsIDOMNode
:
:
DOCUMENT_FRAGMENT_NODE
|
|
aChildAtOffset
=
=
aParent
.
GetChildAt
(
aOffset
)
)
;
}
InsertNodeTransaction
:
:
~
InsertNodeTransaction
(
)
{
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
InsertNodeTransaction
EditTransactionBase
mEditorBase
mNode
mParent
mRefNode
)
NS_IMPL_ADDREF_INHERITED
(
InsertNodeTransaction
EditTransactionBase
)
NS_IMPL_RELEASE_INHERITED
(
InsertNodeTransaction
EditTransactionBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
InsertNodeTransaction
)
NS_INTERFACE_MAP_END_INHERITING
(
EditTransactionBase
)
NS_IMETHODIMP
InsertNodeTransaction
:
:
DoTransaction
(
)
{
if
(
NS_WARN_IF
(
!
mEditorBase
)
|
|
NS_WARN_IF
(
!
mNode
)
|
|
NS_WARN_IF
(
!
mParent
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
uint32_t
count
=
mParent
-
>
GetChildCount
(
)
;
if
(
mOffset
>
static_cast
<
int32_t
>
(
count
)
|
|
mOffset
=
=
-
1
)
{
mOffset
=
count
;
}
if
(
!
mRefNode
|
|
mRefNode
-
>
NodeType
(
)
=
=
nsIDOMNode
:
:
DOCUMENT_FRAGMENT_NODE
)
{
mRefNode
=
mParent
-
>
GetChildAt
(
mOffset
)
;
}
mEditorBase
-
>
MarkNodeDirty
(
GetAsDOMNode
(
mNode
)
)
;
ErrorResult
rv
;
mParent
-
>
InsertBefore
(
*
mNode
mRefNode
rv
)
;
NS_ENSURE_TRUE
(
!
rv
.
Failed
(
)
rv
.
StealNSResult
(
)
)
;
if
(
mEditorBase
-
>
GetShouldTxnSetSelection
(
)
)
{
RefPtr
<
Selection
>
selection
=
mEditorBase
-
>
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_NULL_POINTER
)
;
selection
-
>
Collapse
(
mParent
mOffset
+
1
)
;
}
else
{
}
return
NS_OK
;
}
NS_IMETHODIMP
InsertNodeTransaction
:
:
UndoTransaction
(
)
{
if
(
NS_WARN_IF
(
!
mNode
)
|
|
NS_WARN_IF
(
!
mParent
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
ErrorResult
rv
;
mParent
-
>
RemoveChild
(
*
mNode
rv
)
;
return
rv
.
StealNSResult
(
)
;
}
NS_IMETHODIMP
InsertNodeTransaction
:
:
GetTxnDescription
(
nsAString
&
aString
)
{
aString
.
AssignLiteral
(
"
InsertNodeTransaction
"
)
;
return
NS_OK
;
}
}
