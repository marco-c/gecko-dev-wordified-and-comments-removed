#
include
"
mozilla
/
EditorBase
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Encoding
.
h
"
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
#
include
"
ChangeAttributeTransaction
.
h
"
#
include
"
CompositionTransaction
.
h
"
#
include
"
CreateElementTransaction
.
h
"
#
include
"
DeleteNodeTransaction
.
h
"
#
include
"
DeleteRangeTransaction
.
h
"
#
include
"
DeleteTextTransaction
.
h
"
#
include
"
EditAggregateTransaction
.
h
"
#
include
"
EditorEventListener
.
h
"
#
include
"
InsertNodeTransaction
.
h
"
#
include
"
InsertTextTransaction
.
h
"
#
include
"
JoinNodeTransaction
.
h
"
#
include
"
PlaceholderTransaction
.
h
"
#
include
"
SplitNodeTransaction
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
ComposerCommandsUpdater
.
h
"
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
mozilla
/
CSSEditUtils
.
h
"
#
include
"
mozilla
/
EditAction
.
h
"
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
mozilla
/
EditorSpellCheck
.
h
"
#
include
"
mozilla
/
EditorUtils
.
h
"
#
include
"
mozilla
/
EditTransactionBase
.
h
"
#
include
"
mozilla
/
FlushType
.
h
"
#
include
"
mozilla
/
IMEContentObserver
.
h
"
#
include
"
mozilla
/
IMEStateManager
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
mozInlineSpellChecker
.
h
"
#
include
"
mozilla
/
mozSpellChecker
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
RangeBoundary
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
ServoCSSParser
.
h
"
#
include
"
mozilla
/
StaticPrefs_bidi
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
TextComposition
.
h
"
#
include
"
mozilla
/
TextInputListener
.
h
"
#
include
"
mozilla
/
TextServicesDocument
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
#
include
"
mozilla
/
TransactionManager
.
h
"
#
include
"
mozilla
/
dom
/
AbstractRange
.
h
"
#
include
"
mozilla
/
dom
/
CharacterData
.
h
"
#
include
"
mozilla
/
dom
/
DataTransfer
.
h
"
#
include
"
mozilla
/
InternalMutationEvent
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
EventTarget
.
h
"
#
include
"
mozilla
/
dom
/
HTMLBodyElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLBRElement
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsCCUncollectableMarker
.
h
"
#
include
"
nsCaret
.
h
"
#
include
"
nsCaseTreatment
.
h
"
#
include
"
nsCharTraits
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsComputedDOMStyle
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDOMString
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsFrameSelection
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIAbsorbingTransaction
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIDocumentStateListener
.
h
"
#
include
"
nsIEditActionListener
.
h
"
#
include
"
nsIEditorObserver
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIInlineSpellChecker
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsISelectionController
.
h
"
#
include
"
nsISelectionDisplay
.
h
"
#
include
"
nsISupportsBase
.
h
"
#
include
"
nsISupportsUtils
.
h
"
#
include
"
nsITransferable
.
h
"
#
include
"
nsITransaction
.
h
"
#
include
"
nsITransactionManager
.
h
"
#
include
"
nsIWeakReference
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
nsStyleStructFwd
.
h
"
#
include
"
nsStyleUtil
.
h
"
#
include
"
nsTextNode
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
prtime
.
h
"
class
nsIOutputStream
;
class
nsITransferable
;
namespace
mozilla
{
using
namespace
dom
;
using
namespace
widget
;
template
EditActionResult
EditorBase
:
:
SetCaretBidiLevelForDeletion
(
const
EditorDOMPoint
&
aPointAtCaret
nsIEditor
:
:
EDirection
aDirectionAndAmount
)
const
;
template
EditActionResult
EditorBase
:
:
SetCaretBidiLevelForDeletion
(
const
EditorRawDOMPoint
&
aPointAtCaret
nsIEditor
:
:
EDirection
aDirectionAndAmount
)
const
;
EditorBase
:
:
EditorBase
(
)
:
mEditActionData
(
nullptr
)
mPlaceholderName
(
nullptr
)
mModCount
(
0
)
mFlags
(
0
)
mUpdateCount
(
0
)
mPlaceholderBatch
(
0
)
mWrapColumn
(
0
)
mNewlineHandling
(
nsIEditor
:
:
eNewlinesPasteToFirst
)
mDocDirtyState
(
-
1
)
mSpellcheckCheckboxState
(
eTriUnset
)
mInitSucceeded
(
false
)
mAllowsTransactionsToChangeSelection
(
true
)
mDidPreDestroy
(
false
)
mDidPostCreate
(
false
)
mDispatchInputEvent
(
true
)
mIsInEditSubAction
(
false
)
mHidingCaret
(
false
)
mSpellCheckerDictionaryUpdated
(
true
)
mIsHTMLEditorClass
(
false
)
{
}
EditorBase
:
:
~
EditorBase
(
)
{
MOZ_ASSERT
(
!
IsInitialized
(
)
|
|
mDidPreDestroy
"
Why
PreDestroy
hasn
'
t
been
called
?
"
)
;
if
(
mComposition
)
{
mComposition
-
>
OnEditorDestroyed
(
)
;
mComposition
=
nullptr
;
}
HideCaret
(
false
)
;
mTransactionManager
=
nullptr
;
}
NS_IMPL_CYCLE_COLLECTION_CLASS
(
EditorBase
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
EditorBase
)
if
(
tmp
-
>
mEventListener
)
{
tmp
-
>
mEventListener
-
>
Disconnect
(
)
;
tmp
-
>
mEventListener
=
nullptr
;
}
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mRootElement
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mPaddingBRElementForEmptyEditor
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mSelectionController
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDocument
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mIMEContentObserver
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mInlineSpellChecker
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mTextServicesDocument
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mTextInputListener
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mTransactionManager
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mActionListeners
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mEditorObservers
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDocStateListeners
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mEventTarget
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mPlaceholderTransaction
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_WEAK_REFERENCE
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
EditorBase
)
Document
*
currentDoc
=
tmp
-
>
mRootElement
?
tmp
-
>
mRootElement
-
>
GetUncomposedDoc
(
)
:
nullptr
;
if
(
currentDoc
&
&
nsCCUncollectableMarker
:
:
InGeneration
(
cb
currentDoc
-
>
GetMarkedCCGeneration
(
)
)
)
{
return
NS_SUCCESS_INTERRUPTED_TRAVERSE
;
}
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mRootElement
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mPaddingBRElementForEmptyEditor
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mSelectionController
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDocument
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mIMEContentObserver
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mInlineSpellChecker
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mTextServicesDocument
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mTextInputListener
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mTransactionManager
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mActionListeners
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mEditorObservers
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDocStateListeners
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mEventTarget
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mEventListener
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mPlaceholderTransaction
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
EditorBase
)
NS_INTERFACE_MAP_ENTRY
(
nsISelectionListener
)
NS_INTERFACE_MAP_ENTRY
(
nsISupportsWeakReference
)
NS_INTERFACE_MAP_ENTRY
(
nsIEditor
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIEditor
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
EditorBase
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
EditorBase
)
nsresult
EditorBase
:
:
Init
(
Document
&
aDocument
Element
*
aRoot
nsISelectionController
*
aSelectionController
uint32_t
aFlags
const
nsAString
&
aValue
)
{
MOZ_ASSERT
(
GetTopLevelEditSubAction
(
)
=
=
EditSubAction
:
:
eNone
"
Initializing
during
an
edit
action
is
an
error
"
)
;
mFlags
=
aFlags
;
mDocument
=
&
aDocument
;
nsCOMPtr
<
nsISelectionController
>
selectionController
;
if
(
aSelectionController
)
{
mSelectionController
=
aSelectionController
;
selectionController
=
aSelectionController
;
}
else
{
selectionController
=
GetPresShell
(
)
;
}
MOZ_ASSERT
(
selectionController
"
Selection
controller
should
be
available
at
this
point
"
)
;
if
(
mEditActionData
)
{
Selection
*
selection
=
selectionController
-
>
GetSelection
(
nsISelectionController
:
:
SELECTION_NORMAL
)
;
NS_WARNING_ASSERTION
(
selection
"
We
cannot
update
selection
cache
in
the
edit
action
"
)
;
if
(
selection
)
{
mEditActionData
-
>
UpdateSelectionCache
(
*
selection
)
;
}
}
if
(
aRoot
)
{
mRootElement
=
aRoot
;
}
mUpdateCount
=
0
;
if
(
mComposition
&
&
mComposition
-
>
GetContainerTextNode
(
)
&
&
!
mComposition
-
>
GetContainerTextNode
(
)
-
>
IsInComposedDoc
(
)
)
{
mComposition
-
>
OnTextNodeRemoved
(
)
;
}
selectionController
-
>
SetCaretReadOnly
(
false
)
;
selectionController
-
>
SetDisplaySelection
(
nsISelectionController
:
:
SELECTION_ON
)
;
selectionController
-
>
SetSelectionFlags
(
nsISelectionDisplay
:
:
DISPLAY_ALL
)
;
MOZ_ASSERT
(
IsInitialized
(
)
)
;
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
SelectionRefPtr
(
)
-
>
AddSelectionListener
(
this
)
;
mDidPreDestroy
=
false
;
mDidPostCreate
=
false
;
return
NS_OK
;
}
nsresult
EditorBase
:
:
PostCreate
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
mFlags
=
~
mFlags
;
nsresult
rv
=
SetFlags
(
~
mFlags
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
if
(
!
mDidPostCreate
)
{
mDidPostCreate
=
true
;
CreateEventListeners
(
)
;
rv
=
InstallEventListeners
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
ResetModificationCount
(
)
;
NotifyDocumentListeners
(
eDocumentCreated
)
;
NotifyDocumentListeners
(
eDocumentStateChanged
)
;
}
nsCOMPtr
<
nsIContent
>
focusedContent
=
GetFocusedContent
(
)
;
if
(
focusedContent
)
{
InitializeSelection
(
focusedContent
)
;
mEventListener
-
>
SpellCheckIfNeeded
(
)
;
IMEState
newState
;
if
(
NS_WARN_IF
(
NS_FAILED
(
GetPreferredIMEState
(
&
newState
)
)
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIContent
>
content
=
GetFocusedContentForIME
(
)
;
IMEStateManager
:
:
UpdateIMEState
(
newState
content
this
)
;
}
IMEStateManager
:
:
OnEditorInitialized
(
*
this
)
;
return
NS_OK
;
}
void
EditorBase
:
:
SetTextInputListener
(
TextInputListener
*
aTextInputListener
)
{
MOZ_ASSERT
(
!
mTextInputListener
|
|
!
aTextInputListener
|
|
mTextInputListener
=
=
aTextInputListener
)
;
mTextInputListener
=
aTextInputListener
;
}
void
EditorBase
:
:
SetIMEContentObserver
(
IMEContentObserver
*
aIMEContentObserver
)
{
MOZ_ASSERT
(
!
mIMEContentObserver
|
|
!
aIMEContentObserver
|
|
mIMEContentObserver
=
=
aIMEContentObserver
)
;
mIMEContentObserver
=
aIMEContentObserver
;
}
void
EditorBase
:
:
CreateEventListeners
(
)
{
if
(
!
mEventListener
)
{
mEventListener
=
new
EditorEventListener
(
)
;
}
}
nsresult
EditorBase
:
:
InstallEventListeners
(
)
{
if
(
NS_WARN_IF
(
!
IsInitialized
(
)
)
|
|
NS_WARN_IF
(
!
mEventListener
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
mEventTarget
=
GetExposedRoot
(
)
;
NS_ENSURE_TRUE
(
mEventTarget
NS_ERROR_NOT_AVAILABLE
)
;
nsresult
rv
=
mEventListener
-
>
Connect
(
this
)
;
if
(
mComposition
)
{
if
(
mComposition
-
>
Destroyed
(
)
)
{
mComposition
=
nullptr
;
}
else
{
mComposition
-
>
StartHandlingComposition
(
this
)
;
}
}
return
rv
;
}
void
EditorBase
:
:
RemoveEventListeners
(
)
{
if
(
!
IsInitialized
(
)
|
|
!
mEventListener
)
{
return
;
}
mEventListener
-
>
Disconnect
(
)
;
if
(
mComposition
)
{
mComposition
-
>
EndHandlingComposition
(
this
)
;
}
mEventTarget
=
nullptr
;
}
bool
EditorBase
:
:
GetDesiredSpellCheckState
(
)
{
if
(
mSpellcheckCheckboxState
!
=
eTriUnset
)
{
return
(
mSpellcheckCheckboxState
=
=
eTriTrue
)
;
}
int32_t
spellcheckLevel
=
Preferences
:
:
GetInt
(
"
layout
.
spellcheckDefault
"
1
)
;
if
(
!
spellcheckLevel
)
{
return
false
;
}
if
(
!
CanEnableSpellCheck
(
)
)
{
return
false
;
}
PresShell
*
presShell
=
GetPresShell
(
)
;
if
(
presShell
)
{
nsPresContext
*
context
=
presShell
-
>
GetPresContext
(
)
;
if
(
context
&
&
!
context
-
>
IsDynamic
(
)
)
{
return
false
;
}
}
nsCOMPtr
<
nsIContent
>
content
=
GetExposedRoot
(
)
;
if
(
!
content
)
{
return
false
;
}
auto
element
=
nsGenericHTMLElement
:
:
FromNode
(
content
)
;
if
(
!
element
)
{
return
false
;
}
if
(
!
IsPlaintextEditor
(
)
)
{
Document
*
doc
=
content
-
>
GetComposedDoc
(
)
;
return
doc
&
&
doc
-
>
IsEditingOn
(
)
;
}
return
element
-
>
Spellcheck
(
)
;
}
void
EditorBase
:
:
PreDestroy
(
bool
aDestroyingFrames
)
{
if
(
mDidPreDestroy
)
{
return
;
}
if
(
IsPasswordEditor
(
)
&
&
!
AsTextEditor
(
)
-
>
IsAllMasked
(
)
)
{
AsTextEditor
(
)
-
>
MaskAllCharacters
(
)
;
}
mInitSucceeded
=
false
;
Selection
*
selection
=
GetSelection
(
)
;
if
(
selection
)
{
selection
-
>
RemoveSelectionListener
(
this
)
;
}
IMEStateManager
:
:
OnEditorDestroying
(
*
this
)
;
if
(
mInlineSpellChecker
)
mInlineSpellChecker
-
>
Cleanup
(
aDestroyingFrames
)
;
NotifyDocumentListeners
(
eDocumentToBeDestroyed
)
;
RemoveEventListeners
(
)
;
HideCaret
(
false
)
;
mActionListeners
.
Clear
(
)
;
mEditorObservers
.
Clear
(
)
;
mDocStateListeners
.
Clear
(
)
;
mInlineSpellChecker
=
nullptr
;
mTextServicesDocument
=
nullptr
;
mTextInputListener
=
nullptr
;
mSpellcheckCheckboxState
=
eTriUnset
;
mRootElement
=
nullptr
;
mPaddingBRElementForEmptyEditor
=
nullptr
;
if
(
mTransactionManager
)
{
DebugOnly
<
bool
>
disabledUndoRedo
=
DisableUndoRedo
(
)
;
NS_WARNING_ASSERTION
(
disabledUndoRedo
"
Failed
to
disable
undo
/
redo
transactions
"
)
;
mTransactionManager
=
nullptr
;
}
mDidPreDestroy
=
true
;
}
NS_IMETHODIMP
EditorBase
:
:
GetFlags
(
uint32_t
*
aFlags
)
{
*
aFlags
=
Flags
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
SetFlags
(
uint32_t
aFlags
)
{
if
(
mFlags
=
=
aFlags
)
{
return
NS_OK
;
}
DebugOnly
<
bool
>
changingPasswordEditorFlagDynamically
=
mFlags
!
=
~
aFlags
&
&
(
(
mFlags
^
aFlags
)
&
nsIEditor
:
:
eEditorPasswordMask
)
;
MOZ_ASSERT
(
!
changingPasswordEditorFlagDynamically
"
TextEditor
does
not
support
dynamic
eEditorPasswordMask
flag
change
"
)
;
bool
spellcheckerWasEnabled
=
CanEnableSpellCheck
(
)
;
mFlags
=
aFlags
;
if
(
!
IsInitialized
(
)
)
{
return
NS_OK
;
}
if
(
CanEnableSpellCheck
(
)
!
=
spellcheckerWasEnabled
)
{
SyncRealTimeSpell
(
)
;
}
if
(
!
mDidPostCreate
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIContent
>
focusedContent
=
GetFocusedContent
(
)
;
if
(
focusedContent
)
{
IMEState
newState
;
nsresult
rv
=
GetPreferredIMEState
(
&
newState
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsCOMPtr
<
nsIContent
>
content
=
GetFocusedContentForIME
(
)
;
IMEStateManager
:
:
UpdateIMEState
(
newState
content
this
)
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetIsSelectionEditable
(
bool
*
aIsSelectionEditable
)
{
NS_ENSURE_ARG_POINTER
(
aIsSelectionEditable
)
;
*
aIsSelectionEditable
=
IsSelectionEditable
(
)
;
return
NS_OK
;
}
bool
EditorBase
:
:
IsSelectionEditable
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
false
;
}
if
(
!
mIsHTMLEditorClass
)
{
nsCOMPtr
<
nsINode
>
anchorNode
=
SelectionRefPtr
(
)
-
>
GetAnchorNode
(
)
;
return
anchorNode
&
&
IsEditable
(
anchorNode
)
;
}
nsINode
*
anchorNode
=
SelectionRefPtr
(
)
-
>
GetAnchorNode
(
)
;
nsINode
*
focusNode
=
SelectionRefPtr
(
)
-
>
GetFocusNode
(
)
;
if
(
!
anchorNode
|
|
!
focusNode
)
{
return
false
;
}
bool
isSelectionEditable
=
SelectionRefPtr
(
)
-
>
RangeCount
(
)
&
&
anchorNode
-
>
IsEditable
(
)
&
&
focusNode
-
>
IsEditable
(
)
;
if
(
!
isSelectionEditable
)
{
return
false
;
}
nsINode
*
commonAncestor
=
SelectionRefPtr
(
)
-
>
GetAnchorFocusRange
(
)
-
>
GetClosestCommonInclusiveAncestor
(
)
;
while
(
commonAncestor
&
&
!
commonAncestor
-
>
IsEditable
(
)
)
{
commonAncestor
=
commonAncestor
-
>
GetParentNode
(
)
;
}
return
!
!
commonAncestor
;
}
NS_IMETHODIMP
EditorBase
:
:
GetIsDocumentEditable
(
bool
*
aIsDocumentEditable
)
{
NS_ENSURE_ARG_POINTER
(
aIsDocumentEditable
)
;
RefPtr
<
Document
>
doc
=
GetDocument
(
)
;
*
aIsDocumentEditable
=
doc
&
&
IsModifiable
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetDocument
(
Document
*
*
aDoc
)
{
NS_IF_ADDREF
(
*
aDoc
=
mDocument
)
;
return
*
aDoc
?
NS_OK
:
NS_ERROR_NOT_INITIALIZED
;
}
already_AddRefed
<
nsIWidget
>
EditorBase
:
:
GetWidget
(
)
{
nsPresContext
*
presContext
=
GetPresContext
(
)
;
if
(
NS_WARN_IF
(
!
presContext
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIWidget
>
widget
=
presContext
-
>
GetRootWidget
(
)
;
NS_ENSURE_TRUE
(
widget
.
get
(
)
nullptr
)
;
return
widget
.
forget
(
)
;
}
NS_IMETHODIMP
EditorBase
:
:
GetContentsMIMEType
(
char
*
*
aContentsMIMEType
)
{
NS_ENSURE_ARG_POINTER
(
aContentsMIMEType
)
;
*
aContentsMIMEType
=
ToNewCString
(
mContentMIMEType
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
SetContentsMIMEType
(
const
char
*
aContentsMIMEType
)
{
mContentMIMEType
.
Assign
(
aContentsMIMEType
?
aContentsMIMEType
:
"
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetSelectionController
(
nsISelectionController
*
*
aSel
)
{
NS_ENSURE_TRUE
(
aSel
NS_ERROR_NULL_POINTER
)
;
*
aSel
=
nullptr
;
nsCOMPtr
<
nsISelectionController
>
selCon
=
GetSelectionController
(
)
;
if
(
NS_WARN_IF
(
!
selCon
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
selCon
.
forget
(
aSel
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
DeleteSelection
(
EDirection
aAction
EStripWrappers
aStripWrappers
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
EditorBase
:
:
GetSelection
(
Selection
*
*
aSelection
)
{
return
GetSelection
(
SelectionType
:
:
eNormal
aSelection
)
;
}
nsresult
EditorBase
:
:
GetSelection
(
SelectionType
aSelectionType
Selection
*
*
aSelection
)
const
{
if
(
NS_WARN_IF
(
!
aSelection
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
IsEditActionDataAvailable
(
)
)
{
*
aSelection
=
do_AddRef
(
SelectionRefPtr
(
)
)
.
take
(
)
;
return
NS_OK
;
}
*
aSelection
=
nullptr
;
nsISelectionController
*
selcon
=
GetSelectionController
(
)
;
if
(
!
selcon
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
RefPtr
<
Selection
>
selection
=
selcon
-
>
GetSelection
(
ToRawSelectionType
(
aSelectionType
)
)
;
if
(
!
selection
)
{
return
NS_ERROR_INVALID_ARG
;
}
selection
.
forget
(
aSelection
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
DoTransaction
(
nsITransaction
*
aTxn
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eUnknown
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
return
DoTransactionInternal
(
aTxn
)
;
}
nsresult
EditorBase
:
:
DoTransactionInternal
(
nsITransaction
*
aTxn
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
!
NeedsToDispatchBeforeInputEvent
(
)
"
beforeinput
event
hasn
'
t
been
dispatched
yet
"
)
;
if
(
mPlaceholderBatch
&
&
!
mPlaceholderTransaction
)
{
mPlaceholderTransaction
=
PlaceholderTransaction
:
:
Create
(
*
this
mPlaceholderName
std
:
:
move
(
mSelState
)
)
;
MOZ_ASSERT
(
mSelState
.
isNothing
(
)
)
;
RefPtr
<
PlaceholderTransaction
>
placeholderTransaction
=
mPlaceholderTransaction
;
DoTransactionInternal
(
placeholderTransaction
)
;
if
(
mTransactionManager
)
{
nsCOMPtr
<
nsITransaction
>
topTransaction
=
mTransactionManager
-
>
PeekUndoStack
(
)
;
nsCOMPtr
<
nsIAbsorbingTransaction
>
topAbsorbingTransaction
=
do_QueryInterface
(
topTransaction
)
;
if
(
topAbsorbingTransaction
)
{
RefPtr
<
PlaceholderTransaction
>
topPlaceholderTransaction
=
topAbsorbingTransaction
-
>
AsPlaceholderTransaction
(
)
;
if
(
topPlaceholderTransaction
)
{
mPlaceholderTransaction
=
topPlaceholderTransaction
;
}
}
}
}
if
(
aTxn
)
{
SelectionBatcher
selectionBatcher
(
SelectionRefPtr
(
)
)
;
nsresult
rv
;
if
(
mTransactionManager
)
{
RefPtr
<
TransactionManager
>
transactionManager
(
mTransactionManager
)
;
rv
=
transactionManager
-
>
DoTransaction
(
aTxn
)
;
}
else
{
rv
=
aTxn
-
>
DoTransaction
(
)
;
}
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
DoAfterDoTransaction
(
aTxn
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
EnableUndo
(
bool
aEnable
)
{
if
(
aEnable
)
{
DebugOnly
<
bool
>
enabledUndoRedo
=
EnableUndoRedo
(
)
;
NS_WARNING_ASSERTION
(
enabledUndoRedo
"
Failed
to
enable
undo
/
redo
transactions
"
)
;
return
NS_OK
;
}
DebugOnly
<
bool
>
disabledUndoRedo
=
DisableUndoRedo
(
)
;
NS_WARNING_ASSERTION
(
disabledUndoRedo
"
Failed
to
disable
undo
/
redo
transactions
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetTransactionManager
(
nsITransactionManager
*
*
aTransactionManager
)
{
if
(
NS_WARN_IF
(
!
aTransactionManager
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
NS_WARN_IF
(
!
mTransactionManager
)
)
{
return
NS_ERROR_FAILURE
;
}
NS_IF_ADDREF
(
*
aTransactionManager
=
mTransactionManager
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
Undo
(
uint32_t
aCount
)
{
nsresult
rv
=
MOZ_KnownLive
(
AsTextEditor
(
)
)
-
>
UndoAsAction
(
aCount
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
do
Undo
"
)
;
return
rv
;
}
NS_IMETHODIMP
EditorBase
:
:
CanUndo
(
bool
*
aIsEnabled
bool
*
aCanUndo
)
{
if
(
NS_WARN_IF
(
!
aIsEnabled
)
|
|
NS_WARN_IF
(
!
aCanUndo
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
aCanUndo
=
CanUndo
(
)
;
*
aIsEnabled
=
IsUndoRedoEnabled
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
Redo
(
uint32_t
aCount
)
{
nsresult
rv
=
MOZ_KnownLive
(
AsTextEditor
(
)
)
-
>
RedoAsAction
(
aCount
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
do
Redo
"
)
;
return
rv
;
}
NS_IMETHODIMP
EditorBase
:
:
CanRedo
(
bool
*
aIsEnabled
bool
*
aCanRedo
)
{
if
(
NS_WARN_IF
(
!
aIsEnabled
)
|
|
NS_WARN_IF
(
!
aCanRedo
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
aCanRedo
=
CanRedo
(
)
;
*
aIsEnabled
=
IsUndoRedoEnabled
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
BeginTransaction
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eUnknown
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
BeginTransactionInternal
(
)
;
return
NS_OK
;
}
void
EditorBase
:
:
BeginTransactionInternal
(
)
{
BeginUpdateViewBatch
(
)
;
if
(
mTransactionManager
)
{
RefPtr
<
TransactionManager
>
transactionManager
(
mTransactionManager
)
;
transactionManager
-
>
BeginBatch
(
nullptr
)
;
}
}
NS_IMETHODIMP
EditorBase
:
:
EndTransaction
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eUnknown
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
EndTransactionInternal
(
)
;
return
NS_OK
;
}
void
EditorBase
:
:
EndTransactionInternal
(
)
{
if
(
mTransactionManager
)
{
RefPtr
<
TransactionManager
>
transactionManager
(
mTransactionManager
)
;
transactionManager
-
>
EndBatch
(
false
)
;
}
EndUpdateViewBatch
(
)
;
}
void
EditorBase
:
:
BeginPlaceholderTransaction
(
nsAtom
*
aTransactionName
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
mPlaceholderBatch
>
=
0
"
negative
placeholder
batch
count
!
"
)
;
if
(
!
mPlaceholderBatch
)
{
NotifyEditorObservers
(
eNotifyEditorObserversOfBefore
)
;
BeginUpdateViewBatch
(
)
;
mPlaceholderTransaction
=
nullptr
;
mPlaceholderName
=
aTransactionName
;
mSelState
.
emplace
(
)
;
mSelState
-
>
SaveSelection
(
SelectionRefPtr
(
)
)
;
if
(
mPlaceholderName
=
=
nsGkAtoms
:
:
IMETxnName
)
{
RangeUpdaterRef
(
)
.
RegisterSelectionState
(
*
mSelState
)
;
}
}
mPlaceholderBatch
+
+
;
}
void
EditorBase
:
:
EndPlaceholderTransaction
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
mPlaceholderBatch
>
0
"
zero
or
negative
placeholder
batch
count
when
ending
batch
!
"
)
;
if
(
mPlaceholderBatch
=
=
1
)
{
SelectionRefPtr
(
)
-
>
SetCanCacheFrameOffset
(
true
)
;
EndUpdateViewBatch
(
)
;
DebugOnly
<
nsresult
>
rvIgnored
=
ScrollSelectionFocusIntoView
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
ScrollSelectionFocusIntoView
(
)
failed
but
Ignored
"
)
;
SelectionRefPtr
(
)
-
>
SetCanCacheFrameOffset
(
false
)
;
if
(
mSelState
)
{
if
(
mPlaceholderName
=
=
nsGkAtoms
:
:
IMETxnName
)
{
RangeUpdaterRef
(
)
.
DropSelectionState
(
*
mSelState
)
;
}
mSelState
.
reset
(
)
;
}
if
(
mPlaceholderTransaction
)
{
mPlaceholderTransaction
-
>
EndPlaceHolderBatch
(
)
;
if
(
!
mComposition
)
{
NotifyEditorObservers
(
eNotifyEditorObserversOfEnd
)
;
}
mPlaceholderTransaction
=
nullptr
;
}
else
{
NotifyEditorObservers
(
eNotifyEditorObserversOfCancel
)
;
}
}
mPlaceholderBatch
-
-
;
}
NS_IMETHODIMP
EditorBase
:
:
SetShouldTxnSetSelection
(
bool
aShould
)
{
MakeThisAllowTransactionsToChangeSelection
(
aShould
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetDocumentIsEmpty
(
bool
*
aDocumentIsEmpty
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
EditorBase
:
:
SelectAll
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsresult
rv
=
SelectAllInternal
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
nsresult
EditorBase
:
:
SelectAllInternal
(
)
{
MOZ_ASSERT
(
IsInitialized
(
)
)
;
CommitComposition
(
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
nsresult
rv
=
SelectEntireDocument
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
BeginningOfDocument
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
dom
:
:
Element
*
rootElement
=
GetRoot
(
)
;
if
(
NS_WARN_IF
(
!
rootElement
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
nsCOMPtr
<
nsINode
>
firstNode
=
GetFirstEditableNode
(
rootElement
)
;
if
(
!
firstNode
)
{
return
SelectionRefPtr
(
)
-
>
Collapse
(
rootElement
0
)
;
}
if
(
firstNode
-
>
NodeType
(
)
=
=
nsINode
:
:
TEXT_NODE
)
{
return
SelectionRefPtr
(
)
-
>
Collapse
(
firstNode
0
)
;
}
nsCOMPtr
<
nsIContent
>
parent
=
firstNode
-
>
GetParent
(
)
;
if
(
!
parent
)
{
return
NS_ERROR_NULL_POINTER
;
}
MOZ_ASSERT
(
parent
-
>
ComputeIndexOf
(
firstNode
)
=
=
0
"
How
come
the
first
node
isn
'
t
the
left
most
child
in
its
parent
?
"
)
;
return
SelectionRefPtr
(
)
-
>
Collapse
(
parent
0
)
;
}
NS_IMETHODIMP
EditorBase
:
:
EndOfDocument
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsresult
rv
=
CollapseSelectionToEnd
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
nsresult
EditorBase
:
:
CollapseSelectionToEnd
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
if
(
NS_WARN_IF
(
!
IsInitialized
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsINode
*
node
=
GetRoot
(
)
;
if
(
NS_WARN_IF
(
!
node
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
nsINode
*
child
=
node
-
>
GetLastChild
(
)
;
while
(
child
&
&
IsContainer
(
child
)
)
{
node
=
child
;
child
=
node
-
>
GetLastChild
(
)
;
}
uint32_t
length
=
node
-
>
Length
(
)
;
return
SelectionRefPtr
(
)
-
>
Collapse
(
node
static_cast
<
int32_t
>
(
length
)
)
;
}
NS_IMETHODIMP
EditorBase
:
:
GetDocumentModified
(
bool
*
outDocModified
)
{
NS_ENSURE_TRUE
(
outDocModified
NS_ERROR_NULL_POINTER
)
;
int32_t
modCount
=
0
;
GetModificationCount
(
&
modCount
)
;
*
outDocModified
=
(
modCount
!
=
0
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetDocumentCharacterSet
(
nsACString
&
aCharset
)
{
return
GetDocumentCharsetInternal
(
aCharset
)
;
}
nsresult
EditorBase
:
:
GetDocumentCharsetInternal
(
nsACString
&
aCharset
)
const
{
RefPtr
<
Document
>
document
=
GetDocument
(
)
;
if
(
NS_WARN_IF
(
!
document
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
document
-
>
GetDocumentCharacterSet
(
)
-
>
Name
(
aCharset
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
SetDocumentCharacterSet
(
const
nsACString
&
characterSet
)
{
RefPtr
<
Document
>
document
=
GetDocument
(
)
;
if
(
NS_WARN_IF
(
!
document
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
auto
encoding
=
Encoding
:
:
ForLabelNoReplacement
(
characterSet
)
;
if
(
!
encoding
)
{
return
NS_ERROR_INVALID_ARG
;
}
document
-
>
SetDocumentCharacterSet
(
WrapNotNull
(
encoding
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
Cut
(
)
{
nsresult
rv
=
MOZ_KnownLive
(
AsTextEditor
(
)
)
-
>
CutAsAction
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
do
Cut
"
)
;
return
rv
;
}
NS_IMETHODIMP
EditorBase
:
:
CanCut
(
bool
*
aCanCut
)
{
if
(
NS_WARN_IF
(
!
aCanCut
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
aCanCut
=
AsTextEditor
(
)
-
>
IsCutCommandEnabled
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
Copy
(
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
EditorBase
:
:
CanCopy
(
bool
*
aCanCopy
)
{
if
(
NS_WARN_IF
(
!
aCanCopy
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
aCanCopy
=
AsTextEditor
(
)
-
>
IsCopyCommandEnabled
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
Paste
(
int32_t
aClipboardType
)
{
nsresult
rv
=
MOZ_KnownLive
(
AsTextEditor
(
)
)
-
>
PasteAsAction
(
aClipboardType
true
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
do
Paste
"
)
;
return
rv
;
}
NS_IMETHODIMP
EditorBase
:
:
PasteTransferable
(
nsITransferable
*
aTransferable
)
{
nsresult
rv
=
MOZ_KnownLive
(
AsTextEditor
(
)
)
-
>
PasteTransferableAsAction
(
aTransferable
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
do
Paste
transferable
"
)
;
return
rv
;
}
NS_IMETHODIMP
EditorBase
:
:
CanPaste
(
int32_t
aClipboardType
bool
*
aCanPaste
)
{
if
(
NS_WARN_IF
(
!
aCanPaste
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
aCanPaste
=
AsTextEditor
(
)
-
>
CanPaste
(
aClipboardType
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
SetAttribute
(
Element
*
aElement
const
nsAString
&
aAttribute
const
nsAString
&
aValue
)
{
if
(
NS_WARN_IF
(
aAttribute
.
IsEmpty
(
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
NS_WARN_IF
(
!
aElement
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eSetAttribute
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
|
|
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
RefPtr
<
nsAtom
>
attribute
=
NS_Atomize
(
aAttribute
)
;
rv
=
SetAttributeWithTransaction
(
*
aElement
*
attribute
aValue
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
SetAttributeWithTransaction
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
nsresult
EditorBase
:
:
SetAttributeWithTransaction
(
Element
&
aElement
nsAtom
&
aAttribute
const
nsAString
&
aValue
)
{
RefPtr
<
ChangeAttributeTransaction
>
transaction
=
ChangeAttributeTransaction
:
:
Create
(
aElement
aAttribute
aValue
)
;
return
DoTransactionInternal
(
transaction
)
;
}
NS_IMETHODIMP
EditorBase
:
:
RemoveAttribute
(
Element
*
aElement
const
nsAString
&
aAttribute
)
{
if
(
NS_WARN_IF
(
aAttribute
.
IsEmpty
(
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
NS_WARN_IF
(
!
aElement
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eRemoveAttribute
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
|
|
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
RefPtr
<
nsAtom
>
attribute
=
NS_Atomize
(
aAttribute
)
;
rv
=
RemoveAttributeWithTransaction
(
*
aElement
*
attribute
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
RemoveAttributeWithTransaction
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
nsresult
EditorBase
:
:
RemoveAttributeWithTransaction
(
Element
&
aElement
nsAtom
&
aAttribute
)
{
RefPtr
<
ChangeAttributeTransaction
>
transaction
=
ChangeAttributeTransaction
:
:
CreateToRemove
(
aElement
aAttribute
)
;
return
DoTransactionInternal
(
transaction
)
;
}
nsresult
EditorBase
:
:
MarkElementDirty
(
Element
&
aElement
)
{
if
(
!
OutputsMozDirty
(
)
)
{
return
NS_OK
;
}
aElement
.
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
mozdirty
EmptyString
(
)
false
)
;
return
NS_WARN_IF
(
Destroyed
(
)
)
?
NS_ERROR_EDITOR_DESTROYED
:
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetInlineSpellChecker
(
bool
autoCreate
nsIInlineSpellChecker
*
*
aInlineSpellChecker
)
{
NS_ENSURE_ARG_POINTER
(
aInlineSpellChecker
)
;
if
(
mDidPreDestroy
)
{
*
aInlineSpellChecker
=
nullptr
;
return
autoCreate
?
NS_ERROR_NOT_AVAILABLE
:
NS_OK
;
}
bool
canSpell
=
mozInlineSpellChecker
:
:
CanEnableInlineSpellChecking
(
)
;
if
(
!
canSpell
)
{
*
aInlineSpellChecker
=
nullptr
;
return
NS_ERROR_FAILURE
;
}
nsresult
rv
;
if
(
!
mInlineSpellChecker
&
&
autoCreate
)
{
mInlineSpellChecker
=
new
mozInlineSpellChecker
(
)
;
}
if
(
mInlineSpellChecker
)
{
rv
=
mInlineSpellChecker
-
>
Init
(
this
)
;
if
(
NS_FAILED
(
rv
)
)
{
mInlineSpellChecker
=
nullptr
;
}
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
NS_IF_ADDREF
(
*
aInlineSpellChecker
=
mInlineSpellChecker
)
;
return
NS_OK
;
}
void
EditorBase
:
:
SyncRealTimeSpell
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
;
}
bool
enable
=
GetDesiredSpellCheckState
(
)
;
nsCOMPtr
<
nsIInlineSpellChecker
>
spellChecker
;
GetInlineSpellChecker
(
enable
getter_AddRefs
(
spellChecker
)
)
;
if
(
mInlineSpellChecker
)
{
if
(
!
mSpellCheckerDictionaryUpdated
&
&
enable
)
{
mInlineSpellChecker
-
>
UpdateCurrentDictionary
(
)
;
mSpellCheckerDictionaryUpdated
=
true
;
}
mInlineSpellChecker
-
>
SetEnableRealTimeSpell
(
enable
&
&
spellChecker
)
;
}
}
NS_IMETHODIMP
EditorBase
:
:
SetSpellcheckUserOverride
(
bool
enable
)
{
mSpellcheckCheckboxState
=
enable
?
eTriTrue
:
eTriFalse
;
SyncRealTimeSpell
(
)
;
return
NS_OK
;
}
already_AddRefed
<
Element
>
EditorBase
:
:
CreateNodeWithTransaction
(
nsAtom
&
aTagName
const
EditorDOMPoint
&
aPointToInsert
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
aPointToInsert
.
IsSetAndValid
(
)
)
;
Unused
<
<
aPointToInsert
.
Offset
(
)
;
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eCreateNode
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
nullptr
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
RefPtr
<
Element
>
newElement
;
RefPtr
<
CreateElementTransaction
>
transaction
=
CreateElementTransaction
:
:
Create
(
*
this
aTagName
aPointToInsert
)
;
nsresult
rv
=
DoTransactionInternal
(
transaction
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
RangeUpdaterRef
(
)
.
SelAdjCreateNode
(
aPointToInsert
)
;
}
else
{
newElement
=
transaction
-
>
GetNewNode
(
)
;
MOZ_ASSERT
(
newElement
)
;
RangeUpdaterRef
(
)
.
SelAdjCreateNode
(
EditorRawDOMPoint
(
aPointToInsert
.
GetContainer
(
)
aPointToInsert
.
Offset
(
)
)
)
;
}
if
(
AsHTMLEditor
(
)
&
&
newElement
)
{
TopLevelEditSubActionDataRef
(
)
.
DidCreateElement
(
*
this
*
newElement
)
;
}
if
(
!
mActionListeners
.
IsEmpty
(
)
)
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
DidCreateNode
(
nsDependentAtomString
(
&
aTagName
)
newElement
rv
)
;
}
}
return
newElement
.
forget
(
)
;
}
NS_IMETHODIMP
EditorBase
:
:
InsertNode
(
nsINode
*
aNodeToInsert
nsINode
*
aContainer
int32_t
aOffset
)
{
nsCOMPtr
<
nsIContent
>
contentToInsert
=
do_QueryInterface
(
aNodeToInsert
)
;
if
(
NS_WARN_IF
(
!
contentToInsert
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
if
(
NS_WARN_IF
(
!
aContainer
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eInsertNode
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
|
|
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
int32_t
offset
=
aOffset
<
0
?
static_cast
<
int32_t
>
(
aContainer
-
>
Length
(
)
)
:
std
:
:
min
(
aOffset
static_cast
<
int32_t
>
(
aContainer
-
>
Length
(
)
)
)
;
rv
=
InsertNodeWithTransaction
(
*
contentToInsert
EditorDOMPoint
(
aContainer
offset
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
InsertNodeWithTransaction
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
nsresult
EditorBase
:
:
InsertNodeWithTransaction
(
nsIContent
&
aContentToInsert
const
EditorDOMPoint
&
aPointToInsert
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
if
(
NS_WARN_IF
(
!
aPointToInsert
.
IsSet
(
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
MOZ_ASSERT
(
aPointToInsert
.
IsSetAndValid
(
)
)
;
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eInsertNode
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
RefPtr
<
InsertNodeTransaction
>
transaction
=
InsertNodeTransaction
:
:
Create
(
*
this
aContentToInsert
aPointToInsert
)
;
nsresult
rv
=
DoTransactionInternal
(
transaction
)
;
RangeUpdaterRef
(
)
.
SelAdjInsertNode
(
aPointToInsert
)
;
if
(
AsHTMLEditor
(
)
)
{
TopLevelEditSubActionDataRef
(
)
.
DidInsertContent
(
*
this
aContentToInsert
)
;
}
if
(
!
mActionListeners
.
IsEmpty
(
)
)
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
DidInsertNode
(
&
aContentToInsert
rv
)
;
}
}
return
rv
;
}
EditorDOMPoint
EditorBase
:
:
PrepareToInsertBRElement
(
const
EditorDOMPoint
&
aPointToInsert
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
if
(
NS_WARN_IF
(
!
aPointToInsert
.
IsSet
(
)
)
)
{
return
EditorDOMPoint
(
)
;
}
if
(
!
aPointToInsert
.
IsInTextNode
(
)
)
{
return
aPointToInsert
;
}
if
(
aPointToInsert
.
IsStartOfContainer
(
)
)
{
EditorDOMPoint
pointInContainer
(
aPointToInsert
.
GetContainer
(
)
)
;
NS_WARNING_ASSERTION
(
pointInContainer
.
IsSet
(
)
"
Failed
to
climb
up
the
DOM
tree
from
text
node
"
)
;
return
pointInContainer
;
}
if
(
aPointToInsert
.
IsEndOfContainer
(
)
)
{
EditorDOMPoint
pointInContainer
(
aPointToInsert
.
GetContainer
(
)
)
;
if
(
NS_WARN_IF
(
!
pointInContainer
.
IsSet
(
)
)
)
{
return
pointInContainer
;
}
DebugOnly
<
bool
>
advanced
=
pointInContainer
.
AdvanceOffset
(
)
;
NS_WARNING_ASSERTION
(
advanced
"
Failed
to
advance
offset
to
after
the
text
node
"
)
;
return
pointInContainer
;
}
MOZ_DIAGNOSTIC_ASSERT
(
aPointToInsert
.
IsSetAndValid
(
)
)
;
ErrorResult
error
;
nsCOMPtr
<
nsIContent
>
newLeftNode
=
SplitNodeWithTransaction
(
aPointToInsert
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
error
.
SuppressException
(
)
;
return
EditorDOMPoint
(
)
;
}
Unused
<
<
newLeftNode
;
EditorDOMPoint
pointInContainer
(
aPointToInsert
.
GetContainer
(
)
)
;
NS_WARNING_ASSERTION
(
pointInContainer
.
IsSet
(
)
"
Failed
to
split
the
text
node
"
)
;
return
pointInContainer
;
}
CreateElementResult
EditorBase
:
:
InsertPaddingBRElementForEmptyLastLineWithTransaction
(
const
EditorDOMPoint
&
aPointToInsert
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
EditorDOMPoint
pointToInsert
=
PrepareToInsertBRElement
(
aPointToInsert
)
;
if
(
NS_WARN_IF
(
!
pointToInsert
.
IsSet
(
)
)
)
{
return
CreateElementResult
(
NS_ERROR_FAILURE
)
;
}
RefPtr
<
Element
>
newBRElement
=
CreateHTMLContent
(
nsGkAtoms
:
:
br
)
;
if
(
NS_WARN_IF
(
!
newBRElement
)
)
{
return
CreateElementResult
(
NS_ERROR_FAILURE
)
;
}
newBRElement
-
>
SetFlags
(
NS_PADDING_FOR_EMPTY_LAST_LINE
)
;
nsresult
rv
=
InsertNodeWithTransaction
(
*
newBRElement
pointToInsert
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
CreateElementResult
(
NS_ERROR_EDITOR_DESTROYED
)
;
}
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
CreateElementResult
(
rv
)
;
}
return
CreateElementResult
(
std
:
:
move
(
newBRElement
)
)
;
}
already_AddRefed
<
nsIContent
>
EditorBase
:
:
SplitNodeWithTransaction
(
const
EditorDOMPoint
&
aStartOfRightNode
ErrorResult
&
aError
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
if
(
NS_WARN_IF
(
!
aStartOfRightNode
.
IsSet
(
)
)
|
|
NS_WARN_IF
(
!
aStartOfRightNode
.
GetContainerAsContent
(
)
)
)
{
aError
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
nullptr
;
}
MOZ_ASSERT
(
aStartOfRightNode
.
IsSetAndValid
(
)
)
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eSplitNode
nsIEditor
:
:
eNext
aError
)
;
if
(
NS_WARN_IF
(
aError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
nullptr
;
}
NS_WARNING_ASSERTION
(
!
aError
.
Failed
(
)
"
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
aError
.
SuppressException
(
)
;
Unused
<
<
aStartOfRightNode
.
Offset
(
)
;
RefPtr
<
SplitNodeTransaction
>
transaction
=
SplitNodeTransaction
:
:
Create
(
*
this
aStartOfRightNode
)
;
aError
=
DoTransactionInternal
(
transaction
)
;
nsCOMPtr
<
nsIContent
>
newContent
=
transaction
-
>
GetNewNode
(
)
;
NS_WARNING_ASSERTION
(
newContent
"
Failed
to
create
a
new
left
node
"
)
;
RangeUpdaterRef
(
)
.
SelAdjSplitNode
(
*
aStartOfRightNode
.
GetContainerAsContent
(
)
newContent
)
;
if
(
AsHTMLEditor
(
)
&
&
newContent
)
{
TopLevelEditSubActionDataRef
(
)
.
DidSplitContent
(
*
this
*
aStartOfRightNode
.
GetContainerAsContent
(
)
*
newContent
)
;
}
if
(
mInlineSpellChecker
)
{
RefPtr
<
mozInlineSpellChecker
>
spellChecker
=
mInlineSpellChecker
;
spellChecker
-
>
DidSplitNode
(
aStartOfRightNode
.
GetContainer
(
)
newContent
)
;
}
if
(
!
mActionListeners
.
IsEmpty
(
)
)
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
DidSplitNode
(
aStartOfRightNode
.
GetContainer
(
)
newContent
)
;
}
}
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
nullptr
;
}
return
newContent
.
forget
(
)
;
}
nsresult
EditorBase
:
:
JoinNodesWithTransaction
(
nsINode
&
aLeftNode
nsINode
&
aRightNode
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
aLeftNode
.
IsContent
(
)
)
;
MOZ_ASSERT
(
aRightNode
.
IsContent
(
)
)
;
nsCOMPtr
<
nsINode
>
parent
=
aLeftNode
.
GetParentNode
(
)
;
MOZ_ASSERT
(
parent
)
;
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eJoinNodes
nsIEditor
:
:
ePrevious
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
int32_t
offset
=
parent
-
>
ComputeIndexOf
(
&
aRightNode
)
;
uint32_t
oldLeftNodeLen
=
aLeftNode
.
Length
(
)
;
if
(
AsHTMLEditor
(
)
)
{
TopLevelEditSubActionDataRef
(
)
.
WillJoinContents
(
*
this
*
aLeftNode
.
AsContent
(
)
*
aRightNode
.
AsContent
(
)
)
;
}
nsresult
rv
=
NS_OK
;
RefPtr
<
JoinNodeTransaction
>
transaction
=
JoinNodeTransaction
:
:
MaybeCreate
(
*
this
aLeftNode
aRightNode
)
;
if
(
transaction
)
{
rv
=
DoTransactionInternal
(
transaction
)
;
}
RangeUpdaterRef
(
)
.
SelAdjJoinNodes
(
aLeftNode
aRightNode
*
parent
offset
static_cast
<
int32_t
>
(
oldLeftNodeLen
)
)
;
if
(
AsHTMLEditor
(
)
)
{
TopLevelEditSubActionDataRef
(
)
.
DidJoinContents
(
*
this
*
aLeftNode
.
AsContent
(
)
*
aRightNode
.
AsContent
(
)
)
;
}
if
(
mInlineSpellChecker
)
{
RefPtr
<
mozInlineSpellChecker
>
spellChecker
=
mInlineSpellChecker
;
spellChecker
-
>
DidJoinNodes
(
aLeftNode
aRightNode
)
;
}
if
(
mTextServicesDocument
&
&
NS_SUCCEEDED
(
rv
)
)
{
RefPtr
<
TextServicesDocument
>
textServicesDocument
=
mTextServicesDocument
;
textServicesDocument
-
>
DidJoinNodes
(
aLeftNode
aRightNode
)
;
}
if
(
!
mActionListeners
.
IsEmpty
(
)
)
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
DidJoinNodes
(
&
aLeftNode
&
aRightNode
parent
rv
)
;
}
}
return
rv
;
}
NS_IMETHODIMP
EditorBase
:
:
DeleteNode
(
nsINode
*
aNode
)
{
if
(
NS_WARN_IF
(
!
aNode
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eRemoveNode
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
|
|
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
rv
=
DeleteNodeWithTransaction
(
*
aNode
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
DeleteNodeWithTransaction
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
nsresult
EditorBase
:
:
DeleteNodeWithTransaction
(
nsINode
&
aNode
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
aNode
.
IsContent
(
)
)
;
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eDeleteNode
nsIEditor
:
:
ePrevious
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
if
(
AsHTMLEditor
(
)
)
{
TopLevelEditSubActionDataRef
(
)
.
WillDeleteContent
(
*
this
*
aNode
.
AsContent
(
)
)
;
}
RefPtr
<
DeleteNodeTransaction
>
deleteNodeTransaction
=
DeleteNodeTransaction
:
:
MaybeCreate
(
*
this
aNode
)
;
nsresult
rv
=
deleteNodeTransaction
?
DoTransactionInternal
(
deleteNodeTransaction
)
:
NS_ERROR_FAILURE
;
if
(
mTextServicesDocument
&
&
NS_SUCCEEDED
(
rv
)
)
{
RefPtr
<
TextServicesDocument
>
textServicesDocument
=
mTextServicesDocument
;
textServicesDocument
-
>
DidDeleteNode
(
&
aNode
)
;
}
if
(
!
mActionListeners
.
IsEmpty
(
)
)
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
DidDeleteNode
(
&
aNode
rv
)
;
}
}
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
already_AddRefed
<
Element
>
EditorBase
:
:
ReplaceContainerWithTransactionInternal
(
Element
&
aOldContainer
nsAtom
&
aTagName
nsAtom
&
aAttribute
const
nsAString
&
aAttributeValue
bool
aCloneAllAttributes
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
EditorDOMPoint
atOldContainer
(
&
aOldContainer
)
;
if
(
NS_WARN_IF
(
!
atOldContainer
.
IsSet
(
)
)
)
{
return
nullptr
;
}
RefPtr
<
Element
>
newContainer
=
CreateHTMLContent
(
&
aTagName
)
;
if
(
NS_WARN_IF
(
!
newContainer
)
)
{
return
nullptr
;
}
if
(
aCloneAllAttributes
)
{
MOZ_ASSERT
(
&
aAttribute
=
=
nsGkAtoms
:
:
_empty
)
;
CloneAttributesWithTransaction
(
*
newContainer
aOldContainer
)
;
}
else
if
(
&
aAttribute
!
=
nsGkAtoms
:
:
_empty
)
{
nsresult
rv
=
newContainer
-
>
SetAttr
(
kNameSpaceID_None
&
aAttribute
aAttributeValue
true
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
}
AutoReplaceContainerSelNotify
selStateNotify
(
RangeUpdaterRef
(
)
&
aOldContainer
newContainer
)
;
{
AutoTransactionsConserveSelection
conserveSelection
(
*
this
)
;
while
(
aOldContainer
.
HasChildren
(
)
)
{
nsCOMPtr
<
nsIContent
>
child
=
aOldContainer
.
GetFirstChild
(
)
;
if
(
NS_WARN_IF
(
!
child
)
)
{
return
nullptr
;
}
nsresult
rv
=
DeleteNodeWithTransaction
(
*
child
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
rv
=
InsertNodeWithTransaction
(
*
child
EditorDOMPoint
(
newContainer
newContainer
-
>
Length
(
)
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
}
}
NS_WARNING_ASSERTION
(
atOldContainer
.
IsSetAndValid
(
)
"
The
old
container
might
be
moved
by
mutation
observer
"
)
;
nsresult
rv
=
InsertNodeWithTransaction
(
*
newContainer
atOldContainer
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
rv
=
DeleteNodeWithTransaction
(
aOldContainer
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
return
newContainer
.
forget
(
)
;
}
nsresult
EditorBase
:
:
RemoveContainerWithTransaction
(
Element
&
aElement
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
EditorDOMPoint
pointToInsertChildren
(
&
aElement
)
;
if
(
NS_WARN_IF
(
!
pointToInsertChildren
.
IsSet
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
AutoRemoveContainerSelNotify
selNotify
(
RangeUpdaterRef
(
)
&
aElement
pointToInsertChildren
.
GetContainer
(
)
pointToInsertChildren
.
Offset
(
)
aElement
.
GetChildCount
(
)
)
;
while
(
aElement
.
HasChildren
(
)
)
{
nsCOMPtr
<
nsIContent
>
child
=
aElement
.
GetLastChild
(
)
;
if
(
NS_WARN_IF
(
!
child
)
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
=
DeleteNodeWithTransaction
(
*
child
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
InsertNodeWithTransaction
(
*
child
EditorDOMPoint
(
pointToInsertChildren
.
GetContainer
(
)
pointToInsertChildren
.
Offset
(
)
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
nsresult
rv
=
DeleteNodeWithTransaction
(
aElement
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
already_AddRefed
<
Element
>
EditorBase
:
:
InsertContainerWithTransactionInternal
(
nsIContent
&
aContent
nsAtom
&
aTagName
nsAtom
&
aAttribute
const
nsAString
&
aAttributeValue
)
{
EditorDOMPoint
pointToInsertNewContainer
(
&
aContent
)
;
if
(
NS_WARN_IF
(
!
pointToInsertNewContainer
.
IsSet
(
)
)
)
{
return
nullptr
;
}
DebugOnly
<
bool
>
advanced
=
pointToInsertNewContainer
.
AdvanceOffset
(
)
;
NS_WARNING_ASSERTION
(
advanced
"
Failed
to
advance
offset
to
after
aContent
"
)
;
RefPtr
<
Element
>
newContainer
=
CreateHTMLContent
(
&
aTagName
)
;
if
(
NS_WARN_IF
(
!
newContainer
)
)
{
return
nullptr
;
}
if
(
&
aAttribute
!
=
nsGkAtoms
:
:
_empty
)
{
nsresult
rv
=
newContainer
-
>
SetAttr
(
kNameSpaceID_None
&
aAttribute
aAttributeValue
true
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
}
AutoInsertContainerSelNotify
selNotify
(
RangeUpdaterRef
(
)
)
;
nsresult
rv
=
DeleteNodeWithTransaction
(
aContent
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
{
AutoTransactionsConserveSelection
conserveSelection
(
*
this
)
;
rv
=
InsertNodeWithTransaction
(
aContent
EditorDOMPoint
(
newContainer
0
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
}
rv
=
InsertNodeWithTransaction
(
*
newContainer
pointToInsertNewContainer
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
return
newContainer
.
forget
(
)
;
}
nsresult
EditorBase
:
:
MoveNodeWithTransaction
(
nsIContent
&
aContent
const
EditorDOMPoint
&
aPointToInsert
)
{
MOZ_ASSERT
(
aPointToInsert
.
IsSetAndValid
(
)
)
;
EditorDOMPoint
oldPoint
(
&
aContent
)
;
if
(
NS_WARN_IF
(
!
oldPoint
.
IsSet
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
aPointToInsert
=
=
oldPoint
)
{
return
NS_OK
;
}
AutoMoveNodeSelNotify
selNotify
(
RangeUpdaterRef
(
)
oldPoint
aPointToInsert
)
;
nsresult
rv
=
DeleteNodeWithTransaction
(
aContent
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
EditorDOMPoint
pointToInsert
(
selNotify
.
ComputeInsertionPoint
(
)
)
;
if
(
NS_WARN_IF
(
!
pointToInsert
.
IsSet
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
NS_WARN_IF
(
!
pointToInsert
.
IsSetAndValid
(
)
)
)
{
pointToInsert
.
SetToEndOf
(
pointToInsert
.
GetContainer
(
)
)
;
}
rv
=
InsertNodeWithTransaction
(
aContent
pointToInsert
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
void
EditorBase
:
:
MoveAllChildren
(
nsINode
&
aContainer
const
EditorRawDOMPoint
&
aPointToInsert
ErrorResult
&
aError
)
{
if
(
!
aContainer
.
HasChildren
(
)
)
{
return
;
}
nsIContent
*
firstChild
=
aContainer
.
GetFirstChild
(
)
;
if
(
NS_WARN_IF
(
!
firstChild
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsIContent
*
lastChild
=
aContainer
.
GetLastChild
(
)
;
if
(
NS_WARN_IF
(
!
lastChild
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
return
MoveChildren
(
*
firstChild
*
lastChild
aPointToInsert
aError
)
;
}
void
EditorBase
:
:
MovePreviousSiblings
(
nsIContent
&
aChild
const
EditorRawDOMPoint
&
aPointToInsert
ErrorResult
&
aError
)
{
if
(
NS_WARN_IF
(
!
aChild
.
GetParentNode
(
)
)
)
{
aError
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
;
}
nsIContent
*
firstChild
=
aChild
.
GetParentNode
(
)
-
>
GetFirstChild
(
)
;
if
(
NS_WARN_IF
(
!
firstChild
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsIContent
*
lastChild
=
&
aChild
=
=
firstChild
?
firstChild
:
aChild
.
GetPreviousSibling
(
)
;
if
(
NS_WARN_IF
(
!
lastChild
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
return
MoveChildren
(
*
firstChild
*
lastChild
aPointToInsert
aError
)
;
}
void
EditorBase
:
:
MoveChildren
(
nsIContent
&
aFirstChild
nsIContent
&
aLastChild
const
EditorRawDOMPoint
&
aPointToInsert
ErrorResult
&
aError
)
{
nsCOMPtr
<
nsINode
>
oldContainer
=
aFirstChild
.
GetParentNode
(
)
;
if
(
NS_WARN_IF
(
oldContainer
!
=
aLastChild
.
GetParentNode
(
)
)
|
|
NS_WARN_IF
(
!
aPointToInsert
.
IsSet
(
)
)
|
|
NS_WARN_IF
(
!
aPointToInsert
.
CanContainerHaveChildren
(
)
)
)
{
aError
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
;
}
AutoTArray
<
nsCOMPtr
<
nsIContent
>
10
>
children
;
for
(
nsIContent
*
child
=
&
aFirstChild
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
children
.
AppendElement
(
child
)
;
if
(
child
=
=
&
aLastChild
)
{
break
;
}
}
if
(
NS_WARN_IF
(
children
.
LastElement
(
)
!
=
&
aLastChild
)
)
{
aError
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
;
}
nsCOMPtr
<
nsINode
>
newContainer
=
aPointToInsert
.
GetContainer
(
)
;
nsCOMPtr
<
nsIContent
>
nextNode
=
aPointToInsert
.
GetChild
(
)
;
for
(
size_t
i
=
children
.
Length
(
)
;
i
>
0
;
-
-
i
)
{
nsCOMPtr
<
nsIContent
>
&
child
=
children
[
i
-
1
]
;
if
(
child
-
>
GetParentNode
(
)
!
=
oldContainer
)
{
continue
;
}
oldContainer
-
>
RemoveChild
(
*
child
aError
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
;
}
if
(
nextNode
)
{
EditorRawDOMPoint
pointToInsert
(
nextNode
)
;
if
(
NS_WARN_IF
(
!
pointToInsert
.
IsSet
(
)
)
|
|
NS_WARN_IF
(
pointToInsert
.
GetContainer
(
)
!
=
newContainer
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
}
newContainer
-
>
InsertBefore
(
*
child
nextNode
aError
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
;
}
if
(
child
-
>
GetParentNode
(
)
=
=
newContainer
)
{
nextNode
=
child
;
}
}
}
NS_IMETHODIMP
EditorBase
:
:
AddEditorObserver
(
nsIEditorObserver
*
aObserver
)
{
NS_ENSURE_TRUE
(
aObserver
NS_ERROR_NULL_POINTER
)
;
if
(
!
mEditorObservers
.
Contains
(
aObserver
)
)
{
mEditorObservers
.
AppendElement
(
*
aObserver
)
;
NS_WARNING_ASSERTION
(
mEditorObservers
.
Length
(
)
!
=
1
"
nsIEditorObserver
installed
this
editor
becomes
slower
"
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
NotifySelectionChanged
(
Document
*
aDocument
Selection
*
aSelection
int16_t
aReason
)
{
if
(
NS_WARN_IF
(
!
aDocument
)
|
|
NS_WARN_IF
(
!
aSelection
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
mTextInputListener
)
{
RefPtr
<
TextInputListener
>
textInputListener
=
mTextInputListener
;
textInputListener
-
>
OnSelectionChange
(
*
aSelection
aReason
)
;
}
if
(
mIMEContentObserver
)
{
RefPtr
<
IMEContentObserver
>
observer
=
mIMEContentObserver
;
observer
-
>
OnSelectionChange
(
*
aSelection
)
;
}
return
NS_OK
;
}
void
EditorBase
:
:
NotifyEditorObservers
(
NotificationForEditorObservers
aNotification
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
switch
(
aNotification
)
{
case
eNotifyEditorObserversOfEnd
:
mIsInEditSubAction
=
false
;
if
(
mTextInputListener
)
{
RefPtr
<
TextInputListener
>
listener
=
mTextInputListener
;
nsresult
rv
=
listener
-
>
OnEditActionHandled
(
MOZ_KnownLive
(
*
AsTextEditor
(
)
)
)
;
MOZ_RELEASE_ASSERT
(
rv
!
=
NS_ERROR_OUT_OF_MEMORY
"
Setting
value
failed
due
to
out
of
memory
"
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
TextInputListener
:
:
OnEditActionHandled
(
)
failed
but
ignored
"
)
;
}
if
(
mIMEContentObserver
)
{
RefPtr
<
IMEContentObserver
>
observer
=
mIMEContentObserver
;
observer
-
>
OnEditActionHandled
(
)
;
}
if
(
!
mEditorObservers
.
IsEmpty
(
)
)
{
AutoEditorObserverArray
observers
(
mEditorObservers
)
;
for
(
auto
&
observer
:
observers
)
{
observer
-
>
EditAction
(
)
;
}
}
if
(
!
mDispatchInputEvent
|
|
IsEditActionAborted
(
)
|
|
IsEditActionCanceled
(
)
)
{
return
;
}
DispatchInputEvent
(
)
;
break
;
case
eNotifyEditorObserversOfBefore
:
if
(
NS_WARN_IF
(
mIsInEditSubAction
)
)
{
break
;
}
mIsInEditSubAction
=
true
;
if
(
mIMEContentObserver
)
{
RefPtr
<
IMEContentObserver
>
observer
=
mIMEContentObserver
;
observer
-
>
BeforeEditAction
(
)
;
}
break
;
case
eNotifyEditorObserversOfCancel
:
mIsInEditSubAction
=
false
;
if
(
mIMEContentObserver
)
{
RefPtr
<
IMEContentObserver
>
observer
=
mIMEContentObserver
;
observer
-
>
CancelEditAction
(
)
;
}
break
;
default
:
MOZ_CRASH
(
"
Handle
all
notifications
here
"
)
;
break
;
}
}
void
EditorBase
:
:
DispatchInputEvent
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
!
IsEditActionCanceled
(
)
"
If
preceding
beforeinput
event
is
canceled
we
shouldn
'
t
"
"
dispatch
input
event
"
)
;
MOZ_ASSERT
(
!
NeedsToDispatchBeforeInputEvent
(
)
"
We
'
ve
not
handled
beforeinput
event
but
trying
to
dispatch
input
event
"
)
;
RefPtr
<
Element
>
targetElement
=
GetInputEventTargetElement
(
)
;
if
(
NS_WARN_IF
(
!
targetElement
)
)
{
return
;
}
RefPtr
<
TextEditor
>
textEditor
=
AsTextEditor
(
)
;
RefPtr
<
DataTransfer
>
dataTransfer
=
GetInputEventDataTransfer
(
)
;
DebugOnly
<
nsresult
>
rvIgnored
=
nsContentUtils
:
:
DispatchInputEvent
(
targetElement
eEditorInput
ToInputType
(
GetEditAction
(
)
)
textEditor
dataTransfer
?
nsContentUtils
:
:
InputEventOptions
(
dataTransfer
)
:
nsContentUtils
:
:
InputEventOptions
(
GetInputEventData
(
)
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
Failed
to
dispatch
input
event
"
)
;
}
NS_IMETHODIMP
EditorBase
:
:
AddEditActionListener
(
nsIEditActionListener
*
aListener
)
{
NS_ENSURE_TRUE
(
aListener
NS_ERROR_NULL_POINTER
)
;
if
(
mInlineSpellChecker
)
{
EditorSpellCheck
*
editorSpellCheck
=
mInlineSpellChecker
-
>
GetEditorSpellCheck
(
)
;
if
(
editorSpellCheck
)
{
mozSpellChecker
*
spellChecker
=
editorSpellCheck
-
>
GetSpellChecker
(
)
;
if
(
spellChecker
)
{
TextServicesDocument
*
textServicesDocument
=
spellChecker
-
>
GetTextServicesDocument
(
)
;
if
(
static_cast
<
nsIEditActionListener
*
>
(
textServicesDocument
)
=
=
aListener
)
{
mTextServicesDocument
=
textServicesDocument
;
return
NS_OK
;
}
}
}
}
if
(
!
mActionListeners
.
Contains
(
aListener
)
)
{
mActionListeners
.
AppendElement
(
*
aListener
)
;
NS_WARNING_ASSERTION
(
mActionListeners
.
Length
(
)
!
=
1
"
nsIEditActionListener
installed
this
editor
becomes
slower
"
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
RemoveEditActionListener
(
nsIEditActionListener
*
aListener
)
{
NS_ENSURE_TRUE
(
aListener
NS_ERROR_FAILURE
)
;
if
(
static_cast
<
nsIEditActionListener
*
>
(
mTextServicesDocument
)
=
=
aListener
)
{
mTextServicesDocument
=
nullptr
;
return
NS_OK
;
}
NS_WARNING_ASSERTION
(
mActionListeners
.
Length
(
)
!
=
1
"
All
nsIEditActionListeners
have
been
removed
this
"
"
editor
becomes
faster
"
)
;
mActionListeners
.
RemoveElement
(
aListener
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
AddDocumentStateListener
(
nsIDocumentStateListener
*
aListener
)
{
NS_ENSURE_TRUE
(
aListener
NS_ERROR_NULL_POINTER
)
;
if
(
!
mDocStateListeners
.
Contains
(
aListener
)
)
{
mDocStateListeners
.
AppendElement
(
*
aListener
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
RemoveDocumentStateListener
(
nsIDocumentStateListener
*
aListener
)
{
NS_ENSURE_TRUE
(
aListener
NS_ERROR_NULL_POINTER
)
;
mDocStateListeners
.
RemoveElement
(
aListener
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
OutputToString
(
const
nsAString
&
aFormatType
uint32_t
aFlags
nsAString
&
aOutputString
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
bool
EditorBase
:
:
ArePreservingSelection
(
)
{
return
IsEditActionDataAvailable
(
)
&
&
!
SavedSelectionRef
(
)
.
IsEmpty
(
)
;
}
void
EditorBase
:
:
PreserveSelectionAcrossActions
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
SavedSelectionRef
(
)
.
SaveSelection
(
SelectionRefPtr
(
)
)
;
RangeUpdaterRef
(
)
.
RegisterSelectionState
(
SavedSelectionRef
(
)
)
;
}
nsresult
EditorBase
:
:
RestorePreservedSelection
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
if
(
SavedSelectionRef
(
)
.
IsEmpty
(
)
)
{
return
NS_ERROR_FAILURE
;
}
SavedSelectionRef
(
)
.
RestoreSelection
(
SelectionRefPtr
(
)
)
;
StopPreservingSelection
(
)
;
return
NS_OK
;
}
void
EditorBase
:
:
StopPreservingSelection
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
RangeUpdaterRef
(
)
.
DropSelectionState
(
SavedSelectionRef
(
)
)
;
SavedSelectionRef
(
)
.
MakeEmpty
(
)
;
}
NS_IMETHODIMP
EditorBase
:
:
ForceCompositionEnd
(
)
{
return
CommitComposition
(
)
;
}
nsresult
EditorBase
:
:
CommitComposition
(
)
{
nsPresContext
*
pc
=
GetPresContext
(
)
;
if
(
!
pc
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
mComposition
?
IMEStateManager
:
:
NotifyIME
(
REQUEST_TO_COMMIT_COMPOSITION
pc
)
:
NS_OK
;
}
nsresult
EditorBase
:
:
GetPreferredIMEState
(
IMEState
*
aState
)
{
NS_ENSURE_ARG_POINTER
(
aState
)
;
aState
-
>
mEnabled
=
IMEState
:
:
ENABLED
;
aState
-
>
mOpen
=
IMEState
:
:
DONT_CHANGE_OPEN_STATE
;
if
(
IsReadonly
(
)
|
|
IsDisabled
(
)
)
{
aState
-
>
mEnabled
=
IMEState
:
:
DISABLED
;
return
NS_OK
;
}
nsCOMPtr
<
nsIContent
>
content
=
GetRoot
(
)
;
NS_ENSURE_TRUE
(
content
NS_ERROR_FAILURE
)
;
nsIFrame
*
frame
=
content
-
>
GetPrimaryFrame
(
)
;
NS_ENSURE_TRUE
(
frame
NS_ERROR_FAILURE
)
;
switch
(
frame
-
>
StyleUIReset
(
)
-
>
mIMEMode
)
{
case
StyleImeMode
:
:
Auto
:
if
(
IsPasswordEditor
(
)
)
aState
-
>
mEnabled
=
IMEState
:
:
PASSWORD
;
break
;
case
StyleImeMode
:
:
Disabled
:
aState
-
>
mEnabled
=
IMEState
:
:
PASSWORD
;
break
;
case
StyleImeMode
:
:
Active
:
aState
-
>
mOpen
=
IMEState
:
:
OPEN
;
break
;
case
StyleImeMode
:
:
Inactive
:
aState
-
>
mOpen
=
IMEState
:
:
CLOSED
;
break
;
case
StyleImeMode
:
:
Normal
:
break
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetComposing
(
bool
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aResult
)
;
*
aResult
=
IsIMEComposing
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetRootElement
(
Element
*
*
aRootElement
)
{
NS_ENSURE_ARG_POINTER
(
aRootElement
)
;
NS_ENSURE_TRUE
(
mRootElement
NS_ERROR_NOT_AVAILABLE
)
;
RefPtr
<
Element
>
rootElement
=
mRootElement
;
rootElement
.
forget
(
aRootElement
)
;
return
NS_OK
;
}
void
EditorBase
:
:
OnStartToHandleTopLevelEditSubAction
(
EditSubAction
aTopLevelEditSubAction
nsIEditor
:
:
EDirection
aDirectionOfTopLevelEditSubAction
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
mEditActionData
-
>
SetTopLevelEditSubAction
(
aTopLevelEditSubAction
aDirectionOfTopLevelEditSubAction
)
;
}
nsresult
EditorBase
:
:
OnEndHandlingTopLevelEditSubAction
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
mEditActionData
-
>
SetTopLevelEditSubAction
(
EditSubAction
:
:
eNone
eNone
)
;
return
NS_OK
;
}
void
EditorBase
:
:
DoInsertText
(
Text
&
aText
uint32_t
aOffset
const
nsAString
&
aStringToInsert
ErrorResult
&
aRv
)
{
aText
.
InsertData
(
aOffset
aStringToInsert
aRv
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
aRv
=
NS_ERROR_EDITOR_DESTROYED
;
return
;
}
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
if
(
!
AsHTMLEditor
(
)
&
&
!
aStringToInsert
.
IsEmpty
(
)
)
{
aRv
=
MOZ_KnownLive
(
AsTextEditor
(
)
)
-
>
DidInsertText
(
aText
.
TextLength
(
)
aOffset
aStringToInsert
.
Length
(
)
)
;
NS_WARNING_ASSERTION
(
!
aRv
.
Failed
(
)
"
TextEditor
:
:
DidInsertText
(
)
failed
"
)
;
}
}
void
EditorBase
:
:
DoDeleteText
(
Text
&
aText
uint32_t
aOffset
uint32_t
aCount
ErrorResult
&
aRv
)
{
if
(
!
AsHTMLEditor
(
)
&
&
aCount
>
0
)
{
AsTextEditor
(
)
-
>
WillDeleteText
(
aText
.
TextLength
(
)
aOffset
aCount
)
;
}
aText
.
DeleteData
(
aOffset
aCount
aRv
)
;
NS_WARNING_ASSERTION
(
!
aRv
.
Failed
(
)
"
Text
:
:
DeleteData
(
)
failed
"
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
aRv
=
NS_ERROR_EDITOR_DESTROYED
;
}
}
void
EditorBase
:
:
DoReplaceText
(
Text
&
aText
uint32_t
aOffset
uint32_t
aCount
const
nsAString
&
aStringToInsert
ErrorResult
&
aRv
)
{
if
(
!
AsHTMLEditor
(
)
&
&
aCount
>
0
)
{
AsTextEditor
(
)
-
>
WillDeleteText
(
aText
.
TextLength
(
)
aOffset
aCount
)
;
}
aText
.
ReplaceData
(
aOffset
aCount
aStringToInsert
aRv
)
;
NS_WARNING_ASSERTION
(
!
aRv
.
Failed
(
)
"
Text
:
:
ReplaceData
(
)
failed
"
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
aRv
=
NS_ERROR_EDITOR_DESTROYED
;
}
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
if
(
!
AsHTMLEditor
(
)
&
&
!
aStringToInsert
.
IsEmpty
(
)
)
{
aRv
=
MOZ_KnownLive
(
AsTextEditor
(
)
)
-
>
DidInsertText
(
aText
.
TextLength
(
)
aOffset
aStringToInsert
.
Length
(
)
)
;
NS_WARNING_ASSERTION
(
!
aRv
.
Failed
(
)
"
TextEditor
:
:
DidInsertText
(
)
failed
"
)
;
}
}
void
EditorBase
:
:
DoSetText
(
Text
&
aText
const
nsAString
&
aStringToSet
ErrorResult
&
aRv
)
{
if
(
!
AsHTMLEditor
(
)
)
{
uint32_t
length
=
aText
.
TextLength
(
)
;
if
(
length
>
0
)
{
AsTextEditor
(
)
-
>
WillDeleteText
(
length
0
length
)
;
}
}
aText
.
SetData
(
aStringToSet
aRv
)
;
NS_WARNING_ASSERTION
(
!
aRv
.
Failed
(
)
"
Text
:
:
SetData
(
)
failed
"
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
aRv
=
NS_ERROR_EDITOR_DESTROYED
;
return
;
}
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
if
(
!
AsHTMLEditor
(
)
&
&
!
aStringToSet
.
IsEmpty
(
)
)
{
aRv
=
MOZ_KnownLive
(
AsTextEditor
(
)
)
-
>
DidInsertText
(
aText
.
Length
(
)
0
aStringToSet
.
Length
(
)
)
;
NS_WARNING_ASSERTION
(
!
aRv
.
Failed
(
)
"
TextEditor
:
:
DidInsertText
(
)
failed
"
)
;
}
}
nsresult
EditorBase
:
:
CloneAttributeWithTransaction
(
nsAtom
&
aAttribute
Element
&
aDestElement
Element
&
aSourceElement
)
{
nsAutoString
attrValue
;
if
(
aSourceElement
.
GetAttr
(
kNameSpaceID_None
&
aAttribute
attrValue
)
)
{
return
SetAttributeWithTransaction
(
aDestElement
aAttribute
attrValue
)
;
}
return
RemoveAttributeWithTransaction
(
aDestElement
aAttribute
)
;
}
NS_IMETHODIMP
EditorBase
:
:
CloneAttributes
(
Element
*
aDestElement
Element
*
aSourceElement
)
{
if
(
NS_WARN_IF
(
!
aDestElement
)
|
|
NS_WARN_IF
(
!
aSourceElement
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eSetAttribute
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
|
|
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
CloneAttributesWithTransaction
(
*
aDestElement
*
aSourceElement
)
;
return
NS_OK
;
}
void
EditorBase
:
:
CloneAttributesWithTransaction
(
Element
&
aDestElement
Element
&
aSourceElement
)
{
AutoPlaceholderBatch
treatAsOneTransaction
(
*
this
)
;
Element
*
rootElement
=
GetRoot
(
)
;
if
(
NS_WARN_IF
(
!
rootElement
)
)
{
return
;
}
OwningNonNull
<
Element
>
destElement
(
aDestElement
)
;
OwningNonNull
<
Element
>
sourceElement
(
aSourceElement
)
;
bool
isDestElementInBody
=
rootElement
-
>
Contains
(
destElement
)
;
RefPtr
<
nsDOMAttributeMap
>
destAttributes
=
destElement
-
>
Attributes
(
)
;
while
(
RefPtr
<
Attr
>
attr
=
destAttributes
-
>
Item
(
0
)
)
{
if
(
isDestElementInBody
)
{
RemoveAttributeWithTransaction
(
destElement
MOZ_KnownLive
(
*
attr
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
)
)
;
}
else
{
destElement
-
>
UnsetAttr
(
kNameSpaceID_None
attr
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
true
)
;
}
}
RefPtr
<
nsDOMAttributeMap
>
sourceAttributes
=
sourceElement
-
>
Attributes
(
)
;
uint32_t
sourceCount
=
sourceAttributes
-
>
Length
(
)
;
for
(
uint32_t
i
=
0
;
i
<
sourceCount
;
i
+
+
)
{
RefPtr
<
Attr
>
attr
=
sourceAttributes
-
>
Item
(
i
)
;
nsAutoString
value
;
attr
-
>
GetValue
(
value
)
;
if
(
isDestElementInBody
)
{
SetAttributeOrEquivalent
(
destElement
MOZ_KnownLive
(
attr
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
)
value
false
)
;
}
else
{
SetAttributeOrEquivalent
(
destElement
MOZ_KnownLive
(
attr
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
)
value
true
)
;
}
}
}
nsresult
EditorBase
:
:
ScrollSelectionFocusIntoView
(
)
{
nsISelectionController
*
selectionController
=
GetSelectionController
(
)
;
if
(
!
selectionController
)
{
return
NS_OK
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
selectionController
-
>
ScrollSelectionIntoView
(
nsISelectionController
:
:
SELECTION_NORMAL
nsISelectionController
:
:
SELECTION_FOCUS_REGION
nsISelectionController
:
:
SCROLL_OVERFLOW_HIDDEN
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
nsISelectionController
:
:
ScrollSelectionIntoView
(
)
failed
but
ignored
"
)
;
return
NS_WARN_IF
(
Destroyed
(
)
)
?
NS_ERROR_EDITOR_DESTROYED
:
NS_OK
;
}
EditorRawDOMPoint
EditorBase
:
:
FindBetterInsertionPoint
(
const
EditorRawDOMPoint
&
aPoint
)
{
if
(
NS_WARN_IF
(
!
aPoint
.
IsSet
(
)
)
)
{
return
aPoint
;
}
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
if
(
aPoint
.
IsInTextNode
(
)
)
{
return
aPoint
;
}
if
(
!
IsPlaintextEditor
(
)
)
{
return
aPoint
;
}
nsCOMPtr
<
nsINode
>
root
=
GetRoot
(
)
;
if
(
aPoint
.
GetContainer
(
)
=
=
root
)
{
if
(
aPoint
.
IsStartOfContainer
(
)
&
&
aPoint
.
GetContainer
(
)
-
>
HasChildren
(
)
&
&
aPoint
.
GetContainer
(
)
-
>
GetFirstChild
(
)
-
>
IsText
(
)
)
{
return
EditorRawDOMPoint
(
aPoint
.
GetContainer
(
)
-
>
GetFirstChild
(
)
0
)
;
}
if
(
!
aPoint
.
IsStartOfContainer
(
)
)
{
if
(
AsHTMLEditor
(
)
)
{
nsIContent
*
child
=
aPoint
.
GetPreviousSiblingOfChild
(
)
;
if
(
child
&
&
child
-
>
IsText
(
)
)
{
if
(
NS_WARN_IF
(
child
-
>
Length
(
)
>
INT32_MAX
)
)
{
return
aPoint
;
}
return
EditorRawDOMPoint
(
child
child
-
>
Length
(
)
)
;
}
}
else
{
nsIContent
*
child
=
aPoint
.
GetContainer
(
)
-
>
GetLastChild
(
)
;
while
(
child
)
{
if
(
child
-
>
IsText
(
)
)
{
if
(
NS_WARN_IF
(
child
-
>
Length
(
)
>
INT32_MAX
)
)
{
return
aPoint
;
}
return
EditorRawDOMPoint
(
child
child
-
>
Length
(
)
)
;
}
child
=
child
-
>
GetPreviousSibling
(
)
;
}
}
}
}
if
(
EditorBase
:
:
IsPaddingBRElementForEmptyLastLine
(
*
aPoint
.
GetContainer
(
)
)
&
&
aPoint
.
IsStartOfContainer
(
)
)
{
nsIContent
*
previousSibling
=
aPoint
.
GetContainer
(
)
-
>
GetPreviousSibling
(
)
;
if
(
previousSibling
&
&
previousSibling
-
>
IsText
(
)
)
{
if
(
NS_WARN_IF
(
previousSibling
-
>
Length
(
)
>
INT32_MAX
)
)
{
return
aPoint
;
}
return
EditorRawDOMPoint
(
previousSibling
previousSibling
-
>
Length
(
)
)
;
}
nsINode
*
parentOfContainer
=
aPoint
.
GetContainer
(
)
-
>
GetParentNode
(
)
;
if
(
parentOfContainer
&
&
parentOfContainer
=
=
root
)
{
return
EditorRawDOMPoint
(
parentOfContainer
aPoint
.
GetContainerAsContent
(
)
0
)
;
}
}
return
aPoint
;
}
nsresult
EditorBase
:
:
InsertTextWithTransaction
(
Document
&
aDocument
const
nsAString
&
aStringToInsert
const
EditorRawDOMPoint
&
aPointToInsert
EditorRawDOMPoint
*
aPointAfterInsertedString
)
{
MOZ_ASSERT
(
ShouldHandleIMEComposition
(
)
|
|
!
AllowsTransactionsToChangeSelection
(
)
"
caller
must
have
already
used
AutoTransactionsConserveSelection
"
"
if
this
is
not
for
updating
composition
string
"
)
;
if
(
NS_WARN_IF
(
!
aPointToInsert
.
IsSet
(
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
MOZ_ASSERT
(
aPointToInsert
.
IsSetAndValid
(
)
)
;
if
(
!
ShouldHandleIMEComposition
(
)
&
&
aStringToInsert
.
IsEmpty
(
)
)
{
if
(
aPointAfterInsertedString
)
{
*
aPointAfterInsertedString
=
aPointToInsert
;
}
return
NS_OK
;
}
CheckedInt
<
int32_t
>
lengthToInsert
(
aStringToInsert
.
Length
(
)
)
;
if
(
NS_WARN_IF
(
!
lengthToInsert
.
isValid
(
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
EditorDOMPoint
pointToInsert
=
FindBetterInsertionPoint
(
aPointToInsert
)
;
if
(
!
pointToInsert
.
IsInTextNode
(
)
)
{
nsIContent
*
child
=
nullptr
;
if
(
!
pointToInsert
.
IsStartOfContainer
(
)
&
&
(
child
=
pointToInsert
.
GetPreviousSiblingOfChild
(
)
)
&
&
child
-
>
IsText
(
)
)
{
pointToInsert
.
Set
(
child
child
-
>
Length
(
)
)
;
}
else
if
(
!
pointToInsert
.
IsEndOfContainer
(
)
&
&
(
child
=
pointToInsert
.
GetChild
(
)
)
&
&
child
-
>
IsText
(
)
)
{
pointToInsert
.
Set
(
child
0
)
;
}
}
if
(
ShouldHandleIMEComposition
(
)
)
{
CheckedInt
<
int32_t
>
newOffset
;
if
(
!
pointToInsert
.
IsInTextNode
(
)
)
{
RefPtr
<
nsTextNode
>
newNode
=
CreateTextNode
(
EmptyString
(
)
)
;
if
(
NS_WARN_IF
(
!
newNode
)
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
=
InsertNodeWithTransaction
(
*
newNode
pointToInsert
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
pointToInsert
.
Set
(
newNode
0
)
;
newOffset
=
lengthToInsert
;
}
else
{
newOffset
=
lengthToInsert
+
pointToInsert
.
Offset
(
)
;
NS_ENSURE_TRUE
(
newOffset
.
isValid
(
)
NS_ERROR_FAILURE
)
;
}
nsresult
rv
=
InsertTextIntoTextNodeWithTransaction
(
aStringToInsert
MOZ_KnownLive
(
*
pointToInsert
.
GetContainerAsText
(
)
)
pointToInsert
.
Offset
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
aPointAfterInsertedString
)
{
aPointAfterInsertedString
-
>
Set
(
pointToInsert
.
GetContainer
(
)
newOffset
.
value
(
)
)
;
}
return
NS_OK
;
}
if
(
pointToInsert
.
IsInTextNode
(
)
)
{
CheckedInt
<
int32_t
>
newOffset
=
lengthToInsert
+
pointToInsert
.
Offset
(
)
;
NS_ENSURE_TRUE
(
newOffset
.
isValid
(
)
NS_ERROR_FAILURE
)
;
nsresult
rv
=
InsertTextIntoTextNodeWithTransaction
(
aStringToInsert
MOZ_KnownLive
(
*
pointToInsert
.
GetContainerAsText
(
)
)
pointToInsert
.
Offset
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
aPointAfterInsertedString
)
{
aPointAfterInsertedString
-
>
Set
(
pointToInsert
.
GetContainer
(
)
newOffset
.
value
(
)
)
;
}
return
NS_OK
;
}
RefPtr
<
nsTextNode
>
newNode
=
CreateTextNode
(
aStringToInsert
)
;
if
(
NS_WARN_IF
(
!
newNode
)
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
=
InsertNodeWithTransaction
(
*
newNode
pointToInsert
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
aPointAfterInsertedString
)
{
aPointAfterInsertedString
-
>
Set
(
newNode
lengthToInsert
.
value
(
)
)
;
}
return
NS_OK
;
}
static
bool
TextFragmentBeginsWithStringAtOffset
(
const
nsTextFragment
&
aTextFragment
const
int32_t
aOffset
const
nsAString
&
aString
)
{
const
uint32_t
stringLength
=
aString
.
Length
(
)
;
if
(
aOffset
+
stringLength
>
aTextFragment
.
GetLength
(
)
)
{
return
false
;
}
if
(
aTextFragment
.
Is2b
(
)
)
{
return
aString
.
Equals
(
aTextFragment
.
Get2b
(
)
+
aOffset
)
;
}
return
aString
.
EqualsLatin1
(
aTextFragment
.
Get1b
(
)
+
aOffset
stringLength
)
;
}
namespace
{
struct
AdjustedInsertionRange
{
EditorRawDOMPoint
mBegin
;
EditorRawDOMPoint
mEnd
;
}
;
}
static
AdjustedInsertionRange
AdjustTextInsertionRange
(
Text
&
aTextNode
const
int32_t
aInsertionOffset
const
nsAString
&
aInsertedString
)
{
if
(
TextFragmentBeginsWithStringAtOffset
(
aTextNode
.
TextFragment
(
)
aInsertionOffset
aInsertedString
)
)
{
EditorRawDOMPoint
begin
{
&
aTextNode
aInsertionOffset
}
;
EditorRawDOMPoint
end
{
&
aTextNode
static_cast
<
int32_t
>
(
aInsertionOffset
+
aInsertedString
.
Length
(
)
)
}
;
return
{
begin
end
}
;
}
const
EditorRawDOMPoint
begin
{
&
aTextNode
0
}
;
const
EditorRawDOMPoint
end
{
&
aTextNode
static_cast
<
int32_t
>
(
aTextNode
.
TextLength
(
)
)
}
;
return
{
begin
end
}
;
}
nsresult
EditorBase
:
:
InsertTextIntoTextNodeWithTransaction
(
const
nsAString
&
aStringToInsert
Text
&
aTextNode
int32_t
aOffset
bool
aSuppressIME
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
RefPtr
<
EditTransactionBase
>
transaction
;
bool
isIMETransaction
=
false
;
RefPtr
<
Text
>
insertedTextNode
=
&
aTextNode
;
int32_t
insertedOffset
=
aOffset
;
if
(
ShouldHandleIMEComposition
(
)
&
&
!
aSuppressIME
)
{
transaction
=
CompositionTransaction
:
:
Create
(
*
this
aStringToInsert
aTextNode
aOffset
)
;
isIMETransaction
=
true
;
insertedTextNode
=
mComposition
-
>
GetContainerTextNode
(
)
;
insertedOffset
=
mComposition
-
>
XPOffsetInTextNode
(
)
;
}
else
{
transaction
=
InsertTextTransaction
:
:
Create
(
*
this
aStringToInsert
aTextNode
aOffset
)
;
}
BeginUpdateViewBatch
(
)
;
nsresult
rv
=
DoTransactionInternal
(
transaction
)
;
EndUpdateViewBatch
(
)
;
if
(
AsHTMLEditor
(
)
&
&
insertedTextNode
)
{
if
(
!
MaybeHasMutationEventListeners
(
NS_EVENT_BITS_MUTATION_CHARACTERDATAMODIFIED
)
)
{
const
EditorRawDOMPoint
begin
{
insertedTextNode
insertedOffset
}
;
const
EditorRawDOMPoint
end
{
insertedTextNode
static_cast
<
int32_t
>
(
insertedOffset
+
aStringToInsert
.
Length
(
)
)
}
;
TopLevelEditSubActionDataRef
(
)
.
DidInsertText
(
*
this
begin
end
)
;
}
else
if
(
insertedTextNode
-
>
IsInComposedDoc
(
)
)
{
AdjustedInsertionRange
adjustedRange
=
AdjustTextInsertionRange
(
*
insertedTextNode
insertedOffset
aStringToInsert
)
;
TopLevelEditSubActionDataRef
(
)
.
DidInsertText
(
*
this
adjustedRange
.
mBegin
adjustedRange
.
mEnd
)
;
}
}
if
(
!
mActionListeners
.
IsEmpty
(
)
)
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
DidInsertText
(
insertedTextNode
insertedOffset
aStringToInsert
rv
)
;
}
}
if
(
isIMETransaction
&
&
mComposition
)
{
RefPtr
<
Text
>
textNode
=
mComposition
-
>
GetContainerTextNode
(
)
;
if
(
textNode
&
&
!
textNode
-
>
Length
(
)
)
{
DeleteNodeWithTransaction
(
*
textNode
)
;
mComposition
-
>
OnTextNodeRemoved
(
)
;
static_cast
<
CompositionTransaction
*
>
(
transaction
.
get
(
)
)
-
>
MarkFixed
(
)
;
}
}
return
rv
;
}
nsINode
*
EditorBase
:
:
GetFirstEditableNode
(
nsINode
*
aRoot
)
{
MOZ_ASSERT
(
aRoot
)
;
nsIContent
*
node
=
GetLeftmostChild
(
aRoot
)
;
if
(
node
&
&
!
IsEditable
(
node
)
)
{
node
=
GetNextEditableNode
(
*
node
)
;
}
return
(
node
!
=
aRoot
)
?
node
:
nullptr
;
}
nsresult
EditorBase
:
:
NotifyDocumentListeners
(
TDocumentListenerNotification
aNotificationType
)
{
switch
(
aNotificationType
)
{
case
eDocumentCreated
:
if
(
!
AsHTMLEditor
(
)
)
{
return
NS_OK
;
}
if
(
RefPtr
<
ComposerCommandsUpdater
>
composerCommandsUpdate
=
AsHTMLEditor
(
)
-
>
mComposerCommandsUpdater
)
{
composerCommandsUpdate
-
>
OnHTMLEditorCreated
(
)
;
}
return
NS_OK
;
case
eDocumentToBeDestroyed
:
{
RefPtr
<
ComposerCommandsUpdater
>
composerCommandsUpdate
=
AsHTMLEditor
(
)
?
AsHTMLEditor
(
)
-
>
mComposerCommandsUpdater
:
nullptr
;
if
(
!
mDocStateListeners
.
Length
(
)
&
&
!
composerCommandsUpdate
)
{
return
NS_OK
;
}
AutoDocumentStateListenerArray
listeners
(
mDocStateListeners
)
;
if
(
composerCommandsUpdate
)
{
composerCommandsUpdate
-
>
OnBeforeHTMLEditorDestroyed
(
)
;
}
for
(
auto
&
listener
:
listeners
)
{
nsresult
rv
=
listener
-
>
NotifyDocumentWillBeDestroyed
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
return
NS_OK
;
}
case
eDocumentStateChanged
:
{
bool
docIsDirty
;
nsresult
rv
=
GetDocumentModified
(
&
docIsDirty
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
static_cast
<
int8_t
>
(
docIsDirty
)
=
=
mDocDirtyState
)
{
return
NS_OK
;
}
mDocDirtyState
=
docIsDirty
;
RefPtr
<
ComposerCommandsUpdater
>
composerCommandsUpdate
=
AsHTMLEditor
(
)
?
AsHTMLEditor
(
)
-
>
mComposerCommandsUpdater
:
nullptr
;
if
(
!
mDocStateListeners
.
Length
(
)
&
&
!
composerCommandsUpdate
)
{
return
NS_OK
;
}
AutoDocumentStateListenerArray
listeners
(
mDocStateListeners
)
;
if
(
composerCommandsUpdate
)
{
composerCommandsUpdate
-
>
OnHTMLEditorDirtyStateChanged
(
mDocDirtyState
)
;
}
for
(
auto
&
listener
:
listeners
)
{
nsresult
rv
=
listener
-
>
NotifyDocumentStateChanged
(
mDocDirtyState
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
return
NS_OK
;
}
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
notification
"
)
;
return
NS_ERROR_FAILURE
;
}
}
nsresult
EditorBase
:
:
SetTextNodeWithoutTransaction
(
const
nsAString
&
aString
Text
&
aTextNode
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
!
AsHTMLEditor
(
)
)
;
MOZ_ASSERT
(
IsPlaintextEditor
(
)
)
;
MOZ_ASSERT
(
!
IsUndoRedoEnabled
(
)
)
;
const
uint32_t
length
=
aTextNode
.
Length
(
)
;
if
(
!
mActionListeners
.
IsEmpty
(
)
&
&
length
)
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
WillDeleteText
(
&
aTextNode
0
length
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
}
}
ErrorResult
error
;
DoSetText
(
aTextNode
aString
error
)
;
nsresult
rv
=
error
.
StealNSResult
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
SelectionRefPtr
(
)
-
>
Collapse
(
&
aTextNode
aString
.
Length
(
)
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
NS_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
Selection
:
:
Collapse
(
)
failed
but
ignored
"
)
;
RangeUpdaterRef
(
)
.
SelAdjDeleteText
(
&
aTextNode
0
length
)
;
RangeUpdaterRef
(
)
.
SelAdjInsertText
(
aTextNode
0
aString
)
;
if
(
!
mActionListeners
.
IsEmpty
(
)
)
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
if
(
length
)
{
listener
-
>
DidDeleteText
(
&
aTextNode
0
length
rv
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
}
if
(
!
aString
.
IsEmpty
(
)
)
{
listener
-
>
DidInsertText
(
&
aTextNode
0
aString
rv
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
}
}
}
return
NS_OK
;
}
nsresult
EditorBase
:
:
DeleteTextWithTransaction
(
Text
&
aTextNode
uint32_t
aOffset
uint32_t
aLength
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
RefPtr
<
DeleteTextTransaction
>
transaction
=
DeleteTextTransaction
:
:
MaybeCreate
(
*
this
aTextNode
aOffset
aLength
)
;
if
(
NS_WARN_IF
(
!
transaction
)
)
{
return
NS_ERROR_FAILURE
;
}
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eDeleteText
nsIEditor
:
:
ePrevious
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
if
(
!
mActionListeners
.
IsEmpty
(
)
)
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
WillDeleteText
(
&
aTextNode
aOffset
aLength
)
;
}
}
nsresult
rv
=
DoTransactionInternal
(
transaction
)
;
if
(
AsHTMLEditor
(
)
)
{
TopLevelEditSubActionDataRef
(
)
.
DidDeleteText
(
*
this
EditorRawDOMPoint
(
&
aTextNode
aOffset
)
)
;
}
if
(
!
mActionListeners
.
IsEmpty
(
)
)
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
DidDeleteText
(
&
aTextNode
aOffset
aLength
rv
)
;
}
}
return
rv
;
}
struct
SavedRange
final
{
RefPtr
<
Selection
>
mSelection
;
nsCOMPtr
<
nsINode
>
mStartContainer
;
nsCOMPtr
<
nsINode
>
mEndContainer
;
int32_t
mStartOffset
;
int32_t
mEndOffset
;
}
;
void
EditorBase
:
:
DoSplitNode
(
const
EditorDOMPoint
&
aStartOfRightNode
nsIContent
&
aNewLeftNode
ErrorResult
&
aError
)
{
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
;
}
if
(
NS_WARN_IF
(
!
aStartOfRightNode
.
IsSet
(
)
)
)
{
aError
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
;
}
MOZ_ASSERT
(
aStartOfRightNode
.
IsSetAndValid
(
)
)
;
AutoTArray
<
SavedRange
10
>
savedRanges
;
for
(
SelectionType
selectionType
:
kPresentSelectionTypes
)
{
SavedRange
range
;
range
.
mSelection
=
GetSelection
(
selectionType
)
;
if
(
NS_WARN_IF
(
!
range
.
mSelection
&
&
selectionType
=
=
SelectionType
:
:
eNormal
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
else
if
(
!
range
.
mSelection
)
{
continue
;
}
for
(
uint32_t
j
=
0
;
j
<
range
.
mSelection
-
>
RangeCount
(
)
;
+
+
j
)
{
RefPtr
<
nsRange
>
r
=
range
.
mSelection
-
>
GetRangeAt
(
j
)
;
MOZ_ASSERT
(
r
-
>
IsPositioned
(
)
)
;
range
.
mStartContainer
=
r
-
>
GetStartContainer
(
)
;
range
.
mStartOffset
=
r
-
>
StartOffset
(
)
;
range
.
mEndContainer
=
r
-
>
GetEndContainer
(
)
;
range
.
mEndOffset
=
r
-
>
EndOffset
(
)
;
savedRanges
.
AppendElement
(
range
)
;
}
}
nsCOMPtr
<
nsINode
>
parent
=
aStartOfRightNode
.
GetContainer
(
)
-
>
GetParentNode
(
)
;
if
(
NS_WARN_IF
(
!
parent
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsIContent
*
firstChildOfRightNode
=
aStartOfRightNode
.
GetChild
(
)
;
parent
-
>
InsertBefore
(
aNewLeftNode
aStartOfRightNode
.
GetContainer
(
)
aError
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
;
}
if
(
!
aStartOfRightNode
.
IsStartOfContainer
(
)
)
{
Text
*
rightAsText
=
aStartOfRightNode
.
GetContainerAsText
(
)
;
Text
*
leftAsText
=
aNewLeftNode
.
GetAsText
(
)
;
if
(
rightAsText
&
&
leftAsText
)
{
MOZ_DIAGNOSTIC_ASSERT
(
AsHTMLEditor
(
)
"
Text
node
in
TextEditor
shouldn
'
t
be
split
"
)
;
nsAutoString
leftText
;
rightAsText
-
>
SubstringData
(
0
aStartOfRightNode
.
Offset
(
)
leftText
IgnoreErrors
(
)
)
;
DoDeleteText
(
MOZ_KnownLive
(
*
rightAsText
)
0
aStartOfRightNode
.
Offset
(
)
IgnoreErrors
(
)
)
;
DoSetText
(
MOZ_KnownLive
(
*
leftAsText
)
leftText
IgnoreErrors
(
)
)
;
}
else
{
MOZ_DIAGNOSTIC_ASSERT
(
!
rightAsText
&
&
!
leftAsText
)
;
if
(
!
firstChildOfRightNode
)
{
MoveAllChildren
(
*
aStartOfRightNode
.
GetContainer
(
)
EditorRawDOMPoint
(
&
aNewLeftNode
0
)
aError
)
;
NS_WARNING_ASSERTION
(
!
aError
.
Failed
(
)
"
Failed
to
move
all
children
from
the
right
node
to
the
left
node
"
)
;
}
else
if
(
NS_WARN_IF
(
aStartOfRightNode
.
GetContainer
(
)
!
=
firstChildOfRightNode
-
>
GetParentNode
(
)
)
)
{
}
else
{
MovePreviousSiblings
(
*
firstChildOfRightNode
EditorRawDOMPoint
(
&
aNewLeftNode
0
)
aError
)
;
NS_WARNING_ASSERTION
(
!
aError
.
Failed
(
)
"
Failed
to
move
some
children
from
the
right
node
"
"
to
the
left
node
"
)
;
}
}
}
aError
.
SuppressException
(
)
;
if
(
RefPtr
<
PresShell
>
presShell
=
GetPresShell
(
)
)
{
presShell
-
>
FlushPendingNotifications
(
FlushType
:
:
Frames
)
;
}
NS_WARNING_ASSERTION
(
!
Destroyed
(
)
"
The
editor
is
destroyed
during
splitting
a
node
"
)
;
bool
allowedTransactionsToChangeSelection
=
AllowsTransactionsToChangeSelection
(
)
;
RefPtr
<
Selection
>
previousSelection
;
for
(
size_t
i
=
0
;
i
<
savedRanges
.
Length
(
)
;
+
+
i
)
{
SavedRange
&
range
=
savedRanges
[
i
]
;
if
(
range
.
mSelection
!
=
previousSelection
)
{
range
.
mSelection
-
>
RemoveAllRanges
(
aError
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
;
}
previousSelection
=
range
.
mSelection
;
}
if
(
allowedTransactionsToChangeSelection
&
&
range
.
mSelection
-
>
Type
(
)
=
=
SelectionType
:
:
eNormal
)
{
continue
;
}
if
(
range
.
mStartContainer
=
=
aStartOfRightNode
.
GetContainer
(
)
)
{
if
(
static_cast
<
uint32_t
>
(
range
.
mStartOffset
)
<
aStartOfRightNode
.
Offset
(
)
)
{
range
.
mStartContainer
=
&
aNewLeftNode
;
}
else
{
range
.
mStartOffset
-
=
aStartOfRightNode
.
Offset
(
)
;
}
}
if
(
range
.
mEndContainer
=
=
aStartOfRightNode
.
GetContainer
(
)
)
{
if
(
static_cast
<
uint32_t
>
(
range
.
mEndOffset
)
<
aStartOfRightNode
.
Offset
(
)
)
{
range
.
mEndContainer
=
&
aNewLeftNode
;
}
else
{
range
.
mEndOffset
-
=
aStartOfRightNode
.
Offset
(
)
;
}
}
RefPtr
<
nsRange
>
newRange
=
nsRange
:
:
Create
(
range
.
mStartContainer
range
.
mStartOffset
range
.
mEndContainer
range
.
mEndOffset
aError
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
;
}
range
.
mSelection
-
>
AddRangeAndSelectFramesAndNotifyListeners
(
*
newRange
aError
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
;
}
}
if
(
NS_WARN_IF
(
parent
!
=
aStartOfRightNode
.
GetContainer
(
)
-
>
GetParentNode
(
)
)
|
|
NS_WARN_IF
(
parent
!
=
aNewLeftNode
.
GetParentNode
(
)
)
|
|
NS_WARN_IF
(
aNewLeftNode
.
GetNextSibling
(
)
!
=
aStartOfRightNode
.
GetContainer
(
)
)
)
{
aError
.
Throw
(
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
)
;
}
}
nsresult
EditorBase
:
:
DoJoinNodes
(
nsINode
*
aNodeToKeep
nsINode
*
aNodeToJoin
nsINode
*
aParent
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
AsHTMLEditor
(
)
)
;
MOZ_ASSERT
(
aNodeToKeep
)
;
MOZ_ASSERT
(
aNodeToJoin
)
;
MOZ_ASSERT
(
aParent
)
;
uint32_t
firstNodeLength
=
aNodeToJoin
-
>
Length
(
)
;
int32_t
joinOffset
;
GetNodeLocation
(
aNodeToJoin
&
joinOffset
)
;
int32_t
keepOffset
;
nsINode
*
parent
=
GetNodeLocation
(
aNodeToKeep
&
keepOffset
)
;
AutoTArray
<
SavedRange
10
>
savedRanges
;
for
(
SelectionType
selectionType
:
kPresentSelectionTypes
)
{
SavedRange
range
;
range
.
mSelection
=
GetSelection
(
selectionType
)
;
if
(
selectionType
=
=
SelectionType
:
:
eNormal
)
{
NS_ENSURE_TRUE
(
range
.
mSelection
NS_ERROR_NULL_POINTER
)
;
}
else
if
(
!
range
.
mSelection
)
{
continue
;
}
for
(
uint32_t
j
=
0
;
j
<
range
.
mSelection
-
>
RangeCount
(
)
;
+
+
j
)
{
RefPtr
<
nsRange
>
r
=
range
.
mSelection
-
>
GetRangeAt
(
j
)
;
MOZ_ASSERT
(
r
-
>
IsPositioned
(
)
)
;
range
.
mStartContainer
=
r
-
>
GetStartContainer
(
)
;
range
.
mStartOffset
=
r
-
>
StartOffset
(
)
;
range
.
mEndContainer
=
r
-
>
GetEndContainer
(
)
;
range
.
mEndOffset
=
r
-
>
EndOffset
(
)
;
if
(
range
.
mStartContainer
)
{
if
(
range
.
mStartContainer
=
=
parent
&
&
joinOffset
<
range
.
mStartOffset
&
&
range
.
mStartOffset
<
=
keepOffset
)
{
range
.
mStartContainer
=
aNodeToJoin
;
range
.
mStartOffset
=
firstNodeLength
;
}
if
(
range
.
mEndContainer
=
=
parent
&
&
joinOffset
<
range
.
mEndOffset
&
&
range
.
mEndOffset
<
=
keepOffset
)
{
range
.
mEndContainer
=
aNodeToJoin
;
range
.
mEndOffset
=
firstNodeLength
;
}
}
savedRanges
.
AppendElement
(
range
)
;
}
}
if
(
IsTextNode
(
aNodeToKeep
)
&
&
IsTextNode
(
aNodeToJoin
)
)
{
nsAutoString
rightText
;
nsAutoString
leftText
;
aNodeToKeep
-
>
GetAsText
(
)
-
>
GetData
(
rightText
)
;
aNodeToJoin
-
>
GetAsText
(
)
-
>
GetData
(
leftText
)
;
leftText
+
=
rightText
;
DoSetText
(
MOZ_KnownLive
(
*
aNodeToKeep
-
>
GetAsText
(
)
)
leftText
IgnoreErrors
(
)
)
;
}
else
{
nsCOMPtr
<
nsINodeList
>
childNodes
=
aNodeToJoin
-
>
ChildNodes
(
)
;
MOZ_ASSERT
(
childNodes
)
;
nsCOMPtr
<
nsIContent
>
firstNode
=
aNodeToKeep
-
>
GetFirstChild
(
)
;
for
(
uint32_t
i
=
childNodes
-
>
Length
(
)
;
i
;
-
-
i
)
{
nsCOMPtr
<
nsIContent
>
childNode
=
childNodes
-
>
Item
(
i
-
1
)
;
if
(
childNode
)
{
ErrorResult
err
;
aNodeToKeep
-
>
InsertBefore
(
*
childNode
firstNode
err
)
;
NS_ENSURE_TRUE
(
!
err
.
Failed
(
)
err
.
StealNSResult
(
)
)
;
firstNode
=
std
:
:
move
(
childNode
)
;
}
}
}
ErrorResult
err
;
aParent
-
>
RemoveChild
(
*
aNodeToJoin
err
)
;
bool
allowedTransactionsToChangeSelection
=
AllowsTransactionsToChangeSelection
(
)
;
RefPtr
<
Selection
>
previousSelection
;
for
(
size_t
i
=
0
;
i
<
savedRanges
.
Length
(
)
;
+
+
i
)
{
SavedRange
&
range
=
savedRanges
[
i
]
;
if
(
range
.
mSelection
!
=
previousSelection
)
{
ErrorResult
rv
;
range
.
mSelection
-
>
RemoveAllRanges
(
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
return
rv
.
StealNSResult
(
)
;
}
previousSelection
=
range
.
mSelection
;
}
if
(
allowedTransactionsToChangeSelection
&
&
range
.
mSelection
-
>
Type
(
)
=
=
SelectionType
:
:
eNormal
)
{
continue
;
}
if
(
range
.
mStartContainer
=
=
aNodeToJoin
)
{
range
.
mStartContainer
=
aNodeToKeep
;
}
else
if
(
range
.
mStartContainer
=
=
aNodeToKeep
)
{
range
.
mStartOffset
+
=
firstNodeLength
;
}
if
(
range
.
mEndContainer
=
=
aNodeToJoin
)
{
range
.
mEndContainer
=
aNodeToKeep
;
}
else
if
(
range
.
mEndContainer
=
=
aNodeToKeep
)
{
range
.
mEndOffset
+
=
firstNodeLength
;
}
RefPtr
<
nsRange
>
newRange
=
nsRange
:
:
Create
(
range
.
mStartContainer
range
.
mStartOffset
range
.
mEndContainer
range
.
mEndOffset
IgnoreErrors
(
)
)
;
if
(
NS_WARN_IF
(
!
newRange
)
)
{
return
NS_ERROR_FAILURE
;
}
ErrorResult
err
;
range
.
mSelection
-
>
AddRangeAndSelectFramesAndNotifyListeners
(
*
newRange
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
}
if
(
allowedTransactionsToChangeSelection
)
{
DebugOnly
<
nsresult
>
rv
=
SelectionRefPtr
(
)
-
>
Collapse
(
aNodeToKeep
AssertedCast
<
int32_t
>
(
firstNodeLength
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
collapse
Selection
at
end
of
the
node
"
)
;
}
return
err
.
StealNSResult
(
)
;
}
int32_t
EditorBase
:
:
GetChildOffset
(
nsINode
*
aChild
nsINode
*
aParent
)
{
MOZ_ASSERT
(
aChild
)
;
MOZ_ASSERT
(
aParent
)
;
if
(
aParent
-
>
GetFirstChild
(
)
=
=
aChild
)
{
MOZ_ASSERT
(
aParent
-
>
ComputeIndexOf
(
aChild
)
=
=
0
)
;
return
0
;
}
if
(
aParent
-
>
GetLastChild
(
)
=
=
aChild
)
{
int32_t
lastChildIndex
=
static_cast
<
int32_t
>
(
aParent
-
>
Length
(
)
-
1
)
;
MOZ_ASSERT
(
aParent
-
>
ComputeIndexOf
(
aChild
)
=
=
lastChildIndex
)
;
return
lastChildIndex
;
}
int32_t
index
=
aParent
-
>
ComputeIndexOf
(
aChild
)
;
MOZ_ASSERT
(
index
!
=
-
1
)
;
return
index
;
}
nsINode
*
EditorBase
:
:
GetNodeLocation
(
nsINode
*
aChild
int32_t
*
aOffset
)
{
MOZ_ASSERT
(
aChild
)
;
MOZ_ASSERT
(
aOffset
)
;
nsINode
*
parent
=
aChild
-
>
GetParentNode
(
)
;
if
(
parent
)
{
*
aOffset
=
GetChildOffset
(
aChild
parent
)
;
MOZ_ASSERT
(
*
aOffset
!
=
-
1
)
;
}
else
{
*
aOffset
=
-
1
;
}
return
parent
;
}
nsIContent
*
EditorBase
:
:
GetPreviousNodeInternal
(
nsINode
&
aNode
bool
aFindEditableNode
bool
aFindAnyDataNode
bool
aNoBlockCrossing
)
const
{
if
(
!
IsDescendantOfEditorRoot
(
&
aNode
)
)
{
return
nullptr
;
}
return
FindNode
(
&
aNode
false
aFindEditableNode
aFindAnyDataNode
aNoBlockCrossing
)
;
}
nsIContent
*
EditorBase
:
:
GetPreviousNodeInternal
(
const
EditorRawDOMPoint
&
aPoint
bool
aFindEditableNode
bool
aFindAnyDataNode
bool
aNoBlockCrossing
)
const
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
NS_WARNING_ASSERTION
(
!
aPoint
.
IsInDataNode
(
)
|
|
aPoint
.
IsInTextNode
(
)
"
GetPreviousNodeInternal
(
)
doesn
'
t
assume
that
the
start
point
is
a
"
"
data
node
except
text
node
"
)
;
if
(
aPoint
.
IsStartOfContainer
(
)
|
|
aPoint
.
IsInTextNode
(
)
)
{
if
(
aNoBlockCrossing
&
&
IsBlockNode
(
aPoint
.
GetContainer
(
)
)
)
{
return
nullptr
;
}
return
GetPreviousNodeInternal
(
*
aPoint
.
GetContainer
(
)
aFindEditableNode
aFindAnyDataNode
aNoBlockCrossing
)
;
}
if
(
aPoint
.
GetChild
(
)
)
{
return
GetPreviousNodeInternal
(
*
aPoint
.
GetChild
(
)
aFindEditableNode
aFindAnyDataNode
aNoBlockCrossing
)
;
}
nsIContent
*
rightMostNode
=
GetRightmostChild
(
aPoint
.
GetContainer
(
)
aNoBlockCrossing
)
;
if
(
!
rightMostNode
)
{
return
nullptr
;
}
if
(
(
!
aFindEditableNode
|
|
IsEditable
(
rightMostNode
)
)
&
&
(
aFindAnyDataNode
|
|
IsElementOrText
(
*
rightMostNode
)
)
)
{
return
rightMostNode
;
}
return
GetPreviousNodeInternal
(
*
rightMostNode
aFindEditableNode
aFindAnyDataNode
aNoBlockCrossing
)
;
}
nsIContent
*
EditorBase
:
:
GetNextNodeInternal
(
nsINode
&
aNode
bool
aFindEditableNode
bool
aFindAnyDataNode
bool
aNoBlockCrossing
)
const
{
if
(
!
IsDescendantOfEditorRoot
(
&
aNode
)
)
{
return
nullptr
;
}
return
FindNode
(
&
aNode
true
aFindEditableNode
aFindAnyDataNode
aNoBlockCrossing
)
;
}
nsIContent
*
EditorBase
:
:
GetNextNodeInternal
(
const
EditorRawDOMPoint
&
aPoint
bool
aFindEditableNode
bool
aFindAnyDataNode
bool
aNoBlockCrossing
)
const
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
NS_WARNING_ASSERTION
(
!
aPoint
.
IsInDataNode
(
)
|
|
aPoint
.
IsInTextNode
(
)
"
GetNextNodeInternal
(
)
doesn
'
t
assume
that
the
start
point
is
a
"
"
data
node
except
text
node
"
)
;
EditorRawDOMPoint
point
(
aPoint
)
;
if
(
point
.
IsInTextNode
(
)
)
{
point
.
Set
(
point
.
GetContainer
(
)
)
;
bool
advanced
=
point
.
AdvanceOffset
(
)
;
if
(
NS_WARN_IF
(
!
advanced
)
)
{
return
nullptr
;
}
}
if
(
point
.
GetChild
(
)
)
{
if
(
aNoBlockCrossing
&
&
IsBlockNode
(
point
.
GetChild
(
)
)
)
{
return
point
.
GetChild
(
)
;
}
nsIContent
*
leftMostNode
=
GetLeftmostChild
(
point
.
GetChild
(
)
aNoBlockCrossing
)
;
if
(
!
leftMostNode
)
{
return
point
.
GetChild
(
)
;
}
if
(
!
IsDescendantOfEditorRoot
(
leftMostNode
)
)
{
return
nullptr
;
}
if
(
(
!
aFindEditableNode
|
|
IsEditable
(
leftMostNode
)
)
&
&
(
aFindAnyDataNode
|
|
IsElementOrText
(
*
leftMostNode
)
)
)
{
return
leftMostNode
;
}
return
GetNextNodeInternal
(
*
leftMostNode
aFindEditableNode
aFindAnyDataNode
aNoBlockCrossing
)
;
}
if
(
aNoBlockCrossing
&
&
IsBlockNode
(
point
.
GetContainer
(
)
)
)
{
return
nullptr
;
}
return
GetNextNodeInternal
(
*
point
.
GetContainer
(
)
aFindEditableNode
aFindAnyDataNode
aNoBlockCrossing
)
;
}
nsIContent
*
EditorBase
:
:
FindNextLeafNode
(
nsINode
*
aCurrentNode
bool
aGoForward
bool
bNoBlockCrossing
)
const
{
MOZ_ASSERT
(
IsDescendantOfEditorRoot
(
aCurrentNode
)
&
&
!
IsEditorRoot
(
aCurrentNode
)
"
Bogus
arguments
"
)
;
nsINode
*
cur
=
aCurrentNode
;
for
(
;
;
)
{
nsIContent
*
sibling
=
aGoForward
?
cur
-
>
GetNextSibling
(
)
:
cur
-
>
GetPreviousSibling
(
)
;
if
(
sibling
)
{
if
(
bNoBlockCrossing
&
&
IsBlockNode
(
sibling
)
)
{
return
sibling
;
}
nsIContent
*
leaf
=
aGoForward
?
GetLeftmostChild
(
sibling
bNoBlockCrossing
)
:
GetRightmostChild
(
sibling
bNoBlockCrossing
)
;
if
(
!
leaf
)
{
return
sibling
;
}
return
leaf
;
}
nsINode
*
parent
=
cur
-
>
GetParentNode
(
)
;
if
(
!
parent
)
{
return
nullptr
;
}
NS_ASSERTION
(
IsDescendantOfEditorRoot
(
parent
)
"
We
started
with
a
proper
descendant
of
root
and
should
stop
"
"
if
we
ever
hit
the
root
so
we
better
have
a
descendant
of
"
"
root
now
!
"
)
;
if
(
IsEditorRoot
(
parent
)
|
|
(
bNoBlockCrossing
&
&
IsBlockNode
(
parent
)
)
)
{
return
nullptr
;
}
cur
=
parent
;
}
MOZ_ASSERT_UNREACHABLE
(
"
What
part
of
for
(
;
;
)
do
you
not
understand
?
"
)
;
return
nullptr
;
}
nsIContent
*
EditorBase
:
:
FindNode
(
nsINode
*
aCurrentNode
bool
aGoForward
bool
aEditableNode
bool
aFindAnyDataNode
bool
bNoBlockCrossing
)
const
{
if
(
IsEditorRoot
(
aCurrentNode
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIContent
>
candidate
=
FindNextLeafNode
(
aCurrentNode
aGoForward
bNoBlockCrossing
)
;
if
(
!
candidate
)
{
return
nullptr
;
}
if
(
(
!
aEditableNode
|
|
IsEditable
(
candidate
)
)
&
&
(
aFindAnyDataNode
|
|
IsElementOrText
(
*
candidate
)
)
)
{
return
candidate
;
}
return
FindNode
(
candidate
aGoForward
aEditableNode
aFindAnyDataNode
bNoBlockCrossing
)
;
}
nsIContent
*
EditorBase
:
:
GetRightmostChild
(
nsINode
*
aCurrentNode
bool
bNoBlockCrossing
)
const
{
NS_ENSURE_TRUE
(
aCurrentNode
nullptr
)
;
nsIContent
*
cur
=
aCurrentNode
-
>
GetLastChild
(
)
;
if
(
!
cur
)
{
return
nullptr
;
}
for
(
;
;
)
{
if
(
bNoBlockCrossing
&
&
IsBlockNode
(
cur
)
)
{
return
cur
;
}
nsIContent
*
next
=
cur
-
>
GetLastChild
(
)
;
if
(
!
next
)
{
return
cur
;
}
cur
=
next
;
}
MOZ_ASSERT_UNREACHABLE
(
"
What
part
of
for
(
;
;
)
do
you
not
understand
?
"
)
;
return
nullptr
;
}
nsIContent
*
EditorBase
:
:
GetLeftmostChild
(
nsINode
*
aCurrentNode
bool
bNoBlockCrossing
)
const
{
NS_ENSURE_TRUE
(
aCurrentNode
nullptr
)
;
nsIContent
*
cur
=
aCurrentNode
-
>
GetFirstChild
(
)
;
if
(
!
cur
)
{
return
nullptr
;
}
for
(
;
;
)
{
if
(
bNoBlockCrossing
&
&
IsBlockNode
(
cur
)
)
{
return
cur
;
}
nsIContent
*
next
=
cur
-
>
GetFirstChild
(
)
;
if
(
!
next
)
{
return
cur
;
}
cur
=
next
;
}
MOZ_ASSERT_UNREACHABLE
(
"
What
part
of
for
(
;
;
)
do
you
not
understand
?
"
)
;
return
nullptr
;
}
bool
EditorBase
:
:
IsBlockNode
(
nsINode
*
aNode
)
const
{
return
false
;
}
bool
EditorBase
:
:
CanContain
(
nsINode
&
aParent
nsIContent
&
aChild
)
const
{
switch
(
aParent
.
NodeType
(
)
)
{
case
nsINode
:
:
ELEMENT_NODE
:
case
nsINode
:
:
DOCUMENT_FRAGMENT_NODE
:
return
TagCanContain
(
*
aParent
.
NodeInfo
(
)
-
>
NameAtom
(
)
aChild
)
;
}
return
false
;
}
bool
EditorBase
:
:
CanContainTag
(
nsINode
&
aParent
nsAtom
&
aChildTag
)
const
{
switch
(
aParent
.
NodeType
(
)
)
{
case
nsINode
:
:
ELEMENT_NODE
:
case
nsINode
:
:
DOCUMENT_FRAGMENT_NODE
:
return
TagCanContainTag
(
*
aParent
.
NodeInfo
(
)
-
>
NameAtom
(
)
aChildTag
)
;
}
return
false
;
}
bool
EditorBase
:
:
TagCanContain
(
nsAtom
&
aParentTag
nsIContent
&
aChild
)
const
{
switch
(
aChild
.
NodeType
(
)
)
{
case
nsINode
:
:
TEXT_NODE
:
case
nsINode
:
:
ELEMENT_NODE
:
case
nsINode
:
:
DOCUMENT_FRAGMENT_NODE
:
return
TagCanContainTag
(
aParentTag
*
aChild
.
NodeInfo
(
)
-
>
NameAtom
(
)
)
;
}
return
false
;
}
bool
EditorBase
:
:
TagCanContainTag
(
nsAtom
&
aParentTag
nsAtom
&
aChildTag
)
const
{
return
true
;
}
bool
EditorBase
:
:
IsRoot
(
nsINode
*
inNode
)
const
{
if
(
NS_WARN_IF
(
!
inNode
)
)
{
return
false
;
}
nsINode
*
rootNode
=
GetRoot
(
)
;
return
inNode
=
=
rootNode
;
}
bool
EditorBase
:
:
IsEditorRoot
(
nsINode
*
aNode
)
const
{
if
(
NS_WARN_IF
(
!
aNode
)
)
{
return
false
;
}
nsINode
*
rootNode
=
GetEditorRoot
(
)
;
return
aNode
=
=
rootNode
;
}
bool
EditorBase
:
:
IsDescendantOfRoot
(
nsINode
*
inNode
)
const
{
if
(
NS_WARN_IF
(
!
inNode
)
)
{
return
false
;
}
nsIContent
*
root
=
GetRoot
(
)
;
if
(
NS_WARN_IF
(
!
root
)
)
{
return
false
;
}
return
inNode
-
>
IsInclusiveDescendantOf
(
root
)
;
}
bool
EditorBase
:
:
IsDescendantOfEditorRoot
(
nsINode
*
aNode
)
const
{
if
(
NS_WARN_IF
(
!
aNode
)
)
{
return
false
;
}
nsIContent
*
root
=
GetEditorRoot
(
)
;
if
(
NS_WARN_IF
(
!
root
)
)
{
return
false
;
}
return
aNode
-
>
IsInclusiveDescendantOf
(
root
)
;
}
bool
EditorBase
:
:
IsContainer
(
nsINode
*
aNode
)
const
{
return
aNode
?
true
:
false
;
}
uint32_t
EditorBase
:
:
CountEditableChildren
(
nsINode
*
aNode
)
{
MOZ_ASSERT
(
aNode
)
;
uint32_t
count
=
0
;
for
(
nsIContent
*
child
=
aNode
-
>
GetFirstChild
(
)
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
if
(
IsEditable
(
child
)
)
{
+
+
count
;
}
}
return
count
;
}
NS_IMETHODIMP
EditorBase
:
:
IncrementModificationCount
(
int32_t
inNumMods
)
{
uint32_t
oldModCount
=
mModCount
;
mModCount
+
=
inNumMods
;
if
(
(
!
oldModCount
&
&
mModCount
)
|
|
(
oldModCount
&
&
!
mModCount
)
)
{
NotifyDocumentListeners
(
eDocumentStateChanged
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetModificationCount
(
int32_t
*
outModCount
)
{
NS_ENSURE_ARG_POINTER
(
outModCount
)
;
*
outModCount
=
mModCount
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
ResetModificationCount
(
)
{
bool
doNotify
=
(
mModCount
!
=
0
)
;
mModCount
=
0
;
if
(
doNotify
)
{
NotifyDocumentListeners
(
eDocumentStateChanged
)
;
}
return
NS_OK
;
}
bool
EditorBase
:
:
AreNodesSameType
(
nsIContent
&
aNode1
nsIContent
&
aNode2
)
const
{
if
(
aNode1
.
NodeInfo
(
)
-
>
NameAtom
(
)
!
=
aNode2
.
NodeInfo
(
)
-
>
NameAtom
(
)
)
{
return
false
;
}
if
(
!
AsHTMLEditor
(
)
|
|
!
AsHTMLEditor
(
)
-
>
IsCSSEnabled
(
)
)
{
return
true
;
}
if
(
!
aNode1
.
IsHTMLElement
(
nsGkAtoms
:
:
span
)
)
{
return
true
;
}
if
(
!
aNode1
.
IsElement
(
)
|
|
!
aNode2
.
IsElement
(
)
)
{
return
false
;
}
return
CSSEditUtils
:
:
ElementsSameStyle
(
aNode1
.
AsElement
(
)
aNode2
.
AsElement
(
)
)
;
}
nsIContent
*
EditorBase
:
:
GetNodeAtRangeOffsetPoint
(
const
RawRangeBoundary
&
aPoint
)
{
if
(
NS_WARN_IF
(
!
aPoint
.
IsSet
(
)
)
)
{
return
nullptr
;
}
if
(
aPoint
.
Container
(
)
-
>
GetAsText
(
)
)
{
return
aPoint
.
Container
(
)
-
>
AsContent
(
)
;
}
return
aPoint
.
GetChildAtOffset
(
)
;
}
EditorRawDOMPoint
EditorBase
:
:
GetStartPoint
(
const
Selection
&
aSelection
)
{
if
(
NS_WARN_IF
(
!
aSelection
.
RangeCount
(
)
)
)
{
return
EditorRawDOMPoint
(
)
;
}
const
nsRange
*
range
=
aSelection
.
GetRangeAt
(
0
)
;
if
(
NS_WARN_IF
(
!
range
)
|
|
NS_WARN_IF
(
!
range
-
>
IsPositioned
(
)
)
)
{
return
EditorRawDOMPoint
(
)
;
}
return
EditorRawDOMPoint
(
range
-
>
StartRef
(
)
)
;
}
EditorRawDOMPoint
EditorBase
:
:
GetEndPoint
(
const
Selection
&
aSelection
)
{
if
(
NS_WARN_IF
(
!
aSelection
.
RangeCount
(
)
)
)
{
return
EditorRawDOMPoint
(
)
;
}
const
nsRange
*
range
=
aSelection
.
GetRangeAt
(
0
)
;
if
(
NS_WARN_IF
(
!
range
)
|
|
NS_WARN_IF
(
!
range
-
>
IsPositioned
(
)
)
)
{
return
EditorRawDOMPoint
(
)
;
}
return
EditorRawDOMPoint
(
range
-
>
EndRef
(
)
)
;
}
nsresult
EditorBase
:
:
GetEndChildNode
(
const
Selection
&
aSelection
nsIContent
*
*
aEndNode
)
{
MOZ_ASSERT
(
aEndNode
)
;
*
aEndNode
=
nullptr
;
if
(
NS_WARN_IF
(
!
aSelection
.
RangeCount
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
const
nsRange
*
range
=
aSelection
.
GetRangeAt
(
0
)
;
if
(
NS_WARN_IF
(
!
range
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
NS_WARN_IF
(
!
range
-
>
IsPositioned
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
NS_IF_ADDREF
(
*
aEndNode
=
range
-
>
GetChildAtEndOffset
(
)
)
;
return
NS_OK
;
}
bool
EditorBase
:
:
IsPreformatted
(
nsINode
*
aNode
)
{
if
(
NS_WARN_IF
(
!
aNode
)
)
{
return
false
;
}
Element
*
element
=
Element
:
:
FromNode
(
aNode
)
;
if
(
!
element
)
{
element
=
aNode
-
>
GetParentElement
(
)
;
if
(
!
element
)
{
return
false
;
}
}
RefPtr
<
ComputedStyle
>
elementStyle
=
nsComputedDOMStyle
:
:
GetComputedStyleNoFlush
(
element
nullptr
)
;
if
(
!
elementStyle
)
{
return
false
;
}
const
nsStyleText
*
styleText
=
elementStyle
-
>
StyleText
(
)
;
return
styleText
-
>
WhiteSpaceIsSignificant
(
)
;
}
SplitNodeResult
EditorBase
:
:
SplitNodeDeepWithTransaction
(
nsIContent
&
aMostAncestorToSplit
const
EditorDOMPoint
&
aStartOfDeepestRightNode
SplitAtEdges
aSplitAtEdges
)
{
MOZ_ASSERT
(
aStartOfDeepestRightNode
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
aStartOfDeepestRightNode
.
GetContainer
(
)
=
=
&
aMostAncestorToSplit
|
|
EditorUtils
:
:
IsDescendantOf
(
*
aStartOfDeepestRightNode
.
GetContainer
(
)
aMostAncestorToSplit
)
)
;
if
(
NS_WARN_IF
(
!
aStartOfDeepestRightNode
.
IsSet
(
)
)
)
{
return
SplitNodeResult
(
NS_ERROR_INVALID_ARG
)
;
}
nsCOMPtr
<
nsIContent
>
newLeftNodeOfMostAncestor
;
EditorDOMPoint
atStartOfRightNode
(
aStartOfDeepestRightNode
)
;
while
(
true
)
{
if
(
NS_WARN_IF
(
!
atStartOfRightNode
.
GetContainerAsContent
(
)
)
)
{
return
SplitNodeResult
(
NS_ERROR_FAILURE
)
;
}
if
(
NS_WARN_IF
(
atStartOfRightNode
.
GetContainer
(
)
!
=
&
aMostAncestorToSplit
&
&
!
atStartOfRightNode
.
GetContainer
(
)
-
>
GetParent
(
)
)
)
{
return
SplitNodeResult
(
NS_ERROR_FAILURE
)
;
}
nsIContent
*
currentRightNode
=
atStartOfRightNode
.
GetContainerAsContent
(
)
;
if
(
(
aSplitAtEdges
=
=
SplitAtEdges
:
:
eAllowToCreateEmptyContainer
&
&
!
atStartOfRightNode
.
GetContainerAsText
(
)
)
|
|
(
!
atStartOfRightNode
.
IsStartOfContainer
(
)
&
&
!
atStartOfRightNode
.
IsEndOfContainer
(
)
)
)
{
ErrorResult
error
;
nsCOMPtr
<
nsIContent
>
newLeftNode
=
SplitNodeWithTransaction
(
atStartOfRightNode
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
return
SplitNodeResult
(
error
.
StealNSResult
(
)
)
;
}
if
(
currentRightNode
=
=
&
aMostAncestorToSplit
)
{
return
SplitNodeResult
(
newLeftNode
&
aMostAncestorToSplit
)
;
}
atStartOfRightNode
.
Set
(
currentRightNode
)
;
}
else
if
(
!
atStartOfRightNode
.
IsStartOfContainer
(
)
)
{
if
(
currentRightNode
=
=
&
aMostAncestorToSplit
)
{
return
SplitNodeResult
(
&
aMostAncestorToSplit
nullptr
)
;
}
atStartOfRightNode
.
Set
(
currentRightNode
)
;
DebugOnly
<
bool
>
advanced
=
atStartOfRightNode
.
AdvanceOffset
(
)
;
NS_WARNING_ASSERTION
(
advanced
"
Failed
to
advance
offset
after
current
node
"
)
;
}
else
{
if
(
currentRightNode
=
=
&
aMostAncestorToSplit
)
{
return
SplitNodeResult
(
nullptr
&
aMostAncestorToSplit
)
;
}
atStartOfRightNode
.
Set
(
currentRightNode
)
;
}
}
return
SplitNodeResult
(
NS_ERROR_FAILURE
)
;
}
EditorDOMPoint
EditorBase
:
:
JoinNodesDeepWithTransaction
(
nsIContent
&
aLeftNode
nsIContent
&
aRightNode
)
{
nsCOMPtr
<
nsIContent
>
leftNodeToJoin
=
&
aLeftNode
;
nsCOMPtr
<
nsIContent
>
rightNodeToJoin
=
&
aRightNode
;
nsCOMPtr
<
nsINode
>
parentNode
=
aRightNode
.
GetParentNode
(
)
;
EditorDOMPoint
ret
;
while
(
leftNodeToJoin
&
&
rightNodeToJoin
&
&
parentNode
&
&
AreNodesSameType
(
*
leftNodeToJoin
*
rightNodeToJoin
)
)
{
uint32_t
length
=
leftNodeToJoin
-
>
Length
(
)
;
nsresult
rv
=
JoinNodesWithTransaction
(
*
leftNodeToJoin
*
rightNodeToJoin
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorDOMPoint
(
)
;
}
ret
.
Set
(
rightNodeToJoin
length
)
;
if
(
parentNode
-
>
GetAsText
(
)
)
{
return
ret
;
}
parentNode
=
rightNodeToJoin
;
rightNodeToJoin
=
parentNode
-
>
GetChildAt_Deprecated
(
length
)
;
if
(
rightNodeToJoin
)
{
leftNodeToJoin
=
rightNodeToJoin
-
>
GetPreviousSibling
(
)
;
}
else
{
leftNodeToJoin
=
nullptr
;
}
while
(
leftNodeToJoin
&
&
!
IsEditable
(
leftNodeToJoin
)
)
{
leftNodeToJoin
=
leftNodeToJoin
-
>
GetPreviousSibling
(
)
;
}
if
(
!
leftNodeToJoin
)
{
return
ret
;
}
while
(
rightNodeToJoin
&
&
!
IsEditable
(
rightNodeToJoin
)
)
{
rightNodeToJoin
=
rightNodeToJoin
-
>
GetNextSibling
(
)
;
}
if
(
!
rightNodeToJoin
)
{
return
ret
;
}
}
if
(
NS_WARN_IF
(
!
ret
.
IsSet
(
)
)
)
{
return
EditorDOMPoint
(
)
;
}
return
ret
;
}
nsresult
EditorBase
:
:
EnsureNoPaddingBRElementForEmptyEditor
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
if
(
!
mPaddingBRElementForEmptyEditor
)
{
return
NS_OK
;
}
RefPtr
<
HTMLBRElement
>
paddingBRElement
(
std
:
:
move
(
mPaddingBRElementForEmptyEditor
)
)
;
nsresult
rv
=
DeleteNodeWithTransaction
(
*
paddingBRElement
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
return
rv
;
}
nsresult
EditorBase
:
:
MaybeCreatePaddingBRElementForEmptyEditor
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
if
(
mPaddingBRElementForEmptyEditor
)
{
return
NS_OK
;
}
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eCreatePaddingBRElementForEmptyEditor
nsIEditor
:
:
eNone
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
RefPtr
<
Element
>
rootElement
=
GetRoot
(
)
;
if
(
!
rootElement
)
{
return
NS_OK
;
}
bool
isRootEditable
=
IsEditable
(
rootElement
)
;
for
(
nsIContent
*
rootChild
=
rootElement
-
>
GetFirstChild
(
)
;
rootChild
;
rootChild
=
rootChild
-
>
GetNextSibling
(
)
)
{
if
(
EditorBase
:
:
IsPaddingBRElementForEmptyEditor
(
*
rootChild
)
|
|
!
isRootEditable
|
|
IsEditable
(
rootChild
)
|
|
IsBlockNode
(
rootChild
)
)
{
return
NS_OK
;
}
}
if
(
!
IsModifiableNode
(
*
rootElement
)
)
{
return
NS_OK
;
}
RefPtr
<
Element
>
newBrElement
=
CreateHTMLContent
(
nsGkAtoms
:
:
br
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
if
(
NS_WARN_IF
(
!
newBrElement
)
)
{
return
NS_ERROR_FAILURE
;
}
mPaddingBRElementForEmptyEditor
=
static_cast
<
HTMLBRElement
*
>
(
newBrElement
.
get
(
)
)
;
newBrElement
-
>
SetFlags
(
NS_PADDING_FOR_EMPTY_EDITOR
)
;
nsresult
rv
=
InsertNodeWithTransaction
(
*
newBrElement
EditorDOMPoint
(
rootElement
0
)
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
IgnoredErrorResult
error
;
SelectionRefPtr
(
)
-
>
Collapse
(
EditorRawDOMPoint
(
rootElement
0
)
error
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
NS_WARNING_ASSERTION
(
!
error
.
Failed
(
)
"
Failed
to
collapse
selection
at
start
of
the
root
element
"
)
;
return
NS_OK
;
}
void
EditorBase
:
:
BeginUpdateViewBatch
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
mUpdateCount
>
=
0
"
bad
state
"
)
;
if
(
!
mUpdateCount
)
{
SelectionRefPtr
(
)
-
>
StartBatchChanges
(
)
;
}
mUpdateCount
+
+
;
}
void
EditorBase
:
:
EndUpdateViewBatch
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
mUpdateCount
>
0
"
bad
state
"
)
;
if
(
mUpdateCount
<
=
0
)
{
mUpdateCount
=
0
;
return
;
}
if
(
-
-
mUpdateCount
)
{
return
;
}
SelectionRefPtr
(
)
-
>
EndBatchChanges
(
)
;
HTMLEditor
*
htmlEditor
=
AsHTMLEditor
(
)
;
if
(
!
htmlEditor
)
{
return
;
}
DebugOnly
<
nsresult
>
rv
=
MOZ_KnownLive
(
htmlEditor
)
-
>
RefreshEditingUI
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
RefreshEditingUI
(
)
failed
"
)
;
}
TextComposition
*
EditorBase
:
:
GetComposition
(
)
const
{
return
mComposition
;
}
EditorRawDOMPoint
EditorBase
:
:
GetCompositionStartPoint
(
)
const
{
return
mComposition
?
EditorRawDOMPoint
(
mComposition
-
>
GetStartRef
(
)
)
:
EditorRawDOMPoint
(
)
;
}
EditorRawDOMPoint
EditorBase
:
:
GetCompositionEndPoint
(
)
const
{
return
mComposition
?
EditorRawDOMPoint
(
mComposition
-
>
GetEndRef
(
)
)
:
EditorRawDOMPoint
(
)
;
}
bool
EditorBase
:
:
IsIMEComposing
(
)
const
{
return
mComposition
&
&
mComposition
-
>
IsComposing
(
)
;
}
bool
EditorBase
:
:
ShouldHandleIMEComposition
(
)
const
{
return
mComposition
&
&
mDidPostCreate
;
}
void
EditorBase
:
:
DoAfterDoTransaction
(
nsITransaction
*
aTxn
)
{
bool
isTransientTransaction
;
MOZ_ALWAYS_SUCCEEDS
(
aTxn
-
>
GetIsTransient
(
&
isTransientTransaction
)
)
;
if
(
!
isTransientTransaction
)
{
int32_t
modCount
;
GetModificationCount
(
&
modCount
)
;
if
(
modCount
<
0
)
{
modCount
=
-
modCount
;
}
MOZ_ALWAYS_SUCCEEDS
(
IncrementModificationCount
(
1
)
)
;
}
}
void
EditorBase
:
:
DoAfterUndoTransaction
(
)
{
MOZ_ALWAYS_SUCCEEDS
(
IncrementModificationCount
(
-
1
)
)
;
}
void
EditorBase
:
:
DoAfterRedoTransaction
(
)
{
MOZ_ALWAYS_SUCCEEDS
(
IncrementModificationCount
(
1
)
)
;
}
already_AddRefed
<
EditAggregateTransaction
>
EditorBase
:
:
CreateTxnForDeleteSelection
(
EDirection
aAction
nsINode
*
*
aRemovingNode
int32_t
*
aOffset
int32_t
*
aLength
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
if
(
NS_WARN_IF
(
SelectionRefPtr
(
)
-
>
IsCollapsed
(
)
&
&
aAction
=
=
eNone
)
)
{
return
nullptr
;
}
RefPtr
<
EditAggregateTransaction
>
aggregateTransaction
=
EditAggregateTransaction
:
:
Create
(
)
;
for
(
uint32_t
rangeIdx
=
0
;
rangeIdx
<
SelectionRefPtr
(
)
-
>
RangeCount
(
)
;
+
+
rangeIdx
)
{
RefPtr
<
nsRange
>
range
=
SelectionRefPtr
(
)
-
>
GetRangeAt
(
rangeIdx
)
;
if
(
NS_WARN_IF
(
!
range
)
)
{
return
nullptr
;
}
if
(
!
range
-
>
Collapsed
(
)
)
{
RefPtr
<
DeleteRangeTransaction
>
deleteRangeTransaction
=
DeleteRangeTransaction
:
:
Create
(
*
this
*
range
)
;
aggregateTransaction
-
>
AppendChild
(
deleteRangeTransaction
)
;
}
else
if
(
aAction
!
=
eNone
)
{
RefPtr
<
EditTransactionBase
>
deleteRangeTransaction
=
CreateTxnForDeleteRange
(
range
aAction
aRemovingNode
aOffset
aLength
)
;
if
(
NS_WARN_IF
(
!
deleteRangeTransaction
)
)
{
return
nullptr
;
}
aggregateTransaction
-
>
AppendChild
(
deleteRangeTransaction
)
;
}
}
return
aggregateTransaction
.
forget
(
)
;
}
already_AddRefed
<
EditTransactionBase
>
EditorBase
:
:
CreateTxnForDeleteRange
(
nsRange
*
aRangeToDelete
EDirection
aAction
nsINode
*
*
aRemovingNode
int32_t
*
aOffset
int32_t
*
aLength
)
{
MOZ_ASSERT
(
aAction
!
=
eNone
)
;
nsCOMPtr
<
nsINode
>
node
=
aRangeToDelete
-
>
GetStartContainer
(
)
;
if
(
NS_WARN_IF
(
!
node
)
)
{
return
nullptr
;
}
nsIContent
*
child
=
aRangeToDelete
-
>
GetChildAtStartOffset
(
)
;
int32_t
offset
=
aRangeToDelete
-
>
StartOffset
(
)
;
uint32_t
count
=
node
-
>
Length
(
)
;
bool
isFirst
=
!
offset
;
bool
isLast
=
(
count
=
=
(
uint32_t
)
offset
)
;
if
(
aAction
=
=
ePrevious
&
&
isFirst
)
{
nsCOMPtr
<
nsIContent
>
priorNode
=
GetPreviousEditableNode
(
*
node
)
;
if
(
NS_WARN_IF
(
!
priorNode
)
)
{
return
nullptr
;
}
if
(
RefPtr
<
Text
>
priorNodeAsText
=
Text
:
:
FromNode
(
priorNode
)
)
{
uint32_t
length
=
priorNode
-
>
Length
(
)
;
if
(
NS_WARN_IF
(
!
length
)
)
{
return
nullptr
;
}
RefPtr
<
DeleteTextTransaction
>
deleteTextTransaction
=
DeleteTextTransaction
:
:
MaybeCreateForPreviousCharacter
(
*
this
*
priorNodeAsText
length
)
;
if
(
NS_WARN_IF
(
!
deleteTextTransaction
)
)
{
return
nullptr
;
}
*
aOffset
=
deleteTextTransaction
-
>
Offset
(
)
;
*
aLength
=
deleteTextTransaction
-
>
LengthToDelete
(
)
;
priorNode
.
forget
(
aRemovingNode
)
;
return
deleteTextTransaction
.
forget
(
)
;
}
RefPtr
<
DeleteNodeTransaction
>
deleteNodeTransaction
=
DeleteNodeTransaction
:
:
MaybeCreate
(
*
this
*
priorNode
)
;
if
(
NS_WARN_IF
(
!
deleteNodeTransaction
)
)
{
return
nullptr
;
}
priorNode
.
forget
(
aRemovingNode
)
;
return
deleteNodeTransaction
.
forget
(
)
;
}
if
(
aAction
=
=
eNext
&
&
isLast
)
{
nsCOMPtr
<
nsIContent
>
nextNode
=
GetNextEditableNode
(
*
node
)
;
if
(
NS_WARN_IF
(
!
nextNode
)
)
{
return
nullptr
;
}
if
(
RefPtr
<
Text
>
nextNodeAsText
=
Text
:
:
FromNode
(
nextNode
)
)
{
uint32_t
length
=
nextNode
-
>
Length
(
)
;
if
(
NS_WARN_IF
(
!
length
)
)
{
return
nullptr
;
}
RefPtr
<
DeleteTextTransaction
>
deleteTextTransaction
=
DeleteTextTransaction
:
:
MaybeCreateForNextCharacter
(
*
this
*
nextNodeAsText
0
)
;
if
(
NS_WARN_IF
(
!
deleteTextTransaction
)
)
{
return
nullptr
;
}
*
aOffset
=
deleteTextTransaction
-
>
Offset
(
)
;
*
aLength
=
deleteTextTransaction
-
>
LengthToDelete
(
)
;
nextNode
.
forget
(
aRemovingNode
)
;
return
deleteTextTransaction
.
forget
(
)
;
}
RefPtr
<
DeleteNodeTransaction
>
deleteNodeTransaction
=
DeleteNodeTransaction
:
:
MaybeCreate
(
*
this
*
nextNode
)
;
if
(
NS_WARN_IF
(
!
deleteNodeTransaction
)
)
{
return
nullptr
;
}
nextNode
.
forget
(
aRemovingNode
)
;
return
deleteNodeTransaction
.
forget
(
)
;
}
if
(
RefPtr
<
Text
>
nodeAsText
=
Text
:
:
FromNode
(
node
)
)
{
if
(
NS_WARN_IF
(
aAction
!
=
ePrevious
&
&
aAction
!
=
eNext
)
)
{
return
nullptr
;
}
RefPtr
<
DeleteTextTransaction
>
deleteTextTransaction
=
aAction
=
=
ePrevious
?
DeleteTextTransaction
:
:
MaybeCreateForPreviousCharacter
(
*
this
*
nodeAsText
offset
)
:
DeleteTextTransaction
:
:
MaybeCreateForNextCharacter
(
*
this
*
nodeAsText
offset
)
;
if
(
NS_WARN_IF
(
!
deleteTextTransaction
)
)
{
return
nullptr
;
}
*
aOffset
=
deleteTextTransaction
-
>
Offset
(
)
;
*
aLength
=
deleteTextTransaction
-
>
LengthToDelete
(
)
;
node
.
forget
(
aRemovingNode
)
;
return
deleteTextTransaction
.
forget
(
)
;
}
nsCOMPtr
<
nsINode
>
selectedNode
;
if
(
aAction
=
=
ePrevious
)
{
selectedNode
=
GetPreviousEditableNode
(
EditorRawDOMPoint
(
node
child
offset
)
)
;
}
else
if
(
aAction
=
=
eNext
)
{
selectedNode
=
GetNextEditableNode
(
EditorRawDOMPoint
(
node
child
offset
)
)
;
}
while
(
selectedNode
&
&
selectedNode
-
>
IsCharacterData
(
)
&
&
!
selectedNode
-
>
Length
(
)
)
{
if
(
aAction
=
=
ePrevious
)
{
selectedNode
=
GetPreviousEditableNode
(
*
selectedNode
)
;
}
else
if
(
aAction
=
=
eNext
)
{
selectedNode
=
GetNextEditableNode
(
*
selectedNode
)
;
}
}
if
(
NS_WARN_IF
(
!
selectedNode
)
)
{
return
nullptr
;
}
if
(
RefPtr
<
Text
>
selectedNodeAsText
=
Text
:
:
FromNode
(
selectedNode
)
)
{
if
(
NS_WARN_IF
(
aAction
!
=
ePrevious
&
&
aAction
!
=
eNext
)
)
{
return
nullptr
;
}
uint32_t
position
=
0
;
if
(
aAction
=
=
ePrevious
)
{
position
=
selectedNode
-
>
Length
(
)
;
}
RefPtr
<
DeleteTextTransaction
>
deleteTextTransaction
=
aAction
=
=
ePrevious
?
DeleteTextTransaction
:
:
MaybeCreateForPreviousCharacter
(
*
this
*
selectedNodeAsText
position
)
:
DeleteTextTransaction
:
:
MaybeCreateForNextCharacter
(
*
this
*
selectedNodeAsText
position
)
;
if
(
NS_WARN_IF
(
!
deleteTextTransaction
)
)
{
return
nullptr
;
}
*
aOffset
=
deleteTextTransaction
-
>
Offset
(
)
;
*
aLength
=
deleteTextTransaction
-
>
LengthToDelete
(
)
;
selectedNode
.
forget
(
aRemovingNode
)
;
return
deleteTextTransaction
.
forget
(
)
;
}
RefPtr
<
DeleteNodeTransaction
>
deleteNodeTransaction
=
DeleteNodeTransaction
:
:
MaybeCreate
(
*
this
*
selectedNode
)
;
if
(
NS_WARN_IF
(
!
deleteNodeTransaction
)
)
{
return
nullptr
;
}
selectedNode
.
forget
(
aRemovingNode
)
;
return
deleteNodeTransaction
.
forget
(
)
;
}
nsresult
EditorBase
:
:
CreateRange
(
nsINode
*
aStartContainer
int32_t
aStartOffset
nsINode
*
aEndContainer
int32_t
aEndOffset
nsRange
*
*
aRange
)
{
RefPtr
<
nsRange
>
range
=
nsRange
:
:
Create
(
aStartContainer
aStartOffset
aEndContainer
aEndOffset
IgnoreErrors
(
)
)
;
if
(
NS_WARN_IF
(
!
range
)
)
{
return
NS_ERROR_FAILURE
;
}
range
.
forget
(
aRange
)
;
return
NS_OK
;
}
nsresult
EditorBase
:
:
AppendNodeToSelectionAsRange
(
nsINode
*
aNode
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
if
(
NS_WARN_IF
(
!
aNode
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsCOMPtr
<
nsINode
>
parentNode
=
aNode
-
>
GetParentNode
(
)
;
if
(
NS_WARN_IF
(
!
parentNode
)
)
{
return
NS_ERROR_FAILURE
;
}
int32_t
offset
=
GetChildOffset
(
aNode
parentNode
)
;
RefPtr
<
nsRange
>
range
;
nsresult
rv
=
CreateRange
(
parentNode
offset
parentNode
offset
+
1
getter_AddRefs
(
range
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
NS_WARN_IF
(
!
range
)
)
{
return
NS_ERROR_FAILURE
;
}
ErrorResult
err
;
SelectionRefPtr
(
)
-
>
AddRangeAndSelectFramesAndNotifyListeners
(
*
range
err
)
;
NS_WARNING_ASSERTION
(
!
err
.
Failed
(
)
"
Failed
to
add
range
to
Selection
"
)
;
return
err
.
StealNSResult
(
)
;
}
nsresult
EditorBase
:
:
ClearSelection
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
ErrorResult
rv
;
SelectionRefPtr
(
)
-
>
RemoveAllRanges
(
rv
)
;
NS_WARNING_ASSERTION
(
!
rv
.
Failed
(
)
"
Failed
to
remove
all
ranges
from
Selection
"
)
;
return
rv
.
StealNSResult
(
)
;
}
already_AddRefed
<
Element
>
EditorBase
:
:
CreateHTMLContent
(
const
nsAtom
*
aTag
)
{
MOZ_ASSERT
(
aTag
)
;
RefPtr
<
Document
>
doc
=
GetDocument
(
)
;
if
(
!
doc
)
{
return
nullptr
;
}
if
(
aTag
=
=
nsGkAtoms
:
:
_empty
)
{
NS_ERROR
(
"
Don
'
t
pass
an
empty
tag
to
EditorBase
:
:
CreateHTMLContent
"
"
check
caller
.
"
)
;
return
nullptr
;
}
return
doc
-
>
CreateElem
(
nsDependentAtomString
(
aTag
)
nullptr
kNameSpaceID_XHTML
)
;
}
already_AddRefed
<
nsTextNode
>
EditorBase
:
:
CreateTextNode
(
const
nsAString
&
aData
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
Document
*
document
=
GetDocument
(
)
;
if
(
NS_WARN_IF
(
!
document
)
)
{
return
nullptr
;
}
RefPtr
<
nsTextNode
>
text
=
document
-
>
CreateEmptyTextNode
(
)
;
text
-
>
MarkAsMaybeModifiedFrequently
(
)
;
if
(
IsPasswordEditor
(
)
)
{
text
-
>
MarkAsMaybeMasked
(
)
;
}
text
-
>
SetText
(
aData
false
)
;
return
text
.
forget
(
)
;
}
NS_IMETHODIMP
EditorBase
:
:
SetAttributeOrEquivalent
(
Element
*
aElement
const
nsAString
&
aAttribute
const
nsAString
&
aValue
bool
aSuppressTransaction
)
{
if
(
NS_WARN_IF
(
!
aElement
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eSetAttribute
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
|
|
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
RefPtr
<
nsAtom
>
attribute
=
NS_Atomize
(
aAttribute
)
;
rv
=
SetAttributeOrEquivalent
(
aElement
attribute
aValue
aSuppressTransaction
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
SetAttributeOrEquivalent
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
NS_IMETHODIMP
EditorBase
:
:
RemoveAttributeOrEquivalent
(
Element
*
aElement
const
nsAString
&
aAttribute
bool
aSuppressTransaction
)
{
if
(
NS_WARN_IF
(
!
aElement
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eRemoveAttribute
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
|
|
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
RefPtr
<
nsAtom
>
attribute
=
NS_Atomize
(
aAttribute
)
;
rv
=
RemoveAttributeOrEquivalent
(
aElement
attribute
aSuppressTransaction
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
RemoveAttributeOrEquivalent
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
nsresult
EditorBase
:
:
HandleKeyPressEvent
(
WidgetKeyboardEvent
*
aKeyboardEvent
)
{
if
(
NS_WARN_IF
(
!
aKeyboardEvent
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
MOZ_ASSERT
(
aKeyboardEvent
-
>
mMessage
=
=
eKeyPress
"
HandleKeyPressEvent
gets
non
-
keypress
event
"
)
;
if
(
IsReadonly
(
)
|
|
IsDisabled
(
)
)
{
if
(
aKeyboardEvent
-
>
mKeyCode
=
=
NS_VK_BACK
)
{
aKeyboardEvent
-
>
PreventDefault
(
)
;
}
return
NS_OK
;
}
switch
(
aKeyboardEvent
-
>
mKeyCode
)
{
case
NS_VK_META
:
case
NS_VK_WIN
:
case
NS_VK_SHIFT
:
case
NS_VK_CONTROL
:
case
NS_VK_ALT
:
aKeyboardEvent
-
>
PreventDefault
(
)
;
return
NS_OK
;
}
return
NS_OK
;
}
nsresult
EditorBase
:
:
HandleInlineSpellCheck
(
const
EditorDOMPoint
&
aPreviouslySelectedStart
const
AbstractRange
*
aRange
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
if
(
!
mInlineSpellChecker
)
{
return
NS_OK
;
}
return
mInlineSpellChecker
-
>
SpellCheckAfterEditorChange
(
GetTopLevelEditSubAction
(
)
*
SelectionRefPtr
(
)
aPreviouslySelectedStart
.
GetContainer
(
)
aPreviouslySelectedStart
.
Offset
(
)
aRange
?
aRange
-
>
GetStartContainer
(
)
:
nullptr
aRange
?
aRange
-
>
StartOffset
(
)
:
0
aRange
?
aRange
-
>
GetEndContainer
(
)
:
nullptr
aRange
?
aRange
-
>
EndOffset
(
)
:
0
)
;
}
Element
*
EditorBase
:
:
FindSelectionRoot
(
nsINode
*
aNode
)
const
{
return
GetRoot
(
)
;
}
void
EditorBase
:
:
InitializeSelectionAncestorLimit
(
nsIContent
&
aAncestorLimit
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
SelectionRefPtr
(
)
-
>
SetAncestorLimiter
(
&
aAncestorLimit
)
;
}
nsresult
EditorBase
:
:
InitializeSelection
(
EventTarget
*
aFocusEventTarget
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
nsCOMPtr
<
nsINode
>
targetNode
=
do_QueryInterface
(
aFocusEventTarget
)
;
if
(
NS_WARN_IF
(
!
targetNode
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsCOMPtr
<
nsIContent
>
selectionRootContent
=
FindSelectionRoot
(
targetNode
)
;
if
(
!
selectionRootContent
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsISelectionController
>
selectionController
=
GetSelectionController
(
)
;
if
(
NS_WARN_IF
(
!
selectionController
)
)
{
return
NS_ERROR_FAILURE
;
}
RefPtr
<
nsCaret
>
caret
=
GetCaret
(
)
;
if
(
NS_WARN_IF
(
!
caret
)
)
{
return
NS_ERROR_FAILURE
;
}
caret
-
>
SetSelection
(
SelectionRefPtr
(
)
)
;
selectionController
-
>
SetCaretReadOnly
(
IsReadonly
(
)
)
;
selectionController
-
>
SetCaretEnabled
(
true
)
;
caret
-
>
SetIgnoreUserModify
(
targetNode
-
>
OwnerDoc
(
)
-
>
HasFlag
(
NODE_IS_EDITABLE
)
)
;
selectionController
-
>
SetDisplaySelection
(
nsISelectionController
:
:
SELECTION_ON
)
;
selectionController
-
>
SetSelectionFlags
(
nsISelectionDisplay
:
:
DISPLAY_ALL
)
;
selectionController
-
>
RepaintSelection
(
nsISelectionController
:
:
SELECTION_NORMAL
)
;
if
(
selectionRootContent
-
>
GetParent
(
)
)
{
InitializeSelectionAncestorLimit
(
*
selectionRootContent
)
;
}
else
{
SelectionRefPtr
(
)
-
>
SetAncestorLimiter
(
nullptr
)
;
}
if
(
mComposition
&
&
mComposition
-
>
IsMovingToNewTextNode
(
)
)
{
nsRange
*
firstRange
=
SelectionRefPtr
(
)
-
>
GetRangeAt
(
0
)
;
if
(
NS_WARN_IF
(
!
firstRange
)
)
{
return
NS_ERROR_FAILURE
;
}
EditorRawDOMPoint
atStartOfFirstRange
(
firstRange
-
>
StartRef
(
)
)
;
EditorRawDOMPoint
betterInsertionPoint
=
FindBetterInsertionPoint
(
atStartOfFirstRange
)
;
Text
*
textNode
=
betterInsertionPoint
.
GetContainerAsText
(
)
;
MOZ_ASSERT
(
textNode
"
There
must
be
text
node
if
composition
string
is
not
empty
"
)
;
if
(
textNode
)
{
MOZ_ASSERT
(
textNode
-
>
Length
(
)
>
=
mComposition
-
>
XPEndOffsetInTextNode
(
)
"
The
text
node
must
be
different
from
the
old
text
node
"
)
;
CompositionTransaction
:
:
SetIMESelection
(
*
this
textNode
mComposition
-
>
XPOffsetInTextNode
(
)
mComposition
-
>
XPLengthInTextNode
(
)
mComposition
-
>
GetRanges
(
)
)
;
}
}
return
NS_OK
;
}
class
RepaintSelectionRunner
final
:
public
Runnable
{
public
:
explicit
RepaintSelectionRunner
(
nsISelectionController
*
aSelectionController
)
:
Runnable
(
"
RepaintSelectionRunner
"
)
mSelectionController
(
aSelectionController
)
{
}
NS_IMETHOD
Run
(
)
override
{
mSelectionController
-
>
RepaintSelection
(
nsISelectionController
:
:
SELECTION_NORMAL
)
;
return
NS_OK
;
}
private
:
nsCOMPtr
<
nsISelectionController
>
mSelectionController
;
}
;
nsresult
EditorBase
:
:
FinalizeSelection
(
)
{
nsCOMPtr
<
nsISelectionController
>
selectionController
=
GetSelectionController
(
)
;
if
(
NS_WARN_IF
(
!
selectionController
)
)
{
return
NS_ERROR_FAILURE
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
SelectionRefPtr
(
)
-
>
SetAncestorLimiter
(
nullptr
)
;
if
(
NS_WARN_IF
(
!
GetPresShell
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
if
(
RefPtr
<
nsCaret
>
caret
=
GetCaret
(
)
)
{
caret
-
>
SetIgnoreUserModify
(
true
)
;
selectionController
-
>
SetCaretEnabled
(
false
)
;
}
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
NS_WARN_IF
(
!
fm
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
fm
-
>
UpdateCaretForCaretBrowsingMode
(
)
;
if
(
!
HasIndependentSelection
(
)
)
{
RefPtr
<
Document
>
doc
=
GetDocument
(
)
;
ErrorResult
ret
;
if
(
!
doc
|
|
!
doc
-
>
HasFocus
(
ret
)
)
{
selectionController
-
>
SetDisplaySelection
(
nsISelectionController
:
:
SELECTION_DISABLED
)
;
}
else
{
selectionController
-
>
SetDisplaySelection
(
nsISelectionController
:
:
SELECTION_ON
)
;
}
}
else
if
(
IsFormWidget
(
)
|
|
IsPasswordEditor
(
)
|
|
IsReadonly
(
)
|
|
IsDisabled
(
)
|
|
IsInputFiltered
(
)
)
{
selectionController
-
>
SetDisplaySelection
(
nsISelectionController
:
:
SELECTION_HIDDEN
)
;
}
else
{
selectionController
-
>
SetDisplaySelection
(
nsISelectionController
:
:
SELECTION_DISABLED
)
;
}
nsContentUtils
:
:
AddScriptRunner
(
new
RepaintSelectionRunner
(
selectionController
)
)
;
return
NS_OK
;
}
void
EditorBase
:
:
ReinitializeSelection
(
Element
&
aElement
)
{
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
return
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
;
}
OnFocus
(
&
aElement
)
;
SyncRealTimeSpell
(
)
;
nsPresContext
*
context
=
GetPresContext
(
)
;
if
(
NS_WARN_IF
(
!
context
)
)
{
return
;
}
nsCOMPtr
<
nsIContent
>
focusedContent
=
GetFocusedContentForIME
(
)
;
IMEStateManager
:
:
OnFocusInEditor
(
context
focusedContent
*
this
)
;
}
Element
*
EditorBase
:
:
GetEditorRoot
(
)
const
{
return
GetRoot
(
)
;
}
Element
*
EditorBase
:
:
GetExposedRoot
(
)
const
{
Element
*
root
=
GetRoot
(
)
;
if
(
!
root
|
|
!
root
-
>
IsInNativeAnonymousSubtree
(
)
)
{
return
root
;
}
return
Element
:
:
FromNodeOrNull
(
root
-
>
GetClosestNativeAnonymousSubtreeRootParent
(
)
)
;
}
nsresult
EditorBase
:
:
DetermineCurrentDirection
(
)
{
nsIContent
*
rootElement
=
GetExposedRoot
(
)
;
NS_ENSURE_TRUE
(
rootElement
NS_ERROR_FAILURE
)
;
if
(
!
IsRightToLeft
(
)
&
&
!
IsLeftToRight
(
)
)
{
nsIFrame
*
frame
=
rootElement
-
>
GetPrimaryFrame
(
)
;
NS_ENSURE_TRUE
(
frame
NS_ERROR_FAILURE
)
;
if
(
frame
-
>
StyleVisibility
(
)
-
>
mDirection
=
=
StyleDirection
:
:
Rtl
)
{
mFlags
|
=
nsIEditor
:
:
eEditorRightToLeft
;
}
else
{
mFlags
|
=
nsIEditor
:
:
eEditorLeftToRight
;
}
}
return
NS_OK
;
}
nsresult
EditorBase
:
:
ToggleTextDirectionAsAction
(
nsIPrincipal
*
aPrincipal
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eSetTextDirection
aPrincipal
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsresult
rv
=
DetermineCurrentDirection
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
MOZ_ASSERT
(
IsRightToLeft
(
)
|
|
IsLeftToRight
(
)
)
;
TextDirection
newDirection
=
IsRightToLeft
(
)
?
TextDirection
:
:
eLTR
:
TextDirection
:
:
eRTL
;
editActionData
.
SetData
(
IsRightToLeft
(
)
?
NS_LITERAL_STRING
(
"
ltr
"
)
:
NS_LITERAL_STRING
(
"
rtl
"
)
)
;
rv
=
editActionData
.
MaybeDispatchBeforeInputEvent
(
)
;
if
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
|
|
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
rv
=
SetTextDirectionTo
(
newDirection
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
DispatchInputEvent
(
)
;
return
NS_OK
;
}
void
EditorBase
:
:
SwitchTextDirectionTo
(
TextDirection
aTextDirection
)
{
MOZ_ASSERT
(
aTextDirection
=
=
TextDirection
:
:
eLTR
|
|
aTextDirection
=
=
TextDirection
:
:
eRTL
)
;
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eSetTextDirection
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
;
}
nsresult
rv
=
DetermineCurrentDirection
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
editActionData
.
SetData
(
aTextDirection
=
=
TextDirection
:
:
eLTR
?
NS_LITERAL_STRING
(
"
ltr
"
)
:
NS_LITERAL_STRING
(
"
rtl
"
)
)
;
rv
=
editActionData
.
MaybeDispatchBeforeInputEvent
(
)
;
if
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
|
|
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
if
(
(
aTextDirection
=
=
TextDirection
:
:
eLTR
&
&
IsRightToLeft
(
)
)
|
|
(
aTextDirection
=
=
TextDirection
:
:
eRTL
&
&
IsLeftToRight
(
)
)
)
{
if
(
NS_WARN_IF
(
NS_FAILED
(
SetTextDirectionTo
(
aTextDirection
)
)
)
)
{
return
;
}
}
DispatchInputEvent
(
)
;
}
nsresult
EditorBase
:
:
SetTextDirectionTo
(
TextDirection
aTextDirection
)
{
Element
*
rootElement
=
GetExposedRoot
(
)
;
if
(
aTextDirection
=
=
TextDirection
:
:
eLTR
)
{
NS_ASSERTION
(
!
IsLeftToRight
(
)
"
Unexpected
mutually
exclusive
flag
"
)
;
mFlags
&
=
~
nsIEditor
:
:
eEditorRightToLeft
;
mFlags
|
=
nsIEditor
:
:
eEditorLeftToRight
;
nsresult
rv
=
rootElement
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
dir
NS_LITERAL_STRING
(
"
ltr
"
)
true
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
if
(
aTextDirection
=
=
TextDirection
:
:
eRTL
)
{
NS_ASSERTION
(
!
IsRightToLeft
(
)
"
Unexpected
mutually
exclusive
flag
"
)
;
mFlags
|
=
nsIEditor
:
:
eEditorRightToLeft
;
mFlags
&
=
~
nsIEditor
:
:
eEditorLeftToRight
;
nsresult
rv
=
rootElement
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
dir
NS_LITERAL_STRING
(
"
rtl
"
)
true
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
return
NS_OK
;
}
bool
EditorBase
:
:
IsModifiableNode
(
const
nsINode
&
aNode
)
const
{
return
!
AsHTMLEditor
(
)
|
|
aNode
.
IsEditable
(
)
;
}
nsIContent
*
EditorBase
:
:
GetFocusedContent
(
)
{
EventTarget
*
piTarget
=
GetDOMEventTarget
(
)
;
if
(
!
piTarget
)
{
return
nullptr
;
}
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
NS_ENSURE_TRUE
(
fm
nullptr
)
;
nsIContent
*
content
=
fm
-
>
GetFocusedElement
(
)
;
MOZ_ASSERT
(
(
content
=
=
piTarget
)
=
=
SameCOMIdentity
(
content
piTarget
)
)
;
return
(
content
=
=
piTarget
)
?
content
:
nullptr
;
}
already_AddRefed
<
nsIContent
>
EditorBase
:
:
GetFocusedContentForIME
(
)
{
nsCOMPtr
<
nsIContent
>
content
=
GetFocusedContent
(
)
;
return
content
.
forget
(
)
;
}
bool
EditorBase
:
:
IsActiveInDOMWindow
(
)
{
EventTarget
*
piTarget
=
GetDOMEventTarget
(
)
;
if
(
!
piTarget
)
{
return
false
;
}
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
NS_ENSURE_TRUE
(
fm
false
)
;
RefPtr
<
Document
>
document
=
GetDocument
(
)
;
if
(
NS_WARN_IF
(
!
document
)
)
{
return
false
;
}
nsPIDOMWindowOuter
*
ourWindow
=
document
-
>
GetWindow
(
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
win
;
nsIContent
*
content
=
nsFocusManager
:
:
GetFocusedDescendant
(
ourWindow
nsFocusManager
:
:
eOnlyCurrentWindow
getter_AddRefs
(
win
)
)
;
return
SameCOMIdentity
(
content
piTarget
)
;
}
bool
EditorBase
:
:
IsAcceptableInputEvent
(
WidgetGUIEvent
*
aGUIEvent
)
{
if
(
NS_WARN_IF
(
!
aGUIEvent
)
)
{
return
false
;
}
if
(
aGUIEvent
-
>
IsUsingCoordinates
(
)
)
{
nsIContent
*
focusedContent
=
GetFocusedContent
(
)
;
if
(
!
focusedContent
)
{
return
false
;
}
}
bool
needsWidget
=
false
;
switch
(
aGUIEvent
-
>
mMessage
)
{
case
eUnidentifiedEvent
:
return
false
;
case
eCompositionStart
:
case
eCompositionEnd
:
case
eCompositionUpdate
:
case
eCompositionChange
:
case
eCompositionCommitAsIs
:
if
(
!
aGUIEvent
-
>
AsCompositionEvent
(
)
)
{
return
false
;
}
needsWidget
=
true
;
break
;
default
:
break
;
}
if
(
needsWidget
&
&
!
aGUIEvent
-
>
mWidget
)
{
return
false
;
}
if
(
aGUIEvent
-
>
IsTrusted
(
)
)
{
return
true
;
}
if
(
aGUIEvent
-
>
AsMouseEventBase
(
)
)
{
return
false
;
}
return
IsActiveInDOMWindow
(
)
;
}
void
EditorBase
:
:
OnFocus
(
EventTarget
*
aFocusEventTarget
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eNotEditing
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
;
}
InitializeSelection
(
aFocusEventTarget
)
;
mSpellCheckerDictionaryUpdated
=
false
;
if
(
mInlineSpellChecker
&
&
CanEnableSpellCheck
(
)
)
{
mInlineSpellChecker
-
>
UpdateCurrentDictionary
(
)
;
mSpellCheckerDictionaryUpdated
=
true
;
}
}
void
EditorBase
:
:
HideCaret
(
bool
aHide
)
{
if
(
mHidingCaret
=
=
aHide
)
{
return
;
}
RefPtr
<
nsCaret
>
caret
=
GetCaret
(
)
;
if
(
NS_WARN_IF
(
!
caret
)
)
{
return
;
}
mHidingCaret
=
aHide
;
if
(
aHide
)
{
caret
-
>
AddForceHide
(
)
;
}
else
{
caret
-
>
RemoveForceHide
(
)
;
}
}
NS_IMETHODIMP
EditorBase
:
:
Unmask
(
uint32_t
aStart
int64_t
aEnd
uint32_t
aTimeout
uint8_t
aArgc
)
{
if
(
NS_WARN_IF
(
!
IsPasswordEditor
(
)
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
NS_WARN_IF
(
aArgc
>
=
1
&
&
aStart
=
=
UINT32_MAX
)
|
|
NS_WARN_IF
(
aArgc
>
=
2
&
&
aEnd
=
=
0
)
|
|
NS_WARN_IF
(
aArgc
>
=
2
&
&
aEnd
>
0
&
&
aStart
>
=
aEnd
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eHidePassword
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
uint32_t
start
=
aArgc
<
1
?
0
:
aStart
;
uint32_t
length
=
aArgc
<
2
|
|
aEnd
<
0
?
UINT32_MAX
:
aEnd
-
start
;
uint32_t
timeout
=
aArgc
<
3
?
0
:
aTimeout
;
nsresult
rv
=
MOZ_KnownLive
(
AsTextEditor
(
)
)
-
>
SetUnmaskRangeAndNotify
(
start
length
timeout
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
if
(
RefPtr
<
PresShell
>
presShell
=
GetPresShell
(
)
)
{
presShell
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
Mask
(
)
{
if
(
NS_WARN_IF
(
!
IsPasswordEditor
(
)
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eHidePassword
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsresult
rv
=
MOZ_KnownLive
(
AsTextEditor
(
)
)
-
>
MaskAllCharactersAndNotify
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
if
(
RefPtr
<
PresShell
>
presShell
=
GetPresShell
(
)
)
{
presShell
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetUnmaskedStart
(
uint32_t
*
aResult
)
{
if
(
NS_WARN_IF
(
!
IsPasswordEditor
(
)
)
)
{
*
aResult
=
0
;
return
NS_ERROR_NOT_AVAILABLE
;
}
*
aResult
=
AsTextEditor
(
)
-
>
IsAllMasked
(
)
?
0
:
AsTextEditor
(
)
-
>
UnmaskedStart
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetUnmaskedEnd
(
uint32_t
*
aResult
)
{
if
(
NS_WARN_IF
(
!
IsPasswordEditor
(
)
)
)
{
*
aResult
=
0
;
return
NS_ERROR_NOT_AVAILABLE
;
}
*
aResult
=
AsTextEditor
(
)
-
>
IsAllMasked
(
)
?
0
:
AsTextEditor
(
)
-
>
UnmaskedEnd
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetAutoMaskingEnabled
(
bool
*
aResult
)
{
if
(
NS_WARN_IF
(
!
IsPasswordEditor
(
)
)
)
{
*
aResult
=
false
;
return
NS_ERROR_NOT_AVAILABLE
;
}
*
aResult
=
AsTextEditor
(
)
-
>
IsMaskingPassword
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetPasswordMask
(
nsAString
&
aPasswordMask
)
{
aPasswordMask
.
Assign
(
TextEditor
:
:
PasswordMask
(
)
)
;
return
NS_OK
;
}
template
<
typename
PT
typename
CT
>
EditActionResult
EditorBase
:
:
SetCaretBidiLevelForDeletion
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPointAtCaret
nsIEditor
:
:
EDirection
aDirectionAndAmount
)
const
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
nsPresContext
*
presContext
=
GetPresContext
(
)
;
if
(
NS_WARN_IF
(
!
presContext
)
)
{
return
EditActionResult
(
NS_ERROR_FAILURE
)
;
}
if
(
!
presContext
-
>
BidiEnabled
(
)
)
{
return
EditActionIgnored
(
)
;
}
if
(
!
aPointAtCaret
.
GetContainerAsContent
(
)
)
{
return
EditActionResult
(
NS_ERROR_FAILURE
)
;
}
RefPtr
<
nsFrameSelection
>
frameSelection
=
SelectionRefPtr
(
)
-
>
GetFrameSelection
(
)
;
if
(
NS_WARN_IF
(
!
frameSelection
)
)
{
return
EditActionResult
(
NS_ERROR_FAILURE
)
;
}
nsPrevNextBidiLevels
levels
=
frameSelection
-
>
GetPrevNextBidiLevels
(
aPointAtCaret
.
GetContainerAsContent
(
)
aPointAtCaret
.
Offset
(
)
true
)
;
nsBidiLevel
levelBefore
=
levels
.
mLevelBefore
;
nsBidiLevel
levelAfter
=
levels
.
mLevelAfter
;
nsBidiLevel
currentCaretLevel
=
frameSelection
-
>
GetCaretBidiLevel
(
)
;
nsBidiLevel
levelOfDeletion
;
levelOfDeletion
=
(
nsIEditor
:
:
eNext
=
=
aDirectionAndAmount
|
|
nsIEditor
:
:
eNextWord
=
=
aDirectionAndAmount
)
?
levelAfter
:
levelBefore
;
if
(
currentCaretLevel
=
=
levelOfDeletion
)
{
return
EditActionIgnored
(
)
;
}
frameSelection
-
>
SetCaretBidiLevel
(
levelOfDeletion
)
;
if
(
!
StaticPrefs
:
:
bidi_edit_delete_immediately
(
)
&
&
levelBefore
!
=
levelAfter
)
{
return
EditActionCanceled
(
)
;
}
return
EditActionIgnored
(
)
;
}
void
EditorBase
:
:
UndefineCaretBidiLevel
(
)
const
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
nsFrameSelection
*
frameSelection
=
SelectionRefPtr
(
)
-
>
GetFrameSelection
(
)
;
if
(
frameSelection
)
{
frameSelection
-
>
UndefineCaretBidiLevel
(
)
;
}
}
NS_IMETHODIMP
EditorBase
:
:
GetTextLength
(
int32_t
*
aCount
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
EditorBase
:
:
GetWrapWidth
(
int32_t
*
aWrapColumn
)
{
if
(
NS_WARN_IF
(
!
aWrapColumn
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
aWrapColumn
=
WrapWidth
(
)
;
return
NS_OK
;
}
static
void
CutStyle
(
const
char
*
stylename
nsString
&
styleValue
)
{
int32_t
styleStart
=
styleValue
.
Find
(
stylename
true
)
;
if
(
styleStart
>
=
0
)
{
int32_t
styleEnd
=
styleValue
.
Find
(
"
;
"
false
styleStart
)
;
if
(
styleEnd
>
styleStart
)
{
styleValue
.
Cut
(
styleStart
styleEnd
-
styleStart
+
1
)
;
}
else
{
styleValue
.
Cut
(
styleStart
styleValue
.
Length
(
)
-
styleStart
)
;
}
}
}
NS_IMETHODIMP
EditorBase
:
:
SetWrapWidth
(
int32_t
aWrapColumn
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eSetWrapWidth
)
;
if
(
NS_WARN_IF
(
!
editActionData
.
CanHandle
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
SetWrapColumn
(
aWrapColumn
)
;
if
(
!
IsPlaintextEditor
(
)
)
{
return
NS_OK
;
}
RefPtr
<
Element
>
rootElement
=
GetRoot
(
)
;
if
(
NS_WARN_IF
(
!
rootElement
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsAutoString
styleValue
;
rootElement
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
style
styleValue
)
;
CutStyle
(
"
white
-
space
"
styleValue
)
;
CutStyle
(
"
width
"
styleValue
)
;
CutStyle
(
"
font
-
family
"
styleValue
)
;
if
(
!
styleValue
.
IsEmpty
(
)
)
{
styleValue
.
Trim
(
"
;
\
t
"
false
true
)
;
styleValue
.
AppendLiteral
(
"
;
"
)
;
}
if
(
IsWrapHackEnabled
(
)
&
&
aWrapColumn
>
=
0
)
{
styleValue
.
AppendLiteral
(
"
font
-
family
:
-
moz
-
fixed
;
"
)
;
}
if
(
aWrapColumn
>
0
)
{
styleValue
.
AppendLiteral
(
"
white
-
space
:
pre
-
wrap
;
width
:
"
)
;
styleValue
.
AppendInt
(
aWrapColumn
)
;
styleValue
.
AppendLiteral
(
"
ch
;
"
)
;
}
else
if
(
!
aWrapColumn
)
{
styleValue
.
AppendLiteral
(
"
white
-
space
:
pre
-
wrap
;
"
)
;
}
else
{
styleValue
.
AppendLiteral
(
"
white
-
space
:
pre
;
"
)
;
}
return
rootElement
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
style
styleValue
true
)
;
}
NS_IMETHODIMP
EditorBase
:
:
GetNewlineHandling
(
int32_t
*
aNewlineHandling
)
{
if
(
NS_WARN_IF
(
!
aNewlineHandling
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
aNewlineHandling
=
mNewlineHandling
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
SetNewlineHandling
(
int32_t
aNewlineHandling
)
{
switch
(
aNewlineHandling
)
{
case
nsIEditor
:
:
eNewlinesPasteIntact
:
case
nsIEditor
:
:
eNewlinesPasteToFirst
:
case
nsIEditor
:
:
eNewlinesReplaceWithSpaces
:
case
nsIEditor
:
:
eNewlinesStrip
:
case
nsIEditor
:
:
eNewlinesReplaceWithCommas
:
case
nsIEditor
:
:
eNewlinesStripSurroundingWhitespace
:
mNewlineHandling
=
aNewlineHandling
;
return
NS_OK
;
default
:
NS_ERROR
(
"
SetNewlineHandling
(
)
is
called
with
wrong
value
"
)
;
return
NS_ERROR_INVALID_ARG
;
}
}
NS_IMETHODIMP
EditorBase
:
:
InsertText
(
const
nsAString
&
aStringToInsert
)
{
nsresult
rv
=
InsertTextAsAction
(
aStringToInsert
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
insert
text
"
)
;
return
rv
;
}
nsresult
EditorBase
:
:
InsertTextAsAction
(
const
nsAString
&
aStringToInsert
nsIPrincipal
*
aPrincipal
)
{
NS_ASSERTION
(
!
mPlaceholderBatch
"
Should
be
called
only
when
this
is
the
only
edit
action
of
the
"
"
operation
"
"
unless
mutation
event
listener
nests
some
operations
"
)
;
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eInsertText
aPrincipal
)
;
MOZ_ASSERT
(
!
aStringToInsert
.
IsVoid
(
)
)
;
editActionData
.
SetData
(
aStringToInsert
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
|
|
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
nsString
stringToInsert
(
aStringToInsert
)
;
if
(
!
AsHTMLEditor
(
)
)
{
nsContentUtils
:
:
PlatformToDOMLineBreaks
(
stringToInsert
)
;
}
AutoPlaceholderBatch
treatAsOneTransaction
(
*
this
)
;
rv
=
InsertTextAsSubAction
(
stringToInsert
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
InsertTextAsSubAction
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
nsresult
EditorBase
:
:
InsertTextAsSubAction
(
const
nsAString
&
aStringToInsert
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
MOZ_ASSERT
(
mPlaceholderBatch
)
;
MOZ_ASSERT
(
AsHTMLEditor
(
)
|
|
aStringToInsert
.
FindChar
(
nsCRT
:
:
CR
)
=
=
kNotFound
)
;
if
(
NS_WARN_IF
(
!
mInitSucceeded
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
EditSubAction
editSubAction
=
ShouldHandleIMEComposition
(
)
?
EditSubAction
:
:
eInsertTextComingFromIME
:
EditSubAction
:
:
eInsertText
;
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
editSubAction
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
EditActionResult
result
=
MOZ_KnownLive
(
AsTextEditor
(
)
)
-
>
HandleInsertText
(
editSubAction
aStringToInsert
)
;
NS_WARNING_ASSERTION
(
result
.
Succeeded
(
)
"
HandleInsertText
(
)
failed
"
)
;
return
result
.
Rv
(
)
;
}
NS_IMETHODIMP
EditorBase
:
:
InsertLineBreak
(
)
{
AutoEditActionDataSetter
editActionData
(
*
this
EditAction
:
:
eInsertLineBreak
)
;
nsresult
rv
=
editActionData
.
CanHandleAndMaybeDispatchBeforeInputEvent
(
)
;
if
(
rv
=
=
NS_ERROR_EDITOR_ACTION_CANCELED
|
|
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
if
(
NS_WARN_IF
(
IsSingleLineEditor
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
AutoPlaceholderBatch
treatAsOneTransaction
(
*
this
)
;
rv
=
InsertLineBreakAsSubAction
(
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
InsertLineBreakAsSubAction
(
)
failed
"
)
;
return
EditorBase
:
:
ToGenericNSResult
(
rv
)
;
}
nsresult
EditorBase
:
:
InsertLineBreakAsSubAction
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
if
(
NS_WARN_IF
(
!
mInitSucceeded
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
IgnoredErrorResult
ignoredError
;
AutoEditSubActionNotifier
startToHandleEditSubAction
(
*
this
EditSubAction
:
:
eInsertLineBreak
nsIEditor
:
:
eNext
ignoredError
)
;
if
(
NS_WARN_IF
(
ignoredError
.
ErrorCodeIs
(
NS_ERROR_EDITOR_DESTROYED
)
)
)
{
return
ignoredError
.
StealNSResult
(
)
;
}
NS_WARNING_ASSERTION
(
!
ignoredError
.
Failed
(
)
"
OnStartToHandleTopLevelEditSubAction
(
)
failed
but
ignored
"
)
;
EditActionResult
result
=
MOZ_KnownLive
(
AsTextEditor
(
)
)
-
>
InsertLineFeedCharacterAtSelection
(
)
;
if
(
result
.
EditorDestroyed
(
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
NS_WARNING_ASSERTION
(
result
.
Succeeded
(
)
"
InsertLineFeedCharacterAtSelection
(
)
failed
but
ignored
"
)
;
return
result
.
Rv
(
)
;
}
EditorBase
:
:
AutoSelectionRestorer
:
:
AutoSelectionRestorer
(
EditorBase
&
aEditorBase
MOZ_GUARD_OBJECT_NOTIFIER_PARAM_IN_IMPL
)
:
mEditorBase
(
nullptr
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
if
(
aEditorBase
.
ArePreservingSelection
(
)
)
{
return
;
}
MOZ_ASSERT
(
aEditorBase
.
IsEditActionDataAvailable
(
)
)
;
mEditorBase
=
&
aEditorBase
;
mEditorBase
-
>
PreserveSelectionAcrossActions
(
)
;
}
EditorBase
:
:
AutoSelectionRestorer
:
:
~
AutoSelectionRestorer
(
)
{
if
(
mEditorBase
&
&
mEditorBase
-
>
ArePreservingSelection
(
)
)
{
mEditorBase
-
>
RestorePreservedSelection
(
)
;
}
}
void
EditorBase
:
:
AutoSelectionRestorer
:
:
Abort
(
)
{
if
(
mEditorBase
)
{
mEditorBase
-
>
StopPreservingSelection
(
)
;
}
}
EditorBase
:
:
AutoEditActionDataSetter
:
:
AutoEditActionDataSetter
(
const
EditorBase
&
aEditorBase
EditAction
aEditAction
nsIPrincipal
*
aPrincipal
)
:
mEditorBase
(
const_cast
<
EditorBase
&
>
(
aEditorBase
)
)
mPrincipal
(
aPrincipal
)
mParentData
(
aEditorBase
.
mEditActionData
)
mData
(
VoidString
(
)
)
mTopLevelEditSubAction
(
EditSubAction
:
:
eNone
)
mAborted
(
false
)
mHasTriedToDispatchBeforeInputEvent
(
false
)
mBeforeInputEventCanceled
(
false
)
{
if
(
mParentData
)
{
mSelection
=
mParentData
-
>
mSelection
;
if
(
aEditAction
!
=
EditAction
:
:
eNotEditing
)
{
mEditAction
=
aEditAction
;
}
mTopLevelEditSubAction
=
mParentData
-
>
mTopLevelEditSubAction
;
mDirectionOfTopLevelEditSubAction
=
mParentData
-
>
mDirectionOfTopLevelEditSubAction
;
}
else
{
mSelection
=
mEditorBase
.
GetSelection
(
)
;
if
(
NS_WARN_IF
(
!
mSelection
)
)
{
return
;
}
mEditAction
=
aEditAction
;
mDirectionOfTopLevelEditSubAction
=
eNone
;
if
(
mEditorBase
.
mIsHTMLEditorClass
)
{
mTopLevelEditSubActionData
.
mSelectedRange
=
mEditorBase
.
AsHTMLEditor
(
)
-
>
GetSelectedRangeItemForTopLevelEditSubAction
(
)
;
mTopLevelEditSubActionData
.
mChangedRange
=
mEditorBase
.
AsHTMLEditor
(
)
-
>
GetChangedRangeForTopLevelEditSubAction
(
)
;
mTopLevelEditSubActionData
.
mCachedInlineStyles
.
emplace
(
)
;
}
}
mEditorBase
.
mEditActionData
=
this
;
}
EditorBase
:
:
AutoEditActionDataSetter
:
:
~
AutoEditActionDataSetter
(
)
{
MOZ_ASSERT
(
mHasCanHandleChecked
)
;
if
(
!
mSelection
|
|
NS_WARN_IF
(
mEditorBase
.
mEditActionData
!
=
this
)
)
{
return
;
}
mEditorBase
.
mEditActionData
=
mParentData
;
MOZ_ASSERT
(
!
mTopLevelEditSubActionData
.
mSelectedRange
|
|
(
!
mTopLevelEditSubActionData
.
mSelectedRange
-
>
mStartContainer
&
&
!
mTopLevelEditSubActionData
.
mSelectedRange
-
>
mEndContainer
)
"
mTopLevelEditSubActionData
.
mSelectedRange
should
'
ve
been
cleared
"
)
;
}
void
EditorBase
:
:
AutoEditActionDataSetter
:
:
SetColorData
(
const
nsAString
&
aData
)
{
MOZ_ASSERT
(
!
HasTriedToDispatchBeforeInputEvent
(
)
"
It
'
s
too
late
to
set
data
since
this
may
have
already
dispatched
"
"
a
beforeinput
event
"
)
;
if
(
aData
.
IsEmpty
(
)
)
{
MOZ_ASSERT
(
!
EmptyString
(
)
.
IsVoid
(
)
)
;
mData
=
EmptyString
(
)
;
return
;
}
bool
wasCurrentColor
=
false
;
nscolor
color
=
NS_RGB
(
0
0
0
)
;
if
(
!
ServoCSSParser
:
:
ComputeColor
(
nullptr
NS_RGB
(
0
0
0
)
NS_ConvertUTF16toUTF8
(
aData
)
&
color
&
wasCurrentColor
)
)
{
MOZ_ASSERT
(
!
aData
.
IsVoid
(
)
)
;
mData
=
aData
;
return
;
}
if
(
wasCurrentColor
)
{
MOZ_ASSERT
(
!
aData
.
IsVoid
(
)
)
;
mData
=
aData
;
return
;
}
nsStyleUtil
:
:
GetSerializedColorValue
(
color
mData
)
;
MOZ_ASSERT
(
!
mData
.
IsVoid
(
)
)
;
}
void
EditorBase
:
:
AutoEditActionDataSetter
:
:
InitializeDataTransfer
(
DataTransfer
*
aDataTransfer
)
{
MOZ_ASSERT
(
aDataTransfer
)
;
MOZ_ASSERT
(
aDataTransfer
-
>
IsReadOnly
(
)
)
;
MOZ_ASSERT
(
!
HasTriedToDispatchBeforeInputEvent
(
)
"
It
'
s
too
late
to
set
dataTransfer
since
this
may
have
already
"
"
dispatched
a
beforeinput
event
"
)
;
mDataTransfer
=
aDataTransfer
;
}
void
EditorBase
:
:
AutoEditActionDataSetter
:
:
InitializeDataTransfer
(
nsITransferable
*
aTransferable
)
{
MOZ_ASSERT
(
aTransferable
)
;
MOZ_ASSERT
(
!
HasTriedToDispatchBeforeInputEvent
(
)
"
It
'
s
too
late
to
set
dataTransfer
since
this
may
have
already
"
"
dispatched
a
beforeinput
event
"
)
;
Document
*
document
=
mEditorBase
.
GetDocument
(
)
;
nsIGlobalObject
*
scopeObject
=
document
?
document
-
>
GetScopeObject
(
)
:
nullptr
;
mDataTransfer
=
new
DataTransfer
(
scopeObject
eEditorInput
aTransferable
)
;
}
void
EditorBase
:
:
AutoEditActionDataSetter
:
:
InitializeDataTransfer
(
const
nsAString
&
aString
)
{
MOZ_ASSERT
(
!
HasTriedToDispatchBeforeInputEvent
(
)
"
It
'
s
too
late
to
set
dataTransfer
since
this
may
have
already
"
"
dispatched
a
beforeinput
event
"
)
;
Document
*
document
=
mEditorBase
.
GetDocument
(
)
;
nsIGlobalObject
*
scopeObject
=
document
?
document
-
>
GetScopeObject
(
)
:
nullptr
;
mDataTransfer
=
new
DataTransfer
(
scopeObject
eEditorInput
aString
)
;
}
void
EditorBase
:
:
AutoEditActionDataSetter
:
:
InitializeDataTransferWithClipboard
(
SettingDataTransfer
aSettingDataTransfer
int32_t
aClipboardType
)
{
MOZ_ASSERT
(
!
HasTriedToDispatchBeforeInputEvent
(
)
"
It
'
s
too
late
to
set
dataTransfer
since
this
may
have
already
"
"
dispatched
a
beforeinput
event
"
)
;
Document
*
document
=
mEditorBase
.
GetDocument
(
)
;
nsIGlobalObject
*
scopeObject
=
document
?
document
-
>
GetScopeObject
(
)
:
nullptr
;
mDataTransfer
=
new
DataTransfer
(
scopeObject
aSettingDataTransfer
=
=
SettingDataTransfer
:
:
eWithFormat
?
ePaste
:
ePasteNoFormatting
true
aClipboardType
)
;
}
nsresult
EditorBase
:
:
AutoEditActionDataSetter
:
:
MaybeDispatchBeforeInputEvent
(
)
{
MOZ_ASSERT
(
!
HasTriedToDispatchBeforeInputEvent
(
)
"
We
'
ve
already
handled
beforeinput
event
"
)
;
MOZ_ASSERT
(
CanHandle
(
)
)
;
MOZ_ASSERT
(
NeedsToDispatchBeforeInputEvent
(
)
)
;
mHasTriedToDispatchBeforeInputEvent
=
true
;
if
(
!
StaticPrefs
:
:
dom_input_events_beforeinput_enabled
(
)
)
{
return
NS_OK
;
}
if
(
mEditorBase
.
IsSuppressingDispatchingInputEvent
(
)
)
{
return
NS_OK
;
}
if
(
mPrincipal
&
&
!
mPrincipal
-
>
IsSystemPrincipal
(
)
)
{
return
NS_OK
;
}
if
(
mEditAction
=
=
EditAction
:
:
eCommitComposition
|
|
mEditAction
=
=
EditAction
:
:
eCancelComposition
)
{
return
NS_OK
;
}
RefPtr
<
Element
>
targetElement
=
mEditorBase
.
GetInputEventTargetElement
(
)
;
if
(
NS_WARN_IF
(
!
targetElement
)
)
{
return
NS_ERROR_FAILURE
;
}
OwningNonNull
<
TextEditor
>
textEditor
=
*
mEditorBase
.
AsTextEditor
(
)
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
nsresult
rv
=
nsContentUtils
:
:
DispatchInputEvent
(
targetElement
eEditorBeforeInput
ToInputType
(
mEditAction
)
textEditor
mDataTransfer
?
nsContentUtils
:
:
InputEventOptions
(
mDataTransfer
)
:
nsContentUtils
:
:
InputEventOptions
(
mData
)
&
status
)
;
if
(
NS_WARN_IF
(
mEditorBase
.
Destroyed
(
)
)
)
{
return
NS_ERROR_EDITOR_DESTROYED
;
}
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
nsContentUtils
:
:
DispatchInputEvent
(
)
failed
"
)
;
return
rv
;
}
mBeforeInputEventCanceled
=
status
=
=
nsEventStatus_eConsumeNoDefault
;
return
mBeforeInputEventCanceled
?
NS_ERROR_EDITOR_ACTION_CANCELED
:
NS_OK
;
}
nsresult
EditorBase
:
:
TopLevelEditSubActionData
:
:
AddNodeToChangedRange
(
const
HTMLEditor
&
aHTMLEditor
nsINode
&
aNode
)
{
EditorRawDOMPoint
startPoint
(
&
aNode
)
;
EditorRawDOMPoint
endPoint
(
&
aNode
)
;
DebugOnly
<
bool
>
advanced
=
endPoint
.
AdvanceOffset
(
)
;
NS_WARNING_ASSERTION
(
advanced
"
Failed
to
set
endPoint
to
next
to
aNode
"
)
;
return
AddRangeToChangedRange
(
aHTMLEditor
startPoint
endPoint
)
;
}
nsresult
EditorBase
:
:
TopLevelEditSubActionData
:
:
AddPointToChangedRange
(
const
HTMLEditor
&
aHTMLEditor
const
EditorRawDOMPoint
&
aPoint
)
{
return
AddRangeToChangedRange
(
aHTMLEditor
aPoint
aPoint
)
;
}
nsresult
EditorBase
:
:
TopLevelEditSubActionData
:
:
AddRangeToChangedRange
(
const
HTMLEditor
&
aHTMLEditor
const
EditorRawDOMPoint
&
aStart
const
EditorRawDOMPoint
&
aEnd
)
{
if
(
NS_WARN_IF
(
!
aStart
.
IsSet
(
)
)
|
|
NS_WARN_IF
(
!
aEnd
.
IsSet
(
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
!
aHTMLEditor
.
IsDescendantOfRoot
(
aStart
.
GetContainer
(
)
)
|
|
(
aStart
.
GetContainer
(
)
!
=
aEnd
.
GetContainer
(
)
&
&
!
aHTMLEditor
.
IsDescendantOfRoot
(
aEnd
.
GetContainer
(
)
)
)
)
{
return
NS_OK
;
}
if
(
!
mChangedRange
-
>
IsPositioned
(
)
)
{
nsresult
rv
=
mChangedRange
-
>
SetStartAndEnd
(
aStart
.
ToRawRangeBoundary
(
)
aEnd
.
ToRawRangeBoundary
(
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
set
mChangedRange
to
given
range
"
)
;
return
rv
;
}
Maybe
<
int32_t
>
relation
=
mChangedRange
-
>
StartRef
(
)
.
IsSet
(
)
?
nsContentUtils
:
:
ComparePoints
(
mChangedRange
-
>
StartRef
(
)
aStart
.
ToRawRangeBoundary
(
)
)
:
Some
(
1
)
;
if
(
NS_WARN_IF
(
!
relation
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
*
relation
>
0
)
{
ErrorResult
error
;
mChangedRange
-
>
SetStart
(
aStart
.
ToRawRangeBoundary
(
)
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
return
error
.
StealNSResult
(
)
;
}
}
relation
=
mChangedRange
-
>
EndRef
(
)
.
IsSet
(
)
?
nsContentUtils
:
:
ComparePoints
(
mChangedRange
-
>
EndRef
(
)
aEnd
.
ToRawRangeBoundary
(
)
)
:
Some
(
1
)
;
if
(
NS_WARN_IF
(
!
relation
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
*
relation
<
0
)
{
ErrorResult
error
;
mChangedRange
-
>
SetEnd
(
aEnd
.
ToRawRangeBoundary
(
)
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
return
error
.
StealNSResult
(
)
;
}
}
return
NS_OK
;
}
void
EditorBase
:
:
TopLevelEditSubActionData
:
:
DidCreateElement
(
EditorBase
&
aEditorBase
Element
&
aNewElement
)
{
MOZ_ASSERT
(
aEditorBase
.
AsHTMLEditor
(
)
)
;
if
(
!
aEditorBase
.
mInitSucceeded
|
|
aEditorBase
.
Destroyed
(
)
)
{
return
;
}
if
(
!
aEditorBase
.
EditSubActionDataRef
(
)
.
mAdjustChangedRangeFromListener
)
{
return
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
AddNodeToChangedRange
(
*
aEditorBase
.
AsHTMLEditor
(
)
aNewElement
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
TopLevelEditSubActionData
:
:
AddNodeToChangedRange
(
)
failed
but
ignored
"
)
;
}
void
EditorBase
:
:
TopLevelEditSubActionData
:
:
DidInsertContent
(
EditorBase
&
aEditorBase
nsIContent
&
aNewContent
)
{
MOZ_ASSERT
(
aEditorBase
.
AsHTMLEditor
(
)
)
;
if
(
!
aEditorBase
.
mInitSucceeded
|
|
aEditorBase
.
Destroyed
(
)
)
{
return
;
}
if
(
!
aEditorBase
.
EditSubActionDataRef
(
)
.
mAdjustChangedRangeFromListener
)
{
return
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
AddNodeToChangedRange
(
*
aEditorBase
.
AsHTMLEditor
(
)
aNewContent
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
TopLevelEditSubActionData
:
:
AddNodeToChangedRange
(
)
failed
but
ignored
"
)
;
}
void
EditorBase
:
:
TopLevelEditSubActionData
:
:
WillDeleteContent
(
EditorBase
&
aEditorBase
nsIContent
&
aRemovingContent
)
{
MOZ_ASSERT
(
aEditorBase
.
AsHTMLEditor
(
)
)
;
if
(
!
aEditorBase
.
mInitSucceeded
|
|
aEditorBase
.
Destroyed
(
)
)
{
return
;
}
if
(
!
aEditorBase
.
EditSubActionDataRef
(
)
.
mAdjustChangedRangeFromListener
)
{
return
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
AddNodeToChangedRange
(
*
aEditorBase
.
AsHTMLEditor
(
)
aRemovingContent
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
TopLevelEditSubActionData
:
:
AddNodeToChangedRange
(
)
failed
but
ignored
"
)
;
}
void
EditorBase
:
:
TopLevelEditSubActionData
:
:
DidSplitContent
(
EditorBase
&
aEditorBase
nsIContent
&
aExistingRightContent
nsIContent
&
aNewLeftContent
)
{
MOZ_ASSERT
(
aEditorBase
.
AsHTMLEditor
(
)
)
;
if
(
!
aEditorBase
.
mInitSucceeded
|
|
aEditorBase
.
Destroyed
(
)
)
{
return
;
}
if
(
!
aEditorBase
.
EditSubActionDataRef
(
)
.
mAdjustChangedRangeFromListener
)
{
return
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
AddRangeToChangedRange
(
*
aEditorBase
.
AsHTMLEditor
(
)
EditorRawDOMPoint
(
&
aNewLeftContent
0
)
EditorRawDOMPoint
(
&
aExistingRightContent
0
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
TopLevelEditSubActionData
:
:
AddRangeToChangedRange
(
)
"
"
failed
but
ignored
"
)
;
}
void
EditorBase
:
:
TopLevelEditSubActionData
:
:
WillJoinContents
(
EditorBase
&
aEditorBase
nsIContent
&
aLeftContent
nsIContent
&
aRightContent
)
{
MOZ_ASSERT
(
aEditorBase
.
AsHTMLEditor
(
)
)
;
if
(
!
aEditorBase
.
mInitSucceeded
|
|
aEditorBase
.
Destroyed
(
)
)
{
return
;
}
if
(
!
aEditorBase
.
EditSubActionDataRef
(
)
.
mAdjustChangedRangeFromListener
)
{
return
;
}
aEditorBase
.
EditSubActionDataRef
(
)
.
mJoinedLeftNodeLength
=
aLeftContent
.
Length
(
)
;
}
void
EditorBase
:
:
TopLevelEditSubActionData
:
:
DidJoinContents
(
EditorBase
&
aEditorBase
nsIContent
&
aLeftContent
nsIContent
&
aRightContent
)
{
MOZ_ASSERT
(
aEditorBase
.
AsHTMLEditor
(
)
)
;
if
(
!
aEditorBase
.
mInitSucceeded
|
|
aEditorBase
.
Destroyed
(
)
)
{
return
;
}
if
(
!
aEditorBase
.
EditSubActionDataRef
(
)
.
mAdjustChangedRangeFromListener
)
{
return
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
AddPointToChangedRange
(
*
aEditorBase
.
AsHTMLEditor
(
)
EditorRawDOMPoint
(
&
aRightContent
aEditorBase
.
EditSubActionDataRef
(
)
.
mJoinedLeftNodeLength
)
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
TopLevelEditSubActionData
:
:
AddPointToChangedRange
(
)
"
"
failed
but
ignored
"
)
;
}
void
EditorBase
:
:
TopLevelEditSubActionData
:
:
DidInsertText
(
EditorBase
&
aEditorBase
const
EditorRawDOMPoint
&
aInsertionBegin
const
EditorRawDOMPoint
&
aInsertionEnd
)
{
MOZ_ASSERT
(
aEditorBase
.
AsHTMLEditor
(
)
)
;
if
(
!
aEditorBase
.
mInitSucceeded
|
|
aEditorBase
.
Destroyed
(
)
)
{
return
;
}
if
(
!
aEditorBase
.
EditSubActionDataRef
(
)
.
mAdjustChangedRangeFromListener
)
{
return
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
AddRangeToChangedRange
(
*
aEditorBase
.
AsHTMLEditor
(
)
aInsertionBegin
aInsertionEnd
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
TopLevelEditSubActionData
:
:
AddRangeToChangedRange
(
)
"
"
failed
but
ignored
"
)
;
}
void
EditorBase
:
:
TopLevelEditSubActionData
:
:
DidDeleteText
(
EditorBase
&
aEditorBase
const
EditorRawDOMPoint
&
aStartInTextNode
)
{
MOZ_ASSERT
(
aEditorBase
.
AsHTMLEditor
(
)
)
;
if
(
!
aEditorBase
.
mInitSucceeded
|
|
aEditorBase
.
Destroyed
(
)
)
{
return
;
}
if
(
!
aEditorBase
.
EditSubActionDataRef
(
)
.
mAdjustChangedRangeFromListener
)
{
return
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
AddPointToChangedRange
(
*
aEditorBase
.
AsHTMLEditor
(
)
aStartInTextNode
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
TopLevelEditSubActionData
:
:
AddPointToChangedRange
(
)
"
"
failed
but
ignored
"
)
;
}
void
EditorBase
:
:
TopLevelEditSubActionData
:
:
WillDeleteRange
(
EditorBase
&
aEditorBase
const
EditorRawDOMPoint
&
aStart
const
EditorRawDOMPoint
&
aEnd
)
{
MOZ_ASSERT
(
aEditorBase
.
AsHTMLEditor
(
)
)
;
MOZ_ASSERT
(
aStart
.
IsSet
(
)
)
;
MOZ_ASSERT
(
aEnd
.
IsSet
(
)
)
;
if
(
!
aEditorBase
.
mInitSucceeded
|
|
aEditorBase
.
Destroyed
(
)
)
{
return
;
}
if
(
!
aEditorBase
.
EditSubActionDataRef
(
)
.
mAdjustChangedRangeFromListener
)
{
return
;
}
DebugOnly
<
nsresult
>
rvIgnored
=
AddRangeToChangedRange
(
*
aEditorBase
.
AsHTMLEditor
(
)
aStart
aEnd
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rvIgnored
)
"
TopLevelEditSubActionData
:
:
AddRangeToChangedRange
(
)
"
"
failed
but
ignored
"
)
;
}
}
