#
include
"
mozilla
/
EditorBase
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Encoding
.
h
"
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
#
include
"
ChangeAttributeTransaction
.
h
"
#
include
"
CompositionTransaction
.
h
"
#
include
"
CreateElementTransaction
.
h
"
#
include
"
DeleteNodeTransaction
.
h
"
#
include
"
DeleteRangeTransaction
.
h
"
#
include
"
DeleteTextTransaction
.
h
"
#
include
"
EditAggregateTransaction
.
h
"
#
include
"
EditorEventListener
.
h
"
#
include
"
InsertNodeTransaction
.
h
"
#
include
"
InsertTextTransaction
.
h
"
#
include
"
JoinNodeTransaction
.
h
"
#
include
"
PlaceholderTransaction
.
h
"
#
include
"
SplitNodeTransaction
.
h
"
#
include
"
StyleSheetTransactions
.
h
"
#
include
"
TextEditUtils
.
h
"
#
include
"
mozInlineSpellChecker
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
mozilla
/
EditorUtils
.
h
"
#
include
"
mozilla
/
EditTransactionBase
.
h
"
#
include
"
mozilla
/
FlushType
.
h
"
#
include
"
mozilla
/
IMEStateManager
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
RangeBoundary
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
TextComposition
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
HTMLBodyElement
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsCCUncollectableMarker
.
h
"
#
include
"
nsCaret
.
h
"
#
include
"
nsCaseTreatment
.
h
"
#
include
"
nsCharTraits
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsComputedDOMStyle
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDOMString
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsFrameSelection
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIAbsorbingTransaction
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIDOMAttr
.
h
"
#
include
"
nsIDOMCharacterData
.
h
"
#
include
"
nsIDOMDocument
.
h
"
#
include
"
nsIDOMElement
.
h
"
#
include
"
nsIDOMEvent
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsIDOMEventTarget
.
h
"
#
include
"
nsIDOMHTMLElement
.
h
"
#
include
"
nsIDOMMozNamedAttrMap
.
h
"
#
include
"
nsIDOMMouseEvent
.
h
"
#
include
"
nsIDOMNode
.
h
"
#
include
"
nsIDOMNodeList
.
h
"
#
include
"
nsIDocumentStateListener
.
h
"
#
include
"
nsIEditActionListener
.
h
"
#
include
"
nsIEditorObserver
.
h
"
#
include
"
nsIEditorSpellCheck
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIHTMLDocument
.
h
"
#
include
"
nsIInlineSpellChecker
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsIPlaintextEditor
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsISelectionController
.
h
"
#
include
"
nsISelectionDisplay
.
h
"
#
include
"
nsISupportsBase
.
h
"
#
include
"
nsISupportsUtils
.
h
"
#
include
"
nsITransaction
.
h
"
#
include
"
nsITransactionManager
.
h
"
#
include
"
nsIWeakReference
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsStyleContext
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
nsStyleStructFwd
.
h
"
#
include
"
nsTextNode
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsTransactionManager
.
h
"
#
include
"
prtime
.
h
"
class
nsIOutputStream
;
class
nsITransferable
;
#
ifdef
DEBUG
#
include
"
nsIDOMHTMLDocument
.
h
"
#
endif
namespace
mozilla
{
using
namespace
dom
;
using
namespace
widget
;
EditorBase
:
:
EditorBase
(
)
:
mPlaceholderName
(
nullptr
)
mModCount
(
0
)
mFlags
(
0
)
mUpdateCount
(
0
)
mPlaceholderBatch
(
0
)
mAction
(
EditAction
:
:
none
)
mIMETextOffset
(
0
)
mIMETextLength
(
0
)
mDirection
(
eNone
)
mDocDirtyState
(
-
1
)
mSpellcheckCheckboxState
(
eTriUnset
)
mShouldTxnSetSelection
(
true
)
mDidPreDestroy
(
false
)
mDidPostCreate
(
false
)
mDispatchInputEvent
(
true
)
mIsInEditAction
(
false
)
mHidingCaret
(
false
)
mSpellCheckerDictionaryUpdated
(
true
)
mIsHTMLEditorClass
(
false
)
{
}
EditorBase
:
:
~
EditorBase
(
)
{
MOZ_ASSERT
(
!
IsInitialized
(
)
|
|
mDidPreDestroy
"
Why
PreDestroy
hasn
'
t
been
called
?
"
)
;
if
(
mComposition
)
{
mComposition
-
>
OnEditorDestroyed
(
)
;
mComposition
=
nullptr
;
}
HideCaret
(
false
)
;
mTxnMgr
=
nullptr
;
}
NS_IMPL_CYCLE_COLLECTION_CLASS
(
EditorBase
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
EditorBase
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mRootElement
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mSelectionController
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDocument
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mInlineSpellChecker
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mTxnMgr
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mIMETextNode
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mActionListeners
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mEditorObservers
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDocStateListeners
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mEventTarget
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mEventListener
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mPlaceholderTransaction
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mSavedSel
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mRangeUpdater
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
EditorBase
)
nsIDocument
*
currentDoc
=
tmp
-
>
mRootElement
?
tmp
-
>
mRootElement
-
>
GetUncomposedDoc
(
)
:
nullptr
;
if
(
currentDoc
&
&
nsCCUncollectableMarker
:
:
InGeneration
(
cb
currentDoc
-
>
GetMarkedCCGeneration
(
)
)
)
{
return
NS_SUCCESS_INTERRUPTED_TRAVERSE
;
}
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mRootElement
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mSelectionController
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDocument
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mInlineSpellChecker
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mTxnMgr
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mIMETextNode
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mActionListeners
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mEditorObservers
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDocStateListeners
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mEventTarget
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mEventListener
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mPlaceholderTransaction
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mSavedSel
)
;
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mRangeUpdater
)
;
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
EditorBase
)
NS_INTERFACE_MAP_ENTRY
(
nsISupportsWeakReference
)
NS_INTERFACE_MAP_ENTRY
(
nsIEditor
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIEditor
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
EditorBase
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
EditorBase
)
NS_IMETHODIMP
EditorBase
:
:
Init
(
nsIDOMDocument
*
aDOMDocument
nsIContent
*
aRoot
nsISelectionController
*
aSelectionController
uint32_t
aFlags
const
nsAString
&
aValue
)
{
MOZ_ASSERT
(
mAction
=
=
EditAction
:
:
none
"
Initializing
during
an
edit
action
is
an
error
"
)
;
MOZ_ASSERT
(
aDOMDocument
)
;
if
(
!
aDOMDocument
)
{
return
NS_ERROR_NULL_POINTER
;
}
#
ifdef
DEBUG
nsresult
rv
=
#
endif
SetFlags
(
aFlags
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
SetFlags
(
)
failed
"
)
;
mDocument
=
do_QueryInterface
(
aDOMDocument
)
;
nsCOMPtr
<
nsISelectionController
>
selectionController
;
if
(
aSelectionController
)
{
mSelectionController
=
aSelectionController
;
selectionController
=
aSelectionController
;
}
else
{
nsCOMPtr
<
nsIPresShell
>
presShell
=
GetPresShell
(
)
;
selectionController
=
do_QueryInterface
(
presShell
)
;
}
MOZ_ASSERT
(
selectionController
"
Selection
controller
should
be
available
at
this
point
"
)
;
if
(
aRoot
)
mRootElement
=
do_QueryInterface
(
aRoot
)
;
mUpdateCount
=
0
;
if
(
mIMETextNode
&
&
!
mIMETextNode
-
>
IsInComposedDoc
(
)
)
{
mIMETextNode
=
nullptr
;
}
selectionController
-
>
SetCaretReadOnly
(
false
)
;
selectionController
-
>
SetDisplaySelection
(
nsISelectionController
:
:
SELECTION_ON
)
;
selectionController
-
>
SetSelectionFlags
(
nsISelectionDisplay
:
:
DISPLAY_ALL
)
;
MOZ_ASSERT
(
IsInitialized
(
)
)
;
mDidPreDestroy
=
false
;
mDidPostCreate
=
false
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
PostCreate
(
)
{
mFlags
=
~
mFlags
;
nsresult
rv
=
SetFlags
(
~
mFlags
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
mDidPostCreate
)
{
mDidPostCreate
=
true
;
CreateEventListeners
(
)
;
rv
=
InstallEventListeners
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
ResetModificationCount
(
)
;
NotifyDocumentListeners
(
eDocumentCreated
)
;
NotifyDocumentListeners
(
eDocumentStateChanged
)
;
}
nsCOMPtr
<
nsIContent
>
focusedContent
=
GetFocusedContent
(
)
;
if
(
focusedContent
)
{
nsCOMPtr
<
nsIDOMEventTarget
>
target
=
do_QueryInterface
(
focusedContent
)
;
if
(
target
)
{
InitializeSelection
(
target
)
;
}
EditorEventListener
*
listener
=
reinterpret_cast
<
EditorEventListener
*
>
(
mEventListener
.
get
(
)
)
;
listener
-
>
SpellCheckIfNeeded
(
)
;
IMEState
newState
;
rv
=
GetPreferredIMEState
(
&
newState
)
;
NS_ENSURE_SUCCESS
(
rv
NS_OK
)
;
nsCOMPtr
<
nsIContent
>
content
=
GetFocusedContentForIME
(
)
;
IMEStateManager
:
:
UpdateIMEState
(
newState
content
this
)
;
}
IMEStateManager
:
:
OnEditorInitialized
(
*
this
)
;
return
NS_OK
;
}
void
EditorBase
:
:
CreateEventListeners
(
)
{
if
(
!
mEventListener
)
{
mEventListener
=
new
EditorEventListener
(
)
;
}
}
nsresult
EditorBase
:
:
InstallEventListeners
(
)
{
if
(
NS_WARN_IF
(
!
IsInitialized
(
)
)
|
|
NS_WARN_IF
(
!
mEventListener
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsCOMPtr
<
nsIContent
>
rootContent
=
GetRoot
(
)
;
NS_ENSURE_TRUE
(
rootContent
NS_ERROR_NOT_AVAILABLE
)
;
mEventTarget
=
do_QueryInterface
(
rootContent
-
>
GetParent
(
)
)
;
NS_ENSURE_TRUE
(
mEventTarget
NS_ERROR_NOT_AVAILABLE
)
;
EditorEventListener
*
listener
=
reinterpret_cast
<
EditorEventListener
*
>
(
mEventListener
.
get
(
)
)
;
nsresult
rv
=
listener
-
>
Connect
(
this
)
;
if
(
mComposition
)
{
mComposition
-
>
StartHandlingComposition
(
this
)
;
}
return
rv
;
}
void
EditorBase
:
:
RemoveEventListeners
(
)
{
if
(
!
IsInitialized
(
)
|
|
!
mEventListener
)
{
return
;
}
reinterpret_cast
<
EditorEventListener
*
>
(
mEventListener
.
get
(
)
)
-
>
Disconnect
(
)
;
if
(
mComposition
)
{
mComposition
-
>
EndHandlingComposition
(
this
)
;
}
mEventTarget
=
nullptr
;
}
bool
EditorBase
:
:
GetDesiredSpellCheckState
(
)
{
if
(
mSpellcheckCheckboxState
!
=
eTriUnset
)
{
return
(
mSpellcheckCheckboxState
=
=
eTriTrue
)
;
}
int32_t
spellcheckLevel
=
Preferences
:
:
GetInt
(
"
layout
.
spellcheckDefault
"
1
)
;
if
(
!
spellcheckLevel
)
{
return
false
;
}
if
(
!
CanEnableSpellCheck
(
)
)
{
return
false
;
}
nsCOMPtr
<
nsIPresShell
>
presShell
=
GetPresShell
(
)
;
if
(
presShell
)
{
nsPresContext
*
context
=
presShell
-
>
GetPresContext
(
)
;
if
(
context
&
&
!
context
-
>
IsDynamic
(
)
)
{
return
false
;
}
}
nsCOMPtr
<
nsIContent
>
content
=
GetExposedRoot
(
)
;
if
(
!
content
)
{
return
false
;
}
nsCOMPtr
<
nsIDOMHTMLElement
>
element
=
do_QueryInterface
(
content
)
;
if
(
!
element
)
{
return
false
;
}
if
(
!
IsPlaintextEditor
(
)
)
{
nsCOMPtr
<
nsIHTMLDocument
>
doc
=
do_QueryInterface
(
content
-
>
GetUncomposedDoc
(
)
)
;
return
doc
&
&
doc
-
>
IsEditingOn
(
)
;
}
bool
enable
;
element
-
>
GetSpellcheck
(
&
enable
)
;
return
enable
;
}
NS_IMETHODIMP
EditorBase
:
:
PreDestroy
(
bool
aDestroyingFrames
)
{
if
(
mDidPreDestroy
)
return
NS_OK
;
IMEStateManager
:
:
OnEditorDestroying
(
*
this
)
;
if
(
mInlineSpellChecker
)
mInlineSpellChecker
-
>
Cleanup
(
aDestroyingFrames
)
;
NotifyDocumentListeners
(
eDocumentToBeDestroyed
)
;
RemoveEventListeners
(
)
;
HideCaret
(
false
)
;
mActionListeners
.
Clear
(
)
;
mEditorObservers
.
Clear
(
)
;
mDocStateListeners
.
Clear
(
)
;
mInlineSpellChecker
=
nullptr
;
mSpellcheckCheckboxState
=
eTriUnset
;
mRootElement
=
nullptr
;
if
(
mTxnMgr
)
{
mTxnMgr
-
>
Clear
(
)
;
mTxnMgr
=
nullptr
;
}
mDidPreDestroy
=
true
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetFlags
(
uint32_t
*
aFlags
)
{
*
aFlags
=
Flags
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
SetFlags
(
uint32_t
aFlags
)
{
if
(
mFlags
=
=
aFlags
)
{
return
NS_OK
;
}
bool
spellcheckerWasEnabled
=
CanEnableSpellCheck
(
)
;
mFlags
=
aFlags
;
if
(
!
IsInitialized
(
)
)
{
return
NS_OK
;
}
if
(
CanEnableSpellCheck
(
)
!
=
spellcheckerWasEnabled
)
{
nsresult
rv
=
SyncRealTimeSpell
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
if
(
!
mDidPostCreate
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIContent
>
focusedContent
=
GetFocusedContent
(
)
;
if
(
focusedContent
)
{
IMEState
newState
;
nsresult
rv
=
GetPreferredIMEState
(
&
newState
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsCOMPtr
<
nsIContent
>
content
=
GetFocusedContentForIME
(
)
;
IMEStateManager
:
:
UpdateIMEState
(
newState
content
this
)
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetIsSelectionEditable
(
bool
*
aIsSelectionEditable
)
{
NS_ENSURE_ARG_POINTER
(
aIsSelectionEditable
)
;
*
aIsSelectionEditable
=
IsSelectionEditable
(
)
;
return
NS_OK
;
}
bool
EditorBase
:
:
IsSelectionEditable
(
)
{
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
if
(
NS_WARN_IF
(
!
selection
)
)
{
return
false
;
}
if
(
!
mIsHTMLEditorClass
)
{
nsCOMPtr
<
nsINode
>
anchorNode
=
selection
-
>
GetAnchorNode
(
)
;
return
anchorNode
&
&
IsEditable
(
anchorNode
)
;
}
nsINode
*
anchorNode
=
selection
-
>
GetAnchorNode
(
)
;
nsINode
*
focusNode
=
selection
-
>
GetFocusNode
(
)
;
if
(
!
anchorNode
|
|
!
focusNode
)
{
return
false
;
}
bool
isSelectionEditable
=
selection
-
>
RangeCount
(
)
&
&
anchorNode
-
>
IsEditable
(
)
&
&
focusNode
-
>
IsEditable
(
)
;
if
(
!
isSelectionEditable
)
{
return
false
;
}
nsINode
*
commonAncestor
=
selection
-
>
GetAnchorFocusRange
(
)
-
>
GetCommonAncestor
(
)
;
while
(
commonAncestor
&
&
!
commonAncestor
-
>
IsEditable
(
)
)
{
commonAncestor
=
commonAncestor
-
>
GetParentNode
(
)
;
}
return
!
!
commonAncestor
;
}
NS_IMETHODIMP
EditorBase
:
:
GetIsDocumentEditable
(
bool
*
aIsDocumentEditable
)
{
NS_ENSURE_ARG_POINTER
(
aIsDocumentEditable
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
GetDocument
(
)
;
*
aIsDocumentEditable
=
doc
&
&
IsModifiable
(
)
;
return
NS_OK
;
}
already_AddRefed
<
nsIDocument
>
EditorBase
:
:
GetDocument
(
)
{
nsCOMPtr
<
nsIDocument
>
document
=
mDocument
;
return
document
.
forget
(
)
;
}
already_AddRefed
<
nsIDOMDocument
>
EditorBase
:
:
GetDOMDocument
(
)
{
nsCOMPtr
<
nsIDOMDocument
>
domDocument
=
do_QueryInterface
(
mDocument
)
;
return
domDocument
.
forget
(
)
;
}
NS_IMETHODIMP
EditorBase
:
:
GetDocument
(
nsIDOMDocument
*
*
aDoc
)
{
*
aDoc
=
GetDOMDocument
(
)
.
take
(
)
;
return
*
aDoc
?
NS_OK
:
NS_ERROR_NOT_INITIALIZED
;
}
already_AddRefed
<
nsIPresShell
>
EditorBase
:
:
GetPresShell
(
)
{
nsCOMPtr
<
nsIDocument
>
document
=
GetDocument
(
)
;
if
(
NS_WARN_IF
(
!
document
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIPresShell
>
presShell
=
document
-
>
GetShell
(
)
;
return
presShell
.
forget
(
)
;
}
already_AddRefed
<
nsIWidget
>
EditorBase
:
:
GetWidget
(
)
{
nsCOMPtr
<
nsIPresShell
>
ps
=
GetPresShell
(
)
;
NS_ENSURE_TRUE
(
ps
nullptr
)
;
nsPresContext
*
pc
=
ps
-
>
GetPresContext
(
)
;
NS_ENSURE_TRUE
(
pc
nullptr
)
;
nsCOMPtr
<
nsIWidget
>
widget
=
pc
-
>
GetRootWidget
(
)
;
NS_ENSURE_TRUE
(
widget
.
get
(
)
nullptr
)
;
return
widget
.
forget
(
)
;
}
NS_IMETHODIMP
EditorBase
:
:
GetContentsMIMEType
(
char
*
*
aContentsMIMEType
)
{
NS_ENSURE_ARG_POINTER
(
aContentsMIMEType
)
;
*
aContentsMIMEType
=
ToNewCString
(
mContentMIMEType
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
SetContentsMIMEType
(
const
char
*
aContentsMIMEType
)
{
mContentMIMEType
.
Assign
(
aContentsMIMEType
?
aContentsMIMEType
:
"
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetSelectionController
(
nsISelectionController
*
*
aSel
)
{
NS_ENSURE_TRUE
(
aSel
NS_ERROR_NULL_POINTER
)
;
*
aSel
=
nullptr
;
nsCOMPtr
<
nsISelectionController
>
selCon
=
GetSelectionController
(
)
;
if
(
NS_WARN_IF
(
!
selCon
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
selCon
.
forget
(
aSel
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
DeleteSelection
(
EDirection
aAction
EStripWrappers
aStripWrappers
)
{
MOZ_ASSERT
(
aStripWrappers
=
=
eStrip
|
|
aStripWrappers
=
=
eNoStrip
)
;
return
DeleteSelectionImpl
(
aAction
aStripWrappers
)
;
}
NS_IMETHODIMP
EditorBase
:
:
GetSelection
(
nsISelection
*
*
aSelection
)
{
return
GetSelection
(
SelectionType
:
:
eNormal
aSelection
)
;
}
nsresult
EditorBase
:
:
GetSelection
(
SelectionType
aSelectionType
nsISelection
*
*
aSelection
)
{
NS_ENSURE_TRUE
(
aSelection
NS_ERROR_NULL_POINTER
)
;
*
aSelection
=
nullptr
;
nsISelectionController
*
selcon
=
GetSelectionController
(
)
;
if
(
!
selcon
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
return
selcon
-
>
GetSelection
(
ToRawSelectionType
(
aSelectionType
)
aSelection
)
;
}
NS_IMETHODIMP
EditorBase
:
:
DoTransaction
(
nsITransaction
*
aTxn
)
{
return
DoTransaction
(
nullptr
aTxn
)
;
}
nsresult
EditorBase
:
:
DoTransaction
(
Selection
*
aSelection
nsITransaction
*
aTxn
)
{
if
(
mPlaceholderBatch
&
&
!
mPlaceholderTransaction
)
{
mPlaceholderTransaction
=
new
PlaceholderTransaction
(
*
this
mPlaceholderName
Move
(
mSelState
)
)
;
MOZ_ASSERT
(
mSelState
.
isNothing
(
)
)
;
DoTransaction
(
mPlaceholderTransaction
)
;
if
(
mTxnMgr
)
{
nsCOMPtr
<
nsITransaction
>
topTransaction
=
mTxnMgr
-
>
PeekUndoStack
(
)
;
nsCOMPtr
<
nsIAbsorbingTransaction
>
topAbsorbingTransaction
=
do_QueryInterface
(
topTransaction
)
;
if
(
topAbsorbingTransaction
)
{
RefPtr
<
PlaceholderTransaction
>
topPlaceholderTransaction
=
topAbsorbingTransaction
-
>
AsPlaceholderTransaction
(
)
;
if
(
topPlaceholderTransaction
)
{
mPlaceholderTransaction
=
topPlaceholderTransaction
;
}
}
}
}
if
(
aTxn
)
{
RefPtr
<
Selection
>
selection
=
aSelection
?
aSelection
:
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_NULL_POINTER
)
;
SelectionBatcher
selectionBatcher
(
selection
)
;
nsresult
rv
;
if
(
mTxnMgr
)
{
RefPtr
<
nsTransactionManager
>
txnMgr
=
mTxnMgr
;
rv
=
txnMgr
-
>
DoTransaction
(
aTxn
)
;
}
else
{
rv
=
aTxn
-
>
DoTransaction
(
)
;
}
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
DoAfterDoTransaction
(
aTxn
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
EnableUndo
(
bool
aEnable
)
{
if
(
aEnable
)
{
if
(
!
mTxnMgr
)
{
mTxnMgr
=
new
nsTransactionManager
(
)
;
}
mTxnMgr
-
>
SetMaxTransactionCount
(
-
1
)
;
}
else
if
(
mTxnMgr
)
{
mTxnMgr
-
>
Clear
(
)
;
mTxnMgr
-
>
SetMaxTransactionCount
(
0
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetNumberOfUndoItems
(
int32_t
*
aNumItems
)
{
*
aNumItems
=
NumberOfUndoItems
(
)
;
return
*
aNumItems
>
=
0
?
NS_OK
:
NS_ERROR_FAILURE
;
}
int32_t
EditorBase
:
:
NumberOfUndoItems
(
)
const
{
if
(
!
mTxnMgr
)
{
return
0
;
}
int32_t
numItems
=
0
;
if
(
NS_WARN_IF
(
NS_FAILED
(
mTxnMgr
-
>
GetNumberOfUndoItems
(
&
numItems
)
)
)
)
{
return
-
1
;
}
return
numItems
;
}
NS_IMETHODIMP
EditorBase
:
:
GetNumberOfRedoItems
(
int32_t
*
aNumItems
)
{
*
aNumItems
=
NumberOfRedoItems
(
)
;
return
*
aNumItems
>
=
0
?
NS_OK
:
NS_ERROR_FAILURE
;
}
int32_t
EditorBase
:
:
NumberOfRedoItems
(
)
const
{
if
(
!
mTxnMgr
)
{
return
0
;
}
int32_t
numItems
=
0
;
if
(
NS_WARN_IF
(
NS_FAILED
(
mTxnMgr
-
>
GetNumberOfRedoItems
(
&
numItems
)
)
)
)
{
return
-
1
;
}
return
numItems
;
}
NS_IMETHODIMP
EditorBase
:
:
GetTransactionManager
(
nsITransactionManager
*
*
aTxnManager
)
{
if
(
NS_WARN_IF
(
!
aTxnManager
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
aTxnManager
=
GetTransactionManager
(
)
.
take
(
)
;
if
(
NS_WARN_IF
(
!
*
aTxnManager
)
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
already_AddRefed
<
nsITransactionManager
>
EditorBase
:
:
GetTransactionManager
(
)
const
{
nsCOMPtr
<
nsITransactionManager
>
transactionManager
=
mTxnMgr
.
get
(
)
;
return
transactionManager
.
forget
(
)
;
}
NS_IMETHODIMP
EditorBase
:
:
Undo
(
uint32_t
aCount
)
{
ForceCompositionEnd
(
)
;
bool
hasTxnMgr
hasTransaction
=
false
;
CanUndo
(
&
hasTxnMgr
&
hasTransaction
)
;
NS_ENSURE_TRUE
(
hasTransaction
NS_OK
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
undo
nsIEditor
:
:
eNone
)
;
if
(
!
mTxnMgr
)
{
return
NS_OK
;
}
RefPtr
<
nsTransactionManager
>
txnMgr
=
mTxnMgr
;
for
(
uint32_t
i
=
0
;
i
<
aCount
;
+
+
i
)
{
nsresult
rv
=
txnMgr
-
>
UndoTransaction
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
DoAfterUndoTransaction
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
CanUndo
(
bool
*
aIsEnabled
bool
*
aCanUndo
)
{
NS_ENSURE_TRUE
(
aIsEnabled
&
&
aCanUndo
NS_ERROR_NULL_POINTER
)
;
*
aIsEnabled
=
!
!
mTxnMgr
;
if
(
*
aIsEnabled
)
{
int32_t
numTxns
=
0
;
mTxnMgr
-
>
GetNumberOfUndoItems
(
&
numTxns
)
;
*
aCanUndo
=
!
!
numTxns
;
}
else
{
*
aCanUndo
=
false
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
Redo
(
uint32_t
aCount
)
{
bool
hasTxnMgr
hasTransaction
=
false
;
CanRedo
(
&
hasTxnMgr
&
hasTransaction
)
;
NS_ENSURE_TRUE
(
hasTransaction
NS_OK
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
redo
nsIEditor
:
:
eNone
)
;
if
(
!
mTxnMgr
)
{
return
NS_OK
;
}
RefPtr
<
nsTransactionManager
>
txnMgr
=
mTxnMgr
;
for
(
uint32_t
i
=
0
;
i
<
aCount
;
+
+
i
)
{
nsresult
rv
=
txnMgr
-
>
RedoTransaction
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
DoAfterRedoTransaction
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
CanRedo
(
bool
*
aIsEnabled
bool
*
aCanRedo
)
{
NS_ENSURE_TRUE
(
aIsEnabled
&
&
aCanRedo
NS_ERROR_NULL_POINTER
)
;
*
aIsEnabled
=
!
!
mTxnMgr
;
if
(
*
aIsEnabled
)
{
int32_t
numTxns
=
0
;
mTxnMgr
-
>
GetNumberOfRedoItems
(
&
numTxns
)
;
*
aCanRedo
=
!
!
numTxns
;
}
else
{
*
aCanRedo
=
false
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
BeginTransaction
(
)
{
BeginUpdateViewBatch
(
)
;
if
(
mTxnMgr
)
{
RefPtr
<
nsTransactionManager
>
txnMgr
=
mTxnMgr
;
txnMgr
-
>
BeginBatch
(
nullptr
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
EndTransaction
(
)
{
if
(
mTxnMgr
)
{
RefPtr
<
nsTransactionManager
>
txnMgr
=
mTxnMgr
;
txnMgr
-
>
EndBatch
(
false
)
;
}
EndUpdateViewBatch
(
)
;
return
NS_OK
;
}
void
EditorBase
:
:
BeginPlaceholderTransaction
(
nsAtom
*
aTransactionName
)
{
MOZ_ASSERT
(
mPlaceholderBatch
>
=
0
"
negative
placeholder
batch
count
!
"
)
;
if
(
!
mPlaceholderBatch
)
{
NotifyEditorObservers
(
eNotifyEditorObserversOfBefore
)
;
BeginUpdateViewBatch
(
)
;
mPlaceholderTransaction
=
nullptr
;
mPlaceholderName
=
aTransactionName
;
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
if
(
selection
)
{
mSelState
.
emplace
(
)
;
mSelState
-
>
SaveSelection
(
selection
)
;
if
(
mPlaceholderName
=
=
nsGkAtoms
:
:
IMETxnName
)
{
mRangeUpdater
.
RegisterSelectionState
(
*
mSelState
)
;
}
}
}
mPlaceholderBatch
+
+
;
}
void
EditorBase
:
:
EndPlaceholderTransaction
(
)
{
MOZ_ASSERT
(
mPlaceholderBatch
>
0
"
zero
or
negative
placeholder
batch
count
when
ending
batch
!
"
)
;
if
(
mPlaceholderBatch
=
=
1
)
{
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
if
(
selection
)
{
selection
-
>
SetCanCacheFrameOffset
(
true
)
;
}
EndUpdateViewBatch
(
)
;
ScrollSelectionIntoView
(
false
)
;
if
(
selection
)
{
selection
-
>
SetCanCacheFrameOffset
(
false
)
;
}
if
(
mSelState
)
{
if
(
mPlaceholderName
=
=
nsGkAtoms
:
:
IMETxnName
)
{
mRangeUpdater
.
DropSelectionState
(
*
mSelState
)
;
}
mSelState
.
reset
(
)
;
}
if
(
mPlaceholderTransaction
)
{
mPlaceholderTransaction
-
>
EndPlaceHolderBatch
(
)
;
if
(
!
mComposition
)
{
NotifyEditorObservers
(
eNotifyEditorObserversOfEnd
)
;
}
mPlaceholderTransaction
=
nullptr
;
}
else
{
NotifyEditorObservers
(
eNotifyEditorObserversOfCancel
)
;
}
}
mPlaceholderBatch
-
-
;
}
NS_IMETHODIMP
EditorBase
:
:
ShouldTxnSetSelection
(
bool
*
aResult
)
{
NS_ENSURE_TRUE
(
aResult
NS_ERROR_NULL_POINTER
)
;
*
aResult
=
mShouldTxnSetSelection
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
SetShouldTxnSetSelection
(
bool
aShould
)
{
mShouldTxnSetSelection
=
aShould
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetDocumentIsEmpty
(
bool
*
aDocumentIsEmpty
)
{
*
aDocumentIsEmpty
=
true
;
dom
:
:
Element
*
root
=
GetRoot
(
)
;
NS_ENSURE_TRUE
(
root
NS_ERROR_NULL_POINTER
)
;
*
aDocumentIsEmpty
=
!
root
-
>
HasChildren
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
SelectAll
(
)
{
if
(
!
IsInitialized
(
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
ForceCompositionEnd
(
)
;
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_NOT_INITIALIZED
)
;
return
SelectEntireDocument
(
selection
)
;
}
NS_IMETHODIMP
EditorBase
:
:
BeginningOfDocument
(
)
{
if
(
!
IsInitialized
(
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_NOT_INITIALIZED
)
;
dom
:
:
Element
*
rootElement
=
GetRoot
(
)
;
NS_ENSURE_TRUE
(
rootElement
NS_ERROR_NULL_POINTER
)
;
nsCOMPtr
<
nsINode
>
firstNode
=
GetFirstEditableNode
(
rootElement
)
;
if
(
!
firstNode
)
{
return
selection
-
>
Collapse
(
rootElement
0
)
;
}
if
(
firstNode
-
>
NodeType
(
)
=
=
nsIDOMNode
:
:
TEXT_NODE
)
{
return
selection
-
>
Collapse
(
firstNode
0
)
;
}
nsCOMPtr
<
nsIContent
>
parent
=
firstNode
-
>
GetParent
(
)
;
if
(
!
parent
)
{
return
NS_ERROR_NULL_POINTER
;
}
MOZ_ASSERT
(
parent
-
>
IndexOf
(
firstNode
)
=
=
0
"
How
come
the
first
node
isn
'
t
the
left
most
child
in
its
parent
?
"
)
;
return
selection
-
>
Collapse
(
parent
0
)
;
}
NS_IMETHODIMP
EditorBase
:
:
EndOfDocument
(
)
{
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
return
CollapseSelectionToEnd
(
selection
)
;
}
nsresult
EditorBase
:
:
CollapseSelectionToEnd
(
Selection
*
aSelection
)
{
if
(
NS_WARN_IF
(
!
IsInitialized
(
)
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
if
(
NS_WARN_IF
(
!
aSelection
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
nsINode
*
node
=
GetRoot
(
)
;
if
(
NS_WARN_IF
(
!
node
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
nsINode
*
child
=
node
-
>
GetLastChild
(
)
;
while
(
child
&
&
IsContainer
(
child
)
)
{
node
=
child
;
child
=
node
-
>
GetLastChild
(
)
;
}
uint32_t
length
=
node
-
>
Length
(
)
;
return
aSelection
-
>
Collapse
(
node
static_cast
<
int32_t
>
(
length
)
)
;
}
NS_IMETHODIMP
EditorBase
:
:
GetDocumentModified
(
bool
*
outDocModified
)
{
NS_ENSURE_TRUE
(
outDocModified
NS_ERROR_NULL_POINTER
)
;
int32_t
modCount
=
0
;
GetModificationCount
(
&
modCount
)
;
*
outDocModified
=
(
modCount
!
=
0
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetDocumentCharacterSet
(
nsACString
&
characterSet
)
{
nsCOMPtr
<
nsIDocument
>
document
=
GetDocument
(
)
;
if
(
NS_WARN_IF
(
!
document
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
document
-
>
GetDocumentCharacterSet
(
)
-
>
Name
(
characterSet
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
SetDocumentCharacterSet
(
const
nsACString
&
characterSet
)
{
nsCOMPtr
<
nsIDocument
>
document
=
GetDocument
(
)
;
if
(
NS_WARN_IF
(
!
document
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
auto
encoding
=
Encoding
:
:
ForLabelNoReplacement
(
characterSet
)
;
if
(
!
encoding
)
{
return
NS_ERROR_INVALID_ARG
;
}
document
-
>
SetDocumentCharacterSet
(
WrapNotNull
(
encoding
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
Cut
(
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
EditorBase
:
:
CanCut
(
bool
*
aCanCut
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
EditorBase
:
:
Copy
(
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
EditorBase
:
:
CanCopy
(
bool
*
aCanCut
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
EditorBase
:
:
CanDelete
(
bool
*
aCanDelete
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
EditorBase
:
:
Paste
(
int32_t
aSelectionType
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
EditorBase
:
:
PasteTransferable
(
nsITransferable
*
aTransferable
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
EditorBase
:
:
CanPaste
(
int32_t
aSelectionType
bool
*
aCanPaste
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
EditorBase
:
:
CanPasteTransferable
(
nsITransferable
*
aTransferable
bool
*
aCanPaste
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
EditorBase
:
:
SetAttribute
(
nsIDOMElement
*
aElement
const
nsAString
&
aAttribute
const
nsAString
&
aValue
)
{
if
(
NS_WARN_IF
(
aAttribute
.
IsEmpty
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
Element
>
element
=
do_QueryInterface
(
aElement
)
;
NS_ENSURE_TRUE
(
element
NS_ERROR_NULL_POINTER
)
;
RefPtr
<
nsAtom
>
attribute
=
NS_Atomize
(
aAttribute
)
;
return
SetAttribute
(
element
attribute
aValue
)
;
}
nsresult
EditorBase
:
:
SetAttribute
(
Element
*
aElement
nsAtom
*
aAttribute
const
nsAString
&
aValue
)
{
RefPtr
<
ChangeAttributeTransaction
>
transaction
=
CreateTxnForSetAttribute
(
*
aElement
*
aAttribute
aValue
)
;
return
DoTransaction
(
transaction
)
;
}
NS_IMETHODIMP
EditorBase
:
:
GetAttributeValue
(
nsIDOMElement
*
aElement
const
nsAString
&
aAttribute
nsAString
&
aResultValue
bool
*
aResultIsSet
)
{
NS_ENSURE_TRUE
(
aResultIsSet
NS_ERROR_NULL_POINTER
)
;
*
aResultIsSet
=
false
;
if
(
!
aElement
)
{
return
NS_OK
;
}
nsAutoString
value
;
nsresult
rv
=
aElement
-
>
GetAttribute
(
aAttribute
value
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
DOMStringIsNull
(
value
)
)
{
*
aResultIsSet
=
true
;
aResultValue
=
value
;
}
return
rv
;
}
NS_IMETHODIMP
EditorBase
:
:
RemoveAttribute
(
nsIDOMElement
*
aElement
const
nsAString
&
aAttribute
)
{
if
(
NS_WARN_IF
(
aAttribute
.
IsEmpty
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
Element
>
element
=
do_QueryInterface
(
aElement
)
;
NS_ENSURE_TRUE
(
element
NS_ERROR_NULL_POINTER
)
;
RefPtr
<
nsAtom
>
attribute
=
NS_Atomize
(
aAttribute
)
;
return
RemoveAttribute
(
element
attribute
)
;
}
nsresult
EditorBase
:
:
RemoveAttribute
(
Element
*
aElement
nsAtom
*
aAttribute
)
{
RefPtr
<
ChangeAttributeTransaction
>
transaction
=
CreateTxnForRemoveAttribute
(
*
aElement
*
aAttribute
)
;
return
DoTransaction
(
transaction
)
;
}
bool
EditorBase
:
:
OutputsMozDirty
(
)
{
return
!
IsInteractionAllowed
(
)
|
|
IsMailEditor
(
)
;
}
NS_IMETHODIMP
EditorBase
:
:
MarkNodeDirty
(
nsIDOMNode
*
aNode
)
{
if
(
!
OutputsMozDirty
(
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
dom
:
:
Element
>
element
=
do_QueryInterface
(
aNode
)
;
if
(
element
)
{
element
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
mozdirty
EmptyString
(
)
false
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetInlineSpellChecker
(
bool
autoCreate
nsIInlineSpellChecker
*
*
aInlineSpellChecker
)
{
NS_ENSURE_ARG_POINTER
(
aInlineSpellChecker
)
;
if
(
mDidPreDestroy
)
{
*
aInlineSpellChecker
=
nullptr
;
return
autoCreate
?
NS_ERROR_NOT_AVAILABLE
:
NS_OK
;
}
bool
canSpell
=
mozInlineSpellChecker
:
:
CanEnableInlineSpellChecking
(
)
;
if
(
!
canSpell
)
{
*
aInlineSpellChecker
=
nullptr
;
return
NS_ERROR_FAILURE
;
}
nsresult
rv
;
if
(
!
mInlineSpellChecker
&
&
autoCreate
)
{
mInlineSpellChecker
=
do_CreateInstance
(
MOZ_INLINESPELLCHECKER_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
if
(
mInlineSpellChecker
)
{
rv
=
mInlineSpellChecker
-
>
Init
(
this
)
;
if
(
NS_FAILED
(
rv
)
)
{
mInlineSpellChecker
=
nullptr
;
}
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
NS_IF_ADDREF
(
*
aInlineSpellChecker
=
mInlineSpellChecker
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
SyncRealTimeSpell
(
)
{
bool
enable
=
GetDesiredSpellCheckState
(
)
;
nsCOMPtr
<
nsIInlineSpellChecker
>
spellChecker
;
GetInlineSpellChecker
(
enable
getter_AddRefs
(
spellChecker
)
)
;
if
(
mInlineSpellChecker
)
{
if
(
!
mSpellCheckerDictionaryUpdated
&
&
enable
)
{
mInlineSpellChecker
-
>
UpdateCurrentDictionary
(
)
;
mSpellCheckerDictionaryUpdated
=
true
;
}
mInlineSpellChecker
-
>
SetEnableRealTimeSpell
(
enable
&
&
spellChecker
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
SetSpellcheckUserOverride
(
bool
enable
)
{
mSpellcheckCheckboxState
=
enable
?
eTriTrue
:
eTriFalse
;
return
SyncRealTimeSpell
(
)
;
}
already_AddRefed
<
Element
>
EditorBase
:
:
CreateNode
(
nsAtom
*
aTag
const
EditorRawDOMPoint
&
aPointToInsert
)
{
MOZ_ASSERT
(
aTag
)
;
MOZ_ASSERT
(
aPointToInsert
.
IsSetAndValid
(
)
)
;
EditorRawDOMPoint
pointToInsert
(
aPointToInsert
)
;
int32_t
offset
=
static_cast
<
int32_t
>
(
pointToInsert
.
Offset
(
)
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
createNode
nsIEditor
:
:
eNext
)
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
WillCreateNode
(
nsDependentAtomString
(
aTag
)
GetAsDOMNode
(
pointToInsert
.
GetChildAtOffset
(
)
)
)
;
}
}
nsCOMPtr
<
Element
>
ret
;
RefPtr
<
CreateElementTransaction
>
transaction
=
CreateTxnForCreateElement
(
*
aTag
pointToInsert
)
;
nsresult
rv
=
DoTransaction
(
transaction
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
ret
=
transaction
-
>
GetNewNode
(
)
;
MOZ_ASSERT
(
ret
)
;
pointToInsert
.
Set
(
ret
)
;
}
mRangeUpdater
.
SelAdjCreateNode
(
pointToInsert
.
Container
(
)
offset
)
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
DidCreateNode
(
nsDependentAtomString
(
aTag
)
GetAsDOMNode
(
ret
)
rv
)
;
}
}
return
ret
.
forget
(
)
;
}
NS_IMETHODIMP
EditorBase
:
:
InsertNode
(
nsIDOMNode
*
aNode
nsIDOMNode
*
aParent
int32_t
aPosition
)
{
nsCOMPtr
<
nsIContent
>
node
=
do_QueryInterface
(
aNode
)
;
nsCOMPtr
<
nsINode
>
parent
=
do_QueryInterface
(
aParent
)
;
NS_ENSURE_TRUE
(
node
&
&
parent
NS_ERROR_NULL_POINTER
)
;
return
InsertNode
(
*
node
*
parent
aPosition
)
;
}
nsresult
EditorBase
:
:
InsertNode
(
nsIContent
&
aNode
nsINode
&
aParent
int32_t
aPosition
)
{
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
insertNode
nsIEditor
:
:
eNext
)
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
WillInsertNode
(
aNode
.
AsDOMNode
(
)
aParent
.
AsDOMNode
(
)
aPosition
)
;
}
}
RefPtr
<
InsertNodeTransaction
>
transaction
=
CreateTxnForInsertNode
(
aNode
aParent
aPosition
)
;
nsresult
rv
=
DoTransaction
(
transaction
)
;
mRangeUpdater
.
SelAdjInsertNode
(
&
aParent
aPosition
)
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
DidInsertNode
(
aNode
.
AsDOMNode
(
)
aParent
.
AsDOMNode
(
)
aPosition
rv
)
;
}
}
return
rv
;
}
NS_IMETHODIMP
EditorBase
:
:
SplitNode
(
nsIDOMNode
*
aNode
int32_t
aOffset
nsIDOMNode
*
*
aNewLeftNode
)
{
nsCOMPtr
<
nsIContent
>
node
=
do_QueryInterface
(
aNode
)
;
if
(
NS_WARN_IF
(
!
node
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
int32_t
offset
=
std
:
:
min
(
std
:
:
max
(
aOffset
0
)
static_cast
<
int32_t
>
(
node
-
>
Length
(
)
)
)
;
ErrorResult
error
;
nsCOMPtr
<
nsIContent
>
newNode
=
SplitNode
(
EditorRawDOMPoint
(
node
offset
)
error
)
;
*
aNewLeftNode
=
GetAsDOMNode
(
newNode
.
forget
(
)
.
take
(
)
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
return
error
.
StealNSResult
(
)
;
}
return
NS_OK
;
}
already_AddRefed
<
nsIContent
>
EditorBase
:
:
SplitNode
(
const
EditorRawDOMPoint
&
aStartOfRightNode
ErrorResult
&
aError
)
{
if
(
NS_WARN_IF
(
!
aStartOfRightNode
.
IsSet
(
)
)
|
|
NS_WARN_IF
(
!
aStartOfRightNode
.
Container
(
)
-
>
IsContent
(
)
)
)
{
aError
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
nullptr
;
}
MOZ_ASSERT
(
aStartOfRightNode
.
IsSetAndValid
(
)
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
splitNode
nsIEditor
:
:
eNext
)
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
WillSplitNode
(
aStartOfRightNode
.
Container
(
)
-
>
AsDOMNode
(
)
aStartOfRightNode
.
Offset
(
)
)
;
}
}
RefPtr
<
SplitNodeTransaction
>
transaction
=
CreateTxnForSplitNode
(
aStartOfRightNode
)
;
aError
=
DoTransaction
(
transaction
)
;
nsCOMPtr
<
nsIContent
>
newNode
=
transaction
-
>
GetNewNode
(
)
;
NS_WARNING_ASSERTION
(
newNode
"
Failed
to
create
a
new
left
node
"
)
;
mRangeUpdater
.
SelAdjSplitNode
(
*
aStartOfRightNode
.
Container
(
)
-
>
AsContent
(
)
newNode
)
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
DidSplitNode
(
aStartOfRightNode
.
Container
(
)
-
>
AsDOMNode
(
)
GetAsDOMNode
(
newNode
)
)
;
}
}
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
nullptr
;
}
return
newNode
.
forget
(
)
;
}
NS_IMETHODIMP
EditorBase
:
:
JoinNodes
(
nsIDOMNode
*
aLeftNode
nsIDOMNode
*
aRightNode
nsIDOMNode
*
)
{
nsCOMPtr
<
nsINode
>
leftNode
=
do_QueryInterface
(
aLeftNode
)
;
nsCOMPtr
<
nsINode
>
rightNode
=
do_QueryInterface
(
aRightNode
)
;
NS_ENSURE_STATE
(
leftNode
&
&
rightNode
&
&
leftNode
-
>
GetParentNode
(
)
)
;
return
JoinNodes
(
*
leftNode
*
rightNode
)
;
}
nsresult
EditorBase
:
:
JoinNodes
(
nsINode
&
aLeftNode
nsINode
&
aRightNode
)
{
nsCOMPtr
<
nsINode
>
parent
=
aLeftNode
.
GetParentNode
(
)
;
MOZ_ASSERT
(
parent
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
joinNode
nsIEditor
:
:
ePrevious
)
;
int32_t
offset
=
parent
-
>
IndexOf
(
&
aRightNode
)
;
uint32_t
oldLeftNodeLen
=
aLeftNode
.
Length
(
)
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
WillJoinNodes
(
aLeftNode
.
AsDOMNode
(
)
aRightNode
.
AsDOMNode
(
)
parent
-
>
AsDOMNode
(
)
)
;
}
}
nsresult
rv
=
NS_OK
;
RefPtr
<
JoinNodeTransaction
>
transaction
=
CreateTxnForJoinNode
(
aLeftNode
aRightNode
)
;
if
(
transaction
)
{
rv
=
DoTransaction
(
transaction
)
;
}
mRangeUpdater
.
SelAdjJoinNodes
(
aLeftNode
aRightNode
*
parent
offset
(
int32_t
)
oldLeftNodeLen
)
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
DidJoinNodes
(
aLeftNode
.
AsDOMNode
(
)
aRightNode
.
AsDOMNode
(
)
parent
-
>
AsDOMNode
(
)
rv
)
;
}
}
return
rv
;
}
NS_IMETHODIMP
EditorBase
:
:
DeleteNode
(
nsIDOMNode
*
aNode
)
{
nsCOMPtr
<
nsINode
>
node
=
do_QueryInterface
(
aNode
)
;
NS_ENSURE_STATE
(
node
)
;
return
DeleteNode
(
node
)
;
}
nsresult
EditorBase
:
:
DeleteNode
(
nsINode
*
aNode
)
{
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
createNode
nsIEditor
:
:
ePrevious
)
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
WillDeleteNode
(
aNode
-
>
AsDOMNode
(
)
)
;
}
}
RefPtr
<
DeleteNodeTransaction
>
deleteNodeTransaction
=
CreateTxnForDeleteNode
(
aNode
)
;
nsresult
rv
=
deleteNodeTransaction
?
DoTransaction
(
deleteNodeTransaction
)
:
NS_ERROR_FAILURE
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
DidDeleteNode
(
aNode
-
>
AsDOMNode
(
)
rv
)
;
}
}
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
already_AddRefed
<
Element
>
EditorBase
:
:
ReplaceContainer
(
Element
*
aOldContainer
nsAtom
*
aNodeType
nsAtom
*
aAttribute
const
nsAString
*
aValue
ECloneAttributes
aCloneAttributes
)
{
MOZ_ASSERT
(
aOldContainer
&
&
aNodeType
)
;
nsCOMPtr
<
nsIContent
>
parent
=
aOldContainer
-
>
GetParent
(
)
;
NS_ENSURE_TRUE
(
parent
nullptr
)
;
int32_t
offset
=
parent
-
>
IndexOf
(
aOldContainer
)
;
nsCOMPtr
<
Element
>
ret
=
CreateHTMLContent
(
aNodeType
)
;
NS_ENSURE_TRUE
(
ret
nullptr
)
;
if
(
aAttribute
&
&
aValue
&
&
aAttribute
!
=
nsGkAtoms
:
:
_empty
)
{
nsresult
rv
=
ret
-
>
SetAttr
(
kNameSpaceID_None
aAttribute
*
aValue
true
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
}
if
(
aCloneAttributes
=
=
eCloneAttributes
)
{
CloneAttributes
(
ret
aOldContainer
)
;
}
AutoReplaceContainerSelNotify
selStateNotify
(
mRangeUpdater
aOldContainer
ret
)
;
{
AutoTransactionsConserveSelection
conserveSelection
(
this
)
;
while
(
aOldContainer
-
>
HasChildren
(
)
)
{
nsCOMPtr
<
nsIContent
>
child
=
aOldContainer
-
>
GetFirstChild
(
)
;
nsresult
rv
=
DeleteNode
(
child
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
rv
=
InsertNode
(
*
child
*
ret
-
1
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
}
}
nsresult
rv
=
InsertNode
(
*
ret
*
parent
offset
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
rv
=
DeleteNode
(
aOldContainer
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
return
ret
.
forget
(
)
;
}
nsresult
EditorBase
:
:
RemoveContainer
(
nsIContent
*
aNode
)
{
MOZ_ASSERT
(
aNode
)
;
nsCOMPtr
<
nsINode
>
parent
=
aNode
-
>
GetParentNode
(
)
;
NS_ENSURE_STATE
(
parent
)
;
int32_t
offset
=
parent
-
>
IndexOf
(
aNode
)
;
uint32_t
nodeOrigLen
=
aNode
-
>
GetChildCount
(
)
;
AutoRemoveContainerSelNotify
selNotify
(
mRangeUpdater
aNode
parent
offset
nodeOrigLen
)
;
while
(
aNode
-
>
HasChildren
(
)
)
{
nsCOMPtr
<
nsIContent
>
child
=
aNode
-
>
GetLastChild
(
)
;
nsresult
rv
=
DeleteNode
(
child
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
InsertNode
(
*
child
*
parent
offset
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
DeleteNode
(
aNode
)
;
}
already_AddRefed
<
Element
>
EditorBase
:
:
InsertContainerAbove
(
nsIContent
*
aNode
nsAtom
*
aNodeType
nsAtom
*
aAttribute
const
nsAString
*
aValue
)
{
MOZ_ASSERT
(
aNode
&
&
aNodeType
)
;
nsCOMPtr
<
nsIContent
>
parent
=
aNode
-
>
GetParent
(
)
;
NS_ENSURE_TRUE
(
parent
nullptr
)
;
int32_t
offset
=
parent
-
>
IndexOf
(
aNode
)
;
nsCOMPtr
<
Element
>
newContent
=
CreateHTMLContent
(
aNodeType
)
;
NS_ENSURE_TRUE
(
newContent
nullptr
)
;
if
(
aAttribute
&
&
aValue
&
&
aAttribute
!
=
nsGkAtoms
:
:
_empty
)
{
nsresult
rv
=
newContent
-
>
SetAttr
(
kNameSpaceID_None
aAttribute
*
aValue
true
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
}
AutoInsertContainerSelNotify
selNotify
(
mRangeUpdater
)
;
nsresult
rv
=
DeleteNode
(
aNode
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
{
AutoTransactionsConserveSelection
conserveSelection
(
this
)
;
rv
=
InsertNode
(
*
aNode
*
newContent
0
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
}
rv
=
InsertNode
(
*
newContent
*
parent
offset
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
return
newContent
.
forget
(
)
;
}
nsresult
EditorBase
:
:
MoveNode
(
nsIContent
*
aNode
nsINode
*
aParent
int32_t
aOffset
)
{
MOZ_ASSERT
(
aNode
)
;
MOZ_ASSERT
(
aParent
)
;
MOZ_ASSERT
(
aOffset
=
=
-
1
|
|
(
0
<
=
aOffset
&
&
AssertedCast
<
uint32_t
>
(
aOffset
)
<
=
aParent
-
>
Length
(
)
)
)
;
nsCOMPtr
<
nsINode
>
oldParent
=
aNode
-
>
GetParentNode
(
)
;
int32_t
oldOffset
=
oldParent
?
oldParent
-
>
IndexOf
(
aNode
)
:
-
1
;
if
(
aOffset
=
=
-
1
)
{
aOffset
=
AssertedCast
<
int32_t
>
(
aParent
-
>
Length
(
)
)
;
}
if
(
aParent
=
=
oldParent
&
&
aOffset
=
=
oldOffset
)
{
return
NS_OK
;
}
AutoMoveNodeSelNotify
selNotify
(
mRangeUpdater
oldParent
oldOffset
aParent
aOffset
)
;
if
(
aParent
=
=
oldParent
&
&
oldOffset
<
aOffset
)
{
aOffset
-
-
;
}
nsCOMPtr
<
nsINode
>
kungFuDeathGrip
=
aNode
;
nsresult
rv
=
DeleteNode
(
aNode
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
InsertNode
(
*
aNode
*
aParent
aOffset
)
;
}
void
EditorBase
:
:
MoveAllChildren
(
nsINode
&
aContainer
const
EditorRawDOMPoint
&
aPointToInsert
ErrorResult
&
aError
)
{
if
(
!
aContainer
.
HasChildren
(
)
)
{
return
;
}
nsIContent
*
firstChild
=
aContainer
.
GetFirstChild
(
)
;
if
(
NS_WARN_IF
(
!
firstChild
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsIContent
*
lastChild
=
aContainer
.
GetLastChild
(
)
;
if
(
NS_WARN_IF
(
!
lastChild
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
return
MoveChildren
(
*
firstChild
*
lastChild
aPointToInsert
aError
)
;
}
void
EditorBase
:
:
MovePreviousSiblings
(
nsIContent
&
aChild
const
EditorRawDOMPoint
&
aPointToInsert
ErrorResult
&
aError
)
{
if
(
NS_WARN_IF
(
!
aChild
.
GetParentNode
(
)
)
)
{
aError
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
;
}
nsIContent
*
firstChild
=
aChild
.
GetParentNode
(
)
-
>
GetFirstChild
(
)
;
if
(
NS_WARN_IF
(
!
firstChild
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsIContent
*
lastChild
=
&
aChild
=
=
firstChild
?
firstChild
:
aChild
.
GetPreviousSibling
(
)
;
if
(
NS_WARN_IF
(
!
lastChild
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
return
MoveChildren
(
*
firstChild
*
lastChild
aPointToInsert
aError
)
;
}
void
EditorBase
:
:
MoveChildren
(
nsIContent
&
aFirstChild
nsIContent
&
aLastChild
const
EditorRawDOMPoint
&
aPointToInsert
ErrorResult
&
aError
)
{
nsCOMPtr
<
nsINode
>
oldContainer
=
aFirstChild
.
GetParentNode
(
)
;
if
(
NS_WARN_IF
(
oldContainer
!
=
aLastChild
.
GetParentNode
(
)
)
|
|
NS_WARN_IF
(
!
aPointToInsert
.
IsSet
(
)
)
|
|
NS_WARN_IF
(
!
aPointToInsert
.
Container
(
)
-
>
IsContainerNode
(
)
)
)
{
aError
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
;
}
AutoTArray
<
nsCOMPtr
<
nsIContent
>
10
>
children
;
for
(
nsIContent
*
child
=
&
aFirstChild
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
children
.
AppendElement
(
child
)
;
if
(
child
=
=
&
aLastChild
)
{
break
;
}
}
if
(
NS_WARN_IF
(
children
.
LastElement
(
)
!
=
&
aLastChild
)
)
{
aError
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
;
}
nsCOMPtr
<
nsINode
>
newContainer
=
aPointToInsert
.
Container
(
)
;
nsCOMPtr
<
nsIContent
>
nextNode
=
aPointToInsert
.
GetChildAtOffset
(
)
;
for
(
size_t
i
=
children
.
Length
(
)
;
i
>
0
;
-
-
i
)
{
nsCOMPtr
<
nsIContent
>
&
child
=
children
[
i
-
1
]
;
if
(
child
-
>
GetParentNode
(
)
!
=
oldContainer
)
{
continue
;
}
oldContainer
-
>
RemoveChild
(
*
child
aError
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
;
}
if
(
nextNode
)
{
EditorRawDOMPoint
pointToInsert
(
nextNode
)
;
if
(
NS_WARN_IF
(
!
pointToInsert
.
IsSet
(
)
)
|
|
NS_WARN_IF
(
pointToInsert
.
Container
(
)
!
=
newContainer
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
}
newContainer
-
>
InsertBefore
(
*
child
nextNode
aError
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
;
}
if
(
child
-
>
GetParentNode
(
)
=
=
newContainer
)
{
nextNode
=
child
;
}
}
}
NS_IMETHODIMP
EditorBase
:
:
AddEditorObserver
(
nsIEditorObserver
*
aObserver
)
{
NS_ENSURE_TRUE
(
aObserver
NS_ERROR_NULL_POINTER
)
;
if
(
!
mEditorObservers
.
Contains
(
aObserver
)
)
{
mEditorObservers
.
AppendElement
(
*
aObserver
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
RemoveEditorObserver
(
nsIEditorObserver
*
aObserver
)
{
NS_ENSURE_TRUE
(
aObserver
NS_ERROR_FAILURE
)
;
mEditorObservers
.
RemoveElement
(
aObserver
)
;
return
NS_OK
;
}
class
EditorInputEventDispatcher
final
:
public
Runnable
{
public
:
EditorInputEventDispatcher
(
EditorBase
*
aEditorBase
nsIContent
*
aTarget
bool
aIsComposing
)
:
Runnable
(
"
EditorInputEventDispatcher
"
)
mEditorBase
(
aEditorBase
)
mTarget
(
aTarget
)
mIsComposing
(
aIsComposing
)
{
}
NS_IMETHOD
Run
(
)
override
{
if
(
!
mTarget
-
>
IsInComposedDoc
(
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIPresShell
>
ps
=
mEditorBase
-
>
GetPresShell
(
)
;
if
(
!
ps
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIWidget
>
widget
=
mEditorBase
-
>
GetWidget
(
)
;
if
(
!
widget
)
{
return
NS_OK
;
}
InternalEditorInputEvent
inputEvent
(
true
eEditorInput
widget
)
;
inputEvent
.
mTime
=
static_cast
<
uint64_t
>
(
PR_Now
(
)
/
1000
)
;
inputEvent
.
mIsComposing
=
mIsComposing
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
nsresult
rv
=
ps
-
>
HandleEventWithTarget
(
&
inputEvent
nullptr
mTarget
&
status
)
;
NS_ENSURE_SUCCESS
(
rv
NS_OK
)
;
return
NS_OK
;
}
private
:
RefPtr
<
EditorBase
>
mEditorBase
;
nsCOMPtr
<
nsIContent
>
mTarget
;
bool
mIsComposing
;
}
;
void
EditorBase
:
:
NotifyEditorObservers
(
NotificationForEditorObservers
aNotification
)
{
AutoEditorObserverArray
observers
(
mEditorObservers
)
;
switch
(
aNotification
)
{
case
eNotifyEditorObserversOfEnd
:
mIsInEditAction
=
false
;
for
(
auto
&
observer
:
observers
)
{
observer
-
>
EditAction
(
)
;
}
if
(
!
mDispatchInputEvent
)
{
return
;
}
FireInputEvent
(
)
;
break
;
case
eNotifyEditorObserversOfBefore
:
if
(
NS_WARN_IF
(
mIsInEditAction
)
)
{
break
;
}
mIsInEditAction
=
true
;
for
(
auto
&
observer
:
observers
)
{
observer
-
>
BeforeEditAction
(
)
;
}
break
;
case
eNotifyEditorObserversOfCancel
:
mIsInEditAction
=
false
;
for
(
auto
&
observer
:
observers
)
{
observer
-
>
CancelEditAction
(
)
;
}
break
;
default
:
MOZ_CRASH
(
"
Handle
all
notifications
here
"
)
;
break
;
}
}
void
EditorBase
:
:
FireInputEvent
(
)
{
nsCOMPtr
<
nsIContent
>
target
=
GetInputEventTargetContent
(
)
;
NS_ENSURE_TRUE_VOID
(
target
)
;
nsContentUtils
:
:
AddScriptRunner
(
new
EditorInputEventDispatcher
(
this
target
!
!
GetComposition
(
)
)
)
;
}
NS_IMETHODIMP
EditorBase
:
:
AddEditActionListener
(
nsIEditActionListener
*
aListener
)
{
NS_ENSURE_TRUE
(
aListener
NS_ERROR_NULL_POINTER
)
;
if
(
!
mActionListeners
.
Contains
(
aListener
)
)
{
mActionListeners
.
AppendElement
(
*
aListener
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
RemoveEditActionListener
(
nsIEditActionListener
*
aListener
)
{
NS_ENSURE_TRUE
(
aListener
NS_ERROR_FAILURE
)
;
mActionListeners
.
RemoveElement
(
aListener
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
AddDocumentStateListener
(
nsIDocumentStateListener
*
aListener
)
{
NS_ENSURE_TRUE
(
aListener
NS_ERROR_NULL_POINTER
)
;
if
(
!
mDocStateListeners
.
Contains
(
aListener
)
)
{
mDocStateListeners
.
AppendElement
(
*
aListener
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
RemoveDocumentStateListener
(
nsIDocumentStateListener
*
aListener
)
{
NS_ENSURE_TRUE
(
aListener
NS_ERROR_NULL_POINTER
)
;
mDocStateListeners
.
RemoveElement
(
aListener
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
OutputToString
(
const
nsAString
&
aFormatType
uint32_t
aFlags
nsAString
&
aOutputString
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
EditorBase
:
:
OutputToStream
(
nsIOutputStream
*
aOutputStream
const
nsAString
&
aFormatType
const
nsACString
&
aCharsetOverride
uint32_t
aFlags
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
EditorBase
:
:
DumpContentTree
(
)
{
#
ifdef
DEBUG
if
(
mRootElement
)
{
mRootElement
-
>
List
(
stdout
)
;
}
#
endif
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
DebugDumpContent
(
)
{
#
ifdef
DEBUG
nsCOMPtr
<
nsIDocument
>
document
=
GetDocument
(
)
;
if
(
NS_WARN_IF
(
!
document
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsCOMPtr
<
nsIDOMHTMLDocument
>
domHTMLDocument
=
do_QueryInterface
(
document
)
;
if
(
NS_WARN_IF
(
!
domHTMLDocument
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsCOMPtr
<
nsIDOMHTMLElement
>
bodyElement
;
domHTMLDocument
-
>
GetBody
(
getter_AddRefs
(
bodyElement
)
)
;
nsCOMPtr
<
nsIContent
>
content
=
do_QueryInterface
(
bodyElement
)
;
if
(
content
)
{
content
-
>
List
(
)
;
}
#
endif
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
DebugUnitTests
(
int32_t
*
outNumTests
int32_t
*
outNumTestsFailed
)
{
#
ifdef
DEBUG
NS_NOTREACHED
(
"
This
should
never
get
called
.
Overridden
by
subclasses
"
)
;
#
endif
return
NS_OK
;
}
bool
EditorBase
:
:
ArePreservingSelection
(
)
{
return
!
(
mSavedSel
.
IsEmpty
(
)
)
;
}
void
EditorBase
:
:
PreserveSelectionAcrossActions
(
Selection
*
aSel
)
{
mSavedSel
.
SaveSelection
(
aSel
)
;
mRangeUpdater
.
RegisterSelectionState
(
mSavedSel
)
;
}
nsresult
EditorBase
:
:
RestorePreservedSelection
(
Selection
*
aSel
)
{
if
(
mSavedSel
.
IsEmpty
(
)
)
{
return
NS_ERROR_FAILURE
;
}
mSavedSel
.
RestoreSelection
(
aSel
)
;
StopPreservingSelection
(
)
;
return
NS_OK
;
}
void
EditorBase
:
:
StopPreservingSelection
(
)
{
mRangeUpdater
.
DropSelectionState
(
mSavedSel
)
;
mSavedSel
.
MakeEmpty
(
)
;
}
bool
EditorBase
:
:
EnsureComposition
(
WidgetCompositionEvent
*
aCompositionEvent
)
{
if
(
mComposition
)
{
return
true
;
}
mComposition
=
IMEStateManager
:
:
GetTextCompositionFor
(
aCompositionEvent
)
;
if
(
!
mComposition
)
{
return
false
;
}
mComposition
-
>
StartHandlingComposition
(
this
)
;
return
true
;
}
nsresult
EditorBase
:
:
BeginIMEComposition
(
WidgetCompositionEvent
*
aCompositionEvent
)
{
MOZ_ASSERT
(
!
mComposition
"
There
is
composition
already
"
)
;
if
(
!
EnsureComposition
(
aCompositionEvent
)
)
{
return
NS_OK
;
}
return
NS_OK
;
}
void
EditorBase
:
:
EndIMEComposition
(
)
{
NS_ENSURE_TRUE_VOID
(
mComposition
)
;
if
(
mTxnMgr
)
{
nsCOMPtr
<
nsITransaction
>
txn
=
mTxnMgr
-
>
PeekUndoStack
(
)
;
nsCOMPtr
<
nsIAbsorbingTransaction
>
plcTxn
=
do_QueryInterface
(
txn
)
;
if
(
plcTxn
)
{
DebugOnly
<
nsresult
>
rv
=
plcTxn
-
>
Commit
(
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
nsIAbsorbingTransaction
:
:
Commit
(
)
failed
"
)
;
}
}
HideCaret
(
false
)
;
mIMETextNode
=
nullptr
;
mIMETextOffset
=
0
;
mIMETextLength
=
0
;
mComposition
-
>
EndHandlingComposition
(
this
)
;
mComposition
=
nullptr
;
NotifyEditorObservers
(
eNotifyEditorObserversOfEnd
)
;
}
NS_IMETHODIMP
EditorBase
:
:
ForceCompositionEnd
(
)
{
return
CommitComposition
(
)
;
}
nsresult
EditorBase
:
:
CommitComposition
(
)
{
nsPresContext
*
pc
=
GetPresContext
(
)
;
if
(
!
pc
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
mComposition
?
IMEStateManager
:
:
NotifyIME
(
REQUEST_TO_COMMIT_COMPOSITION
pc
)
:
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetPreferredIMEState
(
IMEState
*
aState
)
{
NS_ENSURE_ARG_POINTER
(
aState
)
;
aState
-
>
mEnabled
=
IMEState
:
:
ENABLED
;
aState
-
>
mOpen
=
IMEState
:
:
DONT_CHANGE_OPEN_STATE
;
if
(
IsReadonly
(
)
|
|
IsDisabled
(
)
)
{
aState
-
>
mEnabled
=
IMEState
:
:
DISABLED
;
return
NS_OK
;
}
nsCOMPtr
<
nsIContent
>
content
=
GetRoot
(
)
;
NS_ENSURE_TRUE
(
content
NS_ERROR_FAILURE
)
;
nsIFrame
*
frame
=
content
-
>
GetPrimaryFrame
(
)
;
NS_ENSURE_TRUE
(
frame
NS_ERROR_FAILURE
)
;
switch
(
frame
-
>
StyleUIReset
(
)
-
>
mIMEMode
)
{
case
NS_STYLE_IME_MODE_AUTO
:
if
(
IsPasswordEditor
(
)
)
aState
-
>
mEnabled
=
IMEState
:
:
PASSWORD
;
break
;
case
NS_STYLE_IME_MODE_DISABLED
:
aState
-
>
mEnabled
=
IMEState
:
:
PASSWORD
;
break
;
case
NS_STYLE_IME_MODE_ACTIVE
:
aState
-
>
mOpen
=
IMEState
:
:
OPEN
;
break
;
case
NS_STYLE_IME_MODE_INACTIVE
:
aState
-
>
mOpen
=
IMEState
:
:
CLOSED
;
break
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetComposing
(
bool
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aResult
)
;
*
aResult
=
IsIMEComposing
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetRootElement
(
nsIDOMElement
*
*
aRootElement
)
{
NS_ENSURE_ARG_POINTER
(
aRootElement
)
;
NS_ENSURE_TRUE
(
mRootElement
NS_ERROR_NOT_AVAILABLE
)
;
nsCOMPtr
<
nsIDOMElement
>
rootElement
=
do_QueryInterface
(
mRootElement
)
;
rootElement
.
forget
(
aRootElement
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
StartOperation
(
EditAction
opID
nsIEditor
:
:
EDirection
aDirection
)
{
mAction
=
opID
;
mDirection
=
aDirection
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
EndOperation
(
)
{
mAction
=
EditAction
:
:
none
;
mDirection
=
eNone
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
CloneAttribute
(
const
nsAString
&
aAttribute
nsIDOMNode
*
aDestNode
nsIDOMNode
*
aSourceNode
)
{
NS_ENSURE_TRUE
(
aDestNode
&
&
aSourceNode
NS_ERROR_NULL_POINTER
)
;
if
(
NS_WARN_IF
(
aAttribute
.
IsEmpty
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
Element
>
destElement
=
do_QueryInterface
(
aDestNode
)
;
nsCOMPtr
<
Element
>
sourceElement
=
do_QueryInterface
(
aSourceNode
)
;
NS_ENSURE_TRUE
(
destElement
&
&
sourceElement
NS_ERROR_NO_INTERFACE
)
;
RefPtr
<
nsAtom
>
attribute
=
NS_Atomize
(
aAttribute
)
;
return
CloneAttribute
(
attribute
destElement
sourceElement
)
;
}
nsresult
EditorBase
:
:
CloneAttribute
(
nsAtom
*
aAttribute
Element
*
aDestElement
Element
*
aSourceElement
)
{
nsAutoString
attrValue
;
if
(
aSourceElement
-
>
GetAttr
(
kNameSpaceID_None
aAttribute
attrValue
)
)
{
return
SetAttribute
(
aDestElement
aAttribute
attrValue
)
;
}
return
RemoveAttribute
(
aDestElement
aAttribute
)
;
}
NS_IMETHODIMP
EditorBase
:
:
CloneAttributes
(
nsIDOMNode
*
aDest
nsIDOMNode
*
aSource
)
{
NS_ENSURE_TRUE
(
aDest
&
&
aSource
NS_ERROR_NULL_POINTER
)
;
nsCOMPtr
<
Element
>
dest
=
do_QueryInterface
(
aDest
)
;
nsCOMPtr
<
Element
>
source
=
do_QueryInterface
(
aSource
)
;
NS_ENSURE_TRUE
(
dest
&
&
source
NS_ERROR_NO_INTERFACE
)
;
CloneAttributes
(
dest
source
)
;
return
NS_OK
;
}
void
EditorBase
:
:
CloneAttributes
(
Element
*
aDest
Element
*
aSource
)
{
MOZ_ASSERT
(
aDest
&
&
aSource
)
;
AutoPlaceholderBatch
beginBatching
(
this
)
;
NS_ENSURE_TRUE
(
GetRoot
(
)
)
;
bool
destInBody
=
GetRoot
(
)
-
>
Contains
(
aDest
)
;
RefPtr
<
nsDOMAttributeMap
>
destAttributes
=
aDest
-
>
Attributes
(
)
;
while
(
RefPtr
<
Attr
>
attr
=
destAttributes
-
>
Item
(
0
)
)
{
if
(
destInBody
)
{
RemoveAttribute
(
aDest
attr
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
)
;
}
else
{
aDest
-
>
UnsetAttr
(
kNameSpaceID_None
attr
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
true
)
;
}
}
RefPtr
<
nsDOMAttributeMap
>
sourceAttributes
=
aSource
-
>
Attributes
(
)
;
uint32_t
sourceCount
=
sourceAttributes
-
>
Length
(
)
;
for
(
uint32_t
i
=
0
;
i
<
sourceCount
;
i
+
+
)
{
RefPtr
<
Attr
>
attr
=
sourceAttributes
-
>
Item
(
i
)
;
nsAutoString
value
;
attr
-
>
GetValue
(
value
)
;
if
(
destInBody
)
{
SetAttributeOrEquivalent
(
aDest
attr
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
value
false
)
;
}
else
{
SetAttributeOrEquivalent
(
aDest
attr
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
value
true
)
;
}
}
}
nsresult
EditorBase
:
:
ScrollSelectionIntoView
(
bool
aScrollToAnchor
)
{
nsISelectionController
*
selectionController
=
GetSelectionController
(
)
;
if
(
!
selectionController
)
{
return
NS_OK
;
}
int16_t
region
=
nsISelectionController
:
:
SELECTION_FOCUS_REGION
;
if
(
aScrollToAnchor
)
{
region
=
nsISelectionController
:
:
SELECTION_ANCHOR_REGION
;
}
selectionController
-
>
ScrollSelectionIntoView
(
nsISelectionController
:
:
SELECTION_NORMAL
region
nsISelectionController
:
:
SCROLL_OVERFLOW_HIDDEN
)
;
return
NS_OK
;
}
EditorRawDOMPoint
EditorBase
:
:
FindBetterInsertionPoint
(
const
EditorRawDOMPoint
&
aPoint
)
{
if
(
NS_WARN_IF
(
!
aPoint
.
IsSet
(
)
)
)
{
return
aPoint
;
}
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
if
(
aPoint
.
Container
(
)
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
return
aPoint
;
}
if
(
!
IsPlaintextEditor
(
)
)
{
return
aPoint
;
}
nsCOMPtr
<
nsINode
>
root
=
GetRoot
(
)
;
if
(
aPoint
.
Container
(
)
=
=
root
)
{
if
(
aPoint
.
IsStartOfContainer
(
)
&
&
aPoint
.
Container
(
)
-
>
HasChildren
(
)
&
&
aPoint
.
Container
(
)
-
>
GetFirstChild
(
)
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
return
EditorRawDOMPoint
(
aPoint
.
Container
(
)
-
>
GetFirstChild
(
)
0
)
;
}
if
(
!
aPoint
.
IsStartOfContainer
(
)
)
{
if
(
AsHTMLEditor
(
)
)
{
nsIContent
*
child
=
aPoint
.
GetPreviousSiblingOfChildAtOffset
(
)
;
if
(
child
&
&
child
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
if
(
NS_WARN_IF
(
child
-
>
Length
(
)
>
INT32_MAX
)
)
{
return
aPoint
;
}
return
EditorRawDOMPoint
(
child
child
-
>
Length
(
)
)
;
}
}
else
{
nsIContent
*
child
=
aPoint
.
Container
(
)
-
>
GetLastChild
(
)
;
while
(
child
)
{
if
(
child
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
if
(
NS_WARN_IF
(
child
-
>
Length
(
)
>
INT32_MAX
)
)
{
return
aPoint
;
}
return
EditorRawDOMPoint
(
child
child
-
>
Length
(
)
)
;
}
child
=
child
-
>
GetPreviousSibling
(
)
;
}
}
}
}
if
(
TextEditUtils
:
:
IsMozBR
(
aPoint
.
Container
(
)
)
&
&
aPoint
.
IsStartOfContainer
(
)
)
{
nsIContent
*
previousSibling
=
aPoint
.
Container
(
)
-
>
GetPreviousSibling
(
)
;
if
(
previousSibling
&
&
previousSibling
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
if
(
NS_WARN_IF
(
previousSibling
-
>
Length
(
)
>
INT32_MAX
)
)
{
return
aPoint
;
}
return
EditorRawDOMPoint
(
previousSibling
previousSibling
-
>
Length
(
)
)
;
}
nsINode
*
parentOfContainer
=
aPoint
.
Container
(
)
-
>
GetParentNode
(
)
;
if
(
parentOfContainer
&
&
parentOfContainer
=
=
root
)
{
return
EditorRawDOMPoint
(
parentOfContainer
aPoint
.
Container
(
)
-
>
AsContent
(
)
0
)
;
}
}
return
aPoint
;
}
nsresult
EditorBase
:
:
InsertTextImpl
(
nsIDocument
&
aDocument
const
nsAString
&
aStringToInsert
const
EditorRawDOMPoint
&
aPointToInsert
EditorRawDOMPoint
*
aPointAfterInsertedString
)
{
if
(
NS_WARN_IF
(
!
aPointToInsert
.
IsSet
(
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
MOZ_ASSERT
(
aPointToInsert
.
IsSetAndValid
(
)
)
;
if
(
!
ShouldHandleIMEComposition
(
)
&
&
aStringToInsert
.
IsEmpty
(
)
)
{
if
(
aPointAfterInsertedString
)
{
*
aPointAfterInsertedString
=
aPointToInsert
;
}
return
NS_OK
;
}
CheckedInt
<
int32_t
>
lengthToInsert
(
aStringToInsert
.
Length
(
)
)
;
if
(
NS_WARN_IF
(
!
lengthToInsert
.
isValid
(
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
EditorRawDOMPoint
pointToInsert
=
FindBetterInsertionPoint
(
aPointToInsert
)
;
if
(
!
pointToInsert
.
Container
(
)
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
nsIContent
*
child
=
nullptr
;
if
(
!
pointToInsert
.
IsStartOfContainer
(
)
&
&
(
child
=
pointToInsert
.
GetPreviousSiblingOfChildAtOffset
(
)
)
&
&
child
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
pointToInsert
.
Set
(
child
child
-
>
Length
(
)
)
;
}
else
if
(
!
pointToInsert
.
IsEndOfContainer
(
)
&
&
(
child
=
pointToInsert
.
GetChildAtOffset
(
)
)
&
&
child
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
pointToInsert
.
Set
(
child
0
)
;
}
}
if
(
ShouldHandleIMEComposition
(
)
)
{
CheckedInt
<
int32_t
>
newOffset
;
if
(
!
pointToInsert
.
Container
(
)
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
RefPtr
<
nsTextNode
>
newNode
=
EditorBase
:
:
CreateTextNode
(
aDocument
EmptyString
(
)
)
;
nsresult
rv
=
InsertNode
(
*
newNode
*
pointToInsert
.
Container
(
)
pointToInsert
.
Offset
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
pointToInsert
.
Set
(
newNode
0
)
;
newOffset
=
lengthToInsert
;
}
else
{
newOffset
=
lengthToInsert
+
pointToInsert
.
Offset
(
)
;
NS_ENSURE_TRUE
(
newOffset
.
isValid
(
)
NS_ERROR_FAILURE
)
;
}
nsresult
rv
=
InsertTextIntoTextNodeImpl
(
aStringToInsert
*
pointToInsert
.
Container
(
)
-
>
GetAsText
(
)
pointToInsert
.
Offset
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
aPointAfterInsertedString
)
{
aPointAfterInsertedString
-
>
Set
(
pointToInsert
.
Container
(
)
newOffset
.
value
(
)
)
;
}
return
NS_OK
;
}
if
(
pointToInsert
.
Container
(
)
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
CheckedInt
<
int32_t
>
newOffset
=
lengthToInsert
+
pointToInsert
.
Offset
(
)
;
NS_ENSURE_TRUE
(
newOffset
.
isValid
(
)
NS_ERROR_FAILURE
)
;
nsresult
rv
=
InsertTextIntoTextNodeImpl
(
aStringToInsert
*
pointToInsert
.
Container
(
)
-
>
GetAsText
(
)
pointToInsert
.
Offset
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
aPointAfterInsertedString
)
{
aPointAfterInsertedString
-
>
Set
(
pointToInsert
.
Container
(
)
newOffset
.
value
(
)
)
;
}
return
NS_OK
;
}
RefPtr
<
nsTextNode
>
newNode
=
EditorBase
:
:
CreateTextNode
(
aDocument
aStringToInsert
)
;
nsresult
rv
=
InsertNode
(
*
newNode
*
pointToInsert
.
Container
(
)
pointToInsert
.
Offset
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
aPointAfterInsertedString
)
{
aPointAfterInsertedString
-
>
Set
(
newNode
lengthToInsert
.
value
(
)
)
;
}
return
NS_OK
;
}
nsresult
EditorBase
:
:
InsertTextIntoTextNodeImpl
(
const
nsAString
&
aStringToInsert
Text
&
aTextNode
int32_t
aOffset
bool
aSuppressIME
)
{
RefPtr
<
EditTransactionBase
>
transaction
;
bool
isIMETransaction
=
false
;
RefPtr
<
Text
>
insertedTextNode
=
&
aTextNode
;
int32_t
insertedOffset
=
aOffset
;
if
(
ShouldHandleIMEComposition
(
)
&
&
!
aSuppressIME
)
{
if
(
!
mIMETextNode
)
{
mIMETextNode
=
&
aTextNode
;
mIMETextOffset
=
aOffset
;
}
transaction
=
CreateTxnForComposition
(
aStringToInsert
)
;
isIMETransaction
=
true
;
insertedTextNode
=
mIMETextNode
;
insertedOffset
=
mIMETextOffset
;
mIMETextLength
=
aStringToInsert
.
Length
(
)
;
}
else
{
transaction
=
CreateTxnForInsertText
(
aStringToInsert
aTextNode
aOffset
)
;
}
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
WillInsertText
(
static_cast
<
nsIDOMCharacterData
*
>
(
insertedTextNode
-
>
AsDOMNode
(
)
)
insertedOffset
aStringToInsert
)
;
}
}
BeginUpdateViewBatch
(
)
;
nsresult
rv
=
DoTransaction
(
transaction
)
;
EndUpdateViewBatch
(
)
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
DidInsertText
(
static_cast
<
nsIDOMCharacterData
*
>
(
insertedTextNode
-
>
AsDOMNode
(
)
)
insertedOffset
aStringToInsert
rv
)
;
}
}
if
(
isIMETransaction
&
&
mIMETextNode
)
{
uint32_t
len
=
mIMETextNode
-
>
Length
(
)
;
if
(
!
len
)
{
DeleteNode
(
mIMETextNode
)
;
mIMETextNode
=
nullptr
;
static_cast
<
CompositionTransaction
*
>
(
transaction
.
get
(
)
)
-
>
MarkFixed
(
)
;
}
}
return
rv
;
}
nsresult
EditorBase
:
:
SelectEntireDocument
(
Selection
*
aSelection
)
{
if
(
!
aSelection
)
{
return
NS_ERROR_NULL_POINTER
;
}
Element
*
rootElement
=
GetRoot
(
)
;
if
(
!
rootElement
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
ErrorResult
errorResult
;
aSelection
-
>
SelectAllChildren
(
*
rootElement
errorResult
)
;
return
errorResult
.
StealNSResult
(
)
;
}
nsINode
*
EditorBase
:
:
GetFirstEditableNode
(
nsINode
*
aRoot
)
{
MOZ_ASSERT
(
aRoot
)
;
nsIContent
*
node
=
GetLeftmostChild
(
aRoot
)
;
if
(
node
&
&
!
IsEditable
(
node
)
)
{
node
=
GetNextEditableNode
(
*
node
)
;
}
return
(
node
!
=
aRoot
)
?
node
:
nullptr
;
}
nsresult
EditorBase
:
:
NotifyDocumentListeners
(
TDocumentListenerNotification
aNotificationType
)
{
if
(
!
mDocStateListeners
.
Length
(
)
)
{
return
NS_OK
;
}
AutoDocumentStateListenerArray
listeners
(
mDocStateListeners
)
;
nsresult
rv
=
NS_OK
;
switch
(
aNotificationType
)
{
case
eDocumentCreated
:
for
(
auto
&
listener
:
listeners
)
{
rv
=
listener
-
>
NotifyDocumentCreated
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
}
break
;
case
eDocumentToBeDestroyed
:
for
(
auto
&
listener
:
listeners
)
{
rv
=
listener
-
>
NotifyDocumentWillBeDestroyed
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
}
break
;
case
eDocumentStateChanged
:
{
bool
docIsDirty
;
rv
=
GetDocumentModified
(
&
docIsDirty
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
static_cast
<
int8_t
>
(
docIsDirty
)
=
=
mDocDirtyState
)
{
return
NS_OK
;
}
mDocDirtyState
=
docIsDirty
;
for
(
auto
&
listener
:
listeners
)
{
rv
=
listener
-
>
NotifyDocumentStateChanged
(
mDocDirtyState
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
}
break
;
}
default
:
NS_NOTREACHED
(
"
Unknown
notification
"
)
;
}
return
rv
;
}
nsresult
EditorBase
:
:
SetTextImpl
(
Selection
&
aSelection
const
nsAString
&
aString
Text
&
aCharData
)
{
const
uint32_t
length
=
aCharData
.
Length
(
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
setText
nsIEditor
:
:
eNext
)
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
if
(
length
)
{
listener
-
>
WillDeleteText
(
static_cast
<
nsIDOMCharacterData
*
>
(
aCharData
.
AsDOMNode
(
)
)
0
length
)
;
}
if
(
!
aString
.
IsEmpty
(
)
)
{
listener
-
>
WillInsertText
(
static_cast
<
nsIDOMCharacterData
*
>
(
aCharData
.
AsDOMNode
(
)
)
0
aString
)
;
}
}
}
nsresult
rv
=
aCharData
.
SetData
(
aString
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
{
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
DebugOnly
<
nsresult
>
rv
=
selection
-
>
Collapse
(
&
aCharData
aString
.
Length
(
)
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Selection
could
not
be
collapsed
after
insert
"
)
;
}
mRangeUpdater
.
SelAdjDeleteText
(
&
aCharData
0
length
)
;
mRangeUpdater
.
SelAdjInsertText
(
aCharData
0
aString
)
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
if
(
length
)
{
listener
-
>
DidDeleteText
(
static_cast
<
nsIDOMCharacterData
*
>
(
aCharData
.
AsDOMNode
(
)
)
0
length
rv
)
;
}
if
(
!
aString
.
IsEmpty
(
)
)
{
listener
-
>
DidInsertText
(
static_cast
<
nsIDOMCharacterData
*
>
(
aCharData
.
AsDOMNode
(
)
)
0
aString
rv
)
;
}
}
}
return
rv
;
}
already_AddRefed
<
InsertTextTransaction
>
EditorBase
:
:
CreateTxnForInsertText
(
const
nsAString
&
aStringToInsert
Text
&
aTextNode
int32_t
aOffset
)
{
RefPtr
<
InsertTextTransaction
>
transaction
=
new
InsertTextTransaction
(
aTextNode
aOffset
aStringToInsert
*
this
&
mRangeUpdater
)
;
return
transaction
.
forget
(
)
;
}
nsresult
EditorBase
:
:
DeleteText
(
nsGenericDOMDataNode
&
aCharData
uint32_t
aOffset
uint32_t
aLength
)
{
RefPtr
<
DeleteTextTransaction
>
transaction
=
CreateTxnForDeleteText
(
aCharData
aOffset
aLength
)
;
NS_ENSURE_STATE
(
transaction
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
deleteText
nsIEditor
:
:
ePrevious
)
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
WillDeleteText
(
static_cast
<
nsIDOMCharacterData
*
>
(
GetAsDOMNode
(
&
aCharData
)
)
aOffset
aLength
)
;
}
}
nsresult
rv
=
DoTransaction
(
transaction
)
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
DidDeleteText
(
static_cast
<
nsIDOMCharacterData
*
>
(
GetAsDOMNode
(
&
aCharData
)
)
aOffset
aLength
rv
)
;
}
}
return
rv
;
}
already_AddRefed
<
DeleteTextTransaction
>
EditorBase
:
:
CreateTxnForDeleteText
(
nsGenericDOMDataNode
&
aCharData
uint32_t
aOffset
uint32_t
aLength
)
{
RefPtr
<
DeleteTextTransaction
>
deleteTextTransaction
=
new
DeleteTextTransaction
(
*
this
aCharData
aOffset
aLength
&
mRangeUpdater
)
;
if
(
NS_WARN_IF
(
!
deleteTextTransaction
-
>
CanDoIt
(
)
)
)
{
return
nullptr
;
}
return
deleteTextTransaction
.
forget
(
)
;
}
already_AddRefed
<
SplitNodeTransaction
>
EditorBase
:
:
CreateTxnForSplitNode
(
const
EditorRawDOMPoint
&
aStartOfRightNode
)
{
MOZ_ASSERT
(
aStartOfRightNode
.
IsSetAndValid
(
)
)
;
RefPtr
<
SplitNodeTransaction
>
transaction
=
new
SplitNodeTransaction
(
*
this
aStartOfRightNode
)
;
return
transaction
.
forget
(
)
;
}
already_AddRefed
<
JoinNodeTransaction
>
EditorBase
:
:
CreateTxnForJoinNode
(
nsINode
&
aLeftNode
nsINode
&
aRightNode
)
{
RefPtr
<
JoinNodeTransaction
>
joinNodeTransaction
=
new
JoinNodeTransaction
(
*
this
aLeftNode
aRightNode
)
;
if
(
NS_WARN_IF
(
!
joinNodeTransaction
-
>
CanDoIt
(
)
)
)
{
return
nullptr
;
}
return
joinNodeTransaction
.
forget
(
)
;
}
struct
SavedRange
final
{
RefPtr
<
Selection
>
mSelection
;
nsCOMPtr
<
nsINode
>
mStartContainer
;
nsCOMPtr
<
nsINode
>
mEndContainer
;
int32_t
mStartOffset
;
int32_t
mEndOffset
;
}
;
void
EditorBase
:
:
SplitNodeImpl
(
const
EditorDOMPoint
&
aStartOfRightNode
nsIContent
&
aNewLeftNode
ErrorResult
&
aError
)
{
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
;
}
if
(
NS_WARN_IF
(
!
aStartOfRightNode
.
IsSet
(
)
)
)
{
aError
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
;
}
MOZ_ASSERT
(
aStartOfRightNode
.
IsSetAndValid
(
)
)
;
AutoTArray
<
SavedRange
10
>
savedRanges
;
for
(
SelectionType
selectionType
:
kPresentSelectionTypes
)
{
SavedRange
range
;
range
.
mSelection
=
GetSelection
(
selectionType
)
;
if
(
NS_WARN_IF
(
!
range
.
mSelection
&
&
selectionType
=
=
SelectionType
:
:
eNormal
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
else
if
(
!
range
.
mSelection
)
{
continue
;
}
for
(
uint32_t
j
=
0
;
j
<
range
.
mSelection
-
>
RangeCount
(
)
;
+
+
j
)
{
RefPtr
<
nsRange
>
r
=
range
.
mSelection
-
>
GetRangeAt
(
j
)
;
MOZ_ASSERT
(
r
-
>
IsPositioned
(
)
)
;
range
.
mStartContainer
=
r
-
>
GetStartContainer
(
)
;
range
.
mStartOffset
=
r
-
>
StartOffset
(
)
;
range
.
mEndContainer
=
r
-
>
GetEndContainer
(
)
;
range
.
mEndOffset
=
r
-
>
EndOffset
(
)
;
savedRanges
.
AppendElement
(
range
)
;
}
}
nsCOMPtr
<
nsINode
>
parent
=
aStartOfRightNode
.
Container
(
)
-
>
GetParentNode
(
)
;
if
(
NS_WARN_IF
(
!
parent
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsIContent
*
firstChildOfRightNode
=
aStartOfRightNode
.
GetChildAtOffset
(
)
;
parent
-
>
InsertBefore
(
aNewLeftNode
aStartOfRightNode
.
Container
(
)
aError
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
;
}
if
(
!
aStartOfRightNode
.
IsStartOfContainer
(
)
)
{
Text
*
rightAsText
=
aStartOfRightNode
.
Container
(
)
-
>
GetAsText
(
)
;
Text
*
leftAsText
=
aNewLeftNode
.
GetAsText
(
)
;
if
(
rightAsText
&
&
leftAsText
)
{
nsAutoString
leftText
;
rightAsText
-
>
SubstringData
(
0
aStartOfRightNode
.
Offset
(
)
leftText
)
;
rightAsText
-
>
DeleteData
(
0
aStartOfRightNode
.
Offset
(
)
)
;
leftAsText
-
>
GetAsText
(
)
-
>
SetData
(
leftText
)
;
}
else
{
MOZ_DIAGNOSTIC_ASSERT
(
!
rightAsText
&
&
!
leftAsText
)
;
if
(
!
firstChildOfRightNode
)
{
MoveAllChildren
(
*
aStartOfRightNode
.
Container
(
)
EditorRawDOMPoint
(
&
aNewLeftNode
0
)
aError
)
;
NS_WARNING_ASSERTION
(
!
aError
.
Failed
(
)
"
Failed
to
move
all
children
from
the
right
node
to
the
left
node
"
)
;
}
else
if
(
NS_WARN_IF
(
aStartOfRightNode
.
Container
(
)
!
=
firstChildOfRightNode
-
>
GetParentNode
(
)
)
)
{
}
else
{
MovePreviousSiblings
(
*
firstChildOfRightNode
EditorRawDOMPoint
(
&
aNewLeftNode
0
)
aError
)
;
NS_WARNING_ASSERTION
(
!
aError
.
Failed
(
)
"
Failed
to
move
some
children
from
the
right
node
to
the
left
node
"
)
;
}
}
}
aError
.
SuppressException
(
)
;
nsCOMPtr
<
nsIPresShell
>
ps
=
GetPresShell
(
)
;
if
(
ps
)
{
ps
-
>
FlushPendingNotifications
(
FlushType
:
:
Frames
)
;
}
NS_WARNING_ASSERTION
(
!
Destroyed
(
)
"
The
editor
is
destroyed
during
splitting
a
node
"
)
;
bool
shouldSetSelection
=
GetShouldTxnSetSelection
(
)
;
RefPtr
<
Selection
>
previousSelection
;
for
(
size_t
i
=
0
;
i
<
savedRanges
.
Length
(
)
;
+
+
i
)
{
SavedRange
&
range
=
savedRanges
[
i
]
;
if
(
range
.
mSelection
!
=
previousSelection
)
{
range
.
mSelection
-
>
RemoveAllRanges
(
aError
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
;
}
previousSelection
=
range
.
mSelection
;
}
if
(
shouldSetSelection
&
&
range
.
mSelection
-
>
Type
(
)
=
=
SelectionType
:
:
eNormal
)
{
continue
;
}
if
(
range
.
mStartContainer
=
=
aStartOfRightNode
.
Container
(
)
)
{
if
(
static_cast
<
uint32_t
>
(
range
.
mStartOffset
)
<
aStartOfRightNode
.
Offset
(
)
)
{
range
.
mStartContainer
=
&
aNewLeftNode
;
}
else
{
range
.
mStartOffset
-
=
aStartOfRightNode
.
Offset
(
)
;
}
}
if
(
range
.
mEndContainer
=
=
aStartOfRightNode
.
Container
(
)
)
{
if
(
static_cast
<
uint32_t
>
(
range
.
mEndOffset
)
<
aStartOfRightNode
.
Offset
(
)
)
{
range
.
mEndContainer
=
&
aNewLeftNode
;
}
else
{
range
.
mEndOffset
-
=
aStartOfRightNode
.
Offset
(
)
;
}
}
RefPtr
<
nsRange
>
newRange
;
nsresult
rv
=
nsRange
:
:
CreateRange
(
range
.
mStartContainer
range
.
mStartOffset
range
.
mEndContainer
range
.
mEndOffset
getter_AddRefs
(
newRange
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aError
.
Throw
(
rv
)
;
return
;
}
range
.
mSelection
-
>
AddRange
(
*
newRange
aError
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
;
}
}
}
nsresult
EditorBase
:
:
JoinNodesImpl
(
nsINode
*
aNodeToKeep
nsINode
*
aNodeToJoin
nsINode
*
aParent
)
{
MOZ_ASSERT
(
aNodeToKeep
)
;
MOZ_ASSERT
(
aNodeToJoin
)
;
MOZ_ASSERT
(
aParent
)
;
uint32_t
firstNodeLength
=
aNodeToJoin
-
>
Length
(
)
;
int32_t
joinOffset
;
GetNodeLocation
(
aNodeToJoin
&
joinOffset
)
;
int32_t
keepOffset
;
nsINode
*
parent
=
GetNodeLocation
(
aNodeToKeep
&
keepOffset
)
;
AutoTArray
<
SavedRange
10
>
savedRanges
;
for
(
SelectionType
selectionType
:
kPresentSelectionTypes
)
{
SavedRange
range
;
range
.
mSelection
=
GetSelection
(
selectionType
)
;
if
(
selectionType
=
=
SelectionType
:
:
eNormal
)
{
NS_ENSURE_TRUE
(
range
.
mSelection
NS_ERROR_NULL_POINTER
)
;
}
else
if
(
!
range
.
mSelection
)
{
continue
;
}
for
(
uint32_t
j
=
0
;
j
<
range
.
mSelection
-
>
RangeCount
(
)
;
+
+
j
)
{
RefPtr
<
nsRange
>
r
=
range
.
mSelection
-
>
GetRangeAt
(
j
)
;
MOZ_ASSERT
(
r
-
>
IsPositioned
(
)
)
;
range
.
mStartContainer
=
r
-
>
GetStartContainer
(
)
;
range
.
mStartOffset
=
r
-
>
StartOffset
(
)
;
range
.
mEndContainer
=
r
-
>
GetEndContainer
(
)
;
range
.
mEndOffset
=
r
-
>
EndOffset
(
)
;
if
(
range
.
mStartContainer
)
{
if
(
range
.
mStartContainer
=
=
parent
&
&
joinOffset
<
range
.
mStartOffset
&
&
range
.
mStartOffset
<
=
keepOffset
)
{
range
.
mStartContainer
=
aNodeToJoin
;
range
.
mStartOffset
=
firstNodeLength
;
}
if
(
range
.
mEndContainer
=
=
parent
&
&
joinOffset
<
range
.
mEndOffset
&
&
range
.
mEndOffset
<
=
keepOffset
)
{
range
.
mEndContainer
=
aNodeToJoin
;
range
.
mEndOffset
=
firstNodeLength
;
}
}
savedRanges
.
AppendElement
(
range
)
;
}
}
if
(
IsTextNode
(
aNodeToKeep
)
&
&
IsTextNode
(
aNodeToJoin
)
)
{
nsAutoString
rightText
;
nsAutoString
leftText
;
aNodeToKeep
-
>
GetAsText
(
)
-
>
GetData
(
rightText
)
;
aNodeToJoin
-
>
GetAsText
(
)
-
>
GetData
(
leftText
)
;
leftText
+
=
rightText
;
aNodeToKeep
-
>
GetAsText
(
)
-
>
SetData
(
leftText
)
;
}
else
{
nsCOMPtr
<
nsINodeList
>
childNodes
=
aNodeToJoin
-
>
ChildNodes
(
)
;
MOZ_ASSERT
(
childNodes
)
;
nsCOMPtr
<
nsIContent
>
firstNode
=
aNodeToKeep
-
>
GetFirstChild
(
)
;
for
(
uint32_t
i
=
childNodes
-
>
Length
(
)
;
i
;
-
-
i
)
{
nsCOMPtr
<
nsIContent
>
childNode
=
childNodes
-
>
Item
(
i
-
1
)
;
if
(
childNode
)
{
ErrorResult
err
;
aNodeToKeep
-
>
InsertBefore
(
*
childNode
firstNode
err
)
;
NS_ENSURE_TRUE
(
!
err
.
Failed
(
)
err
.
StealNSResult
(
)
)
;
firstNode
=
childNode
.
forget
(
)
;
}
}
}
ErrorResult
err
;
aParent
-
>
RemoveChild
(
*
aNodeToJoin
err
)
;
bool
shouldSetSelection
=
GetShouldTxnSetSelection
(
)
;
RefPtr
<
Selection
>
previousSelection
;
for
(
size_t
i
=
0
;
i
<
savedRanges
.
Length
(
)
;
+
+
i
)
{
SavedRange
&
range
=
savedRanges
[
i
]
;
if
(
range
.
mSelection
!
=
previousSelection
)
{
nsresult
rv
=
range
.
mSelection
-
>
RemoveAllRanges
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
previousSelection
=
range
.
mSelection
;
}
if
(
shouldSetSelection
&
&
range
.
mSelection
-
>
Type
(
)
=
=
SelectionType
:
:
eNormal
)
{
continue
;
}
if
(
range
.
mStartContainer
=
=
aNodeToJoin
)
{
range
.
mStartContainer
=
aNodeToKeep
;
}
else
if
(
range
.
mStartContainer
=
=
aNodeToKeep
)
{
range
.
mStartOffset
+
=
firstNodeLength
;
}
if
(
range
.
mEndContainer
=
=
aNodeToJoin
)
{
range
.
mEndContainer
=
aNodeToKeep
;
}
else
if
(
range
.
mEndContainer
=
=
aNodeToKeep
)
{
range
.
mEndOffset
+
=
firstNodeLength
;
}
RefPtr
<
nsRange
>
newRange
;
nsresult
rv
=
nsRange
:
:
CreateRange
(
range
.
mStartContainer
range
.
mStartOffset
range
.
mEndContainer
range
.
mEndOffset
getter_AddRefs
(
newRange
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
range
.
mSelection
-
>
AddRange
(
newRange
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
if
(
shouldSetSelection
)
{
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_NULL_POINTER
)
;
selection
-
>
Collapse
(
aNodeToKeep
AssertedCast
<
int32_t
>
(
firstNodeLength
)
)
;
}
return
err
.
StealNSResult
(
)
;
}
int32_t
EditorBase
:
:
GetChildOffset
(
nsIDOMNode
*
aChild
nsIDOMNode
*
aParent
)
{
MOZ_ASSERT
(
aChild
&
&
aParent
)
;
nsCOMPtr
<
nsINode
>
parent
=
do_QueryInterface
(
aParent
)
;
nsCOMPtr
<
nsINode
>
child
=
do_QueryInterface
(
aChild
)
;
MOZ_ASSERT
(
parent
&
&
child
)
;
return
GetChildOffset
(
child
parent
)
;
}
int32_t
EditorBase
:
:
GetChildOffset
(
nsINode
*
aChild
nsINode
*
aParent
)
{
MOZ_ASSERT
(
aChild
)
;
MOZ_ASSERT
(
aParent
)
;
if
(
aParent
-
>
GetFirstChild
(
)
=
=
aChild
)
{
MOZ_ASSERT
(
aParent
-
>
IndexOf
(
aChild
)
=
=
0
)
;
return
0
;
}
if
(
aParent
-
>
GetLastChild
(
)
=
=
aChild
)
{
int32_t
lastChildIndex
=
static_cast
<
int32_t
>
(
aParent
-
>
Length
(
)
-
1
)
;
MOZ_ASSERT
(
aParent
-
>
IndexOf
(
aChild
)
=
=
lastChildIndex
)
;
return
lastChildIndex
;
}
int32_t
index
=
aParent
-
>
IndexOf
(
aChild
)
;
MOZ_ASSERT
(
index
!
=
-
1
)
;
return
index
;
}
already_AddRefed
<
nsIDOMNode
>
EditorBase
:
:
GetNodeLocation
(
nsIDOMNode
*
aChild
int32_t
*
outOffset
)
{
MOZ_ASSERT
(
aChild
&
&
outOffset
)
;
NS_ENSURE_TRUE
(
aChild
&
&
outOffset
nullptr
)
;
*
outOffset
=
-
1
;
nsCOMPtr
<
nsIDOMNode
>
parent
;
MOZ_ALWAYS_SUCCEEDS
(
aChild
-
>
GetParentNode
(
getter_AddRefs
(
parent
)
)
)
;
if
(
parent
)
{
*
outOffset
=
GetChildOffset
(
aChild
parent
)
;
}
return
parent
.
forget
(
)
;
}
nsINode
*
EditorBase
:
:
GetNodeLocation
(
nsINode
*
aChild
int32_t
*
aOffset
)
{
MOZ_ASSERT
(
aChild
)
;
MOZ_ASSERT
(
aOffset
)
;
nsINode
*
parent
=
aChild
-
>
GetParentNode
(
)
;
if
(
parent
)
{
*
aOffset
=
GetChildOffset
(
aChild
parent
)
;
MOZ_ASSERT
(
*
aOffset
!
=
-
1
)
;
}
else
{
*
aOffset
=
-
1
;
}
return
parent
;
}
nsresult
EditorBase
:
:
GetLengthOfDOMNode
(
nsIDOMNode
*
aNode
uint32_t
&
aCount
)
{
aCount
=
0
;
nsCOMPtr
<
nsINode
>
node
=
do_QueryInterface
(
aNode
)
;
NS_ENSURE_TRUE
(
node
NS_ERROR_NULL_POINTER
)
;
aCount
=
node
-
>
Length
(
)
;
return
NS_OK
;
}
nsIContent
*
EditorBase
:
:
GetPreviousNodeInternal
(
nsINode
&
aNode
bool
aFindEditableNode
bool
aNoBlockCrossing
)
{
if
(
!
IsDescendantOfEditorRoot
(
&
aNode
)
)
{
return
nullptr
;
}
return
FindNode
(
&
aNode
false
aFindEditableNode
aNoBlockCrossing
)
;
}
nsIContent
*
EditorBase
:
:
GetPreviousNodeInternal
(
const
EditorRawDOMPoint
&
aPoint
bool
aFindEditableNode
bool
aNoBlockCrossing
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
NS_WARNING_ASSERTION
(
!
aPoint
.
Container
(
)
-
>
IsNodeOfType
(
nsINode
:
:
eDATA_NODE
)
|
|
aPoint
.
Container
(
)
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
"
GetPreviousNodeInternal
(
)
doesn
'
t
assume
that
the
start
point
is
a
"
"
data
node
except
text
node
"
)
;
if
(
aPoint
.
IsStartOfContainer
(
)
|
|
aPoint
.
Container
(
)
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
if
(
aNoBlockCrossing
&
&
IsBlockNode
(
aPoint
.
Container
(
)
)
)
{
return
nullptr
;
}
return
GetPreviousNodeInternal
(
*
aPoint
.
Container
(
)
aFindEditableNode
aNoBlockCrossing
)
;
}
if
(
aPoint
.
GetChildAtOffset
(
)
)
{
return
GetPreviousNodeInternal
(
*
aPoint
.
GetChildAtOffset
(
)
aFindEditableNode
aNoBlockCrossing
)
;
}
nsIContent
*
rightMostNode
=
GetRightmostChild
(
aPoint
.
Container
(
)
aNoBlockCrossing
)
;
if
(
!
rightMostNode
)
{
return
nullptr
;
}
if
(
!
aFindEditableNode
|
|
IsEditable
(
rightMostNode
)
)
{
return
rightMostNode
;
}
return
GetPreviousNodeInternal
(
*
rightMostNode
aFindEditableNode
aNoBlockCrossing
)
;
}
nsIContent
*
EditorBase
:
:
GetNextNodeInternal
(
nsINode
&
aNode
bool
aFindEditableNode
bool
aNoBlockCrossing
)
{
if
(
!
IsDescendantOfEditorRoot
(
&
aNode
)
)
{
return
nullptr
;
}
return
FindNode
(
&
aNode
true
aFindEditableNode
aNoBlockCrossing
)
;
}
nsIContent
*
EditorBase
:
:
GetNextNodeInternal
(
const
EditorRawDOMPoint
&
aPoint
bool
aFindEditableNode
bool
aNoBlockCrossing
)
{
MOZ_ASSERT
(
aPoint
.
IsSetAndValid
(
)
)
;
NS_WARNING_ASSERTION
(
!
aPoint
.
Container
(
)
-
>
IsNodeOfType
(
nsINode
:
:
eDATA_NODE
)
|
|
aPoint
.
Container
(
)
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
"
GetNextNodeInternal
(
)
doesn
'
t
assume
that
the
start
point
is
a
"
"
data
node
except
text
node
"
)
;
EditorRawDOMPoint
point
(
aPoint
)
;
if
(
point
.
Container
(
)
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
point
.
Set
(
point
.
Container
(
)
)
;
bool
advanced
=
point
.
AdvanceOffset
(
)
;
if
(
NS_WARN_IF
(
!
advanced
)
)
{
return
nullptr
;
}
}
if
(
point
.
GetChildAtOffset
(
)
)
{
if
(
aNoBlockCrossing
&
&
IsBlockNode
(
point
.
GetChildAtOffset
(
)
)
)
{
return
point
.
GetChildAtOffset
(
)
;
}
nsIContent
*
leftMostNode
=
GetLeftmostChild
(
point
.
GetChildAtOffset
(
)
aNoBlockCrossing
)
;
if
(
!
leftMostNode
)
{
return
point
.
GetChildAtOffset
(
)
;
}
if
(
!
IsDescendantOfEditorRoot
(
leftMostNode
)
)
{
return
nullptr
;
}
if
(
!
aFindEditableNode
|
|
IsEditable
(
leftMostNode
)
)
{
return
leftMostNode
;
}
return
GetNextNodeInternal
(
*
leftMostNode
aFindEditableNode
aNoBlockCrossing
)
;
}
if
(
aNoBlockCrossing
&
&
IsBlockNode
(
point
.
Container
(
)
)
)
{
return
nullptr
;
}
return
GetNextNodeInternal
(
*
point
.
Container
(
)
aFindEditableNode
aNoBlockCrossing
)
;
}
nsIContent
*
EditorBase
:
:
FindNextLeafNode
(
nsINode
*
aCurrentNode
bool
aGoForward
bool
bNoBlockCrossing
)
{
NS_PRECONDITION
(
IsDescendantOfEditorRoot
(
aCurrentNode
)
&
&
!
IsEditorRoot
(
aCurrentNode
)
"
Bogus
arguments
"
)
;
nsINode
*
cur
=
aCurrentNode
;
for
(
;
;
)
{
nsIContent
*
sibling
=
aGoForward
?
cur
-
>
GetNextSibling
(
)
:
cur
-
>
GetPreviousSibling
(
)
;
if
(
sibling
)
{
if
(
bNoBlockCrossing
&
&
IsBlockNode
(
sibling
)
)
{
return
sibling
;
}
nsIContent
*
leaf
=
aGoForward
?
GetLeftmostChild
(
sibling
bNoBlockCrossing
)
:
GetRightmostChild
(
sibling
bNoBlockCrossing
)
;
if
(
!
leaf
)
{
return
sibling
;
}
return
leaf
;
}
nsINode
*
parent
=
cur
-
>
GetParentNode
(
)
;
if
(
!
parent
)
{
return
nullptr
;
}
NS_ASSERTION
(
IsDescendantOfEditorRoot
(
parent
)
"
We
started
with
a
proper
descendant
of
root
and
should
stop
"
"
if
we
ever
hit
the
root
so
we
better
have
a
descendant
of
"
"
root
now
!
"
)
;
if
(
IsEditorRoot
(
parent
)
|
|
(
bNoBlockCrossing
&
&
IsBlockNode
(
parent
)
)
)
{
return
nullptr
;
}
cur
=
parent
;
}
NS_NOTREACHED
(
"
What
part
of
for
(
;
;
)
do
you
not
understand
?
"
)
;
return
nullptr
;
}
nsIContent
*
EditorBase
:
:
FindNode
(
nsINode
*
aCurrentNode
bool
aGoForward
bool
aEditableNode
bool
bNoBlockCrossing
)
{
if
(
IsEditorRoot
(
aCurrentNode
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIContent
>
candidate
=
FindNextLeafNode
(
aCurrentNode
aGoForward
bNoBlockCrossing
)
;
if
(
!
candidate
)
{
return
nullptr
;
}
if
(
!
aEditableNode
|
|
IsEditable
(
candidate
)
)
{
return
candidate
;
}
return
FindNode
(
candidate
aGoForward
aEditableNode
bNoBlockCrossing
)
;
}
nsIContent
*
EditorBase
:
:
GetRightmostChild
(
nsINode
*
aCurrentNode
bool
bNoBlockCrossing
)
{
NS_ENSURE_TRUE
(
aCurrentNode
nullptr
)
;
nsIContent
*
cur
=
aCurrentNode
-
>
GetLastChild
(
)
;
if
(
!
cur
)
{
return
nullptr
;
}
for
(
;
;
)
{
if
(
bNoBlockCrossing
&
&
IsBlockNode
(
cur
)
)
{
return
cur
;
}
nsIContent
*
next
=
cur
-
>
GetLastChild
(
)
;
if
(
!
next
)
{
return
cur
;
}
cur
=
next
;
}
NS_NOTREACHED
(
"
What
part
of
for
(
;
;
)
do
you
not
understand
?
"
)
;
return
nullptr
;
}
nsIContent
*
EditorBase
:
:
GetLeftmostChild
(
nsINode
*
aCurrentNode
bool
bNoBlockCrossing
)
{
NS_ENSURE_TRUE
(
aCurrentNode
nullptr
)
;
nsIContent
*
cur
=
aCurrentNode
-
>
GetFirstChild
(
)
;
if
(
!
cur
)
{
return
nullptr
;
}
for
(
;
;
)
{
if
(
bNoBlockCrossing
&
&
IsBlockNode
(
cur
)
)
{
return
cur
;
}
nsIContent
*
next
=
cur
-
>
GetFirstChild
(
)
;
if
(
!
next
)
{
return
cur
;
}
cur
=
next
;
}
NS_NOTREACHED
(
"
What
part
of
for
(
;
;
)
do
you
not
understand
?
"
)
;
return
nullptr
;
}
bool
EditorBase
:
:
IsBlockNode
(
nsINode
*
aNode
)
{
return
false
;
}
bool
EditorBase
:
:
CanContain
(
nsINode
&
aParent
nsIContent
&
aChild
)
const
{
switch
(
aParent
.
NodeType
(
)
)
{
case
nsIDOMNode
:
:
ELEMENT_NODE
:
case
nsIDOMNode
:
:
DOCUMENT_FRAGMENT_NODE
:
return
TagCanContain
(
*
aParent
.
NodeInfo
(
)
-
>
NameAtom
(
)
aChild
)
;
}
return
false
;
}
bool
EditorBase
:
:
CanContainTag
(
nsINode
&
aParent
nsAtom
&
aChildTag
)
const
{
switch
(
aParent
.
NodeType
(
)
)
{
case
nsIDOMNode
:
:
ELEMENT_NODE
:
case
nsIDOMNode
:
:
DOCUMENT_FRAGMENT_NODE
:
return
TagCanContainTag
(
*
aParent
.
NodeInfo
(
)
-
>
NameAtom
(
)
aChildTag
)
;
}
return
false
;
}
bool
EditorBase
:
:
TagCanContain
(
nsAtom
&
aParentTag
nsIContent
&
aChild
)
const
{
switch
(
aChild
.
NodeType
(
)
)
{
case
nsIDOMNode
:
:
TEXT_NODE
:
case
nsIDOMNode
:
:
ELEMENT_NODE
:
case
nsIDOMNode
:
:
DOCUMENT_FRAGMENT_NODE
:
return
TagCanContainTag
(
aParentTag
*
aChild
.
NodeInfo
(
)
-
>
NameAtom
(
)
)
;
}
return
false
;
}
bool
EditorBase
:
:
TagCanContainTag
(
nsAtom
&
aParentTag
nsAtom
&
aChildTag
)
const
{
return
true
;
}
bool
EditorBase
:
:
IsRoot
(
nsIDOMNode
*
inNode
)
{
NS_ENSURE_TRUE
(
inNode
false
)
;
nsCOMPtr
<
nsIDOMNode
>
rootNode
=
do_QueryInterface
(
GetRoot
(
)
)
;
return
inNode
=
=
rootNode
;
}
bool
EditorBase
:
:
IsRoot
(
nsINode
*
inNode
)
{
NS_ENSURE_TRUE
(
inNode
false
)
;
nsCOMPtr
<
nsINode
>
rootNode
=
GetRoot
(
)
;
return
inNode
=
=
rootNode
;
}
bool
EditorBase
:
:
IsEditorRoot
(
nsINode
*
aNode
)
{
NS_ENSURE_TRUE
(
aNode
false
)
;
nsCOMPtr
<
nsINode
>
rootNode
=
GetEditorRoot
(
)
;
return
aNode
=
=
rootNode
;
}
bool
EditorBase
:
:
IsDescendantOfRoot
(
nsIDOMNode
*
inNode
)
{
nsCOMPtr
<
nsINode
>
node
=
do_QueryInterface
(
inNode
)
;
return
IsDescendantOfRoot
(
node
)
;
}
bool
EditorBase
:
:
IsDescendantOfRoot
(
nsINode
*
inNode
)
{
NS_ENSURE_TRUE
(
inNode
false
)
;
nsCOMPtr
<
nsIContent
>
root
=
GetRoot
(
)
;
NS_ENSURE_TRUE
(
root
false
)
;
return
nsContentUtils
:
:
ContentIsDescendantOf
(
inNode
root
)
;
}
bool
EditorBase
:
:
IsDescendantOfEditorRoot
(
nsINode
*
aNode
)
{
NS_ENSURE_TRUE
(
aNode
false
)
;
nsCOMPtr
<
nsIContent
>
root
=
GetEditorRoot
(
)
;
NS_ENSURE_TRUE
(
root
false
)
;
return
nsContentUtils
:
:
ContentIsDescendantOf
(
aNode
root
)
;
}
bool
EditorBase
:
:
IsContainer
(
nsINode
*
aNode
)
{
return
aNode
?
true
:
false
;
}
bool
EditorBase
:
:
IsContainer
(
nsIDOMNode
*
aNode
)
{
return
aNode
?
true
:
false
;
}
bool
EditorBase
:
:
IsEditable
(
nsIDOMNode
*
aNode
)
{
nsCOMPtr
<
nsIContent
>
content
=
do_QueryInterface
(
aNode
)
;
return
IsEditable
(
content
)
;
}
uint32_t
EditorBase
:
:
CountEditableChildren
(
nsINode
*
aNode
)
{
MOZ_ASSERT
(
aNode
)
;
uint32_t
count
=
0
;
for
(
nsIContent
*
child
=
aNode
-
>
GetFirstChild
(
)
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
if
(
IsEditable
(
child
)
)
{
+
+
count
;
}
}
return
count
;
}
NS_IMETHODIMP
EditorBase
:
:
IncrementModificationCount
(
int32_t
inNumMods
)
{
uint32_t
oldModCount
=
mModCount
;
mModCount
+
=
inNumMods
;
if
(
(
!
oldModCount
&
&
mModCount
)
|
|
(
oldModCount
&
&
!
mModCount
)
)
{
NotifyDocumentListeners
(
eDocumentStateChanged
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetModificationCount
(
int32_t
*
outModCount
)
{
NS_ENSURE_ARG_POINTER
(
outModCount
)
;
*
outModCount
=
mModCount
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
ResetModificationCount
(
)
{
bool
doNotify
=
(
mModCount
!
=
0
)
;
mModCount
=
0
;
if
(
doNotify
)
{
NotifyDocumentListeners
(
eDocumentStateChanged
)
;
}
return
NS_OK
;
}
nsAtom
*
EditorBase
:
:
GetTag
(
nsIDOMNode
*
aNode
)
{
nsCOMPtr
<
nsIContent
>
content
=
do_QueryInterface
(
aNode
)
;
if
(
!
content
)
{
NS_ASSERTION
(
aNode
"
null
node
passed
to
EditorBase
:
:
GetTag
(
)
"
)
;
return
nullptr
;
}
return
content
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
;
}
bool
EditorBase
:
:
NodesSameType
(
nsIDOMNode
*
aNode1
nsIDOMNode
*
aNode2
)
{
if
(
!
aNode1
|
|
!
aNode2
)
{
NS_NOTREACHED
(
"
null
node
passed
to
EditorBase
:
:
NodesSameType
(
)
"
)
;
return
false
;
}
nsCOMPtr
<
nsIContent
>
content1
=
do_QueryInterface
(
aNode1
)
;
NS_ENSURE_TRUE
(
content1
false
)
;
nsCOMPtr
<
nsIContent
>
content2
=
do_QueryInterface
(
aNode2
)
;
NS_ENSURE_TRUE
(
content2
false
)
;
return
AreNodesSameType
(
content1
content2
)
;
}
bool
EditorBase
:
:
AreNodesSameType
(
nsIContent
*
aNode1
nsIContent
*
aNode2
)
{
MOZ_ASSERT
(
aNode1
)
;
MOZ_ASSERT
(
aNode2
)
;
return
aNode1
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
=
=
aNode2
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
;
}
bool
EditorBase
:
:
IsTextNode
(
nsIDOMNode
*
aNode
)
{
if
(
!
aNode
)
{
NS_NOTREACHED
(
"
null
node
passed
to
IsTextNode
(
)
"
)
;
return
false
;
}
uint16_t
nodeType
;
aNode
-
>
GetNodeType
(
&
nodeType
)
;
return
(
nodeType
=
=
nsIDOMNode
:
:
TEXT_NODE
)
;
}
nsIContent
*
EditorBase
:
:
GetNodeAtRangeOffsetPoint
(
const
RawRangeBoundary
&
aPoint
)
{
if
(
NS_WARN_IF
(
!
aPoint
.
IsSet
(
)
)
)
{
return
nullptr
;
}
if
(
aPoint
.
Container
(
)
-
>
GetAsText
(
)
)
{
return
aPoint
.
Container
(
)
-
>
AsContent
(
)
;
}
return
aPoint
.
GetChildAtOffset
(
)
;
}
nsresult
EditorBase
:
:
GetStartNodeAndOffset
(
Selection
*
aSelection
nsIDOMNode
*
*
outStartNode
int32_t
*
outStartOffset
)
{
NS_ENSURE_TRUE
(
outStartNode
&
&
outStartOffset
&
&
aSelection
NS_ERROR_NULL_POINTER
)
;
nsCOMPtr
<
nsINode
>
startNode
;
nsresult
rv
=
GetStartNodeAndOffset
(
aSelection
getter_AddRefs
(
startNode
)
outStartOffset
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
startNode
)
{
NS_ADDREF
(
*
outStartNode
=
startNode
-
>
AsDOMNode
(
)
)
;
}
else
{
*
outStartNode
=
nullptr
;
}
return
NS_OK
;
}
nsresult
EditorBase
:
:
GetStartNodeAndOffset
(
Selection
*
aSelection
nsINode
*
*
aStartContainer
int32_t
*
aStartOffset
)
{
MOZ_ASSERT
(
aSelection
)
;
MOZ_ASSERT
(
aStartContainer
)
;
MOZ_ASSERT
(
aStartOffset
)
;
*
aStartContainer
=
nullptr
;
*
aStartOffset
=
0
;
EditorRawDOMPoint
point
=
EditorBase
:
:
GetStartPoint
(
aSelection
)
;
if
(
!
point
.
IsSet
(
)
)
{
return
NS_ERROR_FAILURE
;
}
NS_ADDREF
(
*
aStartContainer
=
point
.
Container
(
)
)
;
*
aStartOffset
=
point
.
Offset
(
)
;
return
NS_OK
;
}
EditorRawDOMPoint
EditorBase
:
:
GetStartPoint
(
Selection
*
aSelection
)
{
MOZ_ASSERT
(
aSelection
)
;
if
(
NS_WARN_IF
(
!
aSelection
-
>
RangeCount
(
)
)
)
{
return
EditorRawDOMPoint
(
)
;
}
const
nsRange
*
range
=
aSelection
-
>
GetRangeAt
(
0
)
;
if
(
NS_WARN_IF
(
!
range
)
|
|
NS_WARN_IF
(
!
range
-
>
IsPositioned
(
)
)
)
{
return
EditorRawDOMPoint
(
)
;
}
return
EditorRawDOMPoint
(
range
-
>
StartRef
(
)
)
;
}
nsresult
EditorBase
:
:
GetEndNodeAndOffset
(
Selection
*
aSelection
nsIDOMNode
*
*
outEndNode
int32_t
*
outEndOffset
)
{
NS_ENSURE_TRUE
(
outEndNode
&
&
outEndOffset
&
&
aSelection
NS_ERROR_NULL_POINTER
)
;
nsCOMPtr
<
nsINode
>
endNode
;
nsresult
rv
=
GetEndNodeAndOffset
(
aSelection
getter_AddRefs
(
endNode
)
outEndOffset
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
endNode
)
{
NS_ADDREF
(
*
outEndNode
=
endNode
-
>
AsDOMNode
(
)
)
;
}
else
{
*
outEndNode
=
nullptr
;
}
return
NS_OK
;
}
nsresult
EditorBase
:
:
GetEndNodeAndOffset
(
Selection
*
aSelection
nsINode
*
*
aEndContainer
int32_t
*
aEndOffset
)
{
MOZ_ASSERT
(
aSelection
)
;
MOZ_ASSERT
(
aEndContainer
)
;
MOZ_ASSERT
(
aEndOffset
)
;
*
aEndContainer
=
nullptr
;
*
aEndOffset
=
0
;
EditorRawDOMPoint
point
=
EditorBase
:
:
GetEndPoint
(
aSelection
)
;
if
(
!
point
.
IsSet
(
)
)
{
return
NS_ERROR_FAILURE
;
}
NS_ADDREF
(
*
aEndContainer
=
point
.
Container
(
)
)
;
*
aEndOffset
=
point
.
Offset
(
)
;
return
NS_OK
;
}
EditorRawDOMPoint
EditorBase
:
:
GetEndPoint
(
Selection
*
aSelection
)
{
MOZ_ASSERT
(
aSelection
)
;
if
(
NS_WARN_IF
(
!
aSelection
-
>
RangeCount
(
)
)
)
{
return
EditorRawDOMPoint
(
)
;
}
const
nsRange
*
range
=
aSelection
-
>
GetRangeAt
(
0
)
;
if
(
NS_WARN_IF
(
!
range
)
|
|
NS_WARN_IF
(
!
range
-
>
IsPositioned
(
)
)
)
{
return
EditorRawDOMPoint
(
)
;
}
return
EditorRawDOMPoint
(
range
-
>
EndRef
(
)
)
;
}
nsresult
EditorBase
:
:
GetEndChildNode
(
Selection
*
aSelection
nsIContent
*
*
aEndNode
)
{
MOZ_ASSERT
(
aSelection
)
;
MOZ_ASSERT
(
aEndNode
)
;
*
aEndNode
=
nullptr
;
if
(
NS_WARN_IF
(
!
aSelection
-
>
RangeCount
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
const
nsRange
*
range
=
aSelection
-
>
GetRangeAt
(
0
)
;
if
(
NS_WARN_IF
(
!
range
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
NS_WARN_IF
(
!
range
-
>
IsPositioned
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
NS_IF_ADDREF
(
*
aEndNode
=
range
-
>
GetChildAtEndOffset
(
)
)
;
return
NS_OK
;
}
nsresult
EditorBase
:
:
IsPreformatted
(
nsIDOMNode
*
aNode
bool
*
aResult
)
{
nsCOMPtr
<
nsIContent
>
content
=
do_QueryInterface
(
aNode
)
;
NS_ENSURE_TRUE
(
aResult
&
&
content
NS_ERROR_NULL_POINTER
)
;
nsCOMPtr
<
nsIPresShell
>
ps
=
GetPresShell
(
)
;
NS_ENSURE_TRUE
(
ps
NS_ERROR_NOT_INITIALIZED
)
;
RefPtr
<
nsStyleContext
>
elementStyle
;
if
(
!
content
-
>
IsElement
(
)
)
{
content
=
content
-
>
GetParent
(
)
;
}
if
(
content
&
&
content
-
>
IsElement
(
)
)
{
elementStyle
=
nsComputedDOMStyle
:
:
GetStyleContextNoFlush
(
content
-
>
AsElement
(
)
nullptr
ps
)
;
}
if
(
!
elementStyle
)
{
*
aResult
=
false
;
return
NS_OK
;
}
const
nsStyleText
*
styleText
=
elementStyle
-
>
StyleText
(
)
;
*
aResult
=
styleText
-
>
WhiteSpaceIsSignificant
(
)
;
return
NS_OK
;
}
SplitNodeResult
EditorBase
:
:
SplitNodeDeep
(
nsIContent
&
aMostAncestorToSplit
const
EditorRawDOMPoint
&
aStartOfDeepestRightNode
SplitAtEdges
aSplitAtEdges
)
{
MOZ_ASSERT
(
aStartOfDeepestRightNode
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
aStartOfDeepestRightNode
.
Container
(
)
=
=
&
aMostAncestorToSplit
|
|
EditorUtils
:
:
IsDescendantOf
(
*
aStartOfDeepestRightNode
.
Container
(
)
aMostAncestorToSplit
)
)
;
if
(
NS_WARN_IF
(
!
aStartOfDeepestRightNode
.
IsSet
(
)
)
)
{
return
SplitNodeResult
(
NS_ERROR_INVALID_ARG
)
;
}
nsCOMPtr
<
nsIContent
>
newLeftNodeOfMostAncestor
;
EditorDOMPoint
atStartOfRightNode
(
aStartOfDeepestRightNode
)
;
while
(
true
)
{
if
(
NS_WARN_IF
(
atStartOfRightNode
.
Container
(
)
!
=
&
aMostAncestorToSplit
&
&
!
atStartOfRightNode
.
Container
(
)
-
>
GetParent
(
)
)
)
{
return
SplitNodeResult
(
NS_ERROR_FAILURE
)
;
}
if
(
NS_WARN_IF
(
!
atStartOfRightNode
.
Container
(
)
-
>
IsContent
(
)
)
)
{
return
SplitNodeResult
(
NS_ERROR_FAILURE
)
;
}
nsIContent
*
currentRightNode
=
atStartOfRightNode
.
Container
(
)
-
>
AsContent
(
)
;
if
(
(
aSplitAtEdges
=
=
SplitAtEdges
:
:
eAllowToCreateEmptyContainer
&
&
!
atStartOfRightNode
.
Container
(
)
-
>
GetAsText
(
)
)
|
|
(
!
atStartOfRightNode
.
IsStartOfContainer
(
)
&
&
!
atStartOfRightNode
.
IsEndOfContainer
(
)
)
)
{
IgnoredErrorResult
error
;
nsCOMPtr
<
nsIContent
>
newLeftNode
=
SplitNode
(
atStartOfRightNode
.
AsRaw
(
)
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
return
SplitNodeResult
(
NS_ERROR_FAILURE
)
;
}
if
(
currentRightNode
=
=
&
aMostAncestorToSplit
)
{
return
SplitNodeResult
(
newLeftNode
&
aMostAncestorToSplit
)
;
}
atStartOfRightNode
.
Set
(
currentRightNode
)
;
}
else
if
(
!
atStartOfRightNode
.
IsStartOfContainer
(
)
)
{
if
(
currentRightNode
=
=
&
aMostAncestorToSplit
)
{
return
SplitNodeResult
(
&
aMostAncestorToSplit
nullptr
)
;
}
atStartOfRightNode
.
Set
(
currentRightNode
)
;
DebugOnly
<
bool
>
advanced
=
atStartOfRightNode
.
AdvanceOffset
(
)
;
NS_WARNING_ASSERTION
(
advanced
"
Failed
to
advance
offset
after
current
node
"
)
;
}
else
{
if
(
currentRightNode
=
=
&
aMostAncestorToSplit
)
{
return
SplitNodeResult
(
nullptr
&
aMostAncestorToSplit
)
;
}
atStartOfRightNode
.
Set
(
currentRightNode
)
;
}
}
return
SplitNodeResult
(
NS_ERROR_FAILURE
)
;
}
EditorDOMPoint
EditorBase
:
:
JoinNodeDeep
(
nsIContent
&
aLeftNode
nsIContent
&
aRightNode
)
{
nsCOMPtr
<
nsIContent
>
leftNodeToJoin
=
&
aLeftNode
;
nsCOMPtr
<
nsIContent
>
rightNodeToJoin
=
&
aRightNode
;
nsCOMPtr
<
nsINode
>
parentNode
=
aRightNode
.
GetParentNode
(
)
;
EditorDOMPoint
ret
;
while
(
leftNodeToJoin
&
&
rightNodeToJoin
&
&
parentNode
&
&
AreNodesSameType
(
leftNodeToJoin
rightNodeToJoin
)
)
{
uint32_t
length
=
leftNodeToJoin
-
>
Length
(
)
;
ret
.
Set
(
rightNodeToJoin
length
)
;
nsresult
rv
=
JoinNodes
(
*
leftNodeToJoin
*
rightNodeToJoin
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
EditorDOMPoint
(
)
;
}
if
(
parentNode
-
>
GetAsText
(
)
)
{
return
ret
;
}
parentNode
=
rightNodeToJoin
;
rightNodeToJoin
=
parentNode
-
>
GetChildAt
(
length
)
;
if
(
rightNodeToJoin
)
{
leftNodeToJoin
=
rightNodeToJoin
-
>
GetPreviousSibling
(
)
;
}
else
{
leftNodeToJoin
=
nullptr
;
}
while
(
leftNodeToJoin
&
&
!
IsEditable
(
leftNodeToJoin
)
)
{
leftNodeToJoin
=
leftNodeToJoin
-
>
GetPreviousSibling
(
)
;
}
if
(
!
leftNodeToJoin
)
{
return
ret
;
}
while
(
rightNodeToJoin
&
&
!
IsEditable
(
rightNodeToJoin
)
)
{
rightNodeToJoin
=
rightNodeToJoin
-
>
GetNextSibling
(
)
;
}
if
(
!
rightNodeToJoin
)
{
return
ret
;
}
}
if
(
NS_WARN_IF
(
!
ret
.
IsSet
(
)
)
)
{
return
EditorDOMPoint
(
)
;
}
return
ret
;
}
void
EditorBase
:
:
BeginUpdateViewBatch
(
)
{
NS_PRECONDITION
(
mUpdateCount
>
=
0
"
bad
state
"
)
;
if
(
!
mUpdateCount
)
{
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
if
(
selection
)
{
selection
-
>
StartBatchChanges
(
)
;
}
}
mUpdateCount
+
+
;
}
nsresult
EditorBase
:
:
EndUpdateViewBatch
(
)
{
NS_PRECONDITION
(
mUpdateCount
>
0
"
bad
state
"
)
;
if
(
mUpdateCount
<
=
0
)
{
mUpdateCount
=
0
;
return
NS_ERROR_FAILURE
;
}
mUpdateCount
-
-
;
if
(
!
mUpdateCount
)
{
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
if
(
selection
)
{
selection
-
>
EndBatchChanges
(
)
;
}
}
return
NS_OK
;
}
bool
EditorBase
:
:
GetShouldTxnSetSelection
(
)
{
return
mShouldTxnSetSelection
;
}
NS_IMETHODIMP
EditorBase
:
:
DeleteSelectionImpl
(
EDirection
aAction
EStripWrappers
aStripWrappers
)
{
MOZ_ASSERT
(
aStripWrappers
=
=
eStrip
|
|
aStripWrappers
=
=
eNoStrip
)
;
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_STATE
(
selection
)
;
RefPtr
<
EditAggregateTransaction
>
deleteSelectionTransaction
;
nsCOMPtr
<
nsINode
>
deleteNode
;
int32_t
deleteCharOffset
=
0
deleteCharLength
=
0
;
if
(
!
selection
-
>
Collapsed
(
)
|
|
aAction
!
=
eNone
)
{
deleteSelectionTransaction
=
CreateTxnForDeleteSelection
(
aAction
getter_AddRefs
(
deleteNode
)
&
deleteCharOffset
&
deleteCharLength
)
;
if
(
NS_WARN_IF
(
!
deleteSelectionTransaction
)
)
{
return
NS_ERROR_FAILURE
;
}
}
nsCOMPtr
<
nsIDOMCharacterData
>
deleteCharData
(
do_QueryInterface
(
deleteNode
)
)
;
AutoRules
beginRulesSniffing
(
this
EditAction
:
:
deleteSelection
aAction
)
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
if
(
!
deleteNode
)
{
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
WillDeleteSelection
(
selection
)
;
}
}
else
if
(
deleteCharData
)
{
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
WillDeleteText
(
deleteCharData
deleteCharOffset
1
)
;
}
}
else
{
for
(
auto
&
listener
:
listeners
)
{
listener
-
>
WillDeleteNode
(
deleteNode
-
>
AsDOMNode
(
)
)
;
}
}
}
nsresult
rv
=
DoTransaction
(
deleteSelectionTransaction
)
;
{
AutoActionListenerArray
listeners
(
mActionListeners
)
;
if
(
!
deleteNode
)
{
for
(
auto
&
listener
:
mActionListeners
)
{
listener
-
>
DidDeleteSelection
(
selection
)
;
}
}
else
if
(
deleteCharData
)
{
for
(
auto
&
listener
:
mActionListeners
)
{
listener
-
>
DidDeleteText
(
deleteCharData
deleteCharOffset
1
rv
)
;
}
}
else
{
for
(
auto
&
listener
:
mActionListeners
)
{
listener
-
>
DidDeleteNode
(
deleteNode
-
>
AsDOMNode
(
)
rv
)
;
}
}
}
return
rv
;
}
already_AddRefed
<
Element
>
EditorBase
:
:
DeleteSelectionAndCreateElement
(
nsAtom
&
aTag
)
{
nsresult
rv
=
DeleteSelectionAndPrepareToCreateNode
(
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
nullptr
)
;
EditorRawDOMPoint
pointToInsert
(
selection
-
>
GetChildAtAnchorOffset
(
)
)
;
if
(
!
pointToInsert
.
IsSet
(
)
)
{
pointToInsert
.
Set
(
selection
-
>
GetAnchorNode
(
)
selection
-
>
AnchorOffset
(
)
)
;
if
(
NS_WARN_IF
(
!
pointToInsert
.
IsSet
(
)
)
)
{
return
nullptr
;
}
}
RefPtr
<
Element
>
newElement
=
CreateNode
(
&
aTag
pointToInsert
)
;
DebugOnly
<
bool
>
advanced
=
pointToInsert
.
AdvanceOffset
(
)
;
NS_WARNING_ASSERTION
(
advanced
"
Failed
to
move
offset
next
to
the
new
element
"
)
;
ErrorResult
error
;
selection
-
>
Collapse
(
pointToInsert
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
error
.
SuppressException
(
)
;
return
nullptr
;
}
return
newElement
.
forget
(
)
;
}
TextComposition
*
EditorBase
:
:
GetComposition
(
)
const
{
return
mComposition
;
}
bool
EditorBase
:
:
IsIMEComposing
(
)
const
{
return
mComposition
&
&
mComposition
-
>
IsComposing
(
)
;
}
bool
EditorBase
:
:
ShouldHandleIMEComposition
(
)
const
{
return
mComposition
&
&
mDidPostCreate
;
}
nsresult
EditorBase
:
:
DeleteSelectionAndPrepareToCreateNode
(
)
{
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_NULL_POINTER
)
;
MOZ_ASSERT
(
selection
-
>
GetAnchorFocusRange
(
)
)
;
if
(
!
selection
-
>
GetAnchorFocusRange
(
)
-
>
Collapsed
(
)
)
{
nsresult
rv
=
DeleteSelection
(
nsIEditor
:
:
eNone
nsIEditor
:
:
eStrip
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
MOZ_ASSERT
(
selection
-
>
GetAnchorFocusRange
(
)
&
&
selection
-
>
GetAnchorFocusRange
(
)
-
>
Collapsed
(
)
"
Selection
not
collapsed
after
delete
"
)
;
}
nsCOMPtr
<
nsINode
>
node
=
selection
-
>
GetAnchorNode
(
)
;
MOZ_ASSERT
(
node
"
Selection
has
no
ranges
in
it
"
)
;
if
(
!
node
|
|
!
node
-
>
IsNodeOfType
(
nsINode
:
:
eDATA_NODE
)
)
{
return
NS_OK
;
}
NS_ASSERTION
(
node
-
>
GetParentNode
(
)
"
It
'
s
impossible
to
insert
into
chardata
with
no
parent
-
-
"
"
fix
the
caller
"
)
;
NS_ENSURE_STATE
(
node
-
>
GetParentNode
(
)
)
;
uint32_t
offset
=
selection
-
>
AnchorOffset
(
)
;
if
(
!
offset
)
{
EditorRawDOMPoint
atNode
(
node
)
;
if
(
NS_WARN_IF
(
!
atNode
.
IsSetAndValid
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
ErrorResult
error
;
selection
-
>
Collapse
(
atNode
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
return
error
.
StealNSResult
(
)
;
}
return
NS_OK
;
}
if
(
offset
=
=
node
-
>
Length
(
)
)
{
EditorRawDOMPoint
afterNode
(
node
)
;
if
(
NS_WARN_IF
(
!
afterNode
.
AdvanceOffset
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
ErrorResult
error
;
selection
-
>
Collapse
(
afterNode
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
return
error
.
StealNSResult
(
)
;
}
return
NS_OK
;
}
EditorRawDOMPoint
atStartOfRightNode
(
node
offset
)
;
MOZ_ASSERT
(
atStartOfRightNode
.
IsSetAndValid
(
)
)
;
ErrorResult
error
;
nsCOMPtr
<
nsIContent
>
newLeftNode
=
SplitNode
(
atStartOfRightNode
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
return
error
.
StealNSResult
(
)
;
}
EditorRawDOMPoint
atRightNode
(
atStartOfRightNode
.
Container
(
)
)
;
if
(
NS_WARN_IF
(
!
atRightNode
.
IsSet
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
atRightNode
.
IsSetAndValid
(
)
)
;
selection
-
>
Collapse
(
atRightNode
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
return
error
.
StealNSResult
(
)
;
}
return
NS_OK
;
}
void
EditorBase
:
:
DoAfterDoTransaction
(
nsITransaction
*
aTxn
)
{
bool
isTransientTransaction
;
MOZ_ALWAYS_SUCCEEDS
(
aTxn
-
>
GetIsTransient
(
&
isTransientTransaction
)
)
;
if
(
!
isTransientTransaction
)
{
int32_t
modCount
;
GetModificationCount
(
&
modCount
)
;
if
(
modCount
<
0
)
{
modCount
=
-
modCount
;
}
MOZ_ALWAYS_SUCCEEDS
(
IncrementModificationCount
(
1
)
)
;
}
}
void
EditorBase
:
:
DoAfterUndoTransaction
(
)
{
MOZ_ALWAYS_SUCCEEDS
(
IncrementModificationCount
(
-
1
)
)
;
}
void
EditorBase
:
:
DoAfterRedoTransaction
(
)
{
MOZ_ALWAYS_SUCCEEDS
(
IncrementModificationCount
(
1
)
)
;
}
already_AddRefed
<
ChangeAttributeTransaction
>
EditorBase
:
:
CreateTxnForSetAttribute
(
Element
&
aElement
nsAtom
&
aAttribute
const
nsAString
&
aValue
)
{
RefPtr
<
ChangeAttributeTransaction
>
transaction
=
new
ChangeAttributeTransaction
(
aElement
aAttribute
&
aValue
)
;
return
transaction
.
forget
(
)
;
}
already_AddRefed
<
ChangeAttributeTransaction
>
EditorBase
:
:
CreateTxnForRemoveAttribute
(
Element
&
aElement
nsAtom
&
aAttribute
)
{
RefPtr
<
ChangeAttributeTransaction
>
transaction
=
new
ChangeAttributeTransaction
(
aElement
aAttribute
nullptr
)
;
return
transaction
.
forget
(
)
;
}
already_AddRefed
<
CreateElementTransaction
>
EditorBase
:
:
CreateTxnForCreateElement
(
nsAtom
&
aTag
const
EditorRawDOMPoint
&
aPointToInsert
)
{
RefPtr
<
CreateElementTransaction
>
transaction
=
new
CreateElementTransaction
(
*
this
aTag
aPointToInsert
)
;
return
transaction
.
forget
(
)
;
}
already_AddRefed
<
InsertNodeTransaction
>
EditorBase
:
:
CreateTxnForInsertNode
(
nsIContent
&
aNode
nsINode
&
aParent
int32_t
aPosition
)
{
RefPtr
<
InsertNodeTransaction
>
transaction
=
new
InsertNodeTransaction
(
aNode
aParent
aPosition
*
this
)
;
return
transaction
.
forget
(
)
;
}
already_AddRefed
<
DeleteNodeTransaction
>
EditorBase
:
:
CreateTxnForDeleteNode
(
nsINode
*
aNode
)
{
if
(
NS_WARN_IF
(
!
aNode
)
)
{
return
nullptr
;
}
RefPtr
<
DeleteNodeTransaction
>
deleteNodeTransaction
=
new
DeleteNodeTransaction
(
*
this
*
aNode
&
mRangeUpdater
)
;
if
(
!
deleteNodeTransaction
-
>
CanDoIt
(
)
)
{
return
nullptr
;
}
return
deleteNodeTransaction
.
forget
(
)
;
}
already_AddRefed
<
CompositionTransaction
>
EditorBase
:
:
CreateTxnForComposition
(
const
nsAString
&
aStringToInsert
)
{
MOZ_ASSERT
(
mIMETextNode
)
;
RefPtr
<
CompositionTransaction
>
transaction
=
new
CompositionTransaction
(
*
mIMETextNode
mIMETextOffset
mIMETextLength
mComposition
-
>
GetRanges
(
)
aStringToInsert
*
this
&
mRangeUpdater
)
;
return
transaction
.
forget
(
)
;
}
already_AddRefed
<
AddStyleSheetTransaction
>
EditorBase
:
:
CreateTxnForAddStyleSheet
(
StyleSheet
*
aSheet
)
{
RefPtr
<
AddStyleSheetTransaction
>
transaction
=
new
AddStyleSheetTransaction
(
*
this
aSheet
)
;
return
transaction
.
forget
(
)
;
}
already_AddRefed
<
RemoveStyleSheetTransaction
>
EditorBase
:
:
CreateTxnForRemoveStyleSheet
(
StyleSheet
*
aSheet
)
{
RefPtr
<
RemoveStyleSheetTransaction
>
transaction
=
new
RemoveStyleSheetTransaction
(
*
this
aSheet
)
;
return
transaction
.
forget
(
)
;
}
already_AddRefed
<
EditAggregateTransaction
>
EditorBase
:
:
CreateTxnForDeleteSelection
(
EDirection
aAction
nsINode
*
*
aRemovingNode
int32_t
*
aOffset
int32_t
*
aLength
)
{
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
if
(
NS_WARN_IF
(
!
selection
)
)
{
return
nullptr
;
}
if
(
NS_WARN_IF
(
selection
-
>
Collapsed
(
)
&
&
aAction
=
=
eNone
)
)
{
return
nullptr
;
}
RefPtr
<
EditAggregateTransaction
>
aggregateTransaction
=
new
EditAggregateTransaction
(
)
;
for
(
uint32_t
rangeIdx
=
0
;
rangeIdx
<
selection
-
>
RangeCount
(
)
;
+
+
rangeIdx
)
{
RefPtr
<
nsRange
>
range
=
selection
-
>
GetRangeAt
(
rangeIdx
)
;
if
(
NS_WARN_IF
(
!
range
)
)
{
return
nullptr
;
}
if
(
!
range
-
>
Collapsed
(
)
)
{
RefPtr
<
DeleteRangeTransaction
>
deleteRangeTransaction
=
new
DeleteRangeTransaction
(
*
this
*
range
&
mRangeUpdater
)
;
aggregateTransaction
-
>
AppendChild
(
deleteRangeTransaction
)
;
}
else
if
(
aAction
!
=
eNone
)
{
RefPtr
<
EditTransactionBase
>
deleteRangeTransaction
=
CreateTxnForDeleteRange
(
range
aAction
aRemovingNode
aOffset
aLength
)
;
if
(
NS_WARN_IF
(
!
deleteRangeTransaction
)
)
{
return
nullptr
;
}
aggregateTransaction
-
>
AppendChild
(
deleteRangeTransaction
)
;
}
}
return
aggregateTransaction
.
forget
(
)
;
}
already_AddRefed
<
DeleteTextTransaction
>
EditorBase
:
:
CreateTxnForDeleteCharacter
(
nsGenericDOMDataNode
&
aData
uint32_t
aOffset
EDirection
aDirection
)
{
NS_ASSERTION
(
aDirection
=
=
eNext
|
|
aDirection
=
=
ePrevious
"
Invalid
direction
"
)
;
nsAutoString
data
;
aData
.
GetData
(
data
)
;
NS_ASSERTION
(
data
.
Length
(
)
"
Trying
to
delete
from
a
zero
-
length
node
"
)
;
NS_ENSURE_TRUE
(
data
.
Length
(
)
nullptr
)
;
uint32_t
segOffset
=
aOffset
segLength
=
1
;
if
(
aDirection
=
=
eNext
)
{
if
(
segOffset
+
1
<
data
.
Length
(
)
&
&
NS_IS_HIGH_SURROGATE
(
data
[
segOffset
]
)
&
&
NS_IS_LOW_SURROGATE
(
data
[
segOffset
+
1
]
)
)
{
+
+
segLength
;
}
}
else
if
(
aOffset
>
0
)
{
-
-
segOffset
;
if
(
segOffset
>
0
&
&
NS_IS_LOW_SURROGATE
(
data
[
segOffset
]
)
&
&
NS_IS_HIGH_SURROGATE
(
data
[
segOffset
-
1
]
)
)
{
+
+
segLength
;
-
-
segOffset
;
}
}
else
{
return
nullptr
;
}
return
CreateTxnForDeleteText
(
aData
segOffset
segLength
)
;
}
already_AddRefed
<
EditTransactionBase
>
EditorBase
:
:
CreateTxnForDeleteRange
(
nsRange
*
aRangeToDelete
EDirection
aAction
nsINode
*
*
aRemovingNode
int32_t
*
aOffset
int32_t
*
aLength
)
{
MOZ_ASSERT
(
aAction
!
=
eNone
)
;
nsCOMPtr
<
nsINode
>
node
=
aRangeToDelete
-
>
GetStartContainer
(
)
;
if
(
NS_WARN_IF
(
!
node
)
)
{
return
nullptr
;
}
nsIContent
*
child
=
aRangeToDelete
-
>
GetChildAtStartOffset
(
)
;
int32_t
offset
=
aRangeToDelete
-
>
StartOffset
(
)
;
uint32_t
count
=
node
-
>
Length
(
)
;
bool
isFirst
=
!
offset
;
bool
isLast
=
(
count
=
=
(
uint32_t
)
offset
)
;
if
(
aAction
=
=
ePrevious
&
&
isFirst
)
{
nsCOMPtr
<
nsIContent
>
priorNode
=
GetPreviousEditableNode
(
*
node
)
;
if
(
NS_WARN_IF
(
!
priorNode
)
)
{
return
nullptr
;
}
if
(
priorNode
-
>
IsNodeOfType
(
nsINode
:
:
eDATA_NODE
)
)
{
RefPtr
<
nsGenericDOMDataNode
>
priorNodeAsCharData
=
static_cast
<
nsGenericDOMDataNode
*
>
(
priorNode
.
get
(
)
)
;
uint32_t
length
=
priorNode
-
>
Length
(
)
;
if
(
NS_WARN_IF
(
!
length
)
)
{
return
nullptr
;
}
RefPtr
<
DeleteTextTransaction
>
deleteTextTransaction
=
CreateTxnForDeleteCharacter
(
*
priorNodeAsCharData
length
ePrevious
)
;
if
(
NS_WARN_IF
(
!
deleteTextTransaction
)
)
{
return
nullptr
;
}
*
aOffset
=
deleteTextTransaction
-
>
GetOffset
(
)
;
*
aLength
=
deleteTextTransaction
-
>
GetNumCharsToDelete
(
)
;
priorNode
.
forget
(
aRemovingNode
)
;
return
deleteTextTransaction
.
forget
(
)
;
}
RefPtr
<
DeleteNodeTransaction
>
deleteNodeTransaction
=
CreateTxnForDeleteNode
(
priorNode
)
;
if
(
NS_WARN_IF
(
!
deleteNodeTransaction
)
)
{
return
nullptr
;
}
priorNode
.
forget
(
aRemovingNode
)
;
return
deleteNodeTransaction
.
forget
(
)
;
}
if
(
aAction
=
=
eNext
&
&
isLast
)
{
nsCOMPtr
<
nsIContent
>
nextNode
=
GetNextEditableNode
(
*
node
)
;
if
(
NS_WARN_IF
(
!
nextNode
)
)
{
return
nullptr
;
}
if
(
nextNode
-
>
IsNodeOfType
(
nsINode
:
:
eDATA_NODE
)
)
{
RefPtr
<
nsGenericDOMDataNode
>
nextNodeAsCharData
=
static_cast
<
nsGenericDOMDataNode
*
>
(
nextNode
.
get
(
)
)
;
uint32_t
length
=
nextNode
-
>
Length
(
)
;
if
(
NS_WARN_IF
(
!
length
)
)
{
return
nullptr
;
}
RefPtr
<
DeleteTextTransaction
>
deleteTextTransaction
=
CreateTxnForDeleteCharacter
(
*
nextNodeAsCharData
0
eNext
)
;
if
(
NS_WARN_IF
(
!
deleteTextTransaction
)
)
{
return
nullptr
;
}
*
aOffset
=
deleteTextTransaction
-
>
GetOffset
(
)
;
*
aLength
=
deleteTextTransaction
-
>
GetNumCharsToDelete
(
)
;
nextNode
.
forget
(
aRemovingNode
)
;
return
deleteTextTransaction
.
forget
(
)
;
}
RefPtr
<
DeleteNodeTransaction
>
deleteNodeTransaction
=
CreateTxnForDeleteNode
(
nextNode
)
;
if
(
NS_WARN_IF
(
!
deleteNodeTransaction
)
)
{
return
nullptr
;
}
nextNode
.
forget
(
aRemovingNode
)
;
return
deleteNodeTransaction
.
forget
(
)
;
}
if
(
node
-
>
IsNodeOfType
(
nsINode
:
:
eDATA_NODE
)
)
{
RefPtr
<
nsGenericDOMDataNode
>
nodeAsCharData
=
static_cast
<
nsGenericDOMDataNode
*
>
(
node
.
get
(
)
)
;
RefPtr
<
DeleteTextTransaction
>
deleteTextTransaction
=
CreateTxnForDeleteCharacter
(
*
nodeAsCharData
offset
aAction
)
;
if
(
NS_WARN_IF
(
!
deleteTextTransaction
)
)
{
return
nullptr
;
}
*
aOffset
=
deleteTextTransaction
-
>
GetOffset
(
)
;
*
aLength
=
deleteTextTransaction
-
>
GetNumCharsToDelete
(
)
;
node
.
forget
(
aRemovingNode
)
;
return
deleteTextTransaction
.
forget
(
)
;
}
nsCOMPtr
<
nsINode
>
selectedNode
;
if
(
aAction
=
=
ePrevious
)
{
selectedNode
=
GetPreviousEditableNode
(
EditorRawDOMPoint
(
node
child
offset
)
)
;
}
else
if
(
aAction
=
=
eNext
)
{
selectedNode
=
GetNextEditableNode
(
EditorRawDOMPoint
(
node
child
offset
)
)
;
}
while
(
selectedNode
&
&
selectedNode
-
>
IsNodeOfType
(
nsINode
:
:
eDATA_NODE
)
&
&
!
selectedNode
-
>
Length
(
)
)
{
if
(
aAction
=
=
ePrevious
)
{
selectedNode
=
GetPreviousEditableNode
(
*
selectedNode
)
;
}
else
if
(
aAction
=
=
eNext
)
{
selectedNode
=
GetNextEditableNode
(
*
selectedNode
)
;
}
}
if
(
NS_WARN_IF
(
!
selectedNode
)
)
{
return
nullptr
;
}
if
(
selectedNode
-
>
IsNodeOfType
(
nsINode
:
:
eDATA_NODE
)
)
{
RefPtr
<
nsGenericDOMDataNode
>
selectedNodeAsCharData
=
static_cast
<
nsGenericDOMDataNode
*
>
(
selectedNode
.
get
(
)
)
;
uint32_t
position
=
0
;
if
(
aAction
=
=
ePrevious
)
{
position
=
selectedNode
-
>
Length
(
)
;
}
RefPtr
<
DeleteTextTransaction
>
deleteTextTransaction
=
CreateTxnForDeleteCharacter
(
*
selectedNodeAsCharData
position
aAction
)
;
if
(
NS_WARN_IF
(
!
deleteTextTransaction
)
)
{
return
nullptr
;
}
*
aOffset
=
deleteTextTransaction
-
>
GetOffset
(
)
;
*
aLength
=
deleteTextTransaction
-
>
GetNumCharsToDelete
(
)
;
selectedNode
.
forget
(
aRemovingNode
)
;
return
deleteTextTransaction
.
forget
(
)
;
}
RefPtr
<
DeleteNodeTransaction
>
deleteNodeTransaction
=
CreateTxnForDeleteNode
(
selectedNode
)
;
if
(
NS_WARN_IF
(
!
deleteNodeTransaction
)
)
{
return
nullptr
;
}
selectedNode
.
forget
(
aRemovingNode
)
;
return
deleteNodeTransaction
.
forget
(
)
;
}
nsresult
EditorBase
:
:
CreateRange
(
nsIDOMNode
*
aStartContainer
int32_t
aStartOffset
nsIDOMNode
*
aEndContainer
int32_t
aEndOffset
nsRange
*
*
aRange
)
{
return
nsRange
:
:
CreateRange
(
aStartContainer
aStartOffset
aEndContainer
aEndOffset
aRange
)
;
}
nsresult
EditorBase
:
:
AppendNodeToSelectionAsRange
(
nsIDOMNode
*
aNode
)
{
NS_ENSURE_TRUE
(
aNode
NS_ERROR_NULL_POINTER
)
;
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_FAILURE
)
;
nsCOMPtr
<
nsIDOMNode
>
parentNode
;
nsresult
rv
=
aNode
-
>
GetParentNode
(
getter_AddRefs
(
parentNode
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
parentNode
NS_ERROR_NULL_POINTER
)
;
int32_t
offset
=
GetChildOffset
(
aNode
parentNode
)
;
RefPtr
<
nsRange
>
range
;
rv
=
CreateRange
(
parentNode
offset
parentNode
offset
+
1
getter_AddRefs
(
range
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
range
NS_ERROR_NULL_POINTER
)
;
return
selection
-
>
AddRange
(
range
)
;
}
nsresult
EditorBase
:
:
ClearSelection
(
)
{
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_TRUE
(
selection
NS_ERROR_FAILURE
)
;
return
selection
-
>
RemoveAllRanges
(
)
;
}
already_AddRefed
<
Element
>
EditorBase
:
:
CreateHTMLContent
(
nsAtom
*
aTag
)
{
MOZ_ASSERT
(
aTag
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
GetDocument
(
)
;
if
(
!
doc
)
{
return
nullptr
;
}
if
(
aTag
=
=
nsGkAtoms
:
:
_empty
)
{
NS_ERROR
(
"
Don
'
t
pass
an
empty
tag
to
EditorBase
:
:
CreateHTMLContent
"
"
check
caller
.
"
)
;
return
nullptr
;
}
return
doc
-
>
CreateElem
(
nsDependentAtomString
(
aTag
)
nullptr
kNameSpaceID_XHTML
)
;
}
already_AddRefed
<
nsTextNode
>
EditorBase
:
:
CreateTextNode
(
nsIDocument
&
aDocument
const
nsAString
&
aData
)
{
RefPtr
<
nsTextNode
>
text
=
aDocument
.
CreateEmptyTextNode
(
)
;
text
-
>
MarkAsMaybeModifiedFrequently
(
)
;
text
-
>
SetText
(
aData
false
)
;
return
text
.
forget
(
)
;
}
NS_IMETHODIMP
EditorBase
:
:
SetAttributeOrEquivalent
(
nsIDOMElement
*
aElement
const
nsAString
&
aAttribute
const
nsAString
&
aValue
bool
aSuppressTransaction
)
{
nsCOMPtr
<
Element
>
element
=
do_QueryInterface
(
aElement
)
;
if
(
NS_WARN_IF
(
!
element
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
RefPtr
<
nsAtom
>
attribute
=
NS_Atomize
(
aAttribute
)
;
return
SetAttributeOrEquivalent
(
element
attribute
aValue
aSuppressTransaction
)
;
}
NS_IMETHODIMP
EditorBase
:
:
RemoveAttributeOrEquivalent
(
nsIDOMElement
*
aElement
const
nsAString
&
aAttribute
bool
aSuppressTransaction
)
{
nsCOMPtr
<
Element
>
element
=
do_QueryInterface
(
aElement
)
;
if
(
NS_WARN_IF
(
!
element
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
RefPtr
<
nsAtom
>
attribute
=
NS_Atomize
(
aAttribute
)
;
return
RemoveAttributeOrEquivalent
(
element
attribute
aSuppressTransaction
)
;
}
nsresult
EditorBase
:
:
HandleKeyPressEvent
(
WidgetKeyboardEvent
*
aKeyboardEvent
)
{
if
(
NS_WARN_IF
(
!
aKeyboardEvent
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
MOZ_ASSERT
(
aKeyboardEvent
-
>
mMessage
=
=
eKeyPress
"
HandleKeyPressEvent
gets
non
-
keypress
event
"
)
;
if
(
IsReadonly
(
)
|
|
IsDisabled
(
)
)
{
if
(
aKeyboardEvent
-
>
mKeyCode
=
=
NS_VK_BACK
)
{
aKeyboardEvent
-
>
PreventDefault
(
)
;
}
return
NS_OK
;
}
switch
(
aKeyboardEvent
-
>
mKeyCode
)
{
case
NS_VK_META
:
case
NS_VK_WIN
:
case
NS_VK_SHIFT
:
case
NS_VK_CONTROL
:
case
NS_VK_ALT
:
aKeyboardEvent
-
>
PreventDefault
(
)
;
return
NS_OK
;
case
NS_VK_BACK
:
if
(
aKeyboardEvent
-
>
IsControl
(
)
|
|
aKeyboardEvent
-
>
IsAlt
(
)
|
|
aKeyboardEvent
-
>
IsMeta
(
)
|
|
aKeyboardEvent
-
>
IsOS
(
)
)
{
return
NS_OK
;
}
DeleteSelection
(
nsIEditor
:
:
ePrevious
nsIEditor
:
:
eStrip
)
;
aKeyboardEvent
-
>
PreventDefault
(
)
;
return
NS_OK
;
case
NS_VK_DELETE
:
if
(
aKeyboardEvent
-
>
IsShift
(
)
|
|
aKeyboardEvent
-
>
IsControl
(
)
|
|
aKeyboardEvent
-
>
IsAlt
(
)
|
|
aKeyboardEvent
-
>
IsMeta
(
)
|
|
aKeyboardEvent
-
>
IsOS
(
)
)
{
return
NS_OK
;
}
DeleteSelection
(
nsIEditor
:
:
eNext
nsIEditor
:
:
eStrip
)
;
aKeyboardEvent
-
>
PreventDefault
(
)
;
return
NS_OK
;
}
return
NS_OK
;
}
nsresult
EditorBase
:
:
HandleInlineSpellCheck
(
EditAction
action
Selection
*
aSelection
nsINode
*
previousSelectedNode
uint32_t
previousSelectedOffset
nsINode
*
aStartContainer
uint32_t
aStartOffset
nsINode
*
aEndContainer
uint32_t
aEndOffset
)
{
return
mInlineSpellChecker
?
mInlineSpellChecker
-
>
SpellCheckAfterEditorChange
(
(
int32_t
)
action
aSelection
previousSelectedNode
previousSelectedOffset
aStartContainer
aStartOffset
aEndContainer
aEndOffset
)
:
NS_OK
;
}
already_AddRefed
<
nsIContent
>
EditorBase
:
:
FindSelectionRoot
(
nsINode
*
aNode
)
{
nsCOMPtr
<
nsIContent
>
rootContent
=
GetRoot
(
)
;
return
rootContent
.
forget
(
)
;
}
nsresult
EditorBase
:
:
InitializeSelection
(
nsIDOMEventTarget
*
aFocusEventTarget
)
{
nsCOMPtr
<
nsINode
>
targetNode
=
do_QueryInterface
(
aFocusEventTarget
)
;
NS_ENSURE_TRUE
(
targetNode
NS_ERROR_INVALID_ARG
)
;
nsCOMPtr
<
nsIContent
>
selectionRootContent
=
FindSelectionRoot
(
targetNode
)
;
if
(
!
selectionRootContent
)
{
return
NS_OK
;
}
bool
isTargetDoc
=
targetNode
-
>
NodeType
(
)
=
=
nsIDOMNode
:
:
DOCUMENT_NODE
&
&
targetNode
-
>
HasFlag
(
NODE_IS_EDITABLE
)
;
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_STATE
(
selection
)
;
nsCOMPtr
<
nsIPresShell
>
presShell
=
GetPresShell
(
)
;
NS_ENSURE_TRUE
(
presShell
NS_ERROR_NOT_INITIALIZED
)
;
nsCOMPtr
<
nsISelectionController
>
selectionController
=
GetSelectionController
(
)
;
if
(
NS_WARN_IF
(
!
selectionController
)
)
{
return
NS_ERROR_FAILURE
;
}
RefPtr
<
nsCaret
>
caret
=
presShell
-
>
GetCaret
(
)
;
NS_ENSURE_TRUE
(
caret
NS_ERROR_UNEXPECTED
)
;
caret
-
>
SetIgnoreUserModify
(
false
)
;
caret
-
>
SetSelection
(
selection
)
;
selectionController
-
>
SetCaretReadOnly
(
IsReadonly
(
)
)
;
selectionController
-
>
SetCaretEnabled
(
true
)
;
selectionController
-
>
SetDisplaySelection
(
nsISelectionController
:
:
SELECTION_ON
)
;
selectionController
-
>
SetSelectionFlags
(
nsISelectionDisplay
:
:
DISPLAY_ALL
)
;
selectionController
-
>
RepaintSelection
(
nsISelectionController
:
:
SELECTION_NORMAL
)
;
if
(
selectionRootContent
-
>
GetParent
(
)
)
{
selection
-
>
SetAncestorLimiter
(
selectionRootContent
)
;
}
else
{
selection
-
>
SetAncestorLimiter
(
nullptr
)
;
}
if
(
isTargetDoc
)
{
if
(
!
selection
-
>
RangeCount
(
)
)
{
BeginningOfDocument
(
)
;
}
}
if
(
mComposition
&
&
!
mIMETextNode
&
&
mIMETextLength
)
{
nsRange
*
firstRange
=
selection
-
>
GetRangeAt
(
0
)
;
NS_ENSURE_TRUE
(
firstRange
NS_ERROR_FAILURE
)
;
EditorRawDOMPoint
atStartOfFirstRange
(
firstRange
-
>
StartRef
(
)
)
;
EditorRawDOMPoint
betterInsertionPoint
=
FindBetterInsertionPoint
(
atStartOfFirstRange
)
;
Text
*
textNode
=
betterInsertionPoint
.
Container
(
)
-
>
GetAsText
(
)
;
MOZ_ASSERT
(
textNode
"
There
must
be
text
node
if
mIMETextLength
is
larger
than
0
"
)
;
if
(
textNode
)
{
MOZ_ASSERT
(
textNode
-
>
Length
(
)
>
=
mIMETextOffset
+
mIMETextLength
"
The
text
node
must
be
different
from
the
old
mIMETextNode
"
)
;
CompositionTransaction
:
:
SetIMESelection
(
*
this
textNode
mIMETextOffset
mIMETextLength
mComposition
-
>
GetRanges
(
)
)
;
}
}
return
NS_OK
;
}
class
RepaintSelectionRunner
final
:
public
Runnable
{
public
:
explicit
RepaintSelectionRunner
(
nsISelectionController
*
aSelectionController
)
:
Runnable
(
"
RepaintSelectionRunner
"
)
mSelectionController
(
aSelectionController
)
{
}
NS_IMETHOD
Run
(
)
override
{
mSelectionController
-
>
RepaintSelection
(
nsISelectionController
:
:
SELECTION_NORMAL
)
;
return
NS_OK
;
}
private
:
nsCOMPtr
<
nsISelectionController
>
mSelectionController
;
}
;
NS_IMETHODIMP
EditorBase
:
:
FinalizeSelection
(
)
{
nsCOMPtr
<
nsISelectionController
>
selectionController
=
GetSelectionController
(
)
;
if
(
NS_WARN_IF
(
!
selectionController
)
)
{
return
NS_ERROR_FAILURE
;
}
RefPtr
<
Selection
>
selection
=
GetSelection
(
)
;
NS_ENSURE_STATE
(
selection
)
;
selection
-
>
SetAncestorLimiter
(
nullptr
)
;
nsCOMPtr
<
nsIPresShell
>
presShell
=
GetPresShell
(
)
;
NS_ENSURE_TRUE
(
presShell
NS_ERROR_NOT_INITIALIZED
)
;
selectionController
-
>
SetCaretEnabled
(
false
)
;
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
NS_ENSURE_TRUE
(
fm
NS_ERROR_NOT_INITIALIZED
)
;
fm
-
>
UpdateCaretForCaretBrowsingMode
(
)
;
if
(
!
HasIndependentSelection
(
)
)
{
nsCOMPtr
<
nsIDocument
>
doc
=
GetDocument
(
)
;
ErrorResult
ret
;
if
(
!
doc
|
|
!
doc
-
>
HasFocus
(
ret
)
)
{
selectionController
-
>
SetDisplaySelection
(
nsISelectionController
:
:
SELECTION_DISABLED
)
;
}
else
{
selectionController
-
>
SetDisplaySelection
(
nsISelectionController
:
:
SELECTION_ON
)
;
}
}
else
if
(
IsFormWidget
(
)
|
|
IsPasswordEditor
(
)
|
|
IsReadonly
(
)
|
|
IsDisabled
(
)
|
|
IsInputFiltered
(
)
)
{
selectionController
-
>
SetDisplaySelection
(
nsISelectionController
:
:
SELECTION_HIDDEN
)
;
}
else
{
selectionController
-
>
SetDisplaySelection
(
nsISelectionController
:
:
SELECTION_DISABLED
)
;
}
nsContentUtils
:
:
AddScriptRunner
(
new
RepaintSelectionRunner
(
selectionController
)
)
;
return
NS_OK
;
}
Element
*
EditorBase
:
:
GetEditorRoot
(
)
{
return
GetRoot
(
)
;
}
Element
*
EditorBase
:
:
GetExposedRoot
(
)
{
Element
*
rootElement
=
GetRoot
(
)
;
if
(
rootElement
&
&
rootElement
-
>
IsRootOfNativeAnonymousSubtree
(
)
)
{
rootElement
=
rootElement
-
>
GetParent
(
)
-
>
AsElement
(
)
;
}
return
rootElement
;
}
nsresult
EditorBase
:
:
DetermineCurrentDirection
(
)
{
nsIContent
*
rootElement
=
GetExposedRoot
(
)
;
NS_ENSURE_TRUE
(
rootElement
NS_ERROR_FAILURE
)
;
if
(
!
IsRightToLeft
(
)
&
&
!
IsLeftToRight
(
)
)
{
nsIFrame
*
frame
=
rootElement
-
>
GetPrimaryFrame
(
)
;
NS_ENSURE_TRUE
(
frame
NS_ERROR_FAILURE
)
;
if
(
frame
-
>
StyleVisibility
(
)
-
>
mDirection
=
=
NS_STYLE_DIRECTION_RTL
)
{
mFlags
|
=
nsIPlaintextEditor
:
:
eEditorRightToLeft
;
}
else
{
mFlags
|
=
nsIPlaintextEditor
:
:
eEditorLeftToRight
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
SwitchTextDirection
(
)
{
Element
*
rootElement
=
GetExposedRoot
(
)
;
nsresult
rv
=
DetermineCurrentDirection
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
IsRightToLeft
(
)
)
{
NS_ASSERTION
(
!
IsLeftToRight
(
)
"
Unexpected
mutually
exclusive
flag
"
)
;
mFlags
&
=
~
nsIPlaintextEditor
:
:
eEditorRightToLeft
;
mFlags
|
=
nsIPlaintextEditor
:
:
eEditorLeftToRight
;
rv
=
rootElement
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
dir
NS_LITERAL_STRING
(
"
ltr
"
)
true
)
;
}
else
if
(
IsLeftToRight
(
)
)
{
NS_ASSERTION
(
!
IsRightToLeft
(
)
"
Unexpected
mutually
exclusive
flag
"
)
;
mFlags
|
=
nsIPlaintextEditor
:
:
eEditorRightToLeft
;
mFlags
&
=
~
nsIPlaintextEditor
:
:
eEditorLeftToRight
;
rv
=
rootElement
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
dir
NS_LITERAL_STRING
(
"
rtl
"
)
true
)
;
}
if
(
NS_SUCCEEDED
(
rv
)
)
{
FireInputEvent
(
)
;
}
return
rv
;
}
void
EditorBase
:
:
SwitchTextDirectionTo
(
uint32_t
aDirection
)
{
Element
*
rootElement
=
GetExposedRoot
(
)
;
nsresult
rv
=
DetermineCurrentDirection
(
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
if
(
aDirection
=
=
nsIPlaintextEditor
:
:
eEditorLeftToRight
&
&
IsRightToLeft
(
)
)
{
NS_ASSERTION
(
!
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorLeftToRight
)
"
Unexpected
mutually
exclusive
flag
"
)
;
mFlags
&
=
~
nsIPlaintextEditor
:
:
eEditorRightToLeft
;
mFlags
|
=
nsIPlaintextEditor
:
:
eEditorLeftToRight
;
rv
=
rootElement
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
dir
NS_LITERAL_STRING
(
"
ltr
"
)
true
)
;
}
else
if
(
aDirection
=
=
nsIPlaintextEditor
:
:
eEditorRightToLeft
&
&
IsLeftToRight
(
)
)
{
NS_ASSERTION
(
!
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorRightToLeft
)
"
Unexpected
mutually
exclusive
flag
"
)
;
mFlags
|
=
nsIPlaintextEditor
:
:
eEditorRightToLeft
;
mFlags
&
=
~
nsIPlaintextEditor
:
:
eEditorLeftToRight
;
rv
=
rootElement
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
dir
NS_LITERAL_STRING
(
"
rtl
"
)
true
)
;
}
if
(
NS_SUCCEEDED
(
rv
)
)
{
FireInputEvent
(
)
;
}
}
#
if
DEBUG_JOE
void
EditorBase
:
:
DumpNode
(
nsIDOMNode
*
aNode
int32_t
indent
)
{
for
(
int32_t
i
=
0
;
i
<
indent
;
i
+
+
)
{
printf
(
"
"
)
;
}
nsCOMPtr
<
nsIDOMElement
>
element
=
do_QueryInterface
(
aNode
)
;
nsCOMPtr
<
nsIDOMDocumentFragment
>
docfrag
=
do_QueryInterface
(
aNode
)
;
if
(
element
|
|
docfrag
)
{
if
(
element
)
{
nsAutoString
tag
;
element
-
>
GetTagName
(
tag
)
;
printf
(
"
<
%
s
>
\
n
"
NS_LossyConvertUTF16toASCII
(
tag
)
.
get
(
)
)
;
}
else
{
printf
(
"
<
document
fragment
>
\
n
"
)
;
}
nsCOMPtr
<
nsIDOMNodeList
>
childList
;
aNode
-
>
GetChildNodes
(
getter_AddRefs
(
childList
)
)
;
NS_ENSURE_TRUE
(
childList
NS_ERROR_NULL_POINTER
)
;
uint32_t
numChildren
;
childList
-
>
GetLength
(
&
numChildren
)
;
nsCOMPtr
<
nsIDOMNode
>
child
tmp
;
aNode
-
>
GetFirstChild
(
getter_AddRefs
(
child
)
)
;
for
(
uint32_t
i
=
0
;
i
<
numChildren
;
i
+
+
)
{
DumpNode
(
child
indent
+
1
)
;
child
-
>
GetNextSibling
(
getter_AddRefs
(
tmp
)
)
;
child
=
tmp
;
}
}
else
if
(
IsTextNode
(
aNode
)
)
{
nsCOMPtr
<
nsIDOMCharacterData
>
textNode
=
do_QueryInterface
(
aNode
)
;
nsAutoString
str
;
textNode
-
>
GetData
(
str
)
;
nsAutoCString
cstr
;
LossyCopyUTF16toASCII
(
str
cstr
)
;
cstr
.
ReplaceChar
(
'
\
n
'
'
'
)
;
printf
(
"
<
textnode
>
%
s
\
n
"
cstr
.
get
(
)
)
;
}
}
#
endif
bool
EditorBase
:
:
IsModifiableNode
(
nsIDOMNode
*
aNode
)
{
return
true
;
}
bool
EditorBase
:
:
IsModifiableNode
(
nsINode
*
aNode
)
{
return
true
;
}
already_AddRefed
<
nsIContent
>
EditorBase
:
:
GetFocusedContent
(
)
{
nsCOMPtr
<
nsIDOMEventTarget
>
piTarget
=
GetDOMEventTarget
(
)
;
if
(
!
piTarget
)
{
return
nullptr
;
}
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
NS_ENSURE_TRUE
(
fm
nullptr
)
;
nsIContent
*
content
=
fm
-
>
GetFocusedContent
(
)
;
MOZ_ASSERT
(
(
content
=
=
piTarget
)
=
=
SameCOMIdentity
(
content
piTarget
)
)
;
return
(
content
=
=
piTarget
)
?
piTarget
.
forget
(
)
.
downcast
<
nsIContent
>
(
)
:
nullptr
;
}
already_AddRefed
<
nsIContent
>
EditorBase
:
:
GetFocusedContentForIME
(
)
{
return
GetFocusedContent
(
)
;
}
bool
EditorBase
:
:
IsActiveInDOMWindow
(
)
{
nsCOMPtr
<
nsIDOMEventTarget
>
piTarget
=
GetDOMEventTarget
(
)
;
if
(
!
piTarget
)
{
return
false
;
}
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
NS_ENSURE_TRUE
(
fm
false
)
;
nsCOMPtr
<
nsIDocument
>
document
=
GetDocument
(
)
;
if
(
NS_WARN_IF
(
!
document
)
)
{
return
false
;
}
nsPIDOMWindowOuter
*
ourWindow
=
document
-
>
GetWindow
(
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
win
;
nsIContent
*
content
=
nsFocusManager
:
:
GetFocusedDescendant
(
ourWindow
nsFocusManager
:
:
eOnlyCurrentWindow
getter_AddRefs
(
win
)
)
;
return
SameCOMIdentity
(
content
piTarget
)
;
}
bool
EditorBase
:
:
IsAcceptableInputEvent
(
WidgetGUIEvent
*
aGUIEvent
)
{
if
(
NS_WARN_IF
(
!
aGUIEvent
)
)
{
return
false
;
}
if
(
aGUIEvent
-
>
IsUsingCoordinates
(
)
)
{
nsCOMPtr
<
nsIContent
>
focusedContent
=
GetFocusedContent
(
)
;
if
(
!
focusedContent
)
{
return
false
;
}
}
bool
needsWidget
=
false
;
switch
(
aGUIEvent
-
>
mMessage
)
{
case
eUnidentifiedEvent
:
return
false
;
case
eCompositionStart
:
case
eCompositionEnd
:
case
eCompositionUpdate
:
case
eCompositionChange
:
case
eCompositionCommitAsIs
:
if
(
!
aGUIEvent
-
>
AsCompositionEvent
(
)
)
{
return
false
;
}
needsWidget
=
true
;
break
;
default
:
break
;
}
if
(
needsWidget
&
&
!
aGUIEvent
-
>
mWidget
)
{
return
false
;
}
if
(
aGUIEvent
-
>
IsTrusted
(
)
)
{
return
true
;
}
if
(
aGUIEvent
-
>
AsMouseEventBase
(
)
)
{
return
false
;
}
return
IsActiveInDOMWindow
(
)
;
}
void
EditorBase
:
:
OnFocus
(
nsIDOMEventTarget
*
aFocusEventTarget
)
{
InitializeSelection
(
aFocusEventTarget
)
;
mSpellCheckerDictionaryUpdated
=
false
;
if
(
mInlineSpellChecker
&
&
CanEnableSpellCheck
(
)
)
{
mInlineSpellChecker
-
>
UpdateCurrentDictionary
(
)
;
mSpellCheckerDictionaryUpdated
=
true
;
}
}
NS_IMETHODIMP
EditorBase
:
:
GetSuppressDispatchingInputEvent
(
bool
*
aSuppressed
)
{
if
(
NS_WARN_IF
(
aSuppressed
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
aSuppressed
=
IsSuppressingDispatchingInputEvent
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
SetSuppressDispatchingInputEvent
(
bool
aSuppress
)
{
mDispatchInputEvent
=
!
aSuppress
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorBase
:
:
GetIsInEditAction
(
bool
*
aIsInEditAction
)
{
MOZ_ASSERT
(
aIsInEditAction
"
aIsInEditAction
must
not
be
null
"
)
;
*
aIsInEditAction
=
IsInEditAction
(
)
;
return
NS_OK
;
}
int32_t
EditorBase
:
:
GetIMESelectionStartOffsetIn
(
nsINode
*
aTextNode
)
{
MOZ_ASSERT
(
aTextNode
"
aTextNode
must
not
be
nullptr
"
)
;
nsISelectionController
*
selectionController
=
GetSelectionController
(
)
;
if
(
NS_WARN_IF
(
!
selectionController
)
)
{
return
-
1
;
}
uint32_t
minOffset
=
UINT32_MAX
;
static
const
SelectionType
kIMESelectionTypes
[
]
=
{
SelectionType
:
:
eIMERawClause
SelectionType
:
:
eIMESelectedRawClause
SelectionType
:
:
eIMEConvertedClause
SelectionType
:
:
eIMESelectedClause
}
;
for
(
auto
selectionType
:
kIMESelectionTypes
)
{
RefPtr
<
Selection
>
selection
=
GetSelection
(
selectionType
)
;
if
(
!
selection
)
{
continue
;
}
for
(
uint32_t
i
=
0
;
i
<
selection
-
>
RangeCount
(
)
;
i
+
+
)
{
RefPtr
<
nsRange
>
range
=
selection
-
>
GetRangeAt
(
i
)
;
if
(
NS_WARN_IF
(
!
range
)
)
{
continue
;
}
if
(
NS_WARN_IF
(
range
-
>
GetStartContainer
(
)
!
=
aTextNode
)
)
{
}
else
{
minOffset
=
std
:
:
min
(
minOffset
range
-
>
StartOffset
(
)
)
;
}
if
(
NS_WARN_IF
(
range
-
>
GetEndContainer
(
)
!
=
aTextNode
)
)
{
}
else
{
minOffset
=
std
:
:
min
(
minOffset
range
-
>
EndOffset
(
)
)
;
}
}
}
return
minOffset
<
INT32_MAX
?
minOffset
:
-
1
;
}
void
EditorBase
:
:
HideCaret
(
bool
aHide
)
{
if
(
mHidingCaret
=
=
aHide
)
{
return
;
}
nsCOMPtr
<
nsIPresShell
>
presShell
=
GetPresShell
(
)
;
NS_ENSURE_TRUE_VOID
(
presShell
)
;
RefPtr
<
nsCaret
>
caret
=
presShell
-
>
GetCaret
(
)
;
NS_ENSURE_TRUE_VOID
(
caret
)
;
mHidingCaret
=
aHide
;
if
(
aHide
)
{
caret
-
>
AddForceHide
(
)
;
}
else
{
caret
-
>
RemoveForceHide
(
)
;
}
}
}
