#
ifndef
mozilla_EditorBase_h
#
define
mozilla_EditorBase_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
EditAction
.
h
"
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
OwningNonNull
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
RangeBoundary
.
h
"
#
include
"
mozilla
/
SelectionState
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
TransactionManager
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
mozilla
/
dom
/
DataTransfer
.
h
"
#
include
"
mozilla
/
dom
/
HTMLBRElement
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIContentInlines
.
h
"
#
include
"
nsIEditor
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIPlaintextEditor
.
h
"
#
include
"
nsISelectionController
.
h
"
#
include
"
nsISelectionListener
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nscore
.
h
"
class
mozInlineSpellChecker
;
class
nsAtom
;
class
nsCaret
;
class
nsIContent
;
class
nsIDocumentStateListener
;
class
nsIEditActionListener
;
class
nsIEditorObserver
;
class
nsINode
;
class
nsIPrincipal
;
class
nsISupports
;
class
nsITransferable
;
class
nsITransaction
;
class
nsITransactionListener
;
class
nsIWidget
;
class
nsRange
;
namespace
mozilla
{
class
AutoSelectionRestorer
;
class
AutoTopLevelEditSubActionNotifier
;
class
AutoTransactionBatch
;
class
AutoTransactionsConserveSelection
;
class
AutoUpdateViewBatch
;
class
ChangeAttributeTransaction
;
class
CompositionTransaction
;
class
CreateElementTransaction
;
class
CSSEditUtils
;
class
DeleteNodeTransaction
;
class
DeleteRangeTransaction
;
class
DeleteTextTransaction
;
class
EditAggregateTransaction
;
class
EditorEventListener
;
class
EditTransactionBase
;
class
ErrorResult
;
class
HTMLEditor
;
class
HTMLEditUtils
;
class
IMEContentObserver
;
class
InsertNodeTransaction
;
class
InsertTextTransaction
;
class
JoinNodeTransaction
;
class
PlaceholderTransaction
;
class
PresShell
;
class
SplitNodeResult
;
class
SplitNodeTransaction
;
class
TextComposition
;
class
TextEditor
;
class
TextEditRules
;
class
TextInputListener
;
class
TextServicesDocument
;
class
TypeInState
;
class
WSRunObject
;
template
<
typename
NodeType
>
class
CreateNodeResultBase
;
typedef
CreateNodeResultBase
<
dom
:
:
Element
>
CreateElementResult
;
namespace
dom
{
class
DataTransfer
;
class
DragEvent
;
class
Element
;
class
EventTarget
;
class
HTMLBRElement
;
}
namespace
widget
{
struct
IMEState
;
}
enum
class
SplitAtEdges
{
eDoNotCreateEmptyContainer
eAllowToCreateEmptyContainer
}
;
class
EditorBase
:
public
nsIEditor
public
nsISelectionListener
public
nsSupportsWeakReference
{
public
:
typedef
dom
:
:
Document
Document
;
typedef
dom
:
:
Element
Element
;
typedef
dom
:
:
Selection
Selection
;
typedef
dom
:
:
Text
Text
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
EditorBase
nsIEditor
)
NS_DECL_NSIEDITOR
NS_DECL_NSISELECTIONLISTENER
EditorBase
(
)
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
Init
(
Document
&
doc
Element
*
aRoot
nsISelectionController
*
aSelCon
uint32_t
aFlags
const
nsAString
&
aInitialValue
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
PostCreate
(
)
;
MOZ_CAN_RUN_SCRIPT
virtual
void
PreDestroy
(
bool
aDestroyingFrames
)
;
bool
IsInitialized
(
)
const
{
return
!
!
mDocument
;
}
bool
Destroyed
(
)
const
{
return
mDidPreDestroy
;
}
Document
*
GetDocument
(
)
const
{
return
mDocument
;
}
nsPIDOMWindowOuter
*
GetWindow
(
)
const
{
return
mDocument
?
mDocument
-
>
GetWindow
(
)
:
nullptr
;
}
nsPIDOMWindowInner
*
GetInnerWindow
(
)
const
{
return
mDocument
?
mDocument
-
>
GetInnerWindow
(
)
:
nullptr
;
}
bool
HasMutationEventListeners
(
uint32_t
aMutationEventType
=
0xFFFFFFFF
)
const
{
if
(
!
mIsHTMLEditorClass
)
{
return
false
;
}
nsPIDOMWindowInner
*
window
=
GetInnerWindow
(
)
;
return
window
?
window
-
>
HasMutationListeners
(
aMutationEventType
)
:
false
;
}
PresShell
*
GetPresShell
(
)
const
{
return
mDocument
?
mDocument
-
>
GetPresShell
(
)
:
nullptr
;
}
nsPresContext
*
GetPresContext
(
)
const
{
PresShell
*
presShell
=
GetPresShell
(
)
;
return
presShell
?
presShell
-
>
GetPresContext
(
)
:
nullptr
;
}
already_AddRefed
<
nsCaret
>
GetCaret
(
)
const
{
PresShell
*
presShell
=
GetPresShell
(
)
;
if
(
NS_WARN_IF
(
!
presShell
)
)
{
return
nullptr
;
}
return
presShell
-
>
GetCaret
(
)
;
}
already_AddRefed
<
nsIWidget
>
GetWidget
(
)
;
nsISelectionController
*
GetSelectionController
(
)
const
{
if
(
mSelectionController
)
{
return
mSelectionController
;
}
if
(
!
mDocument
)
{
return
nullptr
;
}
return
mDocument
-
>
GetPresShell
(
)
;
}
nsresult
GetSelection
(
SelectionType
aSelectionType
Selection
*
*
aSelection
)
const
;
Selection
*
GetSelection
(
SelectionType
aSelectionType
=
SelectionType
:
:
eNormal
)
const
{
if
(
aSelectionType
=
=
SelectionType
:
:
eNormal
&
&
IsEditActionDataAvailable
(
)
)
{
return
SelectionRefPtr
(
)
.
get
(
)
;
}
nsISelectionController
*
sc
=
GetSelectionController
(
)
;
if
(
!
sc
)
{
return
nullptr
;
}
Selection
*
selection
=
sc
-
>
GetSelection
(
ToRawSelectionType
(
aSelectionType
)
)
;
return
selection
;
}
Element
*
GetRoot
(
)
const
{
return
mRootElement
;
}
void
SetTextInputListener
(
TextInputListener
*
aTextInputListener
)
;
void
SetIMEContentObserver
(
IMEContentObserver
*
aIMEContentObserver
)
;
TextComposition
*
GetComposition
(
)
const
;
virtual
nsresult
GetPreferredIMEState
(
widget
:
:
IMEState
*
aState
)
;
bool
IsIMEComposing
(
)
const
;
nsresult
CommitComposition
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
ToggleTextDirectionAsAction
(
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
enum
class
TextDirection
{
eLTR
eRTL
}
;
MOZ_CAN_RUN_SCRIPT
void
SwitchTextDirectionTo
(
TextDirection
aTextDirection
)
;
nsresult
FinalizeSelection
(
)
;
bool
IsSelectionEditable
(
)
;
size_t
NumberOfUndoItems
(
)
const
{
return
mTransactionManager
?
mTransactionManager
-
>
NumberOfUndoItems
(
)
:
0
;
}
size_t
NumberOfRedoItems
(
)
const
{
return
mTransactionManager
?
mTransactionManager
-
>
NumberOfRedoItems
(
)
:
0
;
}
int32_t
NumberOfMaximumTransactions
(
)
const
{
return
mTransactionManager
?
mTransactionManager
-
>
NumberOfMaximumTransactions
(
)
:
0
;
}
bool
IsUndoRedoEnabled
(
)
const
{
return
mTransactionManager
&
&
mTransactionManager
-
>
NumberOfMaximumTransactions
(
)
;
}
bool
CanUndo
(
)
const
{
return
IsUndoRedoEnabled
(
)
&
&
NumberOfUndoItems
(
)
>
0
;
}
bool
CanRedo
(
)
const
{
return
IsUndoRedoEnabled
(
)
&
&
NumberOfRedoItems
(
)
>
0
;
}
bool
EnableUndoRedo
(
int32_t
aMaxTransactionCount
=
-
1
)
{
if
(
!
mTransactionManager
)
{
mTransactionManager
=
new
TransactionManager
(
)
;
}
return
mTransactionManager
-
>
EnableUndoRedo
(
aMaxTransactionCount
)
;
}
bool
DisableUndoRedo
(
)
{
if
(
!
mTransactionManager
)
{
return
true
;
}
return
mTransactionManager
-
>
DisableUndoRedo
(
)
;
}
bool
ClearUndoRedo
(
)
{
if
(
!
mTransactionManager
)
{
return
true
;
}
return
mTransactionManager
-
>
ClearUndoRedo
(
)
;
}
bool
AddTransactionListener
(
nsITransactionListener
&
aListener
)
{
if
(
!
mTransactionManager
)
{
return
false
;
}
return
mTransactionManager
-
>
AddTransactionListener
(
aListener
)
;
}
bool
RemoveTransactionListener
(
nsITransactionListener
&
aListener
)
{
if
(
!
mTransactionManager
)
{
return
false
;
}
return
mTransactionManager
-
>
RemoveTransactionListener
(
aListener
)
;
}
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
HandleKeyPressEvent
(
WidgetKeyboardEvent
*
aKeyboardEvent
)
;
virtual
dom
:
:
EventTarget
*
GetDOMEventTarget
(
)
=
0
;
uint32_t
Flags
(
)
const
{
return
mFlags
;
}
nsresult
AddFlags
(
uint32_t
aFlags
)
{
const
uint32_t
kOldFlags
=
Flags
(
)
;
const
uint32_t
kNewFlags
=
(
kOldFlags
|
aFlags
)
;
if
(
kNewFlags
=
=
kOldFlags
)
{
return
NS_OK
;
}
return
SetFlags
(
kNewFlags
)
;
}
nsresult
RemoveFlags
(
uint32_t
aFlags
)
{
const
uint32_t
kOldFlags
=
Flags
(
)
;
const
uint32_t
kNewFlags
=
(
kOldFlags
&
~
aFlags
)
;
if
(
kNewFlags
=
=
kOldFlags
)
{
return
NS_OK
;
}
return
SetFlags
(
kNewFlags
)
;
}
nsresult
AddAndRemoveFlags
(
uint32_t
aAddingFlags
uint32_t
aRemovingFlags
)
{
MOZ_ASSERT
(
!
(
aAddingFlags
&
aRemovingFlags
)
"
Same
flags
are
specified
both
adding
and
removing
"
)
;
const
uint32_t
kOldFlags
=
Flags
(
)
;
const
uint32_t
kNewFlags
=
(
(
kOldFlags
|
aAddingFlags
)
&
~
aRemovingFlags
)
;
if
(
kNewFlags
=
=
kOldFlags
)
{
return
NS_OK
;
}
return
SetFlags
(
kNewFlags
)
;
}
bool
IsPlaintextEditor
(
)
const
{
return
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorPlaintextMask
)
!
=
0
;
}
bool
IsSingleLineEditor
(
)
const
{
return
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorSingleLineMask
)
!
=
0
;
}
bool
IsPasswordEditor
(
)
const
{
return
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorPasswordMask
)
!
=
0
;
}
bool
IsRightToLeft
(
)
const
{
return
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorRightToLeft
)
!
=
0
;
}
bool
IsLeftToRight
(
)
const
{
return
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorLeftToRight
)
!
=
0
;
}
bool
IsReadonly
(
)
const
{
return
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorReadonlyMask
)
!
=
0
;
}
bool
IsDisabled
(
)
const
{
return
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorDisabledMask
)
!
=
0
;
}
bool
IsInputFiltered
(
)
const
{
return
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorFilterInputMask
)
!
=
0
;
}
bool
IsMailEditor
(
)
const
{
return
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorMailMask
)
!
=
0
;
}
bool
IsWrapHackEnabled
(
)
const
{
return
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorEnableWrapHackMask
)
!
=
0
;
}
bool
IsFormWidget
(
)
const
{
return
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorWidgetMask
)
!
=
0
;
}
bool
NoCSS
(
)
const
{
return
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorNoCSSMask
)
!
=
0
;
}
bool
IsInteractionAllowed
(
)
const
{
return
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorAllowInteraction
)
!
=
0
;
}
bool
DontEchoPassword
(
)
const
{
return
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorDontEchoPassword
)
!
=
0
;
}
bool
ShouldSkipSpellCheck
(
)
const
{
return
(
mFlags
&
nsIPlaintextEditor
:
:
eEditorSkipSpellCheck
)
!
=
0
;
}
bool
IsTabbable
(
)
const
{
return
IsSingleLineEditor
(
)
|
|
IsPasswordEditor
(
)
|
|
IsFormWidget
(
)
|
|
IsInteractionAllowed
(
)
;
}
bool
HasIndependentSelection
(
)
const
{
return
!
!
mSelectionController
;
}
bool
IsModifiable
(
)
const
{
return
!
IsReadonly
(
)
;
}
bool
IsInEditSubAction
(
)
const
{
return
mIsInEditSubAction
;
}
void
SuppressDispatchingInputEvent
(
bool
aSuppress
)
{
mDispatchInputEvent
=
!
aSuppress
;
}
bool
IsSuppressingDispatchingInputEvent
(
)
const
{
return
!
mDispatchInputEvent
;
}
bool
OutputsMozDirty
(
)
const
{
return
!
IsInteractionAllowed
(
)
|
|
IsMailEditor
(
)
;
}
virtual
nsIContent
*
GetFocusedContent
(
)
;
virtual
already_AddRefed
<
nsIContent
>
GetFocusedContentForIME
(
)
;
virtual
bool
IsAcceptableInputEvent
(
WidgetGUIEvent
*
aGUIEvent
)
;
virtual
Element
*
FindSelectionRoot
(
nsINode
*
aNode
)
const
;
void
OnFocus
(
dom
:
:
EventTarget
*
aFocusEventTarget
)
;
void
SyncRealTimeSpell
(
)
;
void
ReinitializeSelection
(
Element
&
aElement
)
;
protected
:
class
AutoEditActionDataSetter
;
struct
MOZ_STACK_CLASS
TopLevelEditSubActionData
final
{
friend
class
AutoEditActionDataSetter
;
bool
mDidDeleteSelection
;
bool
mDidExplicitlySetInterLine
;
bool
mDidDeleteNonCollapsedRange
;
bool
mDidDeleteEmptyParentBlocks
;
private
:
void
Clear
(
)
{
mDidDeleteSelection
=
false
;
mDidExplicitlySetInterLine
=
false
;
mDidDeleteNonCollapsedRange
=
false
;
mDidDeleteEmptyParentBlocks
=
false
;
}
TopLevelEditSubActionData
(
)
=
default
;
TopLevelEditSubActionData
(
const
TopLevelEditSubActionData
&
aOther
)
=
delete
;
}
;
protected
:
enum
class
SettingDataTransfer
{
eWithFormat
eWithoutFormat
}
;
class
MOZ_STACK_CLASS
AutoEditActionDataSetter
final
{
public
:
AutoEditActionDataSetter
(
const
EditorBase
&
aEditorBase
EditAction
aEditAction
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
~
AutoEditActionDataSetter
(
)
;
void
UpdateEditAction
(
EditAction
aEditAction
)
{
mEditAction
=
aEditAction
;
}
bool
CanHandle
(
)
const
{
return
mSelection
&
&
mEditorBase
.
IsInitialized
(
)
;
}
const
RefPtr
<
Selection
>
&
SelectionRefPtr
(
)
const
{
return
mSelection
;
}
EditAction
GetEditAction
(
)
const
{
return
mEditAction
;
}
template
<
typename
PT
typename
CT
>
void
SetSpellCheckRestartPoint
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
{
MOZ_ASSERT
(
aPoint
.
IsSet
(
)
)
;
mSpellCheckRestartPoint
=
EditorDOMPoint
(
aPoint
.
GetContainer
(
)
aPoint
.
Offset
(
)
)
;
}
void
ClearSpellCheckRestartPoint
(
)
{
mSpellCheckRestartPoint
.
Clear
(
)
;
}
const
EditorDOMPoint
&
GetSpellCheckRestartPoint
(
)
const
{
return
mSpellCheckRestartPoint
;
}
void
SetData
(
const
nsAString
&
aData
)
{
mData
=
aData
;
}
const
nsString
&
GetData
(
)
const
{
return
mData
;
}
void
SetColorData
(
const
nsAString
&
aData
)
;
void
InitializeDataTransfer
(
dom
:
:
DataTransfer
*
aDataTransfer
)
;
void
InitializeDataTransfer
(
nsITransferable
*
aTransferable
)
;
void
InitializeDataTransfer
(
const
nsAString
&
aString
)
;
void
InitializeDataTransferWithClipboard
(
SettingDataTransfer
aSettingDataTransfer
int32_t
aClipboardType
)
;
dom
:
:
DataTransfer
*
GetDataTransfer
(
)
const
{
return
mDataTransfer
;
}
void
SetTopLevelEditSubAction
(
EditSubAction
aEditSubAction
EDirection
aDirection
=
eNone
)
{
mTopLevelEditSubAction
=
aEditSubAction
;
TopLevelEditSubActionDataRef
(
)
.
Clear
(
)
;
switch
(
mTopLevelEditSubAction
)
{
case
EditSubAction
:
:
eInsertNode
:
case
EditSubAction
:
:
eCreateNode
:
case
EditSubAction
:
:
eSplitNode
:
case
EditSubAction
:
:
eInsertText
:
case
EditSubAction
:
:
eInsertTextComingFromIME
:
case
EditSubAction
:
:
eSetTextProperty
:
case
EditSubAction
:
:
eRemoveTextProperty
:
case
EditSubAction
:
:
eRemoveAllTextProperties
:
case
EditSubAction
:
:
eSetText
:
case
EditSubAction
:
:
eInsertLineBreak
:
case
EditSubAction
:
:
eInsertParagraphSeparator
:
case
EditSubAction
:
:
eCreateOrChangeList
:
case
EditSubAction
:
:
eIndent
:
case
EditSubAction
:
:
eOutdent
:
case
EditSubAction
:
:
eSetOrClearAlignment
:
case
EditSubAction
:
:
eCreateOrRemoveBlock
:
case
EditSubAction
:
:
eRemoveList
:
case
EditSubAction
:
:
eCreateOrChangeDefinitionList
:
case
EditSubAction
:
:
eInsertElement
:
case
EditSubAction
:
:
eInsertQuotation
:
case
EditSubAction
:
:
eInsertQuotedText
:
case
EditSubAction
:
:
ePasteHTMLContent
:
case
EditSubAction
:
:
eInsertHTMLSource
:
case
EditSubAction
:
:
eSetPositionToAbsolute
:
case
EditSubAction
:
:
eSetPositionToStatic
:
case
EditSubAction
:
:
eDecreaseZIndex
:
case
EditSubAction
:
:
eIncreaseZIndex
:
MOZ_ASSERT
(
aDirection
=
=
eNext
)
;
mDirectionOfTopLevelEditSubAction
=
eNext
;
break
;
case
EditSubAction
:
:
eJoinNodes
:
case
EditSubAction
:
:
eDeleteText
:
MOZ_ASSERT
(
aDirection
=
=
ePrevious
)
;
mDirectionOfTopLevelEditSubAction
=
ePrevious
;
break
;
case
EditSubAction
:
:
eUndo
:
case
EditSubAction
:
:
eRedo
:
case
EditSubAction
:
:
eComputeTextToOutput
:
case
EditSubAction
:
:
eCreatePaddingBRElementForEmptyEditor
:
case
EditSubAction
:
:
eNone
:
MOZ_ASSERT
(
aDirection
=
=
eNone
)
;
mDirectionOfTopLevelEditSubAction
=
eNone
;
break
;
case
EditSubAction
:
:
eReplaceHeadWithHTMLSource
:
mDirectionOfTopLevelEditSubAction
=
eNone
;
break
;
case
EditSubAction
:
:
eDeleteNode
:
case
EditSubAction
:
:
eDeleteSelectedContent
:
mDirectionOfTopLevelEditSubAction
=
aDirection
;
break
;
}
}
EditSubAction
GetTopLevelEditSubAction
(
)
const
{
MOZ_ASSERT
(
CanHandle
(
)
)
;
return
mTopLevelEditSubAction
;
}
EDirection
GetDirectionOfTopLevelEditSubAction
(
)
const
{
return
mDirectionOfTopLevelEditSubAction
;
}
const
TopLevelEditSubActionData
&
TopLevelEditSubActionDataRef
(
)
const
{
return
mParentData
?
mParentData
-
>
TopLevelEditSubActionDataRef
(
)
:
mTopLevelEditSubActionData
;
}
TopLevelEditSubActionData
&
TopLevelEditSubActionDataRef
(
)
{
return
mParentData
?
mParentData
-
>
TopLevelEditSubActionDataRef
(
)
:
mTopLevelEditSubActionData
;
}
SelectionState
&
SavedSelectionRef
(
)
{
return
mParentData
?
mParentData
-
>
SavedSelectionRef
(
)
:
mSavedSelection
;
}
const
SelectionState
&
SavedSelectionRef
(
)
const
{
return
mParentData
?
mParentData
-
>
SavedSelectionRef
(
)
:
mSavedSelection
;
}
RangeUpdater
&
RangeUpdaterRef
(
)
{
return
mParentData
?
mParentData
-
>
RangeUpdaterRef
(
)
:
mRangeUpdater
;
}
const
RangeUpdater
&
RangeUpdaterRef
(
)
const
{
return
mParentData
?
mParentData
-
>
RangeUpdaterRef
(
)
:
mRangeUpdater
;
}
void
UpdateSelectionCache
(
Selection
&
aSelection
)
{
AutoEditActionDataSetter
*
actionData
=
this
;
while
(
actionData
)
{
if
(
actionData
-
>
mSelection
)
{
actionData
-
>
mSelection
=
&
aSelection
;
}
actionData
=
actionData
-
>
mParentData
;
}
}
private
:
EditorBase
&
mEditorBase
;
RefPtr
<
Selection
>
mSelection
;
AutoEditActionDataSetter
*
mParentData
;
SelectionState
mSavedSelection
;
RangeUpdater
mRangeUpdater
;
nsString
mData
;
RefPtr
<
dom
:
:
DataTransfer
>
mDataTransfer
;
EditorDOMPoint
mSpellCheckRestartPoint
;
TopLevelEditSubActionData
mTopLevelEditSubActionData
;
EditAction
mEditAction
;
EditSubAction
mTopLevelEditSubAction
;
EDirection
mDirectionOfTopLevelEditSubAction
;
AutoEditActionDataSetter
(
)
=
delete
;
AutoEditActionDataSetter
(
const
AutoEditActionDataSetter
&
aOther
)
=
delete
;
}
;
void
UpdateEditActionData
(
const
nsAString
&
aData
)
{
mEditActionData
-
>
SetData
(
aData
)
;
}
protected
:
bool
IsEditActionDataAvailable
(
)
const
{
return
mEditActionData
&
&
mEditActionData
-
>
CanHandle
(
)
;
}
const
RefPtr
<
Selection
>
&
SelectionRefPtr
(
)
const
{
MOZ_ASSERT
(
mEditActionData
)
;
return
mEditActionData
-
>
SelectionRefPtr
(
)
;
}
EditAction
GetEditAction
(
)
const
{
return
mEditActionData
?
mEditActionData
-
>
GetEditAction
(
)
:
EditAction
:
:
eNone
;
}
const
nsString
&
GetInputEventData
(
)
const
{
return
mEditActionData
?
mEditActionData
-
>
GetData
(
)
:
VoidString
(
)
;
}
dom
:
:
DataTransfer
*
GetInputEventDataTransfer
(
)
const
{
return
mEditActionData
?
mEditActionData
-
>
GetDataTransfer
(
)
:
nullptr
;
}
EditSubAction
GetTopLevelEditSubAction
(
)
const
{
return
mEditActionData
?
mEditActionData
-
>
GetTopLevelEditSubAction
(
)
:
EditSubAction
:
:
eNone
;
}
EDirection
GetDirectionOfTopLevelEditSubAction
(
)
const
{
return
mEditActionData
?
mEditActionData
-
>
GetDirectionOfTopLevelEditSubAction
(
)
:
eNone
;
}
SelectionState
&
SavedSelectionRef
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
return
mEditActionData
-
>
SavedSelectionRef
(
)
;
}
const
SelectionState
&
SavedSelectionRef
(
)
const
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
return
mEditActionData
-
>
SavedSelectionRef
(
)
;
}
RangeUpdater
&
RangeUpdaterRef
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
return
mEditActionData
-
>
RangeUpdaterRef
(
)
;
}
const
RangeUpdater
&
RangeUpdaterRef
(
)
const
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
return
mEditActionData
-
>
RangeUpdaterRef
(
)
;
}
template
<
typename
PT
typename
CT
>
void
SetSpellCheckRestartPoint
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
return
mEditActionData
-
>
SetSpellCheckRestartPoint
(
aPoint
)
;
}
void
ClearSpellCheckRestartPoint
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
return
mEditActionData
-
>
ClearSpellCheckRestartPoint
(
)
;
}
const
EditorDOMPoint
&
GetSpellCheckRestartPoint
(
)
const
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
return
mEditActionData
-
>
GetSpellCheckRestartPoint
(
)
;
}
const
TopLevelEditSubActionData
&
TopLevelEditSubActionDataRef
(
)
const
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
return
mEditActionData
-
>
TopLevelEditSubActionDataRef
(
)
;
}
TopLevelEditSubActionData
&
TopLevelEditSubActionDataRef
(
)
{
MOZ_ASSERT
(
IsEditActionDataAvailable
(
)
)
;
return
mEditActionData
-
>
TopLevelEditSubActionDataRef
(
)
;
}
EditorRawDOMPoint
GetCompositionStartPoint
(
)
const
;
EditorRawDOMPoint
GetCompositionEndPoint
(
)
const
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
InsertTextWithTransaction
(
Document
&
aDocument
const
nsAString
&
aStringToInsert
const
EditorRawDOMPoint
&
aPointToInsert
EditorRawDOMPoint
*
aPointAfterInsertedString
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertTextIntoTextNodeWithTransaction
(
const
nsAString
&
aStringToInsert
Text
&
aTextNode
int32_t
aOffset
bool
aSuppressIME
=
false
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetTextImpl
(
const
nsAString
&
aString
Text
&
aTextNode
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteNodeWithTransaction
(
nsINode
&
aNode
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertNodeWithTransaction
(
nsIContent
&
aContentToInsert
const
EditorDOMPoint
&
aPointToInsert
)
;
MOZ_CAN_RUN_SCRIPT
MOZ_MUST_USE
CreateElementResult
InsertPaddingBRElementForEmptyLastLineWithTransaction
(
const
EditorDOMPoint
&
aPointToInsert
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
ReplaceContainerWithTransaction
(
Element
&
aOldContainer
nsAtom
&
aTagName
)
{
return
ReplaceContainerWithTransactionInternal
(
aOldContainer
aTagName
*
nsGkAtoms
:
:
_empty
EmptyString
(
)
false
)
;
}
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
ReplaceContainerAndCloneAttributesWithTransaction
(
Element
&
aOldContainer
nsAtom
&
aTagName
)
{
return
ReplaceContainerWithTransactionInternal
(
aOldContainer
aTagName
*
nsGkAtoms
:
:
_empty
EmptyString
(
)
true
)
;
}
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
ReplaceContainerWithTransaction
(
Element
&
aOldContainer
nsAtom
&
aTagName
nsAtom
&
aAttribute
const
nsAString
&
aAttributeValue
)
{
return
ReplaceContainerWithTransactionInternal
(
aOldContainer
aTagName
aAttribute
aAttributeValue
false
)
;
}
MOZ_CAN_RUN_SCRIPT
void
CloneAttributesWithTransaction
(
Element
&
aDestElement
Element
&
aSourceElement
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
RemoveContainerWithTransaction
(
Element
&
aElement
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
InsertContainerWithTransaction
(
nsIContent
&
aContent
nsAtom
&
aTagName
)
{
return
InsertContainerWithTransactionInternal
(
aContent
aTagName
*
nsGkAtoms
:
:
_empty
EmptyString
(
)
)
;
}
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
InsertContainerWithTransaction
(
nsIContent
&
aContent
nsAtom
&
aTagName
nsAtom
&
aAttribute
const
nsAString
&
aAttributeValue
)
{
return
InsertContainerWithTransactionInternal
(
aContent
aTagName
aAttribute
aAttributeValue
)
;
}
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
nsIContent
>
SplitNodeWithTransaction
(
const
EditorDOMPoint
&
aStartOfRightNode
ErrorResult
&
aResult
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
JoinNodesWithTransaction
(
nsINode
&
aLeftNode
nsINode
&
aRightNode
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
MoveNodeWithTransaction
(
nsIContent
&
aContent
const
EditorDOMPoint
&
aPointToInsert
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
MoveNodeToEndWithTransaction
(
nsIContent
&
aContent
nsINode
&
aNewContainer
)
{
EditorDOMPoint
pointToInsert
;
pointToInsert
.
SetToEndOf
(
&
aNewContainer
)
;
return
MoveNodeWithTransaction
(
aContent
pointToInsert
)
;
}
void
MoveAllChildren
(
nsINode
&
aContainer
const
EditorRawDOMPoint
&
aPointToInsert
ErrorResult
&
aError
)
;
void
MovePreviousSiblings
(
nsIContent
&
aChild
const
EditorRawDOMPoint
&
aPointToInsert
ErrorResult
&
aError
)
;
void
MoveChildren
(
nsIContent
&
aFirstChild
nsIContent
&
aLastChild
const
EditorRawDOMPoint
&
aPointToInsert
ErrorResult
&
aError
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
CloneAttributeWithTransaction
(
nsAtom
&
aAttribute
Element
&
aDestElement
Element
&
aSourceElement
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
RemoveAttributeWithTransaction
(
Element
&
aElement
nsAtom
&
aAttribute
)
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
RemoveAttributeOrEquivalent
(
Element
*
aElement
nsAtom
*
aAttribute
bool
aSuppressTransaction
)
=
0
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetAttributeWithTransaction
(
Element
&
aElement
nsAtom
&
aAttribute
const
nsAString
&
aValue
)
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
SetAttributeOrEquivalent
(
Element
*
aElement
nsAtom
*
aAttribute
const
nsAString
&
aValue
bool
aSuppressTransaction
)
=
0
;
already_AddRefed
<
Element
>
CreateHTMLContent
(
const
nsAtom
*
aTag
)
;
already_AddRefed
<
nsTextNode
>
CreateTextNode
(
const
nsAString
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
void
DoInsertText
(
dom
:
:
Text
&
aText
uint32_t
aOffset
const
nsAString
&
aStringToInsert
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
void
DoDeleteText
(
dom
:
:
Text
&
aText
uint32_t
aOffset
uint32_t
aCount
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
void
DoReplaceText
(
dom
:
:
Text
&
aText
uint32_t
aOffset
uint32_t
aCount
const
nsAString
&
aStringToInsert
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
void
DoSetText
(
dom
:
:
Text
&
aText
const
nsAString
&
aStringToSet
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
CreateNodeWithTransaction
(
nsAtom
&
aTag
const
EditorDOMPoint
&
aPointToInsert
)
;
already_AddRefed
<
EditAggregateTransaction
>
CreateTxnForDeleteSelection
(
EDirection
aAction
nsINode
*
*
aNode
int32_t
*
aOffset
int32_t
*
aLength
)
;
already_AddRefed
<
EditTransactionBase
>
CreateTxnForDeleteRange
(
nsRange
*
aRangeToDelete
EDirection
aAction
nsINode
*
*
aRemovingNode
int32_t
*
aOffset
int32_t
*
aLength
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteTextWithTransaction
(
dom
:
:
Text
&
aTextNode
uint32_t
aOffset
uint32_t
aLength
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
ReplaceContainerWithTransactionInternal
(
Element
&
aElement
nsAtom
&
aTagName
nsAtom
&
aAttribute
const
nsAString
&
aAttributeValue
bool
aCloneAllAttributes
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Element
>
InsertContainerWithTransactionInternal
(
nsIContent
&
aContent
nsAtom
&
aTagName
nsAtom
&
aAttribute
const
nsAString
&
aAttributeValue
)
;
MOZ_CAN_RUN_SCRIPT
void
DoSplitNode
(
const
EditorDOMPoint
&
aStartOfRightNode
nsIContent
&
aNewLeftNode
ErrorResult
&
aError
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DoJoinNodes
(
nsINode
*
aNodeToKeep
nsINode
*
aNodeToJoin
nsINode
*
aParent
)
;
MOZ_CAN_RUN_SCRIPT
SplitNodeResult
SplitNodeDeepWithTransaction
(
nsIContent
&
aMostAncestorToSplit
const
EditorDOMPoint
&
aDeepestStartOfRightNode
SplitAtEdges
aSplitAtEdges
)
;
MOZ_CAN_RUN_SCRIPT
EditorDOMPoint
JoinNodesDeepWithTransaction
(
nsIContent
&
aLeftNode
nsIContent
&
aRightNode
)
;
bool
HasPaddingBRElementForEmptyEditor
(
)
const
{
return
!
!
mPaddingBRElementForEmptyEditor
;
}
MOZ_CAN_RUN_SCRIPT
MOZ_MUST_USE
nsresult
EnsureNoPaddingBRElementForEmptyEditor
(
)
;
MOZ_CAN_RUN_SCRIPT
MOZ_MUST_USE
nsresult
MaybeCreatePaddingBRElementForEmptyEditor
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DoTransactionInternal
(
nsITransaction
*
aTxn
)
;
virtual
bool
IsBlockNode
(
nsINode
*
aNode
)
const
;
static
nsINode
*
GetNodeLocation
(
nsINode
*
aChild
int32_t
*
aOffset
)
;
nsIContent
*
GetPreviousNode
(
const
EditorRawDOMPoint
&
aPoint
)
const
{
return
GetPreviousNodeInternal
(
aPoint
false
true
false
)
;
}
nsIContent
*
GetPreviousElementOrText
(
const
EditorRawDOMPoint
&
aPoint
)
const
{
return
GetPreviousNodeInternal
(
aPoint
false
false
false
)
;
}
nsIContent
*
GetPreviousEditableNode
(
const
EditorRawDOMPoint
&
aPoint
)
const
{
return
GetPreviousNodeInternal
(
aPoint
true
true
false
)
;
}
nsIContent
*
GetPreviousNodeInBlock
(
const
EditorRawDOMPoint
&
aPoint
)
const
{
return
GetPreviousNodeInternal
(
aPoint
false
true
true
)
;
}
nsIContent
*
GetPreviousElementOrTextInBlock
(
const
EditorRawDOMPoint
&
aPoint
)
const
{
return
GetPreviousNodeInternal
(
aPoint
false
false
true
)
;
}
nsIContent
*
GetPreviousEditableNodeInBlock
(
const
EditorRawDOMPoint
&
aPoint
)
const
{
return
GetPreviousNodeInternal
(
aPoint
true
true
true
)
;
}
nsIContent
*
GetPreviousNode
(
nsINode
&
aNode
)
const
{
return
GetPreviousNodeInternal
(
aNode
false
true
false
)
;
}
nsIContent
*
GetPreviousElementOrText
(
nsINode
&
aNode
)
const
{
return
GetPreviousNodeInternal
(
aNode
false
false
false
)
;
}
nsIContent
*
GetPreviousEditableNode
(
nsINode
&
aNode
)
const
{
return
GetPreviousNodeInternal
(
aNode
true
true
false
)
;
}
nsIContent
*
GetPreviousNodeInBlock
(
nsINode
&
aNode
)
const
{
return
GetPreviousNodeInternal
(
aNode
false
true
true
)
;
}
nsIContent
*
GetPreviousElementOrTextInBlock
(
nsINode
&
aNode
)
const
{
return
GetPreviousNodeInternal
(
aNode
false
false
true
)
;
}
nsIContent
*
GetPreviousEditableNodeInBlock
(
nsINode
&
aNode
)
const
{
return
GetPreviousNodeInternal
(
aNode
true
true
true
)
;
}
template
<
typename
PT
typename
CT
>
nsIContent
*
GetNextNode
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
return
GetNextNodeInternal
(
aPoint
false
true
false
)
;
}
template
<
typename
PT
typename
CT
>
nsIContent
*
GetNextElementOrText
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
return
GetNextNodeInternal
(
aPoint
false
false
false
)
;
}
template
<
typename
PT
typename
CT
>
nsIContent
*
GetNextEditableNode
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
return
GetNextNodeInternal
(
aPoint
true
true
false
)
;
}
template
<
typename
PT
typename
CT
>
nsIContent
*
GetNextNodeInBlock
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
return
GetNextNodeInternal
(
aPoint
false
true
true
)
;
}
template
<
typename
PT
typename
CT
>
nsIContent
*
GetNextElementOrTextInBlock
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
return
GetNextNodeInternal
(
aPoint
false
false
true
)
;
}
template
<
typename
PT
typename
CT
>
nsIContent
*
GetNextEditableNodeInBlock
(
const
EditorDOMPointBase
<
PT
CT
>
&
aPoint
)
const
{
return
GetNextNodeInternal
(
aPoint
true
true
true
)
;
}
nsIContent
*
GetNextNode
(
nsINode
&
aNode
)
const
{
return
GetNextNodeInternal
(
aNode
false
true
false
)
;
}
nsIContent
*
GetNextElementOrText
(
nsINode
&
aNode
)
const
{
return
GetNextNodeInternal
(
aNode
false
false
false
)
;
}
nsIContent
*
GetNextEditableNode
(
nsINode
&
aNode
)
const
{
return
GetNextNodeInternal
(
aNode
true
true
false
)
;
}
nsIContent
*
GetNextNodeInBlock
(
nsINode
&
aNode
)
const
{
return
GetNextNodeInternal
(
aNode
false
true
true
)
;
}
nsIContent
*
GetNextElementOrTextInBlock
(
nsINode
&
aNode
)
const
{
return
GetNextNodeInternal
(
aNode
false
false
true
)
;
}
nsIContent
*
GetNextEditableNodeInBlock
(
nsINode
&
aNode
)
const
{
return
GetNextNodeInternal
(
aNode
true
true
true
)
;
}
nsIContent
*
GetRightmostChild
(
nsINode
*
aCurrentNode
bool
bNoBlockCrossing
=
false
)
const
;
nsIContent
*
GetLeftmostChild
(
nsINode
*
aCurrentNode
bool
bNoBlockCrossing
=
false
)
const
;
bool
CanContain
(
nsINode
&
aParent
nsIContent
&
aChild
)
const
;
bool
CanContainTag
(
nsINode
&
aParent
nsAtom
&
aTag
)
const
;
bool
TagCanContain
(
nsAtom
&
aParentTag
nsIContent
&
aChild
)
const
;
virtual
bool
TagCanContainTag
(
nsAtom
&
aParentTag
nsAtom
&
aChildTag
)
const
;
bool
IsRoot
(
nsINode
*
inNode
)
const
;
bool
IsEditorRoot
(
nsINode
*
aNode
)
const
;
bool
IsDescendantOfRoot
(
nsINode
*
inNode
)
const
;
bool
IsDescendantOfEditorRoot
(
nsINode
*
aNode
)
const
;
virtual
bool
IsContainer
(
nsINode
*
aNode
)
const
;
bool
IsEditable
(
nsINode
*
aNode
)
const
{
if
(
NS_WARN_IF
(
!
aNode
)
)
{
return
false
;
}
if
(
!
aNode
-
>
IsContent
(
)
|
|
!
IsModifiableNode
(
*
aNode
)
|
|
EditorBase
:
:
IsPaddingBRElementForEmptyEditor
(
*
aNode
)
)
{
return
false
;
}
switch
(
aNode
-
>
NodeType
(
)
)
{
case
nsINode
:
:
ELEMENT_NODE
:
return
mIsHTMLEditorClass
?
aNode
-
>
IsEditable
(
)
:
true
;
case
nsINode
:
:
TEXT_NODE
:
return
true
;
default
:
return
false
;
}
}
bool
IsElementOrText
(
const
nsINode
&
aNode
)
const
{
if
(
aNode
.
IsText
(
)
)
{
return
true
;
}
return
aNode
.
IsElement
(
)
&
&
!
EditorBase
:
:
IsPaddingBRElementForEmptyEditor
(
aNode
)
;
}
static
bool
IsPaddingBRElementForEmptyEditor
(
const
nsINode
&
aNode
)
{
const
dom
:
:
HTMLBRElement
*
brElement
=
dom
:
:
HTMLBRElement
:
:
FromNode
(
&
aNode
)
;
return
brElement
&
&
brElement
-
>
IsPaddingForEmptyEditor
(
)
;
}
static
bool
IsPaddingBRElementForEmptyLastLine
(
const
nsINode
&
aNode
)
{
const
dom
:
:
HTMLBRElement
*
brElement
=
dom
:
:
HTMLBRElement
:
:
FromNode
(
&
aNode
)
;
return
brElement
&
&
brElement
-
>
IsPaddingForEmptyLastLine
(
)
;
}
uint32_t
CountEditableChildren
(
nsINode
*
aNode
)
;
nsINode
*
GetFirstEditableNode
(
nsINode
*
aRoot
)
;
bool
ShouldHandleIMEComposition
(
)
const
;
bool
AreNodesSameType
(
nsIContent
&
aNode1
nsIContent
&
aNode2
)
const
;
static
bool
IsTextNode
(
nsINode
*
aNode
)
{
return
aNode
-
>
NodeType
(
)
=
=
nsINode
:
:
TEXT_NODE
;
}
bool
IsModifiableNode
(
const
nsINode
&
aNode
)
const
;
static
nsIContent
*
GetNodeAtRangeOffsetPoint
(
nsINode
*
aContainer
int32_t
aOffset
)
{
return
GetNodeAtRangeOffsetPoint
(
RawRangeBoundary
(
aContainer
aOffset
)
)
;
}
static
nsIContent
*
GetNodeAtRangeOffsetPoint
(
const
RawRangeBoundary
&
aPoint
)
;
static
EditorRawDOMPoint
GetStartPoint
(
const
Selection
&
aSelection
)
;
static
EditorRawDOMPoint
GetEndPoint
(
const
Selection
&
aSelection
)
;
static
nsresult
GetEndChildNode
(
const
Selection
&
aSelection
nsIContent
*
*
aEndNode
)
;
nsresult
CollapseSelectionToEnd
(
)
;
nsresult
CreateRange
(
nsINode
*
aStartContainer
int32_t
aStartOffset
nsINode
*
aEndContainer
int32_t
aEndOffset
nsRange
*
*
aRange
)
;
static
bool
IsPreformatted
(
nsINode
*
aNode
)
;
inline
bool
AllowsTransactionsToChangeSelection
(
)
const
{
return
mAllowsTransactionsToChangeSelection
;
}
inline
void
MakeThisAllowTransactionsToChangeSelection
(
bool
aAllow
)
{
mAllowsTransactionsToChangeSelection
=
aAllow
;
}
nsresult
HandleInlineSpellCheck
(
nsINode
*
previousSelectedNode
uint32_t
previousSelectedOffset
nsINode
*
aStartContainer
uint32_t
aStartOffset
nsINode
*
aEndContainer
uint32_t
aEndOffset
)
;
virtual
Element
*
GetEditorRoot
(
)
const
;
Element
*
GetExposedRoot
(
)
const
;
virtual
bool
IsActiveInDOMWindow
(
)
;
EditorRawDOMPoint
FindBetterInsertionPoint
(
const
EditorRawDOMPoint
&
aPoint
)
;
void
HideCaret
(
bool
aHide
)
;
protected
:
virtual
void
OnStartToHandleTopLevelEditSubAction
(
EditSubAction
aEditSubAction
nsIEditor
:
:
EDirection
aDirection
)
;
MOZ_CAN_RUN_SCRIPT
virtual
void
OnEndHandlingTopLevelEditSubAction
(
)
;
bool
ArePreservingSelection
(
)
;
void
PreserveSelectionAcrossActions
(
)
;
nsresult
RestorePreservedSelection
(
)
;
void
StopPreservingSelection
(
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
BeginPlaceholderTransaction
(
nsAtom
*
aTransactionName
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
EndPlaceholderTransaction
(
)
;
void
BeginUpdateViewBatch
(
)
;
MOZ_CAN_RUN_SCRIPT
void
EndUpdateViewBatch
(
)
;
void
BeginTransactionInternal
(
)
;
MOZ_CAN_RUN_SCRIPT
void
EndTransactionInternal
(
)
;
protected
:
virtual
~
EditorBase
(
)
;
static
inline
nsresult
ToGenericNSResult
(
nsresult
aRv
)
{
switch
(
aRv
)
{
case
NS_ERROR_EDITOR_DESTROYED
:
return
NS_OK
;
case
NS_ERROR_EDITOR_UNEXPECTED_DOM_TREE
:
return
NS_OK
;
case
NS_ERROR_EDITOR_ACTION_CANCELED
:
return
NS_SUCCESS_DOM_NO_OPERATION
;
default
:
return
aRv
;
}
}
nsresult
GetDocumentCharsetInternal
(
nsACString
&
aCharset
)
const
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
SelectAllInternal
(
)
;
nsresult
DetermineCurrentDirection
(
)
;
MOZ_CAN_RUN_SCRIPT
void
FireInputEvent
(
)
;
MOZ_CAN_RUN_SCRIPT
void
FireInputEvent
(
EditAction
aEditAction
const
nsAString
&
aData
dom
:
:
DataTransfer
*
aDataTransfer
)
;
MOZ_CAN_RUN_SCRIPT
void
DoAfterDoTransaction
(
nsITransaction
*
aTxn
)
;
MOZ_CAN_RUN_SCRIPT
void
DoAfterUndoTransaction
(
)
;
MOZ_CAN_RUN_SCRIPT
void
DoAfterRedoTransaction
(
)
;
enum
TDocumentListenerNotification
{
eDocumentCreated
eDocumentToBeDestroyed
eDocumentStateChanged
}
;
MOZ_CAN_RUN_SCRIPT
nsresult
NotifyDocumentListeners
(
TDocumentListenerNotification
aNotificationType
)
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
SelectEntireDocument
(
)
=
0
;
nsresult
ScrollSelectionIntoView
(
bool
aScrollToAnchor
)
;
nsIContent
*
FindNextLeafNode
(
nsINode
*
aCurrentNode
bool
aGoForward
bool
bNoBlockCrossing
)
const
;
nsIContent
*
FindNode
(
nsINode
*
aCurrentNode
bool
aGoForward
bool
aEditableNode
bool
aFindAnyDataNode
bool
bNoBlockCrossing
)
const
;
nsIContent
*
GetPreviousNodeInternal
(
nsINode
&
aNode
bool
aFindEditableNode
bool
aFindAnyDataNode
bool
aNoBlockCrossing
)
const
;
nsIContent
*
GetPreviousNodeInternal
(
const
EditorRawDOMPoint
&
aPoint
bool
aFindEditableNode
bool
aFindAnyDataNode
bool
aNoBlockCrossing
)
const
;
nsIContent
*
GetNextNodeInternal
(
nsINode
&
aNode
bool
aFindEditableNode
bool
aFindAnyDataNode
bool
bNoBlockCrossing
)
const
;
nsIContent
*
GetNextNodeInternal
(
const
EditorRawDOMPoint
&
aPoint
bool
aFindEditableNode
bool
aFindAnyDataNode
bool
aNoBlockCrossing
)
const
;
virtual
nsresult
InstallEventListeners
(
)
;
virtual
void
CreateEventListeners
(
)
;
virtual
void
RemoveEventListeners
(
)
;
virtual
already_AddRefed
<
Element
>
GetInputEventTargetElement
(
)
=
0
;
bool
GetDesiredSpellCheckState
(
)
;
bool
CanEnableSpellCheck
(
)
{
return
!
IsPasswordEditor
(
)
&
&
!
IsReadonly
(
)
&
&
!
IsDisabled
(
)
&
&
!
ShouldSkipSpellCheck
(
)
;
}
virtual
void
InitializeSelectionAncestorLimit
(
nsIContent
&
aAncestorLimit
)
;
static
int32_t
GetChildOffset
(
nsINode
*
aChild
nsINode
*
aParent
)
;
nsresult
AppendNodeToSelectionAsRange
(
nsINode
*
aNode
)
;
nsresult
ClearSelection
(
)
;
nsresult
InitializeSelection
(
dom
:
:
EventTarget
*
aFocusEventTarget
)
;
enum
NotificationForEditorObservers
{
eNotifyEditorObserversOfEnd
eNotifyEditorObserversOfBefore
eNotifyEditorObserversOfCancel
}
;
MOZ_CAN_RUN_SCRIPT
void
NotifyEditorObservers
(
NotificationForEditorObservers
aNotification
)
;
MOZ_CAN_RUN_SCRIPT
EditorDOMPoint
PrepareToInsertBRElement
(
const
EditorDOMPoint
&
aPointToInsert
)
;
private
:
nsCOMPtr
<
nsISelectionController
>
mSelectionController
;
RefPtr
<
Document
>
mDocument
;
AutoEditActionDataSetter
*
mEditActionData
;
nsresult
SetTextDirectionTo
(
TextDirection
aTextDirection
)
;
protected
:
class
MOZ_RAII
AutoTransactionBatch
final
{
public
:
MOZ_CAN_RUN_SCRIPT
explicit
AutoTransactionBatch
(
EditorBase
&
aEditorBase
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mEditorBase
(
aEditorBase
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
mEditorBase
.
BeginTransactionInternal
(
)
;
}
MOZ_CAN_RUN_SCRIPT
~
AutoTransactionBatch
(
)
{
MOZ_KnownLive
(
mEditorBase
)
.
EndTransactionInternal
(
)
;
}
protected
:
EditorBase
&
mEditorBase
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoPlaceholderBatch
final
{
public
:
explicit
AutoPlaceholderBatch
(
EditorBase
&
aEditorBase
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mEditorBase
(
aEditorBase
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
mEditorBase
-
>
BeginPlaceholderTransaction
(
nullptr
)
;
}
AutoPlaceholderBatch
(
EditorBase
&
aEditorBase
nsAtom
&
aTransactionName
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mEditorBase
(
aEditorBase
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
mEditorBase
-
>
BeginPlaceholderTransaction
(
&
aTransactionName
)
;
}
~
AutoPlaceholderBatch
(
)
{
mEditorBase
-
>
EndPlaceholderTransaction
(
)
;
}
protected
:
OwningNonNull
<
EditorBase
>
mEditorBase
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoSelectionRestorer
final
{
public
:
explicit
AutoSelectionRestorer
(
EditorBase
&
aEditorBase
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
;
~
AutoSelectionRestorer
(
)
;
void
Abort
(
)
;
protected
:
EditorBase
*
mEditorBase
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoTopLevelEditSubActionNotifier
final
{
public
:
AutoTopLevelEditSubActionNotifier
(
EditorBase
&
aEditorBase
EditSubAction
aEditSubAction
nsIEditor
:
:
EDirection
aDirection
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mEditorBase
(
aEditorBase
)
mDoNothing
(
false
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
if
(
!
mEditorBase
.
GetTopLevelEditSubAction
(
)
)
{
mEditorBase
.
OnStartToHandleTopLevelEditSubAction
(
aEditSubAction
aDirection
)
;
}
else
{
mDoNothing
=
true
;
}
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
~
AutoTopLevelEditSubActionNotifier
(
)
{
if
(
!
mDoNothing
)
{
MOZ_KnownLive
(
mEditorBase
)
.
OnEndHandlingTopLevelEditSubAction
(
)
;
}
}
protected
:
EditorBase
&
mEditorBase
;
bool
mDoNothing
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoTransactionsConserveSelection
final
{
public
:
explicit
AutoTransactionsConserveSelection
(
EditorBase
&
aEditorBase
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mEditorBase
(
aEditorBase
)
mAllowedTransactionsToChangeSelection
(
aEditorBase
.
AllowsTransactionsToChangeSelection
(
)
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
mEditorBase
.
MakeThisAllowTransactionsToChangeSelection
(
false
)
;
}
~
AutoTransactionsConserveSelection
(
)
{
mEditorBase
.
MakeThisAllowTransactionsToChangeSelection
(
mAllowedTransactionsToChangeSelection
)
;
}
protected
:
EditorBase
&
mEditorBase
;
bool
mAllowedTransactionsToChangeSelection
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoUpdateViewBatch
final
{
public
:
MOZ_CAN_RUN_SCRIPT
explicit
AutoUpdateViewBatch
(
EditorBase
&
aEditorBase
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mEditorBase
(
aEditorBase
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
mEditorBase
.
BeginUpdateViewBatch
(
)
;
}
MOZ_CAN_RUN_SCRIPT
~
AutoUpdateViewBatch
(
)
{
MOZ_KnownLive
(
mEditorBase
)
.
EndUpdateViewBatch
(
)
;
}
protected
:
EditorBase
&
mEditorBase
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
protected
:
enum
Tristate
{
eTriUnset
eTriFalse
eTriTrue
}
;
nsCString
mContentMIMEType
;
RefPtr
<
mozInlineSpellChecker
>
mInlineSpellChecker
;
RefPtr
<
TextServicesDocument
>
mTextServicesDocument
;
RefPtr
<
TransactionManager
>
mTransactionManager
;
RefPtr
<
Element
>
mRootElement
;
RefPtr
<
dom
:
:
HTMLBRElement
>
mPaddingBRElementForEmptyEditor
;
nsCOMPtr
<
dom
:
:
EventTarget
>
mEventTarget
;
RefPtr
<
EditorEventListener
>
mEventListener
;
RefPtr
<
PlaceholderTransaction
>
mPlaceholderTransaction
;
nsAtom
*
mPlaceholderName
;
mozilla
:
:
Maybe
<
SelectionState
>
mSelState
;
RefPtr
<
TextComposition
>
mComposition
;
RefPtr
<
TextEditRules
>
mRules
;
RefPtr
<
TextInputListener
>
mTextInputListener
;
RefPtr
<
IMEContentObserver
>
mIMEContentObserver
;
typedef
AutoTArray
<
OwningNonNull
<
nsIEditActionListener
>
2
>
AutoActionListenerArray
;
AutoActionListenerArray
mActionListeners
;
typedef
AutoTArray
<
OwningNonNull
<
nsIEditorObserver
>
0
>
AutoEditorObserverArray
;
AutoEditorObserverArray
mEditorObservers
;
typedef
AutoTArray
<
OwningNonNull
<
nsIDocumentStateListener
>
1
>
AutoDocumentStateListenerArray
;
AutoDocumentStateListenerArray
mDocStateListeners
;
uint32_t
mModCount
;
uint32_t
mFlags
;
int32_t
mUpdateCount
;
int32_t
mPlaceholderBatch
;
int8_t
mDocDirtyState
;
uint8_t
mSpellcheckCheckboxState
;
bool
mAllowsTransactionsToChangeSelection
;
bool
mDidPreDestroy
;
bool
mDidPostCreate
;
bool
mDispatchInputEvent
;
bool
mIsInEditSubAction
;
bool
mHidingCaret
;
bool
mSpellCheckerDictionaryUpdated
;
bool
mIsHTMLEditorClass
;
friend
class
CompositionTransaction
;
friend
class
CreateElementTransaction
;
friend
class
CSSEditUtils
;
friend
class
DeleteNodeTransaction
;
friend
class
DeleteRangeTransaction
;
friend
class
DeleteTextTransaction
;
friend
class
HTMLEditRules
;
friend
class
HTMLEditUtils
;
friend
class
InsertNodeTransaction
;
friend
class
InsertTextTransaction
;
friend
class
JoinNodeTransaction
;
friend
class
SplitNodeTransaction
;
friend
class
TextEditRules
;
friend
class
TypeInState
;
friend
class
WSRunObject
;
friend
class
WSRunScanner
;
friend
class
nsIEditor
;
}
;
}
mozilla
:
:
EditorBase
*
nsIEditor
:
:
AsEditorBase
(
)
{
return
static_cast
<
mozilla
:
:
EditorBase
*
>
(
this
)
;
}
const
mozilla
:
:
EditorBase
*
nsIEditor
:
:
AsEditorBase
(
)
const
{
return
static_cast
<
const
mozilla
:
:
EditorBase
*
>
(
this
)
;
}
#
endif
