#
include
"
nsISupports
.
idl
"
webidl
Element
;
webidl
Node
;
webidl
Range
;
[
scriptable
builtinclass
uuid
(
4805e684
-
49b9
-
11d3
-
9ce4
-
ed60bd6cb5bc
)
]
interface
nsITableEditor
:
nsISupports
{
const
short
eNoSearch
=
0
;
const
short
ePreviousColumn
=
1
;
const
short
ePreviousRow
=
2
;
[
can_run_script
]
void
insertTableCell
(
in
long
aNumberOfColumnsToInsert
in
boolean
aInsertAfterSelectedCell
)
;
[
can_run_script
]
void
insertTableColumn
(
in
long
aNumberOfColumnsToInsert
in
boolean
aInsertAfterSelectedCell
)
;
[
can_run_script
]
void
insertTableRow
(
in
long
aNumberOfRowsToInsert
in
boolean
aInsertAfterSelectedCell
)
;
[
can_run_script
]
void
deleteTable
(
)
;
[
can_run_script
]
void
deleteTableCellContents
(
)
;
[
can_run_script
]
void
deleteTableCell
(
in
long
aNumberOfCellsToDelete
)
;
[
can_run_script
]
void
deleteTableColumn
(
in
long
aNumberOfColumnsToDelete
)
;
[
can_run_script
]
void
deleteTableRow
(
in
long
aNumberOfRowsToDelete
)
;
[
can_run_script
]
void
selectTableCell
(
)
;
[
can_run_script
]
void
selectTableRow
(
)
;
[
can_run_script
]
void
selectTableColumn
(
)
;
[
can_run_script
]
void
selectTable
(
)
;
[
can_run_script
]
void
selectAllTableCells
(
)
;
[
can_run_script
]
Element
switchTableCellHeaderType
(
in
Element
aSourceCell
)
;
[
can_run_script
]
void
joinTableCells
(
in
boolean
aMergeNonContiguousContents
)
;
[
can_run_script
]
void
splitTableCell
(
)
;
[
can_run_script
]
void
normalizeTable
(
in
Element
aTable
)
;
[
can_run_script
]
void
getCellIndexes
(
in
Element
aCellElement
out
long
aRowIndex
out
long
aColumnIndex
)
;
void
getTableSize
(
in
Element
aTableOrElementInTable
out
long
aRowCount
out
long
aColCount
)
;
Element
getCellAt
(
in
Element
aTableElement
in
long
aRowIndex
in
long
aColumnIndex
)
;
void
getCellDataAt
(
in
Element
aTableElement
in
long
aRowIndex
in
long
aColumnIndex
out
Element
aCellElement
out
long
aStartRowIndex
out
long
aStartColumnIndex
out
long
aRowSpan
out
long
aColSpan
out
long
aEffectiveRowSpan
out
long
aEffectiveColSpan
out
boolean
aIsSelected
)
;
Element
getFirstRow
(
in
Element
aTableElement
)
;
Element
getSelectedOrParentTableElement
(
out
AString
aTagName
out
long
aCount
)
;
[
can_run_script
]
uint32_t
getSelectedCellsType
(
in
Element
aElement
)
;
[
can_run_script
]
Element
getFirstSelectedCellInTable
(
out
long
aRowIndex
out
long
aColIndex
)
;
Array
<
Element
>
getSelectedCells
(
)
;
}
;
