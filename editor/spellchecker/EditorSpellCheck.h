#
ifndef
mozilla_EditorSpellCheck_h
#
define
mozilla_EditorSpellCheck_h
#
include
"
mozilla
/
mozSpellChecker
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIEditorSpellCheck
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nscore
.
h
"
class
mozSpellChecker
;
class
nsIEditor
;
namespace
mozilla
{
class
DictionaryFetcher
;
class
EditorBase
;
enum
dictCompare
{
DICT_NORMAL_COMPARE
DICT_COMPARE_CASE_INSENSITIVE
DICT_COMPARE_DASHMATCH
}
;
class
EditorSpellCheck
final
:
public
nsIEditorSpellCheck
{
friend
class
DictionaryFetcher
;
public
:
EditorSpellCheck
(
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
EditorSpellCheck
)
NS_DECL_NSIEDITORSPELLCHECK
mozSpellChecker
*
GetSpellChecker
(
)
;
RefPtr
<
mozilla
:
:
CheckWordPromise
>
CheckCurrentWordsNoSuggest
(
const
nsTArray
<
nsString
>
&
aSuggestedWords
)
;
protected
:
virtual
~
EditorSpellCheck
(
)
;
RefPtr
<
mozSpellChecker
>
mSpellChecker
;
RefPtr
<
EditorBase
>
mEditor
;
nsTArray
<
nsString
>
mSuggestedWordList
;
nsTArray
<
nsString
>
mDictionaryList
;
nsString
mPreferredLang
;
uint32_t
mTxtSrvFilterType
;
int32_t
mSuggestedWordIndex
;
int32_t
mDictionaryIndex
;
uint32_t
mDictionaryFetcherGroup
;
bool
mUpdateDictionaryRunning
;
nsresult
DeleteSuggestedWordList
(
)
;
void
BuildDictionaryList
(
const
nsAString
&
aDictName
const
nsTArray
<
nsString
>
&
aDictList
enum
dictCompare
aCompareType
nsTArray
<
nsString
>
&
aTryList
)
;
nsresult
DictionaryFetched
(
DictionaryFetcher
*
aFetchState
)
;
void
SetFallbackDictionary
(
DictionaryFetcher
*
aFetcher
)
;
public
:
void
BeginUpdateDictionary
(
)
{
mUpdateDictionaryRunning
=
true
;
}
void
EndUpdateDictionary
(
)
{
mUpdateDictionaryRunning
=
false
;
}
}
;
}
#
endif
