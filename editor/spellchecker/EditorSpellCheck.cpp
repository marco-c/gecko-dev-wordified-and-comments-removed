#
include
"
EditorSpellCheck
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EditorBase
.
h
"
#
include
"
mozilla
/
HTMLEditor
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
dom
/
StaticRange
.
h
"
#
include
"
mozilla
/
intl
/
Locale
.
h
"
#
include
"
mozilla
/
intl
/
LocaleService
.
h
"
#
include
"
mozilla
/
intl
/
OSPreferences
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
mozSpellChecker
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
TextServicesDocument
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsDependentSubstring
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIContentPrefService2
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIEditor
.
h
"
#
include
"
nsILoadContext
.
h
"
#
include
"
nsISupportsBase
.
h
"
#
include
"
nsISupportsUtils
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsVariant
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsMemory
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsStyleUtil
.
h
"
#
include
"
nsXULAppAPI
.
h
"
namespace
mozilla
{
using
namespace
dom
;
using
intl
:
:
LocaleService
;
using
intl
:
:
OSPreferences
;
static
mozilla
:
:
LazyLogModule
sEditorSpellChecker
(
"
EditorSpellChecker
"
)
;
class
UpdateDictionaryHolder
{
private
:
EditorSpellCheck
*
mSpellCheck
;
public
:
explicit
UpdateDictionaryHolder
(
EditorSpellCheck
*
esc
)
:
mSpellCheck
(
esc
)
{
if
(
mSpellCheck
)
{
mSpellCheck
-
>
BeginUpdateDictionary
(
)
;
}
}
~
UpdateDictionaryHolder
(
)
{
if
(
mSpellCheck
)
{
mSpellCheck
-
>
EndUpdateDictionary
(
)
;
}
}
}
;
#
define
CPS_PREF_NAME
u
"
spellcheck
.
lang
"
_ns
static
nsIURI
*
GetDocumentURI
(
EditorBase
*
aEditor
)
{
MOZ_ASSERT
(
aEditor
)
;
Document
*
doc
=
aEditor
-
>
AsEditorBase
(
)
-
>
GetDocument
(
)
;
if
(
NS_WARN_IF
(
!
doc
)
)
{
return
nullptr
;
}
return
doc
-
>
GetDocumentURI
(
)
;
}
static
nsILoadContext
*
GetLoadContext
(
nsIEditor
*
aEditor
)
{
Document
*
doc
=
aEditor
-
>
AsEditorBase
(
)
-
>
GetDocument
(
)
;
if
(
NS_WARN_IF
(
!
doc
)
)
{
return
nullptr
;
}
return
doc
-
>
GetLoadContext
(
)
;
}
static
nsCString
DictionariesToString
(
const
nsTArray
<
nsCString
>
&
aDictionaries
)
{
nsCString
asString
;
for
(
const
auto
&
dictionary
:
aDictionaries
)
{
asString
.
Append
(
dictionary
)
;
asString
.
Append
(
'
'
)
;
}
return
asString
;
}
static
void
StringToDictionaries
(
const
nsCString
&
aString
nsTArray
<
nsCString
>
&
aDictionaries
)
{
nsTArray
<
nsCString
>
asDictionaries
;
for
(
const
nsACString
&
token
:
nsCCharSeparatedTokenizer
(
aString
'
'
)
.
ToRange
(
)
)
{
if
(
token
.
IsEmpty
(
)
)
{
continue
;
}
aDictionaries
.
AppendElement
(
token
)
;
}
}
class
DictionaryFetcher
final
:
public
nsIContentPrefCallback2
{
public
:
NS_DECL_ISUPPORTS
DictionaryFetcher
(
EditorSpellCheck
*
aSpellCheck
nsIEditorSpellCheckCallback
*
aCallback
uint32_t
aGroup
)
:
mCallback
(
aCallback
)
mGroup
(
aGroup
)
mSpellCheck
(
aSpellCheck
)
{
}
NS_IMETHOD
Fetch
(
nsIEditor
*
aEditor
)
;
NS_IMETHOD
HandleResult
(
nsIContentPref
*
aPref
)
override
{
nsCOMPtr
<
nsIVariant
>
value
;
nsresult
rv
=
aPref
-
>
GetValue
(
getter_AddRefs
(
value
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCString
asString
;
value
-
>
GetAsACString
(
asString
)
;
StringToDictionaries
(
asString
mDictionaries
)
;
return
NS_OK
;
}
NS_IMETHOD
HandleCompletion
(
uint16_t
reason
)
override
{
mSpellCheck
-
>
DictionaryFetched
(
this
)
;
return
NS_OK
;
}
NS_IMETHOD
HandleError
(
nsresult
error
)
override
{
return
NS_OK
;
}
nsCOMPtr
<
nsIEditorSpellCheckCallback
>
mCallback
;
uint32_t
mGroup
;
nsString
mRootContentLang
;
nsString
mRootDocContentLang
;
nsTArray
<
nsCString
>
mDictionaries
;
private
:
~
DictionaryFetcher
(
)
{
}
RefPtr
<
EditorSpellCheck
>
mSpellCheck
;
}
;
NS_IMPL_ISUPPORTS
(
DictionaryFetcher
nsIContentPrefCallback2
)
class
ContentPrefInitializerRunnable
final
:
public
Runnable
{
public
:
ContentPrefInitializerRunnable
(
nsIEditor
*
aEditor
nsIContentPrefCallback2
*
aCallback
)
:
Runnable
(
"
ContentPrefInitializerRunnable
"
)
mEditorBase
(
aEditor
-
>
AsEditorBase
(
)
)
mCallback
(
aCallback
)
{
}
NS_IMETHOD
Run
(
)
override
{
if
(
mEditorBase
-
>
Destroyed
(
)
)
{
mCallback
-
>
HandleError
(
NS_ERROR_NOT_AVAILABLE
)
;
return
NS_OK
;
}
nsCOMPtr
<
nsIContentPrefService2
>
contentPrefService
=
do_GetService
(
NS_CONTENT_PREF_SERVICE_CONTRACTID
)
;
if
(
NS_WARN_IF
(
!
contentPrefService
)
)
{
mCallback
-
>
HandleError
(
NS_ERROR_NOT_AVAILABLE
)
;
return
NS_OK
;
}
nsCOMPtr
<
nsIURI
>
docUri
=
GetDocumentURI
(
mEditorBase
)
;
if
(
NS_WARN_IF
(
!
docUri
)
)
{
mCallback
-
>
HandleError
(
NS_ERROR_FAILURE
)
;
return
NS_OK
;
}
nsAutoCString
docUriSpec
;
nsresult
rv
=
docUri
-
>
GetSpec
(
docUriSpec
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
mCallback
-
>
HandleError
(
rv
)
;
return
NS_OK
;
}
rv
=
contentPrefService
-
>
GetByDomainAndName
(
NS_ConvertUTF8toUTF16
(
docUriSpec
)
CPS_PREF_NAME
GetLoadContext
(
mEditorBase
)
mCallback
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
mCallback
-
>
HandleError
(
rv
)
;
return
NS_OK
;
}
return
NS_OK
;
}
private
:
RefPtr
<
EditorBase
>
mEditorBase
;
nsCOMPtr
<
nsIContentPrefCallback2
>
mCallback
;
}
;
NS_IMETHODIMP
DictionaryFetcher
:
:
Fetch
(
nsIEditor
*
aEditor
)
{
NS_ENSURE_ARG_POINTER
(
aEditor
)
;
nsCOMPtr
<
nsIRunnable
>
runnable
=
new
ContentPrefInitializerRunnable
(
aEditor
this
)
;
NS_DispatchToCurrentThreadQueue
(
runnable
.
forget
(
)
1000
EventQueuePriority
:
:
Idle
)
;
return
NS_OK
;
}
static
nsresult
StoreCurrentDictionaries
(
EditorBase
*
aEditorBase
const
nsTArray
<
nsCString
>
&
aDictionaries
)
{
NS_ENSURE_ARG_POINTER
(
aEditorBase
)
;
nsresult
rv
;
nsCOMPtr
<
nsIURI
>
docUri
=
GetDocumentURI
(
aEditorBase
)
;
if
(
NS_WARN_IF
(
!
docUri
)
)
{
return
NS_ERROR_FAILURE
;
}
nsAutoCString
docUriSpec
;
rv
=
docUri
-
>
GetSpec
(
docUriSpec
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
nsVariant
>
prefValue
=
new
nsVariant
(
)
;
nsCString
asString
=
DictionariesToString
(
aDictionaries
)
;
prefValue
-
>
SetAsAString
(
NS_ConvertUTF8toUTF16
(
asString
)
)
;
nsCOMPtr
<
nsIContentPrefService2
>
contentPrefService
=
do_GetService
(
NS_CONTENT_PREF_SERVICE_CONTRACTID
)
;
NS_ENSURE_TRUE
(
contentPrefService
NS_ERROR_NOT_INITIALIZED
)
;
return
contentPrefService
-
>
Set
(
NS_ConvertUTF8toUTF16
(
docUriSpec
)
CPS_PREF_NAME
prefValue
GetLoadContext
(
aEditorBase
)
nullptr
)
;
}
static
nsresult
ClearCurrentDictionaries
(
EditorBase
*
aEditorBase
)
{
NS_ENSURE_ARG_POINTER
(
aEditorBase
)
;
nsresult
rv
;
nsCOMPtr
<
nsIURI
>
docUri
=
GetDocumentURI
(
aEditorBase
)
;
if
(
NS_WARN_IF
(
!
docUri
)
)
{
return
NS_ERROR_FAILURE
;
}
nsAutoCString
docUriSpec
;
rv
=
docUri
-
>
GetSpec
(
docUriSpec
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIContentPrefService2
>
contentPrefService
=
do_GetService
(
NS_CONTENT_PREF_SERVICE_CONTRACTID
)
;
NS_ENSURE_TRUE
(
contentPrefService
NS_ERROR_NOT_INITIALIZED
)
;
return
contentPrefService
-
>
RemoveByDomainAndName
(
NS_ConvertUTF8toUTF16
(
docUriSpec
)
CPS_PREF_NAME
GetLoadContext
(
aEditorBase
)
nullptr
)
;
}
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
EditorSpellCheck
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
EditorSpellCheck
)
NS_INTERFACE_MAP_BEGIN
(
EditorSpellCheck
)
NS_INTERFACE_MAP_ENTRY
(
nsIEditorSpellCheck
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIEditorSpellCheck
)
NS_INTERFACE_MAP_ENTRIES_CYCLE_COLLECTION
(
EditorSpellCheck
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTION
(
EditorSpellCheck
mEditor
mSpellChecker
)
EditorSpellCheck
:
:
EditorSpellCheck
(
)
:
mTxtSrvFilterType
(
0
)
mSuggestedWordIndex
(
0
)
mDictionaryIndex
(
0
)
mDictionaryFetcherGroup
(
0
)
mUpdateDictionaryRunning
(
false
)
{
}
EditorSpellCheck
:
:
~
EditorSpellCheck
(
)
{
mSpellChecker
=
nullptr
;
}
mozSpellChecker
*
EditorSpellCheck
:
:
GetSpellChecker
(
)
{
return
mSpellChecker
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
CanSpellCheck
(
bool
*
aCanSpellCheck
)
{
RefPtr
<
mozSpellChecker
>
spellChecker
=
mSpellChecker
;
if
(
!
spellChecker
)
{
spellChecker
=
mozSpellChecker
:
:
Create
(
)
;
MOZ_ASSERT
(
spellChecker
)
;
}
nsTArray
<
nsCString
>
dictList
;
nsresult
rv
=
spellChecker
-
>
GetDictionaryList
(
&
dictList
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
*
aCanSpellCheck
=
!
dictList
.
IsEmpty
(
)
;
return
NS_OK
;
}
class
CallbackCaller
final
:
public
Runnable
{
public
:
explicit
CallbackCaller
(
nsIEditorSpellCheckCallback
*
aCallback
)
:
mozilla
:
:
Runnable
(
"
CallbackCaller
"
)
mCallback
(
aCallback
)
{
}
~
CallbackCaller
(
)
{
Run
(
)
;
}
NS_IMETHOD
Run
(
)
override
{
if
(
mCallback
)
{
mCallback
-
>
EditorSpellCheckDone
(
)
;
mCallback
=
nullptr
;
}
return
NS_OK
;
}
private
:
nsCOMPtr
<
nsIEditorSpellCheckCallback
>
mCallback
;
}
;
NS_IMETHODIMP
EditorSpellCheck
:
:
InitSpellChecker
(
nsIEditor
*
aEditor
bool
aEnableSelectionChecking
nsIEditorSpellCheckCallback
*
aCallback
)
{
NS_ENSURE_TRUE
(
aEditor
NS_ERROR_NULL_POINTER
)
;
mEditor
=
aEditor
-
>
AsEditorBase
(
)
;
RefPtr
<
Document
>
doc
=
mEditor
-
>
GetDocument
(
)
;
if
(
NS_WARN_IF
(
!
doc
)
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
;
RefPtr
<
TextServicesDocument
>
textServicesDocument
=
new
TextServicesDocument
(
)
;
textServicesDocument
-
>
SetFilterType
(
mTxtSrvFilterType
)
;
mSpellChecker
=
mozSpellChecker
:
:
Create
(
)
;
MOZ_ASSERT
(
mSpellChecker
)
;
rv
=
mSpellChecker
-
>
SetDocument
(
textServicesDocument
true
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
textServicesDocument
-
>
InitWithEditor
(
aEditor
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
aEnableSelectionChecking
)
{
RefPtr
<
Selection
>
selection
;
aEditor
-
>
GetSelection
(
getter_AddRefs
(
selection
)
)
;
if
(
NS_WARN_IF
(
!
selection
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
selection
-
>
RangeCount
(
)
)
{
RefPtr
<
const
nsRange
>
range
=
selection
-
>
GetRangeAt
(
0
)
;
NS_ENSURE_STATE
(
range
)
;
if
(
!
range
-
>
Collapsed
(
)
)
{
RefPtr
<
StaticRange
>
staticRange
=
StaticRange
:
:
Create
(
range
IgnoreErrors
(
)
)
;
if
(
NS_WARN_IF
(
!
staticRange
)
)
{
return
NS_ERROR_FAILURE
;
}
rv
=
textServicesDocument
-
>
ExpandRangeToWordBoundaries
(
staticRange
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
textServicesDocument
-
>
SetExtent
(
staticRange
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
}
}
rv
=
UpdateCurrentDictionary
(
aCallback
)
;
if
(
NS_FAILED
(
rv
)
&
&
aCallback
)
{
RefPtr
<
CallbackCaller
>
caller
=
new
CallbackCaller
(
aCallback
)
;
rv
=
doc
-
>
Dispatch
(
TaskCategory
:
:
Other
caller
.
forget
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
GetNextMisspelledWord
(
nsAString
&
aNextMisspelledWord
)
{
MOZ_LOG
(
sEditorSpellChecker
LogLevel
:
:
Debug
(
"
%
s
"
__FUNCTION__
)
)
;
NS_ENSURE_TRUE
(
mSpellChecker
NS_ERROR_NOT_INITIALIZED
)
;
DeleteSuggestedWordList
(
)
;
RefPtr
<
mozSpellChecker
>
spellChecker
(
mSpellChecker
)
;
return
spellChecker
-
>
NextMisspelledWord
(
aNextMisspelledWord
mSuggestedWordList
)
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
GetSuggestedWord
(
nsAString
&
aSuggestedWord
)
{
if
(
mSuggestedWordIndex
<
static_cast
<
int32_t
>
(
mSuggestedWordList
.
Length
(
)
)
)
{
aSuggestedWord
=
mSuggestedWordList
[
mSuggestedWordIndex
]
;
mSuggestedWordIndex
+
+
;
}
else
{
aSuggestedWord
.
Truncate
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
CheckCurrentWord
(
const
nsAString
&
aSuggestedWord
bool
*
aIsMisspelled
)
{
NS_ENSURE_TRUE
(
mSpellChecker
NS_ERROR_NOT_INITIALIZED
)
;
DeleteSuggestedWordList
(
)
;
return
mSpellChecker
-
>
CheckWord
(
aSuggestedWord
aIsMisspelled
&
mSuggestedWordList
)
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
Suggest
(
const
nsAString
&
aSuggestedWord
uint32_t
aCount
JSContext
*
aCx
Promise
*
*
aPromise
)
{
NS_ENSURE_TRUE
(
mSpellChecker
NS_ERROR_NOT_INITIALIZED
)
;
nsIGlobalObject
*
globalObject
=
xpc
:
:
CurrentNativeGlobal
(
aCx
)
;
if
(
NS_WARN_IF
(
!
globalObject
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
ErrorResult
result
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
globalObject
result
)
;
if
(
NS_WARN_IF
(
result
.
Failed
(
)
)
)
{
return
result
.
StealNSResult
(
)
;
}
mSpellChecker
-
>
Suggest
(
aSuggestedWord
aCount
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
promise
]
(
const
CopyableTArray
<
nsString
>
&
aSuggestions
)
{
promise
-
>
MaybeResolve
(
aSuggestions
)
;
}
[
promise
]
(
nsresult
aError
)
{
promise
-
>
MaybeReject
(
NS_ERROR_FAILURE
)
;
}
)
;
promise
.
forget
(
aPromise
)
;
return
NS_OK
;
}
RefPtr
<
CheckWordPromise
>
EditorSpellCheck
:
:
CheckCurrentWordsNoSuggest
(
const
nsTArray
<
nsString
>
&
aSuggestedWords
)
{
if
(
NS_WARN_IF
(
!
mSpellChecker
)
)
{
return
CheckWordPromise
:
:
CreateAndReject
(
NS_ERROR_NOT_INITIALIZED
__func__
)
;
}
return
mSpellChecker
-
>
CheckWords
(
aSuggestedWords
)
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
ReplaceWord
(
const
nsAString
&
aMisspelledWord
const
nsAString
&
aReplaceWord
bool
aAllOccurrences
)
{
NS_ENSURE_TRUE
(
mSpellChecker
NS_ERROR_NOT_INITIALIZED
)
;
RefPtr
<
mozSpellChecker
>
spellChecker
(
mSpellChecker
)
;
return
spellChecker
-
>
Replace
(
aMisspelledWord
aReplaceWord
aAllOccurrences
)
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
IgnoreWordAllOccurrences
(
const
nsAString
&
aWord
)
{
NS_ENSURE_TRUE
(
mSpellChecker
NS_ERROR_NOT_INITIALIZED
)
;
return
mSpellChecker
-
>
IgnoreAll
(
aWord
)
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
GetPersonalDictionary
(
)
{
NS_ENSURE_TRUE
(
mSpellChecker
NS_ERROR_NOT_INITIALIZED
)
;
mDictionaryList
.
Clear
(
)
;
mDictionaryIndex
=
0
;
return
mSpellChecker
-
>
GetPersonalDictionary
(
&
mDictionaryList
)
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
GetPersonalDictionaryWord
(
nsAString
&
aDictionaryWord
)
{
if
(
mDictionaryIndex
<
static_cast
<
int32_t
>
(
mDictionaryList
.
Length
(
)
)
)
{
aDictionaryWord
=
mDictionaryList
[
mDictionaryIndex
]
;
mDictionaryIndex
+
+
;
}
else
{
aDictionaryWord
.
Truncate
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
AddWordToDictionary
(
const
nsAString
&
aWord
)
{
NS_ENSURE_TRUE
(
mSpellChecker
NS_ERROR_NOT_INITIALIZED
)
;
return
mSpellChecker
-
>
AddWordToPersonalDictionary
(
aWord
)
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
RemoveWordFromDictionary
(
const
nsAString
&
aWord
)
{
NS_ENSURE_TRUE
(
mSpellChecker
NS_ERROR_NOT_INITIALIZED
)
;
return
mSpellChecker
-
>
RemoveWordFromPersonalDictionary
(
aWord
)
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
GetDictionaryList
(
nsTArray
<
nsCString
>
&
aList
)
{
NS_ENSURE_TRUE
(
mSpellChecker
NS_ERROR_NOT_INITIALIZED
)
;
return
mSpellChecker
-
>
GetDictionaryList
(
&
aList
)
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
GetCurrentDictionaries
(
nsTArray
<
nsCString
>
&
aDictionaries
)
{
NS_ENSURE_TRUE
(
mSpellChecker
NS_ERROR_NOT_INITIALIZED
)
;
return
mSpellChecker
-
>
GetCurrentDictionaries
(
aDictionaries
)
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
SetCurrentDictionaries
(
const
nsTArray
<
nsCString
>
&
aDictionaries
JSContext
*
aCx
Promise
*
*
aPromise
)
{
NS_ENSURE_TRUE
(
mSpellChecker
NS_ERROR_NOT_INITIALIZED
)
;
RefPtr
<
EditorSpellCheck
>
kungFuDeathGrip
=
this
;
if
(
!
mUpdateDictionaryRunning
)
{
mDictionaryFetcherGroup
+
+
;
uint32_t
flags
=
0
;
mEditor
-
>
GetFlags
(
&
flags
)
;
if
(
!
(
flags
&
nsIEditor
:
:
eEditorMailMask
)
)
{
if
(
!
aDictionaries
.
IsEmpty
(
)
&
&
(
mPreferredLang
.
IsEmpty
(
)
|
|
(
aDictionaries
.
Length
(
)
=
=
1
&
&
!
mPreferredLang
.
Equals
(
aDictionaries
[
0
]
nsCaseInsensitiveCStringComparator
)
)
)
)
{
StoreCurrentDictionaries
(
mEditor
aDictionaries
)
;
#
ifdef
DEBUG_DICT
printf
(
"
*
*
*
*
*
Writing
content
preferences
for
|
%
s
|
\
n
"
DictionariesToString
(
aDictionaries
)
.
Data
(
)
)
;
#
endif
}
else
{
ClearCurrentDictionaries
(
mEditor
)
;
#
ifdef
DEBUG_DICT
printf
(
"
*
*
*
*
*
Clearing
content
preferences
for
|
%
s
|
\
n
"
DictionariesToString
(
aDictionaries
)
.
Data
(
)
)
;
#
endif
}
if
(
XRE_IsParentProcess
(
)
)
{
nsCString
asString
=
DictionariesToString
(
aDictionaries
)
;
Preferences
:
:
SetCString
(
"
spellchecker
.
dictionary
"
asString
)
;
#
ifdef
DEBUG_DICT
printf
(
"
*
*
*
*
*
Possibly
storing
spellchecker
.
dictionary
|
%
s
|
\
n
"
asString
.
Data
(
)
)
;
#
endif
}
}
}
nsIGlobalObject
*
globalObject
=
xpc
:
:
CurrentNativeGlobal
(
aCx
)
;
if
(
NS_WARN_IF
(
!
globalObject
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
ErrorResult
result
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
globalObject
result
)
;
if
(
NS_WARN_IF
(
result
.
Failed
(
)
)
)
{
return
result
.
StealNSResult
(
)
;
}
mSpellChecker
-
>
SetCurrentDictionaries
(
aDictionaries
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
promise
]
(
)
{
promise
-
>
MaybeResolveWithUndefined
(
)
;
}
[
promise
]
(
nsresult
aError
)
{
promise
-
>
MaybeReject
(
NS_ERROR_FAILURE
)
;
}
)
;
promise
.
forget
(
aPromise
)
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
UninitSpellChecker
(
)
{
NS_ENSURE_TRUE
(
mSpellChecker
NS_ERROR_NOT_INITIALIZED
)
;
DeleteSuggestedWordList
(
)
;
mDictionaryList
.
Clear
(
)
;
mDictionaryIndex
=
0
;
mDictionaryFetcherGroup
+
+
;
mSpellChecker
=
nullptr
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
SetFilterType
(
uint32_t
aFilterType
)
{
mTxtSrvFilterType
=
aFilterType
;
return
NS_OK
;
}
nsresult
EditorSpellCheck
:
:
DeleteSuggestedWordList
(
)
{
mSuggestedWordList
.
Clear
(
)
;
mSuggestedWordIndex
=
0
;
return
NS_OK
;
}
NS_IMETHODIMP
EditorSpellCheck
:
:
UpdateCurrentDictionary
(
nsIEditorSpellCheckCallback
*
aCallback
)
{
if
(
NS_WARN_IF
(
!
mSpellChecker
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsresult
rv
;
RefPtr
<
EditorSpellCheck
>
kungFuDeathGrip
=
this
;
uint32_t
flags
=
0
;
mEditor
-
>
GetFlags
(
&
flags
)
;
nsCOMPtr
<
nsIContent
>
rootContent
;
if
(
HTMLEditor
*
htmlEditor
=
mEditor
-
>
GetAsHTMLEditor
(
)
)
{
if
(
flags
&
nsIEditor
:
:
eEditorMailMask
)
{
rootContent
=
htmlEditor
-
>
GetActiveEditingHost
(
)
;
}
else
{
rootContent
=
htmlEditor
-
>
GetFocusedContent
(
)
;
}
}
else
{
rootContent
=
mEditor
-
>
GetRoot
(
)
;
}
if
(
!
rootContent
)
{
return
NS_ERROR_FAILURE
;
}
if
(
flags
&
nsIEditor
:
:
eEditorMailMask
)
{
RefPtr
<
Document
>
ownerDoc
=
rootContent
-
>
OwnerDoc
(
)
;
Document
*
parentDoc
=
ownerDoc
-
>
GetInProcessParentDocument
(
)
;
if
(
parentDoc
)
{
rootContent
=
parentDoc
-
>
GetDocumentElement
(
)
;
if
(
!
rootContent
)
{
return
NS_ERROR_FAILURE
;
}
}
}
RefPtr
<
DictionaryFetcher
>
fetcher
=
new
DictionaryFetcher
(
this
aCallback
mDictionaryFetcherGroup
)
;
rootContent
-
>
GetLang
(
fetcher
-
>
mRootContentLang
)
;
RefPtr
<
Document
>
doc
=
rootContent
-
>
GetComposedDoc
(
)
;
NS_ENSURE_STATE
(
doc
)
;
doc
-
>
GetContentLanguage
(
fetcher
-
>
mRootDocContentLang
)
;
rv
=
fetcher
-
>
Fetch
(
mEditor
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
void
EditorSpellCheck
:
:
BuildDictionaryList
(
const
nsACString
&
aDictName
const
nsTArray
<
nsCString
>
&
aDictList
enum
dictCompare
aCompareType
nsTArray
<
nsCString
>
&
aOutList
)
{
for
(
const
auto
&
dictStr
:
aDictList
)
{
bool
equals
=
false
;
switch
(
aCompareType
)
{
case
DICT_NORMAL_COMPARE
:
equals
=
aDictName
.
Equals
(
dictStr
)
;
break
;
case
DICT_COMPARE_CASE_INSENSITIVE
:
equals
=
aDictName
.
Equals
(
dictStr
nsCaseInsensitiveCStringComparator
)
;
break
;
case
DICT_COMPARE_DASHMATCH
:
equals
=
nsStyleUtil
:
:
DashMatchCompare
(
NS_ConvertUTF8toUTF16
(
dictStr
)
NS_ConvertUTF8toUTF16
(
aDictName
)
nsCaseInsensitiveStringComparator
)
;
break
;
}
if
(
equals
)
{
aOutList
.
AppendElement
(
dictStr
)
;
#
ifdef
DEBUG_DICT
printf
(
"
*
*
*
*
*
Trying
|
%
s
|
.
\
n
"
dictStr
.
get
(
)
)
;
#
endif
return
;
}
}
}
nsresult
EditorSpellCheck
:
:
DictionaryFetched
(
DictionaryFetcher
*
aFetcher
)
{
MOZ_ASSERT
(
aFetcher
)
;
RefPtr
<
EditorSpellCheck
>
kungFuDeathGrip
=
this
;
BeginUpdateDictionary
(
)
;
if
(
aFetcher
-
>
mGroup
<
mDictionaryFetcherGroup
)
{
EndUpdateDictionary
(
)
;
if
(
aFetcher
-
>
mCallback
)
{
aFetcher
-
>
mCallback
-
>
EditorSpellCheckDone
(
)
;
}
return
NS_OK
;
}
CopyUTF16toUTF8
(
aFetcher
-
>
mRootContentLang
mPreferredLang
)
;
#
ifdef
DEBUG_DICT
printf
(
"
*
*
*
*
*
mPreferredLang
(
element
)
|
%
s
|
\
n
"
mPreferredLang
.
get
(
)
)
;
#
endif
if
(
mPreferredLang
.
IsEmpty
(
)
)
{
CopyUTF16toUTF8
(
aFetcher
-
>
mRootDocContentLang
mPreferredLang
)
;
#
ifdef
DEBUG_DICT
printf
(
"
*
*
*
*
*
mPreferredLang
(
content
-
language
)
|
%
s
|
\
n
"
mPreferredLang
.
get
(
)
)
;
#
endif
}
AutoTArray
<
nsCString
8
>
dictList
;
nsresult
rv
=
mSpellChecker
-
>
GetDictionaryList
(
&
dictList
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
EndUpdateDictionary
(
)
;
if
(
aFetcher
-
>
mCallback
)
{
aFetcher
-
>
mCallback
-
>
EditorSpellCheckDone
(
)
;
}
return
rv
;
}
nsAutoCString
dictName
;
uint32_t
flags
;
mEditor
-
>
GetFlags
(
&
flags
)
;
if
(
!
(
flags
&
nsIEditor
:
:
eEditorMailMask
)
)
{
if
(
!
aFetcher
-
>
mDictionaries
.
IsEmpty
(
)
)
{
RefPtr
<
EditorSpellCheck
>
self
=
this
;
RefPtr
<
DictionaryFetcher
>
fetcher
=
aFetcher
;
mSpellChecker
-
>
SetCurrentDictionaries
(
aFetcher
-
>
mDictionaries
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
self
fetcher
]
(
)
{
#
ifdef
DEBUG_DICT
printf
(
"
*
*
*
*
*
Assigned
from
content
preferences
|
%
s
|
\
n
"
DictionariesToString
(
fetcher
-
>
mDictionaries
)
.
Data
(
)
)
;
#
endif
self
-
>
DeleteSuggestedWordList
(
)
;
self
-
>
EndUpdateDictionary
(
)
;
if
(
fetcher
-
>
mCallback
)
{
fetcher
-
>
mCallback
-
>
EditorSpellCheckDone
(
)
;
}
}
[
self
fetcher
]
(
nsresult
aError
)
{
if
(
aError
=
=
NS_ERROR_ABORT
)
{
return
;
}
ClearCurrentDictionaries
(
self
-
>
mEditor
)
;
self
-
>
SetFallbackDictionary
(
fetcher
)
;
}
)
;
return
NS_OK
;
}
}
SetFallbackDictionary
(
aFetcher
)
;
return
NS_OK
;
}
void
EditorSpellCheck
:
:
SetDictionarySucceeded
(
DictionaryFetcher
*
aFetcher
)
{
DeleteSuggestedWordList
(
)
;
EndUpdateDictionary
(
)
;
if
(
aFetcher
-
>
mCallback
)
{
aFetcher
-
>
mCallback
-
>
EditorSpellCheckDone
(
)
;
}
}
void
EditorSpellCheck
:
:
SetFallbackDictionary
(
DictionaryFetcher
*
aFetcher
)
{
MOZ_ASSERT
(
mUpdateDictionaryRunning
)
;
AutoTArray
<
nsCString
6
>
tryDictList
;
AutoTArray
<
nsCString
8
>
dictList
;
nsresult
rv
=
mSpellChecker
-
>
GetDictionaryList
(
&
dictList
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
EndUpdateDictionary
(
)
;
if
(
aFetcher
-
>
mCallback
)
{
aFetcher
-
>
mCallback
-
>
EditorSpellCheckDone
(
)
;
}
return
;
}
nsAutoCString
dictName
(
mPreferredLang
)
;
#
ifdef
DEBUG_DICT
printf
(
"
*
*
*
*
*
Assigned
from
element
/
doc
|
%
s
|
\
n
"
dictName
.
get
(
)
)
;
#
endif
nsAutoCString
prefDictionariesAsString
;
Preferences
:
:
GetLocalizedCString
(
"
spellchecker
.
dictionary
"
prefDictionariesAsString
)
;
nsTArray
<
nsCString
>
prefDictionaries
;
StringToDictionaries
(
prefDictionariesAsString
prefDictionaries
)
;
nsAutoCString
appLocaleStr
;
if
(
!
dictName
.
IsEmpty
(
)
)
{
BuildDictionaryList
(
dictName
dictList
DICT_COMPARE_CASE_INSENSITIVE
tryDictList
)
;
#
ifdef
DEBUG_DICT
printf
(
"
*
*
*
*
*
Trying
from
element
/
doc
|
%
s
|
\
n
"
dictName
.
get
(
)
)
;
#
endif
mozilla
:
:
intl
:
:
Locale
loc
;
if
(
mozilla
:
:
intl
:
:
LocaleParser
:
:
TryParse
(
dictName
loc
)
.
isOk
(
)
&
&
loc
.
Canonicalize
(
)
.
isOk
(
)
)
{
Span
<
const
char
>
language
=
loc
.
Language
(
)
.
Span
(
)
;
nsAutoCString
langCode
(
language
.
data
(
)
language
.
size
(
)
)
;
for
(
const
auto
&
dictionary
:
prefDictionaries
)
{
if
(
nsStyleUtil
:
:
DashMatchCompare
(
NS_ConvertUTF8toUTF16
(
dictionary
)
NS_ConvertUTF8toUTF16
(
langCode
)
nsTDefaultStringComparator
)
)
{
#
ifdef
DEBUG_DICT
printf
(
"
*
*
*
*
*
Trying
preference
value
|
%
s
|
since
it
matches
language
"
"
code
\
n
"
dictionary
.
Data
(
)
)
;
#
endif
BuildDictionaryList
(
dictionary
dictList
DICT_COMPARE_CASE_INSENSITIVE
tryDictList
)
;
break
;
}
}
if
(
tryDictList
.
IsEmpty
(
)
)
{
LocaleService
:
:
GetInstance
(
)
-
>
GetAppLocaleAsBCP47
(
appLocaleStr
)
;
if
(
!
appLocaleStr
.
IsEmpty
(
)
)
{
mozilla
:
:
intl
:
:
Locale
appLoc
;
auto
result
=
mozilla
:
:
intl
:
:
LocaleParser
:
:
TryParse
(
appLocaleStr
appLoc
)
;
if
(
result
.
isOk
(
)
&
&
loc
.
Canonicalize
(
)
.
isOk
(
)
&
&
loc
.
Language
(
)
.
Span
(
)
=
=
appLoc
.
Language
(
)
.
Span
(
)
)
{
BuildDictionaryList
(
appLocaleStr
dictList
DICT_COMPARE_CASE_INSENSITIVE
tryDictList
)
;
}
}
nsAutoCString
sysLocaleStr
;
OSPreferences
:
:
GetInstance
(
)
-
>
GetSystemLocale
(
sysLocaleStr
)
;
if
(
!
sysLocaleStr
.
IsEmpty
(
)
)
{
mozilla
:
:
intl
:
:
Locale
sysLoc
;
auto
result
=
mozilla
:
:
intl
:
:
LocaleParser
:
:
TryParse
(
sysLocaleStr
sysLoc
)
;
if
(
result
.
isOk
(
)
&
&
loc
.
Canonicalize
(
)
.
isOk
(
)
&
&
loc
.
Language
(
)
.
Span
(
)
=
=
sysLoc
.
Language
(
)
.
Span
(
)
)
{
BuildDictionaryList
(
sysLocaleStr
dictList
DICT_COMPARE_CASE_INSENSITIVE
tryDictList
)
;
}
}
}
#
ifdef
DEBUG_DICT
printf
(
"
*
*
*
*
*
Trying
to
find
match
for
language
code
|
%
s
|
\
n
"
langCode
.
get
(
)
)
;
#
endif
BuildDictionaryList
(
langCode
dictList
DICT_COMPARE_DASHMATCH
tryDictList
)
;
}
}
RefPtr
<
EditorSpellCheck
>
self
=
this
;
RefPtr
<
DictionaryFetcher
>
fetcher
=
aFetcher
;
mSpellChecker
-
>
SetCurrentDictionaryFromList
(
tryDictList
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
self
fetcher
]
(
)
{
self
-
>
SetDictionarySucceeded
(
fetcher
)
;
}
[
prefDictionaries
=
prefDictionaries
.
Clone
(
)
dictList
=
dictList
.
Clone
(
)
self
fetcher
]
(
)
{
AutoTArray
<
nsCString
6
>
tryDictList
;
nsAutoCString
appLocaleStr
;
LocaleService
:
:
GetInstance
(
)
-
>
GetAppLocaleAsBCP47
(
appLocaleStr
)
;
#
ifdef
DEBUG_DICT
printf
(
"
*
*
*
*
*
Trying
locale
|
%
s
|
\
n
"
appLocaleStr
.
get
(
)
)
;
#
endif
self
-
>
BuildDictionaryList
(
appLocaleStr
dictList
DICT_COMPARE_CASE_INSENSITIVE
tryDictList
)
;
nsTArray
<
nsCString
>
currentDictionaries
;
self
-
>
GetCurrentDictionaries
(
currentDictionaries
)
;
if
(
!
currentDictionaries
.
IsEmpty
(
)
&
&
tryDictList
.
IsEmpty
(
)
)
{
#
ifdef
DEBUG_DICT
printf
(
"
*
*
*
*
*
Retrieved
current
dict
|
%
s
|
\
n
"
DictionariesToString
(
currentDictionaries
)
.
Data
(
)
)
;
#
endif
self
-
>
EndUpdateDictionary
(
)
;
if
(
fetcher
-
>
mCallback
)
{
fetcher
-
>
mCallback
-
>
EditorSpellCheckDone
(
)
;
}
return
;
}
char
*
env_lang
=
getenv
(
"
LANG
"
)
;
if
(
env_lang
)
{
nsAutoCString
lang
(
env_lang
)
;
int32_t
dot_pos
=
lang
.
FindChar
(
'
.
'
)
;
if
(
dot_pos
!
=
-
1
)
{
lang
=
Substring
(
lang
0
dot_pos
)
;
}
int32_t
underScore
=
lang
.
FindChar
(
'
_
'
)
;
if
(
underScore
!
=
-
1
)
{
lang
.
Replace
(
underScore
1
'
-
'
)
;
#
ifdef
DEBUG_DICT
printf
(
"
*
*
*
*
*
Trying
LANG
from
environment
|
%
s
|
\
n
"
lang
.
get
(
)
)
;
#
endif
self
-
>
BuildDictionaryList
(
lang
dictList
DICT_COMPARE_CASE_INSENSITIVE
tryDictList
)
;
}
}
if
(
!
dictList
.
IsEmpty
(
)
)
{
self
-
>
BuildDictionaryList
(
dictList
[
0
]
dictList
DICT_NORMAL_COMPARE
tryDictList
)
;
#
ifdef
DEBUG_DICT
printf
(
"
*
*
*
*
*
Trying
first
of
list
|
%
s
|
\
n
"
dictList
[
0
]
.
get
(
)
)
;
#
endif
}
if
(
!
prefDictionaries
.
IsEmpty
(
)
)
{
self
-
>
mSpellChecker
-
>
SetCurrentDictionaries
(
prefDictionaries
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
self
fetcher
]
(
)
{
self
-
>
SetDictionarySucceeded
(
fetcher
)
;
}
[
tryDictList
=
tryDictList
.
Clone
(
)
self
fetcher
]
(
)
{
self
-
>
mSpellChecker
-
>
SetCurrentDictionaryFromList
(
tryDictList
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
self
fetcher
]
(
)
{
self
-
>
SetDictionarySucceeded
(
fetcher
)
;
}
)
;
}
)
;
}
else
{
self
-
>
mSpellChecker
-
>
SetCurrentDictionaryFromList
(
tryDictList
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
self
fetcher
]
(
)
{
self
-
>
SetDictionarySucceeded
(
fetcher
)
;
}
)
;
}
}
)
;
}
}
