#
include
"
nsComposeTxtSrvFilter
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
using
namespace
mozilla
;
bool
nsComposeTxtSrvFilter
:
:
Skip
(
nsINode
*
aNode
)
const
{
if
(
NS_WARN_IF
(
!
aNode
)
)
{
return
false
;
}
if
(
aNode
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
script
nsGkAtoms
:
:
textarea
nsGkAtoms
:
:
select
nsGkAtoms
:
:
style
nsGkAtoms
:
:
map
)
)
{
return
true
;
}
if
(
!
mIsForMail
)
{
return
false
;
}
if
(
aNode
-
>
IsHTMLElement
(
nsGkAtoms
:
:
blockquote
)
)
{
return
aNode
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
type
nsGkAtoms
:
:
cite
eIgnoreCase
)
;
}
if
(
aNode
-
>
IsHTMLElement
(
nsGkAtoms
:
:
span
)
)
{
if
(
aNode
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
mozquote
nsGkAtoms
:
:
_true
eIgnoreCase
)
)
{
return
true
;
}
return
aNode
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
_class
nsGkAtoms
:
:
mozsignature
eCaseMatters
)
;
}
if
(
aNode
-
>
IsHTMLElement
(
nsGkAtoms
:
:
table
)
)
{
return
aNode
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
_class
u
"
moz
-
email
-
headers
-
table
"
_ns
eCaseMatters
)
;
}
return
false
;
}
UniquePtr
<
nsComposeTxtSrvFilter
>
nsComposeTxtSrvFilter
:
:
CreateHelper
(
bool
aIsForMail
)
{
auto
filter
=
MakeUnique
<
nsComposeTxtSrvFilter
>
(
)
;
filter
-
>
Init
(
aIsForMail
)
;
return
filter
;
}
