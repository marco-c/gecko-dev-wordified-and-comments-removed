#
ifndef
mozilla_TextServicesDocument_h
#
define
mozilla_TextServicesDocument_h
#
include
"
mozilla
/
EditorDOMPoint
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIEditActionListener
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nscore
.
h
"
class
nsIContent
;
class
nsIEditor
;
class
nsINode
;
class
nsISelectionController
;
class
nsRange
;
namespace
mozilla
{
class
EditorBase
;
class
FilteredContentIterator
;
class
OffsetEntry
;
namespace
dom
{
class
AbstractRange
;
class
Document
;
class
Element
;
class
StaticRange
;
}
;
class
TextServicesDocument
final
:
public
nsIEditActionListener
{
private
:
enum
class
IteratorStatus
:
uint8_t
{
eDone
=
0
eValid
ePrev
eNext
}
;
class
OffsetEntryArray
final
:
public
nsTArray
<
UniquePtr
<
OffsetEntry
>
>
{
public
:
Result
<
IteratorStatus
nsresult
>
Init
(
FilteredContentIterator
&
aFilteredIter
IteratorStatus
aIteratorStatus
nsRange
*
aIterRange
nsAString
*
aAllTextInBlock
=
nullptr
)
;
Maybe
<
size_t
>
FirstIndexOf
(
const
dom
:
:
Text
&
aTextNode
)
const
;
Result
<
EditorDOMRangeInTexts
nsresult
>
FindWordRange
(
nsAString
&
aAllTextInBlock
const
EditorRawDOMPoint
&
aStartPointToScan
)
;
}
;
RefPtr
<
dom
:
:
Document
>
mDocument
;
nsCOMPtr
<
nsISelectionController
>
mSelCon
;
RefPtr
<
EditorBase
>
mEditorBase
;
RefPtr
<
FilteredContentIterator
>
mFilteredIter
;
nsCOMPtr
<
nsIContent
>
mPrevTextBlock
;
nsCOMPtr
<
nsIContent
>
mNextTextBlock
;
OffsetEntryArray
mOffsetTable
;
RefPtr
<
nsRange
>
mExtent
;
Maybe
<
size_t
>
mSelStartIndex
;
Maybe
<
size_t
>
mSelEndIndex
;
Maybe
<
uint32_t
>
mSelectionStartOffsetInTextInBlock
;
Maybe
<
uint32_t
>
mSelectionEndOffsetInTextInBlock
;
uint32_t
mTxtSvcFilterType
;
IteratorStatus
mIteratorStatus
;
protected
:
virtual
~
TextServicesDocument
(
)
=
default
;
public
:
TextServicesDocument
(
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
TextServicesDocument
)
nsresult
InitWithEditor
(
nsIEditor
*
aEditor
)
;
nsresult
SetExtent
(
const
dom
:
:
AbstractRange
*
aAbstractRange
)
;
nsresult
ExpandRangeToWordBoundaries
(
dom
:
:
StaticRange
*
aStaticRange
)
;
nsresult
SetFilterType
(
uint32_t
aFilterType
)
;
nsresult
GetCurrentTextBlock
(
nsAString
&
aStr
)
;
nsresult
FirstBlock
(
)
;
enum
class
BlockSelectionStatus
{
eBlockNotFound
=
0
eBlockOutside
eBlockInside
eBlockContains
eBlockPartial
}
;
MOZ_CAN_RUN_SCRIPT
nsresult
LastSelectedBlock
(
BlockSelectionStatus
*
aSelStatus
uint32_t
*
aSelOffset
uint32_t
*
aSelLength
)
;
nsresult
PrevBlock
(
)
;
nsresult
NextBlock
(
)
;
nsresult
IsDone
(
bool
*
aIsDone
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetSelection
(
uint32_t
aOffset
uint32_t
aLength
)
;
nsresult
ScrollSelectionIntoView
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DeleteSelection
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InsertText
(
const
nsAString
&
aText
)
;
NS_DECL_NSIEDITACTIONLISTENER
void
DidDeleteContent
(
const
nsIContent
&
aChildContent
)
;
void
DidJoinNodes
(
const
nsIContent
&
aLeftContent
const
nsIContent
&
aRightContent
)
;
private
:
static
nsresult
GetRangeEndPoints
(
const
dom
:
:
AbstractRange
*
aAbstractRange
nsINode
*
*
aStartContainer
uint32_t
*
aStartOffset
nsINode
*
*
aEndContainer
uint32_t
*
aEndOffset
)
;
nsresult
CreateFilteredContentIterator
(
const
dom
:
:
AbstractRange
*
aAbstractRange
FilteredContentIterator
*
*
aFilteredIter
)
;
dom
:
:
Element
*
GetDocumentContentRootNode
(
)
const
;
already_AddRefed
<
nsRange
>
CreateDocumentContentRange
(
)
;
already_AddRefed
<
nsRange
>
CreateDocumentContentRootToNodeOffsetRange
(
nsINode
*
aParent
uint32_t
aOffset
bool
aToStart
)
;
nsresult
CreateDocumentContentIterator
(
FilteredContentIterator
*
*
aFilteredIter
)
;
nsresult
AdjustContentIterator
(
)
;
static
nsresult
FirstTextNode
(
FilteredContentIterator
*
aFilteredIter
IteratorStatus
*
aIteratorStatus
)
;
static
nsresult
LastTextNode
(
FilteredContentIterator
*
aFilteredIter
IteratorStatus
*
aIteratorStatus
)
;
static
nsresult
FirstTextNodeInCurrentBlock
(
FilteredContentIterator
*
aFilteredIter
)
;
static
nsresult
FirstTextNodeInPrevBlock
(
FilteredContentIterator
*
aFilteredIter
)
;
static
nsresult
FirstTextNodeInNextBlock
(
FilteredContentIterator
*
aFilteredIter
)
;
nsresult
GetFirstTextNodeInPrevBlock
(
nsIContent
*
*
aContent
)
;
nsresult
GetFirstTextNodeInNextBlock
(
nsIContent
*
*
aContent
)
;
static
bool
IsBlockNode
(
nsIContent
*
aContent
)
;
static
bool
DidSkip
(
FilteredContentIterator
*
aFilteredIter
)
;
static
void
ClearDidSkip
(
FilteredContentIterator
*
aFilteredIter
)
;
static
bool
HasSameBlockNodeParent
(
nsIContent
*
aContent1
nsIContent
*
aContent2
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetSelectionInternal
(
uint32_t
aOffset
uint32_t
aLength
bool
aDoUpdate
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
GetSelection
(
BlockSelectionStatus
*
aSelStatus
uint32_t
*
aSelOffset
uint32_t
*
aSelLength
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
GetCollapsedSelection
(
BlockSelectionStatus
*
aSelStatus
uint32_t
*
aSelOffset
uint32_t
*
aSelLength
)
;
nsresult
GetUncollapsedSelection
(
BlockSelectionStatus
*
aSelStatus
uint32_t
*
aSelOffset
uint32_t
*
aSelLength
)
;
bool
SelectionIsCollapsed
(
)
const
;
bool
SelectionIsValid
(
)
const
;
nsresult
RemoveInvalidOffsetEntries
(
)
;
nsresult
SplitOffsetEntry
(
size_t
aTableIndex
uint32_t
aOffsetIntoEntry
)
;
}
;
}
#
endif
