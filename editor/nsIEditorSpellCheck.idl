#
include
"
nsISupports
.
idl
"
interface
nsIEditor
;
interface
nsIEditorSpellCheckCallback
;
[
scriptable
uuid
(
a171c25f
-
e4a8
-
4d08
-
adef
-
b797e6377bdc
)
]
interface
nsIEditorSpellCheck
:
nsISupports
{
boolean
canSpellCheck
(
)
;
void
InitSpellChecker
(
in
nsIEditor
editor
in
boolean
enableSelectionChecking
[
optional
]
in
nsIEditorSpellCheckCallback
callback
)
;
[
can_run_script
]
AString
GetNextMisspelledWord
(
)
;
AString
GetSuggestedWord
(
)
;
boolean
CheckCurrentWord
(
in
AString
suggestedWord
)
;
[
implicit_jscontext
]
Promise
suggest
(
in
AString
aCheckingWorkd
in
unsigned
long
aMaxCount
)
;
[
can_run_script
]
void
ReplaceWord
(
in
AString
misspelledWord
in
AString
replaceWord
in
boolean
allOccurrences
)
;
void
IgnoreWordAllOccurrences
(
in
AString
word
)
;
void
AddWordToDictionary
(
in
AString
word
)
;
void
RemoveWordFromDictionary
(
in
AString
word
)
;
Array
<
ACString
>
GetDictionaryList
(
)
;
Array
<
ACString
>
getCurrentDictionaries
(
)
;
[
implicit_jscontext
]
Promise
setCurrentDictionaries
(
in
Array
<
ACString
>
dictionaries
)
;
void
UninitSpellChecker
(
)
;
const
unsigned
long
FILTERTYPE_NORMAL
=
1
;
const
unsigned
long
FILTERTYPE_MAIL
=
2
;
void
setFilterType
(
in
unsigned
long
filterType
)
;
void
UpdateCurrentDictionary
(
[
optional
]
in
nsIEditorSpellCheckCallback
callback
)
;
}
;
[
scriptable
function
uuid
(
5f0a4bab
-
8538
-
4074
-
89d3
-
2f0e866a1c0b
)
]
interface
nsIEditorSpellCheckCallback
:
nsISupports
{
void
editorSpellCheckDone
(
)
;
}
;
