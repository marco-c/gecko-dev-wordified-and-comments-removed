#
include
"
mozilla
/
HTMLEditor
.
h
"
#
include
"
mozilla
/
TextEditor
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsComposerCommands
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsICommandParams
.
h
"
#
include
"
nsIDOMDocument
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIEditingSession
.
h
"
#
include
"
nsIEditor
.
h
"
#
include
"
nsIPlaintextEditor
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsISelectionController
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsISupportsUtils
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nscore
.
h
"
using
namespace
mozilla
;
class
nsISupports
;
#
define
STATE_ENABLED
"
state_enabled
"
#
define
STATE_ALL
"
state_all
"
#
define
STATE_ATTRIBUTE
"
state_attribute
"
#
define
STATE_DATA
"
state_data
"
static
nsresult
GetPresContextFromEditor
(
TextEditor
*
aTextEditor
nsPresContext
*
*
aResult
)
{
if
(
NS_WARN_IF
(
!
aResult
)
|
|
NS_WARN_IF
(
!
aTextEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
aResult
=
nullptr
;
nsCOMPtr
<
nsIPresShell
>
presShell
=
aTextEditor
-
>
GetPresShell
(
)
;
if
(
NS_WARN_IF
(
!
presShell
)
)
{
return
NS_ERROR_FAILURE
;
}
RefPtr
<
nsPresContext
>
presContext
=
presShell
-
>
GetPresContext
(
)
;
presContext
.
forget
(
aResult
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsSetDocumentOptionsCommand
:
:
IsCommandEnabled
(
const
char
*
aCommandName
nsISupports
*
refCon
bool
*
outCmdEnabled
)
{
NS_ENSURE_ARG_POINTER
(
outCmdEnabled
)
;
nsCOMPtr
<
nsIEditor
>
editor
=
do_QueryInterface
(
refCon
)
;
if
(
!
editor
)
{
*
outCmdEnabled
=
false
;
return
NS_OK
;
}
TextEditor
*
textEditor
=
editor
-
>
AsTextEditor
(
)
;
MOZ_ASSERT
(
textEditor
)
;
*
outCmdEnabled
=
textEditor
-
>
IsSelectionEditable
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsSetDocumentOptionsCommand
:
:
DoCommand
(
const
char
*
aCommandName
nsISupports
*
refCon
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
nsSetDocumentOptionsCommand
:
:
DoCommandParams
(
const
char
*
aCommandName
nsICommandParams
*
aParams
nsISupports
*
refCon
)
{
NS_ENSURE_ARG_POINTER
(
aParams
)
;
nsCOMPtr
<
nsIEditor
>
editor
=
do_QueryInterface
(
refCon
)
;
if
(
NS_WARN_IF
(
!
editor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
TextEditor
*
textEditor
=
editor
-
>
AsTextEditor
(
)
;
MOZ_ASSERT
(
textEditor
)
;
RefPtr
<
nsPresContext
>
presContext
;
nsresult
rv
=
GetPresContextFromEditor
(
textEditor
getter_AddRefs
(
presContext
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
presContext
NS_ERROR_FAILURE
)
;
int32_t
animationMode
;
rv
=
aParams
-
>
GetLongValue
(
"
imageAnimation
"
&
animationMode
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
presContext
-
>
SetImageAnimationMode
(
animationMode
)
;
}
bool
allowPlugins
;
rv
=
aParams
-
>
GetBooleanValue
(
"
plugins
"
&
allowPlugins
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
(
presContext
-
>
GetDocShell
(
)
)
;
NS_ENSURE_TRUE
(
docShell
NS_ERROR_FAILURE
)
;
rv
=
docShell
-
>
SetAllowPlugins
(
allowPlugins
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsSetDocumentOptionsCommand
:
:
GetCommandStateParams
(
const
char
*
aCommandName
nsICommandParams
*
aParams
nsISupports
*
refCon
)
{
NS_ENSURE_ARG_POINTER
(
aParams
)
;
NS_ENSURE_ARG_POINTER
(
refCon
)
;
nsCOMPtr
<
nsIEditor
>
editor
=
do_QueryInterface
(
refCon
)
;
if
(
NS_WARN_IF
(
!
editor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
TextEditor
*
textEditor
=
editor
-
>
AsTextEditor
(
)
;
MOZ_ASSERT
(
textEditor
)
;
bool
outCmdEnabled
=
false
;
IsCommandEnabled
(
aCommandName
refCon
&
outCmdEnabled
)
;
nsresult
rv
=
aParams
-
>
SetBooleanValue
(
STATE_ENABLED
outCmdEnabled
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
nsPresContext
>
presContext
;
rv
=
GetPresContextFromEditor
(
textEditor
getter_AddRefs
(
presContext
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
presContext
NS_ERROR_FAILURE
)
;
int32_t
animationMode
;
rv
=
aParams
-
>
GetLongValue
(
"
imageAnimation
"
&
animationMode
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
aParams
-
>
SetLongValue
(
"
imageAnimation
"
presContext
-
>
ImageAnimationMode
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
bool
allowPlugins
=
false
;
rv
=
aParams
-
>
GetBooleanValue
(
"
plugins
"
&
allowPlugins
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
(
presContext
-
>
GetDocShell
(
)
)
;
NS_ENSURE_TRUE
(
docShell
NS_ERROR_FAILURE
)
;
allowPlugins
=
docShell
-
>
PluginsAllowedInCurrentDoc
(
)
;
rv
=
aParams
-
>
SetBooleanValue
(
"
plugins
"
allowPlugins
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsSetDocumentStateCommand
:
:
IsCommandEnabled
(
const
char
*
aCommandName
nsISupports
*
refCon
bool
*
outCmdEnabled
)
{
NS_ENSURE_ARG_POINTER
(
outCmdEnabled
)
;
*
outCmdEnabled
=
true
;
return
NS_OK
;
}
NS_IMETHODIMP
nsSetDocumentStateCommand
:
:
DoCommand
(
const
char
*
aCommandName
nsISupports
*
refCon
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
nsSetDocumentStateCommand
:
:
DoCommandParams
(
const
char
*
aCommandName
nsICommandParams
*
aParams
nsISupports
*
refCon
)
{
nsCOMPtr
<
nsIEditor
>
editor
=
do_QueryInterface
(
refCon
)
;
if
(
NS_WARN_IF
(
!
editor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
TextEditor
*
textEditor
=
editor
-
>
AsTextEditor
(
)
;
MOZ_ASSERT
(
textEditor
)
;
if
(
!
nsCRT
:
:
strcmp
(
aCommandName
"
cmd_setDocumentModified
"
)
)
{
NS_ENSURE_ARG_POINTER
(
aParams
)
;
bool
modified
;
nsresult
rv
=
aParams
-
>
GetBooleanValue
(
STATE_ATTRIBUTE
&
modified
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
modified
)
{
return
textEditor
-
>
IncrementModificationCount
(
1
)
;
}
return
textEditor
-
>
ResetModificationCount
(
)
;
}
if
(
!
nsCRT
:
:
strcmp
(
aCommandName
"
cmd_setDocumentReadOnly
"
)
)
{
NS_ENSURE_ARG_POINTER
(
aParams
)
;
bool
isReadOnly
;
nsresult
rvRO
=
aParams
-
>
GetBooleanValue
(
STATE_ATTRIBUTE
&
isReadOnly
)
;
NS_ENSURE_SUCCESS
(
rvRO
rvRO
)
;
uint32_t
flags
;
textEditor
-
>
GetFlags
(
&
flags
)
;
if
(
isReadOnly
)
{
flags
|
=
nsIPlaintextEditor
:
:
eEditorReadonlyMask
;
}
else
{
flags
&
=
~
(
nsIPlaintextEditor
:
:
eEditorReadonlyMask
)
;
}
return
textEditor
-
>
SetFlags
(
flags
)
;
}
if
(
!
nsCRT
:
:
strcmp
(
aCommandName
"
cmd_setDocumentUseCSS
"
)
)
{
NS_ENSURE_ARG_POINTER
(
aParams
)
;
HTMLEditor
*
htmlEditor
=
textEditor
-
>
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
desireCSS
;
nsresult
rvCSS
=
aParams
-
>
GetBooleanValue
(
STATE_ATTRIBUTE
&
desireCSS
)
;
NS_ENSURE_SUCCESS
(
rvCSS
rvCSS
)
;
return
htmlEditor
-
>
SetIsCSSEnabled
(
desireCSS
)
;
}
if
(
!
nsCRT
:
:
strcmp
(
aCommandName
"
cmd_insertBrOnReturn
"
)
)
{
NS_ENSURE_ARG_POINTER
(
aParams
)
;
HTMLEditor
*
htmlEditor
=
textEditor
-
>
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
insertBrOnReturn
;
nsresult
rvBR
=
aParams
-
>
GetBooleanValue
(
STATE_ATTRIBUTE
&
insertBrOnReturn
)
;
NS_ENSURE_SUCCESS
(
rvBR
rvBR
)
;
return
htmlEditor
-
>
SetReturnInParagraphCreatesNewParagraph
(
!
insertBrOnReturn
)
;
}
if
(
!
nsCRT
:
:
strcmp
(
aCommandName
"
cmd_defaultParagraphSeparator
"
)
)
{
if
(
NS_WARN_IF
(
!
aParams
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
HTMLEditor
*
htmlEditor
=
textEditor
-
>
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsXPIDLCString
newValue
;
nsresult
rv
=
aParams
-
>
GetCStringValue
(
STATE_ATTRIBUTE
getter_Copies
(
newValue
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
newValue
.
LowerCaseEqualsLiteral
(
"
div
"
)
)
{
htmlEditor
-
>
SetDefaultParagraphSeparator
(
ParagraphSeparator
:
:
div
)
;
return
NS_OK
;
}
if
(
newValue
.
LowerCaseEqualsLiteral
(
"
p
"
)
)
{
htmlEditor
-
>
SetDefaultParagraphSeparator
(
ParagraphSeparator
:
:
p
)
;
return
NS_OK
;
}
if
(
newValue
.
LowerCaseEqualsLiteral
(
"
br
"
)
)
{
htmlEditor
-
>
SetDefaultParagraphSeparator
(
ParagraphSeparator
:
:
br
)
;
return
NS_OK
;
}
NS_WARNING
(
"
Invalid
default
paragraph
separator
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
if
(
!
nsCRT
:
:
strcmp
(
aCommandName
"
cmd_enableObjectResizing
"
)
)
{
NS_ENSURE_ARG_POINTER
(
aParams
)
;
HTMLEditor
*
htmlEditor
=
textEditor
-
>
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
enabled
;
nsresult
rvOR
=
aParams
-
>
GetBooleanValue
(
STATE_ATTRIBUTE
&
enabled
)
;
NS_ENSURE_SUCCESS
(
rvOR
rvOR
)
;
return
htmlEditor
-
>
SetObjectResizingEnabled
(
enabled
)
;
}
if
(
!
nsCRT
:
:
strcmp
(
aCommandName
"
cmd_enableInlineTableEditing
"
)
)
{
NS_ENSURE_ARG_POINTER
(
aParams
)
;
HTMLEditor
*
htmlEditor
=
textEditor
-
>
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
enabled
;
nsresult
rvOR
=
aParams
-
>
GetBooleanValue
(
STATE_ATTRIBUTE
&
enabled
)
;
NS_ENSURE_SUCCESS
(
rvOR
rvOR
)
;
return
htmlEditor
-
>
SetInlineTableEditingEnabled
(
enabled
)
;
}
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
nsSetDocumentStateCommand
:
:
GetCommandStateParams
(
const
char
*
aCommandName
nsICommandParams
*
aParams
nsISupports
*
refCon
)
{
NS_ENSURE_ARG_POINTER
(
aParams
)
;
NS_ENSURE_ARG_POINTER
(
refCon
)
;
nsCOMPtr
<
nsIEditor
>
editor
=
do_QueryInterface
(
refCon
)
;
if
(
NS_WARN_IF
(
!
editor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
TextEditor
*
textEditor
=
editor
-
>
AsTextEditor
(
)
;
MOZ_ASSERT
(
textEditor
)
;
bool
outCmdEnabled
=
false
;
IsCommandEnabled
(
aCommandName
refCon
&
outCmdEnabled
)
;
nsresult
rv
=
aParams
-
>
SetBooleanValue
(
STATE_ENABLED
outCmdEnabled
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
nsCRT
:
:
strcmp
(
aCommandName
"
cmd_setDocumentModified
"
)
)
{
bool
modified
;
rv
=
textEditor
-
>
GetDocumentModified
(
&
modified
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
aParams
-
>
SetBooleanValue
(
STATE_ATTRIBUTE
modified
)
;
}
if
(
!
nsCRT
:
:
strcmp
(
aCommandName
"
cmd_setDocumentReadOnly
"
)
)
{
NS_ENSURE_ARG_POINTER
(
aParams
)
;
return
aParams
-
>
SetBooleanValue
(
STATE_ATTRIBUTE
textEditor
-
>
IsReadonly
(
)
)
;
}
if
(
!
nsCRT
:
:
strcmp
(
aCommandName
"
cmd_setDocumentUseCSS
"
)
)
{
NS_ENSURE_ARG_POINTER
(
aParams
)
;
HTMLEditor
*
htmlEditor
=
textEditor
-
>
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
isCSS
;
htmlEditor
-
>
GetIsCSSEnabled
(
&
isCSS
)
;
return
aParams
-
>
SetBooleanValue
(
STATE_ALL
isCSS
)
;
}
if
(
!
nsCRT
:
:
strcmp
(
aCommandName
"
cmd_insertBrOnReturn
"
)
)
{
NS_ENSURE_ARG_POINTER
(
aParams
)
;
HTMLEditor
*
htmlEditor
=
textEditor
-
>
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
createPOnReturn
;
htmlEditor
-
>
GetReturnInParagraphCreatesNewParagraph
(
&
createPOnReturn
)
;
return
aParams
-
>
SetBooleanValue
(
STATE_ATTRIBUTE
!
createPOnReturn
)
;
}
if
(
!
nsCRT
:
:
strcmp
(
aCommandName
"
cmd_defaultParagraphSeparator
"
)
)
{
if
(
NS_WARN_IF
(
!
aParams
)
)
{
return
NS_ERROR_NULL_POINTER
;
}
HTMLEditor
*
htmlEditor
=
textEditor
-
>
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
switch
(
htmlEditor
-
>
GetDefaultParagraphSeparator
(
)
)
{
case
ParagraphSeparator
:
:
div
:
aParams
-
>
SetCStringValue
(
STATE_ATTRIBUTE
"
div
"
)
;
return
NS_OK
;
case
ParagraphSeparator
:
:
p
:
aParams
-
>
SetCStringValue
(
STATE_ATTRIBUTE
"
p
"
)
;
return
NS_OK
;
case
ParagraphSeparator
:
:
br
:
aParams
-
>
SetCStringValue
(
STATE_ATTRIBUTE
"
br
"
)
;
return
NS_OK
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
paragraph
separator
value
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
}
if
(
!
nsCRT
:
:
strcmp
(
aCommandName
"
cmd_enableObjectResizing
"
)
)
{
NS_ENSURE_ARG_POINTER
(
aParams
)
;
HTMLEditor
*
htmlEditor
=
textEditor
-
>
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
enabled
;
htmlEditor
-
>
GetObjectResizingEnabled
(
&
enabled
)
;
return
aParams
-
>
SetBooleanValue
(
STATE_ATTRIBUTE
enabled
)
;
}
if
(
!
nsCRT
:
:
strcmp
(
aCommandName
"
cmd_enableInlineTableEditing
"
)
)
{
NS_ENSURE_ARG_POINTER
(
aParams
)
;
HTMLEditor
*
htmlEditor
=
textEditor
-
>
AsHTMLEditor
(
)
;
if
(
NS_WARN_IF
(
!
htmlEditor
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
bool
enabled
;
htmlEditor
-
>
GetInlineTableEditingEnabled
(
&
enabled
)
;
return
aParams
-
>
SetBooleanValue
(
STATE_ATTRIBUTE
enabled
)
;
}
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
nsDocumentStateCommand
:
:
IsCommandEnabled
(
const
char
*
aCommandName
nsISupports
*
refCon
bool
*
outCmdEnabled
)
{
NS_ENSURE_ARG_POINTER
(
outCmdEnabled
)
;
*
outCmdEnabled
=
false
;
return
NS_OK
;
}
NS_IMETHODIMP
nsDocumentStateCommand
:
:
DoCommand
(
const
char
*
aCommandName
nsISupports
*
refCon
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
nsDocumentStateCommand
:
:
DoCommandParams
(
const
char
*
aCommandName
nsICommandParams
*
aParams
nsISupports
*
refCon
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
nsDocumentStateCommand
:
:
GetCommandStateParams
(
const
char
*
aCommandName
nsICommandParams
*
aParams
nsISupports
*
refCon
)
{
NS_ENSURE_ARG_POINTER
(
aParams
)
;
NS_ENSURE_ARG_POINTER
(
aCommandName
)
;
nsresult
rv
;
if
(
!
nsCRT
:
:
strcmp
(
aCommandName
"
obs_documentCreated
"
)
)
{
uint32_t
editorStatus
=
nsIEditingSession
:
:
eEditorErrorUnknown
;
nsCOMPtr
<
nsIEditingSession
>
editingSession
=
do_QueryInterface
(
refCon
)
;
if
(
editingSession
)
{
rv
=
editingSession
-
>
GetEditorStatus
(
&
editorStatus
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
else
{
nsCOMPtr
<
nsIEditor
>
editor
=
do_QueryInterface
(
refCon
)
;
if
(
editor
)
{
editorStatus
=
nsIEditingSession
:
:
eEditorOK
;
}
}
aParams
-
>
SetLongValue
(
STATE_DATA
editorStatus
)
;
return
NS_OK
;
}
if
(
!
nsCRT
:
:
strcmp
(
aCommandName
"
obs_documentLocationChanged
"
)
)
{
nsCOMPtr
<
nsIEditor
>
editor
=
do_QueryInterface
(
refCon
)
;
if
(
!
editor
)
{
return
NS_OK
;
}
TextEditor
*
textEditor
=
editor
-
>
AsTextEditor
(
)
;
MOZ_ASSERT
(
textEditor
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
textEditor
-
>
GetDocument
(
)
;
NS_ENSURE_TRUE
(
doc
NS_ERROR_FAILURE
)
;
nsIURI
*
uri
=
doc
-
>
GetDocumentURI
(
)
;
NS_ENSURE_TRUE
(
uri
NS_ERROR_FAILURE
)
;
return
aParams
-
>
SetISupportsValue
(
STATE_DATA
(
nsISupports
*
)
uri
)
;
}
return
NS_ERROR_NOT_IMPLEMENTED
;
}
