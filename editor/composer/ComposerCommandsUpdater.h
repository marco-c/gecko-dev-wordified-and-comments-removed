#
ifndef
mozilla_ComposerCommandsUpdater_h
#
define
mozilla_ComposerCommandsUpdater_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsINamed
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsITransactionListener
.
h
"
#
include
"
nscore
.
h
"
class
nsCommandManager
;
class
nsIDocShell
;
class
nsITransaction
;
class
nsITransactionManager
;
class
nsPIDOMWindowOuter
;
namespace
mozilla
{
class
ComposerCommandsUpdater
final
:
public
nsITransactionListener
public
nsITimerCallback
public
nsINamed
{
public
:
ComposerCommandsUpdater
(
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
ComposerCommandsUpdater
nsITransactionListener
)
NS_DECL_NSITIMERCALLBACK
NS_DECL_NSINAMED
NS_DECL_NSITRANSACTIONLISTENER
void
Init
(
nsPIDOMWindowOuter
&
aDOMWindow
)
;
void
OnSelectionChange
(
)
{
PrimeUpdateTimer
(
)
;
}
MOZ_CAN_RUN_SCRIPT
void
OnHTMLEditorCreated
(
)
{
UpdateOneCommand
(
"
obs_documentCreated
"
)
;
}
MOZ_CAN_RUN_SCRIPT
void
OnBeforeHTMLEditorDestroyed
(
)
{
if
(
mUpdateTimer
)
{
mUpdateTimer
-
>
Cancel
(
)
;
mUpdateTimer
=
nullptr
;
}
}
MOZ_CAN_RUN_SCRIPT
void
OnHTMLEditorDirtyStateChanged
(
bool
aNowDirty
)
{
if
(
mDirtyState
=
=
static_cast
<
int8_t
>
(
aNowDirty
)
)
{
return
;
}
UpdateCommandGroup
(
CommandGroup
:
:
Save
)
;
UpdateCommandGroup
(
CommandGroup
:
:
Undo
)
;
mDirtyState
=
aNowDirty
;
}
protected
:
virtual
~
ComposerCommandsUpdater
(
)
;
enum
{
eStateUninitialized
=
-
1
eStateOff
=
0
eStateOn
=
1
}
;
bool
SelectionIsCollapsed
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
UpdateOneCommand
(
const
char
*
aCommand
)
;
enum
class
CommandGroup
{
Save
Style
Undo
}
;
MOZ_CAN_RUN_SCRIPT
void
UpdateCommandGroup
(
CommandGroup
aCommandGroup
)
;
nsCommandManager
*
GetCommandManager
(
)
;
nsresult
PrimeUpdateTimer
(
)
;
void
TimerCallback
(
)
;
nsCOMPtr
<
nsITimer
>
mUpdateTimer
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
mDOMWindow
;
nsCOMPtr
<
nsIDocShell
>
mDocShell
;
int8_t
mDirtyState
;
int8_t
mSelectionCollapsed
;
bool
mFirstDoOfFirstUndo
;
}
;
}
#
endif
