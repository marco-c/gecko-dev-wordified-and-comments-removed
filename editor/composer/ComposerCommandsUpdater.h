#
ifndef
mozilla_ComposerCommandsUpdater_h
#
define
mozilla_ComposerCommandsUpdater_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIDocumentStateListener
.
h
"
#
include
"
nsINamed
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsITransactionListener
.
h
"
#
include
"
nscore
.
h
"
class
nsCommandManager
;
class
nsIDocShell
;
class
nsITransaction
;
class
nsITransactionManager
;
class
nsPIDOMWindowOuter
;
namespace
mozilla
{
class
ComposerCommandsUpdater
final
:
public
nsIDocumentStateListener
public
nsITransactionListener
public
nsITimerCallback
public
nsINamed
{
public
:
ComposerCommandsUpdater
(
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
ComposerCommandsUpdater
nsIDocumentStateListener
)
NS_DECL_NSIDOCUMENTSTATELISTENER
NS_DECL_NSITIMERCALLBACK
NS_DECL_NSINAMED
NS_DECL_NSITRANSACTIONLISTENER
nsresult
Init
(
nsPIDOMWindowOuter
*
aDOMWindow
)
;
void
OnSelectionChange
(
)
{
PrimeUpdateTimer
(
)
;
}
protected
:
virtual
~
ComposerCommandsUpdater
(
)
;
enum
{
eStateUninitialized
=
-
1
eStateOff
=
0
eStateOn
=
1
}
;
bool
SelectionIsCollapsed
(
)
;
nsresult
UpdateDirtyState
(
bool
aNowDirty
)
;
nsresult
UpdateOneCommand
(
const
char
*
aCommand
)
;
nsresult
UpdateCommandGroup
(
const
nsAString
&
aCommandGroup
)
;
nsCommandManager
*
GetCommandManager
(
)
;
nsresult
PrimeUpdateTimer
(
)
;
void
TimerCallback
(
)
;
nsCOMPtr
<
nsITimer
>
mUpdateTimer
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
mDOMWindow
;
nsCOMPtr
<
nsIDocShell
>
mDocShell
;
int8_t
mDirtyState
;
int8_t
mSelectionCollapsed
;
bool
mFirstDoOfFirstUndo
;
}
;
}
#
endif
