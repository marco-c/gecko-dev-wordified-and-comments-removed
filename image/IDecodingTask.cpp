#
include
"
IDecodingTask
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
Decoder
.
h
"
#
include
"
DecodePool
.
h
"
#
include
"
RasterImage
.
h
"
#
include
"
SurfaceCache
.
h
"
namespace
mozilla
{
using
gfx
:
:
IntRect
;
namespace
image
{
void
IDecodingTask
:
:
NotifyProgress
(
NotNull
<
RasterImage
*
>
aImage
NotNull
<
Decoder
*
>
aDecoder
)
{
MOZ_ASSERT
(
aDecoder
-
>
HasProgress
(
)
&
&
!
aDecoder
-
>
IsMetadataDecode
(
)
)
;
Progress
progress
=
aDecoder
-
>
TakeProgress
(
)
;
IntRect
invalidRect
=
aDecoder
-
>
TakeInvalidRect
(
)
;
Maybe
<
uint32_t
>
frameCount
=
aDecoder
-
>
TakeCompleteFrameCount
(
)
;
DecoderFlags
decoderFlags
=
aDecoder
-
>
GetDecoderFlags
(
)
;
SurfaceFlags
surfaceFlags
=
aDecoder
-
>
GetSurfaceFlags
(
)
;
if
(
NS_IsMainThread
(
)
&
&
!
(
decoderFlags
&
DecoderFlags
:
:
ASYNC_NOTIFY
)
)
{
aImage
-
>
NotifyProgress
(
progress
invalidRect
frameCount
decoderFlags
surfaceFlags
)
;
return
;
}
NotNull
<
RefPtr
<
RasterImage
>
>
image
=
aImage
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
[
=
]
(
)
-
>
void
{
image
-
>
NotifyProgress
(
progress
invalidRect
frameCount
decoderFlags
surfaceFlags
)
;
}
)
)
;
}
void
IDecodingTask
:
:
NotifyDecodeComplete
(
NotNull
<
RasterImage
*
>
aImage
NotNull
<
Decoder
*
>
aDecoder
)
{
MOZ_ASSERT
(
aDecoder
-
>
HasError
(
)
|
|
!
aDecoder
-
>
InFrame
(
)
"
Decode
complete
in
the
middle
of
a
frame
?
"
)
;
DecoderFinalStatus
finalStatus
=
aDecoder
-
>
FinalStatus
(
)
;
ImageMetadata
metadata
=
aDecoder
-
>
GetImageMetadata
(
)
;
DecoderTelemetry
telemetry
=
aDecoder
-
>
Telemetry
(
)
;
Progress
progress
=
aDecoder
-
>
TakeProgress
(
)
;
IntRect
invalidRect
=
aDecoder
-
>
TakeInvalidRect
(
)
;
Maybe
<
uint32_t
>
frameCount
=
aDecoder
-
>
TakeCompleteFrameCount
(
)
;
DecoderFlags
decoderFlags
=
aDecoder
-
>
GetDecoderFlags
(
)
;
SurfaceFlags
surfaceFlags
=
aDecoder
-
>
GetSurfaceFlags
(
)
;
if
(
NS_IsMainThread
(
)
&
&
!
(
decoderFlags
&
DecoderFlags
:
:
ASYNC_NOTIFY
)
)
{
aImage
-
>
NotifyDecodeComplete
(
finalStatus
metadata
telemetry
progress
invalidRect
frameCount
decoderFlags
surfaceFlags
)
;
return
;
}
NotNull
<
RefPtr
<
RasterImage
>
>
image
=
aImage
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
[
=
]
(
)
-
>
void
{
image
-
>
NotifyDecodeComplete
(
finalStatus
metadata
telemetry
progress
invalidRect
frameCount
decoderFlags
surfaceFlags
)
;
}
)
)
;
}
void
IDecodingTask
:
:
Resume
(
)
{
DecodePool
:
:
Singleton
(
)
-
>
AsyncRun
(
this
)
;
}
MetadataDecodingTask
:
:
MetadataDecodingTask
(
NotNull
<
Decoder
*
>
aDecoder
)
:
mMutex
(
"
mozilla
:
:
image
:
:
MetadataDecodingTask
"
)
mDecoder
(
aDecoder
)
{
MOZ_ASSERT
(
mDecoder
-
>
IsMetadataDecode
(
)
"
Use
DecodingTask
for
non
-
metadata
decodes
"
)
;
}
void
MetadataDecodingTask
:
:
Run
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
LexerResult
result
=
mDecoder
-
>
Decode
(
WrapNotNull
(
this
)
)
;
if
(
result
.
is
<
TerminalState
>
(
)
)
{
NotifyDecodeComplete
(
mDecoder
-
>
GetImage
(
)
mDecoder
)
;
return
;
}
if
(
result
=
=
LexerResult
(
Yield
:
:
NEED_MORE_DATA
)
)
{
return
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Metadata
decode
yielded
for
an
unexpected
reason
"
)
;
}
AnonymousDecodingTask
:
:
AnonymousDecodingTask
(
NotNull
<
Decoder
*
>
aDecoder
)
:
mDecoder
(
aDecoder
)
{
}
void
AnonymousDecodingTask
:
:
Run
(
)
{
while
(
true
)
{
LexerResult
result
=
mDecoder
-
>
Decode
(
WrapNotNull
(
this
)
)
;
if
(
result
.
is
<
TerminalState
>
(
)
)
{
return
;
}
if
(
result
=
=
LexerResult
(
Yield
:
:
NEED_MORE_DATA
)
)
{
return
;
}
MOZ_ASSERT
(
result
.
is
<
Yield
>
(
)
)
;
}
}
}
}
