#
include
"
IDecodingTask
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
Decoder
.
h
"
#
include
"
DecodePool
.
h
"
#
include
"
RasterImage
.
h
"
#
include
"
SurfaceCache
.
h
"
namespace
mozilla
{
using
gfx
:
:
IntRect
;
namespace
image
{
void
IDecodingTask
:
:
NotifyProgress
(
NotNull
<
RasterImage
*
>
aImage
NotNull
<
Decoder
*
>
aDecoder
)
{
MOZ_ASSERT
(
aDecoder
-
>
HasProgress
(
)
&
&
!
aDecoder
-
>
IsMetadataDecode
(
)
)
;
Progress
progress
=
aDecoder
-
>
TakeProgress
(
)
;
IntRect
invalidRect
=
aDecoder
-
>
TakeInvalidRect
(
)
;
Maybe
<
uint32_t
>
frameCount
=
aDecoder
-
>
TakeCompleteFrameCount
(
)
;
SurfaceFlags
surfaceFlags
=
aDecoder
-
>
GetSurfaceFlags
(
)
;
if
(
NS_IsMainThread
(
)
&
&
!
(
aDecoder
-
>
GetDecoderFlags
(
)
&
DecoderFlags
:
:
ASYNC_NOTIFY
)
)
{
aImage
-
>
NotifyProgress
(
progress
invalidRect
frameCount
surfaceFlags
)
;
return
;
}
NotNull
<
RefPtr
<
RasterImage
>
>
image
=
aImage
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
[
=
]
(
)
-
>
void
{
image
-
>
NotifyProgress
(
progress
invalidRect
frameCount
surfaceFlags
)
;
}
)
)
;
}
void
IDecodingTask
:
:
NotifyDecodeComplete
(
NotNull
<
RasterImage
*
>
aImage
NotNull
<
Decoder
*
>
aDecoder
)
{
if
(
NS_IsMainThread
(
)
&
&
!
(
aDecoder
-
>
GetDecoderFlags
(
)
&
DecoderFlags
:
:
ASYNC_NOTIFY
)
)
{
aImage
-
>
FinalizeDecoder
(
aDecoder
)
;
return
;
}
NotNull
<
RefPtr
<
RasterImage
>
>
image
=
aImage
;
NotNull
<
RefPtr
<
Decoder
>
>
decoder
=
aDecoder
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
[
=
]
(
)
-
>
void
{
image
-
>
FinalizeDecoder
(
decoder
.
get
(
)
)
;
}
)
)
;
}
void
IDecodingTask
:
:
Resume
(
)
{
DecodePool
:
:
Singleton
(
)
-
>
AsyncRun
(
this
)
;
}
DecodingTask
:
:
DecodingTask
(
NotNull
<
RasterImage
*
>
aImage
NotNull
<
Decoder
*
>
aDecoder
)
:
mImage
(
aImage
)
mDecoder
(
aDecoder
)
{
MOZ_ASSERT
(
!
mDecoder
-
>
IsMetadataDecode
(
)
"
Use
MetadataDecodingTask
for
metadata
decodes
"
)
;
MOZ_ASSERT
(
mDecoder
-
>
IsFirstFrameDecode
(
)
"
Use
AnimationDecodingTask
for
animation
decodes
"
)
;
}
DecodingTask
:
:
~
DecodingTask
(
)
{
RefPtr
<
RasterImage
>
image
=
mImage
;
NS_ReleaseOnMainThread
(
image
.
forget
(
)
)
;
}
void
DecodingTask
:
:
Run
(
)
{
LexerResult
result
=
mDecoder
-
>
Decode
(
WrapNotNull
(
this
)
)
;
if
(
!
mSurface
)
{
mSurface
=
mDecoder
-
>
GetCurrentFrameRef
(
)
.
get
(
)
;
if
(
mSurface
)
{
NotNull
<
RefPtr
<
ISurfaceProvider
>
>
provider
=
WrapNotNull
(
new
SimpleSurfaceProvider
(
WrapNotNull
(
mSurface
.
get
(
)
)
)
)
;
InsertOutcome
outcome
=
SurfaceCache
:
:
Insert
(
provider
ImageKey
(
mImage
.
get
(
)
)
RasterSurfaceKey
(
mDecoder
-
>
OutputSize
(
)
mDecoder
-
>
GetSurfaceFlags
(
)
0
)
)
;
if
(
outcome
=
=
InsertOutcome
:
:
FAILURE
)
{
result
=
mDecoder
-
>
TerminateFailure
(
)
;
}
else
if
(
outcome
=
=
InsertOutcome
:
:
FAILURE_ALREADY_PRESENT
)
{
mDecoder
-
>
Abort
(
)
;
result
=
mDecoder
-
>
TerminateFailure
(
)
;
}
}
}
MOZ_ASSERT
(
mSurface
.
get
(
)
=
=
mDecoder
-
>
GetCurrentFrameRef
(
)
.
get
(
)
"
DecodingTask
and
Decoder
have
different
surfaces
?
"
)
;
if
(
result
.
is
<
TerminalState
>
(
)
)
{
NotifyDecodeComplete
(
mImage
mDecoder
)
;
return
;
}
MOZ_ASSERT
(
result
.
is
<
Yield
>
(
)
)
;
if
(
mDecoder
-
>
HasProgress
(
)
)
{
NotifyProgress
(
mImage
mDecoder
)
;
}
if
(
result
=
=
LexerResult
(
Yield
:
:
NEED_MORE_DATA
)
)
{
return
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
yield
during
single
-
frame
image
decode
"
)
;
mDecoder
-
>
TerminateFailure
(
)
;
NotifyDecodeComplete
(
mImage
mDecoder
)
;
}
bool
DecodingTask
:
:
ShouldPreferSyncRun
(
)
const
{
return
mDecoder
-
>
ShouldSyncDecode
(
gfxPrefs
:
:
ImageMemDecodeBytesAtATime
(
)
)
;
}
AnimationDecodingTask
:
:
AnimationDecodingTask
(
NotNull
<
Decoder
*
>
aDecoder
)
:
mDecoder
(
aDecoder
)
{
MOZ_ASSERT
(
!
mDecoder
-
>
IsMetadataDecode
(
)
"
Use
MetadataDecodingTask
for
metadata
decodes
"
)
;
MOZ_ASSERT
(
!
mDecoder
-
>
IsFirstFrameDecode
(
)
"
Use
DecodingTask
for
single
-
frame
image
decodes
"
)
;
}
void
AnimationDecodingTask
:
:
Run
(
)
{
while
(
true
)
{
LexerResult
result
=
mDecoder
-
>
Decode
(
WrapNotNull
(
this
)
)
;
if
(
result
.
is
<
TerminalState
>
(
)
)
{
NotifyDecodeComplete
(
mDecoder
-
>
GetImage
(
)
mDecoder
)
;
return
;
}
MOZ_ASSERT
(
result
.
is
<
Yield
>
(
)
)
;
if
(
mDecoder
-
>
HasProgress
(
)
)
{
NotifyProgress
(
mDecoder
-
>
GetImage
(
)
mDecoder
)
;
}
if
(
result
=
=
LexerResult
(
Yield
:
:
NEED_MORE_DATA
)
)
{
return
;
}
}
}
bool
AnimationDecodingTask
:
:
ShouldPreferSyncRun
(
)
const
{
return
mDecoder
-
>
ShouldSyncDecode
(
gfxPrefs
:
:
ImageMemDecodeBytesAtATime
(
)
)
;
}
MetadataDecodingTask
:
:
MetadataDecodingTask
(
NotNull
<
Decoder
*
>
aDecoder
)
:
mDecoder
(
aDecoder
)
{
MOZ_ASSERT
(
mDecoder
-
>
IsMetadataDecode
(
)
"
Use
DecodingTask
for
non
-
metadata
decodes
"
)
;
}
void
MetadataDecodingTask
:
:
Run
(
)
{
LexerResult
result
=
mDecoder
-
>
Decode
(
WrapNotNull
(
this
)
)
;
if
(
result
.
is
<
TerminalState
>
(
)
)
{
NotifyDecodeComplete
(
mDecoder
-
>
GetImage
(
)
mDecoder
)
;
return
;
}
if
(
result
=
=
LexerResult
(
Yield
:
:
NEED_MORE_DATA
)
)
{
return
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Metadata
decode
yielded
for
an
unexpected
reason
"
)
;
}
AnonymousDecodingTask
:
:
AnonymousDecodingTask
(
NotNull
<
Decoder
*
>
aDecoder
)
:
mDecoder
(
aDecoder
)
{
}
void
AnonymousDecodingTask
:
:
Run
(
)
{
while
(
true
)
{
LexerResult
result
=
mDecoder
-
>
Decode
(
WrapNotNull
(
this
)
)
;
if
(
result
.
is
<
TerminalState
>
(
)
)
{
return
;
}
if
(
result
=
=
LexerResult
(
Yield
:
:
NEED_MORE_DATA
)
)
{
return
;
}
MOZ_ASSERT
(
result
.
is
<
Yield
>
(
)
)
;
}
}
}
}
