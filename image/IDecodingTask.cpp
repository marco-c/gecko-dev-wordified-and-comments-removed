#
include
"
IDecodingTask
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
Decoder
.
h
"
#
include
"
DecodePool
.
h
"
#
include
"
RasterImage
.
h
"
namespace
mozilla
{
namespace
image
{
void
IDecodingTask
:
:
NotifyProgress
(
NotNull
<
Decoder
*
>
aDecoder
)
{
MOZ_ASSERT
(
aDecoder
-
>
HasProgress
(
)
&
&
!
aDecoder
-
>
IsMetadataDecode
(
)
)
;
if
(
NS_IsMainThread
(
)
&
&
!
(
aDecoder
-
>
GetDecoderFlags
(
)
&
DecoderFlags
:
:
ASYNC_NOTIFY
)
)
{
aDecoder
-
>
GetImage
(
)
-
>
NotifyProgress
(
aDecoder
-
>
TakeProgress
(
)
aDecoder
-
>
TakeInvalidRect
(
)
aDecoder
-
>
GetSurfaceFlags
(
)
)
;
return
;
}
NotNull
<
RefPtr
<
Decoder
>
>
decoder
=
aDecoder
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
[
=
]
(
)
-
>
void
{
decoder
-
>
GetImage
(
)
-
>
NotifyProgress
(
decoder
-
>
TakeProgress
(
)
decoder
-
>
TakeInvalidRect
(
)
decoder
-
>
GetSurfaceFlags
(
)
)
;
}
)
)
;
}
static
void
NotifyDecodeComplete
(
NotNull
<
Decoder
*
>
aDecoder
)
{
if
(
NS_IsMainThread
(
)
&
&
!
(
aDecoder
-
>
GetDecoderFlags
(
)
&
DecoderFlags
:
:
ASYNC_NOTIFY
)
)
{
aDecoder
-
>
GetImage
(
)
-
>
FinalizeDecoder
(
aDecoder
)
;
return
;
}
NotNull
<
RefPtr
<
Decoder
>
>
decoder
=
aDecoder
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
[
=
]
(
)
-
>
void
{
decoder
-
>
GetImage
(
)
-
>
FinalizeDecoder
(
decoder
.
get
(
)
)
;
}
)
)
;
}
void
IDecodingTask
:
:
Resume
(
)
{
DecodePool
:
:
Singleton
(
)
-
>
AsyncRun
(
this
)
;
}
DecodingTask
:
:
DecodingTask
(
NotNull
<
Decoder
*
>
aDecoder
)
:
mDecoder
(
aDecoder
)
{
MOZ_ASSERT
(
!
mDecoder
-
>
IsMetadataDecode
(
)
"
Use
MetadataDecodingTask
for
metadata
decodes
"
)
;
}
void
DecodingTask
:
:
Run
(
)
{
nsresult
rv
=
mDecoder
-
>
Decode
(
WrapNotNull
(
this
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
mDecoder
-
>
GetDecodeDone
(
)
)
{
if
(
mDecoder
-
>
HasProgress
(
)
)
{
NotifyProgress
(
mDecoder
)
;
}
return
;
}
NotifyDecodeComplete
(
mDecoder
)
;
}
bool
DecodingTask
:
:
ShouldPreferSyncRun
(
)
const
{
return
mDecoder
-
>
ShouldSyncDecode
(
gfxPrefs
:
:
ImageMemDecodeBytesAtATime
(
)
)
;
}
MetadataDecodingTask
:
:
MetadataDecodingTask
(
NotNull
<
Decoder
*
>
aDecoder
)
:
mDecoder
(
aDecoder
)
{
MOZ_ASSERT
(
mDecoder
-
>
IsMetadataDecode
(
)
"
Use
DecodingTask
for
non
-
metadata
decodes
"
)
;
}
void
MetadataDecodingTask
:
:
Run
(
)
{
nsresult
rv
=
mDecoder
-
>
Decode
(
WrapNotNull
(
this
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
mDecoder
-
>
GetDecodeDone
(
)
)
{
return
;
}
NotifyDecodeComplete
(
mDecoder
)
;
}
AnonymousDecodingTask
:
:
AnonymousDecodingTask
(
NotNull
<
Decoder
*
>
aDecoder
)
:
mDecoder
(
aDecoder
)
{
}
void
AnonymousDecodingTask
:
:
Run
(
)
{
mDecoder
-
>
Decode
(
WrapNotNull
(
this
)
)
;
}
}
}
