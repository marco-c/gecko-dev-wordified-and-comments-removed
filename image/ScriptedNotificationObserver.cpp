#
include
"
ScriptedNotificationObserver
.
h
"
#
include
"
imgIScriptedNotificationObserver
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsContentUtils
.
h
"
namespace
mozilla
{
namespace
image
{
NS_IMPL_CYCLE_COLLECTION
(
ScriptedNotificationObserver
mInner
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ScriptedNotificationObserver
)
NS_INTERFACE_MAP_ENTRY
(
imgINotificationObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
ScriptedNotificationObserver
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
ScriptedNotificationObserver
)
ScriptedNotificationObserver
:
:
ScriptedNotificationObserver
(
imgIScriptedNotificationObserver
*
aInner
)
:
mInner
(
aInner
)
{
}
void
ScriptedNotificationObserver
:
:
Notify
(
imgIRequest
*
aRequest
int32_t
aType
const
nsIntRect
*
)
{
nsAutoScriptBlocker
scriptBlocker
;
if
(
aType
=
=
imgINotificationObserver
:
:
SIZE_AVAILABLE
)
{
mInner
-
>
SizeAvailable
(
aRequest
)
;
return
;
}
if
(
aType
=
=
imgINotificationObserver
:
:
FRAME_UPDATE
)
{
mInner
-
>
FrameUpdate
(
aRequest
)
;
return
;
}
if
(
aType
=
=
imgINotificationObserver
:
:
FRAME_COMPLETE
)
{
mInner
-
>
FrameComplete
(
aRequest
)
;
return
;
}
if
(
aType
=
=
imgINotificationObserver
:
:
DECODE_COMPLETE
)
{
mInner
-
>
DecodeComplete
(
aRequest
)
;
return
;
}
if
(
aType
=
=
imgINotificationObserver
:
:
LOAD_COMPLETE
)
{
mInner
-
>
LoadComplete
(
aRequest
)
;
return
;
}
if
(
aType
=
=
imgINotificationObserver
:
:
DISCARD
)
{
mInner
-
>
Discard
(
aRequest
)
;
return
;
}
if
(
aType
=
=
imgINotificationObserver
:
:
IS_ANIMATED
)
{
mInner
-
>
IsAnimated
(
aRequest
)
;
return
;
}
if
(
aType
=
=
imgINotificationObserver
:
:
HAS_TRANSPARENCY
)
{
mInner
-
>
HasTransparency
(
aRequest
)
;
return
;
}
}
}
}
