#
include
"
DecoderFactory
.
h
"
#
include
"
nsMimeTypes
.
h
"
#
include
"
mozilla
/
nsRefPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
Decoder
.
h
"
#
include
"
nsPNGDecoder
.
h
"
#
include
"
nsGIFDecoder2
.
h
"
#
include
"
nsJPEGDecoder
.
h
"
#
include
"
nsBMPDecoder
.
h
"
#
include
"
nsICODecoder
.
h
"
#
include
"
nsIconDecoder
.
h
"
namespace
mozilla
{
using
namespace
gfx
;
namespace
image
{
DecoderType
DecoderFactory
:
:
GetDecoderType
(
const
char
*
aMimeType
)
{
DecoderType
type
=
DecoderType
:
:
UNKNOWN
;
if
(
!
strcmp
(
aMimeType
IMAGE_PNG
)
)
{
type
=
DecoderType
:
:
PNG
;
}
else
if
(
!
strcmp
(
aMimeType
IMAGE_X_PNG
)
)
{
type
=
DecoderType
:
:
PNG
;
}
else
if
(
!
strcmp
(
aMimeType
IMAGE_GIF
)
)
{
type
=
DecoderType
:
:
GIF
;
}
else
if
(
!
strcmp
(
aMimeType
IMAGE_JPEG
)
)
{
type
=
DecoderType
:
:
JPEG
;
}
else
if
(
!
strcmp
(
aMimeType
IMAGE_PJPEG
)
)
{
type
=
DecoderType
:
:
JPEG
;
}
else
if
(
!
strcmp
(
aMimeType
IMAGE_JPG
)
)
{
type
=
DecoderType
:
:
JPEG
;
}
else
if
(
!
strcmp
(
aMimeType
IMAGE_BMP
)
)
{
type
=
DecoderType
:
:
BMP
;
}
else
if
(
!
strcmp
(
aMimeType
IMAGE_BMP_MS
)
)
{
type
=
DecoderType
:
:
BMP
;
}
else
if
(
!
strcmp
(
aMimeType
IMAGE_ICO
)
)
{
type
=
DecoderType
:
:
ICO
;
}
else
if
(
!
strcmp
(
aMimeType
IMAGE_ICO_MS
)
)
{
type
=
DecoderType
:
:
ICO
;
}
else
if
(
!
strcmp
(
aMimeType
IMAGE_ICON_MS
)
)
{
type
=
DecoderType
:
:
ICON
;
}
return
type
;
}
already_AddRefed
<
Decoder
>
DecoderFactory
:
:
GetDecoder
(
DecoderType
aType
RasterImage
*
aImage
bool
aIsRedecode
)
{
nsRefPtr
<
Decoder
>
decoder
;
switch
(
aType
)
{
case
DecoderType
:
:
PNG
:
decoder
=
new
nsPNGDecoder
(
aImage
)
;
break
;
case
DecoderType
:
:
GIF
:
decoder
=
new
nsGIFDecoder2
(
aImage
)
;
break
;
case
DecoderType
:
:
JPEG
:
decoder
=
new
nsJPEGDecoder
(
aImage
aIsRedecode
?
Decoder
:
:
SEQUENTIAL
:
Decoder
:
:
PROGRESSIVE
)
;
break
;
case
DecoderType
:
:
BMP
:
decoder
=
new
nsBMPDecoder
(
aImage
)
;
break
;
case
DecoderType
:
:
ICO
:
decoder
=
new
nsICODecoder
(
aImage
)
;
break
;
case
DecoderType
:
:
ICON
:
decoder
=
new
nsIconDecoder
(
aImage
)
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
decoder
type
"
)
;
}
return
decoder
.
forget
(
)
;
}
already_AddRefed
<
Decoder
>
DecoderFactory
:
:
CreateDecoder
(
DecoderType
aType
RasterImage
*
aImage
SourceBuffer
*
aSourceBuffer
const
Maybe
<
IntSize
>
&
aTargetSize
uint32_t
aFlags
int
aSampleSize
const
IntSize
&
aResolution
bool
aIsRedecode
bool
aImageIsTransient
)
{
if
(
aType
=
=
DecoderType
:
:
UNKNOWN
)
{
return
nullptr
;
}
nsRefPtr
<
Decoder
>
decoder
=
GetDecoder
(
aType
aImage
aIsRedecode
)
;
MOZ_ASSERT
(
decoder
"
Should
have
a
decoder
now
"
)
;
decoder
-
>
SetMetadataDecode
(
false
)
;
decoder
-
>
SetIterator
(
aSourceBuffer
-
>
Iterator
(
)
)
;
decoder
-
>
SetFlags
(
aFlags
)
;
decoder
-
>
SetSampleSize
(
aSampleSize
)
;
decoder
-
>
SetResolution
(
aResolution
)
;
decoder
-
>
SetSendPartialInvalidations
(
!
aIsRedecode
)
;
decoder
-
>
SetImageIsTransient
(
aImageIsTransient
)
;
decoder
-
>
SetIsFirstFrameDecode
(
)
;
if
(
aTargetSize
)
{
DebugOnly
<
nsresult
>
rv
=
decoder
-
>
SetTargetSize
(
*
aTargetSize
)
;
MOZ_ASSERT
(
nsresult
(
rv
)
!
=
NS_ERROR_NOT_AVAILABLE
"
We
'
re
downscale
-
during
-
decode
but
decoder
doesn
'
t
support
it
?
"
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
"
Bad
downscale
-
during
-
decode
target
size
?
"
)
;
}
decoder
-
>
Init
(
)
;
if
(
NS_FAILED
(
decoder
-
>
GetDecoderError
(
)
)
)
{
return
nullptr
;
}
return
decoder
.
forget
(
)
;
}
already_AddRefed
<
Decoder
>
DecoderFactory
:
:
CreateAnimationDecoder
(
DecoderType
aType
RasterImage
*
aImage
SourceBuffer
*
aSourceBuffer
uint32_t
aFlags
const
IntSize
&
aResolution
)
{
if
(
aType
=
=
DecoderType
:
:
UNKNOWN
)
{
return
nullptr
;
}
MOZ_ASSERT
(
aType
=
=
DecoderType
:
:
GIF
|
|
aType
=
=
DecoderType
:
:
PNG
"
Calling
CreateAnimationDecoder
for
non
-
animating
DecoderType
"
)
;
nsRefPtr
<
Decoder
>
decoder
=
GetDecoder
(
aType
aImage
true
)
;
MOZ_ASSERT
(
decoder
"
Should
have
a
decoder
now
"
)
;
decoder
-
>
SetMetadataDecode
(
false
)
;
decoder
-
>
SetIterator
(
aSourceBuffer
-
>
Iterator
(
)
)
;
decoder
-
>
SetFlags
(
aFlags
)
;
decoder
-
>
SetResolution
(
aResolution
)
;
decoder
-
>
SetSendPartialInvalidations
(
false
)
;
decoder
-
>
Init
(
)
;
if
(
NS_FAILED
(
decoder
-
>
GetDecoderError
(
)
)
)
{
return
nullptr
;
}
return
decoder
.
forget
(
)
;
}
already_AddRefed
<
Decoder
>
DecoderFactory
:
:
CreateMetadataDecoder
(
DecoderType
aType
RasterImage
*
aImage
SourceBuffer
*
aSourceBuffer
int
aSampleSize
const
IntSize
&
aResolution
)
{
if
(
aType
=
=
DecoderType
:
:
UNKNOWN
)
{
return
nullptr
;
}
nsRefPtr
<
Decoder
>
decoder
=
GetDecoder
(
aType
aImage
false
)
;
MOZ_ASSERT
(
decoder
"
Should
have
a
decoder
now
"
)
;
decoder
-
>
SetMetadataDecode
(
true
)
;
decoder
-
>
SetIterator
(
aSourceBuffer
-
>
Iterator
(
)
)
;
decoder
-
>
SetSampleSize
(
aSampleSize
)
;
decoder
-
>
SetResolution
(
aResolution
)
;
decoder
-
>
Init
(
)
;
if
(
NS_FAILED
(
decoder
-
>
GetDecoderError
(
)
)
)
{
return
nullptr
;
}
return
decoder
.
forget
(
)
;
}
already_AddRefed
<
Decoder
>
DecoderFactory
:
:
CreateAnonymousDecoder
(
DecoderType
aType
SourceBuffer
*
aSourceBuffer
uint32_t
aFlags
)
{
if
(
aType
=
=
DecoderType
:
:
UNKNOWN
)
{
return
nullptr
;
}
nsRefPtr
<
Decoder
>
decoder
=
GetDecoder
(
aType
nullptr
false
)
;
MOZ_ASSERT
(
decoder
"
Should
have
a
decoder
now
"
)
;
decoder
-
>
SetMetadataDecode
(
false
)
;
decoder
-
>
SetIterator
(
aSourceBuffer
-
>
Iterator
(
)
)
;
decoder
-
>
SetFlags
(
aFlags
)
;
decoder
-
>
SetImageIsTransient
(
true
)
;
decoder
-
>
SetIsFirstFrameDecode
(
)
;
decoder
-
>
Init
(
)
;
if
(
NS_FAILED
(
decoder
-
>
GetDecoderError
(
)
)
)
{
return
nullptr
;
}
return
decoder
.
forget
(
)
;
}
already_AddRefed
<
Decoder
>
DecoderFactory
:
:
CreateAnonymousMetadataDecoder
(
DecoderType
aType
SourceBuffer
*
aSourceBuffer
)
{
if
(
aType
=
=
DecoderType
:
:
UNKNOWN
)
{
return
nullptr
;
}
nsRefPtr
<
Decoder
>
decoder
=
GetDecoder
(
aType
nullptr
false
)
;
MOZ_ASSERT
(
decoder
"
Should
have
a
decoder
now
"
)
;
decoder
-
>
SetMetadataDecode
(
true
)
;
decoder
-
>
SetIterator
(
aSourceBuffer
-
>
Iterator
(
)
)
;
decoder
-
>
SetIsFirstFrameDecode
(
)
;
decoder
-
>
Init
(
)
;
if
(
NS_FAILED
(
decoder
-
>
GetDecoderError
(
)
)
)
{
return
nullptr
;
}
return
decoder
.
forget
(
)
;
}
}
}
