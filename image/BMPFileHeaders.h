#
ifndef
mozilla_image_BMPFileHeaders_h
#
define
mozilla_image_BMPFileHeaders_h
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
namespace
mozilla
{
namespace
image
{
namespace
bmp
{
struct
InfoHeaderLength
{
enum
{
WIN_V2
=
12
WIN_V3
=
40
WIN_V4
=
108
WIN_V5
=
124
OS2_V2_MIN
=
16
OS2_V2_MAX
=
64
}
;
}
;
struct
FileHeader
{
char
signature
[
2
]
;
uint32_t
filesize
;
int32_t
reserved
;
uint32_t
dataoffset
;
static
const
size_t
LENGTH
=
14
;
}
;
struct
XYZ
{
int32_t
x
y
z
;
}
;
struct
XYZTriple
{
XYZ
r
g
b
;
}
;
struct
V5InfoHeader
{
uint32_t
bihsize
;
int32_t
width
;
int32_t
height
;
uint16_t
planes
;
uint16_t
bpp
;
uint32_t
compression
;
uint32_t
image_size
;
uint32_t
xppm
;
uint32_t
yppm
;
uint32_t
colors
;
uint32_t
important_colors
;
uint32_t
red_mask
;
uint32_t
green_mask
;
uint32_t
blue_mask
;
uint32_t
alpha_mask
;
uint32_t
color_space
;
XYZTriple
white_point
;
uint32_t
gamma_red
;
uint32_t
gamma_green
;
uint32_t
gamma_blue
;
uint32_t
intent
;
uint32_t
profile_offset
;
uint32_t
profile_size
;
uint32_t
reserved
;
static
const
uint32_t
COLOR_SPACE_LCS_SRGB
=
0x73524742
;
}
;
struct
ColorTable
{
uint8_t
red
;
uint8_t
green
;
uint8_t
blue
;
}
;
struct
BitFields
{
uint32_t
red
;
uint32_t
green
;
uint32_t
blue
;
uint8_t
redLeftShift
;
uint8_t
redRightShift
;
uint8_t
greenLeftShift
;
uint8_t
greenRightShift
;
uint8_t
blueLeftShift
;
uint8_t
blueRightShift
;
static
const
size_t
LENGTH
=
12
;
}
;
struct
Compression
{
enum
{
RGB
=
0
RLE8
=
1
RLE4
=
2
BITFIELDS
=
3
}
;
}
;
struct
RLE
{
enum
{
ESCAPE
=
0
ESCAPE_EOL
=
0
ESCAPE_EOF
=
1
ESCAPE_DELTA
=
2
}
;
}
;
}
}
}
#
endif
