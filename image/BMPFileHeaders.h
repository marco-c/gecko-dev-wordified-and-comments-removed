#
ifndef
mozilla_image_BMPFileHeaders_h
#
define
mozilla_image_BMPFileHeaders_h
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
namespace
mozilla
{
namespace
image
{
struct
BIH_LENGTH
{
enum
{
OS2
=
12
WIN_V3
=
40
WIN_V5
=
124
}
;
}
;
struct
BIH_INTERNAL_LENGTH
{
enum
{
OS2
=
8
WIN_V3
=
36
WIN_V5
=
120
}
;
}
;
struct
BMPFILEHEADER
{
char
signature
[
2
]
;
uint32_t
filesize
;
int32_t
reserved
;
uint32_t
dataoffset
;
uint32_t
bihsize
;
static
const
size_t
LENGTH
=
14
;
static
const
size_t
INTERNAL_LENGTH
=
18
;
}
;
struct
BMP_HEADER_LENGTH
{
enum
{
OS2
=
BMPFILEHEADER
:
:
INTERNAL_LENGTH
+
BIH_INTERNAL_LENGTH
:
:
OS2
WIN_V3
=
BMPFILEHEADER
:
:
INTERNAL_LENGTH
+
BIH_INTERNAL_LENGTH
:
:
WIN_V3
WIN_V5
=
BMPFILEHEADER
:
:
INTERNAL_LENGTH
+
BIH_INTERNAL_LENGTH
:
:
WIN_V5
}
;
}
;
struct
xyz
{
int32_t
x
y
z
;
}
;
struct
xyzTriple
{
xyz
r
g
b
;
}
;
struct
BITMAPV5HEADER
{
int32_t
width
;
int32_t
height
;
uint16_t
planes
;
uint16_t
bpp
;
uint32_t
compression
;
uint32_t
image_size
;
uint32_t
xppm
;
uint32_t
yppm
;
uint32_t
colors
;
uint32_t
important_colors
;
uint32_t
red_mask
;
uint32_t
green_mask
;
uint32_t
blue_mask
;
uint32_t
alpha_mask
;
uint32_t
color_space
;
xyzTriple
white_point
;
uint32_t
gamma_red
;
uint32_t
gamma_green
;
uint32_t
gamma_blue
;
uint32_t
intent
;
uint32_t
profile_offset
;
uint32_t
profile_size
;
uint32_t
reserved
;
static
const
uint32_t
COLOR_SPACE_LCS_SRGB
=
0x73524742
;
}
;
struct
colorTable
{
uint8_t
red
;
uint8_t
green
;
uint8_t
blue
;
}
;
struct
bitFields
{
uint32_t
red
;
uint32_t
green
;
uint32_t
blue
;
uint8_t
redLeftShift
;
uint8_t
redRightShift
;
uint8_t
greenLeftShift
;
uint8_t
greenRightShift
;
uint8_t
blueLeftShift
;
uint8_t
blueRightShift
;
static
const
size_t
LENGTH
=
12
;
}
;
struct
BMPINFOHEADER
{
enum
{
RGB
=
0
RLE8
=
1
RLE4
=
2
BITFIELDS
=
3
ALPHABITFIELDS
=
4
}
;
}
;
struct
RLE
{
enum
{
ESCAPE
=
0
ESCAPE_EOL
=
0
ESCAPE_EOF
=
1
ESCAPE_DELTA
=
2
}
;
}
;
enum
ERLEState
{
eRLEStateInitial
eRLEStateNeedSecondEscapeByte
eRLEStateNeedXDelta
eRLEStateNeedYDelta
eRLEStateAbsoluteMode
eRLEStateAbsoluteModePadded
}
;
}
}
#
endif
