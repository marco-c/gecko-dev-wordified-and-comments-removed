#
include
"
Image
.
h
"
#
include
"
Layers
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
namespace
mozilla
{
namespace
image
{
ImageMemoryCounter
:
:
ImageMemoryCounter
(
Image
*
aImage
SizeOfState
&
aState
bool
aIsUsed
)
:
mIsUsed
(
aIsUsed
)
{
MOZ_ASSERT
(
aImage
)
;
RefPtr
<
ImageURL
>
imageURL
(
aImage
-
>
GetURI
(
)
)
;
if
(
imageURL
)
{
imageURL
-
>
GetSpec
(
mURI
)
;
}
int32_t
width
=
0
;
int32_t
height
=
0
;
aImage
-
>
GetWidth
(
&
width
)
;
aImage
-
>
GetHeight
(
&
height
)
;
mIntrinsicSize
.
SizeTo
(
width
height
)
;
mType
=
aImage
-
>
GetType
(
)
;
mValues
.
SetSource
(
aImage
-
>
SizeOfSourceWithComputedFallback
(
aState
)
)
;
aImage
-
>
CollectSizeOfSurfaces
(
mSurfaces
aState
.
mMallocSizeOf
)
;
for
(
const
SurfaceMemoryCounter
&
surfaceCounter
:
mSurfaces
)
{
mValues
+
=
surfaceCounter
.
Values
(
)
;
}
}
void
ImageResource
:
:
SetCurrentImage
(
ImageContainer
*
aContainer
SourceSurface
*
aSurface
bool
aInTransaction
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aContainer
)
;
if
(
!
aSurface
)
{
return
;
}
RefPtr
<
layers
:
:
Image
>
image
=
new
layers
:
:
SourceSurfaceImage
(
aSurface
)
;
AutoTArray
<
ImageContainer
:
:
NonOwningImage
1
>
imageList
;
imageList
.
AppendElement
(
ImageContainer
:
:
NonOwningImage
(
image
TimeStamp
(
)
mLastFrameID
+
+
mImageProducerID
)
)
;
if
(
aInTransaction
)
{
aContainer
-
>
SetCurrentImagesInTransaction
(
imageList
)
;
}
else
{
aContainer
-
>
SetCurrentImages
(
imageList
)
;
}
}
already_AddRefed
<
ImageContainer
>
ImageResource
:
:
GetImageContainerImpl
(
LayerManager
*
aManager
const
IntSize
&
aSize
uint32_t
aFlags
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aManager
)
;
MOZ_ASSERT
(
(
aFlags
&
~
(
FLAG_SYNC_DECODE
|
FLAG_SYNC_DECODE_IF_FAST
|
FLAG_ASYNC_NOTIFY
|
FLAG_HIGH_QUALITY_SCALING
)
)
=
=
FLAG_NONE
"
Unsupported
flag
passed
to
GetImageContainer
"
)
;
IntSize
size
=
GetImageContainerSize
(
aManager
aSize
aFlags
)
;
if
(
size
.
IsEmpty
(
)
)
{
return
nullptr
;
}
if
(
mAnimationConsumers
=
=
0
)
{
SendOnUnlockedDraw
(
aFlags
)
;
}
RefPtr
<
layers
:
:
ImageContainer
>
container
;
ImageContainerEntry
*
entry
=
nullptr
;
int
i
=
mImageContainers
.
Length
(
)
-
1
;
for
(
;
i
>
=
0
;
-
-
i
)
{
entry
=
&
mImageContainers
[
i
]
;
container
=
entry
-
>
mContainer
.
get
(
)
;
if
(
size
=
=
entry
-
>
mSize
)
{
break
;
}
else
if
(
!
container
)
{
mImageContainers
.
RemoveElementAt
(
i
)
;
}
}
if
(
i
>
=
0
&
&
container
)
{
switch
(
entry
-
>
mLastDrawResult
)
{
case
DrawResult
:
:
SUCCESS
:
case
DrawResult
:
:
BAD_IMAGE
:
case
DrawResult
:
:
BAD_ARGS
:
return
container
.
forget
(
)
;
case
DrawResult
:
:
NOT_READY
:
case
DrawResult
:
:
INCOMPLETE
:
case
DrawResult
:
:
TEMPORARY_ERROR
:
break
;
case
DrawResult
:
:
WRONG_SIZE
:
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unhandled
DrawResult
type
!
"
)
;
return
container
.
forget
(
)
;
}
}
#
ifdef
DEBUG
NotifyDrawingObservers
(
)
;
#
endif
DrawResult
drawResult
;
IntSize
bestSize
;
RefPtr
<
SourceSurface
>
surface
;
Tie
(
drawResult
bestSize
surface
)
=
GetFrameInternal
(
size
FRAME_CURRENT
aFlags
|
FLAG_ASYNC_NOTIFY
)
;
if
(
bestSize
!
=
size
)
{
MOZ_ASSERT
(
!
bestSize
.
IsEmpty
(
)
)
;
if
(
i
>
=
0
&
&
!
container
)
{
mImageContainers
.
RemoveElementAt
(
i
)
;
}
container
=
nullptr
;
i
=
mImageContainers
.
Length
(
)
-
1
;
for
(
;
i
>
=
0
;
-
-
i
)
{
entry
=
&
mImageContainers
[
i
]
;
if
(
bestSize
=
=
entry
-
>
mSize
)
{
container
=
entry
-
>
mContainer
.
get
(
)
;
if
(
container
)
{
switch
(
entry
-
>
mLastDrawResult
)
{
case
DrawResult
:
:
SUCCESS
:
case
DrawResult
:
:
BAD_IMAGE
:
case
DrawResult
:
:
BAD_ARGS
:
return
container
.
forget
(
)
;
case
DrawResult
:
:
NOT_READY
:
case
DrawResult
:
:
INCOMPLETE
:
case
DrawResult
:
:
TEMPORARY_ERROR
:
break
;
case
DrawResult
:
:
WRONG_SIZE
:
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unhandled
DrawResult
type
!
"
)
;
return
container
.
forget
(
)
;
}
}
break
;
}
}
}
if
(
!
container
)
{
container
=
LayerManager
:
:
CreateImageContainer
(
)
;
if
(
i
>
=
0
)
{
entry
-
>
mContainer
=
container
;
}
else
{
entry
=
mImageContainers
.
AppendElement
(
ImageContainerEntry
(
bestSize
container
.
get
(
)
)
)
;
}
}
SetCurrentImage
(
container
surface
true
)
;
entry
-
>
mLastDrawResult
=
drawResult
;
return
container
.
forget
(
)
;
}
void
ImageResource
:
:
UpdateImageContainer
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
for
(
int
i
=
mImageContainers
.
Length
(
)
-
1
;
i
>
=
0
;
-
-
i
)
{
ImageContainerEntry
&
entry
=
mImageContainers
[
i
]
;
RefPtr
<
ImageContainer
>
container
=
entry
.
mContainer
.
get
(
)
;
if
(
container
)
{
IntSize
bestSize
;
RefPtr
<
SourceSurface
>
surface
;
Tie
(
entry
.
mLastDrawResult
bestSize
surface
)
=
GetFrameInternal
(
entry
.
mSize
FRAME_CURRENT
FLAG_ASYNC_NOTIFY
)
;
SetCurrentImage
(
container
surface
false
)
;
}
else
{
mImageContainers
.
RemoveElementAt
(
i
)
;
}
}
}
void
ImageResource
:
:
ReleaseImageContainer
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mImageContainers
.
Clear
(
)
;
}
ImageResource
:
:
ImageResource
(
ImageURL
*
aURI
)
:
mURI
(
aURI
)
mInnerWindowId
(
0
)
mAnimationConsumers
(
0
)
mAnimationMode
(
kNormalAnimMode
)
mInitialized
(
false
)
mAnimating
(
false
)
mError
(
false
)
mImageProducerID
(
ImageContainer
:
:
AllocateProducerID
(
)
)
mLastFrameID
(
0
)
{
}
ImageResource
:
:
~
ImageResource
(
)
{
mProgressTracker
-
>
ResetImage
(
)
;
}
void
ImageResource
:
:
IncrementAnimationConsumers
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Main
thread
only
to
encourage
serialization
"
"
with
DecrementAnimationConsumers
"
)
;
mAnimationConsumers
+
+
;
}
void
ImageResource
:
:
DecrementAnimationConsumers
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Main
thread
only
to
encourage
serialization
"
"
with
IncrementAnimationConsumers
"
)
;
MOZ_ASSERT
(
mAnimationConsumers
>
=
1
"
Invalid
no
.
of
animation
consumers
!
"
)
;
mAnimationConsumers
-
-
;
}
nsresult
ImageResource
:
:
GetAnimationModeInternal
(
uint16_t
*
aAnimationMode
)
{
if
(
mError
)
{
return
NS_ERROR_FAILURE
;
}
NS_ENSURE_ARG_POINTER
(
aAnimationMode
)
;
*
aAnimationMode
=
mAnimationMode
;
return
NS_OK
;
}
nsresult
ImageResource
:
:
SetAnimationModeInternal
(
uint16_t
aAnimationMode
)
{
if
(
mError
)
{
return
NS_ERROR_FAILURE
;
}
NS_ASSERTION
(
aAnimationMode
=
=
kNormalAnimMode
|
|
aAnimationMode
=
=
kDontAnimMode
|
|
aAnimationMode
=
=
kLoopOnceAnimMode
"
Wrong
Animation
Mode
is
being
set
!
"
)
;
mAnimationMode
=
aAnimationMode
;
return
NS_OK
;
}
bool
ImageResource
:
:
HadRecentRefresh
(
const
TimeStamp
&
aTime
)
{
static
TimeDuration
recentThreshold
=
TimeDuration
:
:
FromMilliseconds
(
nsRefreshDriver
:
:
DefaultInterval
(
)
/
2
.
0
)
;
if
(
!
mLastRefreshTime
.
IsNull
(
)
&
&
aTime
-
mLastRefreshTime
<
recentThreshold
)
{
return
true
;
}
mLastRefreshTime
=
aTime
;
return
false
;
}
void
ImageResource
:
:
EvaluateAnimation
(
)
{
if
(
!
mAnimating
&
&
ShouldAnimate
(
)
)
{
nsresult
rv
=
StartAnimation
(
)
;
mAnimating
=
NS_SUCCEEDED
(
rv
)
;
}
else
if
(
mAnimating
&
&
!
ShouldAnimate
(
)
)
{
StopAnimation
(
)
;
}
}
void
ImageResource
:
:
SendOnUnlockedDraw
(
uint32_t
aFlags
)
{
if
(
!
mProgressTracker
)
{
return
;
}
if
(
!
(
aFlags
&
FLAG_ASYNC_NOTIFY
)
)
{
mProgressTracker
-
>
OnUnlockedDraw
(
)
;
}
else
{
NotNull
<
RefPtr
<
ImageResource
>
>
image
=
WrapNotNull
(
this
)
;
nsCOMPtr
<
nsIEventTarget
>
eventTarget
=
mProgressTracker
-
>
GetEventTarget
(
)
;
nsCOMPtr
<
nsIRunnable
>
ev
=
NS_NewRunnableFunction
(
"
image
:
:
ImageResource
:
:
SendOnUnlockedDraw
"
[
=
]
(
)
-
>
void
{
RefPtr
<
ProgressTracker
>
tracker
=
image
-
>
GetProgressTracker
(
)
;
if
(
tracker
)
{
tracker
-
>
OnUnlockedDraw
(
)
;
}
}
)
;
eventTarget
-
>
Dispatch
(
ev
.
forget
(
)
NS_DISPATCH_NORMAL
)
;
}
}
#
ifdef
DEBUG
void
ImageResource
:
:
NotifyDrawingObservers
(
)
{
if
(
!
mURI
|
|
!
NS_IsMainThread
(
)
)
{
return
;
}
bool
match
=
false
;
if
(
(
NS_FAILED
(
mURI
-
>
SchemeIs
(
"
resource
"
&
match
)
)
|
|
!
match
)
&
&
(
NS_FAILED
(
mURI
-
>
SchemeIs
(
"
chrome
"
&
match
)
)
|
|
!
match
)
)
{
return
;
}
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
NS_WARNING_ASSERTION
(
obs
"
Can
'
t
get
an
observer
service
handle
"
)
;
if
(
obs
)
{
nsCOMPtr
<
nsIURI
>
imageURI
=
mURI
-
>
ToIURI
(
)
;
nsAutoCString
spec
;
imageURI
-
>
GetSpec
(
spec
)
;
obs
-
>
NotifyObservers
(
nullptr
"
image
-
drawing
"
NS_ConvertUTF8toUTF16
(
spec
)
.
get
(
)
)
;
}
}
#
endif
}
}
