#
include
"
nsISupports
.
idl
"
#
include
"
nsIRequest
.
idl
"
#
include
"
imgIContainer
.
idl
"
interface
imgINotificationObserver
;
interface
nsIURI
;
interface
nsIPrincipal
;
[
scriptable
builtinclass
uuid
(
db0a945c
-
3883
-
424a
-
98d0
-
2ee0523b0255
)
]
interface
imgIRequest
:
nsIRequest
{
readonly
attribute
imgIContainer
image
;
[
infallible
]
readonly
attribute
unsigned
long
providerId
;
const
long
STATUS_NONE
=
0x0
;
const
long
STATUS_SIZE_AVAILABLE
=
0x1
;
const
long
STATUS_LOAD_COMPLETE
=
0x2
;
const
long
STATUS_ERROR
=
0x4
;
const
long
STATUS_FRAME_COMPLETE
=
0x8
;
const
long
STATUS_DECODE_COMPLETE
=
0x10
;
const
long
STATUS_IS_ANIMATED
=
0x20
;
const
long
STATUS_HAS_TRANSPARENCY
=
0x40
;
readonly
attribute
unsigned
long
imageStatus
;
[
noscript
]
readonly
attribute
nsresult
imageErrorCode
;
[
infallible
]
readonly
attribute
nsIURI
URI
;
readonly
attribute
nsIURI
finalURI
;
readonly
attribute
imgINotificationObserver
notificationObserver
;
readonly
attribute
string
mimeType
;
readonly
attribute
ACString
fileName
;
imgIRequest
clone
(
in
imgINotificationObserver
aObserver
)
;
readonly
attribute
nsIPrincipal
imagePrincipal
;
readonly
attribute
bool
hadCrossOriginRedirects
;
readonly
attribute
bool
multipart
;
readonly
attribute
long
CORSMode
;
void
cancelAndForgetObserver
(
in
nsresult
aStatus
)
;
void
startDecoding
(
in
uint32_t
aFlags
)
;
[
noscript
notxpcom
]
boolean
startDecodingWithResult
(
in
uint32_t
aFlags
)
;
[
noscript
notxpcom
]
imgIContainer_DecodeResult
requestDecodeWithResult
(
in
uint32_t
aFlags
)
;
[
noscript
notxpcom
]
boolean
hasDecodedPixels
(
)
;
void
lockImage
(
)
;
void
unlockImage
(
)
;
void
requestDiscard
(
)
;
imgIRequest
getStaticRequest
(
)
;
void
incrementAnimationConsumers
(
)
;
void
decrementAnimationConsumers
(
)
;
const
uint32_t
CATEGORY_FRAME_INIT
=
1
<
<
0
;
const
uint32_t
CATEGORY_FRAME_STYLE
=
1
<
<
1
;
const
uint32_t
CATEGORY_SIZE_QUERY
=
1
<
<
2
;
const
uint32_t
CATEGORY_DISPLAY
=
1
<
<
3
;
void
boostPriority
(
in
uint32_t
aCategory
)
;
}
;
