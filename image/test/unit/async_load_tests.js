ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
var
server
=
new
HttpServer
(
)
;
server
.
registerDirectory
(
"
/
"
do_get_file
(
'
'
)
)
;
server
.
registerContentType
(
"
sjs
"
"
sjs
"
)
;
server
.
start
(
-
1
)
;
load
(
'
image_load_helpers
.
js
'
)
;
var
requests
=
[
]
;
function
getCloneStopCallback
(
original_listener
)
{
return
function
cloneStop
(
listener
)
{
Assert
.
equal
(
original_listener
.
state
listener
.
state
)
;
Assert
.
notEqual
(
original_listener
listener
)
;
do_test_finished
(
)
;
}
}
function
checkClone
(
other_listener
aRequest
)
{
do_test_pending
(
)
;
var
listener
=
new
ImageListener
(
null
function
(
foo
bar
)
{
do_test_finished
(
)
;
}
)
;
listener
.
synchronous
=
false
;
var
outer
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
.
createScriptedObserver
(
listener
)
;
var
clone
=
aRequest
.
clone
(
outer
)
;
requests
.
push
(
clone
)
;
}
function
checkSizeAndLoad
(
listener
aRequest
)
{
Assert
.
notEqual
(
listener
.
state
&
SIZE_AVAILABLE
0
)
;
Assert
.
notEqual
(
listener
.
state
&
LOAD_COMPLETE
0
)
;
do_test_finished
(
)
;
}
function
secondLoadDone
(
oldlistener
aRequest
)
{
do_test_pending
(
)
;
try
{
var
staticrequest
=
aRequest
.
getStaticRequest
(
)
;
var
listener
=
new
ImageListener
(
null
checkSizeAndLoad
)
;
listener
.
synchronous
=
false
;
var
outer
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
.
createScriptedObserver
(
listener
)
;
var
staticrequestclone
=
staticrequest
.
clone
(
outer
)
;
requests
.
push
(
staticrequestclone
)
;
}
catch
(
e
)
{
do_test_finished
(
)
;
}
run_loadImageWithChannel_tests
(
)
;
do_test_finished
(
)
;
}
function
checkSecondLoad
(
)
{
do_test_pending
(
)
;
var
listener
=
new
ImageListener
(
checkClone
secondLoadDone
)
;
var
outer
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
.
createScriptedObserver
(
listener
)
;
requests
.
push
(
gCurrentLoader
.
loadImageXPCOM
(
uri
null
null
"
default
"
null
null
outer
null
0
null
)
)
;
listener
.
synchronous
=
false
;
}
function
firstLoadDone
(
oldlistener
aRequest
)
{
checkSecondLoad
(
uri
)
;
do_test_finished
(
)
;
}
function
getChannelLoadImageStopCallback
(
streamlistener
next
)
{
return
function
channelLoadStop
(
imglistener
aRequest
)
{
next
(
)
;
do_test_finished
(
)
;
}
}
function
checkSecondChannelLoad
(
)
{
do_test_pending
(
)
;
var
channel
=
NetUtil
.
newChannel
(
{
uri
:
uri
loadUsingSystemPrincipal
:
true
}
)
;
var
channellistener
=
new
ChannelListener
(
)
;
channel
.
asyncOpen2
(
channellistener
)
;
var
listener
=
new
ImageListener
(
null
getChannelLoadImageStopCallback
(
channellistener
all_done_callback
)
)
;
var
outer
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
.
createScriptedObserver
(
listener
)
;
var
outlistener
=
{
}
;
requests
.
push
(
gCurrentLoader
.
loadImageWithChannelXPCOM
(
channel
outer
null
outlistener
)
)
;
channellistener
.
outputListener
=
outlistener
.
value
;
listener
.
synchronous
=
false
;
}
function
run_loadImageWithChannel_tests
(
)
{
gCurrentLoader
=
Cc
[
"
mozilla
.
org
/
image
/
loader
;
1
"
]
.
createInstance
(
Ci
.
imgILoader
)
;
do_test_pending
(
)
;
var
channel
=
NetUtil
.
newChannel
(
{
uri
:
uri
loadUsingSystemPrincipal
:
true
}
)
;
var
channellistener
=
new
ChannelListener
(
)
;
channel
.
asyncOpen2
(
channellistener
)
;
var
listener
=
new
ImageListener
(
null
getChannelLoadImageStopCallback
(
channellistener
checkSecondChannelLoad
)
)
;
var
outer
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
.
createScriptedObserver
(
listener
)
;
var
outlistener
=
{
}
;
requests
.
push
(
gCurrentLoader
.
loadImageWithChannelXPCOM
(
channel
outer
null
outlistener
)
)
;
channellistener
.
outputListener
=
outlistener
.
value
;
listener
.
synchronous
=
false
;
}
function
all_done_callback
(
)
{
server
.
stop
(
function
(
)
{
do_test_finished
(
)
;
}
)
;
}
function
startImageCallback
(
otherCb
)
{
return
function
(
listener
request
)
{
do_test_pending
(
)
;
var
listener2
=
new
ImageListener
(
null
function
(
foo
bar
)
{
do_test_finished
(
)
;
}
)
;
var
outer
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
.
createScriptedObserver
(
listener2
)
;
requests
.
push
(
gCurrentLoader
.
loadImageXPCOM
(
uri
null
null
"
default
"
null
null
outer
null
0
null
)
)
;
listener2
.
synchronous
=
false
;
otherCb
(
listener
request
)
;
}
}
var
gCurrentLoader
;
function
cleanup
(
)
{
for
(
var
i
=
0
;
i
<
requests
.
length
;
+
+
i
)
{
requests
[
i
]
.
cancelAndForgetObserver
(
0
)
;
}
}
function
run_test
(
)
{
registerCleanupFunction
(
cleanup
)
;
gCurrentLoader
=
Cc
[
"
mozilla
.
org
/
image
/
loader
;
1
"
]
.
createInstance
(
Ci
.
imgILoader
)
;
do_test_pending
(
)
;
var
listener
=
new
ImageListener
(
startImageCallback
(
checkClone
)
firstLoadDone
)
;
var
outer
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
.
createScriptedObserver
(
listener
)
;
var
req
=
gCurrentLoader
.
loadImageXPCOM
(
uri
null
null
"
default
"
null
null
outer
null
0
null
)
;
requests
.
push
(
req
)
;
req
.
lockImage
(
)
;
listener
.
synchronous
=
false
;
}
