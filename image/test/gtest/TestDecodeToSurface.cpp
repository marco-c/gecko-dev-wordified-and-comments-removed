#
include
"
gtest
/
gtest
.
h
"
#
include
"
Common
.
h
"
#
include
"
imgIContainer
.
h
"
#
include
"
imgITools
.
h
"
#
include
"
ImageOps
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsThreadUtils
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
image
;
TEST
(
ImageDecodeToSurface
ImageModuleAvailable
)
{
nsCOMPtr
<
imgITools
>
imgTools
=
do_CreateInstance
(
"
mozilla
.
org
/
image
/
tools
;
1
"
)
;
EXPECT_TRUE
(
imgTools
!
=
nullptr
)
;
}
class
DecodeToSurfaceRunnable
:
public
nsRunnable
{
public
:
DecodeToSurfaceRunnable
(
RefPtr
<
SourceSurface
>
&
aSurface
nsIInputStream
*
aInputStream
const
ImageTestCase
&
aTestCase
)
:
mSurface
(
aSurface
)
mInputStream
(
aInputStream
)
mTestCase
(
aTestCase
)
{
}
NS_IMETHOD
Run
(
)
{
Go
(
)
;
return
NS_OK
;
}
void
Go
(
)
{
mSurface
=
ImageOps
:
:
DecodeToSurface
(
mInputStream
nsAutoCString
(
mTestCase
.
mMimeType
)
imgIContainer
:
:
DECODE_FLAGS_DEFAULT
)
;
ASSERT_TRUE
(
mSurface
!
=
nullptr
)
;
EXPECT_EQ
(
SurfaceType
:
:
DATA
mSurface
-
>
GetType
(
)
)
;
EXPECT_TRUE
(
mSurface
-
>
GetFormat
(
)
=
=
SurfaceFormat
:
:
B8G8R8X8
|
|
mSurface
-
>
GetFormat
(
)
=
=
SurfaceFormat
:
:
B8G8R8A8
)
;
EXPECT_EQ
(
mTestCase
.
mSize
mSurface
-
>
GetSize
(
)
)
;
EXPECT_TRUE
(
IsSolidColor
(
mSurface
BGRAColor
:
:
Green
(
)
mTestCase
.
mFlags
&
TEST_CASE_IS_FUZZY
?
1
:
0
)
)
;
}
private
:
RefPtr
<
SourceSurface
>
&
mSurface
;
nsCOMPtr
<
nsIInputStream
>
mInputStream
;
ImageTestCase
mTestCase
;
}
;
static
void
RunDecodeToSurface
(
const
ImageTestCase
&
aTestCase
)
{
nsCOMPtr
<
nsIInputStream
>
inputStream
=
LoadFile
(
aTestCase
.
mPath
)
;
ASSERT_TRUE
(
inputStream
!
=
nullptr
)
;
nsCOMPtr
<
nsIThread
>
thread
;
nsresult
rv
=
NS_NewThread
(
getter_AddRefs
(
thread
)
nullptr
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
RefPtr
<
SourceSurface
>
surface
;
nsCOMPtr
<
nsIRunnable
>
runnable
=
new
DecodeToSurfaceRunnable
(
surface
inputStream
aTestCase
)
;
thread
-
>
Dispatch
(
runnable
nsIThread
:
:
DISPATCH_SYNC
)
;
thread
-
>
Shutdown
(
)
;
surface
=
nullptr
;
}
TEST
(
ImageDecodeToSurface
PNG
)
{
RunDecodeToSurface
(
GreenPNGTestCase
(
)
)
;
}
TEST
(
ImageDecodeToSurface
GIF
)
{
RunDecodeToSurface
(
GreenGIFTestCase
(
)
)
;
}
TEST
(
ImageDecodeToSurface
JPG
)
{
RunDecodeToSurface
(
GreenJPGTestCase
(
)
)
;
}
TEST
(
ImageDecodeToSurface
BMP
)
{
RunDecodeToSurface
(
GreenBMPTestCase
(
)
)
;
}
TEST
(
ImageDecodeToSurface
ICO
)
{
RunDecodeToSurface
(
GreenICOTestCase
(
)
)
;
}
TEST
(
ImageDecodeToSurface
Icon
)
{
RunDecodeToSurface
(
GreenIconTestCase
(
)
)
;
}
TEST
(
ImageDecodeToSurface
AnimatedGIF
)
{
RunDecodeToSurface
(
GreenFirstFrameAnimatedGIFTestCase
(
)
)
;
}
TEST
(
ImageDecodeToSurface
AnimatedPNG
)
{
RunDecodeToSurface
(
GreenFirstFrameAnimatedPNGTestCase
(
)
)
;
}
TEST
(
ImageDecodeToSurface
Corrupt
)
{
ImageTestCase
testCase
=
CorruptTestCase
(
)
;
nsCOMPtr
<
nsIInputStream
>
inputStream
=
LoadFile
(
testCase
.
mPath
)
;
ASSERT_TRUE
(
inputStream
!
=
nullptr
)
;
RefPtr
<
SourceSurface
>
surface
=
ImageOps
:
:
DecodeToSurface
(
inputStream
nsAutoCString
(
testCase
.
mMimeType
)
imgIContainer
:
:
DECODE_FLAGS_DEFAULT
)
;
EXPECT_TRUE
(
surface
=
=
nullptr
)
;
}
