#
ifndef
mozilla_image_test_gtest_Common_h
#
define
mozilla_image_test_gtest_Common_h
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
Decoder
.
h
"
#
include
"
gfxColor
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
SurfacePipe
.
h
"
#
include
"
SurfacePipeFactory
.
h
"
class
nsIInputStream
;
namespace
mozilla
{
namespace
image
{
enum
TestCaseFlags
{
TEST_CASE_DEFAULT_FLAGS
=
0
TEST_CASE_IS_FUZZY
=
1
<
<
0
TEST_CASE_HAS_ERROR
=
1
<
<
1
TEST_CASE_IS_TRANSPARENT
=
1
<
<
2
TEST_CASE_IS_ANIMATED
=
1
<
<
3
}
;
struct
ImageTestCase
{
ImageTestCase
(
const
char
*
aPath
const
char
*
aMimeType
gfx
:
:
IntSize
aSize
uint32_t
aFlags
=
TEST_CASE_DEFAULT_FLAGS
)
:
mPath
(
aPath
)
mMimeType
(
aMimeType
)
mSize
(
aSize
)
mOutputSize
(
aSize
)
mFlags
(
aFlags
)
{
}
ImageTestCase
(
const
char
*
aPath
const
char
*
aMimeType
gfx
:
:
IntSize
aSize
gfx
:
:
IntSize
aOutputSize
uint32_t
aFlags
=
TEST_CASE_DEFAULT_FLAGS
)
:
mPath
(
aPath
)
mMimeType
(
aMimeType
)
mSize
(
aSize
)
mOutputSize
(
aOutputSize
)
mFlags
(
aFlags
)
{
}
const
char
*
mPath
;
const
char
*
mMimeType
;
gfx
:
:
IntSize
mSize
;
gfx
:
:
IntSize
mOutputSize
;
uint32_t
mFlags
;
}
;
struct
BGRAColor
{
BGRAColor
(
uint8_t
aBlue
uint8_t
aGreen
uint8_t
aRed
uint8_t
aAlpha
)
:
mBlue
(
aBlue
)
mGreen
(
aGreen
)
mRed
(
aRed
)
mAlpha
(
aAlpha
)
{
}
static
BGRAColor
Green
(
)
{
return
BGRAColor
(
0x00
0xFF
0x00
0xFF
)
;
}
static
BGRAColor
Red
(
)
{
return
BGRAColor
(
0x00
0x00
0xFF
0xFF
)
;
}
static
BGRAColor
Transparent
(
)
{
return
BGRAColor
(
0x00
0x00
0x00
0x00
)
;
}
uint32_t
AsPixel
(
)
const
{
return
gfxPackedPixel
(
mAlpha
mRed
mGreen
mBlue
)
;
}
uint8_t
mBlue
;
uint8_t
mGreen
;
uint8_t
mRed
;
uint8_t
mAlpha
;
}
;
already_AddRefed
<
nsIInputStream
>
LoadFile
(
const
char
*
aRelativePath
)
;
bool
IsSolidColor
(
gfx
:
:
SourceSurface
*
aSurface
BGRAColor
aColor
uint8_t
aFuzz
=
0
)
;
bool
RowsAreSolidColor
(
gfx
:
:
SourceSurface
*
aSurface
int32_t
aStartRow
int32_t
aRowCount
BGRAColor
aColor
uint8_t
aFuzz
=
0
)
;
bool
RectIsSolidColor
(
gfx
:
:
SourceSurface
*
aSurface
const
gfx
:
:
IntRect
&
aRect
BGRAColor
aColor
uint8_t
aFuzz
=
0
)
;
already_AddRefed
<
Decoder
>
CreateTrivialDecoder
(
)
;
template
<
typename
Func
typename
.
.
.
Configs
>
void
WithFilterPipeline
(
Decoder
*
aDecoder
Func
aFunc
Configs
.
.
.
aConfigs
)
{
auto
pipe
=
MakeUnique
<
typename
detail
:
:
FilterPipeline
<
Configs
.
.
.
>
:
:
Type
>
(
)
;
nsresult
rv
=
pipe
-
>
Configure
(
aConfigs
.
.
.
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
aFunc
(
aDecoder
pipe
.
get
(
)
)
;
RawAccessFrameRef
currentFrame
=
aDecoder
-
>
GetCurrentFrameRef
(
)
;
if
(
currentFrame
)
{
currentFrame
-
>
Finish
(
)
;
}
}
template
<
typename
.
.
.
Configs
>
void
AssertConfiguringPipelineFails
(
Decoder
*
aDecoder
Configs
.
.
.
aConfigs
)
{
auto
pipe
=
MakeUnique
<
typename
detail
:
:
FilterPipeline
<
Configs
.
.
.
>
:
:
Type
>
(
)
;
nsresult
rv
=
pipe
-
>
Configure
(
aConfigs
.
.
.
)
;
ASSERT_TRUE
(
NS_FAILED
(
rv
)
)
;
RawAccessFrameRef
currentFrame
=
aDecoder
-
>
GetCurrentFrameRef
(
)
;
if
(
currentFrame
)
{
currentFrame
-
>
Finish
(
)
;
}
}
void
AssertCorrectPipelineFinalState
(
SurfaceFilter
*
aFilter
const
gfx
:
:
IntRect
&
aInputSpaceRect
const
gfx
:
:
IntRect
&
aOutputSpaceRect
)
;
void
CheckGeneratedImage
(
Decoder
*
aDecoder
const
gfx
:
:
IntRect
&
aRect
uint8_t
aFuzz
=
0
)
;
void
CheckWritePixels
(
Decoder
*
aDecoder
SurfaceFilter
*
aFilter
Maybe
<
gfx
:
:
IntRect
>
aOutputRect
=
Nothing
(
)
Maybe
<
gfx
:
:
IntRect
>
aInputRect
=
Nothing
(
)
Maybe
<
gfx
:
:
IntRect
>
aInputWriteRect
=
Nothing
(
)
Maybe
<
gfx
:
:
IntRect
>
aOutputWriteRect
=
Nothing
(
)
uint8_t
aFuzz
=
0
)
;
void
CheckWriteRows
(
Decoder
*
aDecoder
SurfaceFilter
*
aFilter
Maybe
<
gfx
:
:
IntRect
>
aOutputRect
=
Nothing
(
)
Maybe
<
gfx
:
:
IntRect
>
aInputRect
=
Nothing
(
)
Maybe
<
gfx
:
:
IntRect
>
aInputWriteRect
=
Nothing
(
)
Maybe
<
gfx
:
:
IntRect
>
aOutputWriteRect
=
Nothing
(
)
uint8_t
aFuzz
=
0
)
;
void
CheckPalettedWritePixels
(
Decoder
*
aDecoder
SurfaceFilter
*
aFilter
Maybe
<
gfx
:
:
IntRect
>
aOutputRect
=
Nothing
(
)
Maybe
<
gfx
:
:
IntRect
>
aInputRect
=
Nothing
(
)
Maybe
<
gfx
:
:
IntRect
>
aInputWriteRect
=
Nothing
(
)
Maybe
<
gfx
:
:
IntRect
>
aOutputWriteRect
=
Nothing
(
)
uint8_t
aFuzz
=
0
)
;
void
CheckPalettedWriteRows
(
Decoder
*
aDecoder
SurfaceFilter
*
aFilter
Maybe
<
gfx
:
:
IntRect
>
aOutputRect
=
Nothing
(
)
Maybe
<
gfx
:
:
IntRect
>
aInputRect
=
Nothing
(
)
Maybe
<
gfx
:
:
IntRect
>
aInputWriteRect
=
Nothing
(
)
Maybe
<
gfx
:
:
IntRect
>
aOutputWriteRect
=
Nothing
(
)
uint8_t
aFuzz
=
0
)
;
ImageTestCase
GreenPNGTestCase
(
)
;
ImageTestCase
GreenGIFTestCase
(
)
;
ImageTestCase
GreenJPGTestCase
(
)
;
ImageTestCase
GreenBMPTestCase
(
)
;
ImageTestCase
GreenICOTestCase
(
)
;
ImageTestCase
GreenIconTestCase
(
)
;
ImageTestCase
GreenFirstFrameAnimatedGIFTestCase
(
)
;
ImageTestCase
GreenFirstFrameAnimatedPNGTestCase
(
)
;
ImageTestCase
CorruptTestCase
(
)
;
ImageTestCase
TransparentPNGTestCase
(
)
;
ImageTestCase
TransparentGIFTestCase
(
)
;
ImageTestCase
FirstFramePaddingGIFTestCase
(
)
;
ImageTestCase
NoFrameDelayGIFTestCase
(
)
;
ImageTestCase
TransparentBMPWhenBMPAlphaEnabledTestCase
(
)
;
ImageTestCase
RLE4BMPTestCase
(
)
;
ImageTestCase
RLE8BMPTestCase
(
)
;
ImageTestCase
DownscaledPNGTestCase
(
)
;
ImageTestCase
DownscaledGIFTestCase
(
)
;
ImageTestCase
DownscaledJPGTestCase
(
)
;
ImageTestCase
DownscaledBMPTestCase
(
)
;
ImageTestCase
DownscaledICOTestCase
(
)
;
ImageTestCase
DownscaledIconTestCase
(
)
;
}
}
#
endif
