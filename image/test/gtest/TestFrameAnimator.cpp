#
include
"
gtest
/
gtest
.
h
"
#
include
"
Common
.
h
"
#
include
"
AnimationSurfaceProvider
.
h
"
#
include
"
Decoder
.
h
"
#
include
"
RasterImage
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
image
;
static
void
CheckFrameAnimatorBlendResults
(
const
ImageTestCase
&
aTestCase
RasterImage
*
aImage
)
{
aImage
-
>
IncrementAnimationConsumers
(
)
;
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
aImage
-
>
RequestRefresh
(
now
)
;
RefPtr
<
SourceSurface
>
surface
=
aImage
-
>
GetFrame
(
imgIContainer
:
:
FRAME_CURRENT
imgIContainer
:
:
FLAG_NONE
)
;
ASSERT_TRUE
(
surface
!
=
nullptr
)
;
CheckGeneratedSurface
(
surface
IntRect
(
0
0
50
50
)
BGRAColor
:
:
Transparent
(
)
BGRAColor
:
:
Red
(
)
)
;
now
=
TimeStamp
:
:
Now
(
)
+
TimeDuration
:
:
FromMilliseconds
(
500
)
;
aImage
-
>
RequestRefresh
(
now
)
;
surface
=
aImage
-
>
GetFrame
(
imgIContainer
:
:
FRAME_CURRENT
imgIContainer
:
:
FLAG_NONE
)
;
ASSERT_TRUE
(
surface
!
=
nullptr
)
;
CheckGeneratedSurface
(
surface
IntRect
(
0
0
50
50
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
)
;
}
template
<
typename
Func
>
static
void
WithFrameAnimatorDecode
(
const
ImageTestCase
&
aTestCase
bool
aBlendFilter
Func
aResultChecker
)
{
RefPtr
<
Image
>
image
=
ImageFactory
:
:
CreateAnonymousImage
(
nsDependentCString
(
aTestCase
.
mMimeType
)
)
;
ASSERT_TRUE
(
!
image
-
>
HasError
(
)
)
;
NotNull
<
RefPtr
<
RasterImage
>
>
rasterImage
=
WrapNotNull
(
static_cast
<
RasterImage
*
>
(
image
.
get
(
)
)
)
;
nsCOMPtr
<
nsIInputStream
>
inputStream
=
LoadFile
(
aTestCase
.
mPath
)
;
ASSERT_TRUE
(
inputStream
!
=
nullptr
)
;
uint64_t
length
;
nsresult
rv
=
inputStream
-
>
Available
(
&
length
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
NotNull
<
RefPtr
<
SourceBuffer
>
>
sourceBuffer
=
WrapNotNull
(
new
SourceBuffer
(
)
)
;
sourceBuffer
-
>
ExpectLength
(
length
)
;
rv
=
sourceBuffer
-
>
AppendFromInputStream
(
inputStream
length
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
sourceBuffer
-
>
Complete
(
NS_OK
)
;
DecoderType
decoderType
=
DecoderFactory
:
:
GetDecoderType
(
aTestCase
.
mMimeType
)
;
RefPtr
<
IDecodingTask
>
task
=
DecoderFactory
:
:
CreateMetadataDecoder
(
decoderType
rasterImage
sourceBuffer
)
;
ASSERT_TRUE
(
task
!
=
nullptr
)
;
task
-
>
Run
(
)
;
task
=
nullptr
;
DecoderFlags
decoderFlags
=
DefaultDecoderFlags
(
)
;
if
(
aBlendFilter
)
{
decoderFlags
|
=
DecoderFlags
:
:
BLEND_ANIMATION
;
}
SurfaceFlags
surfaceFlags
=
DefaultSurfaceFlags
(
)
;
rv
=
DecoderFactory
:
:
CreateAnimationDecoder
(
decoderType
rasterImage
sourceBuffer
aTestCase
.
mSize
decoderFlags
surfaceFlags
0
getter_AddRefs
(
task
)
)
;
EXPECT_EQ
(
rv
NS_OK
)
;
ASSERT_TRUE
(
task
!
=
nullptr
)
;
task
-
>
Run
(
)
;
aResultChecker
(
rasterImage
.
get
(
)
)
;
}
static
void
CheckFrameAnimatorBlend
(
const
ImageTestCase
&
aTestCase
bool
aBlendFilter
)
{
WithFrameAnimatorDecode
(
aTestCase
aBlendFilter
[
&
]
(
RasterImage
*
aImage
)
{
CheckFrameAnimatorBlendResults
(
aTestCase
aImage
)
;
}
)
;
}
class
ImageFrameAnimator
:
public
:
:
testing
:
:
Test
{
protected
:
AutoInitializeImageLib
mInit
;
}
;
TEST_F
(
ImageFrameAnimator
BlendGIFWithAnimator
)
{
CheckFrameAnimatorBlend
(
BlendAnimatedGIFTestCase
(
)
false
)
;
}
TEST_F
(
ImageFrameAnimator
BlendGIFWithFilter
)
{
CheckFrameAnimatorBlend
(
BlendAnimatedGIFTestCase
(
)
true
)
;
}
TEST_F
(
ImageFrameAnimator
BlendPNGWithAnimator
)
{
CheckFrameAnimatorBlend
(
BlendAnimatedPNGTestCase
(
)
false
)
;
}
TEST_F
(
ImageFrameAnimator
BlendPNGWithFilter
)
{
CheckFrameAnimatorBlend
(
BlendAnimatedPNGTestCase
(
)
true
)
;
}
TEST_F
(
ImageFrameAnimator
BlendWebPWithAnimator
)
{
CheckFrameAnimatorBlend
(
BlendAnimatedWebPTestCase
(
)
false
)
;
}
TEST_F
(
ImageFrameAnimator
BlendWebPWithFilter
)
{
CheckFrameAnimatorBlend
(
BlendAnimatedWebPTestCase
(
)
true
)
;
}
