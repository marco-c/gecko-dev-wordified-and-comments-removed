#
include
"
gtest
/
gtest
.
h
"
#
include
"
CopyOnWrite
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
image
;
struct
ValueStats
{
int32_t
mCopies
=
0
;
int32_t
mFrees
=
0
;
int32_t
mCalls
=
0
;
int32_t
mConstCalls
=
0
;
int32_t
mSerial
=
0
;
}
;
struct
Value
{
NS_INLINE_DECL_REFCOUNTING
(
Value
)
explicit
Value
(
ValueStats
&
aStats
)
:
mStats
(
aStats
)
mSerial
(
mStats
.
mSerial
+
+
)
{
}
Value
(
const
Value
&
aOther
)
:
mStats
(
aOther
.
mStats
)
mSerial
(
mStats
.
mSerial
+
+
)
{
mStats
.
mCopies
+
+
;
}
void
Go
(
)
{
mStats
.
mCalls
+
+
;
}
void
Go
(
)
const
{
mStats
.
mConstCalls
+
+
;
}
int32_t
Serial
(
)
const
{
return
mSerial
;
}
protected
:
~
Value
(
)
{
mStats
.
mFrees
+
+
;
}
private
:
ValueStats
&
mStats
;
int32_t
mSerial
;
}
;
TEST
(
ImageCopyOnWrite
Read
)
{
ValueStats
stats
;
{
CopyOnWrite
<
Value
>
cow
(
new
Value
(
stats
)
)
;
EXPECT_EQ
(
0
stats
.
mCopies
)
;
EXPECT_EQ
(
0
stats
.
mFrees
)
;
EXPECT_TRUE
(
cow
.
CanRead
(
)
)
;
cow
.
Read
(
[
&
]
(
const
Value
*
aValue
)
{
EXPECT_EQ
(
0
stats
.
mCopies
)
;
EXPECT_EQ
(
0
stats
.
mFrees
)
;
EXPECT_EQ
(
0
aValue
-
>
Serial
(
)
)
;
EXPECT_TRUE
(
cow
.
CanRead
(
)
)
;
EXPECT_TRUE
(
cow
.
CanWrite
(
)
)
;
aValue
-
>
Go
(
)
;
EXPECT_EQ
(
0
stats
.
mCalls
)
;
EXPECT_EQ
(
1
stats
.
mConstCalls
)
;
}
)
;
EXPECT_EQ
(
0
stats
.
mCopies
)
;
EXPECT_EQ
(
0
stats
.
mFrees
)
;
EXPECT_EQ
(
0
stats
.
mCalls
)
;
EXPECT_EQ
(
1
stats
.
mConstCalls
)
;
}
EXPECT_EQ
(
0
stats
.
mCopies
)
;
EXPECT_EQ
(
1
stats
.
mFrees
)
;
}
TEST
(
ImageCopyOnWrite
RecursiveRead
)
{
ValueStats
stats
;
{
CopyOnWrite
<
Value
>
cow
(
new
Value
(
stats
)
)
;
EXPECT_EQ
(
0
stats
.
mCopies
)
;
EXPECT_EQ
(
0
stats
.
mFrees
)
;
EXPECT_TRUE
(
cow
.
CanRead
(
)
)
;
cow
.
Read
(
[
&
]
(
const
Value
*
aValue
)
{
EXPECT_EQ
(
0
stats
.
mCopies
)
;
EXPECT_EQ
(
0
stats
.
mFrees
)
;
EXPECT_EQ
(
0
aValue
-
>
Serial
(
)
)
;
EXPECT_TRUE
(
cow
.
CanRead
(
)
)
;
EXPECT_TRUE
(
cow
.
CanWrite
(
)
)
;
cow
.
Read
(
[
&
]
(
const
Value
*
aValue
)
{
EXPECT_EQ
(
0
stats
.
mCopies
)
;
EXPECT_EQ
(
0
stats
.
mFrees
)
;
EXPECT_EQ
(
0
aValue
-
>
Serial
(
)
)
;
EXPECT_TRUE
(
cow
.
CanRead
(
)
)
;
EXPECT_TRUE
(
cow
.
CanWrite
(
)
)
;
aValue
-
>
Go
(
)
;
EXPECT_EQ
(
0
stats
.
mCalls
)
;
EXPECT_EQ
(
1
stats
.
mConstCalls
)
;
}
[
]
(
)
{
EXPECT_TRUE
(
false
)
;
}
)
;
}
)
;
EXPECT_EQ
(
0
stats
.
mCopies
)
;
EXPECT_EQ
(
0
stats
.
mFrees
)
;
EXPECT_EQ
(
0
stats
.
mCalls
)
;
EXPECT_EQ
(
1
stats
.
mConstCalls
)
;
}
EXPECT_EQ
(
0
stats
.
mCopies
)
;
EXPECT_EQ
(
1
stats
.
mFrees
)
;
}
TEST
(
ImageCopyOnWrite
Write
)
{
ValueStats
stats
;
{
CopyOnWrite
<
Value
>
cow
(
new
Value
(
stats
)
)
;
EXPECT_EQ
(
0
stats
.
mCopies
)
;
EXPECT_EQ
(
0
stats
.
mFrees
)
;
EXPECT_TRUE
(
cow
.
CanRead
(
)
)
;
EXPECT_TRUE
(
cow
.
CanWrite
(
)
)
;
cow
.
Write
(
[
&
]
(
Value
*
aValue
)
{
EXPECT_EQ
(
0
stats
.
mCopies
)
;
EXPECT_EQ
(
0
stats
.
mFrees
)
;
EXPECT_EQ
(
0
aValue
-
>
Serial
(
)
)
;
EXPECT_TRUE
(
!
cow
.
CanRead
(
)
)
;
EXPECT_TRUE
(
!
cow
.
CanWrite
(
)
)
;
aValue
-
>
Go
(
)
;
EXPECT_EQ
(
1
stats
.
mCalls
)
;
EXPECT_EQ
(
0
stats
.
mConstCalls
)
;
}
)
;
EXPECT_EQ
(
0
stats
.
mCopies
)
;
EXPECT_EQ
(
0
stats
.
mFrees
)
;
EXPECT_EQ
(
1
stats
.
mCalls
)
;
EXPECT_EQ
(
0
stats
.
mConstCalls
)
;
}
EXPECT_EQ
(
0
stats
.
mCopies
)
;
EXPECT_EQ
(
1
stats
.
mFrees
)
;
}
TEST
(
ImageCopyOnWrite
WriteRecursive
)
{
ValueStats
stats
;
{
CopyOnWrite
<
Value
>
cow
(
new
Value
(
stats
)
)
;
EXPECT_EQ
(
0
stats
.
mCopies
)
;
EXPECT_EQ
(
0
stats
.
mFrees
)
;
EXPECT_TRUE
(
cow
.
CanRead
(
)
)
;
EXPECT_TRUE
(
cow
.
CanWrite
(
)
)
;
cow
.
Read
(
[
&
]
(
const
Value
*
aValue
)
{
EXPECT_EQ
(
0
stats
.
mCopies
)
;
EXPECT_EQ
(
0
stats
.
mFrees
)
;
EXPECT_EQ
(
0
aValue
-
>
Serial
(
)
)
;
EXPECT_TRUE
(
cow
.
CanRead
(
)
)
;
EXPECT_TRUE
(
cow
.
CanWrite
(
)
)
;
cow
.
Write
(
[
&
]
(
Value
*
aValue
)
{
EXPECT_EQ
(
1
stats
.
mCopies
)
;
EXPECT_EQ
(
0
stats
.
mFrees
)
;
EXPECT_EQ
(
1
aValue
-
>
Serial
(
)
)
;
EXPECT_TRUE
(
!
cow
.
CanRead
(
)
)
;
EXPECT_TRUE
(
!
cow
.
CanWrite
(
)
)
;
aValue
-
>
Go
(
)
;
EXPECT_EQ
(
1
stats
.
mCalls
)
;
EXPECT_EQ
(
0
stats
.
mConstCalls
)
;
cow
.
Read
(
[
]
(
const
Value
*
aValue
)
{
EXPECT_TRUE
(
false
)
;
}
[
]
(
)
{
EXPECT_TRUE
(
true
)
;
}
)
;
cow
.
Write
(
[
]
(
Value
*
aValue
)
{
EXPECT_TRUE
(
false
)
;
}
[
]
(
)
{
EXPECT_TRUE
(
true
)
;
}
)
;
}
[
]
(
)
{
EXPECT_TRUE
(
false
)
;
}
)
;
aValue
-
>
Go
(
)
;
EXPECT_EQ
(
1
stats
.
mCopies
)
;
EXPECT_EQ
(
0
stats
.
mFrees
)
;
EXPECT_EQ
(
1
stats
.
mCalls
)
;
EXPECT_EQ
(
1
stats
.
mConstCalls
)
;
}
)
;
EXPECT_EQ
(
1
stats
.
mCopies
)
;
EXPECT_EQ
(
1
stats
.
mFrees
)
;
EXPECT_EQ
(
1
stats
.
mCalls
)
;
EXPECT_EQ
(
1
stats
.
mConstCalls
)
;
}
EXPECT_EQ
(
1
stats
.
mCopies
)
;
EXPECT_EQ
(
2
stats
.
mFrees
)
;
}
