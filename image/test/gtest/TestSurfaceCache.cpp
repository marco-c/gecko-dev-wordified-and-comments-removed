#
include
"
gtest
/
gtest
.
h
"
#
include
"
Common
.
h
"
#
include
"
imgIContainer
.
h
"
#
include
"
imgITools
.
h
"
#
include
"
ImageFactory
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsString
.
h
"
#
include
"
ProgressTracker
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
image
;
class
ImageSurfaceCache
:
public
:
:
testing
:
:
Test
{
protected
:
AutoInitializeImageLib
mInit
;
}
;
TEST_F
(
ImageSurfaceCache
Factor2
)
{
ImageTestCase
testCase
=
GreenPNGTestCase
(
)
;
RefPtr
<
Image
>
image
=
ImageFactory
:
:
CreateAnonymousImage
(
nsDependentCString
(
testCase
.
mMimeType
)
)
;
ASSERT_TRUE
(
!
image
-
>
HasError
(
)
)
;
nsCOMPtr
<
nsIInputStream
>
inputStream
=
LoadFile
(
testCase
.
mPath
)
;
ASSERT_TRUE
(
inputStream
)
;
uint64_t
length
;
nsresult
rv
=
inputStream
-
>
Available
(
&
length
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
ASSERT_LT
(
length
static_cast
<
uint64_t
>
(
gfxPrefs
:
:
ImageMemDecodeBytesAtATime
(
)
)
)
;
rv
=
image
-
>
OnImageDataAvailable
(
nullptr
nullptr
inputStream
0
static_cast
<
uint32_t
>
(
length
)
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
image
-
>
OnImageDataComplete
(
nullptr
nullptr
NS_OK
true
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
RefPtr
<
ProgressTracker
>
tracker
=
image
-
>
GetProgressTracker
(
)
;
tracker
-
>
SyncNotifyProgress
(
FLAG_LOAD_COMPLETE
)
;
const
uint32_t
whichFrame
=
imgIContainer
:
:
FRAME_CURRENT
;
const
uint32_t
exactFlags
=
imgIContainer
:
:
FLAG_HIGH_QUALITY_SCALING
|
imgIContainer
:
:
FLAG_SYNC_DECODE
;
const
uint32_t
bestMatchFlags
=
imgIContainer
:
:
FLAG_HIGH_QUALITY_SCALING
|
imgIContainer
:
:
FLAG_SYNC_DECODE_IF_FAST
;
int32_t
threshold
=
gfxPrefs
:
:
ImageCacheFactor2ThresholdSurfaces
(
)
;
ASSERT_TRUE
(
threshold
>
=
0
)
;
size_t
nativeSizes
=
image
-
>
GetNativeSizesLength
(
)
;
ASSERT_EQ
(
nativeSizes
1u
)
;
int32_t
totalThreshold
=
static_cast
<
int32_t
>
(
nativeSizes
)
+
threshold
;
ASSERT_TRUE
(
testCase
.
mSize
.
width
>
totalThreshold
*
4
)
;
IntSize
size
=
testCase
.
mSize
;
for
(
int32_t
i
=
0
;
i
<
=
totalThreshold
;
+
+
i
)
{
RefPtr
<
SourceSurface
>
surf
=
image
-
>
GetFrameAtSize
(
size
whichFrame
bestMatchFlags
)
;
ASSERT_TRUE
(
surf
)
;
EXPECT_EQ
(
surf
-
>
GetSize
(
)
size
)
;
size
.
width
-
=
1
;
size
.
height
-
=
1
;
}
RefPtr
<
SourceSurface
>
surf
=
image
-
>
GetFrameAtSize
(
size
whichFrame
bestMatchFlags
)
;
ASSERT_TRUE
(
surf
)
;
EXPECT_EQ
(
surf
-
>
GetSize
(
)
testCase
.
mSize
)
;
size
=
testCase
.
mSize
;
for
(
int32_t
i
=
0
;
i
<
totalThreshold
;
+
+
i
)
{
RefPtr
<
SourceSurface
>
surf
=
image
-
>
GetFrameAtSize
(
size
whichFrame
bestMatchFlags
)
;
ASSERT_TRUE
(
surf
)
;
EXPECT_EQ
(
surf
-
>
GetSize
(
)
size
)
;
size
.
width
-
=
1
;
size
.
height
-
=
1
;
}
size
.
width
+
=
1
;
size
.
height
+
=
1
;
surf
=
image
-
>
GetFrameAtSize
(
size
whichFrame
exactFlags
)
;
ASSERT_TRUE
(
surf
)
;
EXPECT_EQ
(
surf
-
>
GetSize
(
)
size
)
;
size
.
width
=
testCase
.
mSize
.
width
/
2
-
1
;
size
.
height
=
testCase
.
mSize
.
height
/
2
-
1
;
surf
=
image
-
>
GetFrameAtSize
(
size
whichFrame
bestMatchFlags
)
;
ASSERT_TRUE
(
surf
)
;
EXPECT_EQ
(
surf
-
>
GetSize
(
)
.
width
testCase
.
mSize
.
width
/
2
)
;
EXPECT_EQ
(
surf
-
>
GetSize
(
)
.
height
testCase
.
mSize
.
height
/
2
)
;
size
=
testCase
.
mSize
;
for
(
int32_t
i
=
0
;
i
<
totalThreshold
-
1
;
+
+
i
)
{
RefPtr
<
SourceSurface
>
surf
=
image
-
>
GetFrameAtSize
(
size
whichFrame
bestMatchFlags
)
;
ASSERT_TRUE
(
surf
)
;
EXPECT_EQ
(
surf
-
>
GetSize
(
)
testCase
.
mSize
)
;
size
.
width
-
=
1
;
size
.
height
-
=
1
;
}
surf
=
image
-
>
GetFrameAtSize
(
size
whichFrame
bestMatchFlags
)
;
ASSERT_TRUE
(
surf
)
;
EXPECT_EQ
(
surf
-
>
GetSize
(
)
size
)
;
}
