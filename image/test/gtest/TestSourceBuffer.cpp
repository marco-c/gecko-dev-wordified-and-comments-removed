#
include
"
gtest
/
gtest
.
h
"
#
include
<
algorithm
>
#
include
<
cstdint
>
#
include
"
Common
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
SourceBuffer
.
h
"
#
include
"
SurfaceCache
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
image
;
using
std
:
:
min
;
void
ExpectChunkAndByteCount
(
const
SourceBufferIterator
&
aIterator
uint32_t
aChunks
size_t
aBytes
)
{
EXPECT_EQ
(
aChunks
aIterator
.
ChunkCount
(
)
)
;
EXPECT_EQ
(
aBytes
aIterator
.
ByteCount
(
)
)
;
}
void
ExpectRemainingBytes
(
const
SourceBufferIterator
&
aIterator
size_t
aBytes
)
{
EXPECT_TRUE
(
aIterator
.
RemainingBytesIsNoMoreThan
(
aBytes
)
)
;
EXPECT_TRUE
(
aIterator
.
RemainingBytesIsNoMoreThan
(
aBytes
+
1
)
)
;
if
(
aBytes
>
0
)
{
EXPECT_FALSE
(
aIterator
.
RemainingBytesIsNoMoreThan
(
0
)
)
;
EXPECT_FALSE
(
aIterator
.
RemainingBytesIsNoMoreThan
(
aBytes
-
1
)
)
;
}
}
char
GenerateByte
(
size_t
aIndex
)
{
uint8_t
byte
=
aIndex
%
256
;
return
*
reinterpret_cast
<
char
*
>
(
&
byte
)
;
}
void
GenerateData
(
char
*
aOutput
size_t
aOffset
size_t
aLength
)
{
for
(
size_t
i
=
0
;
i
<
aLength
;
+
+
i
)
{
aOutput
[
i
]
=
GenerateByte
(
aOffset
+
i
)
;
}
}
void
GenerateData
(
char
*
aOutput
size_t
aLength
)
{
GenerateData
(
aOutput
0
aLength
)
;
}
void
CheckData
(
const
char
*
aData
size_t
aOffset
size_t
aLength
)
{
for
(
size_t
i
=
0
;
i
<
aLength
;
+
+
i
)
{
ASSERT_EQ
(
GenerateByte
(
aOffset
+
i
)
aData
[
i
]
)
;
}
}
enum
class
AdvanceMode
{
eAdvanceAsMuchAsPossible
eAdvanceByLengthExactly
}
;
class
ImageSourceBuffer
:
public
:
:
testing
:
:
Test
{
public
:
ImageSourceBuffer
(
)
:
mSourceBuffer
(
new
SourceBuffer
)
mExpectNoResume
(
new
ExpectNoResume
)
mCountResumes
(
new
CountResumes
)
{
GenerateData
(
mData
sizeof
(
mData
)
)
;
EXPECT_FALSE
(
mSourceBuffer
-
>
IsComplete
(
)
)
;
}
protected
:
void
CheckedAppendToBuffer
(
const
char
*
aData
size_t
aLength
)
{
EXPECT_TRUE
(
NS_SUCCEEDED
(
mSourceBuffer
-
>
Append
(
aData
aLength
)
)
)
;
}
void
CheckedAppendToBufferLastByteForLength
(
size_t
aLength
)
{
const
char
lastByte
=
GenerateByte
(
aLength
)
;
CheckedAppendToBuffer
(
&
lastByte
1
)
;
}
void
CheckedAppendToBufferInChunks
(
size_t
aChunkLength
size_t
aTotalLength
)
{
char
*
data
=
new
char
[
aChunkLength
]
;
size_t
bytesWritten
=
0
;
while
(
bytesWritten
<
aTotalLength
)
{
GenerateData
(
data
bytesWritten
aChunkLength
)
;
size_t
toWrite
=
min
(
aChunkLength
aTotalLength
-
bytesWritten
)
;
CheckedAppendToBuffer
(
data
toWrite
)
;
bytesWritten
+
=
toWrite
;
}
delete
[
]
data
;
}
void
CheckedCompleteBuffer
(
nsresult
aCompletionStatus
=
NS_OK
)
{
mSourceBuffer
-
>
Complete
(
aCompletionStatus
)
;
EXPECT_TRUE
(
mSourceBuffer
-
>
IsComplete
(
)
)
;
}
void
CheckedCompleteBuffer
(
SourceBufferIterator
&
aIterator
size_t
aLength
nsresult
aCompletionStatus
=
NS_OK
)
{
CheckedCompleteBuffer
(
aCompletionStatus
)
;
ExpectRemainingBytes
(
aIterator
aLength
)
;
}
void
CheckedAdvanceIteratorStateOnly
(
SourceBufferIterator
&
aIterator
size_t
aLength
uint32_t
aChunks
size_t
aTotalLength
AdvanceMode
aAdvanceMode
=
AdvanceMode
:
:
eAdvanceAsMuchAsPossible
)
{
const
size_t
advanceBy
=
aAdvanceMode
=
=
AdvanceMode
:
:
eAdvanceAsMuchAsPossible
?
SIZE_MAX
:
aLength
;
auto
state
=
aIterator
.
AdvanceOrScheduleResume
(
advanceBy
mExpectNoResume
)
;
ASSERT_EQ
(
SourceBufferIterator
:
:
READY
state
)
;
EXPECT_TRUE
(
aIterator
.
Data
(
)
)
;
EXPECT_EQ
(
aLength
aIterator
.
Length
(
)
)
;
ExpectChunkAndByteCount
(
aIterator
aChunks
aTotalLength
)
;
}
void
CheckedAdvanceIteratorStateOnly
(
SourceBufferIterator
&
aIterator
size_t
aLength
)
{
CheckedAdvanceIteratorStateOnly
(
aIterator
aLength
1
aLength
)
;
}
void
CheckedAdvanceIterator
(
SourceBufferIterator
&
aIterator
size_t
aLength
uint32_t
aChunks
size_t
aTotalLength
AdvanceMode
aAdvanceMode
=
AdvanceMode
:
:
eAdvanceAsMuchAsPossible
)
{
CheckedAdvanceIteratorStateOnly
(
aIterator
aLength
aChunks
aTotalLength
aAdvanceMode
)
;
const
size_t
offset
=
aIterator
.
ByteCount
(
)
-
aIterator
.
Length
(
)
;
CheckData
(
aIterator
.
Data
(
)
offset
aIterator
.
Length
(
)
)
;
}
void
CheckedAdvanceIterator
(
SourceBufferIterator
&
aIterator
size_t
aLength
)
{
CheckedAdvanceIterator
(
aIterator
aLength
1
aLength
)
;
}
void
CheckIteratorMustWait
(
SourceBufferIterator
&
aIterator
IResumable
*
aOnResume
)
{
auto
state
=
aIterator
.
AdvanceOrScheduleResume
(
1
aOnResume
)
;
EXPECT_EQ
(
SourceBufferIterator
:
:
WAITING
state
)
;
}
void
CheckIteratorIsComplete
(
SourceBufferIterator
&
aIterator
uint32_t
aChunks
size_t
aTotalLength
nsresult
aCompletionStatus
=
NS_OK
)
{
ASSERT_TRUE
(
mSourceBuffer
-
>
IsComplete
(
)
)
;
auto
state
=
aIterator
.
AdvanceOrScheduleResume
(
1
mExpectNoResume
)
;
ASSERT_EQ
(
SourceBufferIterator
:
:
COMPLETE
state
)
;
EXPECT_EQ
(
aCompletionStatus
aIterator
.
CompletionStatus
(
)
)
;
ExpectRemainingBytes
(
aIterator
0
)
;
ExpectChunkAndByteCount
(
aIterator
aChunks
aTotalLength
)
;
}
void
CheckIteratorIsComplete
(
SourceBufferIterator
&
aIterator
size_t
aTotalLength
)
{
CheckIteratorIsComplete
(
aIterator
1
aTotalLength
)
;
}
AutoInitializeImageLib
mInit
;
char
mData
[
9
]
;
RefPtr
<
SourceBuffer
>
mSourceBuffer
;
RefPtr
<
ExpectNoResume
>
mExpectNoResume
;
RefPtr
<
CountResumes
>
mCountResumes
;
}
;
TEST_F
(
ImageSourceBuffer
InitialState
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
EXPECT_FALSE
(
iterator
.
RemainingBytesIsNoMoreThan
(
0
)
)
;
EXPECT_FALSE
(
iterator
.
RemainingBytesIsNoMoreThan
(
SIZE_MAX
)
)
;
ExpectChunkAndByteCount
(
iterator
0
0
)
;
CheckIteratorMustWait
(
iterator
mExpectNoResume
)
;
}
TEST_F
(
ImageSourceBuffer
ZeroLengthBufferAlwaysFails
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckedCompleteBuffer
(
iterator
0
)
;
CheckIteratorIsComplete
(
iterator
0
0
NS_ERROR_FAILURE
)
;
}
TEST_F
(
ImageSourceBuffer
CompleteSuccess
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckedAppendToBuffer
(
mData
1
)
;
CheckedCompleteBuffer
(
iterator
1
)
;
CheckedAdvanceIterator
(
iterator
1
)
;
CheckIteratorIsComplete
(
iterator
1
)
;
}
TEST_F
(
ImageSourceBuffer
CompleteFailure
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckedAppendToBuffer
(
mData
1
)
;
CheckedCompleteBuffer
(
iterator
1
NS_ERROR_FAILURE
)
;
CheckIteratorIsComplete
(
iterator
0
0
NS_ERROR_FAILURE
)
;
}
TEST_F
(
ImageSourceBuffer
Append
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
mSourceBuffer
-
>
ExpectLength
(
sizeof
(
mData
)
)
)
)
;
CheckedAppendToBuffer
(
mData
sizeof
(
mData
)
)
;
CheckedCompleteBuffer
(
iterator
sizeof
(
mData
)
)
;
CheckedAdvanceIterator
(
iterator
sizeof
(
mData
)
)
;
CheckIteratorIsComplete
(
iterator
sizeof
(
mData
)
)
;
}
TEST_F
(
ImageSourceBuffer
HugeAppendFails
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
ASSERT_LT
(
SurfaceCache
:
:
MaximumCapacity
(
)
SIZE_MAX
)
;
const
size_t
hugeSize
=
SurfaceCache
:
:
MaximumCapacity
(
)
+
1
;
EXPECT_TRUE
(
NS_FAILED
(
mSourceBuffer
-
>
Append
(
mData
hugeSize
)
)
)
;
EXPECT_TRUE
(
mSourceBuffer
-
>
IsComplete
(
)
)
;
CheckIteratorIsComplete
(
iterator
0
0
NS_ERROR_OUT_OF_MEMORY
)
;
}
TEST_F
(
ImageSourceBuffer
AppendFromInputStream
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
nsCOMPtr
<
nsIInputStream
>
inputStream
=
LoadFile
(
GreenPNGTestCase
(
)
.
mPath
)
;
ASSERT_TRUE
(
inputStream
!
=
nullptr
)
;
uint64_t
length
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
inputStream
-
>
Available
(
&
length
)
)
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
mSourceBuffer
-
>
AppendFromInputStream
(
inputStream
length
)
)
)
;
CheckedCompleteBuffer
(
iterator
length
)
;
CheckedAdvanceIteratorStateOnly
(
iterator
length
)
;
CheckIteratorIsComplete
(
iterator
length
)
;
}
TEST_F
(
ImageSourceBuffer
AppendAfterComplete
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
mSourceBuffer
-
>
ExpectLength
(
sizeof
(
mData
)
)
)
)
;
CheckedAppendToBuffer
(
mData
sizeof
(
mData
)
)
;
CheckedCompleteBuffer
(
iterator
sizeof
(
mData
)
)
;
CheckedAdvanceIterator
(
iterator
sizeof
(
mData
)
)
;
CheckIteratorIsComplete
(
iterator
sizeof
(
mData
)
)
;
EXPECT_TRUE
(
NS_FAILED
(
mSourceBuffer
-
>
Append
(
mData
sizeof
(
mData
)
)
)
)
;
SourceBufferIterator
iterator2
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckedAdvanceIterator
(
iterator2
sizeof
(
mData
)
)
;
CheckIteratorIsComplete
(
iterator2
sizeof
(
mData
)
)
;
}
TEST_F
(
ImageSourceBuffer
MinChunkCapacity
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckedAppendToBufferInChunks
(
10
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
)
;
CheckedAdvanceIterator
(
iterator
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
)
;
CheckedAppendToBufferLastByteForLength
(
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
)
;
CheckedCompleteBuffer
(
iterator
1
)
;
CheckedAdvanceIterator
(
iterator
1
2
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
+
1
)
;
CheckIteratorIsComplete
(
iterator
2
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
+
1
)
;
}
TEST_F
(
ImageSourceBuffer
ExpectLengthAllocatesRequestedCapacity
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
mSourceBuffer
-
>
ExpectLength
(
1
)
)
)
;
CheckedAppendToBufferInChunks
(
10
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
)
;
CheckedCompleteBuffer
(
iterator
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
)
;
CheckedAdvanceIterator
(
iterator
1
1
1
)
;
CheckedAdvanceIterator
(
iterator
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
-
1
2
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
)
;
CheckIteratorIsComplete
(
iterator
2
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
)
;
}
TEST_F
(
ImageSourceBuffer
ExpectLengthGrowsAboveMinCapacity
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
const
size_t
length
=
2
*
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
mSourceBuffer
-
>
ExpectLength
(
length
)
)
)
;
CheckedAppendToBufferInChunks
(
10
length
)
;
CheckedAdvanceIterator
(
iterator
length
)
;
CheckedAppendToBufferLastByteForLength
(
length
)
;
CheckedCompleteBuffer
(
iterator
1
)
;
CheckedAdvanceIterator
(
iterator
1
2
length
+
1
)
;
CheckIteratorIsComplete
(
iterator
2
length
+
1
)
;
}
TEST_F
(
ImageSourceBuffer
HugeExpectLengthFails
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
ASSERT_LT
(
SurfaceCache
:
:
MaximumCapacity
(
)
SIZE_MAX
)
;
const
size_t
hugeSize
=
SurfaceCache
:
:
MaximumCapacity
(
)
+
1
;
EXPECT_TRUE
(
NS_FAILED
(
mSourceBuffer
-
>
ExpectLength
(
hugeSize
)
)
)
;
EXPECT_TRUE
(
mSourceBuffer
-
>
IsComplete
(
)
)
;
CheckIteratorIsComplete
(
iterator
0
0
NS_ERROR_OUT_OF_MEMORY
)
;
}
TEST_F
(
ImageSourceBuffer
LargeAppendsAllocateOnlyOneChunk
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
constexpr
size_t
length
=
2
*
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
;
char
data
[
length
]
;
GenerateData
(
data
sizeof
(
data
)
)
;
CheckedAppendToBuffer
(
data
length
)
;
CheckedAdvanceIterator
(
iterator
length
)
;
CheckedAppendToBufferLastByteForLength
(
length
)
;
CheckedCompleteBuffer
(
iterator
1
)
;
CheckedAdvanceIterator
(
iterator
1
2
length
+
1
)
;
CheckIteratorIsComplete
(
iterator
2
length
+
1
)
;
}
TEST_F
(
ImageSourceBuffer
LargeAppendsAllocateAtMostOneChunk
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
constexpr
size_t
firstWriteLength
=
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
/
2
;
constexpr
size_t
secondWriteLength
=
3
*
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
;
constexpr
size_t
totalLength
=
firstWriteLength
+
secondWriteLength
;
char
data
[
totalLength
]
;
GenerateData
(
data
sizeof
(
data
)
)
;
CheckedAppendToBuffer
(
data
firstWriteLength
)
;
CheckedAppendToBuffer
(
data
+
firstWriteLength
secondWriteLength
)
;
CheckedAdvanceIterator
(
iterator
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
)
;
const
size_t
expectedSecondChunkLength
=
totalLength
-
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
;
CheckedAdvanceIterator
(
iterator
expectedSecondChunkLength
2
totalLength
)
;
CheckedAppendToBufferLastByteForLength
(
totalLength
)
;
CheckedCompleteBuffer
(
iterator
1
)
;
CheckedAdvanceIterator
(
iterator
1
3
totalLength
+
1
)
;
CheckIteratorIsComplete
(
iterator
3
totalLength
+
1
)
;
}
TEST_F
(
ImageSourceBuffer
CompactionHappensWhenBufferIsComplete
)
{
constexpr
size_t
chunkLength
=
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
;
constexpr
size_t
totalLength
=
2
*
chunkLength
;
CheckedAppendToBufferInChunks
(
chunkLength
totalLength
)
;
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckedAdvanceIterator
(
iterator
chunkLength
)
;
CheckedAdvanceIterator
(
iterator
chunkLength
2
totalLength
)
;
}
CheckedCompleteBuffer
(
)
;
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckedAdvanceIterator
(
iterator
totalLength
)
;
CheckIteratorIsComplete
(
iterator
1
totalLength
)
;
}
}
TEST_F
(
ImageSourceBuffer
CompactionIsDelayedWhileIteratorsExist
)
{
constexpr
size_t
chunkLength
=
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
;
constexpr
size_t
totalLength
=
2
*
chunkLength
;
{
SourceBufferIterator
outerIterator
=
mSourceBuffer
-
>
Iterator
(
)
;
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckedAppendToBufferInChunks
(
chunkLength
totalLength
)
;
CheckedCompleteBuffer
(
iterator
totalLength
)
;
CheckedAdvanceIterator
(
iterator
chunkLength
)
;
CheckedAdvanceIterator
(
iterator
chunkLength
2
totalLength
)
;
CheckIteratorIsComplete
(
iterator
2
totalLength
)
;
}
CheckedAdvanceIterator
(
outerIterator
chunkLength
)
;
CheckedAdvanceIterator
(
outerIterator
chunkLength
2
totalLength
)
;
CheckIteratorIsComplete
(
outerIterator
2
totalLength
)
;
}
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckedAdvanceIterator
(
iterator
totalLength
)
;
CheckIteratorIsComplete
(
iterator
1
totalLength
)
;
}
}
TEST_F
(
ImageSourceBuffer
SourceBufferIteratorsCanBeMoved
)
{
constexpr
size_t
chunkLength
=
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
;
constexpr
size_t
totalLength
=
2
*
chunkLength
;
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckedAppendToBufferInChunks
(
chunkLength
totalLength
)
;
CheckedCompleteBuffer
(
iterator
totalLength
)
;
auto
GetIterator
=
[
&
]
{
SourceBufferIterator
lambdaIterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckedAdvanceIterator
(
lambdaIterator
chunkLength
)
;
return
lambdaIterator
;
}
;
SourceBufferIterator
movedIterator
=
Move
(
GetIterator
(
)
)
;
EXPECT_TRUE
(
movedIterator
.
Data
(
)
)
;
EXPECT_EQ
(
chunkLength
movedIterator
.
Length
(
)
)
;
ExpectChunkAndByteCount
(
movedIterator
1
chunkLength
)
;
CheckedAdvanceIterator
(
movedIterator
chunkLength
2
totalLength
)
;
CheckIteratorIsComplete
(
movedIterator
2
totalLength
)
;
movedIterator
=
Move
(
GetIterator
(
)
)
;
EXPECT_TRUE
(
movedIterator
.
Data
(
)
)
;
EXPECT_EQ
(
chunkLength
movedIterator
.
Length
(
)
)
;
ExpectChunkAndByteCount
(
movedIterator
1
chunkLength
)
;
CheckedAdvanceIterator
(
movedIterator
chunkLength
2
totalLength
)
;
CheckIteratorIsComplete
(
movedIterator
2
totalLength
)
;
}
TEST_F
(
ImageSourceBuffer
SubchunkAdvance
)
{
constexpr
size_t
chunkLength
=
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
;
constexpr
size_t
totalLength
=
2
*
chunkLength
;
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckedAppendToBufferInChunks
(
chunkLength
totalLength
)
;
CheckedCompleteBuffer
(
iterator
totalLength
)
;
size_t
offset
=
0
;
while
(
offset
<
chunkLength
)
{
CheckedAdvanceIteratorStateOnly
(
iterator
1
1
chunkLength
AdvanceMode
:
:
eAdvanceByLengthExactly
)
;
CheckData
(
iterator
.
Data
(
)
offset
+
+
iterator
.
Length
(
)
)
;
}
CheckedAdvanceIteratorStateOnly
(
iterator
1
2
totalLength
AdvanceMode
:
:
eAdvanceByLengthExactly
)
;
CheckData
(
iterator
.
Data
(
)
offset
+
+
iterator
.
Length
(
)
)
;
while
(
offset
<
totalLength
)
{
CheckedAdvanceIteratorStateOnly
(
iterator
1
2
totalLength
AdvanceMode
:
:
eAdvanceByLengthExactly
)
;
CheckData
(
iterator
.
Data
(
)
offset
+
+
iterator
.
Length
(
)
)
;
}
CheckIteratorIsComplete
(
iterator
2
totalLength
)
;
}
TEST_F
(
ImageSourceBuffer
SubchunkZeroByteAdvance
)
{
constexpr
size_t
chunkLength
=
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
;
constexpr
size_t
totalLength
=
2
*
chunkLength
;
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckedAppendToBufferInChunks
(
chunkLength
totalLength
)
;
CheckedCompleteBuffer
(
iterator
totalLength
)
;
CheckedAdvanceIteratorStateOnly
(
iterator
0
1
chunkLength
AdvanceMode
:
:
eAdvanceByLengthExactly
)
;
size_t
offset
=
0
;
while
(
offset
<
chunkLength
)
{
CheckedAdvanceIteratorStateOnly
(
iterator
1
1
chunkLength
AdvanceMode
:
:
eAdvanceByLengthExactly
)
;
CheckData
(
iterator
.
Data
(
)
offset
+
+
iterator
.
Length
(
)
)
;
CheckedAdvanceIteratorStateOnly
(
iterator
0
1
chunkLength
AdvanceMode
:
:
eAdvanceByLengthExactly
)
;
}
CheckedAdvanceIteratorStateOnly
(
iterator
1
2
totalLength
AdvanceMode
:
:
eAdvanceByLengthExactly
)
;
CheckData
(
iterator
.
Data
(
)
offset
+
+
iterator
.
Length
(
)
)
;
CheckedAdvanceIteratorStateOnly
(
iterator
0
2
totalLength
AdvanceMode
:
:
eAdvanceByLengthExactly
)
;
while
(
offset
<
totalLength
)
{
CheckedAdvanceIteratorStateOnly
(
iterator
1
2
totalLength
AdvanceMode
:
:
eAdvanceByLengthExactly
)
;
CheckData
(
iterator
.
Data
(
)
offset
+
+
iterator
.
Length
(
)
)
;
CheckedAdvanceIteratorStateOnly
(
iterator
0
2
totalLength
AdvanceMode
:
:
eAdvanceByLengthExactly
)
;
}
CheckIteratorIsComplete
(
iterator
2
totalLength
)
;
}
TEST_F
(
ImageSourceBuffer
SubchunkZeroByteAdvanceWithNoData
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
auto
state
=
iterator
.
AdvanceOrScheduleResume
(
0
mCountResumes
)
;
EXPECT_EQ
(
SourceBufferIterator
:
:
WAITING
state
)
;
CheckedCompleteBuffer
(
)
;
EXPECT_EQ
(
1u
mCountResumes
-
>
Count
(
)
)
;
}
TEST_F
(
ImageSourceBuffer
NullIResumable
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckIteratorMustWait
(
iterator
nullptr
)
;
CheckedAppendToBuffer
(
mData
sizeof
(
mData
)
)
;
CheckedCompleteBuffer
(
iterator
sizeof
(
mData
)
)
;
}
TEST_F
(
ImageSourceBuffer
AppendTriggersResume
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckIteratorMustWait
(
iterator
mCountResumes
)
;
mSourceBuffer
-
>
Append
(
mData
sizeof
(
mData
)
)
;
EXPECT_EQ
(
1u
mCountResumes
-
>
Count
(
)
)
;
}
TEST_F
(
ImageSourceBuffer
OnlyOneResumeTriggeredPerAppend
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckIteratorMustWait
(
iterator
mCountResumes
)
;
constexpr
size_t
firstWriteLength
=
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
/
2
;
constexpr
size_t
secondWriteLength
=
3
*
SourceBuffer
:
:
MIN_CHUNK_CAPACITY
;
constexpr
size_t
totalLength
=
firstWriteLength
+
secondWriteLength
;
char
data
[
totalLength
]
;
GenerateData
(
data
sizeof
(
data
)
)
;
CheckedAppendToBuffer
(
data
firstWriteLength
)
;
EXPECT_EQ
(
1u
mCountResumes
-
>
Count
(
)
)
;
CheckedAdvanceIterator
(
iterator
firstWriteLength
)
;
CheckIteratorMustWait
(
iterator
mCountResumes
)
;
CheckedAppendToBuffer
(
data
+
firstWriteLength
secondWriteLength
)
;
EXPECT_EQ
(
2u
mCountResumes
-
>
Count
(
)
)
;
}
TEST_F
(
ImageSourceBuffer
CompleteTriggersResume
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckIteratorMustWait
(
iterator
mCountResumes
)
;
CheckedCompleteBuffer
(
)
;
EXPECT_EQ
(
1u
mCountResumes
-
>
Count
(
)
)
;
}
TEST_F
(
ImageSourceBuffer
ExpectLengthDoesNotTriggerResume
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
)
;
CheckIteratorMustWait
(
iterator
mExpectNoResume
)
;
mSourceBuffer
-
>
ExpectLength
(
1000
)
;
}
TEST_F
(
ImageSourceBuffer
CompleteSuccessWithSameReadLength
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
1
)
;
CheckedAppendToBuffer
(
mData
1
)
;
CheckedCompleteBuffer
(
iterator
1
)
;
CheckedAdvanceIterator
(
iterator
1
)
;
CheckIteratorIsComplete
(
iterator
1
)
;
}
TEST_F
(
ImageSourceBuffer
CompleteSuccessWithSmallerReadLength
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
1
)
;
CheckedAppendToBuffer
(
mData
2
)
;
CheckedCompleteBuffer
(
iterator
2
)
;
CheckedAdvanceIterator
(
iterator
1
)
;
CheckIteratorIsComplete
(
iterator
1
)
;
}
TEST_F
(
ImageSourceBuffer
CompleteSuccessWithGreaterReadLength
)
{
SourceBufferIterator
iterator
=
mSourceBuffer
-
>
Iterator
(
2
)
;
CheckedAppendToBuffer
(
mData
1
)
;
CheckedCompleteBuffer
(
iterator
1
)
;
CheckedAdvanceIterator
(
iterator
1
)
;
CheckIteratorIsComplete
(
iterator
1
)
;
}
