#
include
<
algorithm
>
#
include
<
vector
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
Common
.
h
"
#
include
"
Decoder
.
h
"
#
include
"
DecoderFactory
.
h
"
#
include
"
SourceBuffer
.
h
"
#
include
"
SurfaceFilters
.
h
"
#
include
"
SurfacePipe
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
image
;
using
std
:
:
generate
;
using
std
:
:
vector
;
template
<
typename
Func
>
void
WithADAM7InterpolatingFilter
(
const
IntSize
&
aSize
Func
aFunc
)
{
RefPtr
<
Decoder
>
decoder
=
CreateTrivialDecoder
(
)
;
ASSERT_TRUE
(
bool
(
decoder
)
)
;
WithFilterPipeline
(
decoder
Forward
<
Func
>
(
aFunc
)
ADAM7InterpolatingConfig
{
}
SurfaceConfig
{
decoder
0
aSize
SurfaceFormat
:
:
B8G8R8A8
false
}
)
;
}
void
AssertConfiguringADAM7InterpolatingFilterFails
(
const
IntSize
&
aSize
)
{
RefPtr
<
Decoder
>
decoder
=
CreateTrivialDecoder
(
)
;
ASSERT_TRUE
(
bool
(
decoder
)
)
;
AssertConfiguringPipelineFails
(
decoder
ADAM7InterpolatingConfig
{
}
SurfaceConfig
{
decoder
0
aSize
SurfaceFormat
:
:
B8G8R8A8
false
}
)
;
}
uint8_t
InterpolateByte
(
uint8_t
aByteA
uint8_t
aByteB
float
aWeight
)
{
return
uint8_t
(
aByteA
*
aWeight
+
aByteB
*
(
1
.
0f
-
aWeight
)
)
;
}
BGRAColor
InterpolateColors
(
BGRAColor
aColor1
BGRAColor
aColor2
float
aWeight
)
{
return
BGRAColor
(
InterpolateByte
(
aColor1
.
mBlue
aColor2
.
mBlue
aWeight
)
InterpolateByte
(
aColor1
.
mGreen
aColor2
.
mGreen
aWeight
)
InterpolateByte
(
aColor1
.
mRed
aColor2
.
mRed
aWeight
)
InterpolateByte
(
aColor1
.
mAlpha
aColor2
.
mAlpha
aWeight
)
)
;
}
enum
class
ShouldInterpolate
{
eYes
eNo
}
;
BGRAColor
HorizontallyInterpolatedPixel
(
uint32_t
aCol
uint32_t
aWidth
const
vector
<
float
>
&
aWeights
ShouldInterpolate
aShouldInterpolate
const
vector
<
BGRAColor
>
&
aColors
)
{
float
weight
=
aWeights
[
aCol
%
aWeights
.
size
(
)
]
;
uint32_t
finalPixel1
=
aCol
-
aCol
%
aWeights
.
size
(
)
;
uint32_t
finalPixel2
=
finalPixel1
+
aWeights
.
size
(
)
;
if
(
finalPixel2
>
=
aWidth
)
{
finalPixel2
=
finalPixel1
;
}
BGRAColor
color1
=
aColors
[
finalPixel1
%
aColors
.
size
(
)
]
;
BGRAColor
color2
=
aColors
[
finalPixel2
%
aColors
.
size
(
)
]
;
if
(
aShouldInterpolate
=
=
ShouldInterpolate
:
:
eNo
)
{
return
aCol
%
aWeights
.
size
(
)
=
=
0
?
color1
:
BGRAColor
:
:
Transparent
(
)
;
}
return
InterpolateColors
(
color1
color2
weight
)
;
}
vector
<
float
>
&
InterpolationWeights
(
int32_t
aStride
)
{
static
vector
<
float
>
stride8Weights
=
{
1
.
0f
7
/
8
.
0f
6
/
8
.
0f
5
/
8
.
0f
4
/
8
.
0f
3
/
8
.
0f
2
/
8
.
0f
1
/
8
.
0f
}
;
static
vector
<
float
>
stride4Weights
=
{
1
.
0f
3
/
4
.
0f
2
/
4
.
0f
1
/
4
.
0f
}
;
static
vector
<
float
>
stride2Weights
=
{
1
.
0f
1
/
2
.
0f
}
;
static
vector
<
float
>
stride1Weights
=
{
1
.
0f
}
;
switch
(
aStride
)
{
case
8
:
return
stride8Weights
;
case
4
:
return
stride4Weights
;
case
2
:
return
stride2Weights
;
case
1
:
return
stride1Weights
;
default
:
MOZ_CRASH
(
)
;
}
}
int32_t
ImportantRowStride
(
uint8_t
aPass
)
{
static
int32_t
strides
[
]
=
{
1
8
8
4
4
2
2
1
1
}
;
return
strides
[
aPass
]
;
}
size_t
FinalPixelStride
(
uint8_t
aPass
)
{
static
size_t
strides
[
]
=
{
1
8
4
4
2
2
1
1
1
}
;
return
strides
[
aPass
]
;
}
bool
IsImportantRow
(
int32_t
aRow
uint8_t
aPass
)
{
return
aRow
%
ImportantRowStride
(
aPass
)
=
=
0
;
}
vector
<
BGRAColor
>
ADAM7HorizontallyInterpolatedRow
(
uint8_t
aPass
uint32_t
aRow
uint32_t
aWidth
ShouldInterpolate
aShouldInterpolate
const
vector
<
BGRAColor
>
&
aColors
)
{
EXPECT_GT
(
aPass
0
)
;
EXPECT_LE
(
aPass
8
)
;
EXPECT_GT
(
aColors
.
size
(
)
0u
)
;
vector
<
BGRAColor
>
result
(
aWidth
)
;
if
(
IsImportantRow
(
aRow
aPass
)
)
{
vector
<
float
>
&
weights
=
InterpolationWeights
(
FinalPixelStride
(
aPass
)
)
;
uint32_t
col
=
0
;
generate
(
result
.
begin
(
)
result
.
end
(
)
[
&
]
{
return
HorizontallyInterpolatedPixel
(
col
+
+
aWidth
weights
aShouldInterpolate
aColors
)
;
}
)
;
}
else
{
generate
(
result
.
begin
(
)
result
.
end
(
)
[
]
{
return
BGRAColor
:
:
Transparent
(
)
;
}
)
;
}
EXPECT_EQ
(
result
.
size
(
)
size_t
(
aWidth
)
)
;
return
result
;
}
WriteState
WriteUninterpolatedPixels
(
SurfaceFilter
*
aFilter
const
IntSize
&
aSize
uint8_t
aPass
const
vector
<
BGRAColor
>
&
aColors
)
{
WriteState
result
=
WriteState
:
:
NEED_MORE_DATA
;
for
(
int32_t
row
=
0
;
row
<
aSize
.
height
;
+
+
row
)
{
vector
<
BGRAColor
>
pixels
=
Move
(
ADAM7HorizontallyInterpolatedRow
(
aPass
row
aSize
.
width
ShouldInterpolate
:
:
eNo
aColors
)
)
;
auto
pixelIterator
=
pixels
.
cbegin
(
)
;
result
=
aFilter
-
>
WritePixelsToRow
<
uint32_t
>
(
[
&
]
{
return
AsVariant
(
(
*
pixelIterator
+
+
)
.
AsPixel
(
)
)
;
}
)
;
if
(
result
!
=
WriteState
:
:
NEED_MORE_DATA
)
{
break
;
}
}
return
result
;
}
bool
CheckHorizontallyInterpolatedImage
(
Decoder
*
aDecoder
const
IntSize
&
aSize
uint8_t
aPass
const
vector
<
BGRAColor
>
&
aColors
)
{
RawAccessFrameRef
currentFrame
=
aDecoder
-
>
GetCurrentFrameRef
(
)
;
RefPtr
<
SourceSurface
>
surface
=
currentFrame
-
>
GetSurface
(
)
;
for
(
int32_t
row
=
0
;
row
<
aSize
.
height
;
+
+
row
)
{
if
(
!
IsImportantRow
(
row
aPass
)
)
{
continue
;
}
vector
<
BGRAColor
>
expectedPixels
=
Move
(
ADAM7HorizontallyInterpolatedRow
(
aPass
row
aSize
.
width
ShouldInterpolate
:
:
eYes
aColors
)
)
;
if
(
!
RowHasPixels
(
surface
row
expectedPixels
)
)
{
return
false
;
}
}
return
true
;
}
void
CheckHorizontalInterpolation
(
const
IntSize
&
aSize
const
vector
<
BGRAColor
>
&
aColors
)
{
const
IntRect
surfaceRect
(
IntPoint
(
0
0
)
aSize
)
;
WithADAM7InterpolatingFilter
(
aSize
[
&
]
(
Decoder
*
aDecoder
SurfaceFilter
*
aFilter
)
{
for
(
uint8_t
pass
=
1
;
pass
<
=
8
;
+
+
pass
)
{
WriteState
result
=
WriteUninterpolatedPixels
(
aFilter
aSize
pass
aColors
)
;
EXPECT_EQ
(
WriteState
:
:
FINISHED
result
)
;
AssertCorrectPipelineFinalState
(
aFilter
surfaceRect
surfaceRect
)
;
EXPECT_TRUE
(
CheckHorizontallyInterpolatedImage
(
aDecoder
aSize
pass
aColors
)
)
;
aFilter
-
>
ResetToFirstRow
(
)
;
}
}
)
;
}
BGRAColor
ADAM7RowColor
(
int32_t
aRow
uint8_t
aPass
const
vector
<
BGRAColor
>
&
aColors
)
{
EXPECT_LT
(
0
aPass
)
;
EXPECT_GE
(
8
aPass
)
;
EXPECT_LT
(
0u
aColors
.
size
(
)
)
;
return
IsImportantRow
(
aRow
aPass
)
?
aColors
[
aRow
%
aColors
.
size
(
)
]
:
BGRAColor
:
:
Transparent
(
)
;
}
WriteState
WriteRowColorPixels
(
SurfaceFilter
*
aFilter
const
IntSize
&
aSize
uint8_t
aPass
const
vector
<
BGRAColor
>
&
aColors
)
{
WriteState
result
=
WriteState
:
:
NEED_MORE_DATA
;
for
(
int32_t
row
=
0
;
row
<
aSize
.
height
;
+
+
row
)
{
const
uint32_t
color
=
ADAM7RowColor
(
row
aPass
aColors
)
.
AsPixel
(
)
;
result
=
aFilter
-
>
WritePixelsToRow
<
uint32_t
>
(
[
&
]
{
return
AsVariant
(
color
)
;
}
)
;
if
(
result
!
=
WriteState
:
:
NEED_MORE_DATA
)
{
break
;
}
}
return
result
;
}
bool
CheckVerticallyInterpolatedImage
(
Decoder
*
aDecoder
const
IntSize
&
aSize
uint8_t
aPass
const
vector
<
BGRAColor
>
&
aColors
)
{
vector
<
float
>
&
weights
=
InterpolationWeights
(
ImportantRowStride
(
aPass
)
)
;
for
(
int32_t
row
=
0
;
row
<
aSize
.
height
;
+
+
row
)
{
const
int32_t
stride
=
ImportantRowStride
(
aPass
)
;
const
int32_t
prevImportantRow
=
row
-
row
%
stride
;
const
int32_t
maybeNextImportantRow
=
prevImportantRow
+
stride
;
const
int32_t
nextImportantRow
=
maybeNextImportantRow
<
aSize
.
height
?
maybeNextImportantRow
:
prevImportantRow
;
const
BGRAColor
prevImportantRowColor
=
ADAM7RowColor
(
prevImportantRow
aPass
aColors
)
;
const
BGRAColor
nextImportantRowColor
=
ADAM7RowColor
(
nextImportantRow
aPass
aColors
)
;
const
float
weight
=
weights
[
row
%
stride
]
;
const
BGRAColor
interpolatedColor
=
InterpolateColors
(
prevImportantRowColor
nextImportantRowColor
weight
)
;
vector
<
BGRAColor
>
expectedPixels
(
aSize
.
width
)
;
generate
(
expectedPixels
.
begin
(
)
expectedPixels
.
end
(
)
[
&
]
{
return
interpolatedColor
;
}
)
;
RawAccessFrameRef
currentFrame
=
aDecoder
-
>
GetCurrentFrameRef
(
)
;
RefPtr
<
SourceSurface
>
surface
=
currentFrame
-
>
GetSurface
(
)
;
if
(
!
RowHasPixels
(
surface
row
expectedPixels
)
)
{
return
false
;
}
}
return
true
;
}
void
CheckVerticalInterpolation
(
const
IntSize
&
aSize
const
vector
<
BGRAColor
>
&
aColors
)
{
const
IntRect
surfaceRect
(
IntPoint
(
0
0
)
aSize
)
;
WithADAM7InterpolatingFilter
(
aSize
[
&
]
(
Decoder
*
aDecoder
SurfaceFilter
*
aFilter
)
{
for
(
uint8_t
pass
=
1
;
pass
<
=
8
;
+
+
pass
)
{
WriteState
result
=
WriteRowColorPixels
(
aFilter
aSize
pass
aColors
)
;
EXPECT_EQ
(
WriteState
:
:
FINISHED
result
)
;
AssertCorrectPipelineFinalState
(
aFilter
surfaceRect
surfaceRect
)
;
EXPECT_TRUE
(
CheckVerticallyInterpolatedImage
(
aDecoder
aSize
pass
aColors
)
)
;
aFilter
-
>
ResetToFirstRow
(
)
;
}
}
)
;
}
void
CheckInterpolation
(
const
IntSize
&
aSize
const
vector
<
BGRAColor
>
&
aColors
)
{
CheckHorizontalInterpolation
(
aSize
aColors
)
;
CheckVerticalInterpolation
(
aSize
aColors
)
;
}
void
CheckADAM7InterpolatingWritePixels
(
const
IntSize
&
aSize
)
{
WithADAM7InterpolatingFilter
(
aSize
[
&
]
(
Decoder
*
aDecoder
SurfaceFilter
*
aFilter
)
{
IntRect
rect
(
IntPoint
(
0
0
)
aSize
)
;
for
(
int32_t
pass
=
1
;
pass
<
=
8
;
+
+
pass
)
{
const
int32_t
lastRow
=
aSize
.
height
-
1
;
const
int32_t
lastImportantRow
=
lastRow
-
(
lastRow
%
ImportantRowStride
(
pass
)
)
;
const
IntRect
inputWriteRect
(
0
0
aSize
.
width
lastImportantRow
+
1
)
;
CheckWritePixels
(
aDecoder
aFilter
Some
(
rect
)
Some
(
rect
)
Some
(
inputWriteRect
)
)
;
aFilter
-
>
ResetToFirstRow
(
)
;
EXPECT_FALSE
(
aFilter
-
>
IsSurfaceFinished
(
)
)
;
Maybe
<
SurfaceInvalidRect
>
invalidRect
=
aFilter
-
>
TakeInvalidRect
(
)
;
EXPECT_TRUE
(
invalidRect
.
isNothing
(
)
)
;
}
}
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
WritePixels100_100
)
{
CheckADAM7InterpolatingWritePixels
(
IntSize
(
100
100
)
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
WritePixels99_99
)
{
CheckADAM7InterpolatingWritePixels
(
IntSize
(
99
99
)
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
WritePixels66_33
)
{
CheckADAM7InterpolatingWritePixels
(
IntSize
(
66
33
)
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
WritePixels33_66
)
{
CheckADAM7InterpolatingWritePixels
(
IntSize
(
33
66
)
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
WritePixels15_15
)
{
CheckADAM7InterpolatingWritePixels
(
IntSize
(
15
15
)
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
WritePixels9_9
)
{
CheckADAM7InterpolatingWritePixels
(
IntSize
(
9
9
)
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
WritePixels8_8
)
{
CheckADAM7InterpolatingWritePixels
(
IntSize
(
8
8
)
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
WritePixels7_7
)
{
CheckADAM7InterpolatingWritePixels
(
IntSize
(
7
7
)
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
WritePixels3_3
)
{
CheckADAM7InterpolatingWritePixels
(
IntSize
(
3
3
)
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
WritePixels1_1
)
{
CheckADAM7InterpolatingWritePixels
(
IntSize
(
1
1
)
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
TrivialInterpolation48_48
)
{
CheckInterpolation
(
IntSize
(
48
48
)
{
BGRAColor
:
:
Green
(
)
}
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
InterpolationOutput33_17
)
{
CheckInterpolation
(
IntSize
(
33
17
)
{
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
}
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
InterpolationOutput32_16
)
{
CheckInterpolation
(
IntSize
(
32
16
)
{
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
}
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
InterpolationOutput31_15
)
{
CheckInterpolation
(
IntSize
(
31
15
)
{
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
}
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
InterpolationOutput17_33
)
{
CheckInterpolation
(
IntSize
(
17
33
)
{
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
}
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
InterpolationOutput16_32
)
{
CheckInterpolation
(
IntSize
(
16
32
)
{
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
}
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
InterpolationOutput15_31
)
{
CheckInterpolation
(
IntSize
(
15
31
)
{
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
}
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
InterpolationOutput9_9
)
{
CheckInterpolation
(
IntSize
(
9
9
)
{
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
}
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
InterpolationOutput8_8
)
{
CheckInterpolation
(
IntSize
(
8
8
)
{
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
}
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
InterpolationOutput7_7
)
{
CheckInterpolation
(
IntSize
(
7
7
)
{
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
}
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
InterpolationOutput3_3
)
{
CheckInterpolation
(
IntSize
(
3
3
)
{
BGRAColor
:
:
Green
(
)
BGRAColor
:
:
Red
(
)
BGRAColor
:
:
Blue
(
)
BGRAColor
:
:
Red
(
)
}
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
InterpolationOutput1_1
)
{
CheckInterpolation
(
IntSize
(
1
1
)
{
BGRAColor
:
:
Blue
(
)
}
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
ADAM7InterpolationFailsFor0_0
)
{
AssertConfiguringADAM7InterpolatingFilterFails
(
IntSize
(
0
0
)
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
ADAM7InterpolationFailsForMinus1_Minus1
)
{
AssertConfiguringADAM7InterpolatingFilterFails
(
IntSize
(
-
1
-
1
)
)
;
}
TEST
(
ImageADAM7InterpolatingFilter
ConfiguringPalettedADAM7InterpolatingFilterFails
)
{
RefPtr
<
Decoder
>
decoder
=
CreateTrivialDecoder
(
)
;
ASSERT_TRUE
(
decoder
!
=
nullptr
)
;
AssertConfiguringPipelineFails
(
decoder
ADAM7InterpolatingConfig
{
}
PalettedSurfaceConfig
{
decoder
0
IntSize
(
100
100
)
IntRect
(
0
0
50
50
)
SurfaceFormat
:
:
B8G8R8A8
8
false
}
)
;
}
