#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
Common
.
h
"
#
include
"
Decoder
.
h
"
#
include
"
DecoderFactory
.
h
"
#
include
"
SourceBuffer
.
h
"
#
include
"
SurfacePipe
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
image
;
namespace
mozilla
{
namespace
image
{
class
TestSurfacePipeFactory
{
public
:
static
SurfacePipe
SimpleSurfacePipe
(
)
{
SurfacePipe
pipe
;
return
pipe
;
}
template
<
typename
T
>
static
SurfacePipe
SurfacePipeFromPipeline
(
T
&
&
aPipeline
)
{
return
SurfacePipe
{
std
:
:
move
(
aPipeline
)
}
;
}
private
:
TestSurfacePipeFactory
(
)
{
}
}
;
}
}
void
CheckSurfacePipeMethodResults
(
SurfacePipe
*
aPipe
image
:
:
Decoder
*
aDecoder
const
IntRect
&
aRect
=
IntRect
(
0
0
100
100
)
)
{
EXPECT_TRUE
(
aPipe
-
>
IsSurfaceFinished
(
)
)
;
Maybe
<
SurfaceInvalidRect
>
invalidRect
=
aPipe
-
>
TakeInvalidRect
(
)
;
EXPECT_TRUE
(
invalidRect
.
isSome
(
)
)
;
EXPECT_EQ
(
OrientedIntRect
(
0
0
100
100
)
invalidRect
-
>
mInputSpaceRect
)
;
EXPECT_EQ
(
OrientedIntRect
(
0
0
100
100
)
invalidRect
-
>
mOutputSpaceRect
)
;
CheckGeneratedImage
(
aDecoder
aRect
)
;
aPipe
-
>
ResetToFirstRow
(
)
;
EXPECT_FALSE
(
aPipe
-
>
IsSurfaceFinished
(
)
)
;
invalidRect
=
aPipe
-
>
TakeInvalidRect
(
)
;
EXPECT_TRUE
(
invalidRect
.
isNothing
(
)
)
;
uint32_t
count
=
0
;
auto
result
=
aPipe
-
>
WritePixels
<
uint32_t
>
(
[
&
]
(
)
{
+
+
count
;
return
AsVariant
(
BGRAColor
:
:
Transparent
(
)
.
AsPixel
(
)
)
;
}
)
;
EXPECT_EQ
(
WriteState
:
:
FINISHED
result
)
;
EXPECT_EQ
(
100u
*
100u
count
)
;
EXPECT_TRUE
(
aPipe
-
>
IsSurfaceFinished
(
)
)
;
invalidRect
=
aPipe
-
>
TakeInvalidRect
(
)
;
EXPECT_TRUE
(
invalidRect
.
isSome
(
)
)
;
EXPECT_EQ
(
OrientedIntRect
(
0
0
100
100
)
invalidRect
-
>
mInputSpaceRect
)
;
EXPECT_EQ
(
OrientedIntRect
(
0
0
100
100
)
invalidRect
-
>
mOutputSpaceRect
)
;
aPipe
-
>
ResetToFirstRow
(
)
;
EXPECT_FALSE
(
aPipe
-
>
IsSurfaceFinished
(
)
)
;
invalidRect
=
aPipe
-
>
TakeInvalidRect
(
)
;
EXPECT_TRUE
(
invalidRect
.
isNothing
(
)
)
;
}
class
ImageSurfacePipeIntegration
:
public
:
:
testing
:
:
Test
{
protected
:
AutoInitializeImageLib
mInit
;
}
;
TEST_F
(
ImageSurfacePipeIntegration
SurfacePipe
)
{
SurfacePipe
pipe
=
TestSurfacePipeFactory
:
:
SimpleSurfacePipe
(
)
;
pipe
=
TestSurfacePipeFactory
:
:
SimpleSurfacePipe
(
)
;
RefPtr
<
image
:
:
Decoder
>
decoder
=
CreateTrivialDecoder
(
)
;
ASSERT_TRUE
(
decoder
!
=
nullptr
)
;
auto
sink
=
MakeUnique
<
SurfaceSink
>
(
)
;
nsresult
rv
=
sink
-
>
Configure
(
SurfaceConfig
{
decoder
IntSize
(
100
100
)
SurfaceFormat
:
:
OS_RGBA
false
}
)
;
ASSERT_NS_SUCCEEDED
(
rv
)
;
pipe
=
TestSurfacePipeFactory
:
:
SurfacePipeFromPipeline
(
sink
)
;
{
uint32_t
count
=
0
;
auto
result
=
pipe
.
WritePixels
<
uint32_t
>
(
[
&
]
(
)
{
+
+
count
;
return
AsVariant
(
BGRAColor
:
:
Green
(
)
.
AsPixel
(
)
)
;
}
)
;
EXPECT_EQ
(
WriteState
:
:
FINISHED
result
)
;
EXPECT_EQ
(
100u
*
100u
count
)
;
CheckSurfacePipeMethodResults
(
&
pipe
decoder
)
;
}
uint32_t
buffer
[
100
]
;
for
(
int
i
=
0
;
i
<
100
;
+
+
i
)
{
buffer
[
i
]
=
BGRAColor
:
:
Green
(
)
.
AsPixel
(
)
;
}
{
uint32_t
count
=
0
;
WriteState
result
=
WriteState
:
:
NEED_MORE_DATA
;
while
(
result
=
=
WriteState
:
:
NEED_MORE_DATA
)
{
result
=
pipe
.
WriteBuffer
(
buffer
)
;
+
+
count
;
}
EXPECT_EQ
(
WriteState
:
:
FINISHED
result
)
;
EXPECT_EQ
(
100u
count
)
;
CheckSurfacePipeMethodResults
(
&
pipe
decoder
)
;
}
{
uint32_t
count
=
0
;
WriteState
result
=
WriteState
:
:
NEED_MORE_DATA
;
while
(
result
=
=
WriteState
:
:
NEED_MORE_DATA
)
{
result
=
pipe
.
WriteBuffer
(
buffer
0
100
)
;
+
+
count
;
}
EXPECT_EQ
(
WriteState
:
:
FINISHED
result
)
;
EXPECT_EQ
(
100u
count
)
;
CheckSurfacePipeMethodResults
(
&
pipe
decoder
)
;
}
{
uint32_t
count
=
0
;
WriteState
result
=
pipe
.
WritePixelBlocks
<
uint32_t
>
(
[
&
]
(
uint32_t
*
aBlockStart
int32_t
aLength
)
{
+
+
count
;
EXPECT_EQ
(
int32_t
(
100
)
aLength
)
;
memcpy
(
aBlockStart
buffer
100
*
sizeof
(
uint32_t
)
)
;
return
MakeTuple
(
int32_t
(
100
)
Maybe
<
WriteState
>
(
)
)
;
}
)
;
EXPECT_EQ
(
WriteState
:
:
FINISHED
result
)
;
EXPECT_EQ
(
100u
count
)
;
CheckSurfacePipeMethodResults
(
&
pipe
decoder
)
;
}
{
uint32_t
count
=
0
;
WriteState
result
=
WriteState
:
:
NEED_MORE_DATA
;
while
(
result
=
=
WriteState
:
:
NEED_MORE_DATA
)
{
result
=
pipe
.
WriteEmptyRow
(
)
;
+
+
count
;
}
EXPECT_EQ
(
WriteState
:
:
FINISHED
result
)
;
EXPECT_EQ
(
100u
count
)
;
CheckSurfacePipeMethodResults
(
&
pipe
decoder
IntRect
(
0
0
0
0
)
)
;
}
RawAccessFrameRef
currentFrame
=
decoder
-
>
GetCurrentFrameRef
(
)
;
currentFrame
-
>
Finish
(
)
;
}
TEST_F
(
ImageSurfacePipeIntegration
DeinterlaceDownscaleWritePixels
)
{
RefPtr
<
image
:
:
Decoder
>
decoder
=
CreateTrivialDecoder
(
)
;
ASSERT_TRUE
(
decoder
!
=
nullptr
)
;
auto
test
=
[
]
(
image
:
:
Decoder
*
aDecoder
SurfaceFilter
*
aFilter
)
{
CheckWritePixels
(
aDecoder
aFilter
Some
(
IntRect
(
0
0
25
25
)
)
)
;
}
;
WithFilterPipeline
(
decoder
test
DeinterlacingConfig
<
uint32_t
>
{
true
}
DownscalingConfig
{
IntSize
(
100
100
)
SurfaceFormat
:
:
OS_RGBA
}
SurfaceConfig
{
decoder
IntSize
(
25
25
)
SurfaceFormat
:
:
OS_RGBA
false
}
)
;
}
TEST_F
(
ImageSurfacePipeIntegration
RemoveFrameRectBottomRightDownscaleWritePixels
)
{
RefPtr
<
image
:
:
Decoder
>
decoder
=
CreateTrivialDecoder
(
)
;
ASSERT_TRUE
(
decoder
!
=
nullptr
)
;
auto
test
=
[
]
(
image
:
:
Decoder
*
aDecoder
SurfaceFilter
*
aFilter
)
{
CheckWritePixels
(
aDecoder
aFilter
Some
(
IntRect
(
0
0
20
20
)
)
Some
(
IntRect
(
0
0
100
100
)
)
Some
(
IntRect
(
50
50
100
50
)
)
Some
(
IntRect
(
10
10
10
10
)
)
0x33
)
;
}
;
WithFilterPipeline
(
decoder
test
RemoveFrameRectConfig
{
IntRect
(
50
50
100
100
)
}
DownscalingConfig
{
IntSize
(
100
100
)
SurfaceFormat
:
:
OS_RGBA
}
SurfaceConfig
{
decoder
IntSize
(
20
20
)
SurfaceFormat
:
:
OS_RGBA
false
}
)
;
}
TEST_F
(
ImageSurfacePipeIntegration
RemoveFrameRectTopLeftDownscaleWritePixels
)
{
RefPtr
<
image
:
:
Decoder
>
decoder
=
CreateTrivialDecoder
(
)
;
ASSERT_TRUE
(
decoder
!
=
nullptr
)
;
auto
test
=
[
]
(
image
:
:
Decoder
*
aDecoder
SurfaceFilter
*
aFilter
)
{
CheckWritePixels
(
aDecoder
aFilter
Some
(
IntRect
(
0
0
20
20
)
)
Some
(
IntRect
(
0
0
100
100
)
)
Some
(
IntRect
(
0
0
100
100
)
)
Some
(
IntRect
(
0
0
10
10
)
)
0x21
)
;
}
;
WithFilterPipeline
(
decoder
test
RemoveFrameRectConfig
{
IntRect
(
-
50
-
50
100
100
)
}
DownscalingConfig
{
IntSize
(
100
100
)
SurfaceFormat
:
:
OS_RGBA
}
SurfaceConfig
{
decoder
IntSize
(
20
20
)
SurfaceFormat
:
:
OS_RGBA
false
}
)
;
}
TEST_F
(
ImageSurfacePipeIntegration
DeinterlaceRemoveFrameRectWritePixels
)
{
RefPtr
<
image
:
:
Decoder
>
decoder
=
CreateTrivialDecoder
(
)
;
ASSERT_TRUE
(
decoder
!
=
nullptr
)
;
auto
test
=
[
]
(
image
:
:
Decoder
*
aDecoder
SurfaceFilter
*
aFilter
)
{
CheckWritePixels
(
aDecoder
aFilter
Some
(
IntRect
(
0
0
100
100
)
)
Some
(
IntRect
(
0
0
100
100
)
)
Some
(
IntRect
(
50
50
100
100
)
)
Some
(
IntRect
(
50
50
50
50
)
)
)
;
}
;
WithFilterPipeline
(
decoder
test
DeinterlacingConfig
<
uint32_t
>
{
true
}
RemoveFrameRectConfig
{
IntRect
(
50
50
100
100
)
}
SurfaceConfig
{
decoder
IntSize
(
100
100
)
SurfaceFormat
:
:
OS_RGBA
false
}
)
;
}
TEST_F
(
ImageSurfacePipeIntegration
DeinterlaceRemoveFrameRectDownscaleWritePixels
)
{
RefPtr
<
image
:
:
Decoder
>
decoder
=
CreateTrivialDecoder
(
)
;
ASSERT_TRUE
(
decoder
!
=
nullptr
)
;
auto
test
=
[
]
(
image
:
:
Decoder
*
aDecoder
SurfaceFilter
*
aFilter
)
{
CheckWritePixels
(
aDecoder
aFilter
Some
(
IntRect
(
0
0
20
20
)
)
Some
(
IntRect
(
0
0
100
100
)
)
Some
(
IntRect
(
50
50
100
100
)
)
Some
(
IntRect
(
10
10
10
10
)
)
33
)
;
}
;
WithFilterPipeline
(
decoder
test
DeinterlacingConfig
<
uint32_t
>
{
true
}
RemoveFrameRectConfig
{
IntRect
(
50
50
100
100
)
}
DownscalingConfig
{
IntSize
(
100
100
)
SurfaceFormat
:
:
OS_RGBA
}
SurfaceConfig
{
decoder
IntSize
(
20
20
)
SurfaceFormat
:
:
OS_RGBA
false
}
)
;
}
TEST_F
(
ImageSurfacePipeIntegration
ConfiguringHugeDeinterlacingBufferFails
)
{
RefPtr
<
image
:
:
Decoder
>
decoder
=
CreateTrivialDecoder
(
)
;
ASSERT_TRUE
(
decoder
!
=
nullptr
)
;
AssertConfiguringPipelineFails
(
decoder
DeinterlacingConfig
<
uint32_t
>
{
true
}
DownscalingConfig
{
IntSize
(
60000
60000
)
SurfaceFormat
:
:
OS_RGBA
}
SurfaceConfig
{
decoder
IntSize
(
600
600
)
SurfaceFormat
:
:
OS_RGBA
false
}
)
;
}
