#
include
"
gtest
/
gtest
.
h
"
#
include
"
Common
.
h
"
#
include
"
Decoder
.
h
"
#
include
"
DecoderFactory
.
h
"
#
include
"
decoders
/
nsBMPDecoder
.
h
"
#
include
"
imgIContainer
.
h
"
#
include
"
imgITools
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
mozilla
/
nsRefPtr
.
h
"
#
include
"
nsStreamUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
ProgressTracker
.
h
"
#
include
"
SourceBuffer
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
image
;
TEST
(
ImageMetadata
ImageModuleAvailable
)
{
nsCOMPtr
<
imgITools
>
imgTools
=
do_CreateInstance
(
"
mozilla
.
org
/
image
/
tools
;
1
"
)
;
EXPECT_TRUE
(
imgTools
!
=
nullptr
)
;
}
static
void
CheckMetadata
(
const
ImageTestCase
&
aTestCase
bool
aEnableBMPAlpha
=
false
)
{
nsCOMPtr
<
nsIInputStream
>
inputStream
=
LoadFile
(
aTestCase
.
mPath
)
;
ASSERT_TRUE
(
inputStream
!
=
nullptr
)
;
nsresult
rv
;
if
(
!
NS_InputStreamIsBuffered
(
inputStream
)
)
{
nsCOMPtr
<
nsIInputStream
>
bufStream
;
rv
=
NS_NewBufferedInputStream
(
getter_AddRefs
(
bufStream
)
inputStream
1024
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
inputStream
=
bufStream
;
}
}
uint64_t
length
;
rv
=
inputStream
-
>
Available
(
&
length
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
nsRefPtr
<
SourceBuffer
>
sourceBuffer
=
new
SourceBuffer
(
)
;
sourceBuffer
-
>
ExpectLength
(
length
)
;
rv
=
sourceBuffer
-
>
AppendFromInputStream
(
inputStream
length
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
sourceBuffer
-
>
Complete
(
NS_OK
)
;
DecoderType
decoderType
=
DecoderFactory
:
:
GetDecoderType
(
aTestCase
.
mMimeType
)
;
nsRefPtr
<
Decoder
>
decoder
=
DecoderFactory
:
:
CreateAnonymousMetadataDecoder
(
decoderType
sourceBuffer
)
;
ASSERT_TRUE
(
decoder
!
=
nullptr
)
;
if
(
aEnableBMPAlpha
)
{
static_cast
<
nsBMPDecoder
*
>
(
decoder
.
get
(
)
)
-
>
SetUseAlphaData
(
true
)
;
}
decoder
-
>
Decode
(
)
;
Progress
metadataProgress
=
decoder
-
>
TakeProgress
(
)
;
EXPECT_TRUE
(
0
=
=
(
metadataProgress
&
~
(
FLAG_SIZE_AVAILABLE
|
FLAG_HAS_TRANSPARENCY
)
)
)
;
if
(
aTestCase
.
mFlags
&
TEST_CASE_HAS_ERROR
)
{
EXPECT_TRUE
(
decoder
-
>
GetDecodeDone
(
)
)
;
EXPECT_TRUE
(
decoder
-
>
HasError
(
)
)
;
return
;
}
EXPECT_TRUE
(
decoder
-
>
GetDecodeDone
(
)
&
&
!
decoder
-
>
HasError
(
)
)
;
EXPECT_TRUE
(
metadataProgress
&
FLAG_SIZE_AVAILABLE
)
;
IntSize
metadataSize
=
decoder
-
>
GetSize
(
)
;
EXPECT_EQ
(
aTestCase
.
mSize
.
width
metadataSize
.
width
)
;
EXPECT_EQ
(
aTestCase
.
mSize
.
height
metadataSize
.
height
)
;
bool
expectTransparency
=
aEnableBMPAlpha
?
true
:
bool
(
aTestCase
.
mFlags
&
TEST_CASE_IS_TRANSPARENT
)
;
EXPECT_EQ
(
expectTransparency
bool
(
metadataProgress
&
FLAG_HAS_TRANSPARENCY
)
)
;
decoder
=
DecoderFactory
:
:
CreateAnonymousDecoder
(
decoderType
sourceBuffer
imgIContainer
:
:
DECODE_FLAGS_DEFAULT
)
;
ASSERT_TRUE
(
decoder
!
=
nullptr
)
;
if
(
aEnableBMPAlpha
)
{
static_cast
<
nsBMPDecoder
*
>
(
decoder
.
get
(
)
)
-
>
SetUseAlphaData
(
true
)
;
}
decoder
-
>
Decode
(
)
;
EXPECT_TRUE
(
decoder
-
>
GetDecodeDone
(
)
&
&
!
decoder
-
>
HasError
(
)
)
;
Progress
fullProgress
=
decoder
-
>
TakeProgress
(
)
;
EXPECT_EQ
(
fullProgress
metadataProgress
|
fullProgress
)
;
IntSize
fullSize
=
decoder
-
>
GetSize
(
)
;
EXPECT_EQ
(
metadataSize
.
width
fullSize
.
width
)
;
EXPECT_EQ
(
metadataSize
.
height
fullSize
.
height
)
;
EXPECT_TRUE
(
!
(
fullProgress
&
FLAG_HAS_TRANSPARENCY
)
|
|
(
metadataProgress
&
FLAG_HAS_TRANSPARENCY
)
|
|
(
fullProgress
&
FLAG_IS_ANIMATED
)
)
;
}
TEST
(
ImageMetadata
PNG
)
{
CheckMetadata
(
GreenPNGTestCase
(
)
)
;
}
TEST
(
ImageMetadata
TransparentPNG
)
{
CheckMetadata
(
TransparentPNGTestCase
(
)
)
;
}
TEST
(
ImageMetadata
GIF
)
{
CheckMetadata
(
GreenGIFTestCase
(
)
)
;
}
TEST
(
ImageMetadata
TransparentGIF
)
{
CheckMetadata
(
TransparentGIFTestCase
(
)
)
;
}
TEST
(
ImageMetadata
JPG
)
{
CheckMetadata
(
GreenJPGTestCase
(
)
)
;
}
TEST
(
ImageMetadata
BMP
)
{
CheckMetadata
(
GreenBMPTestCase
(
)
)
;
}
TEST
(
ImageMetadata
ICO
)
{
CheckMetadata
(
GreenICOTestCase
(
)
)
;
}
TEST
(
ImageMetadata
AnimatedGIF
)
{
CheckMetadata
(
GreenFirstFrameAnimatedGIFTestCase
(
)
)
;
}
TEST
(
ImageMetadata
AnimatedPNG
)
{
CheckMetadata
(
GreenFirstFrameAnimatedPNGTestCase
(
)
)
;
}
TEST
(
ImageMetadata
FirstFramePaddingGIF
)
{
CheckMetadata
(
FirstFramePaddingGIFTestCase
(
)
)
;
}
TEST
(
ImageMetadata
TransparentBMPWithBMPAlphaOff
)
{
CheckMetadata
(
TransparentBMPWhenBMPAlphaEnabledTestCase
(
)
false
)
;
}
TEST
(
ImageMetadata
TransparentBMPWithBMPAlphaOn
)
{
CheckMetadata
(
TransparentBMPWhenBMPAlphaEnabledTestCase
(
)
true
)
;
}
TEST
(
ImageMetadata
RLE4BMP
)
{
CheckMetadata
(
RLE4BMPTestCase
(
)
)
;
}
TEST
(
ImageMetadata
RLE8BMP
)
{
CheckMetadata
(
RLE8BMPTestCase
(
)
)
;
}
TEST
(
ImageMetadata
Corrupt
)
{
CheckMetadata
(
CorruptTestCase
(
)
)
;
}
