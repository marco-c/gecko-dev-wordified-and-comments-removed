"
use
strict
"
;
const
DIRPATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
"
)
;
const
parentPATH
=
DIRPATH
+
"
empty
.
html
"
;
const
iframePATH
=
DIRPATH
+
"
empty
.
html
"
;
const
parentURL
=
http
:
/
/
example
.
com
/
{
parentPATH
}
;
const
iframeURL
=
http
:
/
/
example
.
org
/
{
iframePATH
}
;
add_task
(
async
function
setup_pref
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
layout
.
throttled_frame_rate
"
60
]
]
}
)
;
}
)
;
add_task
(
async
function
(
)
{
const
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
fission
:
true
}
)
;
try
{
const
browser
=
win
.
gBrowser
.
selectedTab
.
linkedBrowser
;
BrowserTestUtils
.
startLoadingURIString
(
browser
parentURL
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
parentURL
)
;
async
function
setup
(
url
)
{
const
scroller
=
content
.
document
.
createElement
(
"
div
"
)
;
scroller
.
style
=
"
width
:
300px
;
height
:
300px
;
overflow
:
scroll
;
"
;
scroller
.
setAttribute
(
"
id
"
"
scroller
"
)
;
content
.
document
.
body
.
appendChild
(
scroller
)
;
const
spacer
=
content
.
document
.
createElement
(
"
div
"
)
;
spacer
.
style
=
"
width
:
100
%
;
height
:
10000px
;
"
;
scroller
.
appendChild
(
spacer
)
;
const
iframe
=
content
.
document
.
createElement
(
"
iframe
"
)
;
scroller
.
appendChild
(
iframe
)
;
iframe
.
contentWindow
.
location
=
url
;
await
new
Promise
(
resolve
=
>
{
iframe
.
addEventListener
(
"
load
"
resolve
{
once
:
true
}
)
;
}
)
;
return
iframe
.
browsingContext
;
}
async
function
setupImage
(
)
{
const
img
=
content
.
document
.
createElement
(
"
img
"
)
;
img
.
setAttribute
(
"
src
"
"
animated
.
gif
"
)
;
img
.
setAttribute
(
"
id
"
"
img
"
)
;
content
.
document
.
body
.
appendChild
(
img
)
;
const
spacer
=
content
.
document
.
createElement
(
"
div
"
)
;
spacer
.
style
=
"
width
:
100
%
;
height
:
10000px
;
"
;
content
.
document
.
body
.
appendChild
(
spacer
)
;
await
new
Promise
(
resolve
=
>
{
img
.
addEventListener
(
"
load
"
resolve
{
once
:
true
}
)
;
}
)
;
}
async
function
observeFrameUpdate
(
time
)
{
function
ImageDecoderObserverStub
(
)
{
this
.
sizeAvailable
=
function
sizeAvailable
(
aRequest
)
{
}
;
this
.
frameComplete
=
function
frameComplete
(
aRequest
)
{
}
;
this
.
decodeComplete
=
function
decodeComplete
(
aRequest
)
{
}
;
this
.
loadComplete
=
function
loadComplete
(
aRequest
)
{
}
;
this
.
frameUpdate
=
function
frameUpdate
(
aRequest
)
{
}
;
this
.
discard
=
function
discard
(
aRequest
)
{
}
;
this
.
isAnimated
=
function
isAnimated
(
aRequest
)
{
}
;
this
.
hasTransparency
=
function
hasTransparency
(
aRequest
)
{
}
;
}
await
new
Promise
(
resolve
=
>
content
.
window
.
setTimeout
(
resolve
0
)
)
;
let
frameCount
=
0
;
const
observer
=
new
ImageDecoderObserverStub
(
)
;
observer
.
frameUpdate
=
(
)
=
>
{
frameCount
+
+
;
}
;
observer
.
loadComplete
=
(
)
=
>
{
frameCount
-
-
;
}
;
const
gObserver
=
SpecialPowers
.
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
SpecialPowers
.
Ci
.
imgITools
)
.
createScriptedObserver
(
observer
)
;
const
img
=
content
.
document
.
getElementById
(
"
img
"
)
;
SpecialPowers
.
wrap
(
img
)
.
addObserver
(
gObserver
)
;
await
new
Promise
(
resolve
=
>
content
.
window
.
setTimeout
(
resolve
time
)
)
;
SpecialPowers
.
wrap
(
img
)
.
removeObserver
(
gObserver
)
;
return
frameCount
;
}
const
iframe
=
await
SpecialPowers
.
spawn
(
browser
[
iframeURL
]
setup
)
;
await
SpecialPowers
.
spawn
(
iframe
[
]
setupImage
)
;
let
frameCount
=
await
SpecialPowers
.
spawn
(
iframe
[
1000
]
observeFrameUpdate
)
;
if
(
frameCount
=
=
0
)
{
is
(
frameCount
0
"
no
frameupdates
"
)
;
}
else
{
todo_is
(
frameCount
0
"
no
frameupdates
"
)
;
}
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
const
scroller
=
content
.
document
.
getElementById
(
"
scroller
"
)
;
scroller
.
scrollTo
(
{
left
:
0
top
:
9800
behavior
:
"
smooth
"
}
)
;
await
new
Promise
(
resolve
=
>
content
.
window
.
setTimeout
(
resolve
1000
)
)
;
}
)
;
await
new
Promise
(
resolve
=
>
requestAnimationFrame
(
resolve
)
)
;
frameCount
=
await
SpecialPowers
.
spawn
(
iframe
[
1000
]
observeFrameUpdate
)
;
Assert
.
greater
(
frameCount
0
"
There
should
be
frameUpdate
(
s
)
"
)
;
await
new
Promise
(
resolve
=
>
requestAnimationFrame
(
resolve
)
)
;
await
SpecialPowers
.
spawn
(
iframe
[
]
async
(
)
=
>
{
const
img
=
content
.
document
.
getElementById
(
"
img
"
)
;
img
.
style
=
"
position
:
absolute
;
top
:
9000px
;
"
;
await
new
Promise
(
resolve
=
>
content
.
window
.
requestAnimationFrame
(
resolve
)
)
;
}
)
;
await
new
Promise
(
resolve
=
>
requestAnimationFrame
(
resolve
)
)
;
frameCount
=
await
SpecialPowers
.
spawn
(
iframe
[
1000
]
observeFrameUpdate
)
;
is
(
frameCount
0
"
No
frameUpdate
should
happen
"
)
;
}
finally
{
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
}
)
;
