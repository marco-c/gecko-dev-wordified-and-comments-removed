"
use
strict
"
;
const
SIMPLE_HTML
=
"
data
:
text
/
html
<
html
>
<
head
>
<
/
head
>
<
body
>
<
/
body
>
<
/
html
>
"
;
function
getManifestDir
(
)
{
let
path
=
getTestFilePath
(
"
browser_docshell_type_editor
"
)
;
let
file
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
file
.
initWithPath
(
path
)
;
return
file
;
}
add_task
(
async
function
(
)
{
info
(
"
docshell
of
appType
APP_TYPE_EDITOR
can
access
privileged
images
.
"
)
;
let
manifestDir
=
getManifestDir
(
)
;
Components
.
manager
.
addBootstrappedManifestLocation
(
manifestDir
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
SIMPLE_HTML
}
async
function
(
browser
)
{
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
let
rootDocShell
=
docShell
.
QueryInterface
(
Ci
.
nsIDocShellTreeItem
)
.
rootTreeItem
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDocShell
)
;
let
defaultAppType
=
rootDocShell
.
appType
;
rootDocShell
.
appType
=
Ci
.
nsIDocShell
.
APP_TYPE_EDITOR
;
is
(
rootDocShell
.
appType
Ci
.
nsIDocShell
.
APP_TYPE_EDITOR
"
sanity
check
:
appType
after
update
should
be
type
editor
"
)
;
return
new
Promise
(
resolve
=
>
{
let
doc
=
content
.
document
;
let
image
=
doc
.
createElement
(
"
img
"
)
;
image
.
onload
=
function
(
)
{
ok
(
true
"
APP_TYPE_EDITOR
is
allowed
to
load
privileged
image
"
)
;
rootDocShell
.
appType
=
defaultAppType
;
resolve
(
)
;
}
image
.
onerror
=
function
(
)
{
ok
(
false
"
APP_TYPE_EDITOR
is
allowed
to
load
privileged
image
"
)
;
rootDocShell
.
appType
=
defaultAppType
;
resolve
(
)
;
}
doc
.
body
.
appendChild
(
image
)
;
image
.
src
=
"
chrome
:
/
/
test1
/
skin
/
privileged
.
png
"
;
}
)
;
}
)
;
}
)
;
Components
.
manager
.
removeBootstrappedManifestLocation
(
manifestDir
)
;
}
)
;
add_task
(
async
function
(
)
{
info
(
"
docshell
of
appType
APP_TYPE_UNKNOWN
can
*
not
*
access
privileged
images
.
"
)
;
let
manifestDir
=
getManifestDir
(
)
;
Components
.
manager
.
addBootstrappedManifestLocation
(
manifestDir
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
SIMPLE_HTML
}
async
function
(
browser
)
{
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
let
rootDocShell
=
docShell
.
QueryInterface
(
Ci
.
nsIDocShellTreeItem
)
.
rootTreeItem
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDocShell
)
;
let
defaultAppType
=
rootDocShell
.
appType
;
rootDocShell
.
appType
=
Ci
.
nsIDocShell
.
APP_TYPE_UNKNOWN
;
is
(
rootDocShell
.
appType
Ci
.
nsIDocShell
.
APP_TYPE_UNKNOWN
"
sanity
check
:
appType
of
docshell
should
be
unknown
"
)
;
return
new
Promise
(
resolve
=
>
{
let
doc
=
content
.
document
;
let
image
=
doc
.
createElement
(
"
img
"
)
;
image
.
onload
=
function
(
)
{
ok
(
false
"
APP_TYPE_UNKNOWN
is
*
not
*
allowed
to
acces
privileged
image
"
)
;
rootDocShell
.
appType
=
defaultAppType
;
resolve
(
)
;
}
image
.
onerror
=
function
(
)
{
ok
(
true
"
APP_TYPE_UNKNOWN
is
*
not
*
allowed
to
acces
privileged
image
"
)
;
rootDocShell
.
appType
=
defaultAppType
;
resolve
(
)
;
}
doc
.
body
.
appendChild
(
image
)
;
image
.
wrappedJSObject
.
src
=
"
chrome
:
/
/
test1
/
skin
/
privileged
.
png
"
;
}
)
;
}
)
;
}
)
;
Components
.
manager
.
removeBootstrappedManifestLocation
(
manifestDir
)
;
}
)
;
