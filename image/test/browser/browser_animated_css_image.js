"
use
strict
"
;
requestLongerTimeout
(
2
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_utils
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_native_event_utils
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
image
/
test
/
browser
/
animated_image_test_list
.
js
"
this
)
;
async
function
assertAnimates
(
thehtml
)
{
function
httpURL
(
sfilename
)
{
let
chromeURL
=
getRootDirectory
(
gTestPath
)
+
sfilename
;
return
chromeURL
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
mochi
.
test
:
8888
/
"
)
;
}
const
url
=
httpURL
(
"
helper_animated_css_image
.
html
"
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
const
{
rect
}
=
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
let
rect
=
content
.
document
.
documentElement
.
getBoundingClientRect
(
)
;
rect
.
x
+
=
content
.
window
.
mozInnerScreenX
;
rect
.
y
+
=
content
.
window
.
mozInnerScreenY
;
return
{
rect
}
;
}
)
;
let
blankSnapshot
=
await
getSnapshot
(
{
x
:
rect
.
x
y
:
rect
.
y
width
:
rect
.
width
height
:
rect
.
height
}
)
;
const
kNumRetries
=
600
;
info
(
"
testing
:
"
+
thehtml
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
thehtml
]
async
thehtml
=
>
{
const
theiframe
=
content
.
document
.
getElementById
(
"
iframe
"
)
;
let
load
=
new
Promise
(
resolve
=
>
{
theiframe
.
addEventListener
(
"
load
"
resolve
{
once
:
true
}
)
;
}
)
;
theiframe
.
srcdoc
=
thehtml
;
await
load
;
await
new
Promise
(
resolve
=
>
{
content
.
window
.
requestAnimationFrame
(
(
)
=
>
{
content
.
window
.
requestAnimationFrame
(
resolve
)
;
}
)
;
}
)
;
content
.
document
.
documentElement
.
getBoundingClientRect
(
)
;
await
new
Promise
(
resolve
=
>
{
content
.
window
.
requestAnimationFrame
(
(
)
=
>
{
content
.
window
.
requestAnimationFrame
(
resolve
)
;
}
)
;
}
)
;
}
)
;
let
initial
=
await
getSnapshot
(
{
x
:
rect
.
x
y
:
rect
.
y
width
:
rect
.
width
height
:
rect
.
height
}
)
;
{
let
equal
=
initial
=
=
blankSnapshot
;
for
(
let
i
=
0
;
i
<
kNumRetries
;
+
+
i
)
{
if
(
!
equal
)
{
break
;
}
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
new
Promise
(
resolve
=
>
{
content
.
window
.
requestAnimationFrame
(
(
)
=
>
{
content
.
window
.
requestAnimationFrame
(
resolve
)
;
}
)
;
}
)
;
}
)
;
initial
=
await
getSnapshot
(
{
x
:
rect
.
x
y
:
rect
.
y
width
:
rect
.
width
height
:
rect
.
height
}
)
;
equal
=
initial
=
=
blankSnapshot
;
}
ok
(
!
equal
"
Initial
snapshot
shouldn
'
t
be
blank
"
)
;
}
async
function
checkFrames
(
)
{
let
foundDifferent
=
false
;
let
foundInitialAgain
=
false
;
for
(
let
i
=
0
;
i
<
kNumRetries
;
+
+
i
)
{
let
current
=
await
getSnapshot
(
{
x
:
rect
.
x
y
:
rect
.
y
width
:
rect
.
width
height
:
rect
.
height
}
)
;
let
equal
=
initial
=
=
current
;
if
(
!
foundDifferent
&
&
!
equal
)
{
ok
(
true
Found
different
image
after
{
i
}
retries
)
;
foundDifferent
=
true
;
}
if
(
foundDifferent
&
&
equal
)
{
ok
(
true
Found
same
image
again
after
{
i
}
retries
)
;
foundInitialAgain
=
true
;
break
;
}
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
new
Promise
(
resolve
=
>
{
content
.
window
.
requestAnimationFrame
(
(
)
=
>
{
content
.
window
.
requestAnimationFrame
(
resolve
)
;
}
)
;
}
)
;
}
)
;
}
ok
(
foundDifferent
&
&
foundInitialAgain
Should
'
ve
found
a
different
snapshot
and
then
an
equal
one
after
{
kNumRetries
}
retries
)
;
}
for
(
let
j
=
0
;
j
<
5
;
j
+
+
)
{
await
checkFrames
(
)
;
}
BrowserTestUtils
.
removeTab
(
tab
)
;
}
add_task
(
async
(
)
=
>
{
for
(
let
{
html
}
of
kTests
)
{
await
assertAnimates
(
html
)
;
}
}
)
;
