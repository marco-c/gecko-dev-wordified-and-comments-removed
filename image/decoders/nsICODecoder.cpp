#
include
<
stdlib
.
h
>
#
include
"
mozilla
/
Endian
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
nsICODecoder
.
h
"
#
include
"
RasterImage
.
h
"
using
namespace
mozilla
:
:
gfx
;
namespace
mozilla
{
namespace
image
{
static
const
uint32_t
ICOHEADERSIZE
=
6
;
static
const
uint32_t
BITMAPINFOSIZE
=
40
;
uint32_t
nsICODecoder
:
:
CalcAlphaRowSize
(
)
{
uint32_t
rowSize
=
(
GetRealWidth
(
)
+
31
)
/
32
;
return
rowSize
*
4
;
}
uint16_t
nsICODecoder
:
:
GetNumColors
(
)
{
uint16_t
numColors
=
0
;
if
(
mBPP
<
=
8
)
{
switch
(
mBPP
)
{
case
1
:
numColors
=
2
;
break
;
case
4
:
numColors
=
16
;
break
;
case
8
:
numColors
=
256
;
break
;
default
:
numColors
=
(
uint16_t
)
-
1
;
}
}
return
numColors
;
}
nsICODecoder
:
:
nsICODecoder
(
RasterImage
*
aImage
)
:
Decoder
(
aImage
)
mLexer
(
Transition
:
:
To
(
ICOState
:
:
HEADER
ICOHEADERSIZE
)
)
mBiggestResourceColorDepth
(
0
)
mBestResourceDelta
(
INT_MIN
)
mBestResourceColorDepth
(
0
)
mNumIcons
(
0
)
mCurrIcon
(
0
)
mBPP
(
0
)
mMaskRowSize
(
0
)
mCurrMaskLine
(
0
)
mIsCursor
(
false
)
mHasMaskAlpha
(
false
)
{
}
void
nsICODecoder
:
:
FinishInternal
(
)
{
MOZ_ASSERT
(
!
HasError
(
)
"
Shouldn
'
t
call
FinishInternal
after
error
!
"
)
;
GetFinalStateFromContainedDecoder
(
)
;
}
void
nsICODecoder
:
:
FinishWithErrorInternal
(
)
{
GetFinalStateFromContainedDecoder
(
)
;
}
void
nsICODecoder
:
:
GetFinalStateFromContainedDecoder
(
)
{
if
(
!
mContainedDecoder
)
{
return
;
}
mContainedDecoder
-
>
CompleteDecode
(
)
;
mDecodeDone
=
mContainedDecoder
-
>
GetDecodeDone
(
)
;
mDataError
=
mDataError
|
|
mContainedDecoder
-
>
HasDataError
(
)
;
mFailCode
=
NS_SUCCEEDED
(
mFailCode
)
?
mContainedDecoder
-
>
GetDecoderError
(
)
:
mFailCode
;
mDecodeAborted
=
mContainedDecoder
-
>
WasAborted
(
)
;
mProgress
|
=
mContainedDecoder
-
>
TakeProgress
(
)
;
mInvalidRect
.
UnionRect
(
mInvalidRect
mContainedDecoder
-
>
TakeInvalidRect
(
)
)
;
mCurrentFrame
=
mContainedDecoder
-
>
GetCurrentFrameRef
(
)
;
MOZ_ASSERT
(
HasError
(
)
|
|
!
mCurrentFrame
|
|
mCurrentFrame
-
>
IsImageComplete
(
)
)
;
}
bool
nsICODecoder
:
:
FillBitmapFileHeaderBuffer
(
int8_t
*
bfh
)
{
memset
(
bfh
0
14
)
;
bfh
[
0
]
=
'
B
'
;
bfh
[
1
]
=
'
M
'
;
int32_t
dataOffset
=
0
;
int32_t
fileSize
=
0
;
dataOffset
=
BMPFILEHEADER
:
:
LENGTH
+
BITMAPINFOSIZE
;
if
(
mDirEntry
.
mBitCount
<
=
8
)
{
uint16_t
numColors
=
GetNumColors
(
)
;
if
(
numColors
=
=
(
uint16_t
)
-
1
)
{
return
false
;
}
dataOffset
+
=
4
*
numColors
;
fileSize
=
dataOffset
+
GetRealWidth
(
)
*
GetRealHeight
(
)
;
}
else
{
fileSize
=
dataOffset
+
(
mDirEntry
.
mBitCount
*
GetRealWidth
(
)
*
GetRealHeight
(
)
)
/
8
;
}
NativeEndian
:
:
swapToLittleEndianInPlace
(
&
fileSize
1
)
;
memcpy
(
bfh
+
2
&
fileSize
sizeof
(
fileSize
)
)
;
NativeEndian
:
:
swapToLittleEndianInPlace
(
&
dataOffset
1
)
;
memcpy
(
bfh
+
10
&
dataOffset
sizeof
(
dataOffset
)
)
;
return
true
;
}
bool
nsICODecoder
:
:
FixBitmapHeight
(
int8_t
*
bih
)
{
int32_t
height
;
memcpy
(
&
height
bih
+
8
sizeof
(
height
)
)
;
NativeEndian
:
:
swapFromLittleEndianInPlace
(
&
height
1
)
;
height
=
abs
(
height
)
;
height
/
=
2
;
if
(
height
>
256
)
{
return
false
;
}
if
(
height
=
=
256
)
{
mDirEntry
.
mHeight
=
0
;
}
else
{
mDirEntry
.
mHeight
=
(
int8_t
)
height
;
}
NativeEndian
:
:
swapToLittleEndianInPlace
(
&
height
1
)
;
memcpy
(
bih
+
8
&
height
sizeof
(
height
)
)
;
return
true
;
}
bool
nsICODecoder
:
:
FixBitmapWidth
(
int8_t
*
bih
)
{
int32_t
width
;
memcpy
(
&
width
bih
+
4
sizeof
(
width
)
)
;
NativeEndian
:
:
swapFromLittleEndianInPlace
(
&
width
1
)
;
if
(
width
>
256
)
{
return
false
;
}
if
(
width
=
=
256
)
{
mDirEntry
.
mWidth
=
0
;
}
else
{
mDirEntry
.
mWidth
=
(
int8_t
)
width
;
}
return
true
;
}
int32_t
nsICODecoder
:
:
ReadBPP
(
const
char
*
aBIH
)
{
const
int8_t
*
bih
=
reinterpret_cast
<
const
int8_t
*
>
(
aBIH
)
;
int32_t
bitsPerPixel
;
memcpy
(
&
bitsPerPixel
bih
+
14
sizeof
(
bitsPerPixel
)
)
;
NativeEndian
:
:
swapFromLittleEndianInPlace
(
&
bitsPerPixel
1
)
;
return
bitsPerPixel
;
}
int32_t
nsICODecoder
:
:
ReadBIHSize
(
const
char
*
aBIH
)
{
const
int8_t
*
bih
=
reinterpret_cast
<
const
int8_t
*
>
(
aBIH
)
;
int32_t
headerSize
;
memcpy
(
&
headerSize
bih
sizeof
(
headerSize
)
)
;
NativeEndian
:
:
swapFromLittleEndianInPlace
(
&
headerSize
1
)
;
return
headerSize
;
}
LexerTransition
<
ICOState
>
nsICODecoder
:
:
ReadHeader
(
const
char
*
aData
)
{
if
(
(
aData
[
2
]
!
=
1
)
&
&
(
aData
[
2
]
!
=
2
)
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
mIsCursor
=
(
aData
[
2
]
=
=
2
)
;
mNumIcons
=
LittleEndian
:
:
readUint16
(
reinterpret_cast
<
const
uint16_t
*
>
(
aData
+
4
)
)
;
if
(
mNumIcons
=
=
0
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
SUCCESS
)
;
}
PostHasTransparency
(
)
;
return
Transition
:
:
To
(
ICOState
:
:
DIR_ENTRY
ICODIRENTRYSIZE
)
;
}
size_t
nsICODecoder
:
:
FirstResourceOffset
(
)
const
{
MOZ_ASSERT
(
mNumIcons
>
0
"
Calling
FirstResourceOffset
before
processing
header
"
)
;
return
ICOHEADERSIZE
+
mNumIcons
*
ICODIRENTRYSIZE
;
}
LexerTransition
<
ICOState
>
nsICODecoder
:
:
ReadDirEntry
(
const
char
*
aData
)
{
mCurrIcon
+
+
;
IconDirEntry
e
;
memset
(
&
e
0
sizeof
(
e
)
)
;
memcpy
(
&
e
.
mWidth
aData
sizeof
(
e
.
mWidth
)
)
;
memcpy
(
&
e
.
mHeight
aData
+
1
sizeof
(
e
.
mHeight
)
)
;
memcpy
(
&
e
.
mColorCount
aData
+
2
sizeof
(
e
.
mColorCount
)
)
;
memcpy
(
&
e
.
mReserved
aData
+
3
sizeof
(
e
.
mReserved
)
)
;
memcpy
(
&
e
.
mPlanes
aData
+
4
sizeof
(
e
.
mPlanes
)
)
;
e
.
mPlanes
=
LittleEndian
:
:
readUint16
(
&
e
.
mPlanes
)
;
memcpy
(
&
e
.
mBitCount
aData
+
6
sizeof
(
e
.
mBitCount
)
)
;
e
.
mBitCount
=
LittleEndian
:
:
readUint16
(
&
e
.
mBitCount
)
;
memcpy
(
&
e
.
mBytesInRes
aData
+
8
sizeof
(
e
.
mBytesInRes
)
)
;
e
.
mBytesInRes
=
LittleEndian
:
:
readUint32
(
&
e
.
mBytesInRes
)
;
memcpy
(
&
e
.
mImageOffset
aData
+
12
sizeof
(
e
.
mImageOffset
)
)
;
e
.
mImageOffset
=
LittleEndian
:
:
readUint32
(
&
e
.
mImageOffset
)
;
IntSize
entrySize
(
GetRealWidth
(
e
)
GetRealHeight
(
e
)
)
;
if
(
e
.
mBitCount
>
=
mBiggestResourceColorDepth
&
&
entrySize
.
width
*
entrySize
.
height
>
=
mBiggestResourceSize
.
width
*
mBiggestResourceSize
.
height
)
{
mBiggestResourceSize
=
entrySize
;
mBiggestResourceColorDepth
=
e
.
mBitCount
;
mBiggestResourceHotSpot
=
IntSize
(
e
.
mXHotspot
e
.
mYHotspot
)
;
if
(
!
mDownscaler
)
{
mDirEntry
=
e
;
}
}
if
(
mDownscaler
)
{
IntSize
desiredSize
=
mDownscaler
-
>
TargetSize
(
)
;
int32_t
delta
=
entrySize
.
width
-
desiredSize
.
width
+
entrySize
.
height
-
desiredSize
.
height
;
if
(
e
.
mBitCount
>
=
mBestResourceColorDepth
&
&
(
(
mBestResourceDelta
<
0
&
&
delta
>
=
mBestResourceDelta
)
|
|
(
delta
>
=
0
&
&
delta
<
=
mBestResourceDelta
)
)
)
{
mBestResourceDelta
=
delta
;
mBestResourceColorDepth
=
e
.
mBitCount
;
mDirEntry
=
e
;
}
}
if
(
mCurrIcon
=
=
mNumIcons
)
{
if
(
mDirEntry
.
mImageOffset
<
FirstResourceOffset
(
)
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
if
(
mIsCursor
)
{
mImageMetadata
.
SetHotspot
(
mBiggestResourceHotSpot
.
width
mBiggestResourceHotSpot
.
height
)
;
}
PostSize
(
mBiggestResourceSize
.
width
mBiggestResourceSize
.
height
)
;
if
(
IsMetadataDecode
(
)
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
SUCCESS
)
;
}
if
(
mDownscaler
&
&
GetRealSize
(
)
=
=
mDownscaler
-
>
TargetSize
(
)
)
{
mDownscaler
.
reset
(
)
;
}
size_t
offsetToResource
=
mDirEntry
.
mImageOffset
-
FirstResourceOffset
(
)
;
return
Transition
:
:
ToUnbuffered
(
ICOState
:
:
FOUND_RESOURCE
ICOState
:
:
SKIP_TO_RESOURCE
offsetToResource
)
;
}
return
Transition
:
:
To
(
ICOState
:
:
DIR_ENTRY
ICODIRENTRYSIZE
)
;
}
LexerTransition
<
ICOState
>
nsICODecoder
:
:
SniffResource
(
const
char
*
aData
)
{
bool
isPNG
=
!
memcmp
(
aData
nsPNGDecoder
:
:
pngSignatureBytes
PNGSIGNATURESIZE
)
;
if
(
isPNG
)
{
mContainedDecoder
=
new
nsPNGDecoder
(
mImage
)
;
mContainedDecoder
-
>
SetMetadataDecode
(
IsMetadataDecode
(
)
)
;
mContainedDecoder
-
>
SetDecoderFlags
(
GetDecoderFlags
(
)
)
;
mContainedDecoder
-
>
SetSurfaceFlags
(
GetSurfaceFlags
(
)
)
;
if
(
mDownscaler
)
{
mContainedDecoder
-
>
SetTargetSize
(
mDownscaler
-
>
TargetSize
(
)
)
;
}
mContainedDecoder
-
>
Init
(
)
;
if
(
!
WriteToContainedDecoder
(
aData
PNGSIGNATURESIZE
)
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
if
(
mDirEntry
.
mBytesInRes
<
=
PNGSIGNATURESIZE
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
size_t
toRead
=
mDirEntry
.
mBytesInRes
-
PNGSIGNATURESIZE
;
return
Transition
:
:
ToUnbuffered
(
ICOState
:
:
FINISHED_RESOURCE
ICOState
:
:
READ_PNG
toRead
)
;
}
else
{
nsBMPDecoder
*
bmpDecoder
=
new
nsBMPDecoder
(
mImage
)
;
mContainedDecoder
=
bmpDecoder
;
bmpDecoder
-
>
SetUseAlphaData
(
true
)
;
mContainedDecoder
-
>
SetMetadataDecode
(
IsMetadataDecode
(
)
)
;
mContainedDecoder
-
>
SetDecoderFlags
(
GetDecoderFlags
(
)
)
;
mContainedDecoder
-
>
SetSurfaceFlags
(
GetSurfaceFlags
(
)
)
;
if
(
mDownscaler
)
{
mContainedDecoder
-
>
SetTargetSize
(
mDownscaler
-
>
TargetSize
(
)
)
;
}
mContainedDecoder
-
>
Init
(
)
;
int32_t
bihSize
=
ReadBIHSize
(
aData
)
;
if
(
bihSize
!
=
static_cast
<
int32_t
>
(
BITMAPINFOSIZE
)
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
memcpy
(
mBIHraw
aData
PNGSIGNATURESIZE
)
;
return
Transition
:
:
To
(
ICOState
:
:
READ_BIH
BITMAPINFOSIZE
-
PNGSIGNATURESIZE
)
;
}
}
LexerTransition
<
ICOState
>
nsICODecoder
:
:
ReadPNG
(
const
char
*
aData
uint32_t
aLen
)
{
if
(
!
WriteToContainedDecoder
(
aData
aLen
)
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
if
(
!
static_cast
<
nsPNGDecoder
*
>
(
mContainedDecoder
.
get
(
)
)
-
>
IsValidICO
(
)
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
return
Transition
:
:
ContinueUnbuffered
(
ICOState
:
:
READ_PNG
)
;
}
LexerTransition
<
ICOState
>
nsICODecoder
:
:
ReadBIH
(
const
char
*
aData
)
{
memcpy
(
mBIHraw
+
PNGSIGNATURESIZE
aData
BITMAPINFOSIZE
-
PNGSIGNATURESIZE
)
;
mBPP
=
ReadBPP
(
mBIHraw
)
;
int8_t
bfhBuffer
[
BMPFILEHEADERSIZE
]
;
if
(
!
FillBitmapFileHeaderBuffer
(
bfhBuffer
)
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
if
(
!
WriteToContainedDecoder
(
reinterpret_cast
<
const
char
*
>
(
bfhBuffer
)
sizeof
(
bfhBuffer
)
)
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
if
(
!
FixBitmapHeight
(
reinterpret_cast
<
int8_t
*
>
(
mBIHraw
)
)
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
if
(
!
FixBitmapWidth
(
reinterpret_cast
<
int8_t
*
>
(
mBIHraw
)
)
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
if
(
!
WriteToContainedDecoder
(
mBIHraw
sizeof
(
mBIHraw
)
)
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
RefPtr
<
nsBMPDecoder
>
bmpDecoder
=
static_cast
<
nsBMPDecoder
*
>
(
mContainedDecoder
.
get
(
)
)
;
mBPP
=
bmpDecoder
-
>
GetBitsPerPixel
(
)
;
uint16_t
numColors
=
GetNumColors
(
)
;
if
(
numColors
=
=
uint16_t
(
-
1
)
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
uint32_t
bmpDataLength
=
bmpDecoder
-
>
GetCompressedImageSize
(
)
+
4
*
numColors
;
bool
hasANDMask
=
(
BITMAPINFOSIZE
+
bmpDataLength
)
<
mDirEntry
.
mBytesInRes
;
ICOState
afterBMPState
=
hasANDMask
?
ICOState
:
:
PREPARE_FOR_MASK
:
ICOState
:
:
FINISHED_RESOURCE
;
return
Transition
:
:
ToUnbuffered
(
afterBMPState
ICOState
:
:
READ_BMP
bmpDataLength
)
;
}
LexerTransition
<
ICOState
>
nsICODecoder
:
:
ReadBMP
(
const
char
*
aData
uint32_t
aLen
)
{
if
(
!
WriteToContainedDecoder
(
aData
aLen
)
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
return
Transition
:
:
ContinueUnbuffered
(
ICOState
:
:
READ_BMP
)
;
}
LexerTransition
<
ICOState
>
nsICODecoder
:
:
PrepareForMask
(
)
{
RefPtr
<
nsBMPDecoder
>
bmpDecoder
=
static_cast
<
nsBMPDecoder
*
>
(
mContainedDecoder
.
get
(
)
)
;
uint16_t
numColors
=
GetNumColors
(
)
;
MOZ_ASSERT
(
numColors
!
=
uint16_t
(
-
1
)
)
;
uint32_t
bmpLengthWithHeader
=
BITMAPINFOSIZE
+
bmpDecoder
-
>
GetCompressedImageSize
(
)
+
4
*
numColors
;
MOZ_ASSERT
(
bmpLengthWithHeader
<
mDirEntry
.
mBytesInRes
)
;
uint32_t
maskLength
=
mDirEntry
.
mBytesInRes
-
bmpLengthWithHeader
;
if
(
(
bmpDecoder
-
>
GetBitsPerPixel
(
)
=
=
32
&
&
bmpDecoder
-
>
HasAlphaData
(
)
)
|
|
GetRealWidth
(
)
=
=
0
|
|
GetRealHeight
(
)
=
=
0
)
{
return
Transition
:
:
ToUnbuffered
(
ICOState
:
:
FINISHED_RESOURCE
ICOState
:
:
SKIP_MASK
maskLength
)
;
}
mMaskRowSize
=
(
(
GetRealWidth
(
)
+
31
)
/
32
)
*
4
;
uint32_t
expectedLength
=
mMaskRowSize
*
GetRealHeight
(
)
;
if
(
maskLength
<
expectedLength
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
if
(
mDownscaler
)
{
MOZ_ASSERT
(
bmpDecoder
-
>
GetImageDataLength
(
)
=
=
mDownscaler
-
>
TargetSize
(
)
.
width
*
mDownscaler
-
>
TargetSize
(
)
.
height
*
sizeof
(
uint32_t
)
)
;
mMaskBuffer
=
MakeUnique
<
uint8_t
[
]
>
(
bmpDecoder
-
>
GetImageDataLength
(
)
)
;
nsresult
rv
=
mDownscaler
-
>
BeginFrame
(
GetRealSize
(
)
Nothing
(
)
mMaskBuffer
.
get
(
)
true
true
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
}
mCurrMaskLine
=
GetRealHeight
(
)
;
return
Transition
:
:
To
(
ICOState
:
:
READ_MASK_ROW
mMaskRowSize
)
;
}
LexerTransition
<
ICOState
>
nsICODecoder
:
:
ReadMaskRow
(
const
char
*
aData
)
{
mCurrMaskLine
-
-
;
uint8_t
sawTransparency
=
0
;
const
uint8_t
*
mask
=
reinterpret_cast
<
const
uint8_t
*
>
(
aData
)
;
const
uint8_t
*
maskRowEnd
=
mask
+
mMaskRowSize
;
uint32_t
*
decoded
=
nullptr
;
if
(
mDownscaler
)
{
memset
(
mDownscaler
-
>
RowBuffer
(
)
0xFF
GetRealWidth
(
)
*
sizeof
(
uint32_t
)
)
;
decoded
=
reinterpret_cast
<
uint32_t
*
>
(
mDownscaler
-
>
RowBuffer
(
)
)
;
}
else
{
RefPtr
<
nsBMPDecoder
>
bmpDecoder
=
static_cast
<
nsBMPDecoder
*
>
(
mContainedDecoder
.
get
(
)
)
;
uint32_t
*
imageData
=
bmpDecoder
-
>
GetImageData
(
)
;
if
(
!
imageData
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
decoded
=
imageData
+
mCurrMaskLine
*
GetRealWidth
(
)
;
}
MOZ_ASSERT
(
decoded
)
;
uint32_t
*
decodedRowEnd
=
decoded
+
GetRealWidth
(
)
;
while
(
mask
<
maskRowEnd
)
{
uint8_t
idx
=
*
mask
+
+
;
sawTransparency
|
=
idx
;
for
(
uint8_t
bit
=
0x80
;
bit
&
&
decoded
<
decodedRowEnd
;
bit
>
>
=
1
)
{
if
(
idx
&
bit
)
{
*
decoded
=
0
;
}
decoded
+
+
;
}
}
if
(
mDownscaler
)
{
mDownscaler
-
>
CommitRow
(
)
;
}
if
(
sawTransparency
)
{
mHasMaskAlpha
=
true
;
}
if
(
mCurrMaskLine
=
=
0
)
{
return
Transition
:
:
To
(
ICOState
:
:
FINISH_MASK
0
)
;
}
return
Transition
:
:
To
(
ICOState
:
:
READ_MASK_ROW
mMaskRowSize
)
;
}
LexerTransition
<
ICOState
>
nsICODecoder
:
:
FinishMask
(
)
{
if
(
mDownscaler
)
{
RefPtr
<
nsBMPDecoder
>
bmpDecoder
=
static_cast
<
nsBMPDecoder
*
>
(
mContainedDecoder
.
get
(
)
)
;
uint8_t
*
imageData
=
reinterpret_cast
<
uint8_t
*
>
(
bmpDecoder
-
>
GetImageData
(
)
)
;
if
(
!
imageData
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
MOZ_ASSERT
(
mMaskBuffer
)
;
MOZ_ASSERT
(
bmpDecoder
-
>
GetImageDataLength
(
)
>
0
)
;
for
(
size_t
i
=
3
;
i
<
bmpDecoder
-
>
GetImageDataLength
(
)
;
i
+
=
4
)
{
imageData
[
i
]
=
mMaskBuffer
[
i
]
;
}
}
if
(
mHasMaskAlpha
)
{
PostHasTransparency
(
)
;
RefPtr
<
nsBMPDecoder
>
bmpDecoder
=
static_cast
<
nsBMPDecoder
*
>
(
mContainedDecoder
.
get
(
)
)
;
bmpDecoder
-
>
SetHasAlphaData
(
)
;
}
return
Transition
:
:
To
(
ICOState
:
:
FINISHED_RESOURCE
0
)
;
}
LexerTransition
<
ICOState
>
nsICODecoder
:
:
FinishResource
(
)
{
if
(
mContainedDecoder
-
>
HasSize
(
)
&
&
mContainedDecoder
-
>
GetSize
(
)
!
=
GetRealSize
(
)
)
{
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
return
Transition
:
:
Terminate
(
ICOState
:
:
SUCCESS
)
;
}
void
nsICODecoder
:
:
WriteInternal
(
const
char
*
aBuffer
uint32_t
aCount
)
{
MOZ_ASSERT
(
!
HasError
(
)
"
Shouldn
'
t
call
WriteInternal
after
error
!
"
)
;
MOZ_ASSERT
(
aBuffer
)
;
MOZ_ASSERT
(
aCount
>
0
)
;
Maybe
<
ICOState
>
terminalState
=
mLexer
.
Lex
(
aBuffer
aCount
[
=
]
(
ICOState
aState
const
char
*
aData
size_t
aLength
)
{
switch
(
aState
)
{
case
ICOState
:
:
HEADER
:
return
ReadHeader
(
aData
)
;
case
ICOState
:
:
DIR_ENTRY
:
return
ReadDirEntry
(
aData
)
;
case
ICOState
:
:
SKIP_TO_RESOURCE
:
return
Transition
:
:
ContinueUnbuffered
(
ICOState
:
:
SKIP_TO_RESOURCE
)
;
case
ICOState
:
:
FOUND_RESOURCE
:
return
Transition
:
:
To
(
ICOState
:
:
SNIFF_RESOURCE
PNGSIGNATURESIZE
)
;
case
ICOState
:
:
SNIFF_RESOURCE
:
return
SniffResource
(
aData
)
;
case
ICOState
:
:
READ_PNG
:
return
ReadPNG
(
aData
aLength
)
;
case
ICOState
:
:
READ_BIH
:
return
ReadBIH
(
aData
)
;
case
ICOState
:
:
READ_BMP
:
return
ReadBMP
(
aData
aLength
)
;
case
ICOState
:
:
PREPARE_FOR_MASK
:
return
PrepareForMask
(
)
;
case
ICOState
:
:
READ_MASK_ROW
:
return
ReadMaskRow
(
aData
)
;
case
ICOState
:
:
FINISH_MASK
:
return
FinishMask
(
)
;
case
ICOState
:
:
SKIP_MASK
:
return
Transition
:
:
ContinueUnbuffered
(
ICOState
:
:
SKIP_MASK
)
;
case
ICOState
:
:
FINISHED_RESOURCE
:
return
FinishResource
(
)
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
ICOState
"
)
;
return
Transition
:
:
Terminate
(
ICOState
:
:
FAILURE
)
;
}
}
)
;
if
(
!
terminalState
)
{
return
;
}
if
(
*
terminalState
=
=
ICOState
:
:
FAILURE
)
{
PostDataError
(
)
;
return
;
}
MOZ_ASSERT
(
*
terminalState
=
=
ICOState
:
:
SUCCESS
)
;
}
bool
nsICODecoder
:
:
WriteToContainedDecoder
(
const
char
*
aBuffer
uint32_t
aCount
)
{
mContainedDecoder
-
>
Write
(
aBuffer
aCount
)
;
mProgress
|
=
mContainedDecoder
-
>
TakeProgress
(
)
;
mInvalidRect
.
UnionRect
(
mInvalidRect
mContainedDecoder
-
>
TakeInvalidRect
(
)
)
;
if
(
mContainedDecoder
-
>
HasDataError
(
)
)
{
PostDataError
(
)
;
}
if
(
mContainedDecoder
-
>
HasDecoderError
(
)
)
{
PostDecoderError
(
mContainedDecoder
-
>
GetDecoderError
(
)
)
;
}
return
!
HasError
(
)
;
}
}
}
