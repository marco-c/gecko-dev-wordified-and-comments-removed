#
ifndef
mozilla_image_decoders_nsAVIFDecoder_h
#
define
mozilla_image_decoders_nsAVIFDecoder_h
#
include
"
Decoder
.
h
"
#
include
"
mp4parse
.
h
"
#
include
"
SurfacePipe
.
h
"
#
include
"
aom
/
aom_decoder
.
h
"
#
include
"
dav1d
/
dav1d
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
namespace
mozilla
{
namespace
image
{
class
RasterImage
;
class
nsAVIFDecoder
final
:
public
Decoder
{
public
:
virtual
~
nsAVIFDecoder
(
)
;
DecoderType
GetType
(
)
const
override
{
return
DecoderType
:
:
AVIF
;
}
protected
:
LexerResult
DoDecode
(
SourceBufferIterator
&
aIterator
IResumable
*
aOnResume
)
override
;
private
:
friend
class
DecoderFactory
;
friend
class
AVIFDecoderInterface
;
explicit
nsAVIFDecoder
(
RasterImage
*
aImage
)
;
static
intptr_t
ReadSource
(
uint8_t
*
aDestBuf
uintptr_t
aDestBufSize
void
*
aUserData
)
;
typedef
int
Dav1dResult
;
enum
class
NonAOMCodecError
{
NoFrame
SizeOverflow
}
;
typedef
Variant
<
aom_codec_err_t
NonAOMCodecError
>
AOMResult
;
enum
class
NonDecoderResult
{
NeedMoreData
MetadataOk
ParseError
NoPrimaryItem
SizeOverflow
OutOfMemory
PipeInitError
WriteBufferError
AlphaYSizeMismatch
AlphaYColorDepthMismatch
}
;
using
DecodeResult
=
Variant
<
NonDecoderResult
Dav1dResult
AOMResult
>
;
DecodeResult
Decode
(
SourceBufferIterator
&
aIterator
IResumable
*
aOnResume
)
;
static
bool
IsDecodeSuccess
(
const
DecodeResult
&
aResult
)
;
void
RecordDecodeResultTelemetry
(
const
DecodeResult
&
aResult
)
;
Vector
<
uint8_t
>
mBufferedData
;
const
uint8_t
*
mReadCursor
=
nullptr
;
}
;
}
}
#
endif
