#
include
"
nsIconDecoder
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nspr
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsError
.
h
"
#
include
"
RasterImage
.
h
"
#
include
<
algorithm
>
using
namespace
mozilla
:
:
gfx
;
using
std
:
:
min
;
namespace
mozilla
{
namespace
image
{
static
const
uint32_t
ICON_HEADER_SIZE
=
2
;
nsIconDecoder
:
:
nsIconDecoder
(
RasterImage
*
aImage
)
:
Decoder
(
aImage
)
mLexer
(
Transition
:
:
To
(
State
:
:
HEADER
ICON_HEADER_SIZE
)
)
mWidth
(
)
mHeight
(
)
mBytesPerRow
(
)
mCurrentRow
(
0
)
{
}
nsIconDecoder
:
:
~
nsIconDecoder
(
)
{
}
void
nsIconDecoder
:
:
WriteInternal
(
const
char
*
aBuffer
uint32_t
aCount
)
{
MOZ_ASSERT
(
!
HasError
(
)
"
Shouldn
'
t
call
WriteInternal
after
error
!
"
)
;
MOZ_ASSERT
(
aBuffer
)
;
MOZ_ASSERT
(
aCount
>
0
)
;
Maybe
<
TerminalState
>
terminalState
=
mLexer
.
Lex
(
aBuffer
aCount
[
=
]
(
State
aState
const
char
*
aData
size_t
aLength
)
{
switch
(
aState
)
{
case
State
:
:
HEADER
:
return
ReadHeader
(
aData
)
;
case
State
:
:
ROW_OF_PIXELS
:
return
ReadRowOfPixels
(
aData
aLength
)
;
case
State
:
:
FINISH
:
return
Finish
(
)
;
default
:
MOZ_CRASH
(
"
Unknown
State
"
)
;
}
}
)
;
if
(
terminalState
=
=
Some
(
TerminalState
:
:
FAILURE
)
)
{
PostDataError
(
)
;
}
}
LexerTransition
<
nsIconDecoder
:
:
State
>
nsIconDecoder
:
:
ReadHeader
(
const
char
*
aData
)
{
mWidth
=
uint8_t
(
aData
[
0
]
)
;
mHeight
=
uint8_t
(
aData
[
1
]
)
;
mBytesPerRow
=
mWidth
*
4
;
PostSize
(
mWidth
mHeight
)
;
PostHasTransparency
(
)
;
if
(
IsMetadataDecode
(
)
)
{
return
Transition
:
:
TerminateSuccess
(
)
;
}
MOZ_ASSERT
(
!
mImageData
"
Already
have
a
buffer
allocated
?
"
)
;
IntSize
targetSize
=
mDownscaler
?
mDownscaler
-
>
TargetSize
(
)
:
GetSize
(
)
;
nsresult
rv
=
AllocateFrame
(
0
targetSize
IntRect
(
IntPoint
(
)
targetSize
)
gfx
:
:
SurfaceFormat
:
:
B8G8R8A8
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
Transition
:
:
TerminateFailure
(
)
;
}
MOZ_ASSERT
(
mImageData
"
Should
have
a
buffer
now
"
)
;
if
(
mDownscaler
)
{
nsresult
rv
=
mDownscaler
-
>
BeginFrame
(
GetSize
(
)
Nothing
(
)
mImageData
true
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
Transition
:
:
TerminateFailure
(
)
;
}
}
return
Transition
:
:
To
(
State
:
:
ROW_OF_PIXELS
mBytesPerRow
)
;
}
LexerTransition
<
nsIconDecoder
:
:
State
>
nsIconDecoder
:
:
ReadRowOfPixels
(
const
char
*
aData
size_t
aLength
)
{
if
(
mDownscaler
)
{
memcpy
(
mDownscaler
-
>
RowBuffer
(
)
aData
mBytesPerRow
)
;
mDownscaler
-
>
CommitRow
(
)
;
if
(
mDownscaler
-
>
HasInvalidation
(
)
)
{
DownscalerInvalidRect
invalidRect
=
mDownscaler
-
>
TakeInvalidRect
(
)
;
PostInvalidation
(
invalidRect
.
mOriginalSizeRect
Some
(
invalidRect
.
mTargetSizeRect
)
)
;
}
}
else
{
memcpy
(
mImageData
+
mCurrentRow
*
mBytesPerRow
aData
mBytesPerRow
)
;
PostInvalidation
(
IntRect
(
0
mCurrentRow
mWidth
1
)
)
;
}
mCurrentRow
+
+
;
return
(
mCurrentRow
<
mHeight
)
?
Transition
:
:
To
(
State
:
:
ROW_OF_PIXELS
mBytesPerRow
)
:
Transition
:
:
To
(
State
:
:
FINISH
0
)
;
}
LexerTransition
<
nsIconDecoder
:
:
State
>
nsIconDecoder
:
:
Finish
(
)
{
PostFrameStop
(
)
;
PostDecodeDone
(
)
;
return
Transition
:
:
TerminateSuccess
(
)
;
}
}
}
