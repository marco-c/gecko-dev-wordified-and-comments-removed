#
include
"
nsIconDecoder
.
h
"
#
include
"
RasterImage
.
h
"
#
include
"
SurfacePipeFactory
.
h
"
using
namespace
mozilla
:
:
gfx
;
namespace
mozilla
{
namespace
image
{
static
const
uint32_t
ICON_HEADER_SIZE
=
2
;
nsIconDecoder
:
:
nsIconDecoder
(
RasterImage
*
aImage
)
:
Decoder
(
aImage
)
mLexer
(
Transition
:
:
To
(
State
:
:
HEADER
ICON_HEADER_SIZE
)
Transition
:
:
TerminateSuccess
(
)
)
mBytesPerRow
(
)
{
}
nsIconDecoder
:
:
~
nsIconDecoder
(
)
{
}
LexerResult
nsIconDecoder
:
:
DoDecode
(
SourceBufferIterator
&
aIterator
IResumable
*
aOnResume
)
{
MOZ_ASSERT
(
!
HasError
(
)
"
Shouldn
'
t
call
DoDecode
after
error
!
"
)
;
return
mLexer
.
Lex
(
aIterator
aOnResume
[
=
]
(
State
aState
const
char
*
aData
size_t
aLength
)
{
switch
(
aState
)
{
case
State
:
:
HEADER
:
return
ReadHeader
(
aData
)
;
case
State
:
:
ROW_OF_PIXELS
:
return
ReadRowOfPixels
(
aData
aLength
)
;
case
State
:
:
FINISH
:
return
Finish
(
)
;
default
:
MOZ_CRASH
(
"
Unknown
State
"
)
;
}
}
)
;
}
LexerTransition
<
nsIconDecoder
:
:
State
>
nsIconDecoder
:
:
ReadHeader
(
const
char
*
aData
)
{
uint8_t
width
=
uint8_t
(
aData
[
0
]
)
;
uint8_t
height
=
uint8_t
(
aData
[
1
]
)
;
mBytesPerRow
=
width
*
4
;
PostSize
(
width
height
)
;
PostHasTransparency
(
)
;
if
(
IsMetadataDecode
(
)
)
{
return
Transition
:
:
TerminateSuccess
(
)
;
}
MOZ_ASSERT
(
!
mImageData
"
Already
have
a
buffer
allocated
?
"
)
;
IntSize
targetSize
=
mDownscaler
?
mDownscaler
-
>
TargetSize
(
)
:
GetSize
(
)
;
IntRect
frameRect
(
IntPoint
(
0
0
)
GetSize
(
)
)
;
Maybe
<
SurfacePipe
>
pipe
=
SurfacePipeFactory
:
:
CreateSurfacePipe
(
this
0
GetSize
(
)
targetSize
frameRect
SurfaceFormat
:
:
B8G8R8A8
SurfacePipeFlags
(
)
)
;
if
(
!
pipe
)
{
return
Transition
:
:
TerminateFailure
(
)
;
}
mPipe
=
Move
(
*
pipe
)
;
MOZ_ASSERT
(
mImageData
"
Should
have
a
buffer
now
"
)
;
return
Transition
:
:
To
(
State
:
:
ROW_OF_PIXELS
mBytesPerRow
)
;
}
LexerTransition
<
nsIconDecoder
:
:
State
>
nsIconDecoder
:
:
ReadRowOfPixels
(
const
char
*
aData
size_t
aLength
)
{
MOZ_ASSERT
(
aLength
%
4
=
=
0
"
Rows
should
contain
a
multiple
of
four
bytes
"
)
;
auto
result
=
mPipe
.
WritePixels
<
uint32_t
>
(
[
&
]
(
)
-
>
NextPixel
<
uint32_t
>
{
if
(
aLength
=
=
0
)
{
return
AsVariant
(
WriteState
:
:
NEED_MORE_DATA
)
;
}
uint32_t
pixel
=
*
reinterpret_cast
<
const
uint32_t
*
>
(
aData
)
;
aData
+
=
4
;
aLength
-
=
4
;
return
AsVariant
(
pixel
)
;
}
)
;
MOZ_ASSERT
(
result
!
=
WriteState
:
:
FAILURE
)
;
Maybe
<
SurfaceInvalidRect
>
invalidRect
=
mPipe
.
TakeInvalidRect
(
)
;
if
(
invalidRect
)
{
PostInvalidation
(
invalidRect
-
>
mInputSpaceRect
Some
(
invalidRect
-
>
mOutputSpaceRect
)
)
;
}
return
result
=
=
WriteState
:
:
FINISHED
?
Transition
:
:
To
(
State
:
:
FINISH
0
)
:
Transition
:
:
To
(
State
:
:
ROW_OF_PIXELS
mBytesPerRow
)
;
}
LexerTransition
<
nsIconDecoder
:
:
State
>
nsIconDecoder
:
:
Finish
(
)
{
PostFrameStop
(
)
;
PostDecodeDone
(
)
;
return
Transition
:
:
TerminateSuccess
(
)
;
}
}
}
