#
ifndef
mozilla_image_decoders_nsGIFDecoder2_h
#
define
mozilla_image_decoders_nsGIFDecoder2_h
#
include
"
Decoder
.
h
"
#
include
"
GIF2
.
h
"
#
include
"
SurfacePipe
.
h
"
namespace
mozilla
{
namespace
image
{
class
RasterImage
;
class
nsGIFDecoder2
:
public
Decoder
{
public
:
~
nsGIFDecoder2
(
)
;
virtual
void
WriteInternal
(
const
char
*
aBuffer
uint32_t
aCount
)
override
;
virtual
void
FinishInternal
(
)
override
;
virtual
Telemetry
:
:
ID
SpeedHistogram
(
)
override
;
private
:
friend
class
DecoderFactory
;
explicit
nsGIFDecoder2
(
RasterImage
*
aImage
)
;
void
BeginGIF
(
)
;
nsresult
BeginImageFrame
(
uint16_t
aDepth
)
;
void
EndImageFrame
(
)
;
void
FlushImageData
(
)
;
nsresult
GifWrite
(
const
uint8_t
*
buf
uint32_t
numbytes
)
;
template
<
typename
PixelSize
>
PixelSize
ColormapIndexToPixel
(
uint8_t
aIndex
)
;
template
<
typename
PixelSize
>
NextPixel
<
PixelSize
>
YieldPixel
(
const
uint8_t
*
&
aCurrentByte
)
;
bool
DoLzw
(
const
uint8_t
*
aData
)
;
bool
SetHold
(
const
uint8_t
*
buf
uint32_t
count
const
uint8_t
*
buf2
=
nullptr
uint32_t
count2
=
0
)
;
bool
CheckForTransparency
(
const
gfx
:
:
IntRect
&
aFrameRect
)
;
gfx
:
:
IntRect
ClampToImageRect
(
const
gfx
:
:
IntRect
&
aFrameRect
)
;
inline
int
ClearCode
(
)
const
{
return
1
<
<
mGIFStruct
.
datasize
;
}
uint32_t
mOldColor
;
int32_t
mCurrentFrameIndex
;
uint8_t
mColorMask
;
bool
mGIFOpen
;
bool
mSawTransparency
;
gif_struct
mGIFStruct
;
SurfacePipe
mPipe
;
}
;
}
}
#
endif
