#
ifndef
mozilla_image_ISurfaceProvider_h
#
define
mozilla_image_ISurfaceProvider_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
imgFrame
.
h
"
#
include
"
SurfaceCache
.
h
"
namespace
mozilla
{
namespace
image
{
class
CachedSurface
;
class
ISurfaceProvider
{
public
:
NS_IMETHOD_
(
MozExternalRefCountType
)
AddRef
(
)
=
0
;
NS_IMETHOD_
(
MozExternalRefCountType
)
Release
(
)
=
0
;
virtual
DrawableFrameRef
DrawableRef
(
)
=
0
;
virtual
bool
IsFinished
(
)
const
=
0
;
virtual
size_t
LogicalSizeInBytes
(
)
const
=
0
;
AvailabilityState
&
Availability
(
)
{
return
mAvailability
;
}
const
AvailabilityState
&
Availability
(
)
const
{
return
mAvailability
;
}
protected
:
explicit
ISurfaceProvider
(
AvailabilityState
aAvailability
)
:
mAvailability
(
aAvailability
)
{
}
virtual
~
ISurfaceProvider
(
)
{
}
virtual
bool
IsLocked
(
)
const
=
0
;
virtual
void
SetLocked
(
bool
aLocked
)
=
0
;
private
:
friend
class
CachedSurface
;
AvailabilityState
mAvailability
;
}
;
class
SimpleSurfaceProvider
final
:
public
ISurfaceProvider
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
SimpleSurfaceProvider
override
)
explicit
SimpleSurfaceProvider
(
NotNull
<
imgFrame
*
>
aSurface
)
:
ISurfaceProvider
(
AvailabilityState
:
:
StartAvailable
(
)
)
mSurface
(
aSurface
)
{
}
DrawableFrameRef
DrawableRef
(
)
override
{
return
mSurface
-
>
DrawableRef
(
)
;
}
bool
IsFinished
(
)
const
override
{
return
mSurface
-
>
IsFinished
(
)
;
}
size_t
LogicalSizeInBytes
(
)
const
override
{
gfx
:
:
IntSize
size
=
mSurface
-
>
GetSize
(
)
;
return
size
.
width
*
size
.
height
*
mSurface
-
>
GetBytesPerPixel
(
)
;
}
protected
:
bool
IsLocked
(
)
const
override
{
return
bool
(
mLockRef
)
;
}
void
SetLocked
(
bool
aLocked
)
override
{
if
(
aLocked
=
=
IsLocked
(
)
)
{
return
;
}
mLockRef
=
aLocked
?
mSurface
-
>
DrawableRef
(
)
:
DrawableFrameRef
(
)
;
}
private
:
virtual
~
SimpleSurfaceProvider
(
)
{
}
NotNull
<
RefPtr
<
imgFrame
>
>
mSurface
;
DrawableFrameRef
mLockRef
;
}
;
}
}
#
endif
