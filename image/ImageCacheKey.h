#
ifndef
mozilla_image_src_ImageCacheKey_h
#
define
mozilla_image_src_ImageCacheKey_h
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
PLDHashTable
.
h
"
class
nsIURI
;
namespace
mozilla
{
namespace
image
{
class
ImageCacheKey
final
{
public
:
ImageCacheKey
(
nsIURI
*
aURI
const
OriginAttributes
&
aAttrs
dom
:
:
Document
*
aDocument
)
;
ImageCacheKey
(
const
ImageCacheKey
&
aOther
)
;
ImageCacheKey
(
ImageCacheKey
&
&
aOther
)
;
bool
operator
=
=
(
const
ImageCacheKey
&
aOther
)
const
;
PLDHashNumber
Hash
(
)
const
{
if
(
MOZ_UNLIKELY
(
mHash
.
isNothing
(
)
)
)
{
EnsureHash
(
)
;
}
return
mHash
.
value
(
)
;
}
nsIURI
*
URI
(
)
const
{
return
mURI
;
}
const
OriginAttributes
&
OriginAttributesRef
(
)
const
{
return
mOriginAttributes
;
}
bool
IsChrome
(
)
const
{
return
mIsChrome
;
}
void
*
ControlledDocument
(
)
const
{
return
mControlledDocument
;
}
private
:
static
void
*
GetSpecialCaseDocumentToken
(
dom
:
:
Document
*
aDocument
)
;
static
nsCString
GetIsolationKey
(
dom
:
:
Document
*
aDocument
nsIURI
*
aURI
)
;
void
EnsureHash
(
)
const
;
nsCOMPtr
<
nsIURI
>
mURI
;
OriginAttributes
mOriginAttributes
;
void
*
mControlledDocument
;
nsCString
mIsolationKey
;
mutable
Maybe
<
PLDHashNumber
>
mHash
;
bool
mIsChrome
;
}
;
}
}
#
endif
