#
ifndef
mozilla_image_RecyclingSourceSurface_h
#
define
mozilla_image_RecyclingSourceSurface_h
#
include
"
mozilla
/
gfx
/
2D
.
h
"
namespace
mozilla
{
namespace
image
{
class
imgFrame
;
class
RecyclingSourceSurface
final
:
public
gfx
:
:
DataSourceSurface
{
public
:
RecyclingSourceSurface
(
imgFrame
*
aParent
gfx
:
:
DataSourceSurface
*
aSurface
)
;
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
RecyclingSourceSurface
override
)
;
uint8_t
*
GetData
(
)
override
{
return
mSurface
-
>
GetData
(
)
;
}
int32_t
Stride
(
)
override
{
return
mSurface
-
>
Stride
(
)
;
}
gfx
:
:
SurfaceType
GetType
(
)
const
override
{
return
mType
;
}
gfx
:
:
IntSize
GetSize
(
)
const
override
{
return
mSurface
-
>
GetSize
(
)
;
}
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
override
{
return
mSurface
-
>
GetFormat
(
)
;
}
void
AddSizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
size_t
&
aHeapSizeOut
size_t
&
aNonHeapSizeOut
size_t
&
aExtHandlesOut
uint64_t
&
aExtIdOut
)
const
override
{
}
bool
OnHeap
(
)
const
override
{
return
mSurface
-
>
OnHeap
(
)
;
}
bool
Map
(
MapType
aType
MappedSurface
*
aMappedSurface
)
override
{
return
mSurface
-
>
Map
(
aType
aMappedSurface
)
;
}
void
Unmap
(
)
override
{
mSurface
-
>
Unmap
(
)
;
}
gfx
:
:
DataSourceSurface
*
GetChildSurface
(
)
const
{
return
mSurface
;
}
protected
:
void
GuaranteePersistance
(
)
override
{
}
~
RecyclingSourceSurface
(
)
override
;
RefPtr
<
imgFrame
>
mParent
;
RefPtr
<
DataSourceSurface
>
mSurface
;
gfx
:
:
SurfaceType
mType
;
}
;
}
}
#
endif
