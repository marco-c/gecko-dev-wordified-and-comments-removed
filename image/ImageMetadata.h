#
ifndef
mozilla_image_ImageMetadata_h
#
define
mozilla_image_ImageMetadata_h
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsSize
.
h
"
#
include
"
Orientation
.
h
"
namespace
mozilla
{
namespace
image
{
class
RasterImage
;
class
ImageMetadata
{
public
:
ImageMetadata
(
)
:
mLoopCount
(
-
1
)
mFirstFrameTimeout
(
FrameTimeout
:
:
Forever
(
)
)
mHasAnimation
(
false
)
{
}
void
SetHotspot
(
uint16_t
aHotspotX
uint16_t
aHotspotY
)
{
mHotspot
=
Some
(
gfx
:
:
IntPoint
(
aHotspotX
aHotspotY
)
)
;
}
gfx
:
:
IntPoint
GetHotspot
(
)
const
{
return
*
mHotspot
;
}
bool
HasHotspot
(
)
const
{
return
mHotspot
.
isSome
(
)
;
}
void
SetLoopCount
(
int32_t
loopcount
)
{
mLoopCount
=
loopcount
;
}
int32_t
GetLoopCount
(
)
const
{
return
mLoopCount
;
}
void
SetLoopLength
(
FrameTimeout
aLength
)
{
mLoopLength
=
Some
(
aLength
)
;
}
FrameTimeout
GetLoopLength
(
)
const
{
return
*
mLoopLength
;
}
bool
HasLoopLength
(
)
const
{
return
mLoopLength
.
isSome
(
)
;
}
void
SetFirstFrameTimeout
(
FrameTimeout
aTimeout
)
{
mFirstFrameTimeout
=
aTimeout
;
}
FrameTimeout
GetFirstFrameTimeout
(
)
const
{
return
mFirstFrameTimeout
;
}
void
SetFirstFrameRefreshArea
(
const
gfx
:
:
IntRect
&
aRefreshArea
)
{
mFirstFrameRefreshArea
=
Some
(
aRefreshArea
)
;
}
gfx
:
:
IntRect
GetFirstFrameRefreshArea
(
)
const
{
return
*
mFirstFrameRefreshArea
;
}
bool
HasFirstFrameRefreshArea
(
)
const
{
return
mFirstFrameRefreshArea
.
isSome
(
)
;
}
void
SetSize
(
int32_t
width
int32_t
height
Orientation
orientation
)
{
if
(
!
HasSize
(
)
)
{
mSize
.
emplace
(
nsIntSize
(
width
height
)
)
;
mOrientation
.
emplace
(
orientation
)
;
}
}
nsIntSize
GetSize
(
)
const
{
return
*
mSize
;
}
bool
HasSize
(
)
const
{
return
mSize
.
isSome
(
)
;
}
Orientation
GetOrientation
(
)
const
{
return
*
mOrientation
;
}
bool
HasOrientation
(
)
const
{
return
mOrientation
.
isSome
(
)
;
}
void
SetHasAnimation
(
)
{
mHasAnimation
=
true
;
}
bool
HasAnimation
(
)
const
{
return
mHasAnimation
;
}
private
:
Maybe
<
gfx
:
:
IntPoint
>
mHotspot
;
int32_t
mLoopCount
;
Maybe
<
FrameTimeout
>
mLoopLength
;
FrameTimeout
mFirstFrameTimeout
;
Maybe
<
gfx
:
:
IntRect
>
mFirstFrameRefreshArea
;
Maybe
<
nsIntSize
>
mSize
;
Maybe
<
Orientation
>
mOrientation
;
bool
mHasAnimation
:
1
;
}
;
}
}
#
endif
