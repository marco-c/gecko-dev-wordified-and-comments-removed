#
ifndef
mozilla_image_ImageMetadata_h
#
define
mozilla_image_ImageMetadata_h
#
include
<
stdint
.
h
>
#
include
<
utility
>
#
include
"
FrameTimeout
.
h
"
#
include
"
Orientation
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
image
/
Resolution
.
h
"
#
include
"
nsSize
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
:
:
image
{
class
ImageMetadata
{
public
:
ImageMetadata
(
)
=
default
;
void
SetHotspot
(
uint16_t
aHotspotX
uint16_t
aHotspotY
)
{
mHotspot
=
Some
(
gfx
:
:
IntPoint
(
aHotspotX
aHotspotY
)
)
;
}
gfx
:
:
IntPoint
GetHotspot
(
)
const
{
return
*
mHotspot
;
}
bool
HasHotspot
(
)
const
{
return
mHotspot
.
isSome
(
)
;
}
void
SetLoopCount
(
int32_t
loopcount
)
{
mLoopCount
=
loopcount
;
}
int32_t
GetLoopCount
(
)
const
{
return
mLoopCount
;
}
void
SetLoopLength
(
FrameTimeout
aLength
)
{
mLoopLength
=
Some
(
aLength
)
;
}
FrameTimeout
GetLoopLength
(
)
const
{
return
*
mLoopLength
;
}
bool
HasLoopLength
(
)
const
{
return
mLoopLength
.
isSome
(
)
;
}
void
SetFrameCount
(
uint32_t
aCount
)
{
mFrameCount
=
Some
(
aCount
)
;
}
uint32_t
GetFrameCount
(
)
const
{
return
*
mFrameCount
;
}
bool
HasFrameCount
(
)
const
{
return
mFrameCount
.
isSome
(
)
;
}
void
SetFirstFrameTimeout
(
FrameTimeout
aTimeout
)
{
mFirstFrameTimeout
=
aTimeout
;
}
FrameTimeout
GetFirstFrameTimeout
(
)
const
{
return
mFirstFrameTimeout
;
}
void
SetFirstFrameRefreshArea
(
const
gfx
:
:
IntRect
&
aRefreshArea
)
{
mFirstFrameRefreshArea
=
Some
(
aRefreshArea
)
;
}
gfx
:
:
IntRect
GetFirstFrameRefreshArea
(
)
const
{
return
*
mFirstFrameRefreshArea
;
}
bool
HasFirstFrameRefreshArea
(
)
const
{
return
mFirstFrameRefreshArea
.
isSome
(
)
;
}
void
SetSize
(
int32_t
aWidth
int32_t
aHeight
Orientation
aOrientation
Resolution
aResolution
)
{
if
(
!
HasSize
(
)
)
{
mSize
.
emplace
(
aOrientation
.
ToOriented
(
UnorientedIntSize
(
aWidth
aHeight
)
)
)
;
mOrientation
.
emplace
(
aOrientation
)
;
mResolution
=
aResolution
;
}
}
OrientedIntSize
GetSize
(
)
const
{
return
*
mSize
;
}
bool
HasSize
(
)
const
{
return
mSize
.
isSome
(
)
;
}
void
AddNativeSize
(
const
OrientedIntSize
&
aSize
)
{
mNativeSizes
.
AppendElement
(
aSize
)
;
}
Resolution
GetResolution
(
)
const
{
return
mResolution
;
}
const
nsTArray
<
OrientedIntSize
>
&
GetNativeSizes
(
)
const
{
return
mNativeSizes
;
}
Orientation
GetOrientation
(
)
const
{
return
*
mOrientation
;
}
bool
HasOrientation
(
)
const
{
return
mOrientation
.
isSome
(
)
;
}
void
SetHasAnimation
(
)
{
mHasAnimation
=
true
;
}
bool
HasAnimation
(
)
const
{
return
mHasAnimation
;
}
private
:
Maybe
<
gfx
:
:
IntPoint
>
mHotspot
;
int32_t
mLoopCount
=
-
1
;
Resolution
mResolution
;
Maybe
<
FrameTimeout
>
mLoopLength
;
Maybe
<
uint32_t
>
mFrameCount
;
FrameTimeout
mFirstFrameTimeout
=
FrameTimeout
:
:
Forever
(
)
;
Maybe
<
gfx
:
:
IntRect
>
mFirstFrameRefreshArea
;
Maybe
<
OrientedIntSize
>
mSize
;
Maybe
<
Orientation
>
mOrientation
;
CopyableTArray
<
OrientedIntSize
>
mNativeSizes
;
bool
mHasAnimation
=
false
;
}
;
}
#
endif
