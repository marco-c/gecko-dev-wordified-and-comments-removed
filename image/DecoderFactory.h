#
ifndef
mozilla_image_DecoderFactory_h
#
define
mozilla_image_DecoderFactory_h
#
include
"
DecoderFlags
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
SurfaceFlags
.
h
"
namespace
mozilla
{
namespace
image
{
class
Decoder
;
class
IDecodingTask
;
class
nsICODecoder
;
class
RasterImage
;
class
SourceBuffer
;
class
SourceBufferIterator
;
enum
class
DecoderType
{
PNG
GIF
JPEG
BMP
ICO
ICON
UNKNOWN
}
;
class
DecoderFactory
{
public
:
static
DecoderType
GetDecoderType
(
const
char
*
aMimeType
)
;
static
nsresult
CreateDecoder
(
DecoderType
aType
NotNull
<
RasterImage
*
>
aImage
NotNull
<
SourceBuffer
*
>
aSourceBuffer
const
gfx
:
:
IntSize
&
aIntrinsicSize
const
gfx
:
:
IntSize
&
aOutputSize
DecoderFlags
aDecoderFlags
SurfaceFlags
aSurfaceFlags
IDecodingTask
*
*
aOutTask
)
;
static
nsresult
CreateAnimationDecoder
(
DecoderType
aType
NotNull
<
RasterImage
*
>
aImage
NotNull
<
SourceBuffer
*
>
aSourceBuffer
const
gfx
:
:
IntSize
&
aIntrinsicSize
DecoderFlags
aDecoderFlags
SurfaceFlags
aSurfaceFlags
size_t
aCurrentFrame
IDecodingTask
*
*
aOutTask
)
;
static
already_AddRefed
<
Decoder
>
CloneAnimationDecoder
(
Decoder
*
aDecoder
)
;
static
already_AddRefed
<
IDecodingTask
>
CreateMetadataDecoder
(
DecoderType
aType
NotNull
<
RasterImage
*
>
aImage
NotNull
<
SourceBuffer
*
>
aSourceBuffer
)
;
static
already_AddRefed
<
Decoder
>
CreateDecoderForICOResource
(
DecoderType
aType
SourceBufferIterator
&
&
aIterator
NotNull
<
nsICODecoder
*
>
aICODecoder
bool
aIsMetadataDecode
const
Maybe
<
gfx
:
:
IntSize
>
&
aExpectedSize
const
Maybe
<
uint32_t
>
&
aDataOffset
=
Nothing
(
)
)
;
static
already_AddRefed
<
Decoder
>
CreateAnonymousDecoder
(
DecoderType
aType
NotNull
<
SourceBuffer
*
>
aSourceBuffer
const
Maybe
<
gfx
:
:
IntSize
>
&
aOutputSize
SurfaceFlags
aSurfaceFlags
)
;
static
already_AddRefed
<
Decoder
>
CreateAnonymousMetadataDecoder
(
DecoderType
aType
NotNull
<
SourceBuffer
*
>
aSourceBuffer
)
;
private
:
virtual
~
DecoderFactory
(
)
=
0
;
static
already_AddRefed
<
Decoder
>
GetDecoder
(
DecoderType
aType
RasterImage
*
aImage
bool
aIsRedecode
)
;
}
;
}
}
#
endif
