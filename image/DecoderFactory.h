#
ifndef
mozilla_image_DecoderFactory_h
#
define
mozilla_image_DecoderFactory_h
#
include
"
DecoderFlags
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
SurfaceFlags
.
h
"
class
nsACString
;
namespace
mozilla
{
namespace
image
{
class
Decoder
;
class
IDecodingTask
;
class
RasterImage
;
class
SourceBuffer
;
enum
class
DecoderType
{
PNG
GIF
JPEG
BMP
ICO
ICON
UNKNOWN
}
;
class
DecoderFactory
{
public
:
static
DecoderType
GetDecoderType
(
const
char
*
aMimeType
)
;
static
already_AddRefed
<
IDecodingTask
>
CreateDecoder
(
DecoderType
aType
NotNull
<
RasterImage
*
>
aImage
NotNull
<
SourceBuffer
*
>
aSourceBuffer
const
Maybe
<
gfx
:
:
IntSize
>
&
aTargetSize
DecoderFlags
aDecoderFlags
SurfaceFlags
aSurfaceFlags
int
aSampleSize
)
;
static
already_AddRefed
<
IDecodingTask
>
CreateAnimationDecoder
(
DecoderType
aType
NotNull
<
RasterImage
*
>
aImage
NotNull
<
SourceBuffer
*
>
aSourceBuffer
DecoderFlags
aDecoderFlags
SurfaceFlags
aSurfaceFlags
)
;
static
already_AddRefed
<
IDecodingTask
>
CreateMetadataDecoder
(
DecoderType
aType
NotNull
<
RasterImage
*
>
aImage
NotNull
<
SourceBuffer
*
>
aSourceBuffer
int
aSampleSize
)
;
static
already_AddRefed
<
Decoder
>
CreateAnonymousDecoder
(
DecoderType
aType
NotNull
<
SourceBuffer
*
>
aSourceBuffer
const
Maybe
<
gfx
:
:
IntSize
>
&
aTargetSize
SurfaceFlags
aSurfaceFlags
)
;
static
already_AddRefed
<
Decoder
>
CreateAnonymousMetadataDecoder
(
DecoderType
aType
NotNull
<
SourceBuffer
*
>
aSourceBuffer
)
;
private
:
virtual
~
DecoderFactory
(
)
=
0
;
static
already_AddRefed
<
Decoder
>
GetDecoder
(
DecoderType
aType
RasterImage
*
aImage
bool
aIsRedecode
)
;
}
;
}
}
#
endif
