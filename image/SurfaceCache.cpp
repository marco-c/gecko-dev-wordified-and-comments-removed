#
include
"
SurfaceCache
.
h
"
#
include
<
algorithm
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Pair
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
imgFrame
.
h
"
#
include
"
Image
.
h
"
#
include
"
ISurfaceProvider
.
h
"
#
include
"
LookupResult
.
h
"
#
include
"
nsExpirationTracker
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsSize
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
prsystem
.
h
"
#
include
"
ShutdownTracker
.
h
"
using
std
:
:
max
;
using
std
:
:
min
;
namespace
mozilla
{
using
namespace
gfx
;
namespace
image
{
class
CachedSurface
;
class
SurfaceCacheImpl
;
static
StaticRefPtr
<
SurfaceCacheImpl
>
sInstance
;
typedef
size_t
Cost
;
static
Cost
ComputeCost
(
const
IntSize
&
aSize
uint32_t
aBytesPerPixel
)
{
MOZ_ASSERT
(
aBytesPerPixel
=
=
1
|
|
aBytesPerPixel
=
=
4
)
;
return
aSize
.
width
*
aSize
.
height
*
aBytesPerPixel
;
}
class
CostEntry
{
public
:
CostEntry
(
NotNull
<
CachedSurface
*
>
aSurface
Cost
aCost
)
:
mSurface
(
aSurface
)
mCost
(
aCost
)
{
}
NotNull
<
CachedSurface
*
>
Surface
(
)
const
{
return
mSurface
;
}
Cost
GetCost
(
)
const
{
return
mCost
;
}
bool
operator
=
=
(
const
CostEntry
&
aOther
)
const
{
return
mSurface
=
=
aOther
.
mSurface
&
&
mCost
=
=
aOther
.
mCost
;
}
bool
operator
<
(
const
CostEntry
&
aOther
)
const
{
return
mCost
<
aOther
.
mCost
|
|
(
mCost
=
=
aOther
.
mCost
&
&
mSurface
<
aOther
.
mSurface
)
;
}
private
:
NotNull
<
CachedSurface
*
>
mSurface
;
Cost
mCost
;
}
;
class
CachedSurface
{
~
CachedSurface
(
)
{
}
public
:
MOZ_DECLARE_REFCOUNTED_TYPENAME
(
CachedSurface
)
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CachedSurface
)
explicit
CachedSurface
(
NotNull
<
ISurfaceProvider
*
>
aProvider
)
:
mProvider
(
aProvider
)
mIsLocked
(
false
)
{
}
DrawableSurface
GetDrawableSurface
(
)
const
{
if
(
MOZ_UNLIKELY
(
IsPlaceholder
(
)
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Called
GetDrawableSurface
(
)
on
a
placeholder
"
)
;
return
DrawableSurface
(
)
;
}
return
mProvider
-
>
Surface
(
)
;
}
void
SetLocked
(
bool
aLocked
)
{
if
(
IsPlaceholder
(
)
)
{
return
;
}
mIsLocked
=
aLocked
;
mProvider
-
>
SetLocked
(
aLocked
)
;
}
bool
IsLocked
(
)
const
{
return
!
IsPlaceholder
(
)
&
&
mIsLocked
&
&
mProvider
-
>
IsLocked
(
)
;
}
bool
IsPlaceholder
(
)
const
{
return
mProvider
-
>
Availability
(
)
.
IsPlaceholder
(
)
;
}
bool
IsDecoded
(
)
const
{
return
!
IsPlaceholder
(
)
&
&
mProvider
-
>
IsFinished
(
)
;
}
ImageKey
GetImageKey
(
)
const
{
return
mProvider
-
>
GetImageKey
(
)
;
}
SurfaceKey
GetSurfaceKey
(
)
const
{
return
mProvider
-
>
GetSurfaceKey
(
)
;
}
nsExpirationState
*
GetExpirationState
(
)
{
return
&
mExpirationState
;
}
CostEntry
GetCostEntry
(
)
{
return
image
:
:
CostEntry
(
WrapNotNull
(
this
)
mProvider
-
>
LogicalSizeInBytes
(
)
)
;
}
struct
MOZ_STACK_CLASS
SurfaceMemoryReport
{
SurfaceMemoryReport
(
nsTArray
<
SurfaceMemoryCounter
>
&
aCounters
MallocSizeOf
aMallocSizeOf
)
:
mCounters
(
aCounters
)
mMallocSizeOf
(
aMallocSizeOf
)
{
}
void
Add
(
NotNull
<
CachedSurface
*
>
aCachedSurface
)
{
SurfaceMemoryCounter
counter
(
aCachedSurface
-
>
GetSurfaceKey
(
)
aCachedSurface
-
>
IsLocked
(
)
)
;
if
(
aCachedSurface
-
>
IsPlaceholder
(
)
)
{
return
;
}
size_t
heap
=
0
;
size_t
nonHeap
=
0
;
aCachedSurface
-
>
mProvider
-
>
AddSizeOfExcludingThis
(
mMallocSizeOf
heap
nonHeap
)
;
counter
.
Values
(
)
.
SetDecodedHeap
(
heap
)
;
counter
.
Values
(
)
.
SetDecodedNonHeap
(
nonHeap
)
;
mCounters
.
AppendElement
(
counter
)
;
}
private
:
nsTArray
<
SurfaceMemoryCounter
>
&
mCounters
;
MallocSizeOf
mMallocSizeOf
;
}
;
private
:
nsExpirationState
mExpirationState
;
NotNull
<
RefPtr
<
ISurfaceProvider
>
>
mProvider
;
bool
mIsLocked
;
}
;
static
int64_t
AreaOfIntSize
(
const
IntSize
&
aSize
)
{
return
static_cast
<
int64_t
>
(
aSize
.
width
)
*
static_cast
<
int64_t
>
(
aSize
.
height
)
;
}
class
ImageSurfaceCache
{
~
ImageSurfaceCache
(
)
{
}
public
:
ImageSurfaceCache
(
)
:
mLocked
(
false
)
{
}
MOZ_DECLARE_REFCOUNTED_TYPENAME
(
ImageSurfaceCache
)
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ImageSurfaceCache
)
typedef
nsRefPtrHashtable
<
nsGenericHashKey
<
SurfaceKey
>
CachedSurface
>
SurfaceTable
;
bool
IsEmpty
(
)
const
{
return
mSurfaces
.
Count
(
)
=
=
0
;
}
void
Insert
(
NotNull
<
CachedSurface
*
>
aSurface
)
{
MOZ_ASSERT
(
!
mLocked
|
|
aSurface
-
>
IsPlaceholder
(
)
|
|
aSurface
-
>
IsLocked
(
)
"
Inserting
an
unlocked
surface
for
a
locked
image
"
)
;
mSurfaces
.
Put
(
aSurface
-
>
GetSurfaceKey
(
)
aSurface
)
;
}
void
Remove
(
NotNull
<
CachedSurface
*
>
aSurface
)
{
MOZ_ASSERT
(
mSurfaces
.
GetWeak
(
aSurface
-
>
GetSurfaceKey
(
)
)
"
Should
not
be
removing
a
surface
we
don
'
t
have
"
)
;
mSurfaces
.
Remove
(
aSurface
-
>
GetSurfaceKey
(
)
)
;
}
already_AddRefed
<
CachedSurface
>
Lookup
(
const
SurfaceKey
&
aSurfaceKey
)
{
RefPtr
<
CachedSurface
>
surface
;
mSurfaces
.
Get
(
aSurfaceKey
getter_AddRefs
(
surface
)
)
;
return
surface
.
forget
(
)
;
}
Pair
<
already_AddRefed
<
CachedSurface
>
MatchType
>
LookupBestMatch
(
const
SurfaceKey
&
aIdealKey
)
{
RefPtr
<
CachedSurface
>
exactMatch
;
mSurfaces
.
Get
(
aIdealKey
getter_AddRefs
(
exactMatch
)
)
;
if
(
exactMatch
&
&
exactMatch
-
>
IsDecoded
(
)
)
{
return
MakePair
(
exactMatch
.
forget
(
)
MatchType
:
:
EXACT
)
;
}
RefPtr
<
CachedSurface
>
bestMatch
;
for
(
auto
iter
=
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
NotNull
<
CachedSurface
*
>
current
=
WrapNotNull
(
iter
.
UserData
(
)
)
;
const
SurfaceKey
&
currentKey
=
current
-
>
GetSurfaceKey
(
)
;
if
(
current
-
>
IsPlaceholder
(
)
)
{
continue
;
}
if
(
currentKey
.
Playback
(
)
!
=
aIdealKey
.
Playback
(
)
|
|
currentKey
.
SVGContext
(
)
!
=
aIdealKey
.
SVGContext
(
)
)
{
continue
;
}
if
(
currentKey
.
Flags
(
)
!
=
aIdealKey
.
Flags
(
)
)
{
continue
;
}
if
(
!
bestMatch
)
{
bestMatch
=
current
;
continue
;
}
MOZ_ASSERT
(
bestMatch
"
Should
have
a
current
best
match
"
)
;
bool
bestMatchIsDecoded
=
bestMatch
-
>
IsDecoded
(
)
;
if
(
bestMatchIsDecoded
&
&
!
current
-
>
IsDecoded
(
)
)
{
continue
;
}
if
(
!
bestMatchIsDecoded
&
&
current
-
>
IsDecoded
(
)
)
{
bestMatch
=
current
;
continue
;
}
SurfaceKey
bestMatchKey
=
bestMatch
-
>
GetSurfaceKey
(
)
;
int64_t
idealArea
=
AreaOfIntSize
(
aIdealKey
.
Size
(
)
)
;
int64_t
currentArea
=
AreaOfIntSize
(
currentKey
.
Size
(
)
)
;
int64_t
bestMatchArea
=
AreaOfIntSize
(
bestMatchKey
.
Size
(
)
)
;
if
(
bestMatchArea
<
idealArea
)
{
if
(
currentArea
>
bestMatchArea
)
{
bestMatch
=
current
;
}
continue
;
}
if
(
idealArea
<
=
currentArea
&
&
currentArea
<
bestMatchArea
)
{
bestMatch
=
current
;
continue
;
}
}
MatchType
matchType
;
if
(
bestMatch
)
{
if
(
!
exactMatch
)
{
matchType
=
MatchType
:
:
SUBSTITUTE_BECAUSE_NOT_FOUND
;
}
else
if
(
exactMatch
!
=
bestMatch
)
{
matchType
=
MatchType
:
:
SUBSTITUTE_BECAUSE_PENDING
;
}
else
{
matchType
=
MatchType
:
:
EXACT
;
}
}
else
{
if
(
exactMatch
)
{
MOZ_ASSERT
(
exactMatch
-
>
IsPlaceholder
(
)
)
;
matchType
=
MatchType
:
:
PENDING
;
}
else
{
matchType
=
MatchType
:
:
NOT_FOUND
;
}
}
return
MakePair
(
bestMatch
.
forget
(
)
matchType
)
;
}
SurfaceTable
:
:
Iterator
ConstIter
(
)
const
{
return
mSurfaces
.
ConstIter
(
)
;
}
void
SetLocked
(
bool
aLocked
)
{
mLocked
=
aLocked
;
}
bool
IsLocked
(
)
const
{
return
mLocked
;
}
private
:
SurfaceTable
mSurfaces
;
bool
mLocked
;
}
;
class
SurfaceCacheImpl
final
:
public
nsIMemoryReporter
{
public
:
NS_DECL_ISUPPORTS
SurfaceCacheImpl
(
uint32_t
aSurfaceCacheExpirationTimeMS
uint32_t
aSurfaceCacheDiscardFactor
uint32_t
aSurfaceCacheSize
)
:
mExpirationTracker
(
aSurfaceCacheExpirationTimeMS
)
mMemoryPressureObserver
(
new
MemoryPressureObserver
)
mMutex
(
"
SurfaceCache
"
)
mDiscardFactor
(
aSurfaceCacheDiscardFactor
)
mMaxCost
(
aSurfaceCacheSize
)
mAvailableCost
(
aSurfaceCacheSize
)
mLockedCost
(
0
)
mOverflowCount
(
0
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
AddObserver
(
mMemoryPressureObserver
"
memory
-
pressure
"
false
)
;
}
}
private
:
virtual
~
SurfaceCacheImpl
(
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
RemoveObserver
(
mMemoryPressureObserver
"
memory
-
pressure
"
)
;
}
UnregisterWeakMemoryReporter
(
this
)
;
}
public
:
void
InitMemoryReporter
(
)
{
RegisterWeakMemoryReporter
(
this
)
;
}
Mutex
&
GetMutex
(
)
{
return
mMutex
;
}
InsertOutcome
Insert
(
NotNull
<
ISurfaceProvider
*
>
aProvider
bool
aSetAvailable
)
{
LookupResult
result
=
Lookup
(
aProvider
-
>
GetImageKey
(
)
aProvider
-
>
GetSurfaceKey
(
)
false
)
;
if
(
MOZ_UNLIKELY
(
result
)
)
{
return
InsertOutcome
:
:
FAILURE_ALREADY_PRESENT
;
}
if
(
result
.
Type
(
)
=
=
MatchType
:
:
PENDING
)
{
RemoveEntry
(
aProvider
-
>
GetImageKey
(
)
aProvider
-
>
GetSurfaceKey
(
)
)
;
}
MOZ_ASSERT
(
result
.
Type
(
)
=
=
MatchType
:
:
NOT_FOUND
|
|
result
.
Type
(
)
=
=
MatchType
:
:
PENDING
"
A
LookupResult
with
no
surface
should
be
NOT_FOUND
or
PENDING
"
)
;
Cost
cost
=
aProvider
-
>
LogicalSizeInBytes
(
)
;
if
(
MOZ_UNLIKELY
(
!
CanHoldAfterDiscarding
(
cost
)
)
)
{
mOverflowCount
+
+
;
return
InsertOutcome
:
:
FAILURE
;
}
while
(
cost
>
mAvailableCost
)
{
MOZ_ASSERT
(
!
mCosts
.
IsEmpty
(
)
"
Removed
everything
and
it
still
won
'
t
fit
"
)
;
Remove
(
mCosts
.
LastElement
(
)
.
Surface
(
)
)
;
}
RefPtr
<
ImageSurfaceCache
>
cache
=
GetImageCache
(
aProvider
-
>
GetImageKey
(
)
)
;
if
(
!
cache
)
{
cache
=
new
ImageSurfaceCache
;
mImageCaches
.
Put
(
aProvider
-
>
GetImageKey
(
)
cache
)
;
}
if
(
aSetAvailable
)
{
aProvider
-
>
Availability
(
)
.
SetAvailable
(
)
;
}
NotNull
<
RefPtr
<
CachedSurface
>
>
surface
=
WrapNotNull
(
new
CachedSurface
(
aProvider
)
)
;
if
(
cache
-
>
IsLocked
(
)
&
&
!
surface
-
>
IsPlaceholder
(
)
)
{
surface
-
>
SetLocked
(
true
)
;
if
(
!
surface
-
>
IsLocked
(
)
)
{
return
InsertOutcome
:
:
FAILURE
;
}
}
MOZ_ASSERT
(
cost
<
=
mAvailableCost
"
Inserting
despite
too
large
a
cost
"
)
;
cache
-
>
Insert
(
surface
)
;
StartTracking
(
surface
)
;
return
InsertOutcome
:
:
SUCCESS
;
}
void
Remove
(
NotNull
<
CachedSurface
*
>
aSurface
)
{
ImageKey
imageKey
=
aSurface
-
>
GetImageKey
(
)
;
RefPtr
<
ImageSurfaceCache
>
cache
=
GetImageCache
(
imageKey
)
;
MOZ_ASSERT
(
cache
"
Shouldn
'
t
try
to
remove
a
surface
with
no
image
cache
"
)
;
if
(
!
aSurface
-
>
IsPlaceholder
(
)
)
{
static_cast
<
Image
*
>
(
imageKey
)
-
>
OnSurfaceDiscarded
(
)
;
}
StopTracking
(
aSurface
)
;
cache
-
>
Remove
(
aSurface
)
;
if
(
cache
-
>
IsEmpty
(
)
&
&
!
cache
-
>
IsLocked
(
)
)
{
mImageCaches
.
Remove
(
imageKey
)
;
}
}
void
StartTracking
(
NotNull
<
CachedSurface
*
>
aSurface
)
{
CostEntry
costEntry
=
aSurface
-
>
GetCostEntry
(
)
;
MOZ_ASSERT
(
costEntry
.
GetCost
(
)
<
=
mAvailableCost
"
Cost
too
large
and
the
caller
didn
'
t
catch
it
"
)
;
mAvailableCost
-
=
costEntry
.
GetCost
(
)
;
if
(
aSurface
-
>
IsLocked
(
)
)
{
mLockedCost
+
=
costEntry
.
GetCost
(
)
;
MOZ_ASSERT
(
mLockedCost
<
=
mMaxCost
"
Locked
more
than
we
can
hold
?
"
)
;
}
else
{
mCosts
.
InsertElementSorted
(
costEntry
)
;
mExpirationTracker
.
AddObject
(
aSurface
)
;
}
}
void
StopTracking
(
NotNull
<
CachedSurface
*
>
aSurface
)
{
CostEntry
costEntry
=
aSurface
-
>
GetCostEntry
(
)
;
if
(
aSurface
-
>
IsLocked
(
)
)
{
MOZ_ASSERT
(
mLockedCost
>
=
costEntry
.
GetCost
(
)
"
Costs
don
'
t
balance
"
)
;
mLockedCost
-
=
costEntry
.
GetCost
(
)
;
MOZ_ASSERT
(
!
mCosts
.
Contains
(
costEntry
)
"
Shouldn
'
t
have
a
cost
entry
for
a
locked
surface
"
)
;
}
else
{
if
(
MOZ_LIKELY
(
aSurface
-
>
GetExpirationState
(
)
-
>
IsTracked
(
)
)
)
{
mExpirationTracker
.
RemoveObject
(
aSurface
)
;
}
else
{
NS_ASSERTION
(
ShutdownTracker
:
:
ShutdownHasStarted
(
)
"
Not
expiration
-
tracking
an
unlocked
surface
!
"
)
;
}
DebugOnly
<
bool
>
foundInCosts
=
mCosts
.
RemoveElementSorted
(
costEntry
)
;
MOZ_ASSERT
(
foundInCosts
"
Lost
track
of
costs
for
this
surface
"
)
;
}
mAvailableCost
+
=
costEntry
.
GetCost
(
)
;
MOZ_ASSERT
(
mAvailableCost
<
=
mMaxCost
"
More
available
cost
than
we
started
with
"
)
;
}
LookupResult
Lookup
(
const
ImageKey
aImageKey
const
SurfaceKey
&
aSurfaceKey
bool
aMarkUsed
=
true
)
{
RefPtr
<
ImageSurfaceCache
>
cache
=
GetImageCache
(
aImageKey
)
;
if
(
!
cache
)
{
return
LookupResult
(
MatchType
:
:
NOT_FOUND
)
;
}
RefPtr
<
CachedSurface
>
surface
=
cache
-
>
Lookup
(
aSurfaceKey
)
;
if
(
!
surface
)
{
return
LookupResult
(
MatchType
:
:
NOT_FOUND
)
;
}
if
(
surface
-
>
IsPlaceholder
(
)
)
{
return
LookupResult
(
MatchType
:
:
PENDING
)
;
}
DrawableSurface
drawableSurface
=
surface
-
>
GetDrawableSurface
(
)
;
if
(
!
drawableSurface
)
{
Remove
(
WrapNotNull
(
surface
)
)
;
return
LookupResult
(
MatchType
:
:
NOT_FOUND
)
;
}
if
(
aMarkUsed
)
{
MarkUsed
(
WrapNotNull
(
surface
)
WrapNotNull
(
cache
)
)
;
}
MOZ_ASSERT
(
surface
-
>
GetSurfaceKey
(
)
=
=
aSurfaceKey
"
Lookup
(
)
not
returning
an
exact
match
?
"
)
;
return
LookupResult
(
Move
(
drawableSurface
)
MatchType
:
:
EXACT
)
;
}
LookupResult
LookupBestMatch
(
const
ImageKey
aImageKey
const
SurfaceKey
&
aSurfaceKey
)
{
RefPtr
<
ImageSurfaceCache
>
cache
=
GetImageCache
(
aImageKey
)
;
if
(
!
cache
)
{
return
LookupResult
(
MatchType
:
:
NOT_FOUND
)
;
}
RefPtr
<
CachedSurface
>
surface
;
DrawableSurface
drawableSurface
;
MatchType
matchType
=
MatchType
:
:
NOT_FOUND
;
while
(
true
)
{
Tie
(
surface
matchType
)
=
cache
-
>
LookupBestMatch
(
aSurfaceKey
)
;
if
(
!
surface
)
{
return
LookupResult
(
matchType
)
;
}
drawableSurface
=
surface
-
>
GetDrawableSurface
(
)
;
if
(
drawableSurface
)
{
break
;
}
Remove
(
WrapNotNull
(
surface
)
)
;
}
MOZ_ASSERT_IF
(
matchType
=
=
MatchType
:
:
EXACT
surface
-
>
GetSurfaceKey
(
)
=
=
aSurfaceKey
)
;
MOZ_ASSERT_IF
(
matchType
=
=
MatchType
:
:
SUBSTITUTE_BECAUSE_NOT_FOUND
|
|
matchType
=
=
MatchType
:
:
SUBSTITUTE_BECAUSE_PENDING
surface
-
>
GetSurfaceKey
(
)
.
SVGContext
(
)
=
=
aSurfaceKey
.
SVGContext
(
)
&
&
surface
-
>
GetSurfaceKey
(
)
.
Playback
(
)
=
=
aSurfaceKey
.
Playback
(
)
&
&
surface
-
>
GetSurfaceKey
(
)
.
Flags
(
)
=
=
aSurfaceKey
.
Flags
(
)
)
;
if
(
matchType
=
=
MatchType
:
:
EXACT
)
{
MarkUsed
(
WrapNotNull
(
surface
)
WrapNotNull
(
cache
)
)
;
}
return
LookupResult
(
Move
(
drawableSurface
)
matchType
)
;
}
bool
CanHold
(
const
Cost
aCost
)
const
{
return
aCost
<
=
mMaxCost
;
}
size_t
MaximumCapacity
(
)
const
{
return
size_t
(
mMaxCost
)
;
}
void
SurfaceAvailable
(
NotNull
<
ISurfaceProvider
*
>
aProvider
)
{
if
(
!
aProvider
-
>
Availability
(
)
.
IsPlaceholder
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Calling
SurfaceAvailable
on
non
-
placeholder
"
)
;
return
;
}
Insert
(
aProvider
true
)
;
}
void
LockImage
(
const
ImageKey
aImageKey
)
{
RefPtr
<
ImageSurfaceCache
>
cache
=
GetImageCache
(
aImageKey
)
;
if
(
!
cache
)
{
cache
=
new
ImageSurfaceCache
;
mImageCaches
.
Put
(
aImageKey
cache
)
;
}
cache
-
>
SetLocked
(
true
)
;
}
void
UnlockImage
(
const
ImageKey
aImageKey
)
{
RefPtr
<
ImageSurfaceCache
>
cache
=
GetImageCache
(
aImageKey
)
;
if
(
!
cache
|
|
!
cache
-
>
IsLocked
(
)
)
{
return
;
}
cache
-
>
SetLocked
(
false
)
;
DoUnlockSurfaces
(
WrapNotNull
(
cache
)
)
;
}
void
UnlockEntries
(
const
ImageKey
aImageKey
)
{
RefPtr
<
ImageSurfaceCache
>
cache
=
GetImageCache
(
aImageKey
)
;
if
(
!
cache
|
|
!
cache
-
>
IsLocked
(
)
)
{
return
;
}
DoUnlockSurfaces
(
WrapNotNull
(
cache
)
)
;
}
void
RemoveImage
(
const
ImageKey
aImageKey
)
{
RefPtr
<
ImageSurfaceCache
>
cache
=
GetImageCache
(
aImageKey
)
;
if
(
!
cache
)
{
return
;
}
for
(
auto
iter
=
cache
-
>
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
StopTracking
(
WrapNotNull
(
iter
.
UserData
(
)
)
)
;
}
mImageCaches
.
Remove
(
aImageKey
)
;
}
void
DiscardAll
(
)
{
while
(
!
mCosts
.
IsEmpty
(
)
)
{
Remove
(
mCosts
.
LastElement
(
)
.
Surface
(
)
)
;
}
}
void
DiscardForMemoryPressure
(
)
{
const
Cost
discardableCost
=
(
mMaxCost
-
mAvailableCost
)
-
mLockedCost
;
MOZ_ASSERT
(
discardableCost
<
=
mMaxCost
"
Discardable
cost
doesn
'
t
add
up
"
)
;
const
Cost
targetCost
=
mAvailableCost
+
(
discardableCost
/
mDiscardFactor
)
;
if
(
targetCost
>
mMaxCost
-
mLockedCost
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Target
cost
is
more
than
we
can
discard
"
)
;
DiscardAll
(
)
;
return
;
}
while
(
mAvailableCost
<
targetCost
)
{
MOZ_ASSERT
(
!
mCosts
.
IsEmpty
(
)
"
Removed
everything
and
still
not
done
"
)
;
Remove
(
mCosts
.
LastElement
(
)
.
Surface
(
)
)
;
}
}
void
LockSurface
(
NotNull
<
CachedSurface
*
>
aSurface
)
{
if
(
aSurface
-
>
IsPlaceholder
(
)
|
|
aSurface
-
>
IsLocked
(
)
)
{
return
;
}
StopTracking
(
aSurface
)
;
aSurface
-
>
SetLocked
(
true
)
;
StartTracking
(
aSurface
)
;
}
NS_IMETHOD
CollectReports
(
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aData
bool
aAnonymize
)
override
{
MutexAutoLock
lock
(
mMutex
)
;
MOZ_COLLECT_REPORT
(
"
imagelib
-
surface
-
cache
-
estimated
-
total
"
KIND_OTHER
UNITS_BYTES
(
mMaxCost
-
mAvailableCost
)
"
Estimated
total
memory
used
by
the
imagelib
surface
cache
.
"
)
;
MOZ_COLLECT_REPORT
(
"
imagelib
-
surface
-
cache
-
estimated
-
locked
"
KIND_OTHER
UNITS_BYTES
mLockedCost
"
Estimated
memory
used
by
locked
surfaces
in
the
imagelib
surface
cache
.
"
)
;
MOZ_COLLECT_REPORT
(
"
imagelib
-
surface
-
cache
-
overflow
-
count
"
KIND_OTHER
UNITS_COUNT
mOverflowCount
"
Count
of
how
many
times
the
surface
cache
has
hit
its
capacity
and
been
"
"
unable
to
insert
a
new
surface
.
"
)
;
return
NS_OK
;
}
void
CollectSizeOfSurfaces
(
const
ImageKey
aImageKey
nsTArray
<
SurfaceMemoryCounter
>
&
aCounters
MallocSizeOf
aMallocSizeOf
)
{
RefPtr
<
ImageSurfaceCache
>
cache
=
GetImageCache
(
aImageKey
)
;
if
(
!
cache
)
{
return
;
}
CachedSurface
:
:
SurfaceMemoryReport
report
(
aCounters
aMallocSizeOf
)
;
for
(
auto
iter
=
cache
-
>
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
report
.
Add
(
WrapNotNull
(
iter
.
UserData
(
)
)
)
;
}
}
private
:
already_AddRefed
<
ImageSurfaceCache
>
GetImageCache
(
const
ImageKey
aImageKey
)
{
RefPtr
<
ImageSurfaceCache
>
imageCache
;
mImageCaches
.
Get
(
aImageKey
getter_AddRefs
(
imageCache
)
)
;
return
imageCache
.
forget
(
)
;
}
bool
CanHoldAfterDiscarding
(
const
Cost
aCost
)
const
{
return
aCost
<
=
mMaxCost
-
mLockedCost
;
}
void
MarkUsed
(
NotNull
<
CachedSurface
*
>
aSurface
NotNull
<
ImageSurfaceCache
*
>
aCache
)
{
if
(
aCache
-
>
IsLocked
(
)
)
{
LockSurface
(
aSurface
)
;
}
else
{
mExpirationTracker
.
MarkUsed
(
aSurface
)
;
}
}
void
DoUnlockSurfaces
(
NotNull
<
ImageSurfaceCache
*
>
aCache
)
{
for
(
auto
iter
=
aCache
-
>
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
NotNull
<
CachedSurface
*
>
surface
=
WrapNotNull
(
iter
.
UserData
(
)
)
;
if
(
surface
-
>
IsPlaceholder
(
)
|
|
!
surface
-
>
IsLocked
(
)
)
{
continue
;
}
StopTracking
(
surface
)
;
surface
-
>
SetLocked
(
false
)
;
StartTracking
(
surface
)
;
}
}
void
RemoveEntry
(
const
ImageKey
aImageKey
const
SurfaceKey
&
aSurfaceKey
)
{
RefPtr
<
ImageSurfaceCache
>
cache
=
GetImageCache
(
aImageKey
)
;
if
(
!
cache
)
{
return
;
}
RefPtr
<
CachedSurface
>
surface
=
cache
-
>
Lookup
(
aSurfaceKey
)
;
if
(
!
surface
)
{
return
;
}
Remove
(
WrapNotNull
(
surface
)
)
;
}
struct
SurfaceTracker
:
public
nsExpirationTracker
<
CachedSurface
2
>
{
explicit
SurfaceTracker
(
uint32_t
aSurfaceCacheExpirationTimeMS
)
:
nsExpirationTracker
<
CachedSurface
2
>
(
aSurfaceCacheExpirationTimeMS
"
SurfaceTracker
"
)
{
}
protected
:
virtual
void
NotifyExpired
(
CachedSurface
*
aSurface
)
override
{
if
(
sInstance
)
{
MutexAutoLock
lock
(
sInstance
-
>
GetMutex
(
)
)
;
sInstance
-
>
Remove
(
WrapNotNull
(
aSurface
)
)
;
}
}
}
;
struct
MemoryPressureObserver
:
public
nsIObserver
{
NS_DECL_ISUPPORTS
NS_IMETHOD
Observe
(
nsISupports
*
const
char
*
aTopic
const
char16_t
*
)
override
{
if
(
sInstance
&
&
strcmp
(
aTopic
"
memory
-
pressure
"
)
=
=
0
)
{
MutexAutoLock
lock
(
sInstance
-
>
GetMutex
(
)
)
;
sInstance
-
>
DiscardForMemoryPressure
(
)
;
}
return
NS_OK
;
}
private
:
virtual
~
MemoryPressureObserver
(
)
{
}
}
;
nsTArray
<
CostEntry
>
mCosts
;
nsRefPtrHashtable
<
nsPtrHashKey
<
Image
>
ImageSurfaceCache
>
mImageCaches
;
SurfaceTracker
mExpirationTracker
;
RefPtr
<
MemoryPressureObserver
>
mMemoryPressureObserver
;
Mutex
mMutex
;
const
uint32_t
mDiscardFactor
;
const
Cost
mMaxCost
;
Cost
mAvailableCost
;
Cost
mLockedCost
;
size_t
mOverflowCount
;
}
;
NS_IMPL_ISUPPORTS
(
SurfaceCacheImpl
nsIMemoryReporter
)
NS_IMPL_ISUPPORTS
(
SurfaceCacheImpl
:
:
MemoryPressureObserver
nsIObserver
)
void
SurfaceCache
:
:
Initialize
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
sInstance
"
Shouldn
'
t
initialize
more
than
once
"
)
;
uint32_t
surfaceCacheExpirationTimeMS
=
gfxPrefs
:
:
ImageMemSurfaceCacheMinExpirationMS
(
)
;
uint32_t
surfaceCacheDiscardFactor
=
max
(
gfxPrefs
:
:
ImageMemSurfaceCacheDiscardFactor
(
)
1u
)
;
uint64_t
surfaceCacheMaxSizeKB
=
gfxPrefs
:
:
ImageMemSurfaceCacheMaxSizeKB
(
)
;
uint32_t
surfaceCacheSizeFactor
=
max
(
gfxPrefs
:
:
ImageMemSurfaceCacheSizeFactor
(
)
1u
)
;
uint64_t
memorySize
=
PR_GetPhysicalMemorySize
(
)
;
if
(
memorySize
=
=
0
)
{
MOZ_ASSERT_UNREACHABLE
(
"
PR_GetPhysicalMemorySize
not
implemented
here
"
)
;
memorySize
=
256
*
1024
*
1024
;
}
uint64_t
proposedSize
=
memorySize
/
surfaceCacheSizeFactor
;
uint64_t
surfaceCacheSizeBytes
=
min
(
proposedSize
surfaceCacheMaxSizeKB
*
1024
)
;
uint32_t
finalSurfaceCacheSizeBytes
=
min
(
surfaceCacheSizeBytes
uint64_t
(
UINT32_MAX
)
)
;
sInstance
=
new
SurfaceCacheImpl
(
surfaceCacheExpirationTimeMS
surfaceCacheDiscardFactor
finalSurfaceCacheSizeBytes
)
;
sInstance
-
>
InitMemoryReporter
(
)
;
}
void
SurfaceCache
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
sInstance
"
No
singleton
-
was
Shutdown
(
)
called
twice
?
"
)
;
sInstance
=
nullptr
;
}
LookupResult
SurfaceCache
:
:
Lookup
(
const
ImageKey
aImageKey
const
SurfaceKey
&
aSurfaceKey
)
{
if
(
!
sInstance
)
{
return
LookupResult
(
MatchType
:
:
NOT_FOUND
)
;
}
MutexAutoLock
lock
(
sInstance
-
>
GetMutex
(
)
)
;
return
sInstance
-
>
Lookup
(
aImageKey
aSurfaceKey
)
;
}
LookupResult
SurfaceCache
:
:
LookupBestMatch
(
const
ImageKey
aImageKey
const
SurfaceKey
&
aSurfaceKey
)
{
if
(
!
sInstance
)
{
return
LookupResult
(
MatchType
:
:
NOT_FOUND
)
;
}
MutexAutoLock
lock
(
sInstance
-
>
GetMutex
(
)
)
;
return
sInstance
-
>
LookupBestMatch
(
aImageKey
aSurfaceKey
)
;
}
InsertOutcome
SurfaceCache
:
:
Insert
(
NotNull
<
ISurfaceProvider
*
>
aProvider
)
{
if
(
!
sInstance
)
{
return
InsertOutcome
:
:
FAILURE
;
}
MutexAutoLock
lock
(
sInstance
-
>
GetMutex
(
)
)
;
return
sInstance
-
>
Insert
(
aProvider
false
)
;
}
bool
SurfaceCache
:
:
CanHold
(
const
IntSize
&
aSize
uint32_t
aBytesPerPixel
)
{
if
(
!
sInstance
)
{
return
false
;
}
Cost
cost
=
ComputeCost
(
aSize
aBytesPerPixel
)
;
return
sInstance
-
>
CanHold
(
cost
)
;
}
bool
SurfaceCache
:
:
CanHold
(
size_t
aSize
)
{
if
(
!
sInstance
)
{
return
false
;
}
return
sInstance
-
>
CanHold
(
aSize
)
;
}
void
SurfaceCache
:
:
SurfaceAvailable
(
NotNull
<
ISurfaceProvider
*
>
aProvider
)
{
if
(
!
sInstance
)
{
return
;
}
MutexAutoLock
lock
(
sInstance
-
>
GetMutex
(
)
)
;
sInstance
-
>
SurfaceAvailable
(
aProvider
)
;
}
void
SurfaceCache
:
:
LockImage
(
const
ImageKey
aImageKey
)
{
if
(
sInstance
)
{
MutexAutoLock
lock
(
sInstance
-
>
GetMutex
(
)
)
;
return
sInstance
-
>
LockImage
(
aImageKey
)
;
}
}
void
SurfaceCache
:
:
UnlockImage
(
const
ImageKey
aImageKey
)
{
if
(
sInstance
)
{
MutexAutoLock
lock
(
sInstance
-
>
GetMutex
(
)
)
;
return
sInstance
-
>
UnlockImage
(
aImageKey
)
;
}
}
void
SurfaceCache
:
:
UnlockEntries
(
const
ImageKey
aImageKey
)
{
if
(
sInstance
)
{
MutexAutoLock
lock
(
sInstance
-
>
GetMutex
(
)
)
;
return
sInstance
-
>
UnlockEntries
(
aImageKey
)
;
}
}
void
SurfaceCache
:
:
RemoveImage
(
const
ImageKey
aImageKey
)
{
if
(
sInstance
)
{
MutexAutoLock
lock
(
sInstance
-
>
GetMutex
(
)
)
;
sInstance
-
>
RemoveImage
(
aImageKey
)
;
}
}
void
SurfaceCache
:
:
DiscardAll
(
)
{
if
(
sInstance
)
{
MutexAutoLock
lock
(
sInstance
-
>
GetMutex
(
)
)
;
sInstance
-
>
DiscardAll
(
)
;
}
}
void
SurfaceCache
:
:
CollectSizeOfSurfaces
(
const
ImageKey
aImageKey
nsTArray
<
SurfaceMemoryCounter
>
&
aCounters
MallocSizeOf
aMallocSizeOf
)
{
if
(
!
sInstance
)
{
return
;
}
MutexAutoLock
lock
(
sInstance
-
>
GetMutex
(
)
)
;
return
sInstance
-
>
CollectSizeOfSurfaces
(
aImageKey
aCounters
aMallocSizeOf
)
;
}
size_t
SurfaceCache
:
:
MaximumCapacity
(
)
{
if
(
!
sInstance
)
{
return
0
;
}
MutexAutoLock
lock
(
sInstance
-
>
GetMutex
(
)
)
;
return
sInstance
-
>
MaximumCapacity
(
)
;
}
}
}
