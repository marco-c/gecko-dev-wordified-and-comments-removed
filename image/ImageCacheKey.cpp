#
include
"
ImageCacheKey
.
h
"
#
include
<
utility
>
#
include
"
mozilla
/
ContentBlocking
.
h
"
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
mozilla
/
StorageAccess
.
h
"
#
include
"
mozilla
/
StoragePrincipalHelper
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerManager
.
h
"
#
include
"
mozilla
/
StaticPrefs_privacy
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
using
namespace
dom
;
namespace
image
{
ImageCacheKey
:
:
ImageCacheKey
(
nsIURI
*
aURI
const
OriginAttributes
&
aAttrs
Document
*
aDocument
)
:
mURI
(
aURI
)
mOriginAttributes
(
aAttrs
)
mControlledDocument
(
GetSpecialCaseDocumentToken
(
aDocument
)
)
mIsolationKey
(
GetIsolationKey
(
aDocument
aURI
)
)
mIsChrome
(
false
)
{
if
(
mURI
-
>
SchemeIs
(
"
chrome
"
)
)
{
mIsChrome
=
true
;
}
}
ImageCacheKey
:
:
ImageCacheKey
(
const
ImageCacheKey
&
aOther
)
:
mURI
(
aOther
.
mURI
)
mOriginAttributes
(
aOther
.
mOriginAttributes
)
mControlledDocument
(
aOther
.
mControlledDocument
)
mIsolationKey
(
aOther
.
mIsolationKey
)
mHash
(
aOther
.
mHash
)
mIsChrome
(
aOther
.
mIsChrome
)
{
}
ImageCacheKey
:
:
ImageCacheKey
(
ImageCacheKey
&
&
aOther
)
:
mURI
(
std
:
:
move
(
aOther
.
mURI
)
)
mOriginAttributes
(
aOther
.
mOriginAttributes
)
mControlledDocument
(
aOther
.
mControlledDocument
)
mIsolationKey
(
aOther
.
mIsolationKey
)
mHash
(
aOther
.
mHash
)
mIsChrome
(
aOther
.
mIsChrome
)
{
}
bool
ImageCacheKey
:
:
operator
=
=
(
const
ImageCacheKey
&
aOther
)
const
{
if
(
mControlledDocument
!
=
aOther
.
mControlledDocument
)
{
return
false
;
}
if
(
!
mIsolationKey
.
Equals
(
aOther
.
mIsolationKey
nsCaseInsensitiveCStringComparator
)
)
{
return
false
;
}
if
(
mOriginAttributes
!
=
aOther
.
mOriginAttributes
)
{
return
false
;
}
bool
equals
=
false
;
nsresult
rv
=
mURI
-
>
Equals
(
aOther
.
mURI
&
equals
)
;
return
NS_SUCCEEDED
(
rv
)
&
&
equals
;
}
void
ImageCacheKey
:
:
EnsureHash
(
)
const
{
MOZ_ASSERT
(
mHash
.
isNothing
(
)
)
;
PLDHashNumber
hash
=
0
;
nsPrintfCString
ptr
(
"
%
p
"
mControlledDocument
)
;
nsAutoCString
suffix
;
mOriginAttributes
.
CreateSuffix
(
suffix
)
;
nsAutoCString
spec
;
Unused
<
<
mURI
-
>
GetSpec
(
spec
)
;
hash
=
HashString
(
spec
)
;
hash
=
AddToHash
(
hash
HashString
(
suffix
)
HashString
(
mIsolationKey
)
HashString
(
ptr
)
)
;
mHash
.
emplace
(
hash
)
;
}
void
*
ImageCacheKey
:
:
GetSpecialCaseDocumentToken
(
Document
*
aDocument
)
{
if
(
!
aDocument
|
|
aDocument
-
>
IsCookieAverse
(
)
)
{
return
nullptr
;
}
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
swm
&
&
aDocument
-
>
GetController
(
)
.
isSome
(
)
)
{
return
aDocument
;
}
return
nullptr
;
}
nsCString
ImageCacheKey
:
:
GetIsolationKey
(
Document
*
aDocument
nsIURI
*
aURI
)
{
if
(
!
aDocument
|
|
!
aDocument
-
>
GetInnerWindow
(
)
)
{
return
EmptyCString
(
)
;
}
if
(
StaticPrefs
:
:
privacy_partition_network_state
(
)
)
{
OriginAttributes
oa
;
StoragePrincipalHelper
:
:
GetOriginAttributesForNetworkState
(
aDocument
oa
)
;
nsAutoCString
suffix
;
oa
.
CreateSuffix
(
suffix
)
;
return
std
:
:
move
(
suffix
)
;
}
if
(
nsContentUtils
:
:
IsThirdPartyWindowOrChannel
(
aDocument
-
>
GetInnerWindow
(
)
nullptr
nullptr
)
)
{
return
StorageDisabledByAntiTracking
(
aDocument
aURI
)
?
aDocument
-
>
GetBaseDomain
(
)
:
EmptyCString
(
)
;
}
if
(
!
ContentBlocking
:
:
ApproximateAllowAccessForWithoutChannel
(
aDocument
-
>
GetInnerWindow
(
)
aURI
)
)
{
nsPIDOMWindowOuter
*
top
=
aDocument
-
>
GetInnerWindow
(
)
-
>
GetInProcessScriptableTop
(
)
;
nsPIDOMWindowInner
*
topInner
=
top
?
top
-
>
GetCurrentInnerWindow
(
)
:
nullptr
;
if
(
!
topInner
)
{
return
aDocument
-
>
GetBaseDomain
(
)
;
}
return
topInner
-
>
GetExtantDoc
(
)
?
topInner
-
>
GetExtantDoc
(
)
-
>
GetBaseDomain
(
)
:
EmptyCString
(
)
;
}
return
EmptyCString
(
)
;
}
}
}
