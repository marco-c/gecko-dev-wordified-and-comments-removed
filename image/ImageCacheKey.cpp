#
include
"
ImageCacheKey
.
h
"
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsICookieService
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
AntiTrackingCommon
.
h
"
#
include
"
mozilla
/
dom
/
BlobURLProtocolHandler
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerManager
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsPrintfCString
.
h
"
namespace
mozilla
{
using
namespace
dom
;
namespace
image
{
static
Maybe
<
uint64_t
>
BlobSerial
(
nsIURI
*
aURI
)
{
nsAutoCString
spec
;
aURI
-
>
GetSpec
(
spec
)
;
RefPtr
<
BlobImpl
>
blob
;
if
(
NS_SUCCEEDED
(
NS_GetBlobForBlobURISpec
(
spec
getter_AddRefs
(
blob
)
)
)
&
&
blob
)
{
return
Some
(
blob
-
>
GetSerialNumber
(
)
)
;
}
return
Nothing
(
)
;
}
ImageCacheKey
:
:
ImageCacheKey
(
nsIURI
*
aURI
const
OriginAttributes
&
aAttrs
nsIDocument
*
aDocument
nsresult
&
aRv
)
:
mURI
(
aURI
)
mOriginAttributes
(
aAttrs
)
mControlledDocument
(
GetSpecialCaseDocumentToken
(
aDocument
aURI
)
)
mHash
(
0
)
mIsChrome
(
false
)
{
if
(
SchemeIs
(
"
blob
"
)
)
{
mBlobSerial
=
BlobSerial
(
mURI
)
;
}
else
if
(
SchemeIs
(
"
chrome
"
)
)
{
mIsChrome
=
true
;
}
nsPrintfCString
ptr
(
"
%
p
"
mControlledDocument
)
;
nsAutoCString
suffix
;
mOriginAttributes
.
CreateSuffix
(
suffix
)
;
if
(
mBlobSerial
)
{
aRv
=
mURI
-
>
GetRef
(
mBlobRef
)
;
NS_ENSURE_SUCCESS_VOID
(
aRv
)
;
mHash
=
HashGeneric
(
*
mBlobSerial
HashString
(
mBlobRef
)
)
;
}
else
{
nsAutoCString
spec
;
aRv
=
mURI
-
>
GetSpec
(
spec
)
;
NS_ENSURE_SUCCESS_VOID
(
aRv
)
;
mHash
=
HashString
(
spec
)
;
}
mHash
=
AddToHash
(
mHash
HashString
(
suffix
)
HashString
(
ptr
)
)
;
}
ImageCacheKey
:
:
ImageCacheKey
(
const
ImageCacheKey
&
aOther
)
:
mURI
(
aOther
.
mURI
)
mBlobSerial
(
aOther
.
mBlobSerial
)
mBlobRef
(
aOther
.
mBlobRef
)
mOriginAttributes
(
aOther
.
mOriginAttributes
)
mControlledDocument
(
aOther
.
mControlledDocument
)
mHash
(
aOther
.
mHash
)
mIsChrome
(
aOther
.
mIsChrome
)
{
}
ImageCacheKey
:
:
ImageCacheKey
(
ImageCacheKey
&
&
aOther
)
:
mURI
(
std
:
:
move
(
aOther
.
mURI
)
)
mBlobSerial
(
std
:
:
move
(
aOther
.
mBlobSerial
)
)
mBlobRef
(
std
:
:
move
(
aOther
.
mBlobRef
)
)
mOriginAttributes
(
aOther
.
mOriginAttributes
)
mControlledDocument
(
aOther
.
mControlledDocument
)
mHash
(
aOther
.
mHash
)
mIsChrome
(
aOther
.
mIsChrome
)
{
}
bool
ImageCacheKey
:
:
operator
=
=
(
const
ImageCacheKey
&
aOther
)
const
{
if
(
mControlledDocument
!
=
aOther
.
mControlledDocument
)
{
return
false
;
}
if
(
mOriginAttributes
!
=
aOther
.
mOriginAttributes
)
{
return
false
;
}
if
(
mBlobSerial
|
|
aOther
.
mBlobSerial
)
{
return
mBlobSerial
=
=
aOther
.
mBlobSerial
&
&
mBlobRef
=
=
aOther
.
mBlobRef
;
}
bool
equals
=
false
;
nsresult
rv
=
mURI
-
>
Equals
(
aOther
.
mURI
&
equals
)
;
return
NS_SUCCEEDED
(
rv
)
&
&
equals
;
}
bool
ImageCacheKey
:
:
SchemeIs
(
const
char
*
aScheme
)
{
bool
matches
=
false
;
return
NS_SUCCEEDED
(
mURI
-
>
SchemeIs
(
aScheme
&
matches
)
)
&
&
matches
;
}
void
*
ImageCacheKey
:
:
GetSpecialCaseDocumentToken
(
nsIDocument
*
aDocument
nsIURI
*
aURI
)
{
if
(
!
aDocument
)
{
return
nullptr
;
}
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
swm
&
&
aDocument
-
>
GetController
(
)
.
isSome
(
)
)
{
return
aDocument
;
}
if
(
nsContentUtils
:
:
StorageDisabledByAntiTracking
(
aDocument
aURI
)
)
{
return
aDocument
;
}
if
(
!
aDocument
-
>
IsCookieAverse
(
)
&
&
!
AntiTrackingCommon
:
:
MaybeIsFirstPartyStorageAccessGrantedFor
(
aDocument
-
>
GetInnerWindow
(
)
aURI
)
)
{
return
aDocument
;
}
return
nullptr
;
}
}
}
