#
include
"
ImageCacheKey
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
ImageURL
.
h
"
#
include
"
nsHostObjectProtocolHandler
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
dom
/
workers
/
ServiceWorkerManager
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsPrintfCString
.
h
"
namespace
mozilla
{
using
namespace
dom
;
namespace
image
{
bool
URISchemeIs
(
ImageURL
*
aURI
const
char
*
aScheme
)
{
bool
schemeMatches
=
false
;
if
(
NS_WARN_IF
(
NS_FAILED
(
aURI
-
>
SchemeIs
(
aScheme
&
schemeMatches
)
)
)
)
{
return
false
;
}
return
schemeMatches
;
}
static
Maybe
<
uint64_t
>
BlobSerial
(
ImageURL
*
aURI
)
{
nsAutoCString
spec
;
aURI
-
>
GetSpec
(
spec
)
;
RefPtr
<
BlobImpl
>
blob
;
if
(
NS_SUCCEEDED
(
NS_GetBlobForBlobURISpec
(
spec
getter_AddRefs
(
blob
)
)
)
&
&
blob
)
{
return
Some
(
blob
-
>
GetSerialNumber
(
)
)
;
}
return
Nothing
(
)
;
}
ImageCacheKey
:
:
ImageCacheKey
(
nsIURI
*
aURI
const
OriginAttributes
&
aAttrs
nsIDocument
*
aDocument
nsresult
&
aRv
)
:
mURI
(
new
ImageURL
(
aURI
aRv
)
)
mOriginAttributes
(
aAttrs
)
mControlledDocument
(
GetControlledDocumentToken
(
aDocument
)
)
mIsChrome
(
URISchemeIs
(
mURI
"
chrome
"
)
)
{
NS_ENSURE_SUCCESS_VOID
(
aRv
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
URISchemeIs
(
mURI
"
blob
"
)
)
{
mBlobSerial
=
BlobSerial
(
mURI
)
;
}
mHash
=
ComputeHash
(
mURI
mBlobSerial
mOriginAttributes
mControlledDocument
)
;
}
ImageCacheKey
:
:
ImageCacheKey
(
ImageURL
*
aURI
const
OriginAttributes
&
aAttrs
nsIDocument
*
aDocument
)
:
mURI
(
aURI
)
mOriginAttributes
(
aAttrs
)
mControlledDocument
(
GetControlledDocumentToken
(
aDocument
)
)
mIsChrome
(
URISchemeIs
(
mURI
"
chrome
"
)
)
{
MOZ_ASSERT
(
aURI
)
;
if
(
URISchemeIs
(
mURI
"
blob
"
)
)
{
mBlobSerial
=
BlobSerial
(
mURI
)
;
}
mHash
=
ComputeHash
(
mURI
mBlobSerial
mOriginAttributes
mControlledDocument
)
;
}
ImageCacheKey
:
:
ImageCacheKey
(
const
ImageCacheKey
&
aOther
)
:
mURI
(
aOther
.
mURI
)
mBlobSerial
(
aOther
.
mBlobSerial
)
mOriginAttributes
(
aOther
.
mOriginAttributes
)
mControlledDocument
(
aOther
.
mControlledDocument
)
mHash
(
aOther
.
mHash
)
mIsChrome
(
aOther
.
mIsChrome
)
{
}
ImageCacheKey
:
:
ImageCacheKey
(
ImageCacheKey
&
&
aOther
)
:
mURI
(
Move
(
aOther
.
mURI
)
)
mBlobSerial
(
Move
(
aOther
.
mBlobSerial
)
)
mOriginAttributes
(
aOther
.
mOriginAttributes
)
mControlledDocument
(
aOther
.
mControlledDocument
)
mHash
(
aOther
.
mHash
)
mIsChrome
(
aOther
.
mIsChrome
)
{
}
bool
ImageCacheKey
:
:
operator
=
=
(
const
ImageCacheKey
&
aOther
)
const
{
if
(
mControlledDocument
!
=
aOther
.
mControlledDocument
)
{
return
false
;
}
if
(
mOriginAttributes
!
=
aOther
.
mOriginAttributes
)
{
return
false
;
}
if
(
mBlobSerial
|
|
aOther
.
mBlobSerial
)
{
return
mBlobSerial
=
=
aOther
.
mBlobSerial
&
&
mURI
-
>
HasSameRef
(
*
aOther
.
mURI
)
;
}
return
*
mURI
=
=
*
aOther
.
mURI
;
}
const
char
*
ImageCacheKey
:
:
Spec
(
)
const
{
return
mURI
-
>
Spec
(
)
;
}
uint32_t
ImageCacheKey
:
:
ComputeHash
(
ImageURL
*
aURI
const
Maybe
<
uint64_t
>
&
aBlobSerial
const
OriginAttributes
&
aAttrs
void
*
aControlledDocument
)
{
nsPrintfCString
ptr
(
"
%
p
"
aControlledDocument
)
;
nsAutoCString
suffix
;
aAttrs
.
CreateSuffix
(
suffix
)
;
return
AddToHash
(
0
aURI
-
>
ComputeHash
(
aBlobSerial
)
HashString
(
suffix
)
HashString
(
ptr
)
)
;
}
void
*
ImageCacheKey
:
:
GetControlledDocumentToken
(
nsIDocument
*
aDocument
)
{
void
*
pointer
=
nullptr
;
using
dom
:
:
workers
:
:
ServiceWorkerManager
;
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
aDocument
&
&
swm
)
{
ErrorResult
rv
;
if
(
swm
-
>
IsControlled
(
aDocument
rv
)
)
{
pointer
=
aDocument
;
}
}
return
pointer
;
}
}
}
