#
ifndef
mozilla_image_SurfaceCache_h
#
define
mozilla_image_SurfaceCache_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
include
"
gfxPoint
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
PlaybackType
.
h
"
#
include
"
SurfaceFlags
.
h
"
#
include
"
SVGImageContext
.
h
"
namespace
mozilla
{
namespace
image
{
class
Image
;
class
ISurfaceProvider
;
class
LookupResult
;
class
SurfaceCacheImpl
;
struct
SurfaceMemoryCounter
;
typedef
Image
*
ImageKey
;
class
SurfaceKey
{
typedef
gfx
:
:
IntSize
IntSize
;
public
:
bool
operator
=
=
(
const
SurfaceKey
&
aOther
)
const
{
return
aOther
.
mSize
=
=
mSize
&
&
aOther
.
mSVGContext
=
=
mSVGContext
&
&
aOther
.
mPlayback
=
=
mPlayback
&
&
aOther
.
mFlags
=
=
mFlags
;
}
PLDHashNumber
Hash
(
)
const
{
PLDHashNumber
hash
=
HashGeneric
(
mSize
.
width
mSize
.
height
)
;
hash
=
AddToHash
(
hash
mSVGContext
.
map
(
HashSIC
)
.
valueOr
(
0
)
)
;
hash
=
AddToHash
(
hash
uint8_t
(
mPlayback
)
uint32_t
(
mFlags
)
)
;
return
hash
;
}
SurfaceKey
CloneWithSize
(
const
IntSize
&
aSize
)
const
{
return
SurfaceKey
(
aSize
mSVGContext
mPlayback
mFlags
)
;
}
const
IntSize
&
Size
(
)
const
{
return
mSize
;
}
Maybe
<
SVGImageContext
>
SVGContext
(
)
const
{
return
mSVGContext
;
}
PlaybackType
Playback
(
)
const
{
return
mPlayback
;
}
SurfaceFlags
Flags
(
)
const
{
return
mFlags
;
}
private
:
SurfaceKey
(
const
IntSize
&
aSize
const
Maybe
<
SVGImageContext
>
&
aSVGContext
PlaybackType
aPlayback
SurfaceFlags
aFlags
)
:
mSize
(
aSize
)
mSVGContext
(
aSVGContext
)
mPlayback
(
aPlayback
)
mFlags
(
aFlags
)
{
}
static
PLDHashNumber
HashSIC
(
const
SVGImageContext
&
aSIC
)
{
return
aSIC
.
Hash
(
)
;
}
friend
SurfaceKey
RasterSurfaceKey
(
const
IntSize
&
SurfaceFlags
PlaybackType
)
;
friend
SurfaceKey
VectorSurfaceKey
(
const
IntSize
&
const
Maybe
<
SVGImageContext
>
&
)
;
IntSize
mSize
;
Maybe
<
SVGImageContext
>
mSVGContext
;
PlaybackType
mPlayback
;
SurfaceFlags
mFlags
;
}
;
inline
SurfaceKey
RasterSurfaceKey
(
const
gfx
:
:
IntSize
&
aSize
SurfaceFlags
aFlags
PlaybackType
aPlayback
)
{
return
SurfaceKey
(
aSize
Nothing
(
)
aPlayback
aFlags
)
;
}
inline
SurfaceKey
VectorSurfaceKey
(
const
gfx
:
:
IntSize
&
aSize
const
Maybe
<
SVGImageContext
>
&
aSVGContext
)
{
return
SurfaceKey
(
aSize
aSVGContext
PlaybackType
:
:
eStatic
DefaultSurfaceFlags
(
)
)
;
}
class
AvailabilityState
{
public
:
static
AvailabilityState
StartAvailable
(
)
{
return
AvailabilityState
(
true
)
;
}
static
AvailabilityState
StartAsPlaceholder
(
)
{
return
AvailabilityState
(
false
)
;
}
bool
IsAvailable
(
)
const
{
return
mIsAvailable
;
}
bool
IsPlaceholder
(
)
const
{
return
!
mIsAvailable
;
}
bool
CannotSubstitute
(
)
const
{
return
mCannotSubstitute
;
}
void
SetCannotSubstitute
(
)
{
mCannotSubstitute
=
true
;
}
private
:
friend
class
SurfaceCacheImpl
;
explicit
AvailabilityState
(
bool
aIsAvailable
)
:
mIsAvailable
(
aIsAvailable
)
mCannotSubstitute
(
false
)
{
}
void
SetAvailable
(
)
{
mIsAvailable
=
true
;
}
bool
mIsAvailable
:
1
;
bool
mCannotSubstitute
:
1
;
}
;
enum
class
InsertOutcome
:
uint8_t
{
SUCCESS
FAILURE
FAILURE_ALREADY_PRESENT
}
;
struct
SurfaceCache
{
typedef
gfx
:
:
IntSize
IntSize
;
static
void
Initialize
(
)
;
static
void
Shutdown
(
)
;
static
LookupResult
Lookup
(
const
ImageKey
aImageKey
const
SurfaceKey
&
aSurfaceKey
)
;
static
LookupResult
LookupBestMatch
(
const
ImageKey
aImageKey
const
SurfaceKey
&
aSurfaceKey
)
;
static
InsertOutcome
Insert
(
NotNull
<
ISurfaceProvider
*
>
aProvider
)
;
static
void
SurfaceAvailable
(
NotNull
<
ISurfaceProvider
*
>
aProvider
)
;
static
bool
CanHold
(
const
IntSize
&
aSize
uint32_t
aBytesPerPixel
=
4
)
;
static
bool
CanHold
(
size_t
aSize
)
;
static
void
LockImage
(
const
ImageKey
aImageKey
)
;
static
void
UnlockImage
(
const
ImageKey
aImageKey
)
;
static
void
UnlockEntries
(
const
ImageKey
aImageKey
)
;
static
void
RemoveImage
(
const
ImageKey
aImageKey
)
;
static
void
DiscardAll
(
)
;
static
void
CollectSizeOfSurfaces
(
const
ImageKey
aImageKey
nsTArray
<
SurfaceMemoryCounter
>
&
aCounters
MallocSizeOf
aMallocSizeOf
)
;
static
size_t
MaximumCapacity
(
)
;
private
:
virtual
~
SurfaceCache
(
)
=
0
;
}
;
}
}
#
endif
