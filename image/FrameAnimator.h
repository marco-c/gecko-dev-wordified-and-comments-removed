#
ifndef
mozilla_image_FrameAnimator_h
#
define
mozilla_image_FrameAnimator_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
gfxTypes
.
h
"
#
include
"
imgFrame
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
SurfaceCache
.
h
"
namespace
mozilla
{
namespace
image
{
class
RasterImage
;
class
AnimationState
{
public
:
explicit
AnimationState
(
uint16_t
aAnimationMode
)
:
mFrameCount
(
0
)
mCurrentAnimationFrameIndex
(
0
)
mLoopRemainingCount
(
-
1
)
mLoopCount
(
-
1
)
mFirstFrameTimeout
(
FrameTimeout
:
:
FromRawMilliseconds
(
0
)
)
mAnimationMode
(
aAnimationMode
)
mHasBeenDecoded
(
false
)
{
}
void
NotifyDecodeComplete
(
)
;
bool
GetHasBeenDecoded
(
)
{
return
mHasBeenDecoded
;
}
void
ResetAnimation
(
)
;
void
SetAnimationMode
(
uint16_t
aAnimationMode
)
;
void
UpdateKnownFrameCount
(
uint32_t
aFrameCount
)
;
uint32_t
KnownFrameCount
(
)
const
{
return
mFrameCount
;
}
Maybe
<
uint32_t
>
FrameCount
(
)
const
;
void
SetFirstFrameRefreshArea
(
const
gfx
:
:
IntRect
&
aRefreshArea
)
;
gfx
:
:
IntRect
FirstFrameRefreshArea
(
)
const
{
return
mFirstFrameRefreshArea
;
}
void
InitAnimationFrameTimeIfNecessary
(
)
;
void
SetAnimationFrameTime
(
const
TimeStamp
&
aTime
)
;
uint32_t
GetCurrentAnimationFrameIndex
(
)
const
;
void
SetLoopCount
(
int32_t
aLoopCount
)
{
mLoopCount
=
aLoopCount
;
}
int32_t
LoopCount
(
)
const
{
return
mLoopCount
;
}
void
SetLoopLength
(
FrameTimeout
aLength
)
{
mLoopLength
=
Some
(
aLength
)
;
}
FrameTimeout
LoopLength
(
)
const
;
void
SetFirstFrameTimeout
(
FrameTimeout
aTimeout
)
{
mFirstFrameTimeout
=
aTimeout
;
}
FrameTimeout
FirstFrameTimeout
(
)
const
{
return
mFirstFrameTimeout
;
}
private
:
friend
class
FrameAnimator
;
gfx
:
:
IntRect
mFirstFrameRefreshArea
;
TimeStamp
mCurrentAnimationFrameTime
;
uint32_t
mFrameCount
;
uint32_t
mCurrentAnimationFrameIndex
;
int32_t
mLoopRemainingCount
;
int32_t
mLoopCount
;
Maybe
<
FrameTimeout
>
mLoopLength
;
FrameTimeout
mFirstFrameTimeout
;
uint16_t
mAnimationMode
;
bool
mHasBeenDecoded
;
}
;
struct
RefreshResult
{
RefreshResult
(
)
:
mFrameAdvanced
(
false
)
mAnimationFinished
(
false
)
{
}
void
Accumulate
(
const
RefreshResult
&
aOther
)
{
mFrameAdvanced
=
mFrameAdvanced
|
|
aOther
.
mFrameAdvanced
;
mAnimationFinished
=
mAnimationFinished
|
|
aOther
.
mAnimationFinished
;
mDirtyRect
=
mDirtyRect
.
Union
(
aOther
.
mDirtyRect
)
;
}
gfx
:
:
IntRect
mDirtyRect
;
bool
mFrameAdvanced
:
1
;
bool
mAnimationFinished
:
1
;
}
;
class
FrameAnimator
{
public
:
FrameAnimator
(
RasterImage
*
aImage
const
gfx
:
:
IntSize
&
aSize
)
:
mImage
(
aImage
)
mSize
(
aSize
)
mLastCompositedFrameIndex
(
-
1
)
{
MOZ_COUNT_CTOR
(
FrameAnimator
)
;
}
~
FrameAnimator
(
)
{
MOZ_COUNT_DTOR
(
FrameAnimator
)
;
}
RefreshResult
RequestRefresh
(
AnimationState
&
aState
const
TimeStamp
&
aTime
)
;
LookupResult
GetCompositedFrame
(
AnimationState
&
aState
)
;
void
CollectSizeOfCompositingSurfaces
(
nsTArray
<
SurfaceMemoryCounter
>
&
aCounters
MallocSizeOf
aMallocSizeOf
)
const
;
private
:
RefreshResult
AdvanceFrame
(
AnimationState
&
aState
TimeStamp
aTime
)
;
RawAccessFrameRef
GetRawFrame
(
uint32_t
aFrameNum
)
const
;
FrameTimeout
GetTimeoutForFrame
(
uint32_t
aFrameNum
)
const
;
TimeStamp
GetCurrentImgFrameEndTime
(
AnimationState
&
aState
)
const
;
bool
DoBlend
(
gfx
:
:
IntRect
*
aDirtyRect
uint32_t
aPrevFrameIndex
uint32_t
aNextFrameIndex
)
;
static
void
ClearFrame
(
uint8_t
*
aFrameData
const
gfx
:
:
IntRect
&
aFrameRect
)
;
static
void
ClearFrame
(
uint8_t
*
aFrameData
const
gfx
:
:
IntRect
&
aFrameRect
const
gfx
:
:
IntRect
&
aRectToClear
)
;
static
bool
CopyFrameImage
(
const
uint8_t
*
aDataSrc
const
gfx
:
:
IntRect
&
aRectSrc
uint8_t
*
aDataDest
const
gfx
:
:
IntRect
&
aRectDest
)
;
static
nsresult
DrawFrameTo
(
const
uint8_t
*
aSrcData
const
gfx
:
:
IntRect
&
aSrcRect
uint32_t
aSrcPaletteLength
bool
aSrcHasAlpha
uint8_t
*
aDstPixels
const
gfx
:
:
IntRect
&
aDstRect
BlendMethod
aBlendMethod
const
Maybe
<
gfx
:
:
IntRect
>
&
aBlendRect
)
;
private
:
RasterImage
*
mImage
;
gfx
:
:
IntSize
mSize
;
RawAccessFrameRef
mCompositingFrame
;
RawAccessFrameRef
mCompositingPrevFrame
;
int32_t
mLastCompositedFrameIndex
;
}
;
}
}
#
endif
