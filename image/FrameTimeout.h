#
ifndef
mozilla_image_FrameTimeout_h
#
define
mozilla_image_FrameTimeout_h
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
namespace
mozilla
{
namespace
image
{
struct
FrameTimeout
{
static
FrameTimeout
Zero
(
)
{
return
FrameTimeout
(
0
)
;
}
static
FrameTimeout
Forever
(
)
{
return
FrameTimeout
(
-
1
)
;
}
static
FrameTimeout
FromRawMilliseconds
(
int32_t
aRawMilliseconds
)
{
if
(
aRawMilliseconds
<
0
)
{
return
FrameTimeout
:
:
Forever
(
)
;
}
if
(
aRawMilliseconds
>
=
0
&
&
aRawMilliseconds
<
=
10
)
{
return
FrameTimeout
(
100
)
;
}
return
FrameTimeout
(
aRawMilliseconds
)
;
}
bool
operator
=
=
(
const
FrameTimeout
&
aOther
)
const
{
return
mTimeout
=
=
aOther
.
mTimeout
;
}
bool
operator
!
=
(
const
FrameTimeout
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
FrameTimeout
operator
+
(
const
FrameTimeout
&
aOther
)
{
if
(
*
this
=
=
Forever
(
)
|
|
aOther
=
=
Forever
(
)
)
{
return
Forever
(
)
;
}
return
FrameTimeout
(
mTimeout
+
aOther
.
mTimeout
)
;
}
FrameTimeout
&
operator
+
=
(
const
FrameTimeout
&
aOther
)
{
*
this
=
*
this
+
aOther
;
return
*
this
;
}
uint32_t
AsMilliseconds
(
)
const
{
if
(
*
this
=
=
Forever
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Calling
AsMilliseconds
(
)
on
an
infinite
FrameTimeout
"
)
;
return
100
;
}
return
uint32_t
(
mTimeout
)
;
}
int32_t
AsEncodedValueDeprecated
(
)
const
{
return
mTimeout
;
}
private
:
explicit
FrameTimeout
(
int32_t
aTimeout
)
:
mTimeout
(
aTimeout
)
{
}
int32_t
mTimeout
;
}
;
}
}
#
endif
