#
ifndef
mozilla_image_VectorImage_h
#
define
mozilla_image_VectorImage_h
#
include
"
Image
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
class
nsIRequest
;
class
gfxDrawable
;
namespace
mozilla
{
namespace
image
{
struct
SVGDrawingParameters
;
class
SVGDocumentWrapper
;
class
SVGRootRenderingObserver
;
class
SVGLoadEventListener
;
class
SVGParseCompleteListener
;
class
VectorImage
final
:
public
ImageResource
public
nsIStreamListener
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_IMGICONTAINER
virtual
size_t
SizeOfSourceWithComputedFallback
(
MallocSizeOf
aMallocSizeOf
)
const
override
;
virtual
void
CollectSizeOfSurfaces
(
nsTArray
<
SurfaceMemoryCounter
>
&
aCounters
MallocSizeOf
aMallocSizeOf
)
const
override
;
virtual
nsresult
OnImageDataAvailable
(
nsIRequest
*
aRequest
nsISupports
*
aContext
nsIInputStream
*
aInStr
uint64_t
aSourceOffset
uint32_t
aCount
)
override
;
virtual
nsresult
OnImageDataComplete
(
nsIRequest
*
aRequest
nsISupports
*
aContext
nsresult
aResult
bool
aLastPart
)
override
;
virtual
void
OnSurfaceDiscarded
(
)
override
;
void
InvalidateObserversOnNextRefreshDriverTick
(
)
;
void
OnSVGDocumentParsed
(
)
;
void
OnSVGDocumentLoaded
(
)
;
void
OnSVGDocumentError
(
)
;
virtual
void
ReportUseCounters
(
)
override
;
protected
:
explicit
VectorImage
(
ImageURL
*
aURI
=
nullptr
)
;
virtual
~
VectorImage
(
)
;
virtual
nsresult
StartAnimation
(
)
override
;
virtual
nsresult
StopAnimation
(
)
override
;
virtual
bool
ShouldAnimate
(
)
override
;
private
:
already_AddRefed
<
gfxDrawable
>
LookupCachedSurface
(
const
SVGDrawingParameters
&
aParams
)
;
void
CreateSurfaceAndShow
(
const
SVGDrawingParameters
&
aParams
gfx
:
:
BackendType
aBackend
)
;
void
Show
(
gfxDrawable
*
aDrawable
const
SVGDrawingParameters
&
aParams
)
;
nsresult
Init
(
const
char
*
aMimeType
uint32_t
aFlags
)
;
void
RecoverFromLossOfSurfaces
(
)
;
void
CancelAllListeners
(
)
;
void
SendInvalidationNotifications
(
)
;
RefPtr
<
SVGDocumentWrapper
>
mSVGDocumentWrapper
;
RefPtr
<
SVGRootRenderingObserver
>
mRenderingObserver
;
RefPtr
<
SVGLoadEventListener
>
mLoadEventListener
;
RefPtr
<
SVGParseCompleteListener
>
mParseCompleteListener
;
uint32_t
mLockCount
;
Maybe
<
Progress
>
mLoadProgress
;
bool
mIsInitialized
;
bool
mDiscardable
;
bool
mIsFullyLoaded
;
bool
mIsDrawing
;
bool
mHaveAnimations
;
bool
mHasPendingInvalidation
;
friend
class
ImageFactory
;
}
;
inline
NS_IMETHODIMP
VectorImage
:
:
GetAnimationMode
(
uint16_t
*
aAnimationMode
)
{
return
GetAnimationModeInternal
(
aAnimationMode
)
;
}
inline
NS_IMETHODIMP
VectorImage
:
:
SetAnimationMode
(
uint16_t
aAnimationMode
)
{
return
SetAnimationModeInternal
(
aAnimationMode
)
;
}
}
}
#
endif
