#
include
"
AnimationSurfaceProvider
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
Decoder
.
h
"
using
namespace
mozilla
:
:
gfx
;
namespace
mozilla
{
namespace
image
{
AnimationSurfaceProvider
:
:
AnimationSurfaceProvider
(
NotNull
<
RasterImage
*
>
aImage
const
SurfaceKey
&
aSurfaceKey
NotNull
<
Decoder
*
>
aDecoder
)
:
ISurfaceProvider
(
ImageKey
(
aImage
.
get
(
)
)
aSurfaceKey
AvailabilityState
:
:
StartAsPlaceholder
(
)
)
mImage
(
aImage
.
get
(
)
)
mDecodingMutex
(
"
AnimationSurfaceProvider
:
:
mDecoder
"
)
mDecoder
(
aDecoder
.
get
(
)
)
mFramesMutex
(
"
AnimationSurfaceProvider
:
:
mFrames
"
)
{
MOZ_ASSERT
(
!
mDecoder
-
>
IsMetadataDecode
(
)
"
Use
MetadataDecodingTask
for
metadata
decodes
"
)
;
MOZ_ASSERT
(
!
mDecoder
-
>
IsFirstFrameDecode
(
)
"
Use
DecodedSurfaceProvider
for
single
-
frame
image
decodes
"
)
;
}
AnimationSurfaceProvider
:
:
~
AnimationSurfaceProvider
(
)
{
DropImageReference
(
)
;
}
void
AnimationSurfaceProvider
:
:
DropImageReference
(
)
{
if
(
!
mImage
)
{
return
;
}
NS_ReleaseOnMainThreadSystemGroup
(
"
AnimationSurfaceProvider
:
:
mImage
"
mImage
.
forget
(
)
)
;
}
DrawableFrameRef
AnimationSurfaceProvider
:
:
DrawableRef
(
size_t
aFrame
)
{
MutexAutoLock
lock
(
mFramesMutex
)
;
if
(
Availability
(
)
.
IsPlaceholder
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Calling
DrawableRef
(
)
on
a
placeholder
"
)
;
return
DrawableFrameRef
(
)
;
}
if
(
mFrames
.
IsEmpty
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Calling
DrawableRef
(
)
when
we
have
no
frames
"
)
;
return
DrawableFrameRef
(
)
;
}
if
(
aFrame
>
=
mFrames
.
Length
(
)
)
{
return
DrawableFrameRef
(
)
;
}
MOZ_ASSERT
(
mFrames
[
aFrame
]
)
;
return
mFrames
[
aFrame
]
-
>
DrawableRef
(
)
;
}
bool
AnimationSurfaceProvider
:
:
IsFinished
(
)
const
{
MutexAutoLock
lock
(
mFramesMutex
)
;
if
(
Availability
(
)
.
IsPlaceholder
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Calling
IsFinished
(
)
on
a
placeholder
"
)
;
return
false
;
}
if
(
mFrames
.
IsEmpty
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Calling
IsFinished
(
)
when
we
have
no
frames
"
)
;
return
false
;
}
return
mFrames
[
0
]
-
>
IsFinished
(
)
;
}
size_t
AnimationSurfaceProvider
:
:
LogicalSizeInBytes
(
)
const
{
IntSize
size
=
GetSurfaceKey
(
)
.
Size
(
)
;
return
3
*
size
.
width
*
size
.
height
*
sizeof
(
uint32_t
)
;
}
void
AnimationSurfaceProvider
:
:
AddSizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
size_t
&
aHeapSizeOut
size_t
&
aNonHeapSizeOut
size_t
&
aSharedHandlesOut
)
{
MutexAutoLock
lock
(
mFramesMutex
)
;
for
(
const
RawAccessFrameRef
&
frame
:
mFrames
)
{
frame
-
>
AddSizeOfExcludingThis
(
aMallocSizeOf
aHeapSizeOut
aNonHeapSizeOut
aSharedHandlesOut
)
;
}
}
void
AnimationSurfaceProvider
:
:
Run
(
)
{
MutexAutoLock
lock
(
mDecodingMutex
)
;
if
(
!
mDecoder
|
|
!
mImage
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Running
after
decoding
finished
?
"
)
;
return
;
}
while
(
true
)
{
LexerResult
result
=
mDecoder
-
>
Decode
(
WrapNotNull
(
this
)
)
;
if
(
result
.
is
<
TerminalState
>
(
)
)
{
CheckForNewFrameAtTerminalState
(
)
;
FinishDecoding
(
)
;
return
;
}
if
(
mDecoder
-
>
HasProgress
(
)
)
{
NotifyProgress
(
WrapNotNull
(
mImage
)
WrapNotNull
(
mDecoder
)
)
;
}
if
(
result
=
=
LexerResult
(
Yield
:
:
NEED_MORE_DATA
)
)
{
return
;
}
MOZ_ASSERT
(
result
=
=
LexerResult
(
Yield
:
:
OUTPUT_AVAILABLE
)
)
;
CheckForNewFrameAtYield
(
)
;
}
}
void
AnimationSurfaceProvider
:
:
CheckForNewFrameAtYield
(
)
{
mDecodingMutex
.
AssertCurrentThreadOwns
(
)
;
MOZ_ASSERT
(
mDecoder
)
;
bool
justGotFirstFrame
=
false
;
{
MutexAutoLock
lock
(
mFramesMutex
)
;
RawAccessFrameRef
frame
=
mDecoder
-
>
GetCurrentFrameRef
(
)
;
if
(
!
frame
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Decoder
yielded
but
didn
'
t
produce
a
frame
?
"
)
;
return
;
}
MOZ_ASSERT_IF
(
!
mFrames
.
IsEmpty
(
)
mFrames
.
LastElement
(
)
.
get
(
)
!
=
frame
.
get
(
)
)
;
mFrames
.
AppendElement
(
Move
(
frame
)
)
;
if
(
mFrames
.
Length
(
)
=
=
1
)
{
justGotFirstFrame
=
true
;
}
}
if
(
justGotFirstFrame
)
{
AnnounceSurfaceAvailable
(
)
;
}
}
void
AnimationSurfaceProvider
:
:
CheckForNewFrameAtTerminalState
(
)
{
mDecodingMutex
.
AssertCurrentThreadOwns
(
)
;
MOZ_ASSERT
(
mDecoder
)
;
bool
justGotFirstFrame
=
false
;
{
MutexAutoLock
lock
(
mFramesMutex
)
;
RawAccessFrameRef
frame
=
mDecoder
-
>
GetCurrentFrameRef
(
)
;
if
(
!
frame
)
{
return
;
}
if
(
!
mFrames
.
IsEmpty
(
)
&
&
mFrames
.
LastElement
(
)
.
get
(
)
=
=
frame
.
get
(
)
)
{
return
;
}
mFrames
.
AppendElement
(
Move
(
frame
)
)
;
if
(
mFrames
.
Length
(
)
=
=
1
)
{
justGotFirstFrame
=
true
;
}
}
if
(
justGotFirstFrame
)
{
AnnounceSurfaceAvailable
(
)
;
}
}
void
AnimationSurfaceProvider
:
:
AnnounceSurfaceAvailable
(
)
{
mFramesMutex
.
AssertNotCurrentThreadOwns
(
)
;
MOZ_ASSERT
(
mImage
)
;
SurfaceCache
:
:
SurfaceAvailable
(
WrapNotNull
(
this
)
)
;
}
void
AnimationSurfaceProvider
:
:
FinishDecoding
(
)
{
mDecodingMutex
.
AssertCurrentThreadOwns
(
)
;
MOZ_ASSERT
(
mImage
)
;
MOZ_ASSERT
(
mDecoder
)
;
NotifyDecodeComplete
(
WrapNotNull
(
mImage
)
WrapNotNull
(
mDecoder
)
)
;
mDecoder
=
nullptr
;
DropImageReference
(
)
;
}
bool
AnimationSurfaceProvider
:
:
ShouldPreferSyncRun
(
)
const
{
MutexAutoLock
lock
(
mDecodingMutex
)
;
MOZ_ASSERT
(
mDecoder
)
;
return
mDecoder
-
>
ShouldSyncDecode
(
gfxPrefs
:
:
ImageMemDecodeBytesAtATime
(
)
)
;
}
}
}
