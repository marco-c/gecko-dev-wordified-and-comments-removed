#
ifndef
mozilla_image_ImageURL_h
#
define
mozilla_image_ImageURL_h
#
include
"
nsIURI
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsProxyRelease
.
h
"
namespace
mozilla
{
namespace
image
{
class
ImageCacheKey
;
class
ImageURL
{
public
:
explicit
ImageURL
(
nsIURI
*
aURI
nsresult
&
aRv
)
:
mURI
(
new
nsMainThreadPtrHolder
<
nsIURI
>
(
"
ImageURL
:
:
mURI
"
aURI
)
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Cannot
use
nsIURI
off
main
thread
!
"
)
;
aRv
=
aURI
-
>
GetSpec
(
mSpec
)
;
NS_ENSURE_SUCCESS_VOID
(
aRv
)
;
aRv
=
aURI
-
>
GetScheme
(
mScheme
)
;
NS_ENSURE_SUCCESS_VOID
(
aRv
)
;
aRv
=
aURI
-
>
GetRef
(
mRef
)
;
NS_ENSURE_SUCCESS_VOID
(
aRv
)
;
}
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ImageURL
)
nsresult
GetSpec
(
nsACString
&
result
)
{
result
=
mSpec
;
return
NS_OK
;
}
const
char
*
Spec
(
)
const
{
return
mSpec
.
get
(
)
;
}
enum
TruncatedSpecStatus
{
FitsInto1k
TruncatedTo1k
}
;
TruncatedSpecStatus
GetSpecTruncatedTo1k
(
nsACString
&
result
)
{
static
const
size_t
sMaxTruncatedLength
=
1024
;
if
(
sMaxTruncatedLength
>
=
mSpec
.
Length
(
)
)
{
result
=
mSpec
;
return
FitsInto1k
;
}
result
=
Substring
(
mSpec
0
sMaxTruncatedLength
)
;
return
TruncatedTo1k
;
}
nsresult
GetScheme
(
nsACString
&
result
)
{
result
=
mScheme
;
return
NS_OK
;
}
nsresult
SchemeIs
(
const
char
*
scheme
bool
*
result
)
{
MOZ_ASSERT
(
scheme
"
scheme
is
null
"
)
;
MOZ_ASSERT
(
result
"
result
is
null
"
)
;
*
result
=
mScheme
.
Equals
(
scheme
)
;
return
NS_OK
;
}
nsresult
GetRef
(
nsACString
&
result
)
{
result
=
mRef
;
return
NS_OK
;
}
already_AddRefed
<
nsIURI
>
ToIURI
(
)
{
nsCOMPtr
<
nsIURI
>
newURI
=
mURI
.
get
(
)
;
return
newURI
.
forget
(
)
;
}
bool
operator
=
=
(
const
ImageURL
&
aOther
)
const
{
return
mSpec
=
=
aOther
.
mSpec
;
}
bool
HasSameRef
(
const
ImageURL
&
aOther
)
const
{
return
mRef
=
=
aOther
.
mRef
;
}
private
:
friend
class
ImageCacheKey
;
PLDHashNumber
ComputeHash
(
const
Maybe
<
uint64_t
>
&
aBlobSerial
)
const
{
if
(
aBlobSerial
)
{
return
HashGeneric
(
*
aBlobSerial
HashString
(
mRef
)
)
;
}
return
HashString
(
mSpec
)
;
}
nsMainThreadPtrHandle
<
nsIURI
>
mURI
;
nsAutoCString
mSpec
;
nsAutoCString
mScheme
;
nsAutoCString
mRef
;
~
ImageURL
(
)
{
}
}
;
}
}
#
endif
