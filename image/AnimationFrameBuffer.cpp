#
include
"
AnimationFrameBuffer
.
h
"
#
include
"
mozilla
/
Move
.
h
"
namespace
mozilla
{
namespace
image
{
AnimationFrameBuffer
:
:
AnimationFrameBuffer
(
)
:
mThreshold
(
0
)
mBatch
(
0
)
mPending
(
0
)
mAdvance
(
0
)
mInsertIndex
(
0
)
mGetIndex
(
0
)
mSizeKnown
(
false
)
mRedecodeError
(
false
)
{
}
void
AnimationFrameBuffer
:
:
Initialize
(
size_t
aThreshold
size_t
aBatch
size_t
aStartFrame
)
{
MOZ_ASSERT
(
mThreshold
=
=
0
)
;
MOZ_ASSERT
(
mBatch
=
=
0
)
;
MOZ_ASSERT
(
mPending
=
=
0
)
;
MOZ_ASSERT
(
mAdvance
=
=
0
)
;
MOZ_ASSERT
(
mFrames
.
IsEmpty
(
)
)
;
mThreshold
=
aThreshold
;
mBatch
=
aBatch
;
mAdvance
=
aStartFrame
;
if
(
mBatch
>
SIZE_MAX
/
4
)
{
mBatch
=
SIZE_MAX
/
4
;
}
else
if
(
mBatch
<
1
)
{
mBatch
=
1
;
}
size_t
minThreshold
=
2
*
mBatch
+
1
;
if
(
mThreshold
<
minThreshold
)
{
mThreshold
=
minThreshold
;
}
mPending
=
mBatch
*
2
;
}
bool
AnimationFrameBuffer
:
:
Insert
(
RawAccessFrameRef
&
&
aFrame
)
{
MOZ_ASSERT
(
mPending
>
0
)
;
if
(
mSizeKnown
)
{
MOZ_ASSERT
(
MayDiscard
(
)
)
;
if
(
mInsertIndex
>
=
mFrames
.
Length
(
)
)
{
mRedecodeError
=
true
;
mPending
=
0
;
return
false
;
}
if
(
mInsertIndex
>
0
)
{
MOZ_ASSERT
(
!
mFrames
[
mInsertIndex
]
)
;
mFrames
[
mInsertIndex
]
=
Move
(
aFrame
)
;
}
}
else
if
(
mInsertIndex
=
=
mFrames
.
Length
(
)
)
{
mFrames
.
AppendElement
(
Move
(
aFrame
)
)
;
if
(
mInsertIndex
=
=
mThreshold
)
{
MOZ_ASSERT
(
MayDiscard
(
)
)
;
MOZ_ASSERT
(
mGetIndex
<
mInsertIndex
)
;
for
(
size_t
i
=
1
;
i
<
mGetIndex
;
+
+
i
)
{
RawAccessFrameRef
discard
=
Move
(
mFrames
[
i
]
)
;
}
}
}
else
if
(
mInsertIndex
>
0
)
{
MOZ_ASSERT
(
mInsertIndex
<
mFrames
.
Length
(
)
)
;
MOZ_ASSERT
(
!
mFrames
[
mInsertIndex
]
)
;
MOZ_ASSERT
(
MayDiscard
(
)
)
;
mFrames
[
mInsertIndex
]
=
Move
(
aFrame
)
;
}
else
{
MOZ_ASSERT
(
MayDiscard
(
)
)
;
}
MOZ_ASSERT
(
mFrames
[
mInsertIndex
]
)
;
+
+
mInsertIndex
;
bool
continueDecoding
=
-
-
mPending
>
0
;
if
(
mAdvance
>
0
&
&
mInsertIndex
>
1
)
{
continueDecoding
|
=
AdvanceInternal
(
)
;
-
-
mAdvance
;
}
return
continueDecoding
;
}
bool
AnimationFrameBuffer
:
:
MarkComplete
(
)
{
if
(
NS_WARN_IF
(
mInsertIndex
!
=
mFrames
.
Length
(
)
)
)
{
MOZ_ASSERT
(
mSizeKnown
)
;
mRedecodeError
=
true
;
mPending
=
0
;
}
mInsertIndex
=
0
;
MOZ_ASSERT
(
mAdvance
=
=
0
)
;
if
(
!
mSizeKnown
)
{
mSizeKnown
=
true
;
mFrames
.
Compact
(
)
;
if
(
!
MayDiscard
(
)
)
{
mPending
=
0
;
}
}
return
mPending
>
0
;
}
DrawableFrameRef
AnimationFrameBuffer
:
:
Get
(
size_t
aFrame
)
{
if
(
mFrames
.
IsEmpty
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Calling
Get
(
)
when
we
have
no
frames
"
)
;
return
DrawableFrameRef
(
)
;
}
if
(
aFrame
>
=
mFrames
.
Length
(
)
)
{
return
DrawableFrameRef
(
)
;
}
if
(
!
mFrames
[
aFrame
]
)
{
MOZ_ASSERT
(
MayDiscard
(
)
)
;
return
DrawableFrameRef
(
)
;
}
MOZ_ASSERT
(
aFrame
=
=
0
|
|
mAdvance
=
=
0
)
;
return
mFrames
[
aFrame
]
-
>
DrawableRef
(
)
;
}
bool
AnimationFrameBuffer
:
:
AdvanceTo
(
size_t
aExpectedFrame
)
{
MOZ_ASSERT
(
mAdvance
=
=
0
)
;
bool
restartDecoder
=
AdvanceInternal
(
)
;
MOZ_ASSERT
(
mGetIndex
=
=
aExpectedFrame
)
;
return
restartDecoder
;
}
bool
AnimationFrameBuffer
:
:
AdvanceInternal
(
)
{
if
(
mFrames
.
IsEmpty
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Calling
Advance
(
)
when
we
have
no
frames
"
)
;
return
false
;
}
size_t
framesLength
=
mFrames
.
Length
(
)
;
MOZ_ASSERT
(
mGetIndex
<
framesLength
)
;
MOZ_ASSERT
(
mFrames
[
mGetIndex
]
)
;
if
(
+
+
mGetIndex
=
=
framesLength
)
{
MOZ_ASSERT
(
mSizeKnown
)
;
mGetIndex
=
0
;
}
MOZ_ASSERT
(
mFrames
[
mGetIndex
]
)
;
if
(
MayDiscard
(
)
)
{
RawAccessFrameRef
discard
;
if
(
mGetIndex
>
1
)
{
discard
=
Move
(
mFrames
[
mGetIndex
-
1
]
)
;
}
else
if
(
mGetIndex
=
=
0
)
{
MOZ_ASSERT
(
mSizeKnown
&
&
framesLength
>
1
)
;
discard
=
Move
(
mFrames
[
framesLength
-
1
]
)
;
}
}
if
(
!
mRedecodeError
&
&
(
!
mSizeKnown
|
|
MayDiscard
(
)
)
)
{
size_t
buffered
=
mPending
;
if
(
mGetIndex
>
mInsertIndex
)
{
MOZ_ASSERT
(
mSizeKnown
)
;
buffered
+
=
mInsertIndex
+
framesLength
-
mGetIndex
-
1
;
}
else
{
buffered
+
=
mInsertIndex
-
mGetIndex
-
1
;
}
if
(
buffered
<
mBatch
)
{
mPending
+
=
mBatch
;
return
mPending
=
=
mBatch
;
}
}
return
false
;
}
bool
AnimationFrameBuffer
:
:
Reset
(
)
{
mGetIndex
=
0
;
mAdvance
=
0
;
if
(
!
MayDiscard
(
)
)
{
if
(
mPending
>
1
&
&
mInsertIndex
-
1
>
=
mBatch
*
2
)
{
MOZ_ASSERT
(
!
mSizeKnown
)
;
mPending
=
1
;
}
return
false
;
}
for
(
size_t
i
=
1
;
i
<
mFrames
.
Length
(
)
;
+
+
i
)
{
RawAccessFrameRef
discard
=
Move
(
mFrames
[
i
]
)
;
}
mInsertIndex
=
0
;
if
(
mRedecodeError
)
{
MOZ_ASSERT
(
mPending
=
=
0
)
;
return
false
;
}
bool
restartDecoder
=
mPending
=
=
0
;
mPending
=
2
*
mBatch
;
return
restartDecoder
;
}
}
}
