#
include
"
ImageBlocker
.
h
"
#
include
"
nsIPermissionManager
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
StaticPrefs_permissions
.
h
"
#
include
"
nsNetUtil
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
image
;
NS_IMPL_ISUPPORTS
(
ImageBlocker
nsIContentPolicy
)
NS_IMETHODIMP
ImageBlocker
:
:
ShouldLoad
(
nsIURI
*
aContentLocation
nsILoadInfo
*
aLoadInfo
int16_t
*
aShouldLoad
)
{
*
aShouldLoad
=
nsIContentPolicy
:
:
ACCEPT
;
if
(
!
aContentLocation
)
{
return
NS_OK
;
}
ExtContentPolicyType
contentType
=
aLoadInfo
-
>
GetExternalContentPolicyType
(
)
;
if
(
contentType
!
=
ExtContentPolicy
:
:
TYPE_IMAGE
&
&
contentType
!
=
ExtContentPolicy
:
:
TYPE_IMAGESET
)
{
return
NS_OK
;
}
if
(
ImageBlocker
:
:
ShouldBlock
(
aContentLocation
)
)
{
NS_SetRequestBlockingReason
(
aLoadInfo
nsILoadInfo
:
:
BLOCKING_REASON_CONTENT_POLICY_CONTENT_BLOCKED
)
;
*
aShouldLoad
=
nsIContentPolicy
:
:
REJECT_TYPE
;
}
return
NS_OK
;
}
NS_IMETHODIMP
ImageBlocker
:
:
ShouldProcess
(
nsIURI
*
aContentLocation
nsILoadInfo
*
aLoadInfo
int16_t
*
aShouldProcess
)
{
*
aShouldProcess
=
nsIContentPolicy
:
:
ACCEPT
;
return
NS_OK
;
}
bool
ImageBlocker
:
:
ShouldBlock
(
nsIURI
*
aContentLocation
)
{
if
(
StaticPrefs
:
:
permissions_default_image
(
)
!
=
nsIPermissionManager
:
:
DENY_ACTION
)
{
return
false
;
}
return
net
:
:
SchemeIsHttpOrHttps
(
aContentLocation
)
;
}
