#
ifndef
mozilla_image_ClippedImage_h
#
define
mozilla_image_ClippedImage_h
#
include
"
ImageWrapper
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
namespace
image
{
class
ClippedImageCachedSurface
;
class
DrawSingleTileCallback
;
class
ClippedImage
:
public
ImageWrapper
{
typedef
gfx
:
:
SourceSurface
SourceSurface
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_IMETHOD
GetWidth
(
int32_t
*
aWidth
)
override
;
NS_IMETHOD
GetHeight
(
int32_t
*
aHeight
)
override
;
NS_IMETHOD
GetIntrinsicSize
(
nsSize
*
aSize
)
override
;
NS_IMETHOD
GetIntrinsicRatio
(
nsSize
*
aRatio
)
override
;
NS_IMETHOD_
(
already_AddRefed
<
SourceSurface
>
)
GetFrame
(
uint32_t
aWhichFrame
uint32_t
aFlags
)
override
;
NS_IMETHOD_
(
already_AddRefed
<
SourceSurface
>
)
GetFrameAtSize
(
const
gfx
:
:
IntSize
&
aSize
uint32_t
aWhichFrame
uint32_t
aFlags
)
override
;
NS_IMETHOD_
(
bool
)
IsImageContainerAvailable
(
layers
:
:
LayerManager
*
aManager
uint32_t
aFlags
)
override
;
NS_IMETHOD_
(
already_AddRefed
<
layers
:
:
ImageContainer
>
)
GetImageContainer
(
layers
:
:
LayerManager
*
aManager
uint32_t
aFlags
)
override
;
NS_IMETHOD_
(
bool
)
IsImageContainerAvailableAtSize
(
layers
:
:
LayerManager
*
aManager
const
gfx
:
:
IntSize
&
aSize
uint32_t
aFlags
)
override
;
NS_IMETHOD_
(
already_AddRefed
<
layers
:
:
ImageContainer
>
)
GetImageContainerAtSize
(
layers
:
:
LayerManager
*
aManager
const
gfx
:
:
IntSize
&
aSize
const
Maybe
<
SVGImageContext
>
&
aSVGContext
uint32_t
aFlags
)
override
;
NS_IMETHOD_
(
ImgDrawResult
)
Draw
(
gfxContext
*
aContext
const
nsIntSize
&
aSize
const
ImageRegion
&
aRegion
uint32_t
aWhichFrame
gfx
:
:
SamplingFilter
aSamplingFilter
const
Maybe
<
SVGImageContext
>
&
aSVGContext
uint32_t
aFlags
float
aOpacity
)
override
;
NS_IMETHOD
RequestDiscard
(
)
override
;
NS_IMETHOD_
(
Orientation
)
GetOrientation
(
)
override
;
NS_IMETHOD_
(
nsIntRect
)
GetImageSpaceInvalidationRect
(
const
nsIntRect
&
aRect
)
override
;
nsIntSize
OptimalImageSizeForDest
(
const
gfxSize
&
aDest
uint32_t
aWhichFrame
gfx
:
:
SamplingFilter
aSamplingFilter
uint32_t
aFlags
)
override
;
protected
:
ClippedImage
(
Image
*
aImage
nsIntRect
aClip
const
Maybe
<
nsSize
>
&
aSVGViewportSize
)
;
virtual
~
ClippedImage
(
)
;
private
:
Pair
<
ImgDrawResult
RefPtr
<
SourceSurface
>
>
GetFrameInternal
(
const
nsIntSize
&
aSize
const
Maybe
<
SVGImageContext
>
&
aSVGContext
uint32_t
aWhichFrame
uint32_t
aFlags
float
aOpacity
)
;
bool
ShouldClip
(
)
;
ImgDrawResult
DrawSingleTile
(
gfxContext
*
aContext
const
nsIntSize
&
aSize
const
ImageRegion
&
aRegion
uint32_t
aWhichFrame
gfx
:
:
SamplingFilter
aSamplingFilter
const
Maybe
<
SVGImageContext
>
&
aSVGContext
uint32_t
aFlags
float
aOpacity
)
;
UniquePtr
<
ClippedImageCachedSurface
>
mCachedSurface
;
nsIntRect
mClip
;
Maybe
<
bool
>
mShouldClip
;
Maybe
<
nsIntSize
>
mSVGViewportSize
;
friend
class
DrawSingleTileCallback
;
friend
class
ImageOps
;
}
;
}
}
#
endif
