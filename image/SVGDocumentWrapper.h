#
ifndef
mozilla_image_SVGDocumentWrapper_h
#
define
mozilla_image_SVGDocumentWrapper_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsSize
.
h
"
class
nsIRequest
;
class
nsILoadGroup
;
class
nsIFrame
;
#
define
OBSERVER_SVC_CID
"
mozilla
.
org
/
observer
-
service
;
1
"
namespace
mozilla
{
class
PresShell
;
namespace
dom
{
class
SVGSVGElement
;
class
SVGDocument
;
}
namespace
image
{
class
SVGDocumentWrapper
final
:
public
nsIStreamListener
public
nsIObserver
nsSupportsWeakReference
{
public
:
SVGDocumentWrapper
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSIOBSERVER
enum
Dimension
{
eWidth
eHeight
}
;
mozilla
:
:
dom
:
:
SVGDocument
*
GetDocument
(
)
;
mozilla
:
:
dom
:
:
SVGSVGElement
*
GetRootSVGElem
(
)
;
nsIFrame
*
GetRootLayoutFrame
(
)
;
inline
mozilla
:
:
PresShell
*
GetPresShell
(
)
{
return
mViewer
-
>
GetPresShell
(
)
;
}
void
UpdateViewportBounds
(
const
nsIntSize
&
aViewportSize
)
;
void
FlushImageTransformInvalidation
(
)
;
bool
IsAnimated
(
)
;
bool
ShouldIgnoreInvalidation
(
)
{
return
mIgnoreInvalidation
;
}
void
StartAnimation
(
)
;
void
StopAnimation
(
)
;
void
ResetAnimation
(
)
;
float
GetCurrentTimeAsFloat
(
)
;
void
SetCurrentTime
(
float
aTime
)
;
void
TickRefreshDriver
(
)
;
void
FlushLayout
(
)
;
private
:
~
SVGDocumentWrapper
(
)
;
nsresult
SetupViewer
(
nsIRequest
*
aRequest
nsIContentViewer
*
*
aViewer
nsILoadGroup
*
*
aLoadGroup
)
;
void
DestroyViewer
(
)
;
void
RegisterForXPCOMShutdown
(
)
;
void
UnregisterForXPCOMShutdown
(
)
;
nsCOMPtr
<
nsIContentViewer
>
mViewer
;
nsCOMPtr
<
nsILoadGroup
>
mLoadGroup
;
nsCOMPtr
<
nsIStreamListener
>
mListener
;
bool
mIgnoreInvalidation
;
bool
mRegisteredForXPCOMShutdown
;
}
;
}
}
#
endif
