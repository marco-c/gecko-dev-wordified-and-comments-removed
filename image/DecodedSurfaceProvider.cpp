#
include
"
DecodedSurfaceProvider
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
Decoder
.
h
"
using
namespace
mozilla
:
:
gfx
;
namespace
mozilla
{
namespace
image
{
DecodedSurfaceProvider
:
:
DecodedSurfaceProvider
(
NotNull
<
RasterImage
*
>
aImage
NotNull
<
Decoder
*
>
aDecoder
const
SurfaceKey
&
aSurfaceKey
)
:
ISurfaceProvider
(
AvailabilityState
:
:
StartAsPlaceholder
(
)
)
mImage
(
aImage
.
get
(
)
)
mDecoder
(
aDecoder
.
get
(
)
)
mSurfaceKey
(
aSurfaceKey
)
{
MOZ_ASSERT
(
!
mDecoder
-
>
IsMetadataDecode
(
)
"
Use
MetadataDecodingTask
for
metadata
decodes
"
)
;
MOZ_ASSERT
(
mDecoder
-
>
IsFirstFrameDecode
(
)
"
Use
AnimationDecodingTask
for
animation
decodes
"
)
;
}
DecodedSurfaceProvider
:
:
~
DecodedSurfaceProvider
(
)
{
DropImageReference
(
)
;
}
void
DecodedSurfaceProvider
:
:
DropImageReference
(
)
{
if
(
!
mImage
)
{
return
;
}
RefPtr
<
RasterImage
>
image
=
mImage
;
mImage
=
nullptr
;
NS_ReleaseOnMainThread
(
image
.
forget
(
)
true
)
;
}
DrawableFrameRef
DecodedSurfaceProvider
:
:
DrawableRef
(
)
{
if
(
Availability
(
)
.
IsPlaceholder
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Calling
DrawableRef
(
)
on
a
placeholder
"
)
;
return
DrawableFrameRef
(
)
;
}
if
(
!
mSurface
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Calling
DrawableRef
(
)
when
we
have
no
surface
"
)
;
return
DrawableFrameRef
(
)
;
}
return
mSurface
-
>
DrawableRef
(
)
;
}
bool
DecodedSurfaceProvider
:
:
IsFinished
(
)
const
{
if
(
Availability
(
)
.
IsPlaceholder
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Calling
IsFinished
(
)
on
a
placeholder
"
)
;
return
false
;
}
if
(
!
mSurface
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Calling
IsFinished
(
)
when
we
have
no
surface
"
)
;
return
false
;
}
return
mSurface
-
>
IsFinished
(
)
;
}
void
DecodedSurfaceProvider
:
:
SetLocked
(
bool
aLocked
)
{
if
(
Availability
(
)
.
IsPlaceholder
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Calling
SetLocked
(
)
on
a
placeholder
"
)
;
return
;
}
if
(
!
mSurface
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Calling
SetLocked
(
)
when
we
have
no
surface
"
)
;
return
;
}
if
(
aLocked
=
=
IsLocked
(
)
)
{
return
;
}
mLockRef
=
aLocked
?
mSurface
-
>
DrawableRef
(
)
:
DrawableFrameRef
(
)
;
}
size_t
DecodedSurfaceProvider
:
:
LogicalSizeInBytes
(
)
const
{
IntSize
size
=
mSurfaceKey
.
Size
(
)
;
return
size
.
width
*
size
.
height
*
sizeof
(
uint32_t
)
;
}
void
DecodedSurfaceProvider
:
:
Run
(
)
{
if
(
!
mDecoder
|
|
!
mImage
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Running
after
decoding
finished
?
"
)
;
return
;
}
LexerResult
result
=
mDecoder
-
>
Decode
(
WrapNotNull
(
this
)
)
;
CheckForNewSurface
(
)
;
if
(
result
.
is
<
TerminalState
>
(
)
)
{
FinishDecoding
(
)
;
return
;
}
if
(
mDecoder
-
>
HasProgress
(
)
)
{
NotifyProgress
(
WrapNotNull
(
mImage
)
WrapNotNull
(
mDecoder
)
)
;
}
MOZ_ASSERT
(
result
.
is
<
Yield
>
(
)
)
;
if
(
result
=
=
LexerResult
(
Yield
:
:
NEED_MORE_DATA
)
)
{
return
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
yield
for
single
-
frame
image
"
)
;
mDecoder
-
>
TerminateFailure
(
)
;
FinishDecoding
(
)
;
}
void
DecodedSurfaceProvider
:
:
CheckForNewSurface
(
)
{
if
(
mSurface
)
{
MOZ_ASSERT
(
mSurface
.
get
(
)
=
=
mDecoder
-
>
GetCurrentFrameRef
(
)
.
get
(
)
"
DecodedSurfaceProvider
and
Decoder
have
different
surfaces
?
"
)
;
return
;
}
mSurface
=
mDecoder
-
>
GetCurrentFrameRef
(
)
.
get
(
)
;
if
(
!
mSurface
)
{
return
;
}
MOZ_ASSERT
(
mImage
)
;
SurfaceCache
:
:
SurfaceAvailable
(
WrapNotNull
(
this
)
ImageKey
(
mImage
.
get
(
)
)
mSurfaceKey
)
;
}
void
DecodedSurfaceProvider
:
:
FinishDecoding
(
)
{
MOZ_ASSERT
(
mImage
)
;
MOZ_ASSERT
(
mDecoder
)
;
NotifyDecodeComplete
(
WrapNotNull
(
mImage
)
WrapNotNull
(
mDecoder
)
)
;
mDecoder
=
nullptr
;
DropImageReference
(
)
;
}
bool
DecodedSurfaceProvider
:
:
ShouldPreferSyncRun
(
)
const
{
return
mDecoder
-
>
ShouldSyncDecode
(
gfxPrefs
:
:
ImageMemDecodeBytesAtATime
(
)
)
;
}
}
}
