#
ifndef
mozilla_image_IDecodingTask_h
#
define
mozilla_image_IDecodingTask_h
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
SourceBuffer
.
h
"
namespace
mozilla
{
namespace
image
{
class
Decoder
;
enum
class
TaskPriority
:
uint8_t
{
eLow
eHigh
}
;
class
IDecodingTask
:
public
IResumable
{
public
:
virtual
void
Run
(
)
=
0
;
virtual
bool
ShouldPreferSyncRun
(
)
const
=
0
;
virtual
TaskPriority
Priority
(
)
const
=
0
;
void
Resume
(
)
override
;
virtual
NotNull
<
Decoder
*
>
GetDecoder
(
)
const
=
0
;
static
void
NotifyProgress
(
NotNull
<
Decoder
*
>
aDecoder
)
;
protected
:
virtual
~
IDecodingTask
(
)
{
}
}
;
class
DecodingTask
final
:
public
IDecodingTask
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
DecodingTask
override
)
explicit
DecodingTask
(
NotNull
<
Decoder
*
>
aDecoder
)
;
void
Run
(
)
override
;
bool
ShouldPreferSyncRun
(
)
const
override
;
TaskPriority
Priority
(
)
const
override
{
return
TaskPriority
:
:
eLow
;
}
NotNull
<
Decoder
*
>
GetDecoder
(
)
const
override
{
return
mDecoder
;
}
private
:
virtual
~
DecodingTask
(
)
{
}
NotNull
<
RefPtr
<
Decoder
>
>
mDecoder
;
}
;
class
MetadataDecodingTask
final
:
public
IDecodingTask
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MetadataDecodingTask
override
)
explicit
MetadataDecodingTask
(
NotNull
<
Decoder
*
>
aDecoder
)
;
void
Run
(
)
override
;
bool
ShouldPreferSyncRun
(
)
const
override
{
return
true
;
}
TaskPriority
Priority
(
)
const
override
{
return
TaskPriority
:
:
eHigh
;
}
NotNull
<
Decoder
*
>
GetDecoder
(
)
const
override
{
return
mDecoder
;
}
private
:
virtual
~
MetadataDecodingTask
(
)
{
}
NotNull
<
RefPtr
<
Decoder
>
>
mDecoder
;
}
;
class
AnonymousDecodingTask
final
:
public
IDecodingTask
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
AnonymousDecodingTask
override
)
explicit
AnonymousDecodingTask
(
NotNull
<
Decoder
*
>
aDecoder
)
;
void
Run
(
)
override
;
bool
ShouldPreferSyncRun
(
)
const
override
{
return
true
;
}
TaskPriority
Priority
(
)
const
override
{
return
TaskPriority
:
:
eLow
;
}
void
Resume
(
)
override
{
}
NotNull
<
Decoder
*
>
GetDecoder
(
)
const
override
{
return
mDecoder
;
}
private
:
virtual
~
AnonymousDecodingTask
(
)
{
}
NotNull
<
RefPtr
<
Decoder
>
>
mDecoder
;
}
;
}
}
#
endif
