#
ifndef
mozilla_image_AnimationFrameBuffer_h
#
define
mozilla_image_AnimationFrameBuffer_h
#
include
"
ISurfaceProvider
.
h
"
namespace
mozilla
{
namespace
image
{
class
AnimationFrameBuffer
final
{
public
:
AnimationFrameBuffer
(
)
;
void
Initialize
(
size_t
aThreshold
size_t
aBatch
size_t
aStartFrame
)
;
DrawableFrameRef
Get
(
size_t
aFrame
)
;
bool
Insert
(
RawAccessFrameRef
&
&
aFrame
)
;
bool
MarkComplete
(
)
;
bool
AdvanceTo
(
size_t
aExpectedFrame
)
;
bool
Reset
(
)
;
bool
MayDiscard
(
)
const
{
return
mFrames
.
Length
(
)
>
mThreshold
;
}
bool
SizeKnown
(
)
const
{
return
mSizeKnown
;
}
bool
HasRedecodeError
(
)
const
{
return
mRedecodeError
;
}
size_t
Displayed
(
)
const
{
return
mGetIndex
;
}
size_t
PendingDecode
(
)
const
{
return
mPending
;
}
size_t
PendingAdvance
(
)
const
{
return
mAdvance
;
}
size_t
Batch
(
)
const
{
return
mBatch
;
}
size_t
Threshold
(
)
const
{
return
mThreshold
;
}
const
nsTArray
<
RawAccessFrameRef
>
&
Frames
(
)
const
{
return
mFrames
;
}
private
:
bool
AdvanceInternal
(
)
;
nsTArray
<
RawAccessFrameRef
>
mFrames
;
size_t
mThreshold
;
size_t
mBatch
;
size_t
mPending
;
size_t
mAdvance
;
size_t
mInsertIndex
;
size_t
mGetIndex
;
bool
mSizeKnown
;
bool
mRedecodeError
;
}
;
}
}
#
endif
