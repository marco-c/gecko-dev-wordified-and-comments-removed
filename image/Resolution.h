#
ifndef
mozilla_image_Resolution_h
#
define
mozilla_image_Resolution_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
cmath
>
namespace
mozilla
{
namespace
image
{
struct
Resolution
{
Resolution
(
)
=
default
;
Resolution
(
float
aX
float
aY
)
:
mX
(
aX
)
mY
(
aY
)
{
MOZ_ASSERT
(
mX
!
=
0
.
0f
)
;
MOZ_ASSERT
(
mY
!
=
0
.
0f
)
;
}
bool
operator
=
=
(
const
Resolution
&
aOther
)
const
{
return
mX
=
=
aOther
.
mX
&
&
mY
=
=
aOther
.
mY
;
}
bool
operator
!
=
(
const
Resolution
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
float
mX
=
1
.
0f
;
float
mY
=
1
.
0f
;
void
ApplyXTo
(
int32_t
&
aWidth
)
const
{
if
(
mX
!
=
1
.
0f
)
{
aWidth
=
std
:
:
round
(
float
(
aWidth
)
/
mX
)
;
}
}
void
ApplyXTo
(
float
&
aWidth
)
const
{
if
(
mX
!
=
1
.
0f
)
{
aWidth
/
=
mX
;
}
}
void
ApplyYTo
(
int32_t
&
aHeight
)
const
{
if
(
mY
!
=
1
.
0f
)
{
aHeight
=
std
:
:
round
(
float
(
aHeight
)
/
mY
)
;
}
}
void
ApplyYTo
(
float
&
aHeight
)
const
{
if
(
mY
!
=
1
.
0f
)
{
aHeight
/
=
mY
;
}
}
void
ApplyTo
(
int32_t
&
aWidth
int32_t
&
aHeight
)
const
{
ApplyXTo
(
aWidth
)
;
ApplyYTo
(
aHeight
)
;
}
void
ApplyTo
(
float
&
aWidth
float
&
aHeight
)
const
{
ApplyXTo
(
aWidth
)
;
ApplyYTo
(
aHeight
)
;
}
}
;
}
using
ImageResolution
=
image
:
:
Resolution
;
}
#
endif
