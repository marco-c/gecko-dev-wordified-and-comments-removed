#
ifndef
nsTableCellFrame_h__
#
define
nsTableCellFrame_h__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
celldata
.
h
"
#
include
"
nsITableCellLayout
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
nsIPercentBSizeObserver
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTableRowFrame
.
h
"
#
include
"
mozilla
/
WritingModes
.
h
"
namespace
mozilla
{
class
PresShell
;
}
class
nsTableCellFrame
:
public
nsContainerFrame
public
nsITableCellLayout
public
nsIPercentBSizeObserver
{
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
typedef
mozilla
:
:
image
:
:
ImgDrawResult
ImgDrawResult
;
friend
nsTableCellFrame
*
NS_NewTableCellFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
nsTableFrame
*
aTableFrame
)
;
nsTableCellFrame
(
ComputedStyle
*
aStyle
nsTableFrame
*
aTableFrame
)
:
nsTableCellFrame
(
aStyle
aTableFrame
kClassID
)
{
}
protected
:
typedef
mozilla
:
:
WritingMode
WritingMode
;
typedef
mozilla
:
:
LogicalSide
LogicalSide
;
typedef
mozilla
:
:
LogicalMargin
LogicalMargin
;
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsTableCellFrame
)
nsTableRowFrame
*
GetTableRowFrame
(
)
const
{
nsIFrame
*
parent
=
GetParent
(
)
;
MOZ_ASSERT
(
parent
&
&
parent
-
>
IsTableRowFrame
(
)
)
;
return
static_cast
<
nsTableRowFrame
*
>
(
parent
)
;
}
nsTableFrame
*
GetTableFrame
(
)
const
{
return
GetTableRowFrame
(
)
-
>
GetTableFrame
(
)
;
}
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
void
Destroy
(
DestroyContext
&
)
override
;
#
ifdef
ACCESSIBILITY
mozilla
:
:
a11y
:
:
AccType
AccessibleType
(
)
override
;
#
endif
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
void
DidSetComputedStyle
(
ComputedStyle
*
aOldComputedStyle
)
override
;
#
ifdef
DEBUG
void
AppendFrames
(
ChildListID
aListID
nsFrameList
&
&
aFrameList
)
override
;
void
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
const
nsLineList
:
:
iterator
*
aPrevFrameLine
nsFrameList
&
&
aFrameList
)
override
;
void
RemoveFrame
(
DestroyContext
&
ChildListID
nsIFrame
*
)
override
;
#
endif
nsContainerFrame
*
GetContentInsertionFrame
(
)
override
{
return
PrincipalChildList
(
)
.
FirstChild
(
)
-
>
GetContentInsertionFrame
(
)
;
}
nsMargin
GetUsedMargin
(
)
const
override
;
void
NotifyPercentBSize
(
const
ReflowInput
&
aReflowInput
)
override
;
bool
NeedsToObserve
(
const
ReflowInput
&
aReflowInput
)
override
;
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
virtual
void
ProcessBorders
(
nsTableFrame
*
aFrame
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
;
nscoord
GetMinISize
(
gfxContext
*
aRenderingContext
)
override
;
nscoord
GetPrefISize
(
gfxContext
*
aRenderingContext
)
override
;
IntrinsicSizeOffsetData
IntrinsicISizeOffsets
(
nscoord
aPercentageBasis
=
NS_UNCONSTRAINEDSIZE
)
override
;
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
void
BlockDirAlignChild
(
mozilla
:
:
WritingMode
aWM
nscoord
aMaxAscent
)
;
virtual
mozilla
:
:
StyleVerticalAlignKeyword
GetVerticalAlign
(
)
const
;
bool
HasVerticalAlignBaseline
(
)
const
{
return
GetVerticalAlign
(
)
=
=
mozilla
:
:
StyleVerticalAlignKeyword
:
:
Baseline
&
&
!
GetContentEmpty
(
)
;
}
bool
CellHasVisibleContent
(
nscoord
aBSize
nsTableFrame
*
tableFrame
nsIFrame
*
kidFrame
)
;
nscoord
GetCellBaseline
(
)
const
;
int32_t
GetRowSpan
(
)
;
void
AppendDirectlyOwnedAnonBoxes
(
nsTArray
<
OwnedAnonBox
>
&
aResult
)
override
;
NS_IMETHOD
GetCellIndexes
(
int32_t
&
aRowIndex
int32_t
&
aColIndex
)
override
;
uint32_t
RowIndex
(
)
const
{
return
static_cast
<
nsTableRowFrame
*
>
(
GetParent
(
)
)
-
>
GetRowIndex
(
)
;
}
int32_t
GetColSpan
(
)
;
uint32_t
ColIndex
(
)
const
{
MOZ_ASSERT
(
static_cast
<
nsTableCellFrame
*
>
(
FirstContinuation
(
)
)
-
>
mColIndex
=
=
mColIndex
"
mColIndex
out
of
sync
with
first
continuation
"
)
;
return
mColIndex
;
}
void
SetColIndex
(
int32_t
aColIndex
)
;
inline
nscoord
GetPriorAvailISize
(
)
;
inline
void
SetPriorAvailISize
(
nscoord
aPriorAvailISize
)
;
inline
mozilla
:
:
LogicalSize
GetDesiredSize
(
)
;
inline
void
SetDesiredSize
(
const
ReflowOutput
&
aDesiredSize
)
;
bool
GetContentEmpty
(
)
const
;
void
SetContentEmpty
(
bool
aContentEmpty
)
;
nsTableCellFrame
*
GetNextCell
(
)
const
{
nsIFrame
*
sibling
=
GetNextSibling
(
)
;
MOZ_ASSERT
(
!
sibling
|
|
static_cast
<
nsTableCellFrame
*
>
(
do_QueryFrame
(
sibling
)
)
"
How
do
we
have
a
non
-
cell
sibling
?
"
)
;
return
static_cast
<
nsTableCellFrame
*
>
(
sibling
)
;
}
virtual
LogicalMargin
GetBorderWidth
(
WritingMode
aWM
)
const
;
void
DecorateForSelection
(
DrawTarget
*
aDrawTarget
nsPoint
aPt
)
;
bool
ComputeCustomOverflow
(
mozilla
:
:
OverflowAreas
&
aOverflowAreas
)
override
;
void
InvalidateFrame
(
uint32_t
aDisplayItemKey
=
0
bool
aRebuildDisplayItems
=
true
)
override
;
void
InvalidateFrameWithRect
(
const
nsRect
&
aRect
uint32_t
aDisplayItemKey
=
0
bool
aRebuildDisplayItems
=
true
)
override
;
void
InvalidateFrameForRemoval
(
)
override
{
InvalidateFrameSubtree
(
)
;
}
bool
ShouldPaintBordersAndBackgrounds
(
)
const
;
bool
ShouldPaintBackground
(
nsDisplayListBuilder
*
aBuilder
)
;
protected
:
nsTableCellFrame
(
ComputedStyle
*
aStyle
nsTableFrame
*
aTableFrame
ClassID
aID
)
;
~
nsTableCellFrame
(
)
;
LogicalSides
GetLogicalSkipSides
(
)
const
override
;
virtual
nsMargin
GetBorderOverflow
(
)
;
friend
class
nsTableRowFrame
;
uint32_t
mColIndex
;
nscoord
mPriorAvailISize
;
mozilla
:
:
LogicalSize
mDesiredSize
;
}
;
inline
nscoord
nsTableCellFrame
:
:
GetPriorAvailISize
(
)
{
return
mPriorAvailISize
;
}
inline
void
nsTableCellFrame
:
:
SetPriorAvailISize
(
nscoord
aPriorAvailISize
)
{
mPriorAvailISize
=
aPriorAvailISize
;
}
inline
mozilla
:
:
LogicalSize
nsTableCellFrame
:
:
GetDesiredSize
(
)
{
return
mDesiredSize
;
}
inline
void
nsTableCellFrame
:
:
SetDesiredSize
(
const
ReflowOutput
&
aDesiredSize
)
{
mDesiredSize
=
aDesiredSize
.
Size
(
GetWritingMode
(
)
)
;
}
inline
bool
nsTableCellFrame
:
:
GetContentEmpty
(
)
const
{
return
HasAnyStateBits
(
NS_TABLE_CELL_CONTENT_EMPTY
)
;
}
inline
void
nsTableCellFrame
:
:
SetContentEmpty
(
bool
aContentEmpty
)
{
if
(
aContentEmpty
)
{
AddStateBits
(
NS_TABLE_CELL_CONTENT_EMPTY
)
;
}
else
{
RemoveStateBits
(
NS_TABLE_CELL_CONTENT_EMPTY
)
;
}
}
class
nsBCTableCellFrame
final
:
public
nsTableCellFrame
{
typedef
mozilla
:
:
image
:
:
ImgDrawResult
ImgDrawResult
;
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsBCTableCellFrame
)
nsBCTableCellFrame
(
ComputedStyle
*
aStyle
nsTableFrame
*
aTableFrame
)
;
~
nsBCTableCellFrame
(
)
;
nsMargin
GetUsedBorder
(
)
const
override
;
LogicalMargin
GetBorderWidth
(
WritingMode
aWM
)
const
override
;
BCPixelSize
GetBorderWidth
(
LogicalSide
aSide
)
const
;
void
SetBorderWidth
(
LogicalSide
aSide
BCPixelSize
aPixelValue
)
;
nsMargin
GetBorderOverflow
(
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
private
:
BCPixelSize
mBStartBorder
;
BCPixelSize
mIEndBorder
;
BCPixelSize
mBEndBorder
;
BCPixelSize
mIStartBorder
;
}
;
inline
nsTableCellFrame
*
nsTableRowFrame
:
:
GetFirstCell
(
)
const
{
nsIFrame
*
firstChild
=
mFrames
.
FirstChild
(
)
;
MOZ_ASSERT
(
!
firstChild
|
|
static_cast
<
nsTableCellFrame
*
>
(
do_QueryFrame
(
firstChild
)
)
"
How
do
we
have
a
non
-
cell
child
?
"
)
;
return
static_cast
<
nsTableCellFrame
*
>
(
firstChild
)
;
}
#
endif
