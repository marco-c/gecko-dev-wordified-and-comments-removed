#
ifndef
nsTableWrapperFrame_h__
#
define
nsTableWrapperFrame_h__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsCellMap
.
h
"
#
include
"
nsTableFrame
.
h
"
namespace
mozilla
{
class
PresShell
;
}
class
nsTableWrapperFrame
:
public
nsContainerFrame
{
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsTableWrapperFrame
)
friend
nsTableWrapperFrame
*
NS_NewTableWrapperFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
virtual
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
override
;
virtual
const
nsFrameList
&
GetChildList
(
ChildListID
aListID
)
const
override
;
virtual
void
GetChildLists
(
nsTArray
<
ChildList
>
*
aLists
)
const
override
;
virtual
void
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
aChildList
)
override
;
virtual
void
AppendFrames
(
ChildListID
aListID
nsFrameList
&
aFrameList
)
override
;
virtual
void
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
const
nsLineList
:
:
iterator
*
aPrevFrameLine
nsFrameList
&
aFrameList
)
override
;
virtual
void
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
override
;
virtual
nsContainerFrame
*
GetContentInsertionFrame
(
)
override
{
return
PrincipalChildList
(
)
.
FirstChild
(
)
-
>
GetContentInsertionFrame
(
)
;
}
#
ifdef
ACCESSIBILITY
virtual
mozilla
:
:
a11y
:
:
AccType
AccessibleType
(
)
override
;
#
endif
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
void
BuildDisplayListForInnerTable
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
;
virtual
nscoord
GetLogicalBaseline
(
mozilla
:
:
WritingMode
aWritingMode
)
const
override
;
bool
GetNaturalBaselineBOffset
(
mozilla
:
:
WritingMode
aWM
BaselineSharingGroup
aBaselineGroup
nscoord
*
aBaseline
)
const
override
{
if
(
StyleDisplay
(
)
-
>
IsContainLayout
(
)
)
{
return
false
;
}
auto
innerTable
=
InnerTableFrame
(
)
;
nscoord
offset
;
if
(
innerTable
-
>
GetNaturalBaselineBOffset
(
aWM
aBaselineGroup
&
offset
)
)
{
auto
bStart
=
innerTable
-
>
BStart
(
aWM
mRect
.
Size
(
)
)
;
if
(
aBaselineGroup
=
=
BaselineSharingGroup
:
:
First
)
{
*
aBaseline
=
offset
+
bStart
;
}
else
{
auto
bEnd
=
bStart
+
innerTable
-
>
BSize
(
aWM
)
;
*
aBaseline
=
BSize
(
aWM
)
-
(
bEnd
-
offset
)
;
}
return
true
;
}
return
false
;
}
virtual
nscoord
GetMinISize
(
gfxContext
*
aRenderingContext
)
override
;
virtual
nscoord
GetPrefISize
(
gfxContext
*
aRenderingContext
)
override
;
SizeComputationResult
ComputeSize
(
gfxContext
*
aRenderingContext
mozilla
:
:
WritingMode
aWM
const
mozilla
:
:
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
mozilla
:
:
LogicalSize
&
aMargin
const
mozilla
:
:
LogicalSize
&
aBorderPadding
const
mozilla
:
:
StyleSizeOverrides
&
aSizeOverrides
mozilla
:
:
ComputeSizeFlags
aFlags
)
override
;
mozilla
:
:
LogicalSize
ComputeAutoSize
(
gfxContext
*
aRenderingContext
mozilla
:
:
WritingMode
aWM
const
mozilla
:
:
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
mozilla
:
:
LogicalSize
&
aMargin
const
mozilla
:
:
LogicalSize
&
aBorderPadding
const
mozilla
:
:
StyleSizeOverrides
&
aSizeOverrides
mozilla
:
:
ComputeSizeFlags
aFlags
)
override
;
virtual
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
virtual
ComputedStyle
*
GetParentComputedStyle
(
nsIFrame
*
*
aProviderFrame
)
const
override
;
nsIContent
*
GetCellAt
(
uint32_t
aRowIdx
uint32_t
aColIdx
)
const
;
int32_t
GetRowCount
(
)
const
{
return
InnerTableFrame
(
)
-
>
GetRowCount
(
)
;
}
int32_t
GetColCount
(
)
const
{
return
InnerTableFrame
(
)
-
>
GetColCount
(
)
;
}
int32_t
GetIndexByRowAndColumn
(
int32_t
aRowIdx
int32_t
aColIdx
)
const
{
nsTableCellMap
*
cellMap
=
InnerTableFrame
(
)
-
>
GetCellMap
(
)
;
if
(
!
cellMap
)
return
-
1
;
return
cellMap
-
>
GetIndexByRowAndColumn
(
aRowIdx
aColIdx
)
;
}
void
GetRowAndColumnByIndex
(
int32_t
aCellIdx
int32_t
*
aRowIdx
int32_t
*
aColIdx
)
const
{
*
aRowIdx
=
*
aColIdx
=
0
;
nsTableCellMap
*
cellMap
=
InnerTableFrame
(
)
-
>
GetCellMap
(
)
;
if
(
cellMap
)
{
cellMap
-
>
GetRowAndColumnByIndex
(
aCellIdx
aRowIdx
aColIdx
)
;
}
}
nsTableCellFrame
*
GetCellFrameAt
(
uint32_t
aRowIdx
uint32_t
aColIdx
)
const
{
nsTableCellMap
*
map
=
InnerTableFrame
(
)
-
>
GetCellMap
(
)
;
if
(
!
map
)
{
return
nullptr
;
}
return
map
-
>
GetCellInfoAt
(
aRowIdx
aColIdx
)
;
}
uint32_t
GetEffectiveColSpanAt
(
uint32_t
aRowIdx
uint32_t
aColIdx
)
const
{
nsTableCellMap
*
map
=
InnerTableFrame
(
)
-
>
GetCellMap
(
)
;
return
map
-
>
GetEffectiveColSpan
(
aRowIdx
aColIdx
)
;
}
uint32_t
GetEffectiveRowSpanAt
(
uint32_t
aRowIdx
uint32_t
aColIdx
)
const
{
nsTableCellMap
*
map
=
InnerTableFrame
(
)
-
>
GetCellMap
(
)
;
return
map
-
>
GetEffectiveRowSpan
(
aRowIdx
aColIdx
)
;
}
protected
:
explicit
nsTableWrapperFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
ClassID
aID
=
kClassID
)
;
virtual
~
nsTableWrapperFrame
(
)
;
using
MaybeCaptionSide
=
Maybe
<
mozilla
:
:
StyleCaptionSide
>
;
MaybeCaptionSide
GetCaptionSide
(
)
const
;
bool
HasSideCaption
(
)
const
{
auto
captionSide
=
GetCaptionSide
(
)
;
return
captionSide
&
&
IsSideCaption
(
*
captionSide
)
;
}
static
bool
IsSideCaption
(
const
mozilla
:
:
StyleCaptionSide
aCaptionSide
)
{
return
aCaptionSide
=
=
mozilla
:
:
StyleCaptionSide
:
:
Left
|
|
aCaptionSide
=
=
mozilla
:
:
StyleCaptionSide
:
:
Right
;
}
mozilla
:
:
StyleVerticalAlignKeyword
GetCaptionVerticalAlign
(
)
const
;
nscoord
ComputeFinalBSize
(
const
MaybeCaptionSide
&
const
mozilla
:
:
LogicalSize
&
aInnerSize
const
mozilla
:
:
LogicalSize
&
aCaptionSize
const
mozilla
:
:
LogicalMargin
&
aCaptionMargin
const
mozilla
:
:
WritingMode
aWM
)
const
;
nsresult
GetCaptionOrigin
(
mozilla
:
:
StyleCaptionSide
const
mozilla
:
:
LogicalSize
&
aContainBlockSize
const
mozilla
:
:
LogicalSize
&
aInnerSize
const
mozilla
:
:
LogicalSize
&
aCaptionSize
mozilla
:
:
LogicalMargin
&
aCaptionMargin
mozilla
:
:
LogicalPoint
&
aOrigin
mozilla
:
:
WritingMode
aWM
)
;
nsresult
GetInnerOrigin
(
const
MaybeCaptionSide
&
const
mozilla
:
:
LogicalSize
&
aContainBlockSize
const
mozilla
:
:
LogicalSize
&
aCaptionSize
const
mozilla
:
:
LogicalMargin
&
aCaptionMargin
const
mozilla
:
:
LogicalSize
&
aInnerSize
mozilla
:
:
LogicalPoint
&
aOrigin
mozilla
:
:
WritingMode
aWM
)
;
mozilla
:
:
LogicalSize
GetAreaOccupiedByCaption
(
mozilla
:
:
StyleCaptionSide
const
mozilla
:
:
LogicalSize
&
aCaptionMarginBoxSize
)
const
;
void
CreateReflowInputForInnerTable
(
nsPresContext
*
aPresContext
nsTableFrame
*
aTableFrame
const
ReflowInput
&
aOuterRI
Maybe
<
ReflowInput
>
&
aChildRI
const
nscoord
aAvailISize
const
mozilla
:
:
Maybe
<
mozilla
:
:
LogicalSize
>
&
aAreaOccupiedByCaption
=
mozilla
:
:
Nothing
(
)
)
const
;
void
CreateReflowInputForCaption
(
nsPresContext
*
aPresContext
nsIFrame
*
aCaptionFrame
const
ReflowInput
&
aOuterRI
Maybe
<
ReflowInput
>
&
aChildRI
const
nscoord
aAvailISize
)
const
;
void
ReflowChild
(
nsPresContext
*
aPresContext
nsIFrame
*
aChildFrame
const
ReflowInput
&
aChildRI
ReflowOutput
&
aMetrics
nsReflowStatus
&
aStatus
)
;
void
UpdateOverflowAreas
(
ReflowOutput
&
aMet
)
;
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsContainerFrame
:
:
IsFrameOfType
(
aFlags
&
(
~
eCanContainOverflowContainers
)
)
;
}
nsTableFrame
*
InnerTableFrame
(
)
const
{
return
static_cast
<
nsTableFrame
*
>
(
mFrames
.
FirstChild
(
)
)
;
}
nscoord
InnerTableShrinkWrapISize
(
gfxContext
*
aRenderingContext
nsTableFrame
*
aTableFrame
mozilla
:
:
WritingMode
aWM
const
mozilla
:
:
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
mozilla
:
:
StyleSizeOverrides
&
aSizeOverrides
mozilla
:
:
ComputeSizeFlags
aFlag
)
const
;
nscoord
CaptionShrinkWrapISize
(
gfxContext
*
aRenderingContext
nsIFrame
*
aCaptionFrame
mozilla
:
:
WritingMode
aWM
const
mozilla
:
:
LogicalSize
&
aCBSize
nscoord
aAvailableISize
mozilla
:
:
ComputeSizeFlags
aFlag
)
const
;
mozilla
:
:
StyleSize
ReduceStyleSizeBy
(
const
mozilla
:
:
StyleSize
&
aStyleSize
const
nscoord
aAmountToReduce
)
const
;
mozilla
:
:
StyleSizeOverrides
ComputeSizeOverridesForInnerTable
(
const
nsTableFrame
*
aTableFrame
const
mozilla
:
:
StyleSizeOverrides
&
aWrapperSizeOverrides
const
mozilla
:
:
LogicalSize
&
aBorderPadding
const
mozilla
:
:
LogicalSize
&
aAreaOccupiedByCaption
)
const
;
private
:
nsFrameList
mCaptionFrames
;
}
;
#
endif
