#
ifndef
nsHTMLCanvasFrame_h___
#
define
nsHTMLCanvasFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
FrameLayerBuilder
.
h
"
namespace
mozilla
{
namespace
layers
{
class
Layer
;
class
LayerManager
;
}
}
class
nsPresContext
;
class
nsDisplayItem
;
class
nsAString
;
nsIFrame
*
NS_NewHTMLCanvasFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
;
class
nsHTMLCanvasFrame
final
:
public
nsContainerFrame
{
public
:
typedef
mozilla
:
:
layers
:
:
CanvasRenderer
CanvasRenderer
;
typedef
mozilla
:
:
layers
:
:
Layer
Layer
;
typedef
mozilla
:
:
layers
:
:
LayerManager
LayerManager
;
typedef
mozilla
:
:
ContainerLayerParameters
ContainerLayerParameters
;
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsHTMLCanvasFrame
)
explicit
nsHTMLCanvasFrame
(
nsStyleContext
*
aContext
)
:
nsContainerFrame
(
aContext
kClassID
)
mBorderPadding
(
GetWritingMode
(
)
)
{
}
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
already_AddRefed
<
Layer
>
BuildLayer
(
nsDisplayListBuilder
*
aBuilder
LayerManager
*
aManager
nsDisplayItem
*
aItem
const
ContainerLayerParameters
&
aContainerParameters
)
;
bool
InitializeCanvasRenderer
(
nsDisplayListBuilder
*
aBuilder
CanvasRenderer
*
aRenderer
)
;
nsIntSize
GetCanvasSize
(
)
;
virtual
nscoord
GetMinISize
(
gfxContext
*
aRenderingContext
)
override
;
virtual
nscoord
GetPrefISize
(
gfxContext
*
aRenderingContext
)
override
;
virtual
mozilla
:
:
IntrinsicSize
GetIntrinsicSize
(
)
override
;
virtual
nsSize
GetIntrinsicRatio
(
)
override
;
virtual
mozilla
:
:
LogicalSize
ComputeSize
(
gfxContext
*
aRenderingContext
mozilla
:
:
WritingMode
aWritingMode
const
mozilla
:
:
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
mozilla
:
:
LogicalSize
&
aMargin
const
mozilla
:
:
LogicalSize
&
aBorder
const
mozilla
:
:
LogicalSize
&
aPadding
ComputeSizeFlags
aFlags
)
override
;
virtual
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
nsRect
GetInnerArea
(
)
const
;
#
ifdef
ACCESSIBILITY
virtual
mozilla
:
:
a11y
:
:
AccType
AccessibleType
(
)
override
;
#
endif
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsSplittableFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eReplaced
|
nsIFrame
:
:
eReplacedSizing
)
)
;
}
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
virtual
nsContainerFrame
*
GetContentInsertionFrame
(
)
override
{
return
PrincipalChildList
(
)
.
FirstChild
(
)
-
>
GetContentInsertionFrame
(
)
;
}
void
AppendDirectlyOwnedAnonBoxes
(
nsTArray
<
OwnedAnonBox
>
&
aResult
)
override
;
protected
:
virtual
~
nsHTMLCanvasFrame
(
)
;
nscoord
GetContinuationOffset
(
nscoord
*
aWidth
=
0
)
const
;
mozilla
:
:
LogicalMargin
mBorderPadding
;
}
;
#
endif
