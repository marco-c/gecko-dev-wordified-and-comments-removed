#
include
"
ColumnSetWrapperFrame
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIFrameInlines
.
h
"
using
namespace
mozilla
;
nsBlockFrame
*
NS_NewColumnSetWrapperFrame
(
nsIPresShell
*
aPresShell
ComputedStyle
*
aStyle
nsFrameState
aStateFlags
)
{
ColumnSetWrapperFrame
*
frame
=
new
(
aPresShell
)
ColumnSetWrapperFrame
(
aStyle
)
;
frame
-
>
AddStateBits
(
aStateFlags
|
NS_BLOCK_FORMATTING_CONTEXT_STATE_BITS
)
;
return
frame
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
ColumnSetWrapperFrame
)
NS_QUERYFRAME_HEAD
(
ColumnSetWrapperFrame
)
NS_QUERYFRAME_ENTRY
(
ColumnSetWrapperFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsBlockFrame
)
ColumnSetWrapperFrame
:
:
ColumnSetWrapperFrame
(
ComputedStyle
*
aStyle
)
:
nsBlockFrame
(
aStyle
kClassID
)
{
}
nsContainerFrame
*
ColumnSetWrapperFrame
:
:
GetContentInsertionFrame
(
)
{
nsIFrame
*
columnSet
=
PrincipalChildList
(
)
.
OnlyChild
(
)
;
if
(
columnSet
)
{
MOZ_ASSERT
(
columnSet
-
>
IsColumnSetFrame
(
)
)
;
return
columnSet
-
>
GetContentInsertionFrame
(
)
;
}
return
this
;
}
void
ColumnSetWrapperFrame
:
:
AppendDirectlyOwnedAnonBoxes
(
nsTArray
<
OwnedAnonBox
>
&
aResult
)
{
MOZ_ASSERT
(
!
GetPrevContinuation
(
)
"
Who
set
NS_FRAME_OWNS_ANON_BOXES
on
our
continuations
?
"
)
;
nsIFrame
*
columnSet
=
PrincipalChildList
(
)
.
FirstChild
(
)
;
MOZ_ASSERT
(
columnSet
&
&
columnSet
-
>
IsColumnSetFrame
(
)
"
The
first
child
should
always
be
ColumnSet
!
"
)
;
aResult
.
AppendElement
(
OwnedAnonBox
(
columnSet
)
)
;
}
#
ifdef
DEBUG_FRAME_DUMP
nsresult
ColumnSetWrapperFrame
:
:
GetFrameName
(
nsAString
&
aResult
)
const
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
ColumnSetWrapper
"
)
aResult
)
;
}
#
endif
void
ColumnSetWrapperFrame
:
:
AppendFrames
(
ChildListID
aListID
nsFrameList
&
aFrameList
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
!
mFinishedBuildingColumns
"
Should
only
call
once
!
"
)
;
mFinishedBuildingColumns
=
true
;
#
endif
nsBlockFrame
:
:
AppendFrames
(
aListID
aFrameList
)
;
#
ifdef
DEBUG
nsIFrame
*
firstColumnSet
=
PrincipalChildList
(
)
.
FirstChild
(
)
;
for
(
nsIFrame
*
child
:
PrincipalChildList
(
)
)
{
if
(
child
-
>
IsColumnSpan
(
)
)
{
AssertColumnSpanWrapperSubtreeIsSane
(
child
)
;
}
else
if
(
child
!
=
firstColumnSet
)
{
MOZ_ASSERT
(
child
-
>
IsColumnSetFrame
(
)
&
&
child
-
>
GetPrevContinuation
(
)
"
ColumnSet
'
s
prev
-
continuation
is
not
set
properly
?
"
)
;
}
}
#
endif
}
void
ColumnSetWrapperFrame
:
:
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
nsFrameList
&
aFrameList
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Unsupported
operation
!
"
)
;
nsBlockFrame
:
:
InsertFrames
(
aListID
aPrevFrame
aFrameList
)
;
}
void
ColumnSetWrapperFrame
:
:
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Unsupported
operation
!
"
)
;
nsBlockFrame
:
:
RemoveFrame
(
aListID
aOldFrame
)
;
}
#
ifdef
DEBUG
void
ColumnSetWrapperFrame
:
:
AssertColumnSpanWrapperSubtreeIsSane
(
const
nsIFrame
*
aFrame
)
{
MOZ_ASSERT
(
aFrame
-
>
IsColumnSpan
(
)
"
aFrame
is
not
column
-
span
?
"
)
;
if
(
!
nsLayoutUtils
:
:
GetStyleFrame
(
const_cast
<
nsIFrame
*
>
(
aFrame
)
)
-
>
Style
(
)
-
>
IsAnonBox
(
)
)
{
return
;
}
MOZ_ASSERT
(
aFrame
-
>
Style
(
)
-
>
GetPseudo
(
)
=
=
nsCSSAnonBoxes
:
:
columnSpanWrapper
(
)
"
aFrame
should
be
:
:
-
moz
-
column
-
span
-
wrapper
"
)
;
MOZ_ASSERT
(
!
aFrame
-
>
HasAnyStateBits
(
NS_FRAME_OWNS_ANON_BOXES
)
"
:
:
-
moz
-
column
-
span
-
wrapper
anonymous
blocks
cannot
own
"
"
other
types
of
anonymous
blocks
!
"
)
;
for
(
const
nsIFrame
*
child
:
aFrame
-
>
PrincipalChildList
(
)
)
{
AssertColumnSpanWrapperSubtreeIsSane
(
child
)
;
}
}
#
endif
