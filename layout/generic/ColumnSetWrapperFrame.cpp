#
include
"
ColumnSetWrapperFrame
.
h
"
using
namespace
mozilla
;
nsBlockFrame
*
NS_NewColumnSetWrapperFrame
(
nsIPresShell
*
aPresShell
ComputedStyle
*
aStyle
nsFrameState
aStateFlags
)
{
ColumnSetWrapperFrame
*
frame
=
new
(
aPresShell
)
ColumnSetWrapperFrame
(
aStyle
)
;
frame
-
>
AddStateBits
(
aStateFlags
|
NS_BLOCK_FORMATTING_CONTEXT_STATE_BITS
)
;
return
frame
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
ColumnSetWrapperFrame
)
NS_QUERYFRAME_HEAD
(
ColumnSetWrapperFrame
)
NS_QUERYFRAME_ENTRY
(
ColumnSetWrapperFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsBlockFrame
)
ColumnSetWrapperFrame
:
:
ColumnSetWrapperFrame
(
ComputedStyle
*
aStyle
)
:
nsBlockFrame
(
aStyle
kClassID
)
{
}
#
ifdef
DEBUG_FRAME_DUMP
nsresult
ColumnSetWrapperFrame
:
:
GetFrameName
(
nsAString
&
aResult
)
const
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
ColumnSetWrapper
"
)
aResult
)
;
}
#
endif
void
ColumnSetWrapperFrame
:
:
AppendFrames
(
ChildListID
aListID
nsFrameList
&
aFrameList
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Unsupported
operation
!
"
)
;
nsBlockFrame
:
:
AppendFrames
(
aListID
aFrameList
)
;
}
void
ColumnSetWrapperFrame
:
:
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
nsFrameList
&
aFrameList
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Unsupported
operation
!
"
)
;
nsBlockFrame
:
:
InsertFrames
(
aListID
aPrevFrame
aFrameList
)
;
}
void
ColumnSetWrapperFrame
:
:
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Unsupported
operation
!
"
)
;
nsBlockFrame
:
:
RemoveFrame
(
aListID
aOldFrame
)
;
}
