#
ifndef
nsContainerFrameInlines_h___
#
define
nsContainerFrameInlines_h___
#
include
"
nsContainerFrame
.
h
"
template
<
typename
ISizeData
typename
F
>
void
nsContainerFrame
:
:
DoInlineIntrinsicISize
(
ISizeData
*
aData
F
&
aHandleChildren
)
{
using
namespace
mozilla
;
auto
GetMargin
=
[
]
(
const
mozilla
:
:
StyleMargin
&
aCoord
)
-
>
nscoord
{
return
!
aCoord
.
IsLengthPercentage
(
)
?
0
:
aCoord
.
AsLengthPercentage
(
)
.
Resolve
(
0
)
;
}
;
if
(
GetPrevInFlow
(
)
)
return
;
WritingMode
wm
=
GetWritingMode
(
)
;
Side
startSide
=
wm
.
PhysicalSideForInlineAxis
(
LogicalEdge
:
:
Start
)
;
Side
endSide
=
wm
.
PhysicalSideForInlineAxis
(
LogicalEdge
:
:
End
)
;
const
nsStylePadding
*
stylePadding
=
StylePadding
(
)
;
const
nsStyleBorder
*
styleBorder
=
StyleBorder
(
)
;
const
nsStyleMargin
*
styleMargin
=
StyleMargin
(
)
;
nscoord
clonePBM
=
0
;
const
bool
sliceBreak
=
styleBorder
-
>
mBoxDecorationBreak
=
=
StyleBoxDecorationBreak
:
:
Slice
;
if
(
!
GetPrevContinuation
(
)
|
|
MOZ_UNLIKELY
(
!
sliceBreak
)
)
{
nscoord
startPBM
=
std
:
:
max
(
stylePadding
-
>
mPadding
.
Get
(
startSide
)
.
Resolve
(
0
)
0
)
+
styleBorder
-
>
GetComputedBorderWidth
(
startSide
)
+
GetMargin
(
styleMargin
-
>
GetMargin
(
startSide
)
)
;
if
(
MOZ_LIKELY
(
sliceBreak
)
)
{
aData
-
>
mCurrentLine
+
=
startPBM
;
}
else
{
clonePBM
=
startPBM
;
}
}
nscoord
endPBM
=
std
:
:
max
(
stylePadding
-
>
mPadding
.
Get
(
endSide
)
.
Resolve
(
0
)
0
)
+
styleBorder
-
>
GetComputedBorderWidth
(
endSide
)
+
GetMargin
(
styleMargin
-
>
GetMargin
(
endSide
)
)
;
if
(
MOZ_UNLIKELY
(
!
sliceBreak
)
)
{
clonePBM
+
=
endPBM
;
aData
-
>
mCurrentLine
+
=
clonePBM
;
}
const
LineListIterator
*
savedLine
=
aData
-
>
mLine
;
nsIFrame
*
const
savedLineContainer
=
aData
-
>
LineContainer
(
)
;
nsContainerFrame
*
lastInFlow
;
for
(
nsContainerFrame
*
nif
=
this
;
nif
;
nif
=
static_cast
<
nsContainerFrame
*
>
(
nif
-
>
GetNextInFlow
(
)
)
)
{
if
(
aData
-
>
mCurrentLine
=
=
0
)
{
aData
-
>
mCurrentLine
=
clonePBM
;
}
aHandleChildren
(
nif
aData
)
;
aData
-
>
mLine
=
nullptr
;
aData
-
>
SetLineContainer
(
nullptr
)
;
lastInFlow
=
nif
;
}
aData
-
>
mLine
=
savedLine
;
aData
-
>
SetLineContainer
(
savedLineContainer
)
;
if
(
MOZ_LIKELY
(
!
lastInFlow
-
>
GetNextContinuation
(
)
&
&
sliceBreak
)
)
{
aData
-
>
mCurrentLine
+
=
endPBM
;
}
}
#
endif
