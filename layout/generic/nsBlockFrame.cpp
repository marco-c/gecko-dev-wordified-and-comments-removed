#
include
"
nsBlockFrame
.
h
"
#
include
"
gfxContext
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsAbsoluteContainingBlock
.
h
"
#
include
"
nsBlockReflowContext
.
h
"
#
include
"
BlockReflowInput
.
h
"
#
include
"
nsBulletFrame
.
h
"
#
include
"
nsFontMetrics
.
h
"
#
include
"
nsLineBox
.
h
"
#
include
"
nsLineLayout
.
h
"
#
include
"
nsPlaceholderFrame
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsFrameManager
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsStyleContext
.
h
"
#
include
"
nsHTMLParts
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsAttrValueInlines
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
nsFloatManager
.
h
"
#
include
"
prenv
.
h
"
#
include
"
plstr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
<
algorithm
>
#
ifdef
ACCESSIBILITY
#
include
"
nsIDOMHTMLDocument
.
h
"
#
endif
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsCSSAnonBoxes
.
h
"
#
include
"
nsCSSFrameConstructor
.
h
"
#
include
"
TextOverflow
.
h
"
#
include
"
nsIFrameInlines
.
h
"
#
include
"
CounterStyleManager
.
h
"
#
include
"
nsISelection
.
h
"
#
include
"
mozilla
/
dom
/
HTMLDetailsElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLSummaryElement
.
h
"
#
include
"
mozilla
/
ServoRestyleManager
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
mozilla
/
StyleSetHandle
.
h
"
#
include
"
mozilla
/
StyleSetHandleInlines
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
nsBidiPresUtils
.
h
"
#
include
<
inttypes
.
h
>
static
const
int
MIN_LINES_NEEDING_CURSOR
=
20
;
static
const
char16_t
kDiscCharacter
=
0x2022
;
using
namespace
mozilla
;
using
namespace
mozilla
:
:
css
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
layout
;
using
ShapeType
=
nsFloatManager
:
:
ShapeType
;
typedef
nsAbsoluteContainingBlock
:
:
AbsPosReflowFlags
AbsPosReflowFlags
;
static
void
MarkAllDescendantLinesDirty
(
nsBlockFrame
*
aBlock
)
{
nsLineList
:
:
iterator
line
=
aBlock
-
>
LinesBegin
(
)
;
nsLineList
:
:
iterator
endLine
=
aBlock
-
>
LinesEnd
(
)
;
while
(
line
!
=
endLine
)
{
if
(
line
-
>
IsBlock
(
)
)
{
nsIFrame
*
f
=
line
-
>
mFirstChild
;
nsBlockFrame
*
bf
=
nsLayoutUtils
:
:
GetAsBlock
(
f
)
;
if
(
bf
)
{
MarkAllDescendantLinesDirty
(
bf
)
;
}
}
line
-
>
MarkDirty
(
)
;
+
+
line
;
}
}
static
void
MarkSameFloatManagerLinesDirty
(
nsBlockFrame
*
aBlock
)
{
nsBlockFrame
*
blockWithFloatMgr
=
aBlock
;
while
(
!
(
blockWithFloatMgr
-
>
GetStateBits
(
)
&
NS_BLOCK_FLOAT_MGR
)
)
{
nsBlockFrame
*
bf
=
nsLayoutUtils
:
:
GetAsBlock
(
blockWithFloatMgr
-
>
GetParent
(
)
)
;
if
(
!
bf
)
{
break
;
}
blockWithFloatMgr
=
bf
;
}
MarkAllDescendantLinesDirty
(
blockWithFloatMgr
)
;
}
static
bool
BlockHasAnyFloats
(
nsIFrame
*
aFrame
)
{
nsBlockFrame
*
block
=
nsLayoutUtils
:
:
GetAsBlock
(
aFrame
)
;
if
(
!
block
)
return
false
;
if
(
block
-
>
GetChildList
(
nsIFrame
:
:
kFloatList
)
.
FirstChild
(
)
)
return
true
;
nsLineList
:
:
iterator
line
=
block
-
>
LinesBegin
(
)
;
nsLineList
:
:
iterator
endLine
=
block
-
>
LinesEnd
(
)
;
while
(
line
!
=
endLine
)
{
if
(
line
-
>
IsBlock
(
)
&
&
BlockHasAnyFloats
(
line
-
>
mFirstChild
)
)
return
true
;
+
+
line
;
}
return
false
;
}
#
ifdef
DEBUG
#
include
"
nsBlockDebugFlags
.
h
"
bool
nsBlockFrame
:
:
gLamePaintMetrics
;
bool
nsBlockFrame
:
:
gLameReflowMetrics
;
bool
nsBlockFrame
:
:
gNoisy
;
bool
nsBlockFrame
:
:
gNoisyDamageRepair
;
bool
nsBlockFrame
:
:
gNoisyIntrinsic
;
bool
nsBlockFrame
:
:
gNoisyReflow
;
bool
nsBlockFrame
:
:
gReallyNoisyReflow
;
bool
nsBlockFrame
:
:
gNoisyFloatManager
;
bool
nsBlockFrame
:
:
gVerifyLines
;
bool
nsBlockFrame
:
:
gDisableResizeOpt
;
int32_t
nsBlockFrame
:
:
gNoiseIndent
;
struct
BlockDebugFlags
{
const
char
*
name
;
bool
*
on
;
}
;
static
const
BlockDebugFlags
gFlags
[
]
=
{
{
"
reflow
"
&
nsBlockFrame
:
:
gNoisyReflow
}
{
"
really
-
noisy
-
reflow
"
&
nsBlockFrame
:
:
gReallyNoisyReflow
}
{
"
intrinsic
"
&
nsBlockFrame
:
:
gNoisyIntrinsic
}
{
"
float
-
manager
"
&
nsBlockFrame
:
:
gNoisyFloatManager
}
{
"
verify
-
lines
"
&
nsBlockFrame
:
:
gVerifyLines
}
{
"
damage
-
repair
"
&
nsBlockFrame
:
:
gNoisyDamageRepair
}
{
"
lame
-
paint
-
metrics
"
&
nsBlockFrame
:
:
gLamePaintMetrics
}
{
"
lame
-
reflow
-
metrics
"
&
nsBlockFrame
:
:
gLameReflowMetrics
}
{
"
disable
-
resize
-
opt
"
&
nsBlockFrame
:
:
gDisableResizeOpt
}
}
;
#
define
NUM_DEBUG_FLAGS
(
sizeof
(
gFlags
)
/
sizeof
(
gFlags
[
0
]
)
)
static
void
ShowDebugFlags
(
)
{
printf
(
"
Here
are
the
available
GECKO_BLOCK_DEBUG_FLAGS
:
\
n
"
)
;
const
BlockDebugFlags
*
bdf
=
gFlags
;
const
BlockDebugFlags
*
end
=
gFlags
+
NUM_DEBUG_FLAGS
;
for
(
;
bdf
<
end
;
bdf
+
+
)
{
printf
(
"
%
s
\
n
"
bdf
-
>
name
)
;
}
printf
(
"
Note
:
GECKO_BLOCK_DEBUG_FLAGS
is
a
comma
separated
list
of
flag
\
n
"
)
;
printf
(
"
names
(
no
whitespace
)
\
n
"
)
;
}
void
nsBlockFrame
:
:
InitDebugFlags
(
)
{
static
bool
firstTime
=
true
;
if
(
firstTime
)
{
firstTime
=
false
;
char
*
flags
=
PR_GetEnv
(
"
GECKO_BLOCK_DEBUG_FLAGS
"
)
;
if
(
flags
)
{
bool
error
=
false
;
for
(
;
;
)
{
char
*
cm
=
PL_strchr
(
flags
'
'
)
;
if
(
cm
)
*
cm
=
'
\
0
'
;
bool
found
=
false
;
const
BlockDebugFlags
*
bdf
=
gFlags
;
const
BlockDebugFlags
*
end
=
gFlags
+
NUM_DEBUG_FLAGS
;
for
(
;
bdf
<
end
;
bdf
+
+
)
{
if
(
PL_strcasecmp
(
bdf
-
>
name
flags
)
=
=
0
)
{
*
(
bdf
-
>
on
)
=
true
;
printf
(
"
nsBlockFrame
:
setting
%
s
debug
flag
on
\
n
"
bdf
-
>
name
)
;
gNoisy
=
true
;
found
=
true
;
break
;
}
}
if
(
!
found
)
{
error
=
true
;
}
if
(
!
cm
)
break
;
*
cm
=
'
'
;
flags
=
cm
+
1
;
}
if
(
error
)
{
ShowDebugFlags
(
)
;
}
}
}
}
#
endif
#
ifdef
DEBUG
const
char
*
nsBlockFrame
:
:
kReflowCommandType
[
]
=
{
"
ContentChanged
"
"
StyleChanged
"
"
ReflowDirty
"
"
Timeout
"
"
UserDefined
"
}
;
const
char
*
nsBlockFrame
:
:
LineReflowStatusToString
(
LineReflowStatus
aLineReflowStatus
)
const
{
switch
(
aLineReflowStatus
)
{
case
LineReflowStatus
:
:
OK
:
return
"
LINE_REFLOW_OK
"
;
case
LineReflowStatus
:
:
Stop
:
return
"
LINE_REFLOW_STOP
"
;
case
LineReflowStatus
:
:
RedoNoPull
:
return
"
LINE_REFLOW_REDO_NO_PULL
"
;
case
LineReflowStatus
:
:
RedoMoreFloats
:
return
"
LINE_REFLOW_REDO_MORE_FLOATS
"
;
case
LineReflowStatus
:
:
RedoNextBand
:
return
"
LINE_REFLOW_REDO_NEXT_BAND
"
;
case
LineReflowStatus
:
:
Truncated
:
return
"
LINE_REFLOW_TRUNCATED
"
;
}
return
"
unknown
"
;
}
#
endif
#
ifdef
REFLOW_STATUS_COVERAGE
static
void
RecordReflowStatus
(
bool
aChildIsBlock
nsReflowStatus
aFrameReflowStatus
)
{
static
uint32_t
record
[
2
]
;
int
index
=
0
;
if
(
!
aChildIsBlock
)
index
|
=
1
;
uint32_t
newS
=
record
[
index
]
;
if
(
aFrameReflowStatus
.
IsInlineBreak
(
)
)
{
if
(
aFrameReflowStatus
.
IsInlineBreakBefore
(
)
)
{
newS
|
=
1
;
}
else
if
(
aFrameReflowStatus
.
IsIncomplete
(
)
)
{
newS
|
=
2
;
}
else
{
newS
|
=
4
;
}
}
else
if
(
aFrameReflowStatus
.
IsIncomplete
(
)
)
{
newS
|
=
8
;
}
else
{
newS
|
=
16
;
}
if
(
record
[
index
]
!
=
newS
)
{
record
[
index
]
=
newS
;
printf
(
"
record
(
%
d
)
:
%
02x
%
02x
\
n
"
index
record
[
0
]
record
[
1
]
)
;
}
}
#
endif
NS_DECLARE_FRAME_PROPERTY_WITH_DTOR_NEVER_CALLED
(
OverflowLinesProperty
nsBlockFrame
:
:
FrameLines
)
NS_DECLARE_FRAME_PROPERTY_FRAMELIST
(
OverflowOutOfFlowsProperty
)
NS_DECLARE_FRAME_PROPERTY_FRAMELIST
(
PushedFloatProperty
)
NS_DECLARE_FRAME_PROPERTY_FRAMELIST
(
OutsideBulletProperty
)
NS_DECLARE_FRAME_PROPERTY_WITHOUT_DTOR
(
InsideBulletProperty
nsBulletFrame
)
NS_DECLARE_FRAME_PROPERTY_SMALL_VALUE
(
BlockEndEdgeOfChildrenProperty
nscoord
)
nsBlockFrame
*
NS_NewBlockFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
{
return
new
(
aPresShell
)
nsBlockFrame
(
aContext
)
;
}
nsBlockFrame
*
NS_NewBlockFormattingContext
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aStyleContext
)
{
nsBlockFrame
*
blockFrame
=
NS_NewBlockFrame
(
aPresShell
aStyleContext
)
;
blockFrame
-
>
AddStateBits
(
NS_BLOCK_FORMATTING_CONTEXT_STATE_BITS
)
;
return
blockFrame
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsBlockFrame
)
nsBlockFrame
:
:
~
nsBlockFrame
(
)
{
}
void
nsBlockFrame
:
:
DestroyFrom
(
nsIFrame
*
aDestructRoot
)
{
ClearLineCursor
(
)
;
DestroyAbsoluteFrames
(
aDestructRoot
)
;
mFloats
.
DestroyFramesFrom
(
aDestructRoot
)
;
nsPresContext
*
presContext
=
PresContext
(
)
;
nsIPresShell
*
shell
=
presContext
-
>
PresShell
(
)
;
nsLineBox
:
:
DeleteLineList
(
presContext
mLines
aDestructRoot
&
mFrames
)
;
if
(
HasPushedFloats
(
)
)
{
SafelyDestroyFrameListProp
(
aDestructRoot
shell
PushedFloatProperty
(
)
)
;
RemoveStateBits
(
NS_BLOCK_HAS_PUSHED_FLOATS
)
;
}
FrameLines
*
overflowLines
=
RemoveOverflowLines
(
)
;
if
(
overflowLines
)
{
nsLineBox
:
:
DeleteLineList
(
presContext
overflowLines
-
>
mLines
aDestructRoot
&
overflowLines
-
>
mFrames
)
;
delete
overflowLines
;
}
if
(
GetStateBits
(
)
&
NS_BLOCK_HAS_OVERFLOW_OUT_OF_FLOWS
)
{
SafelyDestroyFrameListProp
(
aDestructRoot
shell
OverflowOutOfFlowsProperty
(
)
)
;
RemoveStateBits
(
NS_BLOCK_HAS_OVERFLOW_OUT_OF_FLOWS
)
;
}
if
(
HasOutsideBullet
(
)
)
{
SafelyDestroyFrameListProp
(
aDestructRoot
shell
OutsideBulletProperty
(
)
)
;
RemoveStateBits
(
NS_BLOCK_FRAME_HAS_OUTSIDE_BULLET
)
;
}
nsContainerFrame
:
:
DestroyFrom
(
aDestructRoot
)
;
}
nsILineIterator
*
nsBlockFrame
:
:
GetLineIterator
(
)
{
nsLineIterator
*
it
=
new
nsLineIterator
;
if
(
!
it
)
return
nullptr
;
const
nsStyleVisibility
*
visibility
=
StyleVisibility
(
)
;
nsresult
rv
=
it
-
>
Init
(
mLines
visibility
-
>
mDirection
=
=
NS_STYLE_DIRECTION_RTL
)
;
if
(
NS_FAILED
(
rv
)
)
{
delete
it
;
return
nullptr
;
}
return
it
;
}
NS_QUERYFRAME_HEAD
(
nsBlockFrame
)
NS_QUERYFRAME_ENTRY
(
nsBlockFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsContainerFrame
)
nsSplittableType
nsBlockFrame
:
:
GetSplittableType
(
)
const
{
return
NS_FRAME_SPLITTABLE_NON_RECTANGULAR
;
}
#
ifdef
DEBUG_FRAME_DUMP
void
nsBlockFrame
:
:
List
(
FILE
*
out
const
char
*
aPrefix
uint32_t
aFlags
)
const
{
nsCString
str
;
ListGeneric
(
str
aPrefix
aFlags
)
;
fprintf_stderr
(
out
"
%
s
<
\
n
"
str
.
get
(
)
)
;
nsCString
pfx
(
aPrefix
)
;
pfx
+
=
"
"
;
if
(
!
mLines
.
empty
(
)
)
{
ConstLineIterator
line
=
LinesBegin
(
)
line_end
=
LinesEnd
(
)
;
for
(
;
line
!
=
line_end
;
+
+
line
)
{
line
-
>
List
(
out
pfx
.
get
(
)
aFlags
)
;
}
}
const
FrameLines
*
overflowLines
=
GetOverflowLines
(
)
;
if
(
overflowLines
&
&
!
overflowLines
-
>
mLines
.
empty
(
)
)
{
fprintf_stderr
(
out
"
%
sOverflow
-
lines
%
p
/
%
p
<
\
n
"
pfx
.
get
(
)
overflowLines
&
overflowLines
-
>
mFrames
)
;
nsCString
nestedPfx
(
pfx
)
;
nestedPfx
+
=
"
"
;
ConstLineIterator
line
=
overflowLines
-
>
mLines
.
begin
(
)
line_end
=
overflowLines
-
>
mLines
.
end
(
)
;
for
(
;
line
!
=
line_end
;
+
+
line
)
{
line
-
>
List
(
out
nestedPfx
.
get
(
)
aFlags
)
;
}
fprintf_stderr
(
out
"
%
s
>
\
n
"
pfx
.
get
(
)
)
;
}
ChildListIterator
lists
(
this
)
;
ChildListIDs
skip
(
kPrincipalList
|
kOverflowList
)
;
for
(
;
!
lists
.
IsDone
(
)
;
lists
.
Next
(
)
)
{
if
(
skip
.
Contains
(
lists
.
CurrentID
(
)
)
)
{
continue
;
}
fprintf_stderr
(
out
"
%
s
%
s
%
p
<
\
n
"
pfx
.
get
(
)
mozilla
:
:
layout
:
:
ChildListName
(
lists
.
CurrentID
(
)
)
&
GetChildList
(
lists
.
CurrentID
(
)
)
)
;
nsCString
nestedPfx
(
pfx
)
;
nestedPfx
+
=
"
"
;
nsFrameList
:
:
Enumerator
childFrames
(
lists
.
CurrentList
(
)
)
;
for
(
;
!
childFrames
.
AtEnd
(
)
;
childFrames
.
Next
(
)
)
{
nsIFrame
*
kid
=
childFrames
.
get
(
)
;
kid
-
>
List
(
out
nestedPfx
.
get
(
)
aFlags
)
;
}
fprintf_stderr
(
out
"
%
s
>
\
n
"
pfx
.
get
(
)
)
;
}
fprintf_stderr
(
out
"
%
s
>
\
n
"
aPrefix
)
;
}
nsresult
nsBlockFrame
:
:
GetFrameName
(
nsAString
&
aResult
)
const
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
Block
"
)
aResult
)
;
}
#
endif
#
ifdef
DEBUG
nsFrameState
nsBlockFrame
:
:
GetDebugStateBits
(
)
const
{
return
nsContainerFrame
:
:
GetDebugStateBits
(
)
&
~
NS_BLOCK_HAS_LINE_CURSOR
;
}
#
endif
void
nsBlockFrame
:
:
InvalidateFrame
(
uint32_t
aDisplayItemKey
)
{
if
(
nsSVGUtils
:
:
IsInSVGTextSubtree
(
this
)
)
{
NS_ASSERTION
(
GetParent
(
)
-
>
IsSVGTextFrame
(
)
"
unexpected
block
frame
in
SVG
text
"
)
;
GetParent
(
)
-
>
InvalidateFrame
(
)
;
return
;
}
nsContainerFrame
:
:
InvalidateFrame
(
aDisplayItemKey
)
;
}
void
nsBlockFrame
:
:
InvalidateFrameWithRect
(
const
nsRect
&
aRect
uint32_t
aDisplayItemKey
)
{
if
(
nsSVGUtils
:
:
IsInSVGTextSubtree
(
this
)
)
{
NS_ASSERTION
(
GetParent
(
)
-
>
IsSVGTextFrame
(
)
"
unexpected
block
frame
in
SVG
text
"
)
;
GetParent
(
)
-
>
InvalidateFrame
(
)
;
return
;
}
nsContainerFrame
:
:
InvalidateFrameWithRect
(
aRect
aDisplayItemKey
)
;
}
nscoord
nsBlockFrame
:
:
GetLogicalBaseline
(
WritingMode
aWM
)
const
{
auto
lastBaseline
=
BaselineBOffset
(
aWM
BaselineSharingGroup
:
:
eLast
AlignmentContext
:
:
eInline
)
;
return
BSize
(
aWM
)
-
lastBaseline
;
}
bool
nsBlockFrame
:
:
GetNaturalBaselineBOffset
(
mozilla
:
:
WritingMode
aWM
BaselineSharingGroup
aBaselineGroup
nscoord
*
aBaseline
)
const
{
if
(
aBaselineGroup
=
=
BaselineSharingGroup
:
:
eFirst
)
{
return
nsLayoutUtils
:
:
GetFirstLineBaseline
(
aWM
this
aBaseline
)
;
}
for
(
ConstReverseLineIterator
line
=
LinesRBegin
(
)
line_end
=
LinesREnd
(
)
;
line
!
=
line_end
;
+
+
line
)
{
if
(
line
-
>
IsBlock
(
)
)
{
nscoord
offset
;
nsIFrame
*
kid
=
line
-
>
mFirstChild
;
if
(
kid
-
>
GetVerticalAlignBaseline
(
aWM
&
offset
)
)
{
const
nsSize
&
sz
=
line
-
>
mContainerSize
;
offset
+
=
kid
-
>
GetLogicalNormalPosition
(
aWM
sz
)
.
B
(
aWM
)
;
*
aBaseline
=
BSize
(
aWM
)
-
offset
;
return
true
;
}
}
else
{
if
(
line
-
>
BSize
(
)
!
=
0
|
|
!
line
-
>
IsEmpty
(
)
)
{
*
aBaseline
=
BSize
(
aWM
)
-
(
line
-
>
BStart
(
)
+
line
-
>
GetLogicalAscent
(
)
)
;
return
true
;
}
}
}
return
false
;
}
nscoord
nsBlockFrame
:
:
GetCaretBaseline
(
)
const
{
nsRect
contentRect
=
GetContentRect
(
)
;
nsMargin
bp
=
GetUsedBorderAndPadding
(
)
;
if
(
!
mLines
.
empty
(
)
)
{
ConstLineIterator
line
=
LinesBegin
(
)
;
const
nsLineBox
*
firstLine
=
line
;
if
(
firstLine
-
>
GetChildCount
(
)
)
{
return
bp
.
top
+
firstLine
-
>
mFirstChild
-
>
GetCaretBaseline
(
)
;
}
}
float
inflation
=
nsLayoutUtils
:
:
FontSizeInflationFor
(
this
)
;
RefPtr
<
nsFontMetrics
>
fm
=
nsLayoutUtils
:
:
GetFontMetricsForFrame
(
this
inflation
)
;
nscoord
lineHeight
=
ReflowInput
:
:
CalcLineHeight
(
GetContent
(
)
StyleContext
(
)
contentRect
.
height
inflation
)
;
const
WritingMode
wm
=
GetWritingMode
(
)
;
return
nsLayoutUtils
:
:
GetCenteredFontBaseline
(
fm
lineHeight
wm
.
IsLineInverted
(
)
)
+
bp
.
top
;
}
const
nsFrameList
&
nsBlockFrame
:
:
GetChildList
(
ChildListID
aListID
)
const
{
switch
(
aListID
)
{
case
kPrincipalList
:
return
mFrames
;
case
kOverflowList
:
{
FrameLines
*
overflowLines
=
GetOverflowLines
(
)
;
return
overflowLines
?
overflowLines
-
>
mFrames
:
nsFrameList
:
:
EmptyList
(
)
;
}
case
kFloatList
:
return
mFloats
;
case
kOverflowOutOfFlowList
:
{
const
nsFrameList
*
list
=
GetOverflowOutOfFlows
(
)
;
return
list
?
*
list
:
nsFrameList
:
:
EmptyList
(
)
;
}
case
kPushedFloatsList
:
{
const
nsFrameList
*
list
=
GetPushedFloats
(
)
;
return
list
?
*
list
:
nsFrameList
:
:
EmptyList
(
)
;
}
case
kBulletList
:
{
const
nsFrameList
*
list
=
GetOutsideBulletList
(
)
;
return
list
?
*
list
:
nsFrameList
:
:
EmptyList
(
)
;
}
default
:
return
nsContainerFrame
:
:
GetChildList
(
aListID
)
;
}
}
void
nsBlockFrame
:
:
GetChildLists
(
nsTArray
<
ChildList
>
*
aLists
)
const
{
nsContainerFrame
:
:
GetChildLists
(
aLists
)
;
FrameLines
*
overflowLines
=
GetOverflowLines
(
)
;
if
(
overflowLines
)
{
overflowLines
-
>
mFrames
.
AppendIfNonempty
(
aLists
kOverflowList
)
;
}
const
nsFrameList
*
list
=
GetOverflowOutOfFlows
(
)
;
if
(
list
)
{
list
-
>
AppendIfNonempty
(
aLists
kOverflowOutOfFlowList
)
;
}
mFloats
.
AppendIfNonempty
(
aLists
kFloatList
)
;
list
=
GetOutsideBulletList
(
)
;
if
(
list
)
{
list
-
>
AppendIfNonempty
(
aLists
kBulletList
)
;
}
list
=
GetPushedFloats
(
)
;
if
(
list
)
{
list
-
>
AppendIfNonempty
(
aLists
kPushedFloatsList
)
;
}
}
bool
nsBlockFrame
:
:
IsFloatContainingBlock
(
)
const
{
return
true
;
}
static
void
ReparentFrame
(
nsIFrame
*
aFrame
nsContainerFrame
*
aOldParent
nsContainerFrame
*
aNewParent
)
{
NS_ASSERTION
(
aOldParent
=
=
aFrame
-
>
GetParent
(
)
"
Parent
not
consistent
with
expectations
"
)
;
aFrame
-
>
SetParent
(
aNewParent
)
;
nsContainerFrame
:
:
ReparentFrameView
(
aFrame
aOldParent
aNewParent
)
;
}
static
void
ReparentFrames
(
nsFrameList
&
aFrameList
nsContainerFrame
*
aOldParent
nsContainerFrame
*
aNewParent
)
{
for
(
nsFrameList
:
:
Enumerator
e
(
aFrameList
)
;
!
e
.
AtEnd
(
)
;
e
.
Next
(
)
)
{
ReparentFrame
(
e
.
get
(
)
aOldParent
aNewParent
)
;
}
}
static
bool
RemoveFirstLine
(
nsLineList
&
aFromLines
nsFrameList
&
aFromFrames
nsLineBox
*
*
aOutLine
nsFrameList
*
aOutFrames
)
{
nsLineList_iterator
removedLine
=
aFromLines
.
begin
(
)
;
*
aOutLine
=
removedLine
;
nsLineList_iterator
next
=
aFromLines
.
erase
(
removedLine
)
;
bool
isLastLine
=
next
=
=
aFromLines
.
end
(
)
;
nsIFrame
*
lastFrame
=
isLastLine
?
aFromFrames
.
LastChild
(
)
:
next
-
>
mFirstChild
-
>
GetPrevSibling
(
)
;
nsFrameList
:
:
FrameLinkEnumerator
linkToBreak
(
aFromFrames
lastFrame
)
;
*
aOutFrames
=
aFromFrames
.
ExtractHead
(
linkToBreak
)
;
return
isLastLine
;
}
void
nsBlockFrame
:
:
MarkIntrinsicISizesDirty
(
)
{
nsBlockFrame
*
dirtyBlock
=
static_cast
<
nsBlockFrame
*
>
(
FirstContinuation
(
)
)
;
dirtyBlock
-
>
mMinWidth
=
NS_INTRINSIC_WIDTH_UNKNOWN
;
dirtyBlock
-
>
mPrefWidth
=
NS_INTRINSIC_WIDTH_UNKNOWN
;
if
(
!
(
GetStateBits
(
)
&
NS_BLOCK_NEEDS_BIDI_RESOLUTION
)
)
{
for
(
nsIFrame
*
frame
=
dirtyBlock
;
frame
;
frame
=
frame
-
>
GetNextContinuation
(
)
)
{
frame
-
>
AddStateBits
(
NS_BLOCK_NEEDS_BIDI_RESOLUTION
)
;
}
}
nsContainerFrame
:
:
MarkIntrinsicISizesDirty
(
)
;
}
void
nsBlockFrame
:
:
CheckIntrinsicCacheAgainstShrinkWrapState
(
)
{
nsPresContext
*
presContext
=
PresContext
(
)
;
if
(
!
nsLayoutUtils
:
:
FontSizeInflationEnabled
(
presContext
)
)
{
return
;
}
bool
inflationEnabled
=
!
presContext
-
>
mInflationDisabledForShrinkWrap
;
if
(
inflationEnabled
!
=
!
!
(
GetStateBits
(
)
&
NS_BLOCK_FRAME_INTRINSICS_INFLATED
)
)
{
mMinWidth
=
NS_INTRINSIC_WIDTH_UNKNOWN
;
mPrefWidth
=
NS_INTRINSIC_WIDTH_UNKNOWN
;
if
(
inflationEnabled
)
{
AddStateBits
(
NS_BLOCK_FRAME_INTRINSICS_INFLATED
)
;
}
else
{
RemoveStateBits
(
NS_BLOCK_FRAME_INTRINSICS_INFLATED
)
;
}
}
}
nscoord
nsBlockFrame
:
:
GetMinISize
(
gfxContext
*
aRenderingContext
)
{
nsIFrame
*
firstInFlow
=
FirstContinuation
(
)
;
if
(
firstInFlow
!
=
this
)
return
firstInFlow
-
>
GetMinISize
(
aRenderingContext
)
;
DISPLAY_MIN_WIDTH
(
this
mMinWidth
)
;
CheckIntrinsicCacheAgainstShrinkWrapState
(
)
;
if
(
mMinWidth
!
=
NS_INTRINSIC_WIDTH_UNKNOWN
)
return
mMinWidth
;
#
ifdef
DEBUG
if
(
gNoisyIntrinsic
)
{
IndentBy
(
stdout
gNoiseIndent
)
;
ListTag
(
stdout
)
;
printf
(
"
:
GetMinISize
\
n
"
)
;
}
AutoNoisyIndenter
indenter
(
gNoisyIntrinsic
)
;
#
endif
for
(
nsBlockFrame
*
curFrame
=
this
;
curFrame
;
curFrame
=
static_cast
<
nsBlockFrame
*
>
(
curFrame
-
>
GetNextContinuation
(
)
)
)
{
curFrame
-
>
LazyMarkLinesDirty
(
)
;
}
if
(
RenumberList
(
)
)
{
AddStateBits
(
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
}
if
(
GetStateBits
(
)
&
NS_BLOCK_NEEDS_BIDI_RESOLUTION
)
ResolveBidi
(
)
;
InlineMinISizeData
data
;
for
(
nsBlockFrame
*
curFrame
=
this
;
curFrame
;
curFrame
=
static_cast
<
nsBlockFrame
*
>
(
curFrame
-
>
GetNextContinuation
(
)
)
)
{
for
(
LineIterator
line
=
curFrame
-
>
LinesBegin
(
)
line_end
=
curFrame
-
>
LinesEnd
(
)
;
line
!
=
line_end
;
+
+
line
)
{
#
ifdef
DEBUG
if
(
gNoisyIntrinsic
)
{
IndentBy
(
stdout
gNoiseIndent
)
;
printf
(
"
line
(
%
s
%
s
)
\
n
"
line
-
>
IsBlock
(
)
?
"
block
"
:
"
inline
"
line
-
>
IsEmpty
(
)
?
"
empty
"
:
"
"
)
;
}
AutoNoisyIndenter
lineindent
(
gNoisyIntrinsic
)
;
#
endif
if
(
line
-
>
IsBlock
(
)
)
{
data
.
ForceBreak
(
)
;
data
.
mCurrentLine
=
nsLayoutUtils
:
:
IntrinsicForContainer
(
aRenderingContext
line
-
>
mFirstChild
nsLayoutUtils
:
:
MIN_ISIZE
)
;
data
.
ForceBreak
(
)
;
}
else
{
if
(
!
curFrame
-
>
GetPrevContinuation
(
)
&
&
line
=
=
curFrame
-
>
LinesBegin
(
)
)
{
const
nsStyleCoord
&
indent
=
StyleText
(
)
-
>
mTextIndent
;
if
(
indent
.
ConvertsToLength
(
)
)
data
.
mCurrentLine
+
=
nsRuleNode
:
:
ComputeCoordPercentCalc
(
indent
0
)
;
}
data
.
mLine
=
&
line
;
data
.
SetLineContainer
(
curFrame
)
;
nsIFrame
*
kid
=
line
-
>
mFirstChild
;
for
(
int32_t
i
=
0
i_end
=
line
-
>
GetChildCount
(
)
;
i
!
=
i_end
;
+
+
i
kid
=
kid
-
>
GetNextSibling
(
)
)
{
kid
-
>
AddInlineMinISize
(
aRenderingContext
&
data
)
;
}
}
#
ifdef
DEBUG
if
(
gNoisyIntrinsic
)
{
IndentBy
(
stdout
gNoiseIndent
)
;
printf
(
"
min
:
[
prevLines
=
%
d
currentLine
=
%
d
]
\
n
"
data
.
mPrevLines
data
.
mCurrentLine
)
;
}
#
endif
}
}
data
.
ForceBreak
(
)
;
mMinWidth
=
data
.
mPrevLines
;
return
mMinWidth
;
}
nscoord
nsBlockFrame
:
:
GetPrefISize
(
gfxContext
*
aRenderingContext
)
{
nsIFrame
*
firstInFlow
=
FirstContinuation
(
)
;
if
(
firstInFlow
!
=
this
)
return
firstInFlow
-
>
GetPrefISize
(
aRenderingContext
)
;
DISPLAY_PREF_WIDTH
(
this
mPrefWidth
)
;
CheckIntrinsicCacheAgainstShrinkWrapState
(
)
;
if
(
mPrefWidth
!
=
NS_INTRINSIC_WIDTH_UNKNOWN
)
return
mPrefWidth
;
#
ifdef
DEBUG
if
(
gNoisyIntrinsic
)
{
IndentBy
(
stdout
gNoiseIndent
)
;
ListTag
(
stdout
)
;
printf
(
"
:
GetPrefISize
\
n
"
)
;
}
AutoNoisyIndenter
indenter
(
gNoisyIntrinsic
)
;
#
endif
for
(
nsBlockFrame
*
curFrame
=
this
;
curFrame
;
curFrame
=
static_cast
<
nsBlockFrame
*
>
(
curFrame
-
>
GetNextContinuation
(
)
)
)
{
curFrame
-
>
LazyMarkLinesDirty
(
)
;
}
if
(
RenumberList
(
)
)
{
AddStateBits
(
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
}
if
(
GetStateBits
(
)
&
NS_BLOCK_NEEDS_BIDI_RESOLUTION
)
ResolveBidi
(
)
;
InlinePrefISizeData
data
;
for
(
nsBlockFrame
*
curFrame
=
this
;
curFrame
;
curFrame
=
static_cast
<
nsBlockFrame
*
>
(
curFrame
-
>
GetNextContinuation
(
)
)
)
{
for
(
LineIterator
line
=
curFrame
-
>
LinesBegin
(
)
line_end
=
curFrame
-
>
LinesEnd
(
)
;
line
!
=
line_end
;
+
+
line
)
{
#
ifdef
DEBUG
if
(
gNoisyIntrinsic
)
{
IndentBy
(
stdout
gNoiseIndent
)
;
printf
(
"
line
(
%
s
%
s
)
\
n
"
line
-
>
IsBlock
(
)
?
"
block
"
:
"
inline
"
line
-
>
IsEmpty
(
)
?
"
empty
"
:
"
"
)
;
}
AutoNoisyIndenter
lineindent
(
gNoisyIntrinsic
)
;
#
endif
if
(
line
-
>
IsBlock
(
)
)
{
StyleClear
breakType
;
if
(
!
data
.
mLineIsEmpty
|
|
BlockCanIntersectFloats
(
line
-
>
mFirstChild
)
)
{
breakType
=
StyleClear
:
:
Both
;
}
else
{
breakType
=
line
-
>
mFirstChild
-
>
StyleDisplay
(
)
-
>
PhysicalBreakType
(
data
.
mLineContainerWM
)
;
}
data
.
ForceBreak
(
breakType
)
;
data
.
mCurrentLine
=
nsLayoutUtils
:
:
IntrinsicForContainer
(
aRenderingContext
line
-
>
mFirstChild
nsLayoutUtils
:
:
PREF_ISIZE
)
;
data
.
ForceBreak
(
)
;
}
else
{
if
(
!
curFrame
-
>
GetPrevContinuation
(
)
&
&
line
=
=
curFrame
-
>
LinesBegin
(
)
)
{
const
nsStyleCoord
&
indent
=
StyleText
(
)
-
>
mTextIndent
;
if
(
indent
.
ConvertsToLength
(
)
)
{
nscoord
length
=
indent
.
ToLength
(
)
;
if
(
length
!
=
0
)
{
data
.
mCurrentLine
+
=
length
;
data
.
mLineIsEmpty
=
false
;
}
}
}
data
.
mLine
=
&
line
;
data
.
SetLineContainer
(
curFrame
)
;
nsIFrame
*
kid
=
line
-
>
mFirstChild
;
for
(
int32_t
i
=
0
i_end
=
line
-
>
GetChildCount
(
)
;
i
!
=
i_end
;
+
+
i
kid
=
kid
-
>
GetNextSibling
(
)
)
{
kid
-
>
AddInlinePrefISize
(
aRenderingContext
&
data
)
;
}
}
#
ifdef
DEBUG
if
(
gNoisyIntrinsic
)
{
IndentBy
(
stdout
gNoiseIndent
)
;
printf
(
"
pref
:
[
prevLines
=
%
d
currentLine
=
%
d
]
\
n
"
data
.
mPrevLines
data
.
mCurrentLine
)
;
}
#
endif
}
}
data
.
ForceBreak
(
)
;
mPrefWidth
=
data
.
mPrevLines
;
return
mPrefWidth
;
}
nsRect
nsBlockFrame
:
:
ComputeTightBounds
(
DrawTarget
*
aDrawTarget
)
const
{
if
(
StyleContext
(
)
-
>
HasTextDecorationLines
(
)
)
{
return
GetVisualOverflowRect
(
)
;
}
return
ComputeSimpleTightBounds
(
aDrawTarget
)
;
}
nsresult
nsBlockFrame
:
:
GetPrefWidthTightBounds
(
gfxContext
*
aRenderingContext
nscoord
*
aX
nscoord
*
aXMost
)
{
nsIFrame
*
firstInFlow
=
FirstContinuation
(
)
;
if
(
firstInFlow
!
=
this
)
{
return
firstInFlow
-
>
GetPrefWidthTightBounds
(
aRenderingContext
aX
aXMost
)
;
}
*
aX
=
0
;
*
aXMost
=
0
;
nsresult
rv
;
InlinePrefISizeData
data
;
for
(
nsBlockFrame
*
curFrame
=
this
;
curFrame
;
curFrame
=
static_cast
<
nsBlockFrame
*
>
(
curFrame
-
>
GetNextContinuation
(
)
)
)
{
for
(
LineIterator
line
=
curFrame
-
>
LinesBegin
(
)
line_end
=
curFrame
-
>
LinesEnd
(
)
;
line
!
=
line_end
;
+
+
line
)
{
nscoord
childX
childXMost
;
if
(
line
-
>
IsBlock
(
)
)
{
data
.
ForceBreak
(
)
;
rv
=
line
-
>
mFirstChild
-
>
GetPrefWidthTightBounds
(
aRenderingContext
&
childX
&
childXMost
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
*
aX
=
std
:
:
min
(
*
aX
childX
)
;
*
aXMost
=
std
:
:
max
(
*
aXMost
childXMost
)
;
}
else
{
if
(
!
curFrame
-
>
GetPrevContinuation
(
)
&
&
line
=
=
curFrame
-
>
LinesBegin
(
)
)
{
const
nsStyleCoord
&
indent
=
StyleText
(
)
-
>
mTextIndent
;
if
(
indent
.
ConvertsToLength
(
)
)
{
data
.
mCurrentLine
+
=
nsRuleNode
:
:
ComputeCoordPercentCalc
(
indent
0
)
;
}
}
data
.
mLine
=
&
line
;
data
.
SetLineContainer
(
curFrame
)
;
nsIFrame
*
kid
=
line
-
>
mFirstChild
;
for
(
int32_t
i
=
0
i_end
=
line
-
>
GetChildCount
(
)
;
i
!
=
i_end
;
+
+
i
kid
=
kid
-
>
GetNextSibling
(
)
)
{
rv
=
kid
-
>
GetPrefWidthTightBounds
(
aRenderingContext
&
childX
&
childXMost
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
*
aX
=
std
:
:
min
(
*
aX
data
.
mCurrentLine
+
childX
)
;
*
aXMost
=
std
:
:
max
(
*
aXMost
data
.
mCurrentLine
+
childXMost
)
;
kid
-
>
AddInlinePrefISize
(
aRenderingContext
&
data
)
;
}
}
}
}
data
.
ForceBreak
(
)
;
return
NS_OK
;
}
static
bool
AvailableSpaceShrunk
(
WritingMode
aWM
const
LogicalRect
&
aOldAvailableSpace
const
LogicalRect
&
aNewAvailableSpace
bool
aCanGrow
)
{
if
(
aNewAvailableSpace
.
ISize
(
aWM
)
=
=
0
)
{
return
aOldAvailableSpace
.
ISize
(
aWM
)
!
=
0
;
}
if
(
aCanGrow
)
{
NS_ASSERTION
(
aNewAvailableSpace
.
IStart
(
aWM
)
<
=
aOldAvailableSpace
.
IStart
(
aWM
)
|
|
aNewAvailableSpace
.
IEnd
(
aWM
)
<
=
aOldAvailableSpace
.
IEnd
(
aWM
)
"
available
space
should
not
shrink
on
the
start
side
and
"
"
grow
on
the
end
side
"
)
;
NS_ASSERTION
(
aNewAvailableSpace
.
IStart
(
aWM
)
>
=
aOldAvailableSpace
.
IStart
(
aWM
)
|
|
aNewAvailableSpace
.
IEnd
(
aWM
)
>
=
aOldAvailableSpace
.
IEnd
(
aWM
)
"
available
space
should
not
grow
on
the
start
side
and
"
"
shrink
on
the
end
side
"
)
;
}
else
{
NS_ASSERTION
(
aOldAvailableSpace
.
IStart
(
aWM
)
<
=
aNewAvailableSpace
.
IStart
(
aWM
)
&
&
aOldAvailableSpace
.
IEnd
(
aWM
)
>
=
aNewAvailableSpace
.
IEnd
(
aWM
)
"
available
space
should
never
grow
"
)
;
}
return
aNewAvailableSpace
.
IStart
(
aWM
)
>
aOldAvailableSpace
.
IStart
(
aWM
)
|
|
aNewAvailableSpace
.
IEnd
(
aWM
)
<
aOldAvailableSpace
.
IEnd
(
aWM
)
;
}
static
LogicalSize
CalculateContainingBlockSizeForAbsolutes
(
WritingMode
aWM
const
ReflowInput
&
aReflowInput
LogicalSize
aFrameSize
)
{
nsIFrame
*
frame
=
aReflowInput
.
mFrame
;
LogicalSize
cbSize
(
aFrameSize
)
;
const
LogicalMargin
&
border
=
LogicalMargin
(
aWM
aReflowInput
.
ComputedPhysicalBorderPadding
(
)
-
aReflowInput
.
ComputedPhysicalPadding
(
)
)
;
cbSize
.
ISize
(
aWM
)
-
=
border
.
IStartEnd
(
aWM
)
;
cbSize
.
BSize
(
aWM
)
-
=
border
.
BStartEnd
(
aWM
)
;
if
(
frame
-
>
GetParent
(
)
-
>
GetContent
(
)
=
=
frame
-
>
GetContent
(
)
&
&
!
frame
-
>
GetParent
(
)
-
>
IsCanvasFrame
(
)
)
{
const
ReflowInput
*
aLastRI
=
&
aReflowInput
;
const
ReflowInput
*
lastButOneRI
=
&
aReflowInput
;
while
(
aLastRI
-
>
mParentReflowInput
&
&
aLastRI
-
>
mParentReflowInput
-
>
mFrame
-
>
GetContent
(
)
=
=
frame
-
>
GetContent
(
)
&
&
!
aLastRI
-
>
mParentReflowInput
-
>
mFrame
-
>
IsFieldSetFrame
(
)
)
{
lastButOneRI
=
aLastRI
;
aLastRI
=
aLastRI
-
>
mParentReflowInput
;
}
if
(
aLastRI
!
=
&
aReflowInput
)
{
nsIScrollableFrame
*
scrollFrame
=
do_QueryFrame
(
aLastRI
-
>
mFrame
)
;
nsMargin
scrollbars
(
0
0
0
0
)
;
if
(
scrollFrame
)
{
scrollbars
=
scrollFrame
-
>
GetDesiredScrollbarSizes
(
aLastRI
-
>
mFrame
-
>
PresContext
(
)
aLastRI
-
>
mRenderingContext
)
;
if
(
!
lastButOneRI
-
>
mFlags
.
mAssumingHScrollbar
)
{
scrollbars
.
top
=
scrollbars
.
bottom
=
0
;
}
if
(
!
lastButOneRI
-
>
mFlags
.
mAssumingVScrollbar
)
{
scrollbars
.
left
=
scrollbars
.
right
=
0
;
}
}
WritingMode
lastWM
=
aLastRI
-
>
GetWritingMode
(
)
;
LogicalSize
lastRISize
=
LogicalSize
(
lastWM
aLastRI
-
>
ComputedISize
(
)
aLastRI
-
>
ComputedBSize
(
)
)
.
ConvertTo
(
aWM
lastWM
)
;
LogicalMargin
lastRIPadding
=
aLastRI
-
>
ComputedLogicalPadding
(
)
.
ConvertTo
(
aWM
lastWM
)
;
LogicalMargin
logicalScrollbars
(
aWM
scrollbars
)
;
if
(
lastRISize
.
ISize
(
aWM
)
!
=
NS_UNCONSTRAINEDSIZE
)
{
cbSize
.
ISize
(
aWM
)
=
std
:
:
max
(
0
lastRISize
.
ISize
(
aWM
)
+
lastRIPadding
.
IStartEnd
(
aWM
)
-
logicalScrollbars
.
IStartEnd
(
aWM
)
)
;
}
if
(
lastRISize
.
BSize
(
aWM
)
!
=
NS_UNCONSTRAINEDSIZE
)
{
cbSize
.
BSize
(
aWM
)
=
std
:
:
max
(
0
lastRISize
.
BSize
(
aWM
)
+
lastRIPadding
.
BStartEnd
(
aWM
)
-
logicalScrollbars
.
BStartEnd
(
aWM
)
)
;
}
}
}
return
cbSize
;
}
void
nsBlockFrame
:
:
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aMetrics
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
{
MarkInReflow
(
)
;
DO_GLOBAL_REFLOW_COUNT
(
"
nsBlockFrame
"
)
;
DISPLAY_REFLOW
(
aPresContext
this
aReflowInput
aMetrics
aStatus
)
;
#
ifdef
DEBUG
if
(
gNoisyReflow
)
{
IndentBy
(
stdout
gNoiseIndent
)
;
ListTag
(
stdout
)
;
printf
(
"
:
begin
reflow
availSize
=
%
d
%
d
computedSize
=
%
d
%
d
\
n
"
aReflowInput
.
AvailableISize
(
)
aReflowInput
.
AvailableBSize
(
)
aReflowInput
.
ComputedISize
(
)
aReflowInput
.
ComputedBSize
(
)
)
;
}
AutoNoisyIndenter
indent
(
gNoisy
)
;
PRTime
start
=
0
;
int32_t
ctc
=
0
;
if
(
gLameReflowMetrics
)
{
start
=
PR_Now
(
)
;
ctc
=
nsLineBox
:
:
GetCtorCount
(
)
;
}
#
endif
const
ReflowInput
*
reflowInput
=
&
aReflowInput
;
WritingMode
wm
=
aReflowInput
.
GetWritingMode
(
)
;
nscoord
consumedBSize
=
ConsumedBSize
(
wm
)
;
nscoord
effectiveComputedBSize
=
GetEffectiveComputedBSize
(
aReflowInput
consumedBSize
)
;
Maybe
<
ReflowInput
>
mutableReflowInput
;
if
(
aReflowInput
.
AvailableBSize
(
)
!
=
NS_UNCONSTRAINEDSIZE
&
&
aReflowInput
.
ComputedBSize
(
)
!
=
NS_AUTOHEIGHT
&
&
ShouldApplyOverflowClipping
(
this
aReflowInput
.
mStyleDisplay
)
)
{
LogicalMargin
blockDirExtras
=
aReflowInput
.
ComputedLogicalBorderPadding
(
)
;
if
(
GetLogicalSkipSides
(
)
.
BStart
(
)
)
{
blockDirExtras
.
BStart
(
wm
)
=
0
;
}
else
{
blockDirExtras
.
BStart
(
wm
)
+
=
aReflowInput
.
ComputedLogicalMargin
(
)
.
BStart
(
wm
)
;
}
if
(
effectiveComputedBSize
+
blockDirExtras
.
BStartEnd
(
wm
)
<
=
aReflowInput
.
AvailableBSize
(
)
)
{
mutableReflowInput
.
emplace
(
aReflowInput
)
;
mutableReflowInput
-
>
AvailableBSize
(
)
=
NS_UNCONSTRAINEDSIZE
;
reflowInput
=
mutableReflowInput
.
ptr
(
)
;
}
}
nsSize
oldSize
=
GetSize
(
)
;
nsAutoFloatManager
autoFloatManager
(
const_cast
<
ReflowInput
&
>
(
*
reflowInput
)
)
;
bool
needFloatManager
=
nsBlockFrame
:
:
BlockNeedsFloatManager
(
this
)
;
if
(
needFloatManager
)
autoFloatManager
.
CreateFloatManager
(
aPresContext
)
;
ClearLineCursor
(
)
;
if
(
IsFrameTreeTooDeep
(
*
reflowInput
aMetrics
aStatus
)
)
{
return
;
}
#
ifdef
DEBUG
nsLayoutUtils
:
:
AssertNoDuplicateContinuations
(
this
mFloats
)
;
#
endif
DrainOverflowLines
(
)
;
bool
blockStartMarginRoot
blockEndMarginRoot
;
IsMarginRoot
(
&
blockStartMarginRoot
&
blockEndMarginRoot
)
;
BlockReflowInput
state
(
*
reflowInput
aPresContext
this
blockStartMarginRoot
blockEndMarginRoot
needFloatManager
consumedBSize
)
;
if
(
GetStateBits
(
)
&
NS_BLOCK_NEEDS_BIDI_RESOLUTION
)
static_cast
<
nsBlockFrame
*
>
(
FirstContinuation
(
)
)
-
>
ResolveBidi
(
)
;
if
(
RenumberList
(
)
)
{
AddStateBits
(
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
}
nsOverflowAreas
ocBounds
;
nsReflowStatus
ocStatus
;
if
(
GetPrevInFlow
(
)
)
{
ReflowOverflowContainerChildren
(
aPresContext
*
reflowInput
ocBounds
0
ocStatus
)
;
}
nsOverflowContinuationTracker
tracker
(
this
false
)
;
state
.
mOverflowTracker
=
&
tracker
;
DrainPushedFloats
(
)
;
nsOverflowAreas
fcBounds
;
nsReflowStatus
fcStatus
;
ReflowPushedFloats
(
state
fcBounds
fcStatus
)
;
if
(
!
(
GetStateBits
(
)
&
NS_FRAME_IS_DIRTY
)
&
&
reflowInput
-
>
IsIResize
(
)
)
{
PrepareResizeReflow
(
state
)
;
}
if
(
!
(
GetStateBits
(
)
&
NS_FRAME_IS_DIRTY
)
&
&
reflowInput
-
>
mCBReflowInput
&
&
reflowInput
-
>
mCBReflowInput
-
>
IsIResize
(
)
&
&
reflowInput
-
>
mStyleText
-
>
mTextIndent
.
HasPercent
(
)
&
&
!
mLines
.
empty
(
)
)
{
mLines
.
front
(
)
-
>
MarkDirty
(
)
;
}
LazyMarkLinesDirty
(
)
;
mState
&
=
~
NS_FRAME_FIRST_REFLOW
;
ReflowDirtyLines
(
state
)
;
if
(
state
.
mReflowStatus
.
IsFullyComplete
(
)
)
{
nsBlockFrame
*
nif
=
static_cast
<
nsBlockFrame
*
>
(
GetNextInFlow
(
)
)
;
while
(
nif
)
{
if
(
nif
-
>
HasPushedFloatsFromPrevContinuation
(
)
)
{
if
(
nif
-
>
GetStateBits
(
)
&
NS_FRAME_IS_OVERFLOW_CONTAINER
)
{
state
.
mReflowStatus
.
SetOverflowIncomplete
(
)
;
}
else
{
state
.
mReflowStatus
.
SetIncomplete
(
)
;
}
break
;
}
nif
=
static_cast
<
nsBlockFrame
*
>
(
nif
-
>
GetNextInFlow
(
)
)
;
}
}
state
.
mReflowStatus
.
MergeCompletionStatusFrom
(
ocStatus
)
;
state
.
mReflowStatus
.
MergeCompletionStatusFrom
(
fcStatus
)
;
if
(
NS_UNCONSTRAINEDSIZE
!
=
reflowInput
-
>
AvailableBSize
(
)
&
&
state
.
mReflowStatus
.
IsComplete
(
)
&
&
state
.
FloatManager
(
)
-
>
ClearContinues
(
FindTrailingClear
(
)
)
)
{
state
.
mReflowStatus
.
SetIncomplete
(
)
;
}
if
(
!
state
.
mReflowStatus
.
IsFullyComplete
(
)
)
{
if
(
HasOverflowLines
(
)
|
|
HasPushedFloats
(
)
)
{
state
.
mReflowStatus
.
SetNextInFlowNeedsReflow
(
)
;
}
#
ifdef
DEBUG_kipp
ListTag
(
stdout
)
;
printf
(
"
:
block
is
not
fully
complete
\
n
"
)
;
#
endif
}
if
(
HasOutsideBullet
(
)
&
&
!
mLines
.
empty
(
)
&
&
(
mLines
.
front
(
)
-
>
IsBlock
(
)
|
|
(
0
=
=
mLines
.
front
(
)
-
>
BSize
(
)
&
&
mLines
.
front
(
)
!
=
mLines
.
back
(
)
&
&
mLines
.
begin
(
)
.
next
(
)
-
>
IsBlock
(
)
)
)
)
{
ReflowOutput
reflowOutput
(
aReflowInput
)
;
nsLayoutUtils
:
:
LinePosition
position
;
WritingMode
wm
=
aReflowInput
.
GetWritingMode
(
)
;
bool
havePosition
=
nsLayoutUtils
:
:
GetFirstLinePosition
(
wm
this
&
position
)
;
nscoord
lineBStart
=
havePosition
?
position
.
mBStart
:
reflowInput
-
>
ComputedLogicalBorderPadding
(
)
.
BStart
(
wm
)
;
nsIFrame
*
bullet
=
GetOutsideBullet
(
)
;
ReflowBullet
(
bullet
state
reflowOutput
lineBStart
)
;
NS_ASSERTION
(
!
BulletIsEmpty
(
)
|
|
reflowOutput
.
BSize
(
wm
)
=
=
0
"
empty
bullet
took
up
space
"
)
;
if
(
havePosition
&
&
!
BulletIsEmpty
(
)
)
{
LogicalRect
bbox
=
bullet
-
>
GetLogicalRect
(
wm
reflowOutput
.
PhysicalSize
(
)
)
;
bbox
.
BStart
(
wm
)
=
position
.
mBaseline
-
reflowOutput
.
BlockStartAscent
(
)
;
bullet
-
>
SetRect
(
wm
bbox
reflowOutput
.
PhysicalSize
(
)
)
;
}
}
CheckFloats
(
state
)
;
nscoord
blockEndEdgeOfChildren
;
ComputeFinalSize
(
*
reflowInput
state
aMetrics
&
blockEndEdgeOfChildren
)
;
if
(
wm
.
IsVerticalRL
(
)
)
{
nsSize
containerSize
=
aMetrics
.
PhysicalSize
(
)
;
nscoord
deltaX
=
containerSize
.
width
-
state
.
ContainerSize
(
)
.
width
;
if
(
deltaX
!
=
0
)
{
for
(
LineIterator
line
=
LinesBegin
(
)
end
=
LinesEnd
(
)
;
line
!
=
end
;
line
+
+
)
{
UpdateLineContainerSize
(
line
containerSize
)
;
}
for
(
nsIFrame
*
f
:
mFloats
)
{
nsPoint
physicalDelta
(
deltaX
0
)
;
f
-
>
MovePositionBy
(
physicalDelta
)
;
}
nsFrameList
*
bulletList
=
GetOutsideBulletList
(
)
;
if
(
bulletList
)
{
nsPoint
physicalDelta
(
deltaX
0
)
;
for
(
nsIFrame
*
f
:
*
bulletList
)
{
f
-
>
MovePositionBy
(
physicalDelta
)
;
}
}
}
}
nsRect
areaBounds
=
nsRect
(
0
0
aMetrics
.
Width
(
)
aMetrics
.
Height
(
)
)
;
ComputeOverflowAreas
(
areaBounds
reflowInput
-
>
mStyleDisplay
blockEndEdgeOfChildren
aMetrics
.
mOverflowAreas
)
;
aMetrics
.
mOverflowAreas
.
UnionWith
(
ocBounds
)
;
aMetrics
.
mOverflowAreas
.
UnionWith
(
fcBounds
)
;
WritingMode
parentWM
=
aMetrics
.
GetWritingMode
(
)
;
if
(
HasAbsolutelyPositionedChildren
(
)
)
{
nsAbsoluteContainingBlock
*
absoluteContainer
=
GetAbsoluteContainingBlock
(
)
;
bool
haveInterrupt
=
aPresContext
-
>
HasPendingInterrupt
(
)
;
if
(
reflowInput
-
>
WillReflowAgainForClearance
(
)
|
|
haveInterrupt
)
{
if
(
haveInterrupt
&
&
(
GetStateBits
(
)
&
NS_FRAME_IS_DIRTY
)
)
{
absoluteContainer
-
>
MarkAllFramesDirty
(
)
;
}
else
{
absoluteContainer
-
>
MarkSizeDependentFramesDirty
(
)
;
}
}
else
{
LogicalSize
containingBlockSize
=
CalculateContainingBlockSizeForAbsolutes
(
parentWM
*
reflowInput
aMetrics
.
Size
(
parentWM
)
)
;
bool
cbWidthChanged
=
aMetrics
.
Width
(
)
!
=
oldSize
.
width
;
bool
isRoot
=
!
GetContent
(
)
-
>
GetParent
(
)
;
bool
cbHeightChanged
=
!
(
isRoot
&
&
NS_UNCONSTRAINEDSIZE
=
=
reflowInput
-
>
ComputedHeight
(
)
)
&
&
aMetrics
.
Height
(
)
!
=
oldSize
.
height
;
nsRect
containingBlock
(
nsPoint
(
0
0
)
containingBlockSize
.
GetPhysicalSize
(
parentWM
)
)
;
AbsPosReflowFlags
flags
=
AbsPosReflowFlags
:
:
eConstrainHeight
;
if
(
cbWidthChanged
)
{
flags
|
=
AbsPosReflowFlags
:
:
eCBWidthChanged
;
}
if
(
cbHeightChanged
)
{
flags
|
=
AbsPosReflowFlags
:
:
eCBHeightChanged
;
}
AutoLineCursorSetup
autoLineCursor
(
this
)
;
absoluteContainer
-
>
Reflow
(
this
aPresContext
*
reflowInput
state
.
mReflowStatus
containingBlock
flags
&
aMetrics
.
mOverflowAreas
)
;
}
}
FinishAndStoreOverflow
(
&
aMetrics
reflowInput
-
>
mStyleDisplay
)
;
aStatus
=
state
.
mReflowStatus
;
#
ifdef
DEBUG
nsLayoutUtils
:
:
AssertNoDuplicateContinuations
(
this
mFloats
)
;
if
(
gNoisyReflow
)
{
IndentBy
(
stdout
gNoiseIndent
)
;
ListTag
(
stdout
)
;
printf
(
"
:
status
=
%
s
metrics
=
%
d
%
d
carriedMargin
=
%
d
"
ToString
(
aStatus
)
.
c_str
(
)
aMetrics
.
ISize
(
parentWM
)
aMetrics
.
BSize
(
parentWM
)
aMetrics
.
mCarriedOutBEndMargin
.
get
(
)
)
;
if
(
HasOverflowAreas
(
)
)
{
printf
(
"
overflow
-
vis
=
{
%
d
%
d
%
d
%
d
}
"
aMetrics
.
VisualOverflow
(
)
.
x
aMetrics
.
VisualOverflow
(
)
.
y
aMetrics
.
VisualOverflow
(
)
.
width
aMetrics
.
VisualOverflow
(
)
.
height
)
;
printf
(
"
overflow
-
scr
=
{
%
d
%
d
%
d
%
d
}
"
aMetrics
.
ScrollableOverflow
(
)
.
x
aMetrics
.
ScrollableOverflow
(
)
.
y
aMetrics
.
ScrollableOverflow
(
)
.
width
aMetrics
.
ScrollableOverflow
(
)
.
height
)
;
}
printf
(
"
\
n
"
)
;
}
if
(
gLameReflowMetrics
)
{
PRTime
end
=
PR_Now
(
)
;
int32_t
ectc
=
nsLineBox
:
:
GetCtorCount
(
)
;
int32_t
numLines
=
mLines
.
size
(
)
;
if
(
!
numLines
)
numLines
=
1
;
PRTime
delta
perLineDelta
lines
;
lines
=
int64_t
(
numLines
)
;
delta
=
end
-
start
;
perLineDelta
=
delta
/
lines
;
ListTag
(
stdout
)
;
char
buf
[
400
]
;
SprintfLiteral
(
buf
"
:
%
"
PRId64
"
elapsed
(
%
"
PRId64
"
per
line
)
(
%
d
lines
;
%
d
new
lines
)
"
delta
perLineDelta
numLines
ectc
-
ctc
)
;
printf
(
"
%
s
\
n
"
buf
)
;
}
#
endif
#
ifdef
EARLY_BETA_OR_EARLIER
static
bool
sIsTelemetryEnabled
;
static
bool
sTelemetryPrefCached
=
false
;
if
(
!
sTelemetryPrefCached
)
{
sTelemetryPrefCached
=
true
;
Preferences
:
:
AddBoolVarCache
(
&
sIsTelemetryEnabled
"
toolkit
.
telemetry
.
enabled
"
)
;
}
if
(
sIsTelemetryEnabled
)
{
auto
IsStyleNormalOrAuto
=
[
]
(
uint16_t
value
)
-
>
bool
{
return
(
(
value
=
=
NS_STYLE_ALIGN_NORMAL
)
|
|
(
value
=
=
NS_STYLE_ALIGN_AUTO
)
)
;
}
;
const
nsStylePosition
*
stylePosition
=
reflowInput
-
>
mStylePosition
;
if
(
!
IsStyleNormalOrAuto
(
stylePosition
-
>
mJustifyContent
)
|
|
!
IsStyleNormalOrAuto
(
stylePosition
-
>
mAlignContent
)
|
|
!
IsStyleNormalOrAuto
(
stylePosition
-
>
ComputedJustifyItems
(
nullptr
)
)
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
BOX_ALIGN_PROPS_IN_BLOCKS_FLAG
true
)
;
}
else
{
for
(
nsBlockFrame
:
:
LineIterator
line
=
LinesBegin
(
)
;
line
!
=
LinesEnd
(
)
;
+
+
line
)
{
if
(
line
-
>
IsBlock
(
)
&
&
!
IsStyleNormalOrAuto
(
line
-
>
mFirstChild
-
>
StylePosition
(
)
-
>
mJustifySelf
)
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
BOX_ALIGN_PROPS_IN_BLOCKS_FLAG
true
)
;
break
;
}
}
}
}
#
endif
NS_FRAME_SET_TRUNCATION
(
aStatus
(
*
reflowInput
)
aMetrics
)
;
}
bool
nsBlockFrame
:
:
CheckForCollapsedBEndMarginFromClearanceLine
(
)
{
LineIterator
begin
=
LinesBegin
(
)
;
LineIterator
line
=
LinesEnd
(
)
;
while
(
true
)
{
if
(
begin
=
=
line
)
{
return
false
;
}
-
-
line
;
if
(
line
-
>
BSize
(
)
!
=
0
|
|
!
line
-
>
CachedIsEmpty
(
)
)
{
return
false
;
}
if
(
line
-
>
HasClearance
(
)
)
{
return
true
;
}
}
}
void
nsBlockFrame
:
:
ComputeFinalSize
(
const
ReflowInput
&
aReflowInput
BlockReflowInput
&
aState
ReflowOutput
&
aMetrics
nscoord
*
aBEndEdgeOfChildren
)
{
WritingMode
wm
=
aState
.
mReflowInput
.
GetWritingMode
(
)
;
const
LogicalMargin
&
borderPadding
=
aState
.
BorderPadding
(
)
;
#
ifdef
NOISY_FINAL_SIZE
ListTag
(
stdout
)
;
printf
(
"
:
mBCoord
=
%
d
mIsBEndMarginRoot
=
%
s
mPrevBEndMargin
=
%
d
bp
=
%
d
%
d
\
n
"
aState
.
mBCoord
aState
.
mFlags
.
mIsBEndMarginRoot
?
"
yes
"
:
"
no
"
aState
.
mPrevBEndMargin
.
get
(
)
borderPadding
.
BStart
(
wm
)
borderPadding
.
BEnd
(
wm
)
)
;
#
endif
LogicalSize
finalSize
(
wm
)
;
finalSize
.
ISize
(
wm
)
=
NSCoordSaturatingAdd
(
NSCoordSaturatingAdd
(
borderPadding
.
IStart
(
wm
)
aReflowInput
.
ComputedISize
(
)
)
borderPadding
.
IEnd
(
wm
)
)
;
nscoord
nonCarriedOutBDirMargin
=
0
;
if
(
!
aState
.
mFlags
.
mIsBEndMarginRoot
)
{
if
(
CheckForCollapsedBEndMarginFromClearanceLine
(
)
)
{
nonCarriedOutBDirMargin
=
aState
.
mPrevBEndMargin
.
get
(
)
;
aState
.
mPrevBEndMargin
.
Zero
(
)
;
}
aMetrics
.
mCarriedOutBEndMargin
=
aState
.
mPrevBEndMargin
;
}
else
{
aMetrics
.
mCarriedOutBEndMargin
.
Zero
(
)
;
}
nscoord
blockEndEdgeOfChildren
=
aState
.
mBCoord
+
nonCarriedOutBDirMargin
;
if
(
aState
.
mFlags
.
mIsBEndMarginRoot
|
|
NS_UNCONSTRAINEDSIZE
!
=
aReflowInput
.
ComputedBSize
(
)
)
{
if
(
blockEndEdgeOfChildren
<
aState
.
mReflowInput
.
AvailableBSize
(
)
)
{
blockEndEdgeOfChildren
=
std
:
:
min
(
blockEndEdgeOfChildren
+
aState
.
mPrevBEndMargin
.
get
(
)
aState
.
mReflowInput
.
AvailableBSize
(
)
)
;
}
}
if
(
aState
.
mFlags
.
mBlockNeedsFloatManager
)
{
nscoord
floatHeight
=
aState
.
ClearFloats
(
blockEndEdgeOfChildren
StyleClear
:
:
Both
nullptr
nsFloatManager
:
:
DONT_CLEAR_PUSHED_FLOATS
)
;
blockEndEdgeOfChildren
=
std
:
:
max
(
blockEndEdgeOfChildren
floatHeight
)
;
}
if
(
NS_UNCONSTRAINEDSIZE
!
=
aReflowInput
.
ComputedBSize
(
)
&
&
(
!
GetParent
(
)
-
>
IsColumnSetFrame
(
)
|
|
aReflowInput
.
mParentReflowInput
-
>
AvailableBSize
(
)
=
=
NS_UNCONSTRAINEDSIZE
)
)
{
ComputeFinalBSize
(
aReflowInput
&
aState
.
mReflowStatus
aState
.
mBCoord
+
nonCarriedOutBDirMargin
borderPadding
finalSize
aState
.
mConsumedBSize
)
;
if
(
!
aState
.
mReflowStatus
.
IsComplete
(
)
)
{
finalSize
.
BSize
(
wm
)
=
std
:
:
max
(
aReflowInput
.
AvailableBSize
(
)
aState
.
mBCoord
+
nonCarriedOutBDirMargin
)
;
nscoord
effectiveComputedBSize
=
GetEffectiveComputedBSize
(
aReflowInput
aState
.
ConsumedBSize
(
)
)
;
finalSize
.
BSize
(
wm
)
=
std
:
:
min
(
finalSize
.
BSize
(
wm
)
borderPadding
.
BStart
(
wm
)
+
effectiveComputedBSize
)
;
}
aMetrics
.
mCarriedOutBEndMargin
.
Zero
(
)
;
}
else
if
(
aState
.
mReflowStatus
.
IsComplete
(
)
)
{
nscoord
contentBSize
=
blockEndEdgeOfChildren
-
borderPadding
.
BStart
(
wm
)
;
nscoord
autoBSize
=
aReflowInput
.
ApplyMinMaxBSize
(
contentBSize
)
;
if
(
autoBSize
!
=
contentBSize
)
{
aMetrics
.
mCarriedOutBEndMargin
.
Zero
(
)
;
}
autoBSize
+
=
borderPadding
.
BStart
(
wm
)
+
borderPadding
.
BEnd
(
wm
)
;
finalSize
.
BSize
(
wm
)
=
autoBSize
;
}
else
{
NS_ASSERTION
(
aReflowInput
.
AvailableBSize
(
)
!
=
NS_UNCONSTRAINEDSIZE
"
Shouldn
'
t
be
incomplete
if
availableBSize
is
UNCONSTRAINED
.
"
)
;
finalSize
.
BSize
(
wm
)
=
std
:
:
max
(
aState
.
mBCoord
aReflowInput
.
AvailableBSize
(
)
)
;
if
(
aReflowInput
.
AvailableBSize
(
)
=
=
NS_UNCONSTRAINEDSIZE
)
{
finalSize
.
BSize
(
wm
)
=
aState
.
mBCoord
;
}
}
if
(
IS_TRUE_OVERFLOW_CONTAINER
(
this
)
)
{
if
(
aState
.
mReflowStatus
.
IsIncomplete
(
)
)
{
NS_ASSERTION
(
finalSize
.
BSize
(
wm
)
=
=
0
"
overflow
containers
must
be
zero
-
block
-
size
"
)
;
aState
.
mReflowStatus
.
SetOverflowIncomplete
(
)
;
}
}
else
if
(
aReflowInput
.
AvailableBSize
(
)
!
=
NS_UNCONSTRAINEDSIZE
&
&
!
aState
.
mReflowStatus
.
IsInlineBreakBefore
(
)
&
&
aState
.
mReflowStatus
.
IsComplete
(
)
)
{
bool
found
;
nscoord
bSize
=
GetProperty
(
FragStretchBSizeProperty
(
)
&
found
)
;
if
(
found
)
{
finalSize
.
BSize
(
wm
)
=
std
:
:
max
(
bSize
finalSize
.
BSize
(
wm
)
)
;
}
}
if
(
MOZ_UNLIKELY
(
aReflowInput
.
mFlags
.
mBClampMarginBoxMinSize
)
&
&
aState
.
mReflowStatus
.
IsComplete
(
)
)
{
bool
found
;
nscoord
cbSize
=
GetProperty
(
BClampMarginBoxMinSizeProperty
(
)
&
found
)
;
if
(
found
)
{
auto
marginBoxBSize
=
finalSize
.
BSize
(
wm
)
+
aReflowInput
.
ComputedLogicalMargin
(
)
.
BStartEnd
(
wm
)
;
auto
overflow
=
marginBoxBSize
-
cbSize
;
if
(
overflow
>
0
)
{
auto
contentBSize
=
finalSize
.
BSize
(
wm
)
-
borderPadding
.
BStartEnd
(
wm
)
;
auto
newContentBSize
=
std
:
:
max
(
nscoord
(
0
)
contentBSize
-
overflow
)
;
finalSize
.
BSize
(
wm
)
-
=
contentBSize
-
newContentBSize
;
}
}
}
finalSize
.
BSize
(
wm
)
=
std
:
:
max
(
0
finalSize
.
BSize
(
wm
)
)
;
*
aBEndEdgeOfChildren
=
blockEndEdgeOfChildren
;
if
(
blockEndEdgeOfChildren
!
=
finalSize
.
BSize
(
wm
)
-
borderPadding
.
BEnd
(
wm
)
)
{
SetProperty
(
BlockEndEdgeOfChildrenProperty
(
)
blockEndEdgeOfChildren
)
;
}
else
{
DeleteProperty
(
BlockEndEdgeOfChildrenProperty
(
)
)
;
}
aMetrics
.
SetSize
(
wm
finalSize
)
;
#
ifdef
DEBUG_blocks
if
(
(
CRAZY_SIZE
(
aMetrics
.
Width
(
)
)
|
|
CRAZY_SIZE
(
aMetrics
.
Height
(
)
)
)
&
&
!
GetParent
(
)
-
>
IsCrazySizeAssertSuppressed
(
)
)
{
ListTag
(
stdout
)
;
printf
(
"
:
WARNING
:
desired
:
%
d
%
d
\
n
"
aMetrics
.
Width
(
)
aMetrics
.
Height
(
)
)
;
}
#
endif
}
static
void
ConsiderBlockEndEdgeOfChildren
(
const
WritingMode
aWritingMode
nscoord
aBEndEdgeOfChildren
nsOverflowAreas
&
aOverflowAreas
)
{
if
(
aWritingMode
.
IsVertical
(
)
)
{
if
(
aWritingMode
.
IsVerticalLR
(
)
)
{
NS_FOR_FRAME_OVERFLOW_TYPES
(
otype
)
{
nsRect
&
o
=
aOverflowAreas
.
Overflow
(
otype
)
;
o
.
width
=
std
:
:
max
(
o
.
XMost
(
)
aBEndEdgeOfChildren
)
-
o
.
x
;
}
}
else
{
NS_FOR_FRAME_OVERFLOW_TYPES
(
otype
)
{
nsRect
&
o
=
aOverflowAreas
.
Overflow
(
otype
)
;
nscoord
xmost
=
o
.
XMost
(
)
;
o
.
x
=
std
:
:
min
(
o
.
x
xmost
-
aBEndEdgeOfChildren
)
;
o
.
width
=
xmost
-
o
.
x
;
}
}
}
else
{
NS_FOR_FRAME_OVERFLOW_TYPES
(
otype
)
{
nsRect
&
o
=
aOverflowAreas
.
Overflow
(
otype
)
;
o
.
height
=
std
:
:
max
(
o
.
YMost
(
)
aBEndEdgeOfChildren
)
-
o
.
y
;
}
}
}
void
nsBlockFrame
:
:
ComputeOverflowAreas
(
const
nsRect
&
aBounds
const
nsStyleDisplay
*
aDisplay
nscoord
aBEndEdgeOfChildren
nsOverflowAreas
&
aOverflowAreas
)
{
nsOverflowAreas
areas
(
aBounds
aBounds
)
;
if
(
!
ShouldApplyOverflowClipping
(
this
aDisplay
)
)
{
for
(
LineIterator
line
=
LinesBegin
(
)
line_end
=
LinesEnd
(
)
;
line
!
=
line_end
;
+
+
line
)
{
areas
.
UnionWith
(
line
-
>
GetOverflowAreas
(
)
)
;
}
nsIFrame
*
outsideBullet
=
GetOutsideBullet
(
)
;
if
(
outsideBullet
)
{
areas
.
UnionAllWith
(
outsideBullet
-
>
GetRect
(
)
)
;
}
ConsiderBlockEndEdgeOfChildren
(
GetWritingMode
(
)
aBEndEdgeOfChildren
areas
)
;
}
#
ifdef
NOISY_COMBINED_AREA
ListTag
(
stdout
)
;
const
nsRect
&
vis
=
areas
.
VisualOverflow
(
)
;
printf
(
"
:
VisualOverflowArea
CA
=
%
d
%
d
%
d
%
d
\
n
"
vis
.
x
vis
.
y
vis
.
width
vis
.
height
)
;
const
nsRect
&
scr
=
areas
.
ScrollableOverflow
(
)
;
printf
(
"
:
ScrollableOverflowArea
CA
=
%
d
%
d
%
d
%
d
\
n
"
scr
.
x
scr
.
y
scr
.
width
scr
.
height
)
;
#
endif
aOverflowAreas
=
areas
;
}
void
nsBlockFrame
:
:
UnionChildOverflow
(
nsOverflowAreas
&
aOverflowAreas
)
{
for
(
LineIterator
line
=
LinesBegin
(
)
line_end
=
LinesEnd
(
)
;
line
!
=
line_end
;
+
+
line
)
{
nsRect
bounds
=
line
-
>
GetPhysicalBounds
(
)
;
nsOverflowAreas
lineAreas
(
bounds
bounds
)
;
int32_t
n
=
line
-
>
GetChildCount
(
)
;
for
(
nsIFrame
*
lineFrame
=
line
-
>
mFirstChild
;
n
>
0
;
lineFrame
=
lineFrame
-
>
GetNextSibling
(
)
-
-
n
)
{
ConsiderChildOverflow
(
lineAreas
lineFrame
)
;
}
if
(
line
-
>
HasFloats
(
)
)
{
for
(
nsFloatCache
*
fc
=
line
-
>
GetFirstFloat
(
)
;
fc
;
fc
=
fc
-
>
Next
(
)
)
{
ConsiderChildOverflow
(
lineAreas
fc
-
>
mFloat
)
;
}
}
line
-
>
SetOverflowAreas
(
lineAreas
)
;
aOverflowAreas
.
UnionWith
(
lineAreas
)
;
}
nsLayoutUtils
:
:
UnionChildOverflow
(
this
aOverflowAreas
kPrincipalList
|
kFloatList
)
;
}
bool
nsBlockFrame
:
:
ComputeCustomOverflow
(
nsOverflowAreas
&
aOverflowAreas
)
{
bool
found
;
nscoord
blockEndEdgeOfChildren
=
GetProperty
(
BlockEndEdgeOfChildrenProperty
(
)
&
found
)
;
if
(
found
)
{
ConsiderBlockEndEdgeOfChildren
(
GetWritingMode
(
)
blockEndEdgeOfChildren
aOverflowAreas
)
;
}
ClearLineCursor
(
)
;
return
nsContainerFrame
:
:
ComputeCustomOverflow
(
aOverflowAreas
)
;
}
void
nsBlockFrame
:
:
LazyMarkLinesDirty
(
)
{
if
(
GetStateBits
(
)
&
NS_BLOCK_LOOK_FOR_DIRTY_FRAMES
)
{
for
(
LineIterator
line
=
LinesBegin
(
)
line_end
=
LinesEnd
(
)
;
line
!
=
line_end
;
+
+
line
)
{
int32_t
n
=
line
-
>
GetChildCount
(
)
;
for
(
nsIFrame
*
lineFrame
=
line
-
>
mFirstChild
;
n
>
0
;
lineFrame
=
lineFrame
-
>
GetNextSibling
(
)
-
-
n
)
{
if
(
NS_SUBTREE_DIRTY
(
lineFrame
)
)
{
MarkLineDirty
(
line
&
mLines
)
;
break
;
}
}
}
RemoveStateBits
(
NS_BLOCK_LOOK_FOR_DIRTY_FRAMES
)
;
}
}
void
nsBlockFrame
:
:
MarkLineDirty
(
LineIterator
aLine
const
nsLineList
*
aLineList
)
{
aLine
-
>
MarkDirty
(
)
;
aLine
-
>
SetInvalidateTextRuns
(
true
)
;
#
ifdef
DEBUG
if
(
gNoisyReflow
)
{
IndentBy
(
stdout
gNoiseIndent
)
;
ListTag
(
stdout
)
;
printf
(
"
:
mark
line
%
p
dirty
\
n
"
static_cast
<
void
*
>
(
aLine
.
get
(
)
)
)
;
}
#
endif
if
(
aLine
!
=
aLineList
-
>
front
(
)
&
&
aLine
-
>
IsInline
(
)
&
&
aLine
.
prev
(
)
-
>
IsInline
(
)
)
{
aLine
.
prev
(
)
-
>
MarkDirty
(
)
;
aLine
.
prev
(
)
-
>
SetInvalidateTextRuns
(
true
)
;
#
ifdef
DEBUG
if
(
gNoisyReflow
)
{
IndentBy
(
stdout
gNoiseIndent
)
;
ListTag
(
stdout
)
;
printf
(
"
:
mark
prev
-
line
%
p
dirty
\
n
"
static_cast
<
void
*
>
(
aLine
.
prev
(
)
.
get
(
)
)
)
;
}
#
endif
}
}
static
inline
bool
IsAlignedLeft
(
uint8_t
aAlignment
uint8_t
aDirection
uint8_t
aUnicodeBidi
nsIFrame
*
aFrame
)
{
return
nsSVGUtils
:
:
IsInSVGTextSubtree
(
aFrame
)
|
|
NS_STYLE_TEXT_ALIGN_LEFT
=
=
aAlignment
|
|
(
(
(
NS_STYLE_TEXT_ALIGN_START
=
=
aAlignment
&
&
NS_STYLE_DIRECTION_LTR
=
=
aDirection
)
|
|
(
NS_STYLE_TEXT_ALIGN_END
=
=
aAlignment
&
&
NS_STYLE_DIRECTION_RTL
=
=
aDirection
)
)
&
&
!
(
NS_STYLE_UNICODE_BIDI_PLAINTEXT
&
aUnicodeBidi
)
)
;
}
void
nsBlockFrame
:
:
PrepareResizeReflow
(
BlockReflowInput
&
aState
)
{
bool
tryAndSkipLines
=
!
StylePadding
(
)
-
>
mPadding
.
GetLeft
(
)
.
HasPercent
(
)
;
#
ifdef
DEBUG
if
(
gDisableResizeOpt
)
{
tryAndSkipLines
=
false
;
}
if
(
gNoisyReflow
)
{
if
(
!
tryAndSkipLines
)
{
IndentBy
(
stdout
gNoiseIndent
)
;
ListTag
(
stdout
)
;
printf
(
"
:
marking
all
lines
dirty
:
availISize
=
%
d
\
n
"
aState
.
mReflowInput
.
AvailableISize
(
)
)
;
}
}
#
endif
if
(
tryAndSkipLines
)
{
WritingMode
wm
=
aState
.
mReflowInput
.
GetWritingMode
(
)
;
nscoord
newAvailISize
=
aState
.
mReflowInput
.
ComputedLogicalBorderPadding
(
)
.
IStart
(
wm
)
+
aState
.
mReflowInput
.
ComputedISize
(
)
;
NS_ASSERTION
(
NS_UNCONSTRAINEDSIZE
!
=
aState
.
mReflowInput
.
ComputedLogicalBorderPadding
(
)
.
IStart
(
wm
)
&
&
NS_UNCONSTRAINEDSIZE
!
=
aState
.
mReflowInput
.
ComputedISize
(
)
"
math
on
NS_UNCONSTRAINEDSIZE
"
)
;
#
ifdef
DEBUG
if
(
gNoisyReflow
)
{
IndentBy
(
stdout
gNoiseIndent
)
;
ListTag
(
stdout
)
;
printf
(
"
:
trying
to
avoid
marking
all
lines
dirty
\
n
"
)
;
}
#
endif
for
(
LineIterator
line
=
LinesBegin
(
)
line_end
=
LinesEnd
(
)
;
line
!
=
line_end
;
+
+
line
)
{
bool
isLastLine
=
line
=
=
mLines
.
back
(
)
&
&
!
GetNextInFlow
(
)
;
if
(
line
-
>
IsBlock
(
)
|
|
line
-
>
HasFloats
(
)
|
|
(
!
isLastLine
&
&
!
line
-
>
HasBreakAfter
(
)
)
|
|
(
(
isLastLine
|
|
!
line
-
>
IsLineWrapped
(
)
)
)
|
|
line
-
>
ResizeReflowOptimizationDisabled
(
)
|
|
line
-
>
IsImpactedByFloat
(
)
|
|
(
line
-
>
IEnd
(
)
>
newAvailISize
)
)
{
line
-
>
MarkDirty
(
)
;
}
#
ifdef
REALLY_NOISY_REFLOW
if
(
!
line
-
>
IsBlock
(
)
)
{
printf
(
"
PrepareResizeReflow
thinks
line
%
p
is
%
simpacted
by
floats
\
n
"
line
.
get
(
)
line
-
>
IsImpactedByFloat
(
)
?
"
"
:
"
not
"
)
;
}
#
endif
#
ifdef
DEBUG
if
(
gNoisyReflow
&
&
!
line
-
>
IsDirty
(
)
)
{
IndentBy
(
stdout
gNoiseIndent
+
1
)
;
printf
(
"
skipped
:
line
=
%
p
next
=
%
p
%
s
%
s
%
s
%
s
breakTypeBefore
/
After
=
%
s
/
%
s
xmost
=
%
d
\
n
"
static_cast
<
void
*
>
(
line
.
get
(
)
)
static_cast
<
void
*
>
(
(
line
.
next
(
)
!
=
LinesEnd
(
)
?
line
.
next
(
)
.
get
(
)
:
nullptr
)
)
line
-
>
IsBlock
(
)
?
"
block
"
:
"
inline
"
line
-
>
HasBreakAfter
(
)
?
"
has
-
break
-
after
"
:
"
"
line
-
>
HasFloats
(
)
?
"
has
-
floats
"
:
"
"
line
-
>
IsImpactedByFloat
(
)
?
"
impacted
"
:
"
"
line
-
>
BreakTypeToString
(
line
-
>
GetBreakTypeBefore
(
)
)
line
-
>
BreakTypeToString
(
line
-
>
GetBreakTypeAfter
(
)
)
line
-
>
IEnd
(
)
)
;
}
#
endif
}
}
else
{
for
(
LineIterator
line
=
LinesBegin
(
)
line_end
=
LinesEnd
(
)
;
line
!
=
line_end
;
+
+
line
)
{
line
-
>
MarkDirty
(
)
;
}
}
}
void
nsBlockFrame
:
:
PropagateFloatDamage
(
BlockReflowInput
&
aState
nsLineBox
*
aLine
nscoord
aDeltaBCoord
)
{
nsFloatManager
*
floatManager
=
aState
.
FloatManager
(
)
;
NS_ASSERTION
(
(
aState
.
mReflowInput
.
mParentReflowInput
&
&
aState
.
mReflowInput
.
mParentReflowInput
-
>
mFloatManager
=
=
floatManager
)
|
|
aState
.
mReflowInput
.
mBlockDelta
=
=
0
"
Bad
block
delta
passed
in
"
)
;
if
(
!
floatManager
-
>
HasAnyFloats
(
)
)
return
;
if
(
floatManager
-
>
HasFloatDamage
(
)
)
{
nscoord
lineBCoordBefore
=
aLine
-
>
BStart
(
)
+
aDeltaBCoord
;
nscoord
lineBCoordAfter
=
lineBCoordBefore
+
aLine
-
>
BSize
(
)
;
WritingMode
wm
=
aState
.
mReflowInput
.
GetWritingMode
(
)
;
nsSize
containerSize
=
aState
.
ContainerSize
(
)
;
LogicalRect
overflow
=
aLine
-
>
GetOverflowArea
(
eScrollableOverflow
wm
containerSize
)
;
nscoord
lineBCoordCombinedBefore
=
overflow
.
BStart
(
wm
)
+
aDeltaBCoord
;
nscoord
lineBCoordCombinedAfter
=
lineBCoordCombinedBefore
+
overflow
.
BSize
(
wm
)
;
bool
isDirty
=
floatManager
-
>
IntersectsDamage
(
lineBCoordBefore
lineBCoordAfter
)
|
|
floatManager
-
>
IntersectsDamage
(
lineBCoordCombinedBefore
lineBCoordCombinedAfter
)
;
if
(
isDirty
)
{
aLine
-
>
MarkDirty
(
)
;
return
;
}
}
if
(
aDeltaBCoord
+
aState
.
mReflowInput
.
mBlockDelta
!
=
0
)
{
if
(
aLine
-
>
IsBlock
(
)
)
{
aLine
-
>
MarkDirty
(
)
;
}
else
{
bool
wasImpactedByFloat
=
aLine
-
>
IsImpactedByFloat
(
)
;
nsFlowAreaRect
floatAvailableSpace
=
aState
.
GetFloatAvailableSpaceForBSize
(
aLine
-
>
BStart
(
)
+
aDeltaBCoord
aLine
-
>
BSize
(
)
nullptr
)
;
#
ifdef
REALLY_NOISY_REFLOW
printf
(
"
nsBlockFrame
:
:
PropagateFloatDamage
%
p
was
=
%
d
is
=
%
d
\
n
"
this
wasImpactedByFloat
floatAvailableSpace
.
mHasFloats
)
;
#
endif
if
(
wasImpactedByFloat
|
|
floatAvailableSpace
.
mHasFloats
)
{
aLine
-
>
MarkDirty
(
)
;
}
}
}
}
static
bool
LineHasClear
(
nsLineBox
*
aLine
)
{
return
aLine
-
>
IsBlock
(
)
?
(
aLine
-
>
GetBreakTypeBefore
(
)
!
=
StyleClear
:
:
None
|
|
(
aLine
-
>
mFirstChild
-
>
GetStateBits
(
)
&
NS_BLOCK_HAS_CLEAR_CHILDREN
)
|
|
!
nsBlockFrame
:
:
BlockCanIntersectFloats
(
aLine
-
>
mFirstChild
)
)
:
aLine
-
>
HasFloatBreakAfter
(
)
;
}
void
nsBlockFrame
:
:
ReparentFloats
(
nsIFrame
*
aFirstFrame
nsBlockFrame
*
aOldParent
bool
aReparentSiblings
)
{
nsFrameList
list
;
aOldParent
-
>
CollectFloats
(
aFirstFrame
list
aReparentSiblings
)
;
if
(
list
.
NotEmpty
(
)
)
{
for
(
nsIFrame
*
f
:
list
)
{
MOZ_ASSERT
(
!
(
f
-
>
GetStateBits
(
)
&
NS_FRAME_IS_PUSHED_FLOAT
)
"
CollectFloats
should
'
ve
removed
that
bit
"
)
;
ReparentFrame
(
f
aOldParent
this
)
;
}
mFloats
.
AppendFrames
(
nullptr
list
)
;
}
}
static
void
DumpLine
(
const
BlockReflowInput
&
aState
nsLineBox
*
aLine
nscoord
aDeltaBCoord
int32_t
aDeltaIndent
)
{
#
ifdef
DEBUG
if
(
nsBlockFrame
:
:
gNoisyReflow
)
{
nsRect
ovis
(
aLine
-
>
GetVisualOverflowArea
(
)
)
;
nsRect
oscr
(
aLine
-
>
GetScrollableOverflowArea
(
)
)
;
nsBlockFrame
:
:
IndentBy
(
stdout
nsBlockFrame
:
:
gNoiseIndent
+
aDeltaIndent
)
;
printf
(
"
line
=
%
p
mBCoord
=
%
d
dirty
=
%
s
oldBounds
=
{
%
d
%
d
%
d
%
d
}
oldoverflow
-
vis
=
{
%
d
%
d
%
d
%
d
}
oldoverflow
-
scr
=
{
%
d
%
d
%
d
%
d
}
deltaBCoord
=
%
d
mPrevBEndMargin
=
%
d
childCount
=
%
d
\
n
"
static_cast
<
void
*
>
(
aLine
)
aState
.
mBCoord
aLine
-
>
IsDirty
(
)
?
"
yes
"
:
"
no
"
aLine
-
>
IStart
(
)
aLine
-
>
BStart
(
)
aLine
-
>
ISize
(
)
aLine
-
>
BSize
(
)
ovis
.
x
ovis
.
y
ovis
.
width
ovis
.
height
oscr
.
x
oscr
.
y
oscr
.
width
oscr
.
height
aDeltaBCoord
aState
.
mPrevBEndMargin
.
get
(
)
aLine
-
>
GetChildCount
(
)
)
;
}
#
endif
}
void
nsBlockFrame
:
:
ReflowDirtyLines
(
BlockReflowInput
&
aState
)
{
bool
keepGoing
=
true
;
bool
repositionViews
=
false
;
bool
foundAnyClears
=
aState
.
mFloatBreakType
!
=
StyleClear
:
:
None
;
bool
willReflowAgain
=
false
;
#
ifdef
DEBUG
if
(
gNoisyReflow
)
{
IndentBy
(
stdout
gNoiseIndent
)
;
ListTag
(
stdout
)
;
printf
(
"
:
reflowing
dirty
lines
"
)
;
printf
(
"
computedISize
=
%
d
\
n
"
aState
.
mReflowInput
.
ComputedISize
(
)
)
;
}
AutoNoisyIndenter
indent
(
gNoisyReflow
)
;
#
endif
bool
selfDirty
=
(
GetStateBits
(
)
&
NS_FRAME_IS_DIRTY
)
|
|
(
aState
.
mReflowInput
.
IsBResize
(
)
&
&
(
GetStateBits
(
)
&
NS_FRAME_CONTAINS_RELATIVE_BSIZE
)
)
;
if
(
aState
.
mReflowInput
.
AvailableBSize
(
)
!
=
NS_UNCONSTRAINEDSIZE
&
&
GetNextInFlow
(
)
&
&
aState
.
mReflowInput
.
AvailableBSize
(
)
>
GetLogicalSize
(
)
.
BSize
(
aState
.
mReflowInput
.
GetWritingMode
(
)
)
)
{
LineIterator
lastLine
=
LinesEnd
(
)
;
if
(
lastLine
!
=
LinesBegin
(
)
)
{
-
-
lastLine
;
lastLine
-
>
MarkDirty
(
)
;
}
}
nscoord
deltaBCoord
=
0
;
bool
needToRecoverState
=
false
;
bool
reflowedFloat
=
mFloats
.
NotEmpty
(
)
&
&
(
mFloats
.
FirstChild
(
)
-
>
GetStateBits
(
)
&
NS_FRAME_IS_PUSHED_FLOAT
)
;
bool
lastLineMovedUp
=
false
;
StyleClear
inlineFloatBreakType
=
aState
.
mFloatBreakType
;
LineIterator
line
=
LinesBegin
(
)
line_end
=
LinesEnd
(
)
;
for
(
;
line
!
=
line_end
;
+
+
line
aState
.
AdvanceToNextLine
(
)
)
{
DumpLine
(
aState
line
deltaBCoord
0
)
;
#
ifdef
DEBUG
AutoNoisyIndenter
indent2
(
gNoisyReflow
)
;
#
endif
if
(
selfDirty
)
line
-
>
MarkDirty
(
)
;
if
(
!
line
-
>
IsDirty
(
)
&
&
line
-
>
IsBlock
(
)
&
&
(
line
-
>
mFirstChild
-
>
GetStateBits
(
)
&
NS_BLOCK_HAS_CLEAR_CHILDREN
)
)
{
line
-
>
MarkDirty
(
)
;
}
nsIFrame
*
replacedBlock
=
nullptr
;
if
(
line
-
>
IsBlock
(
)
&
&
!
nsBlockFrame
:
:
BlockCanIntersectFloats
(
line
-
>
mFirstChild
)
)
{
replacedBlock
=
line
-
>
mFirstChild
;
}
if
(
!
line
-
>
IsDirty
(
)
&
&
(
line
-
>
GetBreakTypeBefore
(
)
!
=
StyleClear
:
:
None
|
|
replacedBlock
)
)
{
nscoord
curBCoord
=
aState
.
mBCoord
;
if
(
inlineFloatBreakType
!
=
StyleClear
:
:
None
)
{
curBCoord
=
aState
.
ClearFloats
(
curBCoord
inlineFloatBreakType
)
;
}
nscoord
newBCoord
=
aState
.
ClearFloats
(
curBCoord
line
-
>
GetBreakTypeBefore
(
)
replacedBlock
)
;
if
(
line
-
>
HasClearance
(
)
)
{
if
(
newBCoord
=
=
curBCoord
|
|
newBCoord
!
=
line
-
>
BStart
(
)
+
deltaBCoord
)
{
line
-
>
MarkDirty
(
)
;
}
}
else
{
if
(
curBCoord
!
=
newBCoord
)
{
line
-
>
MarkDirty
(
)
;
}
}
}
if
(
inlineFloatBreakType
!
=
StyleClear
:
:
None
)
{
aState
.
mBCoord
=
aState
.
ClearFloats
(
aState
.
mBCoord
inlineFloatBreakType
)
;
if
(
aState
.
mBCoord
!
=
line
-
>
BStart
(
)
+
deltaBCoord
)
{
line
-
>
MarkDirty
(
)
;
}
inlineFloatBreakType
=
StyleClear
:
:
None
;
}
bool
previousMarginWasDirty
=
line
-
>
IsPreviousMarginDirty
(
)
;
if
(
previousMarginWasDirty
)
{
line
-
>
MarkDirty
(
)
;
line
-
>
ClearPreviousMarginDirty
(
)
;
}
else
if
(
line
-
>
BEnd
(
)
+
deltaBCoord
>
aState
.
mBEndEdge
)
{
line
-
>
MarkDirty
(
)
;
}
if
(
!
line
-
>
IsDirty
(
)
&
&
aState
.
mReflowInput
.
AvailableBSize
(
)
!
=
NS_UNCONSTRAINEDSIZE
&
&
(
deltaBCoord
!
=
0
|
|
aState
.
mReflowInput
.
IsBResize
(
)
|
|
aState
.
mReflowInput
.
mFlags
.
mMustReflowPlaceholders
)
&
&
(
line
-
>
IsBlock
(
)
|
|
line
-
>
HasFloats
(
)
|
|
line
-
>
HadFloatPushed
(
)
)
)
{
line
-
>
MarkDirty
(
)
;
}
if
(
!
line
-
>
IsDirty
(
)
)
{
PropagateFloatDamage
(
aState
line
deltaBCoord
)
;
}
if
(
aState
.
ContainerSize
(
)
!
=
line
-
>
mContainerSize
)
{
line
-
>
mContainerSize
=
aState
.
ContainerSize
(
)
;
bool
isLastLine
=
line
=
=
mLines
.
back
(
)
&
&
!
GetNextInFlow
(
)
&
&
NS_STYLE_TEXT_ALIGN_AUTO
=
=
StyleText
(
)
-
>
mTextAlignLast
;
uint8_t
align
=
isLastLine
?
StyleText
(
)
-
>
mTextAlign
:
StyleText
(
)
-
>
mTextAlignLast
;
if
(
line
-
>
mWritingMode
.
IsVertical
(
)
|
|
!
line
-
>
mWritingMode
.
IsBidiLTR
(
)
|
|
!
IsAlignedLeft
(
align
aState
.
mReflowInput
.
mStyleVisibility
-
>
mDirection
StyleTextReset
(
)
-
>
mUnicodeBidi
this
)
)
{
line
-
>
MarkDirty
(
)
;
}
}
if
(
needToRecoverState
&
&
line
-
>
IsDirty
(
)
)
{
aState
.
ReconstructMarginBefore
(
line
)
;
}
bool
reflowedPrevLine
=
!
needToRecoverState
;
if
(
needToRecoverState
)
{
needToRecoverState
=
false
;
if
(
line
-
>
IsDirty
(
)
)
{
NS_ASSERTION
(
line
-
>
mFirstChild
-
>
GetPrevSibling
(
)
=
=
line
.
prev
(
)
-
>
LastChild
(
)
"
unexpected
line
frames
"
)
;
aState
.
mPrevChild
=
line
-
>
mFirstChild
-
>
GetPrevSibling
(
)
;
}
}
if
(
line
-
>
IsDirty
(
)
&
&
(
line
-
>
HasFloats
(
)
|
|
!
willReflowAgain
)
)
{
lastLineMovedUp
=
true
;
bool
maybeReflowingForFirstTime
=
line
-
>
IStart
(
)
=
=
0
&
&
line
-
>
BStart
(
)
=
=
0
&
&
line
-
>
ISize
(
)
=
=
0
&
&
line
-
>
BSize
(
)
=
=
0
;
nscoord
oldB
=
line
-
>
BStart
(
)
;
nscoord
oldBMost
=
line
-
>
BEnd
(
)
;
NS_ASSERTION
(
!
willReflowAgain
|
|
!
line
-
>
IsBlock
(
)
"
Don
'
t
reflow
blocks
while
willReflowAgain
is
true
reflow
of
block
abs
-
pos
children
depends
on
this
"
)
;
ReflowLine
(
aState
line
&
keepGoing
)
;
if
(
aState
.
mReflowInput
.
WillReflowAgainForClearance
(
)
)
{
line
-
>
MarkDirty
(
)
;
willReflowAgain
=
true
;
}
if
(
line
-
>
HasFloats
(
)
)
{
reflowedFloat
=
true
;
}
if
(
!
keepGoing
)
{
DumpLine
(
aState
line
deltaBCoord
-
1
)
;
if
(
0
=
=
line
-
>
GetChildCount
(
)
)
{
DeleteLine
(
aState
line
line_end
)
;
}
break
;
}
if
(
line
.
next
(
)
!
=
LinesEnd
(
)
)
{
bool
maybeWasEmpty
=
oldB
=
=
line
.
next
(
)
-
>
BStart
(
)
;
bool
isEmpty
=
line
-
>
CachedIsEmpty
(
)
;
if
(
maybeReflowingForFirstTime
|
|
(
isEmpty
|
|
maybeWasEmpty
)
)
{
line
.
next
(
)
-
>
MarkPreviousMarginDirty
(
)
;
}
}
deltaBCoord
=
line
-
>
BEnd
(
)
-
oldBMost
;
aState
.
mPresContext
-
>
CheckForInterrupt
(
this
)
;
}
else
{
aState
.
mOverflowTracker
-
>
Skip
(
line
-
>
mFirstChild
aState
.
mReflowStatus
)
;
lastLineMovedUp
=
deltaBCoord
<
0
;
if
(
deltaBCoord
!
=
0
)
SlideLine
(
aState
line
deltaBCoord
)
;
else
repositionViews
=
true
;
NS_ASSERTION
(
!
line
-
>
IsDirty
(
)
|
|
!
line
-
>
HasFloats
(
)
"
Possibly
stale
float
cache
here
!
"
)
;
if
(
willReflowAgain
&
&
line
-
>
IsBlock
(
)
)
{
}
else
{
aState
.
RecoverStateFrom
(
line
deltaBCoord
)
;
}
if
(
line
-
>
IsBlock
(
)
|
|
!
line
-
>
CachedIsEmpty
(
)
)
{
aState
.
mBCoord
=
line
-
>
BEnd
(
)
;
}
needToRecoverState
=
true
;
if
(
reflowedPrevLine
&
&
!
line
-
>
IsBlock
(
)
&
&
aState
.
mPresContext
-
>
HasPendingInterrupt
(
)
)
{
for
(
nsIFrame
*
inlineKid
=
line
-
>
mFirstChild
;
inlineKid
;
inlineKid
=
inlineKid
-
>
PrincipalChildList
(
)
.
FirstChild
(
)
)
{
inlineKid
-
>
PullOverflowsFromPrevInFlow
(
)
;
}
}
}
if
(
line
-
>
HasFloatBreakAfter
(
)
)
{
inlineFloatBreakType
=
line
-
>
GetBreakTypeAfter
(
)
;
}
if
(
LineHasClear
(
line
.
get
(
)
)
)
{
foundAnyClears
=
true
;
}
DumpLine
(
aState
line
deltaBCoord
-
1
)
;
if
(
aState
.
mPresContext
-
>
HasPendingInterrupt
(
)
)
{
willReflowAgain
=
true
;
MarkLineDirtyForInterrupt
(
line
)
;
}
}
if
(
inlineFloatBreakType
!
=
StyleClear
:
:
None
)
{
aState
.
mBCoord
=
aState
.
ClearFloats
(
aState
.
mBCoord
inlineFloatBreakType
)
;
}
if
(
needToRecoverState
)
{
aState
.
ReconstructMarginBefore
(
line
)
;
NS_ASSERTION
(
line
=
=
line_end
|
|
line
-
>
mFirstChild
-
>
GetPrevSibling
(
)
=
=
line
.
prev
(
)
-
>
LastChild
(
)
"
unexpected
line
frames
"
)
;
aState
.
mPrevChild
=
line
=
=
line_end
?
mFrames
.
LastChild
(
)
:
line
-
>
mFirstChild
-
>
GetPrevSibling
(
)
;
}
if
(
repositionViews
)
nsContainerFrame
:
:
PlaceFrameView
(
this
)
;
bool
heightConstrained
=
aState
.
mReflowInput
.
AvailableBSize
(
)
!
=
NS_UNCONSTRAINEDSIZE
;
bool
skipPull
=
willReflowAgain
&
&
heightConstrained
;
if
(
!
skipPull
&
&
heightConstrained
&
&
aState
.
mNextInFlow
&
&
(
aState
.
mReflowInput
.
mFlags
.
mNextInFlowUntouched
&
&
!
lastLineMovedUp
&
&
!
(
GetStateBits
(
)
&
NS_FRAME_IS_DIRTY
)
&
&
!
reflowedFloat
)
)
{
LineIterator
lineIter
=
this
-
>
LinesEnd
(
)
;
if
(
lineIter
!
=
this
-
>
LinesBegin
(
)
)
{
lineIter
-
-
;
nsBlockInFlowLineIterator
bifLineIter
(
this
lineIter
)
;
if
(
!
bifLineIter
.
Next
(
)
|
|
!
bifLineIter
.
GetLine
(
)
-
>
IsDirty
(
)
)
{
skipPull
=
true
;
}
}
}
if
(
skipPull
&
&
aState
.
mNextInFlow
)
{
NS_ASSERTION
(
heightConstrained
"
Height
should
be
constrained
here
\
n
"
)
;
if
(
IS_TRUE_OVERFLOW_CONTAINER
(
aState
.
mNextInFlow
)
)
aState
.
mReflowStatus
.
SetOverflowIncomplete
(
)
;
else
aState
.
mReflowStatus
.
SetIncomplete
(
)
;
}
if
(
!
skipPull
&
&
aState
.
mNextInFlow
)
{
while
(
keepGoing
&
&
aState
.
mNextInFlow
)
{
nsBlockFrame
*
nextInFlow
=
aState
.
mNextInFlow
;
nsLineBox
*
pulledLine
;
nsFrameList
pulledFrames
;
if
(
!
nextInFlow
-
>
mLines
.
empty
(
)
)
{
RemoveFirstLine
(
nextInFlow
-
>
mLines
nextInFlow
-
>
mFrames
&
pulledLine
&
pulledFrames
)
;
}
else
{
FrameLines
*
overflowLines
=
nextInFlow
-
>
GetOverflowLines
(
)
;
if
(
!
overflowLines
)
{
aState
.
mNextInFlow
=
static_cast
<
nsBlockFrame
*
>
(
nextInFlow
-
>
GetNextInFlow
(
)
)
;
continue
;
}
bool
last
=
RemoveFirstLine
(
overflowLines
-
>
mLines
overflowLines
-
>
mFrames
&
pulledLine
&
pulledFrames
)
;
if
(
last
)
{
nextInFlow
-
>
DestroyOverflowLines
(
)
;
}
}
if
(
pulledFrames
.
IsEmpty
(
)
)
{
NS_ASSERTION
(
pulledLine
-
>
GetChildCount
(
)
=
=
0
&
&
!
pulledLine
-
>
mFirstChild
"
bad
empty
line
"
)
;
nextInFlow
-
>
FreeLineBox
(
pulledLine
)
;
continue
;
}
if
(
pulledLine
=
=
nextInFlow
-
>
GetLineCursor
(
)
)
{
nextInFlow
-
>
ClearLineCursor
(
)
;
}
ReparentFrames
(
pulledFrames
nextInFlow
this
)
;
NS_ASSERTION
(
pulledFrames
.
LastChild
(
)
=
=
pulledLine
-
>
LastChild
(
)
"
Unexpected
last
frame
"
)
;
NS_ASSERTION
(
aState
.
mPrevChild
|
|
mLines
.
empty
(
)
"
should
have
a
prevchild
here
"
)
;
NS_ASSERTION
(
aState
.
mPrevChild
=
=
mFrames
.
LastChild
(
)
"
Incorrect
aState
.
mPrevChild
before
inserting
line
at
end
"
)
;
mFrames
.
AppendFrames
(
nullptr
pulledFrames
)
;
line
=
mLines
.
before_insert
(
LinesEnd
(
)
pulledLine
)
;
aState
.
mPrevChild
=
mFrames
.
LastChild
(
)
;
ReparentFloats
(
pulledLine
-
>
mFirstChild
nextInFlow
true
)
;
DumpLine
(
aState
pulledLine
deltaBCoord
0
)
;
#
ifdef
DEBUG
AutoNoisyIndenter
indent2
(
gNoisyReflow
)
;
#
endif
if
(
aState
.
mPresContext
-
>
HasPendingInterrupt
(
)
)
{
MarkLineDirtyForInterrupt
(
line
)
;
}
else
{
while
(
line
!
=
LinesEnd
(
)
)
{
ReflowLine
(
aState
line
&
keepGoing
)
;
if
(
aState
.
mReflowInput
.
WillReflowAgainForClearance
(
)
)
{
line
-
>
MarkDirty
(
)
;
keepGoing
=
false
;
aState
.
mReflowStatus
.
SetIncomplete
(
)
;
break
;
}
DumpLine
(
aState
line
deltaBCoord
-
1
)
;
if
(
!
keepGoing
)
{
if
(
0
=
=
line
-
>
GetChildCount
(
)
)
{
DeleteLine
(
aState
line
line_end
)
;
}
break
;
}
if
(
LineHasClear
(
line
.
get
(
)
)
)
{
foundAnyClears
=
true
;
}
if
(
aState
.
mPresContext
-
>
CheckForInterrupt
(
this
)
)
{
MarkLineDirtyForInterrupt
(
line
)
;
break
;
}
+
+
line
;
aState
.
AdvanceToNextLine
(
)
;
}
}
}
if
(
aState
.
mReflowStatus
.
IsIncomplete
(
)
)
{
aState
.
mReflowStatus
.
SetNextInFlowNeedsReflow
(
)
;
}
}
if
(
HasOutsideBullet
(
)
&
&
mLines
.
empty
(
)
)
{
ReflowOutput
metrics
(
aState
.
mReflowInput
)
;
nsIFrame
*
bullet
=
GetOutsideBullet
(
)
;
WritingMode
wm
=
aState
.
mReflowInput
.
GetWritingMode
(
)
;
ReflowBullet
(
bullet
aState
metrics
aState
.
mReflowInput
.
ComputedPhysicalBorderPadding
(
)
.
top
)
;
NS_ASSERTION
(
!
BulletIsEmpty
(
)
|
|
metrics
.
BSize
(
wm
)
=
=
0
"
empty
bullet
took
up
space
"
)
;
if
(
!
BulletIsEmpty
(
)
)
{
if
(
metrics
.
BlockStartAscent
(
)
=
=
ReflowOutput
:
:
ASK_FOR_BASELINE
)
{
nscoord
ascent
;
WritingMode
wm
=
aState
.
mReflowInput
.
GetWritingMode
(
)
;
if
(
nsLayoutUtils
:
:
GetFirstLineBaseline
(
wm
bullet
&
ascent
)
)
{
metrics
.
SetBlockStartAscent
(
ascent
)
;
}
else
{
metrics
.
SetBlockStartAscent
(
metrics
.
BSize
(
wm
)
)
;
}
}
RefPtr
<
nsFontMetrics
>
fm
=
nsLayoutUtils
:
:
GetInflatedFontMetricsForFrame
(
this
)
;
nscoord
minAscent
=
nsLayoutUtils
:
:
GetCenteredFontBaseline
(
fm
aState
.
mMinLineHeight
wm
.
IsLineInverted
(
)
)
;
nscoord
minDescent
=
aState
.
mMinLineHeight
-
minAscent
;
aState
.
mBCoord
+
=
std
:
:
max
(
minAscent
metrics
.
BlockStartAscent
(
)
)
+
std
:
:
max
(
minDescent
metrics
.
BSize
(
wm
)
-
metrics
.
BlockStartAscent
(
)
)
;
nscoord
offset
=
minAscent
-
metrics
.
BlockStartAscent
(
)
;
if
(
offset
>
0
)
{
bullet
-
>
SetRect
(
bullet
-
>
GetRect
(
)
+
nsPoint
(
0
offset
)
)
;
}
}
}
if
(
foundAnyClears
)
{
AddStateBits
(
NS_BLOCK_HAS_CLEAR_CHILDREN
)
;
}
else
{
RemoveStateBits
(
NS_BLOCK_HAS_CLEAR_CHILDREN
)
;
}
#
ifdef
DEBUG
VerifyLines
(
true
)
;
VerifyOverflowSituation
(
)
;
if
(
gNoisyReflow
)
{
IndentBy
(
stdout
gNoiseIndent
-
1
)
;
ListTag
(
stdout
)
;
printf
(
"
:
done
reflowing
dirty
lines
(
status
=
%
s
)
\
n
"
ToString
(
aState
.
mReflowStatus
)
.
c_str
(
)
)
;
}
#
endif
}
void
nsBlockFrame
:
:
MarkLineDirtyForInterrupt
(
nsLineBox
*
aLine
)
{
aLine
-
>
MarkDirty
(
)
;
if
(
GetStateBits
(
)
&
NS_FRAME_IS_DIRTY
)
{
int32_t
n
=
aLine
-
>
GetChildCount
(
)
;
for
(
nsIFrame
*
f
=
aLine
-
>
mFirstChild
;
n
>
0
;
f
=
f
-
>
GetNextSibling
(
)
-
-
n
)
{
f
-
>
AddStateBits
(
NS_FRAME_IS_DIRTY
)
;
}
if
(
aLine
-
>
HasFloats
(
)
)
{
for
(
nsFloatCache
*
fc
=
aLine
-
>
GetFirstFloat
(
)
;
fc
;
fc
=
fc
-
>
Next
(
)
)
{
fc
-
>
mFloat
-
>
AddStateBits
(
NS_FRAME_IS_DIRTY
)
;
}
}
}
else
{
nsBlockFrame
*
bf
=
nsLayoutUtils
:
:
GetAsBlock
(
aLine
-
>
mFirstChild
)
;
if
(
bf
)
{
MarkAllDescendantLinesDirty
(
bf
)
;
}
}
}
void
nsBlockFrame
:
:
DeleteLine
(
BlockReflowInput
&
aState
nsLineList
:
:
iterator
aLine
nsLineList
:
:
iterator
aLineEnd
)
{
NS_PRECONDITION
(
0
=
=
aLine
-
>
GetChildCount
(
)
"
can
'
t
delete
!
empty
line
"
)
;
if
(
0
=
=
aLine
-
>
GetChildCount
(
)
)
{
NS_ASSERTION
(
aState
.
mCurrentLine
=
=
aLine
"
using
function
more
generally
than
designed
"
"
but
perhaps
OK
now
"
)
;
nsLineBox
*
line
=
aLine
;
aLine
=
mLines
.
erase
(
aLine
)
;
FreeLineBox
(
line
)
;
if
(
aLine
!
=
aLineEnd
)
aLine
-
>
MarkPreviousMarginDirty
(
)
;
}
}
void
nsBlockFrame
:
:
ReflowLine
(
BlockReflowInput
&
aState
LineIterator
aLine
bool
*
aKeepReflowGoing
)
{
MOZ_ASSERT
(
aLine
-
>
GetChildCount
(
)
"
reflowing
empty
line
"
)
;
aState
.
mCurrentLine
=
aLine
;
aLine
-
>
ClearDirty
(
)
;
aLine
-
>
InvalidateCachedIsEmpty
(
)
;
aLine
-
>
ClearHadFloatPushed
(
)
;
if
(
aLine
-
>
IsBlock
(
)
)
{
ReflowBlockFrame
(
aState
aLine
aKeepReflowGoing
)
;
}
else
{
aLine
-
>
SetLineWrapped
(
false
)
;
ReflowInlineFrames
(
aState
aLine
aKeepReflowGoing
)
;
aLine
-
>
ClearFloatEdges
(
)
;
if
(
aState
.
mFlags
.
mCanHaveTextOverflow
)
{
WritingMode
wm
=
aLine
-
>
mWritingMode
;
nsFlowAreaRect
r
=
aState
.
GetFloatAvailableSpaceForBSize
(
aLine
-
>
BStart
(
)
aLine
-
>
BSize
(
)
nullptr
)
;
if
(
r
.
mHasFloats
)
{
LogicalRect
so
=
aLine
-
>
GetOverflowArea
(
eScrollableOverflow
wm
aLine
-
>
mContainerSize
)
;
nscoord
s
=
r
.
mRect
.
IStart
(
wm
)
;
nscoord
e
=
r
.
mRect
.
IEnd
(
wm
)
;
if
(
so
.
IEnd
(
wm
)
>
e
|
|
so
.
IStart
(
wm
)
<
s
)
{
aLine
-
>
SetFloatEdges
(
s
e
)
;
}
}
}
}
}
nsIFrame
*
nsBlockFrame
:
:
PullFrame
(
BlockReflowInput
&
aState
LineIterator
aLine
)
{
if
(
LinesEnd
(
)
!
=
aLine
.
next
(
)
)
{
return
PullFrameFrom
(
aLine
this
aLine
.
next
(
)
)
;
}
NS_ASSERTION
(
!
GetOverflowLines
(
)
"
Our
overflow
lines
should
have
been
removed
at
the
start
of
reflow
"
)
;
nsBlockFrame
*
nextInFlow
=
aState
.
mNextInFlow
;
while
(
nextInFlow
)
{
if
(
nextInFlow
-
>
mLines
.
empty
(
)
)
{
nextInFlow
-
>
DrainSelfOverflowList
(
)
;
}
if
(
!
nextInFlow
-
>
mLines
.
empty
(
)
)
{
return
PullFrameFrom
(
aLine
nextInFlow
nextInFlow
-
>
mLines
.
begin
(
)
)
;
}
nextInFlow
=
static_cast
<
nsBlockFrame
*
>
(
nextInFlow
-
>
GetNextInFlow
(
)
)
;
aState
.
mNextInFlow
=
nextInFlow
;
}
return
nullptr
;
}
nsIFrame
*
nsBlockFrame
:
:
PullFrameFrom
(
nsLineBox
*
aLine
nsBlockFrame
*
aFromContainer
nsLineList
:
:
iterator
aFromLine
)
{
nsLineBox
*
fromLine
=
aFromLine
;
MOZ_ASSERT
(
fromLine
"
bad
line
to
pull
from
"
)
;
MOZ_ASSERT
(
fromLine
-
>
GetChildCount
(
)
"
empty
line
"
)
;
MOZ_ASSERT
(
aLine
-
>
GetChildCount
(
)
"
empty
line
"
)
;
NS_ASSERTION
(
fromLine
-
>
IsBlock
(
)
=
=
fromLine
-
>
mFirstChild
-
>
IsBlockOutside
(
)
"
Disagreement
about
whether
it
'
s
a
block
or
not
"
)
;
if
(
fromLine
-
>
IsBlock
(
)
)
{
return
nullptr
;
}
nsIFrame
*
frame
=
fromLine
-
>
mFirstChild
;
nsIFrame
*
newFirstChild
=
frame
-
>
GetNextSibling
(
)
;
if
(
aFromContainer
!
=
this
)
{
MOZ_ASSERT
(
aLine
=
=
mLines
.
back
(
)
)
;
MOZ_ASSERT
(
aFromLine
=
=
aFromContainer
-
>
mLines
.
begin
(
)
"
should
only
pull
from
first
line
"
)
;
aFromContainer
-
>
mFrames
.
RemoveFrame
(
frame
)
;
ReparentFrame
(
frame
aFromContainer
this
)
;
mFrames
.
AppendFrame
(
nullptr
frame
)
;
ReparentFloats
(
frame
aFromContainer
false
)
;
}
else
{
MOZ_ASSERT
(
aLine
=
=
aFromLine
.
prev
(
)
)
;
}
aLine
-
>
NoteFrameAdded
(
frame
)
;
fromLine
-
>
NoteFrameRemoved
(
frame
)
;
if
(
fromLine
-
>
GetChildCount
(
)
>
0
)
{
fromLine
-
>
MarkDirty
(
)
;
fromLine
-
>
mFirstChild
=
newFirstChild
;
}
else
{
if
(
aFromLine
.
next
(
)
!
=
aFromContainer
-
>
mLines
.
end
(
)
)
{
aFromLine
.
next
(
)
-
>
MarkPreviousMarginDirty
(
)
;
}
aFromContainer
-
>
mLines
.
erase
(
aFromLine
)
;
aFromContainer
-
>
FreeLineBox
(
fromLine
)
;
}
#
ifdef
DEBUG
VerifyLines
(
true
)
;
VerifyOverflowSituation
(
)
;
#
endif
return
frame
;
}
void
nsBlockFrame
:
:
SlideLine
(
BlockReflowInput
&
aState
nsLineBox
*
aLine
nscoord
aDeltaBCoord
)
{
NS_PRECONDITION
(
aDeltaBCoord
!
=
0
"
why
slide
a
line
nowhere
?
"
)
;
aLine
-
>
SlideBy
(
aDeltaBCoord
aState
.
ContainerSize
(
)
)
;
MoveChildFramesOfLine
(
aLine
aDeltaBCoord
)
;
}
void
nsBlockFrame
:
:
UpdateLineContainerSize
(
nsLineBox
*
aLine
const
nsSize
&
aNewContainerSize
)
{
if
(
aNewContainerSize
=
=
aLine
-
>
mContainerSize
)
{
return
;
}
nsSize
sizeDelta
=
aLine
-
>
UpdateContainerSize
(
aNewContainerSize
)
;
if
(
GetWritingMode
(
)
.
IsVerticalRL
(
)
)
{
MoveChildFramesOfLine
(
aLine
sizeDelta
.
width
)
;
}
}
void
nsBlockFrame
:
:
MoveChildFramesOfLine
(
nsLineBox
*
aLine
nscoord
aDeltaBCoord
)
{
nsIFrame
*
kid
=
aLine
-
>
mFirstChild
;
if
(
!
kid
)
{
return
;
}
WritingMode
wm
=
GetWritingMode
(
)
;
LogicalPoint
translation
(
wm
0
aDeltaBCoord
)
;
if
(
aLine
-
>
IsBlock
(
)
)
{
if
(
aDeltaBCoord
)
{
kid
-
>
MovePositionBy
(
wm
translation
)
;
}
nsContainerFrame
:
:
PlaceFrameView
(
kid
)
;
}
else
{
int32_t
n
=
aLine
-
>
GetChildCount
(
)
;
while
(
-
-
n
>
=
0
)
{
if
(
aDeltaBCoord
)
{
kid
-
>
MovePositionBy
(
wm
translation
)
;
}
nsContainerFrame
:
:
PlaceFrameView
(
kid
)
;
kid
=
kid
-
>
GetNextSibling
(
)
;
}
}
}
nsresult
nsBlockFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
)
{
nsresult
rv
=
nsContainerFrame
:
:
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
nsGkAtoms
:
:
value
=
=
aAttribute
)
{
const
nsStyleDisplay
*
styleDisplay
=
StyleDisplay
(
)
;
if
(
mozilla
:
:
StyleDisplay
:
:
ListItem
=
=
styleDisplay
-
>
mDisplay
)
{
nsContainerFrame
*
ancestor
=
GetParent
(
)
;
for
(
;
ancestor
;
ancestor
=
ancestor
-
>
GetParent
(
)
)
{
auto
frameType
=
ancestor
-
>
Type
(
)
;
if
(
frameType
=
=
LayoutFrameType
:
:
Block
|
|
frameType
=
=
LayoutFrameType
:
:
FlexContainer
|
|
frameType
=
=
LayoutFrameType
:
:
GridContainer
)
{
break
;
}
}
if
(
ancestor
)
{
if
(
ancestor
-
>
RenumberList
(
)
)
{
PresContext
(
)
-
>
PresShell
(
)
-
>
FrameNeedsReflow
(
ancestor
nsIPresShell
:
:
eStyleChange
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
}
}
}
}
return
rv
;
}
static
inline
bool
IsNonAutoNonZeroBSize
(
const
nsStyleCoord
&
aCoord
)
{
nsStyleUnit
unit
=
aCoord
.
GetUnit
(
)
;
if
(
unit
=
=
eStyleUnit_Auto
|
|
unit
=
=
eStyleUnit_Enumerated
)
{
return
false
;
}
if
(
aCoord
.
IsCoordPercentCalcUnit
(
)
)
{
return
nsRuleNode
:
:
ComputeCoordPercentCalc
(
aCoord
nscoord_MAX
)
>
0
|
|
nsRuleNode
:
:
ComputeCoordPercentCalc
(
aCoord
0
)
>
0
;
}
MOZ_ASSERT
(
false
"
unexpected
unit
for
height
or
min
-
height
"
)
;
return
true
;
}
bool
nsBlockFrame
:
:
IsSelfEmpty
(
)
{
if
(
GetStateBits
(
)
&
NS_BLOCK_MARGIN_ROOT
)
{
return
false
;
}
WritingMode
wm
=
GetWritingMode
(
)
;
const
nsStylePosition
*
position
=
StylePosition
(
)
;
if
(
IsNonAutoNonZeroBSize
(
position
-
>
MinBSize
(
wm
)
)
|
|
IsNonAutoNonZeroBSize
(
position
-
>
BSize
(
wm
)
)
)
{
return
false
;
}
const
nsStyleBorder
*
border
=
StyleBorder
(
)
;
const
nsStylePadding
*
padding
=
StylePadding
(
)
;
if
(
border
-
>
GetComputedBorderWidth
(
wm
.
PhysicalSide
(
eLogicalSideBStart
)
)
!
=
0
|
|
border
-
>
GetComputedBorderWidth
(
wm
.
PhysicalSide
(
eLogicalSideBEnd
)
)
!
=
0
|
|
!
nsLayoutUtils
:
:
IsPaddingZero
(
padding
-
>
mPadding
.
GetBStart
(
wm
)
)
|
|
!
nsLayoutUtils
:
:
IsPaddingZero
(
padding
-
>
mPadding
.
GetBEnd
(
wm
)
)
)
{
return
false
;
}
if
(
HasOutsideBullet
(
)
&
&
!
BulletIsEmpty
(
)
)
{
return
false
;
}
return
true
;
}
bool
nsBlockFrame
:
:
CachedIsEmpty
(
)
{
if
(
!
IsSelfEmpty
(
)
)
{
return
false
;
}
for
(
LineIterator
line
=
LinesBegin
(
)
line_end
=
LinesEnd
(
)
;
line
!
=
line_end
;
+
+
line
)
{
if
(
!
line
-
>
CachedIsEmpty
(
)
)
return
false
;
}
return
true
;
}
bool
nsBlockFrame
:
:
IsEmpty
(
)
{
if
(
!
IsSelfEmpty
(
)
)
{
return
false
;
}
for
(
LineIterator
line
=
LinesBegin
(
)
line_end
=
LinesEnd
(
)
;
line
!
=
line_end
;
+
+
line
)
{
if
(
!
line
-
>
IsEmpty
(
)
)
return
false
;
}
return
true
;
}
bool
nsBlockFrame
:
:
ShouldApplyBStartMargin
(
BlockReflowInput
&
aState
nsLineBox
*
aLine
nsIFrame
*
aChildFrame
)
{
if
(
aState
.
mFlags
.
mShouldApplyBStartMargin
)
{
return
true
;
}
if
(
!
aState
.
IsAdjacentWithTop
(
)
|
|
aChildFrame
-
>
StyleBorder
(
)
-
>
mBoxDecorationBreak
=
=
StyleBoxDecorationBreak
:
:
Clone
)
{
aState
.
mFlags
.
mShouldApplyBStartMargin
=
true
;
return
true
;
}
LineIterator
line
=
LinesBegin
(
)
;
if
(
aState
.
mFlags
.
mHasLineAdjacentToTop
)
{
line
=
aState
.
mLineAdjacentToTop
;
}
while
(
line
!
=
aLine
)
{
if
(
!
line
-
>
CachedIsEmpty
(
)
|
|
line
-
>
HasClearance
(
)
)
{
aState
.
mFlags
.
mShouldApplyBStartMargin
=
true
;
return
true
;
}
+
+
line
;
aState
.
mFlags
.
mHasLineAdjacentToTop
=
true
;
aState
.
mLineAdjacentToTop
=
line
;
}
return
false
;
}
void
nsBlockFrame
:
:
ReflowBlockFrame
(
BlockReflowInput
&
aState
LineIterator
aLine
bool
*
aKeepReflowGoing
)
{
NS_PRECONDITION
(
*
aKeepReflowGoing
"
bad
caller
"
)
;
nsIFrame
*
frame
=
aLine
-
>
mFirstChild
;
if
(
!
frame
)
{
NS_ASSERTION
(
false
"
program
error
-
unexpected
empty
line
"
)
;
return
;
}
nsBlockReflowContext
brc
(
aState
.
mPresContext
aState
.
mReflowInput
)
;
StyleClear
breakType
=
frame
-
>
StyleDisplay
(
)
-
>
PhysicalBreakType
(
aState
.
mReflowInput
.
GetWritingMode
(
)
)
;
if
(
StyleClear
:
:
None
!
=
aState
.
mFloatBreakType
)
{
breakType
=
nsLayoutUtils
:
:
CombineBreakType
(
breakType
aState
.
mFloatBreakType
)
;
aState
.
mFloatBreakType
=
StyleClear
:
:
None
;
}
aLine
-
>
SetBreakTypeBefore
(
breakType
)
;
bool
applyBStartMargin
=
(
frame
-
>
StyleBorder
(
)
-
>
mBoxDecorationBreak
=
=
StyleBoxDecorationBreak
:
:
Clone
|
|
!
frame
-
>
GetPrevInFlow
(
)
)
&
&
ShouldApplyBStartMargin
(
aState
aLine
frame
)
;
if
(
applyBStartMargin
)
{
aLine
-
>
ClearHasClearance
(
)
;
}
bool
treatWithClearance
=
aLine
-
>
HasClearance
(
)
;
bool
mightClearFloats
=
breakType
!
=
StyleClear
:
:
None
;
nsIFrame
*
replacedBlock
=
nullptr
;
if
(
!
nsBlockFrame
:
:
BlockCanIntersectFloats
(
frame
)
)
{
mightClearFloats
=
true
;
replacedBlock
=
frame
;
}
if
(
!
treatWithClearance
&
&
!
applyBStartMargin
&
&
mightClearFloats
&
&
aState
.
mReflowInput
.
mDiscoveredClearance
)
{
nscoord
curBCoord
=
aState
.
mBCoord
+
aState
.
mPrevBEndMargin
.
get
(
)
;
nscoord
clearBCoord
=
aState
.
ClearFloats
(
curBCoord
breakType
replacedBlock
)
;
if
(
clearBCoord
!
=
curBCoord
)
{
if
(
!
*
aState
.
mReflowInput
.
mDiscoveredClearance
)
{
*
aState
.
mReflowInput
.
mDiscoveredClearance
=
frame
;
}
aState
.
mPrevChild
=
frame
;
return
;
}
}
if
(
treatWithClearance
)
{
applyBStartMargin
=
true
;
}
nsIFrame
*
clearanceFrame
=
nullptr
;
nscoord
startingBCoord
=
aState
.
mBCoord
;
nsCollapsingMargin
incomingMargin
=
aState
.
mPrevBEndMargin
;
nscoord
clearance
;
nsPoint
originalPosition
=
frame
-
>
GetPosition
(
)
;
while
(
true
)
{
clearance
=
0
;
nscoord
bStartMargin
=
0
;
bool
mayNeedRetry
=
false
;
bool
clearedFloats
=
false
;
if
(
applyBStartMargin
)
{
WritingMode
wm
=
frame
-
>
GetWritingMode
(
)
;
LogicalSize
availSpace
=
aState
.
ContentSize
(
wm
)
;
ReflowInput
reflowInput
(
aState
.
mPresContext
aState
.
mReflowInput
frame
availSpace
)
;
if
(
treatWithClearance
)
{
aState
.
mBCoord
+
=
aState
.
mPrevBEndMargin
.
get
(
)
;
aState
.
mPrevBEndMargin
.
Zero
(
)
;
}
brc
.
ComputeCollapsedBStartMargin
(
reflowInput
&
aState
.
mPrevBEndMargin
clearanceFrame
&
mayNeedRetry
)
;
if
(
clearanceFrame
)
{
mayNeedRetry
=
false
;
}
if
(
!
treatWithClearance
&
&
!
clearanceFrame
&
&
mightClearFloats
)
{
nscoord
curBCoord
=
aState
.
mBCoord
+
aState
.
mPrevBEndMargin
.
get
(
)
;
nscoord
clearBCoord
=
aState
.
ClearFloats
(
curBCoord
breakType
replacedBlock
)
;
if
(
clearBCoord
!
=
curBCoord
)
{
treatWithClearance
=
true
;
aLine
-
>
SetHasClearance
(
)
;
aState
.
mBCoord
+
=
aState
.
mPrevBEndMargin
.
get
(
)
;
aState
.
mPrevBEndMargin
.
Zero
(
)
;
mayNeedRetry
=
false
;
brc
.
ComputeCollapsedBStartMargin
(
reflowInput
&
aState
.
mPrevBEndMargin
clearanceFrame
&
mayNeedRetry
)
;
}
}
bStartMargin
=
aState
.
mPrevBEndMargin
.
get
(
)
;
if
(
treatWithClearance
)
{
nscoord
currentBCoord
=
aState
.
mBCoord
;
aState
.
mBCoord
=
aState
.
ClearFloats
(
aState
.
mBCoord
breakType
replacedBlock
)
;
clearedFloats
=
aState
.
mBCoord
!
=
currentBCoord
;
clearance
=
aState
.
mBCoord
-
(
currentBCoord
+
bStartMargin
)
;
bStartMargin
+
=
clearance
;
}
else
{
aState
.
mBCoord
+
=
bStartMargin
;
}
}
aLine
-
>
SetLineIsImpactedByFloat
(
false
)
;
nsFlowAreaRect
floatAvailableSpace
=
aState
.
GetFloatAvailableSpace
(
)
;
WritingMode
wm
=
aState
.
mReflowInput
.
GetWritingMode
(
)
;
LogicalRect
availSpace
(
wm
)
;
aState
.
ComputeBlockAvailSpace
(
frame
floatAvailableSpace
replacedBlock
!
=
nullptr
availSpace
)
;
if
(
(
!
aState
.
mReflowInput
.
mFlags
.
mIsTopOfPage
|
|
clearedFloats
)
&
&
availSpace
.
BSize
(
wm
)
<
0
)
{
aState
.
mBCoord
=
startingBCoord
;
aState
.
mPrevBEndMargin
=
incomingMargin
;
*
aKeepReflowGoing
=
false
;
if
(
ShouldAvoidBreakInside
(
aState
.
mReflowInput
)
)
{
aState
.
mReflowStatus
.
SetInlineLineBreakBeforeAndReset
(
)
;
}
else
{
PushLines
(
aState
aLine
.
prev
(
)
)
;
aState
.
mReflowStatus
.
SetIncomplete
(
)
;
}
return
;
}
aState
.
mBCoord
-
=
bStartMargin
;
availSpace
.
BStart
(
wm
)
-
=
bStartMargin
;
if
(
NS_UNCONSTRAINEDSIZE
!
=
availSpace
.
BSize
(
wm
)
)
{
availSpace
.
BSize
(
wm
)
+
=
bStartMargin
;
}
Maybe
<
ReflowInput
>
blockHtmlRI
;
blockHtmlRI
.
emplace
(
aState
.
mPresContext
aState
.
mReflowInput
frame
availSpace
.
Size
(
wm
)
.
ConvertTo
(
frame
-
>
GetWritingMode
(
)
wm
)
)
;
nsFloatManager
:
:
SavedState
floatManagerState
;
nsReflowStatus
frameReflowStatus
;
do
{
if
(
floatAvailableSpace
.
mHasFloats
)
{
aLine
-
>
SetLineIsImpactedByFloat
(
true
)
;
}
const
bool
shouldStoreClearance
=
aState
.
mReflowInput
.
mDiscoveredClearance
&
&
!
*
aState
.
mReflowInput
.
mDiscoveredClearance
;
if
(
mayNeedRetry
|
|
replacedBlock
)
{
aState
.
FloatManager
(
)
-
>
PushState
(
&
floatManagerState
)
;
}
if
(
mayNeedRetry
)
{
blockHtmlRI
-
>
mDiscoveredClearance
=
&
clearanceFrame
;
}
else
if
(
!
applyBStartMargin
)
{
blockHtmlRI
-
>
mDiscoveredClearance
=
aState
.
mReflowInput
.
mDiscoveredClearance
;
}
frameReflowStatus
.
Reset
(
)
;
brc
.
ReflowBlock
(
availSpace
applyBStartMargin
aState
.
mPrevBEndMargin
clearance
aState
.
IsAdjacentWithTop
(
)
aLine
.
get
(
)
*
blockHtmlRI
frameReflowStatus
aState
)
;
if
(
!
replacedBlock
)
{
break
;
}
LogicalRect
oldFloatAvailableSpaceRect
(
floatAvailableSpace
.
mRect
)
;
floatAvailableSpace
=
aState
.
GetFloatAvailableSpaceForBSize
(
aState
.
mBCoord
+
bStartMargin
brc
.
GetMetrics
(
)
.
BSize
(
wm
)
&
floatManagerState
)
;
NS_ASSERTION
(
floatAvailableSpace
.
mRect
.
BStart
(
wm
)
=
=
oldFloatAvailableSpaceRect
.
BStart
(
wm
)
"
yikes
"
)
;
floatAvailableSpace
.
mRect
.
BSize
(
wm
)
=
oldFloatAvailableSpaceRect
.
BSize
(
wm
)
;
if
(
!
AvailableSpaceShrunk
(
wm
oldFloatAvailableSpaceRect
floatAvailableSpace
.
mRect
true
)
)
{
break
;
}
bool
advanced
=
false
;
if
(
!
aState
.
ReplacedBlockFitsInAvailSpace
(
replacedBlock
floatAvailableSpace
)
)
{
nscoord
newBCoord
=
aState
.
mBCoord
;
if
(
aState
.
AdvanceToNextBand
(
floatAvailableSpace
.
mRect
&
newBCoord
)
)
{
advanced
=
true
;
}
aState
.
mBCoord
=
aState
.
ClearFloats
(
newBCoord
StyleClear
:
:
None
replacedBlock
)
;
floatAvailableSpace
=
aState
.
GetFloatAvailableSpaceWithState
(
aState
.
mBCoord
ShapeType
:
:
ShapeOutside
&
floatManagerState
)
;
}
LogicalRect
oldAvailSpace
(
availSpace
)
;
aState
.
ComputeBlockAvailSpace
(
frame
floatAvailableSpace
replacedBlock
!
=
nullptr
availSpace
)
;
if
(
!
advanced
&
&
availSpace
.
IsEqualEdges
(
oldAvailSpace
)
)
{
break
;
}
aState
.
FloatManager
(
)
-
>
PopState
(
&
floatManagerState
)
;
if
(
!
treatWithClearance
&
&
!
applyBStartMargin
&
&
aState
.
mReflowInput
.
mDiscoveredClearance
)
{
if
(
shouldStoreClearance
)
{
*
aState
.
mReflowInput
.
mDiscoveredClearance
=
frame
;
}
aState
.
mPrevChild
=
frame
;
return
;
}
if
(
advanced
)
{
applyBStartMargin
=
false
;
bStartMargin
=
0
;
treatWithClearance
=
true
;
clearance
=
0
;
}
blockHtmlRI
.
reset
(
)
;
blockHtmlRI
.
emplace
(
aState
.
mPresContext
aState
.
mReflowInput
frame
availSpace
.
Size
(
wm
)
.
ConvertTo
(
frame
-
>
GetWritingMode
(
)
wm
)
)
;
}
while
(
true
)
;
if
(
mayNeedRetry
&
&
clearanceFrame
)
{
aState
.
FloatManager
(
)
-
>
PopState
(
&
floatManagerState
)
;
aState
.
mBCoord
=
startingBCoord
;
aState
.
mPrevBEndMargin
=
incomingMargin
;
continue
;
}
aState
.
mPrevChild
=
frame
;
if
(
blockHtmlRI
-
>
WillReflowAgainForClearance
(
)
)
{
NS_ASSERTION
(
originalPosition
=
=
frame
-
>
GetPosition
(
)
"
we
need
to
call
PositionChildViews
"
)
;
return
;
}
#
if
defined
(
REFLOW_STATUS_COVERAGE
)
RecordReflowStatus
(
true
frameReflowStatus
)
;
#
endif
if
(
frameReflowStatus
.
IsInlineBreakBefore
(
)
)
{
*
aKeepReflowGoing
=
false
;
if
(
ShouldAvoidBreakInside
(
aState
.
mReflowInput
)
)
{
aState
.
mReflowStatus
.
SetInlineLineBreakBeforeAndReset
(
)
;
}
else
{
PushLines
(
aState
aLine
.
prev
(
)
)
;
aState
.
mReflowStatus
.
SetIncomplete
(
)
;
}
}
else
{
bool
forceFit
=
aState
.
IsAdjacentWithTop
(
)
&
&
clearance
<
=
0
&
&
!
floatAvailableSpace
.
mHasFloats
;
nsCollapsingMargin
collapsedBEndMargin
;
nsOverflowAreas
overflowAreas
;
*
aKeepReflowGoing
=
brc
.
PlaceBlock
(
*
blockHtmlRI
forceFit
aLine
.
get
(
)
collapsedBEndMargin
overflowAreas
frameReflowStatus
)
;
if
(
!
frameReflowStatus
.
IsFullyComplete
(
)
&
&
ShouldAvoidBreakInside
(
aState
.
mReflowInput
)
)
{
*
aKeepReflowGoing
=
false
;
}
if
(
aLine
-
>
SetCarriedOutBEndMargin
(
collapsedBEndMargin
)
)
{
LineIterator
nextLine
=
aLine
;
+
+
nextLine
;
if
(
nextLine
!
=
LinesEnd
(
)
)
{
nextLine
-
>
MarkPreviousMarginDirty
(
)
;
}
}
aLine
-
>
SetOverflowAreas
(
overflowAreas
)
;
if
(
*
aKeepReflowGoing
)
{
nscoord
newBCoord
=
aLine
-
>
BEnd
(
)
;
aState
.
mBCoord
=
newBCoord
;
if
(
!
frameReflowStatus
.
IsFullyComplete
(
)
)
{
bool
madeContinuation
=
CreateContinuationFor
(
aState
nullptr
frame
)
;
nsIFrame
*
nextFrame
=
frame
-
>
GetNextInFlow
(
)
;
NS_ASSERTION
(
nextFrame
"
We
'
re
supposed
to
have
a
next
-
in
-
flow
by
now
"
)
;
if
(
frameReflowStatus
.
IsIncomplete
(
)
)
{
if
(
!
madeContinuation
&
&
(
NS_FRAME_IS_OVERFLOW_CONTAINER
&
nextFrame
-
>
GetStateBits
(
)
)
)
{
nsOverflowContinuationTracker
:
:
AutoFinish
fini
(
aState
.
mOverflowTracker
frame
)
;
nsContainerFrame
*
parent
=
nextFrame
-
>
GetParent
(
)
;
nsresult
rv
=
parent
-
>
StealFrame
(
nextFrame
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
if
(
parent
!
=
this
)
ReparentFrame
(
nextFrame
parent
this
)
;
mFrames
.
InsertFrame
(
nullptr
frame
nextFrame
)
;
madeContinuation
=
true
;
nextFrame
-
>
RemoveStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
;
frameReflowStatus
.
SetNextInFlowNeedsReflow
(
)
;
}
if
(
madeContinuation
)
{
nsLineBox
*
line
=
NewLineBox
(
nextFrame
true
)
;
mLines
.
after_insert
(
aLine
line
)
;
}
PushLines
(
aState
aLine
)
;
aState
.
mReflowStatus
.
SetIncomplete
(
)
;
if
(
frameReflowStatus
.
NextInFlowNeedsReflow
(
)
)
{
aState
.
mReflowStatus
.
SetNextInFlowNeedsReflow
(
)
;
if
(
!
madeContinuation
)
{
nsBlockFrame
*
nifBlock
=
nsLayoutUtils
:
:
GetAsBlock
(
nextFrame
-
>
GetParent
(
)
)
;
NS_ASSERTION
(
nifBlock
"
A
block
'
s
child
'
s
next
in
flow
'
s
parent
must
be
a
block
!
"
)
;
for
(
LineIterator
line
=
nifBlock
-
>
LinesBegin
(
)
line_end
=
nifBlock
-
>
LinesEnd
(
)
;
line
!
=
line_end
;
+
+
line
)
{
if
(
line
-
>
Contains
(
nextFrame
)
)
{
line
-
>
MarkDirty
(
)
;
break
;
}
}
}
}
*
aKeepReflowGoing
=
false
;
#
ifdef
NOISY_BLOCK_DIR_MARGINS
ListTag
(
stdout
)
;
printf
(
"
:
reflow
incomplete
frame
=
"
)
;
nsFrame
:
:
ListTag
(
stdout
mFrame
)
;
printf
(
"
prevBEndMargin
=
%
d
setting
to
zero
\
n
"
aState
.
mPrevBEndMargin
.
get
(
)
)
;
#
endif
aState
.
mPrevBEndMargin
.
Zero
(
)
;
}
else
{
if
(
!
madeContinuation
&
&
!
(
NS_FRAME_IS_OVERFLOW_CONTAINER
&
nextFrame
-
>
GetStateBits
(
)
)
)
{
nsresult
rv
=
nextFrame
-
>
GetParent
(
)
-
>
StealFrame
(
nextFrame
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
}
else
if
(
madeContinuation
)
{
mFrames
.
RemoveFrame
(
nextFrame
)
;
}
aState
.
mOverflowTracker
-
>
Insert
(
nextFrame
frameReflowStatus
)
;
aState
.
mReflowStatus
.
MergeCompletionStatusFrom
(
frameReflowStatus
)
;
#
ifdef
NOISY_BLOCK_DIR_MARGINS
ListTag
(
stdout
)
;
printf
(
"
:
reflow
complete
but
overflow
incomplete
for
"
)
;
nsFrame
:
:
ListTag
(
stdout
mFrame
)
;
printf
(
"
prevBEndMargin
=
%
d
collapsedBEndMargin
=
%
d
\
n
"
aState
.
mPrevBEndMargin
.
get
(
)
collapsedBEndMargin
.
get
(
)
)
;
#
endif
aState
.
mPrevBEndMargin
=
collapsedBEndMargin
;
}
}
else
{
#
ifdef
NOISY_BLOCK_DIR_MARGINS
ListTag
(
stdout
)
;
printf
(
"
:
reflow
complete
for
"
)
;
nsFrame
:
:
ListTag
(
stdout
mFrame
)
;
printf
(
"
prevBEndMargin
=
%
d
collapsedBEndMargin
=
%
d
\
n
"
aState
.
mPrevBEndMargin
.
get
(
)
collapsedBEndMargin
.
get
(
)
)
;
#
endif
aState
.
mPrevBEndMargin
=
collapsedBEndMargin
;
}
#
ifdef
NOISY_BLOCK_DIR_MARGINS
ListTag
(
stdout
)
;
printf
(
"
:
frame
=
"
)
;
nsFrame
:
:
ListTag
(
stdout
mFrame
)
;
printf
(
"
carriedOutBEndMargin
=
%
d
collapsedBEndMargin
=
%
d
=
>
%
d
\
n
"
brc
.
GetCarriedOutBEndMargin
(
)
.
get
(
)
collapsedBEndMargin
.
get
(
)
aState
.
mPrevBEndMargin
.
get
(
)
)
;
#
endif
}
else
{
if
(
(
aLine
=
=
mLines
.
front
(
)
&
&
!
GetPrevInFlow
(
)
)
|
|
ShouldAvoidBreakInside
(
aState
.
mReflowInput
)
)
{
aState
.
mReflowStatus
.
SetInlineLineBreakBeforeAndReset
(
)
;
aLine
-
>
MarkDirty
(
)
;
}
else
{
PushLines
(
aState
aLine
.
prev
(
)
)
;
aState
.
mReflowStatus
.
SetIncomplete
(
)
;
}
}
}
break
;
}
if
(
originalPosition
!
=
frame
-
>
GetPosition
(
)
&
&
!
frame
-
>
HasView
(
)
)
{
nsContainerFrame
:
:
PositionChildViews
(
frame
)
;
}
#
ifdef
DEBUG
VerifyLines
(
true
)
;
#
endif
}
void
nsBlockFrame
:
:
ReflowInlineFrames
(
BlockReflowInput
&
aState
LineIterator
aLine
bool
*
aKeepReflowGoing
)
{
*
aKeepReflowGoing
=
true
;
aLine
-
>
SetLineIsImpactedByFloat
(
false
)
;
if
(
ShouldApplyBStartMargin
(
aState
aLine
aLine
-
>
mFirstChild
)
)
{
aState
.
mBCoord
+
=
aState
.
mPrevBEndMargin
.
get
(
)
;
}
nsFlowAreaRect
floatAvailableSpace
=
aState
.
GetFloatAvailableSpace
(
)
;
LineReflowStatus
lineReflowStatus
;
do
{
nscoord
availableSpaceBSize
=
0
;
aState
.
mLineBSize
.
reset
(
)
;
do
{
bool
allowPullUp
=
true
;
nsIFrame
*
forceBreakInFrame
=
nullptr
;
int32_t
forceBreakOffset
=
-
1
;
gfxBreakPriority
forceBreakPriority
=
gfxBreakPriority
:
:
eNoBreak
;
do
{
nsFloatManager
:
:
SavedState
floatManagerState
;
aState
.
FloatManager
(
)
-
>
PushState
(
&
floatManagerState
)
;
nsLineLayout
lineLayout
(
aState
.
mPresContext
aState
.
FloatManager
(
)
&
aState
.
mReflowInput
&
aLine
nullptr
)
;
lineLayout
.
Init
(
&
aState
aState
.
mMinLineHeight
aState
.
mLineNumber
)
;
if
(
forceBreakInFrame
)
{
lineLayout
.
ForceBreakAtPosition
(
forceBreakInFrame
forceBreakOffset
)
;
}
DoReflowInlineFrames
(
aState
lineLayout
aLine
floatAvailableSpace
availableSpaceBSize
&
floatManagerState
aKeepReflowGoing
&
lineReflowStatus
allowPullUp
)
;
lineLayout
.
EndLineReflow
(
)
;
if
(
LineReflowStatus
:
:
RedoNoPull
=
=
lineReflowStatus
|
|
LineReflowStatus
:
:
RedoMoreFloats
=
=
lineReflowStatus
|
|
LineReflowStatus
:
:
RedoNextBand
=
=
lineReflowStatus
)
{
if
(
lineLayout
.
NeedsBackup
(
)
)
{
NS_ASSERTION
(
!
forceBreakInFrame
"
Backing
up
twice
;
this
should
never
be
necessary
"
)
;
forceBreakInFrame
=
lineLayout
.
GetLastOptionalBreakPosition
(
&
forceBreakOffset
&
forceBreakPriority
)
;
}
else
{
forceBreakInFrame
=
nullptr
;
}
aState
.
FloatManager
(
)
-
>
PopState
(
&
floatManagerState
)
;
aState
.
mCurrentLineFloats
.
DeleteAll
(
)
;
aState
.
mBelowCurrentLineFloats
.
DeleteAll
(
)
;
}
allowPullUp
=
false
;
}
while
(
LineReflowStatus
:
:
RedoNoPull
=
=
lineReflowStatus
)
;
}
while
(
LineReflowStatus
:
:
RedoMoreFloats
=
=
lineReflowStatus
)
;
}
while
(
LineReflowStatus
:
:
RedoNextBand
=
=
lineReflowStatus
)
;
}
void
nsBlockFrame
:
:
PushTruncatedLine
(
BlockReflowInput
&
aState
LineIterator
aLine
bool
*
aKeepReflowGoing
)
{
PushLines
(
aState
aLine
.
prev
(
)
)
;
*
aKeepReflowGoing
=
false
;
aState
.
mReflowStatus
.
SetIncomplete
(
)
;
}
void
nsBlockFrame
:
:
DoReflowInlineFrames
(
BlockReflowInput
&
aState
nsLineLayout
&
aLineLayout
LineIterator
aLine
nsFlowAreaRect
&
aFloatAvailableSpace
nscoord
&
aAvailableSpaceBSize
nsFloatManager
:
:
SavedState
*
aFloatStateBeforeLine
bool
*
aKeepReflowGoing
LineReflowStatus
*
aLineReflowStatus
bool
aAllowPullUp
)
{
aLine
-
>
FreeFloats
(
aState
.
mFloatCacheFreeList
)
;
aState
.
mFloatOverflowAreas
.
Clear
(
)
;
if
(
aFloatAvailableSpace
.
mHasFloats
)
aLine
-
>
SetLineIsImpactedByFloat
(
true
)
;
#
ifdef
REALLY_NOISY_REFLOW
printf
(
"
nsBlockFrame
:
:
DoReflowInlineFrames
%
p
impacted
=
%
d
\
n
"
this
aFloatAvailableSpace
.
mHasFloats
)
;
#
endif
WritingMode
outerWM
=
aState
.
mReflowInput
.
GetWritingMode
(
)
;
WritingMode
lineWM
=
WritingModeForLine
(
outerWM
aLine
-
>
mFirstChild
)
;
LogicalRect
lineRect
=
aFloatAvailableSpace
.
mRect
.
ConvertTo
(
lineWM
outerWM
aState
.
ContainerSize
(
)
)
;
nscoord
iStart
=
lineRect
.
IStart
(
lineWM
)
;
nscoord
availISize
=
lineRect
.
ISize
(
lineWM
)
;
nscoord
availBSize
;
if
(
aState
.
mFlags
.
mHasUnconstrainedBSize
)
{
availBSize
=
NS_UNCONSTRAINEDSIZE
;
}
else
{
availBSize
=
lineRect
.
BSize
(
lineWM
)
;
}
aLine
-
>
EnableResizeReflowOptimization
(
)
;
aLineLayout
.
BeginLineReflow
(
iStart
aState
.
mBCoord
availISize
availBSize
aFloatAvailableSpace
.
mHasFloats
false
lineWM
aState
.
mContainerSize
)
;
aState
.
mFlags
.
mIsLineLayoutEmpty
=
false
;
if
(
(
0
=
=
aLineLayout
.
GetLineNumber
(
)
)
&
&
(
NS_BLOCK_HAS_FIRST_LETTER_CHILD
&
mState
)
&
&
(
NS_BLOCK_HAS_FIRST_LETTER_STYLE
&
mState
)
)
{
aLineLayout
.
SetFirstLetterStyleOK
(
true
)
;
}
NS_ASSERTION
(
!
(
(
NS_BLOCK_HAS_FIRST_LETTER_CHILD
&
mState
)
&
&
GetPrevContinuation
(
)
)
"
first
letter
child
bit
should
only
be
on
first
continuation
"
)
;
LineReflowStatus
lineReflowStatus
=
LineReflowStatus
:
:
OK
;
int32_t
i
;
nsIFrame
*
frame
=
aLine
-
>
mFirstChild
;
if
(
aFloatAvailableSpace
.
mHasFloats
)
{
if
(
aLineLayout
.
NotifyOptionalBreakPosition
(
frame
0
true
gfxBreakPriority
:
:
eNormalBreak
)
)
{
lineReflowStatus
=
LineReflowStatus
:
:
RedoNextBand
;
}
}
for
(
i
=
0
;
LineReflowStatus
:
:
OK
=
=
lineReflowStatus
&
&
i
<
aLine
-
>
GetChildCount
(
)
;
i
+
+
frame
=
frame
-
>
GetNextSibling
(
)
)
{
ReflowInlineFrame
(
aState
aLineLayout
aLine
frame
&
lineReflowStatus
)
;
if
(
LineReflowStatus
:
:
OK
!
=
lineReflowStatus
)
{
+
+
aLine
;
while
(
(
aLine
!
=
LinesEnd
(
)
)
&
&
(
0
=
=
aLine
-
>
GetChildCount
(
)
)
)
{
nsLineBox
*
toremove
=
aLine
;
aLine
=
mLines
.
erase
(
aLine
)
;
NS_ASSERTION
(
nullptr
=
=
toremove
-
>
mFirstChild
"
bad
empty
line
"
)
;
FreeLineBox
(
toremove
)
;
}
-
-
aLine
;
NS_ASSERTION
(
lineReflowStatus
!
=
LineReflowStatus
:
:
Truncated
"
ReflowInlineFrame
should
never
determine
that
a
line
"
"
needs
to
go
to
the
next
page
/
column
"
)
;
}
}
if
(
aAllowPullUp
)
{
while
(
LineReflowStatus
:
:
OK
=
=
lineReflowStatus
)
{
frame
=
PullFrame
(
aState
aLine
)
;
if
(
!
frame
)
{
break
;
}
while
(
LineReflowStatus
:
:
OK
=
=
lineReflowStatus
)
{
int32_t
oldCount
=
aLine
-
>
GetChildCount
(
)
;
ReflowInlineFrame
(
aState
aLineLayout
aLine
frame
&
lineReflowStatus
)
;
if
(
aLine
-
>
GetChildCount
(
)
!
=
oldCount
)
{
frame
=
frame
-
>
GetNextSibling
(
)
;
}
else
{
break
;
}
}
}
}
aState
.
mFlags
.
mIsLineLayoutEmpty
=
aLineLayout
.
LineIsEmpty
(
)
;
bool
needsBackup
=
aLineLayout
.
NeedsBackup
(
)
&
&
(
lineReflowStatus
=
=
LineReflowStatus
:
:
Stop
|
|
lineReflowStatus
=
=
LineReflowStatus
:
:
OK
)
;
if
(
needsBackup
&
&
aLineLayout
.
HaveForcedBreakPosition
(
)
)
{
NS_WARNING
(
"
We
shouldn
'
t
be
backing
up
more
than
once
!
"
"
Someone
must
have
set
a
break
opportunity
beyond
the
available
width
"
"
even
though
there
were
better
break
opportunities
before
it
"
)
;
needsBackup
=
false
;
}
if
(
needsBackup
)
{
if
(
aLineLayout
.
HasOptionalBreakPosition
(
)
)
{
lineReflowStatus
=
LineReflowStatus
:
:
RedoNoPull
;
}
}
else
{
aLineLayout
.
ClearOptionalBreakPosition
(
)
;
}
if
(
LineReflowStatus
:
:
RedoNextBand
=
=
lineReflowStatus
)
{
NS_ASSERTION
(
NS_UNCONSTRAINEDSIZE
!
=
aFloatAvailableSpace
.
mRect
.
BSize
(
outerWM
)
"
unconstrained
block
size
on
totally
empty
line
"
)
;
if
(
aFloatAvailableSpace
.
mRect
.
BSize
(
outerWM
)
>
0
)
{
NS_ASSERTION
(
aFloatAvailableSpace
.
mHasFloats
"
redo
line
on
totally
empty
line
with
non
-
empty
band
.
.
.
"
)
;
aState
.
FloatManager
(
)
-
>
AssertStateMatches
(
aFloatStateBeforeLine
)
;
aState
.
mBCoord
+
=
aFloatAvailableSpace
.
mRect
.
BSize
(
outerWM
)
;
aFloatAvailableSpace
=
aState
.
GetFloatAvailableSpace
(
)
;
}
else
{
NS_ASSERTION
(
NS_UNCONSTRAINEDSIZE
!
=
aState
.
mReflowInput
.
AvailableBSize
(
)
"
We
shouldn
'
t
be
running
out
of
height
here
"
)
;
if
(
NS_UNCONSTRAINEDSIZE
=
=
aState
.
mReflowInput
.
AvailableBSize
(
)
)
{
aState
.
mBCoord
+
=
1
;
aState
.
FloatManager
(
)
-
>
AssertStateMatches
(
aFloatStateBeforeLine
)
;
aFloatAvailableSpace
=
aState
.
GetFloatAvailableSpace
(
)
;
}
else
{
lineReflowStatus
=
LineReflowStatus
:
:
Truncated
;
PushTruncatedLine
(
aState
aLine
aKeepReflowGoing
)
;
}
}
}
else
if
(
LineReflowStatus
:
:
Truncated
!
=
lineReflowStatus
&
&
LineReflowStatus
:
:
RedoNoPull
!
=
lineReflowStatus
)
{
if
(
!
aState
.
mReflowStatus
.
IsInlineBreakBefore
(
)
)
{
if
(
!
PlaceLine
(
aState
aLineLayout
aLine
aFloatStateBeforeLine
aFloatAvailableSpace
.
mRect
aAvailableSpaceBSize
aKeepReflowGoing
)
)
{
lineReflowStatus
=
LineReflowStatus
:
:
RedoMoreFloats
;
}
}
}
#
ifdef
DEBUG
if
(
gNoisyReflow
)
{
printf
(
"
Line
reflow
status
=
%
s
\
n
"
LineReflowStatusToString
(
lineReflowStatus
)
)
;
}
#
endif
if
(
aLineLayout
.
GetDirtyNextLine
(
)
)
{
FrameLines
*
overflowLines
=
GetOverflowLines
(
)
;
bool
pushedToOverflowLines
=
overflowLines
&
&
overflowLines
-
>
mLines
.
front
(
)
=
=
aLine
.
get
(
)
;
if
(
pushedToOverflowLines
)
{
aLine
=
overflowLines
-
>
mLines
.
begin
(
)
;
}
nsBlockInFlowLineIterator
iter
(
this
aLine
pushedToOverflowLines
)
;
if
(
iter
.
Next
(
)
&
&
iter
.
GetLine
(
)
-
>
IsInline
(
)
)
{
iter
.
GetLine
(
)
-
>
MarkDirty
(
)
;
if
(
iter
.
GetContainer
(
)
!
=
this
)
{
aState
.
mReflowStatus
.
SetNextInFlowNeedsReflow
(
)
;
}
}
}
*
aLineReflowStatus
=
lineReflowStatus
;
}
void
nsBlockFrame
:
:
ReflowInlineFrame
(
BlockReflowInput
&
aState
nsLineLayout
&
aLineLayout
LineIterator
aLine
nsIFrame
*
aFrame
LineReflowStatus
*
aLineReflowStatus
)
{
if
(
!
aFrame
)
{
NS_ERROR
(
"
why
call
me
?
"
)
;
return
;
}
*
aLineReflowStatus
=
LineReflowStatus
:
:
OK
;
#
ifdef
NOISY_FIRST_LETTER
ListTag
(
stdout
)
;
printf
(
"
:
reflowing
"
)
;
nsFrame
:
:
ListTag
(
stdout
aFrame
)
;
printf
(
"
reflowingFirstLetter
=
%
s
\
n
"
aLineLayout
.
GetFirstLetterStyleOK
(
)
?
"
on
"
:
"
off
"
)
;
#
endif
if
(
aFrame
-
>
IsPlaceholderFrame
(
)
)
{
auto
ph
=
static_cast
<
nsPlaceholderFrame
*
>
(
aFrame
)
;
ph
-
>
ForgetLineIsEmptySoFar
(
)
;
}
nsReflowStatus
frameReflowStatus
;
bool
pushedFrame
;
aLineLayout
.
ReflowFrame
(
aFrame
frameReflowStatus
nullptr
pushedFrame
)
;
if
(
frameReflowStatus
.
NextInFlowNeedsReflow
(
)
)
{
aLineLayout
.
SetDirtyNextLine
(
)
;
}
#
ifdef
REALLY_NOISY_REFLOW
nsFrame
:
:
ListTag
(
stdout
aFrame
)
;
printf
(
"
:
status
=
%
x
\
n
"
frameReflowStatus
)
;
#
endif
#
if
defined
(
REFLOW_STATUS_COVERAGE
)
RecordReflowStatus
(
false
frameReflowStatus
)
;
#
endif
aState
.
mPrevChild
=
aFrame
;
aLine
-
>
SetBreakTypeAfter
(
StyleClear
:
:
None
)
;
if
(
frameReflowStatus
.
IsInlineBreak
(
)
|
|
StyleClear
:
:
None
!
=
aState
.
mFloatBreakType
)
{
*
aLineReflowStatus
=
LineReflowStatus
:
:
Stop
;
StyleClear
breakType
=
frameReflowStatus
.
BreakType
(
)
;
MOZ_ASSERT
(
StyleClear
:
:
None
!
=
breakType
|
|
StyleClear
:
:
None
!
=
aState
.
mFloatBreakType
"
bad
break
type
"
)
;
if
(
frameReflowStatus
.
IsInlineBreakBefore
(
)
)
{
if
(
aFrame
=
=
aLine
-
>
mFirstChild
)
{
*
aLineReflowStatus
=
LineReflowStatus
:
:
RedoNextBand
;
}
else
{
SplitLine
(
aState
aLineLayout
aLine
aFrame
aLineReflowStatus
)
;
if
(
pushedFrame
)
{
aLine
-
>
SetLineWrapped
(
true
)
;
}
}
}
else
{
if
(
StyleClear
:
:
None
!
=
aState
.
mFloatBreakType
)
{
breakType
=
nsLayoutUtils
:
:
CombineBreakType
(
breakType
aState
.
mFloatBreakType
)
;
aState
.
mFloatBreakType
=
StyleClear
:
:
None
;
}
if
(
breakType
=
=
StyleClear
:
:
Line
)
{
if
(
!
aLineLayout
.
GetLineEndsInBR
(
)
)
{
breakType
=
StyleClear
:
:
None
;
}
}
aLine
-
>
SetBreakTypeAfter
(
breakType
)
;
if
(
frameReflowStatus
.
IsComplete
(
)
)
{
SplitLine
(
aState
aLineLayout
aLine
aFrame
-
>
GetNextSibling
(
)
aLineReflowStatus
)
;
if
(
frameReflowStatus
.
IsInlineBreakAfter
(
)
&
&
!
aLineLayout
.
GetLineEndsInBR
(
)
)
{
aLineLayout
.
SetDirtyNextLine
(
)
;
}
}
}
}
if
(
!
frameReflowStatus
.
IsFullyComplete
(
)
)
{
CreateContinuationFor
(
aState
aLine
aFrame
)
;
if
(
!
aLineLayout
.
GetLineEndsInBR
(
)
)
{
aLine
-
>
SetLineWrapped
(
true
)
;
}
if
(
(
!
frameReflowStatus
.
FirstLetterComplete
(
)
&
&
!
aFrame
-
>
IsPlaceholderFrame
(
)
)
|
|
*
aLineReflowStatus
=
=
LineReflowStatus
:
:
Stop
)
{
*
aLineReflowStatus
=
LineReflowStatus
:
:
Stop
;
SplitLine
(
aState
aLineLayout
aLine
aFrame
-
>
GetNextSibling
(
)
aLineReflowStatus
)
;
}
}
}
bool
nsBlockFrame
:
:
CreateContinuationFor
(
BlockReflowInput
&
aState
nsLineBox
*
aLine
nsIFrame
*
aFrame
)
{
nsIFrame
*
newFrame
=
nullptr
;
if
(
!
aFrame
-
>
GetNextInFlow
(
)
)
{
newFrame
=
aState
.
mPresContext
-
>
PresShell
(
)
-
>
FrameConstructor
(
)
-
>
CreateContinuingFrame
(
aState
.
mPresContext
aFrame
this
)
;
mFrames
.
InsertFrame
(
nullptr
aFrame
newFrame
)
;
if
(
aLine
)
{
aLine
-
>
NoteFrameAdded
(
newFrame
)
;
}
}
#
ifdef
DEBUG
VerifyLines
(
false
)
;
#
endif
return
!
!
newFrame
;
}
nsresult
nsBlockFrame
:
:
SplitFloat
(
BlockReflowInput
&
aState
nsIFrame
*
aFloat
nsReflowStatus
aFloatStatus
)
{
MOZ_ASSERT
(
!
aFloatStatus
.
IsFullyComplete
(
)
"
why
split
the
frame
if
it
'
s
fully
complete
?
"
)
;
MOZ_ASSERT
(
aState
.
mBlock
=
=
this
)
;
nsIFrame
*
nextInFlow
=
aFloat
-
>
GetNextInFlow
(
)
;
if
(
nextInFlow
)
{
nsContainerFrame
*
oldParent
=
nextInFlow
-
>
GetParent
(
)
;
DebugOnly
<
nsresult
>
rv
=
oldParent
-
>
StealFrame
(
nextInFlow
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
StealFrame
failed
"
)
;
if
(
oldParent
!
=
this
)
{
ReparentFrame
(
nextInFlow
oldParent
this
)
;
}
if
(
!
aFloatStatus
.
IsOverflowIncomplete
(
)
)
{
nextInFlow
-
>
RemoveStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
;
}
}
else
{
nextInFlow
=
aState
.
mPresContext
-
>
PresShell
(
)
-
>
FrameConstructor
(
)
-
>
CreateContinuingFrame
(
aState
.
mPresContext
aFloat
this
)
;
}
if
(
aFloatStatus
.
IsOverflowIncomplete
(
)
)
{
nextInFlow
-
>
AddStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
;
}
StyleFloat
floatStyle
=
aFloat
-
>
StyleDisplay
(
)
-
>
PhysicalFloats
(
aState
.
mReflowInput
.
GetWritingMode
(
)
)
;
if
(
floatStyle
=
=
StyleFloat
:
:
Left
)
{
aState
.
FloatManager
(
)
-
>
SetSplitLeftFloatAcrossBreak
(
)
;
}
else
{
MOZ_ASSERT
(
floatStyle
=
=
StyleFloat
:
:
Right
"
Unexpected
float
side
!
"
)
;
aState
.
FloatManager
(
)
-
>
SetSplitRightFloatAcrossBreak
(
)
;
}
aState
.
AppendPushedFloatChain
(
nextInFlow
)
;
aState
.
mReflowStatus
.
SetOverflowIncomplete
(
)
;
return
NS_OK
;
}
static
nsFloatCache
*
GetLastFloat
(
nsLineBox
*
aLine
)
{
nsFloatCache
*
fc
=
aLine
-
>
GetFirstFloat
(
)
;
while
(
fc
&
&
fc
-
>
Next
(
)
)
{
fc
=
fc
-
>
Next
(
)
;
}
return
fc
;
}
static
bool
CheckPlaceholderInLine
(
nsIFrame
*
aBlock
nsLineBox
*
aLine
nsFloatCache
*
aFC
)
{
if
(
!
aFC
)
return
true
;
NS_ASSERTION
(
!
aFC
-
>
mFloat
-
>
GetPrevContinuation
(
)
"
float
in
a
line
should
never
be
a
continuation
"
)
;
NS_ASSERTION
(
!
(
aFC
-
>
mFloat
-
>
GetStateBits
(
)
&
NS_FRAME_IS_PUSHED_FLOAT
)
"
float
in
a
line
should
never
be
a
pushed
float
"
)
;
nsIFrame
*
ph
=
aFC
-
>
mFloat
-
>
FirstInFlow
(
)
-
>
GetPlaceholderFrame
(
)
;
for
(
nsIFrame
*
f
=
ph
;
f
;
f
=
f
-
>
GetParent
(
)
)
{
if
(
f
-
>
GetParent
(
)
=
=
aBlock
)
return
aLine
-
>
Contains
(
f
)
;
}
NS_ASSERTION
(
false
"
aBlock
is
not
an
ancestor
of
aFrame
!
"
)
;
return
true
;
}
void
nsBlockFrame
:
:
SplitLine
(
BlockReflowInput
&
aState
nsLineLayout
&
aLineLayout
LineIterator
aLine
nsIFrame
*
aFrame
LineReflowStatus
*
aLineReflowStatus
)
{
MOZ_ASSERT
(
aLine
-
>
IsInline
(
)
"
illegal
SplitLine
on
block
line
"
)
;
int32_t
pushCount
=
aLine
-
>
GetChildCount
(
)
-
aLineLayout
.
GetCurrentSpanCount
(
)
;
MOZ_ASSERT
(
pushCount
>
=
0
"
bad
push
count
"
)
;
#
ifdef
DEBUG
if
(
gNoisyReflow
)
{
nsFrame
:
:
IndentBy
(
stdout
gNoiseIndent
)
;
printf
(
"
split
line
:
from
line
=
%
p
pushCount
=
%
d
aFrame
=
"
static_cast
<
void
*
>
(
aLine
.
get
(
)
)
pushCount
)
;
if
(
aFrame
)
{
nsFrame
:
:
ListTag
(
stdout
aFrame
)
;
}
else
{
printf
(
"
(
null
)
"
)
;
}
printf
(
"
\
n
"
)
;
if
(
gReallyNoisyReflow
)
{
aLine
-
>
List
(
stdout
gNoiseIndent
+
1
)
;
}
}
#
endif
if
(
0
!
=
pushCount
)
{
MOZ_ASSERT
(
aLine
-
>
GetChildCount
(
)
>
pushCount
"
bad
push
"
)
;
MOZ_ASSERT
(
nullptr
!
=
aFrame
"
whoops
"
)
;
#
ifdef
DEBUG
{
nsIFrame
*
f
=
aFrame
;
int32_t
count
=
pushCount
;
while
(
f
&
&
count
>
0
)
{
f
=
f
-
>
GetNextSibling
(
)
;
-
-
count
;
}
NS_ASSERTION
(
count
=
=
0
"
Not
enough
frames
to
push
"
)
;
}
#
endif
nsLineBox
*
newLine
=
NewLineBox
(
aLine
aFrame
pushCount
)
;
mLines
.
after_insert
(
aLine
newLine
)
;
#
ifdef
DEBUG
if
(
gReallyNoisyReflow
)
{
newLine
-
>
List
(
stdout
gNoiseIndent
+
1
)
;
}
#
endif
aLineLayout
.
SplitLineTo
(
aLine
-
>
GetChildCount
(
)
)
;
if
(
!
CheckPlaceholderInLine
(
this
aLine
GetLastFloat
(
aLine
)
)
|
|
!
CheckPlaceholderInLine
(
this
aLine
aState
.
mBelowCurrentLineFloats
.
Tail
(
)
)
)
{
*
aLineReflowStatus
=
LineReflowStatus
:
:
RedoNoPull
;
}
#
ifdef
DEBUG
VerifyLines
(
true
)
;
#
endif
}
}
bool
nsBlockFrame
:
:
IsLastLine
(
BlockReflowInput
&
aState
LineIterator
aLine
)
{
while
(
+
+
aLine
!
=
LinesEnd
(
)
)
{
if
(
0
!
=
aLine
-
>
GetChildCount
(
)
)
{
return
aLine
-
>
IsBlock
(
)
;
}
}
nsBlockFrame
*
nextInFlow
=
(
nsBlockFrame
*
)
GetNextInFlow
(
)
;
while
(
nullptr
!
=
nextInFlow
)
{
for
(
LineIterator
line
=
nextInFlow
-
>
LinesBegin
(
)
line_end
=
nextInFlow
-
>
LinesEnd
(
)
;
line
!
=
line_end
;
+
+
line
)
{
if
(
0
!
=
line
-
>
GetChildCount
(
)
)
return
line
-
>
IsBlock
(
)
;
}
nextInFlow
=
(
nsBlockFrame
*
)
nextInFlow
-
>
GetNextInFlow
(
)
;
}
return
true
;
}
bool
nsBlockFrame
:
:
PlaceLine
(
BlockReflowInput
&
aState
nsLineLayout
&
aLineLayout
LineIterator
aLine
nsFloatManager
:
:
SavedState
*
aFloatStateBeforeLine
LogicalRect
&
aFloatAvailableSpace
nscoord
&
aAvailableSpaceBSize
bool
*
aKeepReflowGoing
)
{
aLineLayout
.
TrimTrailingWhiteSpace
(
)
;
WritingMode
wm
=
aState
.
mReflowInput
.
GetWritingMode
(
)
;
bool
addedBullet
=
false
;
if
(
HasOutsideBullet
(
)
&
&
(
(
aLine
=
=
mLines
.
front
(
)
&
&
(
!
aLineLayout
.
IsZeroBSize
(
)
|
|
(
aLine
=
=
mLines
.
back
(
)
)
)
)
|
|
(
mLines
.
front
(
)
!
=
mLines
.
back
(
)
&
&
0
=
=
mLines
.
front
(
)
-
>
BSize
(
)
&
&
aLine
=
=
mLines
.
begin
(
)
.
next
(
)
)
)
)
{
ReflowOutput
metrics
(
aState
.
mReflowInput
)
;
nsIFrame
*
bullet
=
GetOutsideBullet
(
)
;
ReflowBullet
(
bullet
aState
metrics
aState
.
mBCoord
)
;
NS_ASSERTION
(
!
BulletIsEmpty
(
)
|
|
metrics
.
BSize
(
wm
)
=
=
0
"
empty
bullet
took
up
space
"
)
;
aLineLayout
.
AddBulletFrame
(
bullet
metrics
)
;
addedBullet
=
true
;
}
aLineLayout
.
VerticalAlignLine
(
)
;
LogicalRect
floatAvailableSpaceWithOldLineBSize
=
aState
.
mLineBSize
.
isNothing
(
)
?
aState
.
GetFloatAvailableSpace
(
aLine
-
>
BStart
(
)
)
.
mRect
:
aState
.
GetFloatAvailableSpaceForBSize
(
aLine
-
>
BStart
(
)
aState
.
mLineBSize
.
value
(
)
nullptr
)
.
mRect
;
aAvailableSpaceBSize
=
std
:
:
max
(
aAvailableSpaceBSize
aLine
-
>
BSize
(
)
)
;
LogicalRect
floatAvailableSpaceWithLineBSize
=
aState
.
GetFloatAvailableSpaceForBSize
(
aLine
-
>
BStart
(
)
aAvailableSpaceBSize
nullptr
)
.
mRect
;
if
(
AvailableSpaceShrunk
(
wm
floatAvailableSpaceWithOldLineBSize
floatAvailableSpaceWithLineBSize
false
)
)
{
aState
.
mLineBSize
=
Some
(
aLine
-
>
BSize
(
)
)
;
LogicalRect
oldFloatAvailableSpace
(
aFloatAvailableSpace
)
;
aFloatAvailableSpace
=
aState
.
GetFloatAvailableSpaceForBSize
(
aLine
-
>
BStart
(
)
aAvailableSpaceBSize
aFloatStateBeforeLine
)
.
mRect
;
NS_ASSERTION
(
aFloatAvailableSpace
.
BStart
(
wm
)
=
=
oldFloatAvailableSpace
.
BStart
(
wm
)
"
yikes
"
)
;
aFloatAvailableSpace
.
BSize
(
wm
)
=
oldFloatAvailableSpace
.
BSize
(
wm
)
;
const
nscoord
iStartDiff
=
aFloatAvailableSpace
.
IStart
(
wm
)
-
oldFloatAvailableSpace
.
IStart
(
wm
)
;
const
nscoord
iEndDiff
=
aFloatAvailableSpace
.
IEnd
(
wm
)
-
oldFloatAvailableSpace
.
IEnd
(
wm
)
;
if
(
iStartDiff
<
0
)
{
aFloatAvailableSpace
.
IStart
(
wm
)
-
=
iStartDiff
;
aFloatAvailableSpace
.
ISize
(
wm
)
+
=
iStartDiff
;
}
if
(
iEndDiff
>
0
)
{
aFloatAvailableSpace
.
ISize
(
wm
)
-
=
iEndDiff
;
}
return
false
;
}
#
ifdef
DEBUG
if
(
!
GetParent
(
)
-
>
IsCrazySizeAssertSuppressed
(
)
)
{
static
nscoord
lastHeight
=
0
;
if
(
CRAZY_SIZE
(
aLine
-
>
BStart
(
)
)
)
{
lastHeight
=
aLine
-
>
BStart
(
)
;
if
(
abs
(
aLine
-
>
BStart
(
)
-
lastHeight
)
>
CRAZY_COORD
/
10
)
{
nsFrame
:
:
ListTag
(
stdout
)
;
printf
(
"
:
line
=
%
p
y
=
%
d
line
.
bounds
.
height
=
%
d
\
n
"
static_cast
<
void
*
>
(
aLine
.
get
(
)
)
aLine
-
>
BStart
(
)
aLine
-
>
BSize
(
)
)
;
}
}
else
{
lastHeight
=
0
;
}
}
#
endif
const
nsStyleText
*
styleText
=
StyleText
(
)
;
bool
isLastLine
=
!
nsSVGUtils
:
:
IsInSVGTextSubtree
(
this
)
&
&
(
(
NS_STYLE_TEXT_ALIGN_AUTO
!
=
styleText
-
>
mTextAlignLast
|
|
NS_STYLE_TEXT_ALIGN_JUSTIFY
=
=
styleText
-
>
mTextAlign
)
&
&
(
aLineLayout
.
GetLineEndsInBR
(
)
|
|
IsLastLine
(
aState
aLine
)
)
)
;
aLineLayout
.
TextAlignLine
(
aLine
isLastLine
)
;
nsOverflowAreas
overflowAreas
;
aLineLayout
.
RelativePositionFrames
(
overflowAreas
)
;
aLine
-
>
SetOverflowAreas
(
overflowAreas
)
;
if
(
addedBullet
)
{
aLineLayout
.
RemoveBulletFrame
(
GetOutsideBullet
(
)
)
;
}
nscoord
newBCoord
;
if
(
!
aLine
-
>
CachedIsEmpty
(
)
)
{
aState
.
mPrevBEndMargin
.
Zero
(
)
;
newBCoord
=
aLine
-
>
BEnd
(
)
;
}
else
{
nscoord
dy
=
aState
.
mFlags
.
mShouldApplyBStartMargin
?
-
aState
.
mPrevBEndMargin
.
get
(
)
:
0
;
newBCoord
=
aState
.
mBCoord
+
dy
;
}
if
(
!
aState
.
mReflowStatus
.
IsFullyComplete
(
)
&
&
ShouldAvoidBreakInside
(
aState
.
mReflowInput
)
)
{
aLine
-
>
AppendFloats
(
aState
.
mCurrentLineFloats
)
;
aState
.
mReflowStatus
.
SetInlineLineBreakBeforeAndReset
(
)
;
aLine
-
>
MarkDirty
(
)
;
return
true
;
}
if
(
mLines
.
front
(
)
!
=
aLine
&
&
newBCoord
>
aState
.
mBEndEdge
&
&
aState
.
mBEndEdge
!
=
NS_UNCONSTRAINEDSIZE
)
{
NS_ASSERTION
(
aState
.
mCurrentLine
=
=
aLine
"
oops
"
)
;
if
(
ShouldAvoidBreakInside
(
aState
.
mReflowInput
)
)
{
aState
.
mReflowStatus
.
SetInlineLineBreakBeforeAndReset
(
)
;
}
else
{
PushTruncatedLine
(
aState
aLine
aKeepReflowGoing
)
;
}
return
true
;
}
aState
.
mBCoord
=
newBCoord
;
aLine
-
>
AppendFloats
(
aState
.
mCurrentLineFloats
)
;
if
(
aState
.
mBelowCurrentLineFloats
.
NotEmpty
(
)
)
{
aState
.
PlaceBelowCurrentLineFloats
(
aState
.
mBelowCurrentLineFloats
aLine
)
;
aLine
-
>
AppendFloats
(
aState
.
mBelowCurrentLineFloats
)
;
}
if
(
aLine
-
>
HasFloats
(
)
)
{
nsOverflowAreas
lineOverflowAreas
;
NS_FOR_FRAME_OVERFLOW_TYPES
(
otype
)
{
nsRect
&
o
=
lineOverflowAreas
.
Overflow
(
otype
)
;
o
=
aLine
-
>
GetOverflowArea
(
otype
)
;
#
ifdef
NOISY_COMBINED_AREA
ListTag
(
stdout
)
;
printf
(
"
:
overflow
%
d
lineCA
=
%
d
%
d
%
d
%
d
floatCA
=
%
d
%
d
%
d
%
d
\
n
"
otype
o
.
x
o
.
y
o
.
width
o
.
height
aState
.
mFloatOverflowAreas
.
Overflow
(
otype
)
.
x
aState
.
mFloatOverflowAreas
.
Overflow
(
otype
)
.
y
aState
.
mFloatOverflowAreas
.
Overflow
(
otype
)
.
width
aState
.
mFloatOverflowAreas
.
Overflow
(
otype
)
.
height
)
;
#
endif
o
.
UnionRect
(
aState
.
mFloatOverflowAreas
.
Overflow
(
otype
)
o
)
;
#
ifdef
NOISY_COMBINED_AREA
printf
(
"
=
=
>
final
lineCA
=
%
d
%
d
%
d
%
d
\
n
"
o
.
x
o
.
y
o
.
width
o
.
height
)
;
#
endif
}
aLine
-
>
SetOverflowAreas
(
lineOverflowAreas
)
;
}
if
(
aLine
-
>
HasFloatBreakAfter
(
)
)
{
aState
.
mBCoord
=
aState
.
ClearFloats
(
aState
.
mBCoord
aLine
-
>
GetBreakTypeAfter
(
)
)
;
}
return
true
;
}
void
nsBlockFrame
:
:
PushLines
(
BlockReflowInput
&
aState
nsLineList
:
:
iterator
aLineBefore
)
{
DebugOnly
<
bool
>
check
=
aLineBefore
=
=
mLines
.
begin
(
)
;
nsLineList
:
:
iterator
overBegin
(
aLineBefore
.
next
(
)
)
;
bool
firstLine
=
overBegin
=
=
LinesBegin
(
)
;
if
(
overBegin
!
=
LinesEnd
(
)
)
{
nsFrameList
floats
;
CollectFloats
(
overBegin
-
>
mFirstChild
floats
true
)
;
if
(
floats
.
NotEmpty
(
)
)
{
#
ifdef
DEBUG
for
(
nsIFrame
*
f
:
floats
)
{
MOZ_ASSERT
(
!
(
f
-
>
GetStateBits
(
)
&
NS_FRAME_IS_PUSHED_FLOAT
)
"
CollectFloats
should
'
ve
removed
that
bit
"
)
;
}
#
endif
nsAutoOOFFrameList
oofs
(
this
)
;
oofs
.
mList
.
InsertFrames
(
nullptr
nullptr
floats
)
;
}
FrameLines
*
overflowLines
=
RemoveOverflowLines
(
)
;
if
(
!
overflowLines
)
{
overflowLines
=
new
FrameLines
(
)
;
}
if
(
overflowLines
)
{
nsIFrame
*
lineBeforeLastFrame
;
if
(
firstLine
)
{
lineBeforeLastFrame
=
nullptr
;
}
else
{
nsIFrame
*
f
=
overBegin
-
>
mFirstChild
;
lineBeforeLastFrame
=
f
?
f
-
>
GetPrevSibling
(
)
:
mFrames
.
LastChild
(
)
;
NS_ASSERTION
(
!
f
|
|
lineBeforeLastFrame
=
=
aLineBefore
-
>
LastChild
(
)
"
unexpected
line
frames
"
)
;
}
nsFrameList
pushedFrames
=
mFrames
.
RemoveFramesAfter
(
lineBeforeLastFrame
)
;
overflowLines
-
>
mFrames
.
InsertFrames
(
nullptr
nullptr
pushedFrames
)
;
overflowLines
-
>
mLines
.
splice
(
overflowLines
-
>
mLines
.
begin
(
)
mLines
overBegin
LinesEnd
(
)
)
;
NS_ASSERTION
(
!
overflowLines
-
>
mLines
.
empty
(
)
"
should
not
be
empty
"
)
;
SetOverflowLines
(
overflowLines
)
;
for
(
LineIterator
line
=
overflowLines
-
>
mLines
.
begin
(
)
line_end
=
overflowLines
-
>
mLines
.
end
(
)
;
line
!
=
line_end
;
+
+
line
)
{
line
-
>
MarkDirty
(
)
;
line
-
>
MarkPreviousMarginDirty
(
)
;
line
-
>
SetBoundsEmpty
(
)
;
if
(
line
-
>
HasFloats
(
)
)
{
line
-
>
FreeFloats
(
aState
.
mFloatCacheFreeList
)
;
}
}
}
}
#
ifdef
DEBUG
VerifyOverflowSituation
(
)
;
#
endif
}
bool
nsBlockFrame
:
:
DrainOverflowLines
(
)
{
#
ifdef
DEBUG
VerifyOverflowSituation
(
)
;
#
endif
bool
didFindOverflow
=
false
;
nsBlockFrame
*
prevBlock
=
static_cast
<
nsBlockFrame
*
>
(
GetPrevInFlow
(
)
)
;
if
(
prevBlock
)
{
prevBlock
-
>
ClearLineCursor
(
)
;
FrameLines
*
overflowLines
=
prevBlock
-
>
RemoveOverflowLines
(
)
;
if
(
overflowLines
)
{
ReparentFrames
(
overflowLines
-
>
mFrames
prevBlock
this
)
;
nsAutoOOFFrameList
oofs
(
prevBlock
)
;
if
(
oofs
.
mList
.
NotEmpty
(
)
)
{
for
(
nsFrameList
:
:
Enumerator
e
(
oofs
.
mList
)
;
!
e
.
AtEnd
(
)
;
e
.
Next
(
)
)
{
nsIFrame
*
nif
=
e
.
get
(
)
-
>
GetNextInFlow
(
)
;
for
(
;
nif
&
&
nif
-
>
GetParent
(
)
=
=
this
;
nif
=
nif
-
>
GetNextInFlow
(
)
)
{
MOZ_ASSERT
(
mFloats
.
ContainsFrame
(
nif
)
)
;
nif
-
>
RemoveStateBits
(
NS_FRAME_IS_PUSHED_FLOAT
)
;
}
}
ReparentFrames
(
oofs
.
mList
prevBlock
this
)
;
mFloats
.
InsertFrames
(
nullptr
nullptr
oofs
.
mList
)
;
}
if
(
!
mLines
.
empty
(
)
)
{
mLines
.
front
(
)
-
>
MarkPreviousMarginDirty
(
)
;
}
mFrames
.
InsertFrames
(
nullptr
nullptr
overflowLines
-
>
mFrames
)
;
mLines
.
splice
(
mLines
.
begin
(
)
overflowLines
-
>
mLines
)
;
NS_ASSERTION
(
overflowLines
-
>
mLines
.
empty
(
)
"
splice
should
empty
list
"
)
;
delete
overflowLines
;
didFindOverflow
=
true
;
}
}
return
DrainSelfOverflowList
(
)
|
|
didFindOverflow
;
}
bool
nsBlockFrame
:
:
DrainSelfOverflowList
(
)
{
UniquePtr
<
FrameLines
>
ourOverflowLines
(
RemoveOverflowLines
(
)
)
;
if
(
!
ourOverflowLines
)
{
return
false
;
}
{
nsAutoOOFFrameList
oofs
(
this
)
;
if
(
oofs
.
mList
.
NotEmpty
(
)
)
{
#
ifdef
DEBUG
for
(
nsIFrame
*
f
:
oofs
.
mList
)
{
MOZ_ASSERT
(
!
(
f
-
>
GetStateBits
(
)
&
NS_FRAME_IS_PUSHED_FLOAT
)
"
CollectFloats
should
'
ve
removed
that
bit
"
)
;
}
#
endif
mFloats
.
AppendFrames
(
nullptr
oofs
.
mList
)
;
}
}
if
(
!
ourOverflowLines
-
>
mLines
.
empty
(
)
)
{
mFrames
.
AppendFrames
(
nullptr
ourOverflowLines
-
>
mFrames
)
;
mLines
.
splice
(
mLines
.
end
(
)
ourOverflowLines
-
>
mLines
)
;
}
#
ifdef
DEBUG
VerifyOverflowSituation
(
)
;
#
endif
return
true
;
}
void
nsBlockFrame
:
:
DrainSelfPushedFloats
(
)
{
nsPresContext
*
presContext
=
PresContext
(
)
;
nsFrameList
*
ourPushedFloats
=
GetPushedFloats
(
)
;
if
(
ourPushedFloats
)
{
nsIFrame
*
insertionPrevSibling
=
nullptr
;
for
(
nsIFrame
*
f
=
mFloats
.
FirstChild
(
)
;
f
&
&
(
f
-
>
GetStateBits
(
)
&
NS_FRAME_IS_PUSHED_FLOAT
)
;
f
=
f
-
>
GetNextSibling
(
)
)
{
insertionPrevSibling
=
f
;
}
for
(
nsIFrame
*
f
=
ourPushedFloats
-
>
LastChild
(
)
*
next
;
f
;
f
=
next
)
{
next
=
f
-
>
GetPrevSibling
(
)
;
if
(
f
-
>
GetPrevContinuation
(
)
)
{
}
else
{
nsPlaceholderFrame
*
placeholder
=
f
-
>
GetPlaceholderFrame
(
)
;
nsIFrame
*
floatOriginalParent
=
presContext
-
>
PresShell
(
)
-
>
FrameConstructor
(
)
-
>
GetFloatContainingBlock
(
placeholder
)
;
if
(
floatOriginalParent
!
=
this
)
{
ourPushedFloats
-
>
RemoveFrame
(
f
)
;
mFloats
.
InsertFrame
(
nullptr
insertionPrevSibling
f
)
;
}
}
}
if
(
ourPushedFloats
-
>
IsEmpty
(
)
)
{
RemovePushedFloats
(
)
-
>
Delete
(
presContext
-
>
PresShell
(
)
)
;
}
}
}
void
nsBlockFrame
:
:
DrainPushedFloats
(
)
{
DrainSelfPushedFloats
(
)
;
nsBlockFrame
*
prevBlock
=
static_cast
<
nsBlockFrame
*
>
(
GetPrevInFlow
(
)
)
;
if
(
prevBlock
)
{
AutoFrameListPtr
list
(
PresContext
(
)
prevBlock
-
>
RemovePushedFloats
(
)
)
;
if
(
list
&
&
list
-
>
NotEmpty
(
)
)
{
mFloats
.
InsertFrames
(
this
nullptr
*
list
)
;
}
}
}
nsBlockFrame
:
:
FrameLines
*
nsBlockFrame
:
:
GetOverflowLines
(
)
const
{
if
(
!
HasOverflowLines
(
)
)
{
return
nullptr
;
}
FrameLines
*
prop
=
GetProperty
(
OverflowLinesProperty
(
)
)
;
NS_ASSERTION
(
prop
&
&
!
prop
-
>
mLines
.
empty
(
)
&
&
prop
-
>
mLines
.
front
(
)
-
>
GetChildCount
(
)
=
=
0
?
prop
-
>
mFrames
.
IsEmpty
(
)
:
prop
-
>
mLines
.
front
(
)
-
>
mFirstChild
=
=
prop
-
>
mFrames
.
FirstChild
(
)
"
value
should
always
be
stored
and
non
-
empty
when
state
set
"
)
;
return
prop
;
}
nsBlockFrame
:
:
FrameLines
*
nsBlockFrame
:
:
RemoveOverflowLines
(
)
{
if
(
!
HasOverflowLines
(
)
)
{
return
nullptr
;
}
FrameLines
*
prop
=
RemoveProperty
(
OverflowLinesProperty
(
)
)
;
NS_ASSERTION
(
prop
&
&
!
prop
-
>
mLines
.
empty
(
)
&
&
prop
-
>
mLines
.
front
(
)
-
>
GetChildCount
(
)
=
=
0
?
prop
-
>
mFrames
.
IsEmpty
(
)
:
prop
-
>
mLines
.
front
(
)
-
>
mFirstChild
=
=
prop
-
>
mFrames
.
FirstChild
(
)
"
value
should
always
be
stored
and
non
-
empty
when
state
set
"
)
;
RemoveStateBits
(
NS_BLOCK_HAS_OVERFLOW_LINES
)
;
return
prop
;
}
void
nsBlockFrame
:
:
DestroyOverflowLines
(
)
{
NS_ASSERTION
(
HasOverflowLines
(
)
"
huh
?
"
)
;
FrameLines
*
prop
=
RemoveProperty
(
OverflowLinesProperty
(
)
)
;
NS_ASSERTION
(
prop
&
&
prop
-
>
mLines
.
empty
(
)
"
value
should
always
be
stored
but
empty
when
destroying
"
)
;
RemoveStateBits
(
NS_BLOCK_HAS_OVERFLOW_LINES
)
;
delete
prop
;
}
void
nsBlockFrame
:
:
SetOverflowLines
(
FrameLines
*
aOverflowLines
)
{
NS_ASSERTION
(
aOverflowLines
"
null
lines
"
)
;
NS_ASSERTION
(
!
aOverflowLines
-
>
mLines
.
empty
(
)
"
empty
lines
"
)
;
NS_ASSERTION
(
aOverflowLines
-
>
mLines
.
front
(
)
-
>
mFirstChild
=
=
aOverflowLines
-
>
mFrames
.
FirstChild
(
)
"
invalid
overflow
lines
/
frames
"
)
;
NS_ASSERTION
(
!
(
GetStateBits
(
)
&
NS_BLOCK_HAS_OVERFLOW_LINES
)
"
Overwriting
existing
overflow
lines
"
)
;
NS_ASSERTION
(
!
GetProperty
(
OverflowLinesProperty
(
)
)
"
existing
overflow
list
"
)
;
SetProperty
(
OverflowLinesProperty
(
)
aOverflowLines
)
;
AddStateBits
(
NS_BLOCK_HAS_OVERFLOW_LINES
)
;
}
nsFrameList
*
nsBlockFrame
:
:
GetOverflowOutOfFlows
(
)
const
{
if
(
!
(
GetStateBits
(
)
&
NS_BLOCK_HAS_OVERFLOW_OUT_OF_FLOWS
)
)
{
return
nullptr
;
}
nsFrameList
*
result
=
GetPropTableFrames
(
OverflowOutOfFlowsProperty
(
)
)
;
NS_ASSERTION
(
result
"
value
should
always
be
non
-
empty
when
state
set
"
)
;
return
result
;
}
void
nsBlockFrame
:
:
SetOverflowOutOfFlows
(
const
nsFrameList
&
aList
nsFrameList
*
aPropValue
)
{
NS_PRECONDITION
(
!
!
(
GetStateBits
(
)
&
NS_BLOCK_HAS_OVERFLOW_OUT_OF_FLOWS
)
=
=
!
!
aPropValue
"
state
does
not
match
value
"
)
;
if
(
aList
.
IsEmpty
(
)
)
{
if
(
!
(
GetStateBits
(
)
&
NS_BLOCK_HAS_OVERFLOW_OUT_OF_FLOWS
)
)
{
return
;
}
nsFrameList
*
list
=
RemovePropTableFrames
(
OverflowOutOfFlowsProperty
(
)
)
;
NS_ASSERTION
(
aPropValue
=
=
list
"
prop
value
mismatch
"
)
;
list
-
>
Clear
(
)
;
list
-
>
Delete
(
PresContext
(
)
-
>
PresShell
(
)
)
;
RemoveStateBits
(
NS_BLOCK_HAS_OVERFLOW_OUT_OF_FLOWS
)
;
}
else
if
(
GetStateBits
(
)
&
NS_BLOCK_HAS_OVERFLOW_OUT_OF_FLOWS
)
{
NS_ASSERTION
(
aPropValue
=
=
GetPropTableFrames
(
OverflowOutOfFlowsProperty
(
)
)
"
prop
value
mismatch
"
)
;
*
aPropValue
=
aList
;
}
else
{
SetPropTableFrames
(
new
(
PresContext
(
)
-
>
PresShell
(
)
)
nsFrameList
(
aList
)
OverflowOutOfFlowsProperty
(
)
)
;
AddStateBits
(
NS_BLOCK_HAS_OVERFLOW_OUT_OF_FLOWS
)
;
}
}
nsBulletFrame
*
nsBlockFrame
:
:
GetInsideBullet
(
)
const
{
if
(
!
HasInsideBullet
(
)
)
{
return
nullptr
;
}
NS_ASSERTION
(
!
HasOutsideBullet
(
)
"
invalid
bullet
state
"
)
;
nsBulletFrame
*
frame
=
GetProperty
(
InsideBulletProperty
(
)
)
;
NS_ASSERTION
(
frame
&
&
frame
-
>
IsBulletFrame
(
)
"
bogus
inside
bullet
frame
"
)
;
return
frame
;
}
nsBulletFrame
*
nsBlockFrame
:
:
GetOutsideBullet
(
)
const
{
nsFrameList
*
list
=
GetOutsideBulletList
(
)
;
return
list
?
static_cast
<
nsBulletFrame
*
>
(
list
-
>
FirstChild
(
)
)
:
nullptr
;
}
nsFrameList
*
nsBlockFrame
:
:
GetOutsideBulletList
(
)
const
{
if
(
!
HasOutsideBullet
(
)
)
{
return
nullptr
;
}
NS_ASSERTION
(
!
HasInsideBullet
(
)
"
invalid
bullet
state
"
)
;
nsFrameList
*
list
=
GetProperty
(
OutsideBulletProperty
(
)
)
;
NS_ASSERTION
(
list
&
&
list
-
>
GetLength
(
)
=
=
1
&
&
list
-
>
FirstChild
(
)
-
>
IsBulletFrame
(
)
"
bogus
outside
bullet
list
"
)
;
return
list
;
}
nsFrameList
*
nsBlockFrame
:
:
GetPushedFloats
(
)
const
{
if
(
!
HasPushedFloats
(
)
)
{
return
nullptr
;
}
nsFrameList
*
result
=
GetProperty
(
PushedFloatProperty
(
)
)
;
NS_ASSERTION
(
result
"
value
should
always
be
non
-
empty
when
state
set
"
)
;
return
result
;
}
nsFrameList
*
nsBlockFrame
:
:
EnsurePushedFloats
(
)
{
nsFrameList
*
result
=
GetPushedFloats
(
)
;
if
(
result
)
return
result
;
result
=
new
(
PresContext
(
)
-
>
PresShell
(
)
)
nsFrameList
;
SetProperty
(
PushedFloatProperty
(
)
result
)
;
AddStateBits
(
NS_BLOCK_HAS_PUSHED_FLOATS
)
;
return
result
;
}
nsFrameList
*
nsBlockFrame
:
:
RemovePushedFloats
(
)
{
if
(
!
HasPushedFloats
(
)
)
{
return
nullptr
;
}
nsFrameList
*
result
=
RemoveProperty
(
PushedFloatProperty
(
)
)
;
RemoveStateBits
(
NS_BLOCK_HAS_PUSHED_FLOATS
)
;
NS_ASSERTION
(
result
"
value
should
always
be
non
-
empty
when
state
set
"
)
;
return
result
;
}
void
nsBlockFrame
:
:
AppendFrames
(
ChildListID
aListID
nsFrameList
&
aFrameList
)
{
if
(
aFrameList
.
IsEmpty
(
)
)
{
return
;
}
if
(
aListID
!
=
kPrincipalList
)
{
if
(
kFloatList
=
=
aListID
)
{
DrainSelfPushedFloats
(
)
;
mFloats
.
AppendFrames
(
nullptr
aFrameList
)
;
return
;
}
MOZ_ASSERT
(
kNoReflowPrincipalList
=
=
aListID
"
unexpected
child
list
"
)
;
}
nsIFrame
*
lastKid
=
mFrames
.
LastChild
(
)
;
NS_ASSERTION
(
(
mLines
.
empty
(
)
?
nullptr
:
mLines
.
back
(
)
-
>
LastChild
(
)
)
=
=
lastKid
"
out
-
of
-
sync
mLines
/
mFrames
"
)
;
#
ifdef
NOISY_REFLOW_REASON
ListTag
(
stdout
)
;
printf
(
"
:
append
"
)
;
nsFrame
:
:
ListTag
(
stdout
aFrameList
)
;
if
(
lastKid
)
{
printf
(
"
after
"
)
;
nsFrame
:
:
ListTag
(
stdout
lastKid
)
;
}
printf
(
"
\
n
"
)
;
#
endif
AddFrames
(
aFrameList
lastKid
)
;
if
(
aListID
!
=
kNoReflowPrincipalList
)
{
PresContext
(
)
-
>
PresShell
(
)
-
>
FrameNeedsReflow
(
this
nsIPresShell
:
:
eTreeChange
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
}
}
void
nsBlockFrame
:
:
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
nsFrameList
&
aFrameList
)
{
NS_ASSERTION
(
!
aPrevFrame
|
|
aPrevFrame
-
>
GetParent
(
)
=
=
this
"
inserting
after
sibling
frame
with
different
parent
"
)
;
if
(
aListID
!
=
kPrincipalList
)
{
if
(
kFloatList
=
=
aListID
)
{
DrainSelfPushedFloats
(
)
;
mFloats
.
InsertFrames
(
this
aPrevFrame
aFrameList
)
;
return
;
}
MOZ_ASSERT
(
kNoReflowPrincipalList
=
=
aListID
"
unexpected
child
list
"
)
;
}
#
ifdef
NOISY_REFLOW_REASON
ListTag
(
stdout
)
;
printf
(
"
:
insert
"
)
;
nsFrame
:
:
ListTag
(
stdout
aFrameList
)
;
if
(
aPrevFrame
)
{
printf
(
"
after
"
)
;
nsFrame
:
:
ListTag
(
stdout
aPrevFrame
)
;
}
printf
(
"
\
n
"
)
;
#
endif
AddFrames
(
aFrameList
aPrevFrame
)
;
if
(
aListID
!
=
kNoReflowPrincipalList
)
{
PresContext
(
)
-
>
PresShell
(
)
-
>
FrameNeedsReflow
(
this
nsIPresShell
:
:
eTreeChange
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
}
}
void
nsBlockFrame
:
:
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
{
#
ifdef
NOISY_REFLOW_REASON
ListTag
(
stdout
)
;
printf
(
"
:
remove
"
)
;
nsFrame
:
:
ListTag
(
stdout
aOldFrame
)
;
printf
(
"
\
n
"
)
;
#
endif
if
(
aListID
=
=
kPrincipalList
)
{
bool
hasFloats
=
BlockHasAnyFloats
(
aOldFrame
)
;
DoRemoveFrame
(
aOldFrame
REMOVE_FIXED_CONTINUATIONS
)
;
if
(
hasFloats
)
{
MarkSameFloatManagerLinesDirty
(
this
)
;
}
}
else
if
(
kFloatList
=
=
aListID
)
{
NS_ASSERTION
(
!
aOldFrame
-
>
GetPrevContinuation
(
)
"
RemoveFrame
should
not
be
called
on
pushed
floats
.
"
)
;
for
(
nsIFrame
*
f
=
aOldFrame
;
f
&
&
!
(
f
-
>
GetStateBits
(
)
&
NS_FRAME_IS_OVERFLOW_CONTAINER
)
;
f
=
f
-
>
GetNextContinuation
(
)
)
{
MarkSameFloatManagerLinesDirty
(
static_cast
<
nsBlockFrame
*
>
(
f
-
>
GetParent
(
)
)
)
;
}
DoRemoveOutOfFlowFrame
(
aOldFrame
)
;
}
else
if
(
kNoReflowPrincipalList
=
=
aListID
)
{
DoRemoveFrame
(
aOldFrame
REMOVE_FIXED_CONTINUATIONS
)
;
return
;
}
else
{
MOZ_CRASH
(
"
unexpected
child
list
"
)
;
}
PresContext
(
)
-
>
PresShell
(
)
-
>
FrameNeedsReflow
(
this
nsIPresShell
:
:
eTreeChange
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
}
static
bool
ShouldPutNextSiblingOnNewLine
(
nsIFrame
*
aLastFrame
)
{
LayoutFrameType
type
=
aLastFrame
-
>
Type
(
)
;
if
(
type
=
=
LayoutFrameType
:
:
Br
)
{
return
true
;
}
if
(
type
=
=
LayoutFrameType
:
:
Text
&
&
!
(
aLastFrame
-
>
GetStateBits
(
)
&
TEXT_OFFSETS_NEED_FIXING
)
)
{
return
aLastFrame
-
>
HasSignificantTerminalNewline
(
)
;
}
return
false
;
}
void
nsBlockFrame
:
:
AddFrames
(
nsFrameList
&
aFrameList
nsIFrame
*
aPrevSibling
)
{
ClearLineCursor
(
)
;
if
(
aFrameList
.
IsEmpty
(
)
)
{
return
;
}
if
(
!
aPrevSibling
&
&
HasInsideBullet
(
)
)
{
aPrevSibling
=
GetInsideBullet
(
)
;
}
nsLineList
*
lineList
=
&
mLines
;
nsFrameList
*
frames
=
&
mFrames
;
nsLineList
:
:
iterator
prevSibLine
=
lineList
-
>
end
(
)
;
int32_t
prevSiblingIndex
=
-
1
;
if
(
aPrevSibling
)
{
if
(
!
nsLineBox
:
:
RFindLineContaining
(
aPrevSibling
lineList
-
>
begin
(
)
prevSibLine
mFrames
.
LastChild
(
)
&
prevSiblingIndex
)
)
{
FrameLines
*
overflowLines
=
GetOverflowLines
(
)
;
bool
found
=
false
;
if
(
overflowLines
)
{
prevSibLine
=
overflowLines
-
>
mLines
.
end
(
)
;
prevSiblingIndex
=
-
1
;
found
=
nsLineBox
:
:
RFindLineContaining
(
aPrevSibling
overflowLines
-
>
mLines
.
begin
(
)
prevSibLine
overflowLines
-
>
mFrames
.
LastChild
(
)
&
prevSiblingIndex
)
;
}
if
(
MOZ_LIKELY
(
found
)
)
{
lineList
=
&
overflowLines
-
>
mLines
;
frames
=
&
overflowLines
-
>
mFrames
;
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
prev
sibling
not
in
line
list
"
)
;
aPrevSibling
=
nullptr
;
prevSibLine
=
lineList
-
>
end
(
)
;
}
}
}
if
(
aPrevSibling
)
{
int32_t
rem
=
prevSibLine
-
>
GetChildCount
(
)
-
prevSiblingIndex
-
1
;
if
(
rem
)
{
nsLineBox
*
line
=
NewLineBox
(
prevSibLine
aPrevSibling
-
>
GetNextSibling
(
)
rem
)
;
lineList
-
>
after_insert
(
prevSibLine
line
)
;
MarkLineDirty
(
prevSibLine
lineList
)
;
line
-
>
MarkDirty
(
)
;
line
-
>
SetInvalidateTextRuns
(
true
)
;
}
}
else
if
(
!
lineList
-
>
empty
(
)
)
{
lineList
-
>
front
(
)
-
>
MarkDirty
(
)
;
lineList
-
>
front
(
)
-
>
SetInvalidateTextRuns
(
true
)
;
}
const
nsFrameList
:
:
Slice
&
newFrames
=
frames
-
>
InsertFrames
(
nullptr
aPrevSibling
aFrameList
)
;
for
(
nsFrameList
:
:
Enumerator
e
(
newFrames
)
;
!
e
.
AtEnd
(
)
;
e
.
Next
(
)
)
{
nsIFrame
*
newFrame
=
e
.
get
(
)
;
NS_ASSERTION
(
!
aPrevSibling
|
|
aPrevSibling
-
>
GetNextSibling
(
)
=
=
newFrame
"
Unexpected
aPrevSibling
"
)
;
NS_ASSERTION
(
!
newFrame
-
>
IsPlaceholderFrame
(
)
|
|
(
!
newFrame
-
>
IsAbsolutelyPositioned
(
)
&
&
!
newFrame
-
>
IsFloating
(
)
)
"
Placeholders
should
not
float
or
be
positioned
"
)
;
bool
isBlock
=
newFrame
-
>
IsBlockOutside
(
)
;
if
(
isBlock
|
|
prevSibLine
=
=
lineList
-
>
end
(
)
|
|
prevSibLine
-
>
IsBlock
(
)
|
|
(
aPrevSibling
&
&
ShouldPutNextSiblingOnNewLine
(
aPrevSibling
)
)
)
{
nsLineBox
*
line
=
NewLineBox
(
newFrame
isBlock
)
;
if
(
prevSibLine
!
=
lineList
-
>
end
(
)
)
{
lineList
-
>
after_insert
(
prevSibLine
line
)
;
+
+
prevSibLine
;
}
else
{
lineList
-
>
push_front
(
line
)
;
prevSibLine
=
lineList
-
>
begin
(
)
;
}
}
else
{
prevSibLine
-
>
NoteFrameAdded
(
newFrame
)
;
MarkLineDirty
(
prevSibLine
lineList
)
;
}
aPrevSibling
=
newFrame
;
}
#
ifdef
DEBUG
MOZ_ASSERT
(
aFrameList
.
IsEmpty
(
)
)
;
VerifyLines
(
true
)
;
#
endif
}
void
nsBlockFrame
:
:
RemoveFloatFromFloatCache
(
nsIFrame
*
aFloat
)
{
LineIterator
line
=
LinesBegin
(
)
line_end
=
LinesEnd
(
)
;
for
(
;
line
!
=
line_end
;
+
+
line
)
{
if
(
line
-
>
IsInline
(
)
&
&
line
-
>
RemoveFloat
(
aFloat
)
)
{
break
;
}
}
}
void
nsBlockFrame
:
:
RemoveFloat
(
nsIFrame
*
aFloat
)
{
#
ifdef
DEBUG
if
(
!
mFloats
.
ContainsFrame
(
aFloat
)
)
{
MOZ_ASSERT
(
(
GetOverflowOutOfFlows
(
)
&
&
GetOverflowOutOfFlows
(
)
-
>
ContainsFrame
(
aFloat
)
)
|
|
(
GetPushedFloats
(
)
&
&
GetPushedFloats
(
)
-
>
ContainsFrame
(
aFloat
)
)
"
aFloat
is
not
our
child
or
on
an
unexpected
frame
list
"
)
;
}
#
endif
if
(
mFloats
.
StartRemoveFrame
(
aFloat
)
)
{
return
;
}
nsFrameList
*
list
=
GetPushedFloats
(
)
;
if
(
list
&
&
list
-
>
ContinueRemoveFrame
(
aFloat
)
)
{
#
if
0
if
(
list
-
>
IsEmpty
(
)
)
{
delete
RemovePushedFloats
(
)
;
}
#
endif
return
;
}
{
nsAutoOOFFrameList
oofs
(
this
)
;
if
(
oofs
.
mList
.
ContinueRemoveFrame
(
aFloat
)
)
{
return
;
}
}
}
void
nsBlockFrame
:
:
DoRemoveOutOfFlowFrame
(
nsIFrame
*
aFrame
)
{
nsBlockFrame
*
block
=
(
nsBlockFrame
*
)
aFrame
-
>
GetParent
(
)
;
if
(
aFrame
-
>
IsAbsolutelyPositioned
(
)
)
{
block
-
>
GetAbsoluteContainingBlock
(
)
-
>
RemoveFrame
(
block
kAbsoluteList
aFrame
)
;
}
else
{
nsIFrame
*
nif
=
aFrame
-
>
GetNextInFlow
(
)
;
if
(
nif
)
{
nif
-
>
GetParent
(
)
-
>
DeleteNextInFlowChild
(
nif
false
)
;
}
block
-
>
RemoveFloatFromFloatCache
(
aFrame
)
;
block
-
>
RemoveFloat
(
aFrame
)
;
aFrame
-
>
Destroy
(
)
;
}
}
void
nsBlockFrame
:
:
TryAllLines
(
nsLineList
:
:
iterator
*
aIterator
nsLineList
:
:
iterator
*
aStartIterator
nsLineList
:
:
iterator
*
aEndIterator
bool
*
aInOverflowLines
FrameLines
*
*
aOverflowLines
)
{
if
(
*
aIterator
=
=
*
aEndIterator
)
{
if
(
!
*
aInOverflowLines
)
{
*
aInOverflowLines
=
true
;
FrameLines
*
lines
=
GetOverflowLines
(
)
;
if
(
lines
)
{
*
aStartIterator
=
lines
-
>
mLines
.
begin
(
)
;
*
aIterator
=
*
aStartIterator
;
*
aEndIterator
=
lines
-
>
mLines
.
end
(
)
;
*
aOverflowLines
=
lines
;
}
}
}
}
nsBlockInFlowLineIterator
:
:
nsBlockInFlowLineIterator
(
nsBlockFrame
*
aFrame
LineIterator
aLine
)
:
mFrame
(
aFrame
)
mLine
(
aLine
)
mLineList
(
&
aFrame
-
>
mLines
)
{
DebugOnly
<
bool
>
check
=
aLine
=
=
mFrame
-
>
LinesBegin
(
)
;
}
nsBlockInFlowLineIterator
:
:
nsBlockInFlowLineIterator
(
nsBlockFrame
*
aFrame
LineIterator
aLine
bool
aInOverflow
)
:
mFrame
(
aFrame
)
mLine
(
aLine
)
mLineList
(
aInOverflow
?
&
aFrame
-
>
GetOverflowLines
(
)
-
>
mLines
:
&
aFrame
-
>
mLines
)
{
}
nsBlockInFlowLineIterator
:
:
nsBlockInFlowLineIterator
(
nsBlockFrame
*
aFrame
bool
*
aFoundValidLine
)
:
mFrame
(
aFrame
)
mLineList
(
&
aFrame
-
>
mLines
)
{
mLine
=
aFrame
-
>
LinesBegin
(
)
;
*
aFoundValidLine
=
FindValidLine
(
)
;
}
static
nsIFrame
*
FindChildContaining
(
nsBlockFrame
*
aFrame
nsIFrame
*
aFindFrame
)
{
NS_ASSERTION
(
aFrame
"
must
have
frame
"
)
;
nsIFrame
*
child
;
while
(
true
)
{
nsIFrame
*
block
=
aFrame
;
do
{
child
=
nsLayoutUtils
:
:
FindChildContainingDescendant
(
block
aFindFrame
)
;
if
(
child
)
break
;
block
=
block
-
>
GetNextContinuation
(
)
;
}
while
(
block
)
;
if
(
!
child
)
return
nullptr
;
if
(
!
(
child
-
>
GetStateBits
(
)
&
NS_FRAME_OUT_OF_FLOW
)
)
break
;
aFindFrame
=
child
-
>
GetPlaceholderFrame
(
)
;
}
return
child
;
}
nsBlockInFlowLineIterator
:
:
nsBlockInFlowLineIterator
(
nsBlockFrame
*
aFrame
nsIFrame
*
aFindFrame
bool
*
aFoundValidLine
)
:
mFrame
(
aFrame
)
mLineList
(
&
aFrame
-
>
mLines
)
{
*
aFoundValidLine
=
false
;
nsIFrame
*
child
=
FindChildContaining
(
aFrame
aFindFrame
)
;
if
(
!
child
)
return
;
LineIterator
line_end
=
aFrame
-
>
LinesEnd
(
)
;
mLine
=
aFrame
-
>
LinesBegin
(
)
;
if
(
mLine
!
=
line_end
&
&
mLine
.
next
(
)
=
=
line_end
&
&
!
aFrame
-
>
HasOverflowLines
(
)
)
{
*
aFoundValidLine
=
true
;
return
;
}
if
(
nsLineBox
*
const
cursor
=
aFrame
-
>
GetLineCursor
(
)
)
{
mLine
=
line_end
;
nsBlockFrame
:
:
LineIterator
line
=
aFrame
-
>
LinesBeginFrom
(
cursor
)
;
nsBlockFrame
:
:
ReverseLineIterator
rline
=
aFrame
-
>
LinesRBeginFrom
(
cursor
)
;
nsBlockFrame
:
:
ReverseLineIterator
rline_end
=
aFrame
-
>
LinesREnd
(
)
;
+
+
rline
;
while
(
line
!
=
line_end
|
|
rline
!
=
rline_end
)
{
if
(
line
!
=
line_end
)
{
if
(
line
-
>
Contains
(
child
)
)
{
mLine
=
line
;
break
;
}
+
+
line
;
}
if
(
rline
!
=
rline_end
)
{
if
(
rline
-
>
Contains
(
child
)
)
{
mLine
=
rline
;
break
;
}
+
+
rline
;
}
}
if
(
mLine
!
=
line_end
)
{
*
aFoundValidLine
=
true
;
if
(
mLine
!
=
cursor
)
{
aFrame
-
>
SetProperty
(
nsBlockFrame
:
:
LineCursorProperty
(
)
mLine
)
;
}
return
;
}
}
else
{
for
(
mLine
=
aFrame
-
>
LinesBegin
(
)
;
mLine
!
=
line_end
;
+
+
mLine
)
{
if
(
mLine
-
>
Contains
(
child
)
)
{
*
aFoundValidLine
=
true
;
return
;
}
}
}
MOZ_ASSERT
(
mLine
=
=
line_end
"
mLine
should
be
line_end
at
this
point
"
)
;
if
(
!
FindValidLine
(
)
)
return
;
do
{
if
(
mLine
-
>
Contains
(
child
)
)
{
*
aFoundValidLine
=
true
;
return
;
}
}
while
(
Next
(
)
)
;
}
nsBlockFrame
:
:
LineIterator
nsBlockInFlowLineIterator
:
:
End
(
)
{
return
mLineList
-
>
end
(
)
;
}
bool
nsBlockInFlowLineIterator
:
:
IsLastLineInList
(
)
{
LineIterator
end
=
End
(
)
;
return
mLine
!
=
end
&
&
mLine
.
next
(
)
=
=
end
;
}
bool
nsBlockInFlowLineIterator
:
:
Next
(
)
{
+
+
mLine
;
return
FindValidLine
(
)
;
}
bool
nsBlockInFlowLineIterator
:
:
Prev
(
)
{
LineIterator
begin
=
mLineList
-
>
begin
(
)
;
if
(
mLine
!
=
begin
)
{
-
-
mLine
;
return
true
;
}
bool
currentlyInOverflowLines
=
GetInOverflow
(
)
;
while
(
true
)
{
if
(
currentlyInOverflowLines
)
{
mLineList
=
&
mFrame
-
>
mLines
;
mLine
=
mLineList
-
>
end
(
)
;
if
(
mLine
!
=
mLineList
-
>
begin
(
)
)
{
-
-
mLine
;
return
true
;
}
}
else
{
mFrame
=
static_cast
<
nsBlockFrame
*
>
(
mFrame
-
>
GetPrevInFlow
(
)
)
;
if
(
!
mFrame
)
return
false
;
nsBlockFrame
:
:
FrameLines
*
overflowLines
=
mFrame
-
>
GetOverflowLines
(
)
;
if
(
overflowLines
)
{
mLineList
=
&
overflowLines
-
>
mLines
;
mLine
=
mLineList
-
>
end
(
)
;
NS_ASSERTION
(
mLine
!
=
mLineList
-
>
begin
(
)
"
empty
overflow
line
list
?
"
)
;
-
-
mLine
;
return
true
;
}
}
currentlyInOverflowLines
=
!
currentlyInOverflowLines
;
}
}
bool
nsBlockInFlowLineIterator
:
:
FindValidLine
(
)
{
LineIterator
end
=
mLineList
-
>
end
(
)
;
if
(
mLine
!
=
end
)
return
true
;
bool
currentlyInOverflowLines
=
GetInOverflow
(
)
;
while
(
true
)
{
if
(
currentlyInOverflowLines
)
{
mFrame
=
static_cast
<
nsBlockFrame
*
>
(
mFrame
-
>
GetNextInFlow
(
)
)
;
if
(
!
mFrame
)
return
false
;
mLineList
=
&
mFrame
-
>
mLines
;
mLine
=
mLineList
-
>
begin
(
)
;
if
(
mLine
!
=
mLineList
-
>
end
(
)
)
return
true
;
}
else
{
nsBlockFrame
:
:
FrameLines
*
overflowLines
=
mFrame
-
>
GetOverflowLines
(
)
;
if
(
overflowLines
)
{
mLineList
=
&
overflowLines
-
>
mLines
;
mLine
=
mLineList
-
>
begin
(
)
;
NS_ASSERTION
(
mLine
!
=
mLineList
-
>
end
(
)
"
empty
overflow
line
list
?
"
)
;
return
true
;
}
}
currentlyInOverflowLines
=
!
currentlyInOverflowLines
;
}
}
static
void
RemoveBlockChild
(
nsIFrame
*
aFrame
bool
aRemoveOnlyFluidContinuations
)
{
if
(
!
aFrame
)
{
return
;
}
nsBlockFrame
*
nextBlock
=
nsLayoutUtils
:
:
GetAsBlock
(
aFrame
-
>
GetParent
(
)
)
;
NS_ASSERTION
(
nextBlock
"
Our
child
'
s
continuation
'
s
parent
is
not
a
block
?
"
)
;
nextBlock
-
>
DoRemoveFrame
(
aFrame
(
aRemoveOnlyFluidContinuations
?
0
:
nsBlockFrame
:
:
REMOVE_FIXED_CONTINUATIONS
)
)
;
}
void
nsBlockFrame
:
:
DoRemoveFrame
(
nsIFrame
*
aDeletedFrame
uint32_t
aFlags
)
{
ClearLineCursor
(
)
;
if
(
aDeletedFrame
-
>
GetStateBits
(
)
&
(
NS_FRAME_OUT_OF_FLOW
|
NS_FRAME_IS_OVERFLOW_CONTAINER
)
)
{
if
(
!
aDeletedFrame
-
>
GetPrevInFlow
(
)
)
{
NS_ASSERTION
(
aDeletedFrame
-
>
GetStateBits
(
)
&
NS_FRAME_OUT_OF_FLOW
"
Expected
out
-
of
-
flow
frame
"
)
;
DoRemoveOutOfFlowFrame
(
aDeletedFrame
)
;
}
else
{
nsContainerFrame
:
:
DeleteNextInFlowChild
(
aDeletedFrame
(
aFlags
&
FRAMES_ARE_EMPTY
)
!
=
0
)
;
}
return
;
}
nsLineList
:
:
iterator
line_start
=
mLines
.
begin
(
)
line_end
=
mLines
.
end
(
)
;
nsLineList
:
:
iterator
line
=
line_start
;
FrameLines
*
overflowLines
=
nullptr
;
bool
searchingOverflowList
=
false
;
TryAllLines
(
&
line
&
line_start
&
line_end
&
searchingOverflowList
&
overflowLines
)
;
while
(
line
!
=
line_end
)
{
if
(
line
-
>
Contains
(
aDeletedFrame
)
)
{
break
;
}
+
+
line
;
TryAllLines
(
&
line
&
line_start
&
line_end
&
searchingOverflowList
&
overflowLines
)
;
}
if
(
line
=
=
line_end
)
{
NS_ERROR
(
"
can
'
t
find
deleted
frame
in
lines
"
)
;
return
;
}
if
(
!
(
aFlags
&
FRAMES_ARE_EMPTY
)
)
{
if
(
line
!
=
line_start
)
{
line
.
prev
(
)
-
>
MarkDirty
(
)
;
line
.
prev
(
)
-
>
SetInvalidateTextRuns
(
true
)
;
}
else
if
(
searchingOverflowList
&
&
!
mLines
.
empty
(
)
)
{
mLines
.
back
(
)
-
>
MarkDirty
(
)
;
mLines
.
back
(
)
-
>
SetInvalidateTextRuns
(
true
)
;
}
}
while
(
line
!
=
line_end
&
&
aDeletedFrame
)
{
NS_ASSERTION
(
this
=
=
aDeletedFrame
-
>
GetParent
(
)
"
messed
up
delete
code
"
)
;
NS_ASSERTION
(
line
-
>
Contains
(
aDeletedFrame
)
"
frame
not
in
line
"
)
;
if
(
!
(
aFlags
&
FRAMES_ARE_EMPTY
)
)
{
line
-
>
MarkDirty
(
)
;
line
-
>
SetInvalidateTextRuns
(
true
)
;
}
bool
isLastFrameOnLine
=
1
=
=
line
-
>
GetChildCount
(
)
;
if
(
!
isLastFrameOnLine
)
{
LineIterator
next
=
line
.
next
(
)
;
nsIFrame
*
lastFrame
=
next
!
=
line_end
?
next
-
>
mFirstChild
-
>
GetPrevSibling
(
)
:
(
searchingOverflowList
?
overflowLines
-
>
mFrames
.
LastChild
(
)
:
mFrames
.
LastChild
(
)
)
;
NS_ASSERTION
(
next
=
=
line_end
|
|
lastFrame
=
=
line
-
>
LastChild
(
)
"
unexpected
line
frames
"
)
;
isLastFrameOnLine
=
lastFrame
=
=
aDeletedFrame
;
}
if
(
line
-
>
mFirstChild
=
=
aDeletedFrame
)
{
line
-
>
mFirstChild
=
aDeletedFrame
-
>
GetNextSibling
(
)
;
}
-
-
line
;
if
(
line
!
=
line_end
&
&
!
line
-
>
IsBlock
(
)
)
{
line
-
>
MarkDirty
(
)
;
}
+
+
line
;
if
(
searchingOverflowList
)
{
overflowLines
-
>
mFrames
.
RemoveFrame
(
aDeletedFrame
)
;
}
else
{
mFrames
.
RemoveFrame
(
aDeletedFrame
)
;
}
line
-
>
NoteFrameRemoved
(
aDeletedFrame
)
;
nsIFrame
*
deletedNextContinuation
=
(
aFlags
&
REMOVE_FIXED_CONTINUATIONS
)
?
aDeletedFrame
-
>
GetNextContinuation
(
)
:
aDeletedFrame
-
>
GetNextInFlow
(
)
;
#
ifdef
NOISY_REMOVE_FRAME
printf
(
"
DoRemoveFrame
:
%
s
line
=
%
p
frame
=
"
searchingOverflowList
?
"
overflow
"
:
"
normal
"
line
.
get
(
)
)
;
nsFrame
:
:
ListTag
(
stdout
aDeletedFrame
)
;
printf
(
"
prevSibling
=
%
p
deletedNextContinuation
=
%
p
\
n
"
aDeletedFrame
-
>
GetPrevSibling
(
)
deletedNextContinuation
)
;
#
endif
if
(
deletedNextContinuation
&
&
deletedNextContinuation
-
>
GetStateBits
(
)
&
NS_FRAME_IS_OVERFLOW_CONTAINER
)
{
deletedNextContinuation
-
>
GetParent
(
)
-
>
DeleteNextInFlowChild
(
deletedNextContinuation
false
)
;
deletedNextContinuation
=
nullptr
;
}
aDeletedFrame
-
>
Destroy
(
)
;
aDeletedFrame
=
deletedNextContinuation
;
bool
haveAdvancedToNextLine
=
false
;
if
(
0
=
=
line
-
>
GetChildCount
(
)
)
{
#
ifdef
NOISY_REMOVE_FRAME
printf
(
"
DoRemoveFrame
:
%
s
line
=
%
p
became
empty
so
it
will
be
removed
\
n
"
searchingOverflowList
?
"
overflow
"
:
"
normal
"
line
.
get
(
)
)
;
#
endif
nsLineBox
*
cur
=
line
;
if
(
!
searchingOverflowList
)
{
line
=
mLines
.
erase
(
line
)
;
#
ifdef
NOISY_BLOCK_INVALIDATE
nsRect
visOverflow
(
cur
-
>
GetVisualOverflowArea
(
)
)
;
printf
(
"
%
p
invalidate
10
(
%
d
%
d
%
d
%
d
)
\
n
"
this
visOverflow
.
x
visOverflow
.
y
visOverflow
.
width
visOverflow
.
height
)
;
#
endif
}
else
{
line
=
overflowLines
-
>
mLines
.
erase
(
line
)
;
if
(
overflowLines
-
>
mLines
.
empty
(
)
)
{
DestroyOverflowLines
(
)
;
overflowLines
=
nullptr
;
line_start
=
mLines
.
begin
(
)
;
line_end
=
mLines
.
end
(
)
;
line
=
line_end
;
}
}
FreeLineBox
(
cur
)
;
if
(
line
!
=
line_end
)
{
line
-
>
MarkPreviousMarginDirty
(
)
;
}
haveAdvancedToNextLine
=
true
;
}
else
{
if
(
!
deletedNextContinuation
|
|
isLastFrameOnLine
|
|
!
line
-
>
Contains
(
deletedNextContinuation
)
)
{
line
-
>
MarkDirty
(
)
;
+
+
line
;
haveAdvancedToNextLine
=
true
;
}
}
if
(
deletedNextContinuation
)
{
if
(
deletedNextContinuation
-
>
GetParent
(
)
!
=
this
)
{
aFlags
&
=
~
FRAMES_ARE_EMPTY
;
break
;
}
if
(
haveAdvancedToNextLine
)
{
if
(
line
!
=
line_end
&
&
!
searchingOverflowList
&
&
!
line
-
>
Contains
(
deletedNextContinuation
)
)
{
line
=
line_end
;
}
TryAllLines
(
&
line
&
line_start
&
line_end
&
searchingOverflowList
&
overflowLines
)
;
#
ifdef
NOISY_REMOVE_FRAME
printf
(
"
DoRemoveFrame
:
now
on
%
s
line
=
%
p
\
n
"
searchingOverflowList
?
"
overflow
"
:
"
normal
"
line
.
get
(
)
)
;
#
endif
}
}
}
if
(
!
(
aFlags
&
FRAMES_ARE_EMPTY
)
&
&
line
.
next
(
)
!
=
line_end
)
{
line
.
next
(
)
-
>
MarkDirty
(
)
;
line
.
next
(
)
-
>
SetInvalidateTextRuns
(
true
)
;
}
#
ifdef
DEBUG
VerifyLines
(
true
)
;
VerifyOverflowSituation
(
)
;
#
endif
RemoveBlockChild
(
aDeletedFrame
!
(
aFlags
&
REMOVE_FIXED_CONTINUATIONS
)
)
;
}
static
bool
FindBlockLineFor
(
nsIFrame
*
aChild
nsLineList
:
:
iterator
aBegin
nsLineList
:
:
iterator
aEnd
nsLineList
:
:
iterator
*
aResult
)
{
MOZ_ASSERT
(
aChild
-
>
IsBlockOutside
(
)
)
;
for
(
nsLineList
:
:
iterator
line
=
aBegin
;
line
!
=
aEnd
;
+
+
line
)
{
MOZ_ASSERT
(
line
-
>
GetChildCount
(
)
>
0
)
;
if
(
line
-
>
IsBlock
(
)
&
&
line
-
>
mFirstChild
=
=
aChild
)
{
MOZ_ASSERT
(
line
-
>
GetChildCount
(
)
=
=
1
)
;
*
aResult
=
line
;
return
true
;
}
}
return
false
;
}
static
bool
FindInlineLineFor
(
nsIFrame
*
aChild
const
nsFrameList
&
aFrameList
nsLineList
:
:
iterator
aBegin
nsLineList
:
:
iterator
aEnd
nsLineList
:
:
iterator
*
aResult
)
{
MOZ_ASSERT
(
!
aChild
-
>
IsBlockOutside
(
)
)
;
for
(
nsLineList
:
:
iterator
line
=
aBegin
;
line
!
=
aEnd
;
+
+
line
)
{
MOZ_ASSERT
(
line
-
>
GetChildCount
(
)
>
0
)
;
if
(
!
line
-
>
IsBlock
(
)
)
{
nsLineList
:
:
iterator
next
=
line
.
next
(
)
;
if
(
aChild
=
=
(
next
=
=
aEnd
?
aFrameList
.
LastChild
(
)
:
next
-
>
mFirstChild
-
>
GetPrevSibling
(
)
)
|
|
line
-
>
Contains
(
aChild
)
)
{
*
aResult
=
line
;
return
true
;
}
}
}
return
false
;
}
static
bool
FindLineFor
(
nsIFrame
*
aChild
const
nsFrameList
&
aFrameList
nsLineList
:
:
iterator
aBegin
nsLineList
:
:
iterator
aEnd
nsLineList
:
:
iterator
*
aResult
)
{
return
aChild
-
>
IsBlockOutside
(
)
?
FindBlockLineFor
(
aChild
aBegin
aEnd
aResult
)
:
FindInlineLineFor
(
aChild
aFrameList
aBegin
aEnd
aResult
)
;
}
nsresult
nsBlockFrame
:
:
StealFrame
(
nsIFrame
*
aChild
)
{
MOZ_ASSERT
(
aChild
-
>
GetParent
(
)
=
=
this
)
;
if
(
(
aChild
-
>
GetStateBits
(
)
&
NS_FRAME_OUT_OF_FLOW
)
&
&
aChild
-
>
IsFloating
(
)
)
{
RemoveFloat
(
aChild
)
;
return
NS_OK
;
}
if
(
MaybeStealOverflowContainerFrame
(
aChild
)
)
{
return
NS_OK
;
}
MOZ_ASSERT
(
!
(
aChild
-
>
GetStateBits
(
)
&
NS_FRAME_OUT_OF_FLOW
)
)
;
nsLineList
:
:
iterator
line
;
if
(
FindLineFor
(
aChild
mFrames
mLines
.
begin
(
)
mLines
.
end
(
)
&
line
)
)
{
RemoveFrameFromLine
(
aChild
line
mFrames
mLines
)
;
}
else
{
FrameLines
*
overflowLines
=
GetOverflowLines
(
)
;
DebugOnly
<
bool
>
found
;
found
=
FindLineFor
(
aChild
overflowLines
-
>
mFrames
overflowLines
-
>
mLines
.
begin
(
)
overflowLines
-
>
mLines
.
end
(
)
&
line
)
;
MOZ_ASSERT
(
found
)
;
RemoveFrameFromLine
(
aChild
line
overflowLines
-
>
mFrames
overflowLines
-
>
mLines
)
;
if
(
overflowLines
-
>
mLines
.
empty
(
)
)
{
DestroyOverflowLines
(
)
;
}
}
return
NS_OK
;
}
void
nsBlockFrame
:
:
RemoveFrameFromLine
(
nsIFrame
*
aChild
nsLineList
:
:
iterator
aLine
nsFrameList
&
aFrameList
nsLineList
&
aLineList
)
{
aFrameList
.
RemoveFrame
(
aChild
)
;
if
(
aChild
=
=
aLine
-
>
mFirstChild
)
{
aLine
-
>
mFirstChild
=
aChild
-
>
GetNextSibling
(
)
;
}
aLine
-
>
NoteFrameRemoved
(
aChild
)
;
if
(
aLine
-
>
GetChildCount
(
)
>
0
)
{
aLine
-
>
MarkDirty
(
)
;
}
else
{
nsLineBox
*
lineBox
=
aLine
;
aLine
=
aLineList
.
erase
(
aLine
)
;
if
(
aLine
!
=
aLineList
.
end
(
)
)
{
aLine
-
>
MarkPreviousMarginDirty
(
)
;
}
FreeLineBox
(
lineBox
)
;
}
}
void
nsBlockFrame
:
:
DeleteNextInFlowChild
(
nsIFrame
*
aNextInFlow
bool
aDeletingEmptyFrames
)
{
NS_PRECONDITION
(
aNextInFlow
-
>
GetPrevInFlow
(
)
"
bad
next
-
in
-
flow
"
)
;
if
(
aNextInFlow
-
>
GetStateBits
(
)
&
(
NS_FRAME_OUT_OF_FLOW
|
NS_FRAME_IS_OVERFLOW_CONTAINER
)
)
{
nsContainerFrame
:
:
DeleteNextInFlowChild
(
aNextInFlow
aDeletingEmptyFrames
)
;
}
else
{
#
ifdef
DEBUG
if
(
aDeletingEmptyFrames
)
{
nsLayoutUtils
:
:
AssertTreeOnlyEmptyNextInFlows
(
aNextInFlow
)
;
}
#
endif
DoRemoveFrame
(
aNextInFlow
aDeletingEmptyFrames
?
FRAMES_ARE_EMPTY
:
0
)
;
}
}
const
nsStyleText
*
nsBlockFrame
:
:
StyleTextForLineLayout
(
)
{
return
StyleText
(
)
;
}
LogicalRect
nsBlockFrame
:
:
AdjustFloatAvailableSpace
(
BlockReflowInput
&
aState
const
LogicalRect
&
aFloatAvailableSpace
nsIFrame
*
aFloatFrame
)
{
nscoord
availISize
;
const
nsStyleDisplay
*
floatDisplay
=
aFloatFrame
-
>
StyleDisplay
(
)
;
WritingMode
wm
=
aState
.
mReflowInput
.
GetWritingMode
(
)
;
if
(
mozilla
:
:
StyleDisplay
:
:
Table
!
=
floatDisplay
-
>
mDisplay
|
|
eCompatibility_NavQuirks
!
=
aState
.
mPresContext
-
>
CompatibilityMode
(
)
)
{
availISize
=
aState
.
ContentISize
(
)
;
}
else
{
availISize
=
aFloatAvailableSpace
.
ISize
(
wm
)
;
}
nscoord
availBSize
=
NS_UNCONSTRAINEDSIZE
=
=
aState
.
ContentBSize
(
)
?
NS_UNCONSTRAINEDSIZE
:
std
:
:
max
(
0
aState
.
ContentBEnd
(
)
-
aState
.
mBCoord
)
;
if
(
availBSize
!
=
NS_UNCONSTRAINEDSIZE
&
&
!
aState
.
mFlags
.
mFloatFragmentsInsideColumnEnabled
&
&
nsLayoutUtils
:
:
GetClosestFrameOfType
(
this
LayoutFrameType
:
:
ColumnSet
)
)
{
availBSize
=
NS_UNCONSTRAINEDSIZE
;
}
return
LogicalRect
(
wm
aState
.
ContentIStart
(
)
aState
.
ContentBStart
(
)
availISize
availBSize
)
;
}
nscoord
nsBlockFrame
:
:
ComputeFloatISize
(
BlockReflowInput
&
aState
const
LogicalRect
&
aFloatAvailableSpace
nsIFrame
*
aFloat
)
{
NS_PRECONDITION
(
aFloat
-
>
GetStateBits
(
)
&
NS_FRAME_OUT_OF_FLOW
"
aFloat
must
be
an
out
-
of
-
flow
frame
"
)
;
LogicalRect
availSpace
=
AdjustFloatAvailableSpace
(
aState
aFloatAvailableSpace
aFloat
)
;
WritingMode
blockWM
=
aState
.
mReflowInput
.
GetWritingMode
(
)
;
WritingMode
floatWM
=
aFloat
-
>
GetWritingMode
(
)
;
ReflowInput
floatRS
(
aState
.
mPresContext
aState
.
mReflowInput
aFloat
availSpace
.
Size
(
blockWM
)
.
ConvertTo
(
floatWM
blockWM
)
)
;
return
floatRS
.
ComputedSizeWithMarginBorderPadding
(
blockWM
)
.
ISize
(
blockWM
)
;
}
void
nsBlockFrame
:
:
ReflowFloat
(
BlockReflowInput
&
aState
const
LogicalRect
&
aAdjustedAvailableSpace
nsIFrame
*
aFloat
LogicalMargin
&
aFloatMargin
LogicalMargin
&
aFloatOffsets
bool
aFloatPushedDown
nsReflowStatus
&
aReflowStatus
)
{
NS_PRECONDITION
(
aFloat
-
>
GetStateBits
(
)
&
NS_FRAME_OUT_OF_FLOW
"
aFloat
must
be
an
out
-
of
-
flow
frame
"
)
;
aReflowStatus
.
Reset
(
)
;
WritingMode
wm
=
aState
.
mReflowInput
.
GetWritingMode
(
)
;
#
ifdef
NOISY_FLOAT
printf
(
"
Reflow
Float
%
p
in
parent
%
p
availSpace
(
%
d
%
d
%
d
%
d
)
\
n
"
aFloat
this
aAdjustedAvailableSpace
.
IStart
(
wm
)
aAdjustedAvailableSpace
.
BStart
(
wm
)
aAdjustedAvailableSpace
.
ISize
(
wm
)
aAdjustedAvailableSpace
.
BSize
(
wm
)
)
;
#
endif
ReflowInput
floatRS
(
aState
.
mPresContext
aState
.
mReflowInput
aFloat
aAdjustedAvailableSpace
.
Size
(
wm
)
.
ConvertTo
(
aFloat
-
>
GetWritingMode
(
)
wm
)
)
;
if
(
floatRS
.
mFlags
.
mIsTopOfPage
&
&
(
aFloatPushedDown
|
|
aAdjustedAvailableSpace
.
ISize
(
wm
)
!
=
aState
.
ContentISize
(
)
)
)
{
floatRS
.
mFlags
.
mIsTopOfPage
=
false
;
}
nsBlockReflowContext
brc
(
aState
.
mPresContext
aState
.
mReflowInput
)
;
bool
isAdjacentWithTop
=
aState
.
IsAdjacentWithTop
(
)
;
nsIFrame
*
clearanceFrame
=
nullptr
;
do
{
nsCollapsingMargin
margin
;
bool
mayNeedRetry
=
false
;
floatRS
.
mDiscoveredClearance
=
nullptr
;
if
(
!
aFloat
-
>
GetPrevInFlow
(
)
)
{
brc
.
ComputeCollapsedBStartMargin
(
floatRS
&
margin
clearanceFrame
&
mayNeedRetry
)
;
if
(
mayNeedRetry
&
&
!
clearanceFrame
)
{
floatRS
.
mDiscoveredClearance
=
&
clearanceFrame
;
}
}
brc
.
ReflowBlock
(
aAdjustedAvailableSpace
true
margin
0
isAdjacentWithTop
nullptr
floatRS
aReflowStatus
aState
)
;
}
while
(
clearanceFrame
)
;
if
(
!
aReflowStatus
.
IsFullyComplete
(
)
&
&
ShouldAvoidBreakInside
(
floatRS
)
)
{
aReflowStatus
.
SetInlineLineBreakBeforeAndReset
(
)
;
}
else
if
(
aReflowStatus
.
IsIncomplete
(
)
&
&
(
NS_UNCONSTRAINEDSIZE
=
=
aAdjustedAvailableSpace
.
BSize
(
wm
)
)
)
{
aReflowStatus
.
Reset
(
)
;
}
if
(
aReflowStatus
.
NextInFlowNeedsReflow
(
)
)
{
aState
.
mReflowStatus
.
SetNextInFlowNeedsReflow
(
)
;
}
if
(
aFloat
-
>
IsLetterFrame
(
)
)
{
if
(
aReflowStatus
.
IsIncomplete
(
)
)
aReflowStatus
.
Reset
(
)
;
}
aFloatMargin
=
floatRS
.
ComputedLogicalMargin
(
)
.
ConvertTo
(
wm
floatRS
.
GetWritingMode
(
)
)
;
aFloatOffsets
=
floatRS
.
ComputedLogicalOffsets
(
)
.
ConvertTo
(
wm
floatRS
.
GetWritingMode
(
)
)
;
const
ReflowOutput
&
metrics
=
brc
.
GetMetrics
(
)
;
WritingMode
metricsWM
=
metrics
.
GetWritingMode
(
)
;
aFloat
-
>
SetSize
(
metricsWM
metrics
.
Size
(
metricsWM
)
)
;
if
(
aFloat
-
>
HasView
(
)
)
{
nsContainerFrame
:
:
SyncFrameViewAfterReflow
(
aState
.
mPresContext
aFloat
aFloat
-
>
GetView
(
)
metrics
.
VisualOverflow
(
)
NS_FRAME_NO_MOVE_VIEW
)
;
}
aFloat
-
>
DidReflow
(
aState
.
mPresContext
&
floatRS
nsDidReflowStatus
:
:
FINISHED
)
;
#
ifdef
NOISY_FLOAT
printf
(
"
end
ReflowFloat
%
p
sized
to
%
d
%
d
\
n
"
aFloat
metrics
.
Width
(
)
metrics
.
Height
(
)
)
;
#
endif
}
StyleClear
nsBlockFrame
:
:
FindTrailingClear
(
)
{
for
(
nsIFrame
*
b
=
this
;
b
;
b
=
b
-
>
GetPrevInFlow
(
)
)
{
nsBlockFrame
*
block
=
static_cast
<
nsBlockFrame
*
>
(
b
)
;
LineIterator
endLine
=
block
-
>
LinesEnd
(
)
;
if
(
endLine
!
=
block
-
>
LinesBegin
(
)
)
{
-
-
endLine
;
return
endLine
-
>
GetBreakTypeAfter
(
)
;
}
}
return
StyleClear
:
:
None
;
}
void
nsBlockFrame
:
:
ReflowPushedFloats
(
BlockReflowInput
&
aState
nsOverflowAreas
&
aOverflowAreas
nsReflowStatus
&
aStatus
)
{
nsIFrame
*
f
=
mFloats
.
FirstChild
(
)
;
nsIFrame
*
prev
=
nullptr
;
while
(
f
&
&
(
f
-
>
GetStateBits
(
)
&
NS_FRAME_IS_PUSHED_FLOAT
)
)
{
MOZ_ASSERT
(
prev
=
=
f
-
>
GetPrevSibling
(
)
)
;
nsIFrame
*
prevContinuation
=
f
-
>
GetPrevContinuation
(
)
;
if
(
prevContinuation
&
&
prevContinuation
-
>
GetParent
(
)
=
=
f
-
>
GetParent
(
)
)
{
mFloats
.
RemoveFrame
(
f
)
;
aState
.
AppendPushedFloatChain
(
f
)
;
f
=
!
prev
?
mFloats
.
FirstChild
(
)
:
prev
-
>
GetNextSibling
(
)
;
continue
;
}
aState
.
FlowAndPlaceFloat
(
f
)
;
ConsiderChildOverflow
(
aOverflowAreas
f
)
;
nsIFrame
*
next
=
!
prev
?
mFloats
.
FirstChild
(
)
:
prev
-
>
GetNextSibling
(
)
;
if
(
next
=
=
f
)
{
next
=
f
-
>
GetNextSibling
(
)
;
prev
=
f
;
}
f
=
next
;
}
if
(
0
!
=
aState
.
ClearFloats
(
0
StyleClear
:
:
Both
)
)
{
nsBlockFrame
*
prevBlock
=
static_cast
<
nsBlockFrame
*
>
(
GetPrevInFlow
(
)
)
;
if
(
prevBlock
)
{
aState
.
mFloatBreakType
=
prevBlock
-
>
FindTrailingClear
(
)
;
}
}
}
void
nsBlockFrame
:
:
RecoverFloats
(
nsFloatManager
&
aFloatManager
WritingMode
aWM
const
nsSize
&
aContainerSize
)
{
nsIFrame
*
stop
=
nullptr
;
for
(
nsIFrame
*
f
=
mFloats
.
FirstChild
(
)
;
f
&
&
f
!
=
stop
;
f
=
f
-
>
GetNextSibling
(
)
)
{
LogicalRect
region
=
nsFloatManager
:
:
GetRegionFor
(
aWM
f
aContainerSize
)
;
aFloatManager
.
AddFloat
(
f
region
aWM
aContainerSize
)
;
if
(
!
stop
&
&
f
-
>
GetNextInFlow
(
)
)
stop
=
f
-
>
GetNextInFlow
(
)
;
}
for
(
nsIFrame
*
oc
=
GetChildList
(
kOverflowContainersList
)
.
FirstChild
(
)
;
oc
;
oc
=
oc
-
>
GetNextSibling
(
)
)
{
RecoverFloatsFor
(
oc
aFloatManager
aWM
aContainerSize
)
;
}
for
(
nsBlockFrame
:
:
LineIterator
line
=
LinesBegin
(
)
;
line
!
=
LinesEnd
(
)
;
+
+
line
)
{
if
(
line
-
>
IsBlock
(
)
)
{
RecoverFloatsFor
(
line
-
>
mFirstChild
aFloatManager
aWM
aContainerSize
)
;
}
}
}
void
nsBlockFrame
:
:
RecoverFloatsFor
(
nsIFrame
*
aFrame
nsFloatManager
&
aFloatManager
WritingMode
aWM
const
nsSize
&
aContainerSize
)
{
NS_PRECONDITION
(
aFrame
"
null
frame
"
)
;
nsBlockFrame
*
block
=
nsLayoutUtils
:
:
GetAsBlock
(
aFrame
)
;
if
(
block
&
&
!
nsBlockFrame
:
:
BlockNeedsFloatManager
(
block
)
)
{
LogicalRect
rect
(
aWM
block
-
>
GetNormalRect
(
)
aContainerSize
)
;
nscoord
lineLeft
=
rect
.
LineLeft
(
aWM
aContainerSize
)
;
nscoord
blockStart
=
rect
.
BStart
(
aWM
)
;
aFloatManager
.
Translate
(
lineLeft
blockStart
)
;
block
-
>
RecoverFloats
(
aFloatManager
aWM
aContainerSize
)
;
aFloatManager
.
Translate
(
-
lineLeft
-
blockStart
)
;
}
}
#
ifdef
DEBUG
static
void
ComputeVisualOverflowArea
(
nsLineList
&
aLines
nscoord
aWidth
nscoord
aHeight
nsRect
&
aResult
)
{
nscoord
xa
=
0
ya
=
0
xb
=
aWidth
yb
=
aHeight
;
for
(
nsLineList
:
:
iterator
line
=
aLines
.
begin
(
)
line_end
=
aLines
.
end
(
)
;
line
!
=
line_end
;
+
+
line
)
{
nsRect
visOverflow
(
line
-
>
GetVisualOverflowArea
(
)
)
;
nscoord
x
=
visOverflow
.
x
;
nscoord
y
=
visOverflow
.
y
;
nscoord
xmost
=
x
+
visOverflow
.
width
;
nscoord
ymost
=
y
+
visOverflow
.
height
;
if
(
x
<
xa
)
{
xa
=
x
;
}
if
(
xmost
>
xb
)
{
xb
=
xmost
;
}
if
(
y
<
ya
)
{
ya
=
y
;
}
if
(
ymost
>
yb
)
{
yb
=
ymost
;
}
}
aResult
.
x
=
xa
;
aResult
.
y
=
ya
;
aResult
.
width
=
xb
-
xa
;
aResult
.
height
=
yb
-
ya
;
}
#
endif
bool
nsBlockFrame
:
:
IsVisibleInSelection
(
nsISelection
*
aSelection
)
{
if
(
mContent
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
html
nsGkAtoms
:
:
body
)
)
return
true
;
nsCOMPtr
<
nsIDOMNode
>
node
(
do_QueryInterface
(
mContent
)
)
;
bool
visible
;
nsresult
rv
=
aSelection
-
>
ContainsNode
(
node
true
&
visible
)
;
return
NS_SUCCEEDED
(
rv
)
&
&
visible
;
}
#
ifdef
DEBUG
static
void
DebugOutputDrawLine
(
int32_t
aDepth
nsLineBox
*
aLine
bool
aDrawn
)
{
if
(
nsBlockFrame
:
:
gNoisyDamageRepair
)
{
nsFrame
:
:
IndentBy
(
stdout
aDepth
+
1
)
;
nsRect
lineArea
=
aLine
-
>
GetVisualOverflowArea
(
)
;
printf
(
"
%
s
line
=
%
p
bounds
=
%
d
%
d
%
d
%
d
ca
=
%
d
%
d
%
d
%
d
\
n
"
aDrawn
?
"
draw
"
:
"
skip
"
static_cast
<
void
*
>
(
aLine
)
aLine
-
>
IStart
(
)
aLine
-
>
BStart
(
)
aLine
-
>
ISize
(
)
aLine
-
>
BSize
(
)
lineArea
.
x
lineArea
.
y
lineArea
.
width
lineArea
.
height
)
;
}
}
#
endif
static
void
DisplayLine
(
nsDisplayListBuilder
*
aBuilder
const
nsRect
&
aLineArea
const
nsRect
&
aDirtyRect
nsBlockFrame
:
:
LineIterator
&
aLine
int32_t
aDepth
int32_t
&
aDrawnLines
const
nsDisplayListSet
&
aLists
nsBlockFrame
*
aFrame
TextOverflow
*
aTextOverflow
)
{
bool
intersect
=
aLineArea
.
Intersects
(
aDirtyRect
)
;
#
ifdef
DEBUG
if
(
nsBlockFrame
:
:
gLamePaintMetrics
)
{
aDrawnLines
+
+
;
}
DebugOutputDrawLine
(
aDepth
aLine
.
get
(
)
intersect
)
;
#
endif
bool
lineInline
=
aLine
-
>
IsInline
(
)
;
bool
lineMayHaveTextOverflow
=
aTextOverflow
&
&
lineInline
;
if
(
!
intersect
&
&
!
aBuilder
-
>
ShouldDescendIntoFrame
(
aFrame
)
&
&
!
lineMayHaveTextOverflow
)
return
;
nsDisplayListCollection
collection
;
nsDisplayListSet
childLists
(
collection
lineInline
?
collection
.
Content
(
)
:
collection
.
BlockBorderBackgrounds
(
)
)
;
uint32_t
flags
=
lineInline
?
nsIFrame
:
:
DISPLAY_CHILD_INLINE
:
0
;
nsIFrame
*
kid
=
aLine
-
>
mFirstChild
;
int32_t
n
=
aLine
-
>
GetChildCount
(
)
;
while
(
-
-
n
>
=
0
)
{
aFrame
-
>
BuildDisplayListForChild
(
aBuilder
kid
aDirtyRect
childLists
flags
)
;
kid
=
kid
-
>
GetNextSibling
(
)
;
}
if
(
lineMayHaveTextOverflow
)
{
aTextOverflow
-
>
ProcessLine
(
collection
aLine
.
get
(
)
)
;
}
collection
.
MoveTo
(
aLists
)
;
}
void
nsBlockFrame
:
:
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsRect
&
aDirtyRect
const
nsDisplayListSet
&
aLists
)
{
int32_t
drawnLines
;
int32_t
depth
=
0
;
#
ifdef
DEBUG
if
(
gNoisyDamageRepair
)
{
depth
=
GetDepth
(
)
;
nsRect
ca
;
:
:
ComputeVisualOverflowArea
(
mLines
mRect
.
width
mRect
.
height
ca
)
;
nsFrame
:
:
IndentBy
(
stdout
depth
)
;
ListTag
(
stdout
)
;
printf
(
"
:
bounds
=
%
d
%
d
%
d
%
d
dirty
(
absolute
)
=
%
d
%
d
%
d
%
d
ca
=
%
d
%
d
%
d
%
d
\
n
"
mRect
.
x
mRect
.
y
mRect
.
width
mRect
.
height
aDirtyRect
.
x
aDirtyRect
.
y
aDirtyRect
.
width
aDirtyRect
.
height
ca
.
x
ca
.
y
ca
.
width
ca
.
height
)
;
}
PRTime
start
=
0
;
if
(
gLamePaintMetrics
)
{
start
=
PR_Now
(
)
;
drawnLines
=
0
;
}
#
endif
DisplayBorderBackgroundOutline
(
aBuilder
aLists
)
;
if
(
GetPrevInFlow
(
)
)
{
DisplayOverflowContainers
(
aBuilder
aDirtyRect
aLists
)
;
for
(
nsIFrame
*
f
:
mFloats
)
{
if
(
f
-
>
GetStateBits
(
)
&
NS_FRAME_IS_PUSHED_FLOAT
)
BuildDisplayListForChild
(
aBuilder
f
aDirtyRect
aLists
)
;
}
}
aBuilder
-
>
MarkFramesForDisplayList
(
this
mFloats
aDirtyRect
)
;
UniquePtr
<
TextOverflow
>
textOverflow
(
TextOverflow
:
:
WillProcessLines
(
aBuilder
this
)
)
;
nsDisplayListCollection
linesDisplayListCollection
;
nsLineBox
*
cursor
=
aBuilder
-
>
ShouldDescendIntoFrame
(
this
)
?
nullptr
:
GetFirstLineContaining
(
aDirtyRect
.
y
)
;
LineIterator
line_end
=
LinesEnd
(
)
;
if
(
cursor
)
{
for
(
LineIterator
line
=
mLines
.
begin
(
cursor
)
;
line
!
=
line_end
;
+
+
line
)
{
nsRect
lineArea
=
line
-
>
GetVisualOverflowArea
(
)
;
if
(
!
lineArea
.
IsEmpty
(
)
)
{
if
(
lineArea
.
y
>
=
aDirtyRect
.
YMost
(
)
)
{
break
;
}
DisplayLine
(
aBuilder
lineArea
aDirtyRect
line
depth
drawnLines
linesDisplayListCollection
this
textOverflow
.
get
(
)
)
;
}
}
}
else
{
bool
nonDecreasingYs
=
true
;
int32_t
lineCount
=
0
;
nscoord
lastY
=
INT32_MIN
;
nscoord
lastYMost
=
INT32_MIN
;
for
(
LineIterator
line
=
LinesBegin
(
)
;
line
!
=
line_end
;
+
+
line
)
{
nsRect
lineArea
=
line
-
>
GetVisualOverflowArea
(
)
;
DisplayLine
(
aBuilder
lineArea
aDirtyRect
line
depth
drawnLines
linesDisplayListCollection
this
textOverflow
.
get
(
)
)
;
if
(
!
lineArea
.
IsEmpty
(
)
)
{
if
(
lineArea
.
y
<
lastY
|
|
lineArea
.
YMost
(
)
<
lastYMost
)
{
nonDecreasingYs
=
false
;
}
lastY
=
lineArea
.
y
;
lastYMost
=
lineArea
.
YMost
(
)
;
}
lineCount
+
+
;
}
if
(
nonDecreasingYs
&
&
lineCount
>
=
MIN_LINES_NEEDING_CURSOR
)
{
SetupLineCursor
(
)
;
}
}
if
(
textOverflow
)
{
aLists
.
PositionedDescendants
(
)
-
>
AppendToTop
(
&
textOverflow
-
>
GetMarkers
(
)
)
;
}
linesDisplayListCollection
.
MoveTo
(
aLists
)
;
if
(
HasOutsideBullet
(
)
)
{
nsIFrame
*
bullet
=
GetOutsideBullet
(
)
;
BuildDisplayListForChild
(
aBuilder
bullet
aDirtyRect
aLists
)
;
}
#
ifdef
DEBUG
if
(
gLamePaintMetrics
)
{
PRTime
end
=
PR_Now
(
)
;
int32_t
numLines
=
mLines
.
size
(
)
;
if
(
!
numLines
)
numLines
=
1
;
PRTime
lines
deltaPerLine
delta
;
lines
=
int64_t
(
numLines
)
;
delta
=
end
-
start
;
deltaPerLine
=
delta
/
lines
;
ListTag
(
stdout
)
;
char
buf
[
400
]
;
SprintfLiteral
(
buf
"
:
%
"
PRId64
"
elapsed
(
%
"
PRId64
"
per
line
)
lines
=
%
d
drawn
=
%
d
skip
=
%
d
"
delta
deltaPerLine
numLines
drawnLines
numLines
-
drawnLines
)
;
printf
(
"
%
s
\
n
"
buf
)
;
}
#
endif
}
#
ifdef
ACCESSIBILITY
a11y
:
:
AccType
nsBlockFrame
:
:
AccessibleType
(
)
{
if
(
IsTableCaption
(
)
)
{
return
GetRect
(
)
.
IsEmpty
(
)
?
a11y
:
:
eNoType
:
a11y
:
:
eHTMLCaptionType
;
}
if
(
mContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
hr
)
)
{
return
a11y
:
:
eHTMLHRType
;
}
if
(
!
HasBullet
(
)
|
|
!
PresContext
(
)
)
{
if
(
!
mContent
-
>
GetParent
(
)
)
{
return
a11y
:
:
eNoType
;
}
nsCOMPtr
<
nsIDOMHTMLDocument
>
htmlDoc
=
do_QueryInterface
(
mContent
-
>
GetComposedDoc
(
)
)
;
if
(
htmlDoc
)
{
nsCOMPtr
<
nsIDOMHTMLElement
>
body
;
htmlDoc
-
>
GetBody
(
getter_AddRefs
(
body
)
)
;
if
(
SameCOMIdentity
(
body
mContent
)
)
{
return
a11y
:
:
eNoType
;
}
}
return
a11y
:
:
eHyperTextType
;
}
return
a11y
:
:
eHTMLLiType
;
}
#
endif
void
nsBlockFrame
:
:
ClearLineCursor
(
)
{
if
(
!
(
GetStateBits
(
)
&
NS_BLOCK_HAS_LINE_CURSOR
)
)
{
return
;
}
DeleteProperty
(
LineCursorProperty
(
)
)
;
RemoveStateBits
(
NS_BLOCK_HAS_LINE_CURSOR
)
;
}
void
nsBlockFrame
:
:
SetupLineCursor
(
)
{
if
(
GetStateBits
(
)
&
NS_BLOCK_HAS_LINE_CURSOR
|
|
mLines
.
empty
(
)
)
{
return
;
}
SetProperty
(
LineCursorProperty
(
)
mLines
.
front
(
)
)
;
AddStateBits
(
NS_BLOCK_HAS_LINE_CURSOR
)
;
}
nsLineBox
*
nsBlockFrame
:
:
GetFirstLineContaining
(
nscoord
y
)
{
if
(
!
(
GetStateBits
(
)
&
NS_BLOCK_HAS_LINE_CURSOR
)
)
{
return
nullptr
;
}
nsLineBox
*
property
=
GetProperty
(
LineCursorProperty
(
)
)
;
LineIterator
cursor
=
mLines
.
begin
(
property
)
;
nsRect
cursorArea
=
cursor
-
>
GetVisualOverflowArea
(
)
;
while
(
(
cursorArea
.
IsEmpty
(
)
|
|
cursorArea
.
YMost
(
)
>
y
)
&
&
cursor
!
=
mLines
.
front
(
)
)
{
cursor
=
cursor
.
prev
(
)
;
cursorArea
=
cursor
-
>
GetVisualOverflowArea
(
)
;
}
while
(
(
cursorArea
.
IsEmpty
(
)
|
|
cursorArea
.
YMost
(
)
<
=
y
)
&
&
cursor
!
=
mLines
.
back
(
)
)
{
cursor
=
cursor
.
next
(
)
;
cursorArea
=
cursor
-
>
GetVisualOverflowArea
(
)
;
}
if
(
cursor
.
get
(
)
!
=
property
)
{
SetProperty
(
LineCursorProperty
(
)
cursor
.
get
(
)
)
;
}
return
cursor
.
get
(
)
;
}
void
nsBlockFrame
:
:
ChildIsDirty
(
nsIFrame
*
aChild
)
{
if
(
aChild
-
>
GetStateBits
(
)
&
NS_FRAME_OUT_OF_FLOW
&
&
aChild
-
>
IsAbsolutelyPositioned
(
)
)
{
}
else
if
(
aChild
=
=
GetOutsideBullet
(
)
)
{
LineIterator
bulletLine
=
LinesBegin
(
)
;
if
(
bulletLine
!
=
LinesEnd
(
)
&
&
bulletLine
-
>
BSize
(
)
=
=
0
&
&
bulletLine
!
=
mLines
.
back
(
)
)
{
bulletLine
=
bulletLine
.
next
(
)
;
}
if
(
bulletLine
!
=
LinesEnd
(
)
)
{
MarkLineDirty
(
bulletLine
&
mLines
)
;
}
}
else
{
if
(
!
(
aChild
-
>
GetStateBits
(
)
&
NS_FRAME_OUT_OF_FLOW
)
)
{
AddStateBits
(
NS_BLOCK_LOOK_FOR_DIRTY_FRAMES
)
;
}
else
{
NS_ASSERTION
(
aChild
-
>
IsFloating
(
)
"
should
be
a
float
"
)
;
nsIFrame
*
thisFC
=
FirstContinuation
(
)
;
nsIFrame
*
placeholderPath
=
aChild
-
>
GetPlaceholderFrame
(
)
;
if
(
placeholderPath
)
{
for
(
;
;
)
{
nsIFrame
*
parent
=
placeholderPath
-
>
GetParent
(
)
;
if
(
parent
-
>
GetContent
(
)
=
=
mContent
&
&
parent
-
>
FirstContinuation
(
)
=
=
thisFC
)
{
parent
-
>
AddStateBits
(
NS_BLOCK_LOOK_FOR_DIRTY_FRAMES
)
;
break
;
}
placeholderPath
=
parent
;
}
placeholderPath
-
>
AddStateBits
(
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
}
}
}
nsContainerFrame
:
:
ChildIsDirty
(
aChild
)
;
}
void
nsBlockFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
if
(
aPrevInFlow
)
{
RemoveStateBits
(
NS_BLOCK_FLAGS_MASK
)
;
AddStateBits
(
aPrevInFlow
-
>
GetStateBits
(
)
&
(
NS_BLOCK_FLAGS_MASK
&
~
NS_BLOCK_FLAGS_NON_INHERITED_MASK
)
)
;
}
nsContainerFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
if
(
!
aPrevInFlow
|
|
aPrevInFlow
-
>
GetStateBits
(
)
&
NS_BLOCK_NEEDS_BIDI_RESOLUTION
)
{
AddStateBits
(
NS_BLOCK_NEEDS_BIDI_RESOLUTION
)
;
}
if
(
StyleDisplay
(
)
-
>
mDisplay
=
=
mozilla
:
:
StyleDisplay
:
:
FlowRoot
|
|
(
GetParent
(
)
&
&
StyleVisibility
(
)
-
>
mWritingMode
!
=
GetParent
(
)
-
>
StyleVisibility
(
)
-
>
mWritingMode
)
|
|
StyleDisplay
(
)
-
>
IsContainPaint
(
)
)
{
AddStateBits
(
NS_BLOCK_FORMATTING_CONTEXT_STATE_BITS
)
;
}
if
(
(
GetStateBits
(
)
&
(
NS_FRAME_FONT_INFLATION_CONTAINER
|
NS_BLOCK_FLOAT_MGR
)
)
=
=
(
NS_FRAME_FONT_INFLATION_CONTAINER
|
NS_BLOCK_FLOAT_MGR
)
)
{
AddStateBits
(
NS_FRAME_FONT_INFLATION_FLOW_ROOT
)
;
}
}
void
nsBlockFrame
:
:
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
aChildList
)
{
if
(
kFloatList
=
=
aListID
)
{
mFloats
.
SetFrames
(
aChildList
)
;
}
else
if
(
kPrincipalList
=
=
aListID
)
{
NS_ASSERTION
(
(
GetStateBits
(
)
&
(
NS_BLOCK_FRAME_HAS_INSIDE_BULLET
|
NS_BLOCK_FRAME_HAS_OUTSIDE_BULLET
)
)
=
=
0
"
how
can
we
have
a
bullet
already
?
"
)
;
#
ifdef
DEBUG
nsIAtom
*
pseudo
=
StyleContext
(
)
-
>
GetPseudo
(
)
;
bool
haveFirstLetterStyle
=
(
!
pseudo
|
|
(
pseudo
=
=
nsCSSAnonBoxes
:
:
cellContent
&
&
GetParent
(
)
-
>
StyleContext
(
)
-
>
GetPseudo
(
)
=
=
nullptr
)
|
|
pseudo
=
=
nsCSSAnonBoxes
:
:
fieldsetContent
|
|
pseudo
=
=
nsCSSAnonBoxes
:
:
buttonContent
|
|
pseudo
=
=
nsCSSAnonBoxes
:
:
columnContent
|
|
(
pseudo
=
=
nsCSSAnonBoxes
:
:
scrolledContent
&
&
!
GetParent
(
)
-
>
IsListControlFrame
(
)
)
|
|
pseudo
=
=
nsCSSAnonBoxes
:
:
mozSVGText
)
&
&
!
IsComboboxControlFrame
(
)
&
&
!
IsFrameOfType
(
eMathML
)
&
&
RefPtr
<
nsStyleContext
>
(
GetFirstLetterStyle
(
PresContext
(
)
)
)
!
=
nullptr
;
NS_ASSERTION
(
haveFirstLetterStyle
=
=
(
(
mState
&
NS_BLOCK_HAS_FIRST_LETTER_STYLE
)
!
=
0
)
"
NS_BLOCK_HAS_FIRST_LETTER_STYLE
state
out
of
sync
"
)
;
#
endif
AddFrames
(
aChildList
nullptr
)
;
nsIFrame
*
possibleListItem
=
this
;
while
(
1
)
{
nsIFrame
*
parent
=
possibleListItem
-
>
GetParent
(
)
;
if
(
parent
-
>
GetContent
(
)
!
=
GetContent
(
)
)
{
break
;
}
possibleListItem
=
parent
;
}
if
(
mozilla
:
:
StyleDisplay
:
:
ListItem
=
=
possibleListItem
-
>
StyleDisplay
(
)
-
>
mDisplay
&
&
!
GetPrevInFlow
(
)
)
{
const
nsStyleList
*
styleList
=
StyleList
(
)
;
CounterStyle
*
style
=
styleList
-
>
mCounterStyle
;
CreateBulletFrameForListItem
(
style
-
>
IsBullet
(
)
styleList
-
>
mListStylePosition
=
=
NS_STYLE_LIST_STYLE_POSITION_INSIDE
)
;
}
}
else
{
nsContainerFrame
:
:
SetInitialChildList
(
aListID
aChildList
)
;
}
}
void
nsBlockFrame
:
:
CreateBulletFrameForListItem
(
bool
aCreateBulletList
bool
aListStylePositionInside
)
{
nsIPresShell
*
shell
=
PresContext
(
)
-
>
PresShell
(
)
;
CSSPseudoElementType
pseudoType
=
aCreateBulletList
?
CSSPseudoElementType
:
:
mozListBullet
:
CSSPseudoElementType
:
:
mozListNumber
;
RefPtr
<
nsStyleContext
>
kidSC
=
ResolveBulletStyle
(
pseudoType
shell
-
>
StyleSet
(
)
)
;
nsBulletFrame
*
bullet
=
new
(
shell
)
nsBulletFrame
(
kidSC
)
;
bullet
-
>
Init
(
mContent
this
nullptr
)
;
if
(
aListStylePositionInside
)
{
nsFrameList
bulletList
(
bullet
bullet
)
;
AddFrames
(
bulletList
nullptr
)
;
SetProperty
(
InsideBulletProperty
(
)
bullet
)
;
AddStateBits
(
NS_BLOCK_FRAME_HAS_INSIDE_BULLET
)
;
}
else
{
nsFrameList
*
bulletList
=
new
(
shell
)
nsFrameList
(
bullet
bullet
)
;
SetProperty
(
OutsideBulletProperty
(
)
bulletList
)
;
AddStateBits
(
NS_BLOCK_FRAME_HAS_OUTSIDE_BULLET
)
;
}
}
bool
nsBlockFrame
:
:
BulletIsEmpty
(
)
const
{
NS_ASSERTION
(
mContent
-
>
GetPrimaryFrame
(
)
-
>
StyleDisplay
(
)
-
>
mDisplay
=
=
mozilla
:
:
StyleDisplay
:
:
ListItem
&
&
HasOutsideBullet
(
)
"
should
only
care
when
we
have
an
outside
bullet
"
)
;
const
nsStyleList
*
list
=
StyleList
(
)
;
return
list
-
>
mCounterStyle
-
>
IsNone
(
)
&
&
!
list
-
>
GetListStyleImage
(
)
;
}
void
nsBlockFrame
:
:
GetSpokenBulletText
(
nsAString
&
aText
)
const
{
const
nsStyleList
*
myList
=
StyleList
(
)
;
if
(
myList
-
>
GetListStyleImage
(
)
)
{
aText
.
Assign
(
kDiscCharacter
)
;
aText
.
Append
(
'
'
)
;
}
else
{
nsBulletFrame
*
bullet
=
GetBullet
(
)
;
if
(
bullet
)
{
bullet
-
>
GetSpokenText
(
aText
)
;
}
else
{
aText
.
Truncate
(
)
;
}
}
}
bool
nsBlockFrame
:
:
RenumberChildFrames
(
int32_t
*
aOrdinal
int32_t
aDepth
int32_t
aIncrement
bool
aForCounting
)
{
bool
foundValidLine
;
nsBlockInFlowLineIterator
bifLineIter
(
this
&
foundValidLine
)
;
if
(
!
foundValidLine
)
{
return
false
;
}
bool
renumberedABullet
=
false
;
do
{
nsLineList
:
:
iterator
line
=
bifLineIter
.
GetLine
(
)
;
nsIFrame
*
kid
=
line
-
>
mFirstChild
;
int32_t
n
=
line
-
>
GetChildCount
(
)
;
while
(
-
-
n
>
=
0
)
{
bool
kidRenumberedABullet
=
kid
-
>
RenumberFrameAndDescendants
(
aOrdinal
aDepth
aIncrement
aForCounting
)
;
if
(
!
aForCounting
&
&
kidRenumberedABullet
)
{
line
-
>
MarkDirty
(
)
;
renumberedABullet
=
true
;
}
kid
=
kid
-
>
GetNextSibling
(
)
;
}
}
while
(
bifLineIter
.
Next
(
)
)
;
if
(
renumberedABullet
&
&
aDepth
!
=
0
)
{
AddStateBits
(
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
}
return
renumberedABullet
;
}
void
nsBlockFrame
:
:
ReflowBullet
(
nsIFrame
*
aBulletFrame
BlockReflowInput
&
aState
ReflowOutput
&
aMetrics
nscoord
aLineTop
)
{
const
ReflowInput
&
rs
=
aState
.
mReflowInput
;
WritingMode
bulletWM
=
aBulletFrame
-
>
GetWritingMode
(
)
;
LogicalSize
availSize
(
bulletWM
)
;
availSize
.
ISize
(
bulletWM
)
=
aState
.
ContentISize
(
)
;
availSize
.
BSize
(
bulletWM
)
=
NS_UNCONSTRAINEDSIZE
;
ReflowInput
reflowInput
(
aState
.
mPresContext
rs
aBulletFrame
availSize
)
;
nsReflowStatus
status
;
aBulletFrame
-
>
Reflow
(
aState
.
mPresContext
aMetrics
reflowInput
status
)
;
LogicalRect
floatAvailSpace
=
aState
.
GetFloatAvailableSpaceWithState
(
aLineTop
ShapeType
:
:
ShapeOutside
&
aState
.
mFloatManagerStateBefore
)
.
mRect
;
WritingMode
wm
=
rs
.
GetWritingMode
(
)
;
LogicalMargin
bulletMargin
=
reflowInput
.
ComputedLogicalMargin
(
)
.
ConvertTo
(
wm
bulletWM
)
;
nscoord
iStart
=
floatAvailSpace
.
IStart
(
wm
)
-
rs
.
ComputedLogicalBorderPadding
(
)
.
IStart
(
wm
)
-
bulletMargin
.
IEnd
(
wm
)
-
aMetrics
.
ISize
(
wm
)
;
nscoord
bStart
=
floatAvailSpace
.
BStart
(
wm
)
;
aBulletFrame
-
>
SetRect
(
wm
LogicalRect
(
wm
iStart
bStart
aMetrics
.
ISize
(
wm
)
aMetrics
.
BSize
(
wm
)
)
aState
.
ContainerSize
(
)
)
;
aBulletFrame
-
>
DidReflow
(
aState
.
mPresContext
&
aState
.
mReflowInput
nsDidReflowStatus
:
:
FINISHED
)
;
}
void
nsBlockFrame
:
:
DoCollectFloats
(
nsIFrame
*
aFrame
nsFrameList
&
aList
bool
aCollectSiblings
)
{
while
(
aFrame
)
{
if
(
!
aFrame
-
>
IsFloatContainingBlock
(
)
)
{
nsIFrame
*
outOfFlowFrame
=
aFrame
-
>
IsPlaceholderFrame
(
)
?
nsLayoutUtils
:
:
GetFloatFromPlaceholder
(
aFrame
)
:
nullptr
;
while
(
outOfFlowFrame
&
&
outOfFlowFrame
-
>
GetParent
(
)
=
=
this
)
{
RemoveFloat
(
outOfFlowFrame
)
;
outOfFlowFrame
-
>
RemoveStateBits
(
NS_FRAME_IS_PUSHED_FLOAT
)
;
aList
.
AppendFrame
(
nullptr
outOfFlowFrame
)
;
outOfFlowFrame
=
outOfFlowFrame
-
>
GetNextInFlow
(
)
;
}
DoCollectFloats
(
aFrame
-
>
PrincipalChildList
(
)
.
FirstChild
(
)
aList
true
)
;
DoCollectFloats
(
aFrame
-
>
GetChildList
(
kOverflowList
)
.
FirstChild
(
)
aList
true
)
;
}
if
(
!
aCollectSiblings
)
break
;
aFrame
=
aFrame
-
>
GetNextSibling
(
)
;
}
}
void
nsBlockFrame
:
:
CheckFloats
(
BlockReflowInput
&
aState
)
{
#
ifdef
DEBUG
bool
anyLineDirty
=
false
;
AutoTArray
<
nsIFrame
*
8
>
lineFloats
;
for
(
LineIterator
line
=
LinesBegin
(
)
line_end
=
LinesEnd
(
)
;
line
!
=
line_end
;
+
+
line
)
{
if
(
line
-
>
HasFloats
(
)
)
{
nsFloatCache
*
fc
=
line
-
>
GetFirstFloat
(
)
;
while
(
fc
)
{
lineFloats
.
AppendElement
(
fc
-
>
mFloat
)
;
fc
=
fc
-
>
Next
(
)
;
}
}
if
(
line
-
>
IsDirty
(
)
)
{
anyLineDirty
=
true
;
}
}
AutoTArray
<
nsIFrame
*
8
>
storedFloats
;
bool
equal
=
true
;
uint32_t
i
=
0
;
for
(
nsIFrame
*
f
:
mFloats
)
{
if
(
f
-
>
GetStateBits
(
)
&
NS_FRAME_IS_PUSHED_FLOAT
)
continue
;
storedFloats
.
AppendElement
(
f
)
;
if
(
i
<
lineFloats
.
Length
(
)
&
&
lineFloats
.
ElementAt
(
i
)
!
=
f
)
{
equal
=
false
;
}
+
+
i
;
}
if
(
(
!
equal
|
|
lineFloats
.
Length
(
)
!
=
storedFloats
.
Length
(
)
)
&
&
!
anyLineDirty
)
{
NS_WARNING
(
"
nsBlockFrame
:
:
CheckFloats
:
Explicit
float
list
is
out
of
sync
with
float
cache
"
)
;
#
if
defined
(
DEBUG_roc
)
nsFrame
:
:
RootFrameList
(
PresContext
(
)
stdout
0
)
;
for
(
i
=
0
;
i
<
lineFloats
.
Length
(
)
;
+
+
i
)
{
printf
(
"
Line
float
:
%
p
\
n
"
lineFloats
.
ElementAt
(
i
)
)
;
}
for
(
i
=
0
;
i
<
storedFloats
.
Length
(
)
;
+
+
i
)
{
printf
(
"
Stored
float
:
%
p
\
n
"
storedFloats
.
ElementAt
(
i
)
)
;
}
#
endif
}
#
endif
const
nsFrameList
*
oofs
=
GetOverflowOutOfFlows
(
)
;
if
(
oofs
&
&
oofs
-
>
NotEmpty
(
)
)
{
aState
.
FloatManager
(
)
-
>
RemoveTrailingRegions
(
oofs
-
>
FirstChild
(
)
)
;
}
}
void
nsBlockFrame
:
:
IsMarginRoot
(
bool
*
aBStartMarginRoot
bool
*
aBEndMarginRoot
)
{
if
(
!
(
GetStateBits
(
)
&
NS_BLOCK_MARGIN_ROOT
)
)
{
nsIFrame
*
parent
=
GetParent
(
)
;
if
(
!
parent
|
|
parent
-
>
IsFloatContainingBlock
(
)
)
{
*
aBStartMarginRoot
=
false
;
*
aBEndMarginRoot
=
false
;
return
;
}
if
(
parent
-
>
IsColumnSetFrame
(
)
)
{
*
aBStartMarginRoot
=
GetPrevInFlow
(
)
=
=
nullptr
;
*
aBEndMarginRoot
=
GetNextInFlow
(
)
=
=
nullptr
;
return
;
}
}
*
aBStartMarginRoot
=
true
;
*
aBEndMarginRoot
=
true
;
}
bool
nsBlockFrame
:
:
BlockNeedsFloatManager
(
nsIFrame
*
aBlock
)
{
NS_PRECONDITION
(
aBlock
"
Must
have
a
frame
"
)
;
NS_ASSERTION
(
nsLayoutUtils
:
:
GetAsBlock
(
aBlock
)
"
aBlock
must
be
a
block
"
)
;
nsIFrame
*
parent
=
aBlock
-
>
GetParent
(
)
;
return
(
aBlock
-
>
GetStateBits
(
)
&
NS_BLOCK_FLOAT_MGR
)
|
|
(
parent
&
&
!
parent
-
>
IsFloatContainingBlock
(
)
)
;
}
bool
nsBlockFrame
:
:
BlockCanIntersectFloats
(
nsIFrame
*
aFrame
)
{
return
aFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eBlockFrame
)
&
&
!
aFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eReplaced
)
&
&
!
(
aFrame
-
>
GetStateBits
(
)
&
NS_BLOCK_FLOAT_MGR
)
;
}
nsBlockFrame
:
:
ReplacedElementISizeToClear
nsBlockFrame
:
:
ISizeToClearPastFloats
(
const
BlockReflowInput
&
aState
const
LogicalRect
&
aFloatAvailableSpace
nsIFrame
*
aFrame
)
{
nscoord
inlineStartOffset
inlineEndOffset
;
WritingMode
wm
=
aState
.
mReflowInput
.
GetWritingMode
(
)
;
SizeComputationInput
offsetState
(
aFrame
aState
.
mReflowInput
.
mRenderingContext
wm
aState
.
mContentArea
.
ISize
(
wm
)
)
;
ReplacedElementISizeToClear
result
;
aState
.
ComputeReplacedBlockOffsetsForFloats
(
aFrame
aFloatAvailableSpace
inlineStartOffset
inlineEndOffset
)
;
nscoord
availISize
=
aState
.
mContentArea
.
ISize
(
wm
)
-
inlineStartOffset
-
inlineEndOffset
;
WritingMode
frWM
=
aFrame
-
>
GetWritingMode
(
)
;
LogicalSize
availSpace
=
LogicalSize
(
wm
availISize
NS_UNCONSTRAINEDSIZE
)
.
ConvertTo
(
frWM
wm
)
;
ReflowInput
reflowInput
(
aState
.
mPresContext
aState
.
mReflowInput
aFrame
availSpace
)
;
result
.
borderBoxISize
=
reflowInput
.
ComputedSizeWithBorderPadding
(
)
.
ConvertTo
(
wm
frWM
)
.
ISize
(
wm
)
;
LogicalMargin
computedMargin
=
offsetState
.
ComputedLogicalMargin
(
)
.
ConvertTo
(
wm
frWM
)
;
result
.
marginIStart
=
computedMargin
.
IStart
(
wm
)
;
return
result
;
}
nsBlockFrame
*
nsBlockFrame
:
:
GetNearestAncestorBlock
(
nsIFrame
*
aCandidate
)
{
nsBlockFrame
*
block
=
nullptr
;
while
(
aCandidate
)
{
block
=
nsLayoutUtils
:
:
GetAsBlock
(
aCandidate
)
;
if
(
block
)
{
return
block
;
}
aCandidate
=
aCandidate
-
>
GetParent
(
)
;
}
NS_NOTREACHED
(
"
Fell
off
frame
tree
looking
for
ancestor
block
!
"
)
;
return
nullptr
;
}
void
nsBlockFrame
:
:
ComputeFinalBSize
(
const
ReflowInput
&
aReflowInput
nsReflowStatus
*
aStatus
nscoord
aContentBSize
const
LogicalMargin
&
aBorderPadding
LogicalSize
&
aFinalSize
nscoord
aConsumed
)
{
WritingMode
wm
=
aReflowInput
.
GetWritingMode
(
)
;
nscoord
computedBSizeLeftOver
=
GetEffectiveComputedBSize
(
aReflowInput
aConsumed
)
;
NS_ASSERTION
(
!
(
IS_TRUE_OVERFLOW_CONTAINER
(
this
)
&
&
computedBSizeLeftOver
)
"
overflow
container
must
not
have
computedBSizeLeftOver
"
)
;
aFinalSize
.
BSize
(
wm
)
=
NSCoordSaturatingAdd
(
NSCoordSaturatingAdd
(
aBorderPadding
.
BStart
(
wm
)
computedBSizeLeftOver
)
aBorderPadding
.
BEnd
(
wm
)
)
;
if
(
aStatus
-
>
IsIncomplete
(
)
&
&
aFinalSize
.
BSize
(
wm
)
<
aReflowInput
.
AvailableBSize
(
)
)
{
aStatus
-
>
SetOverflowIncomplete
(
)
;
}
if
(
aStatus
-
>
IsComplete
(
)
)
{
if
(
computedBSizeLeftOver
>
0
&
&
NS_UNCONSTRAINEDSIZE
!
=
aReflowInput
.
AvailableBSize
(
)
&
&
aFinalSize
.
BSize
(
wm
)
>
aReflowInput
.
AvailableBSize
(
)
)
{
if
(
ShouldAvoidBreakInside
(
aReflowInput
)
)
{
aStatus
-
>
SetInlineLineBreakBeforeAndReset
(
)
;
return
;
}
aFinalSize
.
BSize
(
wm
)
=
std
:
:
max
(
aReflowInput
.
AvailableBSize
(
)
aContentBSize
)
;
aStatus
-
>
SetIncomplete
(
)
;
if
(
!
GetNextInFlow
(
)
)
aStatus
-
>
SetNextInFlowNeedsReflow
(
)
;
}
}
}
nsresult
nsBlockFrame
:
:
ResolveBidi
(
)
{
NS_ASSERTION
(
!
GetPrevInFlow
(
)
"
ResolveBidi
called
on
non
-
first
continuation
"
)
;
nsPresContext
*
presContext
=
PresContext
(
)
;
if
(
!
presContext
-
>
BidiEnabled
(
)
)
{
return
NS_OK
;
}
return
nsBidiPresUtils
:
:
Resolve
(
this
)
;
}
void
nsBlockFrame
:
:
UpdatePseudoElementStyles
(
ServoRestyleState
&
aRestyleState
)
{
if
(
nsBulletFrame
*
bullet
=
GetBullet
(
)
)
{
CSSPseudoElementType
type
=
bullet
-
>
StyleContext
(
)
-
>
GetPseudoType
(
)
;
RefPtr
<
nsStyleContext
>
newBulletStyle
=
ResolveBulletStyle
(
type
&
aRestyleState
.
StyleSet
(
)
)
;
UpdateStyleOfOwnedChildFrame
(
bullet
newBulletStyle
aRestyleState
)
;
}
}
already_AddRefed
<
nsStyleContext
>
nsBlockFrame
:
:
ResolveBulletStyle
(
CSSPseudoElementType
aType
StyleSetHandle
aStyleSet
)
{
nsStyleContext
*
parentStyle
=
CorrectStyleParentFrame
(
this
nsCSSPseudoElements
:
:
GetPseudoAtom
(
aType
)
)
-
>
StyleContext
(
)
;
return
aStyleSet
-
>
ResolvePseudoElementStyle
(
mContent
-
>
AsElement
(
)
aType
parentStyle
nullptr
)
;
}
#
ifdef
DEBUG
void
nsBlockFrame
:
:
VerifyLines
(
bool
aFinalCheckOK
)
{
if
(
!
gVerifyLines
)
{
return
;
}
if
(
mLines
.
empty
(
)
)
{
return
;
}
nsLineBox
*
cursor
=
GetLineCursor
(
)
;
int32_t
count
=
0
;
LineIterator
line
line_end
;
for
(
line
=
LinesBegin
(
)
line_end
=
LinesEnd
(
)
;
line
!
=
line_end
;
+
+
line
)
{
if
(
line
=
=
cursor
)
{
cursor
=
nullptr
;
}
if
(
aFinalCheckOK
)
{
MOZ_ASSERT
(
line
-
>
GetChildCount
(
)
"
empty
line
"
)
;
if
(
line
-
>
IsBlock
(
)
)
{
NS_ASSERTION
(
1
=
=
line
-
>
GetChildCount
(
)
"
bad
first
line
"
)
;
}
}
count
+
=
line
-
>
GetChildCount
(
)
;
}
int32_t
frameCount
=
0
;
nsIFrame
*
frame
=
mLines
.
front
(
)
-
>
mFirstChild
;
while
(
frame
)
{
frameCount
+
+
;
frame
=
frame
-
>
GetNextSibling
(
)
;
}
NS_ASSERTION
(
count
=
=
frameCount
"
bad
line
list
"
)
;
for
(
line
=
LinesBegin
(
)
line_end
=
LinesEnd
(
)
;
line
!
=
line_end
;
)
{
count
=
line
-
>
GetChildCount
(
)
;
frame
=
line
-
>
mFirstChild
;
while
(
-
-
count
>
=
0
)
{
frame
=
frame
-
>
GetNextSibling
(
)
;
}
+
+
line
;
if
(
(
line
!
=
line_end
)
&
&
(
0
!
=
line
-
>
GetChildCount
(
)
)
)
{
NS_ASSERTION
(
frame
=
=
line
-
>
mFirstChild
"
bad
line
list
"
)
;
}
}
if
(
cursor
)
{
FrameLines
*
overflowLines
=
GetOverflowLines
(
)
;
if
(
overflowLines
)
{
LineIterator
line
=
overflowLines
-
>
mLines
.
begin
(
)
;
LineIterator
line_end
=
overflowLines
-
>
mLines
.
end
(
)
;
for
(
;
line
!
=
line_end
;
+
+
line
)
{
if
(
line
=
=
cursor
)
{
cursor
=
nullptr
;
break
;
}
}
}
}
NS_ASSERTION
(
!
cursor
"
stale
LineCursorProperty
"
)
;
}
void
nsBlockFrame
:
:
VerifyOverflowSituation
(
)
{
nsFrameList
*
oofs
=
GetOverflowOutOfFlows
(
)
;
if
(
oofs
)
{
for
(
nsFrameList
:
:
Enumerator
e
(
*
oofs
)
;
!
e
.
AtEnd
(
)
;
e
.
Next
(
)
)
{
nsIFrame
*
nif
=
e
.
get
(
)
-
>
GetNextInFlow
(
)
;
MOZ_ASSERT
(
!
nif
|
|
(
!
mFloats
.
ContainsFrame
(
nif
)
&
&
!
mFrames
.
ContainsFrame
(
nif
)
)
)
;
}
}
oofs
=
GetPushedFloats
(
)
;
if
(
oofs
)
{
for
(
nsFrameList
:
:
Enumerator
e
(
*
oofs
)
;
!
e
.
AtEnd
(
)
;
e
.
Next
(
)
)
{
nsIFrame
*
nif
=
e
.
get
(
)
-
>
GetNextInFlow
(
)
;
MOZ_ASSERT
(
!
nif
|
|
(
!
mFloats
.
ContainsFrame
(
nif
)
&
&
!
mFrames
.
ContainsFrame
(
nif
)
)
)
;
}
}
nsIFrame
:
:
ChildListID
childLists
[
]
=
{
nsIFrame
:
:
kFloatList
nsIFrame
:
:
kPushedFloatsList
}
;
for
(
size_t
i
=
0
;
i
<
ArrayLength
(
childLists
)
;
+
+
i
)
{
nsFrameList
children
(
GetChildList
(
childLists
[
i
]
)
)
;
for
(
nsFrameList
:
:
Enumerator
e
(
children
)
;
!
e
.
AtEnd
(
)
;
e
.
Next
(
)
)
{
nsIFrame
*
parent
=
this
;
nsIFrame
*
nif
=
e
.
get
(
)
-
>
GetNextInFlow
(
)
;
for
(
;
nif
;
nif
=
nif
-
>
GetNextInFlow
(
)
)
{
bool
found
=
false
;
for
(
nsIFrame
*
p
=
parent
;
p
;
p
=
p
-
>
GetNextInFlow
(
)
)
{
if
(
nif
-
>
GetParent
(
)
=
=
p
)
{
parent
=
p
;
found
=
true
;
break
;
}
}
MOZ_ASSERT
(
found
"
next
-
in
-
flow
is
a
child
of
parent
earlier
in
the
frame
tree
?
"
)
;
}
}
}
nsBlockFrame
*
flow
=
static_cast
<
nsBlockFrame
*
>
(
FirstInFlow
(
)
)
;
while
(
flow
)
{
FrameLines
*
overflowLines
=
flow
-
>
GetOverflowLines
(
)
;
if
(
overflowLines
)
{
NS_ASSERTION
(
!
overflowLines
-
>
mLines
.
empty
(
)
"
should
not
be
empty
if
present
"
)
;
NS_ASSERTION
(
overflowLines
-
>
mLines
.
front
(
)
-
>
mFirstChild
"
bad
overflow
lines
"
)
;
NS_ASSERTION
(
overflowLines
-
>
mLines
.
front
(
)
-
>
mFirstChild
=
=
overflowLines
-
>
mFrames
.
FirstChild
(
)
"
bad
overflow
frames
/
lines
"
)
;
}
nsLineBox
*
cursor
=
flow
-
>
GetLineCursor
(
)
;
if
(
cursor
)
{
LineIterator
line
=
flow
-
>
LinesBegin
(
)
;
LineIterator
line_end
=
flow
-
>
LinesEnd
(
)
;
for
(
;
line
!
=
line_end
&
&
line
!
=
cursor
;
+
+
line
)
;
if
(
line
=
=
line_end
&
&
overflowLines
)
{
line
=
overflowLines
-
>
mLines
.
begin
(
)
;
line_end
=
overflowLines
-
>
mLines
.
end
(
)
;
for
(
;
line
!
=
line_end
&
&
line
!
=
cursor
;
+
+
line
)
;
}
MOZ_ASSERT
(
line
!
=
line_end
"
stale
LineCursorProperty
"
)
;
}
flow
=
static_cast
<
nsBlockFrame
*
>
(
flow
-
>
GetNextInFlow
(
)
)
;
}
}
int32_t
nsBlockFrame
:
:
GetDepth
(
)
const
{
int32_t
depth
=
0
;
nsIFrame
*
parent
=
GetParent
(
)
;
while
(
parent
)
{
parent
=
parent
-
>
GetParent
(
)
;
depth
+
+
;
}
return
depth
;
}
already_AddRefed
<
nsStyleContext
>
nsBlockFrame
:
:
GetFirstLetterStyle
(
nsPresContext
*
aPresContext
)
{
return
aPresContext
-
>
StyleSet
(
)
-
>
ProbePseudoElementStyle
(
mContent
-
>
AsElement
(
)
CSSPseudoElementType
:
:
firstLetter
mStyleContext
)
;
}
#
endif
