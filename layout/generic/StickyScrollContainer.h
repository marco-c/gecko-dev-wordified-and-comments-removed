#
ifndef
StickyScrollContainer_h
#
define
StickyScrollContainer_h
#
include
"
mozilla
/
DepthOrderedFrameList
.
h
"
#
include
"
nsIScrollPositionListener
.
h
"
#
include
"
nsPoint
.
h
"
#
include
"
nsRectAbsolute
.
h
"
#
include
"
nsTArray
.
h
"
struct
nsRect
;
class
nsIFrame
;
namespace
mozilla
{
class
ScrollContainerFrame
;
class
StickyScrollContainer
final
:
public
nsIScrollPositionListener
{
public
:
static
StickyScrollContainer
*
GetStickyScrollContainerForFrame
(
nsIFrame
*
aFrame
)
;
static
StickyScrollContainer
*
GetStickyScrollContainerForScrollFrame
(
nsIFrame
*
aScrollFrame
)
;
void
AddFrame
(
nsIFrame
*
aFrame
)
{
mFrames
.
Add
(
aFrame
)
;
}
void
RemoveFrame
(
nsIFrame
*
aFrame
)
{
mFrames
.
Remove
(
aFrame
)
;
}
ScrollContainerFrame
*
ScrollContainer
(
)
const
{
return
mScrollContainerFrame
;
}
static
void
ComputeStickyOffsets
(
nsIFrame
*
aFrame
)
;
nsPoint
ComputePosition
(
nsIFrame
*
aFrame
)
const
;
void
GetScrollRanges
(
nsIFrame
*
aFrame
nsRectAbsolute
*
aOuter
nsRectAbsolute
*
aInner
)
const
;
void
PositionContinuations
(
nsIFrame
*
aFrame
)
;
void
UpdatePositions
(
nsPoint
aScrollPosition
nsIFrame
*
aSubtreeRoot
)
;
void
ScrollPositionWillChange
(
nscoord
aX
nscoord
aY
)
override
;
void
ScrollPositionDidChange
(
nscoord
aX
nscoord
aY
)
override
;
~
StickyScrollContainer
(
)
;
const
DepthOrderedFrameList
&
GetFrames
(
)
const
{
return
mFrames
;
}
bool
IsStuckInYDirection
(
nsIFrame
*
aFrame
)
const
;
void
MarkFramesForReflow
(
)
;
private
:
explicit
StickyScrollContainer
(
ScrollContainerFrame
*
aScrollContainerFrame
)
;
void
ComputeStickyLimits
(
nsIFrame
*
aFrame
nsRect
*
aStick
nsRect
*
aContain
)
const
;
ScrollContainerFrame
*
const
mScrollContainerFrame
;
DepthOrderedFrameList
mFrames
;
nsPoint
mScrollPosition
;
}
;
}
#
endif
