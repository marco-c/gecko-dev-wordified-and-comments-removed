#
ifndef
nsTextPaintStyle_h__
#
define
nsTextPaintStyle_h__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
nsAtomHashKeys
.
h
"
#
include
"
nsISelectionController
.
h
"
#
include
"
nsTHashMap
.
h
"
class
nsTextFrame
;
class
nsPresContext
;
namespace
mozilla
{
enum
class
StyleTextDecorationStyle
:
uint8_t
;
}
class
MOZ_STACK_CLASS
nsTextPaintStyle
{
using
ComputedStyle
=
mozilla
:
:
ComputedStyle
;
using
SelectionType
=
mozilla
:
:
SelectionType
;
using
StyleTextDecorationStyle
=
mozilla
:
:
StyleTextDecorationStyle
;
using
StyleSimpleShadow
=
mozilla
:
:
StyleSimpleShadow
;
public
:
explicit
nsTextPaintStyle
(
nsTextFrame
*
aFrame
)
;
void
SetResolveColors
(
bool
aResolveColors
)
{
mResolveColors
=
aResolveColors
;
}
nscolor
GetTextColor
(
)
;
nscolor
GetWebkitTextStrokeColor
(
)
;
float
GetWebkitTextStrokeWidth
(
)
;
enum
class
SelectionStyleIndex
:
uint8_t
{
RawInput
=
0
SelRawText
ConvText
SelConvText
SpellChecker
Count
}
;
bool
GetSelectionColors
(
nscolor
*
aForeColor
nscolor
*
aBackColor
)
;
void
GetHighlightColors
(
nscolor
*
aForeColor
nscolor
*
aBackColor
)
;
void
GetTargetTextColors
(
nscolor
*
aForeColor
nscolor
*
aBackColor
)
;
bool
GetCustomHighlightTextColor
(
nsAtom
*
aHighlightName
nscolor
*
aForeColor
)
;
bool
GetCustomHighlightBackgroundColor
(
nsAtom
*
aHighlightName
nscolor
*
aBackColor
)
;
void
GetURLSecondaryColor
(
nscolor
*
aForeColor
)
;
void
GetIMESelectionColors
(
SelectionStyleIndex
aIndex
nscolor
*
aForeColor
nscolor
*
aBackColor
)
;
bool
GetSelectionUnderlineForPaint
(
SelectionStyleIndex
aIndex
nscolor
*
aLineColor
float
*
aRelativeSize
StyleTextDecorationStyle
*
aStyle
)
;
static
bool
GetSelectionUnderline
(
nsIFrame
*
SelectionStyleIndex
aIndex
nscolor
*
aLineColor
float
*
aRelativeSize
StyleTextDecorationStyle
*
aStyle
)
;
bool
GetSelectionShadow
(
mozilla
:
:
Span
<
const
StyleSimpleShadow
>
*
aShadows
)
;
nsPresContext
*
PresContext
(
)
const
{
return
mPresContext
;
}
static
SelectionStyleIndex
GetUnderlineStyleIndexForSelectionType
(
SelectionType
aSelectionType
)
{
switch
(
aSelectionType
)
{
case
SelectionType
:
:
eIMERawClause
:
return
SelectionStyleIndex
:
:
RawInput
;
case
SelectionType
:
:
eIMESelectedRawClause
:
return
SelectionStyleIndex
:
:
SelRawText
;
case
SelectionType
:
:
eIMEConvertedClause
:
return
SelectionStyleIndex
:
:
ConvText
;
case
SelectionType
:
:
eIMESelectedClause
:
return
SelectionStyleIndex
:
:
SelConvText
;
case
SelectionType
:
:
eSpellCheck
:
return
SelectionStyleIndex
:
:
SpellChecker
;
default
:
NS_WARNING
(
"
non
-
IME
selection
type
"
)
;
return
SelectionStyleIndex
:
:
RawInput
;
}
}
nscolor
GetSystemFieldForegroundColor
(
)
;
nscolor
GetSystemFieldBackgroundColor
(
)
;
protected
:
nsTextFrame
*
mFrame
;
nsPresContext
*
mPresContext
;
bool
mInitCommonColors
;
bool
mInitSelectionColorsAndShadow
;
bool
mResolveColors
;
nscolor
mSelectionTextColor
;
nscolor
mSelectionBGColor
;
RefPtr
<
ComputedStyle
>
mSelectionPseudoStyle
;
nsTHashMap
<
RefPtr
<
nsAtom
>
RefPtr
<
ComputedStyle
>
>
mCustomHighlightPseudoStyles
;
int32_t
mSufficientContrast
;
nscolor
mFrameBackgroundColor
;
nscolor
mSystemFieldForegroundColor
;
nscolor
mSystemFieldBackgroundColor
;
struct
nsSelectionStyle
{
nscolor
mTextColor
;
nscolor
mBGColor
;
nscolor
mUnderlineColor
;
StyleTextDecorationStyle
mUnderlineStyle
;
float
mUnderlineRelativeSize
;
}
;
mozilla
:
:
EnumeratedArray
<
SelectionStyleIndex
mozilla
:
:
Maybe
<
nsSelectionStyle
>
size_t
(
SelectionStyleIndex
:
:
Count
)
>
mSelectionStyle
;
void
InitCommonColors
(
)
;
bool
InitSelectionColorsAndShadow
(
)
;
nsSelectionStyle
*
SelectionStyle
(
SelectionStyleIndex
aIndex
)
;
nsSelectionStyle
InitSelectionStyle
(
SelectionStyleIndex
aIndex
)
;
bool
EnsureSufficientContrast
(
nscolor
*
aForeColor
nscolor
*
aBackColor
)
;
nscolor
GetResolvedForeColor
(
nscolor
aColor
nscolor
aDefaultForeColor
nscolor
aBackColor
)
;
}
;
#
endif
