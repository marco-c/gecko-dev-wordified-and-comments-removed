#
ifndef
nsPageContentFrame_h___
#
define
nsPageContentFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ViewportFrame
.
h
"
class
nsPageFrame
;
class
nsSharedPageData
;
namespace
mozilla
{
class
PresShell
;
}
class
nsPageContentFrame
final
:
public
mozilla
:
:
ViewportFrame
{
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsPageContentFrame
)
friend
nsPageContentFrame
*
NS_NewPageContentFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
friend
class
nsPageFrame
;
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aReflowOutput
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
ViewportFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eCanContainOverflowContainers
)
)
;
}
void
SetSharedPageData
(
nsSharedPageData
*
aPD
)
{
mPD
=
aPD
;
}
ComputeTransformFunction
GetTransformGetter
(
)
const
override
;
void
BuildDisplayList
(
nsDisplayListBuilder
*
const
nsDisplayListSet
&
)
override
;
void
AppendDirectlyOwnedAnonBoxes
(
nsTArray
<
OwnedAnonBox
>
&
aResult
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
protected
:
explicit
nsPageContentFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
ViewportFrame
(
aStyle
aPresContext
kClassID
)
{
}
nsSharedPageData
*
mPD
=
nullptr
;
nscoord
mRemainingOverflow
=
0
;
}
;
#
endif
