#
ifndef
nsBulletFrame_h___
#
define
nsBulletFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsFrame
.
h
"
#
include
"
imgIContainer
.
h
"
#
include
"
imgINotificationObserver
.
h
"
class
imgIContainer
;
class
imgRequestProxy
;
class
nsBulletFrame
;
class
BulletRenderer
;
class
nsBulletListener
final
:
public
imgINotificationObserver
{
public
:
nsBulletListener
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_IMGINOTIFICATIONOBSERVER
void
SetFrame
(
nsBulletFrame
*
frame
)
{
mFrame
=
frame
;
}
private
:
virtual
~
nsBulletListener
(
)
;
nsBulletFrame
*
mFrame
;
}
;
class
nsBulletFrame
final
:
public
nsFrame
{
typedef
mozilla
:
:
image
:
:
ImgDrawResult
ImgDrawResult
;
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsBulletFrame
)
#
ifdef
DEBUG
NS_DECL_QUERYFRAME
#
endif
explicit
nsBulletFrame
(
nsStyleContext
*
aContext
)
:
nsFrame
(
aContext
kClassID
)
mPadding
(
GetWritingMode
(
)
)
mIntrinsicSize
(
GetWritingMode
(
)
)
mOrdinal
(
0
)
mRequestRegistered
(
false
)
{
}
virtual
~
nsBulletFrame
(
)
;
NS_IMETHOD
Notify
(
imgIRequest
*
aRequest
int32_t
aType
const
nsIntRect
*
aData
)
;
virtual
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
override
;
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
virtual
void
DidSetStyleContext
(
nsStyleContext
*
aOldStyleContext
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
virtual
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aMetrics
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
virtual
nscoord
GetMinISize
(
gfxContext
*
aRenderingContext
)
override
;
virtual
nscoord
GetPrefISize
(
gfxContext
*
aRenderingContext
)
override
;
void
AddInlineMinISize
(
gfxContext
*
aRenderingContext
nsIFrame
:
:
InlineMinISizeData
*
aData
)
override
;
void
AddInlinePrefISize
(
gfxContext
*
aRenderingContext
nsIFrame
:
:
InlinePrefISizeData
*
aData
)
override
;
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
if
(
aFlags
&
eSupportsCSSTransforms
)
{
return
false
;
}
return
nsFrame
:
:
IsFrameOfType
(
aFlags
)
;
}
int32_t
SetListItemOrdinal
(
int32_t
aNextOrdinal
bool
*
aChanged
int32_t
aIncrement
)
;
void
GetListItemText
(
nsAString
&
aResult
)
;
void
GetSpokenText
(
nsAString
&
aText
)
;
Maybe
<
BulletRenderer
>
CreateBulletRenderer
(
gfxContext
&
aRenderingContext
nsPoint
aPt
)
;
ImgDrawResult
PaintBullet
(
gfxContext
&
aRenderingContext
nsPoint
aPt
const
nsRect
&
aDirtyRect
uint32_t
aFlags
bool
aDisableSubpixelAA
)
;
virtual
bool
IsEmpty
(
)
override
;
virtual
bool
IsSelfEmpty
(
)
override
;
virtual
nscoord
GetLogicalBaseline
(
mozilla
:
:
WritingMode
aWritingMode
)
const
override
;
float
GetFontSizeInflation
(
)
const
;
bool
HasFontSizeInflation
(
)
const
{
return
(
GetStateBits
(
)
&
BULLET_FRAME_HAS_FONT_INFLATION
)
!
=
0
;
}
void
SetFontSizeInflation
(
float
aInflation
)
;
int32_t
GetOrdinal
(
)
{
return
mOrdinal
;
}
already_AddRefed
<
imgIContainer
>
GetImage
(
)
const
;
protected
:
nsresult
OnSizeAvailable
(
imgIRequest
*
aRequest
imgIContainer
*
aImage
)
;
void
AppendSpacingToPadding
(
nsFontMetrics
*
aFontMetrics
mozilla
:
:
LogicalMargin
*
aPadding
)
;
void
GetDesiredSize
(
nsPresContext
*
aPresContext
gfxContext
*
aRenderingContext
ReflowOutput
&
aMetrics
float
aFontSizeInflation
mozilla
:
:
LogicalMargin
*
aPadding
)
;
void
GetLoadGroup
(
nsPresContext
*
aPresContext
nsILoadGroup
*
*
aLoadGroup
)
;
nsIDocument
*
GetOurCurrentDoc
(
)
const
;
mozilla
:
:
LogicalMargin
mPadding
;
RefPtr
<
imgRequestProxy
>
mImageRequest
;
RefPtr
<
nsBulletListener
>
mListener
;
mozilla
:
:
LogicalSize
mIntrinsicSize
;
int32_t
mOrdinal
;
private
:
void
RegisterImageRequest
(
bool
aKnownToBeAnimated
)
;
void
DeregisterAndCancelImageRequest
(
)
;
bool
mRequestRegistered
:
1
;
}
;
#
endif
