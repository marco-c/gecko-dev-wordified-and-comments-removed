#
ifndef
nsFrame_h___
#
define
nsFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
ReflowInput
.
h
"
#
include
"
nsHTMLParts
.
h
"
#
include
"
nsISelectionDisplay
.
h
"
namespace
mozilla
{
enum
class
TableSelectionMode
:
uint32_t
;
class
PresShell
;
}
#
define
NS_FRAME_TRACE_CALLS
0x1
#
define
NS_FRAME_TRACE_PUSH_PULL
0x2
#
define
NS_FRAME_TRACE_CHILD_REFLOW
0x4
#
define
NS_FRAME_TRACE_NEW_FRAMES
0x8
#
define
NS_FRAME_LOG_TEST
(
_lm
_bit
)
\
(
int
(
(
(
mozilla
:
:
LogModule
*
)
_lm
)
-
>
Level
(
)
)
&
(
_bit
)
)
#
ifdef
DEBUG
#
define
NS_FRAME_LOG
(
_bit
_args
)
\
PR_BEGIN_MACRO
\
if
(
NS_FRAME_LOG_TEST
(
nsFrame
:
:
sFrameLogModule
_bit
)
)
{
\
printf_stderr
_args
;
\
}
\
PR_END_MACRO
#
else
#
define
NS_FRAME_LOG
(
_bit
_args
)
#
endif
#
ifdef
DEBUG
#
define
NS_FRAME_TRACE_IN
(
_method
)
Trace
(
_method
true
)
#
define
NS_FRAME_TRACE_OUT
(
_method
)
Trace
(
_method
false
)
#
define
NS_FRAME_TRACE
(
_bit
_args
)
\
PR_BEGIN_MACRO
\
if
(
NS_FRAME_LOG_TEST
(
nsFrame
:
:
sFrameLogModule
_bit
)
)
{
\
TraceMsg
_args
;
\
}
\
PR_END_MACRO
#
define
NS_FRAME_TRACE_REFLOW_IN
(
_method
)
Trace
(
_method
true
)
#
define
NS_FRAME_TRACE_REFLOW_OUT
(
_method
_status
)
\
Trace
(
_method
false
_status
)
#
else
#
define
NS_FRAME_TRACE
(
_bits
_args
)
#
define
NS_FRAME_TRACE_IN
(
_method
)
#
define
NS_FRAME_TRACE_OUT
(
_method
)
#
define
NS_FRAME_TRACE_REFLOW_IN
(
_method
)
#
define
NS_FRAME_TRACE_REFLOW_OUT
(
_method
_status
)
#
endif
struct
nsBoxLayoutMetrics
;
struct
nsRect
;
class
nsFrame
:
public
nsIFrame
{
public
:
friend
nsIFrame
*
NS_NewEmptyFrame
(
mozilla
:
:
PresShell
*
aShell
ComputedStyle
*
aStyle
)
;
private
:
void
*
operator
new
(
size_t
sz
)
noexcept
(
true
)
;
protected
:
void
operator
delete
(
void
*
aPtr
size_t
sz
)
;
public
:
NS_DECL_QUERYFRAME
NS_DECL_QUERYFRAME_TARGET
(
nsFrame
)
nsQueryFrame
:
:
FrameIID
GetFrameId
(
)
const
override
MOZ_MUST_OVERRIDE
{
return
kFrameIID
;
}
void
*
operator
new
(
size_t
mozilla
:
:
PresShell
*
)
MOZ_MUST_OVERRIDE
;
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
override
;
void
DidReflow
(
nsPresContext
*
aPresContext
const
ReflowInput
*
aReflowInput
)
override
;
#
ifdef
DEBUG
void
Trace
(
const
char
*
aMethod
bool
aEnter
)
;
void
Trace
(
const
char
*
aMethod
bool
aEnter
const
nsReflowStatus
&
aStatus
)
;
void
TraceMsg
(
const
char
*
fmt
.
.
.
)
MOZ_FORMAT_PRINTF
(
2
3
)
;
static
void
VerifyDirtyBitSet
(
const
nsFrameList
&
aFrameList
)
;
static
void
*
DisplayReflowEnter
(
nsPresContext
*
aPresContext
nsIFrame
*
aFrame
const
ReflowInput
&
aReflowInput
)
;
static
void
*
DisplayLayoutEnter
(
nsIFrame
*
aFrame
)
;
static
void
*
DisplayIntrinsicISizeEnter
(
nsIFrame
*
aFrame
const
char
*
aType
)
;
static
void
*
DisplayIntrinsicSizeEnter
(
nsIFrame
*
aFrame
const
char
*
aType
)
;
static
void
DisplayReflowExit
(
nsPresContext
*
aPresContext
nsIFrame
*
aFrame
ReflowOutput
&
aMetrics
const
nsReflowStatus
&
aStatus
void
*
aFrameTreeNode
)
;
static
void
DisplayLayoutExit
(
nsIFrame
*
aFrame
void
*
aFrameTreeNode
)
;
static
void
DisplayIntrinsicISizeExit
(
nsIFrame
*
aFrame
const
char
*
aType
nscoord
aResult
void
*
aFrameTreeNode
)
;
static
void
DisplayIntrinsicSizeExit
(
nsIFrame
*
aFrame
const
char
*
aType
nsSize
aResult
void
*
aFrameTreeNode
)
;
static
void
DisplayReflowStartup
(
)
;
static
void
DisplayReflowShutdown
(
)
;
#
endif
bool
DisplayBackgroundUnconditional
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
bool
aForceBackground
)
;
void
DisplayBorderBackgroundOutline
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
bool
aForceBackground
=
false
)
;
void
DisplayOutlineUnconditional
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
;
void
DisplayOutline
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
;
void
DisplayInsetBoxShadowUnconditional
(
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
)
;
void
DisplayInsetBoxShadow
(
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
)
;
void
DisplayOutsetBoxShadowUnconditional
(
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
)
;
void
DisplayOutsetBoxShadow
(
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
)
;
protected
:
nsFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
ClassID
aID
)
;
explicit
nsFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsFrame
(
aStyle
aPresContext
ClassID
:
:
nsFrame_id
)
{
}
virtual
~
nsFrame
(
)
;
private
:
bool
HasCSSAnimations
(
)
;
bool
HasCSSTransitions
(
)
;
}
;
#
endif
