#
ifndef
nsFrame_h___
#
define
nsFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
ReflowInput
.
h
"
#
include
"
nsHTMLParts
.
h
"
#
include
"
nsISelectionDisplay
.
h
"
namespace
mozilla
{
enum
class
TableSelectionMode
:
uint32_t
;
class
PresShell
;
}
struct
nsBoxLayoutMetrics
;
struct
nsRect
;
class
nsFrame
:
public
nsIFrame
{
public
:
friend
nsIFrame
*
NS_NewEmptyFrame
(
mozilla
:
:
PresShell
*
aShell
ComputedStyle
*
aStyle
)
;
private
:
void
*
operator
new
(
size_t
sz
)
noexcept
(
true
)
;
protected
:
void
operator
delete
(
void
*
aPtr
size_t
sz
)
;
public
:
NS_DECL_QUERYFRAME
NS_DECL_QUERYFRAME_TARGET
(
nsFrame
)
nsQueryFrame
:
:
FrameIID
GetFrameId
(
)
const
override
MOZ_MUST_OVERRIDE
{
return
kFrameIID
;
}
void
*
operator
new
(
size_t
mozilla
:
:
PresShell
*
)
MOZ_MUST_OVERRIDE
;
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
override
;
void
DidReflow
(
nsPresContext
*
aPresContext
const
ReflowInput
*
aReflowInput
)
override
;
bool
DisplayBackgroundUnconditional
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
bool
aForceBackground
)
;
void
DisplayBorderBackgroundOutline
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
bool
aForceBackground
=
false
)
;
void
DisplayOutlineUnconditional
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
;
void
DisplayOutline
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
;
void
DisplayInsetBoxShadowUnconditional
(
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
)
;
void
DisplayInsetBoxShadow
(
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
)
;
void
DisplayOutsetBoxShadowUnconditional
(
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
)
;
void
DisplayOutsetBoxShadow
(
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
)
;
protected
:
nsFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
ClassID
aID
)
;
explicit
nsFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsFrame
(
aStyle
aPresContext
ClassID
:
:
nsFrame_id
)
{
}
virtual
~
nsFrame
(
)
;
private
:
bool
HasCSSAnimations
(
)
;
bool
HasCSSTransitions
(
)
;
}
;
#
endif
