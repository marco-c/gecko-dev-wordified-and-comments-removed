#
ifndef
mozilla_layout_ScrollSnapInfo_h_
#
define
mozilla_layout_ScrollSnapInfo_h_
#
include
<
memory
>
#
include
"
mozilla
/
ScrollTypes
.
h
"
#
include
"
mozilla
/
ScrollSnapTargetId
.
h
"
#
include
"
mozilla
/
ServoStyleConsts
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
class
nsIContent
;
class
nsIFrame
;
struct
nsPoint
;
struct
nsRect
;
struct
nsSize
;
struct
nsStyleDisplay
;
namespace
mozilla
{
enum
class
StyleScrollSnapStrictness
:
uint8_t
;
class
WritingMode
;
struct
ScrollSnapInfo
{
ScrollSnapInfo
(
)
;
bool
operator
=
=
(
const
ScrollSnapInfo
&
aOther
)
const
{
return
mScrollSnapStrictnessX
=
=
aOther
.
mScrollSnapStrictnessX
&
&
mScrollSnapStrictnessY
=
=
aOther
.
mScrollSnapStrictnessY
&
&
mSnapTargets
=
=
aOther
.
mSnapTargets
&
&
mXRangeWiderThanSnapport
=
=
aOther
.
mXRangeWiderThanSnapport
&
&
mYRangeWiderThanSnapport
=
=
aOther
.
mYRangeWiderThanSnapport
&
&
mSnapportSize
=
=
aOther
.
mSnapportSize
;
}
bool
HasScrollSnapping
(
)
const
;
bool
HasSnapPositions
(
)
const
;
void
InitializeScrollSnapStrictness
(
WritingMode
aWritingMode
const
nsStyleDisplay
*
aDisplay
)
;
StyleScrollSnapStrictness
mScrollSnapStrictnessX
;
StyleScrollSnapStrictness
mScrollSnapStrictnessY
;
struct
SnapTarget
{
Maybe
<
nscoord
>
mSnapPositionX
;
Maybe
<
nscoord
>
mSnapPositionY
;
nsRect
mSnapArea
;
StyleScrollSnapStop
mScrollSnapStop
=
StyleScrollSnapStop
:
:
Normal
;
ScrollSnapTargetId
mTargetId
=
ScrollSnapTargetId
:
:
None
;
SnapTarget
(
)
=
default
;
SnapTarget
(
Maybe
<
nscoord
>
&
&
aSnapPositionX
Maybe
<
nscoord
>
&
&
aSnapPositionY
nsRect
&
&
aSnapArea
StyleScrollSnapStop
aScrollSnapStop
ScrollSnapTargetId
aTargetId
)
:
mSnapPositionX
(
std
:
:
move
(
aSnapPositionX
)
)
mSnapPositionY
(
std
:
:
move
(
aSnapPositionY
)
)
mSnapArea
(
aSnapArea
)
mScrollSnapStop
(
aScrollSnapStop
)
mTargetId
(
aTargetId
)
{
}
bool
operator
=
=
(
const
SnapTarget
&
aOther
)
const
{
return
mSnapPositionX
=
=
aOther
.
mSnapPositionX
&
&
mSnapPositionY
=
=
aOther
.
mSnapPositionY
&
&
mSnapArea
=
=
aOther
.
mSnapArea
&
&
mScrollSnapStop
=
=
aOther
.
mScrollSnapStop
&
&
mTargetId
=
=
aOther
.
mTargetId
;
}
}
;
CopyableTArray
<
SnapTarget
>
mSnapTargets
;
void
ForEachValidTargetFor
(
const
nsPoint
&
aDestination
const
std
:
:
function
<
bool
(
const
SnapTarget
&
)
>
&
aFunc
)
const
;
struct
ScrollSnapRange
{
ScrollSnapRange
(
)
=
default
;
ScrollSnapRange
(
nscoord
aStart
nscoord
aEnd
ScrollSnapTargetId
aTargetId
)
:
mStart
(
aStart
)
mEnd
(
aEnd
)
mTargetId
(
aTargetId
)
{
}
nscoord
mStart
;
nscoord
mEnd
;
ScrollSnapTargetId
mTargetId
;
bool
operator
=
=
(
const
ScrollSnapRange
&
aOther
)
const
{
return
mStart
=
=
aOther
.
mStart
&
&
mEnd
=
=
aOther
.
mEnd
&
&
mTargetId
=
=
aOther
.
mTargetId
;
}
bool
IsValid
(
nscoord
aPoint
nscoord
aSnapportSize
)
const
{
MOZ_ASSERT
(
mEnd
-
mStart
>
aSnapportSize
)
;
return
mStart
<
=
aPoint
&
&
aPoint
<
=
mEnd
-
aSnapportSize
;
}
}
;
CopyableTArray
<
ScrollSnapRange
>
mXRangeWiderThanSnapport
;
CopyableTArray
<
ScrollSnapRange
>
mYRangeWiderThanSnapport
;
nsSize
mSnapportSize
;
}
;
}
#
endif
