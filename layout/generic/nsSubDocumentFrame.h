#
ifndef
NSSUBDOCUMENTFRAME_H_
#
define
NSSUBDOCUMENTFRAME_H_
#
include
"
LayerState
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsAtomicContainerFrame
.
h
"
#
include
"
nsIReflowCallback
.
h
"
#
include
"
nsFrameLoader
.
h
"
#
include
"
Units
.
h
"
namespace
mozilla
{
class
PresShell
;
}
namespace
mozilla
:
:
layers
{
class
Layer
;
class
RenderRootStateManager
;
class
WebRenderLayerScrollData
;
class
WebRenderScrollData
;
}
class
nsSubDocumentFrame
final
:
public
nsAtomicContainerFrame
public
nsIReflowCallback
{
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsSubDocumentFrame
)
explicit
nsSubDocumentFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
#
ifdef
DEBUG_FRAME_DUMP
void
List
(
FILE
*
out
=
stderr
const
char
*
aPrefix
=
"
"
ListFlags
aFlags
=
ListFlags
(
)
)
const
override
;
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
NS_DECL_QUERYFRAME
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsAtomicContainerFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eReplaced
|
nsIFrame
:
:
eReplacedSizing
|
nsIFrame
:
:
eReplacedContainsBlock
)
)
;
}
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
override
;
nscoord
GetMinISize
(
gfxContext
*
aRenderingContext
)
override
;
nscoord
GetPrefISize
(
gfxContext
*
aRenderingContext
)
override
;
mozilla
:
:
IntrinsicSize
GetIntrinsicSize
(
)
override
;
mozilla
:
:
AspectRatio
GetIntrinsicRatio
(
)
const
override
;
mozilla
:
:
LogicalSize
ComputeAutoSize
(
gfxContext
*
aRenderingContext
mozilla
:
:
WritingMode
aWritingMode
const
mozilla
:
:
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
mozilla
:
:
LogicalSize
&
aMargin
const
mozilla
:
:
LogicalSize
&
aBorderPadding
const
mozilla
:
:
StyleSizeOverrides
&
aSizeOverrides
mozilla
:
:
ComputeSizeFlags
aFlags
)
override
;
SizeComputationResult
ComputeSize
(
gfxContext
*
aRenderingContext
mozilla
:
:
WritingMode
aWM
const
mozilla
:
:
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
mozilla
:
:
LogicalSize
&
aMargin
const
mozilla
:
:
LogicalSize
&
aBorderPadding
const
mozilla
:
:
StyleSizeOverrides
&
aSizeOverrides
mozilla
:
:
ComputeSizeFlags
aFlags
)
override
;
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
void
DidSetComputedStyle
(
ComputedStyle
*
aOldComputedStyle
)
override
;
bool
SupportsVisibilityHidden
(
)
override
{
return
false
;
}
#
ifdef
ACCESSIBILITY
mozilla
:
:
a11y
:
:
AccType
AccessibleType
(
)
override
;
#
endif
nsIDocShell
*
GetDocShell
(
)
const
;
nsresult
BeginSwapDocShells
(
nsIFrame
*
aOther
)
;
void
EndSwapDocShells
(
nsIFrame
*
aOther
)
;
nsView
*
EnsureInnerView
(
)
;
nsPoint
GetExtraOffset
(
)
const
;
nsIFrame
*
GetSubdocumentRootFrame
(
)
;
enum
{
IGNORE_PAINT_SUPPRESSION
=
0x1
}
;
mozilla
:
:
PresShell
*
GetSubdocumentPresShellForPainting
(
uint32_t
aFlags
)
;
mozilla
:
:
ScreenIntSize
GetSubdocumentSize
(
)
;
bool
ReflowFinished
(
)
override
;
void
ReflowCallbackCanceled
(
)
override
;
bool
PassPointerEventsToChildren
(
)
;
void
MaybeShowViewer
(
)
{
if
(
!
mDidCreateDoc
&
&
!
mCallingShow
)
{
ShowViewer
(
)
;
}
}
nsFrameLoader
*
FrameLoader
(
)
const
;
enum
class
RetainPaintData
:
bool
{
No
Yes
}
;
void
ResetFrameLoader
(
RetainPaintData
)
;
void
ClearRetainedPaintData
(
)
;
void
PropagateIsUnderHiddenEmbedderElementToSubView
(
bool
aIsUnderHiddenEmbedderElement
)
;
void
ClearDisplayItems
(
)
;
void
SubdocumentIntrinsicSizeOrRatioChanged
(
)
;
struct
RemoteFramePaintData
{
mozilla
:
:
layers
:
:
LayersId
mLayersId
;
mozilla
:
:
dom
:
:
TabId
mTabId
{
0
}
;
}
;
RemoteFramePaintData
GetRemotePaintData
(
)
const
;
bool
HasRetainedPaintData
(
)
const
{
return
mRetainedRemoteFrame
.
isSome
(
)
;
}
protected
:
friend
class
AsyncFrameInit
;
bool
IsInline
(
)
{
return
mIsInline
;
}
nscoord
GetIntrinsicBSize
(
)
{
auto
size
=
GetIntrinsicSize
(
)
;
Maybe
<
nscoord
>
bSize
=
GetWritingMode
(
)
.
IsVertical
(
)
?
size
.
width
:
size
.
height
;
return
bSize
.
valueOr
(
0
)
;
}
nscoord
GetIntrinsicISize
(
)
{
auto
size
=
GetIntrinsicSize
(
)
;
Maybe
<
nscoord
>
iSize
=
GetWritingMode
(
)
.
IsVertical
(
)
?
size
.
height
:
size
.
width
;
return
iSize
.
valueOr
(
0
)
;
}
void
ShowViewer
(
)
;
nsView
*
GetViewInternal
(
)
const
override
{
return
mOuterView
;
}
void
SetViewInternal
(
nsView
*
aView
)
override
{
mOuterView
=
aView
;
}
mutable
RefPtr
<
nsFrameLoader
>
mFrameLoader
;
nsView
*
mOuterView
;
nsView
*
mInnerView
;
Maybe
<
RemoteFramePaintData
>
mRetainedRemoteFrame
;
bool
mIsInline
:
1
;
bool
mPostedReflowCallback
:
1
;
bool
mDidCreateDoc
:
1
;
bool
mCallingShow
:
1
;
}
;
namespace
mozilla
{
class
nsDisplayRemote
final
:
public
nsPaintedDisplayItem
{
typedef
mozilla
:
:
dom
:
:
TabId
TabId
;
typedef
mozilla
:
:
gfx
:
:
Matrix4x4
Matrix4x4
;
typedef
mozilla
:
:
layers
:
:
EventRegionsOverride
EventRegionsOverride
;
typedef
mozilla
:
:
layers
:
:
Layer
Layer
;
typedef
mozilla
:
:
layers
:
:
LayersId
LayersId
;
typedef
mozilla
:
:
layers
:
:
StackingContextHelper
StackingContextHelper
;
typedef
mozilla
:
:
LayerState
LayerState
;
typedef
mozilla
:
:
LayoutDeviceRect
LayoutDeviceRect
;
typedef
mozilla
:
:
LayoutDevicePoint
LayoutDevicePoint
;
public
:
nsDisplayRemote
(
nsDisplayListBuilder
*
aBuilder
nsSubDocumentFrame
*
aFrame
)
;
void
Paint
(
nsDisplayListBuilder
*
aBuilder
gfxContext
*
aCtx
)
override
;
bool
CreateWebRenderCommands
(
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
mozilla
:
:
layers
:
:
RenderRootStateManager
*
aManager
nsDisplayListBuilder
*
aDisplayListBuilder
)
override
;
bool
UpdateScrollData
(
mozilla
:
:
layers
:
:
WebRenderScrollData
*
aData
mozilla
:
:
layers
:
:
WebRenderLayerScrollData
*
aLayerData
)
override
;
NS_DISPLAY_DECL_NAME
(
"
Remote
"
TYPE_REMOTE
)
private
:
friend
class
nsDisplayItem
;
using
RemoteFramePaintData
=
nsSubDocumentFrame
:
:
RemoteFramePaintData
;
nsFrameLoader
*
GetFrameLoader
(
)
const
;
RemoteFramePaintData
mPaintData
;
LayoutDevicePoint
mOffset
;
EventRegionsOverride
mEventRegionsOverride
;
}
;
}
#
endif
