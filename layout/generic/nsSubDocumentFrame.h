#
ifndef
NSSUBDOCUMENTFRAME_H_
#
define
NSSUBDOCUMENTFRAME_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsAtomicContainerFrame
.
h
"
#
include
"
nsIReflowCallback
.
h
"
#
include
"
nsFrameLoader
.
h
"
#
include
"
Units
.
h
"
class
nsSubDocumentFrame
:
public
nsAtomicContainerFrame
public
nsIReflowCallback
{
public
:
NS_DECL_QUERYFRAME_TARGET
(
nsSubDocumentFrame
)
NS_DECL_FRAMEARENA_HELPERS
explicit
nsSubDocumentFrame
(
nsStyleContext
*
aContext
)
;
#
ifdef
DEBUG_FRAME_DUMP
void
List
(
FILE
*
out
=
stderr
const
char
*
aPrefix
=
"
"
uint32_t
aFlags
=
0
)
const
override
;
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
NS_DECL_QUERYFRAME
nsIAtom
*
GetType
(
)
const
override
;
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsAtomicContainerFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eReplaced
|
nsIFrame
:
:
eReplacedSizing
|
nsIFrame
:
:
eReplacedContainsBlock
)
)
;
}
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
)
override
;
nscoord
GetMinISize
(
nsRenderingContext
*
aRenderingContext
)
override
;
nscoord
GetPrefISize
(
nsRenderingContext
*
aRenderingContext
)
override
;
mozilla
:
:
IntrinsicSize
GetIntrinsicSize
(
)
override
;
nsSize
GetIntrinsicRatio
(
)
override
;
mozilla
:
:
LogicalSize
ComputeAutoSize
(
nsRenderingContext
*
aRenderingContext
mozilla
:
:
WritingMode
aWritingMode
const
mozilla
:
:
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
mozilla
:
:
LogicalSize
&
aMargin
const
mozilla
:
:
LogicalSize
&
aBorder
const
mozilla
:
:
LogicalSize
&
aPadding
ComputeSizeFlags
aFlags
)
override
;
mozilla
:
:
LogicalSize
ComputeSize
(
nsRenderingContext
*
aRenderingContext
mozilla
:
:
WritingMode
aWritingMode
const
mozilla
:
:
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
mozilla
:
:
LogicalSize
&
aMargin
const
mozilla
:
:
LogicalSize
&
aBorder
const
mozilla
:
:
LogicalSize
&
aPadding
ComputeSizeFlags
aFlags
)
override
;
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsRect
&
aDirtyRect
const
nsDisplayListSet
&
aLists
)
override
;
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
)
override
;
bool
SupportsVisibilityHidden
(
)
override
{
return
false
;
}
#
ifdef
ACCESSIBILITY
mozilla
:
:
a11y
:
:
AccType
AccessibleType
(
)
override
;
#
endif
nsresult
GetDocShell
(
nsIDocShell
*
*
aDocShell
)
;
nsresult
BeginSwapDocShells
(
nsIFrame
*
aOther
)
;
void
EndSwapDocShells
(
nsIFrame
*
aOther
)
;
nsView
*
EnsureInnerView
(
)
;
nsIFrame
*
GetSubdocumentRootFrame
(
)
;
enum
{
IGNORE_PAINT_SUPPRESSION
=
0x1
}
;
nsIPresShell
*
GetSubdocumentPresShellForPainting
(
uint32_t
aFlags
)
;
mozilla
:
:
ScreenIntSize
GetSubdocumentSize
(
)
;
bool
ReflowFinished
(
)
override
;
void
ReflowCallbackCanceled
(
)
override
;
bool
ShouldClipSubdocument
(
)
{
nsFrameLoader
*
frameLoader
=
FrameLoader
(
)
;
return
!
frameLoader
|
|
frameLoader
-
>
ShouldClipSubdocument
(
)
;
}
bool
ShouldClampScrollPosition
(
)
{
nsFrameLoader
*
frameLoader
=
FrameLoader
(
)
;
return
!
frameLoader
|
|
frameLoader
-
>
ShouldClampScrollPosition
(
)
;
}
bool
PassPointerEventsToChildren
(
)
;
protected
:
friend
class
AsyncFrameInit
;
mozilla
:
:
CSSIntSize
GetMarginAttributes
(
)
;
nsFrameLoader
*
FrameLoader
(
)
;
bool
IsInline
(
)
{
return
mIsInline
;
}
nscoord
GetIntrinsicISize
(
)
;
nscoord
GetIntrinsicBSize
(
)
;
void
ShowViewer
(
)
;
nsIFrame
*
ObtainIntrinsicSizeFrame
(
)
;
nsView
*
GetViewInternal
(
)
const
override
{
return
mOuterView
;
}
void
SetViewInternal
(
nsView
*
aView
)
override
{
mOuterView
=
aView
;
}
RefPtr
<
nsFrameLoader
>
mFrameLoader
;
nsView
*
mOuterView
;
nsView
*
mInnerView
;
bool
mIsInline
;
bool
mPostedReflowCallback
;
bool
mDidCreateDoc
;
bool
mCallingShow
;
}
;
#
endif
