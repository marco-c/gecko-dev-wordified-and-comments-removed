#
include
"
mozilla
/
ViewportFrame
.
h
"
#
include
"
mozilla
/
ComputedStyleInlines
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
RestyleManager
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
nsSubDocumentFrame
.
h
"
#
include
"
nsCanvasFrame
.
h
"
#
include
"
nsAbsoluteContainingBlock
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
nsIMozBrowserFrame
.
h
"
#
include
"
nsPlaceholderFrame
.
h
"
#
include
"
MobileViewportManager
.
h
"
using
namespace
mozilla
;
typedef
nsAbsoluteContainingBlock
:
:
AbsPosReflowFlags
AbsPosReflowFlags
;
ViewportFrame
*
NS_NewViewportFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
ViewportFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
ViewportFrame
)
NS_QUERYFRAME_HEAD
(
ViewportFrame
)
NS_QUERYFRAME_ENTRY
(
ViewportFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsContainerFrame
)
void
ViewportFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
nsContainerFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
nsIFrame
*
parent
=
nsLayoutUtils
:
:
GetCrossDocParentFrame
(
this
)
;
if
(
parent
)
{
nsFrameState
state
=
parent
-
>
GetStateBits
(
)
;
AddStateBits
(
state
&
(
NS_FRAME_IN_POPUP
)
)
;
}
}
void
ViewportFrame
:
:
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
AUTO_PROFILER_LABEL
(
"
ViewportFrame
:
:
BuildDisplayList
"
GRAPHICS_DisplayListBuilding
)
;
if
(
nsIFrame
*
kid
=
mFrames
.
FirstChild
(
)
)
{
BuildDisplayListForChild
(
aBuilder
kid
aLists
)
;
}
}
#
ifdef
DEBUG
static
bool
ShouldInTopLayerForFullscreen
(
dom
:
:
Element
*
aElement
)
{
if
(
!
aElement
-
>
GetParent
(
)
)
{
return
false
;
}
nsCOMPtr
<
nsIMozBrowserFrame
>
browserFrame
=
do_QueryInterface
(
aElement
)
;
if
(
browserFrame
&
&
browserFrame
-
>
GetReallyIsBrowser
(
)
)
{
return
false
;
}
return
true
;
}
#
endif
static
void
BuildDisplayListForTopLayerFrame
(
nsDisplayListBuilder
*
aBuilder
nsIFrame
*
aFrame
nsDisplayList
*
aList
)
{
nsRect
visible
;
nsRect
dirty
;
DisplayListClipState
:
:
AutoSaveRestore
clipState
(
aBuilder
)
;
nsDisplayListBuilder
:
:
AutoCurrentActiveScrolledRootSetter
asrSetter
(
aBuilder
)
;
nsDisplayListBuilder
:
:
OutOfFlowDisplayData
*
savedOutOfFlowData
=
nsDisplayListBuilder
:
:
GetOutOfFlowData
(
aFrame
)
;
if
(
savedOutOfFlowData
)
{
visible
=
savedOutOfFlowData
-
>
GetVisibleRectForFrame
(
aBuilder
aFrame
&
dirty
)
;
clipState
.
SetClipChainForContainingBlockDescendants
(
savedOutOfFlowData
-
>
mCombinedClipChain
)
;
asrSetter
.
SetCurrentActiveScrolledRoot
(
savedOutOfFlowData
-
>
mContainingBlockActiveScrolledRoot
)
;
}
nsDisplayListBuilder
:
:
AutoBuildingDisplayList
buildingForChild
(
aBuilder
aFrame
visible
dirty
)
;
nsDisplayList
list
;
aFrame
-
>
BuildDisplayListForStackingContext
(
aBuilder
&
list
)
;
aList
-
>
AppendToTop
(
&
list
)
;
}
static
bool
BackdropListIsOpaque
(
ViewportFrame
*
aFrame
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
)
{
if
(
aList
-
>
Count
(
)
!
=
1
|
|
aList
-
>
GetTop
(
)
-
>
GetType
(
)
!
=
DisplayItemType
:
:
TYPE_FIXED_POSITION
)
{
return
false
;
}
nsDisplayFixedPosition
*
fixed
=
static_cast
<
nsDisplayFixedPosition
*
>
(
aList
-
>
GetTop
(
)
)
;
if
(
fixed
-
>
GetActiveScrolledRoot
(
)
|
|
fixed
-
>
GetClipChain
(
)
)
{
return
false
;
}
nsDisplayList
*
children
=
fixed
-
>
GetChildren
(
)
;
if
(
!
children
-
>
GetTop
(
)
|
|
children
-
>
GetTop
(
)
-
>
GetType
(
)
!
=
DisplayItemType
:
:
TYPE_BACKGROUND_COLOR
)
{
return
false
;
}
nsDisplayBackgroundColor
*
child
=
static_cast
<
nsDisplayBackgroundColor
*
>
(
children
-
>
GetTop
(
)
)
;
if
(
child
-
>
GetActiveScrolledRoot
(
)
|
|
child
-
>
GetClipChain
(
)
)
{
return
false
;
}
bool
dummy
;
nsRegion
opaque
=
child
-
>
GetOpaqueRegion
(
aBuilder
&
dummy
)
;
return
opaque
.
Contains
(
aFrame
-
>
GetRect
(
)
)
;
}
void
ViewportFrame
:
:
BuildDisplayListForTopLayer
(
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
bool
*
aIsOpaque
)
{
nsTArray
<
dom
:
:
Element
*
>
topLayer
=
PresContext
(
)
-
>
Document
(
)
-
>
GetTopLayer
(
)
;
for
(
dom
:
:
Element
*
elem
:
topLayer
)
{
if
(
nsIFrame
*
frame
=
elem
-
>
GetPrimaryFrame
(
)
)
{
if
(
frame
-
>
StyleDisplay
(
)
-
>
mTopLayer
=
=
StyleTopLayer
:
:
None
)
{
MOZ_ASSERT
(
!
aBuilder
-
>
IsForPainting
(
)
|
|
!
ShouldInTopLayerForFullscreen
(
elem
)
)
;
continue
;
}
MOZ_ASSERT
(
ShouldInTopLayerForFullscreen
(
elem
)
)
;
if
(
!
frame
-
>
HasAnyStateBits
(
NS_FRAME_OUT_OF_FLOW
)
)
{
MOZ_ASSERT
(
!
elem
-
>
GetParent
(
)
-
>
IsHTMLElement
(
)
"
HTML
element
should
always
be
out
-
of
-
flow
if
in
the
top
"
"
layer
"
)
;
continue
;
}
if
(
nsIFrame
*
backdropPh
=
frame
-
>
GetChildList
(
kBackdropList
)
.
FirstChild
(
)
)
{
MOZ_ASSERT
(
!
backdropPh
-
>
GetNextSibling
(
)
"
more
than
one
:
:
backdrop
?
"
)
;
MOZ_ASSERT
(
backdropPh
-
>
HasAnyStateBits
(
NS_FRAME_FIRST_REFLOW
)
"
did
you
intend
to
reflow
:
:
backdrop
placeholders
?
"
)
;
nsIFrame
*
backdropFrame
=
nsPlaceholderFrame
:
:
GetRealFrameForPlaceholder
(
backdropPh
)
;
BuildDisplayListForTopLayerFrame
(
aBuilder
backdropFrame
aList
)
;
if
(
aIsOpaque
)
{
*
aIsOpaque
=
BackdropListIsOpaque
(
this
aBuilder
aList
)
;
}
}
BuildDisplayListForTopLayerFrame
(
aBuilder
frame
aList
)
;
}
}
if
(
nsCanvasFrame
*
canvasFrame
=
PresShell
(
)
-
>
GetCanvasFrame
(
)
)
{
if
(
dom
:
:
Element
*
container
=
canvasFrame
-
>
GetCustomContentContainer
(
)
)
{
if
(
nsIFrame
*
frame
=
container
-
>
GetPrimaryFrame
(
)
)
{
MOZ_ASSERT
(
frame
-
>
StyleDisplay
(
)
-
>
mTopLayer
!
=
StyleTopLayer
:
:
None
"
ua
.
css
should
ensure
this
"
)
;
MOZ_ASSERT
(
frame
-
>
HasAnyStateBits
(
NS_FRAME_OUT_OF_FLOW
)
)
;
BuildDisplayListForTopLayerFrame
(
aBuilder
frame
aList
)
;
}
}
}
}
#
ifdef
DEBUG
void
ViewportFrame
:
:
AppendFrames
(
ChildListID
aListID
nsFrameList
&
aFrameList
)
{
NS_ASSERTION
(
aListID
=
=
kPrincipalList
"
unexpected
child
list
"
)
;
NS_ASSERTION
(
GetChildList
(
aListID
)
.
IsEmpty
(
)
"
Shouldn
'
t
have
any
kids
!
"
)
;
nsContainerFrame
:
:
AppendFrames
(
aListID
aFrameList
)
;
}
void
ViewportFrame
:
:
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
const
nsLineList
:
:
iterator
*
aPrevFrameLine
nsFrameList
&
aFrameList
)
{
NS_ASSERTION
(
aListID
=
=
kPrincipalList
"
unexpected
child
list
"
)
;
NS_ASSERTION
(
GetChildList
(
aListID
)
.
IsEmpty
(
)
"
Shouldn
'
t
have
any
kids
!
"
)
;
nsContainerFrame
:
:
InsertFrames
(
aListID
aPrevFrame
aPrevFrameLine
aFrameList
)
;
}
void
ViewportFrame
:
:
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
{
NS_ASSERTION
(
aListID
=
=
kPrincipalList
"
unexpected
child
list
"
)
;
nsContainerFrame
:
:
RemoveFrame
(
aListID
aOldFrame
)
;
}
#
endif
nscoord
ViewportFrame
:
:
GetMinISize
(
gfxContext
*
aRenderingContext
)
{
nscoord
result
;
DISPLAY_MIN_INLINE_SIZE
(
this
result
)
;
if
(
mFrames
.
IsEmpty
(
)
)
result
=
0
;
else
result
=
mFrames
.
FirstChild
(
)
-
>
GetMinISize
(
aRenderingContext
)
;
return
result
;
}
nscoord
ViewportFrame
:
:
GetPrefISize
(
gfxContext
*
aRenderingContext
)
{
nscoord
result
;
DISPLAY_PREF_INLINE_SIZE
(
this
result
)
;
if
(
mFrames
.
IsEmpty
(
)
)
result
=
0
;
else
result
=
mFrames
.
FirstChild
(
)
-
>
GetPrefISize
(
aRenderingContext
)
;
return
result
;
}
nsPoint
ViewportFrame
:
:
AdjustReflowInputForScrollbars
(
ReflowInput
*
aReflowInput
)
const
{
nsIFrame
*
kidFrame
=
mFrames
.
FirstChild
(
)
;
nsIScrollableFrame
*
scrollingFrame
=
do_QueryFrame
(
kidFrame
)
;
if
(
scrollingFrame
)
{
WritingMode
wm
=
aReflowInput
-
>
GetWritingMode
(
)
;
LogicalMargin
scrollbars
(
wm
scrollingFrame
-
>
GetActualScrollbarSizes
(
)
)
;
aReflowInput
-
>
SetComputedISize
(
aReflowInput
-
>
ComputedISize
(
)
-
scrollbars
.
IStartEnd
(
wm
)
)
;
aReflowInput
-
>
AvailableISize
(
)
-
=
scrollbars
.
IStartEnd
(
wm
)
;
aReflowInput
-
>
SetComputedBSizeWithoutResettingResizeFlags
(
aReflowInput
-
>
ComputedBSize
(
)
-
scrollbars
.
BStartEnd
(
wm
)
)
;
return
nsPoint
(
scrollbars
.
Left
(
wm
)
scrollbars
.
Top
(
wm
)
)
;
}
return
nsPoint
(
0
0
)
;
}
nsRect
ViewportFrame
:
:
AdjustReflowInputAsContainingBlock
(
ReflowInput
*
aReflowInput
)
const
{
#
ifdef
DEBUG
nsPoint
offset
=
#
endif
AdjustReflowInputForScrollbars
(
aReflowInput
)
;
NS_ASSERTION
(
GetAbsoluteContainingBlock
(
)
-
>
GetChildList
(
)
.
IsEmpty
(
)
|
|
(
offset
.
x
=
=
0
&
&
offset
.
y
=
=
0
)
"
We
don
'
t
handle
correct
positioning
of
fixed
frames
with
"
"
scrollbars
in
odd
positions
"
)
;
nsRect
rect
(
0
0
aReflowInput
-
>
ComputedWidth
(
)
aReflowInput
-
>
ComputedHeight
(
)
)
;
rect
.
SizeTo
(
AdjustViewportSizeForFixedPosition
(
rect
)
)
;
return
rect
;
}
void
ViewportFrame
:
:
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
{
MarkInReflow
(
)
;
DO_GLOBAL_REFLOW_COUNT
(
"
ViewportFrame
"
)
;
DISPLAY_REFLOW
(
aPresContext
this
aReflowInput
aDesiredSize
aStatus
)
;
MOZ_ASSERT
(
aStatus
.
IsEmpty
(
)
"
Caller
should
pass
a
fresh
reflow
status
!
"
)
;
NS_FRAME_TRACE_REFLOW_IN
(
"
ViewportFrame
:
:
Reflow
"
)
;
AddStateBits
(
NS_FRAME_CONTAINS_RELATIVE_BSIZE
)
;
SetSize
(
nsSize
(
aReflowInput
.
ComputedWidth
(
)
aReflowInput
.
ComputedHeight
(
)
)
)
;
nscoord
kidBSize
=
0
;
WritingMode
wm
=
aReflowInput
.
GetWritingMode
(
)
;
if
(
mFrames
.
NotEmpty
(
)
)
{
if
(
aReflowInput
.
ShouldReflowAllKids
(
)
|
|
mFrames
.
FirstChild
(
)
-
>
IsSubtreeDirty
(
)
)
{
nsIFrame
*
kidFrame
=
mFrames
.
FirstChild
(
)
;
ReflowOutput
kidDesiredSize
(
aReflowInput
)
;
const
WritingMode
kidWM
=
kidFrame
-
>
GetWritingMode
(
)
;
LogicalSize
availableSpace
=
aReflowInput
.
AvailableSize
(
kidWM
)
;
ReflowInput
kidReflowInput
(
aPresContext
aReflowInput
kidFrame
availableSpace
)
;
kidReflowInput
.
SetComputedBSize
(
aReflowInput
.
ComputedBSize
(
)
)
;
ReflowChild
(
kidFrame
aPresContext
kidDesiredSize
kidReflowInput
0
0
ReflowChildFlags
:
:
Default
aStatus
)
;
kidBSize
=
kidDesiredSize
.
BSize
(
wm
)
;
FinishReflowChild
(
kidFrame
aPresContext
kidDesiredSize
&
kidReflowInput
0
0
ReflowChildFlags
:
:
Default
)
;
}
else
{
kidBSize
=
LogicalSize
(
wm
mFrames
.
FirstChild
(
)
-
>
GetSize
(
)
)
.
BSize
(
wm
)
;
}
}
NS_ASSERTION
(
aReflowInput
.
AvailableISize
(
)
!
=
NS_UNCONSTRAINEDSIZE
"
shouldn
'
t
happen
anymore
"
)
;
LogicalSize
maxSize
(
wm
aReflowInput
.
AvailableISize
(
)
aReflowInput
.
ComputedBSize
(
)
!
=
NS_UNCONSTRAINEDSIZE
?
aReflowInput
.
ComputedBSize
(
)
:
kidBSize
)
;
aDesiredSize
.
SetSize
(
wm
maxSize
)
;
aDesiredSize
.
SetOverflowAreasToDesiredBounds
(
)
;
if
(
HasAbsolutelyPositionedChildren
(
)
)
{
ReflowInput
reflowInput
(
aReflowInput
)
;
if
(
reflowInput
.
AvailableBSize
(
)
=
=
NS_UNCONSTRAINEDSIZE
)
{
reflowInput
.
AvailableBSize
(
)
=
maxSize
.
BSize
(
wm
)
;
NS_ASSERTION
(
reflowInput
.
ComputedPhysicalBorderPadding
(
)
=
=
nsMargin
(
0
0
0
0
)
"
Viewports
can
'
t
have
border
/
padding
"
)
;
reflowInput
.
SetComputedBSize
(
maxSize
.
BSize
(
wm
)
)
;
}
nsRect
rect
=
AdjustReflowInputAsContainingBlock
(
&
reflowInput
)
;
AbsPosReflowFlags
flags
=
AbsPosReflowFlags
:
:
CBWidthAndHeightChanged
;
GetAbsoluteContainingBlock
(
)
-
>
Reflow
(
this
aPresContext
reflowInput
aStatus
rect
flags
nullptr
)
;
}
if
(
mFrames
.
NotEmpty
(
)
)
{
ConsiderChildOverflow
(
aDesiredSize
.
mOverflowAreas
mFrames
.
FirstChild
(
)
)
;
}
if
(
HasAnyStateBits
(
NS_FRAME_IS_DIRTY
)
)
{
InvalidateFrame
(
)
;
}
FinishAndStoreOverflow
(
&
aDesiredSize
)
;
NS_FRAME_TRACE_REFLOW_OUT
(
"
ViewportFrame
:
:
Reflow
"
aStatus
)
;
NS_FRAME_SET_TRUNCATION
(
aStatus
aReflowInput
aDesiredSize
)
;
}
void
ViewportFrame
:
:
UpdateStyle
(
ServoRestyleState
&
aRestyleState
)
{
RefPtr
<
ComputedStyle
>
newStyle
=
aRestyleState
.
StyleSet
(
)
.
ResolveInheritingAnonymousBoxStyle
(
Style
(
)
-
>
GetPseudoType
(
)
nullptr
)
;
MOZ_ASSERT
(
!
GetNextContinuation
(
)
"
Viewport
has
continuations
?
"
)
;
SetComputedStyle
(
newStyle
)
;
UpdateStyleOfOwnedAnonBoxes
(
aRestyleState
)
;
}
void
ViewportFrame
:
:
AppendDirectlyOwnedAnonBoxes
(
nsTArray
<
OwnedAnonBox
>
&
aResult
)
{
if
(
mFrames
.
NotEmpty
(
)
)
{
aResult
.
AppendElement
(
mFrames
.
FirstChild
(
)
)
;
}
}
nsSize
ViewportFrame
:
:
AdjustViewportSizeForFixedPosition
(
const
nsRect
&
aViewportRect
)
const
{
nsSize
result
=
aViewportRect
.
Size
(
)
;
mozilla
:
:
PresShell
*
presShell
=
PresShell
(
)
;
if
(
presShell
-
>
IsVisualViewportSizeSet
(
)
)
{
if
(
presShell
-
>
GetDynamicToolbarState
(
)
=
=
DynamicToolbarState
:
:
Collapsed
&
&
result
<
presShell
-
>
GetVisualViewportSizeUpdatedByDynamicToolbar
(
)
)
{
result
=
presShell
-
>
GetVisualViewportSizeUpdatedByDynamicToolbar
(
)
;
}
else
if
(
result
<
presShell
-
>
GetVisualViewportSize
(
)
)
{
result
=
presShell
-
>
GetVisualViewportSize
(
)
;
}
}
const
nsSize
layoutViewportSize
=
presShell
-
>
GetLayoutViewportSize
(
)
;
if
(
result
<
layoutViewportSize
)
{
result
=
layoutViewportSize
;
}
return
result
;
}
#
ifdef
DEBUG_FRAME_DUMP
nsresult
ViewportFrame
:
:
GetFrameName
(
nsAString
&
aResult
)
const
{
return
MakeFrameName
(
u
"
Viewport
"
_ns
aResult
)
;
}
#
endif
