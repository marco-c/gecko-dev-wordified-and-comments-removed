#
include
"
nsBackdropFrame
.
h
"
using
namespace
mozilla
;
NS_IMPL_FRAMEARENA_HELPERS
(
nsBackdropFrame
)
nsIAtom
*
nsBackdropFrame
:
:
GetType
(
)
const
{
return
nsGkAtoms
:
:
backdropFrame
;
}
#
ifdef
DEBUG_FRAME_DUMP
nsresult
nsBackdropFrame
:
:
GetFrameName
(
nsAString
&
aResult
)
const
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
Backdrop
"
)
aResult
)
;
}
#
endif
nsStyleContext
*
nsBackdropFrame
:
:
GetParentStyleContext
(
nsIFrame
*
*
aProviderFrame
)
const
{
*
aProviderFrame
=
nullptr
;
return
nullptr
;
}
void
nsBackdropFrame
:
:
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsRect
&
aDirtyRect
const
nsDisplayListSet
&
aLists
)
{
DO_GLOBAL_REFLOW_COUNT_DSP
(
"
nsBackdropFrame
"
)
;
auto
display
=
StyleDisplay
(
)
-
>
mDisplay
;
if
(
display
=
=
NS_STYLE_DISPLAY_NONE
|
|
display
=
=
NS_STYLE_DISPLAY_CONTENTS
)
{
return
;
}
if
(
GetStateBits
(
)
&
NS_FRAME_HAS_VR_CONTENT
)
{
return
;
}
DisplayBorderBackgroundOutline
(
aBuilder
aLists
)
;
}
LogicalSize
nsBackdropFrame
:
:
ComputeAutoSize
(
nsRenderingContext
*
aRenderingContext
WritingMode
aWM
const
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
LogicalSize
&
aMargin
const
LogicalSize
&
aBorder
const
LogicalSize
&
aPadding
bool
aShrinkWrap
)
{
LogicalSize
result
(
aWM
0xdeadbeef
NS_UNCONSTRAINEDSIZE
)
;
if
(
aShrinkWrap
)
{
result
.
ISize
(
aWM
)
=
0
;
}
else
{
result
.
ISize
(
aWM
)
=
aAvailableISize
-
aMargin
.
ISize
(
aWM
)
-
aBorder
.
ISize
(
aWM
)
-
aPadding
.
ISize
(
aWM
)
;
}
return
result
;
}
void
nsBackdropFrame
:
:
Reflow
(
nsPresContext
*
aPresContext
nsHTMLReflowMetrics
&
aDesiredSize
const
ReflowInput
&
aReflowState
nsReflowStatus
&
aStatus
)
{
MarkInReflow
(
)
;
DO_GLOBAL_REFLOW_COUNT
(
"
nsBackdropFrame
"
)
;
DISPLAY_REFLOW
(
aPresContext
this
aReflowState
aDesiredSize
aStatus
)
;
WritingMode
wm
=
aReflowState
.
GetWritingMode
(
)
;
LogicalMargin
borderPadding
=
aReflowState
.
ComputedLogicalBorderPadding
(
)
;
nscoord
isize
=
aReflowState
.
ComputedISize
(
)
+
borderPadding
.
IStartEnd
(
wm
)
;
nscoord
bsize
=
aReflowState
.
ComputedBSize
(
)
+
borderPadding
.
BStartEnd
(
wm
)
;
aDesiredSize
.
SetSize
(
wm
LogicalSize
(
wm
isize
bsize
)
)
;
aStatus
=
NS_FRAME_COMPLETE
;
}
