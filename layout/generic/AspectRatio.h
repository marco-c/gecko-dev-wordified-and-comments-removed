#
ifndef
mozilla_AspectRatio_h
#
define
mozilla_AspectRatio_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsCoord
.
h
"
#
include
<
algorithm
>
#
include
<
limits
>
namespace
mozilla
{
class
WritingMode
;
struct
AspectRatio
{
AspectRatio
(
)
:
mRatio
(
0
.
0f
)
{
}
explicit
AspectRatio
(
float
aRatio
)
:
mRatio
(
std
:
:
max
(
aRatio
0
.
0f
)
)
{
}
static
AspectRatio
FromSize
(
float
aWidth
float
aHeight
)
{
if
(
aWidth
=
=
0
.
0f
|
|
aHeight
=
=
0
.
0f
)
{
return
AspectRatio
(
)
;
}
return
AspectRatio
(
aWidth
/
aHeight
)
;
}
explicit
operator
bool
(
)
const
{
return
mRatio
!
=
0
.
0f
;
}
nscoord
ApplyTo
(
nscoord
aCoord
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
*
this
)
;
return
NSCoordSaturatingNonnegativeMultiply
(
aCoord
mRatio
)
;
}
float
ApplyToFloat
(
float
aFloat
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
*
this
)
;
return
mRatio
*
aFloat
;
}
[
[
nodiscard
]
]
AspectRatio
Inverted
(
)
const
{
if
(
!
*
this
)
{
return
AspectRatio
(
)
;
}
return
AspectRatio
(
std
:
:
max
(
std
:
:
numeric_limits
<
float
>
:
:
epsilon
(
)
1
.
0f
/
mRatio
)
)
;
}
[
[
nodiscard
]
]
inline
AspectRatio
ConvertToWritingMode
(
const
WritingMode
&
aWM
)
const
;
bool
operator
=
=
(
const
AspectRatio
&
aOther
)
const
{
return
mRatio
=
=
aOther
.
mRatio
;
}
bool
operator
!
=
(
const
AspectRatio
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
bool
operator
<
(
const
AspectRatio
&
aOther
)
const
{
return
mRatio
<
aOther
.
mRatio
;
}
private
:
float
mRatio
;
}
;
}
#
endif
