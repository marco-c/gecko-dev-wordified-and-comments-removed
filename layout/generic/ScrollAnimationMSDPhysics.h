#
ifndef
mozilla_layout_ScrollAnimationMSDPhysics_h_
#
define
mozilla_layout_ScrollAnimationMSDPhysics_h_
#
include
"
ScrollAnimationPhysics
.
h
"
#
include
"
mozilla
/
layers
/
APZPublicUtils
.
h
"
#
include
"
mozilla
/
layers
/
AxisPhysicsMSDModel
.
h
"
namespace
mozilla
{
class
ScrollAnimationMSDPhysics
final
:
public
ScrollAnimationPhysics
{
public
:
using
AxisPhysicsMSDModel
=
mozilla
:
:
layers
:
:
AxisPhysicsMSDModel
;
using
ScrollAnimationKind
=
mozilla
:
:
layers
:
:
apz
:
:
ScrollAnimationKind
;
explicit
ScrollAnimationMSDPhysics
(
ScrollAnimationKind
aAnimationKind
const
nsPoint
&
aStartPos
nscoord
aSmallestVisibleIncrement
)
;
void
Update
(
const
TimeStamp
&
aTime
const
nsPoint
&
aDestination
const
nsSize
&
aCurrentVelocity
)
override
;
void
ApplyContentShift
(
const
CSSPoint
&
aShiftDelta
)
override
;
nsSize
VelocityAt
(
const
TimeStamp
&
aTime
)
override
;
nsPoint
PositionAt
(
const
TimeStamp
&
aTime
)
override
;
bool
IsFinished
(
const
TimeStamp
&
aTime
)
override
;
protected
:
class
NonOscillatingAxisPhysicsMSDModel
:
public
AxisPhysicsMSDModel
{
public
:
NonOscillatingAxisPhysicsMSDModel
(
double
aInitialPosition
double
aInitialDestination
double
aInitialVelocity
double
aSpringConstant
double
aDampingRatio
)
;
}
;
double
ComputeSpringConstant
(
const
TimeStamp
&
aTime
)
;
double
GetDampingRatio
(
)
const
;
void
SimulateUntil
(
const
TimeStamp
&
aTime
)
;
ScrollAnimationKind
mAnimationKind
;
nscoord
mSmallestVisibleIncrement
;
TimeStamp
mPreviousEventTime
;
TimeDuration
mPreviousDelta
;
TimeStamp
mStartTime
;
nsPoint
mStartPos
;
nsPoint
mDestination
;
TimeStamp
mLastSimulatedTime
;
NonOscillatingAxisPhysicsMSDModel
mModelX
;
NonOscillatingAxisPhysicsMSDModel
mModelY
;
bool
mIsFirstIteration
;
}
;
}
#
endif
