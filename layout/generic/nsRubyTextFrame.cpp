#
include
"
nsRubyTextFrame
.
h
"
#
include
"
mozilla
/
WritingModes
.
h
"
#
include
"
nsLineLayout
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsStyleContext
.
h
"
using
namespace
mozilla
;
NS_QUERYFRAME_HEAD
(
nsRubyTextFrame
)
NS_QUERYFRAME_ENTRY
(
nsRubyTextFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsRubyContentFrame
)
NS_IMPL_FRAMEARENA_HELPERS
(
nsRubyTextFrame
)
nsContainerFrame
*
NS_NewRubyTextFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
{
return
new
(
aPresShell
)
nsRubyTextFrame
(
aContext
)
;
}
bool
nsRubyTextFrame
:
:
CanContinueTextRun
(
)
const
{
return
false
;
}
#
ifdef
DEBUG_FRAME_DUMP
nsresult
nsRubyTextFrame
:
:
GetFrameName
(
nsAString
&
aResult
)
const
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
RubyText
"
)
aResult
)
;
}
#
endif
void
nsRubyTextFrame
:
:
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
if
(
IsAutoHidden
(
)
)
{
return
;
}
nsRubyContentFrame
:
:
BuildDisplayList
(
aBuilder
aLists
)
;
}
void
nsRubyTextFrame
:
:
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
{
nsRubyContentFrame
:
:
Reflow
(
aPresContext
aDesiredSize
aReflowInput
aStatus
)
;
if
(
IsAutoHidden
(
)
)
{
WritingMode
lineWM
=
aReflowInput
.
mLineLayout
-
>
GetWritingMode
(
)
;
aDesiredSize
.
ISize
(
lineWM
)
=
0
;
aDesiredSize
.
SetOverflowAreasToDesiredBounds
(
)
;
}
}
