#
include
"
nsLeafFrame
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
nsPresContext
.
h
"
using
namespace
mozilla
;
nsLeafFrame
:
:
~
nsLeafFrame
(
)
=
default
;
void
nsLeafFrame
:
:
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
DO_GLOBAL_REFLOW_COUNT_DSP
(
"
nsLeafFrame
"
)
;
DisplayBorderBackgroundOutline
(
aBuilder
aLists
)
;
}
nscoord
nsLeafFrame
:
:
GetMinISize
(
gfxContext
*
aRenderingContext
)
{
nscoord
result
;
DISPLAY_MIN_INLINE_SIZE
(
this
result
)
;
result
=
GetIntrinsicISize
(
)
;
return
result
;
}
nscoord
nsLeafFrame
:
:
GetPrefISize
(
gfxContext
*
aRenderingContext
)
{
nscoord
result
;
DISPLAY_PREF_INLINE_SIZE
(
this
result
)
;
result
=
GetIntrinsicISize
(
)
;
return
result
;
}
LogicalSize
nsLeafFrame
:
:
ComputeAutoSize
(
gfxContext
*
aRenderingContext
WritingMode
aWM
const
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
LogicalSize
&
aMargin
const
LogicalSize
&
aBorderPadding
const
StyleSizeOverrides
&
aSizeOverrides
ComputeSizeFlags
aFlags
)
{
const
WritingMode
wm
=
GetWritingMode
(
)
;
LogicalSize
result
(
wm
GetIntrinsicISize
(
)
GetIntrinsicBSize
(
)
)
;
return
result
.
ConvertTo
(
aWM
wm
)
;
}
nscoord
nsLeafFrame
:
:
GetIntrinsicBSize
(
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Someone
didn
'
t
override
Reflow
or
ComputeAutoSize
"
)
;
return
0
;
}
void
nsLeafFrame
:
:
SizeToAvailSize
(
const
ReflowInput
&
aReflowInput
ReflowOutput
&
aDesiredSize
)
{
aDesiredSize
.
SetSize
(
aReflowInput
.
GetWritingMode
(
)
aReflowInput
.
AvailableSize
(
)
)
;
aDesiredSize
.
SetOverflowAreasToDesiredBounds
(
)
;
FinishAndStoreOverflow
(
&
aDesiredSize
aReflowInput
.
mStyleDisplay
)
;
}
