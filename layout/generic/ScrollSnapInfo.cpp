#
include
"
ScrollSnapInfo
.
h
"
#
include
"
nsPoint
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
mozilla
/
WritingModes
.
h
"
namespace
mozilla
{
ScrollSnapInfo
:
:
ScrollSnapInfo
(
)
:
mScrollSnapStrictnessX
(
StyleScrollSnapStrictness
:
:
None
)
mScrollSnapStrictnessY
(
StyleScrollSnapStrictness
:
:
None
)
{
}
bool
ScrollSnapInfo
:
:
HasScrollSnapping
(
)
const
{
return
mScrollSnapStrictnessY
!
=
StyleScrollSnapStrictness
:
:
None
|
|
mScrollSnapStrictnessX
!
=
StyleScrollSnapStrictness
:
:
None
;
}
bool
ScrollSnapInfo
:
:
HasSnapPositions
(
)
const
{
if
(
!
HasScrollSnapping
(
)
)
{
return
false
;
}
for
(
const
auto
&
target
:
mSnapTargets
)
{
if
(
(
target
.
mSnapPoint
.
mX
&
&
mScrollSnapStrictnessX
!
=
StyleScrollSnapStrictness
:
:
None
)
|
|
(
target
.
mSnapPoint
.
mY
&
&
mScrollSnapStrictnessY
!
=
StyleScrollSnapStrictness
:
:
None
)
)
{
return
true
;
}
}
return
false
;
}
void
ScrollSnapInfo
:
:
InitializeScrollSnapStrictness
(
WritingMode
aWritingMode
const
nsStyleDisplay
*
aDisplay
)
{
if
(
aDisplay
-
>
mScrollSnapType
.
strictness
=
=
StyleScrollSnapStrictness
:
:
None
)
{
return
;
}
mScrollSnapStrictnessX
=
StyleScrollSnapStrictness
:
:
None
;
mScrollSnapStrictnessY
=
StyleScrollSnapStrictness
:
:
None
;
switch
(
aDisplay
-
>
mScrollSnapType
.
axis
)
{
case
StyleScrollSnapAxis
:
:
X
:
mScrollSnapStrictnessX
=
aDisplay
-
>
mScrollSnapType
.
strictness
;
break
;
case
StyleScrollSnapAxis
:
:
Y
:
mScrollSnapStrictnessY
=
aDisplay
-
>
mScrollSnapType
.
strictness
;
break
;
case
StyleScrollSnapAxis
:
:
Block
:
if
(
aWritingMode
.
IsVertical
(
)
)
{
mScrollSnapStrictnessX
=
aDisplay
-
>
mScrollSnapType
.
strictness
;
}
else
{
mScrollSnapStrictnessY
=
aDisplay
-
>
mScrollSnapType
.
strictness
;
}
break
;
case
StyleScrollSnapAxis
:
:
Inline
:
if
(
aWritingMode
.
IsVertical
(
)
)
{
mScrollSnapStrictnessY
=
aDisplay
-
>
mScrollSnapType
.
strictness
;
}
else
{
mScrollSnapStrictnessX
=
aDisplay
-
>
mScrollSnapType
.
strictness
;
}
break
;
case
StyleScrollSnapAxis
:
:
Both
:
mScrollSnapStrictnessX
=
aDisplay
-
>
mScrollSnapType
.
strictness
;
mScrollSnapStrictnessY
=
aDisplay
-
>
mScrollSnapType
.
strictness
;
break
;
}
}
void
ScrollSnapInfo
:
:
ForEachValidTargetFor
(
const
nsPoint
&
aDestination
const
std
:
:
function
<
bool
(
const
SnapTarget
&
)
>
&
aFunc
)
const
{
for
(
const
auto
&
target
:
mSnapTargets
)
{
nsPoint
snapPoint
(
mScrollSnapStrictnessX
!
=
StyleScrollSnapStrictness
:
:
None
&
&
target
.
mSnapPoint
.
mX
?
*
target
.
mSnapPoint
.
mX
:
aDestination
.
x
mScrollSnapStrictnessY
!
=
StyleScrollSnapStrictness
:
:
None
&
&
target
.
mSnapPoint
.
mY
?
*
target
.
mSnapPoint
.
mY
:
aDestination
.
y
)
;
nsRect
snappedPort
=
nsRect
(
snapPoint
mSnapportSize
)
;
if
(
!
snappedPort
.
Intersects
(
target
.
mSnapArea
)
)
{
continue
;
}
if
(
!
aFunc
(
target
)
)
{
break
;
}
}
}
}
