#
ifndef
mozilla_ViewportFrame_h
#
define
mozilla_ViewportFrame_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsContainerFrame
.
h
"
class
nsPresContext
;
namespace
mozilla
{
class
nsDisplayWrapList
;
class
ServoRestyleState
;
class
ViewportFrame
:
public
nsContainerFrame
{
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
ViewportFrame
)
explicit
ViewportFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
ViewportFrame
(
aStyle
aPresContext
kClassID
)
{
}
virtual
~
ViewportFrame
(
)
=
default
;
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
#
ifdef
DEBUG
void
AppendFrames
(
ChildListID
aListID
nsFrameList
&
&
aFrameList
)
override
;
void
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
const
nsLineList
:
:
iterator
*
aPrevFrameLine
nsFrameList
&
&
aFrameList
)
override
;
void
RemoveFrame
(
DestroyContext
&
ChildListID
nsIFrame
*
)
override
;
#
endif
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
nsDisplayWrapList
*
BuildDisplayListForContentTopLayer
(
nsDisplayListBuilder
*
aBuilder
bool
*
aIsOpaque
=
nullptr
)
;
nsDisplayWrapList
*
BuildDisplayListForViewTransitionsAndNACTopLayer
(
nsDisplayListBuilder
*
aBuilder
)
;
nscoord
IntrinsicISize
(
const
IntrinsicSizeInput
&
aInput
IntrinsicISizeType
aType
)
override
;
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
bool
ComputeCustomOverflow
(
mozilla
:
:
OverflowAreas
&
)
override
{
return
false
;
}
nsRect
AdjustReflowInputAsContainingBlock
(
ReflowInput
*
aReflowInput
)
const
;
void
UpdateStyle
(
ServoRestyleState
&
aStyleSet
)
;
void
AppendDirectlyOwnedAnonBoxes
(
nsTArray
<
OwnedAnonBox
>
&
aResult
)
override
;
nsSize
AdjustViewportSizeForFixedPosition
(
const
nsRect
&
aViewportRect
)
const
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
protected
:
ViewportFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
ClassID
aID
)
:
nsContainerFrame
(
aStyle
aPresContext
aID
)
mView
(
nullptr
)
{
}
nsPoint
AdjustReflowInputForScrollbars
(
ReflowInput
*
aReflowInput
)
const
;
nsView
*
GetViewInternal
(
)
const
override
{
return
mView
;
}
void
SetViewInternal
(
nsView
*
aView
)
override
{
mView
=
aView
;
}
private
:
nsDisplayWrapList
*
MaybeWrapTopLayerList
(
nsDisplayListBuilder
*
uint16_t
aIndex
nsDisplayList
&
)
;
mozilla
:
:
FrameChildListID
GetAbsoluteListID
(
)
const
override
{
return
FrameChildListID
:
:
Fixed
;
}
nsView
*
mView
;
}
;
}
#
endif
