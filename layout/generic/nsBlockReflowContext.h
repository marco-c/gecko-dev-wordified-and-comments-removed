#
ifndef
nsBlockReflowContext_h___
#
define
nsBlockReflowContext_h___
#
include
"
nsIFrame
.
h
"
#
include
"
mozilla
/
ReflowOutput
.
h
"
class
nsLineBox
;
class
nsPresContext
;
namespace
mozilla
{
class
BlockReflowInput
;
}
class
nsBlockReflowContext
{
using
BlockReflowInput
=
mozilla
:
:
BlockReflowInput
;
using
ReflowInput
=
mozilla
:
:
ReflowInput
;
using
ReflowOutput
=
mozilla
:
:
ReflowOutput
;
public
:
nsBlockReflowContext
(
nsPresContext
*
aPresContext
const
ReflowInput
&
aParentRI
)
;
~
nsBlockReflowContext
(
)
{
}
void
ReflowBlock
(
const
mozilla
:
:
LogicalRect
&
aSpace
bool
aApplyBStartMargin
nsCollapsingMargin
&
aPrevMargin
nscoord
aClearance
bool
aIsAdjacentWithBStart
nsLineBox
*
aLine
ReflowInput
&
aReflowInput
nsReflowStatus
&
aReflowStatus
BlockReflowInput
&
aState
)
;
bool
PlaceBlock
(
const
ReflowInput
&
aReflowInput
bool
aForceFit
nsLineBox
*
aLine
nsCollapsingMargin
&
aBEndMarginResult
nsOverflowAreas
&
aOverflowAreas
const
nsReflowStatus
&
aReflowStatus
)
;
nsCollapsingMargin
&
GetCarriedOutBEndMargin
(
)
{
return
mMetrics
.
mCarriedOutBEndMargin
;
}
const
ReflowOutput
&
GetMetrics
(
)
const
{
return
mMetrics
;
}
bool
ComputeCollapsedBStartMargin
(
const
ReflowInput
&
aRI
nsCollapsingMargin
*
aMargin
nsIFrame
*
aClearanceFrame
bool
*
aMayNeedRetry
bool
*
aIsEmpty
=
nullptr
)
;
protected
:
nsPresContext
*
mPresContext
;
const
ReflowInput
&
mOuterReflowInput
;
nsIFrame
*
mFrame
;
mozilla
:
:
LogicalRect
mSpace
;
nscoord
mICoord
mBCoord
;
nsSize
mContainerSize
;
mozilla
:
:
WritingMode
mWritingMode
;
ReflowOutput
mMetrics
;
nsCollapsingMargin
mBStartMargin
;
}
;
#
endif
