#
ifndef
nsCanvasFrame_h___
#
define
nsCanvasFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsIAnonymousContentCreator
.
h
"
#
include
"
nsIPopupContainer
.
h
"
#
include
"
nsIScrollPositionListener
.
h
"
class
nsPresContext
;
class
gfxContext
;
class
nsCanvasFrame
final
:
public
nsContainerFrame
public
nsIScrollPositionListener
public
nsIAnonymousContentCreator
public
nsIPopupContainer
{
using
Element
=
mozilla
:
:
dom
:
:
Element
;
public
:
explicit
nsCanvasFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsContainerFrame
(
aStyle
aPresContext
kClassID
)
mDoPaintFocus
(
false
)
mAddedScrollPositionListener
(
false
)
{
}
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsCanvasFrame
)
Element
*
GetDefaultTooltip
(
)
override
;
void
Destroy
(
DestroyContext
&
)
override
;
void
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
&
aChildList
)
override
;
void
AppendFrames
(
ChildListID
aListID
nsFrameList
&
&
aFrameList
)
override
;
void
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
const
nsLineList
:
:
iterator
*
aPrevFrameLine
nsFrameList
&
&
aFrameList
)
override
;
#
ifdef
DEBUG
void
RemoveFrame
(
DestroyContext
&
ChildListID
nsIFrame
*
)
override
;
#
endif
nscoord
IntrinsicISize
(
const
mozilla
:
:
IntrinsicSizeInput
&
aInput
mozilla
:
:
IntrinsicISizeType
aType
)
override
;
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
nsresult
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
override
;
void
AppendAnonymousContentTo
(
nsTArray
<
nsIContent
*
>
&
aElements
uint32_t
aFilter
)
override
;
Element
*
GetCustomContentContainer
(
)
const
{
return
mCustomContentContainer
;
}
void
ShowCustomContentContainer
(
)
;
void
HideCustomContentContainer
(
)
;
NS_IMETHOD
SetHasFocus
(
bool
aHasFocus
)
;
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
void
PaintFocus
(
mozilla
:
:
gfx
:
:
DrawTarget
*
aRenderingContext
nsPoint
aPt
)
;
void
ScrollPositionWillChange
(
nscoord
aX
nscoord
aY
)
override
;
void
ScrollPositionDidChange
(
nscoord
aX
nscoord
aY
)
override
{
}
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
nsresult
GetContentForEvent
(
const
mozilla
:
:
WidgetEvent
*
aEvent
nsIContent
*
*
aContent
)
override
;
nsRect
CanvasArea
(
)
const
;
protected
:
bool
mDoPaintFocus
;
bool
mAddedScrollPositionListener
;
nsCOMPtr
<
Element
>
mCustomContentContainer
;
nsCOMPtr
<
Element
>
mTooltipContent
;
}
;
namespace
mozilla
{
class
nsDisplayCanvasBackgroundImage
final
:
public
nsDisplayBackgroundImage
{
public
:
explicit
nsDisplayCanvasBackgroundImage
(
nsDisplayListBuilder
*
aBuilder
nsIFrame
*
aFrame
const
InitData
&
aInitData
)
:
nsDisplayBackgroundImage
(
aBuilder
aFrame
aInitData
)
{
}
void
Paint
(
nsDisplayListBuilder
*
aBuilder
gfxContext
*
aCtx
)
override
;
bool
SupportsOptimizingToImage
(
)
const
override
{
return
false
;
}
bool
IsSingleFixedPositionImage
(
nsDisplayListBuilder
*
aBuilder
const
nsRect
&
aClipRect
gfxRect
*
aDestRect
)
;
NS_DISPLAY_DECL_NAME
(
"
CanvasBackgroundImage
"
TYPE_CANVAS_BACKGROUND_IMAGE
)
}
;
class
nsDisplayCanvasThemedBackground
final
:
public
nsDisplayThemedBackground
{
public
:
nsDisplayCanvasThemedBackground
(
nsDisplayListBuilder
*
aBuilder
nsIFrame
*
aFrame
)
:
nsDisplayThemedBackground
(
aBuilder
aFrame
aFrame
-
>
GetRectRelativeToSelf
(
)
+
aBuilder
-
>
ToReferenceFrame
(
aFrame
)
)
{
nsDisplayThemedBackground
:
:
Init
(
aBuilder
)
;
}
void
Paint
(
nsDisplayListBuilder
*
aBuilder
gfxContext
*
aCtx
)
override
;
NS_DISPLAY_DECL_NAME
(
"
CanvasThemedBackground
"
TYPE_CANVAS_THEMED_BACKGROUND
)
}
;
}
#
endif
