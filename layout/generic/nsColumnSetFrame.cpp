#
include
"
mozilla
/
Unused
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
nsColumnSetFrame
.
h
"
#
include
"
nsCSSRendering
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
layout
;
class
nsDisplayColumnRule
:
public
nsDisplayItem
{
public
:
nsDisplayColumnRule
(
nsDisplayListBuilder
*
aBuilder
nsIFrame
*
aFrame
)
:
nsDisplayItem
(
aBuilder
aFrame
)
{
MOZ_COUNT_CTOR
(
nsDisplayColumnRule
)
;
}
#
ifdef
NS_BUILD_REFCNT_LOGGING
virtual
~
nsDisplayColumnRule
(
)
{
MOZ_COUNT_DTOR
(
nsDisplayColumnRule
)
;
mBorderRenderers
.
Clear
(
)
;
}
#
endif
virtual
nsRect
GetBounds
(
nsDisplayListBuilder
*
aBuilder
bool
*
aSnap
)
const
override
{
*
aSnap
=
false
;
return
static_cast
<
nsColumnSetFrame
*
>
(
mFrame
)
-
>
CalculateColumnRuleBounds
(
ToReferenceFrame
(
)
)
;
}
virtual
bool
CreateWebRenderCommands
(
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
mozilla
:
:
layers
:
:
WebRenderLayerManager
*
aManager
nsDisplayListBuilder
*
aDisplayListBuilder
)
override
;
virtual
void
Paint
(
nsDisplayListBuilder
*
aBuilder
gfxContext
*
aCtx
)
override
;
NS_DISPLAY_DECL_NAME
(
"
ColumnRule
"
TYPE_COLUMN_RULE
)
;
private
:
nsTArray
<
nsCSSBorderRenderer
>
mBorderRenderers
;
}
;
void
nsDisplayColumnRule
:
:
Paint
(
nsDisplayListBuilder
*
aBuilder
gfxContext
*
aCtx
)
{
static_cast
<
nsColumnSetFrame
*
>
(
mFrame
)
-
>
CreateBorderRenderers
(
mBorderRenderers
aCtx
GetPaintRect
(
)
ToReferenceFrame
(
)
)
;
for
(
auto
iter
=
mBorderRenderers
.
begin
(
)
;
iter
!
=
mBorderRenderers
.
end
(
)
;
iter
+
+
)
{
iter
-
>
DrawBorders
(
)
;
}
}
bool
nsDisplayColumnRule
:
:
CreateWebRenderCommands
(
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
mozilla
:
:
layers
:
:
WebRenderLayerManager
*
aManager
nsDisplayListBuilder
*
aDisplayListBuilder
)
{
RefPtr
<
gfxContext
>
screenRefCtx
=
gfxContext
:
:
CreateOrNull
(
gfxPlatform
:
:
GetPlatform
(
)
-
>
ScreenReferenceDrawTarget
(
)
.
get
(
)
)
;
static_cast
<
nsColumnSetFrame
*
>
(
mFrame
)
-
>
CreateBorderRenderers
(
mBorderRenderers
screenRefCtx
GetPaintRect
(
)
ToReferenceFrame
(
)
)
;
if
(
mBorderRenderers
.
IsEmpty
(
)
)
{
return
true
;
}
for
(
auto
&
renderer
:
mBorderRenderers
)
{
renderer
.
CreateWebRenderCommands
(
this
aBuilder
aResources
aSc
)
;
}
return
true
;
}
nsContainerFrame
*
NS_NewColumnSetFrame
(
nsIPresShell
*
aPresShell
ComputedStyle
*
aStyle
nsFrameState
aStateFlags
)
{
nsColumnSetFrame
*
it
=
new
(
aPresShell
)
nsColumnSetFrame
(
aStyle
)
;
it
-
>
AddStateBits
(
aStateFlags
|
NS_BLOCK_MARGIN_ROOT
)
;
return
it
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsColumnSetFrame
)
nsColumnSetFrame
:
:
nsColumnSetFrame
(
ComputedStyle
*
aStyle
)
:
nsContainerFrame
(
aStyle
kClassID
)
mLastBalanceBSize
(
NS_INTRINSICSIZE
)
{
}
void
nsColumnSetFrame
:
:
ForEachColumnRule
(
const
std
:
:
function
<
void
(
const
nsRect
&
lineRect
)
>
&
aSetLineRect
const
nsPoint
&
aPt
)
{
nsIFrame
*
child
=
mFrames
.
FirstChild
(
)
;
if
(
!
child
)
return
;
nsIFrame
*
nextSibling
=
child
-
>
GetNextSibling
(
)
;
if
(
!
nextSibling
)
return
;
const
nsStyleColumn
*
colStyle
=
StyleColumn
(
)
;
nscoord
ruleWidth
=
colStyle
-
>
GetComputedColumnRuleWidth
(
)
;
if
(
!
ruleWidth
)
return
;
WritingMode
wm
=
GetWritingMode
(
)
;
bool
isVertical
=
wm
.
IsVertical
(
)
;
bool
isRTL
=
!
wm
.
IsBidiLTR
(
)
;
nsRect
contentRect
=
GetContentRectRelativeToSelf
(
)
+
aPt
;
nsSize
ruleSize
=
isVertical
?
nsSize
(
contentRect
.
width
ruleWidth
)
:
nsSize
(
ruleWidth
contentRect
.
height
)
;
while
(
nextSibling
)
{
nsIFrame
*
prevFrame
=
isRTL
?
nextSibling
:
child
;
nsIFrame
*
nextFrame
=
isRTL
?
child
:
nextSibling
;
nsPoint
linePt
;
if
(
isVertical
)
{
nscoord
edgeOfPrev
=
prevFrame
-
>
GetRect
(
)
.
YMost
(
)
+
aPt
.
y
;
nscoord
edgeOfNext
=
nextFrame
-
>
GetRect
(
)
.
Y
(
)
+
aPt
.
y
;
linePt
=
nsPoint
(
contentRect
.
x
(
edgeOfPrev
+
edgeOfNext
-
ruleSize
.
height
)
/
2
)
;
}
else
{
nscoord
edgeOfPrev
=
prevFrame
-
>
GetRect
(
)
.
XMost
(
)
+
aPt
.
x
;
nscoord
edgeOfNext
=
nextFrame
-
>
GetRect
(
)
.
X
(
)
+
aPt
.
x
;
linePt
=
nsPoint
(
(
edgeOfPrev
+
edgeOfNext
-
ruleSize
.
width
)
/
2
contentRect
.
y
)
;
}
aSetLineRect
(
nsRect
(
linePt
ruleSize
)
)
;
child
=
nextSibling
;
nextSibling
=
nextSibling
-
>
GetNextSibling
(
)
;
}
}
nsRect
nsColumnSetFrame
:
:
CalculateColumnRuleBounds
(
const
nsPoint
&
aOffset
)
{
nsRect
combined
;
ForEachColumnRule
(
[
&
combined
]
(
const
nsRect
&
aLineRect
)
{
combined
=
combined
.
Union
(
aLineRect
)
;
}
aOffset
)
;
return
combined
;
}
void
nsColumnSetFrame
:
:
CreateBorderRenderers
(
nsTArray
<
nsCSSBorderRenderer
>
&
aBorderRenderers
gfxContext
*
aCtx
const
nsRect
&
aDirtyRect
const
nsPoint
&
aPt
)
{
WritingMode
wm
=
GetWritingMode
(
)
;
bool
isVertical
=
wm
.
IsVertical
(
)
;
const
nsStyleColumn
*
colStyle
=
StyleColumn
(
)
;
uint8_t
ruleStyle
;
if
(
colStyle
-
>
mColumnRuleStyle
=
=
NS_STYLE_BORDER_STYLE_INSET
)
ruleStyle
=
NS_STYLE_BORDER_STYLE_RIDGE
;
else
if
(
colStyle
-
>
mColumnRuleStyle
=
=
NS_STYLE_BORDER_STYLE_OUTSET
)
ruleStyle
=
NS_STYLE_BORDER_STYLE_GROOVE
;
else
ruleStyle
=
colStyle
-
>
mColumnRuleStyle
;
nsPresContext
*
presContext
=
PresContext
(
)
;
nscoord
ruleWidth
=
colStyle
-
>
GetComputedColumnRuleWidth
(
)
;
if
(
!
ruleWidth
)
return
;
aBorderRenderers
.
Clear
(
)
;
nscolor
ruleColor
=
GetVisitedDependentColor
(
&
nsStyleColumn
:
:
mColumnRuleColor
)
;
nsStyleBorder
border
(
presContext
)
;
Sides
skipSides
;
if
(
isVertical
)
{
border
.
SetBorderWidth
(
eSideTop
ruleWidth
)
;
border
.
SetBorderStyle
(
eSideTop
ruleStyle
)
;
border
.
mBorderTopColor
=
StyleComplexColor
:
:
FromColor
(
ruleColor
)
;
skipSides
|
=
mozilla
:
:
eSideBitsLeftRight
;
skipSides
|
=
mozilla
:
:
eSideBitsBottom
;
}
else
{
border
.
SetBorderWidth
(
eSideLeft
ruleWidth
)
;
border
.
SetBorderStyle
(
eSideLeft
ruleStyle
)
;
border
.
mBorderLeftColor
=
StyleComplexColor
:
:
FromColor
(
ruleColor
)
;
skipSides
|
=
mozilla
:
:
eSideBitsTopBottom
;
skipSides
|
=
mozilla
:
:
eSideBitsRight
;
}
border
.
mBoxDecorationBreak
=
StyleBoxDecorationBreak
:
:
Clone
;
ForEachColumnRule
(
[
&
]
(
const
nsRect
&
aLineRect
)
{
MOZ_ASSERT
(
border
.
mBorderImageSource
.
GetType
(
)
=
=
eStyleImageType_Null
)
;
gfx
:
:
DrawTarget
*
dt
=
aCtx
?
aCtx
-
>
GetDrawTarget
(
)
:
nullptr
;
bool
borderIsEmpty
=
false
;
Maybe
<
nsCSSBorderRenderer
>
br
=
nsCSSRendering
:
:
CreateBorderRendererWithStyleBorder
(
presContext
dt
this
aDirtyRect
aLineRect
border
Style
(
)
&
borderIsEmpty
skipSides
)
;
if
(
br
.
isSome
(
)
)
{
MOZ_ASSERT
(
!
borderIsEmpty
)
;
aBorderRenderers
.
AppendElement
(
br
.
value
(
)
)
;
}
}
aPt
)
;
}
static
nscoord
GetAvailableContentISize
(
const
ReflowInput
&
aReflowInput
)
{
if
(
aReflowInput
.
AvailableISize
(
)
=
=
NS_INTRINSICSIZE
)
{
return
NS_INTRINSICSIZE
;
}
WritingMode
wm
=
aReflowInput
.
GetWritingMode
(
)
;
nscoord
borderPaddingISize
=
aReflowInput
.
ComputedLogicalBorderPadding
(
)
.
IStartEnd
(
wm
)
;
return
std
:
:
max
(
0
aReflowInput
.
AvailableISize
(
)
-
borderPaddingISize
)
;
}
nscoord
nsColumnSetFrame
:
:
GetAvailableContentBSize
(
const
ReflowInput
&
aReflowInput
)
{
if
(
aReflowInput
.
AvailableBSize
(
)
=
=
NS_INTRINSICSIZE
)
{
return
NS_INTRINSICSIZE
;
}
WritingMode
wm
=
aReflowInput
.
GetWritingMode
(
)
;
LogicalMargin
bp
=
aReflowInput
.
ComputedLogicalBorderPadding
(
)
;
bp
.
ApplySkipSides
(
GetLogicalSkipSides
(
&
aReflowInput
)
)
;
bp
.
BEnd
(
wm
)
=
aReflowInput
.
ComputedLogicalBorderPadding
(
)
.
BEnd
(
wm
)
;
return
std
:
:
max
(
0
aReflowInput
.
AvailableBSize
(
)
-
bp
.
BStartEnd
(
wm
)
)
;
}
static
nscoord
GetColumnGap
(
nsColumnSetFrame
*
aFrame
nscoord
aPercentageBasis
)
{
const
auto
&
columnGap
=
aFrame
-
>
StylePosition
(
)
-
>
mColumnGap
;
if
(
columnGap
.
GetUnit
(
)
=
=
eStyleUnit_Normal
)
{
return
aFrame
-
>
StyleFont
(
)
-
>
mFont
.
size
;
}
return
nsLayoutUtils
:
:
ResolveGapToLength
(
columnGap
aPercentageBasis
)
;
}
nsColumnSetFrame
:
:
ReflowConfig
nsColumnSetFrame
:
:
ChooseColumnStrategy
(
const
ReflowInput
&
aReflowInput
bool
aForceAuto
=
false
nscoord
aFeasibleBSize
=
NS_INTRINSICSIZE
nscoord
aInfeasibleBSize
=
0
)
{
nscoord
knownFeasibleBSize
=
aFeasibleBSize
;
nscoord
knownInfeasibleBSize
=
aInfeasibleBSize
;
WritingMode
wm
=
aReflowInput
.
GetWritingMode
(
)
;
const
nsStyleColumn
*
colStyle
=
StyleColumn
(
)
;
nscoord
availContentISize
=
GetAvailableContentISize
(
aReflowInput
)
;
if
(
aReflowInput
.
ComputedISize
(
)
!
=
NS_INTRINSICSIZE
)
{
availContentISize
=
aReflowInput
.
ComputedISize
(
)
;
}
nscoord
consumedBSize
=
ConsumedBSize
(
wm
)
;
nscoord
computedBSize
=
GetEffectiveComputedBSize
(
aReflowInput
consumedBSize
)
;
nscoord
colBSize
=
GetAvailableContentBSize
(
aReflowInput
)
;
if
(
aReflowInput
.
ComputedBSize
(
)
!
=
NS_INTRINSICSIZE
)
{
colBSize
=
aReflowInput
.
ComputedBSize
(
)
;
}
else
if
(
aReflowInput
.
ComputedMaxBSize
(
)
!
=
NS_INTRINSICSIZE
)
{
colBSize
=
std
:
:
min
(
colBSize
aReflowInput
.
ComputedMaxBSize
(
)
)
;
}
nscoord
colGap
=
GetColumnGap
(
this
aReflowInput
.
ComputedISize
(
)
)
;
int32_t
numColumns
=
colStyle
-
>
mColumnCount
;
const
bool
isBalancing
=
colStyle
-
>
mColumnFill
=
=
NS_STYLE_COLUMN_FILL_BALANCE
&
&
!
aForceAuto
;
if
(
isBalancing
)
{
const
uint32_t
MAX_NESTED_COLUMN_BALANCING
=
2
;
uint32_t
cnt
=
0
;
for
(
const
ReflowInput
*
rs
=
aReflowInput
.
mParentReflowInput
;
rs
&
&
cnt
<
MAX_NESTED_COLUMN_BALANCING
;
rs
=
rs
-
>
mParentReflowInput
)
{
if
(
rs
-
>
mFlags
.
mIsColumnBalancing
)
{
+
+
cnt
;
}
}
if
(
cnt
=
=
MAX_NESTED_COLUMN_BALANCING
)
{
numColumns
=
1
;
}
}
nscoord
colISize
;
if
(
colStyle
-
>
mColumnWidth
.
GetUnit
(
)
=
=
eStyleUnit_Coord
)
{
colISize
=
colStyle
-
>
mColumnWidth
.
GetCoordValue
(
)
;
NS_ASSERTION
(
colISize
>
=
0
"
negative
column
width
"
)
;
if
(
availContentISize
!
=
NS_INTRINSICSIZE
&
&
colGap
+
colISize
>
0
&
&
numColumns
>
0
)
{
int32_t
maxColumns
=
std
:
:
min
(
nscoord
(
nsStyleColumn
:
:
kMaxColumnCount
)
(
availContentISize
+
colGap
)
/
(
colGap
+
colISize
)
)
;
numColumns
=
std
:
:
max
(
1
std
:
:
min
(
numColumns
maxColumns
)
)
;
}
}
else
if
(
numColumns
>
0
&
&
availContentISize
!
=
NS_INTRINSICSIZE
)
{
nscoord
iSizeMinusGaps
=
availContentISize
-
colGap
*
(
numColumns
-
1
)
;
colISize
=
iSizeMinusGaps
/
numColumns
;
}
else
{
colISize
=
NS_INTRINSICSIZE
;
}
colISize
=
std
:
:
max
(
1
std
:
:
min
(
colISize
availContentISize
)
)
;
nscoord
expectedISizeLeftOver
=
0
;
if
(
colISize
!
=
NS_INTRINSICSIZE
&
&
availContentISize
!
=
NS_INTRINSICSIZE
)
{
if
(
numColumns
<
=
0
)
{
if
(
colGap
+
colISize
>
0
)
{
numColumns
=
(
availContentISize
+
colGap
)
/
(
colGap
+
colISize
)
;
numColumns
=
std
:
:
min
(
nscoord
(
nsStyleColumn
:
:
kMaxColumnCount
)
numColumns
)
;
}
if
(
numColumns
<
=
0
)
{
numColumns
=
1
;
}
}
nscoord
extraSpace
=
std
:
:
max
(
0
availContentISize
-
(
colISize
*
numColumns
+
colGap
*
(
numColumns
-
1
)
)
)
;
nscoord
extraToColumns
=
extraSpace
/
numColumns
;
colISize
+
=
extraToColumns
;
expectedISizeLeftOver
=
extraSpace
-
(
extraToColumns
*
numColumns
)
;
}
if
(
isBalancing
)
{
if
(
numColumns
<
=
0
)
{
numColumns
=
1
;
}
colBSize
=
std
:
:
min
(
mLastBalanceBSize
colBSize
)
;
}
else
{
numColumns
=
INT32_MAX
;
colBSize
=
std
:
:
max
(
colBSize
nsPresContext
:
:
CSSPixelsToAppUnits
(
1
)
)
;
}
#
ifdef
DEBUG_roc
printf
(
"
*
*
*
nsColumnSetFrame
:
:
ChooseColumnStrategy
:
numColumns
=
%
d
colISize
=
%
d
"
"
expectedISizeLeftOver
=
%
d
colBSize
=
%
d
colGap
=
%
d
\
n
"
numColumns
colISize
expectedISizeLeftOver
colBSize
colGap
)
;
#
endif
ReflowConfig
config
=
{
numColumns
colISize
expectedISizeLeftOver
colGap
colBSize
isBalancing
knownFeasibleBSize
knownInfeasibleBSize
computedBSize
consumedBSize
}
;
return
config
;
}
static
void
MarkPrincipalChildrenDirty
(
nsIFrame
*
aFrame
)
{
for
(
nsIFrame
*
childFrame
:
aFrame
-
>
PrincipalChildList
(
)
)
{
childFrame
-
>
AddStateBits
(
NS_FRAME_IS_DIRTY
)
;
}
}
bool
nsColumnSetFrame
:
:
ReflowColumns
(
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aReflowStatus
ReflowConfig
&
aConfig
bool
aLastColumnUnbounded
nsCollapsingMargin
*
aCarriedOutBEndMargin
ColumnBalanceData
&
aColData
)
{
bool
feasible
=
ReflowChildren
(
aDesiredSize
aReflowInput
aReflowStatus
aConfig
aLastColumnUnbounded
aCarriedOutBEndMargin
aColData
)
;
if
(
aColData
.
mHasExcessBSize
)
{
aConfig
=
ChooseColumnStrategy
(
aReflowInput
true
)
;
feasible
=
ReflowChildren
(
aDesiredSize
aReflowInput
aReflowStatus
aConfig
aLastColumnUnbounded
aCarriedOutBEndMargin
aColData
)
;
}
return
feasible
;
}
static
void
MoveChildTo
(
nsIFrame
*
aChild
LogicalPoint
aOrigin
WritingMode
aWM
const
nsSize
&
aContainerSize
)
{
if
(
aChild
-
>
GetLogicalPosition
(
aWM
aContainerSize
)
=
=
aOrigin
)
{
return
;
}
aChild
-
>
SetPosition
(
aWM
aOrigin
aContainerSize
)
;
nsContainerFrame
:
:
PlaceFrameView
(
aChild
)
;
}
nscoord
nsColumnSetFrame
:
:
GetMinISize
(
gfxContext
*
aRenderingContext
)
{
nscoord
iSize
=
0
;
DISPLAY_MIN_WIDTH
(
this
iSize
)
;
if
(
mFrames
.
FirstChild
(
)
)
{
iSize
=
mFrames
.
FirstChild
(
)
-
>
GetMinISize
(
aRenderingContext
)
;
}
const
nsStyleColumn
*
colStyle
=
StyleColumn
(
)
;
nscoord
colISize
;
if
(
colStyle
-
>
mColumnWidth
.
GetUnit
(
)
=
=
eStyleUnit_Coord
)
{
colISize
=
colStyle
-
>
mColumnWidth
.
GetCoordValue
(
)
;
iSize
=
std
:
:
min
(
iSize
colISize
)
;
}
else
{
NS_ASSERTION
(
colStyle
-
>
mColumnCount
>
0
"
column
-
count
and
column
-
width
can
'
t
both
be
auto
"
)
;
colISize
=
iSize
;
iSize
*
=
colStyle
-
>
mColumnCount
;
nscoord
colGap
=
GetColumnGap
(
this
NS_UNCONSTRAINEDSIZE
)
;
iSize
+
=
colGap
*
(
colStyle
-
>
mColumnCount
-
1
)
;
iSize
=
std
:
:
max
(
iSize
colISize
)
;
}
return
iSize
;
}
nscoord
nsColumnSetFrame
:
:
GetPrefISize
(
gfxContext
*
aRenderingContext
)
{
nscoord
result
=
0
;
DISPLAY_PREF_WIDTH
(
this
result
)
;
const
nsStyleColumn
*
colStyle
=
StyleColumn
(
)
;
nscoord
colGap
=
GetColumnGap
(
this
NS_UNCONSTRAINEDSIZE
)
;
nscoord
colISize
;
if
(
colStyle
-
>
mColumnWidth
.
GetUnit
(
)
=
=
eStyleUnit_Coord
)
{
colISize
=
colStyle
-
>
mColumnWidth
.
GetCoordValue
(
)
;
}
else
if
(
mFrames
.
FirstChild
(
)
)
{
colISize
=
mFrames
.
FirstChild
(
)
-
>
GetPrefISize
(
aRenderingContext
)
;
}
else
{
colISize
=
0
;
}
int32_t
numColumns
=
colStyle
-
>
mColumnCount
;
if
(
numColumns
<
=
0
)
{
numColumns
=
1
;
}
nscoord
iSize
=
colISize
*
numColumns
+
colGap
*
(
numColumns
-
1
)
;
result
=
std
:
:
max
(
iSize
colISize
)
;
return
result
;
}
bool
nsColumnSetFrame
:
:
ReflowChildren
(
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
const
ReflowConfig
&
aConfig
bool
aUnboundedLastColumn
nsCollapsingMargin
*
aCarriedOutBEndMargin
ColumnBalanceData
&
aColData
)
{
aColData
.
Reset
(
)
;
bool
allFit
=
true
;
WritingMode
wm
=
GetWritingMode
(
)
;
bool
isRTL
=
!
wm
.
IsBidiLTR
(
)
;
bool
shrinkingBSize
=
mLastBalanceBSize
>
aConfig
.
mColMaxBSize
;
bool
changingBSize
=
mLastBalanceBSize
!
=
aConfig
.
mColMaxBSize
;
#
ifdef
DEBUG_roc
printf
(
"
*
*
*
Doing
column
reflow
pass
:
mLastBalanceBSize
=
%
d
mColMaxBSize
=
%
d
RTL
=
%
d
\
n
"
"
mBalanceColCount
=
%
d
mColISize
=
%
d
mColGap
=
%
d
\
n
"
mLastBalanceBSize
aConfig
.
mColMaxBSize
isRTL
aConfig
.
mBalanceColCount
aConfig
.
mColISize
aConfig
.
mColGap
)
;
#
endif
DrainOverflowColumns
(
)
;
const
bool
colBSizeChanged
=
mLastBalanceBSize
!
=
aConfig
.
mColMaxBSize
;
if
(
colBSizeChanged
)
{
mLastBalanceBSize
=
aConfig
.
mColMaxBSize
;
}
LogicalMargin
borderPadding
=
aReflowInput
.
ComputedLogicalBorderPadding
(
)
;
borderPadding
.
ApplySkipSides
(
GetLogicalSkipSides
(
&
aReflowInput
)
)
;
nsRect
contentRect
(
0
0
0
0
)
;
nsOverflowAreas
overflowRects
;
nsIFrame
*
child
=
mFrames
.
FirstChild
(
)
;
LogicalPoint
childOrigin
(
wm
borderPadding
.
IStart
(
wm
)
borderPadding
.
BStart
(
wm
)
)
;
nsSize
containerSize
=
aReflowInput
.
ComputedSizeAsContainerIfConstrained
(
)
;
if
(
!
wm
.
IsVertical
(
)
&
&
isRTL
)
{
nscoord
availISize
=
aReflowInput
.
AvailableISize
(
)
;
if
(
aReflowInput
.
ComputedISize
(
)
!
=
NS_INTRINSICSIZE
)
{
availISize
=
aReflowInput
.
ComputedISize
(
)
;
}
if
(
availISize
!
=
NS_INTRINSICSIZE
)
{
childOrigin
.
I
(
wm
)
=
containerSize
.
width
-
borderPadding
.
Left
(
wm
)
-
availISize
;
#
ifdef
DEBUG_roc
printf
(
"
*
*
*
childOrigin
.
iCoord
=
%
d
\
n
"
childOrigin
.
I
(
wm
)
)
;
#
endif
}
}
int
columnCount
=
0
;
int
contentBEnd
=
0
;
bool
reflowNext
=
false
;
while
(
child
)
{
bool
skipIncremental
=
!
aReflowInput
.
ShouldReflowAllKids
(
)
&
&
!
NS_SUBTREE_DIRTY
(
child
)
&
&
child
-
>
GetNextSibling
(
)
&
&
!
(
aUnboundedLastColumn
&
&
columnCount
=
=
aConfig
.
mBalanceColCount
-
1
)
&
&
!
NS_SUBTREE_DIRTY
(
child
-
>
GetNextSibling
(
)
)
;
if
(
skipIncremental
&
&
changingBSize
&
&
StyleColumn
(
)
-
>
mColumnFill
=
=
NS_STYLE_COLUMN_FILL_AUTO
)
{
skipIncremental
=
false
;
}
if
(
skipIncremental
&
&
shrinkingBSize
)
{
switch
(
wm
.
GetBlockDir
(
)
)
{
case
WritingMode
:
:
eBlockTB
:
if
(
child
-
>
GetScrollableOverflowRect
(
)
.
YMost
(
)
>
aConfig
.
mColMaxBSize
)
{
skipIncremental
=
false
;
}
break
;
case
WritingMode
:
:
eBlockLR
:
if
(
child
-
>
GetScrollableOverflowRect
(
)
.
XMost
(
)
>
aConfig
.
mColMaxBSize
)
{
skipIncremental
=
false
;
}
break
;
case
WritingMode
:
:
eBlockRL
:
skipIncremental
=
false
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
unknown
block
direction
"
)
;
break
;
}
}
nscoord
childContentBEnd
=
0
;
if
(
!
reflowNext
&
&
skipIncremental
)
{
MoveChildTo
(
child
childOrigin
wm
containerSize
)
;
nsIFrame
*
kidNext
=
child
-
>
GetNextSibling
(
)
;
if
(
kidNext
)
{
aStatus
.
Reset
(
)
;
if
(
kidNext
-
>
GetStateBits
(
)
&
NS_FRAME_IS_OVERFLOW_CONTAINER
)
{
aStatus
.
SetOverflowIncomplete
(
)
;
}
else
{
aStatus
.
SetIncomplete
(
)
;
}
}
else
{
aStatus
=
mLastFrameStatus
;
}
childContentBEnd
=
nsLayoutUtils
:
:
CalculateContentBEnd
(
wm
child
)
;
#
ifdef
DEBUG_roc
printf
(
"
*
*
*
Skipping
child
#
%
d
%
p
(
incremental
%
d
)
:
status
=
%
d
\
n
"
columnCount
(
void
*
)
child
skipIncremental
aStatus
)
;
#
endif
}
else
{
LogicalSize
availSize
(
wm
aConfig
.
mColISize
aConfig
.
mColMaxBSize
)
;
if
(
aUnboundedLastColumn
&
&
columnCount
=
=
aConfig
.
mBalanceColCount
-
1
)
{
availSize
.
BSize
(
wm
)
=
GetAvailableContentBSize
(
aReflowInput
)
;
}
LogicalSize
computedSize
=
aReflowInput
.
ComputedSize
(
wm
)
;
if
(
reflowNext
)
child
-
>
AddStateBits
(
NS_FRAME_IS_DIRTY
)
;
LogicalSize
kidCBSize
(
wm
availSize
.
ISize
(
wm
)
computedSize
.
BSize
(
wm
)
)
;
ReflowInput
kidReflowInput
(
PresContext
(
)
aReflowInput
child
availSize
&
kidCBSize
)
;
kidReflowInput
.
mFlags
.
mIsTopOfPage
=
true
;
kidReflowInput
.
mFlags
.
mTableIsSplittable
=
false
;
kidReflowInput
.
mFlags
.
mIsColumnBalancing
=
aConfig
.
mBalanceColCount
<
INT32_MAX
;
kidReflowInput
.
mFlags
.
mMustReflowPlaceholders
=
!
colBSizeChanged
;
#
ifdef
DEBUG_roc
printf
(
"
*
*
*
Reflowing
child
#
%
d
%
p
:
availHeight
=
%
d
\
n
"
columnCount
(
void
*
)
child
availSize
.
BSize
(
wm
)
)
;
#
endif
if
(
child
-
>
GetNextSibling
(
)
&
&
!
(
GetStateBits
(
)
&
NS_FRAME_IS_DIRTY
)
&
&
!
(
child
-
>
GetNextSibling
(
)
-
>
GetStateBits
(
)
&
NS_FRAME_IS_DIRTY
)
)
{
kidReflowInput
.
mFlags
.
mNextInFlowUntouched
=
true
;
}
ReflowOutput
kidDesiredSize
(
wm
)
;
LogicalPoint
origin
(
wm
childOrigin
.
I
(
wm
)
+
kidReflowInput
.
ComputedLogicalMargin
(
)
.
IStart
(
wm
)
childOrigin
.
B
(
wm
)
+
kidReflowInput
.
ComputedLogicalMargin
(
)
.
BStart
(
wm
)
)
;
aStatus
.
Reset
(
)
;
ReflowChild
(
child
PresContext
(
)
kidDesiredSize
kidReflowInput
wm
origin
containerSize
0
aStatus
)
;
reflowNext
=
aStatus
.
NextInFlowNeedsReflow
(
)
;
#
ifdef
DEBUG_roc
printf
(
"
*
*
*
Reflowed
child
#
%
d
%
p
:
status
=
%
d
desiredSize
=
%
d
%
d
CarriedOutBEndMargin
=
%
d
\
n
"
columnCount
(
void
*
)
child
aStatus
kidDesiredSize
.
Width
(
)
kidDesiredSize
.
Height
(
)
kidDesiredSize
.
mCarriedOutBEndMargin
.
get
(
)
)
;
#
endif
NS_FRAME_TRACE_REFLOW_OUT
(
"
Column
:
:
Reflow
"
aStatus
)
;
*
aCarriedOutBEndMargin
=
kidDesiredSize
.
mCarriedOutBEndMargin
;
FinishReflowChild
(
child
PresContext
(
)
kidDesiredSize
&
kidReflowInput
wm
childOrigin
containerSize
0
)
;
childContentBEnd
=
nsLayoutUtils
:
:
CalculateContentBEnd
(
wm
child
)
;
if
(
childContentBEnd
>
aConfig
.
mColMaxBSize
)
{
allFit
=
false
;
}
if
(
childContentBEnd
>
availSize
.
BSize
(
wm
)
)
{
aColData
.
mMaxOverflowingBSize
=
std
:
:
max
(
childContentBEnd
aColData
.
mMaxOverflowingBSize
)
;
}
}
contentRect
.
UnionRect
(
contentRect
child
-
>
GetRect
(
)
)
;
ConsiderChildOverflow
(
overflowRects
child
)
;
contentBEnd
=
std
:
:
max
(
contentBEnd
childContentBEnd
)
;
aColData
.
mLastBSize
=
childContentBEnd
;
aColData
.
mSumBSize
+
=
childContentBEnd
;
nsIFrame
*
kidNextInFlow
=
child
-
>
GetNextInFlow
(
)
;
if
(
aStatus
.
IsFullyComplete
(
)
&
&
!
aStatus
.
IsTruncated
(
)
)
{
NS_ASSERTION
(
!
kidNextInFlow
"
next
in
flow
should
have
been
deleted
"
)
;
child
=
nullptr
;
break
;
}
else
{
+
+
columnCount
;
if
(
!
kidNextInFlow
)
{
NS_ASSERTION
(
aStatus
.
NextInFlowNeedsReflow
(
)
"
We
have
to
create
a
continuation
but
the
block
doesn
'
t
want
us
to
reflow
it
?
"
)
;
kidNextInFlow
=
CreateNextInFlow
(
child
)
;
}
if
(
aStatus
.
IsOverflowIncomplete
(
)
)
{
if
(
!
(
kidNextInFlow
-
>
GetStateBits
(
)
&
NS_FRAME_IS_OVERFLOW_CONTAINER
)
)
{
aStatus
.
SetNextInFlowNeedsReflow
(
)
;
reflowNext
=
true
;
kidNextInFlow
-
>
AddStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
;
}
}
else
if
(
kidNextInFlow
-
>
GetStateBits
(
)
&
NS_FRAME_IS_OVERFLOW_CONTAINER
)
{
aStatus
.
SetNextInFlowNeedsReflow
(
)
;
reflowNext
=
true
;
kidNextInFlow
-
>
RemoveStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
;
}
if
(
(
contentBEnd
>
aReflowInput
.
ComputedMaxBSize
(
)
|
|
contentBEnd
>
aReflowInput
.
ComputedBSize
(
)
)
&
&
aConfig
.
mBalanceColCount
<
INT32_MAX
)
{
aColData
.
mHasExcessBSize
=
true
;
}
if
(
columnCount
>
=
aConfig
.
mBalanceColCount
)
{
aStatus
.
SetNextInFlowNeedsReflow
(
)
;
kidNextInFlow
-
>
AddStateBits
(
NS_FRAME_IS_DIRTY
)
;
const
nsFrameList
&
continuationColumns
=
mFrames
.
RemoveFramesAfter
(
child
)
;
if
(
continuationColumns
.
NotEmpty
(
)
)
{
SetOverflowFrames
(
continuationColumns
)
;
}
child
=
nullptr
;
break
;
}
}
if
(
PresContext
(
)
-
>
HasPendingInterrupt
(
)
)
{
break
;
}
child
=
child
-
>
GetNextSibling
(
)
;
if
(
child
)
{
childOrigin
.
I
(
wm
)
+
=
aConfig
.
mColISize
+
aConfig
.
mColGap
;
#
ifdef
DEBUG_roc
printf
(
"
*
*
*
NEXT
CHILD
ORIGIN
.
icoord
=
%
d
\
n
"
childOrigin
.
I
(
wm
)
)
;
#
endif
}
}
if
(
PresContext
(
)
-
>
CheckForInterrupt
(
this
)
&
&
(
GetStateBits
(
)
&
NS_FRAME_IS_DIRTY
)
)
{
for
(
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
child
-
>
AddStateBits
(
NS_FRAME_IS_DIRTY
)
;
}
}
aColData
.
mMaxBSize
=
contentBEnd
;
LogicalSize
contentSize
=
LogicalSize
(
wm
contentRect
.
Size
(
)
)
;
contentSize
.
BSize
(
wm
)
=
std
:
:
max
(
contentSize
.
BSize
(
wm
)
contentBEnd
)
;
mLastFrameStatus
=
aStatus
;
if
(
aConfig
.
mComputedBSize
!
=
NS_INTRINSICSIZE
)
{
if
(
aReflowInput
.
AvailableBSize
(
)
!
=
NS_INTRINSICSIZE
)
{
contentSize
.
BSize
(
wm
)
=
std
:
:
min
(
contentSize
.
BSize
(
wm
)
aConfig
.
mComputedBSize
)
;
}
else
{
contentSize
.
BSize
(
wm
)
=
aConfig
.
mComputedBSize
;
}
}
else
{
contentSize
.
BSize
(
wm
)
=
aReflowInput
.
ApplyMinMaxBSize
(
contentSize
.
BSize
(
wm
)
aConfig
.
mConsumedBSize
)
;
}
if
(
aReflowInput
.
ComputedISize
(
)
!
=
NS_INTRINSICSIZE
)
{
contentSize
.
ISize
(
wm
)
=
aReflowInput
.
ComputedISize
(
)
;
}
else
{
contentSize
.
ISize
(
wm
)
=
aReflowInput
.
ApplyMinMaxISize
(
contentSize
.
ISize
(
wm
)
)
;
}
contentSize
.
ISize
(
wm
)
+
=
borderPadding
.
IStartEnd
(
wm
)
;
contentSize
.
BSize
(
wm
)
+
=
borderPadding
.
BStartEnd
(
wm
)
;
aDesiredSize
.
SetSize
(
wm
contentSize
)
;
aDesiredSize
.
mOverflowAreas
=
overflowRects
;
aDesiredSize
.
UnionOverflowAreasWithDesiredBounds
(
)
;
if
(
wm
.
IsVerticalRL
(
)
&
&
containerSize
.
width
!
=
contentSize
.
Width
(
wm
)
)
{
const
nsSize
finalContainerSize
=
aDesiredSize
.
PhysicalSize
(
)
;
for
(
nsIFrame
*
child
:
mFrames
)
{
child
-
>
SetPosition
(
wm
child
-
>
GetLogicalPosition
(
wm
containerSize
)
finalContainerSize
)
;
}
}
#
ifdef
DEBUG_roc
printf
(
"
*
*
*
DONE
PASS
feasible
=
%
d
\
n
"
allFit
&
&
aStatus
.
IsFullyComplete
(
)
&
&
!
aStatus
.
IsTruncated
(
)
)
;
#
endif
return
allFit
&
&
aStatus
.
IsFullyComplete
(
)
&
&
!
aStatus
.
IsTruncated
(
)
;
}
void
nsColumnSetFrame
:
:
DrainOverflowColumns
(
)
{
nsPresContext
*
presContext
=
PresContext
(
)
;
nsColumnSetFrame
*
prev
=
static_cast
<
nsColumnSetFrame
*
>
(
GetPrevInFlow
(
)
)
;
if
(
prev
)
{
AutoFrameListPtr
overflows
(
presContext
prev
-
>
StealOverflowFrames
(
)
)
;
if
(
overflows
)
{
nsContainerFrame
:
:
ReparentFrameViewList
(
*
overflows
prev
this
)
;
mFrames
.
InsertFrames
(
this
nullptr
*
overflows
)
;
}
}
AutoFrameListPtr
overflows
(
presContext
StealOverflowFrames
(
)
)
;
if
(
overflows
)
{
mFrames
.
AppendFrames
(
nullptr
*
overflows
)
;
}
}
void
nsColumnSetFrame
:
:
FindBestBalanceBSize
(
const
ReflowInput
&
aReflowInput
nsPresContext
*
aPresContext
ReflowConfig
&
aConfig
ColumnBalanceData
&
aColData
ReflowOutput
&
aDesiredSize
nsCollapsingMargin
&
aOutMargin
bool
&
aUnboundedLastColumn
bool
&
aRunWasFeasible
nsReflowStatus
&
aStatus
)
{
bool
feasible
=
aRunWasFeasible
;
nsMargin
bp
=
aReflowInput
.
ComputedPhysicalBorderPadding
(
)
;
bp
.
ApplySkipSides
(
GetSkipSides
(
)
)
;
bp
.
bottom
=
aReflowInput
.
ComputedPhysicalBorderPadding
(
)
.
bottom
;
nscoord
availableContentBSize
=
GetAvailableContentBSize
(
aReflowInput
)
;
bool
maybeContinuousBreakingDetected
=
false
;
while
(
!
aPresContext
-
>
HasPendingInterrupt
(
)
)
{
nscoord
lastKnownFeasibleBSize
=
aConfig
.
mKnownFeasibleBSize
;
if
(
feasible
)
{
aConfig
.
mKnownFeasibleBSize
=
std
:
:
min
(
aConfig
.
mKnownFeasibleBSize
aColData
.
mMaxBSize
)
;
aConfig
.
mKnownFeasibleBSize
=
std
:
:
min
(
aConfig
.
mKnownFeasibleBSize
mLastBalanceBSize
)
;
if
(
mFrames
.
GetLength
(
)
=
=
aConfig
.
mBalanceColCount
)
{
aConfig
.
mKnownInfeasibleBSize
=
std
:
:
max
(
aConfig
.
mKnownInfeasibleBSize
aColData
.
mLastBSize
-
1
)
;
}
}
else
{
aConfig
.
mKnownInfeasibleBSize
=
std
:
:
max
(
aConfig
.
mKnownInfeasibleBSize
mLastBalanceBSize
)
;
aConfig
.
mKnownInfeasibleBSize
=
std
:
:
max
(
aConfig
.
mKnownInfeasibleBSize
aColData
.
mMaxOverflowingBSize
-
1
)
;
if
(
aUnboundedLastColumn
)
{
aConfig
.
mKnownFeasibleBSize
=
std
:
:
min
(
aConfig
.
mKnownFeasibleBSize
aColData
.
mMaxBSize
)
;
}
}
#
ifdef
DEBUG_roc
printf
(
"
*
*
*
nsColumnSetFrame
:
:
Reflow
balancing
knownInfeasible
=
%
d
knownFeasible
=
%
d
\
n
"
aConfig
.
mKnownInfeasibleBSize
aConfig
.
mKnownFeasibleBSize
)
;
#
endif
if
(
aConfig
.
mKnownInfeasibleBSize
>
=
aConfig
.
mKnownFeasibleBSize
-
1
)
{
break
;
}
if
(
aConfig
.
mKnownInfeasibleBSize
>
=
availableContentBSize
)
{
break
;
}
if
(
lastKnownFeasibleBSize
-
aConfig
.
mKnownFeasibleBSize
=
=
1
)
{
maybeContinuousBreakingDetected
=
true
;
}
nscoord
nextGuess
=
(
aConfig
.
mKnownFeasibleBSize
+
aConfig
.
mKnownInfeasibleBSize
)
/
2
;
if
(
aConfig
.
mKnownFeasibleBSize
-
nextGuess
<
600
&
&
!
maybeContinuousBreakingDetected
)
{
nextGuess
=
aConfig
.
mKnownFeasibleBSize
-
1
;
}
else
if
(
aUnboundedLastColumn
)
{
nextGuess
=
aColData
.
mSumBSize
/
aConfig
.
mBalanceColCount
+
600
;
nextGuess
=
clamped
(
nextGuess
aConfig
.
mKnownInfeasibleBSize
+
1
aConfig
.
mKnownFeasibleBSize
-
1
)
;
}
else
if
(
aConfig
.
mKnownFeasibleBSize
=
=
NS_INTRINSICSIZE
)
{
nextGuess
=
aConfig
.
mKnownInfeasibleBSize
*
2
+
600
;
}
nextGuess
=
std
:
:
min
(
availableContentBSize
nextGuess
)
;
#
ifdef
DEBUG_roc
printf
(
"
*
*
*
nsColumnSetFrame
:
:
Reflow
balancing
choosing
next
guess
=
%
d
\
n
"
nextGuess
)
;
#
endif
aConfig
.
mColMaxBSize
=
nextGuess
;
aUnboundedLastColumn
=
false
;
MarkPrincipalChildrenDirty
(
this
)
;
feasible
=
ReflowColumns
(
aDesiredSize
aReflowInput
aStatus
aConfig
false
&
aOutMargin
aColData
)
;
if
(
!
aConfig
.
mIsBalancing
)
{
break
;
}
}
if
(
aConfig
.
mIsBalancing
&
&
!
feasible
&
&
!
aPresContext
-
>
HasPendingInterrupt
(
)
)
{
bool
skip
=
false
;
if
(
aConfig
.
mKnownInfeasibleBSize
>
=
availableContentBSize
)
{
aConfig
.
mColMaxBSize
=
availableContentBSize
;
if
(
mLastBalanceBSize
=
=
availableContentBSize
)
{
skip
=
true
;
}
}
else
{
aConfig
.
mColMaxBSize
=
aConfig
.
mKnownFeasibleBSize
;
}
if
(
!
skip
)
{
MarkPrincipalChildrenDirty
(
this
)
;
feasible
=
ReflowColumns
(
aDesiredSize
aReflowInput
aStatus
aConfig
availableContentBSize
=
=
NS_UNCONSTRAINEDSIZE
&
aOutMargin
aColData
)
;
}
}
aRunWasFeasible
=
feasible
;
}
void
nsColumnSetFrame
:
:
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
{
MarkInReflow
(
)
;
nsPresContext
:
:
InterruptPreventer
noInterrupts
(
aPresContext
)
;
DO_GLOBAL_REFLOW_COUNT
(
"
nsColumnSetFrame
"
)
;
DISPLAY_REFLOW
(
aPresContext
this
aReflowInput
aDesiredSize
aStatus
)
;
MOZ_ASSERT
(
aStatus
.
IsEmpty
(
)
"
Caller
should
pass
a
fresh
reflow
status
!
"
)
;
if
(
aReflowInput
.
ComputedBSize
(
)
!
=
NS_AUTOHEIGHT
)
{
AddStateBits
(
NS_FRAME_CONTAINS_RELATIVE_BSIZE
)
;
}
else
{
RemoveStateBits
(
NS_FRAME_CONTAINS_RELATIVE_BSIZE
)
;
}
#
ifdef
DEBUG
nsFrameList
:
:
Enumerator
oc
(
GetChildList
(
kOverflowContainersList
)
)
;
for
(
;
!
oc
.
AtEnd
(
)
;
oc
.
Next
(
)
)
{
MOZ_ASSERT
(
!
IS_TRUE_OVERFLOW_CONTAINER
(
oc
.
get
(
)
)
)
;
}
nsFrameList
:
:
Enumerator
eoc
(
GetChildList
(
kExcessOverflowContainersList
)
)
;
for
(
;
!
eoc
.
AtEnd
(
)
;
eoc
.
Next
(
)
)
{
MOZ_ASSERT
(
!
IS_TRUE_OVERFLOW_CONTAINER
(
eoc
.
get
(
)
)
)
;
}
#
endif
nsOverflowAreas
ocBounds
;
nsReflowStatus
ocStatus
;
if
(
GetPrevInFlow
(
)
)
{
ReflowOverflowContainerChildren
(
aPresContext
aReflowInput
ocBounds
0
ocStatus
)
;
}
ReflowConfig
config
=
ChooseColumnStrategy
(
aReflowInput
aReflowInput
.
ComputedISize
(
)
=
=
NS_UNCONSTRAINEDSIZE
)
;
nsIFrame
*
nextInFlow
=
GetNextInFlow
(
)
;
bool
unboundedLastColumn
=
config
.
mIsBalancing
&
&
!
nextInFlow
;
nsCollapsingMargin
carriedOutBottomMargin
;
ColumnBalanceData
colData
;
colData
.
mHasExcessBSize
=
false
;
bool
feasible
=
ReflowColumns
(
aDesiredSize
aReflowInput
aStatus
config
unboundedLastColumn
&
carriedOutBottomMargin
colData
)
;
if
(
config
.
mIsBalancing
&
&
!
aPresContext
-
>
HasPendingInterrupt
(
)
)
{
FindBestBalanceBSize
(
aReflowInput
aPresContext
config
colData
aDesiredSize
carriedOutBottomMargin
unboundedLastColumn
feasible
aStatus
)
;
}
if
(
aPresContext
-
>
HasPendingInterrupt
(
)
&
&
aReflowInput
.
AvailableBSize
(
)
=
=
NS_UNCONSTRAINEDSIZE
)
{
aStatus
.
Reset
(
)
;
}
NS_ASSERTION
(
aStatus
.
IsFullyComplete
(
)
|
|
aReflowInput
.
AvailableBSize
(
)
!
=
NS_UNCONSTRAINEDSIZE
"
Column
set
should
be
complete
if
the
available
block
-
size
is
unconstrained
"
)
;
aDesiredSize
.
mOverflowAreas
.
UnionWith
(
ocBounds
)
;
aStatus
.
MergeCompletionStatusFrom
(
ocStatus
)
;
FinishReflowWithAbsoluteFrames
(
aPresContext
aDesiredSize
aReflowInput
aStatus
false
)
;
aDesiredSize
.
mCarriedOutBEndMargin
=
carriedOutBottomMargin
;
NS_FRAME_SET_TRUNCATION
(
aStatus
aReflowInput
aDesiredSize
)
;
}
void
nsColumnSetFrame
:
:
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
DisplayBorderBackgroundOutline
(
aBuilder
aLists
)
;
if
(
IsVisibleForPainting
(
aBuilder
)
)
{
aLists
.
BorderBackground
(
)
-
>
AppendToTop
(
MakeDisplayItem
<
nsDisplayColumnRule
>
(
aBuilder
this
)
)
;
}
for
(
nsFrameList
:
:
Enumerator
e
(
mFrames
)
;
!
e
.
AtEnd
(
)
;
e
.
Next
(
)
)
{
BuildDisplayListForChild
(
aBuilder
e
.
get
(
)
aLists
)
;
}
}
void
nsColumnSetFrame
:
:
AppendDirectlyOwnedAnonBoxes
(
nsTArray
<
OwnedAnonBox
>
&
aResult
)
{
nsIFrame
*
column
=
mFrames
.
FirstChild
(
)
;
if
(
!
column
)
{
return
;
}
MOZ_ASSERT
(
column
-
>
Style
(
)
-
>
GetPseudo
(
)
=
=
nsCSSAnonBoxes
:
:
columnContent
"
What
sort
of
child
is
this
?
"
)
;
aResult
.
AppendElement
(
OwnedAnonBox
(
column
)
)
;
}
#
ifdef
DEBUG
void
nsColumnSetFrame
:
:
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
aChildList
)
{
MOZ_ASSERT
(
aListID
!
=
kPrincipalList
|
|
aChildList
.
OnlyChild
(
)
"
initial
principal
child
list
must
have
exactly
one
child
"
)
;
nsContainerFrame
:
:
SetInitialChildList
(
kPrincipalList
aChildList
)
;
}
void
nsColumnSetFrame
:
:
AppendFrames
(
ChildListID
aListID
nsFrameList
&
aFrameList
)
{
MOZ_CRASH
(
"
unsupported
operation
"
)
;
}
void
nsColumnSetFrame
:
:
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
nsFrameList
&
aFrameList
)
{
MOZ_CRASH
(
"
unsupported
operation
"
)
;
}
void
nsColumnSetFrame
:
:
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
{
MOZ_CRASH
(
"
unsupported
operation
"
)
;
}
#
endif
