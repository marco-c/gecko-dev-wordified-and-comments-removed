#
ifndef
nsColumnSetFrame_h___
#
define
nsColumnSetFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsIFrameInlines
.
h
"
class
nsColumnSetFrame
final
:
public
nsContainerFrame
{
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsColumnSetFrame
)
explicit
nsColumnSetFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
#
ifdef
DEBUG
void
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
aChildList
)
override
;
void
AppendFrames
(
ChildListID
aListID
nsFrameList
&
aFrameList
)
override
;
void
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
nsFrameList
&
aFrameList
)
override
;
void
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
override
;
#
endif
nscoord
GetMinISize
(
gfxContext
*
aRenderingContext
)
override
;
nscoord
GetPrefISize
(
gfxContext
*
aRenderingContext
)
override
;
nscoord
GetAvailableContentBSize
(
const
ReflowInput
&
aReflowInput
)
;
nsContainerFrame
*
GetContentInsertionFrame
(
)
override
{
nsIFrame
*
frame
=
PrincipalChildList
(
)
.
FirstChild
(
)
;
if
(
!
frame
)
return
nullptr
;
return
frame
-
>
GetContentInsertionFrame
(
)
;
}
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsContainerFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eCanContainOverflowContainers
)
)
;
}
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
void
DrainOverflowColumns
(
)
;
void
AppendDirectlyOwnedAnonBoxes
(
nsTArray
<
OwnedAnonBox
>
&
aResult
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
ColumnSet
"
)
aResult
)
;
}
#
endif
nsRect
CalculateColumnRuleBounds
(
const
nsPoint
&
aOffset
)
;
void
CreateBorderRenderers
(
nsTArray
<
nsCSSBorderRenderer
>
&
aBorderRenderers
gfxContext
*
aCtx
const
nsRect
&
aDirtyRect
const
nsPoint
&
aPt
)
;
protected
:
nscoord
mLastBalanceBSize
;
nsReflowStatus
mLastFrameStatus
;
struct
ReflowConfig
{
int32_t
mBalanceColCount
=
INT32_MAX
;
nscoord
mColISize
=
NS_INTRINSICSIZE
;
nscoord
mExpectedISizeLeftOver
=
0
;
nscoord
mColGap
=
NS_INTRINSICSIZE
;
nscoord
mColMaxBSize
=
NS_INTRINSICSIZE
;
bool
mIsBalancing
=
false
;
nscoord
mKnownFeasibleBSize
=
NS_INTRINSICSIZE
;
nscoord
mKnownInfeasibleBSize
=
0
;
nscoord
mComputedBSize
=
NS_INTRINSICSIZE
;
nscoord
mConsumedBSize
=
0
;
}
;
struct
ColumnBalanceData
{
nscoord
mMaxBSize
=
0
;
nscoord
mSumBSize
=
0
;
nscoord
mLastBSize
=
0
;
nscoord
mMaxOverflowingBSize
=
0
;
bool
mHasExcessBSize
=
false
;
bool
mFeasible
=
false
;
}
;
ColumnBalanceData
ReflowColumns
(
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aReflowStatus
ReflowConfig
&
aConfig
bool
aUnboundedLastColumn
)
;
ColumnBalanceData
ReflowChildren
(
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
const
ReflowConfig
&
aConfig
bool
aUnboundedLastColumn
)
;
ReflowConfig
ChooseColumnStrategy
(
const
ReflowInput
&
aReflowInput
bool
aForceAuto
)
;
void
FindBestBalanceBSize
(
const
ReflowInput
&
aReflowInput
nsPresContext
*
aPresContext
ReflowConfig
&
aConfig
ColumnBalanceData
aColData
ReflowOutput
&
aDesiredSize
bool
aUnboundedLastColumn
nsReflowStatus
&
aStatus
)
;
void
ForEachColumnRule
(
const
std
:
:
function
<
void
(
const
nsRect
&
lineRect
)
>
&
aSetLineRect
const
nsPoint
&
aPt
)
;
}
;
#
endif
