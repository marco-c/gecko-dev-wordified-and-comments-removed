#
include
"
nsVideoFrame
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
HTMLImageElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLVideoElement
.
h
"
#
include
"
mozilla
/
dom
/
ShadowRoot
.
h
"
#
include
"
mozilla
/
layers
/
RenderRootStateManager
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsContentCreatorFunctions
.
h
"
#
include
"
nsBoxLayoutState
.
h
"
#
include
"
nsBoxFrame
.
h
"
#
include
"
nsIContentInlines
.
h
"
#
include
"
nsImageFrame
.
h
"
#
include
"
nsIImageLoadingContent
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
nsStyleUtil
.
h
"
#
include
<
algorithm
>
using
namespace
mozilla
;
using
namespace
mozilla
:
:
layers
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
gfx
;
nsIFrame
*
NS_NewHTMLVideoFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsVideoFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsVideoFrame
)
static
Matrix
ComputeRotationMatrix
(
gfxFloat
aRotatedWidth
gfxFloat
aRotatedHeight
VideoInfo
:
:
Rotation
aDegrees
)
{
Matrix
shiftVideoCenterToOrigin
;
if
(
aDegrees
=
=
VideoInfo
:
:
Rotation
:
:
kDegree_90
|
|
aDegrees
=
=
VideoInfo
:
:
Rotation
:
:
kDegree_270
)
{
shiftVideoCenterToOrigin
=
Matrix
:
:
Translation
(
-
aRotatedHeight
/
2
.
0
-
aRotatedWidth
/
2
.
0
)
;
}
else
{
shiftVideoCenterToOrigin
=
Matrix
:
:
Translation
(
-
aRotatedWidth
/
2
.
0
-
aRotatedHeight
/
2
.
0
)
;
}
Matrix
rotation
=
Matrix
:
:
Rotation
(
gfx
:
:
Float
(
aDegrees
/
180
.
0
*
M_PI
)
)
;
Matrix
shiftLeftTopToOrigin
=
Matrix
:
:
Translation
(
aRotatedWidth
/
2
.
0
aRotatedHeight
/
2
.
0
)
;
return
shiftVideoCenterToOrigin
*
rotation
*
shiftLeftTopToOrigin
;
}
static
void
SwapScaleWidthHeightForRotation
(
IntSize
&
aSize
VideoInfo
:
:
Rotation
aDegrees
)
{
if
(
aDegrees
=
=
VideoInfo
:
:
Rotation
:
:
kDegree_90
|
|
aDegrees
=
=
VideoInfo
:
:
Rotation
:
:
kDegree_270
)
{
int32_t
tmpWidth
=
aSize
.
width
;
aSize
.
width
=
aSize
.
height
;
aSize
.
height
=
tmpWidth
;
}
}
nsVideoFrame
:
:
nsVideoFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsContainerFrame
(
aStyle
aPresContext
kClassID
)
{
EnableVisibilityTracking
(
)
;
}
nsVideoFrame
:
:
~
nsVideoFrame
(
)
=
default
;
NS_QUERYFRAME_HEAD
(
nsVideoFrame
)
NS_QUERYFRAME_ENTRY
(
nsVideoFrame
)
NS_QUERYFRAME_ENTRY
(
nsIAnonymousContentCreator
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsContainerFrame
)
nsresult
nsVideoFrame
:
:
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
{
nsNodeInfoManager
*
nodeInfoManager
=
GetContent
(
)
-
>
GetComposedDoc
(
)
-
>
NodeInfoManager
(
)
;
RefPtr
<
NodeInfo
>
nodeInfo
;
if
(
HasVideoElement
(
)
)
{
nodeInfo
=
nodeInfoManager
-
>
GetNodeInfo
(
nsGkAtoms
:
:
img
nullptr
kNameSpaceID_XHTML
nsINode
:
:
ELEMENT_NODE
)
;
NS_ENSURE_TRUE
(
nodeInfo
NS_ERROR_OUT_OF_MEMORY
)
;
mPosterImage
=
NS_NewHTMLImageElement
(
nodeInfo
.
forget
(
)
)
;
NS_ENSURE_TRUE
(
mPosterImage
NS_ERROR_OUT_OF_MEMORY
)
;
HTMLImageElement
*
imgContent
=
HTMLImageElement
:
:
FromNode
(
mPosterImage
)
;
NS_ENSURE_TRUE
(
imgContent
NS_ERROR_FAILURE
)
;
imgContent
-
>
ForceImageState
(
true
0
)
;
mPosterImage
-
>
UpdateState
(
false
)
;
UpdatePosterSource
(
false
)
;
aElements
.
AppendElement
(
mPosterImage
)
;
nodeInfo
=
nodeInfoManager
-
>
GetNodeInfo
(
nsGkAtoms
:
:
div
nullptr
kNameSpaceID_XHTML
nsINode
:
:
ELEMENT_NODE
)
;
NS_ENSURE_TRUE
(
nodeInfo
NS_ERROR_OUT_OF_MEMORY
)
;
mCaptionDiv
=
NS_NewHTMLDivElement
(
nodeInfo
.
forget
(
)
)
;
NS_ENSURE_TRUE
(
mCaptionDiv
NS_ERROR_OUT_OF_MEMORY
)
;
nsGenericHTMLElement
*
div
=
static_cast
<
nsGenericHTMLElement
*
>
(
mCaptionDiv
.
get
(
)
)
;
div
-
>
SetClassName
(
u
"
caption
-
box
"
_ns
)
;
aElements
.
AppendElement
(
mCaptionDiv
)
;
UpdateTextTrack
(
)
;
}
return
NS_OK
;
}
void
nsVideoFrame
:
:
AppendAnonymousContentTo
(
nsTArray
<
nsIContent
*
>
&
aElements
uint32_t
aFliter
)
{
if
(
mPosterImage
)
{
aElements
.
AppendElement
(
mPosterImage
)
;
}
if
(
mCaptionDiv
)
{
aElements
.
AppendElement
(
mCaptionDiv
)
;
}
}
nsIContent
*
nsVideoFrame
:
:
GetVideoControls
(
)
const
{
if
(
!
mContent
-
>
GetShadowRoot
(
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
mContent
-
>
GetShadowRoot
(
)
-
>
IsUAWidget
(
)
)
;
MOZ_ASSERT
(
1
>
=
mContent
-
>
GetShadowRoot
(
)
-
>
GetChildCount
(
)
)
;
return
mContent
-
>
GetShadowRoot
(
)
-
>
GetFirstChild
(
)
;
}
void
nsVideoFrame
:
:
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
{
if
(
mReflowCallbackPosted
)
{
PresShell
(
)
-
>
CancelReflowCallback
(
this
)
;
}
aPostDestroyData
.
AddAnonymousContent
(
mCaptionDiv
.
forget
(
)
)
;
aPostDestroyData
.
AddAnonymousContent
(
mPosterImage
.
forget
(
)
)
;
nsContainerFrame
:
:
DestroyFrom
(
aDestructRoot
aPostDestroyData
)
;
}
class
DispatchResizeEvent
:
public
Runnable
{
public
:
explicit
DispatchResizeEvent
(
nsIContent
*
aContent
const
nsLiteralString
&
aName
)
:
Runnable
(
"
DispatchResizeEvent
"
)
mContent
(
aContent
)
mName
(
aName
)
{
}
NS_IMETHOD
Run
(
)
override
{
nsContentUtils
:
:
DispatchTrustedEvent
(
mContent
-
>
OwnerDoc
(
)
mContent
mName
CanBubble
:
:
eNo
Cancelable
:
:
eNo
)
;
return
NS_OK
;
}
nsCOMPtr
<
nsIContent
>
mContent
;
const
nsLiteralString
mName
;
}
;
bool
nsVideoFrame
:
:
ReflowFinished
(
)
{
mReflowCallbackPosted
=
false
;
auto
GetSize
=
[
&
]
(
nsIContent
*
aContent
)
-
>
Maybe
<
nsSize
>
{
if
(
!
aContent
)
{
return
Nothing
(
)
;
}
nsIFrame
*
f
=
aContent
-
>
GetPrimaryFrame
(
)
;
if
(
!
f
)
{
return
Nothing
(
)
;
}
return
Some
(
f
-
>
GetSize
(
)
)
;
}
;
if
(
auto
size
=
GetSize
(
mCaptionDiv
)
)
{
if
(
*
size
!
=
mCaptionTrackedSize
)
{
mCaptionTrackedSize
=
*
size
;
nsContentUtils
:
:
AddScriptRunner
(
new
DispatchResizeEvent
(
mCaptionDiv
u
"
resizecaption
"
_ns
)
)
;
}
}
nsIContent
*
controls
=
GetVideoControls
(
)
;
if
(
auto
size
=
GetSize
(
controls
)
)
{
if
(
*
size
!
=
mControlsTrackedSize
)
{
mControlsTrackedSize
=
*
size
;
nsContentUtils
:
:
AddScriptRunner
(
new
DispatchResizeEvent
(
controls
u
"
resizevideocontrols
"
_ns
)
)
;
}
}
return
false
;
}
void
nsVideoFrame
:
:
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aMetrics
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
{
MarkInReflow
(
)
;
DO_GLOBAL_REFLOW_COUNT
(
"
nsVideoFrame
"
)
;
DISPLAY_REFLOW
(
aPresContext
this
aReflowInput
aMetrics
aStatus
)
;
MOZ_ASSERT
(
aStatus
.
IsEmpty
(
)
"
Caller
should
pass
a
fresh
reflow
status
!
"
)
;
NS_FRAME_TRACE
(
NS_FRAME_TRACE_CALLS
(
"
enter
nsVideoFrame
:
:
Reflow
:
availSize
=
%
d
%
d
"
aReflowInput
.
AvailableWidth
(
)
aReflowInput
.
AvailableHeight
(
)
)
)
;
MOZ_ASSERT
(
mState
&
NS_FRAME_IN_REFLOW
"
frame
is
not
in
reflow
"
)
;
const
WritingMode
myWM
=
aReflowInput
.
GetWritingMode
(
)
;
nscoord
contentBoxBSize
=
aReflowInput
.
ComputedBSize
(
)
;
const
auto
logicalBP
=
aReflowInput
.
ComputedLogicalBorderPadding
(
myWM
)
;
const
nscoord
borderBoxISize
=
aReflowInput
.
ComputedISize
(
)
+
logicalBP
.
IStartEnd
(
myWM
)
;
const
bool
isBSizeShrinkWrapping
=
(
contentBoxBSize
=
=
NS_UNCONSTRAINEDSIZE
)
;
nscoord
borderBoxBSize
;
if
(
!
isBSizeShrinkWrapping
)
{
borderBoxBSize
=
contentBoxBSize
+
logicalBP
.
BStartEnd
(
myWM
)
;
}
nsMargin
borderPadding
=
aReflowInput
.
ComputedPhysicalBorderPadding
(
)
;
nsIContent
*
videoControlsDiv
=
GetVideoControls
(
)
;
for
(
nsIFrame
*
child
:
mFrames
)
{
nsSize
oldChildSize
=
child
-
>
GetSize
(
)
;
nsReflowStatus
childStatus
;
if
(
child
-
>
GetContent
(
)
=
=
mPosterImage
)
{
nsImageFrame
*
imageFrame
=
static_cast
<
nsImageFrame
*
>
(
child
)
;
ReflowOutput
kidDesiredSize
(
aReflowInput
)
;
WritingMode
wm
=
imageFrame
-
>
GetWritingMode
(
)
;
LogicalSize
availableSize
=
aReflowInput
.
AvailableSize
(
wm
)
;
availableSize
.
BSize
(
wm
)
=
NS_UNCONSTRAINEDSIZE
;
LogicalSize
cbSize
=
aMetrics
.
Size
(
aMetrics
.
GetWritingMode
(
)
)
.
ConvertTo
(
wm
aMetrics
.
GetWritingMode
(
)
)
;
ReflowInput
kidReflowInput
(
aPresContext
aReflowInput
imageFrame
availableSize
Some
(
cbSize
)
)
;
nsRect
posterRenderRect
;
if
(
ShouldDisplayPoster
(
)
)
{
posterRenderRect
=
nsRect
(
nsPoint
(
borderPadding
.
left
borderPadding
.
top
)
nsSize
(
aReflowInput
.
ComputedWidth
(
)
aReflowInput
.
ComputedHeight
(
)
)
)
;
}
kidReflowInput
.
SetComputedWidth
(
posterRenderRect
.
width
)
;
kidReflowInput
.
SetComputedHeight
(
posterRenderRect
.
height
)
;
ReflowChild
(
imageFrame
aPresContext
kidDesiredSize
kidReflowInput
posterRenderRect
.
x
posterRenderRect
.
y
ReflowChildFlags
:
:
Default
childStatus
)
;
MOZ_ASSERT
(
childStatus
.
IsFullyComplete
(
)
"
We
gave
our
child
unconstrained
available
block
-
size
"
"
so
it
should
be
complete
!
"
)
;
FinishReflowChild
(
imageFrame
aPresContext
kidDesiredSize
&
kidReflowInput
posterRenderRect
.
x
posterRenderRect
.
y
ReflowChildFlags
:
:
Default
)
;
}
else
if
(
child
-
>
GetContent
(
)
=
=
mCaptionDiv
|
|
child
-
>
GetContent
(
)
=
=
videoControlsDiv
)
{
WritingMode
wm
=
child
-
>
GetWritingMode
(
)
;
LogicalSize
availableSize
=
aReflowInput
.
ComputedSize
(
wm
)
;
availableSize
.
BSize
(
wm
)
=
NS_UNCONSTRAINEDSIZE
;
ReflowInput
kidReflowInput
(
aPresContext
aReflowInput
child
availableSize
)
;
ReflowOutput
kidDesiredSize
(
kidReflowInput
)
;
ReflowChild
(
child
aPresContext
kidDesiredSize
kidReflowInput
borderPadding
.
left
borderPadding
.
top
ReflowChildFlags
:
:
Default
childStatus
)
;
MOZ_ASSERT
(
childStatus
.
IsFullyComplete
(
)
"
We
gave
our
child
unconstrained
available
block
-
size
"
"
so
it
should
be
complete
!
"
)
;
if
(
child
-
>
GetContent
(
)
=
=
videoControlsDiv
&
&
isBSizeShrinkWrapping
)
{
if
(
aReflowInput
.
mStyleDisplay
-
>
GetContainSizeAxes
(
)
.
mBContained
)
{
contentBoxBSize
=
0
;
}
else
{
contentBoxBSize
=
myWM
.
IsOrthogonalTo
(
wm
)
?
kidDesiredSize
.
ISize
(
wm
)
:
kidDesiredSize
.
BSize
(
wm
)
;
}
}
FinishReflowChild
(
child
aPresContext
kidDesiredSize
&
kidReflowInput
borderPadding
.
left
borderPadding
.
top
ReflowChildFlags
:
:
Default
)
;
if
(
child
-
>
GetSize
(
)
!
=
oldChildSize
)
{
MOZ_ASSERT
(
child
-
>
IsPrimaryFrame
(
)
|
|
PresContext
(
)
-
>
IsPrintingOrPrintPreview
(
)
"
We
only
look
at
the
primary
frame
in
ReflowFinished
"
)
;
if
(
!
mReflowCallbackPosted
)
{
mReflowCallbackPosted
=
true
;
PresShell
(
)
-
>
PostReflowCallback
(
this
)
;
}
}
}
else
{
NS_ERROR
(
"
Unexpected
extra
child
frame
in
nsVideoFrame
;
skipping
"
)
;
}
}
if
(
isBSizeShrinkWrapping
)
{
if
(
contentBoxBSize
=
=
NS_UNCONSTRAINEDSIZE
)
{
contentBoxBSize
=
0
;
}
contentBoxBSize
=
NS_CSS_MINMAX
(
contentBoxBSize
aReflowInput
.
ComputedMinBSize
(
)
aReflowInput
.
ComputedMaxBSize
(
)
)
;
borderBoxBSize
=
contentBoxBSize
+
logicalBP
.
BStartEnd
(
myWM
)
;
}
LogicalSize
logicalDesiredSize
(
myWM
borderBoxISize
borderBoxBSize
)
;
aMetrics
.
SetSize
(
myWM
logicalDesiredSize
)
;
aMetrics
.
SetOverflowAreasToDesiredBounds
(
)
;
FinishAndStoreOverflow
(
&
aMetrics
)
;
NS_FRAME_TRACE
(
NS_FRAME_TRACE_CALLS
(
"
exit
nsVideoFrame
:
:
Reflow
:
size
=
%
d
%
d
"
aMetrics
.
Width
(
)
aMetrics
.
Height
(
)
)
)
;
MOZ_ASSERT
(
aStatus
.
IsEmpty
(
)
"
This
type
of
frame
can
'
t
be
split
.
"
)
;
NS_FRAME_SET_TRUNCATION
(
aStatus
aReflowInput
aMetrics
)
;
}
#
ifdef
ACCESSIBILITY
a11y
:
:
AccType
nsVideoFrame
:
:
AccessibleType
(
)
{
return
a11y
:
:
eHTMLMediaType
;
}
#
endif
#
ifdef
DEBUG_FRAME_DUMP
nsresult
nsVideoFrame
:
:
GetFrameName
(
nsAString
&
aResult
)
const
{
return
MakeFrameName
(
u
"
HTMLVideo
"
_ns
aResult
)
;
}
#
endif
nsIFrame
:
:
SizeComputationResult
nsVideoFrame
:
:
ComputeSize
(
gfxContext
*
aRenderingContext
WritingMode
aWM
const
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
LogicalSize
&
aMargin
const
LogicalSize
&
aBorderPadding
const
StyleSizeOverrides
&
aSizeOverrides
ComputeSizeFlags
aFlags
)
{
if
(
!
HasVideoElement
(
)
)
{
return
nsContainerFrame
:
:
ComputeSize
(
aRenderingContext
aWM
aCBSize
aAvailableISize
aMargin
aBorderPadding
aSizeOverrides
aFlags
)
;
}
return
{
ComputeSizeWithIntrinsicDimensions
(
aRenderingContext
aWM
GetIntrinsicSize
(
)
GetAspectRatio
(
)
aCBSize
aMargin
aBorderPadding
aSizeOverrides
aFlags
)
AspectRatioUsage
:
:
None
}
;
}
nscoord
nsVideoFrame
:
:
GetMinISize
(
gfxContext
*
aRenderingContext
)
{
nscoord
result
;
DISPLAY_MIN_INLINE_SIZE
(
this
result
)
;
nsSize
size
;
const
auto
wm
=
GetWritingMode
(
)
;
if
(
HasVideoElement
(
)
)
{
size
=
GetVideoIntrinsicSize
(
)
;
}
else
{
const
auto
containAxes
=
StyleDisplay
(
)
-
>
GetContainSizeAxes
(
)
;
if
(
containAxes
.
IsBoth
(
)
|
|
!
mFrames
.
LastChild
(
)
)
{
size
=
nsSize
(
)
;
}
else
{
size
=
containAxes
.
ContainSize
(
kFallbackIntrinsicSize
wm
)
;
}
}
result
=
wm
.
IsVertical
(
)
?
size
.
height
:
size
.
width
;
return
result
;
}
nscoord
nsVideoFrame
:
:
GetPrefISize
(
gfxContext
*
aRenderingContext
)
{
return
GetMinISize
(
aRenderingContext
)
;
}
Maybe
<
nsSize
>
nsVideoFrame
:
:
PosterImageSize
(
)
const
{
nsIFrame
*
child
=
GetPosterImage
(
)
-
>
GetPrimaryFrame
(
)
;
return
child
-
>
GetIntrinsicSize
(
)
.
ToSize
(
)
;
}
AspectRatio
nsVideoFrame
:
:
GetIntrinsicRatio
(
)
const
{
if
(
!
HasVideoElement
(
)
)
{
return
AspectRatio
(
)
;
}
if
(
StyleDisplay
(
)
-
>
GetContainSizeAxes
(
)
.
IsAny
(
)
)
{
return
AspectRatio
(
)
;
}
HTMLVideoElement
*
element
=
static_cast
<
HTMLVideoElement
*
>
(
GetContent
(
)
)
;
if
(
Maybe
<
CSSIntSize
>
size
=
element
-
>
GetVideoSize
(
)
)
{
return
AspectRatio
:
:
FromSize
(
*
size
)
;
}
if
(
ShouldDisplayPoster
(
)
)
{
if
(
Maybe
<
nsSize
>
imgSize
=
PosterImageSize
(
)
)
{
return
AspectRatio
:
:
FromSize
(
*
imgSize
)
;
}
}
return
AspectRatio
:
:
FromSize
(
kFallbackIntrinsicSizeInPixels
)
;
}
bool
nsVideoFrame
:
:
ShouldDisplayPoster
(
)
const
{
if
(
!
HasVideoElement
(
)
)
return
false
;
HTMLVideoElement
*
element
=
static_cast
<
HTMLVideoElement
*
>
(
GetContent
(
)
)
;
if
(
element
-
>
GetPlayedOrSeeked
(
)
&
&
HasVideoData
(
)
)
return
false
;
nsCOMPtr
<
nsIImageLoadingContent
>
imgContent
=
do_QueryInterface
(
mPosterImage
)
;
NS_ENSURE_TRUE
(
imgContent
false
)
;
nsCOMPtr
<
imgIRequest
>
request
;
nsresult
res
=
imgContent
-
>
GetRequest
(
nsIImageLoadingContent
:
:
CURRENT_REQUEST
getter_AddRefs
(
request
)
)
;
if
(
NS_FAILED
(
res
)
|
|
!
request
)
{
return
false
;
}
uint32_t
status
=
0
;
res
=
request
-
>
GetImageStatus
(
&
status
)
;
if
(
NS_FAILED
(
res
)
|
|
(
status
&
imgIRequest
:
:
STATUS_ERROR
)
)
return
false
;
return
true
;
}
nsSize
nsVideoFrame
:
:
GetVideoIntrinsicSize
(
)
const
{
if
(
!
HasVideoElement
(
)
)
{
return
nsSize
(
0
0
)
;
}
const
auto
containAxes
=
StyleDisplay
(
)
-
>
GetContainSizeAxes
(
)
;
if
(
containAxes
.
IsBoth
(
)
)
{
return
nsSize
(
0
0
)
;
}
HTMLVideoElement
*
element
=
static_cast
<
HTMLVideoElement
*
>
(
GetContent
(
)
)
;
if
(
Maybe
<
CSSIntSize
>
size
=
element
-
>
GetVideoSize
(
)
)
{
return
containAxes
.
ContainSize
(
CSSPixel
:
:
ToAppUnits
(
*
size
)
GetWritingMode
(
)
)
;
}
if
(
ShouldDisplayPoster
(
)
)
{
if
(
Maybe
<
nsSize
>
imgSize
=
PosterImageSize
(
)
)
{
return
containAxes
.
ContainSize
(
*
imgSize
GetWritingMode
(
)
)
;
}
}
return
containAxes
.
ContainSize
(
kFallbackIntrinsicSize
GetWritingMode
(
)
)
;
}
IntrinsicSize
nsVideoFrame
:
:
GetIntrinsicSize
(
)
{
return
IntrinsicSize
(
GetVideoIntrinsicSize
(
)
)
;
}
void
nsVideoFrame
:
:
UpdatePosterSource
(
bool
aNotify
)
{
NS_ASSERTION
(
HasVideoElement
(
)
"
Only
call
this
on
<
video
>
elements
.
"
)
;
HTMLVideoElement
*
element
=
static_cast
<
HTMLVideoElement
*
>
(
GetContent
(
)
)
;
if
(
element
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
poster
)
&
&
!
element
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
poster
nsGkAtoms
:
:
_empty
eIgnoreCase
)
)
{
nsAutoString
posterStr
;
element
-
>
GetPoster
(
posterStr
)
;
mPosterImage
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
src
posterStr
aNotify
)
;
}
else
{
mPosterImage
-
>
UnsetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
src
aNotify
)
;
}
}
nsresult
nsVideoFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
poster
&
&
HasVideoElement
(
)
)
{
UpdatePosterSource
(
true
)
;
}
return
nsContainerFrame
:
:
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
}
void
nsVideoFrame
:
:
OnVisibilityChange
(
Visibility
aNewVisibility
const
Maybe
<
OnNonvisible
>
&
aNonvisibleAction
)
{
if
(
HasVideoElement
(
)
)
{
static_cast
<
HTMLMediaElement
*
>
(
GetContent
(
)
)
-
>
OnVisibilityChange
(
aNewVisibility
)
;
}
nsCOMPtr
<
nsIImageLoadingContent
>
imageLoader
=
do_QueryInterface
(
mPosterImage
)
;
if
(
imageLoader
)
{
imageLoader
-
>
OnVisibilityChange
(
aNewVisibility
aNonvisibleAction
)
;
}
nsContainerFrame
:
:
OnVisibilityChange
(
aNewVisibility
aNonvisibleAction
)
;
}
bool
nsVideoFrame
:
:
HasVideoElement
(
)
const
{
return
static_cast
<
HTMLMediaElement
*
>
(
GetContent
(
)
)
-
>
IsVideo
(
)
;
}
bool
nsVideoFrame
:
:
HasVideoData
(
)
const
{
if
(
!
HasVideoElement
(
)
)
{
return
false
;
}
auto
*
element
=
static_cast
<
HTMLVideoElement
*
>
(
GetContent
(
)
)
;
return
element
-
>
GetVideoSize
(
)
.
isSome
(
)
;
}
void
nsVideoFrame
:
:
UpdateTextTrack
(
)
{
static_cast
<
HTMLMediaElement
*
>
(
GetContent
(
)
)
-
>
NotifyCueDisplayStatesChanged
(
)
;
}
namespace
mozilla
{
class
nsDisplayVideo
:
public
nsPaintedDisplayItem
{
public
:
nsDisplayVideo
(
nsDisplayListBuilder
*
aBuilder
nsVideoFrame
*
aFrame
)
:
nsPaintedDisplayItem
(
aBuilder
aFrame
)
{
MOZ_COUNT_CTOR
(
nsDisplayVideo
)
;
}
MOZ_COUNTED_DTOR_OVERRIDE
(
nsDisplayVideo
)
NS_DISPLAY_DECL_NAME
(
"
Video
"
TYPE_VIDEO
)
already_AddRefed
<
ImageContainer
>
GetImageContainer
(
gfxRect
&
aDestGFXRect
)
{
nsRect
area
=
Frame
(
)
-
>
GetContentRectRelativeToSelf
(
)
+
ToReferenceFrame
(
)
;
HTMLVideoElement
*
element
=
static_cast
<
HTMLVideoElement
*
>
(
Frame
(
)
-
>
GetContent
(
)
)
;
Maybe
<
CSSIntSize
>
videoSizeInPx
=
element
-
>
GetVideoSize
(
)
;
if
(
videoSizeInPx
.
isNothing
(
)
|
|
area
.
IsEmpty
(
)
)
{
return
nullptr
;
}
RefPtr
<
ImageContainer
>
container
=
element
-
>
GetImageContainer
(
)
;
if
(
!
container
)
{
return
nullptr
;
}
mozilla
:
:
gfx
:
:
IntSize
frameSize
=
container
-
>
GetCurrentSize
(
)
;
if
(
frameSize
.
width
=
=
0
|
|
frameSize
.
height
=
=
0
)
{
return
nullptr
;
}
const
auto
aspectRatio
=
AspectRatio
:
:
FromSize
(
*
videoSizeInPx
)
;
const
IntrinsicSize
intrinsicSize
(
CSSPixel
:
:
ToAppUnits
(
*
videoSizeInPx
)
)
;
nsRect
dest
=
nsLayoutUtils
:
:
ComputeObjectDestRect
(
area
intrinsicSize
aspectRatio
Frame
(
)
-
>
StylePosition
(
)
)
;
aDestGFXRect
=
Frame
(
)
-
>
PresContext
(
)
-
>
AppUnitsToGfxUnits
(
dest
)
;
aDestGFXRect
.
Round
(
)
;
if
(
aDestGFXRect
.
IsEmpty
(
)
)
{
return
nullptr
;
}
return
container
.
forget
(
)
;
}
virtual
bool
CreateWebRenderCommands
(
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
mozilla
:
:
layers
:
:
StackingContextHelper
&
aSc
mozilla
:
:
layers
:
:
RenderRootStateManager
*
aManager
nsDisplayListBuilder
*
aDisplayListBuilder
)
override
{
HTMLVideoElement
*
element
=
static_cast
<
HTMLVideoElement
*
>
(
Frame
(
)
-
>
GetContent
(
)
)
;
gfxRect
destGFXRect
;
RefPtr
<
ImageContainer
>
container
=
GetImageContainer
(
destGFXRect
)
;
if
(
!
container
)
{
return
true
;
}
container
-
>
SetRotation
(
element
-
>
RotationDegrees
(
)
)
;
LayoutDeviceRect
rect
(
destGFXRect
.
x
destGFXRect
.
y
destGFXRect
.
width
destGFXRect
.
height
)
;
aManager
-
>
CommandBuilder
(
)
.
PushImage
(
this
container
aBuilder
aResources
aSc
rect
rect
)
;
return
true
;
}
virtual
nsRect
GetBounds
(
nsDisplayListBuilder
*
aBuilder
bool
*
aSnap
)
const
override
{
*
aSnap
=
true
;
nsIFrame
*
f
=
Frame
(
)
;
return
f
-
>
GetContentRectRelativeToSelf
(
)
+
ToReferenceFrame
(
)
;
}
bool
IsContentful
(
)
const
override
{
nsVideoFrame
*
f
=
static_cast
<
nsVideoFrame
*
>
(
Frame
(
)
)
;
HTMLVideoElement
*
video
=
HTMLVideoElement
:
:
FromNode
(
f
-
>
GetContent
(
)
)
;
return
video
-
>
VideoWidth
(
)
>
0
;
}
virtual
void
Paint
(
nsDisplayListBuilder
*
aBuilder
gfxContext
*
aCtx
)
override
{
HTMLVideoElement
*
element
=
static_cast
<
HTMLVideoElement
*
>
(
Frame
(
)
-
>
GetContent
(
)
)
;
gfxRect
destGFXRect
;
RefPtr
<
ImageContainer
>
container
=
GetImageContainer
(
destGFXRect
)
;
if
(
!
container
)
{
return
;
}
VideoInfo
:
:
Rotation
rotationDeg
=
element
-
>
RotationDegrees
(
)
;
Matrix
preTransform
=
ComputeRotationMatrix
(
destGFXRect
.
Width
(
)
destGFXRect
.
Height
(
)
rotationDeg
)
;
Matrix
transform
=
preTransform
*
Matrix
:
:
Translation
(
destGFXRect
.
x
destGFXRect
.
y
)
;
AutoLockImage
autoLock
(
container
)
;
Image
*
image
=
autoLock
.
GetImage
(
TimeStamp
:
:
Now
(
)
)
;
if
(
!
image
)
{
return
;
}
RefPtr
<
gfx
:
:
SourceSurface
>
surface
=
image
-
>
GetAsSourceSurface
(
)
;
if
(
!
surface
|
|
!
surface
-
>
IsValid
(
)
)
{
return
;
}
gfx
:
:
IntSize
size
=
surface
-
>
GetSize
(
)
;
IntSize
scaleToSize
(
static_cast
<
int32_t
>
(
destGFXRect
.
Width
(
)
)
static_cast
<
int32_t
>
(
destGFXRect
.
Height
(
)
)
)
;
SwapScaleWidthHeightForRotation
(
scaleToSize
rotationDeg
)
;
transform
.
PreScale
(
scaleToSize
.
width
/
double
(
size
.
Width
(
)
)
scaleToSize
.
height
/
double
(
size
.
Height
(
)
)
)
;
gfxContextMatrixAutoSaveRestore
saveMatrix
(
aCtx
)
;
aCtx
-
>
SetMatrix
(
gfxUtils
:
:
SnapTransformTranslation
(
aCtx
-
>
CurrentMatrix
(
)
nullptr
)
)
;
transform
=
gfxUtils
:
:
SnapTransform
(
transform
gfxRect
(
0
0
size
.
width
size
.
height
)
nullptr
)
;
aCtx
-
>
Multiply
(
ThebesMatrix
(
transform
)
)
;
aCtx
-
>
GetDrawTarget
(
)
-
>
FillRect
(
Rect
(
0
0
size
.
width
size
.
height
)
SurfacePattern
(
surface
ExtendMode
:
:
CLAMP
Matrix
(
)
nsLayoutUtils
:
:
GetSamplingFilterForFrame
(
Frame
(
)
)
)
DrawOptions
(
)
)
;
}
}
;
}
void
nsVideoFrame
:
:
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
if
(
!
IsVisibleForPainting
(
)
)
return
;
DO_GLOBAL_REFLOW_COUNT_DSP
(
"
nsVideoFrame
"
)
;
DisplayBorderBackgroundOutline
(
aBuilder
aLists
)
;
if
(
IsContentHidden
(
)
)
{
return
;
}
const
bool
shouldDisplayPoster
=
ShouldDisplayPoster
(
)
;
uint32_t
clipFlags
;
if
(
shouldDisplayPoster
|
|
!
nsStyleUtil
:
:
ObjectPropsMightCauseOverflow
(
StylePosition
(
)
)
)
{
clipFlags
=
DisplayListClipState
:
:
ASSUME_DRAWING_RESTRICTED_TO_CONTENT_RECT
;
}
else
{
clipFlags
=
0
;
}
DisplayListClipState
:
:
AutoClipContainingBlockDescendantsToContentBox
clip
(
aBuilder
this
clipFlags
)
;
if
(
HasVideoElement
(
)
&
&
!
shouldDisplayPoster
)
{
aLists
.
Content
(
)
-
>
AppendNewToTop
<
nsDisplayVideo
>
(
aBuilder
this
)
;
}
for
(
nsIFrame
*
child
:
mFrames
)
{
if
(
child
-
>
GetContent
(
)
!
=
mPosterImage
|
|
shouldDisplayPoster
|
|
child
-
>
IsBoxFrame
(
)
)
{
nsDisplayListBuilder
:
:
AutoBuildingDisplayList
buildingForChild
(
aBuilder
child
aBuilder
-
>
GetVisibleRect
(
)
-
child
-
>
GetOffsetTo
(
this
)
aBuilder
-
>
GetDirtyRect
(
)
-
child
-
>
GetOffsetTo
(
this
)
)
;
child
-
>
BuildDisplayListForStackingContext
(
aBuilder
aLists
.
Content
(
)
)
;
}
}
}
