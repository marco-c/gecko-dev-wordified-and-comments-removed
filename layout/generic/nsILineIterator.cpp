#
include
"
nsILineIterator
.
h
"
#
include
"
nsIFrame
.
h
"
namespace
mozilla
{
void
LineFrameFinder
:
:
Scan
(
nsIFrame
*
aFrame
)
{
if
(
mDone
)
{
return
;
}
if
(
!
mFirstFrame
)
{
mFirstFrame
=
aFrame
;
}
const
LogicalRect
rect
=
aFrame
-
>
GetLogicalRect
(
mWM
mContainerSize
)
;
if
(
rect
.
ISize
(
mWM
)
=
=
0
)
{
return
;
}
if
(
rect
.
IStart
(
mWM
)
<
=
mPos
.
I
(
mWM
)
&
&
rect
.
IEnd
(
mWM
)
>
mPos
.
I
(
mWM
)
)
{
mClosestFromStart
=
mClosestFromEnd
=
aFrame
;
mDone
=
true
;
return
;
}
if
(
rect
.
IStart
(
mWM
)
<
mPos
.
I
(
mWM
)
)
{
if
(
!
mClosestFromStart
|
|
rect
.
IEnd
(
mWM
)
>
mClosestFromStart
-
>
GetLogicalRect
(
mWM
mContainerSize
)
.
IEnd
(
mWM
)
)
{
mClosestFromStart
=
aFrame
;
}
}
else
{
if
(
!
mClosestFromEnd
|
|
rect
.
IStart
(
mWM
)
<
mClosestFromEnd
-
>
GetLogicalRect
(
mWM
mContainerSize
)
.
IStart
(
mWM
)
)
{
mClosestFromEnd
=
aFrame
;
}
}
}
void
LineFrameFinder
:
:
Finish
(
nsIFrame
*
*
aFrameFound
bool
*
aPosIsBeforeFirstFrame
bool
*
aPosIsAfterLastFrame
)
{
if
(
!
mClosestFromStart
&
&
!
mClosestFromEnd
)
{
mClosestFromStart
=
mClosestFromEnd
=
mFirstFrame
;
}
*
aPosIsBeforeFirstFrame
=
mIsReversed
?
!
mClosestFromEnd
:
!
mClosestFromStart
;
*
aPosIsAfterLastFrame
=
mIsReversed
?
!
mClosestFromStart
:
!
mClosestFromEnd
;
if
(
mClosestFromStart
=
=
mClosestFromEnd
)
{
*
aFrameFound
=
mClosestFromStart
;
}
else
if
(
!
mClosestFromStart
)
{
*
aFrameFound
=
mClosestFromEnd
;
}
else
if
(
!
mClosestFromEnd
)
{
*
aFrameFound
=
mClosestFromStart
;
}
else
{
nscoord
delta
=
mClosestFromEnd
-
>
GetLogicalRect
(
mWM
mContainerSize
)
.
IStart
(
mWM
)
-
mClosestFromStart
-
>
GetLogicalRect
(
mWM
mContainerSize
)
.
IEnd
(
mWM
)
;
if
(
mPos
.
I
(
mWM
)
<
mClosestFromStart
-
>
GetLogicalRect
(
mWM
mContainerSize
)
.
IEnd
(
mWM
)
+
delta
/
2
)
{
*
aFrameFound
=
mClosestFromStart
;
}
else
{
*
aFrameFound
=
mClosestFromEnd
;
}
}
}
}
