#
include
"
nsFirstLetterFrame
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsLineLayout
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
nsFrameManager
.
h
"
#
include
"
mozilla
/
RestyleManager
.
h
"
#
include
"
nsPlaceholderFrame
.
h
"
#
include
"
nsCSSFrameConstructor
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
layout
;
nsFirstLetterFrame
*
NS_NewFirstLetterFrame
(
nsIPresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsFirstLetterFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsFirstLetterFrame
)
NS_QUERYFRAME_HEAD
(
nsFirstLetterFrame
)
NS_QUERYFRAME_ENTRY
(
nsFirstLetterFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsContainerFrame
)
#
ifdef
DEBUG_FRAME_DUMP
nsresult
nsFirstLetterFrame
:
:
GetFrameName
(
nsAString
&
aResult
)
const
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
Letter
"
)
aResult
)
;
}
#
endif
void
nsFirstLetterFrame
:
:
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
BuildDisplayListForInline
(
aBuilder
aLists
)
;
}
void
nsFirstLetterFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
RefPtr
<
ComputedStyle
>
newSC
;
if
(
aPrevInFlow
)
{
nsIFrame
*
styleParent
=
CorrectStyleParentFrame
(
aParent
nsCSSPseudoElements
:
:
firstLetter
(
)
)
;
ComputedStyle
*
parentComputedStyle
=
styleParent
-
>
Style
(
)
;
newSC
=
PresContext
(
)
-
>
StyleSet
(
)
-
>
ResolveStyleForFirstLetterContinuation
(
parentComputedStyle
)
;
SetComputedStyleWithoutNotification
(
newSC
)
;
}
nsContainerFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
}
void
nsFirstLetterFrame
:
:
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
aChildList
)
{
MOZ_ASSERT
(
aListID
=
=
kPrincipalList
"
Principal
child
list
is
the
only
"
"
list
that
nsFirstLetterFrame
should
set
via
this
function
"
)
;
for
(
nsIFrame
*
f
:
aChildList
)
{
MOZ_ASSERT
(
f
-
>
GetParent
(
)
=
=
this
"
Unexpected
parent
"
)
;
MOZ_ASSERT
(
f
-
>
IsTextFrame
(
)
"
We
should
not
have
kids
that
are
containers
!
"
)
;
nsLayoutUtils
:
:
MarkDescendantsDirty
(
f
)
;
}
mFrames
.
SetFrames
(
aChildList
)
;
}
nsresult
nsFirstLetterFrame
:
:
GetChildFrameContainingOffset
(
int32_t
inContentOffset
bool
inHint
int32_t
*
outFrameContentOffset
nsIFrame
*
*
outChildFrame
)
{
nsIFrame
*
kid
=
mFrames
.
FirstChild
(
)
;
if
(
kid
)
{
return
kid
-
>
GetChildFrameContainingOffset
(
inContentOffset
inHint
outFrameContentOffset
outChildFrame
)
;
}
else
{
return
nsFrame
:
:
GetChildFrameContainingOffset
(
inContentOffset
inHint
outFrameContentOffset
outChildFrame
)
;
}
}
void
nsFirstLetterFrame
:
:
AddInlineMinISize
(
gfxContext
*
aRenderingContext
nsIFrame
:
:
InlineMinISizeData
*
aData
)
{
DoInlineIntrinsicISize
(
aRenderingContext
aData
nsLayoutUtils
:
:
MIN_ISIZE
)
;
}
void
nsFirstLetterFrame
:
:
AddInlinePrefISize
(
gfxContext
*
aRenderingContext
nsIFrame
:
:
InlinePrefISizeData
*
aData
)
{
DoInlineIntrinsicISize
(
aRenderingContext
aData
nsLayoutUtils
:
:
PREF_ISIZE
)
;
aData
-
>
mLineIsEmpty
=
false
;
}
nscoord
nsFirstLetterFrame
:
:
GetMinISize
(
gfxContext
*
aRenderingContext
)
{
return
nsLayoutUtils
:
:
MinISizeFromInline
(
this
aRenderingContext
)
;
}
nscoord
nsFirstLetterFrame
:
:
GetPrefISize
(
gfxContext
*
aRenderingContext
)
{
return
nsLayoutUtils
:
:
PrefISizeFromInline
(
this
aRenderingContext
)
;
}
LogicalSize
nsFirstLetterFrame
:
:
ComputeSize
(
gfxContext
*
aRenderingContext
WritingMode
aWM
const
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
LogicalSize
&
aMargin
const
LogicalSize
&
aBorder
const
LogicalSize
&
aPadding
ComputeSizeFlags
aFlags
)
{
if
(
GetPrevInFlow
(
)
)
{
return
LogicalSize
(
aWM
NS_UNCONSTRAINEDSIZE
NS_UNCONSTRAINEDSIZE
)
;
}
return
nsContainerFrame
:
:
ComputeSize
(
aRenderingContext
aWM
aCBSize
aAvailableISize
aMargin
aBorder
aPadding
aFlags
)
;
}
void
nsFirstLetterFrame
:
:
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aMetrics
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aReflowStatus
)
{
MarkInReflow
(
)
;
DO_GLOBAL_REFLOW_COUNT
(
"
nsFirstLetterFrame
"
)
;
DISPLAY_REFLOW
(
aPresContext
this
aReflowInput
aMetrics
aReflowStatus
)
;
MOZ_ASSERT
(
aReflowStatus
.
IsEmpty
(
)
"
Caller
should
pass
a
fresh
reflow
status
!
"
)
;
DrainOverflowFrames
(
aPresContext
)
;
nsIFrame
*
kid
=
mFrames
.
FirstChild
(
)
;
WritingMode
wm
=
aReflowInput
.
GetWritingMode
(
)
;
LogicalSize
availSize
=
aReflowInput
.
AvailableSize
(
)
;
const
LogicalMargin
&
bp
=
aReflowInput
.
ComputedLogicalBorderPadding
(
)
;
NS_ASSERTION
(
availSize
.
ISize
(
wm
)
!
=
NS_UNCONSTRAINEDSIZE
"
should
no
longer
use
unconstrained
inline
size
"
)
;
availSize
.
ISize
(
wm
)
-
=
bp
.
IStartEnd
(
wm
)
;
if
(
NS_UNCONSTRAINEDSIZE
!
=
availSize
.
BSize
(
wm
)
)
{
availSize
.
BSize
(
wm
)
-
=
bp
.
BStartEnd
(
wm
)
;
}
WritingMode
lineWM
=
aMetrics
.
GetWritingMode
(
)
;
ReflowOutput
kidMetrics
(
lineWM
)
;
if
(
!
aReflowInput
.
mLineLayout
)
{
WritingMode
kidWritingMode
=
WritingModeForLine
(
wm
kid
)
;
LogicalSize
kidAvailSize
=
availSize
.
ConvertTo
(
kidWritingMode
wm
)
;
ReflowInput
rs
(
aPresContext
aReflowInput
kid
kidAvailSize
)
;
nsLineLayout
ll
(
aPresContext
nullptr
&
aReflowInput
nullptr
nullptr
)
;
ll
.
BeginLineReflow
(
bp
.
IStart
(
wm
)
bp
.
BStart
(
wm
)
availSize
.
ISize
(
wm
)
NS_UNCONSTRAINEDSIZE
false
true
kidWritingMode
nsSize
(
aReflowInput
.
AvailableWidth
(
)
aReflowInput
.
AvailableHeight
(
)
)
)
;
rs
.
mLineLayout
=
&
ll
;
ll
.
SetInFirstLetter
(
true
)
;
ll
.
SetFirstLetterStyleOK
(
true
)
;
kid
-
>
Reflow
(
aPresContext
kidMetrics
rs
aReflowStatus
)
;
ll
.
EndLineReflow
(
)
;
ll
.
SetInFirstLetter
(
false
)
;
mBaseline
=
kidMetrics
.
BlockStartAscent
(
)
;
LogicalSize
convertedSize
=
kidMetrics
.
Size
(
lineWM
)
.
ConvertTo
(
wm
lineWM
)
;
kid
-
>
SetRect
(
nsRect
(
bp
.
IStart
(
wm
)
bp
.
BStart
(
wm
)
convertedSize
.
ISize
(
wm
)
convertedSize
.
BSize
(
wm
)
)
)
;
kid
-
>
FinishAndStoreOverflow
(
&
kidMetrics
rs
.
mStyleDisplay
)
;
kid
-
>
DidReflow
(
aPresContext
nullptr
)
;
convertedSize
.
ISize
(
wm
)
+
=
bp
.
IStartEnd
(
wm
)
;
convertedSize
.
BSize
(
wm
)
+
=
bp
.
BStartEnd
(
wm
)
;
aMetrics
.
SetSize
(
wm
convertedSize
)
;
aMetrics
.
SetBlockStartAscent
(
kidMetrics
.
BlockStartAscent
(
)
+
bp
.
BStart
(
wm
)
)
;
aMetrics
.
UnionOverflowAreasWithDesiredBounds
(
)
;
ConsiderChildOverflow
(
aMetrics
.
mOverflowAreas
kid
)
;
FinishAndStoreOverflow
(
&
aMetrics
aReflowInput
.
mStyleDisplay
)
;
}
else
{
nsLineLayout
*
ll
=
aReflowInput
.
mLineLayout
;
bool
pushedFrame
;
ll
-
>
SetInFirstLetter
(
mComputedStyle
-
>
GetPseudo
(
)
=
=
nsCSSPseudoElements
:
:
firstLetter
(
)
)
;
ll
-
>
BeginSpan
(
this
&
aReflowInput
bp
.
IStart
(
wm
)
availSize
.
ISize
(
wm
)
&
mBaseline
)
;
ll
-
>
ReflowFrame
(
kid
aReflowStatus
&
kidMetrics
pushedFrame
)
;
NS_ASSERTION
(
lineWM
.
IsVertical
(
)
=
=
wm
.
IsVertical
(
)
"
we
'
re
assuming
we
can
mix
sizes
between
lineWM
and
wm
"
"
since
we
shouldn
'
t
have
orthogonal
writing
modes
within
"
"
a
line
.
"
)
;
aMetrics
.
ISize
(
lineWM
)
=
ll
-
>
EndSpan
(
this
)
+
bp
.
IStartEnd
(
wm
)
;
ll
-
>
SetInFirstLetter
(
false
)
;
if
(
mComputedStyle
-
>
StyleTextReset
(
)
-
>
mInitialLetterSize
!
=
0
.
0f
)
{
aMetrics
.
SetBlockStartAscent
(
kidMetrics
.
BlockStartAscent
(
)
+
bp
.
BStart
(
wm
)
)
;
aMetrics
.
BSize
(
lineWM
)
=
kidMetrics
.
BSize
(
lineWM
)
+
bp
.
BStartEnd
(
wm
)
;
}
else
{
nsLayoutUtils
:
:
SetBSizeFromFontMetrics
(
this
aMetrics
bp
lineWM
wm
)
;
}
}
if
(
!
aReflowStatus
.
IsInlineBreakBefore
(
)
)
{
if
(
aReflowStatus
.
IsComplete
(
)
)
{
if
(
aReflowInput
.
mLineLayout
)
{
aReflowInput
.
mLineLayout
-
>
SetFirstLetterStyleOK
(
false
)
;
}
nsIFrame
*
kidNextInFlow
=
kid
-
>
GetNextInFlow
(
)
;
if
(
kidNextInFlow
)
{
kidNextInFlow
-
>
GetParent
(
)
-
>
DeleteNextInFlowChild
(
kidNextInFlow
true
)
;
}
}
else
{
if
(
!
IsFloating
(
)
)
{
CreateNextInFlow
(
kid
)
;
const
nsFrameList
&
overflow
=
mFrames
.
RemoveFramesAfter
(
kid
)
;
if
(
overflow
.
NotEmpty
(
)
)
{
SetOverflowFrames
(
overflow
)
;
}
}
else
if
(
!
kid
-
>
GetNextInFlow
(
)
)
{
nsIFrame
*
continuation
;
CreateContinuationForFloatingParent
(
aPresContext
kid
&
continuation
true
)
;
}
}
}
NS_FRAME_SET_TRUNCATION
(
aReflowStatus
aReflowInput
aMetrics
)
;
}
bool
nsFirstLetterFrame
:
:
CanContinueTextRun
(
)
const
{
return
true
;
}
nsresult
nsFirstLetterFrame
:
:
CreateContinuationForFloatingParent
(
nsPresContext
*
aPresContext
nsIFrame
*
aChild
nsIFrame
*
*
aContinuation
bool
aIsFluid
)
{
NS_ASSERTION
(
IsFloating
(
)
"
can
only
call
this
on
floating
first
letter
frames
"
)
;
MOZ_ASSERT
(
aContinuation
"
bad
args
"
)
;
*
aContinuation
=
nullptr
;
nsIPresShell
*
presShell
=
aPresContext
-
>
PresShell
(
)
;
nsPlaceholderFrame
*
placeholderFrame
=
GetPlaceholderFrame
(
)
;
nsContainerFrame
*
parent
=
placeholderFrame
-
>
GetParent
(
)
;
nsIFrame
*
continuation
=
presShell
-
>
FrameConstructor
(
)
-
>
CreateContinuingFrame
(
aPresContext
aChild
parent
aIsFluid
)
;
ComputedStyle
*
parentSC
=
parent
-
>
Style
(
)
;
if
(
parentSC
)
{
RefPtr
<
ComputedStyle
>
newSC
;
newSC
=
presShell
-
>
StyleSet
(
)
-
>
ResolveStyleForFirstLetterContinuation
(
parentSC
)
;
continuation
-
>
SetComputedStyle
(
newSC
)
;
nsLayoutUtils
:
:
MarkDescendantsDirty
(
continuation
)
;
}
nsFrameList
temp
(
continuation
continuation
)
;
parent
-
>
InsertFrames
(
kNoReflowPrincipalList
placeholderFrame
temp
)
;
*
aContinuation
=
continuation
;
return
NS_OK
;
}
void
nsFirstLetterFrame
:
:
DrainOverflowFrames
(
nsPresContext
*
aPresContext
)
{
nsFirstLetterFrame
*
prevInFlow
=
(
nsFirstLetterFrame
*
)
GetPrevInFlow
(
)
;
if
(
prevInFlow
)
{
AutoFrameListPtr
overflowFrames
(
aPresContext
prevInFlow
-
>
StealOverflowFrames
(
)
)
;
if
(
overflowFrames
)
{
NS_ASSERTION
(
mFrames
.
IsEmpty
(
)
"
bad
overflow
list
"
)
;
nsContainerFrame
:
:
ReparentFrameViewList
(
*
overflowFrames
prevInFlow
this
)
;
mFrames
.
InsertFrames
(
this
nullptr
*
overflowFrames
)
;
}
}
AutoFrameListPtr
overflowFrames
(
aPresContext
StealOverflowFrames
(
)
)
;
if
(
overflowFrames
)
{
NS_ASSERTION
(
mFrames
.
NotEmpty
(
)
"
overflow
list
w
/
o
frames
"
)
;
mFrames
.
AppendFrames
(
nullptr
*
overflowFrames
)
;
}
nsIFrame
*
kid
=
mFrames
.
FirstChild
(
)
;
if
(
kid
)
{
nsIContent
*
kidContent
=
kid
-
>
GetContent
(
)
;
if
(
kidContent
)
{
NS_ASSERTION
(
kidContent
-
>
IsText
(
)
"
should
contain
only
text
nodes
"
)
;
ComputedStyle
*
parentSC
;
if
(
prevInFlow
)
{
nsIFrame
*
styleParent
=
CorrectStyleParentFrame
(
GetParent
(
)
nsCSSPseudoElements
:
:
firstLetter
(
)
)
;
parentSC
=
styleParent
-
>
Style
(
)
;
}
else
{
parentSC
=
mComputedStyle
;
}
RefPtr
<
ComputedStyle
>
sc
=
aPresContext
-
>
StyleSet
(
)
-
>
ResolveStyleForText
(
kidContent
parentSC
)
;
kid
-
>
SetComputedStyle
(
sc
)
;
nsLayoutUtils
:
:
MarkDescendantsDirty
(
kid
)
;
}
}
}
nscoord
nsFirstLetterFrame
:
:
GetLogicalBaseline
(
WritingMode
aWritingMode
)
const
{
return
mBaseline
;
}
nsIFrame
:
:
LogicalSides
nsFirstLetterFrame
:
:
GetLogicalSkipSides
(
const
ReflowInput
*
aReflowInput
)
const
{
if
(
GetPrevContinuation
(
)
)
{
return
LogicalSides
(
eLogicalSideBitsAll
)
;
}
return
LogicalSides
(
)
;
}
