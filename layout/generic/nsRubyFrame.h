#
ifndef
nsRubyFrame_h___
#
define
nsRubyFrame_h___
#
include
"
nsInlineFrame
.
h
"
#
include
"
RubyUtils
.
h
"
namespace
mozilla
{
class
PresShell
;
}
nsContainerFrame
*
NS_NewRubyFrame
(
mozilla
:
:
PresShell
*
aPresShell
mozilla
:
:
ComputedStyle
*
aStyle
)
;
class
nsRubyFrame
final
:
public
nsInlineFrame
{
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsRubyFrame
)
NS_DECL_QUERYFRAME
void
AddInlineMinISize
(
const
mozilla
:
:
IntrinsicSizeInput
&
aInput
InlineMinISizeData
*
aData
)
override
;
void
AddInlinePrefISize
(
const
mozilla
:
:
IntrinsicSizeInput
&
aInput
InlinePrefISizeData
*
aData
)
override
;
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
mozilla
:
:
RubyBlockLeadings
GetBlockLeadings
(
)
const
{
return
mLeadings
;
}
protected
:
friend
nsContainerFrame
*
NS_NewRubyFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
explicit
nsRubyFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsInlineFrame
(
aStyle
aPresContext
kClassID
)
{
}
void
ReflowSegment
(
nsPresContext
*
aPresContext
const
ReflowInput
&
aReflowInput
nscoord
aBlockStartAscent
nscoord
aBlockSize
nsRubyBaseContainerFrame
*
aBaseContainer
nsReflowStatus
&
aStatus
)
;
nsRubyBaseContainerFrame
*
PullOneSegment
(
const
nsLineLayout
*
aLineLayout
ContinuationTraversingState
&
aState
)
;
mozilla
:
:
RubyBlockLeadings
mLeadings
;
}
;
#
endif
