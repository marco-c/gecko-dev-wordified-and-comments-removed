#
ifndef
nsFirstLetterFrame_h__
#
define
nsFirstLetterFrame_h__
#
include
"
nsContainerFrame
.
h
"
class
nsFirstLetterFrame
:
public
nsContainerFrame
{
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsFirstLetterFrame
)
nsFirstLetterFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
ClassID
aClassID
)
:
nsContainerFrame
(
aStyle
aPresContext
aClassID
)
{
}
nsFirstLetterFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsContainerFrame
(
aStyle
aPresContext
kClassID
)
{
}
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
final
;
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
final
;
void
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
&
aChildList
)
final
;
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
final
;
#
endif
bool
IsFloating
(
)
const
{
return
HasAnyStateBits
(
NS_FRAME_OUT_OF_FLOW
)
;
}
nscoord
IntrinsicISize
(
const
mozilla
:
:
IntrinsicSizeInput
&
aInput
mozilla
:
:
IntrinsicISizeType
aType
)
final
;
void
AddInlineMinISize
(
gfxContext
*
aRenderingContext
InlineMinISizeData
*
aData
)
final
;
void
AddInlinePrefISize
(
gfxContext
*
aRenderingContext
InlinePrefISizeData
*
aData
)
final
;
SizeComputationResult
ComputeSize
(
gfxContext
*
aRenderingContext
mozilla
:
:
WritingMode
aWM
const
mozilla
:
:
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
mozilla
:
:
LogicalSize
&
aMargin
const
mozilla
:
:
LogicalSize
&
aBorderPadding
const
mozilla
:
:
StyleSizeOverrides
&
aSizeOverrides
mozilla
:
:
ComputeSizeFlags
aFlags
)
final
;
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
final
;
bool
CanContinueTextRun
(
)
const
final
;
Maybe
<
nscoord
>
GetNaturalBaselineBOffset
(
mozilla
:
:
WritingMode
aWM
BaselineSharingGroup
aBaselineGroup
BaselineExportContext
)
const
final
;
LogicalSides
GetLogicalSkipSides
(
)
const
final
;
nsresult
GetChildFrameContainingOffset
(
int32_t
inContentOffset
bool
inHint
int32_t
*
outFrameContentOffset
nsIFrame
*
*
outChildFrame
)
final
;
nscoord
GetFirstLetterBaseline
(
)
const
{
return
mBaseline
;
}
void
CreateContinuationForFloatingParent
(
nsIFrame
*
aChild
nsIFrame
*
*
aContinuation
bool
aIsFluid
)
;
nsTextFrame
*
CreateContinuationForFramesAfter
(
nsTextFrame
*
aFrame
)
;
bool
UseTightBounds
(
)
const
;
protected
:
nscoord
mBaseline
;
void
DrainOverflowFrames
(
nsPresContext
*
aPresContext
)
;
}
;
class
nsFloatingFirstLetterFrame
:
public
nsFirstLetterFrame
{
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsFloatingFirstLetterFrame
)
nsFloatingFirstLetterFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsFirstLetterFrame
(
aStyle
aPresContext
kClassID
)
{
}
}
;
#
endif
