#
ifndef
mozilla_layout_ScrollAnimationPhysics_h_
#
define
mozilla_layout_ScrollAnimationPhysics_h_
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsPoint
.
h
"
#
include
"
nsSMILKeySpline
.
h
"
namespace
mozilla
{
class
ScrollAnimationPhysics
{
public
:
typedef
mozilla
:
:
TimeStamp
TimeStamp
;
typedef
mozilla
:
:
TimeDuration
TimeDuration
;
explicit
ScrollAnimationPhysics
(
nsPoint
aStartPos
)
;
void
Update
(
TimeStamp
aTime
nsPoint
aDestination
const
nsSize
&
aCurrentVelocity
)
;
nsSize
VelocityAt
(
TimeStamp
aTime
)
const
;
nsPoint
PositionAt
(
TimeStamp
aTime
)
const
;
bool
IsFinished
(
TimeStamp
aTime
)
{
return
aTime
>
mStartTime
+
mDuration
;
}
void
InitializeHistory
(
TimeStamp
aTime
)
;
int32_t
mOriginMinMS
;
int32_t
mOriginMaxMS
;
double
mIntervalRatio
;
nsPoint
mDestination
;
bool
mIsFirstIteration
;
protected
:
double
ProgressAt
(
TimeStamp
aTime
)
const
{
return
clamped
(
(
aTime
-
mStartTime
)
/
mDuration
0
.
0
1
.
0
)
;
}
nscoord
VelocityComponent
(
double
aTimeProgress
const
nsSMILKeySpline
&
aTimingFunction
nscoord
aStart
nscoord
aDestination
)
const
;
TimeDuration
ComputeDuration
(
TimeStamp
aTime
)
;
void
InitTimingFunction
(
nsSMILKeySpline
&
aTimingFunction
nscoord
aCurrentPos
nscoord
aCurrentVelocity
nscoord
aDestination
)
;
TimeStamp
mPrevEventTime
[
3
]
;
TimeStamp
mStartTime
;
nsPoint
mStartPos
;
TimeDuration
mDuration
;
nsSMILKeySpline
mTimingFunctionX
;
nsSMILKeySpline
mTimingFunctionY
;
}
;
static
inline
double
ComputeAcceleratedWheelDelta
(
double
aDelta
int32_t
aCounter
int32_t
aFactor
)
{
if
(
!
aDelta
)
{
return
aDelta
;
}
return
(
aDelta
*
aCounter
*
double
(
aFactor
)
/
10
)
;
}
static
const
uint32_t
kScrollSeriesTimeoutMs
=
80
;
}
#
endif
