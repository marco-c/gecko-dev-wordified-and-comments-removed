#
ifndef
nsSplittableFrame_h___
#
define
nsSplittableFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsIFrame
.
h
"
class
nsSplittableFrame
:
public
nsIFrame
{
public
:
NS_DECL_ABSTRACT_FRAME
(
nsSplittableFrame
)
NS_DECL_QUERYFRAME_TARGET
(
nsSplittableFrame
)
NS_DECL_QUERYFRAME
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
void
Destroy
(
DestroyContext
&
)
override
;
nsIFrame
*
GetPrevContinuation
(
)
const
final
;
nsIFrame
*
GetNextContinuation
(
)
const
final
;
void
SetNextContinuation
(
nsIFrame
*
aFrame
)
final
{
SetNextContinuation
(
aFrame
false
)
;
}
nsIFrame
*
FirstContinuation
(
)
const
override
;
nsIFrame
*
LastContinuation
(
)
const
final
;
#
ifdef
DEBUG
static
bool
IsInPrevContinuationChain
(
nsIFrame
*
aFrame1
nsIFrame
*
aFrame2
)
;
static
bool
IsInNextContinuationChain
(
nsIFrame
*
aFrame1
nsIFrame
*
aFrame2
)
;
#
endif
nsIFrame
*
GetPrevInFlow
(
)
const
final
;
nsIFrame
*
GetNextInFlow
(
)
const
final
;
void
SetNextInFlow
(
nsIFrame
*
aFrame
)
final
{
SetNextContinuation
(
aFrame
true
)
;
}
nsIFrame
*
FirstInFlow
(
)
const
final
;
nsIFrame
*
LastInFlow
(
)
const
final
;
static
void
RemoveFromFlow
(
nsIFrame
*
aFrame
)
;
protected
:
nsSplittableFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
ClassID
aID
)
:
nsIFrame
(
aStyle
aPresContext
aID
)
{
}
nscoord
CalcAndCacheConsumedBSize
(
)
;
static
nscoord
ConsumedBSize
(
nsSplittableFrame
*
aFrame
)
{
return
aFrame
-
>
CalcAndCacheConsumedBSize
(
)
;
}
nscoord
GetEffectiveComputedBSize
(
const
ReflowInput
&
aReflowInput
nscoord
aConsumed
)
const
;
LogicalSides
GetLogicalSkipSides
(
)
const
override
{
return
GetBlockLevelLogicalSkipSides
(
true
)
;
}
LogicalSides
GetBlockLevelLogicalSkipSides
(
bool
aAfterReflow
)
const
;
LogicalSides
PreReflowBlockLevelLogicalSkipSides
(
)
const
{
return
GetBlockLevelLogicalSkipSides
(
false
)
;
}
;
void
SetNextContinuation
(
nsIFrame
*
aFrame
bool
aIsFluid
)
;
nsIFrame
*
mPrevContinuation
=
nullptr
;
nsIFrame
*
mNextContinuation
=
nullptr
;
}
;
#
endif
