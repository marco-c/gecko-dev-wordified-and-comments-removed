#
ifndef
nsPageSequenceFrame_h___
#
define
nsPageSequenceFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsIPrintSettings
.
h
"
namespace
mozilla
{
class
PresShell
;
namespace
dom
{
class
HTMLCanvasElement
;
}
}
class
nsSharedPageData
{
public
:
nsSharedPageData
(
)
:
mShrinkToFitRatio
(
1
.
0f
)
{
}
nsString
mDateTimeStr
;
nsString
mPageNumFormat
;
nsString
mPageNumAndTotalsFormat
;
nsString
mDocTitle
;
nsString
mDocURL
;
nsFont
mHeadFootFont
;
nsSize
mReflowSize
;
nsMargin
mReflowMargin
;
nsMargin
mEdgePaperMargin
;
nsCOMPtr
<
nsIPrintSettings
>
mPrintSettings
;
float
mShrinkToFitRatio
;
}
;
class
nsPageSequenceFrame
final
:
public
nsContainerFrame
{
public
:
friend
nsPageSequenceFrame
*
NS_NewPageSequenceFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsPageSequenceFrame
)
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
float
GetSTFPercent
(
)
const
{
return
mPageData
-
>
mShrinkToFitRatio
;
}
float
GetPrintPreviewScale
(
)
const
;
nsresult
StartPrint
(
nsPresContext
*
aPresContext
nsIPrintSettings
*
aPrintSettings
const
nsAString
&
aDocTitle
const
nsAString
&
aDocURL
)
;
nsresult
PrePrintNextPage
(
nsITimerCallback
*
aCallback
bool
*
aDone
)
;
nsresult
PrintNextPage
(
)
;
void
ResetPrintCanvasList
(
)
;
int32_t
GetCurrentPageNum
(
)
const
{
return
mPageNum
;
}
int32_t
GetNumPages
(
)
const
{
return
mTotalPages
;
}
bool
IsDoingPrintRange
(
)
const
{
return
mDoingPageRange
;
}
void
GetPrintRange
(
int32_t
*
aFromPage
int32_t
*
aToPage
)
const
;
nsresult
DoPageEnd
(
)
;
bool
HonorPrintBackgroundSettings
(
)
override
{
return
false
;
}
bool
HasTransformGetter
(
)
const
override
{
return
true
;
}
void
AppendDirectlyOwnedAnonBoxes
(
nsTArray
<
OwnedAnonBox
>
&
aResult
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
protected
:
nsPageSequenceFrame
(
ComputedStyle
*
nsPresContext
*
)
;
virtual
~
nsPageSequenceFrame
(
)
;
void
SetPageNumberFormat
(
const
char
*
aPropName
const
char
*
aDefPropVal
bool
aPageNumOnly
)
;
void
SetDateTimeStr
(
const
nsAString
&
aDateTimeStr
)
;
void
SetPageNumberFormat
(
const
nsAString
&
aFormatStr
bool
aForPageNumOnly
)
;
void
PopulateReflowOutput
(
ReflowOutput
&
const
ReflowInput
&
)
;
nscoord
ComputeCenteringMargin
(
nscoord
aContainerContentBoxWidth
nscoord
aChildPaddingBoxWidth
const
nsMargin
&
aChildPhysicalMargin
)
;
void
DetermineWhetherToPrintPage
(
)
;
nsIFrame
*
GetCurrentPageFrame
(
)
;
nsMargin
mMargin
;
nsSize
mSize
;
mozilla
:
:
UniquePtr
<
nsSharedPageData
>
mPageData
;
int32_t
mPageNum
;
int32_t
mTotalPages
;
int32_t
mPrintRangeType
;
int32_t
mFromPageNum
;
int32_t
mToPageNum
;
nscoord
mAvailableISize
=
-
1
;
nsTArray
<
int32_t
>
mPageRanges
;
nsTArray
<
RefPtr
<
mozilla
:
:
dom
:
:
HTMLCanvasElement
>
>
mCurrentCanvasList
;
bool
mPrintThisPage
;
bool
mDoingPageRange
;
bool
mCalledBeginPage
;
bool
mCurrentCanvasListSetup
;
}
;
#
endif
