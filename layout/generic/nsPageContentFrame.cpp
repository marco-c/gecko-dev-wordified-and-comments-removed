#
include
"
nsPageContentFrame
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
StaticPrefs_layout
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsPageFrame
.
h
"
#
include
"
nsCSSFrameConstructor
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsPageSequenceFrame
.
h
"
using
namespace
mozilla
;
nsPageContentFrame
*
NS_NewPageContentFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsPageContentFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsPageContentFrame
)
void
nsPageContentFrame
:
:
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aReflowOutput
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
{
MarkInReflow
(
)
;
DO_GLOBAL_REFLOW_COUNT
(
"
nsPageContentFrame
"
)
;
DISPLAY_REFLOW
(
aPresContext
this
aReflowInput
aReflowOutput
aStatus
)
;
MOZ_ASSERT
(
aStatus
.
IsEmpty
(
)
"
Caller
should
pass
a
fresh
reflow
status
!
"
)
;
MOZ_ASSERT
(
mPD
"
Need
a
pointer
to
nsSharedPageData
before
reflow
starts
"
)
;
if
(
GetPrevInFlow
(
)
&
&
HasAnyStateBits
(
NS_FRAME_FIRST_REFLOW
)
)
{
nsresult
rv
=
aPresContext
-
>
PresShell
(
)
-
>
FrameConstructor
(
)
-
>
ReplicateFixedFrames
(
this
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
}
const
nsSize
maxSize
(
aReflowInput
.
ComputedWidth
(
)
aReflowInput
.
ComputedHeight
(
)
)
;
SetSize
(
maxSize
)
;
const
WritingMode
pcfWM
=
aReflowInput
.
GetWritingMode
(
)
;
aReflowOutput
.
ISize
(
pcfWM
)
=
aReflowInput
.
ComputedISize
(
)
;
if
(
aReflowInput
.
ComputedBSize
(
)
!
=
NS_UNCONSTRAINEDSIZE
)
{
aReflowOutput
.
BSize
(
pcfWM
)
=
aReflowInput
.
ComputedBSize
(
)
;
}
aReflowOutput
.
SetOverflowAreasToDesiredBounds
(
)
;
if
(
mFrames
.
NotEmpty
(
)
)
{
nsIFrame
*
const
frame
=
mFrames
.
FirstChild
(
)
;
const
WritingMode
frameWM
=
frame
-
>
GetWritingMode
(
)
;
const
LogicalSize
logicalSize
(
frameWM
maxSize
)
;
ReflowInput
kidReflowInput
(
aPresContext
aReflowInput
frame
logicalSize
)
;
kidReflowInput
.
SetComputedBSize
(
logicalSize
.
BSize
(
frameWM
)
)
;
ReflowOutput
kidReflowOutput
(
kidReflowInput
)
;
ReflowChild
(
frame
aPresContext
kidReflowOutput
kidReflowInput
0
0
ReflowChildFlags
:
:
Default
aStatus
)
;
nsMargin
padding
(
0
0
0
0
)
;
kidReflowInput
.
mStylePadding
-
>
GetPadding
(
padding
)
;
if
(
frame
-
>
HasOverflowAreas
(
)
)
{
nscoord
xmost
=
kidReflowOutput
.
ScrollableOverflow
(
)
.
XMost
(
)
;
if
(
xmost
>
kidReflowOutput
.
Width
(
)
)
{
const
nscoord
widthToFit
=
xmost
+
padding
.
right
+
kidReflowInput
.
mStyleBorder
-
>
GetComputedBorderWidth
(
eSideRight
)
;
const
float
ratio
=
float
(
maxSize
.
width
)
/
float
(
widthToFit
)
;
NS_ASSERTION
(
ratio
>
=
0
.
0
&
&
ratio
<
1
.
0
"
invalid
shrink
-
to
-
fit
ratio
"
)
;
mPD
-
>
mShrinkToFitRatio
=
std
:
:
min
(
mPD
-
>
mShrinkToFitRatio
ratio
)
;
}
if
(
nsContentUtils
:
:
IsPDFJS
(
PresContext
(
)
-
>
Document
(
)
-
>
GetPrincipal
(
)
)
)
{
nscoord
ymost
=
kidReflowOutput
.
ScrollableOverflow
(
)
.
YMost
(
)
;
if
(
ymost
>
kidReflowOutput
.
Height
(
)
)
{
const
nscoord
heightToFit
=
ymost
+
padding
.
bottom
+
kidReflowInput
.
mStyleBorder
-
>
GetComputedBorderWidth
(
eSideBottom
)
;
const
float
ratio
=
float
(
maxSize
.
height
)
/
float
(
heightToFit
)
;
MOZ_ASSERT
(
ratio
>
=
0
.
0
&
&
ratio
<
1
.
0
)
;
mPD
-
>
mShrinkToFitRatio
=
std
:
:
min
(
mPD
-
>
mShrinkToFitRatio
ratio
)
;
}
frame
-
>
ClearOverflowRects
(
)
;
kidReflowOutput
.
mOverflowAreas
=
aReflowOutput
.
mOverflowAreas
;
}
}
FinishReflowChild
(
frame
aPresContext
kidReflowOutput
&
kidReflowInput
0
0
ReflowChildFlags
:
:
Default
)
;
NS_ASSERTION
(
aPresContext
-
>
IsDynamic
(
)
|
|
!
aStatus
.
IsFullyComplete
(
)
|
|
!
frame
-
>
GetNextInFlow
(
)
"
bad
child
flow
list
"
)
;
aReflowOutput
.
mOverflowAreas
.
UnionWith
(
kidReflowOutput
.
mOverflowAreas
)
;
}
FinishAndStoreOverflow
(
&
aReflowOutput
)
;
nsReflowStatus
fixedStatus
;
ReflowAbsoluteFrames
(
aPresContext
aReflowOutput
aReflowInput
fixedStatus
)
;
NS_ASSERTION
(
fixedStatus
.
IsComplete
(
)
"
fixed
frames
can
be
truncated
but
not
incomplete
"
)
;
if
(
StaticPrefs
:
:
layout_display_list_improve_fragmentation
(
)
&
&
mFrames
.
NotEmpty
(
)
)
{
auto
*
const
previous
=
static_cast
<
nsPageContentFrame
*
>
(
GetPrevContinuation
(
)
)
;
const
nscoord
previousPageOverflow
=
previous
?
previous
-
>
mRemainingOverflow
:
0
;
const
nsSize
containerSize
(
aReflowInput
.
AvailableWidth
(
)
aReflowInput
.
AvailableHeight
(
)
)
;
const
nscoord
pageBSize
=
GetLogicalRect
(
containerSize
)
.
BSize
(
pcfWM
)
;
const
nscoord
overflowBSize
=
LogicalRect
(
pcfWM
ScrollableOverflowRect
(
)
GetSize
(
)
)
.
BEnd
(
pcfWM
)
;
const
nscoord
currentPageOverflow
=
overflowBSize
-
pageBSize
;
nscoord
remainingOverflow
=
std
:
:
max
(
currentPageOverflow
previousPageOverflow
-
pageBSize
)
;
if
(
aStatus
.
IsFullyComplete
(
)
&
&
remainingOverflow
>
0
)
{
aStatus
.
SetOverflowIncomplete
(
)
;
}
mRemainingOverflow
=
std
:
:
max
(
remainingOverflow
0
)
;
}
NS_FRAME_SET_TRUNCATION
(
aStatus
aReflowInput
aReflowOutput
)
;
}
using
PageAndOffset
=
std
:
:
pair
<
nsPageContentFrame
*
nscoord
>
;
static
nsTArray
<
PageAndOffset
>
GetPreviousPagesWithOverflow
(
nsPageContentFrame
*
aPage
)
{
nsTArray
<
PageAndOffset
>
pages
(
8
)
;
auto
GetPreviousPageContentFrame
=
[
]
(
nsPageContentFrame
*
aPageCF
)
{
nsIFrame
*
prevCont
=
aPageCF
-
>
GetPrevContinuation
(
)
;
MOZ_ASSERT
(
!
prevCont
|
|
prevCont
-
>
IsPageContentFrame
(
)
"
Expected
nsPageContentFrame
or
nullptr
"
)
;
return
static_cast
<
nsPageContentFrame
*
>
(
prevCont
)
;
}
;
nsPageContentFrame
*
pageCF
=
aPage
;
nscoord
offsetToCurrentPageBStart
=
0
;
const
auto
wm
=
pageCF
-
>
GetWritingMode
(
)
;
while
(
(
pageCF
=
GetPreviousPageContentFrame
(
pageCF
)
)
)
{
offsetToCurrentPageBStart
+
=
pageCF
-
>
BSize
(
wm
)
;
if
(
pageCF
-
>
HasOverflowAreas
(
)
)
{
pages
.
EmplaceBack
(
pageCF
offsetToCurrentPageBStart
)
;
}
}
return
pages
;
}
static
void
BuildPreviousPageOverflow
(
nsDisplayListBuilder
*
aBuilder
nsPageFrame
*
aPageFrame
nsPageContentFrame
*
aCurrentPageCF
const
nsDisplayListSet
&
aLists
)
{
const
auto
previousPagesAndOffsets
=
GetPreviousPagesWithOverflow
(
aCurrentPageCF
)
;
const
auto
wm
=
aCurrentPageCF
-
>
GetWritingMode
(
)
;
for
(
const
PageAndOffset
&
pair
:
Reversed
(
previousPagesAndOffsets
)
)
{
auto
*
prevPageCF
=
pair
.
first
;
const
nscoord
offsetToCurrentPageBStart
=
pair
.
second
;
const
LogicalRect
scrollableOverflow
(
wm
prevPageCF
-
>
ScrollableOverflowRectRelativeToSelf
(
)
prevPageCF
-
>
GetSize
(
)
)
;
const
auto
remainingOverflow
=
scrollableOverflow
.
BEnd
(
wm
)
-
offsetToCurrentPageBStart
;
if
(
remainingOverflow
<
=
0
)
{
continue
;
}
LogicalRect
overflowRect
(
wm
prevPageCF
-
>
InkOverflowRectRelativeToSelf
(
)
prevPageCF
-
>
GetSize
(
)
)
;
overflowRect
.
BStart
(
wm
)
=
offsetToCurrentPageBStart
;
overflowRect
.
BSize
(
wm
)
=
std
:
:
min
(
remainingOverflow
prevPageCF
-
>
BSize
(
wm
)
)
;
{
const
nsRect
visibleRect
=
overflowRect
.
GetPhysicalRect
(
wm
prevPageCF
-
>
GetSize
(
)
)
+
prevPageCF
-
>
GetOffsetTo
(
aPageFrame
)
;
nsDisplayListBuilder
:
:
AutoBuildingDisplayList
buildingForChild
(
aBuilder
aPageFrame
visibleRect
visibleRect
)
;
const
nsSize
containerSize
=
aPageFrame
-
>
GetSize
(
)
;
LogicalPoint
pageOffset
(
wm
aCurrentPageCF
-
>
GetOffsetTo
(
prevPageCF
)
containerSize
)
;
pageOffset
.
B
(
wm
)
-
=
offsetToCurrentPageBStart
;
buildingForChild
.
SetAdditionalOffset
(
pageOffset
.
GetPhysicalPoint
(
wm
containerSize
)
)
;
aPageFrame
-
>
BuildDisplayListForChild
(
aBuilder
prevPageCF
aLists
)
;
}
}
}
static
void
PruneDisplayListForExtraPage
(
nsDisplayListBuilder
*
aBuilder
nsPageFrame
*
aPage
nsDisplayList
*
aList
)
{
nsDisplayList
newList
;
while
(
true
)
{
nsDisplayItem
*
i
=
aList
-
>
RemoveBottom
(
)
;
if
(
!
i
)
break
;
nsDisplayList
*
subList
=
i
-
>
GetSameCoordinateSystemChildren
(
)
;
if
(
subList
)
{
PruneDisplayListForExtraPage
(
aBuilder
aPage
subList
)
;
i
-
>
UpdateBounds
(
aBuilder
)
;
}
else
{
nsIFrame
*
f
=
i
-
>
Frame
(
)
;
if
(
!
nsLayoutUtils
:
:
IsProperAncestorFrameCrossDoc
(
aPage
f
)
)
{
i
-
>
Destroy
(
aBuilder
)
;
continue
;
}
}
newList
.
AppendToTop
(
i
)
;
}
aList
-
>
AppendToTop
(
&
newList
)
;
}
static
void
BuildDisplayListForExtraPage
(
nsDisplayListBuilder
*
aBuilder
nsPageFrame
*
aPage
nsIFrame
*
aExtraPage
nsDisplayList
*
aList
)
{
if
(
!
aExtraPage
-
>
HasAnyStateBits
(
NS_FRAME_FORCE_DISPLAY_LIST_DESCEND_INTO
)
)
{
return
;
}
nsDisplayList
list
;
aExtraPage
-
>
BuildDisplayListForStackingContext
(
aBuilder
&
list
)
;
PruneDisplayListForExtraPage
(
aBuilder
aPage
&
list
)
;
aList
-
>
AppendToTop
(
&
list
)
;
}
static
gfx
:
:
Matrix4x4
ComputePageContentTransform
(
const
nsIFrame
*
aFrame
float
aAppUnitsPerPixel
)
{
float
scale
=
aFrame
-
>
PresContext
(
)
-
>
GetPageScale
(
)
;
return
gfx
:
:
Matrix4x4
:
:
Scaling
(
scale
scale
1
)
;
}
nsIFrame
:
:
ComputeTransformFunction
nsPageContentFrame
:
:
GetTransformGetter
(
)
const
{
return
ComputePageContentTransform
;
}
void
nsPageContentFrame
:
:
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
MOZ_ASSERT
(
GetParent
(
)
)
;
MOZ_ASSERT
(
GetParent
(
)
-
>
IsPageFrame
(
)
)
;
auto
*
pageFrame
=
static_cast
<
nsPageFrame
*
>
(
GetParent
(
)
)
;
auto
pageNum
=
pageFrame
-
>
GetPageNum
(
)
;
NS_ASSERTION
(
pageNum
<
=
255
"
Too
many
pages
to
handle
OOFs
"
)
;
if
(
aBuilder
-
>
GetBuildingExtraPagesForPageNum
(
)
)
{
return
mozilla
:
:
ViewportFrame
:
:
BuildDisplayList
(
aBuilder
aLists
)
;
}
nsDisplayListCollection
set
(
aBuilder
)
;
nsDisplayList
content
;
{
const
nsRect
clipRect
(
aBuilder
-
>
ToReferenceFrame
(
this
)
GetSize
(
)
)
;
DisplayListClipState
:
:
AutoSaveRestore
clipState
(
aBuilder
)
;
clipState
.
Clear
(
)
;
clipState
.
ClipContentDescendants
(
clipRect
)
;
if
(
StaticPrefs
:
:
layout_display_list_improve_fragmentation
(
)
&
&
pageNum
<
=
255
)
{
nsDisplayListBuilder
:
:
AutoPageNumberSetter
p
(
aBuilder
pageNum
)
;
BuildPreviousPageOverflow
(
aBuilder
pageFrame
this
set
)
;
}
nsRect
visible
=
aBuilder
-
>
GetVisibleRect
(
)
;
visible
.
ScaleInverseRoundOut
(
PresContext
(
)
-
>
GetPageScale
(
)
)
;
nsDisplayListBuilder
:
:
AutoBuildingDisplayList
buildingForChild
(
aBuilder
this
visible
visible
)
;
mozilla
:
:
ViewportFrame
:
:
BuildDisplayList
(
aBuilder
set
)
;
set
.
SerializeWithCorrectZOrder
(
&
content
GetContent
(
)
)
;
if
(
pageNum
<
=
255
)
{
const
nsRect
overflowRect
=
ScrollableOverflowRectRelativeToSelf
(
)
;
nsDisplayListBuilder
:
:
AutoPageNumberSetter
p
(
aBuilder
pageNum
)
;
auto
*
pageCF
=
this
;
while
(
(
pageCF
=
static_cast
<
nsPageContentFrame
*
>
(
pageCF
-
>
GetNextContinuation
(
)
)
)
)
{
nsRect
childVisible
=
overflowRect
+
GetOffsetTo
(
pageCF
)
;
nsDisplayListBuilder
:
:
AutoBuildingDisplayList
buildingForChild
(
aBuilder
pageCF
childVisible
childVisible
)
;
BuildDisplayListForExtraPage
(
aBuilder
pageFrame
pageCF
&
content
)
;
}
}
const
nsRect
backgroundRect
(
aBuilder
-
>
ToReferenceFrame
(
this
)
GetSize
(
)
)
;
PresShell
(
)
-
>
AddCanvasBackgroundColorItem
(
aBuilder
&
content
this
backgroundRect
NS_RGBA
(
0
0
0
0
)
)
;
}
content
.
AppendNewToTop
<
nsDisplayTransform
>
(
aBuilder
this
&
content
content
.
GetBuildingRect
(
)
nsDisplayTransform
:
:
WithTransformGetter
)
;
aLists
.
Content
(
)
-
>
AppendToTop
(
&
content
)
;
}
void
nsPageContentFrame
:
:
AppendDirectlyOwnedAnonBoxes
(
nsTArray
<
OwnedAnonBox
>
&
aResult
)
{
MOZ_ASSERT
(
mFrames
.
FirstChild
(
)
"
pageContentFrame
must
have
a
canvasFrame
child
"
)
;
aResult
.
AppendElement
(
mFrames
.
FirstChild
(
)
)
;
}
#
ifdef
DEBUG_FRAME_DUMP
nsresult
nsPageContentFrame
:
:
GetFrameName
(
nsAString
&
aResult
)
const
{
return
MakeFrameName
(
u
"
PageContent
"
_ns
aResult
)
;
}
#
endif
