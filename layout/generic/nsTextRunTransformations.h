#
ifndef
NSTEXTRUNTRANSFORMATIONS_H_
#
define
NSTEXTRUNTRANSFORMATIONS_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
gfxTextRun
.
h
"
#
include
"
nsStyleContext
.
h
"
class
nsTransformedTextRun
;
struct
nsTransformedCharStyle
final
{
NS_INLINE_DECL_REFCOUNTING
(
nsTransformedCharStyle
)
explicit
nsTransformedCharStyle
(
nsStyleContext
*
aContext
)
:
mFont
(
aContext
-
>
StyleFont
(
)
-
>
mFont
)
mLanguage
(
aContext
-
>
StyleFont
(
)
-
>
mLanguage
)
mPresContext
(
aContext
-
>
PresContext
(
)
)
mScriptSizeMultiplier
(
aContext
-
>
StyleFont
(
)
-
>
mScriptSizeMultiplier
)
mTextTransform
(
aContext
-
>
StyleText
(
)
-
>
mTextTransform
)
mMathVariant
(
aContext
-
>
StyleFont
(
)
-
>
mMathVariant
)
mExplicitLanguage
(
aContext
-
>
StyleFont
(
)
-
>
mExplicitLanguage
)
{
}
nsFont
mFont
;
RefPtr
<
nsAtom
>
mLanguage
;
RefPtr
<
nsPresContext
>
mPresContext
;
float
mScriptSizeMultiplier
;
uint8_t
mTextTransform
;
uint8_t
mMathVariant
;
bool
mExplicitLanguage
;
bool
mForceNonFullWidth
=
false
;
private
:
~
nsTransformedCharStyle
(
)
{
}
nsTransformedCharStyle
(
const
nsTransformedCharStyle
&
aOther
)
=
delete
;
nsTransformedCharStyle
&
operator
=
(
const
nsTransformedCharStyle
&
aOther
)
=
delete
;
}
;
class
nsTransformingTextRunFactory
{
public
:
virtual
~
nsTransformingTextRunFactory
(
)
{
}
already_AddRefed
<
nsTransformedTextRun
>
MakeTextRun
(
const
uint8_t
*
aString
uint32_t
aLength
const
gfxFontGroup
:
:
Parameters
*
aParams
gfxFontGroup
*
aFontGroup
mozilla
:
:
gfx
:
:
ShapedTextFlags
aFlags
nsTextFrameUtils
:
:
Flags
aFlags2
nsTArray
<
RefPtr
<
nsTransformedCharStyle
>
>
&
&
aStyles
bool
aOwnsFactory
)
;
already_AddRefed
<
nsTransformedTextRun
>
MakeTextRun
(
const
char16_t
*
aString
uint32_t
aLength
const
gfxFontGroup
:
:
Parameters
*
aParams
gfxFontGroup
*
aFontGroup
mozilla
:
:
gfx
:
:
ShapedTextFlags
aFlags
nsTextFrameUtils
:
:
Flags
aFlags2
nsTArray
<
RefPtr
<
nsTransformedCharStyle
>
>
&
&
aStyles
bool
aOwnsFactory
)
;
virtual
void
RebuildTextRun
(
nsTransformedTextRun
*
aTextRun
mozilla
:
:
gfx
:
:
DrawTarget
*
aRefDrawTarget
gfxMissingFontRecorder
*
aMFR
)
=
0
;
}
;
class
nsCaseTransformTextRunFactory
:
public
nsTransformingTextRunFactory
{
public
:
explicit
nsCaseTransformTextRunFactory
(
mozilla
:
:
UniquePtr
<
nsTransformingTextRunFactory
>
aInnerTransformingTextRunFactory
bool
aAllUppercase
=
false
)
:
mInnerTransformingTextRunFactory
(
Move
(
aInnerTransformingTextRunFactory
)
)
mAllUppercase
(
aAllUppercase
)
{
}
virtual
void
RebuildTextRun
(
nsTransformedTextRun
*
aTextRun
mozilla
:
:
gfx
:
:
DrawTarget
*
aRefDrawTarget
gfxMissingFontRecorder
*
aMFR
)
override
;
static
bool
TransformString
(
const
nsAString
&
aString
nsString
&
aConvertedString
bool
aAllUppercase
const
nsAtom
*
aLanguage
nsTArray
<
bool
>
&
aCharsToMergeArray
nsTArray
<
bool
>
&
aDeletedCharsArray
const
nsTransformedTextRun
*
aTextRun
=
nullptr
uint32_t
aOffsetInTextRun
=
0
nsTArray
<
uint8_t
>
*
aCanBreakBeforeArray
=
nullptr
nsTArray
<
RefPtr
<
nsTransformedCharStyle
>
>
*
aStyleArray
=
nullptr
)
;
protected
:
mozilla
:
:
UniquePtr
<
nsTransformingTextRunFactory
>
mInnerTransformingTextRunFactory
;
bool
mAllUppercase
;
}
;
class
nsTransformedTextRun
final
:
public
gfxTextRun
{
public
:
static
already_AddRefed
<
nsTransformedTextRun
>
Create
(
const
gfxTextRunFactory
:
:
Parameters
*
aParams
nsTransformingTextRunFactory
*
aFactory
gfxFontGroup
*
aFontGroup
const
char16_t
*
aString
uint32_t
aLength
const
mozilla
:
:
gfx
:
:
ShapedTextFlags
aFlags
const
nsTextFrameUtils
:
:
Flags
aFlags2
nsTArray
<
RefPtr
<
nsTransformedCharStyle
>
>
&
&
aStyles
bool
aOwnsFactory
)
;
~
nsTransformedTextRun
(
)
{
if
(
mOwnsFactory
)
{
delete
mFactory
;
}
}
void
SetCapitalization
(
uint32_t
aStart
uint32_t
aLength
bool
*
aCapitalization
)
;
virtual
bool
SetPotentialLineBreaks
(
Range
aRange
const
uint8_t
*
aBreakBefore
)
override
;
void
FinishSettingProperties
(
mozilla
:
:
gfx
:
:
DrawTarget
*
aRefDrawTarget
gfxMissingFontRecorder
*
aMFR
)
{
if
(
mNeedsRebuild
)
{
mNeedsRebuild
=
false
;
mFactory
-
>
RebuildTextRun
(
this
aRefDrawTarget
aMFR
)
;
}
}
virtual
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
override
;
virtual
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
override
;
nsTransformingTextRunFactory
*
mFactory
;
nsTArray
<
RefPtr
<
nsTransformedCharStyle
>
>
mStyles
;
nsTArray
<
bool
>
mCapitalize
;
nsString
mString
;
bool
mOwnsFactory
;
bool
mNeedsRebuild
;
private
:
nsTransformedTextRun
(
const
gfxTextRunFactory
:
:
Parameters
*
aParams
nsTransformingTextRunFactory
*
aFactory
gfxFontGroup
*
aFontGroup
const
char16_t
*
aString
uint32_t
aLength
const
mozilla
:
:
gfx
:
:
ShapedTextFlags
aFlags
const
nsTextFrameUtils
:
:
Flags
aFlags2
nsTArray
<
RefPtr
<
nsTransformedCharStyle
>
>
&
&
aStyles
bool
aOwnsFactory
)
:
gfxTextRun
(
aParams
aLength
aFontGroup
aFlags
aFlags2
)
mFactory
(
aFactory
)
mStyles
(
aStyles
)
mString
(
aString
aLength
)
mOwnsFactory
(
aOwnsFactory
)
mNeedsRebuild
(
true
)
{
mCharacterGlyphs
=
reinterpret_cast
<
CompressedGlyph
*
>
(
this
+
1
)
;
}
}
;
void
MergeCharactersInTextRun
(
gfxTextRun
*
aDest
gfxTextRun
*
aSrc
const
bool
*
aCharsToMerge
const
bool
*
aDeletedChars
)
;
gfxTextRunFactory
:
:
Parameters
GetParametersForInner
(
nsTransformedTextRun
*
aTextRun
mozilla
:
:
gfx
:
:
ShapedTextFlags
*
aFlags
mozilla
:
:
gfx
:
:
DrawTarget
*
aRefDrawTarget
)
;
#
endif
