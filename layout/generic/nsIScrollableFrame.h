#
ifndef
nsIScrollFrame_h___
#
define
nsIScrollFrame_h___
#
include
"
nsCoord
.
h
"
#
include
"
mozilla
/
dom
/
WindowBinding
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
ScrollOrigin
.
h
"
#
include
"
mozilla
/
ScrollPositionUpdate
.
h
"
#
include
"
mozilla
/
ScrollStyles
.
h
"
#
include
"
mozilla
/
ScrollTypes
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
nsIScrollbarMediator
.
h
"
#
include
"
Units
.
h
"
#
include
"
FrameMetrics
.
h
"
class
gfxContext
;
class
nsBoxLayoutState
;
class
nsIScrollPositionListener
;
class
nsIFrame
;
class
nsPresContext
;
class
nsIContent
;
namespace
mozilla
{
class
DisplayItemClip
;
class
nsDisplayListBuilder
;
enum
class
StyleScrollSnapAlignKeyword
:
uint8_t
;
namespace
layers
{
struct
ScrollMetadata
;
class
Layer
;
class
WebRenderLayerManager
;
}
namespace
layout
{
class
ScrollAnchorContainer
;
}
}
class
nsIScrollableFrame
:
public
nsIScrollbarMediator
{
public
:
using
CSSIntPoint
=
mozilla
:
:
CSSIntPoint
;
using
ScrollSnapInfo
=
mozilla
:
:
layers
:
:
ScrollSnapInfo
;
using
ScrollAnchorContainer
=
mozilla
:
:
layout
:
:
ScrollAnchorContainer
;
using
ScrollMode
=
mozilla
:
:
ScrollMode
;
using
ScrollOrigin
=
mozilla
:
:
ScrollOrigin
;
using
PhysicalScrollSnapAlign
=
std
:
:
pair
<
mozilla
:
:
StyleScrollSnapAlignKeyword
mozilla
:
:
StyleScrollSnapAlignKeyword
>
;
NS_DECL_QUERYFRAME_TARGET
(
nsIScrollableFrame
)
virtual
nsIFrame
*
GetScrolledFrame
(
)
const
=
0
;
virtual
mozilla
:
:
ScrollStyles
GetScrollStyles
(
)
const
=
0
;
virtual
bool
IsForTextControlWithNoScrollbars
(
)
const
=
0
;
virtual
bool
HasAllNeededScrollbars
(
)
const
=
0
;
virtual
mozilla
:
:
layers
:
:
OverscrollBehaviorInfo
GetOverscrollBehaviorInfo
(
)
const
=
0
;
virtual
mozilla
:
:
layers
:
:
ScrollDirections
GetScrollbarVisibility
(
)
const
=
0
;
mozilla
:
:
layers
:
:
ScrollDirections
GetAvailableScrollingDirections
(
)
const
;
virtual
mozilla
:
:
layers
:
:
ScrollDirections
GetAvailableScrollingDirectionsForUserInputEvents
(
)
const
=
0
;
enum
class
ScrollbarSizesOptions
{
NONE
INCLUDE_VISUAL_VIEWPORT_SCROLLBARS
}
;
virtual
nsMargin
GetActualScrollbarSizes
(
ScrollbarSizesOptions
aOptions
=
ScrollbarSizesOptions
:
:
NONE
)
const
=
0
;
virtual
nsMargin
GetDesiredScrollbarSizes
(
)
const
=
0
;
static
nscoord
GetNondisappearingScrollbarWidth
(
nsPresContext
*
mozilla
:
:
WritingMode
)
;
virtual
nsSize
GetLayoutSize
(
)
const
=
0
;
virtual
nsRect
GetScrolledRect
(
)
const
=
0
;
virtual
nsRect
GetScrollPortRect
(
)
const
=
0
;
virtual
nsPoint
GetScrollPosition
(
)
const
=
0
;
virtual
nsPoint
GetLogicalScrollPosition
(
)
const
=
0
;
virtual
nsRect
GetScrollRange
(
)
const
=
0
;
virtual
nsSize
GetVisualViewportSize
(
)
const
=
0
;
virtual
nsPoint
GetVisualViewportOffset
(
)
const
=
0
;
virtual
bool
SetVisualViewportOffset
(
const
nsPoint
&
aOffset
bool
aRepaint
)
=
0
;
virtual
nsRect
GetVisualScrollRange
(
)
const
=
0
;
virtual
nsRect
GetScrollRangeForUserInputEvents
(
)
const
=
0
;
virtual
nsSize
GetLineScrollAmount
(
)
const
=
0
;
virtual
nsSize
GetPageScrollAmount
(
)
const
=
0
;
virtual
nsMargin
GetScrollPadding
(
)
const
=
0
;
enum
ScrollMomentum
{
NOT_MOMENTUM
SYNTHESIZED_MOMENTUM_EVENT
}
;
virtual
void
ScrollTo
(
nsPoint
aScrollPosition
ScrollMode
aMode
const
nsRect
*
aRange
=
nullptr
mozilla
:
:
ScrollSnapFlags
aSnapFlags
=
mozilla
:
:
ScrollSnapFlags
:
:
Disabled
mozilla
:
:
ScrollTriggeredByScript
aTriggeredByScript
=
mozilla
:
:
ScrollTriggeredByScript
:
:
No
)
=
0
;
virtual
void
ScrollToCSSPixels
(
const
CSSIntPoint
&
aScrollPosition
ScrollMode
aMode
=
ScrollMode
:
:
Instant
)
=
0
;
virtual
void
ScrollToCSSPixelsForApz
(
const
mozilla
:
:
CSSPoint
&
aScrollPosition
mozilla
:
:
ScrollSnapTargetIds
&
&
aLastSnapTargetIds
)
=
0
;
virtual
CSSIntPoint
GetScrollPositionCSSPixels
(
)
=
0
;
virtual
void
ScrollBy
(
nsIntPoint
aDelta
mozilla
:
:
ScrollUnit
aUnit
ScrollMode
aMode
nsIntPoint
*
aOverflow
=
nullptr
ScrollOrigin
aOrigin
=
ScrollOrigin
:
:
NotSpecified
ScrollMomentum
aMomentum
=
NOT_MOMENTUM
mozilla
:
:
ScrollSnapFlags
aSnapFlags
=
mozilla
:
:
ScrollSnapFlags
:
:
Disabled
)
=
0
;
virtual
void
ScrollByCSSPixels
(
const
CSSIntPoint
&
aDelta
ScrollMode
aMode
=
ScrollMode
:
:
Instant
)
=
0
;
virtual
void
ScrollSnap
(
)
=
0
;
virtual
void
ScrollToRestoredPosition
(
)
=
0
;
virtual
void
AddScrollPositionListener
(
nsIScrollPositionListener
*
aListener
)
=
0
;
virtual
void
RemoveScrollPositionListener
(
nsIScrollPositionListener
*
aListener
)
=
0
;
virtual
void
CurPosAttributeChanged
(
nsIContent
*
aChild
)
=
0
;
NS_IMETHOD
PostScrolledAreaEventForCurrentArea
(
)
=
0
;
virtual
bool
IsScrollingActive
(
)
const
=
0
;
virtual
bool
IsMaybeAsynchronouslyScrolled
(
)
const
=
0
;
virtual
bool
DidHistoryRestore
(
)
const
=
0
;
virtual
void
ClearDidHistoryRestore
(
)
=
0
;
virtual
void
MarkEverScrolled
(
)
=
0
;
virtual
bool
IsRectNearlyVisible
(
const
nsRect
&
aRect
)
const
=
0
;
virtual
nsRect
ExpandRectToNearlyVisible
(
const
nsRect
&
aRect
)
const
=
0
;
virtual
ScrollOrigin
LastScrollOrigin
(
)
const
=
0
;
enum
class
AnimationState
{
MainThread
APZPending
APZRequested
APZInProgress
TriggeredByScript
}
;
virtual
mozilla
:
:
EnumSet
<
AnimationState
>
ScrollAnimationState
(
)
const
=
0
;
virtual
mozilla
:
:
MainThreadScrollGeneration
CurrentScrollGeneration
(
)
const
=
0
;
virtual
mozilla
:
:
APZScrollGeneration
ScrollGenerationOnApz
(
)
const
=
0
;
virtual
nsPoint
LastScrollDestination
(
)
=
0
;
virtual
nsTArray
<
mozilla
:
:
ScrollPositionUpdate
>
GetScrollUpdates
(
)
const
=
0
;
virtual
bool
HasScrollUpdates
(
)
const
=
0
;
enum
class
InScrollingGesture
:
bool
{
No
Yes
}
;
virtual
void
ResetScrollInfoIfNeeded
(
const
mozilla
:
:
MainThreadScrollGeneration
&
aGeneration
const
mozilla
:
:
APZScrollGeneration
&
aGenerationOnApz
mozilla
:
:
APZScrollAnimationType
aAPZScrollAnimationType
InScrollingGesture
aInScrollingGesture
)
=
0
;
virtual
bool
WantAsyncScroll
(
)
const
=
0
;
virtual
mozilla
:
:
Maybe
<
mozilla
:
:
layers
:
:
ScrollMetadata
>
ComputeScrollMetadata
(
mozilla
:
:
layers
:
:
WebRenderLayerManager
*
aLayerManager
const
nsIFrame
*
aItemFrame
const
nsPoint
&
aOffsetToReferenceFrame
)
const
=
0
;
virtual
void
MarkScrollbarsDirtyForReflow
(
)
const
=
0
;
virtual
void
InvalidateScrollbars
(
)
const
=
0
;
virtual
void
UpdateScrollbarPosition
(
)
=
0
;
virtual
void
SetTransformingByAPZ
(
bool
aTransforming
)
=
0
;
virtual
bool
IsTransformingByAPZ
(
)
const
=
0
;
virtual
void
SetScrollableByAPZ
(
bool
aScrollable
)
=
0
;
virtual
void
SetZoomableByAPZ
(
bool
aZoomable
)
=
0
;
virtual
void
SetHasOutOfFlowContentInsideFilter
(
)
=
0
;
virtual
bool
DecideScrollableLayer
(
mozilla
:
:
nsDisplayListBuilder
*
aBuilder
nsRect
*
aVisibleRect
nsRect
*
aDirtyRect
bool
aSetBase
)
=
0
;
virtual
void
NotifyApzTransaction
(
)
=
0
;
virtual
void
NotifyApproximateFrameVisibilityUpdate
(
bool
aIgnoreDisplayPort
)
=
0
;
virtual
bool
GetDisplayPortAtLastApproximateFrameVisibilityUpdate
(
nsRect
*
aDisplayPort
)
=
0
;
virtual
void
TriggerDisplayPortExpiration
(
)
=
0
;
virtual
ScrollSnapInfo
GetScrollSnapInfo
(
)
=
0
;
virtual
void
TryResnap
(
)
=
0
;
virtual
void
PostPendingResnapIfNeeded
(
const
nsIFrame
*
aFrame
)
=
0
;
virtual
void
PostPendingResnap
(
)
=
0
;
virtual
PhysicalScrollSnapAlign
GetScrollSnapAlignFor
(
const
nsIFrame
*
aFrame
)
const
=
0
;
virtual
bool
DragScroll
(
mozilla
:
:
WidgetEvent
*
aEvent
)
=
0
;
virtual
void
AsyncScrollbarDragInitiated
(
uint64_t
aDragBlockId
mozilla
:
:
layers
:
:
ScrollDirection
aDirection
)
=
0
;
virtual
void
AsyncScrollbarDragRejected
(
)
=
0
;
virtual
bool
IsRootScrollFrameOfDocument
(
)
const
=
0
;
virtual
mozilla
:
:
Maybe
<
uint32_t
>
IsFirstScrollableFrameSequenceNumber
(
)
const
=
0
;
virtual
void
SetIsFirstScrollableFrameSequenceNumber
(
mozilla
:
:
Maybe
<
uint32_t
>
aValue
)
=
0
;
virtual
const
ScrollAnchorContainer
*
Anchor
(
)
const
=
0
;
virtual
ScrollAnchorContainer
*
Anchor
(
)
=
0
;
virtual
bool
SmoothScrollVisual
(
const
nsPoint
&
aVisualViewportOffset
mozilla
:
:
layers
:
:
FrameMetrics
:
:
ScrollOffsetUpdateType
aUpdateType
)
=
0
;
virtual
bool
IsSmoothScroll
(
mozilla
:
:
dom
:
:
ScrollBehavior
aBehavior
=
mozilla
:
:
dom
:
:
ScrollBehavior
:
:
Auto
)
const
=
0
;
}
;
#
endif
