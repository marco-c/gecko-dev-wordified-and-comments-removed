#
ifndef
nsVideoFrame_h___
#
define
nsVideoFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsIAnonymousContentCreator
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
#
include
"
FrameLayerBuilder
.
h
"
namespace
mozilla
{
namespace
layers
{
class
Layer
;
class
LayerManager
;
}
}
class
nsAString
;
class
nsPresContext
;
class
nsDisplayItem
;
class
nsVideoFrame
:
public
nsContainerFrame
public
nsIAnonymousContentCreator
{
public
:
template
<
typename
T
>
using
Maybe
=
mozilla
:
:
Maybe
<
T
>
;
using
Nothing
=
mozilla
:
:
Nothing
;
using
Visibility
=
mozilla
:
:
Visibility
;
typedef
mozilla
:
:
layers
:
:
Layer
Layer
;
typedef
mozilla
:
:
layers
:
:
LayerManager
LayerManager
;
typedef
mozilla
:
:
ContainerLayerParameters
ContainerLayerParameters
;
explicit
nsVideoFrame
(
nsStyleContext
*
aContext
)
;
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsVideoFrame
)
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsRect
&
aDirtyRect
const
nsDisplayListSet
&
aLists
)
override
;
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
)
override
;
void
OnVisibilityChange
(
Visibility
aNewVisibility
const
Maybe
<
OnNonvisible
>
&
aNonvisibleAction
=
Nothing
(
)
)
override
;
nsSize
GetVideoIntrinsicSize
(
gfxContext
*
aRenderingContext
)
;
nsSize
GetIntrinsicRatio
(
)
override
;
mozilla
:
:
LogicalSize
ComputeSize
(
gfxContext
*
aRenderingContext
mozilla
:
:
WritingMode
aWritingMode
const
mozilla
:
:
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
mozilla
:
:
LogicalSize
&
aMargin
const
mozilla
:
:
LogicalSize
&
aBorder
const
mozilla
:
:
LogicalSize
&
aPadding
ComputeSizeFlags
aFlags
)
override
;
nscoord
GetMinISize
(
gfxContext
*
aRenderingContext
)
override
;
nscoord
GetPrefISize
(
gfxContext
*
aRenderingContext
)
override
;
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
)
override
;
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
#
ifdef
ACCESSIBILITY
mozilla
:
:
a11y
:
:
AccType
AccessibleType
(
)
override
;
#
endif
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsSplittableFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eReplaced
|
nsIFrame
:
:
eReplacedSizing
)
)
;
}
nsresult
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
override
;
void
AppendAnonymousContentTo
(
nsTArray
<
nsIContent
*
>
&
aElements
uint32_t
aFilters
)
override
;
nsIContent
*
GetPosterImage
(
)
{
return
mPosterImage
;
}
bool
ShouldDisplayPoster
(
)
;
nsIContent
*
GetCaptionOverlay
(
)
{
return
mCaptionDiv
;
}
nsIContent
*
GetVideoControls
(
)
{
return
mVideoControls
;
}
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
already_AddRefed
<
Layer
>
BuildLayer
(
nsDisplayListBuilder
*
aBuilder
LayerManager
*
aManager
nsDisplayItem
*
aItem
const
ContainerLayerParameters
&
aContainerParameters
)
;
protected
:
bool
HasVideoElement
(
)
;
bool
HasVideoData
(
)
;
void
UpdatePosterSource
(
bool
aNotify
)
;
void
UpdateTextTrack
(
)
;
virtual
~
nsVideoFrame
(
)
;
nsCOMPtr
<
nsIContent
>
mVideoControls
;
nsCOMPtr
<
nsIContent
>
mPosterImage
;
nsCOMPtr
<
nsIContent
>
mCaptionDiv
;
}
;
#
endif
