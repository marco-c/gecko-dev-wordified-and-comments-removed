#
include
"
nsContainerFrame
.
h
"
#
include
"
mozilla
/
widget
/
InitData
.
h
"
#
include
"
nsContainerFrameInlines
.
h
"
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
HTMLSummaryElement
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
nsAbsoluteContainingBlock
.
h
"
#
include
"
nsAttrValue
.
h
"
#
include
"
nsAttrValueInlines
.
h
"
#
include
"
nsFlexContainerFrame
.
h
"
#
include
"
nsFrameSelection
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsPoint
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsView
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsViewManager
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsCanvasFrame
.
h
"
#
include
"
nsCSSRendering
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsCSSFrameConstructor
.
h
"
#
include
"
nsBlockFrame
.
h
"
#
include
"
nsPlaceholderFrame
.
h
"
#
include
"
mozilla
/
AutoRestore
.
h
"
#
include
"
nsIFrameInlines
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderAPI
.
h
"
#
include
<
algorithm
>
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
layout
;
using
mozilla
:
:
gfx
:
:
ColorPattern
;
using
mozilla
:
:
gfx
:
:
DeviceColor
;
using
mozilla
:
:
gfx
:
:
DrawTarget
;
using
mozilla
:
:
gfx
:
:
Rect
;
using
mozilla
:
:
gfx
:
:
sRGBColor
;
using
mozilla
:
:
gfx
:
:
ToDeviceColor
;
nsContainerFrame
:
:
~
nsContainerFrame
(
)
=
default
;
NS_QUERYFRAME_HEAD
(
nsContainerFrame
)
NS_QUERYFRAME_ENTRY
(
nsContainerFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsSplittableFrame
)
void
nsContainerFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
nsSplittableFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
if
(
aPrevInFlow
)
{
if
(
aPrevInFlow
-
>
HasAnyStateBits
(
NS_FRAME_HAS_CHILD_WITH_VIEW
)
)
{
AddStateBits
(
NS_FRAME_HAS_CHILD_WITH_VIEW
)
;
}
}
}
void
nsContainerFrame
:
:
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
&
aChildList
)
{
#
ifdef
DEBUG
nsIFrame
:
:
VerifyDirtyBitSet
(
aChildList
)
;
for
(
nsIFrame
*
f
:
aChildList
)
{
MOZ_ASSERT
(
f
-
>
GetParent
(
)
=
=
this
"
Unexpected
parent
"
)
;
}
#
endif
if
(
aListID
=
=
FrameChildListID
:
:
Principal
)
{
MOZ_ASSERT
(
mFrames
.
IsEmpty
(
)
"
unexpected
second
call
to
SetInitialChildList
"
)
;
mFrames
=
std
:
:
move
(
aChildList
)
;
}
else
if
(
aListID
=
=
FrameChildListID
:
:
Backdrop
)
{
MOZ_ASSERT
(
StyleDisplay
(
)
-
>
mTopLayer
!
=
StyleTopLayer
:
:
None
"
Only
top
layer
frames
should
have
backdrop
"
)
;
MOZ_ASSERT
(
HasAnyStateBits
(
NS_FRAME_OUT_OF_FLOW
)
"
Top
layer
frames
should
be
out
-
of
-
flow
"
)
;
MOZ_ASSERT
(
!
GetProperty
(
BackdropProperty
(
)
)
"
We
shouldn
'
t
have
setup
backdrop
frame
list
before
"
)
;
#
ifdef
DEBUG
{
nsIFrame
*
placeholder
=
aChildList
.
FirstChild
(
)
;
MOZ_ASSERT
(
aChildList
.
OnlyChild
(
)
"
Should
have
only
one
backdrop
"
)
;
MOZ_ASSERT
(
placeholder
-
>
IsPlaceholderFrame
(
)
"
The
frame
to
be
stored
should
be
a
placeholder
"
)
;
MOZ_ASSERT
(
static_cast
<
nsPlaceholderFrame
*
>
(
placeholder
)
-
>
GetOutOfFlowFrame
(
)
-
>
IsBackdropFrame
(
)
"
The
placeholder
should
points
to
a
backdrop
frame
"
)
;
}
#
endif
nsFrameList
*
list
=
new
(
PresShell
(
)
)
nsFrameList
(
std
:
:
move
(
aChildList
)
)
;
SetProperty
(
BackdropProperty
(
)
list
)
;
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
child
list
"
)
;
}
}
void
nsContainerFrame
:
:
AppendFrames
(
ChildListID
aListID
nsFrameList
&
&
aFrameList
)
{
MOZ_ASSERT
(
aListID
=
=
FrameChildListID
:
:
Principal
|
|
aListID
=
=
FrameChildListID
:
:
NoReflowPrincipal
"
unexpected
child
list
"
)
;
if
(
MOZ_UNLIKELY
(
aFrameList
.
IsEmpty
(
)
)
)
{
return
;
}
DrainSelfOverflowList
(
)
;
mFrames
.
AppendFrames
(
this
std
:
:
move
(
aFrameList
)
)
;
if
(
aListID
!
=
FrameChildListID
:
:
NoReflowPrincipal
)
{
PresShell
(
)
-
>
FrameNeedsReflow
(
this
IntrinsicDirty
:
:
FrameAndAncestors
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
}
}
void
nsContainerFrame
:
:
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
const
nsLineList
:
:
iterator
*
aPrevFrameLine
nsFrameList
&
&
aFrameList
)
{
MOZ_ASSERT
(
aListID
=
=
FrameChildListID
:
:
Principal
|
|
aListID
=
=
FrameChildListID
:
:
NoReflowPrincipal
"
unexpected
child
list
"
)
;
NS_ASSERTION
(
!
aPrevFrame
|
|
aPrevFrame
-
>
GetParent
(
)
=
=
this
"
inserting
after
sibling
frame
with
different
parent
"
)
;
if
(
MOZ_UNLIKELY
(
aFrameList
.
IsEmpty
(
)
)
)
{
return
;
}
DrainSelfOverflowList
(
)
;
mFrames
.
InsertFrames
(
this
aPrevFrame
std
:
:
move
(
aFrameList
)
)
;
if
(
aListID
!
=
FrameChildListID
:
:
NoReflowPrincipal
)
{
PresShell
(
)
-
>
FrameNeedsReflow
(
this
IntrinsicDirty
:
:
FrameAndAncestors
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
}
}
void
nsContainerFrame
:
:
RemoveFrame
(
DestroyContext
&
aContext
ChildListID
aListID
nsIFrame
*
aOldFrame
)
{
MOZ_ASSERT
(
aListID
=
=
FrameChildListID
:
:
Principal
|
|
aListID
=
=
FrameChildListID
:
:
NoReflowPrincipal
"
unexpected
child
list
"
)
;
AutoTArray
<
nsIFrame
*
10
>
continuations
;
{
nsIFrame
*
continuation
=
aOldFrame
;
while
(
continuation
)
{
continuations
.
AppendElement
(
continuation
)
;
continuation
=
continuation
-
>
GetNextContinuation
(
)
;
}
}
mozilla
:
:
PresShell
*
presShell
=
PresShell
(
)
;
nsContainerFrame
*
lastParent
=
nullptr
;
const
bool
generateReflowCommand
=
aListID
!
=
FrameChildListID
:
:
NoReflowPrincipal
;
for
(
nsIFrame
*
continuation
:
Reversed
(
continuations
)
)
{
nsContainerFrame
*
parent
=
continuation
-
>
GetParent
(
)
;
parent
-
>
StealFrame
(
continuation
)
;
continuation
-
>
Destroy
(
aContext
)
;
if
(
generateReflowCommand
&
&
parent
!
=
lastParent
)
{
presShell
-
>
FrameNeedsReflow
(
parent
IntrinsicDirty
:
:
FrameAndAncestors
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
lastParent
=
parent
;
}
}
}
void
nsContainerFrame
:
:
DestroyAbsoluteFrames
(
DestroyContext
&
aContext
)
{
if
(
IsAbsoluteContainer
(
)
)
{
GetAbsoluteContainingBlock
(
)
-
>
DestroyFrames
(
aContext
)
;
MarkAsNotAbsoluteContainingBlock
(
)
;
}
}
void
nsContainerFrame
:
:
SafelyDestroyFrameListProp
(
DestroyContext
&
aContext
mozilla
:
:
PresShell
*
aPresShell
FrameListPropertyDescriptor
aProp
)
{
while
(
nsFrameList
*
frameList
=
GetProperty
(
aProp
)
)
{
nsIFrame
*
frame
=
frameList
-
>
RemoveLastChild
(
)
;
if
(
MOZ_LIKELY
(
frame
)
)
{
frame
-
>
Destroy
(
aContext
)
;
}
else
{
Unused
<
<
TakeProperty
(
aProp
)
;
frameList
-
>
Delete
(
aPresShell
)
;
return
;
}
}
}
void
nsContainerFrame
:
:
Destroy
(
DestroyContext
&
aContext
)
{
if
(
HasView
(
)
)
{
GetView
(
)
-
>
SetFrame
(
nullptr
)
;
}
DestroyAbsoluteFrames
(
aContext
)
;
mFrames
.
DestroyFrames
(
aContext
)
;
if
(
HasAnyStateBits
(
NS_FRAME_PART_OF_IBSPLIT
)
)
{
if
(
nsIFrame
*
prevSib
=
GetProperty
(
nsIFrame
:
:
IBSplitPrevSibling
(
)
)
)
{
NS_WARNING_ASSERTION
(
this
=
=
prevSib
-
>
GetProperty
(
nsIFrame
:
:
IBSplitSibling
(
)
)
"
IB
sibling
chain
is
inconsistent
"
)
;
prevSib
-
>
RemoveProperty
(
nsIFrame
:
:
IBSplitSibling
(
)
)
;
}
if
(
nsIFrame
*
nextSib
=
GetProperty
(
nsIFrame
:
:
IBSplitSibling
(
)
)
)
{
NS_WARNING_ASSERTION
(
this
=
=
nextSib
-
>
GetProperty
(
nsIFrame
:
:
IBSplitPrevSibling
(
)
)
"
IB
sibling
chain
is
inconsistent
"
)
;
nextSib
-
>
RemoveProperty
(
nsIFrame
:
:
IBSplitPrevSibling
(
)
)
;
}
#
ifdef
DEBUG
RemoveStateBits
(
NS_FRAME_PART_OF_IBSPLIT
)
;
#
endif
}
if
(
MOZ_UNLIKELY
(
!
mProperties
.
IsEmpty
(
)
)
)
{
using
T
=
mozilla
:
:
FrameProperties
:
:
UntypedDescriptor
;
bool
hasO
=
false
hasOC
=
false
hasEOC
=
false
hasBackdrop
=
false
;
mProperties
.
ForEach
(
[
&
]
(
const
T
&
aProp
uint64_t
)
{
if
(
aProp
=
=
OverflowProperty
(
)
)
{
hasO
=
true
;
}
else
if
(
aProp
=
=
OverflowContainersProperty
(
)
)
{
hasOC
=
true
;
}
else
if
(
aProp
=
=
ExcessOverflowContainersProperty
(
)
)
{
hasEOC
=
true
;
}
else
if
(
aProp
=
=
BackdropProperty
(
)
)
{
hasBackdrop
=
true
;
}
return
true
;
}
)
;
mozilla
:
:
PresShell
*
presShell
=
PresShell
(
)
;
if
(
hasO
)
{
SafelyDestroyFrameListProp
(
aContext
presShell
OverflowProperty
(
)
)
;
}
MOZ_ASSERT
(
CanContainOverflowContainers
(
)
|
|
!
(
hasOC
|
|
hasEOC
)
"
this
type
of
frame
shouldn
'
t
have
overflow
containers
"
)
;
if
(
hasOC
)
{
SafelyDestroyFrameListProp
(
aContext
presShell
OverflowContainersProperty
(
)
)
;
}
if
(
hasEOC
)
{
SafelyDestroyFrameListProp
(
aContext
presShell
ExcessOverflowContainersProperty
(
)
)
;
}
MOZ_ASSERT
(
!
GetProperty
(
BackdropProperty
(
)
)
|
|
StyleDisplay
(
)
-
>
mTopLayer
!
=
StyleTopLayer
:
:
None
"
only
top
layer
frame
may
have
backdrop
"
)
;
if
(
hasBackdrop
)
{
SafelyDestroyFrameListProp
(
aContext
presShell
BackdropProperty
(
)
)
;
}
}
nsSplittableFrame
:
:
Destroy
(
aContext
)
;
}
const
nsFrameList
&
nsContainerFrame
:
:
GetChildList
(
ChildListID
aListID
)
const
{
switch
(
aListID
)
{
case
FrameChildListID
:
:
Principal
:
return
mFrames
;
case
FrameChildListID
:
:
Overflow
:
{
nsFrameList
*
list
=
GetOverflowFrames
(
)
;
return
list
?
*
list
:
nsFrameList
:
:
EmptyList
(
)
;
}
case
FrameChildListID
:
:
OverflowContainers
:
{
nsFrameList
*
list
=
GetOverflowContainers
(
)
;
return
list
?
*
list
:
nsFrameList
:
:
EmptyList
(
)
;
}
case
FrameChildListID
:
:
ExcessOverflowContainers
:
{
nsFrameList
*
list
=
GetExcessOverflowContainers
(
)
;
return
list
?
*
list
:
nsFrameList
:
:
EmptyList
(
)
;
}
case
FrameChildListID
:
:
Backdrop
:
{
nsFrameList
*
list
=
GetProperty
(
BackdropProperty
(
)
)
;
return
list
?
*
list
:
nsFrameList
:
:
EmptyList
(
)
;
}
default
:
return
nsSplittableFrame
:
:
GetChildList
(
aListID
)
;
}
}
void
nsContainerFrame
:
:
GetChildLists
(
nsTArray
<
ChildList
>
*
aLists
)
const
{
mFrames
.
AppendIfNonempty
(
aLists
FrameChildListID
:
:
Principal
)
;
using
T
=
mozilla
:
:
FrameProperties
:
:
UntypedDescriptor
;
mProperties
.
ForEach
(
[
this
aLists
]
(
const
T
&
aProp
uint64_t
aValue
)
{
typedef
const
nsFrameList
*
L
;
if
(
aProp
=
=
OverflowProperty
(
)
)
{
reinterpret_cast
<
L
>
(
aValue
)
-
>
AppendIfNonempty
(
aLists
FrameChildListID
:
:
Overflow
)
;
}
else
if
(
aProp
=
=
OverflowContainersProperty
(
)
)
{
MOZ_ASSERT
(
CanContainOverflowContainers
(
)
"
found
unexpected
OverflowContainersProperty
"
)
;
Unused
<
<
this
;
reinterpret_cast
<
L
>
(
aValue
)
-
>
AppendIfNonempty
(
aLists
FrameChildListID
:
:
OverflowContainers
)
;
}
else
if
(
aProp
=
=
ExcessOverflowContainersProperty
(
)
)
{
MOZ_ASSERT
(
CanContainOverflowContainers
(
)
"
found
unexpected
ExcessOverflowContainersProperty
"
)
;
Unused
<
<
this
;
reinterpret_cast
<
L
>
(
aValue
)
-
>
AppendIfNonempty
(
aLists
FrameChildListID
:
:
ExcessOverflowContainers
)
;
}
else
if
(
aProp
=
=
BackdropProperty
(
)
)
{
reinterpret_cast
<
L
>
(
aValue
)
-
>
AppendIfNonempty
(
aLists
FrameChildListID
:
:
Backdrop
)
;
}
return
true
;
}
)
;
nsSplittableFrame
:
:
GetChildLists
(
aLists
)
;
}
void
nsContainerFrame
:
:
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
DisplayBorderBackgroundOutline
(
aBuilder
aLists
)
;
BuildDisplayListForNonBlockChildren
(
aBuilder
aLists
)
;
}
void
nsContainerFrame
:
:
BuildDisplayListForNonBlockChildren
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
DisplayChildFlags
aFlags
)
{
nsIFrame
*
kid
=
mFrames
.
FirstChild
(
)
;
nsDisplayListSet
set
(
aLists
aLists
.
Content
(
)
)
;
while
(
kid
)
{
BuildDisplayListForChild
(
aBuilder
kid
set
aFlags
)
;
kid
=
kid
-
>
GetNextSibling
(
)
;
}
}
class
nsDisplaySelectionOverlay
final
:
public
nsPaintedDisplayItem
{
public
:
nsDisplaySelectionOverlay
(
nsDisplayListBuilder
*
aBuilder
nsIFrame
*
aFrame
int16_t
aSelectionValue
)
:
nsPaintedDisplayItem
(
aBuilder
aFrame
)
mSelectionValue
(
aSelectionValue
)
{
MOZ_COUNT_CTOR
(
nsDisplaySelectionOverlay
)
;
}
MOZ_COUNTED_DTOR_FINAL
(
nsDisplaySelectionOverlay
)
virtual
void
Paint
(
nsDisplayListBuilder
*
aBuilder
gfxContext
*
aCtx
)
override
;
bool
CreateWebRenderCommands
(
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
mozilla
:
:
layers
:
:
RenderRootStateManager
*
aManager
nsDisplayListBuilder
*
aDisplayListBuilder
)
override
;
NS_DISPLAY_DECL_NAME
(
"
SelectionOverlay
"
TYPE_SELECTION_OVERLAY
)
private
:
DeviceColor
ComputeColor
(
)
const
;
static
DeviceColor
ComputeColorFromSelectionStyle
(
ComputedStyle
&
)
;
static
DeviceColor
ApplyTransparencyIfNecessary
(
nscolor
)
;
int16_t
mSelectionValue
;
}
;
DeviceColor
nsDisplaySelectionOverlay
:
:
ApplyTransparencyIfNecessary
(
nscolor
aColor
)
{
if
(
NS_GET_A
(
aColor
)
!
=
255
)
{
return
ToDeviceColor
(
aColor
)
;
}
auto
color
=
sRGBColor
:
:
FromABGR
(
aColor
)
;
color
.
a
=
0
.
5
;
return
ToDeviceColor
(
color
)
;
}
DeviceColor
nsDisplaySelectionOverlay
:
:
ComputeColorFromSelectionStyle
(
ComputedStyle
&
aStyle
)
{
return
ApplyTransparencyIfNecessary
(
aStyle
.
GetVisitedDependentColor
(
&
nsStyleBackground
:
:
mBackgroundColor
)
)
;
}
DeviceColor
nsDisplaySelectionOverlay
:
:
ComputeColor
(
)
const
{
LookAndFeel
:
:
ColorID
colorID
;
if
(
RefPtr
<
ComputedStyle
>
style
=
mFrame
-
>
ComputeSelectionStyle
(
mSelectionValue
)
)
{
return
ComputeColorFromSelectionStyle
(
*
style
)
;
}
if
(
mSelectionValue
=
=
nsISelectionController
:
:
SELECTION_ON
)
{
colorID
=
LookAndFeel
:
:
ColorID
:
:
Highlight
;
}
else
if
(
mSelectionValue
=
=
nsISelectionController
:
:
SELECTION_ATTENTION
)
{
colorID
=
LookAndFeel
:
:
ColorID
:
:
TextSelectAttentionBackground
;
}
else
{
colorID
=
LookAndFeel
:
:
ColorID
:
:
TextSelectDisabledBackground
;
}
return
ApplyTransparencyIfNecessary
(
LookAndFeel
:
:
Color
(
colorID
mFrame
NS_RGB
(
255
255
255
)
)
)
;
}
void
nsDisplaySelectionOverlay
:
:
Paint
(
nsDisplayListBuilder
*
aBuilder
gfxContext
*
aCtx
)
{
DrawTarget
&
aDrawTarget
=
*
aCtx
-
>
GetDrawTarget
(
)
;
ColorPattern
color
(
ComputeColor
(
)
)
;
nsIntRect
pxRect
=
GetPaintRect
(
aBuilder
aCtx
)
.
ToOutsidePixels
(
mFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
)
;
Rect
rect
(
pxRect
.
x
pxRect
.
y
pxRect
.
width
pxRect
.
height
)
;
MaybeSnapToDevicePixels
(
rect
aDrawTarget
true
)
;
aDrawTarget
.
FillRect
(
rect
color
)
;
}
bool
nsDisplaySelectionOverlay
:
:
CreateWebRenderCommands
(
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
mozilla
:
:
layers
:
:
RenderRootStateManager
*
aManager
nsDisplayListBuilder
*
aDisplayListBuilder
)
{
wr
:
:
LayoutRect
bounds
=
wr
:
:
ToLayoutRect
(
LayoutDeviceRect
:
:
FromAppUnits
(
nsRect
(
ToReferenceFrame
(
)
Frame
(
)
-
>
GetSize
(
)
)
mFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
)
)
;
aBuilder
.
PushRect
(
bounds
bounds
!
BackfaceIsHidden
(
)
false
false
wr
:
:
ToColorF
(
ComputeColor
(
)
)
)
;
return
true
;
}
void
nsContainerFrame
:
:
DisplaySelectionOverlay
(
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
uint16_t
aContentType
)
{
if
(
!
IsSelected
(
)
|
|
!
IsVisibleForPainting
(
)
)
{
return
;
}
int16_t
displaySelection
=
PresShell
(
)
-
>
GetSelectionFlags
(
)
;
if
(
!
(
displaySelection
&
aContentType
)
)
{
return
;
}
const
nsFrameSelection
*
frameSelection
=
GetConstFrameSelection
(
)
;
int16_t
selectionValue
=
frameSelection
-
>
GetDisplaySelection
(
)
;
if
(
selectionValue
<
=
nsISelectionController
:
:
SELECTION_HIDDEN
)
{
return
;
}
nsIContent
*
newContent
=
mContent
-
>
GetParent
(
)
;
int32_t
offset
=
newContent
?
newContent
-
>
ComputeIndexOf_Deprecated
(
mContent
)
:
0
;
UniquePtr
<
SelectionDetails
>
details
=
frameSelection
-
>
LookUpSelection
(
newContent
offset
1
false
)
;
if
(
!
details
)
{
return
;
}
bool
normal
=
false
;
for
(
SelectionDetails
*
sd
=
details
.
get
(
)
;
sd
;
sd
=
sd
-
>
mNext
.
get
(
)
)
{
if
(
sd
-
>
mSelectionType
=
=
SelectionType
:
:
eNormal
)
{
normal
=
true
;
}
}
if
(
!
normal
&
&
aContentType
=
=
nsISelectionDisplay
:
:
DISPLAY_IMAGES
)
{
return
;
}
aList
-
>
AppendNewToTop
<
nsDisplaySelectionOverlay
>
(
aBuilder
this
selectionValue
)
;
}
void
nsContainerFrame
:
:
ChildIsDirty
(
nsIFrame
*
aChild
)
{
NS_ASSERTION
(
aChild
-
>
IsSubtreeDirty
(
)
"
child
isn
'
t
actually
dirty
"
)
;
AddStateBits
(
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
}
nsIFrame
:
:
FrameSearchResult
nsContainerFrame
:
:
PeekOffsetNoAmount
(
bool
aForward
int32_t
*
aOffset
)
{
NS_ASSERTION
(
aOffset
&
&
*
aOffset
<
=
1
"
aOffset
out
of
range
"
)
;
return
CONTINUE_EMPTY
;
}
nsIFrame
:
:
FrameSearchResult
nsContainerFrame
:
:
PeekOffsetCharacter
(
bool
aForward
int32_t
*
aOffset
PeekOffsetCharacterOptions
aOptions
)
{
NS_ASSERTION
(
aOffset
&
&
*
aOffset
<
=
1
"
aOffset
out
of
range
"
)
;
return
CONTINUE_EMPTY
;
}
void
nsContainerFrame
:
:
PositionFrameView
(
nsIFrame
*
aKidFrame
)
{
nsIFrame
*
parentFrame
=
aKidFrame
-
>
GetParent
(
)
;
if
(
!
aKidFrame
-
>
HasView
(
)
|
|
!
parentFrame
)
{
return
;
}
nsView
*
view
=
aKidFrame
-
>
GetView
(
)
;
nsViewManager
*
vm
=
view
-
>
GetViewManager
(
)
;
nsPoint
pt
;
nsView
*
ancestorView
=
parentFrame
-
>
GetClosestView
(
&
pt
)
;
if
(
ancestorView
!
=
view
-
>
GetParent
(
)
)
{
NS_ASSERTION
(
ancestorView
=
=
view
-
>
GetParent
(
)
-
>
GetParent
(
)
"
Allowed
only
one
anonymous
view
between
frames
"
)
;
return
;
}
pt
+
=
aKidFrame
-
>
GetPosition
(
)
;
vm
-
>
MoveViewTo
(
view
pt
.
x
pt
.
y
)
;
}
void
nsContainerFrame
:
:
ReparentFrameView
(
nsIFrame
*
aChildFrame
nsIFrame
*
aOldParentFrame
nsIFrame
*
aNewParentFrame
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
aChildFrame
"
null
child
frame
pointer
"
)
;
MOZ_ASSERT
(
aOldParentFrame
"
null
old
parent
frame
pointer
"
)
;
MOZ_ASSERT
(
aNewParentFrame
"
null
new
parent
frame
pointer
"
)
;
MOZ_ASSERT
(
aOldParentFrame
!
=
aNewParentFrame
"
same
old
and
new
parent
frame
"
)
;
while
(
!
aOldParentFrame
-
>
HasView
(
)
&
&
!
aNewParentFrame
-
>
HasView
(
)
)
{
aOldParentFrame
=
aOldParentFrame
-
>
GetParent
(
)
;
aNewParentFrame
=
aNewParentFrame
-
>
GetParent
(
)
;
NS_ASSERTION
(
aOldParentFrame
&
&
aNewParentFrame
"
didn
'
t
find
view
"
)
;
if
(
aOldParentFrame
=
=
aNewParentFrame
)
{
break
;
}
}
if
(
aOldParentFrame
=
=
aNewParentFrame
)
{
return
;
}
nsView
*
oldParentView
=
aOldParentFrame
-
>
GetClosestView
(
)
;
nsView
*
newParentView
=
aNewParentFrame
-
>
GetClosestView
(
)
;
if
(
oldParentView
!
=
newParentView
)
{
MOZ_ASSERT_UNREACHABLE
(
"
can
'
t
move
frames
between
views
"
)
;
aChildFrame
-
>
ReparentFrameViewTo
(
oldParentView
-
>
GetViewManager
(
)
newParentView
)
;
}
#
endif
}
void
nsContainerFrame
:
:
ReparentFrameViewList
(
const
nsFrameList
&
aChildFrameList
nsIFrame
*
aOldParentFrame
nsIFrame
*
aNewParentFrame
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
aChildFrameList
.
NotEmpty
(
)
"
empty
child
frame
list
"
)
;
MOZ_ASSERT
(
aOldParentFrame
"
null
old
parent
frame
pointer
"
)
;
MOZ_ASSERT
(
aNewParentFrame
"
null
new
parent
frame
pointer
"
)
;
MOZ_ASSERT
(
aOldParentFrame
!
=
aNewParentFrame
"
same
old
and
new
parent
frame
"
)
;
while
(
!
aOldParentFrame
-
>
HasView
(
)
&
&
!
aNewParentFrame
-
>
HasView
(
)
)
{
aOldParentFrame
=
aOldParentFrame
-
>
GetParent
(
)
;
aNewParentFrame
=
aNewParentFrame
-
>
GetParent
(
)
;
NS_ASSERTION
(
aOldParentFrame
&
&
aNewParentFrame
"
didn
'
t
find
view
"
)
;
if
(
aOldParentFrame
=
=
aNewParentFrame
)
{
break
;
}
}
if
(
aOldParentFrame
=
=
aNewParentFrame
)
{
return
;
}
nsView
*
oldParentView
=
aOldParentFrame
-
>
GetClosestView
(
)
;
nsView
*
newParentView
=
aNewParentFrame
-
>
GetClosestView
(
)
;
if
(
oldParentView
!
=
newParentView
)
{
MOZ_ASSERT_UNREACHABLE
(
"
can
'
t
move
frames
between
views
"
)
;
nsViewManager
*
viewManager
=
oldParentView
-
>
GetViewManager
(
)
;
for
(
nsIFrame
*
f
:
aChildFrameList
)
{
f
-
>
ReparentFrameViewTo
(
viewManager
newParentView
)
;
}
}
#
endif
}
void
nsContainerFrame
:
:
ReparentFrame
(
nsIFrame
*
aFrame
nsContainerFrame
*
aOldParent
nsContainerFrame
*
aNewParent
)
{
NS_ASSERTION
(
aOldParent
=
=
aFrame
-
>
GetParent
(
)
"
Parent
not
consistent
with
expectations
"
)
;
aFrame
-
>
SetParent
(
aNewParent
)
;
ReparentFrameView
(
aFrame
aOldParent
aNewParent
)
;
}
void
nsContainerFrame
:
:
ReparentFrames
(
nsFrameList
&
aFrameList
nsContainerFrame
*
aOldParent
nsContainerFrame
*
aNewParent
)
{
for
(
auto
*
f
:
aFrameList
)
{
ReparentFrame
(
f
aOldParent
aNewParent
)
;
}
}
void
nsContainerFrame
:
:
SetSizeConstraints
(
nsPresContext
*
aPresContext
nsIWidget
*
aWidget
const
nsSize
&
aMinSize
const
nsSize
&
aMaxSize
)
{
LayoutDeviceIntSize
devMinSize
(
aPresContext
-
>
AppUnitsToDevPixels
(
aMinSize
.
width
)
aPresContext
-
>
AppUnitsToDevPixels
(
aMinSize
.
height
)
)
;
LayoutDeviceIntSize
devMaxSize
(
aMaxSize
.
width
=
=
NS_UNCONSTRAINEDSIZE
?
NS_MAXSIZE
:
aPresContext
-
>
AppUnitsToDevPixels
(
aMaxSize
.
width
)
aMaxSize
.
height
=
=
NS_UNCONSTRAINEDSIZE
?
NS_MAXSIZE
:
aPresContext
-
>
AppUnitsToDevPixels
(
aMaxSize
.
height
)
)
;
if
(
devMinSize
.
width
>
devMaxSize
.
width
)
{
devMaxSize
.
width
=
devMinSize
.
width
;
}
if
(
devMinSize
.
height
>
devMaxSize
.
height
)
{
devMaxSize
.
height
=
devMinSize
.
height
;
}
DesktopToLayoutDeviceScale
constraintsScale
(
MOZ_WIDGET_INVALID_SCALE
)
;
if
(
nsIWidget
*
rootWidget
=
aPresContext
-
>
GetNearestWidget
(
)
)
{
constraintsScale
=
rootWidget
-
>
GetDesktopToDeviceScale
(
)
;
}
widget
:
:
SizeConstraints
constraints
(
devMinSize
devMaxSize
constraintsScale
)
;
const
LayoutDeviceIntSize
sizeDiff
=
aWidget
-
>
NormalSizeModeClientToWindowSizeDifference
(
)
;
if
(
constraints
.
mMinSize
.
width
)
{
constraints
.
mMinSize
.
width
+
=
sizeDiff
.
width
;
}
if
(
constraints
.
mMinSize
.
height
)
{
constraints
.
mMinSize
.
height
+
=
sizeDiff
.
height
;
}
if
(
constraints
.
mMaxSize
.
width
!
=
NS_MAXSIZE
)
{
constraints
.
mMaxSize
.
width
+
=
sizeDiff
.
width
;
}
if
(
constraints
.
mMaxSize
.
height
!
=
NS_MAXSIZE
)
{
constraints
.
mMaxSize
.
height
+
=
sizeDiff
.
height
;
}
aWidget
-
>
SetSizeConstraints
(
constraints
)
;
}
void
nsContainerFrame
:
:
SyncFrameViewAfterReflow
(
nsPresContext
*
aPresContext
nsIFrame
*
aFrame
nsView
*
aView
const
nsRect
&
aInkOverflowArea
ReflowChildFlags
aFlags
)
{
if
(
!
aView
)
{
return
;
}
if
(
!
(
aFlags
&
ReflowChildFlags
:
:
NoMoveView
)
)
{
PositionFrameView
(
aFrame
)
;
}
if
(
!
(
aFlags
&
ReflowChildFlags
:
:
NoSizeView
)
)
{
nsViewManager
*
vm
=
aView
-
>
GetViewManager
(
)
;
vm
-
>
ResizeView
(
aView
aInkOverflowArea
)
;
}
}
void
nsContainerFrame
:
:
DoInlineMinISize
(
const
IntrinsicSizeInput
&
aInput
InlineMinISizeData
*
aData
)
{
auto
handleChildren
=
[
&
]
(
auto
frame
auto
data
)
{
for
(
nsIFrame
*
kid
:
frame
-
>
mFrames
)
{
const
IntrinsicSizeInput
kidInput
(
aInput
kid
-
>
GetWritingMode
(
)
GetWritingMode
(
)
)
;
kid
-
>
AddInlineMinISize
(
kidInput
data
)
;
}
}
;
DoInlineIntrinsicISize
(
aData
handleChildren
)
;
}
void
nsContainerFrame
:
:
DoInlinePrefISize
(
const
IntrinsicSizeInput
&
aInput
InlinePrefISizeData
*
aData
)
{
auto
handleChildren
=
[
&
]
(
auto
frame
auto
data
)
{
for
(
nsIFrame
*
kid
:
frame
-
>
mFrames
)
{
const
IntrinsicSizeInput
kidInput
(
aInput
kid
-
>
GetWritingMode
(
)
GetWritingMode
(
)
)
;
kid
-
>
AddInlinePrefISize
(
kidInput
data
)
;
}
}
;
DoInlineIntrinsicISize
(
aData
handleChildren
)
;
aData
-
>
mLineIsEmpty
=
false
;
}
LogicalSize
nsContainerFrame
:
:
ComputeAutoSize
(
gfxContext
*
aRenderingContext
WritingMode
aWM
const
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
LogicalSize
&
aMargin
const
mozilla
:
:
LogicalSize
&
aBorderPadding
const
StyleSizeOverrides
&
aSizeOverrides
ComputeSizeFlags
aFlags
)
{
const
bool
isTableCaption
=
IsTableCaption
(
)
;
if
(
IsAbsolutelyPositionedWithDefiniteContainingBlock
(
)
&
&
!
isTableCaption
)
{
return
ComputeAbsolutePosAutoSize
(
aRenderingContext
aWM
aCBSize
aAvailableISize
aMargin
aBorderPadding
aSizeOverrides
aFlags
)
;
}
LogicalSize
result
(
aWM
0xdeadbeef
NS_UNCONSTRAINEDSIZE
)
;
if
(
aFlags
.
contains
(
ComputeSizeFlag
:
:
ShrinkWrap
)
)
{
result
=
nsIFrame
:
:
ComputeAutoSize
(
aRenderingContext
aWM
aCBSize
aAvailableISize
aMargin
aBorderPadding
aSizeOverrides
aFlags
)
;
}
else
{
result
.
ISize
(
aWM
)
=
aAvailableISize
-
aMargin
.
ISize
(
aWM
)
-
aBorderPadding
.
ISize
(
aWM
)
;
}
if
(
isTableCaption
)
{
AutoMaybeDisableFontInflation
an
(
this
)
;
WritingMode
tableWM
=
GetParent
(
)
-
>
GetWritingMode
(
)
;
const
IntrinsicSizeInput
input
(
aRenderingContext
Some
(
aCBSize
.
ConvertTo
(
GetWritingMode
(
)
aWM
)
)
Nothing
(
)
)
;
if
(
aWM
.
IsOrthogonalTo
(
tableWM
)
)
{
result
.
ISize
(
aWM
)
=
GetMinISize
(
input
)
;
}
else
{
nscoord
min
=
GetMinISize
(
input
)
;
if
(
min
>
aCBSize
.
ISize
(
aWM
)
)
{
min
=
aCBSize
.
ISize
(
aWM
)
;
}
if
(
min
>
result
.
ISize
(
aWM
)
)
{
result
.
ISize
(
aWM
)
=
min
;
}
}
}
return
result
;
}
void
nsContainerFrame
:
:
ReflowChild
(
nsIFrame
*
aKidFrame
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
const
WritingMode
&
aWM
const
LogicalPoint
&
aPos
const
nsSize
&
aContainerSize
ReflowChildFlags
aFlags
nsReflowStatus
&
aStatus
nsOverflowContinuationTracker
*
aTracker
)
{
MOZ_ASSERT
(
aReflowInput
.
mFrame
=
=
aKidFrame
"
bad
reflow
input
"
)
;
if
(
aWM
.
IsPhysicalRTL
(
)
)
{
NS_ASSERTION
(
aContainerSize
.
width
!
=
NS_UNCONSTRAINEDSIZE
"
ReflowChild
with
unconstrained
container
width
!
"
)
;
}
MOZ_ASSERT
(
aDesiredSize
.
InkOverflow
(
)
=
=
nsRect
(
0
0
0
0
)
&
&
aDesiredSize
.
ScrollableOverflow
(
)
=
=
nsRect
(
0
0
0
0
)
"
please
reset
the
overflow
areas
before
calling
ReflowChild
"
)
;
if
(
ReflowChildFlags
:
:
NoMoveFrame
!
=
(
aFlags
&
ReflowChildFlags
:
:
NoMoveFrame
)
)
{
aKidFrame
-
>
SetPosition
(
aWM
aPos
aContainerSize
)
;
}
if
(
!
(
aFlags
&
ReflowChildFlags
:
:
NoMoveView
)
)
{
PositionFrameView
(
aKidFrame
)
;
PositionChildViews
(
aKidFrame
)
;
}
aKidFrame
-
>
Reflow
(
aPresContext
aDesiredSize
aReflowInput
aStatus
)
;
if
(
!
aStatus
.
IsInlineBreakBefore
(
)
&
&
aStatus
.
IsFullyComplete
(
)
&
&
!
(
aFlags
&
ReflowChildFlags
:
:
NoDeleteNextInFlowChild
)
)
{
if
(
nsIFrame
*
kidNextInFlow
=
aKidFrame
-
>
GetNextInFlow
(
)
)
{
nsOverflowContinuationTracker
:
:
AutoFinish
fini
(
aTracker
aKidFrame
)
;
DestroyContext
context
(
PresShell
(
)
)
;
kidNextInFlow
-
>
GetParent
(
)
-
>
DeleteNextInFlowChild
(
context
kidNextInFlow
true
)
;
}
}
}
void
nsContainerFrame
:
:
ReflowChild
(
nsIFrame
*
aKidFrame
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nscoord
aX
nscoord
aY
ReflowChildFlags
aFlags
nsReflowStatus
&
aStatus
nsOverflowContinuationTracker
*
aTracker
)
{
MOZ_ASSERT
(
aReflowInput
.
mFrame
=
=
aKidFrame
"
bad
reflow
input
"
)
;
if
(
ReflowChildFlags
:
:
NoMoveFrame
!
=
(
aFlags
&
ReflowChildFlags
:
:
NoMoveFrame
)
)
{
aKidFrame
-
>
SetPosition
(
nsPoint
(
aX
aY
)
)
;
}
if
(
!
(
aFlags
&
ReflowChildFlags
:
:
NoMoveView
)
)
{
PositionFrameView
(
aKidFrame
)
;
PositionChildViews
(
aKidFrame
)
;
}
aKidFrame
-
>
Reflow
(
aPresContext
aDesiredSize
aReflowInput
aStatus
)
;
if
(
aStatus
.
IsFullyComplete
(
)
&
&
!
(
aFlags
&
ReflowChildFlags
:
:
NoDeleteNextInFlowChild
)
)
{
if
(
nsIFrame
*
kidNextInFlow
=
aKidFrame
-
>
GetNextInFlow
(
)
)
{
nsOverflowContinuationTracker
:
:
AutoFinish
fini
(
aTracker
aKidFrame
)
;
DestroyContext
context
(
PresShell
(
)
)
;
kidNextInFlow
-
>
GetParent
(
)
-
>
DeleteNextInFlowChild
(
context
kidNextInFlow
true
)
;
}
}
}
void
nsContainerFrame
:
:
PositionChildViews
(
nsIFrame
*
aFrame
)
{
if
(
!
aFrame
-
>
HasAnyStateBits
(
NS_FRAME_HAS_CHILD_WITH_VIEW
)
)
{
return
;
}
for
(
const
auto
&
[
list
listID
]
:
aFrame
-
>
ChildLists
(
)
)
{
for
(
nsIFrame
*
childFrame
:
list
)
{
if
(
childFrame
-
>
HasView
(
)
)
{
PositionFrameView
(
childFrame
)
;
}
else
{
PositionChildViews
(
childFrame
)
;
}
}
}
}
void
nsContainerFrame
:
:
FinishReflowChild
(
nsIFrame
*
aKidFrame
nsPresContext
*
aPresContext
const
ReflowOutput
&
aDesiredSize
const
ReflowInput
*
aReflowInput
const
WritingMode
&
aWM
const
LogicalPoint
&
aPos
const
nsSize
&
aContainerSize
nsIFrame
:
:
ReflowChildFlags
aFlags
)
{
MOZ_ASSERT
(
!
aReflowInput
|
|
aReflowInput
-
>
mFrame
=
=
aKidFrame
)
;
MOZ_ASSERT
(
aReflowInput
|
|
aKidFrame
-
>
IsMathMLFrame
(
)
|
|
aKidFrame
-
>
IsTableCellFrame
(
)
"
aReflowInput
should
be
passed
in
almost
all
cases
"
)
;
if
(
aWM
.
IsPhysicalRTL
(
)
)
{
NS_ASSERTION
(
aContainerSize
.
width
!
=
NS_UNCONSTRAINEDSIZE
"
FinishReflowChild
with
unconstrained
container
width
!
"
)
;
}
nsPoint
curOrigin
=
aKidFrame
-
>
GetPosition
(
)
;
const
LogicalSize
convertedSize
=
aDesiredSize
.
Size
(
aWM
)
;
LogicalPoint
pos
(
aPos
)
;
if
(
aFlags
&
ReflowChildFlags
:
:
ApplyRelativePositioning
)
{
MOZ_ASSERT
(
aReflowInput
"
caller
must
have
passed
reflow
input
"
)
;
aKidFrame
-
>
SetSize
(
aWM
convertedSize
)
;
const
LogicalMargin
offsets
=
aReflowInput
-
>
ComputedLogicalOffsets
(
aWM
)
;
ReflowInput
:
:
ApplyRelativePositioning
(
aKidFrame
aWM
offsets
&
pos
aContainerSize
)
;
}
if
(
ReflowChildFlags
:
:
NoMoveFrame
!
=
(
aFlags
&
ReflowChildFlags
:
:
NoMoveFrame
)
)
{
aKidFrame
-
>
SetRect
(
aWM
LogicalRect
(
aWM
pos
convertedSize
)
aContainerSize
)
;
}
else
{
aKidFrame
-
>
SetSize
(
aWM
convertedSize
)
;
}
if
(
aKidFrame
-
>
HasView
(
)
)
{
nsView
*
view
=
aKidFrame
-
>
GetView
(
)
;
SyncFrameViewAfterReflow
(
aPresContext
aKidFrame
view
aDesiredSize
.
InkOverflow
(
)
aFlags
)
;
}
nsPoint
newOrigin
=
aKidFrame
-
>
GetPosition
(
)
;
if
(
!
(
aFlags
&
ReflowChildFlags
:
:
NoMoveView
)
&
&
curOrigin
!
=
newOrigin
)
{
if
(
!
aKidFrame
-
>
HasView
(
)
)
{
PositionChildViews
(
aKidFrame
)
;
}
}
aKidFrame
-
>
DidReflow
(
aPresContext
aReflowInput
)
;
}
#
if
defined
(
_MSC_VER
)
&
&
!
defined
(
__clang__
)
&
&
defined
(
_M_AMD64
)
#
pragma
optimize
(
"
"
on
)
#
endif
void
nsContainerFrame
:
:
FinishReflowChild
(
nsIFrame
*
aKidFrame
nsPresContext
*
aPresContext
const
ReflowOutput
&
aDesiredSize
const
ReflowInput
*
aReflowInput
nscoord
aX
nscoord
aY
ReflowChildFlags
aFlags
)
{
MOZ_ASSERT
(
!
(
aFlags
&
ReflowChildFlags
:
:
ApplyRelativePositioning
)
"
only
the
logical
version
supports
ApplyRelativePositioning
"
"
since
ApplyRelativePositioning
requires
the
container
size
"
)
;
nsPoint
curOrigin
=
aKidFrame
-
>
GetPosition
(
)
;
nsPoint
pos
(
aX
aY
)
;
nsSize
size
(
aDesiredSize
.
PhysicalSize
(
)
)
;
if
(
ReflowChildFlags
:
:
NoMoveFrame
!
=
(
aFlags
&
ReflowChildFlags
:
:
NoMoveFrame
)
)
{
aKidFrame
-
>
SetRect
(
nsRect
(
pos
size
)
)
;
}
else
{
aKidFrame
-
>
SetSize
(
size
)
;
}
if
(
aKidFrame
-
>
HasView
(
)
)
{
nsView
*
view
=
aKidFrame
-
>
GetView
(
)
;
SyncFrameViewAfterReflow
(
aPresContext
aKidFrame
view
aDesiredSize
.
InkOverflow
(
)
aFlags
)
;
}
if
(
!
(
aFlags
&
ReflowChildFlags
:
:
NoMoveView
)
&
&
curOrigin
!
=
pos
)
{
if
(
!
aKidFrame
-
>
HasView
(
)
)
{
PositionChildViews
(
aKidFrame
)
;
}
}
aKidFrame
-
>
DidReflow
(
aPresContext
aReflowInput
)
;
}
void
nsContainerFrame
:
:
ReflowOverflowContainerChildren
(
nsPresContext
*
aPresContext
const
ReflowInput
&
aReflowInput
OverflowAreas
&
aOverflowRects
ReflowChildFlags
aFlags
nsReflowStatus
&
aStatus
ChildFrameMerger
aMergeFunc
Maybe
<
nsSize
>
aContainerSize
)
{
MOZ_ASSERT
(
aPresContext
"
null
pointer
"
)
;
nsFrameList
*
overflowContainers
=
DrainExcessOverflowContainersList
(
aMergeFunc
)
;
if
(
!
overflowContainers
)
{
return
;
}
nsOverflowContinuationTracker
tracker
(
this
false
false
)
;
bool
shouldReflowAllKids
=
aReflowInput
.
ShouldReflowAllKids
(
)
;
for
(
nsIFrame
*
frame
:
*
overflowContainers
)
{
if
(
frame
-
>
GetPrevInFlow
(
)
-
>
GetParent
(
)
!
=
GetPrevInFlow
(
)
)
{
if
(
GetNextInFlow
(
)
)
{
nsReflowStatus
status
;
status
.
SetOverflowIncomplete
(
)
;
aStatus
.
MergeCompletionStatusFrom
(
status
)
;
}
continue
;
}
auto
ScrollableOverflowExceedsAvailableBSize
=
[
this
&
aReflowInput
]
(
nsIFrame
*
aFrame
)
{
if
(
aReflowInput
.
AvailableBSize
(
)
=
=
NS_UNCONSTRAINEDSIZE
)
{
return
false
;
}
const
auto
parentWM
=
GetWritingMode
(
)
;
const
nscoord
scrollableOverflowRectBEnd
=
LogicalRect
(
parentWM
aFrame
-
>
ScrollableOverflowRectRelativeToParent
(
)
GetSize
(
)
)
.
BEnd
(
parentWM
)
;
return
scrollableOverflowRectBEnd
>
aReflowInput
.
AvailableBSize
(
)
;
}
;
if
(
shouldReflowAllKids
|
|
frame
-
>
IsSubtreeDirty
(
)
|
|
ScrollableOverflowExceedsAvailableBSize
(
frame
)
)
{
nsIFrame
*
prevInFlow
=
frame
-
>
GetPrevInFlow
(
)
;
NS_ASSERTION
(
prevInFlow
"
overflow
container
frame
must
have
a
prev
-
in
-
flow
"
)
;
NS_ASSERTION
(
frame
-
>
HasAnyStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
"
overflow
container
frame
must
have
overflow
container
bit
set
"
)
;
WritingMode
wm
=
frame
-
>
GetWritingMode
(
)
;
const
LogicalSize
availSpace
=
aReflowInput
.
AvailableSize
(
wm
)
;
StyleSizeOverrides
sizeOverride
;
sizeOverride
.
mStyleISize
.
emplace
(
StyleSize
:
:
LengthPercentage
(
LengthPercentage
:
:
FromAppUnits
(
frame
-
>
StylePosition
(
)
-
>
mBoxSizing
=
=
StyleBoxSizing
:
:
Border
?
prevInFlow
-
>
ISize
(
wm
)
:
prevInFlow
-
>
ContentISize
(
wm
)
)
)
)
;
if
(
frame
-
>
IsFlexItem
(
)
)
{
sizeOverride
.
mStyleBSize
.
emplace
(
StyleSize
:
:
LengthPercentage
(
LengthPercentage
:
:
FromAppUnits
(
0
)
)
)
;
}
ReflowOutput
desiredSize
(
wm
)
;
ReflowInput
reflowInput
(
aPresContext
aReflowInput
frame
availSpace
Nothing
(
)
{
}
sizeOverride
)
;
const
nsSize
containerSize
=
aContainerSize
?
*
aContainerSize
:
aReflowInput
.
AvailableSize
(
wm
)
.
GetPhysicalSize
(
wm
)
;
const
LogicalPoint
pos
(
wm
prevInFlow
-
>
IStart
(
wm
containerSize
)
0
)
;
nsReflowStatus
frameStatus
;
ReflowChild
(
frame
aPresContext
desiredSize
reflowInput
wm
pos
containerSize
aFlags
frameStatus
&
tracker
)
;
FinishReflowChild
(
frame
aPresContext
desiredSize
&
reflowInput
wm
pos
containerSize
aFlags
)
;
if
(
!
frameStatus
.
IsFullyComplete
(
)
)
{
if
(
frame
-
>
HasAnyStateBits
(
NS_FRAME_OUT_OF_FLOW
)
)
{
frameStatus
.
SetOverflowIncomplete
(
)
;
}
else
{
NS_ASSERTION
(
frameStatus
.
IsComplete
(
)
"
overflow
container
frames
can
'
t
be
incomplete
only
"
"
overflow
-
incomplete
"
)
;
}
nsIFrame
*
nif
=
frame
-
>
GetNextInFlow
(
)
;
if
(
!
nif
)
{
NS_ASSERTION
(
frameStatus
.
NextInFlowNeedsReflow
(
)
"
Someone
forgot
a
NextInFlowNeedsReflow
flag
"
)
;
nif
=
PresShell
(
)
-
>
FrameConstructor
(
)
-
>
CreateContinuingFrame
(
frame
this
)
;
}
else
if
(
!
nif
-
>
HasAnyStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
)
{
nif
-
>
GetParent
(
)
-
>
StealFrame
(
nif
)
;
}
tracker
.
Insert
(
nif
frameStatus
)
;
}
aStatus
.
MergeCompletionStatusFrom
(
frameStatus
)
;
}
else
{
tracker
.
Skip
(
frame
aStatus
)
;
if
(
aReflowInput
.
mFloatManager
)
{
nsBlockFrame
:
:
RecoverFloatsFor
(
frame
*
aReflowInput
.
mFloatManager
aReflowInput
.
GetWritingMode
(
)
aReflowInput
.
ComputedPhysicalSize
(
)
)
;
}
}
ConsiderChildOverflow
(
aOverflowRects
frame
false
)
;
}
}
void
nsContainerFrame
:
:
DisplayOverflowContainers
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
nsFrameList
*
overflowconts
=
GetOverflowContainers
(
)
;
if
(
overflowconts
)
{
for
(
nsIFrame
*
frame
:
*
overflowconts
)
{
BuildDisplayListForChild
(
aBuilder
frame
aLists
)
;
}
}
}
bool
nsContainerFrame
:
:
TryRemoveFrame
(
FrameListPropertyDescriptor
aProp
nsIFrame
*
aChildToRemove
)
{
nsFrameList
*
list
=
GetProperty
(
aProp
)
;
if
(
list
&
&
list
-
>
StartRemoveFrame
(
aChildToRemove
)
)
{
if
(
list
-
>
IsEmpty
(
)
)
{
Unused
<
<
TakeProperty
(
aProp
)
;
list
-
>
Delete
(
PresShell
(
)
)
;
}
return
true
;
}
return
false
;
}
bool
nsContainerFrame
:
:
MaybeStealOverflowContainerFrame
(
nsIFrame
*
aChild
)
{
bool
removed
=
false
;
if
(
MOZ_UNLIKELY
(
aChild
-
>
HasAnyStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
)
)
{
removed
=
TryRemoveFrame
(
OverflowContainersProperty
(
)
aChild
)
;
if
(
!
removed
)
{
removed
=
TryRemoveFrame
(
ExcessOverflowContainersProperty
(
)
aChild
)
;
}
}
return
removed
;
}
void
nsContainerFrame
:
:
StealFrame
(
nsIFrame
*
aChild
)
{
#
ifdef
DEBUG
if
(
!
mFrames
.
ContainsFrame
(
aChild
)
)
{
nsFrameList
*
list
=
GetOverflowFrames
(
)
;
if
(
!
list
|
|
!
list
-
>
ContainsFrame
(
aChild
)
)
{
list
=
GetOverflowContainers
(
)
;
if
(
!
list
|
|
!
list
-
>
ContainsFrame
(
aChild
)
)
{
list
=
GetExcessOverflowContainers
(
)
;
MOZ_ASSERT
(
list
&
&
list
-
>
ContainsFrame
(
aChild
)
"
aChild
isn
'
t
our
child
"
"
or
on
a
frame
list
not
supported
by
StealFrame
"
)
;
}
}
}
#
endif
if
(
MaybeStealOverflowContainerFrame
(
aChild
)
)
{
return
;
}
if
(
mFrames
.
StartRemoveFrame
(
aChild
)
)
{
return
;
}
nsFrameList
*
frameList
=
GetOverflowFrames
(
)
;
if
(
frameList
&
&
frameList
-
>
ContinueRemoveFrame
(
aChild
)
)
{
if
(
frameList
-
>
IsEmpty
(
)
)
{
DestroyOverflowList
(
)
;
}
return
;
}
MOZ_ASSERT_UNREACHABLE
(
"
StealFrame
:
can
'
t
find
aChild
"
)
;
}
nsFrameList
nsContainerFrame
:
:
StealFramesAfter
(
nsIFrame
*
aChild
)
{
NS_ASSERTION
(
!
aChild
|
|
!
aChild
-
>
HasAnyStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
"
StealFramesAfter
doesn
'
t
handle
overflow
containers
"
)
;
NS_ASSERTION
(
!
IsBlockFrame
(
)
"
unexpected
call
"
)
;
if
(
!
aChild
)
{
return
std
:
:
move
(
mFrames
)
;
}
for
(
nsIFrame
*
f
:
mFrames
)
{
if
(
f
=
=
aChild
)
{
return
mFrames
.
TakeFramesAfter
(
f
)
;
}
}
if
(
nsFrameList
*
overflowFrames
=
GetOverflowFrames
(
)
)
{
for
(
nsIFrame
*
f
:
*
overflowFrames
)
{
if
(
f
=
=
aChild
)
{
return
mFrames
.
TakeFramesAfter
(
f
)
;
}
}
}
NS_ERROR
(
"
StealFramesAfter
:
can
'
t
find
aChild
"
)
;
return
nsFrameList
(
)
;
}
nsIFrame
*
nsContainerFrame
:
:
CreateNextInFlow
(
nsIFrame
*
aFrame
)
{
MOZ_ASSERT
(
!
IsBlockFrame
(
)
"
you
should
have
called
nsBlockFrame
:
:
CreateContinuationFor
instead
"
)
;
MOZ_ASSERT
(
mFrames
.
ContainsFrame
(
aFrame
)
"
expected
an
in
-
flow
child
frame
"
)
;
nsIFrame
*
nextInFlow
=
aFrame
-
>
GetNextInFlow
(
)
;
if
(
nullptr
=
=
nextInFlow
)
{
nextInFlow
=
PresShell
(
)
-
>
FrameConstructor
(
)
-
>
CreateContinuingFrame
(
aFrame
this
)
;
mFrames
.
InsertFrame
(
nullptr
aFrame
nextInFlow
)
;
NS_FRAME_LOG
(
NS_FRAME_TRACE_NEW_FRAMES
(
"
nsContainerFrame
:
:
CreateNextInFlow
:
frame
=
%
p
nextInFlow
=
%
p
"
aFrame
nextInFlow
)
)
;
return
nextInFlow
;
}
return
nullptr
;
}
void
nsContainerFrame
:
:
DeleteNextInFlowChild
(
DestroyContext
&
aContext
nsIFrame
*
aNextInFlow
bool
aDeletingEmptyFrames
)
{
#
ifdef
DEBUG
nsIFrame
*
prevInFlow
=
aNextInFlow
-
>
GetPrevInFlow
(
)
;
#
endif
MOZ_ASSERT
(
prevInFlow
"
bad
prev
-
in
-
flow
"
)
;
nsIFrame
*
nextNextInFlow
=
aNextInFlow
-
>
GetNextInFlow
(
)
;
if
(
nextNextInFlow
)
{
AutoTArray
<
nsIFrame
*
8
>
frames
;
for
(
nsIFrame
*
f
=
nextNextInFlow
;
f
;
f
=
f
-
>
GetNextInFlow
(
)
)
{
frames
.
AppendElement
(
f
)
;
}
for
(
nsIFrame
*
delFrame
:
Reversed
(
frames
)
)
{
nsContainerFrame
*
parent
=
delFrame
-
>
GetParent
(
)
;
parent
-
>
DeleteNextInFlowChild
(
aContext
delFrame
aDeletingEmptyFrames
)
;
}
}
StealFrame
(
aNextInFlow
)
;
#
ifdef
DEBUG
if
(
aDeletingEmptyFrames
)
{
nsLayoutUtils
:
:
AssertTreeOnlyEmptyNextInFlows
(
aNextInFlow
)
;
}
#
endif
aNextInFlow
-
>
Destroy
(
aContext
)
;
MOZ_ASSERT
(
!
prevInFlow
-
>
GetNextInFlow
(
)
"
non
null
next
-
in
-
flow
"
)
;
}
void
nsContainerFrame
:
:
PushChildrenToOverflow
(
nsIFrame
*
aFromChild
nsIFrame
*
aPrevSibling
)
{
MOZ_ASSERT
(
aFromChild
"
null
pointer
"
)
;
MOZ_ASSERT
(
aPrevSibling
"
pushing
first
child
"
)
;
MOZ_ASSERT
(
aPrevSibling
-
>
GetNextSibling
(
)
=
=
aFromChild
"
bad
prev
sibling
"
)
;
SetOverflowFrames
(
mFrames
.
TakeFramesAfter
(
aPrevSibling
)
)
;
}
bool
nsContainerFrame
:
:
PushIncompleteChildren
(
const
FrameHashtable
&
aPushedItems
const
FrameHashtable
&
aIncompleteItems
const
FrameHashtable
&
aOverflowIncompleteItems
)
{
MOZ_ASSERT
(
IsFlexOrGridContainer
(
)
"
Only
Grid
/
Flex
containers
can
call
this
!
"
)
;
if
(
aPushedItems
.
IsEmpty
(
)
&
&
aIncompleteItems
.
IsEmpty
(
)
&
&
aOverflowIncompleteItems
.
IsEmpty
(
)
)
{
return
false
;
}
nsFrameList
pushedList
;
nsFrameList
incompleteList
;
nsFrameList
overflowIncompleteList
;
auto
*
fc
=
PresShell
(
)
-
>
FrameConstructor
(
)
;
for
(
nsIFrame
*
child
=
PrincipalChildList
(
)
.
FirstChild
(
)
;
child
;
)
{
MOZ_ASSERT
(
(
aPushedItems
.
Contains
(
child
)
?
1
:
0
)
+
(
aIncompleteItems
.
Contains
(
child
)
?
1
:
0
)
+
(
aOverflowIncompleteItems
.
Contains
(
child
)
?
1
:
0
)
<
=
1
"
child
should
only
be
in
one
of
these
sets
"
)
;
nsIFrame
*
next
=
child
-
>
GetNextSibling
(
)
;
if
(
aPushedItems
.
Contains
(
child
)
)
{
MOZ_ASSERT
(
child
-
>
GetParent
(
)
=
=
this
)
;
StealFrame
(
child
)
;
pushedList
.
AppendFrame
(
nullptr
child
)
;
}
else
if
(
aIncompleteItems
.
Contains
(
child
)
)
{
nsIFrame
*
childNIF
=
child
-
>
GetNextInFlow
(
)
;
if
(
!
childNIF
)
{
childNIF
=
fc
-
>
CreateContinuingFrame
(
child
this
)
;
incompleteList
.
AppendFrame
(
nullptr
childNIF
)
;
}
else
{
auto
*
parent
=
childNIF
-
>
GetParent
(
)
;
MOZ_ASSERT
(
parent
!
=
this
|
|
!
mFrames
.
ContainsFrame
(
childNIF
)
"
child
'
s
NIF
shouldn
'
t
be
in
the
same
principal
list
"
)
;
if
(
childNIF
-
>
HasAnyStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
|
|
(
parent
!
=
this
&
&
parent
!
=
GetNextInFlow
(
)
)
)
{
parent
-
>
StealFrame
(
childNIF
)
;
childNIF
-
>
RemoveStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
;
if
(
parent
=
=
this
)
{
incompleteList
.
AppendFrame
(
nullptr
childNIF
)
;
}
else
{
if
(
parent
=
=
GetNextInFlow
(
)
)
{
nsFrameList
toMove
(
childNIF
childNIF
)
;
parent
-
>
MergeSortedOverflow
(
toMove
)
;
}
else
{
ReparentFrame
(
childNIF
parent
this
)
;
incompleteList
.
AppendFrame
(
nullptr
childNIF
)
;
}
}
}
}
}
else
if
(
aOverflowIncompleteItems
.
Contains
(
child
)
)
{
nsIFrame
*
childNIF
=
child
-
>
GetNextInFlow
(
)
;
if
(
!
childNIF
)
{
childNIF
=
fc
-
>
CreateContinuingFrame
(
child
this
)
;
childNIF
-
>
AddStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
;
overflowIncompleteList
.
AppendFrame
(
nullptr
childNIF
)
;
}
else
{
DebugOnly
<
nsContainerFrame
*
>
lastParent
=
this
;
auto
*
nif
=
static_cast
<
nsContainerFrame
*
>
(
GetNextInFlow
(
)
)
;
while
(
childNIF
&
&
!
childNIF
-
>
HasAnyStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
)
{
auto
*
parent
=
childNIF
-
>
GetParent
(
)
;
parent
-
>
StealFrame
(
childNIF
)
;
childNIF
-
>
AddStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
;
if
(
parent
=
=
this
)
{
overflowIncompleteList
.
AppendFrame
(
nullptr
childNIF
)
;
}
else
{
if
(
!
nif
|
|
parent
=
=
nif
)
{
nsFrameList
toMove
(
childNIF
childNIF
)
;
parent
-
>
MergeSortedExcessOverflowContainers
(
toMove
)
;
}
else
{
ReparentFrame
(
childNIF
parent
nif
)
;
nsFrameList
toMove
(
childNIF
childNIF
)
;
nif
-
>
MergeSortedExcessOverflowContainers
(
toMove
)
;
}
nif
=
nullptr
;
}
lastParent
=
parent
;
childNIF
=
childNIF
-
>
GetNextInFlow
(
)
;
}
}
}
child
=
next
;
}
if
(
!
pushedList
.
IsEmpty
(
)
)
{
MergeSortedOverflow
(
pushedList
)
;
}
if
(
!
incompleteList
.
IsEmpty
(
)
)
{
MergeSortedOverflow
(
incompleteList
)
;
}
if
(
!
overflowIncompleteList
.
IsEmpty
(
)
)
{
auto
*
nif
=
static_cast
<
nsContainerFrame
*
>
(
GetNextInFlow
(
)
)
;
nsFrameList
*
oc
=
nif
?
nif
-
>
GetOverflowContainers
(
)
:
nullptr
;
if
(
oc
)
{
ReparentFrames
(
overflowIncompleteList
this
nif
)
;
MergeSortedFrameLists
(
*
oc
overflowIncompleteList
GetContent
(
)
)
;
}
else
{
MergeSortedExcessOverflowContainers
(
overflowIncompleteList
)
;
}
}
return
true
;
}
void
nsContainerFrame
:
:
NormalizeChildLists
(
)
{
MOZ_ASSERT
(
IsFlexOrGridContainer
(
)
"
Only
Flex
/
Grid
containers
can
call
this
!
"
)
;
const
auto
didPushItemsBit
=
IsFlexContainerFrame
(
)
?
NS_STATE_FLEX_DID_PUSH_ITEMS
:
NS_STATE_GRID_DID_PUSH_ITEMS
;
const
auto
hasChildNifBit
=
IsFlexContainerFrame
(
)
?
NS_STATE_FLEX_HAS_CHILD_NIFS
:
NS_STATE_GRID_HAS_CHILD_NIFS
;
auto
*
prevInFlow
=
static_cast
<
nsContainerFrame
*
>
(
GetPrevInFlow
(
)
)
;
if
(
prevInFlow
)
{
AutoFrameListPtr
overflow
(
PresContext
(
)
prevInFlow
-
>
StealOverflowFrames
(
)
)
;
if
(
overflow
)
{
ReparentFrames
(
*
overflow
prevInFlow
this
)
;
MergeSortedFrameLists
(
mFrames
*
overflow
GetContent
(
)
)
;
nsFrameList
continuations
;
for
(
nsIFrame
*
f
=
mFrames
.
FirstChild
(
)
;
f
;
)
{
nsIFrame
*
next
=
f
-
>
GetNextSibling
(
)
;
nsIFrame
*
pif
=
f
-
>
GetPrevInFlow
(
)
;
if
(
pif
&
&
pif
-
>
GetParent
(
)
=
=
this
)
{
mFrames
.
RemoveFrame
(
f
)
;
continuations
.
AppendFrame
(
nullptr
f
)
;
}
f
=
next
;
}
MergeSortedOverflow
(
continuations
)
;
nsFrameList
*
overflowContainers
=
DrainExcessOverflowContainersList
(
MergeSortedFrameListsFor
)
;
if
(
overflowContainers
)
{
nsFrameList
moveToEOC
;
for
(
nsIFrame
*
f
=
overflowContainers
-
>
FirstChild
(
)
;
f
;
)
{
nsIFrame
*
next
=
f
-
>
GetNextSibling
(
)
;
nsIFrame
*
pif
=
f
-
>
GetPrevInFlow
(
)
;
if
(
pif
&
&
pif
-
>
GetParent
(
)
=
=
this
)
{
overflowContainers
-
>
RemoveFrame
(
f
)
;
moveToEOC
.
AppendFrame
(
nullptr
f
)
;
}
f
=
next
;
}
if
(
overflowContainers
-
>
IsEmpty
(
)
)
{
DestroyOverflowContainers
(
)
;
}
MergeSortedExcessOverflowContainers
(
moveToEOC
)
;
}
}
}
auto
PullItemsNextInFlow
=
[
this
]
(
const
nsFrameList
&
aItems
)
{
auto
*
firstNIF
=
static_cast
<
nsContainerFrame
*
>
(
GetNextInFlow
(
)
)
;
if
(
!
firstNIF
)
{
return
;
}
nsFrameList
childNIFs
;
nsFrameList
childOCNIFs
;
for
(
auto
*
child
:
aItems
)
{
if
(
auto
*
childNIF
=
child
-
>
GetNextInFlow
(
)
)
{
if
(
auto
*
parent
=
childNIF
-
>
GetParent
(
)
;
parent
!
=
this
&
&
parent
!
=
firstNIF
)
{
parent
-
>
StealFrame
(
childNIF
)
;
ReparentFrame
(
childNIF
parent
firstNIF
)
;
if
(
childNIF
-
>
HasAnyStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
)
{
childOCNIFs
.
AppendFrame
(
nullptr
childNIF
)
;
}
else
{
childNIFs
.
AppendFrame
(
nullptr
childNIF
)
;
}
}
}
}
firstNIF
-
>
MergeSortedOverflow
(
childNIFs
)
;
firstNIF
-
>
MergeSortedExcessOverflowContainers
(
childOCNIFs
)
;
}
;
DebugOnly
<
bool
>
foundOwnPushedChild
=
false
;
{
nsFrameList
*
ourOverflow
=
GetOverflowFrames
(
)
;
if
(
ourOverflow
)
{
nsFrameList
items
;
for
(
nsIFrame
*
f
=
ourOverflow
-
>
FirstChild
(
)
;
f
;
)
{
nsIFrame
*
next
=
f
-
>
GetNextSibling
(
)
;
nsIFrame
*
pif
=
f
-
>
GetPrevInFlow
(
)
;
if
(
!
pif
|
|
pif
-
>
GetParent
(
)
!
=
this
)
{
MOZ_ASSERT
(
f
-
>
GetParent
(
)
=
=
this
)
;
ourOverflow
-
>
RemoveFrame
(
f
)
;
items
.
AppendFrame
(
nullptr
f
)
;
if
(
!
pif
)
{
foundOwnPushedChild
=
true
;
}
}
f
=
next
;
}
if
(
ourOverflow
-
>
IsEmpty
(
)
)
{
DestroyOverflowList
(
)
;
ourOverflow
=
nullptr
;
}
if
(
items
.
NotEmpty
(
)
)
{
PullItemsNextInFlow
(
items
)
;
}
MergeSortedFrameLists
(
mFrames
items
GetContent
(
)
)
;
}
}
if
(
HasAnyStateBits
(
hasChildNifBit
)
)
{
nsFrameList
framesToPush
;
nsIFrame
*
firstChild
=
mFrames
.
FirstChild
(
)
;
for
(
auto
*
child
=
firstChild
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
if
(
auto
*
childNIF
=
child
-
>
GetNextInFlow
(
)
)
{
if
(
childNIF
-
>
GetParent
(
)
=
=
this
)
{
for
(
auto
*
c
=
child
-
>
GetNextSibling
(
)
;
c
;
c
=
c
-
>
GetNextSibling
(
)
)
{
if
(
c
=
=
childNIF
)
{
mFrames
.
RemoveFrame
(
childNIF
)
;
framesToPush
.
AppendFrame
(
nullptr
childNIF
)
;
break
;
}
}
}
}
}
if
(
!
framesToPush
.
IsEmpty
(
)
)
{
MergeSortedOverflow
(
framesToPush
)
;
}
RemoveStateBits
(
hasChildNifBit
)
;
}
if
(
HasAnyStateBits
(
didPushItemsBit
)
)
{
RemoveStateBits
(
didPushItemsBit
)
;
nsFrameList
items
;
auto
*
nif
=
static_cast
<
nsContainerFrame
*
>
(
GetNextInFlow
(
)
)
;
DebugOnly
<
bool
>
nifNeedPushedItem
=
false
;
while
(
nif
)
{
nsFrameList
nifItems
;
for
(
nsIFrame
*
nifChild
=
nif
-
>
PrincipalChildList
(
)
.
FirstChild
(
)
;
nifChild
;
)
{
nsIFrame
*
next
=
nifChild
-
>
GetNextSibling
(
)
;
if
(
!
nifChild
-
>
GetPrevInFlow
(
)
)
{
nif
-
>
StealFrame
(
nifChild
)
;
ReparentFrame
(
nifChild
nif
this
)
;
nifItems
.
AppendFrame
(
nullptr
nifChild
)
;
nifNeedPushedItem
=
false
;
}
nifChild
=
next
;
}
MergeSortedFrameLists
(
items
nifItems
GetContent
(
)
)
;
if
(
!
nif
-
>
HasAnyStateBits
(
didPushItemsBit
)
)
{
MOZ_ASSERT
(
!
nifNeedPushedItem
|
|
mDidPushItemsBitMayLie
"
The
state
bit
stored
in
didPushItemsBit
lied
!
"
)
;
break
;
}
nifNeedPushedItem
=
true
;
for
(
nsIFrame
*
nifChild
=
nif
-
>
GetChildList
(
FrameChildListID
:
:
Overflow
)
.
FirstChild
(
)
;
nifChild
;
)
{
nsIFrame
*
next
=
nifChild
-
>
GetNextSibling
(
)
;
if
(
!
nifChild
-
>
GetPrevInFlow
(
)
)
{
nif
-
>
StealFrame
(
nifChild
)
;
ReparentFrame
(
nifChild
nif
this
)
;
nifItems
.
AppendFrame
(
nullptr
nifChild
)
;
nifNeedPushedItem
=
false
;
}
nifChild
=
next
;
}
MergeSortedFrameLists
(
items
nifItems
GetContent
(
)
)
;
nif
-
>
RemoveStateBits
(
didPushItemsBit
)
;
nif
=
static_cast
<
nsContainerFrame
*
>
(
nif
-
>
GetNextInFlow
(
)
)
;
MOZ_ASSERT
(
nif
|
|
!
nifNeedPushedItem
|
|
mDidPushItemsBitMayLie
"
The
state
bit
stored
in
didPushItemsBit
lied
!
"
)
;
}
if
(
!
items
.
IsEmpty
(
)
)
{
PullItemsNextInFlow
(
items
)
;
}
MOZ_ASSERT
(
foundOwnPushedChild
|
|
!
items
.
IsEmpty
(
)
|
|
mDidPushItemsBitMayLie
"
The
state
bit
stored
in
didPushItemsBit
lied
!
"
)
;
MergeSortedFrameLists
(
mFrames
items
GetContent
(
)
)
;
}
}
void
nsContainerFrame
:
:
NoteNewChildren
(
ChildListID
aListID
const
nsFrameList
&
aFrameList
)
{
MOZ_ASSERT
(
aListID
=
=
FrameChildListID
:
:
Principal
"
unexpected
child
list
"
)
;
MOZ_ASSERT
(
IsFlexOrGridContainer
(
)
"
Only
Flex
/
Grid
containers
can
call
this
!
"
)
;
mozilla
:
:
PresShell
*
presShell
=
PresShell
(
)
;
const
auto
didPushItemsBit
=
IsFlexContainerFrame
(
)
?
NS_STATE_FLEX_DID_PUSH_ITEMS
:
NS_STATE_GRID_DID_PUSH_ITEMS
;
for
(
auto
*
pif
=
GetPrevInFlow
(
)
;
pif
;
pif
=
pif
-
>
GetPrevInFlow
(
)
)
{
pif
-
>
AddStateBits
(
didPushItemsBit
)
;
presShell
-
>
FrameNeedsReflow
(
pif
IntrinsicDirty
:
:
FrameAndAncestors
NS_FRAME_IS_DIRTY
)
;
}
}
bool
nsContainerFrame
:
:
MoveOverflowToChildList
(
)
{
bool
result
=
false
;
nsContainerFrame
*
prevInFlow
=
(
nsContainerFrame
*
)
GetPrevInFlow
(
)
;
if
(
nullptr
!
=
prevInFlow
)
{
AutoFrameListPtr
prevOverflowFrames
(
PresContext
(
)
prevInFlow
-
>
StealOverflowFrames
(
)
)
;
if
(
prevOverflowFrames
)
{
NS_ASSERTION
(
mFrames
.
IsEmpty
(
)
|
|
IsTableFrame
(
)
"
bad
overflow
list
"
)
;
nsContainerFrame
:
:
ReparentFrameViewList
(
*
prevOverflowFrames
prevInFlow
this
)
;
mFrames
.
AppendFrames
(
this
std
:
:
move
(
*
prevOverflowFrames
)
)
;
result
=
true
;
}
}
return
DrainSelfOverflowList
(
)
|
|
result
;
}
void
nsContainerFrame
:
:
MergeSortedOverflow
(
nsFrameList
&
aList
)
{
if
(
aList
.
IsEmpty
(
)
)
{
return
;
}
MOZ_ASSERT
(
!
aList
.
FirstChild
(
)
-
>
HasAnyStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
"
this
is
the
wrong
list
to
put
this
child
frame
"
)
;
MOZ_ASSERT
(
aList
.
FirstChild
(
)
-
>
GetParent
(
)
=
=
this
)
;
nsFrameList
*
overflow
=
GetOverflowFrames
(
)
;
if
(
overflow
)
{
MergeSortedFrameLists
(
*
overflow
aList
GetContent
(
)
)
;
}
else
{
SetOverflowFrames
(
std
:
:
move
(
aList
)
)
;
}
}
void
nsContainerFrame
:
:
MergeSortedExcessOverflowContainers
(
nsFrameList
&
aList
)
{
if
(
aList
.
IsEmpty
(
)
)
{
return
;
}
MOZ_ASSERT
(
aList
.
FirstChild
(
)
-
>
HasAnyStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
"
this
is
the
wrong
list
to
put
this
child
frame
"
)
;
MOZ_ASSERT
(
aList
.
FirstChild
(
)
-
>
GetParent
(
)
=
=
this
)
;
if
(
nsFrameList
*
eoc
=
GetExcessOverflowContainers
(
)
)
{
MergeSortedFrameLists
(
*
eoc
aList
GetContent
(
)
)
;
}
else
{
SetExcessOverflowContainers
(
std
:
:
move
(
aList
)
)
;
}
}
nsIFrame
*
nsContainerFrame
:
:
GetFirstNonAnonBoxInSubtree
(
nsIFrame
*
aFrame
)
{
while
(
aFrame
)
{
if
(
!
aFrame
-
>
Style
(
)
-
>
IsAnonBox
(
)
|
|
nsCSSAnonBoxes
:
:
IsNonElement
(
aFrame
-
>
Style
(
)
-
>
GetPseudoType
(
)
)
)
{
break
;
}
if
(
MOZ_UNLIKELY
(
aFrame
-
>
IsTableWrapperFrame
(
)
)
)
{
nsIFrame
*
captionDescendant
=
GetFirstNonAnonBoxInSubtree
(
aFrame
-
>
GetChildList
(
FrameChildListID
:
:
Caption
)
.
FirstChild
(
)
)
;
if
(
captionDescendant
)
{
return
captionDescendant
;
}
}
else
if
(
MOZ_UNLIKELY
(
aFrame
-
>
IsTableFrame
(
)
)
)
{
nsIFrame
*
colgroupDescendant
=
GetFirstNonAnonBoxInSubtree
(
aFrame
-
>
GetChildList
(
FrameChildListID
:
:
ColGroup
)
.
FirstChild
(
)
)
;
if
(
colgroupDescendant
)
{
return
colgroupDescendant
;
}
}
aFrame
=
aFrame
-
>
PrincipalChildList
(
)
.
FirstChild
(
)
;
}
return
aFrame
;
}
static
bool
IsPrevContinuationOf
(
nsIFrame
*
aFrame1
nsIFrame
*
aFrame2
)
{
nsIFrame
*
prev
=
aFrame2
;
while
(
(
prev
=
prev
-
>
GetPrevContinuation
(
)
)
)
{
if
(
prev
=
=
aFrame1
)
{
return
true
;
}
}
return
false
;
}
void
nsContainerFrame
:
:
MergeSortedFrameLists
(
nsFrameList
&
aDest
nsFrameList
&
aSrc
nsIContent
*
aCommonAncestor
)
{
auto
FrameForDOMPositionComparison
=
[
]
(
nsIFrame
*
aFrame
)
{
if
(
!
aFrame
-
>
Style
(
)
-
>
IsAnonBox
(
)
)
{
return
aFrame
;
}
for
(
nsIFrame
*
f
=
aFrame
-
>
FirstContinuation
(
)
;
f
;
f
=
f
-
>
GetNextContinuation
(
)
)
{
if
(
nsIFrame
*
nonAnonBox
=
GetFirstNonAnonBoxInSubtree
(
f
)
)
{
return
nonAnonBox
;
}
}
MOZ_ASSERT_UNREACHABLE
(
"
Why
is
there
no
non
-
anonymous
descendants
in
the
continuation
chain
?
"
)
;
return
aFrame
;
}
;
nsIFrame
*
dest
=
aDest
.
FirstChild
(
)
;
for
(
nsIFrame
*
src
=
aSrc
.
FirstChild
(
)
;
src
;
)
{
if
(
!
dest
)
{
aDest
.
AppendFrames
(
nullptr
std
:
:
move
(
aSrc
)
)
;
break
;
}
nsIContent
*
srcContent
=
FrameForDOMPositionComparison
(
src
)
-
>
GetContent
(
)
;
nsIContent
*
destContent
=
FrameForDOMPositionComparison
(
dest
)
-
>
GetContent
(
)
;
int32_t
result
=
nsContentUtils
:
:
CompareTreePosition
<
TreeKind
:
:
Flat
>
(
srcContent
destContent
aCommonAncestor
)
;
if
(
MOZ_UNLIKELY
(
result
=
=
0
)
)
{
if
(
MOZ_UNLIKELY
(
srcContent
-
>
IsGeneratedContentContainerForBefore
(
)
)
)
{
if
(
MOZ_LIKELY
(
!
destContent
-
>
IsGeneratedContentContainerForBefore
(
)
)
|
|
:
:
IsPrevContinuationOf
(
src
dest
)
)
{
result
=
-
1
;
}
}
else
if
(
MOZ_UNLIKELY
(
srcContent
-
>
IsGeneratedContentContainerForAfter
(
)
)
)
{
if
(
MOZ_UNLIKELY
(
destContent
-
>
IsGeneratedContentContainerForAfter
(
)
)
&
&
:
:
IsPrevContinuationOf
(
src
dest
)
)
{
result
=
-
1
;
}
}
else
if
(
:
:
IsPrevContinuationOf
(
src
dest
)
)
{
result
=
-
1
;
}
}
if
(
result
<
0
)
{
nsIFrame
*
next
=
src
-
>
GetNextSibling
(
)
;
aSrc
.
RemoveFrame
(
src
)
;
aDest
.
InsertFrame
(
nullptr
dest
-
>
GetPrevSibling
(
)
src
)
;
src
=
next
;
}
else
{
dest
=
dest
-
>
GetNextSibling
(
)
;
}
}
MOZ_ASSERT
(
aSrc
.
IsEmpty
(
)
)
;
}
bool
nsContainerFrame
:
:
MoveInlineOverflowToChildList
(
nsIFrame
*
aLineContainer
)
{
MOZ_ASSERT
(
aLineContainer
"
Must
have
line
container
for
moving
inline
overflows
"
)
;
bool
result
=
false
;
if
(
auto
prevInFlow
=
static_cast
<
nsContainerFrame
*
>
(
GetPrevInFlow
(
)
)
)
{
AutoFrameListPtr
prevOverflowFrames
(
PresContext
(
)
prevInFlow
-
>
StealOverflowFrames
(
)
)
;
if
(
prevOverflowFrames
)
{
if
(
aLineContainer
-
>
GetPrevContinuation
(
)
)
{
ReparentFloatsForInlineChild
(
aLineContainer
prevOverflowFrames
-
>
FirstChild
(
)
true
)
;
}
nsContainerFrame
:
:
ReparentFrameViewList
(
*
prevOverflowFrames
prevInFlow
this
)
;
mFrames
.
InsertFrames
(
this
nullptr
std
:
:
move
(
*
prevOverflowFrames
)
)
;
result
=
true
;
}
}
return
DrainSelfOverflowList
(
)
|
|
result
;
}
bool
nsContainerFrame
:
:
DrainSelfOverflowList
(
)
{
AutoFrameListPtr
overflowFrames
(
PresContext
(
)
StealOverflowFrames
(
)
)
;
if
(
overflowFrames
)
{
mFrames
.
AppendFrames
(
nullptr
std
:
:
move
(
*
overflowFrames
)
)
;
return
true
;
}
return
false
;
}
bool
nsContainerFrame
:
:
DrainAndMergeSelfOverflowList
(
)
{
MOZ_ASSERT
(
IsFlexOrGridContainer
(
)
"
Only
Flex
/
Grid
containers
can
call
this
!
"
)
;
AutoFrameListPtr
overflowFrames
(
PresContext
(
)
StealOverflowFrames
(
)
)
;
if
(
overflowFrames
)
{
MergeSortedFrameLists
(
mFrames
*
overflowFrames
GetContent
(
)
)
;
AddStateBits
(
IsFlexContainerFrame
(
)
?
NS_STATE_FLEX_HAS_CHILD_NIFS
:
NS_STATE_GRID_HAS_CHILD_NIFS
)
;
return
true
;
}
return
false
;
}
nsFrameList
*
nsContainerFrame
:
:
DrainExcessOverflowContainersList
(
ChildFrameMerger
aMergeFunc
)
{
nsFrameList
*
overflowContainers
=
GetOverflowContainers
(
)
;
if
(
auto
*
prev
=
static_cast
<
nsContainerFrame
*
>
(
GetPrevInFlow
(
)
)
)
{
AutoFrameListPtr
excessFrames
(
PresContext
(
)
prev
-
>
StealExcessOverflowContainers
(
)
)
;
if
(
excessFrames
)
{
excessFrames
-
>
ApplySetParent
(
this
)
;
nsContainerFrame
:
:
ReparentFrameViewList
(
*
excessFrames
prev
this
)
;
if
(
overflowContainers
)
{
aMergeFunc
(
*
excessFrames
*
overflowContainers
this
)
;
*
overflowContainers
=
std
:
:
move
(
*
excessFrames
)
;
}
else
{
overflowContainers
=
SetOverflowContainers
(
std
:
:
move
(
*
excessFrames
)
)
;
}
}
}
AutoFrameListPtr
selfExcessOCFrames
(
PresContext
(
)
StealExcessOverflowContainers
(
)
)
;
if
(
selfExcessOCFrames
)
{
nsFrameList
toMove
;
auto
child
=
selfExcessOCFrames
-
>
FirstChild
(
)
;
while
(
child
)
{
auto
next
=
child
-
>
GetNextSibling
(
)
;
MOZ_ASSERT
(
child
-
>
GetPrevInFlow
(
)
"
ExcessOverflowContainers
frames
must
be
continuations
"
)
;
if
(
child
-
>
GetPrevInFlow
(
)
-
>
GetParent
(
)
!
=
this
)
{
selfExcessOCFrames
-
>
RemoveFrame
(
child
)
;
toMove
.
AppendFrame
(
nullptr
child
)
;
}
child
=
next
;
}
if
(
selfExcessOCFrames
-
>
NotEmpty
(
)
)
{
SetExcessOverflowContainers
(
std
:
:
move
(
*
selfExcessOCFrames
)
)
;
}
if
(
toMove
.
NotEmpty
(
)
)
{
if
(
overflowContainers
)
{
aMergeFunc
(
*
overflowContainers
toMove
this
)
;
}
else
{
overflowContainers
=
SetOverflowContainers
(
std
:
:
move
(
toMove
)
)
;
}
}
}
return
overflowContainers
;
}
nsIFrame
*
nsContainerFrame
:
:
GetNextInFlowChild
(
ContinuationTraversingState
&
aState
bool
*
aIsInOverflow
)
{
nsContainerFrame
*
&
nextInFlow
=
aState
.
mNextInFlow
;
while
(
nextInFlow
)
{
nsIFrame
*
frame
=
nextInFlow
-
>
mFrames
.
FirstChild
(
)
;
if
(
frame
)
{
if
(
aIsInOverflow
)
{
*
aIsInOverflow
=
false
;
}
return
frame
;
}
nsFrameList
*
overflowFrames
=
nextInFlow
-
>
GetOverflowFrames
(
)
;
if
(
overflowFrames
)
{
if
(
aIsInOverflow
)
{
*
aIsInOverflow
=
true
;
}
return
overflowFrames
-
>
FirstChild
(
)
;
}
nextInFlow
=
static_cast
<
nsContainerFrame
*
>
(
nextInFlow
-
>
GetNextInFlow
(
)
)
;
}
return
nullptr
;
}
nsIFrame
*
nsContainerFrame
:
:
PullNextInFlowChild
(
ContinuationTraversingState
&
aState
)
{
bool
isInOverflow
;
nsIFrame
*
frame
=
GetNextInFlowChild
(
aState
&
isInOverflow
)
;
if
(
frame
)
{
nsContainerFrame
*
nextInFlow
=
aState
.
mNextInFlow
;
if
(
isInOverflow
)
{
nsFrameList
*
overflowFrames
=
nextInFlow
-
>
GetOverflowFrames
(
)
;
overflowFrames
-
>
RemoveFirstChild
(
)
;
if
(
overflowFrames
-
>
IsEmpty
(
)
)
{
nextInFlow
-
>
DestroyOverflowList
(
)
;
}
}
else
{
nextInFlow
-
>
mFrames
.
RemoveFirstChild
(
)
;
}
mFrames
.
AppendFrame
(
this
frame
)
;
nsContainerFrame
:
:
ReparentFrameView
(
frame
nextInFlow
this
)
;
}
return
frame
;
}
void
nsContainerFrame
:
:
ReparentFloatsForInlineChild
(
nsIFrame
*
aOurLineContainer
nsIFrame
*
aFrame
bool
aReparentSiblings
)
{
NS_ASSERTION
(
aOurLineContainer
-
>
GetNextContinuation
(
)
|
|
aOurLineContainer
-
>
GetPrevContinuation
(
)
"
Don
'
t
call
this
when
we
have
no
continuation
it
'
s
a
waste
"
)
;
if
(
!
aFrame
)
{
NS_ASSERTION
(
aReparentSiblings
"
Why
did
we
get
called
?
"
)
;
return
;
}
nsBlockFrame
*
frameBlock
=
nsLayoutUtils
:
:
GetFloatContainingBlock
(
aFrame
)
;
if
(
!
frameBlock
|
|
frameBlock
=
=
aOurLineContainer
)
{
return
;
}
nsBlockFrame
*
ourBlock
=
do_QueryFrame
(
aOurLineContainer
)
;
NS_ASSERTION
(
ourBlock
"
Not
a
block
but
broke
vertically
?
"
)
;
while
(
true
)
{
ourBlock
-
>
ReparentFloats
(
aFrame
frameBlock
false
)
;
if
(
!
aReparentSiblings
)
{
return
;
}
nsIFrame
*
next
=
aFrame
-
>
GetNextSibling
(
)
;
if
(
!
next
)
{
return
;
}
if
(
next
-
>
GetParent
(
)
=
=
aFrame
-
>
GetParent
(
)
)
{
aFrame
=
next
;
continue
;
}
ReparentFloatsForInlineChild
(
aOurLineContainer
next
aReparentSiblings
)
;
return
;
}
}
bool
nsContainerFrame
:
:
ResolvedOrientationIsVertical
(
)
{
StyleOrient
orient
=
StyleDisplay
(
)
-
>
mOrient
;
switch
(
orient
)
{
case
StyleOrient
:
:
Horizontal
:
return
false
;
case
StyleOrient
:
:
Vertical
:
return
true
;
case
StyleOrient
:
:
Inline
:
return
GetWritingMode
(
)
.
IsVertical
(
)
;
case
StyleOrient
:
:
Block
:
return
!
GetWritingMode
(
)
.
IsVertical
(
)
;
}
MOZ_ASSERT_UNREACHABLE
(
"
unexpected
-
moz
-
orient
value
"
)
;
return
false
;
}
LogicalSize
nsContainerFrame
:
:
ComputeSizeWithIntrinsicDimensions
(
gfxContext
*
aRenderingContext
WritingMode
aWM
const
IntrinsicSize
&
aIntrinsicSize
const
AspectRatio
&
aAspectRatio
const
LogicalSize
&
aCBSize
const
LogicalSize
&
aMargin
const
LogicalSize
&
aBorderPadding
const
StyleSizeOverrides
&
aSizeOverrides
ComputeSizeFlags
aFlags
)
{
const
nsStylePosition
*
stylePos
=
StylePosition
(
)
;
const
auto
&
styleISize
=
aSizeOverrides
.
mStyleISize
?
*
aSizeOverrides
.
mStyleISize
:
stylePos
-
>
ISize
(
aWM
)
;
const
auto
&
styleBSize
=
aSizeOverrides
.
mStyleBSize
?
*
aSizeOverrides
.
mStyleBSize
:
stylePos
-
>
BSize
(
aWM
)
;
const
auto
&
aspectRatio
=
aSizeOverrides
.
mAspectRatio
?
*
aSizeOverrides
.
mAspectRatio
:
aAspectRatio
;
auto
*
parentFrame
=
GetParent
(
)
;
const
bool
isGridItem
=
IsGridItem
(
)
;
Maybe
<
LogicalAxis
>
flexItemMainAxis
;
if
(
IsFlexItem
(
)
&
&
!
parentFrame
-
>
HasAnyStateBits
(
NS_STATE_FLEX_IS_EMULATING_LEGACY_WEBKIT_BOX
)
)
{
flexItemMainAxis
=
Some
(
nsFlexContainerFrame
:
:
IsItemInlineAxisMainAxis
(
this
)
?
LogicalAxis
:
:
Inline
:
LogicalAxis
:
:
Block
)
;
}
const
bool
isAutoOrMaxContentISize
=
styleISize
.
IsAuto
(
)
|
|
styleISize
.
IsMaxContent
(
)
;
const
bool
isAutoBSize
=
nsLayoutUtils
:
:
IsAutoBSize
(
styleBSize
aCBSize
.
BSize
(
aWM
)
)
;
const
auto
boxSizingAdjust
=
stylePos
-
>
mBoxSizing
=
=
StyleBoxSizing
:
:
Border
?
aBorderPadding
:
LogicalSize
(
aWM
)
;
const
nscoord
boxSizingToMarginEdgeISize
=
aMargin
.
ISize
(
aWM
)
+
aBorderPadding
.
ISize
(
aWM
)
-
boxSizingAdjust
.
ISize
(
aWM
)
;
nscoord
iSize
minISize
maxISize
bSize
minBSize
maxBSize
;
enum
class
FillCB
{
No
Stretch
Clamp
}
;
FillCB
inlineFillCB
=
FillCB
:
:
No
;
FillCB
blockFillCB
=
FillCB
:
:
No
;
const
bool
isOrthogonal
=
aWM
.
IsOrthogonalTo
(
parentFrame
-
>
GetWritingMode
(
)
)
;
const
LogicalSize
fallbackIntrinsicSize
(
aWM
kFallbackIntrinsicSize
)
;
const
Maybe
<
nscoord
>
&
maybeIntrinsicISize
=
aIntrinsicSize
.
ISize
(
aWM
)
;
const
bool
hasIntrinsicISize
=
maybeIntrinsicISize
.
isSome
(
)
;
nscoord
intrinsicISize
=
std
:
:
max
(
0
maybeIntrinsicISize
.
valueOr
(
0
)
)
;
const
auto
&
maybeIntrinsicBSize
=
aIntrinsicSize
.
BSize
(
aWM
)
;
const
bool
hasIntrinsicBSize
=
maybeIntrinsicBSize
.
isSome
(
)
;
nscoord
intrinsicBSize
=
std
:
:
max
(
0
maybeIntrinsicBSize
.
valueOr
(
0
)
)
;
Maybe
<
nscoord
>
iSizeToFillCB
;
Maybe
<
nscoord
>
bSizeToFillCB
;
if
(
!
isAutoOrMaxContentISize
)
{
iSize
=
ComputeISizeValue
(
aRenderingContext
aWM
aCBSize
boxSizingAdjust
boxSizingToMarginEdgeISize
styleISize
styleBSize
aspectRatio
aFlags
)
.
mISize
;
}
else
if
(
MOZ_UNLIKELY
(
isGridItem
)
&
&
!
parentFrame
-
>
IsMasonry
(
isOrthogonal
?
LogicalAxis
:
:
Block
:
LogicalAxis
:
:
Inline
)
)
{
MOZ_ASSERT
(
!
IsTrueOverflowContainer
(
)
)
;
auto
cbSize
=
aCBSize
.
ISize
(
aWM
)
;
if
(
cbSize
!
=
NS_UNCONSTRAINEDSIZE
)
{
if
(
!
StyleMargin
(
)
-
>
HasInlineAxisAuto
(
aWM
StyleDisplay
(
)
-
>
mPosition
)
)
{
auto
inlineAxisAlignment
=
isOrthogonal
?
stylePos
-
>
UsedAlignSelf
(
GetParent
(
)
-
>
Style
(
)
)
.
_0
:
stylePos
-
>
UsedJustifySelf
(
GetParent
(
)
-
>
Style
(
)
)
.
_0
;
if
(
inlineAxisAlignment
=
=
StyleAlignFlags
:
:
STRETCH
)
{
inlineFillCB
=
FillCB
:
:
Stretch
;
}
}
if
(
inlineFillCB
!
=
FillCB
:
:
No
|
|
aFlags
.
contains
(
ComputeSizeFlag
:
:
IClampMarginBoxMinSize
)
)
{
iSizeToFillCB
.
emplace
(
std
:
:
max
(
0
cbSize
-
aBorderPadding
.
ISize
(
aWM
)
-
aMargin
.
ISize
(
aWM
)
)
)
;
}
}
else
{
aFlags
-
=
ComputeSizeFlag
:
:
IClampMarginBoxMinSize
;
}
}
const
bool
isFlexItemInlineAxisMainAxis
=
flexItemMainAxis
&
&
*
flexItemMainAxis
=
=
LogicalAxis
:
:
Inline
;
const
auto
&
maxISizeCoord
=
stylePos
-
>
MaxISize
(
aWM
)
;
if
(
!
maxISizeCoord
.
IsNone
(
)
&
&
!
isFlexItemInlineAxisMainAxis
)
{
maxISize
=
ComputeISizeValue
(
aRenderingContext
aWM
aCBSize
boxSizingAdjust
boxSizingToMarginEdgeISize
maxISizeCoord
styleBSize
aspectRatio
aFlags
)
.
mISize
;
}
else
{
maxISize
=
nscoord_MAX
;
}
const
auto
&
minISizeCoord
=
stylePos
-
>
MinISize
(
aWM
)
;
if
(
!
minISizeCoord
.
IsAuto
(
)
&
&
!
isFlexItemInlineAxisMainAxis
)
{
minISize
=
ComputeISizeValue
(
aRenderingContext
aWM
aCBSize
boxSizingAdjust
boxSizingToMarginEdgeISize
minISizeCoord
styleBSize
aspectRatio
aFlags
)
.
mISize
;
}
else
{
minISize
=
0
;
}
if
(
!
isAutoBSize
)
{
bSize
=
nsLayoutUtils
:
:
ComputeBSizeValueHandlingStretch
(
aCBSize
.
BSize
(
aWM
)
aMargin
.
BSize
(
aWM
)
aBorderPadding
.
BSize
(
aWM
)
boxSizingAdjust
.
BSize
(
aWM
)
styleBSize
)
;
}
else
if
(
MOZ_UNLIKELY
(
isGridItem
)
&
&
!
parentFrame
-
>
IsMasonry
(
isOrthogonal
?
LogicalAxis
:
:
Inline
:
LogicalAxis
:
:
Block
)
)
{
MOZ_ASSERT
(
!
IsTrueOverflowContainer
(
)
)
;
auto
cbSize
=
aCBSize
.
BSize
(
aWM
)
;
if
(
cbSize
!
=
NS_UNCONSTRAINEDSIZE
)
{
if
(
!
StyleMargin
(
)
-
>
HasBlockAxisAuto
(
aWM
StyleDisplay
(
)
-
>
mPosition
)
)
{
auto
blockAxisAlignment
=
!
isOrthogonal
?
stylePos
-
>
UsedAlignSelf
(
GetParent
(
)
-
>
Style
(
)
)
.
_0
:
stylePos
-
>
UsedJustifySelf
(
GetParent
(
)
-
>
Style
(
)
)
.
_0
;
if
(
blockAxisAlignment
=
=
StyleAlignFlags
:
:
STRETCH
)
{
blockFillCB
=
FillCB
:
:
Stretch
;
}
}
if
(
blockFillCB
!
=
FillCB
:
:
No
|
|
aFlags
.
contains
(
ComputeSizeFlag
:
:
BClampMarginBoxMinSize
)
)
{
bSizeToFillCB
.
emplace
(
std
:
:
max
(
0
cbSize
-
aBorderPadding
.
BSize
(
aWM
)
-
aMargin
.
BSize
(
aWM
)
)
)
;
}
}
else
{
aFlags
-
=
ComputeSizeFlag
:
:
BClampMarginBoxMinSize
;
}
}
const
bool
isFlexItemBlockAxisMainAxis
=
flexItemMainAxis
&
&
*
flexItemMainAxis
=
=
LogicalAxis
:
:
Block
;
const
auto
&
maxBSizeCoord
=
stylePos
-
>
MaxBSize
(
aWM
)
;
if
(
!
nsLayoutUtils
:
:
IsAutoBSize
(
maxBSizeCoord
aCBSize
.
BSize
(
aWM
)
)
&
&
!
isFlexItemBlockAxisMainAxis
)
{
maxBSize
=
nsLayoutUtils
:
:
ComputeBSizeValueHandlingStretch
(
aCBSize
.
BSize
(
aWM
)
aMargin
.
BSize
(
aWM
)
aBorderPadding
.
BSize
(
aWM
)
boxSizingAdjust
.
BSize
(
aWM
)
maxBSizeCoord
)
;
}
else
{
maxBSize
=
nscoord_MAX
;
}
const
auto
&
minBSizeCoord
=
stylePos
-
>
MinBSize
(
aWM
)
;
if
(
!
nsLayoutUtils
:
:
IsAutoBSize
(
minBSizeCoord
aCBSize
.
BSize
(
aWM
)
)
&
&
!
isFlexItemBlockAxisMainAxis
)
{
minBSize
=
nsLayoutUtils
:
:
ComputeBSizeValueHandlingStretch
(
aCBSize
.
BSize
(
aWM
)
aMargin
.
BSize
(
aWM
)
aBorderPadding
.
BSize
(
aWM
)
boxSizingAdjust
.
BSize
(
aWM
)
minBSizeCoord
)
;
}
else
{
minBSize
=
0
;
}
NS_ASSERTION
(
aCBSize
.
ISize
(
aWM
)
!
=
NS_UNCONSTRAINEDSIZE
"
Our
containing
block
must
not
have
unconstrained
inline
-
size
!
"
)
;
MOZ_ASSERT
(
!
(
inlineFillCB
!
=
FillCB
:
:
No
|
|
aFlags
.
contains
(
ComputeSizeFlag
:
:
IClampMarginBoxMinSize
)
)
|
|
iSizeToFillCB
"
iSizeToFillCB
must
be
valid
when
stretching
or
clamping
in
the
"
"
inline
axis
!
"
)
;
MOZ_ASSERT
(
!
(
blockFillCB
!
=
FillCB
:
:
No
|
|
aFlags
.
contains
(
ComputeSizeFlag
:
:
BClampMarginBoxMinSize
)
)
|
|
bSizeToFillCB
"
bSizeToFillCB
must
be
valid
when
stretching
or
clamping
in
the
"
"
block
axis
!
"
)
;
if
(
isAutoOrMaxContentISize
)
{
if
(
isAutoBSize
)
{
nscoord
tentISize
tentBSize
;
if
(
hasIntrinsicISize
)
{
tentISize
=
intrinsicISize
;
}
else
if
(
hasIntrinsicBSize
&
&
aspectRatio
)
{
tentISize
=
aspectRatio
.
ComputeRatioDependentSize
(
LogicalAxis
:
:
Inline
aWM
intrinsicBSize
boxSizingAdjust
)
;
}
else
if
(
aspectRatio
)
{
tentISize
=
aCBSize
.
ISize
(
aWM
)
-
boxSizingToMarginEdgeISize
;
if
(
tentISize
<
0
)
{
tentISize
=
0
;
}
}
else
{
tentISize
=
fallbackIntrinsicSize
.
ISize
(
aWM
)
;
}
if
(
aFlags
.
contains
(
ComputeSizeFlag
:
:
IClampMarginBoxMinSize
)
&
&
inlineFillCB
!
=
FillCB
:
:
Stretch
&
&
tentISize
>
*
iSizeToFillCB
)
{
inlineFillCB
=
(
blockFillCB
=
=
FillCB
:
:
Stretch
?
FillCB
:
:
Stretch
:
FillCB
:
:
Clamp
)
;
}
if
(
hasIntrinsicBSize
)
{
tentBSize
=
intrinsicBSize
;
}
else
if
(
aspectRatio
)
{
tentBSize
=
aspectRatio
.
ComputeRatioDependentSize
(
LogicalAxis
:
:
Block
aWM
tentISize
boxSizingAdjust
)
;
}
else
{
tentBSize
=
fallbackIntrinsicSize
.
BSize
(
aWM
)
;
}
if
(
aFlags
.
contains
(
ComputeSizeFlag
:
:
BClampMarginBoxMinSize
)
&
&
blockFillCB
!
=
FillCB
:
:
Stretch
&
&
tentBSize
>
*
bSizeToFillCB
)
{
blockFillCB
=
(
inlineFillCB
=
=
FillCB
:
:
Stretch
?
FillCB
:
:
Stretch
:
FillCB
:
:
Clamp
)
;
}
if
(
inlineFillCB
=
=
FillCB
:
:
Stretch
)
{
tentISize
=
*
iSizeToFillCB
;
if
(
blockFillCB
=
=
FillCB
:
:
Stretch
)
{
tentBSize
=
*
bSizeToFillCB
;
}
else
if
(
aspectRatio
)
{
tentBSize
=
aspectRatio
.
ComputeRatioDependentSize
(
LogicalAxis
:
:
Block
aWM
*
iSizeToFillCB
boxSizingAdjust
)
;
}
}
else
if
(
blockFillCB
=
=
FillCB
:
:
Stretch
)
{
tentBSize
=
*
bSizeToFillCB
;
if
(
aspectRatio
)
{
tentISize
=
aspectRatio
.
ComputeRatioDependentSize
(
LogicalAxis
:
:
Inline
aWM
*
bSizeToFillCB
boxSizingAdjust
)
;
}
}
else
if
(
inlineFillCB
=
=
FillCB
:
:
Clamp
&
&
aspectRatio
)
{
tentISize
=
*
iSizeToFillCB
;
tentBSize
=
aspectRatio
.
ComputeRatioDependentSize
(
LogicalAxis
:
:
Block
aWM
*
iSizeToFillCB
boxSizingAdjust
)
;
if
(
blockFillCB
=
=
FillCB
:
:
Clamp
&
&
tentBSize
>
*
bSizeToFillCB
)
{
tentBSize
=
*
bSizeToFillCB
;
tentISize
=
aspectRatio
.
ComputeRatioDependentSize
(
LogicalAxis
:
:
Inline
aWM
*
bSizeToFillCB
boxSizingAdjust
)
;
}
}
else
if
(
blockFillCB
=
=
FillCB
:
:
Clamp
&
&
aspectRatio
)
{
tentBSize
=
*
bSizeToFillCB
;
tentISize
=
aspectRatio
.
ComputeRatioDependentSize
(
LogicalAxis
:
:
Inline
aWM
*
bSizeToFillCB
boxSizingAdjust
)
;
}
if
(
aspectRatio
&
&
inlineFillCB
!
=
FillCB
:
:
Stretch
&
&
blockFillCB
!
=
FillCB
:
:
Stretch
)
{
nsSize
autoSize
=
nsLayoutUtils
:
:
ComputeAutoSizeWithIntrinsicDimensions
(
minISize
minBSize
maxISize
maxBSize
tentISize
tentBSize
)
;
iSize
=
autoSize
.
width
;
bSize
=
autoSize
.
height
;
}
else
{
iSize
=
CSSMinMax
(
tentISize
minISize
maxISize
)
;
bSize
=
CSSMinMax
(
tentBSize
minBSize
maxBSize
)
;
}
}
else
{
bSize
=
CSSMinMax
(
bSize
minBSize
maxBSize
)
;
if
(
inlineFillCB
=
=
FillCB
:
:
Stretch
)
{
iSize
=
*
iSizeToFillCB
;
}
else
if
(
aspectRatio
)
{
iSize
=
aspectRatio
.
ComputeRatioDependentSize
(
LogicalAxis
:
:
Inline
aWM
bSize
boxSizingAdjust
)
;
}
else
if
(
hasIntrinsicISize
)
{
iSize
=
aFlags
.
contains
(
ComputeSizeFlag
:
:
IClampMarginBoxMinSize
)
&
&
intrinsicISize
>
*
iSizeToFillCB
?
*
iSizeToFillCB
:
intrinsicISize
;
}
else
{
iSize
=
fallbackIntrinsicSize
.
ISize
(
aWM
)
;
}
iSize
=
CSSMinMax
(
iSize
minISize
maxISize
)
;
}
}
else
{
if
(
isAutoBSize
)
{
iSize
=
CSSMinMax
(
iSize
minISize
maxISize
)
;
if
(
blockFillCB
=
=
FillCB
:
:
Stretch
)
{
bSize
=
*
bSizeToFillCB
;
}
else
if
(
aspectRatio
)
{
bSize
=
aspectRatio
.
ComputeRatioDependentSize
(
LogicalAxis
:
:
Block
aWM
iSize
boxSizingAdjust
)
;
}
else
if
(
hasIntrinsicBSize
)
{
bSize
=
aFlags
.
contains
(
ComputeSizeFlag
:
:
BClampMarginBoxMinSize
)
&
&
intrinsicBSize
>
*
bSizeToFillCB
?
*
bSizeToFillCB
:
intrinsicBSize
;
}
else
{
bSize
=
fallbackIntrinsicSize
.
BSize
(
aWM
)
;
}
bSize
=
CSSMinMax
(
bSize
minBSize
maxBSize
)
;
}
else
{
iSize
=
CSSMinMax
(
iSize
minISize
maxISize
)
;
bSize
=
CSSMinMax
(
bSize
minBSize
maxBSize
)
;
}
}
return
LogicalSize
(
aWM
iSize
bSize
)
;
}
nsRect
nsContainerFrame
:
:
ComputeSimpleTightBounds
(
DrawTarget
*
aDrawTarget
)
const
{
if
(
StyleOutline
(
)
-
>
ShouldPaintOutline
(
)
|
|
StyleBorder
(
)
-
>
HasBorder
(
)
|
|
!
StyleBackground
(
)
-
>
IsTransparent
(
this
)
|
|
StyleDisplay
(
)
-
>
HasAppearance
(
)
)
{
return
InkOverflowRect
(
)
;
}
nsRect
r
(
0
0
0
0
)
;
for
(
const
auto
&
childLists
:
ChildLists
(
)
)
{
for
(
nsIFrame
*
child
:
childLists
.
mList
)
{
r
.
UnionRect
(
r
child
-
>
ComputeTightBounds
(
aDrawTarget
)
+
child
-
>
GetPosition
(
)
)
;
}
}
return
r
;
}
void
nsContainerFrame
:
:
PushDirtyBitToAbsoluteFrames
(
)
{
if
(
!
HasAnyStateBits
(
NS_FRAME_IS_DIRTY
)
)
{
return
;
}
if
(
!
HasAbsolutelyPositionedChildren
(
)
)
{
return
;
}
GetAbsoluteContainingBlock
(
)
-
>
MarkAllFramesDirty
(
)
;
}
#
define
MAX_FRAME_DEPTH
(
MAX_REFLOW_DEPTH
+
4
)
bool
nsContainerFrame
:
:
IsFrameTreeTooDeep
(
const
ReflowInput
&
aReflowInput
ReflowOutput
&
aMetrics
nsReflowStatus
&
aStatus
)
{
if
(
aReflowInput
.
mReflowDepth
>
MAX_FRAME_DEPTH
)
{
NS_WARNING
(
"
frame
tree
too
deep
;
setting
zero
size
and
returning
"
)
;
AddStateBits
(
NS_FRAME_TOO_DEEP_IN_FRAME_TREE
)
;
ClearOverflowRects
(
)
;
aMetrics
.
ClearSize
(
)
;
aMetrics
.
SetBlockStartAscent
(
0
)
;
aMetrics
.
mCarriedOutBEndMargin
.
Zero
(
)
;
aMetrics
.
mOverflowAreas
.
Clear
(
)
;
aStatus
.
Reset
(
)
;
if
(
GetNextInFlow
(
)
)
{
aStatus
.
SetIncomplete
(
)
;
}
return
true
;
}
RemoveStateBits
(
NS_FRAME_TOO_DEEP_IN_FRAME_TREE
)
;
return
false
;
}
bool
nsContainerFrame
:
:
ShouldAvoidBreakInside
(
const
ReflowInput
&
aReflowInput
)
const
{
MOZ_ASSERT
(
this
=
=
aReflowInput
.
mFrame
"
Caller
should
pass
a
ReflowInput
for
this
frame
!
"
)
;
const
auto
*
disp
=
StyleDisplay
(
)
;
const
bool
mayAvoidBreak
=
[
&
]
{
switch
(
disp
-
>
mBreakInside
)
{
case
StyleBreakWithin
:
:
Auto
:
return
false
;
case
StyleBreakWithin
:
:
Avoid
:
return
true
;
case
StyleBreakWithin
:
:
AvoidPage
:
return
aReflowInput
.
mBreakType
=
=
ReflowInput
:
:
BreakType
:
:
Page
;
case
StyleBreakWithin
:
:
AvoidColumn
:
return
aReflowInput
.
mBreakType
=
=
ReflowInput
:
:
BreakType
:
:
Column
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
break
-
inside
value
"
)
;
return
false
;
}
(
)
;
if
(
!
mayAvoidBreak
)
{
return
false
;
}
if
(
aReflowInput
.
mFlags
.
mIsTopOfPage
)
{
return
false
;
}
if
(
IsAbsolutelyPositioned
(
disp
)
)
{
return
false
;
}
if
(
GetPrevInFlow
(
)
)
{
return
false
;
}
return
true
;
}
void
nsContainerFrame
:
:
ConsiderChildOverflow
(
OverflowAreas
&
aOverflowAreas
nsIFrame
*
aChildFrame
bool
aAsIfScrolled
)
{
if
(
StyleDisplay
(
)
-
>
IsContainLayout
(
)
&
&
SupportsContainLayoutAndPaint
(
)
&
&
!
aAsIfScrolled
)
{
const
OverflowAreas
childOverflows
(
aChildFrame
-
>
InkOverflowRect
(
)
nsRect
(
)
)
;
aOverflowAreas
.
UnionWith
(
childOverflows
+
aChildFrame
-
>
GetPosition
(
)
)
;
}
else
{
aOverflowAreas
.
UnionWith
(
aChildFrame
-
>
GetActualAndNormalOverflowAreasRelativeToParent
(
)
)
;
}
}
static
StyleAlignFlags
MapCSSAlignment
(
StyleAlignFlags
aFlags
const
ReflowInput
&
aChildRI
LogicalAxis
aLogicalAxis
WritingMode
aWM
)
{
StyleAlignFlags
alignmentFlags
=
aFlags
&
StyleAlignFlags
:
:
FLAG_BITS
;
aFlags
&
=
~
StyleAlignFlags
:
:
FLAG_BITS
;
if
(
aFlags
=
=
StyleAlignFlags
:
:
NORMAL
)
{
aFlags
=
aChildRI
.
mFrame
-
>
IsReplaced
(
)
?
StyleAlignFlags
:
:
START
:
StyleAlignFlags
:
:
STRETCH
;
}
else
if
(
aFlags
=
=
StyleAlignFlags
:
:
FLEX_START
)
{
aFlags
=
StyleAlignFlags
:
:
START
;
}
else
if
(
aFlags
=
=
StyleAlignFlags
:
:
FLEX_END
)
{
aFlags
=
StyleAlignFlags
:
:
END
;
}
else
if
(
aFlags
=
=
StyleAlignFlags
:
:
LEFT
|
|
aFlags
=
=
StyleAlignFlags
:
:
RIGHT
)
{
if
(
aLogicalAxis
=
=
LogicalAxis
:
:
Inline
)
{
const
bool
isLeft
=
(
aFlags
=
=
StyleAlignFlags
:
:
LEFT
)
;
aFlags
=
(
isLeft
=
=
aWM
.
IsBidiLTR
(
)
)
?
StyleAlignFlags
:
:
START
:
StyleAlignFlags
:
:
END
;
}
else
{
aFlags
=
StyleAlignFlags
:
:
START
;
}
}
else
if
(
aFlags
=
=
StyleAlignFlags
:
:
BASELINE
)
{
aFlags
=
StyleAlignFlags
:
:
START
;
}
else
if
(
aFlags
=
=
StyleAlignFlags
:
:
LAST_BASELINE
)
{
aFlags
=
StyleAlignFlags
:
:
END
;
}
return
(
aFlags
|
alignmentFlags
)
;
}
StyleAlignFlags
nsContainerFrame
:
:
CSSAlignmentForAbsPosChild
(
const
ReflowInput
&
aChildRI
LogicalAxis
aLogicalAxis
)
const
{
MOZ_ASSERT
(
aChildRI
.
mFrame
-
>
IsAbsolutelyPositioned
(
)
"
This
method
should
only
be
called
for
abspos
children
"
)
;
StyleAlignFlags
alignment
=
(
aLogicalAxis
=
=
LogicalAxis
:
:
Inline
)
?
aChildRI
.
mStylePosition
-
>
UsedJustifySelf
(
Style
(
)
)
.
_0
:
aChildRI
.
mStylePosition
-
>
UsedAlignSelf
(
Style
(
)
)
.
_0
;
return
MapCSSAlignment
(
alignment
aChildRI
aLogicalAxis
GetWritingMode
(
)
)
;
}
StyleAlignFlags
nsContainerFrame
:
:
CSSAlignmentForAbsPosChildWithinContainingBlock
(
const
ReflowInput
&
aChildRI
LogicalAxis
aLogicalAxis
)
const
{
MOZ_ASSERT
(
aChildRI
.
mFrame
-
>
IsAbsolutelyPositioned
(
)
"
This
method
should
only
be
called
for
abspos
children
"
)
;
StyleAlignFlags
alignment
=
(
aLogicalAxis
=
=
LogicalAxis
:
:
Inline
)
?
aChildRI
.
mStylePosition
-
>
UsedJustifySelf
(
nullptr
)
.
_0
:
aChildRI
.
mStylePosition
-
>
UsedAlignSelf
(
nullptr
)
.
_0
;
return
MapCSSAlignment
(
alignment
aChildRI
aLogicalAxis
GetWritingMode
(
)
)
;
}
nsOverflowContinuationTracker
:
:
nsOverflowContinuationTracker
(
nsContainerFrame
*
aFrame
bool
aWalkOOFFrames
bool
aSkipOverflowContainerChildren
)
:
mOverflowContList
(
nullptr
)
mPrevOverflowCont
(
nullptr
)
mSentry
(
nullptr
)
mParent
(
aFrame
)
mSkipOverflowContainerChildren
(
aSkipOverflowContainerChildren
)
mWalkOOFFrames
(
aWalkOOFFrames
)
{
MOZ_ASSERT
(
aFrame
"
null
frame
pointer
"
)
;
SetupOverflowContList
(
)
;
}
void
nsOverflowContinuationTracker
:
:
SetupOverflowContList
(
)
{
MOZ_ASSERT
(
mParent
"
null
frame
pointer
"
)
;
MOZ_ASSERT
(
!
mOverflowContList
"
already
have
list
"
)
;
nsContainerFrame
*
nif
=
static_cast
<
nsContainerFrame
*
>
(
mParent
-
>
GetNextInFlow
(
)
)
;
if
(
nif
)
{
mOverflowContList
=
nif
-
>
GetOverflowContainers
(
)
;
if
(
mOverflowContList
)
{
mParent
=
nif
;
SetUpListWalker
(
)
;
}
}
if
(
!
mOverflowContList
)
{
mOverflowContList
=
mParent
-
>
GetExcessOverflowContainers
(
)
;
if
(
mOverflowContList
)
{
SetUpListWalker
(
)
;
}
}
}
void
nsOverflowContinuationTracker
:
:
SetUpListWalker
(
)
{
NS_ASSERTION
(
!
mSentry
&
&
!
mPrevOverflowCont
"
forgot
to
reset
mSentry
or
mPrevOverflowCont
"
)
;
if
(
mOverflowContList
)
{
nsIFrame
*
cur
=
mOverflowContList
-
>
FirstChild
(
)
;
if
(
mSkipOverflowContainerChildren
)
{
while
(
cur
&
&
cur
-
>
GetPrevInFlow
(
)
-
>
HasAnyStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
)
{
mPrevOverflowCont
=
cur
;
cur
=
cur
-
>
GetNextSibling
(
)
;
}
while
(
cur
&
&
(
cur
-
>
HasAnyStateBits
(
NS_FRAME_OUT_OF_FLOW
)
!
=
mWalkOOFFrames
)
)
{
mPrevOverflowCont
=
cur
;
cur
=
cur
-
>
GetNextSibling
(
)
;
}
}
if
(
cur
)
{
mSentry
=
cur
-
>
GetPrevInFlow
(
)
;
}
}
}
void
nsOverflowContinuationTracker
:
:
StepForward
(
)
{
MOZ_ASSERT
(
mOverflowContList
"
null
list
"
)
;
if
(
mPrevOverflowCont
)
{
mPrevOverflowCont
=
mPrevOverflowCont
-
>
GetNextSibling
(
)
;
}
else
{
mPrevOverflowCont
=
mOverflowContList
-
>
FirstChild
(
)
;
}
if
(
mSkipOverflowContainerChildren
)
{
nsIFrame
*
cur
=
mPrevOverflowCont
-
>
GetNextSibling
(
)
;
while
(
cur
&
&
(
cur
-
>
HasAnyStateBits
(
NS_FRAME_OUT_OF_FLOW
)
!
=
mWalkOOFFrames
)
)
{
mPrevOverflowCont
=
cur
;
cur
=
cur
-
>
GetNextSibling
(
)
;
}
}
mSentry
=
(
mPrevOverflowCont
-
>
GetNextSibling
(
)
)
?
mPrevOverflowCont
-
>
GetNextSibling
(
)
-
>
GetPrevInFlow
(
)
:
nullptr
;
}
nsresult
nsOverflowContinuationTracker
:
:
Insert
(
nsIFrame
*
aOverflowCont
nsReflowStatus
&
aReflowStatus
)
{
MOZ_ASSERT
(
aOverflowCont
"
null
frame
pointer
"
)
;
MOZ_ASSERT
(
!
mSkipOverflowContainerChildren
|
|
mWalkOOFFrames
=
=
aOverflowCont
-
>
HasAnyStateBits
(
NS_FRAME_OUT_OF_FLOW
)
"
shouldn
'
t
insert
frame
that
doesn
'
t
match
walker
type
"
)
;
MOZ_ASSERT
(
aOverflowCont
-
>
GetPrevInFlow
(
)
"
overflow
containers
must
have
a
prev
-
in
-
flow
"
)
;
nsresult
rv
=
NS_OK
;
bool
reparented
=
false
;
nsPresContext
*
presContext
=
aOverflowCont
-
>
PresContext
(
)
;
bool
addToList
=
!
mSentry
|
|
aOverflowCont
!
=
mSentry
-
>
GetNextInFlow
(
)
;
if
(
addToList
&
&
aOverflowCont
-
>
GetParent
(
)
=
=
mParent
&
&
aOverflowCont
-
>
HasAnyStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
&
&
mOverflowContList
&
&
mOverflowContList
-
>
ContainsFrame
(
aOverflowCont
)
)
{
addToList
=
false
;
mPrevOverflowCont
=
aOverflowCont
-
>
GetPrevSibling
(
)
;
}
if
(
addToList
)
{
if
(
aOverflowCont
-
>
HasAnyStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
)
{
NS_ASSERTION
(
!
(
mOverflowContList
&
&
mOverflowContList
-
>
ContainsFrame
(
aOverflowCont
)
)
"
overflow
containers
out
of
order
"
)
;
aOverflowCont
-
>
GetParent
(
)
-
>
StealFrame
(
aOverflowCont
)
;
}
else
{
aOverflowCont
-
>
AddStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
;
}
if
(
!
mOverflowContList
)
{
mOverflowContList
=
new
(
presContext
-
>
PresShell
(
)
)
nsFrameList
(
)
;
mParent
-
>
SetProperty
(
nsContainerFrame
:
:
ExcessOverflowContainersProperty
(
)
mOverflowContList
)
;
SetUpListWalker
(
)
;
}
if
(
aOverflowCont
-
>
GetParent
(
)
!
=
mParent
)
{
nsContainerFrame
:
:
ReparentFrameView
(
aOverflowCont
aOverflowCont
-
>
GetParent
(
)
mParent
)
;
reparented
=
true
;
}
nsIFrame
*
pif
=
aOverflowCont
-
>
GetPrevInFlow
(
)
;
nsIFrame
*
nif
=
aOverflowCont
-
>
GetNextInFlow
(
)
;
if
(
(
pif
&
&
pif
-
>
GetParent
(
)
=
=
mParent
&
&
pif
!
=
mPrevOverflowCont
)
|
|
(
nif
&
&
nif
-
>
GetParent
(
)
=
=
mParent
&
&
mPrevOverflowCont
)
)
{
for
(
nsIFrame
*
f
:
*
mOverflowContList
)
{
if
(
f
=
=
pif
)
{
mPrevOverflowCont
=
pif
;
break
;
}
if
(
f
=
=
nif
)
{
mPrevOverflowCont
=
f
-
>
GetPrevSibling
(
)
;
break
;
}
}
}
mOverflowContList
-
>
InsertFrame
(
mParent
mPrevOverflowCont
aOverflowCont
)
;
aReflowStatus
.
SetNextInFlowNeedsReflow
(
)
;
}
if
(
aReflowStatus
.
NextInFlowNeedsReflow
(
)
)
{
aOverflowCont
-
>
MarkSubtreeDirty
(
)
;
}
StepForward
(
)
;
NS_ASSERTION
(
mPrevOverflowCont
=
=
aOverflowCont
|
|
(
mSkipOverflowContainerChildren
&
&
mPrevOverflowCont
-
>
HasAnyStateBits
(
NS_FRAME_OUT_OF_FLOW
)
!
=
aOverflowCont
-
>
HasAnyStateBits
(
NS_FRAME_OUT_OF_FLOW
)
)
"
OverflowContTracker
in
unexpected
state
"
)
;
if
(
addToList
)
{
nsIFrame
*
f
=
aOverflowCont
-
>
GetNextInFlow
(
)
;
if
(
f
&
&
(
!
f
-
>
HasAnyStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
|
|
(
!
reparented
&
&
f
-
>
GetParent
(
)
=
=
mParent
)
|
|
(
reparented
&
&
f
-
>
GetParent
(
)
!
=
mParent
)
)
)
{
if
(
!
f
-
>
HasAnyStateBits
(
NS_FRAME_IS_OVERFLOW_CONTAINER
)
)
{
f
-
>
GetParent
(
)
-
>
StealFrame
(
f
)
;
}
Insert
(
f
aReflowStatus
)
;
}
}
return
rv
;
}
void
nsOverflowContinuationTracker
:
:
BeginFinish
(
nsIFrame
*
aChild
)
{
MOZ_ASSERT
(
aChild
"
null
ptr
"
)
;
MOZ_ASSERT
(
aChild
-
>
GetNextInFlow
(
)
"
supposed
to
call
Finish
*
before
*
deleting
next
-
in
-
flow
!
"
)
;
for
(
nsIFrame
*
f
=
aChild
;
f
;
f
=
f
-
>
GetNextInFlow
(
)
)
{
if
(
f
=
=
mPrevOverflowCont
)
{
mSentry
=
nullptr
;
mPrevOverflowCont
=
nullptr
;
break
;
}
if
(
f
=
=
mSentry
)
{
mSentry
=
nullptr
;
break
;
}
}
}
void
nsOverflowContinuationTracker
:
:
EndFinish
(
nsIFrame
*
aChild
)
{
if
(
!
mOverflowContList
)
{
return
;
}
nsFrameList
*
eoc
=
mParent
-
>
GetExcessOverflowContainers
(
)
;
if
(
eoc
!
=
mOverflowContList
)
{
nsFrameList
*
oc
=
mParent
-
>
GetOverflowContainers
(
)
;
if
(
oc
!
=
mOverflowContList
)
{
mPrevOverflowCont
=
nullptr
;
mSentry
=
nullptr
;
mParent
=
aChild
-
>
GetParent
(
)
;
mOverflowContList
=
nullptr
;
SetupOverflowContList
(
)
;
return
;
}
}
if
(
!
mSentry
)
{
if
(
!
mPrevOverflowCont
)
{
SetUpListWalker
(
)
;
}
else
{
mozilla
:
:
AutoRestore
<
nsIFrame
*
>
saved
(
mPrevOverflowCont
)
;
mPrevOverflowCont
=
mPrevOverflowCont
-
>
GetPrevSibling
(
)
;
StepForward
(
)
;
}
}
}
#
ifdef
DEBUG
void
nsContainerFrame
:
:
SanityCheckChildListsBeforeReflow
(
)
const
{
MOZ_ASSERT
(
IsFlexOrGridContainer
(
)
"
Only
Flex
/
Grid
containers
can
call
this
!
"
)
;
const
auto
didPushItemsBit
=
IsFlexContainerFrame
(
)
?
NS_STATE_FLEX_DID_PUSH_ITEMS
:
NS_STATE_GRID_DID_PUSH_ITEMS
;
ChildListIDs
absLists
=
{
FrameChildListID
:
:
Absolute
FrameChildListID
:
:
Fixed
FrameChildListID
:
:
OverflowContainers
FrameChildListID
:
:
ExcessOverflowContainers
}
;
ChildListIDs
itemLists
=
{
FrameChildListID
:
:
Principal
FrameChildListID
:
:
Overflow
}
;
for
(
const
nsIFrame
*
f
=
this
;
f
;
f
=
f
-
>
GetNextInFlow
(
)
)
{
MOZ_ASSERT
(
!
f
-
>
HasAnyStateBits
(
didPushItemsBit
)
"
At
start
of
reflow
we
should
'
ve
pulled
items
back
from
all
"
"
NIFs
and
cleared
the
state
bit
stored
in
didPushItemsBit
in
"
"
the
process
.
"
)
;
for
(
const
auto
&
[
list
listID
]
:
f
-
>
ChildLists
(
)
)
{
if
(
!
itemLists
.
contains
(
listID
)
)
{
MOZ_ASSERT
(
absLists
.
contains
(
listID
)
|
|
listID
=
=
FrameChildListID
:
:
Backdrop
"
unexpected
non
-
empty
child
list
"
)
;
continue
;
}
for
(
const
auto
*
child
:
list
)
{
MOZ_ASSERT
(
f
=
=
this
|
|
child
-
>
GetPrevInFlow
(
)
"
all
pushed
items
must
be
pulled
up
before
reflow
"
)
;
}
}
}
const
auto
*
pif
=
static_cast
<
nsContainerFrame
*
>
(
GetPrevInFlow
(
)
)
;
if
(
pif
)
{
const
nsFrameList
*
oc
=
GetOverflowContainers
(
)
;
const
nsFrameList
*
eoc
=
GetExcessOverflowContainers
(
)
;
const
nsFrameList
*
pifEOC
=
pif
-
>
GetExcessOverflowContainers
(
)
;
for
(
const
nsIFrame
*
child
:
pif
-
>
PrincipalChildList
(
)
)
{
const
nsIFrame
*
childNIF
=
child
-
>
GetNextInFlow
(
)
;
MOZ_ASSERT
(
!
childNIF
|
|
mFrames
.
ContainsFrame
(
childNIF
)
|
|
(
pifEOC
&
&
pifEOC
-
>
ContainsFrame
(
childNIF
)
)
|
|
(
oc
&
&
oc
-
>
ContainsFrame
(
childNIF
)
)
|
|
(
eoc
&
&
eoc
-
>
ContainsFrame
(
childNIF
)
)
)
;
}
}
}
void
nsContainerFrame
:
:
SetDidPushItemsBitIfNeeded
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
{
MOZ_ASSERT
(
IsFlexOrGridContainer
(
)
"
Only
Flex
/
Grid
containers
can
call
this
!
"
)
;
if
(
aListID
=
=
FrameChildListID
:
:
Principal
&
&
!
aOldFrame
-
>
GetPrevInFlow
(
)
)
{
nsContainerFrame
*
frameThatMayLie
=
this
;
do
{
frameThatMayLie
-
>
mDidPushItemsBitMayLie
=
true
;
frameThatMayLie
=
static_cast
<
nsContainerFrame
*
>
(
frameThatMayLie
-
>
GetPrevInFlow
(
)
)
;
}
while
(
frameThatMayLie
)
;
}
}
#
endif
#
ifdef
DEBUG_FRAME_DUMP
void
nsContainerFrame
:
:
List
(
FILE
*
out
const
char
*
aPrefix
ListFlags
aFlags
)
const
{
nsCString
str
;
ListGeneric
(
str
aPrefix
aFlags
)
;
ExtraContainerFrameInfo
(
str
aFlags
.
contains
(
ListFlag
:
:
OnlyListDeterministicInfo
)
)
;
fprintf_stderr
(
out
"
%
s
<
\
n
"
str
.
get
(
)
)
;
const
nsCString
pfx
=
nsCString
(
aPrefix
)
+
"
"
_ns
;
for
(
nsIFrame
*
kid
:
PrincipalChildList
(
)
)
{
kid
-
>
List
(
out
pfx
.
get
(
)
aFlags
)
;
}
const
ChildListIDs
skippedListIDs
=
{
FrameChildListID
:
:
Principal
}
;
ListChildLists
(
out
pfx
.
get
(
)
aFlags
skippedListIDs
)
;
fprintf_stderr
(
out
"
%
s
>
\
n
"
aPrefix
)
;
}
void
nsContainerFrame
:
:
ListWithMatchedRules
(
FILE
*
out
const
char
*
aPrefix
)
const
{
fprintf_stderr
(
out
"
%
s
%
s
\
n
"
aPrefix
ListTag
(
)
.
get
(
)
)
;
nsCString
rulePrefix
;
rulePrefix
+
=
aPrefix
;
rulePrefix
+
=
"
"
;
ListMatchedRules
(
out
rulePrefix
.
get
(
)
)
;
nsCString
childPrefix
;
childPrefix
+
=
aPrefix
;
childPrefix
+
=
"
"
;
for
(
const
auto
&
childList
:
ChildLists
(
)
)
{
for
(
const
nsIFrame
*
kid
:
childList
.
mList
)
{
kid
-
>
ListWithMatchedRules
(
out
childPrefix
.
get
(
)
)
;
}
}
}
void
nsContainerFrame
:
:
ListChildLists
(
FILE
*
aOut
const
char
*
aPrefix
ListFlags
aFlags
ChildListIDs
aSkippedListIDs
)
const
{
const
nsCString
nestedPfx
=
nsCString
(
aPrefix
)
+
"
"
_ns
;
for
(
const
auto
&
[
list
listID
]
:
ChildLists
(
)
)
{
if
(
aSkippedListIDs
.
contains
(
listID
)
)
{
continue
;
}
nsCString
str
{
nsPrintfCString
(
"
%
s
%
s
"
aPrefix
ChildListName
(
listID
)
)
}
;
ListPtr
(
str
aFlags
&
GetChildList
(
listID
)
"
"
)
;
str
+
=
"
<
\
n
"
;
fprintf_stderr
(
aOut
"
%
s
"
str
.
get
(
)
)
;
for
(
nsIFrame
*
kid
:
list
)
{
NS_ASSERTION
(
kid
-
>
GetParent
(
)
=
=
this
"
Bad
parent
frame
pointer
!
"
)
;
kid
-
>
List
(
aOut
nestedPfx
.
get
(
)
aFlags
)
;
}
fprintf_stderr
(
aOut
"
%
s
>
\
n
"
aPrefix
)
;
}
}
void
nsContainerFrame
:
:
ExtraContainerFrameInfo
(
nsACString
&
bool
)
const
{
}
#
endif
