#
include
"
base
/
basictypes
.
h
"
#
include
"
BasicLayers
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
mozilla
/
BrowserElementParent
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
ViewportFrame
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
TabChild
.
h
"
#
include
"
mozilla
/
dom
/
TabParent
.
h
"
#
include
"
mozilla
/
layers
/
APZCTreeManager
.
h
"
#
include
"
mozilla
/
layers
/
APZThreadUtils
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
LayerTransactionParent
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsFrameLoader
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsStyleStructInlines
.
h
"
#
include
"
nsSubDocumentFrame
.
h
"
#
include
"
nsView
.
h
"
#
include
"
RenderFrameParent
.
h
"
#
include
"
mozilla
/
gfx
/
GPUProcessManager
.
h
"
#
include
"
mozilla
/
layers
/
LayerManagerComposite
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderLayerManager
.
h
"
#
include
"
ClientLayerManager
.
h
"
#
include
"
FrameLayerBuilder
.
h
"
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
layers
;
namespace
mozilla
{
namespace
layout
{
typedef
FrameMetrics
:
:
ViewID
ViewID
;
static
nsIntPoint
GetContentRectLayerOffset
(
nsIFrame
*
aContainerFrame
nsDisplayListBuilder
*
aBuilder
)
{
nscoord
auPerDevPixel
=
aContainerFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
nsPoint
frameOffset
=
aBuilder
-
>
ToReferenceFrame
(
aContainerFrame
)
+
aContainerFrame
-
>
GetContentRectRelativeToSelf
(
)
.
TopLeft
(
)
;
return
frameOffset
.
ToNearestPixels
(
auPerDevPixel
)
;
}
inline
static
bool
IsTempLayerManager
(
LayerManager
*
aManager
)
{
return
(
mozilla
:
:
layers
:
:
LayersBackend
:
:
LAYERS_BASIC
=
=
aManager
-
>
GetBackendType
(
)
&
&
!
static_cast
<
BasicLayerManager
*
>
(
aManager
)
-
>
IsRetained
(
)
)
;
}
already_AddRefed
<
LayerManager
>
GetFrom
(
nsFrameLoader
*
aFrameLoader
)
{
nsIDocument
*
doc
=
aFrameLoader
-
>
GetOwnerDoc
(
)
;
if
(
!
doc
)
{
return
nullptr
;
}
return
nsContentUtils
:
:
LayerManagerForDocument
(
doc
)
;
}
RenderFrameParent
:
:
RenderFrameParent
(
nsFrameLoader
*
aFrameLoader
)
:
mLayersId
(
0
)
mLayersConnected
(
false
)
mFrameLoader
(
aFrameLoader
)
mFrameLoaderDestroyed
(
false
)
mAsyncPanZoomEnabled
(
false
)
mInitted
(
false
)
{
mInitted
=
Init
(
aFrameLoader
)
;
}
RenderFrameParent
:
:
~
RenderFrameParent
(
)
{
}
bool
RenderFrameParent
:
:
Init
(
nsFrameLoader
*
aFrameLoader
)
{
if
(
mInitted
|
|
!
aFrameLoader
)
{
return
false
;
}
mFrameLoader
=
aFrameLoader
;
RefPtr
<
LayerManager
>
lm
=
GetFrom
(
mFrameLoader
)
;
mAsyncPanZoomEnabled
=
lm
&
&
lm
-
>
AsyncPanZoomEnabled
(
)
;
TabParent
*
browser
=
TabParent
:
:
GetFrom
(
mFrameLoader
)
;
if
(
XRE_IsParentProcess
(
)
)
{
PCompositorBridgeChild
*
compositor
=
nullptr
;
if
(
lm
)
{
compositor
=
lm
-
>
GetCompositorBridgeChild
(
)
;
}
GPUProcessManager
*
gpm
=
GPUProcessManager
:
:
Get
(
)
;
mLayersConnected
=
gpm
-
>
AllocateAndConnectLayerTreeId
(
compositor
browser
-
>
Manager
(
)
-
>
AsContentParent
(
)
-
>
OtherPid
(
)
&
mLayersId
&
mCompositorOptions
)
;
}
else
if
(
XRE_IsContentProcess
(
)
)
{
ContentChild
:
:
GetSingleton
(
)
-
>
SendAllocateLayerTreeId
(
browser
-
>
Manager
(
)
-
>
ChildID
(
)
browser
-
>
GetTabId
(
)
&
mLayersId
)
;
mLayersConnected
=
CompositorBridgeChild
:
:
Get
(
)
-
>
SendNotifyChildCreated
(
mLayersId
&
mCompositorOptions
)
;
}
mInitted
=
true
;
return
true
;
}
bool
RenderFrameParent
:
:
IsInitted
(
)
{
return
mInitted
;
}
void
RenderFrameParent
:
:
Destroy
(
)
{
mFrameLoaderDestroyed
=
true
;
}
already_AddRefed
<
Layer
>
RenderFrameParent
:
:
BuildLayer
(
nsDisplayListBuilder
*
aBuilder
nsIFrame
*
aFrame
LayerManager
*
aManager
const
nsIntRect
&
aVisibleRect
nsDisplayItem
*
aItem
const
ContainerLayerParameters
&
aContainerParameters
)
{
MOZ_ASSERT
(
aFrame
"
makes
no
sense
to
have
a
shadow
tree
without
a
frame
"
)
;
MOZ_ASSERT
(
!
mContainer
|
|
IsTempLayerManager
(
aManager
)
|
|
mContainer
-
>
Manager
(
)
=
=
aManager
"
retaining
manager
changed
out
from
under
us
.
.
.
HELP
!
"
)
;
if
(
IsTempLayerManager
(
aManager
)
|
|
(
mContainer
&
&
mContainer
-
>
Manager
(
)
!
=
aManager
)
)
{
if
(
!
aContainerParameters
.
mForEventsAndPluginsOnly
)
{
NS_WARNING
(
"
Remote
iframe
not
rendered
"
)
;
}
return
nullptr
;
}
if
(
!
mLayersId
)
{
return
nullptr
;
}
RefPtr
<
Layer
>
layer
=
(
aManager
-
>
GetLayerBuilder
(
)
-
>
GetLeafLayerFor
(
aBuilder
aItem
)
)
;
if
(
!
layer
)
{
layer
=
aManager
-
>
CreateRefLayer
(
)
;
}
if
(
!
layer
)
{
return
nullptr
;
}
static_cast
<
RefLayer
*
>
(
layer
.
get
(
)
)
-
>
SetReferentId
(
mLayersId
)
;
nsIntPoint
offset
=
GetContentRectLayerOffset
(
aFrame
aBuilder
)
;
MOZ_ASSERT
(
aContainerParameters
.
mOffset
=
=
nsIntPoint
(
)
)
;
gfx
:
:
Matrix4x4
m
=
gfx
:
:
Matrix4x4
:
:
Translation
(
offset
.
x
offset
.
y
0
.
0
)
;
m
.
PreScale
(
aContainerParameters
.
mXScale
aContainerParameters
.
mYScale
1
.
0
)
;
layer
-
>
SetBaseTransform
(
m
)
;
return
layer
.
forget
(
)
;
}
void
RenderFrameParent
:
:
OwnerContentChanged
(
nsIContent
*
aContent
)
{
MOZ_ASSERT
(
!
mFrameLoader
|
|
mFrameLoader
-
>
GetOwnerContent
(
)
=
=
aContent
"
Don
'
t
build
new
map
if
owner
is
same
!
"
)
;
RefPtr
<
LayerManager
>
lm
=
mFrameLoader
?
GetFrom
(
mFrameLoader
)
:
nullptr
;
if
(
lm
&
&
lm
-
>
GetCompositorBridgeChild
(
)
)
{
mLayersConnected
=
lm
-
>
GetCompositorBridgeChild
(
)
-
>
SendAdoptChild
(
mLayersId
)
;
FrameLayerBuilder
:
:
InvalidateAllLayers
(
lm
)
;
}
}
void
RenderFrameParent
:
:
ActorDestroy
(
ActorDestroyReason
why
)
{
if
(
mLayersId
!
=
0
)
{
if
(
XRE_IsParentProcess
(
)
)
{
GPUProcessManager
:
:
Get
(
)
-
>
UnmapLayerTreeId
(
mLayersId
OtherPid
(
)
)
;
}
else
if
(
XRE_IsContentProcess
(
)
)
{
ContentChild
:
:
GetSingleton
(
)
-
>
SendDeallocateLayerTreeId
(
mLayersId
)
;
}
}
mFrameLoader
=
nullptr
;
}
mozilla
:
:
ipc
:
:
IPCResult
RenderFrameParent
:
:
RecvNotifyCompositorTransaction
(
)
{
TriggerRepaint
(
)
;
return
IPC_OK
(
)
;
}
void
RenderFrameParent
:
:
TriggerRepaint
(
)
{
nsIFrame
*
docFrame
=
mFrameLoader
-
>
GetPrimaryFrameOfOwningContent
(
)
;
if
(
!
docFrame
)
{
return
;
}
docFrame
-
>
InvalidateLayer
(
nsDisplayItem
:
:
TYPE_REMOTE
)
;
}
void
RenderFrameParent
:
:
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
nsSubDocumentFrame
*
aFrame
const
nsRect
&
aDirtyRect
const
nsDisplayListSet
&
aLists
)
{
DisplayListClipState
:
:
AutoSaveRestore
clipState
(
aBuilder
)
;
nsPoint
offset
=
aBuilder
-
>
ToReferenceFrame
(
aFrame
)
;
nsRect
bounds
=
aFrame
-
>
EnsureInnerView
(
)
-
>
GetBounds
(
)
+
offset
;
clipState
.
ClipContentDescendants
(
bounds
)
;
aLists
.
Content
(
)
-
>
AppendToTop
(
new
(
aBuilder
)
nsDisplayRemote
(
aBuilder
aFrame
this
)
)
;
}
void
RenderFrameParent
:
:
GetTextureFactoryIdentifier
(
TextureFactoryIdentifier
*
aTextureFactoryIdentifier
)
{
RefPtr
<
LayerManager
>
lm
=
mFrameLoader
?
GetFrom
(
mFrameLoader
)
:
nullptr
;
if
(
lm
)
{
*
aTextureFactoryIdentifier
=
lm
-
>
GetTextureFactoryIdentifier
(
)
;
}
else
{
*
aTextureFactoryIdentifier
=
TextureFactoryIdentifier
(
)
;
}
}
void
RenderFrameParent
:
:
TakeFocusForClickFromTap
(
)
{
nsIFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
!
fm
)
{
return
;
}
nsCOMPtr
<
nsIContent
>
owner
=
mFrameLoader
-
>
GetOwnerContent
(
)
;
if
(
!
owner
)
{
return
;
}
nsCOMPtr
<
nsIDOMElement
>
element
=
do_QueryInterface
(
owner
)
;
if
(
!
element
)
{
return
;
}
fm
-
>
SetFocus
(
element
nsIFocusManager
:
:
FLAG_BYMOUSE
|
nsIFocusManager
:
:
FLAG_BYTOUCH
|
nsIFocusManager
:
:
FLAG_NOSCROLL
)
;
}
void
RenderFrameParent
:
:
EnsureLayersConnected
(
)
{
RefPtr
<
LayerManager
>
lm
=
GetFrom
(
mFrameLoader
)
;
if
(
!
lm
)
{
return
;
}
if
(
!
lm
-
>
GetCompositorBridgeChild
(
)
)
{
return
;
}
mLayersConnected
=
lm
-
>
GetCompositorBridgeChild
(
)
-
>
SendNotifyChildRecreated
(
mLayersId
&
mCompositorOptions
)
;
}
}
}
nsDisplayRemote
:
:
nsDisplayRemote
(
nsDisplayListBuilder
*
aBuilder
nsSubDocumentFrame
*
aFrame
RenderFrameParent
*
aRemoteFrame
)
:
nsDisplayItem
(
aBuilder
aFrame
)
mRemoteFrame
(
aRemoteFrame
)
mEventRegionsOverride
(
EventRegionsOverride
:
:
NoOverride
)
{
if
(
aBuilder
-
>
IsBuildingLayerEventRegions
(
)
)
{
bool
frameIsPointerEventsNone
=
aFrame
-
>
StyleUserInterface
(
)
-
>
GetEffectivePointerEvents
(
aFrame
)
=
=
NS_STYLE_POINTER_EVENTS_NONE
;
if
(
aBuilder
-
>
IsInsidePointerEventsNoneDoc
(
)
|
|
frameIsPointerEventsNone
)
{
mEventRegionsOverride
|
=
EventRegionsOverride
:
:
ForceEmptyHitRegion
;
}
if
(
nsLayoutUtils
:
:
HasDocumentLevelListenersForApzAwareEvents
(
aFrame
-
>
PresContext
(
)
-
>
PresShell
(
)
)
)
{
mEventRegionsOverride
|
=
EventRegionsOverride
:
:
ForceDispatchToContent
;
}
}
}
already_AddRefed
<
Layer
>
nsDisplayRemote
:
:
BuildLayer
(
nsDisplayListBuilder
*
aBuilder
LayerManager
*
aManager
const
ContainerLayerParameters
&
aContainerParameters
)
{
int32_t
appUnitsPerDevPixel
=
mFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
nsIntRect
visibleRect
=
GetVisibleRect
(
)
.
ToNearestPixels
(
appUnitsPerDevPixel
)
;
visibleRect
+
=
aContainerParameters
.
mOffset
;
RefPtr
<
Layer
>
layer
=
mRemoteFrame
-
>
BuildLayer
(
aBuilder
mFrame
aManager
visibleRect
this
aContainerParameters
)
;
if
(
layer
&
&
layer
-
>
AsContainerLayer
(
)
)
{
layer
-
>
AsContainerLayer
(
)
-
>
SetEventRegionsOverride
(
mEventRegionsOverride
)
;
}
return
layer
.
forget
(
)
;
}
