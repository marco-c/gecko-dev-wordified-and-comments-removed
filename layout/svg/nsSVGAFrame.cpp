#
include
"
gfxMatrix
.
h
"
#
include
"
mozilla
/
dom
/
SVGAElement
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsIDOMMutationEvent
.
h
"
#
include
"
nsSVGContainerFrame
.
h
"
#
include
"
nsSVGIntegrationUtils
.
h
"
#
include
"
nsSVGUtils
.
h
"
#
include
"
SVGLengthList
.
h
"
using
namespace
mozilla
;
class
nsSVGAFrame
:
public
nsSVGDisplayContainerFrame
{
friend
nsIFrame
*
NS_NewSVGAFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
;
protected
:
explicit
nsSVGAFrame
(
nsStyleContext
*
aContext
)
:
nsSVGDisplayContainerFrame
(
aContext
kClassID
)
{
}
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsSVGAFrame
)
#
ifdef
DEBUG
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
#
endif
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
SVGA
"
)
aResult
)
;
}
#
endif
virtual
void
NotifySVGChanged
(
uint32_t
aFlags
)
override
;
virtual
gfxMatrix
GetCanvasTM
(
)
override
;
private
:
nsAutoPtr
<
gfxMatrix
>
mCanvasTM
;
}
;
nsIFrame
*
NS_NewSVGAFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
{
return
new
(
aPresShell
)
nsSVGAFrame
(
aContext
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsSVGAFrame
)
#
ifdef
DEBUG
void
nsSVGAFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
NS_ASSERTION
(
aContent
-
>
IsSVGElement
(
nsGkAtoms
:
:
a
)
"
Trying
to
construct
an
SVGAFrame
for
a
"
"
content
element
that
doesn
'
t
support
the
right
interfaces
"
)
;
nsSVGDisplayContainerFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
}
#
endif
nsresult
nsSVGAFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
)
{
if
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
aAttribute
=
=
nsGkAtoms
:
:
transform
)
{
NotifySVGChanged
(
TRANSFORM_CHANGED
)
;
}
if
(
aModType
=
=
nsIDOMMutationEvent
:
:
SMIL
&
&
aAttribute
=
=
nsGkAtoms
:
:
href
&
&
(
aNameSpaceID
=
=
kNameSpaceID_None
|
|
aNameSpaceID
=
=
kNameSpaceID_XLink
)
)
{
dom
:
:
SVGAElement
*
content
=
static_cast
<
dom
:
:
SVGAElement
*
>
(
GetContent
(
)
)
;
content
-
>
ResetLinkState
(
true
content
-
>
ElementHasHref
(
)
)
;
}
return
NS_OK
;
}
void
nsSVGAFrame
:
:
NotifySVGChanged
(
uint32_t
aFlags
)
{
MOZ_ASSERT
(
aFlags
&
(
TRANSFORM_CHANGED
|
COORD_CONTEXT_CHANGED
)
"
Invalidation
logic
may
need
adjusting
"
)
;
if
(
aFlags
&
TRANSFORM_CHANGED
)
{
mCanvasTM
=
nullptr
;
}
nsSVGDisplayContainerFrame
:
:
NotifySVGChanged
(
aFlags
)
;
}
gfxMatrix
nsSVGAFrame
:
:
GetCanvasTM
(
)
{
if
(
!
mCanvasTM
)
{
NS_ASSERTION
(
GetParent
(
)
"
null
parent
"
)
;
nsSVGContainerFrame
*
parent
=
static_cast
<
nsSVGContainerFrame
*
>
(
GetParent
(
)
)
;
dom
:
:
SVGAElement
*
content
=
static_cast
<
dom
:
:
SVGAElement
*
>
(
GetContent
(
)
)
;
gfxMatrix
tm
=
content
-
>
PrependLocalTransformsTo
(
parent
-
>
GetCanvasTM
(
)
)
;
mCanvasTM
=
new
gfxMatrix
(
tm
)
;
}
return
*
mCanvasTM
;
}
