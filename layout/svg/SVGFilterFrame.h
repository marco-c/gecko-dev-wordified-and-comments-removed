#
ifndef
LAYOUT_SVG_SVGFILTERFRAME_H_
#
define
LAYOUT_SVG_SVGFILTERFRAME_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
SVGContainerFrame
.
h
"
#
include
"
nsQueryFrame
.
h
"
class
nsAtom
;
class
nsIContent
;
class
nsIFrame
;
struct
nsRect
;
namespace
mozilla
{
class
SVGAnimatedLength
;
class
SVGFilterInstance
;
class
PresShell
;
namespace
dom
{
class
SVGFilterElement
;
}
}
nsIFrame
*
NS_NewSVGFilterFrame
(
mozilla
:
:
PresShell
*
aPresShell
mozilla
:
:
ComputedStyle
*
aStyle
)
;
namespace
mozilla
{
class
SVGFilterFrame
final
:
public
SVGContainerFrame
{
friend
nsIFrame
*
:
:
NS_NewSVGFilterFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
protected
:
explicit
SVGFilterFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
SVGContainerFrame
(
aStyle
aPresContext
kClassID
)
mLoopFlag
(
false
)
mNoHRefURI
(
false
)
{
AddStateBits
(
NS_FRAME_IS_NONDISPLAY
)
;
}
public
:
NS_DECL_FRAMEARENA_HELPERS
(
SVGFilterFrame
)
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
{
}
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
#
ifdef
DEBUG
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
#
endif
private
:
friend
class
SVGFilterInstance
;
SVGFilterFrame
*
GetReferencedFilter
(
)
;
uint16_t
GetEnumValue
(
uint32_t
aIndex
nsIContent
*
aDefault
)
;
uint16_t
GetEnumValue
(
uint32_t
aIndex
)
{
return
GetEnumValue
(
aIndex
mContent
)
;
}
const
mozilla
:
:
SVGAnimatedLength
*
GetLengthValue
(
uint32_t
aIndex
nsIContent
*
aDefault
)
;
const
mozilla
:
:
SVGAnimatedLength
*
GetLengthValue
(
uint32_t
aIndex
)
{
return
GetLengthValue
(
aIndex
mContent
)
;
}
const
mozilla
:
:
dom
:
:
SVGFilterElement
*
GetFilterContent
(
nsIContent
*
aDefault
)
;
const
mozilla
:
:
dom
:
:
SVGFilterElement
*
GetFilterContent
(
)
{
return
GetFilterContent
(
mContent
)
;
}
bool
mLoopFlag
;
bool
mNoHRefURI
;
}
;
}
#
endif
