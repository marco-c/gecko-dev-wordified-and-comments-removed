#
ifndef
__NS_SVGPATTERNFRAME_H__
#
define
__NS_SVGPATTERNFRAME_H__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
gfxMatrix
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsSVGPaintServerFrame
.
h
"
class
nsIFrame
;
namespace
mozilla
{
class
PresShell
;
class
SVGAnimatedLength
;
class
SVGAnimatedPreserveAspectRatio
;
class
SVGAnimatedTransformList
;
class
SVGAnimatedViewBox
;
class
SVGGeometryFrame
;
}
class
nsSVGPatternFrame
final
:
public
nsSVGPaintServerFrame
{
typedef
mozilla
:
:
gfx
:
:
SourceSurface
SourceSurface
;
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsSVGPatternFrame
)
friend
nsIFrame
*
NS_NewSVGPatternFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
explicit
nsSVGPatternFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
virtual
already_AddRefed
<
gfxPattern
>
GetPaintServerPattern
(
nsIFrame
*
aSource
const
DrawTarget
*
aDrawTarget
const
gfxMatrix
&
aContextMatrix
nsStyleSVGPaint
nsStyleSVG
:
:
*
aFillOrStroke
float
aOpacity
imgDrawingParams
&
aImgParams
const
gfxRect
*
aOverrideBounds
)
override
;
public
:
typedef
mozilla
:
:
SVGAnimatedPreserveAspectRatio
SVGAnimatedPreserveAspectRatio
;
virtual
gfxMatrix
GetCanvasTM
(
)
override
;
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
#
ifdef
DEBUG
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
#
endif
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
SVGPattern
"
)
aResult
)
;
}
#
endif
protected
:
nsSVGPatternFrame
*
GetReferencedPattern
(
)
;
uint16_t
GetEnumValue
(
uint32_t
aIndex
nsIContent
*
aDefault
)
;
uint16_t
GetEnumValue
(
uint32_t
aIndex
)
{
return
GetEnumValue
(
aIndex
mContent
)
;
}
mozilla
:
:
SVGAnimatedTransformList
*
GetPatternTransformList
(
nsIContent
*
aDefault
)
;
gfxMatrix
GetPatternTransform
(
)
;
const
SVGAnimatedViewBox
&
GetViewBox
(
nsIContent
*
aDefault
)
;
const
SVGAnimatedViewBox
&
GetViewBox
(
)
{
return
GetViewBox
(
mContent
)
;
}
const
SVGAnimatedPreserveAspectRatio
&
GetPreserveAspectRatio
(
nsIContent
*
aDefault
)
;
const
SVGAnimatedPreserveAspectRatio
&
GetPreserveAspectRatio
(
)
{
return
GetPreserveAspectRatio
(
mContent
)
;
}
const
SVGAnimatedLength
*
GetLengthValue
(
uint32_t
aIndex
nsIContent
*
aDefault
)
;
const
SVGAnimatedLength
*
GetLengthValue
(
uint32_t
aIndex
)
{
return
GetLengthValue
(
aIndex
mContent
)
;
}
already_AddRefed
<
SourceSurface
>
PaintPattern
(
const
DrawTarget
*
aDrawTarget
Matrix
*
patternMatrix
const
Matrix
&
aContextMatrix
nsIFrame
*
aSource
nsStyleSVGPaint
nsStyleSVG
:
:
*
aFillOrStroke
float
aGraphicOpacity
const
gfxRect
*
aOverrideBounds
imgDrawingParams
&
aImgParams
)
;
nsSVGPatternFrame
*
GetPatternWithChildren
(
)
;
gfxRect
GetPatternRect
(
uint16_t
aPatternUnits
const
gfxRect
&
bbox
const
Matrix
&
callerCTM
nsIFrame
*
aTarget
)
;
gfxMatrix
ConstructCTM
(
const
SVGAnimatedViewBox
&
aViewBox
uint16_t
aPatternContentUnits
uint16_t
aPatternUnits
const
gfxRect
&
callerBBox
const
Matrix
&
callerCTM
nsIFrame
*
aTarget
)
;
private
:
mozilla
:
:
SVGGeometryFrame
*
mSource
;
nsAutoPtr
<
gfxMatrix
>
mCTM
;
protected
:
bool
mLoopFlag
;
bool
mNoHRefURI
;
}
;
#
endif
