#
include
"
SVGUseFrame
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
SVGObserverUtils
.
h
"
#
include
"
mozilla
/
SVGUtils
.
h
"
#
include
"
mozilla
/
dom
/
MutationEvent
.
h
"
#
include
"
mozilla
/
dom
/
SVGUseElement
.
h
"
using
namespace
mozilla
:
:
dom
;
nsIFrame
*
NS_NewSVGUseFrame
(
mozilla
:
:
PresShell
*
aPresShell
mozilla
:
:
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
mozilla
:
:
SVGUseFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
namespace
mozilla
{
NS_IMPL_FRAMEARENA_HELPERS
(
SVGUseFrame
)
void
SVGUseFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
NS_ASSERTION
(
aContent
-
>
IsSVGElement
(
nsGkAtoms
:
:
use
)
"
Content
is
not
an
SVG
use
!
"
)
;
mHasValidDimensions
=
static_cast
<
SVGUseElement
*
>
(
aContent
)
-
>
HasValidDimensions
(
)
;
SVGGFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
}
nsresult
SVGUseFrame
:
:
AttributeChanged
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
int32_t
aModType
)
{
if
(
aModType
=
=
MutationEvent_Binding
:
:
SMIL
)
{
auto
*
content
=
SVGUseElement
:
:
FromNode
(
GetContent
(
)
)
;
content
-
>
ProcessAttributeChange
(
aNamespaceID
aAttribute
)
;
}
return
SVGGFrame
:
:
AttributeChanged
(
aNamespaceID
aAttribute
aModType
)
;
}
void
SVGUseFrame
:
:
DidSetComputedStyle
(
ComputedStyle
*
aOldComputedStyle
)
{
SVGGFrame
:
:
DidSetComputedStyle
(
aOldComputedStyle
)
;
if
(
!
aOldComputedStyle
)
{
return
;
}
const
auto
*
newSVGReset
=
StyleSVGReset
(
)
;
const
auto
*
oldSVGReset
=
aOldComputedStyle
-
>
StyleSVGReset
(
)
;
if
(
newSVGReset
-
>
mX
!
=
oldSVGReset
-
>
mX
|
|
newSVGReset
-
>
mY
!
=
oldSVGReset
-
>
mY
)
{
mCanvasTM
=
nullptr
;
SVGUtils
:
:
ScheduleReflowSVG
(
this
)
;
SVGUtils
:
:
NotifyChildrenOfSVGChange
(
this
TRANSFORM_CHANGED
)
;
}
}
void
SVGUseFrame
:
:
DimensionAttributeChanged
(
bool
aHadValidDimensions
bool
aAttributeIsUsed
)
{
bool
invalidate
=
aAttributeIsUsed
;
if
(
mHasValidDimensions
!
=
aHadValidDimensions
)
{
mHasValidDimensions
=
!
mHasValidDimensions
;
invalidate
=
true
;
}
if
(
invalidate
)
{
nsLayoutUtils
:
:
PostRestyleEvent
(
GetContent
(
)
-
>
AsElement
(
)
RestyleHint
{
0
}
nsChangeHint_InvalidateRenderingObservers
)
;
SVGUtils
:
:
ScheduleReflowSVG
(
this
)
;
}
}
void
SVGUseFrame
:
:
HrefChanged
(
)
{
nsLayoutUtils
:
:
PostRestyleEvent
(
GetContent
(
)
-
>
AsElement
(
)
RestyleHint
{
0
}
nsChangeHint_InvalidateRenderingObservers
)
;
SVGUtils
:
:
ScheduleReflowSVG
(
this
)
;
}
void
SVGUseFrame
:
:
ReflowSVG
(
)
{
auto
[
x
y
]
=
ResolvePosition
(
)
;
mRect
.
MoveTo
(
nsLayoutUtils
:
:
RoundGfxRectToAppRect
(
gfxRect
(
x
y
0
0
)
AppUnitsPerCSSPixel
(
)
)
.
TopLeft
(
)
)
;
if
(
StyleEffects
(
)
-
>
HasFilters
(
)
)
{
InvalidateFrame
(
)
;
}
SVGGFrame
:
:
ReflowSVG
(
)
;
}
void
SVGUseFrame
:
:
NotifySVGChanged
(
uint32_t
aFlags
)
{
if
(
aFlags
&
COORD_CONTEXT_CHANGED
&
&
!
(
aFlags
&
TRANSFORM_CHANGED
)
)
{
if
(
StyleSVGReset
(
)
-
>
mX
.
HasPercent
(
)
|
|
StyleSVGReset
(
)
-
>
mY
.
HasPercent
(
)
)
{
aFlags
|
=
TRANSFORM_CHANGED
;
SVGUtils
:
:
ScheduleReflowSVG
(
this
)
;
}
}
SVGGFrame
:
:
NotifySVGChanged
(
aFlags
)
;
}
SVGBBox
SVGUseFrame
:
:
GetBBoxContribution
(
const
Matrix
&
aToBBoxUserspace
uint32_t
aFlags
)
{
SVGBBox
bbox
=
SVGDisplayContainerFrame
:
:
GetBBoxContribution
(
aToBBoxUserspace
aFlags
)
;
if
(
aFlags
&
SVGUtils
:
:
eForGetClientRects
)
{
auto
[
x
y
]
=
ResolvePosition
(
)
;
bbox
.
MoveBy
(
x
y
)
;
}
return
bbox
;
}
std
:
:
pair
<
float
float
>
SVGUseFrame
:
:
ResolvePosition
(
)
const
{
auto
*
content
=
SVGUseElement
:
:
FromNode
(
GetContent
(
)
)
;
return
std
:
:
make_pair
(
SVGContentUtils
:
:
CoordToFloat
(
content
StyleSVGReset
(
)
-
>
mX
SVGContentUtils
:
:
X
)
SVGContentUtils
:
:
CoordToFloat
(
content
StyleSVGReset
(
)
-
>
mY
SVGContentUtils
:
:
Y
)
)
;
}
}
