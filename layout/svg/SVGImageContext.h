#
ifndef
MOZILLA_SVGCONTEXT_H_
#
define
MOZILLA_SVGCONTEXT_H_
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
SVGPreserveAspectRatio
.
h
"
#
include
"
Units
.
h
"
namespace
mozilla
{
class
SVGImageContext
{
public
:
SVGImageContext
(
)
:
mGlobalOpacity
(
1
.
0
)
{
}
SVGImageContext
(
CSSIntSize
aViewportSize
Maybe
<
SVGPreserveAspectRatio
>
aPreserveAspectRatio
gfxFloat
aOpacity
=
1
.
0
bool
aIsPaintingSVGImageElement
=
false
)
:
mViewportSize
(
aViewportSize
)
mPreserveAspectRatio
(
aPreserveAspectRatio
)
mGlobalOpacity
(
aOpacity
)
mIsPaintingSVGImageElement
(
aIsPaintingSVGImageElement
)
{
}
const
CSSIntSize
&
GetViewportSize
(
)
const
{
return
mViewportSize
;
}
void
SetViewportSize
(
const
CSSIntSize
&
aSize
)
{
mViewportSize
=
aSize
;
}
const
Maybe
<
SVGPreserveAspectRatio
>
&
GetPreserveAspectRatio
(
)
const
{
return
mPreserveAspectRatio
;
}
void
SetPreserveAspectRatio
(
const
Maybe
<
SVGPreserveAspectRatio
>
&
aPAR
)
{
mPreserveAspectRatio
=
aPAR
;
}
gfxFloat
GetGlobalOpacity
(
)
const
{
return
mGlobalOpacity
;
}
bool
IsPaintingForSVGImageElement
(
)
const
{
return
mIsPaintingSVGImageElement
;
}
bool
operator
=
=
(
const
SVGImageContext
&
aOther
)
const
{
return
mViewportSize
=
=
aOther
.
mViewportSize
&
&
mPreserveAspectRatio
=
=
aOther
.
mPreserveAspectRatio
&
&
mGlobalOpacity
=
=
aOther
.
mGlobalOpacity
&
&
mIsPaintingSVGImageElement
=
=
aOther
.
mIsPaintingSVGImageElement
;
}
bool
operator
!
=
(
const
SVGImageContext
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
uint32_t
Hash
(
)
const
{
return
HashGeneric
(
mViewportSize
.
width
mViewportSize
.
height
mPreserveAspectRatio
.
map
(
HashPAR
)
.
valueOr
(
0
)
HashBytes
(
&
mGlobalOpacity
sizeof
(
gfxFloat
)
)
mIsPaintingSVGImageElement
)
;
}
private
:
static
uint32_t
HashPAR
(
const
SVGPreserveAspectRatio
&
aPAR
)
{
return
aPAR
.
Hash
(
)
;
}
CSSIntSize
mViewportSize
;
Maybe
<
SVGPreserveAspectRatio
>
mPreserveAspectRatio
;
gfxFloat
mGlobalOpacity
;
bool
mIsPaintingSVGImageElement
;
}
;
}
#
endif
