#
include
"
nsSVGIntegrationUtils
.
h
"
#
include
"
gfxDrawable
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
nsCSSAnonBoxes
.
h
"
#
include
"
nsCSSClipPathInstance
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsFilterInstance
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsRenderingContext
.
h
"
#
include
"
nsSVGClipPathFrame
.
h
"
#
include
"
nsSVGEffects
.
h
"
#
include
"
nsSVGElement
.
h
"
#
include
"
nsSVGFilterPaintCallback
.
h
"
#
include
"
nsSVGMaskFrame
.
h
"
#
include
"
nsSVGPaintServerFrame
.
h
"
#
include
"
nsSVGUtils
.
h
"
#
include
"
FrameLayerBuilder
.
h
"
#
include
"
BasicLayers
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
nsCSSRendering
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
GeckoRestyleManager
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
layers
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
image
;
class
PreEffectsVisualOverflowCollector
:
public
nsLayoutUtils
:
:
BoxCallback
{
public
:
PreEffectsVisualOverflowCollector
(
nsIFrame
*
aFirstContinuation
nsIFrame
*
aCurrentFrame
const
nsRect
&
aCurrentFrameOverflowArea
)
:
mFirstContinuation
(
aFirstContinuation
)
mCurrentFrame
(
aCurrentFrame
)
mCurrentFrameOverflowArea
(
aCurrentFrameOverflowArea
)
{
NS_ASSERTION
(
!
mFirstContinuation
-
>
GetPrevContinuation
(
)
"
We
want
the
first
continuation
here
"
)
;
}
virtual
void
AddBox
(
nsIFrame
*
aFrame
)
override
{
nsRect
overflow
=
(
aFrame
=
=
mCurrentFrame
)
?
mCurrentFrameOverflowArea
:
GetPreEffectsVisualOverflowRect
(
aFrame
)
;
mResult
.
UnionRect
(
mResult
overflow
+
aFrame
-
>
GetOffsetTo
(
mFirstContinuation
)
)
;
}
nsRect
GetResult
(
)
const
{
return
mResult
;
}
private
:
static
nsRect
GetPreEffectsVisualOverflowRect
(
nsIFrame
*
aFrame
)
{
nsRect
*
r
=
aFrame
-
>
Properties
(
)
.
Get
(
nsIFrame
:
:
PreEffectsBBoxProperty
(
)
)
;
if
(
r
)
{
return
*
r
;
}
#
ifdef
DEBUG
if
(
nsSVGIntegrationUtils
:
:
UsingEffectsForFrame
(
aFrame
)
)
{
nsOverflowAreas
*
preTransformOverflows
=
aFrame
-
>
Properties
(
)
.
Get
(
aFrame
-
>
PreTransformOverflowAreasProperty
(
)
)
;
MOZ_ASSERT
(
!
preTransformOverflows
"
GetVisualOverflowRect
(
)
won
'
t
return
the
pre
-
effects
rect
!
"
)
;
}
#
endif
return
aFrame
-
>
GetVisualOverflowRect
(
)
;
}
nsIFrame
*
mFirstContinuation
;
nsIFrame
*
mCurrentFrame
;
const
nsRect
&
mCurrentFrameOverflowArea
;
nsRect
mResult
;
}
;
static
nsRect
GetPreEffectsVisualOverflowUnion
(
nsIFrame
*
aFirstContinuation
nsIFrame
*
aCurrentFrame
const
nsRect
&
aCurrentFramePreEffectsOverflow
const
nsPoint
&
aFirstContinuationToUserSpace
)
{
NS_ASSERTION
(
!
aFirstContinuation
-
>
GetPrevContinuation
(
)
"
Need
first
continuation
here
"
)
;
PreEffectsVisualOverflowCollector
collector
(
aFirstContinuation
aCurrentFrame
aCurrentFramePreEffectsOverflow
)
;
nsLayoutUtils
:
:
GetAllInFlowBoxes
(
aFirstContinuation
&
collector
)
;
return
collector
.
GetResult
(
)
+
aFirstContinuationToUserSpace
;
}
bool
nsSVGIntegrationUtils
:
:
UsingEffectsForFrame
(
const
nsIFrame
*
aFrame
)
{
const
nsStyleSVGReset
*
style
=
aFrame
-
>
StyleSVGReset
(
)
;
return
aFrame
-
>
StyleEffects
(
)
-
>
HasFilters
(
)
|
|
style
-
>
HasClipPath
(
)
|
|
style
-
>
HasMask
(
)
;
}
bool
nsSVGIntegrationUtils
:
:
UsingMaskOrClipPathForFrame
(
const
nsIFrame
*
aFrame
)
{
const
nsStyleSVGReset
*
style
=
aFrame
-
>
StyleSVGReset
(
)
;
return
style
-
>
HasClipPath
(
)
|
|
style
-
>
HasMask
(
)
;
}
nsPoint
nsSVGIntegrationUtils
:
:
GetOffsetToBoundingBox
(
nsIFrame
*
aFrame
)
{
if
(
(
aFrame
-
>
GetStateBits
(
)
&
NS_FRAME_SVG_LAYOUT
)
)
{
return
nsPoint
(
)
;
}
return
-
nsLayoutUtils
:
:
GetAllInFlowRectsUnion
(
aFrame
aFrame
)
.
TopLeft
(
)
;
}
nsSize
nsSVGIntegrationUtils
:
:
GetContinuationUnionSize
(
nsIFrame
*
aNonSVGFrame
)
{
NS_ASSERTION
(
!
aNonSVGFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eSVG
)
"
SVG
frames
should
not
get
here
"
)
;
nsIFrame
*
firstFrame
=
nsLayoutUtils
:
:
FirstContinuationOrIBSplitSibling
(
aNonSVGFrame
)
;
return
nsLayoutUtils
:
:
GetAllInFlowRectsUnion
(
firstFrame
firstFrame
)
.
Size
(
)
;
}
gfx
:
:
Size
nsSVGIntegrationUtils
:
:
GetSVGCoordContextForNonSVGFrame
(
nsIFrame
*
aNonSVGFrame
)
{
NS_ASSERTION
(
!
aNonSVGFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eSVG
)
"
SVG
frames
should
not
get
here
"
)
;
nsIFrame
*
firstFrame
=
nsLayoutUtils
:
:
FirstContinuationOrIBSplitSibling
(
aNonSVGFrame
)
;
nsRect
r
=
nsLayoutUtils
:
:
GetAllInFlowRectsUnion
(
firstFrame
firstFrame
)
;
nsPresContext
*
presContext
=
firstFrame
-
>
PresContext
(
)
;
return
gfx
:
:
Size
(
presContext
-
>
AppUnitsToFloatCSSPixels
(
r
.
width
)
presContext
-
>
AppUnitsToFloatCSSPixels
(
r
.
height
)
)
;
}
gfxRect
nsSVGIntegrationUtils
:
:
GetSVGBBoxForNonSVGFrame
(
nsIFrame
*
aNonSVGFrame
)
{
NS_ASSERTION
(
!
(
aNonSVGFrame
-
>
GetStateBits
(
)
&
NS_FRAME_SVG_LAYOUT
)
"
Frames
with
SVG
layout
should
not
get
here
"
)
;
MOZ_ASSERT_IF
(
aNonSVGFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eSVG
)
aNonSVGFrame
-
>
GetType
(
)
=
=
nsGkAtoms
:
:
svgOuterSVGFrame
)
;
nsIFrame
*
firstFrame
=
nsLayoutUtils
:
:
FirstContinuationOrIBSplitSibling
(
aNonSVGFrame
)
;
nsRect
r
=
GetPreEffectsVisualOverflowUnion
(
firstFrame
nullptr
nsRect
(
)
GetOffsetToBoundingBox
(
firstFrame
)
)
;
return
nsLayoutUtils
:
:
RectToGfxRect
(
r
aNonSVGFrame
-
>
PresContext
(
)
-
>
AppUnitsPerCSSPixel
(
)
)
;
}
nsRect
nsSVGIntegrationUtils
:
:
ComputePostEffectsVisualOverflowRect
(
nsIFrame
*
aFrame
const
nsRect
&
aPreEffectsOverflowRect
)
{
NS_ASSERTION
(
!
(
aFrame
-
>
GetStateBits
(
)
&
NS_FRAME_SVG_LAYOUT
)
"
Don
'
t
call
this
on
SVG
child
frames
"
)
;
nsIFrame
*
firstFrame
=
nsLayoutUtils
:
:
FirstContinuationOrIBSplitSibling
(
aFrame
)
;
nsSVGEffects
:
:
EffectProperties
effectProperties
=
nsSVGEffects
:
:
GetEffectProperties
(
firstFrame
)
;
if
(
!
effectProperties
.
HasValidFilter
(
)
)
{
return
aPreEffectsOverflowRect
;
}
nsPoint
firstFrameToBoundingBox
=
GetOffsetToBoundingBox
(
firstFrame
)
;
gfxRect
overrideBBox
=
nsLayoutUtils
:
:
RectToGfxRect
(
GetPreEffectsVisualOverflowUnion
(
firstFrame
aFrame
aPreEffectsOverflowRect
firstFrameToBoundingBox
)
aFrame
-
>
PresContext
(
)
-
>
AppUnitsPerCSSPixel
(
)
)
;
overrideBBox
.
RoundOut
(
)
;
nsRect
overflowRect
=
nsFilterInstance
:
:
GetPostFilterBounds
(
firstFrame
&
overrideBBox
)
;
return
overflowRect
-
(
aFrame
-
>
GetOffsetTo
(
firstFrame
)
+
firstFrameToBoundingBox
)
;
}
nsIntRegion
nsSVGIntegrationUtils
:
:
AdjustInvalidAreaForSVGEffects
(
nsIFrame
*
aFrame
const
nsPoint
&
aToReferenceFrame
const
nsIntRegion
&
aInvalidRegion
)
{
if
(
aInvalidRegion
.
IsEmpty
(
)
)
{
return
nsIntRect
(
)
;
}
nsIFrame
*
firstFrame
=
nsLayoutUtils
:
:
FirstContinuationOrIBSplitSibling
(
aFrame
)
;
nsSVGFilterProperty
*
prop
=
nsSVGEffects
:
:
GetFilterProperty
(
firstFrame
)
;
if
(
!
prop
|
|
!
prop
-
>
IsInObserverLists
(
)
)
{
return
aInvalidRegion
;
}
int32_t
appUnitsPerDevPixel
=
aFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
if
(
!
prop
|
|
!
prop
-
>
ReferencesValidResources
(
)
)
{
nsRect
overflow
=
aFrame
-
>
GetVisualOverflowRect
(
)
+
aToReferenceFrame
;
return
overflow
.
ToOutsidePixels
(
appUnitsPerDevPixel
)
;
}
nsPoint
toBoundingBox
=
aFrame
-
>
GetOffsetTo
(
firstFrame
)
+
GetOffsetToBoundingBox
(
firstFrame
)
;
toBoundingBox
-
=
aToReferenceFrame
;
nsRegion
preEffectsRegion
=
aInvalidRegion
.
ToAppUnits
(
appUnitsPerDevPixel
)
.
MovedBy
(
toBoundingBox
)
;
nsRegion
result
=
nsFilterInstance
:
:
GetPostFilterDirtyArea
(
firstFrame
preEffectsRegion
)
.
MovedBy
(
-
toBoundingBox
)
;
return
result
.
ToOutsidePixels
(
appUnitsPerDevPixel
)
;
}
nsRect
nsSVGIntegrationUtils
:
:
GetRequiredSourceForInvalidArea
(
nsIFrame
*
aFrame
const
nsRect
&
aDirtyRect
)
{
nsIFrame
*
firstFrame
=
nsLayoutUtils
:
:
FirstContinuationOrIBSplitSibling
(
aFrame
)
;
nsSVGFilterProperty
*
prop
=
nsSVGEffects
:
:
GetFilterProperty
(
firstFrame
)
;
if
(
!
prop
|
|
!
prop
-
>
ReferencesValidResources
(
)
)
{
return
aDirtyRect
;
}
nsPoint
toUserSpace
=
aFrame
-
>
GetOffsetTo
(
firstFrame
)
+
GetOffsetToBoundingBox
(
firstFrame
)
;
nsRect
postEffectsRect
=
aDirtyRect
+
toUserSpace
;
return
nsFilterInstance
:
:
GetPreFilterNeededArea
(
firstFrame
postEffectsRect
)
.
GetBounds
(
)
-
toUserSpace
;
}
bool
nsSVGIntegrationUtils
:
:
HitTestFrameForEffects
(
nsIFrame
*
aFrame
const
nsPoint
&
aPt
)
{
nsIFrame
*
firstFrame
=
nsLayoutUtils
:
:
FirstContinuationOrIBSplitSibling
(
aFrame
)
;
nsPoint
toUserSpace
;
if
(
aFrame
-
>
GetStateBits
(
)
&
NS_FRAME_SVG_LAYOUT
)
{
toUserSpace
=
aFrame
-
>
GetPosition
(
)
;
}
else
{
toUserSpace
=
aFrame
-
>
GetOffsetTo
(
firstFrame
)
+
GetOffsetToBoundingBox
(
firstFrame
)
;
}
nsPoint
pt
=
aPt
+
toUserSpace
;
gfxPoint
userSpacePt
=
gfxPoint
(
pt
.
x
pt
.
y
)
/
aFrame
-
>
PresContext
(
)
-
>
AppUnitsPerCSSPixel
(
)
;
return
nsSVGUtils
:
:
HitTestClip
(
firstFrame
userSpacePt
)
;
}
class
RegularFramePaintCallback
:
public
nsSVGFilterPaintCallback
{
public
:
RegularFramePaintCallback
(
nsDisplayListBuilder
*
aBuilder
LayerManager
*
aManager
const
gfxPoint
&
aUserSpaceToFrameSpaceOffset
)
:
mBuilder
(
aBuilder
)
mLayerManager
(
aManager
)
mUserSpaceToFrameSpaceOffset
(
aUserSpaceToFrameSpaceOffset
)
{
}
virtual
DrawResult
Paint
(
gfxContext
&
aContext
nsIFrame
*
aTarget
const
gfxMatrix
&
aTransform
const
nsIntRect
*
aDirtyRect
)
override
{
BasicLayerManager
*
basic
=
mLayerManager
-
>
AsBasicLayerManager
(
)
;
RefPtr
<
gfxContext
>
oldCtx
=
basic
-
>
GetTarget
(
)
;
basic
-
>
SetTarget
(
&
aContext
)
;
gfxContextMatrixAutoSaveRestore
autoSR
(
&
aContext
)
;
aContext
.
SetMatrix
(
aContext
.
CurrentMatrix
(
)
.
Translate
(
-
mUserSpaceToFrameSpaceOffset
)
)
;
mLayerManager
-
>
EndTransaction
(
FrameLayerBuilder
:
:
DrawPaintedLayer
mBuilder
)
;
basic
-
>
SetTarget
(
oldCtx
)
;
return
DrawResult
:
:
SUCCESS
;
}
private
:
nsDisplayListBuilder
*
mBuilder
;
LayerManager
*
mLayerManager
;
gfxPoint
mUserSpaceToFrameSpaceOffset
;
}
;
typedef
nsSVGIntegrationUtils
:
:
PaintFramesParams
PaintFramesParams
;
static
DrawResult
PaintMaskSurface
(
const
PaintFramesParams
&
aParams
DrawTarget
*
aMaskDT
float
aOpacity
nsStyleContext
*
aSC
const
nsTArray
<
nsSVGMaskFrame
*
>
&
aMaskFrames
const
gfxMatrix
&
aMaskSurfaceMatrix
const
nsPoint
&
aOffsetToUserSpace
)
{
MOZ_ASSERT
(
aMaskFrames
.
Length
(
)
>
0
)
;
MOZ_ASSERT
(
aMaskDT
-
>
GetFormat
(
)
=
=
SurfaceFormat
:
:
A8
)
;
MOZ_ASSERT
(
aOpacity
=
=
1
.
0
|
|
aMaskFrames
.
Length
(
)
=
=
1
)
;
const
nsStyleSVGReset
*
svgReset
=
aSC
-
>
StyleSVGReset
(
)
;
gfxMatrix
cssPxToDevPxMatrix
=
nsSVGUtils
:
:
GetCSSPxToDevPxMatrix
(
aParams
.
frame
)
;
nsPresContext
*
presContext
=
aParams
.
frame
-
>
PresContext
(
)
;
gfxPoint
devPixelOffsetToUserSpace
=
nsLayoutUtils
:
:
PointToGfxPoint
(
aOffsetToUserSpace
presContext
-
>
AppUnitsPerDevPixel
(
)
)
;
RefPtr
<
gfxContext
>
maskContext
=
gfxContext
:
:
CreateOrNull
(
aMaskDT
)
;
MOZ_ASSERT
(
maskContext
)
;
maskContext
-
>
SetMatrix
(
aMaskSurfaceMatrix
)
;
for
(
int
i
=
aMaskFrames
.
Length
(
)
-
1
;
i
>
=
0
;
i
-
-
)
{
nsSVGMaskFrame
*
maskFrame
=
aMaskFrames
[
i
]
;
DrawResult
result
=
DrawResult
:
:
SUCCESS
;
CompositionOp
compositionOp
=
(
i
=
=
int
(
aMaskFrames
.
Length
(
)
-
1
)
)
?
CompositionOp
:
:
OP_OVER
:
nsCSSRendering
:
:
GetGFXCompositeMode
(
svgReset
-
>
mMask
.
mLayers
[
i
]
.
mComposite
)
;
if
(
maskFrame
)
{
Matrix
svgMaskMatrix
;
nsSVGMaskFrame
:
:
MaskParams
params
(
maskContext
aParams
.
frame
cssPxToDevPxMatrix
aOpacity
&
svgMaskMatrix
svgReset
-
>
mMask
.
mLayers
[
i
]
.
mMaskMode
)
;
RefPtr
<
SourceSurface
>
svgMask
;
Tie
(
result
svgMask
)
=
maskFrame
-
>
GetMaskForMaskedFrame
(
params
)
;
if
(
svgMask
)
{
MOZ_ASSERT
(
result
=
=
DrawResult
:
:
SUCCESS
)
;
gfxContextMatrixAutoSaveRestore
matRestore
(
maskContext
)
;
maskContext
-
>
Multiply
(
ThebesMatrix
(
svgMaskMatrix
)
)
;
aMaskDT
-
>
MaskSurface
(
ColorPattern
(
Color
(
0
.
0
0
.
0
0
.
0
1
.
0
)
)
svgMask
Point
(
0
0
)
DrawOptions
(
1
.
0
compositionOp
)
)
;
}
if
(
result
!
=
DrawResult
:
:
SUCCESS
)
{
return
result
;
}
}
else
{
gfxContextMatrixAutoSaveRestore
matRestore
(
maskContext
)
;
maskContext
-
>
Multiply
(
gfxMatrix
:
:
Translation
(
-
devPixelOffsetToUserSpace
)
)
;
nsRenderingContext
rc
(
maskContext
)
;
nsCSSRendering
:
:
PaintBGParams
params
=
nsCSSRendering
:
:
PaintBGParams
:
:
ForSingleLayer
(
*
presContext
rc
aParams
.
dirtyRect
aParams
.
borderArea
aParams
.
frame
aParams
.
builder
-
>
GetBackgroundPaintFlags
(
)
|
nsCSSRendering
:
:
PAINTBG_MASK_IMAGE
i
compositionOp
aOpacity
)
;
result
=
nsCSSRendering
:
:
PaintStyleImageLayerWithSC
(
params
aSC
*
aParams
.
frame
-
>
StyleBorder
(
)
)
;
if
(
result
!
=
DrawResult
:
:
SUCCESS
)
{
return
result
;
}
}
}
return
DrawResult
:
:
SUCCESS
;
}
struct
MaskPaintResult
{
RefPtr
<
SourceSurface
>
maskSurface
;
Matrix
maskTransform
;
DrawResult
result
;
bool
transparentBlackMask
;
bool
opacityApplied
;
MaskPaintResult
(
)
:
result
(
DrawResult
:
:
SUCCESS
)
transparentBlackMask
(
false
)
opacityApplied
(
false
)
{
}
}
;
static
MaskPaintResult
CreateAndPaintMaskSurface
(
const
PaintFramesParams
&
aParams
float
aOpacity
nsStyleContext
*
aSC
const
nsTArray
<
nsSVGMaskFrame
*
>
&
aMaskFrames
const
nsPoint
&
aOffsetToUserSpace
)
{
const
nsStyleSVGReset
*
svgReset
=
aSC
-
>
StyleSVGReset
(
)
;
MOZ_ASSERT
(
aMaskFrames
.
Length
(
)
>
0
)
;
MaskPaintResult
paintResult
;
gfxContext
&
ctx
=
aParams
.
ctx
;
if
(
(
(
aMaskFrames
.
Length
(
)
=
=
1
)
&
&
aMaskFrames
[
0
]
)
)
{
gfxMatrix
cssPxToDevPxMatrix
=
nsSVGUtils
:
:
GetCSSPxToDevPxMatrix
(
aParams
.
frame
)
;
paintResult
.
opacityApplied
=
true
;
nsSVGMaskFrame
:
:
MaskParams
params
(
&
ctx
aParams
.
frame
cssPxToDevPxMatrix
aOpacity
&
paintResult
.
maskTransform
svgReset
-
>
mMask
.
mLayers
[
0
]
.
mMaskMode
)
;
Tie
(
paintResult
.
result
paintResult
.
maskSurface
)
=
aMaskFrames
[
0
]
-
>
GetMaskForMaskedFrame
(
params
)
;
if
(
!
paintResult
.
maskSurface
)
{
paintResult
.
transparentBlackMask
=
true
;
}
return
paintResult
;
}
const
IntRect
&
maskSurfaceRect
=
aParams
.
maskRect
;
if
(
maskSurfaceRect
.
IsEmpty
(
)
)
{
paintResult
.
transparentBlackMask
=
true
;
return
paintResult
;
}
RefPtr
<
DrawTarget
>
maskDT
=
ctx
.
GetDrawTarget
(
)
-
>
CreateSimilarDrawTarget
(
maskSurfaceRect
.
Size
(
)
SurfaceFormat
:
:
A8
)
;
if
(
!
maskDT
|
|
!
maskDT
-
>
IsValid
(
)
)
{
paintResult
.
result
=
DrawResult
:
:
TEMPORARY_ERROR
;
return
paintResult
;
}
paintResult
.
opacityApplied
=
(
aMaskFrames
.
Length
(
)
=
=
1
)
;
gfxMatrix
maskSurfaceMatrix
=
ctx
.
CurrentMatrix
(
)
*
gfxMatrix
:
:
Translation
(
-
aParams
.
maskRect
.
TopLeft
(
)
)
;
paintResult
.
result
=
PaintMaskSurface
(
aParams
maskDT
paintResult
.
opacityApplied
?
aOpacity
:
1
.
0
aSC
aMaskFrames
maskSurfaceMatrix
aOffsetToUserSpace
)
;
if
(
paintResult
.
result
!
=
DrawResult
:
:
SUCCESS
)
{
paintResult
.
transparentBlackMask
=
!
(
aParams
.
frame
-
>
GetStateBits
(
)
&
NS_FRAME_SVG_LAYOUT
)
;
MOZ_ASSERT
(
!
paintResult
.
maskSurface
)
;
return
paintResult
;
}
paintResult
.
maskTransform
=
ToMatrix
(
maskSurfaceMatrix
)
;
if
(
!
paintResult
.
maskTransform
.
Invert
(
)
)
{
return
paintResult
;
}
paintResult
.
maskSurface
=
maskDT
-
>
Snapshot
(
)
;
return
paintResult
;
}
static
bool
ValidateSVGFrame
(
nsIFrame
*
aFrame
)
{
#
ifdef
DEBUG
NS_ASSERTION
(
!
(
aFrame
-
>
GetStateBits
(
)
&
NS_FRAME_SVG_LAYOUT
)
|
|
(
NS_SVGDisplayListPaintingEnabled
(
)
&
&
!
(
aFrame
-
>
GetStateBits
(
)
&
NS_FRAME_IS_NONDISPLAY
)
)
"
Should
not
use
nsSVGIntegrationUtils
on
this
SVG
frame
"
)
;
#
endif
bool
hasSVGLayout
=
(
aFrame
-
>
GetStateBits
(
)
&
NS_FRAME_SVG_LAYOUT
)
;
if
(
hasSVGLayout
)
{
#
ifdef
DEBUG
nsSVGDisplayableFrame
*
svgFrame
=
do_QueryFrame
(
aFrame
)
;
MOZ_ASSERT
(
svgFrame
&
&
aFrame
-
>
GetContent
(
)
-
>
IsSVGElement
(
)
"
A
non
-
SVG
frame
carries
NS_FRAME_SVG_LAYOUT
flag
?
"
)
;
#
endif
const
nsIContent
*
content
=
aFrame
-
>
GetContent
(
)
;
if
(
!
static_cast
<
const
nsSVGElement
*
>
(
content
)
-
>
HasValidDimensions
(
)
)
{
return
false
;
}
}
return
true
;
}
struct
EffectOffsets
{
nsPoint
offsetToBoundingBox
;
gfxPoint
offsetToBoundingBoxInDevPx
;
nsPoint
offsetToUserSpace
;
gfxPoint
offsetToUserSpaceInDevPx
;
}
;
EffectOffsets
ComputeEffectOffset
(
nsIFrame
*
aFrame
const
PaintFramesParams
&
aParams
)
{
EffectOffsets
result
;
result
.
offsetToBoundingBox
=
aParams
.
builder
-
>
ToReferenceFrame
(
aFrame
)
-
nsSVGIntegrationUtils
:
:
GetOffsetToBoundingBox
(
aFrame
)
;
if
(
!
aFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eSVG
)
)
{
result
.
offsetToBoundingBox
=
nsPoint
(
aFrame
-
>
PresContext
(
)
-
>
RoundAppUnitsToNearestDevPixels
(
result
.
offsetToBoundingBox
.
x
)
aFrame
-
>
PresContext
(
)
-
>
RoundAppUnitsToNearestDevPixels
(
result
.
offsetToBoundingBox
.
y
)
)
;
}
gfxPoint
toUserSpaceGfx
=
nsSVGUtils
:
:
FrameSpaceInCSSPxToUserSpaceOffset
(
aFrame
)
;
nsPoint
toUserSpace
=
nsPoint
(
nsPresContext
:
:
CSSPixelsToAppUnits
(
float
(
toUserSpaceGfx
.
x
)
)
nsPresContext
:
:
CSSPixelsToAppUnits
(
float
(
toUserSpaceGfx
.
y
)
)
)
;
result
.
offsetToUserSpace
=
result
.
offsetToBoundingBox
-
toUserSpace
;
#
ifdef
DEBUG
bool
hasSVGLayout
=
(
aFrame
-
>
GetStateBits
(
)
&
NS_FRAME_SVG_LAYOUT
)
;
NS_ASSERTION
(
hasSVGLayout
|
|
result
.
offsetToBoundingBox
=
=
result
.
offsetToUserSpace
"
For
non
-
SVG
frames
there
shouldn
'
t
be
any
additional
offset
"
)
;
#
endif
result
.
offsetToUserSpaceInDevPx
=
nsLayoutUtils
:
:
PointToGfxPoint
(
result
.
offsetToUserSpace
aFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
)
;
result
.
offsetToBoundingBoxInDevPx
=
nsLayoutUtils
:
:
PointToGfxPoint
(
result
.
offsetToBoundingBox
aFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
)
;
return
result
;
}
static
EffectOffsets
MoveContextOriginToUserSpace
(
nsIFrame
*
aFrame
const
PaintFramesParams
&
aParams
)
{
EffectOffsets
offset
=
ComputeEffectOffset
(
aFrame
aParams
)
;
aParams
.
ctx
.
SetMatrix
(
aParams
.
ctx
.
CurrentMatrix
(
)
.
Translate
(
offset
.
offsetToUserSpaceInDevPx
)
)
;
return
offset
;
}
bool
nsSVGIntegrationUtils
:
:
IsMaskResourceReady
(
nsIFrame
*
aFrame
)
{
nsIFrame
*
firstFrame
=
nsLayoutUtils
:
:
FirstContinuationOrIBSplitSibling
(
aFrame
)
;
nsSVGEffects
:
:
EffectProperties
effectProperties
=
nsSVGEffects
:
:
GetEffectProperties
(
firstFrame
)
;
nsTArray
<
nsSVGMaskFrame
*
>
maskFrames
=
effectProperties
.
GetMaskFrames
(
)
;
const
nsStyleSVGReset
*
svgReset
=
firstFrame
-
>
StyleSVGReset
(
)
;
for
(
uint32_t
i
=
0
;
i
<
maskFrames
.
Length
(
)
;
i
+
+
)
{
if
(
maskFrames
[
i
]
)
{
continue
;
}
if
(
!
svgReset
-
>
mMask
.
mLayers
[
i
]
.
mImage
.
IsComplete
(
)
)
{
return
false
;
}
}
return
true
;
}
class
AutoPopGroup
{
public
:
AutoPopGroup
(
)
:
mContext
(
nullptr
)
{
}
~
AutoPopGroup
(
)
{
if
(
mContext
)
{
mContext
-
>
PopGroupAndBlend
(
)
;
}
}
void
SetContext
(
gfxContext
*
aContext
)
{
mContext
=
aContext
;
}
private
:
gfxContext
*
mContext
;
}
;
DrawResult
nsSVGIntegrationUtils
:
:
PaintMask
(
const
PaintFramesParams
&
aParams
)
{
nsSVGUtils
:
:
MaskUsage
maskUsage
;
nsSVGUtils
:
:
DetermineMaskUsage
(
aParams
.
frame
aParams
.
handleOpacity
maskUsage
)
;
nsIFrame
*
frame
=
aParams
.
frame
;
if
(
!
ValidateSVGFrame
(
frame
)
)
{
return
DrawResult
:
:
SUCCESS
;
}
gfxContext
&
ctx
=
aParams
.
ctx
;
nsIFrame
*
firstFrame
=
nsLayoutUtils
:
:
FirstContinuationOrIBSplitSibling
(
frame
)
;
nsSVGEffects
:
:
EffectProperties
effectProperties
=
nsSVGEffects
:
:
GetEffectProperties
(
firstFrame
)
;
DrawResult
result
=
DrawResult
:
:
SUCCESS
;
RefPtr
<
DrawTarget
>
maskTarget
=
ctx
.
GetDrawTarget
(
)
;
if
(
maskUsage
.
shouldGenerateMaskLayer
&
&
maskUsage
.
shouldGenerateClipMaskLayer
)
{
maskTarget
=
maskTarget
-
>
CreateSimilarDrawTarget
(
maskTarget
-
>
GetSize
(
)
SurfaceFormat
:
:
A8
)
;
}
nsTArray
<
nsSVGMaskFrame
*
>
maskFrames
=
effectProperties
.
GetMaskFrames
(
)
;
AutoPopGroup
autoPop
;
bool
shouldPushOpacity
=
(
maskUsage
.
opacity
!
=
1
.
0
)
&
&
(
maskFrames
.
Length
(
)
!
=
1
)
;
if
(
shouldPushOpacity
)
{
ctx
.
PushGroupForBlendBack
(
gfxContentType
:
:
COLOR_ALPHA
maskUsage
.
opacity
)
;
autoPop
.
SetContext
(
&
ctx
)
;
}
gfxContextMatrixAutoSaveRestore
matSR
;
gfxContextAutoSaveRestore
basicShapeSR
;
if
(
maskUsage
.
shouldApplyBasicShape
)
{
matSR
.
SetContext
(
&
ctx
)
;
MoveContextOriginToUserSpace
(
firstFrame
aParams
)
;
basicShapeSR
.
SetContext
(
&
ctx
)
;
nsCSSClipPathInstance
:
:
ApplyBasicShapeClip
(
ctx
frame
)
;
if
(
!
maskUsage
.
shouldGenerateMaskLayer
)
{
ctx
.
SetColor
(
Color
(
1
.
0
1
.
0
1
.
0
1
.
0
)
)
;
ctx
.
Fill
(
)
;
return
result
;
}
}
if
(
maskUsage
.
shouldGenerateMaskLayer
)
{
matSR
.
Restore
(
)
;
matSR
.
SetContext
(
&
ctx
)
;
EffectOffsets
offsets
=
MoveContextOriginToUserSpace
(
frame
aParams
)
;
result
=
PaintMaskSurface
(
aParams
maskTarget
shouldPushOpacity
?
1
.
0
:
maskUsage
.
opacity
firstFrame
-
>
StyleContext
(
)
maskFrames
ctx
.
CurrentMatrix
(
)
offsets
.
offsetToUserSpace
)
;
if
(
result
!
=
DrawResult
:
:
SUCCESS
)
{
return
result
;
}
}
if
(
maskUsage
.
shouldGenerateClipMaskLayer
|
|
maskUsage
.
shouldApplyClipPath
)
{
matSR
.
Restore
(
)
;
matSR
.
SetContext
(
&
ctx
)
;
MoveContextOriginToUserSpace
(
firstFrame
aParams
)
;
Matrix
clipMaskTransform
;
gfxMatrix
cssPxToDevPxMatrix
=
nsSVGUtils
:
:
GetCSSPxToDevPxMatrix
(
frame
)
;
nsSVGClipPathFrame
*
clipPathFrame
=
effectProperties
.
GetClipPathFrame
(
)
;
RefPtr
<
SourceSurface
>
maskSurface
=
maskUsage
.
shouldGenerateMaskLayer
?
maskTarget
-
>
Snapshot
(
)
:
nullptr
;
result
=
clipPathFrame
-
>
PaintClipMask
(
ctx
frame
cssPxToDevPxMatrix
&
clipMaskTransform
maskSurface
ToMatrix
(
ctx
.
CurrentMatrix
(
)
)
)
;
}
return
result
;
}
DrawResult
nsSVGIntegrationUtils
:
:
PaintMaskAndClipPath
(
const
PaintFramesParams
&
aParams
)
{
MOZ_ASSERT
(
UsingMaskOrClipPathForFrame
(
aParams
.
frame
)
"
Should
not
use
this
method
when
no
mask
or
clipPath
effect
"
"
on
this
frame
"
)
;
nsIFrame
*
frame
=
aParams
.
frame
;
DrawResult
result
=
DrawResult
:
:
SUCCESS
;
if
(
!
ValidateSVGFrame
(
frame
)
)
{
return
result
;
}
nsSVGUtils
:
:
MaskUsage
maskUsage
;
nsSVGUtils
:
:
DetermineMaskUsage
(
aParams
.
frame
aParams
.
handleOpacity
maskUsage
)
;
if
(
maskUsage
.
opacity
=
=
0
.
0f
)
{
return
DrawResult
:
:
SUCCESS
;
}
gfxContext
&
context
=
aParams
.
ctx
;
gfxContextMatrixAutoSaveRestore
matrixAutoSaveRestore
(
&
context
)
;
nsIFrame
*
firstFrame
=
nsLayoutUtils
:
:
FirstContinuationOrIBSplitSibling
(
frame
)
;
nsSVGEffects
:
:
EffectProperties
effectProperties
=
nsSVGEffects
:
:
GetEffectProperties
(
firstFrame
)
;
nsSVGClipPathFrame
*
clipPathFrame
=
effectProperties
.
GetClipPathFrame
(
)
;
gfxMatrix
cssPxToDevPxMatrix
=
nsSVGUtils
:
:
GetCSSPxToDevPxMatrix
(
frame
)
;
nsTArray
<
nsSVGMaskFrame
*
>
maskFrames
=
effectProperties
.
GetMaskFrames
(
)
;
bool
shouldGenerateMask
=
(
maskUsage
.
opacity
!
=
1
.
0f
|
|
maskUsage
.
shouldGenerateClipMaskLayer
|
|
maskUsage
.
shouldGenerateMaskLayer
)
;
bool
shouldPushMask
=
false
;
if
(
shouldGenerateMask
)
{
gfxContextMatrixAutoSaveRestore
matSR
;
Matrix
maskTransform
;
RefPtr
<
SourceSurface
>
maskSurface
;
bool
opacityApplied
=
false
;
if
(
maskUsage
.
shouldGenerateMaskLayer
)
{
matSR
.
SetContext
(
&
context
)
;
EffectOffsets
offsets
=
MoveContextOriginToUserSpace
(
frame
aParams
)
;
MaskPaintResult
paintResult
=
CreateAndPaintMaskSurface
(
aParams
maskUsage
.
opacity
firstFrame
-
>
StyleContext
(
)
maskFrames
offsets
.
offsetToUserSpace
)
;
if
(
paintResult
.
transparentBlackMask
)
{
return
paintResult
.
result
;
}
result
&
=
paintResult
.
result
;
maskSurface
=
paintResult
.
maskSurface
;
if
(
maskSurface
)
{
shouldPushMask
=
true
;
maskTransform
=
paintResult
.
maskTransform
;
opacityApplied
=
paintResult
.
opacityApplied
;
}
}
if
(
maskUsage
.
shouldGenerateClipMaskLayer
)
{
matSR
.
Restore
(
)
;
matSR
.
SetContext
(
&
context
)
;
MoveContextOriginToUserSpace
(
firstFrame
aParams
)
;
Matrix
clipMaskTransform
;
DrawResult
clipMaskResult
;
RefPtr
<
SourceSurface
>
clipMaskSurface
;
Tie
(
clipMaskResult
clipMaskSurface
)
=
clipPathFrame
-
>
GetClipMask
(
context
frame
cssPxToDevPxMatrix
&
clipMaskTransform
maskSurface
maskTransform
)
;
if
(
clipMaskSurface
)
{
maskSurface
=
clipMaskSurface
;
maskTransform
=
clipMaskTransform
;
}
else
{
return
clipMaskResult
;
}
result
&
=
clipMaskResult
;
shouldPushMask
=
true
;
}
if
(
!
maskUsage
.
shouldGenerateClipMaskLayer
&
&
!
maskUsage
.
shouldGenerateMaskLayer
)
{
MOZ_ASSERT
(
maskUsage
.
opacity
!
=
1
.
0f
)
;
matSR
.
SetContext
(
&
context
)
;
MoveContextOriginToUserSpace
(
firstFrame
aParams
)
;
shouldPushMask
=
true
;
}
if
(
shouldPushMask
)
{
if
(
aParams
.
layerManager
-
>
GetRoot
(
)
-
>
GetContentFlags
(
)
&
Layer
:
:
CONTENT_COMPONENT_ALPHA
)
{
context
.
PushGroupAndCopyBackground
(
gfxContentType
:
:
COLOR_ALPHA
opacityApplied
?
1
.
0
:
maskUsage
.
opacity
maskSurface
maskTransform
)
;
}
else
{
context
.
PushGroupForBlendBack
(
gfxContentType
:
:
COLOR_ALPHA
opacityApplied
?
1
.
0
:
maskUsage
.
opacity
maskSurface
maskTransform
)
;
}
}
}
if
(
maskUsage
.
shouldApplyClipPath
|
|
maskUsage
.
shouldApplyBasicShape
)
{
gfxContextMatrixAutoSaveRestore
matSR
(
&
context
)
;
MoveContextOriginToUserSpace
(
firstFrame
aParams
)
;
MOZ_ASSERT
(
!
maskUsage
.
shouldApplyClipPath
|
|
!
maskUsage
.
shouldApplyBasicShape
)
;
if
(
maskUsage
.
shouldApplyClipPath
)
{
clipPathFrame
-
>
ApplyClipPath
(
context
frame
cssPxToDevPxMatrix
)
;
}
else
{
nsCSSClipPathInstance
:
:
ApplyBasicShapeClip
(
context
frame
)
;
}
}
context
.
SetMatrix
(
matrixAutoSaveRestore
.
Matrix
(
)
)
;
BasicLayerManager
*
basic
=
aParams
.
layerManager
-
>
AsBasicLayerManager
(
)
;
RefPtr
<
gfxContext
>
oldCtx
=
basic
-
>
GetTarget
(
)
;
basic
-
>
SetTarget
(
&
context
)
;
aParams
.
layerManager
-
>
EndTransaction
(
FrameLayerBuilder
:
:
DrawPaintedLayer
aParams
.
builder
)
;
basic
-
>
SetTarget
(
oldCtx
)
;
if
(
gfxPrefs
:
:
DrawMaskLayer
(
)
)
{
gfxContextAutoSaveRestore
saver
(
&
context
)
;
context
.
NewPath
(
)
;
gfxRect
drawingRect
=
nsLayoutUtils
:
:
RectToGfxRect
(
aParams
.
borderArea
frame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
)
;
context
.
Rectangle
(
drawingRect
true
)
;
Color
overlayColor
(
0
.
0f
0
.
0f
0
.
0f
0
.
8f
)
;
if
(
maskUsage
.
shouldGenerateMaskLayer
)
{
overlayColor
.
r
=
1
.
0f
;
}
if
(
maskUsage
.
shouldApplyClipPath
|
|
maskUsage
.
shouldGenerateClipMaskLayer
)
{
overlayColor
.
g
=
1
.
0f
;
}
if
(
maskUsage
.
shouldApplyBasicShape
)
{
overlayColor
.
b
=
1
.
0f
;
}
context
.
SetColor
(
overlayColor
)
;
context
.
Fill
(
)
;
}
if
(
maskUsage
.
shouldApplyClipPath
|
|
maskUsage
.
shouldApplyBasicShape
)
{
context
.
PopClip
(
)
;
}
if
(
shouldPushMask
)
{
context
.
PopGroupAndBlend
(
)
;
}
return
result
;
}
DrawResult
nsSVGIntegrationUtils
:
:
PaintFilter
(
const
PaintFramesParams
&
aParams
)
{
MOZ_ASSERT
(
!
aParams
.
builder
-
>
IsForGenerateGlyphMask
(
)
"
Filter
effect
is
discarded
while
generating
glyph
mask
.
"
)
;
MOZ_ASSERT
(
aParams
.
frame
-
>
StyleEffects
(
)
-
>
HasFilters
(
)
"
Should
not
use
this
method
when
no
filter
effect
on
this
frame
"
)
;
nsIFrame
*
frame
=
aParams
.
frame
;
if
(
!
ValidateSVGFrame
(
frame
)
)
{
return
DrawResult
:
:
SUCCESS
;
}
float
opacity
=
nsSVGUtils
:
:
ComputeOpacity
(
frame
aParams
.
handleOpacity
)
;
if
(
opacity
=
=
0
.
0f
)
{
return
DrawResult
:
:
SUCCESS
;
}
nsIFrame
*
firstFrame
=
nsLayoutUtils
:
:
FirstContinuationOrIBSplitSibling
(
frame
)
;
nsSVGEffects
:
:
EffectProperties
effectProperties
=
nsSVGEffects
:
:
GetEffectProperties
(
firstFrame
)
;
if
(
effectProperties
.
HasInvalidFilter
(
)
)
{
return
DrawResult
:
:
NOT_READY
;
}
gfxContext
&
context
=
aParams
.
ctx
;
gfxContextAutoSaveRestore
autoSR
(
&
context
)
;
EffectOffsets
offsets
=
MoveContextOriginToUserSpace
(
firstFrame
aParams
)
;
if
(
opacity
!
=
1
.
0f
)
{
context
.
PushGroupForBlendBack
(
gfxContentType
:
:
COLOR_ALPHA
opacity
nullptr
Matrix
(
)
)
;
}
RegularFramePaintCallback
callback
(
aParams
.
builder
aParams
.
layerManager
offsets
.
offsetToUserSpaceInDevPx
)
;
nsRegion
dirtyRegion
=
aParams
.
dirtyRect
-
offsets
.
offsetToBoundingBox
;
gfxSize
scaleFactors
=
context
.
CurrentMatrix
(
)
.
ScaleFactors
(
true
)
;
gfxMatrix
scaleMatrix
(
scaleFactors
.
width
0
.
0f
0
.
0f
scaleFactors
.
height
0
.
0f
0
.
0f
)
;
gfxMatrix
tm
=
scaleMatrix
*
nsSVGUtils
:
:
GetCSSPxToDevPxMatrix
(
frame
)
;
DrawResult
result
=
nsFilterInstance
:
:
PaintFilteredFrame
(
frame
context
.
GetDrawTarget
(
)
tm
&
callback
&
dirtyRegion
)
;
if
(
opacity
!
=
1
.
0f
)
{
context
.
PopGroupAndBlend
(
)
;
}
return
result
;
}
class
PaintFrameCallback
:
public
gfxDrawingCallback
{
public
:
PaintFrameCallback
(
nsIFrame
*
aFrame
const
nsSize
aPaintServerSize
const
IntSize
aRenderSize
uint32_t
aFlags
)
:
mFrame
(
aFrame
)
mPaintServerSize
(
aPaintServerSize
)
mRenderSize
(
aRenderSize
)
mFlags
(
aFlags
)
{
}
virtual
bool
operator
(
)
(
gfxContext
*
aContext
const
gfxRect
&
aFillRect
const
SamplingFilter
aSamplingFilter
const
gfxMatrix
&
aTransform
)
override
;
private
:
nsIFrame
*
mFrame
;
nsSize
mPaintServerSize
;
IntSize
mRenderSize
;
uint32_t
mFlags
;
}
;
bool
PaintFrameCallback
:
:
operator
(
)
(
gfxContext
*
aContext
const
gfxRect
&
aFillRect
const
SamplingFilter
aSamplingFilter
const
gfxMatrix
&
aTransform
)
{
if
(
mFrame
-
>
GetStateBits
(
)
&
NS_FRAME_DRAWING_AS_PAINTSERVER
)
return
false
;
AutoSetRestorePaintServerState
paintServer
(
mFrame
)
;
aContext
-
>
Save
(
)
;
aContext
-
>
NewPath
(
)
;
aContext
-
>
Rectangle
(
aFillRect
)
;
aContext
-
>
Clip
(
)
;
gfxMatrix
invmatrix
=
aTransform
;
if
(
!
invmatrix
.
Invert
(
)
)
{
return
false
;
}
aContext
-
>
Multiply
(
invmatrix
)
;
int32_t
appUnitsPerDevPixel
=
mFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
nsPoint
offset
=
nsSVGIntegrationUtils
:
:
GetOffsetToBoundingBox
(
mFrame
)
;
gfxPoint
devPxOffset
=
gfxPoint
(
offset
.
x
offset
.
y
)
/
appUnitsPerDevPixel
;
aContext
-
>
Multiply
(
gfxMatrix
:
:
Translation
(
devPxOffset
)
)
;
gfxSize
paintServerSize
=
gfxSize
(
mPaintServerSize
.
width
mPaintServerSize
.
height
)
/
mFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
gfxFloat
scaleX
=
mRenderSize
.
width
/
paintServerSize
.
width
;
gfxFloat
scaleY
=
mRenderSize
.
height
/
paintServerSize
.
height
;
aContext
-
>
Multiply
(
gfxMatrix
:
:
Scaling
(
scaleX
scaleY
)
)
;
nsRect
dirty
(
-
offset
.
x
-
offset
.
y
mPaintServerSize
.
width
mPaintServerSize
.
height
)
;
using
PaintFrameFlags
=
nsLayoutUtils
:
:
PaintFrameFlags
;
PaintFrameFlags
flags
=
PaintFrameFlags
:
:
PAINT_IN_TRANSFORM
;
if
(
mFlags
&
nsSVGIntegrationUtils
:
:
FLAG_SYNC_DECODE_IMAGES
)
{
flags
|
=
PaintFrameFlags
:
:
PAINT_SYNC_DECODE_IMAGES
;
}
nsRenderingContext
context
(
aContext
)
;
nsLayoutUtils
:
:
PaintFrame
(
&
context
mFrame
dirty
NS_RGBA
(
0
0
0
0
)
nsDisplayListBuilderMode
:
:
PAINTING
flags
)
;
nsIFrame
*
currentFrame
=
mFrame
;
while
(
(
currentFrame
=
currentFrame
-
>
GetNextContinuation
(
)
)
!
=
nullptr
)
{
offset
=
currentFrame
-
>
GetOffsetToCrossDoc
(
mFrame
)
;
devPxOffset
=
gfxPoint
(
offset
.
x
offset
.
y
)
/
appUnitsPerDevPixel
;
aContext
-
>
Save
(
)
;
aContext
-
>
Multiply
(
gfxMatrix
:
:
Scaling
(
1
/
scaleX
1
/
scaleY
)
)
;
aContext
-
>
Multiply
(
gfxMatrix
:
:
Translation
(
devPxOffset
)
)
;
aContext
-
>
Multiply
(
gfxMatrix
:
:
Scaling
(
scaleX
scaleY
)
)
;
nsLayoutUtils
:
:
PaintFrame
(
&
context
currentFrame
dirty
-
offset
NS_RGBA
(
0
0
0
0
)
nsDisplayListBuilderMode
:
:
PAINTING
flags
)
;
aContext
-
>
Restore
(
)
;
}
aContext
-
>
Restore
(
)
;
return
true
;
}
already_AddRefed
<
gfxDrawable
>
nsSVGIntegrationUtils
:
:
DrawableFromPaintServer
(
nsIFrame
*
aFrame
nsIFrame
*
aTarget
const
nsSize
&
aPaintServerSize
const
IntSize
&
aRenderSize
const
DrawTarget
*
aDrawTarget
const
gfxMatrix
&
aContextMatrix
uint32_t
aFlags
)
{
if
(
aFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eSVGPaintServer
)
)
{
nsSVGPaintServerFrame
*
server
=
static_cast
<
nsSVGPaintServerFrame
*
>
(
aFrame
)
;
gfxRect
overrideBounds
(
0
0
aPaintServerSize
.
width
aPaintServerSize
.
height
)
;
overrideBounds
.
ScaleInverse
(
aFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
)
;
DrawResult
result
=
DrawResult
:
:
SUCCESS
;
RefPtr
<
gfxPattern
>
pattern
;
Tie
(
result
pattern
)
=
server
-
>
GetPaintServerPattern
(
aTarget
aDrawTarget
aContextMatrix
&
nsStyleSVG
:
:
mFill
1
.
0
&
overrideBounds
)
;
if
(
!
pattern
)
return
nullptr
;
gfxFloat
scaleX
=
overrideBounds
.
Width
(
)
/
aRenderSize
.
width
;
gfxFloat
scaleY
=
overrideBounds
.
Height
(
)
/
aRenderSize
.
height
;
gfxMatrix
scaleMatrix
=
gfxMatrix
:
:
Scaling
(
scaleX
scaleY
)
;
pattern
-
>
SetMatrix
(
scaleMatrix
*
pattern
-
>
GetMatrix
(
)
)
;
RefPtr
<
gfxDrawable
>
drawable
=
new
gfxPatternDrawable
(
pattern
aRenderSize
)
;
return
drawable
.
forget
(
)
;
}
RefPtr
<
gfxDrawingCallback
>
cb
=
new
PaintFrameCallback
(
aFrame
aPaintServerSize
aRenderSize
aFlags
)
;
RefPtr
<
gfxDrawable
>
drawable
=
new
gfxCallbackDrawable
(
cb
aRenderSize
)
;
return
drawable
.
forget
(
)
;
}
