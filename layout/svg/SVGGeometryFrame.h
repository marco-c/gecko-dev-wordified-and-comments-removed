#
ifndef
__SVGGEOMETRYFRAME_H__
#
define
__SVGGEOMETRYFRAME_H__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
gfxMatrix
.
h
"
#
include
"
gfxRect
.
h
"
#
include
"
nsFrame
.
h
"
#
include
"
nsSVGDisplayableFrame
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsQueryFrame
.
h
"
#
include
"
nsSVGUtils
.
h
"
namespace
mozilla
{
class
SVGGeometryFrame
;
namespace
gfx
{
class
DrawTarget
;
}
}
class
gfxContext
;
class
nsDisplaySVGGeometry
;
class
nsIAtom
;
class
nsIFrame
;
class
nsIPresShell
;
class
nsStyleContext
;
class
nsSVGMarkerFrame
;
class
nsSVGMarkerProperty
;
struct
nsRect
;
nsIFrame
*
NS_NewSVGGeometryFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
;
namespace
mozilla
{
class
SVGGeometryFrame
:
public
nsFrame
public
nsSVGDisplayableFrame
{
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
friend
nsIFrame
*
:
:
NS_NewSVGGeometryFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
;
friend
class
:
:
nsDisplaySVGGeometry
;
protected
:
SVGGeometryFrame
(
nsStyleContext
*
aContext
nsIFrame
:
:
ClassID
aID
)
:
nsFrame
(
aContext
aID
)
{
AddStateBits
(
NS_FRAME_SVG_LAYOUT
|
NS_FRAME_MAY_BE_TRANSFORMED
)
;
}
explicit
SVGGeometryFrame
(
nsStyleContext
*
aContext
)
:
SVGGeometryFrame
(
aContext
kClassID
)
{
}
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
SVGGeometryFrame
)
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eSVG
|
nsIFrame
:
:
eSVGGeometry
)
)
;
}
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
)
override
;
virtual
void
DidSetStyleContext
(
nsStyleContext
*
aOldStyleContext
)
override
;
virtual
bool
IsSVGTransformed
(
Matrix
*
aOwnTransforms
=
nullptr
Matrix
*
aFromParentTransforms
=
nullptr
)
const
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
SVGGeometry
"
)
aResult
)
;
}
#
endif
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
gfxMatrix
GetCanvasTM
(
)
;
protected
:
virtual
void
PaintSVG
(
gfxContext
&
aContext
const
gfxMatrix
&
aTransform
imgDrawingParams
&
aImgParams
const
nsIntRect
*
aDirtyRect
=
nullptr
)
override
;
virtual
nsIFrame
*
GetFrameForPoint
(
const
gfxPoint
&
aPoint
)
override
;
virtual
void
ReflowSVG
(
)
override
;
virtual
void
NotifySVGChanged
(
uint32_t
aFlags
)
override
;
virtual
SVGBBox
GetBBoxContribution
(
const
Matrix
&
aToBBoxUserspace
uint32_t
aFlags
)
override
;
virtual
bool
IsDisplayContainer
(
)
override
{
return
false
;
}
virtual
uint16_t
GetHitTestFlags
(
)
;
private
:
enum
{
eRenderFill
=
1
eRenderStroke
=
2
}
;
void
Render
(
gfxContext
*
aContext
uint32_t
aRenderComponents
const
gfxMatrix
&
aTransform
imgDrawingParams
&
aImgParams
)
;
void
PaintMarkers
(
gfxContext
&
aContext
const
gfxMatrix
&
aMatrix
imgDrawingParams
&
aImgParams
)
;
struct
MarkerProperties
{
nsSVGMarkerProperty
*
mMarkerStart
;
nsSVGMarkerProperty
*
mMarkerMid
;
nsSVGMarkerProperty
*
mMarkerEnd
;
bool
MarkersExist
(
)
const
{
return
mMarkerStart
|
|
mMarkerMid
|
|
mMarkerEnd
;
}
nsSVGMarkerFrame
*
GetMarkerStartFrame
(
)
;
nsSVGMarkerFrame
*
GetMarkerMidFrame
(
)
;
nsSVGMarkerFrame
*
GetMarkerEndFrame
(
)
;
}
;
static
MarkerProperties
GetMarkerProperties
(
SVGGeometryFrame
*
aFrame
)
;
}
;
}
#
endif
