#
ifndef
__SVGGEOMETRYFRAME_H__
#
define
__SVGGEOMETRYFRAME_H__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
gfxMatrix
.
h
"
#
include
"
gfxRect
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsFrame
.
h
"
#
include
"
nsSVGDisplayableFrame
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsQueryFrame
.
h
"
#
include
"
nsSVGUtils
.
h
"
namespace
mozilla
{
class
SVGGeometryFrame
;
class
SVGMarkerObserver
;
class
nsDisplaySVGGeometry
;
namespace
gfx
{
class
DrawTarget
;
}
}
class
gfxContext
;
class
nsAtom
;
class
nsIFrame
;
class
nsSVGMarkerFrame
;
struct
nsRect
;
namespace
mozilla
{
class
PresShell
;
}
nsIFrame
*
NS_NewSVGGeometryFrame
(
mozilla
:
:
PresShell
*
aPresShell
mozilla
:
:
ComputedStyle
*
aStyle
)
;
namespace
mozilla
{
class
SVGGeometryFrame
:
public
nsFrame
public
nsSVGDisplayableFrame
{
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
friend
nsIFrame
*
:
:
NS_NewSVGGeometryFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
friend
class
nsDisplaySVGGeometry
;
protected
:
SVGGeometryFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
nsIFrame
:
:
ClassID
aID
=
kClassID
)
:
nsFrame
(
aStyle
aPresContext
aID
)
{
AddStateBits
(
NS_FRAME_SVG_LAYOUT
|
NS_FRAME_MAY_BE_TRANSFORMED
)
;
}
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
SVGGeometryFrame
)
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
if
(
aFlags
&
eSupportsContainLayoutAndPaint
)
{
return
false
;
}
return
nsFrame
:
:
IsFrameOfType
(
aFlags
&
~
nsIFrame
:
:
eSVG
)
;
}
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
virtual
void
DidSetComputedStyle
(
ComputedStyle
*
aOldComputedStyle
)
override
;
virtual
bool
IsSVGTransformed
(
Matrix
*
aOwnTransforms
=
nullptr
Matrix
*
aFromParentTransforms
=
nullptr
)
const
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
SVGGeometry
"
)
aResult
)
;
}
#
endif
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
gfxMatrix
GetCanvasTM
(
)
;
protected
:
virtual
void
PaintSVG
(
gfxContext
&
aContext
const
gfxMatrix
&
aTransform
imgDrawingParams
&
aImgParams
const
nsIntRect
*
aDirtyRect
=
nullptr
)
override
;
virtual
nsIFrame
*
GetFrameForPoint
(
const
gfxPoint
&
aPoint
)
override
;
virtual
void
ReflowSVG
(
)
override
;
virtual
void
NotifySVGChanged
(
uint32_t
aFlags
)
override
;
virtual
SVGBBox
GetBBoxContribution
(
const
Matrix
&
aToBBoxUserspace
uint32_t
aFlags
)
override
;
virtual
bool
IsDisplayContainer
(
)
override
{
return
false
;
}
virtual
uint16_t
GetHitTestFlags
(
)
;
private
:
enum
{
eRenderFill
=
1
eRenderStroke
=
2
}
;
void
Render
(
gfxContext
*
aContext
uint32_t
aRenderComponents
const
gfxMatrix
&
aTransform
imgDrawingParams
&
aImgParams
)
;
virtual
bool
CreateWebRenderCommands
(
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
mozilla
:
:
layers
:
:
StackingContextHelper
&
aSc
mozilla
:
:
layers
:
:
RenderRootStateManager
*
aManager
nsDisplayListBuilder
*
aDisplayListBuilder
nsDisplaySVGGeometry
*
aItem
bool
aDryRun
)
{
MOZ_RELEASE_ASSERT
(
aDryRun
"
You
shouldn
'
t
be
calling
this
directly
"
)
;
return
false
;
}
void
PaintMarkers
(
gfxContext
&
aContext
const
gfxMatrix
&
aTransform
imgDrawingParams
&
aImgParams
)
;
}
;
class
nsDisplaySVGGeometry
final
:
public
nsPaintedDisplayItem
{
typedef
mozilla
:
:
image
:
:
imgDrawingParams
imgDrawingParams
;
public
:
nsDisplaySVGGeometry
(
nsDisplayListBuilder
*
aBuilder
SVGGeometryFrame
*
aFrame
)
:
nsPaintedDisplayItem
(
aBuilder
aFrame
)
{
MOZ_COUNT_CTOR
(
nsDisplaySVGGeometry
)
;
MOZ_ASSERT
(
aFrame
"
Must
have
a
frame
!
"
)
;
}
#
ifdef
NS_BUILD_REFCNT_LOGGING
virtual
~
nsDisplaySVGGeometry
(
)
{
MOZ_COUNT_DTOR
(
nsDisplaySVGGeometry
)
;
}
#
endif
NS_DISPLAY_DECL_NAME
(
"
nsDisplaySVGGeometry
"
TYPE_SVG_GEOMETRY
)
virtual
void
HitTest
(
nsDisplayListBuilder
*
aBuilder
const
nsRect
&
aRect
HitTestState
*
aState
nsTArray
<
nsIFrame
*
>
*
aOutFrames
)
override
;
virtual
void
Paint
(
nsDisplayListBuilder
*
aBuilder
gfxContext
*
aCtx
)
override
;
nsDisplayItemGeometry
*
AllocateGeometry
(
nsDisplayListBuilder
*
aBuilder
)
override
{
return
new
nsDisplayItemGenericImageGeometry
(
this
aBuilder
)
;
}
void
ComputeInvalidationRegion
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayItemGeometry
*
aGeometry
nsRegion
*
aInvalidRegion
)
const
override
;
bool
ShouldBeActive
(
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
mozilla
:
:
layers
:
:
StackingContextHelper
&
aSc
mozilla
:
:
layers
:
:
RenderRootStateManager
*
aManager
nsDisplayListBuilder
*
aDisplayListBuilder
)
{
auto
*
frame
=
static_cast
<
SVGGeometryFrame
*
>
(
mFrame
)
;
return
frame
-
>
CreateWebRenderCommands
(
aBuilder
aResources
aSc
aManager
aDisplayListBuilder
this
true
)
;
}
virtual
bool
CreateWebRenderCommands
(
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
mozilla
:
:
layers
:
:
StackingContextHelper
&
aSc
mozilla
:
:
layers
:
:
RenderRootStateManager
*
aManager
nsDisplayListBuilder
*
aDisplayListBuilder
)
override
{
auto
*
frame
=
static_cast
<
SVGGeometryFrame
*
>
(
mFrame
)
;
bool
result
=
frame
-
>
CreateWebRenderCommands
(
aBuilder
aResources
aSc
aManager
aDisplayListBuilder
this
false
)
;
MOZ_ASSERT
(
result
"
ShouldBeActive
inconsistent
with
CreateWRCommands
?
"
)
;
return
result
;
}
}
;
}
#
endif
