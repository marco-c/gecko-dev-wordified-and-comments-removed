#
ifndef
LAYOUT_SVG_SVGMASKFRAME_H_
#
define
LAYOUT_SVG_SVGMASKFRAME_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
SVGContainerFrame
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
gfxPattern
.
h
"
#
include
"
gfxMatrix
.
h
"
class
gfxContext
;
namespace
mozilla
{
class
PresShell
;
}
nsIFrame
*
NS_NewSVGMaskFrame
(
mozilla
:
:
PresShell
*
aPresShell
mozilla
:
:
ComputedStyle
*
aStyle
)
;
namespace
mozilla
{
class
SVGMaskFrame
final
:
public
SVGContainerFrame
{
friend
nsIFrame
*
:
:
NS_NewSVGMaskFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
using
Matrix
=
gfx
:
:
Matrix
;
using
SourceSurface
=
gfx
:
:
SourceSurface
;
using
imgDrawingParams
=
image
:
:
imgDrawingParams
;
protected
:
explicit
SVGMaskFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
SVGContainerFrame
(
aStyle
aPresContext
kClassID
)
mInUse
(
false
)
{
AddStateBits
(
NS_FRAME_IS_NONDISPLAY
)
;
}
public
:
NS_DECL_FRAMEARENA_HELPERS
(
SVGMaskFrame
)
struct
MaskParams
{
gfxContext
*
ctx
;
nsIFrame
*
maskedFrame
;
const
gfxMatrix
&
toUserSpace
;
float
opacity
;
StyleMaskMode
maskMode
;
imgDrawingParams
&
imgParams
;
explicit
MaskParams
(
gfxContext
*
aCtx
nsIFrame
*
aMaskedFrame
const
gfxMatrix
&
aToUserSpace
float
aOpacity
StyleMaskMode
aMaskMode
imgDrawingParams
&
aImgParams
)
:
ctx
(
aCtx
)
maskedFrame
(
aMaskedFrame
)
toUserSpace
(
aToUserSpace
)
opacity
(
aOpacity
)
maskMode
(
aMaskMode
)
imgParams
(
aImgParams
)
{
}
}
;
already_AddRefed
<
SourceSurface
>
GetMaskForMaskedFrame
(
MaskParams
&
aParams
)
;
gfxRect
GetMaskArea
(
nsIFrame
*
aMaskedFrame
)
;
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
#
ifdef
DEBUG
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
#
endif
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
{
}
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
u
"
SVGMask
"
_ns
aResult
)
;
}
#
endif
private
:
gfxMatrix
GetMaskTransform
(
nsIFrame
*
aMaskedFrame
)
;
gfxMatrix
mMatrixForChildren
;
bool
mInUse
;
virtual
gfxMatrix
GetCanvasTM
(
)
override
;
}
;
}
#
endif
