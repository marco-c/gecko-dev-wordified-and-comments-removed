#
ifndef
NS_AUTOREFERENCELIMITER_H
#
define
NS_AUTOREFERENCELIMITER_H
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ReentrancyGuard
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIFrame
.
h
"
namespace
mozilla
{
class
MOZ_RAII
AutoReferenceLimiter
{
public
:
static
const
int16_t
notReferencing
=
-
2
;
AutoReferenceLimiter
(
nsIFrame
*
aFrame
int16_t
*
aRefCounter
int16_t
aMaxReferenceCount
)
{
MOZ_ASSERT
(
aFrame
)
;
MOZ_ASSERT
(
aMaxReferenceCount
>
0
&
&
aRefCounter
&
&
(
*
aRefCounter
=
=
notReferencing
|
|
(
*
aRefCounter
>
=
0
&
&
*
aRefCounter
<
aMaxReferenceCount
)
)
)
;
if
(
*
aRefCounter
=
=
notReferencing
)
{
*
aRefCounter
=
aMaxReferenceCount
;
}
mFrame
=
aFrame
;
mRefCounter
=
aRefCounter
;
mMaxReferenceCount
=
aMaxReferenceCount
;
}
~
AutoReferenceLimiter
(
)
{
MOZ_ASSERT
(
*
mRefCounter
<
mMaxReferenceCount
)
;
(
*
mRefCounter
)
+
+
;
if
(
*
mRefCounter
=
=
mMaxReferenceCount
)
{
*
mRefCounter
=
notReferencing
;
}
}
MOZ_MUST_USE
bool
Reference
(
)
{
MOZ_ASSERT
(
*
mRefCounter
>
=
0
)
;
(
*
mRefCounter
)
-
-
;
if
(
MOZ_UNLIKELY
(
*
mRefCounter
<
0
)
)
{
ReportErrorToConsole
(
)
;
return
false
;
}
return
true
;
}
private
:
void
ReportErrorToConsole
(
)
{
nsAutoString
tag
;
mFrame
-
>
GetContent
(
)
-
>
AsElement
(
)
-
>
GetTagName
(
tag
)
;
const
char16_t
*
params
[
]
=
{
tag
.
get
(
)
}
;
auto
doc
=
mFrame
-
>
GetContent
(
)
-
>
OwnerDoc
(
)
;
auto
warning
=
(
mMaxReferenceCount
=
=
1
)
?
nsIDocument
:
:
eSVGReferenceLoop
:
nsIDocument
:
:
eSVGReferenceChainLengthExceeded
;
doc
-
>
WarnOnceAbout
(
warning
true
params
ArrayLength
(
params
)
)
;
}
nsIFrame
*
mFrame
;
int16_t
*
mRefCounter
;
int16_t
mMaxReferenceCount
;
}
;
}
#
endif
