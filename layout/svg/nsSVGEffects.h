#
ifndef
NSSVGEFFECTS_H_
#
define
NSSVGEFFECTS_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
FramePropertyTable
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIMutationObserver
.
h
"
#
include
"
nsInterfaceHashtable
.
h
"
#
include
"
nsISupportsBase
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsReferencedElement
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
#
include
"
nsSVGUtils
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsURIHashKey
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
class
nsIAtom
;
class
nsIPresShell
;
class
nsIURI
;
class
nsSVGClipPathFrame
;
class
nsSVGPaintServerFrame
;
class
nsSVGFilterFrame
;
class
nsSVGMaskFrame
;
class
nsSVGFilterChainObserver
;
class
nsSVGRenderingObserver
:
public
nsStubMutationObserver
{
protected
:
virtual
~
nsSVGRenderingObserver
(
)
{
}
public
:
typedef
mozilla
:
:
dom
:
:
Element
Element
;
nsSVGRenderingObserver
(
)
:
mInObserverList
(
false
)
{
}
NS_DECL_NSIMUTATIONOBSERVER_ATTRIBUTECHANGED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
void
InvalidateViaReferencedElement
(
)
;
void
NotifyEvictedFromRenderingObserverList
(
)
;
bool
IsInObserverList
(
)
const
{
return
mInObserverList
;
}
nsIFrame
*
GetReferencedFrame
(
)
;
nsIFrame
*
GetReferencedFrame
(
nsIAtom
*
aFrameType
bool
*
aOK
)
;
Element
*
GetReferencedElement
(
)
;
virtual
bool
ObservesReflow
(
)
{
return
true
;
}
protected
:
void
StartListening
(
)
;
void
StopListening
(
)
;
virtual
void
DoUpdate
(
)
=
0
;
virtual
Element
*
GetTarget
(
)
=
0
;
bool
mInObserverList
;
}
;
class
nsSVGIDRenderingObserver
:
public
nsSVGRenderingObserver
{
public
:
typedef
mozilla
:
:
dom
:
:
Element
Element
;
nsSVGIDRenderingObserver
(
nsIURI
*
aURI
nsIContent
*
aObservingContent
bool
aReferenceImage
)
;
virtual
~
nsSVGIDRenderingObserver
(
)
;
protected
:
Element
*
GetTarget
(
)
override
{
return
mElement
.
get
(
)
;
}
virtual
void
DoUpdate
(
)
override
;
class
SourceReference
:
public
nsReferencedElement
{
public
:
explicit
SourceReference
(
nsSVGIDRenderingObserver
*
aContainer
)
:
mContainer
(
aContainer
)
{
}
protected
:
virtual
void
ElementChanged
(
Element
*
aFrom
Element
*
aTo
)
override
{
mContainer
-
>
StopListening
(
)
;
nsReferencedElement
:
:
ElementChanged
(
aFrom
aTo
)
;
mContainer
-
>
StartListening
(
)
;
mContainer
-
>
DoUpdate
(
)
;
}
virtual
bool
IsPersistent
(
)
override
{
return
true
;
}
private
:
nsSVGIDRenderingObserver
*
mContainer
;
}
;
SourceReference
mElement
;
}
;
struct
nsSVGFrameReferenceFromProperty
{
explicit
nsSVGFrameReferenceFromProperty
(
nsIFrame
*
aFrame
)
:
mFrame
(
aFrame
)
mFramePresShell
(
aFrame
-
>
PresContext
(
)
-
>
PresShell
(
)
)
{
}
void
Detach
(
)
;
nsIFrame
*
Get
(
)
;
private
:
nsIFrame
*
mFrame
;
nsIPresShell
*
mFramePresShell
;
}
;
class
nsSVGRenderingObserverProperty
:
public
nsSVGIDRenderingObserver
{
public
:
NS_DECL_ISUPPORTS
nsSVGRenderingObserverProperty
(
nsIURI
*
aURI
nsIFrame
*
aFrame
bool
aReferenceImage
)
:
nsSVGIDRenderingObserver
(
aURI
aFrame
-
>
GetContent
(
)
aReferenceImage
)
mFrameReference
(
aFrame
)
{
}
protected
:
virtual
~
nsSVGRenderingObserverProperty
(
)
{
}
virtual
void
DoUpdate
(
)
override
;
nsSVGFrameReferenceFromProperty
mFrameReference
;
}
;
class
nsSVGFilterReference
final
:
public
nsSVGIDRenderingObserver
public
nsISVGFilterReference
{
public
:
nsSVGFilterReference
(
nsIURI
*
aURI
nsIContent
*
aObservingContent
nsSVGFilterChainObserver
*
aFilterChainObserver
)
:
nsSVGIDRenderingObserver
(
aURI
aObservingContent
false
)
mFilterChainObserver
(
aFilterChainObserver
)
{
}
bool
ReferencesValidResource
(
)
{
return
GetFilterFrame
(
)
;
}
void
DetachFromChainObserver
(
)
{
mFilterChainObserver
=
nullptr
;
}
nsSVGFilterFrame
*
GetFilterFrame
(
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
nsSVGFilterReference
nsSVGIDRenderingObserver
)
virtual
void
Invalidate
(
)
override
{
DoUpdate
(
)
;
}
;
protected
:
virtual
~
nsSVGFilterReference
(
)
{
}
virtual
void
DoUpdate
(
)
override
;
private
:
nsSVGFilterChainObserver
*
mFilterChainObserver
;
}
;
class
nsSVGFilterChainObserver
:
public
nsISupports
{
public
:
nsSVGFilterChainObserver
(
const
nsTArray
<
nsStyleFilter
>
&
aFilters
nsIContent
*
aFilteredElement
nsIFrame
*
aFiltedFrame
=
nullptr
)
;
bool
ReferencesValidResources
(
)
;
bool
IsInObserverLists
(
)
const
;
void
Invalidate
(
)
{
DoUpdate
(
)
;
}
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
nsSVGFilterChainObserver
)
protected
:
virtual
~
nsSVGFilterChainObserver
(
)
;
virtual
void
DoUpdate
(
)
=
0
;
private
:
void
DetachReferences
(
)
{
for
(
uint32_t
i
=
0
;
i
<
mReferences
.
Length
(
)
;
i
+
+
)
{
mReferences
[
i
]
-
>
DetachFromChainObserver
(
)
;
}
}
nsTArray
<
RefPtr
<
nsSVGFilterReference
>
>
mReferences
;
}
;
class
nsSVGFilterProperty
:
public
nsSVGFilterChainObserver
{
public
:
nsSVGFilterProperty
(
const
nsTArray
<
nsStyleFilter
>
&
aFilters
nsIFrame
*
aFilteredFrame
)
:
nsSVGFilterChainObserver
(
aFilters
aFilteredFrame
-
>
GetContent
(
)
aFilteredFrame
)
mFrameReference
(
aFilteredFrame
)
{
}
void
DetachFromFrame
(
)
{
mFrameReference
.
Detach
(
)
;
}
protected
:
virtual
void
DoUpdate
(
)
override
;
nsSVGFrameReferenceFromProperty
mFrameReference
;
}
;
class
nsSVGMarkerProperty
final
:
public
nsSVGRenderingObserverProperty
{
public
:
nsSVGMarkerProperty
(
nsIURI
*
aURI
nsIFrame
*
aFrame
bool
aReferenceImage
)
:
nsSVGRenderingObserverProperty
(
aURI
aFrame
aReferenceImage
)
{
}
protected
:
virtual
void
DoUpdate
(
)
override
;
}
;
class
nsSVGTextPathProperty
final
:
public
nsSVGRenderingObserverProperty
{
public
:
nsSVGTextPathProperty
(
nsIURI
*
aURI
nsIFrame
*
aFrame
bool
aReferenceImage
)
:
nsSVGRenderingObserverProperty
(
aURI
aFrame
aReferenceImage
)
mValid
(
true
)
{
}
virtual
bool
ObservesReflow
(
)
override
{
return
false
;
}
protected
:
virtual
void
DoUpdate
(
)
override
;
private
:
bool
TargetIsValid
(
)
;
bool
mValid
;
}
;
class
nsSVGPaintingProperty
final
:
public
nsSVGRenderingObserverProperty
{
public
:
nsSVGPaintingProperty
(
nsIURI
*
aURI
nsIFrame
*
aFrame
bool
aReferenceImage
)
:
nsSVGRenderingObserverProperty
(
aURI
aFrame
aReferenceImage
)
{
}
protected
:
virtual
void
DoUpdate
(
)
override
;
}
;
class
nsSVGMaskProperty
final
:
public
nsISupports
{
public
:
explicit
nsSVGMaskProperty
(
nsIFrame
*
aFrame
)
;
NS_DECL_ISUPPORTS
const
nsTArray
<
RefPtr
<
nsSVGPaintingProperty
>
>
&
GetProps
(
)
const
{
return
mProperties
;
}
private
:
virtual
~
nsSVGMaskProperty
(
)
{
}
nsTArray
<
RefPtr
<
nsSVGPaintingProperty
>
>
mProperties
;
}
;
class
nsSVGRenderingObserverList
{
public
:
nsSVGRenderingObserverList
(
)
:
mObservers
(
4
)
{
MOZ_COUNT_CTOR
(
nsSVGRenderingObserverList
)
;
}
~
nsSVGRenderingObserverList
(
)
{
InvalidateAll
(
)
;
MOZ_COUNT_DTOR
(
nsSVGRenderingObserverList
)
;
}
void
Add
(
nsSVGRenderingObserver
*
aObserver
)
{
mObservers
.
PutEntry
(
aObserver
)
;
}
void
Remove
(
nsSVGRenderingObserver
*
aObserver
)
{
mObservers
.
RemoveEntry
(
aObserver
)
;
}
#
ifdef
DEBUG
bool
Contains
(
nsSVGRenderingObserver
*
aObserver
)
{
return
(
mObservers
.
GetEntry
(
aObserver
)
!
=
nullptr
)
;
}
#
endif
bool
IsEmpty
(
)
{
return
mObservers
.
Count
(
)
=
=
0
;
}
void
InvalidateAll
(
)
;
void
InvalidateAllForReflow
(
)
;
void
RemoveAll
(
)
;
private
:
nsTHashtable
<
nsPtrHashKey
<
nsSVGRenderingObserver
>
>
mObservers
;
}
;
class
nsSVGEffects
{
public
:
typedef
mozilla
:
:
dom
:
:
Element
Element
;
typedef
nsInterfaceHashtable
<
nsURIHashKey
nsIMutationObserver
>
URIObserverHashtable
;
using
PaintingPropertyDescriptor
=
const
mozilla
:
:
FramePropertyDescriptor
<
nsSVGPaintingProperty
>
*
;
using
URIObserverHashtablePropertyDescriptor
=
const
mozilla
:
:
FramePropertyDescriptor
<
URIObserverHashtable
>
*
;
static
void
DestroyFilterProperty
(
nsSVGFilterProperty
*
aProp
)
{
aProp
-
>
DetachFromFrame
(
)
;
aProp
-
>
Release
(
)
;
}
NS_DECLARE_FRAME_PROPERTY_WITH_DTOR
(
FilterProperty
nsSVGFilterProperty
DestroyFilterProperty
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
MaskProperty
nsSVGMaskProperty
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
ClipPathProperty
nsSVGPaintingProperty
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
MarkerBeginProperty
nsSVGMarkerProperty
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
MarkerMiddleProperty
nsSVGMarkerProperty
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
MarkerEndProperty
nsSVGMarkerProperty
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
FillProperty
nsSVGPaintingProperty
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
StrokeProperty
nsSVGPaintingProperty
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
HrefAsTextPathProperty
nsSVGTextPathProperty
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
HrefAsPaintingProperty
nsSVGPaintingProperty
)
NS_DECLARE_FRAME_PROPERTY_DELETABLE
(
BackgroundImageProperty
URIObserverHashtable
)
static
nsSVGPaintServerFrame
*
GetPaintServer
(
nsIFrame
*
aTargetFrame
nsStyleSVGPaint
nsStyleSVG
:
:
*
aPaint
PaintingPropertyDescriptor
aProperty
)
;
struct
EffectProperties
{
nsSVGFilterProperty
*
mFilter
;
nsSVGMaskProperty
*
mMask
;
nsSVGPaintingProperty
*
mClipPath
;
nsSVGClipPathFrame
*
GetClipPathFrame
(
bool
*
aOK
)
;
nsSVGMaskFrame
*
GetFirstMaskFrame
(
bool
*
aOK
=
nullptr
)
;
nsTArray
<
nsSVGMaskFrame
*
>
GetMaskFrames
(
)
;
bool
HasValidFilter
(
)
{
return
mFilter
&
&
mFilter
-
>
ReferencesValidResources
(
)
;
}
bool
HasNoFilterOrHasValidFilter
(
)
{
return
!
mFilter
|
|
mFilter
-
>
ReferencesValidResources
(
)
;
}
}
;
static
EffectProperties
GetEffectProperties
(
nsIFrame
*
aFrame
)
;
static
void
UpdateEffects
(
nsIFrame
*
aFrame
)
;
static
nsSVGFilterProperty
*
GetFilterProperty
(
nsIFrame
*
aFrame
)
;
static
void
AddRenderingObserver
(
Element
*
aElement
nsSVGRenderingObserver
*
aObserver
)
;
static
void
RemoveRenderingObserver
(
Element
*
aElement
nsSVGRenderingObserver
*
aObserver
)
;
static
void
RemoveAllRenderingObservers
(
Element
*
aElement
)
;
static
void
InvalidateRenderingObservers
(
nsIFrame
*
aFrame
)
;
enum
{
INVALIDATE_REFLOW
=
1
}
;
static
void
InvalidateDirectRenderingObservers
(
Element
*
aElement
uint32_t
aFlags
=
0
)
;
static
void
InvalidateDirectRenderingObservers
(
nsIFrame
*
aFrame
uint32_t
aFlags
=
0
)
;
static
nsSVGMarkerProperty
*
GetMarkerProperty
(
nsIURI
*
aURI
nsIFrame
*
aFrame
const
mozilla
:
:
FramePropertyDescriptor
<
nsSVGMarkerProperty
>
*
aProperty
)
;
static
nsSVGTextPathProperty
*
GetTextPathProperty
(
nsIURI
*
aURI
nsIFrame
*
aFrame
const
mozilla
:
:
FramePropertyDescriptor
<
nsSVGTextPathProperty
>
*
aProperty
)
;
static
nsSVGPaintingProperty
*
GetPaintingProperty
(
nsIURI
*
aURI
nsIFrame
*
aFrame
const
mozilla
:
:
FramePropertyDescriptor
<
nsSVGPaintingProperty
>
*
aProperty
)
;
static
nsSVGPaintingProperty
*
GetPaintingPropertyForURI
(
nsIURI
*
aURI
nsIFrame
*
aFrame
URIObserverHashtablePropertyDescriptor
aProp
)
;
static
already_AddRefed
<
nsIURI
>
GetMarkerURI
(
nsIFrame
*
aFrame
FragmentOrURL
nsStyleSVG
:
:
*
aMarker
)
;
static
already_AddRefed
<
nsIURI
>
GetClipPathURI
(
nsIFrame
*
aFrame
)
;
static
already_AddRefed
<
nsIURI
>
GetFilterURI
(
nsIFrame
*
aFrame
uint32_t
aIndex
)
;
static
already_AddRefed
<
nsIURI
>
GetFilterURI
(
nsIFrame
*
aFrame
const
nsStyleFilter
&
aFilter
)
;
static
already_AddRefed
<
nsIURI
>
GetPaintURI
(
nsIFrame
*
aFrame
nsStyleSVGPaint
nsStyleSVG
:
:
*
aPaint
)
;
static
already_AddRefed
<
nsIURI
>
GetMaskURI
(
nsIFrame
*
aFrame
uint32_t
aIndex
)
;
}
;
#
endif
