#
include
"
nsFilterInstance
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
DrawResult
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
include
"
gfxContext
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
gfxUtils
.
h
"
#
include
"
mozilla
/
gfx
/
Helpers
.
h
"
#
include
"
mozilla
/
gfx
/
PatternHelpers
.
h
"
#
include
"
nsSVGDisplayableFrame
.
h
"
#
include
"
nsCSSFilterInstance
.
h
"
#
include
"
nsSVGFilterInstance
.
h
"
#
include
"
nsSVGFilterPaintCallback
.
h
"
#
include
"
nsSVGUtils
.
h
"
#
include
"
SVGContentUtils
.
h
"
#
include
"
FilterSupport
.
h
"
#
include
"
gfx2DGlue
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
image
;
FilterDescription
nsFilterInstance
:
:
GetFilterDescription
(
nsIContent
*
aFilteredElement
const
nsTArray
<
nsStyleFilter
>
&
aFilterChain
bool
aFilterInputIsTainted
const
UserSpaceMetrics
&
aMetrics
const
gfxRect
&
aBBox
nsTArray
<
RefPtr
<
SourceSurface
>
>
&
aOutAdditionalImages
)
{
gfxMatrix
identity
;
nsFilterInstance
instance
(
nullptr
aFilteredElement
aMetrics
aFilterChain
aFilterInputIsTainted
nullptr
identity
nullptr
nullptr
nullptr
&
aBBox
)
;
if
(
!
instance
.
IsInitialized
(
)
)
{
return
FilterDescription
(
)
;
}
return
instance
.
ExtractDescriptionAndAdditionalImages
(
aOutAdditionalImages
)
;
}
static
UniquePtr
<
UserSpaceMetrics
>
UserSpaceMetricsForFrame
(
nsIFrame
*
aFrame
)
{
if
(
aFrame
-
>
GetContent
(
)
-
>
IsSVGElement
(
)
)
{
nsSVGElement
*
element
=
static_cast
<
nsSVGElement
*
>
(
aFrame
-
>
GetContent
(
)
)
;
return
MakeUnique
<
SVGElementMetrics
>
(
element
)
;
}
return
MakeUnique
<
NonSVGFrameUserSpaceMetrics
>
(
aFrame
)
;
}
void
nsFilterInstance
:
:
PaintFilteredFrame
(
nsIFrame
*
aFilteredFrame
DrawTarget
*
aDrawTarget
const
gfxMatrix
&
aTransform
nsSVGFilterPaintCallback
*
aPaintCallback
const
nsRegion
*
aDirtyArea
imgDrawingParams
&
aImgParams
)
{
auto
&
filterChain
=
aFilteredFrame
-
>
StyleEffects
(
)
-
>
mFilters
;
UniquePtr
<
UserSpaceMetrics
>
metrics
=
UserSpaceMetricsForFrame
(
aFilteredFrame
)
;
nsFilterInstance
instance
(
aFilteredFrame
aFilteredFrame
-
>
GetContent
(
)
*
metrics
filterChain
true
aPaintCallback
aTransform
aDirtyArea
nullptr
nullptr
nullptr
)
;
if
(
instance
.
IsInitialized
(
)
)
{
instance
.
Render
(
aDrawTarget
aImgParams
)
;
}
}
nsRegion
nsFilterInstance
:
:
GetPostFilterDirtyArea
(
nsIFrame
*
aFilteredFrame
const
nsRegion
&
aPreFilterDirtyRegion
)
{
if
(
aPreFilterDirtyRegion
.
IsEmpty
(
)
)
{
return
nsRegion
(
)
;
}
gfxMatrix
tm
=
nsSVGUtils
:
:
GetCanvasTM
(
aFilteredFrame
)
;
auto
&
filterChain
=
aFilteredFrame
-
>
StyleEffects
(
)
-
>
mFilters
;
UniquePtr
<
UserSpaceMetrics
>
metrics
=
UserSpaceMetricsForFrame
(
aFilteredFrame
)
;
nsFilterInstance
instance
(
aFilteredFrame
aFilteredFrame
-
>
GetContent
(
)
*
metrics
filterChain
true
nullptr
tm
nullptr
&
aPreFilterDirtyRegion
)
;
if
(
!
instance
.
IsInitialized
(
)
)
{
return
nsRegion
(
)
;
}
return
instance
.
ComputePostFilterDirtyRegion
(
)
;
}
nsRegion
nsFilterInstance
:
:
GetPreFilterNeededArea
(
nsIFrame
*
aFilteredFrame
const
nsRegion
&
aPostFilterDirtyRegion
)
{
gfxMatrix
tm
=
nsSVGUtils
:
:
GetCanvasTM
(
aFilteredFrame
)
;
auto
&
filterChain
=
aFilteredFrame
-
>
StyleEffects
(
)
-
>
mFilters
;
UniquePtr
<
UserSpaceMetrics
>
metrics
=
UserSpaceMetricsForFrame
(
aFilteredFrame
)
;
nsFilterInstance
instance
(
aFilteredFrame
aFilteredFrame
-
>
GetContent
(
)
*
metrics
filterChain
true
nullptr
tm
&
aPostFilterDirtyRegion
)
;
if
(
!
instance
.
IsInitialized
(
)
)
{
return
nsRect
(
)
;
}
return
instance
.
ComputeSourceNeededRect
(
)
;
}
nsRect
nsFilterInstance
:
:
GetPostFilterBounds
(
nsIFrame
*
aFilteredFrame
const
gfxRect
*
aOverrideBBox
const
nsRect
*
aPreFilterBounds
)
{
MOZ_ASSERT
(
!
(
aFilteredFrame
-
>
GetStateBits
(
)
&
NS_FRAME_SVG_LAYOUT
)
|
|
!
(
aFilteredFrame
-
>
GetStateBits
(
)
&
NS_FRAME_IS_NONDISPLAY
)
"
Non
-
display
SVG
do
not
maintain
visual
overflow
rects
"
)
;
nsRegion
preFilterRegion
;
nsRegion
*
preFilterRegionPtr
=
nullptr
;
if
(
aPreFilterBounds
)
{
preFilterRegion
=
*
aPreFilterBounds
;
preFilterRegionPtr
=
&
preFilterRegion
;
}
gfxMatrix
tm
=
nsSVGUtils
:
:
GetCanvasTM
(
aFilteredFrame
)
;
auto
&
filterChain
=
aFilteredFrame
-
>
StyleEffects
(
)
-
>
mFilters
;
UniquePtr
<
UserSpaceMetrics
>
metrics
=
UserSpaceMetricsForFrame
(
aFilteredFrame
)
;
nsFilterInstance
instance
(
aFilteredFrame
aFilteredFrame
-
>
GetContent
(
)
*
metrics
filterChain
true
nullptr
tm
nullptr
preFilterRegionPtr
aPreFilterBounds
aOverrideBBox
)
;
if
(
!
instance
.
IsInitialized
(
)
)
{
return
nsRect
(
)
;
}
return
instance
.
ComputePostFilterExtents
(
)
;
}
nsFilterInstance
:
:
nsFilterInstance
(
nsIFrame
*
aTargetFrame
nsIContent
*
aTargetContent
const
UserSpaceMetrics
&
aMetrics
const
nsTArray
<
nsStyleFilter
>
&
aFilterChain
bool
aFilterInputIsTainted
nsSVGFilterPaintCallback
*
aPaintCallback
const
gfxMatrix
&
aPaintTransform
const
nsRegion
*
aPostFilterDirtyRegion
const
nsRegion
*
aPreFilterDirtyRegion
const
nsRect
*
aPreFilterVisualOverflowRectOverride
const
gfxRect
*
aOverrideBBox
)
:
mTargetFrame
(
aTargetFrame
)
mTargetContent
(
aTargetContent
)
mMetrics
(
aMetrics
)
mPaintCallback
(
aPaintCallback
)
mPaintTransform
(
aPaintTransform
)
mInitialized
(
false
)
{
if
(
aOverrideBBox
)
{
mTargetBBox
=
*
aOverrideBBox
;
}
else
{
MOZ_ASSERT
(
mTargetFrame
"
Need
to
supply
a
frame
when
there
'
s
no
aOverrideBBox
"
)
;
mTargetBBox
=
nsSVGUtils
:
:
GetBBox
(
mTargetFrame
nsSVGUtils
:
:
eUseFrameBoundsForOuterSVG
|
nsSVGUtils
:
:
eBBoxIncludeFillGeometry
)
;
}
if
(
!
ComputeUserSpaceToFilterSpaceScale
(
)
)
{
return
;
}
if
(
!
ComputeTargetBBoxInFilterSpace
(
)
)
{
return
;
}
gfxMatrix
filterToUserSpace
(
mFilterSpaceToUserSpaceScale
.
width
0
.
0f
0
.
0f
mFilterSpaceToUserSpaceScale
.
height
0
.
0f
0
.
0f
)
;
mFilterSpaceToFrameSpaceInCSSPxTransform
=
filterToUserSpace
*
GetUserSpaceToFrameSpaceInCSSPxTransform
(
)
;
mFrameSpaceInCSSPxToFilterSpaceTransform
=
mFilterSpaceToFrameSpaceInCSSPxTransform
;
mFrameSpaceInCSSPxToFilterSpaceTransform
.
Invert
(
)
;
nsIntRect
targetBounds
;
if
(
aPreFilterVisualOverflowRectOverride
)
{
targetBounds
=
FrameSpaceToFilterSpace
(
aPreFilterVisualOverflowRectOverride
)
;
}
else
if
(
mTargetFrame
)
{
nsRect
preFilterVOR
=
mTargetFrame
-
>
GetPreEffectsVisualOverflowRect
(
)
;
targetBounds
=
FrameSpaceToFilterSpace
(
&
preFilterVOR
)
;
}
mTargetBounds
.
UnionRect
(
mTargetBBoxInFilterSpace
targetBounds
)
;
if
(
NS_FAILED
(
BuildPrimitives
(
aFilterChain
aTargetFrame
aFilterInputIsTainted
)
)
)
{
return
;
}
mPostFilterDirtyRegion
=
FrameSpaceToFilterSpace
(
aPostFilterDirtyRegion
)
;
mPreFilterDirtyRegion
=
FrameSpaceToFilterSpace
(
aPreFilterDirtyRegion
)
;
mInitialized
=
true
;
}
bool
nsFilterInstance
:
:
ComputeTargetBBoxInFilterSpace
(
)
{
gfxRect
targetBBoxInFilterSpace
=
UserSpaceToFilterSpace
(
mTargetBBox
)
;
targetBBoxInFilterSpace
.
RoundOut
(
)
;
return
gfxUtils
:
:
GfxRectToIntRect
(
targetBBoxInFilterSpace
&
mTargetBBoxInFilterSpace
)
;
}
bool
nsFilterInstance
:
:
ComputeUserSpaceToFilterSpaceScale
(
)
{
if
(
mTargetFrame
)
{
mUserSpaceToFilterSpaceScale
=
mPaintTransform
.
ScaleFactors
(
true
)
;
if
(
mUserSpaceToFilterSpaceScale
.
width
<
=
0
.
0f
|
|
mUserSpaceToFilterSpaceScale
.
height
<
=
0
.
0f
)
{
return
false
;
}
}
else
{
mUserSpaceToFilterSpaceScale
=
gfxSize
(
1
.
0
1
.
0
)
;
}
mFilterSpaceToUserSpaceScale
=
gfxSize
(
1
.
0f
/
mUserSpaceToFilterSpaceScale
.
width
1
.
0f
/
mUserSpaceToFilterSpaceScale
.
height
)
;
return
true
;
}
gfxRect
nsFilterInstance
:
:
UserSpaceToFilterSpace
(
const
gfxRect
&
aUserSpaceRect
)
const
{
gfxRect
filterSpaceRect
=
aUserSpaceRect
;
filterSpaceRect
.
Scale
(
mUserSpaceToFilterSpaceScale
.
width
mUserSpaceToFilterSpaceScale
.
height
)
;
return
filterSpaceRect
;
}
gfxRect
nsFilterInstance
:
:
FilterSpaceToUserSpace
(
const
gfxRect
&
aFilterSpaceRect
)
const
{
gfxRect
userSpaceRect
=
aFilterSpaceRect
;
userSpaceRect
.
Scale
(
mFilterSpaceToUserSpaceScale
.
width
mFilterSpaceToUserSpaceScale
.
height
)
;
return
userSpaceRect
;
}
nsresult
nsFilterInstance
:
:
BuildPrimitives
(
const
nsTArray
<
nsStyleFilter
>
&
aFilterChain
nsIFrame
*
aTargetFrame
bool
aFilterInputIsTainted
)
{
NS_ASSERTION
(
!
mPrimitiveDescriptions
.
Length
(
)
"
expected
to
start
building
primitives
from
scratch
"
)
;
for
(
uint32_t
i
=
0
;
i
<
aFilterChain
.
Length
(
)
;
i
+
+
)
{
bool
inputIsTainted
=
mPrimitiveDescriptions
.
IsEmpty
(
)
?
aFilterInputIsTainted
:
mPrimitiveDescriptions
.
LastElement
(
)
.
IsTainted
(
)
;
nsresult
rv
=
BuildPrimitivesForFilter
(
aFilterChain
[
i
]
aTargetFrame
inputIsTainted
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
}
mFilterDescription
=
FilterDescription
(
mPrimitiveDescriptions
)
;
return
NS_OK
;
}
nsresult
nsFilterInstance
:
:
BuildPrimitivesForFilter
(
const
nsStyleFilter
&
aFilter
nsIFrame
*
aTargetFrame
bool
aInputIsTainted
)
{
NS_ASSERTION
(
mUserSpaceToFilterSpaceScale
.
width
>
0
.
0f
&
&
mFilterSpaceToUserSpaceScale
.
height
>
0
.
0f
"
scale
factors
between
spaces
should
be
positive
values
"
)
;
if
(
aFilter
.
GetType
(
)
=
=
NS_STYLE_FILTER_URL
)
{
nsSVGFilterInstance
svgFilterInstance
(
aFilter
aTargetFrame
mTargetContent
mMetrics
mTargetBBox
mUserSpaceToFilterSpaceScale
)
;
if
(
!
svgFilterInstance
.
IsInitialized
(
)
)
{
return
NS_ERROR_FAILURE
;
}
return
svgFilterInstance
.
BuildPrimitives
(
mPrimitiveDescriptions
mInputImages
aInputIsTainted
)
;
}
nscolor
shadowFallbackColor
=
mTargetFrame
?
mTargetFrame
-
>
StyleColor
(
)
-
>
mColor
:
NS_RGB
(
0
0
0
)
;
nsCSSFilterInstance
cssFilterInstance
(
aFilter
shadowFallbackColor
mTargetBounds
mFrameSpaceInCSSPxToFilterSpaceTransform
)
;
return
cssFilterInstance
.
BuildPrimitives
(
mPrimitiveDescriptions
aInputIsTainted
)
;
}
static
void
UpdateNeededBounds
(
const
nsIntRegion
&
aRegion
nsIntRect
&
aBounds
)
{
aBounds
=
aRegion
.
GetBounds
(
)
;
bool
overflow
;
IntSize
surfaceSize
=
nsSVGUtils
:
:
ConvertToSurfaceSize
(
SizeDouble
(
aBounds
.
Size
(
)
)
&
overflow
)
;
if
(
overflow
)
{
aBounds
.
SizeTo
(
surfaceSize
)
;
}
}
void
nsFilterInstance
:
:
ComputeNeededBoxes
(
)
{
if
(
mPrimitiveDescriptions
.
IsEmpty
(
)
)
return
;
nsIntRegion
sourceGraphicNeededRegion
;
nsIntRegion
fillPaintNeededRegion
;
nsIntRegion
strokePaintNeededRegion
;
FilterSupport
:
:
ComputeSourceNeededRegions
(
mFilterDescription
mPostFilterDirtyRegion
sourceGraphicNeededRegion
fillPaintNeededRegion
strokePaintNeededRegion
)
;
sourceGraphicNeededRegion
.
And
(
sourceGraphicNeededRegion
mTargetBounds
)
;
UpdateNeededBounds
(
sourceGraphicNeededRegion
mSourceGraphic
.
mNeededBounds
)
;
UpdateNeededBounds
(
fillPaintNeededRegion
mFillPaint
.
mNeededBounds
)
;
UpdateNeededBounds
(
strokePaintNeededRegion
mStrokePaint
.
mNeededBounds
)
;
}
void
nsFilterInstance
:
:
BuildSourcePaint
(
SourceInfo
*
aSource
imgDrawingParams
&
aImgParams
)
{
MOZ_ASSERT
(
mTargetFrame
)
;
nsIntRect
neededRect
=
aSource
-
>
mNeededBounds
;
if
(
neededRect
.
IsEmpty
(
)
)
{
return
;
}
RefPtr
<
DrawTarget
>
offscreenDT
=
gfxPlatform
:
:
GetPlatform
(
)
-
>
CreateOffscreenContentDrawTarget
(
neededRect
.
Size
(
)
SurfaceFormat
:
:
B8G8R8A8
)
;
if
(
!
offscreenDT
|
|
!
offscreenDT
-
>
IsValid
(
)
)
{
return
;
}
RefPtr
<
gfxContext
>
ctx
=
gfxContext
:
:
CreateOrNull
(
offscreenDT
)
;
MOZ_ASSERT
(
ctx
)
;
gfxContextAutoSaveRestore
saver
(
ctx
)
;
ctx
-
>
SetMatrix
(
mPaintTransform
*
gfxMatrix
:
:
Translation
(
-
neededRect
.
TopLeft
(
)
)
)
;
GeneralPattern
pattern
;
if
(
aSource
=
=
&
mFillPaint
)
{
nsSVGUtils
:
:
MakeFillPatternFor
(
mTargetFrame
ctx
&
pattern
aImgParams
)
;
}
else
if
(
aSource
=
=
&
mStrokePaint
)
{
nsSVGUtils
:
:
MakeStrokePatternFor
(
mTargetFrame
ctx
&
pattern
aImgParams
)
;
}
if
(
pattern
.
GetPattern
(
)
)
{
offscreenDT
-
>
FillRect
(
ToRect
(
FilterSpaceToUserSpace
(
ThebesRect
(
neededRect
)
)
)
pattern
)
;
}
aSource
-
>
mSourceSurface
=
offscreenDT
-
>
Snapshot
(
)
;
aSource
-
>
mSurfaceRect
=
neededRect
;
}
void
nsFilterInstance
:
:
BuildSourcePaints
(
imgDrawingParams
&
aImgParams
)
{
if
(
!
mFillPaint
.
mNeededBounds
.
IsEmpty
(
)
)
{
BuildSourcePaint
(
&
mFillPaint
aImgParams
)
;
}
if
(
!
mStrokePaint
.
mNeededBounds
.
IsEmpty
(
)
)
{
BuildSourcePaint
(
&
mStrokePaint
aImgParams
)
;
}
}
void
nsFilterInstance
:
:
BuildSourceImage
(
imgDrawingParams
&
aImgParams
)
{
MOZ_ASSERT
(
mTargetFrame
)
;
nsIntRect
neededRect
=
mSourceGraphic
.
mNeededBounds
;
if
(
neededRect
.
IsEmpty
(
)
)
{
return
;
}
RefPtr
<
DrawTarget
>
offscreenDT
=
gfxPlatform
:
:
GetPlatform
(
)
-
>
CreateOffscreenContentDrawTarget
(
neededRect
.
Size
(
)
SurfaceFormat
:
:
B8G8R8A8
)
;
if
(
!
offscreenDT
|
|
!
offscreenDT
-
>
IsValid
(
)
)
{
return
;
}
gfxRect
r
=
FilterSpaceToUserSpace
(
ThebesRect
(
neededRect
)
)
;
r
.
RoundOut
(
)
;
nsIntRect
dirty
;
if
(
!
gfxUtils
:
:
GfxRectToIntRect
(
r
&
dirty
)
)
{
return
;
}
RefPtr
<
gfxContext
>
ctx
=
gfxContext
:
:
CreateOrNull
(
offscreenDT
)
;
MOZ_ASSERT
(
ctx
)
;
gfxMatrix
devPxToCssPxTM
=
nsSVGUtils
:
:
GetCSSPxToDevPxMatrix
(
mTargetFrame
)
;
DebugOnly
<
bool
>
invertible
=
devPxToCssPxTM
.
Invert
(
)
;
MOZ_ASSERT
(
invertible
)
;
ctx
-
>
SetMatrix
(
devPxToCssPxTM
*
mPaintTransform
*
gfxMatrix
:
:
Translation
(
-
neededRect
.
TopLeft
(
)
)
)
;
mPaintCallback
-
>
Paint
(
*
ctx
mTargetFrame
mPaintTransform
&
dirty
aImgParams
)
;
mSourceGraphic
.
mSourceSurface
=
offscreenDT
-
>
Snapshot
(
)
;
mSourceGraphic
.
mSurfaceRect
=
neededRect
;
}
void
nsFilterInstance
:
:
Render
(
DrawTarget
*
aDrawTarget
imgDrawingParams
&
aImgParams
)
{
MOZ_ASSERT
(
mTargetFrame
"
Need
a
frame
for
rendering
"
)
;
if
(
mPrimitiveDescriptions
.
IsEmpty
(
)
)
{
return
;
}
nsIntRect
filterRect
=
mPostFilterDirtyRegion
.
GetBounds
(
)
.
Intersect
(
OutputFilterSpaceBounds
(
)
)
;
if
(
filterRect
.
IsEmpty
(
)
|
|
mPaintTransform
.
IsSingular
(
)
)
{
return
;
}
AutoRestoreTransform
autoRestoreTransform
(
aDrawTarget
)
;
Matrix
newTM
=
aDrawTarget
-
>
GetTransform
(
)
.
PreTranslate
(
filterRect
.
x
filterRect
.
y
)
;
aDrawTarget
-
>
SetTransform
(
newTM
)
;
ComputeNeededBoxes
(
)
;
BuildSourceImage
(
aImgParams
)
;
BuildSourcePaints
(
aImgParams
)
;
FilterSupport
:
:
RenderFilterDescription
(
aDrawTarget
mFilterDescription
IntRectToRect
(
filterRect
)
mSourceGraphic
.
mSourceSurface
mSourceGraphic
.
mSurfaceRect
mFillPaint
.
mSourceSurface
mFillPaint
.
mSurfaceRect
mStrokePaint
.
mSourceSurface
mStrokePaint
.
mSurfaceRect
mInputImages
Point
(
0
0
)
)
;
}
nsRegion
nsFilterInstance
:
:
ComputePostFilterDirtyRegion
(
)
{
if
(
mPreFilterDirtyRegion
.
IsEmpty
(
)
|
|
mPrimitiveDescriptions
.
IsEmpty
(
)
)
{
return
nsRegion
(
)
;
}
nsIntRegion
resultChangeRegion
=
FilterSupport
:
:
ComputeResultChangeRegion
(
mFilterDescription
mPreFilterDirtyRegion
nsIntRegion
(
)
nsIntRegion
(
)
)
;
return
FilterSpaceToFrameSpace
(
resultChangeRegion
)
;
}
nsRect
nsFilterInstance
:
:
ComputePostFilterExtents
(
)
{
if
(
mPrimitiveDescriptions
.
IsEmpty
(
)
)
{
return
nsRect
(
)
;
}
nsIntRegion
postFilterExtents
=
FilterSupport
:
:
ComputePostFilterExtents
(
mFilterDescription
mTargetBounds
)
;
return
FilterSpaceToFrameSpace
(
postFilterExtents
.
GetBounds
(
)
)
;
}
nsRect
nsFilterInstance
:
:
ComputeSourceNeededRect
(
)
{
ComputeNeededBoxes
(
)
;
return
FilterSpaceToFrameSpace
(
mSourceGraphic
.
mNeededBounds
)
;
}
nsIntRect
nsFilterInstance
:
:
OutputFilterSpaceBounds
(
)
const
{
uint32_t
numPrimitives
=
mPrimitiveDescriptions
.
Length
(
)
;
if
(
numPrimitives
<
=
0
)
return
nsIntRect
(
)
;
return
mPrimitiveDescriptions
[
numPrimitives
-
1
]
.
PrimitiveSubregion
(
)
;
}
nsIntRect
nsFilterInstance
:
:
FrameSpaceToFilterSpace
(
const
nsRect
*
aRect
)
const
{
nsIntRect
rect
=
OutputFilterSpaceBounds
(
)
;
if
(
aRect
)
{
if
(
aRect
-
>
IsEmpty
(
)
)
{
return
nsIntRect
(
)
;
}
gfxRect
rectInCSSPx
=
nsLayoutUtils
:
:
RectToGfxRect
(
*
aRect
nsPresContext
:
:
AppUnitsPerCSSPixel
(
)
)
;
gfxRect
rectInFilterSpace
=
mFrameSpaceInCSSPxToFilterSpaceTransform
.
TransformBounds
(
rectInCSSPx
)
;
rectInFilterSpace
.
RoundOut
(
)
;
nsIntRect
intRect
;
if
(
gfxUtils
:
:
GfxRectToIntRect
(
rectInFilterSpace
&
intRect
)
)
{
rect
=
intRect
;
}
}
return
rect
;
}
nsRect
nsFilterInstance
:
:
FilterSpaceToFrameSpace
(
const
nsIntRect
&
aRect
)
const
{
if
(
aRect
.
IsEmpty
(
)
)
{
return
nsRect
(
)
;
}
gfxRect
r
(
aRect
.
x
aRect
.
y
aRect
.
width
aRect
.
height
)
;
r
=
mFilterSpaceToFrameSpaceInCSSPxTransform
.
TransformBounds
(
r
)
;
return
nsLayoutUtils
:
:
RoundGfxRectToAppRect
(
r
nsPresContext
:
:
AppUnitsPerCSSPixel
(
)
)
;
}
nsIntRegion
nsFilterInstance
:
:
FrameSpaceToFilterSpace
(
const
nsRegion
*
aRegion
)
const
{
if
(
!
aRegion
)
{
return
OutputFilterSpaceBounds
(
)
;
}
nsIntRegion
result
;
for
(
auto
iter
=
aRegion
-
>
RectIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
result
.
Or
(
result
FrameSpaceToFilterSpace
(
&
iter
.
Get
(
)
)
)
;
}
return
result
;
}
nsRegion
nsFilterInstance
:
:
FilterSpaceToFrameSpace
(
const
nsIntRegion
&
aRegion
)
const
{
nsRegion
result
;
for
(
auto
iter
=
aRegion
.
RectIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
result
.
Or
(
result
FilterSpaceToFrameSpace
(
iter
.
Get
(
)
)
)
;
}
return
result
;
}
gfxMatrix
nsFilterInstance
:
:
GetUserSpaceToFrameSpaceInCSSPxTransform
(
)
const
{
if
(
!
mTargetFrame
)
{
return
gfxMatrix
(
)
;
}
return
gfxMatrix
:
:
Translation
(
-
nsSVGUtils
:
:
FrameSpaceInCSSPxToUserSpaceOffset
(
mTargetFrame
)
)
;
}
