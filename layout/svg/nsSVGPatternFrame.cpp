#
include
"
nsSVGPatternFrame
.
h
"
#
include
"
AutoReferenceChainGuard
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
include
"
gfxContext
.
h
"
#
include
"
gfxMatrix
.
h
"
#
include
"
gfxPattern
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
SVGPatternElement
.
h
"
#
include
"
mozilla
/
dom
/
SVGUnitTypesBinding
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsSVGDisplayableFrame
.
h
"
#
include
"
SVGObserverUtils
.
h
"
#
include
"
SVGGeometryFrame
.
h
"
#
include
"
nsSVGUtils
.
h
"
#
include
"
SVGAnimatedTransformList
.
h
"
#
include
"
SVGContentUtils
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
dom
:
:
SVGUnitTypes_Binding
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
image
;
nsSVGPatternFrame
:
:
nsSVGPatternFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsSVGPaintServerFrame
(
aStyle
aPresContext
kClassID
)
mSource
(
nullptr
)
mLoopFlag
(
false
)
mNoHRefURI
(
false
)
{
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsSVGPatternFrame
)
nsresult
nsSVGPatternFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
{
if
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
(
aAttribute
=
=
nsGkAtoms
:
:
patternUnits
|
|
aAttribute
=
=
nsGkAtoms
:
:
patternContentUnits
|
|
aAttribute
=
=
nsGkAtoms
:
:
patternTransform
|
|
aAttribute
=
=
nsGkAtoms
:
:
x
|
|
aAttribute
=
=
nsGkAtoms
:
:
y
|
|
aAttribute
=
=
nsGkAtoms
:
:
width
|
|
aAttribute
=
=
nsGkAtoms
:
:
height
|
|
aAttribute
=
=
nsGkAtoms
:
:
preserveAspectRatio
|
|
aAttribute
=
=
nsGkAtoms
:
:
viewBox
)
)
{
SVGObserverUtils
:
:
InvalidateDirectRenderingObservers
(
this
)
;
}
if
(
(
aNameSpaceID
=
=
kNameSpaceID_XLink
|
|
aNameSpaceID
=
=
kNameSpaceID_None
)
&
&
aAttribute
=
=
nsGkAtoms
:
:
href
)
{
SVGObserverUtils
:
:
RemoveTemplateObserver
(
this
)
;
mNoHRefURI
=
false
;
SVGObserverUtils
:
:
InvalidateDirectRenderingObservers
(
this
)
;
}
return
nsSVGPaintServerFrame
:
:
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
}
#
ifdef
DEBUG
void
nsSVGPatternFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
NS_ASSERTION
(
aContent
-
>
IsSVGElement
(
nsGkAtoms
:
:
pattern
)
"
Content
is
not
an
SVG
pattern
"
)
;
nsSVGPaintServerFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
}
#
endif
gfxMatrix
nsSVGPatternFrame
:
:
GetCanvasTM
(
)
{
if
(
mCTM
)
{
return
*
mCTM
;
}
if
(
mSource
)
{
return
mSource
-
>
GetCanvasTM
(
)
;
}
return
gfxMatrix
(
)
;
}
static
float
MaxExpansion
(
const
Matrix
&
aMatrix
)
{
double
a
=
aMatrix
.
_11
;
double
b
=
aMatrix
.
_12
;
double
c
=
aMatrix
.
_21
;
double
d
=
aMatrix
.
_22
;
double
f
=
(
a
*
a
+
b
*
b
+
c
*
c
+
d
*
d
)
/
2
;
double
g
=
(
a
*
a
+
b
*
b
-
c
*
c
-
d
*
d
)
/
2
;
double
h
=
a
*
c
+
b
*
d
;
return
sqrt
(
f
+
sqrt
(
g
*
g
+
h
*
h
)
)
;
}
static
bool
IncludeBBoxScale
(
const
SVGAnimatedViewBox
&
aViewBox
uint32_t
aPatternContentUnits
uint32_t
aPatternUnits
)
{
return
(
!
aViewBox
.
IsExplicitlySet
(
)
&
&
aPatternContentUnits
=
=
SVG_UNIT_TYPE_OBJECTBOUNDINGBOX
)
|
|
(
aViewBox
.
IsExplicitlySet
(
)
&
&
aPatternUnits
=
=
SVG_UNIT_TYPE_OBJECTBOUNDINGBOX
)
;
}
static
Matrix
GetPatternMatrix
(
uint16_t
aPatternUnits
const
Matrix
&
patternTransform
const
gfxRect
&
bbox
const
gfxRect
&
callerBBox
const
Matrix
&
callerCTM
)
{
gfxFloat
minx
=
bbox
.
X
(
)
;
gfxFloat
miny
=
bbox
.
Y
(
)
;
if
(
aPatternUnits
=
=
SVG_UNIT_TYPE_OBJECTBOUNDINGBOX
)
{
minx
+
=
callerBBox
.
X
(
)
;
miny
+
=
callerBBox
.
Y
(
)
;
}
float
scale
=
1
.
0f
/
MaxExpansion
(
callerCTM
)
;
Matrix
patternMatrix
=
patternTransform
;
patternMatrix
.
PreScale
(
scale
scale
)
;
patternMatrix
.
PreTranslate
(
minx
miny
)
;
return
patternMatrix
;
}
static
nsresult
GetTargetGeometry
(
gfxRect
*
aBBox
const
SVGAnimatedViewBox
&
aViewBox
uint16_t
aPatternContentUnits
uint16_t
aPatternUnits
nsIFrame
*
aTarget
const
Matrix
&
aContextMatrix
const
gfxRect
*
aOverrideBounds
)
{
*
aBBox
=
aOverrideBounds
?
*
aOverrideBounds
:
nsSVGUtils
:
:
GetBBox
(
aTarget
nsSVGUtils
:
:
eUseFrameBoundsForOuterSVG
|
nsSVGUtils
:
:
eBBoxIncludeFillGeometry
)
;
if
(
IncludeBBoxScale
(
aViewBox
aPatternContentUnits
aPatternUnits
)
&
&
(
aBBox
-
>
Width
(
)
<
=
0
|
|
aBBox
-
>
Height
(
)
<
=
0
)
)
{
return
NS_ERROR_FAILURE
;
}
float
scale
=
MaxExpansion
(
aContextMatrix
)
;
if
(
scale
<
=
0
)
{
return
NS_ERROR_FAILURE
;
}
aBBox
-
>
Scale
(
scale
)
;
return
NS_OK
;
}
already_AddRefed
<
SourceSurface
>
nsSVGPatternFrame
:
:
PaintPattern
(
const
DrawTarget
*
aDrawTarget
Matrix
*
patternMatrix
const
Matrix
&
aContextMatrix
nsIFrame
*
aSource
nsStyleSVGPaint
nsStyleSVG
:
:
*
aFillOrStroke
float
aGraphicOpacity
const
gfxRect
*
aOverrideBounds
imgDrawingParams
&
aImgParams
)
{
nsSVGPatternFrame
*
patternWithChildren
=
GetPatternWithChildren
(
)
;
if
(
!
patternWithChildren
)
{
return
nullptr
;
}
nsIFrame
*
firstKid
=
patternWithChildren
-
>
mFrames
.
FirstChild
(
)
;
const
SVGAnimatedViewBox
&
viewBox
=
GetViewBox
(
)
;
uint16_t
patternContentUnits
=
GetEnumValue
(
SVGPatternElement
:
:
PATTERNCONTENTUNITS
)
;
uint16_t
patternUnits
=
GetEnumValue
(
SVGPatternElement
:
:
PATTERNUNITS
)
;
gfxRect
callerBBox
;
if
(
NS_FAILED
(
GetTargetGeometry
(
&
callerBBox
viewBox
patternContentUnits
patternUnits
aSource
aContextMatrix
aOverrideBounds
)
)
)
{
return
nullptr
;
}
gfxMatrix
ctm
=
ConstructCTM
(
viewBox
patternContentUnits
patternUnits
callerBBox
aContextMatrix
aSource
)
;
if
(
ctm
.
IsSingular
(
)
)
{
return
nullptr
;
}
if
(
patternWithChildren
-
>
mCTM
)
{
*
patternWithChildren
-
>
mCTM
=
ctm
;
}
else
{
patternWithChildren
-
>
mCTM
=
new
gfxMatrix
(
ctm
)
;
}
gfxRect
bbox
=
GetPatternRect
(
patternUnits
callerBBox
aContextMatrix
aSource
)
;
if
(
bbox
.
Width
(
)
<
=
0
.
0
|
|
bbox
.
Height
(
)
<
=
0
.
0
)
{
return
nullptr
;
}
Matrix
patternTransform
=
ToMatrix
(
GetPatternTransform
(
)
)
;
if
(
aFillOrStroke
=
=
&
nsStyleSVG
:
:
mStroke
)
{
gfxMatrix
userToOuterSVG
;
if
(
nsSVGUtils
:
:
GetNonScalingStrokeTransform
(
aSource
&
userToOuterSVG
)
)
{
patternTransform
*
=
ToMatrix
(
userToOuterSVG
)
;
if
(
patternTransform
.
IsSingular
(
)
)
{
NS_WARNING
(
"
Singular
matrix
painting
non
-
scaling
-
stroke
"
)
;
return
nullptr
;
}
}
}
*
patternMatrix
=
GetPatternMatrix
(
patternUnits
patternTransform
bbox
callerBBox
aContextMatrix
)
;
if
(
patternMatrix
-
>
IsSingular
(
)
)
{
return
nullptr
;
}
gfxRect
transformedBBox
=
ThebesRect
(
patternTransform
.
TransformBounds
(
ToRect
(
bbox
)
)
)
;
bool
resultOverflows
;
IntSize
surfaceSize
=
nsSVGUtils
:
:
ConvertToSurfaceSize
(
transformedBBox
.
Size
(
)
&
resultOverflows
)
;
if
(
surfaceSize
.
width
<
=
0
|
|
surfaceSize
.
height
<
=
0
)
{
return
nullptr
;
}
gfxFloat
patternWidth
=
bbox
.
Width
(
)
;
gfxFloat
patternHeight
=
bbox
.
Height
(
)
;
if
(
resultOverflows
|
|
patternWidth
!
=
surfaceSize
.
width
|
|
patternHeight
!
=
surfaceSize
.
height
)
{
gfxMatrix
tempTM
=
gfxMatrix
(
surfaceSize
.
width
/
patternWidth
0
.
0
0
.
0
surfaceSize
.
height
/
patternHeight
0
.
0
0
.
0
)
;
patternWithChildren
-
>
mCTM
-
>
PreMultiply
(
tempTM
)
;
patternMatrix
-
>
PreScale
(
patternWidth
/
surfaceSize
.
width
patternHeight
/
surfaceSize
.
height
)
;
}
RefPtr
<
DrawTarget
>
dt
=
aDrawTarget
-
>
CreateSimilarDrawTarget
(
surfaceSize
SurfaceFormat
:
:
B8G8R8A8
)
;
if
(
!
dt
|
|
!
dt
-
>
IsValid
(
)
)
{
return
nullptr
;
}
dt
-
>
ClearRect
(
Rect
(
0
0
surfaceSize
.
width
surfaceSize
.
height
)
)
;
RefPtr
<
gfxContext
>
ctx
=
gfxContext
:
:
CreateOrNull
(
dt
)
;
MOZ_ASSERT
(
ctx
)
;
if
(
aGraphicOpacity
!
=
1
.
0f
)
{
ctx
-
>
Save
(
)
;
ctx
-
>
PushGroupForBlendBack
(
gfxContentType
:
:
COLOR_ALPHA
aGraphicOpacity
)
;
}
if
(
aSource
-
>
IsFrameOfType
(
nsIFrame
:
:
eSVGGeometry
)
)
{
patternWithChildren
-
>
mSource
=
static_cast
<
SVGGeometryFrame
*
>
(
aSource
)
;
}
if
(
!
(
patternWithChildren
-
>
GetStateBits
(
)
&
NS_FRAME_DRAWING_AS_PAINTSERVER
)
)
{
AutoSetRestorePaintServerState
paintServer
(
patternWithChildren
)
;
for
(
nsIFrame
*
kid
=
firstKid
;
kid
;
kid
=
kid
-
>
GetNextSibling
(
)
)
{
gfxMatrix
tm
=
*
(
patternWithChildren
-
>
mCTM
)
;
nsSVGDisplayableFrame
*
SVGFrame
=
do_QueryFrame
(
kid
)
;
if
(
SVGFrame
)
{
SVGFrame
-
>
NotifySVGChanged
(
nsSVGDisplayableFrame
:
:
TRANSFORM_CHANGED
)
;
tm
=
nsSVGUtils
:
:
GetTransformMatrixInUserSpace
(
kid
patternWithChildren
)
*
tm
;
}
nsSVGUtils
:
:
PaintFrameWithEffects
(
kid
*
ctx
tm
aImgParams
)
;
}
}
patternWithChildren
-
>
mSource
=
nullptr
;
if
(
aGraphicOpacity
!
=
1
.
0f
)
{
ctx
-
>
PopGroupAndBlend
(
)
;
ctx
-
>
Restore
(
)
;
}
return
dt
-
>
Snapshot
(
)
;
}
nsSVGPatternFrame
*
nsSVGPatternFrame
:
:
GetPatternWithChildren
(
)
{
if
(
!
mFrames
.
IsEmpty
(
)
)
{
return
this
;
}
static
int16_t
sRefChainLengthCounter
=
AutoReferenceChainGuard
:
:
noChain
;
AutoReferenceChainGuard
refChainGuard
(
this
&
mLoopFlag
&
sRefChainLengthCounter
)
;
if
(
MOZ_UNLIKELY
(
!
refChainGuard
.
Reference
(
)
)
)
{
return
nullptr
;
}
nsSVGPatternFrame
*
next
=
GetReferencedPattern
(
)
;
if
(
!
next
)
{
return
nullptr
;
}
return
next
-
>
GetPatternWithChildren
(
)
;
}
uint16_t
nsSVGPatternFrame
:
:
GetEnumValue
(
uint32_t
aIndex
nsIContent
*
aDefault
)
{
SVGAnimatedEnumeration
&
thisEnum
=
static_cast
<
SVGPatternElement
*
>
(
GetContent
(
)
)
-
>
mEnumAttributes
[
aIndex
]
;
if
(
thisEnum
.
IsExplicitlySet
(
)
)
{
return
thisEnum
.
GetAnimValue
(
)
;
}
static
int16_t
sRefChainLengthCounter
=
AutoReferenceChainGuard
:
:
noChain
;
AutoReferenceChainGuard
refChainGuard
(
this
&
mLoopFlag
&
sRefChainLengthCounter
)
;
if
(
MOZ_UNLIKELY
(
!
refChainGuard
.
Reference
(
)
)
)
{
return
static_cast
<
SVGPatternElement
*
>
(
aDefault
)
-
>
mEnumAttributes
[
aIndex
]
.
GetAnimValue
(
)
;
}
nsSVGPatternFrame
*
next
=
GetReferencedPattern
(
)
;
return
next
?
next
-
>
GetEnumValue
(
aIndex
aDefault
)
:
static_cast
<
SVGPatternElement
*
>
(
aDefault
)
-
>
mEnumAttributes
[
aIndex
]
.
GetAnimValue
(
)
;
}
SVGAnimatedTransformList
*
nsSVGPatternFrame
:
:
GetPatternTransformList
(
nsIContent
*
aDefault
)
{
SVGAnimatedTransformList
*
thisTransformList
=
static_cast
<
SVGPatternElement
*
>
(
GetContent
(
)
)
-
>
GetAnimatedTransformList
(
)
;
if
(
thisTransformList
&
&
thisTransformList
-
>
IsExplicitlySet
(
)
)
return
thisTransformList
;
static
int16_t
sRefChainLengthCounter
=
AutoReferenceChainGuard
:
:
noChain
;
AutoReferenceChainGuard
refChainGuard
(
this
&
mLoopFlag
&
sRefChainLengthCounter
)
;
if
(
MOZ_UNLIKELY
(
!
refChainGuard
.
Reference
(
)
)
)
{
return
static_cast
<
SVGPatternElement
*
>
(
aDefault
)
-
>
mPatternTransform
.
get
(
)
;
}
nsSVGPatternFrame
*
next
=
GetReferencedPattern
(
)
;
return
next
?
next
-
>
GetPatternTransformList
(
aDefault
)
:
static_cast
<
SVGPatternElement
*
>
(
aDefault
)
-
>
mPatternTransform
.
get
(
)
;
}
gfxMatrix
nsSVGPatternFrame
:
:
GetPatternTransform
(
)
{
SVGAnimatedTransformList
*
animTransformList
=
GetPatternTransformList
(
GetContent
(
)
)
;
if
(
!
animTransformList
)
{
return
gfxMatrix
(
)
;
}
return
animTransformList
-
>
GetAnimValue
(
)
.
GetConsolidationMatrix
(
)
;
}
const
SVGAnimatedViewBox
&
nsSVGPatternFrame
:
:
GetViewBox
(
nsIContent
*
aDefault
)
{
const
SVGAnimatedViewBox
&
thisViewBox
=
static_cast
<
SVGPatternElement
*
>
(
GetContent
(
)
)
-
>
mViewBox
;
if
(
thisViewBox
.
IsExplicitlySet
(
)
)
{
return
thisViewBox
;
}
static
int16_t
sRefChainLengthCounter
=
AutoReferenceChainGuard
:
:
noChain
;
AutoReferenceChainGuard
refChainGuard
(
this
&
mLoopFlag
&
sRefChainLengthCounter
)
;
if
(
MOZ_UNLIKELY
(
!
refChainGuard
.
Reference
(
)
)
)
{
return
static_cast
<
SVGPatternElement
*
>
(
aDefault
)
-
>
mViewBox
;
}
nsSVGPatternFrame
*
next
=
GetReferencedPattern
(
)
;
return
next
?
next
-
>
GetViewBox
(
aDefault
)
:
static_cast
<
SVGPatternElement
*
>
(
aDefault
)
-
>
mViewBox
;
}
const
SVGAnimatedPreserveAspectRatio
&
nsSVGPatternFrame
:
:
GetPreserveAspectRatio
(
nsIContent
*
aDefault
)
{
const
SVGAnimatedPreserveAspectRatio
&
thisPar
=
static_cast
<
SVGPatternElement
*
>
(
GetContent
(
)
)
-
>
mPreserveAspectRatio
;
if
(
thisPar
.
IsExplicitlySet
(
)
)
{
return
thisPar
;
}
static
int16_t
sRefChainLengthCounter
=
AutoReferenceChainGuard
:
:
noChain
;
AutoReferenceChainGuard
refChainGuard
(
this
&
mLoopFlag
&
sRefChainLengthCounter
)
;
if
(
MOZ_UNLIKELY
(
!
refChainGuard
.
Reference
(
)
)
)
{
return
static_cast
<
SVGPatternElement
*
>
(
aDefault
)
-
>
mPreserveAspectRatio
;
}
nsSVGPatternFrame
*
next
=
GetReferencedPattern
(
)
;
return
next
?
next
-
>
GetPreserveAspectRatio
(
aDefault
)
:
static_cast
<
SVGPatternElement
*
>
(
aDefault
)
-
>
mPreserveAspectRatio
;
}
const
SVGAnimatedLength
*
nsSVGPatternFrame
:
:
GetLengthValue
(
uint32_t
aIndex
nsIContent
*
aDefault
)
{
const
SVGAnimatedLength
*
thisLength
=
&
static_cast
<
SVGPatternElement
*
>
(
GetContent
(
)
)
-
>
mLengthAttributes
[
aIndex
]
;
if
(
thisLength
-
>
IsExplicitlySet
(
)
)
{
return
thisLength
;
}
static
int16_t
sRefChainLengthCounter
=
AutoReferenceChainGuard
:
:
noChain
;
AutoReferenceChainGuard
refChainGuard
(
this
&
mLoopFlag
&
sRefChainLengthCounter
)
;
if
(
MOZ_UNLIKELY
(
!
refChainGuard
.
Reference
(
)
)
)
{
return
&
static_cast
<
SVGPatternElement
*
>
(
aDefault
)
-
>
mLengthAttributes
[
aIndex
]
;
}
nsSVGPatternFrame
*
next
=
GetReferencedPattern
(
)
;
return
next
?
next
-
>
GetLengthValue
(
aIndex
aDefault
)
:
&
static_cast
<
SVGPatternElement
*
>
(
aDefault
)
-
>
mLengthAttributes
[
aIndex
]
;
}
nsSVGPatternFrame
*
nsSVGPatternFrame
:
:
GetReferencedPattern
(
)
{
if
(
mNoHRefURI
)
{
return
nullptr
;
}
auto
GetHref
=
[
this
]
(
nsAString
&
aHref
)
{
SVGPatternElement
*
pattern
=
static_cast
<
SVGPatternElement
*
>
(
this
-
>
GetContent
(
)
)
;
if
(
pattern
-
>
mStringAttributes
[
SVGPatternElement
:
:
HREF
]
.
IsExplicitlySet
(
)
)
{
pattern
-
>
mStringAttributes
[
SVGPatternElement
:
:
HREF
]
.
GetAnimValue
(
aHref
pattern
)
;
}
else
{
pattern
-
>
mStringAttributes
[
SVGPatternElement
:
:
XLINK_HREF
]
.
GetAnimValue
(
aHref
pattern
)
;
}
this
-
>
mNoHRefURI
=
aHref
.
IsEmpty
(
)
;
}
;
nsIFrame
*
tframe
=
SVGObserverUtils
:
:
GetAndObserveTemplate
(
this
GetHref
)
;
if
(
tframe
)
{
LayoutFrameType
frameType
=
tframe
-
>
Type
(
)
;
if
(
frameType
=
=
LayoutFrameType
:
:
SVGPattern
)
{
return
static_cast
<
nsSVGPatternFrame
*
>
(
tframe
)
;
}
}
return
nullptr
;
}
gfxRect
nsSVGPatternFrame
:
:
GetPatternRect
(
uint16_t
aPatternUnits
const
gfxRect
&
aTargetBBox
const
Matrix
&
aTargetCTM
nsIFrame
*
aTarget
)
{
float
x
y
width
height
;
const
SVGAnimatedLength
*
tmpX
*
tmpY
*
tmpHeight
*
tmpWidth
;
tmpX
=
GetLengthValue
(
SVGPatternElement
:
:
ATTR_X
)
;
tmpY
=
GetLengthValue
(
SVGPatternElement
:
:
ATTR_Y
)
;
tmpHeight
=
GetLengthValue
(
SVGPatternElement
:
:
ATTR_HEIGHT
)
;
tmpWidth
=
GetLengthValue
(
SVGPatternElement
:
:
ATTR_WIDTH
)
;
if
(
aPatternUnits
=
=
SVG_UNIT_TYPE_OBJECTBOUNDINGBOX
)
{
x
=
nsSVGUtils
:
:
ObjectSpace
(
aTargetBBox
tmpX
)
;
y
=
nsSVGUtils
:
:
ObjectSpace
(
aTargetBBox
tmpY
)
;
width
=
nsSVGUtils
:
:
ObjectSpace
(
aTargetBBox
tmpWidth
)
;
height
=
nsSVGUtils
:
:
ObjectSpace
(
aTargetBBox
tmpHeight
)
;
}
else
{
float
scale
=
MaxExpansion
(
aTargetCTM
)
;
x
=
nsSVGUtils
:
:
UserSpace
(
aTarget
tmpX
)
*
scale
;
y
=
nsSVGUtils
:
:
UserSpace
(
aTarget
tmpY
)
*
scale
;
width
=
nsSVGUtils
:
:
UserSpace
(
aTarget
tmpWidth
)
*
scale
;
height
=
nsSVGUtils
:
:
UserSpace
(
aTarget
tmpHeight
)
*
scale
;
}
return
gfxRect
(
x
y
width
height
)
;
}
gfxMatrix
nsSVGPatternFrame
:
:
ConstructCTM
(
const
SVGAnimatedViewBox
&
aViewBox
uint16_t
aPatternContentUnits
uint16_t
aPatternUnits
const
gfxRect
&
callerBBox
const
Matrix
&
callerCTM
nsIFrame
*
aTarget
)
{
SVGViewportElement
*
ctx
=
nullptr
;
nsIContent
*
targetContent
=
aTarget
-
>
GetContent
(
)
;
gfxFloat
scaleX
scaleY
;
if
(
IncludeBBoxScale
(
aViewBox
aPatternContentUnits
aPatternUnits
)
)
{
scaleX
=
callerBBox
.
Width
(
)
;
scaleY
=
callerBBox
.
Height
(
)
;
}
else
{
if
(
targetContent
-
>
IsSVGElement
(
)
)
{
ctx
=
static_cast
<
SVGElement
*
>
(
targetContent
)
-
>
GetCtx
(
)
;
}
scaleX
=
scaleY
=
MaxExpansion
(
callerCTM
)
;
}
if
(
!
aViewBox
.
IsExplicitlySet
(
)
)
{
return
gfxMatrix
(
scaleX
0
.
0
0
.
0
scaleY
0
.
0
0
.
0
)
;
}
const
SVGViewBox
&
viewBox
=
aViewBox
.
GetAnimValue
(
)
;
if
(
viewBox
.
height
<
=
0
.
0f
|
|
viewBox
.
width
<
=
0
.
0f
)
{
return
gfxMatrix
(
0
.
0
0
.
0
0
.
0
0
.
0
0
.
0
0
.
0
)
;
}
float
viewportWidth
viewportHeight
;
if
(
targetContent
-
>
IsSVGElement
(
)
)
{
viewportWidth
=
GetLengthValue
(
SVGPatternElement
:
:
ATTR_WIDTH
)
-
>
GetAnimValue
(
ctx
)
;
viewportHeight
=
GetLengthValue
(
SVGPatternElement
:
:
ATTR_HEIGHT
)
-
>
GetAnimValue
(
ctx
)
;
}
else
{
viewportWidth
=
GetLengthValue
(
SVGPatternElement
:
:
ATTR_WIDTH
)
-
>
GetAnimValue
(
aTarget
)
;
viewportHeight
=
GetLengthValue
(
SVGPatternElement
:
:
ATTR_HEIGHT
)
-
>
GetAnimValue
(
aTarget
)
;
}
if
(
viewportWidth
<
=
0
.
0f
|
|
viewportHeight
<
=
0
.
0f
)
{
return
gfxMatrix
(
0
.
0
0
.
0
0
.
0
0
.
0
0
.
0
0
.
0
)
;
}
Matrix
tm
=
SVGContentUtils
:
:
GetViewBoxTransform
(
viewportWidth
*
scaleX
viewportHeight
*
scaleY
viewBox
.
x
viewBox
.
y
viewBox
.
width
viewBox
.
height
GetPreserveAspectRatio
(
)
)
;
return
ThebesMatrix
(
tm
)
;
}
already_AddRefed
<
gfxPattern
>
nsSVGPatternFrame
:
:
GetPaintServerPattern
(
nsIFrame
*
aSource
const
DrawTarget
*
aDrawTarget
const
gfxMatrix
&
aContextMatrix
nsStyleSVGPaint
nsStyleSVG
:
:
*
aFillOrStroke
float
aGraphicOpacity
imgDrawingParams
&
aImgParams
const
gfxRect
*
aOverrideBounds
)
{
if
(
aGraphicOpacity
=
=
0
.
0f
)
{
return
do_AddRef
(
new
gfxPattern
(
Color
(
)
)
)
;
}
Matrix
pMatrix
;
RefPtr
<
SourceSurface
>
surface
=
PaintPattern
(
aDrawTarget
&
pMatrix
ToMatrix
(
aContextMatrix
)
aSource
aFillOrStroke
aGraphicOpacity
aOverrideBounds
aImgParams
)
;
if
(
!
surface
)
{
return
nullptr
;
}
RefPtr
<
gfxPattern
>
pattern
=
new
gfxPattern
(
surface
pMatrix
)
;
if
(
!
pattern
)
{
return
nullptr
;
}
pattern
-
>
SetExtend
(
ExtendMode
:
:
REPEAT
)
;
return
pattern
.
forget
(
)
;
}
nsIFrame
*
NS_NewSVGPatternFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsSVGPatternFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
