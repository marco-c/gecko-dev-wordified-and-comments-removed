#
ifndef
__NS_SVGOUTERSVGFRAME_H__
#
define
__NS_SVGOUTERSVGFRAME_H__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsISVGSVGFrame
.
h
"
#
include
"
nsSVGContainerFrame
.
h
"
#
include
"
nsRegion
.
h
"
class
gfxContext
;
namespace
mozilla
{
class
SVGForeignObjectFrame
;
class
PresShell
;
}
class
nsSVGOuterSVGFrame
final
:
public
nsSVGDisplayContainerFrame
public
nsISVGSVGFrame
{
typedef
mozilla
:
:
image
:
:
imgDrawingParams
imgDrawingParams
;
friend
nsContainerFrame
*
NS_NewSVGOuterSVGFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
protected
:
explicit
nsSVGOuterSVGFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsSVGOuterSVGFrame
)
#
ifdef
DEBUG
~
nsSVGOuterSVGFrame
(
)
{
NS_ASSERTION
(
!
mForeignObjectHash
|
|
mForeignObjectHash
-
>
Count
(
)
=
=
0
"
foreignObject
(
s
)
still
registered
!
"
)
;
}
#
endif
virtual
nscoord
GetMinISize
(
gfxContext
*
aRenderingContext
)
override
;
virtual
nscoord
GetPrefISize
(
gfxContext
*
aRenderingContext
)
override
;
virtual
mozilla
:
:
IntrinsicSize
GetIntrinsicSize
(
)
override
;
virtual
mozilla
:
:
AspectRatio
GetIntrinsicRatio
(
)
override
;
virtual
mozilla
:
:
LogicalSize
ComputeSize
(
gfxContext
*
aRenderingContext
mozilla
:
:
WritingMode
aWritingMode
const
mozilla
:
:
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
mozilla
:
:
LogicalSize
&
aMargin
const
mozilla
:
:
LogicalSize
&
aBorder
const
mozilla
:
:
LogicalSize
&
aPadding
ComputeSizeFlags
aFlags
)
override
;
virtual
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
virtual
void
DidReflow
(
nsPresContext
*
aPresContext
const
ReflowInput
*
aReflowInput
)
override
;
virtual
void
UnionChildOverflow
(
nsOverflowAreas
&
aOverflowAreas
)
override
;
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsSVGDisplayContainerFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
eSupportsContainLayoutAndPaint
|
eReplaced
|
eReplacedSizing
)
)
;
}
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
SVGOuterSVG
"
)
aResult
)
;
}
#
endif
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
virtual
nsContainerFrame
*
GetContentInsertionFrame
(
)
override
{
MOZ_ASSERT
(
PrincipalChildList
(
)
.
FirstChild
(
)
&
&
PrincipalChildList
(
)
.
FirstChild
(
)
-
>
IsSVGOuterSVGAnonChildFrame
(
)
"
Where
is
our
anonymous
child
?
"
)
;
return
PrincipalChildList
(
)
.
FirstChild
(
)
-
>
GetContentInsertionFrame
(
)
;
}
bool
IsSVGTransformed
(
Matrix
*
aOwnTransform
Matrix
*
aFromParentTransform
)
const
override
;
void
AppendDirectlyOwnedAnonBoxes
(
nsTArray
<
OwnedAnonBox
>
&
aResult
)
override
;
virtual
void
NotifyViewportOrTransformChanged
(
uint32_t
aFlags
)
override
;
virtual
void
PaintSVG
(
gfxContext
&
aContext
const
gfxMatrix
&
aTransform
imgDrawingParams
&
aImgParams
const
nsIntRect
*
aDirtyRect
=
nullptr
)
override
;
virtual
SVGBBox
GetBBoxContribution
(
const
Matrix
&
aToBBoxUserspace
uint32_t
aFlags
)
override
;
virtual
gfxMatrix
GetCanvasTM
(
)
override
;
void
RegisterForeignObject
(
mozilla
:
:
SVGForeignObjectFrame
*
aFrame
)
;
void
UnregisterForeignObject
(
mozilla
:
:
SVGForeignObjectFrame
*
aFrame
)
;
virtual
bool
HasChildrenOnlyTransform
(
Matrix
*
aTransform
)
const
override
{
return
false
;
}
bool
VerticalScrollbarNotNeeded
(
)
const
;
bool
IsCallingReflowSVG
(
)
const
{
return
mCallingReflowSVG
;
}
void
InvalidateSVG
(
const
nsRegion
&
aRegion
)
{
if
(
!
aRegion
.
IsEmpty
(
)
)
{
mInvalidRegion
.
Or
(
mInvalidRegion
aRegion
)
;
InvalidateFrame
(
)
;
}
}
void
ClearInvalidRegion
(
)
{
mInvalidRegion
.
SetEmpty
(
)
;
}
const
nsRegion
&
GetInvalidRegion
(
)
{
nsRect
rect
;
if
(
!
IsInvalid
(
rect
)
)
{
mInvalidRegion
.
SetEmpty
(
)
;
}
return
mInvalidRegion
;
}
nsRegion
FindInvalidatedForeignObjectFrameChildren
(
nsIFrame
*
aFrame
)
;
protected
:
bool
mCallingReflowSVG
;
bool
IsRootOfReplacedElementSubDoc
(
nsIFrame
*
*
aEmbeddingFrame
=
nullptr
)
;
bool
IsRootOfImage
(
)
;
mozilla
:
:
UniquePtr
<
nsTHashtable
<
nsPtrHashKey
<
mozilla
:
:
SVGForeignObjectFrame
>
>
>
mForeignObjectHash
;
nsRegion
mInvalidRegion
;
float
mFullZoom
;
bool
mViewportInitialized
;
bool
mIsRootContent
;
private
:
template
<
typename
.
.
.
Args
>
bool
IsContainingWindowElementOfType
(
nsIFrame
*
*
aContainingWindowFrame
Args
.
.
.
aArgs
)
const
;
}
;
class
nsSVGOuterSVGAnonChildFrame
final
:
public
nsSVGDisplayContainerFrame
{
friend
nsContainerFrame
*
NS_NewSVGOuterSVGAnonChildFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
explicit
nsSVGOuterSVGAnonChildFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsSVGDisplayContainerFrame
(
aStyle
aPresContext
kClassID
)
{
}
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsSVGOuterSVGAnonChildFrame
)
#
ifdef
DEBUG
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
#
endif
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
SVGOuterSVGAnonChild
"
)
aResult
)
;
}
#
endif
bool
IsSVGTransformed
(
Matrix
*
aOwnTransform
Matrix
*
aFromParentTransform
)
const
override
;
virtual
gfxMatrix
GetCanvasTM
(
)
override
{
return
static_cast
<
nsSVGOuterSVGFrame
*
>
(
GetParent
(
)
)
-
>
GetCanvasTM
(
)
;
}
}
;
template
<
typename
.
.
.
Atoms
>
bool
IsAnyAtomEqual
(
const
nsAString
&
aString
nsAtom
*
aFirst
Atoms
.
.
.
aArgs
)
;
bool
IsAnyAtomEqual
(
const
nsAString
&
aString
)
;
#
endif
