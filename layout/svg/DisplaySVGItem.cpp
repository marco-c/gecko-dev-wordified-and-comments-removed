#
include
"
DisplaySVGItem
.
h
"
#
include
"
mozilla
/
ISVGDisplayableFrame
.
h
"
#
include
"
nsPoint
.
h
"
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
image
;
namespace
mozilla
{
void
DisplaySVGItem
:
:
HitTest
(
nsDisplayListBuilder
*
aBuilder
const
nsRect
&
aRect
HitTestState
*
aState
nsTArray
<
nsIFrame
*
>
*
aOutFrames
)
{
ISVGDisplayableFrame
*
svgFrame
=
do_QueryFrame
(
mFrame
)
;
MOZ_ASSERT
(
svgFrame
"
Unexpected
frame
type
"
)
;
nsPoint
pointRelativeToReferenceFrame
=
aRect
.
Center
(
)
;
nsPoint
userSpacePtInAppUnits
=
pointRelativeToReferenceFrame
-
(
ToReferenceFrame
(
)
-
mFrame
-
>
GetPosition
(
)
)
;
gfxPoint
userSpacePt
=
gfxPoint
(
userSpacePtInAppUnits
.
x
userSpacePtInAppUnits
.
y
)
/
AppUnitsPerCSSPixel
(
)
;
if
(
auto
*
target
=
svgFrame
-
>
GetFrameForPoint
(
userSpacePt
)
)
{
aOutFrames
-
>
AppendElement
(
target
)
;
}
}
void
DisplaySVGItem
:
:
Paint
(
nsDisplayListBuilder
*
aBuilder
gfxContext
*
aCtx
)
{
ISVGDisplayableFrame
*
svgFrame
=
do_QueryFrame
(
mFrame
)
;
MOZ_ASSERT
(
svgFrame
"
Unexpected
frame
type
"
)
;
int32_t
appUnitsPerDevPixel
=
mFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
nsPoint
offset
=
ToReferenceFrame
(
)
-
mFrame
-
>
GetPosition
(
)
;
gfxPoint
devPixelOffset
=
nsLayoutUtils
:
:
PointToGfxPoint
(
offset
appUnitsPerDevPixel
)
;
gfxMatrix
tm
=
SVGUtils
:
:
GetCSSPxToDevPxMatrix
(
mFrame
)
*
gfxMatrix
:
:
Translation
(
devPixelOffset
)
;
imgDrawingParams
imgParams
(
aBuilder
-
>
GetImageDecodeFlags
(
)
)
;
svgFrame
-
>
PaintSVG
(
*
aCtx
tm
imgParams
)
;
}
}
