#
ifndef
__NS_SVGPAINTSERVERFRAME_H__
#
define
__NS_SVGPAINTSERVERFRAME_H__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsFrame
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsQueryFrame
.
h
"
#
include
"
nsSVGContainerFrame
.
h
"
#
include
"
nsSVGUtils
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
DrawTarget
;
}
}
class
gfxContext
;
class
gfxPattern
;
class
nsStyleContext
;
struct
gfxRect
;
class
MOZ_RAII
AutoSetRestorePaintServerState
{
public
:
explicit
AutoSetRestorePaintServerState
(
nsIFrame
*
aFrame
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mFrame
(
aFrame
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
mFrame
-
>
AddStateBits
(
NS_FRAME_DRAWING_AS_PAINTSERVER
)
;
}
~
AutoSetRestorePaintServerState
(
)
{
mFrame
-
>
RemoveStateBits
(
NS_FRAME_DRAWING_AS_PAINTSERVER
)
;
}
private
:
nsIFrame
*
mFrame
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
nsSVGPaintServerFrame
:
public
nsSVGContainerFrame
{
protected
:
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
typedef
mozilla
:
:
image
:
:
DrawResult
DrawResult
;
explicit
nsSVGPaintServerFrame
(
nsStyleContext
*
aContext
mozilla
:
:
LayoutFrameType
aType
)
:
nsSVGContainerFrame
(
aContext
aType
)
{
AddStateBits
(
NS_FRAME_IS_NONDISPLAY
)
;
}
public
:
typedef
mozilla
:
:
image
:
:
imgDrawingParams
imgDrawingParams
;
NS_DECL_ABSTRACT_FRAME
(
nsSVGPaintServerFrame
)
virtual
mozilla
:
:
Pair
<
DrawResult
RefPtr
<
gfxPattern
>
>
GetPaintServerPattern
(
nsIFrame
*
aSource
const
DrawTarget
*
aDrawTarget
const
gfxMatrix
&
aContextMatrix
nsStyleSVGPaint
nsStyleSVG
:
:
*
aFillOrStroke
float
aOpacity
const
gfxRect
*
aOverrideBounds
=
nullptr
uint32_t
aFlags
=
0
)
=
0
;
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsRect
&
aDirtyRect
const
nsDisplayListSet
&
aLists
)
override
{
}
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsSVGContainerFrame
:
:
IsFrameOfType
(
aFlags
&
~
nsIFrame
:
:
eSVGPaintServer
)
;
}
}
;
#
endif
