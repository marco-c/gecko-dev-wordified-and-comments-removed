#
ifndef
LAYOUT_SVG_SVGGRADIENTFRAME_H_
#
define
LAYOUT_SVG_SVGGRADIENTFRAME_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
SVGPaintServerFrame
.
h
"
#
include
"
gfxMatrix
.
h
"
#
include
"
gfxRect
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsLiteralString
.
h
"
class
gfxPattern
;
class
nsAtom
;
class
nsIContent
;
namespace
mozilla
{
class
PresShell
;
class
SVGAnimatedTransformList
;
namespace
dom
{
class
SVGLinearGradientElement
;
class
SVGRadialGradientElement
;
}
}
nsIFrame
*
NS_NewSVGLinearGradientFrame
(
mozilla
:
:
PresShell
*
aPresShell
mozilla
:
:
ComputedStyle
*
aStyle
)
;
nsIFrame
*
NS_NewSVGRadialGradientFrame
(
mozilla
:
:
PresShell
*
aPresShell
mozilla
:
:
ComputedStyle
*
aStyle
)
;
namespace
mozilla
{
class
SVGGradientFrame
:
public
SVGPaintServerFrame
{
using
ExtendMode
=
gfx
:
:
ExtendMode
;
protected
:
SVGGradientFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
ClassID
aID
)
;
public
:
NS_DECL_ABSTRACT_FRAME
(
SVGGradientFrame
)
NS_DECL_QUERYFRAME
NS_DECL_QUERYFRAME_TARGET
(
SVGGradientFrame
)
virtual
already_AddRefed
<
gfxPattern
>
GetPaintServerPattern
(
nsIFrame
*
aSource
const
DrawTarget
*
aDrawTarget
const
gfxMatrix
&
aContextMatrix
StyleSVGPaint
nsStyleSVG
:
:
*
aFillOrStroke
float
aGraphicOpacity
imgDrawingParams
&
aImgParams
const
gfxRect
*
aOverrideBounds
)
override
;
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
u
"
SVGGradient
"
_ns
aResult
)
;
}
#
endif
private
:
SVGGradientFrame
*
GetReferencedGradient
(
)
;
void
GetStopFrames
(
nsTArray
<
nsIFrame
*
>
*
aStopFrames
)
;
const
SVGAnimatedTransformList
*
GetGradientTransformList
(
nsIContent
*
aDefault
)
;
gfxMatrix
GetGradientTransform
(
nsIFrame
*
aSource
const
gfxRect
*
aOverrideBounds
)
;
protected
:
virtual
bool
GradientVectorLengthIsZero
(
)
=
0
;
virtual
already_AddRefed
<
gfxPattern
>
CreateGradient
(
)
=
0
;
uint16_t
GetEnumValue
(
uint32_t
aIndex
nsIContent
*
aDefault
)
;
uint16_t
GetEnumValue
(
uint32_t
aIndex
)
{
return
GetEnumValue
(
aIndex
mContent
)
;
}
uint16_t
GetGradientUnits
(
)
;
uint16_t
GetSpreadMethod
(
)
;
virtual
dom
:
:
SVGLinearGradientElement
*
GetLinearGradientWithLength
(
uint32_t
aIndex
dom
:
:
SVGLinearGradientElement
*
aDefault
)
;
virtual
dom
:
:
SVGRadialGradientElement
*
GetRadialGradientWithLength
(
uint32_t
aIndex
dom
:
:
SVGRadialGradientElement
*
aDefault
)
;
nsIFrame
*
mSource
;
private
:
bool
mLoopFlag
;
bool
mNoHRefURI
;
}
;
class
SVGLinearGradientFrame
final
:
public
SVGGradientFrame
{
friend
nsIFrame
*
:
:
NS_NewSVGLinearGradientFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
protected
:
explicit
SVGLinearGradientFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
SVGGradientFrame
(
aStyle
aPresContext
kClassID
)
{
}
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
SVGLinearGradientFrame
)
#
ifdef
DEBUG
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
#
endif
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
u
"
SVGLinearGradient
"
_ns
aResult
)
;
}
#
endif
protected
:
float
GetLengthValue
(
uint32_t
aIndex
)
;
virtual
mozilla
:
:
dom
:
:
SVGLinearGradientElement
*
GetLinearGradientWithLength
(
uint32_t
aIndex
mozilla
:
:
dom
:
:
SVGLinearGradientElement
*
aDefault
)
override
;
virtual
bool
GradientVectorLengthIsZero
(
)
override
;
virtual
already_AddRefed
<
gfxPattern
>
CreateGradient
(
)
override
;
}
;
class
SVGRadialGradientFrame
final
:
public
SVGGradientFrame
{
friend
nsIFrame
*
:
:
NS_NewSVGRadialGradientFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
protected
:
explicit
SVGRadialGradientFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
SVGGradientFrame
(
aStyle
aPresContext
kClassID
)
{
}
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
SVGRadialGradientFrame
)
#
ifdef
DEBUG
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
#
endif
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
u
"
SVGRadialGradient
"
_ns
aResult
)
;
}
#
endif
protected
:
float
GetLengthValue
(
uint32_t
aIndex
)
;
float
GetLengthValue
(
uint32_t
aIndex
float
aDefaultValue
)
;
float
GetLengthValueFromElement
(
uint32_t
aIndex
mozilla
:
:
dom
:
:
SVGRadialGradientElement
&
aElement
)
;
virtual
mozilla
:
:
dom
:
:
SVGRadialGradientElement
*
GetRadialGradientWithLength
(
uint32_t
aIndex
mozilla
:
:
dom
:
:
SVGRadialGradientElement
*
aDefault
)
override
;
virtual
bool
GradientVectorLengthIsZero
(
)
override
;
virtual
already_AddRefed
<
gfxPattern
>
CreateGradient
(
)
override
;
}
;
}
#
endif
