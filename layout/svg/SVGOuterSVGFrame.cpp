#
include
"
SVGOuterSVGFrame
.
h
"
#
include
"
gfxContext
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsIObjectLoadingContent
.
h
"
#
include
"
nsSubDocumentFrame
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
SVGForeignObjectFrame
.
h
"
#
include
"
mozilla
/
SVGUtils
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
SVGSVGElement
.
h
"
#
include
"
mozilla
/
dom
/
SVGViewElement
.
h
"
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
image
;
template
<
typename
.
.
.
Atoms
>
bool
IsAnyAtomEqual
(
const
nsAString
&
aString
nsAtom
*
aFirst
Atoms
.
.
.
aArgs
)
{
return
aFirst
-
>
Equals
(
aString
)
|
|
IsAnyAtomEqual
(
aString
aArgs
.
.
.
)
;
}
bool
IsAnyAtomEqual
(
const
nsAString
&
aString
)
{
return
false
;
}
namespace
mozilla
{
void
SVGOuterSVGFrame
:
:
RegisterForeignObject
(
SVGForeignObjectFrame
*
aFrame
)
{
NS_ASSERTION
(
aFrame
"
Who
on
earth
is
calling
us
?
!
"
)
;
if
(
!
mForeignObjectHash
)
{
mForeignObjectHash
=
MakeUnique
<
nsTHashtable
<
nsPtrHashKey
<
SVGForeignObjectFrame
>
>
>
(
)
;
}
NS_ASSERTION
(
!
mForeignObjectHash
-
>
GetEntry
(
aFrame
)
"
SVGForeignObjectFrame
already
registered
!
"
)
;
mForeignObjectHash
-
>
PutEntry
(
aFrame
)
;
NS_ASSERTION
(
mForeignObjectHash
-
>
GetEntry
(
aFrame
)
"
Failed
to
register
SVGForeignObjectFrame
!
"
)
;
}
void
SVGOuterSVGFrame
:
:
UnregisterForeignObject
(
SVGForeignObjectFrame
*
aFrame
)
{
NS_ASSERTION
(
aFrame
"
Who
on
earth
is
calling
us
?
!
"
)
;
NS_ASSERTION
(
mForeignObjectHash
&
&
mForeignObjectHash
-
>
GetEntry
(
aFrame
)
"
SVGForeignObjectFrame
not
in
registry
!
"
)
;
return
mForeignObjectHash
-
>
RemoveEntry
(
aFrame
)
;
}
}
nsContainerFrame
*
NS_NewSVGOuterSVGFrame
(
mozilla
:
:
PresShell
*
aPresShell
mozilla
:
:
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
mozilla
:
:
SVGOuterSVGFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
namespace
mozilla
{
NS_IMPL_FRAMEARENA_HELPERS
(
SVGOuterSVGFrame
)
SVGOuterSVGFrame
:
:
SVGOuterSVGFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
SVGDisplayContainerFrame
(
aStyle
aPresContext
kClassID
)
mCallingReflowSVG
(
false
)
mFullZoom
(
PresContext
(
)
-
>
GetFullZoom
(
)
)
mViewportInitialized
(
false
)
mIsRootContent
(
false
)
{
RemoveStateBits
(
NS_FRAME_SVG_LAYOUT
)
;
}
static
inline
bool
DependsOnIntrinsicSize
(
const
nsIFrame
*
aEmbeddingFrame
)
{
const
nsStylePosition
*
pos
=
aEmbeddingFrame
-
>
StylePosition
(
)
;
return
!
pos
-
>
mWidth
.
ConvertsToLength
(
)
|
|
!
pos
-
>
mHeight
.
ConvertsToLength
(
)
;
}
static
inline
bool
IsReplacedAndContainSize
(
const
SVGOuterSVGFrame
*
aFrame
)
{
return
aFrame
-
>
GetContent
(
)
-
>
GetParent
(
)
&
&
aFrame
-
>
StyleDisplay
(
)
-
>
IsContainSize
(
)
;
}
void
SVGOuterSVGFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
NS_ASSERTION
(
aContent
-
>
IsSVGElement
(
nsGkAtoms
:
:
svg
)
"
Content
is
not
an
SVG
'
svg
'
element
!
"
)
;
AddStateBits
(
NS_FRAME_REFLOW_ROOT
|
NS_FRAME_FONT_INFLATION_CONTAINER
|
NS_FRAME_FONT_INFLATION_FLOW_ROOT
)
;
SVGSVGElement
*
svg
=
static_cast
<
SVGSVGElement
*
>
(
aContent
)
;
if
(
!
svg
-
>
PassesConditionalProcessingTests
(
)
)
{
AddStateBits
(
NS_FRAME_IS_NONDISPLAY
)
;
}
SVGDisplayContainerFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
Document
*
doc
=
mContent
-
>
GetUncomposedDoc
(
)
;
if
(
doc
)
{
if
(
doc
-
>
GetRootElement
(
)
=
=
mContent
)
{
mIsRootContent
=
true
;
nsIFrame
*
embeddingFrame
;
if
(
IsRootOfReplacedElementSubDoc
(
&
embeddingFrame
)
&
&
embeddingFrame
)
{
if
(
MOZ_UNLIKELY
(
!
embeddingFrame
-
>
HasAllStateBits
(
NS_FRAME_IS_DIRTY
)
)
)
{
bool
dependsOnIntrinsicSize
=
DependsOnIntrinsicSize
(
embeddingFrame
)
;
if
(
dependsOnIntrinsicSize
|
|
embeddingFrame
-
>
StylePosition
(
)
-
>
mObjectFit
!
=
StyleObjectFit
:
:
Fill
)
{
auto
dirtyHint
=
dependsOnIntrinsicSize
?
IntrinsicDirty
:
:
StyleChange
:
IntrinsicDirty
:
:
Resize
;
embeddingFrame
-
>
PresShell
(
)
-
>
FrameNeedsReflow
(
embeddingFrame
dirtyHint
NS_FRAME_IS_DIRTY
)
;
}
}
}
}
}
}
NS_QUERYFRAME_HEAD
(
SVGOuterSVGFrame
)
NS_QUERYFRAME_ENTRY
(
ISVGSVGFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
SVGDisplayContainerFrame
)
nscoord
SVGOuterSVGFrame
:
:
GetMinISize
(
gfxContext
*
aRenderingContext
)
{
nscoord
result
;
DISPLAY_MIN_INLINE_SIZE
(
this
result
)
;
result
=
nscoord
(
0
)
;
return
result
;
}
nscoord
SVGOuterSVGFrame
:
:
GetPrefISize
(
gfxContext
*
aRenderingContext
)
{
nscoord
result
;
DISPLAY_PREF_INLINE_SIZE
(
this
result
)
;
SVGSVGElement
*
svg
=
static_cast
<
SVGSVGElement
*
>
(
GetContent
(
)
)
;
WritingMode
wm
=
GetWritingMode
(
)
;
const
SVGAnimatedLength
&
isize
=
wm
.
IsVertical
(
)
?
svg
-
>
mLengthAttributes
[
SVGSVGElement
:
:
ATTR_HEIGHT
]
:
svg
-
>
mLengthAttributes
[
SVGSVGElement
:
:
ATTR_WIDTH
]
;
if
(
IsReplacedAndContainSize
(
this
)
)
{
result
=
nscoord
(
0
)
;
}
else
if
(
isize
.
IsPercentage
(
)
)
{
result
=
nscoord
(
0
)
;
nsIFrame
*
parent
=
GetParent
(
)
;
while
(
parent
)
{
nscoord
parentISize
=
parent
-
>
GetLogicalSize
(
wm
)
.
ISize
(
wm
)
;
if
(
parentISize
>
0
&
&
parentISize
!
=
NS_UNCONSTRAINEDSIZE
)
{
result
=
parentISize
;
break
;
}
parent
=
parent
-
>
GetParent
(
)
;
}
}
else
{
result
=
nsPresContext
:
:
CSSPixelsToAppUnits
(
isize
.
GetAnimValue
(
svg
)
)
;
if
(
result
<
0
)
{
result
=
nscoord
(
0
)
;
}
}
return
result
;
}
IntrinsicSize
SVGOuterSVGFrame
:
:
GetIntrinsicSize
(
)
{
if
(
IsReplacedAndContainSize
(
this
)
)
{
return
IntrinsicSize
(
0
0
)
;
}
SVGSVGElement
*
content
=
static_cast
<
SVGSVGElement
*
>
(
GetContent
(
)
)
;
const
SVGAnimatedLength
&
width
=
content
-
>
mLengthAttributes
[
SVGSVGElement
:
:
ATTR_WIDTH
]
;
const
SVGAnimatedLength
&
height
=
content
-
>
mLengthAttributes
[
SVGSVGElement
:
:
ATTR_HEIGHT
]
;
IntrinsicSize
intrinsicSize
;
if
(
!
width
.
IsPercentage
(
)
)
{
nscoord
val
=
nsPresContext
:
:
CSSPixelsToAppUnits
(
width
.
GetAnimValue
(
content
)
)
;
intrinsicSize
.
width
.
emplace
(
std
:
:
max
(
val
0
)
)
;
}
if
(
!
height
.
IsPercentage
(
)
)
{
nscoord
val
=
nsPresContext
:
:
CSSPixelsToAppUnits
(
height
.
GetAnimValue
(
content
)
)
;
intrinsicSize
.
height
.
emplace
(
std
:
:
max
(
val
0
)
)
;
}
return
intrinsicSize
;
}
AspectRatio
SVGOuterSVGFrame
:
:
GetIntrinsicRatio
(
)
{
if
(
IsReplacedAndContainSize
(
this
)
)
{
return
AspectRatio
(
)
;
}
const
StyleAspectRatio
&
aspectRatio
=
StylePosition
(
)
-
>
mAspectRatio
;
if
(
!
aspectRatio
.
auto_
)
{
return
aspectRatio
.
ratio
.
AsRatio
(
)
.
ToLayoutRatio
(
)
;
}
SVGSVGElement
*
content
=
static_cast
<
SVGSVGElement
*
>
(
GetContent
(
)
)
;
const
SVGAnimatedLength
&
width
=
content
-
>
mLengthAttributes
[
SVGSVGElement
:
:
ATTR_WIDTH
]
;
const
SVGAnimatedLength
&
height
=
content
-
>
mLengthAttributes
[
SVGSVGElement
:
:
ATTR_HEIGHT
]
;
if
(
!
width
.
IsPercentage
(
)
&
&
!
height
.
IsPercentage
(
)
)
{
return
AspectRatio
:
:
FromSize
(
width
.
GetAnimValue
(
content
)
height
.
GetAnimValue
(
content
)
)
;
}
SVGViewElement
*
viewElement
=
content
-
>
GetCurrentViewElement
(
)
;
const
SVGViewBox
*
viewbox
=
nullptr
;
if
(
viewElement
&
&
viewElement
-
>
mViewBox
.
HasRect
(
)
)
{
viewbox
=
&
viewElement
-
>
mViewBox
.
GetAnimValue
(
)
;
}
else
if
(
content
-
>
mViewBox
.
HasRect
(
)
)
{
viewbox
=
&
content
-
>
mViewBox
.
GetAnimValue
(
)
;
}
if
(
viewbox
)
{
return
AspectRatio
:
:
FromSize
(
viewbox
-
>
width
viewbox
-
>
height
)
;
}
if
(
aspectRatio
.
HasRatio
(
)
)
{
return
aspectRatio
.
ratio
.
AsRatio
(
)
.
ToLayoutRatio
(
)
;
}
return
SVGDisplayContainerFrame
:
:
GetIntrinsicRatio
(
)
;
}
nsIFrame
:
:
SizeComputationResult
SVGOuterSVGFrame
:
:
ComputeSize
(
gfxContext
*
aRenderingContext
WritingMode
aWritingMode
const
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
LogicalSize
&
aMargin
const
LogicalSize
&
aBorder
const
LogicalSize
&
aPadding
ComputeSizeFlags
aFlags
)
{
if
(
IsRootOfImage
(
)
|
|
IsRootOfReplacedElementSubDoc
(
)
)
{
return
{
aCBSize
AspectRatioUsage
:
:
None
}
;
}
LogicalSize
cbSize
=
aCBSize
;
IntrinsicSize
intrinsicSize
=
GetIntrinsicSize
(
)
;
if
(
!
mContent
-
>
GetParent
(
)
)
{
NS_ASSERTION
(
aCBSize
.
ISize
(
aWritingMode
)
!
=
NS_UNCONSTRAINEDSIZE
&
&
aCBSize
.
BSize
(
aWritingMode
)
!
=
NS_UNCONSTRAINEDSIZE
"
root
should
not
have
auto
-
width
/
height
containing
block
"
)
;
if
(
!
IsContainingWindowElementOfType
(
nullptr
nsGkAtoms
:
:
iframe
)
)
{
cbSize
.
ISize
(
aWritingMode
)
*
=
PresContext
(
)
-
>
GetFullZoom
(
)
;
cbSize
.
BSize
(
aWritingMode
)
*
=
PresContext
(
)
-
>
GetFullZoom
(
)
;
}
SVGSVGElement
*
content
=
static_cast
<
SVGSVGElement
*
>
(
GetContent
(
)
)
;
const
SVGAnimatedLength
&
width
=
content
-
>
mLengthAttributes
[
SVGSVGElement
:
:
ATTR_WIDTH
]
;
if
(
width
.
IsPercentage
(
)
)
{
MOZ_ASSERT
(
!
intrinsicSize
.
width
"
GetIntrinsicSize
should
have
reported
no
intrinsic
width
"
)
;
float
val
=
width
.
GetAnimValInSpecifiedUnits
(
)
/
100
.
0f
;
intrinsicSize
.
width
.
emplace
(
std
:
:
max
(
val
0
.
0f
)
*
cbSize
.
Width
(
aWritingMode
)
)
;
}
const
SVGAnimatedLength
&
height
=
content
-
>
mLengthAttributes
[
SVGSVGElement
:
:
ATTR_HEIGHT
]
;
NS_ASSERTION
(
aCBSize
.
BSize
(
aWritingMode
)
!
=
NS_UNCONSTRAINEDSIZE
"
root
should
not
have
auto
-
height
containing
block
"
)
;
if
(
height
.
IsPercentage
(
)
)
{
MOZ_ASSERT
(
!
intrinsicSize
.
height
"
GetIntrinsicSize
should
have
reported
no
intrinsic
height
"
)
;
float
val
=
height
.
GetAnimValInSpecifiedUnits
(
)
/
100
.
0f
;
intrinsicSize
.
height
.
emplace
(
std
:
:
max
(
val
0
.
0f
)
*
cbSize
.
Height
(
aWritingMode
)
)
;
}
MOZ_ASSERT
(
intrinsicSize
.
height
&
&
intrinsicSize
.
width
"
We
should
have
just
handled
the
only
situation
where
"
"
we
lack
an
intrinsic
height
or
width
.
"
)
;
}
return
{
ComputeSizeWithIntrinsicDimensions
(
aRenderingContext
aWritingMode
intrinsicSize
GetIntrinsicRatio
(
)
cbSize
aMargin
aBorder
aPadding
aFlags
)
AspectRatioUsage
:
:
None
}
;
}
void
SVGOuterSVGFrame
:
:
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
{
MarkInReflow
(
)
;
DO_GLOBAL_REFLOW_COUNT
(
"
SVGOuterSVGFrame
"
)
;
DISPLAY_REFLOW
(
aPresContext
this
aReflowInput
aDesiredSize
aStatus
)
;
MOZ_ASSERT
(
aStatus
.
IsEmpty
(
)
"
Caller
should
pass
a
fresh
reflow
status
!
"
)
;
NS_FRAME_TRACE
(
NS_FRAME_TRACE_CALLS
(
"
enter
SVGOuterSVGFrame
:
:
Reflow
:
availSize
=
%
d
%
d
"
aReflowInput
.
AvailableWidth
(
)
aReflowInput
.
AvailableHeight
(
)
)
)
;
MOZ_ASSERT
(
mState
&
NS_FRAME_IN_REFLOW
"
frame
is
not
in
reflow
"
)
;
aDesiredSize
.
Width
(
)
=
aReflowInput
.
ComputedWidth
(
)
+
aReflowInput
.
ComputedPhysicalBorderPadding
(
)
.
LeftRight
(
)
;
aDesiredSize
.
Height
(
)
=
aReflowInput
.
ComputedHeight
(
)
+
aReflowInput
.
ComputedPhysicalBorderPadding
(
)
.
TopBottom
(
)
;
NS_ASSERTION
(
!
GetPrevInFlow
(
)
"
SVG
can
'
t
currently
be
broken
across
pages
.
"
)
;
SVGSVGElement
*
svgElem
=
static_cast
<
SVGSVGElement
*
>
(
GetContent
(
)
)
;
auto
*
anonKid
=
static_cast
<
SVGOuterSVGAnonChildFrame
*
>
(
PrincipalChildList
(
)
.
FirstChild
(
)
)
;
if
(
mState
&
NS_FRAME_FIRST_REFLOW
)
{
svgElem
-
>
UpdateHasChildrenOnlyTransform
(
)
;
}
svgFloatSize
newViewportSize
(
nsPresContext
:
:
AppUnitsToFloatCSSPixels
(
aReflowInput
.
ComputedWidth
(
)
)
nsPresContext
:
:
AppUnitsToFloatCSSPixels
(
aReflowInput
.
ComputedHeight
(
)
)
)
;
svgFloatSize
oldViewportSize
=
svgElem
-
>
GetViewportSize
(
)
;
uint32_t
changeBits
=
0
;
if
(
newViewportSize
!
=
oldViewportSize
)
{
if
(
svgElem
-
>
HasViewBoxOrSyntheticViewBox
(
)
)
{
nsIFrame
*
anonChild
=
PrincipalChildList
(
)
.
FirstChild
(
)
;
anonChild
-
>
MarkSubtreeDirty
(
)
;
for
(
nsIFrame
*
child
:
anonChild
-
>
PrincipalChildList
(
)
)
{
child
-
>
MarkSubtreeDirty
(
)
;
}
}
changeBits
|
=
COORD_CONTEXT_CHANGED
;
svgElem
-
>
SetViewportSize
(
newViewportSize
)
;
}
if
(
mFullZoom
!
=
PresContext
(
)
-
>
GetFullZoom
(
)
&
&
!
IsContainingWindowElementOfType
(
nullptr
nsGkAtoms
:
:
iframe
)
)
{
changeBits
|
=
FULL_ZOOM_CHANGED
;
mFullZoom
=
PresContext
(
)
-
>
GetFullZoom
(
)
;
}
if
(
changeBits
)
{
NotifyViewportOrTransformChanged
(
changeBits
)
;
}
mViewportInitialized
=
true
;
mCallingReflowSVG
=
true
;
if
(
HasAnyStateBits
(
NS_FRAME_IS_NONDISPLAY
)
)
{
ReflowSVGNonDisplayText
(
this
)
;
}
else
{
anonKid
-
>
ReflowSVG
(
)
;
MOZ_ASSERT
(
!
anonKid
-
>
GetNextSibling
(
)
"
We
should
have
one
anonymous
child
frame
wrapping
our
real
"
"
children
"
)
;
}
mCallingReflowSVG
=
false
;
anonKid
-
>
SetPosition
(
GetContentRectRelativeToSelf
(
)
.
TopLeft
(
)
)
;
aDesiredSize
.
SetOverflowAreasToDesiredBounds
(
)
;
if
(
!
HasAnyStateBits
(
NS_FRAME_IS_NONDISPLAY
)
)
{
if
(
!
mIsRootContent
)
{
aDesiredSize
.
mOverflowAreas
.
InkOverflow
(
)
.
UnionRect
(
aDesiredSize
.
mOverflowAreas
.
InkOverflow
(
)
anonKid
-
>
InkOverflowRect
(
)
+
anonKid
-
>
GetPosition
(
)
)
;
}
FinishAndStoreOverflow
(
&
aDesiredSize
)
;
}
NS_FRAME_TRACE
(
NS_FRAME_TRACE_CALLS
(
"
exit
SVGOuterSVGFrame
:
:
Reflow
:
size
=
%
d
%
d
"
aDesiredSize
.
Width
(
)
aDesiredSize
.
Height
(
)
)
)
;
NS_FRAME_SET_TRUNCATION
(
aStatus
aReflowInput
aDesiredSize
)
;
}
void
SVGOuterSVGFrame
:
:
DidReflow
(
nsPresContext
*
aPresContext
const
ReflowInput
*
aReflowInput
)
{
SVGDisplayContainerFrame
:
:
DidReflow
(
aPresContext
aReflowInput
)
;
PresShell
(
)
-
>
SynthesizeMouseMove
(
false
)
;
}
void
SVGOuterSVGFrame
:
:
UnionChildOverflow
(
nsOverflowAreas
&
aOverflowAreas
)
{
if
(
!
mIsRootContent
)
{
nsIFrame
*
anonKid
=
PrincipalChildList
(
)
.
FirstChild
(
)
;
aOverflowAreas
.
InkOverflow
(
)
.
UnionRect
(
aOverflowAreas
.
InkOverflow
(
)
anonKid
-
>
InkOverflowRect
(
)
+
anonKid
-
>
GetPosition
(
)
)
;
}
}
class
nsDisplayOuterSVG
final
:
public
nsPaintedDisplayItem
{
public
:
nsDisplayOuterSVG
(
nsDisplayListBuilder
*
aBuilder
SVGOuterSVGFrame
*
aFrame
)
:
nsPaintedDisplayItem
(
aBuilder
aFrame
)
{
MOZ_COUNT_CTOR
(
nsDisplayOuterSVG
)
;
}
MOZ_COUNTED_DTOR_OVERRIDE
(
nsDisplayOuterSVG
)
virtual
void
HitTest
(
nsDisplayListBuilder
*
aBuilder
const
nsRect
&
aRect
HitTestState
*
aState
nsTArray
<
nsIFrame
*
>
*
aOutFrames
)
override
;
virtual
void
Paint
(
nsDisplayListBuilder
*
aBuilder
gfxContext
*
aContext
)
override
;
virtual
void
ComputeInvalidationRegion
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayItemGeometry
*
aGeometry
nsRegion
*
aInvalidRegion
)
const
override
;
nsDisplayItemGeometry
*
AllocateGeometry
(
nsDisplayListBuilder
*
aBuilder
)
override
{
return
new
nsDisplayItemGenericImageGeometry
(
this
aBuilder
)
;
}
NS_DISPLAY_DECL_NAME
(
"
SVGOuterSVG
"
TYPE_SVG_OUTER_SVG
)
}
;
void
nsDisplayOuterSVG
:
:
HitTest
(
nsDisplayListBuilder
*
aBuilder
const
nsRect
&
aRect
HitTestState
*
aState
nsTArray
<
nsIFrame
*
>
*
aOutFrames
)
{
SVGOuterSVGFrame
*
outerSVGFrame
=
static_cast
<
SVGOuterSVGFrame
*
>
(
mFrame
)
;
nsPoint
refFrameToContentBox
=
ToReferenceFrame
(
)
+
outerSVGFrame
-
>
GetContentRectRelativeToSelf
(
)
.
TopLeft
(
)
;
nsPoint
pointRelativeToContentBox
=
nsPoint
(
aRect
.
x
+
aRect
.
width
/
2
aRect
.
y
+
aRect
.
height
/
2
)
-
refFrameToContentBox
;
gfxPoint
svgViewportRelativePoint
=
gfxPoint
(
pointRelativeToContentBox
.
x
pointRelativeToContentBox
.
y
)
/
AppUnitsPerCSSPixel
(
)
;
auto
*
anonKid
=
static_cast
<
SVGOuterSVGAnonChildFrame
*
>
(
outerSVGFrame
-
>
PrincipalChildList
(
)
.
FirstChild
(
)
)
;
nsIFrame
*
frame
=
SVGUtils
:
:
HitTestChildren
(
anonKid
svgViewportRelativePoint
)
;
if
(
frame
)
{
aOutFrames
-
>
AppendElement
(
frame
)
;
}
}
void
nsDisplayOuterSVG
:
:
Paint
(
nsDisplayListBuilder
*
aBuilder
gfxContext
*
aContext
)
{
#
if
defined
(
DEBUG
)
&
&
defined
(
SVG_DEBUG_PAINT_TIMING
)
PRTime
start
=
PR_Now
(
)
;
#
endif
SVGAutoRenderState
state
(
aContext
-
>
GetDrawTarget
(
)
)
;
if
(
aBuilder
-
>
IsPaintingToWindow
(
)
)
{
state
.
SetPaintingToWindow
(
true
)
;
}
nsRect
viewportRect
=
mFrame
-
>
GetContentRectRelativeToSelf
(
)
+
ToReferenceFrame
(
)
;
nsRect
clipRect
=
GetPaintRect
(
)
.
Intersect
(
viewportRect
)
;
uint32_t
appUnitsPerDevPixel
=
mFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
nsIntRect
contentAreaDirtyRect
=
(
clipRect
-
viewportRect
.
TopLeft
(
)
)
.
ToOutsidePixels
(
appUnitsPerDevPixel
)
;
gfxPoint
devPixelOffset
=
nsLayoutUtils
:
:
PointToGfxPoint
(
viewportRect
.
TopLeft
(
)
appUnitsPerDevPixel
)
;
aContext
-
>
Save
(
)
;
imgDrawingParams
imgParams
(
aBuilder
-
>
GetImageDecodeFlags
(
)
)
;
gfxMatrix
tm
=
SVGUtils
:
:
GetCSSPxToDevPxMatrix
(
mFrame
)
*
gfxMatrix
:
:
Translation
(
devPixelOffset
)
;
SVGUtils
:
:
PaintFrameWithEffects
(
mFrame
*
aContext
tm
imgParams
&
contentAreaDirtyRect
)
;
nsDisplayItemGenericImageGeometry
:
:
UpdateDrawResult
(
this
imgParams
.
result
)
;
aContext
-
>
Restore
(
)
;
#
if
defined
(
DEBUG
)
&
&
defined
(
SVG_DEBUG_PAINT_TIMING
)
PRTime
end
=
PR_Now
(
)
;
printf
(
"
SVG
Paint
Timing
:
%
f
ms
\
n
"
(
end
-
start
)
/
1000
.
0
)
;
#
endif
}
nsRegion
SVGOuterSVGFrame
:
:
FindInvalidatedForeignObjectFrameChildren
(
nsIFrame
*
aFrame
)
{
nsRegion
result
;
if
(
mForeignObjectHash
&
&
mForeignObjectHash
-
>
Count
(
)
)
{
for
(
auto
it
=
mForeignObjectHash
-
>
Iter
(
)
;
!
it
.
Done
(
)
;
it
.
Next
(
)
)
{
result
.
Or
(
result
it
.
Get
(
)
-
>
GetKey
(
)
-
>
GetInvalidRegion
(
)
)
;
}
}
return
result
;
}
void
nsDisplayOuterSVG
:
:
ComputeInvalidationRegion
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayItemGeometry
*
aGeometry
nsRegion
*
aInvalidRegion
)
const
{
auto
*
frame
=
static_cast
<
SVGOuterSVGFrame
*
>
(
mFrame
)
;
frame
-
>
InvalidateSVG
(
frame
-
>
FindInvalidatedForeignObjectFrameChildren
(
frame
)
)
;
nsRegion
result
=
frame
-
>
GetInvalidRegion
(
)
;
result
.
MoveBy
(
ToReferenceFrame
(
)
)
;
frame
-
>
ClearInvalidRegion
(
)
;
nsDisplayItem
:
:
ComputeInvalidationRegion
(
aBuilder
aGeometry
aInvalidRegion
)
;
aInvalidRegion
-
>
Or
(
*
aInvalidRegion
result
)
;
const
auto
*
geometry
=
static_cast
<
const
nsDisplayItemGenericImageGeometry
*
>
(
aGeometry
)
;
if
(
aBuilder
-
>
ShouldSyncDecodeImages
(
)
&
&
geometry
-
>
ShouldInvalidateToSyncDecodeImages
(
)
)
{
bool
snap
;
aInvalidRegion
-
>
Or
(
*
aInvalidRegion
GetBounds
(
aBuilder
&
snap
)
)
;
}
}
nsresult
SVGOuterSVGFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
{
if
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
!
HasAnyStateBits
(
NS_FRAME_FIRST_REFLOW
|
NS_FRAME_IS_NONDISPLAY
)
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
viewBox
|
|
aAttribute
=
=
nsGkAtoms
:
:
preserveAspectRatio
|
|
aAttribute
=
=
nsGkAtoms
:
:
transform
)
{
mCanvasTM
=
nullptr
;
SVGUtils
:
:
NotifyChildrenOfSVGChange
(
PrincipalChildList
(
)
.
FirstChild
(
)
aAttribute
=
=
nsGkAtoms
:
:
viewBox
?
TRANSFORM_CHANGED
|
COORD_CONTEXT_CHANGED
:
TRANSFORM_CHANGED
)
;
if
(
aAttribute
!
=
nsGkAtoms
:
:
transform
)
{
static_cast
<
SVGSVGElement
*
>
(
GetContent
(
)
)
-
>
ChildrenOnlyTransformChanged
(
)
;
}
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
width
|
|
aAttribute
=
=
nsGkAtoms
:
:
height
|
|
aAttribute
=
=
nsGkAtoms
:
:
viewBox
)
{
nsIFrame
*
embeddingFrame
;
if
(
IsRootOfReplacedElementSubDoc
(
&
embeddingFrame
)
&
&
embeddingFrame
)
{
bool
dependsOnIntrinsicSize
=
DependsOnIntrinsicSize
(
embeddingFrame
)
;
if
(
dependsOnIntrinsicSize
|
|
embeddingFrame
-
>
StylePosition
(
)
-
>
mObjectFit
!
=
StyleObjectFit
:
:
Fill
)
{
auto
dirtyHint
=
dependsOnIntrinsicSize
?
IntrinsicDirty
:
:
StyleChange
:
IntrinsicDirty
:
:
Resize
;
embeddingFrame
-
>
PresShell
(
)
-
>
FrameNeedsReflow
(
embeddingFrame
dirtyHint
NS_FRAME_IS_DIRTY
)
;
}
}
else
{
PresShell
(
)
-
>
FrameNeedsReflow
(
this
IntrinsicDirty
:
:
StyleChange
NS_FRAME_IS_DIRTY
)
;
}
}
}
return
NS_OK
;
}
bool
SVGOuterSVGFrame
:
:
IsSVGTransformed
(
Matrix
*
aOwnTransform
Matrix
*
aFromParentTransform
)
const
{
bool
foundTransform
=
false
;
SVGSVGElement
*
content
=
static_cast
<
SVGSVGElement
*
>
(
GetContent
(
)
)
;
SVGAnimatedTransformList
*
transformList
=
content
-
>
GetAnimatedTransformList
(
)
;
if
(
(
transformList
&
&
transformList
-
>
HasTransform
(
)
)
|
|
content
-
>
GetAnimateMotionTransform
(
)
)
{
if
(
aOwnTransform
)
{
*
aOwnTransform
=
gfx
:
:
ToMatrix
(
content
-
>
PrependLocalTransformsTo
(
gfxMatrix
(
)
eUserSpaceToParent
)
)
;
}
foundTransform
=
true
;
}
return
foundTransform
;
}
void
SVGOuterSVGFrame
:
:
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
if
(
HasAnyStateBits
(
NS_FRAME_IS_NONDISPLAY
)
)
{
return
;
}
DisplayBorderBackgroundOutline
(
aBuilder
aLists
)
;
nsRect
visibleRect
=
aBuilder
-
>
GetVisibleRect
(
)
;
nsRect
dirtyRect
=
aBuilder
-
>
GetDirtyRect
(
)
;
DisplayListClipState
:
:
AutoSaveRestore
autoSR
(
aBuilder
)
;
if
(
mIsRootContent
|
|
StyleDisplay
(
)
-
>
IsScrollableOverflow
(
)
)
{
autoSR
.
ClipContainingBlockDescendantsToContentBox
(
aBuilder
this
)
;
visibleRect
=
visibleRect
.
Intersect
(
GetContentRectRelativeToSelf
(
)
)
;
dirtyRect
=
dirtyRect
.
Intersect
(
GetContentRectRelativeToSelf
(
)
)
;
}
nsDisplayListBuilder
:
:
AutoBuildingDisplayList
building
(
aBuilder
this
visibleRect
dirtyRect
)
;
if
(
(
aBuilder
-
>
IsForEventDelivery
(
)
&
&
NS_SVGDisplayListHitTestingEnabled
(
)
)
|
|
(
!
aBuilder
-
>
IsForEventDelivery
(
)
&
&
NS_SVGDisplayListPaintingEnabled
(
)
)
)
{
nsDisplayList
*
contentList
=
aLists
.
Content
(
)
;
nsDisplayListSet
set
(
contentList
contentList
contentList
contentList
contentList
contentList
)
;
BuildDisplayListForNonBlockChildren
(
aBuilder
set
)
;
}
else
if
(
IsVisibleForPainting
(
)
|
|
!
aBuilder
-
>
IsForPainting
(
)
)
{
aLists
.
Content
(
)
-
>
AppendNewToTop
<
nsDisplayOuterSVG
>
(
aBuilder
this
)
;
}
}
void
SVGOuterSVGFrame
:
:
NotifyViewportOrTransformChanged
(
uint32_t
aFlags
)
{
MOZ_ASSERT
(
aFlags
&
&
!
(
aFlags
&
~
(
COORD_CONTEXT_CHANGED
|
TRANSFORM_CHANGED
|
FULL_ZOOM_CHANGED
)
)
"
Unexpected
aFlags
value
"
)
;
if
(
!
mViewportInitialized
)
{
return
;
}
SVGSVGElement
*
content
=
static_cast
<
SVGSVGElement
*
>
(
GetContent
(
)
)
;
if
(
aFlags
&
COORD_CONTEXT_CHANGED
)
{
if
(
content
-
>
HasViewBox
(
)
)
{
aFlags
=
TRANSFORM_CHANGED
;
}
else
if
(
content
-
>
ShouldSynthesizeViewBox
(
)
)
{
aFlags
|
=
TRANSFORM_CHANGED
;
}
else
if
(
mCanvasTM
&
&
mCanvasTM
-
>
IsSingular
(
)
)
{
aFlags
|
=
TRANSFORM_CHANGED
;
}
}
bool
haveNonFulLZoomTransformChange
=
(
aFlags
&
TRANSFORM_CHANGED
)
;
if
(
aFlags
&
FULL_ZOOM_CHANGED
)
{
aFlags
=
(
aFlags
&
~
FULL_ZOOM_CHANGED
)
|
TRANSFORM_CHANGED
;
}
if
(
aFlags
&
TRANSFORM_CHANGED
)
{
mCanvasTM
=
nullptr
;
if
(
haveNonFulLZoomTransformChange
&
&
!
(
mState
&
NS_FRAME_IS_NONDISPLAY
)
)
{
uint32_t
flags
=
(
mState
&
NS_FRAME_IN_REFLOW
)
?
SVGSVGElement
:
:
eDuringReflow
:
0
;
content
-
>
ChildrenOnlyTransformChanged
(
flags
)
;
}
}
SVGUtils
:
:
NotifyChildrenOfSVGChange
(
PrincipalChildList
(
)
.
FirstChild
(
)
aFlags
)
;
}
void
SVGOuterSVGFrame
:
:
PaintSVG
(
gfxContext
&
aContext
const
gfxMatrix
&
aTransform
imgDrawingParams
&
aImgParams
const
nsIntRect
*
aDirtyRect
)
{
NS_ASSERTION
(
PrincipalChildList
(
)
.
FirstChild
(
)
-
>
IsSVGOuterSVGAnonChildFrame
(
)
&
&
!
PrincipalChildList
(
)
.
FirstChild
(
)
-
>
GetNextSibling
(
)
"
We
should
have
a
single
anonymous
child
"
)
;
auto
*
anonKid
=
static_cast
<
SVGOuterSVGAnonChildFrame
*
>
(
PrincipalChildList
(
)
.
FirstChild
(
)
)
;
anonKid
-
>
PaintSVG
(
aContext
aTransform
aImgParams
aDirtyRect
)
;
}
SVGBBox
SVGOuterSVGFrame
:
:
GetBBoxContribution
(
const
gfx
:
:
Matrix
&
aToBBoxUserspace
uint32_t
aFlags
)
{
NS_ASSERTION
(
PrincipalChildList
(
)
.
FirstChild
(
)
-
>
IsSVGOuterSVGAnonChildFrame
(
)
&
&
!
PrincipalChildList
(
)
.
FirstChild
(
)
-
>
GetNextSibling
(
)
"
We
should
have
a
single
anonymous
child
"
)
;
auto
*
anonKid
=
static_cast
<
SVGOuterSVGAnonChildFrame
*
>
(
PrincipalChildList
(
)
.
FirstChild
(
)
)
;
return
anonKid
-
>
GetBBoxContribution
(
aToBBoxUserspace
aFlags
)
;
}
gfxMatrix
SVGOuterSVGFrame
:
:
GetCanvasTM
(
)
{
if
(
!
mCanvasTM
)
{
SVGSVGElement
*
content
=
static_cast
<
SVGSVGElement
*
>
(
GetContent
(
)
)
;
float
devPxPerCSSPx
=
1
.
0f
/
nsPresContext
:
:
AppUnitsToFloatCSSPixels
(
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
)
;
gfxMatrix
tm
=
content
-
>
PrependLocalTransformsTo
(
gfxMatrix
:
:
Scaling
(
devPxPerCSSPx
devPxPerCSSPx
)
)
;
mCanvasTM
=
MakeUnique
<
gfxMatrix
>
(
tm
)
;
}
return
*
mCanvasTM
;
}
template
<
typename
.
.
.
Args
>
bool
SVGOuterSVGFrame
:
:
IsContainingWindowElementOfType
(
nsIFrame
*
*
aContainingWindowFrame
Args
.
.
.
aArgs
)
const
{
if
(
!
mContent
-
>
GetParent
(
)
)
{
if
(
nsCOMPtr
<
nsIDocShell
>
docShell
=
PresContext
(
)
-
>
GetDocShell
(
)
)
{
RefPtr
<
BrowsingContext
>
bc
=
docShell
-
>
GetBrowsingContext
(
)
;
const
Maybe
<
nsString
>
&
type
=
bc
-
>
GetEmbedderElementType
(
)
;
if
(
type
&
&
:
:
IsAnyAtomEqual
(
*
type
aArgs
.
.
.
)
)
{
if
(
aContainingWindowFrame
)
{
if
(
const
Element
*
const
element
=
bc
-
>
GetEmbedderElement
(
)
)
{
*
aContainingWindowFrame
=
element
-
>
GetPrimaryFrame
(
)
;
NS_ASSERTION
(
*
aContainingWindowFrame
"
Yikes
no
frame
!
"
)
;
}
}
return
true
;
}
}
}
if
(
aContainingWindowFrame
)
{
*
aContainingWindowFrame
=
nullptr
;
}
return
false
;
}
bool
SVGOuterSVGFrame
:
:
IsRootOfReplacedElementSubDoc
(
nsIFrame
*
*
aEmbeddingFrame
)
{
return
IsContainingWindowElementOfType
(
aEmbeddingFrame
nsGkAtoms
:
:
object
nsGkAtoms
:
:
embed
)
;
}
bool
SVGOuterSVGFrame
:
:
IsRootOfImage
(
)
{
if
(
!
mContent
-
>
GetParent
(
)
)
{
Document
*
doc
=
mContent
-
>
GetUncomposedDoc
(
)
;
if
(
doc
&
&
doc
-
>
IsBeingUsedAsImage
(
)
)
{
return
true
;
}
}
return
false
;
}
bool
SVGOuterSVGFrame
:
:
VerticalScrollbarNotNeeded
(
)
const
{
const
SVGAnimatedLength
&
height
=
static_cast
<
SVGSVGElement
*
>
(
GetContent
(
)
)
-
>
mLengthAttributes
[
SVGSVGElement
:
:
ATTR_HEIGHT
]
;
return
height
.
IsPercentage
(
)
&
&
height
.
GetBaseValInSpecifiedUnits
(
)
<
=
100
;
}
void
SVGOuterSVGFrame
:
:
AppendDirectlyOwnedAnonBoxes
(
nsTArray
<
OwnedAnonBox
>
&
aResult
)
{
nsIFrame
*
anonKid
=
PrincipalChildList
(
)
.
FirstChild
(
)
;
MOZ_ASSERT
(
anonKid
-
>
IsSVGOuterSVGAnonChildFrame
(
)
)
;
aResult
.
AppendElement
(
OwnedAnonBox
(
anonKid
)
)
;
}
}
nsContainerFrame
*
NS_NewSVGOuterSVGAnonChildFrame
(
mozilla
:
:
PresShell
*
aPresShell
mozilla
:
:
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
mozilla
:
:
SVGOuterSVGAnonChildFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
namespace
mozilla
{
NS_IMPL_FRAMEARENA_HELPERS
(
SVGOuterSVGAnonChildFrame
)
#
ifdef
DEBUG
void
SVGOuterSVGAnonChildFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
MOZ_ASSERT
(
aParent
-
>
IsSVGOuterSVGFrame
(
)
"
Unexpected
parent
"
)
;
SVGDisplayContainerFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
}
#
endif
void
SVGOuterSVGAnonChildFrame
:
:
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
nsDisplayList
newList
;
nsDisplayListSet
set
(
&
newList
&
newList
&
newList
&
newList
&
newList
&
newList
)
;
BuildDisplayListForNonBlockChildren
(
aBuilder
set
)
;
aLists
.
Content
(
)
-
>
AppendNewToTop
<
nsDisplaySVGWrapper
>
(
aBuilder
this
&
newList
)
;
}
static
Matrix
ComputeOuterSVGAnonChildFrameTransform
(
const
SVGOuterSVGAnonChildFrame
*
aFrame
)
{
SVGSVGElement
*
content
=
static_cast
<
SVGSVGElement
*
>
(
aFrame
-
>
GetContent
(
)
)
;
if
(
!
content
-
>
HasChildrenOnlyTransform
(
)
)
{
return
Matrix
(
)
;
}
gfxMatrix
ownMatrix
=
content
-
>
PrependLocalTransformsTo
(
gfxMatrix
(
)
eChildToUserSpace
)
;
if
(
ownMatrix
.
HasNonTranslation
(
)
)
{
MOZ_ASSERT
(
ownMatrix
.
IsRectilinear
(
)
"
Non
-
rectilinear
transform
will
break
the
following
logic
"
)
;
CSSPoint
pos
=
CSSPixel
:
:
FromAppUnits
(
aFrame
-
>
GetPosition
(
)
)
;
CSSPoint
scaledPos
=
CSSPoint
(
ownMatrix
.
_11
*
pos
.
x
ownMatrix
.
_22
*
pos
.
y
)
;
CSSPoint
deltaPos
=
scaledPos
-
pos
;
ownMatrix
*
=
gfxMatrix
:
:
Translation
(
-
deltaPos
.
x
-
deltaPos
.
y
)
;
}
return
gfx
:
:
ToMatrix
(
ownMatrix
)
;
}
bool
SVGOuterSVGAnonChildFrame
:
:
IsSVGTransformed
(
Matrix
*
aOwnTransform
Matrix
*
aFromParentTransform
)
const
{
if
(
aOwnTransform
)
{
*
aOwnTransform
=
ComputeOuterSVGAnonChildFrameTransform
(
this
)
;
}
return
true
;
}
}
