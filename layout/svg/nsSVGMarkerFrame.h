#
ifndef
__NS_SVGMARKERFRAME_H__
#
define
__NS_SVGMARKERFRAME_H__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
gfxMatrix
.
h
"
#
include
"
gfxRect
.
h
"
#
include
"
nsFrame
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsQueryFrame
.
h
"
#
include
"
nsSVGContainerFrame
.
h
"
#
include
"
nsSVGUtils
.
h
"
class
gfxContext
;
namespace
mozilla
{
class
SVGGeometryFrame
;
namespace
dom
{
class
SVGSVGElement
;
}
}
struct
nsSVGMark
;
class
nsSVGMarkerFrame
final
:
public
nsSVGContainerFrame
{
typedef
mozilla
:
:
image
:
:
imgDrawingParams
imgDrawingParams
;
friend
class
nsSVGMarkerAnonChildFrame
;
friend
nsContainerFrame
*
NS_NewSVGMarkerFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
;
protected
:
explicit
nsSVGMarkerFrame
(
nsStyleContext
*
aContext
)
:
nsSVGContainerFrame
(
aContext
mozilla
:
:
LayoutFrameType
:
:
SVGMarker
)
mMarkedFrame
(
nullptr
)
mInUse
(
false
)
mInUse2
(
false
)
{
AddStateBits
(
NS_FRAME_IS_NONDISPLAY
)
;
}
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsSVGMarkerFrame
)
#
ifdef
DEBUG
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
#
endif
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsRect
&
aDirtyRect
const
nsDisplayListSet
&
aLists
)
override
{
}
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
SVGMarker
"
)
aResult
)
;
}
#
endif
virtual
nsContainerFrame
*
GetContentInsertionFrame
(
)
override
{
MOZ_ASSERT
(
PrincipalChildList
(
)
.
FirstChild
(
)
&
&
PrincipalChildList
(
)
.
FirstChild
(
)
-
>
IsSVGMarkerAnonChildFrame
(
)
"
Where
is
our
anonymous
child
?
"
)
;
return
PrincipalChildList
(
)
.
FirstChild
(
)
-
>
GetContentInsertionFrame
(
)
;
}
void
PaintMark
(
gfxContext
&
aContext
const
gfxMatrix
&
aToMarkedFrameUserSpace
mozilla
:
:
SVGGeometryFrame
*
aMarkedFrame
nsSVGMark
*
aMark
float
aStrokeWidth
imgDrawingParams
&
aImgParams
)
;
SVGBBox
GetMarkBBoxContribution
(
const
Matrix
&
aToBBoxUserspace
uint32_t
aFlags
mozilla
:
:
SVGGeometryFrame
*
aMarkedFrame
const
nsSVGMark
*
aMark
float
aStrokeWidth
)
;
void
DoUpdateStyleOfOwnedAnonBoxes
(
mozilla
:
:
ServoStyleSet
&
aStyleSet
nsStyleChangeList
&
aChangeList
nsChangeHint
aHintForThisFrame
)
override
;
private
:
mozilla
:
:
SVGGeometryFrame
*
mMarkedFrame
;
float
mStrokeWidth
mX
mY
mAutoAngle
;
bool
mIsStart
;
virtual
gfxMatrix
GetCanvasTM
(
)
override
;
class
MOZ_RAII
AutoMarkerReferencer
{
public
:
AutoMarkerReferencer
(
nsSVGMarkerFrame
*
aFrame
mozilla
:
:
SVGGeometryFrame
*
aMarkedFrame
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
;
~
AutoMarkerReferencer
(
)
;
private
:
nsSVGMarkerFrame
*
mFrame
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
void
SetParentCoordCtxProvider
(
mozilla
:
:
dom
:
:
SVGSVGElement
*
aContext
)
;
bool
mInUse
;
bool
mInUse2
;
}
;
class
nsSVGMarkerAnonChildFrame
final
:
public
nsSVGDisplayContainerFrame
{
friend
nsContainerFrame
*
NS_NewSVGMarkerAnonChildFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
;
explicit
nsSVGMarkerAnonChildFrame
(
nsStyleContext
*
aContext
)
:
nsSVGDisplayContainerFrame
(
aContext
mozilla
:
:
LayoutFrameType
:
:
SVGMarkerAnonChild
)
{
}
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsSVGMarkerAnonChildFrame
)
#
ifdef
DEBUG
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
#
endif
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
SVGMarkerAnonChild
"
)
aResult
)
;
}
#
endif
virtual
gfxMatrix
GetCanvasTM
(
)
override
{
return
static_cast
<
nsSVGMarkerFrame
*
>
(
GetParent
(
)
)
-
>
GetCanvasTM
(
)
;
}
}
;
#
endif
