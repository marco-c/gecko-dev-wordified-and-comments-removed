#
ifndef
__NS_SVGFILTERFRAME_H__
#
define
__NS_SVGFILTERFRAME_H__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsFrame
.
h
"
#
include
"
nsQueryFrame
.
h
"
#
include
"
nsSVGContainerFrame
.
h
"
#
include
"
nsSVGUtils
.
h
"
class
nsIAtom
;
class
nsIContent
;
class
nsIFrame
;
class
nsIPresShell
;
class
nsStyleContext
;
class
nsSVGLength2
;
struct
nsRect
;
namespace
mozilla
{
namespace
dom
{
class
SVGFilterElement
;
}
}
class
nsSVGFilterFrame
:
public
nsSVGContainerFrame
{
friend
nsIFrame
*
NS_NewSVGFilterFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
;
protected
:
explicit
nsSVGFilterFrame
(
nsStyleContext
*
aContext
)
:
nsSVGContainerFrame
(
aContext
mozilla
:
:
FrameType
:
:
SVGFilter
)
mLoopFlag
(
false
)
mNoHRefURI
(
false
)
{
AddStateBits
(
NS_FRAME_IS_NONDISPLAY
)
;
}
public
:
NS_DECL_FRAMEARENA_HELPERS
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsRect
&
aDirtyRect
const
nsDisplayListSet
&
aLists
)
override
{
}
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
)
override
;
#
ifdef
DEBUG
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
#
endif
private
:
friend
class
nsSVGFilterInstance
;
nsSVGFilterFrame
*
GetReferencedFilter
(
)
;
uint16_t
GetEnumValue
(
uint32_t
aIndex
nsIContent
*
aDefault
)
;
uint16_t
GetEnumValue
(
uint32_t
aIndex
)
{
return
GetEnumValue
(
aIndex
mContent
)
;
}
const
nsSVGLength2
*
GetLengthValue
(
uint32_t
aIndex
nsIContent
*
aDefault
)
;
const
nsSVGLength2
*
GetLengthValue
(
uint32_t
aIndex
)
{
return
GetLengthValue
(
aIndex
mContent
)
;
}
const
mozilla
:
:
dom
:
:
SVGFilterElement
*
GetFilterContent
(
nsIContent
*
aDefault
)
;
const
mozilla
:
:
dom
:
:
SVGFilterElement
*
GetFilterContent
(
)
{
return
GetFilterContent
(
mContent
)
;
}
bool
mLoopFlag
;
bool
mNoHRefURI
;
}
;
#
endif
