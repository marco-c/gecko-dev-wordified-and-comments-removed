#
include
"
SVGImageContext
.
h
"
#
include
"
gfxUtils
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsStyleStruct
.
h
"
namespace
mozilla
{
void
SVGImageContext
:
:
MaybeStoreContextPaint
(
Maybe
<
SVGImageContext
>
&
aContext
nsIFrame
*
aFromFrame
imgIContainer
*
aImgContainer
)
{
return
MaybeStoreContextPaint
(
aContext
*
aFromFrame
-
>
PresContext
(
)
*
aFromFrame
-
>
Style
(
)
aImgContainer
)
;
}
void
SVGImageContext
:
:
MaybeStoreContextPaint
(
Maybe
<
SVGImageContext
>
&
aContext
const
nsPresContext
&
aPresContext
const
ComputedStyle
&
aStyle
imgIContainer
*
aImgContainer
)
{
if
(
aImgContainer
-
>
GetType
(
)
!
=
imgIContainer
:
:
TYPE_VECTOR
)
{
return
;
}
if
(
aPresContext
.
Document
(
)
-
>
IsDocumentURISchemeChrome
(
)
)
{
if
(
!
aContext
)
{
aContext
.
emplace
(
)
;
}
auto
scheme
=
LookAndFeel
:
:
ColorSchemeForStyle
(
*
aPresContext
.
Document
(
)
aStyle
.
StyleUI
(
)
-
>
mColorScheme
.
bits
)
;
aContext
-
>
SetColorScheme
(
Some
(
scheme
)
)
;
}
const
nsStyleSVG
*
style
=
aStyle
.
StyleSVG
(
)
;
if
(
!
style
-
>
ExposesContextProperties
(
)
)
{
return
;
}
bool
haveContextPaint
=
false
;
auto
contextPaint
=
MakeRefPtr
<
SVGEmbeddingContextPaint
>
(
)
;
if
(
(
style
-
>
mMozContextProperties
.
bits
&
StyleContextPropertyBits
:
:
FILL
)
&
&
style
-
>
mFill
.
kind
.
IsColor
(
)
)
{
haveContextPaint
=
true
;
contextPaint
-
>
SetFill
(
style
-
>
mFill
.
kind
.
AsColor
(
)
.
CalcColor
(
aStyle
)
)
;
}
if
(
(
style
-
>
mMozContextProperties
.
bits
&
StyleContextPropertyBits
:
:
STROKE
)
&
&
style
-
>
mStroke
.
kind
.
IsColor
(
)
)
{
haveContextPaint
=
true
;
contextPaint
-
>
SetStroke
(
style
-
>
mStroke
.
kind
.
AsColor
(
)
.
CalcColor
(
aStyle
)
)
;
}
if
(
style
-
>
mMozContextProperties
.
bits
&
StyleContextPropertyBits
:
:
FILL_OPACITY
)
{
haveContextPaint
=
true
;
contextPaint
-
>
SetFillOpacity
(
style
-
>
mFillOpacity
.
IsOpacity
(
)
?
style
-
>
mFillOpacity
.
AsOpacity
(
)
:
1
.
0f
)
;
}
if
(
style
-
>
mMozContextProperties
.
bits
&
StyleContextPropertyBits
:
:
STROKE_OPACITY
)
{
haveContextPaint
=
true
;
contextPaint
-
>
SetStrokeOpacity
(
style
-
>
mStrokeOpacity
.
IsOpacity
(
)
?
style
-
>
mStrokeOpacity
.
AsOpacity
(
)
:
1
.
0f
)
;
}
if
(
haveContextPaint
)
{
if
(
!
aContext
)
{
aContext
.
emplace
(
)
;
}
aContext
-
>
mContextPaint
=
std
:
:
move
(
contextPaint
)
;
}
}
}
