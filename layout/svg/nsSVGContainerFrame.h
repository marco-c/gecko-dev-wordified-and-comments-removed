#
ifndef
NS_SVGCONTAINERFRAME_H
#
define
NS_SVGCONTAINERFRAME_H
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsFrame
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsSVGDisplayableFrame
.
h
"
#
include
"
nsQueryFrame
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsSVGUtils
.
h
"
class
gfxContext
;
class
nsFrameList
;
class
nsIContent
;
struct
nsRect
;
namespace
mozilla
{
class
PresShell
;
}
class
nsSVGContainerFrame
:
public
nsContainerFrame
{
friend
nsIFrame
*
NS_NewSVGContainerFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
protected
:
nsSVGContainerFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
ClassID
aID
)
:
nsContainerFrame
(
aStyle
aPresContext
aID
)
{
AddStateBits
(
NS_FRAME_SVG_LAYOUT
)
;
}
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsSVGContainerFrame
)
virtual
gfxMatrix
GetCanvasTM
(
)
{
return
gfxMatrix
(
)
;
}
virtual
bool
HasChildrenOnlyTransform
(
Matrix
*
aTransform
)
const
{
return
false
;
}
virtual
void
AppendFrames
(
ChildListID
aListID
nsFrameList
&
aFrameList
)
override
;
virtual
void
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
const
nsLineList
:
:
iterator
*
aPrevFrameLine
nsFrameList
&
aFrameList
)
override
;
virtual
void
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
override
;
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
if
(
aFlags
&
eSupportsContainLayoutAndPaint
)
{
return
false
;
}
return
nsContainerFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eSVG
|
nsIFrame
:
:
eSVGContainer
)
)
;
}
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
{
}
virtual
bool
ComputeCustomOverflow
(
nsOverflowAreas
&
aOverflowAreas
)
override
;
protected
:
static
void
ReflowSVGNonDisplayText
(
nsIFrame
*
aContainer
)
;
}
;
class
nsSVGDisplayContainerFrame
:
public
nsSVGContainerFrame
public
nsSVGDisplayableFrame
{
protected
:
nsSVGDisplayContainerFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
nsIFrame
:
:
ClassID
aID
)
:
nsSVGContainerFrame
(
aStyle
aPresContext
aID
)
{
AddStateBits
(
NS_FRAME_MAY_BE_TRANSFORMED
)
;
}
public
:
NS_DECL_QUERYFRAME
NS_DECL_QUERYFRAME_TARGET
(
nsSVGDisplayContainerFrame
)
NS_DECL_ABSTRACT_FRAME
(
nsSVGDisplayContainerFrame
)
virtual
void
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
const
nsLineList
:
:
iterator
*
aPrevFrameLine
nsFrameList
&
aFrameList
)
override
;
virtual
void
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
override
;
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
virtual
bool
IsSVGTransformed
(
Matrix
*
aOwnTransform
=
nullptr
Matrix
*
aFromParentTransform
=
nullptr
)
const
override
;
virtual
void
PaintSVG
(
gfxContext
&
aContext
const
gfxMatrix
&
aTransform
imgDrawingParams
&
aImgParams
const
nsIntRect
*
aDirtyRect
=
nullptr
)
override
;
virtual
nsIFrame
*
GetFrameForPoint
(
const
gfxPoint
&
aPoint
)
override
;
virtual
void
ReflowSVG
(
)
override
;
virtual
void
NotifySVGChanged
(
uint32_t
aFlags
)
override
;
virtual
SVGBBox
GetBBoxContribution
(
const
Matrix
&
aToBBoxUserspace
uint32_t
aFlags
)
override
;
virtual
bool
IsDisplayContainer
(
)
override
{
return
true
;
}
virtual
gfxMatrix
GetCanvasTM
(
)
override
;
protected
:
nsAutoPtr
<
gfxMatrix
>
mCanvasTM
;
}
;
#
endif
