#
ifndef
NSSVGEFFECTS_H_
#
define
NSSVGEFFECTS_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
IDTracker
.
h
"
#
include
"
FrameProperties
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIMutationObserver
.
h
"
#
include
"
nsISupportsBase
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsIReferrerInfo
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
#
include
"
nsSVGUtils
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
class
nsAtom
;
class
nsIURI
;
class
nsSVGClipPathFrame
;
class
nsSVGPaintServerFrame
;
namespace
mozilla
{
class
SVGFilterFrame
;
class
SVGMarkerFrame
;
class
SVGMaskFrame
;
namespace
dom
{
class
CanvasRenderingContext2D
;
class
SVGGeometryElement
;
}
}
namespace
mozilla
{
class
URLAndReferrerInfo
{
public
:
URLAndReferrerInfo
(
nsIURI
*
aURI
nsIReferrerInfo
*
aReferrerInfo
)
:
mURI
(
aURI
)
mReferrerInfo
(
aReferrerInfo
)
{
MOZ_ASSERT
(
aURI
)
;
}
URLAndReferrerInfo
(
nsIURI
*
aURI
const
URLExtraData
&
aExtraData
)
:
mURI
(
aURI
)
mReferrerInfo
(
aExtraData
.
ReferrerInfo
(
)
)
{
MOZ_ASSERT
(
aURI
)
;
}
NS_INLINE_DECL_REFCOUNTING
(
URLAndReferrerInfo
)
nsIURI
*
GetURI
(
)
const
{
return
mURI
;
}
nsIReferrerInfo
*
GetReferrerInfo
(
)
const
{
return
mReferrerInfo
;
}
bool
operator
=
=
(
const
URLAndReferrerInfo
&
aRHS
)
const
;
private
:
~
URLAndReferrerInfo
(
)
=
default
;
nsCOMPtr
<
nsIURI
>
mURI
;
nsCOMPtr
<
nsIReferrerInfo
>
mReferrerInfo
;
}
;
class
SVGRenderingObserver
:
public
nsStubMutationObserver
{
protected
:
virtual
~
SVGRenderingObserver
(
)
=
default
;
public
:
typedef
mozilla
:
:
dom
:
:
Element
Element
;
SVGRenderingObserver
(
)
:
mInObserverSet
(
false
)
{
}
NS_DECL_NSIMUTATIONOBSERVER_ATTRIBUTECHANGED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
void
OnNonDOMMutationRenderingChange
(
)
;
void
NotifyEvictedFromRenderingObserverSet
(
)
;
nsIFrame
*
GetAndObserveReferencedFrame
(
)
;
nsIFrame
*
GetAndObserveReferencedFrame
(
mozilla
:
:
LayoutFrameType
aFrameType
bool
*
aOK
)
;
Element
*
GetAndObserveReferencedElement
(
)
;
virtual
bool
ObservesReflow
(
)
{
return
false
;
}
protected
:
void
StartObserving
(
)
;
void
StopObserving
(
)
;
virtual
void
OnRenderingChange
(
)
=
0
;
virtual
Element
*
GetReferencedElementWithoutObserving
(
)
=
0
;
#
ifdef
DEBUG
void
DebugObserverSet
(
)
;
#
endif
bool
mInObserverSet
;
}
;
class
SVGObserverUtils
{
public
:
typedef
mozilla
:
:
dom
:
:
CanvasRenderingContext2D
CanvasRenderingContext2D
;
typedef
mozilla
:
:
dom
:
:
Element
Element
;
typedef
dom
:
:
SVGGeometryElement
SVGGeometryElement
;
using
HrefToTemplateCallback
=
const
std
:
:
function
<
void
(
nsAString
&
)
>
&
;
static
void
InitiateResourceDocLoads
(
nsIFrame
*
aFrame
)
;
static
void
UpdateEffects
(
nsIFrame
*
aFrame
)
;
static
void
AddRenderingObserver
(
Element
*
aElement
SVGRenderingObserver
*
aObserver
)
;
static
void
RemoveRenderingObserver
(
Element
*
aElement
SVGRenderingObserver
*
aObserver
)
;
static
void
RemoveAllRenderingObservers
(
Element
*
aElement
)
;
static
void
InvalidateRenderingObservers
(
nsIFrame
*
aFrame
)
;
enum
{
INVALIDATE_REFLOW
=
1
}
;
enum
ReferenceState
{
eHasNoRefs
eHasRefsAllValid
eHasRefsSomeInvalid
}
;
static
void
InvalidateDirectRenderingObservers
(
Element
*
aElement
uint32_t
aFlags
=
0
)
;
static
void
InvalidateDirectRenderingObservers
(
nsIFrame
*
aFrame
uint32_t
aFlags
=
0
)
;
static
nsSVGPaintServerFrame
*
GetAndObservePaintServer
(
nsIFrame
*
aPaintedFrame
mozilla
:
:
StyleSVGPaint
nsStyleSVG
:
:
*
aPaint
)
;
static
bool
GetAndObserveMarkers
(
nsIFrame
*
aMarkedFrame
SVGMarkerFrame
*
(
*
aFrames
)
[
3
]
)
;
static
ReferenceState
GetAndObserveFilters
(
nsIFrame
*
aFilteredFrame
nsTArray
<
SVGFilterFrame
*
>
*
aFilterFrames
)
;
static
ReferenceState
GetFiltersIfObserving
(
nsIFrame
*
aFilteredFrame
nsTArray
<
SVGFilterFrame
*
>
*
aFilterFrames
)
;
static
already_AddRefed
<
nsISupports
>
ObserveFiltersForCanvasContext
(
CanvasRenderingContext2D
*
aContext
Element
*
aCanvasElement
Span
<
const
StyleFilter
>
aFilters
)
;
static
void
DetachFromCanvasContext
(
nsISupports
*
aAutoObserver
)
;
static
ReferenceState
GetAndObserveClipPath
(
nsIFrame
*
aClippedFrame
nsSVGClipPathFrame
*
*
aClipPathFrame
)
;
static
ReferenceState
GetAndObserveMasks
(
nsIFrame
*
aMaskedFrame
nsTArray
<
SVGMaskFrame
*
>
*
aMaskFrames
)
;
static
SVGGeometryElement
*
GetAndObserveTextPathsPath
(
nsIFrame
*
aTextPathFrame
)
;
static
void
RemoveTextPathObserver
(
nsIFrame
*
aTextPathFrame
)
;
static
nsIFrame
*
GetAndObserveTemplate
(
nsIFrame
*
aFrame
HrefToTemplateCallback
aGetHref
)
;
static
void
RemoveTemplateObserver
(
nsIFrame
*
aFrame
)
;
static
Element
*
GetAndObserveBackgroundImage
(
nsIFrame
*
aFrame
const
nsAtom
*
aHref
)
;
static
Element
*
GetAndObserveBackgroundClip
(
nsIFrame
*
aFrame
)
;
static
already_AddRefed
<
URLAndReferrerInfo
>
GetFilterURI
(
nsIFrame
*
aFrame
const
StyleFilter
&
aFilter
)
;
static
already_AddRefed
<
nsIURI
>
GetBaseURLForLocalRef
(
nsIContent
*
aContent
nsIURI
*
aDocURI
)
;
}
;
}
#
endif
