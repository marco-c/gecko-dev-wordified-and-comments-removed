#
ifndef
NSSVGEFFECTS_H_
#
define
NSSVGEFFECTS_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
IDTracker
.
h
"
#
include
"
FrameProperties
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIMutationObserver
.
h
"
#
include
"
nsInterfaceHashtable
.
h
"
#
include
"
nsISupportsBase
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
#
include
"
nsSVGUtils
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsURIHashKey
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
class
nsAtom
;
class
nsIPresShell
;
class
nsIURI
;
class
nsSVGClipPathFrame
;
class
nsSVGPaintServerFrame
;
class
nsSVGFilterFrame
;
class
nsSVGMaskFrame
;
namespace
mozilla
{
class
SVGFilterObserverList
;
}
namespace
mozilla
{
class
URLAndReferrerInfo
{
public
:
URLAndReferrerInfo
(
nsIURI
*
aURI
nsIURI
*
aReferrer
mozilla
:
:
net
:
:
ReferrerPolicy
aReferrerPolicy
)
:
mURI
(
aURI
)
mReferrer
(
aReferrer
)
mReferrerPolicy
(
aReferrerPolicy
)
{
MOZ_ASSERT
(
aURI
)
;
}
NS_INLINE_DECL_REFCOUNTING
(
URLAndReferrerInfo
)
nsIURI
*
GetURI
(
)
{
return
mURI
;
}
nsIURI
*
GetReferrer
(
)
{
return
mReferrer
;
}
mozilla
:
:
net
:
:
ReferrerPolicy
GetReferrerPolicy
(
)
{
return
mReferrerPolicy
;
}
private
:
~
URLAndReferrerInfo
(
)
=
default
;
nsCOMPtr
<
nsIURI
>
mURI
;
nsCOMPtr
<
nsIURI
>
mReferrer
;
mozilla
:
:
net
:
:
ReferrerPolicy
mReferrerPolicy
;
}
;
class
SVGRenderingObserver
:
public
nsStubMutationObserver
{
protected
:
virtual
~
SVGRenderingObserver
(
)
=
default
;
public
:
typedef
mozilla
:
:
dom
:
:
Element
Element
;
SVGRenderingObserver
(
)
:
mInObserverList
(
false
)
{
}
NS_DECL_NSIMUTATIONOBSERVER_ATTRIBUTECHANGED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
void
OnNonDOMMutationRenderingChange
(
)
;
void
NotifyEvictedFromRenderingObserverList
(
)
;
bool
IsInObserverList
(
)
const
{
return
mInObserverList
;
}
nsIFrame
*
GetReferencedFrame
(
)
;
nsIFrame
*
GetReferencedFrame
(
mozilla
:
:
LayoutFrameType
aFrameType
bool
*
aOK
)
;
Element
*
GetReferencedElement
(
)
;
virtual
bool
ObservesReflow
(
)
{
return
true
;
}
protected
:
void
StartObserving
(
)
;
void
StopObserving
(
)
;
virtual
void
OnRenderingChange
(
)
=
0
;
virtual
Element
*
GetTarget
(
)
=
0
;
bool
mInObserverList
;
}
;
class
SVGIDRenderingObserver
:
public
SVGRenderingObserver
{
public
:
typedef
mozilla
:
:
dom
:
:
Element
Element
;
typedef
mozilla
:
:
dom
:
:
IDTracker
IDTracker
;
SVGIDRenderingObserver
(
URLAndReferrerInfo
*
aURI
nsIContent
*
aObservingContent
bool
aReferenceImage
)
;
virtual
~
SVGIDRenderingObserver
(
)
;
protected
:
Element
*
GetTarget
(
)
override
{
return
mObservedElementTracker
.
get
(
)
;
}
void
OnRenderingChange
(
)
override
;
class
ElementTracker
final
:
public
IDTracker
{
public
:
explicit
ElementTracker
(
SVGIDRenderingObserver
*
aOwningObserver
)
:
mOwningObserver
(
aOwningObserver
)
{
}
protected
:
virtual
void
ElementChanged
(
Element
*
aFrom
Element
*
aTo
)
override
{
mOwningObserver
-
>
StopObserving
(
)
;
IDTracker
:
:
ElementChanged
(
aFrom
aTo
)
;
mOwningObserver
-
>
StartObserving
(
)
;
mOwningObserver
-
>
OnRenderingChange
(
)
;
}
virtual
bool
IsPersistent
(
)
override
{
return
true
;
}
private
:
SVGIDRenderingObserver
*
mOwningObserver
;
}
;
ElementTracker
mObservedElementTracker
;
}
;
struct
nsSVGFrameReferenceFromProperty
{
explicit
nsSVGFrameReferenceFromProperty
(
nsIFrame
*
aFrame
)
:
mFrame
(
aFrame
)
mFramePresShell
(
aFrame
-
>
PresShell
(
)
)
{
}
void
Detach
(
)
;
nsIFrame
*
Get
(
)
;
private
:
nsIFrame
*
mFrame
;
nsIPresShell
*
mFramePresShell
;
}
;
class
nsSVGRenderingObserverProperty
:
public
SVGIDRenderingObserver
{
public
:
NS_DECL_ISUPPORTS
nsSVGRenderingObserverProperty
(
URLAndReferrerInfo
*
aURI
nsIFrame
*
aFrame
bool
aReferenceImage
)
:
SVGIDRenderingObserver
(
aURI
aFrame
-
>
GetContent
(
)
aReferenceImage
)
mFrameReference
(
aFrame
)
{
}
protected
:
virtual
~
nsSVGRenderingObserverProperty
(
)
{
}
virtual
void
OnRenderingChange
(
)
override
;
nsSVGFrameReferenceFromProperty
mFrameReference
;
}
;
#
define
NS_SVGFILTEROBSERVER_IID
\
{
0x9744ee20
0x1bcf
0x4c62
\
{
0x86
0x7d
0xd3
0x7a
0x91
0x60
0x3e
0xef
}
}
class
SVGFilterObserver
final
:
public
SVGIDRenderingObserver
{
public
:
SVGFilterObserver
(
URLAndReferrerInfo
*
aURI
nsIContent
*
aObservingContent
SVGFilterObserverList
*
aFilterChainObserver
)
:
SVGIDRenderingObserver
(
aURI
aObservingContent
false
)
mFilterObserverList
(
aFilterChainObserver
)
{
}
bool
ReferencesValidResource
(
)
{
return
GetFilterFrame
(
)
;
}
void
DetachFromChainObserver
(
)
{
mFilterObserverList
=
nullptr
;
}
nsSVGFilterFrame
*
GetFilterFrame
(
)
;
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_SVGFILTEROBSERVER_IID
)
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
SVGFilterObserver
)
void
Invalidate
(
)
{
OnRenderingChange
(
)
;
}
;
protected
:
virtual
~
SVGFilterObserver
(
)
{
}
virtual
void
OnRenderingChange
(
)
override
;
private
:
SVGFilterObserverList
*
mFilterObserverList
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
SVGFilterObserver
NS_SVGFILTEROBSERVER_IID
)
class
SVGFilterObserverList
:
public
nsISupports
{
public
:
SVGFilterObserverList
(
const
nsTArray
<
nsStyleFilter
>
&
aFilters
nsIContent
*
aFilteredElement
nsIFrame
*
aFiltedFrame
=
nullptr
)
;
bool
ReferencesValidResources
(
)
;
bool
IsInObserverLists
(
)
const
;
void
Invalidate
(
)
{
OnRenderingChange
(
)
;
}
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
SVGFilterObserverList
)
protected
:
virtual
~
SVGFilterObserverList
(
)
;
virtual
void
OnRenderingChange
(
)
=
0
;
private
:
void
DetachObservers
(
)
{
for
(
uint32_t
i
=
0
;
i
<
mObservers
.
Length
(
)
;
i
+
+
)
{
mObservers
[
i
]
-
>
DetachFromChainObserver
(
)
;
}
}
nsTArray
<
RefPtr
<
SVGFilterObserver
>
>
mObservers
;
}
;
class
SVGFilterObserverListForCSSProp
final
:
public
SVGFilterObserverList
{
public
:
SVGFilterObserverListForCSSProp
(
const
nsTArray
<
nsStyleFilter
>
&
aFilters
nsIFrame
*
aFilteredFrame
)
:
SVGFilterObserverList
(
aFilters
aFilteredFrame
-
>
GetContent
(
)
aFilteredFrame
)
mFrameReference
(
aFilteredFrame
)
{
}
void
DetachFromFrame
(
)
{
mFrameReference
.
Detach
(
)
;
}
protected
:
virtual
void
OnRenderingChange
(
)
override
;
nsSVGFrameReferenceFromProperty
mFrameReference
;
}
;
class
SVGMarkerObserver
final
:
public
nsSVGRenderingObserverProperty
{
public
:
SVGMarkerObserver
(
URLAndReferrerInfo
*
aURI
nsIFrame
*
aFrame
bool
aReferenceImage
)
:
nsSVGRenderingObserverProperty
(
aURI
aFrame
aReferenceImage
)
{
}
protected
:
virtual
void
OnRenderingChange
(
)
override
;
}
;
class
SVGTextPathObserver
final
:
public
nsSVGRenderingObserverProperty
{
public
:
SVGTextPathObserver
(
URLAndReferrerInfo
*
aURI
nsIFrame
*
aFrame
bool
aReferenceImage
)
:
nsSVGRenderingObserverProperty
(
aURI
aFrame
aReferenceImage
)
mValid
(
true
)
{
}
virtual
bool
ObservesReflow
(
)
override
{
return
false
;
}
protected
:
virtual
void
OnRenderingChange
(
)
override
;
private
:
bool
TargetIsValid
(
)
;
bool
mValid
;
}
;
class
nsSVGPaintingProperty
final
:
public
nsSVGRenderingObserverProperty
{
public
:
nsSVGPaintingProperty
(
URLAndReferrerInfo
*
aURI
nsIFrame
*
aFrame
bool
aReferenceImage
)
:
nsSVGRenderingObserverProperty
(
aURI
aFrame
aReferenceImage
)
{
}
protected
:
virtual
void
OnRenderingChange
(
)
override
;
}
;
class
SVGMaskObserverList
final
:
public
nsISupports
{
public
:
explicit
SVGMaskObserverList
(
nsIFrame
*
aFrame
)
;
NS_DECL_ISUPPORTS
const
nsTArray
<
RefPtr
<
nsSVGPaintingProperty
>
>
&
GetObservers
(
)
const
{
return
mProperties
;
}
void
ResolveImage
(
uint32_t
aIndex
)
;
private
:
virtual
~
SVGMaskObserverList
(
)
{
}
nsTArray
<
RefPtr
<
nsSVGPaintingProperty
>
>
mProperties
;
nsIFrame
*
mFrame
;
}
;
class
SVGRenderingObserverList
{
public
:
SVGRenderingObserverList
(
)
:
mObservers
(
4
)
{
MOZ_COUNT_CTOR
(
SVGRenderingObserverList
)
;
}
~
SVGRenderingObserverList
(
)
{
InvalidateAll
(
)
;
MOZ_COUNT_DTOR
(
SVGRenderingObserverList
)
;
}
void
Add
(
SVGRenderingObserver
*
aObserver
)
{
mObservers
.
PutEntry
(
aObserver
)
;
}
void
Remove
(
SVGRenderingObserver
*
aObserver
)
{
mObservers
.
RemoveEntry
(
aObserver
)
;
}
#
ifdef
DEBUG
bool
Contains
(
SVGRenderingObserver
*
aObserver
)
{
return
(
mObservers
.
GetEntry
(
aObserver
)
!
=
nullptr
)
;
}
#
endif
bool
IsEmpty
(
)
{
return
mObservers
.
Count
(
)
=
=
0
;
}
void
InvalidateAll
(
)
;
void
InvalidateAllForReflow
(
)
;
void
RemoveAll
(
)
;
private
:
nsTHashtable
<
nsPtrHashKey
<
SVGRenderingObserver
>
>
mObservers
;
}
;
class
SVGObserverUtils
{
public
:
typedef
mozilla
:
:
dom
:
:
Element
Element
;
typedef
nsInterfaceHashtable
<
nsRefPtrHashKey
<
URLAndReferrerInfo
>
nsIMutationObserver
>
URIObserverHashtable
;
using
PaintingPropertyDescriptor
=
const
mozilla
:
:
FramePropertyDescriptor
<
nsSVGPaintingProperty
>
*
;
using
URIObserverHashtablePropertyDescriptor
=
const
mozilla
:
:
FramePropertyDescriptor
<
URIObserverHashtable
>
*
;
static
void
DestroyFilterProperty
(
SVGFilterObserverListForCSSProp
*
aProp
)
{
aProp
-
>
DetachFromFrame
(
)
;
aProp
-
>
Release
(
)
;
}
NS_DECLARE_FRAME_PROPERTY_WITH_DTOR
(
FilterProperty
SVGFilterObserverListForCSSProp
DestroyFilterProperty
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
MaskProperty
SVGMaskObserverList
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
ClipPathProperty
nsSVGPaintingProperty
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
MarkerBeginProperty
SVGMarkerObserver
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
MarkerMiddleProperty
SVGMarkerObserver
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
MarkerEndProperty
SVGMarkerObserver
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
FillProperty
nsSVGPaintingProperty
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
StrokeProperty
nsSVGPaintingProperty
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
HrefAsTextPathProperty
SVGTextPathObserver
)
NS_DECLARE_FRAME_PROPERTY_RELEASABLE
(
HrefAsPaintingProperty
nsSVGPaintingProperty
)
NS_DECLARE_FRAME_PROPERTY_DELETABLE
(
BackgroundImageProperty
URIObserverHashtable
)
static
nsSVGPaintServerFrame
*
GetPaintServer
(
nsIFrame
*
aTargetFrame
nsStyleSVGPaint
nsStyleSVG
:
:
*
aPaint
PaintingPropertyDescriptor
aProperty
)
;
struct
EffectProperties
{
SVGFilterObserverListForCSSProp
*
mFilterObservers
;
SVGMaskObserverList
*
mMaskObservers
;
nsSVGPaintingProperty
*
mClipPath
;
nsSVGClipPathFrame
*
GetClipPathFrame
(
)
;
nsTArray
<
nsSVGMaskFrame
*
>
GetMaskFrames
(
)
;
bool
HasNoOrValidEffects
(
)
;
bool
HasInvalidEffects
(
)
{
return
!
HasNoOrValidEffects
(
)
;
}
bool
HasNoOrValidClipPath
(
)
;
bool
HasInvalidClipPath
(
)
{
return
!
HasNoOrValidClipPath
(
)
;
}
bool
HasNoOrValidMask
(
)
;
bool
HasInvalidMask
(
)
{
return
!
HasNoOrValidMask
(
)
;
}
bool
HasValidFilter
(
)
{
return
mFilterObservers
&
&
mFilterObservers
-
>
ReferencesValidResources
(
)
;
}
bool
HasNoOrValidFilter
(
)
{
return
!
mFilterObservers
|
|
mFilterObservers
-
>
ReferencesValidResources
(
)
;
}
bool
HasInvalidFilter
(
)
{
return
!
HasNoOrValidFilter
(
)
;
}
}
;
static
EffectProperties
GetEffectProperties
(
nsIFrame
*
aFrame
)
;
static
void
UpdateEffects
(
nsIFrame
*
aFrame
)
;
static
SVGFilterObserverListForCSSProp
*
GetFilterObserverList
(
nsIFrame
*
aFrame
)
;
static
void
AddRenderingObserver
(
Element
*
aElement
SVGRenderingObserver
*
aObserver
)
;
static
void
RemoveRenderingObserver
(
Element
*
aElement
SVGRenderingObserver
*
aObserver
)
;
static
void
RemoveAllRenderingObservers
(
Element
*
aElement
)
;
static
void
InvalidateRenderingObservers
(
nsIFrame
*
aFrame
)
;
enum
{
INVALIDATE_REFLOW
=
1
}
;
static
void
InvalidateDirectRenderingObservers
(
Element
*
aElement
uint32_t
aFlags
=
0
)
;
static
void
InvalidateDirectRenderingObservers
(
nsIFrame
*
aFrame
uint32_t
aFlags
=
0
)
;
static
SVGMarkerObserver
*
GetMarkerProperty
(
URLAndReferrerInfo
*
aURI
nsIFrame
*
aFrame
const
mozilla
:
:
FramePropertyDescriptor
<
SVGMarkerObserver
>
*
aProperty
)
;
static
SVGTextPathObserver
*
GetTextPathProperty
(
URLAndReferrerInfo
*
aURI
nsIFrame
*
aFrame
const
mozilla
:
:
FramePropertyDescriptor
<
SVGTextPathObserver
>
*
aProperty
)
;
static
nsSVGPaintingProperty
*
GetPaintingProperty
(
URLAndReferrerInfo
*
aURI
nsIFrame
*
aFrame
const
mozilla
:
:
FramePropertyDescriptor
<
nsSVGPaintingProperty
>
*
aProperty
)
;
static
nsSVGPaintingProperty
*
GetPaintingPropertyForURI
(
URLAndReferrerInfo
*
aURI
nsIFrame
*
aFrame
URIObserverHashtablePropertyDescriptor
aProp
)
;
static
already_AddRefed
<
URLAndReferrerInfo
>
GetMarkerURI
(
nsIFrame
*
aFrame
RefPtr
<
mozilla
:
:
css
:
:
URLValue
>
nsStyleSVG
:
:
*
aMarker
)
;
static
already_AddRefed
<
URLAndReferrerInfo
>
GetClipPathURI
(
nsIFrame
*
aFrame
)
;
static
already_AddRefed
<
URLAndReferrerInfo
>
GetFilterURI
(
nsIFrame
*
aFrame
uint32_t
aIndex
)
;
static
already_AddRefed
<
URLAndReferrerInfo
>
GetFilterURI
(
nsIFrame
*
aFrame
const
nsStyleFilter
&
aFilter
)
;
static
already_AddRefed
<
URLAndReferrerInfo
>
GetPaintURI
(
nsIFrame
*
aFrame
nsStyleSVGPaint
nsStyleSVG
:
:
*
aPaint
)
;
static
already_AddRefed
<
URLAndReferrerInfo
>
GetMaskURI
(
nsIFrame
*
aFrame
uint32_t
aIndex
)
;
static
already_AddRefed
<
nsIURI
>
GetBaseURLForLocalRef
(
nsIContent
*
aContent
nsIURI
*
aDocURI
)
;
}
;
}
#
endif
