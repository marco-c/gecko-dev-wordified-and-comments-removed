#
ifndef
MOZILLA_SVGCONTEXTPAINT_H_
#
define
MOZILLA_SVGCONTEXTPAINT_H_
#
include
"
DrawMode
.
h
"
#
include
"
gfxMatrix
.
h
"
#
include
"
gfxPattern
.
h
"
#
include
"
gfxTypes
.
h
"
#
include
"
gfxUtils
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
DrawResult
.
h
"
class
gfxContext
;
class
nsIDocument
;
class
nsSVGPaintServerFrame
;
namespace
mozilla
{
class
SVGContextPaint
:
public
RefCounted
<
SVGContextPaint
>
{
protected
:
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
SVGContextPaint
(
)
:
mDashOffset
(
0
.
0f
)
mStrokeWidth
(
0
.
0f
)
{
}
public
:
typedef
image
:
:
DrawResult
DrawResult
;
MOZ_DECLARE_REFCOUNTED_TYPENAME
(
SVGContextPaint
)
virtual
~
SVGContextPaint
(
)
{
}
virtual
mozilla
:
:
Pair
<
DrawResult
RefPtr
<
gfxPattern
>
>
GetFillPattern
(
const
DrawTarget
*
aDrawTarget
float
aOpacity
const
gfxMatrix
&
aCTM
uint32_t
aFlags
=
0
)
=
0
;
virtual
mozilla
:
:
Pair
<
DrawResult
RefPtr
<
gfxPattern
>
>
GetStrokePattern
(
const
DrawTarget
*
aDrawTarget
float
aOpacity
const
gfxMatrix
&
aCTM
uint32_t
aFlags
=
0
)
=
0
;
virtual
float
GetFillOpacity
(
)
const
=
0
;
virtual
float
GetStrokeOpacity
(
)
const
=
0
;
mozilla
:
:
Pair
<
DrawResult
RefPtr
<
gfxPattern
>
>
GetFillPattern
(
const
DrawTarget
*
aDrawTarget
const
gfxMatrix
&
aCTM
uint32_t
aFlags
=
0
)
{
return
GetFillPattern
(
aDrawTarget
GetFillOpacity
(
)
aCTM
aFlags
)
;
}
mozilla
:
:
Pair
<
DrawResult
RefPtr
<
gfxPattern
>
>
GetStrokePattern
(
const
DrawTarget
*
aDrawTarget
const
gfxMatrix
&
aCTM
uint32_t
aFlags
)
{
return
GetStrokePattern
(
aDrawTarget
GetStrokeOpacity
(
)
aCTM
aFlags
)
;
}
static
SVGContextPaint
*
GetContextPaint
(
nsIContent
*
aContent
)
;
void
InitStrokeGeometry
(
gfxContext
*
aContext
float
devUnitsPerSVGUnit
)
;
const
FallibleTArray
<
gfxFloat
>
&
GetStrokeDashArray
(
)
const
{
return
mDashes
;
}
gfxFloat
GetStrokeDashOffset
(
)
const
{
return
mDashOffset
;
}
gfxFloat
GetStrokeWidth
(
)
const
{
return
mStrokeWidth
;
}
virtual
uint32_t
Hash
(
)
const
{
MOZ_ASSERT_UNREACHABLE
(
"
Only
VectorImage
needs
to
hash
and
that
should
"
"
only
be
operating
on
our
SVGEmbeddingContextPaint
"
"
subclass
"
)
;
return
0
;
}
private
:
FallibleTArray
<
gfxFloat
>
mDashes
;
MOZ_INIT_OUTSIDE_CTOR
gfxFloat
mDashOffset
;
MOZ_INIT_OUTSIDE_CTOR
gfxFloat
mStrokeWidth
;
}
;
class
MOZ_RAII
AutoSetRestoreSVGContextPaint
{
public
:
AutoSetRestoreSVGContextPaint
(
const
SVGContextPaint
*
aContextPaint
nsIDocument
*
aSVGDocument
)
;
~
AutoSetRestoreSVGContextPaint
(
)
;
private
:
nsIDocument
*
mSVGDocument
;
void
*
mOuterContextPaint
;
}
;
struct
SVGContextPaintImpl
:
public
SVGContextPaint
{
protected
:
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
public
:
typedef
mozilla
:
:
image
:
:
DrawResult
DrawResult
;
mozilla
:
:
Pair
<
DrawResult
DrawMode
>
Init
(
const
DrawTarget
*
aDrawTarget
const
gfxMatrix
&
aContextMatrix
nsIFrame
*
aFrame
SVGContextPaint
*
aOuterContextPaint
)
;
mozilla
:
:
Pair
<
DrawResult
RefPtr
<
gfxPattern
>
>
GetFillPattern
(
const
DrawTarget
*
aDrawTarget
float
aOpacity
const
gfxMatrix
&
aCTM
uint32_t
aFlags
)
override
;
mozilla
:
:
Pair
<
DrawResult
RefPtr
<
gfxPattern
>
>
GetStrokePattern
(
const
DrawTarget
*
aDrawTarget
float
aOpacity
const
gfxMatrix
&
aCTM
uint32_t
aFlags
)
override
;
void
SetFillOpacity
(
float
aOpacity
)
{
mFillOpacity
=
aOpacity
;
}
float
GetFillOpacity
(
)
const
override
{
return
mFillOpacity
;
}
void
SetStrokeOpacity
(
float
aOpacity
)
{
mStrokeOpacity
=
aOpacity
;
}
float
GetStrokeOpacity
(
)
const
override
{
return
mStrokeOpacity
;
}
struct
Paint
{
Paint
(
)
:
mPaintType
(
eStyleSVGPaintType_None
)
{
}
void
SetPaintServer
(
nsIFrame
*
aFrame
const
gfxMatrix
&
aContextMatrix
nsSVGPaintServerFrame
*
aPaintServerFrame
)
{
mPaintType
=
eStyleSVGPaintType_Server
;
mPaintDefinition
.
mPaintServerFrame
=
aPaintServerFrame
;
mFrame
=
aFrame
;
mContextMatrix
=
aContextMatrix
;
}
void
SetColor
(
const
nscolor
&
aColor
)
{
mPaintType
=
eStyleSVGPaintType_Color
;
mPaintDefinition
.
mColor
=
aColor
;
}
void
SetContextPaint
(
SVGContextPaint
*
aContextPaint
nsStyleSVGPaintType
aPaintType
)
{
NS_ASSERTION
(
aPaintType
=
=
eStyleSVGPaintType_ContextFill
|
|
aPaintType
=
=
eStyleSVGPaintType_ContextStroke
"
Invalid
context
paint
type
"
)
;
mPaintType
=
aPaintType
;
mPaintDefinition
.
mContextPaint
=
aContextPaint
;
}
union
{
nsSVGPaintServerFrame
*
mPaintServerFrame
;
SVGContextPaint
*
mContextPaint
;
nscolor
mColor
;
}
mPaintDefinition
;
MOZ_INIT_OUTSIDE_CTOR
nsIFrame
*
mFrame
;
gfxMatrix
mContextMatrix
;
nsStyleSVGPaintType
mPaintType
;
gfxMatrix
mPatternMatrix
;
nsRefPtrHashtable
<
nsFloatHashKey
gfxPattern
>
mPatternCache
;
mozilla
:
:
Pair
<
DrawResult
RefPtr
<
gfxPattern
>
>
GetPattern
(
const
DrawTarget
*
aDrawTarget
float
aOpacity
nsStyleSVGPaint
nsStyleSVG
:
:
*
aFillOrStroke
const
gfxMatrix
&
aCTM
uint32_t
aFlags
)
;
}
;
Paint
mFillPaint
;
Paint
mStrokePaint
;
float
mFillOpacity
;
float
mStrokeOpacity
;
}
;
class
SVGEmbeddingContextPaint
:
public
SVGContextPaint
{
typedef
gfx
:
:
Color
Color
;
typedef
mozilla
:
:
image
:
:
DrawResult
DrawResult
;
public
:
SVGEmbeddingContextPaint
(
)
{
}
bool
operator
=
=
(
const
SVGEmbeddingContextPaint
&
aOther
)
const
{
MOZ_ASSERT
(
GetStrokeWidth
(
)
=
=
aOther
.
GetStrokeWidth
(
)
&
&
GetStrokeDashOffset
(
)
=
=
aOther
.
GetStrokeDashOffset
(
)
&
&
GetStrokeDashArray
(
)
=
=
aOther
.
GetStrokeDashArray
(
)
"
We
don
'
t
currently
include
these
in
the
context
information
"
"
from
an
embedding
element
"
)
;
return
mFill
=
=
aOther
.
mFill
&
&
mStroke
=
=
aOther
.
mStroke
;
}
void
SetFill
(
nscolor
aFill
)
{
mFill
.
emplace
(
gfx
:
:
ToDeviceColor
(
aFill
)
)
;
}
void
SetStroke
(
nscolor
aStroke
)
{
mStroke
.
emplace
(
gfx
:
:
ToDeviceColor
(
aStroke
)
)
;
}
mozilla
:
:
Pair
<
DrawResult
RefPtr
<
gfxPattern
>
>
GetFillPattern
(
const
DrawTarget
*
aDrawTarget
float
aFillOpacity
const
gfxMatrix
&
aCTM
uint32_t
aFlags
=
0
)
override
;
mozilla
:
:
Pair
<
DrawResult
RefPtr
<
gfxPattern
>
>
GetStrokePattern
(
const
DrawTarget
*
aDrawTarget
float
aStrokeOpacity
const
gfxMatrix
&
aCTM
uint32_t
aFlags
=
0
)
override
;
float
GetFillOpacity
(
)
const
override
{
return
1
.
0f
;
}
;
float
GetStrokeOpacity
(
)
const
override
{
return
1
.
0f
;
}
;
uint32_t
Hash
(
)
const
override
;
private
:
Maybe
<
Color
>
mFill
;
Maybe
<
Color
>
mStroke
;
}
;
}
#
endif
