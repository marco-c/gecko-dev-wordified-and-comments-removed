#
ifndef
LAYOUT_SVG_SVGCONTEXTPAINT_H_
#
define
LAYOUT_SVG_SVGCONTEXTPAINT_H_
#
include
"
DrawMode
.
h
"
#
include
"
gfxMatrix
.
h
"
#
include
"
gfxPattern
.
h
"
#
include
"
gfxTypes
.
h
"
#
include
"
gfxUtils
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
ImgDrawResult
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
class
gfxContext
;
namespace
mozilla
{
class
SVGPaintServerFrame
;
namespace
dom
{
class
SVGDocument
;
}
class
SVGContextPaint
:
public
RefCounted
<
SVGContextPaint
>
{
protected
:
using
DrawTarget
=
mozilla
:
:
gfx
:
:
DrawTarget
;
using
Float
=
mozilla
:
:
gfx
:
:
Float
;
using
imgDrawingParams
=
mozilla
:
:
image
:
:
imgDrawingParams
;
SVGContextPaint
(
)
:
mDashOffset
(
0
.
0f
)
mStrokeWidth
(
0
.
0f
)
{
}
public
:
MOZ_DECLARE_REFCOUNTED_TYPENAME
(
SVGContextPaint
)
virtual
~
SVGContextPaint
(
)
=
default
;
virtual
already_AddRefed
<
gfxPattern
>
GetFillPattern
(
const
DrawTarget
*
aDrawTarget
float
aOpacity
const
gfxMatrix
&
aCTM
imgDrawingParams
&
aImgParams
)
=
0
;
virtual
already_AddRefed
<
gfxPattern
>
GetStrokePattern
(
const
DrawTarget
*
aDrawTarget
float
aOpacity
const
gfxMatrix
&
aCTM
imgDrawingParams
&
aImgParams
)
=
0
;
virtual
float
GetFillOpacity
(
)
const
=
0
;
virtual
float
GetStrokeOpacity
(
)
const
=
0
;
already_AddRefed
<
gfxPattern
>
GetFillPattern
(
const
DrawTarget
*
aDrawTarget
const
gfxMatrix
&
aCTM
imgDrawingParams
&
aImgParams
)
{
return
GetFillPattern
(
aDrawTarget
GetFillOpacity
(
)
aCTM
aImgParams
)
;
}
already_AddRefed
<
gfxPattern
>
GetStrokePattern
(
const
DrawTarget
*
aDrawTarget
const
gfxMatrix
&
aCTM
imgDrawingParams
&
aImgParams
)
{
return
GetStrokePattern
(
aDrawTarget
GetStrokeOpacity
(
)
aCTM
aImgParams
)
;
}
static
SVGContextPaint
*
GetContextPaint
(
nsIContent
*
aContent
)
;
void
InitStrokeGeometry
(
gfxContext
*
aContext
float
devUnitsPerSVGUnit
)
;
const
FallibleTArray
<
Float
>
&
GetStrokeDashArray
(
)
const
{
return
mDashes
;
}
Float
GetStrokeDashOffset
(
)
const
{
return
mDashOffset
;
}
Float
GetStrokeWidth
(
)
const
{
return
mStrokeWidth
;
}
virtual
uint32_t
Hash
(
)
const
{
MOZ_ASSERT_UNREACHABLE
(
"
Only
VectorImage
needs
to
hash
and
that
should
"
"
only
be
operating
on
our
SVGEmbeddingContextPaint
"
"
subclass
"
)
;
return
0
;
}
static
bool
IsAllowedForImageFromURI
(
nsIURI
*
aURI
)
;
private
:
FallibleTArray
<
Float
>
mDashes
;
MOZ_INIT_OUTSIDE_CTOR
Float
mDashOffset
;
MOZ_INIT_OUTSIDE_CTOR
Float
mStrokeWidth
;
}
;
class
MOZ_RAII
AutoSetRestoreSVGContextPaint
{
public
:
AutoSetRestoreSVGContextPaint
(
const
SVGContextPaint
&
aContextPaint
dom
:
:
SVGDocument
&
aSVGDocument
)
;
~
AutoSetRestoreSVGContextPaint
(
)
;
private
:
dom
:
:
SVGDocument
&
mSVGDocument
;
const
SVGContextPaint
*
mOuterContextPaint
;
}
;
struct
SVGContextPaintImpl
:
public
SVGContextPaint
{
protected
:
using
DrawTarget
=
mozilla
:
:
gfx
:
:
DrawTarget
;
public
:
DrawMode
Init
(
const
DrawTarget
*
aDrawTarget
const
gfxMatrix
&
aContextMatrix
nsIFrame
*
aFrame
SVGContextPaint
*
aOuterContextPaint
imgDrawingParams
&
aImgParams
)
;
already_AddRefed
<
gfxPattern
>
GetFillPattern
(
const
DrawTarget
*
aDrawTarget
float
aOpacity
const
gfxMatrix
&
aCTM
imgDrawingParams
&
aImgParams
)
override
;
already_AddRefed
<
gfxPattern
>
GetStrokePattern
(
const
DrawTarget
*
aDrawTarget
float
aOpacity
const
gfxMatrix
&
aCTM
imgDrawingParams
&
aImgParams
)
override
;
void
SetFillOpacity
(
float
aOpacity
)
{
mFillOpacity
=
aOpacity
;
}
float
GetFillOpacity
(
)
const
override
{
return
mFillOpacity
;
}
void
SetStrokeOpacity
(
float
aOpacity
)
{
mStrokeOpacity
=
aOpacity
;
}
float
GetStrokeOpacity
(
)
const
override
{
return
mStrokeOpacity
;
}
struct
Paint
{
enum
class
Tag
:
uint8_t
{
None
Color
PaintServer
ContextFill
ContextStroke
}
;
Paint
(
)
:
mPaintDefinition
{
}
mPaintType
(
Tag
:
:
None
)
{
}
void
SetPaintServer
(
nsIFrame
*
aFrame
const
gfxMatrix
&
aContextMatrix
SVGPaintServerFrame
*
aPaintServerFrame
)
{
mPaintType
=
Tag
:
:
PaintServer
;
mPaintDefinition
.
mPaintServerFrame
=
aPaintServerFrame
;
mFrame
=
aFrame
;
mContextMatrix
=
aContextMatrix
;
}
void
SetColor
(
const
nscolor
&
aColor
)
{
mPaintType
=
Tag
:
:
Color
;
mPaintDefinition
.
mColor
=
aColor
;
}
void
SetContextPaint
(
SVGContextPaint
*
aContextPaint
Tag
aTag
)
{
MOZ_ASSERT
(
aTag
=
=
Tag
:
:
ContextFill
|
|
aTag
=
=
Tag
:
:
ContextStroke
)
;
mPaintType
=
aTag
;
mPaintDefinition
.
mContextPaint
=
aContextPaint
;
}
union
{
SVGPaintServerFrame
*
mPaintServerFrame
;
SVGContextPaint
*
mContextPaint
;
nscolor
mColor
;
}
mPaintDefinition
;
MOZ_INIT_OUTSIDE_CTOR
nsIFrame
*
mFrame
;
gfxMatrix
mContextMatrix
;
Tag
mPaintType
;
gfxMatrix
mPatternMatrix
;
nsRefPtrHashtable
<
nsFloatHashKey
gfxPattern
>
mPatternCache
;
already_AddRefed
<
gfxPattern
>
GetPattern
(
const
DrawTarget
*
aDrawTarget
float
aOpacity
StyleSVGPaint
nsStyleSVG
:
:
*
aFillOrStroke
const
gfxMatrix
&
aCTM
imgDrawingParams
&
aImgParams
)
;
}
;
Paint
mFillPaint
;
Paint
mStrokePaint
;
float
mFillOpacity
;
float
mStrokeOpacity
;
}
;
class
SVGEmbeddingContextPaint
:
public
SVGContextPaint
{
using
DeviceColor
=
gfx
:
:
DeviceColor
;
public
:
SVGEmbeddingContextPaint
(
)
:
mFillOpacity
(
1
.
0f
)
mStrokeOpacity
(
1
.
0f
)
{
}
bool
operator
=
=
(
const
SVGEmbeddingContextPaint
&
aOther
)
const
{
MOZ_ASSERT
(
GetStrokeWidth
(
)
=
=
aOther
.
GetStrokeWidth
(
)
&
&
GetStrokeDashOffset
(
)
=
=
aOther
.
GetStrokeDashOffset
(
)
&
&
GetStrokeDashArray
(
)
=
=
aOther
.
GetStrokeDashArray
(
)
"
We
don
'
t
currently
include
these
in
the
context
information
"
"
from
an
embedding
element
"
)
;
return
mFill
=
=
aOther
.
mFill
&
&
mStroke
=
=
aOther
.
mStroke
&
&
mFillOpacity
=
=
aOther
.
mFillOpacity
&
&
mStrokeOpacity
=
=
aOther
.
mStrokeOpacity
;
}
void
SetFill
(
nscolor
aFill
)
{
mFill
.
emplace
(
gfx
:
:
ToDeviceColor
(
aFill
)
)
;
}
const
Maybe
<
DeviceColor
>
&
GetFill
(
)
const
{
return
mFill
;
}
void
SetStroke
(
nscolor
aStroke
)
{
mStroke
.
emplace
(
gfx
:
:
ToDeviceColor
(
aStroke
)
)
;
}
const
Maybe
<
DeviceColor
>
&
GetStroke
(
)
const
{
return
mStroke
;
}
already_AddRefed
<
gfxPattern
>
GetFillPattern
(
const
DrawTarget
*
aDrawTarget
float
aFillOpacity
const
gfxMatrix
&
aCTM
imgDrawingParams
&
aImgParams
)
override
;
already_AddRefed
<
gfxPattern
>
GetStrokePattern
(
const
DrawTarget
*
aDrawTarget
float
aStrokeOpacity
const
gfxMatrix
&
aCTM
imgDrawingParams
&
aImgParams
)
override
;
void
SetFillOpacity
(
float
aOpacity
)
{
mFillOpacity
=
aOpacity
;
}
float
GetFillOpacity
(
)
const
override
{
return
mFillOpacity
;
}
;
void
SetStrokeOpacity
(
float
aOpacity
)
{
mStrokeOpacity
=
aOpacity
;
}
float
GetStrokeOpacity
(
)
const
override
{
return
mStrokeOpacity
;
}
;
uint32_t
Hash
(
)
const
override
;
private
:
Maybe
<
DeviceColor
>
mFill
;
Maybe
<
DeviceColor
>
mStroke
;
float
mFillOpacity
;
float
mStrokeOpacity
;
}
;
}
#
endif
