#
ifndef
MOZILLA_SVGCONTEXTPAINT_H_
#
define
MOZILLA_SVGCONTEXTPAINT_H_
#
include
"
gfxMatrix
.
h
"
#
include
"
gfxPattern
.
h
"
#
include
"
gfxTypes
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
nsTArray
.
h
"
class
gfxContext
;
class
nsIDocument
;
class
nsSVGPaintServerFrame
;
namespace
mozilla
{
class
SVGContextPaint
{
protected
:
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
SVGContextPaint
(
)
{
}
public
:
virtual
~
SVGContextPaint
(
)
{
}
virtual
already_AddRefed
<
gfxPattern
>
GetFillPattern
(
const
DrawTarget
*
aDrawTarget
float
aOpacity
const
gfxMatrix
&
aCTM
)
=
0
;
virtual
already_AddRefed
<
gfxPattern
>
GetStrokePattern
(
const
DrawTarget
*
aDrawTarget
float
aOpacity
const
gfxMatrix
&
aCTM
)
=
0
;
virtual
float
GetFillOpacity
(
)
const
=
0
;
virtual
float
GetStrokeOpacity
(
)
const
=
0
;
already_AddRefed
<
gfxPattern
>
GetFillPattern
(
const
DrawTarget
*
aDrawTarget
const
gfxMatrix
&
aCTM
)
{
return
GetFillPattern
(
aDrawTarget
GetFillOpacity
(
)
aCTM
)
;
}
already_AddRefed
<
gfxPattern
>
GetStrokePattern
(
const
DrawTarget
*
aDrawTarget
const
gfxMatrix
&
aCTM
)
{
return
GetStrokePattern
(
aDrawTarget
GetStrokeOpacity
(
)
aCTM
)
;
}
void
InitStrokeGeometry
(
gfxContext
*
aContext
float
devUnitsPerSVGUnit
)
;
FallibleTArray
<
gfxFloat
>
&
GetStrokeDashArray
(
)
{
return
mDashes
;
}
gfxFloat
GetStrokeDashOffset
(
)
{
return
mDashOffset
;
}
gfxFloat
GetStrokeWidth
(
)
{
return
mStrokeWidth
;
}
private
:
FallibleTArray
<
gfxFloat
>
mDashes
;
gfxFloat
mDashOffset
;
gfxFloat
mStrokeWidth
;
}
;
class
MOZ_RAII
AutoSetRestoreSVGContextPaint
{
public
:
AutoSetRestoreSVGContextPaint
(
SVGContextPaint
*
aContextPaint
nsIDocument
*
aSVGDocument
)
;
~
AutoSetRestoreSVGContextPaint
(
)
;
private
:
nsIDocument
*
mSVGDocument
;
void
*
mOuterContextPaint
;
}
;
struct
SVGContextPaintImpl
:
public
SVGContextPaint
{
protected
:
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
public
:
already_AddRefed
<
gfxPattern
>
GetFillPattern
(
const
DrawTarget
*
aDrawTarget
float
aOpacity
const
gfxMatrix
&
aCTM
)
override
;
already_AddRefed
<
gfxPattern
>
GetStrokePattern
(
const
DrawTarget
*
aDrawTarget
float
aOpacity
const
gfxMatrix
&
aCTM
)
override
;
void
SetFillOpacity
(
float
aOpacity
)
{
mFillOpacity
=
aOpacity
;
}
float
GetFillOpacity
(
)
const
override
{
return
mFillOpacity
;
}
void
SetStrokeOpacity
(
float
aOpacity
)
{
mStrokeOpacity
=
aOpacity
;
}
float
GetStrokeOpacity
(
)
const
override
{
return
mStrokeOpacity
;
}
struct
Paint
{
Paint
(
)
:
mPaintType
(
eStyleSVGPaintType_None
)
{
}
void
SetPaintServer
(
nsIFrame
*
aFrame
const
gfxMatrix
&
aContextMatrix
nsSVGPaintServerFrame
*
aPaintServerFrame
)
{
mPaintType
=
eStyleSVGPaintType_Server
;
mPaintDefinition
.
mPaintServerFrame
=
aPaintServerFrame
;
mFrame
=
aFrame
;
mContextMatrix
=
aContextMatrix
;
}
void
SetColor
(
const
nscolor
&
aColor
)
{
mPaintType
=
eStyleSVGPaintType_Color
;
mPaintDefinition
.
mColor
=
aColor
;
}
void
SetContextPaint
(
SVGContextPaint
*
aContextPaint
nsStyleSVGPaintType
aPaintType
)
{
NS_ASSERTION
(
aPaintType
=
=
eStyleSVGPaintType_ContextFill
|
|
aPaintType
=
=
eStyleSVGPaintType_ContextStroke
"
Invalid
context
paint
type
"
)
;
mPaintType
=
aPaintType
;
mPaintDefinition
.
mContextPaint
=
aContextPaint
;
}
union
{
nsSVGPaintServerFrame
*
mPaintServerFrame
;
SVGContextPaint
*
mContextPaint
;
nscolor
mColor
;
}
mPaintDefinition
;
nsIFrame
*
mFrame
;
gfxMatrix
mContextMatrix
;
nsStyleSVGPaintType
mPaintType
;
gfxMatrix
mPatternMatrix
;
nsRefPtrHashtable
<
nsFloatHashKey
gfxPattern
>
mPatternCache
;
already_AddRefed
<
gfxPattern
>
GetPattern
(
const
DrawTarget
*
aDrawTarget
float
aOpacity
nsStyleSVGPaint
nsStyleSVG
:
:
*
aFillOrStroke
const
gfxMatrix
&
aCTM
)
;
}
;
Paint
mFillPaint
;
Paint
mStrokePaint
;
float
mFillOpacity
;
float
mStrokeOpacity
;
}
;
}
#
endif
