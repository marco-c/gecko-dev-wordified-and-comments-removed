#
include
"
nsIAnonymousContentCreator
.
h
"
#
include
"
nsSVGEffects
.
h
"
#
include
"
nsSVGGFrame
.
h
"
#
include
"
mozilla
/
dom
/
SVGUseElement
.
h
"
#
include
"
nsContentList
.
h
"
using
namespace
mozilla
:
:
dom
;
class
nsSVGUseFrame
final
:
public
nsSVGGFrame
public
nsIAnonymousContentCreator
{
friend
nsIFrame
*
NS_NewSVGUseFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
;
protected
:
explicit
nsSVGUseFrame
(
nsStyleContext
*
aContext
)
:
nsSVGGFrame
(
aContext
kClassID
)
mHasValidDimensions
(
true
)
{
}
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsSVGUseFrame
)
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
)
override
;
virtual
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
SVGUse
"
)
aResult
)
;
}
#
endif
virtual
void
ReflowSVG
(
)
override
;
virtual
void
NotifySVGChanged
(
uint32_t
aFlags
)
override
;
virtual
nsresult
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
override
;
virtual
void
AppendAnonymousContentTo
(
nsTArray
<
nsIContent
*
>
&
aElements
uint32_t
aFilter
)
override
;
private
:
bool
mHasValidDimensions
;
}
;
nsIFrame
*
NS_NewSVGUseFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
{
return
new
(
aPresShell
)
nsSVGUseFrame
(
aContext
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsSVGUseFrame
)
NS_QUERYFRAME_HEAD
(
nsSVGUseFrame
)
NS_QUERYFRAME_ENTRY
(
nsIAnonymousContentCreator
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsSVGGFrame
)
void
nsSVGUseFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
NS_ASSERTION
(
aContent
-
>
IsSVGElement
(
nsGkAtoms
:
:
use
)
"
Content
is
not
an
SVG
use
!
"
)
;
mHasValidDimensions
=
static_cast
<
SVGUseElement
*
>
(
aContent
)
-
>
HasValidDimensions
(
)
;
nsSVGGFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
}
nsresult
nsSVGUseFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
)
{
SVGUseElement
*
useElement
=
static_cast
<
SVGUseElement
*
>
(
GetContent
(
)
)
;
if
(
aNameSpaceID
=
=
kNameSpaceID_None
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
x
|
|
aAttribute
=
=
nsGkAtoms
:
:
y
)
{
mCanvasTM
=
nullptr
;
nsLayoutUtils
:
:
PostRestyleEvent
(
useElement
nsRestyleHint
(
0
)
nsChangeHint_InvalidateRenderingObservers
)
;
nsSVGUtils
:
:
ScheduleReflowSVG
(
this
)
;
nsSVGUtils
:
:
NotifyChildrenOfSVGChange
(
this
TRANSFORM_CHANGED
)
;
}
else
if
(
aAttribute
=
=
nsGkAtoms
:
:
width
|
|
aAttribute
=
=
nsGkAtoms
:
:
height
)
{
bool
invalidate
=
false
;
if
(
mHasValidDimensions
!
=
useElement
-
>
HasValidDimensions
(
)
)
{
mHasValidDimensions
=
!
mHasValidDimensions
;
invalidate
=
true
;
}
if
(
useElement
-
>
OurWidthAndHeightAreUsed
(
)
)
{
invalidate
=
true
;
useElement
-
>
SyncWidthOrHeight
(
aAttribute
)
;
}
if
(
invalidate
)
{
nsLayoutUtils
:
:
PostRestyleEvent
(
useElement
nsRestyleHint
(
0
)
nsChangeHint_InvalidateRenderingObservers
)
;
nsSVGUtils
:
:
ScheduleReflowSVG
(
this
)
;
}
}
}
if
(
(
aNameSpaceID
=
=
kNameSpaceID_XLink
|
|
aNameSpaceID
=
=
kNameSpaceID_None
)
&
&
aAttribute
=
=
nsGkAtoms
:
:
href
)
{
nsLayoutUtils
:
:
PostRestyleEvent
(
useElement
nsRestyleHint
(
0
)
nsChangeHint_InvalidateRenderingObservers
)
;
nsSVGUtils
:
:
ScheduleReflowSVG
(
this
)
;
useElement
-
>
mOriginal
=
nullptr
;
useElement
-
>
UnlinkSource
(
)
;
useElement
-
>
TriggerReclone
(
)
;
}
return
nsSVGGFrame
:
:
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
}
void
nsSVGUseFrame
:
:
DestroyFrom
(
nsIFrame
*
aDestructRoot
)
{
RefPtr
<
SVGUseElement
>
use
=
static_cast
<
SVGUseElement
*
>
(
GetContent
(
)
)
;
nsSVGGFrame
:
:
DestroyFrom
(
aDestructRoot
)
;
use
-
>
DestroyAnonymousContent
(
)
;
}
void
nsSVGUseFrame
:
:
ReflowSVG
(
)
{
float
x
y
;
static_cast
<
SVGUseElement
*
>
(
GetContent
(
)
)
-
>
GetAnimatedLengthValues
(
&
x
&
y
nullptr
)
;
mRect
.
MoveTo
(
nsLayoutUtils
:
:
RoundGfxRectToAppRect
(
gfxRect
(
x
y
0
.
0
0
.
0
)
PresContext
(
)
-
>
AppUnitsPerCSSPixel
(
)
)
.
TopLeft
(
)
)
;
if
(
StyleEffects
(
)
-
>
HasFilters
(
)
)
{
InvalidateFrame
(
)
;
}
nsSVGGFrame
:
:
ReflowSVG
(
)
;
}
void
nsSVGUseFrame
:
:
NotifySVGChanged
(
uint32_t
aFlags
)
{
if
(
aFlags
&
COORD_CONTEXT_CHANGED
&
&
!
(
aFlags
&
TRANSFORM_CHANGED
)
)
{
SVGUseElement
*
use
=
static_cast
<
SVGUseElement
*
>
(
GetContent
(
)
)
;
if
(
use
-
>
mLengthAttributes
[
SVGUseElement
:
:
ATTR_X
]
.
IsPercentage
(
)
|
|
use
-
>
mLengthAttributes
[
SVGUseElement
:
:
ATTR_Y
]
.
IsPercentage
(
)
)
{
aFlags
|
=
TRANSFORM_CHANGED
;
nsSVGUtils
:
:
ScheduleReflowSVG
(
this
)
;
}
}
nsSVGGFrame
:
:
NotifySVGChanged
(
aFlags
)
;
}
nsresult
nsSVGUseFrame
:
:
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
{
SVGUseElement
*
use
=
static_cast
<
SVGUseElement
*
>
(
GetContent
(
)
)
;
nsIContent
*
clone
=
use
-
>
CreateAnonymousContent
(
)
;
nsLayoutUtils
:
:
PostRestyleEvent
(
use
nsRestyleHint
(
0
)
nsChangeHint_InvalidateRenderingObservers
)
;
if
(
!
clone
)
return
NS_ERROR_FAILURE
;
if
(
!
aElements
.
AppendElement
(
clone
)
)
return
NS_ERROR_OUT_OF_MEMORY
;
return
NS_OK
;
}
void
nsSVGUseFrame
:
:
AppendAnonymousContentTo
(
nsTArray
<
nsIContent
*
>
&
aElements
uint32_t
aFilter
)
{
SVGUseElement
*
use
=
static_cast
<
SVGUseElement
*
>
(
GetContent
(
)
)
;
nsIContent
*
clone
=
use
-
>
GetAnonymousContent
(
)
;
if
(
clone
)
{
aElements
.
AppendElement
(
clone
)
;
}
}
