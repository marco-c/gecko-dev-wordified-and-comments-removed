#
include
"
nsContainerFrame
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsFrame
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsSVGEffects
.
h
"
#
include
"
nsSVGFilters
.
h
"
#
include
"
mozilla
/
dom
/
SVGFEImageElement
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
class
SVGFEImageFrame
:
public
nsFrame
{
friend
nsIFrame
*
NS_NewSVGFEImageFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
;
protected
:
explicit
SVGFEImageFrame
(
nsStyleContext
*
aContext
)
:
nsFrame
(
aContext
)
{
AddStateBits
(
NS_FRAME_SVG_LAYOUT
|
NS_FRAME_IS_NONDISPLAY
)
;
EnableVisibilityTracking
(
)
;
}
public
:
NS_DECL_FRAMEARENA_HELPERS
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
virtual
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
)
override
;
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eSVG
)
)
;
}
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
SVGFEImage
"
)
aResult
)
;
}
#
endif
virtual
nsIAtom
*
GetType
(
)
const
override
;
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
)
override
;
void
OnVisibilityChange
(
Visibility
aNewVisibility
const
Maybe
<
OnNonvisible
>
&
aNonvisibleAction
=
Nothing
(
)
)
override
;
virtual
bool
ComputeCustomOverflow
(
nsOverflowAreas
&
aOverflowAreas
)
override
{
return
false
;
}
}
;
nsIFrame
*
NS_NewSVGFEImageFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
{
return
new
(
aPresShell
)
SVGFEImageFrame
(
aContext
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
SVGFEImageFrame
)
void
SVGFEImageFrame
:
:
DestroyFrom
(
nsIFrame
*
aDestructRoot
)
{
DecApproximateVisibleCount
(
)
;
nsCOMPtr
<
nsIImageLoadingContent
>
imageLoader
=
do_QueryInterface
(
nsFrame
:
:
mContent
)
;
if
(
imageLoader
)
{
imageLoader
-
>
FrameDestroyed
(
this
)
;
}
nsFrame
:
:
DestroyFrom
(
aDestructRoot
)
;
}
void
SVGFEImageFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
NS_ASSERTION
(
aContent
-
>
IsSVGElement
(
nsGkAtoms
:
:
feImage
)
"
Trying
to
construct
an
SVGFEImageFrame
for
a
"
"
content
element
that
doesn
'
t
support
the
right
interfaces
"
)
;
nsFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
IncApproximateVisibleCount
(
)
;
nsCOMPtr
<
nsIImageLoadingContent
>
imageLoader
=
do_QueryInterface
(
nsFrame
:
:
mContent
)
;
if
(
imageLoader
)
{
imageLoader
-
>
FrameCreated
(
this
)
;
}
}
nsIAtom
*
SVGFEImageFrame
:
:
GetType
(
)
const
{
return
nsGkAtoms
:
:
svgFEImageFrame
;
}
nsresult
SVGFEImageFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
)
{
SVGFEImageElement
*
element
=
static_cast
<
SVGFEImageElement
*
>
(
mContent
)
;
if
(
element
-
>
AttributeAffectsRendering
(
aNameSpaceID
aAttribute
)
)
{
MOZ_ASSERT
(
GetParent
(
)
-
>
GetType
(
)
=
=
nsGkAtoms
:
:
svgFilterFrame
"
Observers
observe
the
filter
so
that
'
s
what
we
must
invalidate
"
)
;
nsSVGEffects
:
:
InvalidateDirectRenderingObservers
(
GetParent
(
)
)
;
}
if
(
(
aNameSpaceID
=
=
kNameSpaceID_XLink
|
|
aNameSpaceID
=
=
kNameSpaceID_None
)
&
&
aAttribute
=
=
nsGkAtoms
:
:
href
)
{
bool
hrefIsSet
=
element
-
>
mStringAttributes
[
SVGFEImageElement
:
:
HREF
]
.
IsExplicitlySet
(
)
|
|
element
-
>
mStringAttributes
[
SVGFEImageElement
:
:
XLINK_HREF
]
.
IsExplicitlySet
(
)
;
if
(
hrefIsSet
)
{
element
-
>
LoadSVGImage
(
true
true
)
;
}
else
{
element
-
>
CancelImageRequests
(
true
)
;
}
}
return
nsFrame
:
:
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
}
void
SVGFEImageFrame
:
:
OnVisibilityChange
(
Visibility
aNewVisibility
const
Maybe
<
OnNonvisible
>
&
aNonvisibleAction
)
{
nsCOMPtr
<
nsIImageLoadingContent
>
imageLoader
=
do_QueryInterface
(
nsFrame
:
:
mContent
)
;
if
(
!
imageLoader
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Should
have
an
nsIImageLoadingContent
"
)
;
nsFrame
:
:
OnVisibilityChange
(
aNewVisibility
aNonvisibleAction
)
;
return
;
}
imageLoader
-
>
OnVisibilityChange
(
aNewVisibility
aNonvisibleAction
)
;
nsFrame
:
:
OnVisibilityChange
(
aNewVisibility
aNonvisibleAction
)
;
}
