#
include
"
nsSVGViewportFrame
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
include
"
gfxContext
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsSVGDisplayableFrame
.
h
"
#
include
"
nsSVGContainerFrame
.
h
"
#
include
"
nsSVGIntegrationUtils
.
h
"
#
include
"
mozilla
/
dom
/
SVGViewportElement
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
image
;
void
nsSVGViewportFrame
:
:
PaintSVG
(
gfxContext
&
aContext
const
gfxMatrix
&
aTransform
imgDrawingParams
&
aImgParams
const
nsIntRect
*
aDirtyRect
)
{
NS_ASSERTION
(
!
NS_SVGDisplayListPaintingEnabled
(
)
|
|
(
mState
&
NS_FRAME_IS_NONDISPLAY
)
"
If
display
lists
are
enabled
only
painting
of
non
-
display
"
"
SVG
should
take
this
code
path
"
)
;
gfxContextAutoSaveRestore
autoSR
;
if
(
StyleDisplay
(
)
-
>
IsScrollableOverflow
(
)
)
{
float
x
y
width
height
;
static_cast
<
SVGViewportElement
*
>
(
GetContent
(
)
)
-
>
GetAnimatedLengthValues
(
&
x
&
y
&
width
&
height
nullptr
)
;
if
(
width
<
=
0
|
|
height
<
=
0
)
{
return
;
}
autoSR
.
SetContext
(
&
aContext
)
;
gfxRect
clipRect
=
nsSVGUtils
:
:
GetClipRectForFrame
(
this
x
y
width
height
)
;
nsSVGUtils
:
:
SetClipRect
(
&
aContext
aTransform
clipRect
)
;
}
nsSVGDisplayContainerFrame
:
:
PaintSVG
(
aContext
aTransform
aImgParams
aDirtyRect
)
;
}
void
nsSVGViewportFrame
:
:
ReflowSVG
(
)
{
float
x
y
width
height
;
static_cast
<
SVGViewportElement
*
>
(
GetContent
(
)
)
-
>
GetAnimatedLengthValues
(
&
x
&
y
&
width
&
height
nullptr
)
;
mRect
=
nsLayoutUtils
:
:
RoundGfxRectToAppRect
(
gfxRect
(
x
y
width
height
)
PresContext
(
)
-
>
AppUnitsPerCSSPixel
(
)
)
;
if
(
StyleEffects
(
)
-
>
HasFilters
(
)
)
{
InvalidateFrame
(
)
;
}
nsSVGDisplayContainerFrame
:
:
ReflowSVG
(
)
;
}
void
nsSVGViewportFrame
:
:
NotifySVGChanged
(
uint32_t
aFlags
)
{
MOZ_ASSERT
(
aFlags
&
(
TRANSFORM_CHANGED
|
COORD_CONTEXT_CHANGED
)
"
Invalidation
logic
may
need
adjusting
"
)
;
if
(
aFlags
&
COORD_CONTEXT_CHANGED
)
{
SVGViewportElement
*
svg
=
static_cast
<
SVGViewportElement
*
>
(
GetContent
(
)
)
;
bool
xOrYIsPercentage
=
svg
-
>
mLengthAttributes
[
SVGViewportElement
:
:
ATTR_X
]
.
IsPercentage
(
)
|
|
svg
-
>
mLengthAttributes
[
SVGViewportElement
:
:
ATTR_Y
]
.
IsPercentage
(
)
;
bool
widthOrHeightIsPercentage
=
svg
-
>
mLengthAttributes
[
SVGViewportElement
:
:
ATTR_WIDTH
]
.
IsPercentage
(
)
|
|
svg
-
>
mLengthAttributes
[
SVGViewportElement
:
:
ATTR_HEIGHT
]
.
IsPercentage
(
)
;
if
(
xOrYIsPercentage
|
|
widthOrHeightIsPercentage
)
{
nsSVGUtils
:
:
ScheduleReflowSVG
(
this
)
;
}
if
(
!
(
aFlags
&
TRANSFORM_CHANGED
)
&
&
(
xOrYIsPercentage
|
|
(
widthOrHeightIsPercentage
&
&
svg
-
>
HasViewBoxRect
(
)
)
)
)
{
aFlags
|
=
TRANSFORM_CHANGED
;
}
if
(
svg
-
>
HasViewBoxRect
(
)
|
|
!
widthOrHeightIsPercentage
)
{
aFlags
&
=
~
COORD_CONTEXT_CHANGED
;
if
(
!
aFlags
)
{
return
;
}
}
}
nsSVGDisplayContainerFrame
:
:
NotifySVGChanged
(
aFlags
)
;
}
SVGBBox
nsSVGViewportFrame
:
:
GetBBoxContribution
(
const
Matrix
&
aToBBoxUserspace
uint32_t
aFlags
)
{
SVGBBox
bbox
;
if
(
aFlags
&
nsSVGUtils
:
:
eForGetClientRects
)
{
float
x
y
w
h
;
static_cast
<
SVGViewportElement
*
>
(
GetContent
(
)
)
-
>
GetAnimatedLengthValues
(
&
x
&
y
&
w
&
h
nullptr
)
;
if
(
w
<
0
.
0f
)
w
=
0
.
0f
;
if
(
h
<
0
.
0f
)
h
=
0
.
0f
;
Rect
viewport
(
x
y
w
h
)
;
bbox
=
aToBBoxUserspace
.
TransformBounds
(
viewport
)
;
if
(
StyleDisplay
(
)
-
>
IsScrollableOverflow
(
)
)
{
return
bbox
;
}
}
SVGBBox
descendantsBbox
=
nsSVGDisplayContainerFrame
:
:
GetBBoxContribution
(
aToBBoxUserspace
aFlags
)
;
bbox
.
UnionEdges
(
descendantsBbox
)
;
return
bbox
;
}
nsresult
nsSVGViewportFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
{
if
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
!
(
GetStateBits
(
)
&
NS_FRAME_IS_NONDISPLAY
)
)
{
SVGViewportElement
*
content
=
static_cast
<
SVGViewportElement
*
>
(
GetContent
(
)
)
;
if
(
aAttribute
=
=
nsGkAtoms
:
:
width
|
|
aAttribute
=
=
nsGkAtoms
:
:
height
)
{
nsLayoutUtils
:
:
PostRestyleEvent
(
mContent
-
>
AsElement
(
)
nsRestyleHint
(
0
)
nsChangeHint_InvalidateRenderingObservers
)
;
nsSVGUtils
:
:
ScheduleReflowSVG
(
this
)
;
if
(
content
-
>
HasViewBoxOrSyntheticViewBox
(
)
)
{
mCanvasTM
=
nullptr
;
content
-
>
ChildrenOnlyTransformChanged
(
)
;
nsSVGUtils
:
:
NotifyChildrenOfSVGChange
(
this
TRANSFORM_CHANGED
)
;
}
else
{
uint32_t
flags
=
COORD_CONTEXT_CHANGED
;
if
(
mCanvasTM
&
&
mCanvasTM
-
>
IsSingular
(
)
)
{
mCanvasTM
=
nullptr
;
flags
|
=
TRANSFORM_CHANGED
;
}
nsSVGUtils
:
:
NotifyChildrenOfSVGChange
(
this
flags
)
;
}
}
else
if
(
aAttribute
=
=
nsGkAtoms
:
:
transform
|
|
aAttribute
=
=
nsGkAtoms
:
:
preserveAspectRatio
|
|
aAttribute
=
=
nsGkAtoms
:
:
viewBox
|
|
aAttribute
=
=
nsGkAtoms
:
:
x
|
|
aAttribute
=
=
nsGkAtoms
:
:
y
)
{
mCanvasTM
=
nullptr
;
nsSVGUtils
:
:
NotifyChildrenOfSVGChange
(
this
aAttribute
=
=
nsGkAtoms
:
:
viewBox
?
TRANSFORM_CHANGED
|
COORD_CONTEXT_CHANGED
:
TRANSFORM_CHANGED
)
;
if
(
aAttribute
=
=
nsGkAtoms
:
:
x
|
|
aAttribute
=
=
nsGkAtoms
:
:
y
)
{
nsLayoutUtils
:
:
PostRestyleEvent
(
mContent
-
>
AsElement
(
)
nsRestyleHint
(
0
)
nsChangeHint_InvalidateRenderingObservers
)
;
nsSVGUtils
:
:
ScheduleReflowSVG
(
this
)
;
}
else
if
(
aAttribute
=
=
nsGkAtoms
:
:
viewBox
|
|
(
aAttribute
=
=
nsGkAtoms
:
:
preserveAspectRatio
&
&
content
-
>
HasViewBoxOrSyntheticViewBox
(
)
)
)
{
content
-
>
ChildrenOnlyTransformChanged
(
)
;
SchedulePaint
(
)
;
}
}
}
return
NS_OK
;
}
nsIFrame
*
nsSVGViewportFrame
:
:
GetFrameForPoint
(
const
gfxPoint
&
aPoint
)
{
NS_ASSERTION
(
!
NS_SVGDisplayListHitTestingEnabled
(
)
|
|
(
mState
&
NS_FRAME_IS_NONDISPLAY
)
"
If
display
lists
are
enabled
only
hit
-
testing
of
non
-
display
"
"
SVG
should
take
this
code
path
"
)
;
if
(
StyleDisplay
(
)
-
>
IsScrollableOverflow
(
)
)
{
Rect
clip
;
static_cast
<
nsSVGElement
*
>
(
GetContent
(
)
)
-
>
GetAnimatedLengthValues
(
&
clip
.
x
&
clip
.
y
&
clip
.
width
&
clip
.
height
nullptr
)
;
if
(
!
clip
.
Contains
(
ToPoint
(
aPoint
)
)
)
{
return
nullptr
;
}
}
return
nsSVGDisplayContainerFrame
:
:
GetFrameForPoint
(
aPoint
)
;
}
void
nsSVGViewportFrame
:
:
NotifyViewportOrTransformChanged
(
uint32_t
aFlags
)
{
NS_ERROR
(
"
Not
called
for
nsSVGViewportFrame
"
)
;
}
bool
nsSVGViewportFrame
:
:
HasChildrenOnlyTransform
(
gfx
:
:
Matrix
*
aTransform
)
const
{
SVGViewportElement
*
content
=
static_cast
<
SVGViewportElement
*
>
(
GetContent
(
)
)
;
if
(
content
-
>
HasViewBoxOrSyntheticViewBox
(
)
)
{
if
(
aTransform
)
{
*
aTransform
=
content
-
>
GetViewBoxTransform
(
)
;
}
return
true
;
}
return
false
;
}
