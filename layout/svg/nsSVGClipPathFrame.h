#
ifndef
__NS_SVGCLIPPATHFRAME_H__
#
define
__NS_SVGCLIPPATHFRAME_H__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
gfxMatrix
.
h
"
#
include
"
nsSVGContainerFrame
.
h
"
#
include
"
nsSVGUtils
.
h
"
class
gfxContext
;
class
nsISVGChildFrame
;
typedef
nsSVGContainerFrame
nsSVGClipPathFrameBase
;
class
nsSVGClipPathFrame
:
public
nsSVGClipPathFrameBase
{
friend
nsIFrame
*
NS_NewSVGClipPathFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
;
typedef
mozilla
:
:
gfx
:
:
Matrix
Matrix
;
typedef
mozilla
:
:
gfx
:
:
SourceSurface
SourceSurface
;
protected
:
explicit
nsSVGClipPathFrame
(
nsStyleContext
*
aContext
)
:
nsSVGClipPathFrameBase
(
aContext
)
mInUse
(
false
)
{
AddStateBits
(
NS_FRAME_IS_NONDISPLAY
)
;
}
public
:
NS_DECL_FRAMEARENA_HELPERS
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsRect
&
aDirtyRect
const
nsDisplayListSet
&
aLists
)
override
{
}
void
ApplyClipPath
(
gfxContext
&
aContext
nsIFrame
*
aClippedFrame
const
gfxMatrix
&
aMatrix
)
;
already_AddRefed
<
SourceSurface
>
GetClipMask
(
gfxContext
&
aReferenceContext
nsIFrame
*
aClippedFrame
const
gfxMatrix
&
aMatrix
Matrix
*
aMaskTransform
SourceSurface
*
aExtraMask
=
nullptr
const
Matrix
&
aExtraMasksTransform
=
Matrix
(
)
)
;
bool
PointIsInsideClipPath
(
nsIFrame
*
aClippedFrame
const
gfxPoint
&
aPoint
)
;
bool
IsTrivial
(
nsISVGChildFrame
*
*
aSingleChild
=
nullptr
)
;
bool
IsValid
(
)
;
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
)
override
;
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
virtual
nsIAtom
*
GetType
(
)
const
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
SVGClipPath
"
)
aResult
)
;
}
#
endif
SVGBBox
GetBBoxForClipPathFrame
(
const
SVGBBox
&
aBBox
const
gfxMatrix
&
aMatrix
)
;
gfxMatrix
GetClipPathTransform
(
nsIFrame
*
aClippedFrame
)
;
private
:
virtual
gfxMatrix
GetCanvasTM
(
)
override
;
class
MOZ_RAII
AutoReferenceLoopDetector
{
public
:
explicit
AutoReferenceLoopDetector
(
)
:
mFrame
(
nullptr
)
#
ifdef
DEBUG
mMarkAsInUseCalled
(
false
)
#
endif
{
}
~
AutoReferenceLoopDetector
(
)
{
MOZ_ASSERT
(
mMarkAsInUseCalled
"
Instances
of
this
class
are
useless
if
MarkAsInUse
(
)
is
"
"
not
called
on
them
"
)
;
if
(
mFrame
)
{
mFrame
-
>
mInUse
=
false
;
}
}
MOZ_WARN_UNUSED_RESULT
bool
MarkAsInUse
(
nsSVGClipPathFrame
*
aFrame
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
!
mMarkAsInUseCalled
"
Must
only
be
called
once
"
)
;
mMarkAsInUseCalled
=
true
;
#
endif
if
(
aFrame
-
>
mInUse
)
{
NS_WARNING
(
"
clipPath
reference
loop
!
"
)
;
return
false
;
}
aFrame
-
>
mInUse
=
true
;
mFrame
=
aFrame
;
return
true
;
}
private
:
nsSVGClipPathFrame
*
mFrame
;
DebugOnly
<
bool
>
mMarkAsInUseCalled
;
}
;
gfxMatrix
mMatrixForChildren
;
bool
mInUse
;
}
;
#
endif
