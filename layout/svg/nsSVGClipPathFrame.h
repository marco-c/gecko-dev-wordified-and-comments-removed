#
ifndef
__NS_SVGCLIPPATHFRAME_H__
#
define
__NS_SVGCLIPPATHFRAME_H__
#
include
"
gfxMatrix
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsSVGContainerFrame
.
h
"
#
include
"
nsSVGUtils
.
h
"
class
gfxContext
;
class
nsSVGDisplayableFrame
;
class
nsSVGClipPathFrame
final
:
public
nsSVGContainerFrame
{
friend
nsIFrame
*
NS_NewSVGClipPathFrame
(
nsIPresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
typedef
mozilla
:
:
gfx
:
:
Matrix
Matrix
;
typedef
mozilla
:
:
gfx
:
:
SourceSurface
SourceSurface
;
typedef
mozilla
:
:
image
:
:
imgDrawingParams
imgDrawingParams
;
protected
:
explicit
nsSVGClipPathFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsSVGContainerFrame
(
aStyle
aPresContext
kClassID
)
mIsBeingProcessed
(
false
)
{
AddStateBits
(
NS_FRAME_IS_NONDISPLAY
)
;
}
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsSVGClipPathFrame
)
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
{
}
void
ApplyClipPath
(
gfxContext
&
aContext
nsIFrame
*
aClippedFrame
const
gfxMatrix
&
aMatrix
)
;
already_AddRefed
<
SourceSurface
>
GetClipMask
(
gfxContext
&
aReferenceContext
nsIFrame
*
aClippedFrame
const
gfxMatrix
&
aMatrix
Matrix
*
aMaskTransform
SourceSurface
*
aExtraMask
=
nullptr
const
Matrix
&
aExtraMasksTransform
=
Matrix
(
)
)
;
void
PaintClipMask
(
gfxContext
&
aMaskContext
nsIFrame
*
aClippedFrame
const
gfxMatrix
&
aMatrix
Matrix
*
aMaskTransform
SourceSurface
*
aExtraMask
const
Matrix
&
aExtraMasksTransform
)
;
bool
PointIsInsideClipPath
(
nsIFrame
*
aClippedFrame
const
gfxPoint
&
aPoint
)
;
bool
IsTrivial
(
nsSVGDisplayableFrame
*
*
aSingleChild
=
nullptr
)
;
bool
IsValid
(
)
;
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
SVGClipPath
"
)
aResult
)
;
}
#
endif
SVGBBox
GetBBoxForClipPathFrame
(
const
SVGBBox
&
aBBox
const
gfxMatrix
&
aMatrix
uint32_t
aFlags
)
;
gfxMatrix
GetClipPathTransform
(
nsIFrame
*
aClippedFrame
)
;
private
:
virtual
gfxMatrix
GetCanvasTM
(
)
override
;
already_AddRefed
<
DrawTarget
>
CreateClipMask
(
gfxContext
&
aReferenceContext
mozilla
:
:
gfx
:
:
IntPoint
&
aOffset
)
;
void
PaintFrameIntoMask
(
nsIFrame
*
aFrame
nsIFrame
*
aClippedFrame
gfxContext
&
aTarget
const
gfxMatrix
&
aMatrix
)
;
gfxMatrix
mMatrixForChildren
;
bool
mIsBeingProcessed
;
}
;
#
endif
