#
ifndef
__NS_SVGGRADIENTFRAME_H__
#
define
__NS_SVGGRADIENTFRAME_H__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
gfxMatrix
.
h
"
#
include
"
gfxRect
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsFrame
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsSVGPaintServerFrame
.
h
"
class
gfxPattern
;
class
nsAtom
;
class
nsIContent
;
class
nsIPresShell
;
namespace
mozilla
{
class
nsSVGAnimatedTransformList
;
namespace
dom
{
class
SVGLinearGradientElement
;
class
SVGRadialGradientElement
;
}
}
class
nsSVGGradientFrame
:
public
nsSVGPaintServerFrame
{
typedef
mozilla
:
:
gfx
:
:
ExtendMode
ExtendMode
;
protected
:
nsSVGGradientFrame
(
ComputedStyle
*
aStyle
ClassID
aID
)
;
public
:
NS_DECL_ABSTRACT_FRAME
(
nsSVGGradientFrame
)
virtual
already_AddRefed
<
gfxPattern
>
GetPaintServerPattern
(
nsIFrame
*
aSource
const
DrawTarget
*
aDrawTarget
const
gfxMatrix
&
aContextMatrix
nsStyleSVGPaint
nsStyleSVG
:
:
*
aFillOrStroke
float
aOpacity
imgDrawingParams
&
aImgParams
const
gfxRect
*
aOverrideBounds
)
override
;
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
SVGGradient
"
)
aResult
)
;
}
#
endif
private
:
nsSVGGradientFrame
*
GetReferencedGradient
(
)
;
void
GetStopFrames
(
nsTArray
<
nsIFrame
*
>
*
aStopFrames
)
;
const
mozilla
:
:
nsSVGAnimatedTransformList
*
GetGradientTransformList
(
nsIContent
*
aDefault
)
;
gfxMatrix
GetGradientTransform
(
nsIFrame
*
aSource
const
gfxRect
*
aOverrideBounds
)
;
protected
:
virtual
bool
GradientVectorLengthIsZero
(
)
=
0
;
virtual
already_AddRefed
<
gfxPattern
>
CreateGradient
(
)
=
0
;
uint16_t
GetEnumValue
(
uint32_t
aIndex
nsIContent
*
aDefault
)
;
uint16_t
GetEnumValue
(
uint32_t
aIndex
)
{
return
GetEnumValue
(
aIndex
mContent
)
;
}
uint16_t
GetGradientUnits
(
)
;
uint16_t
GetSpreadMethod
(
)
;
virtual
mozilla
:
:
dom
:
:
SVGLinearGradientElement
*
GetLinearGradientWithLength
(
uint32_t
aIndex
mozilla
:
:
dom
:
:
SVGLinearGradientElement
*
aDefault
)
;
virtual
mozilla
:
:
dom
:
:
SVGRadialGradientElement
*
GetRadialGradientWithLength
(
uint32_t
aIndex
mozilla
:
:
dom
:
:
SVGRadialGradientElement
*
aDefault
)
;
nsIFrame
*
mSource
;
private
:
bool
mLoopFlag
;
bool
mNoHRefURI
;
}
;
class
nsSVGLinearGradientFrame
final
:
public
nsSVGGradientFrame
{
friend
nsIFrame
*
NS_NewSVGLinearGradientFrame
(
nsIPresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
protected
:
explicit
nsSVGLinearGradientFrame
(
ComputedStyle
*
aStyle
)
:
nsSVGGradientFrame
(
aStyle
kClassID
)
{
}
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsSVGLinearGradientFrame
)
#
ifdef
DEBUG
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
#
endif
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
SVGLinearGradient
"
)
aResult
)
;
}
#
endif
protected
:
float
GetLengthValue
(
uint32_t
aIndex
)
;
virtual
mozilla
:
:
dom
:
:
SVGLinearGradientElement
*
GetLinearGradientWithLength
(
uint32_t
aIndex
mozilla
:
:
dom
:
:
SVGLinearGradientElement
*
aDefault
)
override
;
virtual
bool
GradientVectorLengthIsZero
(
)
override
;
virtual
already_AddRefed
<
gfxPattern
>
CreateGradient
(
)
override
;
}
;
class
nsSVGRadialGradientFrame
final
:
public
nsSVGGradientFrame
{
friend
nsIFrame
*
NS_NewSVGRadialGradientFrame
(
nsIPresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
protected
:
explicit
nsSVGRadialGradientFrame
(
ComputedStyle
*
aStyle
)
:
nsSVGGradientFrame
(
aStyle
kClassID
)
{
}
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsSVGRadialGradientFrame
)
#
ifdef
DEBUG
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
#
endif
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
SVGRadialGradient
"
)
aResult
)
;
}
#
endif
protected
:
float
GetLengthValue
(
uint32_t
aIndex
)
;
float
GetLengthValue
(
uint32_t
aIndex
float
aDefaultValue
)
;
float
GetLengthValueFromElement
(
uint32_t
aIndex
mozilla
:
:
dom
:
:
SVGRadialGradientElement
&
aElement
)
;
virtual
mozilla
:
:
dom
:
:
SVGRadialGradientElement
*
GetRadialGradientWithLength
(
uint32_t
aIndex
mozilla
:
:
dom
:
:
SVGRadialGradientElement
*
aDefault
)
override
;
virtual
bool
GradientVectorLengthIsZero
(
)
override
;
virtual
already_AddRefed
<
gfxPattern
>
CreateGradient
(
)
override
;
}
;
#
endif
