#
ifndef
NSDISPLAYLISTINVALIDATION_H_
#
define
NSDISPLAYLISTINVALIDATION_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
FrameLayerBuilder
.
h
"
#
include
"
imgIContainer
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
gfxRect
.
h
"
#
include
"
mozilla
/
gfx
/
MatrixFwd
.
h
"
class
nsDisplayBackgroundImage
;
class
nsCharClipDisplayItem
;
class
nsDisplayItem
;
class
nsDisplayListBuilder
;
class
nsDisplayTableItem
;
class
nsDisplayThemedBackground
;
class
nsDisplaySVGEffects
;
class
nsDisplayMask
;
class
nsDisplayFilter
;
namespace
mozilla
{
namespace
gfx
{
struct
Color
;
}
}
class
nsDisplayItemGeometry
{
public
:
nsDisplayItemGeometry
(
nsDisplayItem
*
aItem
nsDisplayListBuilder
*
aBuilder
)
;
virtual
~
nsDisplayItemGeometry
(
)
;
const
nsRect
&
ComputeInvalidationRegion
(
)
{
return
mBounds
;
}
virtual
void
MoveBy
(
const
nsPoint
&
aOffset
)
{
mBounds
.
MoveBy
(
aOffset
)
;
}
virtual
bool
InvalidateForSyncDecodeImages
(
)
const
{
return
false
;
}
nsRect
mBounds
;
}
;
class
nsDisplayItemGenericGeometry
:
public
nsDisplayItemGeometry
{
public
:
nsDisplayItemGenericGeometry
(
nsDisplayItem
*
aItem
nsDisplayListBuilder
*
aBuilder
)
;
virtual
void
MoveBy
(
const
nsPoint
&
aOffset
)
override
;
nsRect
mBorderRect
;
}
;
bool
ShouldSyncDecodeImages
(
nsDisplayListBuilder
*
aBuilder
)
;
template
<
typename
T
>
class
nsImageGeometryMixin
{
public
:
nsImageGeometryMixin
(
nsDisplayItem
*
aItem
nsDisplayListBuilder
*
aBuilder
)
:
mLastDrawResult
(
mozilla
:
:
image
:
:
ImgDrawResult
:
:
NOT_READY
)
mWaitingForPaint
(
false
)
{
auto
lastGeometry
=
static_cast
<
T
*
>
(
mozilla
:
:
FrameLayerBuilder
:
:
GetMostRecentGeometry
(
aItem
)
)
;
if
(
lastGeometry
)
{
mLastDrawResult
=
lastGeometry
-
>
mLastDrawResult
;
mWaitingForPaint
=
lastGeometry
-
>
mWaitingForPaint
;
}
if
(
ShouldSyncDecodeImages
(
aBuilder
)
&
&
ShouldInvalidateToSyncDecodeImages
(
)
)
{
mWaitingForPaint
=
true
;
}
}
static
void
UpdateDrawResult
(
nsDisplayItem
*
aItem
mozilla
:
:
image
:
:
ImgDrawResult
aResult
)
{
auto
lastGeometry
=
static_cast
<
T
*
>
(
mozilla
:
:
FrameLayerBuilder
:
:
GetMostRecentGeometry
(
aItem
)
)
;
if
(
lastGeometry
)
{
lastGeometry
-
>
mLastDrawResult
=
aResult
;
lastGeometry
-
>
mWaitingForPaint
=
false
;
}
}
bool
ShouldInvalidateToSyncDecodeImages
(
)
const
{
if
(
mWaitingForPaint
)
{
return
false
;
}
if
(
mLastDrawResult
=
=
mozilla
:
:
image
:
:
ImgDrawResult
:
:
SUCCESS
|
|
mLastDrawResult
=
=
mozilla
:
:
image
:
:
ImgDrawResult
:
:
BAD_IMAGE
)
{
return
false
;
}
return
true
;
}
private
:
mozilla
:
:
image
:
:
ImgDrawResult
mLastDrawResult
;
bool
mWaitingForPaint
;
}
;
class
nsDisplayItemGenericImageGeometry
:
public
nsDisplayItemGenericGeometry
public
nsImageGeometryMixin
<
nsDisplayItemGenericImageGeometry
>
{
public
:
nsDisplayItemGenericImageGeometry
(
nsDisplayItem
*
aItem
nsDisplayListBuilder
*
aBuilder
)
:
nsDisplayItemGenericGeometry
(
aItem
aBuilder
)
nsImageGeometryMixin
(
aItem
aBuilder
)
{
}
virtual
bool
InvalidateForSyncDecodeImages
(
)
const
override
{
return
ShouldInvalidateToSyncDecodeImages
(
)
;
}
}
;
class
nsDisplayItemBoundsGeometry
:
public
nsDisplayItemGeometry
{
public
:
nsDisplayItemBoundsGeometry
(
nsDisplayItem
*
aItem
nsDisplayListBuilder
*
aBuilder
)
;
bool
mHasRoundedCorners
;
}
;
class
nsDisplayBorderGeometry
:
public
nsDisplayItemGeometry
public
nsImageGeometryMixin
<
nsDisplayBorderGeometry
>
{
public
:
nsDisplayBorderGeometry
(
nsDisplayItem
*
aItem
nsDisplayListBuilder
*
aBuilder
)
;
virtual
bool
InvalidateForSyncDecodeImages
(
)
const
override
{
return
ShouldInvalidateToSyncDecodeImages
(
)
;
}
}
;
class
nsDisplayBackgroundGeometry
:
public
nsDisplayItemGeometry
public
nsImageGeometryMixin
<
nsDisplayBackgroundGeometry
>
{
public
:
nsDisplayBackgroundGeometry
(
nsDisplayBackgroundImage
*
aItem
nsDisplayListBuilder
*
aBuilder
)
;
virtual
void
MoveBy
(
const
nsPoint
&
aOffset
)
override
;
virtual
bool
InvalidateForSyncDecodeImages
(
)
const
override
{
return
ShouldInvalidateToSyncDecodeImages
(
)
;
}
nsRect
mPositioningArea
;
nsRect
mDestRect
;
}
;
class
nsDisplayThemedBackgroundGeometry
:
public
nsDisplayItemGeometry
{
public
:
nsDisplayThemedBackgroundGeometry
(
nsDisplayThemedBackground
*
aItem
nsDisplayListBuilder
*
aBuilder
)
;
virtual
void
MoveBy
(
const
nsPoint
&
aOffset
)
override
;
nsRect
mPositioningArea
;
bool
mWindowIsActive
;
}
;
class
nsDisplayBoxShadowInnerGeometry
:
public
nsDisplayItemGeometry
{
public
:
nsDisplayBoxShadowInnerGeometry
(
nsDisplayItem
*
aItem
nsDisplayListBuilder
*
aBuilder
)
;
virtual
void
MoveBy
(
const
nsPoint
&
aOffset
)
override
;
nsRect
mPaddingRect
;
}
;
class
nsDisplayBoxShadowOuterGeometry
:
public
nsDisplayItemGenericGeometry
{
public
:
nsDisplayBoxShadowOuterGeometry
(
nsDisplayItem
*
aItem
nsDisplayListBuilder
*
aBuilder
float
aOpacity
)
;
float
mOpacity
;
}
;
class
nsDisplaySolidColorGeometry
:
public
nsDisplayItemBoundsGeometry
{
public
:
nsDisplaySolidColorGeometry
(
nsDisplayItem
*
aItem
nsDisplayListBuilder
*
aBuilder
nscolor
aColor
)
:
nsDisplayItemBoundsGeometry
(
aItem
aBuilder
)
mColor
(
aColor
)
{
}
nscolor
mColor
;
}
;
class
nsDisplaySolidColorRegionGeometry
:
public
nsDisplayItemBoundsGeometry
{
public
:
nsDisplaySolidColorRegionGeometry
(
nsDisplayItem
*
aItem
nsDisplayListBuilder
*
aBuilder
const
nsRegion
&
aRegion
mozilla
:
:
gfx
:
:
Color
aColor
)
:
nsDisplayItemBoundsGeometry
(
aItem
aBuilder
)
mRegion
(
aRegion
)
mColor
(
aColor
)
{
}
virtual
void
MoveBy
(
const
nsPoint
&
aOffset
)
override
;
nsRegion
mRegion
;
mozilla
:
:
gfx
:
:
Color
mColor
;
}
;
class
nsDisplaySVGEffectGeometry
:
public
nsDisplayItemGeometry
{
public
:
nsDisplaySVGEffectGeometry
(
nsDisplaySVGEffects
*
aItem
nsDisplayListBuilder
*
aBuilder
)
;
virtual
void
MoveBy
(
const
nsPoint
&
aOffset
)
override
;
gfxRect
mBBox
;
gfxPoint
mUserSpaceOffset
;
nsPoint
mFrameOffsetToReferenceFrame
;
}
;
class
nsDisplayMaskGeometry
:
public
nsDisplaySVGEffectGeometry
public
nsImageGeometryMixin
<
nsDisplayMaskGeometry
>
{
public
:
nsDisplayMaskGeometry
(
nsDisplayMask
*
aItem
nsDisplayListBuilder
*
aBuilder
)
;
virtual
bool
InvalidateForSyncDecodeImages
(
)
const
override
{
return
ShouldInvalidateToSyncDecodeImages
(
)
;
}
nsTArray
<
nsRect
>
mDestRects
;
float
mOpacity
;
bool
mHandleOpacity
;
}
;
class
nsDisplayFilterGeometry
:
public
nsDisplaySVGEffectGeometry
public
nsImageGeometryMixin
<
nsDisplayFilterGeometry
>
{
public
:
nsDisplayFilterGeometry
(
nsDisplayFilter
*
aItem
nsDisplayListBuilder
*
aBuilder
)
;
virtual
bool
InvalidateForSyncDecodeImages
(
)
const
override
{
return
ShouldInvalidateToSyncDecodeImages
(
)
;
}
}
;
class
nsCharClipGeometry
:
public
nsDisplayItemGenericGeometry
{
public
:
nsCharClipGeometry
(
nsCharClipDisplayItem
*
aItem
nsDisplayListBuilder
*
aBuilder
)
;
nscoord
mVisIStartEdge
;
nscoord
mVisIEndEdge
;
}
;
class
nsDisplayTableItemGeometry
:
public
nsDisplayItemGenericGeometry
public
nsImageGeometryMixin
<
nsDisplayTableItemGeometry
>
{
public
:
nsDisplayTableItemGeometry
(
nsDisplayTableItem
*
aItem
nsDisplayListBuilder
*
aBuilder
const
nsPoint
&
aFrameOffsetToViewport
)
;
virtual
bool
InvalidateForSyncDecodeImages
(
)
const
override
{
return
ShouldInvalidateToSyncDecodeImages
(
)
;
}
nsPoint
mFrameOffsetToViewport
;
}
;
class
nsDisplayOpacityGeometry
:
public
nsDisplayItemGenericGeometry
{
public
:
nsDisplayOpacityGeometry
(
nsDisplayItem
*
aItem
nsDisplayListBuilder
*
aBuilder
float
aOpacity
)
:
nsDisplayItemGenericGeometry
(
aItem
aBuilder
)
mOpacity
(
aOpacity
)
{
}
float
mOpacity
;
}
;
class
nsDisplayTransformGeometry
:
public
nsDisplayItemGeometry
{
public
:
nsDisplayTransformGeometry
(
nsDisplayItem
*
aItem
nsDisplayListBuilder
*
aBuilder
const
mozilla
:
:
gfx
:
:
Matrix4x4Flagged
&
aTransform
int32_t
aAppUnitsPerDevPixel
)
:
nsDisplayItemGeometry
(
aItem
aBuilder
)
mTransform
(
aTransform
)
mAppUnitsPerDevPixel
(
aAppUnitsPerDevPixel
)
{
}
void
MoveBy
(
const
nsPoint
&
aOffset
)
override
{
nsDisplayItemGeometry
:
:
MoveBy
(
aOffset
)
;
mTransform
.
PostTranslate
(
NSAppUnitsToFloatPixels
(
aOffset
.
x
mAppUnitsPerDevPixel
)
NSAppUnitsToFloatPixels
(
aOffset
.
y
mAppUnitsPerDevPixel
)
0
.
0f
)
;
}
mozilla
:
:
gfx
:
:
Matrix4x4Flagged
mTransform
;
int32_t
mAppUnitsPerDevPixel
;
}
;
#
endif
