#
include
"
ActiveLayerTracker
.
h
"
#
include
"
mozilla
/
AnimationUtils
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
EffectSet
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
include
"
nsExpirationTracker
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsAnimationManager
.
h
"
#
include
"
nsStyleTransformMatrix
.
h
"
#
include
"
nsTransitionManager
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsDOMCSSDeclaration
.
h
"
namespace
mozilla
{
using
namespace
gfx
;
class
LayerActivity
{
public
:
enum
ActivityIndex
{
ACTIVITY_OPACITY
ACTIVITY_TRANSFORM
ACTIVITY_LEFT
ACTIVITY_TOP
ACTIVITY_RIGHT
ACTIVITY_BOTTOM
ACTIVITY_BACKGROUND_POSITION
ACTIVITY_SCALE
ACTIVITY_TRIGGERED_REPAINT
ACTIVITY_COUNT
}
;
explicit
LayerActivity
(
nsIFrame
*
aFrame
)
:
mFrame
(
aFrame
)
mContent
(
nullptr
)
mContentActive
(
false
)
{
PodArrayZero
(
mRestyleCounts
)
;
}
~
LayerActivity
(
)
;
nsExpirationState
*
GetExpirationState
(
)
{
return
&
mState
;
}
uint8_t
&
RestyleCountForProperty
(
nsCSSPropertyID
aProperty
)
{
return
mRestyleCounts
[
GetActivityIndexForProperty
(
aProperty
)
]
;
}
static
ActivityIndex
GetActivityIndexForProperty
(
nsCSSPropertyID
aProperty
)
{
switch
(
aProperty
)
{
case
eCSSProperty_opacity
:
return
ACTIVITY_OPACITY
;
case
eCSSProperty_transform
:
case
eCSSProperty_translate
:
case
eCSSProperty_rotate
:
case
eCSSProperty_scale
:
return
ACTIVITY_TRANSFORM
;
case
eCSSProperty_left
:
return
ACTIVITY_LEFT
;
case
eCSSProperty_top
:
return
ACTIVITY_TOP
;
case
eCSSProperty_right
:
return
ACTIVITY_RIGHT
;
case
eCSSProperty_bottom
:
return
ACTIVITY_BOTTOM
;
case
eCSSProperty_background_position
:
return
ACTIVITY_BACKGROUND_POSITION
;
case
eCSSProperty_background_position_x
:
return
ACTIVITY_BACKGROUND_POSITION
;
case
eCSSProperty_background_position_y
:
return
ACTIVITY_BACKGROUND_POSITION
;
default
:
MOZ_ASSERT
(
false
)
;
return
ACTIVITY_OPACITY
;
}
}
static
ActivityIndex
GetActivityIndexForPropertySet
(
const
nsCSSPropertyIDSet
&
aPropertySet
)
{
if
(
aPropertySet
.
IsSubsetOf
(
nsCSSPropertyIDSet
:
:
TransformLikeProperties
(
)
)
)
{
return
ACTIVITY_TRANSFORM
;
}
MOZ_ASSERT
(
aPropertySet
.
IsSubsetOf
(
nsCSSPropertyIDSet
:
:
OpacityProperties
(
)
)
)
;
return
ACTIVITY_OPACITY
;
}
nsIFrame
*
mFrame
;
nsIContent
*
mContent
;
nsExpirationState
mState
;
Maybe
<
Size
>
mPreviousTransformScale
;
WeakFrame
mAnimatingScrollHandlerFrame
;
EnumSet
<
ActivityIndex
>
mScrollHandlerInducedActivity
;
uint8_t
mRestyleCounts
[
ACTIVITY_COUNT
]
;
bool
mContentActive
;
}
;
class
LayerActivityTracker
final
:
public
nsExpirationTracker
<
LayerActivity
4
>
{
public
:
enum
{
GENERATION_MS
=
100
}
;
explicit
LayerActivityTracker
(
nsIEventTarget
*
aEventTarget
)
:
nsExpirationTracker
<
LayerActivity
4
>
(
GENERATION_MS
"
LayerActivityTracker
"
aEventTarget
)
mDestroying
(
false
)
{
}
~
LayerActivityTracker
(
)
override
{
mDestroying
=
true
;
AgeAllGenerations
(
)
;
}
void
NotifyExpired
(
LayerActivity
*
aObject
)
override
;
public
:
WeakFrame
mCurrentScrollHandlerFrame
;
private
:
bool
mDestroying
;
}
;
static
LayerActivityTracker
*
gLayerActivityTracker
=
nullptr
;
LayerActivity
:
:
~
LayerActivity
(
)
{
if
(
mFrame
|
|
mContent
)
{
NS_ASSERTION
(
gLayerActivityTracker
"
Should
still
have
a
tracker
"
)
;
gLayerActivityTracker
-
>
RemoveObject
(
this
)
;
}
}
NS_DECLARE_FRAME_PROPERTY_DELETABLE
(
LayerActivityProperty
LayerActivity
)
void
LayerActivityTracker
:
:
NotifyExpired
(
LayerActivity
*
aObject
)
{
if
(
!
mDestroying
&
&
aObject
-
>
mAnimatingScrollHandlerFrame
.
IsAlive
(
)
)
{
PodArrayZero
(
aObject
-
>
mRestyleCounts
)
;
MarkUsed
(
aObject
)
;
return
;
}
RemoveObject
(
aObject
)
;
nsIFrame
*
f
=
aObject
-
>
mFrame
;
nsIContent
*
c
=
aObject
-
>
mContent
;
aObject
-
>
mFrame
=
nullptr
;
aObject
-
>
mContent
=
nullptr
;
MOZ_ASSERT
(
(
f
=
=
nullptr
)
!
=
(
c
=
=
nullptr
)
"
A
LayerActivity
object
should
always
have
a
reference
to
either
"
"
its
frame
or
its
content
"
)
;
if
(
f
)
{
if
(
f
-
>
PresContext
(
)
-
>
GetContainerWeak
(
)
)
{
f
-
>
SchedulePaint
(
nsIFrame
:
:
PAINT_DEFAULT
false
)
;
}
f
-
>
RemoveStateBits
(
NS_FRAME_HAS_LAYER_ACTIVITY_PROPERTY
)
;
f
-
>
DeleteProperty
(
LayerActivityProperty
(
)
)
;
}
else
{
c
-
>
DeleteProperty
(
nsGkAtoms
:
:
LayerActivity
)
;
}
}
static
LayerActivity
*
GetLayerActivity
(
nsIFrame
*
aFrame
)
{
if
(
!
aFrame
-
>
HasAnyStateBits
(
NS_FRAME_HAS_LAYER_ACTIVITY_PROPERTY
)
)
{
return
nullptr
;
}
return
aFrame
-
>
GetProperty
(
LayerActivityProperty
(
)
)
;
}
static
LayerActivity
*
GetLayerActivityForUpdate
(
nsIFrame
*
aFrame
)
{
LayerActivity
*
layerActivity
=
GetLayerActivity
(
aFrame
)
;
if
(
layerActivity
)
{
gLayerActivityTracker
-
>
MarkUsed
(
layerActivity
)
;
}
else
{
if
(
!
gLayerActivityTracker
)
{
gLayerActivityTracker
=
new
LayerActivityTracker
(
SystemGroup
:
:
EventTargetFor
(
TaskCategory
:
:
Other
)
)
;
}
layerActivity
=
new
LayerActivity
(
aFrame
)
;
gLayerActivityTracker
-
>
AddObject
(
layerActivity
)
;
aFrame
-
>
AddStateBits
(
NS_FRAME_HAS_LAYER_ACTIVITY_PROPERTY
)
;
aFrame
-
>
SetProperty
(
LayerActivityProperty
(
)
layerActivity
)
;
}
return
layerActivity
;
}
static
void
IncrementMutationCount
(
uint8_t
*
aCount
)
{
*
aCount
=
uint8_t
(
std
:
:
min
(
0xFF
*
aCount
+
1
)
)
;
}
void
ActiveLayerTracker
:
:
TransferActivityToContent
(
nsIFrame
*
aFrame
nsIContent
*
aContent
)
{
if
(
!
aFrame
-
>
HasAnyStateBits
(
NS_FRAME_HAS_LAYER_ACTIVITY_PROPERTY
)
)
{
return
;
}
LayerActivity
*
layerActivity
=
aFrame
-
>
RemoveProperty
(
LayerActivityProperty
(
)
)
;
aFrame
-
>
RemoveStateBits
(
NS_FRAME_HAS_LAYER_ACTIVITY_PROPERTY
)
;
if
(
!
layerActivity
)
{
return
;
}
layerActivity
-
>
mFrame
=
nullptr
;
layerActivity
-
>
mContent
=
aContent
;
aContent
-
>
SetProperty
(
nsGkAtoms
:
:
LayerActivity
layerActivity
nsINode
:
:
DeleteProperty
<
LayerActivity
>
true
)
;
}
void
ActiveLayerTracker
:
:
TransferActivityToFrame
(
nsIContent
*
aContent
nsIFrame
*
aFrame
)
{
LayerActivity
*
layerActivity
=
static_cast
<
LayerActivity
*
>
(
aContent
-
>
UnsetProperty
(
nsGkAtoms
:
:
LayerActivity
)
)
;
if
(
!
layerActivity
)
{
return
;
}
layerActivity
-
>
mContent
=
nullptr
;
layerActivity
-
>
mFrame
=
aFrame
;
aFrame
-
>
AddStateBits
(
NS_FRAME_HAS_LAYER_ACTIVITY_PROPERTY
)
;
aFrame
-
>
SetProperty
(
LayerActivityProperty
(
)
layerActivity
)
;
}
static
void
IncrementScaleRestyleCountIfNeeded
(
nsIFrame
*
aFrame
LayerActivity
*
aActivity
)
{
const
nsStyleDisplay
*
display
=
aFrame
-
>
StyleDisplay
(
)
;
if
(
!
display
-
>
HasTransformProperty
(
)
&
&
!
display
-
>
HasIndividualTransform
(
)
&
&
!
(
display
-
>
mMotion
&
&
display
-
>
mMotion
-
>
HasPath
(
)
)
)
{
aActivity
-
>
mPreviousTransformScale
=
Nothing
(
)
;
IncrementMutationCount
(
&
aActivity
-
>
mRestyleCounts
[
LayerActivity
:
:
ACTIVITY_SCALE
]
)
;
return
;
}
nsStyleTransformMatrix
:
:
TransformReferenceBox
refBox
(
aFrame
)
;
Matrix4x4
transform
=
nsStyleTransformMatrix
:
:
ReadTransforms
(
display
-
>
mTranslate
display
-
>
mRotate
display
-
>
mScale
nsLayoutUtils
:
:
ResolveMotionPath
(
aFrame
)
display
-
>
mTransform
refBox
AppUnitsPerCSSPixel
(
)
)
;
Matrix
transform2D
;
if
(
!
transform
.
Is2D
(
&
transform2D
)
)
{
aActivity
-
>
mPreviousTransformScale
=
Nothing
(
)
;
IncrementMutationCount
(
&
aActivity
-
>
mRestyleCounts
[
LayerActivity
:
:
ACTIVITY_SCALE
]
)
;
return
;
}
Size
scale
=
transform2D
.
ScaleFactors
(
true
)
;
if
(
aActivity
-
>
mPreviousTransformScale
=
=
Some
(
scale
)
)
{
return
;
}
aActivity
-
>
mPreviousTransformScale
=
Some
(
scale
)
;
IncrementMutationCount
(
&
aActivity
-
>
mRestyleCounts
[
LayerActivity
:
:
ACTIVITY_SCALE
]
)
;
}
void
ActiveLayerTracker
:
:
NotifyRestyle
(
nsIFrame
*
aFrame
nsCSSPropertyID
aProperty
)
{
LayerActivity
*
layerActivity
=
GetLayerActivityForUpdate
(
aFrame
)
;
uint8_t
&
mutationCount
=
layerActivity
-
>
RestyleCountForProperty
(
aProperty
)
;
IncrementMutationCount
(
&
mutationCount
)
;
if
(
nsCSSPropertyIDSet
:
:
TransformLikeProperties
(
)
.
HasProperty
(
aProperty
)
)
{
IncrementScaleRestyleCountIfNeeded
(
aFrame
layerActivity
)
;
}
}
void
ActiveLayerTracker
:
:
NotifyOffsetRestyle
(
nsIFrame
*
aFrame
)
{
LayerActivity
*
layerActivity
=
GetLayerActivityForUpdate
(
aFrame
)
;
IncrementMutationCount
(
&
layerActivity
-
>
mRestyleCounts
[
LayerActivity
:
:
ACTIVITY_LEFT
]
)
;
IncrementMutationCount
(
&
layerActivity
-
>
mRestyleCounts
[
LayerActivity
:
:
ACTIVITY_TOP
]
)
;
IncrementMutationCount
(
&
layerActivity
-
>
mRestyleCounts
[
LayerActivity
:
:
ACTIVITY_RIGHT
]
)
;
IncrementMutationCount
(
&
layerActivity
-
>
mRestyleCounts
[
LayerActivity
:
:
ACTIVITY_BOTTOM
]
)
;
}
void
ActiveLayerTracker
:
:
NotifyAnimated
(
nsIFrame
*
aFrame
nsCSSPropertyID
aProperty
const
nsAString
&
aNewValue
nsDOMCSSDeclaration
*
aDOMCSSDecl
)
{
LayerActivity
*
layerActivity
=
GetLayerActivityForUpdate
(
aFrame
)
;
uint8_t
&
mutationCount
=
layerActivity
-
>
RestyleCountForProperty
(
aProperty
)
;
if
(
mutationCount
!
=
0xFF
)
{
nsAutoString
oldValue
;
aDOMCSSDecl
-
>
GetPropertyValue
(
aProperty
oldValue
)
;
if
(
aNewValue
!
=
oldValue
)
{
mutationCount
=
0xFF
;
}
}
}
void
ActiveLayerTracker
:
:
NotifyAnimatedFromScrollHandler
(
nsIFrame
*
aFrame
nsCSSPropertyID
aProperty
nsIFrame
*
aScrollFrame
)
{
if
(
aFrame
-
>
PresContext
(
)
!
=
aScrollFrame
-
>
PresContext
(
)
)
{
return
;
}
LayerActivity
*
layerActivity
=
GetLayerActivityForUpdate
(
aFrame
)
;
LayerActivity
:
:
ActivityIndex
activityIndex
=
LayerActivity
:
:
GetActivityIndexForProperty
(
aProperty
)
;
if
(
layerActivity
-
>
mAnimatingScrollHandlerFrame
.
GetFrame
(
)
!
=
aScrollFrame
)
{
layerActivity
-
>
mScrollHandlerInducedActivity
.
clear
(
)
;
layerActivity
-
>
mAnimatingScrollHandlerFrame
=
aScrollFrame
;
}
layerActivity
-
>
mScrollHandlerInducedActivity
+
=
activityIndex
;
}
static
bool
IsPresContextInScriptAnimationCallback
(
nsPresContext
*
aPresContext
)
{
if
(
aPresContext
-
>
RefreshDriver
(
)
-
>
IsInRefresh
(
)
)
{
return
true
;
}
nsPIDOMWindowInner
*
win
=
aPresContext
-
>
Document
(
)
-
>
GetInnerWindow
(
)
;
return
win
&
&
win
-
>
IsRunningTimeout
(
)
;
}
void
ActiveLayerTracker
:
:
NotifyInlineStyleRuleModified
(
nsIFrame
*
aFrame
nsCSSPropertyID
aProperty
const
nsAString
&
aNewValue
nsDOMCSSDeclaration
*
aDOMCSSDecl
)
{
if
(
IsPresContextInScriptAnimationCallback
(
aFrame
-
>
PresContext
(
)
)
)
{
NotifyAnimated
(
aFrame
aProperty
aNewValue
aDOMCSSDecl
)
;
}
if
(
gLayerActivityTracker
&
&
gLayerActivityTracker
-
>
mCurrentScrollHandlerFrame
.
IsAlive
(
)
)
{
NotifyAnimatedFromScrollHandler
(
aFrame
aProperty
gLayerActivityTracker
-
>
mCurrentScrollHandlerFrame
.
GetFrame
(
)
)
;
}
}
void
ActiveLayerTracker
:
:
NotifyNeedsRepaint
(
nsIFrame
*
aFrame
)
{
LayerActivity
*
layerActivity
=
GetLayerActivityForUpdate
(
aFrame
)
;
if
(
IsPresContextInScriptAnimationCallback
(
aFrame
-
>
PresContext
(
)
)
)
{
layerActivity
-
>
mRestyleCounts
[
LayerActivity
:
:
ACTIVITY_TRIGGERED_REPAINT
]
=
0xFF
;
}
else
{
IncrementMutationCount
(
&
layerActivity
-
>
mRestyleCounts
[
LayerActivity
:
:
ACTIVITY_TRIGGERED_REPAINT
]
)
;
}
}
static
bool
CheckScrollInducedActivity
(
LayerActivity
*
aLayerActivity
LayerActivity
:
:
ActivityIndex
aActivityIndex
nsDisplayListBuilder
*
aBuilder
)
{
if
(
!
aLayerActivity
-
>
mScrollHandlerInducedActivity
.
contains
(
aActivityIndex
)
|
|
!
aLayerActivity
-
>
mAnimatingScrollHandlerFrame
.
IsAlive
(
)
)
{
return
false
;
}
nsIScrollableFrame
*
scrollFrame
=
do_QueryFrame
(
aLayerActivity
-
>
mAnimatingScrollHandlerFrame
.
GetFrame
(
)
)
;
if
(
scrollFrame
&
&
(
!
aBuilder
|
|
scrollFrame
-
>
IsScrollingActive
(
aBuilder
)
)
)
{
return
true
;
}
aLayerActivity
-
>
mAnimatingScrollHandlerFrame
=
nullptr
;
aLayerActivity
-
>
mScrollHandlerInducedActivity
.
clear
(
)
;
return
false
;
}
bool
ActiveLayerTracker
:
:
IsBackgroundPositionAnimated
(
nsDisplayListBuilder
*
aBuilder
nsIFrame
*
aFrame
)
{
LayerActivity
*
layerActivity
=
GetLayerActivity
(
aFrame
)
;
if
(
layerActivity
)
{
LayerActivity
:
:
ActivityIndex
activityIndex
=
LayerActivity
:
:
ActivityIndex
:
:
ACTIVITY_BACKGROUND_POSITION
;
if
(
layerActivity
-
>
mRestyleCounts
[
activityIndex
]
>
=
2
)
{
if
(
layerActivity
-
>
mRestyleCounts
[
LayerActivity
:
:
ACTIVITY_TRIGGERED_REPAINT
]
<
2
)
{
return
true
;
}
}
if
(
CheckScrollInducedActivity
(
layerActivity
activityIndex
aBuilder
)
)
{
return
true
;
}
}
return
nsLayoutUtils
:
:
HasEffectiveAnimation
(
aFrame
nsCSSPropertyIDSet
(
{
eCSSProperty_background_position_x
eCSSProperty_background_position_y
}
)
)
;
}
bool
ActiveLayerTracker
:
:
IsTransformAnimated
(
nsDisplayListBuilder
*
aBuilder
nsIFrame
*
aFrame
)
{
return
IsStyleAnimated
(
aBuilder
aFrame
nsCSSPropertyIDSet
:
:
TransformLikeProperties
(
)
)
;
}
bool
ActiveLayerTracker
:
:
IsTransformMaybeAnimated
(
nsIFrame
*
aFrame
)
{
return
IsStyleAnimated
(
nullptr
aFrame
nsCSSPropertyIDSet
:
:
TransformLikeProperties
(
)
)
;
}
bool
ActiveLayerTracker
:
:
IsStyleAnimated
(
nsDisplayListBuilder
*
aBuilder
nsIFrame
*
aFrame
const
nsCSSPropertyIDSet
&
aPropertySet
)
{
MOZ_ASSERT
(
aPropertySet
.
IsSubsetOf
(
nsCSSPropertyIDSet
:
:
TransformLikeProperties
(
)
)
|
|
aPropertySet
.
IsSubsetOf
(
nsCSSPropertyIDSet
:
:
OpacityProperties
(
)
)
"
Only
subset
of
opacity
or
transform
-
like
properties
set
calls
this
"
)
;
const
nsIFrame
*
styleFrame
=
nsLayoutUtils
:
:
GetStyleFrame
(
aFrame
)
;
const
nsCSSPropertyIDSet
transformSet
=
nsCSSPropertyIDSet
:
:
TransformLikeProperties
(
)
;
if
(
(
styleFrame
&
&
(
styleFrame
-
>
StyleDisplay
(
)
-
>
mWillChange
.
bits
&
StyleWillChangeBits_TRANSFORM
)
)
&
&
aPropertySet
.
Intersects
(
transformSet
)
&
&
(
!
aBuilder
|
|
aBuilder
-
>
IsInWillChangeBudget
(
aFrame
aFrame
-
>
GetSize
(
)
)
)
)
{
return
true
;
}
if
(
(
aFrame
-
>
StyleDisplay
(
)
-
>
mWillChange
.
bits
&
StyleWillChangeBits_OPACITY
)
&
&
aPropertySet
.
Intersects
(
nsCSSPropertyIDSet
:
:
OpacityProperties
(
)
)
&
&
(
!
aBuilder
|
|
aBuilder
-
>
IsInWillChangeBudget
(
aFrame
aFrame
-
>
GetSize
(
)
)
)
)
{
return
true
;
}
LayerActivity
*
layerActivity
=
GetLayerActivity
(
aFrame
)
;
if
(
layerActivity
)
{
LayerActivity
:
:
ActivityIndex
activityIndex
=
LayerActivity
:
:
GetActivityIndexForPropertySet
(
aPropertySet
)
;
if
(
layerActivity
-
>
mRestyleCounts
[
activityIndex
]
>
=
2
)
{
if
(
layerActivity
-
>
mRestyleCounts
[
LayerActivity
:
:
ACTIVITY_TRIGGERED_REPAINT
]
<
2
|
|
(
aPropertySet
.
Intersects
(
transformSet
)
&
&
IsScaleSubjectToAnimation
(
aFrame
)
)
)
{
return
true
;
}
}
if
(
CheckScrollInducedActivity
(
layerActivity
activityIndex
aBuilder
)
)
{
return
true
;
}
}
if
(
aPropertySet
.
Intersects
(
transformSet
)
&
&
aFrame
-
>
Combines3DTransformWithAncestors
(
)
)
{
return
IsStyleAnimated
(
aBuilder
aFrame
-
>
GetParent
(
)
aPropertySet
)
;
}
return
nsLayoutUtils
:
:
HasEffectiveAnimation
(
aFrame
aPropertySet
)
;
}
bool
ActiveLayerTracker
:
:
IsOffsetStyleAnimated
(
nsIFrame
*
aFrame
)
{
LayerActivity
*
layerActivity
=
GetLayerActivity
(
aFrame
)
;
if
(
layerActivity
)
{
if
(
layerActivity
-
>
mRestyleCounts
[
LayerActivity
:
:
ACTIVITY_LEFT
]
>
=
2
|
|
layerActivity
-
>
mRestyleCounts
[
LayerActivity
:
:
ACTIVITY_TOP
]
>
=
2
|
|
layerActivity
-
>
mRestyleCounts
[
LayerActivity
:
:
ACTIVITY_RIGHT
]
>
=
2
|
|
layerActivity
-
>
mRestyleCounts
[
LayerActivity
:
:
ACTIVITY_BOTTOM
]
>
=
2
)
{
return
true
;
}
}
return
false
;
}
bool
ActiveLayerTracker
:
:
IsScaleSubjectToAnimation
(
nsIFrame
*
aFrame
)
{
LayerActivity
*
layerActivity
=
GetLayerActivity
(
aFrame
)
;
if
(
layerActivity
&
&
layerActivity
-
>
mRestyleCounts
[
LayerActivity
:
:
ACTIVITY_SCALE
]
>
=
2
)
{
return
true
;
}
return
AnimationUtils
:
:
FrameHasAnimatedScale
(
aFrame
)
;
}
void
ActiveLayerTracker
:
:
NotifyContentChange
(
nsIFrame
*
aFrame
)
{
LayerActivity
*
layerActivity
=
GetLayerActivityForUpdate
(
aFrame
)
;
layerActivity
-
>
mContentActive
=
true
;
}
bool
ActiveLayerTracker
:
:
IsContentActive
(
nsIFrame
*
aFrame
)
{
LayerActivity
*
layerActivity
=
GetLayerActivity
(
aFrame
)
;
return
layerActivity
&
&
layerActivity
-
>
mContentActive
;
}
void
ActiveLayerTracker
:
:
SetCurrentScrollHandlerFrame
(
nsIFrame
*
aFrame
)
{
if
(
!
gLayerActivityTracker
)
{
gLayerActivityTracker
=
new
LayerActivityTracker
(
SystemGroup
:
:
EventTargetFor
(
TaskCategory
:
:
Other
)
)
;
}
gLayerActivityTracker
-
>
mCurrentScrollHandlerFrame
=
aFrame
;
}
void
ActiveLayerTracker
:
:
Shutdown
(
)
{
delete
gLayerActivityTracker
;
gLayerActivityTracker
=
nullptr
;
}
}
