#
ifndef
MOZILLA_PAINTING_WINDOWRENDERER_H
#
define
MOZILLA_PAINTING_WINDOWRENDERER_H
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
dom
/
Animation
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
class
gfxContext
;
namespace
mozilla
{
namespace
layers
{
class
LayerManager
;
class
WebRenderLayerManager
;
class
KnowsCompositor
;
class
CompositorBridgeChild
;
class
FrameUniformityData
;
class
PersistentBufferProvider
;
}
class
FallbackRenderer
;
class
nsDisplayListBuilder
;
class
nsDisplayList
;
class
FrameRecorder
{
public
:
virtual
uint32_t
StartFrameTimeRecording
(
int32_t
aBufferSize
)
;
virtual
void
StopFrameTimeRecording
(
uint32_t
aStartIndex
nsTArray
<
float
>
&
aFrameIntervals
)
;
void
RecordFrame
(
)
;
private
:
struct
FramesTimingRecording
{
FramesTimingRecording
(
)
:
mNextIndex
(
0
)
mLatestStartIndex
(
0
)
mCurrentRunStartIndex
(
0
)
mIsPaused
(
true
)
{
}
nsTArray
<
float
>
mIntervals
;
TimeStamp
mLastFrameTime
;
uint32_t
mNextIndex
;
uint32_t
mLatestStartIndex
;
uint32_t
mCurrentRunStartIndex
;
bool
mIsPaused
;
}
;
FramesTimingRecording
mRecording
;
}
;
class
WindowRenderer
:
public
FrameRecorder
{
NS_INLINE_DECL_REFCOUNTING
(
WindowRenderer
)
public
:
virtual
layers
:
:
LayerManager
*
AsLayerManager
(
)
{
return
nullptr
;
}
virtual
layers
:
:
WebRenderLayerManager
*
AsWebRender
(
)
{
return
nullptr
;
}
virtual
FallbackRenderer
*
AsFallback
(
)
{
return
nullptr
;
}
virtual
bool
BeginTransaction
(
const
nsCString
&
aURL
=
nsCString
(
)
)
=
0
;
enum
EndTransactionFlags
{
END_DEFAULT
=
0
END_NO_IMMEDIATE_REDRAW
=
1
<
<
0
END_NO_COMPOSITE
=
1
<
<
1
END_NO_REMOTE_COMPOSITE
=
1
<
<
2
}
;
virtual
bool
EndEmptyTransaction
(
EndTransactionFlags
aFlags
=
END_DEFAULT
)
=
0
;
virtual
void
Destroy
(
)
{
}
virtual
layers
:
:
LayersBackend
GetBackendType
(
)
=
0
;
virtual
layers
:
:
LayersBackend
GetCompositorBackendType
(
)
{
return
GetBackendType
(
)
;
}
virtual
bool
NeedsWidgetInvalidation
(
)
{
return
true
;
}
virtual
void
FlushRendering
(
)
{
}
virtual
void
WaitOnTransactionProcessed
(
)
{
}
virtual
bool
IsCompositingCheap
(
)
{
return
true
;
}
virtual
void
GetBackendName
(
nsAString
&
aName
)
=
0
;
virtual
void
GetFrameUniformity
(
layers
:
:
FrameUniformityData
*
aOutData
)
{
}
virtual
bool
AddPendingScrollUpdateForNextTransaction
(
layers
:
:
ScrollableLayerGuid
:
:
ViewID
aScrollId
const
ScrollPositionUpdate
&
aUpdateInfo
)
{
return
false
;
}
virtual
already_AddRefed
<
layers
:
:
PersistentBufferProvider
>
CreatePersistentBufferProvider
(
const
mozilla
:
:
gfx
:
:
IntSize
&
aSize
mozilla
:
:
gfx
:
:
SurfaceFormat
aFormat
)
;
virtual
layers
:
:
KnowsCompositor
*
AsKnowsCompositor
(
)
{
return
nullptr
;
}
virtual
layers
:
:
CompositorBridgeChild
*
GetCompositorBridgeChild
(
)
{
return
nullptr
;
}
void
AddPartialPrerenderedAnimation
(
uint64_t
aCompositorAnimationId
dom
:
:
Animation
*
aAnimation
)
;
void
RemovePartialPrerenderedAnimation
(
uint64_t
aCompositorAnimationId
dom
:
:
Animation
*
aAnimation
)
;
void
UpdatePartialPrerenderedAnimations
(
const
nsTArray
<
uint64_t
>
&
aJankedAnimations
)
;
const
TimeStamp
&
GetAnimationReadyTime
(
)
const
{
return
mAnimationReadyTime
;
}
protected
:
virtual
~
WindowRenderer
(
)
=
default
;
nsRefPtrHashtable
<
nsUint64HashKey
dom
:
:
Animation
>
mPartialPrerenderedAnimations
;
TimeStamp
mAnimationReadyTime
;
}
;
class
FallbackRenderer
:
public
WindowRenderer
{
public
:
FallbackRenderer
*
AsFallback
(
)
override
{
return
this
;
}
void
SetTarget
(
gfxContext
*
aContext
layers
:
:
BufferMode
aDoubleBuffering
)
;
bool
BeginTransaction
(
const
nsCString
&
aURL
=
nsCString
(
)
)
override
;
bool
EndEmptyTransaction
(
EndTransactionFlags
aFlags
=
END_DEFAULT
)
override
{
return
false
;
}
layers
:
:
LayersBackend
GetBackendType
(
)
override
{
return
layers
:
:
LayersBackend
:
:
LAYERS_NONE
;
}
virtual
void
GetBackendName
(
nsAString
&
name
)
override
{
name
.
AssignLiteral
(
"
Fallback
"
)
;
}
bool
IsCompositingCheap
(
)
override
{
return
false
;
}
void
EndTransactionWithColor
(
const
nsIntRect
&
aRect
const
gfx
:
:
DeviceColor
&
aColor
)
;
void
EndTransactionWithList
(
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
int32_t
aAppUnitsPerDevPixel
EndTransactionFlags
aFlags
)
;
RefPtr
<
gfxContext
>
mTarget
;
layers
:
:
BufferMode
mBufferMode
;
}
;
}
#
endif
