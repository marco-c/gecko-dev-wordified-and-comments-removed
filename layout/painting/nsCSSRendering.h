#
ifndef
nsCSSRendering_h___
#
define
nsCSSRendering_h___
#
include
"
gfxBlur
.
h
"
#
include
"
gfxContext
.
h
"
#
include
"
imgIContainer
.
h
"
#
include
"
mozilla
/
gfx
/
PathHelpers
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
TypedEnumBits
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsImageRenderer
.
h
"
#
include
"
nsCSSRenderingBorders
.
h
"
class
gfxContext
;
class
nsStyleContext
;
class
nsPresContext
;
namespace
mozilla
{
namespace
gfx
{
struct
Color
;
class
DrawTarget
;
}
namespace
layers
{
class
ImageContainer
;
class
StackingContextHelper
;
class
WebRenderDisplayItemLayer
;
class
WebRenderParentCommand
;
class
LayerManager
;
}
namespace
wr
{
class
DisplayListBuilder
;
}
enum
class
PaintBorderFlags
:
uint8_t
{
SYNC_DECODE_IMAGES
=
1
<
<
0
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
PaintBorderFlags
)
}
struct
nsBackgroundLayerState
{
typedef
mozilla
:
:
gfx
:
:
CompositionOp
CompositionOp
;
typedef
mozilla
:
:
nsImageRenderer
nsImageRenderer
;
nsBackgroundLayerState
(
nsIFrame
*
aForFrame
const
nsStyleImage
*
aImage
uint32_t
aFlags
)
:
mImageRenderer
(
aForFrame
aImage
aFlags
)
{
}
nsImageRenderer
mImageRenderer
;
nsRect
mDestArea
;
nsRect
mFillArea
;
nsPoint
mAnchor
;
nsSize
mRepeatSize
;
}
;
struct
nsCSSRendering
{
typedef
mozilla
:
:
gfx
:
:
Color
Color
;
typedef
mozilla
:
:
gfx
:
:
CompositionOp
CompositionOp
;
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
typedef
mozilla
:
:
gfx
:
:
Float
Float
;
typedef
mozilla
:
:
gfx
:
:
Point
Point
;
typedef
mozilla
:
:
gfx
:
:
Rect
Rect
;
typedef
mozilla
:
:
gfx
:
:
Size
Size
;
typedef
mozilla
:
:
gfx
:
:
RectCornerRadii
RectCornerRadii
;
typedef
mozilla
:
:
layers
:
:
LayerManager
LayerManager
;
typedef
mozilla
:
:
image
:
:
DrawResult
DrawResult
;
typedef
nsIFrame
:
:
Sides
Sides
;
static
void
Init
(
)
;
static
void
Shutdown
(
)
;
static
bool
GetShadowInnerRadii
(
nsIFrame
*
aFrame
const
nsRect
&
aFrameArea
RectCornerRadii
&
aOutInnerRadii
)
;
static
nsRect
GetBoxShadowInnerPaddingRect
(
nsIFrame
*
aFrame
const
nsRect
&
aFrameArea
)
;
static
bool
ShouldPaintBoxShadowInner
(
nsIFrame
*
aFrame
)
;
static
void
PaintBoxShadowInner
(
nsPresContext
*
aPresContext
gfxContext
&
aRenderingContext
nsIFrame
*
aForFrame
const
nsRect
&
aFrameArea
)
;
static
bool
GetBorderRadii
(
const
nsRect
&
aFrameRect
const
nsRect
&
aBorderRect
nsIFrame
*
aFrame
RectCornerRadii
&
aOutRadii
)
;
static
nsRect
GetShadowRect
(
const
nsRect
aFrameArea
bool
aNativeTheme
nsIFrame
*
aForFrame
)
;
static
mozilla
:
:
gfx
:
:
Color
GetShadowColor
(
nsCSSShadowItem
*
aShadow
nsIFrame
*
aFrame
float
aOpacity
)
;
static
bool
HasBoxShadowNativeTheme
(
nsIFrame
*
aFrame
bool
&
aMaybeHasBorderRadius
)
;
static
void
PaintBoxShadowOuter
(
nsPresContext
*
aPresContext
gfxContext
&
aRenderingContext
nsIFrame
*
aForFrame
const
nsRect
&
aFrameArea
const
nsRect
&
aDirtyRect
float
aOpacity
=
1
.
0
)
;
static
void
ComputePixelRadii
(
const
nscoord
*
aAppUnitsRadii
nscoord
aAppUnitsPerPixel
RectCornerRadii
*
oBorderRadii
)
;
static
DrawResult
PaintBorder
(
nsPresContext
*
aPresContext
gfxContext
&
aRenderingContext
nsIFrame
*
aForFrame
const
nsRect
&
aDirtyRect
const
nsRect
&
aBorderArea
nsStyleContext
*
aStyleContext
mozilla
:
:
PaintBorderFlags
aFlags
Sides
aSkipSides
=
Sides
(
)
)
;
static
DrawResult
PaintBorderWithStyleBorder
(
nsPresContext
*
aPresContext
gfxContext
&
aRenderingContext
nsIFrame
*
aForFrame
const
nsRect
&
aDirtyRect
const
nsRect
&
aBorderArea
const
nsStyleBorder
&
aBorderStyle
nsStyleContext
*
aStyleContext
mozilla
:
:
PaintBorderFlags
aFlags
Sides
aSkipSides
=
Sides
(
)
)
;
static
mozilla
:
:
Maybe
<
nsCSSBorderRenderer
>
CreateBorderRenderer
(
nsPresContext
*
aPresContext
DrawTarget
*
aDrawTarget
nsIFrame
*
aForFrame
const
nsRect
&
aDirtyRect
const
nsRect
&
aBorderArea
nsStyleContext
*
aStyleContext
Sides
aSkipSides
=
Sides
(
)
)
;
static
mozilla
:
:
Maybe
<
nsCSSBorderRenderer
>
CreateBorderRendererWithStyleBorder
(
nsPresContext
*
aPresContext
DrawTarget
*
aDrawTarget
nsIFrame
*
aForFrame
const
nsRect
&
aDirtyRect
const
nsRect
&
aBorderArea
const
nsStyleBorder
&
aBorderStyle
nsStyleContext
*
aStyleContext
Sides
aSkipSides
=
Sides
(
)
)
;
static
mozilla
:
:
Maybe
<
nsCSSBorderRenderer
>
CreateBorderRendererForOutline
(
nsPresContext
*
aPresContext
gfxContext
*
aRenderingContext
nsIFrame
*
aForFrame
const
nsRect
&
aDirtyRect
const
nsRect
&
aBorderArea
nsStyleContext
*
aStyleContext
)
;
static
void
PaintOutline
(
nsPresContext
*
aPresContext
gfxContext
&
aRenderingContext
nsIFrame
*
aForFrame
const
nsRect
&
aDirtyRect
const
nsRect
&
aBorderArea
nsStyleContext
*
aStyleContext
)
;
static
void
PaintFocus
(
nsPresContext
*
aPresContext
DrawTarget
*
aDrawTarget
const
nsRect
&
aFocusRect
nscolor
aColor
)
;
static
void
PaintGradient
(
nsPresContext
*
aPresContext
gfxContext
&
aContext
nsStyleGradient
*
aGradient
const
nsRect
&
aDirtyRect
const
nsRect
&
aDest
const
nsRect
&
aFill
const
nsSize
&
aRepeatSize
const
mozilla
:
:
CSSIntRect
&
aSrc
const
nsSize
&
aIntrinsiceSize
float
aOpacity
=
1
.
0
)
;
static
nsIFrame
*
FindBackgroundStyleFrame
(
nsIFrame
*
aForFrame
)
;
static
bool
IsCanvasFrame
(
nsIFrame
*
aFrame
)
;
static
bool
FindBackground
(
nsIFrame
*
aForFrame
nsStyleContext
*
*
aBackgroundSC
)
;
static
nsStyleContext
*
FindRootFrameBackground
(
nsIFrame
*
aForFrame
)
;
static
nsStyleContext
*
FindCanvasBackground
(
nsIFrame
*
aForFrame
nsIFrame
*
aRootElementFrame
)
{
MOZ_ASSERT
(
IsCanvasFrame
(
aForFrame
)
"
not
a
canvas
frame
"
)
;
if
(
aRootElementFrame
)
return
FindRootFrameBackground
(
aRootElementFrame
)
;
return
aForFrame
-
>
StyleContext
(
)
;
}
static
nsIFrame
*
FindNonTransparentBackgroundFrame
(
nsIFrame
*
aFrame
bool
aStartAtParent
=
false
)
;
static
nscolor
DetermineBackgroundColor
(
nsPresContext
*
aPresContext
nsStyleContext
*
aStyleContext
nsIFrame
*
aFrame
bool
&
aDrawBackgroundImage
bool
&
aDrawBackgroundColor
)
;
static
nsRect
ComputeImageLayerPositioningArea
(
nsPresContext
*
aPresContext
nsIFrame
*
aForFrame
const
nsRect
&
aBorderArea
const
nsStyleImageLayers
:
:
Layer
&
aLayer
nsIFrame
*
*
aAttachedToFrame
bool
*
aOutTransformedFixed
)
;
static
nscoord
ComputeRoundedSize
(
nscoord
aCurrentSize
nscoord
aPositioningSize
)
;
static
nscoord
ComputeBorderSpacedRepeatSize
(
nscoord
aImageDimension
nscoord
aAvailableSpace
nscoord
&
aSpace
)
;
static
nsBackgroundLayerState
PrepareImageLayer
(
nsPresContext
*
aPresContext
nsIFrame
*
aForFrame
uint32_t
aFlags
const
nsRect
&
aBorderArea
const
nsRect
&
aBGClipRect
const
nsStyleImageLayers
:
:
Layer
&
aLayer
bool
*
aOutIsTransformedFixed
=
nullptr
)
;
struct
ImageLayerClipState
{
nsRect
mBGClipArea
;
nsRect
mAdditionalBGClipArea
;
nsRect
mDirtyRectInAppUnits
;
gfxRect
mDirtyRectInDevPx
;
nscoord
mRadii
[
8
]
;
RectCornerRadii
mClippedRadii
;
bool
mHasRoundedCorners
;
bool
mHasAdditionalBGClipArea
;
bool
mCustomClip
;
ImageLayerClipState
(
)
:
mHasRoundedCorners
(
false
)
mHasAdditionalBGClipArea
(
false
)
mCustomClip
(
false
)
{
memset
(
mRadii
0
sizeof
(
nscoord
)
*
8
)
;
}
bool
IsValid
(
)
const
;
}
;
static
void
GetImageLayerClip
(
const
nsStyleImageLayers
:
:
Layer
&
aLayer
nsIFrame
*
aForFrame
const
nsStyleBorder
&
aBorder
const
nsRect
&
aBorderArea
const
nsRect
&
aCallerDirtyRect
bool
aWillPaintBorder
nscoord
aAppUnitsPerPixel
ImageLayerClipState
*
aClipState
)
;
enum
{
PAINTBG_WILL_PAINT_BORDER
=
0x01
PAINTBG_SYNC_DECODE_IMAGES
=
0x02
PAINTBG_TO_WINDOW
=
0x04
PAINTBG_MASK_IMAGE
=
0x08
}
;
struct
PaintBGParams
{
nsPresContext
&
presCtx
;
nsRect
dirtyRect
;
nsRect
borderArea
;
nsIFrame
*
frame
;
uint32_t
paintFlags
;
nsRect
*
bgClipRect
=
nullptr
;
int32_t
layer
;
CompositionOp
compositionOp
;
float
opacity
;
static
PaintBGParams
ForAllLayers
(
nsPresContext
&
aPresCtx
const
nsRect
&
aDirtyRect
const
nsRect
&
aBorderArea
nsIFrame
*
aFrame
uint32_t
aPaintFlags
float
aOpacity
=
1
.
0
)
;
static
PaintBGParams
ForSingleLayer
(
nsPresContext
&
aPresCtx
const
nsRect
&
aDirtyRect
const
nsRect
&
aBorderArea
nsIFrame
*
aFrame
uint32_t
aPaintFlags
int32_t
aLayer
CompositionOp
aCompositionOp
=
CompositionOp
:
:
OP_OVER
float
aOpacity
=
1
.
0
)
;
private
:
PaintBGParams
(
nsPresContext
&
aPresCtx
const
nsRect
&
aDirtyRect
const
nsRect
&
aBorderArea
nsIFrame
*
aFrame
uint32_t
aPaintFlags
int32_t
aLayer
CompositionOp
aCompositionOp
float
aOpacity
)
:
presCtx
(
aPresCtx
)
dirtyRect
(
aDirtyRect
)
borderArea
(
aBorderArea
)
frame
(
aFrame
)
paintFlags
(
aPaintFlags
)
layer
(
aLayer
)
compositionOp
(
aCompositionOp
)
opacity
(
aOpacity
)
{
}
}
;
static
DrawResult
PaintStyleImageLayer
(
const
PaintBGParams
&
aParams
gfxContext
&
aRenderingCtx
)
;
static
DrawResult
PaintStyleImageLayerWithSC
(
const
PaintBGParams
&
aParams
gfxContext
&
aRenderingCtx
nsStyleContext
*
mBackgroundSC
const
nsStyleBorder
&
aBorder
)
;
static
bool
CanBuildWebRenderDisplayItemsForStyleImageLayer
(
LayerManager
*
aManager
nsPresContext
&
aPresCtx
nsIFrame
*
aFrame
const
nsStyleBackground
*
aBackgroundStyle
int32_t
aLayer
)
;
static
DrawResult
BuildWebRenderDisplayItemsForStyleImageLayer
(
const
PaintBGParams
&
aParams
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
const
mozilla
:
:
layers
:
:
StackingContextHelper
&
aSc
nsTArray
<
mozilla
:
:
layers
:
:
WebRenderParentCommand
>
&
aParentCommands
mozilla
:
:
layers
:
:
WebRenderDisplayItemLayer
*
aLayer
mozilla
:
:
layers
:
:
WebRenderLayerManager
*
aManager
nsDisplayItem
*
aItem
)
;
static
DrawResult
BuildWebRenderDisplayItemsForStyleImageLayerWithSC
(
const
PaintBGParams
&
aParams
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
const
mozilla
:
:
layers
:
:
StackingContextHelper
&
aSc
nsTArray
<
mozilla
:
:
layers
:
:
WebRenderParentCommand
>
&
aParentCommands
mozilla
:
:
layers
:
:
WebRenderDisplayItemLayer
*
aLayer
mozilla
:
:
layers
:
:
WebRenderLayerManager
*
aManager
nsDisplayItem
*
aItem
nsStyleContext
*
mBackgroundSC
const
nsStyleBorder
&
aBorder
)
;
static
nsRect
GetBackgroundLayerRect
(
nsPresContext
*
aPresContext
nsIFrame
*
aForFrame
const
nsRect
&
aBorderArea
const
nsRect
&
aClipRect
const
nsStyleImageLayers
:
:
Layer
&
aLayer
uint32_t
aFlags
)
;
static
void
BeginFrameTreesLocked
(
)
;
static
void
EndFrameTreesLocked
(
)
;
static
void
DrawTableBorderSegment
(
DrawTarget
&
aDrawTarget
uint8_t
aBorderStyle
nscolor
aBorderColor
nscolor
aBGColor
const
nsRect
&
aBorderRect
int32_t
aAppUnitsPerDevPixel
int32_t
aAppUnitsPerCSSPixel
uint8_t
aStartBevelSide
=
0
nscoord
aStartBevelOffset
=
0
uint8_t
aEndBevelSide
=
0
nscoord
aEndBevelOffset
=
0
)
;
struct
DecorationRectParams
{
Size
lineSize
;
Float
ascent
=
0
.
0f
;
Float
offset
=
0
.
0f
;
Float
descentLimit
=
-
1
.
0f
;
uint8_t
decoration
=
NS_STYLE_TEXT_DECORATION_LINE_UNDERLINE
;
uint8_t
style
=
NS_STYLE_TEXT_DECORATION_STYLE_NONE
;
bool
vertical
=
false
;
}
;
struct
PaintDecorationLineParams
:
DecorationRectParams
{
Rect
dirtyRect
;
Point
pt
;
nscolor
color
=
NS_RGBA
(
0
0
0
0
)
;
Float
icoordInFrame
=
0
.
0f
;
}
;
static
void
PaintDecorationLine
(
nsIFrame
*
aFrame
DrawTarget
&
aDrawTarget
const
PaintDecorationLineParams
&
aParams
)
;
static
Rect
DecorationLineToPath
(
const
PaintDecorationLineParams
&
aParams
)
;
static
nsRect
GetTextDecorationRect
(
nsPresContext
*
aPresContext
const
DecorationRectParams
&
aParams
)
;
static
CompositionOp
GetGFXBlendMode
(
uint8_t
mBlendMode
)
{
switch
(
mBlendMode
)
{
case
NS_STYLE_BLEND_NORMAL
:
return
CompositionOp
:
:
OP_OVER
;
case
NS_STYLE_BLEND_MULTIPLY
:
return
CompositionOp
:
:
OP_MULTIPLY
;
case
NS_STYLE_BLEND_SCREEN
:
return
CompositionOp
:
:
OP_SCREEN
;
case
NS_STYLE_BLEND_OVERLAY
:
return
CompositionOp
:
:
OP_OVERLAY
;
case
NS_STYLE_BLEND_DARKEN
:
return
CompositionOp
:
:
OP_DARKEN
;
case
NS_STYLE_BLEND_LIGHTEN
:
return
CompositionOp
:
:
OP_LIGHTEN
;
case
NS_STYLE_BLEND_COLOR_DODGE
:
return
CompositionOp
:
:
OP_COLOR_DODGE
;
case
NS_STYLE_BLEND_COLOR_BURN
:
return
CompositionOp
:
:
OP_COLOR_BURN
;
case
NS_STYLE_BLEND_HARD_LIGHT
:
return
CompositionOp
:
:
OP_HARD_LIGHT
;
case
NS_STYLE_BLEND_SOFT_LIGHT
:
return
CompositionOp
:
:
OP_SOFT_LIGHT
;
case
NS_STYLE_BLEND_DIFFERENCE
:
return
CompositionOp
:
:
OP_DIFFERENCE
;
case
NS_STYLE_BLEND_EXCLUSION
:
return
CompositionOp
:
:
OP_EXCLUSION
;
case
NS_STYLE_BLEND_HUE
:
return
CompositionOp
:
:
OP_HUE
;
case
NS_STYLE_BLEND_SATURATION
:
return
CompositionOp
:
:
OP_SATURATION
;
case
NS_STYLE_BLEND_COLOR
:
return
CompositionOp
:
:
OP_COLOR
;
case
NS_STYLE_BLEND_LUMINOSITY
:
return
CompositionOp
:
:
OP_LUMINOSITY
;
default
:
MOZ_ASSERT
(
false
)
;
return
CompositionOp
:
:
OP_OVER
;
}
}
static
CompositionOp
GetGFXCompositeMode
(
uint8_t
aCompositeMode
)
{
switch
(
aCompositeMode
)
{
case
NS_STYLE_MASK_COMPOSITE_ADD
:
return
CompositionOp
:
:
OP_OVER
;
case
NS_STYLE_MASK_COMPOSITE_SUBTRACT
:
return
CompositionOp
:
:
OP_OUT
;
case
NS_STYLE_MASK_COMPOSITE_INTERSECT
:
return
CompositionOp
:
:
OP_IN
;
case
NS_STYLE_MASK_COMPOSITE_EXCLUDE
:
return
CompositionOp
:
:
OP_XOR
;
default
:
MOZ_ASSERT
(
false
)
;
return
CompositionOp
:
:
OP_OVER
;
}
}
protected
:
static
gfxRect
GetTextDecorationRectInternal
(
const
Point
&
aPt
const
DecorationRectParams
&
aParams
)
;
static
Rect
ExpandPaintingRectForDecorationLine
(
nsIFrame
*
aFrame
const
uint8_t
aStyle
const
Rect
&
aClippedRect
const
Float
aICoordInFrame
const
Float
aCycleLength
bool
aVertical
)
;
}
;
class
nsContextBoxBlur
{
typedef
mozilla
:
:
gfx
:
:
Color
Color
;
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
typedef
mozilla
:
:
gfx
:
:
RectCornerRadii
RectCornerRadii
;
public
:
enum
{
FORCE_MASK
=
0x01
}
;
gfxContext
*
Init
(
const
nsRect
&
aRect
nscoord
aSpreadRadius
nscoord
aBlurRadius
int32_t
aAppUnitsPerDevPixel
gfxContext
*
aDestinationCtx
const
nsRect
&
aDirtyRect
const
gfxRect
*
aSkipRect
uint32_t
aFlags
=
0
)
;
void
DoPaint
(
)
;
gfxContext
*
GetContext
(
)
;
static
nsMargin
GetBlurRadiusMargin
(
nscoord
aBlurRadius
int32_t
aAppUnitsPerDevPixel
)
;
static
void
BlurRectangle
(
gfxContext
*
aDestinationCtx
const
nsRect
&
aRect
int32_t
aAppUnitsPerDevPixel
RectCornerRadii
*
aCornerRadii
nscoord
aBlurRadius
const
Color
&
aShadowColor
const
nsRect
&
aDirtyRect
const
gfxRect
&
aSkipRect
)
;
bool
InsetBoxBlur
(
gfxContext
*
aDestinationCtx
mozilla
:
:
gfx
:
:
Rect
aDestinationRect
mozilla
:
:
gfx
:
:
Rect
aShadowClipRect
mozilla
:
:
gfx
:
:
Color
&
aShadowColor
nscoord
aBlurRadiusAppUnits
nscoord
aSpreadRadiusAppUnits
int32_t
aAppUnitsPerDevPixel
bool
aHasBorderRadius
RectCornerRadii
&
aInnerClipRectRadii
mozilla
:
:
gfx
:
:
Rect
aSkipRect
mozilla
:
:
gfx
:
:
Point
aShadowOffset
)
;
protected
:
static
void
GetBlurAndSpreadRadius
(
DrawTarget
*
aDestDrawTarget
int32_t
aAppUnitsPerDevPixel
nscoord
aBlurRadius
nscoord
aSpreadRadius
mozilla
:
:
gfx
:
:
IntSize
&
aOutBlurRadius
mozilla
:
:
gfx
:
:
IntSize
&
aOutSpreadRadius
bool
aConstrainSpreadRadius
=
true
)
;
gfxAlphaBoxBlur
mAlphaBoxBlur
;
RefPtr
<
gfxContext
>
mContext
;
gfxContext
*
mDestinationCtx
;
bool
mPreTransformed
;
}
;
#
endif
