#
ifndef
DISPLAYITEMCLIPCHAIN_H_
#
define
DISPLAYITEMCLIPCHAIN_H_
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
DisplayItemClip
.
h
"
#
include
"
nsString
.
h
"
class
nsIScrollableFrame
;
namespace
mozilla
{
struct
ActiveScrolledRoot
;
struct
DisplayItemClipChain
{
static
const
DisplayItemClip
*
ClipForASR
(
const
DisplayItemClipChain
*
aClipChain
const
ActiveScrolledRoot
*
aASR
)
;
static
bool
Equal
(
const
DisplayItemClipChain
*
aClip1
const
DisplayItemClipChain
*
aClip2
)
;
static
uint32_t
Hash
(
const
DisplayItemClipChain
*
aClip
)
;
static
nsCString
ToString
(
const
DisplayItemClipChain
*
aClipChain
)
;
bool
HasRoundedCorners
(
)
const
;
void
AddRef
(
)
{
mRefCount
+
+
;
}
void
Release
(
)
{
MOZ_ASSERT
(
mRefCount
>
0
)
;
mRefCount
-
-
;
}
DisplayItemClipChain
(
const
DisplayItemClip
&
aClip
const
ActiveScrolledRoot
*
aASR
const
DisplayItemClipChain
*
aParent
)
:
mClip
(
aClip
)
mASR
(
aASR
)
mParent
(
aParent
)
#
ifdef
DEBUG
mOnStack
(
true
)
#
endif
{
}
DisplayItemClipChain
(
)
#
ifdef
DEBUG
:
mOnStack
(
true
)
#
endif
{
}
DisplayItemClip
mClip
;
const
ActiveScrolledRoot
*
mASR
;
RefPtr
<
const
DisplayItemClipChain
>
mParent
;
uint32_t
mRefCount
=
0
;
#
ifdef
DEBUG
bool
mOnStack
;
#
endif
}
;
struct
DisplayItemClipChainHasher
{
typedef
const
DisplayItemClipChain
*
Key
;
std
:
:
size_t
operator
(
)
(
const
Key
&
aKey
)
const
{
return
DisplayItemClipChain
:
:
Hash
(
aKey
)
;
}
}
;
struct
DisplayItemClipChainEqualer
{
typedef
const
DisplayItemClipChain
*
Key
;
bool
operator
(
)
(
const
Key
&
lhs
const
Key
&
rhs
)
const
{
return
DisplayItemClipChain
:
:
Equal
(
lhs
rhs
)
;
}
}
;
}
#
endif
