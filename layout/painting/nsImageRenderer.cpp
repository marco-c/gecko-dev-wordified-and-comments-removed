#
include
"
nsImageRenderer
.
h
"
nsSize
CSSSizeOrRatio
:
:
ComputeConcreteSize
(
)
const
{
NS_ASSERTION
(
CanComputeConcreteSize
(
)
"
Cannot
compute
"
)
;
if
(
mHasWidth
&
&
mHasHeight
)
{
return
nsSize
(
mWidth
mHeight
)
;
}
if
(
mHasWidth
)
{
nscoord
height
=
NSCoordSaturatingNonnegativeMultiply
(
mWidth
double
(
mRatio
.
height
)
/
mRatio
.
width
)
;
return
nsSize
(
mWidth
height
)
;
}
MOZ_ASSERT
(
mHasHeight
)
;
nscoord
width
=
NSCoordSaturatingNonnegativeMultiply
(
mHeight
double
(
mRatio
.
width
)
/
mRatio
.
height
)
;
return
nsSize
(
width
mHeight
)
;
}
nsImageRenderer
:
:
nsImageRenderer
(
nsIFrame
*
aForFrame
const
nsStyleImage
*
aImage
uint32_t
aFlags
)
:
mForFrame
(
aForFrame
)
mImage
(
aImage
)
mType
(
aImage
-
>
GetType
(
)
)
mImageContainer
(
nullptr
)
mGradientData
(
nullptr
)
mPaintServerFrame
(
nullptr
)
mPrepareResult
(
DrawResult
:
:
NOT_READY
)
mSize
(
0
0
)
mFlags
(
aFlags
)
mExtendMode
(
ExtendMode
:
:
CLAMP
)
mMaskOp
(
NS_STYLE_MASK_MODE_MATCH_SOURCE
)
{
}
nsImageRenderer
:
:
~
nsImageRenderer
(
)
{
}
static
bool
ShouldTreatAsCompleteDueToSyncDecode
(
const
nsStyleImage
*
aImage
uint32_t
aFlags
)
{
if
(
!
(
aFlags
&
nsImageRenderer
:
:
FLAG_SYNC_DECODE_IMAGES
)
)
{
return
false
;
}
if
(
aImage
-
>
GetType
(
)
!
=
eStyleImageType_Image
)
{
return
false
;
}
imgRequestProxy
*
req
=
aImage
-
>
GetImageData
(
)
;
if
(
!
req
)
{
return
false
;
}
uint32_t
status
=
0
;
if
(
NS_FAILED
(
req
-
>
GetImageStatus
(
&
status
)
)
)
{
return
false
;
}
if
(
status
&
imgIRequest
:
:
STATUS_ERROR
)
{
nsCOMPtr
<
imgIContainer
>
image
;
req
-
>
GetImage
(
getter_AddRefs
(
image
)
)
;
return
bool
(
image
)
;
}
if
(
!
(
status
&
imgIRequest
:
:
STATUS_LOAD_COMPLETE
)
)
{
return
false
;
}
return
true
;
}
bool
nsImageRenderer
:
:
PrepareImage
(
)
{
if
(
mImage
-
>
IsEmpty
(
)
)
{
mPrepareResult
=
DrawResult
:
:
BAD_IMAGE
;
return
false
;
}
if
(
!
mImage
-
>
IsComplete
(
)
)
{
bool
frameComplete
=
mImage
-
>
StartDecoding
(
)
;
if
(
!
(
frameComplete
|
|
mImage
-
>
IsComplete
(
)
)
&
&
!
ShouldTreatAsCompleteDueToSyncDecode
(
mImage
mFlags
)
)
{
mPrepareResult
=
DrawResult
:
:
NOT_READY
;
return
false
;
}
}
switch
(
mType
)
{
case
eStyleImageType_Image
:
{
MOZ_ASSERT
(
mImage
-
>
GetImageData
(
)
"
must
have
image
data
since
we
checked
IsEmpty
above
"
)
;
nsCOMPtr
<
imgIContainer
>
srcImage
;
DebugOnly
<
nsresult
>
rv
=
mImage
-
>
GetImageData
(
)
-
>
GetImage
(
getter_AddRefs
(
srcImage
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
&
&
srcImage
"
If
GetImage
(
)
is
failing
mImage
-
>
IsComplete
(
)
"
"
should
have
returned
false
"
)
;
if
(
!
mImage
-
>
GetCropRect
(
)
)
{
mImageContainer
.
swap
(
srcImage
)
;
}
else
{
nsIntRect
actualCropRect
;
bool
isEntireImage
;
bool
success
=
mImage
-
>
ComputeActualCropRect
(
actualCropRect
&
isEntireImage
)
;
NS_ASSERTION
(
success
"
ComputeActualCropRect
(
)
should
not
fail
here
"
)
;
if
(
!
success
|
|
actualCropRect
.
IsEmpty
(
)
)
{
mPrepareResult
=
DrawResult
:
:
BAD_IMAGE
;
return
false
;
}
if
(
isEntireImage
)
{
mImageContainer
.
swap
(
srcImage
)
;
}
else
{
nsCOMPtr
<
imgIContainer
>
subImage
=
ImageOps
:
:
Clip
(
srcImage
actualCropRect
Nothing
(
)
)
;
mImageContainer
.
swap
(
subImage
)
;
}
}
mPrepareResult
=
DrawResult
:
:
SUCCESS
;
break
;
}
case
eStyleImageType_Gradient
:
mGradientData
=
mImage
-
>
GetGradientData
(
)
;
mPrepareResult
=
DrawResult
:
:
SUCCESS
;
break
;
case
eStyleImageType_Element
:
{
nsAutoString
elementId
=
NS_LITERAL_STRING
(
"
#
"
)
+
nsDependentString
(
mImage
-
>
GetElementId
(
)
)
;
nsCOMPtr
<
nsIURI
>
targetURI
;
nsCOMPtr
<
nsIURI
>
base
=
mForFrame
-
>
GetContent
(
)
-
>
GetBaseURI
(
)
;
nsContentUtils
:
:
NewURIWithDocumentCharset
(
getter_AddRefs
(
targetURI
)
elementId
mForFrame
-
>
GetContent
(
)
-
>
GetUncomposedDoc
(
)
base
)
;
nsSVGPaintingProperty
*
property
=
nsSVGEffects
:
:
GetPaintingPropertyForURI
(
targetURI
mForFrame
-
>
FirstContinuation
(
)
nsSVGEffects
:
:
BackgroundImageProperty
(
)
)
;
if
(
!
property
)
{
mPrepareResult
=
DrawResult
:
:
BAD_IMAGE
;
return
false
;
}
mImageElementSurface
=
nsLayoutUtils
:
:
SurfaceFromElement
(
property
-
>
GetReferencedElement
(
)
)
;
if
(
!
mImageElementSurface
.
GetSourceSurface
(
)
)
{
mPaintServerFrame
=
property
-
>
GetReferencedFrame
(
)
;
if
(
!
mPaintServerFrame
)
{
mPrepareResult
=
DrawResult
:
:
BAD_IMAGE
;
return
false
;
}
}
mPrepareResult
=
DrawResult
:
:
SUCCESS
;
break
;
}
case
eStyleImageType_Null
:
default
:
break
;
}
return
IsReady
(
)
;
}
CSSSizeOrRatio
nsImageRenderer
:
:
ComputeIntrinsicSize
(
)
{
NS_ASSERTION
(
IsReady
(
)
"
Ensure
PrepareImage
(
)
has
returned
true
"
"
before
calling
me
"
)
;
CSSSizeOrRatio
result
;
switch
(
mType
)
{
case
eStyleImageType_Image
:
{
bool
haveWidth
haveHeight
;
CSSIntSize
imageIntSize
;
nsLayoutUtils
:
:
ComputeSizeForDrawing
(
mImageContainer
imageIntSize
result
.
mRatio
haveWidth
haveHeight
)
;
if
(
haveWidth
)
{
result
.
SetWidth
(
nsPresContext
:
:
CSSPixelsToAppUnits
(
imageIntSize
.
width
)
)
;
}
if
(
haveHeight
)
{
result
.
SetHeight
(
nsPresContext
:
:
CSSPixelsToAppUnits
(
imageIntSize
.
height
)
)
;
}
if
(
!
haveHeight
&
&
haveWidth
&
&
result
.
mRatio
.
width
!
=
0
)
{
nscoord
intrinsicHeight
=
NSCoordSaturatingNonnegativeMultiply
(
imageIntSize
.
width
float
(
result
.
mRatio
.
height
)
/
float
(
result
.
mRatio
.
width
)
)
;
result
.
SetHeight
(
nsPresContext
:
:
CSSPixelsToAppUnits
(
intrinsicHeight
)
)
;
}
else
if
(
haveHeight
&
&
!
haveWidth
&
&
result
.
mRatio
.
height
!
=
0
)
{
nscoord
intrinsicWidth
=
NSCoordSaturatingNonnegativeMultiply
(
imageIntSize
.
height
float
(
result
.
mRatio
.
width
)
/
float
(
result
.
mRatio
.
height
)
)
;
result
.
SetWidth
(
nsPresContext
:
:
CSSPixelsToAppUnits
(
intrinsicWidth
)
)
;
}
break
;
}
case
eStyleImageType_Element
:
{
if
(
mPaintServerFrame
)
{
if
(
!
mPaintServerFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eSVG
)
)
{
int32_t
appUnitsPerDevPixel
=
mForFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
result
.
SetSize
(
IntSizeToAppUnits
(
nsSVGIntegrationUtils
:
:
GetContinuationUnionSize
(
mPaintServerFrame
)
.
ToNearestPixels
(
appUnitsPerDevPixel
)
appUnitsPerDevPixel
)
)
;
}
}
else
{
NS_ASSERTION
(
mImageElementSurface
.
GetSourceSurface
(
)
"
Surface
should
be
ready
.
"
)
;
IntSize
surfaceSize
=
mImageElementSurface
.
mSize
;
result
.
SetSize
(
nsSize
(
nsPresContext
:
:
CSSPixelsToAppUnits
(
surfaceSize
.
width
)
nsPresContext
:
:
CSSPixelsToAppUnits
(
surfaceSize
.
height
)
)
)
;
}
break
;
}
case
eStyleImageType_Gradient
:
case
eStyleImageType_Null
:
default
:
break
;
}
return
result
;
}
nsSize
nsImageRenderer
:
:
ComputeConcreteSize
(
const
CSSSizeOrRatio
&
aSpecifiedSize
const
CSSSizeOrRatio
&
aIntrinsicSize
const
nsSize
&
aDefaultSize
)
{
if
(
aSpecifiedSize
.
IsConcrete
(
)
)
{
return
aSpecifiedSize
.
ComputeConcreteSize
(
)
;
}
MOZ_ASSERT
(
!
aSpecifiedSize
.
mHasWidth
|
|
!
aSpecifiedSize
.
mHasHeight
)
;
if
(
!
aSpecifiedSize
.
mHasWidth
&
&
!
aSpecifiedSize
.
mHasHeight
)
{
if
(
aIntrinsicSize
.
CanComputeConcreteSize
(
)
)
{
return
aIntrinsicSize
.
ComputeConcreteSize
(
)
;
}
if
(
aIntrinsicSize
.
mHasWidth
)
{
return
nsSize
(
aIntrinsicSize
.
mWidth
aDefaultSize
.
height
)
;
}
if
(
aIntrinsicSize
.
mHasHeight
)
{
return
nsSize
(
aDefaultSize
.
width
aIntrinsicSize
.
mHeight
)
;
}
return
ComputeConstrainedSize
(
aDefaultSize
aIntrinsicSize
.
mRatio
CONTAIN
)
;
}
MOZ_ASSERT
(
aSpecifiedSize
.
mHasWidth
|
|
aSpecifiedSize
.
mHasHeight
)
;
if
(
aSpecifiedSize
.
mHasWidth
)
{
nscoord
height
;
if
(
aIntrinsicSize
.
HasRatio
(
)
)
{
height
=
NSCoordSaturatingNonnegativeMultiply
(
aSpecifiedSize
.
mWidth
double
(
aIntrinsicSize
.
mRatio
.
height
)
/
aIntrinsicSize
.
mRatio
.
width
)
;
}
else
if
(
aIntrinsicSize
.
mHasHeight
)
{
height
=
aIntrinsicSize
.
mHeight
;
}
else
{
height
=
aDefaultSize
.
height
;
}
return
nsSize
(
aSpecifiedSize
.
mWidth
height
)
;
}
MOZ_ASSERT
(
aSpecifiedSize
.
mHasHeight
)
;
nscoord
width
;
if
(
aIntrinsicSize
.
HasRatio
(
)
)
{
width
=
NSCoordSaturatingNonnegativeMultiply
(
aSpecifiedSize
.
mHeight
double
(
aIntrinsicSize
.
mRatio
.
width
)
/
aIntrinsicSize
.
mRatio
.
height
)
;
}
else
if
(
aIntrinsicSize
.
mHasWidth
)
{
width
=
aIntrinsicSize
.
mWidth
;
}
else
{
width
=
aDefaultSize
.
width
;
}
return
nsSize
(
width
aSpecifiedSize
.
mHeight
)
;
}
nsSize
nsImageRenderer
:
:
ComputeConstrainedSize
(
const
nsSize
&
aConstrainingSize
const
nsSize
&
aIntrinsicRatio
FitType
aFitType
)
{
if
(
aIntrinsicRatio
.
width
<
=
0
&
&
aIntrinsicRatio
.
height
<
=
0
)
{
return
aConstrainingSize
;
}
float
scaleX
=
double
(
aConstrainingSize
.
width
)
/
aIntrinsicRatio
.
width
;
float
scaleY
=
double
(
aConstrainingSize
.
height
)
/
aIntrinsicRatio
.
height
;
nsSize
size
;
if
(
(
aFitType
=
=
CONTAIN
)
=
=
(
scaleX
<
scaleY
)
)
{
size
.
width
=
aConstrainingSize
.
width
;
size
.
height
=
NSCoordSaturatingNonnegativeMultiply
(
aIntrinsicRatio
.
height
scaleX
)
;
if
(
aFitType
=
=
CONTAIN
&
&
aConstrainingSize
.
height
-
size
.
height
<
nsPresContext
:
:
AppUnitsPerCSSPixel
(
)
)
{
size
.
height
=
aConstrainingSize
.
height
;
}
}
else
{
size
.
width
=
NSCoordSaturatingNonnegativeMultiply
(
aIntrinsicRatio
.
width
scaleY
)
;
if
(
aFitType
=
=
CONTAIN
&
&
aConstrainingSize
.
width
-
size
.
width
<
nsPresContext
:
:
AppUnitsPerCSSPixel
(
)
)
{
size
.
width
=
aConstrainingSize
.
width
;
}
size
.
height
=
aConstrainingSize
.
height
;
}
return
size
;
}
void
nsImageRenderer
:
:
SetPreferredSize
(
const
CSSSizeOrRatio
&
aIntrinsicSize
const
nsSize
&
aDefaultSize
)
{
mSize
.
width
=
aIntrinsicSize
.
mHasWidth
?
aIntrinsicSize
.
mWidth
:
aDefaultSize
.
width
;
mSize
.
height
=
aIntrinsicSize
.
mHasHeight
?
aIntrinsicSize
.
mHeight
:
aDefaultSize
.
height
;
}
static
uint32_t
ConvertImageRendererToDrawFlags
(
uint32_t
aImageRendererFlags
)
{
uint32_t
drawFlags
=
imgIContainer
:
:
FLAG_NONE
;
if
(
aImageRendererFlags
&
nsImageRenderer
:
:
FLAG_SYNC_DECODE_IMAGES
)
{
drawFlags
|
=
imgIContainer
:
:
FLAG_SYNC_DECODE
;
}
if
(
aImageRendererFlags
&
nsImageRenderer
:
:
FLAG_PAINTING_TO_WINDOW
)
{
drawFlags
|
=
imgIContainer
:
:
FLAG_HIGH_QUALITY_SCALING
;
}
return
drawFlags
;
}
static
void
RGBALuminanceOperation
(
uint8_t
*
aData
int32_t
aStride
const
IntSize
&
aSize
)
{
int32_t
redFactor
=
55
;
int32_t
greenFactor
=
183
;
int32_t
blueFactor
=
18
;
for
(
int32_t
y
=
0
;
y
<
aSize
.
height
;
y
+
+
)
{
uint32_t
*
pixel
=
(
uint32_t
*
)
(
aData
+
aStride
*
y
)
;
for
(
int32_t
x
=
0
;
x
<
aSize
.
width
;
x
+
+
)
{
*
pixel
=
(
(
(
(
(
*
pixel
&
0x00FF0000
)
>
>
16
)
*
redFactor
)
+
(
(
(
*
pixel
&
0x0000FF00
)
>
>
8
)
*
greenFactor
)
+
(
(
*
pixel
&
0x000000FF
)
*
blueFactor
)
)
>
>
8
)
<
<
24
;
pixel
+
+
;
}
}
}
DrawResult
nsImageRenderer
:
:
Draw
(
nsPresContext
*
aPresContext
nsRenderingContext
&
aRenderingContext
const
nsRect
&
aDirtyRect
const
nsRect
&
aDest
const
nsRect
&
aFill
const
nsPoint
&
aAnchor
const
nsSize
&
aRepeatSize
const
CSSIntRect
&
aSrc
float
aOpacity
)
{
if
(
!
IsReady
(
)
)
{
NS_NOTREACHED
(
"
Ensure
PrepareImage
(
)
has
returned
true
before
calling
me
"
)
;
return
DrawResult
:
:
TEMPORARY_ERROR
;
}
if
(
aDest
.
IsEmpty
(
)
|
|
aFill
.
IsEmpty
(
)
|
|
mSize
.
width
<
=
0
|
|
mSize
.
height
<
=
0
)
{
return
DrawResult
:
:
SUCCESS
;
}
SamplingFilter
samplingFilter
=
nsLayoutUtils
:
:
GetSamplingFilterForFrame
(
mForFrame
)
;
DrawResult
result
=
DrawResult
:
:
SUCCESS
;
RefPtr
<
gfxContext
>
ctx
=
aRenderingContext
.
ThebesContext
(
)
;
IntRect
tmpDTRect
;
if
(
ctx
-
>
CurrentOp
(
)
!
=
CompositionOp
:
:
OP_OVER
|
|
mMaskOp
=
=
NS_STYLE_MASK_MODE_LUMINANCE
)
{
gfxRect
clipRect
=
ctx
-
>
GetClipExtents
(
)
;
tmpDTRect
=
RoundedOut
(
ToRect
(
clipRect
)
)
;
if
(
tmpDTRect
.
IsEmpty
(
)
)
{
return
DrawResult
:
:
SUCCESS
;
}
RefPtr
<
DrawTarget
>
tempDT
=
gfxPlatform
:
:
GetPlatform
(
)
-
>
CreateSimilarSoftwareDrawTarget
(
ctx
-
>
GetDrawTarget
(
)
tmpDTRect
.
Size
(
)
SurfaceFormat
:
:
B8G8R8A8
)
;
if
(
!
tempDT
|
|
!
tempDT
-
>
IsValid
(
)
)
{
gfxDevCrash
(
LogReason
:
:
InvalidContext
)
<
<
"
ImageRenderer
:
:
Draw
problem
"
<
<
gfx
:
:
hexa
(
tempDT
)
;
return
DrawResult
:
:
TEMPORARY_ERROR
;
}
tempDT
-
>
SetTransform
(
Matrix
:
:
Translation
(
-
tmpDTRect
.
TopLeft
(
)
)
)
;
ctx
=
gfxContext
:
:
CreatePreservingTransformOrNull
(
tempDT
)
;
if
(
!
ctx
)
{
gfxDevCrash
(
LogReason
:
:
InvalidContext
)
<
<
"
ImageRenderer
:
:
Draw
problem
"
<
<
gfx
:
:
hexa
(
tempDT
)
;
return
DrawResult
:
:
TEMPORARY_ERROR
;
}
}
switch
(
mType
)
{
case
eStyleImageType_Image
:
{
CSSIntSize
imageSize
(
nsPresContext
:
:
AppUnitsToIntCSSPixels
(
mSize
.
width
)
nsPresContext
:
:
AppUnitsToIntCSSPixels
(
mSize
.
height
)
)
;
result
=
nsLayoutUtils
:
:
DrawBackgroundImage
(
*
ctx
aPresContext
mImageContainer
imageSize
samplingFilter
aDest
aFill
aRepeatSize
aAnchor
aDirtyRect
ConvertImageRendererToDrawFlags
(
mFlags
)
mExtendMode
aOpacity
)
;
break
;
}
case
eStyleImageType_Gradient
:
{
nsCSSRendering
:
:
PaintGradient
(
aPresContext
*
ctx
mGradientData
aDirtyRect
aDest
aFill
aRepeatSize
aSrc
mSize
aOpacity
)
;
break
;
}
case
eStyleImageType_Element
:
{
RefPtr
<
gfxDrawable
>
drawable
=
DrawableForElement
(
aDest
*
ctx
)
;
if
(
!
drawable
)
{
NS_WARNING
(
"
Could
not
create
drawable
for
element
"
)
;
return
DrawResult
:
:
TEMPORARY_ERROR
;
}
nsCOMPtr
<
imgIContainer
>
image
(
ImageOps
:
:
CreateFromDrawable
(
drawable
)
)
;
result
=
nsLayoutUtils
:
:
DrawImage
(
*
ctx
aPresContext
image
samplingFilter
aDest
aFill
aAnchor
aDirtyRect
ConvertImageRendererToDrawFlags
(
mFlags
)
aOpacity
)
;
break
;
}
case
eStyleImageType_Null
:
default
:
break
;
}
if
(
!
tmpDTRect
.
IsEmpty
(
)
)
{
RefPtr
<
SourceSurface
>
surf
=
ctx
-
>
GetDrawTarget
(
)
-
>
Snapshot
(
)
;
if
(
mMaskOp
=
=
NS_STYLE_MASK_MODE_LUMINANCE
)
{
RefPtr
<
DataSourceSurface
>
maskData
=
surf
-
>
GetDataSurface
(
)
;
DataSourceSurface
:
:
MappedSurface
map
;
if
(
!
maskData
-
>
Map
(
DataSourceSurface
:
:
MapType
:
:
WRITE
&
map
)
)
{
return
result
;
}
RGBALuminanceOperation
(
map
.
mData
map
.
mStride
maskData
-
>
GetSize
(
)
)
;
maskData
-
>
Unmap
(
)
;
surf
=
maskData
;
}
DrawTarget
*
dt
=
aRenderingContext
.
ThebesContext
(
)
-
>
GetDrawTarget
(
)
;
dt
-
>
DrawSurface
(
surf
Rect
(
tmpDTRect
.
x
tmpDTRect
.
y
tmpDTRect
.
width
tmpDTRect
.
height
)
Rect
(
0
0
tmpDTRect
.
width
tmpDTRect
.
height
)
DrawSurfaceOptions
(
SamplingFilter
:
:
POINT
)
DrawOptions
(
1
.
0f
aRenderingContext
.
ThebesContext
(
)
-
>
CurrentOp
(
)
)
)
;
}
return
result
;
}
already_AddRefed
<
gfxDrawable
>
nsImageRenderer
:
:
DrawableForElement
(
const
nsRect
&
aImageRect
gfxContext
&
aContext
)
{
NS_ASSERTION
(
mType
=
=
eStyleImageType_Element
"
DrawableForElement
only
makes
sense
if
backed
by
an
element
"
)
;
if
(
mPaintServerFrame
)
{
int32_t
appUnitsPerDevPixel
=
mForFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
nsRect
destRect
=
aImageRect
-
aImageRect
.
TopLeft
(
)
;
nsIntSize
roundedOut
=
destRect
.
ToOutsidePixels
(
appUnitsPerDevPixel
)
.
Size
(
)
;
IntSize
imageSize
(
roundedOut
.
width
roundedOut
.
height
)
;
RefPtr
<
gfxDrawable
>
drawable
=
nsSVGIntegrationUtils
:
:
DrawableFromPaintServer
(
mPaintServerFrame
mForFrame
mSize
imageSize
aContext
.
GetDrawTarget
(
)
aContext
.
CurrentMatrix
(
)
nsSVGIntegrationUtils
:
:
FLAG_SYNC_DECODE_IMAGES
)
;
return
drawable
.
forget
(
)
;
}
NS_ASSERTION
(
mImageElementSurface
.
GetSourceSurface
(
)
"
Surface
should
be
ready
.
"
)
;
RefPtr
<
gfxDrawable
>
drawable
=
new
gfxSurfaceDrawable
(
mImageElementSurface
.
GetSourceSurface
(
)
.
get
(
)
mImageElementSurface
.
mSize
)
;
return
drawable
.
forget
(
)
;
}
DrawResult
nsImageRenderer
:
:
DrawLayer
(
nsPresContext
*
aPresContext
nsRenderingContext
&
aRenderingContext
const
nsRect
&
aDest
const
nsRect
&
aFill
const
nsPoint
&
aAnchor
const
nsRect
&
aDirty
const
nsSize
&
aRepeatSize
float
aOpacity
)
{
if
(
!
IsReady
(
)
)
{
NS_NOTREACHED
(
"
Ensure
PrepareImage
(
)
has
returned
true
before
calling
me
"
)
;
return
DrawResult
:
:
TEMPORARY_ERROR
;
}
if
(
aDest
.
IsEmpty
(
)
|
|
aFill
.
IsEmpty
(
)
|
|
mSize
.
width
<
=
0
|
|
mSize
.
height
<
=
0
)
{
return
DrawResult
:
:
SUCCESS
;
}
return
Draw
(
aPresContext
aRenderingContext
aDirty
aDest
aFill
aAnchor
aRepeatSize
CSSIntRect
(
0
0
nsPresContext
:
:
AppUnitsToIntCSSPixels
(
mSize
.
width
)
nsPresContext
:
:
AppUnitsToIntCSSPixels
(
mSize
.
height
)
)
aOpacity
)
;
}
static
nsRect
ComputeTile
(
nsRect
&
aFill
uint8_t
aHFill
uint8_t
aVFill
const
nsSize
&
aUnitSize
nsSize
&
aRepeatSize
)
{
nsRect
tile
;
switch
(
aHFill
)
{
case
NS_STYLE_BORDER_IMAGE_REPEAT_STRETCH
:
tile
.
x
=
aFill
.
x
;
tile
.
width
=
aFill
.
width
;
aRepeatSize
.
width
=
tile
.
width
;
break
;
case
NS_STYLE_BORDER_IMAGE_REPEAT_REPEAT
:
tile
.
x
=
aFill
.
x
+
aFill
.
width
/
2
-
aUnitSize
.
width
/
2
;
tile
.
width
=
aUnitSize
.
width
;
aRepeatSize
.
width
=
tile
.
width
;
break
;
case
NS_STYLE_BORDER_IMAGE_REPEAT_ROUND
:
tile
.
x
=
aFill
.
x
;
tile
.
width
=
ComputeRoundedSize
(
aUnitSize
.
width
aFill
.
width
)
;
aRepeatSize
.
width
=
tile
.
width
;
break
;
case
NS_STYLE_BORDER_IMAGE_REPEAT_SPACE
:
{
nscoord
space
;
aRepeatSize
.
width
=
ComputeBorderSpacedRepeatSize
(
aUnitSize
.
width
aFill
.
width
space
)
;
tile
.
x
=
aFill
.
x
+
space
;
tile
.
width
=
aUnitSize
.
width
;
aFill
.
x
=
tile
.
x
;
aFill
.
width
=
aFill
.
width
-
space
*
2
;
}
break
;
default
:
NS_NOTREACHED
(
"
unrecognized
border
-
image
fill
style
"
)
;
}
switch
(
aVFill
)
{
case
NS_STYLE_BORDER_IMAGE_REPEAT_STRETCH
:
tile
.
y
=
aFill
.
y
;
tile
.
height
=
aFill
.
height
;
aRepeatSize
.
height
=
tile
.
height
;
break
;
case
NS_STYLE_BORDER_IMAGE_REPEAT_REPEAT
:
tile
.
y
=
aFill
.
y
+
aFill
.
height
/
2
-
aUnitSize
.
height
/
2
;
tile
.
height
=
aUnitSize
.
height
;
aRepeatSize
.
height
=
tile
.
height
;
break
;
case
NS_STYLE_BORDER_IMAGE_REPEAT_ROUND
:
tile
.
y
=
aFill
.
y
;
tile
.
height
=
ComputeRoundedSize
(
aUnitSize
.
height
aFill
.
height
)
;
aRepeatSize
.
height
=
tile
.
height
;
break
;
case
NS_STYLE_BORDER_IMAGE_REPEAT_SPACE
:
{
nscoord
space
;
aRepeatSize
.
height
=
ComputeBorderSpacedRepeatSize
(
aUnitSize
.
height
aFill
.
height
space
)
;
tile
.
y
=
aFill
.
y
+
space
;
tile
.
height
=
aUnitSize
.
height
;
aFill
.
y
=
tile
.
y
;
aFill
.
height
=
aFill
.
height
-
space
*
2
;
}
break
;
default
:
NS_NOTREACHED
(
"
unrecognized
border
-
image
fill
style
"
)
;
}
return
tile
;
}
static
bool
RequiresScaling
(
const
nsRect
&
aFill
uint8_t
aHFill
uint8_t
aVFill
const
nsSize
&
aUnitSize
)
{
return
(
aHFill
!
=
NS_STYLE_BORDER_IMAGE_REPEAT_STRETCH
|
|
aVFill
!
=
NS_STYLE_BORDER_IMAGE_REPEAT_STRETCH
)
&
&
(
aUnitSize
.
width
!
=
aFill
.
width
|
|
aUnitSize
.
height
!
=
aFill
.
height
)
;
}
DrawResult
nsImageRenderer
:
:
DrawBorderImageComponent
(
nsPresContext
*
aPresContext
nsRenderingContext
&
aRenderingContext
const
nsRect
&
aDirtyRect
const
nsRect
&
aFill
const
CSSIntRect
&
aSrc
uint8_t
aHFill
uint8_t
aVFill
const
nsSize
&
aUnitSize
uint8_t
aIndex
const
Maybe
<
nsSize
>
&
aSVGViewportSize
const
bool
aHasIntrinsicRatio
)
{
if
(
!
IsReady
(
)
)
{
NS_NOTREACHED
(
"
Ensure
PrepareImage
(
)
has
returned
true
before
calling
me
"
)
;
return
DrawResult
:
:
BAD_ARGS
;
}
if
(
aFill
.
IsEmpty
(
)
|
|
aSrc
.
IsEmpty
(
)
)
{
return
DrawResult
:
:
SUCCESS
;
}
if
(
mType
=
=
eStyleImageType_Image
|
|
mType
=
=
eStyleImageType_Element
)
{
nsCOMPtr
<
imgIContainer
>
subImage
;
uint32_t
drawFlags
=
ConvertImageRendererToDrawFlags
(
mFlags
)
|
imgIContainer
:
:
FLAG_FORCE_PRESERVEASPECTRATIO_NONE
;
if
(
!
aHasIntrinsicRatio
)
{
drawFlags
=
drawFlags
|
imgIContainer
:
:
FLAG_FORCE_UNIFORM_SCALING
;
}
nsIntRect
srcRect
(
aSrc
.
x
aSrc
.
y
aSrc
.
width
aSrc
.
height
)
;
if
(
mType
=
=
eStyleImageType_Image
)
{
if
(
(
subImage
=
mImage
-
>
GetSubImage
(
aIndex
)
)
=
=
nullptr
)
{
subImage
=
ImageOps
:
:
Clip
(
mImageContainer
srcRect
aSVGViewportSize
)
;
mImage
-
>
SetSubImage
(
aIndex
subImage
)
;
}
}
else
{
RefPtr
<
gfxDrawable
>
drawable
=
DrawableForElement
(
nsRect
(
nsPoint
(
)
mSize
)
*
aRenderingContext
.
ThebesContext
(
)
)
;
if
(
!
drawable
)
{
NS_WARNING
(
"
Could
not
create
drawable
for
element
"
)
;
return
DrawResult
:
:
TEMPORARY_ERROR
;
}
nsCOMPtr
<
imgIContainer
>
image
(
ImageOps
:
:
CreateFromDrawable
(
drawable
)
)
;
subImage
=
ImageOps
:
:
Clip
(
image
srcRect
aSVGViewportSize
)
;
}
MOZ_ASSERT_IF
(
aSVGViewportSize
subImage
-
>
GetType
(
)
=
=
imgIContainer
:
:
TYPE_VECTOR
)
;
SamplingFilter
samplingFilter
=
nsLayoutUtils
:
:
GetSamplingFilterForFrame
(
mForFrame
)
;
if
(
!
RequiresScaling
(
aFill
aHFill
aVFill
aUnitSize
)
)
{
return
nsLayoutUtils
:
:
DrawSingleImage
(
*
aRenderingContext
.
ThebesContext
(
)
aPresContext
subImage
samplingFilter
aFill
aDirtyRect
Nothing
(
)
drawFlags
)
;
}
nsSize
repeatSize
;
nsRect
fillRect
(
aFill
)
;
nsRect
tile
=
ComputeTile
(
fillRect
aHFill
aVFill
aUnitSize
repeatSize
)
;
CSSIntSize
imageSize
(
srcRect
.
width
srcRect
.
height
)
;
return
nsLayoutUtils
:
:
DrawBackgroundImage
(
*
aRenderingContext
.
ThebesContext
(
)
aPresContext
subImage
imageSize
samplingFilter
tile
fillRect
repeatSize
tile
.
TopLeft
(
)
aDirtyRect
drawFlags
ExtendMode
:
:
CLAMP
1
.
0
)
;
}
nsSize
repeatSize
(
aFill
.
Size
(
)
)
;
nsRect
fillRect
(
aFill
)
;
nsRect
destTile
=
RequiresScaling
(
fillRect
aHFill
aVFill
aUnitSize
)
?
ComputeTile
(
fillRect
aHFill
aVFill
aUnitSize
repeatSize
)
:
fillRect
;
return
Draw
(
aPresContext
aRenderingContext
aDirtyRect
destTile
fillRect
destTile
.
TopLeft
(
)
repeatSize
aSrc
)
;
}
bool
nsImageRenderer
:
:
IsRasterImage
(
)
{
if
(
mType
!
=
eStyleImageType_Image
|
|
!
mImageContainer
)
return
false
;
return
mImageContainer
-
>
GetType
(
)
=
=
imgIContainer
:
:
TYPE_RASTER
;
}
bool
nsImageRenderer
:
:
IsAnimatedImage
(
)
{
if
(
mType
!
=
eStyleImageType_Image
|
|
!
mImageContainer
)
return
false
;
bool
animated
=
false
;
if
(
NS_SUCCEEDED
(
mImageContainer
-
>
GetAnimated
(
&
animated
)
)
&
&
animated
)
return
true
;
return
false
;
}
already_AddRefed
<
imgIContainer
>
nsImageRenderer
:
:
GetImage
(
)
{
if
(
mType
!
=
eStyleImageType_Image
|
|
!
mImageContainer
)
{
return
nullptr
;
}
nsCOMPtr
<
imgIContainer
>
image
=
mImageContainer
;
return
image
.
forget
(
)
;
}
bool
nsImageRenderer
:
:
IsImageContainerAvailable
(
layers
:
:
LayerManager
*
aManager
uint32_t
aFlags
)
{
if
(
!
mImageContainer
)
{
return
false
;
}
return
mImageContainer
-
>
IsImageContainerAvailable
(
aManager
aFlags
)
;
}
void
nsImageRenderer
:
:
PurgeCacheForViewportChange
(
const
Maybe
<
nsSize
>
&
aSVGViewportSize
const
bool
aHasIntrinsicRatio
)
{
if
(
mImageContainer
&
&
mImageContainer
-
>
GetType
(
)
=
=
imgIContainer
:
:
TYPE_VECTOR
)
{
mImage
-
>
PurgeCacheForViewportChange
(
aSVGViewportSize
aHasIntrinsicRatio
)
;
}
}
