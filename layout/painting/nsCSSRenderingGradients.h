#
ifndef
nsCSSRenderingGradients_h__
#
define
nsCSSRenderingGradients_h__
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
Units
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
namespace
mozilla
{
namespace
layers
{
class
StackingContextHelper
;
}
namespace
wr
{
class
DisplayListBuilder
;
}
struct
ColorStop
{
ColorStop
(
)
:
mPosition
(
0
)
mIsMidpoint
(
false
)
{
}
ColorStop
(
double
aPosition
bool
aIsMidPoint
const
gfx
:
:
Color
&
aColor
)
:
mPosition
(
aPosition
)
mIsMidpoint
(
aIsMidPoint
)
mColor
(
aColor
)
{
}
double
mPosition
;
bool
mIsMidpoint
;
gfx
:
:
Color
mColor
;
}
;
class
nsCSSGradientRenderer
final
{
public
:
static
nsCSSGradientRenderer
Create
(
nsPresContext
*
aPresContext
ComputedStyle
*
aComputedStyle
const
StyleGradient
&
aGradient
const
nsSize
&
aIntrinsiceSize
)
;
void
Paint
(
gfxContext
&
aContext
const
nsRect
&
aDest
const
nsRect
&
aFill
const
nsSize
&
aRepeatSize
const
mozilla
:
:
CSSIntRect
&
aSrc
const
nsRect
&
aDirtyRect
float
aOpacity
=
1
.
0
)
;
void
BuildWebRenderParameters
(
float
aOpacity
wr
:
:
ExtendMode
&
aMode
nsTArray
<
wr
:
:
GradientStop
>
&
aStops
LayoutDevicePoint
&
aLineStart
LayoutDevicePoint
&
aLineEnd
LayoutDeviceSize
&
aGradientRadius
)
;
void
BuildWebRenderDisplayItems
(
wr
:
:
DisplayListBuilder
&
aBuilder
const
layers
:
:
StackingContextHelper
&
aSc
const
nsRect
&
aDest
const
nsRect
&
aFill
const
nsSize
&
aRepeatSize
const
mozilla
:
:
CSSIntRect
&
aSrc
bool
aIsBackfaceVisible
float
aOpacity
=
1
.
0
)
;
private
:
nsCSSGradientRenderer
(
)
:
mPresContext
(
nullptr
)
mGradient
(
nullptr
)
mRadiusX
(
0
.
0
)
mRadiusY
(
0
.
0
)
{
}
bool
TryPaintTilesWithExtendMode
(
gfxContext
&
aContext
gfxPattern
*
aGradientPattern
nscoord
aXStart
nscoord
aYStart
const
gfxRect
&
aDirtyAreaToFill
const
nsRect
&
aDest
const
nsSize
&
aRepeatSize
bool
aForceRepeatToCoverTiles
)
;
nsPresContext
*
mPresContext
;
const
StyleGradient
*
mGradient
;
nsTArray
<
ColorStop
>
mStops
;
gfxPoint
mLineStart
mLineEnd
;
double
mRadiusX
mRadiusY
;
}
;
}
#
endif
