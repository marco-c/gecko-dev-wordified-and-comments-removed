#
ifndef
mozilla_DashedCornerFinder_h_
#
define
mozilla_DashedCornerFinder_h_
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
BezierUtils
.
h
"
namespace
mozilla
{
class
DashedCornerFinder
{
typedef
mozilla
:
:
gfx
:
:
Bezier
Bezier
;
typedef
mozilla
:
:
gfx
:
:
Float
Float
;
typedef
mozilla
:
:
gfx
:
:
Point
Point
;
typedef
mozilla
:
:
gfx
:
:
Size
Size
;
public
:
struct
Result
{
Bezier
outerSectionBezier
;
Bezier
innerSectionBezier
;
Result
(
const
Bezier
&
aOuterSectionBezier
const
Bezier
&
aInnerSectionBezier
)
:
outerSectionBezier
(
aOuterSectionBezier
)
innerSectionBezier
(
aInnerSectionBezier
)
{
}
}
;
DashedCornerFinder
(
const
Bezier
&
aOuterBezier
const
Bezier
&
aInnerBezier
Float
aBorderWidthH
Float
aBorderWidthV
const
Size
&
aCornerDim
)
;
bool
HasMore
(
void
)
const
;
Result
Next
(
void
)
;
private
:
static
const
size_t
MAX_LOOP
=
32
;
Bezier
mOuterBezier
;
Bezier
mInnerBezier
;
Point
mLastOuterP
;
Point
mLastInnerP
;
Float
mLastOuterT
;
Float
mLastInnerT
;
Float
mBestDashLength
;
bool
mHasZeroBorderWidth
;
bool
mHasMore
;
size_t
mMaxCount
;
enum
{
PERFECT
OTHER
}
mType
;
size_t
mI
;
size_t
mCount
;
void
DetermineType
(
Float
aBorderWidthH
Float
aBorderWidthV
)
;
void
Reset
(
void
)
;
Float
FindNext
(
Float
dashLength
)
;
void
FindBestDashLength
(
Float
aMinBorderWidth
Float
aMaxBorderWidth
Float
aMinBorderRadius
Float
aMaxBorderRadius
)
;
bool
GetCountAndLastDashLength
(
Float
aDashLength
size_t
*
aCount
Float
*
aActualDashLength
)
;
}
;
}
#
endif
