#
ifndef
NSDISPLAYITEMTYPES_H_
#
define
NSDISPLAYITEMTYPES_H_
enum
class
DisplayItemType
{
TYPE_ZERO
=
0
#
define
DECLARE_DISPLAY_ITEM_TYPE
(
name
)
TYPE_
#
#
name
#
define
DECLARE_DISPLAY_ITEM_TYPE_FLAGS
(
name
flags
)
TYPE_
#
#
name
#
include
"
nsDisplayItemTypesList
.
h
"
#
undef
DECLARE_DISPLAY_ITEM_TYPE
#
undef
DECLARE_DISPLAY_ITEM_TYPE_FLAGS
TYPE_MAX
}
;
enum
{
TYPE_BITS
=
8
}
;
enum
DisplayItemFlags
{
TYPE_RENDERS_NO_IMAGES
=
1
<
<
0
}
;
inline
const
char
*
DisplayItemTypeName
(
DisplayItemType
aType
)
{
switch
(
aType
)
{
#
define
DECLARE_DISPLAY_ITEM_TYPE
(
name
)
case
DisplayItemType
:
:
TYPE_
#
#
name
:
return
#
name
;
#
define
DECLARE_DISPLAY_ITEM_TYPE_FLAGS
(
name
flags
)
case
DisplayItemType
:
:
TYPE_
#
#
name
:
return
#
name
;
#
include
"
nsDisplayItemTypesList
.
h
"
#
undef
DECLARE_DISPLAY_ITEM_TYPE
#
undef
DECLARE_DISPLAY_ITEM_TYPE_FLAGS
default
:
return
"
TYPE_UNKNOWN
"
;
}
}
inline
uint8_t
GetDisplayItemFlagsForType
(
DisplayItemType
aType
)
{
static
const
uint8_t
flags
[
static_cast
<
uint32_t
>
(
DisplayItemType
:
:
TYPE_MAX
)
]
=
{
0
#
define
DECLARE_DISPLAY_ITEM_TYPE
(
name
)
0
#
define
DECLARE_DISPLAY_ITEM_TYPE_FLAGS
(
name
flags
)
flags
#
include
"
nsDisplayItemTypesList
.
h
"
#
undef
DECLARE_DISPLAY_ITEM_TYPE
#
undef
DECLARE_DISPLAY_ITEM_TYPE_FLAGS
}
;
return
flags
[
static_cast
<
uint32_t
>
(
aType
)
]
;
}
inline
DisplayItemType
GetDisplayItemTypeFromKey
(
uint32_t
aDisplayItemKey
)
{
static
const
uint32_t
typeMask
=
(
1
<
<
TYPE_BITS
)
-
1
;
DisplayItemType
type
=
static_cast
<
DisplayItemType
>
(
aDisplayItemKey
&
typeMask
)
;
NS_ASSERTION
(
type
>
=
DisplayItemType
:
:
TYPE_ZERO
&
&
type
<
DisplayItemType
:
:
TYPE_MAX
"
Invalid
display
item
type
!
"
)
;
return
type
;
}
#
endif
