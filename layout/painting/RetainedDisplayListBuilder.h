#
ifndef
RETAINEDDISPLAYLISTBUILDER_H_
#
define
RETAINEDDISPLAYLISTBUILDER_H_
#
include
"
nsDisplayList
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
TypedEnumBits
.
h
"
namespace
mozilla
{
class
DisplayListChecker
;
}
struct
RetainedDisplayListData
{
NS_DECLARE_FRAME_PROPERTY_DELETABLE
(
DisplayListData
RetainedDisplayListData
)
enum
class
FrameFlags
:
uint8_t
{
None
=
0
Modified
=
1
<
<
0
HasProps
=
1
<
<
1
HadWillChange
=
1
<
<
2
}
;
RetainedDisplayListData
(
)
:
mModifiedFramesCount
(
0
)
{
}
void
AddModifiedFrame
(
nsIFrame
*
aFrame
)
;
void
Clear
(
)
{
mFrames
.
Clear
(
)
;
mModifiedFramesCount
=
0
;
}
FrameFlags
&
Flags
(
nsIFrame
*
aFrame
)
{
return
mFrames
.
GetOrInsert
(
aFrame
)
;
}
FrameFlags
GetFlags
(
nsIFrame
*
aFrame
)
const
{
return
mFrames
.
Get
(
aFrame
)
;
}
auto
Iterator
(
)
{
return
mFrames
.
Iter
(
)
;
}
uint32_t
ModifiedFramesCount
(
)
const
{
return
mModifiedFramesCount
;
}
bool
Remove
(
nsIFrame
*
aFrame
)
{
return
mFrames
.
Remove
(
aFrame
)
;
}
private
:
nsDataHashtable
<
nsPtrHashKey
<
nsIFrame
>
FrameFlags
>
mFrames
;
uint32_t
mModifiedFramesCount
;
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
RetainedDisplayListData
:
:
FrameFlags
)
RetainedDisplayListData
*
GetRetainedDisplayListData
(
nsIFrame
*
aRootFrame
)
;
RetainedDisplayListData
*
GetOrSetRetainedDisplayListData
(
nsIFrame
*
aRootFrame
)
;
struct
RetainedDisplayListBuilder
{
RetainedDisplayListBuilder
(
nsIFrame
*
aReferenceFrame
nsDisplayListBuilderMode
aMode
bool
aBuildCaret
)
:
mBuilder
(
aReferenceFrame
aMode
aBuildCaret
true
)
mCurrentSubtreeIsForEventsAndPluginsOnly
(
false
)
{
}
~
RetainedDisplayListBuilder
(
)
{
mList
.
DeleteAll
(
&
mBuilder
)
;
}
nsDisplayListBuilder
*
Builder
(
)
{
return
&
mBuilder
;
}
nsDisplayList
*
List
(
)
{
return
&
mList
;
}
enum
class
PartialUpdateResult
{
Failed
NoChange
Updated
}
;
PartialUpdateResult
AttemptPartialUpdate
(
nscolor
aBackstop
mozilla
:
:
DisplayListChecker
*
aChecker
)
;
void
ClearFramesWithProps
(
)
;
NS_DECLARE_FRAME_PROPERTY_DELETABLE
(
Cached
RetainedDisplayListBuilder
)
private
:
bool
PreProcessDisplayList
(
RetainedDisplayList
*
aList
AnimatedGeometryRoot
*
aAGR
uint32_t
aCallerKey
=
0
uint32_t
aNestingDepth
=
0
)
;
bool
MergeDisplayLists
(
nsDisplayList
*
aNewList
RetainedDisplayList
*
aOldList
RetainedDisplayList
*
aOutList
mozilla
:
:
Maybe
<
const
mozilla
:
:
ActiveScrolledRoot
*
>
&
aOutContainerASR
nsDisplayItem
*
aOuterItem
=
nullptr
)
;
bool
ComputeRebuildRegion
(
nsTArray
<
nsIFrame
*
>
&
aModifiedFrames
nsRect
*
aOutDirty
AnimatedGeometryRoot
*
*
aOutModifiedAGR
nsTArray
<
nsIFrame
*
>
&
aOutFramesWithProps
)
;
bool
ProcessFrame
(
nsIFrame
*
aFrame
nsDisplayListBuilder
&
aBuilder
nsIFrame
*
aStopAtFrame
nsTArray
<
nsIFrame
*
>
&
aOutFramesWithProps
const
bool
aStopAtStackingContext
nsRect
*
aOutDirty
AnimatedGeometryRoot
*
*
aOutModifiedAGR
)
;
void
IncrementSubDocPresShellPaintCount
(
nsDisplayItem
*
aItem
)
;
friend
class
MergeState
;
nsDisplayListBuilder
mBuilder
;
RetainedDisplayList
mList
;
WeakFrame
mPreviousCaret
;
bool
mCurrentSubtreeIsForEventsAndPluginsOnly
;
}
;
#
endif
