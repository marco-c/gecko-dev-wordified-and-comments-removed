#
include
"
nsCSSRenderingGradients
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Helpers
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsPoint
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsCSSColorUtils
.
h
"
#
include
"
gfxContext
.
h
"
#
include
"
nsStyleStructInlines
.
h
"
#
include
"
nsCSSProps
.
h
"
#
include
"
gfxUtils
.
h
"
#
include
"
gfxGradientCache
.
h
"
#
include
"
mozilla
/
layers
/
StackingContextHelper
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderLayerManager
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderAPI
.
h
"
#
include
"
Units
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
static
gfxFloat
ConvertGradientValueToPixels
(
const
nsStyleCoord
&
aCoord
gfxFloat
aFillLength
int32_t
aAppUnitsPerPixel
)
{
switch
(
aCoord
.
GetUnit
(
)
)
{
case
eStyleUnit_Percent
:
return
aCoord
.
GetPercentValue
(
)
*
aFillLength
;
case
eStyleUnit_Coord
:
return
NSAppUnitsToFloatPixels
(
aCoord
.
GetCoordValue
(
)
aAppUnitsPerPixel
)
;
case
eStyleUnit_Calc
:
{
const
nsStyleCoord
:
:
Calc
*
calc
=
aCoord
.
GetCalcValue
(
)
;
return
calc
-
>
mPercent
*
aFillLength
+
NSAppUnitsToFloatPixels
(
calc
-
>
mLength
aAppUnitsPerPixel
)
;
}
default
:
NS_WARNING
(
"
Unexpected
coord
unit
"
)
;
return
0
;
}
}
static
gfxPoint
ComputeGradientLineEndFromAngle
(
const
gfxPoint
&
aStart
double
aAngle
const
gfxSize
&
aBoxSize
)
{
double
dx
=
cos
(
-
aAngle
)
;
double
dy
=
sin
(
-
aAngle
)
;
gfxPoint
farthestCorner
(
dx
>
0
?
aBoxSize
.
width
:
0
dy
>
0
?
aBoxSize
.
height
:
0
)
;
gfxPoint
delta
=
farthestCorner
-
aStart
;
double
u
=
delta
.
x
*
dy
-
delta
.
y
*
dx
;
return
farthestCorner
+
gfxPoint
(
-
u
*
dy
u
*
dx
)
;
}
static
void
ComputeLinearGradientLine
(
nsPresContext
*
aPresContext
nsStyleGradient
*
aGradient
const
gfxSize
&
aBoxSize
gfxPoint
*
aLineStart
gfxPoint
*
aLineEnd
)
{
if
(
aGradient
-
>
mBgPosX
.
GetUnit
(
)
=
=
eStyleUnit_None
)
{
double
angle
;
if
(
aGradient
-
>
mAngle
.
IsAngleValue
(
)
)
{
angle
=
aGradient
-
>
mAngle
.
GetAngleValueInRadians
(
)
;
if
(
!
aGradient
-
>
mLegacySyntax
)
{
angle
=
M_PI_2
-
angle
;
}
}
else
{
angle
=
-
M_PI_2
;
}
gfxPoint
center
(
aBoxSize
.
width
/
2
aBoxSize
.
height
/
2
)
;
*
aLineEnd
=
ComputeGradientLineEndFromAngle
(
center
angle
aBoxSize
)
;
*
aLineStart
=
gfxPoint
(
aBoxSize
.
width
aBoxSize
.
height
)
-
*
aLineEnd
;
}
else
if
(
!
aGradient
-
>
mLegacySyntax
)
{
float
xSign
=
aGradient
-
>
mBgPosX
.
GetPercentValue
(
)
*
2
-
1
;
float
ySign
=
1
-
aGradient
-
>
mBgPosY
.
GetPercentValue
(
)
*
2
;
double
angle
=
atan2
(
ySign
*
aBoxSize
.
width
xSign
*
aBoxSize
.
height
)
;
gfxPoint
center
(
aBoxSize
.
width
/
2
aBoxSize
.
height
/
2
)
;
*
aLineEnd
=
ComputeGradientLineEndFromAngle
(
center
angle
aBoxSize
)
;
*
aLineStart
=
gfxPoint
(
aBoxSize
.
width
aBoxSize
.
height
)
-
*
aLineEnd
;
}
else
{
int32_t
appUnitsPerPixel
=
aPresContext
-
>
AppUnitsPerDevPixel
(
)
;
*
aLineStart
=
gfxPoint
(
ConvertGradientValueToPixels
(
aGradient
-
>
mBgPosX
aBoxSize
.
width
appUnitsPerPixel
)
ConvertGradientValueToPixels
(
aGradient
-
>
mBgPosY
aBoxSize
.
height
appUnitsPerPixel
)
)
;
if
(
aGradient
-
>
mAngle
.
IsAngleValue
(
)
)
{
MOZ_ASSERT
(
aGradient
-
>
mLegacySyntax
)
;
double
angle
=
aGradient
-
>
mAngle
.
GetAngleValueInRadians
(
)
;
*
aLineEnd
=
ComputeGradientLineEndFromAngle
(
*
aLineStart
angle
aBoxSize
)
;
}
else
{
*
aLineEnd
=
gfxPoint
(
aBoxSize
.
width
aBoxSize
.
height
)
-
*
aLineStart
;
}
}
}
static
void
ComputeRadialGradientLine
(
nsPresContext
*
aPresContext
nsStyleGradient
*
aGradient
const
gfxSize
&
aBoxSize
gfxPoint
*
aLineStart
gfxPoint
*
aLineEnd
double
*
aRadiusX
double
*
aRadiusY
)
{
if
(
aGradient
-
>
mBgPosX
.
GetUnit
(
)
=
=
eStyleUnit_None
)
{
*
aLineStart
=
gfxPoint
(
aBoxSize
.
width
/
2
aBoxSize
.
height
/
2
)
;
}
else
{
int32_t
appUnitsPerPixel
=
aPresContext
-
>
AppUnitsPerDevPixel
(
)
;
*
aLineStart
=
gfxPoint
(
ConvertGradientValueToPixels
(
aGradient
-
>
mBgPosX
aBoxSize
.
width
appUnitsPerPixel
)
ConvertGradientValueToPixels
(
aGradient
-
>
mBgPosY
aBoxSize
.
height
appUnitsPerPixel
)
)
;
}
double
radiusX
radiusY
;
double
leftDistance
=
Abs
(
aLineStart
-
>
x
)
;
double
rightDistance
=
Abs
(
aBoxSize
.
width
-
aLineStart
-
>
x
)
;
double
topDistance
=
Abs
(
aLineStart
-
>
y
)
;
double
bottomDistance
=
Abs
(
aBoxSize
.
height
-
aLineStart
-
>
y
)
;
switch
(
aGradient
-
>
mSize
)
{
case
NS_STYLE_GRADIENT_SIZE_CLOSEST_SIDE
:
radiusX
=
std
:
:
min
(
leftDistance
rightDistance
)
;
radiusY
=
std
:
:
min
(
topDistance
bottomDistance
)
;
if
(
aGradient
-
>
mShape
=
=
NS_STYLE_GRADIENT_SHAPE_CIRCULAR
)
{
radiusX
=
radiusY
=
std
:
:
min
(
radiusX
radiusY
)
;
}
break
;
case
NS_STYLE_GRADIENT_SIZE_CLOSEST_CORNER
:
{
double
offsetX
=
std
:
:
min
(
leftDistance
rightDistance
)
;
double
offsetY
=
std
:
:
min
(
topDistance
bottomDistance
)
;
if
(
aGradient
-
>
mShape
=
=
NS_STYLE_GRADIENT_SHAPE_CIRCULAR
)
{
radiusX
=
radiusY
=
NS_hypot
(
offsetX
offsetY
)
;
}
else
{
radiusX
=
offsetX
*
M_SQRT2
;
radiusY
=
offsetY
*
M_SQRT2
;
}
break
;
}
case
NS_STYLE_GRADIENT_SIZE_FARTHEST_SIDE
:
radiusX
=
std
:
:
max
(
leftDistance
rightDistance
)
;
radiusY
=
std
:
:
max
(
topDistance
bottomDistance
)
;
if
(
aGradient
-
>
mShape
=
=
NS_STYLE_GRADIENT_SHAPE_CIRCULAR
)
{
radiusX
=
radiusY
=
std
:
:
max
(
radiusX
radiusY
)
;
}
break
;
case
NS_STYLE_GRADIENT_SIZE_FARTHEST_CORNER
:
{
double
offsetX
=
std
:
:
max
(
leftDistance
rightDistance
)
;
double
offsetY
=
std
:
:
max
(
topDistance
bottomDistance
)
;
if
(
aGradient
-
>
mShape
=
=
NS_STYLE_GRADIENT_SHAPE_CIRCULAR
)
{
radiusX
=
radiusY
=
NS_hypot
(
offsetX
offsetY
)
;
}
else
{
radiusX
=
offsetX
*
M_SQRT2
;
radiusY
=
offsetY
*
M_SQRT2
;
}
break
;
}
case
NS_STYLE_GRADIENT_SIZE_EXPLICIT_SIZE
:
{
int32_t
appUnitsPerPixel
=
aPresContext
-
>
AppUnitsPerDevPixel
(
)
;
radiusX
=
ConvertGradientValueToPixels
(
aGradient
-
>
mRadiusX
aBoxSize
.
width
appUnitsPerPixel
)
;
radiusY
=
ConvertGradientValueToPixels
(
aGradient
-
>
mRadiusY
aBoxSize
.
height
appUnitsPerPixel
)
;
break
;
}
default
:
radiusX
=
radiusY
=
0
;
MOZ_ASSERT
(
false
"
unknown
radial
gradient
sizing
method
"
)
;
}
*
aRadiusX
=
radiusX
;
*
aRadiusY
=
radiusY
;
double
angle
;
if
(
aGradient
-
>
mAngle
.
IsAngleValue
(
)
)
{
angle
=
aGradient
-
>
mAngle
.
GetAngleValueInRadians
(
)
;
}
else
{
angle
=
0
.
0
;
}
*
aLineEnd
=
*
aLineStart
+
gfxPoint
(
radiusX
*
cos
(
-
angle
)
radiusY
*
sin
(
-
angle
)
)
;
}
static
float
Interpolate
(
float
aF1
float
aF2
float
aFrac
)
{
return
aF1
+
aFrac
*
(
aF2
-
aF1
)
;
}
static
Color
InterpolateColor
(
const
Color
&
aC1
const
Color
&
aC2
float
aFrac
)
{
double
other
=
1
-
aFrac
;
return
Color
(
aC2
.
r
*
aFrac
+
aC1
.
r
*
other
aC2
.
g
*
aFrac
+
aC1
.
g
*
other
aC2
.
b
*
aFrac
+
aC1
.
b
*
other
aC2
.
a
*
aFrac
+
aC1
.
a
*
other
)
;
}
static
nscoord
FindTileStart
(
nscoord
aDirtyCoord
nscoord
aTilePos
nscoord
aTileDim
)
{
NS_ASSERTION
(
aTileDim
>
0
"
Non
-
positive
tile
dimension
"
)
;
double
multiples
=
floor
(
double
(
aDirtyCoord
-
aTilePos
)
/
aTileDim
)
;
return
NSToCoordRound
(
multiples
*
aTileDim
+
aTilePos
)
;
}
static
gfxFloat
LinearGradientStopPositionForPoint
(
const
gfxPoint
&
aGradientStart
const
gfxPoint
&
aGradientEnd
const
gfxPoint
&
aPoint
)
{
gfxPoint
d
=
aGradientEnd
-
aGradientStart
;
gfxPoint
p
=
aPoint
-
aGradientStart
;
double
numerator
=
d
.
x
*
p
.
x
+
d
.
y
*
p
.
y
;
double
denominator
=
d
.
x
*
d
.
x
+
d
.
y
*
d
.
y
;
return
numerator
/
denominator
;
}
static
bool
RectIsBeyondLinearGradientEdge
(
const
gfxRect
&
aRect
const
gfxMatrix
&
aPatternMatrix
const
nsTArray
<
ColorStop
>
&
aStops
const
gfxPoint
&
aGradientStart
const
gfxPoint
&
aGradientEnd
Color
*
aOutEdgeColor
)
{
gfxFloat
topLeft
=
LinearGradientStopPositionForPoint
(
aGradientStart
aGradientEnd
aPatternMatrix
.
TransformPoint
(
aRect
.
TopLeft
(
)
)
)
;
gfxFloat
topRight
=
LinearGradientStopPositionForPoint
(
aGradientStart
aGradientEnd
aPatternMatrix
.
TransformPoint
(
aRect
.
TopRight
(
)
)
)
;
gfxFloat
bottomLeft
=
LinearGradientStopPositionForPoint
(
aGradientStart
aGradientEnd
aPatternMatrix
.
TransformPoint
(
aRect
.
BottomLeft
(
)
)
)
;
gfxFloat
bottomRight
=
LinearGradientStopPositionForPoint
(
aGradientStart
aGradientEnd
aPatternMatrix
.
TransformPoint
(
aRect
.
BottomRight
(
)
)
)
;
const
ColorStop
&
firstStop
=
aStops
[
0
]
;
if
(
topLeft
<
firstStop
.
mPosition
&
&
topRight
<
firstStop
.
mPosition
&
&
bottomLeft
<
firstStop
.
mPosition
&
&
bottomRight
<
firstStop
.
mPosition
)
{
*
aOutEdgeColor
=
firstStop
.
mColor
;
return
true
;
}
const
ColorStop
&
lastStop
=
aStops
.
LastElement
(
)
;
if
(
topLeft
>
=
lastStop
.
mPosition
&
&
topRight
>
=
lastStop
.
mPosition
&
&
bottomLeft
>
=
lastStop
.
mPosition
&
&
bottomRight
>
=
lastStop
.
mPosition
)
{
*
aOutEdgeColor
=
lastStop
.
mColor
;
return
true
;
}
return
false
;
}
static
void
ResolveMidpoints
(
nsTArray
<
ColorStop
>
&
stops
)
{
for
(
size_t
x
=
1
;
x
<
stops
.
Length
(
)
-
1
;
)
{
if
(
!
stops
[
x
]
.
mIsMidpoint
)
{
x
+
+
;
continue
;
}
Color
color1
=
stops
[
x
-
1
]
.
mColor
;
Color
color2
=
stops
[
x
+
1
]
.
mColor
;
float
offset1
=
stops
[
x
-
1
]
.
mPosition
;
float
offset2
=
stops
[
x
+
1
]
.
mPosition
;
float
offset
=
stops
[
x
]
.
mPosition
;
if
(
offset
-
offset1
=
=
offset2
-
offset
)
{
stops
.
RemoveElementAt
(
x
)
;
continue
;
}
if
(
offset1
=
=
offset
)
{
stops
[
x
]
.
mColor
=
color2
;
stops
[
x
]
.
mIsMidpoint
=
false
;
continue
;
}
if
(
offset2
=
=
offset
)
{
stops
[
x
]
.
mColor
=
color1
;
stops
[
x
]
.
mIsMidpoint
=
false
;
continue
;
}
float
midpoint
=
(
offset
-
offset1
)
/
(
offset2
-
offset1
)
;
ColorStop
newStops
[
9
]
;
if
(
midpoint
>
.
5f
)
{
for
(
size_t
y
=
0
;
y
<
7
;
y
+
+
)
{
newStops
[
y
]
.
mPosition
=
offset1
+
(
offset
-
offset1
)
*
(
7
+
y
)
/
13
;
}
newStops
[
7
]
.
mPosition
=
offset
+
(
offset2
-
offset
)
/
3
;
newStops
[
8
]
.
mPosition
=
offset
+
(
offset2
-
offset
)
*
2
/
3
;
}
else
{
newStops
[
0
]
.
mPosition
=
offset1
+
(
offset
-
offset1
)
/
3
;
newStops
[
1
]
.
mPosition
=
offset1
+
(
offset
-
offset1
)
*
2
/
3
;
for
(
size_t
y
=
0
;
y
<
7
;
y
+
+
)
{
newStops
[
y
+
2
]
.
mPosition
=
offset
+
(
offset2
-
offset
)
*
y
/
13
;
}
}
for
(
auto
&
newStop
:
newStops
)
{
float
relativeOffset
=
(
newStop
.
mPosition
-
offset1
)
/
(
offset2
-
offset1
)
;
float
multiplier
=
powf
(
relativeOffset
logf
(
.
5f
)
/
logf
(
midpoint
)
)
;
gfx
:
:
Float
red
=
color1
.
r
+
multiplier
*
(
color2
.
r
-
color1
.
r
)
;
gfx
:
:
Float
green
=
color1
.
g
+
multiplier
*
(
color2
.
g
-
color1
.
g
)
;
gfx
:
:
Float
blue
=
color1
.
b
+
multiplier
*
(
color2
.
b
-
color1
.
b
)
;
gfx
:
:
Float
alpha
=
color1
.
a
+
multiplier
*
(
color2
.
a
-
color1
.
a
)
;
newStop
.
mColor
=
Color
(
red
green
blue
alpha
)
;
}
stops
.
ReplaceElementsAt
(
x
1
newStops
9
)
;
x
+
=
9
;
}
}
static
Color
Premultiply
(
const
Color
&
aColor
)
{
gfx
:
:
Float
a
=
aColor
.
a
;
return
Color
(
aColor
.
r
*
a
aColor
.
g
*
a
aColor
.
b
*
a
a
)
;
}
static
Color
Unpremultiply
(
const
Color
&
aColor
)
{
gfx
:
:
Float
a
=
aColor
.
a
;
return
(
a
>
0
.
f
)
?
Color
(
aColor
.
r
/
a
aColor
.
g
/
a
aColor
.
b
/
a
a
)
:
aColor
;
}
static
Color
TransparentColor
(
Color
aColor
)
{
aColor
.
a
=
0
;
return
aColor
;
}
static
const
float
kAlphaIncrementPerGradientStep
=
0
.
1f
;
static
void
ResolvePremultipliedAlpha
(
nsTArray
<
ColorStop
>
&
aStops
)
{
for
(
size_t
x
=
1
;
x
<
aStops
.
Length
(
)
;
x
+
+
)
{
const
ColorStop
leftStop
=
aStops
[
x
-
1
]
;
const
ColorStop
rightStop
=
aStops
[
x
]
;
if
(
leftStop
.
mColor
.
a
=
=
rightStop
.
mColor
.
a
|
|
leftStop
.
mPosition
=
=
rightStop
.
mPosition
)
{
continue
;
}
if
(
leftStop
.
mColor
.
a
=
=
0
)
{
aStops
[
x
-
1
]
.
mColor
=
TransparentColor
(
rightStop
.
mColor
)
;
continue
;
}
if
(
rightStop
.
mColor
.
a
=
=
0
)
{
ColorStop
newStop
=
rightStop
;
newStop
.
mColor
=
TransparentColor
(
leftStop
.
mColor
)
;
aStops
.
InsertElementAt
(
x
newStop
)
;
x
+
+
;
continue
;
}
if
(
leftStop
.
mColor
.
a
!
=
1
.
0f
|
|
rightStop
.
mColor
.
a
!
=
1
.
0f
)
{
Color
premulLeftColor
=
Premultiply
(
leftStop
.
mColor
)
;
Color
premulRightColor
=
Premultiply
(
rightStop
.
mColor
)
;
size_t
stepCount
=
NSToIntFloor
(
fabsf
(
leftStop
.
mColor
.
a
-
rightStop
.
mColor
.
a
)
/
kAlphaIncrementPerGradientStep
)
;
for
(
size_t
y
=
1
;
y
<
stepCount
;
y
+
+
)
{
float
frac
=
static_cast
<
float
>
(
y
)
/
stepCount
;
ColorStop
newStop
(
Interpolate
(
leftStop
.
mPosition
rightStop
.
mPosition
frac
)
false
Unpremultiply
(
InterpolateColor
(
premulLeftColor
premulRightColor
frac
)
)
)
;
aStops
.
InsertElementAt
(
x
newStop
)
;
x
+
+
;
}
}
}
}
static
ColorStop
InterpolateColorStop
(
const
ColorStop
&
aFirst
const
ColorStop
&
aSecond
double
aPosition
const
Color
&
aDefault
)
{
MOZ_ASSERT
(
aFirst
.
mPosition
<
=
aPosition
)
;
MOZ_ASSERT
(
aPosition
<
=
aSecond
.
mPosition
)
;
double
delta
=
aSecond
.
mPosition
-
aFirst
.
mPosition
;
if
(
delta
<
1e
-
6
)
{
return
ColorStop
(
aPosition
false
aDefault
)
;
}
return
ColorStop
(
aPosition
false
Unpremultiply
(
InterpolateColor
(
Premultiply
(
aFirst
.
mColor
)
Premultiply
(
aSecond
.
mColor
)
(
aPosition
-
aFirst
.
mPosition
)
/
delta
)
)
)
;
}
static
void
ClampColorStops
(
nsTArray
<
ColorStop
>
&
aStops
)
{
MOZ_ASSERT
(
aStops
.
Length
(
)
>
0
)
;
if
(
aStops
.
Length
(
)
<
2
|
|
aStops
[
0
]
.
mPosition
>
1
|
|
aStops
.
LastElement
(
)
.
mPosition
<
0
)
{
Color
c
=
aStops
[
0
]
.
mPosition
>
1
?
aStops
[
0
]
.
mColor
:
aStops
.
LastElement
(
)
.
mColor
;
aStops
.
Clear
(
)
;
aStops
.
AppendElement
(
ColorStop
(
0
false
c
)
)
;
return
;
}
for
(
size_t
i
=
aStops
.
Length
(
)
-
1
;
i
>
0
;
i
-
-
)
{
if
(
aStops
[
i
-
1
]
.
mPosition
<
1
&
&
aStops
[
i
]
.
mPosition
>
=
1
)
{
aStops
[
i
]
=
InterpolateColorStop
(
aStops
[
i
-
1
]
aStops
[
i
]
1
aStops
[
i
-
1
]
.
mColor
)
;
aStops
.
RemoveElementsAt
(
i
+
1
aStops
.
Length
(
)
-
(
i
+
1
)
)
;
}
if
(
aStops
[
i
-
1
]
.
mPosition
<
=
0
&
&
aStops
[
i
]
.
mPosition
>
0
)
{
aStops
[
i
-
1
]
=
InterpolateColorStop
(
aStops
[
i
-
1
]
aStops
[
i
]
0
aStops
[
i
]
.
mColor
)
;
aStops
.
RemoveElementsAt
(
0
i
-
1
)
;
break
;
}
}
MOZ_ASSERT
(
aStops
[
0
]
.
mPosition
>
=
-
1e6
)
;
MOZ_ASSERT
(
aStops
.
LastElement
(
)
.
mPosition
-
1
<
=
1e6
)
;
if
(
aStops
[
0
]
.
mPosition
>
0
)
{
aStops
.
InsertElementAt
(
0
ColorStop
(
0
false
aStops
[
0
]
.
mColor
)
)
;
}
if
(
aStops
.
LastElement
(
)
.
mPosition
<
1
)
{
aStops
.
AppendElement
(
ColorStop
(
1
false
aStops
.
LastElement
(
)
.
mColor
)
)
;
}
}
namespace
mozilla
{
static
Maybe
<
double
>
GetSpecifiedGradientPosition
(
const
nsStyleCoord
&
aCoord
int32_t
aAppUnitsPerPixel
gfxFloat
aLineLength
)
{
auto
GetCoord
=
[
&
]
(
nscoord
aCoord
)
-
>
double
{
if
(
aLineLength
<
1e
-
6
)
{
return
0
.
0
;
}
return
NSAppUnitsToFloatPixels
(
aCoord
aAppUnitsPerPixel
)
/
aLineLength
;
}
;
switch
(
aCoord
.
GetUnit
(
)
)
{
case
eStyleUnit_None
:
return
Nothing
(
)
;
case
eStyleUnit_Percent
:
return
Some
(
aCoord
.
GetPercentValue
(
)
)
;
case
eStyleUnit_Coord
:
return
Some
(
GetCoord
(
aCoord
.
GetCoordValue
(
)
)
)
;
case
eStyleUnit_Calc
:
{
const
nsStyleCoord
:
:
Calc
*
calc
=
aCoord
.
GetCalcValue
(
)
;
return
Some
(
calc
-
>
mPercent
+
GetCoord
(
calc
-
>
mLength
)
)
;
}
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
unit
in
gradient
color
stop
position
?
"
)
;
return
Nothing
(
)
;
}
}
static
nsTArray
<
ColorStop
>
ComputeColorStops
(
ComputedStyle
*
aComputedStyle
const
nsStyleGradient
&
aGradient
int32_t
aAppUnitsPerPixel
gfxFloat
aLineLength
)
{
MOZ_ASSERT
(
aGradient
.
mStops
.
Length
(
)
>
=
2
"
The
parser
should
reject
gradients
with
less
than
two
stops
"
)
;
nsTArray
<
ColorStop
>
stops
(
aGradient
.
mStops
.
Length
(
)
)
;
int32_t
firstUnsetPosition
=
-
1
;
for
(
uint32_t
i
=
0
;
i
<
aGradient
.
mStops
.
Length
(
)
;
+
+
i
)
{
const
nsStyleGradientStop
&
stop
=
aGradient
.
mStops
[
i
]
;
double
position
;
Maybe
<
double
>
specifiedPosition
=
GetSpecifiedGradientPosition
(
stop
.
mLocation
aAppUnitsPerPixel
aLineLength
)
;
if
(
specifiedPosition
)
{
position
=
*
specifiedPosition
;
}
else
if
(
i
=
=
0
)
{
position
=
0
.
0
;
}
else
if
(
i
=
=
aGradient
.
mStops
.
Length
(
)
-
1
)
{
position
=
1
.
0
;
}
else
{
if
(
firstUnsetPosition
<
0
)
{
firstUnsetPosition
=
i
;
}
auto
stopColor
=
stop
.
mColor
.
CalcColor
(
aComputedStyle
)
;
stops
.
AppendElement
(
ColorStop
(
0
stop
.
mIsInterpolationHint
Color
:
:
FromABGR
(
stopColor
)
)
)
;
continue
;
}
if
(
i
>
0
)
{
double
previousPosition
=
firstUnsetPosition
>
0
?
stops
[
firstUnsetPosition
-
1
]
.
mPosition
:
stops
[
i
-
1
]
.
mPosition
;
position
=
std
:
:
max
(
position
previousPosition
)
;
}
auto
stopColor
=
stop
.
mColor
.
CalcColor
(
aComputedStyle
)
;
stops
.
AppendElement
(
ColorStop
(
position
stop
.
mIsInterpolationHint
Color
:
:
FromABGR
(
stopColor
)
)
)
;
if
(
firstUnsetPosition
>
0
)
{
double
p
=
stops
[
firstUnsetPosition
-
1
]
.
mPosition
;
double
d
=
(
stops
[
i
]
.
mPosition
-
p
)
/
(
i
-
firstUnsetPosition
+
1
)
;
for
(
uint32_t
j
=
firstUnsetPosition
;
j
<
i
;
+
+
j
)
{
p
+
=
d
;
stops
[
j
]
.
mPosition
=
p
;
}
firstUnsetPosition
=
-
1
;
}
}
return
stops
;
}
nsCSSGradientRenderer
nsCSSGradientRenderer
:
:
Create
(
nsPresContext
*
aPresContext
ComputedStyle
*
aComputedStyle
nsStyleGradient
*
aGradient
const
nsSize
&
aIntrinsicSize
)
{
nscoord
appUnitsPerDevPixel
=
aPresContext
-
>
AppUnitsPerDevPixel
(
)
;
gfxSize
srcSize
=
gfxSize
(
gfxFloat
(
aIntrinsicSize
.
width
)
/
appUnitsPerDevPixel
gfxFloat
(
aIntrinsicSize
.
height
)
/
appUnitsPerDevPixel
)
;
gfxPoint
lineStart
lineEnd
;
double
radiusX
=
0
radiusY
=
0
;
if
(
aGradient
-
>
mShape
=
=
NS_STYLE_GRADIENT_SHAPE_LINEAR
)
{
ComputeLinearGradientLine
(
aPresContext
aGradient
srcSize
&
lineStart
&
lineEnd
)
;
}
else
{
ComputeRadialGradientLine
(
aPresContext
aGradient
srcSize
&
lineStart
&
lineEnd
&
radiusX
&
radiusY
)
;
}
if
(
!
lineStart
.
IsFinite
(
)
|
|
!
lineEnd
.
IsFinite
(
)
)
{
lineStart
=
lineEnd
=
gfxPoint
(
0
0
)
;
}
gfxFloat
lineLength
=
NS_hypot
(
lineEnd
.
x
-
lineStart
.
x
lineEnd
.
y
-
lineStart
.
y
)
;
nsTArray
<
ColorStop
>
stops
=
ComputeColorStops
(
aComputedStyle
*
aGradient
appUnitsPerDevPixel
lineLength
)
;
ResolveMidpoints
(
stops
)
;
nsCSSGradientRenderer
renderer
;
renderer
.
mPresContext
=
aPresContext
;
renderer
.
mGradient
=
aGradient
;
renderer
.
mStops
=
std
:
:
move
(
stops
)
;
renderer
.
mLineStart
=
lineStart
;
renderer
.
mLineEnd
=
lineEnd
;
renderer
.
mRadiusX
=
radiusX
;
renderer
.
mRadiusY
=
radiusY
;
return
renderer
;
}
void
nsCSSGradientRenderer
:
:
Paint
(
gfxContext
&
aContext
const
nsRect
&
aDest
const
nsRect
&
aFillArea
const
nsSize
&
aRepeatSize
const
CSSIntRect
&
aSrc
const
nsRect
&
aDirtyRect
float
aOpacity
)
{
AUTO_PROFILER_LABEL
(
"
nsCSSGradientRenderer
:
:
Paint
"
GRAPHICS
)
;
if
(
aDest
.
IsEmpty
(
)
|
|
aFillArea
.
IsEmpty
(
)
)
{
return
;
}
nscoord
appUnitsPerDevPixel
=
mPresContext
-
>
AppUnitsPerDevPixel
(
)
;
gfxFloat
lineLength
=
NS_hypot
(
mLineEnd
.
x
-
mLineStart
.
x
mLineEnd
.
y
-
mLineStart
.
y
)
;
bool
cellContainsFill
=
aDest
.
Contains
(
aFillArea
)
;
bool
forceRepeatToCoverTiles
=
mGradient
-
>
mShape
=
=
NS_STYLE_GRADIENT_SHAPE_LINEAR
&
&
(
mLineStart
.
x
=
=
mLineEnd
.
x
)
!
=
(
mLineStart
.
y
=
=
mLineEnd
.
y
)
&
&
aRepeatSize
.
width
=
=
aDest
.
width
&
&
aRepeatSize
.
height
=
=
aDest
.
height
&
&
!
mGradient
-
>
mRepeating
&
&
!
aSrc
.
IsEmpty
(
)
&
&
!
cellContainsFill
;
gfxMatrix
matrix
;
if
(
forceRepeatToCoverTiles
)
{
double
rectLen
;
double
offset
;
if
(
mLineStart
.
x
>
mLineEnd
.
x
|
|
mLineStart
.
y
>
mLineEnd
.
y
)
{
std
:
:
swap
(
mLineStart
mLineEnd
)
;
matrix
.
PreScale
(
-
1
-
1
)
;
}
gfxRect
srcRectDev
=
nsLayoutUtils
:
:
RectToGfxRect
(
CSSPixel
:
:
ToAppUnits
(
aSrc
)
appUnitsPerDevPixel
)
;
if
(
mLineStart
.
x
!
=
mLineEnd
.
x
)
{
rectLen
=
srcRectDev
.
width
;
offset
=
(
srcRectDev
.
x
-
mLineStart
.
x
)
/
lineLength
;
mLineStart
.
x
=
srcRectDev
.
x
;
mLineEnd
.
x
=
srcRectDev
.
XMost
(
)
;
}
else
{
rectLen
=
srcRectDev
.
height
;
offset
=
(
srcRectDev
.
y
-
mLineStart
.
y
)
/
lineLength
;
mLineStart
.
y
=
srcRectDev
.
y
;
mLineEnd
.
y
=
srcRectDev
.
YMost
(
)
;
}
double
scale
=
lineLength
/
rectLen
;
for
(
size_t
i
=
0
;
i
<
mStops
.
Length
(
)
;
i
+
+
)
{
mStops
[
i
]
.
mPosition
=
(
mStops
[
i
]
.
mPosition
-
offset
)
*
fabs
(
scale
)
;
}
ClampColorStops
(
mStops
)
;
lineLength
=
rectLen
;
}
double
firstStop
=
mStops
[
0
]
.
mPosition
;
if
(
mGradient
-
>
mShape
!
=
NS_STYLE_GRADIENT_SHAPE_LINEAR
&
&
firstStop
<
0
.
0
)
{
if
(
mGradient
-
>
mRepeating
)
{
double
lastStop
=
mStops
[
mStops
.
Length
(
)
-
1
]
.
mPosition
;
double
stopDelta
=
lastStop
-
firstStop
;
if
(
stopDelta
>
=
1e
-
6
)
{
double
instanceCount
=
ceil
(
-
firstStop
/
stopDelta
)
;
double
offset
=
instanceCount
*
stopDelta
;
for
(
uint32_t
i
=
0
;
i
<
mStops
.
Length
(
)
;
i
+
+
)
{
mStops
[
i
]
.
mPosition
+
=
offset
;
}
}
}
else
{
for
(
uint32_t
i
=
0
;
i
<
mStops
.
Length
(
)
;
i
+
+
)
{
double
pos
=
mStops
[
i
]
.
mPosition
;
if
(
pos
<
0
.
0
)
{
mStops
[
i
]
.
mPosition
=
0
.
0
;
if
(
i
<
mStops
.
Length
(
)
-
1
)
{
double
nextPos
=
mStops
[
i
+
1
]
.
mPosition
;
if
(
nextPos
>
=
0
.
0
&
&
nextPos
-
pos
>
=
1e
-
6
)
{
float
frac
=
float
(
(
0
.
0
-
pos
)
/
(
nextPos
-
pos
)
)
;
mStops
[
i
]
.
mColor
=
InterpolateColor
(
mStops
[
i
]
.
mColor
mStops
[
i
+
1
]
.
mColor
frac
)
;
}
}
}
}
}
firstStop
=
mStops
[
0
]
.
mPosition
;
MOZ_ASSERT
(
firstStop
>
=
0
.
0
"
Failed
to
fix
stop
offsets
"
)
;
}
if
(
mGradient
-
>
mShape
!
=
NS_STYLE_GRADIENT_SHAPE_LINEAR
&
&
!
mGradient
-
>
mRepeating
)
{
firstStop
=
0
;
}
double
lastStop
=
mStops
[
mStops
.
Length
(
)
-
1
]
.
mPosition
;
double
stopScale
;
double
stopOrigin
=
firstStop
;
double
stopEnd
=
lastStop
;
double
stopDelta
=
lastStop
-
firstStop
;
bool
zeroRadius
=
mGradient
-
>
mShape
!
=
NS_STYLE_GRADIENT_SHAPE_LINEAR
&
&
(
mRadiusX
<
1e
-
6
|
|
mRadiusY
<
1e
-
6
)
;
if
(
stopDelta
<
1e
-
6
|
|
lineLength
<
1e
-
6
|
|
zeroRadius
)
{
if
(
mGradient
-
>
mRepeating
|
|
zeroRadius
)
{
mRadiusX
=
mRadiusY
=
0
.
0
;
}
stopDelta
=
0
.
0
;
}
if
(
!
mGradient
-
>
mRepeating
|
|
stopDelta
=
=
0
.
0
)
{
stopOrigin
=
std
:
:
min
(
stopOrigin
0
.
0
)
;
stopEnd
=
std
:
:
max
(
stopEnd
1
.
0
)
;
}
stopScale
=
1
.
0
/
(
stopEnd
-
stopOrigin
)
;
RefPtr
<
gfxPattern
>
gradientPattern
;
gfxPoint
gradientStart
;
gfxPoint
gradientEnd
;
if
(
mGradient
-
>
mShape
=
=
NS_STYLE_GRADIENT_SHAPE_LINEAR
)
{
gradientStart
=
mLineStart
+
(
mLineEnd
-
mLineStart
)
*
stopOrigin
;
gradientEnd
=
mLineStart
+
(
mLineEnd
-
mLineStart
)
*
stopEnd
;
if
(
stopDelta
=
=
0
.
0
)
{
gradientEnd
=
gradientStart
+
(
mLineEnd
-
mLineStart
)
;
}
gradientPattern
=
new
gfxPattern
(
gradientStart
.
x
gradientStart
.
y
gradientEnd
.
x
gradientEnd
.
y
)
;
}
else
{
NS_ASSERTION
(
firstStop
>
=
0
.
0
"
Negative
stops
not
allowed
for
radial
gradients
"
)
;
double
innerRadius
=
mRadiusX
*
stopOrigin
;
double
outerRadius
=
mRadiusX
*
stopEnd
;
if
(
stopDelta
=
=
0
.
0
)
{
outerRadius
=
innerRadius
+
1
;
}
gradientPattern
=
new
gfxPattern
(
mLineStart
.
x
mLineStart
.
y
innerRadius
mLineStart
.
x
mLineStart
.
y
outerRadius
)
;
if
(
mRadiusX
!
=
mRadiusY
)
{
matrix
.
PreTranslate
(
mLineStart
)
;
matrix
.
PreScale
(
1
.
0
mRadiusX
/
mRadiusY
)
;
matrix
.
PreTranslate
(
-
mLineStart
)
;
}
}
matrix
.
PreTranslate
(
gfxPoint
(
mPresContext
-
>
CSSPixelsToDevPixels
(
aSrc
.
x
)
mPresContext
-
>
CSSPixelsToDevPixels
(
aSrc
.
y
)
)
)
;
matrix
.
PreScale
(
gfxFloat
(
nsPresContext
:
:
CSSPixelsToAppUnits
(
aSrc
.
width
)
)
/
aDest
.
width
gfxFloat
(
nsPresContext
:
:
CSSPixelsToAppUnits
(
aSrc
.
height
)
)
/
aDest
.
height
)
;
gradientPattern
-
>
SetMatrix
(
matrix
)
;
if
(
stopDelta
=
=
0
.
0
)
{
Color
firstColor
(
mStops
[
0
]
.
mColor
)
;
Color
lastColor
(
mStops
.
LastElement
(
)
.
mColor
)
;
mStops
.
Clear
(
)
;
if
(
!
mGradient
-
>
mRepeating
&
&
!
zeroRadius
)
{
mStops
.
AppendElement
(
ColorStop
(
firstStop
false
firstColor
)
)
;
}
mStops
.
AppendElement
(
ColorStop
(
firstStop
false
lastColor
)
)
;
}
ResolvePremultipliedAlpha
(
mStops
)
;
bool
isRepeat
=
mGradient
-
>
mRepeating
|
|
forceRepeatToCoverTiles
;
nsTArray
<
gfx
:
:
GradientStop
>
rawStops
(
mStops
.
Length
(
)
)
;
rawStops
.
SetLength
(
mStops
.
Length
(
)
)
;
for
(
uint32_t
i
=
0
;
i
<
mStops
.
Length
(
)
;
i
+
+
)
{
rawStops
[
i
]
.
color
=
mStops
[
i
]
.
mColor
;
rawStops
[
i
]
.
color
.
a
*
=
aOpacity
;
rawStops
[
i
]
.
offset
=
stopScale
*
(
mStops
[
i
]
.
mPosition
-
stopOrigin
)
;
}
RefPtr
<
mozilla
:
:
gfx
:
:
GradientStops
>
gs
=
gfxGradientCache
:
:
GetOrCreateGradientStops
(
aContext
.
GetDrawTarget
(
)
rawStops
isRepeat
?
gfx
:
:
ExtendMode
:
:
REPEAT
:
gfx
:
:
ExtendMode
:
:
CLAMP
)
;
gradientPattern
-
>
SetColorStops
(
gs
)
;
nsRect
dirty
;
if
(
!
dirty
.
IntersectRect
(
aDirtyRect
aFillArea
)
)
return
;
gfxRect
areaToFill
=
nsLayoutUtils
:
:
RectToGfxRect
(
aFillArea
appUnitsPerDevPixel
)
;
gfxRect
dirtyAreaToFill
=
nsLayoutUtils
:
:
RectToGfxRect
(
dirty
appUnitsPerDevPixel
)
;
dirtyAreaToFill
.
RoundOut
(
)
;
Matrix
ctm
=
aContext
.
CurrentMatrix
(
)
;
bool
isCTMPreservingAxisAlignedRectangles
=
ctm
.
PreservesAxisAlignedRectangles
(
)
;
nscoord
xStart
=
FindTileStart
(
dirty
.
x
aDest
.
x
aRepeatSize
.
width
)
;
nscoord
yStart
=
FindTileStart
(
dirty
.
y
aDest
.
y
aRepeatSize
.
height
)
;
nscoord
xEnd
=
forceRepeatToCoverTiles
?
xStart
+
aDest
.
width
:
dirty
.
XMost
(
)
;
nscoord
yEnd
=
forceRepeatToCoverTiles
?
yStart
+
aDest
.
height
:
dirty
.
YMost
(
)
;
if
(
TryPaintTilesWithExtendMode
(
aContext
gradientPattern
xStart
yStart
dirtyAreaToFill
aDest
aRepeatSize
forceRepeatToCoverTiles
)
)
{
return
;
}
for
(
nscoord
y
=
yStart
;
y
<
yEnd
;
y
+
=
aRepeatSize
.
height
)
{
for
(
nscoord
x
=
xStart
;
x
<
xEnd
;
x
+
=
aRepeatSize
.
width
)
{
gfxRect
tileRect
=
nsLayoutUtils
:
:
RectToGfxRect
(
nsRect
(
x
y
aDest
.
width
aDest
.
height
)
appUnitsPerDevPixel
)
;
gfxRect
fillRect
=
forceRepeatToCoverTiles
?
areaToFill
:
tileRect
.
Intersect
(
areaToFill
)
;
gfxPoint
snappedFillRectTopLeft
=
fillRect
.
TopLeft
(
)
;
gfxPoint
snappedFillRectTopRight
=
fillRect
.
TopRight
(
)
;
gfxPoint
snappedFillRectBottomRight
=
fillRect
.
BottomRight
(
)
;
if
(
isCTMPreservingAxisAlignedRectangles
&
&
aContext
.
UserToDevicePixelSnapped
(
snappedFillRectTopLeft
true
)
&
&
aContext
.
UserToDevicePixelSnapped
(
snappedFillRectBottomRight
true
)
&
&
aContext
.
UserToDevicePixelSnapped
(
snappedFillRectTopRight
true
)
)
{
if
(
snappedFillRectTopLeft
.
x
=
=
snappedFillRectBottomRight
.
x
|
|
snappedFillRectTopLeft
.
y
=
=
snappedFillRectBottomRight
.
y
)
{
continue
;
}
gfxMatrix
transform
=
gfxUtils
:
:
TransformRectToRect
(
fillRect
snappedFillRectTopLeft
snappedFillRectTopRight
snappedFillRectBottomRight
)
;
aContext
.
SetMatrixDouble
(
transform
)
;
}
aContext
.
NewPath
(
)
;
aContext
.
Rectangle
(
fillRect
)
;
gfxRect
dirtyFillRect
=
fillRect
.
Intersect
(
dirtyAreaToFill
)
;
gfxRect
fillRectRelativeToTile
=
dirtyFillRect
-
tileRect
.
TopLeft
(
)
;
Color
edgeColor
;
if
(
mGradient
-
>
mShape
=
=
NS_STYLE_GRADIENT_SHAPE_LINEAR
&
&
!
isRepeat
&
&
RectIsBeyondLinearGradientEdge
(
fillRectRelativeToTile
matrix
mStops
gradientStart
gradientEnd
&
edgeColor
)
)
{
edgeColor
.
a
*
=
aOpacity
;
aContext
.
SetColor
(
edgeColor
)
;
}
else
{
aContext
.
SetMatrixDouble
(
aContext
.
CurrentMatrixDouble
(
)
.
Copy
(
)
.
PreTranslate
(
tileRect
.
TopLeft
(
)
)
)
;
aContext
.
SetPattern
(
gradientPattern
)
;
}
aContext
.
Fill
(
)
;
aContext
.
SetMatrix
(
ctm
)
;
}
}
}
bool
nsCSSGradientRenderer
:
:
TryPaintTilesWithExtendMode
(
gfxContext
&
aContext
gfxPattern
*
aGradientPattern
nscoord
aXStart
nscoord
aYStart
const
gfxRect
&
aDirtyAreaToFill
const
nsRect
&
aDest
const
nsSize
&
aRepeatSize
bool
aForceRepeatToCoverTiles
)
{
if
(
aForceRepeatToCoverTiles
)
{
return
false
;
}
nscoord
appUnitsPerDevPixel
=
mPresContext
-
>
AppUnitsPerDevPixel
(
)
;
bool
canUseExtendModeForTiling
=
(
aXStart
%
appUnitsPerDevPixel
=
=
0
)
&
&
(
aYStart
%
appUnitsPerDevPixel
=
=
0
)
&
&
(
aDest
.
width
%
appUnitsPerDevPixel
=
=
0
)
&
&
(
aDest
.
height
%
appUnitsPerDevPixel
=
=
0
)
&
&
(
aRepeatSize
.
width
=
=
aDest
.
width
)
&
&
(
aRepeatSize
.
height
=
=
aDest
.
height
)
;
if
(
!
canUseExtendModeForTiling
)
{
return
false
;
}
IntSize
tileSize
{
NSAppUnitsToIntPixels
(
aDest
.
width
appUnitsPerDevPixel
)
NSAppUnitsToIntPixels
(
aDest
.
height
appUnitsPerDevPixel
)
}
;
if
(
!
Factory
:
:
ReasonableSurfaceSize
(
tileSize
)
)
{
return
false
;
}
bool
shouldUseExtendModeForTiling
=
aDirtyAreaToFill
.
Area
(
)
>
(
tileSize
.
width
*
tileSize
.
height
)
*
16
.
0
;
if
(
!
shouldUseExtendModeForTiling
)
{
return
false
;
}
RefPtr
<
gfx
:
:
SourceSurface
>
tileSurface
;
{
RefPtr
<
gfx
:
:
DrawTarget
>
tileTarget
=
aContext
.
GetDrawTarget
(
)
-
>
CreateSimilarDrawTarget
(
tileSize
gfx
:
:
SurfaceFormat
:
:
B8G8R8A8
)
;
if
(
!
tileTarget
|
|
!
tileTarget
-
>
IsValid
(
)
)
{
return
false
;
}
RefPtr
<
gfxContext
>
tileContext
=
gfxContext
:
:
CreateOrNull
(
tileTarget
)
;
tileContext
-
>
SetPattern
(
aGradientPattern
)
;
tileContext
-
>
Paint
(
)
;
tileContext
=
nullptr
;
tileSurface
=
tileTarget
-
>
Snapshot
(
)
;
tileTarget
=
nullptr
;
}
Matrix
tileTransform
=
Matrix
:
:
Translation
(
NSAppUnitsToFloatPixels
(
aXStart
appUnitsPerDevPixel
)
NSAppUnitsToFloatPixels
(
aYStart
appUnitsPerDevPixel
)
)
;
aContext
.
NewPath
(
)
;
aContext
.
Rectangle
(
aDirtyAreaToFill
)
;
aContext
.
Fill
(
SurfacePattern
(
tileSurface
ExtendMode
:
:
REPEAT
tileTransform
)
)
;
return
true
;
}
void
nsCSSGradientRenderer
:
:
BuildWebRenderParameters
(
float
aOpacity
wr
:
:
ExtendMode
&
aMode
nsTArray
<
wr
:
:
GradientStop
>
&
aStops
LayoutDevicePoint
&
aLineStart
LayoutDevicePoint
&
aLineEnd
LayoutDeviceSize
&
aGradientRadius
)
{
aMode
=
mGradient
-
>
mRepeating
?
wr
:
:
ExtendMode
:
:
Repeat
:
wr
:
:
ExtendMode
:
:
Clamp
;
aStops
.
SetLength
(
mStops
.
Length
(
)
)
;
for
(
uint32_t
i
=
0
;
i
<
mStops
.
Length
(
)
;
i
+
+
)
{
aStops
[
i
]
.
color
.
r
=
mStops
[
i
]
.
mColor
.
r
;
aStops
[
i
]
.
color
.
g
=
mStops
[
i
]
.
mColor
.
g
;
aStops
[
i
]
.
color
.
b
=
mStops
[
i
]
.
mColor
.
b
;
aStops
[
i
]
.
color
.
a
=
mStops
[
i
]
.
mColor
.
a
*
aOpacity
;
aStops
[
i
]
.
offset
=
mStops
[
i
]
.
mPosition
;
}
aLineStart
=
LayoutDevicePoint
(
mLineStart
.
x
mLineStart
.
y
)
;
aLineEnd
=
LayoutDevicePoint
(
mLineEnd
.
x
mLineEnd
.
y
)
;
aGradientRadius
=
LayoutDeviceSize
(
mRadiusX
mRadiusY
)
;
}
void
nsCSSGradientRenderer
:
:
BuildWebRenderDisplayItems
(
wr
:
:
DisplayListBuilder
&
aBuilder
const
layers
:
:
StackingContextHelper
&
aSc
const
nsRect
&
aDest
const
nsRect
&
aFillArea
const
nsSize
&
aRepeatSize
const
CSSIntRect
&
aSrc
bool
aIsBackfaceVisible
float
aOpacity
)
{
if
(
aDest
.
IsEmpty
(
)
|
|
aFillArea
.
IsEmpty
(
)
)
{
return
;
}
wr
:
:
ExtendMode
extendMode
;
nsTArray
<
wr
:
:
GradientStop
>
stops
;
LayoutDevicePoint
lineStart
;
LayoutDevicePoint
lineEnd
;
LayoutDeviceSize
gradientRadius
;
BuildWebRenderParameters
(
aOpacity
extendMode
stops
lineStart
lineEnd
gradientRadius
)
;
nscoord
appUnitsPerDevPixel
=
mPresContext
-
>
AppUnitsPerDevPixel
(
)
;
nsPoint
firstTile
=
nsPoint
(
FindTileStart
(
aFillArea
.
x
aDest
.
x
aRepeatSize
.
width
)
FindTileStart
(
aFillArea
.
y
aDest
.
y
aRepeatSize
.
height
)
)
;
LayoutDeviceRect
clipBounds
=
LayoutDevicePixel
:
:
FromAppUnits
(
aFillArea
appUnitsPerDevPixel
)
;
LayoutDeviceRect
firstTileBounds
=
LayoutDevicePixel
:
:
FromAppUnits
(
nsRect
(
firstTile
aDest
.
Size
(
)
)
appUnitsPerDevPixel
)
;
LayoutDeviceSize
tileRepeat
=
LayoutDevicePixel
:
:
FromAppUnits
(
aRepeatSize
appUnitsPerDevPixel
)
;
LayoutDevicePoint
tileToClip
=
clipBounds
.
BottomRight
(
)
-
firstTileBounds
.
TopLeft
(
)
;
LayoutDeviceRect
gradientBounds
=
LayoutDeviceRect
(
firstTileBounds
.
TopLeft
(
)
LayoutDeviceSize
(
tileToClip
.
x
tileToClip
.
y
)
)
;
LayoutDeviceSize
tileSpacing
=
tileRepeat
-
firstTileBounds
.
Size
(
)
;
LayoutDeviceRect
srcTransform
=
LayoutDeviceRect
(
nsPresContext
:
:
CSSPixelsToAppUnits
(
aSrc
.
x
)
nsPresContext
:
:
CSSPixelsToAppUnits
(
aSrc
.
y
)
aDest
.
width
/
(
(
float
)
nsPresContext
:
:
CSSPixelsToAppUnits
(
aSrc
.
width
)
)
aDest
.
height
/
(
(
float
)
nsPresContext
:
:
CSSPixelsToAppUnits
(
aSrc
.
height
)
)
)
;
lineStart
.
x
=
(
lineStart
.
x
-
srcTransform
.
x
)
*
srcTransform
.
width
;
lineStart
.
y
=
(
lineStart
.
y
-
srcTransform
.
y
)
*
srcTransform
.
height
;
if
(
mGradient
-
>
mShape
=
=
NS_STYLE_GRADIENT_SHAPE_LINEAR
)
{
lineEnd
.
x
=
(
lineEnd
.
x
-
srcTransform
.
x
)
*
srcTransform
.
width
;
lineEnd
.
y
=
(
lineEnd
.
y
-
srcTransform
.
y
)
*
srcTransform
.
height
;
aBuilder
.
PushLinearGradient
(
mozilla
:
:
wr
:
:
ToLayoutRect
(
gradientBounds
)
mozilla
:
:
wr
:
:
ToLayoutRect
(
clipBounds
)
aIsBackfaceVisible
mozilla
:
:
wr
:
:
ToLayoutPoint
(
lineStart
)
mozilla
:
:
wr
:
:
ToLayoutPoint
(
lineEnd
)
stops
extendMode
mozilla
:
:
wr
:
:
ToLayoutSize
(
firstTileBounds
.
Size
(
)
)
mozilla
:
:
wr
:
:
ToLayoutSize
(
tileSpacing
)
)
;
}
else
{
gradientRadius
.
width
*
=
srcTransform
.
width
;
gradientRadius
.
height
*
=
srcTransform
.
height
;
aBuilder
.
PushRadialGradient
(
mozilla
:
:
wr
:
:
ToLayoutRect
(
gradientBounds
)
mozilla
:
:
wr
:
:
ToLayoutRect
(
clipBounds
)
aIsBackfaceVisible
mozilla
:
:
wr
:
:
ToLayoutPoint
(
lineStart
)
mozilla
:
:
wr
:
:
ToLayoutSize
(
gradientRadius
)
stops
extendMode
mozilla
:
:
wr
:
:
ToLayoutSize
(
firstTileBounds
.
Size
(
)
)
mozilla
:
:
wr
:
:
ToLayoutSize
(
tileSpacing
)
)
;
}
}
}
