#
include
"
HitTestInfo
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderAPI
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
namespace
mozilla
{
static
StaticAutoPtr
<
const
HitTestInfo
>
gEmptyHitTestInfo
;
const
HitTestInfo
&
HitTestInfo
:
:
Empty
(
)
{
if
(
gEmptyHitTestInfo
)
{
gEmptyHitTestInfo
=
new
HitTestInfo
(
)
;
}
return
*
gEmptyHitTestInfo
;
}
void
HitTestInfo
:
:
Shutdown
(
)
{
gEmptyHitTestInfo
=
nullptr
;
}
using
ViewID
=
layers
:
:
ScrollableLayerGuid
:
:
ViewID
;
ViewID
HitTestInfo
:
:
GetViewId
(
wr
:
:
DisplayListBuilder
&
aBuilder
const
ActiveScrolledRoot
*
aASR
)
const
{
if
(
mScrollTarget
)
{
return
*
mScrollTarget
;
}
Maybe
<
ViewID
>
fixedTarget
=
aBuilder
.
GetContainingFixedPosScrollTarget
(
aASR
)
;
if
(
fixedTarget
)
{
return
*
fixedTarget
;
}
if
(
aASR
)
{
return
aASR
-
>
GetViewId
(
)
;
}
return
layers
:
:
ScrollableLayerGuid
:
:
NULL_SCROLL_ID
;
}
void
HitTestInfo
:
:
Initialize
(
nsDisplayListBuilder
*
aBuilder
nsIFrame
*
aFrame
)
{
if
(
!
aBuilder
-
>
BuildCompositorHitTestInfo
(
)
)
{
return
;
}
mInfo
=
aFrame
-
>
GetCompositorHitTestInfo
(
aBuilder
)
;
if
(
mInfo
!
=
gfx
:
:
CompositorHitTestInvisibleToHit
)
{
mArea
=
aFrame
-
>
GetCompositorHitTestArea
(
aBuilder
)
;
InitializeScrollTarget
(
aBuilder
)
;
}
}
void
HitTestInfo
:
:
InitializeScrollTarget
(
nsDisplayListBuilder
*
aBuilder
)
{
if
(
aBuilder
-
>
GetCurrentScrollbarDirection
(
)
.
isSome
(
)
)
{
MOZ_ASSERT
(
Info
(
)
.
contains
(
CompositorHitTestFlags
:
:
eScrollbar
)
)
;
mScrollTarget
=
Some
(
aBuilder
-
>
GetCurrentScrollbarTarget
(
)
)
;
}
}
}
