#
ifndef
NS_CSS_RENDERING_BORDERS_H
#
define
NS_CSS_RENDERING_BORDERS_H
#
include
"
gfxRect
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
BezierUtils
.
h
"
#
include
"
mozilla
/
gfx
/
PathHelpers
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsImageRenderer
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
gfxUtils
.
h
"
struct
nsBorderColors
;
class
nsDisplayBorder
;
namespace
mozilla
{
namespace
gfx
{
class
GradientStops
;
}
namespace
layers
{
class
WebRenderDisplayItemLayer
;
}
}
#
undef
DEBUG_NEW_BORDERS
typedef
enum
{
BorderColorStyleNone
BorderColorStyleSolid
BorderColorStyleLight
BorderColorStyleDark
}
BorderColorStyle
;
class
nsIDocument
;
class
nsPresContext
;
class
nsCSSBorderRenderer
final
{
typedef
mozilla
:
:
gfx
:
:
Bezier
Bezier
;
typedef
mozilla
:
:
gfx
:
:
ColorPattern
ColorPattern
;
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
typedef
mozilla
:
:
gfx
:
:
Float
Float
;
typedef
mozilla
:
:
gfx
:
:
Path
Path
;
typedef
mozilla
:
:
gfx
:
:
Point
Point
;
typedef
mozilla
:
:
gfx
:
:
Rect
Rect
;
typedef
mozilla
:
:
gfx
:
:
RectCornerRadii
RectCornerRadii
;
typedef
mozilla
:
:
gfx
:
:
StrokeOptions
StrokeOptions
;
friend
class
nsDisplayBorder
;
friend
class
nsDisplayOutline
;
friend
class
nsDisplayButtonBorder
;
friend
class
nsDisplayButtonForeground
;
public
:
nsCSSBorderRenderer
(
nsPresContext
*
aPresContext
const
nsIDocument
*
aDocument
DrawTarget
*
aDrawTarget
const
Rect
&
aDirtyRect
Rect
&
aOuterRect
const
uint8_t
*
aBorderStyles
const
Float
*
aBorderWidths
RectCornerRadii
&
aBorderRadii
const
nscolor
*
aBorderColors
nsBorderColors
*
const
*
aCompositeColors
nscolor
aBackgroundColor
)
;
void
DrawBorders
(
)
;
void
CreateWebRenderCommands
(
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
layers
:
:
WebRenderDisplayItemLayer
*
aLayer
)
;
static
void
ComputeInnerRadii
(
const
RectCornerRadii
&
aRadii
const
Float
*
aBorderSizes
RectCornerRadii
*
aInnerRadiiRet
)
;
static
void
ComputeOuterRadii
(
const
RectCornerRadii
&
aRadii
const
Float
*
aBorderSizes
RectCornerRadii
*
aOuterRadiiRet
)
;
static
bool
AllCornersZeroSize
(
const
RectCornerRadii
&
corners
)
;
private
:
RectCornerRadii
mBorderCornerDimensions
;
nsPresContext
*
mPresContext
;
const
nsIDocument
*
mDocument
;
DrawTarget
*
mDrawTarget
;
Rect
mDirtyRect
;
Rect
mOuterRect
;
Rect
mInnerRect
;
uint8_t
mBorderStyles
[
4
]
;
Float
mBorderWidths
[
4
]
;
RectCornerRadii
mBorderRadii
;
nscolor
mBorderColors
[
4
]
;
nsBorderColors
*
mCompositeColors
[
4
]
;
nscolor
mBackgroundColor
;
bool
mOneUnitBorder
;
bool
mNoBorderRadius
;
bool
mAvoidStroke
;
bool
AreBorderSideFinalStylesSame
(
uint8_t
aSides
)
;
bool
IsSolidCornerStyle
(
uint8_t
aStyle
mozilla
:
:
Corner
aCorner
)
;
bool
IsCornerMergeable
(
mozilla
:
:
Corner
aCorner
)
;
BorderColorStyle
BorderColorStyleForSolidCorner
(
uint8_t
aStyle
mozilla
:
:
Corner
aCorner
)
;
Rect
GetCornerRect
(
mozilla
:
:
Corner
aCorner
)
;
Rect
GetSideClipWithoutCornersRect
(
mozilla
:
:
Side
aSide
)
;
already_AddRefed
<
Path
>
GetSideClipSubPath
(
mozilla
:
:
Side
aSide
)
;
Point
GetStraightBorderPoint
(
mozilla
:
:
Side
aSide
mozilla
:
:
Corner
aCorner
bool
*
aIsUnfilled
Float
aDotOffset
=
0
.
0f
)
;
void
GetOuterAndInnerBezier
(
Bezier
*
aOuterBezier
Bezier
*
aInnerBezier
mozilla
:
:
Corner
aCorner
)
;
void
FillSolidBorder
(
const
Rect
&
aOuterRect
const
Rect
&
aInnerRect
const
RectCornerRadii
&
aBorderRadii
const
Float
*
aBorderSizes
int
aSides
const
ColorPattern
&
aColor
)
;
void
DrawBorderSides
(
int
aSides
)
;
void
DrawBorderSidesCompositeColors
(
int
aSides
const
nsBorderColors
*
compositeColors
)
;
void
SetupDashedOptions
(
StrokeOptions
*
aStrokeOptions
Float
aDash
[
2
]
mozilla
:
:
Side
aSide
Float
aBorderLength
bool
isCorner
)
;
void
DrawDashedOrDottedSide
(
mozilla
:
:
Side
aSide
)
;
void
DrawDottedSideSlow
(
mozilla
:
:
Side
aSide
)
;
void
DrawDashedOrDottedCorner
(
mozilla
:
:
Side
aSide
mozilla
:
:
Corner
aCorner
)
;
void
DrawDottedCornerSlow
(
mozilla
:
:
Side
aSide
mozilla
:
:
Corner
aCorner
)
;
void
DrawDashedCornerSlow
(
mozilla
:
:
Side
aSide
mozilla
:
:
Corner
aCorner
)
;
void
DrawFallbackSolidCorner
(
mozilla
:
:
Side
aSide
mozilla
:
:
Corner
aCorner
)
;
bool
AllBordersSameWidth
(
)
;
bool
AllBordersSolid
(
bool
*
aHasCompositeColors
)
;
void
DrawSingleWidthSolidBorder
(
)
;
void
DrawNoCompositeColorSolidBorder
(
)
;
void
DrawRectangularCompositeColors
(
)
;
}
;
class
nsCSSBorderImageRenderer
final
{
typedef
mozilla
:
:
nsImageRenderer
nsImageRenderer
;
public
:
static
mozilla
:
:
Maybe
<
nsCSSBorderImageRenderer
>
CreateBorderImageRenderer
(
nsPresContext
*
aPresContext
nsIFrame
*
aForFrame
const
nsRect
&
aBorderArea
const
nsStyleBorder
&
aStyleBorder
const
nsRect
&
aDirtyRect
nsIFrame
:
:
Sides
aSkipSides
uint32_t
aFlags
mozilla
:
:
image
:
:
DrawResult
*
aDrawResult
)
;
mozilla
:
:
image
:
:
DrawResult
DrawBorderImage
(
nsPresContext
*
aPresContext
nsRenderingContext
&
aRenderingContext
nsIFrame
*
aForFrame
const
nsRect
&
aDirtyRect
)
;
nsCSSBorderImageRenderer
(
const
nsCSSBorderImageRenderer
&
aRhs
)
;
nsCSSBorderImageRenderer
&
operator
=
(
const
nsCSSBorderImageRenderer
&
aRhs
)
;
private
:
nsCSSBorderImageRenderer
(
nsIFrame
*
aForFrame
const
nsRect
&
aBorderArea
const
nsStyleBorder
&
aStyleBorder
nsIFrame
:
:
Sides
aSkipSides
const
nsImageRenderer
&
aImageRenderer
)
;
nsImageRenderer
mImageRenderer
;
nsSize
mImageSize
;
nsMargin
mSlice
;
nsMargin
mWidths
;
nsMargin
mImageOutset
;
nsRect
mArea
;
nsRect
mClip
;
uint8_t
mRepeatModeHorizontal
;
uint8_t
mRepeatModeVertical
;
uint8_t
mFill
;
friend
class
nsDisplayBorder
;
}
;
namespace
mozilla
{
#
ifdef
DEBUG_NEW_BORDERS
#
include
<
stdarg
.
h
>
static
inline
void
PrintAsString
(
const
mozilla
:
:
gfx
:
:
Point
&
p
)
{
fprintf
(
stderr
"
[
%
f
%
f
]
"
p
.
x
p
.
y
)
;
}
static
inline
void
PrintAsString
(
const
mozilla
:
:
gfx
:
:
Size
&
s
)
{
fprintf
(
stderr
"
[
%
f
%
f
]
"
s
.
width
s
.
height
)
;
}
static
inline
void
PrintAsString
(
const
mozilla
:
:
gfx
:
:
Rect
&
r
)
{
fprintf
(
stderr
"
[
%
f
%
f
%
f
%
f
]
"
r
.
X
(
)
r
.
Y
(
)
r
.
Width
(
)
r
.
Height
(
)
)
;
}
static
inline
void
PrintAsString
(
const
mozilla
:
:
gfx
:
:
Float
f
)
{
fprintf
(
stderr
"
%
f
"
f
)
;
}
static
inline
void
PrintAsString
(
const
char
*
s
)
{
fprintf
(
stderr
"
%
s
"
s
)
;
}
static
inline
void
PrintAsStringNewline
(
const
char
*
s
=
nullptr
)
{
if
(
s
)
fprintf
(
stderr
"
%
s
"
s
)
;
fprintf
(
stderr
"
\
n
"
)
;
fflush
(
stderr
)
;
}
static
inline
void
PrintAsFormatString
(
const
char
*
fmt
.
.
.
)
{
va_list
vl
;
va_start
(
vl
fmt
)
;
vfprintf
(
stderr
fmt
vl
)
;
va_end
(
vl
)
;
}
#
else
static
inline
void
PrintAsString
(
const
mozilla
:
:
gfx
:
:
Point
&
p
)
{
}
static
inline
void
PrintAsString
(
const
mozilla
:
:
gfx
:
:
Size
&
s
)
{
}
static
inline
void
PrintAsString
(
const
mozilla
:
:
gfx
:
:
Rect
&
r
)
{
}
static
inline
void
PrintAsString
(
const
mozilla
:
:
gfx
:
:
Float
f
)
{
}
static
inline
void
PrintAsString
(
const
char
*
s
)
{
}
static
inline
void
PrintAsStringNewline
(
const
char
*
s
=
nullptr
)
{
}
static
inline
void
PrintAsFormatString
(
const
char
*
fmt
.
.
.
)
{
}
#
endif
}
#
endif
