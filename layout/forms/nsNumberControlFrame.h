#
ifndef
nsNumberControlFrame_h__
#
define
nsNumberControlFrame_h__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsTextControlFrame
.
h
"
#
include
"
nsIAnonymousContentCreator
.
h
"
#
include
"
nsCOMPtr
.
h
"
class
nsPresContext
;
namespace
mozilla
{
enum
class
PseudoStyleType
:
uint8_t
;
class
PresShell
;
class
WidgetEvent
;
class
WidgetGUIEvent
;
namespace
dom
{
class
HTMLInputElement
;
}
}
class
nsNumberControlFrame
final
:
public
nsTextControlFrame
{
friend
nsIFrame
*
NS_NewNumberControlFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
typedef
mozilla
:
:
PseudoStyleType
PseudoStyleType
;
typedef
mozilla
:
:
dom
:
:
Element
Element
;
typedef
mozilla
:
:
dom
:
:
HTMLInputElement
HTMLInputElement
;
typedef
mozilla
:
:
WidgetEvent
WidgetEvent
;
typedef
mozilla
:
:
WidgetGUIEvent
WidgetGUIEvent
;
explicit
nsNumberControlFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsNumberControlFrame
)
#
ifdef
ACCESSIBILITY
mozilla
:
:
a11y
:
:
AccType
AccessibleType
(
)
override
;
#
endif
nsresult
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
u
"
NumberControl
"
_ns
aResult
)
;
}
#
endif
static
nsNumberControlFrame
*
GetNumberControlFrameForSpinButton
(
nsIFrame
*
aFrame
)
;
enum
SpinButtonEnum
{
eSpinButtonNone
eSpinButtonUp
eSpinButtonDown
}
;
int32_t
GetSpinButtonForPointerEvent
(
WidgetGUIEvent
*
aEvent
)
const
;
void
SpinnerStateChanged
(
)
const
;
bool
SpinnerUpButtonIsDepressed
(
)
const
;
bool
SpinnerDownButtonIsDepressed
(
)
const
;
void
HandleSelectCall
(
)
;
bool
ShouldUseNativeStyleForSpinner
(
)
const
;
private
:
nsCOMPtr
<
Element
>
mSpinUp
;
nsCOMPtr
<
Element
>
mSpinDown
;
}
;
#
endif
