#
ifndef
nsNumberControlFrame_h__
#
define
nsNumberControlFrame_h__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsIFormControlFrame
.
h
"
#
include
"
nsIAnonymousContentCreator
.
h
"
#
include
"
nsCOMPtr
.
h
"
class
nsITextControlFrame
;
class
nsPresContext
;
namespace
mozilla
{
enum
class
PseudoStyleType
:
uint8_t
;
class
WidgetEvent
;
class
WidgetGUIEvent
;
namespace
dom
{
class
HTMLInputElement
;
}
}
class
nsNumberControlFrame
final
:
public
nsContainerFrame
public
nsIAnonymousContentCreator
public
nsIFormControlFrame
{
friend
nsIFrame
*
NS_NewNumberControlFrame
(
nsIPresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
typedef
mozilla
:
:
PseudoStyleType
PseudoStyleType
;
typedef
mozilla
:
:
dom
:
:
Element
Element
;
typedef
mozilla
:
:
dom
:
:
HTMLInputElement
HTMLInputElement
;
typedef
mozilla
:
:
WidgetEvent
WidgetEvent
;
typedef
mozilla
:
:
WidgetGUIEvent
WidgetGUIEvent
;
explicit
nsNumberControlFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsNumberControlFrame
)
virtual
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
override
;
virtual
void
ContentStatesChanged
(
mozilla
:
:
EventStates
aStates
)
override
;
#
ifdef
ACCESSIBILITY
virtual
mozilla
:
:
a11y
:
:
AccType
AccessibleType
(
)
override
;
#
endif
virtual
nscoord
GetMinISize
(
gfxContext
*
aRenderingContext
)
override
;
virtual
nscoord
GetPrefISize
(
gfxContext
*
aRenderingContext
)
override
;
virtual
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
virtual
nsresult
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
override
;
virtual
void
AppendAnonymousContentTo
(
nsTArray
<
nsIContent
*
>
&
aElements
uint32_t
aFilter
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
NumberControl
"
)
aResult
)
;
}
#
endif
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsContainerFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eReplaced
|
nsIFrame
:
:
eReplacedContainsBlock
)
)
;
}
virtual
void
SetFocus
(
bool
aOn
bool
aRepaint
)
override
;
virtual
nsresult
SetFormProperty
(
nsAtom
*
aName
const
nsAString
&
aValue
)
override
;
void
SetValueOfAnonTextControl
(
const
nsAString
&
aValue
)
;
void
GetValueOfAnonTextControl
(
nsAString
&
aValue
)
;
bool
AnonTextControlIsEmpty
(
)
;
void
HandlingInputEvent
(
bool
aHandlingEvent
)
{
mHandlingInputEvent
=
aHandlingEvent
;
}
HTMLInputElement
*
GetAnonTextControl
(
)
;
static
nsNumberControlFrame
*
GetNumberControlFrameForTextField
(
nsIFrame
*
aFrame
)
;
static
nsNumberControlFrame
*
GetNumberControlFrameForSpinButton
(
nsIFrame
*
aFrame
)
;
enum
SpinButtonEnum
{
eSpinButtonNone
eSpinButtonUp
eSpinButtonDown
}
;
int32_t
GetSpinButtonForPointerEvent
(
WidgetGUIEvent
*
aEvent
)
const
;
void
SpinnerStateChanged
(
)
const
;
bool
SpinnerUpButtonIsDepressed
(
)
const
;
bool
SpinnerDownButtonIsDepressed
(
)
const
;
bool
IsFocused
(
)
const
;
void
HandleFocusEvent
(
WidgetEvent
*
aEvent
)
;
void
HandleSelectCall
(
)
;
bool
ShouldUseNativeStyleForSpinner
(
)
const
;
private
:
nsITextControlFrame
*
GetTextFieldFrame
(
)
;
already_AddRefed
<
Element
>
MakeAnonymousElement
(
Element
*
aParent
nsAtom
*
aTagName
PseudoStyleType
aPseudoType
)
;
class
SyncDisabledStateEvent
;
friend
class
SyncDisabledStateEvent
;
class
SyncDisabledStateEvent
:
public
mozilla
:
:
Runnable
{
public
:
explicit
SyncDisabledStateEvent
(
nsNumberControlFrame
*
aFrame
)
:
mozilla
:
:
Runnable
(
"
nsNumberControlFrame
:
:
SyncDisabledStateEvent
"
)
mFrame
(
aFrame
)
{
}
NS_IMETHOD
Run
(
)
override
{
nsNumberControlFrame
*
frame
=
static_cast
<
nsNumberControlFrame
*
>
(
mFrame
.
GetFrame
(
)
)
;
NS_ENSURE_STATE
(
frame
)
;
frame
-
>
SyncDisabledState
(
)
;
return
NS_OK
;
}
private
:
WeakFrame
mFrame
;
}
;
void
SyncDisabledState
(
)
;
nsCOMPtr
<
Element
>
mOuterWrapper
;
nsCOMPtr
<
Element
>
mTextField
;
nsCOMPtr
<
Element
>
mSpinBox
;
nsCOMPtr
<
Element
>
mSpinUp
;
nsCOMPtr
<
Element
>
mSpinDown
;
bool
mHandlingInputEvent
;
}
;
#
endif
