#
ifndef
nsListControlFrame_h___
#
define
nsListControlFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ScrollContainerFrame
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsISelectControlFrame
.
h
"
#
include
"
nsSelectsAreaFrame
.
h
"
class
nsComboboxControlFrame
;
class
nsPresContext
;
namespace
mozilla
{
class
PresShell
;
class
HTMLSelectEventListener
;
namespace
dom
{
class
Event
;
class
HTMLOptionElement
;
class
HTMLSelectElement
;
class
HTMLOptionsCollection
;
}
}
class
nsListControlFrame
final
:
public
mozilla
:
:
ScrollContainerFrame
public
nsISelectControlFrame
{
public
:
using
HTMLOptionElement
=
mozilla
:
:
dom
:
:
HTMLOptionElement
;
friend
nsListControlFrame
*
NS_NewListControlFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsListControlFrame
)
Maybe
<
nscoord
>
GetNaturalBaselineBOffset
(
mozilla
:
:
WritingMode
aWM
BaselineSharingGroup
aBaselineGroup
BaselineExportContext
)
const
override
;
nsresult
HandleEvent
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
final
;
void
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
&
aChildList
)
final
;
nscoord
IntrinsicISize
(
const
mozilla
:
:
IntrinsicSizeInput
&
aInput
mozilla
:
:
IntrinsicISizeType
aType
)
final
;
void
Reflow
(
nsPresContext
*
aCX
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
final
;
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
final
;
bool
ReflowFinished
(
)
final
;
void
Destroy
(
DestroyContext
&
)
override
;
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
final
;
nsContainerFrame
*
GetContentInsertionFrame
(
)
final
;
int32_t
GetEndSelectionIndex
(
)
const
{
return
mEndSelectionIndex
;
}
mozilla
:
:
dom
:
:
HTMLOptionElement
*
GetCurrentOption
(
)
const
;
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
final
;
#
endif
void
ElementStateChanged
(
mozilla
:
:
dom
:
:
ElementState
aStates
)
final
;
bool
ShouldPropagateComputedBSizeToScrolledContent
(
)
const
final
;
#
ifdef
ACCESSIBILITY
mozilla
:
:
a11y
:
:
AccType
AccessibleType
(
)
final
;
#
endif
int32_t
GetSelectedIndex
(
)
;
void
GetOptionText
(
uint32_t
aIndex
nsAString
&
aStr
)
;
void
CaptureMouseEvents
(
bool
aGrabMouseEvents
)
;
nscoord
GetBSizeOfARow
(
)
;
uint32_t
GetNumberOfOptions
(
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
OnContentReset
(
)
;
NS_IMETHOD
AddOption
(
int32_t
index
)
final
;
NS_IMETHOD
RemoveOption
(
int32_t
index
)
final
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHOD
DoneAddingChildren
(
bool
aIsDone
)
final
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHOD
OnOptionSelected
(
int32_t
aIndex
bool
aSelected
)
final
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHOD_
(
void
)
OnSetSelectedIndex
(
int32_t
aOldIndex
int32_t
aNewIndex
)
final
;
MOZ_CAN_RUN_SCRIPT
nsresult
HandleLeftButtonMouseDown
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
HandleLeftButtonMouseUp
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DragMove
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
)
;
MOZ_CAN_RUN_SCRIPT
MOZ_CAN_RUN_SCRIPT
bool
PerformSelection
(
int32_t
aClickedIndex
bool
aIsShift
bool
aIsControl
)
;
MOZ_CAN_RUN_SCRIPT
void
UpdateSelectionAfterKeyEvent
(
int32_t
aNewIndex
uint32_t
aCharCode
bool
aIsShift
bool
aIsControlOrMeta
bool
aIsControlSelectMode
)
;
mozilla
:
:
dom
:
:
HTMLOptionsCollection
*
GetOptions
(
)
const
;
HTMLOptionElement
*
GetOption
(
uint32_t
aIndex
)
const
;
bool
IsFocused
(
)
const
;
void
PaintFocus
(
mozilla
:
:
gfx
:
:
DrawTarget
*
aDrawTarget
nsPoint
aPt
)
;
void
InvalidateFocus
(
)
;
nscoord
CalcBSizeOfARow
(
)
;
bool
MightNeedSecondPass
(
)
const
{
return
mMightNeedSecondPass
;
}
void
SetSuppressScrollbarUpdate
(
bool
aSuppress
)
{
ScrollContainerFrame
:
:
SetSuppressScrollbarUpdate
(
aSuppress
)
;
}
uint32_t
GetNumDisplayRows
(
)
const
{
return
mNumDisplayRows
;
}
#
ifdef
ACCESSIBILITY
void
FireMenuItemActiveEvent
(
nsIContent
*
aPreviousOption
)
;
#
endif
protected
:
MOZ_CAN_RUN_SCRIPT
bool
UpdateSelection
(
)
;
bool
GetMultiple
(
)
const
;
mozilla
:
:
dom
:
:
HTMLSelectElement
&
Select
(
)
const
;
bool
IsOptionInteractivelySelectable
(
int32_t
aIndex
)
const
;
static
bool
IsOptionInteractivelySelectable
(
mozilla
:
:
dom
:
:
HTMLSelectElement
*
aSelect
mozilla
:
:
dom
:
:
HTMLOptionElement
*
aOption
)
;
MOZ_CAN_RUN_SCRIPT
void
ScrollToFrame
(
HTMLOptionElement
&
aOptElement
)
;
MOZ_CAN_RUN_SCRIPT
void
ScrollToIndex
(
int32_t
anIndex
)
;
public
:
MOZ_CAN_RUN_SCRIPT
void
ResetList
(
bool
aAllowScrolling
)
;
protected
:
explicit
nsListControlFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
virtual
~
nsListControlFrame
(
)
;
nsresult
GetIndexFromDOMEvent
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
int32_t
&
aCurIndex
)
;
bool
CheckIfAllFramesHere
(
)
;
nscoord
CalcFallbackRowBSize
(
float
aFontSizeInflation
)
;
nscoord
CalcIntrinsicBSize
(
nscoord
aBSizeOfARow
int32_t
aNumberOfOptions
)
;
void
SetComboboxItem
(
int32_t
aIndex
)
;
bool
SetOptionsSelectedFromFrame
(
int32_t
aStartIndex
int32_t
aEndIndex
bool
aValue
bool
aClearAll
)
;
bool
ToggleOptionSelectedFromFrame
(
int32_t
aIndex
)
;
MOZ_CAN_RUN_SCRIPT
bool
SingleSelection
(
int32_t
aClickedIndex
bool
aDoToggle
)
;
bool
ExtendedSelection
(
int32_t
aStartIndex
int32_t
aEndIndex
bool
aClearAll
)
;
MOZ_CAN_RUN_SCRIPT
bool
HandleListSelection
(
mozilla
:
:
dom
:
:
Event
*
aDOMEvent
int32_t
selectedIndex
)
;
void
InitSelectionRange
(
int32_t
aClickedIndex
)
;
public
:
nsSelectsAreaFrame
*
GetOptionsContainer
(
)
const
{
return
static_cast
<
nsSelectsAreaFrame
*
>
(
GetScrolledFrame
(
)
)
;
}
static
constexpr
int32_t
kNothingSelected
=
-
1
;
protected
:
nscoord
BSizeOfARow
(
)
{
return
GetOptionsContainer
(
)
-
>
BSizeOfARow
(
)
;
}
uint32_t
GetNumberOfRows
(
)
;
int32_t
mStartSelectionIndex
=
0
;
int32_t
mEndSelectionIndex
=
0
;
uint32_t
mNumDisplayRows
=
0
;
bool
mChangesSinceDragStart
:
1
;
bool
mItemSelectionStarted
:
1
;
bool
mIsAllContentHere
:
1
;
bool
mIsAllFramesHere
:
1
;
bool
mHasBeenInitialized
:
1
;
bool
mNeedToReset
:
1
;
bool
mPostChildrenLoadedReset
:
1
;
bool
mMightNeedSecondPass
:
1
;
bool
mReflowWasInterrupted
:
1
;
RefPtr
<
mozilla
:
:
HTMLSelectEventListener
>
mEventListener
;
static
nsListControlFrame
*
sFocused
;
}
;
#
endif
